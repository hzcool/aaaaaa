{
    "description": "![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1556D/63568455333cc0a029d6e5fa4f79ae6dd332397f.png)This is an interactive task\n\nWilliam has a certain sequence of integers $ a_1, a_2, \\dots, a_n $ in his mind, but due to security concerns, he does not want to reveal it to you completely. William is ready to respond to no more than $ 2 \\cdot n $ of the following questions:\n\n- What is the result of a [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of two items with indices $ i $ and $ j $ ( $ i \\neq j $ )\n- What is the result of a [bitwise OR](https://en.wikipedia.org/wiki/Bitwise_operation#OR) of two items with indices $ i $ and $ j $ ( $ i \\neq j $ )\n\nYou can ask William these questions and you need to find the $ k $ -th smallest number of the sequence.\n\nFormally the $ k $ -th smallest number is equal to the number at the $ k $ -th place in a 1-indexed array sorted in non-decreasing order. For example in array $ [5, 3, 3, 10, 1] $ $ 4 $ th smallest number is equal to $ 5 $ , and $ 2 $ nd and $ 3 $ rd are $ 3 $ .",
    "inputFormat": "It is guaranteed that for each element in a sequence the condition $ 0 \\le a_i \\le 10^9 $ is satisfied.",
    "outputFormat": "In the first line you will be given two integers $ n $ and $ k $ $ (3 \\le n \\le 10^4, 1 \\le k \\le n) $ , which are the number of items in the sequence $ a $ and the number $ k $ .\n\nAfter that, you can ask no more than $ 2 \\cdot n $ questions (not including the \"finish\" operation).\n\nEach line of your output may be of one of the following types:\n\n- \"or i j\" $ (1 \\le i, j \\le n, i \\neq j) $ , where $ i $ and $ j $ are indices of items for which you want to calculate the bitwise OR.\n- \"and i j\" $ (1 \\le i, j \\le n, i \\neq j) $ , where $ i $ and $ j $ are indices of items for which you want to calculate the bitwise AND.\n- \"finish res\", where $ res $ is the $ k $ th smallest number in the sequence. After outputting this line the program execution must conclude.\n\nIn response to the first two types of queries, you will get an integer $ x $ , the result of the operation for the numbers you have selected.\n\nAfter outputting a line do not forget to output a new line character and flush the output buffer. Otherwise you will get the \"Idleness limit exceeded\". To flush the buffer use:\n\n- fflush(stdout) in C++\n- System.out.flush() in Java\n- stdout.flush() in Python\n- flush(output) in Pascal\n- for other languages refer to documentation\n\nIf you perform an incorrect query the response will be $ -1 $ . After receiving response $ -1 $ you must immediately halt your program in order to receive an \"Incorrect answer\" verdict.\n\nHacking\n\nTo perform a hack you will need to use the following format:\n\nThe first line must contain two integers $ n $ and $ k $ $ (3 \\le n \\le 10^4, 1 \\le k \\le n) $ , which are the number of items in the sequence $ a $ and the number $ k $ .\n\nThe second line must contain $ n $ integers $ a_1, a_2, \\dots, a_n $ $ (0 \\le a_i \\le 10^9) $ , the sequence $ a $ .",
    "samples": [
        [
            "7 6\n\n2\n\n7",
            "and 2 5\n\nor 5 6\n\nfinish 5"
        ]
    ],
    "hint": "In the example, the hidden sequence is $ [1, 6, 4, 2, 3, 5, 4] $ .\n\nBelow is the interaction in the example.\n\n Query (contestant's program)  Response (interactor)  Notes  and 2 5  2  $ a_2=6 $ , $ a_5=3 $ . Interactor returns bitwise AND of the given numbers.  or 5 6  7  $ a_5=3 $ , $ a_6=5 $ . Interactor returns bitwise OR of the given numbers.  finish 5   $ 5 $ is the correct answer. Note that you must find the value and not the index of the kth smallest number.",
    "translation": "\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570 $n,k$\uff0c\u4f60\u9700\u8981\u901a\u8fc7 $\\leq2n$ \u6b21\u8be2\u95ee\u731c\u51fa\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $\\{a_i\\}$ \u4e2d\u7684\u7b2c $k$ \u5c0f\u503c\u3002\n\n\u8be2\u95ee\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff1a\n\n1. `or i j`\uff0c\u4ea4\u4e92\u5668\u4f1a\u8fd4\u56de $a_i \\operatorname{or}a_j$ \u7684\u503c\u3002\n2. `and i j`\uff0c\u4ea4\u4e92\u5668\u4f1a\u8fd4\u56de $a_i\\operatorname{and}a_j$ \u7684\u503c\u3002\n\n\u5176\u4e2d\u9700\u8981\u6ee1\u8db3 $1\\leq i,j\\leq n$ \u4e14 $i\\not = j$\u3002\n\n\u6700\u540e\u4f60\u9700\u8981\u8f93\u51fa `finish res`\uff0c\u5176\u4e2d $res$ \u8868\u793a\u4f60\u7684\u7b54\u6848\u3002\n\n$3\\leq n \\leq 10^4,1\\leq k\\leq n,0\\leq a_i\\leq 10^9$\u3002"
}