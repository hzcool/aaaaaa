{
    "description": "Gildong is experimenting with an interesting machine Graph Traveler. In Graph Traveler, there is a directed graph consisting of $ n $ vertices numbered from $ 1 $ to $ n $ . The $ i $ -th vertex has $ m_i $ outgoing edges that are labeled as $ e_i[0] $ , $ e_i[1] $ , $ \\ldots $ , $ e_i[m_i-1] $ , each representing the destination vertex of the edge. The graph can have multiple edges and self-loops. The $ i $ -th vertex also has an integer $ k_i $ written on itself.\n\nA travel on this graph works as follows.\n\n1. Gildong chooses a vertex to start from, and an integer to start with. Set the variable $ c $ to this integer.\n2. After arriving at the vertex $ i $ , or when Gildong begins the travel at some vertex $ i $ , add $ k_i $ to $ c $ .\n3. The next vertex is $ e_i[x] $ where $ x $ is an integer $ 0 \\le x \\le m_i-1 $ satisfying $ x \\equiv c \\pmod {m_i} $ . Go to the next vertex and go back to step 2.\n\nIt's obvious that a travel never ends, since the 2nd and the 3rd step will be repeated endlessly.\n\nFor example, assume that Gildong starts at vertex $ 1 $ with $ c = 5 $ , and $ m_1 = 2 $ , $ e_1[0] = 1 $ , $ e_1[1] = 2 $ , $ k_1 = -3 $ . Right after he starts at vertex $ 1 $ , $ c $ becomes $ 2 $ . Since the only integer $ x $ ( $ 0 \\le x \\le 1 $ ) where $ x \\equiv c \\pmod {m_i} $ is $ 0 $ , Gildong goes to vertex $ e_1[0] = 1 $ . After arriving at vertex $ 1 $ again, $ c $ becomes $ -1 $ . The only integer $ x $ satisfying the conditions is $ 1 $ , so he goes to vertex $ e_1[1] = 2 $ , and so on.\n\nSince Gildong is quite inquisitive, he's going to ask you $ q $ queries. He wants to know how many distinct vertices will be visited infinitely many times, if he starts the travel from a certain vertex with a certain value of $ c $ . Note that you should not count the vertices that will be visited only finite times.",
    "inputFormat": "The first line of the input contains an integer $ n $ ( $ 1 \\le n \\le 1000 $ ), the number of vertices in the graph.\n\nThe second line contains $ n $ integers. The $ i $ -th integer is $ k_i $ ( $ -10^9 \\le k_i \\le 10^9 $ ), the integer written on the $ i $ -th vertex.\n\nNext $ 2 \\cdot n $ lines describe the edges of each vertex. The $ (2 \\cdot i + 1) $ -st line contains an integer $ m_i $ ( $ 1 \\le m_i \\le 10 $ ), the number of outgoing edges of the $ i $ -th vertex. The $ (2 \\cdot i + 2) $ -nd line contains $ m_i $ integers $ e_i[0] $ , $ e_i[1] $ , $ \\ldots $ , $ e_i[m_i-1] $ , each having an integer value between $ 1 $ and $ n $ , inclusive.\n\nNext line contains an integer $ q $ ( $ 1 \\le q \\le 10^5 $ ), the number of queries Gildong wants to ask.\n\nNext $ q $ lines contains two integers $ x $ and $ y $ ( $ 1 \\le x \\le n $ , $ -10^9 \\le y \\le 10^9 $ ) each, which mean that the start vertex is $ x $ and the starting value of $ c $ is $ y $ .",
    "outputFormat": "For each query, print the number of distinct vertices that will be visited infinitely many times, if Gildong starts at vertex $ x $ with starting integer $ y $ .",
    "samples": [
        [
            "4\n0 0 0 0\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 1\n6\n1 0\n2 0\n3 -1\n4 -2\n1 1\n1 5\n",
            "1\n1\n2\n1\n3\n2\n"
        ],
        [
            "4\n4 -5 -3 -1\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 1\n6\n1 0\n2 0\n3 -1\n4 -2\n1 1\n1 5\n",
            "1\n1\n1\n3\n1\n1\n"
        ]
    ],
    "hint": "The first example can be shown like the following image:\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1200F/a011bde48ef56a4766df088c213c0f3fb6972396.png)Three integers are marked on $ i $ -th vertex: $ i $ , $ k_i $ , and $ m_i $ respectively. The outgoing edges are labeled with an integer representing the edge number of $ i $ -th vertex.\n\nThe travel for each query works as follows. It is described as a sequence of phrases, each in the format \"vertex ( $ c $ after $ k_i $ added)\".\n\n- $ 1(0) \\to 2(0) \\to 2(0) \\to \\ldots $\n- $ 2(0) \\to 2(0) \\to \\ldots $\n- $ 3(-1) \\to 1(-1) \\to 3(-1) \\to \\ldots $\n- $ 4(-2) \\to 2(-2) \\to 2(-2) \\to \\ldots $\n- $ 1(1) \\to 3(1) \\to 4(1) \\to 1(1) \\to \\ldots $\n- $ 1(5) \\to 3(5) \\to 1(5) \\to \\ldots $\n\nThe second example is same as the first example, except that the vertices have non-zero values. Therefore the answers to the queries also differ from the first example.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1200F/fa2b54acddea0c522ade11c446830a8460d01a6b.png)The queries for the second example works as follows:\n\n- $ 1(4) \\to 2(-1) \\to 2(-6) \\to \\ldots $\n- $ 2(-5) \\to 2(-10) \\to \\ldots $\n- $ 3(-4) \\to 1(0) \\to 2(-5) \\to 2(-10) \\to \\ldots $\n- $ 4(-3) \\to 1(1) \\to 3(-2) \\to 4(-3) \\to \\ldots $\n- $ 1(5) \\to 3(2) \\to 1(6) \\to 2(1) \\to 2(-4) \\to \\ldots $\n- $ 1(9) \\to 3(6) \\to 2(1) \\to 2(-4) \\to \\ldots $",
    "translation": "Gildong\u6b63\u5728\u8bd5\u9a8c\u4e00\u4e2a\u6709\u8da3\u7684Graph Traveler,\u5177\u4f53\u6765\u8bf4,\u8fd9\u4e2aGraph Traveler\u662f\u4e2a\u7531n\u4e2a\u7f16\u53f7\u4e3a1-n\u7684\u70b9\u6784\u6210\u7684\u6709\u5411\u56fe,\u7b2ci\u4e2a\u70b9\u6709$m_i$\u6761\u51fa\u8fb9,\u8fb9\u5230\u8fbe\u7684\u70b9\u5206\u522b\u88ab\u8bb0\u4e3a$e_i[0],e_i[1]...e_i[m_i-1]$.\u6bcf\u4e2a\u70b9\u8fd8\u6709\u70b9\u6743$k_i$\n\n\u73b0\u5728\u6709$q$\u4e2a\u8be2\u95ee,\u6bcf\u4e2a\u8be2\u95ee\u8981\u6c42\u4ece\u67d0\u4e2a\u70b9\u5f00\u59cb,\u521d\u59cb\u6709\u4e2a\u70b9\u6743$c$,\u6bcf\u6b21\u5230\u4e00\u4e2a\u70b9$i$(\u8d77\u70b9\u4e5f\u7b97)\u5c31\u628a\u70b9\u6743$c$\u52a0\u4e0a$k_i$,\u7136\u540e\u8d70$i$\u7684\u51fa\u8fb9$e_i[x](x \\equiv c\\mod m_i)$.\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u4f1a\u4e00\u76f4\u8fdb\u884c\u4e0b\u53bb\u7684.\u73b0\u5728\u95ee\u6bcf\u6b21\u8fd9\u6837\u8d70,\u56fe\u4e0a\u6709\u591a\u5c11\u4e2a\u70b9\u4f1a\u88ab\u7ecf\u8fc7\u65e0\u9650\u6b21"
}