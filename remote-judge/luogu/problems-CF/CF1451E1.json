{
    "description": "The only difference between the easy and hard versions is the constraints on the number of queries.\n\nThis is an interactive problem.\n\nRidbit has a hidden array $ a $ of $ n $ integers which he wants Ashish to guess. Note that $ n $ is a power of two. Ashish is allowed to ask three different types of queries. They are of the form\n\n- AND $ i $ $ j $ : ask for the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of elements $ a_i $ and $ a_j $ $ (1 \\leq i, j \\le n $ , $ i \\neq j) $\n- OR $ i $ $ j $ : ask for the [bitwise OR](https://en.wikipedia.org/wiki/Bitwise_operation#OR) of elements $ a_i $ and $ a_j $ $ (1 \\leq i, j \\le n $ , $ i \\neq j) $\n- XOR $ i $ $ j $ : ask for the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of elements $ a_i $ and $ a_j $ $ (1 \\leq i, j \\le n $ , $ i \\neq j) $\n\nCan you help Ashish guess the elements of the array?\n\nIn this version, each element takes a value in the range $ [0, n-1] $ (inclusive) and Ashish can ask no more than $ n+2 $ queries.",
    "inputFormat": "The first line of input contains one integer $ n $ $ (4 \\le n \\le 2^{16}) $ \u2014 the length of the array. It is guaranteed that $ n $ is a power of two.",
    "outputFormat": "To ask a query print a single line containing one of the following (without quotes)\n\n- \"AND i j\"\n- \"OR i j\"\n- \"XOR i j\"\n\n where $ i $ and $ j $ $ (1 \\leq i, j \\le n $ , $ i \\neq j) $ denote the indices being queried.For each query, you will receive an integer $ x $ whose value depends on the type of query. If the indices queried are invalid or you exceed the number of queries however, you will get $ x = -1 $ . In this case, you should terminate the program immediately.\n\nWhen you have guessed the elements of the array, print a single line \"! \" (without quotes), followed by $ n $ space-separated integers \u2014 the elements of the array.\n\nGuessing the array does not count towards the number of queries asked.\n\nThe interactor is not adaptive. The array $ a $ does not change with queries.\n\nAfter printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nTo hack the solution, use the following test format:\n\nOn the first line print a single integer $ n $ $ (4 \\le n \\le 2^{16}) $ \u2014 the length of the array. It must be a power of 2. The next line should contain $ n $ space-separated integers in the range $ [0, n-1] $ \u2014 the array $ a $ .",
    "samples": [
        [
            "4\n\n0\n\n2\n\n3",
            "OR 1 2\n\nOR 2 3\n\nXOR 2 4\n\n! 0 0 2 3"
        ]
    ],
    "hint": "The array $ a $ in the example is $ [0, 0, 2, 3] $ .",
    "translation": "**\u672c\u9898\u4f7f\u7528SPJ\u4ea4\u4e92\u8bc4\u6d4b**  \n\nRidbit\u6709\u4e00\u4e2a\u9690\u85cf\u7684\u6570\u7ec4$a$,$a$\u6709$n$\u4e2a\u6574\u6570\u60f3\u8ba9Ashish\u53bb\u731c\uff0c\u6ce8\u610f$n$\u662f$2$\u7684**\u6574\u6570\u6b21\u5e42**\u3002Ridbit\u5141\u8bb8Ashish\u63d0\u51fa\u4e09\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u67e5\u8be2\u3002\u5b83\u4eec\u5206\u522b\u662f\uff1a  \nAND$i$ $j$: \u6c42\u5143\u7d20 $a_i$ \u548c $a_j$\u6bcf\u4e00\u4f4d\u7684[$and$](https://en.wikipedia.org/wiki/Bitwise_operation#AND) ($1\u2264i$,$j\u2264n$,$i\u2260j$)  \nOR$i$ $j$: \u6c42\u5143\u7d20 $a_i$ \u548c $a_j$\u6bcf\u4e00\u4f4d\u7684[$or$](https://en.wikipedia.org/wiki/Bitwise_operation#OR) ($1\u2264i$,$j\u2264n$,$i\u2260j$)  \nXOR$i$ $j$: \u6c42\u5143\u7d20 $a_i$ \u548c $a_j$\u6bcf\u4e00\u4f4d\u7684[$xor$](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) ($1\u2264i$,$j\u2264n$,$i\u2260j$)\n\n\u6709\u9650\u5236\uff1a(1) Ashish \u6700\u591a\u53ef\u4ee5\u8be2\u95ee $n + 1$ \u6b21\u3002(2) $a$ \u6570\u7ec4\u6ee1\u8db3 $0 \\le a_i \\le n - 2$\u3002\n\n### \u8f93\u5165\n\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570$n$\uff0c\u4fdd\u8bc1$n$\u5728$4 \\leq n \\leq 2^{16}$\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u540c\u65f6\u4fdd\u8bc1$n$\u662f$2$\u7684\u6574\u6570\u6b21\u5e42\u3002\n### \u8f93\u51fa\n\u8bc4\u6d4b\u65f6\uff0c\u8bf7\u6253\u5370\u4e00\u884c\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\u4e4b\u4e00\uff08\u4e0d\u5e26\u5f15\u53f7\uff09\n- \"AND i j\"\n- \"OR i j\"\n- \"XOR i j\"  \n\n\u5bf9\u4e8e\u6bcf\u6b21\u8bc4\u6d4b\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a$int$\u7c7b\u578b\u7684$x$\uff0c\u8fd9\u53d6\u51b3\u4e8e\u8bc4\u6d4b\u6570\u636e\u7684\u7c7b\u578b\u3002\u5982\u679c\u67e5\u8be2\u7684\u7d22\u5f15\u65e0\u6548\u6216\u8d85\u8fc7\u67e5\u8be2\u6570\u91cf\uff0c$x$\u4f1a\u53d8\u6210$-1$\uff0c\u5373$x=-1$\u3002\u5f53$x=-1$\u65f6\uff0c\u4f60\u5e94\u8be5\u7acb\u523b\u7ec8\u6b62\u7a0b\u5e8f\u3002  \n\u5f53\u8ba1\u7b97\u51fa\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u65f6\uff0c\u8f93\u51fa\u5355\u884c\u7684\"!\"\uff08\u82f1\u6587\u683c\u5f0f\uff0c\u4e0d\u5e26\u5f15\u53f7\uff09\uff0c\u7136\u540e\u8f93\u51fa$n$\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u6574\u6570\u6570\u7ec4\u7684\u5143\u7d20\u3002  \n\u6570\u7ec4**\u5e76\u6ca1\u6709**\u5bf9\u8981\u6c42\u67e5\u8be2\u7684\u6570\u91cf\u8ba1\u7b97\u3002  \n**\u4ea4\u4e92\u5668\u4e0d\u662f\u81ea\u9002\u5e94\u7684**\u3002\u6570\u7ec4$a$**\u4e0d\u4f1a**\u968f\u7740\u8bc4\u6d4b\u800c\u6539\u53d8\u3002  \n\n\u8f93\u51fa\u540e\uff0c\u4e0d\u8981\u5fd8\u8bb0\u8f93\u51fa\u884c\u5c3e\u5e76\u5237\u65b0\u8f93\u51fa\u3002\u5426\u5219\uff0c\u4f1a\u6709`Idleness limit exceeded`\u62a5\u9519\u3002\n\n\u4f7f\u7528\uff1a\n- C++\u4e2d\uff0c\u4f7f\u7528`fflush(stdout)`\u6216\u8005`cout.flush()`\uff1b\n- Java\u4e2d\uff0c\u4f7f\u7528`System.out.flush()`\uff1b\n- Pascal\u4e2d\uff0c\u4f7f\u7528`flush(output)`\uff1b\n- Python\u4e2d\uff0c\u4f7f\u7528`stdout.flush()`\uff1b\n- \u5176\u4ed6\u8bed\u8a00\u4e2d\uff0c\u6309\u7167\u5176\u8981\u6c42\u3002\n\nTranlated by @[qinyihao](luogu.com.cn/user/348831) on 2020/11/22."
}