{
    "description": "Bertown is under siege! The attackers have blocked all the ways out and their cannon is bombarding the city. Fortunately, Berland intelligence managed to intercept the enemies' shooting plan. Let's introduce the Cartesian system of coordinates, the origin of which coincides with the cannon's position, the $ Ox $ axis is directed rightwards in the city's direction, the $ Oy $ axis is directed upwards (to the sky). The cannon will make $ n $ more shots. The cannon balls' initial speeds are the same in all the shots and are equal to $ V $ , so that every shot is characterized by only one number $ alpha_{i} $ which represents the angle at which the cannon fires. Due to the cannon's technical peculiarities this angle does not exceed $ 45 $ angles ( $ \u03c0/4 $ ). We disregard the cannon sizes and consider the firing made from the point $ (0,0) $ .\n\nThe balls fly according to the known physical laws of a body thrown towards the horizon at an angle:\n\n $ v_{x}(t)=V\u00b7cos(alpha) $   $ v_{y}(t)=V\u00b7sin(alpha)\u00a0\u2013\u00a0g\u00b7t $   $ x(t)=V\u00b7cos(alpha)\u00b7t $   $ y(t)=V\u00b7sin(alpha)\u00b7t\u00a0\u2013\u00a0g\u00b7t^{2}/2 $ Think of the acceleration of gravity $ g $ as equal to $ 9.8 $ .\n\nBertown defends $ m $ walls. The $ i $ -th wall is represented as a vertical segment $ (x_{i},0)-(x_{i},y_{i}) $ . When a ball hits a wall, it gets stuck in it and doesn't fly on. If a ball doesn't hit any wall it falls on the ground ( $ y=0 $ ) and stops. If the ball exactly hits the point $ (x_{i},y_{i}) $ , it is considered stuck.\n\nYour task is to find for each ball the coordinates of the point where it will be located in the end.",
    "inputFormat": "The first line contains integers $ n $ and $ V $ ( $ 1<=n<=10^{4},1<=V<=1000 $ ) which represent the number of shots and the initial speed of every ball. The second line contains $ n $ space-separated real numbers $ alpha_{i} $ ( $ 0&lt;alpha_{i}&lt;\u03c0/4 $ ) which represent the angles in radians at which the cannon will fire. The third line contains integer $ m $ ( $ 1<=m<=10^{5} $ ) which represents the number of walls. Then follow $ m $ lines, each containing two real numbers $ x_{i} $ and $ y_{i} $ ( $ 1<=x_{i}<=1000,0<=y_{i}<=1000 $ ) which represent the wall\u2019s coordinates. All the real numbers have no more than 4 decimal digits. The walls may partially overlap or even coincide.",
    "outputFormat": "Print $ n $ lines containing two real numbers each \u2014 calculate for every ball the coordinates of its landing point. Your answer should have the relative or absolute error less than $ 10^{-4} $ .",
    "samples": [
        [
            "2 10\n0.7853\n0.3\n3\n5.0 5.0\n4.0 2.4\n6.0 1.9\n",
            "5.000000000 2.549499369\n4.000000000 0.378324889\n"
        ],
        [
            "2 10\n0.7853\n0.3\n2\n4.0 2.4\n6.0 1.9\n",
            "10.204081436 0.000000000\n4.000000000 0.378324889\n"
        ]
    ],
    "hint": "",
    "translation": "**\u9898\u76ee\u5927\u610f\uff1a**\n\n\u6709\u4e00\u95e8\u5927\u70ae\uff0c\u5750\u6807\u5728$(0,0)$\uff0c\u548c$m$\u5835\u5899\uff0c\u73b0\u5728\u5927\u70ae\u8981\u5c04$n$\u53d1\u70ae\u5f39\uff0c\u6bcf\u53d1\u70ae\u5f39\u7684\u521d\u59cb\u901f\u5ea6$v$\u662f\u4e00\u6837\u7684\uff0c\u5c04\u51fb\u89d2\u5ea6\u4e3a$\u03b1(0<\u03b1<\u03c0/4)$\uff0c\u5047\u8bbe\u5c04\u51fb\u540e\u7ecf\u8fc7\u65f6\u95f4$t$\uff0c\u91cd\u529b\u52a0\u901f\u5ea6$g=9.8$\uff0c\u5219\u6709\uff1a\n\n$v_x(t)=v*cos(\u03b1)$\n\n$v_y(t)=v*sin(\u03b1)-g*t$\n\n$x(t)=v_x(t)*t$\n\n$y(t)=v*sin(\u03b1)*t-g*t^2/2$\n\n\u7ed9\u5b9a$m$\u5835\u5899\u5899\u9876\u5750\u6807$(x_i,y_i)$\uff0c\u5899\u5782\u76f4\u4e8e$x$\u5750\u6807\u8f74\uff0c\u70ae\u5f39\u5982\u679c\u6253\u5230\u5899\u4e0a\uff0c\u5c31\u4f1a\u5361\u4f4f\uff1b\u5982\u679c\u6389\u5230\u5730\u4e0a\uff0c\u4e5f\u4e0d\u4f1a\u518d\u6eda\u52a8\u3002\n\n\u6c42\u8fd9$n$\u53d1\u70ae\u5f39\u6700\u7ec8\u7684\u4f4d\u7f6e\n\n**\u8f93\u5165\u683c\u5f0f\uff1a**\n\n\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0c\u5373$n,v(1<=n<=10^4,1<=v<=1000)$\n\n\u4e0b\u9762$n$\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b9e\u6570\uff0c\u5373\u6bcf\u53d1\u70ae\u5f39\u7684$\u03b1$\n\n\u518d\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\uff0c\u5373$m(1<=m<=10^5)$\n\n\u4e0b\u9762$m$\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u5b9e\u6570\uff0c\u5373$x_i,y_i(1<=x_i,y_i<=1000)$\n\n**\u8f93\u51fa\u683c\u5f0f\uff1a**\n\n$n$\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u5b9e\u6570\uff0c\u5373\u8fd9\u53d1\u70ae\u5f39\u6700\u540e\u7684\u5750\u6807\uff0c\u8bef\u5dee\u4e0d\u8d85\u8fc7$10^{-4}$\u5373\u53ef\n\n\u611f\u8c22@\u5b88\u671b \u63d0\u4f9b\u7ffb\u8bd1"
}