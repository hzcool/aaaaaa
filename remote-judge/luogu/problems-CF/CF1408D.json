{
    "description": "There are $ n $ robbers at coordinates $ (a_1, b_1) $ , $ (a_2, b_2) $ , ..., $ (a_n, b_n) $ and $ m $ searchlight at coordinates $ (c_1, d_1) $ , $ (c_2, d_2) $ , ..., $ (c_m, d_m) $ .\n\nIn one move you can move each robber to the right (increase $ a_i $ of each robber by one) or move each robber up (increase $ b_i $ of each robber by one). Note that you should either increase all $ a_i $ or all $ b_i $ , you can't increase $ a_i $ for some points and $ b_i $ for some other points.\n\nSearchlight $ j $ can see a robber $ i $ if $ a_i \\leq c_j $ and $ b_i \\leq d_j $ .\n\nA configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair $ i,j $ such that searchlight $ j $ can see a robber $ i $ ).\n\nWhat is the minimum number of moves you need to perform to reach a safe configuration?",
    "inputFormat": "The first line of input contains two integers $ n $ and $ m $ ( $ 1 \\leq n, m \\leq 2000 $ ): the number of robbers and the number of searchlight.\n\nEach of the next $ n $ lines contains two integers $ a_i $ , $ b_i $ ( $ 0 \\leq a_i, b_i \\leq 10^6 $ ), coordinates of robbers.\n\nEach of the next $ m $ lines contains two integers $ c_i $ , $ d_i $ ( $ 0 \\leq c_i, d_i \\leq 10^6 $ ), coordinates of searchlights.",
    "outputFormat": "Print one integer: the minimum number of moves you need to perform to reach a safe configuration.",
    "samples": [
        [
            "1 1\n0 0\n2 3",
            "3"
        ],
        [
            "2 3\n1 6\n6 1\n10 1\n1 10\n7 7",
            "4"
        ],
        [
            "1 2\n0 0\n0 0\n0 0",
            "1"
        ],
        [
            "7 3\n0 8\n3 8\n2 7\n0 10\n5 5\n7 0\n3 5\n6 6\n3 11\n11 5",
            "6"
        ]
    ],
    "hint": "In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates $ (3, 0) $ .\n\nThe configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates $ (2, 3) $ and $ 3 > 2 $ .\n\nIn the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates $ (3, 8) $ , $ (8, 3) $ .\n\nIt's easy the see that the configuration of the robbers is safe.\n\nIt can be proved that you can't reach a safe configuration using no more than $ 3 $ moves.",
    "translation": "\u6709 $n$ \u4e2a\u5750\u6807\u5206\u522b\u662f $(a_1,b_1)$ , $(a_2,b_2)$ , ... , $(a_n,b_n)$ \u7684\u5f3a\u76d7\uff0c\u8fd8\u6709 $m$ \u76cf\u5750\u6807\u5206\u522b\u662f $(c_1,d_1)$ , $(c_2,d_2)$ , ... , $(c_m,d_m)$ \u7684\u63a2\u7167\u706f\u3002  \n\u5728\u4e00\u6b21\u79fb\u52a8\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u6bcf\u4e2a\u5f3a\u76d7\u53f3\u79fb\u4e00\u4e2a\u5355\u4f4d\uff08\u5373\u4f7f\u6bcf\u4e2a\u5f3a\u76d7\u7684 $a_i$ \u52a0 $1$ )\u6216\u4f7f\u6bcf\u4e2a\u5f3a\u76d7\u4e0a\u79fb\u4e00\u4e2a\u5355\u4f4d\uff08\u5373\u4f7f\u6bcf\u4e2a\u5f3a\u76d7\u7684 $b_i$ \u52a0 $1$ \u3002\u6ce8\u610f\u4f60\u5e94\u8be5\u589e\u52a0\u6240\u6709\u5f3a\u76d7\u7684 $a_i$ \u6216 $b_i$ \uff0c\u4f60\u4e0d\u80fd\u53ea\u589e\u52a0\u67d0\u4e9b\u70b9\u7684 $a_i$ \u5e76\u589e\u52a0\u5176\u4ed6\u70b9\u7684 $b_i$ \u3002\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u6b21\u64cd\u4f5c\u4e2d\uff0c\u8981\u4e48\u4f7f\u6240\u6709\u5f3a\u76d7\u7684 $a_i$ \u52a0 $1$ ,\u8981\u4e48\u4f7f\u6240\u6709\u5f3a\u76d7\u7684 $b_i$ \u52a0 $1$ \uff0c\u4fee\u6539\u64cd\u4f5c\u662f\u9488\u5bf9\u6240\u6709\u7684\u5f3a\u76d7\u7edf\u4e00\u8fdb\u884c\u7684\u3002\uff09  \n\u63a2\u7167\u706f $j$ \u53ef\u4ee5\u770b\u5230\u5f3a\u76d7 $i$ \u5f53\u4e14\u4ec5\u5f53 $a_i\u2264c_j$ \u4e14 $b_i\u2264d_j$\u3002\n\u5982\u679c\u6ca1\u6709\u63a2\u7167\u706f\u80fd\u770b\u89c1\u5f3a\u76d7\uff0c\u5219\u6210\u4e3a\u8fd9\u79cd\u5f3a\u76d7\u7684\u5e03\u5c40\u662f\u5b89\u5168\u7684\u3002\uff08\u5373\uff0c\u4e0d\u5b58\u5728\u4e00\u5bf9 $i,j$ \u4f7f\u5f97\u63a2\u7167\u706f $j$ \u53ef\u4ee5\u770b\u5230\u5f3a\u76d7 $i$ \uff09\u3002  \n\u90a3\u4e48\u5982\u679c\u60f3\u8fbe\u5230\u4e00\u4e2a\u5b89\u5168\u7684\u5e03\u5c40\uff0c\u4f60\u9700\u8981\u6267\u884c\u7684\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u591a\u5c11\u5462\uff1f"
}