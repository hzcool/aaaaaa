{
    "description": "AquaMoon has two binary sequences $ a $ and $ b $ , which contain only $ 0 $ and $ 1 $ . AquaMoon can perform the following two operations any number of times ( $ a_1 $ is the first element of $ a $ , $ a_2 $ is the second element of $ a $ , and so on):\n\n- Operation 1: if $ a $ contains at least two elements, change $ a_2 $ to $ \\operatorname{min}(a_1,a_2) $ , and remove the first element of $ a $ .\n- Operation 2: if $ a $ contains at least two elements, change $ a_2 $ to $ \\operatorname{max}(a_1,a_2) $ , and remove the first element of $ a $ .\n\nNote that after a removal of the first element of $ a $ , the former $ a_2 $ becomes the first element of $ a $ , the former $ a_3 $ becomes the second element of $ a $ and so on, and the length of $ a $ reduces by one.\n\nDetermine if AquaMoon can make $ a $ equal to $ b $ by using these operations.",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1 \\leq t \\leq 2\\,000 $ ) \u2014 the number of test cases. Description of test cases follows.\n\nThe first line of each test case contains two integers $ n $ , $ m $ ( $ 1 \\leq n,m \\leq 50 $ , $ m \\leq n $ ) \u2014 the lengths of $ a $ and $ b $ respectively.\n\nThe second line of each test case contains a string $ a $ of length $ n $ , consisting only $ 0 $ and $ 1 $ .\n\nThe third line of each test case contains a string $ b $ of length $ m $ , consisting only $ 0 $ and $ 1 $ .",
    "outputFormat": "For each test case, output \"YES\" if AquaMoon can change $ a $ to $ b $ by using these options; otherwise, output \"NO\".\n\nYou may print each letter in any case (for example, \"YES\", \"Yes\", \"yes\", \"yEs\" will all be recognized as a positive answer).",
    "samples": [
        [
            "10\n6 2\n001001\n11\n6 2\n110111\n01\n6 2\n000001\n11\n6 2\n111111\n01\n8 5\n10000101\n11010\n7 4\n1010001\n1001\n8 6\n01010010\n010010\n8 4\n01010101\n1001\n8 4\n10101010\n0110\n7 5\n1011100\n11100",
            "YES\nYES\nNO\nNO\nNO\nYES\nYES\nNO\nNO\nYES"
        ]
    ],
    "hint": "In the first test case, you can use Operation 2 four times to make $ a $ equals to $ b $ .\n\nIn the second test case, you can use Operation 1 four times to make $ a $ equals to $ b $ .\n\nIn the third test case, it can be proved that no matter how we use the operations, it is impossible to make $ a $ equal to $ b $ .\n\nIn the fourth test case, it can be proved that no matter how we use the operations, it is impossible to make $ a $ equal to $ b $ .\n\nIn the fifth test case, you can use Operation 2 three times to make $ a $ become $ 10101 $ , so the first element of $ a $ equals to the first element of $ b $ , but it can be proved that no matter how to operate, the second to the fifth elements of $ a $ can't be the same as $ b $ .",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\u4f60\u6709\u4e24\u4e2a $01$ \u4e32 $a$ \u548c $b$\uff0c\u6bcf\u6b21\u4f60\u53ef\u4ee5\u5bf9 $a$ \u4e32\u8fdb\u884c\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff08\u4ee5\u4e0b $a_1$ \u8868\u793a $a$ \u73b0\u5728\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c$a_2$ \u8868\u793a $a$ \u73b0\u5728\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff09\uff1a\n\n1. \u82e5 $|a| \\geq 2$\uff0c\u5219\u53ef\u5c06 $a_2$ \u6539\u4e3a $\\min(a_1,a_2)$\uff0c\u7136\u540e\u5220\u9664 $a_1$\u3002\n2. \u82e5 $|a| \\geq 2$\uff0c\u5219\u53ef\u5c06 $a_2$ \u6539\u4e3a $\\max(a_1,a_2)$\uff0c\u7136\u540e\u5220\u9664 $a_1$\u3002\n\n\u663e\u7136\uff0c\u5220\u9664 $a_1$ \u540e\uff0c\u539f\u5148\u7684 $a_2$ \u53d8\u6210 $a_1$\uff0c$a_3$ \u53d8\u6210 $a_2$\uff0c$a$ \u7684\u957f\u5ea6\u51cf\u5c11 $1$\u3002\n\n\u8bd5\u5224\u65ad $a$ \u662f\u5426\u80fd\u591f\u7ecf\u8fc7\u82e5\u5e72\u6b21\u64cd\u4f5c\uff08\u4e5f\u53ef\u4ee5\u4e0d\u8fdb\u884c\u64cd\u4f5c\uff09\u53d8\u6210 $b$\u3002\n\n### \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 $t$\uff08$1 \\leq t \\leq 2000$\uff09\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002\u63a5\u4e0b\u6765\u6bcf\u7ec4\u6570\u636e\u4e09\u884c\uff1a\n- \u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6b63\u6574\u6570 $n$ \u548c $m$\uff0c\u8868\u793a $a$ \u548c $b$ \u7684\u957f\u5ea6\u3002\u4fdd\u8bc1 $1 \\leq m \\leq n \\leq 50$\u3002\n- \u7b2c\u4e8c\u884c\u4e00\u4e2a $01$ \u4e32 $a$\u3002\n- \u7b2c\u4e09\u884c\u4e00\u4e2a $01$ \u4e32 $b$\u3002\n### \u8f93\u51fa\u683c\u5f0f\n\u8f93\u51fa\u5171 $t$ \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32 ``YES`` \u6216 ``NO``\uff08\u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff09\uff0c\u8868\u793a $a$ \u80fd\u5426\u53d8\u6210 $b$\u3002\n### \u6837\u4f8b\u89e3\u91ca\n- \u7b2c\u4e00\u7ec4\u6837\u4f8b\uff1a\u5bf9 $a$ \u4e0d\u65ad\u8fdb\u884c\u64cd\u4f5c $2$ \u5373\u53ef\u3002\n- \u7b2c\u4e8c\u7ec4\u6837\u4f8b\uff1a\u5bf9 $a$ \u4e0d\u65ad\u8fdb\u884c\u64cd\u4f5c $1$ \u5373\u53ef\u3002\n- \u7b2c\u4e09\u3001\u56db\u7ec4\u6837\u4f8b\uff1a\u663e\u7136\uff0c\u65e0\u8bba\u5982\u4f55\u5bf9 $a$ \u8fdb\u884c\u64cd\u4f5c\u90fd\u65e0\u6cd5\u4f7f\u5176\u53d8\u6210 $b$\u3002\n- \u7b2c\u4e94\u7ec4\u6837\u4f8b\uff1a\u867d\u7136\u53ef\u4ee5\u7528\u64cd\u4f5c $2$ \u4f7f $a$ \u53d8\u6210 $10101$\uff08\u8fd9\u4e0e $b$ \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff09\uff0c\u4f46\u663e\u7136\uff0c\u65e0\u8bba\u5982\u4f55\u5bf9 $a$ \u8fdb\u884c\u64cd\u4f5c\u90fd\u65e0\u6cd5\u4f7f\u5176\u53d8\u6210 $b$\u3002"
}