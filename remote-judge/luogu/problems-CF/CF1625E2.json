{
    "description": "This is the hard version of the problem. The only difference between the easy and the hard versions are removal queries, they are present only in the hard version.\n\n\"Interplanetary Software, Inc.\" together with \"Robots of Cydonia, Ltd.\" has developed and released robot cats. These electronic pets can meow, catch mice and entertain the owner in various ways.\n\nThe developers from \"Interplanetary Software, Inc.\" have recently decided to release a software update for these robots. After the update, the cats must solve the problems about bracket sequences. One of the problems is described below.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1625E2/ad865cfdf37d1aee9e7ac138cc3da0f92a8cbe90.png)First, we need to learn a bit of bracket sequence theory. Consider the strings that contain characters \"(\", \")\" and \".\". Call a string regular bracket sequence (RBS), if it can be transformed to an empty string by one or more operations of removing either single \".\" characters, or a continuous substring \"()\". For instance, the string \"(()(.))\" is an RBS, as it can be transformed to an empty string with the following sequence of removals:\n\n \"(()(.))\" $ \\rightarrow $ \"(()())\" $ \\rightarrow $ \"(())\" $ \\rightarrow $ \"()\" $ \\rightarrow $ \"\". We got an empty string, so the initial string was an RBS. At the same time, the string \")(\" is not an RBS, as it is not possible to apply such removal operations to it.\n\nAn RBS is simple if this RBS is not empty, doesn't start with \".\", and doesn't end with \".\".\n\nDenote the substring of the string $ s $ as its sequential subsegment. In particular, $ s[l\\dots r] = s_ls_{l+1}\\dots s_r $ , where $ s_i $ is the $ i $ -th character of the string $ s $ .\n\nNow, move on to the problem statement itself. You are given a string $ s $ , initially consisting of characters \"(\" and \")\". You need to answer the following queries:\n\n1. Given two indices, $ l $ and $ r $ ( $ 1 \\le l < r \\le n $ ). It's guaranteed that the $ l $ -th character is equal to \"(\", the $ r $ -th character is equal to \")\", and the characters between them are equal to \".\". Then the $ l $ -th and the $ r $ -th characters must be set to \".\".\n2. Given two indices, $ l $ and $ r $ ( $ 1 \\le l < r \\le n $ ), and it's guaranteed that the substring $ s[l\\dots r] $ is a simple RBS. You need to find the number of substrings in $ s[l\\dots r] $ such that they are simple RBS. In other words, find the number of index pairs $ i $ , $ j $ such that $ l \\le i < j \\le r $ and $ s[i\\dots j] $ is a simple RBS.\n\nYou are an employee in \"Interplanetary Software, Inc.\" and you were given the task to teach the cats to solve the problem above, after the update.",
    "inputFormat": "The first line contains two integers $ n $ and $ q $ ( $ 2 \\le n \\le 3\\cdot10^5 $ , $ 1 \\le q \\le 3\\cdot10^5 $ ), the length of the string, and the number of queries.\n\nThe second line contains the string $ s $ , consisting of $ n $ characters \"(\" and \")\".\n\nEach of the following $ q $ lines contains three integers $ t $ , $ l $ and $ r $ ( $ t \\in \\{1, 2\\} $ , $ 1 \\le l < r \\le n $ ), the queries you need to answer. It is guaranteed that all the queries are valid and correspond to the problem statements.",
    "outputFormat": "For each query, print a single integer in a separate line, the number of substrings that are simple RBS. The answers must be printed in the same order as the queries are specified in the input.",
    "samples": [
        [
            "9 8\n)(()())()\n2 3 6\n2 2 7\n1 3 4\n2 2 7\n2 2 9\n1 5 6\n1 2 7\n2 8 9",
            "3\n4\n2\n4\n1"
        ]
    ],
    "hint": "Consider the example test case.\n\nThe answer to the first query is $ 3 $ , as there are three suitable substrings: $ s[3\\dots6] $ , $ s[3\\dots4] $ and $ s[5\\dots6] $ .\n\nThe answer to the second query is $ 4 $ . The substrings are $ s[3\\dots6] $ , $ s[3\\dots4] $ , $ s[5\\dots6] $ and $ s[2\\dots7] $ .\n\nAfter the third query, the string becomes \")(..())()\".\n\nThe answer to the fourth query is $ 2 $ . The substrings are $ s[5\\dots6] $ and $ s[2\\dots7] $ . Note that $ s[3\\dots6] $ is not a simple RBS anymore, as it starts with \".\".\n\nThe answer to the fifth query is $ 4 $ . The substrings are $ s[5\\dots6] $ , $ s[2\\dots7] $ , $ s[8\\dots9] $ and $ s[2\\dots9] $ .\n\nAfter the sixth query, the string becomes \")(....)()\".\n\nAfter the seventh query, the string becomes \")......()\".\n\nThe answer to the eighth query is $ 1 $ . The substring is $ s[8\\dots9] $ .",
    "translation": "**\u672c\u9898\u548c CF1625E1 \u7684\u552f\u4e00\u533a\u522b\u5728\u4e8e\uff0c\u672c\u9898\u6709\u4fee\u6539\u64cd\u4f5c\u3002**\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u4ec5\u5305\u542b `(`\u3001`)` \u7684\u5b57\u7b26\u4e32 $s$\u3002\u7ed9\u51fa\u5982\u4e0b\u5b9a\u4e49\uff1a\n\n- \u5b9a\u4e49\u67d0\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u7b80\u5355\u7684**\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217**\uff08\u4ee5\u4e0b\u7b80\u79f0 **RBS**\uff09\uff0c\u5f53\u4e14\u4ec5\u5f53\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u82e5\u5e72\u6b21\u79fb\u9664\u4e00\u4e2a `.` \u6216\u8005\u4e00\u4e2a\u8fde\u7eed\u7684\u5b50\u4e32 `()` \u7684\u64cd\u4f5c\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5220\u7a7a\uff0c\u4e14\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e0d\u4ee5 `.` \u4f5c\u4e3a\u5f00\u5934\u6216\u8005\u7ed3\u5c3e\u3002\n- \u5b9a\u4e49 $s[l\\dots r]$ \u4e3a\u5b57\u7b26\u4e32 $s$ \u4ece\u7b2c $l$ \u4e2a\u5b57\u7b26\u5f00\u59cb\u5230\u7b2c $r$ \u4e2a\u5b57\u7b26\u7ed3\u675f\u7684\u5b50\u4e32\u3002\n- \u5b9a\u4e49 $s_x$ \u4e3a\u5b57\u7b26\u4e32 $s$ \u7684\u7b2c $x$ \u4e2a\u5b57\u7b26\u3002\n\n\u4e00\u5171\u6709 $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5206\u4e3a\u5982\u4e0b\u4e24\u7c7b\uff1a\n\n- `1 l r`\uff1a\u5c06 $s_l$ \u548c $s_r$ \u66ff\u6362\u4e3a `.`\u3002\u4fdd\u8bc1 $s[l\\dots r]$ \u4ee5 `(` \u5f00\u5934\uff0c\u4ee5 `)` \u7ed3\u5c3e\uff0c\u4e14\u4e2d\u95f4\u6240\u6709\u5b57\u7b26\u90fd\u4e3a `.`\u3002\n- `2 l r`\uff1a\u8be2\u95ee\u6709\u591a\u5c11\u4e2a $s[l\\dots r]$ \u7684\u5b50\u4e32\u662f\u7b80\u5355\u7684 RBS\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8bf7\u6c42\u51fa\u6ee1\u8db3 $l\\leqslant i\\leqslant j\\leqslant r$ \u4e14 $s[i\\dots j]$ \u662f\u7b80\u5355\u7684 RBS \u7684 $(i,j)$ \u7684\u5bf9\u6570\u3002**\u4fdd\u8bc1 $s[l\\dots r]$ \u662f\u7b80\u5355\u7684 RBS**\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a\n\n- $2\\leqslant n\\leqslant 3\\times 10^5$\uff0c$1\\leqslant q\\leqslant 3\\times 10^5$\u3002\n- $1\\leqslant l<r\\leqslant n$\u3002\n\nTranslated by Eason_AC  \n2022.1.17"
}