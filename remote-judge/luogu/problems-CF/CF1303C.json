{
    "description": "Polycarp wants to assemble his own keyboard. Layouts with multiple rows are too complicated for him \u2014 his keyboard will consist of only one row, where all $ 26 $ lowercase Latin letters will be arranged in some order.\n\nPolycarp uses the same password $ s $ on all websites where he is registered (it is bad, but he doesn't care). He wants to assemble a keyboard that will allow to type this password very easily. He doesn't like to move his fingers while typing the password, so, for each pair of adjacent characters in $ s $ , they should be adjacent on the keyboard. For example, if the password is abacaba, then the layout cabdefghi... is perfect, since characters a and c are adjacent on the keyboard, and a and b are adjacent on the keyboard. It is guaranteed that there are no two adjacent equal characters in $ s $ , so, for example, the password cannot be password (two characters s are adjacent).\n\nCan you help Polycarp with choosing the perfect layout of the keyboard, if it is possible?",
    "inputFormat": "The first line contains one integer $ T $ ( $ 1 \\le T \\le 1000 $ ) \u2014 the number of test cases.\n\nThen $ T $ lines follow, each containing one string $ s $ ( $ 1 \\le |s| \\le 200 $ ) representing the test case. $ s $ consists of lowercase Latin letters only. There are no two adjacent equal characters in $ s $ .",
    "outputFormat": "For each test case, do the following:\n\n- if it is impossible to assemble a perfect keyboard, print NO (in upper case, it matters in this problem);\n- otherwise, print YES (in upper case), and then a string consisting of $ 26 $ lowercase Latin letters \u2014 the perfect layout. Each Latin letter should appear in this string exactly once. If there are multiple answers, print any of them.",
    "samples": [
        [
            "5\nababa\ncodedoca\nabcda\nzxzytyz\nabcdefghijklmnopqrstuvwxyza",
            "YES\nbacdefghijklmnopqrstuvwxyz\nYES\nedocabfghijklmnpqrstuvwxyz\nNO\nYES\nxzytabcdefghijklmnopqrsuvw\nNO"
        ]
    ],
    "hint": "",
    "translation": "\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32$S$\uff0c\u6c42\u662f\u5426\u5b58\u5728\u4e00\u79cd$26$\u4e2a\u5b57\u6bcd\u6392\u5217\u7684\u6784\u9020\u65b9\u5f0f$T$\u4f7f\u5f97$S$\u4e2d\u4efb\u610f\u76f8\u90bb\u4e24\u4f4d\u90fd\u5728$T$\u4e2d\u76f8\u90bb\uff0c\u6570\u636e\u4fdd\u8bc1$S$\u4e0d\u4f1a\u5b58\u5728\u76f8\u90bb\u4e24\u4f4d\u5b57\u6bcd\u76f8\u540c\uff0c\u82e5\u5b58\u5728\u5219\u8f93\u51fa$YES$\u5e76\u8f93\u51fa\u4e00\u79cd\u5408\u6cd5\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u5426\u5219\u8f93\u51fa$NO$\u3002"
}