{
    "description": "Vasya has recently developed a new algorithm to optimize the reception of customer flow and he considered the following problem.\n\nLet the queue to the cashier contain $ n $ people, at that each of them is characterized by a positive integer $ a_{i} $ \u2014 that is the time needed to work with this customer. What is special about this very cashier is that it can serve two customers simultaneously. However, if two customers need $ a_{i} $ and $ a_{j} $ of time to be served, the time needed to work with both of them customers is equal to $ max(a_{i},a_{j}) $ . Please note that working with customers is an uninterruptable process, and therefore, if two people simultaneously come to the cashier, it means that they begin to be served simultaneously, and will both finish simultaneously (it is possible that one of them will have to wait).\n\nVasya used in his algorithm an ingenious heuristic \u2014 as long as the queue has more than one person waiting, then some two people of the first three standing in front of the queue are sent simultaneously. If the queue has only one customer number $ i $ , then he goes to the cashier, and is served within $ a_{i} $ of time. Note that the total number of phases of serving a customer will always be equal to $ \u2308n/2\u2309 $ .\n\nVasya thinks that this method will help to cope with the queues we all hate. That's why he asked you to work out a program that will determine the minimum time during which the whole queue will be served using this algorithm.",
    "inputFormat": "The first line of the input file contains a single number $ n $ ( $ 1<=n<=1000 $ ), which is the number of people in the sequence. The second line contains space-separated integers $ a_{1},a_{2},...,a_{n} $ ( $ 1<=a_{i}<=10^{6} $ ). The people are numbered starting from the cashier to the end of the queue.",
    "outputFormat": "Print on the first line a single number \u2014 the minimum time needed to process all $ n $ people. Then on $ \u2308n/2\u2309 $ lines print the order in which customers will be served. Each line (probably, except for the last one) must contain two numbers separated by a space \u2014 the numbers of customers who will be served at the current stage of processing. If $ n $ is odd, then the last line must contain a single number \u2014 the number of the last served customer in the queue. The customers are numbered starting from $ 1 $ .",
    "samples": [
        [
            "4\n1 2 3 4\n",
            "6\n1 2\n3 4\n"
        ],
        [
            "5\n2 4 3 1 4\n",
            "8\n1 3\n2 5\n4\n"
        ]
    ],
    "hint": "",
    "translation": "\u4e00\u961f\u987e\u5ba2\u6392\u5728\u4e00\u4f4d\u6536\u94f6\u5458\u524d\u9762\u3002\u4ed6\u91c7\u53d6\u8fd9\u6837\u4e00\u4e2a\u7b56\u7565\uff1a\u6bcf\u6b21\uff0c\u5047\u5982\u961f\u4f0d\u6709\u81f3\u5c11\u4e24\u4eba\uff0c\u5c31\u4f1a\u4ece\u524d\u9762\u7684\u524d\u4e09\u4eba\uff08\u5982\u679c\u6709\uff09\u4e2d\u9009\u53d6\u4e24\u4f4d\u4e00\u8d77\u6536\u94f6\uff0c\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u4e3a\u8fd9\u4e24\u4eba\u5355\u72ec\u6536\u94f6\u6240\u9700\u65f6\u95f4\u7684\u6700\u5927\u503c\u3002\u5982\u679c\u53ea\u6709\u4e24\u4eba\uff0c\u90a3\u4e48\u4e00\u8d77\u6536\u94f6\uff1b\u5982\u679c\u53ea\u6709\u4e00\u4eba\uff0c\u90a3\u4e48\u5355\u72ec\u6536\u94f6\u3002\u8bf7\u95ee\u6240\u9700\u7684\u603b\u65f6\u95f4\u6700\u5c11\u662f\u591a\u5c11\uff1f"
}