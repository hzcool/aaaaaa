{
    "description": "A bracketed sequence is called correct (regular) if by inserting \"+\" and \"1\" you can get a well-formed mathematical expression from it. For example, sequences \"(())()\", \"()\" and \"(()(()))\" are correct, while \")(\", \"(()\" and \"(()))(\" are not.\n\nThe teacher gave Dmitry's class a very strange task \u2014 she asked every student to come up with a sequence of arbitrary length, consisting only of opening and closing brackets. After that all the students took turns naming the sequences they had invented. When Dima's turn came, he suddenly realized that all his classmates got the correct bracketed sequence, and whether he got the correct bracketed sequence, he did not know.\n\nDima suspects now that he simply missed the word \"correct\" in the task statement, so now he wants to save the situation by modifying his sequence slightly. More precisely, he can the arbitrary number of times (possibly zero) perform the reorder operation.\n\nThe reorder operation consists of choosing an arbitrary consecutive subsegment (substring) of the sequence and then reordering all the characters in it in an arbitrary way. Such operation takes $ l $ nanoseconds, where $ l $ is the length of the subsegment being reordered. It's easy to see that reorder operation doesn't change the number of opening and closing brackets. For example for \"))((\" he can choose the substring \")(\" and do reorder \")()(\" (this operation will take $ 2 $ nanoseconds).\n\nSince Dima will soon have to answer, he wants to make his sequence correct as fast as possible. Help him to do this, or determine that it's impossible.",
    "inputFormat": "The first line contains a single integer $ n $ ( $ 1 \\le n \\le 10^6 $ ) \u2014 the length of Dima's sequence.\n\nThe second line contains string of length $ n $ , consisting of characters \"(\" and \")\" only.",
    "outputFormat": "Print a single integer \u2014 the minimum number of nanoseconds to make the sequence correct or \"-1\" if it is impossible to do so.",
    "samples": [
        [
            "8\n))((())(",
            "6"
        ],
        [
            "3\n(()",
            "-1"
        ]
    ],
    "hint": "In the first example we can firstly reorder the segment from first to the fourth character, replacing it with \"()()\", the whole sequence will be \"()()())(\". And then reorder the segment from the seventh to eighth character, replacing it with \"()\". In the end the sequence will be \"()()()()\", while the total time spent is $ 4 + 2 = 6 $ nanoseconds.",
    "translation": "- \u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u62ec\u53f7\u5e8f\u5217\u3002\n- \u4f60\u53ef\u4ee5\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\uff1a\u82b1\u8d39 $m$ \u7684\u4ee3\u4ef7\uff0c\u5c06\u4e00\u4e2a\u957f\u5ea6\u4e3a $m$ \u7684\u62ec\u53f7\u5b50\u4e32\u4efb\u610f\u6392\u5217\u3002\n- \u82e5\u80fd\u5c06\u62ec\u53f7\u5e8f\u5217\u6392\u6210\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\uff0c\u8bf7\u6c42\u51fa\u6700\u5c0f\u82b1\u8d39\u7684\u4ee3\u4ef7\u548c\u3002\u5426\u5219\u8bf7\u8f93\u51fa `-1`\u3002\n- $1 \\leq n \\leq 10^6$\u3002"
}