{
    "description": "Authors have come up with the string $ s $ consisting of $ n $ lowercase Latin letters.\n\nYou are given two permutations of its indices (not necessary equal) $ p $ and $ q $ (both of length $ n $ ). Recall that the permutation is the array of length $ n $ which contains each integer from $ 1 $ to $ n $ exactly once.\n\nFor all $ i $ from $ 1 $ to $ n-1 $ the following properties hold: $ s[p_i] \\le s[p_{i + 1}] $ and $ s[q_i] \\le s[q_{i + 1}] $ . It means that if you will write down all characters of $ s $ in order of permutation indices, the resulting string will be sorted in the non-decreasing order.\n\nYour task is to restore any such string $ s $ of length $ n $ consisting of at least $ k $ distinct lowercase Latin letters which suits the given permutations.\n\nIf there are multiple answers, you can print any of them.",
    "inputFormat": "The first line of the input contains two integers $ n $ and $ k $ ( $ 1 \\le n \\le 2 \\cdot 10^5, 1 \\le k \\le 26 $ ) \u2014 the length of the string and the number of distinct characters required.\n\nThe second line of the input contains $ n $ integers $ p_1, p_2, \\dots, p_n $ ( $ 1 \\le p_i \\le n $ , all $ p_i $ are distinct integers from $ 1 $ to $ n $ ) \u2014 the permutation $ p $ .\n\nThe third line of the input contains $ n $ integers $ q_1, q_2, \\dots, q_n $ ( $ 1 \\le q_i \\le n $ , all $ q_i $ are distinct integers from $ 1 $ to $ n $ ) \u2014 the permutation $ q $ .",
    "outputFormat": "If it is impossible to find the suitable string, print \"NO\" on the first line.\n\nOtherwise print \"YES\" on the first line and string $ s $ on the second line. It should consist of $ n $ lowercase Latin letters, contain at least $ k $ distinct characters and suit the given permutations.\n\nIf there are multiple answers, you can print any of them.",
    "samples": [
        [
            "3 2\n1 2 3\n1 3 2\n",
            "YES\nabb\n"
        ]
    ],
    "hint": "",
    "translation": "# Description\n\n\u4f5c\u8005\u60f3\u51fa\u4e86\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\n\n\u4f60\u6709\u4e24\u4e2a\u6392\u5217$p$,$q$ (\u4e24\u8005\u957f\u5ea6\u90fd\u4e3a$n$)\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u6392\u5217\u662f\u957f\u5ea6\u4e3a$n$\u7684\u6570\u7ec4\uff0c\u5b83\u5305\u542b$1$\u5230$n$\u7684\u6bcf\u4e2a\u6574\u6570\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6570\u53ea\u51fa\u73b0\u4e00\u6b21\n\n\u5bf9\u4e8e\u4ece$1$\u5230$n-1$\u7684\u6240\u6709$i$\u6ee1\u8db3\u4ee5\u4e0b\u7684\u6761\u4ef6\uff1a$s[p_i]\\leq s[p_{i+1}]$\u548c$s[q_i]\\leq s[q_{i+1}]$\n\n\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4f60\u6309\u7167\u6392\u5217\u7684\u987a\u5e8f\u5199\u4e0b\u5b57\u7b26\u4e32$s$\u7684\u8bdd\uff0c\u5b57\u7b26\u4e32$s$\u5c06\u6309\u7167\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\n\n\u4f60\u7684\u4efb\u52a1\u662f\u6062\u590d\u957f\u5ea6\u4e3a$n$\u7684\u5b57\u7b26\u4e32$s$\uff0c\u8be5\u5b57\u7b26\u4e32\u81f3\u5c11\u5305\u542b$k$\u4e2a\u4e0d\u540c\u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\n\n\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u4f60\u53ef\u4ee5\u8f93\u51fa\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u3002\n\n# input\n\n\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570$n$\u548c$k$ $( 1\\leq n\\leq 2\\times 10^5,1\\leq k\\leq 26)$ $n$\u548c$k$\u5206\u522b\u8868\u793a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c\u6240\u9700\u7684\u4e0d\u540c\u5b57\u7b26\u6570\u3002\n\n\u8f93\u5165\u7684\u7b2c\u4e8c\u884c\u5305\u542b$n$\u4e2a\u6574\u6570$p_1,p_2,\u2026,p_n$\uff08$1\\leq p_i\\leq n$\uff0c\u6240\u6709$p_i$\u90fd\u662f\u4ece$1$\u5230$n$\u7684\u4e0d\u540c\u6574\u6570\uff09\n\n\u8f93\u5165\u7684\u7b2c\u4e09\u884c\u5305\u542b$n$\u4e2a\u6574\u6570$q_1,q_2,\u2026,q_n$\uff08$1\\leq q_i\\leq n$\uff0c\u6240\u6709$q_i$\u90fd\u662f\u4ece$1$\u5230$n$\u7684\u4e0d\u540c\u6574\u6570\uff09\n\n# Output\n\n\u5982\u679c\u627e\u4e0d\u5230\u5408\u9002\u7684\u5b57\u7b26\u4e32\uff0c\u8bf7\u5728\u7b2c\u4e00\u884c\u8f93\u51fa\"$NO$\"\u3002\n\n\u5426\u5219\u5728\u7b2c\u4e00\u884c\u8f93\u51fa\"$YES$\"\uff0c\u5728\u7b2c\u4e8c\u884c\u8f93\u51fa\u5b57\u7b26\u4e32$s$\u3002\u5b83\u5e94\u8be5\u7531$n$\u4e2a\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff0c\u81f3\u5c11\u5305\u542b$k$\u4e2a\u4e0d\u540c\u7684\u5b57\u7b26\uff0c\u5e76\u9002\u5408\u7ed9\u5b9a\u7684\u6392\u5217\u3002\n\n\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u60a8\u53ef\u4ee5\u8f93\u51fa\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u3002\n\n# **Example**\n\n**input**\n\n```\n3 2\n1 2 3\n1 3 2\n```\n\noutput\n\n```\nYES\nabb\n```\n\n"
}