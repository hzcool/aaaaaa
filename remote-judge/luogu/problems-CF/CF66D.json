{
    "description": "Little Petya has a birthday soon. Due this wonderful event, Petya's friends decided to give him sweets. The total number of Petya's friends equals to $ n $ .\n\nLet us remind you the definition of the greatest common divisor: $ GCD(a_{1},...,a_{k})=d $ , where $ d $ represents such a maximal positive number that each $ a_{i} $ ( $ 1<=i<=k $ ) is evenly divisible by $ d $ . At that, we assume that all $ a_{i} $ 's are greater than zero.\n\nKnowing that Petya is keen on programming, his friends has agreed beforehand that the $ 1 $ -st friend gives $ a_{1} $ sweets, the $ 2 $ -nd one gives $ a_{2} $ sweets, ..., the $ n $ -th one gives $ a_{n} $ sweets. At the same time, for any $ i $ and $ j $ ( $ 1<=i,j<=n $ ) they want the $ GCD(a_{i},a_{j}) $ not to be equal to $ 1 $ . However, they also want the following condition to be satisfied: $ GCD(a_{1},a_{2},...,a_{n})=1 $ . One more: all the $ a_{i} $ should be distinct.\n\nHelp the friends to choose the suitable numbers $ a_{1},...,a_{n} $ .",
    "inputFormat": "The first line contains an integer $ n $ ( $ 2<=n<=50 $ ).",
    "outputFormat": "If there is no answer, print \"-1\" without quotes. Otherwise print a set of $ n $ distinct positive numbers $ a_{1},a_{2},...,a_{n} $ . Each line must contain one number. Each number must consist of not more than $ 100 $ digits, and must not contain any leading zeros. If there are several solutions to that problem, print any of them.\n\nDo not forget, please, that all of the following conditions must be true:\n\n- For every $ i $ and $ j $ ( $ 1<=i,j<=n $ ): $ GCD(a_{i},a_{j})\u22601 $\n- $ GCD(a_{1},a_{2},...,a_{n})=1 $\n- For every $ i $ and $ j $ ( $ 1<=i,j<=n,i\u2260j $ ): $ a_{i}\u2260a_{j} $\n\nPlease, do not use %lld specificator to read or write 64-bit integers in C++. It is preffered to use cout (also you may use %I64d).",
    "samples": [
        [
            "3\n",
            "99\n55\n11115\n"
        ],
        [
            "4\n",
            "385\n360\n792\n8360\n"
        ]
    ],
    "hint": "",
    "translation": "\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217\u4f7f\u5176\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a\n\n1. \u4efb\u610f\u4e24\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570\u4e0d\u7b49\u4e8e1\n2. \u6240\u6709\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570\u7b49\u4e8e1\n3. \u4efb\u610f\u4e24\u6570\u4e92\u4e0d\u76f8\u540c\n\n\u82e5\u6709\u591a\u7ec4\u89e3\uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u7ec4\u3002\u82e5\u65e0\u89e3\uff0c\u8f93\u51fa-1\u3002\n\u8f93\u51fa\u7684\u6570\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7100\u4f4d\u3002\n"
}