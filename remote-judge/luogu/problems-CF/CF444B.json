{
    "description": "DZY loves Fast Fourier Transformation, and he enjoys using it.\n\nFast Fourier Transformation is an algorithm used to calculate convolution. Specifically, if $ a $ , $ b $ and $ c $ are sequences with length $ n $ , which are indexed from $ 0 $ to $ n-1 $ , and\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF444B/7b8bbc996edafee525df233cf5ddc2a80add55f1.png)We can calculate $ c $ fast using Fast Fourier Transformation.\n\nDZY made a little change on this formula. Now\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF444B/e4369feaf99b9f895a003f77c4672d4618de9da5.png)To make things easier, $ a $ is a permutation of integers from $ 1 $ to $ n $ , and $ b $ is a sequence only containing $ 0 $ and $ 1 $ . Given $ a $ and $ b $ , DZY needs your help to calculate $ c $ .\n\nBecause he is naughty, DZY provides a special way to get $ a $ and $ b $ . What you need is only three integers $ n $ , $ d $ , $ x $ . After getting them, use the code below to generate $ a $ and $ b $ .\n\n```\n//x is 64-bit variable;\nfunction getNextX() {\n    x = (x * 37 + 10007) % 1000000007;\n    return x;\n}\nfunction initAB() {\n    for(i = 0; i < n; i = i + 1){\n        a[i] = i + 1;\n    }\n    for(i = 0; i < n; i = i + 1){\n        swap(a[i], a[getNextX() % (i + 1)]);\n    }\n    for(i = 0; i < n; i = i + 1){\n        if (i < d)\n            b[i] = 1;\n        else\n            b[i] = 0;\n    }\n    for(i = 0; i < n; i = i + 1){\n        swap(b[i], b[getNextX() % (i + 1)]);\n    }\n}\n```\n\nOperation x % y denotes remainder after division $ x $ by $ y $ . Function swap(x, y) swaps two values $ x $ and $ y $ .",
    "inputFormat": "The only line of input contains three space-separated integers $ n,d,x\u00a0(1<=d<=n<=100000;\u00a00<=x<=1000000006) $ . Because DZY is naughty, $ x $ can't be equal to $ 27777500 $ .",
    "outputFormat": "Output $ n $ lines, the $ i $ -th line should contain an integer $ c_{i-1} $ .",
    "samples": [
        [
            "3 1 1\n",
            "1\n3\n2\n"
        ],
        [
            "5 4 2\n",
            "2\n2\n4\n5\n5\n"
        ],
        [
            "5 4 3\n",
            "5\n5\n5\n5\n4\n"
        ]
    ],
    "hint": "In the first sample, $ a $ is $ [1\\ 3\\ 2] $ , $ b $ is $ [1\\ 0\\ 0] $ , so $ c_{0}=max(1\u00b71)=1 $ , $ c_{1}=max(1\u00b70,3\u00b71)=3 $ , $ c_{2}=max(1\u00b70,3\u00b70,2\u00b71)=2 $ .\n\nIn the second sample, $ a $ is $ [2\\ 1\\ 4\\ 5\\ 3] $ , $ b $ is $ [1\\ 1\\ 1\\ 0\\ 1] $ .\n\nIn the third sample, $ a $ is $ [5\\ 2\\ 1\\ 4\\ 3] $ , $ b $ is $ [1\\ 1\\ 1\\ 1\\ 0] $ .",
    "translation": "# CF444B DZY Loves FFT\n## \u9898\u76ee\u63cf\u8ff0\nDzy\u559c\u6b22\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362\uff0c\u4ed6\u559c\u6b22\u4f7f\u7528\u5b83\u3002\n\n\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362\u662f\u4e00\u79cd\u7528\u4e8e\u8ba1\u7b97\u5377\u79ef\u7684\u7b97\u6cd5\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u5982\u679ca\u3001b\u548cc\u662f\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217\uff0c\u4ece0\u53d8\u4e3an-1\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362\u5feb\u901f\u8ba1\u7b97c\u3002\n\nDzy\u5bf9\u8fd9\u4e2a\u516c\u5f0f\u505a\u4e86\u4e00\u70b9\u4fee\u6539\u3002\u73b0\u5728\u8ba9\u4e8b\u60c5\u7b80\u5355\u70b9\uff0ca\u662f\u4ece1\u5230n\u7684\u6574\u6570\u6392\u5217\uff0cb\u662f\u4e00\u4e2a\u53ea\u5305\u542b0\u548c1\u7684\u5e8f\u5217\u3002\u7ed9\u5b9aa\u548cb\uff0cdzy\u9700\u8981\u4f60\u7684\u5e2e\u52a9\u6765\u8ba1\u7b97c\u3002\n\n\u56e0\u4e3a\u4ed6\u6dd8\u6c14\uff0cDZY\u63d0\u4f9b\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u65b9\u6cd5\u6765\u83b7\u5f97A\u548cB\u3002\u4f60\u53ea\u9700\u8981\u4e09\u4e2a\u6574\u6570n\uff0cd\uff0cx\u3002\u83b7\u53d6\u5b83\u4eec\u4e4b\u540e\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u751f\u6210A\u548cB\u3002\n```\n//x is 64-bit variable;\nfunction getNextX() {\n    x = (x * 37 + 10007) % 1000000007;\n    return x;\n}\nfunction initAB() {\n    for(i = 0; i < n; i = i + 1){\n        a[i] = i + 1;\n    }\n    for(i = 0; i < n; i = i + 1){\n        swap(a[i], a[getNextX() % (i + 1)]);\n    }\n    for(i = 0; i < n; i = i + 1){\n        if (i < d)\n            b[i] = 1;\n        else\n            b[i] = 0;\n    }\n    for(i = 0; i < n; i = i + 1){\n        swap(b[i], b[getNextX() % (i + 1)]);\n    }\n}\n```\n\u64cd\u4f5cx%y\u8868\u793ax\u9664\u4ee5y\u540e\u7684\u4f59\u6570\u3002\u51fd\u6570\u4ea4\u6362\uff08x\uff0cy\uff09\u4ea4\u6362\u4e24\u4e2a\u503cx\u548cy\u3002\n## \u8f93\u5165\u683c\u5f0f\n\u552f\u4e00\u4e00\u884c\u8f93\u5165\u5305\u542b\u4e09\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u6574\u6570n\u3001d\u3001x\uff081<=d<=n<=100000\uff1b0<=x<=10000000006\uff09\u3002\u56e0\u4e3adzy\u5f88\u6dd8\u6c14\uff0cx\u4e0d\u80fd\u7b49\u4e8e2777500\n## \u8f93\u51fa\u683c\u5f0f\n\u8f93\u51fan\u884c\uff0c\u7b2ci\u884c\u5e94\u5305\u542b\u6574\u6570c_{i-1}\u3002"
}