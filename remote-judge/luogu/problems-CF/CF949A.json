{
    "description": "Oleg writes down the history of the days he lived. For each day he decides if it was good or bad. Oleg calls a non-empty sequence of days a zebra, if it starts with a bad day, ends with a bad day, and good and bad days are alternating in it. Let us denote bad days as 0 and good days as 1. Then, for example, sequences of days 0, 010, 01010 are zebras, while sequences 1, 0110, 0101 are not.\n\nOleg tells you the story of days he lived in chronological order in form of string consisting of 0 and 1. Now you are interested if it is possible to divide Oleg's life history into several subsequences, each of which is a zebra, and the way it can be done. Each day must belong to exactly one of the subsequences. For each of the subsequences, days forming it must be ordered chronologically. Note that subsequence does not have to be a group of consecutive days.",
    "inputFormat": "In the only line of input data there is a non-empty string $ s $ consisting of characters 0 and 1, which describes the history of Oleg's life. Its length (denoted as $ |s| $ ) does not exceed $ 200000 $ characters.",
    "outputFormat": "If there is a way to divide history into zebra subsequences, in the first line of output you should print an integer $ k $ ( $ 1<=k<=|s| $ ), the resulting number of subsequences. In the $ i $ -th of following $ k $ lines first print the integer $ l_{i} $ ( $ 1<=l_{i}<=|s| $ ), which is the length of the $ i $ -th subsequence, and then $ l_{i} $ indices of days forming the subsequence. Indices must follow in ascending order. Days are numbered starting from 1. Each index from $ 1 $ to $ n $ must belong to exactly one subsequence. If there is no way to divide day history into zebra subsequences, print -1.\n\nSubsequences may be printed in any order. If there are several solutions, you may print any of them. You do not have to minimize nor maximize the value of $ k $ .",
    "samples": [
        [
            "0010100\n",
            "3\n3 1 3 4\n3 2 5 6\n1 7\n"
        ],
        [
            "111\n",
            "-1\n"
        ]
    ],
    "hint": "",
    "translation": "\u7ed9\u4f60\u4e00\u4e2a01\u4e32\uff0c\u8981\u6c42\u5c06\u5b83\u5212\u5206\u6210\u591a\u4e2a\u5b50\u5e8f\u5217\uff0c\u5b50\u5e8f\u5217\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u5b50\u5e8f\u5217\u8981\u6ee1\u8db3\u4ee50\u5f00\u5934\uff0c\u4ee50\u7ed3\u5c3e\uff0c\u4e2d\u95f401\u4ea4\u66ff\u51fa\u73b0\u3002\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u8f93\u5165\u4e00\u4e2a\u53ea\u670901\u7684\u5b57\u7b26\u4e32\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u7b2c1\u884c\u5b50\u5e8f\u5217\u7684\u4e2a\u6570k\uff0c\u540e\u9762k\u884c\u7684\u7b2c1\u4e2a\u6570n\u4e3a\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u7b2c2\u4e2a\u6570\u5230\u7b2cn+1\u4e2a\u6570\u8868\u793a\u5b50\u5e8f\u5217\u4e2d\u7684\u6570\u5728\u539f\u4e32\u4e2d\u7684\u4f4d\u7f6e\u3002\n\u5982\u679c\u6ca1\u6709\u5408\u6cd5\u7684\u65b9\u6848\u5219\u8f93\u51fa-1\u3002\n\u4e0d\u9700\u8981\u6700\u5927\u5316\u6216\u8005\u6700\u5c0f\u5316k\u7684\u503c\u3002\n\n\u611f\u8c22@zhaotiensn \u63d0\u4f9b\u7684\u7ffb\u8bd1"
}