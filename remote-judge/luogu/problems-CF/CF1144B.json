{
    "description": "Polycarp has an array $ a $ consisting of $ n $ integers.\n\nHe wants to play a game with this array. The game consists of several moves. On the first move he chooses any element and deletes it (after the first move the array contains $ n-1 $ elements). For each of the next moves he chooses any element with the only restriction: its parity should differ from the parity of the element deleted on the previous move. In other words, he alternates parities (even-odd-even-odd-... or odd-even-odd-even-...) of the removed elements. Polycarp stops if he can't make a move.\n\nFormally:\n\n- If it is the first move, he chooses any element and deletes it;\n- If it is the second or any next move: \n  - if the last deleted element was odd, Polycarp chooses any even element and deletes it;\n  - if the last deleted element was even, Polycarp chooses any odd element and deletes it.\n- If after some move Polycarp cannot make a move, the game ends.\n\nPolycarp's goal is to minimize the sum of non-deleted elements of the array after end of the game. If Polycarp can delete the whole array, then the sum of non-deleted elements is zero.\n\nHelp Polycarp find this value.",
    "inputFormat": "The first line of the input contains one integer $ n $ ( $ 1 \\le n \\le 2000 $ ) \u2014 the number of elements of $ a $ .\n\nThe second line of the input contains $ n $ integers $ a_1, a_2, \\dots, a_n $ ( $ 0 \\le a_i \\le 10^6 $ ), where $ a_i $ is the $ i $ -th element of $ a $ .",
    "outputFormat": "Print one integer \u2014 the minimum possible sum of non-deleted elements of the array after end of the game.",
    "samples": [
        [
            "5\n1 5 7 8 2\n",
            "0\n"
        ],
        [
            "6\n5 1 2 4 6 3\n",
            "0\n"
        ],
        [
            "2\n1000000 1000000\n",
            "1000000\n"
        ]
    ],
    "hint": "",
    "translation": "$Polycarp$\u6709\u4e00\u4e2a\u6709$n$\u4e2a\u6570\u7684\u6570\u7ec4\uff0c\u4ed6\u4f1a\u8f6e\u6d41\u4ece\u4e2d\u5220\u53bb\u6570\uff0c\u6bd4\u5982\uff1a\u5947\u6570-\u5076\u6570-\u5947\u6570-\u5076\u6570-\u5947\u6570-\u5076\u6570-\u5947\u6570-\u5076\u6570\u00b7\u00b7\u00b7$\\ \\ \\ $\u6216\uff1a\u5076\u6570-\u5947\u6570-\u5076\u6570-\u5947\u6570-\u5076\u6570-\u5947\u6570-\u5076\u6570-\u5947\u6570\u00b7\u00b7\u00b7\u76f4\u5230\u65e0\u6cd5\u5220\u9664\u3002\n\n### \u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c:\u4e00\u4e2a\u6570\u5b57$n( 1 \\le n \\le 2000 1\u2264n\u22642000 )$\u8868\u793a\u6570\u7ec4\u5927\u5c0f\u3002\n\n\u7b2c\u4e8c\u884c\uff1a$n$\u4e2a\u6570\uff0c\u8868\u793a$a_{1},a_{2},a_{3}...a_{n} (0\\le a_{i} \\le 10^{6})$\u4e2d\u7684\u6570\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u6570\u7ec4\u4e2d\u5269\u4f59\u6570\u7684**\u6700\u5c0f\u548c**\u3002\n\n\u82e5\u6574\u4e2a\u6570\u7ec4\u53ef\u4ee5\u5220\u9664\uff0c**\u8f93\u51fa$0$**"
}