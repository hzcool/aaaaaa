{
    "description": "Would you want to fight against bears riding horses? Me neither.\n\nLimak is a grizzly bear. He is general of the dreadful army of Bearland. The most important part of an army is cavalry of course.\n\nCavalry of Bearland consists of $ n $ warriors and $ n $ horses. $ i $ -th warrior has strength $ w_{i} $ and $ i $ -th horse has strength $ h_{i} $ . Warrior together with his horse is called a unit. Strength of a unit is equal to multiplied strengths of warrior and horse. Total strength of cavalry is equal to sum of strengths of all $ n $ units. Good assignment of warriors and horses makes cavalry truly powerful.\n\nInitially, $ i $ -th warrior has $ i $ -th horse. You are given $ q $ queries. In each query two warriors swap their horses with each other.\n\nGeneral Limak must be ready for every possible situation. What if warriors weren't allowed to ride their own horses? After each query find the maximum possible strength of cavalry if we consider assignments of all warriors to all horses that no warrior is assigned to his own horse (it can be proven that for $ n>=2 $ there is always at least one correct assignment).\n\nNote that we can't leave a warrior without a horse.",
    "inputFormat": "The first line contains two space-separated integers, $ n $ and $ q $ ( $ 2<=n<=30\\ 000 $ , $ 1<=q<=10\\ 000 $ ).\n\nThe second line contains $ n $ space-separated integers, $ w_{1},w_{2},...,w_{n} $ ( $ 1<=w_{i}<=10^{6} $ ) \u2014 strengths of warriors.\n\nThe third line contains $ n $ space-separated integers, $ h_{1},h_{2},...,h_{n} $ ( $ 1<=h_{i}<=10^{6} $ ) \u2014 strengths of horses.\n\nNext $ q $ lines describe queries. $ i $ -th of them contains two space-separated integers $ a_{i} $ and $ b_{i} $ ( $ 1<=a_{i},b_{i}<=n $ , $ a_{i}\u2260b_{i} $ ), indices of warriors who swap their horses with each other.",
    "outputFormat": "Print $ q $ lines with answers to queries. In $ i $ -th line print the maximum possible strength of cavalry after first $ i $ queries.",
    "samples": [
        [
            "4 2\n1 10 100 1000\n3 7 2 5\n2 4\n2 4\n",
            "5732\n7532\n"
        ],
        [
            "3 3\n7 11 5\n3 2 1\n1 2\n1 3\n2 3\n",
            "44\n48\n52\n"
        ],
        [
            "7 4\n1 2 4 8 16 32 64\n87 40 77 29 50 11 18\n1 5\n2 7\n6 2\n5 6\n",
            "9315\n9308\n9315\n9315\n"
        ]
    ],
    "hint": "Clarification for the first sample:\n\n Warriors: 1 10 100 1000Horses: 3 7 2 5\n\nAfter first query situation looks like the following:\n\n Warriors: 1 10 100 1000Horses: 3 5 2 7\n\nWe can get $ 1\u00b72+10\u00b73+100\u00b77+1000\u00b75=5732 $ (note that no hussar takes his own horse in this assignment).\n\nAfter second query we get back to initial situation and optimal assignment is $ 1\u00b72+10\u00b73+100\u00b75+1000\u00b77=7532 $ .\n\nClarification for the second sample. After first query:\n\n Warriors: 7 11 5Horses: 2 3 1\n\nOptimal assignment is $ 7\u00b71+11\u00b72+5\u00b73=44 $ .\n\nThen after second query $ 7\u00b73+11\u00b72+5\u00b71=48 $ .\n\nFinally $ 7\u00b72+11\u00b73+5\u00b71=52 $ .",
    "translation": "\u6709 $n$ \u4e2a\u4eba\u548c $n$ \u5339\u9a6c\uff0c\u7b2c $i$ \u4e2a\u4eba\u5bf9\u5e94\u7b2c $i$ \u5339\u9a6c\u3002\u7b2c $i$ \u4e2a\u4eba\u80fd\u529b\u503c $w_i$\uff0c\u7b2c $i$ \u5339\u9a6c\u80fd\u529b\u503c $h_i$\uff0c\u7b2c $i$ \u4e2a\u4eba\u9a91\u7b2c $j$ \u5339\u9a6c\u7684\u603b\u80fd\u529b\u503c\u4e3a $w_i\\times h_j$\uff0c\u6574\u4e2a\u519b\u961f\u7684\u603b\u80fd\u529b\u503c\u4e3a $\\sum w_i\\times h_j$\uff08\u4e00\u4e2a\u4eba\u53ea\u80fd\u9a91\u4e00\u5339\u9a6c\uff0c\u4e00\u5339\u9a6c\u53ea\u80fd\u88ab\u4e00\u4e2a\u4eba\u9a91\uff09\u3002\u6709\u4e00\u4e2a\u8981\u6c42\uff1a\u6bcf\u4e2a\u4eba\u90fd\u4e0d\u80fd\u9a91\u81ea\u5df1\u5bf9\u5e94\u7684\u9a6c\u3002\u8ba9\u4f60\u5236\u5b9a\u9a91\u9a6c\u65b9\u6848\uff0c\u4f7f\u5f97\u6574\u4e2a\u519b\u961f\u7684\u603b\u80fd\u529b\u503c\u6700\u5927\u3002\u73b0\u5728\u6709 $q$ \u4e2a\u64cd\u4f5c\uff0c\u6bcf\u6b21\u7ed9\u51fa $a,b$\uff0c\u4ea4\u6362 $a$ \u548c $b$ \u5bf9\u5e94\u7684\u9a6c\u3002\u6bcf\u6b21\u64cd\u4f5c\u540e\u4f60\u90fd\u9700\u8981\u8f93\u51fa\u6700\u5927\u7684\u603b\u80fd\u529b\u503c\u3002"
}