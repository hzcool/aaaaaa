{
    "description": "This is an interactive problem.\n\nKira has a hidden positive integer $ n $ , and Hayato needs to guess it.\n\nInitially, Kira gives Hayato the value $ \\mathrm{cnt} $ \u2014 the number of unit bits in the binary notation of $ n $ . To guess $ n $ , Hayato can only do operations of one kind: choose an integer $ x $ and subtract it from $ n $ . Note that after each operation, the number $ n $ changes. Kira doesn't like bad requests, so if Hayato tries to subtract a number $ x $ greater than $ n $ , he will lose to Kira. After each operation, Kira gives Hayato the updated value $ \\mathrm{cnt} $ \u2014 the number of unit bits in the binary notation of the updated value of $ n $ .\n\nKira doesn't have much patience, so Hayato must guess the original value of $ n $ after no more than $ 30 $ operations.\n\nSince Hayato is in elementary school, he asks for your help. Write a program that guesses the number $ n $ . Kira is an honest person, so he chooses the initial number $ n $ before all operations and does not change it afterward.",
    "inputFormat": "The input data contains several test cases. The first line contains one integer $ t $ ( $ 1 \\le t \\le 500 $ ) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains the number $ \\mathrm{cnt} $ \u2014 the initial number of unit bits in the binary notation $ n $ .\n\nThe hidden integer $ n $ satisfies the following constraint: $ 1 \\le n \\le 10^9 $ .",
    "outputFormat": "To guess $ n $ , you can perform the operation at most $ 30 $ times. To do that, print a line with the following format: \"- x\" ( $ 1 \\le x \\le 10^9 $ ).\n\nAfter this operation, the number $ x $ is subtracted from $ n $ , and therefore $ n $ is changed. If the number $ x $ is greater than the current value of $ n $ , then the request is considered invalid.\n\nAfter the operation read a line containing a single non-negative integer $ \\mathrm{cnt} $ \u2014 the number of unit bits in the binary notation of the current $ n $ after the operation.\n\nWhen you know the initial value of $ n $ , print one line in the following format: \"! n\" ( $ 1 \\le n \\le 10^9 $ ).\n\nAfter that, move on to the next test case, or terminate the program if there are none.\n\nIf your program performs more than $ 30 $ operations for one test case, subtracts a number $ x $ greater than $ n $ , or makes an incorrect request, then response to the request will be -1, after receiving such response, your program must exit immediately to receive the Wrong Answer verdict. Otherwise, you can get any other verdict.\n\nAfter printing a query or the answer, do not forget to output the end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain a single integer $ t $ ( $ 1 \\leq t \\leq 500 $ ).\n\nEach test case should contain one integer $ n $ ( $ 1 \\leq n \\leq 10^9 $ ) on a separate line.",
    "samples": [
        [
            "3\n\n1\n\n0\n\n1\n\n1\n\n0\n\n2\n\n1\n\n0",
            "- 1\n\n! 1\n\n- 1\n\n- 1\n\n! 2\n\n- 2\n\n- 1\n\n! 3"
        ]
    ],
    "hint": "For example, the number of unit bits in number $ 6 $ is $ 2 $ , because binary notation of $ 6 $ is $ 110 $ . For $ 13 $ the number of unit bits is $ 3 $ , because $ 13_{10} = 1101_2 $ .\n\nIn the first test case, $ n = 1 $ , so the input is the number $ 1 $ . After subtracting one from $ n $ , it becomes zero, so the number of unit bits in it is $ 0 $ .\n\nIn the third test case, $ n = 3 $ , which in binary representation looks like $ 3_{10} = 11_2 $ , so the input is the number of ones, that is $ 2 $ . After subtracting $ 2 $ , $ n = 1 $ , so the number of unit bits is now $ 1 $ . After subtracting one from $ n $ , it becomes equal to zero.\n\nNote that the blank lines in the input and output examples are shown for clarity and are not present in the actual interaction.",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\n\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\n\nKira \u548c Hayato \u6b63\u5728\u73a9\u4e00\u79cd\u731c\u6570\u6e38\u620f\uff0cKira \u60f3\uff0cHayato \u731c\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u8f6e\u6e38\u620f\uff0c\u8bbe Kira \u60f3\u7684\u6570\u4e3a $n$\u3002\u521d\u59cb\u65f6\uff0cKira \u4f1a\u7ed9\u51fa $cnt$\uff0c\u8868\u793a $n$ \u7684\u4e8c\u8fdb\u5236\u4e2d $1$ \u7684\u4e2a\u6570\u3002Hayato \u53ea\u80fd\u8fdb\u884c\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1. `- x`\uff1a\u4fee\u6539\u64cd\u4f5c\u3002Kira \u4f1a\u5c06 $n$ \u51cf\u53bb $x$\uff08\u6ce8\u610f\u6b64\u5904 $n$ \u4f1a\u88ab\u4fee\u6539\uff09\uff0c\u5e76\u7ed9\u51fa\u6b64\u65f6\u7684 $cnt$\u3002\u7279\u522b\u5730\uff0c\u82e5 $x > n$\uff0c\u5219 Kira \u76f4\u63a5\u83b7\u80dc\u3002\n2. `! x`\uff1a\u67e5\u8be2\u64cd\u4f5c\u3002Kira \u4f1a\u5c06 $x$ \u4e0e\u6700\u521d\u7684 $n$ \u5bf9\u6bd4\uff0c\u82e5\u4e8c\u8005\u76f8\u540c\u5219 Hayato \u83b7\u80dc\uff0c\u53cd\u4e4b Kira \u83b7\u80dc\uff0c\u8fd9\u8f6e\u6e38\u620f\u7acb\u5373\u7ed3\u675f\u3002\n\n\u4ed6\u4eec\u4e00\u5171\u4f1a\u8fdb\u884c $t$ \u8f6e\u6e38\u620f\uff0c\u4f60\u9700\u8981\u5e2e\u52a9 Hayato \u5728\u6bcf\u4e00\u8f6e\u4e2d\u83b7\u80dc\u3002\u540c\u65f6\uff0cKira \u5e76\u4e0d\u662f\u4e00\u4e2a\u5f88\u6709\u8010\u5fc3\u7684\u4eba\uff0c\u56e0\u6b64\u4f60\u8fdb\u884c\u64cd\u4f5c 1 \u7684\u6b21\u6570\u4e0d\u80fd\u8d85\u8fc7 $30$\u3002\n\n\u6ce8\u610f\u6837\u4f8b\u4e2d\u7684\u7a7a\u884c\u53ea\u662f\u4e3a\u4e86\u663e\u793a\u66f4\u6e05\u6670\uff0c\u4e0d\u4f1a\u51fa\u73b0\u5728\u5b9e\u9645\u8bc4\u6d4b\u4e2d\u3002\n\n## \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 $t(1 \\le t \\le 500)$\uff0c\u8868\u793a\u6709 $t$ \u7ec4\u6d4b\u8bd5\u7528\u4f8b\u3002\n\n\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u7528\u4f8b\uff0c\u9996\u884c\u5747\u4e3a\u4e00\u4e2a\u6574\u6570 $cnt$\uff0c\u8868\u793a $n$ \u7684\u4e8c\u8fdb\u5236\u4e2d $1$ \u7684\u4e2a\u6570\u3002\n\n\u4fdd\u8bc1 $1 \\le n \\le 10^9$\u3002\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c 1\uff0c\u8f93\u51fa\u5355\u72ec\u7684\u4e00\u884c `- x`\uff1b\u76f8\u5e94\u5730\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c 2\uff0c\u8f93\u51fa\u5355\u72ec\u7684\u4e00\u884c `! n`\u3002\n\n\u6bcf\u4e2a\u64cd\u4f5c 1 \u5b8c\u6210\u540e\uff0c\u4ea4\u4e92\u5e93\u4f1a\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570 $cnt$\uff0c\u8868\u793a\u4fee\u6539\u540e\u7684 $n$ \u7684\u4e8c\u8fdb\u5236\u4e2d $1$ \u7684\u4e2a\u6570\u3002\n\n\u518d\u6b21\u5f3a\u8c03\uff0c\u6bcf\u4e00\u8f6e Hayato \u8fdb\u884c\u64cd\u4f5c 1 \u7684\u6b21\u6570\u4e0d\u80fd\u8d85\u8fc7 $30$\u3002\n\n\u786e\u5b9a\u521d\u59cb\u65f6 $n$ \u7684\u503c\u540e\uff0c\u53ef\u8fdb\u884c\u64cd\u4f5c 2 \u9a8c\u8bc1\u7b54\u6848\u3002\n\n\u6ce8\u610f\uff1a\u6bcf\u6b21\u8f93\u51fa\u4efb\u610f\u64cd\u4f5c\u540e\u9700\u8981\u5237\u65b0\u8f93\u51fa\u3002\u8fd9\u91cc\u7ed9\u51fa\u90e8\u5206\u8bed\u8a00\u5237\u65b0\u8f93\u51fa\u7684\u4ee3\u7801\uff1a\n\n|  \u8bed\u8a00  |                \u4ee3\u7801                |\n| :----: | :--------------------------------: |\n|  C++   | `fflush(stdout)` \u6216 `cout.flush()` |\n|  Java  |        `System.out.flush()`        |\n| Pascal |          `flush(output)`           |\n| Python |          `stdout.flush()`          |"
}