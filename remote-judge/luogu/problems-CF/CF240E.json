{
    "description": "A country named Berland has $ n $ cities. They are numbered with integers from $ 1 $ to $ n $ . City with index $ 1 $ is the capital of the country. Some pairs of cities have monodirectional roads built between them. However, not all of them are in good condition. For each road we know whether it needs repairing or not. If a road needs repairing, then it is forbidden to use it. However, the Berland government can repair the road so that it can be used.\n\nRight now Berland is being threatened by the war with the neighbouring state. So the capital officials decided to send a military squad to each city. The squads can move only along the existing roads, as there's no time or money to build new roads. However, some roads will probably have to be repaired in order to get to some cities.\n\nOf course the country needs much resources to defeat the enemy, so you want to be careful with what you're going to throw the forces on. That's why the Berland government wants to repair the minimum number of roads that is enough for the military troops to get to any city from the capital, driving along good or repaired roads. Your task is to help the Berland government and to find out, which roads need to be repaired.",
    "inputFormat": "The first line contains two space-separated integers $ n $ and $ m $ $ (1<=n,m<=10^{5}) $ \u2014 the number of cities and the number of roads in Berland.\n\nNext $ m $ lines contain three space-separated integers $ a_{i},b_{i},c_{i} $ $ (1<=a_{i},b_{i}<=n,a_{i}\u2260b_{i},0<=c_{i}<=1) $ , describing the road from city $ a_{i} $ to city $ b_{i} $ . If $ c_{i} $ equals $ 0 $ , than the given road is in a good condition. If $ c_{i} $ equals $ 1 $ , then it needs to be repaired.\n\nIt is guaranteed that there is not more than one road between the cities in each direction.",
    "outputFormat": "If even after all roads are repaired, it is still impossible to get to some city from the capital, print $ -1 $ . Otherwise, on the first line print the minimum number of roads that need to be repaired, and on the second line print the numbers of these roads, separated by single spaces.\n\nThe roads are numbered starting from $ 1 $ in the order, in which they are given in the input.\n\nIf there are multiple sets, consisting of the minimum number of roads to repair to make travelling to any city from the capital possible, print any of them.\n\nIf it is possible to reach any city, driving along the roads that already are in a good condition, print $ 0 $ in the only output line.",
    "samples": [
        [
            "3 2\n1 3 0\n3 2 1\n",
            "1\n2\n"
        ],
        [
            "4 4\n2 3 0\n3 4 0\n4 1 0\n4 2 1\n",
            "-1\n"
        ],
        [
            "4 3\n1 2 0\n1 3 0\n1 4 0\n",
            "0\n\n"
        ]
    ],
    "hint": "",
    "translation": "\u4e00\u4e2a\u540d\u53eb Berland \u7684\u56fd\u5bb6\u6709 $n$ \u4e2a\u57ce\u5e02\uff0c\u5b83\u4eec\u88ab\u4ece $1$ \u5230 $n$ \u7684\u6574\u6570\u7f16\u53f7\u3002\u7f16\u53f7\u4e3a $1$ \u7684\u57ce\u5e02\u662f\u8fd9\u4e2a\u56fd\u5bb6\u7684\u9996\u90fd\u3002\u4e00\u4e9b\u57ce\u5e02\u4e24\u4e24\u4e4b\u95f4\u6709\u4e00\u6761\u5355\u5411\u9053\u8def\u3002\u7136\u800c\uff0c\u4e0d\u662f\u6240\u6709\u7684\u8def\u90fd\u662f\u5b8c\u597d\u7684\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8def\u6211\u4eec\u90fd\u77e5\u9053\u662f\u5426\u9700\u8981\u4fee\u590d\u3002\u5982\u679c\u4e00\u6761\u8def\u9700\u8981\u4fee\u590d\uff0c\u90a3\u4e48\u5b83\u5c31\u7981\u6b62\u88ab\u4f7f\u7528\u3002\u4f46\u662f\uff0cBerland \u7684\u653f\u5e9c\u53ef\u4ee5\u4fee\u590d\u9053\u8def\u7136\u540e\u8fd9\u6761\u8def\u5c31\u53ef\u4ee5\u7528\u4e86\u3002\n\n\u73b0\u5728 Berland \u6b63\u5728\u53d7\u5230\u90bb\u56fd\u6218\u4e89\u7684\u5a01\u80c1\u3002\u6240\u4ee5\u9996\u90fd\u7684\u5b98\u5458\u51b3\u5b9a\u5f80\u6bcf\u4e2a\u57ce\u5e02\u9001\u4e00\u652f\u519b\u961f\u3002\u5982\u679c\u4ed6\u4eec\u6ca1\u6709\u94b1\u6216\u8005\u65f6\u95f4\u53bb\u5efa\u4e00\u6761\u65b0\u8def\u90a3\u4e48\u8fd9\u4e9b\u519b\u961f\u53ea\u80fd\u591f\u901a\u8fc7\u5b8c\u597d\u7684\u9053\u8def\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u5230\u8fbe\u4e00\u4e9b\u57ce\u5e02\u4e00\u4e9b\u9053\u8def\u53ef\u80fd\u53ef\u4ee5\u4fee\u590d\u597d\u3002\n\n\u5f53\u7136\u56fd\u5bb6\u9700\u8981\u5f88\u591a\u7684\u8d44\u6e90\u53bb\u6218\u80dc\u654c\u4eba\uff0c\u6240\u4ee5\u4f60\u60f3\u8981\u5c0f\u5fc3\u5730\u8ba1\u5212\u6295\u5165\u519b\u961f\u7684\u8d44\u6e90\u3002\u8fd9\u5c31\u662f Berland \u7684\u653f\u5e9c\u60f3\u8981\u5c3d\u53ef\u80fd\u5730\u4fee\u590d\u597d\u6700\u5c11\u7684\u9053\u8def\u8ba9\u519b\u961f\u80fd\u4ece\u9996\u90fd\u5230\u6bcf\u4e00\u4e2a\u57ce\u5e02\u7684\u539f\u56e0\uff0c\u7ed9\u4f60\u4e00\u4e9b\u8def\u5e76\u544a\u8bc9\u4f60\u8fd9\u6761\u8def\u662f\u597d\u7684\u8fd8\u662f\u8981\u4fee\u590d\u7684\u3002\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u5e2e\u52a9 Berland \u653f\u5e9c\u5e76\u627e\u51fa\u54ea\u4e9b\u8def\u9700\u8981\u88ab\u4fee\u590d\u3002\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570 $n,m$\uff08$1 \\leq n,m \\leq 10^5$\uff09\u2014\u2014\u57ce\u5e02\u7684\u6570\u91cf\u548c Berland \u7684\u9053\u8def\u7684\u6570\u91cf\u3002\n\n\u63a5\u4e0b\u6765 $m$ \u884c\u5305\u62ec $3$ \u4e2a\u6574\u6570 $a_i$\uff0c$b_i$\uff0c$c_i$\uff08$1 \\leq a_i,b_i \\leq n$ \uff0c$a_i \\neq b_i$\uff0c$0 \\leq c_i \\leq 1$\uff09\uff0c\u63cf\u8ff0\u7684\u662f\u4e00\u6761\u4ece $a_i$ \u5230 $b_i$ \u7684\u9053\u8def\uff0c\u5982\u679c $c_i$ \u7b49\u4e8e 0\uff0c\u90a3\u4e48\u7ed9\u7684\u8fd9\u6761\u8def\u5c31\u662f\u597d\u7684\uff1b\u5982\u679c $c_i$ \u7b49\u4e8e 1\uff0c\u90a3\u4e48\n\u7ed9\u7684\u8fd9\u6761\u8def\u5c31\u662f\u9700\u8981\u4fee\u7406\u7684\u3002\n\n\u4fdd\u8bc1\u6ca1\u6709\u91cd\u8fb9\u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u5982\u679c\u4fee\u590d\u4e86\u6240\u6709\u7684\u9053\u8def\u4ee5\u540e\u8fd8\u662f\u4e0d\u80fd\u5230\u8fbe\u6bcf\u4e2a\u57ce\u5e02\uff0c\u8f93\u51fa-1\u3002\u5426\u5219\uff0c\u7b2c\u4e00\u884c\u8f93\u51fa\u6709\u51e0\u6761\u8def\u9700\u8981\u4fee\u590d\uff0c\u7b2c\u4e8c\u884c\u8f93\u51fa\u9700\u8981\u4fee\u590d\u7684\u8def\u7684\u7f16\u53f7\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\n\n\u9053\u8def\u4ece 1 \u5f00\u59cb\u7f16\u53f7\uff0c\u5728\u8f93\u5165\u4e2d\u7ed9\u51fa\u3002\n\n\u5982\u679c\u6709\u591a\u79cd\u65b9\u6848\uff0c\u8bf7\u8f93\u51fa\u4efb\u610f\u4e00\u79cd\u3002\u5982\u679c\u6240\u6709\u8def\u90fd\u662f\u597d\u7684\uff0c\u8bf7\u53ea\u5728\u7b2c\u4e00\u884c\u8f93\u51fa 0\u3002"
}