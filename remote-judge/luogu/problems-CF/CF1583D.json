{
    "description": "It turns out that the meaning of life is a permutation $ p_1, p_2, \\ldots, p_n $ of the integers $ 1, 2, \\ldots, n $ ( $ 2 \\leq n \\leq 100 $ ). Omkar, having created all life, knows this permutation, and will allow you to figure it out using some queries.\n\nA query consists of an array $ a_1, a_2, \\ldots, a_n $ of integers between $ 1 $ and $ n $ . $ a $ is not required to be a permutation. Omkar will first compute the pairwise sum of $ a $ and $ p $ , meaning that he will compute an array $ s $ where $ s_j = p_j + a_j $ for all $ j = 1, 2, \\ldots, n $ . Then, he will find the smallest index $ k $ such that $ s_k $ occurs more than once in $ s $ , and answer with $ k $ . If there is no such index $ k $ , then he will answer with $ 0 $ .\n\nYou can perform at most $ 2n $ queries. Figure out the meaning of life $ p $ .",
    "inputFormat": "",
    "outputFormat": "Start the interaction by reading single integer $ n $ ( $ 2 \\leq n \\leq 100 $ ) \u2014 the length of the permutation $ p $ .\n\nYou can then make queries. A query consists of a single line \" $ ? \\enspace a_1 \\enspace a_2 \\enspace \\ldots \\enspace a_n $ \" ( $ 1 \\leq a_j \\leq n $ ).\n\nThe answer to each query will be a single integer $ k $ as described above ( $ 0 \\leq k \\leq n $ ).\n\nAfter making a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nTo output your answer, print a single line \" $ ! \\enspace p_1 \\enspace p_2 \\enspace \\ldots \\enspace p_n $ \" then terminate.\n\nYou can make at most $ 2n $ queries. Outputting the answer does not count as a query.\n\nHack Format\n\nTo hack, first output a line containing $ n $ ( $ 2 \\leq n \\leq 100 $ ), then output another line containing the hidden permutation $ p_1, p_2, \\ldots, p_n $ of numbers from $ 1 $ to $ n $ .",
    "samples": [
        [
            "5\n\n2\n\n0\n\n1",
            "? 4 4 2 3 2\n\n? 3 5 1 5 5\n\n? 5 2 4 3 1\n\n! 3 2 1 5 4"
        ]
    ],
    "hint": "In the sample, the hidden permutation $ p $ is $ [3, 2, 1, 5, 4] $ . Three queries were made.\n\nThe first query is $ a = [4, 4, 2, 3, 2] $ . This yields $ s = [3 + 4, 2 + 4, 1 + 2, 5 + 3, 4 + 2] = [7, 6, 3, 8, 6] $ . $ 6 $ is the only number that appears more than once, and it appears first at index $ 2 $ , making the answer to the query $ 2 $ .\n\nThe second query is $ a = [3, 5, 1, 5, 5] $ . This yields $ s = [3 + 3, 2 + 5, 1 + 1, 5 + 5, 4 + 5] = [6, 7, 2, 10, 9] $ . There are no numbers that appear more than once here, so the answer to the query is $ 0 $ .\n\nThe third query is $ a = [5, 2, 4, 3, 1] $ . This yields $ s = [3 + 5, 2 + 2, 1 + 4, 5 + 3, 4 + 1] = [8, 4, 5, 8, 5] $ . $ 5 $ and $ 8 $ both occur more than once here. $ 5 $ first appears at index $ 3 $ , while $ 8 $ first appears at index $ 1 $ , and $ 1 < 3 $ , making the answer to the query $ 1 $ .\n\nNote that the sample is only meant to provide an example of how the interaction works; it is not guaranteed that the above queries represent a correct strategy with which to determine the answer.",
    "translation": "\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\n\n\u539f\u6765\u751f\u547d\u7684\u610f\u4e49\u662f\u4e00\u4e2a $n$ ( $ 2 \\leq n \\leq 100 $ ) \u7684\u6392\u5217\u3002 \u521b\u9020\u4e86\u4e16\u4e0a\u6240\u6709\u751f\u547d\u7684 Omkar \u77e5\u9053\u8fd9\u4e2a\u6392\u5217\uff0c\u4ed6\u5141\u8bb8\u4f60\u5728\u6709\u9650\u7684\u8be2\u95ee\u6b21\u6570\u5185\u67e5\u8be2\u51fa\u8fd9\u4e2a\u6392\u5217\u662f\u4ec0\u4e48\u3002\n\n\u6bcf\u4e00\u6b21\u8be2\u95ee\u4f60\u53ef\u4ee5\u7ed9\u51fa\u4e00\u4e2a\u5e8f\u5217 $ a_1, a_2, \\ldots, a_n $ ( $1\\le a_1,a_2,\\ldots,a_n \\le n$ ) \u6765\u5bf9 Omkar \u8fdb\u884c\u8be2\u95ee\u3002 $ a $ \u5e8f\u5217**\u4e0d\u4e00\u5b9a**\u8981\u662f\u4e00\u4e2a\u6392\u5217\u3002\u4e4b\u540e Omkar \u4f1a\u9010\u4e2a\u5c06 $a_i$ \u4e0e $p_i$ \u76f8\u52a0\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217 $s$ \uff0c\u5373\u5bf9\u4e8e\u6bcf\u4e2a $j$ ( $1\\le j \\le n$ ) \uff0c$ s_j = p_j + a_j $ \u3002\u6700\u540e $s$ \u5e8f\u5217\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b\u76f8\u540c\u7684\u6570\uff0c\u4f60\u5c06\u8bfb\u5165 Omkar \u544a\u8bc9\u4f60\u7684**\u7b2c\u4e00\u4e2a\u51fa\u73b0\u76f8\u540c\u6570\u7684\u4f4d\u7f6e**\u3002\u5982\u679c\u6ca1\u6709\u76f8\u540c\u7684\u6570\u51fa\u73b0\uff0c\u4f60\u5c06\u8bfb\u5165\u6570\u5b57 $0$ \u3002\n\n\u4f60\u6700\u591a\u53ea\u80fd\u8fdb\u884c $2n$ \u6b21\u8be2\u95ee\u3002"
}