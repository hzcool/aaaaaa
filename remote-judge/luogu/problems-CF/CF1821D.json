{
    "description": "You are playing with a really long strip consisting of $ 10^{18} $ white cells, numbered from left to right as $ 0 $ , $ 1 $ , $ 2 $ and so on. You are controlling a special pointer that is initially in cell $ 0 $ . Also, you have a \"Shift\" button you can press and hold.\n\nIn one move, you can do one of three actions:\n\n- move the pointer to the right (from cell $ x $ to cell $ x + 1 $ );\n- press and hold the \"Shift\" button;\n- release the \"Shift\" button: the moment you release \"Shift\", all cells that were visited while \"Shift\" was pressed are colored in black.\n\n (Of course, you can't press Shift if you already hold it. Similarly, you can't release Shift if you haven't pressed it.)Your goal is to color at least $ k $ cells, but there is a restriction: you are given $ n $ segments $ [l_i, r_i] $ \u2014 you can color cells only inside these segments, i. e. you can color the cell $ x $ if and only if $ l_i \\le x \\le r_i $ for some $ i $ .\n\nWhat is the minimum number of moves you need to make in order to color at least $ k $ cells black?",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1 \\le t \\le 10^4 $ ) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers $ n $ and $ k $ ( $ 1 \\le n \\le 2 \\cdot 10^5 $ ; $ 1 \\le k \\le 10^9 $ ) \u2014 the number of segments and the desired number of black cells, respectively.\n\nThe second line contains $ n $ integers $ l_1, l_2, \\dots, l_n $ ( $ 1 \\le l_1 < l_2 < \\dots < l_n \\le 10^9 $ ), where $ l_i $ is the left border of the $ i $ -th segment.\n\nThe third line contains $ n $ integers $ r_1, r_2, \\dots, r_n $ ( $ 1 \\le r_i \\le 10^9 $ ; $ l_i \\le r_i < l_{i + 1} - 1 $ ), where $ r_i $ is the right border of the $ i $ -th segment.\n\nAdditional constraints on the input:\n\n- every cell belongs to at most one segment;\n- the sum of $ n $ doesn't exceed $ 2 \\cdot 10^5 $ .",
    "outputFormat": "For each test case, print the minimum number of moves to color at least $ k $ cells black, or $ -1 $ if it's impossible.",
    "samples": [
        [
            "4\n2 3\n1 3\n1 4\n4 20\n10 13 16 19\n11 14 17 20\n2 3\n1 3\n1 10\n2 4\n99 999999999\n100 1000000000",
            "8\n-1\n7\n1000000004"
        ]
    ],
    "hint": "In the first test case, one of the optimal sequences of operations is the following:\n\n1. Move right: pointer is moving into cell $ 1 $ ;\n2. Press Shift;\n3. Release Shift: cell $ 1 $ is colored black;\n4. Move right: pointer is moving into cell $ 2 $ ;\n5. Move right: pointer is moving into cell $ 3 $ ;\n6. Press Shift;\n7. Move right: pointer is moving into cell $ 4 $ ;\n8. Release Shift: cells $ 3 $ and $ 4 $ are colored in black.\n\n We've colored $ 3 $ cells in $ 8 $ moves.In the second test case, we can color at most $ 8 $ cells, while we need $ 20 $ cell to color.\n\nIn the third test case, one of the optimal sequences of operations is the following:\n\n1. Move right: pointer is moving into cell $ 1 $ ;\n2. Move right: pointer is moving into cell $ 2 $ ;\n3. Move right: pointer is moving into cell $ 3 $ ;\n4. Press Shift;\n5. Move right: pointer is moving into cell $ 4 $ ;\n6. Move right: pointer is moving into cell $ 5 $ ;\n7. Release Shift: cells $ 3 $ , $ 4 $ and $ 5 $ are colored in black.\n\n We've colored $ 3 $ cells in $ 7 $ moves.",
    "translation": "\u5728\u4e00\u6761\u6570\u8f74\u4e0a\u6709\u65e0\u7a77\u4e2a\u70b9\uff0c\u4e0b\u6807\u4e3a $0, 1, 2, \\ldots$\uff0c\u521d\u59cb\u65f6\u6bcf\u4e2a\u70b9\u90fd\u662f\u767d\u8272\u7684\u3002\n\n\u4f60\u63a7\u5236\u7740\u4e00\u4e2a\u673a\u5668\u4eba\uff0c\u521d\u59cb\u65f6\u673a\u5668\u4eba\u4f4d\u4e8e\u5750\u6807\u4e3a $0$ \u7684\u90a3\u4e2a\u70b9\u3002  \n\n\u673a\u5668\u4eba\u6709\u4e24\u79cd\u72b6\u6001\uff1a\u6fc0\u6d3b\u72b6\u6001 \u548c \u975e\u6fc0\u6d3b\u72b6\u6001\u3002  \n\n\u5f53\u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\u65f6\uff0c\u673a\u5668\u4eba\u6240\u5728\u7684\u70b9\u90fd\u4f1a\u88ab\u67d3\u6210\u9ed1\u8272\u3002\n\n\u5904\u4e8e\u975e\u6fc0\u6d3b\u72b6\u6001\u65f6\uff0c\u673a\u5668\u4eba\u6240\u5728\u7684\u70b9\u4e0d\u4f1a\u88ab\u67d3\u6210\u9ed1\u8272\u3002  \n\n\u521d\u59cb\u65f6\u673a\u5668\u4eba\u5904\u4e8e\u975e\u6fc0\u6d3b\u72b6\u6001\u3002  \n\n\u4f60\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u673a\u5668\u4eba\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5206\u4e3a\u4e09\u79cd\u7c7b\u578b\u3002\u6bcf\u4e00\u6b21\u64cd\u4f5c\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\u4e4b\u4e00\u6267\u884c\uff1a  \n\n- \u5c06\u673a\u5668\u4eba\u7684\u4f4d\u7f6e\u50cf\u6570\u8f74\u7684\u6b63\u65b9\u5411\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\uff08\u5373\uff1a\u82e5\u5f53\u524d\u673a\u5668\u4eba\u5728\u5750\u6807 $x$\uff0c\u5219\u6267\u884c\u4e00\u6b21\u8be5\u64cd\u4f5c\u540e\u673a\u5668\u4eba\u5c06\u79fb\u52a8\u5230\u5750\u6807 $x+1$ \u7684\u90a3\u4e2a\u70b9\uff09\uff1b\n- \u6fc0\u6d3b\u673a\u5668\u4eba\uff1a\u8be5\u64cd\u4f5c\u53ea\u6709\u5f53\u673a\u5668\u4eba\u5904\u4e8e\u975e\u6fc0\u6d3b\u72b6\u6001\u65f6\u624d\u80fd\u6267\u884c\uff0c\u6267\u884c\u8be5\u64cd\u4f5c\u540e\u673a\u5668\u4eba\u5c06\u53d8\u4e3a \u6fc0\u6d3b\u72b6\u6001\uff1b\n- \u64a4\u9500\u6fc0\u6d3b\u673a\u5668\u4eba\uff1a\u8be5\u64cd\u4f5c\u53ea\u6709\u5f53\u673a\u5668\u4eba\u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\u65f6\u624d\u80fd\u6267\u884c\uff0c\u6267\u884c\u8be5\u64cd\u4f5c\u540e\u673a\u5668\u4eba\u5c06\u53d8\u4e3a \u975e\u6fc0\u6d3b\u72b6\u6001\u3002\n\n\u6709 $n$ \u4e2a\u533a\u95f4\uff0c\u7b2c $i$ \u4e2a\u533a\u95f4\u7528 $[l_i, r_i]$ \u8868\u793a\u3002  \n\n\u4f60\u9700\u8981\u4f7f\u7528\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u5c06\u81f3\u5c11 $k$ \u4e2a\u70b9\u67d3\u6210\u9ed1\u8272\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u9650\u5236\uff0c\u5c31\u662f\uff1a\u8fd9\u4e9b\u67d3\u6210\u9ed1\u8272\u7684\u70b9\u5fc5\u987b\u5305\u542b\u5728\u81f3\u5c11\u4e00\u4e2a\u7ed9\u5b9a\u7684\u533a\u95f4\u4e2d\uff0c\u8fd9\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u8981\u5c06\u5750\u6807\u4e3a $x$ \u7684\u90a3\u4e2a\u70b9\u67d3\u6210\u9ed1\u8272\uff0c\u5219\u5fc5\u987b\u4fdd\u8bc1\u5b58\u5728\u4e00\u4e2a $i(1 \\le i \\le n)$ \u6ee1\u8db3 $l_i \\le x \\le r_i$\u3002  \n\n\u540c\u65f6\uff0c\u672c\u9898\u4e5f\u8981\u6c42\u64cd\u4f5c\u7ed3\u675f\u65f6\u673a\u5668\u4eba\u6062\u590d\u5230\u975e\u6fc0\u6d3b\u72b6\u6001\uff08\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u5bf9\u5e94\u7684\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u662f _\u64a4\u9500\u6fc0\u6d3b\u673a\u5668\u4eba_\uff09\u3002\n\n\u95ee\uff1a\u81f3\u5c11\u9700\u8981\u8fdb\u884c\u51e0\u6b21\u64cd\u4f5c\u80fd\u591f\u4f7f\u81f3\u5c11 $k$ \u4e2a\u70b9\u88ab\u67d3\u6210\u9ed1\u8272\uff0c\u4e14\u6700\u7ec8\u673a\u5668\u4eba\u5904\u4e8e\u975e\u6fc0\u6d3b\u72b6\u6001\uff1fby. quanjun"
}