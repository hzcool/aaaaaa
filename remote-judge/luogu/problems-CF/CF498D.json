{
    "description": "Some country consists of $ (n+1) $ cities, located along a straight highway. Let's number the cities with consecutive integers from $ 1 $ to $ n+1 $ in the order they occur along the highway. Thus, the cities are connected by $ n $ segments of the highway, the $ i $ -th segment connects cities number $ i $ and $ i+1 $ . Every segment of the highway is associated with a positive integer $ a_{i}&gt;1 $ \u2014 the period of traffic jams appearance on it.\n\nIn order to get from city $ x $ to city $ y $ ( $ x&lt;y $ ), some drivers use the following tactics.\n\nInitially the driver is in city $ x $ and the current time $ t $ equals zero. Until the driver arrives in city $ y $ , he perfors the following actions:\n\n- if the current time $ t $ is a multiple of $ a_{x} $ , then the segment of the highway number $ x $ is now having traffic problems and the driver stays in the current city for one unit of time (formally speaking, we assign $ t=t+1 $ );\n- if the current time $ t $ is not a multiple of $ a_{x} $ , then the segment of the highway number $ x $ is now clear and that's why the driver uses one unit of time to move to city $ x+1 $ (formally, we assign $ t=t+1 $ and $ x=x+1 $ ).\n\nYou are developing a new traffic control system. You want to consecutively process $ q $ queries of two types:\n\n1. determine the final value of time $ t $ after the ride from city $ x $ to city $ y $ ( $ x&lt;y $ ) assuming that we apply the tactics that is described above. Note that for each query $ t $ is being reset to $ 0 $ .\n2. replace the period of traffic jams appearing on the segment number $ x $ by value $ y $ (formally, assign $ a_{x}=y $ ).\n\nWrite a code that will effectively process the queries given above.",
    "inputFormat": "The first line contains a single integer $ n $ ( $ 1<=n<=10^{5} $ ) \u2014 the number of highway segments that connect the $ n+1 $ cities.\n\nThe second line contains $ n $ integers $ a_{1},a_{2},...,a_{n} $ ( $ 2<=a_{i}<=6 $ ) \u2014 the periods of traffic jams appearance on segments of the highway.\n\nThe next line contains a single integer $ q $ ( $ 1<=q<=10^{5} $ ) \u2014 the number of queries to process.\n\nThe next $ q $ lines contain the descriptions of the queries in the format $ c $ , $ x $ , $ y $ ( $ c $ \u2014 the query type).\n\nIf $ c $ is character 'A', then your task is to process a query of the first type. In this case the following constraints are satisfied: $ 1<=x&lt;y<=n+1 $ .\n\nIf $ c $ is character 'C', then you need to process a query of the second type. In such case, the following constraints are satisfied: $ 1<=x<=n $ , $ 2<=y<=6 $ .",
    "outputFormat": "For each query of the first type output a single integer \u2014 the final value of time $ t $ after driving from city $ x $ to city $ y $ . Process the queries in the order in which they are given in the input.",
    "samples": [
        [
            "10\n2 5 3 2 3 5 3 4 2 4\n10\nC 10 6\nA 2 6\nA 1 3\nC 3 4\nA 3 11\nA 4 9\nA 5 6\nC 7 3\nA 8 10\nA 2 5\n",
            "5\n3\n14\n6\n2\n4\n4\n"
        ]
    ],
    "hint": "",
    "translation": "\u4e00\u4e9b\u56fd\u5bb6\u7531n+1\u4e2a\u57ce\u5e02\u7ec4\u6210\uff0c\u8fd9\u4e9b\u57ce\u5e02\u4f4d\u4e8e\u4e00\u4e2a\u7b14\u76f4\u7684\u8def\u4e0a\uff0c\u6211\u4eec\u628a\u6309\u7167\u4ed6\u4eec\u5728\u8def\u4e0a\u7684\u987a\u5e8f\u628a\u8fd9\u4e9b\u57ce\u5e02\u7f16\u53f7\u4e3a1-\uff08n+1\uff09,\u8fd9\u6837\uff0c\u7b2ci\u4e2a\u7ebf\u6bb5\u8fde\u63a5\u7740\u7b2ci\u548c\u548c\u7b2ci+1\u4e2a\u57ce\u5e02\u3002\u6bcf\u4e00\u4e2a\u57ce\u5e02\u6709\u4e00\u4e2a\u62e5\u5835\u503ca[i]\uff0c\u5982\u679c\u5f53\u524d\u65f6\u95f4\u80fd\u88aba[i]\u6574\u9664\uff0c\u90a3\u4e48\u901a\u8fc7\u8fd9\u6761\u516c\u8def\u9700\u8981\u4e24\u5206\u949f\uff0c\u5426\u5219\u9700\u8981\u4e00\u5206\u949f\u3002\n\n\u7ed9\u51fa\u6bcf\u6761\u516c\u8def\u7684a[i]\uff0c\u4ee5\u53cam\u6b21\u64cd\u4f5c\n\n\u64cd\u4f5c\u6709\u4e24\u79cd\uff1a\n\n1\u3001 C x d\uff1a\u628a\u7b2cx\u6761\u8def\u7684\u62e5\u5835\u65f6\u523b\u6539\u6210d\n\n2\u3001 A x y\uff1a\u95eex\u5230y\u57ce\u5e02\u6240\u9700\u8981\u7684\u65f6\u95f4\n"
}