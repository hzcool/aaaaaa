{
    "description": "The government of Berland decided to improve network coverage in his country. Berland has a unique structure: the capital in the center and $ n $ cities in a circle around the capital. The capital already has a good network coverage (so the government ignores it), but the $ i $ -th city contains $ a_i $ households that require a connection.\n\nThe government designed a plan to build $ n $ network stations between all pairs of neighboring cities which will maintain connections only for these cities. In other words, the $ i $ -th network station will provide service only for the $ i $ -th and the $ (i + 1) $ -th city (the $ n $ -th station is connected to the $ n $ -th and the $ 1 $ -st city).\n\nAll network stations have capacities: the $ i $ -th station can provide the connection to at most $ b_i $ households.\n\nNow the government asks you to check can the designed stations meet the needs of all cities or not \u2014 that is, is it possible to assign each household a network station so that each network station $ i $ provides the connection to at most $ b_i $ households.",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1 \\le t \\le       10^4 $ ) \u2014 the number of test cases.\n\nThe first line of each test case contains the single integer $ n $ ( $ 2 \\le n \\le 10^6 $ ) \u2014 the number of cities and stations.\n\nThe second line of each test case contains $ n $ integers ( $ 1       \\le a_i \\le 10^9 $ ) \u2014 the number of households in the $ i $ -th city.\n\nThe third line of each test case contains $ n $ integers ( $ 1       \\le b_i \\le 10^9 $ ) \u2014 the capacities of the designed stations.\n\nIt's guaranteed that the sum of $ n $ over test cases doesn't exceed $ 10^6 $ .",
    "outputFormat": "For each test case, print YES, if the designed stations can meet the needs of all cities, or NO otherwise (case insensitive).",
    "samples": [
        [
            "5\n3\n2 3 4\n3 3 3\n3\n3 3 3\n2 3 4\n4\n2 3 4 5\n3 7 2 2\n4\n4 5 2 3\n2 3 2 7\n2\n1 1\n10 10",
            "YES\nYES\nNO\nYES\nYES"
        ]
    ],
    "hint": "In the first test case:\n\n- the first network station can provide $ 2 $ connections to the first city and $ 1 $ connection to the second city;\n- the second station can provide $ 2 $ connections to the second city and $ 1 $ connection to the third city;\n- the third station can provide $ 3 $ connections to the third city.\n\nIn the second test case:\n\n- the $ 1 $ -st station can provide $ 2 $ connections to the $ 1 $ -st city;\n- the $ 2 $ -nd station can provide $ 3 $ connections to the $ 2 $ -nd city;\n- the $ 3 $ -rd station can provide $ 3 $ connections to the $ 3 $ -rd city and $ 1 $ connection to the $ 1 $ -st station.\n\nIn the third test case, the fourth city needs $ 5 $ connections, but the third and the fourth station has $ 4 $ connections in total.",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u4f60$n$\u4e2a\u57ce\u5e02\uff0c\u8fd9$n$\u4e2a\u57ce\u5e02\u9996\u5c3e\u76f8\u63a5\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u5df2\u77e5\u6bcf\u4e2a\u57ce\u5e02\u6709\u4e00\u5b9a\u6570\u91cf\u7684\u5bb6\u5ead\u9700\u8981\u7f51\u7edc\u3002\u540c\u65f6\u6bcf\u4e00\u5ea7\u57ce\u5e02\u4e2d\u6709\u4e00\u4e2a\u7f51\u7edc\u57fa\u7ad9\uff0c\u6bcf\u4e00\u4e2a\u7f51\u7edc\u57fa\u7ad9\u53ef\u4ee5\u4e3a\u4e00\u5b9a\u6570\u91cf\u7684\u5bb6\u5ead\u63d0\u4f9b\u7f51\u7edc\uff0c\u5e76\u4e14\u7b2c$i$\u4e2a\u7f51\u7edc\u57fa\u7ad9\u53ea\u80fd\u7ed9\u7b2c$i$\u4e2a\u57ce\u5e02\u548c\u7b2c$i+1$\u4e2a\u57ce\u5e02\u7684\u5bb6\u5ead\u63d0\u4f9b\u7f51\u7edc\uff08\u7b2c$n$\u4e2a\u7f51\u7edc\u57fa\u7ad9\u53ef\u4ee5\u7ed9\u7b2c$n$\u5ea7\u57ce\u5e02\u548c\u7b2c$1$\u5ea7\u57ce\u5e02\u63d0\u4f9b\u7f51\u7edc\uff09\u3002\n\n\u73b0\u5728\u7ed9\u4f60\u6bcf\u4e00\u5ea7\u57ce\u5e02\u9700\u8981\u7f51\u7edc\u7684\u5bb6\u5ead\u6570\u91cf$a_i$\u548c\u6bcf\u4e00\u4e2a\u7f51\u7edc\u57fa\u7ad9\u53ef\u4ee5\u63d0\u4f9b\u7684\u6700\u591a\u7f51\u7edc\u6570\u91cf$b_i$\uff0c\u8bf7\u4f60\u5224\u65ad\u80fd\u5426\u4f7f\u5f97\u6240\u6709\u7684\u5bb6\u5ead\u90fd\u83b7\u5f97\u7f51\u7edc\uff0c\u53ef\u4ee5\u5219\u8f93\u51fa\u201cYES\u201c\uff0c\u5426\u5219\u8f93\u51fa\u201dNO\u201c\u3002\n### \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570$t( 1 \\le t \\le 10^4)$\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570\u3002\n\n\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570$n( 2 \\le n \\le 10^6)$\u8868\u793a\u57ce\u5e02\u548c\u7f51\u7edc\u57fa\u7ad9\u7684\u6570\u91cf\u3002\n\n\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e8c\u884c\u5305\u542b$n$\u4e2a\u6b63\u6574\u6570$a_i( 1 \\le a_i \\le 10^9)$\u8868\u793a\u7b2c$i$\u4e2a\u57ce\u5e02\u6709\u591a\u5c11\u4e2a\u5bb6\u5ead\u9700\u8981\u7f51\u7edc\u3002\n\n\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e09\u884c\u5305\u542b$n$\u4e2a\u6b63\u6574\u6570$b_i( 1 \\le b_i \\le 10^9)$\u8868\u793a\u7b2c$i$\u4e2a\u7f51\u7edc\u57fa\u7ad9\u6700\u591a\u53ef\u4ee5\u63d0\u4f9b\u591a\u5c11\u7684\u7f51\u7edc\u3002\n\n\u4fdd\u8bc1\u6d4b\u8bd5\u6570\u636e\u4e2d$n$\u7684\u603b\u548c\u4e0d\u8d85\u8fc7$10^6$\u3002\n### \u8f93\u51fa\u683c\u5f0f\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u201cYES\u201d\u6216\u8005\u201cNO\u201d\uff0c\u8868\u793a\u80fd\u5426\u4f7f\u6240\u6709\u7684\u5bb6\u5ead\u83b7\u5f97\u7f51\u7edc\u94fe\u63a5\u3002"
}