{
    "description": "We have an array of length $ n $ . Initially, each element is equal to $ 0 $ and there is a pointer located on the first element.\n\nWe can do the following two kinds of operations any number of times (possibly zero) in any order:\n\n1. If the pointer is not on the last element, increase the element the pointer is currently on by $ 1 $ . Then move it to the next element.\n2. If the pointer is not on the first element, decrease the element the pointer is currently on by $ 1 $ . Then move it to the previous element.\n\nBut there is one additional rule. After we are done, the pointer has to be on the first element.\n\nYou are given an array $ a $ . Determine whether it's possible to obtain $ a $ after some operations or not.",
    "inputFormat": "The first line contains a single integer $ t $ $ (1\\le t\\le 1000) $ \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $ n $ $ (1\\le n\\le 2 \\cdot 10^5) $ \u2014 the size of array $ a $ .\n\nThe second line of each test case contains $ n $ integers $ a_1, a_2, \\ldots, a_n $ ( $ -10^9 \\le a_i \\le 10^9 $ ) \u2014 elements of the array.\n\nIt is guaranteed that the sum of $ n $ over all test cases doesn't exceed $ 2 \\cdot 10^5 $ .",
    "outputFormat": "For each test case, print \"Yes\" (without quotes) if it's possible to obtain $ a $ after some operations, and \"No\" (without quotes) otherwise.\n\nYou can output \"Yes\" and \"No\" in any case (for example, strings \"yEs\", \"yes\" and \"Yes\" will be recognized as a positive response).",
    "samples": [
        [
            "7\n2\n1 0\n4\n2 -1 -1 0\n4\n1 -4 3 0\n4\n1 -1 1 -1\n5\n1 2 3 4 -10\n7\n2 -1 1 -2 0 0 0\n1\n0",
            "No\nYes\nNo\nNo\nYes\nYes\nYes"
        ]
    ],
    "hint": "In the first test case we can obtain the array after some operations, but the pointer won't be on the first element.\n\nOne way of obtaining the array in the second test case is shown below.\n\n $ \\langle \\underline{0}, 0, 0, 0\\rangle \\to \\langle 1, \\underline{0}, 0, 0 \\rangle \\to \\langle \\underline{1}, -1, 0, 0\\rangle \\to \\langle 2, \\underline{-1}, 0, 0\\rangle \\to \\langle 2, 0, \\underline{0}, 0\\rangle \\to \\langle 2, \\underline{0}, -1, 0\\rangle \\to \\langle \\underline{2}, -1, -1, 0\\rangle $",
    "translation": "\u5bf9\u4e8e\u4e00\u4e2a\u521d\u59cb\u5168\u90e8\u5143\u7d20\u4e3a $0$ \u7684\u5e8f\u5217\uff0c\u653e\u7f6e\u4e00\u4e2a\u6307\u9488\u5728\u7b2c\u4e00\u4f4d\uff0c\u5b9a\u4e49\u5982\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a\n 1. \uff08\u5f53\u6307\u9488\u4e0d\u5728\u6700\u540e\u4e00\u4f4d\u65f6\uff09\u6307\u9488\u6307\u5411\u7684\u5f53\u524d\u5143\u7d20\u52a0\u4e00\uff0c\u6307\u9488\u53f3\u79fb\u4e00\u4f4d\u3002\n 2. \uff08\u5f53\u6307\u9488\u4e0d\u5728\u7b2c\u4e00\u4f4d\u65f6\uff09\u6307\u9488\u6307\u5411\u7684\u5f53\u524d\u5143\u7d20\u51cf\u5c11\u4e00\uff0c\u6307\u9488\u5de6\u79fb\u4e00\u4f4d\u3002\n \n\u9700\u8981\u4fdd\u8bc1\u64cd\u4f5c\u7ed3\u675f\u65f6\u6307\u9488\u56de\u5230\u7b2c\u4e00\u4f4d\u3002\u5982\u4e0b\u9762\u4f8b\u5b50\uff1a\n$\\langle\\underline{0}, 0,0,0\\rangle \\rightarrow\\langle 1, \\underline{0}, 0,0\\rangle \\rightarrow\\langle \\underline{1},-1,0,0\\rangle \\rightarrow\\langle 2, \\underline{-1}, 0,0\\rangle \\rightarrow\\langle 2,0, \\underline{0}, 0\\rangle \\rightarrow\\langle 2, \\underline{0},-1,0\\rangle \\rightarrow\\langle\\underline{2},-1,-1,0\\rangle$\n\n\u5219\u6700\u540e\u5f97\u5230\u7684 $\\langle\\underline{2},-1,-1,0\\rangle$ \u5c31\u662f\u5408\u6cd5\u7684\uff0c\u6bcf\u6b21\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u95ee\u7ed9\u5b9a\u5e8f\u5217\u662f\u5426\u5408\u6cd5\u3002"
}