{
    "description": "After holding one team contest, boy Yura got very tired and wanted to change his life and move to Japan. In honor of such a change, Yura changed his name to something nice.\n\nFascinated by this idea he already thought up a name $ s $ consisting only of characters \"\\_\" and \"^\". But there's a problem \u2014 Yura likes smiley faces \"^\\_^\" and \"^^\". Therefore any character of the name must be a part of at least one such smiley. Note that only the consecutive characters of the name can be a smiley face.\n\nMore formally, consider all occurrences of the strings \"^\\_^\" and \"^^\" in the string $ s $ . Then all such occurrences must cover the whole string $ s $ , possibly with intersections. For example, in the string \"^^\\_\\_^\\_^^\\_\\_^\" the characters at positions $ 3,4,9,10 $ and $ 11 $ are not contained inside any smileys, and the other characters at positions $ 1,2,5,6,7 $ and $ 8 $ are contained inside smileys.\n\nIn one operation Jura can insert one of the characters \"\\_\" and \"^\" into his name $ s $ (you can insert it at any position in the string). He asks you to tell him the minimum number of operations you need to do to make the name fit Yura's criteria.",
    "inputFormat": "Each test consists of multiple test cases. The first line contains a single integer $ t $ ( $ 1 \\le t \\le 100 $ ) \u2014the number of test cases. The description of test cases follows.\n\nThe first and only line of each test case contains a single string $ s $ ( $ 1 \\leq |s| \\leq 100 $ ), consisting of characters \"\\_\" and \"^\", \u2014 the name to change.",
    "outputFormat": "For each test case, output a single integer \u2014 the minimum number of characters you need to add to the name to make it fit for Yura. If you don't need to change anything in the name, print $ 0 $ .",
    "samples": [
        [
            "7\n^______^\n___^_^^^_^___^\n^_\n^\n^_^^^^^_^_^^\n___^^\n_",
            "5\n5\n1\n1\n0\n3\n2"
        ]
    ],
    "hint": "In the first test case, you can get the following name by adding $ 5 $ characters:\n\n^\\_^\\_^\\_^\\_^\\_^\\_^\n\nIn the third test case, we can add one character \"^\" to the end of the name, then we get the name:\n\n^\\_^\n\nIn the fourth test case, we can add one character \"^\" to the end of the name, then we get the name:\n\n^^\n\nIn the fifth test case, all of the characters are already contained in smiley faces, so the answer is $ 0 $ .\n\nIn the seventh test case, you can add one character \"^\" at the beginning of the name and one character \"^\" at the end of the name, then you get the name:\n\n^\\_^",
    "translation": "#### \u9898\u76ee\u63cf\u8ff0\n\nYura \u8981\u6539\u540d\u5b57\uff0c\u4ed6\u60f3\u53d6\u4e00\u4e2a\u53ea\u5305\u542b\u5b57\u7b26 `_` \u548c `^` \u7684\u540d\u5b57\uff0c\u5e76\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\uff0c\u5373\u53ea\u6709\u5f62\u5982 \"^\\_^\" \u548c \"^^\" \u7684\u8fde\u7eed\u5b50\u4e32\u53ef\u4ee5\u51fa\u73b0\u5728\u8be5\u540d\u5b57\u4e2d\uff0c\u4e14\u8fd9\u4e9b\u5b50\u4e32\u80fd\u591f\u8986\u76d6\u6574\u4e2a\u540d\u5b57\uff0c\u4e0d\u540c\u5b50\u4e32\u95f4\u53ef\u4ee5\u91cd\u53e0\u3002\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u5728\u540d\u5b57\u4e2d\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26 `_` \u6216\u4e00\u4e2a\u5b57\u7b26 `^`\uff0c\u6c42\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u64cd\u4f5c\u624d\u80fd\u4f7f\u5176\u7b26\u5408\u8981\u6c42\u3002\n\n#### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u662f\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570 $T$\u3002\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u53ea\u6709\u4e00\u884c\uff0c\u8868\u793a Yura \u7684\u539f\u540d\u3002\n\n#### \u8f93\u51fa\u683c\u5f0f\n\n\u6bcf\u7ec4\u6570\u636e\u6709\u4e00\u884c\u8f93\u51fa\uff0c\u8f93\u51fa\u5c06 Yura \u540d\u5b57\u4fee\u6b63\u6700\u5c11\u7684\u64cd\u4f5c\u6570\u3002"
}