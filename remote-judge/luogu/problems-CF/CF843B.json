{
    "description": "This is an interactive problem.\n\nYou are given a sorted in increasing order singly linked list. You should find the minimum integer in the list which is greater than or equal to $ x $ .\n\nMore formally, there is a singly liked list built on an array of $ n $ elements. Element with index $ i $ contains two integers: $ value_{i} $ is the integer value in this element, and $ next_{i} $ that is the index of the next element of the singly linked list (or -1, if the current element is the last). The list is sorted, i.e. if $ next_{i}\u2260-1 $ , then $ value_{nexti}&gt;value_{i} $ .\n\nYou are given the number of elements in the list $ n $ , the index of the first element $ start $ , and the integer $ x $ .\n\nYou can make up to $ 2000 $ queries of the following two types:\n\n- ? i ( $ 1<=i<=n $ ) \u2014 ask the values $ value_{i} $ and $ next_{i} $ ,\n- ! ans \u2014 give the answer for the problem: the minimum integer, greater than or equal to $ x $ , or ! -1, if there are no such integers. Your program should terminate after this query.\n\nWrite a program that solves this problem.",
    "inputFormat": "The first line contains three integers $ n $ , $ start $ , $ x $ ( $ 1<=n<=50000 $ , $ 1<=start<=n $ , $ 0<=x<=10^{9} $ ) \u2014 the number of elements in the list, the index of the first element and the integer $ x $ .",
    "outputFormat": "To print the answer for the problem, print ! ans, where ans is the minimum integer in the list greater than or equal to $ x $ , or -1, if there is no such integer.\n\nInteraction\n\nTo make a query of the first type, print ? i ( $ 1<=i<=n $ ), where i is the index of element you want to know information about.\n\nAfter each query of type ? read two integers $ value_{i} $ and $ next_{i} $ ( $ 0<=value_{i}<=10^{9} $ , $ -1<=next_{i}<=n $ , $ next_{i}\u22600 $ ).\n\nIt is guaranteed that if $ next_{i}\u2260-1 $ , then $ value_{nexti}&gt;value_{i} $ , and that the array values give a valid singly linked list with $ start $ being the first element.\n\nNote that you can't ask more than $ 1999 $ queries of the type ?.\n\nIf $ next_{i}=-1 $ and $ value_{i}=-1 $ , then it means that you asked more queries than allowed, or asked an invalid query. Your program should immediately terminate (for example, by calling exit(0)). You will receive \"Wrong Answer\", it means that you asked more queries than allowed, or asked an invalid query. If you ignore this, you can get other verdicts since your program will continue to read from a closed stream.\n\nYour solution will get \"Idleness Limit Exceeded\", if you don't print anything or forget to flush the output, including the final answer.\n\nTo flush you can use (just after printing a query and line end):\n\n- fflush(stdout) in C++;\n- System.out.flush() in Java;\n- stdout.flush() in Python;\n- flush(output) in Pascal;\n- For other languages see documentation.\n\nHacks format\n\nFor hacks, use the following format:\n\nIn the first line print three integers $ n $ , $ start $ , $ x $ ( $ 1<=n<=50000 $ , $ 1<=start<=n $ , $ 0<=x<=10^{9} $ ).\n\nIn the next $ n $ lines print the description of the elements of the list: in the $ i $ -th line print two integers $ value_{i} $ and $ next_{i} $ ( $ 0<=value_{i}<=10^{9} $ , $ -1<=next_{i}<=n $ , $ next_{i}\u22600 $ ).\n\nThe printed structure should be a valid singly linked list. In particular, it should be possible to reach all elements from $ start $ by following links $ next_{i} $ , and the last element $ end $ should have -1 in the $ next_{end} $ .",
    "samples": [
        [
            "5 3 80\n97 -1\n58 5\n16 2\n81 1\n79 4\n",
            "? 1\n? 2\n? 3\n? 4\n? 5\n! 81"
        ]
    ],
    "hint": "You can read more about singly linked list by the following link: [https://en.wikipedia.org/wiki/Linked\\_list#Singly\\_linked\\_list](https://en.wikipedia.org/wiki/Linked_list#Singly_linked_list)\n\nThe illustration for the first sample case. Start and finish elements are marked dark. ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF843B/71961769b81bfa3a3f8829eda26d6883c0c5db50.png)",
    "translation": "- \u8fd9\u662f\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u95ee\u9898\u3002\r\n- \u9898\u76ee\u5c06\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u6309\u9012\u589e\u987a\u5e8f\u6392\u5e8f\u7684\u5355\u9879\u94fe\u8868\u3002\u4f60\u9700\u8981\u627e\u5230\u5217\u8868\u4e2d\u5927\u4e8e\u6216\u7b49\u4e8ex\u7684\u6700\u5c0f\u6574\u6570\u3002\r\n- \u66f4\u6b63\u5f0f\u70b9\u8bf4\uff0c\u5728\u4e00\u4e2a\u7531n\u4e2a\u5143\u7d20\u6784\u6210\u7684\u6570\u7ec4\u4e2d\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u9879\u94fe\u8868\u3002\u6bcf\u4e2a\u6570\u7ec4\u5143\u7d20i\u5305\u542b\u4e24\u4e2a\u6574\u6570\uff0cvalue_\u662f\u5143\u7d20\u7684\u6574\u6570\u503c\uff0cnext_i\u662f\u5b83\u6240\u6307\u5411\u7684\u5143\u7d20\uff08**\u5982\u679c\u5f53\u524d\u5143\u7d20\u6ca1\u6709\u540e\u7ee7\uff08\u5373\u5176\u4e3a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff09\u5219\u4e3a-1**\uff09\u3002\u901a\u8fc7next_i\u5c31\u53ef\u4ee5\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002\r\n- \u73b0\u5728\u7ed9\u4f60\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6570\u91cfn\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684start\u548c\u6574\u6570x\u3002\r\n- \u4f60\u8981\u8fdb\u884c\u4e0d\u8d85\u8fc72000\u7ec4\u8bbf\u95ee\uff0c\u5171\u6709\u4e24\u79cd\u8bbf\u95ee\u5f62\u5f0f\uff08**\u8f93\u51fa\u6837\u4f8b\u4e2d\u662f\u4f60\u7684\u8be2\u95ee\uff0c\u4f60\u6bcf\u8be2\u95ee\u4e00\u6b21\uff0c\u4f60\u7684\u7a0b\u5e8f\u5c31\u4f1a\u8bfb\u53d6\u4e24\u4e2a\u6570**)\r\n1. \uff1fi\uff081<=i<=n\uff09\u8be2\u95eevalue_i\u548cnext_i;\r\n1.  \uff01\u56de\u7b54\u7b2c\u4e8c\u884c\u6240\u8bf4\u7684\u7b54\u6848\uff0c\u5373\u5927\u4e8e\u6216\u7b49\u4e8ex\u6700\u5c0f\u6574\u6570\uff0c***\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u6574\u6570\uff0c\u5219\u8f93\u51fa\uff01-1***\uff0c\u4f60\u7684\u7a0b\u5e8f\u5e94\u5728\u8fd9\u4e2a\u8f93\u51fa\u7ed3\u675f\u540e\u7ec8\u6b62\u3002\r\n- \u8bf7\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002"
}