{
    "description": "You are given a binary matrix $ a $ of size $ n \\times m $ . A binary matrix is a matrix where each element is either $ 0 $ or $ 1 $ .\n\nYou may perform some (possibly zero) operations with this matrix. During each operation you can inverse the row of this matrix or a column of this matrix. Formally, inverting a row is changing all values in this row to the opposite ( $ 0 $ to $ 1 $ , $ 1 $ to $ 0 $ ). Inverting a column is changing all values in this column to the opposite.\n\nYour task is to sort the initial matrix by some sequence of such operations. The matrix is considered sorted if the array $ [a_{1, 1}, a_{1, 2}, \\dots, a_{1, m}, a_{2, 1}, a_{2, 2}, \\dots, a_{2, m}, \\dots, a_{n, m - 1}, a_{n, m}] $ is sorted in non-descending order.",
    "inputFormat": "The first line of the input contains two integers $ n $ and $ m $ ( $ 1 \\le n, m \\le 200 $ ) \u2014 the number of rows and the number of columns in the matrix.\n\nThe next $ n $ lines contain $ m $ integers each. The $ j $ -th element in the $ i $ -th line is $ a_{i, j} $ ( $ 0 \\le a_{i, j} \\le 1 $ ) \u2014 the element of $ a $ at position $ (i, j) $ .",
    "outputFormat": "If it is impossible to obtain a sorted matrix, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line. In the second line print a string $ r $ of length $ n $ . The $ i $ -th character $ r_i $ of this string should be '1' if the $ i $ -th row of the matrix is inverted and '0' otherwise. In the third line print a string $ c $ of length $ m $ . The $ j $ -th character $ c_j $ of this string should be '1' if the $ j $ -th column of the matrix is inverted and '0' otherwise. If there are multiple answers, you can print any.",
    "samples": [
        [
            "2 2\n1 1\n0 1\n",
            "YES\n00\n10\n"
        ],
        [
            "3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n",
            "YES\n010\n0000\n"
        ],
        [
            "3 3\n0 0 0\n1 0 1\n1 1 0\n",
            "NO\n"
        ]
    ],
    "hint": "",
    "translation": "\u7ed9\u4f60\u4e00\u4e2a$n \\times m$\u7684$01$\u77e9\u9635\uff0c\u4f60\u53ef\u4ee5\u5bf9\u6574\u884c\u6216\u6574\u5217\u8fdb\u884c\u53d6\u53cd\u64cd\u4f5c\u3002\u95ee\u662f\u5426\u6709\u4e00\u4e2a\u64cd\u4f5c\u65b9\u6848\uff0c\u4f7f\u5f97\u6700\u540e\u5f97\u5230\u7684\u77e9\u9635\uff0c\u6309\u7167$a_{1,1},a_{1,2},\\cdots a_{1,m},\\cdots a_{2,1},\\cdots,a_{n,m}$\u5f62\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u6392\u5217\u3002\r\n\r\n\u8f93\u51fa\u683c\u5f0f\uff1a\r\n\r\n\u5982\u679c\u6ca1\u6709\uff0c\u4ec5\u8f93\u51fa\u4e00\u884c$NO$\u3002\r\n\r\n\u5982\u679c\u6709\uff0c\u7b2c\u4e00\u884c\u8f93\u51fa$YES$\uff1b\u7b2c\u4e8c\u884c\u8f93\u51fa\u957f\u5ea6\u4e3a$n$\u7684$01$\u5b57\u7b26\u4e32\uff0c\u7b2c$i$\u4e2a\u5b57\u7b26\u4e3a$1$\u4ee3\u8868\u5bf9\u7b2c$i$\u884c\u8fdb\u884c\u53d6\u53cd\u64cd\u4f5c\uff1b\u7b2c\u4e8c\u884c\u8f93\u51fa\u957f\u5ea6\u4e3a$m$\u7684$01$\u5b57\u7b26\u4e32\uff0c\u7b2c$i$\u4e2a\u5b57\u7b26\u4e3a$1$\u4ee3\u8868\u5bf9\u7b2c$i$\u5217\u8fdb\u884c\u53d6\u53cd\u64cd\u4f5c\u3002\u5982\u6709\u591a\u79cd\u65b9\u6848\uff0c\u8f93\u51fa\u4efb\u4e00\u65b9\u6848\u5373\u53ef\u3002"
}