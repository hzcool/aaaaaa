{
    "description": "You are given a description of a depot. It is a rectangular checkered field of $ n\u00d7m $ size. Each cell in a field can be empty (\".\") or it can be occupied by a wall (\"\\*\").\n\nYou have one bomb. If you lay the bomb at the cell $ (x,y) $ , then after triggering it will wipe out all walls in the row $ x $ and all walls in the column $ y $ .\n\nYou are to determine if it is possible to wipe out all walls in the depot by placing and triggering exactly one bomb. The bomb can be laid both in an empty cell or in a cell occupied by a wall.",
    "inputFormat": "The first line contains two positive integers $ n $ and $ m $ ( $ 1<=n,m<=1000 $ ) \u2014 the number of rows and columns in the depot field.\n\nThe next $ n $ lines contain $ m $ symbols \".\" and \"\\*\" each \u2014 the description of the field. $ j $ -th symbol in $ i $ -th of them stands for cell $ (i,j) $ . If the symbol is equal to \".\", then the corresponding cell is empty, otherwise it equals \"\\*\" and the corresponding cell is occupied by a wall.",
    "outputFormat": "If it is impossible to wipe out all walls by placing and triggering exactly one bomb, then print \"NO\" in the first line (without quotes).\n\nOtherwise print \"YES\" (without quotes) in the first line and two integers in the second line \u2014 the coordinates of the cell at which the bomb should be laid. If there are multiple answers, print any of them.",
    "samples": [
        [
            "3 4\n.*..\n....\n.*..\n",
            "YES\n1 2\n"
        ],
        [
            "3 3\n..*\n.*.\n*..\n",
            "NO\n"
        ],
        [
            "6 5\n..*..\n..*..\n*****\n..*..\n..*..\n..*..\n",
            "YES\n3 3\n"
        ]
    ],
    "hint": "",
    "translation": "\u4f60\u63a5\u5230\u4e86\u4e00\u4e2a\u62c6\u9664\u5de5\u4f5c\uff1a\n\n\u6709\u4e00\u4e2a $n*m$ \u4e2a\u5355\u5143\u683c\u7684\u4ed3\u5e93\uff0c\u5176\u4e2d\u6bcf\u4e2a\u683c\u5b50\u53ea\u53ef\u80fd\u662f\".\"\u6216\"*\"\u3002\n\n\".\"\u8868\u793a\u8be5\u683c\u5b50\u4e3a\u7a7a\uff0c\"*\"\u8868\u793a\u8fd9\u91cc\u6709\u4e00\u9762\u5899\u3002\n\n\u73b0\u5728\u4f60\u6709\u4e00\u679a\u70b8\u5f39\uff0c\u53ef\u4ee5\u7206\u7834\u6240\u6709\u540c\u884c\u6216\u540c\u5217\u7684\u5899(\u5b83\u65e2\u53ef\u4ee5\u653e\u5728\u5899\u5185\uff0c\u4e5f\u53ef\u4ee5\u653e\u5728\u7a7a\u5355\u5143\u683c)\n\n\u8bf7\u4f60\u627e\u51fa\u4e00\u79cd\u653e\u7f6e\u70b8\u5f39\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u5899\u90fd\u80fd\u88ab\u6e05\u9664\u3002\n\n## \u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570$n$\uff0c$m$ $(1<=n,m<=1000)$\n\n\u63a5\u4e0b\u6765\u662f\u4e00\u4e2a$n*m$\u7684\u77e9\u9635\uff0c\u8868\u793a\u4ed3\u5e93\u7684\u5206\u5e03\u56fe\u3002\n\n## \u8f93\u51fa\u683c\u5f0f\uff1a\n\u5982\u679c\u4e00\u9897\u70b8\u5f39\u5c31\u53ef\u4ee5\u6e05\u9664\u6240\u6709\u7684\u5899\uff0c\u5c31\u8f93\u51fa\"YES\"\uff08\u6ca1\u6709\u5f15\u53f7\uff09,\u5e76\u5728\u4e0b\u4e00\u884c\u8f93\u51fax\u548cy\uff0c\u8868\u793a\u70b8\u5f39\u653e\u7f6e\u7684\u4f4d\u7f6e\u3002\n\n\u5426\u5219\u8f93\u51fa\"NO\"\uff08\u540c\u6837\u6ca1\u6709\u5f15\u53f7\uff09\n\n\u5982\u679c\u5b58\u5728\u591a\u4e8e\u4e00\u79cd\u65b9\u6848\uff0c\u5219\u8f93\u51fa\u5176\u4e2d\u4e00\u79cd\u5373\u53ef\u3002"
}