{
    "description": "You are given a tree consisting of $ n $ vertices. A number is written on each vertex; the number on vertex $ i $ is equal to $ a_i $ .\n\nRecall that a simple path is a path that visits each vertex at most once. Let the weight of the path be the bitwise XOR of the values written on vertices it consists of. Let's say that a tree is good if no simple path has weight $ 0 $ .\n\nYou can apply the following operation any number of times (possibly, zero): select a vertex of the tree and replace the value written on it with an arbitrary positive integer. What is the minimum number of times you have to apply this operation in order to make the tree good?",
    "inputFormat": "The first line contains one integer $ n $ ( $ 1 \\le n \\le 2 \\cdot 10^5 $ ) \u2014 the number of vertices.\n\nThe second line contains $ n $ integers $ a_1 $ , $ a_2 $ , ..., $ a_n $ ( $ 1 \\le a_i < 2^{30} $ ) \u2014 the numbers written on vertices.\n\nThen $ n - 1 $ lines follow, each containing two integers $ x $ and $ y $ ( $ 1 \\le x, y \\le n; x \\ne y $ ) denoting an edge connecting vertex $ x $ with vertex $ y $ . It is guaranteed that these edges form a tree.",
    "outputFormat": "Print a single integer \u2014 the minimum number of times you have to apply the operation in order to make the tree good.",
    "samples": [
        [
            "6\n3 2 1 3 2 1\n4 5\n3 4\n1 4\n2 1\n6 1",
            "2"
        ],
        [
            "4\n2 1 1 1\n1 2\n1 3\n1 4",
            "0"
        ],
        [
            "5\n2 2 2 2 2\n1 2\n2 3\n3 4\n4 5",
            "2"
        ]
    ],
    "hint": "In the first example, it is enough to replace the value on the vertex $ 1 $ with $ 13 $ , and the value on the vertex $ 4 $ with $ 42 $ .",
    "translation": "\u4f60\u6709\u4e00\u68f5\u65e0\u6839\u6811\uff0c\u70b9\u6570\u4e3a $n$\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e2a\u70b9\u6743 $a_u$\uff0c\u5b9a\u4e49\u4e00\u6761\u8def\u5f84 $P(u,v)$ \u7684\u6743\u503c\u4e3a\u7ecf\u8fc7\u7684**\u6240\u6709\u70b9\u7684\u70b9\u6743\u7684\u5f02\u6216\u548c**\u3002\u5b9a\u4e49\u4e00\u68f5\u6811\u662f\u5408\u6cd5\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u6811\u4e0a\u6240\u6709**\u7b80\u5355\u8def\u5f84**\uff08\u53ea\u7ecf\u8fc7\u6bcf\u4e2a\u70b9\u4e00\u6b21\u7684\u8def\u5f84\uff09\u7684\u7684\u6743\u503c\u90fd\u4e0d\u4e3a $0$\u3002\n\n\u4f60\u53ef\u4ee5\u5bf9\u6743\u503c\u8fdb\u884c\u4fee\u6539\uff0c\u53ef\u4ee5\u6539\u6210**\u4efb\u610f\u6b63\u6574\u6570**\uff0c\u95ee\u6700\u5c11\u4fee\u6539\u591a\u5c11\u6b21\u624d\u80fd\u8ba9\u8fd9\u68f5\u6811\u5408\u6cd5\u3002\n\n\u8f93\u51fa\u6700\u5c0f\u4fee\u6539\u6b21\u6570\u3002\n\n$n\\leq 2\\times 10^5,a_i\\leq 2^{30}$"
}