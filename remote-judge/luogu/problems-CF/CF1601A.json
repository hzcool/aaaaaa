{
    "description": "You are given array $ a_1, a_2, \\ldots, a_n $ , consisting of non-negative integers.\n\nLet's define operation of \"elimination\" with integer parameter $ k $ ( $ 1 \\leq k \\leq n $ ) as follows:\n\n- Choose $ k $ distinct array indices $ 1 \\leq i_1 < i_2 < \\ldots < i_k \\le n $ .\n- Calculate $ x = a_{i_1} ~ \\& ~ a_{i_2} ~ \\& ~ \\ldots ~ \\& ~ a_{i_k} $ , where $ \\& $ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND) (notes section contains formal definition).\n- Subtract $ x $ from each of $ a_{i_1}, a_{i_2}, \\ldots, a_{i_k} $ ; all other elements remain untouched.\n\nFind all possible values of $ k $ , such that it's possible to make all elements of array $ a $ equal to $ 0 $ using a finite number of elimination operations with parameter $ k $ . It can be proven that exists at least one possible $ k $ for any array $ a $ .\n\nNote that you firstly choose $ k $ and only after that perform elimination operations with value $ k $ you've chosen initially.",
    "inputFormat": "Each test contains multiple test cases. The first line contains the number of test cases $ t $ ( $ 1 \\leq t \\leq 10^4 $ ). Description of the test cases follows.\n\nThe first line of each test case contains one integer $ n $ ( $ 1 \\leq n \\leq 200\\,000 $ ) \u2014 the length of array $ a $ .\n\nThe second line of each test case contains $ n $ integers $ a_1, a_2, \\ldots, a_n $ ( $ 0 \\leq a_i < 2^{30} $ ) \u2014 array $ a $ itself.\n\nIt's guaranteed that the sum of $ n $ over all test cases doesn't exceed $ 200\\,000 $ .",
    "outputFormat": "For each test case, print all values $ k $ , such that it's possible to make all elements of $ a $ equal to $ 0 $ in a finite number of elimination operations with the given parameter $ k $ .\n\nPrint them in increasing order.",
    "samples": [
        [
            "5\n4\n4 4 4 4\n4\n13 7 25 19\n6\n3 5 3 1 7 1\n1\n1\n5\n0 0 0 0 0",
            "1 2 4\n1 2\n1\n1\n1 2 3 4 5"
        ]
    ],
    "hint": "In the first test case:\n\n- If $ k = 1 $ , we can make four elimination operations with sets of indices $ \\{1\\} $ , $ \\{2\\} $ , $ \\{3\\} $ , $ \\{4\\} $ . Since $ \\& $ of one element is equal to the element itself, then for each operation $ x = a_i $ , so $ a_i - x = a_i - a_i = 0 $ .\n- If $ k = 2 $ , we can make two elimination operations with, for example, sets of indices $ \\{1, 3\\} $ and $ \\{2, 4\\} $ : $ x = a_1 ~ \\& ~ a_3 $ $ = $ $ a_2 ~ \\& ~ a_4 $ $ = $ $ 4 ~ \\& ~ 4 = 4 $ . For both operations $ x = 4 $ , so after the first operation $ a_1 - x = 0 $ and $ a_3 - x = 0 $ , and after the second operation \u2014 $ a_2 - x = 0 $ and $ a_4 - x = 0 $ .\n- If $ k = 3 $ , it's impossible to make all $ a_i $ equal to $ 0 $ . After performing the first operation, we'll get three elements equal to $ 0 $ and one equal to $ 4 $ . After that, all elimination operations won't change anything, since at least one chosen element will always be equal to $ 0 $ .\n- If $ k = 4 $ , we can make one operation with set $ \\{1, 2, 3, 4\\} $ , because $ x = a_1 ~ \\& ~ a_2 ~ \\& ~ a_3 ~ \\& ~ a_4 $ $ = 4 $ .\n\nIn the second test case, if $ k = 2 $ then we can make the following elimination operations:\n\n- Operation with indices $ \\{1, 3\\} $ : $ x = a_1 ~ \\& ~ a_3 $ $ = $ $ 13 ~ \\& ~ 25 = 9 $ . $ a_1 - x = 13 - 9 = 4 $ and $ a_3 - x = 25 - 9 = 16 $ . Array $ a $ will become equal to $ [4, 7, 16, 19] $ .\n- Operation with indices $ \\{3, 4\\} $ : $ x = a_3 ~ \\& ~ a_4 $ $ = $ $ 16 ~ \\& ~ 19 = 16 $ . $ a_3 - x = 16 - 16 = 0 $ and $ a_4 - x = 19 - 16 = 3 $ . Array $ a $ will become equal to $ [4, 7, 0, 3] $ .\n- Operation with indices $ \\{2, 4\\} $ : $ x = a_2 ~ \\& ~ a_4 $ $ = $ $ 7 ~ \\& ~ 3 = 3 $ . $ a_2 - x = 7 - 3 = 4 $ and $ a_4 - x = 3 - 3 = 0 $ . Array $ a $ will become equal to $ [4, 4, 0, 0] $ .\n- Operation with indices $ \\{1, 2\\} $ : $ x = a_1 ~ \\& ~ a_2 $ $ = $ $ 4 ~ \\& ~ 4 = 4 $ . $ a_1 - x = 4 - 4 = 0 $ and $ a_2 - x = 4 - 4 = 0 $ . Array $ a $ will become equal to $ [0, 0, 0, 0] $ .\n\nFormal definition of bitwise AND:\n\nLet's define bitwise AND ( $ \\& $ ) as follows. Suppose we have two non-negative integers $ x $ and $ y $ , let's look at their binary representations (possibly, with leading zeroes): $ x_k \\dots x_2 x_1 x_0 $ and $ y_k \\dots y_2 y_1 y_0 $ . Here, $ x_i $ is the $ i $ -th bit of number $ x $ , and $ y_i $ is the $ i $ -th bit of number $ y $ . Let $ r = x ~ \\& ~ y $ is a result of operation $ \\& $ on number $ x $ and $ y $ . Then binary representation of $ r $ will be $ r_k \\dots r_2 r_1 r_0 $ , where:\n\n $ $$$ r_i = \\begin{cases} 1, ~ \\text{if} ~ x_i = 1 ~ \\text{and} ~ y_i = 1 \\\\ 0, ~ \\text{if} ~ x_i = 0 ~ \\text{or} ~ y_i = 0 \\end{cases}  $ $$$",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a_1,a_2,\\dots,a_n$\uff0c\u6bcf\u6b21\u64cd\u4f5c\u9009\u62e9 $k$ \u4e2a\u6570\uff0c\u5c06\u8fd9 $k$ \u4e2a\u6570\u51cf\u53bb\u4ed6\u4eec\u7684\u4e0e\uff08\u4e8c\u8fdb\u5236\u8fd0\u7b97\u4e2d\u7684\u4e0e\uff09\u7684\u548c\u3002\u6c42\u54ea\u4e9b $k$ \u53ef\u4ee5\u5728\u6709\u9650\u6b21\u64cd\u4f5c\u5185\u4f7f\u6240\u6709\u6570\u53d8\u6210 $0$\u3002\n### \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 $t$ \u8868\u793a\u6570\u636e\u7ec4\u6570\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 $n$ \u8868\u793a\u5e8f\u5217\u957f\u5ea6\uff0c\u7b2c\u4e8c\u884c\u8f93\u5165 $n$ \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u5e8f\u5217 $a$ \u3002\n### \u8f93\u51fa\u683c\u5f0f\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 $k$ \uff0c\u4e24\u4e2a\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002\n### \u6570\u636e\u8303\u56f4\n$1\\le t\\le10^4,1\\le\\sum n\\le2\\times10^5,0\\le a_i<2^{30}$\u3002"
}