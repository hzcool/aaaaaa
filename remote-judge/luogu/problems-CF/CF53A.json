{
    "description": "Autocomplete is a program function that enables inputting the text (in editors, command line shells, browsers etc.) completing the text by its inputted part. Vasya is busy working on a new browser called 'BERowser'. He happens to be working on the autocomplete function in the address line at this very moment. A list consisting of $ n $ last visited by the user pages and the inputted part $ s $ are known. Your task is to complete $ s $ to make it an address of one of the pages from the list. You have to find the lexicographically smallest address having a prefix $ s $ .",
    "inputFormat": "The first line contains the $ s $ line which is the inputted part. The second line contains an integer $ n $ ( $ 1<=n<=100 $ ) which is the number of visited pages. Then follow $ n $ lines which are the visited pages, one on each line. All the lines have lengths of from $ 1 $ to $ 100 $ symbols inclusively and consist of lowercase Latin letters only.",
    "outputFormat": "If $ s $ is not the beginning of any of $ n $ addresses of the visited pages, print $ s $ . Otherwise, print the lexicographically minimal address of one of the visited pages starting from $ s $ .\n\nThe lexicographical order is the order of words in a dictionary. The lexicographical comparison of lines is realized by the '<' operator in the modern programming languages.",
    "samples": [
        [
            "next\n2\nnextpermutation\nnextelement\n",
            "nextelement\n"
        ],
        [
            "find\n4\nfind\nfindfirstof\nfindit\nfand\n",
            "find\n"
        ],
        [
            "find\n4\nfondfind\nfondfirstof\nfondit\nfand\n",
            "find\n"
        ]
    ],
    "hint": "",
    "translation": "**\u9898\u76ee\u63cf\u8ff0**\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 $s$\u3002\u6b64\u5916\u8fd8\u6709 $n$ \u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u5fc5\u987b\u627e\u5230\u8fd9 $n$ \u4e2a\u5b57\u7b26\u4e32\u91cc\uff0c\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u524d\u7f00\u4e3a $s$ \u7684\u5b57\u7b26\u4e32\u3002\n\n\u5982\u679c\u6ca1\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\uff08\u5373\u8fd9 $n$ \u4e2a\u5b57\u7b26\u4e32\u5747\u4e0d\u4ee5 $s$ \u4f5c\u4e3a\u524d\u7f00\uff09\uff0c\u90a3\u5c31\u8f93\u51fa $s$ \u672c\u8eab\u3002\n\n**\u8f93\u5165**\n\n\u7b2c\u4e00\u884c $s$\uff0c\u7b2c\u4e8c\u884c $n$\uff0c\u4e4b\u540e $n$ \u884c\u4e3a $n$ \u4e2a\u5339\u914d\u5b57\u7b26\u4e32\u3002\n\n**\u8f93\u51fa**\n\n\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\u9898\u9762\u6240\u6c42\u3002\n\n**\u6570\u636e\u8303\u56f4**\uff1a\n- $1\\leq n\\leq100$\n- $1\\leq\\text{\u6240\u6709\u5b57\u7b26\u7684\u957f\u5ea6}\\leq100$\n- \u4fdd\u8bc1\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210"
}