{
    "description": "There are $ n $ pieces of cake on a line. The $ i $ -th piece of cake has weight $ a_i $ ( $ 1 \\leq i \\leq n $ ).\n\nThe tastiness of the cake is the maximum total weight of two adjacent pieces of cake (i. e., $ \\max(a_1+a_2,\\, a_2+a_3,\\, \\ldots,\\, a_{n-1} + a_{n}) $ ).\n\nYou want to maximize the tastiness of the cake. You are allowed to do the following operation at most once (doing more operations would ruin the cake):\n\n- Choose a contiguous subsegment $ a[l, r] $ of pieces of cake ( $ 1 \\leq l \\leq r \\leq n $ ), and reverse it.\n\nThe subsegment $ a[l, r] $ of the array $ a $ is the sequence $ a_l, a_{l+1}, \\dots, a_r $ .\n\nIf you reverse it, the array will become $ a_1, a_2, \\dots, a_{l-2}, a_{l-1}, \\underline{a_r}, \\underline{a_{r-1}}, \\underline{\\dots}, \\underline{a_{l+1}}, \\underline{a_l}, a_{r+1}, a_{r+2}, \\dots, a_{n-1}, a_n $ .\n\nFor example, if the weights are initially $ [5, 2, 1, 4, 7, 3] $ , you can reverse the subsegment $ a[2, 5] $ , getting $ [5, \\underline{7}, \\underline{4}, \\underline{1}, \\underline{2}, 3] $ . The tastiness of the cake is now $ 5 + 7 = 12 $ (while before the operation the tastiness was $ 4+7=11 $ ).\n\nFind the maximum tastiness of the cake after doing the operation at most once.",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1 \\le t \\le 50 $ ) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $ n $ ( $ 2 \\le n \\le 1000 $ ) \u2014 the number of pieces of cake.\n\nThe second line of each test case contains $ n $ integers $ a_1, a_2, \\ldots, a_n $ ( $ 1 \\leq a_i \\leq 10^9 $ ) \u2014 $ a_i $ is the weight of the $ i $ -th piece of cake.",
    "outputFormat": "For each test case, print a single integer: the maximum tastiness of the cake after doing the operation at most once.",
    "samples": [
        [
            "5\n6\n5 2 1 4 7 3\n3\n32 78 78\n3\n69 54 91\n8\n999021 999021 999021 999021 999652 999021 999021 999021\n2\n1000000000 1000000000",
            "12\n156\n160\n1998673\n2000000000"
        ]
    ],
    "hint": "In the first test case, after reversing the subsegment $ a[2, 5] $ , you get a cake with weights $ [5, \\underline{7}, \\underline{4}, \\underline{1}, \\underline{2}, 3] $ . The tastiness of the cake is now $ \\max(5+7, 7+4, 4+1, 1+2, 2+3) = 12 $ . This is the maximum possible tastiness of the cake one can obtain by performing the operation at most once.\n\nIn the second test case, it's optimal not to do any operation. The tastiness is $ 78+78 = 156 $ .\n\nIn the third test case, after reversing the subsegment $ a[1, 2] $ , you get a cake with weights $ [\\underline{54}, \\underline{69}, 91] $ . The tastiness of the cake is now $ \\max(54+69, 69+91) = 160 $ . There is no way to make the tastiness of the cake greater than $ 160 $ by performing at most one operation.",
    "translation": "\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u7ec4 $a$\uff0c\u5b9a\u4e49\u5176\u6743\u503c\u4e3a $\\max\\limits_{1\\leqslant i<n}{(a_i+a_{i+1})}$\u3002\n\n\u4f60\u53ef\u4ee5\u9009\u62e9\u6570\u7ec4\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5b50\u6bb5\u5e76\u5c06\u5176\u7ffb\u8f6c\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e24\u4e2a\u4e0b\u6807 $l,r(1\\leqslant l\\leqslant r\\leqslant n)$\uff0c\u7136\u540e\u5c06\u6570\u7ec4\u53d8\u4e3a $a_1,a_2,\\cdots,a_{l-1},\\underline{a_r,a_{r-1},\\cdots,a_l},a_{r+1},a_{r+2},\\cdots,a_n$\u3002\n\n\u6c42\u5728\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u81f3\u591a\u4e00\u6b21\u7684\u60c5\u51b5\u4e0b\uff0c\u6570\u7ec4 $a$ \u7684\u6743\u503c\u7684\u6700\u5927\u503c\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a\n\n- $t$ \u7ec4\u6570\u636e\uff0c$1\\leqslant t\\leqslant 50$\u3002\n- $2\\leqslant n\\leqslant 1000$\u3002\n- $1\\leqslant a_i\\leqslant 10^9$\u3002\n\nTranslated by Eason_AC"
}