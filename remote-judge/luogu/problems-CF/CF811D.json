{
    "description": "This is an interactive problem.\n\nVladik has favorite game, in which he plays all his free time.\n\nGame field could be represented as $ n\u00d7m $ matrix which consists of cells of three types:\n\n- \u00ab.\u00bb \u2014 normal cell, player can visit it.\n- \u00abF\u00bb \u2014 finish cell, player has to finish his way there to win. There is exactly one cell of this type.\n- \u00ab\\*\u00bb \u2014 dangerous cell, if player comes to this cell, he loses.\n\nInitially player is located in the left top cell with coordinates $ (1,1) $ .\n\nPlayer has access to $ 4 $ buttons \"U\", \"D\", \"L\", \"R\", each of them move player up, down, left and right directions respectively.\n\nBut it\u2019s not that easy! Sometimes friends play game and change functions of buttons. Function of buttons \"L\" and \"R\" could have been swapped, also functions of buttons \"U\" and \"D\" could have been swapped. Note that functions of buttons can be changed only at the beginning of the game.\n\nHelp Vladik win the game!",
    "inputFormat": "First line contains two space-separated integers $ n $ and $ m $ ( $ 1<=n,m<=100 $ ) \u2014 number of rows and columns respectively.\n\nEach of next $ n $ lines contains $ m $ characters describing corresponding row of field. Set of characters in field is described above.\n\nGuaranteed that cell with coordinates $ (1,1) $ is normal and there is at least one way from initial cell to finish cell without dangerous cells.",
    "outputFormat": "You can press buttons no more than $ 2\u00b7n\u00b7m $ times.\n\nTo press a button you should print \"U\", \"D\", \"L\", \"R\" in new line. It\u2019s necessary to print newline character and flush output. After flushing buffer you should read answer from input data. Answer is the pair of space-separated integers $ x $ , $ y $ \u2014 new position of player. In case, if there is no cell in direction of moving, position will not change. If after any move player lost, in other words player move to dangerous cell, then $ x $ and $ y $ will be equal to $ -1 $ .\n\nIf after any move player is in finish or dangerous cell, then you should terminate your program.\n\nTo finish output buffer (i. e. for operation flush) right after printing direction and newline you should do next:\n\n- fflush(stdout) in C++\n- System.out.flush() in Java\n- stdout.flush() in Python\n- flush(output) in Pascal\n- read documentation for other languages.\n\nHacks\n\nTo perform a hack you should use this format:\n\n`<br></br>n m swapLR swapUD  <br></br>a_1  <br></br>a_2  <br></br>...  <br></br>a_n<br></br>`Where $ n $ , $ m $ \u2014 number of rows and columns in game field. $ swapLR $ is equal to $ 1 $ in case, when directions \"L\u2019\u2019 and \"R\u2019\u2019 is swapped, and equal to $ 0 $ otherwise. $ swapUD $ is equal to $ 1 $ , when directions \"U\u2019\u2019 and \"D\u2019\u2019 is swapped, and equal to $ 0 $ otherwise. $ a_{1},a_{2},...,a_{n} $ \u2014 description of corresponding rows of game field.",
    "samples": [
        [
            "4 3\n...\n**.\nF*.\n...\n1 1\n1 2\n1 3\n1 3\n2 3\n3 3\n4 3\n4 2\n4 1\n3 1\n",
            "R\nL\nL\nD\nU\nU\nU\nR\nR\nD\n"
        ]
    ],
    "hint": "In first test case all four directions swapped with their opposite directions. Protocol of interaction In more convenient form:\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF811D/950006bce8e634504ab933f77783747c37b83110.png)\n\nThis test could be presenter for hack in following way:\n\n`<br></br>4 3 1 1<br></br>...<br></br>**.<br></br>F*.<br></br>...<br></br>`"
}