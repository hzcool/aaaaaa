{
    "description": "You are given an array $ a $ consisting of $ n $ integers. Each $ a_i $ is one of the six following numbers: $ 4, 8, 15, 16, 23, 42 $ .\n\nYour task is to remove the minimum number of elements to make this array good.\n\nAn array of length $ k $ is called good if $ k $ is divisible by $ 6 $ and it is possible to split it into $ \\frac{k}{6} $ subsequences $ 4, 8, 15, 16, 23, 42 $ .\n\nExamples of good arrays:\n\n- $ [4, 8, 15, 16, 23, 42] $ (the whole array is a required sequence);\n- $ [4, 8, 4, 15, 16, 8, 23, 15, 16, 42, 23, 42] $ (the first sequence is formed from first, second, fourth, fifth, seventh and tenth elements and the second one is formed from remaining elements);\n- $ [] $ (the empty array is good).\n\nExamples of bad arrays:\n\n- $ [4, 8, 15, 16, 42, 23] $ (the order of elements should be exactly $ 4, 8, 15, 16, 23, 42 $ );\n- $ [4, 8, 15, 16, 23, 42, 4] $ (the length of the array is not divisible by $ 6 $ );\n- $ [4, 8, 15, 16, 23, 42, 4, 8, 15, 16, 23, 23] $ (the first sequence can be formed from first six elements but the remaining array cannot form the required sequence).",
    "inputFormat": "The first line of the input contains one integer $ n $ ( $ 1 \\le n \\le 5 \\cdot 10^5 $ ) \u2014 the number of elements in $ a $ .\n\nThe second line of the input contains $ n $ integers $ a_1, a_2, \\dots, a_n $ (each $ a_i $ is one of the following numbers: $ 4, 8, 15, 16, 23, 42 $ ), where $ a_i $ is the $ i $ -th element of $ a $ .",
    "outputFormat": "Print one integer \u2014 the minimum number of elements you have to remove to obtain a good array.",
    "samples": [
        [
            "5\n4 8 15 16 23\n",
            "5\n"
        ],
        [
            "12\n4 8 4 15 16 8 23 15 16 42 23 42\n",
            "0\n"
        ],
        [
            "15\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\n",
            "3\n"
        ]
    ],
    "hint": "",
    "translation": "\u4f60\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217$a$\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e0b\u52176\u79cd\u6570\u5b57\u4e2d\u7684\u4e00\u4e2a\uff1a$4,8,15,16,23,42$\u3002\r\n\r\n\u4f60\u7684\u4efb\u52a1\u662f\u5220\u6389\u6700\u5c11\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u5e8f\u5217\u53d8\u6210\u597d\u7684\u3002\r\n\r\n\u6211\u4eec\u79f0\u4e00\u4e2a\u957f\u5ea6\u4e3a$k$\u7684\u5e8f\u5217\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53$k$\u80fd\u88ab$6$\u6574\u9664\u5e76\u4e14\u8fd9\u4e2a\u5e8f\u5217\u80fd\u5212\u5206\u6210$\\dfrac k6$\u4e2a\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u5b50\u5e8f\u5217\u90fd\u662f$\\{4,8,15,16,23,42\\}$\u3002\r\n\r\n\u4e0b\u9762\u51e0\u4e2a\u5e8f\u5217\u662f\u597d\u7684\u5e8f\u5217\uff1a\r\n\r\n$[4, 8, 15, 16, 23, 42]$\uff08\u6574\u4e2a\u5e8f\u5217\u4f5c\u4e3a\u8981\u6c42\u7684\u5b50\u5e8f\u5217\uff09\uff1b\r\n\r\n$[4, 8, 4, 15, 16, 8, 23, 15, 16, 42, 23, 42]$\uff08\u7b2c\u4e00\u4e2a\u5b50\u5e8f\u5217\u7531\u7b2c\u4e00\uff0c\u4e8c\uff0c\u56db\uff0c\u4e94\uff0c\u4e03\uff0c\u5341\u4e2a\u5143\u7d20\u6784\u6210\uff0c\u7b2c\u4e8c\u4e2a\u5b50\u5e8f\u5217\u7531\u5269\u4e0b\u7684\u5143\u7d20\u6784\u6210\uff09\uff1b\r\n\r\n$[]$\uff08\u7a7a\u5e8f\u5217\u662f\u597d\u7684\uff09.\r\n\r\n\u4e0b\u9762\u51e0\u4e2a\u5e8f\u5217\u662f\u4e0d\u597d\u7684\u5e8f\u5217\uff1a\r\n\r\n$[4, 8, 15, 16, 42, 23]$\r\n\r\n$[4, 8, 15, 16, 23, 42, 4]$\r\n\r\n$[4, 8, 15, 16, 23, 42, 4, 8, 15, 16, 23, 23]$"
}