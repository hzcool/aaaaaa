{
    "description": "Today, Wet Shark is given $ n $ bishops on a $ 1000 $ by $ 1000 $ grid. Both rows and columns of the grid are numbered from $ 1 $ to $ 1000 $ . Rows are numbered from top to bottom, while columns are numbered from left to right.\n\nWet Shark thinks that two bishops attack each other if they share the same diagonal. Note, that this is the only criteria, so two bishops may attack each other (according to Wet Shark) even if there is another bishop located between them. Now Wet Shark wants to count the number of pairs of bishops that attack each other.",
    "inputFormat": "The first line of the input contains $ n $ ( $ 1<=n<=200000 $ ) \u2014 the number of bishops.\n\nEach of next $ n $ lines contains two space separated integers $ x_{i} $ and $ y_{i} $ ( $ 1<=x_{i},y_{i}<=1000 $ ) \u2014 the number of row and the number of column where $ i $ -th bishop is positioned. It's guaranteed that no two bishops share the same position.",
    "outputFormat": "Output one integer \u2014 the number of pairs of bishops which attack each other.",
    "samples": [
        [
            "5\n1 1\n1 5\n3 3\n5 1\n5 5\n",
            "6\n"
        ],
        [
            "3\n1 1\n2 3\n3 5\n",
            "0\n"
        ]
    ],
    "hint": "In the first sample following pairs of bishops attack each other: $ (1,3) $ , $ (1,5) $ , $ (2,3) $ , $ (2,4) $ , $ (3,4) $ and $ (3,5) $ . Pairs $ (1,2) $ , $ (1,4) $ , $ (2,5) $ and $ (4,5) $ do not attack each other because they do not share the same diagonal.",
    "translation": "\u6709\u4e00\u4e2a$1000\\times1000$\u7684\u68cb\u76d8\uff0c\u4e0a\u9762\u6709$n(1\\le n\\le 200000)$\u4e2a\u8c61\uff0c\u6bcf\u4e2a\u8c61\u7684\u4f4d\u7f6e\u4e3a$(x_i,y_i)$\u3002\u6ee1\u8db3$1\\le x_i,y_i\\le 1000$\u3002\n\n\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u89c4\u5b9a\u4e0e\u56fd\u9645\u8c61\u68cb\u7684\u4e0d\u540c\u3002\u6211\u4eec\u8ba4\u4e3a\uff0c\u53ea\u8981\u4e24\u4e2a\u8c61\u5728\u540c\u4e00\u5bf9\u89d2\u7ebf\uff0c\u5c31\u80fd\u591f\u76f8\u4e92\u653b\u51fb\u5230\uff08\u4e2d\u95f4\u6709\u8c61\u4e5f\u6ca1\u6709\u5173\u7cfb\uff09\u3002\n\n\u6c42\u4e92\u76f8\u653b\u51fb\u7684\u8c61\u7684\u5bf9\u6570\u3002"
}