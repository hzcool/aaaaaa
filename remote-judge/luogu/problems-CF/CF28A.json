{
    "description": "Robot Bender decided to make Fray a birthday present. He drove $ n $ nails and numbered them from $ 1 $ to $ n $ in some order. Bender decided to make a picture using metal rods. The picture is a closed polyline, which vertices should be nails (in the given order). The segments of the polyline should be parallel to the coordinate axes. Polyline is allowed to have self-intersections. Bender can take a rod and fold it exactly once in any place to form an angle of 90 degrees. Then he can attach the place of the fold to some unoccupied nail and attach two ends of this rod to adjacent nails. A nail is considered unoccupied if there is no rod attached to it (neither by it's end nor the by the fold place). No rod could be used twice. It is not required to use all the rods.\n\nHelp Bender to solve this difficult task.",
    "inputFormat": "The first line contains two positive integers $ n $ and $ m $ ( $ 4<=n<=500,2<=m<=500 $ , $ n $ is even) \u2014 the amount of nails and the amount of rods. $ i $ -th of the following $ n $ lines contains a pair of integers, denoting the coordinates of the $ i $ -th nail. Nails should be connected in the same order as they are given in the input. The last line contains $ m $ integers \u2014 the lenghts of the rods. All coordinates do not exceed $ 10^{4} $ by absolute value. Lengths of the rods are between $ 1 $ and $ 200000 $ . No rod can be used twice. It is guaranteed that all segments of the given polyline are parallel to coordinate axes. No three consecutive nails lie on the same line.",
    "outputFormat": "If it is impossible to solve Bender's problem, output NO. Otherwise, output YES in the first line, and in the second line output $ n $ numbers \u2014 $ i $ -th of them should be the number of rod, which fold place is attached to the $ i $ -th nail, or -1, if there is no such rod.\n\nIf there are multiple solutions, print any of them.",
    "samples": [
        [
            "4 2\n0 0\n0 2\n2 2\n2 0\n4 4\n",
            "YES\n1 -1 2 -1 \n"
        ],
        [
            "6 3\n0 0\n1 0\n1 1\n2 1\n2 2\n0 2\n3 2 3\n",
            "YES\n1 -1 2 -1 3 -1 \n"
        ],
        [
            "6 3\n0 0\n1 0\n1 1\n2 1\n2 2\n0 2\n2 2 3\n",
            "NO\n"
        ]
    ],
    "hint": "",
    "translation": "\u9898\u610f\uff1a\u6709n\u4e2a\u9489\u5b50\uff0c\u4ece1~n\u7f16\u53f7\uff0c\u6709m\u6761\u94c1\u68d2\uff0c\u8981\u6c42\u7528\u8fd9\u4e9b\u94c1\u68d2\u548c\u9489\u5b50\u56f4\u6210\u4e00\u4e2a\u5c01\u95ed\u7684\u6298\u7ebf\u3002\u8981\u6c42\u94c1\u68d2\u4e0d\u4e00\u5b9a\u5168\u90e8\u7528\u5b8c\uff0c\u94c1\u68d2\u5fc5\u987b\u5e73\u884c\u4e8e\u5750\u6807\u8f74\u3002\u73b0\u5728\u4ed6\u8981\u628a\u94c1\u68d2\u5f2f\u6210\u76f4\u89d2\uff0c\u8fd9\u6837\u4e2d\u95f4\u7684\u6298\u53e0\u70b9\u4e00\u4e2a\u9489\u5b50\uff0c\u4e24\u5934\u5404\u4e00\u4e2a\u9489\u5b50\uff0c\u8981\u6c42\u6298\u53e0\u7684\u8fd9\u9897\u9489\u5b50\u4e4b\u524d\u5fc5\u987b\u662f\u6ca1\u6709\u522b\u7684\u68d2\u8fde\u63a5\u7684\uff08\u4e5f\u5c31\u662f\u7a7a\u9489\u5b50\uff09\uff0c\u95ee\u600e\u4e48\u9009\u68d2\uff0c\u68d2\u53ea\u80fd\u7528\u4e00\u6b21"
}