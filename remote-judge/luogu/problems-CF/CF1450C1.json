{
    "description": "The only difference between the easy and hard versions is that tokens of type O do not appear in the input of the easy version.\n\nErrichto gave Monogon the following challenge in order to intimidate him from taking his top contributor spot on Codeforces.\n\nIn a Tic-Tac-Toe grid, there are $ n $ rows and $ n $ columns. Each cell of the grid is either empty or contains a token. There are two types of tokens: X and O. If there exist three tokens of the same type consecutive in a row or column, it is a winning configuration. Otherwise, it is a draw configuration.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1450C1/39afc6239351b009b5f556b0fc6f685f7842a873.png) The patterns in the first row are winning configurations. The patterns in the second row are draw configurations. In an operation, you can change an X to an O, or an O to an X. Let $ k $ denote the total number of tokens in the grid. Your task is to make the grid a draw in at most $ \\lfloor \\frac{k}{3}\\rfloor $ (rounding down) operations.\n\nYou are not required to minimize the number of operations.",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1\\le t\\le 100 $ ) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $ n $ ( $ 1\\le n\\le 300 $ ) \u2014 the size of the grid.\n\nThe following $ n $ lines each contain a string of $ n $ characters, denoting the initial grid. The character in the $ i $ -th row and $ j $ -th column is '.' if the cell is empty, or it is the type of token in the cell: 'X' or 'O'.\n\nIt is guaranteed that not all cells are empty.\n\nIn the easy version, the character 'O' does not appear in the input.\n\nThe sum of $ n $ across all test cases does not exceed $ 300 $ .",
    "outputFormat": "For each test case, print the state of the grid after applying the operations.\n\nWe have proof that a solution always exists. If there are multiple solutions, print any.",
    "samples": [
        [
            "3\n3\n.X.\nXXX\n.X.\n6\nXX.XXX\nXXXXXX\nXXX.XX\nXXXXXX\nXX.X.X\nXXXXXX\n5\nXXX.X\n.X..X\nXXX.X\n..X..\n..X..",
            ".X.\nXOX\n.X.\nXX.XXO\nXOXXOX\nOXX.XX\nXOOXXO\nXX.X.X\nOXXOXX\nXOX.X\n.X..X\nXXO.O\n..X..\n..X.."
        ]
    ],
    "hint": "In the first test case, there are initially three 'X' consecutive in the second row and the second column. By changing the middle token to 'O' we make the grid a draw, and we only changed $ 1\\le \\lfloor 5/3\\rfloor $ token.\n\nIn the second test case, we change only $ 9\\le \\lfloor 32/3\\rfloor $ tokens, and there does not exist any three 'X' or 'O' consecutive in a row or column, so it is a draw.\n\nIn the third test case, we change only $ 3\\le \\lfloor 12/3\\rfloor $ tokens, and the resulting grid is a draw.",
    "translation": "\u6b64\u9898\u7684\u7b80\u5355\u7248\u672c\u4e0e\u56f0\u96be\u7248\u672c\u7684\u4e0d\u540c\u53ea\u6709\u56f0\u96be\u7248\u672c\u7684\u521d\u59cb\u68cb\u76d8\u4e2d\u542b\u6709 o \u68cb\u5b50\uff0c\u800c\u7b80\u5355\u7248\u672c\u6ca1\u6709\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a $n$ \u884c $n$ \u5217\u7684\u4e95\u5b57\u68cb\u68cb\u76d8\uff0c\u68cb\u76d8\u4e2d\u7684\u6bcf\u4e00\u4e2a\u683c\u5b50\u8981\u4e48\u662f\u7a7a\u7684\uff0c\u8981\u4e48\u5305\u542b\u4e00\u4e2a\u68cb\u5b50\u3002 \u8fd9\u91cc\u6709\u4e24\u79cd\u68cb\u5b50\u5206\u522b\u4e3a x \u548c o \u3002\u5982\u679c\u6709\u4e09\u4e2a\u540c\u79cd\u7c7b\u7684\u68cb\u5b50\u8fde\u7eed\u6a2a\u7740\u6216\u7ad6\u7740\u6392\u5217\uff0c\u5219\u79f0\u8fd9\u662f\u83b7\u80dc\u5c40\u3002\uff08\u6ce8\u610f\uff1a\u659c\u7740\u4e0d\u7b97\uff09\n\u5982\u679c\u68cb\u76d8\u4e2d\u6ca1\u6709\u8fd9\u6837\u7684\u8fde\u7eed\u4e09\u4e2a\u540c\u79cd\u7c7b\u7684\u6392\u5217\uff0c\u5219\u79f0\u8fd9\u662f\u4e00\u4e2a\u5e73\u5c40\u3002\n\n\u5728\u4e00\u6b21\u64cd\u4f5c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a x \u68cb\u5b50\u53d8\u4e3a o \u68cb\u5b50\u3002\u4ee4 $k$ \u4e3a\u521d\u59cb\u68cb\u76d8\u4e2d\u68cb\u5b50\u7684\u603b\u6570\uff0c\u4f60\u53ef\u4ee5\u505a\u6700\u591a $\\left\\lfloor\\dfrac{k}{3}\\right\\rfloor$ \u6b21\u4e0a\u8ff0\u64cd\u4f5c\u4f7f\u5f97\u6700\u540e\u7684\u5c40\u9762\u4e3a\u5e73\u5c40\u3002\u6ce8\u610f\uff1a\u4f60\u4e0d\u9700\u8981\u6700\u5c0f\u5316\u64cd\u4f5c\u6b21\u6570\u3002"
}