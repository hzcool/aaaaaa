{
    "description": "Real stupidity beats artificial intelligence every time.\n\n\u2014 Terry Pratchett, Hogfather, Discworld\n\n\n\nYou are given a string $ s $ of length $ n $ and a number $ k $ . Let's denote by $ rev(s) $ the reversed string $ s $ (i.e. $ rev(s) = s_n s_{n-1} ... s_1 $ ). You can apply one of the two kinds of operations to the string:\n\n- replace the string $ s $ with $ s + rev(s) $\n- replace the string $ s $ with $ rev(s) + s $\n\nHow many different strings can you get as a result of performing exactly $ k $ operations (possibly of different kinds) on the original string $ s $ ?\n\nIn this statement we denoted the concatenation of strings $ s $ and $ t $ as $ s + t $ . In other words, $ s + t = s_1 s_2 ... s_n t_1 t_2 ... t_m $ , where $ n $ and $ m $ are the lengths of strings $ s $ and $ t $ respectively.",
    "inputFormat": "The first line contains one integer $ t $ ( $ 1 \\le t \\le 100 $ ) \u2014 number of test cases. Next $ 2 \\cdot t $ lines contain $ t $ test cases:\n\nThe first line of a test case contains two integers $ n $ and $ k $ ( $ 1 \\le n \\le 100 $ , $ 0 \\le k \\le 1000 $ ) \u2014 the length of the string and the number of operations respectively.\n\nThe second string of a test case contains one string $ s $ of length $ n $ consisting of lowercase Latin letters.",
    "outputFormat": "For each test case, print the answer (that is, the number of different strings that you can get after exactly $ k $ operations) on a separate line.\n\nIt can be shown that the answer does not exceed $ 10^9 $ under the given constraints.",
    "samples": [
        [
            "4\n3 2\naab\n3 3\naab\n7 1\nabacaba\n2 0\nab",
            "2\n2\n1\n1"
        ]
    ],
    "hint": "In the first test case of the example:\n\nAfter the first operation the string $ s $ can become either aabbaa or baaaab. After the second operation there are 2 possibilities for $ s $ : aabbaaaabbaa and baaaabbaaaab.",
    "translation": "\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32 $s$ \u548c\u4e00\u4e2a\u6574\u6570 $k$\u3002\u5b9a\u4e49 $rev(s)$ \u4e3a\u5c06 $s$ \u53cd\u8f6c\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u3002\u4f60\u53ef\u4ee5\u6267\u884c**\u6070\u597d** $k$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4f60\u53ef\u4ee5\u5c06 $s$ \u66ff\u6362\u4e3a $s+rev(s)$ \u6216 $rev(s)+s$\uff08\u5176\u4e2d $+$ \u4e3a\u62fc\u63a5\u64cd\u4f5c\uff09\uff0c\u6c42\u5728\u6070\u597d $k$ \u6b21\u64cd\u4f5c\u4e4b\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u4e00\u5171\u6709\u591a\u5c11\u79cd\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a\n\n- $t$ \u7ec4\u6570\u636e\uff0c$1\\leqslant t\\leqslant 100$\u3002\n- $1\\leqslant n\\leqslant 100$\uff0c$0\\leqslant k\\leqslant 1000$\u3002\n\nTranslated by Eason_AC  \n2022.2.9"
}