{
    "description": "This is an interactive problem.\n\nLittle Dormi was faced with an awkward problem at the carnival: he has to guess the edges of an unweighted tree of $ n $ nodes! The nodes of the tree are numbered from $ 1 $ to $ n $ .\n\nThe game master only allows him to ask one type of question:\n\n- Little Dormi picks a node $ r $ ( $ 1 \\le r \\le n $ ), and the game master will reply with an array $ d_1, d_2, \\ldots, d_n $ , where $ d_i $ is the length of the shortest path from node $ r $ to $ i $ , for all $ 1 \\le i \\le n $ .\n\nAdditionally, to make the game unfair challenge Little Dormi the game master will allow at most $ \\lceil\\frac{n}{2}\\rceil $ questions, where $ \\lceil x \\rceil $ denotes the smallest integer greater than or equal to $ x $ .\n\nFaced with the stomach-churning possibility of not being able to guess the tree, Little Dormi needs your help to devise a winning strategy!\n\nNote that the game master creates the tree before the game starts, and does not change it during the game.",
    "inputFormat": "The first line of input contains the integer $ n $ ( $ 2 \\le n \\le 2\\,000 $ ), the number of nodes in the tree.\n\nYou will then begin interaction.",
    "outputFormat": "When your program has found the tree, first output a line consisting of a single \"!\" followed by $ n-1 $ lines each with two space separated integers $ a $ and $ b $ , denoting an edge connecting nodes $ a $ and $ b $ ( $ 1 \\le a, b \\le n $ ). Once you are done, terminate your program normally immediately after flushing the output stream.\n\nYou may output the edges in any order and an edge $ (a,b) $ is considered the same as an edge $ (b,a) $ . Answering is not considered as a query.\n\nInteraction\n\nAfter taking input, you may make at most $ \\lceil\\frac{n}{2}\\rceil $ queries. Each query is made in the format \"? r\", where $ r $ is an integer $ 1 \\le r \\le n $ that denotes the node you want to pick for that query.\n\nYou will then receive $ n $ space separated integers $ d_1, d_2, \\ldots, d_n $ , where $ d_i $ is the length of the shortest path from node $ r $ to $ i $ , followed by a newline.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nIf at any point you make an invalid query or try to make more than $ \\lceil \\frac{n}{2} \\rceil $ queries, the interaction will terminate immediately and you will receive a Wrong Answer verdict.\n\nHacks\n\nTo hack a solution, use the following format.\n\nThe first line contains the integer $ n $ ( $ 2 \\le n \\le 2\\,000 $ ).\n\nThe next $ n\u22121 $ lines contain two integers $ u $ and $ v $ ( $ 1 \\le u,v \\le n $ ) denoting an edge between $ u $ and $ v $ ( $ u \\neq v $ ). These $ n-1 $ edges must form a tree.",
    "samples": [
        [
            "4\n\n0 1 2 2\n\n1 0 1 1",
            "? 1\n\n? 2\n\n!\n4 2\n1 2\n2 3"
        ],
        [
            "5\n\n2 2 1 1 0",
            "? 5\n\n!\n4 5\n3 5\n2 4\n1 3"
        ]
    ],
    "hint": "Here is the tree from the first example.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1534D/db5986557f00451a4bfc4f6b9560af77b9bcbfc0.png)Notice that the edges can be output in any order.\n\nAdditionally, here are the answers for querying every single node in example $ 1 $ :\n\n- $ 1 $ : $ [0,1,2,2] $\n- $ 2 $ : $ [1,0,1,1] $\n- $ 3 $ : $ [2,1,0,2] $\n- $ 4 $ : $ [2,1,2,0] $\n\nBelow is the tree from the second example interaction.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1534D/391f4de27a316d6b5f59760a326b58ab613c06c0.png)Lastly, here are the answers for querying every single node in example $ 2 $ :\n\n- $ 1 $ : $ [0,4,1,3,2] $\n- $ 2 $ : $ [4,0,3,1,2] $\n- $ 3 $ : $ [1,3,0,2,1] $\n- $ 4 $ : $ [3,1,2,0,1] $\n- $ 5 $ : $ [2,2,1,1,0] $",
    "translation": "**\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002**\n\n\u4f60\u6709\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6811\u4e0a\u6bcf\u6761\u8fb9\u957f\u5ea6\u4e3a $1$\uff0c\u4f46\u4f60\u4e0d\u77e5\u9053\u8fd9\u68f5\u6811\u7684\u7ed3\u6784\u3002\n\n\u4f60\u53ef\u4ee5\u5bf9\u7cfb\u7edf\u8fdb\u884c\u4e0d\u8d85\u8fc7 $\\lceil \\frac{n}{2} \\rceil$ \u6b21\u7684\u8be2\u95ee\uff0c\u6bcf\u6b21\u53ef\u4ee5\u8be2\u95ee\u4e00\u4e2a\u6ee1\u8db3 $1 \\le x \\le n$ \u7684\u8282\u70b9 $x$\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u7684 $x$\uff0c\u7cfb\u7edf\u4f1a\u7ed9\u4f60 $n$ \u4e2a\u6570\uff0c\u7b2c $i$ \u4e2a\u6570\u4ee3\u8868\u8282\u70b9 $i$ \u4e0e\u8282\u70b9 $x$ \u7684**\u7b80\u5355\u8def\u5f84**\u957f\u5ea6\u3002\n\n\u8bf7\u4f60\u8fd8\u539f\u51fa\u8fd9\u68f5\u6811\u7684\u7ed3\u6784\u3002\n\n### \u6570\u636e\u8303\u56f4\u53ca\u76f8\u5173\u63d0\u9192\n\n$2 \\le n \\le 2000$\u3002\n\n\u5f53\u4f60\u8981\u5411\u7cfb\u7edf\u8be2\u95ee\u8282\u70b9 $i$ \u65f6\uff0c\u8f93\u51fa `? i`\uff0c\u4e14\u8981\u6362\u884c\u3002\n\n\u5f53\u4f60\u77e5\u9053\u7b54\u6848\u7684\u65f6\u5019\uff0c\u5148\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a `!` \uff1b\n\n\u7136\u540e\u7d27\u8ddf\u7740 $n-1$ \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570 $u,v$\uff0c\u4ee3\u8868\u4e00\u6761\u6811\u4e0a\u7684\u8fb9\u3002\n\n**\u6bcf\u4e00\u6b21\u8f93\u51fa\u8bb0\u5f97\u6e05\u7a7a\u7f13\u51b2\u533a\u3002**\n\n\u7ffb\u8bd1\u63d0\u4f9b HoshizoraZ"
}