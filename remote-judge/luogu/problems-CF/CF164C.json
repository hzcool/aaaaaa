{
    "description": "One remarkable day company \"X\" received $ k $ machines. And they were not simple machines, they were mechanical programmers! This was the last unsuccessful step before switching to android programmers, but that's another story.\n\nThe company has now $ n $ tasks, for each of them we know the start time of its execution $ s_{i} $ , the duration of its execution $ t_{i} $ , and the company profit from its completion $ c_{i} $ . Any machine can perform any task, exactly one at a time. If a machine has started to perform the task, it is busy at all moments of time from $ s_{i} $ to $ s_{i}+t_{i}-1 $ , inclusive, and it cannot switch to another task.\n\nYou are required to select a set of tasks which can be done with these $ k $ machines, and which will bring the maximum total profit.",
    "inputFormat": "The first line contains two integer numbers $ n $ and $ k $ ( $ 1<=n<=1000 $ , $ 1<=k<=50 $ ) \u2014 the numbers of tasks and machines, correspondingly.\n\nThe next $ n $ lines contain space-separated groups of three integers $ s_{i},t_{i},c_{i} $ ( $ 1<=s_{i},t_{i}<=10^{9} $ , $ 1<=c_{i}<=10^{6} $ ), $ s_{i} $ is the time where they start executing the $ i $ -th task, $ t_{i} $ is the duration of the $ i $ -th task and $ c_{i} $ is the profit of its execution.",
    "outputFormat": "Print $ n $ integers $ x_{1},x_{2},...,x_{n} $ . Number $ x_{i} $ should equal $ 1 $ , if task $ i $ should be completed and otherwise it should equal $ 0 $ .\n\nIf there are several optimal solutions, print any of them.",
    "samples": [
        [
            "3 1\n2 7 5\n1 3 3\n4 1 3\n",
            "0 1 1\n"
        ],
        [
            "5 2\n1 5 4\n1 4 5\n1 3 2\n4 1 2\n5 6 1\n",
            "1 1 0 0 1\n"
        ]
    ],
    "hint": "In the first sample the tasks need to be executed at moments of time 2 ... 8, 1 ... 3 and 4 ... 4, correspondingly. The first task overlaps with the second and the third ones, so we can execute either task one (profit 5) or tasks two and three (profit 6).",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\uff1a\n\n\u6709\u4e00\u5bb6\u516c\u53f8\u6709 $k$ \u53f0\u673a\u5668\uff0c\u5e76\u4e14\u6709 $n$ \u4e2a\u4efb\u52a1\u9700\u8981\u5b8c\u6210\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4efb\u52a1\u6211\u4eec\u77e5\u9053\u5b83\u7684\u5f00\u59cb\u65f6\u95f4 $s_i$ \u548c\u6301\u7eed\u65f6\u95f4 $t_i$ ,\u5e76\u4e14\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u540e\u8fd9\u5bb6\u516c\u53f8\u53ef\u4ee5\u83b7\u5229 $c_i$ \u3002\u6bcf\u4e00\u53f0\u673a\u5668\u90fd\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u4efb\u52a1\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u5904\u7406\u591a\u4e2a\u4efb\u52a1\uff0c\u5728\u5904\u7406\u67d0\u4e2a\u4efb\u52a1\u65f6\u4e5f\u4e0d\u80fd\u5207\u6362\u5230\u5176\u4ed6\u4efb\u52a1\uff08\u5373\u5f53\u67d0\u4e2a\u673a\u5668\u5904\u7406\u4efb\u52a1 $i$ \u65f6\uff0c\u5728 $s_i$ \u81f3 $s_i+t_i-1$ \u65f6\u95f4\u6bb5\u5185\u5c31\u53ea\u80fd\u5904\u7406\u8fd9\u4e2a\u4efb\u52a1\uff09\u3002\u4f60\u9700\u8981\u9009\u62e9\u4e00\u4e9b\u4efb\u52a1\u6765\u5b8c\u6210\uff0c\u4f7f\u5f97\u603b\u5229\u6da6\u6700\u5927\u3002\n\n### \u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570 $n\\ (1\\le n\\le 1000)$\uff0c$k\\ (\\le k\\le50)$ \u3002$n$ \u548c $k$ \u5206\u522b\u4ee3\u8868\u4efb\u52a1\u6570\u91cf\u548c\u673a\u5668\u6570\u91cf\u3002 \n\n\u63a5\u4e0b\u6765 $n$ \u884c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 $s_i,t_i,c_i$ $(1\\le s_i,t_i\\le10^9,1\\le c_i\\le10^6)$\uff0c\u542b\u4e49\u5982\u63cf\u8ff0\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa $n$ \u4e2a\u6570\u5b57 $x_{1},x_{2},...,x_{n}$\uff0c\u4ee5\u7a7a\u683c\u76f8\u9694\u3002\u6570\u5b57 $x_i$ \u4e3a $1$ \u6216 $0$ \uff0c$1$ \u4ee3\u8868\u9009\u62e9\u4efb\u52a1 $i$\uff0c$0$ \u4ee3\u8868\u4e0d\u9009\u62e9\u3002 \u5982\u679c\u6709\u591a\u4e2a\u9009\u62e9\u65b9\u6848\uff0c\u8f93\u51fa\u4efb\u4f55\u4e00\u4e2a\u5373\u53ef\u3002\n\nby [lyh](/user/505244)"
}