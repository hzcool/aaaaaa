{
    "description": "Programmer Vasya is studying a new programming language &K\\*. The &K\\* language resembles the languages of the C family in its syntax. However, it is more powerful, which is why the rules of the actual C-like languages are unapplicable to it. To fully understand the statement, please read the language's description below carefully and follow it and not the similar rules in real programming languages.\n\nThere is a very powerful system of pointers on &K\\* \u2014 you can add an asterisk to the right of the existing type $ X $ \u2014 that will result in new type $ X* $ . That is called pointer-definition operation. Also, there is the operation that does the opposite \u2014 to any type of $ X $ , which is a pointer, you can add an ampersand \u2014 that will result in a type $ &amp;X $ , to which refers $ X $ . That is called a dereference operation.\n\nThe &K\\* language has only two basic data types \u2014 void and errtype. Also, the language has operators typedef and typeof.\n\n- The operator \"typedef $ A $ $ B $ \" defines a new data type $ B $ , which is equivalent to $ A $ . $ A $ can have asterisks and ampersands, and $ B $ cannot have them. For example, the operator typedef void\\*\\* ptptvoid will create a new type ptptvoid, that can be used as void\\*\\*.\n- The operator \"typeof $ A $ \" returns type of $ A $ , brought to void, that is, returns the type void\\*\\*...\\*, equivalent to it with the necessary number of asterisks (the number can possibly be zero). That is, having defined the ptptvoid type, as shown above, the typeof ptptvoid operator will return void\\*\\*.\n\nAn attempt of dereferencing of the void type will lead to an error: to a special data type errtype. For errtype the following equation holds true: errtype\\* $ = $ &errtype $ = $ errtype. An attempt to use the data type that hasn't been defined before that will also lead to the errtype.\n\nUsing typedef, we can define one type several times. Of all the definitions only the last one is valid. However, all the types that have been defined earlier using this type do not change.\n\nLet us also note that the dereference operation has the lower priority that the pointer operation, in other words $ &amp;T* $ is always equal to $ T $ .\n\nNote, that the operators are executed consecutively one by one. If we have two operators \"typedef &void a\" and \"typedef a\\* b\", then at first a becomes errtype, and after that b becomes errtype\\* = errtype, but not &void\\* = void (see sample 2).\n\nVasya does not yet fully understand this powerful technology, that's why he asked you to help him. Write a program that analyzes these operators.",
    "inputFormat": "The first line contains an integer $ n $ ( $ 1<=n<=100 $ ) \u2014 the number of operators. Then follow $ n $ lines with operators. Each operator is of one of two types: either \"typedef $ A $ $ B $ \", or \"typeof $ A $ \". In the first case the $ B $ type differs from void and errtype types, and besides, doesn't have any asterisks and ampersands.\n\nAll the data type names are non-empty lines of no more than 20 lowercase Latin letters. The number of asterisks and ampersands separately in one type in any operator does not exceed 10, however if we bring some types to void with several asterisks, their number may exceed 10.",
    "outputFormat": "For every typeof operator print on the single line the answer to that operator \u2014 the type that the given operator returned.",
    "samples": [
        [
            "5\ntypedef void* ptv\ntypeof ptv\ntypedef &&ptv node\ntypeof node\ntypeof &ptv\n",
            "void*\nerrtype\nvoid\n"
        ],
        [
            "17\ntypedef void* b\ntypedef b* c\ntypeof b\ntypeof c\ntypedef &b b\ntypeof b\ntypeof c\ntypedef &&b* c\ntypeof c\ntypedef &b* c\ntypeof c\ntypedef &void b\ntypeof b\ntypedef b******* c\ntypeof c\ntypedef &&b* c\ntypeof c\n",
            "void*\nvoid**\nvoid\nvoid**\nerrtype\nvoid\nerrtype\nerrtype\nerrtype\n"
        ]
    ],
    "hint": "Let's look at the second sample.\n\nAfter the first two queries typedef the b type is equivalent to void\\*, and \u0441 \u2014 to void\\*\\*.\n\nThe next query typedef redefines b \u2014 it is now equal to &b = &void\\* = void. At that, the \u0441 type doesn't change.\n\nAfter that the \u0441 type is defined as &&b\\* = &&void\\* = &void = errtype. It doesn't influence the b type, that's why the next typedef defines c as &void\\* = void.\n\nThen the b type is again redefined as &void = errtype.\n\nPlease note that the c type in the next query is defined exactly as errtype\\*\\*\\*\\*\\*\\*\\* = errtype, and not &void\\*\\*\\*\\*\\*\\*\\* = void\\*\\*\\*\\*\\*\\*. The same happens in the last typedef.",
    "translation": "\u7a0b\u5e8f\u5458 Vasya \u6b63\u5728\u5b66\u4e60\u4e00\u79cd\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00 &K*\u3002 &K* \u8bed\u8a00\u5728\u8bed\u6cd5\u4e0a\u7c7b\u4f3c\u4e8e C \u7cfb\u5217\u8bed\u8a00\u3002\u4f46\u662f\uff0c\u5b83\u66f4\u5f3a\u5927\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b9e\u9645\u7684\u7c7b C \u8bed\u8a00\u7684\u89c4\u5219\u4e0d\u9002\u7528\u4e8e\u5b83\u3002\u4e3a\u4e86\u5b8c\u5168\u7406\u89e3\u8be5\u8bed\u53e5\uff0c\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u4e0b\u9762\u7684\u8bed\u8a00\u63cf\u8ff0\u5e76\u9075\u5faa\u5b83\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7c7b\u4f3c\u89c4\u5219\u3002\n\n&K* \u4e0a\u6709\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u6307\u9488\u7cfb\u7edf\u2014\u2014\u4f60\u53ef\u4ee5\u5728\u73b0\u6709\u7c7b\u578b XX \u7684\u53f3\u4fa7\u6dfb\u52a0\u4e00\u4e2a\u661f\u53f7\u2014\u2014\u8fd9\u5c06\u4ea7\u751f\u65b0\u7684\u7c7b\u578b X*X*\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u6307\u9488\u5b9a\u4e49\u64cd\u4f5c\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u76f8\u53cd\u7684\u64cd\u4f5c\u2014\u2014\u5bf9\u4e8e\u4efb\u4f55\u7c7b\u578b\u7684 XX \uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u4f60\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\uff06\u7b26\u53f7\u2014\u2014\u8fd9\u5c06\u5bfc\u81f4\u7c7b\u578b &amp;X \uff0c\u5f15\u7528 XX \u3002\u8fd9\u79f0\u4e3a\u53d6\u6d88\u5f15\u7528\u64cd\u4f5c\u3002\n\n&K* \u8bed\u8a00\u53ea\u6709\u4e24\u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b\u2014\u2014void \u548c errtype\u3002\u6b64\u5916\uff0c\u8be5\u8bed\u8a00\u5177\u6709\u8fd0\u7b97\u7b26 typedef \u548c typeof\u3002\n\n\u8fd0\u7b97\u7b26\u201ctypedef AA BB\u201d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578bBB\uff0c\u5b83\u7b49\u4ef7\u4e8eAA\u3002 AA \u53ef\u4ee5\u6709\u661f\u53f7\u548c\u4e0e\u53f7\uff0c\u800c BB \u4e0d\u80fd\u6709\u5b83\u4eec\u3002\u4f8b\u5982\uff0c\u64cd\u4f5c\u7b26 typedef void** ptptvoid \u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u578b ptptvoid\uff0c\u5b83\u53ef\u4ee5\u7528\u4f5c void**\u3002\n\u8fd0\u7b97\u7b26\u201ctypeof AA\u201d\u8fd4\u56de AA \u7684\u7c7b\u578b\uff0c\u5e26\u4e3a void\uff0c\u5373\u8fd4\u56de\u7c7b\u578b void**...*\uff0c\u76f8\u5f53\u4e8e\u5b83\u5e26\u6709\u5fc5\u8981\u6570\u91cf\u7684\u661f\u53f7\uff08\u6570\u5b57\u53ef\u80fd\u4e3a\u96f6\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b9a\u4e49\u4e86 ptptvoid \u7c7b\u578b\u540e\uff0c\u5982\u4e0a\u6240\u793a\uff0ctypeof ptptvoid \u8fd0\u7b97\u7b26\u5c06\u8fd4\u56de void**\u3002\n\u5c1d\u8bd5\u53d6\u6d88\u5f15\u7528 void \u7c7b\u578b\u5c06\u5bfc\u81f4\u9519\u8bef\uff1a\u7279\u6b8a\u6570\u636e\u7c7b\u578b errtype\u3002\u5bf9\u4e8e errtype\uff0c\u4ee5\u4e0b\u7b49\u5f0f\u6210\u7acb\uff1aerrtype* == &errtype == errtype\u3002\u5c1d\u8bd5\u4f7f\u7528\u4e4b\u524d\u672a\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u4e5f\u4f1a\u5bfc\u81f4 errtype\u3002\n\n\u4f7f\u7528 typedef\uff0c\u6211\u4eec\u53ef\u4ee5\u591a\u6b21\u5b9a\u4e49\u4e00\u79cd\u7c7b\u578b\u3002\u5728\u6240\u6709\u5b9a\u4e49\u4e2d\uff0c\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u662f\u6709\u6548\u7684\u3002\u4f46\u662f\uff0c\u4e4b\u524d\u4f7f\u7528\u6b64\u7c7b\u578b\u5b9a\u4e49\u7684\u6240\u6709\u7c7b\u578b\u90fd\u4e0d\u4f1a\u66f4\u6539\u3002\n\n\u6211\u4eec\u8fd8\u8981\u6ce8\u610f\uff0c\u89e3\u5f15\u7528\u64cd\u4f5c\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e\u6307\u9488\u64cd\u4f5c\uff0c\u6362\u53e5\u8bdd\u8bf4 &amp;T* \u603b\u662f\u7b49\u4e8e TT \u3002\n\n\u6ce8\u610f\uff0c\u64cd\u4f5c\u7b26\u662f\u4e00\u4e2a\u4e00\u4e2a\u8fde\u7eed\u6267\u884c\u7684\u3002\u5982\u679c\u6211\u4eec\u6709\u4e24\u4e2a\u8fd0\u7b97\u7b26\u201ctypedef &void a\u201d\u548c\u201ctypedef a* b\u201d\uff0c\u90a3\u4e48\u9996\u5148 a \u53d8\u6210 errtype\uff0c\u4e4b\u540e b \u53d8\u6210 errtype* = errtype\uff0c\u4f46\u4e0d\u662f &void* = void\uff08\u53c2\u89c1\u793a\u4f8b 2\uff09\u3002\n\nVasya \u8fd8\u6ca1\u6709\u5b8c\u5168\u7406\u89e3\u8fd9\u79cd\u5f3a\u5927\u7684\u6280\u672f\uff0c\u8fd9\u5c31\u662f\u4ed6\u8bf7\u6c42\u4f60\u5e2e\u52a9\u4ed6\u7684\u539f\u56e0\u3002\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5206\u6790\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u3002"
}