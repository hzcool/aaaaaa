{
    "description": "A string $ t $ is called nice if a string \"2017\" occurs in $ t $ as a subsequence but a string \"2016\" doesn't occur in $ t $ as a subsequence. For example, strings \"203434107\" and \"9220617\" are nice, while strings \"20016\", \"1234\" and \"20167\" aren't nice.\n\nThe ugliness of a string is the minimum possible number of characters to remove, in order to obtain a nice string. If it's impossible to make a string nice by removing characters, its ugliness is $ -1 $ .\n\nLimak has a string $ s $ of length $ n $ , with characters indexed $ 1 $ through $ n $ . He asks you $ q $ queries. In the $ i $ -th query you should compute and print the ugliness of a substring (continuous subsequence) of $ s $ starting at the index $ a_{i} $ and ending at the index $ b_{i} $ (inclusive).",
    "inputFormat": "The first line of the input contains two integers $ n $ and $ q $ ( $ 4<=n<=200000 $ , $ 1<=q<=200000 $ ) \u2014 the length of the string $ s $ and the number of queries respectively.\n\nThe second line contains a string $ s $ of length $ n $ . Every character is one of digits '0'\u2013'9'.\n\nThe $ i $ -th of next $ q $ lines contains two integers $ a_{i} $ and $ b_{i} $ ( $ 1<=a_{i}<=b_{i}<=n $ ), describing a substring in the $ i $ -th query.",
    "outputFormat": "For each query print the ugliness of the given substring.",
    "samples": [
        [
            "8 3\n20166766\n1 8\n1 7\n2 8\n",
            "4\n3\n-1\n"
        ],
        [
            "15 5\n012016662091670\n3 4\n1 14\n4 15\n1 13\n10 15\n",
            "-1\n2\n1\n-1\n-1\n"
        ],
        [
            "4 2\n1234\n2 4\n1 2\n",
            "-1\n-1\n"
        ]
    ],
    "hint": "In the first sample:\n\n- In the first query, $ ugliness( $ \"20166766\" $ )=4 $ because all four sixes must be removed.\n- In the second query, $ ugliness( $ \"2016676\" $ )=3 $ because all three sixes must be removed.\n- In the third query, $ ugliness( $ \"0166766\" $ )=-1 $ because it's impossible to remove some digits to get a nice string.\n\nIn the second sample:\n\n- In the second query, $ ugliness( $ \"01201666209167\" $ )=2 $ . It's optimal to remove the first digit '2' and the last digit '6', what gives a string \"010166620917\", which is nice.\n- In the third query, $ ugliness( $ \"016662091670\" $ )=1 $ . It's optimal to remove the last digit '6', what gives a nice string \"01666209170\".",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\n\u5b9a\u4e49\u4e00\u4e2a\u6570\u5b57\u4e32\u6ee1\u8db3\u6027\u8d28$nice$\u5f53\u4e14\u4ec5\u5f53\uff1a\u8be5\u4e32\u5305\u542b\u5b50\u5e8f\u5217$2017$\uff0c\u4e14\u4e0d\u5305\u542b\u5b50\u5e8f\u5217$2016$\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u6570\u5b57\u4e32\u7684\u51fd\u6570$ugliness$\u4e3a\uff1a\u8be5\u4e32\u81f3\u5c11\u5220\u53bb\u51e0\u4e2a\u5b57\u7b26\uff0c\u53ef\u4ee5\u4f7f\u5f97\u5269\u4f59\u4e32\u6ee1\u8db3\u6027\u8d28$nice$\uff1b\u5982\u679c\u8be5\u4e32\u6ca1\u6709\u6ee1\u8db3\u6027\u8d28$nice$\u7684\u5b50\u5e8f\u5217\uff0c\u5219\u8be5\u4e32\u7684$ugliness$\u662f$-1$\u3002\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5b57\u7b26\u4e32$t$\uff0c\u548c$q$\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7528$(l,r)$\u8868\u793a\u3002\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u56de\u7b54$ugliness(t[l,r])$\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n### \u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570$n,q$ \uff0c\u5176\u4e2d$n$\u662f\u5b57\u7b26\u4e32$s$\u7684\u957f\u5ea6\uff0c$q$\u662f\u8be2\u95ee\u7684\u4e2a\u6570\u3002\n\n\u7b2c\u4e8c\u884c\u8f93\u5165\u5b8c\u5168\u7531\u5341\u8fdb\u5236\u6570\u5b57\u7ec4\u6210\u7684\u5b57\u7b26\u4e32$s$\u3002\n\n\u63a5\u4e0b\u6765\u7684$n$\u884c\uff0c\u6bcf\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570$l,r$\uff0c\u63cf\u8ff0\u4e00\u4e2a\u8be2\u95ee\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa\u4e00\u884c\u7b54\u6848\u3002\n\n### \u6570\u636e\u8303\u56f4\uff1a\n\n$$ 4 \\leq n \\leq 200000,1 \\leq q \\leq 200000,1 \\leq l \\leq r \\leq n $$"
}