{
    "description": "There is a toy building consisting of $ n $ towers. Each tower consists of several cubes standing on each other. The $ i $ -th tower consists of $ h_i $ cubes, so it has height $ h_i $ .\n\nLet's define operation slice on some height $ H $ as following: for each tower $ i $ , if its height is greater than $ H $ , then remove some top cubes to make tower's height equal to $ H $ . Cost of one \"slice\" equals to the total number of removed cubes from all towers.\n\nLet's name slice as good one if its cost is lower or equal to $ k $ ( $ k \\ge n $ ).\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1065C/658a593f32bf5073d4f1a1a7bd7987feaeb4f838.png)Calculate the minimum number of good slices you have to do to make all towers have the same height. Of course, it is always possible to make it so.",
    "inputFormat": "The first line contains two integers $ n $ and $ k $ ( $ 1 \\le n \\le 2 \\cdot 10^5 $ , $ n \\le k \\le 10^9 $ ) \u2014 the number of towers and the restriction on slices, respectively.\n\nThe second line contains $ n $ space separated integers $ h_1, h_2, \\dots, h_n $ ( $ 1 \\le h_i \\le 2 \\cdot 10^5 $ ) \u2014 the initial heights of towers.",
    "outputFormat": "Print one integer \u2014 the minimum number of good slices you have to do to make all towers have the same heigth.",
    "samples": [
        [
            "5 5\n3 1 2 2 4\n",
            "2\n"
        ],
        [
            "4 5\n2 3 4 5\n",
            "2\n"
        ]
    ],
    "hint": "In the first example it's optimal to make $ 2 $ slices. The first slice is on height $ 2 $ (its cost is $ 3 $ ), and the second one is on height $ 1 $ (its cost is $ 4 $ ).",
    "translation": "\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217\u3002\n\n\u5b9a\u4e49\u5207\u5272\u64cd\u4f5c\u4e3a\u628a\u5e8f\u5217\u4e2d\u6240\u6709\u5927\u4e8e\u7b49\u4e8e$H$\uff08\u81ea\u5b9a\u4e49\uff09\u7684\u6570\u53d8\u4e3a$H$\uff0c\u5b9a\u4e49\u5176\u4ee3\u4ef7\u4e3a\u64cd\u4f5c\u524d\u540e\u5e8f\u5217\u4e2d\u6240\u6709\u6570\u7684\u53d8\u5316\u91cf\u7684\u548c\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u201c\u597d\u7684\u201d\u5207\u5272\u64cd\u4f5c\u4e3a\u4ee3\u4ef7\u5c0f\u4e8e\u7b49\u4e8eK\u7684\u64cd\u4f5c\u3002\n\n\u95ee\u81f3\u5c11\u9700\u8981\u591a\u5c11\u6b21\u201c\u597d\u7684\u201d\u5207\u5272\u64cd\u4f5c\u624d\u53ef\u4ee5\u4f7f\u5e8f\u5217\u4e2d\u7684\u6240\u6709\u6570\u7684\u5927\u5c0f\u5747\u76f8\u7b49\u3002"
}