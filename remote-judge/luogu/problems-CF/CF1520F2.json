{
    "description": "This is an interactive problem.\n\nThis is a hard version of the problem. The difference from the easy version is that in the hard version $ 1 \\le t \\le \\min(n, 10^4) $ and the total number of queries is limited to $ 6 \\cdot 10^4 $ .\n\nPolycarp is playing a computer game. In this game, an array consisting of zeros and ones is hidden. Polycarp wins if he guesses the position of the $ k $ -th zero from the left $ t $ times.\n\nPolycarp can make no more than $ 6 \\cdot 10^4 $ requests totally of the following type:\n\n- ? $ l $ $ r $ \u2014 find out the sum of all elements in positions from $ l $ to $ r $ ( $ 1 \\le l \\le r \\le n $ ) inclusive.\n\nTo make the game more interesting, each guessed zero turns into one and the game continues on the changed array. More formally, if the position of the $ k $ -th zero was $ x $ , then after Polycarp guesses this position, the $ x $ -th element of the array will be replaced from $ 0 $ to $ 1 $ .\n\nHelp Polycarp win the game.",
    "inputFormat": "",
    "outputFormat": "First, your program must read two integers $ n $ and $ t $ ( $ 1 \\le n \\le 2 \\cdot 10^5 $ , $ 1 \\le t \\le \\min(n, 10^4) $ ).\n\nThen $ t $ lines follow, each of which contains one integer $ k $ ( $ 1 \\le k \\le n $ ). It is guaranteed that at the moment of the request the array contains at least $ k $ zeros. In order to get the next value of $ k $ , you must output the answer for the previous value of $ k $ .\n\nAfter that, you can make no more than $ 6 \\cdot 10^4 $ requests in total.\n\nUse the following format to output the answer (it is not a request, it doesn't count in $ 6 \\cdot 10^4 $ ):\n\n- ! $ x $ \u2014 position of the $ k $ -th zero.\n\nPositions in the array are numbered from left to right from $ 1 $ to $ n $ inclusive.\n\nAfter printing $ t $ answers, your program should exit immediately.\n\nIn this task, the interactor is not adaptive. This means that within the same test, the hidden array and the queries do not change.\n\nIn case of an incorrect query, -1 will be displayed. When this value is received, your program must immediately exit normally (for example, by calling exit(0)), otherwise, the testing system may issue an arbitrary verdict.\n\nIf the number of requests is exceeded, the verdict wrong answer will be displayed.\n\nYour solution may get the verdict Idleness limit exceeded if you don't print anything or forget to flush the output buffer.\n\nTo flush the output buffer, you need to do the following immediately after the query output and the end-of-line character:\n\n- fflush(stdout) or cout.flush() in C ++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nUse the following format for hacks:\n\nOn the first line print the string $ s $ ( $ 1 \\le |s| \\le 2 \\cdot 10^5 $ ), consisting of zeros and ones, and an integer $ t $ ( $ 1 \\le t \\le \\min(|s|, 10^4) $ ) \u2014 hidden array and number of requests, respectively. In the next $ t $ lines output the number $ k $ ( $ 1 \\le k \\le |s| $ ).\n\nThe hacked solution will not have direct access to the hidden array.",
    "samples": [
        [
            "6 2\n\n2\n\n2\n\n1\n\n1\n\n0\n\n1\n\n0",
            "? 4 6\n\n? 1 1\n\n? 1 2\n\n? 5 5\n\n! 5\n\n? 2 2\n\n! 2"
        ]
    ],
    "hint": "In the first test, the array $ [1, 0, 1, 1, 0, 1] $ is hidden. After answering the query $ k=2 $ , the array changed to $ [1, 0, 1, 1, 1, 1] $ .",
    "translation": "# Guess the K-th Zero (Hard version)\n\n## \u9898\u76ee\u63cf\u8ff0\n\n**\u63d0\u793a: \u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898**.\n\n\u6570\u636e\u52a0\u5f3a\u529b! \u4e0e\u7b80\u5316\u7248\u76f8\u6bd4, \u73b0\u5728\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5de8\u5927, $ 1 \\le t \\le \\min(n, 10^4) $ , \u800c\u4e14\u4f60\u7684\u8be2\u95ee\u6b21\u6570\u4e0d\u5f97\u8d85\u8fc7 $ 6 \\cdot 10^4 $ .\n\n\u82cf\u82cf\u6b63\u5728\u6253\u7535\u52a8. \u5979\u73a9\u7684\u6e38\u620f\u91cc, \u6709\u67d0\u4e2a\u957f\u5ea6\u56fa\u5b9a\u7684 $0,1$ \u5e8f\u5217. \u82cf\u82cf\u9700\u8981\u5728\u63a5\u4e0b\u6765\u7684 $t$ \u6b21\u64cd\u4f5c\u4e2d\u731c\u5bf9\u4ece\u5de6\u5230\u53f3\u7b2c $k$ \u4e2a $0$ \u7684\u4f4d\u7f6e.\n\n\u82cf\u82cf\u6700\u591a\u53ef\u4ee5\u505a $ 6 \\cdot 10^4 $ \u6b21\u67e5\u8be2, \u8be2\u95ee\u4f1a\u8fd4\u56de\u4e00\u6bb5\u533a\u95f4\u548c, \u5177\u4f53\u65b9\u5f0f\u89c1\u8f93\u51fa\u683c\u5f0f.\n\n\u4e3a\u4e86\u8ba9\u6e38\u620f\u66f4\u52a0\u4e00\u9897\u8d5b\u8247, \u6bcf\u6b21**\u731c\u5230\u7684 $0$ \u90fd\u4f1a\u53d8\u6210 $1$ **, \u7136\u540e\u6e38\u620f\u4f1a\u5728\u4fee\u6539\u540e\u7684\u5e8f\u5217\u4e0a\u7ee7\u7eed\u8fdb\u884c. \u6362\u53e5\u8bdd\u8bf4, \u5982\u679c\u7b2c $ k $  \u4e2a $0$ \u7684\u4f4d\u7f6e\u662f $ x $ , \u82cf\u82cf\u731c\u8fc7\u4e86\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u540e, \u5e8f\u5217\u4e0a\u7b2c  $ x $  \u4e2a\u5143\u7d20\u5c31\u4ece $ 0 $ \u53d8\u6210 $ 1 $ \u4e86 .\n\n\u8bf7\u5e2e\u5e2e\u82cf\u82cf , \u8ba9\u5979\u83b7\u80dc, \u5979\u4f1a\u8bf7\u4f60\u75af\u72c2\u661f\u671f\u56db.\n\n## \u8f93\u5165\u683c\u5f0f\n\n\u4ea4\u4e92\u9898, \u770b\u8f93\u51fa\u683c\u5f0f\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\u9996\u5148, \u4f60\u5f97\u8bfb\u5165\u4fe9\u6574\u6570, \u5e8f\u5217\u957f\u5ea6 $ n $  \u548c\u64cd\u4f5c\u6b21\u6570  $ t $ ( $ 1 \\le n \\le 2 \\cdot 10^5 $ , $ 1 \\le t \\le \\min(n, 10^4) $ ).\n\n\u63a5\u4e0b\u6765\u7684 $ t $ \u8f6e\u64cd\u4f5c, \u6bcf\u4e00\u6b21\u5148\u8bfb\u5165\u6574\u6570 $ k $ ( $ 1 \\le k \\le n $ ). \u6570\u636e\u4fdd\u8bc1\u5e8f\u5217\u4e2d\u6b64\u65f6\u81f3\u5c11\u6709 $k$  \u4e2a $0$ . \n\n\u7136\u540e\u4f60\u53ef\u4ee5\u505a\u4e00\u4e9b\u8be2\u95ee, \u4f46\u662f\u6ce8\u610f, \u4f60\u7684\u6574\u4e2a\u7a0b\u5e8f\u7684**\u8be2\u95ee\u6b21\u6570\u4e4b\u548c\u4e0d\u80fd\u8d85\u8fc7** $ 6 \\cdot 10^4 $ \u6b21.\n\n\u8be2\u95ee\u5f62\u5982:\n\n- `? l r`  \u4ea4\u4e92\u5e93\u4f1a\u8fd4\u56de $[l,r] $ \u5143\u7d20\u7684\u548c $ ( $ $1 \\le l \\le r \\le n $ ) .\n\n\u4f60\u89c9\u5f97\u4f60\u8fd9\u628a\u7a33\u4e86\u4e4b\u540e\u4f60\u5c31\u53ef\u4ee5\u8f93\u51fa\u672c\u8f6e\u64cd\u4f5c\u7684\u7b54\u6848\u4e86.\n\n**\u6ce8\u610f: \u4f60\u9700\u8981\u8f93\u51fa\u524d\u4e00\u4e2a\u64cd\u4f5c\u7684\u7b54\u6848\u624d\u80fd\u5f97\u5230\u4e0b\u4e00\u4e2a $ k $ \u7684\u503c.**\n\n\u56de\u7b54\u5f62\u5982:\n\n- `! x`  \u8868\u793a\u56de\u7b54\u7b2c $ k $  \u4e2a $0$ \u7684\u4f4d\u7f6e\u662f $x$ .\n\n\u8f93\u51fa\u7b54\u6848\u4e0d\u4f1a\u7b97\u8fdb\u4f60\u7684\u8be2\u95ee\u6b21\u6570\u91cc:\n\n**\u89c4\u5b9a\u4f4d\u7f6e\u4e3a\u4ece\u5de6\u5230\u53f3\u7684 $ 1 $ \u5230 $ n $** .\n\n$t$ \u6b21\u64cd\u4f5c\u90fd\u7ed3\u675f\u4e4b\u540e, \u4f60\u9700\u8981**\u9a6c\u4e0a\u6b63\u5e38\u9000\u51fa\u7a0b\u5e8f**.\n\n\u6d4b\u8bd5\u70b9\u7684\u6570\u636e\u662f\u56fa\u5b9a\u7684.\n\n\u5982\u679c\u4f60\u67d0\u6b21\u56de\u7b54\u9519\u4e86, \u4f60\u4f1a\u6536\u5230\u4ea4\u4e92\u5e93\u7ed9\u4f60\u7684\u4fe1\u53f7 $-1$ , \u6b64\u65f6\u4f60\u5e94\u8be5**\u9a6c\u4e0a\u7a0b\u6b63\u5e38\u9000\u51fa\u5e8f**, \u8981\u4e0d\u7136\u4ea4\u4e92\u5e93\u53ef\u80fd\u4f1a\u7ed9\u4f60\u70b9\u597d\u679c\u6c41\u5403.\n\n\u5982\u679c\u4f60\u8be2\u95ee\u592a\u591a, \u540c\u7406.\n\n**\u6ce8\u610f: \u8bf7\u968f\u65f6\u5237\u65b0\u8f93\u51fa\u7f13\u51b2\u533a, \u4fdd\u8bc1\u4ea4\u4e92\u5e93\u53ef\u4ee5\u6b63\u786e\u5f97\u5230\u4f60\u7684\u56de\u7b54\u6216\u8005\u8be2\u95ee.**\n\n\u5237\u65b0\u65b9\u6cd5\u5982\u4e0b:\n\n- `fflush(stdout)` or `cout.flush()` in C ++;\n- `System.out.flush()` in Java;\n- `flush(output)` in Pascal;\n- `stdout.flush()` in Python;\n- \u6ca1\u6709\u4e3e\u4f8b\u7684\u8bed\u8a00, ~~\u8bfb\u8005\u81ea\u67e5\u8d44\u6599\u4e0d\u96be~~.\n\n### \u5173\u4e8eHack\u65b9\u5f0f\n\n\u683c\u5f0f\u6709\u9650\u5236:\n\n\u7b2c\u4e00\u884c\u4f60\u5148\u7ed9\u51fa\u4f60\u7684\u4e32 $ s $ ( $ 1 \\le |s| \\le 2 \\cdot 10^5 $ ), \u53ea\u80fd\u662f $0,1$ \u4e32, \u518d\u7ed9\u51fa\u4e00\u4e2a\u6574\u6570 $ t $ ( $ 1 \\le t \\le \\min(|s|, 10^4) $ ) \n\n\u63a5\u4e0b\u6765 $ t $ \u884c\u7ed9\u51fa\u4f60\u7684 $ k $ ( $ 1 \\le k \\le |s| $ ).\n\n\u88abHack\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u76f4\u63a5\u5f97\u5230\u4f60\u8fd9\u4e2a\u4e32."
}