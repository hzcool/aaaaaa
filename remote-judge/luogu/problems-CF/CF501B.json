{
    "description": "Misha hacked the Codeforces site. Then he decided to let all the users change their handles. A user can now change his handle any number of times. But each new handle must not be equal to any handle that is already used or that was used at some point.\n\nMisha has a list of handle change requests. After completing the requests he wants to understand the relation between the original and the new handles of the users. Help him to do that.",
    "inputFormat": "The first line contains integer $ q $ ( $ 1<=q<=1000 $ ), the number of handle change requests.\n\nNext $ q $ lines contain the descriptions of the requests, one per line.\n\nEach query consists of two non-empty strings $ old $ and $ new $ , separated by a space. The strings consist of lowercase and uppercase Latin letters and digits. Strings $ old $ and $ new $ are distinct. The lengths of the strings do not exceed $ 20 $ .\n\nThe requests are given chronologically. In other words, by the moment of a query there is a single person with handle $ old $ , and handle $ new $ is not used and has not been used by anyone.",
    "outputFormat": "In the first line output the integer $ n $ \u2014 the number of users that changed their handles at least once.\n\nIn the next $ n $ lines print the mapping between the old and the new handles of the users. Each of them must contain two strings, $ old $ and $ new $ , separated by a space, meaning that before the user had handle $ old $ , and after all the requests are completed, his handle is $ new $ . You may output lines in any order.\n\nEach user who changes the handle must occur exactly once in this description.",
    "samples": [
        [
            "5\nMisha ILoveCodeforces\nVasya Petrov\nPetrov VasyaPetrov123\nILoveCodeforces MikeMirzayanov\nPetya Ivanov\n",
            "3\nPetya Ivanov\nMisha MikeMirzayanov\nVasya VasyaPetrov123\n"
        ]
    ],
    "hint": "",
    "translation": "\u767d\u9762\u9e2e\u5728\u7ef4\u62a4\u7f57\u5fb7\u5c9b\u7684\u5e72\u5458\u6570\u636e\u5e93\u3002\u5176\u4e2d\u6709\u4e9b\u5e72\u5458\u591a\u6b21\u6539\u53d8\u59d3\u540d\uff0c\u767d\u9762\u9e2e\u60f3\u77e5\u9053\u5e72\u5458\u6700\u521d\u7684\u59d3\u540d\u548c\u5f53\u524d\u7684\u59d3\u540d\uff08\u5e72\u5458\u53ef\u591a\u6b21\u6539\u540d\uff09\u3002\u8bf7\u60a8\u5e2e\u52a9\u5979\u3002\r\n\r\ninput\r\n\u4e00\u884cn\uff0c\u8868\u793a\u6709n\u6b21\u4fee\u6539\u64cd\u4f5c(1<=n<=1000)\r\n\u63a5\u4e0b\u6765n\u884c\uff0c\u6bcf\u884c2\u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8fc720\uff0c\u4ee5\u7a7a\u683c\u76f8\u9694\u3002\r\n\r\noutput\r\n\u4e00\u884c\uff0c\u8f93\u51fa\u6709m\u4e2a\u5e72\u5458\uff08\u8f93\u51fa\u987a\u5e8f\u4efb\u610f\uff09\r\n\u63a5\u4e0b\u6765m\u884c\uff0c\u6bcf\u884c2\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u5e72\u5458\u6700\u521d\u59d3\u540d\u548c\u5f53\u524d\u59d3\u540d\u3002"
}