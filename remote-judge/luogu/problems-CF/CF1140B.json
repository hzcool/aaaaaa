{
    "description": "You have a string $ s $ of length $ n $ consisting of only characters > and <. You may do some operations with this string, for each operation you have to choose some character that still remains in the string. If you choose a character >, the character that comes right after it is deleted (if the character you chose was the last one, nothing happens). If you choose a character <, the character that comes right before it is deleted (if the character you chose was the first one, nothing happens).\n\nFor example, if we choose character > in string > > < >, the string will become to > > >. And if we choose character < in string > <, the string will become to <.\n\nThe string is good if there is a sequence of operations such that after performing it only one character will remain in the string. For example, the strings >, > > are good.\n\nBefore applying the operations, you may remove any number of characters from the given string (possibly none, possibly up to $ n - 1 $ , but not the whole string). You need to calculate the minimum number of characters to be deleted from string $ s $ so that it becomes good.",
    "inputFormat": "The first line contains one integer $ t $ ( $ 1 \\le t \\le 100 $ ) \u2013 the number of test cases. Each test case is represented by two lines.\n\nThe first line of $ i $ -th test case contains one integer $ n $ ( $ 1 \\le n \\le 100 $ ) \u2013 the length of string $ s $ .\n\nThe second line of $ i $ -th test case contains string $ s $ , consisting of only characters > and <.",
    "outputFormat": "For each test case print one line.\n\nFor $ i $ -th test case print the minimum number of characters to be deleted from string $ s $ so that it becomes good.",
    "samples": [
        [
            "3\n2\n&lt;&gt;\n3\n&gt;&lt;&lt;\n1\n&gt;\n",
            "1\n0\n0\n"
        ]
    ],
    "hint": "In the first test case we can delete any character in string <>.\n\nIn the second test case we don't need to delete any characters. The string > < < is good, because we can perform the following sequence of operations: > < < $ \\rightarrow $ < < $ \\rightarrow $ <.",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\r\n\r\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a$n(1<=n<=100)$\u7684\u5b57\u7b26\u4e32\uff0c\u53ea\u7531<,>\u4e24\u79cd\u5b57\u7b26\u7ec4\u6210\u3002\u5bf9\u5176\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u5982\u4e0b\uff1a\r\n\r\n\r\n------------\r\n\r\n\u5982\u679c\u9009\u62e9\u4e00\u4e2a>\u5b57\u7b26\uff0c\u8fd9\u4e2a\u5b57\u7b26**\u53f3\u9762**\u7684\u90a3\u4e00\u4e2a\u5b57\u7b26\u4f1a\u88ab\u5220\u9664\u3002\u7279\u522b\u5730\uff0c\u5982\u679c\u4f60\u9009\u62e9\u7684\u8fd9\u4e2a\u5b57\u7b26>\u4f4d\u4e8e\u5b57\u7b26\u4e32\u7684\u6700\u53f3\u4fa7\uff0c\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u53d1\u751f\u3002\u540c\u7406\uff0c\u5982\u679c\u9009\u62e9\u4e00\u4e2a<\u5b57\u7b26\uff0c\u8fd9\u4e2a\u5b57\u7b26**\u5de6\u9762**\u7684\u90a3\u4e00\u4e2a\u5b57\u7b26\u4f1a\u88ab\u5220\u9664\uff0c\u9009\u62e9\u4f4d\u4e8e\u5b57\u7b26\u4e32\u6700\u5de6\u8fb9\u7684<\u5b57\u7b26\u4e5f\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u53d1\u751f\u3002\r\n\r\n\r\n------------\r\n\r\n\u5b9a\u4e49\u4e00\u4e0b\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u201c\u597d\u7684\u201d\uff1a\u7ecf\u8fc7\u82e5\u5e72\u6b21\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u53ea\u542b\u6709\u4e00\u79cd\u5b57\u7b26\uff0c\u5982>,>>\u7b49\u3002\r\n\r\n\u5728\u6267\u884c\u64cd\u4f5c\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u5220\u53bb\u5b57\u7b26\u4e32\u4e2d\u7684$k(0<=k<=n-1)$$\u4e2a\u5b57\u7b26\u3002\u6ce8\u610f\u4e0d\u53ef\u4ee5\u628a\u6574\u4e2a\u5b57\u7b26\u4e32\u90fd\u5220\u53bb\u4e86\u3002\r\n\r\n\u4f60\u9700\u8981\u627e\u51fa$k$\u7684\u6700\u5c0f\u503c\uff0c\u4f7f\u5f97\u5220\u53bb$k$\u4e2a\u5b57\u7b26\u540e\u7684\u5b57\u7b26\u4e32\u662f\u201c\u597d\u7684\u201d\u3002\r\n\r\n### \u8f93\u5165\u683c\u5f0f\r\n\r\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570$t(1<=t<=100)$\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002\r\n\r\n\u63a5\u4e0b\u6765\u6709$2t$\u884c\uff0c\u6bcf$2$\u884c\u8868\u793a\u4e00\u7ec4\u6570\u636e\uff1a\r\n\r\n\u7b2c$i$\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570$n$\uff0c\u8868\u793a\u5b57\u7b26\u4e32\u957f\u5ea6\uff1b\r\n\r\n\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u53ea\u542b\u6709\u5b57\u7b26<\u548c>\u7684\u5b57\u7b26\u4e32$s$\u3002\r\n\r\n### \u8f93\u51fa\u683c\u5f0f\r\n\r\n\u8f93\u51fa\u5171$t$\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5220\u53bb\u5b57\u7b26\u6570\u91cf\u7684\u6700\u5c0f\u503c\uff0c\u4f7f\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u662f\u201c\u597d\u7684\u201d\u3002\r\n\r\n### \u8f93\u5165\u8f93\u51fa\u6837\u4f8b\r\n\r\n\u8f93\u5165\uff1a\r\n\r\n```cpp\r\n3\r\n2\r\n<>\r\n3\r\n><<\r\n1\r\n>\r\n```\r\n\r\n\u8f93\u51fa\uff1a\r\n\r\n```cpp\r\n1\r\n0\r\n0\r\n```\r\n### \u6837\u4f8b\u8bf4\u660e\r\n\r\n\u7b2c\u4e00\u7ec4\u6570\u636e\u4e2d\uff0c\u5220\u9664\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u90fd\u53ef\u4ee5\u4f7f\u5f97\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u662f\u201c\u597d\u7684\u201d\u3002\r\n\r\n\u7b2c\u4e8c\u7ec4\u6570\u636e\u4e2d\uff0c\u539f\u5b57\u7b26\u4e32\u5c31\u662f\u201c\u597d\u7684\u201d\uff0c\u65e0\u9700\u5220\u9664\u4efb\u4f55\u5b57\u7b26\u3002"
}