{
    "description": "Let's consider a network printer that functions like that. It starts working at time 0. In each second it can print one page of a text. At some moments of time the printer receives printing tasks. We know that a printer received $ n $ tasks. Let's number the tasks by consecutive integers from 1 to $ n $ . Then the task number $ i $ is characterised by three integers: $ t_{i} $ is the time when the task came, $ s_{i} $ is the task's volume (in pages) and $ p_{i} $ is the task's priority. The priorities of all tasks are distinct.\n\nWhen the printer receives a task, the task goes to the queue and remains there until all pages from this task are printed. The printer chooses a page to print each time when it either stops printing some page or when it is free and receives a new task. Among all tasks that are in the queue at this moment, the printer chooses the task with the highest priority and next second prints an unprinted page from this task. You can assume that a task goes to the queue immediately, that's why if a task has just arrived by time $ t $ , the printer can already choose it for printing.\n\nYou are given full information about all tasks except for one: you don't know this task's priority. However, we know the time when the last page from this task was finished printing. Given this information, find the unknown priority value and determine the moments of time when the printer finished printing each task.",
    "inputFormat": "The first line contains integer $ n $ ( $ 1<=n<=50000 $ ). Next $ n $ lines describe the tasks. The $ i $ -th of these lines contains three integers $ t_{i} $ , $ s_{i} $ and $ p_{i} $ , separated by single spaces ( $ 0<=t_{i}<=10^{9},1<=s_{i},p_{i}<=10^{9} $ ). Exactly one task (let's assume that his number is $ x $ ) has number -1 written instead of the priority. All priorities are different. The last line contains integer $ T $ \u2014 the time when the printer finished printing the last page of task $ x $ ( $ 1<=T<=10^{15} $ ). Numbers $ t_{i} $ are not necessarily distinct. The tasks in the input are written in the arbitrary order.",
    "outputFormat": "In the first line print integer $ p_{x} $ \u2014 the priority of the task number $ x $ ( $ 1<=p_{x}<=10^{9} $ , remember that all priorities should be distinct). Then print $ n $ integers, the $ i $ -th of them represents the moment of time when the last page of the task number $ i $ finished printing.\n\nIt is guaranteed that at least one solution exists. If there are multiple solutions, print any of them.",
    "samples": [
        [
            "3\n4 3 -1\n0 2 2\n1 3 3\n7\n",
            "4\n7 8 4\n"
        ],
        [
            "3\n3 1 2\n2 3 3\n3 1 -1\n4\n",
            "4\n7 6 4\n"
        ]
    ],
    "hint": "Let's consider the first test case. Let's assume that the unknown priority equals 4, then the printer's actions for each second are as follows:\n\n- the beginning of the 1-st second (time 0). The queue has task 2. The printer prints the first page of this task;\n- the beginning of the 2-nd second (time 1). The queue has tasks 2 and 3. The printer prints the first page of task 3;\n- the beginning of the 3-rd second (time 2). The queue has tasks 2 and 3. The printer prints the second page of task 3;\n- the beginning of the 4-th second (time 3). The queue has tasks 2 and 3. The printer prints the third (last) page of task 3. Thus, by the end of the 4-th second this task will have been printed;\n- the beginning of the 5-th second (time 4). The queue has tasks 2 and 1. The printer prints the first page of task 1;\n- the beginning of the 6-th second (time 5). The queue has tasks 2 and 1. The printer prints the second page of task 1;\n- the beginning of the 7-th second (time 6). The queue has tasks 2 and 1. The printer prints the third (last) page of task 1. Thus, by the end of the 7-th second this task will have been printed;\n- the beginning of the 8-th second (time 7). The queue has task 2. The printer prints the second (last) page of task 2. Thus, by the end of the 8-th second this task will have been printed.\n\nIn the end, task number 1 will have been printed by the end of the 7-th second, as was required. And tasks 2 and 3 are printed by the end of the of the 8-th and the 4-th second correspondingly.",
    "translation": "$ n$ \u4e2a\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u7ed9\u51fa $ t_i,s_i,p_i$,\u5206\u522b\u8868\u793a\uff0c\u5f00\u59cb\u65f6\u95f4\uff0c\u6240\u9700\u8017\u65f6\u548c\u4f18\u5148\u7ea7\uff0c\u5176\u4e2d\u4f18\u5148\u7ea7\u5404\u4e0d\u76f8\u540c \n\n\u6709\u4e00\u4e2a\u6253\u5370\u673a\uff0c\u6bcf\u4e2a\u65f6\u523b\u4f1a\u4ece\u5df2\u7ecf\u5f00\u59cb\u7684\u4efb\u52a1\u4e2d\u9009\u4e00\u4e2a\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4efb\u52a1\u82b1\u8d39\u65f6\u95f4\u5b9e\u73b0\uff0c\u73b0\u5728\u6070\u597d\u6709\u4e00\u4e2a\u4efb\u52a1\u4e0d\u77e5\u9053\u4f18\u5148\u7ea7\uff0c\u4f46\u4f60\u77e5\u9053\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u7684\u65f6\u523b\uff0c\u6c42\u51fa\u8fd9\u4e2a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u548c\u5176\u4ed6\u6240\u6709\u4efb\u52a1\u7684\u5b8c\u6210\u65f6\u95f4\n\n\u672c\u9898\u9700\u8981\u6587\u4ef6\u8f93\u5165\u8f93\u51fa\u3002\u8f93\u5165\u6587\u4ef6\u540d\u662f input.txt\uff0c\u8f93\u51fa\u6587\u4ef6\u540d\u662f output.txt\n\nTranslated by Fheiwn"
}