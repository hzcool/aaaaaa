{
    "description": "This is an interactive problem.\n\nAyush devised yet another scheme to set the password of his lock. The lock has $ n $ slots where each slot can hold any non-negative integer. The password $ P $ is a sequence of $ n $ integers, $ i $ -th element of which goes into the $ i $ -th slot of the lock.\n\nTo set the password, Ayush comes up with an array $ A $ of $ n $ integers each in the range $ [0, 2^{63}-1] $ . He then sets the $ i $ -th element of $ P $ as the [bitwise OR](https://en.wikipedia.org/wiki/Bitwise_operation#OR) of all integers in the array except $ A_i $ .\n\nYou need to guess the password. To make a query, you can choose a non-empty subset of indices of the array and ask the bitwise OR all elements of the array with index in this subset. You can ask no more than 13 queries.",
    "inputFormat": "The first line of input contains one integer $ n $ $ (2 \\le n \\le 1000) $ \u2014 the number of slots in the lock.",
    "outputFormat": "To ask a query print a single line:\n\n- In the beginning print \"? c \" (without quotes) where $ c $ $ (1 \\leq c \\leq n) $ denotes the size of the subset of indices being queried, followed by $ c $ distinct space-separated integers in the range $ [1, n] $ .\n\nFor each query, you will receive an integer $ x $ \u2014 the bitwise OR of values in the array among all the indices queried. If the subset of indices queried is invalid or you exceeded the number of queries then you will get $ x = -1 $ . In this case, you should terminate the program immediately.\n\nWhen you have guessed the password, print a single line \"! \" (without quotes), followed by $ n $ space-separated integers \u2014 the password sequence.\n\nGuessing the password does not count towards the number of queries asked.\n\nThe interactor is not adaptive. The array $ A $ does not change with queries.\n\nAfter printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nTo hack the solution, use the following test format:\n\nOn the first line print a single integer $ n $ $ (2 \\le n \\le 1000) $ \u2014 the number of slots in the lock. The next line should contain $ n $ space-separated integers in the range $ [0, 2^{63} - 1] $ \u2014 the array $ A $ .",
    "samples": [
        [
            "3\n\n1\n\n2\n\n4",
            "? 1 1\n\n? 1 2\n\n? 1 3\n\n! 6 5 3"
        ]
    ],
    "hint": "The array $ A $ in the example is $ \\{{1, 2, 4\\}} $ . The first element of the password is bitwise OR of $ A_2 $ and $ A_3 $ , the second element is bitwise OR of $ A_1 $ and $ A_3 $ and the third element is bitwise OR of $ A_1 $ and $ A_2 $ . Hence the password sequence is $ \\{{6, 5, 3\\}} $ .",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\u672c\u9898\u662f**\u4ea4\u4e92\u9898**\u3002\n\n\u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u7ec4 $A$\uff0c\u540c\u65f6\u901a\u8fc7\u6570\u7ec4 $A$ \u6784\u9020\u51fa\u6570\u7ec4 $P$\uff0c\u5177\u4f53\u6765\u8bb2\uff0c$P_i$ \u662f $A$ \u4e2d\u9664 $A_i$ \u5916\u7684\u6240\u6709\u5143\u7d20\u7684\u6309\u4f4d\u6216\u3002\n\n\u4f60\u9700\u8981\u5728\u6700\u591a $13$ \u6b21\u8be2\u95ee\u4e2d\u5f97\u5230\u6700\u540e\u7684 $P$ \u6570\u7ec4\u3002\n### \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6b63\u6574\u6570 $n$\uff0c\u8868\u793a\u6570\u7ec4 $A$ \u7684\u957f\u5ea6\u3002\n\n\u4fdd\u8bc1 $2\\le n\\le10^3$\uff0c$0\\le A_i\\le2^{63}-1$\u3002\n### \u4ea4\u4e92\u683c\u5f0f\n\u4f60\u53ef\u4ee5\u6309\u7167 `? c q1 q2 q3 ... qc` \u7684\u683c\u5f0f\u8fdb\u884c\u8be2\u95ee\uff0c\u4e4b\u540e\u4f60\u5c06\u5f97\u5230 $A_{q_1},A_{q_2},\\dots,A_{q_c}$ \u7684\u6309\u4f4d\u6216\u3002  \n\n\u5f53\u4f60\u60f3\u8f93\u51fa $P$ \u6570\u7ec4\u65f6\uff0c\u9996\u5148\u8f93\u51fa\u4e00\u4e2a `!`\uff0c\u4e4b\u540e\u8f93\u51fa $n$ \u4e2a\u6574\u6570 $P_i$\u3002"
}