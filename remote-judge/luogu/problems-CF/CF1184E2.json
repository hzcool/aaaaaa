{
    "description": "After a successful field test, Heidi is considering deploying a trap along some Corridor, possibly not the first one. She wants to avoid meeting the Daleks inside the Time Vortex, so for abundance of caution she considers placing the traps only along those Corridors that are not going to be used according to the current Daleks' plan \u2013 which is to use a minimum spanning tree of Corridors. Heidi knows that all energy requirements for different Corridors are now different, and that the Daleks have a single unique plan which they are intending to use.\n\nYour task is to calculate the number $ E_{max}(c) $ , which is defined in the same way as in the easy version \u2013 i.e., the largest $ e \\le 10^9 $ such that if we changed the energy of corridor $ c $ to $ e $ , the Daleks might use it \u2013 but now for every corridor that Heidi considers.",
    "inputFormat": "The first line: number $ n $ of destinations, number $ m $ of Time Corridors ( $ 2 \\leq n \\leq 10^5 $ , $ n - 1 \\leq m \\leq 10^6 $ ). The next $ m $ lines: destinations $ a $ , $ b $ and energy $ e $ ( $ 1 \\leq a, b \\leq n $ , $ a \\neq b $ , $ 0 \\leq e \\leq 10^9 $ ).\n\nNo pair $ \\{a, b\\} $ will repeat. The graph is guaranteed to be connected. All energy requirements $ e $ are distinct.",
    "outputFormat": "Output $ m-(n-1) $ lines, each containing one integer: $ E_{max}(c_i) $ for the $ i $ -th Corridor $ c_i $ from the input that is not part of the current Daleks' plan (minimum spanning tree).",
    "samples": [
        [
            "3 3\n1 2 8\n2 3 3\n3 1 4\n",
            "4\n"
        ]
    ],
    "hint": "If $ m = n-1 $ , then you need not output anything.",
    "translation": "\u7ed9\u4e00\u5f20\u56fe\uff0c\u5bf9\u4e8e\u6bcf\u6761\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u8be2\u95ee\u53ef\u4ee5\u5c06\u5176\u8fb9\u6743\u4fee\u6539\u7684\u6700\u5927\u503c\uff0c\u4f7f\u5f97\u4fee\u6539\u540e\u8fd9\u6761\u8fb9\u53ef\u4ee5\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a .\n\n\u5982\u679c\u53ef\u4ee5\u4fee\u6539\u4e3a\u4efb\u610f\u5927\u7684\u503c\uff0c\u8f93\u51fa 1e9 ."
}