{
    "description": "This problem is different with hard version only by constraints on total answers length\n\nIt is an interactive problem\n\nVenya joined a tour to the madhouse, in which orderlies play with patients the following game. Orderlies pick a string $ s $ of length $ n $ , consisting only of lowercase English letters. The player can ask two types of queries:\n\n- ? l r \u2013 ask to list all substrings of $ s[l..r] $ . Substrings will be returned in random order, and in every substring, all characters will be randomly shuffled.\n- ! s \u2013 guess the string picked by the orderlies. This query can be asked exactly once, after that the game will finish. If the string is guessed correctly, the player wins, otherwise he loses.\n\nThe player can ask no more than $ 3 $ queries of the first type.\n\nTo make it easier for the orderlies, there is an additional limitation: the total number of returned substrings in all queries of the first type must not exceed $ (n+1)^2 $ .\n\nVenya asked you to write a program, which will guess the string by interacting with the orderlies' program and acting by the game's rules.\n\nYour program should immediately terminate after guessing the string using a query of the second type. In case your program guessed the string incorrectly, or it violated the game rules, it will receive verdict Wrong answer.\n\nNote that in every test case the string is fixed beforehand and will not change during the game, which means that the interactor is not adaptive.",
    "inputFormat": "First line contains number $ n $ ( $ 1 \\le n \\le 100 $ ) \u2014 the length of the picked string.",
    "outputFormat": "You start the interaction by reading the number $ n $ .\n\nTo ask a query about a substring from $ l $ to $ r $ inclusively ( $ 1 \\le l \\le r \\le n $ ), you should output\n\n? l r\n\non a separate line. After this, all substrings of $ s[l..r] $ will be returned in random order, each substring exactly once. In every returned substring all characters will be randomly shuffled.\n\nIn the case, if you ask an incorrect query, ask more than $ 3 $ queries of the first type or there will be more than $ (n+1)^2 $ substrings returned in total, you will receive verdict Wrong answer.\n\nTo guess the string $ s $ , you should output\n\n! s\n\non a separate line.\n\nAfter printing each query, do not forget to flush the output. Otherwise, you will get Idleness limit exceeded. To flush the output, you can use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nIf you received - (dash) as an answer to any query, you need to terminate your program with exit code 0 (for example, by calling exit(0)). This means that there was an error in the interaction protocol. If you don't terminate with exit code 0, you can receive any unsuccessful verdict.\n\nHack format\n\nTo hack a solution, use the following format:\n\nThe first line should contain one integer $ n $ ( $ 1 \\le n \\le 100 $ ) \u2014 the length of the string, and the following line should contain the string $ s $ .",
    "samples": [
        [
            "4\n\na\naa\na\n\ncb\nb\nc\n\nc",
            "? 1 2\n\n? 3 4\n\n? 4 4\n\n! aabc"
        ]
    ],
    "hint": "",
    "translation": "\u672c\u9898\u548c\u56f0\u96be\u7248\u7684\u552f\u4e00\u533a\u522b\u662f\u5b50\u4e32\u603b\u957f\u5ea6\u7684\u9650\u5236\u3002\n\n\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\n\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u901a\u8fc7\u4e24\u79cd\u64cd\u4f5c\u5f97\u5230\u6574\u4e2a\u5b57\u7b26\u4e32\uff1a\n\n- `? l r` \u2014\u2014\u5217\u51fa $s[l\\dots r]$ \u7684\u6240\u6709\u5b50\u4e32\u3002\u5b50\u4e32\u8fd4\u56de\u7684\u987a\u5e8f\u4f1a\u88ab\u968f\u673a\u6253\u4e71\uff0c\u5e76\u4e14\u5728\u6bcf\u4e00\u4e2a\u5b50\u4e32\u4e2d\uff0c\u5b57\u6bcd\u7684\u987a\u5e8f\u4e5f\u4f1a\u88ab\u968f\u673a\u6253\u4e71\u3002\n- `! s` \u2014\u2014\u8868\u793a\u4f60\u5df2\u7ecf\u5f97\u5230\u4e86 $s$\u3002\u8fd9\u4e2a\u64cd\u4f5c\u53ea\u80fd\u8fdb\u884c\u4e00\u6b21\uff0c\u8fdb\u884c\u5b8c\u540e\u6e38\u620f\u7acb\u5373\u7ed3\u675f\u3002\n\n\u4f60\u53ef\u4ee5\u8fdb\u884c\u6700\u591a\u4e09\u6b21\u8be2\u95ee\uff0c\u540c\u65f6\u6240\u6709\u5b50\u4e32\u7684\u4e2a\u6570\u603b\u548c\u4e0d\u80fd\u5927\u4e8e $(n+1)^2$\u3002\n\n\u6ce8\u610f\u6d4b\u8bd5\u70b9\u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u9884\u5148\u7ed9\u5b9a\u7684\uff0c\u800c\u4e0d\u4f1a\u6839\u636e\u4f60\u7684\u8be2\u95ee\u800c\u53d1\u751f\u6539\u53d8\u3002"
}