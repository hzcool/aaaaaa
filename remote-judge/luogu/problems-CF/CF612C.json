{
    "description": "You are given string $ s $ consists of opening and closing brackets of four kinds <>, {}, \\[\\], (). There are two types of brackets: opening and closing. You can replace any bracket by another of the same type. For example, you can replace < by the bracket {, but you can't replace it by ) or >.\n\nThe following definition of a regular bracket sequence is well-known, so you can be familiar with it.\n\nLet's define a regular bracket sequence (RBS). Empty string is RBS. Let $ s_{1} $ and $ s_{2} $ be a RBS then the strings < $ s_{1} $ > $ s_{2} $ , { $ s_{1} $ } $ s_{2} $ , \\[ $ s_{1} $ \\] $ s_{2} $ , ( $ s_{1} $ ) $ s_{2} $  are also RBS.\n\nFor example the string \"\\[\\[(){}\\]<>\\]\" is RBS, but the strings \"\\[)()\" and \"\\]\\[()()\" are not.\n\nDetermine the least number of replaces to make the string $ s $ RBS.",
    "inputFormat": "The only line contains a non empty string $ s $ , consisting of only opening and closing brackets of four kinds. The length of $ s $ does not exceed $ 10^{6} $ .",
    "outputFormat": "If it's impossible to get RBS from $ s $ print Impossible.\n\nOtherwise print the least number of replaces needed to get RBS from $ s $ .",
    "samples": [
        [
            "[&lt;}){}\n",
            "2"
        ],
        [
            "{()}[]\n",
            "0"
        ],
        [
            "]]\n",
            "Impossible"
        ]
    ],
    "hint": "",
    "translation": "#### \u9898\u76ee\u63cf\u8ff0\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u542b `>`\uff0c`(`\uff0c`)`\uff0c`{`\uff0c`}`\uff0c`[`\uff0c`]`\u7684\u5b57\u7b26\u4e32\u3002\u8bb0`<`\uff0c`(`\uff0c`{`\uff0c`[`\u4e3a\u5de6\u62ec\u53f7\uff0c`>`\uff0c`)`\uff0c`}`\uff0c`]`\u4e3a\u53f3\u62ec\u53f7\u3002\u6bcf\u6b21\u53ef\u4ee5\u5c06\u4efb\u610f\u4e00\u4e2a\u5de6\u62ec\u53f7\u6362\u4e3a\u4efb\u610f\u4e00\u4e2a\u4e0d\u540c\u7684\u5de6\u62ec\u53f7\uff0c\u6216\u5c06\u4efb\u610f\u4e00\u4e2a\u53f3\u62ec\u53f7\u6362\u4e3a\u4efb\u610f\u4e00\u4e2a\u4e0d\u540c\u7684\u53f3\u62ec\u53f7\uff0c\u8bb0\u4e3a\u4e00\u6b21\u64cd\u4f5c\u3002\u6c42\u4f7f\u62ec\u53f7\u5e8f\u5408\u6cd5\u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\uff0c\u82e5\u65e0\u89e3\uff0c\u8f93\u51fa `impossible`\u3002\n\n\n\n#### \u8f93\u5165\u683c\u5f0f\uff1a\n\n\u4ec5\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 $s$\uff0c\u7531\u5b57\u7b26 `>`\uff0c`(`\uff0c`)`\uff0c`{`\uff0c`}`\uff0c`[`\uff0c`]`\u7ec4\u6210 ($1 \\le |s| \\le 10^6$\u200b) \u3002\n\n\n\n#### \u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u4f7f\u62ec\u53f7\u5e8f\u5408\u6cd5\u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\uff0c\u82e5\u65e0\u89e3\uff0c\u8f93\u51fa `impossible`\u3002"
}