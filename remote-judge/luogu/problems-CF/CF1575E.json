{
    "description": "There is a city park represented as a tree with $ n $ attractions as its vertices and $ n - 1 $ rails as its edges. The $ i $ -th attraction has happiness value $ a_i $ .\n\nEach rail has a color. It is either black if $ t_i = 0 $ , or white if $ t_i = 1 $ . Black trains only operate on a black rail track, and white trains only operate on a white rail track. If you are previously on a black train and want to ride a white train, or you are previously on a white train and want to ride a black train, you need to use $ 1 $ ticket.\n\nThe path of a tour must be a simple path \u2014 it must not visit an attraction more than once. You do not need a ticket the first time you board a train. You only have $ k $ tickets, meaning you can only switch train types at most $ k $ times. In particular, you do not need a ticket to go through a path consisting of one rail color.\n\nDefine $ f(u, v) $ as the sum of happiness values of the attractions in the tour $ (u, v) $ , which is a simple path that starts at the $ u $ -th attraction and ends at the $ v $ -th attraction. Find the sum of $ f(u,v) $ for all valid tours $ (u, v) $ ( $ 1 \\leq u \\leq v \\leq n $ ) that does not need more than $ k $ tickets, modulo $ 10^9 + 7 $ .",
    "inputFormat": "The first line contains two integers $ n $ and $ k $ ( $ 2 \\leq n \\leq 2 \\cdot 10^5 $ , $ 0 \\leq k \\leq n-1 $ ) \u2014 the number of attractions in the city park and the number of tickets you have.\n\nThe second line contains $ n $ integers $ a_1, a_2,\\ldots, a_n $ ( $ 0 \\leq a_i \\leq 10^9 $ ) \u2014 the happiness value of each attraction.\n\nThe $ i $ -th of the next $ n - 1 $ lines contains three integers $ u_i $ , $ v_i $ , and $ t_i $ ( $ 1 \\leq u_i, v_i \\leq n $ , $ 0 \\leq t_i \\leq 1 $ ) \u2014 an edge between vertices $ u_i $ and $ v_i $ with color $ t_i $ . The given edges form a tree.",
    "outputFormat": "Output an integer denoting the total happiness value for all valid tours $ (u, v) $ ( $ 1 \\leq u \\leq v \\leq n $ ), modulo $ 10^9 + 7 $ .",
    "samples": [
        [
            "5 0\n1 3 2 6 4\n1 2 1\n1 4 0\n3 2 1\n2 5 0",
            "45"
        ],
        [
            "3 1\n1 1 1\n1 2 1\n3 2 0",
            "10"
        ]
    ],
    "hint": "",
    "translation": "\u7b80\u8981\u9898\u610f\uff08\u592a\u957f\u6240\u4ee5\u8fd8\u662f\u633a\u591a\uff0c\u8bf7\u8010\u5fc3\u770b\u5b8c\uff09\uff1a\n\n\u6709\u4e00\u4e2a\u57ce\u5e02\u516c\u56ed\u5f62\u5982\u4e00\u68f5\u6811\uff0c\u5b83\u7684\u9876\u70b9\u662f $n$ \u4e2a\u666f\u70b9\uff0c\u7531 $n-1$ \u6761\u9053\u8def\u8fde\u63a5\uff0c\u7b2c $i$ \u4e2a\u666f\u70b9\u6709\u4e00\u4e2a\u89c2\u8d4f\u503c $a_i$\u3002\u6bcf\u6761\u9053\u8def\u90fd\u6709\u4e00\u79cd\u989c\u8272 $t_i$\uff0c\u5982\u679c $t_i=0$ \u5219\u4e3a\u9ed1\u8272\uff0c$t_i=1$ \u5219\u4e3a\u767d\u8272\u3002\u540c\u65f6\u516c\u56ed\u91cc\u8fd8\u914d\u6709\u9ed1\u767d\u4e24\u79cd\u989c\u8272\u7684\u8f66\u3002\n\nCaropul \u60f3\u4e58\u8f66\u6e38\u89c8\u8fd9\u4e2a\u516c\u56ed\uff0c\u4f46\u4ec0\u4e48\u989c\u8272\u7684\u8f66\u8d70\u4ec0\u4e48\u989c\u8272\u7684\u9053\u8def\uff0c\u60f3\u8d70\u53e6\u4e00\u79cd\u989c\u8272\u7684\u9053\u8def\u9700\u8981\u6362\u4e00\u6b21\u8f66\u3002\n\n\u5b9a\u4e49\u4e00\u6b21\u6e38\u89c8 $(u,v)$ \u4e3a\u8d70\u4e00\u6761\u4ece $u$ \u666f\u70b9\u5f00\u59cb\uff0c\u5230 $v$ \u666f\u70b9\u7ed3\u675f\u7684\u7b80\u5355\u8def\u5f84\uff08\u5373\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u666f\u70b9\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\uff09\uff0c$f(u,v)$ \u4e3a\u8fd9\u6761\u8def\u5f84\u7ecf\u8fc7\u7684\u6240\u6709\u666f\u70b9\uff08\u5305\u62ec $u,v$\uff09\u7684\u89c2\u8d4f\u503c\u4e4b\u548c\u3002\n\n\u73b0\u5728 Caropul \u60f3\u77e5\u9053\u5bf9\u4e8e\u6240\u6709\u4e0d\u8d85\u8fc7 $k$ \u6b21**\u6362\u8f66**\u7684\u6e38\u89c8 $(u,v)$ \uff0c$f(u,v)$ \u7684\u548c\u5bf9 $10^9+7$ \u53d6\u6a21\u7684\u7ed3\u679c\uff0c\u5176\u4e2d $1\\le u\\le v\\le n$\u3002\n\n**\u6ce8\u610f\u6700\u5f00\u59cb\u4e0a\u8f66\u4e0d\u7b97\u4e00\u6b21\u6362\u8f66\u3002**"
}