{
    "description": "You are given two strings $ s $ and $ t $ , each of length $ n $ and consisting of lowercase Latin alphabets. You want to make $ s $ equal to $ t $ .\n\nYou can perform the following operation on $ s $ any number of times to achieve it \u2014\n\n- Choose any substring of $ s $ and rotate it clockwise once, that is, if the selected substring is $ s[l,l+1...r] $ , then it becomes $ s[r,l,l + 1 ... r - 1] $ . All the remaining characters of $ s $ stay in their position. For example, on rotating the substring $ [2,4] $ , string \"abcde\" becomes \"adbce\".\n\nA string $ a $ is a substring of a string $ b $ if $ a $ can be obtained from $ b $ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nFind the minimum number of operations required to convert $ s $ to $ t $ , or determine that it's impossible.",
    "inputFormat": "The first line of the input contains a single integer $ t $ $ (1\\leq t \\leq 2000) $ \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $ n $ $ (1\\leq n \\leq 2000) $ \u2014 the length of the strings.\n\nThe second and the third lines contain strings $ s $ and $ t $ respectively.\n\nThe sum of $ n $ over all the test cases does not exceed $ 2000 $ .",
    "outputFormat": "For each test case, output the minimum number of operations to convert $ s $ to $ t $ . If it is not possible to convert $ s $ to $ t $ , output $ -1 $ instead.",
    "samples": [
        [
            "6\n1\na\na\n2\nab\nba\n3\nabc\ncab\n3\nabc\ncba\n4\nabab\nbaba\n4\nabcc\naabc",
            "0\n1\n1\n2\n1\n-1"
        ]
    ],
    "hint": "For the $ 1 $ -st test case, since $ s $ and $ t $ are equal, you don't need to apply any operation.\n\nFor the $ 2 $ -nd test case, you only need to apply one operation on the entire string ab to convert it to ba.\n\nFor the $ 3 $ -rd test case, you only need to apply one operation on the entire string abc to convert it to cab.\n\nFor the $ 4 $ -th test case, you need to apply the operation twice: first on the entire string abc to convert it to cab and then on the substring of length $ 2 $ beginning at the second character to convert it to cba.\n\nFor the $ 5 $ -th test case, you only need to apply one operation on the entire string abab to convert it to baba.\n\nFor the $ 6 $ -th test case, it is not possible to convert string $ s $ to $ t $ .",
    "translation": "\u7ed9\u5b9a\u4e24\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32 $s$\uff0c$t$\u3002\u5b9a\u4e49\u4e00\u6b21\u64cd\u4f5c\u4e3a\u9009\u62e9 $s$ \u7684\u4e00\u4e2a\u5b50\u4e32 $s_{l, l +1, \\dots, r}$\uff0c\u7136\u540e\u5c06\u4e4b\u4fee\u6539\u4e3a $s_{r, l, l + 1, l + 2, \\dots, r - 1 }$\u3002\u8bf7\u6c42\u52a9\u4f7f $s$ \u4e0e $t$ \u76f8\u7b49\u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002\u65e0\u89e3\u8f93\u51fa $-1$\u3002\n\n\u591a\u7ec4\u6570\u636e\uff0c$\\sum n \\leq 2000$\uff0c$s, t$ \u4e2d\u53ea\u6709\u5c0f\u5199\u5b57\u6bcd\u3002\n\ntranslated by @\u4e00\u6276\u82cf\u4e00\u3002"
}