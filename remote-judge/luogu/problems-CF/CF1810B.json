{
    "description": "This problem is about candy. Initially, you only have $ 1 $ candy, and you want to have exactly $ n $ candies.\n\nYou can use the two following spells in any order at most $ 40 $ times in total.\n\n- Assume you have $ x $ candies now. If you use the first spell, then $ x $ candies become $ 2x-1 $ candies.\n- Assume you have $ x $ candies now. If you use the second spell, then $ x $ candies become $ 2x+1 $ candies.\n\nConstruct a sequence of spells, such that after using them in order, you will have exactly $ n $ candies, or determine it's impossible.",
    "inputFormat": "Each test contains multiple test cases. The first line contains a single integer $ t $ ( $ 1 \\le t \\le 10^4 $ ) \u2014 the number of test cases. Their description follows.\n\nEach test case contains one line with a single integer $ n $ ( $ 2 \\le n \\le 10^9 $ ) \u2014 the required final number of candies.",
    "outputFormat": "For each test case, output the following.\n\nIf it's possible to eventually have $ n $ candies within $ 40 $ spells, in the first line print an integer $ m $ ( $ 1 \\le m \\le 40 $ ), representing the total number of spells you use.\n\nIn the second print $ m $ integers $ a_{1}, a_{2}, \\ldots, a_{m} $ ( $ a_{i} $ is $ 1 $ or $ 2 $ ) separated by spaces, where $ a_{i} = 1 $ means that you use the first spell in the $ i $ -th step, while $ a_{i} = 2 $ means that you use the second spell in the $ i $ -th step.\n\nNote that you do not have to minimize $ m $ , and if there are multiple solutions, you may output any one of them.\n\nIf it's impossible, output $ -1 $ in one line.",
    "samples": [
        [
            "4\n2\n3\n7\n17",
            "-1\n1\n2 \n2\n2 2 \n4\n2 1 1 1"
        ]
    ],
    "hint": "For $ n=3 $ , you can just use the second spell once, and then have $ 2 \\cdot 1 + 1 = 3 $ candies.\n\nFor $ n=7 $ , you can use the second spell twice. After the first step, you will have $ 3 $ candies. And after the second step, you will have $ 2 \\cdot 3 + 1 = 7 $ candies.",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\n\u8d77\u521d\uff0c\u4f60\u53ea\u6709 $ 1 $ \u9897\u7cd6\uff0c\u800c\u4f60\u60f3\u8981**\u6070\u597d** $ n $ \u9897\u7cd6\u3002\n\n\u4f60\u53ef\u4ee5\u5ff5\u4ee5\u4e0b\u4e24\u79cd\u5492\u8bed\uff0c\u4f46\u4f60\u6240\u5ff5\u7684\u5492\u8bed\u7684\u603b\u6570\u4e0d\u80fd\u8d85\u8fc7 $ 40 $ \u53e5\uff1a\n\n* \u5047\u8bbe\u4f60\u73b0\u5728\u6709 $ x $ \u9897\u7cd6\u3002\u5982\u679c\u4f60\u5ff5\u5492\u8bed\u4e00\uff0c\u90a3\u4e48\u4f60\u7684 $ x $ \u9897\u7cd6\u5c31\u53d8\u6210\u4e86 $ 2x - 1 $ \u9897\u7cd6\u3002\n* \u5047\u8bbe\u4f60\u73b0\u5728\u6709 $ x $ \u9897\u7cd6\u3002\u5982\u679c\u4f60\u5ff5\u5492\u8bed\u4e8c\uff0c\u90a3\u4e48\u4f60\u7684 $ x $ \u9897\u7cd6\u5c31\u53d8\u6210\u4e86 $ 2x + 1 $ \u9897\u7cd6\u3002\n\n\u5982\u679c\u53ef\u4ee5\u5ff5\u4e0d\u8d85\u8fc7 $ 40 $ \u53e5\u5492\u8bed\u5c31\u80fd\u83b7\u5f97**\u6070\u597d** $ n $ \u9897\u7cd6\uff0c\u5219\u4f60\u9700\u8981\u6784\u9020\u4e00\u4e2a\u53ef\u80fd\u7684\u5492\u8bed\u5e8f\u5217\uff0c\u5426\u5219\u4f60\u5e94\u5224\u65ad\u8fd9\u6837\u7684\u5492\u8bed\u5e8f\u5217\u4e0d\u5b58\u5728\u3002\n\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 $ t \\text{ } (1 \\le t \\le 10 ^ 4) $\uff0c\u4ee3\u8868\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\u3002\n\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u53ea\u6709\u4e00\u884c\uff0c\u8be5\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 $ n \\text{ } (2 \\le n \\le 10 ^ 9) $\uff0c\u4ee3\u8868\u4f60\u9700\u8981\u83b7\u5f97**\u6070\u597d** $ n $ \u9897\u7cd6\u3002\n\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u5185\u5bb9\u3002\n\n\u5982\u679c\u53ef\u4ee5\u5ff5\u4e0d\u8d85\u8fc7 $ 40 $ \u53e5\u5492\u8bed\u5c31\u80fd\u83b7\u5f97**\u6070\u597d** $ n $ \u9897\u7cd6\uff0c\u90a3\u4e48\u5728\u7b2c\u4e00\u884c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570 $ m $\uff0c\u4ee3\u8868\u4f60\u6240\u5ff5\u7684\u5492\u8bed\u7684\u603b\u6570\u3002\n\n\u5728\u7b2c\u4e8c\u884c\u8f93\u51fa $ m $ \u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570 $ a_1, a_2,..., a_m $ $ (a_i = 1 \\text{ or } a_i = 2) $\uff0c\u5176\u4e2d $ a_i = 1 $ \u4ee3\u8868\u4f60\u7684\u7b2c $ i $ \u53e5\u5492\u8bed\u662f\u5492\u8bed\u4e00\uff0c$ a_i = 2 $ \u4ee3\u8868\u4f60\u7684\u7b2c $ i $ \u53e5\u5492\u8bed\u662f\u5492\u8bed\u4e8c\u3002\n\n\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848**\u4e0d\u9700\u8981**\u4f7f\u5f97 $ m $ \u6700\u5c0f\uff0c\u5982\u679c\u6709\u591a\u79cd\u53ef\u80fd\u7684\u7b54\u6848\uff0c\u8f93\u51fa**\u4efb\u610f\u4e00\u79cd**\u5373\u53ef\u3002\n\n\u5982\u679c\u4e0d\u53ef\u80fd\u83b7\u5f97**\u6070\u597d** $ n $ \u9897\u7cd6\uff0c\u5728\u8be5\u884c\u5355\u72ec\u8f93\u51fa $ -1 $\u3002\n\n\n### \u8bf4\u660e/\u63d0\u793a\n\n\u5bf9\u4e8e $ n = 3 $\uff0c\u4f60\u53ea\u9700\u8981\u5ff5\u4e00\u53e5\u5492\u8bed\u4e8c\uff0c\u4f60\u5c31\u6709\u4e86 $ 2 \\times 1 + 1 = 3 $ \u9897\u7cd6\u3002\n\n\u5bf9\u4e8e $ n = 7 $\uff0c\u4f60\u53ea\u9700\u8981\u5ff5\u4e24\u53e5\u5492\u8bed\u4e8c\u3002\u7b2c\u4e00\u6b65\u540e\uff0c\u4f60\u5c31\u6709\u4e86 $ 3 $ \u9897\u7cd6\u3002\u800c\u7b2c\u4e8c\u6b65\u540e\uff0c\u4f60\u5c31\u6709\u4e86 $ 2 \\times 3 + 1 = 7 $ \u9897\u7cd6\u3002"
}