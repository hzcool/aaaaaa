{
    "description": "Vasily the bear has got a sequence of positive integers $ a_{1},a_{2},...,a_{n} $ . Vasily the Bear wants to write out several numbers on a piece of paper so that the beauty of the numbers he wrote out was maximum.\n\nThe beauty of the written out numbers $ b_{1},b_{2},...,b_{k} $ is such maximum non-negative integer $ v $ , that number $ b_{1} $ $ and $ $ b_{2} $ $ and $ $ ... $ $ and $ $ b_{k} $ is divisible by number $ 2^{v} $ without a remainder. If such number $ v $ doesn't exist (that is, for any non-negative integer $ v $ , number $ b_{1} $ $ and $ $ b_{2} $ $ and $ $ ... $ $ and $ $ b_{k} $ is divisible by $ 2^{v} $ without a remainder), the beauty of the written out numbers equals -1.\n\nTell the bear which numbers he should write out so that the beauty of the written out numbers is maximum. If there are multiple ways to write out the numbers, you need to choose the one where the bear writes out as many numbers as possible.\n\nHere expression $ x $ $ and $ $ y $ means applying the bitwise AND operation to numbers $ x $ and $ y $ . In programming languages C++ and Java this operation is represented by \"&\", in Pascal \u2014 by \"and\".",
    "inputFormat": "The first line contains integer $ n $ ( $ 1<=n<=10^{5} $ ). The second line contains $ n $ space-separated integers $ a_{1},a_{2},...,a_{n} $ $ (1<=a_{1}&lt;a_{2}&lt;...&lt;a_{n}<=10^{9}) $ .",
    "outputFormat": "In the first line print a single integer $ k $ $ (k&gt;0) $ , showing how many numbers to write out. In the second line print $ k $ integers $ b_{1},b_{2},...,b_{k} $ \u2014 the numbers to write out. You are allowed to print numbers $ b_{1},b_{2},...,b_{k} $ in any order, but all of them must be distinct. If there are multiple ways to write out the numbers, choose the one with the maximum number of numbers to write out. If there still are multiple ways, you are allowed to print any of them.",
    "samples": [
        [
            "5\n1 2 3 4 5\n",
            "2\n4 5\n"
        ],
        [
            "3\n1 2 4\n",
            "1\n4\n"
        ]
    ],
    "hint": "",
    "translation": "Vasily the bear\u6709\u4e00\u4e9b\u6570$a_1,a_2,...,a_n$\uff0c\u5b83\u60f3\u8981\u5199\u4e0b\u51e0\u4e2a\u6570\u5b57\uff0c\u4f7f\u5199\u4e0b\u7684\u6570\u5b57\u7684\u201c\u7f8e\u611f\u201d\u6700\u5927\u3002\r\n\r\n\u5bf9\u4e8e\u6570\u5b57$b_1,b_2,...,b_k$,\u4ed6\u4eec\u7684\u201c\u7f8e\u611f\u201d\u662f\u4e00\u4e2a\u5c3d\u53ef\u80fd\u5927\u7684\u975e\u8d1f\u6574\u6570$v$,\u4f7f\u5f97$b_1$&$b_2$&...&$b_k$\u7684\u7ed3\u679c\u80fd\u591f\u88ab$2^v$\u6574\u9664\uff08&\u6307\u201c\u6309\u4f4d\u4e0e\u201d\u8fd0\u7b97\uff09\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u4e00\u4e2a\u6570\uff0c\u5219\u8fd9\u7ec4\u6570\u7684\u201c\u7f8e\u611f\u201d\u4e3a-1\u3002\r\n\r\n\u8bf7\u544a\u8bc9\u5b83\u5199\u4e0b\u54ea\u4e9b\u6570\u5b57\u80fd\u4f7f\u201c\u7f8e\u611f\u201d\u6700\u5927\uff0c\u5982\u679c\u6709\u591a\u7ec4\u65b9\u6848\uff0c\u4f60\u9700\u8981\u9009\u62e9\u6570\u5b57\u5c3d\u53ef\u80fd\u591a\u7684\u3002\r\n\r\n## \u8f93\u5165\r\n\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570$n$\uff0c\u8868\u793a\u6570\u5b57\u4e2a\u6570\u3002\r\n\r\n\u7b2c\u4e8c\u884c\u4e3a$a_1,a_2,...,a_n$\u3002\r\n## \u8f93\u51fa\r\n\u7b2c\u4e00\u884c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570$k$\uff0c\u8868\u793aVasily the bear\u9700\u8981\u5199\u4e0b\u591a\u5c11\u6570\u5b57\u3002\r\n\r\n\u7b2c\u4e8c\u884c\u4e3a\u4ee5\u7a7a\u683c\u5206\u79bb\u7684$k$\u4e2a\u6574\u6570$b_1,b_2,...,b_k$\uff0c\u8f93\u51fa\u987a\u5e8f\u4e0d\u53d7\u9650\u5236\uff0c\u4f46\u4e0d\u80fd\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u5982\u679c\u5b58\u5728\u591a\u7ec4\u65b9\u6848\u4f7f\u201c\u7f8e\u611f\u201d\u6700\u5927\uff0c\u9700\u8981\u9009\u62e9\u6570\u5b57\u5c3d\u53ef\u80fd\u591a\u7684\uff0c\u5982\u679c\u4ecd\u6709\u591a\u7ec4\u65b9\u6848\uff0c\u53ef\u8f93\u51fa\u4efb\u610f\u4e00\u7ec4\u3002"
}