{
    "description": "Array of integers is unimodal, if:\n\n- it is strictly increasing in the beginning;\n- after that it is constant;\n- after that it is strictly decreasing.\n\nThe first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.\n\nFor example, the following three arrays are unimodal: $ [5,7,11,11,2,1] $ , $ [4,4,2] $ , $ [7] $ , but the following three are not unimodal: $ [5,5,6,6,1] $ , $ [1,2,1,2] $ , $ [4,5,5,6] $ .\n\nWrite a program that checks if an array is unimodal.",
    "inputFormat": "The first line contains integer $ n $ ( $ 1<=n<=100 $ ) \u2014 the number of elements in the array.\n\nThe second line contains $ n $ integers $ a_{1},a_{2},...,a_{n} $ ( $ 1<=a_{i}<=1000 $ ) \u2014 the elements of the array.",
    "outputFormat": "Print \"YES\" if the given array is unimodal. Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).",
    "samples": [
        [
            "6\n1 5 5 5 4 2\n",
            "YES\n"
        ],
        [
            "5\n10 20 30 20 10\n",
            "YES\n"
        ],
        [
            "4\n1 2 1 2\n",
            "NO\n"
        ],
        [
            "7\n3 3 3 3 3 3 3\n",
            "YES\n"
        ]
    ],
    "hint": "In the first example the array is unimodal, because it is strictly increasing in the beginning (from position $ 1 $ to position $ 2 $ , inclusively), that it is constant (from position $ 2 $ to position $ 4 $ , inclusively) and then it is strictly decreasing (from position $ 4 $ to position $ 6 $ , inclusively).",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\n\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u662f\u5355\u5cf0\u7684\uff0c\u5982\u679c\uff1a\n\n\u4e00\u5f00\u59cb\u5b83\u662f\u4e25\u683c\u589e\u52a0\u7684\uff1b\n\n\u4e4b\u540e\u662f\u6052\u5b9a\u4e0d\u53d8\u7684\uff1b\n\n\u518d\u540e\u662f\u4e25\u683c\u51cf\u5c11\u7684\uff1b\n\n\u7b2c\u4e00\u5757\uff08\u589e\u52a0\uff09\u548c\u6700\u540e\u4e00\u5757\uff08\u51cf\u5c11\uff09\u53ef\u80fd\u4e0d\u5b58\u5728\u3002\u5141\u8bb8\u8fd9\u4e24\u5757\u90fd\u4e0d\u5b58\u5728\u3002\n\n\u4f8b\u5982\uff0c\u4e0b\u9762\u8fd9\u4e09\u4e2a\u6570\u7ec4\u662f\u5355\u5cf0\u7684\uff1a\n\n$[5,7,11,11,2,1] , [4,4,2] , [7]$ \n\n\u4f46\u662f\uff0c\u4e0b\u9762\u8fd9\u4e09\u4e2a\u4e0d\u662f\u5355\u5cf0\u7684\uff1a\n\n$[5,5,6,6,1] , [1,2,1,2] , [4,5,5,6]$ \n\n\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u7ec4\u662f\u5426\u662f\u5355\u5cf0\u7684\u3002\n\n### \u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 $n$ \uff08$1\\leq n\\leq 100$ \uff09 \u2014 \u8fd9\u4e2a\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542b$n$ \u4e2a\u6574\u6570$a_1,a_2,\\dots,a_n$ \uff08$1\\leq a_i\\leq 1000$ \uff09 \u2014 \u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u5982\u679c\uff0c\u88ab\u7ed9\u51fa\u7684\u8fd9\u4e2a\u5143\u7d20\u662f\u5355\u5cf0\u7684\uff0c\u8f93\u51fa\"YES\"\uff0c\u5426\u5219\u8f93\u51fa\"NO\"\u3002\n\n\u5728\u4efb\u4f55\u60c5\u51b5\uff0c\u4f60\u90fd\u80fd\u8f93\u51fa\u6bcf\u4e2a\u5b57\u6bcd\uff08\u4e0a\u9762\u7684\u6216\u4e0b\u9762\u7684\uff09\u3002\n\n### \u8bf4\u660e\n\n\u7b2c\u4e00\u4e2a\u6837\u4f8b\u4e2d\u7684\u6570\u7ec4\u662f\u5355\u5cf0\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u5728\u5f00\u59cb\u7684\u65f6\u5019\u4e25\u683c\u9012\u589e\uff08\u4ece\u4f4d\u7f6e$1$ \u5230\u4f4d\u7f6e$2$ \uff0c\u542b\u7aef\u70b9\uff09\uff0c\u4e2d\u95f4\u6052\u5b9a\u4e0d\u53d8\uff08\u4ece\u4f4d\u7f6e$2$ \u5230\u4f4d\u7f6e$4$ \uff0c\u542b\u7aef\u70b9\uff09\u5e76\u5728\u6700\u540e\u4e25\u683c\u9012\u51cf\uff08\u4ece\u4f4d\u7f6e$4$ \u5230\u4f4d\u7f6e$6$ \uff0c\u542b\u7aef\u70b9\uff09\u3002\n\nby @Khassar  "
}