{
    "description": "You have an undirected graph consisting of $ n $ vertices with weighted edges.\n\nA simple cycle is a cycle of the graph without repeated vertices. Let the weight of the cycle be the [XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of weights of edges it consists of.\n\nLet's say the graph is good if all its simple cycles have weight $ 1 $ . A graph is bad if it's not good.\n\nInitially, the graph is empty. Then $ q $ queries follow. Each query has the next type:\n\n- $ u $ $ v $ $ x $ \u2014 add edge between vertices $ u $ and $ v $ of weight $ x $ if it doesn't make the graph bad.\n\nFor each query print, was the edge added or not.",
    "inputFormat": "The first line contains two integers $ n $ and $ q $ ( $ 3 \\le n \\le 3 \\cdot 10^5 $ ; $ 1 \\le q \\le 5 \\cdot 10^5 $ ) \u2014 the number of vertices and queries.\n\nNext $ q $ lines contain queries \u2014 one per line. Each query contains three integers $ u $ , $ v $ and $ x $ ( $ 1 \\le u, v \\le n $ ; $ u \\neq v $ ; $ 0 \\le x \\le 1 $ ) \u2014 the vertices of the edge and its weight.\n\nIt's guaranteed that there are no multiple edges in the input.",
    "outputFormat": "For each query, print YES if the edge was added to the graph, or NO otherwise (both case-insensitive).",
    "samples": [
        [
            "9 12\n6 1 0\n1 3 1\n3 6 0\n6 2 0\n6 4 1\n3 4 1\n2 4 0\n2 5 0\n4 5 0\n7 8 1\n8 9 1\n9 7 0",
            "YES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nNO"
        ]
    ],
    "hint": "",
    "translation": "**\u9898\u76ee\u63cf\u8ff0**\n\n\u6709\u4e00\u542b $n$ \u4e2a\u70b9\u7684\u5e26\u6743\u65e0\u5411\u56fe\u3002\n\n\u4e00\u4e2a**\u7b80\u5355\u73af**\u88ab\u5b9a\u4e49\u4e3a\u56fe\u4e0a\u4e00\u6ca1\u6709\u91cd\u590d\u9876\u70b9\u7684\u73af\u3002\u4ee4\u8fd9\u6837\u7684\u4e00\u4e2a\u73af\u7684\u6743\u91cd\u4e3a\u5b83\u73af\u4e0a\u6240\u6709\u8fb9\u7684\u6743\u503c\u7684\u5f02\u6216\u548c\u3002\n\n\u82e5\u4e00\u4e2a\u56fe\u4e2d\u5168\u90e8**\u7b80\u5355\u73af**\u7684\u6743\u91cd\u90fd\u662f $1$ \uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2a\u56fe\u4e3a**\u597d\u56fe**\uff0c\u800c\u4e00\u4e2a\u56fe\u82e5\u4e0d\u662f**\u597d\u56fe**\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u5219\u662f**\u574f\u56fe**\u3002\n\n\u6700\u5f00\u59cb\uff0c\u56fe\u662f\u7a7a\u7684\u3002\u63a5\u7740\u4f1a\u6709 $q$ \u4e2a\u8be2\u95ee\u3002\u6bcf\u4e2a\u8be2\u95ee\u4e3a\u4ee5\u4e0b\u683c\u5f0f\n\n- $u$ $v$ $x$ \u2014 \u82e5\u4e0d\u4f1a\u4f7f\u56fe\u53d8\u6210\u574f\u56fe\uff0c\u5219\u5728\u70b9 $u$ \u4e0e\u70b9 $v$ \u95f4\u52a0\u4e00\u6761\u6743\u503c\u4e3a $x$ \u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u8f93\u51fa\u5230\u5e95\u52a0\u4e0d\u52a0\u8fd9\u6761\u8fb9\u3002"
}