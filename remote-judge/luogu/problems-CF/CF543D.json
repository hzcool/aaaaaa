{
    "description": "The country has $ n $ cities and $ n-1 $ bidirectional roads, it is possible to get from every city to any other one if you move only along the roads. The cities are numbered with integers from $ 1 $ to $ n $ inclusive.\n\nAll the roads are initially bad, but the government wants to improve the state of some roads. We will assume that the citizens are happy about road improvement if the path from the capital located in city $ x $ to any other city contains at most one bad road.\n\nYour task is \u2014 for every possible $ x $ determine the number of ways of improving the quality of some roads in order to meet the citizens' condition. As those values can be rather large, you need to print each value modulo $ 1000000007 $ ( $ 10^{9}+7 $ ).",
    "inputFormat": "The first line of the input contains a single integer $ n $ ( $ 2<=n<=2\u00b710^{5} $ ) \u2014 the number of cities in the country. Next line contains $ n-1 $ positive integers $ p_{2},p_{3},p_{4},...,p_{n} $ ( $ 1<=p_{i}<=i-1 $ ) \u2014 the description of the roads in the country. Number $ p_{i} $ means that the country has a road connecting city $ p_{i} $ and city $ i $ .",
    "outputFormat": "Print $ n $ integers $ a_{1},a_{2},...,a_{n} $ , where $ a_{i} $ is the sought number of ways to improve the quality of the roads modulo $ 1000000007 $ ( $ 10^{9}+7 $ ), if the capital of the country is at city number $ i $ .",
    "samples": [
        [
            "3\n1 1\n",
            "4 3 3"
        ],
        [
            "5\n1 2 3 4\n",
            "5 8 9 8 5"
        ]
    ],
    "hint": "",
    "translation": "**\u9898\u76ee\u63cf\u8ff0**\r\n  \r\n\u8fd9\u4e2a\u56fd\u5bb6\u6709n\u5ea7\u57ce\u5e02\u548cn-1\u6761\u53cc\u5411\u9053\u8def\uff0c\u4f60\u53ef\u4ee5\u6cbf\u9053\u8def\u4ece\u4e00\u4e2a\u57ce\u5e02\u5230\u4efb\u610f\u4e00\u4e2a\u5176\u4ed6\u57ce\u5e02\u3002\u8fd9\u4e9b\u57ce\u5e02\u88ab\u7f16\u53f7\u4e3a\u6574\u65701\u5230n\u3002\r\n\r\n\u6240\u6709\u7684\u9053\u8def\u6700\u521d\u90fd\u662f\u4e0d\u826f\u7684\uff0c\u4f46\u662f\u653f\u5e9c\u60f3\u8981\u6539\u5584\u4e00\u4e9b\u8def\u7684\u72b6\u51b5\u3002\u6211\u4eec\u8ba4\u4e3a\u5982\u679c\u4ece\u9996\u90fdx\u57ce\u5230\u5176\u4ed6\u57ce\u5e02\u7684\u9053\u8def\u6700\u591a\u5305\u542b\u4e00\u6761\u4e0d\u826f\u9053\u8def\uff0c\u5e02\u6c11\u4f1a\u5bf9\u6b64\u611f\u5230\u6ee1\u610f\u3002\r\n\u4f60\u7684\u4efb\u52a1\u662f\u2014\u2014\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684x\uff0c\u6c42\u51fa\u6240\u6709\u80fd\u591f\u6ee1\u8db3\u5e02\u6c11\u6761\u4ef6\u7684\u6539\u826f\u9053\u8def\u7684\u65b9\u5f0f\u3002\u56e0\u4e3a\u7ed3\u679c\u53ef\u80fd\u5f88\u5927\uff0c\u4f60\u9700\u8981\u8f93\u51famod 1000000007 ( 10^9+7 )\u540e\u7684\u7ed3\u679c\u3002\r\n\r\n**\u8f93\u5165\u8f93\u51fa\u683c\u5f0f**\r\n\r\n**\u8f93\u5165\u683c\u5f0f**\uff1a\r\n\r\n\u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570n ( 2<=n<=2\u22c510^5 )\u2014\u2014\u4ee3\u8868\u57ce\u5e02\u7684\u6570\u91cf\u3002\r\n\u7b2c\u4e8c\u884c\u5305\u62ecn-1\u4e2a\u63cf\u8ff0\u57ce\u5e02\u9053\u8def\u7684\u6574\u6570p2,p3,p4,...,pn ( 1<=pi<=i\u22121 ) pi\u8868\u793a\u6709\u4e00\u6761\u8fde\u63a5\u57ce\u5e02pi\u548c\u57ce\u5e02i \u7684\u9053\u8def\u3002\r\n\r\n**\u8f93\u51fa\u683c\u5f0f\uff1a**\r\n\r\n\u8f93\u51fan\u4e2a\u6574\u6570a1,a2,...,an \uff0cai\u8868\u793a\u5728\u57ce\u5e02i\u4e3a\u9996\u90fd\u65f6\uff0c\u6539\u826f\u9053\u8def\u7684\u65b9\u5f0fmod 1000000007 ( 10^9+7 )\u540e\u7684\u7ed3\u679c\u3002\r\n"
}