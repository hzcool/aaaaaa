{
    "description": "Polycarpus has a finite sequence of opening and closing brackets. In order not to fall asleep in a lecture, Polycarpus is having fun with his sequence. He is able to perform two operations:\n\n- adding any bracket in any position (in the beginning, the end, or between any two existing brackets);\n- cyclic shift \u2014 moving the last bracket from the end of the sequence to the beginning.\n\nPolycarpus can apply any number of operations to his sequence and adding a cyclic shift in any order. As a result, he wants to get the correct bracket sequence of the minimum possible length. If there are several such sequences, Polycarpus is interested in the lexicographically smallest one. Help him find such a sequence.\n\nAcorrect bracket sequence is a sequence of opening and closing brackets, from which you can get a correct arithmetic expression by adding characters \"1\" and \"+\" . Each opening bracket must correspond to a closed one. For example, the sequences \"(())()\", \"()\", \"(()(()))\" are correct and \")(\", \"(()\" and \"(()))(\" are not.\n\nThe sequence $ a_{1} $ $ a_{2}...\\ a_{n} $ is lexicographically smaller than sequence $ b_{1} $ $ b_{2}...\\ b_{n} $ , if there is such number $ i $ from $ 1 $ to $ n $ , that $ a_{k}=b_{k} $ for $ 1<=k&lt;i $ and $ a_{i}&lt;b_{i} $ . Consider that \"(\" $ &lt; $ \")\".",
    "inputFormat": "The first line contains Polycarpus's sequence consisting of characters \"(\" and \")\". The length of a line is from $ 1 $ to $ 1000000 $ .",
    "outputFormat": "Print a correct bracket sequence of the minimum length that Polycarpus can obtain by his operations. If there are multiple such sequences, print the lexicographically minimum one.",
    "samples": [
        [
            "()(())\n",
            "(())()"
        ],
        [
            "()(\n",
            "(())"
        ]
    ],
    "hint": "The sequence in the first example is already correct, but to get the lexicographically minimum answer, you need to perform four cyclic shift operations. In the second example you need to add a closing parenthesis between the second and third brackets and make a cyclic shift. You can first make the shift, and then add the bracket at the end.",
    "translation": "\u6709\u4e00\u4e2a\u62ec\u53f7\u5e8f\u5217\uff08\u4e0d\u4fdd\u8bc1\u5408\u6cd5\uff09\uff0c\u4f60\u80fd\u591f\u8fdb\u884c\u4ee5\u4e0b\u4e24\u4e2a\u64cd\u4f5c:\r\n\r\n1. \u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u5de6\u62ec\u53f7\u6216\u8005\u53f3\u62ec\u53f7;\r\n\r\n2. \u5c06\u5e8f\u5217\u6700\u672b\u7684\u62ec\u53f7\u79fb\u5230\u6700\u524d\u3002\r\n\r\n\u7ecf\u8fc7\u82e5\u5e72\u6b21\u64cd\u4f5c\u540e\uff0c\u5f97\u5230\u7684**\u6700\u77ed**\u7684**\u5408\u6cd5**\u62ec\u53f7\u5e8f\u5217\u662f\u4ec0\u4e48\uff1f\u82e5\u591a\u89e3\uff0c\u8f93\u51fa**\u5b57\u5178\u5e8f\u6700\u5c0f**\u7684\u3002\r\n\r\n\uff08`'('`<`')'`\uff09"
}