{
    "description": "Polycarp found $ n $ segments on the street. A segment with the index $ i $ is described by two integers $ l_i $ and $ r_i $ \u2014 coordinates of the beginning and end of the segment, respectively. Polycarp realized that he didn't need all the segments, so he wanted to delete some of them.\n\nPolycarp believes that a set of $ k $ segments is good if there is a segment $ [l_i, r_i] $ ( $ 1 \\leq i \\leq k $ ) from the set, such that it intersects every segment from the set (the intersection must be a point or segment). For example, a set of $ 3 $ segments $ [[1, 4], [2, 3], [3, 6]] $ is good, since the segment $ [2, 3] $ intersects each segment from the set. Set of $ 4 $ segments $ [[1, 2], [2, 3], [3, 5], [4, 5]] $ is not good.\n\nPolycarp wonders, what is the minimum number of segments he has to delete so that the remaining segments form a good set?",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1 \\leq t \\leq 2 \\cdot 10^5 $ ) \u2014 number of test cases. Then $ t $ test cases follow.\n\nThe first line of each test case contains a single integer $ n $ ( $ 1 \\leq n \\leq 2 \\cdot 10^5 $ ) \u2014 the number of segments. This is followed by $ n $ lines describing the segments.\n\nEach segment is described by two integers $ l $ and $ r $ ( $ 1 \\leq l \\leq r \\leq 10^9 $ ) \u2014 coordinates of the beginning and end of the segment, respectively.\n\nIt is guaranteed that the sum of $ n $ for all test cases does not exceed $ 2 \\cdot 10^5 $ .",
    "outputFormat": "For each test case, output a single integer \u2014 the minimum number of segments that need to be deleted in order for the set of remaining segments to become good.",
    "samples": [
        [
            "4\n3\n1 4\n2 3\n3 6\n4\n1 2\n2 3\n3 5\n4 5\n5\n1 2\n3 8\n4 5\n6 7\n9 10\n5\n1 5\n2 4\n3 5\n3 8\n4 8",
            "0\n1\n2\n0"
        ]
    ],
    "hint": "",
    "translation": "$Polycarp$\u6709$n$\u4e2a\u6570\u5b57\u533a\u95f4\uff0c\u6bcf\u4e2a\u533a\u95f4\u6709\u4e24\u4e2a\u53c2\u6570$l[i]$\uff08\u8d77\u59cb\uff09\uff0c$r[i]$\uff08\u7ed3\u675f\uff09\u3002\n\n$Polycarp$\u5bf9\u4e00\u4e2a\u597d\u96c6\u5408\u7684\u5b9a\u4e49\u662f\uff1a\n\n\u4f60\u5728\u6240\u6709\u5143\u7d20\u4e2d\u9009\u53d6\u90e8\u5206\u5143\u7d20\u7ec4\u6210\u8fd9\u4e2a\u96c6\u5408\u3002\n\n\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u96c6\u5408\u4e2d\u627e\u5230\u4e00\u4e2a\u5143\u7d20$p[i]$\uff0c\u4f7f\u8fd9\u4e2a\u96c6\u5408\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u81f3\u5c11\u542b\u6709$p[i]$\u5de6\u53f3\u533a\u95f4\u6db5\u76d6\u7684\u6570\u5b57\u4e4b\u4e00\u3002\n\n\u9898\u76ee\u7ed9\u7684\u6837\u4f8b$[[1,4],[2,3],[3,6]]$\u662f\u4e00\u4e2a\u597d\u96c6\u5408\u3002$[[1,2],[2,3],[3,5],[4,5]]$\u5219\u4e0d\u662f\u4e00\u4e2a\u597d\u96c6\u5408\u3002\n\n\u73b0\u5728\u7ed9\u4f60$n$\u4e2a\u6570\u5b57\u533a\u95f4\uff0c\u8ba9\u4f60\u6c42\u4ece\u4e2d\u81f3\u5c11\u5220\u53bb\u591a\u5c11\u4e2a\u5143\u7d20\uff0c\u624d\u80fd\u4f7f\u8be5\u96c6\u5408\u4e3a\u4e00\u4e2a\u597d\u96c6\u5408\u3002\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6570\u5b57\uff0c\u6d4b\u8bd5\u6570\u636e\u7ec4\u6570\u3002\n\n\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6570\u5b57$n$\uff0c\u8868\u793a\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u533a\u95f4\u3002\n\n\u63a5\u4e0b\u6765$n$\u884c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570$l[i]$\u548c$r[i]$\u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u7b54\u6848\u3002"
}