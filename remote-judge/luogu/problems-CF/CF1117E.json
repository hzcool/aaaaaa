{
    "description": "This is an interactive problem. Remember to flush your output while communicating with the testing program. You may use fflush(stdout) in C++, system.out.flush() in Java, stdout.flush() in Python or flush(output) in Pascal to flush the output. If you use some other programming language, consult its documentation. You may also refer to the guide on interactive problems: <https://codeforces.com/blog/entry/45307>.\n\nYou are given a string $ t $ consisting of $ n $ lowercase Latin letters. This string was cyphered as follows: initially, the jury had a string $ s $ consisting of $ n $ lowercase Latin letters. Then they applied a sequence of no more than $ n $ (possibly zero) operations. $ i $ -th operation is denoted by two integers $ a_i $ and $ b_i $ ( $ 1 \\le a_i, b_i \\le n $ ), and means swapping two elements of the string with indices $ a_i $ and $ b_i $ . All operations were done in the order they were placed in the sequence. For example, if $ s $ is xyz and $ 2 $ following operations are performed: $ a_1 = 1, b_1 = 2 $ ; $ a_2 = 2, b_2 = 3 $ , then after the first operation the current string is yxz, and after the second operation the current string is yzx, so $ t $ is yzx.\n\nYou are asked to restore the original string $ s $ . Unfortunately, you have no information about the operations used in the algorithm (you don't even know if there were any operations in the sequence). But you may run the same sequence of operations on any string you want, provided that it contains only lowercase Latin letters and its length is $ n $ , and get the resulting string after those operations.\n\nCan you guess the original string $ s $ asking the testing system to run the sequence of swaps no more than $ 3 $ times?\n\nThe string $ s $ and the sequence of swaps are fixed in each test; the interactor doesn't try to adapt the test to your solution.",
    "inputFormat": "Initially the testing system sends one string $ t $ , consisting of lowercase Latin letters ( $ 1 \\le |t| = n \\le 10^4 $ ).",
    "outputFormat": "To give the answer, your program should print one line $ ! $ $ s $ with a line break in the end. After that, it should flush the output and terminate gracefully.\n\nInteraction\n\nBefore giving the answer, you may submit no more than $ 3 $ queries. To ask a query, print one line in the following format: $ ? $ $ s' $ , where $ s' $ should be a string consisting of exaclty $ n $ lowercase Latin letters. The line should be ended with a line break character. After submitting a query, flush the output and read the answer to your query \u2014 a string $ t' $ consisting of $ n $ lowercase Latin letters, which is the result of applying the sequence of swaps to string $ s' $ . This string will be given on a separate line ended by a line break character.\n\nIf you submit an incorrect query (or ask more than $ 3 $ queries), the answer to it will be one string 0. After receiving such an answer, your program should terminate immediately \u2014 otherwise you may receive verdict \"Runtime error\", \"Time limit exceeded\" or some other verdict instead of \"Wrong answer\".",
    "samples": [
        [
            "yzx\naab\nbaa\naba",
            "? baa\n? aba\n? aab\n! xyz\n"
        ]
    ],
    "hint": "In the sample, the testcase described in the statement is used. The participant asks the first query with string baa, which is transformed to aab. The second query contains string aba, which is transformed to baa. The third query contains string aab, which is transformed to aba. The participant can deduce that the initial string $ s $ was xyz.\n\nNote for hacking phase:\n\nTo submit a test in hacking phase, you should provide it in the following format:\n\nThe first line should contain the string $ s $ you guess, consisting of $ n \\in [1, 10000] $ lowercase Latin letters.\n\nThe second line should contain $ k $ ( $ 0 \\le k \\le n $ ) \u2014 the number of swap operations in the sequence.\n\nThen $ k $ lines should follow, $ i $ -th of them should denote $ i $ -th operation with two integers $ a_i $ and $ b_i $ ( $ 1 \\le a_i, b_i \\le n $ ).\n\nFor example, the sample test would look like that:\n\nxyz\n\n2\n\n1 2\n\n2 3",
    "translation": "\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\r\n\r\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 $s$ , \u6211\u4eec\u62e5\u6709\u82e5\u5e72\u64cd\u4f5c , \u4f46\u662f\u4f60\u4e0d\u77e5\u9053 , \u7b2c $i$ \u4e2a\u64cd\u4f5c\u5f62\u5982 $a_i,b_i$ \u8868\u793a\u4ea4\u6362\u5b57\u7b26\u4e32 $s$ \u4e2d\u7684\u7b2c $a_i$ \u4f4d\u548c $a_j$ \u4f4d\u3002\r\n\r\n\u6bd4\u5982\u64cd\u4f5c\u5e8f\u5217\u4f9d\u6b21\u4e3a $(1,2),(2,3)$ ,\u7ed9\u5b9a\u5b57\u7b26\u4e32\u4e3a ```xyz``` \u3002\r\n\r\n\u90a3\u4e48\u6211\u4eec\u6267\u884c\u7b2c\u4e00\u6b21\u64cd\u4f5c\u540e\u5b57\u7b26\u4e32\u53d8\u4e3a ```yxz``` ,\u800c\u6267\u884c\u7b2c$3$\u6b21\u64cd\u4f5c\u540e\u5219\u53d8\u4e3a ```yzx``` \u3002\r\n\r\n\u6211\u4eec\u5df2\u7ecf\u544a\u77e5\u4e86\u4f60\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\u540e\u7684\u5b57\u7b26\u4e32\u5e8f\u5217,\u4f60\u9700\u8981\u8fd8\u539f\u5176\u3002\r\n\r\n\u4e0d\u8fc7,\u4f60\u53ef\u4ee5\u8be2\u95ee\u81f3\u591a $3$ \u6b21,\u6bcf\u6b21\u8be2\u95ee\u4f60\u9700\u8981\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32,\u5176\u957f\u5ea6\u4e0e\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u76f8\u7b49,\u7136\u540e\u6211\u4eec\u4f1a\u544a\u8bc9\u4f60\u64cd\u4f5c\u540e\u7684\u5b57\u7b26\u4e32\u5e8f\u5217\u3002\r\n\r\n\u6570\u636e\u8303\u56f4:\u4fdd\u8bc1$|s|\\le 10^4$\u3002\r\n\r\n\u8f93\u51fa\u7b54\u6848\u9700\u8981\u52a0\u4e0a ```!``` \u3002\r\n\r\n\u67e5\u8be2\u64cd\u4f5c\u5219\u9700\u8981\u52a0\u4e0a ```?```\u3002\r\n\r\n\u7ffb\u8bd1 by EmptySoulist"
}