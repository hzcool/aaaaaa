{
    "description": "This is an interactive problem.\n\nAyush devised a new scheme to set the password of his lock. The lock has $ k $ slots where each slot can hold integers from $ 1 $ to $ n $ . The password $ P $ is a sequence of $ k $ integers each in the range $ [1, n] $ , $ i $ -th element of which goes into the $ i $ -th slot of the lock.\n\nTo set the password of his lock, Ayush comes up with an array $ A $ of $ n $ integers each in the range $ [1, n] $ (not necessarily distinct). He then picks $ k $ non-empty mutually disjoint subsets of indices $ S_1, S_2, ..., S_k $ $ (S_i \\underset{i \\neq j} \\cap S_j = \\emptyset) $ and sets his password as $ P_i = \\max\\limits_{j \\notin S_i} A[j] $ . In other words, the $ i $ -th integer in the password is equal to the maximum over all elements of $ A $ whose indices do not belong to $ S_i $ .\n\nYou are given the subsets of indices chosen by Ayush. You need to guess the password. To make a query, you can choose a non-empty subset of indices of the array and ask the maximum of all elements of the array with index in this subset. You can ask no more than 12 queries.",
    "inputFormat": "The first line of the input contains a single integer $ t $ $ (1 \\leq t \\leq 10) $ \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers $ n $ and $ k $ $ (2 \\leq n \\leq 1000, 1 \\leq k \\leq n) $ \u2014 the size of the array and the number of subsets. $ k $ lines follow. The $ i $ -th line contains an integer $ c $ $ (1 \\leq c \\lt n) $ \u2014 the size of subset $ S_i $ , followed by $ c $ distinct integers in the range $ [1, n] $ \u2014 indices from the subset $ S_i $ .\n\nIt is guaranteed that the intersection of any two subsets is empty.",
    "outputFormat": "To ask a query print a single line:\n\n- In the beginning print \"? c \" (without quotes) where $ c $ $ (1 \\leq c \\leq n) $ denotes the size of the subset of indices being queried, followed by $ c $ distinct space-separated integers in the range $ [1, n] $ .\n\nFor each query, you will receive an integer $ x $ \u2014 the maximum of value in the array among all the indices queried. If the subset of indices queried is invalid or you exceeded the number of queries (for example one of the indices is greater than $ n $ ) then you will get $ x = -1 $ . In this case, you should terminate the program immediately.\n\nWhen you have guessed the password, print a single line \"! \" (without quotes), followed by $ k $ space-separated integers \u2014 the password sequence.\n\nGuessing the password does not count towards the number of queries asked.\n\nAfter this, you should read a string. If you guess the password correctly, you will receive the string \"Correct\". In this case, you should continue solving the remaining test cases. If the guessed password is incorrect, you will receive the string \"Incorrect\". In this case, you should terminate the program immediately.\n\nThe interactor is not adaptive. The array $ A $ does not change with queries.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\n### Hacks\n\nTo hack the solution use the following test format:\n\nThe first line of the input should contain a single integer $ t $ $ (1 \\leq t \\leq 10) $ \u2014 the number of test cases.\n\nThe first line of each test case should contain two integers $ n $ and $ k $ $ (2 \\leq n \\leq 1000, 1 \\leq k \\leq n) $ \u2014 the size of the array and the number of subsets. The next line should consist of $ n $ space separated integers in the range $ [1, n] $ \u2014 the array $ A $ . $ k $ lines should follow. The $ i $ -th line should contain an integer $ c $ $ (1 \\leq c \\lt n) $ \u2014 the size of subset $ S_i $ , followed by $ c $ distinct integers in the range $ [1, n] $ \u2014 indices from the subset $ S_i $ .\n\nThe intersection of any two subsets has to be empty.",
    "samples": [
        [
            "1\n4 2\n2 1 3\n2 2 4\n\n1\n\n2\n\n3\n\n4\n\nCorrect",
            "? 1 1\n\n? 1 2\n\n? 1 3\n\n? 1 4\n\n! 4 3"
        ]
    ],
    "hint": "The array $ A $ in the example is $ [1, 2, 3, 4] $ . The length of the password is $ 2 $ . The first element of the password is the maximum of $ A[2] $ , $ A[4] $ (since the first subset contains indices $ 1 $ and $ 3 $ , we take maximum over remaining indices). The second element of the password is the maximum of $ A[1] $ , $ A[3] $ (since the second subset contains indices $ 2 $ , $ 4 $ ).\n\nDo not forget to read the string \"Correct\" / \"Incorrect\" after guessing the password.",
    "translation": "### \u9898\u610f\u7b80\u8ff0\n\n\u672c\u9898\u662f**\u4ea4\u4e92\u9898**\u3002\n\n\u7ed9\u5b9a\u957f\u4e3a $n$ \u7684\u6570\u7ec4 $a=[a_1,a_2,...,a_n]$ \u548c $k$ \u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 $S_1,S_2,...,S_k$\uff0c\u8fd9\u4e9b\u5b50\u96c6\u4e2d\u7684\u5143\u7d20\u90fd\u662f $[1,n]$ \u4e4b\u95f4\u7684\u6b63\u6574\u6570\u3002\u8fd9\u4e9b\u5b50\u96c6\u4e24\u4e24\u7684**\u4ea4\u96c6**\u4e3a**\u7a7a**\u3002\n\n\u4f60\u53ef\u4ee5\u8fdb\u884c\u6700\u591a $12$ \u6b21\u8be2\u95ee\u3002\u6bcf\u6b21\u8be2\u95ee\u4f60\u53ef\u4ee5\u7ed9\u51fa $c$ \u4e2a\u4e92\u4e0d\u76f8\u540c\u4e14\u5728 $[1,n]$ \u4e4b\u95f4\u7684\u6b63\u6574\u6570 $v_1,v_2,...,v_c$\uff0c\u7136\u540e\u4f60\u4f1a\u5f97\u5230 $\\max\\{v_i\\}$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u96c6 $S_i$\uff0c\u4f60\u9700\u8981\u6c42\u51fa $P_i=\\max\\limits_{j \\notin S_i} a_j$\u3002\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 $t$\uff0c\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002\n\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u4e24\u4e2a\u6b63\u6574\u6570 $n,k$\uff0c\u8868\u793a\u6570\u7ec4\u957f\u5ea6\u548c\u5b50\u96c6\u6570\u91cf\u3002\n\n\u63a5\u4e0b\u6765 $k$ \u884c\uff0c\u6bcf\u884c\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570 $c$ \u8868\u793a\u8be5\u5b50\u96c6\u5927\u5c0f\uff0c\u63a5\u4e0b\u6765 $c$ \u4e2a\u6b63\u6574\u6570\u8868\u793a\u8be5\u5b50\u96c6\u4e2d\u7684\u5143\u7d20\u3002\n\n$1 \\leq t \\le 10,2 \\leq n \\leq 1000,1 \\leq a_i,k \\leq n,1 \\leq c < n$\n\n### \u4ea4\u4e92\u65b9\u5f0f\n\n\u5982\u679c\u8981\u67e5\u8be2\uff0c\u8bf7\u6253\u5370\u4e00\u884c\uff1a\n\n- `? c ` \u540e\u9762\u63a5\u4e0a $c$ \u4e2a\u4e92\u4e0d\u76f8\u540c\u4e14\u5728 $[1,n]$ \u4e4b\u95f4\u7684\u6b63\u6574\u6570 $v_1,v_2,...,v_c$\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u9700\u8981\u6e05\u7a7a\u7f13\u51b2\u533a\uff0c\u6b64\u65f6\u4f60\u53ef\u4ee5\u5728\u6807\u51c6\u8f93\u5165\u4e2d\u8bfb\u5230\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a $\\max\\{v_i\\}$\u3002\n\n\u5f53\u4f60\u63d0\u4ea4\u7b54\u6848\u65f6\uff0c\u9700\u8981\u8f93\u51fa `! ` \u540e\u9762\u63a5\u4e0a $k$ \u4e2a\u6b63\u6574\u6570 $P_1,P_2,...,P_k$\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u9700\u8981\u6e05\u7a7a\u7f13\u51b2\u533a\u3002\u6b64\u65f6\uff0c\u5982\u679c\u4f60\u7684\u7b54\u6848\u6b63\u786e\uff0c\u5219\u4f1a\u8bfb\u5230\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32 `Correct`\uff0c\u5426\u5219\u4f1a\u8bfb\u5230 `Incorrect`\uff0c\u4f60\u4e0d\u5e94\u8be5\u5ffd\u7565\u5b83\u3002\n\n\u7ffb\u8bd1 by Meatherm"
}