{
    "description": "Once upon a time Algoland and Berland were a single country, but those times are long gone. Now they are two different countries, but their cities are scattered on a common territory.\n\nAll cities are represented as points on the Cartesian plane. Algoland consists of $ a $ cities numbered from $ 1 $ to $ a $ . The coordinates of the $ i $ -th Algoland city are a pair of integer numbers $ (xa_i, ya_i) $ . Similarly, Berland consists of $ b $ cities numbered from $ 1 $ to $ b $ . The coordinates of the $ j $ -th Berland city are a pair of integer numbers $ (xb_j, yb_j) $ . No three of the $ a+b $ mentioned cities lie on a single straight line.\n\nAs the first step to unite the countries, Berland decided to build several bidirectional freeways. Each freeway is going to be a line segment that starts in a Berland city and ends in an Algoland city. Freeways can't intersect with each other at any point except freeway's start or end. Moreover, the freeways have to connect all $ a+b $ cities. Here, connectivity means that one can get from any of the specified $ a+b $ cities to any other of the $ a+b $ cities using freeways. Note that all freeways are bidirectional, which means that one can drive on each of them in both directions.\n\nMayor of each of the $ b $ Berland cities allocated a budget to build the freeways that start from this city. Thus, you are given the numbers $ r_1, r_2, \\dots, r_b $ , where $ r_j $ is the number of freeways that are going to start in the $ j $ -th Berland city. The total allocated budget is very tight and only covers building the minimal necessary set of freeways. In other words, $ r_1+r_2+\\dots+r_b=a+b-1 $ .\n\nHelp Berland to build the freeways so that:\n\n- each freeway is a line segment connecting a Berland city and an Algoland city,\n- no freeways intersect with each other except for the freeway's start or end,\n- freeways connect all $ a+b $ cities (all freeways are bidirectional),\n- there are $ r_j $ freeways that start from the $ j $ -th Berland city.",
    "inputFormat": "Input contains one or several test cases. The first input line contains a single integer number $ t $ ( $ 1 \\le t \\le 3000 $ ) \u2014 number of test cases. Then, $ t $ test cases follow. Solve test cases separately, test cases are completely independent and do not affect each other.\n\nEach test case starts with a line containing space-separated integers $ a $ and $ b $ ( $ 1 \\le a, b \\le 3000 $ ) \u2014 numbers of Algoland cities and number of Berland cities correspondingly.\n\nThe next line contains $ b $ space-separated integers $ r_1, r_2, \\dots, r_b $ ( $ 1 \\le r_b \\le a $ ) where $ r_j $ is the number of freeways, that should start in the $ j $ -th Berland city. It is guaranteed that $ r_1+r_2+\\dots+r_b=a+b-1 $ .\n\nThe next $ a $ lines contain coordinates of the Algoland cities \u2014 pairs of space-separated integers $ xa_i, ya_i $ ( $ -10000 \\le xa_i, ya_i \\le 10000 $ ). The next $ b $ lines contain coordinates of the Berland cities \u2014 pairs of space-separated integers $ xb_i, yb_i $ ( $ -10000 \\le xb_i, yb_i \\le 10000 $ ). All cities are located at distinct points, no three of the $ a+b $ cities lie on a single straight line.\n\nSum of values $ a $ across all test cases doesn't exceed $ 3000 $ . Sum of values $ b $ across all test cases doesn't exceed $ 3000 $ .",
    "outputFormat": "For each of the $ t $ test cases, first print \"YES\" if there is an answer or \"NO\" otherwise.\n\nIf there is an answer, print the freeway building plan in the next $ a+b-1 $ lines. Each line of the plan should contain two space-separated integers $ j $ and $ i $ which means that a freeway from the $ j $ -th Berland city to the $ i $ -th Algoland city should be built. If there are multiple solutions, print any.",
    "samples": [
        [
            "2\n2 3\n1 1 2\n0 0\n1 1\n1 2\n3 2\n4 0\n1 1\n1\n0 0\n0 1\n",
            "YES\n2 2\n1 2\n3 2\n3 1\nYES\n1 1\n"
        ]
    ],
    "hint": "",
    "translation": "\u5f88\u4e45\u4ee5\u524d\uff0cAlgoland\u548cBerland\u662f\u4e00\u4e2a\u56fd\u5bb6\uff0c\u4f46\u90a3\u4e2a\u65f6\u4ee3\u65e9\u5df2\u8fc7\u53bb\u3002\u73b0\u5728\u5b83\u4eec\u662f\u4e24\u4e2a\u56fd\u5bb6\uff0c\u4f46\u4ed6\u4eec\u7684\u57ce\u5e02\u6563\u5e03\u5728\u4e00\u4e2a\u5171\u540c\u7684\u9886\u571f\u4e0a\u3002\n\n\u6240\u6709\u57ce\u5e02\u90fd\u8868\u793a\u4e3a\u4e00\u4e2a\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u7684\u4e00\u4e2a\u70b9\u3002Algoland\u7531 $a$ \u4e2a\u57ce\u5e02\u7ec4\u6210\uff0c\u7f16\u53f7\u4ece $1$ \u5230 $a$\u3002Algoland\u7b2c $i$ \u4e2a\u57ce\u5e02\u7684\u5750\u6807\u4e3a $(xa_i,ya_i)$ \u3002\u540c\u6837\u7684\uff0cBerland\u7531 $b$ \u4e2a\u57ce\u5e02\u7ec4\u6210\uff0c\u7f16\u53f7\u4ece $1$ \u5230 $b$\u3002Berland\u7b2c $j$ \u4e2a\u57ce\u5e02\u7684\u5750\u6807\u662f $(xb_j,yb_j)$ \u3002\u4fdd\u8bc1\u4e24\u4e2a\u56fd\u5bb6\u7684 $a+b$ \u4e2a\u57ce\u5e02\u91cc\u6ca1\u6709\u4e09\u4e2a\u57ce\u5e02\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u3002\n\n\u4f5c\u4e3a\u8054\u5408\u4e24\u56fd\u7684\u7b2c\u4e00\u6b65\uff0cBerland\u51b3\u5b9a\u4fee\u5efa\u51e0\u6761\u53cc\u5411\u7684\u9ad8\u901f\u516c\u8def\u3002\u6bcf\u6761\u9ad8\u901f\u516c\u8def\u5c06\u662f\u4e00\u6761\u7ebf\u6bb5\uff0c\u4eceBerland\u7684\u4e00\u4e2a\u57ce\u5e02\u5f00\u59cb\uff0c\u5230Algoland\u7684\u4e00\u4e2a\u57ce\u5e02\u7ed3\u675f\u3002\u9664\u4e86\u9ad8\u901f\u516c\u8def\u7684\u8d77\u70b9\u6216\u7ec8\u70b9\uff0c\u9ad8\u901f\u516c\u8def\u4e0d\u80fd\u5728\u4efb\u4f55\u4e00\u70b9\u4e0a\u76f8\u4e92\u4ea4\u53c9\u3002\u6b64\u5916\uff0c\u9ad8\u901f\u516c\u8def\u5fc5\u987b\u8fde\u63a5\u6240\u6709 $a+b$ \u4e2a\u57ce\u5e02\u3002\u8fd9\u610f\u5473\u7740\u4eba\u4eec\u53ef\u4ee5\u901a\u8fc7\u9ad8\u901f\u516c\u8def\u4ece\u4efb\u4f55\u4e00\u4e2a\u57ce\u5e02\u5230\u8fbe\u4efb\u4f55\u5176\u4ed6\u7684\u57ce\u5e02\u3002\u8bf7\u6ce8\u610f\uff0c\u6240\u6709\u7684\u9ad8\u901f\u516c\u8def\u90fd\u662f\u53cc\u5411\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4eba\u4eec\u53ef\u4ee5\u5728\u6bcf\u6761\u9ad8\u901f\u516c\u8def\u4e0a\u53cc\u5411\u884c\u9a76\u3002\n\n\u6bcf\u4e00\u4e2aBerland\u57ce\u5e02\u7684\u5e02\u957f\u90fd\u5206\u914d\u4e86\u4e00\u4e2a\u9884\u7b97\u6765\u5efa\u9020\u4ece\u8fd9\u4e2a\u57ce\u5e02\u51fa\u53d1\u7684\u9ad8\u901f\u516c\u8def\u3002\u56e0\u6b64\uff0c\u4f60\u4f1a\u5f97\u5230\u6570 $r_1,r_2,\\dots,r_b$ \uff0c\u5176\u4e2d $r_j$ \u662f\u8981\u4ece\u7b2c $j$ \u4e2aBerland\u57ce\u5e02\u5f00\u59cb\u7684\u9ad8\u901f\u516c\u8def\u7684\u6570\u91cf\u3002\u5e02\u957f\u4eec\u5206\u914d\u7684\u9884\u7b97\u662f\u975e\u5e38\u7d27\u5f20\u7684\uff0c\u53ea\u6709\u5efa\u8bbe\u6240\u6709\u9ad8\u901f\u516c\u8def\u5fc5\u8981\u7684\u4ee3\u4ef7\u3002\u4e5f\u5c31\u662f $r_1+r_2+\\dots+r_b=a+b-1$ \u3002\n\n\u8bf7\u4f60\u5e2e\u52a9Berland\u5efa\u8bbe\u9ad8\u901f\u516c\u8def\uff0c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8981\u6c42\uff1a\n\n- \u6bcf\u6761\u9ad8\u901f\u516c\u8def\u90fd\u662f\u4e00\u6761\u8fde\u63a5Berland\u57ce\u5e02\u548cAlgoland\u57ce\u5e02\u7684\u7ebf\u6bb5\u3002\n- \u6ca1\u6709\u4efb\u4f55\u4e24\u6761\u9ad8\u901f\u516c\u8def\u6709\u4ea4\u70b9\uff0c\u9664\u4e86\u4ea4\u70b9\u662f\u4e24\u6761\u516c\u8def\u7684\u8d77\u70b9\u6216\u7ec8\u70b9\u3002\n- \u9ad8\u901f\u516c\u8def\u5fc5\u987b\u8fde\u63a5\u6240\u6709 $a+b$ \u4e2a\u57ce\u5e02\u3002\n- \u6709 $r_j$ \u6761\u9ad8\u901f\u516c\u8def\u4ece\u7b2c $j$ \u4e2aBerland\u57ce\u5e02\u5f00\u59cb\u3002\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u672c\u9898\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570 $t$ $(1\\le t\\le3000)$ \uff0c\u4ee3\u8868\u6709 $t$ \u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\n\n\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4e3a $a$ \u548c $b$ \u3002\n\n\u7b2c\u4e8c\u884c\u6709 $b$ \u4e2a\u6574\u6570\uff0c\u7b2c $i$ \u4e2a\u6574\u6570\u8868\u793a $r_i$ $(1\\le r_i\\le a)$ \u3002\n\n\u63a5\u4e0b\u6765\u7684 $a$ \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 $xa_i,ya_i$ \u3002\n\n\u518d\u63a5\u4e0b\u6765\u7684 $b$ \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 $xb_i,yb_i$ \u3002\n\n\u5177\u4f53\u610f\u4e49\u89c1\u4e0a\u6587\u63cf\u8ff0\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u8f93\u51fa`YES`\u6216`NO`\uff0c\u4ee3\u8868\u80fd\u5426\u6ee1\u8db3\u8981\u6c42\u3002\n\n\u5982\u679c\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u8f93\u51fa $a+b-1$ \u884c\uff0c\u6bcf\u884c\u6709\u4e24\u4e2a\u6574\u6570 $j$ \u548c $i$\uff0c\u8868\u793a\u4ece\u7b2c $j$ \u4e2aBerland\u57ce\u5e02\u5f80\u7b2c $i$ \u4e2aAlgoland\u57ce\u5e02\u5efa\u8bbe\u4e00\u6761\u9ad8\u901f\u516c\u8def\u3002\u5982\u679c\u6709\u591a\u7ec4\u65b9\u6cd5\uff0c\u8bf7\u8f93\u51fa\u5176\u4e2d\u7684\u4e00\u4e2a"
}