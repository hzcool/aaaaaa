{
    "description": "This is an interactive problem. Remember to flush your output while communicating with the testing program. You may use fflush(stdout) in C++, system.out.flush() in Java, stdout.flush() in Python or flush(output) in Pascal to flush the output. If you use some other programming language, consult its documentation. You may also refer to the guide on interactive problems: <https://codeforces.com/blog/entry/45307>.\n\nThere is a city in which Dixit lives. In the city, there are $ n $ houses. There is  exactly one directed road between every pair of houses. For example, consider two houses A and B, then there is a directed road either from A to B or from B to A but not both. The number of roads leading to the $ i $ -th house is $ k_i $ .\n\nTwo houses A and B are bi-reachable if A is reachable from B and B is reachable from A. We say that house B is reachable from house A when there is a path from house A to house B.\n\nDixit wants to buy two houses in the city, that is, one for living and one for studying. Of course, he would like to travel from one house to another. So, he wants to find a pair of bi-reachable houses A and B. Among all such pairs, he wants to choose one with the maximum value of $ |k_A - k_B| $ , where $ k_i $ is the number of roads leading to the house $ i $ . If more than one optimal pair exists, any of them is suitable.\n\nSince Dixit is busy preparing CodeCraft, can you help him find the desired pair of houses, or tell him that no such houses exist?\n\nIn the problem input, you are not given the direction of each road. You are given \u2014 for each house \u2014 only the number of incoming roads to that house ( $ k_i $ ).\n\nYou are allowed to ask only one type of query from the judge: give two houses A and B, and the judge answers whether B is reachable from A. There is no upper limit on the number of queries. But, you cannot ask more queries after the judge answers \"Yes\" to any of your queries. Also, you cannot ask the same query twice.\n\nOnce you have exhausted all your queries (or the judge responds \"Yes\" to any of your queries), your program must output its guess for the two houses and quit.\n\nSee the Interaction section below for more details.",
    "inputFormat": "The first line contains a single integer $ n $ ( $ 3 \\le n \\le 500 $ ) denoting the number of houses in the city. The next line contains $ n $ space-separated integers $ k_1, k_2, \\dots, k_n $ ( $ 0 \\le k_i \\le n - 1 $ ), the $ i $ -th of them represents the number of incoming roads to the $ i $ -th house.",
    "outputFormat": "To ask a query, print \"? A B\" $ (1 \\leq A,B \\leq N, A\\neq B) $ . The judge will respond \"Yes\" if house B is reachable from house A, or \"No\" otherwise.\n\nTo output the final answer, print \"! A B\", where A and B are bi-reachable with the maximum possible value of $ |k_A - k_B| $ . If there does not exist such pair of houses A and B, output \"! 0 0\".\n\nAfter outputting the final answer, your program must terminate immediately, otherwise you will receive Wrong Answer verdict.\n\nYou cannot ask the same query twice. There is no upper limit to the number of queries you ask, but, you cannot ask more queries after the judge answers \"Yes\" to any of your queries. Your program must now output the final answer (\"! A B\" or \"! 0 0\") and terminate.\n\nIf you ask a query in incorrect format or repeat a previous query, you will get Wrong Answer verdict.\n\nAfter printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get the Idleness limit exceeded error. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.",
    "samples": [
        [
            "3\n1 1 1\nYes",
            "? 1 2\n! 1 2"
        ],
        [
            "4\n1 2 0 3\nNo\nNo\nNo\nNo\nNo\nNo",
            "? 2 1\n? 1 3\n? 4 1\n? 2 3\n? 4 2\n? 4 3\n! 0 0"
        ]
    ],
    "hint": "In the first sample input, we are given a city of three houses with one incoming road each. The user program asks one query: \"? 1 2\": asking whether we can reach from house $ 1 $ to house $ 2 $ . The judge responds with \"Yes\". The user program now concludes that this is sufficient information to determine the correct answer. So, it outputs \"! 1 2\" and quits.\n\nIn the second sample input, the user program queries for six different pairs of houses, and finally answers \"! 0 0\" as it is convinced that no two houses as desired in the question exist in this city.",
    "translation": "\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\n\n\u6709\u4e00\u4e2a\u542b\u6709 $n (3\\le n\\le500)$ \u4e2a\u70b9 $\\frac{n(n-1)}{2}$ \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6709\u4e14\u53ea\u6709\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u7ed9\u51fa $n$ \u548c\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6 $k_i$ \uff0c\u8981\u6c42\u7ed9\u51fa\u4e24\u4e2a\u70b9 $A$\uff0c$B (1\\le A,B\\le n,A\\not=B)$ \uff0c\u8fd9\u4e24\u4e2a\u70b9\u53cc\u5411\u8fde\u901a\uff0c\u5e76\u4e14\u8981\u6c42 $|k_A-k_B|$ \u7684\u503c\u6700\u5927\u3002\n\n\u8be2\u95ee\u683c\u5f0f\uff1a\n\u8f93\u51fa\"? A B\" $(1\\le A,B\\le n,A\\not=B)$ \u6765\u8be2\u95ee $A$ \u662f\u5426\u80fd\u5230\u8fbe $B$\uff0c\u5982\u679c\u53ef\u4ee5\u5c06\u8fd4\u56de\"Yes\"\uff0c\u5426\u5219\u8fd4\u56de\"No\"\u3002\u4e0d\u80fd\u51fa\u73b0\u91cd\u590d\u8be2\u95ee\u3002\u8fd9\u4e00\u9898\u6ca1\u6709\u8be2\u95ee\u6b21\u6570\u9650\u5236\uff0c\u4f46\u662f\u4e00\u65e6\u6536\u5230\"Yes\"\u4e4b\u540e\uff0c**\u4f60\u5c06\u4e0d\u80fd\u518d\u8fdb\u884c\u8be2\u95ee**\u3002\n\n\u56de\u7b54\u683c\u5f0f:\n\u8f93\u51fa\"! A B\"  $(1\\le A,B\\le n,A\\not=B)$ \u8868\u793a\u4f60\u7ed9\u51fa\u7684\u7b54\u6848 $A,B$ \u3002\u7ed9\u51fa\u7b54\u6848\u540e\u8bf7\u7acb\u5373\u7ed3\u675f\u4f60\u7684\u7a0b\u5e8f\uff0c\u907f\u514d\u51fa\u73b0\u4e0d\u5fc5\u8981\u7684\u9519\u8bef\u3002"
}