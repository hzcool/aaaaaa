{
    "description": "You are responsible for installing a gas pipeline along a road. Let's consider the road (for simplicity) as a segment $ [0, n] $ on $ OX $ axis. The road can have several crossroads, but for simplicity, we'll denote each crossroad as an interval $ (x, x + 1) $ with integer $ x $ . So we can represent the road as a binary string consisting of $ n $ characters, where character 0 means that current interval doesn't contain a crossroad, and 1 means that there is a crossroad.\n\nUsually, we can install the pipeline along the road on height of $ 1 $ unit with supporting pillars in each integer point (so, if we are responsible for $ [0, n] $ road, we must install $ n + 1 $ pillars). But on crossroads we should lift the pipeline up to the height $ 2 $ , so the pipeline won't obstruct the way for cars.\n\nWe can do so inserting several zig-zag-like lines. Each zig-zag can be represented as a segment $ [x, x + 1] $ with integer $ x $ consisting of three parts: $ 0.5 $ units of horizontal pipe + $ 1 $ unit of vertical pipe + $ 0.5 $ of horizontal. Note that if pipeline is currently on height $ 2 $ , the pillars that support it should also have length equal to $ 2 $ units.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1207C/f1dfe38b83de03ccc78e9e23fedbdc3223f970d0.png)Each unit of gas pipeline costs us $ a $ bourles, and each unit of pillar \u2014 $ b $ bourles. So, it's not always optimal to make the whole pipeline on the height $ 2 $ . Find the shape of the pipeline with minimum possible cost and calculate that cost.\n\nNote that you must start and finish the pipeline on height $ 1 $ and, also, it's guaranteed that the first and last characters of the input string are equal to 0.",
    "inputFormat": "The fist line contains one integer $ T $ ( $ 1 \\le T \\le 100 $ ) \u2014 the number of queries. Next $ 2 \\cdot T $ lines contain independent queries \u2014 one query per two lines.\n\nThe first line contains three integers $ n $ , $ a $ , $ b $ ( $ 2 \\le n \\le 2 \\cdot 10^5 $ , $ 1 \\le a \\le 10^8 $ , $ 1 \\le b \\le 10^8 $ ) \u2014 the length of the road, the cost of one unit of the pipeline and the cost of one unit of the pillar, respectively.\n\nThe second line contains binary string $ s $ ( $ |s| = n $ , $ s_i \\in \\{0, 1\\} $ , $ s_1 = s_n = 0 $ ) \u2014 the description of the road.\n\nIt's guaranteed that the total length of all strings $ s $ doesn't exceed $ 2 \\cdot 10^5 $ .",
    "outputFormat": "Print $ T $ integers \u2014 one per query. For each query print the minimum possible cost of the constructed pipeline.",
    "samples": [
        [
            "4\n8 2 5\n00110010\n8 1 1\n00110010\n9 100000000 100000000\n010101010\n2 5 1\n00\n",
            "94\n25\n2900000000\n13\n"
        ]
    ],
    "hint": "The optimal pipeline for the first query is shown at the picture above.\n\nThe optimal pipeline for the second query is pictured below:\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1207C/2782d7e4c7012251045217f9f050b1e333f47c33.png)The optimal (and the only possible) pipeline for the third query is shown below:\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1207C/7e72ed8fa647ff66b04ca0425394c874c1b110fe.png)The optimal pipeline for the fourth query is shown below:\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1207C/248de9c02a0298296e2131b26213178e9c6ad6ba.png)",
    "translation": "\u4f60\u9700\u8981\u5728\u57ce\u5e02\u91cc\u4fee\u5efa\u7ba1\u9053\u548c\u652f\u67f1\uff0c\u7ba1\u9053\u548c\u652f\u67f1\u7684\u5355\u4f4d\u957f\u5ea6\u7684\u4ef7\u683c\u5206\u522b\u4e3a$a,b$\n\n\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684$01$\u5e8f\u5217\uff0c\u5176\u4e2d$1$\u8868\u793a\u8fd9\u91cc\u9700\u8981\u901a\u8f66\uff0c$0$\u8868\u793a\u8fd9\u91cc\u4e0d\u9700\u8981\u901a\u8f66\uff0c\u9ad8\u5ea6\u4e3a$2$\u7684\u5730\u65b9\u624d\u53ef\u4ee5\u901a\u8f66(\u4fdd\u8bc1\u5e8f\u5217\u7684\u5934\u5c3e\u4e0d\u9700\u8981\u901a\u8f66)\n\n\u5982\u56fe\uff0c\u7ea2\u8272\u8868\u793a\u7ba1\u9053\uff0c\u9ed1\u8272\u8868\u793a\u652f\u67f1\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u6bb5\u5355\u4f4d\u533a\u95f4\u5efa\u7acb\u4e00\u6761S\u5f62\u7ebf\u6761\uff0c\u6bcf\u4e2aS\u5f62\u53ef\u4ee5\u8868\u793a\u4e3a\u8be5\u6bb5\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a$0.5$\u4e2a\u5355\u4f4d\u7684\u6c34\u5e73\u7ba1\u9053+$1$\u4e2a\u5355\u4f4d\u7684\u5782\u76f4\u7ba1\u9053+$0.5$\u4e2a\u5355\u4f4d\u7684\u6c34\u5e73\u7ba1\u9053\n\n\u6bcf\u4e00\u6bb5\u7684\u5355\u4f4d\u533a\u95f4\u5de6\u53f3\u90fd\u6709\u652f\u67f1\u652f\u6491\uff0c\u652f\u67f1\u7684\u9ad8\u5ea6\u7b49\u4e8e\u7ba1\u9053\u7aef\u70b9\u7684\u9ad8\u5ea6\n\n\u4f60\u9700\u8981\u4fdd\u8bc1\u6240\u6709\u901a\u8f66\u7684\u5730\u65b9\u9ad8\u5ea6\u4e3a$2$\u7684\u540c\u65f6\uff0c\u5efa\u7ba1\u9053\u548c\u652f\u67f1\u7684\u8d39\u7528\u603b\u548c\u6700\u5c0f"
}