{
    "description": "So we got bored and decided to take our own guess at how would \"Inception\" production go if the budget for the film had been terribly low.\n\nThe first scene we remembered was the one that features the whole city bending onto itself:\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1167G/0b53676cfab9882985977cc71fbf9dc06f9ec6d6.png)It feels like it will require high CGI expenses, doesn't it? Luckily, we came up with a similar-looking scene which was a tiny bit cheaper to make.\n\nFirstly, forget about 3D, that's hard and expensive! The city is now represented as a number line (infinite to make it easier, of course).\n\nSecondly, the city doesn't have to look natural at all. There are $ n $ buildings on the line. Each building is a square $ 1 \\times 1 $ . Buildings are numbered from $ 1 $ to $ n $ in ascending order of their positions. Lower corners of building $ i $ are at integer points $ a_i $ and $ a_i + 1 $ of the number line. Also the distance between any two neighbouring buildings $ i $ and $ i + 1 $ doesn't exceed $ d $ (really, this condition is here just to make the city look not that sparse). Distance between some neighbouring buildings $ i $ and $ i + 1 $ is calculated from the lower right corner of building $ i $ to the lower left corner of building $ i + 1 $ .\n\nFinally, curvature of the bend is also really hard to simulate! Let the bend at some integer coordinate $ x $ be performed with the following algorithm. Take the ray from $ x $ to $ +\\infty $ and all the buildings which are on this ray and start turning the ray and the buildings counter-clockwise around point $ x $ . At some angle some building will touch either another building or a part of the line. You have to stop bending there (implementing buildings crushing is also not worth its money).\n\nLet's call the angle between two rays in the final state the terminal angle $ \\alpha_x $ .\n\nThe only thing left is to decide what integer point $ x $ is the best to start bending around. Fortunately, we've already chosen $ m $ candidates to perform the bending.\n\nSo, can you please help us to calculate terminal angle $ \\alpha_x $ for each bend $ x $ from our list of candidates?",
    "inputFormat": "The first line contains two integer numbers $ n $ and $ d $ ( $ 1 \\le n \\le 2 \\cdot 10^5 $ , $ 0 \\le d \\le 7000 $ ) \u2014 the number of buildings and the maximum distance between any pair of neighbouring buildings, respectively.\n\nThe second line contains $ n $ integers $ a_1, a_2, \\dots, a_n $ ( $ a_1 = 0 $ , $ 0 < a_{i + 1} - a_i \\le d + 1 $ ) \u2014 coordinates of left corners of corresponding buildings in ascending order.\n\nThe third line contains single integer $ m $ ( $ 1 \\le m \\le 2 \\cdot 10^5 $ ) \u2014 the number of candidates.\n\nThe fourth line contains $ m $ integers $ x_1, x_2, \\dots, x_m $ ( $ 0 \\le x_i \\le a_n + 1 $ , $ x_i < x_{i + 1} $ ) \u2014 the coordinates of bends you need to calculate terminal angles for in ascending order.",
    "outputFormat": "Print $ m $ numbers. For each bend $ x_i $ print terminal angle $ \\alpha_{x_i} $ (in radians).\n\nYour answer is considered correct if its absolute error does not exceed $ 10^{-9} $ .\n\nFormally, let your answer be $ a $ , and the jury's answer be $ b $ . Your answer is accepted if and only if $ |a - b| \\le 10^{-9} $ .",
    "samples": [
        [
            "3 5\n0 5 7\n9\n0 1 2 3 4 5 6 7 8\n",
            "1.570796326794897\n1.570796326794897\n0.785398163397448\n0.927295218001612\n0.785398163397448\n1.570796326794897\n1.570796326794897\n1.570796326794897\n1.570796326794897\n"
        ],
        [
            "2 7\n0 4\n3\n1 3 4\n",
            "1.570796326794897\n0.927295218001612\n1.570796326794897\n"
        ],
        [
            "5 0\n0 1 2 3 4\n6\n0 1 2 3 4 5\n",
            "1.570796326794897\n3.141592653589793\n3.141592653589793\n3.141592653589793\n3.141592653589793\n1.570796326794897\n"
        ]
    ],
    "hint": "Here you can see the picture of the city for the first example and the bend at position $ 2 $ for it. The angle you need to measure is marked blue. You can see that it's equal to $ \\frac \\pi 4 $ .\n\nYou can see that no pair of neighbouring buildings have distance more than $ 4 $ between them. $ d = 4 $ would also suffice for that test.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1167G/2ff078fc26032edaeec4f4d3bd3552ea814bf3aa.png)",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\r\n\r\n\u6211\u4eec\u6e10\u611f\u65e0\u8da3\uff0c\u5e76\u6253\u7b97\u731c\u6d4b\u5728\u8d85\u4f4e\u9884\u7b97\u4e0b\uff0c\u5f71\u7247\u4f1a\u5982\u4f55\u8fdb\u884c\u300c\u5f00\u5934\u300d\u7684\u5236\u4f5c\u3002\r\n\r\n\u6211\u4eec\u4ecd\u8bb0\u5f97\u7684\u7b2c\u4e00\u4e2a\u573a\u666f\u4e2d\uff0c\u6574\u4e2a\u57ce\u5e02\u90fd\u626d\u66f2\u4e86\uff1a  \r\n![](https://cdn.luogu.org/upload/vjudge_pic/CF1167G/0b53676cfab9882985977cc71fbf9dc06f9ec6d6.png)  \r\n\u5b83\u6216\u8bb8\u9700\u8981\u5f88\u9ad8\u7684 CGI \u8d39\u7528\uff0c\u4f46\u5e78\u8fd0\u5730\uff0c\u6211\u4eec\u6709\u53e6\u4e00\u4e2a\u7c7b\u4f3c\u7684\u5ec9\u4ef7\u65b9\u6848\u3002\r\n\r\n\u9996\u5148\uff0c\u5fd8\u5374\u4e00\u5207\u7684 3D\uff0c\u90a3\u4e9b\u53ea\u662f\u571f\u8c6a\u7684\u73a9\u5177\uff01  \r\n\u73b0\u5728\uff0c\u57ce\u5e02\u4ee5\u4e00\u6761\u6570\u8f74\u8868\u793a\u3002\r\n\r\n\u7b2c\u4e8c\uff0c\u8fd9\u4e2a\u57ce\u5e02\u6ca1\u6709\u5fc5\u8981\u7b26\u5408\u5e38\u7406\u3002  \r\n\u6570\u8f74\u4e0a\u6709 $n$ \u4e2a\u5efa\u7b51\u7269\uff0c\u5efa\u7b51\u7269\u90fd\u53ef\u4ee5\u89c6\u4f5c $1 \\times 1$ \u7684\u6b63\u65b9\u5f62\u3002  \r\n**\u5efa\u7b51\u7269\u6309\u5176\u4f4d\u7f6e\u7684\u5347\u5e8f\uff0c\u4f9d\u6b21\u7f16\u53f7\u4e3a $1,\\dots,n$\u3002** \r\n\r\n\u7b2c $i$ \u4e2a\u5efa\u7b51\u7269\u7684\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0b\u89d2\u5206\u522b\u4f4d\u4e8e $a_i$ \u548c $a_i + 1$ \u5904\u3002  \r\n\u5e76\u4e14\uff0c\u4fdd\u8bc1\u76f8\u90bb\u5efa\u7b51\u7269\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $d$\uff08\u5355\u7eaf\u4e3a\u4e86\u8ba9\u57ce\u5e02\u770b\u4e0a\u53bb\u4e0d\u90a3\u4e48\u7a00\u758f\uff09\u3002  \r\n\u5176\u4e2d\u7b2c $i$ \u4e2a\u548c\u7b2c $i + 1$ \u4e2a\u5efa\u7b51\u7269\u7684\u8ddd\u79bb\u4e3a\u524d\u8005\u7684\u53f3\u4e0b\u89d2\u548c\u540e\u8005\u7684\u5de6\u4e0b\u89d2\u7684\u8ddd\u79bb\u3002\r\n\r\n\u6700\u540e\uff0c\u66f2\u7387\u4e5f\u975e\u5e38\u96be\u4ee5\u590d\u73b0\u3002  \r\n\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u7b97\u6cd5\u6765\u5904\u7406\u6574\u70b9 $x$ \u5904\u7684\u5f2f\u66f2\uff1a  \r\n\u4ee4\u4e00\u6761\u4ece $x$ \u5411 $+\\infty$ \u5ef6\u4f38\u7684\u5c04\u7ebf\u53ca\u5176\u7ecf\u8fc7\u7684\u6240\u6709\u5efa\u7b51\u7269\u7ed5\u70b9 $x$ \u5f00\u59cb\u9006\u65f6\u9488\u8f6c\u52a8\u3002\u76f4\u5230\u67d0\u4e2a\u89d2\u5ea6\uff0c\u4e00\u4e9b\u5efa\u7b51\u7269\u5c06\u4f1a\u89e6\u53ca\u5176\u4ed6\u5efa\u7b51\u7269\u6216\u8005\u6570\u8f74\u7684\u4e00\u90e8\u5206\u3002  \r\n\u8fd9\u4e2a\u89d2\u5ea6\u5c31\u662f\u5f2f\u66f2\u7684\u7ed3\u679c\u3002  \r\n\uff08\u5efa\u7b51\u7269\u88ab\u7834\u574f\u4e5f\u4e0d\u4f1a\u82b1\u8d39\u989d\u5916\u7ecf\u8d39\uff09\r\n\r\n**\u6700\u7ec8\u72b6\u6001\u4e0b\uff0c\u6211\u4eec\u79f0\u4e24\u6761\u5c04\u7ebf\u4e4b\u95f4\u7684\u89d2\u5ea6\u4e3a\u6700\u7ec8\u89d2\u5ea6 $\\alpha_x$\u3002** \r\n\r\n\u6700\u540e\u7684\u95ee\u9898\u5728\u4e8e\u5bfb\u627e\u6700\u4f73\u7684 $x$ \u5e76\u8fdb\u884c\u5f2f\u66f2\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u4e86 $m$ \u4e2a\u5019\u9009\u70b9\u3002\r\n\r\n\u4e8e\u662f\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u5e2e\u52a9\u6211\u4eec\u5bf9\u4e8e\u5019\u9009\u70b9\u4e2d\u7684\u6240\u6709 $x$\uff0c\u8ba1\u7b97\u6240\u6709\u7684\u6700\u7ec8\u89d2\u5ea6 $\\alpha_x$\u3002\r\n\r\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\r\n\r\n**\u8f93\u5165\u683c\u5f0f\uff1a**\r\n\r\n\u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570 $n,d\\;(1 \\le n \\le 2 \\cdot 10^5,0 \\le d \\le 7000)$\uff0c\u8868\u793a\u5efa\u7b51\u7269\u7684\u4e2a\u6570\u548c\u76f8\u90bb\u5efa\u7b51\u7269\u7684\u6700\u5927\u8ddd\u79bb\u3002  \r\n\u7b2c\u4e8c\u884c\uff0c$n$ \u4e2a\u6574\u6570 $a_1,\\dots,a_n\\;(a_1 = 0,0 < a_{i + 1} - a_i \\le d + 1)$\uff0c\u8868\u793a\u5efa\u7b51\u7269\u7684\u5750\u6807\u3002  \r\n\u7b2c\u4e09\u884c\uff0c\u4e00\u4e2a\u6574\u6570 $m\\;(1 \\le m \\le 2 \\cdot 10^5)$\uff0c\u8868\u793a\u5019\u9009\u70b9\u7684\u4e2a\u6570\u3002  \r\n\u7b2c\u56db\u884c\uff0c$m$ \u4e2a\u6574\u6570 $x_1,\\dots,x_m\\;(0 \\le x_i \\le a_n + 1,x_i < x_{i + 1})$\uff0c\u8868\u793a\u5019\u9009\u70b9\u7684\u5750\u6807\u3002\r\n\r\n**\u8f93\u51fa\u683c\u5f0f\uff1a**\r\n\r\n\u5bf9\u4e8e\u6bcf\u4e2a $x_i$\uff0c\u8f93\u51fa $\\alpha_{x_i}$\uff08\u4ee5\u5f27\u5ea6\u8868\u793a\uff09\u3002  \r\n\u8bef\u5dee\u4e0d\u8d85\u8fc7 $10^{-9}$\u3002\r\n\r\n## \u8bf4\u660e\r\n\r\n\u4f60\u53ef\u4ee5\u5728\u6b64\u770b\u89c1\u7b2c\u4e00\u4e2a\u6837\u4f8b\u4e2d\u7684\u57ce\u5e02\u548c $2$ \u5904\u7684\u5f2f\u66f2\u3002\u4f60\u9700\u8981\u6d4b\u91cf\u7684\u89d2\u5ea6\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e3a\u84dd\u8272\u3002\u5b83\u7b49\u4e8e $\\frac \\pi 4$\u3002\r\n\r\n\u6ca1\u6709\u4efb\u4f55\u4e00\u5bf9\u5efa\u7b51\u7269\u7684\u8ddd\u79bb\u8d85\u8fc7 $4$\uff0c\u6240\u4ee5\u5f53 $d = 4$ \u65f6\u4e5f\u5408\u6cd5\u3002\r\n\r\n![](https://cdn.luogu.org/upload/vjudge_pic/CF1167G/2ff078fc26032edaeec4f4d3bd3552ea814bf3aa.png)"
}