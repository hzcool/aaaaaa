{
    "description": "A little girl loves problems on trees very much. Here's one of them.\n\nA tree is an undirected connected graph, not containing cycles. The degree of node $ x $ in the tree is the number of nodes $ y $ of the tree, such that each of them is connected with node $ x $ by some edge of the tree.\n\nLet's consider a tree that consists of $ n $ nodes. We'll consider the tree's nodes indexed from 1 to $ n $ . The cosidered tree has the following property: each node except for node number 1 has the degree of at most 2.\n\nInitially, each node of the tree contains number 0. Your task is to quickly process the requests of two types:\n\n- Request of form: $ 0 $ $ v $ $ x $ $ d $ . In reply to the request you should add $ x $ to all numbers that are written in the nodes that are located at the distance of at most $ d $ from node $ v $ . The distance between two nodes is the number of edges on the shortest path between them.\n- Request of form: $ 1 $ $ v $ . In reply to the request you should print the current number that is written in node $ v $ .",
    "inputFormat": "The first line contains integers $ n $ ( $ 2<=n<=10^{5} $ ) and $ q $ ( $ 1<=q<=10^{5} $ ) \u2014 the number of tree nodes and the number of requests, correspondingly.\n\nEach of the next $ n-1 $ lines contains two integers $ u_{i} $ and $ v_{i} $ ( $ 1<=u_{i},v_{i}<=n $ , $ u_{i}\u2260v_{i} $ ), that show that there is an edge between nodes $ u_{i} $ and $ v_{i} $ . Each edge's description occurs in the input exactly once. It is guaranteed that the given graph is a tree that has the property that is described in the statement.\n\nNext $ q $ lines describe the requests.\n\n- The request to add has the following format: $ 0 $ $ v $ $ x $ $ d $ ( $ 1<=v<=n $ , $ 1<=x<=10^{4} $ , $ 1<=d&lt;n $ ).\n- The request to print the node value has the following format: $ 1 $ $ v $ ( $ 1<=v<=n $ ).\n\nThe numbers in the lines are separated by single spaces.",
    "outputFormat": "For each request to print the node value print an integer \u2014 the reply to the request.",
    "samples": [
        [
            "3 6\n1 2\n1 3\n0 3 1 2\n0 2 3 1\n0 1 5 2\n1 1\n1 2\n1 3\n",
            "9\n9\n6\n"
        ],
        [
            "6 11\n1 2\n2 5\n5 4\n1 6\n1 3\n0 3 1 3\n0 3 4 5\n0 2 1 4\n0 1 5 5\n0 4 6 2\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n",
            "11\n17\n11\n16\n17\n11\n"
        ]
    ],
    "hint": "",
    "translation": "\u7ed9\u5b9a\u4e00\u68f5\u65e0\u8fb9\u6743\u7684\u6811\uff0c\u9664\u4e86\u6839\u8282\u70b9\u4ee5\u5916\u7684\u8282\u70b9\u5ea6\u6570\u4e0d\u8d85\u8fc7 $2$\uff0c\u6709\u4e24\u79cd\u64cd\u4f5c\n\n- \uff08`0 v x d`\uff09\u5c06\u8ddd\u79bb $u$ \u8282\u70b9 $d$ \u8ddd\u79bb\u4e4b\u5185\u7684\u8282\u70b9\u7684\u503c\u52a0\u4e0a $x$\n- \uff08`1 v`\uff09\u8be2\u95ee $u$ \u8282\u70b9\u7684\u503c\n\n$n\\le 100000$\uff0c$q\\le 100000$"
}