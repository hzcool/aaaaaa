{
    "description": "The city of D consists of $ n $ towers, built consecutively on a straight line. The height of the tower that goes $ i $ -th (from left to right) in the sequence equals $ h_{i} $ . The city mayor decided to rebuild the city to make it beautiful. In a beautiful city all towers are are arranged in non-descending order of their height from left to right.\n\nThe rebuilding consists of performing several (perhaps zero) operations. An operation constitutes using a crane to take any tower and put it altogether on the top of some other neighboring tower. In other words, we can take the tower that stands $ i $ -th and put it on the top of either the $ (i-1) $ -th tower (if it exists), or the $ (i+1) $ -th tower (of it exists). The height of the resulting tower equals the sum of heights of the two towers that were put together. After that the two towers can't be split by any means, but more similar operations can be performed on the resulting tower. Note that after each operation the total number of towers on the straight line decreases by 1.\n\nHelp the mayor determine the minimum number of operations required to make the city beautiful.",
    "inputFormat": "The first line contains a single integer $ n $ ( $ 1<=n<=5000 $ ) \u2014 the number of towers in the city. The next line contains $ n $ space-separated integers: the $ i $ -th number $ h_{i} $ ( $ 1<=h_{i}<=10^{5} $ ) determines the height of the tower that is $ i $ -th (from left to right) in the initial tower sequence.",
    "outputFormat": "Print a single integer \u2014 the minimum number of operations needed to make the city beautiful.",
    "samples": [
        [
            "5\n8 2 7 3 1\n",
            "3\n"
        ],
        [
            "3\n5 2 1\n",
            "2\n"
        ]
    ],
    "hint": "",
    "translation": "\u6709$n(1<=n<=5000)$\u5ea7\u5854\u6392\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\uff0c\u4ece\u5de6\u5230\u53f3\u6bcf\u4e2a\u5854\u7684\u9ad8\u5ea6\u5206\u522b\u4e3a$h_i(1<=h_i<=100000)$.\n\n\u6bcf\u6b21\u64cd\u4f5c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u5ea7\u5854\uff08\u5047\u8bbe\u662f\u7b2c$i$\u5ea7\uff09\uff0c\u7528\u540a\u8f66\u628a\u5b83\u540a\u8d77\u6765\uff0c\u7136\u540e\u653e\u5230\u4e0e\u5b83\u76f8\u90bb\u7684\u4e00\u5ea7\u5854\u4e0a\uff08\u53ef\u4ee5\u662f\u7b2c$i-1$\u5ea7\u4e5f\u53ef\u4ee5\u662f\u7b2c$i+1$\u5ea7\uff09\uff0c\u8fd9\u6837\uff0c\u65b0\u5854\u7684\u9ad8\u5ea6\u4e3a\u4e24\u5ea7\u5854\u7684\u548c\uff0c\u5b8c\u6210\u64cd\u4f5c\u540e\uff0c\u5854\u7684\u603b\u6570\u51cf\u5c11\u4e00\u5ea7\u3002\n\n\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u5f97\u6240\u6709\u7684\u5854\u4ece\u5de6\u5230\u53f3\u5f62\u6210\u4e00\u4e2a**\u975e\u9012\u51cf**\u5e8f\u5217\u3002"
}