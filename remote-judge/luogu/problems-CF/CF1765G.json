{
    "description": "This is an interactive problem. You have to use flush operation right after printing each line. For example, in C++ you should use the function fflush(stdout), in Java or Kotlin \u2014 System.out.flush(), and in Python \u2014 sys.stdout.flush().\n\nThe jury has a string $ s $ consisting of characters 0 and/or 1. The first character of this string is 0. The length of this string is $ n $ . You have to guess this string. Let's denote $ s[l..r] $ as the substring of $ s $ from $ l $ to $ r $ (i. e. $ s[l..r] $ is the string $ s_ls_{l+1} \\dots s_r $ ).\n\nLet the prefix function of the string $ s $ be an array $ [p_1, p_2, \\dots, p_n] $ , where $ p_i $ is the greatest integer $ j \\in [0, i-1] $ such that $ s[1..j] = s[i-j+1..i] $ . Also, let the antiprefix function of the string $ s $ be an array $ [q_1, q_2, \\dots, q_n] $ , where $ q_i $ is the greatest integer $ j \\in [0, i-1] $ such that $ s[1..j] $ differs from $ s[i-j+1..i] $ in every position.\n\nFor example, for the string 011001, its prefix function is $ [0, 0, 0, 1, 1, 2] $ , and its antiprefix function is $ [0, 1, 1, 2, 3, 4] $ .\n\nYou can ask queries of two types to guess the string $ s $ :\n\n- $ 1 $ $ i $ \u2014 \"what is the value of $ p_i $ ?\";\n- $ 2 $ $ i $ \u2014 \"what is the value of $ q_i $ ?\".\n\nYou have to guess the string by asking no more than $ 789 $ queries. Note that giving the answer does not count as a query.\n\nIn every test and in every test case, the string $ s $ is fixed beforehand.",
    "inputFormat": "",
    "outputFormat": "Initially, the jury program sends one integer $ t $ ( $ 1 \\le t \\le 100 $ ) \u2014 the number of test cases.\n\nAt the start of each test case, the jury program sends one integer $ n $ ( $ 2 \\le n \\le 1000 $ ) \u2014 the length of the string.\n\nAfter that, your program can submit queries to the jury program by printing one of the following lines (do not forget to flush the output after printing a line!):\n\n- $ 1 $ $ i $ \u2014 the query \"what is the value of $ p_i $ ?\";\n- $ 2 $ $ i $ \u2014 the query \"what is the value of $ q_i $ ?\".\n\nFor every query, the jury prints one integer on a separate line. It is either:\n\n- the answer for your query, if the query is correct and you haven't exceeded the query limit;\n- or the integer $ -1 $ , if your query is incorrect (for example, the constraint $ 1 \\le i \\le n $ is not met) or if you have asked too many queries while processing the current test case.\n\nTo submit the answer, your program should send a line in the following format (do not forget to flush the output after printing a line!):\n\n- $ 0 $ $ s $ , where $ s $ is a sequence of $ n $ characters 0 and/or 1.\n\nIf your guess is correct, the jury program will print one integer $ 1 $ on a separate line, indicating that you may proceed to the next test case (or terminate the program, if it was the last test case) and that the number of queries you have asked is reset. If it is not correct, the jury program will print one integer $ -1 $ on a separate line.\n\nAfter your program receives $ -1 $ as the answer, it should immediately terminate. This will lead to your submission receiving the verdict \"Wrong Answer\". If your program does not terminate, the verdict of your submission is undefined.",
    "samples": [
        [
            "2 // 2 test cases\n6 // n = 6\n\n0 // p[3] = 0\n\n1 // q[2] = 1\n\n4 // q[6] = 4\n\n1 // p[4] = 1\n\n1 // answer is correct\n5 // n = 5\n\n1 // p[2] = 1\n\n2 // q[4] = 2\n\n2 // q[5] = 2\n\n1 // answer is correct",
            "1 3      // what is p[3]?\n\n2 2      // what is q[2]?\n\n2 6      // what is q[6]?\n\n1 4      // what is p[4]?\n\n0 011001 // the guess is 011001\n\n\n1 2      // what is p[2]?\n\n2 4      // what is q[4]?\n\n2 5      // what is q[5]?\n\n0 00111  // the guess is 00111"
        ]
    ],
    "hint": "The example contains one possible way of interaction in a test where $ t = 2 $ , and the strings guessed by the jury are 011001 and 00111. Note that everything after the // sign is a comment that explains which line means what in the interaction. The jury program won't print these comments in the actual problem, and you shouldn't print them. The empty lines are also added for your convenience, the jury program won't print them, and your solution should not print any empty lines.",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\n\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\n\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684 01 \u4e32 $s$\u3002\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e00\u5b9a\u4e3a $0$\uff0c\u5373 $s_1 = 0$\uff08\u6ce8\u610f\u672c\u9898\u4e0b\u6807\u5747\u4ece $1$ \u5f00\u59cb\uff09\u3002\u8bb0 $s[l\\dots r]$ \u4e3a\u5b50\u4e32 $s_ls_{l+1}\\dots s_r$\u3002\u4f60\u9700\u8981\u731c\u51fa\u8fd9\u4e2a 01 \u4e32\u3002\n\n\u8bb0 $s$ \u7684\u524d\u7f00\u51fd\u6570\u4e3a $p$\uff0c\u5373 $p_i$ \u8868\u793a\u6700\u5927\u7684 $j$\uff0c\u6ee1\u8db3 $0\\le j < i$ \u4e14 $s[1\\dots j] = s[i - j + 1\\dots i]$\u3002\u8bb0 $s$ \u7684\u53cd\u524d\u7f00\u51fd\u6570\u4e3a $q$\uff0c\u5373 $q_i$ \u8868\u793a\u6700\u5927\u7684 $j$\uff0c\u6ee1\u8db3 $0\\le j < i$ \u4e14 $s[1\\dots j] $ \u4e0e $ s[i - j + 1\\dots i]$ \u7684\u6bcf\u4e00\u4f4d\u90fd\u4e0d\u76f8\u540c\u3002\n\n\u4f8b\u5982\u5f53 $s=011001$ \u65f6\uff0c$p=[0,0,0,1,1,2]$\uff0c$q=[0,1,1,2,3,4]$\u3002\n\n\u4f60\u53ef\u4ee5\u8be2\u95ee\u4e24\u79cd\u95ee\u9898\uff1a\n\n- 1 $\\,i$\uff1a\u8868\u793a\u8be2\u95ee $p_i$ \u7684\u503c\uff1b\n- 2 $\\,i$\uff1a\u8868\u793a\u8be2\u95ee $q_i$ \u7684\u503c\u3002\n\n\u4f60\u9700\u8981\u5728 $789$ \u6b21 **\u8be2\u95ee** \u64cd\u4f5c\u5185\u5f97\u5230\u7b54\u6848\uff0c\u5373\u8f93\u51fa $s$ \u5e76\u4e0d\u7b97\u5728\u4e0a\u8ff0\u64cd\u4f5c\u6570\u9650\u5236\u5185\u3002\n\n\u4ea4\u4e92\u5668 **\u4e0d\u662f\u81ea\u9002\u5e94\u7684**\uff0c\u5373\u6240\u6709\u6d4b\u8bd5\u70b9\u7684\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684 $s$ \u4e0d\u4f1a\u968f\u7740\u8bc4\u6d4b\u800c\u6539\u53d8\u3002\n\n### \u8f93\u5165/\u8f93\u51fa\u683c\u5f0f\n\n\u5f00\u59cb\u8bfb\u5165\u4e00\u4e2a\u6574\u6570 $t$\uff08$1\\le t\\le 100$\uff09\u8868\u793a\u6570\u636e\u7ec4\u6570\uff0c\u63a5\u4e0b\u6765\u4f9d\u6b21\u8bfb\u5165\u5404\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u5bf9\u4e8e\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 $n$\uff08$2\\le n\\le 1000$\uff09\u8868\u793a $s$ \u7684\u957f\u5ea6\u3002\n\n\u4e4b\u540e\u4f60\u9700\u8981\u8f93\u51fa\u4f60\u7684\u8be2\u95ee\u6216\u662f\u8f93\u51fa\u4f60\u731c\u7684\u4e32 $s$\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a\n\n- 1 $\\,i$\uff1a\u8868\u793a\u8be2\u95ee $p_i$ \u7684\u503c\uff1b\n- 2 $\\,i$\uff1a\u8868\u793a\u8be2\u95ee $q_i$ \u7684\u503c\uff1b\n- 0 $\\,s$\uff1a\u8868\u793a\u4f60\u731c\u51fa\u7684\u4e32 $s$\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u4ea4\u4e92\u5668\u8fd4\u56de\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff1a\n\n- \u5bf9\u4e8e\u524d\u4e24\u79cd\u8be2\u95ee\uff0c\u5f53\u4f60\u7684\u8be2\u95ee\u5408\u6cd5\u4e14\u672a\u8d85\u8fc7\u6b21\u6570\u9650\u5236\u65f6\uff0c\u4ea4\u4e92\u5668\u8fd4\u56de\u7b54\u6848\uff1b\u5426\u5219\u8fd4\u56de $-1$\uff1b\n- \u5bf9\u4e8e\u7b2c\u4e09\u79cd\u8be2\u95ee\uff0c\u82e5\u7b54\u6848\u6b63\u786e\u8fd4\u56de $1$\uff0c\u5426\u5219\u8fd4\u56de $0$\u3002\n\n\u82e5\u7b2c\u4e09\u79cd\u8be2\u95ee\u8fd4\u56de\u4e86 $1$\uff0c\u8868\u793a\u7b54\u6848\u6b63\u786e\uff0c\u6b64\u65f6\u4f60\u5e94\u8be5\u8fdb\u5165\u4e0b\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff08\u82e5\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e86\u5c31\u7ed3\u675f\u7a0b\u5e8f\uff09\u5e76\u4e14\u8be2\u95ee\u6b21\u6570\u6e05\u96f6\u3002\u82e5\u4ea4\u4e92\u5668\u8fd4\u56de\u4e86 $-1$\uff0c\u4e0d\u8bba\u54ea\u79cd\u60c5\u51b5\uff0c\u4f60\u90fd\u5e94\u8be5\u7acb\u5373\u7ed3\u675f\u7a0b\u5e8f\uff0c\u5f97\u5230 $\\texttt{Wrong Answer}$\u3002\n\n\u6837\u4f8b\u89e3\u91ca\u89c1\u6837\u4f8b\u8f93\u5165/\u8f93\u51fa\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u8bfb\u5165\u5230\u4e5f\u4e0d\u5e94\u8be5\u8f93\u51fa\u6837\u4f8b\u4e2d\u6ce8\u91ca\u5185\u5bb9\u4e0e\u7a7a\u884c"
}