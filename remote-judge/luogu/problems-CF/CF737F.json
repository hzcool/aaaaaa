{
    "description": "After one of celebrations there is a stack of dirty plates in Nikita's kitchen. Nikita has to wash them and put into a dryer. In dryer, the plates should be also placed in a stack also, and the plates sizes should increase down up. The sizes of all plates are distinct.\n\nNikita has no so much free space, specifically, he has a place for only one more stack of plates. Therefore, he can perform only such two operations:\n\n- Take any number of plates from $ 1 $ to $ a $ from the top of the dirty stack, wash them and put them to the intermediate stack.\n- Take any number of plates from $ 1 $ to $ b $ from the top of the intermediate stack and put them to the stack in the dryer.\n\nNote that after performing each of the operations, the plates are put in the same order as they were before the operation.\n\nYou are given the sizes of the plates $ s_{1},s_{2},...,s_{n} $ in the down up order in the dirty stack, and integers $ a $ and $ b $ . All the sizes are distinct. Write a program that determines whether or not Nikita can put the plates in increasing down up order in the dryer. If he is able to do so, the program should find some sequence of operations (not necessary optimal) to achieve it.",
    "inputFormat": "The first line contains three integers $ n $ , $ a $ and $ b $ ( $ 1<=n<=2000 $ , $ 1<=a,b<=n $ ). The second line contains integers $ s_{1},s_{2},...,s_{n} $ ( $ 1<=s_{i}<=n $ ) \u2014 the sizes of the plates in down up order. All the sizes are distinct.",
    "outputFormat": "In the first line print \"YES\" if there is a solution. In this case, in the second line print integer $ k $ \u2014 the number of operations. Then in $ k $ lines print the operations, one per line. Each operation is described by two integers $ t_{j} $ and $ c_{j} $ , where $ t_{j}=1 $ , if the operation is to wash the top $ c_{j} $ places from the dirty stack and put them onto the intermediate stack, and $ t_{j}=2 $ , if the operation is to move th top $ c_{j} $ plates from the intermediate stack to the dryer.\n\nIn case there is no solution, print single line \"NO\".\n\nIf there are multiple solutions, print any of them. Note that it is not necessary to minimize the number of operations.",
    "samples": [
        [
            "6 2 3\n2 3 6 4 1 5\n",
            "YES\n8\n1 2\n1 1\n2 1\n1 2\n1 1\n2 1\n2 1\n2 3\n"
        ],
        [
            "7 7 7\n1 2 3 4 5 6 7\n",
            "YES\n2\n1 7\n2 7\n"
        ],
        [
            "7 1 1\n1 2 3 4 5 6 7\n",
            "YES\n14\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n2 1\n"
        ],
        [
            "4 2 2\n3 2 1 4\n",
            "NO\n"
        ]
    ],
    "hint": "In the first example the initial order of plates was $ 2,3,6,4,1,5 $ . Here is how the stacks look like after each of the operations:\n\n- \\[1 2\\]: Dirty stack: $ 6,4,1,5 $ . Intermediary stack: $ 2,3 $ . The dryer is empty.\n- \\[1 1\\]: Dirty stack: $ 4,1,5 $ . Intermediary stack: $ 6,2,3 $ . The dryer is empty.\n- \\[2 1\\]: Dirty stack: $ 4,1,5 $ . Intermediary stack: $ 2,3 $ . Dryer stack: $ 6 $ .\n- \\[1 2\\]: Dirty stack: $ 5 $ . Intermediary stack: $ 4,1,2,3 $ . Dryer stack: $ 6 $ .\n- \\[1 1\\]: There are no dirty plates. Intermediary stack: $ 5,4,1,2,3 $ . Dryer stack: $ 6 $ .\n- \\[2 1\\]: There are no dirty plates. Intermediary stack: $ 4,1,2,3 $ . Dryer stack: $ 5,6 $ .\n- \\[2 1\\]: There are no dirty plates. Intermediary stack: $ 1,2,3 $ . Dryer stack: $ 4,5,6 $ .\n- \\[2 3\\]: All the plates are in the dryer: $ 1,2,3,4,5,6 $ .\n\n In the second example it is possible to wash all the plates in one operation, and then move them all to the dryer.This is not possible in the third example, because it is not permitted to move more than one plate at the same time. It is possible to wash plates one by one so that they are placed onto the intermediary stack in the reverse order, and then move plates one by one to the dryer. The final order is correct.",
    "translation": "\u9898\u76ee\u63cf\u8ff0\r\n\r\n\u4f60\u6709\u4e09\u4e2a\u6808$s1,s2,s3$\uff0c\u5176\u4e2d\u6808$s1$\u4e2d\u6709$N$\u4e2a\u6570\u3002\u73b0\u5728\u4f60\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\r\n\r\n1\u3001\u5c06$s1$\u4e2d\u6808\u9876\u7684$c$\u4e2a\u5143\u7d20\u538b\u5165$s2$\u4e2d\uff0c\u5728$s2$\u4e2d\u7684\u987a\u5e8f\u4e0e\u5728$s1$\u4e2d\u7684\u987a\u5e8f\u76f8\u540c\uff0c\u9700\u8981\u6ee1\u8db3$1 \\leq c \\leq a$\u3002\r\n\r\n2\u3001\u5c06$s2$\u4e2d\u6808\u9876\u7684$c$\u4e2a\u5143\u7d20\u538b\u5165$s3$\u4e2d\uff0c\u5728$s3$\u4e2d\u7684\u987a\u5e8f\u4e0e\u5728$s2$\u4e2d\u7684\u987a\u5e8f\u76f8\u540c\uff0c\u9700\u8981\u6ee1\u8db3$1 \\leq c \\leq b$\u3002\r\n\r\n\u73b0\u5728\uff0c\u7ed9\u5b9a$N,a,b$\u4e0e$s1$\u4e2d\u5143\u7d20\u7684\u521d\u59cb\u987a\u5e8f\uff0c\u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u4f7f\u7528\u4e0a\u9762\u4e24\u79cd\u64cd\u4f5c\u4e4b\u540e\uff0c\u6240\u6709\u5143\u7d20\u90fd\u5728$s3$\u4e2d\u4e14$s3$\u4ece\u6808\u5e95\u5230\u6808\u9876\u4e3a\u4e00\u4e2a\u5355\u8c03\u9012\u51cf\u7684\u5e8f\u5217\u3002\u4f60\u7ed9\u51fa\u7684\u65b9\u6848\u4e0d\u4e00\u5b9a\u8981\u662f\u6700\u4f18\u7684\u3002\r\n\r\n\u8f93\u5165\u683c\u5f0f\r\n\r\n\u7b2c\u4e00\u884c\u4e09\u4e2a\u6b63\u6574\u6570$N,a,b(1 \\leq N \\leq 2000 , 1 \\leq a , b \\leq N)$\uff0c\u610f\u4e49\u5982\u9898\u76ee\u6240\u8ff0\r\n\r\n\u63a5\u4e0b\u6765\u4e00\u884c$N$\u4e2a\u6b63\u6574\u6570$s_i$\uff0c\u4ece\u6808\u9876\u5230\u6808\u5e95\u63cf\u8ff0\u6808\u4e2d\u4e00\u4e2a\u5143\u7d20\u7684\u503c\u3002\u4fdd\u8bc1\u5e8f\u5217$\\{s_i\\}$\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a$N$\u7684\u6392\u5217\u3002\r\n\r\n\u8f93\u51fa\u683c\u5f0f\r\n\r\n\u5982\u679c\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u7b2c\u4e00\u884c\u8f93\u51fa$Yes$\uff0c\u63a5\u4e0b\u6765\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570$K$\u8868\u793a\u4f60\u7ed9\u51fa\u7684\u65b9\u6848\u4e2d\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u63a5\u4e0b\u6765$K$\u884c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570$t,c$\uff0c\u82e5$t=1$\uff0c\u8868\u793a\u5c06$s1$\u4e2d\u6808\u9876\u7684$c$\u4e2a\u5143\u7d20\u538b\u5165$s2$\u4e2d,\u82e5$t=2$\u8868\u793a\u5c06$s2$\u4e2d\u6808\u9876\u7684$c$\u4e2a\u5143\u7d20\u538b\u5165$s3$\u4e2d\u3002\u5982\u679c\u6ca1\u6709\u65b9\u6848\u6ee1\u8db3\u6761\u4ef6\uff0c\u53ea\u9700\u8f93\u51fa\u4e00\u884c$No$\u3002"
}