{
    "description": "Lunar rover finally reached planet X. After landing, he met an obstacle, that contains permutation $ p $ of length $ n $ . Scientists found out, that to overcome an obstacle, the robot should make $ p $ an identity permutation (make $ p_i = i $ for all $ i $ ).\n\nUnfortunately, scientists can't control the robot. Thus the only way to make $ p $ an identity permutation is applying the following operation to $ p $ multiple times:\n\n- Select two indices $ i $ and $ j $ ( $ i \\neq j $ ), such that $ p_j = i $ and swap the values of $ p_i $ and $ p_j $ . It takes robot $ (j - i)^2 $ seconds to do this operation.\n\n Positions $ i $ and $ j $ are selected by the robot (scientists can't control it). He will apply this operation while $ p $ isn't an identity permutation. We can show that the robot will make no more than $ n $ operations regardless of the choice of $ i $ and $ j $ on each operation.Scientists asked you to find out the maximum possible time it will take the robot to finish making $ p $ an identity permutation (i. e. worst-case scenario), so they can decide whether they should construct a new lunar rover or just rest and wait. They won't believe you without proof, so you should build an example of $ p $ and robot's operations that maximizes the answer.\n\nFor a better understanding of the statement, read the sample description.",
    "inputFormat": "The first line of input contains a single integer $ t $ ( $ 1 \\leq t \\leq 10^4 $ ) \u2014 the number of test cases.\n\nEach of next $ t $ lines contains the single integer $ n $ ( $ 2 \\leq n \\leq 10^5 $ ) \u2013 the length of $ p $ .\n\nNote, that $ p $ is not given to you. You should find the maximum possible time over all permutations of length $ n $ .\n\nIt is guaranteed, that the total sum of $ n $ over all test cases doesn't exceed $ 10^5 $ .",
    "outputFormat": "For each test case in the first line, print how many seconds will the robot spend in the worst case.\n\nIn the next line, print the initial value of $ p $ that you used to construct an answer.\n\nIn the next line, print the number of operations $ m \\leq n $ that the robot makes in your example.\n\nIn the each of next $ m $ lines print two integers $ i $ and $ j $ \u2014 indices of positions that the robot will swap on this operation. Note that $ p_j = i $ must holds (at the time of operation).",
    "samples": [
        [
            "3\n2\n3\n3",
            "1\n2 1\n1\n2 1\n5\n2 3 1\n2\n1 3\n3 2\n5\n2 3 1\n2\n1 3\n2 3"
        ]
    ],
    "hint": "For $ n = 2 $ , $ p $ can be either $ [1, 2] $ or $ [2, 1] $ . In the first case $ p $ is already identity, otherwise robot will make it an identity permutation in $ 1 $ second regardless of choise $ i $ and $ j $ on the first operation.\n\nFor $ n = 3 $ , $ p $ can be equals $ [2, 3, 1] $ .\n\n- If robot will select $ i = 3, j = 2 $ on the first operation, $ p $ will become $ [2, 1, 3] $ in one second. Now robot can select only $ i = 1, j = 2 $ or $ i = 2, j = 1 $ . In both cases, $ p $ will become identity in one more second ( $ 2 $ seconds in total).\n\n4. If robot will select $ i = 1, j = 3 $ on the first operation, $ p $ will become $ [1, 3, 2] $ in four seconds. Regardless of choise of $ i $ and $ j $ on the second operation, $ p $ will become identity in five seconds.\nWe can show, that for permutation of length $ 3 $ robot will always finish all operation in no more than $ 5 $ seconds.",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u5b9a\u4e00\u4e2a $n$\uff0c\u4f60\u9700\u8981\u6784\u9020\u4e00\u4e2a\u6392\u5217 $\\{p_i\\}$ \u548c\u4e00\u4e2a\u64cd\u4f5c\u5e8f\u5217\u3002  \n\u6bcf\u6b21\u64cd\u4f5c\u4f60\u53ef\u4ee5\u4ea4\u6362 $i$ \u548c $p_i$\uff0c\u5e76\u83b7\u5f97 $(p_i-i)^2$ \u7684\u8d21\u732e\u3002  \n\u4f60\u9700\u8981\u6700\u5927\u5316\u603b\u8d21\u732e\u3002  \n\u53ef\u4ee5\u8bc1\u660e\uff0c\u64cd\u4f5c\u6b21\u6570 $<n$\u3002  \n### \u8f93\u5165\u683c\u5f0f\n\u591a\u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u7ed9\u5b9a\u4e00\u4e2a $n$\n### \u8f93\u51fa\u683c\u5f0f\n\u9996\u5148\uff0c\u7b2c\u4e00\u884c\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u4f60\u6c42\u51fa\u7684\u6700\u5927\u8d21\u732e\u3002  \n\u7136\u540e\u7b2c\u4e8c\u884c\u7ed9\u51fa\u4f60\u6784\u9020\u7684 $\\{p_i\\}$\u3002  \n\u7b2c\u4e09\u884c\u7ed9\u51fa\u4e00\u4e2a\u6570 $m$\uff0c\u8868\u793a\u4f60\u9700\u8981\u7684\u64cd\u4f5c\u6b21\u6570\u3002  \n\u63a5\u4e0b\u6765 $m$ \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\uff0c\u4ee3\u8868\u5f53\u524d\u64cd\u4f5c\u7684 $p_i$ \u548c $i$\uff08\u6ce8\u610f\uff0c**\u6709\u987a\u5e8f\u8981\u6c42**\n\n\ntranslate by peal_frog"
}