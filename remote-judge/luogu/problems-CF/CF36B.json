{
    "description": "Ever since Kalevitch, a famous Berland abstractionist, heard of fractals, he made them the main topic of his canvases. Every morning the artist takes a piece of graph paper and starts with making a model of his future canvas. He takes a square as big as $ n\u00d7n $ squares and paints some of them black. Then he takes a clean square piece of paper and paints the fractal using the following algorithm:\n\nStep 1. The paper is divided into $ n^{2} $ identical squares and some of them are painted black according to the model.\n\nStep 2. Every square that remains white is divided into $ n^{2} $ smaller squares and some of them are painted black according to the model.\n\nEvery following step repeats step 2.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF36B/e8422806af6330609da67545ef59f385e8f81169.png)Unfortunately, this tiresome work demands too much time from the painting genius. Kalevitch has been dreaming of making the process automatic to move to making 3D or even 4D fractals.",
    "inputFormat": "The first line contains integers $ n $ and $ k $ ( $ 2<=n<=3 $ , $ 1<=k<=5 $ ), where $ k $ is the amount of steps of the algorithm. Each of the following $ n $ lines contains $ n $ symbols that determine the model. Symbol \u00ab.\u00bb stands for a white square, whereas \u00ab\\*\u00bb stands for a black one. It is guaranteed that the model has at least one white square.",
    "outputFormat": "Output a matrix $ n^{k}\u00d7n^{k} $ which is what a picture should look like after $ k $ steps of the algorithm.",
    "samples": [
        [
            "2 3\n.*\n..\n",
            ".*******\n..******\n.*.*****\n....****\n.***.***\n..**..**\n.*.*.*.*\n........\n"
        ],
        [
            "3 2\n.*.\n***\n.*.\n",
            ".*.***.*.\n*********\n.*.***.*.\n*********\n*********\n*********\n.*.***.*.\n*********\n.*.***.*.\n"
        ]
    ],
    "hint": "",
    "translation": "**\u9898\u76ee\u80cc\u666f**\n\n\u81ea\u4ece\u8457\u540d\u7684\u67cf\u6797\u62bd\u8c61\u4e3b\u4e49\u8005\u5361\u83b1\u7ef4\u5947\u542c\u8bf4\u5206\u5f62\u540e\uff0c\u4ed6\u5c31\u628a\u5206\u5f62\u4f5c\u4e3a\u81ea\u5df1\u6cb9\u753b\u7684\u4e3b\u9898\u3002\u6bcf\u5929\u65e9\u4e0a\uff0c\u4ed6\u62ff\u7740\u4e00\u5f20\u7ed8\u56fe\u7eb8\uff0c\u5f00\u59cb\u5236\u4f5c\u4ed6\u672a\u6765\u753b\u5e03\u7684\u6a21\u578b\u3002\n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u51fa\u67d3\u8272\u6b63\u65b9\u5f62\u7684\u8fb9\u957fn\uff0c\u5e76\u7ed9\u51fa\u67d3\u8272\u7684\u65b9\u6cd5\uff0c\u6267\u884ck\u6b21\u64cd\u4f5c\uff08\u5373\u6b63\u65b9\u5f62\u56fe\u7eb8\u7684\u8fb9\u957f\u4e3an^k\uff09\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u56fe\u653e\u5927\uff0c\u6309\u7ed9\u51fa\u7684\u65b9\u6cd5\u5c06\u56fe\u6d82\u9ed1\uff0c\u4e0b\u4e00\u6b65\u518d\u5c06\u56fe\u4e2d\u7684\u6bcf\u5757\u767d\u8272\u6b63\u65b9\u5f62\u90e8\u5206\u6309\u7ed9\u51fa\u7684\u65b9\u6cd5\u67d3\u9ed1\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n**\u8f93\u5165\u683c\u5f0f\uff1a**\n\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6570\u5b57n\u548ck(2<=n<=3,1<=k<=5)\uff0c\n\n\u63a5\u4e0b\u6765\u7b2c\u4e8c\u884c\u5230\u7b2cn+1\u884c\u8f93\u5165\u67d3\u8272\u7684\u65b9\u6cd5\n\n**\u8f93\u51fa\u683c\u5f0f\uff1a**\n\u8f93\u51fa\u4e00\u4e2a\u8fb9\u957f\u4e3an^k\u7684\u6b63\u65b9\u5f62\uff0c\u5373\u6700\u540e\u67d3\u8272\u5b8c\u7684\u753b\uff0c\u767d\u8272\u683c\u8f93\u51fa' . ',\u9ed1\u8272\u683c\u8f93\u51fa' * '"
}