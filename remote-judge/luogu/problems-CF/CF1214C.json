{
    "description": "Petya's friends made him a birthday present \u2014 a bracket sequence. Petya was quite disappointed with his gift, because he dreamed of correct bracket sequence, yet he told his friends nothing about his dreams and decided to fix present himself.\n\nTo make everything right, Petya is going to move at most one bracket from its original place in the sequence to any other position. Reversing the bracket (e.g. turning \"(\" into \")\" or vice versa) isn't allowed.\n\nWe remind that bracket sequence $ s $ is called correct if:\n\n- $ s $ is empty;\n- $ s $ is equal to \"( $ t $ )\", where $ t $ is correct bracket sequence;\n- $ s $ is equal to $ t_1 t_2 $ , i.e. concatenation of $ t_1 $ and $ t_2 $ , where $ t_1 $ and $ t_2 $ are correct bracket sequences.\n\nFor example, \"(()())\", \"()\" are correct, while \")(\" and \"())\" are not. Help Petya to fix his birthday present and understand whether he can move one bracket so that the sequence becomes correct.",
    "inputFormat": "First of line of input contains a single number $ n $ ( $ 1 \\leq n \\leq 200\\,000 $ ) \u2014 length of the sequence which Petya received for his birthday.\n\nSecond line of the input contains bracket sequence of length $ n $ , containing symbols \"(\" and \")\".",
    "outputFormat": "Print \"Yes\" if Petya can make his sequence correct moving at most one bracket. Otherwise print \"No\".",
    "samples": [
        [
            "2\n)(\n",
            "Yes\n"
        ],
        [
            "3\n(()\n",
            "No\n"
        ],
        [
            "2\n()\n",
            "Yes\n"
        ],
        [
            "10\n)))))(((((\n",
            "No\n"
        ]
    ],
    "hint": "In the first example, Petya can move first bracket to the end, thus turning the sequence into \"()\", which is correct bracket sequence.\n\nIn the second example, there is no way to move at most one bracket so that the sequence becomes correct.\n\nIn the third example, the sequence is already correct and there's no need to move brackets.",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u62ec\u53f7\u5e8f\u5217 $s$ , \u6c42\u51fa $s$ \u80fd\u5426\u901a\u8fc7\u79fb\u52a8\u4e0d\u8d85\u8fc7 $1$ \u4e2a\u62ec\u53f7\u7684\u4f4d\u7f6e, \u4f7f\u5f97\u8fd9\u4e2a\u62ec\u53f7\u5e8f\u5217\u53d8\u6210\u4e00\u4e2a\u6b63\u786e\u7684\u62ec\u53f7\u5e8f\u5217.\n\n\u6211\u4eec\u5b9a\u4e49\u6ee1\u8db3\u4e0b\u9762\u4efb\u610f\u4e00\u4e2a\u6761\u4ef6\u7684\u62ec\u53f7\u5e8f\u5217 $S$ \u4e3a\u4e00\u4e2a\u6b63\u786e\u7684\u62ec\u53f7\u5e8f\u5217:\n\n- $S$ \u662f\u4e00\u4e2a\u7a7a\u4e32\n- $S = (t)$ , \u5176\u4e2d $t$ \u662f\u4e00\u4e2a\u6b63\u786e\u7684\u62ec\u53f7\u5e8f\u5217\n- $S = t_1 + t_2$ , \u5176\u4e2d $t_1$ , $t_2$ \u90fd\u662f\u6b63\u786e\u7684\u62ec\u53f7\u5e8f\u5217, '$+$' \u8fd0\u7b97\u5b9a\u4e49\u4e3a\u5b57\u7b26\u4e32\u7684\u62fc\u63a5.\n\n## \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 $n$ \u8868\u793a\u7ed9\u51fa\u7684\u62ec\u53f7\u5e8f\u5217\u7684\u957f\u5ea6.\n\n\u7b2c\u4e8c\u884c\u4e00\u4e2a\u4ec5\u5305\u542b $($ \u548c $)$ \u7684\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32, \u8868\u793a\u7ed9\u51fa\u7684\u62ec\u53f7\u5e8f\u5217 $s$ .\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32, \u5982\u679c\u7ed9\u51fa\u7684\u62ec\u53f7\u5e8f\u5217\u6ee1\u8db3\u9898\u76ee\u7684\u6761\u4ef6, \u5219\u8f93\u51fa \"Yes\" , \u5426\u5219\u8f93\u51fa \"No\" (\u4e0d\u542b\u5f15\u53f7).\n\n## \u6570\u636e\u8303\u56f4\n\n$1 \\leq n \\leq 200000$"
}