{
    "description": "You are a coach at your local university. There are $ n $ students under your supervision, the programming skill of the $ i $ -th student is $ a_i $ .\n\nYou have to form $ k $ teams for yet another new programming competition. As you know, the more students are involved in competition the more probable the victory of your university is! So you have to form no more than $ k $ (and at least one) non-empty teams so that the total number of students in them is maximized. But you also know that each team should be balanced. It means that the programming skill of each pair of students in each team should differ by no more than $ 5 $ . Teams are independent from one another (it means that the difference between programming skills of two students from two different teams does not matter).\n\nIt is possible that some students not be included in any team at all.\n\nYour task is to report the maximum possible total number of students in no more than $ k $ (and at least one) non-empty balanced teams.\n\nIf you are Python programmer, consider using PyPy instead of Python when you submit your code.",
    "inputFormat": "The first line of the input contains two integers $ n $ and $ k $ ( $ 1 \\le k \\le n \\le 5000 $ ) \u2014 the number of students and the maximum number of teams, correspondingly.\n\nThe second line of the input contains $ n $ integers $ a_1, a_2, \\dots, a_n $ ( $ 1 \\le a_i \\le 10^9 $ ), where $ a_i $ is a programming skill of the $ i $ -th student.",
    "outputFormat": "Print one integer \u2014 the maximum possible total number of students in no more than $ k $ (and at least one) non-empty balanced teams.",
    "samples": [
        [
            "5 2\n1 2 15 15 15\n",
            "5\n"
        ],
        [
            "6 1\n36 4 1 25 9 16\n",
            "2\n"
        ],
        [
            "4 4\n1 10 100 1000\n",
            "4\n"
        ]
    ],
    "hint": "",
    "translation": "*\u9898\u76ee\u540d\u79f0\uff1a\u65d7\u9f13\u76f8\u5f53\u7684\u961f\u53cb\u2161*  \r\n## \u9898\u76ee\u63cf\u8ff0\r\n\u60a8\u662f\u672c\u5730\u5927\u5b66\u7684\u6559\u7ec3\uff0c\u6709$n$\u4f4d\u9009\u624b\u5728\u4f60\u8fd9\u91cc\u5b66\u4e60\uff0c\u5e76\u4e14\u5df2\u77e5\u7b2c$i$\u4f4d\u7684\u80fd\u529b\u503c\u4e3a$a_i$\u3002  \r\n\u73b0\u5728\u60a8\u9700\u8981\u6311\u9009\u51fa\u82e5\u5e72\u4f4d\u9009\u624b\u7ec4\u6210\u81f3\u591a$k$\u652f\u961f\u4f0d\u3002\u4f17\u6240\u5468\u77e5\uff0c\u53c2\u8d5b\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u4f60\u7684\u5927\u5b66\u83b7\u80dc\u7684\u6982\u7387\u8d8a\u5927\u3002\u6240\u4ee5\uff0c\u4f60\u9700\u8981\u4f7f\u5f97\u4f60\u9009\u51fa\u7684\u81f3\u591a$k$\u652f\uff08\u81f3\u5c11$1$\u652f\uff09**\u975e\u7a7a**\u961f\u4f0d\u7684**\u603b\u4eba\u6570**\u6700\u591a\u3002\u4f46\u662f\uff0c\u4f60\u77e5\u9053**\u6bcf\u652f**\u961f\u4f0d\u4e2d\u961f\u5458\u4eec\u7684\u5b9e\u529b\u5e94\u5f53*\u5dee\u4e0d\u591a*\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e**\u4efb\u610f**\u4e00\u652f\u961f\u4f0d\uff0c\u4e0d\u5e94\u5f53\u5b58\u5728\u4e24\u540d\u5b9e\u529b\u503c\u76f8\u5dee\u8d85\u8fc7$5$\u7684\u9009\u624b\u3002\u6240\u6709\u7684\u961f\u4f0d\u90fd\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff08\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u8003\u8651\u6765\u81ea\u4e24\u53ea\u4e0d\u540c\u961f\u4f0d\u7684\u9009\u624b\u7684\u5b9e\u529b\u503c\u5dee\u8ddd\uff09\u3002  \r\n\u53ef\u80fd\u6709\u7684\u9009\u624b\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u652f\u961f\u4f0d\u3002  \r\n\u60a8\u7684\u4efb\u52a1\u662f\u6c42\u51fa\u6ee1\u8db3\u4ee5\u4e0a\u8981\u6c42\u7684\u81f3\u591a$k$\uff08\u81f3\u5c11$1$\uff09\u652f**\u975e\u7a7a**\u961f\u4f0d\u7684**\u603b\u4eba\u6570**\u3002  \r\n**\u5982\u679c\u60a8\u662f\u4e00\u540dPython\u9009\u624b\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u5728\u63d0\u4ea4\u4ee3\u7801\u65f6\u9009\u62e9`PyPy`\u800c\u4e0d\u662f`Python`**\u3002  \r\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\r\n### \u8f93\u5165\u683c\u5f0f\uff1a\r\n\r\n\u8f93\u5165\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570$n$\u548c$k$\uff0c\u4ee3\u8868\u9009\u624b\u603b\u6570\u548c\u961f\u4f0d\u6570\u91cf\u4e0a\u9650\uff1b  \r\n\u7b2c\u4e8c\u884c\u8f93\u5165$n$\u4e2a\u6574\u6570$a_1, a_2, \\ldots a_n$\uff0c\u7b2c$i$\u4e2a\u6574\u6570\u4ee3\u8868\u7b2c$i$\u4f4d\u9009\u624b\u7684\u5b9e\u529b\u503c\u3002  \r\n### \u8f93\u51fa\u683c\u5f0f\uff1a\r\n\r\n\u8f93\u51fa\u6587\u4ef6\u4ec5\u5305\u542b\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\u2014\u2014\u81f3\u591a$k$\uff08\u81f3\u5c11$1$\uff09\u652f\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\u7684\u961f\u4f0d\u7684**\u603b\u4eba\u6570\u7684\u6700\u5927\u503c**\u3002  \r\n## \u8bf4\u660e\uff1a\r\n\u5bf9\u4e8e\u6240\u6709\u6570\u636e\uff0c$1 \\leq k \\leq n \\leq 5000, 1 \\leq a_i \\leq 10^9$\u3002  \r\n**\u5982\u679c\u60a8\u662f\u4e00\u540dPython\u9009\u624b\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u5728\u63d0\u4ea4\u4ee3\u7801\u65f6\u9009\u62e9`PyPy`\u800c\u4e0d\u662f`Python`**\u3002  "
}