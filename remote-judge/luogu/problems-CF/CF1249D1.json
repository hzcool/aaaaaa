{
    "description": "The only difference between easy and hard versions is constraints.\n\nYou are given $ n $ segments on the coordinate axis $ OX $ . Segments can intersect, lie inside each other and even coincide. The $ i $ -th segment is $ [l_i; r_i] $ ( $ l_i \\le r_i $ ) and it covers all integer points $ j $ such that $ l_i \\le j \\le r_i $ .\n\nThe integer point is called bad if it is covered by strictly more than $ k $ segments.\n\nYour task is to remove the minimum number of segments so that there are no bad points at all.",
    "inputFormat": "The first line of the input contains two integers $ n $ and $ k $ ( $ 1 \\le k \\le n \\le 200 $ ) \u2014 the number of segments and the maximum number of segments by which each integer point can be covered.\n\nThe next $ n $ lines contain segments. The $ i $ -th line contains two integers $ l_i $ and $ r_i $ ( $ 1 \\le l_i \\le r_i \\le 200 $ ) \u2014 the endpoints of the $ i $ -th segment.",
    "outputFormat": "In the first line print one integer $ m $ ( $ 0 \\le m \\le n $ ) \u2014 the minimum number of segments you need to remove so that there are no bad points.\n\nIn the second line print $ m $ distinct integers $ p_1, p_2, \\dots, p_m $ ( $ 1 \\le p_i \\le n $ ) \u2014 indices of segments you remove in any order. If there are multiple answers, you can print any of them.",
    "samples": [
        [
            "7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n",
            "3\n1 4 7 \n"
        ],
        [
            "5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n",
            "3\n1 2 4 \n"
        ],
        [
            "6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n",
            "4\n1 3 5 6 \n"
        ]
    ],
    "hint": "",
    "translation": "\u7b80\u5355\u96be\u5ea6\u4e0e\u56f0\u96be\u96be\u5ea6\u7684\u552f\u4e00\u5dee\u522b\u662f$n,k$\u7684\u8303\u56f4\n\n\u7ed9\u4e88$n$\u6761\u7ebf\u6bb5\uff0c\u8fd9\u4e9b\u7ebf\u6bb5\u53ef\u4ee5\u6709\u91cd\u53e0\u90e8\u5206\u751a\u81f3\u5b8c\u5168\u91cd\u53e0\u5728\u4e00\u8d77\u3002\u7b2c$i$\u6761\u7ebf\u6bb5$[l_i,r_i](l_i\u2264r_i)$\u8986\u76d6\u4e86\u6240\u6709\u6574\u6570\u70b9$j$\u6ee1\u8db3$l_i\u2264j\u2264r_i$\n\n\u5982\u679c\u4e00\u4e2a\u6574\u6570\u70b9\u88ab**\u8d85\u8fc7**$k$\u6761\u7ebf\u6bb5\u8986\u76d6\uff0c\u90a3\u4e48\u5c31\u79f0\u4e4b\u4e3abad point\uff08\u4e0b\u6587\u4ee5\u574f\u70b9\u4ee3\u66ff\uff09\n\n\u4f60\u7684\u4efb\u52a1\u662f\u53bb\u6389\u6700\u5c11\u7684\u7ebf\u6bb5\u4f7f\u5f97\u6ca1\u6709\u574f\u70b9\u7684\u5b58\u5728\n### \u8f93\u5165\u683c\u5f0f\n\u8f93\u5165\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6b63\u6574\u6570\uff0c$n$\u548c$k$$(1\u2264k\u2264n\u2264200)$\n\n\u7136\u540e\u6709$n$\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570\uff0c\u5176\u4e2d\u7684\u7b2c$i$\u884c\u8868\u793a\u7b2c$i$\u6761\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9$l_i$\u548c$r_i$$(1\u2264l_i\u2264r_i\u2264200)$\n### \u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u51fa\u7684\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570$m(0\u2264m\u2264n)$\uff0c\u8868\u793a\u6700\u5c11\u53bb\u6389\u591a\u5c11\u6761\u7ebf\u6bb5\u53ef\u4ee5\u4e0d\u518d\u5b58\u5728\u574f\u70b9\n\n\u7b2c\u4e8c\u884c\u8f93\u51fa$m$\u4e2a\u4e0d\u540c\u7684\u6b63\u6574\u6570$p_1,p_2,\u2026p_m(1\u2264p_i\u2264n)$\u8868\u793a\u4f60\u79fb\u9664\u4e86\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7\u3002\u5982\u679c\u6709\u4e0d\u6b62\u4e00\u4e2a\u7b54\u6848\uff0c\u53ef\u4ee5\u8f93\u51fa\u4efb\u610f\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u7b54\u6848\u3002"
}