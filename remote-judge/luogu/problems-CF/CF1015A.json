{
    "description": "You are given a set of $ n $ segments on the axis $ Ox $ , each segment has integer endpoints between $ 1 $ and $ m $ inclusive. Segments may intersect, overlap or even coincide with each other. Each segment is characterized by two integers $ l_i $ and $ r_i $ ( $ 1 \\le l_i \\le r_i \\le m $ ) \u2014 coordinates of the left and of the right endpoints.\n\nConsider all integer points between $ 1 $ and $ m $ inclusive. Your task is to print all such points that don't belong to any segment. The point $ x $ belongs to the segment $ [l; r] $ if and only if $ l \\le x \\le r $ .",
    "inputFormat": "The first line of the input contains two integers $ n $ and $ m $ ( $ 1 \\le n, m \\le 100 $ ) \u2014 the number of segments and the upper bound for coordinates.\n\nThe next $ n $ lines contain two integers each $ l_i $ and $ r_i $ ( $ 1 \\le l_i \\le r_i \\le m $ ) \u2014 the endpoints of the $ i $ -th segment. Segments may intersect, overlap or even coincide with each other. Note, it is possible that $ l_i=r_i $ , i.e. a segment can degenerate to a point.",
    "outputFormat": "In the first line print one integer $ k $ \u2014 the number of points that don't belong to any segment.\n\nIn the second line print exactly $ k $ integers in any order \u2014 the points that don't belong to any segment. All points you print should be distinct.\n\nIf there are no such points at all, print a single integer $ 0 $ in the first line and either leave the second line empty or do not print it at all.",
    "samples": [
        [
            "3 5\n2 2\n1 2\n5 5\n",
            "2\n3 4 \n"
        ],
        [
            "1 7\n1 7\n",
            "0\n\n"
        ]
    ],
    "hint": "In the first example the point $ 1 $ belongs to the second segment, the point $ 2 $ belongs to the first and the second segments and the point $ 5 $ belongs to the third segment. The points $ 3 $ and $ 4 $ do not belong to any segment.\n\nIn the second example all the points from $ 1 $ to $ 7 $ belong to the first segment.",
    "translation": "# \u9898\u76ee\u63cf\u8ff0 \n\n\u6709n\u6761\u7ebf\u6bb5\u5728\u6570\u8f74Ox\u4e0a\uff0c\u6bcf\u6761\u7ebf\u6bb5\u6709\u4ecb\u4e8e1\u5230m\u4e4b\u95f4\u7684\u6574\u6570\u7aef\u70b9\u3002\u7ebf\u6bb5\u4e4b\u95f4\u53ef\u4ee5\u91cd\u5408\u3001\u8986\u76d6\u751a\u81f3\u76f8\u540c\u3002\u6bcf\u6761\u7ebf\u6bb5\u7531\u4e24\u4e2a\u6574\u6570li\u548cri\u63cf\u8ff0\uff081<=li<=ri<=m\uff09--\u5bf9\u5e94\u5de6\u3001\u53f3\u7aef\u70b9\u3002\n\n\u8003\u86511\u5230m\u4e4b\u95f4\u7684\u6240\u6709\u6574\u6570\u70b9\u3002\u8981\u6c42\u4f60\u8f93\u51fa\u6240\u6709\u7684\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7ebf\u6bb5\u7684\u70b9\u3002\n\n\u5f53\u4e14\u4ec5\u5f53\u70b9l<=x<=r\u65f6\uff0c\u70b9x\u5c5e\u4e8e\u8fd9\u6761\u7ebf\u6bb5\u3002\n\n# \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n## \u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570n\uff0cm\uff081<=n,m<=100\uff09--\u7ebf\u6bb5\u6570\u91cf\u548c\u6570\u8f74\u6700\u5927\u503c\u3002\n\n\u4e0b\u9762n\u884c\u6bcf\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570li\u548cri--\u7b2ci\u6761\u7ebf\u6bb5\u7684\u7aef\u70b9\u3002\n\n\u6ce8\uff1ali\u53ef\u80fd==ri\uff0c\u5373\u4e00\u4e2a\u7ebf\u6bb5\u53ef\u80fd\u9000\u5316\u6210\u4e00\u4e2a\u70b9\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570 k--\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7ebf\u6bb5\u7684\u70b9\u7684\u6570\u91cf\u3002\n\n\u7b2c\u4e8c\u884c\u4ee5\u4efb\u610f\u987a\u5e8f\u8f93\u51fak\u4e2a\u6574\u6570--\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7ebf\u6bb5\u7684\u70b9\u6570\u3002\n\n\u5982\u679c\u6839\u672c\u6ca1\u6709\u8fd9\u6837\u7684\u70b9\uff0c\u7b2c\u4e00\u884c\u8f93\u51fa\u4e00\u4e2a\u6574\u65700\u5e76\u7559\u7a7a\u7b2c\u4e8c\u884c\u6216\u8005\u6839\u672c\u4e0d\u8f93\u51fa\u7b2c\u4e8c\u884c\u3002"
}