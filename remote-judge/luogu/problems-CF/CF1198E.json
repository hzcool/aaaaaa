{
    "description": "There is a square grid of size $ n \\times n $ . Some cells are colored in black, all others are colored in white. In one operation you can select some rectangle and color all its cells in white. It costs $ \\min(h, w) $ to color a rectangle of size $ h \\times w $ . You are to make all cells white for minimum total cost.\n\nThe square is large, so we give it to you in a compressed way. The set of black cells is the union of $ m $ rectangles.",
    "inputFormat": "The first line contains two integers $ n $ and $ m $ ( $ 1 \\le n \\le 10^{9} $ , $ 0 \\le m \\le 50 $ ) \u2014 the size of the square grid and the number of black rectangles.\n\nEach of the next $ m $ lines contains 4 integers $ x_{i1} $ $ y_{i1} $ $ x_{i2} $ $ y_{i2} $ ( $ 1 \\le x_{i1} \\le x_{i2} \\le n $ , $ 1 \\le y_{i1} \\le y_{i2} \\le n $ ) \u2014 the coordinates of the bottom-left and the top-right corner cells of the $ i $ -th black rectangle.\n\nThe rectangles may intersect.",
    "outputFormat": "Print a single integer \u2014 the minimum total cost of painting the whole square in white.",
    "samples": [
        [
            "10 2\n4 1 5 10\n1 4 10 5\n",
            "4\n"
        ],
        [
            "7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n",
            "3\n"
        ]
    ],
    "hint": "The examples and some of optimal solutions are shown on the pictures below.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1198E/3251f75f39d46770a640e39786d5d7b587799e21.png)",
    "translation": "\u6709\u4e00\u4e2a$n*n$\u7684\u7f51\u683c\uff0c\u7f51\u683c\u4e2d\u6709\u4e00\u4e9b\u70b9\u662f\u9ed1\u7684\uff0c\u5176\u4ed6\u70b9\u90fd\u662f\u767d\u7684\u3002\u4f60\u6bcf\u6b21\u53ef\u4ee5\u82b1\u8d39$\\min(h,w)$\u7684\u4ee3\u4ef7\u628a\u4e00\u4e2a$h*w$\u7684\u77e9\u5f62\u533a\u57df\u53d8\u767d\u3002\u6c42\u628a\u6240\u6709\u9ed1\u683c\u53d8\u767d\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n## \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c2\u4e2a\u6574\u6570$n$,$m$\uff08$1\\le n \\le 10^9,0\\le m\\le 50$\uff09,\u5206\u522b\u4ee3\u8868\u6b63\u65b9\u5f62\u7f51\u683c\u7684\u5927\u5c0f\u548c**\u9ed1\u8272\u77e9\u5f62**\u7684\u6570\u91cf\u3002\n\n\u63a5\u4e0b\u6765$m$\u884c,\u6bcf\u884c$4$\u4e2a\u6574\u6570$x_{i1},y_{i1},x_{i2},y_{i2}$\uff08$1\\le x_{i1}\\le x_{i2}\\le n,1\\le y_{i1}\\le y_{i2}\\le n$\uff09,\u5206\u522b\u4ee3\u8868\u9ed1\u8272\u77e9\u5f62\u5de6\u4e0b\u89d2\u7684\u683c\u5b50\u548c\u53f3\u4e0a\u89d2\u7684\u683c\u5b50\u3002\uff08\u663e\u7136\uff0c\u9ed1\u8272\u77e9\u5f62\u91cc\u7684\u683c\u5b50\u90fd\u662f\u9ed1\u7684\u3002\uff09\n\n\u9ed1\u8272\u77e9\u5f62\u53ef\u80fd\u76f8\u4ea4\u3002\n\n## \u8f93\u51fa\u683c\u5f0f\n\u4e00\u4e2a\u6574\u6570\uff1a\u628a\u6240\u6709\u683c\u5b50\u53d8\u767d\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002"
}