{
    "description": "You are working for the Gryzzl company, headquartered in Pawnee, Indiana.\n\nThe new national park has been opened near Pawnee recently and you are to implement a geolocation system, so people won't get lost. The concept you developed is innovative and minimalistic. There will be $ n $ antennas located somewhere in the park. When someone would like to know their current location, their Gryzzl hologram phone will communicate with antennas and obtain distances from a user's current location to all antennas.\n\nKnowing those distances and antennas locations it should be easy to recover a user's location... Right? Well, almost. The only issue is that there is no way to distinguish antennas, so you don't know, which distance corresponds to each antenna. Your task is to find a user's location given as little as all antennas location and an unordered multiset of distances.",
    "inputFormat": "The first line of input contains a single integer $ n $ ( $ 2 \\leq n \\leq 10^5 $ ) which is the number of antennas.\n\nThe following $ n $ lines contain coordinates of antennas, $ i $ -th line contain two integers $ x_i $ and $ y_i $ ( $ 0 \\leq x_i,y_i \\leq 10^8 $ ). It is guaranteed that no two antennas coincide.\n\nThe next line of input contains integer $ m $ ( $ 1 \\leq n \\cdot m \\leq 10^5 $ ), which is the number of queries to determine the location of the user.\n\nFollowing $ m $ lines contain $ n $ integers $ 0 \\leq d_1 \\leq d_2 \\leq \\dots \\leq d_n \\leq 2 \\cdot 10^{16} $ each. These integers form a multiset of squared distances from unknown user's location $ (x;y) $ to antennas.\n\nFor all test cases except the examples it is guaranteed that all user's locations $ (x;y) $ were chosen uniformly at random, independently from each other among all possible integer locations having $ 0 \\leq x, y \\leq 10^8 $ .",
    "outputFormat": "For each query output $ k $ , the number of possible a user's locations matching the given input and then output the list of these locations in lexicographic order.\n\nIt is guaranteed that the sum of all $ k $ over all points does not exceed $ 10^6 $ .",
    "samples": [
        [
            "3\n0 0\n0 1\n1 0\n1\n1 1 2\n",
            "1 1 1 \n"
        ],
        [
            "4\n0 0\n0 1\n1 0\n1 1\n2\n0 1 1 2\n2 5 5 8\n",
            "4 0 0 0 1 1 0 1 1 \n4 -1 -1 -1 2 2 -1 2 2 \n"
        ]
    ],
    "hint": "As you see in the second example, although initially a user's location is picked to have non-negative coordinates, you have to output all possible integer locations.",
    "translation": "**\u9898\u76ee\u63cf\u8ff0**\r\n\r\n\u4f60\u5728 Gryzzl \u516c\u53f8\u5de5\u4f5c\uff0c\u603b\u90e8\u8bbe\u5728\u5370\u7b2c\u5b89\u7eb3\u5dde\u6ce2\u5c3c\u3002\r\n\r\n\u6ce2\u5c3c\u9644\u8fd1\u65b0\u5efa\u7684\u7684\u56fd\u5bb6\u516c\u56ed\u6700\u8fd1\u5f00\u653e\u4e86\uff0c\u4f60\u8981\u5b9e\u73b0\u5730\u7406\u5b9a\u4f4d\u7cfb\u7edf\uff0c\u8fd9\u6837\u4eba\u4eec\u5c31\u4e0d\u4f1a\u8ff7\u8def\u4e86\u3002\u4f60\u662f\u521b\u65b0\u548c\u6781\u7b80\u4e3b\u4e49\u8005\uff0c\u63d0\u51fa\u7684\u6982\u5ff5\u81ea\u7136\u4e5f\u662f\u5982\u6b64\u3002\u516c\u56ed\u91cc\u6709$n$\u4e2a\u5929\u7ebf\uff0c\u5f53\u6709\u4eba\u60f3\u77e5\u9053\u4ed6\u4eec\u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u4ed6\u4eec\u7684 Gryzzl \u5168\u606f\u624b\u673a\u5c06\u4e0e\u5929\u7ebf\u901a\u4fe1\uff0c\u5e76\u83b7\u5f97\u4ece\u7528\u6237\u5f53\u524d\u4f4d\u7f6e\u5230\u6240\u6709\u5929\u7ebf\u7684\u8ddd\u79bb\u3002\r\n\r\n\u77e5\u9053\u8fd9\u4e9b\u8ddd\u79bb\u548c\u5929\u7ebf\u4f4d\u7f6e\u5e94\u8be5\u5f88\u5bb9\u6613\u6062\u590d\u7528\u6237\u7684\u4f4d\u7f6e\uff0c\u5bf9\u5417\uff1f\u597d\u5427\uff0c\u662f\u8fd9\u6837\u3002\u4e0d\u8fc7\u552f\u4e00\u7684\u95ee\u9898\u662f\u6ca1\u6709\u529e\u6cd5\u533a\u5206\u5929\u7ebf\uff0c\u6240\u4ee5\u4f60\u4e0d\u77e5\u9053\uff0c\u54ea\u4e2a\u8ddd\u79bb\u5bf9\u5e94\u4e8e\u6bcf\u4e2a\u5929\u7ebf\u3002\u4f60\u7684\u4efb\u52a1\u662f\u53ea\u8981\u7ed9\u51fa\u6240\u6709\u5929\u7ebf\u7684\u4f4d\u7f6e\u548c\u4e00\u4e2a\u65e0\u5e8f\u7684\u8ddd\u79bb\u96c6\u5408\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u7528\u6237\u7684\u4f4d\u7f6e\u3002\r\n\r\n**\u8f93\u5165\u683c\u5f0f**\r\n\r\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570$n(2\\le n\\le 10^5)$\uff0c\u8868\u793a\u516c\u56ed\u91cc\u7684\u5929\u7ebf\u6570\u91cf\u3002\r\n\r\n\u63a5\u4e0b\u6765\u7684$n$\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570$x_i$\uff0c$y_i$\uff08$0\\le x_i,y_i\\le 10^8$\uff09\uff0c\u8868\u793a\u7b2c$i$\u6839\u5929\u7ebf\u7684\u5750\u6807\u3002\u6570\u636e\u4fdd\u8bc1\u6bcf\u6839\u5929\u7ebf\u7684\u5750\u6807\u5404\u4e0d\u76f8\u540c\u3002\r\n\r\n\u4e0b\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570$m$\uff08$1\\le n\\ \u22c5m\\le 10^5$\uff09\uff0c\u8868\u793a\u9700\u8981\u67e5\u8be2\u4f4d\u7f6e\u7684\u7528\u6237\u6570\u91cf\u3002\r\n\r\n\u63a5\u4e0b\u6765$m$\u884c\uff0c\u6bcf\u884c\u5305\u542b$n$\u4e2a\u6574\u6570$0\\le d_1\\le d_2\\le \u22ef\\le d_n\\le 2\\ \u22c510^{16}$\uff0c\u8fd9\u4e9b\u6574\u6570\u6784\u6210\u4ece\u9700\u8981\u67e5\u8be2\u4f4d\u7f6e\u7684\u7528\u6237\u4f4d\u7f6e$(x$\uff1b$y)$\u5230\u5929\u7ebf\u7684\u5e73\u65b9\u8ddd\u79bb\u7684\u96c6\u5408\u3002\r\n\r\n\u6d4b\u8bd5\u6570\u636e\u4fdd\u8bc1\u6240\u6709\u7528\u6237\u4f4d\u7f6e\uff08$x$\uff1b$y$\uff09\u90fd\u662f\u968f\u673a\u751f\u6210\u7684\uff0c\u5728\u6240\u6709\u53ef\u80fd\u6574\u6570\u4f4d\u7f6e\u4e2d\u5f7c\u6b64\u72ec\u7acb\u3002\r\n\r\n**\u8f93\u51fa\u683c\u5f0f**\r\n\r\n\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\u8f93\u51fa$k$\uff0c\u8868\u793a\u53ef\u80fd\u7684\u7528\u6237\u4f4d\u7f6e\u7684\u6570\u91cf\uff0c\u7136\u540e\u518d\u4ee5\u5b57\u5178\u5e8f\u4f9d\u6b21\u8f93\u51fa\u8fd9\u4e9b\u4f4d\u7f6e\u3002\r\n\r\n**\u8bf4\u660e**\r\n\r\n\u867d\u7136\u6700\u521d\u7684\u7528\u6237\u4f4d\u7f6e\u4e3a\u975e\u8d1f\u5750\u6807\uff0c\u4f46\u60a8\u5fc5\u987b\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u7684\u6574\u6570\u4f4d\u7f6e\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u7528\u6237\u4f4d\u7f6e\u5750\u6807\u53ef\u80fd\u4f1a\u662f\u8d1f\u6570\u3002"
}