{
    "description": "![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1523A/010268700b5eefe6d637a339a161b9e30121cb66.png)William really likes the cellular automaton called \"Game of Life\" so he decided to make his own version. For simplicity, William decided to define his cellular automaton on an array containing $ n $ cells, with each cell either being alive or dead.\n\nEvolution of the array in William's cellular automaton occurs iteratively in the following way:\n\n- If the element is dead and it has exactly $ 1 $ alive neighbor in the current state of the array, then on the next iteration it will become alive. For an element at index $ i $ the neighbors would be elements with indices $ i - 1 $ and $ i + 1 $ . If there is no element at that index, it is considered to be a dead neighbor.\n- William is a humane person so all alive elements stay alive.\n\nCheck the note section for examples of the evolution.\n\nYou are given some initial state of all elements and you need to help William find the state of the array after $ m $ iterations of evolution.",
    "inputFormat": "Each test contains multiple test cases. The first line contains the number of test cases $ t $ ( $ 1 \\le t \\le 10^3 $ ). Description of the test cases follows.\n\nThe first line of each test case contains two integers $ n $ and $ m $ ( $ 2 \\le n \\le 10^3, 1 \\le m \\le 10^9 $ ), which are the total number of cells in the array and the number of iterations.\n\nThe second line of each test case contains a string of length $ n $ made up of characters \"0\" and \"1\" and defines the initial state of the array. \"1\" means a cell is alive and \"0\" means it is dead.\n\nIt is guaranteed that the sum of $ n $ over all test cases does not exceed $ 10^4 $ .",
    "outputFormat": "In each test case output a string of length $ n $ , made up of characters \"0\" and \"1\" \u2014 the state of the array after $ m $ iterations of evolution.",
    "samples": [
        [
            "4\n11 3\n01000000001\n10 2\n0110100101\n5 2\n10101\n3 100\n000",
            "11111001111\n1110111101\n10101\n000"
        ]
    ],
    "hint": "Sequence of iterations of evolution for the first test case\n\n- 01000000001 \u2014 initial state\n- 11100000011 \u2014 first iteration of evolution\n- 11110000111 \u2014 second iteration of evolution\n- 11111001111 \u2014 third iteration of evolution\n\nSequence of iterations of evolution for the second test case\n\n- 0110100101 \u2014 initial state\n- 1110111101 \u2014 first iteration of evolution\n- 1110111101 \u2014 second iteration of evolution",
    "translation": "$ t $ \u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u7ed9\u5b9a $ 01 $ \u4e32\u7684\u957f\u5ea6 $ n $ \u548c\u8f6e\u6570 $ m $\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u8f6e\uff0c\u6bcf\u4e2a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a $ 1 $ \u4e0e\u4e4b\u76f8\u90bb\u7684 $ 0 $ \u4f1a\u53d8\u6210 $ 1 $\u3002\u4f8b $ 101 $ \u4e2d\u7684 $ 0 $ \u4e0d\u4f1a\u53d8\u6210 $ 1 $\uff0c\u4f46 $ 1000001 $ \u7ecf\u8fc7  $ 2 $ \u8f6e\u540e\u53d8\u6210 $ 1110111 $\u3002\n\n\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u7ecf\u8fc7 $ m $ \u8f6e\u540e\u7684 $ 01 $ \u4e32\u5e76\u6362\u884c\u3002\n\n$ 1 \\le t \\le {10}^3 $\uff0c$ 2 \\le n \\le {10}^3 $\uff0c$ 1 \\le m \\le {10}^9 $\uff0c\u4fdd\u8bc1\u6240\u6709 $ n $ \u7684\u603b\u548c\u4e0d\u8d85\u8fc7 $ {10}^4 $\u3002"
}