{
    "description": "This is an interactive problem.\n\nWe have hidden an integer $ 1 \\le X \\le 10^{9} $ . You don't have to guess this number. You have to find the number of divisors of this number, and you don't even have to find the exact number: your answer will be considered correct if its absolute error is not greater than 7 or its relative error is not greater than $ 0.5 $ . More formally, let your answer be $ ans $ and the number of divisors of $ X $ be $ d $ , then your answer will be considered correct if at least one of the two following conditions is true:\n\n- $ | ans - d | \\le 7 $ ;\n- $ \\frac{1}{2} \\le \\frac{ans}{d} \\le 2 $ .\n\nYou can make at most $ 22 $ queries. One query consists of one integer $ 1 \\le Q \\le 10^{18} $ . In response, you will get $ gcd(X, Q) $ \u2014 the greatest common divisor of $ X $ and $ Q $ .\n\nThe number $ X $ is fixed before all queries. In other words, interactor is not adaptive.\n\nLet's call the process of guessing the number of divisors of number $ X $ a game. In one test you will have to play $ T $ independent games, that is, guess the number of divisors $ T $ times for $ T $ independent values of $ X $ .",
    "inputFormat": "The first line of input contains one integer $ T $ ( $ 1 \\le T       \\le 100 $ ) \u2014 the number of games.",
    "outputFormat": "To make a query print a line \"? Q\" ( $ 1 \\le Q \\le       10^{18} $ ). After that read one integer $ gcd(X, Q) $ . You can make no more than $ 22 $ such queries during one game.\n\nIf you are confident that you have figured out the number of divisors of $ X $ with enough precision, you can print your answer in \"! ans\" format. $ ans $ have to be an integer. If this was the last game, you have to terminate the program, otherwise you have to start the next game immediately. Note that the interactor doesn't print anything in response to you printing answer.\n\nAfter printing a query do not forget to output end of line and flush the output. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\n Hacks\n\nTo hack, use the following format:\n\nThe first line contains one integer $ T $ ( $ 1 \\le T \\le       100 $ ) \u2014 the number of games.\n\nEach of the next $ T $ lines contains one integer $ X $ ( $ 1       \\le X \\le 10^{9} $ ) \u2014 the hidden number.\n\nSo the example has the form\n\n ```\n<pre class=\"verbatim\"><br></br>2<br></br>998244353<br></br>4194304<br></br>\n```",
    "samples": [
        [
            "2\n\n1\n\n1\n\n1\n\n\n1024\n\n1048576\n\n4194304",
            "? 982306799268821872\n\n? 230856864650023977\n\n? 134690134760714371\n\n! 5\n? 1024\n\n? 1048576\n\n? 1073741824\n\n! 42"
        ]
    ],
    "hint": "Why the limitation for number of queries is 22 exactly? Maybe the problem author is a Taylor Swift fan.\n\nLet's look at the example.\n\nIn the first game $ X = 998\\,244\\,353 $ is hidden. Would be hard to guess this, right? This number is prime, so the number of its divisors is 2. The solution has made several random queries, and all the responses turned out to be 1 (strange things, not even one of three random numbers is divisible by $ 998\\,244\\,353 $ ). It's fare to assume that the hidden number doesn't have many divisors, so the solution has answered 5. Why not. This answer will be considered correct since $ | 5 - 2 | = 3 \\le 7 $ .\n\nIn the second game $ X = 4\\,194\\,304 = 2^{22} $ is hidden, it has 23 divisors. The solution has made queries $ 1024 =       2^{10} $ , $ 1\\,048\\,576 =2^{20} $ , $ 1\\,073\\,741\\,824 =       2^{30} $ and got responses $ 1024 = 2^{10} $ , $ 1\\,048\\,576       =2^{20} $ , $ 4\\,194\\,304 = 2^{22} $ , respectively. Then the solution got completely confused and answered the answer to The Ultimate Question of Life, the Universe, and Everything. This answer will be considered correct since $ \\frac{1}{2} \\le       \\frac{42}{23} \\le 2 $ .",
    "translation": "# \u9898\u610f\n\u8981\u6c42\u731c\u4e00\u4e2a$1$\u5230$10^9$\u4e4b\u95f4\u7684\u4e00\u4e2a\u6570$X$\u3002\n\n\u4f60\u53ef\u4ee5\u8be2\u95ee\u4e00\u4e2a\u6570$Q$\uff08$1\\le Q\\le10^{18}$\uff09\uff0c\u7136\u540e\u8bfb\u53d6\u5230$\\gcd(X,Q)$\u3002\n\n\u5728\u4e0d\u591a\u4e8e$22$\u6b21\u731c\u6d4b\uff0c\u5f97\u5230$X$\u7684\u56e0\u6570\u4e2a\u6570\u3002\n\n\u6ce8\u610f\uff1a\u8bbe\u4f60\u7684\u7b54\u6848\u4e3a$d$\uff0c\u6807\u51c6\u7b54\u6848\u4e3a$ans$\uff0c\u53ea\u8981\u6ee1\u8db3$|ans-d|\\le7$\u6216$\\frac12\\le\\frac{ans}{d}\\le2$\u5373\u7b97\u6b63\u786e\u3002\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u6570\u636e\u7ec4\u6570$t$\u3002\n\n\u4ea4\u4e92\u683c\u5f0f\uff1a\n\n\u8be2\u95ee\uff1a\"? Q\"\uff1b\u731c\u6d4b\uff1a\"! d\"\u3002\uff08\u6ce8\u610f\u6bcf\u6b21\u8f93\u51fa\u540e\u8981\u5237\u65b0\u7f13\u51b2\u533a\uff09\u3002"
}