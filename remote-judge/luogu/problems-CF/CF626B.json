{
    "description": "Catherine has a deck of $ n $ cards, each of which is either red, green, or blue. As long as there are at least two cards left, she can do one of two actions:\n\n- take any two (not necessarily adjacent) cards with different colors and exchange them for a new card of the third color;\n- take any two (not necessarily adjacent) cards with the same color and exchange them for a new card with that color.\n\nShe repeats this process until there is only one card left. What are the possible colors for the final card?",
    "inputFormat": "The first line of the input contains a single integer $ n $ ( $ 1<=n<=200 $ ) \u2014 the total number of cards.\n\nThe next line contains a string $ s $ of length $ n $ \u2014 the colors of the cards. $ s $ contains only the characters 'B', 'G', and 'R', representing blue, green, and red, respectively.",
    "outputFormat": "Print a single string of up to three characters \u2014 the possible colors of the final card (using the same symbols as the input) in alphabetical order.",
    "samples": [
        [
            "2\nRB\n",
            "G\n"
        ],
        [
            "3\nGRG\n",
            "BR\n"
        ],
        [
            "5\nBBBBB\n",
            "B\n"
        ]
    ],
    "hint": "In the first sample, Catherine has one red card and one blue card, which she must exchange for a green card.\n\nIn the second sample, Catherine has two green cards and one red card. She has two options: she can exchange the two green cards for a green card, then exchange the new green card and the red card for a blue card. Alternatively, she can exchange a green and a red card for a blue card, then exchange the blue card and remaining green card for a red card.\n\nIn the third sample, Catherine only has blue cards, so she can only exchange them for more blue cards.",
    "translation": "## \u9898\u76ee\n$Catherine$ \u6709\u4e00\u526f$n$ \u5f20\u724c\uff0c\u6bcf\u4e00\u5f20\u724c\u8981\u4e48\u662f\u7ea2\u7684\uff0c\u8981\u4e48\u662f\u7eff\u7684\uff0c\u8981\u4e48\u662f\u84dd\u7684\u3002\u53ea\u8981\u81f3\u5c11\u6709\u4e24\u5f20\u724c\uff0c\u5979\u5c31\u53ef\u4ee5\u505a\u4e24\u4e2a\u52a8\u4f5c\u4e4b\u4e00\uff1a\n\n* \u53d6\u4e24\u5f20\uff08\u4e0d\u4e00\u5b9a\u662f\u76f8\u90bb\u7684\uff09\u4e0d\u540c\u989c\u8272\u7684\u5361\u7247\uff0c\u6362\u6210\u7b2c\u4e09\u79cd\u989c\u8272\u7684\u65b0\u5361\u7247\uff1b\n\n* \u53d6\u4e24\u5f20\uff08\u4e0d\u4e00\u5b9a\u662f\u76f8\u90bb\u7684\uff09\u76f8\u540c\u989c\u8272\u7684\u5361\u7247\uff0c\u6362\u6210\u4e00\u5f20\u6709\u8fd9\u79cd\u989c\u8272\u7684\u65b0\u5361\u7247\u3002\n\n\u5979\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u5f20\u5361\u7247\u3002\u6700\u540e\u4e00\u5f20\u5361\u53ef\u80fd\u6709\u4ec0\u4e48\u989c\u8272\uff1f\n\n## \u8f93\u5165\n\n\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570$n (1 \\le n \\le 200)$ \u8868\u793a\u603b\u7684\u5361\u7247\u6570\u3002\n\n\u4e0b\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$ \u7684\u5b57\u7b26\u4e32$s$ \u8868\u793a\u5361\u7247\u7684\u989c\u8272\u3002$s$ \u53ea\u5305\u542b\u5b57\u7b26`B`\u3001`G`\u548c`R`\uff0c\u5206\u522b\u4ee3\u8868\u84dd\u8272\u3001\u7eff\u8272\u548c\u7ea2\u8272\u3002\n\n## \u8f93\u51fa\n\n\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u7684\u989c\u8272\u3002\u6309\u987a\u5e8f\u8f93\u51fa\u3002\n\n\u611f\u8c22@frankchenfu \u63d0\u4f9b\u7684\u7ffb\u8bd1"
}