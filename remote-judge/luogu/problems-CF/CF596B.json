{
    "description": "Wilbur the pig is tinkering with arrays again. He has the array $ a_{1},a_{2},...,a_{n} $ initially consisting of $ n $ zeros. At one step, he can choose any index $ i $ and either add $ 1 $ to all elements $ a_{i},a_{i+1},...\\ ,a_{n} $ or subtract $ 1 $ from all elements $ a_{i},a_{i+1},...,a_{n} $ . His goal is to end up with the array $ b_{1},b_{2},...,b_{n} $ .\n\nOf course, Wilbur wants to achieve this goal in the minimum number of steps and asks you to compute this value.",
    "inputFormat": "The first line of the input contains a single integer $ n $ ( $ 1<=n<=200000 $ ) \u2014 the length of the array $ a_{i} $ . Initially $ a_{i}=0 $ for every position $ i $ , so this array is not given in the input.\n\nThe second line of the input contains $ n $ integers $ b_{1},b_{2},...,b_{n} $ ( $ -10^{9}<=b_{i}<=10^{9} $ ).",
    "outputFormat": "Print the minimum number of steps that Wilbur needs to make in order to achieve $ a_{i}=b_{i} $ for all $ i $ .",
    "samples": [
        [
            "5\n1 2 3 4 5\n",
            "5"
        ],
        [
            "4\n1 2 2 1\n",
            "3"
        ]
    ],
    "hint": "In the first sample, Wilbur may successively choose indices $ 1 $ , $ 2 $ , $ 3 $ , $ 4 $ , and $ 5 $ , and add $ 1 $ to corresponding suffixes.\n\nIn the second sample, Wilbur first chooses indices $ 1 $ and $ 2 $ and adds $ 1 $ to corresponding suffixes, then he chooses index $ 4 $ and subtract $ 1 $ .",
    "translation": "# \u9898\u76ee\u63cf\u8ff0\r\n\u5c0f\u732a\u5a01\u5c14\u4f2f\u53c8\u5728\u8bd5\u56fe\u4fee\u590d\u6570\u7ec4\u4e86\u3002\u4ed6\u6709\u4e00\u4e2a\u6570\u7ec4 a[1],a[2],...,a[n] \u6700\u521d\u7531 n \u4e2a0\u7ec4\u6210\u3002\u7b2c\u4e00\u6b65\uff0c\u4ed6\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u4e00\u4e2a\u4e0b\u6807 i \u5e76\u8ba9\u5176\u4e0b\u6807\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20 a[i],a[i+1],...,a[n] \u52a01\uff0c\u6216\u8005\u51cf1\u3002\u4ed6\u7684\u76ee\u6807\u662f\u5f97\u5230\u6570\u7ec4 b[1],b[2],...,b[n]\u3002\r\n\u5f53\u7136\uff0c\u5a01\u5c14\u4f2f\u5e0c\u671b\u4f7f\u7528\u6700\u5c11\u7684\u6b65\u6570\u6311\u6218\u8fd9\u4e2a\u76ee\u6807\uff0c\u5e76\u8981\u6c42\u4f60\u8ba1\u7b97\u8fd9\u4e2a\u503c\u3002\r\n# \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\r\n## \u8f93\u5165\u683c\u5f0f\r\n\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 n(1<=n<=200000) \uff0c\u4ee3\u8868\u6570\u7ec4\u7684\u957f\u5ea6\u3002\r\n\u56e0\u4e3a\u6574\u4e2a\u6570\u7ec4\u521d\u59cb\u5143\u7d20\u5168\u662f0\uff0c\u6240\u4ee5\u6570\u7ec4\u7684\u5143\u7d20\u4e0d\u4f1a\u7ed9\u51fa\u3002\r\n\u7b2c\u4e8c\u884c\u5305\u62ec n \u4e2a\u6574\u6570 b[1],b[2],...,b[n] (-10^9<=b[i]<=10^9)\r\n## \u8f93\u51fa\u683c\u5f0f\r\n\u8f93\u51fa\u6700\u5c0f\u7684\u6b65\u6570\u3002"
}