{
    "description": "Calvin the robot lies in an infinite rectangular grid. Calvin's source code contains a list of $ n $ commands, each either 'U', 'R', 'D', or 'L' \u2014 instructions to move a single square up, right, down, or left, respectively. How many ways can Calvin execute a non-empty contiguous substrings of commands and return to the same square he starts in? Two substrings are considered different if they have different starting or ending indices.",
    "inputFormat": "The first line of the input contains a single positive integer, $ n $ ( $ 1<=n<=200 $ ) \u2014 the number of commands.\n\nThe next line contains $ n $ characters, each either 'U', 'R', 'D', or 'L' \u2014 Calvin's source code.",
    "outputFormat": "Print a single integer \u2014 the number of contiguous substrings that Calvin can execute and return to his starting square.",
    "samples": [
        [
            "6\nURLLDR\n",
            "2\n"
        ],
        [
            "4\nDLUU\n",
            "0\n"
        ],
        [
            "7\nRLRLRLR\n",
            "12\n"
        ]
    ],
    "hint": "In the first case, the entire source code works, as well as the \"RL\" substring in the second and third characters.\n\nNote that, in the third case, the substring \"LR\" appears three times, and is therefore counted three times to the total result.",
    "translation": "## \u9898\u9762\n$Calvin$ \u6709\u4e00\u4e2a\u673a\u5668\u4eba\u3002\u8fd9\u4e2a\u673a\u5668\u4eba\u6709`U`,`D`,`L`,`R`\u56db\u4e2a\u6307\u4ee4\u3002\n\n* $U$ \uff1a\u5411\u4e0a\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\n* $D$ \uff1a\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\n* $L$ \uff1a\u5411\u5de6\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6 \n* $R$ \uff1a\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\n\n$Calvin$ \u7ed9\u8fd9\u4e2a\u673a\u5668\u4eba\u968f\u610f\u8f93\u5165\u4e86\u4e00\u4e32\u6307\u4ee4\uff0c\u5e76\u770b\u7740\u5b83\u7f13\u7f13\u79fb\u52a8\u3002\u795e\u5947\u7684\u662f\u6700\u540e\u673a\u5668\u4eba\u8d70\u56de\u4e86\u8d77\u70b9\u3002\n\n\u73b0\u5728$Calvin$ \u60f3\u77e5\u9053\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e00\u4e2a\u957f\u4e3a$n$ \u7684\u547d\u4ee4\u5e8f\u5217\uff0c\u5b83\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u975e\u7a7a\u8fde\u7eed\u5b50\u5e8f\u5217\uff0c\u80fd\u4f7f\u5f97\u673a\u5668\u4eba\u5728\u6267\u884c\u8fd9\u4e2a\u5b50\u5e8f\u5217\u547d\u4ee4\u540e\u80fd\u56de\u5230\u8d77\u70b9\u3002\u4e24\u4e2a\u5b50\u5e8f\u5217\u4e0d\u540c\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u5728\u539f\u7ed9\u5b9a\u5e8f\u5217\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\u4e0d\u540c\u6216\u7ec8\u6b62\u4f4d\u7f6e\u4e0d\u540c\u3002\n\n## \u8f93\u5165\n* \u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570$n (1 \\le n \\le 200)$ \u8868\u793a\u547d\u4ee4\u5e8f\u5217\u957f\u5ea6\u3002\n* \u7b2c\u4e8c\u884c\u4e00\u4e2a\u957f\u5c3en\u7684\u5b57\u7b26\u4e32\u8868\u793a\u547d\u4ee4\u5e8f\u5217\u3002\u7528\u5b57\u7b26`U`,`D`,`L`,`R`\u5206\u522b\u8868\u793a\u56db\u79cd\u547d\u4ee4\u3002\n\n## \u8f93\u51fa\n\u4ec5\u4e00\u884c\u4e00\u4e2a\u6574\u6570\u8868\u793a\u7b54\u6848\u3002\n\n\u611f\u8c22@frankchenfu \u63d0\u4f9b\u7684\u7ffb\u8bd1"
}