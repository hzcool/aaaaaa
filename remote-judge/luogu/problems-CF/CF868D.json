{
    "description": "You are given $ n $ strings $ s_{1},s_{2},...,s_{n} $ consisting of characters $ 0 $ and $ 1 $ . $ m $ operations are performed, on each of them you concatenate two existing strings into a new one. On the $ i $ -th operation the concatenation $ s_{ai}s_{bi} $ is saved into a new string $ s_{n+i} $ (the operations are numbered starting from $ 1 $ ). After each operation you need to find the maximum positive integer $ k $ such that all possible strings consisting of $ 0 $ and $ 1 $ of length $ k $ (there are $ 2^{k} $ such strings) are substrings of the new string. If there is no such $ k $ , print $ 0 $ .",
    "inputFormat": "The first line contains single integer $ n $ ( $ 1<=n<=100 $ ) \u2014 the number of strings. The next $ n $ lines contain strings $ s_{1},s_{2},...,s_{n} $ ( $ 1<=|s_{i}|<=100 $ ), one per line. The total length of strings is not greater than $ 100 $ .\n\nThe next line contains single integer $ m $ ( $ 1<=m<=100 $ ) \u2014 the number of operations. $ m $ lines follow, each of them contains two integers $ a_{i} $ abd $ b_{i} $ ( $ 1<=a_{i},b_{i}<=n+i-1 $ ) \u2014 the number of strings that are concatenated to form $ s_{n+i} $ .",
    "outputFormat": "Print $ m $ lines, each should contain one integer \u2014 the answer to the question after the corresponding operation.",
    "samples": [
        [
            "5\n01\n10\n101\n11111\n0\n3\n1 2\n6 5\n4 4\n",
            "1\n2\n0\n"
        ]
    ],
    "hint": "On the first operation, a new string \"0110\" is created. For $ k=1 $ the two possible binary strings of length $ k $ are \"0\" and \"1\", they are substrings of the new string. For $ k=2 $ and greater there exist strings of length $ k $ that do not appear in this string (for $ k=2 $ such string is \"00\"). So the answer is $ 1 $ .\n\nOn the second operation the string \"01100\" is created. Now all strings of length $ k=2 $ are present.\n\nOn the third operation the string \"1111111111\" is created. There is no zero, so the answer is $ 0 $ .",
    "translation": "\u6709n+m\u4e2a01\u4e32\uff0c\u524dn\u4e2a\u4e32\u7531\u8f93\u5165\u7ed9\u51fa\uff0c\u957f\u5ea6\u548c\u4e0d\u8d85\u8fc7100\uff0c\u540em\u4e2a\u4e32\u7531\u524d\u9762\u4e24\u4e2a\u4e32\uff08\u4e0d\u4e00\u5b9a\u662f\u524dn\u4e2a\u4e32\u4e2d\u7684\u4e32\uff09\u62fc\u63a5\u800c\u6210\uff0c\u5bf9\u4e8e\u540em\u4e2a\u4e32\u4e2d\u7684\u6bcf\u4e2a\u4e32\uff0c\u6c42\u51fa\u6700\u5927\u7684k\uff0c\u4f7f\u5f97\u6240\u6709\u957f\u5ea6\u4e3ak\u768401\u4e32\u5747\u88ab\u5b83\u5305\u542b"
}