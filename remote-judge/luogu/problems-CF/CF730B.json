{
    "description": "This is an interactive problem. You have to use flush operation right after printing each line. For example, in C++ you should use function fflush(stdout), in Java \u2014 System.out.flush(), in Pascal \u2014 flush(output) and in Python \u2014 sys.stdout.flush().\n\nIn this problem, you need to find maximal and minimal elements of an array. What could be simpler?\n\nYou can imagine that the jury has an array, and initially you know the only number $ n $ \u2014 array's length.\n\nArray's elements are numbered from $ 1 $ to $ n $ . You are allowed to compare two elements of the array by using their indices $ i $ and $ j $ . There are three possible responses to this query: '<' (if $ a_{i} $ is less than $ a_{j} $ ), '=' (if $ a_{i} $ is equal to $ a_{j} $ ) and finally '>' (if $ a_{i} $ is greater than $ a_{j} $ ).\n\nIt's known that it's always possible to find both maximal and minimal elements of the array by using no more than ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF730B/64e27b3d6ef68e5168a71a1fda863cd37a7518ef.png) comparisons, where $ \u2308\\ x\u2309 $ is the result of rounding $ x $ up.\n\nWrite the program that will find positions of the minimum and the maximum in the jury's array of length $ n $ , by using no more than $ f(n) $ comparisons.",
    "inputFormat": "",
    "outputFormat": "Each test for this problem will contain one or more arrays. You have to find positions of minimal and maximal elements for each of these arrays. The first line of the input contains integer $ T $ ( $ 1<=T<=1000 $ ) \u2014 number of arrays in the test.\n\nThus, at the beginning, you program should read number $ T $ , and then it should solve the problem for $ T $ jury's arrays one by one.\n\nThen input for each array goes. Firstly, your program has to read the number $ n $ ( $ 1<=n<=50 $ ) \u2014 the length of the array. It will be provided in the next line of the input.\n\nFurther, your program can perform comparisons or report that the answer is found.\n\n- To perform a comparison, you have to output string of the following pattern \u00ab? i j\u00bb ( $ i $ and $ j $ must be integer numbers from $ 1 $ to $ n $ ) \u2014 the indices of the elements to compare in the current query.\n- To report the indices of minimal and maximal elements of the hidden array, your program have to output a line in the form \u00ab! i j\u00bb ( $ i $ and $ j $ must be integer numbers from $ 1 $ to $ n $ ), where $ i $ is an index of the minimal element of array, and $ j $ is an index of the maximal element of the array. If there are several possible answers to the problem, you can output any of them.\n\nThere are several possible responses for a comparison:\n\n- '<' \u2014 if $ a_{i} $ is less than $ a_{j} $ ,\n- '=' \u2014 if $ a_{i} $ is equal to $ a_{j} $ ,\n- '>' \u2014 if $ a_{i} $ is greater than $ a_{j} $ .\n\nFor an array of length $ n $ your program can make at most ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF730B/64e27b3d6ef68e5168a71a1fda863cd37a7518ef.png) comparisons. Note that the operation of reporting an answer (\u00ab! i j\u00bb ) is not included into the value of $ f(n) $ .\n\nAfter the answer is reported, your program has to solve the problem for the next array or it should terminate if all $ T $ arrays are processed.",
    "samples": [
        [
            "2\n2\n\u00a0\n&gt;\n\u00a0\n3\n\u00a0\n=\n\u00a0\n=\n\u00a0",
            "\u00a0\n\u00a0\n? 1 2\n\u00a0\n! 2 1\n\u00a0\n? 3 1\n\u00a0\n? 2 1\n\u00a0\n! 2 3"
        ]
    ],
    "hint": "",
    "translation": "\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\n\u8f93\u5165\u5171\u6709$T$\u7ec4\u6570\u636e\u3002$1\\le T \\le 1000$\n\u4f60\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u6570\u7ec4\uff0c\u7f16\u53f7\u3002\u4e3a$1,2,\\dots,n$\u3002\u4f60\u9700\u8981\u731c\u6d4b\u6700\u5c0f\u6570\u548c\u6700\u5927\u6570\u7684\u7f16\u53f7\u3002$1\\le n \\le 50$\n\u6bcf\u6b21\uff0c\u4f60\u53ef\u4ee5\u8be2\u95ee\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\u3002\u683c\u5f0f\u4e3a\u00ab? i j\u00bb\uff0c\u5176\u4e2d$i$\u548c$j$\u662f\u4e24\u4e2a\u6570\u7684\u7f16\u53f7\u3002\u6bcf\u6b21\u4f1a\u8fd4\u56de<,=\u6216>\u3002\u731c\u6d4b\u7684\u6b21\u6570\u4e0d\u80fd\u8d85\u8fc7$\\lceil\\frac{3n}{2}\\rceil-2$\u6b21\u3002\n\u5982\u679c\u731c\u6d4b\u51fa\uff0c\u53ef\u4ee5\u7528\u00ab! i j\u00bb\u63d0\u4ea4\u3002\u5176\u4e2d$i$\u662f\u6700\u5c0f\u6570\u7684\u7f16\u53f7\uff0c$j$\u662f\u6700\u5927\u6570\u7684\u7f16\u53f7\u3002\u5982\u679c\u6709\u591a\u79cd\u53ef\u80fd\u6027\u63d0\u4ea4\u4e00\u79cd\u5373\u53ef\u3002"
}