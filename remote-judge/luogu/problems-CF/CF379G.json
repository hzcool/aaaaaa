{
    "description": "Jack and Jill are tired of the New Year tree, now they've got a New Year cactus at home! A cactus is a connected undirected graph where any two simple cycles have at most one common vertex. In other words, this graph doesn't have any edges that lie on more than one simple cycle.\n\nOn the 31st of December they are going to decorate the cactus by hanging toys to its vertices. At most one toy is going to hang on each vertex \u2014 it's either the toy Jack hung or the toy Jill hung. It's possible for a vertex to have no toys.\n\nJack and Jill has been arguing, so they don't want any edge to connect two vertices where one vertex has Jack's toy and the other vertex has Jill's toy.\n\nJack has decided to hang $ a $ toys. What maximum number of toys $ b $ can Jill hang if they both cooperate to maximize this value? Your task is to write a program that finds the sought $ b $ for all $ a $ from 0 to the number of vertices on the New Year Cactus.",
    "inputFormat": "The first line contains two integers $ n $ and $ m $ ( $ 1<=n<=2500,n-1<=m $ ) \u2014 the number of vertices and the number of edges, correspondingly. The next $ m $ lines contain two integers $ a $ , $ b $ each ( $ 1<=a,b<=n,a\u2260b $ ) that mean that there is an edge connecting vertices $ a $ \u0438 $ b $ . Any pair of vertices has at most one edge between them.",
    "outputFormat": "The first line must contain space-separated $ b_{a} $ (for all $ 0<=a<=n $ ) where $ b_{a} $ equals the maximum number of Jill's toys on the cactus considering that it has $ a $ Jack's toys. Numbers $ b_{a} $ go in the order of increasing $ a $ .",
    "samples": [
        [
            "1 0\n",
            "1 0 \n"
        ],
        [
            "16 20\n1 2\n3 4\n5 6\n6 7\n7 8\n9 10\n10 11\n11 12\n13 14\n15 16\n1 5\n9 13\n14 10\n10 6\n6 2\n15 11\n11 7\n7 3\n16 12\n8 4\n",
            "16 13 12 12 10 8 8 7 6 4 4 3 3 1 0 0 0 \n"
        ]
    ],
    "hint": "The cactus from the second example is:\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF379G/155d4bde1e7b9618031a0958554d8c6f0d3f7cab.png)",
    "translation": "\n\n\u538c\u5026\u4e86\u6bcf\u5e74\u7684\u65b0\u5e74\u6811\uff0cJack\u548cJill\u6253\u7b97\u5728\u5bb6\u91cc\u79cd\u4e0a\u4e00\u68f5\u65b0\u5e74\u4ed9\u4eba\u638c\uff01\u5b9a\u4e49\u4e00\u5f20\u56fe\u4e3a\u4ed9\u4eba\u638c\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u81f3\u591a\u5c5e\u4e8e\u4e00\u4e2a\u7b80\u5355\u73af\u3002\n\n\u572812.31\uff0c \u5b83\u4eec\u4e24\u4e2a\u5c06\u5728\u4ed9\u4eba\u638c\u4e0a\u6302\u4e0a\u73a9\u5177\u3002\u6bcf\u4e2a\u8282\u70b9\u4e0a\u81f3\u591a\u53ea\u80fd\u60ac\u6302\u4e00\u4e2a\u73a9\u5177\uff08Jack\u7684\u6216Jill\u7684\uff09\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u6302\u3002\n\n\u7531\u4e8e\u4e24\u4eba\u53d1\u751f\u4e86\u4e00\u4e9b\u4e0d\u6109\u5feb\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e0d\u5e0c\u671b\u4ed9\u4eba\u638c\u4e0a\u5b58\u5728\u4e00\u6761\u8fb9\uff0c\u4f7f\u5f97\u5176\u4e00\u7aef\u7684\u8282\u70b9\u6302\u4e86\u5176\u4e2d\u4e00\u4e2a\u4eba\u7684\u73a9\u5177\uff0c\u53e6\u4e00\u7aef\u6302\u4e86\u53e6\u4e00\u4e2a\u4eba\u7684\u73a9\u5177\u3002\n\n\u4f60\u7684\u95ee\u9898\u662f\uff0c\u5f53Jack\u9009\u62e9\u6302a\u4e2a\u73a9\u5177\u65f6\uff0cJill\u6700\u591a\u80fd\u6302\u591a\u5c11\u4e2a\u73a9\u5177\uff1f \u8bf7\u5bf9\u4e8e\u6240\u6709\u7684a\u2208[0,n] \uff08n\u4e3a\u4ed9\u4eba\u638c\u7684\u8282\u70b9\u6570\uff09 \u627e\u5230\u4e00\u4e2a\u7b54\u6848b \u3002\n\n\u8f93\u5165\uff1a \u7b2c\u4e00\u884c\u4e24\u4e2a\u6570n,m($1 <= n <= 2500, n - 1 <= m$ )\n\n\u63a5\u4e0b\u6765m\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570a,b\uff0c\u8868\u793a\u4e24\u4e2a\u8282\u70b9\u4e2d\u95f4\u6709\u4e00\u6761\u8fb9\u3002\u6570\u636e\u65e0\u91cd\u8fb9\u81ea\u73af\u3002\n\n\u8f93\u51fa\uff1a \u4e00\u884c\uff0c n+1\u4e2a\u6570\uff0c\u5206\u522b\u4ee3\u8868Jack\u9009\u62e9\u60ac\u63020\uff0c1\uff0c2\uff0c....n\u4e2a\u73a9\u5177\u65f6\uff0cJill\u6700\u591a\u80fd\u60ac\u6302\u7684\u73a9\u5177\u6570\u76ee\u3002\n"
}