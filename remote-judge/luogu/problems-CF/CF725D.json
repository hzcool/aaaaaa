{
    "description": "One tradition of ACM-ICPC contests is that a team gets a balloon for every solved problem. We assume that the submission time doesn't matter and teams are sorted only by the number of balloons they have. It means that one's place is equal to the number of teams with more balloons, increased by $ 1 $ . For example, if there are seven teams with more balloons, you get the eight place. Ties are allowed.\n\nYou should know that it's important to eat before a contest. If the number of balloons of a team is greater than the weight of this team, the team starts to float in the air together with their workstation. They eventually touch the ceiling, what is strictly forbidden by the rules. The team is then disqualified and isn't considered in the standings.\n\nA contest has just finished. There are $ n $ teams, numbered $ 1 $ through $ n $ . The $ i $ -th team has $ t_{i} $ balloons and weight $ w_{i} $ . It's guaranteed that $ t_{i} $ doesn't exceed $ w_{i} $ so nobody floats initially.\n\nLimak is a member of the first team. He doesn't like cheating and he would never steal balloons from other teams. Instead, he can give his balloons away to other teams, possibly making them float. Limak can give away zero or more balloons of his team. Obviously, he can't give away more balloons than his team initially has.\n\nWhat is the best place Limak can get?",
    "inputFormat": "The first line of the standard input contains one integer $ n $ ( $ 2<=n<=300000 $ ) \u2014 the number of teams.\n\nThe $ i $ -th of $ n $ following lines contains two integers $ t_{i} $ and $ w_{i} $ ( $ 0<=t_{i}<=w_{i}<=10^{18} $ ) \u2014 respectively the number of balloons and the weight of the $ i $ -th team. Limak is a member of the first team.",
    "outputFormat": "Print one integer denoting the best place Limak can get.",
    "samples": [
        [
            "8\n20 1000\n32 37\n40 1000\n45 50\n16 16\n16 16\n14 1000\n2 1000\n",
            "3\n"
        ],
        [
            "7\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n5 5\n",
            "2\n"
        ],
        [
            "7\n14000000003 1000000000000000000\n81000000000 88000000000\n5000000000 7000000000\n15000000000 39000000000\n46000000000 51000000000\n0 1000000000\n0 0\n",
            "2\n"
        ]
    ],
    "hint": "In the first sample, Limak has $ 20 $ balloons initially. There are three teams with more balloons ( $ 32 $ , $ 40 $ and $ 45 $ balloons), so Limak has the fourth place initially. One optimal strategy is:\n\n1. Limak gives $ 6 $ balloons away to a team with $ 32 $ balloons and weight $ 37 $ , which is just enough to make them fly. Unfortunately, Limak has only $ 14 $ balloons now and he would get the fifth place.\n2. Limak gives $ 6 $ balloons away to a team with $ 45 $ balloons. Now they have $ 51 $ balloons and weight $ 50 $ so they fly and get disqualified.\n3. Limak gives $ 1 $ balloon to each of two teams with $ 16 $ balloons initially.\n4. Limak has $ 20-6-6-1-1=6 $ balloons.\n5. There are three other teams left and their numbers of balloons are $ 40 $ , $ 14 $ and $ 2 $ .\n6. Limak gets the third place because there are two teams with more balloons.\n\nIn the second sample, Limak has the second place and he can't improve it.\n\nIn the third sample, Limak has just enough balloons to get rid of teams $ 2 $ , $ 3 $ and $ 5 $ (the teams with $ 81000000000 $ , $ 5000000000 $ and $ 46000000000 $ balloons respectively). With zero balloons left, he will get the second place (ex-aequo with team $ 6 $ and team $ 7 $ ).",
    "translation": "ACM\u6bd4\u8d5b\uff0c\u5927\u5bb6\u90fd\u77e5\u9053\u3002AC\u4e00\u9898\u4f1a\u6709\u4e00\u4e2a\u6c14\u7403\u3002\n\u73b0\u5728\u6709$n(2<=n<=300000)$ \u652f\u961f\u4f0d\uff0c\u6bcf\u652f\u961f\u4f0d\u7684\u91cd\u91cf\u662f$w_i$ \uff0c\u62e5\u6709$t_i$ \u4e2a\u6c14\u7403$(w_i,t_i<=10^{18})$ \uff0c\u5f53\u4e00\u652f\u961f\u4f0d\u7684\u6c14\u7403\u4e2a\u6570\u6bd4\u5b83\u7684\u91cd\u91cf\u90fd\u8981\u5927\u65f6\uff0c\u8fd9\u4e2a\u961f\u4f0d\u5c31\u4f1a\u98d8\u8d77\u6765\uff0c\u4ece\u800c\u88ab\u53d6\u6d88\u6bd4\u8d5b\u8d44\u683c\u3002\n\u73b0\u5728\u4f60\u5e26\u9886\u7684\u662f1\u53f7\u961f\uff0c\u4f60\u5e0c\u671b\u4f60\u961f\u4f0d\u7684\u540d\u6b21\u5c3d\u53ef\u80fd\u9760\u524d\uff0c\u4f60\u662f\u4e2a\u6709\u539f\u5219\u7684\u4eba\uff0c\u4e0d\u4f1a\u5077\u6c14\u7403\uff0c\u4f46\u4f60\u53ef\u4ee5\u628a\u6c14\u7403\u9001\u7ed9\u522b\u7684\u961f\u4f0d\uff0c\u8ba9\u4ed6\u4eec\u98de\u8d77\u6765\u3002\n\u6c42\u6700\u7ec8\u4f60\u7684\u961f\u4f0d\u6240\u83b7\u5f97\u7684\u6700\u597d\u540d\u6b21\n# \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n### \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\uff1a\u4e00\u4e2a\u6b63\u6574\u6570$n(2<=n<=300000)$ \uff0c\u961f\u4f0d\u7684\u603b\u6570\n\u7b2c\u4e8c\u884c\u5230\u7b2c$n+1$ \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6574\u6570$t_i,w_i(0<=t_i<=w_i<=10^{18})$ \uff0c\u5206\u522b\u8868\u793a\u7b2c$i$ \u4e2a\u961f\u4f0d\u6c14\u7403\u7684\u4e2a\u6570\u4ee5\u53ca\u5b83\u7684\u91cd\u91cf\u3002\u4f60\u7684\u961f\u4f0d\u662f1\u53f7\u961f\u3002\n### \u8f93\u51fa\u683c\u5f0f\n\u4ec5\u6709\u4e00\u884c\uff0c\u8f93\u51fa\u4f60\u5e26\u9886\u7684\u961f\u4f0d\u80fd\u591f\u8fbe\u5230\u7684\u6700\u597d\u540d\u6b21\n\n\u611f\u8c22@2016wudi \u63d0\u4f9b\u7684\u7ffb\u8bd1"
}