{
    "description": "You are given a board of size $ n \\times n $ , where $ n $ is odd (not divisible by $ 2 $ ). Initially, each cell of the board contains one figure.\n\nIn one move, you can select exactly one figure presented in some cell and move it to one of the cells sharing a side or a corner with the current cell, i.e. from the cell $ (i, j) $ you can move the figure to cells:\n\n- $ (i - 1, j - 1) $ ;\n- $ (i - 1, j) $ ;\n- $ (i - 1, j + 1) $ ;\n- $ (i, j - 1) $ ;\n- $ (i, j + 1) $ ;\n- $ (i + 1, j - 1) $ ;\n- $ (i + 1, j) $ ;\n- $ (i + 1, j + 1) $ ;\n\nOf course, you can not move figures to cells out of the board. It is allowed that after a move there will be several figures in one cell.\n\nYour task is to find the minimum number of moves needed to get all the figures into one cell (i.e. $ n^2-1 $ cells should contain $ 0 $ figures and one cell should contain $ n^2 $ figures).\n\nYou have to answer $ t $ independent test cases.",
    "inputFormat": "The first line of the input contains one integer $ t $ ( $ 1       \\le t \\le 200 $ ) \u2014 the number of test cases. Then $ t $ test cases follow.\n\nThe only line of the test case contains one integer $ n $ ( $ 1       \\le n < 5 \\cdot 10^5 $ ) \u2014 the size of the board. It is guaranteed that $ n $ is odd (not divisible by $ 2 $ ).\n\nIt is guaranteed that the sum of $ n $ over all test cases does not exceed $ 5 \\cdot 10^5 $ ( $ \\sum n \\le 5 \\cdot 10^5 $ ).",
    "outputFormat": "For each test case print the answer \u2014 the minimum number of moves needed to get all the figures into one cell.",
    "samples": [
        [
            "3\n1\n5\n499993",
            "0\n40\n41664916690999888"
        ]
    ],
    "hint": "",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\r\n\r\n\u6709\u4e00\u4e2a$n\u00d7n$\u7684\u68cb\u76d8\uff08$n$\u4e3a\u5947\u6570\uff09\uff0c\u4e00\u5f00\u59cb\u6bcf\u4e2a\u683c\u5b50\u4e2d\u90fd\u542b\u6709\u4e00\u4e2a\u6570\u3002\u73b0\u5728\u4f60\u53ef\u4ee5\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\r\n\r\n\u4e00\u6b65\u64cd\u4f5c\u6307\u9009\u5b9a\u4efb\u610f\u683c\u4e2d\u7684\u6070\u597d\u4e00\u4e2a\u6570\uff0c\u5e76\u5c06\u5176\u79fb\u52a8\u5230\u5468\u56f4\u7684\u516b\u4e2a\u683c\u5b50\u4e2d\u4e4b\u4e00\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u539f\u6765\u683c\u5b50\u7684\u5750\u6807\u662f$(i,j)$\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u79fb\u5230$(i+1,j)$$(i-1,j)$$(i+1,j+1)$$(i,j+1)$$(i-1,j+1)$$(i+1,j-1)$$(i,j-1)$$(i-1,j-1)$\u8fd9\u516b\u4e2a\u683c\u5b50\u4e2d\u3002\r\n\r\n\u5f53\u7136\uff0c\u4f60\u4e0d\u80fd\u628a\u68cb\u5b50\u79fb\u5230\u68cb\u76d8\u5916\u3002\u5141\u8bb8\u5728\u4e00\u6b21\u64cd\u4f5c\u540e\u4e00\u4e2a\u683c\u5b50\u91cc\u5b58\u5728\u591a\u4e2a\u6570\u3002\r\n\r\n\u4f60\u7684\u4efb\u52a1\u662f\u627e\u51fa\u64cd\u4f5c\u7684\u6700\u5c0f\u6b21\u6570\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u6570\u90fd\u5728\u4e00\u4e2a\u65b9\u683c\u5185\u3002\u4e5f\u5c31\u662f\u8bf4\u5728$(n^2-1)$\u4e2a\u683c\u5b50\u5185\u90fd\u6ca1\u6709\u6570\uff0c\u800c\u5728$1$\u4e2a\u683c\u5b50\u5185\u6709\u6240\u6709\u7684\u6570\u3002\r\n\r\n### \u8f93\u5165\u683c\u5f0f\r\n\r\n**\u672c\u9898\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e**\u3002\r\n\r\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570$t(1<=t<=200)$\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\uff1b\r\n\r\n\u63a5\u4e0b\u6765\u7684$t$\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570$n(1<=n<=5\u00d710^5)$\u2014\u2014\u68cb\u76d8\u7684\u8fb9\u957f\u3002\u4fdd\u8bc1$n$\u4e3a\u5947\u6570\u3002\r\n\r\n\u540c\u65f6\u4fdd\u8bc1\u6240\u6709$t$\u4e2a$n$\u7684\u503c\u7684\u548c\u4e0d\u8d85\u8fc7$5\u00d710^5$\u3002\r\n\r\n### \u8f93\u51fa\u683c\u5f0f\r\n\r\n\u8f93\u51fa\u5171$t$\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u7b54\u6848\u3002"
}