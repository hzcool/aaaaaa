{
    "description": "Limak is a little polar bear. He loves connecting with other bears via social networks. He has $ n $ friends and his relation with the $ i $ -th of them is described by a unique integer $ t_{i} $ . The bigger this value is, the better the friendship is. No two friends have the same value $ t_{i} $ .\n\nSpring is starting and the Winter sleep is over for bears. Limak has just woken up and logged in. All his friends still sleep and thus none of them is online. Some (maybe all) of them will appear online in the next hours, one at a time.\n\nThe system displays friends who are online. On the screen there is space to display at most $ k $ friends. If there are more than $ k $ friends online then the system displays only $ k $ best of them \u2014 those with biggest $ t_{i} $ .\n\nYour task is to handle queries of two types:\n\n- \"1 id\" \u2014 Friend $ id $ becomes online. It's guaranteed that he wasn't online before.\n- \"2 id\" \u2014 Check whether friend $ id $ is displayed by the system. Print \"YES\" or \"NO\" in a separate line.\n\nAre you able to help Limak and answer all queries of the second type?",
    "inputFormat": "The first line contains three integers $ n $ , $ k $ and $ q $ ( $ 1<=n,q<=150000,1<=k<=min(6,n) $ ) \u2014 the number of friends, the maximum number of displayed online friends and the number of queries, respectively.\n\nThe second line contains $ n $ integers $ t_{1},t_{2},...,t_{n} $ ( $ 1<=t_{i}<=10^{9} $ ) where $ t_{i} $ describes how good is Limak's relation with the $ i $ -th friend.\n\nThe $ i $ -th of the following $ q $ lines contains two integers $ type_{i} $ and $ id_{i} $ ( $ 1<=type_{i}<=2,1<=id_{i}<=n $ ) \u2014 the $ i $ -th query. If $ type_{i}=1 $ then a friend $ id_{i} $ becomes online. If $ type_{i}=2 $ then you should check whether a friend $ id_{i} $ is displayed.\n\nIt's guaranteed that no two queries of the first type will have the same $ id_{i} $ becuase one friend can't become online twice. Also, it's guaranteed that at least one query will be of the second type ( $ type_{i}=2 $ ) so the output won't be empty.",
    "outputFormat": "For each query of the second type print one line with the answer \u2014 \"YES\" (without quotes) if the given friend is displayed and \"NO\" (without quotes) otherwise.",
    "samples": [
        [
            "4 2 8\n300 950 500 200\n1 3\n2 4\n2 3\n1 1\n1 2\n2 1\n2 2\n2 3\n",
            "NO\nYES\nNO\nYES\nYES\n"
        ],
        [
            "6 3 9\n50 20 51 17 99 24\n1 3\n1 4\n1 5\n1 2\n2 4\n2 2\n1 1\n2 4\n2 3\n",
            "NO\nYES\nNO\nYES\n"
        ]
    ],
    "hint": "In the first sample, Limak has $ 4 $ friends who all sleep initially. At first, the system displays nobody because nobody is online. There are the following $ 8 $ queries:\n\n1. \"1 3\" \u2014 Friend $ 3 $ becomes online.\n2. \"2 4\" \u2014 We should check if friend $ 4 $ is displayed. He isn't even online and thus we print \"NO\".\n3. \"2 3\" \u2014 We should check if friend $ 3 $ is displayed. Right now he is the only friend online and the system displays him. We should print \"YES\".\n4. \"1 1\" \u2014 Friend $ 1 $ becomes online. The system now displays both friend $ 1 $ and friend $ 3 $ .\n5. \"1 2\" \u2014 Friend $ 2 $ becomes online. There are $ 3 $ friends online now but we were given $ k=2 $ so only two friends can be displayed. Limak has worse relation with friend $ 1 $ than with other two online friends ( $ t_{1}&lt;t_{2},t_{3} $ ) so friend $ 1 $ won't be displayed\n6. \"2 1\" \u2014 Print \"NO\".\n7. \"2 2\" \u2014 Print \"YES\".\n8. \"2 3\" \u2014 Print \"YES\".",
    "translation": "# \u9898\u76ee\u8868\u8ff0\r\nLimak\u6709n\u4e2a\u670b\u53cb\uff0c\u4ed6\u4e0e\u7b2ci\u4e2a\u670b\u53cb\u7684\u53cb\u8c0a\u503c\u662fti\uff0c\u9898\u76ee\u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0\u4e24\u4e2a\u670b\u53cb\u7684\u53cb\u8c0a\u503c\u76f8\u540c\u3002\r\n\r\n\u6709\u4e00\u5929\uff0cLimak\u4e0a\u7f51\u548c\u670b\u53cb\u804a\u5929\uff0c\u6b64\u65f6\u53ea\u6709Limak\u5728\u7ebf\uff0c\u63a5\u4e0b\u6765\uff0c\u4f1a\u6709\u4e00\u4e9b\u670b\u53cb\u9646\u7eed\u4e0a\u7ebf\u3002\r\n\r\n\u7cfb\u7edf\u4f1a\u663e\u793a\u5728\u7ebf\u7684\u670b\u53cb\uff0c\u4f46\u5982\u679c\u8d85\u8fc7k\u4e2a\uff0c\u7cfb\u7edf\u53ea\u4f1a\u663e\u793ati\u6700\u5927\u7684k\u4e2a\u3002\r\n\r\n\u4f60\u7684\u4efb\u52a1\u662f\u5904\u7406\u4e24\u79cd\u67e5\u8baf:\r\n\r\n\u201c1 id\u201d\u8868\u793aid\u53f7\u7684\u670b\u53cb\u4e0a\u7ebf\uff0c\u4fdd\u8bc1\u4ed6\u4ee5\u524d\u6ca1\u6709\u5728\u7ebf\uff1b\r\n\r\n\u201c2 id\u201d\u68c0\u6d4b\u7cfb\u7edf\u4f1a\u4e0d\u4f1a\u663e\u793aid\u53f7\u7684\u670b\u53cb\uff0c\u5728\u5355\u72ec\u4e00\u884c\u4e2d\u8f93\u51fa\u201cYES\u201d\u6216\u201cNO\u201d\u3002\r\n\r\n# \u8f93\u5165\u683c\u5f0f\r\n\u7b2c1\u884c\uff0cn\u3001k\u3001q\r\n(1<=n,q<=150000,1<=k<=min(6,n)1<=n,q<=150000,1<=k<=min(6,n) )\uff0cn\u548ck\u5982\u9898\uff0cq\u8868\u793a\u8be2\u95ee\u7684\u6b21\u6570\u3002\r\n\r\n\u7b2c2\u884c\uff0cn\u4e2a\u6570\uff0c\u7b2ci\u4e2a\u6570\u8868\u793a id\u4e3ai\u7684\u4eba\u7684\u53cb\u8c0a\u503c\u3002\r\n\r\n\u63a5\u4e0b\u6765q\u884c\uff0c\u8868\u793aq\u6b21\u8be2\u95ee\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\u5206\u522b\u662ftype\uff0cid(1<=type<=2,1<=id<=n)\r\n\r\n# \u8f93\u51fa\u683c\u5f0f\r\n\u5bf9\u4e8e\u6bcf\u4e2atype=2\u7684\u8be2\u95ee\uff0c\u5982\u679c\u7cfb\u7edf\u4f1a\u663e\u793a\u8fd9\u4e2a\u4eba\uff0c\u5728\u5355\u72ec\u7684\u4e00\u884c\u4e2d\u8f93\u51fa\u201cYES\u201d\uff0c\u5426\u5219\u8f93\u51fa\u201cNO\u201d\u3002"
}