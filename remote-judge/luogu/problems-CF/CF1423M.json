{
    "description": "As you all know, the plum harvesting season is on! Little Milutin had his plums planted in an orchard that can be represented as an $ n $ by $ m $ matrix. While he was harvesting, he wrote the heights of all trees in a matrix of dimensions $ n $ by $ m $ .\n\nAt night, when he has spare time, he likes to perform various statistics on his trees. This time, he is curious to find out the height of his lowest tree. So far, he has discovered some interesting properties of his orchard. There is one particular property that he thinks is useful for finding the tree with the smallest heigh.\n\nFormally, let $ L(i) $ be the leftmost tree with the smallest height in the $ i $ -th row of his orchard. He knows that $ L(i) \\le L(i+1) $ for all $ 1 \\le i \\le n - 1 $ . Moreover, if he takes a submatrix induced by any subset of rows and any subset of columns, $ L(i) \\le L(i+1) $ will hold for all $ 1 \\le i \\le n'-1 $ , where $ n' $ is the number of rows in that submatrix.\n\nSince the season is at its peak and he is short on time, he asks you to help him find the plum tree with minimal height.",
    "inputFormat": "This problem is interactive.\n\nThe first line of input will contain two integers $ n $ and $ m $ , representing the number of rows and the number of columns in Milutin's orchard. It is guaranteed that $ 1 \\le n, m \\le 10^6 $ .\n\nThe following lines will contain the answers to your queries.",
    "outputFormat": "Once you know have found the minimum value $ r $ , you should print ! $ r $  to the standard output.\n\nInteraction\n\nYour code is allowed to query for an entry $ (i, j) $ of a matrix (i.e. get the height of the tree which is in the $ i $ -th row and $ j $ -th column). The query should be formatted as ? $ i $ $ j $ , so that $ 1 \\le i \\le n $ and $ 1 \\le j \\le m $ .\n\nYou may assume that the entries of the matrix will be integers between $ 1 $ and $ 10^9 $ .\n\nYour solution should use not more than $ \\mathbf{4 \\cdot (n + m)} $ queries.\n\nThis is an interactive problem. You have to use a flush operation right after printing each line. For example, in C++ you should use the function fflush(stdout), in Java \u2014 System.out.flush(), in Pascal \u2014 flush(output) and in Python \u2014 sys.stdout.flush().",
    "samples": [
        [
            "5 5\n13 15 10 9 15\n15 17 12 11 17\n10 12 7 6 12\n17 19 14 13 19\n16 18 13 12 18",
            ""
        ]
    ],
    "hint": "",
    "translation": "\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\n\n\u7ed9\u5b9a\u4e00\u4e2a $n\\times m$ \u77e9\u9635\uff0c\u5176\u6240\u6709\u5b50\u77e9\u9635\u6ee1\u8db3\uff1a\n- \u4ee4 $L(i)$ \u4e3a\u77e9\u9635\u7b2c $i$ \u884c\u7684\u6700\u5de6\u8fb9\u7684\u53d6\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\uff0c\u5219 $L(i)<=L(i+1)$\n\n\u4f60\u9700\u8981\u5728 $4(n+m)$ \u6b21\u8be2\u95ee\u5185\u5f97\u51fa\u77e9\u9635\u7684\u6700\u5c0f\u5143\u7d20\u7684\u503c\u3002\n\n\u8be2\u95ee\u683c\u5f0f\u4e3a```? i j``` \uff0c\u8f93\u51fa\u7b54\u6848\u683c\u5f0f\u4e3a```! r```"
}