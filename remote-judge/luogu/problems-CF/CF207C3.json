{
    "description": "The Smart Beaver from ABBYY has come up with a new developing game for children. The Beaver thinks that this game will help children to understand programming better.\n\nThe main object of the game is finite rooted trees, each of their edges contains some lowercase English letter. Vertices on any tree are always numbered sequentially from $ 1 $ to $ m $ , where $ m $ is the number of vertices in the tree. Before describing the actual game, let's introduce some definitions.\n\nWe'll assume that the sequence of vertices with numbers $ v_{1} $ , $ v_{2} $ , $ ... $ , $ v_{k} $ ( $ k>=1 $ ) is a forward path, if for any integer $ i $ from $ 1 $ to $ k-1 $ vertex $ v_{i} $ is a direct ancestor of vertex $ v_{i+1} $ . If we sequentially write out all letters from the the edges of the given path from $ v_{1} $ to $ v_{k} $ , we get some string ( $ k=1 $ gives us an empty string). We'll say that such string corresponds to forward path $ v_{1} $ , $ v_{2} $ , $ ... $ , $ v_{k} $ .\n\nWe'll assume that the sequence of tree vertices with numbers $ v_{1} $ , $ v_{2} $ , $ ... $ , $ v_{k} $ ( $ k>=1 $ ) is a backward path if for any integer $ i $ from $ 1 $ to $ k-1 $ vertex $ v_{i} $ is the direct descendant of vertex $ v_{i+1} $ . If we sequentially write out all the letters from the edges of the given path from $ v_{1} $ to $ v_{k} $ , we get some string ( $ k=1 $ gives us an empty string). We'll say that such string corresponds to backward path $ v_{1} $ , $ v_{2} $ , $ ... $ , $ v_{k} $ .\n\nNow let's describe the game that the Smart Beaver from ABBYY has come up with. The game uses two rooted trees, each of which initially consists of one vertex with number $ 1 $ . The player is given some sequence of operations. Each operation is characterized by three values ( $ t $ , $ v $ , $ c $ ) where:\n\n- $ t $ is the number of the tree on which the operation is executed ( $ 1 $ or $ 2 $ );\n- $ v $ is the vertex index in this tree (it is guaranteed that the tree contains a vertex with this index);\n- $ c $ is a lowercase English letter.\n\nThe actual operation is as follows: vertex $ v $ of tree $ t $ gets a new descendant with number $ m+1 $ (where $ m $ is the current number of vertices in tree $ t $ ), and there should be letter $ c $ put on the new edge from vertex $ v $ to vertex $ m+1 $ .\n\nWe'll say that an ordered group of three integers ( $ i $ , $ j $ , $ q $ ) is a good combination if:\n\n- $ 1<=i<=m_{1} $ , where $ m_{1} $ is the number of vertices in the first tree;\n- $ 1<=j,q<=m_{2} $ , where $ m_{2} $ is the number of vertices in the second tree;\n- there exists a forward path $ v_{1} $ , $ v_{2} $ , $ ... $ , $ v_{k} $ such that $ v_{1}=j $ and $ v_{k}=q $ in the second tree;\n- the string that corresponds to the forward path in the second tree from vertex $ j $ to vertex $ q $ equals the string that corresponds to the backward path in the first tree from vertex $ i $ to vertex $ 1 $ (note that both paths are determined uniquely).\n\nYour task is to calculate the number of existing good combinations after each operation on the trees.",
    "inputFormat": "The first line contains integer $ n $ \u2014 the number of operations on the trees. Next $ n $ lines specify the operations in the order of their execution. Each line has form \" $ t $ $ v $ $ c $ \", where $ t $ is the number of the tree, $ v $ is the vertex index in this tree, and $ c $ is a lowercase English letter.\n\nTo get the full points for the first group of tests it is sufficient to solve the problem with $ 1<=n<=700 $ .\n\nTo get the full points for the second group of tests it is sufficient to solve the problem with $ 1<=n<=7000 $ .\n\nTo get the full points for the third group of tests it is sufficient to solve the problem with $ 1<=n<=100000 $ .",
    "outputFormat": "Print exactly $ n $ lines, each containing one integer \u2014 the number of existing good combinations after the corresponding operation from the input.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.",
    "samples": [
        [
            "5\n1 1 a\n2 1 a\n1 2 b\n2 1 b\n2 3 a\n",
            "1\n3\n3\n4\n7\n"
        ]
    ],
    "hint": "After the first operation the only good combination was $ (1,1,1) $ . After the second operation new good combinations appeared, $ (2,1,2) $ and $ (1,2,2) $ . The third operation didn't bring any good combinations. The fourth operation added good combination $ (1,3,3) $ . Finally, the fifth operation resulted in as much as three new good combinations \u2014 $ (1,4,4) $ , $ (2,3,4) $ and $ (3,1,4) $ .",
    "translation": "\u5b9a\u4e49\u6709\u6839\u6811 $T$ \u4e0a\u70b9 $u$ \u7684\u6df1\u5ea6\u4e3a\u4ece\u6839\u5230 $v$ \u6240\u7ecf\u8fc7\u7684\u8fb9\u6570\u3002\n\n\u5b9a\u4e49**\u8fb9\u5e26\u5b57\u7b26\u7684\u6709\u6839\u6811** $T$ \u4e0a\u7684\u4e00\u6761\u5411\u6839\u4e32 $S_T(i,l)$ \u4e3a\u4ece\u70b9 $i$ \u5f00\u59cb\uff0c\u5411\u6839\u7684 $l$ \u6761\u8fb9\u4e0a\u7684\u5b57\u7b26\u6309\u987a\u5e8f\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002$l$ **\u53ef\u4ee5\u4e3a\u96f6**\uff0c\u6b64\u65f6\u5373\u4e3a\u7a7a\u4e32\u3002\u4f46 $l$ \u4e0d\u80fd\u8d85\u8fc7\u70b9 $u$ \u7684\u6df1\u5ea6\u3002\n\n\u6709\u4e24\u4e2a**\u8fb9\u5e26\u5b57\u7b26\u7684\u6709\u6839\u6811** $t_1,t_2$\uff0c\u5b9a\u4e49\u5176\u70b9\u6570\u4e3a $n_1,n_2$\uff0c\u521d\u59cb\u65f6**\u53ea\u6709\u6839**\uff0c\u7f16\u53f7\u4e3a $1$\u3002\n\n\u5171 $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7ed9\u51fa\u6240\u64cd\u4f5c\u6811\u7684\u7f16\u53f7 $p$\uff08$p\\in\\{1,2\\}$\uff09\u3001\u6240\u64cd\u4f5c\u70b9\u7684\u7f16\u53f7 $u$\uff08$1\\le u\\le n$\uff09\u548c\u5b57\u7b26 $c$\uff0c\u8868\u793a\u5728 $t_p$ \u4e2d\u7f16\u53f7\u4e3a $u$ \u7684\u70b9\u4e0b\u9762\u52a0\u4e00\u4e2a\u5b69\u5b50\uff0c\u7f16\u53f7\u4e3a\u64cd\u4f5c\u524d\u7684 $n_p+1$\uff0c\u800c $u$ \u5230\u8be5\u5b69\u5b50\u7684\u8fb9\u4e0a\u7684\u5b57\u7b26\u4e3a $c$\u3002\u6b64\u540e $n_p$ \u5c06\u81ea\u589e $1$\u3002\n\n\u6bcf\u6b21\u64cd\u4f5c\u5b8c\u540e\uff0c\u8bf7\u6c42\u51fa $(i,j)$\uff08$1\\le i\\le n_1,\\le j\\le n_2$\uff09\u7684\u5bf9\u6570\uff0c\u5b9a\u4e49 $l$ \u4e3a $t_1$ \u4e2d $i$ \u7684\u6df1\u5ea6\uff0c\u4f7f\u5f97 $S_{t_1}(i,l)$ \u4e0e**\u7ffb\u8f6c\u540e\u7684** $S_{t_2}(j,l)$ \u76f8\u540c\u3002\n\n\u5b57\u7b26\u96c6\u4e3a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002\n\n\u6ce8\u610f\uff1a\u5bf9\u4e8e C1\uff0cC2\uff0cC3 \u4e09\u4e2a\u5b50\u4efb\u52a1\uff0c$q$ \u8303\u56f4\u4e0d\u540c\u3002\n\n\u5bf9 C1\uff0c$1\\le q\\le700$\uff1b\u5bf9 C2\uff0c$1\\le q\\le7000$\uff1b\u5bf9 C3\uff0c$1\\le q\\le100000$\u3002"
}