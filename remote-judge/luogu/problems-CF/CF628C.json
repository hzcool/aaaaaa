{
    "description": "Limak is a little polar bear. He likes nice strings \u2014 strings of length $ n $ , consisting of lowercase English letters only.\n\nThe distance between two letters is defined as the difference between their positions in the alphabet. For example, ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF628C/8da66884325cabbb3822b7a59fabab06b8c9aecb.png), and ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF628C/020a67d9684ce0de62952b277c91f6ba625d786b.png).\n\nAlso, the distance between two nice strings is defined as the sum of distances of corresponding letters. For example, ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF628C/88d3180afa5197edf3d9181b6092568129b849de.png), and ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF628C/fb925baf4ad15f3149211e4c7e1c24edfeeed3f5.png).\n\nLimak gives you a nice string $ s $ and an integer $ k $ . He challenges you to find any nice string $ s' $ that ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF628C/6ced56c16665504eebcfadbb27cc9012566c4756.png). Find any $ s' $ satisfying the given conditions, or print \"-1\" if it's impossible to do so.\n\nAs input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to use gets/scanf/printf instead of getline/cin/cout in C++, prefer to use BufferedReader/PrintWriter instead of Scanner/System.out in Java.",
    "inputFormat": "The first line contains two integers $ n $ and $ k $ ( $ 1<=n<=10^{5} $ , $ 0<=k<=10^{6} $ ).\n\nThe second line contains a string $ s $ of length $ n $ , consisting of lowercase English letters.",
    "outputFormat": "If there is no string satisfying the given conditions then print \"-1\" (without the quotes).\n\nOtherwise, print any nice string $ s' $ that ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF628C/6ced56c16665504eebcfadbb27cc9012566c4756.png).",
    "samples": [
        [
            "4 26\nbear\n",
            "roar"
        ],
        [
            "2 7\naf\n",
            "db\n"
        ],
        [
            "3 1000\nhey\n",
            "-1\n"
        ]
    ],
    "hint": "",
    "translation": "**\u9898\u76ee\u63cf\u8ff0\uff1a**\r\n------------\r\nLimak\u662f\u4e00\u53ea\u5c0f\u5317\u6781\u718a\u3002\u4ed6\u559c\u6b22\u5355\u8bcd\u2014\u2014\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\uff0c\u957f\u5ea6\u4e3an\u7684\u5355\u8bcd\u3002\r\n\r\n\u4ed6\u89c4\u5b9adist(s,s')\u7684\u503c\u4e3as\u4e0es'\u572826\u4e2a\u5b57\u6bcd\u4e2d\u7684\u95f4\u8ddd\u3002\u5982\uff0cdist(c,e)=dist(e,c)=2,dist(a,z)=dist(z,a)=25\u3002\r\n\r\n\u800c\u4e14\uff0c\u5f53dist\u4e24\u4e2a\u5355\u8bcd\u65f6\uff0c\u5176\u503c\u4e3adist\u7b2c\u4e00\u4e2a\u5b57\u6bcd+dist\u7b2c\u4e8c\u4e2a\u5b57\u6bcd+\u2026\u2026\r\n\u5982\uff0cdist(af,db)=dist(a,d)+dist(f,b)=3+4=7,dist(bear,roar)=16+10+0+0=26\u3002                   \r\n\r\n\u73b0\u5728\uff0cLimak\u7ed9\u4f60\u4e00\u4e2a\u5b57\u6bcd\u6216\u5355\u8bcds\u548c\u503ck\uff0c\u4ee4\u4f60\u5bfb\u627e\u4e00\u4e2as'\u4f7fdist(s,s')=k\u3002\u8f93\u51fas'\u3002\u5982\u679c\u6ca1\u6709\u5408\u9002\u7684s'\uff0c\u8f93\u51fa-1\u3002\r\n\r\n\u6ce8\u610f\uff1a\u6700\u597d\u7528\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u6d41\uff0c\u5982C++\u7684cin\u548ccout\uff0cJava\u7684Scanner/System.out \u3002\r\n\r\n**\u8f93\u5165\u683c\u5f0f**\r\n------------\r\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6570\uff1an\u548ck\u3002 ( 1<=n<=10^5 \r\n  , 0<=k<=10^6 \r\n  )\u3002\r\n\r\n\u7b2c\u4e8c\u884c\u8f93\u5165\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\uff0c\u957f\u5ea6\u4e3an\u7684\u5355\u8bcds\u3002\r\n  \r\n**\u8f93\u51fa\u683c\u5f0f**\r\n------------\r\n\u5982\u679c\u6ca1\u6709\u5408\u9002\u7684s'\uff0c\u8f93\u51fa-1\u3002\r\n\r\n\u5426\u5219\uff0c\u8f93\u51fas',\u4ee4dist(s,s')=k\u3002\r\n\r\n**\u8f93\u5165\u8f93\u51fa\u6837\u4f8b**\r\n------------\r\n\r\n**\u8f93\u5165#1**       \r\n4 26\r\n\r\nbear\r\n\r\n**\u8f93\u51fa#1**\r\n\r\nroar                    \r\n**\u8f93\u5165#2**\r\n\r\n2 7\r\n\r\naf\r\n\r\n**\u8f93\u51fa#2**\r\n\r\ndb\r\n\r\n**\u8f93\u5165#3** \r\n\r\n3 1000\r\n\r\nhey\r\n\r\n**\u8f93\u51fa#3**\r\n\r\n-1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
}