{
    "description": "How many specific orders do you know? Ascending order, descending order, order of ascending length, order of ascending polar angle... Let's have a look at another specific order:  $ d $ -sorting. This sorting is applied to the strings of length at least $ d $ , where $ d $ is some positive integer. The characters of the string are sorted in following manner: first come all the 0-th characters of the initial string, then the 1-st ones, then the 2-nd ones and so on, in the end go all the $ (d-1) $ -th characters of the initial string. By the $ i $ -th characters we mean all the character whose positions are exactly $ i $ modulo $ d $ . If two characters stand on the positions with the same remainder of integer division by $ d $ , their relative order after the sorting shouldn't be changed. The string is zero-indexed. For example, for string 'qwerty':\n\nIts 1-sorting is the string 'qwerty' (all characters stand on 0 positions),\n\nIts 2-sorting is the string 'qetwry' (characters 'q', 'e' and 't' stand on 0 positions and characters 'w', 'r' and 'y' are on 1 positions),\n\nIts 3-sorting is the string 'qrwtey' (characters 'q' and 'r' stand on 0 positions, characters 'w' and 't' stand on 1 positions and characters 'e' and 'y' stand on 2 positions),\n\nIts 4-sorting is the string 'qtwyer',\n\nIts 5-sorting is the string 'qywert'.\n\nYou are given string $ S $ of length $ n $ and $ m $ shuffling operations of this string. Each shuffling operation accepts two integer arguments $ k $ and $ d $ and transforms string $ S $ as follows. For each $ i $ from $ 0 $ to $ n-k $ in the increasing order we apply the operation of $ d $ -sorting to the substring $ S\\[i..i+k-1\\] $ . Here $ S\\[a..b\\] $ represents a substring that consists of characters on positions from $ a $ to $ b $ inclusive.\n\nAfter each shuffling operation you need to print string $ S $ .",
    "inputFormat": "The first line of the input contains a non-empty string $ S $ of length $ n $ , consisting of lowercase and uppercase English letters and digits from 0 to 9.\n\nThe second line of the input contains integer $ m $ \u2013 the number of shuffling operations ( $ 1<=m\u00b7n<=10^{6} $ ).\n\nFollowing $ m $ lines contain the descriptions of the operations consisting of two integers $ k $ and $ d $ ( $ 1<=d<=k<=n $ ).",
    "outputFormat": "After each operation print the current state of string $ S $ .",
    "samples": [
        [
            "qwerty\n3\n4 2\n6 3\n5 2\n",
            "qertwy\nqtewry\nqetyrw\n"
        ]
    ],
    "hint": "Here is detailed explanation of the sample. The first modification is executed with arguments $ k=4 $ , $ d=2 $ . That means that you need to apply 2-sorting for each substring of length 4 one by one moving from the left to the right. The string will transform in the following manner:\n\nqwerty $ \u2192 $ qewrty $ \u2192 $ qerwty $ \u2192 $ qertwy\n\nThus, string $ S $ equals 'qertwy' at the end of first query.\n\nThe second modification is executed with arguments $ k=6 $ , $ d=3 $ . As a result of this operation the whole string $ S $ is replaced by its 3-sorting:\n\nqertwy $ \u2192 $ qtewry\n\nThe third modification is executed with arguments $ k=5 $ , $ d=2 $ .\n\nqtewry $ \u2192 $ qertwy $ \u2192 $ qetyrw",
    "translation": "\u5bf9\u4e00\u4e2a\u957f\u5ea6\u81f3\u5c11\u4e3a $d$ \u7684\u5b57\u7b26\u4e32\uff08\u4e0b\u6807\u4ece0\u5f00\u59cb\uff09\uff0c\u5b9a\u4e49 $d-sorting$ \u7684\u6392\u5e8f\u65b9\u5f0f\u4e3a\uff0c\u5faa\u73af $i$ \u4ece $0$ \u5230 $(d-1)$\uff0c\u5c06\u5b57\u7b26\u4e32\u4e2d\u4e0b\u6807 $MOD\\ d$ \u4e3a $i$ \u7684\u5b57\u7b26\u6309\u539f\u987a\u5e8f\u53d6\u51fa\u6765\u4f9d\u6b21\u52a0\u5230\u672b\u5c3e\u3002\\\n\u4f8b\uff1a$abcde$ \u7684 $2-sorting$ \u7ed3\u679c\u4e3a $acebd$\u3002\\\n\u7ed9\u5b9a\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32\uff0c$m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06\u6240\u6709\u957f\u5ea6\u4e3a $k$ \u7684\u5b50\u4e32\u6309\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u8fdb\u884c\u4e00\u6b21 $d-sorting$\uff0c\u6bcf\u6b21\u64cd\u4f5c\u540e\u8f93\u51fa\u5f53\u524d\u4e32\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5728\u4e0a\u4e00\u6b21\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u3002"
}