{
    "description": "Petya wrote a programme on C++ that calculated a very interesting function $ f(n) $ . Petya ran the program with a certain value of $ n $ and went to the kitchen to have some tea. The history has no records concerning how long the program had been working. By the time Petya returned, it had completed the calculations and had the result. However while Petya was drinking tea, a sly virus managed to destroy the input file so that Petya can't figure out for which value of $ n $ the program was run. Help Petya, carry out the inverse function!\n\nMostly, the program consists of a function in C++ with the following simplified syntax:\n\n- $ function $ ::= int f(int n) { $ operatorSequence $ }\n- $ operatorSequence $ ::= $ operator\u00a0|\u00a0operator\u00a0operatorSequence $\n- $ operator $ ::= return $ arithmExpr $ ; $ | $ if ( $ logicalExpr $ ) return $ arithmExpr $ ;\n- $ logicalExpr $ ::= $ arithmExpr&gt;arithmExpr $ $ | $ $ arithmExpr&lt;arithmExpr $ $ | $ $ arithmExpr $ == $ arithmExpr $\n- $ arithmExpr $ ::= $ sum $\n- $ sum $ ::= $ product $ $ | $ $ sum+product $ $ | $ $ sum-product $\n- $ product $ ::= $ multiplier $ $ | $ $ product*multiplier $ $ | $ $ product/multiplier $\n- $ multiplier $ ::= n $ | $ $ number $ $ | $ f( $ arithmExpr $ )\n- $ number $ ::= $ 0|1|2|...\\ |32767 $\n\nThe whitespaces in a $ operatorSequence $ are optional.\n\nThus, we have a function, in which body there are two kinds of operators. There is the operator \"return $ arithmExpr $ ;\" that returns the value of the expression as the value of the function, and there is the conditional operator \"if ( $ logicalExpr $ ) return $ arithmExpr $ ;\" that returns the value of the arithmetical expression when and only when the logical expression is true. Guaranteed that no other constructions of C++ language \u2014 cycles, assignment operators, nested conditional operators etc, and other variables except the $ n $ parameter are used in the function. All the constants are integers in the interval $ [0..32767] $ .\n\nThe operators are performed sequentially. After the function has returned a value other operators in the sequence are not performed. Arithmetical expressions are performed taking into consideration the standard priority of the operations. It means that first all the products that are part of the sum are calculated. During the calculation of the products the operations of multiplying and division are performed from the left to the right. Then the summands are summed, and the addition and the subtraction are also performed from the left to the right. Operations \">\" (more), \"<\" (less) and \"==\" (equals) also have standard meanings.\n\nNow you've got to pay close attention! The program is compiled with the help of $ 15 $ -bit Berland C++ compiler invented by a Berland company BerSoft, that's why arithmetical operations are performed in a non-standard way. Addition, subtraction and multiplication are performed modulo $ 32768 $ (if the result of subtraction is negative, then $ 32768 $ is added to it until the number belongs to the interval $ [0..32767] $ ). Division \"/\" is a usual integer division where the remainder is omitted.\n\nExamples of arithmetical operations:\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF39G/d1e133cb65a246edc2194d6f89af3e44b634234b.png)Guaranteed that for all values of $ n $ from $ 0 $ to $ 32767 $ the given function is performed correctly. That means that:\n\n1\\. Division by $ 0 $ never occures.\n\n2\\. When performing a function for the value $ n=N $ recursive calls of the function $ f $ may occur only for the parameter value of $ 0,1,...,N-1 $ . Consequently, the program never has an infinite recursion.\n\n3\\. As the result of the sequence of the operators, the function always returns a value.\n\nWe have to mention that due to all the limitations the value returned by the function $ f $ is independent from either global variables or the order of performing the calculations of arithmetical expressions as part of the logical one, or from anything else except the value of $ n $ parameter. That's why the $ f $ function can be regarded as a function in its mathematical sense, i.e. as a unique correspondence between any value of $ n $ from the interval $ [0..32767] $ and a value of $ f(n) $ from the same interval.\n\nGiven the value of $ f(n) $ , and you should find $ n $ . If the suitable $ n $ value is not unique, you should find the maximal one (from the interval $ [0..32767] $ ).",
    "inputFormat": "The first line has an integer $ f(n) $ from the interval $ [0..32767] $ . The next lines have the description of the function $ f $ . In the description can be found extra spaces and line breaks (see the examples) which, of course, can\u2019t break key words int, if, return and numbers. The size of input data can\u2019t exceed $ 100 $ bytes.",
    "outputFormat": "Output a single number \u2014 the answer to the problem. If there\u2019s no answer, output \"-1\" (without quotes).",
    "samples": [
        [
            "17\nint f(int n)\n{\nif (n &lt; 100) return 17;\nif (n &gt; 99) return 27;\n}\n",
            "99\n"
        ],
        [
            "13\nint f(int n)\n{\nif (n == 0) return 0;\nreturn f(n - 1) + 1;\n}\n",
            "13"
        ],
        [
            "144\nint f(int n)\n{\nif (n == 0) return 0;\nif (n == 1) return n;\nreturn f(n - 1) + f(n - 2);\n}",
            "24588\n"
        ]
    ],
    "hint": "",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\nPetya\u5199\u4e86\u4e00\u4e2aC++\u7a0b\u5e8f\u4ee5\u8ba1\u7b97\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u51fd\u6570 $f(n)$\u3002\u5979\u7ed9\u4e86\u4e00\u4e2a\u8f93\u5165\u503c\u7ed9\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u5c31\u8dd1\u53bb\u53a8\u623f\u559d\u8336\u4e86\u3002\u5f53Petya\u56de\u6765\u65f6\uff0c\u7a0b\u5e8f\u5df2\u7ecf\u8ba1\u7b97\u51fa\u4e86\u7ed3\u679c\u3002\n\n\u7136\u800c\u5979\u53bb\u559d\u8336\u65f6\uff0c\u4e00\u4e2a\u72e1\u733e\u7684\u75c5\u6bd2\u628a\u8f93\u5165\u6587\u4ef6\u6467\u6bc1\u4e86\uff01Petya\u73b0\u5728\u6ca1\u6cd5\u77e5\u9053\u5979\u7ed9\u4e86 $f(n)$ \u4ec0\u4e48\u503c\u3002\u6240\u4ee5\uff0c\u8fd9\u4e2a\u4efb\u52a1\u5c31\u4ea4\u7ed9\u4f60\u4e86\uff01\n\nPetya\u7ed9\u4f60\u7684\u7a0b\u5e8f\u7531\u4ee5\u4e0b\u7b80\u5316\u4e86\u7684C++\u8bed\u6cd5\u6784\u6210\uff1a\n\n* \u51fd\u6570\u58f0\u660e\uff08$\\text{function}$\uff09\uff1a```int f(int n){operatorSequence}```\uff1b\n\n* \u8bed\u53e5\u5e8f\u5217\uff08$\\text{operatorSequence}$\uff09\uff1a```operator```|```operator operatorSequence```\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c$\\text{operatorSequence}$\u53ef\u80fd\u662f\u4e00\u4e2a\u64cd\u4f5c\u7b26\uff0c\u4e5f\u53ef\u80fd\u5728\u4e00\u4e2a\u64cd\u4f5c\u7b26\u540e\u9762\u8fd8\u6709\u5176\u4ed6\u7684\u8bed\u53e5\uff09\uff1b\n\n* \u64cd\u4f5c\u7b26\uff08$\\text{operator}$\uff09\uff1a```return arithmExpr```|```if(logicalExpr)return arithmExpr```\uff1b\n\n* \u903b\u8f91\u8868\u8fbe\u5f0f\uff08$\\text{logicalExpr}$\uff09\uff1a```arithmExpr``` ```<```|```>```|```==``` ```arithmExpr```\uff08\u5373\u5bf9\u4e24\u4e2a\u6570\u5b66\u8868\u8fbe\u5f0f\u6bd4\u8f83\u503c\u7684\u5927\u5c0f\uff09\uff1b\n\n* \u6570\u5b66\u8868\u8fbe\u5f0f\uff08$\\text{arithmExpr}$\uff09\uff1a```sum```\uff1b\n\n* \u6c42\u503c\u7ed3\u679c\uff08$\\text{sum}$\uff09\uff1a```product```|```sum+product```|```sum-product```\uff1b\n\n* \u4e58\u79ef\uff08$\\text{product}$\uff09\uff1a```multiplier```|```product*multiplier```|```product/multiplier```\uff1b\n\n* \u56e0\u6570\uff08$\\text{multiplier}$\uff09\uff1a\n```n```|```number```|```f(arithmExpr)```\uff08\u5bf9\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u3002\u90a3\u4e2a```n```\u5c31\u662f\u4f60\u7ed9\u8fd9\u5c42\u8c03\u7528\u4f20\u7684\u53c2\uff09\n\n* \u6570\u5b57\uff08$\\text{number}$\uff09: $n,n\\in[0,2^{15})\\cup\\N$\u3002\uff08\u5373 $0$ \u81f3 $32767$ \u95f4\u7684\u4efb\u4f55\u6574\u6570\u3002\uff09\n\n$\\text{operatorSequence}$ \u4e2d\u7684\u7a7a\u767d\u662f\u53ef\u81ea\u5b9a\u4e49\u7684\uff0c\u53ea\u8981\u80fd\u5206\u5f00\u4e24\u4e2a\u4e0d\u540c\u7684\u4e1c\u897f\u5373\u53ef\u3002\uff08\u548c\u539f\u6765\u7684C++\u4e00\u6837\u3002\uff09\n\n\u5173\u4e8e\u8fd9\u4e9b $\\text{operator}$\uff08\u5176\u5b9e\u5c31\u53ea\u6709```return```\u548c```if```\uff09\u7684\u7528\u9014\uff0c\u548c\u539f\u6765\u7684C++\u4e00\u6837\uff0c\u6211\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002\u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0C++\u91cc\u5176\u4ed6\u7684\u4e1c\u897f\u2014\u2014\u5faa\u73af\u3001\u8d4b\u503c\u8bed\u53e5\u3001\u5d4c\u5957\u8868\u8fbe\u5f0f\uff0c\u7b49\u7b49\u3002\u51fd\u6570\u58f0\u660e\u4e2d\uff0c\u9664\u4e86\u53c2\u6570\u53d8\u91cf```n```\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u5176\u4ed6\u7684\u53d8\u91cf\u3002\u6240\u6709\u6574\u6570\u5e38\u91cf\u90fd\u5728 $[0,2^{15})$ \u95f4\u3002\n\n\u8bed\u53e5\u662f\u6709\u987a\u5e8f\u5730\u6267\u884c\u7684\u3002```return```\u8bed\u53e5\u88ab\u6267\u884c\u540e\uff0c\u540e\u9762\u7684\u8bed\u53e5\u4e0d\u518d\u6267\u884c\u3002\u6240\u6709\u4e1c\u897f\u7684\u4f18\u5148\u7ea7\u548c\u6807\u51c6C++\u4e00\u6837\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5148\u4e58\u9664\u540e\u52a0\u51cf\uff0c\u7b49\u7b49\u3002\u5173\u7cfb\u8fd0\u7b97\u7b26\u542b\u4e49\u4e0e\u6807\u51c6C++\u6ca1\u6709\u4ec0\u4e48\u4e24\u6837\u3002\n\n**\u73b0\u5728\u8bf7\u6ce8\u610f\uff01\u8fd9\u4e2a\u7a0b\u5e8f\u4f7f\u7528** $\\textbf{15-bit}$ **Berland C++\u7f16\u8bd1\u5668\u7f16\u8bd1\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6240\u6709\u4e2d\u95f4\u503c\u8bf7\u6a21** $\\textbf{32768}$\u3002\uff08\u5bf9\u4e8e\u8d1f\u6570\uff0c\u60f3\u4e00\u60f3\u4f60\u505aP1082\u65f6\u662f\u600e\u4e48\u5904\u7406\u7684\u3002\uff09**\u9664\u6cd5\u65e0\u8bba\u4f55\u65f6\uff0c\u90fd\u662f\u6574\u6570\u9664\u6cd5\uff0c\u5373\u4f59\u6570\u4f1a\u88ab\u5ffd\u7565\u3002**\n\n\u4e00\u4e9b\u4f8b\u5b50\uff1a\n\n$12345+23456=3033,0-1=32767,1024\\times1024=0,1000/3=333$\u3002\n\n\u5f53\u7136\uff0c\u65e0\u8bba\u8fd9\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u662f\u591a\u5c11\uff0c\u8fd9\u4e2a\u51fd\u6570\u603b\u80fd\u6210\u529f\u6267\u884c\u3002\u4e5f\u5c31\u662f\u8bf4\uff1a\n\n* \u6c38\u8fdc\u4e0d\u53ef\u80fd\u9664\u4ee5 $0$\u3002\n\n* \u5f53\u8fd9\u4e2a\u51fd\u6570\u88ab\u9012\u5f52\u8c03\u7528\u65f6\uff0c\u4e0b\u4e00\u5c42\u7684\u53c2\u6570\u603b\u5c0f\u4e8e\u8fd9\u4e00\u5c42\u7684\u53c2\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\u4e0d\u53ef\u80fd\u65e0\u9650\u9012\u5f52\u3002\n\n* \u51fd\u6570\u603b\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\n\n\u8fd8\u6709\uff0c\u503c\u5f97\u4e00\u63d0\uff0c$f(n)$ \u7684\u8fd4\u56de\u503c\u53ea\u4f9d\u8d56\u4e8e\u53c2\u6570\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 $f(n)$ \u53ef\u4ee5\u88ab\u89c6\u4e3a\u6570\u5b66\u610f\u4e49\u4e0a\u7684\u51fd\u6570\u2014\u2014\n\n>\u4e00\u822c\u5730\uff0c\u5728\u4e00\u4e2a\u53d8\u5316\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u53d8\u91cf $x$ \u548c $y$\uff0c\u5e76\u4e14\u5bf9\u4e8e $x$ \u7684\u6bcf\u4e00\u4e2a\u503c\uff0c$y$ \u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u786e\u5b9a\u7684\u503c\u4e0e\u5176\u5bf9\u5e94\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8bf4 $x$ \u662f\u81ea\u53d8\u91cf\uff08independent variable\uff09\uff0c$y$ \u662f $x$ \u7684\u51fd\u6570\uff08function\uff09\u3002\u2014\u2014\u516b\u5e74\u7ea7\u4e0b\u518c\u6570\u5b66\u4e66\n\n~~\u6ca1\u9519\u771f\u6b63\u7684\u9898\u76ee\u53ea\u6709\u4e00\u884c\uff0c\u524d\u9762\u90fd\u662f\u94fa\u57ab\uff1a~~\n\n\u7ed9\u5b9a $f(n)$\uff0c\u8bf7\u6c42\u51fa $n$\u3002\u5982\u679c\u6709\u591a\u79cd\u53ef\u80fd\uff0c\u8bf7\u9009\u62e9\u6700\u5927\u7684\u4e00\u79cd\u4f5c\u4e3a\u7b54\u6848\u3002\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 $f(n)$\u3002\n\n\u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\uff0c\u662f\u5bf9 $f$ \u51fd\u6570\u7684\u5b9a\u4e49\u3002\n\n\u8f93\u5165\u6587\u4ef6\u5927\u5c0f\u4e0d\u8d85\u8fc7 $100~\\text{Bytes}$\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u4f60\u6c42\u51fa\u7684 $n$\u3002\u5982\u679c\u65e0\u89e3\uff0c\u8f93\u51fa $-1$\u3002"
}