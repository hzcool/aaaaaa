{
    "description": "Petya loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya has a number consisting of $ n $ digits without leading zeroes. He represented it as an array of digits without leading zeroes. Let's call it $ d $ . The numeration starts with $ 1 $ , starting from the most significant digit. Petya wants to perform the following operation $ k $ times: find the minimum $ x $ $ (1<=x&lt;n) $ such that $ d_{x}=4 $ and $ d_{x+1}=7 $ , if $ x $ is odd, then to assign $ d_{x}=d_{x+1}=4 $ , otherwise to assign $ d_{x}=d_{x+1}=7 $ . Note that if no $ x $ was found, then the operation counts as completed and the array doesn't change at all.\n\nYou are given the initial number as an array of digits and the number $ k $ . Help Petya find the result of completing $ k $ operations.",
    "inputFormat": "The first line contains two integers $ n $ and $ k $ $ (1<=n<=10^{5},0<=k<=10^{9}) $ \u2014 the number of digits in the number and the number of completed operations. The second line contains $ n $ digits without spaces representing the array of digits $ d $ , starting with $ d_{1} $ . It is guaranteed that the first digit of the number does not equal zero.",
    "outputFormat": "In the single line print the result without spaces \u2014 the number after the $ k $ operations are fulfilled.",
    "samples": [
        [
            "7 4\n4727447\n",
            "4427477\n"
        ],
        [
            "4 2\n4478\n",
            "4478\n"
        ]
    ],
    "hint": "In the first sample the number changes in the following sequence: $ 4727447\u21924427447\u21924427477\u21924427447\u21924427477 $ .\n\nIn the second sample: $ 4478\u21924778\u21924478 $ .",
    "translation": "# \u9898\u76ee\u63cf\u8ff0\n\nPetya\u559c\u6b22\u5e78\u8fd0\u6570\u5b57\u3002\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u5e78\u8fd0\u6570\u5b57\u662f\u5341\u8fdb\u5236\u4e0b\u5404\u4f4d\u53ea\u5305\u542b$4$\u548c$7$\u7684\u6b63\u6574\u6570\u3002\u4f8b\u5982\u6570\u5b57$47$\u3001$744$\u548c$4$\u90fd\u662f\u5e78\u8fd0\u6570\u5b57\uff0c\u4f46$5$\u3001$17$\u548c$467$\u4e0d\u662f\u3002\n\nPetya\u6709\u4e00\u4e2a\u7531$n$\u4f4d\u6570\u5b57\u7ec4\u6210\u7684\u6ca1\u6709\u524d\u5bfc\u96f6\u7684\u6570\u3002\u4ed6\u7528\u4e00\u4e2a\u6ca1\u6709\u524d\u5bfc\u96f6\u7684\u6570\u7ec4\u6765\u8868\u793a\u8fd9\u4e2a\u6570\uff0c\u6211\u4eec\u79f0\u5b83\u4e3a$d$\u3002\u6570\u7ec4\u7684\u4e0b\u6807\u4ece$1$\u5f00\u59cb\u987a\u5e8f\u8f93\u5165\u3002Petya\u60f3\u8981\u8fdb\u884c$k$\u6b21\u5982\u4e0b\u7684\u53d8\u6362:\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u7684$x(1<=x< n)$\u4f7f\u5f97\u5176\u6ee1\u8db3$d_x=4$\u5e76\u4e14$d_{x+1}=7$\u3002\u5982\u679c$x$\u662f\u5947\u6570\uff0c\u90a3\u4e48\u8ba9$d_x=d_{x+1}=4$\uff0c\u5426\u5219\u8ba9$d_x=d_{x+1}=7$\u3002\u82e5\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684$x$\uff0c\u5219\u6570\u5b57\u4e0d\u53d8\u3002\n\n\u7ed9\u5b9a\u521d\u59cb\u6570\u7ec4\u548c\u6570\u5b57$k$\uff0c\u8bf7\u4f60\u5e2e\u52a9Petya\u5f97\u51fa$k$\u6b21\u64cd\u4f5c\u540e\u7684\u7ed3\u679c\u3002\n\n# \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n## \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570$n$\u548c$k(1<=n<=10^5,0<=k<=10^9)$\uff0c\u5206\u522b\u8868\u793a\u6570\u5b57\u4e2a\u6570\u548c\u64cd\u4f5c\u6b21\u6570\u3002\n\u7b2c\u4e8c\u884c\u7528$n$\u4e2a\u6570\u5b57\u8868\u793a\u6570\u7ec4$d$,\u6570\u5b57\u4e4b\u95f4\u6ca1\u6709\u7a7a\u683c\uff0c\u4ee5$d_1$\u5f00\u59cb\u3002\u4fdd\u8bc1\u6570\u5b57\u6ca1\u6709\u524d\u5bfc\u96f6\u3002\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u51fa\u4e00\u884c\uff0c\u4e3a\u64cd\u4f5c\u540e\u7684\u7ed3\u679c\uff0c\u6570\u5b57\u4e4b\u95f4\u6ca1\u6709\u7a7a\u683c\n\n# \u8bf4\u660e\n\n\u5728\u7b2c\u4e00\u4e2a\u6837\u4f8b\u4e2d\u6570\u5b57\u53d8\u6362\u6210\u5982\u4e0b\u5e8f\u5217:$4727447\\to4427447\\to4427477\\to4427447\\to4427477$\n\u5728\u7b2c\u4e8c\u4e2a\u6837\u4f8b\u4e2d:$4478\\to4778\\to4478$"
}