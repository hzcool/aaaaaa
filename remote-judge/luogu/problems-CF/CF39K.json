{
    "description": "You take part in the testing of new weapon. For the testing a polygon was created. The polygon is a rectangular field $ n\u00d7m $ in size, divided into unit squares $ 1\u00d71 $ in size. The polygon contains $ k $ objects, each of which is a rectangle with sides, parallel to the polygon sides and entirely occupying several unit squares. The objects don't intersect and don't touch each other.\n\nThe principle according to which the weapon works is highly secret. You only know that one can use it to strike any rectangular area whose area is not equal to zero with sides, parallel to the sides of the polygon. The area must completely cover some of the unit squares into which the polygon is divided and it must not touch the other squares. Of course the area mustn't cross the polygon border. Your task is as follows: you should hit no less than one and no more than three rectangular objects. Each object must either lay completely inside the area (in that case it is considered to be hit), or lay completely outside the area.\n\nFind the number of ways of hitting.",
    "inputFormat": "The first line has three integers $ n $ , $ m $ \u0438 $ k $ ( $ 1<=n,m<=1000 $ , $ 1<=k<=90 $ ) \u2014 the sizes of the polygon and the number of objects on it respectively. Next $ n $ lines contain $ m $ symbols each and describe the polygon. The symbol \"\\*\" stands for a square occupied an object, whereas the symbol \".\" stands for an empty space. The symbols \"\\*\" form exactly $ k $ rectangular connected areas that meet the requirements of the task.",
    "outputFormat": "Output a single number \u2014 the number of different ways to hit a target.",
    "samples": [
        [
            "3 3 3\n*.*\n...\n*..\n",
            "21\n"
        ],
        [
            "4 5 4\n.*.**\n...**\n**...\n...**\n",
            "38\n"
        ],
        [
            "2 2 1\n.*\n..\n",
            "4\n"
        ]
    ],
    "hint": "",
    "translation": "# \u9898\u76ee\u63cf\u8ff0\r\n\u4f60\u53c2\u4e0e\u4e86\u4e00\u79cd\u65b0\u6b66\u5668\u7684\u6d4b\u8bd5\u3002\u6d4b\u8bd5\u9700\u8981\u4e00\u4e2a $n\u00d7m$ \u7684\u7f51\u683c\uff0c\u6bcf\u4e2a\u5c0f\u7f51\u683c\u957f\u5bbd\u4e3a $1\u00d71$\u3002\u7f51\u683c\u4e2d\u5305\u542b\u4e86 $k$ \u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u90fd\u662f\u77e9\u5f62\u7684\uff0c\u7269\u54c1\u7684\u56db\u6761\u8fb9\u5e73\u884c\u4e8e\u7f51\u683c\u7684\u8fb9\u7f18\u3002\u4efb\u610f\u4e24\u4e2a\u7269\u54c1\u4e0d\u4f1a\u76f8\u4e92\u8986\u76d6\uff0c\u4e5f\u4e0d\u4f1a\u76f8\u4e92\u63a5\u89e6\u3002\r\n\r\n\u6b66\u5668\u7684\u5de5\u4f5c\u539f\u7406\u662f\u673a\u5bc6\u3002\u4f60\u53ea\u77e5\u9053\u65b0\u6b66\u5668\u53ef\u4ee5\u653b\u51fb\u4efb\u610f\u4e00\u4e2a\u5728\u7f51\u683c\u5185\u4e14\u9762\u79ef\u4e0d\u4e3a $0$ \u7684\u77e9\u5f62\u533a\u57df\uff0c\u76ee\u6807\u533a\u57df\u7684\u56db\u6761\u8fb9\u5e73\u884c\u4e8e\u7f51\u683c\u7684\u56db\u6761\u8fb9\u3002\u8be5\u533a\u57df\u5fc5\u987b\u5b8c\u5168\u8986\u76d6\u4e00\u4e9b\u7269\u54c1\uff0c\u800c\u4e14\u5176\u4ed6\u7269\u54c1\u4e0d\u80fd\u548c\u76ee\u6807\u533a\u57df\u76f8\u4ea4\u3002\r\n\r\n\u4f60\u5e94\u8be5\u653b\u51fb\u81f3\u5c11 $1$ \u4e2a\uff0c\u81f3\u591a $3$ \u4e2a\u7269\u54c1\u3002\u4efb\u610f\u4e00\u4e2a\u7269\u54c1\u5fc5\u987b\u5b8c\u5168\u4f4d\u4e8e\u76ee\u6807\u533a\u57df\u5185\uff08\u51fb\u4e2d\u4e86\uff09\uff0c\u6216\u8005\u5b8c\u5168\u4f4d\u4e8e\u76ee\u6807\u533a\u57df\u5916\uff08\u6ca1\u51fb\u4e2d\uff09\u3002\r\n\r\n\u4f60\u9700\u8981\u8f93\u51fa\u653b\u51fb\u65b9\u6cd5\u7684\u603b\u6570\u3002\r\n\r\n# \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\r\n## \u8f93\u5165\u683c\u5f0f\r\n\u7b2c\u4e00\u884c\u4e09\u4e2a\u6574\u6570 $n$,$m$,$k$ ($1<=n,m<=1000;1<=k<=90$)\r\n\uff0c\u5206\u522b\u8868\u793a\u7f51\u683c\u7684\u5bbd\u548c\u9ad8\uff0c\u7269\u54c1\u7684\u4e2a\u6570\u3002\r\n\r\n\u63a5\u4e0b\u6765 $n$ \u884c\uff0c\u6bcf\u884c $m$ \u4e2a\u5b57\u7b26\uff0c`*`\u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u88ab\u7269\u54c1\u5360\u7528\uff0c`.`\u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u7a7a\u7684\u3002\r\n## \u8f93\u51fa\u683c\u5f0f\r\n\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u653b\u51fb\u65b9\u6cd5\u7684\u603b\u6570\u3002"
}