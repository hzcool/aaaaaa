{
    "description": "This is an interactive problem. Don't forget to flush output after printing queries using cout.flush() or fflush(stdout) in C++ or similar functions in other programming languages.\n\nThere are $ n $ gift boxes in a row, numbered from $ 1 $ to $ n $ from left to right. It's known that exactly $ k $ of them contain valuable gifts \u2014 other boxes contain just lucky stones. All boxes look the same and differ only in weight. All boxes with stones have the same weight and are strictly heavier than boxes with valuable items. But valuable gifts may be different, so the boxes with valuable items may have different weights.\n\nYou can ask no more than $ 50 $ queries (printing an answer doesn't count). By each query you can compare total weights of two non-intersecting subsets of boxes $ a_1, a_2, \\dots, a_{k_a} $ and $ b_1, b_2, \\dots, b_{k_b} $ . In return you'll get one of four results:\n\n- FIRST, if subset $ a_1, a_2, \\dots, a_{k_a} $ is strictly heavier;\n- SECOND, if subset $ b_1, b_2, \\dots, b_{k_b} $ is strictly heavier;\n- EQUAL, if subsets have equal total weights;\n- WASTED, if the query is incorrect or the limit of queries is exceeded.\n\nUsing such queries (or, maybe, intuition) find the box with a valuable gift with the minimum index.",
    "inputFormat": "The input consists of several cases. In the beginning, you receive the integer $ T $ ( $ 1 \\le T \\le 500 $ ) \u2014 the number of test cases.\n\nAt the beginning of each test case, you receive two integers $ n $ and $ k $ ( $ 2 \\le n \\le 1000 $ , $ 1 \\le k \\le       \\frac{n}{2} $ ) \u2014 the number of boxes in a row and the number of boxes with valuable gifts.\n\nIt's guaranteed that the order of boxes is fixed beforehand and that the sum of $ n $ in one test doesn't exceed $ 1000 $ .",
    "outputFormat": "For each test case print the minimum index among all boxes with a valuable gift in the following format: \"! $ x $ \" where $ x $ ( $ 1 \\le x \\le n $ ) \u2014 the index of the box.\n\nInteraction\n\nPrint each query in three lines. In the first line print the sizes of subset in the following format: \"? $ k_a $ $ k_b $ \" where $ k_a $ and $ k_b $ ( $ 1 \\le k_a, k_b \\le n $ ; $ k_a       + k_b \\le n $ ) \u2014 the corresponding sizes.\n\nIn the second line print $ k_a $ integers $ a_1, a_2, \\dots,       a_{k_a} $ ( $ 1 \\le a_i \\le n $ ; $ a_i \\neq a_j $ if $ i \\neq       j $ ) \u2014 indexes of boxes in the first subset.\n\nIn the third line print $ k_b $ integers $ b_1, b_2, \\dots,       b_{k_b} $ ( $ 1 \\le b_i \\le n $ ; $ b_i \\neq b_j $ if $ i \\neq       j $ ) \u2014 indexes of boxes in the second subset.\n\nThe subsets shouldn't intersect, i. e. $ a_i \\neq b_j $ for all $ i $ and $ j $ .\n\nYou'll receive one of four responses described above. In the case of WASTED stop your program to avoid getting random verdict instead of Wrong Answer.",
    "samples": [
        [
            "2\n2 1\n-\n-\n-\nFIRST\n-\n5 2\n-\n-\n-\nFIRST\n-\n-\n-\nSECOND\n-\n-\n-\nEQUAL\n-",
            "-\n-\n? 1 1\n1\n2\n-\n! 2\n-\n? 1 1\n1\n2\n-\n? 2 3\n4 2\n1 3 5\n-\n? 1 1\n4\n5\n-\n! 1"
        ]
    ],
    "hint": "Additional separators \"\u2013\" in the sample are used only to increase the readability of the sample. Don't print any unnecessary symbols or line breaks in your solution when you send it to the system.\n\n Hacks are forbidden in this task.",
    "translation": "\u8fd9\u662f\u4e00\u9053**\u4ea4\u4e92\u9898**\u3002\u5f53\u7136\uff0c\u5728\u8f93\u51fa\u8be2\u95ee\u4e4b\u540e\u4e0d\u8981\u5fd8\u8bb0**\u5237\u65b0\u7f13\u51b2\u533a**\uff08\u6bd4\u5982\u4f7f\u7528 `fflush(stdout)` \u6216 `cout.flush()`\uff09\u3002\n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u4e00\u5171\u6709 $n$ \u4e2a\u76d2\u5b50\uff0c\u7f16\u53f7\u7531 $1$ \u81f3 $n$\uff0c\u6bcf\u4e2a\u76d2\u5b50\u5185\u53ea\u6709\u4e00\u4ef6\u4e1c\u897f\uff0c\u5b83\u4e0d\u662f\u77f3\u5934\u5c31\u662f\u793c\u7269\u3002\n\n\u6bcf\u4e2a\u76d2\u5b50\u90fd\u6709\u4e00\u4e2a\u91cd\u91cf\u3002\u6240\u6709\u88c5\u6709\u77f3\u5934\u7684\u76d2\u5b50**\u4e00\u6837\u91cd**\uff0c\u4f46\u662f\u88c5\u6709\u793c\u7269\u7684\u76d2\u5b50**\u4e0d\u4fdd\u8bc1\u91cd\u91cf\u76f8\u7b49**\u3002\u5df2\u77e5\u6240\u6709\u88c5\u6709\u793c\u7269\u7684\u76d2\u5b50\u91cd\u91cf\u90fd**\u4e25\u683c\u5c0f\u4e8e**\u88c5\u6709\u77f3\u5934\u76d2\u5b50\u7684\u91cd\u91cf\u3002\n\n\u60a8\u5df2\u77e5\u76d2\u5b50\u4e2a\u6570 $n$ \u548c\u542b\u6709\u793c\u7269\u7684\u76d2\u5b50\u6570\u91cf $k$\uff0c\u9700\u8981\u627e\u5230**\u7f16\u53f7\u6700\u5c0f**\u542b\u6709\u793c\u7269\u76d2\u5b50\u7684\u7f16\u53f7\u3002\u5f53\u7136\u60a8\u9700\u8981\u901a\u8fc7\u4e00\u4e9b\u8be2\u95ee\u6765\u5f97\u5230\u7ed3\u679c\u3002\n\n## \u8f93\u5165\u683c\u5f0f\n\n**\u672c\u9898\u5305\u542b\u591a\u7ec4\u6570\u636e**\u3002\n\n\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570 $T$\uff0c\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\u636e\uff1a\n\n\u4e00\u884c\u4e8c\u4e2a\u6574\u6570 $n$ \u548c $k$\uff0c\u5206\u522b\u8868\u793a\u76d2\u5b50\u4e2a\u6570\u4e0e\u542b\u6709\u793c\u7269\u7684\u76d2\u5b50\u4e2a\u6570\u3002\n\n_\u63a5\u4e0b\u6765\u7684\u8f93\u5165\u4e2d\u5c06\u5305\u62ec\u6b64\u6570\u636e\u4e2d\u7a0b\u5e8f\u8be2\u95ee\u7684\u8be2\u95ee\u7ed3\u679c\uff0c\u8be6\u89c1**\u8be2\u95ee\u3001\u8be2\u95ee\u7ed3\u679c\u4e0e\u56de\u7b54\u683c\u5f0f**\u90e8\u5206\u3002_\n\n## \u8be2\u95ee\u3001\u8be2\u95ee\u7ed3\u679c\u4e0e\u56de\u7b54\u683c\u5f0f\n\n### \u8be2\u95ee\n\n\u6bcf\u6b21\u8be2\u95ee\u60a8\u9700\u8981\u7ed9\u51fa\u4e8c\u4e2a\u7531\u76d2\u5b50\u7f16\u53f7\u7ec4\u6210\u4e14**\u4e0d\u91cd\u53e0**\u7684\u96c6\u5408 $A\\{a_1,a_2,\\dots,a_{k_a}\\}$ \u4e0e $B\\{b_1,b_2,\\dots,b_{k_b}\\}$\uff0c\u5176\u5927\u5c0f\u5206\u522b\u4e3a $k_a$ \u4e0e $k_b$\u3002\u5728\u8fd9\u4e4b\u540e\uff0c\u4ea4\u4e92\u7cfb\u7edf\u4f1a\u7ed9\u51fa\u4e8c\u96c6\u5408\u6240\u4ee3\u8868\u76d2\u5b50\u91cd\u91cf\u548c\u7684\u5927\u5c0f\u5173\u7cfb\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\u636e\uff0c\u60a8\u6709 $50$ **\u6b21**\u8be2\u95ee\u7684\u673a\u4f1a\uff08\u5f53\u7136\u56de\u7b54\u5e76\u4e0d\u4f1a\u6d88\u8017\u4e00\u6b21\u673a\u4f1a\uff09\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\uff1a\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26 `?` \u548c\u96c6\u5408\u5927\u5c0f $k_a$\uff0c$k_b$\uff0c\u4e09\u8005\u95f4\u7531\u7a7a\u683c\u5206\u5f00\uff08\u5982 `? 18 40`\uff09\u3002\n\n\u7b2c\u4e8c\u884c $k_a$ \u4e2a\u6574\u6570 $a_1,a_2,\\dots,a_{k_a}$\uff0c\u8868\u793a\u96c6\u5408 $A$ \u4e2d\u7684\u5143\u7d20\u3002\n\n\u7b2c\u4e09\u884c $k_b$ \u4e2a\u6574\u6570 $b_1,b_2,\\dots,b_{k_b}$\uff0c\u8868\u793a\u96c6\u5408 $B$ \u4e2d\u7684\u5143\u7d20\u3002\n\n**\u8f93\u51fa\u4e00\u6b21\u8be2\u95ee\u4e4b\u540e\u4e0d\u8981\u5fd8\u4e86\u5237\u65b0\u7f13\u51b2\u533a**\u3002\n\n### \u8be2\u95ee\u7ed3\u679c\n\n\u5bf9\u4e8e\u60a8\u7684\u7a0b\u5e8f\u7ed9\u51fa\u7684\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u4ea4\u4e92\u7cfb\u7edf\u5c06\u4f1a\u5728\u6807\u51c6\u8f93\u5165\uff08`stdin`\uff09\u4e2d\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u7ed3\u679c\u3002\n\n\u4e0d\u59a8\u8bbe\u8be2\u95ee\u7ed9\u51fa\u7684\u96c6\u5408 $A$ \u6240\u4ee3\u8868\u7684\u76d2\u5b50\u7684\u603b\u91cd\u91cf\u4e3a $w_a$\uff0c$B$ \u7684\u4e3a $w_b$\u3002\u5219\u7ed9\u51fa\u7684\u7ed3\u679c\u662f\u4ee5\u4e0b\u56db\u8005\u4e4b\u4e00\uff1a\n\n- `FIRST` \u5982\u679c $w_a>w_b$\u3002\n\n- `SECOND` \u5982\u679c $w_a<w_b$\u3002\n\n- `EQUAL` \u5982\u679c $w_a=w_b$\u3002\n\n- `WASTED` \u5982\u679c\u8be2\u95ee\u4e0d\u5408\u6cd5\uff08\u5982\u672c\u7ec4\u6570\u636e\u8be2\u95ee\u673a\u4f1a\u5df2\u7528\u5c3d\u6216\u3001\u4e8c\u96c6\u5408\u5b58\u5728\u91cd\u53e0\u90e8\u5206\u7b49\uff09\u3002 _\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7**\u7acb\u5373\u7ed3\u675f\u7a0b\u5e8f**\u4ee5\u9632\u6b62\u51fa\u73b0\u4e0d\u53ef\u9884\u77e5\u7684\u9519\u8bef\u3002_ \n\n### \u56de\u7b54\n\n\u6bcf\u4e00\u7ec4\u6570\u636e\u9700\u8981\u7684\u8be2\u95ee\u7ed3\u675f\u540e\uff0c\u8f93\u51fa\u5b57\u7b26 `!` \u548c\u7b54\u6848 $x$\uff08\u5373**\u7f16\u53f7\u6700\u5c0f**\u5305\u542b\u793c\u7269\u76d2\u5b50\u7684\u7f16\u53f7\uff09\uff0c\u4e8c\u8005\u95f4\u4ee5\u7a7a\u683c\u5206\u9694\uff08\u6bd4\u5982 `! 91`\uff09\u3002\n\n## \u6570\u636e\u8303\u56f4\n\n### \u8f93\u5165\u6570\u636e\n\n- $1 \\leq T \\leq 500$\n\n- $2 \\leq n \\leq 10^3$\n\n- \u6240\u6709\u6570\u636e\u7ec4\u4e2d $n$ \u7684\u603b\u548c\u4e0d\u8d85\u8fc7 $10^3$\u3002\n\n- $1 \\leq k \\leq \\frac{n}{2}$\n\n### \u8f93\u51fa\u6570\u636e\u8981\u6c42\n\n- $1 \\leq x \\leq n$\n\n- $1 \\leq k_a,k_b \\leq n$\n\n- $2 \\leq k_a+k_b \\leq n$\n\n## \u63d0\u793a\n\n\u6837\u4f8b\u4e2d\u7684\u7b26\u53f7 `-` \u4ec5\u5360\u4f4d\u4ee5\u8868\u793a\u8f93\u5165\u3001\u8f93\u51fa\u7684\u65f6\u95f4\u987a\u5e8f\uff0c\u771f\u6b63\u7684\u6570\u636e\u4e2d\u6ca1\u6709\u8fd9\u4e9b\u7b26\u53f7\u3002"
}