{
    "description": "You have recently fallen through a hole and, after several hours of unconsciousness, have realized you are in an underground city. On one of your regular, daily walks through the unknown, you have encountered two unusually looking skeletons called Sanz and P\u2019pairus, who decided to accompany you and give you some puzzles for seemingly unknown reasons.\n\nOne day, Sanz has created a crossword for you. Not any kind of crossword, but a 1D crossword! You are given $ m $ words and a string of length $ n $ . You are also given an array $ p $ , which designates how much each word is worth \u2014 the $ i $ -th word is worth $ p_{i} $ points. Whenever you find one of the $ m $ words in the string, you are given the corresponding number of points. Each position in the crossword can be used at most $ x $ times. A certain word can be counted at different places, but you cannot count the same appearance of a word multiple times. If a word is a substring of another word, you can count them both (presuming you haven\u2019t used the positions more than $ x $ times).\n\nIn order to solve the puzzle, you need to tell Sanz what\u2019s the maximum achievable number of points in the crossword. There is no need to cover all postions, just get the maximal score! Crossword and words contain only lowercase English letters.",
    "inputFormat": "The first line of the input contains a single integer $ n $ ( $ 1<=n<=500 $ ) \u2014 the length of the crossword. The second line contains the crossword string. The third line contains a single integer $ m $ ( $ 1<=m<=100 $ ) \u2014 the number of given words, and next $ m $ lines contain description of words: each line will have a string representing a non-empty word (its length doesn't exceed the length of the crossword) and integer $ p_{i} $ ( $ 0<=p_{i}<=100 $ ). Last line of the input will contain $ x $ ( $ 1<=x<=100 $ ) \u2014 maximum number of times a position in crossword can be used.",
    "outputFormat": "Output single integer \u2014 maximum number of points you can get.",
    "samples": [
        [
            "6\nabacba\n2\naba 6\nba 3\n3\n",
            "12\n"
        ]
    ],
    "hint": "For example, with the string \"abacba\", words \"aba\" (6 points) and \"ba\" (3 points), and $ x=3 $ , you can get at most $ 12 $ points - the word \"aba\" appears once (\"abacba\"), while \"ba\" appears two times (\"abacba\"). Note that for $ x=1 $ , you could get at most $ 9 $ points, since you wouldn\u2019t be able to count both \"aba\" and the first appearance of \"ba\"."
}