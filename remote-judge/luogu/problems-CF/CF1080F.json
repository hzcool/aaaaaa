{
    "description": "It is a very important day for Katya. She has a test in a programming class. As always, she was given an interesting problem that she solved very fast. Can you solve that problem?\n\nYou are given $ n $ ordered segments sets. Each segment can be represented as a pair of two integers $ [l, r] $ where $ l\\leq r $ . Each set can contain an arbitrary number of segments (even $ 0 $ ). It is possible that some segments are equal.\n\nYou are also given $ m $ queries, each of them can be represented as four numbers: $ a, b, x, y $ . For each segment, find out whether it is true that each set $ p $ ( $ a\\leq p\\leq b $ ) contains at least one segment $ [l, r] $ that lies entirely on the segment $ [x, y] $ , that is $ x\\leq l\\leq r\\leq y $ .\n\nFind out the answer to each query.\n\nNote that you need to solve this problem online. That is, you will get a new query only after you print the answer for the previous query.",
    "inputFormat": "The first line contains three integers $ n $ , $ m $ , and $ k $ $ (1\\leq n,m\\leq 10^5, 1\\leq k\\leq 3\\cdot10^5) $ \u2014 the number of sets, queries, and segments respectively.\n\nEach of the next $ k $ lines contains three integers $ l $ , $ r $ , and $ p $ $ (1\\leq l\\leq r\\leq 10^9, 1\\leq p\\leq n) $ \u2014 the limits of the segment and the index of a set, to which this segment belongs.\n\nEach of the next $ m $ lines contains four integers $ a, b, x, y $ $ (1\\leq a\\leq b\\leq n, 1\\leq x\\leq y\\leq 10^9) $ \u2014 the description of the query.",
    "outputFormat": "For each query, print \"yes\" or \"no\" in a new line.\n\nInteraction\n\nAfter printing a query, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.",
    "samples": [
        [
            "5 5 9\n3 6 3\n1 3 1\n2 4 2\n1 2 3\n4 6 5\n2 5 3\n7 9 4\n2 3 1\n4 10 4\n1 2 2 3\n1 2 2 4\n1 3 1 5\n2 3 3 6\n2 4 2 9\n",
            "no\nyes\nyes\nno\nyes\n"
        ]
    ],
    "hint": "For the first query, the answer is negative since the second set does not contain a segment that lies on the segment $ [2, 3] $ .\n\nIn the second query, the first set contains $ [2, 3] $ , and the second set contains $ [2, 4] $ .\n\nIn the third query, the first set contains $ [2, 3] $ , the second set contains $ [2, 4] $ , and the third set contains $ [2, 5] $ .\n\nIn the fourth query, the second set does not contain a segment that lies on the segment $ [3, 6] $ .\n\nIn the fifth query, the second set contains $ [2, 4] $ , the third set contains $ [2, 5] $ , and the fourth contains $ [7, 9] $ .",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u4f60n\u4e2a\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f\u7ebf\u6bb5\uff0c\u6bcf\u4e2a\u7ebf\u6bb5\u7528\u5de6\u53f3\u7aef\u70b9$[l,r],l\\le r$\u63cf\u8ff0\u3002\u6bcf\u4e2a\u96c6\u5408\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u4e2a\u7ebf\u6bb5\uff08\u5305\u62ec0\u4e2a\uff09\uff0c\u5141\u8bb8\u5b58\u5728\u76f8\u540c\u7684\u7ebf\u6bb5\n\n\u6709m\u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u5f62\u5982$a,b,x,y$\uff0c\u95ee\u5bf9\u4e8e\u7f16\u53f7\u5728$[a,b]$\u4e4b\u95f4\u7684\u96c6\u5408\uff0c\u662f\u4e0d\u662f\u6bcf\u4e00\u4e2a\u90fd\u5305\u542b\u4e00\u4e2a\u6ee1\u8db3$x\\le l\\le r\\le y$\u7684\u7ebf\u6bb5\uff0c\u662f\u5219\u8f93\u51fa\"yes\"\uff0c\u5426\u5219\u8f93\u51fa\"no\"\n\n\u5f3a\u5236\u5728\u7ebf\uff0c\u5904\u7406\u5b8c\u6bcf\u4e2a\u8be2\u95ee\u540e\u7acb\u523b\u8f93\u51fa\u7ed3\u679c\uff0c\u7136\u540e\u624d\u80fd\u8bfb\u5165\u4e0b\u4e00\u4e2a\u8be2\u95ee\uff08\u5177\u4f53\u89c1\u8f93\u51fa\u683c\u5f0f\uff09\n\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n### \u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u5305\u542b3\u4e2a\u6574\u6570$n,m,k(1\\le n,m\\le 10^5,1\\le k\\le 3\u00d710^5)$\u5206\u522b\u662f\u96c6\u5408\u6570\u3001\u8be2\u95ee\u6570\u3001\u7ebf\u6bb5\u4e2a\u6570\u3002\n\n\u63a5\u4e0b\u6765$k$\u884c\u6bcf\u884c3\u4e2a\u6574\u6570$l,r,p(1\\le l\\le r\\le 10^9,1\\le p\\le n)$\u8868\u793a\u4e00\u6761\u7ebf\u6bb5\uff0c$l,r$\u4e3a\u5de6\u53f3\u7aef\u70b9\uff0c$p$\u4e3a\u5b83\u6240\u5c5e\u7684\u96c6\u5408\n\n\u63a5\u4e0b\u6765$m$\u884c\u6bcf\u884c\u56db\u4e2a\u6574\u6570$a,b,x,y(1\\le a\\le b\\le n,1\\le x\\le y\\le 10^9)$\u8868\u793a\u4e00\u4e2a\u8be2\u95ee\uff0c$a,b,x,y$\u7684\u542b\u4e49\u5982\u9898\u76ee\u63cf\u8ff0\u6240\u793a\n\n### \u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u8f93\u51fa\"yes\"\u6216\"no\"\uff0c\u6bcf\u4e2a\u8be2\u95ee\u5360\u4e00\u884c\n\u6bcf\u6b21\u8f93\u51fa\u540e\u9700\u8981\u5237\u65b0\u8f93\u51fa\u7f13\u5b58\uff0c\u5426\u5219\u4f1aTLE\n\n\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n- C++: fflush(stdout)\u6216cout.flush()\n- Java\uff1aSystem.out.flush()\n- Pascal\uff1aflush(output)\n- Python\uff1astdout.flush()\n- \u5176\u4ed6\u7684\u81ea\u5df1\u67e5\n## \u8bf4\u660e\n\u7b2c\u4e00\u4e2a\u8be2\u95ee\u7b54\u6848\u662fno\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e0d\u5305\u542b\u4e00\u4e2a\u5728$[2,3]$\u4e4b\u95f4\u7684\u7ebf\u6bb5\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u8be2\u95ee\uff0c\u7b2c\u4e00\u4e2a\u96c6\u5408\u5305\u542b$[2,3]$\uff0c\u7b2c\u4e8c\u4e2a\u96c6\u5408\u5305\u542b$[2,4]$\n\n\u5bf9\u4e8e\u7b2c\u4e09\u4e2a\u8be2\u95ee\uff0c\u7b2c\u4e00\u4e2a\u96c6\u5408\u5305\u542b$[2,3]$\uff0c\u7b2c\u4e8c\u4e2a\u96c6\u5408\u5305\u542b$[2,4]$\uff0c\u7b2c\u4e09\u4e2a\u96c6\u5408\u5305\u542b$[2,5]$\n\n\u5bf9\u4e8e\u7b2c\u56db\u4e2a\u8be2\u95ee\uff0c\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e0d\u5305\u542b\u4e00\u4e2a\u5728$[3\uff0c6]$\u4e4b\u95f4\u7684\u7ebf\u6bb5\n\n\u5bf9\u4e8e\u7b2c\u4e94\u4e2a\u8be2\u95ee\uff0c\u7b2c\u4e8c\u4e2a\u96c6\u5408\u5305\u542b$[2,4]$\uff0c\u7b2c\u4e09\u4e2a\u96c6\u5408\u5305\u542b$[2,5]$\uff0c\u7b2c\u56db\u4e2a\u96c6\u5408\u5305\u542b$[7,9]$"
}