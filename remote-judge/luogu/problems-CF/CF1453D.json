{
    "description": "Gildong is developing a game consisting of $ n $ stages numbered from $ 1 $ to $ n $ . The player starts the game from the $ 1 $ -st stage and should beat the stages in increasing order of the stage number. The player wins the game after beating the $ n $ -th stage.\n\nThere is at most one checkpoint on each stage, and there is always a checkpoint on the $ 1 $ -st stage. At the beginning of the game, only the checkpoint on the $ 1 $ -st stage is activated, and all other checkpoints are deactivated. When the player gets to the $ i $ -th stage that has a checkpoint, that checkpoint is activated.\n\nFor each try of a stage, the player can either beat the stage or fail the stage. If they beat the $ i $ -th stage, the player is moved to the $ i+1 $ -st stage. If they fail the $ i $ -th stage, the player is moved to the most recent checkpoint they activated, and they have to beat the stages after that checkpoint again.\n\nFor example, assume that $ n = 4 $ and the checkpoints are on the $ 1 $ -st and $ 3 $ -rd stages. The player starts at the $ 1 $ -st stage. If they fail on the $ 1 $ -st stage, they need to retry the $ 1 $ -st stage because the checkpoint on the $ 1 $ -st stage is the most recent checkpoint they activated. If the player beats the $ 1 $ -st stage, they're moved to the $ 2 $ -nd stage. If they fail it, they're sent back to the $ 1 $ -st stage again. If they beat both the $ 1 $ -st stage and the $ 2 $ -nd stage, they get to the $ 3 $ -rd stage and the checkpoint on the $ 3 $ -rd stage is activated. Now whenever they fail on the $ 3 $ -rd stage, or the $ 4 $ -th stage after beating the $ 3 $ -rd stage, they're sent back to the $ 3 $ -rd stage. If they beat both the $ 3 $ -rd stage and the $ 4 $ -th stage, they win the game.\n\nGildong is going to build the stages to have equal difficulty. He wants you to find any series of stages and checkpoints using at most $ 2000 $ stages, where the [expected number](https://en.wikipedia.org/wiki/Expected_value) of tries over all stages is exactly $ k $ , for a player whose probability of beating each stage is exactly $ \\cfrac{1}{2} $ .",
    "inputFormat": "Each test contains one or more test cases. The first line contains the number of test cases $ t $ ( $ 1 \\le t \\le 50 $ ).\n\nEach test case contains exactly one line. The line consists of a single integer $ k $ ( $ 1 \\le k \\le 10^{18} $ ) \u2014 the expected number of tries over all stages Gildong wants to set for a player whose probability of beating each stage is exactly $ \\cfrac{1}{2} $ .",
    "outputFormat": "For each test case, print $ -1 $ if it's impossible to construct such a series of stages and checkpoints using at most $ 2000 $ stages.\n\nOtherwise, print two lines. The first line should contain a single integer $ n $ ( $ 1 \\le n \\le 2000 $ ) \u2013 the number of stages. The second line should contain $ n $ integers, where the $ i $ -th integer represents whether the $ i $ -th stage has a checkpoint. The $ i $ -th integer should be $ 0 $ if the $ i $ -th stage doesn't have a checkpoint, and $ 1 $ if it has a checkpoint. Note that the first integer must be $ 1 $ according to the description.",
    "samples": [
        [
            "4\n1\n2\n8\n12",
            "-1\n1\n1\n4\n1 1 1 1\n5\n1 1 0 1 1"
        ]
    ],
    "hint": "In the first and the second case, we can see that the 'easiest' series of stages is to have $ 1 $ stage with a checkpoint. This already requires $ 2 $ tries in expectation, so it is impossible to make it to require only $ 1 $ try.\n\nIn the third case, it takes $ 2 $ tries in expectation to beat each stage, and the player can always retry that stage without falling back to one of the previous stages if they fail it. Therefore the total expected number of tries is $ 8 $ . Note that there exists an answer with fewer stages, but you are not required to minimize the number of stages used.",
    "translation": "\u9700\u8981\u8bbe\u8ba1\u4e00\u4e2a\u6e38\u620f\u5173\u5361\uff0c\u753101\u5b57\u7b26\u4e32\u7ec4\u6210\uff0c1\u8868\u793a\u5b58\u6863\u70b9\uff0c0\u8868\u793a\u666e\u901a\u5173\u5361\uff0c\u89c4\u5b9a\u6bcf\u4e00\u6b65\u53ef\u4ee5\u4ece\u7b2ci\u4e2a\u5173\u5361\u524d\u8fdb\u5230\u7b2ci+1\u4e2a\u5173\u5361\uff0c\u4e0d\u8fc7\u67090.5\u7684\u6982\u7387\u4f1a\u6210\u529f\uff0c\u5269\u4e0b0.5\u7684\u6982\u7387\u4f1a\u5931\u8d25\uff0c\u5931\u8d25\u7684\u8bdd\u4f1a\u8fd4\u56de\u6700\u8fd1\u7684\u5b58\u6863\u70b9\u91cd\u65b0\u5f00\u59cb\uff0c\u73b0\u5728\u95ee\u5982\u4f55\u8bbe\u8ba1\u5173\u5361\uff0c\u53ef\u4ee5\u4f7f\u5f97\u5230\u8fbe\u7ec8\u70b9\u7684\u671f\u671b\u4e3ak"
}