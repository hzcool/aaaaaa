{
    "description": "A string $ s $ of length $ n $ ( $ 1 \\le n \\le 26 $ ) is called alphabetical if it can be obtained using the following algorithm:\n\n- first, write an empty string to $ s $ (i.e. perform the assignment $ s $ := \"\");\n- then perform the next step $ n $ times;\n- at the $ i $ -th step take $ i $ -th lowercase letter of the Latin alphabet and write it either to the left of the string $ s $ or to the right of the string $ s $ (i.e. perform the assignment $ s $ := $ c+s $ or $ s $ := $ s+c $ , where $ c $ is the $ i $ -th letter of the Latin alphabet).\n\nIn other words, iterate over the $ n $ first letters of the Latin alphabet starting from 'a' and etc. Each time we prepend a letter to the left of the string $ s $ or append a letter to the right of the string $ s $ . Strings that can be obtained in that way are alphabetical.\n\nFor example, the following strings are alphabetical: \"a\", \"ba\", \"ab\", \"bac\" and \"ihfcbadeg\". The following strings are not alphabetical: \"z\", \"aa\", \"ca\", \"acb\", \"xyz\" and \"ddcba\".\n\nFrom the given string, determine if it is alphabetical.",
    "inputFormat": "The first line contains one integer $ t $ ( $ 1 \\le t \\le 10^4 $ ) \u2014 the number of test cases. Then $ t $ test cases follow.\n\nEach test case is written on a separate line that contains one string $ s $ . String $ s $ consists of lowercase letters of the Latin alphabet and has a length between $ 1 $ and $ 26 $ , inclusive.",
    "outputFormat": "Output $ t $ lines, each of them must contain the answer to the corresponding test case. Output YES if the given string $ s $ is alphabetical and NO otherwise.\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive answer).",
    "samples": [
        [
            "11\na\nba\nab\nbac\nihfcbadeg\nz\naa\nca\nacb\nxyz\nddcba",
            "YES\nYES\nYES\nYES\nYES\nNO\nNO\nNO\nNO\nNO\nNO"
        ]
    ],
    "hint": "The example contains test cases from the main part of the condition.",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\n\u82e5\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32 $s$ \u662f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u6784\u9020\u7684\uff0c\u6211\u4eec\u79f0 $s$ \u5408\u6cd5\u3002\n\n- $s$ \u521d\u59cb\u4e3a\u7a7a\uff1b\n\n- \u5bf9 $s$ \u8fdb\u884c $n$ \u64cd\u4f5c\uff0c\u7b2c $i$ \u6b21\u64cd\u4f5c\u53ef\u4ee5\u5c06\u5b57\u5178\u5e8f\u4e2d\u6392\u540d\u7b2c $i$ \u7684\u5b57\u7b26\u63d2\u5165\u5230 $s$ \u7684\u6700\u524d\u9762\u6216\u6700\u540e\u9762\u3002\n\n\u9898\u76ee\u7ed9\u5b9a $t$ \u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u5206\u522b\u5224\u65ad\u5b83\u4eec\u662f\u5426\u5408\u6cd5\u3002\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 $t$\u3002\n\n\u63a5\u4e0b\u6765\u7684 $t$ \u884c\uff0c\u6bcf\u884c\u5404\u6709\u4e00\u4e2a\u957f\u5ea6\u5728 $1$ \u5230 $26$ \u4e4b\u95f4\u5b57\u7b26\u4e32 $s$\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32\u8f93\u51fa `YES` \u6216 `NO`\uff08\u4f60\u4e5f\u53ef\u4ee5\u8f93\u51fa `yEs`\uff0c`yes` \u4e4b\u7c7b\u7684\u4e1c\u897fqwq\uff09\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u6362\u884c\u9694\u5f00\u3002"
}