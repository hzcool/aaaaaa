{
    "description": "You are given a matrix, consisting of $ n $ rows and $ m $ columns. The rows are numbered top to bottom, the columns are numbered left to right.\n\nEach cell of the matrix can be either free or locked.\n\nLet's call a path in the matrix a staircase if it:\n\n- starts and ends in the free cell;\n- visits only free cells;\n- has one of the two following structures: \n  1. the second cell is $ 1 $ to the right from the first one, the third cell is $ 1 $ to the bottom from the second one, the fourth cell is $ 1 $ to the right from the third one, and so on;\n  2. the second cell is $ 1 $ to the bottom from the first one, the third cell is $ 1 $ to the right from the second one, the fourth cell is $ 1 $ to the bottom from the third one, and so on.\n\nIn particular, a path, consisting of a single cell, is considered to be a staircase.\n\nHere are some examples of staircases:\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1598E/30e6b70a090f9657a06b957e8113944b3c2b16f3.png)Initially all the cells of the matrix are free.\n\nYou have to process $ q $ queries, each of them flips the state of a single cell. So, if a cell is currently free, it makes it locked, and if a cell is currently locked, it makes it free.\n\nPrint the number of different staircases after each query. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.",
    "inputFormat": "The first line contains three integers $ n $ , $ m $ and $ q $ ( $ 1 \\le n, m \\le 1000 $ ; $ 1 \\le q \\le 10^4 $ ) \u2014 the sizes of the matrix and the number of queries.\n\nEach of the next $ q $ lines contains two integers $ x $ and $ y $ ( $ 1 \\le x \\le n $ ; $ 1 \\le y \\le m $ ) \u2014 the description of each query.",
    "outputFormat": "Print $ q $ integers \u2014 the $ i $ -th value should be equal to the number of different staircases after $ i $ queries. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.",
    "samples": [
        [
            "2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n1 2\n2 1\n1 1",
            "5\n10\n5\n2\n5\n3\n1\n0"
        ],
        [
            "3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1",
            "49\n35\n24\n29\n49\n39\n31\n23\n29\n27"
        ],
        [
            "1000 1000 2\n239 634\n239 634",
            "1332632508\n1333333000"
        ]
    ],
    "hint": "",
    "translation": "\u7ed9\u5b9a\u4e00\u4e2an*m\u7684\u7f51\u683c\uff0c\u6bcf\u4e2a\u683c\u5b50\u4e3a\u9ed1\u8272\u6216\u767d\u8272\uff0c\u521d\u59cb\u65f6\u6240\u6709\u683c\u5b50\u5747\u4e3a\u767d\u8272\u3002\n\n\u5b9a\u4e49\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\u7684\u8def\u5f84\u4e3a\u697c\u68af\uff1a\n\n* \u8d77\u70b9\u548c\u7ec8\u70b9\u5747\u4e3a\u767d\u8272\n* \u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u5747\u4e3a\u767d\u8272\n* \u6ee1\u8db3\u4ee5\u4e0b\u4e24\u79cd\u7ed3\u6784\u4e4b\u4e00\n  \n  1.\u7b2c\u4e8c\u4e2a\u683c\u5b50\u5728\u7b2c\u4e00\u4e2a\u683c\u5b50\u53f3\u9762\uff0c\u7b2c\u4e09\u4e2a\u683c\u5b50\u5728\u7b2c\u4e8c\u4e2a\u683c\u5b50\u4e0b\u9762\uff0c\u7b2c\u56db\u4e2a\u683c\u5b50\u5728\u7b2c\u4e09\u4e2a\u683c\u5b50\u53f3\u9762\uff0c\u4ee5\u6b64\u7c7b\u63a8\u2026\u2026\n  \n  2.\u7b2c\u4e8c\u4e2a\u683c\u5b50\u5728\u7b2c\u4e00\u4e2a\u683c\u5b50\u4e0b\u9762\uff0c\u7b2c\u4e09\u4e2a\u683c\u5b50\u5728\u7b2c\u4e8c\u4e2a\u683c\u5b50\u53f3\u9762\uff0c\u7b2c\u56db\u4e2a\u683c\u5b50\u5728\u7b2c\u4e09\u4e2a\u683c\u5b50\u4e0b\u9762\uff0c\u4ee5\u6b64\u7c7b\u63a8\u2026\u2026\n  \n\u6b64\u5916\uff0c\u4e00\u4e2a\u5355\u72ec\u7684\u767d\u8272\u683c\u5b50\u4e5f\u88ab\u89c6\u4e3a\u4e00\u4e2a\u697c\u68af\u3002\n\n\u7ed9\u5b9aq\u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7ed9\u5b9a\u6574\u6570x\u3001y\uff0c\u5e76\u5c06\u683c\u5b50\uff08x,y\uff09\u989c\u8272\u7ffb\u8f6c\u3002\n\n\u8f93\u51fa\u6bcf\u6b21\u64cd\u4f5c\u540e\u7f51\u683c\u4e2d\u4e0d\u540c\u697c\u68af\u7684\u4e2a\u6570\uff08\u64cd\u4f5c\u4e0d\u72ec\u7acb\uff09\u3002"
}