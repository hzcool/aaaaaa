{
    "description": "There are $ n $ people and $ k $ keys on a straight line. Every person wants to get to the office which is located on the line as well. To do that, he needs to reach some point with a key, take the key and then go to the office. Once a key is taken by somebody, it couldn't be taken by anybody else.\n\nYou are to determine the minimum time needed for all $ n $ people to get to the office with keys. Assume that people move a unit distance per $ 1 $ second. If two people reach a key at the same time, only one of them can take the key. A person can pass through a point with a key without taking it.",
    "inputFormat": "The first line contains three integers $ n $ , $ k $ and $ p $ ( $ 1<=n<=1000 $ , $ n<=k<=2000 $ , $ 1<=p<=10^{9} $ ) \u2014 the number of people, the number of keys and the office location.\n\nThe second line contains $ n $ distinct integers $ a_{1},a_{2},...,a_{n} $ ( $ 1<=a_{i}<=10^{9} $ ) \u2014 positions in which people are located initially. The positions are given in arbitrary order.\n\nThe third line contains $ k $ distinct integers $ b_{1},b_{2},...,b_{k} $ ( $ 1<=b_{j}<=10^{9} $ ) \u2014 positions of the keys. The positions are given in arbitrary order.\n\nNote that there can't be more than one person or more than one key in the same point. A person and a key can be located in the same point.",
    "outputFormat": "Print the minimum time (in seconds) needed for all $ n $ to reach the office with keys.",
    "samples": [
        [
            "2 4 50\n20 100\n60 10 40 80\n",
            "50\n"
        ],
        [
            "1 2 10\n11\n15 7\n",
            "7\n"
        ]
    ],
    "hint": "In the first example the person located at point $ 20 $ should take the key located at point $ 40 $ and go with it to the office located at point $ 50 $ . He spends $ 30 $ seconds. The person located at point $ 100 $ can take the key located at point $ 80 $ and go to the office with it. He spends $ 50 $ seconds. Thus, after $ 50 $ seconds everybody is in office with keys.",
    "translation": "\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u6709n\u4eba\u548ck\u4e2a\u94a5\u5319\u3002\u6bcf\u4e2a\u4eba\u90fd\u60f3\u5230\u8fbe\u4f4d\u4e8e\u7ebf\u8def\u4e0a\u7684\u529e\u516c\u5ba4\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4ed6\u9700\u8981\u5230\u4e00\u4e2a\u6709\u94a5\u5319\u7684\u70b9\u4e0a\uff0c\u62ff\u5230\u94a5\u5319\u7136\u540e\u53bb\u529e\u516c\u5ba4\u3002\n\n1. \u4e00\u65e6\u6709\u4eba\u62ff\u8d70\u94a5\u5319\uff0c\u4efb\u4f55\u4eba\u90fd\u4e0d\u80fd\u62ff\u8d70\u94a5\u5319\u3002\n2. \u4eba\u4eec\u6bcf1\u79d2\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\u8ddd\u79bb\u3002\n\u60a8\u9700\u8981\u786e\u5b9a\u6240\u6709\u4eba\u7528\u94a5\u5319\u5230\u8fbe\u529e\u516c\u5ba4\u7684\u6700\u77ed\u65f6\u95f4\u3002 \u5982\u679c\u4e24\u4e2a\u4eba\u540c\u65f6\u62ff\u5230\u94a5\u5319\uff0c\u4ed6\u4eec\u4e2d\u53ea\u6709\u4e00\u4e2a\u53ef\u4ee5\u62ff\u94a5\u5319\u3002\u800c\u4e00\u4e2a\u4eba\u53ea\u80fd\u901a\u8fc7\u90a3\u4e2a\u70b9\u800c\u4e0d\u80fd\u83b7\u53d6\u94a5\u5319\u3002\n\u7ffb\u8bd1\u8d21\u732e\u8005UID\uff1a46780"
}