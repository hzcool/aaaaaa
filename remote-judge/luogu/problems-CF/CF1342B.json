{
    "description": "Let's say string $ s $ has period $ k $ if $ s_i = s_{i +       k} $ for all $ i $ from $ 1 $ to $ |s| - k $ ( $ |s| $ means length of string $ s $ ) and $ k $ is the minimum positive integer with this property.\n\nSome examples of a period: for $ s $ =\"0101\" the period is $ k=2 $ , for $ s $ =\"0000\" the period is $ k=1 $ , for $ s $ =\"010\" the period is $ k=2 $ , for $ s $ =\"0011\" the period is $ k=4 $ .\n\nYou are given string $ t $ consisting only of 0's and 1's and you need to find such string $ s $ that:\n\n1. String $ s $ consists only of 0's and 1's;\n2. The length of $ s $ doesn't exceed $ 2 \\cdot |t| $ ;\n3. String $ t $ is a subsequence of string $ s $ ;\n4. String $ s $ has smallest possible period among all strings that meet conditions 1\u20143.\n\nLet us recall that $ t $ is a subsequence of $ s $ if $ t $ can be derived from $ s $ by deleting zero or more elements (any) without changing the order of the remaining elements. For example, $ t $ =\"011\" is a subsequence of $ s $ =\"10101\".",
    "inputFormat": "The first line contains single integer $ T $ ( $ 1 \\le T \\le       100 $ ) \u2014 the number of test cases.\n\nNext $ T $ lines contain test cases \u2014 one per line. Each line contains string $ t $ ( $ 1 \\le |t| \\le 100 $ ) consisting only of 0's and 1's.",
    "outputFormat": "Print one string for each test case \u2014 string $ s $ you needed to find. If there are multiple solutions print any one of them.",
    "samples": [
        [
            "4\n00\n01\n111\n110",
            "00\n01\n11111\n1010"
        ]
    ],
    "hint": "In the first and second test cases, $ s = t $ since it's already one of the optimal solutions. Answers have periods equal to $ 1 $ and $ 2 $ , respectively.\n\nIn the third test case, there are shorter optimal solutions, but it's okay since we don't need to minimize the string $ s $ . String $ s $ has period equal to $ 1 $ .",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\r\n\u5047\u8bbe\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32$s$\uff0c\u5982\u679c\u5b83\u7684\u7b2c$i$ \u4e2a\u5b57\u7b26\u548c\u7b2c$i+k$ \u4e2a\u5b57\u7b26\u76f8\u7b49$(1\\le i\\le|s|-k)$ \uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u5468\u671f\u4e3a$k$ \u3002\u5176\u4e2d\uff0c$|s|$ \u8868\u793a\u5b57\u7b26\u4e32$s$ \u7684\u957f\u5ea6\u3002\r\n\r\n\u73b0\u5728\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32$t$ \uff0c$t$ \u5185\u53ea\u5305\u62ec```0```\u548c```1```\uff0c\u8bf7\u4f60\u627e\u51fa\u8fd9\u4e2a$s$ \uff0c\u4f7f\u5176\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff1a\r\n1. \u5b57\u7b26\u4e32$s$ \u4e5f\u53ea\u5305\u62ec```0```\u548c```1```\u3002\r\n2. $|s|\\le 2\\times|t|$\uff08$s$ \u7684\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7$t$ \u7684\u957f\u5ea6\u7684\u4e24\u500d\uff09\u3002\r\n3. $t$ \u662f$s$ \u7684\u5b50\u4e32\u3002\r\n4. \u5728\u6ee1\u8db3\u4e0a\u97623\u4e2a\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c$s$ \u9700\u8981\u6709\u6700\u5c0f\u7684\u5468\u671f$k$ \u3002\r\n\r\n$t$ \u662f$s$ \u7684\u5b50\u4e32\u5c31\u662f\u8bf4\u5f53$s$ \u5220\u9664$0$\u4e2a\u6216\u66f4\u591a\u4e2a\u5b57\u7b26\u540e\uff08\u4e0d\u80fd\u6539\u53d8\u987a\u5e8f\uff09\uff0c$s$ \u5c31\u53d8\u6210\u4e86$t$ \u3002\u4f8b\u5982```011```\u5c31\u662f```10101```\u7684\u5b50\u4e32\u3002\r\n## \u8f93\u5165\u683c\u5f0f\r\n\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570$T$\uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570\u3002\r\n\r\n\u63a5\u4e0b\u6765$T$\u884c\uff0c\u6bcf\u884c\u6709\u4e00\u4e2a\u53ea\u5305\u542b```0```\u548c```1```\u7684\u5b57\u7b26\u4e32$t$ $(1\\le|t|\\le100)$\u3002\r\n## \u8f93\u51fa\u683c\u5f0f\r\n\u5982\u679c\u6709\u591a\u79cd\u89e3\uff0c\u8f93\u51fa\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32$s$ \u5373\u53ef\u3002"
}