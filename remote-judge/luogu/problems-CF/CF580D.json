{
    "description": "When Kefa came to the restaurant and sat at a table, the waiter immediately brought him the menu. There were $ n $ dishes. Kefa knows that he needs exactly $ m $ dishes. But at that, he doesn't want to order the same dish twice to taste as many dishes as possible.\n\nKefa knows that the $ i $ -th dish gives him $ a_{i} $ units of satisfaction. But some dishes do not go well together and some dishes go very well together. Kefa set to himself $ k $ rules of eating food of the following type \u2014 if he eats dish $ x $ exactly before dish $ y $ (there should be no other dishes between $ x $ and $ y $ ), then his satisfaction level raises by $ c $ .\n\nOf course, our parrot wants to get some maximal possible satisfaction from going to the restaurant. Help him in this hard task!",
    "inputFormat": "The first line of the input contains three space-separated numbers, $ n $ , $ m $ and $ k $ ( $ 1<=m<=n<=18 $ , $ 0<=k<=n*(n-1) $ ) \u2014 the number of dishes on the menu, the number of portions Kefa needs to eat to get full and the number of eating rules.\n\nThe second line contains $ n $ space-separated numbers $ a_{i} $ , ( $ 0<=a_{i}<=10^{9} $ ) \u2014 the satisfaction he gets from the $ i $ -th dish.\n\nNext $ k $ lines contain the rules. The $ i $ -th rule is described by the three numbers $ x_{i} $ , $ y_{i} $ and $ c_{i} $ ( $ 1<=x_{i},y_{i}<=n $ , $ 0<=c_{i}<=10^{9} $ ). That means that if you eat dish $ x_{i} $ right before dish $ y_{i} $ , then the Kefa's satisfaction increases by $ c_{i} $ . It is guaranteed that there are no such pairs of indexes $ i $ and $ j $ ( $ 1<=i&lt;j<=k $ ), that $ x_{i}=x_{j} $ and $ y_{i}=y_{j} $ .",
    "outputFormat": "In the single line of the output print the maximum satisfaction that Kefa can get from going to the restaurant.",
    "samples": [
        [
            "2 2 1\n1 1\n2 1 1\n",
            "3\n"
        ],
        [
            "4 3 2\n1 2 3 4\n2 1 5\n3 4 2\n",
            "12\n"
        ]
    ],
    "hint": "In the first sample it is best to first eat the second dish, then the first one. Then we get one unit of satisfaction for each dish and plus one more for the rule.\n\nIn the second test the fitting sequences of choice are 4 2 1 or 2 1 4. In both cases we get satisfaction 7 for dishes and also, if we fulfill rule 1, we get an additional satisfaction 5.",
    "translation": "kefa\u8fdb\u5165\u4e86\u4e00\u5bb6\u9910\u5385\uff0c\u8fd9\u5bb6\u9910\u5385\u4e2d\u6709n\u4e2a\u83dc\uff080<n<=18\uff09,kefa\u5bf9\u7b2ci\u4e2a\u83dc\u7684\u6ee1\u610f\u5ea6\u4e3aai\uff080<=ai<=10^9\uff09\uff0c\u5e76\u4e14\u5bf9\u4e8e\u8fd9n\u4e2a\u83dc\u6709k\u4e2a\u89c4\u5219\uff0c\u5982\u679ckefa\u5728\u5403\u5b8c\u7b2cxi\u4e2a\u83dc\u4e4b\u540e\u5403\u4e86\u7b2cyi\u4e2a\u83dc\uff08\u4fdd\u8bc1xi\u3001yi\u4e0d\u76f8\u7b49\uff09\uff0c\u90a3\u4e48\u4f1a\u989d\u5916\u83b7\u5f97ci\uff080<=ci<=10^9\uff09\u7684\u6ee1\u610f\u5ea6\u3002kefa\u8981\u5403m\u9053\u4efb\u610f\u7684\u83dc\uff080<m<=n\uff09\uff0c\u4f46\u662f\u4ed6\u5e0c\u671b\u81ea\u5df1\u5403\u83dc\u7684\u987a\u5e8f\u5f97\u5230\u7684\u6ee1\u610f\u5ea6\u6700\u5927\uff0c\u8bf7\u4f60\u5e2e\u5e2ekefa\u5427\uff01\n\n\u8f93\u5165\u7b2c\u4e00\u884c\u662f\u4e09\u4e2a\u6570\uff1an,m,k\n\n\u7b2c\u4e8c\u884c\u662fn\u4e2a\u6570\uff0c\u7b2ci\u4e2a\u6570\u8868\u793akefa\u5bf9\u7b2ci\u9053\u83dc\u7684\u6ee1\u610f\u5ea6\u4e3aai\n\n\u7b2c\u4e09\u884c\u5230\u7b2ck+2\u884c\u6bcf\u884c\u67093\u4e2a\u6570\uff1axi\uff0cyi\uff0cci\uff0c\u8868\u793a\u5982\u679ckefa\u5728\u5403\u5b8c\u7b2cxi\u9053\u83dc\u4e4b\u540e\u7acb\u523b\u5403\u4e86\u7b2cyi\u9053\u83dc\uff0c\u5219\u4f1a\u989d\u5916\u83b7\u5f97ci\u7684\u6ee1\u610f\u5ea6"
}