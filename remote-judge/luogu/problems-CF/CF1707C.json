{
    "description": "You are given a connected undirected graph consisting of $ n $ vertices and $ m $ edges. The weight of the $ i $ -th edge is $ i $ .\n\nHere is a wrong algorithm of finding a [minimum spanning tree](https://en.wikipedia.org/wiki/Minimum_spanning_tree) (MST) of a graph:\n\n```\n<pre class=\"verbatim\"><br></br>vis := an array of length n<br></br>s := a set of edges<br></br><br></br>function dfs(u):<br></br>    vis[u] := true<br></br>    iterate through each edge (u, v) in the order from smallest to largest edge weight<br></br>        if vis[v] = false<br></br>            add edge (u, v) into the set (s)<br></br>            dfs(v)<br></br><br></br>function findMST(u):<br></br>    reset all elements of (vis) to false<br></br>    reset the edge set (s) to empty<br></br>    dfs(u)<br></br>    return the edge set (s)<br></br>\n```\n\nEach of the calls findMST(1), findMST(2), ..., findMST(n) gives you a spanning tree of the graph. Determine which of these trees are minimum spanning trees.",
    "inputFormat": "The first line of the input contains two integers $ n $ , $ m $ ( $ 2\\le n\\le 10^5 $ , $ n-1\\le m\\le 2\\cdot 10^5 $ ) \u2014 the number of vertices and the number of edges in the graph.\n\nEach of the following $ m $ lines contains two integers $ u_i $ and $ v_i $ ( $ 1\\le u_i, v_i\\le n $ , $ u_i\\ne v_i $ ), describing an undirected edge $ (u_i,v_i) $ in the graph. The $ i $ -th edge in the input has weight $ i $ .\n\nIt is guaranteed that the graph is connected and there is at most one edge between any pair of vertices.",
    "outputFormat": "You need to output a binary string $ s $ , where $ s_i=1 $ if findMST(i) creates an MST, and $ s_i = 0 $ otherwise.",
    "samples": [
        [
            "5 5\n1 2\n3 5\n1 3\n3 2\n4 2",
            "01111"
        ],
        [
            "10 11\n1 2\n2 5\n3 4\n4 2\n8 1\n4 5\n10 5\n9 5\n8 2\n5 7\n4 6",
            "0011111011"
        ]
    ],
    "hint": "Here is the graph given in the first example.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1707C/6866eea697370f9ef4baf895c7023c2ffb357c36.png)There is only one minimum spanning tree in this graph. A minimum spanning tree is $ (1,2),(3,5),(1,3),(2,4) $ which has weight $ 1+2+3+5=11 $ .\n\nHere is a part of the process of calling findMST(1):\n\n- reset the array vis and the edge set s;\n- calling dfs(1);\n- vis\\[1\\] := true;\n- iterate through each edge $ (1,2),(1,3) $ ;\n- add edge $ (1,2) $ into the edge set s, calling dfs(2): \n  - vis\\[2\\] := true\n  - iterate through each edge $ (2,1),(2,3),(2,4) $ ;\n  - because vis\\[1\\] = true, ignore the edge $ (2,1) $ ;\n  - add edge $ (2,3) $ into the edge set s, calling dfs(3): \n      - ...\n\nIn the end, it will select edges $ (1,2),(2,3),(3,5),(2,4) $ with total weight $ 1+4+2+5=12>11 $ , so findMST(1) does not find a minimum spanning tree.\n\nIt can be shown that the other trees are all MSTs, so the answer is 01111.",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\u6709\u4e00\u56fe\u6709$n$\u4e2a\u70b9$m$\u6761\u8fb9\u3002\u7b2c$i$\u6761\u8fb9\u7684\u6743\u503c\u662f$i$\n\u73b0\u5728\u6709\u4e00\u4e2a\u9519\u8bef\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff08\u5c31\u662f\u6709bug\uff09\n\n```\nvis := an array of length n\ns := a set of edges\n\nfunction dfs(u):\n    vis[u] := true\n    iterate through each edge (u, v) in the order from smallest to largest edge weight\n        if vis[v] = false\n            add edge (u, v) into the set (s)\n            dfs(v)\n\nfunction findMST(u):\n    reset all elements of (vis) to false\n    reset the edge set (s) to empty\n    dfs(u)\n    return the edge set (s)\n```\n\u6bcf\u6b21\u8c03\u7528$findMST(i)$\u65f6\uff0c\u4f1a\u8fd4\u56de\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f60\u8981\u5224\u5b9a\u90a3\u4e9b\u662f\u6b63\u786e\u7684\u6700\u5c0f\u751f\u6210\u6811"
}