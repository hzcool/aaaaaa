{
    "description": "The second semester starts at the University of Pavlopolis. After vacation in Vi\u010dkopolis Noora needs to return to Pavlopolis and continue her study.\n\nSometimes (or quite often) there are teachers who do not like you. Incidentally Noora also has one such teacher. His name is Yury Dmitrievich and he teaches graph theory. Yury Dmitrievich doesn't like Noora, so he always gives the girl the most difficult tasks. So it happened this time.\n\nThe teacher gives Noora a tree with $ n $ vertices. Vertices are numbered with integers from $ 1 $ to $ n $ . The length of all the edges of this tree is $ 1 $ . Noora chooses a set of simple paths that pairwise don't intersect in edges. However each vertex should belong to at least one of the selected path.\n\nFor each of the selected paths, the following is done:\n\n1. We choose exactly one edge $ (u,v) $ that belongs to the path.\n2. On the selected edge $ (u,v) $ there is a point at some selected distance $ x $ from the vertex $ u $ and at distance $ 1-x $ from vertex $ v $ . But the distance $ x $ chosen by Noora arbitrarily, i. e. it can be different for different edges.\n3. One of the vertices $ u $ or $ v $ is selected. The point will start moving to the selected vertex.\n\nLet us explain how the point moves by example. Suppose that the path consists of two edges $ (v_{1},v_{2}) $ and $ (v_{2},v_{3}) $ , the point initially stands on the edge $ (v_{1},v_{2}) $ and begins its movement to the vertex $ v_{1} $ . Then the point will reach $ v_{1} $ , then \"turn around\", because the end of the path was reached, further it will move in another direction to vertex $ v_{2} $ , then to vertex $ v_{3} $ , then \"turn around\" again, then move to $ v_{2} $ and so on. The speed of the points is $ 1 $ edge per second. For example, for $ 0.5 $ second the point moves to the length of the half of an edge.\n\nA stopwatch is placed at each vertex of the tree. The time that the stopwatches indicate at start time is $ 0 $ seconds. Then at the starting moment of time, all points simultaneously start moving from the selected positions to selected directions along the selected paths, and stopwatches are simultaneously started. When one of the points reaches the vertex $ v $ , the stopwatch at the vertex $ v $ is automatically reset, i.e. it starts counting the time from zero.\n\nDenote by $ res_{v} $ the maximal time that the stopwatch at the vertex $ v $ will show if the point movement continues infinitely. Noora is asked to select paths and points on them so that $ res_{1} $ is as minimal as possible. If there are several solutions to do this, it is necessary to minimize $ res_{2} $ , then $ res_{3} $ , $ res_{4},...,res_{n} $ .\n\nHelp Noora complete the teacher's task.\n\nFor the better understanding of the statement, see the explanation for the example.",
    "inputFormat": "The first line contains single integer $ n $ ( $ 2<=n<=100 $ ) \u2014 number of vertices in the given tree.\n\nEach of next $ n-1 $ lines contains two integers $ u $ and $ v $ ( $ 1<=u,v<=n,u\u2260v $ ) \u2014 vertices connected by an edge.\n\nGuaranteed that input defines a valid tree.",
    "outputFormat": "In the first line print single integer $ paths $ \u2014 number of paths you want to choose.\n\nIn the next $ paths $ lines print path's descriptions:\n\n1. Single integer $ len $ \u2014 number of edges in the current path.\n2. $ len $ integers \u2014 indices of the edges in the path. The edges are numbered from $ 1 $ to $ n-1 $ in order they are given in input.\n3. Two integers $ u $ and $ v $ \u2014 means that you put point on the edge between vertices $ u $ and $ v $ (obviously the edge should belong to the path) and a point will start moving to the vertex $ v $ . Note that order of printing of the edge's ends is important. For example if you print \"1 2\" (without quotes), then point will start moving to vertex $ 2 $ ; but if you print \"2 1\" (without quotes), then point will start moving to vertex $ 1 $ .\n4. Single real number $ x $ ( $ 0<=x<=1 $ ) \u2014 distance between point and vertex $ u $ (the same vertex that you print first in the third paragraph).\n\nScoring\n\nJudge system will generate array $ res $ using the output data provided by the participant. Also system will generate array $ resOptimal $ by the jury answer. Your answer will be accepted if only for each $ i $ ( $ 1<=i<=n $ ) the following is satisfied: ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF822F/a49d7b0aa237b3e4a99cd6f3b71c923e0d7ca8dc.png).",
    "samples": [
        [
            "3\n1 2\n2 3\n",
            "2\n1 1 1 2 0.6666666666\n1 2 2 3 0.6666666666\n"
        ]
    ],
    "hint": "Consider an example.\n\nIn starting moment of time points are located as following:\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF822F/be0dbed0886e2d0dbeae85fa30e48d04dd18a145.png)\n\nThe first path is highlighted in red, the second in blue, green circles represent chosen points, and brown numbers inside vertices \u2014 current time at stopwatch. Purple arrows represent direction in which points will move.\n\nIn $ 0.(3) $ seconds points will be located in following way (before stopwatch reset):\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF822F/7cfb428336aebc601c4b996757fdb752e3f7c6a8.png)\n\nAfter stopwatch reset:\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF822F/87ab7128d0c4deb72103b8c56bde3fd3f8fbbbe1.png)\n\nIn $ 1.0 $ second after the start of moving:\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF822F/5cf6946176797cebc145a79d5535ea5ef7037208.png)\n\nIn $ 1.(3) $ seconds after the start of moving (after stopwatch reset):\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF822F/866fa575f288f1f0783b52f28144f7c6700f8ea9.png)\n\nFinally, in $ 2 $ seconds after the start of moving points return to their initial positions.\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF822F/e75c571be50a2075e2a9f9aeb90861b5d466ebb8.png)\n\nThis process will continue infinitely.",
    "translation": "\u7ed9\u51fa\u4e00\u4e2a $n$ \u4e2a\u8282\u70b9\u7684\u6811\u3002\n\n\u4f60\u9700\u8981\u9009\u51fa\u82e5\u5e72\u6761\u7b80\u5355\u8def\u5f84\uff0c\u4e14\u8def\u5f84\u4e24\u4e24\u65e0\u516c\u5171**\u8fb9**\uff0c\u6bcf\u4e2a\u70b9\u81f3\u5c11\u88ab\u4e00\u6761\u8def\u5f84\u8986\u76d6\u3002\n\n\u6bcf\u6761\u8def\u5f84\u4e0a\u90fd\u4f1a\u6709\u4e00\u4e2a\u4eba\u6cbf\u7740\u8def\u5f84\u4ee5\u6bcf\u79d2\u4e00\u6761\u8fb9\u7684\u901f\u5ea6\u65e0\u9650\u6765\u56de\u79fb\u52a8\uff08\u82e5\u5230\u8fbe\u8def\u5f84\u7aef\u70b9\u5219\u6539\u53d8\u65b9\u5411\uff09\uff0c\u4f60\u53ef\u4ee5\u4efb\u610f\u51b3\u5b9a\u4ed6\u7684\u521d\u59cb\u4f4d\u7f6e\u548c\u521d\u59cb\u65b9\u5411\u3002\u521d\u59cb\u4f4d\u7f6e\u53ef\u4ee5\u5728\u8fb9\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\u6bcf\u4e2a\u70b9\u4e0a\u90fd\u6709\u4e00\u4e2a\u8ba1\u65f6\u5668\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u505c\u6b62\u8ba1\u6570\u3002\u5f53\u67d0\u4e2a\u4eba\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u70b9\u4e0a\u7684\u8ba1\u65f6\u5668\u8ba1\u6570\u4f1a\u91cd\u7f6e\u81f3 $0$\u3002\n\n\u8bb0 $res_v$ \u8868\u793a\u70b9 $v$ \u4e0a\u8ba1\u65f6\u5668\u8868\u793a\u7684\u6700\u5927\u8ba1\u6570\uff0c\u5219\u4f60\u9700\u8981\u901a\u8fc7\u5408\u7406\u9009\u62e9\u8def\u5f84\u3001\u5b89\u6392\u884c\u8d70\u7684\u4eba\u5458\uff0c\u4f7f\u5f97\u5e8f\u5217 $\\{res_1, res_2, \\ldots, res_n\\}$ \u7684**\u5b57\u5178\u5e8f**\u6700\u5c0f\u3002"
}