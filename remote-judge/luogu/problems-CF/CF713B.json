{
    "description": "Filya just learned new geometry object \u2014 rectangle. He is given a field consisting of $ n\u00d7n $ unit cells. Rows are numbered from bottom to top with integer from $ 1 $ to $ n $ . Columns are numbered from left to right with integers from $ 1 $ to $ n $ . Cell, located at the intersection of the row $ r $ and column $ c $ is denoted as $ (r,c) $ . Filya has painted two rectangles, such that their sides are parallel to coordinate axes and each cell lies fully inside or fully outside each of them. Moreover, no cell lies in both rectangles.\n\nLater, hedgehog Filya became interested in the location of his rectangles but was unable to find the sheet of paper they were painted on. They were taken by Sonya and now she wants to play a little game with Filya. He tells her a query rectangle and she replies with the number of initial rectangles that lie fully inside the given query rectangle. The query rectangle should match the same conditions as initial rectangles. Rectangle lies fully inside the query if each o its cells lies inside the query.\n\nFilya knows Sonya really well, so is sure that if he asks more than $ 200 $ questions she will stop to reply.",
    "inputFormat": "The first line of the input contains an integer $ n $ ( $ 2<=n<=2^{16} $ ) \u2014 size of the field.\n\nFor each query an integer between $ 0 $ and $ 2 $ is returned \u2014 the number of initial rectangles that lie fully inside the query rectangle.",
    "outputFormat": "To make a query you have to print \"? $ x_{1} $ $ y_{1} $ $ x_{2} $ $ y_{2} $ \" (without quotes) ( $ 1<=x_{1}<=x_{2}<=n $ , $ 1<=y_{1}<=y_{2}<=n $ ), where $ (x_{1},y_{1}) $ stands for the position of the bottom left cell of the query and $ (x_{2},y_{2}) $ stands for the up right cell of the query. You are allowed to ask no more than $ 200 $ queries. After each query you should perform \"flush\" operation and read the answer.\n\nIn case you suppose you've already determined the location of two rectangles (or run out of queries) you should print \"! $ x_{11} $ $ y_{11} $ $ x_{12} $ $ y_{12} $ $ x_{21} $ $ y_{21} $ $ x_{22} $ $ y_{22} $ \" (without quotes), where first four integers describe the bottom left and up right cells of the first rectangle, and following four describe the corresponding cells of the second rectangle. You can print the rectangles in an arbitrary order. After you have printed the answer, print the end of the line and perform \"flush\". Your program should terminate immediately after it print the answer.\n\nInteraction\n\nTo flush you can use (just after printing an integer and end-of-line):\n\n- fflush(stdout) in C++;\n- System.out.flush() in Java;\n- stdout.flush() in Python;\n- flush(output) in Pascal;\n- See the documentation for other languages.\n\nYou will get the Wrong Answer verdict if you ask more than $ 200 $ queries, or if you print an incorrect coordinates.\n\nYou will get the Idleness Limit Exceeded verdict if you don't print anything (but you should) or if you forget about flushing the output (more info below).\n\nHacking.\n\nThe first line should contain an integer $ n $ ( $ 2<=n<=2^{16} $ ).\n\nThe second line should contain four integers $ x_{1} $ , $ y_{1} $ , $ x_{2} $ , $ y_{2} $ ( $ 1<=x_{1}<=x_{2}<=n $ , $ 1<=y_{1}<=y_{2}<=n $ ) \u2014 the description of the first rectangle.\n\nThe third line contains the description of the second rectangle in the similar way.",
    "samples": [
        [
            "5\n2\n1\n0\n1\n1\n1\n0\n1\n",
            "? 1 1 5 5\n? 1 1 3 3\n? 1 1 3 1\n? 2 2 2 2\n? 3 3 5 5\n? 3 3 3 5\n? 3 3 3 4\n? 3 4 3 5\n! 2 2 2 2 3 4 3 5\n"
        ]
    ],
    "hint": ""
}