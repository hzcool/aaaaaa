{
    "description": "You are given two arrays of integers $ a_1,a_2,\\dots,a_n $ and $ b_1,b_2,\\dots,b_m $ .\n\nAlice and Bob are going to play a game. Alice moves first and they take turns making a move.\n\nThey play on a grid of size $ n \\times m $ (a grid with $ n $ rows and $ m $ columns). Initially, there is a rook positioned on the first row and first column of the grid.\n\nDuring her/his move, a player can do one of the following two operations:\n\n1. Move the rook to a different cell on the same row or the same column of the current cell. A player cannot move the rook to a cell that has been visited $ 1000 $ times before (i.e., the rook can stay in a certain cell at most $ 1000 $ times during the entire game). Note that the starting cell is considered to be visited once at the beginning of the game.\n2. End the game immediately with a score of $ a_r+b_c $ , where $ (r, c) $ is the current cell (i.e., the rook is on the $ r $ -th row and $ c $ -th column).\n\nBob wants to maximize the score while Alice wants to minimize it. If they both play this game optimally, what is the final score of the game?",
    "inputFormat": "The first line contains two integers $ n $ and $ m $ ( $ 1 \\leq n,m \\leq 2 \\cdot 10^5 $ ) \u2014 the length of the arrays $ a $ and $ b $ (which coincide with the number of rows and columns of the grid).\n\nThe second line contains the $ n $ integers $ a_1, a_2, \\dots, a_n $ ( $ 1 \\leq a_i \\leq 5 \\cdot 10^8 $ ).\n\nThe third line contains the $ m $ integers $ b_1, b_2,\\dots, b_n $ ( $ 1 \\leq b_i \\leq 5 \\cdot 10^8 $ ).",
    "outputFormat": "Print a single line containing the final score of the game.",
    "samples": [
        [
            "2 1\n3 2\n2",
            "4"
        ],
        [
            "4 5\n235499701 451218171 355604420 132973458\n365049318 264083156 491406845 62875547 175951751",
            "531556171"
        ]
    ],
    "hint": "In the first test case, Alice moves the rook to $ (2, 1) $ and Bob moves the rook to $ (1, 1) $ . This process will repeat for $ 999 $ times until finally, after Alice moves the rook, Bob cannot move it back to $ (1, 1) $ because it has been visited $ 1000 $ times before. So the final score of the game is $ a_2+b_1=4 $ .\n\nIn the second test case, the final score of the game is $ a_3+b_5 $ .",
    "translation": "\u73b0\u6709\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 $a_1, a_2, \\dots, a_n$ \u548c $b_1, b_2, \\dots, b_m$\u3002\n\nAlice \u548c Bob \u5c06\u8981\u73a9\u4e00\u4e2a\u6e38\u620f\uff0cAlice \u5148\u624b\uff0c\u7136\u540e\u4ed6\u4eec\u8f6e\u6d41\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u4ed6\u4eec\u5728\u4e00\u4e2a $n\\times m$ \u7684\u7f51\u683c\u4e0a\u8fdb\u884c\u6e38\u620f\uff08\u7f51\u683c\u6709 $n$ \u6392 $m$ \u5217\uff09\u3002\u521a\u5f00\u59cb\uff0c\u6709\u4e00\u4e2a\u68cb\u5b50\u653e\u5728\u7f51\u683c\u7684\u4e00\u6392\u4e00\u5217\u4e0a\u3002\n\n\u5728 Alice \u6216 Bob \u8f6e\u6b21\u4e2d\uff0c\u73a9\u5bb6\u53ef\u4ee5\u9009\u62e9\u4ee5\u4e0b\u4e24\u4e2a\u52a8\u4f5c\u4e2d\u7684\u4e00\u4e2a\u8fdb\u884c\u64cd\u4f5c\uff1a\n\n1. \u5c06\u68cb\u5b50\u79fb\u52a8\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u683c\u5b50\u4e0a\uff0c\u8be5\u683c\u5b50\u5fc5\u987b\u548c\u68cb\u5b50\u7684\u539f\u4f4d\u7f6e\u5728\u540c\u6392\u6216\u8005\u540c\u5217\u4e0a\u3002\u73a9\u5bb6\u4e0d\u80fd\u5c06\u68cb\u5b50\u79fb\u52a8\u5230\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7 $1000$ \u6b21\u7684\u683c\u5b50\u4e0a\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6e38\u620f\u8fc7\u7a0b\u4e2d\uff0c\u68cb\u5b50\u6700\u591a\u53ef\u4ee5\u5728\u67d0\u4e2a\u683c\u5b50\u505c\u7559 $1000$ \u6b21\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u89c4\u5b9a\u8d77\u59cb\u5355\u5143\u683c\u5728\u5f00\u59cb\u65f6\u88ab\u89c6\u4f5c\u8bbf\u95ee\u8fc7\u4e00\u6b21\u3002\n2. \u4ee5 $a_r + b_c$ \u7684\u5f97\u5206\u7acb\u523b\u7ed3\u675f\u6e38\u620f\uff0c$(r, c)$ \u8868\u793a\u68cb\u5b50\u5f53\u524d\u6240\u5728\u7684\u5355\u5143\u683c\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u68cb\u5b50\u5728\u7b2c $r$ \u6392\u7b2c $c$ \u5217\u4e0a\uff09\u3002\n\nBob \u60f3\u8981\u6700\u5927\u5316\u81ea\u5df1\u7684\u5f97\u5206\uff0cAlice \u5219\u60f3\u8981\u6700\u5c0f\u5316\u81ea\u5df1\u7684\u5f97\u5206\u3002\u5982\u679c\u4ed6\u4eec\u90fd\u4ee5\u6700\u4f73\u65b9\u5f0f\u73a9\u8fd9\u4e2a\u6e38\u620f\uff0c\u5219\u6700\u7ec8\u7684\u5f97\u5206\u662f\u591a\u5c11\uff1f"
}