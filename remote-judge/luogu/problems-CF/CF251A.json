{
    "description": "Little Petya likes points a lot. Recently his mom has presented him $ n $ points lying on the line $ OX $ . Now Petya is wondering in how many ways he can choose three distinct points so that the distance between the two farthest of them doesn't exceed $ d $ .\n\nNote that the order of the points inside the group of three chosen points doesn't matter.",
    "inputFormat": "The first line contains two integers: $ n $ and $ d $ ( $ 1<=n<=10^{5};\u00a01<=d<=10^{9} $ ). The next line contains $ n $ integers $ x_{1},x_{2},...,x_{n} $ , their absolute value doesn't exceed $ 10^{9} $ \u2014 the $ x $ -coordinates of the points that Petya has got.\n\nIt is guaranteed that the coordinates of the points in the input strictly increase.",
    "outputFormat": "Print a single integer \u2014 the number of groups of three points, where the distance between two farthest points doesn't exceed $ d $ .\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.",
    "samples": [
        [
            "4 3\n1 2 3 4\n",
            "4\n"
        ],
        [
            "4 2\n-3 -2 -1 0\n",
            "2\n"
        ],
        [
            "5 19\n1 10 20 30 50\n",
            "1\n"
        ]
    ],
    "hint": "In the first sample any group of three points meets our conditions.\n\nIn the seconds sample only 2 groups of three points meet our conditions: {-3, -2, -1} and {-2, -1, 0}.\n\nIn the third sample only one group does: {1, 10, 20}.",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\nPetya\u5f88\u559c\u6b22\u70b9\u3002\u6700\u8fd1\uff0c\u4ed6\u7684\u5988\u5988\u7ed9\u4e86\u4ed6n\u4e2a\u4f4d\u4e8eOX\uff08\u5b9e\u6570\u8f74\uff09\u4e0a\u7684\u70b9\u3002\u73b0\u5728\uff0cPetya\u60f3\u77e5\u9053\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728\u6570\u8f74\u4e0a\u9009\u62e93\u4e2a\u4e0d\u540c\u70b9\uff0c\u4f7f3\u4e2a\u70b9\u4e2d\u8ddd\u79bb\u6700\u8fdc\u7684\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7d\u3002\n\n\u6ce8\u610f\uff1a\u4e09\u4e2a\u70b9\u7684\u6392\u5217\u987a\u5e8f\u662f\u65e0\u5173\u7d27\u8981\u7684\uff08\u610f\u601d\u5c31\u662f\u8bf4\uff0c\u4e09\u4e2a\u70b9\u662f\u76f8\u540c\u7684\uff0c\u4ea4\u6362\u987a\u5e8f\u4e5f\u53ea\u7b971\u79cd\uff09\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n###### \u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6570\uff1an\uff081<=n<=1e5\uff09d\uff081<=d<=1e9\uff09\u3002\u4e0b\u9762\u4e00\u884c\u5305\u542bn\u4e2a\u6574\u6570x1,x2,x3,x4...,xn\uff08\u7edd\u5bf9\u503c\u5c0f\u4e8e\u7b49\u4e8e1e9\uff09\uff0c\u8868\u793a\u5988\u5988\u7ed9Petya\u7684\u70b9\u7684\u5750\u6807\u3002\n\n\u4fdd\u8bc1\u5750\u6807\u6309\u7edd\u5bf9\u5347\u5e8f\u8f93\u5165\u3002\n\n###### \u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u2014\u2014\u2014\u2014\u9009\u51fa\u4e09\u4e2a\u6570\uff0c\u4f7f\u6700\u8fdc\u7684\u4e24\u4e2a\u6570\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7d\uff0c\u7684\u65b9\u6cd5\u6570\u3002\n\n\u5728C++\u4e2d\uff0c\u8bf7\u4e0d\u8981\u7528 %lld \u6765\u8bfb\u516564\u4f4d\u7684\u6574\u6570\u3002\u63a8\u8350\u4f7f\u7528 cin \u548c cout \u6216 %l64d \u6765\u8bfb\u5165\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n\uff08emmm\uff0c\u4e0d\u4f1a\u7528\u683c\u5f0f\uff0c\u4e0d\u5199\u8fdb\u6765\u4e86\uff09\n\n## \u8bf4\u660e\n\n\u5728\u6837\u4f8b\u4e00\u4e2d\uff0c\u4efb\u4f55\u6311\u9009\u65b9\u5f0f\u90fd\u662f\u53ef\u884c\u7684\u3002\n\n\u5728\u6837\u4f8b\u4e8c\u4e2d\u53ea\u6709{-3, -2, -1}\u548c{-2, -1, 0}\u662f\u53ef\u884c\u7684\u3002\n\n\u5728\u7b2c\u4e09\u4e2a\u6837\u4f8b\u4e2d\u53ea\u6709{1, 10, 20}\u662f\u53ef\u884c\u7684\u3002\n\n\u611f\u8c22@Spoiler_haiwenhan \u63d0\u4f9b\u7684\u7ffb\u8bd1"
}