{
    "description": "After all the events in Orlando we all know, Sasha and Roma decided to find out who is still the team's biggest loser. Thankfully, Masha found somewhere a revolver with a rotating cylinder of $ n $ bullet slots able to contain exactly $ k $ bullets, now the boys have a chance to resolve the problem once and for all.\n\nSasha selects any $ k $ out of $ n $ slots he wishes and puts bullets there. Roma spins the cylinder so that every of $ n $ possible cylinder's shifts is equiprobable. Then the game starts, the players take turns, Sasha starts: he puts the gun to his head and shoots. If there was no bullet in front of the trigger, the cylinder shifts by one position and the weapon is given to Roma for make the same move. The game continues until someone is shot, the survivor is the winner.\n\nSasha does not want to lose, so he must choose slots for bullets in such a way as to minimize the probability of its own loss. Of all the possible variant he wants to select the lexicographically minimal one, where an empty slot is lexicographically less than a charged one.\n\nMore formally, the cylinder of $ n $ bullet slots able to contain $ k $ bullets can be represented as a string of $ n $ characters. Exactly $ k $ of them are \"X\" (charged slots) and the others are \".\" (uncharged slots).\n\nLet us describe the process of a shot. Suppose that the trigger is in front of the first character of the string (the first slot). If a shot doesn't kill anyone and the cylinder shifts, then the string shifts left. So the first character becomes the last one, the second character becomes the first one, and so on. But the trigger doesn't move. It will be in front of the first character of the resulting string.\n\nAmong all the strings that give the minimal probability of loss, Sasha choose the lexicographically minimal one. According to this very string, he charges the gun. You have to help Sasha to charge the gun. For that, each $ x_{i} $ query must be answered: is there a bullet in the positions $ x_{i} $ ?",
    "inputFormat": "The first line contains three integers $ n $ , $ k $ and $ p $ ( $ 1<=n<=10^{18},0<=k<=n,1<=p<=1000 $ ) \u2014 the number of slots in the cylinder, the number of bullets and the number of queries. Then follow $ p $ lines; they are the queries. Each line contains one integer $ x_{i} $ ( $ 1<=x_{i}<=n $ ) the number of slot to describe.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in \u0421++. It is preferred to use cin, cout streams or the %I64d specificator.",
    "outputFormat": "For each query print \".\" if the slot should be empty and \"X\" if the slot should be charged.",
    "samples": [
        [
            "3 1 3\n1\n2\n3\n",
            "..X"
        ],
        [
            "6 3 6\n1\n2\n3\n4\n5\n6\n",
            ".X.X.X"
        ],
        [
            "5 2 5\n1\n2\n3\n4\n5\n",
            "...XX"
        ]
    ],
    "hint": "The lexicographical comparison of is performed by the < operator in modern programming languages. The $ a $ string is lexicographically less that the $ b $ string, if there exists such $ i $ ( $ 1<=i<=n $ ), that $ a_{i}&lt;b_{i} $ , and for any $ j $ ( $ 1<=j&lt;i $ ) $ a_{j}=b_{j} $ .",
    "translation": "\u5728Orlando\u53d1\u751f\u4e86\u6211\u4eec\u90fd\u77e5\u9053\u7684\u4e8b\u60c5\u4e4b\u540e\uff0cSasha\u548cRoma\u51b3\u5b9a\u627e\u51fa\u8c01\u4ecd\u7136\u662f\u7403\u961f\u6700\u5927\u7684\u8f93\u5bb6\u3002\u8c22\u5929\u8c22\u5730\uff0cMasha\u5728\u67d0\u4e2a\u5730\u65b9\u53d1\u73b0\u4e86\u4e00\u628a\u5de6\u8f6e\u624b\u67aa\uff0c\u5b83\u7684\u8f6c\u8f6e\u4e0a\u6709$n$\u4e2a\u5f39\u69fd\uff0c\u6070\u597d\u53ef\u4ee5\u88c5$k$\u4e2a\u5b50\u5f39\uff0c\u73b0\u5728\u7537\u5b69\u4eec\u6709\u673a\u4f1a\u4e00\u52b3\u6c38\u9038\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\r\n\r\nSasha\u4ece$n$\u4e2a\u5f39\u69fd\u4e2d\u9009\u62e9\u4efb\u610f$k$\u4e2a\uff0c\u7136\u540e\u628a\u5b50\u5f39\u653e\u5728\u90a3\u91cc\u3002Roma\u65cb\u8f6c\u8f6c\u8f6e\uff0c\u4f7f\u5f97\u8f6c\u8f6e\u7684$n$\u79cd\u4f4d\u7f6e\u90fd\u662f\u7b49\u6982\u7387\u7684\u3002\u7136\u540e\u6e38\u620f\u5f00\u59cb\uff0c\u73a9\u5bb6\u8f6e\u6d41\u64cd\u4f5c\uff0cSasha\u5148\u624b\uff1a\u4ed6\u628a\u67aa\u9876\u7740\u8111\u888b\u5f00\u67aa\u3002\u5982\u679c\u6273\u673a\u524d\u6ca1\u6709\u5b50\u5f39\uff0c\u8f6c\u8f6e\u4f1a\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u624b\u67aa\u4e5f\u4f1a\u4ea4\u7ed9Roma\uff0c\u8ba9Roma\u505a\u51fa\u540c\u6837\u7684\u52a8\u4f5c\u3002\u6e38\u620f\u4e00\u76f4\u6301\u7eed\u5230\u6709\u4eba\u4e2d\u67aa\uff0c\u5e78\u5b58\u8005\u5c31\u662f\u8d62\u5bb6\u3002\r\n\r\nSasha\u4e0d\u60f3\u8f93\uff0c\u6240\u4ee5\u4ed6\u5fc5\u987b\u9009\u62e9\u5b50\u5f39\u653e\u7f6e\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u624d\u80fd\u628a\u81ea\u5df1\u8f93\u7684\u6982\u7387\u964d\u5230\u6700\u4f4e\u3002\r\n\r\n\u66f4\u6b63\u5f0f\u5730\u8bf4\uff0c\u80fd\u591f\u5305\u542b$k$\u5b50\u5f39\u7684$n$\u5f39\u69fd\u7684\u5706\u67f1\u4f53\u53ef\u4ee5\u8868\u793a\u4e3a$n$\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u3002\u5176\u4e2d$k$\u4e2a\u662f\u201cX\u201d\uff08\u6709\u5b50\u5f39\uff09\uff0c\u5176\u4ed6\u662f\u201c.\u201d\uff08\u7a7a\u5f39\u69fd\uff09\u3002\u5b9a\u4e49\u201c.\u201d\u5b57\u5178\u5e8f\u5c0f\u4e8e\u201cX\u201d\uff0c\u5728\u6240\u6709\u53ef\u80fd\u7684\u65b9\u6848\u4e2d\uff0c\u4ed6\u5e0c\u671b\u9009\u62e9\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\r\n\r\n\u73b0\u5728\u7ed9\u51fa$p$\u4e2a\u8be2\u95ee\uff0c\u8981\u6c42\u4f60\u56de\u7b54\u5f39\u69fd$x$\u662f\u5426\u6709\u5b50\u5f39\u3002"
}