{
    "description": "Vasya, or Mr. Vasily Petrov is a dean of a department in a local university. After the winter exams he got his hands on a group's gradebook.\n\nOverall the group has $ n $ students. They received marks for $ m $ subjects. Each student got a mark from $ 1 $ to $ 9 $ (inclusive) for each subject.\n\nLet's consider a student the best at some subject, if there is no student who got a higher mark for this subject. Let's consider a student successful, if there exists a subject he is the best at.\n\nYour task is to find the number of successful students in the group.",
    "inputFormat": "The first input line contains two integers $ n $ and $ m $ ( $ 1<=n,m<=100 $ ) \u2014 the number of students and the number of subjects, correspondingly. Next $ n $ lines each containing $ m $ characters describe the gradebook. Each character in the gradebook is a number from $ 1 $ to $ 9 $ . Note that the marks in a rows are not sepatated by spaces.",
    "outputFormat": "Print the single number \u2014 the number of successful students in the given group.",
    "samples": [
        [
            "3 3\n223\n232\n112\n",
            "2\n"
        ],
        [
            "3 5\n91728\n11828\n11111\n",
            "3\n"
        ]
    ],
    "hint": "In the first sample test the student number $ 1 $ is the best at subjects $ 1 $ and $ 3 $ , student $ 2 $ is the best at subjects $ 1 $ and $ 2 $ , but student $ 3 $ isn't the best at any subject.\n\nIn the second sample test each student is the best at at least one subject.",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\n\u603b\u7684\u6765\u8bf4\uff0c\u8fd9\u4e2a\u5c0f\u7ec4\u6709$N$\u4e2a\u5b66\u751f\u3002\u4ed6\u4eec\u83b7\u5f97\u4e86$M$\u79d1\u76ee\u7684\u5206\u6570\u3002\u6bcf\u4e2a\u5b66\u751f\u4ece\u6bcf\u4e2a\u79d1\u76ee\u7684$1$\u5206\u5230$9$\u5206\uff08\u5305\u62ec$1$\u5206\uff09\u5f97\u4e86\u4e00\u5206\u3002\n\n\u5982\u679c\u6ca1\u6709\u5b66\u751f\u5728\u8fd9\u4e2a\u79d1\u76ee\u4e0a\u83b7\u5f97\u66f4\u9ad8\u7684\u5206\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u4e2a\u5b66\u79d1\u8fd9\u4e2a\u5b66\u751f\u662f\u6700\u64c5\u957f\u7684\u3002\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u4ed6\u6700\u64c5\u957f\u7684\u5b66\u79d1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b66\u751f\u5c31\u662f\u6210\u529f\u7684\u3002\n\n\u4f60\u7684\u4efb\u52a1\u662f\u627e\u51fa\u5c0f\u7ec4\u4e2d\u6210\u529f\u5b66\u751f\u7684\u4eba\u6570\u3002\n\n ### \u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u4e2a\u8f93\u5165\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570$N$\u548c$M$\uff08$1\\leq N,M\\leq100$\uff09\u2014 \u5bf9\u5e94\u5b66\u751f\u7684\u6570\u91cf\u548c\u79d1\u76ee\u7684\u6570\u76ee\u3002\u63a5\u4e0b\u6765\u7684$N$\u884c\u6bcf\u884c\u5305\u542b$M$\u4e2a\u5b57\u7b26\u63cf\u8ff0\u7684\u6210\u7ee9\u5355\u3002\u5728\u6210\u7ee9\u5355\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u662f\u4e00\u4e2a\u4ece$1$\u5230$9$\u7684\u6570\u5b57\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e9b\u6570\u5b57\u6ca1\u6709\u88ab\u7a7a\u683c\u5206\u5f00\u3002\n\n ### \u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u4e00\u4e2a\u6570\u5b57 \u2014 \u5728\u88ab\u7ed9\u7684\u8fd9\u4e2a\u5c0f\u7ec4\u4e2d\u6700\u597d\u7684\u5b66\u751f\u7684\u6570\u91cf\n\n\u8bf4\u660e\n\n\u5728\u7b2c\u4e00\u4e2a\u6837\u4f8b\u4e2d\uff0c$1$\u53f7\u5b66\u751f\u662f\u6700\u597d\u7684\u79d1\u76ee\u662f$1$\u548c$3$\uff0c$2$\u53f7\u5b66\u751f\u662f\u6700\u597d\u7684\u79d1\u76ee$1$\u548c$2$\uff0c\u4f46$3$\u53f7\u5b66\u751f\u6ca1\u6709\u4efb\u4f55\u79d1\u76ee\u6700\u597d\u3002\n\n\u5728\u7b2c\u4e8c\u4e2a\u6837\u4f8b\u4e2d\uff0c\u6bcf\u4e2a\u5b66\u751f\u81f3\u5c11\u6709\u4e00\u4e2a\u79d1\u76ee\u662f\u6700\u597d\u7684\u3002\n\nTranslated by Khassar"
}