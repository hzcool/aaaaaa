{
    "description": "Vanya is in the palace that can be represented as a grid $ n\u00d7m $ . Each room contains a single chest, an the room located in the $ i $ -th row and $ j $ -th columns contains the chest of type $ a_{ij} $ . Each chest of type $ x<=p-1 $ contains a key that can open any chest of type $ x+1 $ , and all chests of type $ 1 $ are not locked. There is exactly one chest of type $ p $ and it contains a treasure.\n\nVanya starts in cell $ (1,1) $ (top left corner). What is the minimum total distance Vanya has to walk in order to get the treasure? Consider the distance between cell $ (r_{1},c_{1}) $ (the cell in the row $ r_{1} $ and column $ c_{1} $ ) and $ (r_{2},c_{2}) $ is equal to $ |r_{1}-r_{2}|+|c_{1}-c_{2}| $ .",
    "inputFormat": "The first line of the input contains three integers $ n $ , $ m $ and $ p $ ( $ 1<=n,m<=300,1<=p<=n\u00b7m $ ) \u2014 the number of rows and columns in the table representing the palace and the number of different types of the chests, respectively.\n\nEach of the following $ n $ lines contains $ m $ integers $ a_{ij} $ ( $ 1<=a_{ij}<=p $ ) \u2014 the types of the chests in corresponding rooms. It's guaranteed that for each $ x $ from $ 1 $ to $ p $ there is at least one chest of this type (that is, there exists a pair of $ r $ and $ c $ , such that $ a_{rc}=x $ ). Also, it's guaranteed that there is exactly one chest of type $ p $ .",
    "outputFormat": "Print one integer \u2014 the minimum possible total distance Vanya has to walk in order to get the treasure from the chest of type $ p $ .",
    "samples": [
        [
            "3 4 3\n2 1 1 1\n1 1 1 1\n2 1 1 3\n",
            "5\n"
        ],
        [
            "3 3 9\n1 3 5\n8 9 7\n4 6 2\n",
            "22\n"
        ],
        [
            "3 4 12\n1 2 3 4\n8 7 6 5\n9 10 11 12\n",
            "11\n"
        ]
    ],
    "hint": "",
    "translation": "\u9898\u610f\uff1a\u7ed9\u4e00\u4e2an*m\u7684\u56fe\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6709\u4e00\u4e2a1\u5230p\u7684\u6570\u5b57\uff08\u53ea\u6709\u4e00\u4e2ap\uff0c\u5176\u4ed6\u6570\u5b57\u53ef\u4ee5\u5f88\u591a\uff09\uff0c\u4e14\u6bcf\u4e2a\u4f4d\u7f6e\u6709\u4e00\u628a\u9501\uff0c\u6bcf\u4e2a\u6570\u5b57\u7684\u9501\u6709\u6253\u5f00\u5f53\u524d\u6570\u5b57+1\u7684\u94a5\u5319\u3002\u8d77\u70b9\u4e3a\uff081\uff0c1\uff09\uff0c\u6570\u5b57\u4e3a1\u7684\u683c\u5b50\u90fd\u662f\u89e3\u9501\u7684\uff0c\u95ee\u8d70\u5230\u6570\u5b57p\u6700\u5c11\u8d70\u591a\u5c11\u6b65\u3002\u4e00\u4e2a\u70b9\u5230\u53e6\u5916\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e3aabs(x2-x1)+abs(y2-y1)\u3002\n"
}