{
    "description": "This problem is interactive.\n\nWe decided to play a game with you and guess the number $ x $ ( $ 1 \\le x < n $ ), where you know the number $ n $ .\n\nYou can make queries like this:\n\n- + c: this command assigns $ x = x + c $ ( $ 1 \\le c < n $ ) and then returns you the value $ \\lfloor\\frac{x}{n}\\rfloor $ ( $ x $ divide by $ n $ and round down).\n\nYou win if you guess the current number with no more than $ 10 $ queries.",
    "inputFormat": "",
    "outputFormat": "The interaction begins by reading an integer $ n $ ( $ 2 < n \\le 1000 $ ), which is written in the input data on its own line.\n\nThen you can make no more than $ 10 $ queries. To make a query, print on a separate line:\n\n- + c: this command will assign $ x = x + c $ ( $ 1 \\le c < n $ ) and then print $ \\lfloor\\frac{x}{n}\\rfloor $ (divide $ x $ by $ n $ and round down) on a separate line.\n\nPrint the answer, like the queries, on a separate line. The answer doesn't count in number of queries. To output it, use the following format:\n\n- ! x: the current value of $ x $ .\n\nAfter that, your program should exit.\n\nYou have to use a flush operation right after printing each line. For example, in C++ you should use the function fflush(stdout), in Java \u2014 System.out.flush(), in Pascal \u2014 flush(output) and in Python \u2014 sys.stdout.flush().\n\nNote that the interactor is not responsive.\n\nTo make a hack, use the following format: a single line must contain two numbers $ x $ and $ n $ , separated by a space.",
    "samples": [
        [
            "3\n\n1",
            "+ 1\n\n! 3"
        ],
        [
            "5\n\n0\n\n0\n\n1",
            "+ 1\n\n+ 1\n\n+ 1\n\n! 5"
        ],
        [
            "10\n\n0\n\n0\n\n1\n\n2",
            "+ 2\n\n+ 2\n\n+ 3\n\n+ 8\n\n! 20"
        ]
    ],
    "hint": "In the first sample initially $ x = 2 $ . After the first query $ x = 3 $ , $ \\lfloor\\frac{x}{n}\\rfloor = 1 $ .\n\nIn the second sample also initially $ x = 2 $ . After the first query $ x = 3 $ , $ \\lfloor\\frac{x}{n}\\rfloor = 0 $ . After the second query $ x = 4 $ , $ \\lfloor\\frac{x}{n}\\rfloor = 0 $ . After the third query $ x=5 $ , $ \\lfloor\\frac{x}{n}\\rfloor = 1 $ .",
    "translation": "\u6709\u4e00\u4e2a\u672a\u77e5\u7684\u6570\u5b57 $x$\uff0c\u4f46\u5df2\u77e5 $1\\le x < n$ \u4e14 $2 < n\\le 10^3$\u3002\u53ef\u4ee5\u5411\u4ea4\u4e92\u5e93\u63d0\u51fa\u8be2\u95ee\uff1a\n\n- `+ c`\uff1a\u4f7f $x\\gets x+c$\uff0c\u5e76\u8fd4\u56de\u64cd\u4f5c\u540e $\\lfloor\\frac{x}{n}\\rfloor$ \u7684\u503c\u3002\u5fc5\u987b\u4fdd\u8bc1 $1\\le c < n$\u3002\n\n\u5728\u4e0d\u8d85\u8fc7 $10$ \u6b21\u8be2\u95ee\u540e\uff0c\u9700\u8981\u7ed9\u51fa\u7b54\u6848\uff1a\n\n- `! x`\uff1a\u8868\u793a\u4f60\u5f97\u5230\u4e86**\u73b0\u5728** $x$ \u7684\u503c\u3002"
}