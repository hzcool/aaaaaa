{
    "description": "You are given a matrix $ f $ with $ 4 $ rows and $ n $ columns. Each element of the matrix is either an asterisk (\\*) or a dot (.).\n\nYou may perform the following operation arbitrary number of times: choose a square submatrix of $ f $ with size $ k\u00d7k $ (where $ 1<=k<=4 $ ) and replace each element of the chosen submatrix with a dot. Choosing a submatrix of size $ k\u00d7k $ costs $ a_{k} $ coins.\n\nWhat is the minimum number of coins you have to pay to replace all asterisks with dots?",
    "inputFormat": "The first line contains one integer $ n $ ( $ 4<=n<=1000 $ ) \u2014 the number of columns in $ f $ .\n\nThe second line contains $ 4 $ integers $ a_{1} $ , $ a_{2} $ , $ a_{3} $ , $ a_{4} $ ( $ 1<=a_{i}<=1000 $ ) \u2014 the cost to replace the square submatrix of size $ 1\u00d71 $ , $ 2\u00d72 $ , $ 3\u00d73 $ or $ 4\u00d74 $ , respectively.\n\nThen four lines follow, each containing $ n $ characters and denoting a row of matrix $ f $ . Each character is either a dot or an asterisk.",
    "outputFormat": "Print one integer \u2014 the minimum number of coins to replace all asterisks with dots.",
    "samples": [
        [
            "4\n1 10 8 20\n***.\n***.\n***.\n...*\n",
            "9\n"
        ],
        [
            "7\n2 1 8 2\n.***...\n.***..*\n.***...\n....*..\n",
            "3\n"
        ],
        [
            "4\n10 10 1 10\n***.\n*..*\n*..*\n.***\n",
            "2\n"
        ]
    ],
    "hint": "In the first example you can spend $ 8 $ coins to replace the submatrix $ 3\u00d73 $ in the top-left corner, and $ 1 $ coin to replace the $ 1\u00d71 $ submatrix in the bottom-right corner.\n\nIn the second example the best option is to replace the $ 4\u00d74 $ submatrix containing columns $ 2\u20135 $ , and the $ 2\u00d72 $ submatrix consisting of rows $ 2\u20133 $ and columns $ 6\u20137 $ .\n\nIn the third example you can select submatrix $ 3\u00d73 $ in the top-left corner and then submatrix $ 3\u00d73 $ consisting of rows $ 2\u20134 $ and columns $ 2\u20134 $ .",
    "translation": "\n\n\u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a4\u00d7n\u7684\u5143\u7d20\u53ea\u4e3a'*'\u6216'.'\u7684\u77e9\u9635f\n\n\u4f60\u53ef\u4ee5\u4e0d\u65ad\u5730\u9009\u62e9\u4e00\u4e2af\u7684\u5b50\u65b9\u9635,\u5e76\u5c06\u65b9\u9635\u7684\u5143\u7d20\u90fd\u53d8\u4e3a'.'\n\n\u9009\u62e9\u4e00\u4e2ak\u00d7k\u7684\u65b9\u9635\u9700\u8981\u4ee3\u4ef7$a_k$\u200b\u3002\n\n\u95ee\u6700\u5c11\u8981\u591a\u5c11\u4ee3\u4ef7,\u624d\u80fd\u5c06\u6240\u6709\u5143\u7d20\u90fd\u53d8\u4e3a'.'\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570n\u2014\u2014\u77e9\u9635f\u4e2d\u7684\u5217\u6570\n\n\u7b2c\u4e8c\u884c\u5305\u542b\u56db\u4e2a\u6574\u6570$a_1,a_2,a_3,a_4(1\u2264a_i\u22641000)$\u5206\u522b\u4e3a\u8986\u76d6\u4e00\u4e2a1\u00d71,2\u00d72,3\u00d73,4\u00d74\u5b50\u77e9\u9635\u7684\u6210\u672c\n\n\u63a5\u4e0b\u6765\u7684\u56db\u884c\uff0c\u6bcf\u884c\u5305\u542bn\u4e2a\u5b57\u7b26\uff0c\u8868\u793a\u77e9\u9635f\u4e2d\u7684\u4e00\u884c\uff0c\u6bcf\u4e2a\u5b57\u7b26\u5747\u4e3a'.'\u6216\u8005'*'\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u2014\u2014\u7528\u539f\u77e9\u9635\u6240\u6709\u5143\u7d20\u53d8\u4e3a'.'\u7684\u6700\u5c0f\u6210\u672c\n\nTranslated by League\u4e36\u7fce\n"
}