{
    "description": "Cat Furrier Transform is a popular algorithm among cat programmers to create longcats. As one of the greatest cat programmers ever exist, Neko wants to utilize this algorithm to create the perfect longcat.\n\nAssume that we have a cat with a number $ x $ . A perfect longcat is a cat with a number equal $ 2^m - 1 $ for some non-negative integer $ m $ . For example, the numbers $ 0 $ , $ 1 $ , $ 3 $ , $ 7 $ , $ 15 $ and so on are suitable for the perfect longcats.\n\nIn the Cat Furrier Transform, the following operations can be performed on $ x $ :\n\n- (Operation A): you select any non-negative integer $ n $ and replace $ x $ with $ x \\oplus (2^n - 1) $ , with $ \\oplus $ being a [bitwise XOR operator](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n- (Operation B): replace $ x $ with $ x + 1 $ .\n\nThe first applied operation must be of type A, the second of type B, the third of type A again, and so on. Formally, if we number operations from one in the order they are executed, then odd-numbered operations must be of type A and the even-numbered operations must be of type B.\n\nNeko wants to produce perfect longcats at industrial scale, thus for each cat Neko only wants to perform at most $ 40 $ operations. Can you help Neko writing a transformation plan?\n\nNote that it is not required to minimize the number of operations. You just need to use no more than $ 40 $ operations.",
    "inputFormat": "The only line contains a single integer $ x $ ( $ 1 \\le x \\le 10^6 $ ).",
    "outputFormat": "The first line should contain a single integer $ t $ ( $ 0 \\le t \\le 40 $ ) \u2014 the number of operations to apply.\n\nThen for each odd-numbered operation print the corresponding number $ n_i $ in it. That is, print $ \\lceil \\frac{t}{2} \\rceil $ integers $ n_i $ ( $ 0 \\le n_i \\le 30 $ ), denoting the replacement $ x $ with $ x \\oplus (2^{n_i} - 1) $ in the corresponding step.\n\nIf there are multiple possible answers, you can print any of them. It is possible to show, that there is at least one answer in the constraints of this problem.",
    "samples": [
        [
            "39\n",
            "4\n5 3 "
        ],
        [
            "1\n",
            "0\n"
        ],
        [
            "7\n",
            "0\n"
        ]
    ],
    "hint": "In the first test, one of the transforms might be as follows: $ 39 \\to 56 \\to 57 \\to 62 \\to 63 $ . Or more precisely:\n\n1. Pick $ n = 5 $ . $ x $ is transformed into $ 39 \\oplus 31 $ , or $ 56 $ .\n2. Increase $ x $ by $ 1 $ , changing its value to $ 57 $ .\n3. Pick $ n = 3 $ . $ x $ is transformed into $ 57 \\oplus 7 $ , or $ 62 $ .\n4. Increase $ x $ by $ 1 $ , changing its value to $ 63 = 2^6 - 1 $ .\n\nIn the second and third test, the number already satisfies the goal requirement.",
    "translation": "\u7ed9\u4e00\u4e2a\u6570$n$\uff0c\u6709\u4e24\u4e2a\u64cd\u4f5c\n\n1. `n^=(1<<k)-1` \uff08$k$\u5fc5\u987b\u662f\u6b63\u6574\u6570\uff09\n\n2. `n++`\n\n\u5fc5\u987b\u6309`12121...`\u64cd\u4f5c\uff0c\u95ee\u6700\u5c11\u51e0\u6b21\u53ef\u4ee5\u5c06$n$\u53d8\u4e3a$2^k-1$\uff08$k$\u5fc5\u987b\u662f\u6b63\u6574\u6570\uff09"
}