{
    "description": "You are given a <a>tree</a> with $ n $ vertices; its root is vertex $ 1 $ . Also there is a token, initially placed in the root. You can move the token to other vertices. Let's assume current vertex of token is $ v $ , then you make any of the following two possible moves:\n\n- move down to any leaf in subtree of $ v $ ;\n- if vertex $ v $ is a leaf, then move up to the parent no more than $ k $ times. In other words, if $ h(v) $ is the depth of vertex $ v $ (the depth of the root is $ 0 $ ), then you can move to vertex $ to $ such that $ to $ is an ancestor of $ v $ and $ h(v) - k \\le h(to) $ .\n\nConsider that root is not a leaf (even if its degree is $ 1 $ ). Calculate the maximum number of different leaves you can visit during one sequence of moves.",
    "inputFormat": "The first line contains two integers $ n $ and $ k $ ( $ 1 \\le k < n \\le 10^6 $ ) \u2014 the number of vertices in the tree and the restriction on moving up, respectively.\n\nThe second line contains $ n - 1 $ integers $ p_2, p_3, \\dots, p_n $ , where $ p_i $ is the parent of vertex $ i $ .\n\nIt is guaranteed that the input represents a valid tree, rooted at $ 1 $ .",
    "outputFormat": "Print one integer \u2014 the maximum possible number of different leaves you can visit.",
    "samples": [
        [
            "7 1\n1 1 3 3 4 4\n",
            "4\n"
        ],
        [
            "8 2\n1 1 2 3 4 5 5\n",
            "2\n"
        ]
    ],
    "hint": "The graph from the first example:\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1065F/4492bbb0d034205ea39166c1307fdf5f1ba770f6.png)One of the optimal ways is the next one: $ 1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 5 \\rightarrow 3 \\rightarrow 7 \\rightarrow 4 \\rightarrow 6 $ .\n\nThe graph from the second example:\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1065F/e11448008e64eca6a39a266818c29c10e5e679a8.png)One of the optimal ways is the next one: $ 1 \\rightarrow 7 \\rightarrow 5 \\rightarrow 8 $ . Note that there is no way to move from $ 6 $ to $ 7 $ or $ 8 $ and vice versa.",
    "translation": "\u4f60\u6709\u4e00\u68f5\u5e26\u6709n\u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6839\u662f\u7ed3\u70b91\u3002\u6709\u4e00\u4e2a\u6807\u8bb0\uff0c\u6700\u521d\u5728\u6839\u7ed3\u70b9\u5904\u3002\u4f60\u53ef\u4ee5\u5c06\u6807\u8bb0\u79fb\u52a8\u5230\u5176\u4ed6\u7ed3\u70b9\u5904\u3002\u5047\u8bbe\u6807\u8bb0\u5f53\u524d\u6240\u5728\u7ed3\u70b9\u4e3av\uff0c\u4f60\u53ef\u4ee5\u505a\u51fa\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n\u5c06\u6807\u8bb0\u79fb\u52a8\u5230v\u5b50\u6811\u7684\u4efb\u4e00\u53f6\u5b50\u5904\u3002\n\n\u5982\u679c\u662f\u7ed3\u70b9v\u4e3a\u53f6\u5b50\uff0c\u5219\u5c06\u6807\u8bb0\u5411\u6839\u79fb\u52a8\u4e0d\u8d85\u8fc7 k \u6b21\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c h(v) \u4e3a\u7ed3\u70b9 v \u7684\u6df1\u5ea6 (\u6839\u7684\u6df1\u5ea6\u4e3a0\uff09\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u79fb\u52a8\u5230\u9876\u70b9 to \uff08 to \u4e3a v \u7956\u5148\uff09 \u5e76\u4e14 h(v)\u2212k\u2264h(to)\u3002\n\n\u6839\u4e0d\u662f\u53f6\u5b50\uff08\u5373\u4f7f\u5b83\u7684\u5ea6\u6570\u662f 1\uff09\u3002\u8ba1\u7b97\u6700\u591a\u80fd\u8bbf\u95ee\u591a\u5c11\u53f6\u5b50\u3002\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n \u548c k (1<k<n\u226410^6) --- \u6811\u4e2d\u7684\u9876\u70b9\u6570\u548c\u5411\u4e0a\u79fb\u52a8\u7684\u9650\u5236\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542b n-1\u4e2a\u6574\u6570 \u7b2ci\u4e2a\u6574\u6570\u8868\u793a\u7ed3\u70b9i+1\u7684\u7236\u4eb2 \u8f93\u5165\u4fdd\u8bc1\u6811\u5408\u6cd5\uff0c\u6839\u4e3a1\u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u53ef\u4ee5\u8bbf\u95ee\u7684\u6700\u5927\u53f6\u5b50\u6570\u3002"
}