{
    "description": "Hanh lives in a shared apartment. There are $ n $ people (including Hanh) living there, each has a private fridge.\n\n $ n $ fridges are secured by several steel chains. Each steel chain connects two different fridges and is protected by a digital lock. The owner of a fridge knows passcodes of all chains connected to it. A fridge can be open only if all chains connected to it are unlocked. For example, if a fridge has no chains connected to it at all, then any of $ n $ people can open it.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1255B/c49a08cc55e4ecef72de681c432c15547c42e2dc.png)For exampe, in the picture there are $ n=4 $ people and $ 5 $ chains. The first person knows passcodes of two chains: $ 1-4 $ and $ 1-2 $ . The fridge $ 1 $ can be open by its owner (the person $ 1 $ ), also two people $ 2 $ and $ 4 $ (acting together) can open it.The weights of these fridges are $ a_1, a_2, \\ldots, a_n $ . To make a steel chain connecting fridges $ u $ and $ v $ , you have to pay $ a_u + a_v $ dollars. Note that the landlord allows you to create multiple chains connecting the same pair of fridges.\n\nHanh's apartment landlord asks you to create exactly $ m $ steel chains so that all fridges are private. A fridge is private if and only if, among $ n $ people living in the apartment, only the owner can open it (i.e. no other person acting alone can do it). In other words, the fridge $ i $ is not private if there exists the person $ j $ ( $ i \\ne j $ ) that the person $ j $ can open the fridge $ i $ .\n\nFor example, in the picture all the fridges are private. On the other hand, if there are $ n=2 $ fridges and only one chain (which connects them) then both fridges are not private (both fridges can be open not only by its owner but also by another person).\n\nOf course, the landlord wants to minimize the total cost of all steel chains to fulfill his request. Determine whether there exists any way to make exactly $ m $ chains, and if yes, output any solution that minimizes the total cost.",
    "inputFormat": "Each test contains multiple test cases. The first line contains the number of test cases $ T $ ( $ 1 \\le T \\le 10 $ ). Then the descriptions of the test cases follow.\n\nThe first line of each test case contains two integers $ n $ , $ m $ ( $ 2 \\le n \\le 1000 $ , $ 1 \\le m \\le n $ ) \u2014 the number of people living in Hanh's apartment and the number of steel chains that the landlord requires, respectively.\n\nThe second line of each test case contains $ n $ integers $ a_1, a_2, \\ldots, a_n $ ( $ 0 \\le a_i \\le 10^4 $ ) \u2014 weights of all fridges.",
    "outputFormat": "For each test case:\n\n- If there is no solution, print a single integer $ -1 $ .\n- Otherwise, print a single integer $ c $ \u2014 the minimum total cost. The $ i $ -th of the next $ m $ lines contains two integers $ u_i $ and $ v_i $ ( $ 1 \\le u_i, v_i \\le n $ , $ u_i \\ne v_i $ ), meaning that the $ i $ -th steel chain connects fridges $ u_i $ and $ v_i $ . An arbitrary number of chains can be between a pair of fridges.\n\nIf there are multiple answers, print any.",
    "samples": [
        [
            "3\n4 4\n1 1 1 1\n3 1\n1 2 3\n3 3\n1 2 3\n",
            "8\n1 2\n4 3\n3 2\n4 1\n-1\n12\n3 2\n1 2\n3 1"
        ]
    ],
    "hint": "",
    "translation": "## \u9898\u610f\u7ffb\u8bd1\r\n\r\n\u73b0\u5728\u6709$n$\u4eba\uff0c\u6bcf\u4eba\u90fd\u62e5\u67091\u4e2a\u51b0\u7bb1\u3002\u73b0\u63d0\u4f9b$m$\u6761\u94c1\u94fe\uff0c\u6bcf\u6761\u94c1\u94fe\u53ef\u4ee5\u8fde\u63a5\u4e24\u4e2a\u51b0\u7bb1\uff0c\u4e14\u53ea\u6709\u8fd9\u4e24\u4e2a\u51b0\u7bb1\u7684\u4e3b\u4eba\u53ef\u4ee5\u89e3\u9501\u8fd9\u6761\u94c1\u94fe\u3002\r\n\r\n\u53ea\u6709\u51b0\u7bb1\u4e0a\u6240\u6709\u94c1\u94fe\u90fd\u88ab\u89e3\u9501\u540e\uff0c\u624d\u80fd\u6253\u5f00\u8fd9\u4e2a\u51b0\u7bb1\uff0c\u5982\u679c\u4e00\u4e2a\u51b0\u7bb1\u88ab\u94c1\u94fe\u52a0\u56fa\u540e\u53ea\u6709\u5b83\u7684\u4e3b\u4eba\u53ef\u4ee5\u72ec\u81ea\u6253\u5f00\u5b83\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2a\u51b0\u7bb1\u662f\u201c\u79c1\u6709\u7684\u201d\u3002\r\n\r\n\u53e6\u5916\uff0c\u5982\u679c\u53ea\u67092\u4e2a\u51b0\u7bb1\uff0c\u90a3\u4e48\u65e0\u8bba\u6709\u591a\u5c11\u6761\u94c1\u94fe\uff0c\u4e24\u4e2a\u51b0\u7bb1\u90fd\u4e0d\u662f\u201c\u79c1\u6709\u7684\u201d\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u4eba\u90fd\u53ef\u4ee5\u72ec\u81ea\u6253\u5f00\u5bf9\u65b9\u7684\u51b0\u7bb1\u3002\r\n\r\n\u5728\u56fe\u4f8b\u4e2d\u67094\u4e2a\u51b0\u7bb1\u548c5\u6761\u94c1\u94fe\uff0c\u6240\u6709\u51b0\u7bb1\u90fd\u662f\u201c\u79c1\u6709\u7684\u201d\u30021\u53f7\u51b0\u7bb1\u7684\u4e3b\u4eba\u53ef\u4ee5\u89e3\u9501\u8fde\u63a51-2\u548c\u8fde\u63a51-4\u7684\u94c1\u94fe\uff0c1\u53f7\u51b0\u7bb1\u53ea\u80fd\u88ab\u5b83\u7684\u4e3b\u4eba\u72ec\u81ea\u6253\u5f00\uff0c\u6216\u8005\u88ab2\u53f7\u548c4\u53f7\u540c\u65f6\u6253\u5f00\u3002\r\n\r\n\u6bcf\u4e2a\u51b0\u7bb1\u90fd\u6709\u4e00\u4e2a\u91cd\u91cf\uff0c\u8bb0\u4e3a$a_1,a_2,a_3,\\ldots,a_n$\u3002\u5982\u679c\u8981\u7ed9u\u53f7\u548cv\u53f7\u51b0\u7bb1\u7528\u94c1\u94fe\u52a0\u56fa\uff0c\u9700\u8981\u82b1\u8d39$a_u+a_v$\u5143\u3002\u4e24\u4e2a\u51b0\u7bb1\u4e4b\u95f4\u53ef\u4ee5\u6709\u591a\u6761\u94c1\u94fe\u52a0\u56fa\u3002\r\n\r\n\u8bf7\u6c42\u51fa\uff0c\u5728\u5c06$m$\u6761\u94c1\u94fe\u5168\u90e8\u88ab\u4f7f\u7528\u540e\uff0c\u6240\u6709\u51b0\u7bb1\u662f\u5426\u53ef\u80fd\u5747\u4e3a\u201c\u79c1\u6709\u7684\u201d\uff0c\u5982\u679c\u53ef\u80fd\uff0c\u90a3\u4e48\u6c42\u51fa\u6700\u5c0f\u82b1\u8d39\u662f\u591a\u5c11\u3002\r\n\r\n## \u8f93\u5165\u683c\u5f0f\r\n\r\n**\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e**\r\n\r\n\u7b2c\u4e00\u884c\u8f93\u5165\u6570\u636e\u7ec4\u6570$T$($1 \\le T \\le 10$)\uff0c\u63a5\u4e0b\u6765\u8f93\u5165$T$\u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a\r\n\r\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570$n,m$($2 \\le n \\le 1000,1 \\le m \\le n $)\uff0c\u5206\u522b\u4ee3\u8868\u4eba\u6570\u548c\u94c1\u94fe\u6570\u91cf\u3002\r\n\r\n\u7b2c\u4e8c\u884c\u5305\u542b$n$\u4e2a\u6574\u6570$a_1,a_2,a_3,\\ldots,a_n$($0 \\le a_i \\le 1000$)\uff0c\u4ee3\u8868\u6bcf\u4e2a\u51b0\u7bb1\u7684\u91cd\u91cf\u3002\r\n\r\n## \u8f93\u51fa\u683c\u5f0f\r\n\r\n\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a\r\n\r\n- \u5982\u679c\u4e0d\u80fd\u4f7f\u6bcf\u4e2a\u51b0\u7bb1\u90fd\u662f\u201c\u79c1\u6709\u7684\u201d\uff0c\u8f93\u51fa-1\u3002\r\n\r\n- \u5426\u5219\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570$c$\uff0c\u4ee3\u8868\u6700\u5c0f\u82b1\u8d39\u3002\u63a5\u4e0b\u6765\u6bcf\u884c\uff0c\u5bf9\u4e8e\u7b2c$i$\u884c\uff0c\u8f93\u51fa\u7b2c$i$\u6761\u94c1\u94fe\u8fde\u63a5\u7684\u4e24\u4e2a\u51b0\u7bb1\u3002\u4e24\u4e2a\u51b0\u7bb1\u4e4b\u95f4\u53ef\u4ee5\u6709\u4efb\u610f\u591a\u7684\u94c1\u94fe\u76f8\u8fde\u3002\r\n\r\n\u5982\u679c\u7b54\u6848\u4e0d\u552f\u4e00\uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u7ec4\u3002\r\n"
}