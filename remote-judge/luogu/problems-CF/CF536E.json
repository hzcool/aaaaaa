{
    "description": "Tavas lives in Tavaspolis. Tavaspolis has $ n $ cities numbered from $ 1 $ to $ n $ connected by $ n-1 $ bidirectional roads. There exists a path between any two cities. Also each road has a length.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF536E/d3484f8e760e70be37b15d454f75fce51db0bf40.png)Tavas' favorite strings are binary strings (they contain only 0 and 1). For any binary string like $ s=s_{1}s_{2}...\\ s_{k} $ , $ T(s) $ is its $ Goodness $ . $ T(s) $ can be calculated as follows:\n\nConsider there are exactly $ m $ blocks of $ 1 $ s in this string (a block of $ 1 $ s in $ s $ is a maximal consecutive substring of $ s $ that only contains $ 1 $ ) with lengths $ x_{1},x_{2},...,x_{m} $ .\n\nDefine ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF536E/355506c834e033a7323a71320e8c5f755ccad647.png) where $ f $ is a given sequence (if $ m=0 $ , then $ T(s)=0 $ ).\n\nTavas loves queries. He asks you to answer $ q $ queries. In each query he gives you numbers $ v,u,l $ and you should print following number:\n\nConsider the roads on the path from city $ v $ to city $ u $ : $ e_{1},e_{2},...,e_{x} $ .\n\nBuild the binary string $ b $ of length $ x $ such that: $ b_{i}=1 $ if and only if $ l<=w(e_{i}) $ where $ w(e) $ is the length of road $ e $ .\n\nYou should print $ T(b) $ for this query.",
    "inputFormat": "The first line of input contains integers $ n $ and $ q $ ( $ 2<=n<=10^{5} $ and $ 1<=q<=10^{5} $ ).\n\nThe next line contains $ n-1 $ space separated integers $ f_{1},f_{2},...,f_{n-1} $ ( $ |f_{i}|<=1000 $ ).\n\nThe next $ n-1 $ lines contain the details of the roads. Each line contains integers $ v,u $ and $ w $ and it means that there's a road between cities $ v $ and $ u $ of length $ w $ ( $ 1<=v,u<=n $ and $ 1<=w<=10^{9} $ ).\n\nThe next $ q $ lines contain the details of the queries. Each line contains integers $ v,u,l $ ( $ 1<=v,u<=n $ , $ v\u2260u $ and $ 1<=l<=10^{9} $ ).",
    "outputFormat": "Print the answer of each query in a single line.",
    "samples": [
        [
            "2 3\n10\n1 2 3\n1 2 2\n1 2 3\n1 2 4\n",
            "10\n10\n0\n"
        ],
        [
            "6 6\n-5 0 0 2 10\n1 2 1\n2 3 2\n3 4 5\n4 5 1\n5 6 5\n1 6 1\n1 6 2\n1 6 5\n3 6 5\n4 6 4\n1 4 2\n",
            "10\n-5\n-10\n-10\n-5\n0\n"
        ]
    ],
    "hint": "",
    "translation": "\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u6709\u8fb9\u6743\u3002\n\n\u6709 $m$ \u4e2a\u8be2\u95ee\uff0c\u5f62\u5f0f\u4e3a $(u,v,l)$\uff0c\u6c42 $u$ \u5230 $v$ \u7684\u8def\u5f84\uff0c\u5047\u8bbe\u957f\u5ea6\u4e3a $p$\uff0c\u7b2c $i$ \u6761\u8fb9\u6743\u503c\u4e3a $x_i$\uff0c\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a $p$ \u7684 01\u4e32 $s$\uff0c\u5982\u679c $x_i\\ge l$\uff0c\u90a3\u4e48 $s_i=1$\uff0c\u5426\u5219 $s_i=0$\u3002\n\n\u5bf9\u4e8e\u5f97\u5230\u7684\u4e32 $s$\uff0c\u5047\u8bbe\u5b83\u6709 $k$ \u6bb5\u8fde\u7eed\u7684 1\uff0c\u7b2c $i$ \u6bb5\u957f\u5ea6\u4e3a $p_i$\uff0c\u90a3\u4e48\u8981\u4f60\u8f93\u51fa\u6240\u6709 $f_{p_i}$ \u7684\u548c\uff0c\u5176\u4e2d $f$ \u6570\u7ec4\u4e00\u5f00\u59cb\u5c31\u7ed9\u51fa\u3002"
}