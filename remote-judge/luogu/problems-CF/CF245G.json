{
    "description": "Polycarpus works as a programmer in a start-up social network. His boss gave his a task to develop a mechanism for determining suggested friends. Polycarpus thought much about the task and came to the folowing conclusion.\n\nLet's say that all friendship relationships in a social network are given as $ m $ username pairs $ a_{i},b_{i} $ $ (a_{i}\u2260b_{i}) $ . Each pair $ a_{i},b_{i} $ means that users $ a_{i} $ and $ b_{i} $ are friends. Friendship is symmetric, that is, if $ a_{i} $ is friends with $ b_{i} $ , then $ b_{i} $ is also friends with $ a_{i} $ . User $ y $ is a suggested friend for user $ x $ , if the following conditions are met:\n\n1. $ x\u2260y $ ;\n2. $ x $ and $ y $ aren't friends;\n3. among all network users who meet the first two conditions, user $ y $ has most of all common friends with user $ x $ . User $ z $ is a common friend of user $ x $ and user $ y $ $ (z\u2260x,z\u2260y) $ , if $ x $ and $ z $ are friends, and $ y $ and $ z $ are also friends.\n\nYour task is to help Polycarpus to implement a mechanism for determining suggested friends.",
    "inputFormat": "The first line contains a single integer $ m $ $ (1<=m<=5000) $ \u2014 the number of pairs of friends in the social network. Next $ m $ lines contain pairs of names of the users who are friends with each other. The $ i $ -th line contains two space-separated names $ a_{i} $ and $ b_{i} $ $ (a_{i}\u2260b_{i}) $ . The users' names are non-empty and consist of at most 20 uppercase and lowercase English letters.\n\nIt is guaranteed that each pair of friends occurs only once in the input. For example, the input can't contain $ x $ , $ y $ and $ y $ , $ x $ at the same time. It is guaranteed that distinct users have distinct names. It is guaranteed that each social network user has at least one friend. The last thing guarantees that each username occurs at least once in the input.",
    "outputFormat": "In the first line print a single integer $ n $ \u2014 the number of network users. In next $ n $ lines print the number of suggested friends for each user. In the $ i $ -th line print the name of the user $ c_{i} $ and the number of his suggested friends $ d_{i} $ after a space.\n\nYou can print information about the users in any order.",
    "samples": [
        [
            "5\nMike Gerald\nKate Mike\nKate Tank\nGerald Tank\nGerald David\n",
            "5\nMike 1\nGerald 1\nKate 1\nTank 1\nDavid 2\n"
        ],
        [
            "4\nvalera vanya\nvalera edik\npasha valera\nigor valera\n",
            "5\nvalera 0\nvanya 3\nedik 3\npasha 3\nigor 3\n"
        ]
    ],
    "hint": "In the first test case consider user David. Users Mike and Tank have one common friend (Gerald) with David. User Kate has no common friends with David. That's why David's suggested friends are users Mike and Tank.",
    "translation": "## \u9898\u76ee\u80cc\u666f\r\nPolycarpus \u5728\u4e00\u5bb6\u521d\u521b\u7684\u793e\u4ea4\u7f51\u7edc\u4e2d\u62c5\u4efb\u7a0b\u5e8f\u5458\u3002\u4ed6\u7684\u8001\u677f\u7ed9\u4ed6\u7684\u4efb\u52a1\u662f\u5f00\u53d1\u4e00\u4e2a\u63a8\u8350\u597d\u53cb\u7684\u7a0b\u5e8f\u3002Polycarpus \u5bf9\u8fd9\u4e2a\u4efb\u52a1\u8fdb\u884c\u4e86\u5f88\u591a\u601d\u8003\uff0c\u5e76\u5f97\u51fa\u4e86\u4ee5\u4e0b\u7ed3\u8bba\u3002\r\n\r\n## \u9898\u76ee\u63cf\u8ff0\r\n\u5047\u8bbe\u793e\u4ea4\u7f51\u7edc\u4e2d\u7684\u6240\u6709\u53cb\u60c5\u5173\u7cfb\u90fd\u53ef\u4ee5\u7528 $m$ \u4e2a\u7528\u6237\u540d\u5bf9 $a_{i}\\ b_{i}(a_{i}\\neq b_{i})$ \u6765\u63cf\u8ff0\u3002\u6bcf\u4e00\u5bf9 $a_{i}\\ b_{i}$ \u610f\u5473\u7740\u7528\u6237 $a_{i}$ \u548c $b_{i}$ \u662f\u670b\u53cb\u3002\u53cb\u8c0a\u5173\u7cfb\u662f\u6ee1\u8db3\u4ea4\u6362\u5f8b\u7684\uff0c\u5373\u5982\u679c $a_{i}$ \u662f $b_{i}$ \u662f\u670b\u53cb\uff0c\u90a3\u4e48 $b_{i}$ \u4e5f\u662f $a_{i}$ \u7684\u670b\u53cb\uff0c\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u7528\u6237 $y$ \u662f\u7528\u6237 $x$ \u7684\u63a8\u8350\u670b\u53cb:\r\n\r\n1. $x\\neq y$\r\n2. $y$ \u4e0d\u662f $x$ \u7684\u670b\u53cb\r\n3. \u5728\u6240\u6709\u6ee1\u8db3\u524d\u4e24\u4e2a\u6761\u4ef6\u7684\u7f51\u7edc\u7528\u6237\u4e2d\uff0c\u7528\u6237 $y$ \u4e0e\u7528\u6237 $x$ \u7684\u5171\u540c\u597d\u53cb\u6700\u591a\u3002\u5982\u679c $x$ \u548c $z$ \u662f\u670b\u53cb\uff0c\u4e14 $y$ \u548c $z$ \u4e5f\u662f\u670b\u53cb\uff0c\u5219\u7528\u6237 $z$ \u662f\u7528\u6237 $x$ \u548c\u7528\u6237 $y$ \u7684\u5171\u540c\u597d\u53cb $(y\\neq z,x\\neq z)$\u3002\r\n\r\n\u4f60\u7684\u4efb\u52a1\u662f\u5e2e\u52a9 Polycarpus \u5b9e\u73b0\u4e00\u4e2a\u786e\u5b9a\u63a8\u8350\u597d\u53cb\u7684\u7a0b\u5e8f\u3002\r\n\r\n## \u8f93\u5165\u5185\u5bb9\r\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 $m(1\\leq m\\leq 5000)$ (\u793e\u4ea4\u7f51\u7edc\u4e2d\u597d\u53cb\u7684\u5bf9\u6570)\u3002\u63a5\u4e0b\u6765\u7684 $m$ \u884c\u5305\u542b\u5f7c\u6b64\u4e3a\u597d\u53cb\u7684\u7528\u6237\u540d\u5b57\u5bf9\u3002\u7b2c $i+1$ \u884c\u5305\u542b\u4e24\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u540d\u5b57 $a_{i}$ \u548c $b_{i}(a_{i}\\neq b_{i})$\u3002\u7528\u6237\u7684\u540d\u5b57\u975e\u7a7a\uff0c\u6700\u591a\u5305\u542b20\u4e2a\u82f1\u6587\u5927\u5199\u6216\u5c0f\u5199\u5b57\u6bcd\u3002\r\n\r\n\u5bf9\u4e8e\u8f93\u5165\u7684\u6570\u636e\uff0c\u4fdd\u8bc1\uff1a\r\n- \u6bcf\u4e00\u5bf9\u670b\u53cb\u5728\u8f93\u5165\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u4f8b\u5982\uff0c\u8f93\u5165\u4e2d\u4e0d\u80fd\u540c\u65f6\u5305\u542b $x\\ y$ \u548c $y\\ x$\u3002\r\n- \u7528\u6237\u4e0d\u91cd\u540d\u3002\r\n- \u6bcf\u4e2a\u793e\u4ea4\u7f51\u7edc\u7528\u6237\u81f3\u5c11\u6709\u4e00\u4e2a\u670b\u53cb\u3002\r\n- \u6bcf\u4e2a\u7528\u6237\u540d\u5728\u8f93\u5165\u4e2d\u81f3\u5c11\u51fa\u73b0\u4e00\u6b21\u3002\r\n\r\n## \u8f93\u51fa\u7ed3\u679c\r\n\u5728\u7b2c\u4e00\u884c\u6253\u5370\u4e00\u4e2a\u6574\u6570 $n$ - \u7f51\u7edc\u7528\u6237\u7684\u6570\u91cf\u3002\u5728\u63a5\u4e0b\u6765\u7684 $n$ \u884c\u4e2d\uff0c\u6253\u5370\u6bcf\u4e2a\u7528\u6237\u7684\u63a8\u8350\u597d\u53cb\u6570\u91cf\u3002\u5728\u7b2c $i+1$ \u884c\u4e2d\u6253\u5370\u7528\u6237\u7684\u540d\u5b57 $c_{i}$ \u548c\u4ed6\u63a8\u8350\u670b\u53cb\u7684\u6570\u91cf $d_{i}$\uff08\u4e24\u4e2a\u6570\u636e\u76f8\u9694\u4e00\u4e2a\u7a7a\u683c\uff09\u3002\r\n\r\n\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u6253\u5370\u7528\u6237\u7684\u4fe1\u606f\u3002\r\n\r\n## \u6837\u4f8b\u8bf4\u660e\r\n\u5728\u7b2c\u4e00\u4e2a\u6837\u4f8b\u4e2d\uff0c\u8003\u8651 David\u3002\u7528\u6237 Mike \u548c Tank \u4e0e David \u6709\u4e00\u4e2a\u5171\u540c\u7684\u670b\u53cb\uff08Gerald\uff09\u3002\u7528\u6237 Kate \u4e0e David \u6ca1\u6709\u5171\u540c\u7684\u670b\u53cb\u3002\u6545 David \u7684\u63a8\u8350\u670b\u53cb\u662f Mike \u548c Tank\uff0c\u5373\u8f93\u51fa 2\u3002"
}