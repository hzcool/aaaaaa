{
    "description": "You are given a bracket sequence $ s $ (not necessarily a regular one). A bracket sequence is a string containing only characters '(' and ')'.\n\nA regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters '1' and '+' between the original characters of the sequence. For example, bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"), and \")(\", \"(\" and \")\" are not.\n\nYour problem is to calculate the number of regular bracket sequences of length $ 2n $ containing the given bracket sequence $ s $ as a substring (consecutive sequence of characters) modulo $ 10^9+7 $ ( $ 1000000007 $ ).",
    "inputFormat": "The first line of the input contains one integer $ n $ ( $ 1 \\le n \\le 100 $ ) \u2014 the half-length of the resulting regular bracket sequences (the resulting sequences must have length equal to $ 2n $ ).\n\nThe second line of the input contains one string $ s $ ( $ 1 \\le |s| \\le 200 $ ) \u2014 the string $ s $ that should be a substring in each of the resulting regular bracket sequences ( $ |s| $ is the length of $ s $ ).",
    "outputFormat": "Print only one integer \u2014 the number of regular bracket sequences containing the given bracket sequence $ s $ as a substring. Since this number can be huge, print it modulo $ 10^9+7 $ ( $ 1000000007 $ ).",
    "samples": [
        [
            "5\n()))()\n",
            "5\n"
        ],
        [
            "3\n(()\n",
            "4\n"
        ],
        [
            "2\n(((\n",
            "0\n"
        ]
    ],
    "hint": "All regular bracket sequences satisfying the conditions above for the first example:\n\n- \"(((()))())\";\n- \"((()()))()\";\n- \"((()))()()\";\n- \"(()(()))()\";\n- \"()((()))()\".\n\nAll regular bracket sequences satisfying the conditions above for the second example:\n\n- \"((()))\";\n- \"(()())\";\n- \"(())()\";\n- \"()(())\".\n\nAnd there is no regular bracket sequences of length $ 4 $ containing \"(((\" as a substring in the third example.",
    "translation": "\u3000\u7ed9\u4f60\u4e00\u4e2a\u62ec\u53f7\u5e8f\u5217  $s$ \uff08\u4e0d\u4e00\u5b9a\u662f\u5e38\u89c4\u5e8f\u5217\uff09\u3002 \u62ec\u53f7\u5e8f\u5217\u662f\u4ec5\u5305\u542b\u5b57\u7b26'\uff08'\u548c'\uff09'\u7684\u5b57\u7b26\u4e32\u3002\r\n\r\n\u3000\u5e38\u89c4\u62ec\u53f7\u5e8f\u5217\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u5728\u5e8f\u5217\u7684\u539f\u59cb\u5b57\u7b26\u4e4b\u95f4\u63d2\u5165\u5b57\u7b26\u201c1\u201d\u548c\u201c+\u201d\u6765\u8f6c\u6362\u4e3a\u6b63\u786e\u7684\u7b97\u672f\u8868\u8fbe\u5f0f\u3002 \u4f8b\u5982\uff0c\u62ec\u53f7\u5e8f\u5217\u201c\uff08\uff09\uff08\uff09\u201d\u548c\u201c\uff08\uff08\uff09\uff09\u201d\u662f\u5e38\u89c4\u7684\uff08\u7ed3\u679c\u8868\u8fbe\u5f0f\u4e3a\uff1a\u201c\uff081\uff09+\uff081\uff09\u201d\u548c\u201c\uff08\uff081 + 1\uff09+1\uff09\u201d\uff09\uff0c\u4ee5\u53ca \u201c\uff09\uff08\u201d\uff0c\u201c\uff08\u201d\u548c\u201c\uff09\u201d\u4e0d\u662f\u3002\r\n\r\n\u3000\u4f60\u7684\u95ee\u9898\u662f\u8ba1\u7b97\u957f\u5ea6\u4e3a  $2n$  \u7684\u5e38\u89c4\u62ec\u53f7\u5e8f\u5217\u7684\u6570\u91cf\uff0c\u800c\u4e14\u5fc5\u987b\u6ee1\u8db3\u7ed9\u5b9a\u62ec\u53f7\u5e8f\u5217  $s$  \u662f\u5b83\u7684\u5b50\u4e32\uff08\u8fde\u7eed\u5b57\u7b26\u5e8f\u5217\uff09\u3002\u8f93\u51fa\u8fd9\u4e2a\u6570\u91cf\u6a21\u3000 $10 ^ 9 + 7$ \uff081000000007\uff09\u7684\u7ed3\u679c\u3002"
}