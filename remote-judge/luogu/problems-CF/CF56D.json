{
    "description": "There is a string $ s $ , consisting of capital Latin letters. Let's denote its current length as $ |s| $ . During one move it is allowed to apply one of the following operations to it:\n\n- INSERT $ pos $ $ ch $ \u2014 insert a letter $ ch $ in the string $ s $ in the position $ pos $ ( $ 1<=pos<=|s|+1,A<=ch<=Z $ ). The letter $ ch $ becomes the $ pos $ -th symbol of the string $ s $ , at that the letters shift aside and the length of the string increases by 1.\n- DELETE $ pos $ \u2014 delete a character number $ pos $ ( $ 1<=pos<=|s| $ ) from the string $ s $ . At that the letters shift together and the length of the string decreases by 1.\n- REPLACE $ pos $ $ ch $ \u2014 the letter in the position $ pos $ of the line $ s $ is replaced by $ ch $ ( $ 1<=pos<=|s|,A<=ch<=Z $ ). At that the length of the string does not change.\n\nYour task is to find in which minimal number of moves one can get a $ t $ string from an $ s $ string. You should also find the sequence of actions leading to the required results.",
    "inputFormat": "The first line contains $ s $ , the second line contains $ t $ . The lines consist only of capital Latin letters, their lengths are positive numbers from $ 1 $ to $ 1000 $ .",
    "outputFormat": "In the first line print the number of moves $ k $ in the given sequence of operations. The number should be the minimal possible one. Then print $ k $ lines containing one operation each. Print the operations in the format, described above. If there are several solutions, print any of them.",
    "samples": [
        [
            "ABA\nABBBA\n",
            "2\nINSERT 3 B\nINSERT 4 B\n"
        ],
        [
            "ACCEPTED\nWRONGANSWER\n",
            "10\nREPLACE 1 W\nREPLACE 2 R\nREPLACE 3 O\nREPLACE 4 N\nREPLACE 5 G\nREPLACE 6 A\nINSERT 7 N\nINSERT 8 S\nINSERT 9 W\nREPLACE 11 R\n"
        ]
    ],
    "hint": "",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\r\n\r\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u7531\u5927\u5199\u5b57\u6bcd\u6784\u6210\u7684\u5b57\u7b26\u4e32$s$\uff0c\u6211\u4eec\u628a\u4ed6\u7684\u957f\u5ea6\u8868\u793a\u4e3a$|s|$\u3002\u5728\u4e00\u6b21\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u8fd9\u51e0\u79cd\u4e8b\u60c5\uff1a\r\n\r\n- \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u2014\u2014\u6211\u4eec\u53ef\u4ee5\u5728$pos$\u4f4d\u7f6e\u4e0a\u63d2\u5165\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd$ch$$(1<=pos<=|s|+1,A<=ch<=Z)$\uff0c\u6b64\u65f6\u5b57\u7b26\u4e32\u7684$pos$\u4f4d\u7f6e\u53d8\u6210$ch$\u5b57\u7b26\uff0c\u5e76\u4e14\uff0c\u5176\u4f59\u5b57\u7b26\u5c06\u4f9d\u6b21\u540e\u79fb\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e5f\u8981\u589e\u52a01\r\n\r\n- \u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u2014\u2014\u5c06$pos$\u4f4d\u7f6e\u4e0a\u7684\u5b57\u7b26\u5220\u9664\uff0c\u540c\u6837\uff0c\u5176\u4f59\u5b57\u7b26\u79fb\u52a8\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32\u957f\u5ea6\u51cf\u5c111\r\n\r\n- \u66ff\u6362\u4e00\u4e2a\u5b57\u7b26\u2014\u2014\u5c06$pos$\u4f4d\u7f6e\u4e0a\u7684\u5b57\u7b26\u66ff\u6362\u4e3a$ch$$(1<=pos<=|s|,A<=ch<=Z)$\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u6539\u53d8\r\n\r\n\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u8ba1\u7b97$s$\u5b57\u7b26\u4e32\u901a\u8fc7\u4e0a\u9762\u7684\u64cd\u4f5c\u53d8\u5230$t$\u5b57\u7b26\u4e32\u6700\u5c11\u82b1\u7684\u6b65\u6570\uff0c\u5e76\u4e14\u8f93\u51fa\u64cd\u4f5c\u8fc7\u7a0b\u3002\r\n\r\n## \u8f93\u5165\u683c\u5f0f\r\n\r\n\u7b2c\u4e00\u884c\u662f$s$\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u884c\u662f$t$\u5b57\u7b26\u4e32\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u53ea\u6709\u5927\u5199\u5b57\u6bcd\uff0c\u5e76\u4e14\u957f\u5ea6\u90fd\u662f1~1000\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6574\u6570\u3002\r\n\r\n## \u8f93\u51fa\u683c\u5f0f\r\n\r\n\u7b2c\u4e00\u884c\u4e3a\u6700\u5c11\u79fb\u52a8\u6b21\u6570$k$\uff0c\u63a5\u4e0b\u6765$k$\u884c\uff0c\u6309\"\u64cd\u4f5c\u540d\u79f0 $pos$ $ch$\"\u7684\u683c\u5f0f\u8f93\u51fa\u3002"
}