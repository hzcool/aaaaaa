{
    "description": "Of course you have heard the famous task about Hanoi Towers, but did you know that there is a special factory producing the rings for this wonderful game? Once upon a time, the ruler of the ancient Egypt ordered the workers of Hanoi Factory to create as high tower as possible. They were not ready to serve such a strange order so they had to create this new tower using already produced rings.\n\nThere are $ n $ rings in factory's stock. The $ i $ -th ring has inner radius $ a_{i} $ , outer radius $ b_{i} $ and height $ h_{i} $ . The goal is to select some subset of rings and arrange them such that the following conditions are satisfied:\n\n- Outer radiuses form a non-increasing sequence, i.e. one can put the $ j $ -th ring on the $ i $ -th ring only if $ b_{j}<=b_{i} $ .\n- Rings should not fall one into the the other. That means one can place ring $ j $ on the ring $ i $ only if $ b_{j}>a_{i} $ .\n- The total height of all rings used should be maximum possible.",
    "inputFormat": "The first line of the input contains a single integer $ n $ ( $ 1<=n<=100000 $ ) \u2014 the number of rings in factory's stock.\n\nThe $ i $ -th of the next $ n $ lines contains three integers $ a_{i} $ , $ b_{i} $ and $ h_{i} $ ( $ 1<=a_{i},b_{i},h_{i}<=10^{9} $ , $ b_{i}>a_{i} $ ) \u2014 inner radius, outer radius and the height of the $ i $ -th ring respectively.",
    "outputFormat": "Print one integer \u2014 the maximum height of the tower that can be obtained.",
    "samples": [
        [
            "3\n1 5 1\n2 6 2\n3 7 3\n",
            "6\n"
        ],
        [
            "4\n1 2 1\n1 3 3\n4 6 2\n5 7 1\n",
            "4\n"
        ]
    ],
    "hint": "In the first sample, the optimal solution is to take all the rings and put them on each other in order $ 3 $ , $ 2 $ , $ 1 $ .\n\nIn the second sample, one can put the ring $ 3 $ on the ring $ 4 $ and get the tower of height $ 3 $ , or put the ring $ 1 $ on the ring $ 2 $ and get the tower of height $ 4 $ .",
    "translation": "\u4f60\u80af\u5b9a\u542c\u8bf4\u8fc7\u8457\u540d\u7684\u6e38\u620f\u6c49\u8bfa\u5854\u5427\uff0c\u4f46\u662f\u4f60\u77e5\u9053\u6709\u4e00\u4e2a\u795e\u5947\u7684\u5de5\u5382\u4e13\u95e8\u5236\u9020\u8fd9\u79cd\u6e38\u620f\u5854\u4e0a\u7684\u73af\u5417\uff1f\u5f88\u4e45\u4e4b\u524d\uff0c\u53e4\u57c3\u53ca\u7684\u88c1\u5b9a\u8005\u547d\u4ee4\u201c\u6c49\u8bfa\u5de5\u5382\u201d\uff08\u4e0a\u6587\u63d0\u5230\u7684\u5de5\u5382\uff09\u7684\u5de5\u4eba\u5236\u9020\u4e00\u5ea7\u5c3d\u53ef\u80fd\u9ad8\u7684\u6c49\u8bfa\u5854\uff0c\u800c\u4ed6\u4eec\u6ca1\u6709\u505a\u597d\u51c6\u5907\u53bb\u6267\u884c\u8fd9\u6837\u4e00\u4e2a\u5947\u602a\u7684\u547d\u4ee4\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u7528\u5df2\u7ecf\u9020\u597d\u7684\u73af\u3002\n\u5de5\u5382\u50a8\u5907\u6709$n$\u4e2a\u73af\uff0c\u5176\u5185\u5f84\u4e3a$a_i$\uff0c\u5916\u5f84\u4e3a$b_i$\uff0c\u9ad8\u5ea6\u4e3a$h_i$\u3002\u8981\u6c42\u73af\u7684\u653e\u7f6e\u6761\u4ef6\u5982\u4e0b\uff1a\n-    \u5854\u7684\u5916\u534a\u5f84\u4ece\u4e0b\u81f3\u4e0a\u4e3a\u975e\u9012\u589e\u5e8f\u5217\uff0c\u5373\u8d8a\u4e0b\u9762\u7684\u73af\u5916\u5f84\u4e0d\u80fd\u5c0f\u4e8e\u4e0a\u9762\u7684\u73af\n-    \u73af\u4e0d\u80fd\u6389\u4e0b\u6765\uff0c\u5373\u76f8\u90bb\u4e24\u73af\u4e0a\u65b9\u7684\u73af\u7684\u5916\u5f84\u4e0d\u80fd\u5c0f\u4e8e\u4e0b\u9762\u7684\u73af\u7684\u5185\u5f84\n-    \u5854\u7684\u9ad8\u5ea6\u5fc5\u987b\u6700\u5927\n# \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n## \u8f93\u5165\u683c\u5f0f\n\u7b2c$1$\u884c\u4e00\u4e2a\u6570$n$\uff0c\u4ee3\u8868\u73af\u7684\u6570\u91cf\n\u7b2c$2$~$n-1$\u884c\uff0c\u6bcf\u884c3\u4e2a\u6570$a_i,b_i,h_i$\u4ee3\u8868\u73af\u7684\u5185\u5f84\uff0c\u5916\u5f84\uff0c\u9ad8\u5ea6\n## \u8f93\u51fa\u683c\u5f0f\n\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u5854\u7684\u6700\u5927\u9ad8\u5ea6\n\u6837\u4f8b\u53ca\u6570\u636e\u8303\u56f4\u89c1\u539f\u6587\n\nTranslated by Venus"
}