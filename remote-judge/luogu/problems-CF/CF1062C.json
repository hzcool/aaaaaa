{
    "description": "JATC loves Banh-mi (a Vietnamese food). His affection for Banh-mi is so much that he always has it for breakfast. This morning, as usual, he buys a Banh-mi and decides to enjoy it in a special way.\n\nFirst, he splits the Banh-mi into $ n $ parts, places them on a row and numbers them from $ 1 $ through $ n $ . For each part $ i $ , he defines the deliciousness of the part as $ x_i \\in \\{0, 1\\} $ . JATC's going to eat those parts one by one. At each step, he chooses arbitrary remaining part and eats it. Suppose that part is the $ i $ -th part then his enjoyment of the Banh-mi will increase by $ x_i $ and the deliciousness of all the remaining parts will also increase by $ x_i $ . The initial enjoyment of JATC is equal to $ 0 $ .\n\nFor example, suppose the deliciousness of $ 3 $ parts are $ [0, 1, 0] $ . If JATC eats the second part then his enjoyment will become $ 1 $ and the deliciousness of remaining parts will become $ [1, \\_, 1] $ . Next, if he eats the first part then his enjoyment will become $ 2 $ and the remaining parts will become $ [\\_, \\_, 2] $ . After eating the last part, JATC's enjoyment will become $ 4 $ .\n\nHowever, JATC doesn't want to eat all the parts but to save some for later. He gives you $ q $ queries, each of them consisting of two integers $ l_i $ and $ r_i $ . For each query, you have to let him know what is the maximum enjoyment he can get if he eats all the parts with indices in the range $ [l_i, r_i] $ in some order.\n\nAll the queries are independent of each other. Since the answer to the query could be very large, print it modulo $ 10^9+7 $ .",
    "inputFormat": "The first line contains two integers $ n $ and $ q $ ( $ 1 \\le n, q \\le 100\\,000 $ ).\n\nThe second line contains a string of $ n $ characters, each character is either '0' or '1'. The $ i $ -th character defines the deliciousness of the $ i $ -th part.\n\nEach of the following $ q $ lines contains two integers $ l_i $ and $ r_i $ ( $ 1 \\le l_i \\le r_i \\le n $ ) \u2014 the segment of the corresponding query.",
    "outputFormat": "Print $ q $ lines, where $ i $ -th of them contains a single integer \u2014 the answer to the $ i $ -th query modulo $ 10^9 + 7 $ .",
    "samples": [
        [
            "4 2\n1011\n1 4\n3 4\n",
            "14\n3\n"
        ],
        [
            "3 2\n111\n1 2\n3 3\n",
            "3\n1\n"
        ]
    ],
    "hint": "In the first example:\n\n- For query $ 1 $ : One of the best ways for JATC to eats those parts is in this order: $ 1 $ , $ 4 $ , $ 3 $ , $ 2 $ .\n- For query $ 2 $ : Both $ 3 $ , $ 4 $ and $ 4 $ , $ 3 $ ordering give the same answer.\n\nIn the second example, any order of eating parts leads to the same answer.",
    "translation": "##  \u9898\u76ee\u63cf\u8ff0\r\nJATC\u5f88\u559c\u6b22\u5403\u8d8a\u5f0f\u6cd5\u5305(\u4e00\u79cd\u8d8a\u5357\u98df\u54c1)\u3002\u4ed6\u603b\u662f\u628a\u5b83\u5f53\u65e9\u9910\u5403\uff0c\u56e0\u4e3a\u4ed6\u5b9e\u5728\u662f\u592a\u559c\u6b22\u4e86\u3002\u8fd9\u5929\u65e9\u4e0a\uff0c\u50cf\u4ee5\u5f80\u4e00\u6837\uff0c\u4ed6\u4e70\u4e86\u4e00\u4e2a\u8d8a\u5f0f\u6cd5\u5305\uff0c\u5e76\u4e14\u51b3\u5b9a\u4ee5\u4e00\u79cd\u7279\u6b8a\u7684\u65b9\u6cd5\u5403\u6389\u5b83\u3002  \r\n\u9996\u5148\uff0c\u4ed6\u628a\u8d8a\u5f0f\u6cd5\u5305\u5206\u4e3a$n$\u5757\uff0c\u5e76\u628a\u5b83\u4eec\u6392\u6210\u4e00\u884c\uff0c\u4ece$1$\u5230$n$\u6807\u53f7\u3002\u5bf9\u4e8e\u6bcf\u4e00\u5757\uff0c\u4ed6\u5b9a\u4e49\u7b2c$i$\u5757\u7684_\u53e3\u611f_\u4e3a$x_i\u2208\\{0,1\\}$\u3002JATC\u6b63\u51c6\u5907\u5c06\u5b83\u4eec\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u5403\u6389\u3002\u6bcf\u4e00\u6b21\uff0c\u4ed6\u968f\u610f\u9009\u62e9\u5269\u4e0b\u7684\u4e00\u5757\u5403\u6389\u3002\u6bd4\u5982\u8bf4\u4ed6\u9009\u62e9\u4e86\u7b2c$i$\u5757\uff0c\u90a3\u4e48\u4ed6\u7684_\u6109\u60a6\u5ea6_\u5c31\u4f1a\u589e\u52a0$x_i$\uff0c\u5e76\u4e14\u6240\u6709\u5269\u4e0b\u7684\u5757\u7684_\u53e3\u611f_\u4e5f\u4f1a\u589e\u52a0$x_i$\u3002\u6700\u521d\uff0cJATC\u7684_\u6109\u60a6\u5ea6_\u7b49\u4e8e0\u3002  \r\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe$3$\u5757\u8d8a\u5f0f\u6cd5\u5305\u7684_\u53e3\u611f_\u5206\u522b\u4e3a$[0,1,0]$\u3002\u5982\u679cJATC\u5148\u5403\u6389\u7b2c\u4e8c\u5757\uff0c\u4ed6\u7684_\u6109\u60a6\u5ea6_\u4f1a\u53d8\u4e3a$1$\uff0c\u5176\u4f59\u5757\u7684_\u53e3\u611f_\u5219\u53d8\u4e3a$[1,\\_,1]$\u3002\u63a5\u4e0b\u6765\u5982\u679c\u4ed6\u5403\u6389\u7b2c\u4e00\u5757\uff0c\u4ed6\u7684_\u6109\u60a6\u5ea6_\u4f1a\u53d8\u4e3a$2$\uff0c\u5269\u4e0b\u7684\u5757\u7684_\u53e3\u611f_\u53d8\u4e3a$[\\_,\\_,2]$\u3002\u5403\u6389\u6700\u540e\u4e00\u5757\u540e\uff0cJATC\u7684_\u6109\u60a6\u5ea6_\u53d8\u4e3a$4$\u3002  \r\n\u7136\u800c\uff0c\u4ed6\u4e0d\u60f3\u5403\u6389\u6240\u6709\u7684\u8d8a\u5f0f\u6cd5\u5305\u5757\u513f\uff0c\u60f3\u7559\u4e00\u4e9b\u4ee5\u540e\u5403\u3002\u4ed6\u7ed9\u4e86\u4f60$n$\u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7531\u4e24\u4e2a\u6574\u6570$l_i$\u548c$r_i$\u7ec4\u6210\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8bf7\u544a\u8bc9\u4ed6\u5f53\u4ed6\u4ee5\u67d0\u79cd\u987a\u5e8f\u5403\u6389\u533a\u95f4$[l_i,r_i]$\u7684\u6240\u6709\u5757\u540e\uff0c\u6700\u5927\u7684\u6109\u60a6\u5ea6\u662f\u591a\u5c11\u3002  \r\n\u6bcf\u4e2a\u8be2\u95ee\u90fd\u662f\u4e92\u76f8\u72ec\u7acb\u7684\u3002\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u8bf7\u5bf9$10^9+7$\u53d6\u6a21\u3002\r\n##  \u8f93\u5165\u683c\u5f0f\r\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570$n$\u548c$q(1\\le n,q\\le 100\\ 000)$\u3002  \r\n\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u7531'0'\u6216'1'\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002\u7b2c$i$\u4e2a\u5b57\u7b26\u8868\u793a\u4e86\u7b2c$i$\u5757\u7684\u53e3\u611f\u3002  \r\n\u4e4b\u540e\u7684$q$\u884c\uff0c\u6bcf\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570$l_i$\u548c$r_i(1\\le l_i\\le r_i\\le n)$\u2014\u2014\u6bcf\u4e2a\u8be2\u95ee\u7684\u533a\u95f4\u3002  \r\n##  \u8f93\u51fa\u683c\u5f0f\r\n\u8f93\u51fa$q$\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\u2014\u2014\u7b54\u6848\u5bf9$10^9+7$\u53d6\u6a21\u4e4b\u540e\u7684\u7ed3\u679c\u3002  \r\n#### \u6837\u4f8b1\u8bf4\u660e\r\n\u5bf9\u7b2c1\u4e2a\u8be2\u95ee\uff1a\u4e00\u79cd\u6700\u4f73\u7684\u65b9\u6848\u987a\u5e8f\u4e3a\uff1a$1,4,3,2$\u3002  \r\n\u5bf9\u7b2c2\u4e2a\u8be2\u95ee\uff1a\u4ee5$3,4$\u6216$4,3$\u7684\u987a\u5e8f\u90fd\u53ef\u4ee5\u5f97\u5230\u540c\u6837\u7684\u7b54\u6848\u3002  \r\n#### \u6837\u4f8b2\u8bf4\u660e\r\n\u4efb\u4f55\u987a\u5e8f\u90fd\u80fd\u591f\u5f97\u5230\u76f8\u540c\u7684\u7b54\u6848\u3002  \r\n"
}