{
    "description": "The problem uses a simplified TCP/IP address model, please read the statement carefully.\n\nAn IP address is a 32-bit integer, represented as a group of four decimal 8-bit integers (without leading zeroes), separated by commas. For example, record 0.255.1.123 shows a correct IP address and records 0.256.1.123 and 0.255.1.01 do not. In the given problem an arbitrary group of four 8-bit integers is a correct IP address.\n\nOur hero Polycarpus still works as a system administrator in some large corporation. He likes beautiful IP addresses. To check if some IP address is beautiful, he should do the following:\n\n1. write out in a line four 8-bit numbers of the IP address, without the commas;\n2. check if the resulting string is a palindrome.\n\nLet us remind you that a palindrome is a string that reads the same from right to left and from left to right.\n\nFor example, IP addresses 12.102.20.121 and 0.3.14.130 are beautiful (as strings \"1210220121\" and \"0314130\" are palindromes), and IP addresses 1.20.20.1 and 100.4.4.1 are not.\n\nPolycarpus wants to find all beautiful IP addresses that have the given set of digits. Each digit from the set must occur in the IP address at least once. IP address must not contain any other digits. Help him to cope with this difficult task.",
    "inputFormat": "The first line contains a single integer $ n $ $ (1<=n<=10) $ \u2014 the number of digits in the set. The second line contains the set of integers $ a_{1},a_{2},...,a_{n} $ $ (0<=a_{i}<=9) $ . It is guaranteed that all digits in the set are distinct.",
    "outputFormat": "In the first line print a single integer $ k $ \u2014 the number of beautiful IP addresses that contain the given set of digits. In the following $ k $ lines print the IP addresses, one per line in the arbitrary order.",
    "samples": [
        [
            "6\n0 1 2 9 8 7\n",
            "6\n78.190.209.187\n79.180.208.197\n87.190.209.178\n89.170.207.198\n97.180.208.179\n98.170.207.189\n"
        ],
        [
            "1\n4\n",
            "16\n4.4.4.4\n4.4.4.44\n4.4.44.4\n4.4.44.44\n4.44.4.4\n4.44.4.44\n4.44.44.4\n4.44.44.44\n44.4.4.4\n44.4.4.44\n44.4.44.4\n44.4.44.44\n44.44.4.4\n44.44.4.44\n44.44.44.4\n44.44.44.44\n"
        ]
    ],
    "hint": "",
    "translation": "\u8fd9\u4e2a\u95ee\u9898\u7528\u5230\u4e86\u7b80\u5355\u7684TCP/IP\u5730\u5740\u6a21\u578b\uff0c\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u4e0b\u5217\u6587\u5b57\u3002\r\n\r\n\u4e00\u4e2aIP\u5730\u5740\u662f\u4e00\u4e2a32\u4f4d\u76842\u8fdb\u5236\u6574\u6570\uff0c\u5206\u6210\u56db\u7ec48\u4f4d\u76842\u8fdb\u5236\u6574\u6570\uff08\u6ca1\u6709\u524d\u5bfc0\uff09\u3002\r\n\r\n\u6bd4\u5982\u8bf4\uff0c0.255.1.123 \u662f\u4e00\u4e2a\u6b63\u786e\u7684IP\u5730\u5740\uff0c\u800c0.256.1.123 \u548c 0.255.1.01\u4e0d\u662f\u6b63\u786e\u7684\u3002\r\n\r\n\u9898\u76ee\u7b80\u610f\uff1a\r\n\r\n\u5b9a\u4e49\u4e00\u4e2a\u5408\u6cd5\u7684\u56de\u6587IP\u5730\u5740\u4e3aBeautiful IP Address \uff08\u56de\u6587\u5730\u5740\u5c31\u662f\u53bb\u6389\u201c.\u201d\u540e\u662f\u4e2a\u56de\u6587\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff09\uff0c \u7ed9\u51fan\u4e2a\u6570\u5b57\uff0c\u6c42\u51fa\u6240\u6709\u53ef\u7528\u8fd9\u4e9b\u6570\u5b57\u7ec4\u6210\u7684Beautiful Addresses\u3002"
}