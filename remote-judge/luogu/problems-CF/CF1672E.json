{
    "description": "This is an interactive problem.\n\nThere are $ n $ words in a text editor. The $ i $ -th word has length $ l_i $ ( $ 1 \\leq l_i \\leq 2000 $ ). The array $ l $ is hidden and only known by the grader.\n\nThe text editor displays words in lines, splitting each two words in a line with at least one space. Note that a line does not have to end with a space. Let the height of the text editor refer to the number of lines used. For the given width, the text editor will display words in such a way that the height is minimized.\n\nMore formally, suppose that the text editor has width $ w $ . Let $ a $ be an array of length $ k+1 $ where $ 1=a_1 < a_2 < \\ldots < a_{k+1}=n+1 $ . $ a $ is a valid array if for all $ 1 \\leq i \\leq k $ , $ l_{a_i}+1+l_{a_i+1}+1+\\ldots+1+l_{a_{i+1}-1} \\leq w $ . Then the height of the text editor is the minimum $ k $ over all valid arrays.\n\nNote that if $ w < \\max(l_i) $ , the text editor cannot display all the words properly and will crash, and the height of the text editor will be $ 0 $ instead.\n\nYou can ask $ n+30 $ queries. In one query, you provide a width $ w $ . Then, the grader will return the height $ h_w $ of the text editor when its width is $ w $ .\n\nFind the minimum area of the text editor, which is the minimum value of $ w \\cdot h_w $ over all $ w $ for which $ h_w \\neq 0 $ .\n\nThe lengths are fixed in advance. In other words, the interactor is not adaptive.",
    "inputFormat": "The first and only line of input contains a single integer $ n $ ( $ 1 \\leq n \\leq 2000 $ ) \u2014 the number of words on the text editor.\n\nIt is guaranteed that the hidden lengths $ l_i $ satisfy $ 1 \\leq l_i \\leq 2000 $ .",
    "outputFormat": "Begin the interaction by reading $ n $ .\n\nTo make a query, print \"? $ w $ \" (without quotes, $ 1 \\leq w \\leq 10^9 $ ). Then you should read our response from standard input, that is, $ h_w $ .\n\nIf your program has made an invalid query or has run out of tries, the interactor will terminate immediately and your program will get a verdict Wrong answer.\n\nTo give the final answer, print \"! $ area $ \" (without the quotes). Note that giving this answer is not counted towards the limit of $ n+30 $ queries.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nHacks\n\nThe first line of input must contain a single integer $ n $ ( $ 1 \\leq n \\leq 2000 $ ) \u2014 the number of words in the text editor.\n\nThe second line of input must contain exactly $ n $ space-separated integers $ l_1,l_2,\\ldots,l_n $ ( $ 1 \\leq l_i \\leq 2000 $ ).",
    "samples": [
        [
            "6\n\n0\n\n4\n\n2",
            "? 1\n\n? 9\n\n? 16\n\n! 32"
        ]
    ],
    "hint": "In the first test case, the words are $ \\{\\texttt{glory},\\texttt{to},\\texttt{ukraine},\\texttt{and},\\texttt{anton},\\texttt{trygub}\\} $ , so $ l=\\{5,2,7,3,5,6\\} $ .\n\nIf $ w=1 $ , then the text editor is not able to display all words properly and will crash. The height of the text editor is $ h_1=0 $ , so the grader will return $ 0 $ .\n\nIf $ w=9 $ , then a possible way that the words will be displayed on the text editor is:\n\n- $ \\texttt{glory__to} $\n- $ \\texttt{ukraine__} $\n- $ \\texttt{and_anton} $\n- $ \\texttt{__trygub_} $\n\nThe height of the text editor is $ h_{9}=4 $ , so the grader will return $ 4 $ .\n\nIf $ w=16 $ , then a possible way that the words will be displayed on the text editor is:\n\n- $ \\texttt{glory_to_ukraine} $\n- $ \\texttt{and_anton_trygub} $\n\nThe height of the text editor is $ h_{16}=2 $ , so the grader will return $ 2 $ .\n\nWe have somehow figured out that the minimum area of the text editor is $ 32 $ , so we answer it.",
    "translation": "\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\n\u5728\u6587\u672c\u7f16\u8f91\u5668\u91cc\u6709 $n$ \u4e2a\u5355\u8bcd\uff0c\u5176\u4e2d\u7b2c $i$ \u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u4e3a $l_i$ ($1 \\le l_i \\le 2000$)\u3002$l$ \u4ec5\u5bf9\u6d4b\u8bc4\u673a\u53ef\u89c1\u3002\n\n\u6587\u672c\u7f16\u8f91\u5668\u4e00\u884c\u4e00\u884c\u5c55\u793a\u6587\u672c\uff0c\u4ee5\u7a7a\u683c\u5206\u5f00\u76f8\u90bb\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u4f46\u662f\u884c\u672b\u4e0d\u4e00\u5b9a\u6709\u7a7a\u683c\uff0c\u5373\u5355\u8bcd\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u67d0\u4e00\u884c\u7684\u672b\u5c3e\u3002\u5b9a\u4e49\u6587\u672c\u7684\u9ad8\u5ea6 $h$ \u4e3a\u6587\u672c\u5c55\u793a\u9700\u8981\u7684\u884c\u6570\u3002\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5c4f\u5e55\u5bbd\u5ea6\uff0c\u7f16\u8f91\u5668\u4f1a\u4ee5\u9ad8\u5ea6\u6700\u5c0f\u7684\u65b9\u5f0f\u663e\u793a\u3002\n\n\u66f4\u6b63\u5f0f\u5730\uff0c\u8bbe\u6587\u672c\u7f16\u8f91\u5668\u7684\u5bbd\u5ea6\u4e3a $w$ \u3002\u8bbe $a$ \u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a $k + 1$ \u7684\u5e8f\u5217\uff0c\u5176\u4e2d $1 = a_1 < a_2 < ... < a_{k+1} = n + 1$. $\\{a_n\\}$ \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u5e8f\u5217\u5f53\u4e14\u4ec5\u5f53\uff0c$\\forall 1 \\le i \\le k, l_{a_i} + 1 + l_{a_{i + 1}} + 1 + \\dots + 1 + l_{a_{i+1} - 1} \\le w$\u3002 \u90a3\u4e48\uff0c$h$ \u5c31\u662f\u6240\u6709\u5408\u6cd5\u7684 $\\{a_n\\}$ \u4e2d\u6700\u5c0f\u7684 $k$. \n\n\u6ce8\u610f\uff0c\u5982\u679c $w \\le \\max(l_i)$\uff0c\u90a3\u4e48\u6587\u672c\u7f16\u8f91\u5668\u5c06\u4e0d\u80fd\u663e\u793a\u6240\u6709\u7684\u6587\u5b57\u5e76\u4e14\u5d29\u6e83\uff0c\u6b64\u65f6 $h = 0$ .\n\n\u4f60\u53ef\u4ee5\u505a $n + 30$ \u6b21\u8be2\u95ee\u3002\u6bcf\u6b21\u8be2\u95ee\u4e2d\uff0c\u8f93\u51fa\u5bbd\u5ea6 $w$ . \u6d4b\u8bc4\u673a\u5c06\u8fd4\u56de $h_w$ \uff0c\u5373\u5f53\u5bbd\u5ea6\u4e3a $w$ \u7684\u6700\u5c0f\u9ad8\u5ea6\u3001\n\n\u8bf7\u627e\u5230\u6587\u672c\u7f16\u8f91\u5668\u7684\u6700\u5c0f\u9762\u79ef\uff0c\u5373\u6c42 $min(w\\times h_w | 1 \\le w \\le n)$."
}