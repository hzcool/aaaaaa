{
    "description": "This is the hard version of the problem. You can find the easy version in the Div. 2 contest. Both versions only differ in the number of times you can ask your friend to taste coffee.\n\nThis is an interactive problem.\n\nYou're considering moving to another city, where one of your friends already lives. There are $ n $ caf\u00e9s in this city, where $ n $ is a power of two. The $ i $ -th caf\u00e9 produces a single variety of coffee $ a_i $ .\n\nAs you're a coffee-lover, before deciding to move or not, you want to know the number $ d $ of distinct varieties of coffees produced in this city.\n\nYou don't know the values $ a_1, \\ldots, a_n $ . Fortunately, your friend has a memory of size $ k $ , where $ k $ is a power of two.\n\nOnce per day, you can ask him to taste a cup of coffee produced by the caf\u00e9 $ c $ , and he will tell you if he tasted a similar coffee during the last $ k $ days.\n\nYou can also ask him to take a medication that will reset his memory. He will forget all previous cups of coffee tasted. You can reset his memory at most $ 30\\ 000 $ times.\n\nMore formally, the memory of your friend is a queue $ S $ . Doing a query on caf\u00e9 $ c $ will:\n\n- Tell you if $ a_c $ is in $ S $ ;\n- Add $ a_c $ at the back of $ S $ ;\n- If $ |S| > k $ , pop the front element of $ S $ .\n\nDoing a reset request will pop all elements out of $ S $ .\n\nYour friend can taste at most $ \\dfrac{3n^2}{2k} $ cups of coffee in total. Find the diversity $ d $ (number of distinct values in the array $ a $ ).\n\nNote that asking your friend to reset his memory does not count towards the number of times you ask your friend to taste a cup of coffee.\n\nIn some test cases the behavior of the interactor is adaptive. It means that the array $ a $ may be not fixed before the start of the interaction and may depend on your queries. It is guaranteed that at any moment of the interaction, there is at least one array $ a $ consistent with all the answers given so far.",
    "inputFormat": "The first line contains two integers $ n $ and $ k $ ( $ 1 \\le k \\le n \\le 1024 $ , $ k $ and $ n $ are powers of two).\n\nIt is guaranteed that $ \\dfrac{3n^2}{2k} \\le 15\\ 000 $ .",
    "outputFormat": "You begin the interaction by reading $ n $ and $ k $ .\n\n- To ask your friend to taste a cup of coffee produced by the caf\u00e9 $ c $ , in a separate line output? $ c $\n  \n  Where $ c $ must satisfy $ 1 \\le c \\le n $ . Don't forget to flush, to get the answer.\n  \n  In response, you will receive a single letter Y (yes) or N (no), telling you if variety $ a_c $ is one of the last $ k $ varieties of coffee in his memory.\n- To reset the memory of your friend, in a separate line output the single letter R in upper case. You can do this operation at most $ 30\\ 000 $ times.\n- When you determine the number $ d $ of different coffee varieties, output! $ d $\n\nIn case your query is invalid, you asked more than $ \\frac{3n^2}{2k} $ queries of type ? or you asked more than $ 30\\ 000 $ queries of type R, the program will print the letter E and will finish interaction. You will receive a Wrong Answer verdict. Make sure to exit immediately to avoid getting other verdicts.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nHack format\n\nThe first line should contain the word fixed\n\nThe second line should contain two integers $ n $ and $ k $ , separated by space ( $ 1 \\le k \\le n \\le 1024 $ , $ k $ and $ n $ are powers of two).\n\nIt must hold that $ \\dfrac{3n^2}{2k} \\le 15\\ 000 $ .\n\nThe third line should contain $ n $ integers $ a_1, a_2, \\ldots, a_n $ , separated by spaces ( $ 1 \\le a_i \\le n $ ).",
    "samples": [
        [
            "4 2\nN\nN\nY\nN\nN\nN\nN",
            "? 1\n? 2\n? 3\n? 4\nR\n? 4\n? 1\n? 2\n! 3"
        ],
        [
            "8 8\nN\nN\nN\nN\nY\nY",
            "? 2\n? 6\n? 4\n? 5\n? 2\n? 5\n! 6"
        ]
    ],
    "hint": "In the first example, the array is $ a = [1, 4, 1, 3] $ . The city produces $ 3 $ different varieties of coffee ( $ 1 $ , $ 3 $ and $ 4 $ ).\n\nThe successive varieties of coffee tasted by your friend are $ 1, 4, \\textbf{1}, 3, 3, 1, 4 $ (bold answers correspond to Y answers). Note that between the two ? 4 asks, there is a reset memory request R, so the answer to the second ? 4 ask is N. Had there been no reset memory request, the answer to the second ? 4 ask is Y.\n\nIn the second example, the array is $ a = [1, 2, 3, 4, 5, 6, 6, 6] $ . The city produces $ 6 $ different varieties of coffee.\n\nThe successive varieties of coffee tasted by your friend are $ 2, 6, 4, 5, \\textbf{2}, \\textbf{5} $ .",
    "translation": "**\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002**\r\n\r\n\u7ed9\u5b9a\u6b63\u6574\u6570$n,k$\u3002\u6709$n$\u4e2a\u6570$a_1,a_2,\\dots,a_n$\u521d\u59cb\u672a\u77e5\uff0c\u6709\u4e00\u961f\u5217$Q$\u521d\u59cb\u4e3a\u7a7a\u3002\r\n\r\n\u6bcf\u6b21\u67e5\u8be2\u4f60\u53ef\u4ee5\u7ed9\u51fa\u4e00\u4e2a\u7f16\u53f7$x$\uff0c\u4ea4\u4e92\u7cfb\u7edf\u4f1a\u4f9d\u6b21\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a\r\n\r\n- \u544a\u8bc9\u4f60\u5f53\u524d$Q$\u4e2d\u662f\u5426\u6709\u4e0e$a_x$\u76f8\u540c\u7684\u6570\r\n- \u5c06$a_x$\u653e\u5165$Q$\u7684\u5c3e\u90e8\r\n- \u5982\u679c\u6b64\u65f6$Q$\u4e2d\u5143\u7d20\u591a\u4e8e$k$\u4e2a\uff0c\u5f39\u51fa\u961f\u9996\u5143\u7d20\r\n\r\n\u6b64\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u91cd\u7f6e\u961f\u5217\uff0c\u8fd9\u5c06\u4f7f\u5f97$Q$\u4e2d\u6240\u6709\u5143\u7d20\u88ab\u5f39\u51fa\u3002**\u91cd\u7f6e\u961f\u5217\u4e0d\u7b97\u5165\u67e5\u8be2\u6b21\u6570\u3002**\r\n\r\n\u73b0\u8bf7\u4f60\u6c42\u51fa$a_1,a_2,\\dots,a_n$\u4e2d\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u6570\u3002\u8981\u6c42\u4f60\u7684\u67e5\u8be2\u6b21\u6570\u4e0d\u8d85\u8fc7$\\frac{3n^2}{2k}$\uff0c\u91cd\u7f6e\u6b21\u6570\u4e0d\u8d85\u8fc7$30000$\u3002\r\n\r\n\u4fdd\u8bc1$n,k$\u662f$2$\u7684\u6574\u6570\u6b21\u5e42\uff0c\u5e76\u4e14$\\frac{3n^2}{2k}\\le 15000$\u3002\r\n\r\n*Translated by Caro23333*"
}