{
    "description": "As Famil Door\u2019s birthday is coming, some of his friends (like Gabi) decided to buy a present for him. His friends are going to buy a string consisted of round brackets since Famil Door loves string of brackets of length $ n $ more than any other strings!\n\nThe sequence of round brackets is called valid if and only if:\n\n1. the total number of opening brackets is equal to the total number of closing brackets;\n2. for any prefix of the sequence, the number of opening brackets is greater or equal than the number of closing brackets.\n\nGabi bought a string $ s $ of length $ m $ ( $ m<=n $ ) and want to complete it to obtain a valid sequence of brackets of length $ n $ . He is going to pick some strings $ p $ and $ q $ consisting of round brackets and merge them in a string $ p+s+q $ , that is add the string $ p $ at the beginning of the string $ s $ and string $ q $ at the end of the string $ s $ .\n\nNow he wonders, how many pairs of strings $ p $ and $ q $ exists, such that the string $ p+s+q $ is a valid sequence of round brackets. As this number may be pretty large, he wants to calculate it modulo $ 10^{9}+7 $ .",
    "inputFormat": "First line contains $ n $ and $ m $ ( $ 1<=m<=n<=100000,n-m<=2000 $ ) \u2014 the desired length of the string and the length of the string bought by Gabi, respectively.\n\nThe second line contains string $ s $ of length $ m $ consisting of characters '(' and ')' only.",
    "outputFormat": "Print the number of pairs of string $ p $ and $ q $ such that $ p+s+q $ is a valid sequence of round brackets modulo $ 10^{9}+7 $ .",
    "samples": [
        [
            "4 1\n(\n",
            "4\n"
        ],
        [
            "4 4\n(())\n",
            "1\n"
        ],
        [
            "4 3\n(((\n",
            "0\n"
        ]
    ],
    "hint": "In the first sample there are four different valid pairs:\n\n1. $ p= $ \"(\", $ q= $ \"))\"\n2. $ p= $ \"()\", $ q= $ \")\"\n3. $ p= $ \"\", $ q= $ \"())\"\n4. $ p= $ \"\", $ q= $ \")()\"\n\nIn the second sample the only way to obtain a desired string is choose empty $ p $ and $ q $ .\n\nIn the third sample there is no way to get a valid sequence of brackets.",
    "translation": "## \u63cf\u8ff0\n\nFamily Door \u7684\u751f\u65e5\u5c31\u8981\u5230\u4e86\uff0cGabi\uff08Family Door\u7684\u597d\u670b\u53cb\uff09\u60f3\u8981\u7ed9\u4ed6\u4e70\u4e00\u4e2a\u793c\u7269\u3002Gabi\u51b3\u5b9a\u4e70\u4e00\u4e2a\u53ea\u5305\u542b '('\u3001')' \u7684\u5b57\u7b26\u4e32\uff0c\u6bd5\u7adf Family Door \u6700\u559c\u6b22\u7684\u5b57\u7b26\u4e32\u662f\u957f\u5ea6\u4e3a $n$ \u7684\u53ea\u5305\u542b '('\u3001')' \u7684\u5b57\u7b26\u4e32\u3002\n\n\u6211\u4eec\u79f0\u4e00\u4e2a\u53ea\u5305\u542b '('\u3001')' \u7684\u5b57\u7b26\u4e32\u201c\u6709\u6548\u201d\u5f53\u4e14\u4ec5\u5f53\uff1a\n1. '('\u7684\u6570\u91cf\u7b49\u4e8e')'\u7684\u6570\u91cf\uff1b\n2. \u5bf9\u4e8e\u8be5\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u524d\u7f00\uff0c\u5747\u6ee1\u8db3'('\u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e')'\u7684\u6570\u91cf\uff1b\n\nGabi \u4e70\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a $m$ \u7684\u53ea\u5305\u542b '('\u3001')' \u7684\u5b57\u7b26\u4e32 $S$\u3002\u4e3a\u4e86\u4f7f\u5b83\u7684\u957f\u5ea6\u8fbe\u5230 $n$ \uff0cGabi\u8981\u6784\u9020\u4e24\u4e2a\u53ea\u5305\u542b'('\u3001')'\u7684\u5b57\u7b26\u4e32 $P,Q$\uff0c\u7136\u540e\u5c06 $P,S,Q$ **\u987a\u6b21**\u8fde\u63a5\u5f97\u5230\u5b57\u7b26\u4e32 $S'$ \u3002\n\n\u7ed9\u51faGabi\u4e70\u7684\u5b57\u7b26\u4e32 $S$\uff0c\u8981\u4f7f $S'$ \u6709\u6548\uff0cGabi\u6709\u591a\u5c11\u79cd\u6784\u9020 $P,Q$ \u7684\u65b9\u6848\uff1f\uff08$P,Q$\u90fd\u53ef\u4ee5\u4e3a\u7a7a\uff09\u3002\n\n## \u8f93\u5165\n\u7b2c\u4e00\u884c\u5305\u62ec\u6574\u6570 $n,m$\uff1b\u7b2c\u4e8c\u884c\u4e3a\u957f\u5ea6\u4e3a $m$ \u7684\u5b57\u7b26\u4e32 $S$\u3002\n\n## \u8f93\u51fa\n\u8f93\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u6784\u9020 $P,Q$ \u7684\u65b9\u6848\u6570\uff0c\u7b54\u6848\u5bf9 $(10^9+7)$ \u53d6\u6a21\u3002\n\n## \u6570\u636e\u89c4\u6a21\n\n$1\\leq m\\leq n\\leq 100000,n-m\\leq 2000$"
}