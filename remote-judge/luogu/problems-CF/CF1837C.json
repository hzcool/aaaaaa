{
    "description": "You are given a string $ s $ consisting of the characters 0, 1 and/or ?. Let's call it a pattern.\n\nLet's say that the binary string (a string where each character is either 0 or 1) matches the pattern if you can replace each character ? with 0 or 1 (for each character, the choice is independent) so that the strings become equal. For example, 0010 matches ?01?, but 010 doesn't match 1??, ??, or ????.\n\nLet's define the cost of the binary string as the minimum number of operations of the form \"reverse an arbitrary contiguous substring of the string\" required to sort the string in non-descending order.\n\nYou have to find a binary string with the minimum possible cost among those that match the given pattern. If there are multiple answers, print any of them.",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1 \\le t \\le 3 \\cdot 10^4 $ ) \u2014 the number of test cases.\n\nThe first and only line of each test case contains the string $ s $ ( $ 1 \\le |s| \\le 3 \\cdot 10^5 $ ) consisting of characters 0, 1, and/or ?.\n\nThe sum of the string lengths over all test cases does not exceed $ 3 \\cdot 10^5 $ .",
    "outputFormat": "For each test case, print a binary string with the minimum possible cost among those that match the given pattern. If there are multiple answers, print any of them.",
    "samples": [
        [
            "4\n??01?\n10100\n1??10?\n0?1?10?10",
            "00011\n10100\n111101\n011110010"
        ]
    ],
    "hint": "In the first test case of the example, the cost of the resulting string is $ 0 $ .\n\nIn the second test case, the cost of the resulting string is $ 2 $ : we can reverse the substring from the $ 1 $ -st character to the $ 5 $ -th character, and we obtain the string 00101. Then we reverse the substring from the $ 3 $ -rd to the $ 4 $ -th character, and we obtain the string 00011, which is sorted in non-descending order.",
    "translation": "\u7ed9\u5b9a\u7531 `1` `0` `?` \u6240\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u7528 `0` \u6216 `1` \u66ff\u6362 `?`\u3002\n\n\u6211\u4eec\u5c06 $s_{l},s_{l+1},\\dots,s_r$ \u53cd\u8f6c\u6210\u4e3a\u4e00\u6b21\u64cd\u4f5c\u3002\n\n\u4f60\u8981\u4f7f\u901a\u8fc7\u201c\u53cd\u8f6c\u201d\u64cd\u4f5c\u4f7f\u539f\u5b57\u7b26\u4e32\u6210\u4e3a\u5347\u5e8f\u7684\u64cd\u4f5c\u6b21\u6570\u5c3d\u53ef\u80fd\u7684\u5c0f\u3002\n\n\u95ee\u6700\u7ec8\u6784\u9020\u51fa\u7684\u5b57\u7b26\u4e32\uff0c\u6709\u591a\u89e3\u8f93\u51fa\u5176\u4e00\u3002"
}