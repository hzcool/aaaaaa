{
    "description": "You are given circular array $ a_{0},a_{1},...,a_{n-1} $ . There are two types of operations with it:\n\n- $ inc(lf,rg,v) $ \u2014 this operation increases each element on the segment $ [lf,rg] $ (inclusively) by $ v $ ;\n- $ rmq(lf,rg) $ \u2014 this operation returns minimal value on the segment $ [lf,rg] $ (inclusively).\n\nAssume segments to be circular, so if $ n=5 $ and $ lf=3,rg=1 $ , it means the index sequence: $ 3,4,0,1 $ .\n\nWrite program to process given sequence of operations.",
    "inputFormat": "The first line contains integer $ n $ ( $ 1<=n<=200000 $ ). The next line contains initial state of the array: $ a_{0},a_{1},...,a_{n-1} $ ( $ -10^{6}<=a_{i}<=10^{6} $ ), $ a_{i} $ are integer. The third line contains integer $ m $ ( $ 0<=m<=200000 $ ), $ m $ \u2014 the number of operartons. Next $ m $ lines contain one operation each. If line contains two integer $ lf,rg $ ( $ 0<=lf,rg<=n-1 $ ) it means $ rmq $ operation, it contains three integers $ lf,rg,v $ ( $ 0<=lf,rg<=n-1;-10^{6}<=v<=10^{6} $ ) \u2014 $ inc $ operation.",
    "outputFormat": "For each $ rmq $ operation write result for it. Please, do not use %lld specificator to read or write 64-bit integers in C++. It is preffered to use cout (also you may use %I64d).",
    "samples": [
        [
            "4\n1 2 3 4\n4\n3 0\n3 0 -1\n0 1\n2 1\n",
            "1\n0\n0\n"
        ]
    ],
    "hint": "",
    "translation": "\u3010\u9898\u76ee\u5927\u610f\u3011\n\n\u7ed9\u5b9a\u4e00\u4e2a\u73af\u5f62\u6570\u5217 $a_0,a_1,\\dots,a_{n-1}$\u3002\n\n\u73b0\u5728\u6709 $2$ \u79cd\u64cd\u4f5c\uff1a\n\n+ $\\operatorname{inc}(lf,rg,v)$\uff1a\u5c06\u533a\u95f4 $[lf,rg]$ \u4e2d\u7684\u6bcf\u4e2a\u6570\u589e\u52a0 $v$\u3002\n+ $\\operatorname{rmq}(lf,rg)$\uff1a\u6c42\u51fa\u533a\u95f4 $[lf,rg]$ \u4e2d\u7684\u6700\u5c0f\u503c\u3002\n\n\u56e0\u4e3a\u6570\u5217\u662f\u73af\u5f62\u7684\uff0c\u6240\u4ee5\u5f53 $n=5$\uff0c$lf=3$\uff0c$rg=1$ \u65f6\uff0c\u8868\u793a\u7684\u533a\u95f4\u4e0b\u6807\u4e3a $3,4,0,1$\u3002\n\nTranslated by \u5c0f\u6050\u3002\n\n\u3010\u8f93\u5165\u3011\n\n\u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570 $n$\u3002\n\n\u7b2c\u4e8c\u884c\u4e3a\u6570\u5217\u7684\u521d\u59cb\u72b6\u6001 $a_0,a_1,\\dots,a_{n-1}$\uff0c$a_i$ \u662f\u6574\u6570\u3002\n\n\u7b2c\u4e09\u884c\u6709\u4e00\u4e2a\u6574\u6570 $m$\uff0c\u8868\u793a\u64cd\u4f5c\u6b21\u6570\u3002\n\n\u63a5\u4e0b\u6765m\u884c\u6bcf\u884c\u4e3a\u4e00\u4e2a\u64cd\u4f5c\u3002\u5982\u679c\u8be5\u884c\u6709\u4e24\u4e2a\u6574\u6570 $lf$\uff0c$rg$ \u8868\u793a $\\operatorname{rmq}$ \u64cd\u4f5c\uff0c\u5982\u679c\u8be5\u884c\u6709\u4e09\u4e2a\u6574\u6570 $lf$\uff0c$rg$\uff0c$v$ \u8868\u793a $\\operatorname{inc}$ \u64cd\u4f5c\u3002\n\n\u3010\u8f93\u51fa\u3011\n\n\u5bf9\u4e8e\u6bcf\u4e2a $\\operatorname{rmq}$ \u64cd\u4f5c\u8f93\u51fa\u4e00\u884c\u7b54\u6848\u3002"
}