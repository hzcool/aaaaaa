{
    "description": "Berland is facing dark times again. The army of evil lord Van de Mart is going to conquer the whole kingdom. To the council of war called by the Berland's king Valery the Severe came $ n $ knights. After long discussions it became clear that the kingdom has exactly $ n $ control points (if the enemy conquers at least one of these points, the war is lost) and each knight will occupy one of these points.\n\nBerland is divided into $ m+1 $ regions with $ m $ fences, and the only way to get from one region to another is to climb over the fence. Each fence is a circle on a plane, no two fences have common points, and no control point is on the fence. You are given $ k $ pairs of numbers $ a_{i} $ , $ b_{i} $ . For each pair you have to find out: how many fences a knight from control point with index $ a_{i} $ has to climb over to reach control point $ b_{i} $ (in case when Van de Mart attacks control point $ b_{i} $ first). As each knight rides a horse (it is very difficult to throw a horse over a fence), you are to find out for each pair the minimum amount of fences to climb over.",
    "inputFormat": "The first input line contains three integers $ n $ , $ m $ , $ k $ ( $ 1<=n,m<=1000 $ , $ 0<=k<=100000 $ ). Then follow $ n $ lines, each containing two integers $ Kx_{i} $ , $ Ky_{i} $ ( $ -10^{9}<=Kx_{i},Ky_{i}<=10^{9} $ ) \u2014 coordinates of control point with index $ i $ . Control points can coincide.\n\nEach of the following $ m $ lines describes fence with index $ i $ with three integers $ r_{i} $ , $ Cx_{i} $ , $ Cy_{i} $ ( $ 1<=r_{i}<=10^{9} $ , $ -10^{9}<=Cx_{i},Cy_{i}<=10^{9} $ ) \u2014 radius and center of the circle where the corresponding fence is situated.\n\nThen follow $ k $ pairs of integers $ a_{i} $ , $ b_{i} $ ( $ 1<=a_{i},b_{i}<=n $ ), each in a separate line \u2014 requests that you have to answer. $ a_{i} $ and $ b_{i} $ can coincide.",
    "outputFormat": "Output exactly $ k $ lines, each containing one integer \u2014 the answer to the corresponding request.",
    "samples": [
        [
            "2 1 1\n0 0\n3 3\n2 0 0\n1 2\n",
            "1\n"
        ],
        [
            "2 3 1\n0 0\n4 4\n1 0 0\n2 0 0\n3 0 0\n1 2\n",
            "3\n"
        ]
    ],
    "hint": "",
    "translation": "\u4f2f\u5170\u56fd\u4e0d\u5f97\u4e0d\u53c8\u4e00\u6b21\u9762\u5bf9\u9ed1\u2642\u6697\u52bf\u529b\u7684\u964d\u4e34\u3002\u90aa\u6076\u9886\u4e3b~~Van\u2642De\u2642Mart~~\u8303\u00b7\u5fb7\u00b7\u9a6c\u7279\u6b63\u5728\u8ba1\u5212\u5f81\u670d\u6574\u4e2a\u738b\u56fd\u3002\u738b\u56fd\u6210\u7acb\u4e86\u7531\u4f2f\u5170\u56fd\u738b\u74e6\u83b1\u4e3d\u9886\u5bfc\u7684\u7406\u4e8b\u4f1a\u3002\u7406\u4e8b\u4f1a\u7531$n$\u4e2a\u9a91\u58eb\u7ec4\u6210\u3002\u7ecf\u8fc7\u4e00\u756a\u6fc0\u70c8\u7684\u8ba8\u8bba\uff0c\u4ed6\u4eec\u628a\u6574\u4e2a\u56fd\u5bb6\u5206\u6210\u4e86$n$\u4e2a\u6218\u7565\u76ee\u6807\u70b9\uff0c\uff08\u5982\u679c\u9ed1\u6697\u52bf\u529b\u63a7\u5236\u4e86\u81f3\u5c11\u4e00\u4e2a\u6218\u7565\u76ee\u6807\u70b9\uff0c\u6218\u4e89\u5c31\u5931\u8d25\u4e86\uff09\n\n\u4f2f\u5170\u56fd\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u7531$m+1$\u4e2a\u533a\u57df\u548c$m$\u4e2a\u6805\u680f\u7ec4\u6210\u7684\u3002\u540c\u65f6\uff0c\u4ece\u4e00\u4e2a\u533a\u57df\u5230\u8fbe\u53e6\u4e00\u4e2a\u533a\u57df\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u7ffb\u8fc7\u6805\u680f\u3002\u6bcf\u4e2a\u6805\u680f\u90fd\u662f\u540c\u4e00\u4e2a\u5e73\u9762\u4e0a\u7684\u5706\uff0c\u5e76\u4e14\u4efb\u610f\u4e24\u4e2a\u6805\u680f\u4e4b\u95f4\u90fd\u6ca1\u6709\u4ea4\u53c9\u70b9\uff0c\u540c\u65f6\u4fdd\u8bc1\u6240\u6709\u6218\u7565\u76ee\u6807\u70b9\u90fd`\u4e0d\u5728`\u6805\u680f\u4e0a\u3002\u6211\u4eec\u4f1a\u7ed9\u4f60$k$\u5bf9\u6574\u6570$ai, bi$\uff0c\u5bf9\u4e8e\u6bcf\u5bf9\u6574\u6570\uff0c\u4f60\u90fd\u8981\u89e3\u51b3\uff1a\u5982\u679c\u4e00\u4e2a\u9a91\u58eb\u60f3\u4ece\u6218\u7565\u63a7\u5236\u70b9$ai$\u8d76\u5230$bi$\uff0c\uff08\u4e3a\u4e86\u9632\u6b62\u8303\u00b7\u5fb7\u00b7\u9a6c\u7279\u7a81\u88ad\u63a7\u5236\u70b9bi\uff09\uff0c\u800c\u6bcf\u4e2a\u9a91\u58eb\u90fd\u9a91\u7740\u4e00\u5339\u9a6c\uff08\u628a\u9a6c\u4ece\u6805\u680f\u4e0a\u6254\u8fc7\u53bb\u592a\u96be\u4e86\uff09\uff0c\u90a3\u4e48\uff0c\u4ed6\u6700\u5c11\u722c\u8fc7\u591a\u5c11\u6805\u680f\uff1f\n\n## \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6b63\u6574\u6570$n,m$\uff08$1 \u2264 n,m \u2264 1000$\uff0c $0 \u2264 k \u2264 10000$\uff09\u63a5\u4e0b\u6765$n$\u884c\uff0c \u4e24\u4e2a\u6570\uff0c$Kx_i, Ky_i$\uff0c\uff08$-1 * 10^9 \u2264 Kx_i, Ky_i \u2264 1 * 10^9$\uff09\u63cf\u8ff0\u7b2c$i$\u4e2a\u63a7\u5236\u70b9\u7684\u5750\u6807\u3002\n\n\u63a5\u4e0b\u6765$m$\u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u4e00\u4e2a\u6805\u680f\uff0c\u4e00\u4e2a\u6805\u680f\u6709\u4e09\u4e2a\u53c2\u6570\uff0c$r_i, Cx_i, Cy_i$\u5206\u522b\u8868\u793a\u8fd9\u4e2a\u6805\u680f\u7684\u76f4\u5f84\u548c\u5750\u6807\u3002\uff08$-1 * 10^9 \u2264 Cx_i, Cy_i \u2264 1 * 10^9$\uff0c $1 \u2264 r_i \u2264 1 * 10^9$\uff09\n\n\u5728\u63a5\u4e0b\u6765$k$\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\uff0c\u7b2c$n+m+j$\u884c\u8868\u793a$a_i$\uff0c$b_i$\uff0c\uff08\u610f\u4e49\u524d\u9762\u5df2\u7ecf\u8bf4\u4e86\uff09\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\n\u6b63\u597dk\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u5bf9\u8fd9$k$\u6b21\u8be2\u95ee\u7684\u7b54\u6848\n\n_\u7ffb\u8bd1 By \u7684\u5362_\n\n"
}