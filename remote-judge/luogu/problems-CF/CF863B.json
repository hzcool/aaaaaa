{
    "description": "Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.\n\nNow the party is ready to start its journey, but firstly they have to choose kayaks. There are $ 2\u00b7n $ people in the group (including Vadim), and they have exactly $ n-1 $ tandem kayaks (each of which, obviously, can carry two people) and $ 2 $ single kayaks. $ i $ -th person's weight is $ w_{i} $ , and weight is an important matter in kayaking \u2014 if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.\n\nFormally, the instability of a single kayak is always $ 0 $ , and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.\n\nHelp the party to determine minimum possible total instability!",
    "inputFormat": "The first line contains one number $ n $ ( $ 2<=n<=50 $ ).\n\nThe second line contains $ 2\u00b7n $ integer numbers $ w_{1} $ , $ w_{2} $ , ..., $ w_{2n} $ , where $ w_{i} $ is weight of person $ i $ ( $ 1<=w_{i}<=1000 $ ).",
    "outputFormat": "Print minimum possible total instability.",
    "samples": [
        [
            "2\n1 2 3 4\n",
            "1\n"
        ],
        [
            "4\n1 3 4 6 3 4 100 200\n",
            "5\n"
        ]
    ],
    "hint": "",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\nVadim\u771f\u7684\u5f88\u559c\u6b22\u65c5\u884c\u3002\uff08\u6240\u4ee5\uff09\u5f53\u4ed6\u542c\u8bf4\u5728\u4ed6\u7684\u5c0f\u9547\u9644\u8fd1\u6709\u4e00\u4e2a\u76ae\u5212\u8247\u5927\u8d5b\u7684\u65f6\u5019\uff0c\u662f\u5341\u5206\u6fc0\u52a8\u7684\uff0c\u6240\u4ee5\uff0c\u4ed6\u53c2\u52a0\u4e86\u8fd9\u573a\u76ae\u5212\u8247\u7684\u805a\u4f1a\u3002\n\n\u73b0\u5728\u805a\u4f1a\u5df2\u7ecf\u51c6\u5907\u597d\u5f00\u59cb\u4e86\u4ed6\u4eec\u7684\u76ae\u5212\u8247\u4e4b\u65c5\u4e86\uff0c\u4f46\u9996\u5148\uff0c\u4ed6\u4eec\u9700\u8981\u9009\u62e9\u76ae\u5212\u8247\u3002\u8fd9\u6709 $2n$ \u4e2a\u4eba\uff08\u5305\u62ecVadim\uff09\uff0c\u5e76\u4e14\u4ed6\u4eec\u6709$n-1$ \u4e2a\u53cc\u4eba\u76ae\u5212\u8247\uff08\u5f53\u7136\uff0c\u6bcf\u4e2a\u53ef\u4ee5\u5750\u4e24\u4e2a\u4eba\uff09\u548c$2$ \u4e2a\u5355\u4eba\u76ae\u5212\u8247\u3002\u7b2c$i$ \u4e2a\u4eba\u7684\u4f53\u91cd\u662f$w_i$ \uff0c\u5e76\u4e14\u4f53\u91cd\u5728\u76ae\u5212\u8247\u4e2d\u662f\u4e00\u4ef6\u91cd\u8981\u7684\u4e8b\u2014\u2014\u5982\u679c\u5750\u5728\u540c\u4e00\u4e2a\u53cc\u4eba\u76ae\u5212\u8247\u4e0a\u7684\u4e24\u4eba\u7684\u4f53\u91cd\u76f8\u5dee\u592a\u591a\uff0c\u76ae\u5212\u8247\u5c31\u4f1a\u503e\u8986\u3002\u5f53\u7136\uff0c\u4eba\u4eec\u60f3\u8981\u5206\u914d\u4ed6\u4eec\u7684\u5ea7\u4f4d\u6765\u6700\u5c0f\u5316\u4f7f\u76ae\u5212\u8247\u503e\u8986\u7684\u53ef\u80fd\u6027\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u5355\u4eba\u76ae\u5212\u8247\u7684\u4e0d\u7a33\u5b9a\u6027\u603b\u662f$0$ \uff0c\u5e76\u4e14\u53cc\u4eba\u76ae\u5212\u8247\u7684\u4e0d\u7a33\u5b9a\u6027\u4e3a\u5728\u76ae\u5212\u8247\u4e0a\u4e24\u4eba\u4f53\u91cd\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u3002\u5728\u6574\u573a\u65c5\u884c\u4e2d\u7684\u4e0d\u7a33\u5b9a\u503c\u5c31\u662f\u6240\u6709\u76ae\u5212\u8247\u4e0d\u7a33\u5b9a\u503c\u7684\u548c\u3002\n\n\u5e2e\u52a9\u8fd9\u4e2a\u805a\u4f1a\u627e\u51fa\u6700\u5c0f\u7684\u603b\u4e0d\u7a33\u5b9a\u503c\uff01\n\n### \u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570$n$ \uff08$2\\leq n\\leq 50$ \uff09\n\uff0c\u7b2c\u4e8c\u884c\u5305\u542b$2n$ \u4e2a\u6574\u6570$w_1,w_2,\\dots,w_{2n}$ \uff0c\u5176\u4e2d$w_i$ \u8868\u793a\u7b2c$i$ \u4e2a\u7684\u4f53\u91cd\uff08$1\\leq w_i\\leq1000$ \uff09\n\n### \u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u5c0f\u4e0d\u7a33\u5b9a\u503c\n\n\u611f\u8c22@Khassar \u63d0\u4f9b\u7684\u7ffb\u8bd1"
}