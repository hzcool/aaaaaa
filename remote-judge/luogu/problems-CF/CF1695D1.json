{
    "description": "The only difference between this problem and D2 is the bound on the size of the tree.\n\nYou are given an unrooted tree with $ n $ vertices. There is some hidden vertex $ x $ in that tree that you are trying to find.\n\nTo do this, you may ask $ k $ queries $ v_1, v_2, \\ldots, v_k $ where the $ v_i $ are vertices in the tree. After you are finished asking all of the queries, you are given $ k $ numbers $ d_1, d_2, \\ldots, d_k $ , where $ d_i $ is the number of edges on the shortest path between $ v_i $ and $ x $ . Note that you know which distance corresponds to which query.\n\nWhat is the minimum $ k $ such that there exists some queries $ v_1, v_2, \\ldots, v_k $ that let you always uniquely identify $ x $ (no matter what $ x $ is).\n\nNote that you don't actually need to output these queries.",
    "inputFormat": "Each test contains multiple test cases. The first line contains the number of test cases $ t $ ( $ 1 \\le t \\le 100 $ ). Description of the test cases follows.\n\nThe first line of each test case contains a single integer $ n $ ( $ 1 \\le n \\le 2000 $ ) \u2014 the number of vertices in the tree.\n\nEach of the next $ n-1 $ lines contains two integers $ x $ and $ y $ ( $ 1 \\le x, y \\le n $ ), meaning there is an edges between vertices $ x $ and $ y $ in the tree.\n\nIt is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $ n $ over all test cases does not exceed $ 2000 $ .",
    "outputFormat": "For each test case print a single nonnegative integer, the minimum number of queries you need, on its own line.",
    "samples": [
        [
            "3\n1\n2\n1 2\n10\n2 4\n2 1\n5 7\n3 10\n8 6\n6 1\n1 3\n4 7\n9 6",
            "0\n1\n2"
        ]
    ],
    "hint": "In the first test case, there is only one vertex, so you don't need any queries.\n\nIn the second test case, you can ask a single query about the node $ 1 $ . Then, if $ x = 1 $ , you will get $ 0 $ , otherwise you will get $ 1 $ .",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\n\u6b64\u95ee\u9898\u4e0e[CF1695D2 Tree Queries (Hard Version)](https://www.luogu.com.cn/problem/CF1695D2)\u7684\u552f\u4e00\u533a\u522b\u662f\u6811\u7684\u5927\u5c0f\u7684\u9650\u5b9a\u3002\n\n\u7ed9\u5b9a\u4e00\u68f5\u65e0\u6839\u6811\uff0c\u6709 $ n $ \u4e2a\u9876\u70b9\u3002\u5728\u8fd9\u68f5\u6811\u4e0a\u6709\u4e00\u4e2a\u9876\u70b9 $ x $ ,\u4f60\u5e0c\u671b\u627e\u5230\u5b83\u3002\n\n\u8981\u627e\u5230 $ x $ \uff0c\u4f60\u53ef\u4ee5\u8fdb\u884c $ k $ \u6b21\u67e5\u8be2 $ v_1 , v_2 \uff0c\\ldots , v_k $ (\u5176\u4e2d $ v_i $ \u662f\u6811\u4e2d\u7684\u5404\u4e2a\u9876\u70b9)\u3002\u5f53\u4f60\u8fdb\u884c\u5b8c\u6240\u6709\u67e5\u8be2\u540e\uff0c\u4f60\u4f1a\u5f97\u5230 $ k $ \u4e2a\u6570\u5b57 $ d_1 , d_2 \uff0c\\ldots , d_k $ \uff0c( $ d_i $ \u662f $ v_i $ \u548c $ x $ \u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u6570)\u3002\u6ce8\u610f\uff0c\u60a8\u77e5\u9053\u54ea\u4e2a\u8ddd\u79bb\u5bf9\u5e94\u4e8e\u54ea\u4e2a\u67e5\u8be2\u3002\n\n\u8bf7\u4f60\u6c42\u51fa\u6700\u5c0f\u7684 $ k $ \uff0c\u4f7f\u5b58\u5728\u8fd9\u6837\u7684\u4e00\u4e9b\u67e5\u8be2 $ v_1 , v_2 \uff0c\\ldots , v_k $ \uff0c\u8ba9\u4f60\u603b\u80fd\u627e\u5230\u552f\u4e00\u7684\u4e00\u4e2a\u8282\u70b9 $ x $ (\u65e0\u8bba $ x $ \u662f\u4ec0\u4e48)\u3002\n\n\u6ce8\u610f\uff0c\u4f60\u4e0d\u9700\u8981\u8f93\u51fa\u8fd9\u4e9b\u67e5\u8be2\u3002\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u5305\u542b\u591a\u7ec4\u6570\u636e\u3002\n\n\u7b2c\u4e00\u884c\u4e3a\u6570\u636e\u7684\u7ec4\u6570 $ t $ ( $ 1 \\le t \\le 100 $ )\u3002\n\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u7684\u63cf\u8ff0\u5982\u4e0b\u3002\n\n\u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 $ n $  ( $ 1 \\le n \\le 2000 $ ) \u5373\u6811\u4e2d\u7684\u9876\u70b9\u6570\u3002\n\n\u7136\u540e\u6709 $ n - 1 $ \u884c,\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 $ x $ \u548c $ y $ ( $ 1 \\le x, y \\le n $ )\uff0c\u610f\u5473\u7740\u6811\u4e2d\u9876\u70b9 $ x $ \u548c $ y $ \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002\n\n\u6570\u636e\u4fdd\u8bc1\u6240\u7ed9\u7684\u8fb9\u4e00\u5b9a\u5f62\u6210\u4e00\u68f5\u6811\u3002\n\n\u6570\u636e\u4fdd\u8bc1\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u4e2d $ n $ \u7684\u603b\u548c\u4e0d\u8d85\u8fc7 $ 2000 $ \u3002\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u5728\u6b64\u884c\u8f93\u51fa\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u5373\u4e3a\u4f60\u9700\u8981\u7684\u6700\u5c0f\u67e5\u8be2\u6570\u3002(\u5373\u6bcf\u4e00\u884c\u5bf9\u5e94\u8f93\u51fa\u4e00\u4e2a\u67e5\u8be2\u6570\u5b57)\n\n### \u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n#### \u6837\u4f8b\u8f93\u5165 #1\n\n```plain\n3\n1\n2\n1 2\n10\n2 4\n2 1\n5 7\n3 10\n8 6\n6 1\n1 3\n4 7\n9 6\n```\n\n#### \u6837\u4f8b\u8f93\u51fa #1\n\n```plain\n0\n1\n2\n```\n\n### \u63d0\u793a\n\n\u5728\u7b2c\u4e00\u7ec4\u6570\u636e\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u9876\u70b9\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4efb\u4f55\u67e5\u8be2\u3002\n\n\u5728\u7b2c\u4e8c\u7ec4\u6570\u636e\u4e2d\uff0c\u4f60\u53ef\u4ee5\u8fdb\u884c\u5173\u4e8e\u8282\u70b9 $ 1 $ \u7684\u5355\u4e2a\u67e5\u8be2\u4ece\u800c\u5f97\u5230 $ x $ \u8282\u70b9\u7684\u4fe1\u606f\u3002"
}