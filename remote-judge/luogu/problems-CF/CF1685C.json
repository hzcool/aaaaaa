{
    "description": "Alina has a bracket sequence $ s $ of length $ 2n $ , consisting of $ n $ opening brackets '(' and $ n $ closing brackets ')'. As she likes balance, she wants to turn this bracket sequence into a balanced bracket sequence.\n\nIn one operation, she can reverse any substring of $ s $ .\n\nWhat's the smallest number of operations that she needs to turn $ s $ into a balanced bracket sequence? It can be shown that it's always possible in at most $ n $ operations.\n\nAs a reminder, a sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters + and 1. For example, sequences (())(), (), and (()(())) are balanced, while )(, ((), and (()))( are not.",
    "inputFormat": "The first line of the input contains a single integer $ t $ ( $ 1 \\le t \\le 2 \\cdot 10^4 $ ) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $ n $ ( $ 1 \\le n \\le 10^5 $ ).\n\nThe second line of each test case contains a string $ s $ of length $ 2n $ , consisting of $ n $ opening and $ n $ closing brackets.\n\nThe sum of $ n $ over all test cases doesn't exceed $ 2\\cdot 10^5 $ .",
    "outputFormat": "For each test case, in the first line output a single integer $ k $ $ (0 \\le k \\le n) $ \u2014 the smallest number of operations required.\n\nThe $ i $ -th of the next $ k $ lines should contain two integers $ l_i, r_i $ ( $ 1 \\le l_i \\le r_i \\le 2n $ ), indicating that in the $ i $ -th operation, Alina will reverse the substring $ s_ls_{l+1} \\ldots s_{r-1}s_r $ . Here the numeration starts from $ 1 $ .\n\nIf there are multiple sequences of operations with the smallest length which transform the sequence into a balanced one, you can output any of them.",
    "samples": [
        [
            "3\n2\n(())\n5\n())((()))(\n6\n())((()))(()",
            "0\n2\n3 4\n9 10\n1\n2 11"
        ]
    ],
    "hint": "In the first test case, the string is already balanced.\n\nIn the second test case, the string will be transformed as follows: ())((()))( $ \\to $ ()()(()))( $ \\to $ ()()(())(), where the last string is balanced.\n\nIn the third test case, the string will be transformed to ((()))((())), which is balanced.",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\nAlina \u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $2n$ \u7684\u62ec\u53f7\u5e8f\u5217 $s$\uff0c\u7531 $n$ \u4e2a\u5de6\u62ec\u53f7 `(` \u548c $n$ \u4e2a\u53f3\u62ec\u53f7 `)` \u7ec4\u6210\u3002\u5979\u60f3\u628a\u8fd9\u4e2a\u62ec\u53f7\u5e8f\u5217\u53d8\u6210\u4e00\u4e2a\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u5b9a\u4e49\u4e3a\uff1a\u80fd\u901a\u8fc7\u63d2\u5165\u5b57\u7b26 `+` \u548c `1` \u4f7f\u4e4b\u6210\u4e3a\u5408\u6cd5\u6570\u5b66\u8868\u8fbe\u5f0f\u7684\u5e8f\u5217\u3002\u4f8b\u5982\uff0c\u5e8f\u5217 `(())()`\u3001`()` \u548c `(()(()))` \u662f\u5e73\u8861\u7684\uff0c\u800c `)(`\u3001`(()` \u548c `(()))(` \u5c31\u4e0d\u662f\u7684\u3002\n\n\u5728\u4e00\u6b21\u64cd\u4f5c\u4e2d\uff0c\u5979\u53ef\u4ee5\u53cd\u8f6c $s$ \u7684\u4efb\u610f\u5b50\u4e32\u3002\n\n\u8bf7\u6c42\u51fa\u6700\u5c11\u51e0\u6b21\u64cd\u4f5c\u53ef\u5c06 $s$ \u8f6c\u6362\u4e3a\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u603b\u662f\u80fd\u5728 $n$ \u6b21\u64cd\u4f5c\u4e2d\u5b8c\u6210\u3002\n\n### \u8f93\u5165\u683c\u5f0f\n\n**\u672c\u9898\u5355\u6d4b\u8bd5\u70b9\u6709\u591a\u7ec4\u6570\u636e\u3002**\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 $t$\uff08$1 \\le t \\le 2 \\cdot 10^4$\uff09\uff0c\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002\n\n\u6bcf\u7ec4\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a\n\n- \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 $n$\uff08$1 \\le n \\le 10^5$\uff09\uff0c\u542b\u4e49\u5982\u4e0a\u6240\u8ff0\u3002\n- \u7b2c\u4e8c\u884c\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a $2n$ \u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u7531 $n$ \u4e2a\u5de6\u62ec\u53f7 `(` \u548c $n$ \u4e2a\u53f3\u62ec\u53f7 `)` \u7ec4\u6210\u3002\n\n\u5728\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u4e2d\uff0c\u6240\u6709 $n$ \u7684\u603b\u548c\u4e0d\u8d85\u8fc7 $2\\cdot 10^5$\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570 $k$\uff08$0 \\le k \\le n$\uff09\uff0c\u8868\u793a\u6700\u5c11 $k$ \u6b21\u64cd\u4f5c\u53ef\u5c06 $s$ \u8f6c\u6362\u4e3a\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u5728\u63a5\u4e0b\u6765\u7684 $k$ \u884c\u4e2d\uff0c\u7b2c $i$ \u884c\u6709\u4e24\u4e2a\u6574\u6570 $l_i,r_i$\uff08$1 \\le l_i \\le r_i \\le 2n$\uff09\uff0c\u8868\u793a\u5728\u7b2c $i$ \u6b21\u64cd\u4f5c\u4e2d\uff0cAlina \u4f1a\u53cd\u8f6c\u5b50\u4e32 $s_{l}s_{l+1}\\cdots s_{r-1}s_{r}$\uff08\u5e8f\u5217\u4ece $1$ \u5f00\u59cb\u7f16\u53f7\uff09\u3002\n\n\u5982\u679c\u6709\u591a\u79cd\u65b9\u5f0f\u5c06\u539f\u5e8f\u5217\u8f6c\u6362\u4e3a\u5e73\u8861\u5e8f\u5217\uff0c\u8f93\u51fa\u5176\u4e2d\u4efb\u610f\u4e00\u79cd\u5373\u53ef\u3002\n\n### \u8bf4\u660e/\u63d0\u793a\n\n\u5728\u7b2c\u4e00\u7ec4\u6570\u636e\u4e2d\uff0c\u5b57\u7b26\u4e32\u5df2\u7ecf\u5e73\u8861\u3002\n\n\u5728\u7b2c\u4e8c\u7ec4\u6570\u636e\u4e2d\uff0c\u5b57\u7b26\u4e32\u8f6c\u6362\u5982\u4e0b\uff1a`())((()))(`$\\to$`()()(()))(`$\\to$`()()(())()`\uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5e73\u8861\u7684\u3002\n\n\u5728\u7b2c\u4e09\u7ec4\u6570\u636e\u4e2d\uff0c\u5b57\u7b26\u4e32\u6700\u7ec8\u5c06\u88ab\u8f6c\u6362\u4e3a `((()))((()))`\u3002"
}