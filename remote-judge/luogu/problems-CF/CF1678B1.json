{
    "description": "This is the easy version of the problem. The only difference between the two versions is that the harder version asks additionally for a minimum number of subsegments.\n\nTokitsukaze has a binary string $ s $ of length $ n $ , consisting only of zeros and ones, $ n $ is even.\n\nNow Tokitsukaze divides $ s $ into the minimum number of contiguous subsegments, and for each subsegment, all bits in each subsegment are the same. After that, $ s $ is considered good if the lengths of all subsegments are even.\n\nFor example, if $ s $ is \"11001111\", it will be divided into \"11\", \"00\" and \"1111\". Their lengths are $ 2 $ , $ 2 $ , $ 4 $ respectively, which are all even numbers, so \"11001111\" is good. Another example, if $ s $ is \"1110011000\", it will be divided into \"111\", \"00\", \"11\" and \"000\", and their lengths are $ 3 $ , $ 2 $ , $ 2 $ , $ 3 $ . Obviously, \"1110011000\" is not good.\n\nTokitsukaze wants to make $ s $ good by changing the values of some positions in $ s $ . Specifically, she can perform the operation any number of times: change the value of $ s_i $ to '0' or '1'( $ 1 \\leq i \\leq n $ ). Can you tell her the minimum number of operations to make $ s $ good?",
    "inputFormat": "The first contains a single positive integer $ t $ ( $ 1 \\leq t \\leq 10\\,000 $ ) \u2014 the number of test cases.\n\nFor each test case, the first line contains a single integer $ n $ ( $ 2 \\leq n \\leq 2 \\cdot 10^5 $ ) \u2014 the length of $ s $ , it is guaranteed that $ n $ is even.\n\nThe second line contains a binary string $ s $ of length $ n $ , consisting only of zeros and ones.\n\nIt is guaranteed that the sum of $ n $ over all test cases does not exceed $ 2 \\cdot 10^5 $ .",
    "outputFormat": "For each test case, print a single line with one integer \u2014 the minimum number of operations to make $ s $ good.",
    "samples": [
        [
            "5\n10\n1110011000\n8\n11001111\n2\n00\n2\n11\n6\n100110",
            "3\n0\n0\n0\n3"
        ]
    ],
    "hint": "In the first test case, one of the ways to make $ s $ good is the following.\n\nChange $ s_3 $ , $ s_6 $ and $ s_7 $ to '0', after that $ s $ becomes \"1100000000\", it can be divided into \"11\" and \"00000000\", which lengths are $ 2 $ and $ 8 $ respectively. There are other ways to operate $ 3 $ times to make $ s $ good, such as \"1111110000\", \"1100001100\", \"1111001100\".\n\nIn the second, third and fourth test cases, $ s $ is good initially, so no operation is required.",
    "translation": "### \u9898\u9762\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684 $0,1$ \u4e32\uff0c\u5982 \u201c11001111\u201d\u3002\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5206\u4e3a\u201c11\u201d\uff0c\u201c00\u201d\uff0c\u201c1111\u201d\uff0c\u5b83\u4eec\u7684\u957f\u5ea6\u90fd\u662f\u5076\u6570\uff0c\u6211\u4eec\u5c31\u79f0\u8fd9\u4e2a $0,1$ \u4e32\u4e3a\u597d\u7684\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u5206\u5206\u6bb5\u540e\u6bcf\u6bb5\u957f\u5ea6\u4e0d\u662f\u5076\u6570\uff0c\u6211\u4eec\u5c31\u79f0\u5176\u4e3a\u4e0d\u597d\u7684\u3002\n\n\u672c\u9898\u6709\u591a\u7ec4\u6570\u636e\uff0c\u5bf9\u4e8e\u4e48\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u5c06\u4e00\u4e2a\u4e0d\u597d\u7684 $0,1$ \u4e32\u53d8\u6210\u597d\u7684\u6240\u9700\u8981\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5c06 $0,1$ \u4e32\u4e2d\u4efb\u610f\u7684\u201c0\u201d\u6216\u201c1\u201d\u4fee\u6539\u6210\u201c0\u201d\u6216\u201c1\u201d\u3002\n\n### \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 $T$\uff0c\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002\n\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u5076\u6570 $n$\uff0c\u8868\u793a $0,1$ \u4e32\u7684\u957f\u5ea6\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684 $0,1$ \u4e32\u3002\n\n$1 \\le t \\le 10000\uff0c2 \\le n \\le 2 \\times 10^5$\n### \u8f93\u51fa\u683c\u5f0f\n\u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u4e3a\u6700\u5c0f\u64cd\u4f5c\u6570\u3002"
}