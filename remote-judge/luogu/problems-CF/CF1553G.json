{
    "description": "Consider a sequence of distinct integers $ a_1, \\ldots, a_n $ , each representing one node of a graph. There is an edge between two nodes if the two values are not coprime, i. e. they have a common divisor greater than $ 1 $ .\n\nThere are $ q $ queries, in each query, you want to get from one given node $ a_s $ to another $ a_t $ . In order to achieve that, you can choose an existing value $ a_i $ and create new value $ a_{n+1} = a_i \\cdot (1 + a_i) $ , with edges to all values that are not coprime with $ a_{n+1} $ . Also, $ n $ gets increased by $ 1 $ . You can repeat that operation multiple times, possibly making the sequence much longer and getting huge or repeated values. What's the minimum possible number of newly created nodes so that $ a_t $ is reachable from $ a_s $ ?\n\nQueries are independent. In each query, you start with the initial sequence $ a $ given in the input.",
    "inputFormat": "The first line contains two integers $ n $ and $ q $ ( $ 2 \\leq n \\leq 150\\,000 $ , $ 1 \\leq q \\leq 300\\,000 $ ) \u2014 the size of the sequence and the number of queries.\n\nThe second line contains $ n $ distinct integers $ a_1, a_2, \\ldots, a_n $ ( $ 2 \\leq a_i \\leq 10^6 $ , $ a_i \\neq a_j $ if $ i \\ne j $ ).\n\nThe $ j $ -th of the following $ q $ lines contains two distinct integers $ s_j $ and $ t_j $ ( $ 1 \\leq s_j, t_j \\leq n $ , $ s_j \\neq t_j $ ) \u2014 indices of nodes for $ j $ -th query.",
    "outputFormat": "Print $ q $ lines. The $ j $ -th line should contain one integer: the minimum number of new nodes you create in order to move from $ a_{s_j} $ to $ a_{t_j} $ .",
    "samples": [
        [
            "3 3\n2 10 3\n1 2\n1 3\n2 3",
            "0\n1\n1"
        ],
        [
            "5 12\n3 8 7 6 25\n1 2\n1 3\n1 4\n1 5\n2 1\n2 3\n2 4\n2 5\n3 1\n3 2\n3 4\n3 5",
            "0\n1\n0\n1\n0\n1\n0\n1\n1\n1\n1\n2"
        ]
    ],
    "hint": "In the first example, you can first create new value $ 2 \\cdot 3 = 6 $ or $ 10 \\cdot 11 = 110 $ or $ 3 \\cdot 4 = 12 $ . None of that is needed in the first query because you can already get from $ a_1 = 2 $ to $ a_2 = 10 $ .\n\nIn the second query, it's optimal to first create $ 6 $ or $ 12 $ . For example, creating $ 6 $ makes it possible to get from $ a_1 = 2 $ to $ a_3 = 3 $ with a path $ (2, 6, 3) $ .\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1553G/bde4f00f87166b14452d3f5ad3d0af82a1d4f8e5.png)In the last query of the second example, we want to get from $ a_3 = 7 $ to $ a_5 = 25 $ . One way to achieve that is to first create $ 6 \\cdot 7 = 42 $ and then create $ 25 \\cdot 26 = 650 $ . The final graph has seven nodes and it contains a path from $ a_3 = 7 $ to $ a_5 = 25 $ .",
    "translation": "\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b $n$ \u4e2a\u8282\u70b9\u7684\u56fe\u3002\u7b2c $i$ \u4e2a\u8282\u70b9\u90fd\u6709\u6743\u503c $a_i$\uff0c\u6ca1\u6709\u4e24\u4e2a\u8282\u70b9\u6743\u503c\u76f8\u540c\u3002\u8282\u70b9 $i,j$ \u4e4b\u95f4\u6709\u4e00\u6761\u65e0\u5411\u8fb9\u4ec5\u5f53 $\\gcd(a_i,a_j)>1$\u3002  \n\u7ed9\u5b9a $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u5305\u542b\u6574\u6570 $s,t$ \u8868\u793a\u4f60\u5e0c\u671b\u4ece\u8282\u70b9 $s$ \u5230\u8fbe\u8282\u70b9 $t$\u3002\u4e3a\u4e86\u5230\u8fbe\u90a3\u4e2a\u8282\u70b9\uff0c\u4f60\u53ef\u4ee5\u8fdb\u884c\u4e0b\u5217\u64cd\u4f5c\u4efb\u610f\u6b21\uff1a\n\n- \u9009\u5b9a\u4e00\u4e2a\u8282\u70b9 $i$\u3002\u521b\u9020\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u7684\u6743\u503c\u4e3a $a_i\\times(a_i+1)$\uff0c\u5e76\u6309\u7167\u4e0a\u8ff0\u89c4\u5219\u8fde\u8fb9\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u4f60\u90fd\u9700\u8981\u6c42\u51fa\uff0c\u81f3\u5c11\u9700\u8981\u591a\u5c11\u6b21\u64cd\u4f5c\u624d\u80fd\u4f7f\u8282\u70b9 $s$ \u80fd\u5230\u8fbe\u8282\u70b9 $t$\u3002\u8be2\u95ee\u4e92\u76f8\u72ec\u7acb\u3002  \n$2\\leq n\\leq1.5\\times10^5;1\\leq q\\leq3\\times10^5;$  \n$2\\leq a_i\\leq10^6;$ \u4e14\u5982\u679c $i\\not=j$\uff0c$a_i\\not=a_j$\u3002  \n$1\\leq s,t\\leq n;s\\not=t;$"
}