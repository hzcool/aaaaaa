{
    "description": "You are given an undirected graph with $ n $ vertices and $ 3m $ edges. The graph may contains multi-edges, but do not contain self loops.\n\nThe graph satisfy the following property: the given edges can be divided into $ m $ groups of $ 3 $ , such that each group is a triangle.\n\nA triangle are three edges $ (a,b) $ , $ (b,c) $ and $ (c,a) $ , for some three distinct vertices $ a,b,c $ ( $ 1 \\leq a,b,c \\leq n $ ).\n\nInitially, each vertex $ v $ has a non-negative integer weight $ a_v $ . For every edge $ (u,v) $ in the graph, you should perform the following operation exactly once:\n\n- Choose an integer $ x $ between $ 1 $ and $ 4 $ . Then increase both $ a_u $ and $ a_v $ by $ x $ .\n\nAfter performing all operations, the following requirement should be satisfied: if $ u $ and $ v $ are connected by an edge, then $ a_u \\ne a_v $ .\n\nIt can be proven this is always possible under the constraints of the task. Output a way to do so, by outputting the choice of $ x $ for each edge. It is easy to see that the order of operations do not matter. If there are multiple valid answers, output any.",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1 \\leq t \\leq 10^5 $ ) \u2014 the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains two integers $ n $ and $ m $ ( $ 3 \\le n \\le 10^6 $ , $ 1 \\le m \\le 4 \\cdot 10^5 $ ) \u2014 denoting the graph have $ n $ vertices and $ 3m $ edges.\n\nThe second line of each test case contains $ n $ integers $ a_1,a_2,\\ldots,a_n $ ( $ 0 \\leq a_i \\leq 10^6 $ ) \u2014 the initial weights of each vertex.\n\nThen $ m $ lines follows. The $ i $ -th line contains three integers $ a_i $ , $ b_i $ , $ c_i $ ( $ 1 \\leq a_i < b_i < c_i \\leq n $ ) \u2014 denotes that three edges $ (a_i,b_i) $ , $ (b_i,c_i) $ and $ (c_i,a_i) $ .\n\nNote that the graph may contain multi-edges: a pair $ (x,y) $ may appear in multiple triangles.\n\nIt is guaranteed that the sum of $ n $ over all test cases do not exceed $ 10^6 $ and the sum of $ m $ over all test cases do not exceed $ 4 \\cdot 10^5 $ .",
    "outputFormat": "For each test case, output $ m $ lines of $ 3 $ integers each.\n\nThe $ i $ -th line should contains three integers $ e_{ab},e_{bc},e_{ca} $ ( $ 1 \\leq e_{ab}, e_{bc} , e_{ca} \\leq 4 $ ), denoting the choice of value $ x $ for edges $ (a_i, b_i) $ , $ (b_i,c_i) $ and $ (c_i, a_i) $ respectively.",
    "samples": [
        [
            "4\n4 1\n0 0 0 0\n1 2 3\n5 2\n0 0 0 0 0\n1 2 3\n1 4 5\n4 4\n3 4 5 6\n1 2 3\n1 2 4\n1 3 4\n2 3 4\n5 4\n0 1000000 412 412 412\n1 2 3\n1 4 5\n2 4 5\n3 4 5",
            "2 1 3\n2 3 3\n4 3 3\n3 1 2\n2 2 3\n2 3 4\n3 1 1\n2 3 4\n1 2 4\n4 4 3\n4 1 1"
        ]
    ],
    "hint": "In the first test case, the initial weights are $ [0,0,0,0] $ . We have added values as follows:\n\n- Added $ 2 $ to vertices $ 1 $ and $ 2 $\n- Added $ 1 $ to vertices $ 1 $ and $ 3 $\n- Added $ 3 $ to vertices $ 2 $ and $ 3 $\n\nThe final weights are $ [3,5,4,0] $ . The output is valid because $ a_1 \\neq a_2 $ , $ a_1 \\neq a_3 $ , $ a_2 \\neq a_3 $ , and that all chosen values are between $ 1 $ and $ 4 $ .\n\nIn the second test case, the initial weights are $ [0,0,0,0,0] $ . The weights after the operations are $ [12,5,6,7,6] $ . The output is valid because $ a_1 \\neq a_2 $ , $ a_1 \\neq a_3 $ , $ a_2 \\neq a_3 $ , and that $ a_1 \\neq a_4 $ , $ a_1 \\neq a_5 $ , $ a_4 \\neq a_5 $ , and that all chosen values are between $ 1 $ and $ 4 $ .\n\nIn the third test case, the initial weights are $ [3,4,5,6] $ . The weights after the operations are $ [19,16,17,20] $ , so all final weights are distinct, which means no two adjacent vertices have the same weight.",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u5b9a\u6574\u6570 $n,m$\uff0c\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u975e\u8d1f\u6574\u6570\u5e8f\u5217 $d$\uff0c\u548c $m$ \u4e2a\u4e09\u5143\u7ec4 $(a_i,b_i,c_i)$\uff0c\u4fdd\u8bc1 $a_i<b_i<c_i$\u3002  \n\u6211\u4eec\u6309\u7167\u4e0b\u5217\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u56fe\uff1a\n\n- \u5728\u8fd9\u4e2a\u56fe\u4e0a\u5efa\u7acb $n$ \u4e2a\u8282\u70b9\uff0c\u7f16\u53f7\u4e3a $1,2,\\cdots,n$\u3002  \n- \u5bf9\u4e8e\u6bcf\u4e2a\u6574\u6570 $i=1,2,\\cdots,m$\uff0c\u5728\u8282\u70b9 $a_i,b_i$ \u4e4b\u95f4\u3001$b_i,c_i$ \u4e4b\u95f4\u3001$c_i,a_i$ \u4e4b\u95f4\u5747\u5404\u8fde\u63a5\u4e00\u6761\u8fb9\u3002  \n\u6ce8\u610f\u7ecf\u8fc7\u4e0a\u8ff0\u8fde\u8fb9\u8fc7\u7a0b\u540e**\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u591a\u6761\u8fb9\u3002**\n\n\u63a5\u4e0b\u6765\u4f60\u9700\u8981\u5bf9\u56fe\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9 $(u,v)$ \u90fd\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\u4e00\u6b21\uff1a\n\n- \u9009\u62e9\u4e00\u4e2a\u6574\u6570 $x\\bm{(1\\leq x\\leq 4)}$\uff0c\u7136\u540e\u4f7f $d_u,d_v$ \u5747\u52a0\u4e0a $x$\u3002\n\n\u5728\u8fdb\u884c\u6240\u6709\u64cd\u4f5c\u540e\uff0c\u4f60\u9700\u8981\u4f7f\u8fd9\u4e2a\u56fe\u6ee1\u8db3\u4e0b\u5217\u8981\u6c42\uff1a\n\n- \u5bf9\u4e8e\u4efb\u610f\u56fe\u4e0a\u7684\u8fb9 $(u,v)$\uff0c\u603b\u6709 $d_u\\not=d_v$\u3002\n\n\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u7ed9\u51fa\u4e00\u7ec4\u80fd\u591f\u8fbe\u6210\u8981\u6c42\u7684\u9009\u62e9\u6240\u6709\u64cd\u4f5c\u4e2d $x$ \u7684\u65b9\u6848\u3002  \n**\u6709\u591a\u7ec4\u6ee1\u8db3\u8981\u6c42\u7684\u64cd\u4f5c\u65b9\u6848\u65f6\u8f93\u51fa\u4efb\u610f\u4e00\u7ec4\u5373\u53ef\u3002\u53ef\u4ee5\u8bc1\u660e\u5728\u9898\u76ee\u9650\u5236\u4e0b\uff0c\u603b\u662f\u5b58\u5728\u6ee1\u8db3\u8981\u6c42\u7684\u64cd\u4f5c\u65b9\u6848\u3002**  \n\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u5305\u542b $t$ \u7ec4\u6570\u636e\u3002\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570 $t(1\\leq t\\leq10^5)$ \u8868\u793a\u6570\u636e\u7ec4\u6570\uff0c\u63a5\u4e0b\u6765\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff1a  \n\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570 $n,m(3\\leq n,\\sum n\\leq10^6;1\\leq m,\\sum m\\leq4\\times10^5)$\u3002  \n\u63a5\u4e0b\u6765\u8f93\u5165\u4e00\u884c $n$ \u4e2a\u6574\u6570\u8868\u793a\u5e8f\u5217 $d(0\\leq d_i\\leq10^6)$\u3002  \n\u63a5\u4e0b\u6765\u8f93\u5165 $m$ \u884c\uff0c\u5176\u4e2d\u7b2c $i$ \u884c\u8f93\u5165\u4e09\u4e2a\u6574\u6570 $a_i,b_i,c_i(1\\leq a_i<b_i<c_i\\leq n)$\u3002  \n\u6ce8\u610f\u6700\u7ec8\u6839\u636e $(a_i,b_i,c_i)$ \u5f97\u5230\u7684\u56fe\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff1a  \n\u8f93\u51fa $m$ \u884c\uff0c\u5176\u4e2d\u7b2c $i$ \u884c\u8f93\u51fa\u4e09\u4e2a\u6574\u6570 $x_{ab},x_{bc},x_{ca}(1\\leq x_{ab},x_{bc},x_{ca}\\leq4)$ \u8868\u793a\u5bf9\u4e8e\u4e09\u5143\u7ec4 $(a_i,b_i,c_i)$ \u5bf9\u5e94\u7684\u4e09\u6761\u8fb9 $(a_i,b_i),(b_i,c_i),(c_i,a_i)$\uff0c\u4f60\u5206\u522b\u9009\u62e9\u7684 $x$ \u7684\u503c\u3002  \n\u6709\u591a\u7ec4\u6ee1\u8db3\u8981\u6c42\u7684\u64cd\u4f5c\u65b9\u6848\u65f6\u4f60\u53ef\u4ee5\u8f93\u51fa\u4efb\u610f\u4e00\u7ec4\u3002  \n\u53ef\u4ee5\u8bc1\u660e\u4e00\u5b9a\u6709\u89e3\u3002\n\n### \u6837\u4f8b\u89e3\u91ca\n\n\u5bf9\u4e8e\u7b2c\u4e00\u7ec4\u6570\u636e\uff1a\n\n- \u64cd\u4f5c\u524d $d=[0,0,0,0]$\uff0c\u6837\u4f8b\u8f93\u51fa\u7ed9\u51fa\u4e86\u5982\u4e0b\u64cd\u4f5c\uff1a\n\t- \u5bf9\u4e8e\u8fb9 $(1,2)$\uff0c\u9009\u62e9 $x=2$\uff0c\u6b64\u540e $d=[2,2,0,0]$\u3002\n    - \u5bf9\u4e8e\u8fb9 $(1,3)$\uff0c\u9009\u62e9 $x=1$\uff0c\u6b64\u540e $d=[3,2,1,0]$\u3002\n    - \u5bf9\u4e8e\u8fb9 $(2,3)$\uff0c\u9009\u62e9 $x=3$\uff0c\u6b64\u540e $d=[3,5,4,0]$\u3002\n- \u64cd\u4f5c\u540e\u53ef\u4ee5\u53d1\u73b0 $d$ \u4e2d\u5143\u7d20\u4e92\u4e0d\u76f8\u7b49\uff0c\u56e0\u6b64\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u7ec4\u6570\u636e\uff1a\n\n- \u64cd\u4f5c\u524d $d=[0,0,0,0,0]$\u3002\n- \u64cd\u4f5c\u540e $d=[12,5,6,7,6]$\uff0c\u53ef\u4ee5\u6839\u636e\u6837\u4f8b\u8f93\u5165\u53d1\u73b0\u4e0d\u5b58\u5728\u8fde\u63a5\u8282\u70b9 $3,5$ \u7684\u8fb9\uff0c\u56e0\u6b64\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002  \n\n\u5bf9\u4e8e\u7b2c\u4e09\u7ec4\u6570\u636e\uff1a\n\n- \u64cd\u4f5c\u524d $d=[3,4,5,6]$\u3002\n- \u64cd\u4f5c\u540e $d=[19,16,17,20]$\uff0c\u53ef\u4ee5\u53d1\u73b0 $d$ \u4e2d\u5143\u7d20\u4e92\u4e0d\u76f8\u7b49\uff0c\u56e0\u6b64\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002"
}