{
    "description": "Mark is administering an online exam consisting of $ n $ true-false questions. However, he has lost all answer keys. He needs a way to retrieve the answers before his client gets infuriated.\n\nFortunately, he has access to the grading system. Thus, for each query, you can input the answers to all $ n $ questions, and the grading system will output how many of them are correct.\n\nHe doesn't have much time, so he can use the grading system at most $ 675 $ times. Help Mark determine the answer keys.\n\nNote that answer keys are fixed in advance and will not change depending on your queries.",
    "inputFormat": "The first line of the input consists of an integer $ n $ ( $ 1\\leq n\\leq 1000 $ ) \u2014 the number of questions.",
    "outputFormat": "After reading $ n $ , you can start making queries to the grading system. For each query, print a line containing a string $ s $ of length $ n $ consisting of only letters 'T' and 'F'.\n\n- $ s_i =  $ 'T' means that you answer the $ i $ -question true.\n- $ s_i =  $ 'F' means that you answer the $ i $ -question false.\n\nAfter a successful query, you should read an integer $ k $ ( $ 0\\leq k\\leq n $ ) \u2014 the number of correct answers. If you read $ n $ , then you found the answers, and your program should not make any more queries.\n\nIf your program reads $ k = -1 $ instead of the number of correct answers, it means that you either made an invalid query or exceeded the query limits. Exit immediately after receiving $ -1 $ , and you will see Wrong answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nHacks\n\nTo hack, use the following format:\n\nThe first line contains an integer $ n $ ( $ 1\\leq n\\leq 1000 $ ) \u2014 the number of questions.\n\nThe second line contains a string $ s $ of length $ n $ consisting of only 'T' and 'F' \u2014 the answer key.",
    "samples": [
        [
            "3\n\n1\n\n3",
            "FTT\n\nTTF"
        ],
        [
            "4\n\n0\n\n3\n\n4",
            "FTFF\n\nTTTT\n\nTFTT"
        ]
    ],
    "hint": "The empty lines in the example are just for you to better understand the interaction process. You're not required to print them.\n\nIn the first example, there are $ 3 $ questions, and the answer to each question is 'true', 'true', and 'false', respectively.\n\n- The first query, guessing the answers to be 'false', 'true', and 'true', respectively, guesses only one question \u2014 the $ 2 $ -nd question \u2014 correctly.\n- Then, in the second query, the program correctly guesses the answer key. The interaction ends here.\n\nIn the second example, there are $ 4 $ questions, and the answer to each question is 'true', 'false', 'true', and 'true', respectively.\n\n- The first query guessed none of the questions correctly, resulting in the answer $ 0 $ .\n- The second query guessed the $ 1 $ -st, $ 3 $ -rd, and $ 4 $ -th question correctly, resulting in the answer $ 3 $ .\n- In the third query, the program correctly guesses the answer key. Then, the interaction ends.",
    "translation": "\u9a6c\u514b\u6b63\u5728\u7ef4\u62a4\u5305\u62ec $n$ \u9053\u5224\u65ad\u9898\u7684\u5728\u7ebf\u8003\u8bd5\u3002\u7136\u800c\uff0c\u4ed6\u4e22\u5931\u4e86\u6240\u6709\u7684\u6b63\u786e\u7b54\u6848\u3002\u4ed6\u9700\u8981\u5728\u4ed6\u7684\u8003\u751f\u751f\u6c14\u4e4b\u524d\u627e\u56de\u7b54\u6848\u3002\n\n\u5e78\u8fd0\u7684\u662f\uff0c\u4ed6\u53ef\u4ee5\u4f7f\u7528\u8bc4\u6d4b\u7cfb\u7edf\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u60a8\u53ef\u4ee5\u8f93\u5165\u5bf9\u4e8e\u6bcf\u4e2a\u95ee\u9898\u7684\u7b54\u6848\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u4f1a\u8f93\u51fa\u6709\u51e0\u4e2a\u7b54\u6848\u662f\u6b63\u786e\u7684\u3002\n\n\u4ed6\u6ca1\u6709\u8db3\u591f\u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u4ed6\u6700\u591a\u53ef\u4ee5\u5411\u8bc4\u6d4b\u7cfb\u7edf\u8be2\u95ee $675$ \u6b21\u3002\u8bf7\u5e2e\u52a9\u9a6c\u514b\u786e\u5b9a\u7b54\u6848\u3002\n\n\u8bf7\u6ce8\u610f\uff0c\u6b63\u786e\u7b54\u6848\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u4f1a\u6539\u53d8\u3002"
}