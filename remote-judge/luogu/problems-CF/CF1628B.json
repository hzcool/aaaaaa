{
    "description": "Mihai plans to watch a movie. He only likes palindromic movies, so he wants to skip some (possibly zero) scenes to make the remaining parts of the movie palindromic.\n\nYou are given a list $ s $ of $ n $ non-empty strings of length at most $ 3 $ , representing the scenes of Mihai's movie.\n\nA subsequence of $ s $ is called awesome if it is non-empty and the concatenation of the strings in the subsequence, in order, is a palindrome.\n\nCan you help Mihai check if there is at least one awesome subsequence of $ s $ ?\n\nA palindrome is a string that reads the same backward as forward, for example strings \"z\", \"aaa\", \"aba\", \"abccba\" are palindromes, but strings \"codeforces\", \"reality\", \"ab\" are not.\n\nA sequence $ a $ is a non-empty subsequence of a non-empty sequence $ b $ if $ a $ can be obtained from $ b $ by deletion of several (possibly zero, but not all) elements.",
    "inputFormat": "The first line of the input contains a single integer $ t $ ( $ 1 \\le t \\le 100 $ ) \u2014 the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $ n $ ( $ 1 \\le n \\le 10^5 $ ) \u2014 the number of scenes in the movie.\n\nThen follows $ n $ lines, the $ i $ -th of which containing a single non-empty string $ s_i $ of length at most $ 3 $ , consisting of lowercase Latin letters.\n\nIt is guaranteed that the sum of $ n $ over all test cases does not exceed $ 10^5 $ .",
    "outputFormat": "For each test case, print \"YES\" if there is an awesome subsequence of $ s $ , or \"NO\" otherwise (case insensitive).",
    "samples": [
        [
            "6\n5\nzx\nab\ncc\nzx\nba\n2\nab\nbad\n4\nco\ndef\norc\nes\n3\na\nb\nc\n3\nab\ncd\ncba\n2\nab\nab",
            "YES\nNO\nNO\nYES\nYES\nNO"
        ]
    ],
    "hint": "In the first test case, an awesome subsequence of $ s $ is $ [ab, cc, ba] $",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709$n$\u4e2a\u5b57\u7b26\u4e32\u7684\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u5747\u4e0d\u8d85\u8fc7$3$\uff0c\u5224\u65ad\u80fd\u5426\u4ece\u4e2d\u9009\u51fa\u4e00\u4e2a\u975e\u96f6\u5b50\u6bb5\uff08\u53ef\u4ee5\u4e0d\u8fde\u7eed\uff09\uff0c\u4f7f\u5f97\u5b50\u6bb5\u4e2d\u7684\u5b57\u7b26\u4e32\u6309\u7167\u5728\u5e8f\u5217\u4e2d\u7684\u987a\u5e8f\u9996\u5c3e\u76f8\u8fde\u6784\u6210\u4e00\u4e2a\u56de\u6587\u4e32\u3002\u5982\u679c\u80fd\uff0c\u8f93\u51fa\"YES\"\uff0c\u5426\u5219\u8f93\u51fa\"NO\"\u3002\n\n## \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570$t$\uff08$1 \\leq t \\leq 100$\uff09\uff0c\u8868\u793a\u6d4b\u8bd5\u6837\u4f8b\u7684\u6570\u91cf\n\n\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6837\u4f8b\u7684\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570$n$\uff08\u6240\u6709\u7684$n$\u4e4b\u548c\u5c0f\u4e8e\u7b49\u4e8e$10^5$\uff09\uff0c\u8868\u793a\u5e8f\u5217\u4e2d\u5b57\u7b26\u4e32\u7684\u603b\u6570\n\n\u63a5\u4e0b\u6765\u7684$n$\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u975e\u7a7a\u4e14\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e3\u7684\u5b57\u7b26\u4e32\uff0c\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6d4b\u8bd5\u6837\u4f8b\uff0c\u5982\u679c\u53ef\u4ee5\u6784\u6210\u56de\u6587\u4e32\uff0c\u5219\u8f93\u51fa\"YES\"\uff0c\u5426\u5219\u8f93\u51fa\"NO\""
}