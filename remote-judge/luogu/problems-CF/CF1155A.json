{
    "description": "You are given a string $ s $ consisting of $ n $ lowercase Latin letters.\n\nLet's define a substring as a contiguous subsegment of a string. For example, \"acab\" is a substring of \"abacaba\" (it starts in position $ 3 $ and ends in position $ 6 $ ), but \"aa\" or \"d\" aren't substrings of this string. So the substring of the string $ s $ from position $ l $ to position $ r $ is $ s[l; r] = s_l s_{l + 1} \\dots s_r $ .\n\nYou have to choose exactly one of the substrings of the given string and reverse it (i. e. make $ s[l; r] = s_r s_{r - 1} \\dots s_l $ ) to obtain a string that is less lexicographically. Note that it is not necessary to obtain the minimum possible string.\n\nIf it is impossible to reverse some substring of the given string to obtain a string that is less, print \"NO\". Otherwise print \"YES\" and any suitable substring.\n\nString $ x $ is lexicographically less than string $ y $ , if either $ x $ is a prefix of $ y $ (and $ x \\ne y $ ), or there exists such $ i $ ( $ 1 \\le i \\le min(|x|, |y|) $ ), that $ x_i < y_i $ , and for any $ j $ ( $ 1 \\le j < i $ ) $ x_j = y_j $ . Here $ |a| $ denotes the length of the string $ a $ . The lexicographic comparison of strings is implemented by operator < in modern programming languages\u200b\u200b.",
    "inputFormat": "The first line of the input contains one integer $ n $ ( $ 2 \\le n \\le 3 \\cdot 10^5 $ ) \u2014 the length of $ s $ .\n\nThe second line of the input contains the string $ s $ of length $ n $ consisting only of lowercase Latin letters.",
    "outputFormat": "If it is impossible to reverse some substring of the given string to obtain a string which is lexicographically less, print \"NO\". Otherwise print \"YES\" and two indices $ l $ and $ r $ ( $ 1 \\le l < r \\le n $ ) denoting the substring you have to reverse. If there are multiple answers, you can print any.",
    "samples": [
        [
            "7\nabacaba\n",
            "YES\n2 5\n"
        ],
        [
            "6\naabcfg\n",
            "NO\n"
        ]
    ],
    "hint": "In the first testcase the resulting string is \"aacabba\".",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a**\u4ec5\u542b\u5c0f\u5199\u5b57\u6bcd**\u7684\u5b57\u7b26\u4e32$s$\uff0c\u5176\u957f\u5ea6\u4e3a$n$\n\n\u6211\u4eec\u5b9a\u4e49\u5b50\u4e32\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u6bd4\u5982```acab```\u662f```abacaba```\u7684\u5b50\u4e32\uff08\u4f4d\u7f6e\u662f```3~6```\uff09\uff0c\u800c```aa```\u548c```d```\u4e0d\u662f\u3002\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32$s$\uff0c\u5b83\u7684\u4f4d\u7f6e\u4e3a$[l,r]$\u7684\u5b50\u4e32\u53ef\u4ee5\u8868\u793a\u6210$s[l;r]$\uff0c\u5373$s_ls_{l+1}...s_r$\n\n\u60a8\u9700\u8981\u6307\u5b9a$s$\u7684**\u4e00\u4e2a**\u5b50\u4e32\u5e76\u7ffb\u8f6c\u8fd9\u4e2a\u5b50\u4e32\uff0c\u4f7f\u5f97\u65b0\u5b57\u7b26\u4e32\u7684\u5b57\u5178\u5e8f\u6bd4\u539f\u6765\u7684\u5b57\u7b26\u4e32$s$\u5c0f\u3002\u6ce8\u610f\u4e0d\u662f\u6700\u5c0f\u3002\n\n\u5982\u679c\u53ef\u4ee5\u6ee1\u8db3\u9898\u610f\uff0c\u8f93\u51fa```YES```\uff0c\u518d\u8f93\u51fa\u53cd\u8f6c\u7684\u533a\u95f4\u3002\u5426\u5219\u8f93\u51fa```NO```\n\n\u6211\u4eec\u8ba4\u4e3a\u5b57\u7b26\u4e32$x<y$\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a $i$ $(1 \\leq i\\leq min(|x| ,|y|))$\uff0c\u4f7f\u5f97 $x_i < y_i$ \u5e76\u4e14$x_j =y_j (1 \\leq j < i)$ \u6b64\u5904\u7684\u7edd\u5bf9\u503c\u7b26\u53f7```|x|``` \u6307\u7684\u662f\u5b57\u7b26\u4e32\u957f\u5ea6\u3002\u5728\u67d0\u4e9b\u8bed\u8a00\u4e2d\u60a8\u53ef\u4ee5\u7528 $<$ \u8fd0\u7b97\u7b26\u6bd4\u8f83\u5b57\u7b26\u4e32\u5b57\u5178\u5e8f\n\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 $n(2\\leq n \\leq 3\\times10^5)$ \uff0c\u8868\u793a\u5b57\u7b26\u4e32$s$\u7684\u957f\u5ea6\n\n\u7b2c\u4e8c\u884c\u4e00\u4e2a**\u4ec5\u542b\u5c0f\u5199\u5b57\u6bcd**\u7684\u5b57\u7b26\u4e32$s$\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u7ffb\u8f6c**\u4e00\u4e2a**\u5b50\u4e32\u5f97\u5230\u5b57\u5178\u5e8f\u66f4\u5c0f\u7684\u5b57\u7b26\u4e32\uff0c\u8f93\u51fa```YES```\uff0c\u6362\u884c\uff0c\u518d\u8f93\u51fa\u53cd\u8f6c\u7684\u533a\u95f4\uff08\u5982\u679c\u6709\u591a\u79cd\u65b9\u6848\u4ec5\u8f93\u51fa\u4e00\u4e2a\uff09\u3002\u5426\u5219\u4ec5\u8f93\u51fa```NO```\n\n## \u8bf4\u660e\n\n\u6837\u4f8b$1$\u4e2d\uff0c\u7ffb\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\u662f```aacabba```"
}