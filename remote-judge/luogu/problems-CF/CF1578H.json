{
    "description": "Helen studies functional programming and she is fascinated with a concept of higher order functions \u2014 functions that are taking other functions as parameters. She decides to generalize the concept of the function order and to test it on some examples.\n\nFor her study, she defines a simple grammar of types. In her grammar, a type non-terminal $ T $ is defined as one of the following grammar productions, together with $ \\textrm{order}(T) $ , defining an order of the corresponding type:\n\n- \"()\" is a unit type, $ \\textrm{order}(\\textrm{\"}\\texttt{()}\\textrm{\"}) = 0 $ .\n- \"(\" $ T $ \")\" is a parenthesized type, $ \\textrm{order}(\\textrm{\"}\\texttt{(}\\textrm{\"}\\,T\\,\\textrm{\"}\\texttt{)}\\textrm{\"}) = \\textrm{order}(T) $ .\n- $ T_1 $ \"-&gt;\" $ T_2 $ is a functional type, $ \\textrm{order}(T_1\\,\\textrm{\"}\\texttt{->}\\textrm{\"}\\,T_2) = max(\\textrm{order}(T_1) + 1, \\textrm{order}(T_2)) $ . The function constructor $ T_1 $ \"-&gt;\" $ T_2 $ is right-to-left associative, so the type \"()-&gt;()-&gt;()\" is the same as the type \"()-&gt;(()-&gt;())\" of a function returning a function, and it has an order of $ 1 $ . While \"(()-&gt;())-&gt;()\" is a function that has an order-1 type \"(()-&gt;())\" as a parameter, and it has an order of $ 2 $ .\n\nHelen asks for your help in writing a program that computes an order of the given type.",
    "inputFormat": "The single line of the input contains a string consisting of characters '(', ')', '-', and '&gt;' that describes a type that is valid according to the grammar from the problem statement. The length of the line is at most $ 10^4 $ characters.",
    "outputFormat": "Print a single integer \u2014 the order of the given type.",
    "samples": [
        [
            "()",
            "0"
        ],
        [
            "()->()",
            "1"
        ],
        [
            "()->()->()",
            "1"
        ],
        [
            "(()->())->()",
            "2"
        ],
        [
            "()->(((()->())->()->())->())",
            "3"
        ]
    ],
    "hint": "",
    "translation": "\u5b9a\u4e49\u5b57\u7b26\u4e32 `S` \u6743\u503c\u4e3a `ord(S)` \u3002\n\n\u8ba1\u7b97\u65b9\u5f0f\u4e3a:\n\n1.$ord(\"()\")=0$\n\n2.$ord(\"(\"+S+\")\")=ord(S)$\n\n3.$ord(S+\"->\"+T)=max(ord(S)+1,ord(T))$\n\n`S->T->U` \u76f8\u5f53\u4e8e `S->(T->U)`\n\n\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6c42\u5b83\u7684\u6743\u503c"
}