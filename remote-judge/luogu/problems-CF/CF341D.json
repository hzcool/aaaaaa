{
    "description": "Iahub does not like background stories, so he'll tell you exactly what this problem asks you for.\n\nYou are given a matrix $ a $ with $ n $ rows and $ n $ columns. Initially, all values of the matrix are zeros. Both rows and columns are 1-based, that is rows are numbered 1, 2, ..., $ n $ and columns are numbered 1, 2, ..., $ n $ . Let's denote an element on the $ i $ -th row and $ j $ -th column as $ a_{i,j} $ .\n\nWe will call a submatrix $ (x_{0},y_{0},x_{1},y_{1}) $ such elements $ a_{i,j} $ for which two inequalities hold: $ x_{0}<=i<=x_{1} $ , $ y_{0}<=j<=y_{1} $ .\n\nWrite a program to perform two following operations:\n\n1. Query( $ x_{0} $ , $ y_{0} $ , $ x_{1} $ , $ y_{1} $ ): print the xor sum of the elements of the submatrix $ (x_{0},y_{0},x_{1},y_{1}) $ .\n2. Update( $ x_{0} $ , $ y_{0} $ , $ x_{1} $ , $ y_{1} $ , $ v $ ): each element from submatrix $ (x_{0},y_{0},x_{1},y_{1}) $ gets xor-ed by value $ v $ .",
    "inputFormat": "The first line contains two integers: $ n $ ( $ 1<=n<=1000 $ ) and $ m $ ( $ 1<=m<=10^{5} $ ). The number $ m $ represents the number of operations you need to perform. Each of the next $ m $ lines contains five or six integers, depending on operation type.\n\nIf the $ i $ -th operation from the input is a query, the first number from $ i $ -th line will be 1. It will be followed by four integers $ x_{0} $ , $ y_{0} $ , $ x_{1} $ , $ y_{1} $ . If the $ i $ -th operation is an update, the first number from the $ i $ -th line will be 2. It will be followed by five integers $ x_{0} $ , $ y_{0} $ , $ x_{1} $ , $ y_{1} $ , $ v $ .\n\nIt is guaranteed that for each update operation, the following inequality holds: $ 0<=v<2^{62} $ . It is guaranteed that for each operation, the following inequalities hold: $ 1<=x_{0}<=x_{1}<=n $ , $ 1<=y_{0}<=y_{1}<=n $ .",
    "outputFormat": "For each query operation, output on a new line the result.",
    "samples": [
        [
            "3 5\n2 1 1 2 2 1\n2 1 3 2 3 2\n2 3 1 3 3 3\n1 2 2 3 3\n1 2 2 3 2\n",
            "3\n2\n"
        ]
    ],
    "hint": "After the first $ 3 $ operations, the matrix will look like this:\n\n```\n1 1 2\n1 1 2\n3 3 3\n```\nThe fourth operation asks us to compute 1 xor 2 xor 3 xor 3 = 3.\n\nThe fifth operation asks us to compute 1 xor 3 = 2.",
    "translation": "- \u7ed9\u5b9a\u4e00\u4e2a\u521d\u59cb\u503c\u5168\u4e3a $0$ \u7684 $n^2$ \u77e9\u9635\uff0c\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u6709\u4ee5\u4e0b\u7c7b\u578b\uff1a\n    - `1 x1 y1 x2 y2`\uff1a\u67e5\u8be2 $(x_1,y_1)$ \u5230 $(x_2,y_2)$ \u7684\u533a\u95f4\u5f02\u6216\u548c\u3002\n    - `2 x1 y1 x2 y2 w`\uff1a\u5c06 $(x_1,y_1)$ \u5230 $(x_2,y_2)$ \u7684\u533a\u95f4\u5f02\u6216\u4e0a $w$\u3002\n- \u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e\uff0c$1 \\le n \\le 1000$\uff0c$1 \\le m \\le 10^5$\uff0c$0 \\le w \\le 2^{62}$\uff0c$1 \\le x_1\\le x_2 \\le n$\uff0c$1 \\le y_1 \\le y_2 \\le n$\u3002"
}