{
    "description": "You are given two strings $ s $ and $ t $ . The string $ s $ consists of lowercase Latin letters and at most one wildcard character '\\*', the string $ t $ consists only of lowercase Latin letters. The length of the string $ s $ equals $ n $ , the length of the string $ t $ equals $ m $ .\n\nThe wildcard character '\\*' in the string $ s $ (if any) can be replaced with an arbitrary sequence (possibly empty) of lowercase Latin letters. No other character of $ s $ can be replaced with anything. If it is possible to replace a wildcard character '\\*' in $ s $ to obtain a string $ t $ , then the string $ t $ matches the pattern $ s $ .\n\nFor example, if $ s= $ \"aba\\*aba\" then the following strings match it \"abaaba\", \"abacaba\" and \"abazzzaba\", but the following strings do not match: \"ababa\", \"abcaaba\", \"codeforces\", \"aba1aba\", \"aba?aba\".\n\nIf the given string $ t $ matches the given string $ s $ , print \"YES\", otherwise print \"NO\".",
    "inputFormat": "The first line contains two integers $ n $ and $ m $ ( $ 1 \\le n, m \\le 2 \\cdot 10^5 $ ) \u2014 the length of the string $ s $ and the length of the string $ t $ , respectively.\n\nThe second line contains string $ s $ of length $ n $ , which consists of lowercase Latin letters and at most one wildcard character '\\*'.\n\nThe third line contains string $ t $ of length $ m $ , which consists only of lowercase Latin letters.",
    "outputFormat": "Print \"YES\" (without quotes), if you can obtain the string $ t $ from the string $ s $ . Otherwise print \"NO\" (without quotes).",
    "samples": [
        [
            "6 10\ncode*s\ncodeforces\n",
            "YES\n"
        ],
        [
            "6 5\nvk*cup\nvkcup\n",
            "YES\n"
        ],
        [
            "1 1\nv\nk\n",
            "NO\n"
        ],
        [
            "9 6\ngfgf*gfgf\ngfgfgf\n",
            "NO\n"
        ]
    ],
    "hint": "In the first example a wildcard character '\\*' can be replaced with a string \"force\". So the string $ s $ after this replacement is \"codeforces\" and the answer is \"YES\".\n\nIn the second example a wildcard character '\\*' can be replaced with an empty string. So the string $ s $ after this replacement is \"vkcup\" and the answer is \"YES\".\n\nThere is no wildcard character '\\*' in the third example and the strings \"v\" and \"k\" are different so the answer is \"NO\".\n\nIn the fourth example there is no such replacement of a wildcard character '\\*' that you can obtain the string $ t $ so the answer is \"NO\".",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\u73b0\u5728\u4f60\u5f97\u5230\u4e86\u4e24\u4e2a\u5b57\u7b26\u4e32$s,t$\uff0c\u5176\u4e2d$s$\u5b57\u7b26\u4e32\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u4ee5\u53ca\u4e0d\u591a\u4e8e\u4e00\u4e2a\u7684$*$\u53f7\uff0c\u800c$t$\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002$s$\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a$n$\uff0c\u800c$t$\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a$m$\u3002\n\n\u5728$s$\u5b57\u7b26\u4e32\u4e2d\u7684$*$\u53f7\u53ef\u4ee5\u88ab\u66ff\u6362\u4e3a\u4efb\u610f\u4e00\u4e2a\u4ec5\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u5b57\u7b26\u4e32\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u7a7a\u5b57\u7b26\u4e32\uff09\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u5176\u4ed6\u5b57\u7b26\u4e0d\u80fd\u88ab\u66f4\u6539\u6216\u8005\u8c03\u6362\u987a\u5e8f\u3002\u5982\u679c\u5c06$*$\u53f7\u66ff\u6362\u4e3a\u67d0\u4e2a\u4efb\u610f\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c$s$\u5b57\u7b26\u4e32\u53ef\u4ee5\u53d8\u6210$t$\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u6211\u4eec\u79f0$s,t$\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5339\u914d\u7684\u3002\n\n\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32$s=aba*aba$\u4e0e\u5b57\u7b26\u4e32$abaaba,abacaba,abazzzaba$\u90fd\u662f\u5339\u914d\u7684\uff0c\u4f46\u4e0e\u5b57\u7b26\u4e32$abcaaba,ababa,luogu,aba?aba,aba1aba$\u90fd\u662f\u4e0d\u5339\u914d\u7684\u3002\n\n\u5982\u679c\u6211\u4eec\u7ed9\u51fa\u7684\u5b57\u7b26\u4e32$s,t$\u662f\u5339\u914d\u7684\uff0c\u8f93\u51fa$YES$\uff0c\u5426\u5219\u8f93\u51fa$NO$\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n### \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570$n,m\\left( 1\\leqslant n,m\\leqslant 2\\cdot 10^5 \\right) $\uff0c\u5206\u522b\u8868\u793a\u5b57\u7b26\u4e32$s$\u548c\u5b57\u7b26\u4e32$t$\u7684\u957f\u5ea6\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5b57\u7b26\u4e32$s$\uff0c\u4fdd\u8bc1\u5b57\u7b26\u4e32\u4e2d\u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u548c\u4e0d\u591a\u4e8e\u4e00\u4e2a\u7684$*$\u3002\n\n\u7b2c\u4e09\u884c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3a$m$\u7684\u5b57\u7b26\u4e32$t$\uff0c\u4fdd\u8bc1\u5b57\u7b26\u4e32\u4e2d\u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u3002\n### \u8f93\u51fa\u683c\u5f0f\n\u5982\u679c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b57\u7b26\u4e32$s$\u5f97\u5230\u5b57\u7b26\u4e32$t$\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e8c\u8005\u662f\u5339\u914d\u7684\uff0c\u90a3\u4e48\u8f93\u51fa$YES$\uff0c\u5426\u5219\u8f93\u51fa$NO$\u3002\n\n\n\n------------\n\n\n------------\n\n\n------------\n\u6e90\u7801\u533a\uff1a\n```\n## \u9898\u76ee\u63cf\u8ff0\n\u73b0\u5728\u4f60\u5f97\u5230\u4e86\u4e24\u4e2a\u5b57\u7b26\u4e32$s,t$\uff0c\u5176\u4e2d$s$\u5b57\u7b26\u4e32\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u4ee5\u53ca\u4e0d\u591a\u4e8e\u4e00\u4e2a\u7684$*$\u53f7\uff0c\u800c$t$\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002$s$\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a$n$\uff0c\u800c$t$\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a$m$\u3002\n\n\u5728$s$\u5b57\u7b26\u4e32\u4e2d\u7684$*$\u53f7\u53ef\u4ee5\u88ab\u66ff\u6362\u4e3a\u4efb\u610f\u4e00\u4e2a\u4ec5\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u5b57\u7b26\u4e32\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u7a7a\u5b57\u7b26\u4e32\uff09\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u5176\u4ed6\u5b57\u7b26\u4e0d\u80fd\u88ab\u66f4\u6539\u6216\u8005\u8c03\u6362\u987a\u5e8f\u3002\u5982\u679c\u5c06$*$\u53f7\u66ff\u6362\u4e3a\u67d0\u4e2a\u4efb\u610f\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c$s$\u5b57\u7b26\u4e32\u53ef\u4ee5\u53d8\u6210$t$\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u6211\u4eec\u79f0$s,t$\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5339\u914d\u7684\u3002\n\n\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32$s=aba*aba$\u4e0e\u5b57\u7b26\u4e32$abaaba,abacaba,abazzzaba$\u90fd\u662f\u5339\u914d\u7684\uff0c\u4f46\u4e0e\u5b57\u7b26\u4e32$abcaaba,ababa,luogu,aba?aba,aba1aba$\u90fd\u662f\u4e0d\u5339\u914d\u7684\u3002\n\n\u5982\u679c\u6211\u4eec\u7ed9\u51fa\u7684\u5b57\u7b26\u4e32$s,t$\u662f\u5339\u914d\u7684\uff0c\u8f93\u51fa$YES$\uff0c\u5426\u5219\u8f93\u51fa$NO$\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n### \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570$n,m\\left( 1\\leqslant n,m\\leqslant 2\\cdot 10^5 \\right) $\uff0c\u5206\u522b\u8868\u793a\u5b57\u7b26\u4e32$s$\u548c\u5b57\u7b26\u4e32$t$\u7684\u957f\u5ea6\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5b57\u7b26\u4e32$s$\uff0c\u4fdd\u8bc1\u5b57\u7b26\u4e32\u4e2d\u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u548c\u4e0d\u591a\u4e8e\u4e00\u4e2a\u7684$*$\u3002\n\n\u7b2c\u4e09\u884c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3a$m$\u7684\u5b57\u7b26\u4e32$t$\uff0c\u4fdd\u8bc1\u5b57\u7b26\u4e32\u4e2d\u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u3002\n### \u8f93\u51fa\u683c\u5f0f\n\u5982\u679c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b57\u7b26\u4e32$s$\u5f97\u5230\u5b57\u7b26\u4e32$t$\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e8c\u8005\u662f\u5339\u914d\u7684\uff0c\u90a3\u4e48\u8f93\u51fa$YES$\uff0c\u5426\u5219\u8f93\u51fa$NO$\u3002\n```"
}