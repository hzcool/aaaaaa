{
    "description": "Recently, you found a bot to play \"Rock paper scissors\" with. Unfortunately, the bot uses quite a simple algorithm to play: he has a string $ s = s_1 s_2 \\dots s_{n} $ of length $ n $ where each letter is either R, S or P.\n\nWhile initializing, the bot is choosing a starting index $ pos $ ( $ 1 \\le pos \\le n $ ), and then it can play any number of rounds. In the first round, he chooses \"Rock\", \"Scissors\" or \"Paper\" based on the value of $ s_{pos} $ :\n\n- if $ s_{pos} $ is equal to R the bot chooses \"Rock\";\n- if $ s_{pos} $ is equal to S the bot chooses \"Scissors\";\n- if $ s_{pos} $ is equal to P the bot chooses \"Paper\";\n\nIn the second round, the bot's choice is based on the value of $ s_{pos + 1} $ . In the third round \u2014 on $ s_{pos + 2} $ and so on. After $ s_n $ the bot returns to $ s_1 $ and continues his game.\n\nYou plan to play $ n $ rounds and you've already figured out the string $ s $ but still don't know what is the starting index $ pos $ . But since the bot's tactic is so boring, you've decided to find $ n $ choices to each round to maximize the average number of wins.\n\nIn other words, let's suggest your choices are $ c_1 c_2 \\dots       c_n $ and if the bot starts from index $ pos $ then you'll win in $ win(pos) $ rounds. Find $ c_1 c_2 \\dots c_n $ such that $ \\frac{win(1) + win(2) + \\dots + win(n)}{n} $ is maximum possible.",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1 \\le t \\le       1000 $ ) \u2014 the number of test cases.\n\nNext $ t $ lines contain test cases \u2014 one per line. The first and only line of each test case contains string $ s = s_1 s_2       \\dots s_{n} $ ( $ 1 \\le n \\le 2 \\cdot 10^5 $ ; $ s_i \\in       \\{\\text{R}, \\text{S}, \\text{P}\\} $ ) \u2014 the string of the bot.\n\nIt's guaranteed that the total length of all strings in one test doesn't exceed $ 2 \\cdot 10^5 $ .",
    "outputFormat": "For each test case, print $ n $ choices $ c_1 c_2 \\dots c_n $ to maximize the average number of wins. Print them in the same manner as the string $ s $ .\n\nIf there are multiple optimal answers, print any of them.",
    "samples": [
        [
            "3\nRRRR\nRSP\nS",
            "PPPP\nRSP\nR"
        ]
    ],
    "hint": "In the first test case, the bot (wherever it starts) will always choose \"Rock\", so we can always choose \"Paper\". So, in any case, we will win all $ n = 4 $ rounds, so the average is also equal to $ 4 $ .\n\nIn the second test case:\n\n- if bot will start from $ pos = 1 $ , then $ (s_1,         c_1) $ is draw, $ (s_2, c_2) $ is draw and $ (s_3, c_3) $ is draw, so $ win(1) = 0 $ ;\n- if bot will start from $ pos = 2 $ , then $ (s_2, c_1) $ is win, $ (s_3, c_2) $ is win and $ (s_1, c_3) $ is win, so $ win(2) = 3 $ ;\n- if bot will start from $ pos = 3 $ , then $ (s_3, c_1) $ is lose, $ (s_1, c_2) $ is lose and $ (s_2, c_3) $ is lose, so $ win(3) = 0 $ ;\n\n The average is equal to $ \\frac{0 + 3 + 0}{3} = 1 $ and it can be proven that it's the maximum possible average. A picture from Wikipedia explaining \"Rock paper scissors\" game:\n\n  ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1380B/19e6d37b1bc101bbdb7001f87def1e230fc259d2.png)",
    "translation": "- \u6709\u4e00\u4e2a\u526a\u5200\u77f3\u5934\u5e03\u7684AI\uff0c\u4ee5\u6307\u5b9a\u7684\u987a\u5e8f\u51fa\u624b\u52bf\u3002\u4f46\u662f\u4f60\u5e76\u4e0d\u77e5\u9053\u4ed6\u4ece\u8fd9\u4e2a\u987a\u5e8f\u7684\u54ea\u91cc\u5f00\u59cb\uff0c\u6240\u4ee5\u8bf7\u7ed9\u51fa\u4e00\u4e2a\u53e6\u4e00\u4e2a\u987a\u5e8f\uff0c\u4f7f\u5f97\u4f60\u7684\u671f\u671b\u80dc\u5229\u6b21\u6570\u6700\u5927\u3002\n\n- R: \u77f3\u5934 S: \u526a\u5200 P:\u5e03\n\n- \u77f3\u5934\u8d62\u526a\u5200\uff0c\u526a\u5200\u8d62\u5e03\uff0c\u5e03\u8d62\u77f3\u5934"
}