{
    "description": "You desperately need to build some string $ t $ . For that you've got $ n $ more strings $ s_{1},s_{2},...,s_{n} $ . To build string $ t $ , you are allowed to perform exactly $ |t| $ ( $ |t| $ is the length of string $ t $ ) operations on these strings. Each operation looks like that:\n\n1. choose any non-empty string from strings $ s_{1},s_{2},...,s_{n} $ ;\n2. choose an arbitrary character from the chosen string and write it on a piece of paper;\n3. remove the chosen character from the chosen string.\n\nNote that after you perform the described operation, the total number of characters in strings $ s_{1},s_{2},...,s_{n} $ decreases by 1. We are assumed to build string $ t $ , if the characters, written on the piece of paper, in the order of performed operations form string $ t $ .\n\nThere are other limitations, though. For each string $ s_{i} $ you know number $ a_{i} $ \u2014 the maximum number of characters you are allowed to delete from string $ s_{i} $ . You also know that each operation that results in deleting a character from string $ s_{i} $ , costs $ i $ rubles. That is, an operation on string $ s_{1} $ is the cheapest (it costs $ 1 $ ruble), and the operation on string $ s_{n} $ is the most expensive one (it costs $ n $ rubles).\n\nYour task is to count the minimum amount of money (in rubles) you will need to build string $ t $ by the given rules. Consider the cost of building string $ t $ to be the sum of prices of the operations you use.",
    "inputFormat": "The first line of the input contains string $ t $ \u2014 the string that you need to build.\n\nThe second line contains a single integer $ n $ $ (1<=n<=100) $ \u2014 the number of strings to which you are allowed to apply the described operation. Each of the next $ n $ lines contains a string and an integer. The $ i $ -th line contains space-separated string $ s_{i} $ and integer $ a_{i} $ $ (0<=a_{i}<=100) $ . Number $ a_{i} $ represents the maximum number of characters that can be deleted from string $ s_{i} $ .\n\nAll strings in the input only consist of lowercase English letters. All strings are non-empty. The lengths of all strings do not exceed $ 100 $ characters.",
    "outputFormat": "Print a single number \u2014 the minimum money (in rubles) you need in order to build string $ t $ . If there is no solution, print -1.",
    "samples": [
        [
            "bbaze\n3\nbzb 2\naeb 3\nba 10\n",
            "8\n"
        ],
        [
            "abacaba\n4\naba 2\nbcc 1\ncaa 2\nbbb 5\n",
            "18\n"
        ],
        [
            "xyz\n4\naxx 8\nza 1\nefg 4\nt 1\n",
            "-1\n"
        ]
    ],
    "hint": "Notes to the samples:\n\nIn the first sample from the first string you should take characters \"b\" and \"z\" with price $ 1 $ ruble, from the second string characters \"a\", \"e\" \u0438 \"b\" with price $ 2 $ rubles. The price of the string $ t $ in this case is $ 2\u00b71+3\u00b72=8 $ .\n\nIn the second sample from the first string you should take two characters \"a\" with price $ 1 $ ruble, from the second string character \"c\" with price $ 2 $ rubles, from the third string two characters \"a\" with price $ 3 $ rubles, from the fourth string two characters \"b\" with price $ 4 $ rubles. The price of the string $ t $ in this case is $ 2\u00b71+1\u00b72+2\u00b73+2\u00b74=18 $ .\n\nIn the third sample the solution doesn't exist because there is no character \"y\" in given strings.",
    "translation": "# \u9898\u76ee\u5927\u610f\uff1a\n\u4f60\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u5b57\u7b26\u4e32$s_1$\uff0c$s_2$\uff0c......\uff0c$s_n$\u6765\u6784\u5efa\u5b57\u7b26\u4e32t\uff0c\u4f60\u53ef\u4ee5\u6267\u884c$|t|$ \uff08$|t|$\u662f\u5b57\u7b26\u4e32t\u7684\u957f\u5ea6\uff09\u6b21\u64cd\u4f5c:\n1. \u4ece\u5b57\u7b26\u4e32$s_1$\uff0c$s_2$\uff0c......\uff0c$s_n$\u4e2d\u9009\u62e9\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32\uff1b\n2. \u4ece\u6240\u9009\u5b57\u7b26\u4e32\u4e2d\u9009\u62e9\u4e00\u4e2a\u5b57\u7b26\u5e76\u5c06\u5176\u5199\u5728\u7eb8\u4e0a\uff1b\n3. \u4ece\u6240\u9009\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\u6240\u9009\u5b57\u7b26\u3002\n\n\u6ce8\u610f\uff1a\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u540e\uff0c\u5b57\u7b26\u4e32$s_1$\uff0c$s_2$\uff0c......\uff0c$s_n$\u4e2d\u7684\u5b57\u7b26\u603b\u6570\u51cf\u5c111\u3002\n\n\u6211\u4eec\u8ba4\u4e3a\u6784\u5efa\u51fa\u4e86\u5b57\u7b26\u4e32t\uff0c\u5f53\u4e14\u4ec5\u5f53\u5199\u5728\u7eb8\u4e0a\u7684\u5b57\u7b26\u6309\u987a\u5e8f\u8fde\u8d77\u6765\u4e3at\u3002\n\n\u4f46\u662f\u8fd8\u6709\u5176\u4ed6\u9650\u5236\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32$s_i$\uff0c\u6709$a_i$\u4e3a\u5141\u8bb8\u4ece\u5b57\u7b26\u4e32$s_i$\u4e2d\u5220\u9664\u7684\u6700\u5927\u5b57\u7b26\u6570\u3002\n\n\u800c\u4e14\uff0c\u4ece\u5b57\u7b26\u4e32$s_i$\u4e2d\u6bcf\u4e2a\u5220\u9664\u5b57\u7b26\u7684\u64cd\u4f5c\u90fd\u9700\u8981\u4e00\u4e9b\u4ee3\u4ef7\u3002\u5bf9\u4e8e$s_i$\uff0c\u4ece\u4e2d\u5220\u96641\u4e2a\u5b57\u7b26\u9700\u8981\u82b1\u8d39i\u7684\u4ee3\u4ef7\u3002\n\n\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u6839\u636e\u7ed9\u5b9a\u89c4\u5219\u6784\u5efa\u5b57\u7b26\u4e32t\u6240\u9700\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n# \u8f93\u5165\u683c\u5f0f\n\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u5b57\u7b26\u4e32t\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570n\u3002\n\n\u63a5\u4e0b\u6765\u7684n\u884c\uff0c\u6bcf\u4e00\u884c\u90fd\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32$s_i$\u548c\u4e00\u4e2a\u6574\u6570$a_i$\uff08\u4f7f\u7528\u7a7a\u683c\u9694\u5f00\uff09\uff0c\u542b\u4e49\u5982\u9898\u76ee\u6240\u8ff0\u3002\n# \u8f93\u51fa\u683c\u5f0f\n\u8f93\u51fa\u4e00\u4e2a\u6570\u5b57\uff0c\u4e3a\u6700\u5c0f\u4ee3\u4ef7\u3002\u82e5\u65e0\u89e3\uff0c\u8bf7\u8f93\u51fa-1\u3002\n# \u6837\u4f8b\u8bf4\u660e\n### \u7b2c\u4e00\u4e2a\u6837\u4f8b\uff1a\n1. \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u53d6\u5b57\u7b26\u201cb\u201d\u548c\u201cz\u201d\uff1b\n2. \u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u4e2d\u53d6\u5b57\u7b26\u201ca\u201d\uff0c\u201ce\u201d\u548c\u201cb\u201d\u3002\n\n\u5728\u8fd9\u79cd\u65b9\u6848\u4e0b\uff0c\u5b57\u7b26\u4e32t\u7684\u4ee3\u4ef7\u662f$2*1+3*2=8$\u3002\n### \u7b2c\u4e8c\u4e2a\u6837\u4f8b\n1. \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u53d6\u4e24\u4e2a\u5b57\u7b26\u201ca\u201d\uff1b\n2. \u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u4e2d\u53d6\u5b57\u7b26\u201cc\u201d\uff1b\n3. \u7b2c\u4e09\u4e2a\u5b57\u7b26\u4e32\u4e2d\u53d6\u4e24\u4e2a\u5b57\u7b26\u201ca\u201d\uff1b\n4. \u7b2c\u56db\u4e2a\u5b57\u7b26\u4e32\u4e2d\u53d6\u4e24\u4e2a\u5b57\u7b26\u201cb\u201d\u3002\n\n\u5728\u8fd9\u79cd\u65b9\u6848\u4e0b\uff0c\u5b57\u7b26\u4e32t\u7684\u4ee3\u4ef7\u662f$2*1+1*2+2*3+2*4=18$\u3002\n### \u7b2c\u4e09\u4e2a\u6837\u4f8b\n\u65e0\u89e3\uff0c\u56e0\u4e3a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u5b57\u7b26\u201cy\u201d\u3002\n# \u6570\u636e\u8303\u56f4\n\u8f93\u5165\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32\u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002\n\n$1\u2264|t|,|s_i|\u2264100$\uff0c$1\u2264n\u2264100$"
}