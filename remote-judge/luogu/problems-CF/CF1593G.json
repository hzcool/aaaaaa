{
    "description": "A sequence of round and square brackets is given. You can change the sequence by performing the following operations:\n\n1. change the direction of a bracket from opening to closing and vice versa without changing the form of the bracket: i.e. you can change '(' to ')' and ')' to '('; you can change '\\[' to '\\]' and '\\]' to '\\['. The operation costs $ 0 $ burles.\n2. change any square bracket to round bracket having the same direction: i.e. you can change '\\[' to '(' but not from '(' to '\\['; similarly, you can change '\\]' to ')' but not from ')' to '\\]'. The operation costs $ 1 $ burle.\n\nThe operations can be performed in any order any number of times.\n\nYou are given a string $ s $ of the length $ n $ and $ q $ queries of the type \"l r\" where $ 1 \\le l < r \\le n $ . For every substring $ s[l \\dots r] $ , find the minimum cost to pay to make it a correct bracket sequence. It is guaranteed that the substring $ s[l \\dots r] $ has an even length.\n\nThe queries must be processed independently, i.e. the changes made in the string for the answer to a question $ i $ don't affect the queries $ j $ ( $ j > i $ ). In other words, for every query, the substring $ s[l \\dots r] $ is given from the initially given string $ s $ .\n\nA correct bracket sequence is a sequence that can be built according the following rules:\n\n- an empty sequence is a correct bracket sequence;\n- if \"s\" is a correct bracket sequence, the sequences \"(s)\" and \"\\[s\\]\" are correct bracket sequences.\n- if \"s\" and \"t\" are correct bracket sequences, the sequence \"st\" (the concatenation of the sequences) is a correct bracket sequence.\n\nE.g. the sequences \"\", \"(()\\[\\])\", \"\\[()()\\]()\" and \"(())()\" are correct bracket sequences whereas \"(\", \"\\[(\\])\" and \")))\" are not.",
    "inputFormat": "The first line contains one integer $ t $ ( $ 1 \\le t \\le 100 $ ) \u2014 the number of test cases. Then $ t $ test cases follow.\n\nFor each test case, the first line contains a non-empty string $ s $ containing only round ('(', ')') and square ('\\[', '\\]') brackets. The length of the string doesn't exceed $ 10^6 $ . The string contains at least $ 2 $ characters.\n\nThe second line contains one integer $ q $ ( $ 1 \\le q \\le 2 \\cdot 10^5 $ ) \u2014 the number of queries.\n\nThen $ q $ lines follow, each of them contains two integers $ l $ and $ r $ ( $ 1 \\le l < r \\le n $ where $ n $ is the length of $ s $ ). It is guaranteed that the substring $ s[l \\dots r] $ has even length.\n\nIt is guaranteed that the sum of the lengths of all strings given in all test cases doesn't exceed $ 10^6 $ . The sum of all $ q $ given in all test cases doesn't exceed $ 2 \\cdot 10^5 $ .",
    "outputFormat": "For each test case output in a separate line for each query one integer $ x $ ( $ x \\ge 0 $ ) \u2014 the minimum cost to pay to make the given substring a correct bracket sequence.",
    "samples": [
        [
            "3\n([))[)()][]]\n3\n1 12\n4 9\n3 6\n))))))\n2\n2 3\n1 4\n[]\n1\n1 2",
            "0\n2\n1\n0\n0\n0"
        ]
    ],
    "hint": "Consider the first test case. The first query describes the whole given string, the string can be turned into the following correct bracket sequence: \"(\\[()\\])()\\[\\[\\]\\]\". The forms of the brackets aren't changed so the cost of changing is $ 0 $ .\n\nThe second query describes the substring \")\\[)()\\]\". It may be turned into \"(()())\", the cost is equal to $ 2 $ .\n\nThe third query describes the substring \"))\\[)\". It may be turned into \"()()\", the cost is equal to $ 1 $ .\n\nThe substrings of the second test case contain only round brackets. It's possible to prove that any sequence of round brackets having an even length may be turned into a correct bracket sequence for the cost of $ 0 $ burles.\n\nIn the third test case, the single query describes the string \"\\[\\]\" that is already a correct bracket sequence.",
    "translation": "\u4f60\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u62ec\u53f7\u5e8f\u5217 $s$\uff08\u4e0b\u6807\u4ece $1$ \u5230 $n$\uff09\uff0c\u5e8f\u5217\u7531\u5c0f\u62ec\u53f7\u548c\u4e2d\u62ec\u53f7\u7ec4\u6210\u3002\u5b9a\u4e49\u8be5\u5e8f\u5217\u4e2d\u4e0b\u6807\u4ece $x$ \u5230 $y$ \u7684\u8fde\u7eed\u4e00\u6bb5\u5b50\u4e32\u4e3a $s[x\\dots y]$\u3002\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u64cd\u4f5c\uff1a\n\n- \u82b1\u8d39 $0$ \u4e2a\u5355\u4f4d\u7684\u4ee3\u4ef7\u8c03\u6362\u4e00\u4e2a\u62ec\u53f7\u7684\u65b9\u5411\u3002\u5177\u4f53\u5730\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u5982\u4e0b $4$ \u7c7b\u64cd\u4f5c\u4e2d\u7684\u4e00\u7c7b\uff1a\n    - `(` $\\rightarrow$ `)`\n    - `)` $\\rightarrow$ `(`\n    - `[` $\\rightarrow$ `]`\n    - `]` $\\rightarrow$ `[`\n- \u82b1\u8d39 $1$ \u4e2a\u5355\u4f4d\u7684\u4ee3\u4ef7\u5c06\u4e00\u4e2a\u4e2d\u62ec\u53f7\u66ff\u6362\u6210\u4e00\u4e2a\u4e0d\u540c\u7c7b\u578b\u76f8\u540c\u65b9\u5411\u7684\u5c0f\u62ec\u53f7\u3002\u5177\u4f53\u5730\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u5982\u4e0b $2$ \u7c7b\u64cd\u4f5c\u4e2d\u7684\u4e00\u7c7b\uff1a\n    - `[` $\\rightarrow$ `(`\n    - `]` $\\rightarrow$ `)`\n\n\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u662f\u8fd9\u4e48\u5b9a\u4e49\u7684\uff1a\n\n- \u7a7a\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u3002\n- \u5982\u679c `A` \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u90a3\u4e48 `[A]` \u6216\u8005 `(A)` \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u3002\n- \u5982\u679c `A`\u3001`B` \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u90a3\u4e48 `AB` \u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u73b0\u5728\u6709 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 $l,r$\uff0c\u6c42\u51fa\u5c06 $s[l\\dots r]$ \u901a\u8fc7\u82e5\u5e72\u6b21\u64cd\u4f5c\u53d8\u6210\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u6700\u5c11\u9700\u8981\u82b1\u8d39\u591a\u5c11\u5355\u4f4d\u7684\u4ee3\u4ef7\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a\n\n- $t$ \u7ec4\u6570\u636e\uff0c$1\\leqslant t\\leqslant 100$\u3002\n- $1\\leqslant n\\leqslant 10^6$\uff0c$1\\leqslant q\\leqslant 2\\times 10^5$\uff0c$1\\leqslant l<r\\leqslant n$\u3002\n- $\\sum n\\leqslant 10^6$\uff0c$\\sum q\\leqslant 2\\times 10^5$\u3002\n\nTranslated by Eason_AC  \n2021.10.14"
}