{
    "description": "You are given a tree. We will consider simple paths on it. Let's denote path between vertices $ a $ and $ b $ as $ (a, b) $ . Let $ d $ -neighborhood of a path be a set of vertices of the tree located at a distance $ \\leq d $ from at least one vertex of the path (for example, $ 0 $ -neighborhood of a path is a path itself). Let $ P $ be a multiset of the tree paths. Initially, it is empty. You are asked to maintain the following queries:\n\n- $ 1 $ $ u $ $ v $ \u2014 add path $ (u, v) $ into $ P $ ( $ 1 \\leq u, v \\leq n $ ).\n- $ 2 $ $ u $ $ v $ \u2014 delete path $ (u, v) $ from $ P $ ( $ 1 \\leq u, v \\leq n $ ). Notice that $ (u, v) $ equals to $ (v, u) $ . For example, if $ P = \\{(1, 2), (1, 2)\\} $ , than after query $ 2 $ $ 2 $ $ 1 $ , $ P = \\{(1, 2)\\} $ .\n- $ 3 $ $ d $ \u2014 if intersection of all $ d $ -neighborhoods of paths from $ P $ is not empty output \"Yes\", otherwise output \"No\" ( $ 0 \\leq d \\leq n - 1 $ ).",
    "inputFormat": "The first line contains two integers $ n $ and $ q $ \u2014 the number of vertices in the tree and the number of queries, accordingly ( $ 1 \\leq n \\leq 2 \\cdot 10^5 $ , $ 2 \\leq q \\leq 2 \\cdot 10^5 $ ).\n\nEach of the following $ n - 1 $ lines contains two integers $ x_i $ and $ y_i $ \u2014 indices of vertices connected by $ i $ -th edge ( $ 1 \\le x_i, y_i \\le n $ ).\n\nThe following $ q $ lines contain queries in the format described in the statement.\n\nIt's guaranteed that:\n\n- for a query $ 2 $ $ u $ $ v $ , path $ (u, v) $ (or $ (v, u) $ ) is present in $ P $ ,\n- for a query $ 3 $ $ d $ , $ P \\neq \\varnothing $ ,\n- there is at least one query of the third type.",
    "outputFormat": "For each query of the third type output answer on a new line.",
    "samples": [
        [
            "1 4\n1 1 1\n1 1 1\n2 1 1\n3 0",
            "Yes"
        ],
        [
            "5 3\n1 2\n1 3\n3 4\n4 5\n1 1 2\n1 5 5\n3 1",
            "No"
        ],
        [
            "10 6\n1 2\n2 3\n3 4\n4 7\n7 10\n2 5\n5 6\n6 8\n8 9\n1 9 9\n1 9 8\n1 8 5\n3 0\n3 1\n3 2",
            "No\nYes\nYes"
        ]
    ],
    "hint": "",
    "translation": "\u7ed9\u5b9a\u4e00\u9897\u5927\u5c0f\u4e3a$n(n\\le2*10^5)$\u7684\u6811\uff0c$m(m\\le2*10^5)$\u6b21\u64cd\u4f5c\uff0c\u7ef4\u62a4\u4e00\u4e2a\u521d\u59cb\u4e3a\u7a7a\u7684\u8def\u5f84\u96c6\u5408$P$\u3002\n\n\u5b9a\u4e49\u6811\u4e0a\u4e00\u6761\u8def\u5f84\u7684$d$\u90bb\u5c45\uff08\u4e00\u4e2a\u70b9\u96c6\uff09$S$\u4e3a\uff1a$x \\in S$\u5f53\u524d\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a\u8def\u5f84\u4e0a\u7684\u70b9$y$\u6ee1\u8db3$dis(x,y)\\le d$\u3002\n\n\u64cd\u4f5c\u5206\u4e3a\u4e09\u79cd\uff1a\n\n$1.$\u8f93\u5165$u,v$\uff0c\u5728$P$\u4e2d\u52a0\u5165$u$\u5230$v$\u7684\u8def\u5f84\u3002\n\n$2.$\u8f93\u5165$u,v$\uff0c\u5220\u9664$P$\u4e2d**\u4e00\u4e2a**$u$\u5230$v$\u7684\u8def\u5f84\u3002\n\n\uff08\u6ce8\u610f$u$\u5230$v$\u7684\u8def\u5f84\u4e0e$v$\u5230$u$\u7684\u8def\u5f84\u662f\u76f8\u540c\u7684\uff0c\u82e5\u6709\u591a\u4e2a$u$\u5230$v$\u7684\u8def\u5f84\u53ea\u5220\u9664\u4e00\u4e2a\uff09\n\n$3.$\u8f93\u5165$d$\uff0c\u8be2\u95ee$P$\u4e2d\u6240\u6709\u8def\u5f84\u7684$d$\u90bb\u5c45\u4ea4\u96c6\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e0d\u4e3a\u7a7a\u8f93\u51faYes\uff0c\u5426\u5219\u8f93\u51faNo\u3002"
}