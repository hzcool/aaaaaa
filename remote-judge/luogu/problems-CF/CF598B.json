{
    "description": "You are given a string $ s $ and should process $ m $ queries. Each query is described by two 1-based indices $ l_{i} $ , $ r_{i} $ and integer $ k_{i} $ . It means that you should cyclically shift the substring $ s[l_{i}...\\ r_{i}] $ $ k_{i} $ times. The queries should be processed one after another in the order they are given.\n\nOne operation of a cyclic shift (rotation) is equivalent to moving the last character to the position of the first character and shifting all other characters one position to the right.\n\nFor example, if the string $ s $ is abacaba and the query is $ l_{1}=3,r_{1}=6,k_{1}=1 $ then the answer is abbacaa. If after that we would process the query $ l_{2}=1,r_{2}=4,k_{2}=2 $ then we would get the string baabcaa.",
    "inputFormat": "The first line of the input contains the string $ s $ ( $ 1<=|s|<=10000 $ ) in its initial state, where $ |s| $ stands for the length of $ s $ . It contains only lowercase English letters.\n\nSecond line contains a single integer $ m $ ( $ 1<=m<=300 $ ) \u2014 the number of queries.\n\nThe $ i $ -th of the next $ m $ lines contains three integers $ l_{i} $ , $ r_{i} $ and $ k_{i} $ ( $ 1<=l_{i}<=r_{i}<=|s|,1<=k_{i}<=1000000 $ ) \u2014 the description of the $ i $ -th query.",
    "outputFormat": "Print the resulting string $ s $ after processing all $ m $ queries.",
    "samples": [
        [
            "abacaba\n2\n3 6 1\n1 4 2\n",
            "baabcaa\n"
        ]
    ],
    "hint": "The sample is described in problem statement.",
    "translation": "# **CF598B\u7684\u7ffb\u8bd1**\r\n      \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff0c\u63a5\u7740\u6709m\u6b21\u5faa\u73af\u79fb\u4f4d\u3002\r\n      \u5faa\u73af\u79fb\u4f4d\u7684\u4e00\u4e2a\u64cd\u4f5c\u5c31\u662f\u5c06s\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u79fb\u52a8\u5230\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5c06\u6240\u6709\u5176\u4ed6\u7684\u5b57\u7b26\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002\r\n      \u4f8b\u5982\uff0cs='abacaba'\uff0c\u67e5\u8be2\u662fL1=3\uff0cR1=6\uff0cK1=1\uff0c\u90a3\u4e48\u7b54\u6848\u662f\u2019abbacaa\u2019\uff08\u89e3\u91ca\uff1a\u4eces\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u5230\u7b2c\u516d\u4e2a\u4f4d\u7f6e\u2019acab\u2019\uff0c\u5faa\u73af1\u6b21\uff0c\u628ab\u79fb\u5230\u7b2c\u4e00\u4f4d\uff0c\u5176\u4ed6\u5f80\u540e\u79fb\u4e00\u4f4d\uff0c\u5c31\u662f\u2019baca\u2019\uff0c\u66ff\u6362\u4e4b\u524d\u7684\u2019acab\u2019\uff09\uff0c\u4e4b\u540e\u5982\u679c\u6211\u4eec\u518d\u505a\u5904\u7406L2=1\uff0cR2=4\uff0cK2=2\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u53d8\u2019baabcaa\u2019\uff08\u89e3\u91ca\uff1a\u9996\u5148\u4ece\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u5230\u7b2c\u56db\u4e2a\u4f4d\u7f6e\u2019abba\u2019\uff0c\u7b2c\u4e00\u6b21\u901a\u8fc7\u79fb\u4f4d\u5f97\u5230\u2019aabb\u2019\uff0c\u7b2c\u4e8c\u6b21\u5c31\u5f97\u5230\u2019baab\u2019\uff0c\u66ff\u6362\u4e4b\u524d\u7684\u2019abba\u2019\uff09\u3002\r\n      \r\n    \u8f93\u5165\u683c\u5f0f\uff1a\r\n      \u7b2c\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32s,(1<=s\u7684\u957f\u5ea6<=10000)\uff0cs\u5168\u662f\u5c0f\u5199\u5b57\u6bcd\uff1b\r\n      \u7b2c\u4e8c\u884c\u4e00\u4e2a\u6574\u6570m\uff0c\u6709m\u4e2a\u67e5\u8be2\uff1b\r\n      \u63a5\u4e0b\u6765\u6709m\u884c\uff0c\u5305\u542b\u4e09\u4e2a\u6574\u6570Li\uff0cRi\uff0c  Ki\uff081<=Li<=Ri<=s\u7684\u957f\u5ea6\uff0cKi<=1000000\uff09\u3002\r\n\r\n     \u8f93\u51fa\u683c\u5f0f\r\n      \u8f93\u51fa\u7ecf\u8fc7m\u4e2a\u67e5\u8be2\u7684s\u3002"
}