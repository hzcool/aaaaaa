{
    "description": "This is an interactive problem.\n\nThere is a hidden permutation $ p_1, p_2, \\dots, p_n $ .\n\nConsider an undirected graph with $ n $ nodes only with no edges. You can make two types of queries:\n\n1. Specify an integer $ x $ satisfying $ 2 \\le x \\le 2n $ . For all integers $ i $ ( $ 1 \\le i \\le n $ ) such that $ 1 \\le x-i \\le n $ , an edge between node $ i $ and node $ x-i $ will be added.\n2. Query the number of edges in the shortest path between node $ p_i $ and node $ p_j $ . As the answer to this question you will get the number of edges in the shortest path if such a path exists, or $ -1 $ if there is no such path.\n\nNote that you can make both types of queries in any order.\n\nWithin $ 2n $ queries (including type $ 1 $ and type $ 2 $ ), guess two possible permutations, at least one of which is $ p_1, p_2, \\dots, p_n $ . You get accepted if at least one of the permutations is correct. You are allowed to guess the same permutation twice.\n\nA permutation of length $ n $ is an array consisting of $ n $ distinct integers from $ 1 $ to $ n $ in arbitrary order. For example, $ [2,3,1,5,4] $ is a permutation, but $ [1,2,2] $ is not a permutation ( $ 2 $ appears twice in the array), and $ [1,3,4] $ is also not a permutation ( $ n=3 $ but there is $ 4 $ in the array).",
    "inputFormat": "Each test contains multiple test cases. The first line contains a single integer $ t $ ( $ 1 \\le t \\le 100 $ ) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $ n $ ( $ 2 \\le n \\le 10^3 $ ) \u2014 the length of the permutation.\n\nIt is guaranteed that the sum of $ n $ over all test cases does not exceed $ 10^3 $ .",
    "outputFormat": "The interaction for each test case begins by reading the integer $ n $ .\n\nThen, make at most $ 2n $ queries:\n\n- If you want to make a type $ 1 $ query, output \"+ x\". $ x $ must be an integer between $ 2 $ and $ 2n $ inclusive. After doing that read $ 1 $ or $ -2 $ . If you read $ 1 $ your query was valid, otherwise it was invalid or you exceed the limit of queries, and your program must terminate immediately to receive a Wrong Answer verdict.\n- If you want to make a type $ 2 $ query, output \"? i j\". $ i $ and $ j $ must be integers between $ 1 $ and $ n $ inclusive. After that, read in a single integer $ r $ ( $ -1 \\le r \\le n $ ) \u2014 the answer to your query. If you receive the integer $ \u22122 $ instead of an answer, it means your program has made an invalid query, or has exceeded the limit of queries. Your program must terminate immediately to receive a Wrong Answer verdict.\n\nAt any point of the interaction, if you want to guess two permutations, output \"! $ p_{1,1} $ $ p_{1,2} $ $ \\dots $ $ p_{1,n} $ $ p_{2,1} $ $ p_{2,2} $ $ \\dots $ $ p_{2,n} $ \". Note that you should output the two permutations on the same line, and no exclamation mark is needed to separate the two permutations. After doing that read $ 1 $ or $ -2 $ . If you read $ 1 $ your answer was correct, otherwise it was incorrect and your program must terminate immediately to receive a Wrong Answer verdict. After that, move on to the next test case, or terminate the program if there are none. Note that reporting the answer does not count as a query.\n\nNote that even if you output a correct permutation, the second permutation should be a permutation and not an arbitrary array.\n\nAt any point, if you continue interaction after reading in the integer $ -2 $ , you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nAfter printing a query or the answer do not forget to output the end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nInteractor is non-adaptive. This means that all permutations are fixed before the interaction starts.\n\nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain a single integer $ t $ ( $ 1 \\le t \\le 100 $ ) \u2014 the number of test cases.\n\nThe first line of each test case should contain a single integer $ n $ ( $ 2 \\le n \\le 10^3 $ ) \u2014 the length of the permutation.\n\nThe second line of each test case should contain $ n $ distinct integers $ p_1, p_2, \\ldots, p_n $ ( $ 1 \\le p_i \\le n $ ) \u2014 the hidden permutation.\n\nThe sum of $ n $ over all test cases should not exceed $ 10^3 $ .",
    "samples": [
        [
            "2\n6\n\n1\n\n1\n\n1\n\n1\n\n1\n\n2\n\n-1\n\n1\n2\n\n1",
            "+ 12\n\n+ 2\n\n+ 3\n\n? 1 3\n\n+ 5\n\n? 1 5\n\n? 4 5\n\n! 1 4 2 5 3 6 1 2 3 4 5 6\n\n\n! 1 2 2 1"
        ]
    ],
    "hint": "In the first test case, $ n=6 $ and the hidden permutation $ p = [1,4,2,5,3,6] $ .\n\nFirstly, make a type $ 1 $ query on $ x=12, 2, 3 $ respectively. This adds four edges to the graph in total:\n\n- An edge that connects node $ 6 $ and node $ 6 $ .\n- An edge that connects node $ 1 $ and node $ 1 $ .\n- An edge that connects node $ 1 $ and node $ 2 $ .\n- An edge that connects node $ 2 $ and node $ 1 $ .\n\nSince all of these queries are valid, the interactor returns $ 1 $ after each of them.\n\nThen, query the number of edges in the shortest path between node $ p_1 = 1 $ and $ p_3 = 2 $ , which is equal to $ 1 $ .\n\nThen, make a type $ 1 $ query on $ x=5 $ . This adds four edges to the graph in total:\n\n- An edge that connects node $ 1 $ and node $ 4 $ .\n- An edge that connects node $ 2 $ and node $ 3 $ .\n- An edge that connects node $ 3 $ and node $ 2 $ .\n- An edge that connects node $ 4 $ and node $ 1 $ .\n\nSince this query is valid, the interactor returns $ 1 $ .\n\nThen, query the number of edges in the shortest path between node $ p_1 = 1 $ and $ p_5 = 3 $ , which is equal to $ 2 $ .\n\nThen, query the number of edges in the shortest path between node $ p_4 = 5 $ and $ p_5 = 3 $ . Such a path doesn't exist, therefore the interactor returns $ -1 $ .\n\nAfterwards, due to some magic, two possible permutations that can be $ p $ are determined: the first permutation is $ [1,4,2,5,3,6] $ and the second permutation is $ [1,2,3,4,5,6] $ . Since the first permutation is equal to the hidden permutation, this test case is solved correctly. In total, $ 7 $ queries are used, which is within the limit of $ 2 \\cdot 6 = 12 $ queries.\n\nSince the answer is correct, the interactor returns $ 1 $ .\n\nIn the second test case, $ n=2 $ and the hidden permutation is $ p = [2,1] $ .\n\nSince there are only $ 2! = 2 $ possible permutations, no queries are needed. It is sufficient to just output the two permutations, $ [1,2] $ and $ [2,1] $ . In total, $ 0 $ queries are used, which is within the limit of $ 2 \\cdot 2 = 4 $ queries.\n\nSince the answer is correct, the interactor returns $ 1 $ .",
    "translation": "\u4f60\u9700\u8981\u901a\u8fc7\u81f3\u591a $2n$ \u6b21\u8be2\u95ee\u6765\u786e\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6392\u5217\uff0c\u6bcf\u6b21\u4f60\u53ef\u4ee5\u8fdb\u884c\u4e24\u79cd\u8be2\u95ee\u4e4b\u4e00\n\n- \u9009\u62e9\u4e00\u4e2a $x(1<x\\leq2n)$ \uff0c\u5bf9\u4e8e\u6240\u6709\u7684 $i$ ,\u53ea\u8981\u6ee1\u8db3$i$ \u548c $x-i$ \u90fd\u5728 $[1,n]$ \u7684\u533a\u95f4\u4e2d\uff0c\u5c31\u8fde\u4e00\u6761 $i$ \u5230 $x - i $\u7684\u8fb9 \n- \u9009\u62e9\u4e00\u7ec4 $i,j$ \uff0c\u8be2\u95ee $p_i,p_j$ \u5728\u6700\u77ed\u8def\u4e0a\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u6ca1\u6709\u5219\u4f1a\u8fd4\u56de -1\n\n\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fdb\u884c\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u67e5\u8be2\n\n\u8f93\u51fa \"+ x\" \u83b7\u5f97\u7b2c\u4e00\u7c7b\u201c\u8be2\u95ee\u201d\uff0c\u8f93\u51fa\"? i j\"\u83b7\u5f97\u7b2c\u4e8c\u7c7b\u8be2\u95ee\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u8be2\u95ee\uff0c\u5982\u679c\u4f60\u7684\u8be2\u95ee\u662f\u5408\u6cd5\u7684\u4e14\u6ca1\u6709\u8d85\u8fc7\u8be2\u95ee\u6b21\u6570\u9650\u5236\u5219\u4f1a\u8fd4\u56de1\uff0c\u5426\u5219\u4f1a\u8fd4\u56de-2.\n\n\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u8be2\u95ee\uff0c\u5982\u679c\u4f60\u7684\u8be2\u95ee\u662f\u5408\u6cd5\u7684\u4e14\u6ca1\u6709\u8d85\u8fc7\u8be2\u95ee\u6b21\u6570\u9650\u5236\u5219\u4f1a\u8fd4\u56de\u76f8\u5e94\u7684\u7ed3\u679c\uff0c\u5426\u5219\u4f1a\u8fd4\u56de-2.\n\n\u56de\u7b54\u7b54\u6848\u65f6\uff0c\u4f60\u53ef\u4ee5\u8f93\u51fa\u4e24\u4e2a\u6392\u5217\uff0c\u53ea\u8981\u6709\u5176\u4e2d\u4e00\u4e2a\u6392\u5217\u4e3a\u6b63\u786e\u7b54\u6848\u5373\u89c6\u4e3a\u6b63\u786e\u3002\u4f60\u53ef\u4ee5\u8f93\u51fa\u4e24\u4e2a\u76f8\u540c\u7684\u6392\u5217\u3002\n\n\u4f60\u9700\u8981\u628a\u4e24\u4e2a\u6392\u5217\u5728\u540c\u4e00\u884c\u8fdb\u884c\u8f93\u51fa\uff0c\u5373\n\n$! $&ensp;$ p_1,p_2\u2026\u2026p_n,p_1,p_2\u2026\u2026p_n$\n\n\u6570\u5b57\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00"
}