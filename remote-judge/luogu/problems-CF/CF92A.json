{
    "description": "There are $ n $ walruses sitting in a circle. All of them are numbered in the clockwise order: the walrus number $ 2 $ sits to the left of the walrus number $ 1 $ , the walrus number $ 3 $ sits to the left of the walrus number $ 2 $ , ..., the walrus number $ 1 $ sits to the left of the walrus number $ n $ .\n\nThe presenter has $ m $ chips. The presenter stands in the middle of the circle and starts giving the chips to the walruses starting from walrus number $ 1 $ and moving clockwise. The walrus number $ i $ gets $ i $ chips. If the presenter can't give the current walrus the required number of chips, then the presenter takes the remaining chips and the process ends. Determine by the given $ n $ and $ m $ how many chips the presenter will get in the end.",
    "inputFormat": "The first line contains two integers $ n $ and $ m $ ( $ 1<=n<=50 $ , $ 1<=m<=10^{4} $ ) \u2014 the number of walruses and the number of chips correspondingly.",
    "outputFormat": "Print the number of chips the presenter ended up with.",
    "samples": [
        [
            "4 11\n",
            "0\n"
        ],
        [
            "17 107\n",
            "2\n"
        ],
        [
            "3 8\n",
            "1\n"
        ]
    ],
    "hint": "In the first sample the presenter gives one chip to the walrus number $ 1 $ , two chips to the walrus number $ 2 $ , three chips to the walrus number $ 3 $ , four chips to the walrus number $ 4 $ , then again one chip to the walrus number $ 1 $ . After that the presenter runs out of chips. He can't give anything to the walrus number $ 2 $ and the process finishes.\n\nIn the third sample the presenter gives one chip to the walrus number $ 1 $ , two chips to the walrus number $ 2 $ , three chips to the walrus number $ 3 $ , then again one chip to the walrus number $ 1 $ . The presenter has one chip left and he can't give two chips to the walrus number $ 2 $ , that's why the presenter takes the last chip.",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\u73b0\u5728\u6709n\u4e2a\u6d77\u72ee\u5750\u6210\u4e00\u4e2a\u5706\u5708\u73a9\u2642\u6e38\u2642\u620f\u3002\u6240\u6709\u6d77\u72ee\u90fd\u88ab\u987a\u65f6\u9488\u7684\u88ab\u7f16\u4e0a\u53f7\u7801\u4e86\uff1a2\u53f7\u6d77\u72ee\u57281\u53f7\u6d77\u72ee\u7684\u5de6\u8fb9\u5750\u7740\uff0c3\u53f7\u6d77\u72ee\u57282\u53f7\u6d77\u72ee\u7684\u5de6\u8fb9\u5750\u7740\uff0c\u2026\u2026\uff0c1\u53f7\u6d77\u72ee\u5728n\u53f7\u6d77\u72ee\u7684\u5de6\u8fb9\u5750\u7740\u3002\n\n\n\u6211\u4eec\u8fd8\u6709\u4e00\u4f4d\u6177\u6168\u7684\u6765\u81ea\u67d0\u85af\u7247\u516c\u53f8\u7684\u5458\u5de5\u3002\u4ed6\u4e3a\u4e86\u5ba3\u4f20\u4ed6\u7684\u85af\u7247\u6709\u591a\u597d\u5403\uff0c\u5e26\u6765\u4e86m\u7247\u85af\u7247\u6765\u5230\u6d77\u72ee\u7fa4\u505a\u5ba3\u4f20\u3002\u4ed6\u7ad9\u5728\u6d77\u72ee\u5708\u7684\u4e2d\u95f4\u5e76\u987a\u65f6\u9488\u8f6c\u52a8\u3002\u7b2ci\u53f7\u6d77\u72ee\u53ef\u4ee5\u5206\u5230i\u4e2a\u85af\u7247\u3002\u5982\u679c\u8fd9\u4f4d\u5458\u5de5\u6ca1\u6709\u8db3\u591f\u7684\u85af\u7247\uff0c\u8fd9\u4e2a\u9ed1\u5fc3\u7684\u5458\u5de5\u5c31\u5e26\u7740\u5269\u4e0b\u7684\u85af\u7247\u8dd1\u4e86\u3002\u73b0\u5728\u7ed9\u4f60n\u548cm\uff0c\u8ba9\u4f60\u6c42\u8fd9\u4e2a\u5458\u5de5\u6700\u540e\u4f1a\u62ff\u591a\u5c11\u85af\u7247\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n### \u8f93\u5165\u683c\u5f0f\n\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570n\u548cm\u3002\uff081<=n<=50\uff0c1<=m<=10^4\uff09\n### \u8f93\u51fa\u683c\u5f0f\n\u8f93\u51fa\u8fd9\u4e2a\u5458\u5de5\u5e26\u7740\u591a\u5c11\u85af\u7247\u8dd1\u4e86\n\n\u611f\u8c22@deadpool123 \u63d0\u4f9b\u7ffb\u8bd1"
}