{
    "description": "Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya brought home string $ s $ with the length of $ n $ . The string only consists of lucky digits. The digits are numbered from the left to the right starting with $ 1 $ . Now Petya should execute $ m $ queries of the following form:\n\n- switch $ l $ $ r $  \u2014 \"switch\" digits (i.e. replace them with their opposites) at all positions with indexes from $ l $ to $ r $ , inclusive: each digit $ 4 $ is replaced with $ 7 $ and each digit $ 7 $ is replaced with $ 4 $ $ (1<=l<=r<=n) $ ;\n- count \u2014 find and print on the screen the length of the longest non-decreasing subsequence of string $ s $ .\n\nSubsequence of a string $ s $ is a string that can be obtained from $ s $ by removing zero or more of its elements. A string is called non-decreasing if each successive digit is not less than the previous one.\n\nHelp Petya process the requests.",
    "inputFormat": "The first line contains two integers $ n $ and $ m $ ( $ 1<=n<=10^{6},1<=m<=3\u00b710^{5} $ ) \u2014 the length of the string $ s $ and the number of queries correspondingly. The second line contains $ n $ lucky digits without spaces \u2014 Petya's initial string. Next $ m $ lines contain queries in the form described in the statement.",
    "outputFormat": "For each query count print an answer on a single line.",
    "samples": [
        [
            "2 3\n47\ncount\nswitch 1 2\ncount\n",
            "2\n1\n"
        ],
        [
            "3 5\n747\ncount\nswitch 1 1\ncount\nswitch 1 3\ncount\n",
            "2\n3\n2\n"
        ]
    ],
    "hint": "In the first sample the chronology of string $ s $ after some operations are fulfilled is as follows (the sought maximum subsequence is marked with bold):\n\n1. 47\n2. 74\n3. 74\n\n In the second sample: 1. 747\n2. 447\n3. 447\n4. 774\n5. 774",
    "translation": "## \u95ee\u9898\u63cf\u8ff0\n\n\u7ed9\u4f60 $n$ \u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u662f $4$ \u6216\u8005 $7$ \uff0c\u7ed9\u4f60 $m$ \u4e2a\u4efb\u52a1\u5b8c\u6210\n\n`switch l r` \u628a $[l,r]$ \u4f4d\u7f6e\u7684 $4$ \u6362\u6210 $7$ , $7$ \u6362\u6210 $4$ \n\n`count` \u8ba1\u7b97 $n$ \u4e2a\u6570\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n\n $N$ \u4e2a\u6570\u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u662f\u8fd9 $n$ \u4e2a\u6570\u79fb\u9664\u6389 $0$ \u4e2a\u6216\u8005\u82e5\u5e72\u4e2a\u4f4d\u7f6e\u7684\u6570\uff0c\u5e76\u4e14\u6ee1\u8db3\u4ece\u7b2c $2$ \u4e2a\u6570\u5f00\u59cb\u6bcf\u4e00\u4e2a\u6570\u4e0d\u5c0f\u4e8e\u524d\u4e00\u4e2a\u6570\u7684\u5927\u5c0f\u3002\n\n## \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c $n\uff0cm$ \n\n\u7b2c\u4e8c\u884c $n$ \u4e2a\u6570\u5b57\n\n\u63a5\u4e0b\u6765 $n$ \u884c\u6bcf\u884c\u4e00\u4e2a\u547d\u4ee4\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $count$ \u7684\u547d\u4ee4\uff0c\u8f93\u51fa $n$ \u4e2a\u6570\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u7684\u957f\u5ea6"
}