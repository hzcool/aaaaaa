{
    "description": "It all started with a black-and-white picture, that can be represented as an $ n \\times m $ matrix such that all its elements are either $ 0 $ or $ 1 $ . The rows are numbered from $ 1 $ to $ n $ , the columns are numbered from $ 1 $ to $ m $ .\n\nSeveral operations were performed on the picture (possibly, zero), each of one of the two kinds:\n\n- choose a cell such that it's not on the border (neither row $ 1 $ or $ n $ , nor column $ 1 $ or $ m $ ) and it's surrounded by four cells of the opposite color (four zeros if it's a one and vice versa) and paint it the opposite color itself;\n- make a copy of the current picture.\n\nNote that the order of operations could be arbitrary, they were not necessarily alternating.\n\nYou are presented with the outcome: all $ k $ copies that were made. Additionally, you are given the initial picture. However, all $ k+1 $ pictures are shuffled.\n\nRestore the sequence of the operations. If there are multiple answers, print any of them. The tests are constructed from the real sequence of operations, i. e. at least one answer always exists.",
    "inputFormat": "The first line contains three integers $ n, m $ and $ k $ ( $ 3 \\le n, m \\le 30 $ ; $ 0 \\le k \\le 100 $ ) \u2014 the number of rows and columns of the pictures and the number of copies made, respectively.\n\nThen $ k+1 $ pictures follow \u2014 $ k $ copies and the initial picture. Their order is arbitrary.\n\nEach picture consists of $ n $ lines, each consisting of $ m $ characters, each character is either $ 0 $ or $ 1 $ . There is an empty line before each picture.",
    "outputFormat": "In the first line, print a single integer \u2014 the index of the initial picture. The pictures are numbered from $ 1 $ to $ k+1 $ in the order they appear in the input.\n\nIn the second line, print a single integer $ q $ \u2014 the number of operations.\n\nEach of the next $ q $ lines should contain an operation. The operations should be listed in order they were applied. Each operation is one of two types:\n\n- $ 1 $ $ x $ $ y $ \u2014 recolor a cell $ (x, y) $ (the $ y $ -th cell in the $ x $ -th row, it should not be on the border and it should be surrounded by four cells of opposite color to itself);\n- $ 2 $ $ i $ \u2014 make a copy of the current picture and assign it index $ i $ (picture with index the $ i $ should be equal to the current picture).\n\nEach index from $ 1 $ to $ k+1 $ should appear in the output exactly once \u2014 one of them is the index of the initial picture, the remaining $ k $ are arguments of the operations of the second kind.\n\nIf there are multiple answers, print any of them. The tests are constructed from the real sequence of operations, i. e. at least one answer always exists.",
    "samples": [
        [
            "3 3 1\n\n010\n111\n010\n\n010\n101\n010",
            "2\n2\n1 2 2\n2 1"
        ],
        [
            "4 5 3\n\n00000\n01000\n11100\n01000\n\n00000\n01000\n10100\n01000\n\n00000\n01010\n10100\n01000\n\n00000\n01000\n10100\n01000",
            "3\n5\n1 2 4\n2 2\n2 4\n1 3 2\n2 1"
        ],
        [
            "5 3 0\n\n110\n010\n001\n011\n001",
            "1\n0"
        ]
    ],
    "hint": "",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u5b9a\u4e00\u5f20 $n$ \u884c $m$ \u5217\u7684\u9ed1\u767d\u56fe\u7247\uff08\u4e0b\u6807\u4ece $1$ \u5f00\u59cb\uff09\uff0c\u6bcf\u4e00\u4e2a\u5355\u5143\u683c\u90fd\u88ab\u6d82\u4e0a\u4e86\u9ed1\u8272\u6216\u767d\u8272\uff08$1$ \u6216\u8005 $0$\uff09\u3002\n\n\u6211\u4eec\u5bf9\u8fd9\u5f20\u56fe\u7247\u8fdb\u884c\u4e86\u82e5\u5e72\u6b21\uff08\u53ef\u80fd\u4e3a\u96f6\u6b21\uff09\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u90fd\u662f\u4e0b\u5217\u4e24\u79cd\u4e4b\u4e00\uff1a\n\n- \u9009\u62e9\u4e00\u4e2a\u5355\u5143\u683c\uff0c\u8fd9\u4e2a\u5355\u5143\u683c\u4e0d\u80fd\u5728\u56fe\u7247\u7684\u8fb9\u7f18\uff08\u5373\uff0c\u5355\u5143\u683c\u6240\u5728\u884c\u4e0d\u80fd\u662f $1$ \u6216 $n$ \u884c\uff0c\u6240\u5728\u5217\u4e0d\u80fd\u662f $1$ \u6216 $m$ \u5217\uff09\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5355\u5143\u683c\u88ab\u56db\u4e2a\u4e0d\u540c\u989c\u8272\u7684\u5355\u5143\u683c\u5305\u56f4\uff08\u4e2d\u95f4 $0$ \u56db\u5468 $1$\uff0c\u53cd\u4e4b\u4ea6\u7136\uff09\uff0c\u5c06\u8fd9\u4e2a\u5355\u5143\u683c\u6d82\u6210\u76f8\u53cd\u7684\u989c\u8272\uff1b\n- \u590d\u5236\u4e00\u4efd\u5f53\u524d\u56fe\u7247\u3002\n\n\u4e24\u79cd\u64cd\u4f5c\u4e0d\u4e00\u5b9a\u4f1a\u4ea4\u66ff\u8fdb\u884c\u3002\n\n\u7ed9\u51fa\u4f60\u521d\u59cb\u56fe\u7247\u4e0e $k$ \u4efd\u590d\u5236\u56fe\u7247\uff0c\u4e00\u5171 $k+1$ \u4efd\u56fe\u7247\uff0c\u8fd9 $k+1$ \u4efd\u56fe\u7247\u662f\u88ab\u968f\u673a\u6253\u4e71\u7684\u3002\n\n\u4f60\u7684\u4efb\u52a1\u662f\u6062\u590d\u64cd\u4f5c\u7684\u987a\u5e8f\u3002\u82e5\u6709\u591a\u79cd\u53ef\u80fd\u7b54\u6848\uff0c\u53ea\u8f93\u51fa\u5176\u4e2d\u4e00\u4e2a\u5373\u53ef\u3002\n\n\u6240\u6709\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u4e00\u5b9a\u5b58\u5728\u3002\n\n## \u8f93\u5165\u683c\u5f0f\n\n\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 $n$\u3001$m$ \u4ee5\u53ca $k$\uff08$3\\le n\uff0cm\\le 30$\uff1b$0\\le k\\le 100$\uff09\uff0c\u5206\u522b\u8868\u793a\u56fe\u7247\u7684\u884c\u6570\u3001\u5217\u6570\u548c\u590d\u5236\u56fe\u7247\u7684\u6570\u91cf\u3002\n\n\u63a5\u4e0b\u6765 $k+1$ \u884c\uff0c\u6bcf\u884c\u4e00\u5f20\u56fe\u7247\uff0c\u5305\u62ec $k$ \u5f20\u590d\u5236\u56fe\u7247\u548c $1$ \u5f20\u521d\u59cb\u56fe\u7247\uff0c\u987a\u5e8f\u662f\u6253\u4e71\u7684\u3002\n\n\u6bcf\u5f20\u56fe\u7247\u7531 $n$ \u884c $m$ \u5217\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u90fd\u4e3a $0$ \u6216 $1$\u3002\u6bcf\u5f20\u56fe\u7247\u4e4b\u524d\u90fd\u6709\u4e00\u4e2a\u7a7a\u884c\u3002\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u51fa\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u521d\u59cb\u56fe\u7247\u662f\u7b2c\u51e0\u5f20\u3002\u56fe\u7247\u6309\u5176\u8f93\u5165\u987a\u5e8f\u5206\u522b\u7f16\u53f7 $1$ \u81f3 $k+1$\u3002\n\n\u8f93\u51fa\u7b2c\u4e8c\u884c\u4e00\u4e2a\u6574\u6570 $q$\uff0c\u8868\u793a\u8fdb\u884c\u4e86\u591a\u5c11\u6b21\u64cd\u4f5c\u3002\n\n\u63a5\u4e0b\u6765 $q$ \u884c\uff0c\u6bcf\u884c\u5bf9\u5e94\u4e00\u6b21\u64cd\u4f5c\uff0c\u987b\u6309\u6b63\u786e\u987a\u5e8f\u8f93\u51fa\u64cd\u4f5c\u3002\u6bcf\u4e2a\u64cd\u4f5c\u6709\u9898\u76ee\u63cf\u8ff0\u4e2d\u63d0\u5230\u7684\u4e24\u79cd\u7c7b\u578b\uff1a\n\n- $1\\ x\\ y$ \u8868\u793a\u5728\u5750\u6807 $(x,y)$ \u6267\u884c\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff1b\n- $2\\ i$ \u8868\u793a\u590d\u5236\u4e00\u4efd\u5f53\u524d\u56fe\u7247\uff0c\u7f16\u53f7\u662f $i$\u3002"
}