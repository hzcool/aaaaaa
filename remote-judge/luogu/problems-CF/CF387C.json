{
    "description": "George is a cat, so he really likes to play. Most of all he likes to play with his array of positive integers $ b $ . During the game, George modifies the array by using special changes. Let's mark George's current array as $ b_{1},b_{2},...,b_{|b|} $ (record $ |b| $ denotes the current length of the array). Then one change is a sequence of actions:\n\n- Choose two distinct indexes $ i $ and $ j $ $ (1<=i,j<=|b|;\u00a0i\u2260j) $ , such that $ b_{i}>=b_{j} $ .\n- Get number $ v=concat(b_{i},b_{j}) $ , where $ concat(x,y) $ is a number obtained by adding number $ y $ to the end of the decimal record of number $ x $ . For example, $ concat(500,10)=50010 $ , $ concat(2,2)=22 $ .\n- Add number $ v $ to the end of the array. The length of the array will increase by one.\n- Remove from the array numbers with indexes $ i $ and $ j $ . The length of the array will decrease by two, and elements of the array will become re-numbered from $ 1 $ to current length of the array.\n\nGeorge played for a long time with his array $ b $ and received from array $ b $ an array consisting of exactly one number $ p $ . Now George wants to know: what is the maximum number of elements array $ b $ could contain originally? Help him find this number. Note that originally the array could contain only positive integers.",
    "inputFormat": "The first line of the input contains a single integer $ p $ ( $ 1<=p&lt;10^{100000} $ ). It is guaranteed that number $ p $ doesn't contain any leading zeroes.",
    "outputFormat": "Print an integer \u2014 the maximum number of elements array $ b $ could contain originally.",
    "samples": [
        [
            "9555\n",
            "4"
        ],
        [
            "10000000005\n",
            "2"
        ],
        [
            "800101\n",
            "3"
        ],
        [
            "45\n",
            "1"
        ],
        [
            "1000000000000001223300003342220044555\n",
            "17"
        ],
        [
            "19992000\n",
            "1"
        ],
        [
            "310200\n",
            "2"
        ]
    ],
    "hint": "Let's consider the test examples:\n\n- Originally array $ b $ can be equal to $ {5,9,5,5} $ . The sequence of George's changes could have been: $ {5,9,5,5}\u2192{5,5,95}\u2192{95,55}\u2192{9555} $ .\n- Originally array $ b $ could be equal to $ {1000000000,5} $ . Please note that the array $ b $ cannot contain zeros.\n- Originally array $ b $ could be equal to $ {800,10,1} $ .\n- Originally array $ b $ could be equal to $ {45} $ . It cannot be equal to $ {4,5} $ , because George can get only array $ {54} $ from this array in one operation.\n\nNote that the numbers can be very large.",
    "translation": "\u4e54\u6cbb\u559c\u6b22\u5bf9\u4ed6\u7684\u6570\u5217 b \u8fdb\u884c\u64cd\u4f5c\u3002 \u6211\u4eec\u5c06\u4e54\u6cbb\u7684\u6570\u5217\u8868\u793a\u6210 b1,\u2009b2,\u2009...,\u2009b|b| (\u5176\u4e2d |b| \u8868\u793a\u6570\u5217 b \u7684\u957f\u5ea6)\u3002\u4e00\u6b21\u64cd\u4f5c\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4:\r\n\r\n\u9009\u62e9\u4e24\u4e2a\u4e0d\u540c\u7684\u6570 i \u548c j (1\u2009\u2264\u2009i,\u2009j\u2009\u2264\u2009|b|; i\u2009\u2260\u2009j)\uff0c\u6ee1\u8db3 bi\u2009\u2265\u2009bj.\r\n\u5b9a\u4e49\u6570 v\u2009=\u2009concat(bi,\u2009bj)\uff0c\u5176\u4e2d concat(x,\u2009y) \u662f\u5c06\u6570 y \u8fde\u63a5\u5728\u6570 x\u540e\u9762\u5f62\u6210\u7684\u65b0\u6570\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0cconcat(500,\u200910)\u2009=\u200950010, concat(2,\u20092)\u2009=\u200922\u3002\r\n\u5c06\u6570 v \u52a0\u5230\u6570\u5217\u7684\u672b\u5c3e\u3002\u6570\u5217\u957f\u5ea6\u589e\u52a01\u3002\r\n\u5c06\u6570\u5217\u4e2d\u7b2c i \u9879\u548c\u7b2c j \u9879\u5220\u9664\u3002\u6570\u5217\u957f\u5ea6\u7f29\u77ed 2 \uff0c\u5e76\u4e14\u6570\u5217\u4f1a\u88ab\u91cd\u65b0\u7f16\u53f7\u4e3a 1 \u5230\u5f53\u524d\u6570\u5217\u957f\u5ea6\u3002\r\n\u4e54\u6cbb\u8fdb\u884c\u4e86\u592a\u591a\u7684\u64cd\u4f5c\u4f7f\u5f97\u6570\u5217 b \u4f7f\u5f97\u6570\u5217\u6700\u7ec8\u53ea\u5b58\u5728\u4e00\u4e2a\u6570 p\u3002\u73b0\u5728\u4e54\u6cbb\u60f3\u77e5\u9053\uff0c\u6570\u5217 b \u6700\u521d\u6700\u591a\u80fd\u6709\u51e0\u4e2a\u6570\uff1f\u5e2e\u4ed6\u6c42\u51fa\u7b54\u6848\u3002\u6ce8\u610f\u6570\u5217\u6700\u521d\u53ea\u80fd\u5305\u542b\u6b63\u6574\u6570\u3002\r\n\r\nInput\r\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 p (1\u2009\u2264\u2009p\u2009<\u200910100000)\u3002 \u4fdd\u8bc1\u6570\u5b57 p \u6700\u9ad8\u4f4d\u4e0d\u4e3a0\u3002\r\n\r\nOutput\r\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570 \u2014 \u6570\u5217 b \u6700\u521d\u7684\u6700\u957f\u957f\u5ea6\u3002\r\n\r\nExample\r\nInput\r\n9555\r\nOutput\r\n4\r\nInput\r\n10000000005\r\nOutput\r\n2\r\nInput\r\n800101\r\nOutput\r\n3\r\nInput\r\n45\r\nOutput\r\n1\r\nInput\r\n1000000000000001223300003342220044555\r\nOutput\r\n17\r\nInput\r\n19992000\r\nOutput\r\n1\r\nInput\r\n310200\r\nOutput\r\n2\r\nNote\r\n\u6211\u4eec\u6765\u770b\u6837\u4f8b\uff1a\r\n\r\n\u6570\u5217 b \u6700\u521d\u53ef\u4ee5\u662f {5,\u20099,\u20095,\u20095}\u3002\u8fd9\u4e2a\u6570\u5217\u7684\u53d8\u5316\u53ef\u4ee5\u662f\uff1a{5,\u20099,\u20095,\u20095}\u2009\u2192\u2009{5,\u20095,\u200995}\u2009\u2192\u2009{95,\u200955}\u2009\u2192\u2009{9555}.\r\n\u6570\u5217 b \u6700\u521d\u53ef\u4ee5\u662f {1000000000,\u20095}\u3002\u6ce8\u610f\u6570\u5217 b \u4e0d\u80fd\u5305\u542b0\u3002\r\n\u6570\u5217 b \u6700\u521d\u53ef\u4ee5\u662f {800,\u200910,\u20091}.\r\n\u6570\u5217 b \u6700\u521d\u53ef\u4ee5\u662f {45}\u3002\u8fd9\u4e2a\u6570\u5217\u6700\u521d\u4e0d\u80fd\u662f {4,\u20095}\uff0c\u56e0\u4e3a\u4e54\u6cbb\u53ea\u80fd\u5c06\u4ed6\u53d8\u6210 {54}\u3002\r\n\u6ce8\u610f\u8fd9\u4e9b\u6570\u53ef\u80fd\u4f1a\u5f88\u5927\u3002"
}