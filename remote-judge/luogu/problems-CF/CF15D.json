{
    "description": "There is an area map that is a rectangular matrix $ n\u00d7m $ , each cell of the matrix contains the average height of a corresponding area part. Peter works for a company that has to build several cities within this area, each of the cities will occupy a rectangle $ a\u00d7b $ cells on the map. To start construction works in a particular place Peter needs to remove excess ground from the construction site where a new city will be built. To do so he chooses a cell of the minimum height within this site, and removes excess ground from other cells of the site down to this minimum level. Let's consider that to lower the ground level from $ h_{2} $ to $ h_{1} $ ( $ h_{1}<=h_{2} $ ) they need to remove $ h_{2}-h_{1} $ ground units.\n\nLet's call a site's position optimal, if the amount of the ground removed from this site is minimal compared to other possible positions. Peter constructs cities according to the following algorithm: from all the optimum site's positions he chooses the uppermost one. If this position is not unique, he chooses the leftmost one. Then he builds a city on this site. Peter repeats this process untill he can build at least one more city. For sure, he cannot carry out construction works on the occupied cells. Would you, please, help Peter place cities according to the algorithm?",
    "inputFormat": "The first line contains four space-separated integers: map sizes $ n $ , $ m $ and city sizes $ a $ , $ b $ ( $ 1<=a<=n<=1000 $ , $ 1<=b<=m<=1000 $ ). Then there follow $ n $ lines, each contains $ m $ non-negative space-separated numbers, describing the height matrix. Each number doesn't exceed $ 10^{9} $ .",
    "outputFormat": "In the first line output $ k $ \u2014 the amount of constructed cities. In each of the following $ k $ lines output 3 space-separated numbers \u2014 the row number and the column number of the upper-left corner of a subsequent construction site, and the amount of the ground to remove from it. Output the sites in the order of their building up.",
    "samples": [
        [
            "2 2 1 2\n1 2\n3 5\n",
            "2\n1 1 1\n2 1 2\n"
        ],
        [
            "4 4 2 2\n1 5 3 4\n2 7 6 1\n1 1 2 2\n2 2 1 2\n",
            "3\n3 1 2\n3 3 3\n1 2 9\n"
        ]
    ],
    "hint": "",
    "translation": "\u9898\u76ee\u63cf\u8ff0\uff1a\u5c0fP\u8981\u5728\u67d0\u4e2an*m\u89c4\u6a21\u7684\u77e9\u9635\u4e0a\u5efa\u5927\u5c0f\u4e3aa*b\u7684\u623f\u5b50\uff0c\u5df2\u77e5\u8fd9\u4e2a\u77e9\u9635\u6bcf\u4e00\u70b9\u4e0a\u7684\u6570\u503ch[i][j]\u4ee3\u8868\u5f00\u59cb\u65f6\u5730\u9762\u7684\u9ad8\u5ea6\u3002\u82e5\u5efa\u9020a*b\u623f\u5b50\u7684\u5730\u9762\u4e0d\u4e00\u81f4\uff0c\u5219\u8981\u628a\u9009\u53d6\u7684a*b\u5927\u7684\u77e9\u9635\u4e2d\u6240\u6709\u5730\u9762\u90fd\u6316\u4f4e\u4f7f\u5f97\u548c\u5176\u4e2d\u4e00\u5757\u6700\u4f4e\u7684\u5730\u9762\u9ad8\u5ea6\u4e00\u6837\uff0c\u82b1\u8d39\u662f\u6316\u7684\u9ad8\u5ea6\u548c\u3002\n\u5c0fP\u4f1a\u91cd\u590d\u5982\u4e0b\u7684\u6b65\u9aa4\u76f4\u81f3\u65e0\u6cd5\u518d\u5efa\u9020\u66f4\u591a\u7684\u623f\u5b50\uff1a\n1.\u627e\u5230n*m\u77e9\u9635\u4e2d\u5efa\u9020\u623f\u5b50\u82b1\u8d39\u6700\u5c11\u7684a*b\u77e9\u9635\uff0c\u4f18\u5148\u9009\u62e9\u5de6\u4e0a\u89d2\u7684\u77e9\u9635\u3002\n2.\u8f93\u51fa\u5de6\u4e0a\u89d2\u7684\u4f4d\u7f6e\uff0c\u5e76\u8f93\u51fa\u5728\u8fd9\u91cc\u5efa\u623f\u5b50\u7684\u82b1\u8d39\n3.\u5df2\u7ecf\u5efa\u8fc7\u623f\u5b50\u7684\u5730\u9762\u4e0d\u80fd\u518d\u5efa\u623f\u5b50\n\n\u8f93\u5165:\u7b2c\u4e00\u884c\u56db\u4e2a\u6574\u6570n,m,a,b\n\u4e4b\u540en\u884c\u6bcf\u884cm\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5730\u9762\u7684\u521d\u59cb\u9ad8\u5ea6h[i][j]\n\n\u8f93\u51fa:\u7b2c\u4e00\u884c\u4e00\u9897\u6574\u6570k\uff0c\u8868\u793a\u80fd\u5efa\u9020\u7684\u623f\u5b50\u4e2a\u6570\n\u4e4b\u540ek\u884c\u5982\u9898\u9762\u6240\u793a\n\n1<=a<=n<=1000 1<=b<=m<=1000\nh[i][j]<=10^9\n\nTranslated by \u7a00\u795e\u63a2\u5973"
}