{
    "description": "In Python, code blocks don't have explicit begin/end or curly braces to mark beginning and end of the block. Instead, code blocks are defined by indentation.\n\nWe will consider an extremely simplified subset of Python with only two types of statements.\n\nSimple statements are written in a single line, one per line. An example of a simple statement is assignment.\n\nFor statements are compound statements: they contain one or several other statements. For statement consists of a header written in a separate line which starts with \"for\" prefix, and loop body. Loop body is a block of statements indented one level further than the header of the loop. Loop body can contain both types of statements. Loop body can't be empty.\n\nYou are given a sequence of statements without indentation. Find the number of ways in which the statements can be indented to form a valid Python program.",
    "inputFormat": "The first line contains a single integer $ N $ ( $ 1<=N<=5000 $ ) \u2014 the number of commands in the program. $ N $ lines of the program follow, each line describing a single command. Each command is either \"f\" (denoting \"for statement\") or \"s\" (\"simple statement\"). It is guaranteed that the last line is a simple statement.",
    "outputFormat": "Output one line containing an integer - the number of ways the given sequence of statements can be indented modulo $ 10^{9}+7 $ .",
    "samples": [
        [
            "4\ns\nf\nf\ns\n",
            "1\n"
        ],
        [
            "4\nf\ns\nf\ns\n",
            "2\n"
        ]
    ],
    "hint": "In the first test case, there is only one way to indent the program: the second for statement must be part of the body of the first one.\n\n`<br></br>simple statement<br></br>for statement<br></br>    for statement<br></br>        simple statement<br></br>`In the second test case, there are two ways to indent the program: the second for statement can either be part of the first one's body or a separate statement following the first one.\n\n`<br></br>for statement<br></br>    simple statement<br></br>    for statement<br></br>        simple statement<br></br>`or\n\n`<br></br>for statement<br></br>    simple statement<br></br>for statement<br></br>    simple statement<br></br>`",
    "translation": "CF909C Python\u7684\u7f29\u8fdb \nPython\u7684\u4ee3\u7801\u4e2d\u4e0d\u9700\u8981\u5199begin\u3001end\u6216\u8005\u5927\u62ec\u53f7\u53bb\u6807\u8bb0\u5f00\u5934\u6216\u7ed3\u5c3e\u3002\n\u6211\u4eec\u5c06\u8003\u8651\u4e00\u79cdPython\u975e\u5e38\u7b80\u5316\u7684\u5b50\u96c6\uff0c\u5b83\u7684\u8bed\u53e5\u53ea\u6709\u4e24\u79cd\u7c7b\u578b\u3002 \n\u6bcf\u884c\u53ea\u5199\u4e00\u4e2a\u7b80\u5355\u8bed\u53e5\uff0c\u6bd4\u5982\u8d4b\u503c\u3002\nFor\u8bed\u53e5\u662f\u4e00\u4e2a\u8f83\u590d\u6742\u7684\u8bed\u53e5\uff0c\u4ed6\u4eec\u53ef\u80fd\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u5176\u4ed6\u7684\u8bed\u53e5\u3002\nFor\u8bed\u53e5\u7531\u4e00\u4e2a\u5355\u72ec\u7684\u884c\u7ec4\u6210\uff0c\u4ee5\u201cFor\u201d\u524d\u7f00\u548c\u5faa\u73af\u4f53\u5f00\u5934\u3002\n\u5faa\u73af\u4f53\u662f\u4e00\u4e2a\u8bed\u53e5\u5757\uff0c\u6bd4\u5faa\u73af\u5934\u7f29\u8fdb\u4e00\u7ea7\u3002\n\u5faa\u73af\u4f53\u53ef\u4ee5\u5305\u542b\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u8bed\u53e5\u3002\u5faa\u73af\u4f53\u4e0d\u80fd\u4e3a\u7a7a\u3002\n\u7ed9\u4f60\u4e00\u4e2a\u6ca1\u6709\u7f29\u8fdb\u7684\u5e8f\u5217\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u65b9\u5f0f\u6dfb\u52a0\u7f29\u8fdb\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u5b8c\u6574\u7684Python\u4ee3\u7801\u3002\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\uff1aN\n\u63a5\u4e0b\u6765N\u884c\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26f(for\u8bed\u53e5)\u6216s(\u7b80\u5355\u8bed\u53e5)\u3002\n\u4fdd\u8bc1\u6700\u540e\u4e00\u884c\u4e00\u5b9a\u662fs(\u7b80\u5355\u8bed\u53e5)\u3002 \n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u8f93\u51fa\u65b9\u6848\u6570\uff0c\u7b54\u6848\u5bf910^9+7\u53d6\u6a21\u3002\n\n\u611f\u8c22@2016c01 \u63d0\u4f9b\u7684\u7ffb\u8bd1"
}