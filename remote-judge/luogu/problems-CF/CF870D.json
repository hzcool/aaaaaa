{
    "description": "This is an interactive problem.\n\nJury has hidden a permutation $ p $ of integers from $ 0 $ to $ n-1 $ . You know only the length $ n $ . Remind that in permutation all integers are distinct.\n\nLet $ b $ be the inverse permutation for $ p $ , i.e. $ p_{bi}=i $ for all $ i $ . The only thing you can do is to ask xor of elements $ p_{i} $ and $ b_{j} $ , printing two indices $ i $ and $ j $ (not necessarily distinct). As a result of the query with indices $ i $ and $ j $ you'll get the value ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF870D/05028eedea6284512040197fbf5778282a77d5c1.png), where ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF870D/4298d47c0191af3c0a3103f431751061bc7e2362.png) denotes the xor operation. You can find the description of xor operation in notes.\n\nNote that some permutations can remain indistinguishable from the hidden one, even if you make all possible $ n^{2} $ queries. You have to compute the number of permutations indistinguishable from the hidden one, and print one of such permutations, making no more than $ 2n $ queries.\n\nThe hidden permutation does not depend on your queries.",
    "inputFormat": "The first line contains single integer $ n $ ( $ 1<=n<=5000 $ ) \u2014 the length of the hidden permutation. You should read this integer first.",
    "outputFormat": "When your program is ready to print the answer, print three lines.\n\nIn the first line print \"!\".\n\nIn the second line print single integer $ answers_cnt $ \u2014 the number of permutations indistinguishable from the hidden one, including the hidden one.\n\nIn the third line print $ n $ integers $ p_{0},p_{1},...,p_{n-1} $ ( $ 0<=p_{i}<n $ , all $ p_{i} $ should be distinct) \u2014 one of the permutations indistinguishable from the hidden one.\n\nYour program should terminate after printing the answer.\n\nInteraction\n\nTo ask about xor of two elements, print a string \"? i j\", where $ i $ and $ j $ \u2014 are integers from $ 0 $ to $ n-1 $ \u2014 the index of the permutation element and the index of the inverse permutation element you want to know the xor-sum for. After that print a line break and make flush operation.\n\nAfter printing the query your program should read single integer \u2014 the value of ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF870D/05028eedea6284512040197fbf5778282a77d5c1.png).\n\nFor a permutation of length $ n $ your program should make no more than $ 2n $ queries about xor-sum. Note that printing answer doesn't count as a query. Note that you can't ask more than $ 2n $ questions. If you ask more than $ 2n $ questions or at least one incorrect question, your solution will get \"Wrong answer\".\n\nIf at some moment your program reads -1 as an answer, it should immediately exit (for example, by calling exit(0)). You will get \"Wrong answer\" in this case, it means that you asked more than $ 2n $ questions, or asked an invalid question. If you ignore this, you can get other verdicts since your program will continue to read from a closed stream.\n\nYour solution will get \"Idleness Limit Exceeded\", if you don't print anything or forget to flush the output, including for the final answer .\n\nTo flush you can use (just after printing line break):\n\n- fflush(stdout) in C++;\n- System.out.flush() in Java;\n- stdout.flush() in Python;\n- flush(output) in Pascal;\n- For other languages see the documentation.\n\nHacking\n\nFor hacking use the following format:\n\n $ n $\n\n $ p_{0} $ $ p_{1} $ ... $ p_{n-1} $\n\nContestant programs will not be able to see this input.",
    "samples": [
        [
            "3\n0\n0\n3\n2\n3\n2",
            "? 0 0\n? 1 1\n? 1 2\n? 0 2\n? 2 1\n? 2 0\n!\n1\n0 1 2"
        ],
        [
            "4\n2\n3\n2\n0\n2\n3\n2\n0",
            "? 0 1\n? 1 2\n? 2 3\n? 3 3\n? 3 2\n? 2 1\n? 1 0\n? 0 0\n!\n2\n3 1 2 0"
        ]
    ],
    "hint": "xor operation, or bitwise exclusive OR, is an operation performed over two integers, in which the $ i $ -th digit in binary representation of the result is equal to $ 1 $ if and only if exactly one of the two integers has the $ i $ -th digit in binary representation equal to $ 1 $ . For more information, see [here](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nIn the first example $ p=[0,1,2] $ , thus $ b=[0,1,2] $ , the values ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF870D/05028eedea6284512040197fbf5778282a77d5c1.png) are correct for the given $ i,j $ . There are no other permutations that give the same answers for the given queries.\n\nThe answers for the queries are:\n\n- ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF870D/46dc5fa94694b483f32f322d24785fe68067b25b.png),\n- ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF870D/a7c48fc1d69c2a31eb1045df7d8372d886447c99.png),\n- ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF870D/110cedaea37a8029cc469f48f789efcb5cd1135a.png),\n- ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF870D/0ddcfac860c29dd6a8df9924ebc0e40d8aa6ba25.png),\n- ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF870D/91072cc5c414f3abeea20c2283336f4fdb1f8e87.png),\n- ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF870D/b587b2585b6e8e5b2a4afb82178cfced90807af0.png).\n\nIn the second example $ p=[3,1,2,0] $ , and $ b=[3,1,2,0] $ , the values ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF870D/05028eedea6284512040197fbf5778282a77d5c1.png) match for all pairs $ i,j $ . But there is one more suitable permutation $ p=[0,2,1,3] $ , $ b=[0,2,1,3] $ that matches all $ n^{2} $ possible queries as well. All other permutations do not match even the shown queries.",
    "translation": "**\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\uff08\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u9053\u9898\u4f7f\u7528\u8f93\u5165\u8f93\u51fa\u6d41\u800c\u975e\u51fd\u6570\u63a5\u53e3\u5b9e\u73b0\u4ea4\u4e92\uff09**\n\n## \u9898\u76ee\u63cf\u8ff0\n\nJury\u6709\u4e00\u4e2a$0\\sim n-1$ \u7684\u6392\u5217$p$ \uff0c\u4f60\u77e5\u9053\u5b83\u7684\u957f\u5ea6$n$ \u3002\n\n\u5b9a\u4e49\u53e6\u4e00\u4e2a\u6570\u5217$b$ \uff0c\u5b83\u4e0e\u5e8f\u5217$p$ \u4e92\u9006\uff08\u5373$\\forall i,p_{b_i}=i$ \uff09\u3002\n\n\u73b0\u5728\u4e3a\u4e86\u786e\u5b9a$p$ \uff0c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u8be2\u95ee\u4e00\u5bf9$(i,j)$ \uff0c\u5e76\u5f97\u5230$p_i$ \u4e0e$b_j$ \u7684\u5f02\u6216\u548c\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u5373\u4f7f\u4f60\u8be2\u95ee\u4e86\u6240\u6709$n^2$ \u5bf9\u6570\uff0c\u4ecd\u53ef\u80fd\u6709\u591a\u4e2a\u7b54\u6848\u3002\n\n\u4f60\u9700\u8981\u5728\u4e0d\u8d85\u8fc7$2n$ \u6b21\u8be2\u95ee\u540e\u56de\u7b54$p$ \u7684\u53ef\u80fd\u6570\u76ee\uff0c\u5e76\u7ed9\u51fa\u4e00\u4e2a\u5408\u6cd5\u89e3\u3002\n\n**\u540c\u4e00\u7ec4\u6570\u636e\u5185$p$ \u4e0d\u968f\u8be2\u95ee\u4ea7\u751f\u53d8\u5316**\n\n## \u6570\u636e\u8303\u56f4\n$1\\le n\\le 5000$ \u3002\n\n## \u4ea4\u4e92\u65b9\u5f0f\n\u9996\u5148\u4f60\u9700\u8981\u8bfb\u5165\u6b63\u6574\u6570$n$ \u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u4f60\u9700\u8981\u8f93\u51fa`? i j`\u8868\u793a\u8fd9\u4e2a\u8be2\u95ee\uff0c\u7d27\u63a5\u7740\u6362\u884c\u5e76\u6e05\u7a7a\u8f93\u51fa\u6d41\u3002\u5728\u6b64\u4e4b\u540e\u8bfb\u5165\u4e00\u4e2a\u6570$x$ \u8868\u793a\u8be2\u95ee\u7ed3\u679c\u3002\n\n\u5982\u679c\u7a0b\u5e8f\u8fd0\u884c\u4e2d\u4f60\u8bfb\u5165\u5230\u4e86\u4e00\u4e2a\u6570$-1$ \uff0c\u8868\u660e\u4f60\u505a\u51fa\u4e86\u8d85\u8fc7$2n$ \u6b21\u8be2\u95ee\u6216\u8be2\u95ee\u4e0d\u5408\u6cd5\uff0c\u8bf7**\u7acb\u5373\u9000\u51fa**\uff0c\u8bc4\u6d4b\u7ed3\u679c\u5c06\u4f1a\u662f`Wrong Answer`\u3002\n\n\u5f53\u4f60\u8981\u9012\u4ea4\u7b54\u6848\u65f6\uff0c\u5148\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a`!`\uff0c\u63a5\u4e0b\u6765\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6570\u8868\u793a\u5408\u6cd5\u65b9\u6848\u6570\uff0c\u7b2c\u4e09\u884c\u8f93\u51fa$n$ \u4e2a\u6570\u8868\u793a\u4e00\u4e2a\u5408\u6cd5\u7684\u6392\u5217$p$ \u3002\n\n### \u6e05\u7a7a\u8f93\u51fa\u6d41\u65b9\u6cd5\n\n\u5728\u8f93\u51fa\u540e\u8c03\u7528\u4e0b\u5217\u8bed\u53e5\uff1a\n- fflush(stdout) in C++\n- System.out.flush() in Java\n- stdout.flush() in Python\n- flush(output) in Pascal"
}