{
    "description": "Little Petya has recently started attending a programming club. Naturally he is facing the problem of choosing a programming language. After long considerations he realized that Java is the best choice. The main argument in favor of choosing Java was that it has a very large integer data type, called BigInteger.\n\nBut having attended several classes of the club, Petya realized that not all tasks require using the BigInteger type. It turned out that in some tasks it is much easier to use small data types. That's why a question arises: \"Which integer type to use if one wants to store a positive integer $ n $ ?\"\n\nPetya knows only 5 integer types:\n\n1\\) byte occupies 1 byte and allows you to store numbers from $ -128 $ to $ 127 $\n\n2\\) short occupies 2 bytes and allows you to store numbers from $ -32768 $ to $ 32767 $\n\n3\\) int occupies 4 bytes and allows you to store numbers from $ -2147483648 $ to $ 2147483647 $\n\n4\\) long occupies 8 bytes and allows you to store numbers from $ -9223372036854775808 $ to $ 9223372036854775807 $\n\n5\\) BigInteger can store any integer number, but at that it is not a primitive type, and operations with it are much slower.\n\nFor all the types given above the boundary values are included in the value range.\n\nFrom this list, Petya wants to choose the smallest type that can store a positive integer $ n $ . Since BigInteger works much slower, Peter regards it last. Help him.",
    "inputFormat": "The first line contains a positive number $ n $ . It consists of no more than $ 100 $ digits and doesn't contain any leading zeros. The number $ n $ can't be represented as an empty string.\n\nPlease, do not use %lld specificator to read or write 64-bit integers in C++. It is preffered to use cout (also you may use %I64d).",
    "outputFormat": "Print the first type from the list \"byte, short, int, long, BigInteger\", that can store the natural number $ n $ , in accordance with the data given above.",
    "samples": [
        [
            "127\n",
            "byte\n"
        ],
        [
            "130\n",
            "short\n"
        ],
        [
            "123456789101112131415161718192021222324\n",
            "BigInteger\n"
        ]
    ],
    "hint": "",
    "translation": "\u6709\u4e00\u4e2a\u4eba\u60f3\u52a0\u5165\u7f16\u7a0b\u4ff1\u4e50\u90e8\uff0c\u56e0\u4e3a Java \u6709 BigInteger \u53d8\u91cf\uff0c\u6240\u4ee5 ta \u9009\u62e9\u4e86 Java \u8bed\u8a00\u3002\n\n\u5f53\u7136\uff0c\u4e0d\u662f\u6bcf\u4e00\u6b21\u8ba1\u7b97\u90fd\u8981\u7528\u5230 BigInteger\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u6570\uff0c\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u53d8\u91cf\u7c7b\u578b\u50a8\u5b58\uff0c\u63a5\u4e0b\u6765 ta \u4f1a\u544a\u8bc9\u4f60\u4e0d\u540c\u53d8\u91cf\u7c7b\u578b\u7684\u50a8\u5b58\u8303\u56f4\uff0c\u63a5\u4e0b\u6765\u518d\u544a\u8bc9\u4f60\u4e00\u4e2a\u6570 $n$\uff0c\u8981\u4f60\u6c42\u51fa\u80fd\u50a8\u5b58 $n$ \u7684\u6700\u5c0f\u53d8\u91cf\u7c7b\u578b\u3002\n\n1. `byte`\uff1a$-128 \\sim 127$\n\n2. `short`\uff1a$-32768 \\sim 32767$\n\n3. `int`\uff1a$-2147483648 \\sim 2147483647$\n\n4. `long`\uff1a$-9223372036854775808 \\sim 9223372036854775807$\n\n5. ```BigInteger``` : $-\\infty \\sim \\infty$ \n\n\u8f93\u5165\uff1a$n$\uff08$-10^{100} \\le n \\le 10^{100}$\uff09\n\n\u8f93\u51fa\uff1a\u53d8\u91cf\u7c7b\u578b\n\n\u611f\u8c22@____233____  \u63d0\u4f9b\u7684\u7ffb\u8bd1"
}