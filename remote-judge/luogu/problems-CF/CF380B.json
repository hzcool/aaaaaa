{
    "description": "Sereja adores trees. Today he came up with a revolutionary new type of binary root trees.\n\nHis new tree consists of $ n $ levels, each vertex is indexed by two integers: the number of the level and the number of the vertex on the current level. The tree root is at level $ 1 $ , its index is $ (1,1) $ . Here is a pseudo code of tree construction.\n\n`<br></br>//the global data are integer arrays cnt[], left[][], right[][]<br></br><br></br>cnt[1] = 1;<br></br>fill arrays left[][], right[][] with values -1;<br></br>for(level = 1; level < n; level = level + 1){<br></br>    cnt[level + 1] = 0;<br></br>    for(position = 1; position <= cnt[level]; position = position + 1){<br></br>        if(the value of position is a power of two){ // that is, 1, 2, 4, 8...<br></br>            left[level][position] = cnt[level + 1] + 1;<br></br>            right[level][position] = cnt[level + 1] + 2;<br></br>            cnt[level + 1] = cnt[level + 1] + 2;            <br></br>        }else{<br></br>            right[level][position] = cnt[level + 1] + 1;<br></br>            cnt[level + 1] = cnt[level + 1] + 1;<br></br>        }<br></br>    }<br></br>}<br></br>`After the pseudo code is run, cell cnt\\[level\\] contains the number of vertices on level $ level $ . Cell left\\[level\\]\\[position\\] contains the number of the vertex on the level $ level+1 $ , which is the left child of the vertex with index $ (level,position) $ , or it contains -1, if the vertex doesn't have a left child. Similarly, cell right\\[level\\]\\[position\\] is responsible for the right child. You can see how the tree with $ n=4 $ looks like in the notes.\n\nSerja loves to make things complicated, so he first made a tree and then added an empty set $ A(level,position) $ for each vertex. Then Sereja executes $ m $ operations. Each operation is of one of the two following types:\n\n- The format of the operation is \" $ 1 $ $ t $ $ l $ $ r $ $ x $ \". For all vertices $ level,position $ $ (level=t;\u00a0l<=position<=r) $ add value $ x $ to set $ A(level,position) $ .\n- The format of the operation is \" $ 2 $ $ t $ $ v $ \". For vertex $ level,position $ $ (level=t,position=v) $ , find the union of all sets of vertices that are in the subtree of vertex $ (level,position) $ . Print the size of the union of these sets.\n\nHelp Sereja execute the operations. In this problem a set contains only distinct values like std::set in C++.",
    "inputFormat": "The first line contains integers $ n $ and $ m $ $ (1<=n,m<=7000) $ .\n\nNext $ m $ lines contain the descriptions of the operations. The operation of the first type is given by five integers: $ 1 $ $ t $ $ l $ $ r $ $ x $ $ (1<=t<=n;\u00a01<=l<=r<=cnt[t];\u00a01<=x<=10^{6}) $ . The operation of the second type is given by three integers: $ 2 $ $ t $ $ v $ $ (1<=t<=n;\u00a01<=v<=cnt[t]) $ .",
    "outputFormat": "For each operation of the second type, print the answer on a single line.",
    "samples": [
        [
            "4 5\n1 4 4 7 1\n1 3 1 2 2\n2 1 1\n2 4 1\n2 3 3\n",
            "2\n0\n1\n"
        ]
    ],
    "hint": "You can find the definitions that are used while working with root trees by this link: http://en.wikipedia.org/wiki/Tree\\_(graph\\_theory)\n\nYou can see an example of a constructed tree at $ n=4 $ below.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF380B/cfdce7b6042e4b80c52bc12a850b34cb0c34fae6.png)",
    "translation": "\n\n\u9898\u610f\uff1a\n\n\u5b9a\u4e49\u4e00\u79cd\u65b0\u578b\u4e8c\u53c9\u6811,\u5b9a\u4e49\u5728\u4e0b\u9762.\n\u4f60\u6709\u4e00\u4e2an\u5c42\u7684\u65b0\u578b\u4e8c\u53c9\u6811,\u6bcf\u4e2a\u70b9\u521d\u59cb\u6709\u4e00\u4e2a\u7a7a\u6570\u96c6,\u6709m\u7ec4\u64cd\u4f5c,\u64cd\u4f5c\u6709\u4e24\u79cd:\n1.\u5f62\u5982<1,t,l,r,x>,\u5728\u70b9(t,[l,r])\u7684\u6570\u96c6\u4e2d\u6dfb\u52a0\u6570x.\n2.\u5f62\u5982<2,t,v>,\u8be2\u95ee\u4ee5\u70b9(t,v)\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u7684\u6570\u96c6\u7684\u5e76\u7684\u5143\u7d20\u4e2a\u6570.\n\n\u65b0\u578b\u4e8c\u53c9\u6811\u5b9a\u4e49\uff1a\n\n\u6811\u7684\u5b9a\u4e49:https://en.wikipedia.org/wiki/Tree_(graph_theory)\n\n\u4e00\u4e2a\u6570\u5bf9(t,id)\u8868\u793a\u4e00\u4e2a\u70b9,\u4ee3\u8868\u8fd9\u4e2a\u70b9\u662f\u7b2ct\u5c42\u7684\u7b2cid\u4e2a\u70b9,\u6839\u4e3a(1,1).\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9,\u5f53id\u4e3a2\u7684\u5e42\u6b21\u65f6,\u8fd9\u4e2a\u70b9\u6709\u4e24\u4e2a\u5b69\u5b50,\u5426\u5219\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50.\n\u4ee5\u4e0b\u662f\u4e00\u4e2a4\u5c42\u65b0\u578b\u4e8c\u53c9\u6811.\n\n![](http://codeforces.com/predownloaded/52/62/5262171b91129ac582cf5ef374695e5e7e9e10cb.png)\n\n4\u5c42\u65b0\u578b\u4e8c\u53c9\u6811\n\n\u65b0\u578b\u4e8c\u53c9\u6811\u7684\u751f\u6210\u4f2a\u4ee3\u7801:\n```\n//the global data are integer arrays cnt[], left[][], right[][]\n\ncnt[1] = 1;\nfill arrays left[][], right[][] with values -1;\nfor(level = 1; level < n; level = level + 1){\n    cnt[level + 1] = 0;\n    for(position = 1; position <= cnt[level]; position = position + 1){\n        if(the value of position is a power of two){ // that is, 1, 2, 4, 8...\n            left[level][position] = cnt[level + 1] + 1;\n            right[level][position] = cnt[level + 1] + 2;\n            cnt[level + 1] = cnt[level + 1] + 2;            \n        }else{\n            right[level][position] = cnt[level + 1] + 1;\n            cnt[level + 1] = cnt[level + 1] + 1;\n        }\n    }\n}\nAfter the pseudo code is run, cell cnt[level] contains the number of vertices on level level. Cell left[level][position] contains the number of the vertex on the level level\u2009+\u20091, which is the left child of the vertex with index (level,\u2009position), or it contains -1, if the vertex doesn't have a left child. Similarly, cell right[level][position] is responsible for the right child. You can see how the tree with n\u2009=\u20094 looks like in the notes.\n```\n\u8f93\u5165\u6570\u636e\uff1a\n\n\u7b2c\u4e00\u884cn,m.\n\u63a5\u4e0b\u6765m\u884c,\u6bcf\u884c\u4e00\u7ec4\u64cd\u4f5c,\u5f62\u5982<1,t,l,r,x> or <2,t,v>.\n\n\u8f93\u51fa\u6570\u636e\uff1a\n\n\u6309\u987a\u5e8f\u8f93\u51fa\u64cd\u4f5c2\u4e2d\u7684\u7b54\u6848.\n\n\u6ce8\u610f\uff1a\n\n\u6570\u96c6\u7c7b\u4f3c\u4e8eset,\u81ea\u52a8\u53bb\u91cd.\n\n\n\n\u6570\u636e\u8303\u56f4\uff1a\n\nn,m:[1,7000]\nt:[1,n]\nx[1,1e6]\n\n\n\u611f\u8c22@\u5c18\u67d3\u68a6 \u63d0\u4f9b\u7684\u7ffb\u8bd1"
}