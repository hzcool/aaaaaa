{
    "description": "This is the easy version of the problem. The only difference between the two versions is the constraint on $ n $ and $ x $ . You can make hacks only if both versions of the problem are solved.\n\nLittle09 has been interested in magic for a long time, and it's so lucky that he meets a magician! The magician will perform $ n $ operations, each of them is one of the following three:\n\n- $ 1\\ x $ : Create a pig with $ x $ Health Points.\n- $ 2\\ x $ : Reduce the Health Point of all living pigs by $ x $ .\n- $ 3 $ : Repeat all previous operations. Formally, assuming that this is the $ i $ -th operation in the operation sequence, perform the first $ i-1 $ operations (including \"Repeat\" operations involved) in turn.\n\nA pig will die when its Health Point is less than or equal to $ 0 $ .\n\nLittle09 wants to know how many living pigs there are after all the operations. Please, print the answer modulo $ 998\\,244\\,353 $ .",
    "inputFormat": "The first line contains a single integer $ n $ ( $ 1\\leq n\\leq 2\\cdot 10^5 $ ) \u2014 the number of operations.\n\nEach of the following $ n $ lines contains an operation given in the form described in the problem statement. It's guaranteed that $ 1\\leq x\\leq 2\\cdot 10^5 $ in operations of the first two types.",
    "outputFormat": "Print a single integer \u2014 the number of living pigs after all the operations, modulo $ 998\\,244\\,353 $ .",
    "samples": [
        [
            "4\n1 8\n2 3\n3\n3",
            "2"
        ],
        [
            "6\n1 5\n1 6\n2 2\n3\n1 4\n3",
            "5"
        ],
        [
            "12\n2 1\n1 15\n1 9\n3\n1 12\n2 2\n1 13\n3\n2 1\n1 9\n1 8\n3",
            "17"
        ]
    ],
    "hint": "In the first example, the operations are equivalent to repeating four times: create a pig with $ 8 $ Health Points and then reduce the Health Points of all living pigs by $ 3 $ . It is easy to find that there are two living pigs in the end with $ 2 $ and $ 5 $ Health Points.",
    "translation": "\u4f60\u73b0\u5728\u6709\u4e00\u4e2a\u7a7a\u5e8f\u5217\uff0c\u9700\u8981\u7ef4\u62a4\u5982\u4e0b\u4e09\u4e2a\u64cd\u4f5c\uff1a\n\n- $1\\ x$\uff1a\u5728\u5e8f\u5217\u4e2d\u6dfb\u52a0$x$\u3002\n- $2\\ x$\uff1a\u628a\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u51cf\u53bb$x$\u3002\n- $3$\uff1a\u91cd\u590d\u4ece\u7b2c\u4e00\u6761\u5230\u672c\u6761\u64cd\u4f5c\u7684\u524d\u4e00\u6761\u7684\u6240\u6709\u64cd\u4f5c\u3002\u5305\u62ec\u64cd\u4f5c$3$\u3002\n\n\u5f53\u4e00\u4e2a\u6570\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e$0$\u65f6\uff0c\u5b83\u5c06\u88ab\u79fb\u51fa\u5e8f\u5217\u3002\n\n\u8bf7\u8f93\u51fa\u6700\u540e\u6709\u591a\u5c11\u4e2a\u6570\u8fd8\u5728\u5e8f\u5217\u4e2d\u3002\u7b54\u6848\u5bf9$998244353$\u53d6\u6a21\u3002\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570$n(1\\leq n \\leq 2\\times10^5)$\uff0c\u8868\u793a\u64cd\u4f5c\u603b\u6570\u3002 \n\n\u63a5\u4e0b\u6765\u7684\u6bcf\u884c\u7531\u64cd\u4f5c\u540d\u548c$x$\u6784\u6210\uff08\u64cd\u4f5c$3$\u53ea\u6709\u64cd\u4f5c\u540d\uff09\u3002\u5176\u4e2d$1\\leq x\\leq 2\\times 10^5$\u3002"
}