{
    "description": "Let's denote the function $ f(s) $ that takes a string $ s $ consisting of lowercase Latin letters and dots, and returns a string consisting of lowercase Latin letters as follows:\n\n1. let $ r $ be an empty string;\n2. process the characters of $ s $ from left to right. For each character $ c $ , do the following: if $ c $ is a lowercase Latin letter, append $ c $ at the end of the string $ r $ ; otherwise, delete the last character from $ r $ (if $ r $ is empty before deleting the last character \u2014 the function crashes);\n3. return $ r $ as the result of the function.\n\nYou are given two strings $ s $ and $ t $ . You have to delete the minimum possible number of characters from $ s $ so that $ f(s) = t $ (and the function does not crash). Note that you aren't allowed to insert new characters into $ s $ or reorder the existing ones.",
    "inputFormat": "The input consists of two lines: the first one contains $ s $ \u2014 a string consisting of lowercase Latin letters and dots, the second one contains $ t $ \u2014 a string consisting of lowercase Latin letters ( $ 1 \\le |t| \\le |s| \\le 10000 $ ).\n\nAdditional constraint on the input: it is possible to remove some number of characters from $ s $ so that $ f(s) = t $ .",
    "outputFormat": "Print one integer \u2014 the minimum possible number of characters you have to delete from $ s $ so $ f(s) $ does not crash and returns $ t $ as the result of the function.",
    "samples": [
        [
            "a.ba.b.\nabb",
            "2"
        ],
        [
            ".bbac..a.c.cd\nbacd",
            "3"
        ],
        [
            "c..code..c...o.d.de\ncode",
            "3"
        ]
    ],
    "hint": "",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\r\n\r\n\u5b9a\u4e49 $f(s)$ \u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u51fd\u6570\uff0c\u5176\u63a5\u6536\u7684\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u548c`.`\u3002$f(s)$ \u7684\u4f5c\u7528\u65b9\u6cd5\u4e3a\uff1a\r\n\r\n1. \u521d\u59cb\u72b6\u6001 $r$ \u4e3a\u7a7a\u5b57\u7b26\u4e32`\"\"`\u3002\r\n2. \u4ece\u5de6\u81f3\u53f3\u5904\u7406 $s$ \u4e2d\u7684\u5b57\u7b26\u3002\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e3a\u5c0f\u5199\u5b57\u6bcd\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230 $r$ \u7684\u672b\u5c3e\uff1b\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e3a`.`\uff0c\u5219\r\n\u5220\u53bb $r$ \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u3002\u7279\u522b\u7684\uff0c\u5982\u679c\u5f53\u524d $r$ \u4e3a\u7a7a\uff0c\u800c\u5f53\u524d\u5b57\u7b26\u4e3a`.`\uff0c\u5219\u51fd\u6570\u4f1a\u5d29\u6e83\uff08\u8f93\u5165\u5b57\u7b26\u4e32\u975e\u6cd5\uff09\u3002\r\n3. \u6700\u7ec8\u5f97\u5230\u7684 $r$ \u5373\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\r\n\r\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32 $s$ \u548c $t$ \uff0c\u4f60\u9700\u8981\u4ece $s$ \u4e2d\u5220\u53bb\u5c3d\u53ef\u80fd\u5c11\u7684\u5b57\u7b26\uff0c\u4f7f\u5f97 $f(s')=t$\uff08$s'$\u5fc5\u987b\u662f\u5408\u6cd5\u7684\u8f93\u5165\u5b57\u7b26\u4e32\uff0c\u4e5f\u5373\uff0c\u51fd\u6570\u4f5c\u7528\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53d1\u751f\u5d29\u6e83\uff09\u3002\r\n\r\n\u6c42\u6700\u5c11\u8981\u5220\u9664\u7684\u5b57\u7b26\u6570\u76ee\u3002\r\n\r\n## \u8f93\u5165\u683c\u5f0f\r\n\r\n\u8f93\u5165\u5206\u4e3a\u4e24\u884c\u3002\u7b2c\u4e00\u884c\u4e3a\u5b57\u7b26\u4e32 $s$ \uff0c\u4e5f\u5373\u5f85\u5220\u9664\u7684\u5b57\u7b26\u4e32\uff1b\u7b2c\u4e8c\u884c\u4e3a\u5b57\u7b26\u4e32 $t$ \uff0c\u4e5f\u5373\u76ee\u6807\u5b57\u7b26\u4e32\u3002\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u6ee1\u8db3 $1\\leq|t|\\leq|s|\\leq10000$\uff0c\u4e14\u4fdd\u8bc1\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u8f93\u5165\uff0c\u4e00\u5b9a\u5b58\u5728\u5408\u6cd5\u7684\u5220\u9664\u65b9\u5f0f\uff0c\u4f7f\u5f97 $f(s')=t$ \u3002\r\n\r\n## \u8f93\u51fa\u683c\u5f0f\r\n\r\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff1a\u4f7f\u5f97 $f(s')=t$ \u6700\u5c11\u8981\u5220\u9664\u7684\u5b57\u7b26\u6570\u76ee\u3002"
}