{
    "description": "Greg has an array $ a=a_{1},a_{2},...,a_{n} $ and $ m $ operations. Each operation looks as: $ l_{i} $ , $ r_{i} $ , $ d_{i} $ , $ (1<=l_{i}<=r_{i}<=n) $ . To apply operation $ i $ to the array means to increase all array elements with numbers $ l_{i},l_{i}+1,...,r_{i} $ by value $ d_{i} $ .\n\nGreg wrote down $ k $ queries on a piece of paper. Each query has the following form: $ x_{i} $ , $ y_{i} $ , $ (1<=x_{i}<=y_{i}<=m) $ . That means that one should apply operations with numbers $ x_{i},x_{i}+1,...,y_{i} $ to the array.\n\nNow Greg is wondering, what the array $ a $ will be after all the queries are executed. Help Greg.",
    "inputFormat": "The first line contains integers $ n $ , $ m $ , $ k $ $ (1<=n,m,k<=10^{5}) $ . The second line contains $ n $ integers: $ a_{1},a_{2},...,a_{n} $ $ (0<=a_{i}<=10^{5}) $ \u2014 the initial array.\n\nNext $ m $ lines contain operations, the operation number $ i $ is written as three integers: $ l_{i} $ , $ r_{i} $ , $ d_{i} $ , $ (1<=l_{i}<=r_{i}<=n) $ , $ (0<=d_{i}<=10^{5}) $ .\n\nNext $ k $ lines contain the queries, the query number $ i $ is written as two integers: $ x_{i} $ , $ y_{i} $ , $ (1<=x_{i}<=y_{i}<=m) $ .\n\nThe numbers in the lines are separated by single spaces.",
    "outputFormat": "On a single line print $ n $ integers $ a_{1},a_{2},...,a_{n} $ \u2014 the array after executing all the queries. Separate the printed numbers by spaces.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams of the %I64d specifier.",
    "samples": [
        [
            "3 3 3\n1 2 3\n1 2 1\n1 3 2\n2 3 4\n1 2\n1 3\n2 3\n",
            "9 18 17\n"
        ],
        [
            "1 1 1\n1\n1 1 1\n1 1\n",
            "2\n"
        ],
        [
            "4 3 6\n1 2 3 4\n1 2 1\n2 3 2\n3 4 4\n1 2\n1 3\n2 3\n1 2\n1 3\n2 3\n",
            "5 18 31 20\n"
        ]
    ],
    "hint": "",
    "translation": "\u9898\u76ee\u63cf\u8ff0\n\nGreg \u6709\u4e00\u4e2a\u6570\u5217 a{a1\uff0ca2\uff0ca3...an}\u548cm\u4e2a\u64cd\u4f5c\uff08\u4e0d\u7acb\u5373\u6267\u884c\uff09\n\u6bcf\u4e2a\u64cd\u4f5c\u5c06\u4ee5\u4ee5\u4e0b\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5982 li ri di\uff0c\n\uff081<=li<=ri<=n\uff09.\u6bcf\u4e2a\u64cd\u4f5c\u7684\u610f\u601d\u662f \u7ed9\u533a\u95f4[ali,ari]\u4e2d\u6bcf\u4e2a\u6570\u52a0\u4e0adi\uff1b\n\nGreg\u5728\u7eb8\u4e0a\u5199\u4e0b\u4e86K\u4e2a\u95ee\u9898\uff0c\u6bcf\u4e2a\u95ee\u9898\u5c06\u4ee5\u4ee5\u4e0b\u5f62\u5f0f\u7ed9\u51fa \u5982 xi\uff0cyi\uff1b\n(1<=xi<=yi<=m)\u8fd9\u610f\u5473\u7740\u4f60\u5e94\u8be5\u5bf9\u6570\u7ec4\u6267\u884c\u7b2cxi.\u7b2cxi+1.\u7b2cxi+2...\u7b2cyi\u4e2a\u64cd\u4f5c\n\n\u73b0\u5728Greg\u60f3\u77e5\u9053\uff0c\u5f53\u64cd\u4f5c\u6267\u884c\u4e4b\u540e\u6570\u7ec4a\u5c06\u4f1a\u53d8\u5f97\u600e\u6837\uff0c\u8bf7\u5e2e\u5e2e\u4ed6\uff1b\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u5305\u542b\u51e0\u4e2a\u6574\u6570n,m,k(1<=n,m,k<=10^5)\n\u7b2c\u4e8c\u884c\u662f\u539f\u59cb\u6570\u5217\n\u63a5\u4e0b\u6765m\u884c\u5c06\u7ed9\u51fam\u4e2a\u64cd\u4f5c\uff0c\u6bcf\u884c\u6709\u4e09\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4e3a li\uff0cri\uff0cdi\uff1b\uff081<=li<=ri<=n\uff09(0<=di<=10^5)\n\u63a5\u4e0b\u6765k\u884c\u5305\u542bk\u4e2a\u95ee\u9898\uff0c\u6bcf\u884c\u6709\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4e3a xi\uff0cyi\n\u6bcf\u884c\u7684\u6574\u6570\u5c06\u4ee5\u7a7a\u683c\u9694\u5f00\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u6700\u7ec8\u6570\u5217\n\u6ce8\u610f\uff0c\u8bf7\u4e0d\u8981\u5728C++\u4e2d\u4f7f\u7528%lld\u6807\u5fd7\u6765\u8f93\u51fa64\u4f4d\u6574\u6570long long\uff0c\u63a8\u8350\u4f7f\u7528cin, cout\u6d41\u6216\u8005\u7528%I64d\u6807\u5fd7\n\nBy William_Fangs"
}