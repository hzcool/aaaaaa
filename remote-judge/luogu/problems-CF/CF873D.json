{
    "description": "Merge sort is a well-known sorting algorithm. The main function that sorts the elements of array $ a $ with indices from $ [l,r) $ can be implemented as follows:\n\n1. If the segment $ [l,r) $ is already sorted in non-descending order (that is, for any $ i $ such that $ l<=i&lt;r-1 $ $ a[i]<=a[i+1] $ ), then end the function call;\n2. Let ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF873D/0a6a5a6665b3cbd9cc5472733d6aa82de6cf06ae.png);\n3. Call $ mergesort(a,l,mid) $ ;\n4. Call $ mergesort(a,mid,r) $ ;\n5. Merge segments $ [l,mid) $ and $ [mid,r) $ , making the segment $ [l,r) $ sorted in non-descending order. The merge algorithm doesn't call any other functions.\n\nThe array in this problem is $ 0 $ -indexed, so to sort the whole array, you need to call $ mergesort(a,0,n) $ .\n\nThe number of calls of function $ mergesort $ is very important, so Ivan has decided to calculate it while sorting the array. For example, if $ a={1,2,3,4} $ , then there will be $ 1 $ call of $ mergesort $ \u2014 $ mergesort(0,4) $ , which will check that the array is sorted and then end. If $ a={2,1,3} $ , then the number of calls is $ 3 $ : first of all, you call $ mergesort(0,3) $ , which then sets $ mid=1 $ and calls $ mergesort(0,1) $ and $ mergesort(1,3) $ , which do not perform any recursive calls because segments $ (0,1) $ and $ (1,3) $ are sorted.\n\nIvan has implemented the program that counts the number of $ mergesort $ calls, but now he needs to test it. To do this, he needs to find an array $ a $ such that $ a $ is a permutation of size $ n $ (that is, the number of elements in $ a $ is $ n $ , and every integer number from $ [1,n] $ can be found in this array), and the number of $ mergesort $ calls when sorting the array is exactly $ k $ .\n\nHelp Ivan to find an array he wants!",
    "inputFormat": "The first line contains two numbers $ n $ and $ k $ ( $ 1<=n<=100000 $ , $ 1<=k<=200000 $ ) \u2014 the size of a desired permutation and the number of $ mergesort $ calls required to sort it.",
    "outputFormat": "If a permutation of size $ n $ such that there will be exactly $ k $ calls of $ mergesort $ while sorting it doesn't exist, output $ -1 $ . Otherwise output $ n $ integer numbers $ a[0],a[1],...,a[n-1] $ \u2014 the elements of a permutation that would meet the required conditions. If there are multiple answers, print any of them.",
    "samples": [
        [
            "3 3\n",
            "2 1 3 "
        ],
        [
            "4 1\n",
            "1 2 3 4 "
        ],
        [
            "5 6\n",
            "-1\n"
        ]
    ],
    "hint": "",
    "translation": "\u5f52\u5e76\u6392\u5e8f\u662f\u6709\u540d\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5bf9\u6570\u7ec4$a$\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u53ef\u4ee5\u6309\u5982\u4e0b\u6b65\u9aa4\u5b9e\u73b0\uff1a\r\n1. \u5982\u679c$[l,r)$\u533a\u95f4\u5df2\u7ecf\u4ee5\u975e\u964d\u5e8f\u6392\u5217\u65f6\uff08\u5373\u5bf9\u4e8e\u4efb\u610f$i$\u6ee1\u8db3$l<=i<r-1$,\u90fd\u6709$a[i]<=a[i+1])$,\u8fd9\u65f6\u7ed3\u675f\u51fd\u6570\u8c03\u7528\uff1b\r\n2. \u4ee4$mid=[(l+r)/2]$;\r\n3. \u8c03\u7528$mergesort(a,l,mid)$;\r\n4. \u8c03\u7528$mergesort(a,mid,r)$;\r\n5. \u5408\u5e76$[l,mid),[mid,r)$\u533a\u95f4\uff0c\u4f7f$[l,r)$\u6309\u975e\u964d\u5e8f\u6392\u5217\u3002\u5408\u5e76\u7b97\u6cd5\u4e0d\u4f1a\u8c03\u7528\u4efb\u4f55\u5176\u4ed6\u51fd\u6570\u3002\r\n\r\n\u9898\u4e2d\u6570\u7ec4\u7d22\u5f15\u4ece0\u5f00\u59cb\uff0c\u56e0\u6b64\u5bf9\u6574\u4e2a\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u9700\u8c03\u7528$mergesort(a,0,n)$\u3002\r\n\r\n\u51fd\u6570$mergesort$\u7684\u8c03\u7528\u6b21\u6570\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u6b64Ivan\u51b3\u5b9a\u5728\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u65f6\u5bf9\u5176\u8fdb\u884c\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c\u5982\u679c$a=1,2,3,4$\uff0c\u90a3\u4e48\u5c31\u4f1a\u67091\u6b21$mergesort$\u8c03\u7528\u2014\u2014 $mergesort(0,4)$\uff0c\u5176\u68c0\u67e5\u5230\u6570\u7ec4\u5df2\u6392\u597d\u5e8f\u5e76\u7ed3\u675f\u7a0b\u5e8f\u3002\u5982\u679c$a=2,1,3$\uff0c\u5219\u8c03\u7528\u6b21\u6570\u4e3a3\uff1a\u9996\u5148\uff0c\u8c03\u7528$mergesort(0,3)$\uff0c\u7136\u540e\u8bbe$mid=1$\uff0c\u8c03\u7528$mergesort(0,1)$\u548c$mergesort(1,3)$\uff0c\u6b64\u540e\u4e0d\u6267\u884c\u4efb\u4f55\u9012\u5f52\u8c03\u7528\uff0c\u56e0\u4e3a$(0,1)$\u548c$(1,3)$\u5df2\u7ecf\u6392\u597d\u5e8f\u3002\r\n\r\nIvan\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8ba1\u7b97$mergesort$\u8c03\u7528\u6b21\u6570\u7684\u7a0b\u5e8f\uff0c\u4f46\u73b0\u5728\u4ed6\u9700\u8981\u6d4b\u8bd5\u8fd9\u4e2a\u7a0b\u5e8f\u3002\u4e3a\u6b64\uff0c\u4ed6\u9700\u8981\u627e\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217$a$\uff08\u5373$a$\u4e2d\u7684\u5143\u7d20\u6570\u662f$n$\uff0c\u4e14\u8fd9\u4e2a\u6570\u7ec4\u5305\u542b$[1,n]$\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\uff09\uff0c\u5e76\u4e14\u5728\u6392\u5e8f\u6570\u7ec4\u65f6$mergesort$\u8c03\u7528\u7684\u6b21\u6570\u6b63\u597d\u662f$k$\u3002\r\n\r\n\u8bf7\u5e2eIvan\u627e\u5230\u4ed6\u60f3\u8981\u7684\u5e8f\u5217\uff01\r\n# **\u8f93\u5165\u8f93\u51fa\u683c\u5f0f**#\r\n**\u8f93\u5165\u683c\u5f0f\uff1a**\r\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6570\u5b57$n$\u548c$k$ _$(1<=n<=100000,1<=k<=200000)$_ \u2014\u2014\u5373\u6240\u9700\u5e8f\u5217\u7684\u957f\u5ea6\u548c\u5bf9\u8be5\u5e8f\u5217\u6392\u5e8f\u9700\u8981\u8c03\u7528$mergesort$\u7684\u6b21\u6570\u3002\r\n\r\n**\u8f93\u51fa\u683c\u5f0f\uff1a**\r\n\u5982\u679c\u4e0d\u5b58\u5728\u6392\u5e8f\u65f6\u6b63\u597d\u8c03\u7528$k$\u6b21$mergesort$\u4e14\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217\uff0c\u5219\u8f93\u51fa\u22121\u3002\u5426\u5219\u8f93\u51fa$n$\u4e2a\u6574\u6570$a[0],a[1],...,a[n-1]$\u2014\u2014\u5373\u7b26\u5408\u8981\u6c42\u7684\u5e8f\u5217\u7684\u5404\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u8f93\u51fa\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u3002"
}