{
    "description": "You are given an undirected graph with $ n $ vertices numbered from $ 1 $ to $ n $ . Initially there are no edges.\n\nYou are asked to perform some queries on the graph. Let $ last $ be the answer to the latest query of the second type, it is set to $ 0 $ before the first such query. Then the queries are the following:\n\n- $ 1~x~y $ ( $ 1 \\le x, y \\le n $ , $ x \\ne y $ ) \u2014 add an undirected edge between the vertices $ (x + last - 1)~mod~n + 1 $ and $ (y + last - 1)~mod~n + 1 $ if it doesn't exist yet, otherwise remove it;\n- $ 2~x~y $ ( $ 1 \\le x, y \\le n $ , $ x \\ne y $ ) \u2014 check if there exists a path between the vertices $ (x + last - 1)~mod~n + 1 $ and $ (y + last - 1)~mod~n + 1 $ , which goes only through currently existing edges, and set $ last $ to $ 1 $ if so and $ 0 $ otherwise.\n\nGood luck!",
    "inputFormat": "The first line contains two integer numbers $ n $ and $ m $ ( $ 2 \\le n, m \\le 2 \\cdot 10^5 $ ) \u2014 the number of vertices and the number of queries, respectively.\n\nEach of the following $ m $ lines contains a query of one of two aforementioned types. It is guaranteed that there is at least one query of the second type.",
    "outputFormat": "Print a string, consisting of characters '0' and '1'. The $ i $ -th character should be the answer to the $ i $ -th query of the second type. Therefore the length of the string should be equal to the number of queries of the second type.",
    "samples": [
        [
            "5 9\n1 1 2\n1 1 3\n2 3 2\n1 2 4\n2 3 4\n1 2 4\n2 3 4\n1 1 3\n2 4 3\n",
            "1010\n"
        ],
        [
            "3 9\n1 1 2\n1 2 3\n1 3 1\n2 1 3\n1 3 2\n2 2 3\n1 1 2\n2 1 2\n2 1 2\n",
            "1101\n"
        ]
    ],
    "hint": "The converted queries in the first example are:\n\n- 1 1 2\n- 1 1 3\n- 2 3 2\n- 1 3 5\n- 2 4 5\n- 1 2 4\n- 2 3 4\n- 1 2 4\n- 2 5 4\n\nThe converted queries in the second example are:\n\n- 1 1 2\n- 1 2 3\n- 1 3 1\n- 2 1 3\n- 1 1 3\n- 2 3 1\n- 1 2 3\n- 2 2 3\n- 2 1 2",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u4f60\u4e00\u4e2a\u6709$n$\u4e2a\u70b9\u7684\u65e0\u5411\u56fe,\u70b9\u7684\u7f16\u53f7\u4ece$1$\u5230$n$,\u6700\u521d\u56fe\u4e2d\u6ca1\u6709\u8fb9\n\n\u7ed9\u5b9a\u4e24\u79cd\u64cd\u4f5c:\n\n- $1\\ x\\ y(1\\le n,x\\neq y)$\u5982\u679c\u5728\u70b9$(x+lstans-1)mod\\ n+1$\u4e0e\u8fb9$(y+lstans-1)mod\\ n+1$\u4e4b\u95f4\u6709\u8fb9,\u5219\u5220,\u65e0\u8fb9\u5219\u52a0\n\n- $2\\ x\\ y(1\\le x,y \\le n,x\\neq y)$\u68c0\u67e5\u70b9$(x+lstans-1)mod\\ n+1$\u4e0e\u70b9$(y+lstans-1)mod\\ n+1$\u4e4b\u95f4\u7684\u8fde\u901a\u6027,\u8054\u901a\u5219\u8f93\u51fa1,\u5426\u5219\u8f93\u51fa0\n\n(\u8fd9\u91cc\u5b9a\u4e49$lastans$\u4e3a\u4e0a\u4e00\u6b21\u64cd\u4f5c$2$\u7684\u7ed3\u679c,\u7279\u522b\u7684,\u5728\u7b2c\u4e00\u6b21\u64cd\u4f5c$2$\u4e4b\u524d,$lastans=0$)\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570$n,m(2\\le n,m\\le 2\\cdot 10^5)$,$n$\u4ee3\u8868\u70b9\u7684\u4e2a\u6570,\u800c$m$\u4ee3\u8868\u64cd\u4f5c\u7684\u4e2a\u6570\n\n\u63a5\u4e0b\u6765\u6709$m$\u884c,\u5177\u4f53\u683c\u5f0f\u5982\u9898\u76ee\u63cf\u8ff0\u4e2d\u6240\u5199(\u4fdd\u8bc1\u6709\u81f3\u5c11\u4e00\u6b21\u64cd\u4f5c$2$)\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u64cd\u4f5c$2$,\u8f93\u51fa\u4e00\u4e2a\u6574\u6570,\u4e3a\u8fd9\u4e2a\u8be2\u95ee\u7684\u7b54\u6848(\u4e0d\u7528\u7a7a\u683c\u9694\u5f00)\n\n### \u8bf4\u660e/\u63d0\u793a\n\n\u5bf9\u4e8e\u6837\u4f8b$1$,\u8f93\u5165\u6240\u4ee3\u8868\u7684\u5b9e\u9645\u8be2\u95ee\u5982\u4e0b:\n\n- 1 1 2\n- 1 1 3\n- 2 3 2\n- 1 3 5\n- 2 4 5\n- 1 2 4\n- 2 3 4\n- 1 2 4\n- 2 5 4\n\n\u5bf9\u4e8e\u6837\u4f8b$2$,\u8f93\u5165\u6240\u4ee3\u8868\u7684\u5b9e\u9645\u8be2\u95ee\u5982\u4e0b:\n\n- 1 1 2\n- 1 2 3\n- 1 3 1\n- 2 1 3\n- 1 1 3\n- 2 3 1\n- 1 2 3\n- 2 2 3\n- 2 1 2"
}