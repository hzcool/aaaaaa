{
    "description": "The next \"Data Structures and Algorithms\" lesson will be about Longest Increasing Subsequence (LIS for short) of a sequence. For better understanding, Nam decided to learn it a few days before the lesson.\n\nNam created a sequence $ a $ consisting of $ n $ ( $ 1<=n<=10^{5} $ ) elements $ a_{1},a_{2},...,a_{n} $ ( $ 1<=a_{i}<=10^{5} $ ). A subsequence $ a_{i1},a_{i2},...,a_{ik} $ where $ 1<=i_{1}<i_{2}<...<i_{k}<=n $ is called increasing if $ a_{i1}<a_{i2}<a_{i3}<...<a_{ik} $ . An increasing subsequence is called longest if it has maximum length among all increasing subsequences.\n\nNam realizes that a sequence may have several longest increasing subsequences. Hence, he divides all indexes $ i $ ( $ 1<=i<=n $ ), into three groups:\n\n1. group of all $ i $ such that $ a_{i} $ belongs to no longest increasing subsequences.\n2. group of all $ i $ such that $ a_{i} $ belongs to at least one but not every longest increasing subsequence.\n3. group of all $ i $ such that $ a_{i} $ belongs to every longest increasing subsequence.\n\nSince the number of longest increasing subsequences of $ a $ may be very large, categorizing process is very difficult. Your task is to help him finish this job.",
    "inputFormat": "The next \"Data Structures and Algorithms\" lesson will be about Longest Increasing Subsequence (LIS for short) of a sequence. For better understanding, Nam decided to learn it a few days before the lesson.\n\nNam created a sequence $ a $ consisting of $ n $ ( $ 1<=n<=10^{5} $ ) elements $ a_{1},a_{2},...,a_{n} $ ( $ 1<=a_{i}<=10^{5} $ ). A subsequence $ a_{i1},a_{i2},...,a_{ik} $ where $ 1<=i_{1}<i_{2}<...<i_{k}<=n $ is called increasing if $ a_{i1}<a_{i2}<a_{i3}<...<a_{ik} $ . An increasing subsequence is called longest if it has maximum length among all increasing subsequences.\n\nNam realizes that a sequence may have several longest increasing subsequences. Hence, he divides all indexes $ i $ ( $ 1<=i<=n $ ), into three groups:\n\n1. group of all $ i $ such that $ a_{i} $ belongs to no longest increasing subsequences.\n2. group of all $ i $ such that $ a_{i} $ belongs to at least one but not every longest increasing subsequence.\n3. group of all $ i $ such that $ a_{i} $ belongs to every longest increasing subsequence.\n\nSince the number of longest increasing subsequences of $ a $ may be very large, categorizing process is very difficult. Your task is to help him finish this job.",
    "outputFormat": "Print a string consisting of $ n $ characters. $ i $ -th character should be '1', '2' or '3' depending on which group among listed above index $ i $ belongs to.",
    "samples": [
        [
            "1\n4\n",
            "3\n"
        ],
        [
            "4\n1 3 2 5\n",
            "3223\n"
        ],
        [
            "4\n1 5 2 3\n",
            "3133\n"
        ]
    ],
    "hint": "The next \"Data Structures and Algorithms\" lesson will be about Longest Increasing Subsequence (LIS for short) of a sequence. For better understanding, Nam decided to learn it a few days before the lesson.\n\nNam created a sequence $ a $ consisting of $ n $ ( $ 1<=n<=10^{5} $ ) elements $ a_{1},a_{2},...,a_{n} $ ( $ 1<=a_{i}<=10^{5} $ ). A subsequence $ a_{i1},a_{i2},...,a_{ik} $ where $ 1<=i_{1}<i_{2}<...<i_{k}<=n $ is called increasing if $ a_{i1}<a_{i2}<a_{i3}<...<a_{ik} $ . An increasing subsequence is called longest if it has maximum length among all increasing subsequences.\n\nNam realizes that a sequence may have several longest increasing subsequences. Hence, he divides all indexes $ i $ ( $ 1<=i<=n $ ), into three groups:\n\n1. group of all $ i $ such that $ a_{i} $ belongs to no longest increasing subsequences.\n2. group of all $ i $ such that $ a_{i} $ belongs to at least one but not every longest increasing subsequence.\n3. group of all $ i $ such that $ a_{i} $ belongs to every longest increasing subsequence.\n\nSince the number of longest increasing subsequences of $ a $ may be very large, categorizing process is very difficult. Your task is to help him finish this job.",
    "translation": "# \u9898\u610f\uff1a\n\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217a1,a2,...,an\uff0c\u4f60\u9700\u8981\u628a\u8fd9n\u4e2a\u5143\u7d20\u5206\u6210\u4e09\u7c7b\uff1a1\uff0c2\uff0c3\uff1a\n\n1:\u6240\u6709\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u90fd\u4e0d\u5305\u542b\u8fd9\u4e2a\u5143\u7d20\n\n2:\u6709\u4f46\u975e\u6240\u6709\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u5305\u542b\u8fd9\u4e2a\u5143\u7d20\n\n3:\u6240\u6709\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u90fd\u5305\u542b\u8fd9\u4e2a\u5143\u7d20\n\n# \u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u8868\u793a\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u7b2c\u4e8c\u884c\u5305\u542bn\u4e2a\u6b63\u6574\u6570a1,a2,...,an\uff0c\u8868\u793a\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u3002\n\n# \u8f93\u51fa\u683c\u5f0f\uff1a\n\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u3001\u75311,2,3\u4e09\u79cd\u6570\u5b57\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u7b2ci\u4e2a\u6570\u5b57\u8868\u793aai\u6240\u5c5e\u7c7b\u522b\u3002\n\n# \u6570\u636e\u8303\u56f4\uff1a\n1\u2264n\u226410^5\n\n1\u2264ai\u226410^5"
}