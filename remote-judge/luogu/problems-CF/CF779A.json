{
    "description": "In Berland each high school student is characterized by academic performance \u2014 integer value between $ 1 $ and $ 5 $ .\n\nIn high school 0xFF there are two groups of pupils: the group $ A $ and the group $ B $ . Each group consists of exactly $ n $ students. An academic performance of each student is known \u2014 integer value between $ 1 $ and $ 5 $ .\n\nThe school director wants to redistribute students between groups so that each of the two groups has the same number of students whose academic performance is equal to $ 1 $ , the same number of students whose academic performance is $ 2 $ and so on. In other words, the purpose of the school director is to change the composition of groups, so that for each value of academic performance the numbers of students in both groups are equal.\n\nTo achieve this, there is a plan to produce a series of exchanges of students between groups. During the single exchange the director selects one student from the class $ A $ and one student of class $ B $ . After that, they both change their groups.\n\nPrint the least number of exchanges, in order to achieve the desired equal numbers of students for each academic performance.",
    "inputFormat": "The first line of the input contains integer number $ n $ ( $ 1<=n<=100 $ ) \u2014 number of students in both groups.\n\nThe second line contains sequence of integer numbers $ a_{1},a_{2},...,a_{n} $ ( $ 1<=a_{i}<=5 $ ), where $ a_{i} $ is academic performance of the $ i $ -th student of the group $ A $ .\n\nThe third line contains sequence of integer numbers $ b_{1},b_{2},...,b_{n} $ ( $ 1<=b_{i}<=5 $ ), where $ b_{i} $ is academic performance of the $ i $ -th student of the group $ B $ .",
    "outputFormat": "Print the required minimum number of exchanges or -1, if the desired distribution of students can not be obtained.",
    "samples": [
        [
            "4\n5 4 4 4\n5 5 4 5\n",
            "1\n"
        ],
        [
            "6\n1 1 1 1 1 1\n5 5 5 5 5 5\n",
            "3\n"
        ],
        [
            "1\n5\n3\n",
            "-1\n"
        ],
        [
            "9\n3 2 5 5 2 3 3 3 2\n4 1 4 1 1 2 4 4 1\n",
            "4\n"
        ]
    ],
    "hint": "",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\n\u5728Berland\u6bcf\u4e00\u4e2a\u9ad8\u4e2d\u751f\u7684\u6210\u7ee9\u90fd\u5f88\u6709\u7279\u70b9 \u2014 \u4e00\u4e2a\u5728$1$ \u548c$5$ \u4e4b\u95f4\u7684\u6574\u6570\u3002\n\n\u5728\u9ad8\u4e2d0xFF\u6709\u4e24\u4e2a\u5b66\u751f\u5c0f\u7ec4\uff0c\u6bcf\u4e2a\u5c0f\u7ec4\u90fd\u6709$n$ \u540d\u5b66\u751f\u3002\u6bcf\u540d\u5b66\u751f\u7684\u6210\u7ee9\u5c31\u50cf\u6240\u77e5\u7684 \u2014 \u4e00\u4e2a\u5728$1$ \u548c$5$ \u4e4b\u95f4\u7684\u6574\u6570\u3002\n\n\u5b66\u6821\u4e3b\u4efb\u60f3\u8981\u5728\u5c0f\u7ec4\u95f4\u91cd\u65b0\u5206\u914d\u8fd9\u4e9b\u5b66\u751f\u4ee5\u8fbe\u5230\u5728\u4e24\u4e2a\u5c0f\u7ec4\u95f4\u6210\u7ee9\u4e3a$1$ \u7684\u5b66\u751f\u6570\u91cf\u76f8\u7b49\uff0c\u6210\u7ee9\u4e3a$2$ \u7684\u5b66\u751f\u6570\u91cf\u76f8\u7b49\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b66\u6821\u4e3b\u4efb\u7684\u76ee\u7684\u662f\uff0c\u5728\u6539\u53d8\u5b8c\u5b66\u751f\u7684\u7ec4\u6210\u540e\uff0c\u6bcf\u4e2a\u6210\u7ee9\u5728\u4e24\u4e2a\u5c0f\u7ec4\u90fd\u6709\u76f8\u540c\u7684\u4eba\u6570\u3002\n\n\u5b9e\u73b0\u8fd9\u4e2a\u7684\u65b9\u5f0f\u662f\uff0c\u6709\u8ba1\u5212\u7684\u5728\u5c0f\u7ec4\u95f4\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u5b66\u751f\u4ea4\u6362\u3002\u6bcf\u6b21\u4ea4\u6362\u4e2d\u4e3b\u4efb\u90fd\u4f1a\u4ece$A$ \u73ed(\u539f\u6587\u5c31\u662f\u73ed\uff0c\u5b9e\u9645\u5e94\u8be5\u662f\u7ec4\u7684\u610f\u601d)\u4e2d\u9009\u4e00\u540d\u5b66\u751f\uff0c\u518d\u4eceB\u73ed\u4e2d\u9009\u4e00\u540d\u5b66\u751f\u3002\u7136\u540e\uff0c\u4ea4\u6362\u4ed6\u4eec\u6240\u5c5e\u7684\u7ec4\u3002\n\n\u8f93\u51fa\u6700\u5c11\u7684\u4ea4\u6362\u6570\uff0c\u6765\u4f7f\u5f97\u6bcf\u4e2a\u6210\u7ee9\u5728\u4e24\u4e2a\u5c0f\u7ec4\u90fd\u6709\u76f8\u540c\u7684\u4eba\u6570\u3002\n\n### \u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570$n$ \uff08$1\\leq n\\leq 100$ \uff09 \u2014 \u4e24\u4e2a\u7ec4\u5404\u81ea\u7684\u5b66\u751f\u6570\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u5217\u6574\u6570$a_1,a_2,\\dots,a_n$ \uff08$1\\leq a_i\\leq 5$ \uff09 \u2014 $a_i$ \u4e3a\u5728$A$ \u7ec4\u7b2c$i$ \u540d\u5b66\u751f\u7684\u6210\u7ee9\u3002\n\n\u7b2c\u4e09\u884c\u5305\u542b\u4e00\u5217\u6574\u6570$b_1,b_2,\\dots,b_n$ \uff08$1\\leq b_i\\leq 5$ \uff09 \u2014 $b_i$ \u4e3a\u5728$B$ \u7ec4\u7b2c$i$ \u540d\u5b66\u751f\u7684\u6210\u7ee9\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u5b8c\u6210\u8981\u6c42\u6240\u9700\u8981\u7684\u6700\u5c11\u4ea4\u6362\u6570\uff0c\u6216-1\uff0c\u8868\u793a\u8981\u6c42\u6839\u672c\u4e0d\u80fd\u5b8c\u6210\u3002\n\n\u611f\u8c22@Khassar  \u63d0\u4f9b\u7684\u7ffb\u8bd1"
}