{
    "description": "The problem uses a simplified TCP/IP address model, please make sure you've read the statement attentively.\n\nPolycarpus has found a job, he is a system administrator. One day he came across $ n $ IP addresses. Each IP address is a 32 bit number, represented as a group of four 8-bit numbers (without leading zeroes), separated by dots. For example, the record 0.255.1.123 shows a correct IP address and records 0.256.1.123 and 0.255.1.01 do not. In this problem an arbitrary group of four 8-bit numbers is a correct IP address.\n\nHaving worked as an administrator for some time, Polycarpus learned that if you know the IP address, you can use the subnet mask to get the address of the network that has this IP addess.\n\nThe subnet mask is an IP address that has the following property: if we write this IP address as a 32 bit string, that it is representable as \"11...11000..000\". In other words, the subnet mask first has one or more one bits, and then one or more zero bits (overall there are 32 bits). For example, the IP address 2.0.0.0 is not a correct subnet mask as its 32-bit record looks as 00000010000000000000000000000000.\n\nTo get the network address of the IP address, you need to perform the operation of the bitwise \"and\" of the IP address and the subnet mask. For example, if the subnet mask is 255.192.0.0, and the IP address is 192.168.1.2, then the network address equals 192.128.0.0. In the bitwise \"and\" the result has a bit that equals 1 if and only if both operands have corresponding bits equal to one.\n\nNow Polycarpus wants to find all networks to which his IP addresses belong. Unfortunately, Polycarpus lost subnet mask. Fortunately, Polycarpus remembers that his IP addresses belonged to exactly $ k $ distinct networks. Help Polycarpus find the subnet mask, such that his IP addresses will belong to exactly $ k $ distinct networks. If there are several such subnet masks, find the one whose bit record contains the least number of ones. If such subnet mask do not exist, say so.",
    "inputFormat": "The first line contains two integers, $ n $ and $ k $ $ (1<=k<=n<=10^{5}) $ \u2014 the number of IP addresses and networks. The next $ n $ lines contain the IP addresses. It is guaranteed that all IP addresses are distinct.",
    "outputFormat": "In a single line print the IP address of the subnet mask in the format that is described in the statement, if the required subnet mask exists. Otherwise, print -1.",
    "samples": [
        [
            "5 3\n0.0.0.1\n0.1.1.2\n0.0.2.1\n0.1.1.0\n0.0.2.3\n",
            "255.255.254.0"
        ],
        [
            "5 2\n0.0.0.1\n0.1.1.2\n0.0.2.1\n0.1.1.0\n0.0.2.3\n",
            "255.255.0.0"
        ],
        [
            "2 1\n255.0.0.1\n0.0.0.2\n",
            "-1\n"
        ]
    ],
    "hint": "",
    "translation": "## \u9898\u76ee\u80cc\u666f\n\n\u8be5\u95ee\u9898\u4f7f\u7528\u4e86\u4e00\u4e2a\u7b80\u5316\u7684TCP/IP\u5730\u5740\u6a21\u578b\uff0c\u8bf7\u786e\u4fdd\u60a8\u4ed4\u7ec6\u9605\u8bfb\u4e86\u8be5\u58f0\u660e\u3002\n\n## \u9898\u76ee\u63cf\u8ff0\n\nPolycarpus\u627e\u5230\u4e86\u4e00\u4efd\u5de5\u4f5c\uff0c\u4ed6\u662f\u4e00\u540d\u7cfb\u7edf\u7ba1\u7406\u5458\u3002\n\n\u6709\u4e00\u5929\u4ed6\u5076\u7136\u53d1\u73b0\u4e86n\u4e2aIP\u5730\u5740\u3002\n\n\u6bcf\u4e2aIP\u5730\u5740\u662f\u4e00\u4e2a32\u4f4d\u7684\u6570\u5b57\uff0c\u75284\u4e2a8\u4f4d\u6570\u5b57(\u4e0d\u5e26\u524d\u5bfc\u96f6)\u7ec4\u6210\u4e00\u7ec4\uff0c\u7528\u70b9\u5206\u9694\u3002\n\n\u4f8b\u5982\uff0c\u8bb0\u5f550.255.1.123\u663e\u793a\u6b63\u786e\u7684IP\u5730\u5740\uff0c\u8bb0\u5f550.256.1.123\u548c0.255.1.01\u4e0d\u6b63\u786e\u3002\n\n\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u75314\u4e2a8\u4f4d\u6570\u5b57\u7ec4\u6210\u7684\u4efb\u610f\u7ec4\u5c31\u662f\u4e00\u4e2a\u6b63\u786e\u7684IP\u5730\u5740\u3002\n\nPolycarpus\u4f5c\u4e3a\u4e00\u540d\u7ba1\u7406\u5458\u5de5\u4f5c\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u4e86\u89e3\u5230\u5982\u679c\u60a8\u77e5\u9053IP\u5730\u5740\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b50\u7f51\u63a9\u7801\u6765\u83b7\u5f97\u62e5\u6709\u8be5IP\u5730\u5740\u7684\u7f51\u7edc\u5730\u5740\u3002\n\n\u5b50\u7f51\u63a9\u7801\u662f\u4e00\u4e2aIP\u5730\u5740\uff0c\u5b83\u6709\u4ee5\u4e0b\u5c5e\u6027:\u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e2aIP\u5730\u5740\u5199\u4e3a\u4e00\u4e2a32\u4f4d\u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u4e3a\u201c11\u202611000..000\u201d\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b50\u7f51\u63a9\u7801\u9996\u5148\u6709\u4e00\u4e2a\u6216\u591a\u4e2a1\u4f4d\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u6216\u591a\u4e2a0\u4f4d(\u603b\u5171\u670932\u4f4d)\u3002\n\n\u4f8b\u5982\uff0cIP\u5730\u57402.0.0.0\u4e0d\u662f\u4e00\u4e2a\u6b63\u786e\u7684\u5b50\u7f51\u63a9\u7801\uff0c\u56e0\u4e3a\u5b83\u768432\u4f4d\u8bb0\u5f55\u770b\u8d77\u6765\u662f0000001000000000000000000000\u3002\n\n\u8981\u5f97\u5230IP\u5730\u5740\u7684\u7f51\u7edc\u5730\u5740\uff0c\u9700\u8981\u6267\u884cIP\u5730\u5740\u548c\u5b50\u7f51\u63a9\u7801\u7684\u6309\u4f4d\u201c\u4e0e\u201d\u64cd\u4f5c\u3002\n\n\u4f8b\u5982\uff0c\u5982\u679c\u5b50\u7f51\u63a9\u7801\u662f255.192.0.0,IP\u5730\u5740\u662f192.168.1.2\uff0c\u5219\u7f51\u7edc\u5730\u5740\u7b49\u4e8e192.128.0.0\u3002\n\n\u5728\u6309\u4f4d\u7684\u201c\u4e0e\u201d\u4e2d\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a\u64cd\u4f5c\u6570\u5bf9\u5e94\u7684\u4f4d\u90fd\u7b49\u4e8e1\u65f6\uff0c\u7ed3\u679c\u7684\u4f4d\u7b49\u4e8e1\u3002\n\n\u73b0\u5728Polycarpus\u60f3\u8981\u627e\u5230\u4ed6\u7684IP\u5730\u5740\u6240\u5c5e\u7684\u6240\u6709\u7f51\u7edc\u3002\n\n\u4e0d\u5e78\u7684\u662fPolycarpus\u4e22\u5931\u4e86\u5b50\u7f51\u63a9\u7801\u3002\n\n\u5e78\u8fd0\u7684\u662f\uff0cPolycarpus\u8bb0\u5f97\u4ed6\u7684IP\u5730\u5740\u5b8c\u5168\u5c5e\u4e8e $k$ \u79cd\u4e0d\u540c\u7684\u7f51\u7edc\u3002\n\n\u5e2e\u52a9Polycarpus\u627e\u5230\u5b50\u7f51\u63a9\u7801\uff0c\u8fd9\u6837\u4ed6\u7684IP\u5730\u5740\u5c06\u5b8c\u5168\u5c5e\u4e8e $k$ \u79cd\u4e0d\u540c\u7684\u7f51\u7edc\u3002\n\n\u5982\u679c\u6709\u591a\u4e2a\u5b50\u7f51\u63a9\u7801\uff0c\u5219\u67e5\u627e\u4f4d\u8bb0\u5f55\u4e2d1\u4e2a\u6570\u6700\u5c11\u7684\u4e00\u4e2a\u3002\n\n\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u7f51\u63a9\u7801\uff0c\u8f93\u51fa-1\u3002\n\n## \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570\uff0c$n$ \u548c $k$$\uff081<=k<=n<=10^{5}\uff09$\n\u8868\u793aIP\u5730\u5740\u548c\u7f51\u7edc\u7684\u6570\u91cf\u3002\u63a5\u4e0b\u6765\u7684 $n$ \u884c\u6bcf\u884c\u5305\u542b\u4e00\u6761IP\u5730\u5740\u3002\u4fdd\u8bc1\u6240\u6709IP\u5730\u5740\u90fd\u662f\u4e0d\u540c\u7684\u3002\n\n## \u8f93\u51fa\u683c\u5f0f\n\u5982\u679c\u5b58\u5728\u6240\u9700\u7684\u5b50\u7f51\u63a9\u7801\uff0c\u5219\u4ee5\u8bed\u53e5\u4e2d\u63cf\u8ff0\u7684\u683c\u5f0f\u5728\u5355\u884c\u4e2d\u8f93\u51fa\u5b50\u7f51\u63a9\u7801\u7684IP\u5730\u5740\u3002\u5426\u5219\u8f93\u51fa-1\u3002"
}