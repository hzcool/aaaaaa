{
    "description": "In one of the games Arkady is fond of the game process happens on a rectangular field. In the game process Arkady can buy extensions for his field, each extension enlarges one of the field sizes in a particular number of times. Formally, there are $ n $ extensions, the $ i $ -th of them multiplies the width or the length (by Arkady's choice) by $ a_{i} $ . Each extension can't be used more than once, the extensions can be used in any order.\n\nNow Arkady's field has size $ h\u00d7w $ . He wants to enlarge it so that it is possible to place a rectangle of size $ a\u00d7b $ on it (along the width or along the length, with sides parallel to the field sides). Find the minimum number of extensions needed to reach Arkady's goal.",
    "inputFormat": "The first line contains five integers $ a $ , $ b $ , $ h $ , $ w $ and $ n $ ( $ 1<=a,b,h,w,n<=100000 $ ) \u2014 the sizes of the rectangle needed to be placed, the initial sizes of the field and the number of available extensions.\n\nThe second line contains $ n $ integers $ a_{1},a_{2},...,a_{n} $ ( $ 2<=a_{i}<=100000 $ ), where $ a_{i} $ equals the integer a side multiplies by when the $ i $ -th extension is applied.",
    "outputFormat": "Print the minimum number of extensions needed to reach Arkady's goal. If it is not possible to place the rectangle on the field with all extensions, print -1. If the rectangle can be placed on the initial field, print 0.",
    "samples": [
        [
            "3 3 2 4 4\n2 5 4 10\n",
            "1\n"
        ],
        [
            "3 3 3 3 5\n2 3 5 4 2\n",
            "0\n"
        ],
        [
            "5 5 1 2 3\n2 2 3\n",
            "-1\n"
        ],
        [
            "3 4 1 1 3\n2 3 2\n",
            "3\n"
        ]
    ],
    "hint": "In the first example it is enough to use any of the extensions available. For example, we can enlarge $ h $ in $ 5 $ times using the second extension. Then $ h $ becomes equal $ 10 $ and it is now possible to place the rectangle on the field.",
    "translation": "\u7ed9\u51fa\u4e00\u4e2a$a*b$\u7684\u76ee\u6807\u77e9\u5f62\u548c\u4e00\u4e2a$h*w$\u7684\u73b0\u6709\u77e9\u5f62\u4ee5\u53ca$n$\u4e2a\u64cd\u4f5c\u3002\u6bcf\u4e2a\u64cd\u4f5c\u6709\u4e00\u4e2a\u6570$a_i$\uff0c\u8be5\u53ef\u5c06\u73b0\u6709\u77e9\u5f62h\u8fb9\u4e58\u4e0a$a_i$\uff0c\u6216\u5c06w\u8fb9\u4e58\u4e0a$a_i$\u3002\u95ee\u81f3\u5c11\u8fdb\u884c\u51e0\u6b21\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u5f97\u76ee\u6807\u77e9\u5f62\u80fd\u653e\u5165\u73b0\u6709\u77e9\u5f62\u4e2d\uff08\u53ef\u4ee5\u65cb\u8f6c90\u5ea6\uff09\u3002\u82e5\u65e0\u89e3\uff0c\u8bf7\u8f93\u51fa-1"
}