{
    "description": "Polycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\n\nPolycarp decided to store the hash of the password, generated by the following algorithm:\n\n1. take the password $ p $ , consisting of lowercase Latin letters, and shuffle the letters randomly in it to obtain $ p' $ ( $ p' $ can still be equal to $ p $ );\n2. generate two random strings, consisting of lowercase Latin letters, $ s_1 $ and $ s_2 $ (any of these strings can be empty);\n3. the resulting hash $ h = s_1 + p' + s_2 $ , where addition is string concatenation.\n\nFor example, let the password $ p = $ \"abacaba\". Then $ p' $ can be equal to \"aabcaab\". Random strings $ s1 = $ \"zyx\" and $ s2 = $ \"kjh\". Then $ h = $ \"zyxaabcaabkjh\".\n\nNote that no letters could be deleted or added to $ p $ to obtain $ p' $ , only the order could be changed.\n\nNow Polycarp asks you to help him to implement the password check module. Given the password $ p $ and the hash $ h $ , check that $ h $ can be the hash for the password $ p $ .\n\nYour program should answer $ t $ independent test cases.",
    "inputFormat": "The first line contains one integer $ t $ ( $ 1 \\le t \\le 100 $ ) \u2014 the number of test cases.\n\nThe first line of each test case contains a non-empty string $ p $ , consisting of lowercase Latin letters. The length of $ p $ does not exceed $ 100 $ .\n\nThe second line of each test case contains a non-empty string $ h $ , consisting of lowercase Latin letters. The length of $ h $ does not exceed $ 100 $ .",
    "outputFormat": "For each test case print the answer to it \u2014 \"YES\" if the given hash $ h $ could be obtained from the given password $ p $ or \"NO\" otherwise.",
    "samples": [
        [
            "5\nabacaba\nzyxaabcaabkjh\nonetwothree\nthreetwoone\none\nzzonneyy\none\nnone\ntwenty\nten\n",
            "YES\nYES\nNO\nYES\nNO\n"
        ]
    ],
    "hint": "The first test case is explained in the statement.\n\nIn the second test case both $ s_1 $ and $ s_2 $ are empty and $ p'= $ \"threetwoone\" is $ p $ shuffled.\n\nIn the third test case the hash could not be obtained from the password.\n\nIn the fourth test case $ s_1= $ \"n\", $ s_2 $ is empty and $ p'= $ \"one\" is $ p $ shuffled (even thought it stayed the same).\n\nIn the fifth test case the hash could not be obtained from the password.",
    "translation": "# \u9898\u76ee\u63cf\u8ff0\n\nPolycrap\u6b63\u5728\u5efa\u7acb\u4ed6\u81ea\u5df1\u7684\u7f51\u9875\u670d\u52a1\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5f88\u73b0\u4ee3\u7684\u7f51\u7ad9\u5176\u5305\u542b\u767b\u5165\u7684\u529f\u80fd\u3002\u5f53\u7136\uff0c\u8fd9\u603b\u4f1a\u6d89\u53ca\u5230\u5bc6\u7801\u7684\u5b89\u5168\u95ee\u9898\u3002\n\nPolycarp\u51b3\u5b9a\u8981\u50a8\u5b58\u5bc6\u7801\u7684\u54c8\u5e0c\u503c\u3002\u5bc6\u7801\u7684\u54c8\u5e0c\u503c\u7531\u4ee5\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u6765\u751f\u6210\uff1a\n\n1.\u628a\u53ea\u5305\u542b\u5c0f\u5199\u62c9\u4e01\u5b57\u6bcd\u7684\u5bc6\u7801$p$\u8fdb\u884c\u968f\u673a\u6253\u4e71\uff0c\u8bb0\u4e3a$p'$\uff08$p'$\u53ef\u80fd\u548c$p$\u76f8\u7b49\uff09\uff1b\n\n2.\u751f\u6210\u4e24\u4e2a\u968f\u673a\u7684\u53ea\u5305\u542b\u5c0f\u5199\u62c9\u4e01\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32$s_1$\u548c$s_2$\uff08\u8fd9\u4e24\u4e2a\u4e32\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u53ef\u80fd\u4e3a\u7a7a\u4e32\uff09\uff1b\n\n3.\u54c8\u5e0c\u7b97\u6cd5\u7684\u7ed3\u679c$h=s_1+p'+s_2$\uff0c\u6b64\u5904\u7684$+$\u662f\u6307\u628a\u524d\u540e\u4e24\u4e2a\u5b57\u7b26\u4e32\u9996\u5c3e\u76f8\u63a5\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c$p=\\texttt {abacaba}$\uff0c\u5219$p'$\u53ef\u80fd\u4e3a$\\texttt{aabcaab}$\u3002\u968f\u673a\u751f\u6210\u4e24\u4e2a\u5b57\u7b26\u4e32$s_1=\\texttt{zyx}\",s_2=\\texttt{kjh}$\u3002\u90a3\u4e48$h=\\texttt{zyxaabcaabkjh}$\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4ece$p$\u53d8\u6362\u9053$p'$\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u4f1a\u6dfb\u52a0\u6216\u8005\u5220\u9664\u4efb\u4f55\u5b57\u6bcd\uff0c\u53ea\u4f1a\u6539\u53d8\u5b57\u6bcd\u7684\u987a\u5e8f\u3002\n\n\u73b0\u5728Polycarp\u60f3\u8ba9\u4f60\u5e2e\u4ed6\u7f16\u5199\u5bc6\u7801\u54c8\u5e0c\u7684\u6821\u9a8c\u6a21\u5757\u3002\u7ed9\u51fa\u5bc6\u7801$p$\u548c\u751f\u6210\u7684\u54c8\u5e0c$h$\uff0c\u4f60\u9700\u8981\u68c0\u67e5$h$\u662f\u5426\u662f$p$\u7684\u4e00\u4e2a\u54c8\u5e0c\u7ed3\u679c\u3002\n\n# \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e86\u4e00\u4e2a\u6b63\u6574\u6570$t(1\\leq t\\leq100)$\u2014\u2014\u67e5\u8be2\u7684\u6b21\u6570\u3002\n\n\u6bcf\u4e00\u6b21\u67e5\u8be2\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e86\u4e00\u4e2a\u7531\u5c0f\u5199\u62c9\u4e01\u5b57\u6bcd\u7ec4\u6210\u7684\u975e\u7a7a\u5b57\u7b26\u4e32$p$\u3002$p$\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7$100$\u3002\n\n\u6bcf\u4e00\u6b21\u67e5\u8be2\u7684\u7b2c\u4e8c\u884c\u5305\u542b\u4e86\u4e00\u4e2a\u7531\u5c0f\u5199\u62c9\u4e01\u5b57\u6bcd\u7ec4\u6210\u7684\u975e\u7a7a\u5b57\u7b26\u4e32$h$\u3002$h$\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7$100$\u3002\n\n# \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u67e5\u8be2\uff0c\u5982\u679c$h$\u662f$p$\u7684\u4e00\u4e2a\u54c8\u5e0c\u7ed3\u679c\uff0c\u5c31\u8f93\u51fa\"YES\"\uff0c\u53cd\u4e4b\u8f93\u51fa\"NO\"\u3002\n\n# \u8bf4\u660e/\u63d0\u793a\n\u7b2c\u4e00\u7ec4\u67e5\u8be2\u7684\u89e3\u91ca\u5df2\u7ecf\u5728\u9898\u5e72\u4e2d\u7ed9\u51fa\u3002\n\n\u7b2c\u4e8c\u7ec4\u67e5\u8be2\u4e2d$s_1$\u548c$s_2$\u5747\u662f\u7a7a\u4e32\uff0c$p'$\u662f$p$\u7684\u4e00\u79cd\u6253\u4e71\u3002\n\n\u7b2c\u4e09\u7ec4\u67e5\u8be2\u4e2d\u54c8\u5e0c\u4e0d\u80fd\u901a\u8fc7\u5bc6\u7801\u751f\u6210\u3002\n\n\u7b2c\u56db\u7ec4\u67e5\u8be2\u4e2d$s_1=\\texttt{n}$\uff0c$s_2$\u662f\u7a7a\u4e32\uff0c$p'=\\texttt{one}$\u662f$p$\u7684\u4e00\u79cd\u6253\u4e71\uff08\u867d\u7136\u6253\u4e71\u5e76\u6ca1\u6709\u6548\u679c\uff09\u3002\n\n\u7b2c\u4e94\u7ec4\u67e5\u8be2\u4e2d\u54c8\u5e0c\u4e0d\u80fd\u901a\u8fc7\u5bc6\u7801\u751f\u6210\u3002"
}