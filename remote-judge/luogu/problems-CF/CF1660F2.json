{
    "description": "This is the hard version of Problem F. The only difference between the easy version and the hard version is the constraints.\n\nWe will call a non-empty string balanced if it contains the same number of plus and minus signs. For example: strings \"+--+\" and \"++-+--\" are balanced, and strings \"+--\", \"--\" and \"\" are not balanced.\n\nWe will call a string promising if the string can be made balanced by several (possibly zero) uses of the following operation:\n\n- replace two adjacent minus signs with one plus sign.\n\nIn particular, every balanced string is promising. However, the converse is not true: not every promising string is balanced.\n\nFor example, the string \"-+---\" is promising, because you can replace two adjacent minuses with plus and get a balanced string \"-++-\", or get another balanced string \"-+-+\".\n\nHow many non-empty substrings of the given string $ s $ are promising? Each non-empty promising substring must be counted in the answer as many times as it occurs in string $ s $ .\n\nRecall that a substring is a sequence of consecutive characters of the string. For example, for string \"+-+\" its substring are: \"+-\", \"-+\", \"+\", \"+-+\" (the string is a substring of itself) and some others. But the following strings are not its substring: \"--\", \"++\", \"-++\".",
    "inputFormat": "The first line of the input contains an integer $ t $ ( $ 1 \\le t \\le 10^4 $ ) \u2014the number of test cases in the test.\n\nThen the descriptions of test cases follow.\n\nEach test case of input data consists of two lines. The first line consists of the number $ n $ ( $ 1 \\le n \\le 2 \\cdot 10^5 $ ): the length of $ s $ .\n\nThe second line of the test case contains the string $ s $ of length $ n $ , consisting only of characters \"+\" and \"-\".\n\nIt is guaranteed that the sum of values $ n $ over all test cases does not exceed $ 2 \\cdot 10^5 $ .",
    "outputFormat": "For each test case, print a single number: the number of the promising non-empty substrings of string $ s $ . Each non-empty promising substring must be counted in the answer as many times as it occurs in string $ s $ .",
    "samples": [
        [
            "5\n3\n+-+\n5\n-+---\n4\n----\n7\n--+---+\n6\n+++---",
            "2\n4\n2\n7\n4"
        ]
    ],
    "hint": "The following are the promising substrings for the first three test cases in the example:\n\n1. $ s[1 \\dots 2] $ =\"+-\", $ s[2 \\dots 3] $ =\"-+\";\n2. $ s[1 \\dots 2] $ =\"-+\", $ s[2 \\dots 3] $ =\"+-\", $ s[1 \\dots 5] $ =\"-+---\", $ s[3 \\dots 5] $ =\"---\";\n3. $ s[1 \\dots 3] $ =\"---\", $ s[2 \\dots 4] $ =\"---\".",
    "translation": "\u5982\u679c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32\u5305\u542b\u4e86\u76f8\u540c\u4e2a\u6570\u7684\u52a0\u53f7\u4e0e\u51cf\u53f7\uff0c\u6211\u4eec\u628a\u5b83\u79f0\u4e4b\u4e3a\u4e00\u4e2a\u5e73\u8861\u5b57\u7b26\u4e32\u3002\n\u6bd4\u5982`+--+`,`++-+--`\u90fd\u662f\u5e73\u8861\u7684\uff0c\u800c\u5b57\u7b26\u4e32`+--`,`--`,` `\u90fd\u4e0d\u662f\u5e73\u8861\u7684\u3002\n\n\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u51e0\u4e2a\uff08\u53ef\u4ee5\u662f$0$\u4e2a\uff09\u64cd\u4f5c\u800c\u53d8\u5f97\u5e73\u8861\uff0c\u6211\u4eec\u79f0\u5b83\u662f\u6709\u5e0c\u671b\u7684\u3002\u5177\u4f53\u64cd\u4f5c\u4e3a\uff1a\n\u628a\u4e24\u4e2a\u76f8\u90bb\u7684\u51cf\u53f7\u66ff\u6362\u4e3a\u4e00\u4e2a\u52a0\u53f7\n\n\u663e\u7136\u6240\u6709\u7684\u5e73\u8861\u5b57\u7b26\u4e32\u90fd\u662f\u6709\u5e0c\u671b\u7684\uff0c\u4e0d\u8fc7\u4e0d\u662f\u6240\u6709\u6709\u5e0c\u671b\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u5e73\u8861\u7684\u3002\u6bd4\u5982\u5b57\u7b26\u4e32`-+---`\u662f\u4e00\u4e2a\u6709\u5e0c\u671b\u7684\u5b57\u7b26\u4e32\u3002\u56e0\u4e3a\n\u4f60\u53ef\u4ee5\u628a\u4e24\u4e2a\u76f8\u90bb\u7684\u51cf\u53f7\u66ff\u6362\u4e3a\u4e00\u4e2a\u52a0\u53f7\u4ece\u800c\u8fbe\u5230\u4e00\u4e2a\u5e73\u8861\u5b57\u7b26\u4e32`-++-`\u6216`-+-+`\n\n\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32$s$,\u4f60\u8981\u6c42\u51fa\u6709\u5b83\u591a\u5c11\u4e2a\u975e\u7a7a\u5b50\u4e32\u662f\u6709\u5e0c\u671b\u7684\u3002\u5982\u679c\u4e00\u4e2a\u5b50\u4e32\u5728$s$\u4e2d\u51fa\u73b0\u4e86\u591a\u6b21\uff0c\u6211\u4eec\u4e5f\u8981\u8ba1\u7b97\u591a\u6b21\n\n**\u8f93\u5165\u683c\u5f0f**\n\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570$t$($1 \\leq t \\leq 10^4$)\uff0c\u4ee3\u8868\u6709\u591a\u5c11\u4e2a\u6d4b\u8bd5\u6570\u636e\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u5165\u4e24\u884c\u3002\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570$n$($1 \\leq n \\leq 2 \\times 10^5$),\u8868\u793a\u5b57\u7b26\u4e32$s$\u7684\u957f\u5ea6\n\n\u7b2c\u4e8c\u884c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32$s$,\u4ec5\u7531`+`,`-`\u6784\u6210\n\n\u4fdd\u8bc1\u5bf9\u4e8e\u6240\u6709\u6d4b\u8bd5\u6570\u636e\uff0c$n$\u7684\u548c\u4e0d\u4f1a\u8d85\u8fc7$2 \\times 10^5$\n\n**\u8f93\u51fa\u683c\u5f0f**\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8f93\u51fa\u6570\u636e\uff0c\u8f93\u51fa\u5b83\u591a\u5c11\u4e2a\u975e\u7a7a\u5b50\u4e32\u662f\u6709\u5e0c\u671b\u7684\u3002"
}