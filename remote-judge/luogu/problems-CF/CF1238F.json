{
    "description": "Assume that you have $ k $ one-dimensional segments $ s_1, s_2, \\dots s_k $ (each segment is denoted by two integers \u2014 its endpoints). Then you can build the following graph on these segments. The graph consists of $ k $ vertexes, and there is an edge between the $ i $ -th and the $ j $ -th vertexes ( $ i \\neq j $ ) if and only if the segments $ s_i $ and $ s_j $ intersect (there exists at least one point that belongs to both of them).\n\nFor example, if $ s_1 = [1, 6], s_2 = [8, 20], s_3 = [4, 10], s_4 = [2, 13], s_5 = [17, 18] $ , then the resulting graph is the following:\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1238F/5ccebeabf5d6a202b692741f0fad2573638b500c.png)A tree of size $ m $ is good if it is possible to choose $ m $ one-dimensional segments so that the graph built on these segments coincides with this tree.\n\nYou are given a tree, you have to find its good subtree with maximum possible size. Recall that a subtree is a connected subgraph of a tree.\n\nNote that you have to answer $ q $ independent queries.",
    "inputFormat": "The first line contains one integer $ q $ ( $ 1 \\le q \\le 15 \\cdot 10^4 $ ) \u2014 the number of the queries.\n\nThe first line of each query contains one integer $ n $ ( $ 2 \\le n \\le 3 \\cdot 10^5 $ ) \u2014 the number of vertices in the tree.\n\nEach of the next $ n - 1 $ lines contains two integers $ x $ and $ y $ ( $ 1 \\le x, y \\le n $ ) denoting an edge between vertices $ x $ and $ y $ . It is guaranteed that the given graph is a tree.\n\nIt is guaranteed that the sum of all $ n $ does not exceed $ 3 \\cdot 10^5 $ .",
    "outputFormat": "For each query print one integer \u2014 the maximum size of a good subtree of the given tree.",
    "samples": [
        [
            "1\n10\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 9\n4 10\n",
            "8\n"
        ]
    ],
    "hint": "In the first query there is a good subtree of size $ 8 $ . The vertices belonging to this subtree are $ {9, 4, 10, 2, 5, 1, 6, 3} $ .",
    "translation": "#### \u9898\u76ee\u63cf\u8ff0\n\u5b9a\u4e49\u4e00\u4e2a\u5927\u5c0f\u4e3a   $n$ \u7684\u6811\u662f\u597d\u7684\uff0c\u4e3a\u5b58\u5728\u4e00\u79cd\u7ed9\u6bcf\u4e00\u4e2a\u8282\u70b9   $i$ \u8d4b\u4e24\u4e2a\u503c   $l_i,r_i$ \u5206\u522b\u4ee3\u8868\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u4e24\u4e2a\u70b9   $u,v$ \u5728\u6811\u4e0a\u6709\u8fb9\u5f53\u4e14\u4ec5\u5f53   $u,v$ \u6240\u4ee3\u8868\u7684\u7ebf\u6bb5\u6709\u4ea4\u96c6\u3002\n\n\u73b0\u5728\u7ed9\u5b9a\u4e00\u68f5\u5927\u5c0f\u4e3a   $n$ \u7684\u6811\uff0c\u8ba9\u4f60\u6c42\u51fa\u6700\u5927\u7684\u597d\u7684\u5b50\u6811\u7684\u5927\u5c0f\u3002\u591a\u7ec4\u6570\u636e\u3002\n\n\u672c\u9898\u4e2d\u201c\u5b50\u6811\u201d\u6307\u6811\u4e0a\u7684\u4e00\u4e2a\u8fde\u901a\u5b50\u56fe\u3002\n\n#### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570\u8868\u793a\u6570\u636e\u7ec4\u6570   $q$   $(1\\le q\\le 1.5\\times 10^5)$\u3002\n\n\u63a5\u4e0b\u6765   $q$ \u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u8be2\u95ee\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570   $n$   $(2\\le n\\le 3\\times 10^5)$ \u4ee3\u8868\u6811\u7684\u8282\u70b9\u6570\uff0c\u540e\u9762   $n-1$ \u884c\u6bcf\u884c\u4e24\u4e2a\u6570   $u,v$ \u4ee3\u8868\u6811\u4e0a\u7684\u4e00\u6761\u8fb9   $(u,v)$\u3002\n\n\u6570\u636e\u4fdd\u8bc1   $\\sum n\\le 3\\times 10^5$\u3002\n\n#### \u8f93\u51fa\u683c\u5f0f\n\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u6700\u5927\u7684\u597d\u7684\u5b50\u6811\u7684\u5927\u5c0f\u3002"
}