{
    "description": "A thief made his way to a shop.\n\nAs usual he has his lucky knapsack with him. The knapsack can contain $ k $ objects. There are $ n $ kinds of products in the shop and an infinite number of products of each kind. The cost of one product of kind $ i $ is $ a_{i} $ .\n\nThe thief is greedy, so he will take exactly $ k $ products (it's possible for some kinds to take several products of that kind).\n\nFind all the possible total costs of products the thief can nick into his knapsack.",
    "inputFormat": "The first line contains two integers $ n $ and $ k $ ( $ 1<=n,k<=1000 $ ) \u2014 the number of kinds of products and the number of products the thief will take.\n\nThe second line contains $ n $ integers $ a_{i} $ ( $ 1<=a_{i}<=1000 $ ) \u2014 the costs of products for kinds from $ 1 $ to $ n $ .",
    "outputFormat": "Print the only line with all the possible total costs of stolen products, separated by a space. The numbers should be printed in the ascending order.",
    "samples": [
        [
            "3 2\n1 2 3\n",
            "2 3 4 5 6\n"
        ],
        [
            "5 5\n1 1 1 1 1\n",
            "5\n"
        ],
        [
            "3 3\n3 5 11\n",
            "9 11 13 15 17 19 21 25 27 33\n"
        ]
    ],
    "hint": "",
    "translation": "# \u9898\u76ee\u63cf\u8ff0\n\n\u6709\u4e00\u4e2a\u5c0f\u5077\u8fdb\u5165\u4e86\u4e00\u4e2a\u5546\u5e97\u3002\n\n\u50cf\u5e73\u5e38\u4e00\u6837\uff0c\u4ed6\u628a\u4ed6\u7684\u5e78\u8fd0\u80cc\u5305\u5e26\u5728\u8eab\u4e0a\uff0c\u4ed6\u7684\u80cc\u5305\u91cc\u80fd\u653e k \u4e2a\u4e1c\u897f\u3002\u5546\u5e97\u91cc\u6709 n \u79cd\u4ea7\u54c1\uff0c\u6bcf\u79cd\u4ea7\u54c1\u90fd\u6709\u65e0\u9650\u591a\u4e2a\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7b2c i \u79cd\u4ea7\u54c1\uff0c\u5b83\u7684\u4ef7\u503c\u662f a[i] \u3002\n\n\u5c0f\u5077\u5f88\u8d2a\u5a6a\uff0c\u6240\u4ee5\u4ed6\u4f1a\u51c6\u786e\u5730\u62ff k \u4e2a\u4ea7\u54c1\uff08\u4ed6\u6709\u53ef\u80fd\u628a\u67d0\u4e00\u79cd\u4ea7\u54c1\u62ff\u5f88\u591a\u4e2a\uff09\u3002\n\n\u4f60\u9700\u8981\u627e\u51fa\u6240\u6709\u5c0f\u5077\u53ef\u80fd\u5077\u8d70\u7684\u7269\u54c1\u4ef7\u503c\u4e4b\u548c\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n### \u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570 n \u548c k\uff081<=n,k<=1000\uff09\u2014\u2014 \u7269\u54c1\u7684\u6570\u91cf\u548c\u5c0f\u5077\u4f1a\u62ff\u7684\u7269\u54c1\u6570\u91cf\u3002\n\u7b2c\u4e8c\u884c\u6709 n \u4e2a\u6574\u6570\uff0c\u6bcf\u4e00\u4e2a a[i]\uff081<=a[i]<=1000) \u662f\u4ece\u7b2c 1 \u4e2a\u5230\u7b2c n \u4e2a\u7269\u54c1\u7684\u4ef7\u503c\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u4e00\u884c\uff0c\u6240\u6709\u53ef\u80fd\u7684\u88ab\u5077\u7a83\u7684\u7269\u54c1\u7684\u4ef7\u503c\uff0c\u6bcf\u4e24\u4e2a\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002\u8f93\u51fa\u5e94\u8be5\u4ee5\u4e00\u4e2a\u9012\u589e\u5e8f\u5217\u8f93\u51fa\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n### \u8f93\u5165\u6837\u4f8b#1\uff1a\n3 2\n1 2 3\n\n### \u8f93\u51fa\u6837\u4f8b#1\uff1a\n2 3 4 5 6\n\n### \u8f93\u5165\u6837\u4f8b#2\uff1a\n5 5\n1 1 1 1 1\n\n### \u8f93\u51fa\u6837\u4f8b#2\uff1a\n5\n\n### \u8f93\u5165\u6837\u4f8b#3\uff1a\n3 3\n3 5 11\n\n### \u8f93\u51fa\u6837\u4f8b#3\uff1a\n9 11 13 15 17 19 21 25 27 33\n\u7ffb\u8bd1\u8d21\u732e\u8005UID\uff1a41262"
}