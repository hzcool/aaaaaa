{
    "description": "One day Squidward, Spongebob and Patrick decided to go to the beach. Unfortunately, the weather was bad, so the friends were unable to ride waves. However, they decided to spent their time building sand castles.\n\nAt the end of the day there were $ n $ castles built by friends. Castles are numbered from $ 1 $ to $ n $ , and the height of the $ i $ -th castle is equal to $ h_{i} $ . When friends were about to leave, Squidward noticed, that castles are not ordered by their height, and this looks ugly. Now friends are going to reorder the castles in a way to obtain that condition $ h_{i}<=h_{i+1} $ holds for all $ i $ from $ 1 $ to $ n-1 $ .\n\nSquidward suggested the following process of sorting castles:\n\n- Castles are split into blocks \u2014 groups of consecutive castles. Therefore the block from $ i $ to $ j $ will include castles $ i,i+1,...,j $ . A block may consist of a single castle.\n- The partitioning is chosen in such a way that every castle is a part of exactly one block.\n- Each block is sorted independently from other blocks, that is the sequence $ h_{i},h_{i+1},...,h_{j} $ becomes sorted.\n- The partitioning should satisfy the condition that after each block is sorted, the sequence $ h_{i} $ becomes sorted too. This may always be achieved by saying that the whole sequence is a single block.\n\nEven Patrick understands that increasing the number of blocks in partitioning will ease the sorting process. Now friends ask you to count the maximum possible number of blocks in a partitioning that satisfies all the above requirements.",
    "inputFormat": "The first line of the input contains a single integer $ n $ ( $ 1<=n<=100000 $ ) \u2014 the number of castles Spongebob, Patrick and Squidward made from sand during the day.\n\nThe next line contains $ n $ integers $ h_{i} $ ( $ 1<=h_{i}<=10^{9} $ ). The $ i $ -th of these integers corresponds to the height of the $ i $ -th castle.",
    "outputFormat": "Print the maximum possible number of blocks in a valid partitioning.",
    "samples": [
        [
            "3\n1 2 3\n",
            "3\n"
        ],
        [
            "4\n2 1 3 2\n",
            "2\n"
        ]
    ],
    "hint": "In the first sample the partitioning looks like that: \\[1\\]\\[2\\]\\[3\\].\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF599C/b9501a337331292f74a6e93736c318ca0eb6dcc6.png)In the second sample the partitioning is: \\[2, 1\\]\\[3, 2\\]\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF599C/631d2d13363437c6480fbc010a49d25892b48bb7.png)",
    "translation": "\u4e00\u5929Squidward\uff0cSpongebob\uff0cPatrick\u51b3\u5b9a\u4e00\u8d77\u53bb\u6c99\u6ee9\u73a9\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5929\u6c14\u5b9e\u5728\u4e0d\u597d\uff0c\u4ed6\u4eec\u6ca1\u6cd5\u51b2\u6d6a\u4e86\u3002\u7136\u9e45\uff0c\u4ed6\u4eec\u51b3\u5b9a\u5efa\u4e00\u4e2a\u6c99\u5821\u3002\r\n\u90a3\u5929\u5feb\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u4ed6\u4eec\u5efa\u4e86n\u4e2a\u57ce\u5821\u3002\u57ce\u5821\u88ab\u7f16\u53f7\u4e3a1\u5230n\uff0c\u7b2ci\u4e2a\u57ce\u5821\u7684\u9ad8\u5ea6\u662fhi\u3002\u5c31\u5728\u5927\u5bb6\u90fd\u8981\u8d70\u7684\u65f6\u5019\uff0cSquidward\u6ce8\u610f\u5230\uff0c\u6c99\u5821\u6ca1\u6709\u6309\u5b83\u4eec\u7684\u9ad8\u5ea6\u6392\u5e8f\uff0c\u8fd9\u770b\u8d77\u6765\u5f88\u4e0d\u548c\u8c10,\u3002\u73b0\u5728\uff0c\u4ed6\u4eec\u5c06\u91cd\u65b0\u6392\u5217\u57ce\u5821\uff0c\u4f7f\u5bf9\u4e8e\u6240\u6709\u7684i\uff0c\uff080<=i<=n-1\uff09\u90fd\u6709hi<=hi+1\u3002\r\nSquidward\u5efa\u8bae\u7528\u4e0b\u5217\u65b9\u5f0f\u7ed9\u57ce\u5821\u6392\u5e8f\uff1a\r\n- \u57ce\u5821\u88ab\u5206\u6210\u51e0\u4e2a\u8fde\u7eed\u7684\u6bb5\uff0c\u56e0\u6b64\u4ecei\u5230j\u7684\u57ce\u5821\u6bb5\u5e94\u8be5\u5305\u62eci,i+1...j-1,j\u3002\u4e00\u4e2a\u57ce\u5821\u6bb5\u53ef\u4ee5\u53ea\u6709\u4e00\u4e2a\u57ce\u5821\u7ec4\u6210\u3002\r\n- \u4f7f\u6240\u6709\u57ce\u5821\u90fd\u5728\u4e00\u4e2a\u6bb5\u5185\u3002\r\n- \u6bcf\u4e2a\u6bb5\u72ec\u7acb\u4e8e\u5176\u4ed6\u6bb5\u8fdb\u884c\u6392\u5e8f\uff0c\u5373\u5e8f\u5217hi,hi+1...hj-1,hj\u662f\u6709\u5e8f\u7684\u3002\r\n- \u6bb5\u7684\u5212\u5206\u5e94\u6ee1\u8db3\u5728\u6bcf\u4e2a\u6bb5\u88ab\u6392\u5e8f\u4e4b\u540e\uff0c\u5e8f\u5217\u4e5f\u53d8\u5f97\u6709\u5e8f\u3002\u8fd9\u603b\u662f\u53ef\u4ee5\u88ab\u6ee1\u8db3\u56e0\u4e3a\u53ef\u4ee5\u628a\u6574\u4e2a\u5e8f\u5217\u770b\u505a\u4e00\u6bb5\u3002\r\nPatrick\u77e5\u9053\u5728\u5206\u533a\u4e2d\u589e\u52a0\u5757\u7684\u6570\u91cf\u5c06\u7b80\u5316\u6392\u5e8f\u8fc7\u7a0b\u3002\u73b0\u5728\uff0c\u4ed6\u4eec\u8981\u6c42\u4f60\u8ba1\u7b97\u6ee1\u8db3\u6240\u6709\u4e0a\u8ff0\u8981\u6c42\u7684\u5206\u533a\u4e2d\u7684\u6700\u5927\u53ef\u80fd\u5757\u6570\u3002\r\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\r\n\u8f93\u5165\u683c\u5f0f\uff1a\r\n\u7b2c\u4e00\u884c\u5305\u62ec\u4e00\u4e2a\u6570n(1<=n<=100000)\uff0c\u8868\u793aSpongebob, Patrick\u548cSquidward\u5efa\u7684\u57ce\u5821\u7684\u6570\u91cf\u3002\r\n\u4e0b\u4e00\u884c\u5305\u62ecn\u4e2a\u6574\u6570hi(1<=hi<=1e9)\u3002\u7b2ci\u4e2a\u6570\u8868\u793a\u7b2ci\u4e2a\u57ce\u5821\u7684\u9ad8\u5ea6\u3002\r\n\u8f93\u51fa\u683c\u5f0f\uff1a\r\n\u8f93\u51fa\u6700\u5927\u53ef\u80fd\u7684\u5e8f\u5217\u88ab\u5212\u5206\u7684\u6bb5\u6570\u3002"
}