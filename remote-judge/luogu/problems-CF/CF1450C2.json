{
    "description": "The only difference between the easy and hard versions is that tokens of type O do not appear in the input of the easy version.\n\nErrichto gave Monogon the following challenge in order to intimidate him from taking his top contributor spot on Codeforces.\n\nIn a Tic-Tac-Toe grid, there are $ n $ rows and $ n $ columns. Each cell of the grid is either empty or contains a token. There are two types of tokens: X and O. If there exist three tokens of the same type consecutive in a row or column, it is a winning configuration. Otherwise, it is a draw configuration.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1450C2/39afc6239351b009b5f556b0fc6f685f7842a873.png) The patterns in the first row are winning configurations. The patterns in the second row are draw configurations. In an operation, you can change an X to an O, or an O to an X. Let $ k $ denote the total number of tokens in the grid. Your task is to make the grid a draw in at most $ \\lfloor \\frac{k}{3}\\rfloor $ (rounding down) operations.\n\nYou are not required to minimize the number of operations.",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1\\le t\\le 100 $ ) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $ n $ ( $ 1\\le n\\le 300 $ ) \u2014 the size of the grid.\n\nThe following $ n $ lines each contain a string of $ n $ characters, denoting the initial grid. The character in the $ i $ -th row and $ j $ -th column is '.' if the cell is empty, or it is the type of token in the cell: 'X' or 'O'.\n\nIt is guaranteed that not all cells are empty.\n\nThe sum of $ n $ across all test cases does not exceed $ 300 $ .",
    "outputFormat": "For each test case, print the state of the grid after applying the operations.\n\nWe have proof that a solution always exists. If there are multiple solutions, print any.",
    "samples": [
        [
            "3\n3\n.O.\nOOO\n.O.\n6\nXXXOOO\nXXXOOO\nXX..OO\nOO..XX\nOOOXXX\nOOOXXX\n5\n.OOO.\nOXXXO\nOXXXO\nOXXXO\n.OOO.",
            ".O.\nOXO\n.O.\nOXXOOX\nXOXOXO\nXX..OO\nOO..XX\nOXOXOX\nXOOXXO\n.OXO.\nOOXXO\nXXOXX\nOXXOO\n.OXO."
        ]
    ],
    "hint": "In the first test case, there are initially three 'O' consecutive in the second row and the second column. By changing the middle token to 'X' we make the grid a draw, and we only changed $ 1\\le \\lfloor 5/3\\rfloor $ token.\n\nIn the second test case, the final grid is a draw. We only changed $ 8\\le \\lfloor 32/3\\rfloor $ tokens.\n\nIn the third test case, the final grid is a draw. We only changed $ 7\\le \\lfloor 21/3\\rfloor $ tokens.",
    "translation": "\u7ed9\u5b9a\u4e00\u5f20 $n$ \u884c $n$ \u5217\u7684\u68cb\u76d8\uff0c\u6bcf\u4e2a\u683c\u5b50\u53ef\u80fd\u662f\u7a7a\u7684\u6216\u5305\u542b\u4e00\u4e2a\u6807\u5fd7\uff0c\u6807\u5fd7\u6709 $\\text{X}$ \u548c $\\text{O}$ \u4e24\u79cd\u3002\n\n\u5982\u679c\u6709\u4e09\u4e2a\u76f8\u540c\u7684\u6807\u5fd7\u6392\u5217\u5728\u4e00\u884c\u6216\u4e00\u5217\u4e0a\u7684\u4e09\u4e2a\u8fde\u7eed\u7684\u4f4d\u7f6e\uff0c\u5219\u79f0\u8fd9\u4e2a\u68cb\u76d8\u662f\u4e00\u4e2a **\u80dc\u5c40**\uff0c\n\u5426\u5219\u79f0\u5176\u4e3a **\u5e73\u5c40**\u3002\n\n![\u793a\u610f\u56fe](https://i.loli.net/2021/02/18/F6Dto8diKIZmRSv.png)\n\n\u4f8b\u5982\uff0c\u4e0a\u56fe\u7b2c\u4e00\u884c\u7684\u5c40\u9762\u90fd\u662f\u80dc\u5c40\uff0c\u800c\u7b2c\u4e8c\u884c\u7684\u5c40\u9762\u90fd\u662f\u5e73\u5c40\u3002\n\n\u5728\u4e00\u6b21\u64cd\u4f5c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a $\\text X$ \u6539\u6210 $\\text O$\uff0c\u6216\u5c06\u4e00\u4e2a $\\text O$ \u6539\u6210 $\\text X$\u3002\n\n\u8bbe\u68cb\u76d8\u4e2d\u6807\u5fd7\u7684\u603b\u6570\u4e3a $k$\uff0c\u4f60\u9700\u8981\u7528\u4e0d\u8d85\u8fc7 $\\lfloor \\frac{k}{3}\\rfloor$\n\u6b21\u64cd\u4f5c\u628a\u7ed9\u5b9a\u7684\u5c40\u9762\u53d8\u6210\u5e73\u5c40\u3002\n\n$1\\leq n\\leq 300$\u3002"
}