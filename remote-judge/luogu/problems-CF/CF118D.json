{
    "description": "Gaius Julius Caesar, a famous general, loved to line up his soldiers. Overall the army had $ n_{1} $ footmen and $ n_{2} $ horsemen. Caesar thought that an arrangement is not beautiful if somewhere in the line there are strictly more that $ k_{1} $ footmen standing successively one after another, or there are strictly more than $ k_{2} $ horsemen standing successively one after another. Find the number of beautiful arrangements of the soldiers.\n\nNote that all $ n_{1}+n_{2} $ warriors should be present at each arrangement. All footmen are considered indistinguishable among themselves. Similarly, all horsemen are considered indistinguishable among themselves.",
    "inputFormat": "The only line contains four space-separated integers $ n_{1} $ , $ n_{2} $ , $ k_{1} $ , $ k_{2} $ ( $ 1<=n_{1},n_{2}<=100,1<=k_{1},k_{2}<=10 $ ) which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly.",
    "outputFormat": "Print the number of beautiful arrangements of the army modulo $ 100000000 $ $ (10^{8}) $ . That is, print the number of such ways to line up the soldiers, that no more than $ k_{1} $ footmen stand successively, and no more than $ k_{2} $ horsemen stand successively.",
    "samples": [
        [
            "2 1 1 10\n",
            "1\n"
        ],
        [
            "2 3 1 2\n",
            "5\n"
        ],
        [
            "2 4 1 1\n",
            "0\n"
        ]
    ],
    "hint": "Let's mark a footman as 1, and a horseman as 2.\n\nIn the first sample the only beautiful line-up is: 121\n\nIn the second sample 5 beautiful line-ups exist: 12122, 12212, 21212, 21221, 22121",
    "translation": "# \u9898\u76ee\u63cf\u8ff0\n\u51ef\u6492\u5927\u5e1d\u559c\u6b22\u8ba9\u4ed6\u7684\u58eb\u5175\u5217\u961f\u3002\u5047\u8bbe\u4ed6\u7684\u519b\u961f\u6709$n_1$\u4e2a\u6b65\u5175\u548c$n_2$\u4e2a\u9a91\u5175\u3002\u4ed6\u8ba4\u4e3a\u8d85\u8fc7$k_1$\u4e2a\u6b65\u5175\u8fde\u7eed\u6392\u5217\u6216\u662f\u8d85\u8fc7$k_2$\u4e2a\u9a91\u5175\u8fde\u7eed\u6392\u5217\u662f\u4e0d\u4f18\u96c5\u7684\u3002\u8bf7\u627e\u51fa\u5171\u6709\u591a\u5c11\u79cd\u4f18\u96c5\u7684\u5217\u961f\u65b9\u6848\u6570\u3002\n\n\u6ce8\uff1a\u6240\u6709$n_1+n_2$\u4e2a\u58eb\u5175\u90fd\u8981\u88ab\u6392\u5217\uff0c\u4e14\u6240\u6709\u6b65\u5175\u548c\u9a91\u5175\u90fd\u89c6\u4f5c\u76f8\u540c\u3002\n\n# \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n## \u8f93\u5165\u683c\u5f0f\uff1a\n\u4e00\u884c\u5305\u542b\u56db\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570$n_1,n_2,k_1,k_2(1 \\leq n_1, n_2 \\leq 100, 1 \\leq k_1, k_2 \\leq 10)$\uff0c\u5206\u522b\u4ee3\u8868\u6b65\u5175\u7684\u6570\u91cf\u3001\u9a91\u5175\u7684\u6570\u91cf\u3001\u6700\u5927\u7684\u8fde\u7eed\u6b65\u5175\u6570\u91cf\u548c\u6700\u5927\u7684\u8fde\u7eed\u9a91\u5175\u6570\u91cf\u3002\n\n## \u8f93\u51fa\u683c\u5f0f\uff1a\n\u8f93\u51fa\u4f18\u96c5\u7684\u5217\u961f\u65b9\u6848\u6570\uff0c\u7ed3\u679c\u5bf9$100000000(10^8)$\u53d6\u6a21\n\n## \u8bf4\u660e\n1\u8868\u793a\u6b65\u5175\uff0c2\u8868\u793a\u9a91\u5175\n\n\u7b2c\u4e00\u4e2a\u6837\u4f8b\u4e2d\uff0c\u53ea\u6709\u4e00\u79cd\u4f18\u96c5\u7684\u6392\u5217\u65b9\u5f0f\uff1a121\n\n\u7b2c\u4e8c\u4e2a\u6837\u4f8b\u4e2d\uff0c\u6709\u4e94\u79cd\u4f18\u96c5\u7684\u6392\u5217\u65b9\u5f0f\uff1a12122,12212,21212,21221,22121"
}