{
    "description": "This is an interactive problem.\n\nNote: the XOR-sum of an array $ a_1, a_2, \\ldots, a_n $ ( $ 1 \\le a_i \\le 10^9 $ ) is defined as $ a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n $ , where $ \\oplus $ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nLittle Dormi received an array of $ n $ integers $ a_1, a_2, \\ldots, a_n $ for Christmas. However, while playing with it over the winter break, he accidentally dropped it into his XOR machine, and the array got lost.\n\nThe XOR machine is currently configured with a query size of $ k $ (which you cannot change), and allows you to perform the following type of query: by giving the machine $ k $ distinct indices $ x_1, x_2, \\ldots, x_k $ , it will output $ a_{x_1} \\oplus a_{x_2} \\oplus \\ldots \\oplus a_{x_k} $ .\n\nAs Little Dormi's older brother, you would like to help him recover the XOR-sum of his array $ a_1, a_2, \\ldots, a_n $ by querying the XOR machine.\n\nLittle Dormi isn't very patient, so to be as fast as possible, you must query the XOR machine the minimum number of times to find the XOR-sum of his array. Formally, let $ d $ be the minimum number of queries needed to find the XOR-sum of any array of length $ n $ with a query size of $ k $ . Your program will be accepted if you find the correct XOR-sum in at most $ d $ queries.\n\nLastly, you also noticed that with certain configurations of the machine $ k $ and values of $ n $ , it may not be possible to recover the XOR-sum of Little Dormi's lost array. If that is the case, you should report it as well.\n\nThe array $ a_1, a_2, \\ldots, a_n $ is fixed before you start querying the XOR machine and does not change with the queries.",
    "inputFormat": "The only line of input contains the integers $ n $ and $ k $ ( $ 1 \\le n \\le 500 $ , $ 1 \\le k \\le n $ ), the length of the lost array and the configured query size of the XOR machine.\n\nElements of the original array satisfy $ 1 \\le a_i \\le 10^9 $ .\n\nIt can be proven that that if it is possible to recover the XOR sum under the given constraints, it can be done in at most $ 500 $ queries. That is, $ d \\le 500 $ .\n\nAfter taking $ n $ and $ k $ , begin interaction.",
    "outputFormat": "If it is impossible to recover the XOR-sum of the array, output $ -1 $ immediately after taking $ n $ and $ k $ . Do not begin interaction.\n\nOtherwise, when your program finds the XOR-sum of the lost array $ a_1, a_2, \\ldots, a_n $ , report the answer in the following format: \"! x\", where $ x $ is the XOR sum of the array $ a_1, a_2, \\ldots, a_n $ , and terminate your program normally immediately after flushing the output stream.\n\nNote that answering does not count as a query.\n\nInteraction\n\nEach query is made in the format \"? b\", where $ b $ is an array of exactly $ k $ distinct integers from $ 1 $ to $ n $ denoting the indices of the elements in the lost array that you want to query the XOR sum of.\n\nYou will then receive an integer $ x $ , the XOR sum of the queried elements. It can be proven that $ 0 \\le x \\le 2 \\cdot 10^9 $ will always be true.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nIf at any point you make an invalid query or try to make more than $ 500 $ queries (which is the hard limit), the interaction will terminate immediately and give you a Wrong Answer verdict. Note that if you exceed $ d $ queries, the interaction will continue normally unless you also exceed the $ 500 $ query hard limit, though you will still receive a Wrong Answer verdict either way.\n\nHacks\n\nTo hack a solution, use the following format.\n\nThe first line contains the integers $ n $ and $ k $ ( $ 1 \\le n \\le 500 $ , $ 1 \\le k \\le n $ ).\n\nThe second line contains the the array $ a_1, a_2, \\ldots, a_n $ ( $ 1 \\le a_i \\le 10^9 $ ).",
    "samples": [
        [
            "5 3\n\n4\n\n0\n\n1",
            "? 1 2 3\n\n? 2 3 5\n\n? 4 1 5\n\n! 7"
        ],
        [
            "3 2",
            "-1"
        ]
    ],
    "hint": "In the first example interaction, the array $ a_1, a_2, \\ldots, a_n $ is $ 2, 1, 7, 5, 6 $ and its XOR-sum is $ 7 $ .\n\nThe first query made asks for indices $ 1,2,3 $ , so the response is $ a_1 \\oplus a_2 \\oplus a_3 = 2 \\oplus 1 \\oplus 7 = 4 $ .\n\nThe second query made asks for indices $ 2,3,5 $ , so the response is $ a_2 \\oplus a_3 \\oplus a_5 = 1 \\oplus 7 \\oplus 6 = 0 $ .\n\nThe third query made asks for indices $ 4,1,5 $ , so the response is $ a_4 \\oplus a_1 \\oplus a_5 = 5 \\oplus 2 \\oplus 6 = 1 $ . Note that the indices may be output in any order.\n\nAdditionally, even though three queries were made in the example interaction, it is just meant to demonstrate the interaction format and does not necessarily represent an optimal strategy.\n\nIn the second example interaction, there is no way to recover the XOR-sum of Little Dormi's array no matter what is queried, so the program immediately outputs $ -1 $ and exits.",
    "translation": "**\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002**\n\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$ \u548c\u4e00\u4e2a\u6574\u6570 $k$\u3002\u4f60\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u9009\u5b9a $k$ \u4e2a\u4e24\u4e24\u4e0d\u540c\u7684\u6570 $b_1, b_2, ..., b_k (1 \\le b_i \\le n)$\uff0c\u7cfb\u7edf\u5c06\u4f1a\u544a\u8bc9\u4f60 $a_{b_1} \\oplus a_{b_2} \\oplus ... \\oplus a_{b_k}$ \u7684\u503c\u3002\u5176\u4e2d $\\oplus$ \u4ee3\u8868\u5f02\u6216\u8fd0\u7b97\u3002\n\n\u8bf7\u7528**\u6700\u5c11**\u7684\u64cd\u4f5c\u6c42\u51fa $a_1 \\oplus a_2 \\oplus ... \\oplus a_n$ \u7684\u503c\uff0c\u82e5\u65e0\u6cd5\u6c42\u51fa\u8fd9\u4e2a\u503c\u5219\u8f93\u51fa `-1`\u3002"
}