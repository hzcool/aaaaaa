{
    "description": "You are on the island which can be represented as a $ n \\times m $ table. The rows are numbered from $ 1 $ to $ n $ and the columns are numbered from $ 1 $ to $ m $ . There are $ k $ treasures on the island, the $ i $ -th of them is located at the position $ (r_i, c_i) $ .\n\nInitially you stand at the lower left corner of the island, at the position $ (1, 1) $ . If at any moment you are at the cell with a treasure, you can pick it up without any extra time. In one move you can move up (from $ (r, c) $ to $ (r+1, c) $ ), left (from $ (r, c) $ to $ (r, c-1) $ ), or right (from position $ (r, c) $ to $ (r, c+1) $ ). Because of the traps, you can't move down.\n\nHowever, moving up is also risky. You can move up only if you are in a safe column. There are $ q $ safe columns: $ b_1, b_2, \\ldots, b_q $ . You want to collect all the treasures as fast as possible. Count the minimum number of moves required to collect all the treasures.",
    "inputFormat": "The first line contains integers $ n $ , $ m $ , $ k $ and $ q $ ( $ 2 \\le n, \\, m, \\, k, \\, q \\le 2 \\cdot 10^5 $ , $ q \\le m $ ) \u2014 the number of rows, the number of columns, the number of treasures in the island and the number of safe columns.\n\nEach of the next $ k $ lines contains two integers $ r_i, c_i $ , ( $ 1 \\le r_i \\le n $ , $ 1 \\le c_i \\le m $ ) \u2014 the coordinates of the cell with a treasure. All treasures are located in distinct cells.\n\nThe last line contains $ q $ distinct integers $ b_1, b_2, \\ldots, b_q $ ( $ 1 \\le b_i \\le m $ ) \u2014 the indices of safe columns.",
    "outputFormat": "Print the minimum number of moves required to collect all the treasures.",
    "samples": [
        [
            "3 3 3 2\n1 1\n2 1\n3 1\n2 3\n",
            "6"
        ],
        [
            "3 5 3 2\n1 2\n2 3\n3 1\n1 5\n",
            "8"
        ],
        [
            "3 6 3 2\n1 6\n2 2\n3 4\n1 6\n",
            "15"
        ]
    ],
    "hint": "In the first example you should use the second column to go up, collecting in each row treasures from the first column.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1201D/69be72eb65e8a117f939589fc74d8d456faf3fe4.png)In the second example, it is optimal to use the first column to go up.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1201D/127fc8a2ee6c2fe0e6e82a0905c4b0be74ded6e4.png)In the third example, it is optimal to collect the treasure at cell $ (1;6) $ , go up to row $ 2 $ at column $ 6 $ , then collect the treasure at cell $ (2;2) $ , go up to the top row at column $ 1 $ and collect the last treasure at cell $ (3;4) $ . That's a total of $ 15 $ moves.\n\n ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1201D/63c6a47b6fa91504b3daf0a0a974fd73bb988950.png)",
    "translation": "\u9898\u76ee\u63cf\u8ff0\n\n\u6709\u4e00\u4e2a$n*m$\u7684\u77e9\u9635\uff0c\u884c\u7684\u6807\u53f7\u4ece$1$\u5230$n$\uff0c\u5217\u7684\u6807\u53f7\u4ece$1$\u5230$m$\uff0c\u77e9\u9635\u4e2d\u5171\u6709$k$\u4e2a\u5b9d\u85cf\uff0c\u7b2c$i$\u4e2a\u5b9d\u85cf\u7684\u4f4d\u7f6e\u4e3a$(r_i,c_i)$\u3002\u6709$q$\u4e2a\u5b89\u5168\u7684\u5217\uff0c\u7b2c$i$\u4e2a\u5b89\u5168\u7684\u5217\u7684\u7f16\u53f7\u662f$b_i$\u3002\n\n\u6700\u521d\u4f60\u7ad9\u5728\u77e9\u9635\u7684\u5de6\u4e0b\u89d2\uff08\u4e5f\u5c31\u662f$(1,1)$\u7684\u4f4d\u7f6e\uff09\uff0c\u5e76\u4e14\u53ef\u4ee5\u5411\u5de6\u8d70\uff08\u4ece$(r,c)$\u5230$(r,c-1)$\uff09\u548c\u5411\u53f3\u8d70\uff08\u4ece$(r,c)$\u5230$(r,c+1)$\uff09\u3002\u540c\u65f6\uff0c\u4f60\u4e5f\u53ef\u662f\u5411\u4e0a\u8d70\uff08\u4ece$(r,c)$\u5230$(r+1,c)$\uff09\uff0c\u4f46\u662f\u4f60\u5fc5\u987b\u5728\u5b89\u5168\u7684\u5217\u4e0a\u3002\u7531\u4e8e\u67d0\u4e9b\u7384\u5b66\u539f\u56e0\uff0c\u4f60\u4e0d\u53ef\u4ee5\u5411\u4e0b\u8d70\u3002\n\n\u4f60\u7684\u4efb\u52a1\u662f\u6536\u96c6\u6240\u6709\u7684\u5b9d\u85cf\uff0c\u4f46\u662f\u4f60\u7684\u65f6\u95f4\u5df2\u7ecf\u4e0d\u591a\u4e86\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u8d70\u6700\u5feb\u7684\u8def\u5f84\u3002\u73b0\u5728\u4f60\u8981\u4f7f\u7528\u4f60\u7684\u4eba\u8111\u5927\u6cd5\u6765\u8ba1\u7b97\u51fa\u6700\u5feb\u7684\u8def\u5f84\u9700\u8981\u591a\u5c11\u65f6\u95f4\uff08\u7ecf\u8fc7\u6709\u5b9d\u85cf\u7684\u683c\u5b50\u65f6\u6536\u96c6\u5b9d\u85cf\u4e0d\u6d88\u8017\u65f6\u95f4\uff0c\u53ea\u6709\u79fb\u52a8\u6d88\u8017\u65f6\u95f4\uff09\u3002\n\n\u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u4e3a\u56db\u4e2a\u6574\u6570$n,m,k,q(2\u2264n,m,k,q\u22642*10^5,q\u2264m)$\u2014\u2014\u884c\u6570\uff0c\u5217\u6570\uff0c\u5b9d\u85cf\u4e2a\u6570\uff0c\u5b89\u5168\u7684\u5217\u7684\u4e2a\u6570\u3002\n\n\u63a5\u4e0b\u6765$k$\u884c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570$r_i,c_i(1\u2264r_i\u2264n,1\u2264c_i\u2264m)$\u2014\u2014\u5b9d\u85cf\u7684\u4f4d\u7f6e\u3002\n\n\u6700\u540e\u4e00\u884c\u4e3a$q$\u4e2a\u6574\u6570$b_1,b_2,...,b_q$\u2014\u2014\u5b89\u5168\u7684\u5217\u7684\u7f16\u53f7\u3002\n\n\u8f93\u51fa\u683c\u5f0f\n\n\u4e00\u4e2a\u6574\u6570\uff0c\u6700\u5feb\u7684\u8def\u5f84\u9700\u8981\u7684\u65f6\u95f4\u3002"
}