{
    "description": "A bracket sequence is a string containing only characters \"(\" and \")\". A regular bracket sequence (or, shortly, an RBS) is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example:\n\n- bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\");\n- bracket sequences \")(\", \"(\" and \")\" are not.\n\nLet's denote the concatenation of two strings $ x $ and $ y $ as $ x+y $ . For example, \"()()\" $ + $ \")(\" $ = $ \"()())(\".\n\nYou are given $ n $ bracket sequences $ s_1, s_2, \\dots, s_n $ . You can rearrange them in any order (you can rearrange only the strings themselves, but not the characters in them).\n\nYour task is to rearrange the strings in such a way that the string $ s_1 + s_2 + \\dots + s_n $ has as many non-empty prefixes that are RBS as possible.",
    "inputFormat": "The first line contains a single integer $ n $ ( $ 1 \\le n \\le 20 $ ).\n\nThen $ n $ lines follow, the $ i $ -th of them contains $ s_i $ \u2014 a bracket sequence (a string consisting of characters \"(\" and/or \")\". All sequences $ s_i $ are non-empty, their total length does not exceed $ 4 \\cdot 10^5 $ .",
    "outputFormat": "Print one integer \u2014 the maximum number of non-empty prefixes that are RBS for the string $ s_1 + s_2 + \\dots + s_n $ , if the strings $ s_1, s_2, \\dots, s_n $ can be rearranged arbitrarily.",
    "samples": [
        [
            "2\n(\n)",
            "1"
        ],
        [
            "4\n()()())\n(\n(\n)",
            "4"
        ],
        [
            "1\n(())",
            "1"
        ],
        [
            "1\n)(()",
            "0"
        ]
    ],
    "hint": "In the first example, you can concatenate the strings as follows: \"(\" $ + $ \")\" $ = $ \"()\", the resulting string will have one prefix, that is an RBS: \"()\".\n\nIn the second example, you can concatenate the strings as follows: \"(\" $ + $ \")\" $ + $ \"()()())\" $ + $ \"(\" $ = $ \"()()()())(\", the resulting string will have four prefixes that are RBS: \"()\", \"()()\", \"()()()\", \"()()()()\".\n\nThe third and the fourth examples contain only one string each, so the order is fixed.",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\n\u5b9a\u4e49\u62ec\u53f7\u5e8f\u5217\u4e3a\u53ea\u5305\u62ec $\\texttt{(}$ \u548c $\\texttt{)}$ \u7684\u5b57\u7b26\u4e32\u3002\u4e00\u4e2a\u5339\u914d\u7684\u62ec\u53f7\u5e8f\u5217\uff08\u7b80\u8bb0\u4e3a RBS\uff09\u6ee1\u8db3\uff0c\u53ef\u4ee5\u5728\u5176\u4e2d\u52a0\u5165 $1$ \u548c $+$\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u5408\u6cd5\u7684\u4ee3\u6570\u5f0f\uff0c\u4f8b\u5982\uff1a\n+ $\\texttt{()()}$ \u548c $\\texttt{(())}$ \u662f\u5339\u914d\u7684\n+ $\\texttt{)(}$ \u548c $\\texttt{(}$ \u548c $\\texttt{)}$ \u4e0d\u662f\u3002\n\n\u5c06\u4e24\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u5728\u4e00\u8d77\u7b80\u8bb0\u4e3a $x+y$\u3002\u4f8b\u5982\uff0c$\\texttt{()()}+\\texttt{)(}=\\texttt{()())(}$\u3002\n\n\u7ed9\u5b9a $n$ \u4e2a\u62ec\u53f7\u5e8f\u5217 $s_1\\sim s_n$\uff0c\u4f60\u53ef\u4ee5\u5c06\u4ed6\u4eec\u4efb\u610f\u91cd\u65b0\u6392\u5e8f\uff0c\u8981\u6c42\u4f7f\u5f97\u6700\u7ec8\u6392\u5e8f\u540e\u7684\u5b57\u7b26\u4e32\u6ee1\u8db3 $s_1+\\dots+s_n$ \u7684 RBS \u524d\u7f00\u4e2a\u6570\u6700\u591a\u3002\n### \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 $n$\uff08$1\\le n\\le 20$\uff09\u3002\n\n\u63a5\u4e0b\u6765\u7684 $n$ \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u62ec\u53f7\u5e8f\u5217\uff0c\u7b2c $i+1$ \u884c\u8f93\u5165\u7684\u662f $s_i$\u3002\u4fdd\u8bc1 $s_i$ \u7684\u603b\u957f\u5ea6\u4e0d\u8d85\u8fc7 $4\\cdot 10^5$\u3002\n### \u8f93\u51fa\u683c\u5f0f\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927 RBS \u524d\u7f00\u957f\u5ea6\u3002\n### \u8bf4\u660e/\u63d0\u793a\n\u5728\u7b2c\u4e00\u4e2a\u6837\u4f8b\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u62fc\u63a5\u4e3a $\\texttt{(}+\\texttt{)}=\\texttt{()}$\uff0c\u6b64\u65f6 RBS \u524d\u7f00\u4e2a\u6570\u4e3a $1$\uff0c\u5c31\u662f $\\texttt{()}$\u3002\n\n\u5728\u7b2c\u4e8c\u4e2a\u6837\u4f8b\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u51ed\u501f\u4e3a\n$\\texttt(+\\texttt)+\\texttt{()()())}+\\texttt{(}=\\texttt{()()()())(}$\uff0c\u6b64\u65f6 RBS \u524d\u7f00\u4e2a\u6570\u4e3a $4$\uff0c\u5c31\u662f $\\texttt{()}$\u3001$\\texttt{()()}$\u3001$\\texttt{()()()}$ \u548c $\\texttt{()()()()}$\u3002\n\n\u7b2c\u4e09\u4e2a\u548c\u7b2c\u56db\u4e2a\u6837\u4f8b\u4e2d\u4ec5\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u987a\u5e8f\u662f\u56fa\u5b9a\u7684\u3002\n\nTranslated by [hodf](https://www.luogu.com.cn/user/121027)."
}