{
    "description": "Alice and Bob begin their day with a quick game. They first choose a starting number $ X_{0}>=3 $ and try to reach one million by the process described below.\n\nAlice goes first and then they take alternating turns. In the $ i $ -th turn, the player whose turn it is selects a prime number smaller than the current number, and announces the smallest multiple of this prime number that is not smaller than the current number.\n\nFormally, he or she selects a prime $ p&lt;X_{i-1} $ and then finds the minimum $ X_{i}>=X_{i-1} $ such that $ p $ divides $ X_{i} $ . Note that if the selected prime $ p $ already divides $ X_{i-1} $ , then the number does not change.\n\nEve has witnessed the state of the game after two turns. Given $ X_{2} $ , help her determine what is the smallest possible starting number $ X_{0} $ . Note that the players don't necessarily play optimally. You should consider all possible game evolutions.",
    "inputFormat": "The input contains a single integer $ X_{2} $ ( $ 4<=X_{2}<=10^{6} $ ). It is guaranteed that the integer $ X_{2} $ is composite, that is, is not prime.",
    "outputFormat": "Output a single integer \u2014 the minimum possible $ X_{0} $ .",
    "samples": [
        [
            "14\n",
            "6\n"
        ],
        [
            "20\n",
            "15\n"
        ],
        [
            "8192\n",
            "8191\n"
        ]
    ],
    "hint": "In the first test, the smallest possible starting number is $ X_{0}=6 $ . One possible course of the game is as follows:\n\n- Alice picks prime 5 and announces $ X_{1}=10 $\n- Bob picks prime 7 and announces $ X_{2}=14 $ .\n\nIn the second case, let $ X_{0}=15 $ .\n\n- Alice picks prime 2 and announces $ X_{1}=16 $\n- Bob picks prime 5 and announces $ X_{2}=20 $ .",
    "translation": "\u8d8a\u5b66\u8d8a\u6382\u662f\u4e2a\u8d2a\u73a9\u7684\u5b69\u5b50\u3002\n\n\u8fd9\u5929\uff0c\u8d8a\u5b66\u8d8a\u6382\u548c\u4ed6\u7684**\u4e00\u4e2a**\u670b\u53cb\u6b63\u5728\u73a9\u6e38\u620f\uff0c\u8f6e\u6d41\u6765\u7684\uff0c\u9996\u5148\u7ed9\u51fa\u4e00\u4e2a$X0$,\u9009\u53d6\u4e00\u4e2a$P1$\uff08$P1$\u6bd4\u5f53\u524d\u6570\u503c\u5c0f\uff09\uff0c\u7136\u540e\u8ba9\u627e$P1$\u7684\u67d0\u4e00\u500d\u6570\u4f7f\u5f97\u5b83\u521a\u597d\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u6570\u503c(\u7b49\u4e8e\u7684\u65f6\u5019\u662f\u8bf4\u8fd9\u4e2a\u8d28\u6570\u672c\u8eab\u5c31\u662f\u5f53\u524d\u6570\u503c\u7684\u56e0\u6570)\uff0c\u8fd9\u4e2a\u6570\u5b57\u4fbf\u662f\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002\u518d\u5982\u662f\u8fdb\u884c\u4e00\u8f6e\u3002\u9898\u76ee\u7ed9\u51fa$X2$(\u8fd9\u4e2a\u6570\u5b57\u662f\u4e2a\u975e\u8d28\u6570)\uff0c\u5e0c\u671b\u4f60\u80fd\u6c42\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u6700\u5c0f\u7684$X0$\u3002"
}