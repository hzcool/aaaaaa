{
    "description": "This is an interactive problem.\n\nThere are $ n $ distinct hidden points with real coordinates on a two-dimensional Euclidean plane. In one query, you can ask some line $ ax + by + c = 0 $ and get the projections of all $ n $ points to this line in some order. The given projections are not exact, please read the interaction section for more clarity.\n\nUsing the minimum number of queries, guess all $ n $ points and output them in some order. Here minimality means the minimum number of queries required to solve any possible test case with $ n $ points.\n\nThe hidden points are fixed in advance and do not change throughout the interaction. In other words, the interactor is not adaptive.\n\nA projection of point $ A $ to line $ ax + by + c = 0 $ is the point on the line closest to $ A $ .",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1 \\leq t \\leq 50 $ ) \u2014 the number of test cases.\n\nThe description of the test cases follows.\n\nThe first line of each test case contains a single integer $ n $ ( $ 2 \\leq n \\leq 25 $ ) \u2014 the number of hidden points.\n\nFor each test case, it is guaranteed that for any pair of hidden points, their $ x $ coordinates differ by at least $ 1 $ . Analogously, $ y $ coordinates of any pair also differ by at least $ 1 $ .\n\nCoordinates $ x $ and $ y $ of all hidden points do not exceed $ 100 $ by absolute value.",
    "outputFormat": "To query a line $ ax + by + c = 0 $ you should print \"? a b c\" where all a, b and c are real numbers up to $ 100 $ by absolute value. For less precision issues numbers $ a $ and $ b $ must satisfy the condition $ |a| + |b| \\geq 0.1 $ , where $ |a| $ is the absolute value of $ a $ .\n\nAs an answer to the query you will get $ n $ points in the form \"x\\_1 y\\_1 ... x\\_n y\\_n\", where points $ (x_i, y_i) $ are projections to the line $ ax + by + c = 0 $ . It is guaranteed that each printed point is no more than $ 10^{-4} $ away from the real projection point. Every coordinate is printed with at most 9 decimal places.\n\nSee the interaction example for more clarity.\n\nIf you ask too many queries, you will get Wrong answer.\n\nTo output an answer you should print \"! x\\_1 y\\_1 ... x\\_n y\\_n\", where $ (x_i, y_i) $ are coordinates of the hidden points. You could output the hidden points in any order. The answer would be considered correct if each of the printed points is no more than $ 10^{-3} $ away from the corresponding hidden point. Printing the answer doesn't count as a query.\n\nAfter printing a query or the answer, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages\n\nHacks\n\nTo make a hack, use the following test format.\n\nIn the first line output a single integer $ t $ ( $ 1 \\leq t \\leq 50 $ ) \u2014 the number of test cases.\n\nThe description of the test cases follows.\n\nIn the first line of each test case output a single integer $ n $ ( $ 2 \\leq n \\leq 25 $ ). In the next $ n $ lines output two rational numbers each. The numbers in line $ i $ should correspond to $ x_i $ and $ y_i $ respectively. Printed points must comply with all constraints from the input section.",
    "samples": [
        [
            "1\n2\n\n1 1 2.5 1\n\n1.500000001 1.500000000 2 2",
            "? 0 1 -1\n\n? 0.2 -0.2 0\n\n! 1 3 2.5 0.500000001"
        ]
    ],
    "hint": "In the sample the hidden points are $ (1, 3) $ and $ (2.5, 0.5) $\n\nA picture, which describes the first query:\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1826F/4744008dabc55375d10584d55a7e6bc54d18767a.png)\n\nA picture, which describes the second query:\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1826F/3b1f3044b777eff15fd4aeeb3484196dbbaecf67.png)",
    "translation": "\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\n\n\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u6709 $n(1 \\leq n \\leq 25)$ \u4e2a\u9690\u85cf\u7684\u4e0d\u540c\u7684\u70b9\uff0c\u4f60\u53ef\u4ee5\u8fdb\u884c\u82e5\u5e72\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u6761\u76f4\u7ebf $ax+by+c=0$\uff0c\u4ea4\u4e92\u5e93\u4f1a\u8fd4\u56de\u8fd9 $n$ \u4e2a\u70b9\u5728\u8fd9\u6761\u76f4\u7ebf\u4e0a\u7684\u6295\u5f71\uff08\u4ee5\u4efb\u610f\u987a\u5e8f\uff09\uff0c\u4f60\u9700\u8981\u7528\u4e0d\u8d85\u8fc7 $M$ \u6b21\u8be2\u95ee\uff0c\u6c42\u51fa\u8fd9 $n$ \u4e2a\u70b9\u7684\u5750\u6807\uff0c\u5176\u4e2d $M$ \u8868\u793a\u80fd\u89e3\u51b3\u6240\u6709\u53ef\u80fd\u7684\u6709 $n$ \u4e2a\u9690\u85cf\u70b9\u7684\u95ee\u9898\u6240\u9700\u8981\u7684\u6700\u5c11\u8be2\u95ee\u6b21\u6570\u3002\n\n\u4fdd\u8bc1\u8fd9 $n$ \u4e2a\u70b9\u4e24\u4e24\u4e4b\u95f4\u6a2a\u5750\u6807\u4e4b\u5dee\u4e0e\u7eb5\u5750\u6807\u4e4b\u5dee\u5747\u4e0d\u5c0f\u4e8e $1$\uff0c\u800c\u4e14\u5750\u6807\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 $100$\u3002\u4ea4\u4e92\u5e93\u7ed9\u51fa\u7684\u6295\u5f71\u5750\u6807\u4e0e\u5b9e\u9645\u5750\u6807\u8bef\u5dee\u4e0d\u8d85\u8fc7 $10^{-4}$\uff0c\u5e76\u4e14\u5c0f\u6570\u70b9\u540e\u6700\u591a\u6709 $9$ \u4f4d\u3002\n\n\u4f60\u9700\u8981\u4fdd\u8bc1\u8be2\u95ee\u65f6\u7ed9\u51fa\u7684 $a, b, c$ \u6ee1\u8db3 $|a| + |b| \\geq 0.1$ \u4e14 $|a|, |b|, |c| \\leq 100$\uff0c\u6700\u540e\u7ed9\u51fa\u7684\u7b54\u6848\u4e0e\u5b9e\u9645\u7b54\u6848\u8bef\u5dee\u4e0d\u8d85\u8fc7 $10^{-3}$\u3002\n\n\u6709 $t(1 \\leq t \\leq 50)$ \u7ec4\u6d4b\u8bd5\u6570\u636e\u3002"
}