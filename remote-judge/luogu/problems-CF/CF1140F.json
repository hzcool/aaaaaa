{
    "description": "For a given set of two-dimensional points $ S $ , let's denote its extension $ E(S) $ as the result of the following algorithm:\n\nCreate another set of two-dimensional points $ R $ , which is initially equal to $ S $ . Then, while there exist four numbers $ x_1 $ , $ y_1 $ , $ x_2 $ and $ y_2 $ such that $ (x_1, y_1) \\in R $ , $ (x_1, y_2) \\in R $ , $ (x_2, y_1) \\in R $ and $ (x_2, y_2) \\notin R $ , add $ (x_2, y_2) $ to $ R $ . When it is impossible to find such four integers, let $ R $ be the result of the algorithm.\n\nNow for the problem itself. You are given a set of two-dimensional points $ S $ , which is initially empty. You have to process two types of queries: add some point to $ S $ , or remove some point from it. After each query you have to compute the size of $ E(S) $ .",
    "inputFormat": "The first line contains one integer $ q $ ( $ 1 \\le q \\le 3 \\cdot 10^5 $ ) \u2014 the number of queries.\n\nThen $ q $ lines follow, each containing two integers $ x_i $ , $ y_i $ ( $ 1 \\le x_i, y_i \\le 3 \\cdot 10^5 $ ), denoting $ i $ -th query as follows: if $ (x_i, y_i) \\in S $ , erase it from $ S $ , otherwise insert $ (x_i, y_i) $ into $ S $ .",
    "outputFormat": "Print $ q $ integers. $ i $ -th integer should be equal to the size of $ E(S) $ after processing first $ i $ queries.",
    "samples": [
        [
            "7\n1 1\n1 2\n2 1\n2 2\n1 2\n1 3\n2 1\n",
            "1 2 4 4 4 6 3 "
        ]
    ],
    "hint": "",
    "translation": "\u5b9a\u4e49\u4e00\u4e2a\u70b9\u96c6\u5408 $S=\\{(x_i,y_i)\\}(1\\leq i\\leq n)$ \u7684\u62d3\u5c55\u64cd\u4f5c\u4e3a\u5c06\u7b26\u5408\u4ee5\u4e0b\u6761\u4ef6\u7684 $(x_0,y_0)$ \u52a0\u5165 $S$\uff1a\n\n- \u5b58\u5728 $a,b$\uff0c\u4f7f\u5f97 $(a,b),(a,y_0),(x_0,b)\\in S$\u3002\n\n\u4e0d\u65ad\u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c\u76f4\u5230\u4e0d\u80fd\u64cd\u4f5c\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u96c6\u5408\u5373\u4e3a\u62d3\u5c55\u96c6\u5408\u3002\u73b0\u5728\u7ed9\u5b9a $q$ \u4e2a\u64cd\u4f5c\uff0c\u6bcf\u6b21\u52a0\u5165\u6216\u5220\u9664\u4e00\u4e2a\u70b9\uff0c\u91cd\u590d\u70b9\u5373\u4e3a\u5220\u9664\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u6bcf\u4e2a\u64cd\u4f5c\u4e4b\u540e\u7684\u62d3\u5c55\u96c6\u5408\u5927\u5c0f\uff08**\u4e0d\u7528\u771f\u7684\u62d3\u5c55\uff0c\u53ea\u6c42\u5927\u5c0f**\uff09\u3002"
}