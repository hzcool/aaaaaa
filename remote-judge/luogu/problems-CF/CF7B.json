{
    "description": "There is little time left before the release of the first national operating system BerlOS. Some of its components are not finished yet \u2014 the memory manager is among them. According to the developers' plan, in the first release the memory manager will be very simple and rectilinear. It will support three operations:\n\n- alloc n \u2014 to allocate $ n $ bytes of the memory and return the allocated block's identifier $ x $ ;\n- erase x \u2014 to erase the block with the identifier $ x $ ;\n- defragment \u2014 to defragment the free memory, bringing all the blocks as close to the beginning of the memory as possible and preserving their respective order;\n\nThe memory model in this case is very simple. It is a sequence of $ m $ bytes, numbered for convenience from the first to the $ m $ -th.\n\nThe first operation alloc n takes as the only parameter the size of the memory block that is to be allocated. While processing this operation, a free block of $ n $ successive bytes is being allocated in the memory. If the amount of such blocks is more than one, the block closest to the beginning of the memory (i.e. to the first byte) is prefered. All these bytes are marked as not free, and the memory manager returns a 32-bit integer numerical token that is the identifier of this block. If it is impossible to allocate a free block of this size, the function returns NULL.\n\nThe second operation erase x takes as its parameter the identifier of some block. This operation frees the system memory, marking the bytes of this block as free for further use. In the case when this identifier does not point to the previously allocated block, which has not been erased yet, the function returns ILLEGAL\\_ERASE\\_ARGUMENT.\n\nThe last operation defragment does not have any arguments and simply brings the occupied memory sections closer to the beginning of the memory without changing their respective order.\n\nIn the current implementation you are to use successive integers, starting with 1, as identifiers. Each successful alloc operation procession should return following number. Unsuccessful alloc operations do not affect numeration.\n\nYou are to write the implementation of the memory manager. You should output the returned value for each alloc command. You should also output ILLEGAL\\_ERASE\\_ARGUMENT for all the failed erase commands.",
    "inputFormat": "The first line of the input data contains two positive integers $ t $ and $ m $ ( $ 1<=t<=100;1<=m<=100 $ ), where $ t $ \u2014 the amount of operations given to the memory manager for processing, and $ m $ \u2014 the available memory size in bytes. Then there follow $ t $ lines where the operations themselves are given. The first operation is alloc n ( $ 1<=n<=100 $ ), where $ n $ is an integer. The second one is erase x, where $ x $ is an arbitrary 32-bit integer numerical token. The third operation is defragment.",
    "outputFormat": "Output the sequence of lines. Each line should contain either the result of alloc operation procession , or ILLEGAL\\_ERASE\\_ARGUMENT as a result of failed erase operation procession. Output lines should go in the same order in which the operations are processed. Successful procession of alloc operation should return integers, starting with 1, as the identifiers of the allocated blocks.",
    "samples": [
        [
            "6 10\nalloc 5\nalloc 3\nerase 1\nalloc 6\ndefragment\nalloc 6\n",
            "1\n2\nNULL\n3\n"
        ]
    ],
    "hint": "",
    "translation": "\n\u9898\u76ee\u63cf\u8ff0\n\n\u7b2c\u4e00\u4e2a\u56fd\u5bb6\u7ea7\u64cd\u4f5c\u7cfb\u7edf\u2014\u2014BerlOS\u5c31\u8981\u53d1\u5e03\u4e86\u3002\u4f46\u662f\uff0c\u5b83\u7684\u4e00\u4e9b\u529f\u80fd\u8fd8\u6ca1\u6709\u5b8c\u5584\uff0c\u6bd4\u5982\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf\u3002\u5728\u5f00\u53d1\u8005\u7684\u8ba1\u5212\u91cc\uff0c\u7b2c\u4e00\u7248\u91cc\u7684\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf\u662f\u7b80\u5355\u5e76\u4e14\u662f\u7ebf\u6027\u7684\u3002\u5b83\u5c06\u4f1a\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n    alloc n \u2014\u2014 \u5728\u5185\u5b58\u4e2d\u5206\u914dn\u5b57\u8282\u7684\u7a7a\u95f4\u3002\u6b64\u547d\u4ee4\u5c06\u8fd4\u56de\u5df2\u5206\u914d\u7684\u5185\u5b58\u5757\u7684\u7f16\u53f7x\u3002\n\n    erase x \u2014\u2014 \u91ca\u653e\u7f16\u53f7\u4e3ax\u7684\u5185\u5b58\u5757\u3002\n    defragment \u2014\u2014 \u788e\u7247\u6574\u7406\uff0c\u5c06\u6240\u6709\u5185\u5b58\u5757\u5168\u90e8\u5411\u5185\u5b58\u7684\u8d77\u70b9\u9760\u62e2\u5e76\u4e14\u4e0d\u6539\u53d8\u5b83\u4eec\u7684\u987a\u5e8f\u3002\n\n\u6574\u6761\u5185\u5b58\u4e00\u5171\u6709m\u4e2a\u5b57\u8282\uff0c\u6bcf\u4e2a\u5b57\u8282\u4f9d\u6b21\u7f16\u53f7\u4e3a1,2,...,m\u3002\n\n\u64cd\u4f5c alloc \u6709\u4e00\u4e2a\u53c2\u6570n\uff0c\u8868\u793a\u9700\u8981\u5206\u914dn\u5b57\u8282\u5927\u5c0f\u7684\u5185\u5b58\u5757\u3002\u5728\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u65f6\uff0c\u7cfb\u7edf\u5c06\u628a\u4e00\u5757\u6700\u9760\u8fd1\u5185\u5b58\u8d77\u70b9\u7684\uff0c\u957f\u5ea6\u4e3an\u7684\u8fde\u7eed\u7a7a\u95f2\u5b57\u8282\u5206\u914d\u5230\u4e00\u4e2a\u5185\u5b58\u5757\uff08\u8fd9\u5757\u5185\u5b58\u5757\u5185\u7684\u6240\u6709\u5b57\u8282\u5c06\u88ab\u6807\u8bb0\u4e3a\u201c\u5df2\u4f7f\u7528\u201d\uff09\u3002\u8fd9\u4e2a\u64cd\u4f5c\u7684\u8fd4\u56de\u503c\u4e3a\u8fd9\u5757\u5185\u5b58\u5757\u7684\u7f16\u53f7\u3002\u5982\u679c\u6ca1\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5185\u5b58\u5757\uff0c\u8fd4\u56de NULL \u3002\n\n\u64cd\u4f5c erase \u6709\u4e00\u4e2a\u53c2\u6570x\uff0c\u8868\u793a\u9700\u8981\u91ca\u653e\u7684\u5185\u5b58\u5757\u7684\u7f16\u53f7\u3002\u5b83\u5c06\u91ca\u653e\u8fd9\u4e2a\u5185\u5b58\u5757\uff08\u8fd9\u5757\u5185\u5b58\u5757\u5185\u7684\u6240\u6709\u5b57\u8282\u5c06\u88ab\u6807\u8bb0\u4e3a\u201c\u7a7a\u95f2\u201d\uff09\u3002\u5982\u679c\u6210\u529f\u91ca\u653e\uff0c\u4e0d\u8fd4\u56de\u503c\uff1b\u5982\u679c\u7f16\u53f7\u4e3ax\u7684\u5185\u5b58\u5757\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de ILLEGAL\\_ERASE\\_ARGUMENT \u3002\n\n\u64cd\u4f5c deflagment \u6ca1\u6709\u4efb\u4f55\u53c2\u6570\u3002\u5b83\u53ea\u662f\u5c06\u6240\u6709\u5185\u5b58\u5757\u5411\u524d\u4f9d\u6b21\uff08\u7f16\u53f7\u5c0f\u7684\u5730\u65b9\uff09\u632a\u52a8\u76f4\u5230\u5b83\u4eec\u7d27\u6328\u5728\u4e00\u8d77\u3002\uff08\u4e0d\u6539\u53d8\u5b83\u4eec\u7684\u987a\u5e8f\uff09\n\n\u4f60\u5c06\u7528\u8fde\u7eed\u7684\u6b63\u6574\u6570\uff081,2,...\uff09\u4f5c\u4e3a\u6bcf\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u7f16\u53f7\u3002\u6bd4\u5982\uff0c\u7b2ci\u6b21\u5206\u914d\u7684\u5185\u5b58\u5757\u7f16\u53f7\u4e3ai\u3002\u4f60\u7684\u4efb\u52a1\u662f\u4f9d\u6b21\u8f93\u51fa\u6240\u6709 alloc \u6307\u4ee4\u7684\u8fd4\u56de\u503c\uff0c\u4ee5\u53ca\u6240\u6709\u6267\u884c\u5931\u8d25\u7684 erase \u6307\u4ee4\u7684\u8fd4\u56de\u503c\u3002\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\n\n\u8f93\u5165\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6b63\u6574\u6570 t \u548c m \u3002 t \u8868\u793a\u64cd\u4f5c\u6b21\u6570\uff0c m \u8868\u793a\u5185\u5b58\u5927\u5c0f\uff08\u4e3am\u5b57\u8282\uff09\u3002\u63a5\u4e0b\u6765\u7684t\u884c\u4e3a\u6bcf\u4e00\u6b21\u7684\u547d\u4ee4\u3002\u547d\u4ee4\u6709\u4ee5\u4e0b\u4e09\u79cd\uff1aalloc \u547d\u4ee4\uff0c\u540e\u63a5\u4e00\u4e2a\u6574\u6570 n \uff1b erase \u547d\u4ee4\uff0c\u540e\u63a5\u4e00\u4e2a\u6574\u6570 x \uff1b defragment \u547d\u4ee4\u3002\n\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u51fa\u6587\u4ef6\u7684\u6bcf\u4e00\u884c\u4f9d\u6b21\u4e3a\u6bcf\u6b21\u6267\u884c\u7684 alloc \u51fd\u6570\u7684\u8fd4\u56de\u503c\u6216\u6267\u884c\u5931\u8d25\u7684 erase \u51fd\u6570\u8fd4\u56de\u7684 ILLEGAL\\_ERASE\\_ARGUMENT \u3002\n\ntranslated by \u661f\u70c1\u6676\u71a0\u8f89\n"
}