{
    "description": "This is an interactive problem.\n\nAfter getting AC after 13 Time Limit Exceeded verdicts on a geometry problem, Kuroni went to an Italian restaurant to celebrate this holy achievement. Unfortunately, the excess sauce disoriented him, and he's now lost!\n\nThe United States of America can be modeled as a tree (why though) with $ n $ vertices. The tree is rooted at vertex $ r $ , wherein lies Kuroni's hotel.\n\nKuroni has a phone app designed to help him in such emergency cases. To use the app, he has to input two vertices $ u $ and $ v $ , and it'll return a vertex $ w $ , which is the lowest common ancestor of those two vertices.\n\nHowever, since the phone's battery has been almost drained out from live-streaming Kuroni's celebration party, he could only use the app at most $ \\lfloor \\frac{n}{2} \\rfloor $ times. After that, the phone would die and there will be nothing left to help our dear friend! :(\n\nAs the night is cold and dark, Kuroni needs to get back, so that he can reunite with his comfy bed and pillow(s). Can you help him figure out his hotel's location?",
    "inputFormat": "",
    "outputFormat": "The interaction starts with reading a single integer $ n $ ( $ 2 \\le n \\le 1000 $ ), the number of vertices of the tree.\n\nThen you will read $ n-1 $ lines, the $ i $ -th of them has two integers $ x_i $ and $ y_i $ ( $ 1 \\le x_i, y_i \\le n $ , $ x_i \\ne y_i $ ), denoting there is an edge connecting vertices $ x_i $ and $ y_i $ . It is guaranteed that the edges will form a tree.\n\nThen you can make queries of type \"? u v\" ( $ 1 \\le u, v \\le n $ ) to find the lowest common ancestor of vertex $ u $ and $ v $ .\n\nAfter the query, read the result $ w $ as an integer.\n\nIn case your query is invalid or you asked more than $ \\lfloor \\frac{n}{2} \\rfloor $ queries, the program will print $ -1 $ and will finish interaction. You will receive a Wrong answer verdict. Make sure to exit immediately to avoid getting other verdicts.\n\nWhen you find out the vertex $ r $ , print \"! $ r $ \" and quit after that. This query does not count towards the $ \\lfloor \\frac{n}{2} \\rfloor $ limit.\n\nNote that the tree is fixed beforehand and will not change during the queries, i.e. the interactor is not adaptive.\n\nAfter printing any query do not forget to print end of line and flush the output. Otherwise, you might get Idleness limit exceeded. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see the documentation for other languages.\n\nHacks\n\nTo hack, use the following format:\n\nThe first line should contain two integers $ n $ and $ r $ ( $ 2 \\le n \\le 1000 $ , $ 1 \\le r \\le n $ ), denoting the number of vertices and the vertex with Kuroni's hotel.\n\nThe $ i $ -th of the next $ n-1 $ lines should contain two integers $ x_i $ and $ y_i $ ( $ 1 \\le x_i, y_i \\le n $ ) \u2014 denoting there is an edge connecting vertex $ x_i $ and $ y_i $ .\n\nThe edges presented should form a tree.",
    "samples": [
        [
            "6\n1 4\n4 2\n5 3\n6 3\n2 3\n\n3\n\n4\n\n4",
            "? 5 6\n\n? 3 1\n\n? 1 2\n\n! 4"
        ]
    ],
    "hint": "Note that the example interaction contains extra empty lines so that it's easier to read. The real interaction doesn't contain any empty lines and you shouldn't print any extra empty lines as well.\n\nThe image below demonstrates the tree in the sample test:\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1305D/3f777a34971aedf6bf2be87025826d252775cf29.png)",
    "translation": "\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\n\n\u7ed9\u4f60\u4e00\u68f5\u6709 $n$ \u4e2a\u8282\u70b9\u7684\u6811\u3002\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u63d0\u4ea4\u4e24\u4e2a\u70b9\uff0c\u8bc4\u6d4b\u673a\u4f1a\u8fd4\u56de\u8fd9\u4e24\u4e2a\u70b9\u7684 LCA\u3002\u6c42\u6811\u6839\u3002\n\n\u8be2\u95ee\u683c\u5f0f\u4e3a ``? u v``\uff0c\u6b64\u65f6\u8bc4\u6d4b\u673a\u4f1a\u8fd4\u56de $u$ \u548c $v$ \u7684 LCA\u3002\n\n\u63d0\u4ea4\u683c\u5f0f\u4e3a ``! x``\uff0c\u8868\u793a\u4f60\u5f97\u51fa\u6811\u6839\u4e3a\u70b9 $x$\u3002\n\n\u4f60\u53ef\u4ee5\u6700\u591a\u8be2\u95ee $\\lfloor \\dfrac n 2 \\rfloor$ \u6b21\u3002"
}