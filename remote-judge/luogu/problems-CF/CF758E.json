{
    "description": "You are given a tree that has $ n $ vertices, which are numbered from $ 1 $ to $ n $ , where the vertex number one is the root. Each edge has weight $ w_{i} $ and strength $ p_{i} $ .\n\nBotanist Innokentiy, who is the only member of the jury of the Olympiad in Informatics, doesn't like broken trees.\n\nThe tree is broken if there is such an edge the strength of which is less than the sum of weight of subtree's edges to which it leads.\n\nIt is allowed to reduce weight of any edge by arbitrary integer value, but then the strength of its edge is reduced by the same value. It means if the weight of the edge is $ 10 $ , and the strength is $ 12 $ , then by the reducing the weight by $ 7 $ its weight will equal $ 3 $ , and the strength will equal $ 5 $ .\n\nIt is not allowed to increase the weight of the edge.\n\nYour task is to get the tree, which is not broken, by reducing the weight of edges of the given tree, and also all edged should have the positive weight, moreover, the total weight of all edges should be as large as possible.\n\nIt is obvious that the strength of edges can not be negative, however it can equal zero if the weight of the subtree equals zero.",
    "inputFormat": "The first line contains the integer $ n $ ( $ 1<=n<=2\u00b710^{5} $ ) \u2014 the number of vertices in the tree. The next $ n-1 $ lines contains the description of edges. Each line contains four integers $ x $ , $ y $ , $ w $ , $ p $ ( $ 1<=x,y<=n,1<=w<=10^{9},0<=p<=10^{9} $ ), where $ x $ and $ y $ \u2014 vertices which connect the edge (the vertex number $ x $ is the parent of the vertex number $ y $ ), $ w $ and $ p $ are the weight and the strength of the edge, accordingly. It is guaranteed that the edges describe the tree with the root in the vertex $ 1 $ .",
    "outputFormat": "If it is impossible to get unbroken tree from the given tree, print -1 in the only line.\n\nOtherwise, the output data should contain $ n $ lines:\n\nIn the first line print the number $ n $ \u2014 the number of vertices on the tree.\n\nIn the next $ n-1 $ lines print the description of edges of the resulting tree. Each line should contain four integers $ x $ , $ y $ , $ w $ , $ p $ ( $ 1<=x,y<=n,1<=w<=10^{9},0<=p<=10^{9} $ ), where $ x $ and $ y $ \u2014 vertices, which the edge connects (the vertex number $ x $ is the parent of the vertex number $ y $ ), $ w $ and $ p $ are the new weight and the strength of the edge, accordingly.\n\nPrint edges in the same order as they are given in input data: the first two integers of each line should not be changed.",
    "samples": [
        [
            "3\n1 3 5 7\n3 2 4 3\n",
            "3\n1 3 5 7\n3 2 4 3\n"
        ],
        [
            "4\n1 3 2 3\n3 4 5 1\n3 2 3 3\n",
            "-1"
        ],
        [
            "5\n1 2 2 4\n2 4 1 9\n4 5 5 6\n4 3 4 8\n",
            "5\n1 2 2 4\n2 4 1 9\n4 5 1 2\n4 3 2 6\n"
        ],
        [
            "7\n1 2 5 2\n2 3 4 3\n1 4 3 7\n4 5 4 1\n4 6 3 2\n6 7 1 6\n",
            "7\n1 2 5 2\n2 3 2 1\n1 4 3 7\n4 5 3 0\n4 6 3 2\n6 7 1 6\n"
        ]
    ],
    "hint": "",
    "translation": "\u9898\u9762\uff1a\n\n\u7ed9\u5b9a\u4e00\u68f5\u6709n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u5176\u4e2d\u4e00\u53f7\u70b9\u662f\u6839\u3002\u6bcf\u6761\u8fb9\u6709\u91cd\u91cf\u548c\u5f3a\u5ea6\u3002\u5982\u679c\u4e00\u6761\u8fb9\u7684\u5f3a\u5ea6\u5c0f\u4e8e\u8fd9\u6761\u8fb9\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u7684\u5b50\u6811\u5185\u6240\u6709\u8fb9\u91cd\u91cf\u548c\uff0c\u5219\u8fd9\u6761\u8fb9\u4f1a\u65ad\u88c2\u3002\u4f60\u53ef\u4ee5\u964d\u4f4e\u4e00\u4e9b\u8fb9\u7684\u91cd\u91cf\uff0c\u4e14\u88ab\u964d\u4f4e\u91cd\u91cf\u7684\u8fb9\u4f1a\u635f\u5931\u7b49\u91cf\u7684\u5f3a\u5ea6\u3002\u6bcf\u6761\u8fb9\u7684\u6700\u7ec8\u91cd\u91cf\u5fc5\u987b\u4e3a\u6b63\u6574\u6570\uff0c\u5f3a\u5ea6\u5fc5\u987b\u4e3a\u975e\u8d1f\u6574\u6570\u3002\u8be2\u95ee\u81f3\u5c11\u8981\u964d\u4f4e\u591a\u5c11\u91cd\u91cf\uff0c\u6216\u8005\u8f93\u51fa-1\u8868\u793a\u8fd9\u68f5\u6811\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u65ad\u88c2\u3002\u672c\u9898\u914d\u6709SPJ\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6570n\u8868\u793a\u8282\u70b9\u6570\u91cf\n\u63a5\u4e0b\u6765n-1\u884c\u6bcf\u884c\u56db\u4e2a\u6570x,y,w,p\u8868\u793ax\u662fy\u7684\u7236\u4eb2\u8282\u70b9;\u8fd9\u6761\u8fb9\u7684\u91cd\u91cfw\u4ee5\u53ca\u5f3a\u5ea6p\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u5982\u679c\u4e0d\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6811\u5219\u8f93\u51fa-1\n\u5426\u5219\u7b2c\u4e00\u884c\u8f93\u51fa\u4e00\u4e2a\u6570n\u8868\u793a\u8282\u70b9\u6570\u91cf\n\u63a5\u4e0b\u6765n-1\u884c\u6bcf\u884c\u56db\u4e2a\u6570\uff0c\u683c\u5f0f\u540c\u8f93\u5165\u683c\u5f0f\uff0c\u8868\u793a\u6700\u7ec8\u6811\u7684\u5f62\u6001\n\u8f93\u51fa\u7684\u6811\u5fc5\u987b\u4fdd\u8bc1\u964d\u4f4e\u7684\u91cd\u91cf\u548c\u6700\u5c0f\u4e14\u6ca1\u6709\u8fb9\u4f1a\u65ad\u88c2\n\n\n\u7531 @\u6d41\u98ce\u4e4b\u56de\u96ea \u63d0\u4f9b\u7ffb\u8bd1"
}