{
    "description": "You generate real numbers $ s_{1},s_{2},...,s_{n} $ as follows:\n\n- $ s_{0}=0 $ ;\n- $ s_{i}=s_{i-1}+t_{i} $ , where $ t_{i} $ is a real number chosen independently uniformly at random between 0 and 1, inclusive.\n\nYou are given real numbers $ x_{1},x_{2},...,x_{n} $ . You are interested in the probability that $ s_{i}<=x_{i} $ is true for all $ i $ simultaneously.\n\nIt can be shown that this can be represented as ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF913H/2c40be71c60fe708ee9e4e80e2cd7a26163f3bd6.png), where $ P $ and $ Q $ are coprime integers, and ![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF913H/660186d645b69bba4bba5848de2ac09458cd0b37.png). Print the value of $ P\u00b7Q^{-1} $ modulo $ 998244353 $ .",
    "inputFormat": "The first line contains integer $ n $ ( $ 1<=n<=30 $ ).\n\nThe next $ n $ lines contain real numbers $ x_{1},x_{2},...,x_{n} $ , given with at most six digits after the decimal point ( $ 0&lt;x_{i}<=n $ ).",
    "outputFormat": "Print a single integer, the answer to the problem.",
    "samples": [
        [
            "4\n1.00\n2\n3.000000\n4.0\n",
            "1\n"
        ],
        [
            "1\n0.50216\n",
            "342677322\n"
        ],
        [
            "2\n0.5\n1.0\n",
            "623902721\n"
        ],
        [
            "6\n0.77\n1.234567\n2.1\n1.890\n2.9999\n3.77\n",
            "859831967\n"
        ]
    ],
    "hint": "In the first example, the sought probability is 1 since the sum of $ i $ real numbers which don't exceed 1 doesn't exceed $ i $ .\n\nIn the second example, the probability is $ x_{1} $ itself.\n\nIn the third example, the sought probability is $ 3/8 $ .",
    "translation": "# \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u5b9a\u5b9e\u6570s1\uff0cs2\uff0c.....sn\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\uff1a\n\n- s0=0\uff1b\n\n- si=si\u22121+ti\uff0c\u5176\u4e2dti\u662f\u57280~1\u4e4b\u95f4\u968f\u673a\u4e00\u81f4\u9009\u62e9\u7684\u5b9e\u6570\u3002\n\n\u7ed9\u5b9a\u5b9e\u6570x1\uff0cx2\uff0c.....xn.\n\u4f60\u9700\u8981\u627e\u51fa\u6240\u6709\u7b26\u5408\u6761\u4ef6Si<=xi\u7684i\u503c\u3002\n\n\u5b83\u53ef\u4ee5\u8868\u793a\u4e3a![](https://cdn.luogu.org/upload/vjudge_pic/CF913H/2c40be71c60fe708ee9e4e80e2cd7a26163f3bd6.png)\uff0c\u5176\u4e2dP,Q\u4e92\u8d28\uff1b\u5e76\u4e14![](https://cdn.luogu.org/upload/vjudge_pic/CF913H/660186d645b69bba4bba5848de2ac09458cd0b37.png)\u3002\u8f93\u51fa P\u00b7Q^{-1}\u6a21998244353\u7684\u503c\u3002 \n\n# \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570n(1<=n<=30).\n\n\u63a5\u4e0b\u6765n\u884c\u5305\u542b\u5b9e\u6570x1\uff0cx2\uff0c.....xn.\u4fdd\u75596\u4f4d\u5c0f\u6570(0\u2009<\u2009xi\u2009\u2264\u2009n)\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u8f93\u51fa\u4e00\u4e2a\u6ee1\u8db3\u9898\u610f\u7684\u89e3\u3002\n\n# \u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n## \u8f93\u5165\u6837\u4f8b#1\uff1a \n 4\n\n1.00\n\n2\n\n3.000000\n\n4.0\n\n## \u8f93\u51fa\u6837\u4f8b#1\uff1a \n1\n\n## \u8f93\u5165\u6837\u4f8b#2\uff1a \n1\n0.50216\n\n## \u8f93\u51fa\u6837\u4f8b#2\uff1a \n342677322\n\n## \u8f93\u5165\u6837\u4f8b#3\uff1a \n2\n\n0.5\n\n1.0\n\n## \u8f93\u51fa\u6837\u4f8b#3\uff1a \n623902721\n\n## \u8f93\u5165\u6837\u4f8b#4\uff1a \n6\n\n0.77\n\n1.234567\n\n2.1\n\n1.890\n\n2.9999\n\n3.77\n\n## \u8f93\u51fa\u6837\u4f8b#4\uff1a\n859831967\n\n# \u8bf4\u660e\n\u5728\u8f93\u5165\u6837\u4f8b#1\u4e2d\uff0c\u6240\u6c42\u7684\u53ef\u4ee5\u662f1\uff0c\u56e0\u4e3a\u4e0d\u8d85\u8fc71\u7684i\u5b9e\u6570\u4e4b\u548c\u4e0d\u4f1a\u8d85\u8fc7i\u3002\n\n\u5728\u8f93\u5165\u6837\u4f8b#2\u4e2d\uff0c\u53ef\u80fd\u662fx1\u672c\u8eab\u3002\n\n\u5728\u8f93\u5165\u6837\u4f8b#3\u4e2d\uff0c\u6240\u6c42\u7684\u53ef\u4ee5\u662f 3/8\u3002"
}