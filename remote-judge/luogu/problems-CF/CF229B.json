{
    "description": "Goa'uld Apophis captured Jack O'Neill's team again! Jack himself was able to escape, but by that time Apophis's ship had already jumped to hyperspace. But Jack knows on what planet will Apophis land. In order to save his friends, Jack must repeatedly go through stargates to get to this planet.\n\nOverall the galaxy has $ n $ planets, indexed with numbers from 1 to $ n $ . Jack is on the planet with index 1, and Apophis will land on the planet with index $ n $ . Jack can move between some pairs of planets through stargates (he can move in both directions); the transfer takes a positive, and, perhaps, for different pairs of planets unequal number of seconds. Jack begins his journey at time 0.\n\nIt can be that other travellers are arriving to the planet where Jack is currently located. In this case, Jack has to wait for exactly 1 second before he can use the stargate. That is, if at time $ t $ another traveller arrives to the planet, Jack can only pass through the stargate at time $ t+1 $ , unless there are more travellers arriving at time $ t+1 $ to the same planet.\n\nKnowing the information about travel times between the planets, and the times when Jack would not be able to use the stargate on particular planets, determine the minimum time in which he can get to the planet with index $ n $ .",
    "inputFormat": "The first line contains two space-separated integers: $ n $ ( $ 2<=n<=10^{5} $ ), the number of planets in the galaxy, and $ m $ ( $ 0<=m<=10^{5} $ ) \u2014 the number of pairs of planets between which Jack can travel using stargates. Then $ m $ lines follow, containing three integers each: the $ i $ -th line contains numbers of planets $ a_{i} $ and $ b_{i} $ ( $ 1<=a_{i},b_{i}<=n $ , $ a_{i}\u2260b_{i} $ ), which are connected through stargates, and the integer transfer time (in seconds) $ c_{i} $ ( $ 1<=c_{i}<=10^{4} $ ) between these planets. It is guaranteed that between any pair of planets there is at most one stargate connection.\n\nThen $ n $ lines follow: the $ i $ -th line contains an integer $ k_{i} $ ( $ 0<=k_{i}<=10^{5} $ ) that denotes the number of moments of time when other travellers arrive to the planet with index $ i $ . Then $ k_{i} $ distinct space-separated integers $ t_{ij} $ ( $ 0<=t_{ij}&lt;10^{9} $ ) follow, sorted in ascending order. An integer $ t_{ij} $ means that at time $ t_{ij} $ (in seconds) another traveller arrives to the planet $ i $ . It is guaranteed that the sum of all $ k_{i} $ does not exceed $ 10^{5} $ .",
    "outputFormat": "Print a single number \u2014 the least amount of time Jack needs to get from planet 1 to planet $ n $ . If Jack can't get to planet $ n $ in any amount of time, print number -1.",
    "samples": [
        [
            "4 6\n1 2 2\n1 3 3\n1 4 8\n2 3 4\n2 4 5\n3 4 3\n0\n1 3\n2 3 4\n0\n",
            "7\n"
        ],
        [
            "3 1\n1 2 3\n0\n1 3\n0\n",
            "-1\n"
        ]
    ],
    "hint": "In the first sample Jack has three ways to go from planet 1. If he moves to planet 4 at once, he spends 8 seconds. If he transfers to planet 3, he spends 3 seconds, but as other travellers arrive to planet 3 at time 3 and 4, he can travel to planet 4 only at time 5, thus spending 8 seconds in total. But if Jack moves to planet 2, and then \u2014 to planet 4, then he spends a total of only $ 2+5=7 $ seconds.\n\nIn the second sample one can't get from planet 1 to planet 3 by moving through stargates.",
    "translation": "## \u9898\u9762\n\u5728\u5b87\u5b99\u91cc\u6709 $n$  \u4e2a\u661f\u7403\uff0c\u5206\u522b\u7f16\u53f7\u4e3a $1,2,...,n$  \u3002Jack\u73b0\u5728\u5728 $1$  \u53f7\u661f\u7403\u4e0a\uff0c\u4ed6\u8981\u53bb $n$  \u53f7\u661f\u7403\u3002\u5df2\u77e5\u4e00\u4e9b\u661f\u7403\u4e4b\u95f4\u6709\u53cc\u5411\u7684\u4f20\u9001\u901a\u9053\uff0cJack\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u4f20\u9001\u901a\u9053\u79fb\u52a8\u3002\u6bcf\u6b21\u4f20\u9001\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff0c\u5728\u4e0d\u540c\u7684\u661f\u7403\u4e4b\u95f4\u4f20\u9001\u4e5f\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u65f6\u95f4\u3002\n\n\u5f53\u6709\u5176\u4ed6\u4eba\u5728\u4f7f\u7528\u8fd9\u4e2a\u661f\u7403\u7684\u4f20\u9001\u901a\u9053\u65f6\uff0cJack\u65e0\u6cd5\u79bb\u5f00\u8fd9\u4e2a\u661f\u7403\u3002\u6bd4\u5982\uff0c\u5982\u679c\u6709\u4eba\u5728 $t$  \u65f6\u523b\u4f7f\u7528\u901a\u9053\uff0c\u90a3Jack\u53ea\u80fd\u5728 $t+1$  \u65f6\u523b\u79bb\u5f00\uff08\u5982\u679ct+1\u65f6\u523b\u6ca1\u6709\u4eba\u5728\u4f7f\u7528\u901a\u9053\uff09\u3002\n\n\u73b0\u5728\uff0cJack\u60f3\u8bf7\u4f60\u8ba1\u7b97\u4ed6\u6700\u65e9\u53ef\u4ee5\u5728\u54ea\u4e2a\u65f6\u523b\u5230\u8fbe $n$  \u53f7\u661f\u7403\u3002Jack\u57280\u65f6\u523b\u51fa\u53d1\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n### \u8f93\u5165\u683c\u5f0f\n\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u7531\u7a7a\u683c\u5206\u5272\u7684\u6574\u6570\uff0c\u661f\u7403\u6570 $n$  ( $2\u2264n\u226410^5$  )\u548c\u4f20\u9001\u901a\u9053\u6570 $m$  ( $0\u2264m\u226410^5$  )\u3002\n\n\u63a5\u4e0b\u6765\u7684 $m$  \u884c\uff0c\u6bcf\u884c\u5305\u62ec\u4e863\u4e2a\u6574\u6570 $a$  , $b$  \u548c $c$  ( $1\u2264a,b\u2264n, a\u2260b, 1\u2264c\u226410^4$  )\uff0c\u8868\u793a\u661f\u7403 $a$  \u4e0e\u661f\u7403 $b$  \u4e4b\u95f4\u6709\u4e00\u6761\u8017\u65f6\u4e3a $c$  \u7684\u4f20\u9001\u901a\u9053\u3002\n\n\u63a5\u4e0b\u6765\u7684 $n$  \u884c\uff0c\u7b2c $i$  \u884c\u8868\u793a\u7b2c $i$  \u4e2a\u661f\u7403\u7684\u4f20\u9001\u901a\u9053\u7684\u4f7f\u7528\u60c5\u51b5\u3002\u6bcf\u884c\u9996\u5148\u662f\u4e00\u4e2a\u6574\u6570 $k_i$  \uff0c\u8868\u793a\u4e00\u5171\u6709 $k_i$  \u4e2a\u65f6\u523b\u8fd9\u4e2a\u661f\u7403\u7684\u4f20\u9001\u901a\u9053\u5728\u88ab\u4f7f\u7528\uff0c\u63a5\u4e0b\u6765 $k_i$  \u4e2a\u6574\u6570 $t_{ij}$  ( $0\u2264t_{ij}\u226410^9$  )\u8868\u793a\u5728 $t_{ij}$  \u65f6\u523b $i$  \u661f\u7403\u7684\u4f20\u9001\u901a\u9053\u6b63\u88ab\u4ed6\u4eba\u4f7f\u7528\u3002\u6240\u6709 $k_i$  \u7684\u548c\u4e0d\u8d85\u8fc7 $10^5$  \u3002 $t_{ij}$ \u6309\u7167\u5347\u5e8f\u6392\u5217\n\n## \u8f93\u51fa\u683c\u5f0f\n\u8f93\u51fa\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793aJack\u53ef\u4ee5\u6700\u65e9\u5728\u54ea\u4e2a\u65f6\u523b\u5230\u8fbe $n$  \u53f7\u661f\u7403\u3002\u5982\u679c\u4ed6\u65e0\u6cd5\u901a\u8fc7\u8fd9\u4e9b\u4f20\u9001\u901a\u9053\u5230\u8fbe\uff0c\u8f93\u51fa -1 \u3002\n\n## \u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\u7565\n\n## \u6837\u4f8b\u89e3\u91ca\n\u5bf9\u4e8e\u6837\u4f8b1\uff0cJack\u67093\u79cd\u65b9\u6848\uff1a\n1. \u76f4\u63a5\u4ece1->4\uff0c\u5728\u65f6\u523b8\u5230\u8fbe\u661f\u74034\u3002\n2. \u5148\u4ece1->3\uff0c\u5728\u65f6\u523b3\u5230\u8fbe\uff0c\u4f46\u662f\u6b64\u65f6\uff08\u65f6\u523b3\u548c\u65f6\u523b4\uff09\u6709\u5176\u4ed6\u4eba\u5728\u4f7f\u7528\u901a\u9053\uff0c\u4ed6\u53ea\u80fd\u5728\u65f6\u523b5\u51fa\u53d1\uff0c\u5728\u65f6\u523b8\u5230\u8fbe\u661f\u74034\u3002\n3. \u5148\u4ece1->2\uff0c\u5728\u65f6\u523b2\u5230\u8fbe\uff0c\u518d\u4ece2->4\uff0c\u5728\u65f6\u523b7\u5230\u8fbe\u3002\n\u6240\u4ee5\u4ed6\u6700\u65e9\u53ef\u4ee5\u5728\u65f6\u523b7\u5230\u8fbe\u3002\n\n\u5bf9\u4e8e\u6837\u4f8b2\uff0cJack\u4e0d\u80fd\u901a\u8fc7\u4f20\u9001\u4ece\u661f\u74031\u524d\u5f80\u661f\u74033\u3002\n\n\u611f\u8c22@\u661f\u70c1\u6676\u71a0\u8f89 \u63d0\u4f9b\u7684\u7ffb\u8bd1\u548c@Styx \u63d0\u4f9b\u7684\u5efa\u8bae"
}