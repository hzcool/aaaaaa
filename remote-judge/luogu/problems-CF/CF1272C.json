{
    "description": "Recently, Norge found a string $ s = s_1 s_2 \\ldots s_n $ consisting of $ n $ lowercase Latin letters. As an exercise to improve his typing speed, he decided to type all substrings of the string $ s $ . Yes, all $ \\frac{n (n + 1)}{2} $ of them!\n\nA substring of $ s $ is a non-empty string $ x = s[a \\ldots b] = s_{a} s_{a + 1} \\ldots s_{b} $ ( $ 1 \\leq a \\leq b \\leq n $ ). For example, \"auto\" and \"ton\" are substrings of \"automaton\".\n\nShortly after the start of the exercise, Norge realized that his keyboard was broken, namely, he could use only $ k $ Latin letters $ c_1, c_2, \\ldots, c_k $ out of $ 26 $ .\n\nAfter that, Norge became interested in how many substrings of the string $ s $ he could still type using his broken keyboard. Help him to find this number.",
    "inputFormat": "The first line contains two space-separated integers $ n $ and $ k $ ( $ 1 \\leq n \\leq 2 \\cdot 10^5 $ , $ 1 \\leq k \\leq 26 $ ) \u2014 the length of the string $ s $ and the number of Latin letters still available on the keyboard.\n\nThe second line contains the string $ s $ consisting of exactly $ n $ lowercase Latin letters.\n\nThe third line contains $ k $ space-separated distinct lowercase Latin letters $ c_1, c_2, \\ldots, c_k $ \u2014 the letters still available on the keyboard.",
    "outputFormat": "Print a single number \u2014 the number of substrings of $ s $ that can be typed using only available letters $ c_1, c_2, \\ldots, c_k $ .",
    "samples": [
        [
            "7 2\nabacaba\na b\n",
            "12\n"
        ],
        [
            "10 3\nsadfaasdda\nf a d\n",
            "21\n"
        ],
        [
            "7 1\naaaaaaa\nb\n",
            "0\n"
        ]
    ],
    "hint": "In the first example Norge can print substrings $ s[1\\ldots2] $ , $ s[2\\ldots3] $ , $ s[1\\ldots3] $ , $ s[1\\ldots1] $ , $ s[2\\ldots2] $ , $ s[3\\ldots3] $ , $ s[5\\ldots6] $ , $ s[6\\ldots7] $ , $ s[5\\ldots7] $ , $ s[5\\ldots5] $ , $ s[6\\ldots6] $ , $ s[7\\ldots7] $ .",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\r\n\r\n$Norge$\uff0c\u627e\u5230\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5b57\u7b26\u4e32$s$\uff08$s$\u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u6784\u6210\uff09\uff0c\u4ed6\u60f3\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709$\\frac{n(n+1)}{2}$\u4e2a\u8fde\u7eed\u975e\u7a7a\u5b50\u4e32\u90fd\u6253\u51fa\u6765\r\n\r\n\u53ef\u662f\uff0c\u4ed6\u53d1\u73b0\u4ed6\u7684\u952e\u76d8\u574f\u4e86\uff0c\u53ea\u80fd\u6253\u51fa26\u5b57\u6bcd\u4e2d\u7684$k$\u4e2a  \r\n\u8fd9$k$\u4e2a\u5b57\u6bcd\u5206\u522b\u4e3a\uff1a$c_1,c_2,c_3,\\dots ,c_k$\r\n\r\n\u8bf7\u6c42\u51fa\u7528\u8fd9\u4e2a\u574f\u6389\u7684\u952e\u76d8\uff0c\u6700\u591a\u80fd\u6253\u51fa\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32$s$\u7684\u8fde\u7eed\u975e\u7a7a\u5b50\u4e32\r\n\r\n## \u8f93\u5165\u683c\u5f0f\r\n\r\n\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 $n,k$ \uff0c\u8868\u793a\u5b57\u7b26\u4e32$s$\u7684\u957f\u5ea6\uff0c\u548c\u80fd\u7528\u5b57\u6bcd\u7684\u6570\u91cf  \r\n\u7b2c\u4e8c\u884c\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u5b57\u7b26\u4e32$s$  \r\n\u7b2c\u4e09\u884c\uff0c$k$\u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u5b57\u6bcd\uff0c\u8868\u793a\u952e\u76d8\u4e0a\u6ca1\u6709\u574f\u6389\u7684\u5b57\u6bcd\r\n\r\n## \u8f93\u51fa\u683c\u5f0f\r\n\r\n\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7528\u8fd9\u4e2a\u574f\u6389\u7684\u952e\u76d8\uff0c\u6700\u591a\u80fd\u6253\u51fa\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32$s$\u7684\u8fde\u7eed\u975e\u7a7a\u5b50\u4e32\r\n\r\n### \u6570\u636e\u8303\u56f4\r\n\r\n$1\\leq n \\le 2\\cdot 10^5$\uff0c$1\\leq k \\le 26$  \r\n\u611f\u8c22 @_Wolverine \u63d0\u4f9b\u7684\u7ffb\u8bd1"
}