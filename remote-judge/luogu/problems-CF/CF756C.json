{
    "description": "Nikita has a stack. A stack in this problem is a data structure that supports two operations. Operation push(x) puts an integer $ x $ on the top of the stack, and operation pop() deletes the top integer from the stack, i. e. the last added. If the stack is empty, then the operation pop() does nothing.\n\nNikita made $ m $ operations with the stack but forgot them. Now Nikita wants to remember them. He remembers them one by one, on the $ i $ -th step he remembers an operation he made $ p_{i} $ -th. In other words, he remembers the operations in order of some permutation $ p_{1},p_{2},...,p_{m} $ . After each step Nikita wants to know what is the integer on the top of the stack after performing the operations he have already remembered, in the corresponding order. Help him!",
    "inputFormat": "The first line contains the integer $ m $ ( $ 1<=m<=10^{5} $ ) \u2014 the number of operations Nikita made.\n\nThe next $ m $ lines contain the operations Nikita remembers. The $ i $ -th line starts with two integers $ p_{i} $ and $ t_{i} $ ( $ 1<=p_{i}<=m $ , $ t_{i}=0 $ or $ t_{i}=1 $ ) \u2014 the index of operation he remembers on the step $ i $ , and the type of the operation. $ t_{i} $ equals $ 0 $ , if the operation is pop(), and $ 1 $ , is the operation is push(x). If the operation is push(x), the line also contains the integer $ x_{i} $ ( $ 1<=x_{i}<=10^{6} $ ) \u2014 the integer added to the stack.\n\nIt is guaranteed that each integer from $ 1 $ to $ m $ is present exactly once among integers $ p_{i} $ .",
    "outputFormat": "Print $ m $ integers. The integer $ i $ should equal the number on the top of the stack after performing all the operations Nikita remembered on the steps from $ 1 $ to $ i $ . If the stack is empty after performing all these operations, print -1.",
    "samples": [
        [
            "2\n2 1 2\n1 0\n",
            "2\n2\n"
        ],
        [
            "3\n1 1 2\n2 1 3\n3 0\n",
            "2\n3\n2\n"
        ],
        [
            "5\n5 0\n4 0\n3 1 1\n2 1 1\n1 1 2\n",
            "-1\n-1\n-1\n-1\n2\n"
        ]
    ],
    "hint": "In the first example, after Nikita remembers the operation on the first step, the operation push(2) is the only operation, so the answer is $ 2 $ . After he remembers the operation pop() which was done before push(2), answer stays the same.\n\nIn the second example, the operations are push(2), push(3) and pop(). Nikita remembers them in the order they were performed.\n\nIn the third example Nikita remembers the operations in the reversed order.",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\r\nNK\u6709\u4e00\u4e2a\u6808\u3002 \u6b64\u95ee\u9898\u4e2d\u7684\u6808\u662f\u652f\u6301\u4e24\u4e2a\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u3002 push(x)\u64cd\u4f5c\u5c06\u6574\u6570$x$\u653e\u5728\u6808\u9876\uff0c\u800cpop()\u64cd\u4f5c\u5219\u4ece\u6808\u4e2d\u5220\u9664\u9876\u90e8\u7684\u6574\u6570\uff0c\u5373\u6700\u540e\u6dfb\u52a0\u7684\u6574\u6570\u3002 \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219pop()\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\r\n\r\nNK\u7528\u5806\u6808\u8fdb\u884c\u4e86$m$\u6b21\u64cd\u4f5c\uff0c\u4f46\u5fd8\u8bb0\u4e86\u90a3$m$\u6b21\u64cd\u4f5c\u5e72\u4e86\u4ec0\u4e48\u3002\u5728\u7b2c$i$\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u4ed6\u8bb0\u5f97\u4ed6\u8fdb\u884c\u8fc7\u7b2c$p_{i}$\u4e2a\u64cd\u4f5c\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u4ed6\u4ee5\u67d0\u4e9b\u6392\u5217$p_{1}$\uff0c$p_{2}$\uff0c...\uff0c$p_{m}$\u7684\u987a\u5e8f\u8bb0\u4f4f\u64cd\u4f5c\u3002 \u5728\u5b8c\u6210\u6bcf\u4e00\u6b65\u4e4b\u540e\uff0cNK\u60f3\u8981\u4ee5\u76f8\u5e94\u7684\u987a\u5e8f\u77e5\u9053\u5728\u5df2\u7ecf\u8bb0\u4f4f\u7684\u64cd\u4f5c\u540e\u6808\u7684\u9876\u90e8\u7684\u6570\u662f\u4ec0\u4e48\u3002\u5e2e\u5e2eNK\uff01\r\n\r\n## \u8f93\u5165\u683c\u5f0f\r\n\r\n\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570$m(1\\le m\\le 10^{5})$\uff0c\u8868\u793aNK\u8fdb\u884c\u4e86\u51e0\u6b21\u64cd\u4f5c\u3002\r\n\r\n\u63a5\u4e0b\u6765\u7684$m$\u884c\u662fNK\u6240\u8bb0\u5f97\u7684\u64cd\u4f5c\u3002\u7b2c$i$\u884c\u5305\u542b2\u4e2a\u6574\u6570\uff0c$p_i$\u548c$t_i$$(1\\le p_i\\le m, t_i = 0$\u6216$t_i = 1)$\u2014\u2014\u2014\u4ed6\u5728\u6b65\u9aa4i\u4e0a\u8bb0\u4f4f\u7684\u64cd\u4f5c\u7d22\u5f15\u4ee5\u53ca\u64cd\u4f5c\u7c7b\u578b\u3002\u82e5$t_i=0$\uff0c\u5219\u8be5\u64cd\u4f5c\u4e3apop()\uff0c\u53cd\u4e4b\u4e3apush(x)\u3002\u5982\u679c\u64cd\u4f5c\u4e3apush(x)\uff0c\u5219\u8be5\u884c\u8fd8\u4f1a\u5305\u542b\u4e00\u4e2a\u6574\u6570$x_i(1\\le x_i\\le10^6)$\uff0c\u5373\u52a0\u5230\u6808\u5185\u7684\u6570\u3002\r\n\r\n\u786e\u4fdd\u4ece1\u5230$m$\u7684\u6bcf\u4e2a\u6574\u6570\u5728\u6574\u6570$p_{i}$\u4e2d\u4ec5\u51fa\u73b0\u4e00\u6b21\u3002\r\n## \u8f93\u51fa\u683c\u5f0f\r\n\r\n\u8f93\u51fa$m$\u4e2a\u6574\u6570\u3002\u7b2c$i$\u4e2a\u8f93\u51fa\u7684\u6574\u6570\u5e94\u7b49\u4e8eNK\u8bb0\u5f97\u7684\u7b2c$i$\u6b21\u64cd\u4f5c\u540e\u6808\u9876\u7684\u5143\u7d20\u3002\u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de$-1$\u3002\r\n## \u8bf4\u660e/\u63d0\u793a\r\n\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u5728NK\u8bb0\u4f4f\u7b2c\u4e00\u6b65\u7684\u64cd\u4f5c\u4e4b\u540e\uff0c\u64cd\u4f5cpush(2)\u662f\u552f\u4e00\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u7b54\u6848\u662f2\u3002 \u5728\u4ed6\u8bb0\u4f4f\u5728push(2)\u4e4b\u524d\u5b8c\u6210\u7684pop()\u64cd\u4f5c\u4e4b\u540e\uff0c\u7b54\u6848\u4fdd\u6301\u4e0d\u53d8\u3002\r\n\r\n\u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u64cd\u4f5c\u662fpush(2)\uff0cpush(3)\u548cpop()\u3002 NK\u6309\u7167\u987a\u5e8f\u8bb0\u4f4f\u5b83\u4eec\u3002\r\n\r\n\u5728\u7b2c\u4e09\u4e2a\u793a\u4f8b\u4e2d\uff0cNK\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u8bb0\u4f4f\u4e86\u6240\u6709\u7684\u64cd\u4f5c\u3002"
}