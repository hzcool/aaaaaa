{
    "description": "This is an interactive problem.\n\nKochiya Sanae is playing with magnets. Realizing that some of those magnets are demagnetized, she is curious to find them out.\n\nThere are $ n $ magnets, which can be of the following $ 3 $ types:\n\n- N\n- S\n- - \u2014 these magnets are demagnetized.\n\nNote that you don't know the types of these magnets beforehand.\n\nYou have a machine which can measure the force between the magnets, and you can use it at most $ n+\\lfloor \\log_2n\\rfloor $ times.\n\nYou can put some magnets to the left part of the machine and some to the right part of the machine, and launch the machine. Obviously, you can put one magnet to at most one side (you don't have to put all magnets). You can put the same magnet in different queries.\n\nThen the machine will tell the force these magnets produce. Formally, let $ n_1,s_1 $ be the number of N and S magnets correspondently on the left and $ n_2,s_2 $ \u2014 on the right. Then the force between them would be $ n_1n_2+s_1s_2-n_1s_2-n_2s_1 $ . Please note that the force is a signed value.\n\nHowever, when the absolute value of the force is strictly larger than $ n $ , the machine will crash into pieces.\n\nYou need to find all magnets of type - (all demagnetized ones), without breaking the machine.\n\nNote that the interactor is not adaptive. The types of the magnets are fixed before the start of the interaction and do not change with queries.\n\nIt is guaranteed that there are at least $ 2 $ magnets whose type is not -, and at least $ 1 $ magnet of type -.",
    "inputFormat": "The first line contains a single integer $ t $ ( $ 1 \\leq t \\leq 100 $ ) \u2014 the number of test cases.",
    "outputFormat": "For each test case you should start by reading an integer $ n $ ( $ 3 \\leq n \\leq 2000 $ ) \u2014 the number of the magnets.\n\nIt is guaranteed that the total sum of all $ n $ over all test cases doesn't exceed $ 2000 $ .\n\nAfter that you can put some magnets into the machine and make a query from the statement.\n\nYou have to print each query in three lines:\n\n- In the first line print \"? l r\" (without quotes) where $ l $ and $ r $ ( $ 1 \\leq l,r < n $ , $ l+r \\leq n $ ) respectively denote the number of the magnets you put to left and right.\n- In the second line print $ l $ integers $ a_1, \\dots, a_l $ ( $ 1 \\leq a_i \\leq n $ , $ a_i \\neq a_j $ if $ i \\neq j $ ) \u2014 the indices of the magnets you put to left.\n- In the third line print $ r $ integers $ b_1, \\dots, b_r $ ( $ 1 \\leq b_i \\leq n $ , $ b_i \\neq b_j $ if $ i \\neq j $ ) \u2014 the indices of the magnets you put to right.\n- The same magnet can't be put to both sides in the same query. Formally, you should guarantee that $ a_i \\neq b_j $ for any $ i $ and $ j $ . However, you may leave some magnets unused.\n\nAfter printing a query do not forget to output end of line and flush the output. To do this, use:\n\n- fflush(stdout) or cout.flush() in C++;\n- System.out.flush() in Java;\n- flush(output) in Pascal;\n- stdout.flush() in Python;\n- see documentation for other languages.\n\nAfter this, you should read an integer $ F $ \u2014 the force these magnets produce.\n\nNote that if your query is invalid(either the query limit exceeds, the machine crashes or the arguments are invalid), the interactor will terminate immediately. In this case terminate your program to receive verdict Wrong Answer instead of arbitrary verdicts.\n\nIf you are confident about your answer, use the following format to report it:\n\n- \"! k A\", where $ k $ is the number of magnets you found, and $ A $ is an array consisting of $ k $ different integers from $ 1 $ to $ n $ denoting the indices of the magnets of type - that you found. You may print elements of $ A $ in arbitrary order.\n- After that, if this is the last test case, you have to terminate your program; otherwise you should immediately continue to deal with the next test case.\n\nNote that the interactor is not adaptive. The types of the magnets are fixed before the start of interaction and do not change with queries.\n\nHacks\n\nTo hack a solution, use the following format:\n\nThe first line contains a single integer $ t $ ( $ 1 \\leq t \\leq 100 $ ) \u2014 the number of test cases in your hack.\n\nThen follow the descriptions of the $ t $ test cases, each printed in two lines:\n\n- The first line contains a single integer $ n $ ( $ 3 \\leq n \\leq 2000 $ ) \u2014 the number of magnets.\n- The second line contains a string $ S $ of length $ n $ consisting of only N, S and -, denoting the magnets' types.\n- Each of your test case should guarantee that there are at least $ 2 $ magnets whose type is not -, and at least $ 1 $ magnet of type -. Meanwhile, the total sum of $ n $ in all test cases should not exceed $ 2000 $ .",
    "samples": [
        [
            "1\n4\n\n\n\n0\n\n\n\n1\n\n\n\n0\n\n\n\n0",
            "? 1 1\n3\n4\n\n? 1 2\n1\n2 3\n\n? 1 1\n1\n4\n\n? 1 1\n1\n3\n\n! 2 3 4"
        ]
    ],
    "hint": "The empty lines in the sample are just for you to better understand the interaction process. You're not required to print them.\n\nIn the sample, the types of the magnets are NN--.\n\nAt first, you put the third magnet on the left and the fourth one on the right. Both of them have type -, thus no force is produced.\n\nThen you put the first magnet on the left and the second and third one on the right. The third magnet has type -, while the other two magnets are of type N, so the force produced is $ 1 $ .\n\nIn the following two queries, the force is $ 0 $ since there is only a magnet with property - on the right.\n\nThen we can determine that the magnets of type - are the third and the fourth one, so we should print ! 2 3 4 and exit.",
    "translation": "**\u5b98\u65b9\u9898\u9762**\n\n_\u8fd9\u662f\u4e00\u4e2a\u4ea4\u4e92\u9898\u3002_\n\n\u65e9\u82d7\u6709 $n$ \u5757\u78c1\u77f3\uff0c\u7f16\u53f7\u4e3a $1,2,\\cdots,n$\u3002\u6bcf\u5757\u78c1\u77f3\u7684\u78c1\u6781\u53ef\u80fd\u662f\u6b63\u6781\uff0c\u8d1f\u6781\uff0c\u4e5f\u53ef\u80fd\u6ca1\u6709\u78c1\u6027\u3002\u5979\u5e0c\u671b\u4f60\u80fd\u5e2e\u5979\u627e\u51fa\u6240\u6709\u6ca1\u6709\u78c1\u6027\u7684\u78c1\u77f3\u3002\n\n\u4e07\u5e78\u7684\u662f\uff0c\u4f60\u6709\u4e00\u53f0\u78c1\u529b\u68c0\u6d4b\u4eea\u3002\u4f60\u6bcf\u6b21\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u78c1\u77f3\u653e\u5728\u8fd9\u53f0\u673a\u5668\u7684\u5de6\u6258\u76d8\uff0c\u53f3\u6258\u76d8\u6216\u8005\u4e0d\u653e\u3002\n\n\u673a\u5668\u5c06\u4f1a\u8fd4\u56de\u6b64\u65f6\u7684\u78c1\u529b\u5f3a\u5ea6\u3002\u8bbe\u6258\u76d8\u5de6\u8fb9\u6709 $n_1$ \u4e2a\u78c1\u77f3\u4e3a\u6b63\u6781\uff0c$s_1$ \u4e2a\u78c1\u77f3\u4e3a\u8d1f\u6781\uff0c\u6258\u76d8\u53f3\u8fb9\u4e2d\u6709 $n_2$ \u78c1\u77f3\u4e3a\u6b63\u6781\uff0c$s_2$ \u4e2a\u78c1\u77f3\u4e3a\u8d1f\u6781\uff0c\u5219\u8fd4\u56de\u7684\u78c1\u529b\u5f3a\u5ea6\u4e3a $ n_1n_2+s_1s_2-n_1s_2-n_2s_1 $\u3002\n\n\u5982\u679c\u4e00\u6b21\u6d4b\u8bd5\u4e2d\u78c1\u529b\u5f3a\u5ea6\u7684\u7edd\u5bf9\u503c\u5927\u4e8e $n$\uff0c\u8fd9\u53f0\u673a\u5668\u5c31\u4f1a\u574f\u6389\u3002\n\n\u4f60\u9700\u8981\u5728  $n+\\lfloor\\log_2n\\rfloor$ \u6b21\u6d4b\u8bd5\u5185\u627e\u5230\u6240\u6709\u6ca1\u6709\u78c1\u6027\u7684\u78c1\u77f3\u7684\u7f16\u53f7\uff0c\u540c\u65f6\u4e0d\u80fd\u5f04\u574f\u673a\u5668\u3002\n\n**\u4fdd\u8bc1\u5b58\u5728\u81f3\u5c11 $2$ \u5757\u78c1\u77f3\u6709\u78c1\u6027\u4e14\u81f3\u5c11 $1$ \u5757\u78c1\u77f3\u6ca1\u6709\u78c1\u6027\u3002**\n\n-------------------------------\n\n\u4ec5\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 $T$\uff08$1\\leq T\\leq 100$\uff09\uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570\u3002\n\n----------------------------------------\n\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u4f60\u9700\u8981\u5148\u8bfb\u5165\u4e00\u4e2a\u6b63\u6574\u6570 $n$\uff08$3\\leq n\\leq 2000$\uff09\uff0c\u4ee3\u8868\u78c1\u77f3\u7684\u6570\u91cf\uff0c\u4fdd\u8bc1\u6bcf\u7ec4\u6570\u636e\u7684 $n$ \u4e4b\u548c\u4e0d\u8d85\u8fc7 $2000$\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u4f60\u53ef\u4ee5\u5411\u4ea4\u4e92\u5e93\u63d0\u51fa\u82e5\u5e72\u6b21\u8be2\u95ee\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u4e09\u884c\uff1a\n\n* \u7b2c\u4e00\u884c\u8f93\u51fa ``? L R``\uff0c\u5176\u4e2d $L$ \u4ee3\u8868\u653e\u5728\u5de6\u6258\u76d8\u7684\u78c1\u77f3\u4e2a\u6570\uff0c$R$ \u4ee3\u8868\u653e\u5728\u53f3\u6258\u76d8\u7684\u78c1\u77f3\u4e2a\u6570\u3002\n* \u7b2c\u4e8c\u884c\u8f93\u51fa $L$ \u4e2a\u6570 $a_1,a_2,\\cdots,a_L$\uff0c\u4ee3\u8868\u653e\u5728\u5de6\u6258\u76d8\u7684\u78c1\u77f3\u7f16\u53f7\u3002\n* \u7b2c\u4e09\u884c\u8f93\u51fa $R$ \u4e2a\u6570 $b_1,b_2,\\cdots,b_R$\uff0c\u4ee3\u8868\u653e\u5728\u53f3\u6258\u76d8\u7684\u78c1\u77f3\u7f16\u53f7\u3002\n\n\u663e\u7136\uff0c\u4f60\u9700\u8981\u4fdd\u8bc1 $a_i\\neq b_j$\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981\u5237\u65b0\u7f13\u51b2\u533a\u3002\n\n\uff08\u5237\u65b0\u7f13\u51b2\u533a\u6559\u7a0b\uff09\n\n\u6700\u540e\uff0c\u4f60\u9700\u8981\u8bfb\u5165\u4e00\u4e2a\u6574\u6570 $F$\uff0c\u4ee3\u8868\u8fd9\u6b21\u6d4b\u8bd5\u7684\u78c1\u6027\u5927\u5c0f\u3002\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u786e\u5b9a\u4e86\u7b54\u6848\uff0c\u8f93\u51fa\u4e00\u884c ``! k A``  \u8868\u793a\u7b54\u6848\uff0c\u5176\u4e2d $k$ \u4ee3\u8868\u6ca1\u6709\u78c1\u6027\u7684\u78c1\u77f3\u6570\u91cf\uff0c$A$ \u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a $k$ \u7684\u5e8f\u5217\uff0c\u4ee3\u8868\u6240\u6709\u6ca1\u6709\u78c1\u6027\u7684\u78c1\u77f3\u7f16\u53f7\u3002\u5982\u679c\u8fd9\u4e0d\u662f\u6700\u540e\u4e00\u7ec4\u6570\u636e\uff0c\u4f60\u5e94\u8be5\u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u7ec4\u6570\u636e\u3002\u5982\u679c\u8fd9\u662f\u6700\u540e\u4e00\u7ec4\u6570\u636e\uff0c\u4f60\u5e94\u8be5\u7acb\u523b\u7ed3\u675f\u4f60\u7684\u7a0b\u5e8f\u3002\n\n**\u6b64\u9898\u4e2d\uff0c\u4ea4\u4e92\u5e93\u662f\u56fa\u5b9a\u7684\u3002** \u6bcf\u4e2a\u78c1\u77f3\u7684\u72b6\u6001\u4e0d\u968f\u7740\u4f60\u7684\u6d4b\u8bd5\u800c\u6539\u53d8\u3002\n\n------------------------------\n\n\u5982\u679c\u4f60\u60f3\u53c9\u522b\u4eba\uff0c\u4f60\u9700\u8981\u7528\u4ee5\u4e0b\u7684\u65b9\u5f0f\u4e0a\u4f20\u6570\u636e\uff1a\n\n\u7b2c\u4e00\u884c\uff0c\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 $T$\uff08$1\\leq T\\leq 100$\uff09\uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570\u3002\n\n\u63a5\u4e0b\u6765\u8f93\u5165 $T$ \u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u4e24\u884c\u3002\n\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 $n$\uff08$3\\leq n\\leq 2000$\uff09\uff0c\u4ee3\u8868\u78c1\u77f3\u7684\u6570\u91cf\uff0c\u4fdd\u8bc1\u6bcf\u7ec4\u6570\u636e\u7684 $n$ \u4e4b\u548c\u4e0d\u8d85\u8fc7 $2000$\u3002\n\n\u7b2c\u4e8c\u884c\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32 $S$\uff0c\u63cf\u8ff0\u6bcf\u4e2a\u78c1\u77f3\u7684\u78c1\u6781\u3002\n\n\u5bf9\u4e8e\u7b2c $i$ \u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u7b2c $i$ \u4e2a\u78c1\u77f3\u4e3a\u6b63\u6781\uff0c\u8f93\u51fa ``N``\uff0c\u5982\u679c\u7b2c $i$ \u4e2a\u78c1\u77f3\u4e3a\u8d1f\u6781\uff0c\u8f93\u51fa ``S``\uff0c\u5982\u679c\u7b2c $i$ \u4e2a\u78c1\u77f3\u6ca1\u6709\u78c1\u6027\uff0c\u8f93\u51fa ``-``\u3002\n\n\u4f60\u5e94\u8be5\u4fdd\u8bc1\u5b58\u5728\u81f3\u5c11 $2$ \u5757\u78c1\u77f3\u6709\u78c1\u6027\u4e14\u81f3\u5c11 $1$ \u5757\u78c1\u77f3\u6ca1\u6709\u78c1\u6027\u3002\n\n-----------------------------\n\n\u5728\u6837\u4f8b\u4e2d\uff0c\u524d\u4e24\u4e2a\u78c1\u77f3\u4e3a\u6b63\u6781\uff0c\u540e\u4e24\u4e2a\u78c1\u77f3\u6ca1\u6709\u78c1\u6027\u3002\n\n\u7b2c\u4e00\u6b21\u6d4b\u8bd5\u4e2d\uff0c\u5de6\u6258\u76d8\u548c\u53f3\u6258\u76d8\u5404\u6709\u4e00\u4e2a\u6ca1\u6709\u78c1\u6027\u7684\u78c1\u77f3\uff0c$n_1=s_1=n_2=s_2=0$\uff0c\u56e0\u6b64\u78c1\u529b\u4e3a $0$\u3002\n\n\u7b2c\u4e8c\u6b21\u6d4b\u8bd5\u4e2d\uff0c\u5de6\u6258\u76d8\u6709\u4e00\u4e2a\u6b63\u6781\u78c1\u77f3\uff0c\u53f3\u6258\u76d8\u6709\u4e00\u4e2a\u6b63\u6781\u78c1\u77f3\u548c\u4e00\u4e2a\u6ca1\u6709\u78c1\u6027\u7684\u78c1\u77f3\uff0c$n_1=n_2=1,s_1=s_2=0$\uff0c\u56e0\u6b64\u78c1\u529b\u4e3a $1$\u3002\n\n\u5269\u4f59\u7684\u6d4b\u8bd5\u4e2d\uff0c\u53f3\u8fb9\u7684\u6258\u76d8\u90fd\u53ea\u6709\u4e00\u4e2a\u6ca1\u6709\u78c1\u6027\u7684\u78c1\u77f3\uff0c\u56e0\u6b64\u78c1\u529b\u4e3a $0$\u3002\n\n\u56e0\u6b64\u6211\u4eec\u786e\u5b9a\u4e86\u7b2c\u4e09\u4e2a\u548c\u7b2c\u56db\u4e2a\u78c1\u77f3\u6ca1\u6709\u78c1\u529b\uff0c\u8f93\u51fa ``! 2 3 4``\u3002"
}