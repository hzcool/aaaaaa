{
    "description": "[problemUrl]: https://atcoder.jp/contests/jag2013summer-warmingup/tasks/icpc2013summer_warmingUp_j\n\nAlice and Bob decide to play a new card game using a deck with $ N $ cards. $ N $ is even. Each card has a number between $ -10^9 $ to $ 10^9 $.  \n Bob shuffles the deck $ M $ times. In the $ i $-th time, he swaps the $ [1,\\ k_i) $-th cards and $ [k_i,\\ n] $-th cards counting from the top of the deck.  \n For example, when the deck is $ and\\ k_i $ equals $ 4 $, the deck becomes $ after\\ shuffle.\r\nAlice\\ can\\ stop\\ his\\ shuffle\\ after\\ arbitrary\\ times,\\ of\\ course\\ 0 $ times also. (He does not shuffle after she stopped his shuffle.)  \n When she stops shuffle or he ends shuffle M times, Alice gets the upper half of the deck. When does the sum of the cards she gets become maximum?  \n The first line of the input file contains $ N $ and $ M $ ($ 2\\ \\leq\\ N\\ \\leq\\ 10^5 $, $ 1\\ \\leq\\ M\\ \\leq\\ 10^5 $), which is the number of cards and shuffles. $ N $ is even.  \n The second line contains $ N $ integers that are written on the cards from the top of the deck. The integers are between $ -10^9 $ and $ 10^9 $ inclusive.  \n The third line contains $ M $ integers $ \\{k_i\\} $ ($ 2\\ \\leq\\ k_i\\ \\leq\\ N $).  \n Output the maximal sum of the cards that Alice can get.\n\n```\n\n10 5\n1 -3 2 2 -4 1 1 5 -2 -2\n2 8 5 8 10\n```\n\n ```\n\n2\n```",
    "inputFormat": "",
    "outputFormat": "",
    "samples": [],
    "hint": "",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\r\n\r\nAlice\u548cBob\u51b3\u5b9a\u7528\u4e00\u526f\u6709$N$\u5f20\u724c\u7684\u724c\u7ec4\u6765\u73a9\u4e00\u79cd\u65b0\u7684\u7eb8\u724c\u6e38\u620f\u3002$N$\u662f\u5076\u6570\uff0c\u5e76\u4e14\u6bcf\u5f20\u5361\u7247\u4e0a\u6709\u4e00\u4e2a\u4ecb\u4e8e$-10^9$\u5230$10^9$\u4e4b\u95f4\u7684\u6570\u5b57\u3002\r\n\r\nBob\u6d17\u724c$M$\u6b21\u3002\u5728\u7b2c$i$\u6b21\u65f6\uff0c\u4ed6\u4ea4\u6362\u4e86\u7b2c [$1$\uff0c$k_i$) \u5f20\u5361\u7247\u548c\u7b2c[$k_i$\uff0c$n$]\u5f20\u5361\u7247\uff0c\u4ece\u724c\u5806\u9876\u90e8\u5f00\u59cb\u8ba1\u6570\u3002\r\n\r\n\u4f8b\u5982\uff0c\u5f53\u724c\u7ec4\u4e3a\u4e14$k_i$\u7b49\u4e8e$4$\u65f6\uff0c\u724c\u7ec4\u5728\u6d17\u724c\u540e\u53d8\u4e3a\u65b0\u7684\u724c\u7ec4\u3002Alice\u53ef\u4ee5\u5728\u4efb\u610f\u6b21\u6570\u540e\u505c\u6b62\u6d17\u724c\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5$0$\u6b21\u3002\uff08\u5728Alice\u505c\u6b62\u6d17\u724c\u540e\uff0cBob\u6ca1\u6709\u6d17\u724c\u3002\uff09\r\n\r\n\u5f53Alice\u505c\u6b62\u6d17\u724c\u6216Bob\u7ed3\u675f\u6d17\u724c$M$\u6b21\u65f6\uff0cAlice\u5f97\u5230\u4e86\u4e0a\u534a\u90e8\u5206\u7684\u724c\u3002\u8bf7\u95ee\uff0c\u5979\u5f97\u5230\u7684\u724c\u6570\u4ec0\u4e48\u65f6\u5019\u4e3a\u6700\u5927\u503c\uff1f\r\n\r\n## \u8f93\u5165\u683c\u5f0f\r\n\r\n\u7b2c\u4e00\u884c\uff0c\u8f93\u5165$N$\u548c$M$\uff08$2\u2264N\u226410^5,1\u2264M\u226410^5$\uff09\uff0c\u5206\u522b\u8868\u5361\u724c\u6570\u548c\u6d17\u724c\u7684\u6b21\u6570\u3002\u4fdd\u8bc1$N$\u662f\u5076\u6570\u3002\r\n\r\n\u7b2c\u4e8c\u884c\u4e3a$N$\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4ece\u724c\u7ec4\u7684\u9876\u90e8\u5f00\u59cb\u5361\u724c\u4e0a\u7684\u7684\u6570\u3002\u6574\u6570\u4ecb\u4e8e$-10^9$\u548c$10^9$\u4e4b\u95f4\u3002\r\n\r\n\u7b2c\u4e09\u884c\u4e3a$M$\u4e2a\u6574\u6570${k_i}(2\u2264k_i\u2264N)$\r\n\r\n## \u8f93\u51fa\u683c\u5f0f\r\n\r\n\r\n\u8f93\u51faAlice\u80fd\u5f97\u5230\u7684\u5361\u7247\u6700\u5927\u6570\u3002"
}