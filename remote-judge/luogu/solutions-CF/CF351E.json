[
    {
        "content": "\u9996\u5148\uff0c\u4e0d\u96be\u60f3\u5230\uff0c\u7b54\u6848\u548c\u8bfb\u8fdb\u6765\u7684\u6570\u7684\u6b63\u8d1f\u6027\u662f\u65e0\u5173\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u5199\u5feb\u8bfb\u65f6\u4e0d\u5224\u8d1f\u6570\n\n\u8981\u6c42\u51fa\u9006\u5e8f\u5bf9\u7684\u6700\u5c0f\u4e2a\u6570\uff0c\u6211\u4eec\u5f97\u5148\u4e86\u89e3\u4ec0\u4e48\u662f\u9006\u5e8f\u5bf9\n\n\u9006\u5e8f\u5bf9\uff1a$a_i>a_j\\;(i<j)$\n\n\u6709\u5c31\u662f\u8bf4\u524d\u9762\u7684\u6570\u6bd4\u540e\u9762\u7684\u5927\u5c31\u662f\u9006\u5e8f\u5bf9\uff0c\u53ef\u4ee5\u770b\u51fa\u9006\u5e8f\u5bf9\u662f\u548c\u7531\u6570\u7684\u5927\u5c0f\u51b3\u5b9a\u7684\n\n\u8d2a\u5fc3\u7684\u60f3\u6cd5\u5c31\u662f\u524d\u9762\u7684\u5c3d\u91cf\u4e3a\u8d1f\uff0c\u540e\u9762\u7684\u5c3d\u91cf\u4e3a\u6b63\u3002\u4f46\u8fd9\u6837\u4e00\u4e2a\u6570\u53d6\u6b63\u8d1f\u548c\u524d\u9762\u540e\u9762\u7684\u503c\u90fd\u6709\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u6709\u540e\u6548\u6027\uff0c\u4e0d\u592a\u597d\u5904\u7406\n\n\u6211\u4eec\u6362\u4e00\u79cd\u65b9\u5411\u601d\u8003\n\n\u5bf9\u4e8e\u5e8f\u5217$a$\uff0c\u6211\u4eec\u627e\u5230\u6700\u5927\u7684$a_i$\n\n\u5bf9\u4e8e$a_i$\u6765\u8bf4\uff0c\u4ed6\u53d6\u6b63\u53d6\u8d1f\u548c\u5176\u4ed6\u6570\u6ca1\u6709\u5173\u7cfb\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e\u975e\u5e38\u663e\u7136\n\n- \u53d6\u6b63\uff1a\u7531\u4e8e\u8fd9\u4e2a\u6570\u662f\u6700\u5927\u7684\uff0c\u6240\u4ee5\u524d\u9762\u7684\u6240\u6709\u6570\u53d6\u6b63\u6216\u53d6\u8d1f\u90fd\u4e0d\u4f1a\u5927\u4e8e\u8fd9\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u524d\u9762\u7684\u6570\u4e0d\u4f1a\u4ea7\u751f\u9006\u5e8f\u5bf9\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u662f\u6700\u5927\u7684\uff0c\u6240\u4ee5\u540e\u9762\u7684\u6570\u4e0d\u7ba1\u600e\u4e48\u53d6\uff0c\u90fd\u4e00\u5b9a\u6bd4\u8fd9\u4e2a\u6570\u5c0f\uff0c\u5bf9\u4e8e\u540e\u9762\u7684\u6570\u5c31\u4e00\u5b9a\u4f1a\u4ea7\u751f$n-i$\u5bf9\u9006\u5e8f\u5bf9\n\n- \u53d6\u8d1f\uff1a\u7531\u4e8e\u8fd9\u4e2a\u6570\u662f\u6700\u5927\u7684\uff0c\u6240\u4ee5\u524d\u9762\u7684\u6240\u6709\u6570\u53d6\u6b63\u6216\u53d6\u8d1f\u90fd\u4e0d\u4f1a\u5c0f\u4e8e\u8fd9\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u524d\u9762\u7684\u6570\u4e00\u5b9a\u4f1a\u4ea7\u751f$i-1$\u9006\u5e8f\u5bf9\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u662f\u6700\u5927\u7684\uff0c\u6240\u4ee5\u540e\u9762\u7684\u6570\u4e0d\u7ba1\u600e\u4e48\u53d6\uff0c\u90fd\u4e00\u5b9a\u6bd4\u8fd9\u4e2a\u6570\u5927\uff0c\u5bf9\u4e8e\u540e\u9762\u7684\u6570\u5c31\u4e00\u5b9a\u4e0d\u4f1a\u4ea7\u751f\u9006\u5e8f\u5bf9\n\n\u53ef\u4ee5\u770b\u51fa\uff0c$a_i$\u65e0\u8bba\u53d6\u6b63\u53d6\u8d1f\u90fd\u4e0e\u5176\u4ed6\u6570\u7684\u53d6\u6cd5\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u6240\u4ee5$a_i$\u7684\u8d21\u732e\u5c31\u7b49\u4e8e$\\min(i-1,n-i)$\n\n\u6240\u4ee5\u6700\u5927\u7684\u6570\u6211\u4eec\u5904\u7406\u5b8c\u4e86\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u600e\u4e48\u5904\u7406\u7b2c$2$\u5927\u3001\u7b2c$3$\u5927\u3001\u7b2c$4$\u5927$\\cdots$\u5462\uff1f\n\n\u521a\u521a\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6700\u5927\u7684\u6570\u7684\u53d6\u6cd5\u548c\u5176\u4ed6\u6570\u7684\u53d6\u6cd5\u90fd\u6ca1\u6709\u5173\u7cfb\uff0c\u6240\u4ee5\u8bf4\u5176\u4ed6\u6570\u7684\u53d6\u6cd5\u548c\u6700\u5927\u7684\u6570\u7684\u53d6\u6cd5\u4e5f\u6ca1\u6709\u5173\u7cfb\n\n\u56e0\u4e3a\u7b2c$kth$\u5927\u7684\u6570\u5bf9\u6700\u5927\u6570\u7684\u8d21\u732e\uff08\u662f\u5426\u4ea7\u751f\u9006\u5e8f\u5bf9\uff09\uff0c\u5df2\u7ecf\u5728\u5904\u7406\u6700\u5927\u7684\u6570\u65f6\u5904\u7406\u6389\u4e86\uff0c\u6240\u4ee5\u6700\u5927\u7684\u6570\u5df2\u7ecf\u6ca1\u6709\u4efb\u4f55\u7528\u4e86\uff0c\u53ef\u4ee5\u5220\u6389\u4e86\n\n\u8fd9\u65f6\uff0c\u5c31\u6709\u4e86\u5982\u4e0b$O(n^2)$\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\n#define maxn 1000005\n#define ll long long\nusing namespace std;\nint a[2[maxn],n,N,c[2][maxn],L[maxn],R[maxn];\nbool vis[maxn];\nll Ans;\ninline int read(){\n\tint ret=0;char ch=getchar();\n\twhile (ch<'0'||ch>'9') ch=getchar();\n\twhile (ch<='9'&&ch>='0') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret;\n}\nint main(){\n\tn=N=read();  \n\tfor (int i=1;i<=n;i++) a[1[i]=read();\n\tfor (int i=1;i<=n;i++){\n\t\tint Mx=-1,k=0,tot=0,l=0,r=0;\n\t\tfor (int j=1;j<=N;j++) if (a[i&1][j]>Mx) Mx=a[i&1][j],k=j;\n\t\tfor (int j=1;j<k;j++) if (a[i&1][j]==Mx) l++;\n\t\tfor (int j=k+1;j<=N;j++) if (a[i&1][j]==Mx) r++;\n\t\tAns+=min(k-1-l,N-k-r);\n\t\tfor (int j=1;j<=N;j++) if (j!=k) a[1-i&1][++tot]=a[i&1][j];\n\t\tN=tot;\n\t}\n\t   printf(\"%lld\",Ans);\n\treturn 0;\n}\n```\n\n\u4f46\u663e\u7136\u6570\u636e\u4e00\u5927\u5c31\u840e\u4e86\uff0c\u6211\u4eec\u8003\u8651\u4f18\u5316\n\n\u6211\u4eec\u518d\u6765\u6a21\u62df\u4e00\u904d\u66b4\u529b\u7684\u6d41\u7a0b\n\n- \u627e\u5230\u6700\u5c0f\u503c$\\rightarrow \\min(i-1,n-i)\\rightarrow $\u5220\u9664\u6700\u5c0f\u503c$\\rightarrow$ \u91cd\u6784\u6570\u7ec4$\\rightarrow$\u627e\u5230\u6700\u5c0f\u503c $\\cdots$\n\n\u591a\u770b\u51e0\u904d\u5c31\u53d1\u73b0\u76f4\u63a5\u7684\u66b4\u529b\u5f88\u591a\u64cd\u4f5c\u90fd\u663e\u5f97\u591a\u4f59\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u627e\u5230\u6700\u5927\u503c\u540e\uff0c\u5de6\u8fb9\u6709$i-1$\u4e2a\u6bd4\u4ed6\u5c0f\u7684\u53f3\u8fb9\u6709$n-i$\u4e2a\u3002\u4f46\u56e0\u4e3a\u6211\u4eec\u4e4b\u524d\u5220\u7684\u90fd\u662f\u6bd4\u8fd9\u4e2a\u6570\u5927\u7684\uff0c\u6240\u4ee5\u5de6\u53f3\u8fb9\u6709\u591a\u5c11\u4e2a\u6bd4\u4ed6\u5c0f\u7684\u6570\uff0c\u662f\u4e00\u76f4\u4e0d\u53d8\u7684\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u9884\u5904\u4e86\n\n\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u6c42\uff1a\n\n$$\\Large \\sum\\limits_{i=1}^n \\min(\\sum\\limits_{j=1}^{i-1} [a_j<a_i]+\\sum\\limits_{k=i+1}^{n} [a_k<a_i])$$\n\n\u8fd9\u4e2a\u95ee\u9898\u5c31\u975e\u5e38\u597d\u6c42\u4e86\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u5c31\u80fd$O(nlogn)$\u5b8c\u7f8e\u5904\u7406\n\n## code\n```\n#include<bits/stdc++.h>\n#define maxn 1000005\n#define ll long long\nusing namespace std;\nint a[maxn],n,L[maxn],R[maxn],N;\nbool vis[maxn];\nll Ans;\nstruct lc{\n\tint L,R,x;\n}tree[maxn];\ninline int read(){\n\tint ret=0;char ch=getchar();\n\twhile (ch<'0'||ch>'9') ch=getchar();\n\twhile (ch<='9'&&ch>='0') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret;\n}\ninline void build(int k,int L,int R){\n\ttree[k].L=L,tree[k].R=R;\n\tif (L==R){tree[k].x=0;return;}\n\tint mid=L+R>>1;\n\tbuild(k<<1,L,mid);build(k<<1|1,mid+1,R);\n    tree[k].x=0;\n}\ninline int Get(int k,int L,int R){\n\tif (R<L) return 0;\n\tif (tree[k].L>=L&&tree[k].R<=R) return tree[k].x;\n\tint mid=tree[k].L+tree[k].R>>1,sum=0;\n\tif (L<=mid) sum+=Get(k<<1,L,R);\n\tif (R>mid) sum+=Get(k<<1|1,L,R);\n\treturn sum;\n}\ninline void change(int k,int x){\n\tif (tree[k].L==tree[k].R&&tree[k].L==x){tree[k].x++;return;}\n\tint mid=tree[k].L+tree[k].R>>1;\n\tif (x<=mid) change(k<<1,x);\n\telse change(k<<1|1,x);\n\ttree[k].x=tree[k<<1].x+tree[k<<1|1].x;\n}\nint main(){\n\tn=read(); \n\tfor (int i=1;i<=n;i++) a[i]=read(),N=max(N,a[i]);\n\tbuild(1,0,N);\n\tfor (int i=1;i<=n;i++) L[i]=Get(1,0,a[i]-1),change(1,a[i]);\n\tbuild(1,0,N);\n\tfor (int i=n;i;i--) R[i]=Get(1,0,a[i]-1),change(1,a[i]);\n\tfor (int i=1;i<=n;i++) Ans+=min(R[i],L[i]);\n\tprintf(\"%lld\",Ans);\n\treturn 0;\n}\n```\n\n\n\n\n\n",
        "postTime": 1591528940,
        "uid": 108047,
        "name": "LlLlCc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF351E \u3010Jeff and Permutation\u3011"
    },
    {
        "content": "# $\\mathrm{CF351E\\ Jeff \\ and \\ Permutation}$\n\n### \u9898\u76ee\u610f\u601d\n\n* [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF351E)\n\n* \u9898\u76ee\u5f88\u5c0f\u6e05\u65b0\uff1a\u5c31\u662f\u5bf9\u6bcf\u4e2a\u6570\u53ef\u4ee5\u8fdb\u884c\u53d6\u53cd\u64cd\u4f5c\u3002\u95ee\u7ecf\u8fc7\u4efb\u610f\u6b21\u64cd\u4f5c\u540e\u5e8f\u5217\u9006\u5e8f\u5bf9\u6700\u5c11\u6570\u76ee\u3002\n\n* $n\\leq 2000$\n\n### $\\mathrm{Sol}$\n\n* \u6b63\u5982$\\mathrm{xlh}$\u8bf4\uff0c\u8fd9\u662f\u9053\u8003\u667a\u5546\u7684\u9898\u76ee\u3002\n\n* \u6211\u4eec\u9996\u5148\u5bf9\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a$a_i$\u53d8\u6210$|a_i|$\u3002\u8fd9\u64cd\u4f5c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\uff08\u4f60\u53ef\u4ee5\u628a\u5b83\u5728\u53d8\u56de\u53bb\uff09\u3002\u4ee5\u4e0b\u51fa\u73b0\u7684$a_i$\u90fd\u662f$|a_i|$\n\n* \u7136\u540e\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u4e00\u7ec4$(i,j),i<j$ \u4f1a\u4ea7\u751f\u9006\u5e8f\u5bf9\u7684\u60c5\u51b5\uff1a\n\n\t* $\\mathrm{Case1\\ a_i<a_j}$\n    \t\n \t  \u90a3\u4e48\u8981\u4ea7\u751f\u9006\u5e8f\u5bf9\u53ea\u80fd\uff1a$(1)$\u8ba9$a_j$\u53d6\u53cd\uff0c$a_i$\u4e0d\u53d8\uff0c$(2)$\u8ba9$a_i,a_j$\u90fd\u53d6\u53cd\n        \n\t* $\\mathrm{Case2\\ a_i>a_j}$\n  \t  \t\n  \t  \u90a3\u4e48\u8981\u4ea7\u751f\u9006\u5e8f\u5bf9\u53ea\u80fd\uff1a $(1)$\u8ba9$a_i,a_j$\u90fd\u4e0d\u53d6\u53cd\uff0c$(2)a_i$\u4e0d\u53d6\u53cd\uff0c$a_j$\u53d6\u53cd\n        \n        \n* \u90a3\u4e48\u7efc\u4e0a\u4e24\u79cd\u60c5\u51b5\uff1a\u5982\u679c$a_i$\u4e0d\u9009\u62e9\u53d6\u53cd\uff0c\u90a3\u4e48\u5c31\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff08\u540e\u9762\u7684\u6570\u6bd4\u4ed6\u5c0f\uff09\uff0c\u5426\u5219$a_i$\u53d6\u53cd\u90a3\u4e48\u5c31\u662f\u524d\u9762\u6bd4\u4ed6\u5c0f\u7684\u6570\u90fd\u4f1a\u4ea7\u751f\u8d21\u732e\u3002\u7136\u540e\u5c31\u5bf9\u5de6\u53f3\u4e24\u8fb9\u7edf\u8ba1\u6bd4$a_i$\u5c0f\u7684\u4e2a\u6570\u53d6$min$\uff0c\u8ba1\u6570\u5668\u52a0\u52a0\u5c31\u53ef\u4ee5\u4e86\u3002\n\n* \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\mathrm{O(n^2)/O(n\\log n)}$ \n\n### $\\mathrm{Code}$\n\n```cpp\n#include <bits/stdc++.h>\n#define pb push_back\nusing namespace std;\n\ninline int read()\n{\n\tint sum=0,ff=1; char ch=getchar();\n\twhile(!isdigit(ch))\n\t{\n\t\tif(ch=='-') ff=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch))\n\t\tsum=sum*10+(ch^48),ch=getchar();\n\treturn sum*ff;\n}\n\nconst int N=2005;\n\nint n,m,a[N];\nlong long ans;\n\nint main()\n{\n\tn=read();\n\tfor ( int i=1;i<=n;i++ ) \n\t{\n\t\ta[i]=read();\n\t\ta[i]=abs(a[i]);\n\t}\n\tfor ( int i=1;i<=n;i++ ) \n\t{\n\t\tint L=0,R=0;\n\t\tfor ( int j=1;j<i;j++ ) if(a[j]<a[i]) L++;\n\t\tfor ( int j=i+1;j<=n;j++ ) if(a[j]<a[i]) R++;\n\t\tans+=min(L,R);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1588087398,
        "uid": 308464,
        "name": "\u5947\u7c73",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF351E \u3010Jeff and Permutation\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u53e6\u7c7b\u7684\u89e3\u6cd5\u3002\uff08\u867d\u7136\u6709\u590d\u6742\u5ea6\u66f4\u4f18\u7684\u89e3\u6cd5\u4f46\u662f\u8fd8\u662f\u63d0\u4f9b\u4e00\u4e2a\u601d\u8def\u5427\uff09\n# CF351E $\\textsf{Jeff and permutation}$\n\u62ff\u5230\u8fd9\u9898\u7684\u4f60\uff0c\u5728\u8d2a\u5fc3\u548c dp \u4e4b\u95f4\u5f98\u5f8a\u8bb8\u4e45\uff0c\u53d1\u73b0\u4e00\u4e2a\u90fd\u4e0d\u4f1a\uff01\u600e\u4e48\u529e\uff1f\n\n\u7136\u540e\u4f60\u7684\u601d\u7eea\u5f00\u59cb\u6f2b\u65e0\u76ee\u7684\u5730\u98d8\u8361\uff0c\u76f4\u5230\u4f60\u7a81\u7136\u6ce8\u610f\u5230**\u5bf9\u4e8e\u4e00\u4e2a\u6570\u6765\u8bf4\uff0c\u53ea\u6709\u6b63\u548c\u8d1f\u4e24\u79cd\u9009\u62e9**\uff01\n\n$n = 2000$\uff1f\n\n\u5636\u2014\u2014 \u7f51\u7edc\u6d41\uff1f\u6700\u5c0f\u5272\uff1f\n\n\u4ea4\u4e86\u4e00\u53d1\uff0c\u795e\u5947\u5730\u8fc7\u4e86\u3002\n\n\u6211\u4eec\u5c1d\u8bd5\u7ed9\u4ed6\u5957\u4e0a\u96c6\u5408\u5212\u5206\u7684\u677f\u5b50\u3002\u9996\u5148\u8003\u8651 $n$ \u4e2a\u70b9\u4ee3\u8868 $n$ \u4e2a\u5143\u7d20\uff0c\u7136\u540e\u5c06\u6bcf\u4e2a\u70b9\u5206\u522b\u5411\u6e90\u70b9\u548c\u6c47\u70b9\u8fde\u6743\u4e3a $0$ \u7684\u8fb9\u8868\u793a\u51b3\u7b56\uff08\u548c\u6e90\u70b9\u8fde\u901a\u8868\u793a\u53d6\u6b63\uff0c\u548c\u6c47\u70b9\u8fde\u901a\u8868\u793a\u53d6\u8d1f\uff0c\u5f53\u7136\u5bb9\u91cf\u4e3a $0$ \u7684\u8fb9\u5728\u6700\u5927\u6d41\u4e2d\u5b9e\u9645\u4e0a\u6ca1\u6709\u610f\u4e49\uff09\u8003\u8651**\u4e24\u4e2a\u5143\u7d20** $a_i$ \u548c $a_j$ \u7684\u51b3\u7b56\uff08$i < j$\uff09\uff0c\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n- $|a_i| > |a_j|$\uff1a\u5982\u679c $a_i$ \u53d6\u6b63\uff08\u6e90\u70b9\u5230 $i$ \u7684\u8fb9\u4e0d\u5272\uff09\uff0c\u90a3\u4e48\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u4ea7\u751f $(i, j)$ \u7684\u9006\u5e8f\u5bf9\uff0c\u5bf9\u5e94\u5c06\u70b9 $i$ \u5230\u6c47\u70b9\u8fde\u4e00\u6761\u6743\u4e3a $1$ \u7684\u8fb9\u3002\n- $|a_i| < |a_j|$\uff1a\u5982\u679c $a_j$ \u53d6\u8d1f\uff08 $j$ \u5230\u6c47\u70b9\u7684\u8fb9\u4e0d\u5272\uff09\uff0c\u90a3\u4e48\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u4ea7\u751f $(i, j)$ \u7684\u9006\u5e8f\u5bf9\uff0c\u5bf9\u5e94\u5c06\u70b9 $j$ \u5230\u6e90\u70b9\u8fde\u4e00\u6761\u6743\u4e3a $1$ \u7684\u8fb9\u3002\n- $|a_i| = |a_j|$\uff1a\u5982\u679c $a_i$ \u53d6\u6b63\u5e76\u4e14 $a_j$ \u53d6\u8d1f\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f $(i, j)$ \u7684\u9006\u5e8f\u5bf9\uff0c\u5bf9\u5e94\u7684\u5728\u56fe\u4e2d\u8fde\u4e00\u6761 $i\\to j$ \u6743\u4e3a $1$ \u7684\u8fb9\u3002\n\n\u5efa\u5b8c\u56fe\u76f4\u63a5\u6700\u5c0f\u5272\u5c31\u5b8c\u4e8b\u4e86\u3002\n\n\u590d\u6742\u5ea6\u5c31\u4e0d\u5206\u6790\u4e86\uff0c\u53cd\u6b63\u5bf9\u4e8e $n = 2000$ \u80fd\u8fc7\uff08\u7406\u8bba\u4e0a\u6700\u52a3\u8fd8\u662f $\\mathcal O(n^2)$ \u6761\u8fb9\uff0c\u611f\u89c9\u80fd\u88ab\u5361\u6389/kk\uff09\u3002\n\n\u4ee3\u7801\u96be\u5ea6\u5f88\u4f4e\u3002\n```cpp\n#include <bits/stdc++.h>\n#define File(x, y) freopen(#x, \"r\", stdin), freopen(#y, \"w\", stdout)\n#define ffile(x) File(x##.in, x##.out)\n#define emp emplace_back\n#define fi first\n#define se second\n#define wllyyds\nusing namespace std;\nusing LL = long long;\n\nwllyyds\nwllyyds\nwllyyds\nwllyyds\nwllyyds\nwllyyds\nwllyyds\nwllyyds\nwllyyds\nwllyyds\n\nmt19937 gen(chrono::system_clock::now().time_since_epoch().count());\n\ntemplate <typename T = int> inline T read() {\n    T x = T(); int w = 0, ch = getchar();\n    for(; !isdigit(ch); ch = getchar()) w |= ch == 45;\n    for(; isdigit(ch); ch = getchar()) x = (x << 1) + (x << 3) + (ch ^ 48);\n    return w ? -x : x;\n}\ninline void fin() {}\ntemplate <typename T, typename ...A> inline void fin(T &x, A &...k) { x = read<T>(), fin(k...); }\n\ntemplate <ostream &C> class DEBUG {\n    public: inline void write() {}\n    template <typename T> inline void writeln(T x) { C << x << endl; }\n    template <typename T, typename ...A> inline void write(T x, A ...k) { C << x, write(k...); }\n    template <typename T, typename ...A> inline void writeln(T x, A ...k) { C << x << ' ', writeln(k...); }\n    template <typename T> inline void debug(const T *arr, int l, int r) { \n        for(int i = l; i <= r; ++i) C << arr[i] << ' ';\n        C << endl;\n    }\n};\n\nconst int N = 2e3 + 5, M = 4.2e6 + 5, inf = 1e9;\n\nnamespace FLOW { // This is the template of MaxFlow\n    int head[N], to[M], nxt[M], dep[N], tot = 1;\n    int val[M];\n    int s, t;\n    inline void _adde(int x, int y, int w) {\n        to[++tot] = y, val[tot] = w, nxt[tot] = head[x], head[x] = tot;\n    }\n    inline void adde(int x, int y, int w) {\n        _adde(x, y, w), _adde(y, x, 0);\n    }\n    inline bool bfs() {\n        memset(dep, 0, sizeof dep);\n        queue <int> Q; Q.push(s), dep[s] = 1;\n        while(Q.size()) {\n            int x = Q.front(); Q.pop();\n            for(int i = head[x], v = to[i]; i; v = to[i = nxt[i]]) \n                if(!dep[v] && val[i]) dep[v] = dep[x] + 1, Q.push(v);\n        }\n        return dep[t] != 0;\n    }\n    int dfs(int u, int in) {\n        if(u == t) return in;\n        int out = 0;\n        for(int i = head[u], v = to[i]; i && in; v = to[i = nxt[i]]) {\n            if(dep[v] == dep[u] + 1 && val[i]) {\n                LL res = dfs(v, min(in, val[i]));\n                val[i] -= res, val[i ^ 1] += res;\n                in -= res, out += res;\n            }\n        }\n        if(!out) dep[u] = 0;\n        return out;\n    }\n    inline int Dinic() {\n        int res = 0;\n        while(bfs()) res += dfs(s, +inf);\n        return res;\n    }\n} using namespace FLOW;\n\nint n, a[N];\nint c1[N], c2[N];\n\nsigned main() {\n#ifndef ONLINE_JUDGE\n    File(in.txt, Ans.txt);\n#endif\n    n = read();\n    for(int i = 1; i <= n; ++i) a[i] = abs(read());\n    s = 0, t = n + 1;\n    for(int i = 1; i <= n; ++i) \n        for(int j = i + 1; j <= n; ++j) {\n        // \u6309\u7167\u4e0a\u8ff0\u7684\u5efa\u6cd5\u80af\u5b9a\u4f1a\u4ea7\u751f\u4e00\u5806\u91cd\u8fb9\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528c1, c2\u5c31\u662f\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5230\u6e90\u70b9\u3001\u6c47\u70b9\u5efa\u4e86\u51e0\u6761\u8fb9\u3002\n        // \u8fd9\u6837\u8fd9\u4e00\u90e8\u5206\u5efa\u7684\u8fb9\u5c31\u662f O(n) \u7684\u3002\n            if(a[i] > a[j]) ++c2[i];\n            if(a[i] < a[j]) ++c1[j];\n            if(a[i] == a[j]) adde(i, j, 1);\n        }\n    for(int i = 1; i <= n; ++i) adde(s, i, c1[i]), adde(i, t, c2[i]);\n    return cout << Dinic(), 0; // Dinic \u597d\u50cf\u6ca1\u5199\u5f53\u524d\u5f27\u4f18\u5316\uff0c\u4e0d\u8981\u5b66\u6211\u3002\n}\n/*\nALL MY LIFE I'VE BEEN CHASING DOWN A DREAM\nBUT ALL THE MOMENTS IN BETWEEN THAT IS ALL I NEED\n*/\n```\n",
        "postTime": 1674115991,
        "uid": 297778,
        "name": "badFlames\u3078",
        "ccfLevel": 6,
        "title": "CF351E \u53e6\u7c7b\u89e3\u6cd5"
    },
    {
        "content": "\u5173\u4e8e\u8fd9\u9053\u9898\uff0c\u8c8c\u4f3c\u6240\u6709\u9898\u89e3\u90fd\u6f0f\u6389\u4e86\u5bf9\u4e8e `abs(a[i]) == abs(a[j])` \u8fd9\u79cd\u60c5\u51b5\u7684\u8ba8\u8bba\uff0c\u6211\u51b3\u5b9a\u5199\u4e00\u7bc7\u9898\u89e3\u8fdb\u884c\u8865\u5145\u3002\n\n#### \u9898\u610f\u7b80\u8ff0\n\u7ed9\u5b9a\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$\uff0c\u4f60\u53ef\u4ee5\u5c06\u5e8f\u5217\u4e2d\u4efb\u610f\u4e2a\u5143\u7d20\u53d8\u6210\u5b83\u7684\u76f8\u53cd\u6570\uff0c\u95ee\u5f97\u5230\u7684\u65b0\u5e8f\u5217\u9006\u5e8f\u5bf9\u6700\u5c0f\u4e3a\u591a\u5c11\u3002\n\n#### \u89e3\u9898\u601d\u8def\n\n\u8fd9\u9898\u89e3\u9898\u5173\u952e\u5728\u4e8e\u53d1\u73b0\u4e00\u4e2a\u5f88\u725b\u903c\u7684\u6027\u8d28\uff1a\n> \u5bf9\u4e8e $|a_i|< |a_j|$ \u8fd9\u79cd\u60c5\u51b5\uff0c\u5982\u679c $a_j < 0$ \u5219\u5fc5\u6709 $a_j < a_i$\u3002\n>\n> \u540c\u7406\u5982\u679c $a_j > 0$ \u5219\u5fc5\u6709 $a_j > a_i$\u3002\n\n\u6362\u8a00\u4e4b\uff0c\u5982\u679c $a_i < a_j$\uff0c\u8fd9\u4e2a\u9006\u5e8f\u5bf9\u80fd\u5426\u80fd\u5f62\u6210\u53ea\u53d6\u51b3\u4e8e $a_j$ \u7684\u7b26\u53f7\uff0c\u4e0e $a_i$ \u7684\u7b26\u53f7\u65e0\u5173\u3002\n\n\u6709\u4e86\u8fd9\u4e2a\u6027\u8d28\u6211\u4eec\u5c31\u968f\u4fbf\u505a\u4e86\uff0c\u6211\u4eec\u76f4\u63a5\u6309\u7edd\u5bf9\u503c\u4ece\u5927\u5230\u5c0f\u8003\u8651\u6bcf\u4e2a\u6570\uff0c\u8ba1\u7b97\u8fd9\u4e2a\u6570\u548c\u6bd4\u5b83\u5c0f\u7684\u6570\u6700\u5c11\u80fd\u4ea7\u751f\u591a\u5c11\u9006\u5e8f\u5bf9\u3002\u8d2a\u5fc3\u9009\u62e9\u5373\u53ef\uff0c\u5982\u679c\u5f53\u524d\u6570\u7b26\u53f7\u4e3a\u8d1f\u5c31\u4f1a\u548c\u5de6\u8fb9\u6240\u6709\u7edd\u5bf9\u503c\u5c0f\u4e8e\u5f53\u524d\u6570\u7684\u6570\u6784\u6210\u9006\u5e8f\u5bf9\uff0c\u5426\u5219\u5c31\u4f1a\u4e0e\u53f3\u8fb9\u6240\u6709\u7edd\u5bf9\u503c\u5c0f\u4e8e\u5f53\u524d\u6570\u7684\u6570\u6784\u6210\u9006\u5e8f\u5bf9\uff0c\u53d6\u8f83\u5c0f\u90a3\u4e2a\u5373\u53ef\u3002\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\uff1f\u5e76\u4e0d\uff0c\u867d\u7136\u8fd9\u6837\u53ef\u4ee5 AC\uff0c\u4f46\u662f\u4f60\u6709\u6ca1\u6709\u60f3\u8fc7\u5bf9\u4e8e\u4e00\u5bf9 $(i, j)$ \u6ee1\u8db3 $|a_i| = |a_j|$\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u8d21\u732e\u5982\u4f55\u8ba8\u8bba\uff1f\n\n\u4e00\u4e2a\u6700\u76f4\u63a5\u7684\u505a\u6cd5\u662f\u628a\u521a\u521a\u7684\u8d2a\u5fc3\u505a\u6cd5\u6539\u6210 DP\uff0c\u4ece\u5927\u5230\u5c0f\u8003\u8651\u6bcf\u4e2a\u6570\uff0c\u628a\u5b83\u51fa\u73b0\u7684\u4f4d\u7f6e\u90fd\u62ff\u51fa\u6765\u7136\u540e DP\u3002\n\n\u4e8b\u5b9e\u4e0a\u5e76\u4e0d\u9700\u8981\u90a3\u4e48\u9ebb\u70e6\uff0c\u4f60\u53ef\u4ee5\u53d1\u73b0\u53e6\u4e00\u4e2a\u6027\u8d28\uff0c\u5982\u679c\u6309\u7167\u4e4b\u524d\u7684\u8d2a\u5fc3\u505a\u6cd5\u505a\uff0c\u5bf9\u4e8e $|a_i| = |a_j|$ \u7684\u60c5\u51b5\uff0c\u4e00\u5b9a\u662f\u5de6\u8fb9\u4e00\u4e9b\u7b26\u53f7\u4e3a\u8d1f\uff0c\u53f3\u8fb9\u4e00\u4e9b\u7b26\u53f7\u4e3a\u6b63\uff0c\u8fd9\u6837\u5b83\u4eec\u4e4b\u95f4\u663e\u7136\u662f\u4e0d\u4f1a\u4ea7\u751f\u9006\u5e8f\u5bf9\u7684\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8bf4\u8d2a\u5fc3\u5c31\u662f\u6b64\u9898\u6b63\u89e3\uff08~~\u5f53\u7136\u4f60\u8981\u5199 DP \u4e5f\u6ca1\u95ee\u9898~~\uff09\n\n#### \u53c2\u8003\u4ee3\u7801\n```cpp\n#include <cctype>\n#include <cstdio>\n#include <algorithm>\n\nstruct FSI\n{\n\ttemplate<typename T>\n\tFSI& operator>>(T &res)\n\t{\n\t\tres = 0; T f = 1; char ch = getchar();\n\t\twhile (!isdigit(ch)) { if (ch == '-') f = -1; ch = getchar(); }\n\t\twhile (isdigit(ch)) { res = res * 10 + ch - '0'; ch = getchar(); }\n\t\tres = res * f; return *this;\n\t}\n} read;\n\nusing i64 = long long;\nconst int N = 1e6 + 10;\ninline int lowbit(int x) { return x & -x; }\n\ntemplate<int SIZE>\nstruct BIT\n{\n\tint tr[SIZE];\n\n\tvoid add(int x, int val)\n\t{\n\t\tx += 2;\n\t\tfor (int i = x; i < SIZE; i += lowbit(i))\n\t\t\ttr[i] += val;\n\t}\n\tint query(int x)\n\t{\n\t\tx += 2;\n\t\tint res = 0;\n\t\tfor (int i = x; i; i -= lowbit(i))\n\t\t\tres += tr[i];\n\t\treturn res;\n\t}\n};\nBIT<(int)1e5 + 10> bit1, bit2;\nint n, val[N], ans[N];\n\nint main(void)\n{\n\tread >> n;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tread >> val[i];\n\t\tval[i] = std::abs(val[i]);\n\t}\n\tfor (int i = 1; i <= n; ++i) {\n\t\tans[i] = bit1.query(val[i] - 1);\n\t\tbit1.add(val[i], 1);\n\t}\n\ti64 res = 0;\n\tfor (int i = n; i >= 1; --i) {\n\t\tres += std::min(ans[i], bit2.query(val[i] - 1));\n\t\tbit2.add(val[i], 1);\n\t}\n\tprintf(\"%lld\\n\", res);\n\treturn 0;\n}\n```",
        "postTime": 1649404643,
        "uid": 377370,
        "name": "LroseC",
        "ccfLevel": 8,
        "title": "CF351 \u9898\u89e3"
    },
    {
        "content": "### \u8fd9\u9898\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u8d2a\u5fc3\u9898\n\n\u5176\u5b9e\u521a\u5f00\u59cb\u672c\u849f\u84bb\u662f\u6ca1\u4ec0\u4e48\u601d\u8def\u7684\uff0c\u53ea\u662f\u5728\u60f3\u5982\u679c\u4e00\u4e2a\u6570\u540e\u9762\u6709\u4e00\u4e2a\u6bd4\u5b83\u5c0f\u7684\u6570\u5b57\u4e14\u5b83\u672c\u8eab\u662f\u4e2a\u6b63\u6570\uff0c\u90a3\u4e48\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6570\u6539\u53d8\u6b63\u8d1f\u8fbe\u5230\u51cf\u5c11\u9006\u5e8f\u5bf9\u7684\u76ee\u7684\n\n\u4f46\u662f\u5bf9\u4e8e\u8d1f\u6570\u663e\u7136\u8fd9\u6837\u662f\u65e0\u6cd5\u8fdb\u884c\u6539\u53d8\u7684\n\n\u542c\u4e86\u5b66\u957f\u7684\u89e3\u91ca\uff0c\u672c\u849f\u84bb\u8c8c\u4f3c\u61c2\u4e86\u4e00\u70b9\n\n### \u6211\u4eec\u9996\u5148\u8003\u8651\u5982\u679c\u6539\u53d8\u4e00\u4e2a\u6570\u7684\u6b63\u8d1f\u6027\uff0c\u9006\u5e8f\u5bf9\u4e2a\u6570\u4f1a\u600e\u6837\u53d8\u5316\n\n\u6211\u4eec\u9ed8\u8ba4\uff49>\uff4a\n\n\u5982\u679cabs(a[i])<=abs(a[j])\u65f6\uff0c\u6539\u53d8a[i]\u7684\u6b63\u8d1f\u6027\u5bf9\u7b54\u6848\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\n\n\u4f46\u662f\u5982\u679c\u53cd\u4e4b\uff0c\u5373abs(a[i])>abs(a[j])\uff0c\u5982\u679ca[i]\u662f\u6b63\u6570\uff0c\u90a3\u4e48a[i]\u6052\u5927\u4e8ea[j]\uff0c\u53cd\u4e4b\u5219\u6052\u5c0f\u4e8ea[j]\n\n\u6240\u4ee5\u6211\u4eec\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2aa[i]\u6c42\u51fa\u524d\u540e\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u6ee1\u8db3\u4fee\u6539\u7684\u6761\u4ef6\n\n\u6240\u4ee5\u5c31\u9009\u62e9\u66b4\u529b\u505a\u6cd5\u4e86\uff0c\u4e5f\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5c06\u590d\u6742\u5ea6\u964d\u5230O(nlogn)\n\n\u4f46\u662f\u849f\u84bb\u592a\u5783\u573e\u4e86\uff0c\u5c31\u53ea\u4f1a\u7528\u66b4\u529b\u505a\u4e00\u4e0b\u4e86\n\n## \u4e0b\u9762\u5c31\u662f\u672c\u849f\u84bb\u4e11\u964b\u7684\u4ee3\u7801\n\n```\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N=5555555;\nint read(){\n    int res=0,kkk=1;char ch=' ';\n    while(ch<'0'||ch>'9'){\n        ch=getchar();\n        if(ch=='-')kkk=-1;\n    }\n    while(ch>='0'&&ch<='9'){\n        res=res*10+ch-'0';\n        ch=getchar();\n    }\n    return res*kkk;\n}\nint n,a[N],ans,l,r;\nint main()\n{\n    n=read();\n    for(register int i=1;i<=n;i++)\n        a[i]=read();\n    for(register int i=1;i<=n;i++){\n        l=0,r=0;\n        for(register int j=1;j<=n;j++)\n        {\n            if(j==i)continue;\n            if(abs(a[j])<abs(a[i]))\n            {\n                if(j<i)l++;\n                else if(j>i)r++;\n            }\n        }\n        ans+=min(l,r);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u4e86",
        "postTime": 1552181355,
        "uid": 123318,
        "name": "ViXpop",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF351E \u3010Jeff and Permutation\u3011"
    },
    {
        "content": "## \u89e3\u6790\n\n\uff08\u8bdd\u8bf4\u8fd9\u91cc\u7684\u9006\u5e8f\u5bf9\u662f\u4e25\u683c\u5927\u4e8e...~~\u597d\u50cf\u90fd\u662f\u4e25\u683c\u5927\u4e8e\uff1f~~\uff09\n\n\u9996\u5148\u8003\u8651\u5355\u4e2a\u5143\u7d20\u7684\u6b63\u8d1f\u6027\uff08\u5047\u8bbe\u5176\u4ed6\u5143\u7d20\u90fd\u662f\u6700\u4f18\uff09\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\uff1a\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5b83\u53ea\u80fd\u51b3\u5b9a\u6240\u6709**\u7edd\u5bf9\u503c\u5c0f\u4e8e\u5b83**\u7684\u5143\u7d20\u4e4b\u95f4\u7684\u8d21\u732e\uff0c\u4e14**\u5b8c\u5168**\u65e0\u6cd5\u51b3\u5b9a**\u7edd\u5bf9\u503c\u5927\u4e8e\u5b83**\u7684\u5143\u7d20\u4e4b\u95f4\u7684\u8d21\u732e\u3002\n\n\u53ef\u4ee5\u5148\u8bbe\u60f3\u53ea\u6709\u4e24\u4e2a\u4e0d\u76f8\u540c\u5143\u7d20\u7684\u60c5\u51b5\u3002\u8bbe $a,b$, \u5e76\u4fdd\u8bc1 $|a|>|b|$\uff0c$a$ \u5728 $b$ \u5de6\u4fa7\u3002\n\n1. \u82e5\u8bbe $a$ \u4e3a\u6b63\uff0c$b$ \u4e3a\u6b63\uff0c\u6b64\u65f6\u6709\u9006\u5e8f\u5bf9\n2. \u82e5\u8bbe $a$ \u4e3a\u6b63\uff0c$b$ \u4e3a\u8d1f\uff0c\u6b64\u65f6\u6709\u9006\u5e8f\u5bf9\n3. \u82e5\u8bbe $a$ \u4e3a\u8d1f\uff0c$b$ \u4e3a\u6b63\uff0c\u6b64\u65f6\u65e0\u9006\u5e8f\u5bf9\n4. \u82e5\u8bbe $a$ \u4e3a\u8d1f\uff0c$b$ \u4e3a\u8d1f\uff0c\u6b64\u65f6\u65e0\u9006\u5e8f\u5bf9\n\n![0](https://cdn.luogu.com.cn/upload/image_hosting/139wky7e.png)\n\n\u4e8e\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u53ea\u9700\u6c42\u51fa\u5b83\u5de6\u53f3\u7edd\u5bf9\u503c\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\uff1a\u5982\u679c\u8be5\u5143\u7d20\u53d6\u6b63\uff0c\u5b83\u4f1a\u548c\u53f3\u8fb9\u90a3\u4e9b\u5143\u7d20\u5f62\u6210\u9006\u5e8f\u5bf9\uff1b\u5426\u5219\u5b83\u4f1a\u548c\u5de6\u8fb9\u90a3\u4e9b\u5143\u7d20\u5f62\u6210\u9006\u5e8f\u5bf9\u3002\n\n\u5177\u4f53\u5730\uff0c\u53ea\u9700\u5c06\u6c42\u548c\u6bcf\u4e2a\u5143\u7d20\u7684 $\\text{min(\u5de6\u8fb9\u7edd\u5bf9\u503c\u6bd4\u8be5\u5143\u7d20\u5c0f\u7684\u5143\u7d20\u6570, \u53f3\u8fb9\u7edd\u5bf9\u503c\u6bd4\u8be5\u5143\u7d20\u5c0f\u7684\u5143\u7d20\u6570)}$ \u5373\u53ef\u3002\n\n---\n\n\u53e6\u5916\uff0c\u81f3\u4e8e\u5982\u4f55\u67e5\u8be2\u67d0\u5143\u7d20\u5de6\u53f3\u7edd\u5bf9\u503c\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u6570\uff0c\u6211\u4eec\u53ef\u4ee5**\u4ece\u7edd\u5bf9\u503c\u5927\u5230\u5c0f**\u679a\u4e3e\u5143\u7d20\uff0c\u6bcf\u6b21\u67e5\u8be2\u5b8c\u524d\u4ece\u533a\u95f4\u4e2d**\u5220\u53bb**\u8fd9\u4e2a\u5143\u7d20\u3002\n\n\u6ce8\u610f\u5bf9\u4e8e\u7edd\u5bf9\u503c\u76f8\u540c\u7684\u5143\u7d20\uff0c\u8981\u5148\u5c06\u5b83\u4eec\u5168\u90e8\u5220\u53bb\uff0c\u7136\u540e\u518d\u4e00\u4e2a\u4e2a\u6309**\u5143\u7d20\u4f4d\u7f6e**\u67e5\u8be2\u3002\n\n## CODE\n\n\uff08\u7ebf\u6bb5\u6811\u5b58\u7684\u662f\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u5143\u7d20\uff08\u548c\u503c\u6ca1\u5565\u5173\u7cfb\uff09\uff09\n\n~~\uff08\u600e\u4e48\u611f\u89c9\u4e0a\u9762\u90a3\u53e5\u662f\u5e9f\u8bdd...\uff09~~\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing std::sort;\nusing std::min;\n\nconst int MAXN =1e6+50;\n\nint sum[MAXN<<1], N =1;\nstruct in{\n\tint val, id;\n}a[MAXN];\n\nint cmp(in x, in y){\n\tif(x.val == y.val) return x.id < y.id;\n\treturn x.val > y.val;\n}\n\ninline void pushup(int s){ sum[s] =sum[s<<1]+sum[(s<<1)|1]; }\n\nvoid modify(int x, int s =1, int nl =1, int nr =N){/*\u5220\u53bb\u67d0\u4e2a\u5143\u7d20*/\n\tif(nl == nr) return (void)--sum[s];\n\tint mid =(nl+nr)>>1;\n\tif(x <= mid) modify(x, s<<1, nl, mid);\n\telse modify(x, (s<<1)|1, mid+1, nr);\n\tpushup(s);\n}\n\nint query(int l, int r, int s =1, int nl =1, int nr =N){\n\tif(r < l) return 0;\n\tif(l == nl && r == nr) return sum[s];\n\tint mid =(nl+nr)>>1;\n\tif(r <= mid) return query(l, r, s<<1, nl, mid);\n\telse if(l > mid) return query(l, r, (s<<1)|1, mid+1, nr);\n\telse return query(l, mid, s<<1, nl, mid)+query(mid+1, r, (s<<1)|1, mid+1, nr);\n}\n\ninline int read(){/*\u53cd\u6b63\u662f\u53d6\u7edd\u5bf9\u503c\u5224\u65ad\uff0c\u53ef\u4ee5\u53d6\u53cd\u7b26\u53f7\uff0c\u5c31\u5e72\u8106\u4e0d\u7ba1\u539f\u6765\u7b26\u53f7\u4e86*/\n\tint x =0; char c =getchar();\n\twhile(c < '0' || c > '9') c =getchar();\n\twhile(c >= '0' && c <= '9') x =(x<<1)+(x<<3)+(c^48), c =getchar();\n\treturn x;\n}\n\nin stk[MAXN];\nint tot;\n\nint main(){\n\tint n =read();\n\twhile(N < n) N <<=1;\n\tfor(int i =1; i <= n; ++i) a[i].val =read(), a[i].id =i;\n\tfor(int i =N-1+n; i >= N; --i) sum[i] =1;\n\tfor(int i =N-1; i > 0; --i) sum[i] =sum[i<<1]+sum[(i<<1)|1];\n\tsort(a+1, a+1+n, cmp);\n\tlong long ans =0;\n\tfor(int i =1; i <= n; ++i){\n\t\ttot =0;\n\t\twhile(a[i+1].val == a[i].val && i < n) modify(a[i].id), stk[tot++] =a[i], ++i;/*\u538b\u5165\u6808*/\n\t\tmodify(a[i].id), stk[tot++] =a[i];\n\t\twhile(tot){\n\t\t\tin na =stk[--tot];\n\t\t\tint l =query(1, na.id), r =query(na.id+1, n);\n\t\t\tans +=min(l, r);\n\t\t}\n\t}\n\tprintf(\"%lld\", ans);\n}\n```\n",
        "postTime": 1591536090,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF351E \u3010Jeff and Permutation\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u53ef\u4ee5\u8fc7$n\\le10^6$\u7684\u9898\u89e3\uff08\u5927\u6982\uff09  \n\u8003\u8651\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u6539\u53d8\u5176\u7b26\u53f7\u4f1a\u4ea7\u751f\u600e\u6837\u7684\u5f71\u54cd  \n\u4e0d\u96be\u53d1\u73b0\uff0c\u53ea\u6709\u5f53$|a_j|<|a_i|$\uff0c$a_i$\u7b26\u53f7\u6539\u53d8\u624d\u4f1a\u4f7f\u9006\u5e8f\u5bf9\u6570\u91cf\u53d8\u5316\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u6c42\u51fa$a_i$\u7684\u4e24\u8fb9\u5206\u522b\u6709\u591a\u5c11\u6570\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e$|a_i|$\uff0c\u4e24\u4e2a\u503c\u4e2d\u53d6$min$\uff0c\u52a0\u8d77\u6765\u5c31\u662f\u7b54\u6848\n```cpp\n#include <bits/stdc++.h>\n#define lowbit(x) (x&-x)\n#define jh(x, y) x^=y^=x^=y\n#define rg register\n#define inl inline\ntypedef long long ll;\nconst int N = 1e5 + 5, mod = 1e9 + 7, INF = 0x3f3f3f3f;\nusing namespace std;\nnamespace fast_IO {\n\tinl ll read() {\n\t\trg char c;\n\t\trg ll x = 0;\n\t\trg bool flag = false;\n\t\twhile ((c = getchar()) == ' ' || c == '\\n' || c == '\\r');\n\t\tif (c == EOF)return c; if (c == '-')flag = true; else x = c ^ 48;\n\t\twhile ((c = getchar()) != ' ' && c != '\\n' && c != '\\r'&&~c)\n\t\t\tx = (x << 1) + (x << 3) + (c ^ 48);\n\t\tif (flag)return -x; return x;\n\t}\n\tinl ll max(rg ll a, rg ll b) { if (a > b)return a; return b; }\n\tinl ll min(rg ll a, rg ll b) { if (a < b)return a; return b; }\n\tvoid write(rg ll x) { if (x < 0)putchar('-'), x = -x; if (x >= 10)write(x / 10); putchar(x % 10 ^ 48); }\n}\nint a[N], Hash[N], c[N], sum1[N], sum2[N];\ninl void update(rg int x, rg int data) { for (; x<=*Hash; x += lowbit(x))c[x] += data; }\ninl int query(rg int x) { rg int ans = 0; for (; x; x -= lowbit(x))ans += c[x]; return ans; }\n\nint main(void)\n{\n\trg int n = fast_IO::read();\n\tfor (rg int i = 1; i <= n; ++i)a[i] = Hash[i] = abs(fast_IO::read());\n\tsort(Hash + 1, Hash + n + 1);\n\t*Hash = unique(Hash + 1, Hash + n + 1) - Hash - 1;\n\tfor (rg int i = 1; i <= n; ++i)a[i] = lower_bound(Hash + 1, Hash + *Hash + 1, a[i]) - Hash;\n\tfor (rg int i = 1; i <= n; ++i)sum1[i] = query(a[i] - 1), update(a[i], 1);\n\tmemset(c, 0, sizeof(c));\n\tfor (rg int i = n; i; --i)sum2[i] = query(a[i] - 1), update(a[i], 1);\n\trg int ans = 0;\n\tfor (rg int i = 1; i <= n; ++i)ans += fast_IO::min(sum1[i], sum2[i]);\n\tfast_IO::write(ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1551796682,
        "uid": 87283,
        "name": "Zechariah",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF351E \u3010Jeff and Permutation\u3011"
    }
]