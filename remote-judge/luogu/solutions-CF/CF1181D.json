[
    {
        "content": "\u5982\u679c\u6240\u6709\u57ce\u5e02\u4e3e\u529e\u6b21\u6570\u4e00\u6837\uff0c\u4e3e\u529e\u65b9\u5f0f\u5c06\u662f$1,2,...,m,1,...$\n\n\u73b0\u5728\u7684\u95ee\u9898\u662f\uff1a\u53ef\u80fd\u4f1a\u8df3\u8fc7\u4e00\u4e9b\u57ce\u5e02\n\n\u5982\u679c\u77e5\u9053\u8981\u8df3\u8fc7\u591a\u5c11\u57ce\u5e02\uff0c\u5c31\u53ef\u4ee5$\\mathcal O(1)$\u8ba1\u7b97\u7b54\u6848\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u8981\u8df3\u8fc7\u7684\u57ce\u5e02\u6570\u91cf\u5355\u8c03\u4e0d\u51cf\uff0c\u60f3\u5230\u4e8c\u5206\n\n\u524d$n$\u573a\u6bd4\u8d5b\u6bcf\u573a\u90fd\u4f1a\u4f7f\u67d0\u4e2a\u57ce\u5e02\u5728\u67d0\u6b21\u6bd4\u8d5b\u65f6\u88ab\u8df3\u8fc7\n\n\u8bbe$n=0$\u65f6\u7b2c$i$\u573a\u6bd4\u8d5b\u5e94\u8be5\u5728\u65f6\u95f4$T_i$\u88ab\u4e3e\u529e\n\n\u4e00\u6b21\u6bd4\u8d5b\u5bfc\u81f4\u7684\u201c\u8df3\u8fc7\u57ce\u5e02\u201d\u7684\u53d1\u751f\u65f6\u95f4\uff08\u8bb0\u7b2c$n+1$\u573a\u4e3a\u65f6\u95f4$0$\uff09\n\n$t_i=T_i-1-\\sum_j[T_j<T_i]$\n\n$\\sum_j[T_j<T_i]$\u5373\u6bd4$T_i$\u5c0f\u7684$T$\u7684\u4e2a\u6570\n\n\u628a$T$\u6392\u5e8f\u540e\u51cf\u53bb\u4e0b\u6807\u5373\u53ef\u5b9e\u73b0\n\n\u8be2\u95ee\u65f6\u4e8c\u5206\u5f97\u5230$T_i<k-n$\u7684\u4e2a\u6570\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\mathcal O((n+q)\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=500001;\nint n,m,q,c[N];\nll a[N],k;\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&q);\n    for(int x,i=1;i<=n;++i)\n        scanf(\"%d\",&x),a[i]=(ll)(c[x]++)*m+x;\n    sort(a+1,a+n+1);\n    for(int i=1;i<=n;++i)a[i]-=i;\n    while(q--){\n        scanf(\"%lld\",&k);\n        k+=lower_bound(a+1,a+n+1,k-n)-a-1-n;\n        printf(\"%lld\\n\",(k-1)%m+1);\n    }\n}\n```\n",
        "postTime": 1562053377,
        "uid": 35406,
        "name": "\u300c\u5df2\u6ce8\u9500\u300d",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1181D \u3010Irrigation\u3011"
    },
    {
        "content": "\u6ce8\uff1a\u8bf7\u4e0d\u8981\u641e\u9519\uff0c\u672c\u9898\u89e3\u5c31\u662fCF1181D\u7684\u9898\u89e3\u2026\u2026\n\n## \u770b\u5230\u5927\u591a\u6570\u4eba\u7528\u7684\u90fd\u662f\u79bb\u7ebf\u8be2\u95ee\u5904\u7406\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u5728\u7ebf\u3001\u4ee3\u7801\u77ed\u3001\uff08\u5e38\u6570\u5c0f\uff1f\uff09\u7684\u7b97\u6cd5\u3002\n\n\u9996\u5148\uff0c\u50cf\u5b98\u65b9\u9898\u89e3\u8bf4\u7684\u90a3\u6837\uff0c\u628a\u5b83\u770b\u6210\u4e00\u4e2a\u4e2a\u77e9\u5f62\uff0c\u6bcf\u4e00\u6b21\u6311\u4e00\u4e2a\u9ad8\u5ea6\u6700\u5c0f\u7684\u628a\u5b83\u52a0$1$\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\uff0c\u5982\u679c\u6ca1\u6709\u521a\u5f00\u59cb\u90a3$n$\u5e74\u7684\u968f\u673a\u4e71\u6446\uff0c\u76f4\u63a5\u4ece\u4e00\u7247\u5e73\u5730\uff08\u6ca1\u6709\u77e9\u5f62\uff09\u5f00\u59cb\u52a0\uff0c\u53d1\u73b0\u7b54\u6848\u5c31\u662f$(k-1)$ $mod$ $m+1$\uff0c\u89c6\u8fd9\u79cd\u60c5\u51b5\u4e3a\u4e00\u822c\u60c5\u51b5\u3002\n\n\u4f46\u662f\uff0c\u73b0\u5728\u6709\u4e86\u524d$n$\u5e74\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u89c6\u4e3a\u628a\u524d$n$\u4e2a\u77e9\u5f62\u7684\u6446\u653e\u987a\u5e8f\u63d0\u524d\u7684\u7279\u6b8a\u60c5\u51b5\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u9884\u5904\u7406\u4e00\u4e2a\u6570\u7ec4$a$\uff0c\u8868\u793a\u7b2c$i$\u5e74\u6240\u8981\u6446\u653e\u7684\u77e9\u5f62\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\u5728$a[i]$\u5e74\u624d\u80fd\u88ab\u6446\u5230\uff0c\u518d\u628a$a$\u6570\u7ec4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ece\u7b2c$n+1$\u5e74\u5f00\u59cb\u6446\u653e\u7684\u77e9\u5f62\uff0c\u90fd\u662f\u5c3d\u91cf\u4f7f\u6bcf\u4e00\u5217\u7684\u603b\u77e9\u5f62\u9ad8\u5ea6\u63a5\u8fd1\uff0c\u4e5f\u5c31\u662f\u63a5\u8fd1\u4e00\u822c\u60c5\u51b5\u3002\n\n\u90a3\u4e48\uff0c\u5982\u679c$k>a[n]$\uff0c\u5c31\u76f4\u63a5\u53d8\u6210\u4e86\u4e00\u822c\u60c5\u51b5\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa$(k-1)$ $mod$ $m+1$\u3002\n\n\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u4f8b\u5982\uff1a\n\n```cpp\n  0  \n  0  \n0 000\n00000\n```\n\n\u90a3\u4e48$a[n]$\u5c31\u662f$13$\uff08\u6700\u9ad8\u7684\u90a3\u4e2a\u77e9\u5f62\uff09\uff0c\u82e5$k>13$\uff0c\u5219\u5148\u4f1a\u53d8\u6210\u8fd9\u6837\uff1a\n\n```cpp\n000\n00000\n00000\n00000\n```\n\n\u8fd9\u4e0d\u5c31\u662f\u4e00\u822c\u60c5\u51b5\u5417\uff1f\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8003\u8651$k\u2264a[n]$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u8003\u8651\u8fd9\u4e9b\u65b0\u6446\u7684\u77e9\u5f62\u5bf9\u4e8e$k$\u7684\u5f71\u54cd\u5373\u53ef\uff08\u80af\u5b9a\u6709\u5f71\u54cd\uff0c\u56e0\u4e3a\u5b83\u65e0\u6cd5\u53d8\u6210\u4e00\u822c\u60c5\u51b5\uff09\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u518d\u5904\u7406\u51fa\u6570\u7ec4$b[i]=a[i]-i$\uff0c\u8868\u793a\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5148\u6446\u7684\u77e9\u5f62\u524d\u9762\u8fd8\u6709\u591a\u5c11\u4e2a\u77e9\u5f62\u6ca1\u6709\u6446\uff0c\u56e0\u4e3a$i$\u8868\u793a\u5f53\u524d\u5df2\u6709$i$\u4e2a\u77e9\u5f62\uff0c\u4f46\u671f\u671b\uff08\u4e00\u822c\u60c5\u51b5\uff09\u662f\u8981$a[i]$\u4e2a\u3002\n\n\u6211\u4eec\u5c1d\u8bd5\u627e\u5230\u7b2c$k$\u4e2a\u77e9\u5f62\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u5e94\u8be5\u6446\u5230\u4e00\u822c\u60c5\u51b5\u4e0b\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\uff0c\u5bf9\u63a5\u4e0b\u6765\u6709\u5f71\u54cd\u7684\u53ea\u6709$b[i]$\u5c0f\u4e8e\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u77e9\u5f62\u4e86\uff08\u56e0\u4e3a\u8fd9\u4e9b\u77e9\u5f62\u4f1a\u628a\u672c\u6765\u8be5\u653e\u7684\u4f4d\u7f6e\u5360\u4f4f\uff09\u3002\n\n\u7136\u800c\uff0c\u6211\u4eec\u5df2\u7ecf\u628a$a$\u6392\u5e8f\uff0c\u800c$a$\u4e2d\u7684\u6570\u4e92\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5$b$\u6570\u7ec4\u4ecd\u6709\u5355\u8c03\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4e8c\u5206\u627e\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u81f3\u4e8e\u5982\u679c\u8981\u6d88\u9664\u5f71\u54cd\uff0c\u76f4\u63a5\u628a$k$\u51cf\u53bb\u5c0f\u4e8e\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u77e9\u5f62\u7684\u4e2a\u6570\u7136\u540e\u518d\u6309\u7167\u4e00\u822c\u60c5\u51b5\u8f93\u51fa\u5373\u53ef\uff08\u60f3\u60f3\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O((n+q)logn)$\uff0c\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u7ed3\u6784\uff0c\u5e38\u6570\u5f88\u5c0f\u3002\u5982\u679c\u6709\u52a0\u5f3a\uff0c\u53ef\u4ee5\u628a$m$\u8bbe\u6210$1e9$\u2026\u2026\n\n~~\u4ee3\u7801\u5f88\u77ed\uff0c\u5982\u679c\u4e0d\u52a0\u4e0a\u5feb\u8bfb\u7b49\uff0c\u53ef\u4ee5\u4e0d\u523020\u884c\u2026\u2026~~\n\n### \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<utility>\n#include<algorithm>\nusing namespace std;\n#define res register int\n#define ll long long\n//#define cccgift\n#define getchar()(p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++) //fread\u4f18\u5316 \nchar buf[1<<21],*p1=buf,*p2=buf;\nnamespace wode{\n    template<typename T> //\u5feb\u8bfb \n    inline void read(T &x)\n    {\n        static char ch;bool f=1;\n        for(x=0,ch=getchar();!isdigit(ch);ch=getchar()) if(ch=='-') f=0;\n        for(;isdigit(ch);x=(x<<1)+(x<<3)+(ch^48),ch=getchar());x=f?x:-x;\n    }\n    template<typename T> //\u5feb\u8f93 \n    inline void print(T x,char ch=0) {\n    \tif(!x) {putchar(48);if(ch) putchar(ch);return;}\n    \tif(x<0) putchar('-'),x=-x;\n    \tstatic int Stack[sizeof(T)*3],top=-1;\n    \tfor(;x;Stack[++top]=x%10,x/=10);\n    \tfor(;~top;putchar(Stack[top--]+48));\n    \tif(ch) putchar(ch);\n    }\n    template<typename T>\n    inline T max(T x,T y) {return x<y?y:x;}\n    template<typename T>\n    inline T min(T x,T y) {return x<y?x:y;}\n    template<typename T>\n    inline void chkmax(T &x,T y) {x=x<y?y:x;}\n    template<typename T>\n    inline void chkmin(T &x,T y) {x=x<y?x:y;}\n}\nusing wode::read;using wode::chkmin;using wode::chkmax;using wode::print;\nll a[500001],k;\nint tot[500001],n,m,q,x; //tot\u6570\u7ec4\u8868\u793a\u6bcf\u4e00\u5217\u7684\u603b\u77e9\u5f62\u9ad8\u5ea6\uff0c\u7528\u4e8e\u4e0b\u9762\u5904\u7406a\u6570\u7ec4\u3002\nint main()\n{\n    read(n),read(m),read(q);\n    for(res i=1;i<=n;++i) read(x),a[i]=(ll)(tot[x]++)*m+x;\n    sort(a+1,a+1+n);for(res i=1;i<=n;++i) a[i]-=i; //\u8fd9\u91cc\u76f4\u63a5\u628aa\u53d8\u6210b\u4e86\uff0c\u56e0\u4e3a\u63a5\u4e0b\u6765\u53ea\u9700\u8981\u7528\u5230a[n]\u3002 \n    while(q--) {\n    \tread(k);if(k<=a[n]+n) k+=lower_bound(a+1,a+1+n,k-n)-a-n-1; //\u4e8c\u5206\u67e5\u627e\u5e76\u51cf\u53bb\uff08\u8fd9\u91cc\u76f4\u63a5\u53cd\u7740\u627e\u4e86\uff09\n    \tprint((k-1)%m+1,'\\n');\n    }\n    return 0;\n}\n```",
        "postTime": 1560870261,
        "uid": 43697,
        "name": "chenyewei_1234",
        "ccfLevel": 7,
        "title": "CF1181D Irrigation"
    },
    {
        "content": "\n \u7ecf\u7b80\u5355\u5206\u6790\u53ef\u77e5\n\n\u82e5\u662f $n = 0$\uff0c\u90a3\u4e48\u4ee5\u540e\u7684\u6bd4\u8d5b\u5c06\u4f1a\u6709\u5468\u671f\u6027\uff1a$1,2,3,\\dots,m$\u3002\n\n\u8fdb\u4e00\u6b65\u6765\u8bf4\uff0c\u4e00\u5b9a\u5b58\u5728\u67d0\u4e2a\u503c\u4f7f\u5f97\uff0c\u5f53 k \u9ad8\u4e8e\u8fd9\u4e2a\u503c\u7684\u65f6\u5019\u5c06\u4f1a\u5448\u73b0\u4e8e m \u6709\u5173\u7684\u5468\u671f\u6027\u3002\u4ed4\u7ec6\u5206\u6790\u4e4b\u540e\u53ef\u77e5\uff0c\u8fd9\u4e2a\u503c\u4e3a $h\\times m - n$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u8003\u8651 k \u5c0f\u4e8e\u8fd9\u4e2a\u4e34\u754c\u503c\u7684\u8be2\u95ee\uff08\u5927\u4e8e\u7684\u76f4\u63a5\u53d6\u6a21\u5c31\u884c\n\n\u518d\u5c06\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\n\n\u5c06 n \u6b21\u64cd\u4f5c\u89c6\u4e3a\u6bcf\u6b21\u7ed9\u6bcf\u4e2a\u70b9 +1\uff0c\u8bb0\u4e3a $h[i]$ \u3002\u7136\u540e\u6392\u4e00\u904d\u5e8f\u3002\u8bbe\u4e00\u4e2a\u6307\u9488\u4e3a p \uff0c\u4ece\u6700\u4f4e\u7684\u5411\u9ad8\u4f4d\u4f9d\u6b21\u63a8\u8fdb\uff0c\u5f53\u6bcf\u9047\u5230\u4e00\u4e2a\u65b0\u7684 h \u65f6\uff0c\u6211\u4eec\u8003\u8651\u524dp\u4e2a\u6570\u90fd\u9700\u8981\u518d\u4e3e\u529e\u5230 h \u6b21\uff0c\u7136\u540e\u624d\u80fd\u5411\u4e0b\u679a\u4e3e\u3002\u8fd9\u65f6\u6211\u4eec\u7684\u95ee\u9898\u5c31\u53ea\u5173\u4e8e\u8fd9\u524d p \u4e2a\u6570\uff0c\u524d p \u4e2a\u6570\u53c8\u4e00\u5171\u9700\u8981\u4e3e\u529e $h\\times p$ \u6b21\uff0c\u6240\u4ee5\u53ea\u8981\u4e00\u4e2a\u8be2\u95ee\u4e0d\u5927\u4e8e $h\\times p$ \uff0c\u6211\u4eec\u5c31\u5728\u672c\u6b21\u89e3\u51b3\uff0c\u7136\u540e\u9700\u8981\u67e5\u8be2\u4e00\u4e0b\u524d p \u4e2a\u6570\u7684\u4e0b\u6807\u7b2c k \u5927\uff0c\u8fd9\u91cc\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u4e0a\u500d\u589e\u89e3\u51b3\u3002\n\n\u51ed\u501f\u6811\u72b6\u6570\u7ec4\u7684\u5c0f\u5e38\u6570\uff0c\u76ee\u524d\u6210\u529f\u82df\u5728 rk2\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define int long long\n#define lowbit(x) (x & (-x))\n\nchar xch,xB[1<<15],*xS=xB,*xTT=xB;\n#define getc() (xS==xTT&&(xTT=(xS=xB)+fread(xB,1,1<<15,stdin),xS==xTT)?0:*xS++)\ntemplate<typename _T>\ninline int read(_T &x)\n{\n    x=0;\n\tint f=1;char ch=getc();\n    while(ch<'0'|ch>'9'){if(ch=='-')f=-1;ch=getc();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getc();}\n    return x*f;\n}\n\nconst int np = 5e5 + 5;\nstruct query{\n\tint tim;\n\tint id;\n\tfriend bool operator<(const query &a,const query &b)\n\t{\n\t\treturn a.tim < b.tim;\n\t}\n\t\n}qry[np + 10];\nint n,h[np + 10],b[np + 10],index[np + 10];\nint lg[np + 10];\nint tree[np + 10],ans[np + 10];\n\ninline bool cmp(int a,int b)\n{\n\treturn h[a] < h[b];\n}\n\ninline int add(int x)\n{\n\twhile(x <= n)\n\t{\n\t\ttree[x] += 1;\n\t\tx += lowbit(x);\n\t}\n}\n\ninline int binary(int kth)\n{\n\tint res = 0;\n\tint step = 0;\n\tkth--;\n\tfor(int i=lg[n];i>=0;i--)\n\t{\n\t\tif(step + (1 << i) > n) continue;\n\t\tif(res + tree[step + (1 << i)] <= kth)\n\t\t{\n\t\t\tres += tree[step + (1 << i)];\n\t\t\tstep += 1 << i;\n\t\t}\n\t}\n\treturn step + 1;\n}\n\nsigned  main()\n{\n\tint m,q;\n\tread(m);\n\tread(n);\n\tread(q);\n\tfor(int i=1,x;i<=m;i++)\n\t{\n\t\tread(x);\n\t\th[x] ++ ;\n\t }\n\tint maxn = 0;\n\tfor(int i=1;i<=n;i++) maxn = max(maxn , b[i]= h[i]),index[i] = i; \n\tfor(int i=2;i<=n;i++) lg[i] = lg[i>>1] + 1;\n\t\n\tint lim = maxn * n - m;\n\t\n\tsort(b + 1,b + 1 + n);\n\tsort(index + 1,index + 1 + n,cmp);\n\t\n\tfor(int i=1,x;i<=q;i++)\n\t{\n\t\tread(x);\n\t\tx -= m;\n\t\tqry[i] = (query){x,i};\n\t}\n\tsort(qry + 1,qry + 1 + q);\n\t\n\tint p = 1;\n\tint res = 0;\n\tadd(index[1]);\n\tfor(int i=1;i<=q;)\n\t{\n\t\tif(qry[i].tim> lim)\n\t\t{\n\t\t\tif((qry[i].tim-lim) % n == 0) ans[qry[i].id] = n;\n\t\t\telse ans[qry[i].id] = (qry[i].tim-lim) % n;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\twhile(b[p + 1] == b[p]) add(index[++p]);\n\t\tint c = b[p + 1] - b[p];\n\t\twhile(res < qry[i].tim && qry[i].tim <= res + p * c)\n\t\t{\n\t\t\tint g = qry[i].tim - res;\n\t\t\tif(g % p == 0) g = binary(p);\n\t\t\telse g = binary(g%p);\n\t\t\tans[qry[i].id] = g;\n\t\t\ti++;\n\t\t}\n\t\tres += p * c;\n\t\tp++;\n\t\tadd(index[p]);\n\t}\n\t\n\tfor(int i=1;i<=q;i++)\n\t\tprintf(\"%lld \",ans[i]);\n\treturn 0;\n }\n```",
        "postTime": 1626786244,
        "uid": 307042,
        "name": "\u4e00Iris\u4e00",
        "ccfLevel": 7,
        "title": "CF1181D Irrigation"
    },
    {
        "content": "~~\u5728\u7ebf\u548b\u505a~~\n\n\u8003\u8651\u53ea\u6709\u4e00\u4e2a\u8be2\u95ee,\u8be2\u95ee\u7b2c$x$\u6b21\u7684\u57ce\u5e02.\u5148\u4ee4$x$\u51cf\u53bb$m$.  \n\u8bbe\u4e3e\u529e\u6b21\u6570\u6700\u5c11\u7684\u57ce\u5e02\u4e3a$cnt$\u4e2a.\u63a5\u4e0b\u6765\u6709\u4e24\u79cd\u60c5\u51b5:$x\\le cnt:$$cnt$\u4e2a\u57ce\u5e02\u4e2d\u7b2c$x$\u5c0f\u7684\u7f16\u53f7\u5c31\u662f\u7b54\u6848;$x>cnt$\u5219\u6700\u5c0f\u7684\u57ce\u5e02\u90fd\u5c06\u4e3e\u529e\u4e00\u6b21,\u76f4\u5230\u53d8\u6210\u6b21\u5c0f\u7684.\u518d\u4ee4$x$\u51cf\u53bb$cnt,$\u91cd\u590d\u8be5\u8fc7\u7a0b\u5373\u53ef.\u663e\u7136\u53ef\u4ee5\u6743\u503c\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\u7ef4\u62a4.\n\n\u6700\u540e\u53c8\u4e24\u79cd\u60c5\u51b5:\u6240\u6709\u57ce\u5e02\u4e3e\u529e\u6b21\u6570\u90fd\u76f8\u540c\u4e86,\u6b64\u65f6$(x-1)\\ mod\\ n+1$\u5c31\u662f\u7b54\u6848.\u5426\u5219\u5df2\u7ecf\u5904\u7406\u8fc7\u4e86.\n\n\u5bf9\u4e8e\u591a\u7ec4\u8be2\u95ee,\u79bb\u7ebf\u6392\u5e8f\u5373\u53ef.\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O((q+n)\\log n)$\n\n```cpp\n/**********/\n#define MAXN 500011\nll n,m,q;\nstruct Segment_Tree\n{\n    ll t[MAXN<<2|1];\n    #define rt t[num]\n    #define tl t[num<<1]\n    #define tr t[num<<1|1]\n    void modify(un pos,ll k,un l=1,un r=n,un num=1)\n    {\n        if(l==r){rt+=k;return;}\n        un mid=(l+r)>>1;\n        if(pos<=mid)modify(pos,k,l,mid,num<<1);\n        else modify(pos,k,mid+1,r,num<<1|1);\n        rt=tl+tr;\n    }\n    ll Qkth(ll k,un l=1,un r=n,un num=1)\n    {\n        if(l==r)return l;\n        un mid=(l+r)>>1;\n        if(k<=tl)return Qkth(k,l,mid,num<<1);\n        else return Qkth(k-tl,mid+1,r,num<<1|1);\n    }\n    ll size(){return t[1];}\n}sgt;\nstd::vector<ll>g[MAXN];\nll c[MAXN],ans[MAXN];\npll query[MAXN];\nint main()\n{\n    m=read(),n=read(),q=read();\n    for(ll i=1;i<=m;++i)++c[read()];\n    for(ll i=1;i<=n;++i)g[c[i]].push_back(i);\n    for(ll i=1;i<=q;++i)query[i]=pll(read()-m,i);\n    std::sort(query+1,query+q+1);\n    ll cur=0,sum=0,it=1;\n    for(ll i=0;i<=m;++i)\n    {\n        for(auto x:g[i])sgt.modify(x,1),++cur;\n        while(it<=q&&query[it].first-sum<=cur)ans[query[it].second]=sgt.Qkth(query[it].first-sum),++it;\n        sum+=cur;\n    }\n    while(it<=q)ans[query[it].second]=sgt.Qkth((query[it].first-sum-1)%n+1),++it;\n    for(ll i=1;i<=q;++i)printf(\"%lld\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1585813006,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1181D \u3010Irrigation\u3011"
    },
    {
        "content": "# \u3010\u9898\u89e3\u3011CF1181D Irrigation\n\n## \u9898\u610f\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/CF1181D)\n\n\u7ed9\u5b9a$M$\u4e2a\u57ce\u5e02\uff0c\u6bcf\u5e74\u4f1a\u9009\u51fa\u4e00\u4e2a\u57ce\u5e02\u4e3e\u529e\u6bd4\u8d5b\uff0c\u73b0\u7ed9\u51fa\u524d$N$\u5e74\u57ce\u5e02\u4e3e\u529e\u6bd4\u8d5b\u7684\u60c5\u51b5\u3002\u5728\u63a5\u4e0b\u6765\u7684\u5e74\u4efd\u4e2d\uff0c\u6bcf\u5e74\u7684\u6bd4\u8d5b\u4f1a\u5728\u4e3e\u529e\u6bd4\u8d5b\u6b21\u6570\u6700\u5c0f\u7684\u57ce\u5e02\u4e3e\u529e\uff0c\u5982\u679c\u6709\u5f88\u591a\u57ce\u5e02\u4e3e\u529e\u6b21\u6570\u5747\u4e3a\u6700\u5c0f\u503c\uff0c\u5219\u5728\u7f16\u53f7\u6700\u5c0f\u7684\u57ce\u5e02\u4e3e\u529e\u6bd4\u8d5b\u3002\u73b0\u7ed9\u51fa $Q$\u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7b2c $K$ \u5e74\u5728\u54ea\u4e2a\u57ce\u5e02\u4e3e\u529e\u6bd4\u8d5b\u3002\n\n## \u5206\u6790\n\n\u7531\u4e8e\u4e2a\u4eba\u4e60\u60ef\uff0c\u628a\u9898\u76ee\u4e2d\u7684$n$\u548c$m$\u610f\u4e49\u4e92\u6362\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u62bd\u8c61\u6210\u6709$n$\u4e2a\u5bbd\u5ea6\u76f8\u7b49\u9ad8\u5ea6\u4e0d\u540c\u7684\u77e9\u5f62\uff0c\u7ed9\u51fa\u521d\u59cb\u9ad8\u5ea6\uff0c\u6bcf\u6b21\u9009\u53d6\u6700\u77ee\u7684\u77e9\u5f62\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\uff0c\u5e76\u628a\u5b83\u7684\u9ad8\u5ea6+1\uff0c\u7136\u540e\u4e0d\u65ad\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u8981\u6c42\u56de\u7b54\u7b2c$K$\u6b21\u9009\u53d6\u7684\u77e9\u5f62\u7684\u7f16\u53f7\u3002\n\n\u6211\u4eec\u770b\u5230\u8981\u9009\u53d6\u7f16\u53f7\u6700\u5c0f\u7684\uff0c\u90a3\u4e48\u6beb\u4e0d\u72b9\u8c6b\u5148\u6392\u5e8f\u3002~~\uff08\u9047\u4e8b\u4e0d\u51b3\u5148\u6392\u5e8f\uff09~~\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u539f\u95ee\u9898\u53d8\u6210\u5982\u4e0b\u56fe\u4e00\u6837\uff1a\n\n![VLzwKs.png](https://s2.ax1x.com/2019/06/19/VLzwKs.png)\n\n\u6211\u4eec\u53d1\u73b0\u6709\u51e0\u4e2a\u9ad8\u5ea6\u76f8\u540c\u7684\u77e9\u5f62\u4f1a\u7ec4\u6210\u4e00\u6bb5\u201c\u5e73\u53f0\u201d\u3002\u4e8e\u662f\u60f3\u60f3\u600e\u4e48\u6c42\u8fd9\u79cd\u201c\u5e73\u53f0\u201d\u3002\n\n\u5982\u679c\u6211\u5355\u72ec\u5730\u628a\u4e00\u6bb5\u201c\u5e73\u53f0\u62ff\u51fa\u6765\u201d\uff0c\u7531\u4e8e\u9ad8\u5ea6\u76f8\u540c\uff0c\u90a3\u4e48\u5b83\u4eec\u88ab\u9009\u62e9\u7684\u987a\u5e8f\u4e00\u5b9a\u662f\u6309\u7f16\u53f7\u5927\u5c0f\u6392\u5e8f\u5e76\u5f62\u6210\u5faa\u73af\u7684\u3002\u90a3\u4e48\u5047\u5982\u6211\u8981\u5728\u8fd9\u4e2a\u5e73\u53f0\u7684\u57fa\u7840\u4e0a\u6c42\u7b2c$k$\u6b21\u9009\u62e9\uff0c\u90a3\u4e48\u6211\u4eec\u5b9e\u9645\u4e0a\u6c42\u7684\u662f\u8fd9\u6bb5\u5e73\u53f0\u4e2d\u7f16\u53f7\u7b2c$k \\% len$\u5c0f\u7684\uff08\u5176\u4e2d$len$\u662f\u5e73\u53f0\u7684\u957f\u5ea6\uff0c\u5e76\u4e14\u5982\u679c$k\\%len=0$\uff0c\u90a3\u4e48\u5c31\u662f\u7f16\u53f7\u6700\u5927\u7684\uff09\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u6c42\u5e73\u53f0\u4e2d\u7b2c$k$\u5c0f\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6743\u503c\u7ebf\u6bb5\u6811~~\u5e73\u8861\u6811~~\u7ef4\u62a4\u3002\n\n---\n\n\u7136\u800c\u5f88\u4e0d\u5e78\uff0c\u6211\u4eec\u7684\u95ee\u9898\u4e2d\u663e\u7136\u4e0d\u53ea\u4e00\u4e2a\u5e73\u53f0\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4ece\u4f4e\u5230\u9ad8\u8fdb\u884c\u201c\u586b\u5751\u64cd\u4f5c\u201d\u3002~~\u5077\u4e00\u5f20\u5b98\u65b9\u9898\u89e3\u7684\u56fe~~\u3002\n\n\u4e3a\u4e86\u5904\u7406\u65b9\u4fbf\uff0c\u6211\u4eec\u628a\u8be2\u95ee\u79bb\u7ebf\uff0c\u6309\u7167$k$\u7684\u5927\u5c0f\uff08\u5373\u5148\u540e\u987a\u5e8f\uff09\u6392\u5e8f\u3002\n\n![VOSmd0.png](https://s2.ax1x.com/2019/06/19/VOSmd0.png)\n\n\u6bd4\u5982\u5728\u8fd9\u5f20\u56fe\u4e2d\uff0c\u524d\u4e09\u4e2a\u77e9\u5f62\u6784\u6210\u4e86\u4e24\u4e2a\u5e73\u53f0\uff0c\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u9ad8\u5ea6\u66f4\u9ad8\u7684$\\{2,5\\}$\u5e76\u4e0d\u4f1a\u5bf9$3$\u4ea7\u751f\u5f71\u54cd\uff0c\u5fc5\u987b\u5f97\u7b49\u5230$3$\u5230\u8fbe$\\{2,5\\}$\u7684\u9ad8\u5ea6\u540e\u624d\u4f1a\u88ab\u5f71\u54cd\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u653e\u5fc3\u5730\u5148\u628a$3$\u586b\u81f3$\\{2,5\\}$\u7684\u9ad8\u5ea6\uff0c\u7136\u540e\u628a$3$\u52a0\u5165\u5230\u5e73\u53f0\u4e2d\u5f62\u6210$\\{2,3,5\\}$\u8fd9\u6837\u7684\u4e00\u4e2a\u5e73\u53f0\u3002\u663e\u7136\u7ecf\u8fc7\u586b\u5751\u64cd\u4f5c\u540e\uff0c\u6240\u6709\u7684\u5e73\u53f0\u90fd\u662f\u539f\u5e8f\u5217\u7684\u524d\u7f00\u3002\u5728\u586b\u5751\u8fc7\u7a0b\u4e2d\uff0c\u6709\u4e00\u4e9b\u8be2\u95ee\u662f\u53ef\u4ee5\u88ab\u56de\u7b54\u7684\uff0c\u90a3\u4e48\u5c31\u901a\u8fc7\u5e73\u53f0\u7684\u6027\u8d28\u8fdb\u884c\u56de\u7b54\u3002\u540c\u65f6\u6211\u4eec\u4e5f\u8981\u628a\u65b0\u52a0\u5165\u5230\u5e73\u53f0\u7684\u5143\u7d20\u63d2\u5165\u5230\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\uff0c\u4ee5\u4fbf\u4e0b\u4e00\u6b21\u67e5\u8be2\u3002\n\n---\n\n## \u5b9e\u73b0\u7ec6\u8282\n\n\u5728\u5904\u7406\u5e73\u53f0\u548c\u8be2\u95ee\u7684\u65f6\u5019\u53ef\u4ee5\u5206\u522b\u8bb0\u5f55\u4e00\u4e2a\u6307\u9488\uff0c\u8868\u793a\u5f53\u524d\u5904\u7406\u5230\u54ea\u4e00\u4e2a\u77e9\u5f62\u6216\u8be2\u95ee\u3002\u540c\u65f6\u518d\u7ef4\u62a4\u4e00\u4e2a$now$\u8868\u793a\u5f53\u524d\u5df2\u7ecf\u8fdb\u884c\u4e86\u51e0\u6b21\u9009\u62e9\uff08\u521d\u59cb\u503c\u4e3a\u7ed9\u5b9a\u7684\u5df2\u64cd\u4f5c\u6b21\u6570\uff09\u3002\u7136\u540e\u5bf9\u4e8e\u77e9\u5f62\uff0c\u6bcf\u6b21\u5411\u540e\u627e\u5230\u4e00\u4e2a\u5e73\u53f0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u628a\u5e73\u53f0\u4e2d\u7684\u77e9\u5f62\u7f16\u53f7\u63d2\u5165\u5230\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\u3002\u63a5\u7740\u5411\u540e\u679a\u4e3e\u8be2\u95ee\uff0c\u5982\u679c\u5f53\u524d\u7684$now$\u52a0\u4e0a\u4e0b\u4e00\u4e2a\u5e73\u53f0\u88ab\u586b\u6ee1\u6240\u9700\u7684\u64cd\u4f5c\u6b21\u6570\u5927\u4e8e\u8be2\u95ee\uff0c\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e2a\u8be2\u95ee\u53ef\u4ee5\u5728\u8fd9\u6b21\u586b\u5751\u4e2d\u88ab\u56de\u7b54\uff0c\u90a3\u4e48\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\u67e5\u8be2\u5f97\u5230\u7b54\u6848\u3002\u6700\u540e$now$\u7d2f\u52a0\u4e0a\u586b\u5751\u6240\u9700\u64cd\u4f5c\u6b21\u6570\u5373\u53ef\u3002\n\n## \u590d\u6742\u5ea6\n\n\u6211\u4eec\u7684\u4e24\u4e2a\u6307\u9488\u90fd\u662f\u7ebf\u6027\u626b\u63cf\u7684\uff0c\u6240\u4ee5\u5904\u7406\u8be2\u95ee\u90e8\u5206\u662f$O((n+q)logn)$\u7684\uff0c\u7531\u4e8e\u524d\u9762\u9700\u8981\u4e00\u904d\u6392\u5e8f\u4e5f\u9700\u8981$O(nlogn)$\u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6$O((n+q)logn)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define MAX 500005\n#define lc(x) (x<<1)\n#define rc(x) (x<<1|1)\n#define mid ((l+r)>>1)\nusing namespace std;\n\nnamespace sgt{\n    int s[MAX*4];\n\n    void push_up(int p){\n        s[p] = s[lc(p)]+s[rc(p)];\n    }\n\n    void update(int p, int l, int r, int u, int k){\n        if(l == r){\n            s[p] += k;\n            return;\n        }\n        if(mid >= u) update(lc(p), l, mid, u, k);\n        else update(rc(p), mid+1, r, u, k);\n        push_up(p);\n    }\n\n    int query(int p, int l, int r, int k){\n        if(l == r) return l;\n        if(s[lc(p)] >= k){\n            return query(lc(p), l, mid, k);\n        }\n        else return query(rc(p), mid+1, r, k-s[lc(p)]);\n    }\n}\n//\u4ee5\u4e0a\u6743\u503c\u7ebf\u6bb5\u6811\u6a21\u677f\n\nstruct ask{\t\t//\u8be2\u95ee\u79bb\u7ebf\n    ll k, id;\n    friend bool operator <(ask a, ask b){\n        return a.k < b.k;\n    }\n}q[MAX];\n\nstruct city{\t\t//\u77e9\u5f62\n    ll h, id;\n\n    friend bool operator <(city a, city b){\n        if(a.h == b.h) return a.id < b.id;\n        return a.h < b.h;\n    }\n}a[MAX];\n\nint n, m;\nll Q, now, p, p1, p2, ans[MAX];\n\nint main()\n{\n    cin >> m >> n >> Q;\n    for(int i = 1; i <= n; ++i){\n        a[i].id = i;\n    }\n    ll x;\n    for(int i = 1; i <= m; ++i){\n        scanf(\"%lld\", &x);\n        a[x].h++;\n    }\n    sort(a+1, a+n+1);\n    for(int i = 1; i <= Q; ++i){\n        scanf(\"%lld\", &q[i].k);\n        q[i].id = i;\n    }\n    sort(q+1, q+Q+1);\n    //\u521d\u59cb\u5316\uff1a\u6392\u5e8f\u3001\u79bb\u7ebf\n\n    p1 = p2 = 1;\n    now = m;\n    while(p1 <= n){\n        p = p1;\n        while(a[p].h == a[p1].h){\t\t//\u5411\u540e\u627e\u5e73\u53f0\uff0c\u5e76\u63d2\u5165\u5230\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\n            sgt::update(1, 1, n, a[p].id, 1);\n            p++;\n        }\n        while(now+(a[p].h-a[p1].h)*(p-1) >= q[p2].k){\t\t//\u5904\u7406\u5728\u8fd9\u6b21\u586b\u5751\u8303\u56f4\u5185\u7684\u8be2\u95ee\n            ll t = (q[p2].k-now)%(p-1);\n            if(!t) t = p-1;\n            ans[q[p2].id] = sgt::query(1, 1, n, t);\n            p2++;\n        }\n        now += (a[p].h-a[p1].h)*(p-1);\t\t//\u7d2f\u52a0\u64cd\u4f5c\u6b21\u6570\n        p1 = p;\t\t\t//\u4e0b\u4e00\u6b21\u5e73\u53f0\u7684\u5f00\u59cb\n    }\n    for(int i = 1; i <= Q; ++i){\n        //\u53ef\u80fd\u8fd8\u6709\u4e00\u4e9b\u8be2\u95ee\u6ca1\u6709\u5904\u7406\uff0c\u4f46\u6b64\u65f6\u6240\u6709\u77e9\u5f62\u90fd\u5df2\u5f62\u6210\u4e00\u4e2a\u5e73\u53f0\uff0c\u76f4\u63a5\u56de\u7b54\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u6743\u503c\u7ebf\u6bb5\u6811\n        if(!ans[q[i].id]){\n            ll t = (q[i].k-now)%n;\n            if(!t) t = n;\n            ans[q[i].id] = t;\n        }\n    }\n    for(int i = 1; i <= Q; ++i){\n        printf(\"%lld\\n\", ans[i]);\n    }\n\n    return 0;\n}\n```\n\n",
        "postTime": 1560908348,
        "uid": 22991,
        "name": "fighter",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1181D \u3010Irrigation\u3011"
    },
    {
        "content": "# \u6570\u636e\u7ed3\u6784+\u8d2a\u5fc3\n\n[\u9898\u9762](https://www.luogu.org/problemnew/show/CF1181D)\n\n\u8be2\u95ee\u5206\u4e24\u7c7b\uff1a\n\n1\u3001\u5c0f\u4e8e\u7b49\u4e8en\u7684\uff08\u76f4\u63a5\u641e\uff09\n\n2\u3001\u5927\u4e8en\u7684\uff08\u79bb\u7ebf\u5904\u7406\uff09\n\n\u628a\u8be2\u95ee\u6392\u5e8f\u540e\uff0c\u8003\u8651\u6bcf\u6b21\u5e94\u8be5\u5148\u586b\u6bd4\u8d5b\u6570\u91cf\u6700\u5c11\u7684\u57ce\u5e02\uff0c**\u628a\u8fd9\u4e2a\u57ce\u5e02\u7684\u6bd4\u8d5b\u6570\u91cf\u586b\u5230\u7b2c\u4e8c\u5c0f**\n\n\uff08\u5c31\u597d\u6bd4\u4e0b\u96e8\u586b\u6c34\u5751\u4e00\u6837\uff0c\u6a21\u62df\u4e00\u4e0b\u8fc7\u7a0b\uff09\n\n\u7136\u540e\u627e\u51fa\u6bd4\u8d5b\u6700\u5c0f\u7684\u57ce\u5e02\u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7**\u53d6\u6a21**\u8fc7\u7a0b\u627e\u5230\u6392\u540d\uff08\u6309\u57ce\u5e02\u7f16\u53f7\u6392\u5e8f\uff09\n\n\u57ce\u5e02\u7f16\u53f7\u53ef\u4ee5\u53ef\u4ee5\u7528\u6743\u503c\u7ebf\u6bb5\u6811\\\u5e73\u8861\u6811\u7ef4\u62a4 \u6bcf\u4e00\u4e2a\u57ce\u5e02\u201c\u586b\u6ee1\u201d\u4e4b\u540e\u5411\u6570\u636e\u7ed3\u6784\u91cc\u63d2\u5165\u4e0b\u4e00\u4e2a\u57ce\u5e02\n\n\u8fd8\u6709\uff0c\u6ce8\u610f\u5f00long long (\u8c03\u4e861\u4e2a\u5c0f\u65f6\uff0c\u539f\u6765\u8981\u5f00long long)\n\n\u5982\u679c\u6c34\u5e73\u6bd4\u8f83\u9ad8\u7684\u5e94\u8be5\u53ef\u4ee5\u4e3b\u5e2d\u6811\u5728\u7ebf\u505a \u672c\u849f\u84bb\u8fd8\u662f\u4e0d\u4f1a\n\n\u770b\u4ee3\u7801\u5427\n\n```\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n\nconst int N=5e5+4;\n\ntemplate<typename T>\ninline void Read(T &x)\n{\n    x=0;char c=getchar();\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0' && c<='9') {x=x*10+(c-'0');c=getchar();}\n}\ntemplate<typename T>\nvoid print(T x)\n{\n    if(x>9) print(x/10);\n    putchar(x%10+'0');\n}\n\nlong long n;\nint m,q,qq;\n\npair<int,int> city[N];//pair<\u4e3e\u529e\u6bd4\u8d5b\u6570\u91cf\uff0c\u57ce\u5e02\u7f16\u53f7>\npair<long long,int> ask[N];//pair<\u8be2\u95ee\u7684\u5e74\u6570\uff0c\u8be2\u95ee\u7684\u7f16\u53f7>\nlong long prefix[N]={0},ans[N];//\u524d\u7f00\u548c(\u57ce\u5e02)\n\nint val[N<<2];\n//\u8fd9\u5c31\u662f\u4e00\u9897\u7ebf\u6bb5\u6811 \nvoid insert(int x,int l,int r,int pos)\n{\n    if(l==r){val[x]=1;return;}\n    int mid=l+r>>1;\n    if(pos<=mid) insert(x<<1,l,mid,pos);\n    else insert(x<<1|1,mid+1,r,pos);\n    val[x]=val[x<<1]+val[x<<1|1];\n}\nint pos(int x,int l,int r,int rank)\n{\n    if(l==r) return l;\n    int mid=l+r>>1;\n    if(val[x<<1] >= rank)\treturn pos(x<<1,l,mid,rank);\n    return pos(x<<1|1,mid+1,r,rank-val[x<<1]);\n}\n\nint old[N];\n\nint main()\n{\n    Read(n),Read(m),Read(qq);\n    for(register int i=1;i<=m;i++)\n        city[i]=make_pair(0,i);\n        \n    for(register int i=1;i<=n;i++)\n    {\n        Read(old[i]);\n        city[old[i]].first++;\n    }\n    \n    for(register int i=1;i<=qq;i++)\n    {\n        long long temp;Read(temp);\n        if(temp<=n) ans[i]=old[temp];\n        else ask[++q]=make_pair(temp-n,i);\n    }\n    sort(city+1,city+1+m);\n    sort(ask+1,ask+1+q); \n    *prefix=0ll;\n    for(register int i=1;i<=m;i++)\n        prefix[i]=prefix[i-1]+city[i].first;\n    \n    long long cnt=0;\n    for(register int i=1,rank;i<=q;i++)\n    {\n        while( city[cnt+1].first * cnt - prefix[cnt] < ask[i].first && cnt!=m)\n        {\n            insert(1,1,m,city[++cnt].second);\n            while(city[cnt].first == city[cnt+1].first )\n                insert(1,1,m,city[++cnt].second);\n        }\n        rank=( ask[i].first-(cnt*city[cnt].first-prefix[cnt]) )%cnt;\n        if(!rank) rank=cnt;\n        ans[ ask[i].second ]=pos (1,1,m,rank);\n    }\n    \n    for(register int i=1;i<=qq;i++)\n        print(ans[i]),putchar(10);\n        \n    return 0;\n}\n```\n",
        "postTime": 1560934244,
        "uid": 138511,
        "name": "GreenDay",
        "ccfLevel": 8,
        "title": "CF1181D \u9898\u89e3"
    }
]