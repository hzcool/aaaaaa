[
    {
        "content": "## Description\n\n\u7ed9\u5b9a\u4e00\u68f5\u6709 $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u70b9\u6743\u3002\u6240\u6709\u7684\u70b9\u6743\u6784\u6210\u4e86\u4e00\u4e2a $0~\\sim~n - 1$ \u7684\u6392\u5217\u3002\u6709 $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c $1$ \u4e3a\u4ea4\u6362\u4e24\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u64cd\u4f5c $2$ \u4e3a\u67e5\u8be2 $Mex(l)$ \u503c\u6700\u5927\u7684 $Mex(l)$ \u503c\uff0c\u5176\u4e2d $l$ \u662f\u6811\u4e0a\u7684\u4e00\u6761\u8def\u5f84\u3002\u5b9a\u4e49\u4e00\u6761\u8def\u5f84 $l$ \u7684 $Mex$ \u503c $Mex(l)$ \u4e3a\u8fd9\u6761\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u81ea\u7136\u6570\n\n## Input\n\n\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 $n$ \u4ee3\u8868\u70b9\u6570\n\n\u4e0b\u9762\u4e00\u884c\u662f $n$ \u4e2a\u6570\u5b57\uff0c\u4ee3\u8868\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u4fdd\u8bc1\u662f\u4e00\u4e2a $0~\\sim n - 1$ \u7684\u6392\u5217\n\n\u4e0b\u9762\u4e00\u884c\u6709 $n - 1$ \u4e2a\u6570\u5b57\uff0c\u7b2c $i$ \u4e2a\u6570\u5b57\u4ee3\u8868\u94a6\u5b9a $1$ \u4e3a\u6839\u65f6\u7b2c $i + 1$ \u4e2a\u70b9\u7684\u7236\u8282\u70b9\n\n\u4e0b\u9762\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 $q$\uff0c\u4ee3\u8868\u64cd\u4f5c\u4e2a\u6570\n\n\u4e0b\u9762 $q$ \u884c\uff0c\u6bcf\u884c\u4e00\u7ec4\u64cd\u4f5c\u3002\n\n\u5982\u679c\u8be5\u884c\u7b2c\u4e00\u4e2a\u6570\u5b57\u4e3a $1$\uff0c\u5219\u540e\u9762\u6709\u4e24\u4e2a\u6570\u5b57 $x,y$\uff0c\u4ee3\u8868\u4ea4\u6362 $x,y$ \u7684\u70b9\u6743\n\n\u5426\u5219\u8be5\u884c\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u6570\u5b57 $2$\uff0c\u4ee3\u8868\u4e00\u6b21\u67e5\u8be2\n\n## Output\n\n\u5bf9\u6bcf\u6b21\u67e5\u8be2\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570\u4f5c\u4e3a\u7b54\u6848\n\n## Hint\n\n$2~\\leq~n~\\leq~2~\\times~10^5~,~1~\\leq~q~\\leq~2~\\times~10^5$\n\n## Solution\n\n\u4e00\u9053\u7ebf\u6bb5\u6811\u7ef4\u62a4\u56fe\u4e0a\u4fe1\u606f\u7684\u597d\u9898\u3002\n\n\u8bb0\u5f97\u4ee5\u524d\u5728\u67d0\u5b66\u5802\u5b66\u4e60\u65f6\uff0cPKU\u7684HJC\u8001\u5e08\u8bf4\u7ebf\u6bb5\u6811\u51fa\u73b0\u5728\u9ad8\u7aef\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u9664\u4e86\u6254\u4e0a\u6765\u4e00\u4e2a\u5e8f\u5217\u7ef4\u62a4\u4e00\u5806\u4e1c\u897f\u4ee5\u5916\uff0c\u5982\u679c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\uff0c\u90a3\u4e48\u539f\u56e0\u4e00\u5b9a\u662f\u8fd9\u9053\u9898\u76ee\u7684\u4fe1\u606f\u5177\u6709 **\u53ef\u5408\u5e76\u6027**\u3002\u73b0\u5728\u60f3\u60f3\u8fd9\u5927\u6982\u5c31\u662f\u4e00\u4e2a\u6bd4\u8f83\u6070\u5f53\u7684\u4f8b\u9898\u4e86\u3002\n\n\u6211\u4eec\u8003\u8651\u8fd9\u9053\u9898\u76ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u53ef\u4ee5\u8f6c\u5316\u6210\u67e5\u8be2\u4e00\u4e2a\u6700\u5c0f\u7684 $k$ \u4f7f\u5f97 $[0,k)$ \u90fd\u51fa\u73b0\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u3002\u8fd9\u4e2a $k$ \u663e\u7136\u662f\u6ee1\u8db3\u4e8c\u5206\u6027\u8d28\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u7ef4\u62a4\u8fd9\u6811\u8282\u70b9\u6743\u503c\u524d\u7f00\u7684\u8fde\u901a\u6027\u7684\u6570\u636e\u7ed3\u6784\u4e86\u3002\u8003\u8651\u5982\u679c\u76f8\u90bb\u7684\u4e24\u6bb5\u6743\u503c\u533a\u95f4\u7684\u70b9\u53ef\u4ee5\u88ab\u5408\u5e76\u4e3a\u4e00\u6761\u94fe\uff0c\u90a3\u4e48\u8fd9\u6bb5\u6743\u503c\u533a\u95f4\u5e76\u663e\u7136\u662f\u5408\u6cd5\u7684\u3002\u6211\u4eec\u8003\u8651\u5bf9\u6bcf\u6bb5\u533a\u95f4\u7ef4\u62a4\u8fc7\u533a\u95f4\u5185\u6240\u6709\u503c\u7684\u94fe\u7684\u4e24\u4e2a\u7aef\u70b9\u3002\u6ce8\u610f\u8fd9\u6761\u94fe\u5fc5\u987b\u5305\u542b\u533a\u95f4\u4e2d\u7684\u6240\u6709\u6743\u503c\u4f46\u662f\u4e0d\u4e00\u5b9a\u4ec5\u5305\u542b\u8fd9\u4e9b\u6743\u503c\u3002\u4f8b\u5982\u5bf9\u4e8e\u533a\u95f4 $[1,2]$\uff0c\u8fd9\u6761\u94fe\u5305\u542b $\\{1,2,4\\}$ \u4e5f\u662f\u5408\u6cd5\u7684\u3002\n\n\u8003\u8651\u5408\u5e76\u65f6\u5927\u533a\u95f4\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\u4ece\u4e24\u4e2a\u94fe\u7684\u56db\u4e2a\u7aef\u70b9\u4e2d\u9009\u4e24\u4e2a\u505a\u65b0\u7684\u7aef\u70b9\uff0c\u5269\u4e0b\u4e24\u4e2a\u70b9\u90fd\u5728\u94fe\u4e0a\u5373\u53ef\u3002\u53c2\u8003 [\u8fd9\u9053\u9898](https://www.luogu.org/problemnew/show/P3398) \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u4e00\u6761\u94fe\u4e0a\u7684\u65b9\u6cd5\uff0c\u5373\uff1a\n\n\u8bb0\u4e24\u7aef\u70b9\u4e3a $u,v$\uff0c\u9700\u8981\u5224\u5b9a\u7684\u70b9\u4e3a $x$\uff0c$LCA(u,v)~=~y$\uff0c\u5219\u6709\uff1a\n\n$x$ \u5728\u94fe $(u,v)$ \u4e0a $\\Leftrightarrow$ $$((LCA(u,x) == x~\\lor~LCA(v,x) == x)~\\land LCA(x,y) == y)$$\n\n\u4e8e\u662f\u679a\u4e3e\u4e00\u4e0b\u4e24\u4e2a\u7aef\u70b9\uff0c\u5224\u5b9a\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u53d1\u73b0\u5728\u5408\u5e76\u65f6\u6211\u4eec\u4f1a\u5927\u91cf\u7528\u5230\u6c42LCA\u7684\u64cd\u4f5c\uff0c\u500d\u589e\u663e\u7136\u4e0d\u591f\u4f18\u79c0\uff0c\u4e8e\u662f\u6211\u4eec\u4f7f\u7528ST\u9884\u5904\u7406\u4ece\u800c\u505a\u5230 $O(1)$ \u67e5\u8be2\u3002\u8fd9\u6837pushup\u7684\u590d\u6742\u5ea6\u5c31\u88ab\u6211\u4eec\u964d\u5230\u4e86 $O(w)$\uff0c\u5176\u4e2d $w$ \u4e3a\u679a\u4e3e\u7aef\u70b9\u7684\u60c5\u51b5\u6570\uff0c\u5373 $C_4^2~=~6$\u3002\u6240\u4ee5\u4fee\u6539\u7684\u590d\u6742\u5ea6\u4e3a $O(w \\log n)$\n\n\u8003\u8651\u67e5\u8be2\u65f6\uff0c\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff0c\u7ef4\u62a4\u524d\u7f00\u94fe\u7684\u8fde\u901a\u6027\u5373\u53ef\u505a\u5230 $O(w \\log n)$\u3002\n\n\u4e8e\u662f\u603b\u590d\u6742\u5ea6 $O((n + q)~w \\log n)$\uff0c\u5176\u4e2d $w~=~6$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\n\n## Code\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#ifdef ONLINE_JUDGE\n#define putchar(o)\\\nputs(\"I am a cheater!\")\n#define freopen(a, b, c)\n#endif\n#define rg register\n#define ci const int\n#define cl const long long\n\ntypedef long long int ll;\n\nnamespace IPT {\n\tconst int L = 1000000;\n\tchar buf[L], *front=buf, *end=buf;\n\tchar GetChar() {\n\t\tif (front == end) {\n\t\t\tend = buf + fread(front = buf, 1, L, stdin);\n\t\t\tif (front == end) return -1;\n\t\t}\n\t\treturn *(front++);\n\t}\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n\trg char ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n\tif (lst == '-') x = -x;\n}\n\ntemplate <typename T>\ninline void ReadDb(T &x) {\n\trg char ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch = IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = x * 10 + (ch ^ 48), ch = IPT::GetChar();\n\tif (ch == '.') {\n\t\tch = IPT::GetChar();\n\t\tdouble base = 1;\n\t\twhile ((ch >= '0') && (ch <= '9')) x += (ch ^ 48) * ((base *= 0.1)), ch = IPT::GetChar();\n\t}\n\tif (lst == '-') x = -x;\n}\n\nnamespace OPT {\n\tchar buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n\tif (x < 0) {x = -x, putchar('-');}\n\trg int top=0;\n\tdo {OPT::buf[++top] = char(x % 10 + '0');} while (x /= 10);\n\twhile (top) putchar(OPT::buf[top--]);\n\tif (pt) putchar(aft);\n}\n\nconst int maxn = 2000010;\nconst int maxm = 4000010;\n\nint n, q, vistime, t;\nint MU[maxn], fa[maxn], sz[maxn], dfn[maxm], pre[maxn], ST[30][maxn], deepth[maxn], rmp[maxn], dre[maxn];\nstd::vector<int> son[maxn];\n\nstruct Tree;\n\nvoid dfs(ci);\nvoid Make_ST();\nint ask(Tree*);\nvoid buildpool();\nint cmp(ci&, ci&);\nint Get_Lca(ci, ci);\nvoid update(Tree*, ci);\nbool Is_Lca(ci, ci, ci);\nvoid build(Tree*, ci, ci);\nvoid check(Tree*, Tree*, Tree*);\n\nstruct Tree {\n\tTree *ls, *rs;\n\tint l, r;\n\tint v[2];\n\t\n\tinline void pushup() {\n\t\tif (!this->rs) {this->v[0] = this->ls->v[0]; this->v[1] = this->ls->v[1];}\n\t\telse if (!this->ls) {this->v[0] = this->rs->v[0]; this->v[1] = this->rs->v[1];}\n\t\telse if (!(~this->ls->v[0])) {\n\t\t\tthis->v[0] = this->v[1] = -1;\n\t\t} else if (!(this->rs->v[0])) {\n\t\t\tthis->v[0] = this->v[1] = -1;\n\t\t} else {\n\t\t\tcheck(this->ls, this->rs, this);\n\t\t}\n\t}\n};\nTree *pool[maxm], qwq[maxm], *rot, pree;\nint top;\n\nint main() {\n\tfreopen(\"1.in\", \"r\", stdin);\n\tqr(n);\n\tfor (rg int i = 1; i <= n; ++i) {qr(MU[i]); ++MU[i];}\n\tfor (int i = 2; i <= n; ++i) {\n\t\tqr(fa[i]); son[fa[i]].push_back(i); ++sz[fa[i]]; ++dre[fa[i]]; ++dre[i];\n\t}\n\tbool _flag = true;\n\tfor (rg int i = 1; i <= n; ++i) _flag &= dre[i] <= 2;\n\tif (_flag) {\n\t\tqr(q);\n\t\tint a;\n\t\twhile (q--) {\n\t\t\ta = 0; qr(a);\n\t\t\tif (a == 2) {\n\t\t\t\tqw(n, '\\n', true);\n\t\t\t} else {\n\t\t\t\tqr(a); qr(a);\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tdfs(1);\n\tMake_ST();\n\tfor (rg int i = 1; i <= n; ++i) rmp[MU[i]] = i;\n\tbuildpool();\n\tbuild(rot, 1, n);\n\tqr(q); int a, b, c;\n\twhile (q--) {\n\t\ta = 0; qr(a);\n\t\tif (a == 2) {\n\t\t\tpree.v[1] = pree.v[0] = 0; qw(ask(rot) - 1, '\\n', true);\n\t\t}\n\t\telse {\n\t\t\tb = c = 0; qr(b); qr(c);\n\t\t\tstd::swap(rmp[MU[b]], rmp[MU[c]]); std::swap(MU[b], MU[c]);\n\t\t\tupdate(rot, MU[b]); update(rot, MU[c]);\n\t\t}\n\t}\n\treturn 0;\n}\n\nvoid dfs(ci u) {\n\tdfn [pre[u] = ++vistime] = u;\n\tfor (int i = 0; i < sz[u]; ++i) {\n\t\tdeepth[son[u][i]] = deepth[u] + 1;\n\t\tdfs(son[u][i]); dfn[++vistime] = u;\n\t}\n}\n\nvoid Make_ST() {\n\tint dn = n << 1;\n\tt = log2(dn) + 1;\n\tfor (rg int i = 1; i < dn; ++i) ST[0][i] = dfn[i];\n\tfor (rg int i = 1; i <= t; ++i) {\n\t\trg int di = i - 1;\n\t\tfor (rg int l = 1; l < dn; ++l) {\n\t\t\tint r= l + (1 << i) - 1;\n\t\t\tif (r >= dn) break;\n\t\t\tST[i][l] = cmp(ST[di][l], ST[di][l + (1 << di)]);\n\t\t}\n\t}\n}\n\nint cmp(ci &_a, ci &_b) {\n\tif (deepth[_a] < deepth[_b]) return _a;\n\treturn _b;\n}\n\nvoid buildpool() {\n\tfor (rg int i = 0; i < maxm; ++i) pool[i] = qwq + i;\n\trot = pool[maxm - 1]; top = maxm - 2;\n}\n\nvoid build(Tree *u, ci l, ci r) {\n\tif ((u->l = l) == (u->r = r)) {u->v[1] = u->v[0] = rmp[l]; return;}\n\tint mid = (l + r) >> 1;\n\tif (l <= mid) build(u->ls = pool[top--], l, mid);\n\tif (mid < r) build(u->rs = pool[top--], mid + 1, r);\n\tu->pushup();\n}\n\nint Get_Lca(ci u, ci v) {\n\tint l = pre[u], r = pre[v];\n\tif (l > r) std::swap(l, r);\n\tint len = r - l + 1, T = log2(len);\n\treturn cmp(ST[T][l], ST[T][r - (1 << T) + 1]);\n}\n\nbool Is_Lca(ci u, ci v, ci x) {\n\tint _tmp = Get_Lca(u, v);\n\treturn (((Get_Lca(u, x) == x) || (Get_Lca(v, x) == x)) && (Get_Lca(_tmp, x) == _tmp));\n}\n\n#define doit \\\n\tif (Is_Lca(v1, u1, x) && (Is_Lca(v1, u1, y))) {\\\n\t\t\tu->v[0] = u1; u->v[1] = v1;\\\n\t\t\treturn;\\\n\t}\nvoid check(Tree *ls, Tree *rs, Tree *u) {\n\tif (ls->v[0] == 0) { *u = *rs; return;}\n\tint u1, v1, x, y;\n\t{\n\t\tu1 = ls->v[0]; v1 = ls->v[1]; x = rs->v[0]; y = rs->v[1];\n\t\tdoit;\n\t}\n\t{\n\t\tu1 = rs->v[0]; v1 = ls->v[0]; x = rs->v[1]; y = ls->v[1];\n\t\tdoit;\n\t}\n\t{\n\t\tu1 = rs->v[1]; v1 = ls->v[1]; x = rs->v[0]; y = ls->v[0];\n\t\tdoit;\n\t}\n\t{\n\t\tu1 = rs->v[1]; v1 = ls->v[0]; x = rs->v[0]; y = ls->v[1];\n\t\tdoit;\n\t}\n\t{\n\t\tu1 = rs->v[0]; v1 = ls->v[1]; x = rs->v[1]; y = ls->v[0];\n\t\tdoit;\n\t}\n\t{\n\t\tu1 = rs->v[0]; v1 = rs->v[1]; x = ls->v[0]; y = ls->v[1];\n\t\tdoit;\n\t}\n\tu->v[0] = u->v[1] = -1;\n}\n#undef doit\n\nvoid update(Tree *u, ci pos) {\n\tif ((u->l > pos) || (u->r < pos)) return;\n\tif (u->l == u->r) {u->v[0] = u->v[1] = rmp[pos]; return;}\n\tif (u->ls) update(u->ls, pos);\n\tif (u->rs) update(u->rs, pos);\n\tu->pushup();\n}\n\nint ask(Tree *u) {\n\tTree _tmp;\n\tif ((u->ls)) {\n\t\tcheck(&pree, u->ls, &_tmp);\n\t\tif (~_tmp.v[0]) {\n\t\t\tpree = _tmp; return u->rs ? ask(u->rs) : u->r;\n\t\t} else {\n\t\t\treturn ask(u->ls);\n\t\t}\n\t} else if (u->rs) return ask(u->rs);\n\telse return u->r;\n}\n```\n\n## Summary\n\n\u5224\u65ad\u4e00\u4e2a\u70b9\u5728\u4e00\u6761\u94fe\u4e0a\u7684\u65b9\u6cd5\u4e3a\uff1a\u5b83\u548c\u94fe\u7684\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\u7684LCA\u662f\u4ed6\u81ea\u5df1\u4e14\u5b83\u548c\u8fd9\u6761\u94fe\u9876\u7aef\u7684\u8282\u70b9\u7684LCA\u662f\u9876\u7aef\u8282\u70b9\u3002\n\n\u5f53LCA\u67e5\u8be2\u6781\u591a\u4e14\u96be\u4ee5\u79bb\u7ebf\u5904\u7406\u65f6\uff0c\u8003\u8651\u4f7f\u7528ST\u9884\u5904\u7406\u6b27\u62c9\u904d\u5386\u5e8f\u505a\u5230 $O(1)$ \u67e5\u8be2\n\n\u6ce8\u610fST\u5b58\u50a8\u6b27\u62c9\u904d\u5386\u5e8f\u9700\u8981\u5f00 $2n$ \u7684\u7a7a\u95f4",
        "postTime": 1546948012,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1083C \u3010Max Mex\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5\u6709\u6839\u6811\uff0c\u70b9\u5e26\u6743\uff0c\u8981\u6c42\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1. \u4ea4\u6362\u67d0\u4e24\u4e2a\u70b9\u7684\u70b9\u6743\u3002\n\n2. \u5bf9\u4e8e\u6811\u4e0a\u7684\u4e00\u6761\u8def\u5f84\uff0c\u5176\u6743\u503c\u5b9a\u4e49\u4e3a\u8be5\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u70b9\u6743\u7684 $\\mathrm{mex}$\uff0c\u6c42\u6240\u6709\u8def\u5f84\u7684\u6743\u503c\u6700\u5927\u503c\u3002\n\n\u4fdd\u8bc1\u70b9\u6743\u662f $0\\sim n-1$ \u7684\u6392\u5217\u3002\n\n$n,q\\le 2\\times 10^5 $\uff0c\u65f6\u9650 $\\texttt{3s}$\u3002\n\n### Solution\n\n\u6211\u4eec\u53d1\u73b0\uff0c$\\mathrm{mex}$ \u662f\u4e00\u4e2a\u4e0d\u597d\u76f4\u63a5\u7ef4\u62a4\u7684\u4e1c\u897f\uff0c\u8003\u8651\u600e\u6837\u5c06\u5176\u8f6c\u5316\u4e3a\u5bb9\u6613\u7ef4\u62a4\u7684\u4e1c\u897f\u3002\n\n\u8fd9\u7c7b\u95ee\u9898\u53ef\u4ee5\u5148\u8003\u8651\u4e0d\u5e26\u4fee\u6539\u600e\u4e48\u5904\u7406\u3002\n\n\u6211\u4eec\u8003\u8651\u7ef4\u62a4 $[l,r]$ \u8fd9\u6bb5\u6570\u662f\u5426\u51fa\u73b0\u5728\u94fe\u4e0a\uff08\u6ce8\u610f\u5230\u6839\u636e $\\mathrm{mex}$ \u7684\u5b9a\u4e49\uff0c\u8fd9\u6761\u94fe\u4e0a\u53ef\u4ee5\u6709\u5176\u4ed6\u6570\uff09\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u6700\u5927\u7684 $x$ \u6ee1\u8db3 $[0,x]$ \u51fa\u73b0\u5728\u94fe\u4e0a\u5373\u53ef\u3002\n\n\u5230\u8fd9\u91cc\u6211\u4eec\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u505a\u4e0d\u4e0b\u53bb\u4e86\uff0c\u4f3c\u4e4e\u8fd9\u4e2a\u4e1c\u897f\u6bd4\u539f\u9898\u66f4\u5f3a\uff0c\u6211\u4eec\u6ca1\u6709\u4ec0\u4e48\u5934\u7eea\u3002\n\n\u4f46\u4ed4\u7ec6\u601d\u8003\uff0c\u5176\u5b9e\u8fd9\u79cd\u4fe1\u606f\u662f **\u53ef\u5408\u5e76\u7684**\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a $[l,r]$ \u8bb0\u4e00\u4e0b\u5b83\u5728\u6811\u4e0a\u5bf9\u5e94\u7684\u94fe\u4e0a\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8981\u5408\u5e76 $[l_1,r_1],[l_2,r_2]$ \u7684\u4fe1\u606f\uff0c\u53d1\u73b0\u7aef\u70b9\u53ea\u53ef\u80fd\u53d6\u5230 $l_1,r_1,l_2,r_2$ \u4e2d\u7684\u4e24\u4e2a\uff0c\u7136\u540e\u5224\u65ad\u53e6\u5916\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\uff0c\u6211\u4eec $\\binom{4}{2}=6$ \u7684\u679a\u4e3e\uff0c\u5c31\u53ef\u4ee5\u5408\u5e76\u4fe1\u606f\u3002\n\n\u5f53\u7136\u8981\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u4e00\u6761\u8def\u5f84\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5145\u8981\u6761\u4ef6\u4e3a\u8fd9\u4e2a\u70b9\u5230\u8fd9\u4e2a\u8def\u5f84\u4e24\u7aef\u7684\u7aef\u70b9\u7684\u8ddd\u79bb\u548c\u7b49\u4e8e\u8fd9\u6bb5\u8def\u5f84\u957f\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 LCA \u6765\u5904\u7406\uff0c\u8f6c\u4e3a\u6df1\u5ea6\u5dee\uff0c\u8fd9\u662f\u7ecf\u5178\u6280\u5de7\u3002\n\n\u800c\u53ef\u5408\u5e76\u7684\u4fe1\u606f\u7528\u4ec0\u4e48\u7ef4\u62a4\u5462\uff1f\u7ebf\u6bb5\u6811\uff01\n\n\u5176\u5b9e\u521d\u5b66\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u9519\u8bef\u7684\u7406\u89e3\u4e3a\u7ebf\u6bb5\u6811\u662f\u7528\u6765\u7ef4\u62a4\u4e00\u7c7b\u5e8f\u5217\u4fe1\u606f\u7684\u3002\u5b9e\u9645\u4e0a\u8fd9 **\u4e0d\u5b8c\u5168** \u6b63\u786e\u3002\u7ebf\u6bb5\u6811\u5176\u5b9e\u662f\u7528\u6765\u7ef4\u62a4\u4e00\u7c7b **\u53ef\u5408\u5e76\u7684** \u4fe1\u606f\uff0c\u800c\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u5176\u5177\u4f53\u79cd\u7c7b\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6700\u5927\u5b50\u6bb5\u548c\uff1f\u672c\u8d28\u4e0a\u5c31\u662f\u56e0\u4e3a\u6700\u5927\u5b50\u6bb5\u548c\u53ef\u4ee5\u7528\u51e0\u4e2a\u7b80\u5355\u7684\u53ef\u5408\u5e76\u4fe1\u606f\u8868\u793a\uff0c\u4ece\u800c\u4e5f\u662f\u53ef\u5408\u5e76\u7684\u3002\n\n\u5177\u4f53\u5230\u8fd9\u9053\u9898\u4e0a\uff0c\u6211\u4eec\u7ebf\u6bb5\u6811\u4e0a\u4e00\u4e2a\u533a\u95f4 $[l,r]$ \u7ef4\u62a4\u8fd9\u4e2a\u533a\u95f4\u5728\u6811\u4e2d\u51fa\u73b0\u7684\u94fe\u4e0a\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u662f $(-1,-1)$\uff0c\u5408\u5e76\u5c31\u91c7\u7528\u4e0a\u8ff0\u65b9\u6cd5\u5408\u5e76\u3002\n\n\u6b64\u65f6\u8981\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u6211\u4eec\u5927\u53ef\u4ee5\u628a\u70b9\u6743\u8f6c\u4e3a $1\\sim n$\uff0c\u53cd\u6b63\u73b0\u5728\u7ef4\u62a4\u7684\u4e0d\u662f $\\mathrm{mex}$\u3002\n\n\u8bf4\u7684\u8f7b\u5de7\uff0c\u53ef\u522b\u5fd8\u4e86\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u6ca1\u89e3\u51b3\uff0c\u5c31\u662f\u5982\u4f55\u67e5\u8be2\uff1f\n\n\u6709\u540c\u5b66\u4f1a\u8bf4\u4e86\uff0c\u90a3\u4e0d\u5c31\u662f\u4e8c\u5206\u5417\uff1f\u4f46\u4f60\u770b\uff0c\u4e8c\u5206\u662f $O(n\\log^2n)$ \u7684\uff0c\u4e0d\u4e00\u5b9a\u8fc7\u5f97\u53bb\u3002\n\n\u5176\u5b9e\u5927\u5bb6\u5e94\u8be5\u90fd\u770b\u51fa\u6765\u4e86\uff0c\u8fd9\u5c31\u662f\u7ebf\u6bb5\u6811\u4e8c\u5206\u3002\u6211\u5728\u5f00\u59cb\u5728\u8fd9\u91cc\u6ca1\u60f3\u592a\u6e05\u695a\uff0c\u5bb9\u6211\u591a\u5570\u55e6\u51e0\u53e5\u3002\u5177\u4f53\u7684\u6211\u4eec\u8003\u8651\u5411\u4e0b\u67e5\u8be2\uff0c\u67e5\u8be2\u5230\u53f6\u5b50\u8282\u70b9\u662f\u76f4\u63a5\u8fd4\u56de\uff08\u53f3\uff09\u7aef\u70b9\u3002\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u666e\u901a\u8282\u70b9\uff0c\u6211\u4eec\u770b\u5b83\u7684\u5de6\u513f\u5b50\u5bf9\u5e94\u4fe1\u606f\u548c\u4e4b\u524d\u4f20\u4e0b\u6765\u7684\u4e00\u4e2a\u4fe1\u606f\u80fd\u4e0d\u80fd\u5408\u5e76\uff0c\u82e5\u80fd\uff0c\u5219\u66f4\u65b0\u8fd9\u4e2a\u4fe1\u606f\uff0c\u8fd4\u56de\u9012\u5f52\u53f3\u513f\u5b50\u7684\u7b54\u6848\uff1b\u82e5\u4e0d\u80fd\uff0c\u5219\u8fd4\u56de\u9012\u5f52\u5de6\u513f\u5b50\u7684\u7b54\u6848\u3002\u7ec6\u8282\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n\u5176\u5b9e\u8fd9\u4e2a\u4fe1\u606f\u5c31\u662f\u5de6\u8fb9\u7684\u6240\u6709\u4fe1\u606f\u5e76\u3002\u56e0\u4e3a\u53f3\u8fb9\u4e00\u4e2a\u533a\u95f4\u8981\u5408\u6cd5\uff0c\u4e0d\u4ec5\u8981\u5b83\u81ea\u8eab\u5408\u6cd5\uff0c\u800c\u4e14\u8981\u6c42\u5b83\u548c\u5de6\u8fb9\u7684\u533a\u95f4\u80fd\u5e76\u8d77\u6765\u5408\u6cd5\u3002\n\n\u53d1\u73b0\u4e0a\u8ff0\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u8981\u5c06\u7b54\u6848\u51cf\u4e00\u540e\u8f93\u51fa\u3002\n\n\u540c\u65f6\u5e26\u6765\u7684\u95ee\u9898\u662f\u6211\u4eec\u5bf9\u4e8e\u4e00\u6761\u94fe\uff0c\u53ea\u4f1a\u8df3\u5230 $n$\uff0c\u56e0\u6b64\u9700\u8981\u7279\u5224\u4e00\u6761\u94fe\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u6bcf\u4e2a\u8be2\u95ee\u90fd\u8f93\u51fa $n$ \u5373\u53ef\u3002\n\n\u6709\u540c\u5b66\u53c8\u8981\u8bf4\u4e86\uff0c\u8fd9\u4e2a\u6c42 LCA \u7684\u8fc7\u7a0b\u4e0d\u662f\u8981\u5e26 $\\log$\uff0c\u53d8\u6210 $\\log^2$ \u5417\uff0c\u90a3\u6211\u8fd9\u6837\u9ebb\u70e6\u8fd8\u4e3a\u4e86\u4ec0\u4e48\u5462\uff1f\n\n\u5927\u5bb6\u53c8\u53ef\u80fd\u770b\u51fa\u6765\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7b80\u6d01\u7684 $O(n\\log n)-O(1)$ LCA \u6c42\u89e3\u3002\u5177\u4f53\u4e00\u70b9\uff0c\u6211\u4eec\u6309\u7167\u6b27\u62c9\u5e8f\u5b58\u50a8\u6bcf\u4e2a\u70b9\uff08\u5c31\u662f dfs \u65f6\u5230\u8fd9\u4e2a\u70b9\u52a0\u5165\u4e00\u6b21\uff0c\u4ece\u513f\u5b50\u9012\u5f52\u51fa\u6765\u540e\u52a0\u5165\u4e00\u6b21\uff09\uff0c\u4e24\u4e2a\u70b9\u7684 LCA \u5c31\u662f\u4ed6\u4eec\u7684 dfs \u5e8f\u5bf9\u5e94\u5728\u6b27\u62c9\u5e8f\u4e0a\u5bf9\u5e94\u533a\u95f4\u4e2d\u7684\u6df1\u5ea6\u6700\u4f4e\u70b9\uff0c\u53ef\u4ee5\u4f7f\u7528 ST \u8868\u9884\u5904\u7406\uff0c\u4fbf\u53ef\u5b9e\u73b0\u9884\u5904\u7406\u4e3a $O(n\\log n)$\uff0c\u5355\u6b21\u67e5\u8be2\u4e3a $O(1)$ \u7684 LCA\u3002\n\n### \u4ee3\u7801\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate <typename T> inline void read(T &x)\n{\n\tx=0;short f=1;char c=getchar();\n\tfor(;c<'0'||c>'9';c=getchar()) if(c=='-') f=-1;\n\tfor(;c>='0'&&c<='9';c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tx*=f;return;\n}\nconst int N=5e5+5;\nusing PII=pair<int,int>;\n#define x first\n#define y second\nvector<int>g[N];\nint dep[N],mp[N],col[N],dfn[N];\nint st[N][25],idx;\nvoid dfs(int u)\n{\n\tdfn[u]=++idx,st[idx][0]=u;\n\tfor(int v:g[u]) dep[v]=dep[u]+1,dfs(v),st[++idx][0]=u;\n}\nint lg[N];\nint chk(int x,int y){return dep[x]<dep[y]?x:y;}\nint lca(int x,int y)\n{\n\tif(x>y) swap(x,y);\t\n\tint k=lg[y-x+1];\n\treturn chk(st[x][k],st[y-(1<<k)+1][k]);\n}\nint dis(int x,int y)\n{\n\tint l=lca(dfn[x],dfn[y]);\n\treturn dep[x]+dep[y]-2*dep[l];\n}\nstruct node{\n\tint l,r; \n\tPII p;\n}tr[N*4];\nbool chk_in(PII a,int x){return dis(a.x,a.y)==dis(a.x,x)+dis(a.y,x);}\nPII merge(PII a,PII b)\n{\n\tif(a.x<0||b.x<0) return {-1,-1}; \n\tif(chk_in(a,b.x)&&chk_in(a,b.y)) return a;\n\tif(chk_in(b,a.x)&&chk_in(b,a.y)) return b;\n\tif(chk_in({a.x,b.x},a.y)&&chk_in({a.x,b.x},b.y)) return {a.x,b.x};\n\tif(chk_in({a.x,b.y},a.y)&&chk_in({a.x,b.y},b.x)) return {a.x,b.y};\n\tif(chk_in({a.y,b.x},a.x)&&chk_in({a.y,b.x},b.y)) return {a.y,b.x};\n\tif(chk_in({a.y,b.y},a.x)&&chk_in({a.y,b.y},b.x)) return {a.y,b.y};\n\treturn {-1,-1}; \n}\nvoid pushup(int u){tr[u].p=merge(tr[u<<1].p,tr[u<<1|1].p);}\nvoid build(int u,int l,int r)\n{\n\ttr[u].l=l,tr[u].r=r;\n\tif(l==r) return tr[u].p={mp[l],mp[l]},void();\n\tint mid=l+r>>1;\n\tbuild(u<<1,l,mid),build(u<<1|1,mid+1,r);\n\tpushup(u); \n}\nvoid modify(int u,int pos,int x)\n{\n\tif(tr[u].l==tr[u].r) return tr[u].p={x,x},void();\n\tint mid=tr[u].l+tr[u].r>>1;\n\tif(pos<=mid) modify(u<<1,pos,x);\n\telse modify(u<<1|1,pos,x);\n\tpushup(u);\n}\nint query(int u,PII tmp)\n{\n\tif(tr[u].l==tr[u].r) return tr[u].r;\n\tPII t=(tmp.x==0&&tmp.y==0)?tr[u<<1].p:merge(tmp,tr[u<<1].p);\n\tif(t.x>=0) return query(u<<1|1,t);\n\telse return query(u<<1,tmp);\n}\nint n;\nint deg[N];\nint main()\n{\n\tread(n);\n\tfor(int i=1;i<=n;++i) read(col[i]),mp[++col[i]]=i;\n\tfor(int i=2,fa;i<=n;++i) read(fa),g[fa].push_back(i),++deg[i],++deg[fa];\n\tbool flag=true;\n\tfor(int i=1;i<=n;++i) if(deg[i]>2) flag=false;\n\tdfs(1);\n\tlg[0]=-1;\n\tfor(int i=1;i<N;++i) lg[i]=lg[i>>1]+1; \n\tfor(int j=1;j<=21;++j)\n\t{\n\t\tfor(int i=1;i<=idx;++i)\n\t\t{\n\t\t\tst[i][j]=st[i][j-1];\n\t\t\tif(i+(1<<j-1)<=idx) st[i][j]=chk(st[i][j],st[i+(1<<j-1)][j-1]);\n\t\t}\n\t}\n\tbuild(1,1,n);\n\tint q;read(q);\n\twhile(q--)\n\t{\n\t\tint op,x,y;\n\t\tread(op);\n\t\tif(op==1)\n\t\t{\n\t\t\tread(x),read(y);\n\t\t\tif(flag) continue;\n\t\t\tmodify(1,col[x],y),modify(1,col[y],x);\n\t\t\tswap(col[x],col[y]);\n\t\t}\n\t\telse if(flag) printf(\"%d\\n\",n);\n\t\telse printf(\"%d\\n\",query(1,{0,0})-1);\n\t}\t\n\treturn 0;\n}\n\n```\n\n### Conclusion\n\n\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u9053\u9898\u662f\u4e00\u9053\u597d\u9898\uff0c\u7efc\u5408\u8003\u5bdf\u4e86\u591a\u4e2a\u77e5\u8bc6\u70b9\u800c\u6ca1\u6709\u591a\u5408\u4e00\u7684\u610f\u5473\u3002\n\n\u65e2\u6709\u5bf9 $\\mathrm{mex}$ \u7684\u7cbe\u5999\u8f6c\u5316\uff0c\u53c8\u6709\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6811\u5f62\u6001\u7684\u6df1\u523b\u7406\u89e3\uff0c\u8fd8\u6709 $O(n\\log n)-O(1)$ LCA \u7684\u5b9e\u7528\u6280\u5de7\uff0c\u4e0d\u5f97\u4e0d\u8bf4\u8fd8\u662f\u503c\u5f97\u4e00\u505a\u3002",
        "postTime": 1643122320,
        "uid": 231600,
        "name": "zhangboju",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1083C \u3010Max Mex\u3011"
    },
    {
        "content": "\n\n\n## \u9898\u610f:\n\n\u7ed9\u5b9a\u4e00\u68f5\u6709n\u4e2a\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u70b9\u6743\u3002\u6240\u6709\u7684\u70b9\u6743\u6784\u6210\u4e86\u4e00\u4e2a$0 \\sim n-1$\u7684\u6392\u5217\u3002\u6709q\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c1\u4e3a\u4ea4\u6362\u4e24\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u64cd\u4f5c2\u4e3a\u67e5\u8be2$Mex(l)$\u503c\u6700\u5927\u7684$Mex(l)$\u503c,\u5176\u4e2d$l$\u662f\u6811\u4e0a\u7684\u4e00\u6761\u8def\u5f84\u3002\u5b9a\u4e49\u4e00\u6761\u8def\u5f84$l$\u7684$Mex$\u503c\u4e3a\u8fd9\u6761\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u81ea\u7136\u6570\u3002\n\n\n\n## \u9898\u89e3\uff1a\n\n\u8fd9\u662fCF Div1 \u7684C\u9898\uff0c\u96be\u5ea6\u53ef\u60f3\u800c\u77e5\u3002\n\n\n\n\u8fd9\u9898\u7528\u7684\u662f\u6211\u4ece\u6765\u6ca1\u7528\u8fc7\uff08\u89c1\u8fc7\uff09\u7684\u505a\u6cd5\u3002\n\n\n\n\u56e0\u4e3a\u5982\u679c$Mex(l)=x$ \u90a3\u4e48\u5c31\u8868\u660e$1-(x-1)$\u4e2d\u7684\u6240\u6709\u503c\u90fd\u5728\u4e00\u6761\u8def\u5f84\u4e0a\u3002\n\n\n\n\u6211\u4eec\u6309\u503c\u5efa\u7ebf\u6bb5\u6811\uff08\u4e0d\u662f\u6743\u503c\u7ebf\u6bb5\u6811\uff09\uff0c$l-r$\u7684\u8fd9\u4e2a\u70b9\u8868\u793a\u503c\u4ece$l-r$\u7684\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u82e5\u4e0d\u5b58\u5728\u5c31\u4e3a$(-1,-1)$\n\n\n\n\u4e24\u4e2a\u8282\u70b9\u5408\u5e76\uff0c\u9700\u8981\u7528\u5230LCA\u3002\n\n\n\n\u56e0\u4e3a\u6811\u6709\u4e2a\u6027\u8d28\uff0c\u4e09\u4e2a\u70b9$a,b,c$\uff0c\u8bb0$dis(a,b)=A,dis(a,c)=B,dis(b,c)=C$\n\n\n\n\u90a3\u4e48\u5982\u679c$A+B=C ||A+C=B||B+C=A$\uff0c\u90a3\u4e48\u8fd9\u4e09\u4e2a\u70b9\u5728\u540c\u4e00\u6761\u8def\u5f84\u4e0a\u3002\n\n\n\n\u6c42dis\u65f6\u9700\u8981\u7528\u5230LCA\u3002\n\n\n\n\u67e5\u8be2\u7b54\u6848\u7528\u7684\u4e5f\u662f\u6211\u4ece\u6765\u6ca1\u7528\u8fc7\u7684\uff0c\u539f\u6765\u7684\u8bdd\u6211\u53ef\u80fd\u4f1a\u7528\u4e8c\u5206+\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u3002\n\n\n\n\u4f46\u8fd9\u662f\u4e24\u53ealog\u7684\uff0c\u5176\u5b9e\u8fd9\u9898\u662f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u7684\u65b9\u6cd5\u53d8\u6210\u4e00\u53ealog\u3002\n\n\n\n\u600e\u4e48\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5462\uff1f\u6211\u4eec\u5148\u770b$l-r$\u8fd9\u4e2a\u533a\u95f4\u662f\u5426\u7b26\u5408\u8981\u6c42\uff0c\u7b26\u5408\u76f4\u63a5return\u3002\n\n\n\n\u4e0d\u7b26\u5408\uff0c\u6211\u4eec\u5148\u67e5\u8be2\u5de6\u533a\u95f4\uff0c\u5224\u65ad\u662f\u5426\u6ee1\u8db3\uff0c\u518d\u67e5\u8be2\u53f3\u533a\u95f4\u3002\n\n\n\n```cpp\nint query(node &xjh,int nod,int l,int r)\n{\n\tif(tree[nod].x>=0)\n\t{\n\t\tif(xjh.x<0)\n\t\t{\n\t\t\txjh=tree[nod];\n\t\t\treturn r+1;\n\t\t}\n\t\tnode jia=merge(xjh,tree[nod]);\n\t\tif(jia.x>=0)\n\t\t{\n\t\t\txjh=jia;\n\t\t\treturn r+1;\n\t\t}\n\t}\n\tif(l==r)return l;\n\tint res=query(xjh,nod*2,l,mid);\n\tif(res<=mid)return res;\n\telse return query(xjh,nod*2+1,mid+1,r);\n}\n```\n\n\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define mid (l+r)/2\nconst int N=2e5+5;\nint n,m,top,t,a[N],xu[N],head[N],ru[N],chu[N],dis[N],f[N][25];\nstruct node{\n\tint x,y;\n}tree[N*4];\nstruct node2{\n\tint too,next;\n}edge[N];\n/*char buf[1<<21],*p1=buf,*p2=buf;\ninline int gc()\n{\n\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;\n}*/\n#define gc getchar\ninline int read()\n{\n\tint ret=0,f=0;\n\tchar c=gc();\n\twhile(!isdigit(c))\n\t{\n\t\tif(c=='-')f=1;\n\t\tc=gc();\n\t}\n\twhile(isdigit(c))\n\t{\n\t\tret=ret*10+c-48;\n\t\tc=gc();\n\t}\n\tif(f)return -ret;\n\treturn ret;\n}\nvoid add(int a,int b)\n{\n\tedge[++top].too=b;edge[top].next=head[a];head[a]=top;\n}\nvoid dfs(int u,int fa)\n{\n\tru[u]=++t;\n\tfor(int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].too;\n\t\tf[v][0]=u;dis[v]=dis[u]+1;\n\t\tdfs(v,u);\n\t}\n\tchu[u]=++t;\n}\nbool pd(int x,int y)\n{\n\tif(ru[x]<=ru[y]&&chu[x]>=chu[y])return true;\n\treturn false;\n}\nint LCA(int x,int y)\n{\n\tif(pd(x,y))return x;\n\tif(pd(y,x))return y;\n\tint k=x;\n\tfor(int i=20;i>=0;i--)\n\t\tif(!pd(f[k][i],y))k=f[k][i];\n\treturn f[k][0];\n}\nint dist(int a,int b)\n{\n\tint lca=LCA(a,b);\n\treturn dis[a]+dis[b]-2*dis[lca];\n}\nnode hb(node a,int b)\n{\n\tif(a.x<0||b<0)return (node){-1,-1};\n\tint aa=a.x,bb=a.y;\n\tint d1=dist(aa,b);\n\tint d2=dist(bb,b);\n\tint d3=dist(aa,bb);\n\tif(d1+d2==d3)return (node){aa,bb};\n\tif(d1+d3==d2)return (node){b,bb};\n\tif(d2+d3==d1)return (node){aa,b};\n\treturn (node){-1,-1};\n}\nnode merge(node a,node b)\n{\n\tif(a.x<0||b.x<0)return (node){-1,-1};\n\tnode jia=hb(a,b.x);\n\tif(jia.x<0)return (node){-1,-1};\n\telse return hb(jia,b.y);\n}\nvoid pushup(int nod)\n{\n\ttree[nod]=merge(tree[nod*2],tree[nod*2+1]);\n}\nvoid build(int nod,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\ttree[nod]=(node){xu[l],xu[l]};\n\t\treturn;\n\t}\n\tbuild(nod*2,l,mid);\n\tbuild(nod*2+1,mid+1,r);\n\tpushup(nod);\n}\nvoid change(int nod,int l,int r,int x)\n{\n\tif(l==r)\n\t{\n\t\ttree[nod]=(node){xu[l],xu[l]};\n\t\treturn;\n\t}\n\tif(x<=mid)change(nod*2,l,mid,x);\n\telse change(nod*2+1,mid+1,r,x);\n\tpushup(nod);\n}\nint query(node &xjh,int nod,int l,int r)\n{\n\tif(tree[nod].x>=0)\n\t{\n\t\tif(xjh.x<0)\n\t\t{\n\t\t\txjh=tree[nod];\n\t\t\treturn r+1;\n\t\t}\n\t\tnode jia=merge(xjh,tree[nod]);\n\t\tif(jia.x>=0)\n\t\t{\n\t\t\txjh=jia;\n\t\t\treturn r+1;\n\t\t}\n\t}\n\tif(l==r)return l;\n\tint res=query(xjh,nod*2,l,mid);\n\tif(res<=mid)return res;\n\telse return query(xjh,nod*2+1,mid+1,r);\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ta[i]=read()+1;\n\t\txu[a[i]]=i;\n\t}\n\tfor(int i=2;i<=n;i++)add(read(),i);\n\tf[1][0]=1;\n\tdfs(1,0);\n\tfor(int i=1;i<=20;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tf[j][i]=f[f[j][i-1]][i-1];\n\tbuild(1,1,n);\n\tm=read();\n\twhile(m--)\n\t{\n\t\tint opt=read();\n\t\tif(opt==1)\n\t\t{\n\t\t\tint l=read(),r=read();\n\t\t\tswap(xu[a[l]],xu[a[r]]);\n\t\t\tswap(a[l],a[r]);\n\t\t\tchange(1,1,n,a[l]);\n\t\t\tchange(1,1,n,a[r]);\n\t\t}\n\t\telse{\n\t\t\tnode xjh=(node){-1,-1};\n\t\t\tint ans=query(xjh,1,1,n);\n\t\t\tprintf(\"%d\\n\",ans-1);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1555634630,
        "uid": 39484,
        "name": "\u7c73\u5947",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1083C \u3010Max Mex\u3011"
    },
    {
        "content": "\u5199\u500d\u589e LCA \u88ab\u5361\u5e38\u4e86/fn\n\n\u9996\u5148\u8003\u8651\u4ee4 $a_i$ \u4e3a\u6743\u503c\u662f $i$ \u7684\u70b9\u7684\u7f16\u53f7\u3002\u8be2\u95ee\u5b9e\u9645\u4e0a\u662f\u60f3\u8981\u6c42\u51fa\u4e00\u4e2a\u6700\u5927\u7684\u524d\u7f00\u4f7f\u5f97\u8fd9\u4e2a\u524d\u7f00\u91cc\u9762\u7684\u70b9\u5728\u6811\u4e0a\u6784\u6210\u4e86\u4e00\u6761\u94fe\u3002\n\n\u4e0d\u96be\u770b\u51fa\u8fd9\u4e2a\u4fe1\u606f\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u8bb0\u5f55\u533a\u95f4 $[l,r]$ \u5185\u7684\u70b9\u662f\u5426\u80fd\u591f\u88ab\u4e00\u6761\u94fe\u6240\u8986\u76d6\uff0c\u5e76\u4e14\u8fd9\u6761\u94fe\u6700\u77ed\u65f6\u4e24\u4e2a\u7aef\u70b9\u662f\u4ec0\u4e48\u3002\u53ea\u8981\u80fd\u591f\u5408\u5e76\u4e24\u6761\u94fe\uff0c\u90a3\u4e48\u5355\u70b9\u4fee\u6539\u4e5f\u662f\u5bb9\u6613\u505a\u5230\u7684\u3002\n\n\u5982\u4f55\u5408\u5e76\u4e24\u6761\u94fe\uff1f\u4e0d\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\u7684\u505a\u6cd5\u662f\uff0c\u628a\u56db\u4e2a\u70b9\u6309\u7167 dfs \u5e8f\u6392\u5e8f\u4e4b\u540e\u76f8\u90bb\u4e24\u4e24\u8ddd\u79bb\u4e4b\u548c $\\div 2$\uff08\u5305\u62ec\u5934\u5c3e\uff09\u6c42\u51fa\u56db\u4e2a\u70b9\u5f62\u6210\u7684\u865a\u6811\u5927\u5c0f\uff0c\u7136\u540e\u518d\u679a\u4e3e\u70b9\u5bf9\uff0c\u770b\u662f\u5426\u6709\u4e00\u4e2a\u70b9\u5bf9\u4e4b\u95f4\u7684\u8ddd\u79bb\u7b49\u4e8e\u8fd9\u4e2a\u865a\u6811\u5927\u5c0f\uff0c\u5982\u679c\u6709\u7684\u8bdd\u7aef\u70b9\u5c31\u662f\u8fd9\u4e24\u4e2a\u70b9\uff0c\u5426\u5219\u5f62\u6210\u4e0d\u4e86\u94fe\u3002\n\n\u5e38\u6570\u6709\u70b9\u5927\uff0c\u9700\u8981\u7528\u6811\u5256\u6c42 LCA\uff0c\u5728\u5916\u5c42\u4e8c\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n\\log^3 n)$\uff0c\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n\\log^2 n)$\uff0e\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<ctime>\n#include<set>\n#include<random>\n#include<assert.h>\n#define pb emplace_back\n#define mp make_pair\n#define fi first\n#define se second\n#define dbg(x) cerr<<\"In Line \"<< __LINE__<<\" the \"<<#x<<\" = \"<<x<<'\\n'\n#define dpi(x,y) cerr<<\"In Line \"<<__LINE__<<\" the \"<<#x<<\" = \"<<x<<\" ; \"<<\"the \"<<#y<<\" = \"<<y<<'\\n'\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int>pii;\ntypedef pair<ll,int>pli;\ntypedef pair<ll,ll>pll;\ntypedef pair<int,ll>pil;\ntypedef vector<int>vi;\ntypedef vector<ll>vll;\ntypedef vector<pii>vpii;\ntypedef vector<pil>vpil;\ntemplate<typename T>T cmax(T &x, T y){return x=x>y?x:y;}\ntemplate<typename T>T cmin(T &x, T y){return x=x<y?x:y;}\ntemplate<typename T>\nT &read(T &r){\n\tr=0;bool w=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')w=ch=='-'?1:0,ch=getchar();\n\twhile(ch>='0'&&ch<='9')r=r*10+(ch^48),ch=getchar();\n\treturn r=w?-r:r;\n}\ntemplate<typename T1,typename... T2>\nvoid read(T1 &x,T2& ...y){read(x);read(y...);}\nconst int mod=998244353;\ninline void cadd(int &x,int y){x=(x+y>=mod)?(x+y-mod):(x+y);}\ninline void cdel(int &x,int y){x=(x-y<0)?(x-y+mod):(x-y);}\ninline int add(int x,int y){return (x+y>=mod)?(x+y-mod):(x+y);}\ninline int del(int x,int y){return (x-y<0)?(x-y+mod):(x-y);}\nint qpow(int x,int y){\n\tint s=1;\n\twhile(y){\n\t\tif(y&1)s=1ll*s*x%mod;\n\t\tx=1ll*x*x%mod;\n\t\ty>>=1;\n\t}\n\treturn s;\n}\nconst int N=200010;\nint n;\nint p[N],vis[N];\nint dep[N];\nint dfn[N],dft;\nint top[N],fa[N],siz[N],son[N];\nvi eg[N];\nint LCA(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]>dep[top[y]]){\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\telse y=fa[top[y]];\n\t}\n\treturn dep[x]<dep[y]?x:y;\n}\nint dis(int x,int y){\n\treturn dep[x]+dep[y]-2*dep[LCA(x,y)];\n}\nvoid dfs1(int x,int f){\n\tdfn[x]=++dft;\n\tfa[x]=f;siz[x]=1;dep[x]=dep[f]+1;\n\tfor(auto v:eg[x])if(v!=f)dfs1(v,x),siz[x]+=siz[v],son[x]=siz[v]>siz[son[x]]?v:son[x];\n}\nvoid dfs2(int x,int t){\n\ttop[x]=t;\n\tif(son[x])dfs2(son[x],t);\n\tfor(auto v:eg[x])\n\t\tif(v!=fa[x]&&v!=son[x])\n\t\t\tdfs2(v,v);\n}\n#define ls (x<<1)\n#define rs ((x<<1)|1)\npii tree[N<<2];\npii merge(pii x,pii y){\n\tint a=x.fi,b=x.se,c=y.fi,d=y.se;\n\tvi vec;vec.pb(a);vec.pb(b);vec.pb(c);vec.pb(d);\n\tsort(vec.begin(),vec.end(),[&](const int &x,const int &y){return dfn[x]<dfn[y];});\n\tint sum=(dis(vec[0],vec[1])+dis(vec[1],vec[2])+dis(vec[2],vec[3])+dis(vec[3],vec[0]))/2;\n\tfor(int i=0;i<=3;i++)\n\t\tfor(int j=i+1;j<=3;j++)\n\t\t\tif(dis(vec[i],vec[j])==sum)return mp(vec[i],vec[j]);\n\treturn mp(0,0);\n}\nint ok(int x){\n\treturn tree[x].fi>0;\n}\ninline void pushup(int x){\n\tif(ok(ls)&&ok(rs))\n\t\ttree[x]=merge(tree[ls],tree[rs]);\n\telse tree[x]=mp(0,0);\n}\nvoid build(int x,int l,int r){\n\tif(l==r){\n\t\ttree[x]=mp(vis[l],vis[l]);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(ls,l,mid);build(rs,mid+1,r);\n\tpushup(x);\n}\nvoid modify(int x,int tl,int tr,int p){\n\tif(tl==tr){\n\t\ttree[x]=mp(vis[p],vis[p]);\n\t\treturn ;\n\t}\n\tint mid=(tl+tr)>>1;\n\tif(p<=mid)modify(ls,tl,mid,p);\n\telse modify(rs,mid+1,tr,p);\n\tpushup(x);\n}\npii query(int x,int tl,int tr,int l,int r){\n\tif(tl>=l&&tr<=r)return tree[x];\n\tint mid=(tl+tr)>>1;\n\tpii s;\n\tif(mid>=l&&mid<r){\n\t\tpii s=query(ls,tl,mid,l,r);\n\t\tpii t=query(rs,mid+1,tr,l,r);\n\t\tif(!s.fi || !t.fi)return mp(0,0);\n\t\treturn merge(s,t);\n\t}\n\telse{\n\t\tif(mid>=l)return query(ls,tl,mid,l,r);\n\t\treturn query(rs,mid+1,tr,l,r);\n\t}\n}\n#undef ls\n#undef rs\nsigned main(){\n\t#ifdef do_while_true\n//\t\tassert(freopen(\"data.in\",\"r\",stdin));\n//\t\tassert(freopen(\"data.out\",\"w\",stdout));\n\t#endif\n\tread(n);\n\tfor(int i=1;i<=n;i++)vis[read(p[i])]=i;\n\tfor(int i=2;i<=n;i++){\n\t\tint x;read(x);\n\t\teg[x].pb(i);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tbuild(1,0,n-1);\n\tint q;read(q);\n\twhile(q--){\n\t\tint op;read(op);\n\t\tif(op==2){\n//\t\t\tcerr << \"ans = \";\n\t\t\tint l=1,r=n-1,mid,ans=1;\n\t\t\twhile(l<=r){\n\t\t\t\tmid=(l+r)>>1;\n\t\t\t\tpii t=query(1,0,n-1,0,mid);\n\t\t\t\tif(t.fi){\n\t\t\t\t\tans=mid;\n\t\t\t\t\tl=mid+1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tr=mid-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout << ans+1 << '\\n';\n\t\t}\n\t\telse{\n\t\t\tint x,y;read(x,y);\n\t\t\tswap(p[x],p[y]);\n\t\t\tvis[p[x]]=x;vis[p[y]]=y;\n\t\t\tmodify(1,0,n-1,p[x]);\n\t\t\tmodify(1,0,n-1,p[y]);\n\t\t}\n\t}\n    #ifdef do_while_true\n\t\tcerr<<'\\n'<<\"Time:\"<<1.0*clock()/CLOCKS_PER_SEC*1000<<\" ms\"<<'\\n';\n\t#endif\n\treturn 0;\n}\n```",
        "postTime": 1668432693,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300dCodeforces 1083C Max Mex"
    },
    {
        "content": "\u7531\u4e8e\u6743\u503c\u662f\u4e00\u4e2a\u6392\u5217\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u5408 $S$\uff0c\u60f3\u8981\u51d1\u51fa\u96c6\u5408 $S$ \u4e2d\u6570\u5b57\u7684\u6781\u5c0f\u7684\u94fe\uff0c\u662f\u552f\u4e00\u786e\u5b9a\u7684\u3002\u6ce8\u610f\u8fd9\u662f\u6307 $S$ \u662f\u94fe\u6240\u5305\u542b\u6743\u503c\u96c6\u5408\u7684\u5b50\u96c6\u3002\n\n\u90a3\u4e48\u6c42\u89e3 mex \u7684\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848 $mid$\uff0c\u5224\u65ad\u533a\u95f4 $[l,mid]$ \u662f\u5426\u53ef\u4ee5\u627e\u7684\u8fd9\u6837\u4e00\u4e2a\u94fe\u3002\n\n\u4e0d\u59a8\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c$[l,r]$ \u8282\u70b9\u7ef4\u62a4\u4e24\u4e2a\u7aef\u70b9 $a,b$\uff0c\u8868\u793a\u5f53 $S = [l,r]$ \u65f6\uff0c\u94fe\u4e24\u7aef\u70b9\u662f\u5565\u3002\n\n\u53d1\u73b0\u7531\u4e8e\u6781\u5c0f\u7684\u94fe\u552f\u4e00\u786e\u5b9a\uff0c\u4e24\u4e2a\u533a\u95f4\u662f\u5bb9\u6613\u5408\u5e76\u7684\u3002\u5373\u5224\u65ad\u5de6\u53f3\u513f\u5b50\u662f\u5426\u53ef\u4ee5\u5408\u5e76\u6210\u4e00\u6761\u65b0\u94fe\u3002\n\n\u90a3\u4e48\u6709 4 \u4e2a\u8282\u70b9\uff0c\u65b0\u94fe\u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e24\u4e2a\u5176\u4e2d\u7684\u8282\u70b9\u3002\uff08\u4fdd\u6301\u6781\u5c0f\u7684\u6027\u8d28\uff09\n\n\u90a3\u4e48\u679a\u4e3e 6 \u79cd\u60c5\u51b5\u5224\u65ad\u5269\u4e0b\u4e24\u4e2a\u662f\u5426\u5728\u5176\u5f62\u6210\u7684\u94fe\u4e0a\u3002\n\n\u8fd9\u6837\u53ef\u4ee5 $O(k \\log n )$ \u5f97\u5230\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u53ef\u4ee5\u5168\u90e8\u586b\u5145\u3002$k$ \u662f\u5408\u5e76\u590d\u6742\u5ea6\uff0c\u5927\u641e\u662f $6\\log n$ \u7684\u7ea7\u522b\u3002\uff08\u6216\u8005 RMQ $O(1)$ LCA \u80fd\u505a\u5230\u66f4\u4f18\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u53ef\u80fd\u8dd1\u4e0d\u8fc7\u6811\u5256 LCA\uff1f\uff09\n\n\u8fd9\u4e0b\u4e0a\u8ff0\u4e8c\u5206\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u6267\u884c\u4e86\u3002 \u8fd9\u91cc\u4f7f\u7528\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5c31\u53ef\u4ee5\u518d\u53bb\u6389\u4e00\u4e2a log\u3002\n\n\u4ea4\u6362\u70b9\u6743\u662f simple \u7684\uff0c\u7ebf\u6bb5\u6811\u505a\u4e24\u6b21\u5355\u70b9\u4fee\u6539\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}((n+q)k\\log n)$\u3002",
        "postTime": 1668400371,
        "uid": 119062,
        "name": "Lates",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1083C Max Mex"
    },
    {
        "content": "\u6211\u4eec\u4ece\u503c\u7684\u65b9\u9762\u8003\u8651\uff0c\u5373\u7c7b\u4f3c\u4e8e\u4e8c\u5206\u7b54\u6848 $\\text{mex}(V(l))$\u3002\n\n\u5373\uff1a\u6211\u4eec\u8981\u7ef4\u62a4\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u503c $x\\in[0,n)$\uff0c$[0,x]$ \u8fd9\u4e9b**\u70b9\u6743**\u5bf9\u5e94\u7684\u70b9\u662f\u5426\u53ef\u80fd\u6784\u6210\u4e00\u6761\u94fe\u3002\n\n\u7531\u4e8e\u5355\u70b9\u4fee\u6539\uff0c\u6211\u4eec\u8003\u8651**\u7ebf\u6bb5\u6811**\u3002\n\n\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9 $[l,r]$ \u7ef4\u62a4 $(u,v)$\uff0c\u8868\u793a\uff1a\n\n{ \u5305\u542b\u6240\u6709 { **\u70b9\u6743\u5728** $[l,r]$ \u533a\u95f4\u5185\u7684\u70b9 } \u7684\u6700\u77ed\u94fe } \u7684\u4e24\u7aef\u8282\u70b9\u7f16\u53f7\u3002\n\n\uff08\u62d7\u53e3\uff0c\u5f3a\u884c\u65ad\u53e5\uff09\n\n\u5f53\u7136\u82e5\u4e0d\u53ef\u80fd\u6784\u6210\u94fe\uff0c\u5219 $u=v=-1$\uff08\u6807\u8bb0\u4e3a\u65e0\u89e3\uff09\u3002\n\n\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5 $O(1)$ **\u201c\u5408\u5e76\u201d\u4e24\u6761\u94fe**\uff08\u89c1\u540e\u6587\u89e3\u91ca\uff09\uff0c\u6240\u4ee5\u5efa\u6811 $O(n)$\uff0c\u5355\u6b21\u4fee\u6539\u7684\u590d\u6742\u5ea6\u4e3a $O(\\log n)$\u3002\n\n\u67e5\u8be2\u65f6\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff0c\u590d\u6742\u5ea6\u4e5f\u662f $O(\\log n)$\u3002\n\n\u603b\u65f6\u95f4 $O(n+q\\log n)$\u3002\n\n* * *\n\n**\u5982\u4f55 $O(1)$ \u67e5\u8be2\u4e24\u70b9\u7684 LCA\uff1a**\n\n\u6c42\u51fa\u6811\u7684\u6b27\u62c9\u5e8f\uff0c\u5efa ST \u8868\uff0c\u4e24\u70b9\u7684 LCA \u4e3a\u4e24\u70b9\u5728\u6b27\u62c9\u5e8f\u4e2d\u4e4b\u95f4\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u3002\n\n\u6210\u529f\u8f6c\u5316\u6210 RMQ \u95ee\u9898\uff0c$O(1)$\u3002\n\n**\u5982\u4f55 $O(1)$ \u5224\u65ad\u4e00\u70b9 $z$ \u662f\u5426\u5728 $(x,y)$ \u8def\u5f84\u4e0a\uff1a**\n\n$\\text{lca}(z,\\text{lca}(x,y))=\\text{lca}(x,y)\\ \\land\\ (\\text{lca}(z,x)=z\\ \\lor\\ \\text{lca}(z,y)=z)$\n\n\uff08\u53ef\u80fd\u4e0d\u9700\u8981\u89e3\u91ca\uff09\n\n**\u201c\u5408\u5e76\u201d\u4e24\u6761\u94fe\u5982\u4f55\u505a\u5230 $O(1)$\uff1a**\n\n\u62ff\u6765\u4e24\u6761\u94fe\u7684 $4$ \u4e2a\u7aef\u70b9\uff0c$\\binom{4}{2}$ \u679a\u4e3e\u54ea\u4e24\u4e2a\u4e3a\u5408\u5e76\u540e\u7684\u7aef\u70b9\uff0c\u5224\u65ad\u5269\u4f59\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u4e24\u7aef\u70b9\u95f4\u7684\u8def\u5f84\u4e0a\u5373\u53ef\u3002\n\n* * *\n\n\u7531\u4e8e\u5408\u5e76\u94fe\u7684\u5e38\u6570\u8f83\u5927\uff0c\u8bf7\u6ce8\u610f\u5e38\u6570\u4f18\u5316\u3002\n\n```cpp\n//We'll be counting stars.\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\n#define fir first\n#define sec second\n#define mkp make_pair\n#define pb emplace_back\n#define For(i,j,k) for(int i=(j),i##_=(k);i<=i##_;i++)\n#define N 200010\n#define C 18\n#define pi pair<int,int>\nchar buf[1<<21],*p1,*p2;\n#define gc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\ninline int read() {\n\tint x=0,f=1;\n\tchar c=gc();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=gc();}\n\twhile(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+(c^48);c=gc();}\n\treturn x*f;\n}\nint n,q,a[N],b[N],dep[N],L[N],R[N],tim=0,f[C+1][2*N],w[4],lg[2*N];\nvector<int> e[N];\npi t[N<<2],v;\nvoid dfs(int rt,int fa){\n\tdep[rt]=dep[fa]+1;\n\tL[rt]=++tim;\n\tf[0][tim]=rt;\n\tfor(int i:e[rt]) dfs(i,rt),f[0][++tim]=rt;\n\tR[rt]=tim;\n}\ninline int cmp(int x,int y){ return dep[x]<dep[y]?x:y; }\ninline int LCA(int x,int y){\n\tx=L[x],y=L[y];\n\tif(x>y) swap(x,y);\n\tint z=lg[y-x];\n\treturn cmp(f[z][x],f[z][y-(1<<z)+1]);\n}\ninline bool onl(int x,int y,int z){\n\tint lca=LCA(x,y);\n\treturn LCA(z,lca)==lca && (LCA(z,x)==z || LCA(z,y)==z);\n}\ninline pi operator+(pi x,pi y){\n\tif(x.fir==-1 || y.fir==-1) return mkp(-1,-1);\n\tw[0]=x.fir,w[1]=x.sec,w[2]=y.fir,w[3]=y.sec;\n\tFor(i,0,3)\n\t\tif(onl(w[i],w[(i+1)%4],w[(i+2)%4]) && onl(w[i],w[(i+1)%4],w[(i+3)%4]))\n\t\t\treturn mkp(w[i],w[(i+1)%4]);\n\tFor(i,0,1)\n\t\tif(onl(w[i],w[(i+2)%4],w[(i+1)%4]) && onl(w[i],w[(i+2)%4],w[(i+3)%4]))\n\t\t\treturn mkp(w[i],w[(i+2)%4]);\n\treturn mkp(-1,-1);\n}\n#define ls (rt<<1)\n#define rs (rt<<1|1)\n#define mid ((l+r)>>1)\nvoid build(int rt,int l,int r){\n\tif(l==r){\n\t\tt[rt]=mkp(b[l],b[l]);\n\t\treturn ;\n\t}\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\tt[rt]=t[ls]+t[rs];\n}\nvoid modify(int rt,int l,int r,int id){\n\tif(l==r){\n\t\tt[rt]=mkp(b[l],b[l]);\n\t\treturn ;\n\t}\n\tif(id<=mid) modify(ls,l,mid,id);\n\telse modify(rs,mid+1,r,id);\n\tt[rt]=t[ls]+t[rs];\n}\nint que(int rt,int l,int r){\n\tpi vv=v+t[rt];\n\tif(vv.fir!=-1){\n\t\tv=vv;\n\t\treturn r+1;\n\t}\n\tif(l==r) return l;\n\tint res=que(ls,l,mid);\n\tif(res<=mid) return res;\n\telse return que(rs,mid+1,r);\n}\nsigned main(){\n\tn=read();\n\tFor(i,1,n) b[a[i]=read()]=i;\n\tFor(i,2,n) e[read()].pb(i);\n\tdfs(1,0);\n\tlg[1]=0; For(i,2,tim) lg[i]=lg[i>>1]+1;\n\tFor(j,0,C-1) For(i,1,tim-(1<<(j+1))+1) f[j+1][i]=cmp(f[j][i],f[j][i+(1<<j)]);\n\tbuild(1,0,n-1);\n\tq=read();\n\tint x,y;\n\twhile(q--){\n\t\tif(read()==1){\n\t\t\tx=read(),y=read();\n\t\t\tswap(a[x],a[y]);\n\t\t\tswap(b[a[x]],b[a[y]]);\n\t\t\tmodify(1,0,n-1,a[x]);\n\t\t\tmodify(1,0,n-1,a[y]);\n\t\t}else{\n\t\t\tv=mkp(b[0],b[0]);\n\t\t\tprintf(\"%d\\n\",que(1,0,n-1));\n\t\t}\n\t}\nreturn 0;}\n```",
        "postTime": 1659497527,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "CF1083C Max Mex\uff08\u7ebf\u6bb5\u6811\uff09"
    },
    {
        "content": "\u5999\u9898\u3002\n\n\u6c42\u4e00\u6761 $\\text{mex}$ \u503c\u6700\u5927\u7684\u8def\u5f84\uff0c\u5c31\u76f8\u5f53\u4e8e\u6c42\u4e00\u4e2a\u6700\u5927\u7684\u524d\u7f00 $0,1,2,\\cdots,k$ \u4f7f\u5f97\u70b9\u6743\u4e3a $0,1,\\cdots,k$ \u7684\u70b9\u90fd\u53ef\u4ee5\u88ab\u5305\u542b\u5728\u540c\u4e00\u6761\u94fe\u4e2d\u3002\n\n\u6211\u4eec\u8003\u8651\u5bf9\u6bcf\u4e2a $i$ \u7ef4\u62a4\u70b9\u6743 $=i$ \u7684\u70b9\u5728\u6811\u4e0a\u7684\u7f16\u53f7\u3002\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u4e00\u6bb5\u533a\u95f4 $[l,r]$ \u662f\u5426\u90fd\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u3002\n\n\u8003\u8651\u5982\u4f55\u5408\u5e76\u533a\u95f4\u7684\u4fe1\u606f\u3002\u5bf9\u4e8e\u533a\u95f4 $[l,m]$ \u4e0e\u533a\u95f4 $[m+1,r]$\uff1a\n\n- \u82e5\u4efb\u610f\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u70b9\u4e0d\u6784\u6210\u94fe\uff0c\u90a3\u5408\u8d77\u6765\u80af\u5b9a\u4e5f\u4e0d\u6784\u6210\u94fe\u3002\n- \u82e5\u4e24\u8fb9\u90fd\u6784\u6210\u94fe\uff0c\u90a3\u4e48\u6211\u4eec\u8bbe\u4e24\u6761\u94fe\u7684\u7aef\u70b9\u5206\u522b\u4e3a $a,b,c,d$\uff1b\u5982\u679c\u80fd\u6784\u6210\u65b0\u7684\u94fe\u90a3\u4e48\u7aef\u70b9\u80af\u5b9a\u662f\u8fd9\u56db\u4e2a\u4e2d\u7684\u4e24\u4e2a\uff0c\u56e0\u6b64\u679a\u4e3e $C_4^2=6$ \u79cd\u53ef\u80fd\uff0c\u5224\u65ad\u4e00\u4e0b\u5269\u4e0b\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u8fd9\u6761\u94fe\u4e0a\u5373\u53ef\u3002\n\n\u73b0\u5728\u53ea\u9700\u8981\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u4e00\u6761\u94fe\u4e0a\u3002\n\n\u8fd9\u4e2a\u5176\u5b9e\u5f88 simple\uff1a\u6ce8\u610f\u5230 $x$ \u5728\u94fe $u\\to v$ \u4e0a\u7684\u5145\u8981\u6761\u4ef6\u662f $\\text{dist}(x,u)+\\text{dist}(x,v)=\\text{dist}(u,v)$\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u5feb\u901f\u6c42\u6811\u4e0a\u4e24\u70b9\u95f4\u8ddd\u79bb\u5373\u53ef\u3002\u4f7f\u7528 $\\text{ST}$ \u8868\u9884\u5904\u7406\u4e00\u4e0b $\\text{LCA}$ \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+q)\\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\n#define int long long\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\tfor(;(c<'0'||c>'9');c=getchar()){if(c=='-')f=-1;}\n\tfor(;(c>='0'&&c<='9');c=getchar())x=x*10+(c&15);\n\treturn x*f;\n}\n\nconst int MN=4e5+5;\nconst int MC=20;\nvector<int>G[MN];\nint dis[MN],dfn[MN],n,q;\npair<int,int>ST[MN][MC];\nint Lg[MN];\n\n#define mk make_pair\n#define fi first\n#define se second\n\nint tot=0;\nvoid dfs(int u,int fa,int de){\n\tdfn[u]=++tot,ST[tot][0]=mk(de,u);\n\tfor(int v:G[u]){\n\t\tif(v==fa)continue;\n\t\tdis[v]=dis[u]+1,dfs(v,u,de+1);\n\t\tdfn[u]=++tot;ST[tot][0]=mk(de,u);\n\t}\n}\n\nvoid ST_build(){\n\tassert(tot==2*n-1);\n\tfor(int i=2;i<=tot;i++)Lg[i]=Lg[i>>1]+1;\n\tfor(int x=1;x<=19;x++){\n\t\tfor(int i=1;i+(1<<x)-1<=tot;i++)ST[i][x]=min(ST[i][x-1],ST[i+(1<<(x-1))][x-1]);\n\t}\n}\n\nint dist(int u,int v){\n\tint l=dfn[u],r=dfn[v];\n\tif(l>r)swap(l,r);int k=Lg[r-l+1];\n\tint z=min(ST[l][k],ST[r-(1<<k)+1][k]).se;\n\treturn dis[u]+dis[v]-2*dis[z];\n}\n\nbool chk(int x,int u,int v){return dist(x,u)+dist(x,v)==dist(u,v);}\n\nint c[MN];\n\nstruct Node{\n\tint x,y,f;\n\tNode(int X,int Y,int F):x(X),y(Y),f(F){}\n\tNode(){}\n};\n\n#define lson(o) (o<<1)\n#define rson(o) (o<<1|1)\n\nstruct SegTree{\n\tNode d[MN<<2];\n\n\tinline Node merge(Node ls,Node rs){\n\t\tif(ls.f==2)return rs;\n\t\tif(rs.f==2)return ls;\n\t\tif((!ls.f)||(!rs.f))return Node(0,0,0);\n\t\tint p=ls.x,q=ls.y,s=rs.x,t=rs.y;\n\t\tif(chk(p,s,t)&&chk(q,s,t))return Node(s,t,1);\n\t\tif(chk(p,q,t)&&chk(s,q,t))return Node(q,t,1);\n\t\tif(chk(q,p,t)&&chk(s,p,t))return Node(p,t,1);\n\t\tif(chk(p,q,s)&&chk(t,q,s))return Node(q,s,1);\n\t\tif(chk(q,p,s)&&chk(t,p,s))return Node(p,s,1);\n\t\tif(chk(s,p,q)&&chk(t,p,q))return Node(p,q,1);\n\t\treturn Node(0,0,0);\n\t}\n\n\tinline void pushup(int o){\n\t\td[o]=merge(d[lson(o)],d[rson(o)]);\n\t}\n\n\tinline void build(int l,int r,int o){\n\t\tif(l==r){d[o]=Node(c[l],c[l],1);return ;}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(l,mid,lson(o)),build(mid+1,r,rson(o));\n\t\tpushup(o);\n\t}\n\n\tinline void modify(int pos,Node x,int ql,int qr,int o){\n\t\tif(ql==qr){d[o]=x;return ;}\n\t\tint mid=(ql+qr)>>1;\n\t\tif(pos<=mid)modify(pos,x,ql,mid,lson(o));\n\t\telse modify(pos,x,mid+1,qr,rson(o));\n\t\tpushup(o);\n\t}\n\t\n\tinline int query(Node x,int ql,int qr,int o){\n\t\tif(merge(x,d[o]).f==1)return qr;\n\t\tif(ql==qr)return ql-1;\n\t\tint mid=(ql+qr)>>1;\n\t\tif(!merge(x,d[lson(o)]).f)return query(x,ql,mid,lson(o));\n\t\telse return query(merge(x,d[lson(o)]),mid+1,qr,rson(o));\n\t}\n}tree;\n\nint p[MN];\n\n#define OK puts(\"OK\")\n\nsigned main(void){\n\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.in\",\"r\",stdin);\n#endif\n\n\tn=read();\n\tfor(int i=1;i<=n;i++)p[i]=read(),c[p[i]+1]=i;\n\tfor(int i=2;i<=n;i++){int f=read();G[i].push_back(f),G[f].push_back(i);}\n\tdfs(1,0,1);ST_build();tree.build(1,n,1);\n\tq=read();\n\twhile(q--){\n\t\tint op=read();\n\t\tif(op==1){\n\t\t\tint x=read(),y=read();\n\t\t\ttree.modify(p[x]+1,Node(y,y,1),1,n,1);\n\t\t\ttree.modify(p[y]+1,Node(x,x,1),1,n,1);\n\t\t\tswap(p[x],p[y]);\n\t\t}\n\t\telse cout<<tree.query(Node(0,0,2),1,n,1)<<endl;\n\t}\n\n\treturn 0;\n}\n```",
        "postTime": 1643025247,
        "uid": 307453,
        "name": "\u4e91\u6d45\u77e5\u5904",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1083C Max Mex"
    }
]