[
    {
        "content": "\u840c\u840c\u9898\u3002\n\n## \u9898\u89e3\n\n\u8003\u8651\u968f\u4fbf\u6811\u4e0a\u4e00\u4e2a\u8282\u70b9 $u$\uff0c\u4ee5\u53ca $u$ \u5b50\u6811\u5185\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9 $x$\u3002\u4ece $1$ \u5230 $x$ \u7684\u8def\u5f84\u53ef\u89c6\u4e3a $1\\to\\cdots\\to u\\to \\cdots \\to x$\uff0c\u6240\u4ee5\u4ece $u$ \u5230\u4efb\u610f\u4e00\u4e2a $x$ \u7684\u8def\u5f84\uff0c\u5f02\u6216\u548c\u90fd\u8981\u662f\u76f8\u7b49\u7684\u3002\n\n\u8bb0 $f_u$ \u8868\u793a\u4ece $u$ \u51fa\u53d1\uff0c\u5230\u8fbe $u$ \u5b50\u6811\u5185\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u8def\u5f84\u6743\u503c\u76f8\u540c\uff0c\u81f3\u5c11\u9700\u8981\u4fee\u6539\u591a\u5c11\u4e2a\u8282\u70b9\u3002\u663e\u7136\uff0c\u53ea\u662f\u4e3a\u4e86\u8fbe\u6210\u300c\u8def\u5f84\u6743\u503c\u76f8\u540c\u300d\u8fd9\u4e00\u4e2a\u6761\u4ef6\u7684\u8bdd\uff0c$u$ \u7684\u6743\u503c\u6ca1\u6709\u5fc5\u8981\u4fee\u6539\u3002\n\n\u4e0b\u9762\u8003\u8651\u8f6c\u79fb\u3002\u5047\u8bbe $u$ \u6709\u4e00\u5806\u513f\u5b50 $v_1,v_2,\\cdots,v_k$\uff0c\u90a3\u4e48\u9996\u5148\u8981\u8ba9 $v_i$ \u5230 $v_i$ \u5b50\u6811\u5185\u7684\u53f6\u5b50\u7684\u8def\u5f84\u6743\u503c\u76f8\u7b49\uff0c\u6240\u4ee5\u9996\u5148\u8981\u64cd\u4f5c $\\sum f_{v_i}$ \u6b21\uff1b\u63a5\u7740\u6b64\u65f6 $v_i$ \u7684\u6743\u503c\u80af\u5b9a\u90fd\u6ca1\u6709\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4fee\u6539\u5c3d\u53ef\u80fd\u5c11\u7684 $v_i$ \u7684\u6743\u503c\uff0c\u8fd9\u6837\u624d\u80fd\u4f7f\u5f97 $u$ \u5230 $u$ \u5b50\u6811\u5185\u53f6\u5b50\u7ed3\u70b9\u7684\u6743\u503c\u76f8\u7b49\u3002\n\n\u6b64\u65f6\u51fa\u73b0\u4e86\u56f0\u96be\u3002\u56e0\u4e3a\u82b1\u8d39\u6700\u5c11\u6b21\u6570\u8ba9 $v_i$ \u5230 $v_i$ \u5185\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\u76f8\u7b49\uff0c\u6700\u7ec8\u76f8\u7b49\u7684\u6743\u503c\u53ef\u80fd\u6709\u5f88\u591a\u79cd\u60c5\u51b5\u3002\u6211\u4eec\u8bb0\u300c**\u5728\u4fee\u6539\u6b21\u6570\u6700\u5c11\u7684\u60c5\u51b5\u4e0b**\u300d\u53ef\u4ee5\u53d6\u5f97\u7684\u76f8\u7b49\u7684\u503c\uff0c\u7ec4\u6210\u7684\u96c6\u5408\u4e3a $M_{v_i}$\u3002\u4e3a\u4ec0\u4e48\u975e\u5f97\u662f\u4fee\u6539\u6b21\u6570\u6700\u5c11\uff1f\u8fd9\u662f\u56e0\u4e3a\uff0c\u5728\u4fee\u6539\u6b21\u6570\u4e0d\u662f\u6700\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u53ef\u4ee5\u4f7f\u5f97\u6240\u6709\u6743\u503c\u90fd\u7b49\u4e8e\u67d0\u4e2a\u503c $w$\uff0c\u4e5f\u4e0d\u5982\u4efb\u53d6\u67d0\u4e2a\u4fee\u6539\u6b21\u6570\u6700\u5c0f\u7684\u60c5\u5f62\uff0c\u901a\u8fc7\u4fee\u6539 $v_i$ \u7684\u6743\u503c\u4f7f\u5f97\u76f8\u7b49\u7684\u6743\u503c\u4e3a $w$\u3002\n\n\u90a3\u4e48\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\uff1a\n\n- \u5148\u9012\u5f52\u8ba1\u7b97\u51fa $M_{v_1},M_{v_2},\\cdots,M_{v_k}$\uff1b\n- \u7ef4\u62a4\u53ef\u91cd\u96c6 $S=M_{v_1}\\cup M_{v_2}\\cup\\cdots\\cup M_{v_k}$\uff1b\n- \u627e\u5230 $S$ \u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e00\u4e9b\u5143\u7d20\uff0c\u8bb0\u6700\u591a\u7684\u51fa\u73b0\u6b21\u6570\u4e3a $t$\uff0c\u90a3\u4e48 $f_u=(\\sum f_{v_i})+k-t$\u3002\u540c\u65f6\u5c06\u8fd9\u4e9b\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\uff0c**\u5f02\u6216\u4e0a** $u$ \u7684\u6743\u503c\uff0c\u653e\u5230 $M_u$ \u91cc\u3002\n\n\u5982\u6b64\u64cd\u4f5c\uff0c\u76f4\u5230\u8ba1\u7b97\u51fa $f_1$ \u548c $M_1$\uff0c\u68c0\u67e5 $M_1$ \u91cc\u6709\u6ca1\u6709\u5143\u7d20 $0$\u3002\u5982\u679c\u6709\u5143\u7d20 $0$\uff0c\u7b54\u6848\u5c31\u662f $f_1$\uff0c\u5426\u5219\u7b54\u6848\u4e3a $f_1+1$\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u5148\u8ba1\u7b97\u51fa $u$ \u7684\u91cd\u513f\u5b50 $g$ \u7684\u76f8\u7b49\u503c\u96c6\u5408 $M_g$\uff0c\u7136\u540e\u8003\u8651\u5c06\u5176\u4ed6\u513f\u5b50\u7684\u7b54\u6848\u5408\u5e76\u8fdb\u53bb\u3002\u6211\u4eec\u53ef\u4ee5\u5148\u5c06 $g$ \u4ee5\u5916\u7684\u513f\u5b50\u7684 $M$ \u503c\u5408\u5e76\u8fdb $S$\uff0c\u5408\u5e76\u5b8c\u540e\uff0c**\u5bf9\u4e8e $\\bm S$ \u5185\u7684\u6bcf\u4e2a\u952e\u503c**\u67e5\u8be2\u5728\u4e0d\u5728 $M_g$ \u91cc\uff0c\u5982\u679c\u5728\uff0c\u5c31\u628a\u5bf9\u5e94\u7684\u6b21\u6570 $+1$\u3002\uff08\u5982\u679c\u904d\u5386 $M_g$ \u66f4\u65b0 $S$ \u7684\u503c\uff0c\u590d\u6742\u5ea6\u5c31\u6210\u4e86 $O(\\mathit{size}_u \\log n)$\uff0c\u4f46\u662f\u904d\u5386 $S$ \u5185\u7684\u5143\u7d20\u6765\u66f4\u65b0 $S$\uff0c\u590d\u6742\u5ea6\u5c31\u6210\u529f\u964d\u5230\u4e86 $O((\\mathit{size}_u-\\mathit{size}_g) \\log n)$\uff09\u3002\u5982\u679c\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\uff0c\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e86 $1$\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5143\u7d20**\u4e00\u5b9a\u662f\u5728 $\\bm S$ \u91cc\u7684**\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u629b\u5f03 $M_g$\uff0c\u904d\u5386 $S$ \u5185\u7684\u5143\u7d20\u653e\u5230 $M_u$ \u91cc\uff1b\u5426\u5219\uff0c\u5982\u679c\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\u53ea\u51fa\u73b0\u4e86 $1$ \u6b21\uff0c\u5c31\u8bf4\u660e $M_u=M_g\\cup S$\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u4ecd\u7136\u662f\u904d\u5386 $S$ \u7684\u5143\u7d20\u63d2\u5165\u5230 $M_g$ \u91cc\uff0c\u63a5\u7740\u628a $M_u$ \u6307\u5411 $M_g$\u3002\n\n\u4f46\u662f\u8fd9\u65f6\u53c8\u6709\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u9700\u8981\u628a $M_u$ \u5185\u6240\u6709\u5143\u7d20\u5f02\u6216\u4e0a $u$ \u7684\u6743\u503c\u3002\u89e3\u51b3\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6807\u8bb0 $K_u$\uff0c$M_u$ \u91cc\u5b9e\u9645\u5b58\u50a8\u7684\u5143\u7d20\u662f\u4ee3\u7801\u91cc\u5199\u7740\u7684 $M_u$ \u91cc\u7684\u503c\u5f02\u6216\u4e0a $K_u$\u3002\u6240\u4ee5\uff0c\u5728\u628a $M_{v_i}$ \u5408\u5e76\u8fdb $S$ \u65f6\uff0c\u8981\u628a\u5bf9\u5e94\u5143\u7d20\u5f02\u6216\u4e0a $K_{v_i}$ \u518d\u5408\u5e76\uff1b\u5728 $u$ \u76f4\u63a5\u62ff\u6765 $M_g$ \u5145\u5f53 $M_u$ \u65f6\uff0c\u4e5f\u9700\u8981\u7cbe\u7ec6\u8003\u8651\u5bf9\u5e94\u7684\u6807\u8bb0\u3002\n\n\u4e0a\u6587\u63d0\u5230\u7684 $M$ \u548c $S$ \u90fd\u53ef\u4ee5\u76f4\u63a5\u7528 $\\text{map}$ \u5b9e\u73b0\u3002\u590d\u6742\u5ea6\u6700\u574f\u4e3a $\\mathcal O(n\\log ^2n)$\uff0c\u5728\u539f\u6811\u662f\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\u65f6\u53d6\u5f97\u3002\n\n\u5b9e\u73b0\u7ec6\u8282\u6709\u70b9\u591a\uff0c\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define up(l, r, i) for(int i = l, END##i = r;i <= END##i;++ i)\n#define dn(r, l, i) for(int i = r, END##i = l;i >= END##i;-- i)\nusing namespace std;\ntypedef long long i64;\nconst int INF = 2147483647;\nconst int MAXN= 1e5 + 3;\nvector <int> V[MAXN];\nint G[MAXN], T[MAXN], K[MAXN], A[MAXN], F[MAXN], S[MAXN];\nvoid dfs0(int u, int f){\n    S[u] = 1;\n    for(auto &v : V[u]) if(v != f){\n        dfs0(v, u), S[u] += S[v];\n        if(S[v] > S[G[u]]) G[u] = v;\n    }\n}\nmap<int, bool> M[MAXN];\nvoid dfs(int u, int f){\n    if(V[u].size() == 1 && f){\n        T[u] = u, M[T[u]][0] = true, K[u] = A[u], F[u] = 0;\n    } else {\n        map<int, int> S;\n        dfs(G[u], u);\n        T[u] = T[G[u]];\n        K[u] = K[G[u]];\n        int c = 1, sum = F[G[u]], w = 1;\n        for(auto &v : V[u]) if(v != f && v != G[u]){\n            dfs(v, u);\n            for(auto &x : M[T[v]]){\n                S[x.first ^ K[v]] ++;\n            }\n            ++ c, sum += F[v];\n        }\n        for(auto &x : S){\n            if(M[T[u]].count(x.first ^ K[u])) ++ x.second;\n            w = max(w, x.second);\n        }\n        if(w == 1){\n            for(auto &x : S){\n                M[T[u]][x.first ^ K[u]] = true;\n            }\n        } else {\n            M[T[u]].clear();\n            for(auto &x : S){\n                if(x.second == w)\n                    M[T[u]][x.first ^ K[u]] = true;\n            }\n        }\n        K[u] ^= A[u];\n        F[u] = sum + c - w;\n    }\n}\nint qread(){\n    int w = 1, c, ret;\n    while((c = getchar()) >  '9' || c <  '0') w = (c == '-' ? -1 : 1); ret = c - '0';\n    while((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + c - '0';\n    return ret * w;\n}\nint main(){\n    int n = qread();\n    up(1, n, i) A[i] = qread();\n    up(1, n - 1, i){\n        int u = qread(), v = qread();\n        V[u].push_back(v);\n        V[v].push_back(u);\n    }\n    dfs0(1, 0);\n    dfs(1, 0);\n    for(auto &x : M[T[1]]){\n        if((x.first ^ K[1]) == 0){\n            printf(\"%d\\n\", F[1]); exit(0);\n        }\n    }\n    printf(\"%d\\n\", F[1] + 1);\n    return 0;\n}\n```",
        "postTime": 1683602972,
        "uid": 68344,
        "name": "\u79bb\u6563\u5c0f\u6ce2\u53d8\u6362\u00b0",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1824C \u3010LuoTianyi and XOR-Tree\u3011"
    },
    {
        "content": "### [\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/CF1824C)\n\n\u7b80\u5316\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6839\u8282\u70b9\u4e3a $1$\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u70b9\u6743 $a_i$\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u70b9\u4efb\u610f\u4fee\u6539\u70b9\u6743\uff0c\u6c42\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u6839\u7ed3\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u5f02\u6216\u548c\u90fd\u4e3a $0$\u3002\n\n\u663e\u7136\u6211\u4eec\u770b\u5230\u9898\u76ee\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u76f8\u5bf9\u66b4\u529b\u7684 DP\uff0c\u7528 $f_{i,j}$ \u8868\u793a\u5c06 $i$ \u7684\u5b50\u6811\u4e2d\u6240\u6709\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u7684\u5f02\u6216\u548c\u90fd\u4e3a $j$ \u6240\u9700\u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u7684\u8f6c\u79fb\u65b9\u7a0b\u3002\n$$\nf_{i,j}=\\sum\\limits_{v}^{v\\in subtree(i)}f_{v,j}\n$$\n\n$$\nf_{i,j}=\\min \\{f_{i,k}+1,f_{i,j}\\},k\\in [1,1073741823]\n$$\n\n\n\u66b4\u529b\u8f6c\u79fb\u663e\u7136\u662f\u4e0d\u884c\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u4f18\u5316\uff0c\u4e8e\u662f\u95ee\u9898\u5c31\u8f6c\u6362\u6210\u4e86\n\u7ef4\u62a4\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u652f\u6301\u7ebf\u6bb5\u6811\u5408\u5e76\u6743\u503c\u76f8\u52a0\uff0c\u533a\u95f4\u53d6 $\\min$\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u7ef4\u62a4\u624b\u6cd5\u53ef\u4ee5\n\u53c2\u8003[P4577 \u9886\u5bfc\u96c6\u56e2\u95ee\u9898](https://www.luogu.com.cn/problem/P4577)\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u5728\u5408\u5e76\u65f6\u5bf9\u4e8e\u6ca1\u6709\u5de6\u53f3\u513f\u5b50\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u89c6\u4e3a\u4e00\u6b21\u533a\u95f4\u52a0\uff0c\u5bf9\u4e8e\u5176\u4ed6\u8282\u70b9\u76f4\u63a5\u66b4\u529b\u4e0b\u4f20\u6807\u8bb0\u3002\n\n\u5176\u4ed6\u7684\u5c31\u662f\u8981\u4e25\u683c\u6ce8\u610f\u8fb9\u754c\uff0c\u9632\u6b62\u7ebf\u6bb5\u6811\u5de6\u53f3\u8fb9\u754c\u76f8\u52a0\u7206 int\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int N=1e5+10,M=N*63,S=1073741823;\nint n,ls[M],rs[M],root[N],mx[M],tot,lz[M],add[M],w[N],dn;\nint head[N],cnt;\nstruct edge{\n\tint to,nxt;\n}e[N*2];\nint stk[N*100],top; \nvoid Add(int i,int j){\n\te[++cnt].to=j;\n\te[cnt].nxt=head[i];\n\thead[i]=cnt;\n}\nint getnode(){\n\tif(top<=0) return ++tot;\n\treturn stk[top--];\n}\n#define mid (l+r>>1)\n#define pushup(tr) mx[tr]=min(mx[ls[tr]],mx[rs[tr]])\nvoid lazy_add(int tr,int v){\n\tif(!tr) return void(); \n\tadd[tr]+=v;add[tr]>dn?add[tr]=dn:0;\n\tlz[tr]+=v;lz[tr]>dn?lz[tr]=dn:0;\n\tmx[tr]+=v;mx[tr]>dn?mx[tr]=dn:0;\n}\nvoid lazy(int tr,int v){\n\tv>dn?v=dn:0;\n\tif(!tr) return;\n\tlz[tr]=min(lz[tr],v);\n\tmx[tr]=min(lz[tr],mx[tr]);\n}\nvoid pushdown(int tr){\n\tif(!ls[tr]) ls[tr]=getnode();\n\tif(!rs[tr]) rs[tr]=getnode();\n\tif(add[tr]){\n\t\tlazy_add(ls[tr],add[tr]);\n\t\tlazy_add(rs[tr],add[tr]);\n\t\tadd[tr]=0;\n\t}\n\tif(lz[tr]<dn){\n\t\tlazy(ls[tr],lz[tr]);\n\t\tlazy(rs[tr],lz[tr]);\n\t\tlz[tr]=dn;\n\t}\n} \nvoid update(int &tr,int l,int r,int L,int R,int v){\n\tif(!tr) tr=getnode();\n\tif(l>=L&&R>=r) return lazy(tr,v);\n\tpushdown(tr);\n\tif(L<=mid) update(ls[tr],l,mid,L,R,v);\n\tif(R>mid) update(rs[tr],mid+1,r,L,R,v);\n\tpushup(tr);\n}\nint merge(int x,int y,int l,int r){\n\tif(!x||!y) return x|y;\n\tif(!ls[y]&&!rs[y]) swap(x,y);\n\tif(!ls[x]&&!rs[x]) return lazy_add(y,lz[x]),stk[++top]=x,ls[x]=rs[x]=add[x]=0,mx[x]=lz[x]=dn,y;\n\tif(l==r) return mx[x]+=mx[y],(mx[x]>dn?mx[x]=dn:0),x;\n\tpushdown(x);pushdown(y);\n\tls[x]=merge(ls[x],ls[y],l,mid);\n\trs[x]=merge(rs[x],rs[y],mid+1,r);\n\tpushup(x);\n\tstk[++top]=y;\n\tls[y]=rs[y]=add[y]=0;mx[y]=lz[y]=dn;\n\treturn x;\n}\nbool vis[N];\nvoid dfs1(int x,int fa){\n\tw[x]^=w[fa];\n\tvis[x]=1;\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tif(vis[e[i].to]) continue;\n\t\tdfs1(e[i].to,x);\n\t}\n\tif(x!=1&&!e[head[x]].nxt) update(root[x],0,S,w[x],w[x],0);\n}\nint query(int tr,int l,int r,int u){\n\tif(l==r) return mx[tr];\n\tpushdown(tr);\n\tif(u<=mid) return query(ls[tr],l,mid,u);\n\telse return query(rs[tr],mid+1,r,u);\n}\n\nvoid dfs(int x){\n\tvis[x]=1;\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tif(vis[e[i].to]) continue;\n\t\tdfs(e[i].to);\n\t\troot[x]=merge(root[x],root[e[i].to],0,S);\n\t} \n\tupdate(root[x],0,S,0,S,mx[root[x]]+1);\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);cout.tie(0);\n\tcin>>n;\n\tdn=n+10;\n\tfor(int i=0;i<M;i++) lz[i]=mx[i]=dn;\n\tfor(int i=1;i<=n;i++) cin>>w[i];\n\tfor(int i=1;i<n;i++) {\n\t\tint u,v;\n\t\tcin>>u>>v;\n\t\tAdd(u,v);Add(v,u);\n\t}\n\tdfs1(1,0);\n\tmemset(vis,0,sizeof vis);\n\tdfs(1);\n\tcout<<query(root[1],0,S,0)<<endl;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1683599691,
        "uid": 803959,
        "name": "gk4000plus",
        "ccfLevel": 0,
        "title": "CF1824C\u9898\u89e3"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5 $ n $ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6839\u8282\u70b9\u4e3a $ 1 $\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u70b9\u6743 $ a_i $\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u70b9\u4efb\u610f\u4fee\u6539\u70b9\u6743\uff0c\u6c42\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u6839\u7ed3\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u5f02\u6216\u548c\u90fd\u4e3a $ 0 $\u3002\n\n## \u601d\u8def\n\n\u9996\u5148\u53ea\u8981\u8ba9\u6574\u68f5\u6811\u7684\u5404\u6761\u6839\u5230\u53f6\u5b50\u8282\u70b9\u7684\u5f02\u6216\u548c\u53d8\u6210\u76f8\u7b49\u7684\uff0c\u6700\u540e\u8c03\u8282\u6839\u8282\u70b9 $ 1 $ \u7684\u503c\u4f7f\u5f02\u6216\u548c\u53d8\u4e3a $ 0 $ \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6240\u4ee5\u73b0\u5728\u8003\u8651\u5b50\u6811 $ u $\uff0c\u6211\u4eec\u76ee\u6807\u5c06\u8fd9\u9897\u5b50\u6811\u5185\u7684\u6bcf\u4e00\u6761\u4ece\u6839\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u8def\u5f84\u7684\u5f02\u6216\u548c\u76f8\u7b49\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u8bb0\u5f55\u6570\u7ec4 $ b_v $ \u4e3a $ 1 $ \u5230 $ v $ \u7684\u5f02\u6216\u548c\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u90fd\u5728 $ u $ \u8fd9\u9897\u5b50\u6811\u5185\uff0c\u663e\u7136 $ b_{v1} $ \u5c31\u4f1a\u548c $ b_{v2} $ \u76f8\u7b49\u4e86\uff0c\u56e0\u4e3a\u4ed6\u4eec\u90fd\u5c06 $ 1 $ \u5230 $ u $ \u4e0a\u7684\u503c\u5f02\u6216\u4e86\u4e00\u904d\u3002\n\n\u56de\u5f52\u6b63\u9898\uff0c\u6bcf\u6b21\u6211\u4eec\u663e\u7136\u513f\u5b50 $ v $ \u7684\u8fd9\u9897\u5b50\u6811\u53d8\u4e3a\u90fd\u76f8\u7b49\u7684\u503c\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u663e\u7136 $ a_v $ \u662f\u6ca1\u6709\u53d8\u8fc7\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8c03\u8282 $ a_v $ \u6765\u4f7f\u6240\u6709\u7684\u8def\u5f84\u90fd\u53d8\u6210\u540c\u4e00\u4e2a\u503c\u3002\u53d8\u6210\u7684\u503c\u6211\u4eec\u5c31\u8d2a\u5fc3\u5730\u9009\u62e9\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\u503c\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u5982\u679c\u4f60\u4e0d\u9009\u62e9\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\u503c\uff0c\u4f60\u6700\u5c11\u4f1a\u6bd4\u672c\u6765\u7684\u591a\u505a $ 1 $ \u6b65\uff0c\u8fd9\u548c\u672c\u6765\u7684\u6700\u4f18\u89e3\u7684\u5982\u679c\u4ee5\u540e\u518d\u8c03\u8282\u7956\u5148\u7684\u503c\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u8fd9\u6837\u9009\u62e9\u80af\u5b9a\u4e0d\u52a3\u3002\n\n\u7136\u540e\u6700\u540e\u5728\u5224\u65ad\u4e00\u4e0b\u9700\u4e0d\u9700\u8981\u8c03\u8282 $ a_1 $ \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5b9e\u73b0\u65b9\u9762\u53ef\u4ee5\u7528 map \u8bb0\u5f55\u53ef\u4ee5\u4fee\u6539\u7684\u503c\u7684\u96c6\u5408\uff0c\u53ef\u4ee5\u5f00\u591a\u4e2a map\uff0c\u6bcf\u6b21\u4ea4\u6362\u4e24\u4e2a map \u7684\u5730\u5740\u66f4\u65b0\uff08\u5b9e\u9645\u4e0a\u8fd9\u91cc\u4e5f\u662f\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u6bcf\u6b21\u4ece\u522b\u7684\u513f\u5b50\u8282\u70b9\u5f80\u4fe1\u606f\u6700\u591a\u7684\u4fe1\u606f\u8282\u70b9\u5408\u5e76\u4fe1\u606f\uff0c~~\u521a\u5f00\u59cb\u8822\u7b28\u4e86~~\uff09\u3002\u5177\u4f53\u770b\u4ee3\u7801\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>//\u795d\u5927\u5bb6\u5b66\u4e60\u6109\u5feb\uff01\n\nusing namespace std;\n\nconst int maxn=1e5+5;\nint a[maxn],id[maxn],n,res=0;\nstruct edge{\n\tint to,nxt;\n}e[maxn<<1];\nint head[maxn],len;\nmap<int,int> mp[maxn],tmp;\n\ninline void init(){\n\tmemset(head,-1,sizeof(head));\n\tlen=0;\n}\nvoid add(int u,int v){\n\te[++len].to=v;\n\te[len].nxt=head[u];\n\thead[u]=len;\n}\n\nvoid dfs(int u,int f){\n\tif(f&&e[head[u]].nxt==-1){\n\t\t// printf(\"kkkk%d\\n\",u);\n\t\tmp[id[u]][a[u]]++;\n\t\treturn;\n\t}\n\tint maxx=1,cnt=0;\n\tfor(int i=head[u];i!=-1;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\ta[v]^=a[u];\n\t\tdfs(v,u);\n\t\tif(mp[id[u]].size()<mp[id[v]].size()) swap(id[u],id[v]);\n\t\tfor(auto now : mp[id[v]]){\n\t\t\tmp[id[u]][now.first]+=now.second;\n\t\t\tmaxx=max(maxx,mp[id[u]][now.first]);\n\t\t}\n\t\tcnt++;\n\t}\n\tres+=cnt-maxx;\n\t// map<int,in>\n\ttmp.clear();\n\tif(maxx>1){\n\t\tfor(auto now : mp[id[u]]){\n\t\t\tif(now.second==maxx) tmp[now.first]=1;\n\t\t}\n\t\tswap(mp[id[u]],tmp);\n\t}\n}\n\nint main(){\n\t\n\tint n;\n\t\n\tinit();\n\t\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&a[i]);\n\t\tid[i]=i;\n\t}\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;\n\t\tscanf(\"%d %d\",&u,&v);\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\t\n\tdfs(1,0);\n\t\n\tprintf(\"%d\\n\",res+(!mp[id[1]][0]));\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1683801359,
        "uid": 234469,
        "name": "hxyqwq",
        "ccfLevel": 6,
        "title": "CF1824C \u9898\u89e3"
    },
    {
        "content": "### Statement\n\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6839\u8282\u70b9\u4e3a $1$\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u70b9\u6743 $a_i$\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u70b9\u4efb\u610f\u4fee\u6539\u70b9\u6743\uff0c\u6c42\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u6839\u7ed3\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u5f02\u6216\u548c\u90fd\u4e3a $0$\u3002  \n\n$n\\le 10^5,a_i\\le 10^9$\n\n### Solution\n\n\n\u53ef\u4ee5\u5148\u5f31\u5316\u95ee\u9898\u4e3a\u8ba9\u5404\u6761\u53f6\u5b50\u8def\u5f84\u5f02\u6216\u76f8\u7b49\u7684\u4ee3\u4ef7\uff0c\u518d\u5bf9\u6839\u8fdb\u884c\u8c03\u6574\u3002\u76f4\u63a5\u8003\u8651\u6811\u5f62 dp\uff0c$g_{x,i}$ \u8868\u793a\u53ea\u64cd\u4f5c $x$ \u5b50\u6811\u5185\uff0c\u4f7f\u7ecf\u8fc7 $x$ \u7684\u6240\u6709\u53f6\u5b50\u8def\u5f84\u5f02\u6216\u548c\u53d8\u4e3a $i$ \u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002\u7531\u4e8e\u53ef\u4ee5\u5bf9 $x$ \u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5 $\\max_i\\{g_{x,i}\\}-\\min_i\\{g_{x,i}\\}\\le 1$\u3002\n\n\u8bbe $f_x=\\min_i\\{g_{x,i}\\}$\uff0c$S_x=\\{i~|~f_x=g_{x,i}\\}$\uff0c$y\\in son_x$\uff0c\u8003\u8651\u5982\u4f55\u8f6c\u79fb\u5b83\u4eec\uff1a\u5bf9\u4e8e $\\cup S_y$\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u4e00\u79cd\u5143\u7d20\u4e0a\u4f20\u5230 $S_x$\uff0c\u5176\u4f59\u90fd\u9700\u8981\u989d\u5916\u4e3a1\u7684\u4ee3\u4ef7\uff0c\u8d2a\u5fc3\u7684\uff0c\u76f4\u63a5\u53d6\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4e0a\u4f20\u5230 $S_x$ \u5373\u53ef\uff0c\u5373\uff1a\n\n$$\nf_x=\\sum_y (f_y+1)-\\max_{i\\in\\cup S_y}\\{\\sum_y [i\\in S_y]\\}\n$$\n\n\u7528 set \u7ef4\u62a4\u96c6\u5408\uff0cmap \u7ef4\u62a4\u51fa\u73b0\u6b21\u6570\uff0c\u542f\u53d1\u5f0f\u5408\u5e76 set\uff0c\u590d\u6742\u5ea6 $O(n\\log^2 n)$\uff0c\u4ee3\u7801\u5f88\u77ed\u3002\n\n\n### code\n```cpp\n#include<bits/stdc++.h>\n#define pb push_back\nusing namespace std;\nconst int maxn=1e5+10;\nint n,a[maxn],f[maxn];\nvector<int>e[maxn];\nset<int>s[maxn];\ninline void dfs(int x,int fa,int oplus)\n{\n    map<int,int>cnt;int mx=0;\n    if(e[x].size()==1 && x!=1) return s[x].insert(oplus),f[x]=0,void();\n    for(auto y:e[x]) if(y!=fa)\n    {\n        dfs(y,x,oplus^a[y]),f[x]+=(f[y]+1);\n        if(s[x].size()<s[y].size()) swap(s[x],s[y]);\n        for(auto v:s[y]) if(s[x].count(v)) cnt[v]++; else s[x].insert(v);\n    }\n    if(!cnt.empty()) \n    {\n        for(auto [num,ct]:cnt) mx=max(mx,ct);\n        f[x]-=(mx+1),s[x].clear();\n        for(auto [num,ct]:cnt) if(ct==mx) s[x].insert(num);\n    } \n    else f[x]--; \n}\nsigned main()\n{\n    ios::sync_with_stdio(false);cin.tie(NULL);\n    cin>>n; for(int i=1;i<=n;i++) cin>>a[i];\n    for(int i=1,x,y;i<n;i++) cin>>x>>y,e[x].pb(y),e[y].pb(x);\n    dfs(1,0,a[1]),cout<<f[1]+(!s[1].count(0));\n    return 0;\n}\n```",
        "postTime": 1684799913,
        "uid": 767740,
        "name": "Maverik",
        "ccfLevel": 0,
        "title": "Div.2.E LuoTianyi and XOR-Tree Solution"
    },
    {
        "content": "### Preface  \n\u6211\u63d0\u4f9b\u7684\u662f\u4e00\u79cd\u975e\u5b98\u65b9\u7684\u5927\u5e38\u6570\u5355 $\\log$ \u505a\u6cd5\u3002  \n### Problem  \n\u7ed9\u4f60\u4e00\u9897\u6811\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u53ef\u4ee5\u66f4\u6539\u4e00\u4e2a\u70b9\u6743\uff0c\u95ee\u4f60\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u64cd\u4f5c\u4f7f\u5f97\u6240\u6709\u6839\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u5f02\u6216\u503c\u4e3a $0$\u3002  \n### Solution  \n\u5148\u6811\u4e0a\u524d\u7f00\u548c\uff0c\u8def\u5f84\u8f6c\u70b9\u6743\uff0c\u5bb9\u6613\u53d1\u73b0\u66f4\u6539\u4e00\u4e2a\u70b9\u7684\u6743\u76f8\u5f53\u4e8e\u66f4\u6539\u5176\u5b50\u6811\u7684\u6240\u6709\u6743\u3002  \n\u8003\u8651\u4ece\u4e0b\u5f80\u4e0a\u6539\u70b9\u6743\u3002  \n\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u90fd\u4e3a $0$\uff0c\u800c\u4e00\u4e2a\u66f4\u6539\u4f1a\u7275\u8fde\u6574\u4e2a\u5b50\u6811\uff0c\u6240\u4ee5\u8bf4\u5728\u4e00\u4e2a\u70b9 $u$ \u88ab\u64cd\u4f5c\u4e4b\u524d\u5b83\u7684\u6240\u6709\u5b50\u6811\u5e94\u5f53\u662f\u7edf\u4e00\u6743\u503c\u7684\u3002  \n\n\u90a3\u4e48\uff0c\u5bb9\u6613\u8bbe\u51fa dp \u72b6\u6001 $f_{u,c}$ \u4e3a $u$ \u70b9\u7684\u5b50\u6811\u5185\u7684\u53f6\u5b50\u8282\u70b9\u7684\u70b9\u6743\u5168\u4e3a $c$ \u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002  \n\n\u7136\u540e\u4f60\u53d1\u73b0\uff0c\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a  \n$$f_{u,c}=\\sum_{v\\in e_u}f_{v,c},\\space f_{u,c}=\\min(f_{u,c},\\min_{j<2^{30}}f_{u,j}+1)$$  \n\u610f\u4e49\u4e3a\uff0c\u6240\u6709\u5b50\u6811\u7684\u6743\u503c\u5e94\u7edf\u4e00\uff0c\u6240\u4ee5\u5148\u8fdb\u884c\u4e00\u6b21\u540c\u989c\u8272\u52a0\u6cd5\u8f6c\u79fb\u3002  \n\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u66f4\u6539\u6240\u6709\u5b50\u6811\u6743\u503c\u4e00\u6b21\uff0c\u6240\u4ee5\u8fdb\u884c\u7b2c\u4e8c\u6b21\u53d6\u5f02\u989c\u8272\u6700\u5c0f\u503c\u7684\u8f6c\u79fb\u3002  \n\n\u7136\u540e\u4f60\u53d1\u73b0\u8fd9\u4e2a dp \u6570\u7ec4\u662f\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\uff0c\u4e24\u4e2a\u8f6c\u79fb\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u5b9e\u73b0\u3002  \n\n\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u8fd8\u548c\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u4e0d\u4e00\u6837\uff0c\u5b83\u4f1a\u4e0b\u4f20\uff0c\u800c\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u65b0\u5efa\u8282\u70b9\uff0c\u4e3a\u4e86\u9632\u6b62\u590d\u6742\u5ea6\u9000\u5316\uff0c\u6211\u4eec\u9700\u8981\u591a\u505a\u4e00\u4e2a\u6807\u8bb0\uff0c\u7528\u6765\u505a\u7ebf\u6bb5\u6811\u5408\u5e76\u64cd\u4f5c\u7684\u61d2\u60f0\u6807\u8bb0\uff0c\u540c\u65f6\u5c06\u4e0b\u4f20\u5efa\u51fa\u6765\u7684\u8282\u70b9\u548c\u666e\u901a\u63d2\u5165\u8282\u70b9\u533a\u5206\u5f00\uff0c\u56e0\u4e3a\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u70b9\u5c31\u53ef\u4ee5\u5b58\u50a8\u6240\u6709\u4fe1\u606f\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u65f6\u76f4\u63a5\u5e76\u4e0a\u53bb\u5373\u53ef\u3002  \n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u8981\u8bbe\u4e00\u4e2a\u5b58\u50a8\u533a\u95f4 $\\min f$ \u7684\u6811\u4fe1\u606f\uff0c\u4e00\u4e2a\u5b58\u50a8\u96c6\u4f53\u52a0\u6cd5\uff08\u5373\u7ebf\u6bb5\u6811\u5408\u5e76\u61d2\u60f0\uff09\u7684\u533a\u95f4\u6807\u8bb0\uff0c\u4e00\u4e2a\u5b58\u50a8\u96c6\u4f53\u53d6 $\\min$ \u7684\u533a\u95f4\u6807\u8bb0\uff0c\u6ce8\u610f\u4e0b\u4f20\u987a\u5e8f\u7684\u95ee\u9898\uff0c\u5b9e\u73b0\u7ec6\u8282\u8f83\u591a\uff0c\u5e38\u6570\u8f83\u5927\uff0c\u5177\u4f53\u89c1 $O(n\\log n)$ \u4ee3\u7801\uff1a  \n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+10;\nconst int V=(1<<30);\nconst int maxv=1e9;\nint n,a[N],u,v,root[N],cnt;\nvector <int> edge[N];\nvoid pre_solve(int u,int fa){\n    a[u]^=a[fa];\n    for(auto v:edge[u]){\n        if(v==fa)continue;\n        pre_solve(v,u);\n    }\n}int l[N*61],r[N*61],tag[N*61],val[N*61],lzy[N*61];\nvoid pushup(int rt){val[rt]=min(val[l[rt]],val[r[rt]]);}\nvoid pushdown(int rt){\n\tif(lzy[rt]){\n    \tlzy[l[rt]]+=lzy[rt];lzy[r[rt]]+=lzy[rt];\n    \tlzy[l[rt]]=min(lzy[l[rt]],maxv);\n    \tlzy[r[rt]]=min(lzy[r[rt]],maxv);\n        val[l[rt]]+=lzy[rt];val[r[rt]]+=lzy[rt];\n        val[l[rt]]=min(val[l[rt]],maxv);\n        val[r[rt]]=min(val[r[rt]],maxv);\n        if(tag[l[rt]])tag[l[rt]]+=lzy[rt],tag[l[rt]]=min(tag[l[rt]],maxv);\n        if(tag[r[rt]])tag[r[rt]]+=lzy[rt],tag[r[rt]]=min(tag[r[rt]],maxv);\n    \tlzy[rt]=0;\n\t}\n    if(tag[rt]){\n        if(!l[rt])l[rt]=++cnt,val[l[rt]]=tag[rt];\n        tag[l[rt]]=min(tag[l[rt]],tag[rt]);\n        if(!tag[l[rt]])tag[l[rt]]=tag[rt];\n        val[l[rt]]=min(val[l[rt]],tag[rt]);\n        //if(val[l[rt]]==tag[rt])lzy[l[rt]]=0;\n        if(!r[rt])r[rt]=++cnt,val[r[rt]]=tag[rt];\n        tag[r[rt]]=min(tag[r[rt]],tag[rt]);\n        if(!tag[r[rt]])tag[r[rt]]=tag[rt];\n        val[r[rt]]=min(val[r[rt]],tag[rt]);\n        //if(val[r[rt]]==tag[rt])lzy[r[rt]]=0;\n        tag[rt]=0;\n    }\n}\nvoid update(int &rt,int left,int right,int x,int y){\n    if(!rt)rt=++cnt,val[rt]=maxv;\n    if(left==right){val[rt]=y;return;}\n    pushdown(rt);int mid=(left+right)/2;\n    if(x<=mid)update(l[rt],left,mid,x,y);\n    else update(r[rt],mid+1,right,x,y);\n    pushup(rt);\n}\nint merge(int rt1,int rt2,int left,int right){\n    if(!rt1)return rt2;if(!rt2)return rt1;\n    if((l[rt1]||r[rt1])&&(l[rt2]||r[rt2])){\n        pushdown(rt1),pushdown(rt2);\n\t}else{\n        if(l[rt2]||r[rt2])swap(rt1,rt2);\n        if(tag[rt1])tag[rt1]+=val[rt2];\n\t\tval[rt1]+=val[rt2];lzy[rt1]+=val[rt2];\n\t\ttag[rt1]=min(tag[rt1],maxv);\n\t\tval[rt1]=min(val[rt1],maxv);\n\t\tlzy[rt1]=min(lzy[rt1],maxv);\n\t\treturn rt1;\n    }int mid=(left+right)/2;\n    l[rt1]=merge(l[rt1],l[rt2],left,mid);\n    r[rt1]=merge(r[rt1],r[rt2],mid+1,right);\n    pushup(rt1);return rt1;\n}\nint query(int rt,int left,int right,int x){\n    if(left<right)pushdown(rt);\n\tint mid=(left+right)/2;\n    if(left==right)return val[rt];\n    if(x<=mid)return query(l[rt],left,mid,x);\n    else return query(r[rt],mid+1,right,x);\n}\nvoid dfs(int u,int fa){\n    if(edge[u].size()==1&&fa!=0)\n        update(root[u],0,V,a[u],0);\n    for(auto v:edge[u]){\n        if(v==fa)continue;dfs(v,u);\n        root[u]=merge(root[u],root[v],0,V);\n    }int p=val[root[u]];tag[root[u]]=p+1;\n}\nsigned main(){\n    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n    cin>>n;val[0]=maxv;\n    for(int i=1;i<=n;i++)\n        cin>>a[i];\n    for(int i=1;i<n;i++){\n        cin>>u>>v;\n        edge[u].push_back(v);\n        edge[v].push_back(u);\n    }pre_solve(1,0);dfs(1,0);\n    cout<<query(root[1],0,V,0);\n    return 0;\n}\n```\n",
        "postTime": 1683911074,
        "uid": 213173,
        "name": "\u5c0f\u6728\u866b",
        "ccfLevel": 4,
        "title": "\u3010CF\u601d\u7ef4\u8bad\u7ec3\u3011CF1834C LuoTianyi and XOR-Tree"
    }
]