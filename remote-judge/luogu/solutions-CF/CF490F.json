[
    {
        "content": "\u6a21\u62df\u8d5b\u505a\u5230\u8fd9\u9898\u7684\u52a0\u5f3a\u7248\uff08$n\\leq 2\\cdot 10^5$\uff09\uff0c\u7136\u800c\u6211\u4e00\u76f4\u6ca1\u60f3\u5230\u53e6\u7ef4\u62a4\u4e00\u4e2a\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c\u7ed3\u679c\u6700\u540e\u53ea\u5199\u51fa\u4e00\u4e2a $n^2$ \u6362\u6839 \\kk\n\n\u5199\u5b8c\u624d\u53d1\u73b0\u6587\u7ae0\u6709\u70b9\u957f\uff0c\u56e0\u6b64\u6709\u8bb8\u591a\u7ec6\u8282\u90e8\u5206\u53ef\u80fd\u56e0\u4e3a\u6392\u7248\u6df7\u4e71\uff08\u4e0d\u592a\u4f1a\u6392\u957f\u6587\u7ae0...\uff09\u5bfc\u81f4\u8868\u610f\u4e0d\u6e05\uff0c\u8fd8\u8bf7\u89c1\u8c05qaq\n\n\u6709\u7591\u60d1\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u95ee\u6211\n\n## \u89e3\u6790\n\n\u8fd9\u9898\u7684\u505a\u6cd5\u597d\u50cf\u8fd8\u86ee\u591a\u7684...\u8fd9\u91cc\u5c31\u628a\u76ee\u524d\u6211\u77e5\u9053\u7684\u505a\u6cd5\u90fd\u8bb2\u4e00\u904d\u628aX\n\n### \u6362\u6839\u505a\u6cd5\uff08$O(n^2)$\uff09\n\n\u9996\u5148\u4efb\u610f\u89c4\u5b9a\u4e00\u4e2a\u6839\u505a\u6811 dp\uff0c\u8ba1\u7b97\u51fa\u4ee5\u6bcf\u4e2a\u7ed3\u70b9\u4e3a\u5b50\u5e8f\u5217\u7ed3\u5c3e\uff0c\u5b50\u5e8f\u5217\u5f00\u5934\u5728\u5176**\u5b50\u6811**\u5185\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u3002\u8f6c\u79fb\u53ef\u4ee5\u66b4\u529b\u8f6c\uff0c\u4e5f\u53ef\u4ee5\u7528\u5404\u79cd\u65b9\u5f0f\u4f18\u5316\n\n\u6b64\u65f6\u6839\u7684 dp \u503c\u5c31\u662f\u4ee5\u6839\u4e3a\u5b50\u5e8f\u5217\u7ed3\u5c3e\uff0c\u80fd\u5f97\u5230\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\n\n\u63a5\u7740\u8003\u8651\u6362\u6839\u3002\u53ef\u4ee5\u6bcf\u6b21\u76f4\u63a5\u66b4\u529b\u8f6c\u79fb\u53d7\u5f71\u54cd\u7684\u4e24\u4e2a\u7ed3\u70b9\u7684 dp \u503c\u3002\u8fd9\u4e2a\u8f6c\u79fb\u6211\u60f3\u4e0d\u5230\u4ec0\u4e48\u80fd\u4f18\u5316\u7684\u65b9\u6cd5\uff08\u4e5f\u6210\u4e3a\u4e86\u8fd9\u79cd\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u74f6\u9888 \\kk\uff09\n\n\u5bf9\u6bcf\u6b21\u6362\u6839\u5f97\u5230\u7684 dp \u503c\u53d6 $\\max$ \u5373\u53ef\n\n### \u4e00\u4e2a trick\n\n\uff08\u5176\u5b9e\u4e5f\u4e0d\u7b97\u662f trick\uff0c\u4f46\u6211\u60f3\u4e0d\u51fa\u66f4\u5408\u9002\u7684\u5c0f\u6807\u9898\u540d\u5b57...\uff09\n\n\u5728\u6362\u6839 dp \u505a\u6cd5\u4e2d\uff0c\u6211\u4eec\u59cb\u7ec8\u9ed8\u8ba4\u5f53\u524d\u7ed3\u70b9\u662f\u6574\u4e2a\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u7ed3\u5c3e\uff0c\u4ece\u800c\u5bfc\u81f4\u6700\u540e\u975e\u6362\u6839\u4e0d\u53ef\u3002\u56e0\u4e3a\u8fd9\u6837\u6211\u4eec\u65e0\u6cd5\u7edf\u8ba1\u5f53\u524d\u7ed3\u70b9\u4e3a\u5e8f\u5217**\u4e2d\u95f4\u70b9**\u65f6\u7684\u7b54\u6848\n\n\u4e8e\u662f\u601d\u8003\u6709\u6ca1\u6709\u529e\u6cd5\u7ef4\u62a4\u5f53\u524d\u7ed3\u70b9\u4e3a\u5e8f\u5217\u4e2d\u95f4\u70b9\u65f6\u7684\u7b54\u6848\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u4e00\u4e2a\u4ee5\u5f53\u524d\u7ed3\u70b9\u4e3a\u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u548c**\u4e0b\u964d\u5b50\u5e8f\u5217** \u201c\u62fc\u201d \u8d77\u6765\uff08\u5408\u5e76\uff09\n\n\u4e0d\u8fc7\u8fd9\u6837\u8fd8\u662f\u6709\u4e9b\u95ee\u9898\uff0c\u6211\u4eec\u6ca1\u6cd5\u7edf\u8ba1\u5230\u5f53\u524d\u7ed3\u70b9\u4e3a\u4e2d\u95f4\u70b9\uff0c\u5b50\u5e8f\u5217**\u4e00\u90e8\u5206\u5728\u7236\u4eb2\u5904**\u7684\u7b54\u6848\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u6bcf\u4e2a\u7ed3\u70b9\u5904\uff0c\u6211\u4eec\u53ea\u9700\u7edf\u8ba1\u4e24\u90e8\u5206\u5206\u522b\u5728\u8be5\u7ed3\u70b9\u4e24\u4e2a\u513f\u5b50\u5b50\u6811\u4e2d\u7684\u5b50\u5e8f\u5217\u5c31\u884c\u4e86\n\n\u4e8e\u662f\u53ea\u9700\u53e6\u7ef4\u62a4\u4e00\u4e2a\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c\u5728\u6bcf\u4e2a\u7ed3\u70b9\u5904\u5747\u4e24\u4e24\u5408\u5e76\u7edf\u8ba1\u4e00\u6b21\u7b54\u6848\u5373\u53ef\n\n### \u5408\u5e76\u7684\u5177\u4f53\u65b9\u5f0f\n\n\u4e0a\u4e00\u8282\u63d0\u5230\u7684 \u201c\u628a\u4e00\u4e2a\u4ee5\u5f53\u524d\u7ed3\u70b9\u4e3a\u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u548c\u4e0b\u964d\u5b50\u5e8f\u5217 \u2018\u62fc\u2019 \u8d77\u6765\u201d \u7684\u5177\u4f53\u5b9e\u73b0\u5176\u5b9e\u8fd8\u6709\u5f85\u5546\u8ba8\n\n\uff08\u9996\u5148\u5728\u5408\u5e76\u6bcf\u4e2a\u5b50\u6811\u7684\u7ebf\u6bb5\u6811/\u6570\u7ec4\u524d\uff0c\u6211\u4eec\u90fd**\u9ed8\u8ba4**\u5148\u5c06\u5f53\u524d\u7ed3\u70b9\u63d2\u5165\u7ebf\u6bb5\u6811/\u6570\u7ec4\uff0c\u4ee5\u65b9\u4fbf\u8ba8\u8bba\u3002\u56e0\u4e3a\u6c42\u7684\u662f\u4e25\u683c\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u56e0\u6b64\u8fd9\u6837\u4e0d\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\uff08\u5373\u4f7f\u6c42\u7684\u4e0d\u662f\u4e25\u683c\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u4e5f\u53ef\u4ee5\u8003\u8651\u5728\u7edf\u8ba1\u5408\u5e76\u7684\u7b54\u6848\u540e\uff0c\u8fd8\u539f\u65b0\u7684\u7ebf\u6bb5\u6811/\u6570\u7ec4\uff0c\u518d\u5c06\u65b0\u7ebf\u6bb5\u6811/\u6570\u7ec4\u5408\u5e76\uff09\uff09\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5728\u5c06\u6240\u6709**\u513f\u5b50**\u5b50\u6811\u8d21\u732e\u90fd\u5408\u5e76\u540e\uff08\u56e0\u5177\u4f53\u505a\u6cd5\u800c\u5f02\uff09\u518d\u627e\u4e00\u6761\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u548c\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217\u62fc\u5728\u4e00\u8d77\uff0c\u5b83\u4eec\u4e4b\u95f4\u53ef\u80fd\u4f1a\u6709**\u5171\u7528**\u7684\u5143\u7d20\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e0d\u5e94\u5f53\u7ec4\u5408\u6765\u81ea\u540c\u4e00\u4e2a\u513f\u5b50\u5b50\u6811\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u548c\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217\n\n\u5f62\u5f0f\u5316\u5730\u8bb2\uff0c\u6211\u4eec\u6709 $m$ \u4e2a\u96c6\u5408 $A_1, A_2, \\cdots, A_m$\uff0c\u6700\u540e\u7b54\u6848 $(a, b)$\uff08$a, b$ \u4e4b\u95f4\u65e0\u5e8f\uff09 \u5fc5\u987b\u6ee1\u8db3 $a\\in A_i, b\\in A_j, i\\not=j$\n\n\u8bbe $f(A, B)$ \u8868\u793a\u7edf\u8ba1\u6240\u6709 $(a, b)$ \u6ee1\u8db3 $a\\in A, b\\in B$\u3002\u5982\u679c\u66b4\u529b\u5730\u679a\u4e3e\u5e26\u5165 $A_i$\uff0c\u5219\u5171\u9700\u8981\u8ba1\u7b97 $m^2$ \u6b21 $f(A, B)$\uff08\u51b5\u4e14\u6bcf\u6b21\u8ba1\u7b97\u7684\u590d\u6742\u5ea6\u4e5f\u4e0d\u4f4e\uff09\u3002\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u65b9\u6cd5\uff1a\n\n\u8bbe\u5f53\u524d\u5df2\u5408\u5e76\u7684\u96c6\u5408 $S$\uff08\u521d\u59cb\u4e3a\u7a7a\uff09\uff0c\u65b0\u52a0\u5165\u7684\u96c6\u5408 $A_i$\uff0c\u6211\u4eec\u8ba1\u7b97\u4e00\u6b21 $f(S, A_i)$\uff0c\u7136\u540e\u518d\u5c06 $A$ \u5e76\u5165 $S$\uff0c\u5982\u6b64\u91cd\u590d\u3002\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u548c\u521a\u624d\u7684\u65b9\u5f0f\u662f\u7b49\u4ef7\u7684\n\n\u8003\u8651\u4e00\u4e2a\u5143\u7d20 $a\\in A_i$\u3002\u5728 $A_i$ \u88ab\u5e76\u5165 $S$ \u65f6\uff0c$f$ \u7edf\u8ba1\u4e86\u6240\u6709\u53ef\u80fd\u7684 $(a, b)$ \u6ee1\u8db3 $a\\in A_i, b\\in A_j, j<i$\uff1b\u5728 $A_i$ \u88ab\u5e76\u5165 $S$ \u540e\uff0c$f$ \u7edf\u8ba1\u4e86\u6240\u6709\u53ef\u80fd\u7684 $(a, b)$ \u6ee1\u8db3 $a\\in A_i, b\\in A_j, j>i$\u3002\u7531\u6b64\u53ef\u8bc1\u5f97\u6bcf\u79cd\u5408\u6cd5\u7684 $(a, b)$ \u90fd\u88ab\u7edf\u8ba1\u4e86\n\n$f(A, B)$ \u7684\u8ba1\u7b97\u662f\u53ef\u4ee5\u4f18\u5316\u7684\uff0c\u4f46\u6839\u636e\u5177\u4f53\u5b9e\u73b0\u5176\u65b9\u5f0f\u53ef\u80fd\u6709\u4e0d\u540c\u3002\u5728\u4e0b\u9762**\u6bcf\u8282\u7684\u6700\u540e**\u90fd\u4f1a\u5206\u6790\u5408\u5e76\u7684\u590d\u6742\u5ea6\n\n### dsu on tree I\uff08$O(n\\log^2 n)$\uff09\n\n\u4e0d\u5e26\u4fee\u6539\u7684\u5168\u5c40\u5b50\u6811\u8d21\u732e\u7edf\u8ba1\u2014\u2014\u5f88\u81ea\u7136\u5730\u5c31\u80fd\u60f3\u5230 dsu on tree\n\n\u5982\u679c\u6309 \u201c\u6362\u6839\u505a\u6cd5\u201d \u90a3\u4e00\u8282\u7684 dp \u65b9\u5f0f\uff0c\u9700\u8981\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u8f6c\u79fb\uff08\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u52a8\u6001\u5f00\u70b9\u3002\u52a8\u6001\u5f00\u70b9\u6309\u672c\u9898\u6570\u636e\u8303\u56f4\u53ef\u80fd\u4e0d\u9700\u8981\uff09\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5f00 $\\log n$ \u4e2a\u7ebf\u6bb5\u6811\uff1b\u82e5\u67d0\u4e2a\u7ed3\u70b9\u5230\u6839\u7ecf\u8fc7\u4e86 $i$ \u6761\u8f7b\u8fb9\uff0c\u5c31\u4f7f\u7528\u7b2c $i+1$ \u4e2a\u7ebf\u6bb5\u6811\u3002dfs \u5230 $u$ \u65f6\uff0c\u5148\u7ee7\u627f\u91cd\u513f\u5b50\u7684\u7ebf\u6bb5\u6811\uff0c\u5c06 $u$ \u63d2\u5165\u8be5\u7ebf\u6bb5\u6811\uff0c\u518d\u66b4\u529b\u5730\u5c06\u6240\u6709\u8f7b\u513f\u5b50\u5b50\u6811\u5185\u7ed3\u70b9\u63d2\u5165\u8be5\u7ebf\u6bb5\u6811\n\n\u7531\u4e8e dfs \u540c\u4e00\u65f6\u523b\u53ea\u4f1a\u5904\u7406\u4e00\u6761\u5230\u6839\u7ecf\u8fc7\u4e86 $i$ \u6761\u8f7b\u8fb9\u7684\u91cd\u94fe\uff0c\u56e0\u6b64\u7ebf\u6bb5\u6811\u7684\u5360\u7528\u4e0d\u4f1a\u51b2\u7a81\u3002\u4f46\u662f\u8bb0\u5f97\u5728**\u53f6\u5b50\u7ed3\u70b9**\u91cd\u7f6e\u7ebf\u6bb5\u6811\n\n\u6bcf\u6b21\u7ee7\u627f\u91cd\u513f\u5b50\u7ebf\u6bb5\u6811\u5e76\u63d2\u5165\u7684\u590d\u6742\u5ea6\u662f $O(\\log n)$ \u7684\uff1b\u6bcf\u4e2a\u7ed3\u70b9**\u6bcf\u6b21**\u4f5c\u4e3a\u8f7b\u513f\u5b50\u5b50\u6811\u5185\u7ed3\u70b9\u88ab\u66b4\u529b\u7edf\u8ba1\u7684\u590d\u6742\u5ea6\u662f $O(\\log n)$ \u7684\u3002\u56e0\u6b64\u8fd9\u90e8\u5206\u7684\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\log n+n\\log^2 n)$\n\n&nbsp;\n\n\u6700\u540e\u8003\u8651\u5982\u4f55\u5feb\u901f\u5408\u5e76\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u548c\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217\n\n\u8003\u8651\u5728**\u5408\u5e76\u8f7b\u513f\u5b50\u5b50\u6811\u524d**\u5148\u7edf\u8ba1\u6bcf\u4e2a\u8f7b\u513f\u5b50\u5b50\u6811\u5185\u7ed3\u70b9\u4f5c\u4e3a\u7b54\u6848\u94fe\u7684\u4e2d\u95f4\u4e00\u70b9\u7684\u60c5\u51b5\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u82e5\u5047\u8bbe $x$ \u4f5c\u4e3a\u7b54\u6848\u94fe\u7684\u4e2d\u95f4\u4e00\u70b9\uff0c\u90a3\u4e48\u5c31\u5728\u7ee7\u627f\u7684\u91cd\u513f\u5b50\u7ebf\u6bb5\u6811\u4e2d\u67e5\u627e\u51fa\u9002\u5408\u7684\u4e0a\u5347/\u4e0b\u964d\u94fe\u62fc\u4e0a\u53bb\uff0c\u5e76\u4e0e\u7b54\u6848\u6bd4\u8f83\n\n\u6bcf\u4e2a\u8f7b\u513f\u5b50\u5b50\u6811\u5185\u7ed3\u70b9\u6bcf\u6b21\u88ab\u7edf\u8ba1\u8d21\u732e\u7684\u590d\u6742\u5ea6\u662f $\\log n$ \u7684\u3002\u6700\u7ec8\u590d\u6742\u5ea6\u5c31\u4e3a $O(n\\log n+n\\log^2 n+n\\log^2 n)$\n\n### dsu on tree II\uff08$O(n\\log^2 n)$\uff09\n\n\u540c\u6837\u662f dsu on tree\uff0c\u8fd8\u53ef\u4ee5\u8003\u8651\u7528\u7ef4\u62a4\u8f85\u52a9\u6570\u7ec4\u7684 dp \u65b9\u6cd5\n\n\u8bbe $g(k)$ \u8868\u793a\u957f\u5ea6\u4e3a $k$ \u7684\u5b50\u5e8f\u5217\u672b\u7aef\u6700\u5c0f/\u6700\u5927\u7684\u5143\u7d20\u3002\u53ef\u4ee5\u53d1\u73b0 $g(k)$ \u7684\u503c\u968f $k$ \u7684\u589e\u52a0\u662f\u5355\u8c03\u7684\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u4e8c\u5206\u8f6c\u79fb\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u4ecd\u65e7\u5f00 $\\log n$ \u4e2a `g` \u6570\u7ec4\u3002dfs \u5230 $u$ \u65f6\uff0c\u76f4\u63a5\u7ee7\u627f\u91cd\u513f\u5b50\u7684 `g` \u6570\u7ec4\uff0c\u4e8c\u5206\u5f97\u5230 `dp[u]`\uff0c\u7136\u540e\u6309\u4e0b\u6807\u66b4\u529b\u5408\u5e76\u8f7b\u513f\u5b50\u7684 `g` \u6570\u7ec4\uff08\u6ce8\u610f\u6bcf dfs \u5b8c\u4e00\u4e2a\u8f7b\u513f\u5b50\u5c31\u8981\u5408\u5e76\uff0c\u4e0d\u7136\u6570\u7ec4\u4f7f\u7528\u4f1a\u51b2\u7a81\uff09\n\n\u6bcf\u6b21\u8ba1\u7b97 `dp[.]` \u7684\u590d\u6742\u5ea6\u662f $O(\\log n)$ \u7684\uff1b`g` \u6570\u7ec4\u6700\u574f\u5927\u5c0f\u4e3a\u5b50\u6811\u5927\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u7c97\u7565\u5730\u5c06\u5408\u5e76 `g` \u6570\u7ec4\u89c6\u4e3a\u66b4\u529b\u7edf\u8ba1\u5b50\u6811\u5185\u7684\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u4e14\u7edf\u8ba1\u5355\u4e2a\u7ed3\u70b9\u7684\u590d\u6742\u5ea6\u4e3a $O(1)$\uff0c\u56e0\u6b64\u6bcf\u4e2a\u7ed3\u70b9\u5bf9\u66b4\u529b\u7edf\u8ba1\u7684\u590d\u6742\u5ea6\u505a\u51fa\u7684\u8d21\u732e\u5c31\u53ef\u4ee5\u89c6\u4e3a\u662f $O(\\log n)$ \u7684\uff08\u5b9e\u9645\u4e0a\u5e76\u8dd1\u4e0d\u6ee1\uff09\u3002\u4e8e\u662f\u8fd9\u90e8\u5206\u7684\u603b\u590d\u6742\u5ea6\u5c31\u4e3a $O(n\\log n+n\\log n)$\n\n&nbsp;\n\n\u6700\u540e\u8003\u8651\u5982\u4f55\u5feb\u901f\u5408\u5e76\n\n\u5728\u5408\u5e76\u8f7b\u513f\u5b50\u5b50\u6811\u524d\uff0c\u6211\u4eec\u4ecd\u65e7\u8003\u8651\u5148\u7edf\u8ba1\u8f7b\u513f\u5b50\u5b50\u6811\u5185\u7ed3\u70b9\u4f5c\u4e3a\u7b54\u6848\u94fe\u7684\u4e2d\u95f4\u4e00\u70b9\u7684\u60c5\u51b5\uff0c\u4f46\u8fd9\u4e2a\u7ed3\u70b9**\u5fc5\u987b\u5728\u8be5\u5b50\u6811\u7684 `g[.]` \u4e2d\u51fa\u73b0\u8fc7**\uff08\u5b9e\u73b0\u65f6\u53ea\u904d\u5386\u8f7b\u513f\u5b50\u7684 `g` \u6570\u7ec4\u5c31\u884c\u4e86\uff09\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u82e5\u5047\u8bbe $x$ \u4f5c\u4e3a\u7b54\u6848\u94fe\u7684\u4e2d\u95f4\u4e00\u70b9\uff0c\u90a3\u4e48\u5c31\u5728\u7ee7\u627f\u7684\u91cd\u513f\u5b50 `g[.]` \u4e2d\u4e8c\u5206\u67e5\u627e\u51fa\u9002\u5408\u7684\u4e0a\u5347/\u4e0b\u964d\u94fe\u62fc\u4e0a\u53bb\uff0c\u5e76\u4e0e\u7b54\u6848\u6bd4\u8f83\n\n\u6bcf\u4e2a\u8f7b\u513f\u5b50\u5b50\u6811\u5185\u7ed3\u70b9\u6bcf\u6b21\u88ab\u7edf\u8ba1\u8d21\u732e\u7684\u590d\u6742\u5ea6\u662f $\\log n$ \u7684\u3002\u6700\u7ec8\u590d\u6742\u5ea6\u5c31\u4e3a $O(n\\log n+n\\log n+n\\log^2 n)$\n\n### \u7ebf\u6bb5\u6811\u5408\u5e76\uff08$O(n\\log n)$\uff09\n\n\u601d\u8003 \u201cdsu on tree\u201d \u4e2d\u7684\u7b2c\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u53ef\u4ee5\u60f3\u5230\u6bcf\u6b21\u4e0d\u4e00\u4e2a\u4e2a\u66b4\u529b\u63d2\u5165\u8f7b\u513f\u5b50\u5b50\u6811\u5185\u7684\u7ed3\u70b9\uff0c\u800c\u662f\u76f4\u63a5**\u5408\u5e76\u8f7b\u513f\u5b50\u7684\u7ebf\u6bb5\u6811**\u3002\u63a5\u7740\u8fd8\u53d1\u73b0\uff0c\u8fd9\u65f6\u5019\u590d\u6742\u5ea6\u5df2\u7ecf\u548c dsu on tree \u6ca1\u4ec0\u4e48\u5173\u7cfb\u4e86\uff0c\u6bcf\u6b21\u4e5f\u4e0d\u9700\u8981\u4e00\u5b9a\u5148\u7ee7\u627f\u91cd\u513f\u5b50\u7684\u7ebf\u6bb5\u6811\uff0c\u7ee7\u627f\u4efb\u610f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u4e86\n\n\u6bcf\u6b21\u7ee7\u627f\u7ebf\u6bb5\u6811\u5e76\u63d2\u5165\u7684\u590d\u6742\u5ea6\u662f $O(\\log n)$ \u7684\uff1b\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u603b\u590d\u6742\u5ea6\u662f $O(n\\log n)$ \u7684\u3002\u56e0\u6b64\u8fd9\u90e8\u5206\u7684\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\log n+n\\log n)$\n\n&nbsp;\n\n\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u5408\u5e76\u7684\u7b54\u6848\n\n\u770b\u8d77\u6765\u6211\u4eec\u53ea\u80fd\u66b4\u529b\u904d\u5386\u65b0\u7ebf\u6bb5\u6811\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff08\u53f6\u8282\u70b9\uff09\u5e76\u4e3a\u5b83\u4eec\u5728\u5df2\u5408\u5e76\u7684\u7ebf\u6bb5\u6811\u627e\u5230\u5408\u9002\u7684\u94fe \u201c\u62fc\u201d \u4e0a\u53bb\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u65f6\u7edf\u8ba1\u7b54\u6848\n\n\u9996\u5148\u7ef4\u62a4\u7684\u6700\u957f\u4e0a\u5347\u548c\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u4fe1\u606f\u53ef\u4ee5\u653e\u5230\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e2d\uff1b\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u8bbe\u6211\u4eec\u6b63\u5728\u5408\u5e76\u7684\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7ed3\u70b9 $x1, x2$\uff0c\u6211\u4eec\u53ea\u8003\u8651\u7edf\u8ba1\u8de8 $mid=\\frac {l_x+r_x} 2$ \u7684\u7b54\u6848\uff0c\u90a3\u4e48\u663e\u7136\u53ea\u9700\u5728 $[l, mid]$ \u4e2d\u627e\u51fa\u4e00\u6761\u6700\u957f\u7684 \u6700\u957f\u4e0a\u5347/\u4e0b\u964d\u5b50\u5e8f\u5217 \u4e0e $[mid+1, r]$ \u4e2d\u627e\u51fa\u7684\u4e00\u6761\u6700\u957f\u7684 \u6700\u957f\u4e0a\u5347/\u4e0b\u964d\u5b50\u5e8f\u5217 \u62fc\u5728\u4e00\u8d77\u3002\u8fd9\u6837\u627e\u51fa\u7684\u4e24\u6761\u62fc\u5728\u4e00\u8d77\u4e00\u5b9a\u662f\u5408\u6cd5\u7684\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u6811\u7684\u4e0b\u6807\u5373\u4e3a\u7ed3\u5c3e\u5143\u7d20\u7684\u503c\u3002\u800c\u8fd9\u4e2a\u64cd\u4f5c\u663e\u7136\u53ef\u4ee5\u5728\u5408\u5e76 $x1, x2$ \u7684\u9012\u5f52\u51fd\u6570\u4e2d $O(1)$ \u5b8c\u6210\n\n\u6700\u540e\u7edf\u8ba1\u51fa\u6765\u7684\u7b54\u6848\u4e5f\u662f\u4e0d\u9057\u6f0f\u7684\n\n\u4e5f\u53ef\u53c2\u8003\u8fd9\u6bb5\u4ee3\u7801\uff1a\n\n```cpp\nvoid merge(int &x1, int x2){\n\t/*...*/\n\tint tmp =max(data_LIS[ls[x1]]+data_LDS[rs[x2]], data_LIS[rs[x1]]+data_LDS[ls[x2]]);\n\tAns =max(Ans, tmp);\n\tmerge(ls[x1], ls[x2]), merge(rs[x1], rs[x2]);\n}\n```\n\n\u8fd9\u6837\uff0c\u7b54\u6848\u7edf\u8ba1\u7684\u590d\u6742\u5ea6\u5c31\u88ab\u5747\u644a\u5230\u7ebf\u6bb5\u6811\u5408\u5e76\u4e2d\u4e86\u3002\u6700\u7ec8\u590d\u6742\u5ea6\u5c31\u4e3a $O(n\\log n+n\\log n+n\\log n)$\n\n### \u957f\u5256\uff08$O(n\\log n)$\uff09\n\n\u601d\u8003 \u201cdsu on tree\u201d \u4e2d\u7684\u7b2c\u4e8c\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u6211\u4eec\u7684 `g[.]` \u7684\u4e0b\u6807\u4e0a\u9650\u5b9e\u9645\u4e0a\u662f\u548c\u5f53\u524d\u94fe\u957f\uff08\u6df1\u5ea6\uff09\u6709\u5173\u7684\uff0c\u5e76\u4e14\u8ba1\u7b97 `dp[.]` \u7684\u590d\u6742\u5ea6\u548c dsu on tree \u90e8\u5206\u65e0\u5173\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u7528\u957f\u5256\u4f18\u5316\n\n\u5177\u4f53\u5b9e\u73b0\u76f4\u63a5\u5957\u7528\u957f\u5256\u7ef4\u62a4 `g[.]` \u7684\u5408\u5e76\u5c31\u884c\u4e86\uff0c\u5982\u5bf9\u957f\u5256\u4e0d\u719f\u6089\u53ef\u4ee5\u53c2\u8003\u540e\u9762\u7684\u4ee3\u7801\n\n\u6bcf\u6b21\u8ba1\u7b97 `dp[.]` \u7684\u590d\u6742\u5ea6\u662f $O(\\log n)$ \u7684\uff1b\u8ba1\u7b97 `g[.]` \u7684\u603b\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\u3002\u56e0\u6b64\u8fd9\u90e8\u5206\u7684\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\log n+n)$\n\n&nbsp;\n\n\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u5408\u5e76\u7684\u7b54\u6848\n\n\u5728\u5408\u5e76\u8f7b\u513f\u5b50\u5b50\u6811\u524d\uff0c\u6211\u4eec\u4ecd\u65e7\u8003\u8651\u5148\u7edf\u8ba1\u8f7b\u513f\u5b50\u5b50\u6811\u5185\u7ed3\u70b9\u4f5c\u4e3a\u7b54\u6848\u94fe\u7684\u4e2d\u95f4\u4e00\u70b9\u7684\u60c5\u51b5\u3002\u548c dsu on tree II \u4e00\u6837\uff0c\u8fd9\u4e2a\u7ed3\u70b9**\u5fc5\u987b\u5728\u8be5\u5b50\u6811\u7684 `g[.]` \u4e2d\u51fa\u73b0\u8fc7**\uff08\u5b9e\u73b0\u65f6\u53ea\u904d\u5386\u8f7b\u513f\u5b50\u7684 `g` \u6570\u7ec4\u5c31\u884c\u4e86\uff09\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u82e5\u5047\u8bbe $x$ \u4f5c\u4e3a\u7b54\u6848\u94fe\u7684\u4e2d\u95f4\u4e00\u70b9\uff0c\u90a3\u4e48\u5c31\u5728\u7ee7\u627f\u7684\u91cd\u513f\u5b50 `g[.]` \u4e2d\u4e8c\u5206\u67e5\u627e\u51fa\u9002\u5408\u7684\u4e0a\u5347/\u4e0b\u964d\u94fe\u62fc\u4e0a\u53bb\uff0c\u5e76\u4e0e\u7b54\u6848\u6bd4\u8f83\n\n\uff08\u4e0a\u9762\u4e24\u6bb5\u4e5f\u57fa\u672c\u90fd\u662f copy \u7684X\uff09\n\n\u6bcf\u6761\u94fe\u4f1a\u4e14\u4ec5\u4f1a\u88ab\u5408\u5e76\u4e00\u6b21\u3002\u5373\u4f7f `g` \u6570\u7ec4\u90fd\u662f\u6700\u574f\u60c5\u51b5\uff0c\u5373\u4e0b\u6807\u4e3a\u6bcf\u6761\u94fe\u7684\u94fe\u957f\uff0c\u6bcf\u6761\u94fe\u5728\u88ab\u5408\u5e76\u3001\u7edf\u8ba1\u7b54\u6848\u65f6\uff0c\u7edf\u8ba1\u7b54\u6848\u90e8\u5206\u4e5f\u53ea\u4f1a\u505a\u51fa $O(\\log n)$ \u4e58\u94fe\u957f\uff08`g` \u6570\u7ec4\u4e0b\u6807\uff09\u7684\u590d\u6742\u5ea6\u3002\u4e8e\u662f\u603b\u7684\u590d\u6742\u5ea6\u5c31\u4e3a $O(n\\log n+n+n\\log n)$\n\n&nbsp;\n\n\u8fd9\u79cd\u505a\u6cd5\u7406\u8bba\u4e0a\u5e94\u8be5\u662f\u8dd1\u5f97\u6700\u5feb\u7684\u4e86\uff0c\u5e76\u4e14\u590d\u6742\u5ea6\u74f6\u9888\u662f\u5728 `lower_bound`\uff08\u4e8c\u5206\u67e5\u627e\uff09\u3002\u4e0d\u8fc7\u6211\u7684\u5b9e\u73b0\u8c8c\u4f3c\u5e76\u4e0d\u4f18\u79c0\uff0c\u5e76\u4e14\u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u7528 `vector` \u5b9e\u73b0\u4e86\u957f\u5256\uff0c\u56e0\u6b64\u5e38\u6570\u53ef\u80fd\u4f1a\u6709\u70b9\u5927 \\kk\n\n## CODE\n\n\u8fd9\u91cc\u53ea\u5b9e\u73b0\u4e86\u4e24\u79cd\n\n### \u6362\u6839\u505a\u6cd5\n\n\u6ce8\u610f\u6bcf\u6b21\u4ece dfs \u8fd4\u56de\u65f6\u8981\u8fd8\u539f dp \u503c\uff0c\u5426\u5219\u540e\u9762\u66b4\u529b\u8f6c\u79fb\u65f6\u4f1a\u51fa\u9519\n\n```cpp\n#include <cstdio>\n#include <vector>\nusing std::vector;\nusing std::max;\n\nconst int MAXN =6e3+50;\n\n/*------------------------------Map------------------------------*/\n\nvector<int> E[MAXN];\n\ninline void addedge(int u, int v){\n\tE[u].push_back(v), E[v].push_back(u);\n}\n\n/*------------------------------Dfs------------------------------*/\n\nint Ans =0;\nint a[MAXN];\nint dp[MAXN];\n\nint dfs_find(int u, int fa, const int &val){\n\tint ret =(a[u] < val) ? dp[u] : 0;\n\tfor(int v:E[u])\n\t\tif(v != fa)\n\t\t\tret =max(ret, dfs_find(v, u, val));\n\treturn ret;\n}\n\nvoid dfs1(int u, int fa){\n\tfor(int v:E[u])\n\t\tif(v != fa)\n\t\t\tdfs1(v, u);\n\tdp[u] =0;\n\tdp[u] =dfs_find(u, fa, a[u])+1;\n\tAns =max(Ans, dp[u]);\n}\n\nvoid dfs2(int u, int fa){\n\tfor(int v:E[u])\n\t\tif(v != fa){\n\t\t\tint tmp1 =dp[u];\n\t\t\tdp[u] =0;\n\t\t\tdp[u] =dfs_find(u, v, a[u])+1;\n\t\t//\tAns =max(Ans, dp[u]);/*\u4e00\u5b9a\u4e0d\u66f4\u4f18*/\n\t\t\t\n\t\t\tint tmp2 =dp[v];\n\t\t\tdp[v] =0;\n\t\t\tdp[v] =dfs_find(v, 0, a[v])+1;\n\t\t\tAns =max(Ans, dp[v]);\n\t\t\tdfs2(v, u);\n\t\t\t\n\t\t\tdp[u] =tmp1;\n\t\t\tdp[v] =tmp2;/*<- \u9700\u8981\u8fd8\u539f*/\n\t\t}\n}\n\n/*------------------------------Main------------------------------*/\n\ninline int read(){\n\tint x =0; char c =getchar(); bool f =0;\n\twhile(c < '0' || c > '9') (c == '-') ? f =1, c =getchar() : c =getchar();\n\twhile(c >= '0' && c <= '9') x = (x<<3) + (x<<1) + (48^c), c =getchar();\n\treturn (f) ? -x : x;\n}\n\nint main(){\n\tint n =read();\n\tfor(int i =1; i <= n; ++i)\n\t\ta[i] =read();\n\tfor(int i =0; i < n-1; ++i)\n\t\taddedge(read(), read());\n\tdfs1(1, 0);\n\tdfs2(1, 0);\n\tprintf(\"%d\", Ans);\n}\n```\n\n### \u957f\u5256\u505a\u6cd5\n\n\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\uff0c\u76f4\u63a5\u901a\u8fc7\u5c06\u5143\u7d20\u53d6\u53cd\u3001\u7ef4\u62a4\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u65b9\u5f0f\u6765\u7ef4\u62a4\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217\n\n\u5199\u5f97\u53ef\u80fd\u4e0d\u662f\u5f88\u6807\u51c6...\u4ec5\u4f9b\u53c2\u8003\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#pragma GCC optimize(\"O3\")\n#pragma GCC optimize(\"Ofast\", \"-funroll-loops\", \"-fdelete-null-pointer-checks\")\n#pragma GCC target(\"ssse3\", \"sse3\", \"sse2\", \"sse\", \"avx2\", \"avx\")\nusing std::vector;\nusing std::max;\nusing std::min;\nusing std::lower_bound;\n\nconst int MAXN =6e3+50;\n\n/*------------------------------Map------------------------------*/\n\nvector<int> E[MAXN];\n\ninline void addedge(int u, int v){\n\tE[u].push_back(v), E[v].push_back(u);\n}\n\n/*------------------------------Dfs------------------------------*/\n\nint Ans =1;\nint a[MAXN];\n\ninline void add(vector<int> &v, const int &ai){/*\u66f4\u65b0 LIS/LDS*/\n\tint len =lower_bound(v.begin(), v.end(), ai)-v.begin()-1;\n\tif(len+1 >= (int)v.size())\n\t\tv.push_back(ai);\n\telse\n\t\tv[len+1] =min(v[len+1], ai);\n}\n\nvoid updata_ans(const vector<int> &v1, const vector<int> &v2){\n\tfor(int len_v1 =0; len_v1 < (int)v1.size(); ++len_v1)\n\t\tAns =max(Ans, len_v1 + (int)(lower_bound(v2.begin(), v2.end(), -v1[len_v1])-v2.begin()-1));\n}\n\ninline void vector_free_memory(vector<int> &v){/*\u91ca\u653e vector \u5185\u5b58 ( \u5b9e\u9645\u4e0a\u5728\u672c\u9898\u6ca1\u5565\u5fc5\u8981 X )*/\n\tvector<int> tmp;\n\tv.swap(tmp);\n}\n\nvoid merge(vector<int> &v1, vector<int> &v2){/*\u5408\u5e76 v2 \u5230 v1*/\n\tfor(int i =0; i < (int)v2.size(); ++i){\n\t\t/*\u6ce8\u610f g[.] \u7684\u4e0b\u6807\u4e0a\u9650\u4e0d\u4e00\u5b9a\u5c31\u7b49\u4e8e\u94fe\u957f*/\n\t\t/*\u56e0\u6b64\u5373\u4f7f\u7ee7\u627f\u4e86\u957f\u513f\u5b50\u7684 g[.]\uff0c\u4e5f\u8981\u8003\u8651\u4e0b\u6807\u8d8a\u754c\u7684\u60c5\u51b5*/\n\t\tif(i >= (int)v1.size())\n\t\t\tv1.push_back(v2[i]);\n\t\telse\n\t\t\tv1[i] =min(v1[i], v2[i]);\n\t}\n\tvector_free_memory(v2);\n}\n\n/*\u4e0b\u9762\u8fd9\u4e9b\u5373\u4e3a\u9898\u89e3\u4e2d\u6240\u8ff0\u7684 \"g[.]\"*/\nvector<int> tail_LIS[MAXN];/*\u957f\u5ea6\u4e3a i \u7684\u6700\u5c0f\u7ed3\u5c3e\u5143\u7d20\uff1b\u53ef\u77e5\u968f i \u51cf\u5c0f tail[i] \u5355\u8c03\u4e0d\u589e*/\nvector<int> tail_LDS[MAXN];/*\u540c\u4e0a\uff0c\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u5c06\u5143\u7d20\u90fd\u53d6\u53cd\u4e86*/\n\nint dfs(int u, int fa){\n\tint mxlen =0, mxi =-1;\n\tfor(int v:E[u])\n\t\tif(v != fa){\n\t\t\tint tmp =dfs(v, u);\n\t\t\tif(tmp > mxlen)\n\t\t\t\tmxlen =tmp, mxi =v;\n\t\t}\n\ttail_LIS[u].push_back(-0x7f7f7f7f), tail_LIS[u].push_back(a[u]);\n\ttail_LDS[u].push_back(-0x7f7f7f7f), tail_LDS[u].push_back(-a[u]);\n\tif(mxi != -1){\n\t\tint v =mxi;\n\t\tadd(tail_LIS[v], a[u]), add(tail_LDS[v], -a[u]);\n\t\tupdata_ans(tail_LIS[u], tail_LDS[v]);\n\t\tupdata_ans(tail_LDS[u], tail_LIS[v]);\n\t\ttail_LIS[u].swap(tail_LIS[v]);\n\t\ttail_LDS[u].swap(tail_LDS[v]);\n\t}\n\tfor(int v:E[u])\n\t\tif(v != fa && v != mxi){\n\t\t\tadd(tail_LIS[v], a[u]), add(tail_LDS[v], -a[u]);\n\t\t/*1. \u66f4\u65b0\u7b54\u6848 - \u6709\u7528\u5230\u4e00\u4e2a\u5c0f trick*/\n\t\t/*2. \u867d\u7136\u4e24\u4e2a\u96c6\u5408\u90fd\u53ef\u80fd\u6709\u4ee5 a[u] \u7ed3\u5c3e\u7684\u94fe\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u4f1a\u8fde\u5728\u4e00\u8d77*/\n\t\t/*2. \u5982\u679c < \u88ab\u6539\u6210 <=\uff0c\u4e5f\u53ef\u505a\uff1a*/\n\t\t/*2. \u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u6b21\u7ed9 v \u7684\u7b54\u6848\u52a0\u4e0a a[i]\uff0c\u4e0e\u5df2\u904d\u5386\u7684 u \u7b54\u6848\u5408\u5e76\uff0c\u518d\u8fd8\u539f v \u7684\u7b54\u6848\u5e76\u52a0\u5165\u5df2\u904d\u5386\u7684 u \u7b54\u6848\u5373\u53ef V*/\n\t\t\tupdata_ans(tail_LIS[v], tail_LDS[u]);\n\t\t\tupdata_ans(tail_LDS[v], tail_LIS[u]);\n\t\t//\tmodify(tail_LIS[v]), modify(tail_LDS[v]);/*<- \u5c31\u50cf\u8fd9\u6837 2.*/ \n\t\t\tmerge(tail_LIS[u], tail_LIS[v]);\n\t\t\tmerge(tail_LDS[u], tail_LDS[v]);\n\t\t}\n\treturn mxlen+1;\n}\n\n/*------------------------------Main------------------------------*/\n\ninline int read(){\n\tint x =0; char c =getchar(); bool f =0;\n\twhile(c < '0' || c > '9') (c == '-') ? f =1, c =getchar() : c =getchar();\n\twhile(c >= '0' && c <= '9') x = (x<<3) + (x<<1) + (48^c), c =getchar();\n\treturn (f) ? -x : x;\n}\n\nint main(){\n\tint n =read();\n\tfor(int i =1; i <= n; ++i)\n\t\ta[i] =read();\n\tfor(int i =0; i < n-1; ++i)\n\t\taddedge(read(), read());\n\tdfs(1, 0);\n\tprintf(\"%d\", Ans);\n}\n```",
        "postTime": 1602652419,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF490F \u3010Treeland Tour\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u68f5\u5e26\u70b9\u6743\u6811\uff0c\u6c42\u6811\u4e0a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6$(n<=6000)$\n\n\n\n------------\n\n\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\uff0c\u53ef\u4ee5\u5f88\u66b4\u529b\n\n\u7528\u6734\u7d20\u6c42\u89e3LIS\u7684$nlogn$\u505a\u6cd5\uff0c\u505a$n$\u6b21$dfs$\n\n$n^2logn$\u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u8dd1\u8fc7\n\n```\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#define reg register\nusing namespace std;\nconst int N=6005;\nstruct node\n{\n\tint to,nxt;\n}edge[N<<1];\nint n,w[N],num,head[N],ans,f[N];\ninline int read()\n{\n\tint x=0,w=1;\n\tchar c=getchar();\n\twhile (!isdigit(c)&&c!='-') c=getchar();\n\tif (c=='-') c=getchar(),w=-1;\n\twhile (isdigit(c))\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x*w;\n}\ninline void add_edge(int from,int to)\n{\n\tedge[++num]=(node){to,head[from]};\n\thead[from]=num;\n}\nvoid dfs(int k,int fa)\n{\n\tint pos=lower_bound(f+1,f+n+1,w[k])-f;\n\tans=max(ans,pos); int tmp=f[pos]; f[pos]=w[k];\n\tfor (reg int i=head[k];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (v!=fa) dfs(v,k);\n\t}\n\tf[pos]=tmp;\n}\nint main()\n{\n\tn=read();\n\tfor (reg int i=1;i<=n;w[i++]=read());\n\tfor (reg int i=1;i<n;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tadd_edge(x,y); add_edge(y,x);\n\t}\n\tmemset(f,127/3,sizeof(f));\n\tfor (reg int i=1;i<=n;i++) dfs(i,0);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n\n\n------------\n\n\n\u8981\u662f\u6570\u636e\u8303\u56f4\u518d\u5927\u4e00\u70b9\u8fd9\u4e2a\u5c31$GG$\u4e86\n\n$Q:$\u90a3\u548b\u529e\u554a\n\n$A:$\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u7ef4\u62a4\u4ee5\u5b83\u5b50\u6811\u5185\u7684\u70b9\u4e3a\u7ed3\u5c3e\u7684$LIS$\u548c$LDS$,\u653e\u5230\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\u5408\u5e76\u4fe1\u606f\n\n$Q:$\u548b\u66f4\u65b0\u7b54\u6848\u554a\n\n$A$:\u7528(\u5de6\u513f\u5b50\u7684$LIS+$\u53f3\u513f\u5b50\u7684$LDS$)\u548c(\u5de6\u513f\u5b50\u7684$LDS+$\u53f3\u513f\u5b50\u7684$LIS$)\u66f4\u65b0\n\n\u522b\u5fd8\u4e86**\u79bb\u6563\u5316**\u4e00\u4e0b\n\n```\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#define reg register\nusing namespace std;\nconst int N=6005;\nstruct node\n{\n\tint to,nxt;\n}edge[N<<1];\nint n,w[N],num,head[N],t[N],tot,rt[N],cnt,ans,ret;\nint ls[N*40],rs[N*40],lis[N*40],lds[N*40];\ninline int read()\n{\n\tint x=0,w=1;\n\tchar c=getchar();\n\twhile (!isdigit(c)&&c!='-') c=getchar();\n\tif (c=='-') c=getchar(),w=-1;\n\twhile (isdigit(c))\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x*w;\n}\ninline void add_edge(int from,int to)\n{\n\tedge[++num]=(node){to,head[from]};\n\thead[from]=num;\n}\nvoid insert(int &now,int l,int r,int x,int c,int *a)\n{\n\tif (!now) now=++cnt; a[now]=max(a[now],c);\n\tif (l==r) return; int mid=(l+r)>>1;\n\tif (x<=mid) insert(ls[now],l,mid,x,c,a);\n\telse insert(rs[now],mid+1,r,x,c,a);\n}\nint merge(int a,int b)\n{\n\tif (!a) return b; if (!b) return a;\n\tlis[a]=max(lis[a],lis[b]); lds[a]=max(lds[a],lds[b]);\n\tans=max(ans,max(lis[ls[a]]+lds[rs[b]],lds[rs[a]]+lis[ls[b]]));\n\tls[a]=merge(ls[a],ls[b]); rs[a]=merge(rs[a],rs[b]);\n\treturn a;\n}\nint query(int L,int R,int l,int r,int now,int *a)\n{\n\tif (l>R||r<L||!now) return 0;\n\tif (l>=L&&r<=R) return a[now];\n\tint mid=(l+r)>>1;\n\tif (mid>=R) return query(L,R,l,mid,ls[now],a);\n\tif (mid<L) return query(L,R,mid+1,r,rs[now],a);\n\treturn max(query(L,mid,l,mid,ls[now],a),query(mid+1,R,mid+1,r,rs[now],a));\n}\nvoid dfs(int k,int fa)\n{\n\tint mlis=0,mlds=0;\n\tfor (reg int i=head[k];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (v==fa) continue; dfs(v,k);\n\t\tint ilis=query(1,w[k]-1,1,tot,rt[v],lis);\n\t\tint ilds=query(w[k]+1,tot,1,tot,rt[v],lds);\n\t\trt[k]=merge(rt[k],rt[v]);\n\t\tans=max(ans,max(ilis+mlds,ilds+mlis)+1);\n\t\tmlis=max(mlis,ilis); mlds=max(mlds,ilds);\n\t}\n\tinsert(rt[k],1,tot,w[k],mlis+1,lis);\n\tinsert(rt[k],1,tot,w[k],mlds+1,lds);\n}\nint main()\n{\n\tn=read(); cnt=n;\n\tfor (reg int i=1;i<=n;i++) w[i]=t[i]=read(),rt[i]=i;\n\tfor (reg int i=1;i<n;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tadd_edge(x,y); add_edge(y,x);\n\t}\n\tsort(t+1,t+n+1);\n\ttot=unique(t+1,t+n+1)-t-1;\n\tfor (reg int i=1;i<=n;i++) w[i]=lower_bound(t+1,t+tot+1,w[i])-t;\n\tdfs(1,0); printf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1538985124,
        "uid": 43471,
        "name": "Captain_Paul",
        "ccfLevel": 0,
        "title": "CF490F  Treeland Tour"
    },
    {
        "content": "\u5ba3\u4f20\u4e00\u4e0b[\u535a\u5ba2](https://blog.imyangty.com/sol-cf490f/)\n\n\u8bf4\u660e\uff1a\u672c\u9898\u89e3\u66f4\u4e3a\u8be6\u7ec6\u7684\u9610\u8ff0\u4e86\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u505a\u6cd5\n\n## \u9898\u610f\n\n\u6c42\u6811\u4e0a\u4e25\u683c LIS \u7684\u957f\u5ea6\u3002$n\\le 6000$\u3002\n\n## \u9898\u89e3\n\n\u6bd4\u8f83\u5e73\u51e1\u7684 $O(n^2\\log n)$ \u505a\u6cd5\u8fd9\u91cc\u4e0d\u8003\u8651\u3002\n\n\u5047\u5b9a\u4e00\u4e2a\u6700\u6734\u7d20\u7684 dp \u72b6\u6001\uff1a$f_{u, 0/1, x}$ \u8868\u793a $u$ \u5b50\u6811\u4e2d\u5f80\u4e0a\u5ef6\u4f38\u7684\u7ed3\u5c3e\u4e3a $x$ \u7684 LIS/LDS \u7684\u6700\u5927\u957f\u5ea6\u3002\u7136\u540e\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u4e00\u68f5\u5b50\u6811\u4e2d\u6709\u5f88\u591a\u8fd9\u6837\u7684 $f$ \u503c\u662f\u76f8\u7b49\u7684\u3002\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7528\u957f\u94fe\u5256\u5206\u6216\u8005\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u4f18\u5316\u8fd9\u4e2a dp\u3002\u672c\u9898\u89e3\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e0b\u6807 $i$ \u5904\u7ef4\u62a4\u7684\u662f\u7ed3\u5c3e\u4e3a $i$ \u7684 LIS/LDS \u7684\u6700\u5927\u957f\u5ea6\u3002\u4e0d\u96be\u53d1\u73b0\u5176\u975e\u5e38\u901a\u8fc7\u7ebf\u6bb5\u6811\u5408\u5e76\u628a\u5b50\u6811\u7684\u4fe1\u606f\u5408\u5e76\u5230\u6839\u3002\n\n\u81f3\u4e8e\u7edf\u8ba1\u7b54\u6848\uff0c\u4e00\u6761\u5408\u6cd5\u7684 LIS \u8def\u5f84\u5fc5\u7136\u662f\u7531\u4e0a\u5347\u5230\u4e0b\u964d\u7684\u4e24\u6bb5\u7ec4\u6210\u7684\uff08\u867d\u7136\u53ef\u80fd\u5176\u4e2d\u4e00\u6bb5\u4e0d\u5b58\u5728\uff09\u3002\u5f53\u6211\u4eec\u5728\u5904\u7406 $u$ \u5b50\u6811\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5047\u5b9a $u$ \u5c31\u4e3a\u4e00\u6bb5\u8def\u5f84\u7684\u4e2d\u95f4\u5fc5\u7ecf\u70b9\uff0c\u73b0\u5728\u5c31\u53ea\u9700\u8981\u5728\u5b50\u6811\u91cc\u627e\u5230\u4e00\u622a\u5c3e\u90e8\u5c0f\u4e8e $w_u$ \u7684 LIS\uff0c\u548c\u4e00\u622a\u5c3e\u90e8\u5927\u4e8e $w_u$ \u7684 LDS\uff0c\u52a0\u8d77\u6765\u518d\u52a0\u4e00\u5c31\u884c\u4e86\u3002\n\n\u4f46\u662f\uff0c\u4ecd\u7136\u4f1a\u5b58\u5728\u4e00\u4e9b\u6ca1\u88ab\u7edf\u8ba1\u7684\u7b54\u6848\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u5019\u8fb9\u5408\u5e76\u8fb9\u7edf\u8ba1\u5c31\u884c\u4e86\u3002\u5177\u4f53\u5730\u53ef\u4ee5\u770b\u4ee3\u7801\u7684\u5408\u5e76\u90e8\u5206\u3002\n\n\u7136\u540e\u5904\u7406\u5b8c\u4e00\u68f5\u5b50\u6811\u4e4b\u540e\u662f\u9700\u8981\u66f4\u65b0\u4ee5\u5176\u4e3a\u7aef\u70b9\u7684\u6700\u5927 LIS/LDS \u957f\u5ea6\u7684\u3002\u8be6\u89c1\u4ee3\u7801\u3002\n\n(\u4e00\u5f00\u59cb\u4e0d\u8981\u5fd8\u8bb0\u79bb\u6563\u5316)\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <algorithm>\n#define il inline\n#define FOR(i, a, b) for (int i = a; i <= b; ++i)\n#define DEC(i, a, b) for (int i = a; i >= b; --i)\n\nconst int maxn = 6005;\n\nint read()\n{\n    int s = 0, x = 0;\n    char c = getchar();\n    while (!isdigit(c))\n        x |= (c == '-'), c = getchar();\n    while (isdigit(c))\n        s = s * 10 + c - '0', c = getchar();\n    return x ? -s : s;\n}\n\nil int max(int a, int b) {return a > b ? a : b;}\n\nint head[maxn], to[maxn << 1], nxt[maxn << 1], cnte;\n\nil void add(int u, int v)\n{\n    to[++cnte] = v;\n    nxt[cnte] = head[u];\n    head[u] = cnte;\n    return;\n}\n\nint n, maxa, a0[maxn], a[maxn];\n\nstruct node\n{\n    int ls, rs, lis, lds;\n} t[maxn * 50];\n\nint root[maxn], cnt;\nint ans = 0;\n\n#define L(k) t[k].ls\n#define R(k) t[k].rs\n#define M ((i + j) >> 1)\n\nil void pushup(int k)\n{\n    t[k].lis = max(t[L(k)].lis, t[R(k)].lis);\n    t[k].lds = max(t[L(k)].lds, t[R(k)].lds);\n    return;\n}\n\nvoid modify(int &k, int i, int j, int pos, int lis, int lds)\n{\n    if (!k) k = ++cnt;\n    if (i == j)\n    {\n        t[k].lis = max(t[k].lis, lis);\n        t[k].lds = max(t[k].lds, lds);\n        return;\n    }\n    if (pos <= M) modify(L(k), i, M, pos, lis, lds);\n    else modify(R(k), M + 1, j, pos, lis, lds);\n    pushup(k);\n    return;\n}\n\nvoid query(int k, int i, int j, int x, int y, int &lis, int &lds)//\u67e5\u8be2\u7ed3\u5c3e\u6570\u5b57\u5728 [x, y] \u7684 LIS/LDS\n{\n    if (!k) return;\n    if (x <= i && y >= j)\n    {\n        lis = max(lis, t[k].lis), lds = max(lds, t[k].lds);\n        return;\n    }\n    if (x <= M) query(L(k), i, M, x, y, lis, lds);\n    if (y > M) query(R(k), M + 1, j, x, y, lis, lds);\n    return;\n}\n\nvoid merge(int &x, int y)\n{\n    if (!x || !y)\n    {\n        x |= y;\n        return;\n    }\n    t[x].lds = max(t[x].lds, t[y].lds);\n    t[x].lis = max(t[x].lis, t[y].lis);\n    ans = max(ans, max(t[L(x)].lis + t[R(y)].lds, t[R(x)].lds + t[L(y)].lis));//\u5408\u5e76\u7684\u65f6\u5019\u7edf\u8ba1\u7b54\u6848\n    merge(L(x), L(y)), merge(R(x), R(y));\n    return;\n}\n\nvoid dfs(int u, int fa)\n{\n    int mlis = 0, mlds = 0;\n    for (int i = head[u]; i; i = nxt[i])\n    {\n        int v = to[i];\n        if (v == fa) continue;\n        dfs(v, u);\n\n        int vlis = 0, vlds = 0, tmp;\n        query(root[v], 1, maxa, 1, a[u] - 1, vlis, tmp);\n        query(root[v], 1, maxa, a[u] + 1, maxa, tmp, vlds);\n\n        ans = max(ans, mlis + vlds + 1);\n        ans = max(ans, mlds + vlis + 1);//\u7edf\u8ba1\u7ecf\u8fc7 u \u70b9\u7684\u8def\u5f84\u7684\u7b54\u6848\n        mlis = max(mlis, vlis), mlds = max(mlds, vlds);\n\n        merge(root[u], root[v]);\n    }\n    modify(root[u], 1, maxa, a[u], mlis + 1, mlds + 1);//\u5f53\u7136\u8981\u66f4\u65b0\u4e00\u4e0b\uff0c\u63d2\u5165\u7b54\u6848\n    return;\n}\n\nint main()\n{\n    n = read();\n    FOR(i, 1, n) a0[i] = a[i] = read();\n    std::sort(a0 + 1, a0 + n + 1);\n    maxa = std::unique(a0 + 1, a0 + n + 1) - a0 - 1;\n    FOR(i, 1, n) a[i] = std::lower_bound(a0 + 1, a0 + maxa + 1, a[i]) - a0;\n    FOR(i, 1, n - 1)\n    {\n        int u = read(), v = read();\n        add(u, v), add(v, u);\n    }\n    FOR(i, 1, n) modify(root[i], 1, maxa, a[i], 1, 1);\n    dfs(1, 0);\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1623599643,
        "uid": 212488,
        "name": "\u6e05\u70db",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF490F Treeland Tour"
    },
    {
        "content": "\u8003\u8651\u8fd9\u9898\u7684 $n\\leq 10^5$ \u52a0\u5f3a\u7248\u3002\n\n\u8003\u8651\u679a\u4e3e\u4ee5\u6bcf\u4e2a\u70b9 $x$ \u4e3a lca \u7684 LIS\u3002\u90a3\u4e48\u5c31\u8bbe $dp1_x$ \u8868\u793a\u4ece $x$ \u5f80\u4e0b\u7684 LDS\uff0c$dp2_x$ \u662f LIS\uff0c\u90a3\u4e48\u8d21\u732e\u6709\u4e09\u79cd\uff1a\n\n1. $\\max(dp1_x,dp2_x)$\uff1b\n2. \u5bf9\u4e24\u4e2a\u4e0d\u540c\u7684\u513f\u5b50\u5b50\u6811\u91cc\u7684\u8282\u70b9 $y,z$\uff0c\u6ee1\u8db3 $a_y<a_x<a_z$\uff0c$dp1_y+1+dp2_z$\uff1b\n3. \u5bf9\u4e24\u4e2a\u4e0d\u540c\u7684\u513f\u5b50\u5b50\u6811\u91cc\u7684\u8282\u70b9 $y,z$\uff0c\u6ee1\u8db3 $a_y<a_z$\uff0c$dp1_y+dp2_z$\u3002\n\n\u7b2c\u4e00\u79cd\u50bb\u903c\u3002\u7b2c\u4e8c\u79cd\u6211\u4eec\u8981\u641e\u4e00\u4e2a\u5b50\u6811\u5185\u503c\u57df\u5728\u67d0\u4e00\u8303\u56f4\u5185\u7684 $\\max$\uff08\u76f8\u5f53\u4e8e\u662f\u4e2a\u4e0d\u53ef\u5dee\u5206\u7684\u4e8c\u7ef4\u6570\u70b9\uff09\uff0cDP \u7684\u8f6c\u79fb\u4e5f\u8981\uff0c\u7b2c\u4e09\u79cd\u5219\u66f4\u96be\u3002\n\n\u5148\u8003\u8651\u8fd9\u4e2a\u7c7b\u4e8c\u7ef4\u6570\u70b9\u3002\u5b83\u662f\u5728\u7ebf\u3001\u52a8\u6001\u7684\uff0c\u5fc5\u987b\u7528\u6811\u5957\u6811\uff0c\u7531\u4e8e\u4e0d\u53ef\u5dee\u5206\u8fd8\u5fc5\u987b\u8981\u7528\u7ebf\u6bb5\u6811\u5957\u7ebf\u6bb5\u6811\u3002\u6211\u66fe\u5c1d\u8bd5\u7528\u540e\u5e8f\u904d\u5386\u7f16\u53f7\uff0c\u8fd9\u6837\u53ef\u4ee5\u5047\u88c5\u662f\u9759\u6001\u7684\uff0c\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u5904\u7406\u2026\u2026\u5417\uff1f\u5b83\u4e0d\u53ef\u5dee\u5206\u2026\u2026\u2026\u2026\u6240\u4ee5\u6811\u5957\u6811\u662f\u5927\u5e38\u6570 2log \u7684\uff0c\u800c\u4e14\u8fd8\u4e0d\u60f3\u5199\u3002\n\n\u5bf9\u4e8e\u5b50\u6811\u6570\u989c\u8272\u4e4b\u7c7b\u4e0d\u53ef\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230 dsu on tree\u3002\u4f46\u50cf\u8fd9\u79cd\u66a7\u6627\u7684\uff0c\u53ef\u4ee5\u533a\u95f4 ds \u7ef4\u62a4\u4f46\u53c8\u6bd4\u8f83\u52a3\u7684\u5c31\u60f3\u4e0d\u5230 dsu on tree\u3002\u4e8b\u5b9e\u4e0a\u662f\u53ef\u4ee5 dsu on tree \u7684\uff0c\u6211\u4eec\u8003\u8651\u4e4b\u3002\u5c31\u5b9e\u65f6\u7ef4\u62a4\u8be5\u5b50\u6811\u5185\uff0c\u5173\u4e8e\u503c\u57df\u7684\u4e00\u4e2a\u7ebf\u6bb5\u6811\u3002\u90a3\u4e48\u7c7b\u4e8c\u7ef4\u6570\u70b9\u8fd9\u73a9\u610f\u5c31\u641e\u5b8c\u4e86\uff0c\u7b2c\u4e09\u79cd\u600e\u4e48\u5904\u7406\u5462\uff1f\u8003\u8651\u5728 dsu on tree \u7684\u8f7b\u5b50\u6811\u5408\u5e76\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u4e0e\u5b9e\u65f6\u7ef4\u62a4\u7684\u5230\u76ee\u524d\u53bb\u6389\u5f53\u524d\u5b50\u6811\u7684\u6240\u6709\u5b50\u6811\u7684 $\\min\\max$ \u53d1\u751f\u5173\u7cfb\u5373\u53ef\u3002\u8fd9\u6837\u5b50\u662f\u5c0f\u5e38\u6570 2log\uff0c\u662f\u4e2a\u7ecf\u5178\u7684 dsu on tree \u4f18\u5316 DP\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a dsu on tree \u8fd8\u53ef\u4ee5\u6539\u6210\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u600e\u4e48\u5904\u7406\u5462\uff1f\u5408\u5e76\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\uff0c\u7c7b\u4f3c cdq \u5206\u6cbb\u5730\u5728\u4ee5\u6bcf\u4e2a\u8282\u70b9\u4e3a\u5206\u754c\u7684\u5730\u65b9\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002",
        "postTime": 1617003965,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "CF490F"
    },
    {
        "content": "## \u6cd5\u4e00 \n\n\u679a\u4e3e\u6bcf\u4e2a\u8282\u70b9\u5f53\u4f5c\u8d77\u70b9\uff0cDFS\u4e0b\u53bb\uff0c\u91c7\u7528\u5355\u8c03\u6808\uff0c\u52a8\u6001\u7ef4\u62a4\u8d77\u70b9\u5230\u76ee\u524d\u70b9\u7684\u5355\u8c03\u6808\uff0c\u5728\u94fe\u4e0a\u66f4\u65b0\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n\n\n\u65f6\u95f4\uff08O(n^2log(n))\uff09\n\u7531\u4e8e\u6570\u636e\u592a\u6c34n<=6000 \u65b9\u6cd5\u53ef\u884c\n\n\n## \u6cd5\u4e8c\n\u90a3\u80fd\u4e0d\u80fd\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\u5462\uff1f\n\n\u5728\u8fd9\u91cc\u6211\u4eec\u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u628a\u4e00\u6761\u8def\u5f84u,v\u5206\u522b\u5230\u4ed6\u4eec\u7684lca\u8282\u70b9\n\n\u4ece\u6839\u5f00\u59cbdfs\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e24\u4e2a\u5355\u8c03\u6808\uff0c\u4e00\u4e2a\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u4e00\u4e2a\u4e0b\u964d\u5b50\u5e8f\u5217\n\u5728rt\u8282\u70b9\u5904\uff0c\u5728\u6bcf\u6b21\u5b50\u8282\u70b9\u5408\u5e76\u524d\uff0c\u6211\u4eec\u5148\u7528\u5c0f\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u5728\u5927\u7684\u4e0b\u964d\u5b50\u5e8f\u5217\u4e2d\u8fdb\u884c\u4e8c\u5206\uff0c\u6c42\u51fa\u7ecf\u8fc7rt\u7684\u8def\u5f84\u4e2d\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff0c\u9009rt\u548c\u4e0d\u9009rt\uff09\n\n\u7136\u540e\u5c06\u4e24\u4e2a\u5b50\u6811\u7684\u5355\u8c03\u6808\u542f\u53d1\u5f0f\u5408\u5e76\uff08\u7528size\u5c0f\u7684\u66f4\u65b0size\u5927\u7684\uff09\n\n\u6700\u540e\u7528rt\u70b9\u66f4\u65b0\u5355\u8c03\u6808\n\n\n\n### \u590d\u6742\u5ea6\u5206\u6790\n1\uff09\u542f\u53d1\u5f0f\u5408\u5e76\u6bcf\u4e2a\u70b9\u6700\u591a\u5408\u5e76log(n)\u6b21\u800c\u8003\u8651\u6bcf\u4e2a\u70b9\u6bcf\u5408\u5e76\u4e00\u6b21\n\u5171\u5408\u5e76n*log\uff08n\uff09\u6b21\n\n2\uff09\u6bcf\u6b21\u5408\u5e76\u9700\u8981log(n)\u7684\u65f6\u95f4\uff08\u4e8c\u5206\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlog^2(n)\uff09\u800c\u4e14\u5e38\u6570\u6781\u5c0f\n\n\n\n\n\n",
        "postTime": 1594799752,
        "uid": 343748,
        "name": "louhao088",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF490F \u3010Treeland Tour\u3011"
    },
    {
        "content": "\u5f88\u4e45\u4ee5\u524d\u505a\u7701\u9009\u6a21\u62df\u8d5b\u7684 T1 \uff0c\u90a3\u65f6\u5019\u6570\u636e\u8303\u56f4\u662f $2 \\times 10 ^ 5$ \u4e8e\u662f\u679c\u65ad\u6572\u4e86\u4e2a\u5e73\u8861\u6811\u5957\u542f\u53d1\u5f0f\u5408\u5e76\u2026\u2026\u73b0\u5728\u5b66\u4e86\u7ebf\u6bb5\u6811\u5408\u5e76\u540e\u611f\u89c9\u8fd8\u662f\u633a\u7b80\u5355\u7684\u3002          \n\n\u6211\u4eec\u8003\u8651\u5728\u679a\u4e3e\u4e00\u4e2a\u70b9\u65f6\u7ef4\u62a4\u4e24\u79cd\u6811\u4e0a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff1a          \n\n- \u7ecf\u8fc7\u8be5\u70b9\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff1b\n\n- \u4e0d\u7ecf\u8fc7\u8be5\u70b9\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff1b                    \n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u4ee5\u4e00\u4e2a\u70b9\u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4ee5\u53ca\u4ee5\u4e00\u4e2a\u70b9\u5f00\u5934\u7684\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c\u90a3\u4e48\u6211\u4eec\u5408\u5e76\u65f6\u5c31\u76f4\u63a5\u9009\u5b50\u6811\u4e2d\u4e24\u4e2a\u6700\u957f\u7684\u5408\u6cd5\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u548c\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217\u5373\u53ef\uff0c\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u3002            \n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u5019\u4ece\u5408\u5e76\u7684\u4e24\u68f5\u7ebf\u6bb5\u6811\u91cc\u6bcf\u5c42\u7684\u5de6\u53f3\u5b50\u6811\u91cc\u9762\u9009\u5de6\u8fb9\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u53f3\u8fb9\u7684\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217\u5408\u5e76\u5373\u53ef\uff0c\u8bb0\u5f97\u4ea4\u6362\u4e00\u4e0b\u4e24\u68f5\u6811\u7684\u987a\u5e8f\u518d\u66f4\u65b0\u4e00\u6b21\u7b54\u6848\u3002                 \n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 1e5 + 5;\nint n,m,lsh[Len],head[Len],cnt,val[Len],ans,Cnt,maxnans[Len][2],Ans;\nstruct T_T\n{\n\tint lc[Len * 80] , rc[Len * 80] , maxn[Len * 80][2],ans[Len * 80],rt[Len],tot;\n\tvoid push_up(int x)\n\t{\t\n\t\tmaxn[x][0] = max(maxn[lc[x]][0] , maxn[rc[x]][0]);\n\t\tmaxn[x][1] = max(maxn[lc[x]][1] , maxn[rc[x]][1]);\n\t}\n\tint clone(){tot ++; lc[tot] = rc[tot] = maxn[tot][0] = maxn[tot][1] = 0 ; return tot;}\n\tint merge(int a,int b,int l,int r)\n\t{\n\t\tAns = max(Ans , max(maxn[lc[a]][1] + maxn[rc[b]][0] , maxn[lc[b]][1] + maxn[rc[a]][0]));\n\t\tif(!a || !b) return a + b;\n\t\tif(l == r)\n\t\t{\n\t\t\tmaxn[a][0] = max(maxn[a][0] , maxn[b][0]) ; maxn[a][1] = max(maxn[a][1] , maxn[b][1]);\n\t\t\treturn a;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tlc[a] = merge(lc[a] , lc[b] , l , mid) , rc[a] = merge(rc[a] , rc[b] , mid + 1 , r);\n\t\tpush_up(a);\n\t\treturn a;\t\n\t} \n\tvoid update(int p,int l,int r,int idx,int opt,int w)\n\t{\t\n\t\tif(l == r) \n\t\t{\n\t\t\tmaxn[p][opt] = max(maxn[p][opt] , w);\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tif(idx <= mid) \n\t\t{\n\t\t\tif(!lc[p]) lc[p] = clone();\n\t\t\tupdate(lc[p] , l , mid , idx , opt , w);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(!rc[p]) rc[p] = clone();\n\t\t\tupdate(rc[p] , mid + 1 , r , idx , opt , w);\n\t\t}\n\t\tpush_up(p);\n\t}\n\tint query(int p,int l,int r,int nl,int nr,int opt)\n\t{\n\t\tif(nl <= l && nr >= r) return maxn[p][opt];\n\t\tint mid = (l + r) >> 1 , res = 0;\n\t\tif(nl <= mid) \n\t\t{\n\t\t\tif(!lc[p]) lc[p] = clone();\n\t\t\tres = query(lc[p] , l , mid , nl , nr , opt);\n\t\t}\n\t\tif(nr > mid) \n\t\t{\n\t\t\tif(!rc[p]) rc[p] = clone();\n\t\t\tres = max(res , query(rc[p] , mid + 1 , r , nl , nr , opt));\n\t\t}\n\t\treturn res;\n\t}\n}S1;\nstruct node\n{\n\tint next,to;\n}edge[Len << 1];\nstruct Node\n{\n\tint x,y;\n}fos[Len];\nbool cmpx(Node x,Node y){return x.x < y.x;}\nbool cmpy(Node x,Node y){return x.y < y.y;}\nvoid add(int from,int to){edge[++ cnt].to = to ; edge[cnt].next = head[from] ; head[from] = cnt;}\nvoid dfs(int x,int f)\n{\n\tS1.rt[x] = S1.clone();\n\tint tots = 0;int maxn[2] = {0 , 0};\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == f) continue;\n\t\tdfs(to , x);\n\t}\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == f) continue;\n\t\ttots ++;\n\t\tAns = 0;\n\t\tif(val[x] == Cnt) fos[tots].x = 1;\n\t\telse fos[tots].x = S1.query(S1.rt[to] , 1 , Cnt , val[x] + 1 , Cnt , 0) + 1;\n\t\tif(val[x] == 1) fos[tots].y = 1;\n\t\telse fos[tots].y = S1.query(S1.rt[to] , 1 , Cnt , 1 , val[x] - 1 , 1) + 1;\n\t\tmaxn[0] = max(maxn[0] , fos[tots].x);\n\t\tmaxn[1] = max(maxn[1] , fos[tots].y);\n\t\tS1.rt[x] = S1.merge(S1.rt[x] , S1.rt[to] , 1 , Cnt);\n\t\tans = max(ans , Ans);\n\t}\n\tif(!tots){ans = max(ans , 1);maxn[0] = maxn[1] = 1;}\n\telse if(tots == 1)\n\t{\n\t\tans = max(ans , fos[tots].x);\n\t\tans = max(ans , fos[tots].y);\n\t}\n\telse\n\t{\n\t\tsort(fos + 1 , fos + 1 + tots , cmpx);\n\t\tsort(fos + 1 , fos + tots , cmpy);\n\t\tans = max(ans , fos[tots].x + fos[tots - 1].y - 1);\n\t\tsort(fos + 1 , fos + 1 + tots , cmpy);\n\t\tsort(fos + 1 , fos + tots , cmpx);\n\t\tans = max(ans , fos[tots].y + fos[tots - 1].x - 1);\n\t}\n\tS1.update(S1.rt[x] , 1 , Cnt , val[x] , 0 , maxn[0]);\n\tS1.update(S1.rt[x] , 1 , Cnt , val[x] , 1 , maxn[1]);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\tscanf(\"%d\",&val[i]);\n\t\tlsh[++ Cnt] = val[i];\n\t}\n\tsort(lsh + 1 , lsh + 1 + Cnt);\n\tCnt = unique(lsh + 1 , lsh + 1 + Cnt) - lsh - 1;\n\tfor(int i = 1 ; i <= n ; i ++) val[i] = lower_bound(lsh + 1 , lsh + 1 + Cnt , val[i]) - lsh;\n\tfor(int i = 1 ; i < n ; i ++)\n\t{\n\t\tint x,y;scanf(\"%d %d\",&x,&y);\n\t\tadd(x , y) , add(y , x);\n\t}\n\tdfs(1 , 0);\n\tprintf(\"%d\\n\",ans);\n \treturn 0;\n}\n```",
        "postTime": 1627357179,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF490F Treeland Tour"
    },
    {
        "content": "### [Treeland Tour](https://www.luogu.com.cn/problem/CF490F)\n\n> \u9898\u610f\uff1a\u6811\u4e0a\u6700\u957f\u4e25\u683c\u4e0a\u5347\u5b50\u5e8f\u5217\n\n\u4e0d\u96be\u60f3\u5230\u679a\u4e3e$lca$,\u8ba1\u7b97\u5b50\u6811\u5185\u7684$\\text{LIS,LDS}$\u7684$n^2\\log_2n$\u7684\u66b4\u529b\n\n\u7531\u4e8e$f_{u,x}$\u8868\u793a\u957f\u5ea6\u4e3a$x$\u7684$u$\u7684$\\tt LIS,LDS$\u7684\u7ed3\u5c3e\u6700\u5927/\u5c0f\u503c\u3002\n\n\u7531\u4e8e\u4e0d\u4f1a\u8d85\u8fc7\u5b50\u6811\u9ad8\u5ea6\uff0c\u8003\u8651\u957f\u94fe\u5256\u5206\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log_2 n)$\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n# define fre(k) freopen(k\".in\",\"r\",stdin);freopen(k\".out\",\"w\",stdout)\n# define ll long long\n# define read read1<ll>()\n# define Type template<typename T>\nType T read1(){\n\tT t=0;\n\tchar k;\n\tbool vis=0;\n\tdo (k=getchar())=='-'&&(vis=1);while('0'>k||k>'9');\n\twhile('0'<=k&&k<='9')t=(t<<3)+(t<<1)+(k^'0'),k=getchar();\n\treturn vis?-t:t;\n}\nvector<int>G[100005];\nint s,a[100005],h[100005],son[100005],ans,hx[300005],NOW;\nvoid dfs(int n,int fa){\n\tfor(int i=0;i<G[n].size();++i)\n\t\tif(G[n][i]!=fa){\n\t\t\tdfs(G[n][i],n);\n\t\t\tif(h[son[n]]<=h[G[n][i]])son[n]=G[n][i];\n\t\t}h[n]=h[son[n]]+1;\n}\nint cmp(int x,int y){return x>y;}\nint* New(int n){\n\tint* w=hx+NOW;NOW+=n;\n\treturn w;\n}\nvoid dfs(int n,int fa,int* Up,int* Down){\n\tif(son[n])dfs(son[n],n,Up,Down);\n\tint w=lower_bound(Up,Up+h[n]+1,a[n])-Up;\n\tans=max(ans,w);Up[w]=a[n];\n\tw=lower_bound(Down,Down+h[n]+1,a[n],cmp)-Down;\n\tans=max(ans,w);Down[w]=a[n];\n\tfor(int i=0;i<G[n].size();++i)\n\t\tif(G[n][i]!=son[n]&&G[n][i]!=fa){\n\t\t\tint u=G[n][i],*x=New(h[u]+1),*y=New(h[u]+1);\n\t\t\tmemset(x,0x7f,h[u]+1<<2);x[0]=-x[0];\n\t\t\tmemset(y,-0x7f,h[u]+1<<2);y[0]=-y[0];\n\t\t\tdfs(u,n,x,y);\n\t\t\tfor(int j=1;j<=h[u];++j){\n\t\t\t\tif(y[j]>-2e9){\n\t\t\t\t\tw=lower_bound(Up,Up+h[n]+1,y[j])-Up-1;\n\t\t\t\t\tans=max(ans,w+j);\n\t\t\t\t}\n\t\t\t\tif(x[j]<2e9){\n\t\t\t\t\tw=lower_bound(Down,Down+h[n]+1,x[j],cmp)-Down-1;\n\t\t\t\t\tans=max(ans,w+j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int j=0;j<=h[u];++j){\n\t\t\t\tUp[j]=min(Up[j],x[j]);\n\t\t\t\tDown[j]=max(Down[j],y[j]);\n\t\t\t}\n\t\t\tw=lower_bound(Up,Up+h[n]+1,a[n])-Up;\n\t\t\tans=max(ans,w);Up[w]=a[n];\n\t\t\tw=lower_bound(Down,Down+h[n]+1,a[n],cmp)-Down;\n\t\t\tans=max(ans,w);Down[w]=a[n];\n\t\t}\n}\nint main(){\n\ts=read;\n\tfor(int i=1;i<=s;++i)a[i]=read;\n\tfor(int i=1;i<s;++i){\n\t\tint u=read,v=read;\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\n\t}dfs(1,0);\n\tint *x=New(h[1]+1),*y=New(h[1]+1);\n\tmemset(x,0x7f,h[1]+1<<2);x[0]=-x[0];\n\tmemset(y,-0x7f,h[1]+1<<2);y[0]=-y[0];\n\tdfs(1,0,x,y);\n\tcout<<ans<<endl;\n\treturn 0;\n}\t\n```\n\n\u8003\u573a\u4e0a\u6253\u7206\u4e86 :smiley:,\u5f97\u4e86$20pt$\n",
        "postTime": 1616058489,
        "uid": 108067,
        "name": "\u4e1b\u96e8",
        "ccfLevel": 0,
        "title": "CF490F Treeland Tour"
    },
    {
        "content": "## $Description$\n\n\u7ed9\u5b9a\u4e00\u68f5\u5e26\u70b9\u6743\u6811\uff0c\u6c42\u6811\u4e0a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n\n## $Solution$\n\n\u4ee5\u4e0b\u7684$lis$\u548c$lds$\u5747\u8868\u793a\u4ece\u5f53\u524d\u70b9$u$\u7684\u67d0\u4e2a\u5b50\u6811\u8282\u70b9\u6743\u503c\u4e3a\u5f00\u5934$,w_u$\u4e3a\u7ed3\u5c3e\u7684$lis$\u6216$lds,m$\u8868\u793a\u6240\u6709\u8282\u70b9\u4e2d\u6700\u5927\u7684\u6743\u503c\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u68f5\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u4e2d\u4e0b\u6807$i$\u5b58\u50a8\u4ee5$~i~$\u8fd9\u4e2a\u6570\u4e3a\u7ed3\u5c3e\u7684$lis$\u548c$~lds($\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u548c\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217$),$\u5229\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u66f4\u65b0\n\n\u90a3\u4e48\u5982\u4f55\u66f4\u65b0\u7b54\u6848\u5462$?$\n\n$1.$\u5728$dfs$\u65f6 \uff0c\u5047\u8bbe\u5f53\u524d$dfs$\u5230\u7684\u70b9\u662f$u,$\u5728$u$\u7684\u513f\u5b50\u4e2d\u627e\u4e24\u4e2a\u513f\u5b50$v_1,v_2$\u3002\u5728$v_1$\u7684\u7ebf\u6bb5\u6811\u4e0b\u6807$(1\\sim (w_{u}-1))$\u8303\u56f4\u5185\u627e\u6700\u957f\u7684$lis$,\u5728$v_2$\u7684\u7ebf\u6bb5\u6811\u4e0b\u6807$((w_{u}+1)\\sim m)$\u8303\u56f4\u5185\u627e\u6700\u957f\u7684$lds$,\u5c06\u4e24\u8005\u76f8\u52a0\u5e76$+1$\u66f4\u65b0\u7b54\u6848$(+1$\u662f\u4e3a\u4e86\u52a0\u4e0a\u5f53\u524d\u70b9$u),$\n\n$2.$\u5728$dfs$\u65f6\uff0c\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u6ca1\u6709\u88ab\u7b97\u5230\uff0c\u5c31\u662f\u5f53\u524d\u8282\u70b9$u$\u7684\u6743\u503c$w_{u}$\u4e0d\u5728\u7b54\u6848\u5e8f\u5217\u4e2d\uff0c\u7531$u$\u7684\u4e24\u68f5\u5b50\u6811\u4e2d\u9009\u53d6\uff0c\u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u65f6\u66f4\u65b0\u7b54\u6848\u3002\n\n## $Code$\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define inf 0x3f3f3f3f\n#define re register\n#define N 801200\nusing namespace std;\nstruct edge{\n    int to,next;\n}e[N];\ninline int read(){\n    int x=0,w=0;char ch=getchar();\n    while (!isdigit(ch))w|=ch=='-',ch=getchar();\n    while (isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n    return w?-x:x;\n}\nint n,m,w[N],a[N],tot,lc[N],rc[N],mx[2][N],ans,rt[N],head[N],cnt;\ninline void add(int u,int v){\n    e[++cnt].to=v;\n    e[cnt].next=head[u];\n    head[u]=cnt;\n}\nvoid change(int &k,int l,int r,int x,int d,int id){\n    if (!k)k=++tot;\n    if (l==r){\n        mx[id][k]=max(mx[id][k],d);\n        return;\n    }\n    int mid=(l+r)>>1;\n    if (x<=mid)change(lc[k],l,mid,x,d,id);\n    else change(rc[k],mid+1,r,x,d,id);\n    mx[id][k]=max(mx[id][lc[k]],mx[id][rc[k]]);\n}\nint query(int k,int l,int r,int x,int y,int id){\n    if (!k)return 0;\n    if (x<=l&&r<=y)\n        return mx[id][k];\n    int mid=(l+r)>>1;\n    if (x<=mid&&mid<y)return max(query(lc[k],l,mid,x,y,id),query(rc[k],mid+1,r,x,y,id));\n    if (x<=mid)return query(lc[k],l,mid,x,y,id);\n    return query(rc[k],mid+1,r,x,y,id);\n}\nint merge(int x,int y){\n    if (!x||!y)return x|y;\n    mx[0][x]=max(mx[0][x],mx[0][y]);\n    mx[1][x]=max(mx[1][x],mx[1][y]);\n    ans=max(ans,max(mx[0][lc[x]]+mx[1][rc[y]],mx[1][rc[x]]+mx[0][lc[y]]));\n    lc[x]=merge(lc[x],lc[y]);rc[x]=merge(rc[x],rc[y]);\n    return x;\n}\nvoid dfs(int u,int fa){\n    int mxlis=0,mxlds=0;\n    for (int i=head[u];i;i=e[i].next){\n        int v=e[i].to;\n        if (v==fa)continue;\n        dfs(v,u);\n        int vlis=query(rt[v],1,m,1,w[u]-1,0);\n        int vlds=query(rt[v],1,m,w[u]+1,m,1);\n        ans=max(ans,max(mxlis+vlds,vlis+mxlds)+1);\n        mxlis=max(mxlis,vlis);mxlds=max(mxlds,vlds);\n        rt[u]=merge(rt[u],rt[v]);\n    }\n    change(rt[u],1,m,w[u],mxlis+1,0);\n    change(rt[u],1,m,w[u],mxlds+1,1);\n}\nsigned main(){\n    n=read();\n    for (int i=1;i<=n;++i)a[i]=w[i]=read();\n    sort(a+1,a+1+n);m=unique(a+1,a+1+n)-a-1;\n    for (int i=1;i<=n;++i)w[i]=lower_bound(a+1,a+1+m,w[i])-a;\n    for (int i=1;i<n;++i){\n        int u=read(),v=read();\n        add(u,v);add(v,u);\n    }\n    dfs(1,0);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1564496757,
        "uid": 54260,
        "name": "tcchyc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF490F \u3010Treeland Tour\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684n\u5f88\u5c0f\uff0c\u53ea\u67096000\uff0c\u53ef\u4ee5$O(n^2logn)$\u8dd1\u8fc7\u53bb\u3002\n\n\u7136\u800c\u5176\u5b9e\u6709\u66f4\u4f18\u79c0\u7684\u7b97\u6cd5\u3002\n\n\u9996\u5148\u7528\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u7ed3\u70b9\u7684LIS\u548cLDS\u3002\n\n\u7136\u540e\u5728dfs\u8fc7\u7a0b\u4e2dMerge\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\nMerge\u7684\u8fc7\u7a0b\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u5b9e\u73b0\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c3131ms\u8dd1\u8fc7\u4e86\u8fd9\u9053\u9898\u3002\n\n\u4ee3\u7801:\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n \n#define MAXN 200010\n\nint head[MAXN],to[MAXN<<1],nxt[MAXN<<1];\nint n,id[MAXN],ls[4000000],rs[4000000],cnt,val[MAXN],ans,tot;\n \n class IO\n{\n    char buffer[10000001];char *h;int len;\n    inline char gchar(){return *h++;}\n    inline bool validdigit(char c){return c>='0' && c<='9';}\npublic:\n    inline void init(){len=fread(buffer,1,10000000,stdin);h=buffer;}\n    inline int nextint(){register int i=0;register char c;do c=gchar();while(!validdigit(c));do{i=i*10+c-48;c=gchar();}while(validdigit(c));return i;}\n}io;\n \nstruct data\n{\n    int val,id;\n    bool operator<(const data &d)const\n    {\n        return val<d.val;\n    }\n}tmp[MAXN];\n \nstruct SGT\n{\n    int maxo[4000000];\n    SGT(){cnt=0;}\n    int query(int o,int l,int r,int ql,int qr)\n    {\n        if(!o)return 0;\n        if(ql<=l && r<=qr)return maxo[o];\n        int mid=(l+r)>>1,ans=0;\n        if(ql<=mid)ans=max(ans,query(ls[o],l,mid,ql,qr));\n        if(qr>mid)ans=max(ans,query(rs[o],mid+1,r,ql,qr));\n        return ans;\n    }\n    void update(int &o,int l,int r,int p,int x)\n    {\n        if(!o)o=++cnt;maxo[o]=max(maxo[o],x);\n        if(l==r) return;\n        int mid=(l+r)>>1;\n        if(p<=mid)update(ls[o],l,mid,p,x);\n        else update(rs[o],mid+1,r,p,x);\n    }\n}LIS,LDS;\n \nvoid merge(int &a,int b)\n{\n    if(a==0||b==0)\n    {\n        a+=b;\n        return;\n    }\n    LIS.maxo[a]=max(LIS.maxo[a],LIS.maxo[b]);LDS.maxo[a]=max(LDS.maxo[a],LDS.maxo[b]);\n    ans=max(ans,max(LIS.maxo[ls[a]]+LDS.maxo[rs[b]],LIS.maxo[ls[b]]+LDS.maxo[rs[a]]));\n    merge(ls[a],ls[b]);merge(rs[a],rs[b]);\n}\n \nvoid dfs(int u,int fa)\n{\n    int maxlis=0,maxlds=0;\n    for(int i=head[u];i;i=nxt[i])\n    {\n    \tint v=to[i];\n        if(v==fa)continue;\n        dfs(v,u);\n        int vlis=LIS.query(id[v],1,MAXN,1,val[u]-1),vlds=LDS.query(id[v],1,MAXN,val[u]+1,MAXN);\n        ans=max(ans,max(vlis+maxlds+1,vlds+maxlis+1));\n        merge(id[u],id[v]);\n        maxlis=max(maxlis,vlis);\n        maxlds=max(maxlds,vlds);\n    }\n    LIS.update(id[u],1,MAXN,val[u],maxlis+1);\n    LDS.update(id[u],1,MAXN,val[u],maxlds+1);\n}\n \nint main()\n{\n    io.init();\n    n=io.nextint();\n    for(int i=1;i<=n;++i)\n    {\n    \ttmp[i].val=io.nextint();\n        tmp[i].id=i;\n    }\n    sort(tmp+1,tmp+n+1);\n    int now=0;\n    tmp[0].val=-1;\n    for(int i=1;i<=n;++i)\n    {\n        if(tmp[i].val!=tmp[i-1].val)++now;\n        val[tmp[i].id]=now;\n    }\n    for(int i=1;i<n;++i)\n    {\n        int u=io.nextint(),v=io.nextint();\n        nxt[++tot]=head[u];\n        to[tot]=v;\n        head[u]=tot;\n        nxt[++tot]=head[v];\n        to[tot]=u;\n        head[v]=tot;\n    }\n    dfs(1,0);\n    printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1545482724,
        "uid": 34886,
        "name": "ezoixx130",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF490F \u3010Treeland Tour\u3011"
    },
    {
        "content": "\u6c42\u6811\u4e0a\u7684\u6700\u957f\u4e0a\u5347**\u5b50\u5e8f\u5217**\u3002  \n\u6ce8\u610f\u662f\u5b50\u5e8f\u5217\uff0c\u4e00\u5f00\u59cb\u770b\u6210\u8fde\u7eed\u7684\u5c31\u6253\u9519\u4e86\u3002\u3002\u3002  \n\u6811\u5f62$dp$\u3002\u8bbe$f[i][j][x]$\u4e3a$i$\u7684\u5b50\u6811\u4e2d\uff0c\u4ee5\u6570$j$\u7ed3\u5c3e\u7684\uff0c\u65b9\u5411\u5411\u4e0a(1)\u6216\u5411\u4e0b(0)\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3002\u8fd9\u91cc\u662f\u6ca1\u6709\u5b58\u65b9\u5411\u53c8\u5411\u4e0a\u53c8\u5411\u4e0b\u7684\uff0c\u5373\u5e8f\u5217\u4e0a\u7684\u70b9\u6df1\u5ea6\u5355\u8c03\u3002  \n\u90a3\u4e48\u7b54\u6848\u53ef\u4ee5\u5728\u5408\u5e76\u513f\u5b50\u8282\u70b9\u7684\u65f6\u5019\u6c42\u51fa\u6765\u3002   \n$$ans=\\max{f[v][k][1]+f[u][j][0]},k<j$$\n$$\\max f[v][k][0] + f[u][j][1] ,j<k$$  \n\u8fd9\u65f6\u5019\u679a\u4e3e$u,j,k$\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n^3)$\n\u7528\u4e00\u4e2a\u524d\u7f00\u548c\u4f18\u5316\u4e00\u4e0b\u5c31\u53ef\u4ee5$O(n^2)$\u4e86    \n\n\u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\uff1a$val[i]$\u5f88\u5927\uff0c\u6240\u4ee5\u8981\u79bb\u6563\u5316\u624d\u80fd\u5b58\u3002\n\n$f[i][j][k]274M$\u521a\u597d\u4f1a\u7206\u5185\u5b58\uff0c\u6240\u4ee5\u8981\u7528$short$\uff0c\u7701\u4e86\u4e00\u534a\u5c31\u591f\u4e86\u3002   \n\n\u5176\u5b9e\u8fd9\u4e00\u9898\u8fd8\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u505a\u5230$O(nlogn)$\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n// 1 up  0 down\nint n;\nconst int N = 6002;\nshort f[N][N][2];\nint nex[N*2],head[N],to[N*2],b[N];\nshort premaxx[N],sufmaxx[N];\nint ans;\nint cnt,val[N],tot;\nvoid add(int x,int y)\n{\n\tnex[++cnt] = head[x];\n\thead[x] = cnt;\n\tto[cnt] = y;\n}\nvoid dfs(int u,int pre)\n{\n\tf[u][val[u]][0] = f[u][val[u]][1] = 1;\n\tfor(int i=head[u];i;i=nex[i])\n\t{\n\t\tint v = to[i];\n\t\tif(v==pre) continue;\t\t\n\t\tdfs(v,u);\n\t\tpremaxx[0] = 0;\n\t\tsufmaxx[tot+1] = 0;\n\t\tregister int j;\n\t\tfor(j=1;j<=tot;j++)\n\t\t  premaxx[j] = max(premaxx[j-1],f[u][j][1]);\n\t\tfor(j=tot;j>=1;j--)\n\t\t  sufmaxx[j] = max(sufmaxx[j+1],f[u][j][0]);\n\t\tfor(j=1;j<=tot;j++)\n\t\t\tans = max(ans,sufmaxx[j+1]+f[v][j][1]);\n\t\tfor(j=1;j<=tot;j++)\n\t\t\tans = max(ans,premaxx[j-1]+f[v][j][0]);\n\t\tfor(j=1;j<=tot;j++)\n\t\t{\n\t\t\tf[u][j][1] = max(f[u][j][1],f[v][j][1]);\n\t\t\tif(j<val[u])  f[u][val[u]][1] = max(f[u][val[u]][1],(short)(f[v][j][1] + 1));\n\t\t\tf[u][j][0] = max(f[u][j][0],f[v][j][0]);\n\t\t\tif(j>val[u])  f[u][val[u]][0] = max(f[u][val[u]][0],(short)(f[v][j][0] + 1));\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t  scanf(\"%d\",&val[i]),b[i] = val[i];\n\tsort(b+1,b+n+1);\n\ttot = unique(b+1,b+n+1)-b-1;\n\tfor(int i=1;i<=n;i++)\n\t  for(int j=0;j<=tot;j++)\n\t    f[i][j][0] = f[i][j][1] = -1e4;\n\tfor(int i=1;i<=n;i++)\n\t  val[i] = lower_bound(b+1,b+tot+1,val[i])-b;\n\tint x,y;\n\tfor(int i=1;i<n;i++)\n\t  scanf(\"%d%d\",&x,&y),add(x,y),add(y,x);\n\tdfs(1,0);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```  ",
        "postTime": 1598493168,
        "uid": 13197,
        "name": "zhendelan",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF490F \u3010Treeland Tour\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u6709\u4e00\u79cd\u5176\u4ed6\u505a\u6cd5\n\n\u8bb0 $f_{i,j}=$ \u5176\u5b50\u6811\u5ef6\u4f38\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 (Longest increasing subsequence) \u5230 $i$ \u7ed3\u675f\uff0c\u6700\u5927\u7684\u4e00\u4e2a\u6570\u5b57\u662f $j$\n\n\u8bb0 $g_{i,j}=$ \u5176\u5b50\u6811\u5ef6\u4f38\u7684\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217 (Longest descending subsequence) \u5230 $i$ \u7ed3\u675f\uff0c\u6700\u5c0f\u7684\u4e00\u4e2a\u6570\u5b57\u662f $j$\n\n\u6700\u540e\u7684\u7b54\u6848\u4e00\u5b9a\u662f $1$ \u6761\u5b50\u5e8f\u5217\u6216\u8005 $2$ \u6761\u4ea4\u4e8e $1$ \u70b9\u7684\u5b50\u5e8f\u5217\u62fc\u5728\u4e00\u8d77\n\n\u6211\u4eec\u505a\u7c7b\u4f3c\u6811\u5f62 dp \u53ef\u4ee5\u6c42\u51fa\u5e76\u4e14\u6bcf\u6b21\u7edf\u8ba1\u7b54\u6848\n\n\u8fd9\u6837\u662f $O(nk)$ \u7684\uff0c\u5176\u4e2d $k=\\max\\limits_{i=1}^n r_i$\n\n\u6211\u4eec\u8003\u8651\u5c06 $r$ \u79bb\u6563\u5316\uff0c\u4f7f\u5f97 $k\\le n$\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e86\n\n\u4e0d\u8fc7\u8fd8\u6709\u4e00\u4e2a\u5185\u5b58\u95ee\u9898\n\n\u53d1\u73b0\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u7684 dp \u503c\u6570\u636e\u6570\u91cf\u662f $n\\times\\max\\limits_{i=1}^n d_i,d_i$ \u662f $i$ \u70b9\u6df1\u5ea6\uff0c\u4e0d\u9700\u8981\u7684 dp \u503c\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\n\n\u6240\u4ee5\u6211\u4eec\u968f\u673a\u94a6\u5b9a\u4e00\u4e2a\u70b9\u4e3a\u6839\uff0c\u8fd9\u6837\u6700\u574f(\u4e00\u6761\u94fe)\u671f\u671b\u6811\u6df1\u5ea6\u662f $\\frac34n$ ,\u53ef\u4ee5\u780d\u6389 $\\frac14$ \u7684\u5185\u5b58\n\n\u7136\u540e\u591a\u63d0\u4ea4\u51e0\u53d1\u5c31\u8fc7\u4e86\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<bitset>\n#include<cstdlib>\n#include<ctime> \nstd::queue<int> q; \nstd::vector<int> a[6005];\nstd::vector<int> g;\nstd::bitset<1000005> f;\nint n,p[6005];\nshort int dp1[6005][6005],dp2[6005][6005],ans=0,now=0;\nvoid add(int x,int y){a[x].push_back(y);a[y].push_back(x);}\nint make(){if (q.empty()) q.push(++now);int x=q.front();q.pop();return x;}\nvoid clear(int x){q.push(x);}\nvoid dfs(int v,int fa)\n{\n\tfor (int i=0;i<a[v].size();i++)\n    {\n    \tint u=a[v][i];\n    \tif (u==fa) continue;\n    \tg[u]=make();\n    \tdfs(u,v);\n\t}\n\tfor (int j=0;j<=n;j++) dp1[g[v]][j]=dp2[g[v]][j]=0;\n\tdp1[g[v]][p[v]]=dp2[g[v]][p[v]]=1;\n\tshort s1[6005],s2[6005];\n\tfor (int i=0;i<a[v].size();i++)\n\t{\n\t\tint u=a[v][i];\n\t\tif (u==fa) continue;\n\t\tfor (int x=0;x<=n;x++) s1[i]=s2[i]=0;\n\t\ts1[0]=0;for (int x=1;x<=n;x++) s1[x]=std::max(s1[x-1],dp1[g[v]][x]);\n\t\ts2[n]=0;for (int x=n-1;x>=0;x--) s2[x]=std::max(s2[x+1],dp2[g[v]][x]);\n\t\t//calcualte point i's up value&down value\n\t\tfor (int x=0;x<=n;x++) ans=(short int)std::max((int)ans,s1[x]+(x<n?dp2[g[u]][x+1]:0));\n\t\tfor (int x=n;x>=0;x--) ans=(short int)std::max((int)ans,s2[x]+(x>0?dp1[g[u]][x-1]:0));\n\t\t//calcualte point i's contribution\n\t\tfor (int x=0;x<=n;x++) dp1[g[v]][x]=std::max(dp1[g[v]][x],dp1[g[u]][x]);\n\t\tfor (int x=0;x<=n;x++) dp2[g[v]][x]=std::max(dp2[g[v]][x],dp2[g[u]][x]);\n\t\t//write point i's value(without i)\n\t\tfor (int x=0;x<p[v];x++) dp1[g[v]][p[v]]=(short int)std::max((int)dp1[g[v]][p[v]],dp1[g[u]][x]+1);\n\t\tfor (int x=n;x>p[v];x--) dp2[g[v]][p[v]]=(short int)std::max((int)dp2[g[v]][p[v]],dp2[g[u]][x]+1);\n\t\tclear(g[u]);\n\t\t//write point i's value(within i)\n    }\n\tfor (int x=0;x<=n;x++) ans=std::max(ans,dp1[g[v]][x]);\n\tfor (int x=0;x<=n;x++) ans=std::max(ans,dp2[g[v]][x]);\n}\nint main()\n{\n\tsrand(time(0));\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++) scanf(\"%d\",&p[i]);\n\tfor (int i=1;i<=n;i++) f[p[i]]=1;\n\tfor (int i=0;i<=1000001;i++) g.push_back(0);\n\tfor (int i=1;i<=1000000;i++) g[i]=g[i-1]+f[i];\n\tfor (int i=1;i<=n;i++) p[i]=g[p[i]];\n\tg.clear();\n\tfor (int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t}\n\tint rt=rand()%n+1;\n\tg[rt]=make();\n\tdfs(rt,-1);\n\tclear(g[rt]);\n\tprintf(\"%hd\\n\",ans);\n\treturn 0;\n}\n//lmytsdy\n```",
        "postTime": 1597906700,
        "uid": 36957,
        "name": "RainFestival",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF490F \u3010Treeland Tour\u3011"
    }
]