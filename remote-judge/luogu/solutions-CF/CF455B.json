[
    {
        "content": "### \u597d\u5fc3\u673a\u7684\u4e00\u9053\u9898\u554a\uff01\n\nWA\u4e86\u4e24\u904d\u4e4b\u540e\u624d\u7a81\u7136\u660e\u767d\uff1a\u8fd9\u4e24\u4e2a\u4eba\u662f\u53ef\u4ee5\u6545\u610f\u8f93\u7684\uff01\n\n\u5982\u679c\u8fd9\u68f5Trie\u6811\u7684\u6839\u8282\u70b9\u6709\u5fc5\u80dc\u7b56\u7565\uff0c\u90a3\u4e48\u4e3a\u4e86\u8ba9\u81ea\u5df1\u83b7\u5f97\u6700\u540e\u4e00\u5c40\u7684\u80dc\u5229\uff0c\u6211\u4eec\u5c31\u8981\u5728\u5012\u6570\u7b2c\u4e8c\u5c40\u4e2d\u6545\u610f\u8f93\u3002\n\n\u5982\u679c**\u6839\u8282\u70b9\u5728\u6709\u5fc5\u80dc\u7b56\u7565\u7684\u540c\u65f6\u8fd8\u6709\u5fc5\u8d25\u7b56\u7565**\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u83b7\u5f97\u5012\u6570\u7b2c\u4e8c\u5c40\u7684\u5148\u624b\uff0c\u5c31\u53ef\u4ee5\u8ba9\u81ea\u5df1\u83b7\u5f97\u6700\u540e\u4e00\u5c40\u7684\u5148\u624b\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c**\u7b2c\u4e00\u5c40\u7684\u5148\u624b\u53ef\u4ee5\u83b7\u5f97\u6700\u540e\u4e00\u5c40\u7684\u80dc\u5229**\uff0c\u5176\u5fc5\u80dc\u7b56\u7565\u4e3a\uff1a\u4e00\u76f4\u4f7f\u7528\u5fc5\u8d25\u7b56\u7565\uff0c\u76f4\u5230\u6700\u540e\u4e00\u5c40\u65f6\u91c7\u53d6\u5fc5\u80dc\u7b56\u7565\u3002\n\n\u800c**\u5982\u679c\u6839\u8282\u70b9\u53ea\u6709\u5fc5\u80dc\u7b56\u7565\uff0c\u6ca1\u6709\u5fc5\u8d25\u7b56\u7565**\uff0c\u90a3\u4e48\u5148\u624b\u5c31\u4f1a\u5728\u4e24\u4e2a\u4eba\u4e4b\u4e2d\u4ea4\u6362\u3002\u56e0\u6b64\uff0c**\u5982\u679c\u603b\u5c40\u6570k\u4e3a\u5947\u6570\uff0c\u5148\u624b\u80dc\u5229\uff0c\u5426\u5219\u540e\u624b\u80dc\u5229**\uff0c\u5fc5\u80dc\u7b56\u7565\u4e3a\uff1a\u4f7f\u7528\u5fc5\u80dc\u7b56\u7565\u3002\n\n\u5982\u679c**\u6839\u8282\u70b9\u53ea\u6709\u5fc5\u8d25\u7b56\u7565\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u540e\u624b\u80dc\u5229**\uff0c\u56e0\u4e3a\u540e\u624b\u5728\u6bcf\u4e00\u5c40\u4e2d\u90fd\u662f\u80dc\u8005\u3002\n\n\u56e0\u6b64\u6211\u4eec\u4e0d\u4ec5\u8981\u50cf\u4e00\u822c\u7684DAG\u4e0a\u7684\u535a\u5f08\u8bba\u4e00\u6837\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u662f\u5426\u6709\u5fc5\u80dc\u7b56\u7565\uff0c\u8fd8\u8981\u6c42\u51fa\u662f\u5426\u6709\u5fc5\u8d25\u7b56\u7565\uff0c\u6700\u540e\u4f9d\u636e\u6839\u8282\u70b9\u662f\u5426\u6709\u5fc5\u80dc\u7b56\u7565\u3001\u5fc5\u8d25\u7b56\u7565\uff0c\u4ee5\u53ca\u5c40\u6570\u7684\u5947\u5076\u6765\u5224\u65ad\u80dc\u8d1f\u3002\n\n```\n#include<cstdio>\n#include<iostream>\n\nusing namespace std;\n\n//trie\u6811\nstruct Node\n{\n\tint ch[26];\n\tint isStr;\n\tbool haveSon;\n}trie[100005];\nint size;\n\nstring str;\n\nvoid insert()\n{\n\tcin>>str;\n\tint len=str.length();\n\tint now=0;\n\tfor(int i=0;i<len;++i)\n\t{\n\t\ttrie[now].haveSon=1;\n\t\tif(!trie[now].ch[str[i]-'a'])\n\t\t{\n\t\t\ttrie[now].ch[str[i]-'a']=++size;\n\t\t\tnow=size;\n\t\t}\n\t\telse\n\t\t\tnow=trie[now].ch[str[i]-'a'];\n\t}\n\t++trie[now].isStr;\n}\n\nbool win[100005];\nbool lose[100005];\n\n//\u6c42\u51fa\u5404\u8282\u70b9\u662f\u5426\u6709\u5fc5\u80dc\u7b56\u7565\nint dfs1(int root)\n{\n\t//\u53f6\u5b50\u8282\u70b9\u5fc5\u8d25\uff0c\u9012\u5f52\u7ec8\u6b62\n\tif(!trie[root].haveSon)\n\t\treturn win[root]=0;\n\telse for(int i=0;i<26;++i)\n\t{\n\t\t//\u6709\u4e00\u4e2a\u540e\u7ee7\u8282\u70b9\u662f\u5fc5\u8d25\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u5fc5\u80dc\u7684\n        if(trie[root].ch[i]&&!dfs1(trie[root].ch[i]))\n\t\t\treturn win[root]=1;\n\t}\n\treturn win[root]=0;\n}\n\n//\u6c42\u51fa\u5404\u8282\u70b9\u662f\u5426\u6709\u5fc5\u8d25\u7b56\u7565\nint dfs2(int root)\n{\n\t//\u53f6\u5b50\u8282\u70b9\u4ec5\u6709\u5fc5\u8d25\u7b56\u7565\uff0c\u9012\u5f52\u7ec8\u6b62\n\tif(!trie[root].haveSon)\n\t\treturn lose[root]=1;\n\telse for(int i=0;i<26;++i)\n\t{\n\t\t//\u6709\u4e00\u4e2a\u540e\u7ee7\u8282\u70b9\u6ca1\u6709\u5fc5\u8d25\u7b56\u7565\uff0c\u90a3\u4e48\u5f53\u524d\u8282\u70b9\u5c31\u662f\u5fc5\u8d25\u7684\n        if(trie[root].ch[i]&&!dfs2(trie[root].ch[i]))\n\t\t\treturn lose[root]=1;\n\t}\n\treturn lose[root]=0;\n}\n\nint main()\n{\n\tint n,k;\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=0;i<n;++i)\n\t\tinsert();\n\tdfs1(0);\n\tdfs2(0);\n\tif(win[0]) \n\t{\n\t\tif(lose[0])\n\t\t{\n\t\t\t\tprintf(\"First\"); \n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(k&1)\n\t\t\tprintf(\"First\");\n\t\t\telse\n\t\t\tprintf(\"Second\");\n\t\t}\n\t}\n\telse\n\t{\n\t\tprintf(\"Second\");\n\t}\n}\n```",
        "postTime": 1519438093,
        "uid": 53374,
        "name": "SuperJvRuo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF455B \u3010A Lot of Games\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2atrie\u4e0a\u7684\u535a\u5f08\u8bba  \n\u75284\u4e2a\u4e8c\u8fdb\u5236\u6570\u6765\u8868\u793a\u5f53\u524d\u8282\u70b9\u5148\u624b\u7684\u60c5\u51b5  \n00\u8868\u793a\u65e0\u6cd5\u51b3\u5b9a\u80dc\u8d1f  \n01\u8868\u793a\u5fc5\u80dc  \n10\u8868\u793a\u5fc5\u8d25  \n11\u8868\u793a\u53ef\u4ee5\u51b3\u5b9a\u80dc\u8d1f  \n\u8f6c\u79fb\u65f6\u5148\u5c06\u8282\u70b9\u6216\u6240\u6709\u5b50\u8282\u70b9\u518d\u5f02\u62163\u5c31\u53ef\u4ee5\u4e86  \n\u56e0\u4e3a\u6700\u540e\u591a\u5f02\u6216\u4e86\u4e00\u6b21\u6240\u4ee5\u6700\u540e\u6839\u8282\u70b9\u4e3a1\u7684\u5f02\u6216\u540c\u65f6k\u4e3a\u5947\u6570\u5c31\u5148\u624b\u80fd\u8d62\uff0c\u6839\u8282\u70b9\u4e3a3\u7684\u5f02\u6216\u65f6\u5148\u624b\u5fc5\u80dc\n\n```cpp\n#include <cstdio>\n#include <cstring>\n\nconst int maxi = 1e5 + 7;\n\nint sz;\nint t[maxi][26];\nint n, k;\nchar str[maxi];\n\nint dfs(int tmp)\n{\n    int ans = 0;\n    int leaf = true; //\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u4e0d\u662f\u5355\u8bcd\u7ed3\u5c3e\uff0c\u662f\u7684\u8bdd\u5fc5\u80dc\n    for (int i = 0; i < 26; ++i)\n        if (t[tmp][i])\n        {\n            leaf = false;\n            ans |= dfs(t[tmp][i]);\n        }\n    ans ^= 3;\n    if (leaf)\n        ans = 1;\n    return ans;\n}\n\nint main()\n{\n    scanf(\"%d %d\", &n, &k);\n    int now;\n    for (int i = 0; i < n; ++i)\n    {\n        scanf(\"%s\", str);\n        now = 0;\n        for (int j = 0; j < strlen(str); ++j)\n        {\n            if (! t[now][str[j] - 'a'])\n                t[now][str[j] - 'a'] = ++sz;\n            now = t[now][str[j] - 'a'];\n        }\n    }\n    int ans = dfs(0);\n    if ((! ans) || ((k & 1) && (ans == 2))) //\u56e0\u4e3a\u6700\u540e\u8f6c\u79fb\u5230\u6839\u8282\u70b9\u65f6\u591a\u53d6\u4e86\u4e00\u6b21\u5f02\u6216\u6240\u4ee5\u4e5f\u8981\u75283\u6216\u80051\u7684\u5f02\u6216\u503c\u6765\u5224\u65ad\n        printf(\"First\\n\");\n    else\n        printf(\"Second\\n\");\n    return 0;\n}\n\n```",
        "postTime": 1534957392,
        "uid": 31321,
        "name": "ironmt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF455B \u3010A Lot of Games\u3011"
    },
    {
        "content": "## \u9898\u89e3\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u5c31\u662f\u5728trie\u6811\u4e0a\u535a\u5f08\uff0c\u5148\u628atrie\u6811\u5efa\u51fa\u6765\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u5b83\u6765\u5224\u65ad\u5148\u624b\u5fc5\u80dc\u8fd8\u662f\u5fc5\u8d25\uff1a\u53ea\u8981\u8fd9\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u5168\u90fd\u662f\u5148\u624b\u5fc5\u8d25\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u5148\u624b\u5fc5\u80dc\uff0c\u53f6\u5b50\u8282\u70b9\u4e3a\u5148\u624b\u5fc5\u8d25\u3002\n\n\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u53d1\u73b0\u8fd9\u6837\u8fd8\u662f\u6709\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u662f\u6709\u591a\u8f6e\u7684\uff0c\u73b0\u5728\u8f93\u4e86\u4e0d\u4ee3\u8868\u6700\u7ec8\u4f1a\u8f93\uff0c\u53ef\u80fd\u8fd8\u6709\u8981\u8ba9\u81ea\u5df1\u6545\u610f\u5931\u8d25\u6765\u638c\u63a7\u4e3b\u52a8\u6743\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u6c42\u51fa\u5148\u624b\u80fd\u4e0d\u80fd\u8ba9\u81ea\u5df1\u6545\u610f\u5931\u8d25\uff08\u5728\u540e\u624b\u5e72\u6270\u4e0b\uff09\uff0c\u548c\u6c42\u5fc5\u80dc\u5dee\u4e0d\u591a\uff0c\u53f6\u5b50\u8282\u70b9\u8bbe\u4e3a\u53ef\u4ee5\u6545\u610f\u5931\u8d25\u3002\n\n\u6700\u540e\u8003\u8651\u5148\u624b\u5728\u4ec0\u4e48\u6761\u4ef6\u4e0b\u53ef\u4ee5\u4fdd\u8bc1\u6700\u540e\u80dc\u5229\u3002\u7531\u4e8e\u6bcf\u4e00\u5c40\u7684\u521d\u59cb\u6761\u4ef6\u53ea\u6709\u5148\u540e\u624b\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u6700\u540e\u4e00\u5c40\u6700\u5f00\u59cb\u7684\u5148\u624b\u600e\u6837\u4fdd\u8bc1\u80dc\u5229\u3002\n\n\u9996\u5148\u5982\u679c\u6bcf\u5c40\u53ef\u4ee5\u5148\u624b\u5fc5\u80dc\uff0c\u90a3\u4e48\u540e\u624b\u80af\u5b9a\u4f1a\u5e72\u6270\u5148\u624b\u83b7\u5f97\u6700\u540e\u4e00\u5c40\u7684\u5148\u624b\uff0c\u90a3\u4e48\u6b64\u65f6\u540e\u624b\u4f1a\u5728\u7b2c\u4e8c\u5c40\u5f00\u59cb\u5c1d\u8bd5\u6545\u610f\u5931\u8d25\u4fdd\u6301\u4e3b\u52a8\u6743\uff0c\u6700\u540e\u83b7\u5f97\u5148\u673a\uff0c\u4f46\u662f\u5148\u624b\u5982\u679c\u60f3\u5360\u636e\u5148\u673a\u4e5f\u9700\u8981\u8fd9\u6837\uff0c\u6240\u4ee5\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u5982\u679c\u4e00\u5c40\u5148\u624b\u53ef\u4ee5\u51b3\u5b9a\u81ea\u5df1\u7684\u80dc\u8d25\uff0c\u90a3\u4e48\u6700\u540e\u5148\u624b\u80dc\u5229\u3002\n\n\u5982\u679c\u5148\u624b\u53ea\u80fd\u4fdd\u8bc1\u81ea\u5df1\u80dc\u5229\uff0c\u90a3\u4e48\u5982\u679c\u5c40\u6570\u4e3a\u5947\u6570\u5148\u624b\u80dc\u5229\uff0c\u5426\u5219\u540e\u624b\u80dc\u5229\u3002\u56e0\u4e3a\u5f7c\u6b64\u4f5c\u4e3a\u540e\u624b\u662f\u90fd\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u83b7\u5f97\u4e0b\u4e00\u5c40\u4e3b\u52a8\u6743\uff0c\u6240\u4ee5\u7531\u5c40\u6570\u51b3\u5b9a\u3002\n\n\u5982\u679c\u5148\u624b\u53ea\u80fd\u51b3\u5b9a\u5931\u8d25\uff0c\u540e\u624b\u80dc\u5229\u3002\u56e0\u4e3a\u540e\u624b\u53ef\u4ee5\u8ba9\u5b83\u4e00\u76f4\u5931\u8d25\uff0c\u76f4\u5230\u7ed3\u675f\u3002\n\n\u5982\u679c\u5148\u624b\u65e0\u6cd5\u4fdd\u8bc1\u81ea\u5df1\u80dc\u5229\u8fd8\u662f\u5931\u8d25\uff0c\u90a3\u4e48\u540e\u624b\u4e00\u5b9a\u80dc\u5229\u3002\u56e0\u4e3a\u5b83\u5b8c\u5168\u638c\u63e1\u751f\u6740\u5927\u6743\uff0c\u4e00\u76f4\u4fdd\u6301\u4e3b\u52a8\u3002\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+5;\nint n,k,cnt,son[N][26];\nbool f[N][2];\nvoid add(string s)\n{\n\tint now=0;\n\tfor(int i=0;i<(int)s.size();i++)\n\t{\n\t\tint x=s[i]-'a';\n\t\tif(!son[now][x]) son[now][x]=++cnt;\n\t\tnow=son[now][x];\n\t}\n}\nvoid dfs(int x)\n{\n\tf[x][0]=0;f[x][1]=0;\n\tint s=0;\n\tfor(int i=0;i<26;i++)\n\t{\n\t\tif(!son[x][i]) continue;\n\t\tdfs(son[x][i]);s++;\n\t\tif(f[son[x][i]][1]==0) f[x][1]=1;\n\t\tif(f[son[x][i]][0]==0) f[x][0]=1;\n\t}\n\tif(!s) f[x][0]=1;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tstring s;cin>>s;\n\t\tadd(s);\n\t}\n\tdfs(0);\n\tif(f[0][1] && (f[0][0] || k&1)) cout<<\"First\"<<endl;\n\telse cout<<\"Second\"<<endl;\n\treturn 0;\n}\n\n```\n",
        "postTime": 1668772417,
        "uid": 300710,
        "name": "xuyuansu",
        "ccfLevel": 0,
        "title": "CF455B A Lot of Games"
    },
    {
        "content": "## CF455B\n\n[$\\tt Link$](/problem/CF455B)\n\n$\\tt^\\ast1900$\uff1f\n\n---\n\n\u6211\u4eec\u8003\u8651\u5efa\u7acb $n$ \u4e2a\u5b57\u7b26\u4e32\u7684 $\\tt Trie$ \u6811\u3002  \n\u7136\u540e\u628a $\\tt Trie$ \u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u89c6\u4e3a\u535a\u5f08\u65f6\u7684\u4e00\u4e2a\u72b6\u6001\u3002  \n\u8003\u8651\u4f7f\u7528\u9012\u63a8\u8ba1\u7b97\u4e00\u4e2a\u72b6\u6001\u7684\u5148\u624b\u6709\u6ca1\u6709\u5fc5\u80dc\u7b56\u7565\u3002  \n\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u591f\u3002  \n\u56e0\u4e3a\u5982\u679c\u5c40\u6570 $\\ge2$ \u5e76\u4e14\u5148\u624b\u5fc5\u80dc\uff0c  \n\u8fd9\u65f6\u5012\u6570\u7b2c\u4e8c\u5c40\u7684\u5148\u624b\u53ef\u4ee5\u9009\u62e9\u628a\u80dc\u5229\u8ba9\u7ed9\u5bf9\u624b\u3002  \n\u7136\u540e\u4e0b\u4e00\u5c40\u81ea\u5df1\u5f00\u5c40\uff0c\u53d6\u5f97\u80dc\u5229\u3002  \n\u6240\u4ee5\u8fd8\u8981\u9012\u63a8\u8ba1\u7b97\u4e00\u4e2a\u72b6\u6001\u7684\u5148\u624b\u6709\u6ca1\u6709\u5fc5\u8d25\u7b56\u7565\u3002\n\n---\n\n\u7136\u540e\u8ba8\u8bba\u5fc5\u80dc/\u5fc5\u8d25\u7684\u9012\u63a8\u8ba1\u7b97\u3002  \n\u8fd9\u91cc\u9ed8\u8ba4\u4e00\u4e2a $\\tt Trie$ \u8282\u70b9\u6307 **\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u524d\u7f00\u5df2\u7ecf\u88ab\u653e\u5b8c\u4e86\uff0c\u73b0\u5728\u7684\u5148\u624b\u9700\u8981\u5f00\u59cb\u653e\u4e0b\u4e00\u4e2a\u5b57\u7b26**\u3002  \n\u5fc5\u80dc\u7b56\u7565\u5c31\u662f\uff1a\u53f6\u5b50\u8282\u70b9\u65e0\uff0c\u5176\u4f59\u8282\u70b9\u5982\u679c\u6709\u513f\u5b50\u4e0d\u5b58\u5728\u5148\u624b\u5fc5\u80dc\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5fc5\u80dc\u3002  \n\u5fc5\u8d25\u7b56\u7565\u5c31\u662f\uff1a\u53f6\u5b50\u8282\u70b9\u6709\uff0c\u5176\u4f59\u8282\u70b9\u5982\u679c\u6709\u513f\u5b50\u4e0d\u5b58\u5728\u5148\u624b\u5fc5\u8d25\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5fc5\u8d25\u3002\n\n---\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nconst int N = 1e5 + 5;\n\nint c[N][26],tot = 0,n,k,p[N];\nstring s;\n\nbool dfs1(int u){\n\tbool sta = false,son = false;\n\tfor(int i = 0;i < 26;++i) if(c[u][i])\n\t\tson = true,sta |= !dfs1(c[u][i]);\n\treturn son ? sta : false;\n}\n\nbool dfs2(int u){\n\tbool sta = false,son = false;\n\tfor(int i = 0;i < 26;++i) if(c[u][i])\n\t\tson = true,sta |= !dfs2(c[u][i]);\n\treturn son ? sta : true;\n}\n\nint main(){\n\tcin >> n >> k;\n\tfor(int i = 1;i <= n;++i){\n\t\tcin >> s;\n\t\tint p = 0;\n\t\tfor(char d : s){\n\t\t\tint &x = c[p][d - 'a'];\n\t\t\tp = x ? x : (x = ++tot);\n\t\t}\n\t}\n\tbool f = dfs1(0),g = dfs2(0);\n\tstring s[2] = {\"First\",\"Second\"};\n\tcout << s[f ? g ? 0 : !(k & 1) : 1] << endl;\n\treturn 0;\n}\n```",
        "postTime": 1662122586,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "CF455B Trie+\u535a\u5f08\u8bba"
    },
    {
        "content": "$~~~~$ ~~\u6211\u597d\u4e0d\u5bb9\u6613\u4f1a\u5224\u4e00\u6b21\u5148\u624b\u5fc5\u80dc\uff0c\u4f60\u5374\u8ba9\u6211\u8f93\u5f97\u90a3\u4e48\u5f7b\u5e95\uff0c\u712f~~\n\n#### \u9898\u610f\n\n> $~~~~$ \u7ed9\u51fa\u4e00\u9897$n$ \u4e2a\u7ed3\u70b9\u7684 Trie \u6811\uff0c\u6bcf\u8f6e\u6e38\u620f\u4e24\u540d\u73a9\u5bb6\u8f6e\u6d41\u79fb\u52a8\u5f53\u524d\u7ed3\u70b9\u5230\u5176\u67d0\u4e2a\u5b50\u7ed3\u70b9\uff0c\u4e0d\u80fd\u79fb\u52a8\u8005\u8f93\u3002\u73b0\u8fdb\u884c $k$ \u8f6e\u6e38\u620f\uff0c\u4ece\u7b2c\u4e8c\u8f6e\u6e38\u620f\u53ca\u4ee5\u540e\u90fd\u7531\u4e0a\u8f6e\u6e38\u620f\u8d25\u8005\u5148\u624b\uff0c\u4ee5\u6700\u540e\u4e00\u8f6e\u6e38\u620f\u7684\u7ed3\u679c\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\uff0c\u6c42\u7b2c\u4e00\u8f6e\u7684\u5148\u624b\u662f\u5426\u5fc5\u80dc\u3002\n>\n> $~~~~$ $1\\leq n\\leq 10^5,1\\leq k\\leq 10^9$ \u3002\n\n#### \u9898\u89e3\n\n$~~~~$ \u4ee5\u4e0b\u7684\u5148\u624b\u548c\u540e\u624b\u65e2\u53ef\u80fd\u6307**\u8be5\u8f6e\u6e38\u620f**\u7684\u5148\u540e\u624b\uff0c\u4e5f\u6709\u53ef\u80fd\u6307**\u6574\u4e2a\u6e38\u620f**\u7684\u5148\u540e\u624b\uff0c\u8bf7\u6839\u636e\u8bed\u5883\u533a\u5206\u3002\n\n$~~~~$ \u5148\u8003\u8651 $k=1$ \u7684\u65f6\u5019\u80fd\u4e0d\u80fd\u5224\uff0c\u90a3\u4e48\u7531\u535a\u5f08\u57fa\u672c\u5e38\u8bc6\uff1a**\u80fd\u4e00\u6b65\u79fb\u52a8\u5230\u5fc5\u8d25\u6001\u4e3a\u5fc5\u80dc\u6001\uff0c\u53ea\u80fd\u4e00\u6b65\u79fb\u52a8\u5230\u5fc5\u80dc\u6001\u4e3a\u5fc5\u8d25\u6001** \uff0c\u5c06\u6240\u6709\u53f6\u5b50\u7ed3\u70b9\u7f6e\u4e3a\u5fc5\u8d25\uff0c\u7136\u540e\u5f80\u4e0a\u63a8\u5c31\u53ef\u4ee5\u786e\u5b9a\u67d0\u8f6e\u6e38\u620f\u5148\u624b\u662f\u5426\u5fc5\u80dc\u3002\n\n$~~~~$ \u7136\u800c\u5f53 $k>1$ \u65f6\u4e8b\u60c5\u4f3c\u4e4e\u4e0d\u5999\uff0c\u6bd4\u5982 $k=2$ \u4e14\u5148\u624b\u662f\u6709\u5fc5\u80dc\u7b56\u7565\u7684\uff0c\u5373\u4f7f\u5982\u6b64\u7b2c\u4e00\u8f6e\u7684\u5148\u624b\u4e5f\u4e00\u5b9a\u4e0d\u60f3\u5728\u7b2c\u4e00\u8f6e\u8d62\uff0c\u5426\u5219\u7b2c\u4e8c\u8f6e\u7684\u5148\u624b\u5c31\u662f\u5bf9\u65b9\uff0c\u7136\u800c\u5bf9\u65b9\u6b64\u65f6\u6709\u5fc5\u80dc\u7b56\u7565\uff0c\u4ece\u800c\u4ed6\u8f93\u6389\u4e86\u6574\u4e2a\u6e38\u620f\u3002\n\n$~~~~$ \u8fd9\u5c31\u542f\u793a\u6211\u4eec\u9664\u4e86\u5224\u65ad\u662f\u5426\u6709\u5fc5\u80dc\u7b56\u7565\u5916\u8fd8\u5e94\u5224\u65ad\u6709\u65e0**\u5fc5\u8d25\u7b56\u7565**\uff0c\u5177\u4f53\u7684\u5224\u6cd5\u53ea\u8981\u628a\u201c\u5931\u8d25\u201d\u770b\u4f5c\u80dc\u5229\uff0c\u4e5f\u5373\u628a\u53f6\u5b50\u7ed3\u70b9\u7f6e\u4e3a\u5fc5\u80dc\u6001\u540e\u5f80\u4e0a\u63a8\u3002\n\n$~~~~$ \u90a3\u4e48\u6700\u540e\u6574\u68f5\u6811\u5176\u5b9e\u5c31\u53ea\u4f1a\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n- \u5148\u624b**\u6709**\u5fc5\u80dc\u7b56\u7565 **\u6709**\u5fc5\u8d25\u7b56\u7565\uff1a\u90a3\u4e48\u5148\u624b\u53ea\u9700\u8981\u5728\u524d $k-1$ \u56de\u6545\u610f\u8f93\u6389\uff0c\u6700\u540e\u4e00\u56de\u5408\u8d62\u5373\u53ef\u83b7\u80dc\u3002\n- \u5148\u624b**\u6709**\u5fc5\u80dc\u7b56\u7565 **\u65e0**\u5fc5\u8d25\u7b56\u7565\uff1a\u90a3\u6bcf\u56de\u5408\u7684\u5148\u624b\u53ea\u80fd\u8d62\uff0c\u56e0\u6b64\u56de\u5408\u7684\u5148\u540e\u624b\u5c31\u4f1a\u5728\u4e24\u4eba\u4e2d\u95f4\u8f6e\u6d41\u4ea4\u6362\uff0c\u90a3\u4e48\u5f53 $k$ \u4e3a\u5947\u6570\u65f6\u5168\u5c40\u5148\u624b\u5fc5\u80dc\uff0c\u5426\u5219\u5168\u5c40\u5148\u624b\u5fc5\u8d25\u3002\n- \u5148\u624b**\u65e0**\u5fc5\u80dc\u7b56\u7565\uff0c**\u6709**\u5fc5\u8d25\u7b56\u7565\uff1a\u90a3\u6bcf\u56de\u5408\u7684\u5148\u624b\u53ea\u80fd\u8f93\uff0c\u7136\u540e\u4e0b\u56de\u5408\u7684\u5148\u624b\u4f9d\u7136\u662f\u4ed6\uff0c\u6240\u4ee5\u5148\u624b\u5c31~~\u8f93\u9ebb\u4e86~~\u4ece\u5934\u5230\u5c3e\u90fd\u5728\u8f93\uff0c\u4e5f\u5c31\u81ea\u7136\u5168\u5c40\u5fc5\u8d25\u3002\n- \u5148\u624b**\u65e0**\u5fc5\u80dc\u7b56\u7565\uff0c**\u65e0**\u5fc5\u8d25\u7b56\u7565\uff1a\u90a3\u5f80\u4e0b\u63a8\u4e00\u5c42\uff0c\u540e\u624b\u6709\u5fc5\u80dc\u7b56\u7565\u4e5f\u6709\u5fc5\u8d25\u7b56\u7565\uff0c\u90a3\u8fd9\u4e0d\u5c31\u76f8\u5f53\u4e8e\u662f\u540e\u624b\u5f97\u5230\u4e86\u7b2c\u4e00\u79cd\u60c5\u51b5\u5417\uff1f\u6240\u4ee5\u8fd9\u4e2a\u65f6\u5019\u5148\u624b\u4f9d\u7136\u5fc5\u8d25\u3002\n\n$~~~~$ \u7efc\u4e0a\uff0c\u53ea\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u6574\u68f5\u6811\u7684\u60c5\u51b5\uff0c\u7136\u540e\u518d\u5206\u8ba8\u4e00\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\u6574\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u4e86\u3002\n\n#### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nint CanWin,CanLose;\nstruct Trie{\n\tint tot,ch[500005][26],f[500005],Child[500005];\n\tvoid Insert(char S[])\n\t{\n\t\tint len=strlen(S+1),now=1;\n\t\tfor(int i=1;i<=len;i++)\n\t\t{\n\t\t\tif(!ch[now][S[i]-'a']) ch[now][S[i]-'a']=++tot,Child[now]++;\n\t\t\tnow=ch[now][S[i]-'a'];\n\t\t}\n\t}\n\tvoid Dfs1(int u)\n\t{\n\t\tf[u]=-1; \n\t\tfor(int i=0;i<26;i++)\n\t\t{\n\t\t\tif(!ch[u][i]) continue;\n\t\t\tif(ch[u][i]) Dfs1(ch[u][i]);\n\t\t\tif(f[ch[u][i]]==-1) f[u]=1;\n\t\t}\n\t\tif(u==1&&f[u]==1) CanWin=true;\n\t}\n\tvoid Dfs2(int u)\n\t{\n\t\tf[u]=-1;\n\t\tif(!Child[u]) f[u]=1;\n\t\tfor(int i=0;i<26;i++)\n\t\t{\n\t\t\tif(!ch[u][i]) continue;\n\t\t\tif(ch[u][i]) Dfs2(ch[u][i]);\n\t\t\tif(f[ch[u][i]]==-1) f[u]=1;\n\t\t}\n\t\tif(u==1&&f[u]==1) CanLose=true;\n\t}\n}Trie;\nchar S[100005];\nint main() {\n\tint n,k;\n\tscanf(\"%d %d\",&n,&k);\n\tTrie.tot=1;\n\tfor(int i=1;i<=n;i++) scanf(\"%s\",S+1),Trie.Insert(S);\n\tTrie.Dfs1(1); Trie.Dfs2(1);\n\tif(CanWin&&CanLose) puts(\"First\");\n\tif(CanWin&&!CanLose)\n\t{\n\t\tif(k&1) puts(\"First\");\n\t\telse puts(\"Second\");\n\t}\n\tif(!CanWin&&CanLose) puts(\"Second\");\n\tif(!CanWin&&!CanLose) puts(\"Second\");\n\treturn 0;\n}\n```",
        "postTime": 1642230324,
        "uid": 160701,
        "name": "Azaz\u0435l",
        "ccfLevel": 0,
        "title": "A Lot of Games"
    },
    {
        "content": "## 1. \u9898\u610f\n\n\u4e24\u4eba\u4ea4\u66ff\u5728\u5f00\u59cb\u4e3a\u7a7a\u5b57\u7b26\u4e32\u7684\u540e\u9762\u52a0\u5165\u5b57\u7b26\uff0c\u8981\u6c42\u5fc5\u987b\u968f\u65f6\u4e3a\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u96c6\u7684\u67d0\u4e00\u4e2a\u4e32\u7684\u524d\u7f00\u3002\u5c06\u4f1a\u8fdb\u884c $k$ \u6b21\u6e38\u620f\uff0c\u4e0a\u4e00\u5c40\u8f93\u7684\u4eba\u4f5c\u4e3a\u4e0b\u4e00\u5c40\u7684\u5148\u624b\uff0c\u6700\u540e\u4e00\u5c40\u80dc\u5229\u7684\u4eba\u83b7\u5f97\u6700\u7ec8\u7684\u80dc\u5229\u3002\u5728\u8db3\u591f\u806a\u660e\u7684\u60c5\u51b5\u4e0b\uff0c\u95ee\u7b2c\u4e00\u5c40\u7684\u5148\u624b\u662f\u5426\u4f1a\u8d62\u3002\n\n\u5b57\u7b26\u4e32\u7684\u603b\u4e2a\u6570 $\\leq10^5$\uff0c\u5b57\u7b26\u4e32\u7684\u603b\u5b57\u7b26\u6570 $\\leq10^5$\uff0c$k\\leq10^9$\u3002\n\n## 2. \u601d\u8def\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5728 Trie \u4e0a\u8d70\uff0c\u4e0d\u80fd\u8d70\u8005\u8f93\u7684\u60c5\u51b5\u3002\n\n\u8003\u8651 $k=1$ \u7684\u60c5\u51b5\uff1a\u8fd9\u4e0d\u5c31\u662f\u4e00\u4e2a SG \u51fd\u6570\u7684\u5e94\u7528\u5417\uff1f\n\n\u904d\u5386\u4e00\u904d Trie\uff0c\u53f6\u8282\u70b9\u4e3a\u5148\u624b\u5fc5\u8d25\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u67d0\u4e2a\u513f\u5b50\u662f\u5148\u624b\u5fc5\u8d25\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u5148\u624b\u5fc5\u80dc\uff0c\u5426\u5219\u5148\u624b\u5fc5\u8d25\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u5199\u51fa\u4ee3\u7801\uff1a\n\n```cpp\nvoid get_trie(int u)\n{\n\tbool has_son = 0;\n\tfor (int i = 0; i < 26; ++ i)\n\t\tif (son[u][i]) has_son = 1, get_trie(son[u][i]);\n\tif (!has_son){\n\t\tsg[u] = 0;\n\t\treturn;\n\t}\n\tfor (int i = 0; i < 26; ++ i)\n\t\tif (son[u][i] && !sg[son[u][i]])\n\t\t{\n\t\t\tsg[u] = true;\n\t\t\treturn;\n\t\t}\n\tsg[u] = false;\n\treturn;\n}\n```\n\n\u63a5\u7740\uff0c\u6211\u4eec\u8003\u8651 $k=2$ \u7684\u60c5\u51b5\u3002\n\n\u5982\u679c\u5148\u624b $k=1$ \u662f\u4e00\u5b9a\u4f1a\u80dc\u800c\u4e0d\u53ef\u80fd\u8f93\u7684\uff08\u6ce8\u610f\uff0c\u8fd9\u91cc\u6307\u5373\u4f7f\u5148\u624b\u60f3\u8f93\u4e5f\u4e0d\u53ef\u80fd\uff09\uff0c\u90a3\u4e48\uff0c\u5148\u624b\u4e00\u5b9a\u4f1a\u5728\u524d\u4e00\u5c40\u7684\u65f6\u5019\u5c3d\u4e00\u5207\u53ef\u80fd\u53bb\u8f93\uff08\u611f\u89c9\u6709\u70b9\u4e0d\u5408\u5e38\u7406\uff09\uff0c\u8fd9\u6837\u4ed6\u5c31\u4f1a\u83b7\u5f97\u4e0b\u4e00\u5c40\u7684\u5148\u624b\uff0c\u800c\u83b7\u5f97\u6700\u540e\u7684\u80dc\u5229\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5728 $k>1$ \u7684\u65f6\u5019\uff0c\u4e0d\u4ec5\u8981\u8003\u8651\u5148\u624b\u80fd\u5426\u53ef\u4ee5\u80dc\u5229\uff0c\u8fd8\u8981\u8003\u8651\u5148\u624b\u80fd\u5426\u5931\u8d25\u3002\n\n\u600e\u6837\u8ba1\u7b97\u5148\u624b\u80fd\u5426\u5931\u8d25\u5462\uff1f\u6211\u4eec\u5c06\u524d\u9762\u53f6\u8282\u70b9\u7684\u65f6\u5019\u8bbe\u4e3a\u5fc5\u80dc\uff08\u662f\u6307\u4e00\u5b9a\u53ef\u4ee5\u8f93\u6389\u6e38\u620f\uff0c\u4e0d\u662f\u539f\u6765\u7684\u6e38\u620f\u7684\u5fc5\u80dc\uff09\uff0c\u90a3\u4e48\u5982\u679c\u6700\u540e\u6839\u8282\u70b9\u662f\u5fc5\u80dc\u7684\u8bdd\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u53ef\u4ee5\u5728\u8d70\u5230\u53f6\u8282\u70b9\u4e3a\u5fc5\u80dc\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u8f93\u6389\u3002\n\n\u63a5\u7740\uff0c\u6211\u4eec\u53d1\u73b0\u5148\u624b\u6709\u56db\u79cd\u60c5\u51b5\u4e86\uff1a\u53ef\u80dc\u53ef\u8d25\uff0c\u53ea\u80fd\u80dc\uff0c\u53ea\u80fd\u8d25\uff0c\u4e0d\u80fd\u80dc\u4e5f\u4e0d\u80fd\u8d25\uff08\u7531\u540e\u624b\u63a7\u5236\u529b\uff09\u3002\n\n1. \u53ef\u80dc\u53ef\u8d25\uff1a\u53d1\u73b0\u5148\u624b\u53ef\u4ee5\u64cd\u63a7\u7b54\u6848\u7684\u8d70\u5411\uff0c\u4e00\u5b9a\u662f\u53ef\u4ee5\u8d62\u7684\u3002\n\n2. \u53ea\u80fd\u80dc\uff1a\u6700\u5f00\u59cb\u7684\u5148\u624b\u548c\u540e\u624b\u4f1a\u4ea4\u66ff\u5148\u8d70\uff0c\u6240\u4ee5\u73b0\u5728\u8981\u770b $k$ \u7684\u5947\u5076\uff0c\u5947\u5c31\u662f\u5148\u624b\u80dc\uff0c\u5076\u5c31\u662f\u540e\u8005\u80dc\u3002\n3. \u53ea\u80fd\u8d25\uff1a\u5148\u624b\u6bcf\u6b21\u90fd\u4f1a\u8d25\uff0c\u4e5f\u56e0\u4e3a\u6bcf\u6b21\u90fd\u8d25\uff0c\u6bcf\u6b21\u90fd\u662f\u5148\u624b\uff0c\u6240\u4ee5\u6700\u540e\u5148\u624b\u8d25\u3002\n4. \u4e0d\u80fd\u80dc\u4e5f\u4e0d\u80fd\u8d25\uff1a\u540e\u624b\u64cd\u63a7\u7b54\u6848\u7684\u8d70\u5411\uff0c\u6240\u4ee5\u4e00\u5b9a\u662f\u8f93\u7684\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u4e86\u6700\u540e\u7684\u5224\u65ad\u4ee3\u7801\uff1a\n\n```cpp\nif ((able_win && able_lose)) puts(\"First\");\nelse if (able_win) puts(k & 1 ? \"First\" : \"Second\");\nelse if (able_lose) puts(\"Second\");\nelse puts(\"Second\");\n```\n\n## 3. Code\n\n\u524d\u9762\u57fa\u672c\u5df2\u7ecf\u5c55\u793a\u4e86\uff0c\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u5b8c\u6574\u4ee3\u7801\u3002\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nconst int N = 1e5 + 10;\nint son[N][26], rt = 1, tot = 1;\nint id[N], n, k, flag, sg[N], able_lose, able_win;\nchar str[N];\n\nvoid insert(int i, char *s)\n{\n\tint u = rt;\n\tfor (int i = 1; s[i]; ++ i)\n\t{\n\t\tif (!son[u][s[i] - 'a']) son[u][s[i] - 'a'] = ++ tot;\n\t\tu = son[u][s[i] - 'a'];\n\t}\n\tid[i] = u;\n}\n\nvoid get_trie(int u)\n{\n\tbool has_son = 0;\n\tfor (int i = 0; i < 26; ++ i)\n\t\tif (son[u][i]) has_son = 1, get_trie(son[u][i]);\n\tif (!has_son){\n\t\tsg[u] = flag;\n\t\treturn;\n\t}\n\tfor (int i = 0; i < 26; ++ i)\n\t\tif (son[u][i] && !sg[son[u][i]])\n\t\t{\n\t\t\tsg[u] = true;\n\t\t\treturn;\n\t\t}\n\tsg[u] = false;\n\treturn;\n}\n\nint main()\n{\n\tcin >> n >> k;\n\tfor (int i = 1; i <= n; ++ i)\n\t{\n\t\tscanf(\"%s\", str + 1);\n\t\tinsert(i, str);\n\t}\n\tflag = 1, get_trie(1);//flag \u662f\u6307\u53f6\u8282\u70b9\u662f\u80dc\u8fd8\u662f\u8d25\n\table_lose = sg[1];\n\tflag = 0, get_trie(1);\n\table_win = sg[1];\n\tif ((able_win && able_lose)) puts(\"First\");\n\telse if (able_win) puts(k & 1 ? \"First\" : \"Second\");\n\telse if (able_lose) puts(\"Second\");\n\telse puts(\"Second\");\n\treturn 0;\n}\n```",
        "postTime": 1637148383,
        "uid": 342891,
        "name": "mydcwfy",
        "ccfLevel": 9,
        "title": "CF455B \u9898\u89e3"
    },
    {
        "content": "\u5148\u5efa\u7acb\u5b57\u5178\u6811\n\n\u7136\u540e\u8003\u8651\u4e09\u79cd\u60c5\u51b5\uff1a\n\n$1.$\u540e\u624b\u80fd\u5fc5\u80dc\uff0c\u90a3\u4e48\u540e\u624b\u5982\u679c\u4e00\u76f4\u8d62\u5c31\u8d62\u4e86\u3002\n\n$2.$\u5148\u624b\u80fd\u5fc5\u80dc\uff0c\u4e14\u53ef\u4ee5\u5fc5\u8f93\uff0c\u90a3\u4e48\u5148\u624b\u5982\u679c\u4e00\u76f4\u8f93\u5230\u6700\u540e\u4e00\u6b21\u8d62\u5c31\u53ef\u4ee5\u4e86\u3002\n\n$3.$\u5148\u624b\u5fc5\u80dc\u4f46\u4e0d\u80fd\u4fdd\u8bc1\u5fc5\u8f93\uff0c\u90a3\u4e48\u6bcf\u6b21\u90fd\u8d62\u7136\u540e\u4ea4\u6362\u4f4d\u7f6e\u3002$k$\u4e3a\u5947\u6570\u65f6\u5148\u624b\u8d62\uff0c\u53cd\u4e4b\u540e\u624b\u8d62\u3002\n\n\n\n```\n//#pragma GCC optimize(2)\n//#pragma GCC optimize(\"Ofast\",\"-funroll-loops\",\"-fdelete-null-pointer-checks\")\n//#pragma GCC target(\"ssse3\",\"sse3\",\"sse2\",\"sse\",\"avx2\",\"avx\")\n#include<bits/stdc++.h>\n#define int long long\n#define pb push_back\n#define Max(a,b) (a>b)? a : b\nusing namespace std;\n\ninline char gc(){\n    static char In[MAXN],*at=In,*en=In;\n    return at==en&&(en=(at=In)+fread(In,1,MAXN,stdin)),at==en?EOF:*at++;\n}\ntemplate<class tp>\nvoid read(tp &x){\n    x=0;\n    char c=gc();\n    bool sgn=0;\n    while((c<'0'||c>'9')&&c!='-')c=gc();\n    if(c=='-')sgn=1,c=gc();\n    while(c>='0'&&c<='9')x=(x<<3)+(x<<1)+(c^'0'),c=gc();\n    if(sgn)x=-x;\n}\nchar _In[MAXN],*_at=_In;\ninline void flush(){fwrite(_In,1,_at-_In,stdout),_at=_In;}\nstruct _init{~_init(){flush();}}__init;\ninline void pc(char c){if(_at==_In+MAXN)flush();*_at++=c;}\ntemplate<class tp>\nvoid write(tp x){\n    if(!x){pc('0');return;}\n    static char buf[43],*at;\n    at=buf;\n    if(x<0)pc('-'),x=-x;\n    while(x)*at++=x%10+'0',x/=10;\n    do pc(*--at); while(at!=buf);\n}\n/*\nint read()\n{\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n\twhile(isdigit(c)){x=(x<<3)+(x<<1)+(c^48);c=getchar();}\n\treturn x*f;\n}\n*/\nconst int N=2e5+10;\nint ch[N][26];\nint sz;\nint n,k;\nvoid insert(char *s)//\u5efa\u7acb\u5b57\u5178\u6811\n{\n    int p=0;\n    for(;*s;s++)\n    {\n        int id=*s-'a';\n        if(!ch[p][id])\n        {\n            ch[p][id]=++sz;\n        }\n        p=ch[p][id];\n    }\n}\nint dfs1(int u)//\u6c42\u5230\u53f6\u5b50\u8282\u70b9\u662f\u5426\u80fd\u4fdd\u8bc1\u540e\u624b\u5fc5\u80dc\n{\n    for(int i=0;i<26;i++)\n    {\n        if(ch[u][i]&&dfs1(ch[u][i])==0)\n        {\n            return 1;\n        }\n    }\n    return 0;\n}\nint dfs2(int u)//\u6c42\u5148\u624b\u662f\u5426\u80fd\u5fc5\u8f93\n{\n    int have_son=0;\n    for(int i=0;i<26;i++)\n    {\n        if(ch[u][i])\n        {\n            have_son=1;\n            if(dfs2(ch[u][i])==0)  return 1;\n        }\n    }\n    if(have_son==0) return 1;\n    return 0;\n}\nsigned main()\n{\n    read(n),read(k);\n    for(int i=1;i<=n;i++)\n    {\n        char s[N];\n        scanf(\"%s\",s);\n        insert(s);\n    }\n    int ok1=dfs1(0),ok2=dfs2(0);\n    if(!ok1)\n    {\n        puts(\"Second\");\n    }\n    else if(ok1+ok2==2)\n    {\n        puts(\"First\");\n    }\n    else\n    {\n        if(k&1) puts(\"First\");\n        else puts(\"Second\");\n    }\n}\n```\n",
        "postTime": 1602217891,
        "uid": 115779,
        "name": "\u6781\u5bd2\u795e\u51b0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF455B \u3010A Lot of Games\u3011"
    }
]