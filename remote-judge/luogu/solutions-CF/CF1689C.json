[
    {
        "content": "\u8fd9\u662f\u4e2a\u52a8\u6001\u89c4\u5212\u554a\u2026\u2026\n\n\u8fd8\u662f\u4e00\u4e2a\u6bd4\u8f83\u57fa\u7840\u7684\u6811\u5f62\u52a8\u89c4\u3002\n\n\u5f53\u7136\u8d5b\u65f6\u6211\u5dee\u70b9\u5199\u4e86\u4e00\u4e2a\u6811\u94fe\u5256\u5206\uff0c\u7136\u540e\u7a81\u7136\u53d1\u73b0\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\u2026\u2026\n\n\u53ef\u60dc\u540c\u673a\u623f\u7684 @artalter \u5927\u4f6c\u548c @Sakura_Lu \u5927\u4f6c\u6ca1\u6709\u6ce8\u610f\u60e8\u906d\u7206\u96f6\u3002\n\n\u8a00\u5f52\u6b63\u4f20\uff0c\u6211\u4eec\u5f53\u7136\u60f3\u5c3d\u53ef\u80fd\u591a\u7684\u4fdd\u7559\u8282\u70b9\uff0c\u800c\u4e14\u6bcf\u4e00\u6b21\u80af\u5b9a\u662f\u5220\u9664\u88ab\u75c5\u6bd2\u611f\u67d3\u7684\u8282\u70b9\u7684\u67d0\u4e2a\u5b50\u8282\u70b9\u3002\n\n\u800c\u5220\u9664\u4e4b\u540e\u6211\u4eec\u7684\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5b83\u7684\u53e6\u4e00\u4e2a\u513f\u5b50\uff08\u6ce8\u610f\u4e3a**\u4e8c\u53c9\u6811**\uff09\u7684\u6839\u88ab\u611f\u67d3\u75c5\u6bd2\u80fd\u4fdd\u7559\u591a\u5c11\u8282\u70b9\u7684\u5b50\u95ee\u9898\uff0c\n\n\u90a3\u4e48\u5f88\u660e\u663e\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u52a8\u89c4\u3002\n\n\u5b83\u7684\u72b6\u6001\u4e5f\u5f88\u7b80\u5355\uff1a$dp[i]$ \u8868\u793a\u5728\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u82e5 $i$ \u88ab\u611f\u67d3\u75c5\u6bd2\uff0c\u6700\u591a\u80fd\u4fdd\u7559\u591a\u5c11\u8282\u70b9\u3002\n\n\u90a3\u4e48\u8003\u8651\u5982\u4f55\u8f6c\u79fb\uff0c\u5f88\u660e\u663e\u6211\u4eec\u8003\u8651\u5220\u6389 $i$ \u7684\u54ea\u4e00\u4e2a\u5b50\u8282\u70b9\u5373\u53ef\u3002\n\n\u6211\u4eec\u5c31\u9996\u5148\u6765\u5206\u522b\u8003\u8651\u7a76\u7adf\u5220\u9664\u54ea\u4e00\u4e2a\u5b50\u8282\u70b9\u3002\n\n\u5047\u8bbe\u5220\u9664 $lson$\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u5728 $lson$ \u7684\u5b50\u6811\u91cc\u6211\u4eec\u53ef\u4ee5\u4fdd\u7559\u4e0b $size[lson]-1$ \u4e2a\u8282\u70b9\uff0c$size[i]$ \u4ee3\u8868\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\uff08\u5305\u542b\u8282\u70b9 $i$\uff09\uff0c\n\n\u800c\u5728 $rson$ \u7684\u5b50\u6811\u91cc\uff0c\u6211\u4eec\u4f9d\u65e7\u53ef\u4ee5\u4fdd\u7559\u4e0b $dp[rson]$ \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u662f\uff1a\n\n$dp[i]=\\operatorname{max}(dp[lson]+size[rson]-1,dp[rson]+size[lson]-1)$\n\n\u9700\u8981\u6ce8\u610f\u53ef\u80fd\u5b50\u6811\u4e3a\u7a7a\uff0c\u90a3\u4e48 $size[son]-1$ \u5c31\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5bf9 $0$ \u53d6 $\\operatorname{max}$\u3002\n\n\u4e3a\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u8981\u5148\u8fdb\u884c dfs \u518d\u66f4\u65b0 $size$ \u548c $dp$ \u6570\u7ec4\u3002\n\n\u4ee5\u53ca\u591a\u7ec4\u6570\u636e\u6240\u4ee5\u6bcf\u6b21\u9700\u8981\u5c06\u5404\u79cd\u6570\u7ec4\u6e05\u96f6\uff0c\u6e05\u96f6 $head$ \u6570\u7ec4\u4e5f\u76f8\u5f53\u4e8e\u6e05\u96f6\u8fb9\uff0c\u5c0f\u5c0f\u5730\u5361\u4e00\u70b9\u5e38\u6570\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<iostream>\n#include<algorithm>\n#define int long long\n#define WR WinterRain\nusing namespace std;\nconst int WR=1001000,mod=1e9+7;\nstruct Edge{\n    int pre,to;\n}edge[WR];\nint t;\nint n,sze[WR];\nint head[WR],tot;\nint dp[WR];\nint read(){\n    int s=0,w=1;\n    char ch=getchar();\n    while(ch>'9'||ch<'0'){\n        if(ch=='-') w=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        s=(s<<3)+(s<<1)+ch-48;\n        ch=getchar();\n    }\n    return s*w;\n}\nvoid add(int u,int v){\n    edge[++tot].pre=head[u];\n    edge[tot].to=v;\n    head[u]=tot;\n}\nvoid dfs(int u,int root){\n    sze[u]=1,dp[u]=0;//dp\u6570\u7ec4\u5b58\u50a8\u5982\u679c\u6211\u88ab\u611f\u67d3\u4e86\u80fd\u6d3b\u591a\u5c11\u4e2a\n    int sum=0;\n    for(int i=head[u];i;i=edge[i].pre){\n        int v=edge[i].to;\n        if(v!=root){\n            dfs(v,u);\n            sum+=dp[v];\n            sze[u]+=sze[v];\n        }\n    }\n    for(int i=head[u];i;i=edge[i].pre){\n        int v=edge[i].to;\n        if(v!=root){\n            dp[u]=max(dp[u],sum-dp[v]+sze[v]-1);\n        }\n    }\n}\nsigned main(){\n    t=read();\n    while(t--){\n        n=read();\n        tot=0;\n        for(int i=1;i<=n;i++) head[i]=0;\n        for(int i=1;i<n;i++){\n            int u=read(),v=read();\n            add(u,v);\n            add(v,u);\n        }\n        dfs(1,0);\n        printf(\"%lld\\n\",dp[1]);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1655285927,
        "uid": 130125,
        "name": "\u51ac\u5929\u7684\u96e8",
        "ccfLevel": 0,
        "title": "CF1689C Infected Tree \u9898\u89e3"
    },
    {
        "content": "# CF1689C Infected Tree \u9898\u89e3\n## 1.\u505a\u6cd5\n\u9996\u5148\uff0c\u8fd9\u662f\u4e00\u9897\u4e8c\u53c9\u6811\u3002\n\n\u7136\u800c\uff0c\uff08\u53ef\u80fd\u697c\u4e0a\u51ac\u5929\u7684\u96e8\u5148\u751f\u8bf4\u4e86\uff09\uff0c\u6211\u6ca1\u6709\u6ce8\u610f\u5230\uff0c\u8bd5\u56fe\u5bfb\u627e\u4e00\u4e2a\u9002\u7528\u4e8e\u591a\u53c9\u6811\u7684\u505a\u6cd5\uff0c\u60e8\u906d\u7206\u96f6\u3002\n\n\u6211\u7684\u505a\u6cd5\u6781\u5176\u7b80\u5355\uff1a\n\n\u6211\u4eec\u5f3a\u5236\u5728\u80fd\u5220\u9664\u7684\u65f6\u5019\u4e00\u5b9a\u5220\u9664\uff0c\u90a3\u4e48\u5728\u6700\u4f18\u89e3\u4e2d\u75c5\u6bd2\u80fd\u611f\u67d3\u7684\u8282\u70b9\u4e00\u5b9a\u6784\u6210\u4e86\u4e00\u6761\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u7684\u94fe\uff0c\u5e76\u4e14\u8fd9\u6761\u94fe\u7684\u672b\u7aef\u662f\u53f6\u5b50\u8282\u70b9\u6216\u662f\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u4ed6\u7684\u552f\u4e00\u4e00\u4e2a\u5b69\u5b50\u5835\u4f4f\uff09\u7684\u8282\u70b9\u3002\n\n\u5982\u679c\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u88ab\u5220\u9664\u7684\u8282\u70b9\u6570\u4e3a\u8fd9\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6 $s1=dep-1$\u3002\n\n\u5982\u679c\u662f\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u8282\u70b9\uff0c\u88ab\u5220\u9664\u7684\u8282\u70b9\u6570\u4e3a $s1=dep$\u3002\n\n\u75c5\u6bd2\u80fd\u611f\u67d3\u7684\u8282\u70b9\u6570\u4e3a $s2=dep$\u3002\n\n\u6211\u4eec\u8981\u627e\u7684\u5c31\u662f $n-(s1+s2)$ \u7684\u6700\u5927\u503c\u3002\n\n## 2.\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 300005;\nstruct edge\n{\n\tint v,nxt;\n}e[maxn*2];\nint head[maxn],cnt,ans,dep;\nint n;\nvoid add(int u,int v)\n{\n\tcnt++;\n\te[cnt]=edge{v,head[u]};\n\thead[u]=cnt;\n}\nvoid dfs1(int u,int fa,int d)\n{\n\tint x=0;\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==fa)continue;\n\t\tdfs1(v,u,d+1);\n\t\tx++;\n\t}\n\tif(x==1)\n\t{\n\t\tans=max(ans,n-2*d);\n\t}else if(x==0)\n\t{\n\t\tans=max(ans,n-2*d+1);\n\t}\n}\nint main()\n{\n\tint T;\n\tcin>>T;\n\twhile(T-->0)\n\t{\n\t\tscanf(\"%d\",&n);\n\t\tfor(int i=1;i<=n-1;i++)\n\t\t{\n\t\t\tint u,v;\n\t\t\tscanf(\"%d%d\",&u,&v);\n\t\t\tadd(u,v);\n\t\t\tadd(v,u);\n\t\t}\n\t\tdfs1(1,0,1);\n\t\tprintf(\"%d\\n\",ans);\n\t\tmemset(head,0,sizeof(head));\n\t\tmemset(e,0,sizeof(e));\n\t\tcnt=ans=dep=0;\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1655290747,
        "uid": 352352,
        "name": "artalter",
        "ccfLevel": 6,
        "title": "CF1689C Infected Tree"
    },
    {
        "content": "## [\u539f\u9898](http://codeforces.com/problemset/problem/1689/C)\n\n### \u5927\u610f\n\n\u6709\u4e00\u68f5\u4ee5 $1$ \u4e3a\u6839\u3001\u6709 $n$ \u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811\u3002\u6811\u6839\u73b0\u5728\u906d\u53d7\u4e86\u611f\u67d3\uff0c\u5728\u4e4b\u540e\u7684\u6bcf\u4e00\u79d2\u949f\uff0c\u4f60\u80fd\u591f\u53bb\u9664\u6811\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u4e4b\u540e\u611f\u67d3\u7684\u8282\u70b9\u5411\u672a\u611f\u67d3\u7684\u76f8\u90bb\u8282\u70b9\u4f20\u67d3\u3002\u6c42\u80fd\u591f\u4fdd\u4f4f\u7684\u8282\u70b9\u6570\u7684\u6700\u5927\u503c\uff08\u663e\u7136\u53bb\u9664\u7684\u8282\u70b9\u4e0d\u7b97\u4fdd\u4f4f\uff09\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/p7eusdve.png)\n\n### \u601d\u8def\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jh1ay3ce.png)\n\n\u5982\u56fe\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u88ab\u611f\u67d3\u65f6\uff0c\u6211\u4eec\u82e5\u60f3\u53bb\u9664\u5176\u67d0\u68f5\u5b50\u6811\u91cc\u7684\u70b9\u65f6\uff0c\u4e00\u5b9a\u662f\u53bb\u9664\u4e0e\u5176\u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u66f4\u4f18\u3002\u56e0\u4e3a\u53bb\u9664\u53d1\u751f\u5728\u611f\u67d3\u4e4b\u524d\uff0c\u82e5\u53bb\u9664\u4e0d\u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u4f1a\u8ba9\u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u88ab\u611f\u67d3\uff0c\u591a\u635f\u5931\u4e86\u4e00\u4e2a\u70b9\u3002\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u8003\u8651\u5230\u4f7f\u7528\u6811\u5f62 DP \u6c42\u89e3\u3002\u4ee4 $f_i$ \u4e3a $i$ \u88ab\u611f\u67d3\u65f6\uff0c\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6700\u591a\u80fd\u591f\u4fdd\u4f4f\u591a\u5c11\u4e2a\u70b9\u3002\u7b54\u6848\u5c31\u662f $f_1$\u3002\n\n\u63a5\u4e0b\u6765\u662f\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\u56e0\u4e3a\u662f\u4e8c\u53c9\u6811\uff0c\u90a3\u4e48\u4e00\u4e2a\u70b9\u88ab\u611f\u67d3\u540e\uff0c\u63a5\u4e0b\u6765\u53bb\u9664\u7684\u70b9\u4e00\u5b9a\u662f\u5176\u5de6\u53f3\u513f\u5b50 $son_l$ \u548c $son_r$ \u4e4b\u4e00\u3002\u5f53\u53bb\u9664\u4e00\u4e2a\u513f\u5b50\u4e4b\u540e\uff0c\u4ee5\u8be5\u513f\u5b50\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u70b9\uff08\u9664\u4e86\u53bb\u9664\u7684\u513f\u5b50\uff09\u5168\u90e8\u5b58\u6d3b\uff0c\u53e6\u4e00\u4e2a\u513f\u5b50\u63a5\u4e0b\u6765\u88ab\u611f\u67d3\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u88ab\u611f\u67d3\u7684\u513f\u5b50\u7684\u90a3\u68f5\u5b50\u6811\u80fd\u591f\u5b58\u6d3b\u591a\u5c11\uff0c\u6210\u4e86\u539f\u95ee\u9898\u7684\u5b50\u95ee\u9898\u3002\u90a3\u4e48\uff0c\u5c31\u80fd\u5f97\u5230\uff1a$f_i = \\max(f_{son[l]} + size_{son[r]} - 1 , f_{son[r]} + size_{son[l]} - 1)$\uff0c\u5176\u4e2d $size$ \u5b58\u5b50\u6811\u5927\u5c0f\uff0c\u8981\u51cf $1$ \u662f\u56e0\u4e3a\u6211\u4eec\u53bb\u9664\u7684\u90a3\u4e2a\u70b9\u4e0d\u7b97\u5b58\u6d3b\u3002\n\n**\u6570\u7ec4\u8981\u5f00\u591f\uff01**\n\n### \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define maxn 300005\nusing namespace std;\nint T,n,u,v; int f[maxn],size[maxn]; struct node{int to,nex;}a[maxn*2]; int head[maxn],tot=0;\nvoid add(int from,int to){a[++tot].to=to;a[tot].nex=head[from];head[from]=tot;}\nvoid set(){tot=0; for(int i=1;i<=n;i++){head[i]=0;f[i]=0;size[i]=0;}}\nvoid dfs(int p,int fa){\n\tsize[p]=1; int res=0;\n\tfor(int i=head[p];i;i=a[i].nex) if(a[i].to!=fa){dfs(a[i].to,p);size[p]+=size[a[i].to];res+=f[a[i].to];}\n\t//res \u5b58\u4e24\u4e2a\u513f\u5b50\u7684 f \u503c\u4e4b\u548c,\u4ee5\u4fbf\u5feb\u901f\u6c42\u51fa\u53e6\u4e00\u4e2a\u513f\u5b50\u7684 f \u503c \n\tfor(int i=head[p];i;i=a[i].nex) if(a[i].to!=fa) f[p]=max(f[p],(res-f[a[i].to])+(size[a[i].to]-1));\n\t//\u5047\u8bbe\u8981\u53bb\u9664 a[i].to \u8fd9\u4e2a\u513f\u5b50 \n}\nint main(){\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tset(); scanf(\"%d\",&n); for(int i=1;i<n;i++){scanf(\"%d%d\",&u,&v); add(u,v); add(v,u);}\n\t\tdfs(1,0); printf(\"%d\\n\",f[1]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1656333176,
        "uid": 294382,
        "name": "qzhwlzy",
        "ccfLevel": 5,
        "title": "CF1689C Infected Tree \u9898\u89e3"
    },
    {
        "content": "# 1.0 \u89e3\u9898\u601d\u8def\n\u8fd9\u662f\u4e00\u9053\u6811\u5f62 $DP$\u3002\n\n\u6211\u4eec\u7684\u76ee\u7684\u89e3\u91ca\u5c3d\u53ef\u80fd\u591a\u7684\u4fdd\u7559\u8282\u70b9\uff0c\u6bcf\u4e00\u6b21\u5220\u9664\u88ab\u611f\u67d3\u4e86\u7684\u8282\u70b9\u7684\u67d0\u4e00\u4e2a\u513f\u5b50\u3002\u5220\u9664\u4e4b\u540e\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5b83\u4e00\u4e2a\u6ca1\u6709\u88ab\u5220\u9664\u7684\u90a3\u4e2a\u513f\u5b50\u7684\u6839\u88ab\u611f\u67d3\u75c5\u6bd2\u80fd\u4fdd\u7559\u591a\u5c11\u8282\u70b9\u7684\u5b50\u95ee\u9898\u3002\n\n### 1.1 \u72b6\u6001\n$dp(i)$ \u8868\u793a\u5728\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u82e5 $i$ \u8fd9\u4e2a\u6839\u88ab\u611f\u67d3\u75c5\u6bd2\uff0c\u6700\u591a\u80fd\u4fdd\u7559\u591a\u5c11\u8282\u70b9\u3002\n\n\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u5220\u6389 $i$ \u7684\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5047\u8bbe\u5220\u9664 $lc$\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u5728 $lc$ \u7684\u5b50\u6811\u91cc\u6211\u4eec\u53ef\u4ee5\u4fdd\u7559\u4e0b $sz(lc)-1$ \u4e2a\u8282\u70b9\u3002$sz$ \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u8282\u70b9\uff0c\u5b83\u7684\u5b50\u6811\u7684\u5927\u5c0f\uff08\u5305\u62ec\u4e86\u6839\u8282\u70b9\uff09\u3002\n\n\u800c\u5728 $rc$ \u7684\u5b50\u6811\u91cc\uff0c\u6211\u4eec\u4f9d\u65e7\u53ef\u4ee5\u4fdd\u7559\u4e0b $dp(rc)$ \u4e2a\u8282\u70b9\u3002\n\n### 1.2\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n$$dp(i)=\\max \\left (dp(lc)+sz(rc)-1,dp(rc)+sz(lc)-1\\right )$$\n\n### 1.3\u7279\u6b8a\u60c5\u51b5\n\u5f53\u5b50\u6811\u4e3a\u7a7a\uff0c\u90a3\u4e48\u4ed6\u4fdd\u7559\u7684\u8282\u70b9\u5c31\u662f\u8d1f\u6570\u3002\n\n\u4e3a\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u8981\u5148\u4f7f\u7528 $dfs$ \u518d\u66f4\u65b0 $sz$ \u548c $dp$ \u6570\u7ec4\u3002\n\n### 1.4\u5751\u70b9\n\u56e0\u4e3a\u672c\u9898\u662f\u591a\u7ec4\u6570\u636e\uff0c\u6240\u4ee5\u6bcf\u6b21\u9700\u8981\u5c06\u5404\u79cd\u6570\u7ec4\u6e05\u96f6\u3002\n\n# 2.0 AC \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nstruct node\n{\n\tint vtx,nxt;\n}e[1000005];\nint sz[1000005];\nint h[1000005],idx;\nint dp[1000005];\nvoid add(int u,int v)\n{\n\te[idx].vtx=v;\n\te[idx].nxt=h[u];\n\th[u]=idx++;\n}\nvoid dfs(int u,int rt)\n{\n\tsz[u]=1;\n\tdp[u]=0;\n\tint sum=0;\n\tfor(int i=h[u];~i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].vtx;\n\t\tif(v!=rt)\n\t\t{\n\t\t\tdfs(v,u);\n\t\t\tsum+=dp[v];\n\t\t\tsz[u]+=sz[v];\n\t\t}\n\t}\n\tfor(int i=h[u];~i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].vtx;\n\t\tif(v!=rt)\n\t\t\tdp[u]=max(dp[u],sum-dp[v]+sz[v]-1);\n\t}\n}\nsigned main()\n{\n\tint T;\n\tcin>>T;\n\twhile(T--)\n\t{\n\t\tmemset(h,-1,sizeof h);\n\t\tint n;\n\t\tcin>>n;\n\t\tidx=1;\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tint u,v;\n\t\t\tcin>>u>>v;\n\t\t\tadd(u,v);\n\t\t\tadd(v,u);\n\t\t}\n\t\tdfs(1,0);\n\t\tcout<<dp[1]<<endl;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1666958946,
        "uid": 529476,
        "name": "Banana_yeah",
        "ccfLevel": 0,
        "title": "CF1689C Infected Tree \u9898\u89e3"
    },
    {
        "content": "## C. Infected Tree ##\n[\u535a\u5ba2\u98df\u7528\u6548\u679c\u66f4\u4f73](https://www.cnblogs.com/linyihdfj/p/16366229.html)\n#### \u9898\u76ee\u63cf\u8ff0 ####\n[\u539f\u9898\u9762](https://codeforces.com/problemset/problem/1689/C)\n\n\u7ed9\u5b9a\u4e00\u68f5\u4ee5 $1$ \u53f7\u8282\u70b9\u4e3a\u6839\u7684\u4e8c\u53c9\u6811\uff0c\u73b0\u5728 $1$ \u53f7\u8282\u70b9\u611f\u67d3\u4e86\u75c5\u6bd2\uff0c\u75c5\u6bd2\u6bcf\u4e00\u56de\u5408\u90fd\u4f1a\u53bb\u611f\u67d3\u4e0e\u8be5\u8282\u70b9\u76f4\u63a5\u76f8\u8fde\u7684\u8282\u70b9\uff0c\u800c\u4f60\u5728\u8fd9\u4e00\u56de\u5408\u91cc\u53ef\u4ee5\u9009\u62e9\u5220\u9664\u4efb\u610f\u4e00\u4e2a\u6ca1\u6709\u88ab\u75c5\u6bd2\u611f\u67d3\u7684\u70b9\uff0c\u8fd9\u6837\u5c31\u65ad\u5f00\u4e86\u5b83\u4e0e\u5176\u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u5f97\u5173\u7cfb\uff0c\u8be2\u95ee\u6700\u591a\u53ef\u4ee5\u6709\u591a\u5c11\u4e0d\u88ab\u75c5\u6bd2\u611f\u67d3\u7684\u70b9\uff0c\u88ab\u5220\u9664\u7684\u70b9\u4e0d\u7b97\u505a\u4e0d\u88ab\u75c5\u6bd2\u611f\u67d3\u7684\u70b9\u3002\n#### \u9898\u76ee\u5206\u6790 ####\n\u6211\u4eec\u8003\u8651\u4e3a\u4e86\u5c3d\u53ef\u80fd\u591a\u7684\u4fdd\u7559\u8282\u70b9\uff0c\u6211\u4eec\u6bcf\u4e00\u6b21\u80af\u5b9a\u662f\u4f1a\u5220\u9664\u88ab\u75c5\u6bd2\u611f\u67d3\u7684\u8282\u70b9\u7684\u67d0\u4e2a\u5b50\u8282\u70b9\uff0c\u800c\u5220\u9664\u4e4b\u540e\u6211\u4eec\u7684\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5b83\u7684\u53e6\u4e00\u4e2a\u513f\u5b50\uff08\u6ce8\u610f\u4e3a\u4e8c\u53c9\u6811\uff09\u6839\u88ab\u611f\u67d3\u75c5\u6bd2\u80fd\u4fdd\u7559\u591a\u5c11\u8282\u70b9\u7684\u5b50\u95ee\u9898\uff0c\u90a3\u4e48\u8fd9\u5f88\u660e\u663e\u5c31\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b $DP$\u3002$DP$ \u72b6\u6001\u4e5f\u5f88\u7b80\u5355\uff1a$dp[i]$ \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u82e5 $i$ \u88ab\u611f\u67d3\u75c5\u6bd2\uff0c\u6700\u591a\u80fd\u4fdd\u7559\u591a\u5c11\u8282\u70b9\u3002\n\n\u90a3\u4e48\u4e0b\u9762\u5c31\u662f\u8003\u8651\u8f6c\u79fb\u4e86\uff0c\u8f6c\u79fb\u5f88\u660e\u663e\u5c31\u662f\u6211\u4eec\u8003\u8651\u5220\u9664\u54ea\u4e00\u4e2a $i$ \u7684\u5b50\u8282\u70b9\u5c31\u597d\u4e86\uff0c\u56e0\u4e3a\u662f\u4e8c\u53c9\u6811\u6240\u4ee5\u4e0d\u7528\u8003\u8651\u66f4\u591a\u7684\u60c5\u51b5\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u5206\u522b\u8003\u8651\u7a76\u7adf\u5220\u9664\u54ea\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u5047\u8bbe\u5220\u9664 $son_1$\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u5728 $son_1$ \u7684\u5b50\u6811\u91cc\u6211\u4eec\u53ef\u4ee5\u4fdd\u7559\u4e0b $size[son_1] - 1$ \u4e2a\u8282\u70b9\uff0c$size[i]$ \u4ee3\u8868\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\uff08\u5305\u542b\u8282\u70b9 $i$\uff09\uff0c\u800c\u5728 $son_2$ \u7684\u5b50\u6811\u91cc\uff0c\u6211\u4eec\u4f9d\u65e7\u53ef\u4ee5\u4fdd\u7559\u4e0b $dp[son_2]$ \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u72b6\u6001\u5c31\u662f\uff1a\n$$\ndp[i] = \\max(dp[son_1] + size[son_2] - 1,dp[son_2] + size[son_1] - 1)\n$$\n\u9700\u8981\u6ce8\u610f\u53ef\u80fd\u8be5\u5b50\u6811\u4e3a\u7a7a\uff0c\u90a3\u4e48 $size[son] - 1$ \u5c31\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5bf9 $0$ \u53d6 $\\max$\uff0c\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002\n#### \u4ee3\u7801\u8be6\u89e3 ####\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 3e5+5;\nstruct edge{\n\tint nxt,to;\n\tedge(){}\n\tedge(int _nxt,int _to){\n\t\tnxt = _nxt,to = _to;\n\t}\n}e[2 * MAXN];\nint ans = 0,cnt,head[MAXN],dp[MAXN],sz[MAXN];\n//dp[now] \u8868\u793a\u4ee5 now \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5047\u8bbe now \u88ab\u611f\u67d3\uff0c\u6700\u591a\u4fdd\u7559\u591a\u5c11\u4e2a \nvoid add_edge(int from,int to){\n\te[++cnt] = edge(head[from],to);\n\thead[from] = cnt;\n}\nvoid dfs(int now,int fa){\n\tsz[now] = 1;\n\tint son[3] = {0,0,0};\n\tint tot = 0;\n\tfor(int i=head[now]; i;i = e[i].nxt){\n\t\tint to = e[i].to;\n\t\tif(to == fa)\tcontinue;\n\t\tson[++tot] = to;\n\t\tdfs(to,now);\n\t\tsz[now] += sz[to];\n\t}\n\t//\u53bb son[1] / \u53bb son[2] \n\tdp[now] = max(dp[son[1]] + max(sz[son[2]] - 1,0),dp[son[2]] + max(sz[son[1]] - 1,0));\n}\nint main(){\n\tint t;\n\tcin>>t;\n\twhile(t--){\n\t\tmemset(head,0,sizeof(head));\n\t\tmemset(dp,0,sizeof(dp));\n\t\tmemset(sz,0,sizeof(sz));\n\t\tans = 0;\n\t\tint n;\n\t\tcin>>n;\n\t\tfor(int i=1; i<n; i++){\n\t\t\tint from,to;\n\t\t\tcin>>from>>to;\n\t\t\tadd_edge(from,to);\n\t\t\tadd_edge(to,from);\n\t\t}\n\t\tdfs(1,0);\n\t\tprintf(\"%d\\n\",dp[1]);\n\t}\n\treturn 0;\n}\n\n```\n\n\n\u5148\u8fdb\u884c $dfs$ \u518d\u66f4\u65b0 $sz$ \u548c $dp$\uff0c\u4ee5\u53ca\u591a\u7ec4\u6570\u636e\u6240\u4ee5\u6bcf\u6b21\u9700\u8981\u5c06\u5404\u79cd\u6570\u7ec4\u6e05\u96f6\uff0c\u6e05\u96f6 $head$ \u6570\u7ec4\u4e5f\u76f8\u5f53\u4e8e\u6e05\u96f6\u8fb9\u7684\u6570\u7ec4\u4e86\u3002",
        "postTime": 1655037449,
        "uid": 544860,
        "name": "linyihdfj",
        "ccfLevel": 5,
        "title": "\u3010\u9898\u89e3\u3011CF1689C Infected Tree"
    }
]