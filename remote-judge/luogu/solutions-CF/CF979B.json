[
    {
        "content": "## \u5148\u6765\u770b\u770b\u5b98\u65b9\u9898\u89e3\u7684\u8282\u9009  :(\u81ea\u5df1\u7ffb\u7684,\u4e0d\u597d\u8bf7\u591a\u591a\u8c05\u89e3)   \n - \u5bb9\u6613\u53d1\u73b0\u6700\u4f18\u7b54\u6848\u4e00\u5b9a\u662f\u957f\u5ea6\u4e3a1\u7684\u5b50\u4e32\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u4f7f\u5b57\u7b26\u4e32\u5c3d\u53ef\u80fd\u7f8e\u4e3d\uff0c\u6211\u4eec\u5c06\u9009\u62e9\u5b57\u7b26\u4e32\u4e2d\u6700\u591a\u51fa\u73b0\u7684**\u5b57\u6bcd**\uff0c\u5e76\u5c3d\u53ef\u80fd\u7684\u7528\u9009\u5b9a\u7684\u5b57\u6bcd\u66ff\u6362\u6240\u6709\u5176\u4ed6\u5b57\u6bcd\u3002\n\n #### \u4e0b\u9762\u662f\u51e0\u79cd\u60c5\u51b5\u3002      \n\n1. \u5982\u679cn\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5269\u4f59\u5b57\u6bcd\u7684\u6570\u91cf\uff0c\u53ea\u9700\u5c06\u9009\u5b9a\u5b57\u6bcd\u7684\u6570\u91cf\u52a0\u4e0an\u5373\u4e3a\u5f97\u5206\u3002\n\n2. \u5982\u679c\u7528\u6240\u9009\u5b57\u6bcd\u66ff\u6362\u6240\u6709\u5b57\u6bcd\u540e,\u8fd8\u5269\u4e0b\u7684\u66ff\u6362\u6b21\u6570 n \u662f\u5076\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u4efb\u610f\u5b57\u6bcd\uff0c\u7528\u5176\u4ed6\u5b57\u6bcd\u4ee3\u66ff\uff0c\u6362\u56de\u6765,\u5e76\u91cd\u590d\u8be5\u52a8\u4f5c\uff0c\u76f4\u5230n\u52300\u4e3a\u6b62\u3002\n\n3. \u5426\u5219\uff0c\u6211\u4eec\u4e0d\u4f1a\u66ff\u6362\u6240\u6709\u5176\u4ed6\u5b57\u6bcd\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u66ff\u6362\u8fd9\u4e9b\u5b57\u6bcd\uff0c\u76f4\u5230\u5269\u4e0b1\u4e2a\u5b57\u6bcd\uff08\u73b0\u5728n\u662f\u5076\u6570\uff09\uff0c\u7136\u540e\u7528\u53e6\u4e00\u4e2a\u4e0e\u6211\u4eec\u9009\u62e9\u7684\u5b57\u6bcd\u4e0d\u540c\u7684\u5b57\u6bcd\u66ff\u6362\u8be5\u5b57\u6bcd\u3002 \u4e4b\u540e\uff0c\u7528\u6211\u4eec\u9009\u62e9\u7684\u5b57\u6bcd\u66ff\u6362\u90a3\u5c01\u4fe1\u3002\n\n4. \u73b0\u5728n\u53c8\u6210\u4e86\u5076\u6570\uff0c\u6211\u4eec\u91cd\u590d\u4e0a\u9762\u8ba8\u8bba\u7684\u52a8\u4f5c\u3002\n\n\u6211\u89c9\u5f97\u8bb2\u5f97\u633a\u6e05\u695a\u4e86.\u5982\u679c\u5b58\u5728\u7591\u95ee,\u53ef\u4ee5\u770b\u770b\u4e0b\u9762\u51e0\u7ec4\u6837\u4f8b.   \n- aaaaa -> aaaab -> aaaac -> aaaaa (n = 3)   \n- aaa -> aab -> aaa (n = 2)\n\n\u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0,\u5f53\u4e14\u4ec5\u5f53\u4e00\u4e2a\u5b57\u7b26\u4e32\u5168\u662f\u67d0\u4e2a\u5b57\u6bcd,\u4e14 n = 1 \u65f6\u624d\u9700\u8981\u8003\u8651\"\u6362\u4e0d\u56de\u6765\"\u7684\u60c5\u51b5,\u6b64\u65f6\u7684\u7b54\u6848\u53d8\u6210\u5b57\u7b26\u4e32\u957f\u5ea6 - 1  \n\u6700\u540e\u7684\u6700\u540e,\u6ce8\u610f\u5b57\u6bcd\u6709\u5c0f\u5199\u548c\u5927\u5199.~~\u6211\u6253\u6bd4\u8d5b\u7684\u65f6\u5019\u6ca1\u6ce8\u610f\u7ed3\u679c\u6ca1A qwq~~   \n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\ntypedef pair<int, int> P;\nconst int MAXN = 1e9 + 20;\n\nint N;\nstring s1, s2, s3;\n\nint solve(string s)\n{\n\tint m['z' - 'A' + 1] = {0};\n\tfor(int i = 0; i < (int) s.size(); i++)\n\t\tm[s[i] - 'A']++;\n\t\n\tP ans(0, 0);\n\tfor(int i = 0; i < ('z' - 'A' + 1); i++)\n\t\tif(m[i] > ans.first) \n\t\t\tans.first = m[i], ans.second = i;\n\n\tif(N <= (int)s.length() - ans.first) return ans.first + N;\n\telse \n\t{\n\t\tif((ans.first == (int) s.length()) && N == 1) return s.length() - 1;\n\t\telse return s.length();\n\t}\n}\n\nint main()\n{\n\tcin>>N;\n\tcin>>s1>>s2>>s3;\n\n\tint a, b, c;\n\ta = solve(s1),\n\tb = solve(s2),\n\tc = solve(s3);\n\t//cout<<a<<\" \"<<b<<\" \"<<c<<endl;\n\n\tif((a > b) && (a > c)) puts(\"Kuro\");\n\telse if((b > a) && (b > c)) puts(\"Shiro\");\n\telse if((c > a) && (c > b)) puts(\"Katie\");\n\telse puts(\"Draw\");\n\treturn 0;\n}\n\n```",
        "postTime": 1527316967,
        "uid": 57705,
        "name": "\u4ffa\u662f\u5c0f\u7a0b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF979B \u3010Treasure Hunt\u3011"
    },
    {
        "content": "\u597d\u9898 qwq\n\n\u672c\u4ee5\u4e3a\u662f\u4e2a\u6c34\u6a59\uff0c\u7ed3\u679c\u8fd9\u9898\u5361 $n=1$ \uff0c\u6211\u6876\u8fd8\u5199\u9519\u4e86 qwq \u3002\n\n### Solution\n\n\u4e0d\u8981\u88ab ```abcdabc \u6709\u7f8e\u4e3d\u503c 2 \uff0c\u56e0\u4e3a\u5b83\u7684\u5b50\u5e8f\u5217 abc \u51fa\u73b0\u4e86\u4e24\u6b21``` \u8ff7\u60d1\u4e86\uff0c\u5982\u679c ```abc``` \u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u90a3\u5b57\u6bcd ```a``` \u4e0d\u4e5f\u51fa\u73b0\u4e86\u4e24\u6b21\u5417 qwq \u3002\u6bcf\u51fa\u73b0\u4e00\u4e2a\u76f8\u540c\u7684\u5b50\u5e8f\u5217\u5c31\u4f1a\u51fa\u73b0\u4e00\u79cd\u5bf9\u5e94\u7684\u5b57\u6bcd\uff0c\u6240\u4ee5\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u7f8e\u4e3d\u503c\u5c31\u662f\u8fd9\u4e2a\u5b57\u7b26\u4e32\u91cc\u5355\u4e2a\u5b57\u6bcd\u7684\u6700\u9ad8\u51fa\u73b0\u6b21\u6570\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528 $cnt$ \u8868\u793a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u91cc\u5355\u4e2a\u5b57\u6bcd\u7684\u6700\u9ad8\u51fa\u73b0\u6b21\u6570\uff0c\u6700\u540e\u7684\u7f8e\u4e3d\u503c $= \\min(cnt+n,len)$ \uff0c\u5c31\u662f\u628a\u4e0d\u540c\u4e8e\u6700\u591a\u51fa\u73b0\u7684\u5b57\u6bcd\u7684\u5b57\u6bcd\u6539\u6210\u6700\u591a\u51fa\u73b0\u7684\u5b57\u6bcd\uff0c\u4f46\u7f8e\u4e3d\u503c\u6700\u7ec8\u4e0d\u80fd\u8d85\u8fc7\u957f\u5ea6\u3002\n\n\u5c31\u8fd9\u4e48\u7b80\u5355 qaq \uff0c\u4f46\u8981\u6ce8\u610f $n=1$ \u7684\u60c5\u51b5 qwq \uff0c\u5982\u679c $n=1$ \u4e14\u4e00\u4e2a\u5b57\u7b26\u4e32\u7531\u540c\u4e00\u79cd\u5b57\u6bcd\u6784\u6210\uff0c\u90a3\u4e48\u7f8e\u4e3d\u503c\u662f $len-1$ \u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n\u5f53 $n=1$ \u65f6\uff0c\u5b57\u7b26\u4e32 ```aaaaaa``` \u5fc5\u987b\u6709\u4e00\u4f4d\u6539\u6210\u5176\u4ed6\u5b57\u6bcd\uff0c\u7b54\u6848\u662f $len-1=5$ \u3002\n\n\u5f53 $n\u22601$ \u65f6\uff0c\u5b57\u7b26\u4e32 ```aaaaaa``` \u53ef\u4ee5\u6311\u4e00\u4f4d\u6539\u5f88\u591a\u6b21\uff0c\u6700\u540e\u518d\u6539\u56de ```a``` \uff0c\u6bd4\u5982 $n=3$ \uff0c\u7b2c\u4e00\u4e2a ```a``` \u7b2c\u4e00\u6b21\u53d8 ```b``` \uff0c \u7b2c\u4e8c\u6b21\u53d8 ```c``` \uff0c\u7b2c\u4e09\u6b21\u53d8\u56de ```a``` \uff0c\u7b54\u6848\u662f $6$ \u3002\n\n### Code\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <map>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\nconst int N = 100005;\nconst int M = 55;\n#define ll long long\nconst int INF = 0x3f3f3f3f;\nconst int mod = 1000000007;\nint n;\nchar ku[N], s[N], ka[N];\nint len;\nint t1[M], t2[M], t3[M];\nint cnt1, cnt2, cnt3;\nint ans1, ans2, ans3;\nint main() {\n\tscanf(\"%d\", &n);\n\tcin >> (ku + 1) >> (s + 1) >> (ka + 1);\n\tlen = strlen(ku + 1);\n\tfor (int i=1; i<=len; i++)\n\t\tt1[ku[i] - 'A' + 1]++;\n\tfor (int i=1; i<=len; i++)\n\t\tt2[s[i] - 'A' + 1]++;\n\tfor (int i=1; i<=len; i++)\n\t\tt3[ka[i] - 'A' + 1]++;//\u8fd9\u91cc\u6876\u6211\u672c\u6765\u5199\u9519\u4e86qwq\n\tfor (int i=1; i<=('z'-'A'+1); i++)\n\t\tcnt1 = max(cnt1, t1[i]), cnt2 = max(cnt2, t2[i]), cnt3 = max(cnt3, t3[i]);\n\tif (cnt1 + n <= len) ans1 = cnt1 + n;\n\telse {\n\t\tif (n == 1 && cnt1 == len) ans1 = len - 1;\n\t\telse ans1 = len;\n\t}\n\tif (cnt2 + n <= len) ans2 = cnt2 + n;\n\telse {\n\t\tif (n == 1 && cnt2 == len) ans2 = len - 1;\n\t\telse ans2 = len;\n\t}\n\tif (cnt3 + n <= len) ans3 = cnt3 + n;\n\telse {\n\t\tif (n == 1 && cnt3 == len) ans3 = len - 1;\n\t\telse ans3 = len;\n\t}\n\tif (ans1 > ans2 && ans1 > ans3) printf(\"Kuro\\n\");\n\telse if (ans2 > ans1 && ans2 > ans3) printf(\"Shiro\\n\");\n\telse if (ans3 > ans1 && ans3 > ans2) printf(\"Katie\\n\");\n\telse printf(\"Draw\\n\");\n\treturn 0;\n}\n```\n\n~~\u4ee3\u7801\u53ef\u80fd\u5199\u7684\u6709\u70b9\u7e41\u7410\u4e86\uff0c\u5c06\u5c31\u7740\u770b\u5427\uff08~~\n\n\u5b8c\u7ed3\u6563\u82b1 qaq",
        "postTime": 1661594259,
        "uid": 275078,
        "name": "\u8fc7\u6c27\u5316\u6c22_syq0057",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF979B Treasure Hunt"
    }
]