[
    {
        "content": "[\u5927\u4f6c\u7684\u9898\u89e3](https://270854.blog.luogu.org/solution-cf1184b1)\u5199\u7684\u592a\u597d\u4e86\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e0d\u540c\u4e8e\u5927\u4f6c\u7684\u505a\u6cd5\u3002\n\n## \u601d\u8def\n\u8bfb\u5165\u540e\uff0c\u5c06 $b$ \u6570\u7ec4\u6309\u7167\u5173\u952e\u5b57 $d$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5e76\u7528\u524d\u7f00\u548c\u6570\u7ec4\u8bb0\u5f55\u4e0b\u524d $i$ \u4e2a $d$ \u7684\u603b\u548c\u3002\u5728\u5bf9\u6bcf\u4e2a $a_i$ \u8fdb\u884c\u67e5\u8be2\u65f6\uff0c\u4e8c\u5206\u627e\u51fa\u7b2c\u4e00\u4e2a $a_i$ \u4e0d\u80fd\u653b\u6253\u7684\u57ce\u5e02 $l$\uff0c\u6b64\u65f6\u8bf4\u660e\u524d $l-1$ \u5ea7\u57ce\u5e02\u5bf9\u4e8e $a_i$ \u6765\u8bf4\u90fd\u80fd\u653b\u6253\uff0c\u6240\u5f97\u5230\u7684\u9ec4\u91d1\u6570\u91cf\u5c31\u662f $q[l-1]$\u3002\u8fd9\u91cc\u7684\u53d8\u91cf $b$\uff0c$d$\uff0c$a$ \u5747\u4e0e\u9898\u76ee\u7ffb\u8bd1\u5bf9\u5e94\u3002\n\n\u60f3\u8981\u7eaf\u66b4\u529b\u7684\u505a\u6cd5\u662f\u884c\u4e0d\u901a\u7684\uff0c\u5373\u4f7f\u662f\u56db\u79d2\u7684\u65f6\u9650\uff0c~~\u522b\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684~~\u3002\n\n## \u4ee3\u7801\nPS\uff1a\u81ea\u4ece\u7528\u4e86 VsCode \u540e\u683c\u5f0f\u53d8\u5f97\u6709\u70b9\u5947\u602a\uff0c\u770b\u7740\u6709\u70b9\u96be\u53d7\u3002\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#include<string>\n#include<ctime>\n#include<cstring>\n#include<algorithm>\n#include<climits>\n#include<queue>\n#include<map>\n#include<set>\n#include<sstream>\n#include<cassert>\n#include<stdio.h>\n#define ll long long\n#define inf 0x3f3f3f3f\n#define fr(i , a , b) for(ll i = a ; i <= b ; ++i)\n#define fo(i , a , b) for(ll i = a ; i >= b ; --i)\nusing namespace std;\ninline char gchar()\n{\n    static char buf[1000000] , *p1 = buf , *p2 = buf;\n    return p1 == p2 && (p2 = (p1 = buf) + fread(buf , 1 , 1000000 , stdin) , p1 == p2) ? EOF : *p1++;\n}\ninline ll read()\n{\n    ll x = 0 , f = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9')\n\t  {\n        if(ch == '-')\n        {\n        \tf = -1;\n\t\t}\n        ch = getchar();\n    }\n    while(ch >= '0' && ch <= '9')\n\t  {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nll s , b , a[100005];\nll q[100005];\nstruct node\n{\n    ll d , g;\n    bool operator < (const node &x) const\n    {\n        return d < x.d;\n    }\n}str[100005];\nsigned main()\n{\n    s = read();\n    b = read();\n    fr(i , 1 , s)\n    {\n        a[i] = read();\n    }\n    fr(i , 1 , b)\n    {\n        str[i].d = read();\n        str[i].g = read();\n        q[i] = q[i - 1] + str[i].g;\n    }\n    sort(str + 1 , str + b + 1);\n    fr(i , 1 , b)\n    {\n        q[i] = q[i - 1] + str[i].g;\n    }\n    fr(i , 1 , s)\n    {\n        ll l = 1 , r = b , mid;\n        while(l <= r)\n        {\n            mid = (l + r) >> 1;\n            if(str[mid].d <= a[i])\n            {\n                l = mid + 1;\n            }\n            else\n            {\n                r = mid - 1;\n            }\n        }\n        printf(\"%lld \" , q[l - 1]);\n    }\n    system(\"pause\");\n    return 0;\n}\n```\n",
        "postTime": 1685453821,
        "uid": 461407,
        "name": "\u6731\u91d1\u5e73",
        "ccfLevel": 0,
        "title": "CF1184B1 The Doctor Meets Vader (Easy) \u9898\u89e3"
    },
    {
        "content": "\u968f\u4fbf\u62bd\u4e86\u4e00\u9053 \\*1400 \u7684\u9898\uff0c\u6ca1\u60f3\u5230\u5c31\u62bd\u5230\u4e86\u8fd9\u4e2a\u3002\n\n\u8fd9\u9053\u9898\u6b63\u89e3\u662f\u4e8c\u5206\uff0c\u6240\u4ee5\u8003\u8651\u628a $d$ \u548c $g$ \u5c01\u88c5\u5230\u4e00\u4e2a\u7ed3\u6784\u4f53\u91cc\uff0c\u7136\u540e\u518d\u4ee5 $d$ \u4e3a\u5173\u952e\u5b57\u6765\u6392\u5e8f\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a $a$\uff0c\u5c31\u53ef\u4ee5\u4e8c\u5206\u67e5\u627e\u5176\u4f4d\u7f6e\u4e86\uff01\u6ce8\u610f\uff0c\u8fd9\u91cc\u9700\u8981\u7528 `upper_bound` \u5e76 $-1$\uff0c\u4e0d\u7136\u5982\u679c\u6709\u591a\u4e2a $d$ \u76f8\u540c\u7684\u8bdd\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6c42\u548c\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00\u548c\u5373\u53ef\u3002\n\n**\u6ce8\u610f\uff1a`lower_bound` \u548c `upper_bound` \u90fd\u9700\u8981\u91cd\u8f7d `<` \u8fd0\u7b97\u7b26\u3002**\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define MAXN 100001\n\nint n, m, pos;\nint a[MAXN], sum[MAXN];\n\nstruct Node{\n\tint d, g;\n\tbool operator<(const Node b)const{\n\t\treturn d < b.d;\n\t}\n}nodes[MAXN];\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\t\n\tcin >> n >> m;\n\tfor (int i(1); i<=n; ++i) cin >> a[i];\n\tfor (int i(1); i<=m; ++i) cin >> nodes[i].d >> nodes[i].g;\n\tsort(nodes+1, nodes+m+1);\n\tfor (int i(1); i<=m; ++i) sum[i] = sum[i-1] + nodes[i].g;\n\t\n\tfor (int i(1); i<=n; ++i){\n\t\tpos = upper_bound(nodes+1, nodes+m+1, Node{a[i], 0})-nodes-1;\n\t\tcout << sum[pos] << ' ';\n\t}\n\t\n\treturn 0;\n}\n\n```\n",
        "postTime": 1685454572,
        "uid": 804607,
        "name": "rainygame",
        "ccfLevel": 4,
        "title": "CF1184B1 \u9898\u89e3"
    },
    {
        "content": "\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b87\u5b99\u98de\u8239\uff0c\u6211\u4eec\u8981\u7ed9\u51fa\u6240\u6709\u9632\u5fa1\u529b\u5c0f\u4e8e\u8be5\u98de\u8239\u653b\u51fb\u529b\u7684\u57fa\u5730\u7684\u91d1\u5e01\u6570\u7684\u603b\u548c\u3002\u53d1\u73b0\u653b\u51fb\u529b\u4e0e\u9632\u5fa1\u529b\u7684\u6570\u503c\u8f83\u5927\uff0c\u6545\u6392\u5e8f\u540e\u8fdb\u884c\u79bb\u6563\u5316\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define MAXN 100005\n\nint s, b, a[MAXN];\nstd::map<int, int> sum;\nstruct node\n{\n\tint w, v;\n}x[MAXN];\n\nbool cmp(node a, node b)\n{\n\treturn a.w < b.w;\n}\nint main()\n{\n    std::cin >> s >> b;\n    std::vector<int> e;\n \tfor (int i = 1; i <= s; i++)\n \t{\n\t    std::cin >> a[i];\n\t    e.push_back(a[i]);\n\t}\n\tfor (int i = 1; i <= b; i++)\n\t{\n\t    std::cin >> x[i].w >> x[i].v;\n\t    e.push_back(x[i].w);\n\t}\n    std::sort(e.begin(), e.end());\n    e.erase(std::unique(e.begin(), e.end()), e.end());\n    for (int i = 1; i <= s; i++)\n        a[i] = std::lower_bound(e.begin(), e.end(), a[i]) - e.begin();\n    for (int i = 1; i <= b; i++)\n        x[i].w = std::lower_bound(e.begin(), e.end(), x[i].w) - e.begin();\n    for (int i = 1; i <= b; i++)\n        sum[x[i].w] += x[i].v;\n    for (int i = 0; i < e.size(); i++)\n        sum[i] += sum[i - 1];\n    for (int i = 1; i <= s; i++)\n        std::cout << sum[a[i]] << \" \";\n    std::cout << std::endl;\n    return 0;\n}\n```\n",
        "postTime": 1676897575,
        "uid": 270854,
        "name": "\u4e8c\u53c9\u82f9\u679c\u6811",
        "ccfLevel": 5,
        "title": "CF1184B1 The Doctor Meets Vader (Easy) \u9898\u89e3"
    }
]