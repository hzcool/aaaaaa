[
    {
        "content": "\u5f88\u65e9\u4e4b\u524d\u5c31\u53e3\u80e1\u4e86\u7684\u9898\uff0c\u6559\u7ec3\u5e03\u7f6e\u4e86\u6240\u4ee5\u5199\u4e00\u4e0b\u3002\n\n\u9996\u5148\u770b\u5230\u5230\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u7b80\u5355\u8def\u5f84\u4e2d\u7ecf\u8fc7\u7684\u6700\u957f\u7684\u8fb9\uff0c\u5c31\u53bb\u60f3\u662f\u5426\u53ef\u4ee5\u7528 Kruskal \u91cd\u6784\u6811\u8f6c\u5316\u6210\u4e24\u4e2a\u70b9\u7684 lca \u7684\u6743\u503c\u3002\n\n\u4e8e\u662f\u67e5\u8be2\u64cd\u4f5c\u5c31\u8f6c\u5316\u6210\u4e86\u91cd\u6784\u6811\u4e0a\uff0c $x$ \u70b9\u4e0e\u6240\u6709\u767d\u70b9\u7684 lca \u7684\u6743\u503c\u3002\n\n\u518d\u7528[\u8fd9\u9898](https://www.luogu.com.cn/problem/CF1062E)\u7684\u7ecf\u5178\u7684\u5957\u8def\uff0c\u4e00\u4e2a\u70b9\u96c6\u7684 lca \u4e3a\u8fd9\u4e2a\u70b9\u96c6\u4e2d $dfn$ \u6700\u5927\u70b9\u548c $dfn$ \u6700\u5c0f\u70b9\u7684 lca\uff0c\u8fd9\u6837\u4fee\u6539\u64cd\u4f5c\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u6700\u5c0f $dfn$ \u4e86\u3002\u7136\u540e\u5c31\u505a\u5b8c\u4e86\uff0c\u590d\u6742\u5ea6 $(n+q)\\log n$\u3002\n\n~~\u4e25\u91cd\u865a\u9ad8\u9898~~",
        "postTime": 1657629091,
        "uid": 154101,
        "name": "fily",
        "ccfLevel": 0,
        "title": "\u6211\u5443\u5443\u5443\u5443"
    },
    {
        "content": "#### \u9898\u610f\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u70b9\u7684\u5e26\u6743\u65e0\u5411\u6811\uff0c\u521d\u59cb\u65f6\u70b9\u6807\u8bb0\u4e3a $0$ \uff0c\u7ef4\u62a4\uff1a\n\u64cd\u4f5c\uff1a  \n1. \u5c06\u6807\u53f7\u533a\u95f4 $[l, r]$ \u7684\u70b9\u6807\u8bb0\u7f6e $1$ \u3002  \n2. \u5c06\u6807\u53f7\u533a\u95f4 $[l, r]$ \u7684\u70b9\u6807\u8bb0\u7f6e $0$ \u3002  \n\n\u8be2\u95ee\uff08 $q$ \u6b21\uff09\uff1a  \n1. \u70b9 $x$ \u5230\u6807\u8bb0\u4e3a $1$ \u7684\u70b9\u7684\u6700\u5927\u74f6\u9888\u8ddd\u79bb\uff08\u8981\u6c42\u662f\u7b80\u5355\u8def\u5f84\uff0c\u4e0d\u5305\u62ec $x$ \uff0c\u4e0d\u5b58\u5728\u8f93\u51fa $-1$ \uff09\u3002  \n\n$1 \\leq n \\leq 3 \\times 10^5$ \uff0c\u8fb9\u6743 $1 \\leq w_i \\leq 10^9$ \u3002\n\n#### \u9898\u89e3\n\u74f6\u9888\u8ddd\u79bb\u5565\u7684\u4f1a\u60f3\u5230 kruskal \u91cd\u6784\u6811\u3002  \n\u6700\u8fdc\u80af\u5b9a\u7ed5\u8def\u5230 kruskal \u91cd\u6784\u6811\u6743\u503c\u6700\u5927\u7684\u5730\u65b9\uff0c\u5373\u6240\u6709\u6807\u8bb0\u4e3a $1$ \u7684\u70b9\u7684 lca \u4e0e $x$ \u7684 lca\u3002\u8981\u6ce8\u610f\u7279\u5224\u53ea\u6709 $x$ \u4e00\u4e2a\u6807\u8bb0\u4e3a $1$ \u7684\u70b9\u7684\u60c5\u51b5\u3002  \n\u591a\u70b9 lca \u7684\u7ed3\u8bba\u662f dfs \u5e8f\u6700\u5927\u7684\u70b9\u548c\u6700\u5c0f\u7684\u70b9\u6c42\u4e00\u6b21 lca\uff0c\u56e0\u6b64\u9700\u8981\u7ef4\u62a4\u6807\u8bb0\u4e3a $1$ \u7684\u70b9\u96c6\u7684\u6700\u5927\u548c\u6700\u5c0f\u7684 dfs \u5e8f\u3002\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u8fd9\u4e2a\u503c\uff0c\u9700\u8981\u9884\u5904\u7406\u6240\u6709\u7ebf\u6bb5\u6811\u7ed3\u70b9\u5bf9\u5e94\u533a\u95f4\u7684 dfs \u5e8f\u7684\u6700\u5927\u6700\u5c0f\u503c\u4ee5\u65b9\u4fbf\u533a\u95f4\u4fee\u6539\u6253 tag \u65f6\u5bf9\u7ed3\u70b9\u8fdb\u884c\u8d4b\u503c\uff08\u8ba1\u7b97\u53d8\u6210\u4e86\u8c03\u7528\u9884\u5904\u7406\u7684\u503c\uff09\u3002  \n\n\n#### code\n```cpp\nstruct edge { int u, v, w; } e[maxn];\nint par[maxn << 1];\ninline int find(int x) { return x == par[x] ? x : par[x] = find(par[x]); }\nint ch[2][maxn << 1], wt[maxn << 1], fa[30][maxn << 1], dfn[maxn << 1], idfn[maxn << 1], dep[maxn << 1], dfs_clock, tot;\n\nvoid krt_build(int n) {\n    sort(e + 1, e + n, [&](edge &x, edge &y) { return x.w < y.w; });\n    rep(i,1,n<<1) par[i] = i;\n    tot = n;\n    rep(i,1,n - 1) {\n        int u = find(e[i].u), v = find(e[i].v), w = e[i].w;\n        par[u] = par[v] = fa[0][u] = fa[0][v] = ++ tot;\n        ch[0][tot] = u, ch[1][tot] = v;\n        wt[tot] = w;\n    }\n}\n\nvoid dfs(int cur) {\n    dfn[cur] = ++ dfs_clock, idfn[dfs_clock] = cur, dep[cur] = dep[fa[0][cur]] + 1;\n    rep(i,1,25) fa[i][cur] = fa[i - 1][fa[i - 1][cur]];\n    rep(i,0,1) if(ch[i][cur]) dfs(ch[i][cur]);\n}\n\nint lca(int x, int y) {\n    if(dep[x] < dep[y]) swap(x, y);\n    per(i,25,0) if(dep[fa[i][x]] >= dep[y]) x = fa[i][x];\n    if(x == y) return x;\n    per(i,25,0) if(fa[i][x] != fa[i][y]) x = fa[i][x], y = fa[i][y];\n    return fa[0][x];\n}\n\nstruct segTree {\n    int mx[maxn << 2], mn[maxn << 2], smx[maxn << 2], smn[maxn << 2], tag[maxn << 2];\n    void as(int p, int v) {\n        v ? (mx[p] = smx[p], mn[p] = smn[p]) : (mx[p] = 0, mn[p] = inf);\n    }\n    void spread(int p) {\n        register int ls = p << 1, rs = ls | 1;\n        as(ls, tag[p]), as(rs, tag[p]), tag[ls] = tag[rs] = tag[p], tag[p] = -1;\n    }\n    void build(int p, int lp, int rp) {\n        tag[p] = -1; mx[p] = 0, mn[p] = inf;\n        if(lp == rp) { smx[p] = smn[p] = dfn[lp]; return ; }\n        register int mid = (lp + rp) >> 1, ls = p << 1, rs = ls | 1;\n        build(ls, lp, mid), build(rs, mid + 1, rp);\n        smx[p] = max(smx[ls], smx[rs]), smn[p] = min(smn[ls], smn[rs]);\n\n    }\n    void assign(int p, int lp, int rp, int l, int r, int v) {\n        if(l <= lp && rp <= r) {\n            v ? (mn[p] = smn[p], mx[p] = smx[p]) : (mn[p] = inf, mx[p] = 0);\n            tag[p] = v;\n            return ;\n        }\n        register int mid = (lp + rp) >> 1, ls = p << 1, rs = ls | 1;\n        if(~tag[p]) spread(p);\n        if(l <= mid) assign(ls, lp, mid, l, r, v);\n        if(r > mid) assign(rs, mid + 1, rp, l, r, v);\n        mx[p] = max(mx[ls], mx[rs]), mn[p] = min(mn[ls], mn[rs]);\n    }\n    void qry(int &v1, int &v2) { v1 = mn[1], v2 = mx[1]; }\n} s;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n    int n, q, u, v, w;\n    cin >> n >> q;\n    rep(i,1,n-1) {\n        cin >> u >> v >> w;\n        e[i] = {u, v, w};\n    }\n    krt_build(n);\n    dfs(tot);\n    s.build(1, 1, n);\n    int t, l, r, x;\n    rep(qr,1,q) {\n        cin >> t;\n        if(t == 1 || t == 2) {\n            cin >> l >> r;\n            s.assign(1, 1, n, l, r, t == 1 ? 1 : 0);\n        } else {\n            cin >> x;\n            int mn, mx; s.qry(mn, mx);\n            if(mn == inf || (mn == dfn[x] && mx == mn)) cout << -1 << endl;\n            else cout << wt[lca(idfn[mn], lca(idfn[mx], x))] << endl;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1643099230,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "CFR767Div1E kruskal\u91cd\u6784\u6811 + \u533a\u95f4lca"
    },
    {
        "content": "# [CF1628E Groceries in Meteor Town](https://www.luogu.com.cn/problem/CF1628E)\n\n## \u7b97\u6cd5\n\n- \u7ebf\u6bb5\u6811\u533a\u95f4\u6700\u503c\n- \u591a\u70b9\u6700\u8fd1\u516c\u5171\u7956\u5148\n- Kruskal \u91cd\u6784\u6811-\u6700\u5c0f\u751f\u6210\u6811\n\n## \u9898\u610f\n\n\u5176\u5b9e\u9898\u610f\u7ffb\u8bd1\u5f88\u6e05\u695a\u4e86\u3002\n\n1. \u533a\u95f4\u8282\u70b9 $[l,r]$ \u67d3\u767d\u8272\u3002\n\n2. \u533a\u95f4\u8282\u70b9 $[l,r]$ \u67d3\u9ed1\u8272\u3002\n\n3. \u67e5\u8be2\u5f53\u524d\u70b9\u4e0e\u6240\u6709**\u767d\u70b9**\u7684\u7b80\u5355\u8def\u5f84\u8fb9\u6743\u6700\u5927\u503c\uff0c\u4e0d\u5b58\u5728\u8f93\u51fa $-1$\u3002\n\n## \u601d\u8def\n\n### \u7b80\u5355\u8def\u5f84\u8fb9\u6743\u6700\u5927\u503c\n\n\u5bf9\u4e8e\u8fd9\u79cd\u7b80\u5355\u8def\u5f84\u8fb9\u6743\u6700\u5927\u503c\uff1a\u53c2\u7167 Kruskal \u91cd\u6784\u6811\u7684\u6027\u8d28\uff1a\u539f\u56fe\u4e2d\u4e24\u70b9\u95f4\u6240\u6709\u7b80\u5355\u8def\u5f84\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c=Kruskal \u91cd\u6784\u6811\u4e0a\u4e24\u70b9 LCA \u7684\u6743\u503c\u3002\n\n\u5bf9\u4e8e\u6811\u6765\u8bf4\uff0c\u7b80\u5355\u8def\u5f84\u5c31\u4e00\u6761\uff0c\u6240\u4ee5\u6240\u6709\u7b80\u5355\u8def\u5f84\u7684\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u5c31\u662f\u8fd9\u6761\u7b80\u5355\u8def\u5f84\u7684\u6700\u5927\u8fb9\u6743\u3002\u6240\u4ee5\u6211\u4eec\u6784\u5efa Kruskal **\u91cd\u6784\u6811-\u6700\u5c0f\u751f\u6210\u6811**\u901a\u8fc7\u67e5\u8be2**\u591a\u70b9\u6700\u8fd1\u516c\u5171\u7956\u5148**\u7ef4\u62a4\u8def\u5f84\u8fb9\u6743**\u6700\u5927\u503c**\u3002\n\n\u5e76\u67e5\u96c6\u7ef4\u62a4\u5efa Kruskal \u91cd\u6784\u6811\u3002\n\n```cpp\nnamespace KruskalTree//Kruskal \u91cd\u6784\u6811\n{\n    struct EDGE\n    {\n        int u, v, w;\n        EDGE(int u = 0, int v = 0, int w = 0) : u(u), v(v), w(w){}\n        friend bool operator<(const EDGE &A, const EDGE &B){return A.w < B.w;}\n    };\n    EDGE E[N];\n    int pcnt;\n    int fa[N << 1];\n    int val[N << 1];\n    void add(int u, int v, int w, int i){E[i] = EDGE(u, v, w);}//\u52a0\u8fb9\n    int get(int x){return x != fa[x] ? fa[x] = get(fa[x]) : x;}//\u5e76\u67e5\u96c6\n    void build()\n    {\n        for (int i = 1; i <= (n << 1); i++) fa[i] = i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n        sort(E + 1, E + n);//\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n        for (int i = 1; i < n; i++)\n        {\n            int x = get(E[i].u);\n            int y = get(E[i].v);\n            fa[x] = fa[y] = n + (++pcnt);//\u56e0\u4e3a\u662f\u6811\uff0c\u6240\u4ee5\u5408\u5e76\u524dx,y\u4e00\u5b9a\u4e0d\u5728\u540c\u4e00\u96c6\u5408\uff0c\u76f4\u63a5\u5408\u5e76\n            chain::add(n + pcnt, x);//chain \u4e3a\u94fe\u5f0f\u524d\u5411\u661f\n            chain::add(n + pcnt, y);//chain \u4e3a\u94fe\u5f0f\u524d\u5411\u661f\n            val[n + pcnt] = E[i].w;//\u8fb9\u6743\u53d8\u4e3a\u70b9\u6743\n        }\n    }\n}\nsigned main()\n{\n    for (int i = 1, u, v, w; i < n; i++)\n    {\n        read(u, v, w);\n        KruskalTree::add(u, v, w, i);//\u52a0\u8fb9\n    }\n    KruskalTree::build();//\u5efa\u6811\n}\n```\n\n### \u591a\u70b9\u6700\u8fd1\u516c\u5171\u7956\u5148\n\n\u5982\u4f55\u67e5\u8be2\u4e00\u4e2a**\u70b9\u96c6**\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff1f\n\n\u67e5\u8be2\u5f53\u524d\u70b9\u96c6 dfs \u5e8f\u6700\u5c0f\u7684\u8282\u70b9\u548c dfs \u5e8f\u6700\u5927\u7684\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u5c31\u662f\u8fd9\u4e2a\u70b9\u96c6\u6240\u6709\u7ed3\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\u4e24\u70b9\u95f4\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u7528\u500d\u589e\uff0c\u6811\u5256\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5176\u5b9e\u5c31\u662f\u500d\u589e\u6cd5\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002~~\u6700\u8fd1\u516c\u5171\u7956\u5148\u4f5c\u4e3a\u666e\u53ca\u7684\u96be\u5ea6\uff0c\u4ee3\u7801\u5e94\u8be5\u6ca1\u4ec0\u4e48\u5fc5\u8981\u3002~~\n\n```cpp\nnamespace LCA//\u500d\u589e LCA\uff0c\u987a\u4fbf\u6c42 dfs \u5e8f\u3002\n{\n    int dfncnt;\n    int dfn[N << 1];\n    int idfn[N << 1];\n    int dep[N << 1];\n    int lg[N << 1];\n    int f[N << 1][21];\n    void dfs(int u, int fa)\n    {\n        dfn[u] = ++dfncnt;//\u70b9\u5bf9\u5e94\u7684 dfs \u5e8f\u3002\n        idfn[dfncnt] = u;//dfs \u5e8f\u5bf9\u5e94\u7684\u70b9\u3002\n        f[u][0] = fa;\n        dep[u] = dep[fa] + 1;//\u66f4\u65b0\u6df1\u5ea6\u3002\n        for (int i = 1; i <= lg[dep[u]]; i++)//\u66f4\u65b0\u7956\u5148\u3002\n            f[u][i] = f[f[u][i - 1]][i - 1];\n        for (int i = head[u]; i; i = e[i].nxt)\n            if (!dfn[e[i].v])\n                dfs(e[i].v, u);\n    }\n    int lca(int x, int y)//\u500d\u589e LCA\u3002\n    {\n        if (dep[x] < dep[y]) swap(x, y);\n        for (int i = lg[dep[x]]; i >= 0; i--)\n            if (dep[f[x][i]] >= dep[y])\n                x = f[x][i];\n        if (x == y)\n            return x;\n        for (int i = lg[dep[x]]; i >= 0; i--)\n        {\n            if (f[x][i] != f[y][i])\n            {\n                x = f[x][i];\n                y = f[y][i];\n            }\n        }\n        return f[x][0];\n    }\n    void initival()\n    {\n        for (int i = 1; i <= (n << 1); i++)//\u9884\u5904\u7406 log2\u3002\n            lg[i] = lg[i - 1] + ((1 << lg[i - 1]) == (i >> 1));\n        dfs(n + KruskalTree::pcnt, 0);//\u6700\u597d\u628a\u6700\u540e\u4e00\u4e2a\u52a0\u5165\u7684\u70b9\u4f5c\u4e3a\u6839\u3002\n    }\n}\nstruct type// \u4e8c\u5143\u7ec4\uff0c\u5b58\u6700\u5927\u503c\u6700\u5c0f\u503c\uff0c\u76f8\u5f53\u4e8epair\u3002\n{\n    int maxn, minn;\n    void update(int x){maxn = max(maxn, x), minn = min(minn, x);}\n    type(int maxn = -INF, int minn = +INF) : maxn(maxn), minn(minn){}\n};\nsigned main()// opt=3 \u65f6\u7684\u67e5\u8be2\u64cd\u4f5c\u3002\n{\n    LCA::initival();//\u521d\u59cb\u5316\u3002\n    /*=====================*/\n    ans = -1;\n    read(x);\n    type Q = query();//\u67e5\u8be2\u533a\u95f4\u767d\u70b9\u6700\u5927\u548c\u6700\u5c0f dfs \u5e8f\uff0c\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\n    Q.update(dfn[x]);//\u5f53\u524d\u8282\u70b9\u4e5f\u8981\u66f4\u65b0 dfs \u5e8f\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\n    if (Q.maxn != Q.minn)\n    {\n        y = lca(idfn[Q.maxn], idfn[Q.minn]);\n        if (x != y) ans = val[y];\n    }\n    write(ans, '\\n');\n}\n```\n\n### \u7ef4\u62a4\u533a\u95f4\u6240\u6709\u767d\u70b9\u6700\u5927\u548c\u6700\u5c0f\u7684 dfs \u5e8f\n\n\u6570\u636e\u7ed3\u6784**\u7ebf\u6bb5\u6811**\u3002\n\n1. \u7ef4\u62a4\u7684\u53d8\u91cf\n\n    $inf$\uff1a\u6700\u5927\u503c\u4e3a $-\\infty$\uff0c\u6700\u5c0f\u503c\u4e3a $+\\infty$\u3002\n\n    $all$\uff1a\u533a\u95f4\u6240\u6709\u8282\u70b9\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\n    \n    $val$\uff1a\u533a\u95f4\u6240\u6709\u767d\u70b9\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\n    \n    $tag$\uff1a\u61d2\u6807\u8bb0\u3002\n\n2. \u5efa\u6811\n\n    \u7528\u4e24\u4e2a\u5b50\u533a\u95f4\u7684 $all$ \u66f4\u65b0\u5f53\u524d\u533a\u95f4\u7684 $all$\u3002\u5f53\u524d\u533a\u95f4\u7684 $val$ \u4e0d\u53d8\uff0c\u4ecd\u7136\u4e3a $inf$\uff0c\u56e0\u4e3a\u521d\u59cb\u65f6\u5168\u90e8\u4e3a\u9ed1\u70b9\u3002**\u6b64\u540e\u7684\u6240\u6709\u4fee\u6539\u64cd\u4f5c\uff0c$all$ \u5747\u4e0d\u53d8**\uff0c\u6240\u4ee5\u8bf4\uff0c$all$ \u7684\u4f5c\u7528\u5c31\u662f\u7528\u4e8e\u5feb\u901f\u6062\u590d\u5f53\u524d\u533a\u95f4\u7684\u8d21\u732e\u3002\n\n3. \u66f4\u65b0\n\n    $opt=1$\uff1a\u66f4\u65b0\u5f53\u524d\u533a\u95f4\u4e3a\u767d\u70b9\uff0c\u5c06 $val$ \u6539\u4e3a $all$\uff0c\u5e76\u7ed9\u5f53\u524d\u533a\u95f4\u6253\u4e0a\u6807\u8bb0 $tag=1$\u3002\n    \n    $opt=2$\uff1a\u66f4\u65b0\u5f53\u524d\u533a\u95f4\u4e3a\u9ed1\u70b9\uff0c\u5c06 $val$ \u6539\u4e3a $inf$\uff0c\u5e76\u7ed9\u5f53\u524d\u533a\u95f4\u6253\u4e0a\u6807\u8bb0 $tag=2$\u3002\n\n    \u7528\u4e24\u4e2a\u5b50\u533a\u95f4\u7684 $val$ \u66f4\u65b0\u5f53\u524d\u533a\u95f4\u7684 $val$\u3002\n\n4. \u4e0b\u4f20\u61d2\u6807\u8bb0\n\n    $tag=1$\uff1a\u5c06\u4e24\u4e2a\u5b50\u533a\u95f4\u7684 $val$ \u66f4\u65b0\u4e3a $all$\uff0c\u6062\u590d\u8d21\u732e\u3002\n    \n    $tag=2$\uff1a\u5c06\u4e24\u4e2a\u5b50\u533a\u95f4\u7684 $val$ \u66f4\u65b0\u4e3a $inf$\uff0c\u5220\u9664\u8d21\u732e\u3002\n    \n    \u6700\u540e\u6e05\u7a7a\u5f53\u524d\u533a\u95f4\u7684 $tag=0$\u3002\n    \n5. \u67e5\u8be2\n\n    \u76f4\u63a5\u8fd4\u56de\u6839\u8282\u70b9\u7684 $val$ \u5c31\u662f\u6240\u6709\u767d\u70b9 dfs \u5e8f\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\n\n```cpp\n/*\u533a\u5206\u6ce8\u91ca\u91cc\u7684\u8282\u70b9\uff08\u9ed1+\u767d\uff09\u548c\u767d\u70b9 qwq*/\nnamespace SegmentTree\n{\n    #define lc(i) i << 1\n    #define rc(i) i << 1 | 1\n    const int INF = 1 << 30;\n    struct type// \u4e8c\u5143\u7ec4\uff0c\u76f8\u5f53\u4e8epair\u3002\n    {\n        int maxn, minn;\n        void update(int x){maxn = max(maxn, x), minn = min(minn, x);}\n        type(int maxn = -INF, int minn = +INF) : maxn(maxn), minn(minn){}\n    };\n    struct node\n    {\n        int l, r, tag;//tag \u662f\u5f53\u524d\u533a\u95f4\u7684\u9ed1\uff0c\u767d\u6027\u8d28\u61d2\u6807\u8bb0\uff1atag=1 \u767d\u70b9\uff1btag=2 \u9ed1\u70b9\uff1btag=0 \u6ca1\u6709\u6807\u8bb0\u3002\n        type val, all;//all \u4e3a\u5f53\u524d\u533a\u95f4\u6240\u6709\u8282\u70b9\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0cval \u4e3a\u6240\u6709\u767d\u70b9\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\n        node(int l = 0, int r = 0, int tag = 0) : l(l), r(r), tag(tag){}\n    };\n    node tr[N << 4];\n    void up(node &i, int tag)\n    {\n        i.tag = tag;\n        if (tag == 1) i.val = i.all;//\u767d\u70b9\u5c31\u6062\u590d\u8d21\u732e\u3002\n        if (tag == 2) i.val = type(-INF, +INF);//\u9ed1\u70b9\u5c31\u6e05\u9664\u8d21\u732e\u3002\n    }\n    type change(const type &A, const type &B)//\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u8d21\u732e\u5408\u5e76\u3002\n    {\n        return type(max(A.maxn, B.maxn), min(A.minn, B.minn));\n    }\n    void push_down(int i)//\u4e0b\u4f20\u6807\u8bb0\u3002\n    {\n        if (tr[i].tag)\n        {\n            up(tr[lc(i)], tr[i].tag);\n            up(tr[rc(i)], tr[i].tag);\n            tr[i].tag = 0;\n        }\n    }\n    void build(int l, int r, int i = 1)//\u5efa\u6811\u3002\n    {\n        tr[i] = node(l, r);\n        if (l == r)\n            return tr[i].all.update(LCA::dfn[l]);//\u6743\u503c\u66f4\u65b0\u4e3a dfs \u5e8f\u3002\n        int mid = (l + r) >> 1;\n        build(l, mid, lc(i));\n        build(mid + 1, r, rc(i));\n        tr[i].all = change(tr[lc(i)].all, tr[rc(i)].all);//\u8bb0\u5f97push_up\u6240\u6709\u8282\u70b9\u7684\u8d21\u732e\uff0c\u6240\u6709\u8282\u70b9\u8282\u70b9\u8282\u70b9\u3002\n    }\n    void update(int l, int r, int tag, int i = 1)\n    {\n        if (tr[i].l > r || tr[i].r < l)\n            return void();\n        if (tr[i].l >= l && tr[i].r <= r)\n            return up(tr[i], tag);\n        push_down(i);\n        update(l, r, tag, lc(i));\n        update(l, r, tag, rc(i));\n        tr[i].val = change(tr[lc(i)].val, tr[rc(i)].val);//\u8bb0\u5f97push_up\u6240\u6709\u767d\u70b9\u7684\u8d21\u732e\uff0c\u6240\u6709\u767d\u70b9\u767d\u70b9\u767d\u70b9\u3002\n    }\n    type query(){return tr[1].val;}//\u76f4\u63a5\u8fd4\u56de\u6839\u8282\u70b9\u3002\n}\nsigned main()// opt=1|2 \u65f6\u7684\u4fee\u6539\u64cd\u4f5c\u3002\n{\n    SegmentTree::build(1, n);//\u53ea\u7528\u5efa [1,n]\uff0c\u65b0\u52a0\u5165\u7684\u70b9\u4e0d\u53ef\u80fd\u88ab\u4fee\u6539\u3002\n    /*=====================*/\n    if (opt < 3)\n    \tupdate(l, r, opt);\n    else\n    \tquery();\n}\n```\n\n## \u6d41\u7a0b\n\n- \u6784\u5efa Kruskal \u91cd\u6784\u6811-**\u6700\u5c0f**\u751f\u6210\u6811\u3002\n- \u901a\u8fc7 dfs \u5bf9 Kruskal \u91cd\u6784\u6811-\u6700\u5c0f\u751f\u6210\u6811\u6c42\u6240\u6709\u70b9 dfs \u5e8f\u3002\n- \u5bf9\u70b9 $[1,n]$ \u7684 dfs \u5e8f\u6784\u5efa\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4**\u767d\u70b9**\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\u5bf9\u4e8e\u9ed1\u767d\u70b9\uff0c\u6253\u4e2a $tag$ \u5c31\u884c\u4e86\u3002\n- \u6c42\u5f53\u524d**\u6240\u6709\u767d\u70b9\u548c\u5f53\u524d\u8282\u70b9**\u7684 dfs \u5e8f\u6700\u5927\u7684\u70b9\u4e0e dfs \u5e8f\u6700\u5c0f\u7684\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u5c31\u662f\u5f53\u524d\u70b9\u4e0e\u6240\u6709\u767d\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u6743\u503c\u5373\u53ef\u3002\n\n## Code\n\n\u5b8c\u6574\u4ee3\u7801 $5\\operatorname{KB}$ \u592a\u957f\u4e86\uff0c\u6254\u5927\u6279\u91cf\u4ee3\u7801\u4f1a\u663e\u5f97\u592a\u81c3\u80bf\uff0c\u4e8e\u662f\u5c31\u6254\u4e86\u4e2a\u94fe\u63a5\uff1a\u82e5\u6709\u9700\u8981\u518d click [here](https://www.luogu.com.cn/paste/115fjz3l)\u3002\n\n## \u603b\u7ed3\n\nKruskal \u91cd\u6784\u6811\uff1a[My luogu Blog:KruskalTree](https://www.luogu.com.cn/blog/MarchKidJoe/zui-xiao-sheng-cheng-shu)\n\nKruskal \u91cd\u6784\u6811\uff1a[My WordPress Blog:KruskalTree](http://marchkidjoe.mygamesonline.org/minimum_spanning_tree/)\n\n\u4ee3\u7801\u91cf\u6bd4\u8f83\u5927\u7684\u9898\uff0c\u53ea\u662f\u8003\u7684\u7b97\u6cd5\u591a\u800c\u5df2\uff0c\u5c31\u50cf [CF487E Tourists](https://www.luogu.com.cn/problem/CF487E)\u3002",
        "postTime": 1663941002,
        "uid": 239163,
        "name": "MarchKid_Joe",
        "ccfLevel": 6,
        "title": "CF1628E"
    },
    {
        "content": "### [\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1628E)\n\n\u8fd9\u9053\u9898\u9700\u8981\u4f1a\u533a\u95f4 $\\text{LCA}$\u3002\n\n\u53ef\u4ee5\u505a\u4e00\u4e0b\u8fd9\u9053\u9898\uff1a[Company](https://www.luogu.com.cn/problem/CF1062E)||\n[\u6211\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/hegm/solution-cf1062e)\n\n\u8003\u8651\u5efa\u6811\uff0c\u7531\u4e8e\u4e24\u70b9\u95f4\u8def\u5f84\u552f\u4e00\uff0c\u6240\u4ee5\u9700\u8981\u67e5\u8be2\u4e24\u70b9\u95f4\u7684\u6700\u5927\u53ef\u80fd\u6743\u503c\uff0c\u5373\u4e3a\u4e24\u70b9\u95f4\u7684\u6700\u5c0f\u74f6\u9888\u8def\uff0c\u5efa\u7acb\u6700\u5c0f $\\text{Kruskal}$ \u91cd\u6784\u6811\u3002\n\n\u56e0\u4e3a\u70b9\u6743\u4ece\u4e0b\u5230\u4e0a\u4e3a\u5347\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u76ee\u7684\u662f\u8ba9\u7ed9\u5b9a\u7684 $x$ \u70b9\u548c\u6240\u6709\u767d\u70b9\u7684 $\\text{LCA}$ \u6df1\u5ea6\u6700\u5c0f\u3002\n\n\u4f7f\u7528\u4e0a\u9762\u54ea\u9053\u9898\u7684\u601d\u8def\uff0c\u591a\u4e2a\u6570 $\\text{LCA}$ \u4e3a $dfn_{max}$ \u548c $dfn_{min}$ \u7684 $\\text{LCA}$\u3002\n\n\u90a3\u4e48 $ans=\\max(\\text{lca}(x,dfn_{max}) , \\text{lca}(x,dfn_{min}))$\u3002\uff08\u8fd9\u91cc\u7684 $dfn_{max,min}$ \u662f\u6307 $dfn$ \u6700\u5927\u6700\u5c0f\u7684\u767d\u70b9\uff09\u3002\n\n\u90a3\u4e48 $3$ \u64cd\u4f5c\u89e3\u51b3\u4e86\u3002\n\n\u5982\u4f55\u89e3\u51b3 $1,2$ \u634f\uff1f\n\n\u5efa\u51fa\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u5b58\u50a8\u6240\u6709\u70b9\u662f\u9ed1\u70b9\uff0c\u8fd8\u662f\u767d\u70b9\uff0c $\\text{push\\_up}$ \u7684\u65f6\u5019\u7edf\u8ba1\u51fa\u6240\u6709\u767d\u70b9\u7684 $dfn_{min,max}$\u3002\n\n\u505a\u5b8c\u4e86 ![](//\u5567.tk/cy) \n\n\u653e\u4e0b\u4ee3\u7801\n\n\n------------\n\n\n### $\\text{CODE}$\n\n```cpp\n#include<bits/stdc++.h>\n#define N 1000005\n#define inf 1000000009\n#define ls (now<<1)\n#define rs (now<<1|1)\nusing namespace std;\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nint n,f[N],cnt,tot,dfn[N],fa[N][20],t[N],dep[N],awa,lx,rx,head[N],val[N],q;\nstruct edge\n{\n\tint u,v,w;\n}e[N];\nbool cmp(edge a,edge b){return a.w<b.w;}\nint find(int now)\n{\n\tif(now==f[now])return now;\n\treturn f[now]=find(f[now]);\n}\nstruct fig\n{\n\tint from,to,next;\n}k[N];\nstruct tree\n{\n\tint l,r,mx,mn,tag;\n\tint rx,rn;//\u5168\u4f53\u7684dfn \n\tbool vis;//0\u767d\uff0c1\u9ed1 \n}tr[N*4];\nvoid add(int from,int to)\n{\n\tk[++tot].from=from;\n\tk[tot].to=to;\n\tk[tot].next=head[from];\n\thead[from]=tot;\n}\nvoid dfs(int now,int f)\n{\n\tdfn[now]=++awa;\n\tt[awa]=now;\n\tdep[now]=dep[f]+1;\n\tfa[now][0]=f;\n\tfor(int i=1;i<=19;i++)fa[now][i]=fa[fa[now][i-1]][i-1];\n\tfor(int i=head[now];i;i=k[i].next)dfs(k[i].to,now);\n}\nvoid up(int now)\n{\n\ttr[now].vis=1;\n\tif(!tr[ls].vis&&!tr[rs].vis)\n\t{\n\t\ttr[now].mx=max(tr[ls].mx,tr[rs].mx);\n\t\ttr[now].mn=min(tr[ls].mn,tr[rs].mn);\n\t\ttr[now].vis=0;\n\t}\n\telse if(!tr[ls].vis)\n\t{\n\t\ttr[now].mx=tr[ls].mx;\n\t\ttr[now].mn=tr[ls].mn;\n\t\ttr[now].vis=0;\n\t}\n\telse if(!tr[rs].vis)\n\t{\n\t\ttr[now].mx=tr[rs].mx;\n\t\ttr[now].mn=tr[rs].mn;\n\t\ttr[now].vis=0;\n\t}\n}\nvoid down(int now)\n{\n\tif(tr[now].tag==-1)return ;\n\tif(tr[now].tag==1)\n\t{\n\t\ttr[ls].tag=tr[rs].tag=1;\n\t\ttr[ls].vis=tr[rs].vis=1;\n\t\ttr[ls].mx=tr[rs].mn=0;\n\t\ttr[ls].mn=tr[rs].mn=inf;\n\t\ttr[now].tag=-1;\n\t}\n\tif(tr[now].tag==0)\n\t{\n\t\ttr[ls].vis=tr[rs].vis=0;\n\t\ttr[ls].tag=tr[rs].tag=0;\n\t\ttr[ls].mx=tr[ls].rx;tr[ls].mn=tr[ls].rn;\n\t\ttr[rs].mx=tr[rs].rx;tr[rs].mn=tr[rs].rn; \n\t\ttr[now].tag=-1;\n\t}\n}\nvoid build(int now,int l,int r)\n{\n\ttr[now].l=l;tr[now].r=r;\n\ttr[now].vis=1;tr[now].tag=-1;tr[now].mn=inf;\n\tif(l==r)\n\t{\n\t\ttr[now].rn=dfn[l];\n\t\ttr[now].rx=dfn[l];\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\ttr[now].rx=max(tr[ls].rx,tr[rs].rx);\n\ttr[now].rn=min(tr[ls].rn,tr[rs].rn);\n}\nvoid midy(int now,int cl,int cr,int x)\n{\n\tif(tr[now].l>=cl&&tr[now].r<=cr)\n\t{\n\t\ttr[now].tag=x;\n\t\ttr[now].vis=x;\n\t\tif(x==1)\n\t\t{\n\t\t\ttr[now].mn=inf;\n\t\t\ttr[now].mx=0;\n\t\t}\n\t\tif(x==0)\n\t\t{\n\t\t\ttr[now].mx=tr[now].rx;\n\t\t\ttr[now].mn=tr[now].rn;\n\t\t}\n\t\treturn ; \n\t}\n\tdown(now);\n\tint mid=(tr[now].l+tr[now].r)>>1;\n\tif(mid>=cl&&tr[ls].tag!=x)midy(ls,cl,cr,x);\n\tif(mid<cr&&tr[rs].tag!=x)midy(rs,cl,cr,x);\n\tup(now);\n}\nvoid que(int now,int cl,int cr)//\u8bb0\u5f97\u521d\u59cb\u5316lx \n{\n\tif(now==1)lx=inf,rx=0;\n\tif(tr[now].l>=cl&&tr[now].r<=cr)\n\t{\n\t\tif(!tr[now].vis)\n\t\t{\n\t\t\tlx=min(lx,tr[now].mn);\n\t\t\trx=max(rx,tr[now].mx);\n\t\t}\n\t\treturn ;\n\t}\n\tdown(now);\n\tint mid=(tr[now].l+tr[now].r)>>1;\n\tif(mid>=cl)que(ls,cl,cr);\n\tif(mid<cr)que(rs,cl,cr);\n\tup(now);\n}\nint lca(int a,int b)\n{\n\tif(dep[a]<dep[b])swap(a,b);\n\tfor(int i=19;i>=0;i--)if(dep[fa[a][i]]>=dep[b])a=fa[a][i];\n\tif(a==b)return val[a];\n\tfor(int i=19;i>=0;i--)if(fa[a][i]!=fa[b][i])a=fa[a][i],b=fa[b][i];\n\treturn val[fa[a][0]]; \n}\nsigned main()\n{\n\tn=read();q=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\te[i].u=read();\n\t\te[i].v=read();\n\t\te[i].w=read();\n\t}\n\tsort(e+1,e+n,cmp);cnt=n;\n\tfor(int i=1;i<=2*n;i++)f[i]=i;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u=find(e[i].u),v=find(e[i].v);\n\t\tf[u]=f[v]=++cnt;\n\t\tval[cnt]=e[i].w;\n\t\tadd(cnt,u);add(cnt,v);\n\t}\n\tdfs(cnt,0);\n\tbuild(1,1,n);\n\tint op,l,r,x;\n\twhile(q--)\n\t{\n\t\top=read();\n\t\tif(op==3)\n\t\t{\n\t\t\tx=read();\n\t\t\tque(1,1,n);\n\t\t\tif(lx==rx&&t[lx]==x)cout<<-1<<\"\\n\";\n\t\t\telse if(rx==0)cout<<-1<<\"\\n\";\n\t\t\telse cout<<max(lca(x,t[rx]),lca(x,t[lx]))<<\"\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tl=read();r=read();\n\t\tif(op==1)midy(1,l,r,0);\n\t\telse midy(1,l,r,1);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1667543411,
        "uid": 331947,
        "name": "hegm",
        "ccfLevel": 0,
        "title": "CF1628E Groceries in Meteor Town \u9898\u89e3"
    },
    {
        "content": "### \u524d\u7f6e\u77e5\u8bc6\n- \u7ebf\u6bb5\u6811\n- $\\text{Kruskal}$ \u91cd\u6784\u6811\n- \u70b9\u96c6 $\\text{LCA}$\n\n### \u601d\u8def\n\n\u770b\u5230\u8be2\u95ee\u4e3a $x$ \u5230\u6240\u6709\u767d\u8272\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6700\u5927\u53ef\u80fd\u8fb9\u6743\uff0c\u53ef\u4ee5\u5229\u7528 $\\text{Kruskal}$ \u91cd\u6784\u6811\u8f6c\u5316\u4e3a $x$ \u4e0e\u6240\u6709\u767d\u8272\u70b9\u7684 $\\text{lca}$ \u7684\u6743\u503c\u3002\n\n\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u5feb\u901f\u6c42\u51fa\u4e00\u4e2a\u70b9\u96c6\u7684 $\\text{lca}$\uff0c\u53c2\u8003 CF1062E \u4e2d\u7684\u5957\u8def\uff0c\u7ef4\u62a4\u70b9\u96c6\u4e2d $\\text{dfs}$ \u5e8f\u6700\u5927\u4ee5\u53ca\u6700\u5c0f\u7684\u4e24\u4e2a\u70b9\uff0c\u6c42\u8fd9\u4e24\u4e2a\u70b9\u7684 $\\text{lca}$ \u5373\u4e3a\u8fd9\u4e2a\u70b9\u96c6\u7684 $\\text{lca}$\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u5148\u5efa\u51fa $\\text{Kruskal}$ \u91cd\u6784\u6811\uff0c\u7136\u540e\u5efa\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4 $\\text{dfn}$ \u6700\u5927\u6700\u5c0f\u503c\u3002\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u5982\u679c\u4e3a\u64cd\u4f5c $1$ \u5219\u66f4\u65b0\u8be5\u533a\u95f4 $\\text{dfn}$ \u6700\u5927\u503c\u6700\u5c0f\u503c\uff0c\u5426\u5219\u6e05\u7a7a\u8be5\u533a\u95f4\u3002\u5bf9\u4e8e\u8be2\u95ee\u64cd\u4f5c\uff0c\u67e5\u8be2\u5168\u5c40 $\\text{dfn}$ \u6700\u5927\u6700\u5c0f\u503c\uff0c\u4e0e $x$ \u7684 $\\text{dfn}$ \u5408\u5e76\uff0c\u6c42 $\\text{lca}$ \u6743\u503c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n + q \\log n)$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define l(x) x<<1\n#define r(x) x<<1|1\nconst int SIZE = 600005;\nconst int mod = 998244353;\nint n, T, totv;\nint head[SIZE], ver[SIZE*2], nxt[SIZE*2], tot;\nint dfn[SIZE], id[SIZE], sum[SIZE], iid;\nint a[SIZE], fa[SIZE], d[SIZE], f[SIZE][30];\n\ninline int rd(){\n\tint f = 1, x = 0;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9'){\n\t\tif(ch == '-') f = -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9'){\n\t\tx = (x << 1) + (x << 3) + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn f*x;\n}\n\nstruct E{\n\tint x, y, val; \n}e[SIZE];\n\nint get(int x){\n\tif(x == fa[x]) return x;\n\treturn fa[x] = get(fa[x]);\t\n}\n\nbool cmp(E x, E y){\n\treturn x.val < y.val;\t\n}\n\nvoid add(int x, int y){\n\tver[++tot] = y, nxt[tot] = head[x];\n\thead[x] = tot;\t\n}\n\nvoid dfs(int x, int ffa){\n\tdfn[x] = ++iid; id[dfn[x]] = x; d[x] = d[ffa] + 1; f[x][0] = ffa;\n\tfor(int i = 1; i <= 25; i++) f[x][i] = f[f[x][i-1]][i-1];\n\tfor(int i = head[x]; i; i = nxt[i]){\n\t\tint y = ver[i];\n\t\tif(y == ffa) continue;\n\t\tdfs(y, x);\n\t}\t\n}\n\nint LCA(int x, int y){\n\tif(d[x] < d[y]) swap(x, y);\n\tfor(int i = 25; i >= 0; i--){\n\t\tif(d[f[x][i]] >= d[y]) x = f[x][i];\n\t\tif(x == y) return x;\n\t}\n\tfor(int i = 25; i >= 0; i--){\n\t\tif(f[x][i] != f[y][i]){\n\t\t\tx = f[x][i], y = f[y][i];\n\t\t}\n\t}\n\treturn f[x][0];\n}\n\nstruct Tree{\n\tint l, r;\n\tint Maxx, Minx;\n\tint Max, Min;\n\tint tag;\n}t[SIZE<<2];\n\nvoid pushup(int p){\n\tt[p].Max = max(t[l(p)].Max, t[r(p)].Max);\n\tt[p].Min = min(t[l(p)].Min, t[r(p)].Min);\n\tt[p].Maxx = max(t[l(p)].Maxx, t[r(p)].Maxx);\n\tt[p].Minx = min(t[l(p)].Minx, t[r(p)].Minx);\n}\n\nvoid pushdown(int p){\n\tif(t[p].tag != -1){\n\t\tif(t[p].tag){\n\t\t\tt[l(p)].Max = t[l(p)].Maxx;\n\t\t\tt[l(p)].Min = t[l(p)].Minx;\n\t\t\tt[r(p)].Max = t[r(p)].Maxx;\n\t\t\tt[r(p)].Min = t[r(p)].Minx;\n\t\t}\n\t\telse{\n\t\t\tt[l(p)].Max = 0, t[l(p)].Min = (1<<30);\n\t\t\tt[r(p)].Max = 0, t[r(p)].Min = (1<<30);\n\t\t}\n\t\tt[l(p)].tag = t[p].tag, t[r(p)].tag = t[p].tag;\n\t\tt[p].tag = -1;\n\t}\n}\n\nvoid Build(int p, int l, int r){\n\tt[p].l = l, t[p].r = r; t[p].tag = -1;\n\tif(l == r){\n\t\tt[p].Max = 0, t[p].Min = (1<<30);\n\t\tt[p].Maxx = t[p].Minx = dfn[l];\n\t\treturn;\n\t}\t\n\tint mid = (l + r) >> 1;\n\tBuild(l(p), l, mid);\n\tBuild(r(p), mid+1, r);\n\tpushup(p);\n}\n\nvoid change(int p, int l, int r, int kk){\n\tif(l <= t[p].l && r >= t[p].r){\n\t\tif(kk){\n\t\t\tt[p].Max = t[p].Maxx;\n\t\t\tt[p].Min = t[p].Minx;\n\t\t}\n\t\telse{\n\t\t\tt[p].Max = 0, t[p].Min = (1<<30);\n\t\t}\n\t\tt[p].tag = kk;\n\t\treturn;\n\t}\n\tpushdown(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif(l <= mid) change(l(p), l, r, kk);\n\tif(r > mid) change(r(p), l, r, kk);\n\tpushup(p);\n}\n\nint main(){\n\tn = rd(), T = rd();\n\tfor(int i = 1; i < n; i++){\n\t\te[i].x = rd(), e[i].y = rd(), e[i].val = rd(); fa[i] = i;\n\t}\n\tfor(int i = n; i <= 2*n; i++) fa[i] = i;\n\tsort(e+1, e+n, cmp); totv = n;\n\tfor(int i = 1; i < n; i++){\n\t\tint x = e[i].x, y = e[i].y, val = e[i].val;\n\t\tint xx = get(x), yy = get(y);\n\t\tif(xx == yy) continue;\n\t\ttotv++;\n\t\tadd(xx, totv); add(totv, xx);\n\t\tadd(yy, totv); add(totv, yy);\n\t\ta[totv] = val;\n\t\tfa[xx] = totv;\n\t\tfa[yy] = totv;\n\t}\n\tdfs(totv, 0);\n\tBuild(1, 1, n);\n\twhile(T--){\n\t\tint op = rd();\n\t\tif(op == 1){\n\t\t\tint l = rd(), r = rd();\n\t\t\tchange(1, l, r, 1);\n\t\t}\n\t\telse if(op == 2){\n\t\t\tint l = rd(), r = rd();\n\t\t\tchange(1, l, r, 0);\t\t\t\n\t\t}\n\t\telse{\n\t\t\tint x = rd();\n\t\t\tint Min = t[1].Min, Max = t[1].Max;\n\t\t\tMin = min(Min, dfn[x]);\n\t\t\tMax = max(Max, dfn[x]);\n\t\t\tif(Min == (1<<30)){\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint x1 = id[Max], x2 = id[Min];\n\t\t\tint cc = LCA(x1, x2);\n\t\t\tif(a[cc] == 0) printf(\"-1\\n\");\n\t\t\telse printf(\"%d\\n\", a[cc]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1668692991,
        "uid": 271096,
        "name": "Semorius",
        "ccfLevel": 7,
        "title": "CF1628E"
    },
    {
        "content": "[$\\large\\text{\u9898\u76ee\u4f20\u9001\u95e8}$](https://www.luogu.com.cn/problem/CF1628E)\n\n## $\\text{Description}$\n\n- \u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u70b9\u70b9\u6743\u521d\u59cb\u4e3a $0$\uff0c\u6709\u5982\u4e0b\u64cd\u4f5c $q$ \u6b21\u3002\n- \u5c06\u5e8f\u53f7\u5728 $[l,r]$ \u4e2d\u7684\u70b9\u70b9\u6743\u6539\u4e3a $0/1$\u3002\n- \u8be2\u95ee $x$ \u5230\u6240\u6709\u70b9\u6743\u4e3a $1$ \u7684\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u6743\u3002\n\n## $\\text{Solution}$\n\n\u8003\u8651 Kruskal \u91cd\u6784\u6811\u6027\u8d28\uff1a\n\n>\u539f\u56fe\u4e2d\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c = \u6700\u5c0f\u751f\u6210\u6811\u4e0a\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c = Kruskal \u91cd\u6784\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684 LCA \u7684\u6743\u503c\u3002\n>\u2014\u2014OI WIKI\n\n\u8fd9\u662f\u5bf9\u4e8e\u4e00\u822c\u56fe\u800c\u8a00\uff0c\u8fd9\u91cc\u6211\u4eec\u662f\u6811\uff0c\u4e24\u70b9\u4e4b\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u7b80\u5355\u8def\u5f84\u3002\n\n\u90a3\u4e48\u5373\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7b80\u5355\u8def\u5f84\u7684\u6700\u5927\u8fb9\u6743 = Kruskal \u91cd\u6784\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4 LCA \u6743\u503c\u3002\n\n\u6211\u4eec\u6240\u6c42\u7684\u5373\u8be2\u95ee\u7ed9\u5b9a\u7684\u70b9\u4e0e\u5404\u4e2a\u70b9\u6743\u4e3a $1$ \u7684\u70b9\u5728 Kruskal \u91cd\u6784\u6811\u4e0a LCA \u6743\u503c\u7684\u6700\u5927\u503c\u3002\n\n\u800c\u6211\u4eec\u7531\u4e0a\u9762\u6027\u8d28\uff0c\u53c8\u53ef\u5f97\u5230\u70b9 $x$ \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u6743\u4e0d\u8d85\u8fc7 $val$  \u7684\u6240\u6709\u70b9\u5747\u5728 Kruskal \u91cd\u6784\u6811\u4e0a\u7684\u67d0\u4e00\u68f5\u5b50\u6811\u5185\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6240\u6c42\u5c31\u53ef\u8f6c\u5316\u4e3a\u8be2\u95ee\u7ed9\u5b9a\u7684\u70b9\u70b9\u4e0e\u6240\u6709\u70b9\u6743\u4e3a $1$ \u7684\u70b9\u5728 Krus \u91cd\u6784\u6811\u4e0a\u7684 LCA\u3002\n\n---\n\n\u8003\u8651\u5982\u4f55\u6c42\u591a\u70b9 LCA\u3002\n\n\u6709\u7ed3\u8bba\uff1a\u591a\u70b9 LCA \u4e3a DFS \u5e8f\u6700\u5c0f\u548c\u6700\u5927\u4e24\u70b9\u7684\u70b9 LCA\u3002\n\n\u8003\u8651\u8bc1\u660e\u7ed3\u8bba\u3002\n\n\u4ee4 $\\text{LCA(a,b)}$ \u4e3a $a$ \u548c $b$ \u7684 LCA\u3002\n\n\u8bbe DFS \u5e8f\u6700\u5c0f\u7684\u70b9\u4e3a $a$\uff0c\u6700\u5927\u7684\u70b9\u4e3a $b$\u3002\n\n\u5bf9\u4e8e\u4e2d\u95f4\u7684\u70b9 $c$\u3002\n\n$a$ \u53ef\u80fd\u662f $c$ \u7684\u7956\u5148\uff0c\u4e5f\u53ef\u80fd\u5728 $c$ \u7956\u5148\u7684\u5728 $c$ \u6240\u5728\u5b50\u6811\u5de6\u8fb9\u7684\u5b50\u6811\u5185\u3002\n\n$b$ \u53ef\u80fd\u662f $c$ \u7684\u540e\u4ee3\uff0c\u4e5f\u53ef\u80fd\u5728 $c$ \u7956\u5148\u7684\u5728 $c$ \u6240\u5728\u5b50\u6811\u53f3\u8fb9\u7684\u5b50\u6811\u5185\u3002\n\n- \u82e5 $a$ \u662f $c$ \u7684\u7956\u5148\u3002\n\n\u663e\u7136 $\\text{LCA(c,b)}$ \u548c $\\text{LCA(c,a)}$ \u90fd\u5728 $\\text{LCA(a,b)}$ \u7684\u5b50\u6811\u5185\u3002\n\n- \u82e5 $a$ \u5728 $c$  \u7956\u5148\u7684\u5728 $c$ \u6240\u5728\u5b50\u6811\u5de6\u8fb9\u7684\u5b50\u6811\u5185\u3002\n\n\t- \u82e5 $b$ \u662f $c$ \u7684\u540e\u4ee3\u3002\n    \n    $\\text{LCA(c,b)=c}$\uff0c$\\text{LCA(a,b)=LCA(a,c)}$ \u4e3a $c$ \u7684\u7956\u5148\u3002\n    \n    - \u82e5 $b$ \u5728 $c$ \u7956\u5148\u7684\u5728 $c$ \u6240\u5728\u5b50\u6811\u53f3\u8fb9\u7684\u5b50\u6811\u5185\u3002\n    \n    $\\text{LCA(a,b)=LCA(LCA(c,a),LCA(c,b))}$\u3002\uff08\u5b9e\u9645\u4e0a $\\text{LCA(c,a)}$ \u548c $\\text{LCA(c,b)}$ \u5176\u4e2d\u4e00\u4e2a\u4e3a\u53e6\u5916\u4e00\u4e2a\u7684\u7956\u5148\u6216\u4e24\u4e2a\u76f8\u540c\u3002\uff09\n    \n    \n    \n\u6545\u7ed3\u8bba\u6210\u7acb\u3002\n\n---\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u52a8\u6001\u7ef4\u62a4\u70b9\u6743\u4e3a $1$ \u7684\u70b9\u4e2d DFS \u5e8f\u6700\u5c0f\u7684\u70b9\u548c\u6700\u5927\u7684\u70b9\u3002\n\n\u53ef\u4ee5\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n+q\\log n)$\u3002\n\n~~\u7136\u800c\u6211\u5199\u7684\u662f $O(n\\alpha(n)+q\\log n)$ \u7684\u56e0\u4e3a\u6211 Kruskal \u91cd\u6784\u6811\u662f\u62f7\u4e00\u822c\u56fe\u677f\u5b50\u7684\u3002~~\n\n## $\\text{Code}$\n\n```cpp\nconst int N=6e5+5;\nint n,tot,hd[N],Q,f[N<<1][22],dep[N],dfn[N],rk[N],qwq;\nstruct edge{int t,nxt;}es[N<<1];\nint fa[N],siz[N];\ninline int found(int x){return fa[x]==x?x:fa[x]=found(fa[x]);}\ninline void merge(int x,int y){\n\tint fx=found(x),fy=found(y);\n\tif(siz[fx]<siz[fy]) swap(fx,fy);\n\tfa[fy]=fx;siz[fx]+=siz[fy];siz[fy]=0;\n}\n\nint cnte,cnt,val[N<<1];\nstruct Edge{int u,v,w;}e[N<<1];\nstruct EDGE{int t,nxt;}E[N<<3];\ninline void add(int x,int y,int z){es[++tot]=(edge){y,hd[x]};hd[x]=tot;e[tot]=(Edge){x,y,z};}\ninline void Add(int x,int y){E[++cnte]=(EDGE){y,hd[x]};hd[x]=cnte;}\ninline bool cmp(Edge x,Edge y){return x.w<y.w;}\ninline void kruscal(){\n\tcnt=n;\n\tfor(re i=1;i<=(n<<1);++i) fa[i]=i,siz[i]=1,hd[i]=0;\n\tsort(e+1,e+tot+1,cmp);\n\tfor(re i=1;i<=tot;++i)\n\t\tif(found(e[i].u)^found(e[i].v)){\n\t\t\tval[++cnt]=e[i].w;\n\t\t\tAdd(found(e[i].u),cnt);Add(cnt,found(e[i].u));Add(found(e[i].v),cnt);Add(cnt,found(e[i].v));\n\t\t\tfa[found(e[i].u)]=fa[found(e[i].v)]=cnt;\n\t\t}\n}\n\n// ---------- Kruskal ---------- //\n\ninline void dfs(int x,int fa){\n\tf[x][0]=fa;dep[x]=dep[fa]+1;dfn[x]=++qwq;rk[qwq]=x;\n\tfor(re i=hd[x];i;i=E[i].nxt)\n\t\tif(E[i].t^fa) dfs(E[i].t,x);\n}\n\ninline int LCA(int x,int y){\n\tif(dep[x]<dep[y]) swap(x,y);\n\tfor(re i=21;i>=0;--i)\n\t\tif(f[x][i]&&dep[f[x][i]]>=dep[y]) x=f[x][i];\n\tif(x==y) return x;\n\tfor(re i=21;i>=0;--i)\n\t\tif(f[x][i]&&f[x][i]^f[y][i]) x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\n\nstruct SGT{\n\t#define xl (x<<1)\n\t#define xr (x<<1|1)\n\t#define mid ((l+r)>>1)\n\tconst int INF=1e9;\n\tint mx[N<<2],mn[N<<2],Mx[N<<2],Mn[N<<2],tag[N<<2],fl[N<<2];\n\tinline void pushup(int x){mx[x]=max(mx[xl],mx[xr]);mn[x]=min(mn[xl],mn[xr]);}\n\tinline void pushdown(int x){if(fl[x]){tag[xl]=tag[xr]=tag[x];mx[xl]=(tag[xl]?Mx[xl]:0);mn[xl]=(tag[xl]?Mn[xl]:INF);mx[xr]=(tag[xr]?Mx[xr]:0);mn[xr]=(tag[xr]?Mn[xr]:INF);fl[xl]=fl[xr]=1;fl[x]=0;}}\n\tinline void build(int x,int l,int r){\n\t\tmx[x]=tag[x]=0;mn[x]=INF;\n\t\tif(l==r){Mx[x]=Mn[x]=dfn[l];return ;}\n\t\tbuild(xl,l,mid);build(xr,mid+1,r);\n\t\tMx[x]=max(Mx[xl],Mx[xr]);Mn[x]=min(Mn[xl],Mn[xr]);\n\t}\n\tinline void modify(int x,int l,int r,int L,int R,int k){\n\t\tif(L<=l&&r<=R){\n\t\t\ttag[x]=k;fl[x]=1;mx[x]=(k?Mx[x]:0);mn[x]=(k?Mn[x]:INF);\n\t\t\treturn ;\n\t\t}\n\t\tpushdown(x);\n\t\tif(mid>=L) modify(xl,l,mid,L,R,k);\n\t\tif(mid<R) modify(xr,mid+1,r,L,R,k);\n\t\tpushup(x);\n\t}\n}T;\n\n// ---------- SGT ---------- //\n\nint main(){\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n//\tios::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n\trd(n);rd(Q);\n\tfor(re i=1;i<n;++i){int x,y,z;rd(x);rd(y);rd(z);add(x,y,z);add(y,x,z);}\n\tkruscal();dfs(cnt,0);\n\tfor(re s=1;s<=21;++s)\n\t\tfor(re i=1;i<=cnt;++i) f[i][s]=f[f[i][s-1]][s-1];\n\tT.build(1,1,cnt);\n\tfor(re i=1;i<=Q;++i){\n\t\tint op,l,r;rd(op);\n\t\tif(op<=2) rd(l),rd(r),T.modify(1,1,cnt,l,r,(op-1)^1);\n\t\telse{\n\t\t\trd(l);int st=T.mn[1],ed=T.mx[1];\n\t\t\tif(st==dfn[l]&&ed==dfn[l]||ed==0) puts(\"-1\");\n\t\t\telse wr(val[LCA(LCA(rk[st],rk[ed]),l)]),puts(\"\");\n\t\t}\n\t}\n\treturn 0;\n}\n\n// ---------- Main ---------- //\n```",
        "postTime": 1651220227,
        "uid": 83999,
        "name": "Demoe",
        "ccfLevel": 7,
        "title": "CF1628E Groceries in Meteor Town \u9898\u89e3 Kruskal \u91cd\u6784\u6811"
    },
    {
        "content": "### \u9898\u610f\n\n> \u7ed9\u4f60\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u5e26\u6743\u6811\uff0c\u521d\u59cb\u6240\u6709\u9876\u70b9\u90fd\u662f\u767d\u8272\u3002\u6709 $q$ \u4e2a\u64cd\u4f5c\uff1a\n>\n> - \u5c06 $[l,r]$ \u5185\u7684\u70b9\u5168\u90e8\u67d3\u6210\u9ed1\u8272\uff1b\n> - \u5c06 $[l,r]$ \u5185\u7684\u70b9\u5168\u90e8\u67d3\u6210\u767d\u8272\uff1b\n> - \u8be2\u95ee\u79bb $x$ \u7684\u74f6\u9888\u8ddd\u79bb\u6700\u5927\u7684\u9ed1\u8272\u70b9\u5230 $x$ \u7684\u74f6\u9888\u8ddd\u79bb\u3002\n>\n> $2\\le n,q\\le 3\\times 10^5$\u3002\n\n### \u5206\u6790\n\n\u9996\u5148\u8003\u8651\u5982\u4f55\u5904\u7406\u74f6\u9888\u8ddd\u79bb\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u68f5\u7c7b\u4f3c Kruskal \u91cd\u6784\u6811\u7684\u6811\uff0c\u6bcf\u6b21\u5728\u539f\u6811\u4e2d\u9009\u51fa\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\uff0c\u5efa\u7acb\u4e00\u4e2a\u65b0\u70b9\u6743\u503c\u4e3a\u6b64\u8fb9\u8fb9\u6743\uff0c\u5b83\u7684\u4e24\u4e2a\u513f\u5b50\u662f\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u8fde\u901a\u5757\u3002\n\n\u90a3\u4e48 $(x,y)$ \u7684\u74f6\u9888\u8ddd\u79bb\u5c31\u662f $x$ \u548c $y$ \u7684 LCA \u7684\u6743\u503c\u3002\n\n\u7136\u540e\u5728 Kruskal \u91cd\u6784\u6811\u4e0a\u505a\u4e00\u904d dfs \u5e76\u6c42\u51fa dfs \u5e8f\uff0c\u90a3\u4e48\u8ddd\u79bb $x$ \u7684\u6700\u5927\u7684\u74f6\u9888\u8ddd\u79bb\u5c31\u662f\u6240\u6709\u9ed1\u8272\u70b9\u548c $x$ \u7684 LCA \u7684\u503c\u3002\n\n\u7136\u540e\u5c31\u62ff\u7ebf\u6bb5\u6811\u7ef4\u62a4 LCA \u5373\u53ef\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{\n\tint x,y,z;\n\tbool operator <(const edge &b)const{\n\t\treturn z<b.z;\n\t}\n}e[300005];\nint n,q;\nint son[600005][2],cnt,val[600005];\nint fa[600005];\nint pe[600005][25];\nint dep[600005];\nint tree[2000005],tag[2000005],lca[2000005];\nint get(int x){return x==fa[x]?x:fa[x]=get(fa[x]);}\nvoid dfs(int x){\n\tif(son[x][0]){\n\t\tdep[son[x][0]]=dep[x]+1;\n\t\tdfs(son[x][0]);\n\t\tpe[son[x][0]][0]=x;\n\t}if(son[x][1]){\n\t\tdep[son[x][1]]=dep[x]+1;\n\t\tdfs(son[x][1]);\n\t\tpe[son[x][1]][0]=x;\n\t}\n}\nint LCA(int x,int y){\n\tif(!x||!y)return x|y;\n\tint k=20;\n\twhile(dep[x]!=dep[y]&&k>=0){\n\t\tif(dep[x]<dep[y])swap(x,y);\n\t\tif(dep[pe[x][k]]>=dep[y])x=pe[x][k];\n\t\tk--;\n\t}\n\tif(x==y)return x;\n\tk=20;\n\twhile(k>=0){\n\t\tif(pe[x][k]!=pe[y][k])x=pe[x][k],y=pe[y][k];\n\t\tk--;\n\t}\n\treturn pe[x][0];\n}\nvoid build(int k,int l,int r){\n\ttag[k]=-1;\n\tif(l==r){\n\t\tlca[k]=l;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(k*2,l,mid);\n\tbuild(k*2+1,mid+1,r);\n\tlca[k]=LCA(lca[k*2],lca[k*2+1]);\n}\nvoid pushdown(int k,int l,int r){\n\tif(tag[k]>=0){\n\t\tif(tag[k]){\n\t\t\ttree[k*2]=lca[k*2];\n\t\t\ttree[k*2+1]=lca[k*2+1];\n\t\t}else{\n\t\t\ttree[k*2]=0;\n\t\t\ttree[k*2+1]=0;\n\t\t}\n\t\ttag[k*2]=tag[k*2+1]=tag[k];\n\t\ttag[k]=-1;\n\t}\n}\nvoid update(int k,int l,int r,int x,int y,int z){\n\tif(l>=x&&r<=y){\n\t\tif(z)tree[k]=lca[k];\n\t\telse tree[k]=0;\n\t\ttag[k]=z;\n\t\treturn;\n\t}\n\tpushdown(k,l,r);\n\tint mid=l+r>>1;\n\tif(x<=mid)update(k*2,l,mid,x,y,z);\n\tif(y>mid)update(k*2+1,mid+1,r,x,y,z);\n\ttree[k]=LCA(tree[k*2],tree[k*2+1]);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<=n;i++)fa[i]=i,val[i]=-1;\n\tfor(int i=1;i<n;i++)scanf(\"%d%d%d\",&e[i].x,&e[i].y,&e[i].z);\n\tsort(e+1,e+n);\n\tcnt=n;\n\tfor(int i=1;i<n;i++){\n\t\tint x=get(e[i].x),y=get(e[i].y);\n\t\tson[++cnt][0]=x,son[cnt][1]=y,val[cnt]=e[i].z;\n\t\tfa[x]=fa[y]=fa[cnt]=cnt;\n\t}\n\tdep[cnt]=1;\n\tdfs(cnt);\n\tfor(int j=1;j<=20;j++)for(int i=1;i<=cnt;i++)pe[i][j]=pe[pe[i][j-1]][j-1];\n\tbuild(1,1,n);\n\twhile(q--){\n\t\tint opt;scanf(\"%d\",&opt);\n\t\tif(opt==1){\n\t\t\tint l,r;scanf(\"%d%d\",&l,&r);\n\t\t\tupdate(1,1,n,l,r,1);\n\t\t}else if(opt==2){\n\t\t\tint l,r;scanf(\"%d%d\",&l,&r);\n\t\t\tupdate(1,1,n,l,r,0);\n\t\t}else{\n\t\t\tint x;scanf(\"%d\",&x);\n\t\t\tprintf(\"%d\\n\",val[LCA(x,tree[1])]);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1644727535,
        "uid": 233462,
        "name": "Umbrella_Leaf",
        "ccfLevel": 8,
        "title": "\u9898\u89e3CF1628E Groceries in Meteor Town"
    },
    {
        "content": "\u65b9\u4fbf\u8d77\u89c1\uff0c\u8bbe\u6811\u4e0a\u6709\u8282\u70b9 $u,v$\uff0c\u5b9a\u4e49 $\\mathrm{maxv}(u,v)$ \u8868\u793a $u,v$ \u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\uff08\u82e5 $u=v$\uff0c\u4e0d\u59a8\u8bbe $\\mathrm{maxv}(u,v)=-1$\uff09\uff1b\u8bbe $S$ \u662f\u6811\u4e0a\u4e00\u70b9\u96c6\uff0c\u5b9a\u4e49 $\\mathrm{maxv}(u,S)=\\max_{u,v\\in S}\\{\\mathrm{maxv}(u,v)\\}$\uff1b\u5bf9\u6811\u4e0a\u67d0\u8282\u70b9 $u$ \u548c\u67d0\u70b9\u96c6 $S$\uff0c\u5b9a\u4e49 $\\mathrm{maxv}(u,S)=\\max_{v\\in S} \\{\\mathrm{maxv}(u,v)\\}$\n\n\u7ecf\u5178\u7ed3\u8bba\uff1a\u8bbe\u6811\u4e0a\u6709\u70b9\u96c6 $S_1,S_2$\uff0c$u$ \u662f $S_1$ \u4e2d\u4efb\u610f\u4e00\u8282\u70b9\uff0c$v$ \u662f $S_2$ \u4e2d\u4efb\u610f\u4e00\u8282\u70b9\u3002\u90a3\u4e48\n\n$$\\mathrm{maxv}(S_1\\cup S_2)=\\max\\{\\max\\{\\mathrm{maxv}(S_1),\\mathrm{maxv}(S_2)\\},\\mathrm{maxv}(u,v)\\}$$\n\n\u8fd9\u4e2a\u7ed3\u8bba\u5728\u4e4b\u524d\u7684 CF \u9898\u76ee\u4e2d\u4e5f\u6709\u51fa\u8fc7\uff0c\u6b64\u5904\u7565\u53bb\u8be6\u7ec6\u8bc1\u660e\u3002\u7279\u522b\u5730\uff0c\u53d6 $S_2$ \u4e3a\u5355\u70b9\u96c6 $\\{u\\}$\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86 $\\mathrm{maxv}(u,S)$ \u7684\u8ba1\u7b97\u65b9\u6cd5\u3002\n\n\u56de\u5230\u539f\u9898\u3002\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5f00\u7684\u70b9\u96c6 $S$\uff0c\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u8fd9\u4e2a\u533a\u95f4\u5185\u6240\u6709\u5f00\u7684\u8282\u70b9\u7ec4\u6210\u7684\u8fde\u901a\u5757\u4e2d\u7684\u6700\u5927\u8fb9\u6743\uff0c\u4ee5\u53ca\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff08**\u4ee3\u8868\u70b9**\uff09\u3002\u4e3a\u4e86\u5feb\u901f\u5904\u7406\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\uff0c\u521d\u59cb\u5316\u65f6\u53ef\u4ee5\u5904\u7406\u4e00\u4e0b\u6bcf\u4e2a\u533a\u95f4\u7684\u70b9\u5168\u5f00\u65f6\u7684\u7b54\u6848\u3002\u5408\u5e76\u7684\u65f6\u5019\uff0c\u5927\u533a\u95f4\u7684\u7b54\u6848\u5bf9\u4e24\u4e2a\u5c0f\u533a\u95f4\u7684\u7b54\u6848\uff0c\u4ee5\u53ca\u5c0f\u533a\u95f4\u4ee3\u8868\u70b9\u95f4\u7684\u6700\u5927\u8fb9\u6743\u53d6 $\\max$\u3002\u5904\u7406\u8be2\u95ee\u7684\u65f6\u5019\u4e5f\u7c7b\u4f3c\u3002\n\n\u82e5\u91c7\u7528\u6811\u4e0a\u500d\u589e\u7684\u65b9\u6cd5 $O(\\log n)$ \u6734\u7d20\u8ba1\u7b97\u4e24\u70b9\u95f4\u6700\u5927\u8fb9\u6743\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\uff0c\u4f1a\u906d\u5230\u51fa\u9898\u4eba\u5b9a\u5411\u9488\u5bf9\u3002\u8003\u8651\u4f18\u5316\u8ba1\u7b97\u4e24\u70b9\u95f4\u6700\u5927\u8fb9\u6743\u7684\u590d\u6742\u5ea6\uff1a\u5efa\u7acb Kruskal \u91cd\u6784\u6811\uff0c\u5219\u6bcf\u6b21\u76f8\u5f53\u4e8e\u8ba1\u7b97\u4e24\u70b9 LCA\uff0c\u53ef\u4ee5\u7528 Euler \u5e8f\u505a\u5230\u9884\u5904\u7406 $O(n\\log n)$\u3001\u5355\u6b21\u67e5\u8be2 $O(1)$ \u7684\u590d\u6742\u5ea6\u3002\u8fd9\u6837\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n\u4e00\u4efd $O(n\\log^2 n)$\u3001\u5728\u8d5b\u65f6\u72c2 T \u4e0d\u6b62\u7684\u4ee3\u7801\uff08\u6028\u5ff5.jpg\uff09\uff1a\n\n```cpp\n#include<cstdio>\n#include<vector>\n\nusing namespace std;\n\n\nint fast_read()\n{\n\tchar ch='\\0';\n\twhile(!(ch>='0'&&ch<='9'))ch=getchar();\n\tint x=0;while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x;\n}\n\nstruct e\n{\n\tint to,val;e(int _to=0,int _val=0):to(_to),val(_val){}\n};\nvector<e> ed[400000];int fa[400000][20],maxval[400000][20],dep[400000];\n\nvoid dfs_bas(int u,int f=0)\n{\n\tdep[u]=dep[f]+1;\n\tfa[u][0]=f;for(int i=1;i<20;i++)fa[u][i]=fa[fa[u][i-1]][i-1],maxval[u][i]=max(maxval[u][i-1],maxval[fa[u][i-1]][i-1]);\n\tfor(int i=0;i<ed[u].size();i++)\n\t{\n\t\tint v=ed[u][i].to;if(v==f)continue;maxval[v][0]=ed[u][i].val;dfs_bas(v,u);\n\t}\n}\nint query(int x,int y)\n{\n\tif(dep[x]<dep[y])swap(x,y);int ans=-1;\n\tfor(int i=18;i>=0;i--)if(dep[fa[x][i]]>=dep[y]){ans=max(ans,maxval[x][i]);x=fa[x][i];}if(x==y)return ans;\n\tfor(int i=18;i>=0;i--)if(fa[x][i]!=fa[y][i]){ans=max(ans,max(maxval[x][i],maxval[y][i]));x=fa[x][i],y=fa[y][i];}\n\treturn max(ans,max(maxval[x][0],maxval[y][0]));\n}\n/*\nint query_anc(int x,int d)\n{\n\tint ans=-1;for(int i=18;i>=0;i--)if(d&(1<<i)){ans=max(ans,maxval[x][i]);x=fa[x][i];}return ans;\n}\nint query(int x,int y)\n{\n\tint l=LCA(x,y);return max(query_anc(x,dep[x]-dep[l]),query_anc(y,dep[y]-dep[l]));\n}*/\n\nstruct SegmentTree\n{\n\tstruct nd\n\t{\n\t\tint tag,l,r,pos,ans,ans_1;\n\t}t[2000000];\n\tvoid build(int l,int r,int k=1)\n\t{\n\t\tt[k].l=l,t[k].r=r,t[k].tag=-1,t[k].pos=0,t[k].ans=t[k].ans_1=-1;if(l==r)return;\n\t\tint mid=(l+r)>>1;build(l,mid,k<<1),build(mid+1,r,k<<1|1);\n\t\tt[k].ans_1=max(max(t[k<<1].ans_1,t[k<<1|1].ans_1),query(mid,mid+1));\n\t}\n\tvoid add_tag(int k,int tag)\n\t{\n\t\tif(tag==-1)return;\n\t\tt[k].tag=tag;\n\t\tif(tag==0){t[k].pos=0,t[k].ans=-1;}\n\t\telse{t[k].pos=t[k].l,t[k].ans=t[k].ans_1;}\n\t}\n\tvoid spread(int k)\n\t{\n\t\tadd_tag(k<<1,t[k].tag),add_tag(k<<1|1,t[k].tag);t[k].tag=-1;\n\t}\n\tvoid update(int k)\n\t{\n\t\tif(t[k<<1].pos==0&&t[k<<1|1].pos==0){t[k].pos=0,t[k].ans=-1;return;}\n\t\tif(t[k<<1].pos==0){t[k].pos=t[k<<1|1].pos,t[k].ans=t[k<<1|1].ans;return;}\n\t\tif(t[k<<1|1].pos==0){t[k].pos=t[k<<1].pos,t[k].ans=t[k<<1].ans;return;}\n\t\tt[k].pos=t[k<<1].pos,t[k].ans=\n\t\tmax(max(t[k<<1].ans,t[k<<1|1].ans),query(t[k<<1].pos,t[k<<1|1].pos));\n\t}\n\tvoid modify(int l,int r,int tag,int k=1)\n\t{\n\t\tif(l>t[k].r||r<t[k].l)return;\n\t\tif(l<=t[k].l&&t[k].r<=r){add_tag(k,tag);return;}\n\t\tspread(k);modify(l,r,tag,k<<1),modify(l,r,tag,k<<1|1);update(k);\n\t}\n}T;\n\nint main()\n{\n\t//freopen(\"CF1628E.in\",\"r\",stdin);\n\t//freopen(\"CF1628E.out\",\"w\",stdout);\n\tint n=fast_read();int q=fast_read();\n\tfor(int i=1,u=0,v=0,w=0;i<n;i++)\n\t{\n\t\tu=fast_read();v=fast_read();w=fast_read();\n\t\ted[u].push_back(e(v,w)),ed[v].push_back(e(u,w));\n\t}\n\tdfs_bas(1);T.build(1,n);\n\twhile(q--)\n\t{\n\t\tint op=0;op=fast_read();\n\t\tif(op==1)\n\t\t{\n\t\t\tint l=fast_read();int r=fast_read();T.modify(l,r,1);\n\t\t}\n\t\telse if(op==2)\n\t\t{\n\t\t\tint l=fast_read();int r=fast_read();T.modify(l,r,0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint x=fast_read();\n\t\t\tint ans=T.t[1].ans;if(T.t[1].pos)ans=max(ans,query(x,T.t[1].pos));\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n}\n```",
        "postTime": 1642903120,
        "uid": 112794,
        "name": "\u5468\u5b50\u8861",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1628E\u3010Groceries in Meteor Town\u3011"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[Kruskal \u91cd\u6784\u6811](https://oi-wiki.org/graph/mst/#kruskal-\u91cd\u6784\u6811)\u3001[\u7ebf\u6bb5\u6811](https://oi-wiki.org/ds/seg/)\n\n\u770b\u5230\u8def\u5f84\u6700\u5927\u503c\uff0c\u8003\u8651\u5efa\u51fa\u539f\u6811\u7684 Kruskal \u91cd\u6784\u6811\u3002\n\n\u7136\u540e\u4ece $x$ \u51fa\u53d1\u5230\u8fbe\u4efb\u610f\u4e00\u4e2a\u767d\u8272\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u8fb9\u7684\u6700\u5927\u6743\u503c\u5c31\u662f $x$ \u4e0e\u5f53\u524d\u6240\u6709\u767d\u8272\u70b9\u5728 Kruskal \u91cd\u6784\u6811\u4e0a\u7684 LCA \u7684\u6743\u503c\u3002\u65e0\u89e3\u5f53\u4e14\u4ec5\u5f53\u6ca1\u6709\u767d\u8272\u70b9\u6216\u767d\u8272\u70b9\u53ea\u6709 $x$ \u4e00\u4e2a\u3002\n\n\u4e8e\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4 LCA \u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log^2 n)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\n\ntypedef struct {\n\tint nxt;\n\tint start;\n\tint end;\n\tint dis;\n} Edge;\n\ntypedef struct {\n\tint l;\n\tint r;\n\tint tag;\n\tint full_lca;\n\tint cur_lca;\n} Node;\n\nint cnt = 0;\nint root[600007], val[600007], head[600007], depth[600007], fa[600007][27];\nEdge edge1[300007], edge2[600007];\nNode tree[2400007];\n\nbool operator <(const Edge a, const Edge b){\n\treturn a.dis < b.dis;\n}\n\ninline void init(int n){\n\tfor (register int i = 1; i <= n; i++){\n\t\troot[i] = i;\n\t}\n}\n\ninline int read(){\n\tint ans = 0;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9'){\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9'){\n\t\tans = ans * 10 + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn ans;\n}\n\nint get_root(int x){\n\tif (root[x] == x) return x;\n\treturn root[x] = get_root(root[x]);\n}\n\ninline void add_edge(int start, int end){\n\tcnt++;\n\tedge2[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge2[cnt].end = end;\n}\n\nvoid dfs(int u){\n\tint t;\n\tdepth[u] = depth[fa[u][0]] + 1;\n\tt = log2(depth[u]);\n\tfor (register int i = 1; i <= t; i++){\n\t\tfa[u][i] = fa[fa[u][i - 1]][i - 1];\n\t}\n\tfor (register int i = head[u]; i != 0; i = edge2[i].nxt){\n\t\tdfs(edge2[i].end);\n\t}\n}\n\ninline int lca(int u, int v){\n\tif (u == 0) return v;\n\tif (v == 0) return u;\n\tif (depth[u] < depth[v]) swap(u, v);\n\twhile (depth[u] > depth[v]) u = fa[u][(int)log2(depth[u] - depth[v])];\n\tif (u == v) return u;\n\tfor (register int i = log2(depth[u]); i >= 0; i--){\n\t\tif (fa[u][i] != fa[v][i]){\n\t\t\tu = fa[u][i];\n\t\t\tv = fa[v][i];\n\t\t}\n\t}\n\treturn fa[u][0];\n}\n\ninline void update1(int x){\n\ttree[x].full_lca = lca(tree[x * 2].full_lca, tree[x * 2 + 1].full_lca);\n}\n\nvoid build(int x, int l, int r){\n\ttree[x].l = l;\n\ttree[x].r = r;\n\tif (l == r){\n\t\ttree[x].full_lca = l;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(x * 2, l, mid);\n\tbuild(x * 2 + 1, mid + 1, r);\n\tupdate1(x);\n}\n\ninline void pushdown(int x){\n\tif (tree[x].tag != 0){\n\t\tint ls = x * 2, rs = x * 2 + 1;\n\t\ttree[ls].tag = tree[rs].tag = tree[x].tag;\n\t\tif (tree[x].tag == 1){\n\t\t\ttree[ls].cur_lca = tree[ls].full_lca;\n\t\t\ttree[rs].cur_lca = tree[rs].full_lca;\n\t\t} else {\n\t\t\ttree[ls].cur_lca = tree[rs].cur_lca = 0;\n\t\t}\n\t\ttree[x].tag = 0;\n\t}\n}\n\ninline void update2(int x){\n\ttree[x].cur_lca = lca(tree[x * 2].cur_lca, tree[x * 2 + 1].cur_lca);\n}\n\nvoid white(int x, int l, int r){\n\tif (l <= tree[x].l && tree[x].r <= r){\n\t\ttree[x].tag = 1;\n\t\ttree[x].cur_lca = tree[x].full_lca;\n\t\treturn;\n\t}\n\tint mid = (tree[x].l + tree[x].r) >> 1;\n\tpushdown(x);\n\tif (l <= mid) white(x * 2, l, r);\n\tif (r > mid) white(x * 2 + 1, l, r);\n\tupdate2(x);\n}\n\nvoid black(int x, int l, int r){\n\tif (l <= tree[x].l && tree[x].r <= r){\n\t\ttree[x].tag = 2;\n\t\ttree[x].cur_lca = 0;\n\t\treturn;\n\t}\n\tint mid = (tree[x].l + tree[x].r) >> 1;\n\tpushdown(x);\n\tif (l <= mid) black(x * 2, l, r);\n\tif (r > mid) black(x * 2 + 1, l, r);\n\tupdate2(x);\n}\n\nint main(){\n\tint n = read(), q = read(), m = n;\n\tinit(n * 2 - 1);\n\tfor (register int i = 1; i < n; i++){\n\t\tedge1[i].start = read();\n\t\tedge1[i].end = read();\n\t\tedge1[i].dis = read();\n\t}\n\tsort(edge1 + 1, edge1 + n);\n\tfor (register int i = 1; i < n; i++){\n\t\tint u = get_root(edge1[i].start), v = get_root(edge1[i].end);\n\t\tm++;\n\t\troot[u] = root[v] = fa[u][0] = fa[v][0] = m;\n\t\tval[m] = edge1[i].dis;\n\t\tadd_edge(m, u);\n\t\tadd_edge(m, v);\n\t}\n\tdfs(m);\n\tbuild(1, 1, n);\n\tfor (register int i = 1; i <= q; i++){\n\t\tint t = read();\n\t\tif (t <= 2){\n\t\t\tint l = read(), r = read();\n\t\t\tif (t == 1){\n\t\t\t\twhite(1, l, r);\n\t\t\t} else {\n\t\t\t\tblack(1, l, r);\n\t\t\t}\n\t\t} else {\n\t\t\tint x = read();\n\t\t\tif (tree[1].cur_lca == 0 || tree[1].cur_lca == x){\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t} else {\n\t\t\t\tprintf(\"%d\\n\", val[lca(x, tree[1].cur_lca)]);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1665657492,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1628E \u3010Groceries in Meteor Town\u3011"
    },
    {
        "content": "Shitty problem.\n\n\u9898\u76ee\u76f8\u5f53\u4e8e\u6c42 $x$ \u4ee5\u53ca\u6240\u6709\u5f00\u7740\u7684\u70b9\u7684\u865a\u6811\u4e0a\u8def\u5f84\u6700\u5927\u503c\u3002\u8def\u5f84\u6700\u503c\u8ba9\u6211\u4eec\u60f3\u5230 kruskal \u91cd\u6784\u6811\uff0c\u800c\u82e5\u5e72\u4e2a\u70b9\u5f62\u6210\u7684\u865a\u6811\u7684\u8def\u5f84\u6700\u503c\u5c31\u662f\u8fd9\u4e9b\u70b9\u5728 kruskal \u91cd\u6784\u6811\u4e0a\u7684 LCA \u5bf9\u5e94\u7684\u8fb9\u7684\u6743\u503c\u3002\n\n\u56e0\u6b64\uff0c\u5efa\u51fa\u91cd\u6784\u6811\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4 LCA \u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u5bf9\u6570\u3002\u542f\u793a\uff1a**\u6811\u4e0a\u8def\u5f84\u6700\u503c $\\to$ kruskal \u91cd\u6784\u6811**\u3002[\u4ee3\u7801](https://codeforces.com/contest/1628/submission/143736225)\u3002",
        "postTime": 1643083700,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1628E Groceries in Meteor Town"
    }
]