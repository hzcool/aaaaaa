[
    {
        "content": "\u6709\u4e00\u8bf4\u4e00\uff0c\u672c\u9898\u89e3\u7684\u601d\u60f3\u5927\u6982\u662f @p_b_p_b \u5728\u4e00\u5e74\u524d\u63d0\u51fa\u7684\uff0c\u540e\u6765\u672c\u4eba\u4e0e\u5176\u8ba8\u8bba\u540e\u5b66\u4f1a\u4e86\uff0c\u4f46\u4e00\u76f4\u62d6\u5230\u6628\u5929\u624d\u901a\u8fc7\u6b64\u9898\u5e76\u8865\u5145\u4e86\u8bc1\u660e\u3002\n\n### \u5b98\u65b9\u9898\u89e3\n\n\u8003\u8651\u751f\u6210\u6811\u662f\u62df\u9635\uff0c\u9ed1\u8272\u70b9\u5ea6\u6570\u5927\u4e8e $2$ \u7684\u56fe\u662f\u62df\u9635\uff0c\u76f4\u63a5\u62df\u9635\u4ea4\u5373\u53ef $O(n^3m^3)$\uff0c\u8db3\u4ee5\u901a\u8fc7\u8be5\u9898\u3002\n\n\u4f46\u62df\u9635\u53c8\u6162\u53c8\u96be\u5199\uff0c\u6ca1\u5173\u7cfb\uff0c\u8fd9\u5c31\u6765\u70b9\u7f51\u7edc\u6d41\u3002\n\n### \u7f51\u7edc\u6d41\u505a\u6cd5\n\n\u52a0\u5165\u70b9 $(0,1),(1,0)$\uff0c\u90fd\u8bbe\u4e3a\u767d\u8272\uff0c\u7136\u540e\u4ee5\u5176\u4e2d\u4e00\u4e2a\u4f5c\u4e3a\u6839\u3002\u8fd9\u6837\u5c31\u53d8\u6210\u4e86\u6bcf\u4e2a\u9ed1\u8272\u7684\u70b9\u90fd\u5fc5\u987b\u6709\u767d\u8272\u513f\u5b50\uff0c\u56e0\u6b64\u4e00\u5b9a\u6709\u9ed1\u70b9\u5411\u767d\u70b9\u7684\u5b8c\u5907\u5339\u914d\u3002\u7531 `Hall` \u5b9a\u7406\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684\u9ed1\u8272\u70b9\u70b9\u96c6 $S$\uff0c\u4e0e\u5176\u81f3\u5c11\u4e00\u4e2a\u70b9\u76f4\u63a5\u76f8\u90bb\u7684\u767d\u70b9\u70b9\u96c6\u4e3a $T$\uff0c$|S|\\le|T|$\u3002\n\n\u53c8\u56e0\u4e3a\u6bcf\u4e2a\u9ed1\u70b9\u7684\u7236\u4eb2\u4e5f\u662f\u767d\u70b9\uff0c\u6240\u4ee5\u9898\u76ee\u6709\u89e3\u5fc5\u987b\u6ee1\u8db3\u5bf9\u4e8e\u4efb\u610f\u7684\u9ed1\u8272\u70b9\u70b9\u96c6 $S$\uff0c\u4e0e\u5176\u81f3\u5c11\u4e00\u4e2a\u70b9\u76f4\u63a5\u76f8\u90bb\u7684\u767d\u70b9\u70b9\u96c6\u4e3a $T$\uff0c$|S|<|T|$\u3002\n\n\u6b64\u65f6\u8dd1\u51fa\u6765\u7684\u5339\u914d\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a\u8003\u8651\u8ba9\u9ed1\u70b9\u5411\u6240\u6709\u76f8\u90bb\u7684\u767d\u70b9\u8fde\u8fb9\uff0c\u767d\u70b9\u53ea\u5411\u5339\u914d\u70b9\u8fde\u8fb9\uff0c\u90a3\u4e48\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5757\u8981\u4e48\u662f\u4e00\u4e2a\u5339\u914d\uff0c\u8981\u662f\u662f\u5355\u4e2a\u767d\u70b9\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5757\u4e00\u5b9a\u53ef\u4ee5\u5230\u8fbe\u5355\u4e2a\u767d\u70b9\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u9ed1\u70b9\u90fd\u5728\u5339\u914d\u5185\uff0c\u5982\u679c\u6b64\u65f6\u56fe\u4e0d\u662f\u5f31\u8fde\u901a\u76f8\u5f53\u4e8e\u539f\u9898\u65e0\u89e3\u3002\u8003\u8651\u5c06\u8fb9\u53cd\u5411\uff0c\u6b64\u65f6\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5757\u90fd\u53ef\u4ee5\u88ab\u5355\u4e2a\u767d\u70b9\u5230\u8fbe\u3002\n\n\u6211\u4eec\u901a\u8fc7\u6784\u9020\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u4e00\u5b9a\u6709\u89e3\uff1a\u5bf9\u6bcf\u4e2a\u6ca1\u6709\u5339\u914d\u7684\u767d\u70b9\u8dd1 `bfs`\uff0c\u5728\u5c1d\u8bd5\u6269\u5c55\u65f6\u5728\u751f\u6210\u6811\u4e0a\u52a0\u8fb9\uff0c\u663e\u7136\u56fe\u5f31\u8fde\u901a\u65f6\u4e00\u5b9a\u53ef\u4ee5\u8dd1\u51fa\u4e00\u68f5\u751f\u6210\u6811\u3002\u8003\u8651\u5230\u6bcf\u4e2a\u5339\u914d\u767d\u70b9\u4e00\u5b9a\u662f\u88ab\u5b83\u7684\u5339\u914d\u70b9\u6269\u5c55\u7684\uff0c\u4e14\u6bcf\u4e2a\u9ed1\u70b9\u4e00\u5b9a\u662f\u88ab\u67d0\u4e2a\u767d\u70b9\u6269\u5c55\u7684\uff0c\u6240\u4ee5\u6bcf\u4e2a\u9ed1\u70b9\u4e00\u5b9a\u6ee1\u8db3\u5ea6\u6570\u81f3\u5c11\u4e3a $2$\u3002\n\n\u590d\u6742\u5ea6 $O(nm\\sqrt{nm})$\u3002",
        "postTime": 1642983518,
        "uid": 76039,
        "name": "Wu_Ren",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1284G \u3010Seollal\u3011"
    },
    {
        "content": "## \u524d\u7f6e\u829d\u58eb\uff1a\u62df\u9635\u4ea4\n\n\u5982\u679c\u4f60\u4f1a\uff0c\u8bf7\u8df3\u8fc7\u3002\n\n\u4e00\u5207\u8bc1\u660e\u90fd\u7565\u53bb\u4e86\u2026\u2026\u5982\u679c\u9700\u8981\u7684\u8bdd\u6211\u4ee5\u540e\u6574\u7406\u4e00\u4e2a\u8be6\u7ec6\u70b9\u7684\u5427\u2026\u2026\n\n#### \u62df\u9635\u7684\u5b9a\u4e49\n\n\u6211\u4eec\u8bb0\u4e00\u4e2a**\u62df\u9635\uff08Matroid\uff09** $\\mathcal M = \\langle S,\\mathcal I\\rangle$\u3002\n\n\u5176\u4e2d\uff0c\u6211\u4eec\u79f0 $S$ \u4e3a **Ground Set**\uff0c$\\mathcal I$ \u4e3a **Family of Sets**\u3002\n\n**\u8bf7\u6ce8\u610f\u6b64\u5904\u7684 `\\mathcal I` \u4e0e\u540e\u6587\u4e2d\u7684 `I` \u7684\u533a\u522b\uff08\u5373 $\\mathcal I$ \u4e0e $I$ \u7684\u533a\u522b\uff09\u3002**\n\n\u5176\u4e2d\uff0c$\\mathcal I$ \u6ee1\u8db3 $\\mathcal I \\subseteq 2^S$\u3002\n\n\u6216\u8005\u4f60\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff1a\u4e00\u4e2a\u62df\u9635\u63cf\u8ff0\u4e86 $S$ \u4e2d\u7684\u5b50\u96c6\u7684\u60c5\u51b5\uff0c\u5305\u542b\u5728 $\\mathcal I$ \u4e2d\u5373\u72ec\u7acb\uff0c\u53cd\u4e4b\u4e0d\u72ec\u7acb\u3002\n\n#### \u62df\u9635\u7684\u516c\u7406\n\n\u4e00\u4e2a\u62df\u9635\u5fc5\u987b\u6ee1\u8db3\u4e0b\u9762\u7684 $2$ \u4e2a\u6761\u4ef6\uff1a\n\n1. \u5bf9\u4e8e\u6240\u6709\u7684 $I \\in \\mathcal I, I' \\subseteq I$\uff0c\u5219\u6709 $I' \\in \\mathcal I$\u3002\n2. \u82e5 $A,B \\in \\mathcal I, |A| < |B|$\uff0c\u5219\u5b58\u5728 $x \\in B \\setminus A, A + \\{x\\} \\in \\mathcal I$\u3002\n\n#### \u56fe\u62df\u9635\n\n$S$ \u662f\u6240\u6709\u7684\u8fb9\uff0c$\\mathcal I$ \u662f\u6240\u6709\u7684\u751f\u6210\u6811\u3002\n\n#### \u62df\u9635\u4ea4\n\n\u95ee\u9898\uff1a\u6211\u4eec\u6709 $2$ \u4e2a\u62df\u9635 $\\mathcal M_1 = \\langle S,\\mathcal I_1\\rangle, \\mathcal M_2 = \\langle S,\\mathcal I_2\\rangle$\uff0c\u6c42 $I \\subseteq S \\in \\mathcal I_1 \\cap \\mathcal I_2$\uff0c\u6ee1\u8db3 $I$ \u4e2d\u7684\u6240\u6709\u5143\u7d20\u5728\u4e24\u4e2a\u62df\u9635\u4e4b\u4e2d\u90fd\u72ec\u7acb\u3002\n\n\u7b97\u6cd5\u5927\u6982\u957f\u8fd9\u6837\uff1a\n\n1. $I = \\emptyset$\n2. \u5efa\u4e00\u4e2a\u56fe $G_I(I \\cup (S \\setminus I), E)$\uff0c\u6ee1\u8db3 $\\begin{cases}x \\in I, y \\in (S \\setminus I), \\langle x, y \\rangle \\in E \\Leftrightarrow I - x + y \\in \\mathcal{I}_1 \\\\ x \\in I, y \\in (S \\setminus I), \\langle x, y \\rangle \\in E \\Leftrightarrow I - x + y \\in \\mathcal{I}_2 \\end{cases}$\u3002\n3. \u5bfb\u627e\u56fe\u4e2d\u7684\u4ece $y_1$ \u5230 $y_{k+1}$ \u7684\u6700\u77ed\u8def\uff0c\u6ee1\u8db3 $I+y_1 \\in \\mathcal I_1$\uff0c$I+y_2\\in \\mathcal I_2$\u3002\u8bb0 $x$ \u5230 $y$ \u7684\u6700\u77ed\u8def\u5f84\u4e3a $\\operatorname{path}(x,y)$\u3002\n4. \u628a $I$ \u6362\u6210 $I \\oplus \\{y_1, x_1, \\dots, x_k, y_{k + 1}\\}$.\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(|S|^3)$\u3002\n\n## Analysis\n\n\u9898\u76ee\u4e2d\u6240\u8bf4\u7684\u201c\u53ea\u6709\u4e00\u6761\u7b80\u5355\u8def\u5f84\u201d\uff0c\u5373\u6211\u4eec\u9700\u8981\u6784\u9020\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4e14\u8981\u6ee1\u8db3\u53f6\u8282\u70b9\u7684\u989c\u8272\u4e00\u5b9a\u662f\u767d\u8272\u3002\n\n\u6211\u4eec\u6ce8\u610f\u5230\u9ed1\u8272\u7684\u8282\u70b9\u53ea\u4e0e\u767d\u8272\u8282\u70b9\u76f8\u90bb\uff0c\u6240\u4ee5\u9ed1\u8272\u7684\u70b9\u96c6\u548c\u767d\u8272\u7684\u70b9\u96c6\u662f $2$ \u4e2a\u72ec\u7acb\u96c6\u3002\n\n\u4e0b\u9762\u6709\u4e00\u4e2a\u548c\u663e\u7136\u4eca\u5929\u4e0b\u5927\u96e8\u4e00\u6837\u663e\u7136\u7684\u7ed3\u8bba\u3002\n\n> \u80fd\u627e\u5230\u4e00\u4e2a\u65e0\u73af\u7684\u5b50\u56fe\u4f7f\u5f97\u6240\u6709\u7684\u9ed1\u70b9\u7684\u5ea6\u90fd\u4e3a $2$ \u662f\u7b54\u6848\u5b58\u5728\u7684\u5145\u5fc5\u6761\u4ef6\u3002\n\n\u7531\u4e8e\u5b83\u662f\u65e0\u73af\u5b50\u56fe\uff0c\u5219\u6211\u4eec\u53ea\u9700\u65e0\u8111\u6dfb\u4e0a\u4e00\u4e9b\u8fb9\u5c31\u53ef\u4ee5\u4f7f\u5f97\u4ed6\u53d8\u6210\u4e00\u9897\u751f\u6210\u6811\u3002\u800c\u6811\u7684\u53f6\u5b50\u8282\u70b9\u7684\u5ea6\u6570\u4e3a $1$\uff0c\u6240\u4ee5\u6dfb\u8fb9\u540e\u5f62\u6210\u7684\u751f\u6210\u6811\u7684\u7b26\u5408\u6761\u4ef6\u7684\u3002\n\n\u5982\u679c\u5b58\u5728\u7b54\u6848\uff0c\u6211\u4eec\u5c06\u751f\u6210\u6811\u4e2d\u7684\u4e00\u4e9b\u8fb9\u5220\u53bb\uff0c\u5219\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65e0\u73af\u5b50\u56fe\u4f7f\u5f97\u9ed1\u70b9\u7684\u5ea6\u90fd\u662f $2$\u3002$\\blacksquare$\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u600e\u4e48\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u6211\u4eec\u5148\u4ece\u201c\u65e0\u73af\u201d\u5165\u624b\u3002\n\n\u8003\u8651\u56fe\u62df\u9635\u7684\u5b9a\u4e49\uff1a$\\mathcal M_1 = \\langle S,\\mathcal I_1\\rangle$\uff0c\u5176\u4e2d $S$ \u4e3a\u6240\u6709\u8fb9\u7684\u96c6\u5408\uff0c$\\mathcal I_1$ \u4e3a\u6240\u6709\u7684\u751f\u6210\u6811\u7684\u96c6\u5408\u3002\u6211\u4eec\u6240\u8981\u6c42\u7684\u65e0\u73af\u5b50\u56fe\u662f\u6211\u4eec\u6240\u8981\u6c42\u7684\u751f\u6210\u6811\u91cc\u9762\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65e0\u73af\u5b50\u56fe\u5728\u56fe\u62df\u9635 $\\mathcal M_1$ \u91cc\u4e00\u5b9a\u662f\u72ec\u7acb\u7684\uff0c\u800c\u6709\u73af\u7684\u5b50\u56fe\u4e00\u5b9a\u662f\u4e0d\u72ec\u7acb\u7684\u3002\n\n\u4f46\u662f\uff0c\u5ea6\u6570\u8fd9\u4e2a\u6761\u4ef6\u600e\u4e48\u6ee1\u8db3\uff1f\n\n\u6211\u4eec\u53d1\u73b0\u5ea6\u6570\u6070\u597d\u4e3a $2$ \u662f\u5f88\u96be\u6784\u9020\u7684\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u6709\u5ea6\u6570 $\\le 2$\uff0c\u5224\u65ad\u662f\u5426\u7b26\u5408\u8981\u6c42\u662f\u5f88\u7b80\u5355\u7684\u3002\n\n\u6211\u4eec\u8003\u8651\u6784\u9020\u4e00\u4e2a\u62df\u9635 $\\mathcal M_2 = \\langle S,\\mathcal I_2\\rangle$\uff0c\u5176\u4e2d $S$ \u4ecd\u7136\u4e3a\u6240\u6709\u8fb9\u7684\u96c6\u5408\uff08\u5e9f\u8bdd\uff0c\u5426\u5219\u548b\u62df\u9635\u4ea4\uff09\uff0c\u800c $\\mathcal I_2$ \u9700\u8981\u6ee1\u8db3\u6240\u6709\u9ed1\u70b9\u5ea6\u6570 $\\le 2$ \u7684\u65b9\u6848\u90fd\u72ec\u7acb\u3002\n\n\u7136\u540e\u6211\u4eec\u7b97\u4e00\u4e0b $\\mathcal M_1$ \u548c $\\mathcal M_2$ \u7684\u4ea4\u5c31\u53ef\u4ee5\u5566\uff01\n\n\u8fb9\u6570\u4e3a $\\mathcal O(nm)$\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n^3m^3)$\u3002\n\n\u554a\u54c8\uff0c\u662f\u4e0d\u662f\u84af\u4e2a\u62df\u9635\u4ea4\u7684\u677f\u5b50\u5c31\u597d\u4e86\u5462~\n\n\u7136\u800c\u4e0d\u662f\u7684\uff0c\u56e0\u4e3a\u7ec6\u8282\u8d3c\u591a\uff0c\u8d3c\u5bb9\u6613\u5199\u6302\u2026\u2026\n\n\u6838\u5fc3Code\uff08`void io::pc(char)` \u662f\u8f93\u51fa\uff0cdsu\u662f\u5c01\u88c5\u597d\u7684\u5e76\u67e5\u96c6\uff09\uff1a\n\n```cpp\nclass Matroid\n{\nprivate:\n  const int fx[4] = {-1, 0, 0, 1};\n  const int fy[4] = {0, -1, 1, 0};\n\n  struct tuple\n  {\n    int x, y;\n  };\n\n  int n0, n1, n, m, demands;\n  int count[801], dist[801], prev[801], que[801];\n  bool vis[805], ok1[801], ok2[801];\n  char grid[21][21], ans[41][41];\n  tuple E[801];\n\n#define make_tuple(x, y) ((tuple){x, y})\n#define id(x, y) ((x)*n1 + y)\n#define valid(x, y) ((x + y) > 0 && (x + y) % 2 == 0)\n#define checkx(x) (x >= 0 && x < n0)\n#define checky(x) (x >= 0 && x < n1)\n\n  IL void get_edges(int i, int j)\n  {\n    for (int k = 0; k < 4; ++k)\n    {\n      int u = i + fx[k], v = j + fy[k];\n      if (checkx(u) && checky(v) && grid[u][v] == 'O')\n        E[m++] = make_tuple(id(i, j), id(u, v));\n    }\n  }\n\n  bool augument()\n  {\n    dsu.init(n);\n    memset(count, 0, sizeof(count));\n    memset(dist, -1, sizeof(dist));\n    for (int i = 0; i < m; ++i)\n      if (vis[i])\n      {\n        dsu.merge(E[i].x, E[i].y);\n        ++count[E[i].x];\n      }\n    int tail = 0;\n    for (int i = 0; i < m; ++i)\n    {\n      ok1[i] = !vis[i] && dsu.find(E[i].x) != dsu.find(E[i].y);\n      ok2[i] = !vis[i] && count[E[i].x] < 2;\n      if (ok1[i])\n      {\n        dist[i] = 0, prev[i] = -1, que[tail++] = i;\n        if (ok2[i])\n        {\n          vis[i] = true;\n          return true;\n        }\n      }\n    }\n    for (int head = 0; head < tail; ++head)\n    {\n      int u = que[head];\n      if (ok2[u])\n      {\n        while (~u)\n          vis[u] ^= 1, u = prev[u];\n        return true;\n      }\n      if (vis[u])\n      {\n        dsu.init(n);\n        for (int i = 0; i < m; ++i)\n          if (vis[i] && i != u)\n            dsu.merge(E[i].x, E[i].y);\n        for (int v = 0; v < m; ++v)\n          if (!vis[v] && dsu.find(E[v].x) != dsu.find(E[v].y) && dist[v] == -1)\n            dist[v] = dist[u] + 1, prev[v] = u, que[tail++] = v;\n      }\n      else\n        for (int v = 0; v < m; ++v)\n          if (vis[v] && count[E[u].x] - (E[u].x == E[v].x) < 2 && dist[v] == -1)\n            dist[v] = dist[u] + 1, prev[v] = u, que[tail++] = v;\n    }\n    return false;\n  }\n\npublic:\n  void solve()\n  {\n    n0 = io::in(), n1 = io::in();\n    for (int i = 0; i < n0; ++i)\n      io::gets(grid[i]);\n    n = n0 * n1, m = demands = 0;\n    for (int i = 0; i < n0; ++i)\n      for (int j = 0; j < n1; ++j)\n        if (grid[i][j] == 'O' && valid(i, j))\n          demands += 2, get_edges(i, j);\n    while (augument())\n      --demands;\n    if (demands)\n      pc('N'), pc('O'), pc('\\n');\n    else\n    {\n      pc('Y'), pc('E'), pc('S'), pc('\\n');\n      get_edges(0, 0);\n      dsu.init(n);\n      for (int t = 0; t < 2; ++t)\n        for (int i = 0; i < m; ++i)\n        {\n          bool connected = dsu.find(E[i].x) == dsu.find(E[i].y);\n          if (t && !connected)\n            vis[i] = true;\n          if (vis[i] && !connected)\n            dsu.merge(E[i].x, E[i].y);\n        }\n      for (int i = 0; i < n0 * 2 - 1; ++i)\n        for (int j = 0; j < n1 * 2 - 1; ++j)\n          ans[i][j] = ' ';\n      for (int i = 0; i < n0; ++i)\n        for (int j = 0; j < n1; ++j)\n          ans[i * 2][j * 2] = grid[i][j];\n      for (int i = 0; i < m; ++i)\n        if (vis[i])\n        {\n          int s = min(E[i].x, E[i].y);\n          int s1 = max(E[i].x, E[i].y);\n          if (s + 1 == s1)\n            ans[s / n1 * 2][s % n1 * 2 + 1] = 'i';\n          else\n            ans[s / n1 * 2 + 1][s % n1 * 2] = '!';\n        }\n      for (int i = 0; i < n0 * 2 - 1; ++i)\n      {\n        for (int j = 0; j < n1 * 2 - 1; ++j)\n          pc(ans[i][j]);\n        pc('\\n');\n      }\n    }\n  }\n};\n```\n\n",
        "postTime": 1587597644,
        "uid": 302509,
        "name": "zghtyarecrenj",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1284G \u3010Seollal\u3011"
    }
]