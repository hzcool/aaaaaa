[
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\n\u5728\u6691\u5047\u91cc\uff0c\u6c99\u8036\u975e\u5e38\u559c\u6b22\u753b\u753b\u3002\u67d0\u4e00\u5929\uff0c\u7237\u7237\u7ed9\u5979\u4e00\u5e45\u753b\u548c\u4e00\u652f\u7b14\u3002\u8fd9\u5e45\u753b\u6709 $n$ \u4e2a\u70b9\u548c $m$ \u6761\u7ebf\uff08\u8fd9\u4e9b\u7ebf\u6709\u53ef\u80fd\u4f1a\u76f8\u4ea4\uff0c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u5148\u4e0d\u7406\u5b83\uff09\u3002\u6bcf\u6761\u7ebf\u7684\u5de6\u53f3\u4e24\u7aef\u662f\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u70b9\uff0c\u6ca1\u6709\u4efb\u4f55\u4e24\u6761\u4e0d\u540c\u7684\u7ebf\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002\u73b0\u5728\uff0c\u6c99\u8036\u60f3\u8981\u7ed9\u753b\u4e2d\u7684\u4e00\u4e9b\u7ebf\u6761\u6d82\u4e0a\u989c\u8272\uff0c\u6c99\u8036\u60f3\u8981\u7684\u662f\u753b\u51fa\u4e00\u53ea\u523a\u732c\u51fa\u6765\u3002\u5728\u6c99\u8036\u7684\u5370\u8c61\u4e2d\uff0c\u523a\u732c\u5e94\u8be5\u6709\u4e00\u4e2a\u5c3e\u5df4\u548c\u82e5\u5e72\u6839\u523a\u3002\u5979\u89c9\u5f97\u753b\u5c3e\u5df4\u7684\u65f6\u5019\u5e94\u8be5\u6ee1\u8db3\u5982\u4e0b\u89c4\u5f8b\uff1a\n\n\u00b71\u3001\u53ea\u80fd\u591f\u7ed9\u753b\u4e2d\u6709\u7684\u7ebf\u6761\u6d82\u4e0a\u989c\u8272\u3002\n\n\u00b72\u3001\u5c3e\u5df4\u5e94\u8be5\u662f\u4e00\u6761\u8fde\u7eed\u7684\u5305\u542b\u82e5\u5e72\u4e2a\u70b9\u7684\u957f\u7ebf\uff0c\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u7ebf\u6761\u4f1a\u88ab\u6d82\u4e0a\u4e86\u989c\u8272\u3002\n\n\u00b73\u3001\u5c3e\u5df4\u4e0a\u7684\u70b9\u7684\u5e8f\u53f7\u5e94\u8be5\u8981\u6309\u987a\u5e8f\u4e25\u683c\u9012\u589e\u3002\n\u6c99\u8036\u89c9\u5f97\u5c3e\u5df4\u7684\u957f\u5ea6\u5c31\u662f\u5c3e\u5df4\u4e0a\u7684\u70b9\u7684\u4e2a\u6570\u3002\u540c\u65f6\uff0c\u6c99\u8036\u4e5f\u8981\u753b\u51fa\u523a\u732c\u7684\u523a\uff0c\u56e0\u6b64\u5979\u628a\u4e00\u4e9b\u7ebf\u6761\u4e5f\u6d82\u4e0a\u4e86\u989c\u8272\uff0c\u523a\u7684\u4e00\u4e2a\u7aef\u70b9\u5fc5\u987b\u548c\u5c3e\u5df4\u7684\u672b\u7aef\u70b9\u4e00\u6837\u3002\u6c99\u8036\u89c9\u5f97\u523a\u732c\u7684\u7f8e\u89c2\u503c\u5e94\u8be5\u662f\u5c3e\u5df4\u7684\u957f\u5ea6\u4e58\u4ee5\u523a\u7684\u6570\u91cf\u3002\u6c99\u8036\u60f3\u8981\u753b\u51fa\u4e00\u53ea\u7f8e\u89c2\u503c\u6700\u5927\u7684\u523a\u732c\u3002\u867d\u7136\u5927\u5bb6\u89c9\u5f97\u6c99\u8036\u7684\u60f3\u6cd5\u5f88\u5e7c\u7a1a\uff0c\u4f46\u662f\u5979\u6bd5\u7adf\u8fd8\u662f\u4e00\u4e2a\u5c0f\u841d\u8389\n\n\u7b80\u5355\u70b9\u6765\u8bf4\u5c31\u662f\uff1a\n\n \u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u8981\u6c42\u5bfb\u627e\u5e8f\u53f7\u9012\u589e\u7684\u94fe\uff0c\u4f7f\u5f97\u67d0\u94fe\u7684\u957f\u5ea6\u4e58\u4ee5\u8be5\u94fe\u672b\u7aef\u70b9\u7684\u5ea6\u6570\u7684\u503c\u6700\u5927\uff0c\u6c42\u8be5\u503c\n \n# \u5206\u6790\n\n\u5148\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\uff0c\u5165\u5ea6\u3002\u5efa\u56fe\u65f6\uff0c\u53ea\u52a0\u4ece\u5e8f\u53f7\u5c0f\u7684\u70b9\u5230\u5e8f\u53f7\u5927\u7684\u70b9\u7684\u5355\u5411\u8fb9\u3002\u968f\u540e\uff0c\u4ece\u5e8f\u53f7\u5c0f\u4e14\u672a\u88ab\u8bbf\u95ee\u7684\u70b9\u51fa\u53d1\uff0c\u8fdb\u884c **dfs** \u641c\u7d22\u3002\u6bcf\u6b21\u641c\u7d22\u5230\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\uff0c\u5c06\u8be5\u70b9\u5165\u5ea6\u51cf\u4e00\uff0c\u540c\u65f6\u5982\u679c\u65b0\u7684\u503c\u5927\u4e8e\u539f\u6709\u503c\uff0c\u5219\u66f4\u65b0\uff0c\u4f46\u5e76\u4e0d\u9a6c\u4e0a\u5f80\u4e0b\u9012\u5f52\uff0c\u82e5\u5165\u5ea6\u4e3a $0$\uff0c\u65b9\u53ef\u5f80\u4e0b\u9012\u5f52\uff08\u4f18\u5316\uff0c\u907f\u514d\u65e0\u6548\u66f4\u65b0\uff09\u3002\u6700\u540e\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u957f\u5ea6\u548c\u5ea6\u6570\uff0c\u6c42\u6700\u5927\u503c\u5373\u53ef\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nstruct edge\n{\n\tlong long fm,to;\n}store[100010<<1];\n\nlong long head[100010],nxt[200010];\nlong long degree[100010],cnt=0,in[100010];\nlong long len[100010];\nbool vis[100010];\n\nvoid addedge(int fm,int to)\n{\n\tnxt[cnt]=head[fm];\n\thead[fm]=cnt;\n\tstore[cnt].fm=fm;\n\tstore[cnt].to=to;\n\tcnt++;\n}\n\nvoid dfs(long long x)\n{\n\tvis[x]=1;\n\t\n\tlong long tmp=len[x]+1;\n\t\n\tfor(long long i=head[x]; ~i; i=nxt[i])\n\t{\n\t\tlen[store[i].to]=max(len[store[i].to],tmp);\n\t\tin[store[i].to]--;\n\t\t\n\t\tif(in[store[i].to]==0)\n           dfs(store[i].to);\n\t}\n}\n\nsigned main()\n{\n\tios::sync_with_stdio(0);\n\t\n\tlong long n,m,a,b;\n\tlong long ans=0,tmp;\n\t\n\tcin >> n >> m;\n\t\n\tmemset(head,-1,sizeof(head));\n\tmemset(degree,0,sizeof(degree));\n\tmemset(in,0,sizeof(in));\n\tmemset(vis,0,sizeof(vis));\n\t\n\tfor(long long i=1; i<=m; i++)\n    {\n       cin >> a >> b;\n       \n\t   degree[a]++;\n\t   degree[b]++;\n\t   \n\t   if(a<b)\n\t   {\n\t\t   addedge(a,b);\n\t\t   in[b]++;\n\t   }\n\t   \n\t   else\n\t   {\n\t\t   addedge(b,a);\n\t\t   in[a]++;\n\t   }\n\t}\n \n\tfor(long long i=1; i<=n; i++)\n\t{\n\t\tif(!vis[i])\n\t\t{\n\t\t\tlen[i]=1;\n\t\t\tdfs(i);\n\t\t}\n\t}\n\t\n\tfor(long long i=1; i<=n; i++)\n\t{\n\t\ttmp=1*len[i]*degree[i];\n\t\t\n\t\tif(tmp>ans)\n\t\t\tans=tmp;\n\t}\n\t\n\tcout << ans << endl; \n\t\n\treturn 0;\n}\n```",
        "postTime": 1633279990,
        "uid": 312084,
        "name": "yangzd",
        "ccfLevel": 0,
        "title": "CF 615 B"
    }
]