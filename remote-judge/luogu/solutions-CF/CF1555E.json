[
    {
        "content": "\u9898\u76ee\u8ba9\u6211\u4eec\u6700\u5c0f\u5316\u6240\u9009\u7ebf\u6bb5\u6743\u503c\u7684\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u4e4b\u5dee\uff0c\u6240\u4ee5\u663e\u7136\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u505a\u3002\n\n\u53cc\u6307\u9488\u7684\u8fc7\u7a0b\u4e2d\uff0c\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5 $[l,r]$\uff0c\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e0a\u5c06\u533a\u95f4 $[l,r-1]$ \u52a0\u4e00\uff0c\u5220\u9664\u8be5\u7ebf\u6bb5\u65f6\u5c31\u5728\u7ebf\u6bb5\u6811\u4e0a\u5c06\u533a\u95f4 $[l,r-1]$ \u51cf\u4e00\uff0c\u5224\u65ad\u533a\u95f4\u662f\u5426\u88ab\u5168\u90e8\u8986\u76d6\u5c31\u67e5\u8be2 $[1,m-1]$ \u7684\u6700\u5c0f\u503c\u662f\u5426\u5927\u4e8e\u96f6\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f $[l,r-1]$\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u8981\u6c42\u6211\u4eec\u9009\u7684\u7ebf\u6bb5\u5fc5\u987b\u8981\u6709\u91cd\u5408\u90e8\u5206\uff0c\u8f6c\u5316\u4e4b\u540e\u5c31\u53d8\u6210\u5c06\u533a\u95f4 $[1,m-1]$ \u8986\u76d6\u5373\u53ef\uff0c\u4f1a\u597d\u505a\u4e00\u4e9b\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log m)$\u3002\n\n#### \u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\ninline int read(){\n\tint x=0; char c=getchar();\n\twhile(!isdigit(c)) c=getchar();\n\twhile(isdigit(c)) x=x*10+(c^'0'),c=getchar();\n\treturn x;\n}\nconst int maxn=3e5+10;\nconst int maxm=1e6+10;\nstruct Node{\n\tint l,r,dat,tag;\n}tr[maxm*4];\ninline void pushup(int x){\n\ttr[x].dat=min(tr[x<<1].dat,tr[x<<1|1].dat);\n}\ninline void pushdown(int x){\n\tif(tr[x].tag){\n\t\ttr[x<<1].dat+=tr[x].tag,tr[x<<1].tag+=tr[x].tag;\n\t\ttr[x<<1|1].dat+=tr[x].tag,tr[x<<1|1].tag+=tr[x].tag;\n\t\ttr[x].tag=0;\n\t}\n}\nvoid build(int x,int l,int r){\n\ttr[x].l=l,tr[x].r=r,tr[x].dat=tr[x].tag=0;\n\tif(l==r) return;\n\tint mid=l+r>>1;\n\tbuild(x<<1,l,mid),build(x<<1|1,mid+1,r); \n}\nvoid modify(int x,int l,int r,int v){\n\tif(l<=tr[x].l&&r>=tr[x].r){\n\t\ttr[x].dat+=v,tr[x].tag+=v;\n\t\treturn;\n\t}\n\tpushdown(x);\n\tint mid=tr[x].l+tr[x].r>>1;\n\tif(l<=mid) modify(x<<1,l,r,v);\n\tif(r>mid) modify(x<<1|1,l,r,v);\n\tpushup(x);\n}\nint n,m;\nstruct Segment{\n\tint l,r,w;\n\tbool operator<(const Segment &x)const{\n\t\treturn w<x.w;\n\t}\n}s[maxn];\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++) s[i].l=read(),s[i].r=read()-1,s[i].w=read();\n\tsort(s+1,s+n+1);\n\tbuild(1,1,m-1);\n\tint ans=0x3f3f3f3f;\n\tfor(int l=1,r=0;l<=n;l++){\n\t\twhile(!tr[1].dat){\n\t\t\tif(++r>n){\n\t\t\t\tprintf(\"%d\\n\",ans);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tmodify(1,s[r].l,s[r].r,1);\n\t\t}\n\t\tans=min(ans,s[r].w-s[l].w);\n\t\tmodify(1,s[l].l,s[l].r,-1);\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1627739505,
        "uid": 176569,
        "name": "iMya_nlgau",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1555E Boring Segments"
    },
    {
        "content": "# E\n\n> \u7ed9\u5b9a $n$ \u4e2a\u533a\u95f4\uff0c\u6bcf\u4e2a\u6709\u4ef7\u503c\uff0c\u6c42\u9009\u62e9\u4e00\u4e9b\u533a\u95f4\u4f7f\u5f97 $1\\sim n$ \u90fd\u88ab\u8986\u76d6\u4e14\u533a\u95f4\u6700\u5927\u4ef7\u503c - \u6700\u5c0f\u4ef7\u503c\u7684\u6700\u5c0f\u503c\u3002\n\n\u957f\u5f97\u50cf\u4e2a\u4e8c\u5206\u7b54\u6848\uff0c\u4f46\u662f\u5f88\u96be\u9ad8\u6548\u5224\u5b9a\uff0c\u60f3\u522b\u7684\u65b9\u6cd5\u3002\n\n\u548c[\u8fd9\u9898](https://www.luogu.com.cn/problem/P1712)\u7684\u601d\u8def\u51e0\u4e4e\u4e00\u6837\u7684\uff0c\u5bf9\u4e8e\u4ef7\u503c\u6392\u5e8f\u540e\uff0c\u53cc\u6307\u9488\u5f97\u5230\u5408\u6cd5\u533a\u95f4\uff0c\u5229\u7528\u7ebf\u6bb5\u6811\u6a21\u62df\u4e00\u4e0b\u8054\u901a\u60c5\u51b5\u5373\u53ef\u3002\n\n\u5177\u4f53\u4e00\u70b9\uff0c\u5bf9\u4e8e\u533a\u95f4\u6309\u4ef7\u503c\u6392\u5e8f\u540e\uff0c\u53f3\u6307\u9488\u6bcf\u6b21\u79fb\u52a8\u81f3 $1\\sim n$ \u5168\u90e8\u8986\u76d6\uff0c\u7136\u540e\u5de6\u6307\u9488\u540c\u6837\u79fb\u52a8\u81f3\u4e34\u754c\u70b9\u3002\n\n\u8fd9\u6837\u7684\u503c\u663e\u7136\u662f\u6700\u5c0f\u7684\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a \u533a\u95f4\u52a0 & \u533a\u95f4\u6700\u5c0f\u503c \u5373\u53ef\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int N = 3e5 + 10;\nconst int M = 2e6 + 10;\nconst int INF = 2e9;\n\nint n, m, dat[M << 1], add[M << 1];\nstruct Edge{int l, r, w;} a[N];\n\nint read(){\n\tint x = 0, f = 1; char c = getchar();\n\twhile(c < '0' || c > '9') f = (c == '-') ? -1 : 1, c = getchar();\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n\treturn x * f;\n}\n\nbool cmp(Edge a, Edge b){return a.w < b.w;}\n\nint Min(int a, int b){return a < b ? a : b;}\n\nvoid Push_Down(int p){\n\tif(!add[p]) return;\n\tint l = p << 1, r = p << 1 | 1;\n\tdat[l] += add[p], add[l] += add[p];\n\tdat[r] += add[p], add[r] += add[p];\n\tadd[p] = 0;\n}\n\nvoid Modify(int p, int l, int r, int L, int R, int v){\n\tif(L <= l && r <= R) {dat[p] += v, add[p] += v; return;}\n\tPush_Down(p);\n\tint mid = (l + r) >> 1;\n\tif(L <= mid) Modify(p << 1, l, mid, L, R, v);\n\tif(R >  mid) Modify(p << 1 | 1, mid + 1, r, L, R, v);\n\tdat[p] = Min(dat[p << 1], dat[p << 1 | 1]);\n}\n\nint main(){\n\tn = read(), m = read() - 1;\n\tfor(int i = 1; i <= n; i ++)\n\t\ta[i].l = read(), a[i].r = read() - 1, a[i].w = read();\n\tsort(a + 1, a + n + 1, cmp);\n\t\n\tint L = 0, R = 0, ans = INF;\n\twhile(true){\n\t\twhile(R + 1 <= n && dat[1] == 0)\n\t\t\tR ++, Modify(1, 1, m, a[R].l, a[R].r, 1);\n\t\tif(dat[1] == 0) break;\n\t\twhile(L + 1 <= R && dat[1] >  0)\n\t\t\tL ++, Modify(1, 1, m, a[L].l, a[L].r, - 1);\n\t\tans = Min(ans, a[R].w - a[L].w);\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n\n# ",
        "postTime": 1627727444,
        "uid": 117941,
        "name": "_LPF_",
        "ccfLevel": 9,
        "title": "CF1555E Boring Segments"
    },
    {
        "content": "#### \u9898\u76ee\u5927\u610f\n\n\n------------\n\u5728\u4e00\u6761 $[1,m]$ \u7684\u6570\u8f74\u4e0a\u6709 $n$ \u6761\u7ebf\u6bb5\uff0c\u7b2c $i$ \u6761\u7ebf\u6bb5\u8986\u76d6\u4e86\u4ece $l_i$ \u5230 $r_i$ \u8303\u56f4\u5185\u7684\u6570\u8f74\uff0c\u6bcf\u6761\u7ebf\u6bb5\u6709\u4e00\u6743\u503c $w_i$\uff0c\u4ece\u4e2d\u9009\u51fa\u4efb\u610f\u6761**\u9996\u5c3e\u76f8\u63a5**\u7684\u8986\u76d6\u6574\u4e2a\u6570\u8f74\u7684\u7ebf\u6bb5\uff0c\u6700\u5c0f\u5316\u7ebf\u6bb5\u7684\u6781\u5dee\u3002\n\n#### \u601d\u8def\u5206\u6790\n\n\n------------\n\u5bf9\u4e8e\u9009\u51fa\u7684\u7ebf\u6bb5\u7684\u6743\u503c\uff0c\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u7684\u662f\u6781\u5dee\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u5173\u5fc3\u8fd9\u4e9b\u7ebf\u6bb5\u4e2d\u6743\u503c\u6700\u5927\u7684\u548c\u6743\u503c\u6700\u5c0f\u7684\u3002\n\n\u5728\u6570\u8f74\u4e0a\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\n\n\u8003\u8651\u6309\u7167\u6743\u503c\u5bf9\u8fd9 $n$ \u6761\u7ebf\u6bb5\u6392\u5e8f\u540e\u53cc\u6307\u9488\u7ef4\u62a4\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u9009\u51fa\u7684\u7ebf\u6bb5\u5fc5\u987b\u662f\u6536\u5c3e\u76f8\u63a5\u7684\uff0c\u4e24\u7ebf\u6bb5\u80fd\u591f\u5e76\u6210\u4e00\u4e2a\u533a\u95f4\u5fc5\u987b\u6709\u81f3\u5c11\u4e00\u4e2a\u4ea4\u70b9\uff0c\u53ea\u9700\u6bcf\u6b21\u4fee\u6539\u7ebf\u6bb5\u6811\u4e0a $[l_i+1,r_i]$ \u8fd9\u6bb5\u533a\u95f4\uff0c\u6700\u540e\u67e5\u8be2 $[2,m]$ \u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u5373\u53ef\u3002\n\n\u8981\u5224\u65ad\u5df2\u7ecf\u9009\u51fa\u7684\u7ebf\u6bb5\u662f\u5426\u8986\u76d6\u6574\u4e2a\u6570\u8f74\u5c31\u9700\u8981\u8bb0\u5f55\u8fd9\u6bb5\u533a\u95f4\u7684\u6700\u5c0f\u503c\uff0c\u5982\u679c\u4e00\u6bb5\u533a\u95f4\u7684\u6700\u5c0f\u503c\u5927\u4e8e $0$ \u5373\u8868\u793a\u6574\u6bb5\u533a\u95f4\u90fd\u88ab\u8986\u76d6\u5b8c\u5168\uff0c\u6b64\u65f6\u66f4\u65b0\u7b54\u6848\uff0c\u5373\u53f3\u6307\u9488\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6743\u503c\u51cf\u53bb\u5de6\u6307\u9488\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6743\u503c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n \\log m)$\u3002\n\n#### \u4ee3\u7801\u5b9e\u73b0\n\n\n------------\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\nconst int N = 3e5 + 10;\nconst int M = 1e6 +10; \nconst int INF = 1e9 + 10;\ninline int read(){\n    int x=0,f=1;\n    char ch=getchar();\n    for(;!isdigit(ch);ch=getchar()) if(ch=='-') f=-1;\n    for(; isdigit(ch);ch=getchar()) x=(x<<3)+(x<<1)+(ch^48);\n    return x*f;\n}\nstruct Tree{\n\tint l,r,sum,mn,add;\n}tree[M<<2];\nvoid push_up(int p){\n\ttree[p].mn = min(tree[p<<1].mn , tree[p<<1|1].mn);\n}\nvoid build(int p,int l,int r){\n\ttree[p].l = l , tree[p].r = r;\n\tif(l == r){\n\t\ttree[p].mn = tree[p].sum = 0;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tbuild(p<<1,l,mid); build(p<<1|1,mid+1,r);\n\tpush_up(p);\n} \nvoid Add(int p,int k){\n\ttree[p].add += k , tree[p].mn += k;\n}\nvoid push_down(int p){\n\tif(tree[p].add != 0){\n\t\tAdd(p<<1,tree[p].add);\n\t\tAdd(p<<1|1,tree[p].add);\n\t\ttree[p].add = 0;\n\t}\n}\nvoid modify(int p,int l,int r,int k){\n\tif(l <= tree[p].l && tree[p].r <= r){\n\t\ttree[p].add += k , tree[p].mn += k;\n\t\treturn;\n\t}\n\tpush_down(p);\n\tint mid = tree[p].l + tree[p].r >> 1;\n\tif(l <= mid) modify(p<<1,l,r,k);\n\tif(r >  mid) modify(p<<1|1,l,r,k);\n\tpush_up(p);\n}\nint query(int p,int l,int r){\n\tif(l <= tree[p].l && tree[p].r <= r){\n\t\treturn tree[p].mn;\n\t}\n\tpush_down(p);\n\tint res = INF;\n\tint mid = tree[p].l + tree[p].r >> 1;\n\tif(l <= mid) res = min(res,query(p<<1,l,r));\n\tif(r >  mid) res = min(res,query(p<<1|1,l,r));\n\treturn res; \n}\nstruct Node{\n\tint l,r,w;\n}a[N];\nbool cmp(Node a,Node b){\n\treturn a.w < b.w;\n}\nint pos = 1;\nint ans = INF;\nint main(){\n\tint n = read() , m = read();\n\tbuild(1,1,m);\n\tfor(int i=1;i<=n;i++){\n\t\ta[i].l = read() , a[i].r = read() , a[i].w = read(); \n\t}\n\tsort(a+1,a+n+1,cmp);\n\tfor(int i=1;i<=n;i++){\n\t\tmodify(1,a[i].l+1,a[i].r,1);\n\t\twhile(query(1,2,m) > 0){\n\t\t\tmodify(1,a[pos].l+1,a[pos].r,-1);\n//\t\t\tcout<<pos<<\" \"<<i<<\" \"<<a[pos].w<<\" \"<<a[i].w<<endl;\n\t\t\tans = min(ans,a[i].w - a[pos].w);\n\t\t\tpos++;\n//\t\t\tcout<<ans<<endl;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n/*\n5 12\n1 5 5\n3 4 10\n4 10 6\n11 12 5\n10 12 3\n*/\n```\n",
        "postTime": 1661939116,
        "uid": 335615,
        "name": "0xFF",
        "ccfLevel": 0,
        "title": "CF1555E"
    },
    {
        "content": "\u5148\u5c06\u8fd9\u4e9b\u7ebf\u6bb5\u6309\u7167 $w$ \u4ece\u5927\u5230\u5c0f\u6392\u4e2a\u5e8f\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u6700\u5c0f\u5316 $\\max-\\min$ \u7684\u5957\u8def\uff1a\u679a\u4e3e\u6700\u5c0f\u503c\uff0c\u627e\u5230\u5408\u6cd5\u4e14\u6700\u5c0f\u7684\u6700\u5927\u503c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u8986\u76d6\u6bcf\u4e2a\u70b9\u7684\u7ebf\u6bb5\u4e2d\u6700\u5c0f\u7684 $w$ \u7684\u5168\u5c40 $\\max$\u3002\n\n\u679a\u4e3e\u5230\u4e00\u4e2a $\\min$ \u65f6\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u7ebf\u6bb5\u8986\u76d6\u6210\u5f53\u524d\u7684 $w$\u3002\u8fd9\u65f6\u5019\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u5168\u5c40 $\\max$ \u5c31\u662f\u5f53\u524d\u6700\u5c0f\u53ef\u80fd\u7684 $\\max$\u3002\n\ncode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);++i)\n#define per(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nint n,m,ans=0x3f3f3f3f;\nstruct node{\n    int l,r,w;\n}a[300005];\nstruct Segment{\n    int l,r,cov,mx;\n}t[4000005];\nbool cmp(node a,node b) {\n    return a.w>b.w;\n}\nvoid pushdown(int p) {\n    if(t[p].cov) {\n        t[p<<1].cov=t[p].cov;\n        t[p<<1|1].cov=t[p].cov;\n        t[p<<1].mx=t[p].cov;\n        t[p<<1|1].mx=t[p].cov;\n        t[p].cov=0;\n    }\n}\nvoid pushup(int p) {t[p].mx=max(t[p<<1].mx,t[p<<1|1].mx);}\nvoid build(int p,int l,int r) {\n    t[p].l=l;t[p].r=r;\n    if(l==r) {t[p].mx=0x3f3f3f3f;return ;}\n    int mid=(l+r)>>1;\n    build(p<<1,l,mid);\n    build(p<<1|1,mid+1,r);\n    pushup(p);\n}\nvoid modify(int p,int l,int r,int v) {\n    if(l<=t[p].l&&t[p].r<=r) {\n        t[p].cov=v;\n        t[p].mx=v;\n        return;\n    } \n    pushdown(p);\n    int mid=(t[p].l+t[p].r)>>1;\n    if(l<=mid) modify(p<<1,l,r,v);\n    if(mid<r) modify(p<<1|1,l,r,v);\n    pushup(p);\n}\nint query(int p,int l,int r) {\n    if(l<=t[p].l&&t[p].r<=r) return t[p].mx;\n    pushdown(p);\n    int ans=0;\n    int mid=(t[p].l+t[p].r)>>1;\n    if(l<=mid) ans=max(ans,query(p<<1,l,r));\n    if(mid<r) ans=max(ans,query(p<<1|1,l,r));\n    return ans;\n}\nint main() {\n    scanf(\"%d%d\",&n,&m);\n    rep(i,1,n) scanf(\"%d%d%d\",&a[i].l,&a[i].r,&a[i].w);\n    sort(a+1,a+n+1,cmp);\n    build(1,1,m);\n    rep(i,1,n) {\n        modify(1,a[i].l,a[i].r-1,a[i].w);\n        ans=min(ans,query(1,1,m-1)-a[i].w);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1627726355,
        "uid": 76156,
        "name": "henrytb",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1555E \u3010Boring Segments\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a $n$ \u4e2a\u5e26\u6743\u533a\u95f4\uff0c\u6700\u5c0f\u5316\u80fd\u8986\u76d6 $m$ \u7684\u6700\u5927\u533a\u95f4\u6743\u503c\u548c\u6700\u5c0f\u6743\u503c\u7684\u5dee\u503c\n\n### \u89e3\u9898\u601d\u8def\n\u628a\u6240\u6709\u533a\u95f4\u6309\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4f9d\u6b21\u52a0\u5165\u6bcf\u4e2a\u533a\u95f4\uff0c\u5224\u65ad\u662f\u5426\u8986\u76d6\u5168\u96c6\uff0c\u7edf\u8ba1\u76ee\u524d**\u8d77\u5173\u952e\u4f5c\u7528**\u7684\u6700\u5c0f\u503c\u3002\n\n\u600e\u4e48\u7406\u89e3\u8fd9\u4e2a\u5173\u952e\u4f5c\u7528\u5462\uff0c\u4f8b\u5982\u4e00\u4e2a\u6570\u5b57\u53ea\u88ab\u4e00\u4e2a\u533a\u95f4\u8986\u76d6\uff0c\u90a3\u8fd9\u4e2a\u533a\u95f4\u662f\u4e00\u5b9a\u8981\u9009\u4e2d\u7684\uff0c\u90a3\u5b83\u5c31\u8d77\u5173\u952e\u4f5c\u7528\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u80fd\u88ab\u4e24\u6bb5\u533a\u95f4\u8986\u76d6\uff0c\u90a3\u6211\u4eec\u65e0\u7591\u9009\u62e9\u6743\u503c\u8f83\u5927\u7684\u90a3\u4e2a\uff0c\u624d\u80fd\u5f97\u5230\u66f4\u5c0f\u7684\u6743\u503c\u5dee\u3002\n\n\u533a\u95f4\u8986\u76d6\u95ee\u9898\u5f88\u81ea\u7136\u5730\u60f3\u5230\u4e86\u7ebf\u6bb5\u6811\u7b49\u64cd\u4f5c\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u7136\u540e\u6bcf\u6b21\u52a0\u5165\u4e00\u6bb5\u533a\u95f4\u5c31\u8986\u76d6\u4e0b\u53bb\uff0c\u6700\u540e\u505a\u5dee\u3002\n\n\u7136\u540e\u6211\u5c31\u53d1\u73b0\u6211\u8fde\u6837\u4f8b\u90fd\u6ca1\u8fc7\uff0c\u7ed3\u675f\u4e4b\u540e\u4e94\u5206\u949f\u8fc7\u4e86\uff08\uff09\u3002\n\n\u8fd9\u91cc\u8981\u5bf9 $[\\,1\\,,\\,m-1\\,]$ \u5efa\u6811\uff0c\u6bcf\u4e2a\u53f6\u8282\u70b9\u8868\u793a\u4ece $i \\to i+1$ \u7684\u4ee3\u4ef7\uff0c\u7136\u540e\u518d\u6267\u884c\u7ebf\u6bb5\u6811\u64cd\u4f5c\u5373\u53ef\n\n\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>\n#define mid ((l+r)>>1)\n#define lson (x<<1),l,mid\n#define rson (x<<1|1),mid+1,r\nusing namespace std;\nconst int maxn = 1e6+20;\nint n,m,Ans,L,R;\nstruct Node\n{\n\tint mark,va;\n}Tree[maxn<<2];\nstruct node\n{\n\tint l,r,va;\n\tbool operator <(const node A)const{\n\t\treturn va==A.va ? l < A.l : va < A.va ;\n\t}\n}in[maxn];\n\ninline int read() \n{\n    int x = 0 , f = 1 ; char c = getchar() ;\n    while( c < '0' || c > '9' ) { if( c == '-' ) f = -1 ; c = getchar() ; } \n    while( c >= '0' && c <= '9' ) { x = x * 10 + c - '0' ; c = getchar() ; } \n    return x * f ;\n}\n\nvoid build(int x,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tTree[x].va = -1e9;\n\t\treturn ;\n\t}\n\tbuild(lson);build(rson);\n\tTree[x].va = -1e9;\n}\n\nvoid Cover(int x,int k)\n{\n\tTree[x].va = k;\n\tTree[x].mark = k;\n}\n\nvoid pushdown(int x)\n{\n\tif(Tree[x].mark)\n\t{\n\t\tCover((x<<1),Tree[x].mark);\n\t\tCover((x<<1|1),Tree[x].mark);\n\t\tTree[x].mark = 0;\n\t}\n}\n\nvoid update(int x,int l,int r,int k)\n{\n\tif(L<=l&&r<=R) {Cover(x,k);return ;}\n\tpushdown(x);\n\tif(L<=mid) update(lson,k);\n\tif(mid<R) update(rson,k);\n\tTree[x].va = min(Tree[x<<1].va,Tree[x<<1|1].va);\n}\n\nint main()\n{//\u4e2a\u4eba\u4e60\u60ef\uff0cn,m\u4e0e\u9898\u76ee\u4e2d\u4e0d\u5bf9\u5e94\u5417\uff0c\u662f\u76f8\u53cd\u7684 \n\tm = read();n = read()-1;\n\tbuild(1,1,n);//\u4e00\u5b9a\u8981\u6709\u7684\u4e00\u6b65\uff0c\u628a\u6700\u5c0f\u503c\u8bbe\u62100 \n\tAns = 2e9;\n\tfor(int i=1;i<=m;i++) in[i].l = read(),in[i].r = read()-1,in[i].va = read();\n\tsort(in+1,in+1+m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tL = in[i].l ;R = in[i].r;\n\t\tupdate(1,1,n,in[i].va);//\u5148\u8986\u76d6\uff0c\u518d\u67e5\u8be2\u5168\u5c40\u6700\u5c0f\u503c \n\t\tAns = min(Ans,in[i].va-Tree[1].va);\n\t}\n\tprintf(\"%d\\n\",Ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1627723199,
        "uid": 250174,
        "name": "Akoasm_X",
        "ccfLevel": 7,
        "title": "CF1555E Boring Segments \u9898\u89e3"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1555E)\n\n## \u9898\u76ee\u5206\u6790\n\n\u7ebf\u6bb5\u6811\u5904\u7406\u533a\u95f4\u8986\u76d6\u3002\n\n\u9898\u76ee\u53ea\u8981\u6c42\u533a\u95f4 $w$ \u6781\u5dee\u6700\u5c0f\uff0c\u4f7f\u7528\u533a\u95f4\u6570\u91cf\u4e0d\u9650\u3002\n\n\u82e5\u77e5\u9053\u4e86\u8981\u7528\u4e0a\u7684\u533a\u95f4\u7684 $w_{max},w_{min}$\uff0c\u5219\u663e\u7136 $w_i \\in [w_{min},w_{max}]$ \u7684\u6240\u6709\u533a\u95f4\u4e00\u80a1\u8111\u5168\u7528\u4e0a\u5c31\u884c\u4e86\uff0c\u5bf9\u7b54\u6848\u65e0\u5f71\u54cd\u3002\n\n\u8fd9\u5c31\u5f97\u51fa\u4e86\u4e00\u4e2a $O(n \\log m)$ \u7684\u7b97\u6cd5\uff1a\n\n\u76f4\u63a5\u5bf9\u533a\u95f4\u6309 $w$ \u5347\u5e8f\u6392\u5e8f\u3002\n\n\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488 $l,r$\uff0c\u5206\u522b\u6307\u7740 $w_{min}$ \u548c $w_{max}$\u3002\n\n\u82e5\u6570\u8f74\u672a\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u5219 $r$ \u53f3\u79fb\u3002\n\n\u82e5\u6570\u8f74\u5df2\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u8bb0\u5f55\u6781\u5dee\uff0c\u4e14 $l$ \u53f3\u79fb\u3002\n\n$l,r$ \u521d\u59cb\u5316\u5747\u4e3a $1$\u3002\n\n\u5f53 $r$ \u53f3\u79fb\uff0c\u5373\u5728\u6570\u8f74\u4e0a\u589e\u6dfb\u8986\u76d6\u533a\u95f4\uff0c\u5728\u7ebf\u6bb5\u6811\u5bf9\u5e94\u4f4d\u7f6e\u52a0 $1$\u3002\n\n\u5f53 $l$ \u53f3\u79fb\uff0c\u5373\u5728\u6570\u8f74\u4e0a\u5220\u53bb\u533a\u95f4\uff0c\u5728\u7ebf\u6bb5\u6811\u5bf9\u5e94\u4f4d\u7f6e\u51cf $1$\u3002\n\n\u672c\u9898\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u3002\u5f53\u8282\u70b9\u6743\u503c\u4e3a $0$\uff0c\u4ee3\u8868\u5176\u6240\u7ef4\u62a4\u533a\u95f4\u672a\u88ab\u5b8c\u5168\u8986\u76d6\u3002\n\n**\u6ce8\u610f\uff1a\u9898\u76ee\u8981\u6c42\u533a\u95f4\u9996\u5c3e\u9700\u6709\u91cd\u53e0\u90e8\u5206**\uff0c\u8f93\u5165\u65f6\u5c06\u533a\u95f4\u53f3\u7aef\u70b9\u7edf\u4e00\u51cf $1$ \u5904\u7406\u5373\u53ef\u3002\n\n## code\n\n```cpp\n#include <bits/stdc++.h>\n#define rei register int\n#define N 1000010\n#define ls k<<1\n#define rs k<<1|1\nusing namespace std;\nconst int inf = 1e9;\n\ntemplate <typename T> inline void read(T &x)\n{\n\tx = 0; T f = 1; char ch = getchar();\n\twhile (!isdigit(ch)) {if (ch == '-') f = -f; ch = getchar();}\n\twhile (isdigit(ch)) {x = x * 10 + ch - 48; ch = getchar();}\n\tx *= f;\n}\n\nint n, m, ans = inf;\nstruct Tree {int l, r, w, f;} T[N << 2];\nstruct Node {int l, r, w;} a[N];\n\ninline bool cmp(const Node &a, const Node &b) {return a.w < b.w;}\n\ninline void Pushup(int k) {T[k].w = min(T[ls].w, T[rs].w);}\n\ninline void Pushdown(int k)\n{\n\tif (!T[k].f) return;\n\tT[ls].f += T[k].f; T[rs].f += T[k].f;\n\tT[ls].w += T[k].f; T[rs].w += T[k].f;\n\tT[k].f = 0;\n}\n\ninline void Build(int k, int l, int r)\n{\n\tT[k].l = l; T[k].r = r;\n\tif (l == r) return;\n\tint mid = l + r >> 1;\n\tBuild(ls, l, mid);\n\tBuild(rs, mid + 1, r);\n}\n\ninline void Update(int k, int x, int y, int v)\n{\n\tif (x <= T[k].l && T[k].r <= y)\n\t{\n\t\tT[k].f += v;\n\t\tT[k].w += v;\n\t\treturn;\n\t}\n\tPushdown(k);\n\tint mid = T[k].l + T[k].r >> 1;\n\tif (x <= mid) Update(ls, x, y, v);\n\tif (mid < y) Update(rs, x, y, v);\n\tPushup(k);\n}\n\nint main()\n{\n\tread(n); read(m); m--;\n\tfor (rei i = 1; i <= n; i++) read(a[i].l), read(a[i].r), read(a[i].w), a[i].r--;\n\tsort(a + 1, a + 1 + n, cmp); Build(1, 1, m);\n\tint p = 0; \n\tfor (rei i = 1; i <= n; i++)\n\t{\n\t\tp = max(p, i);\n\t\tfor (; p <= n && !T[1].w; p++) Update(1, a[p].l, a[p].r, 1);\n\t\tif (T[1].w) ans = min(a[p - 1].w - a[i].w, ans);\n\t\tUpdate(1, a[i].l, a[i].r, -1);\n\t}\n\tprintf(\"%d\", ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1639740451,
        "uid": 200930,
        "name": "\u30d9\u72d0\u4ed9\u59d0\u59d0\u3054",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF1555E\u3010Boring Segments\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u6709\u4e00\u6761\u8303\u56f4 $[1,m]$ \u7684\u6570\u8f74\uff0c\u6709 $n$ \u6761\u7ebf\u6bb5 \uff0c\u7b2c $i$ \u6761\u4e3a $[l_i,r_i]$ \uff0c\u6743\u503c\u4e3a $w_i$ \uff0c\u9009\u53d6\u4e00\u4e9b\u7ebf\u6bb5\u4f7f\u5f97\u5b83\u4eec\u53ef\u4ee5\u8986\u76d6\u6574\u6761\u6570\u8f74\uff08\u5305\u62ec\u975e\u6574\u6570\u7684\u70b9\uff09\uff0c\u6c42\u6743\u503c\u7684\u6781\u5dee\u6700\u5c0f\u503c\u3002\n\n## Solution\n\n\u6211\u89c9\u5f97\u672c\u9898\u53ef\u4ee5\u5b66\u4e60\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u601d\u60f3\u662f\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u6781\u5dee\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8003\u8651\u628a\u533a\u95f4\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u7528\u53cc\u6307\u9488\u6c42\u6700\u503c\u3002\n\n\u5177\u4f53\u5730\uff0c\u5148\u8003\u8651\u52a0\u5165\u533a\u95f4\uff0c\u6b64\u65f6\u79fb\u52a8\u53f3\u7aef\u70b9\uff0c\u5982\u679c\u5f53\u524d\u6240\u53d6\u533a\u95f4\u8fd8\u6ca1\u6709\u5b8c\u5168\u8986\u76d6\u6570\u8f74\uff0c\u90a3\u4e48\u6211\u5c31\u4e00\u76f4\u53d6\uff0c\u76f4\u5230\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u4fbf\u505c\u6b62\u3002\n\n\u8fd9\u6837\u505a\u7684\u5408\u7406\u6027\u5728\u4e8e\u8981\u6c42\u7684\u662f\u6781\u5dee\uff0c\u6211\u4eec\u6309\u6743\u503c\u6392\u5e8f\u540e\uff0c\u90fd\u662f\u5c3d\u53ef\u80fd\u8ba9\u6743\u503c\u5c0f\u7684\u5148\u53d6\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u4f1a\u5728\u8fd8\u6ca1\u6709\u8986\u76d6\u6570\u8f74\u8fd9\u79cd\u8feb\u4e0d\u5f97\u5df2\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u53d6\u66f4\u5927\u7684\u7ebf\u6bb5\uff0c\u4e14\u6392\u5e8f\u540e\u6bcf\u6b21\u53d6\u7684\u90fd\u662f\u5f53\u524d\u53ef\u4ee5\u53d6\u7684\u6700\u5c0f\u7684\u6743\u503c\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6781\u5dee\u6700\u5c0f\u7684\u5408\u6cd5\u6027\u3002\n\n\u7136\u540e\u8003\u8651\u80fd\u5426\u5220\u53bb\u4e00\u4e9b\u533a\u95f4\uff0c\u4e5f\u5373\u79fb\u52a8\u5de6\u7aef\u70b9\u3002\n\n\u5982\u679c\u5f53\u524d\u5de6\u7aef\u70b9\u533a\u95f4\u5220\u53bb\u4ecd\u7136\u4f7f\u5f97\u6761\u4ef6\u6ee1\u8db3\uff0c\u90a3\u4e48\u5de6\u7aef\u70b9\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002\n\n\u8fd9\u6837\u505a\u7684\u5408\u6cd5\u6027\u5728\u4e8e\uff0c\u6781\u5dee\u53ea\u4f1a\u53d7\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5f71\u54cd\uff0c\u6700\u5927\u503c\u5f53\u524d\u5df2\u7ecf\u4e0d\u53d8\u4e86\uff0c\u53ea\u9700\u8981\u4f7f\u5f97\u6700\u5c0f\u503c\u5c3d\u53ef\u80fd\u5927\u3002\n\n\u5176\u5b9e\uff0c\u8fd9\u4e5f\u6b63\u662f\u6211\u4eec\u6392\u5e8f\u7684\u5173\u952e\u6240\u5728\uff0c\u5982\u679c\u539f\u6765\u7684\u5e8f\u5217\u6743\u503c\u662f\u4e71\u5e8f\u7684\uff0c\u6bcf\u6b21\u52a0\u5165\uff0c\u5220\u9664\u533a\u95f4\u65f6\uff0c\u4e0d\u597d\u8003\u8651\u5bf9\u6781\u5dee\u7684\u5f71\u54cd\uff0c\u4e0d\u77e5\u9053\u662f\u5426\u5e94\u8be5\u7ee7\u7eed\u52a0\u5165\u6216\u5220\u9664\uff0c\u6392\u5e8f\u6b63\u5de7\u5999\u5730\u89c4\u907f\u4e86\u8fd9\u4e00\u95ee\u9898\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5982\u4f55\u5224\u65ad\u6570\u8f74\u5df2\u7ecf\u5168\u90e8\u88ab\u8986\u76d6\uff0c\u53ea\u9700\u8981\u6bcf\u6b21\u7ed9\u9009\u7684\u533a\u95f4\u6253\u4e0a\u6807\u8bb0\u5373\u53ef\uff0c\u800c\u8fd9\u4e2a\u64cd\u4f5c\u5b8c\u5168\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u5b9e\u73b0\uff0c\u53ea\u9700\u8981\u5224\u65ad\u5168\u5c40\u6700\u5c0f\u503c\u662f\u5426\u4e3a $0$ \u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(nlogm)$ \u3002\n\n\n\n",
        "postTime": 1635496319,
        "uid": 213256,
        "name": "Constant",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1555E Boring Segments"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\u6709 $n$ \u4e2a\u7ebf\u6bb5\uff0c\u6bcf\u6761\u7ebf\u6bb5\u6709\u4e09\u4e2a\u503c $l_{i},r_{i},w_{i}$\uff0c\u8868\u793a\n\u8986\u76d6 $[l_{i},r_{i}]$ \u7684\u6743\u503c\u4e3a $w_{i}$\u3002\u8981\u4f60\u9009\u62e9\u4e00\u4e9b\u7ebf\u6bb5\uff0c\u4f7f\u5176\u8986\u76d6 $[1,m]$\uff0c\u5e76\u4e14\u8981**\u6743\u503c\u7684\u6700\u5927\u503c\u51cf\u6743\u503c\u7684\u6700\u5c0f\u503c**\u6700\u5c0f\uff0c\u95ee\u4f60\u6700\u5c0f\u503c\u662f\u591a\u5c11\u3002\n\n## \u524d\u7f6e\u829d\u58eb\n\n1. \u7ebf\u6bb5\u6811\uff1b\n1. \u5c3a\u53d6\u3002\n\n\u5982\u679c\u4e0d\u4f1a\u7684\u8bdd\u5148\u628a [CF253B](https://www.luogu.com.cn/problem/CF253B)\uff08\u5c3a\u53d6\uff09\u548c [P3372](https://www.luogu.com.cn/problem/P3372)\uff08\u7ebf\u6bb5\u6811\uff09\u6253\u4e86\u3002\n\n## \u601d\u8def\n\u9996\u5148\uff0c\u5728\u4f1a\u524d\u7f6e\u829d\u58eb\u7684\u60c5\u51b5\u4e0b\u5f88\u5bb9\u6613\u5c31\u60f3\u5230\u5148\u5c06\u6743\u503c $w_{i}$ \u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u7528\u4e24\u6839\u6307\u9488 $t,w$  \u8fdb\u884c\u7ef4\u62a4\uff0c\u6bcf\u6b21\u5224\u65ad $[1,n]$ \u4e2d\u7684\u6700\u5c0f\u503c\u662f\u5426\u5927\u4e8e $0$\uff08\u5927\u4e8e $0$ \u610f\u5473\u7740\u5168\u90e8\u88ab\u8986\u76d6\uff09\uff0c\u4e4b\u540e\u53d6\u4e00\u4e2a\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff1a\u7ebf\u6bb5\u6811\u7684\u6570\u7ec4\u81f3\u5c11\u662f $4$ \u500d\uff08PS\uff1a\u672c\u6765\u60f3\u5148\u8bd5\u4e00\u8bd5\u4f1a\u4e0d\u4f1a MLE\uff0c\u6ca1\u60f3\u5230\u4e00\u904d\u8fc7\uff0c\u8fde\u79bb\u6563\u5316\u90fd\u4e0d\u9700\u8981\uff09\u3002\n\n\u6700\u540e\uff0c\u8d34\u4e0a\u6211~~\u4e11\u964b\u7684~~\u7a0b\u5e8f\uff1a\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint i,n,m,t,w,MIN,add[4000400],Min[4000400];  \nstruct node{int l,r,w;}a[300300];\nbool cmp(node x,node y){return x.w<y.w;}\nvoid pushdown(int num,int l,int r){\n\tif (add[num]==0) return ;\n\tadd[num<<1]+=add[num];  add[num<<1|1]+=add[num];\n\tMin[num<<1]+=add[num];  Min[num<<1|1]+=add[num];\n\tadd[num]=0;\n}\nvoid update(int L,int R,int c,int l,int r,int num){\n\tif (L<=l&&r<=R) {Min[num]+=c;add[num]+=c;return ;}\n\tint m=(l+r)>>1;\n\tpushdown(num,m-l+1,r-m);\n\tif (L<=m) update(L,R,c,l,m,num<<1);\n\tif (R>m) update(L,R,c,m+1,r,num<<1|1);    \n\tMin[num]=min(Min[num<<1],Min[num<<1|1]);\n}\nint main(){\n\tscanf(\"%d %d\",&n,&m);m--;  //\u6ce8\u610f\uff1a\u6839\u636e\u9898\u76ee\u201c\u9996\u5c3e\u76f8\u63a5\u201d\u7684\u5b9a\u4e49\uff0c\u6b64\u5904\u9700\u51cf1\uff0c\u540e\u9762\u4e5f\u662f\u540c\u7406\uff0c\u4f60\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u539f\u56e0\uff08\u4e0d\u7136\u6837\u4f8b\u4e5f\u8fc7\u4e0d\u4e86\uff0c\u4f1a\u8f93\u51fa1\uff09\n\tfor (i=1;i<=n;i++) scanf(\"%d %d %d\",&a[i].l,&a[i].r,&a[i].w),a[i].r--;\n\tsort(a+1,a+1+n,cmp);  /*\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f*/  MIN=(2e9); //\u5148\u53d6\u4e00\u4e2a\u6700\u5927\u503c\n\tfor (t=1,w=1;w<=n;w++){  //\u6bcf\u4e00\u8f6ew\u6307\u9488\u5411\u540e\u79fb\n\t\tupdate(a[w].l,a[w].r,1,1,m,1);  //\u533a\u95f4\u5185\u6240\u6709\u6570+1\n\t\tif (!Min[1]) continue;       //Min[1]\u4ee3\u8868[1,m]\u7684\u6700\u5c0f\u503c\uff0c\u5982\u679c\u4e3a0\u5219\u662f\u6ca1\u6709\u8986\u76d6\u6210\u529f\uff0c\u76f4\u63a5\u9000\u51fa\n\t\twhile (t<=w&&Min[1]>0) update(a[t].l,a[t].r,-1,1,m,1),t++; //\u7136\u540et\u6307\u9488\u540e\u79fb\uff0c\u77e5\u9053\u4e0d\u6210\u7acb\n\t\tMIN=min(MIN,a[w].w-a[t-1].w);  //\u56e0\u4e3at\u6307\u9488\u6b64\u65f6\u6307\u5411\u4e0d\u6210\u7acb\u7684\u4f4d\u5b50\uff0c\u800ct-1\u7684\u4f4d\u5b50\u6b64\u65f6\u662f\u6210\u7acb\u7684\uff0c\u6240\u4ee5\u6b64\u5904t-1\n\t}\n\tprintf(\"%d\\n\",MIN); //\u8f93\u51fa\uff08\u5b8c\u7ed3\u6492\u82b1\uff09\n\treturn 0;\n} \n```\n\n## \u7ed3\u8bed\n\u5982\u679c AC \u4e86\u8fd9\u9898\uff0c\u5efa\u8bae\u518d\u53bb\u505a [P1712](https://www.luogu.com.cn/problem/P1712)\uff0c~~\u8fd9\u53ef\u662f\u53cc\u500d\u7ecf\u9a8c\u554a~~\uff0c\u6b64\u9898\u4e0e\u8fd9\u9898\u540c\u6837\u601d\u8def\uff0c\u4f46\u662f\u56e0\u4e3a\u6570\u636e\u5927\u8fd8\u9700\u8981\u79bb\u6563\u5316\uff0c\u53ef\u4ee5\u5e2e\u4f60\u53bb\u7ec3\u7ec3\u624b\u3002\n\n\n\u597d\u4e86\uff0c\u8c22\u8c22\u5927\u5bb6\u89c2\u770b\u3002\n",
        "postTime": 1628411183,
        "uid": 523525,
        "name": "\u5f90\u5929\u4e7e",
        "ccfLevel": 0,
        "title": "CF1555E \u9898\u89e3"
    },
    {
        "content": "[$\\Large \\text{CF1555E Boring Segment}$](https://www.luogu.com.cn/problem/CF1555E)\n\n### $\\text{Discription}$\n\n\u5728 $n$ \u6761\u7ebf\u6bb5\u4e2d\u9009\u51fa\u4e00\u4e9b\u7ebf\u6bb5\u8986\u76d6 $1 \\sim m$ \u6574\u6761\u7ebf\u6bb5\uff0c\u4f7f\u5f97\u7ebf\u6bb5\u7684\u6743\u503c\u7684\u6781\u5dee\u6700\u5c0f\u3002\n\n### $\\text{Solution}$\n\n\u770b\u5230\u201c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u5c3d\u91cf\u5c0f\u201d\uff0c\u4e8c\u5206\u5df2\u4e0d\u8db3\u4ee5\u6c42\u89e3\uff08\u56e0\u4e3a\u4e0d\u786e\u5b9a\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff09\u3002\u5148\u8003\u8651\u8d2a\u5fc3\uff0c\u5f53\u9009\u62e9\u7ebf\u6bb5\u7684\u6700\u5927\u6743\u503c\u548c\u6700\u5c0f\u6743\u503c\u786e\u5b9a\u65f6\uff0c\u6743\u503c\u5728\u5b83\u4eec\u4e4b\u95f4\u7684\u7ebf\u6bb5\u9009\u62e9\u4e86\uff0c\u7b54\u6848\u80af\u5b9a\u4e0d\u4f1a\u66f4\u52a3\u3002\u6211\u4eec\u628a\u7ebf\u6bb5\u6309\u6743\u503c\u6392\u5e8f\uff0c\u9009\u62e9\u7684\u5c31\u4e00\u5b9a\u662f\u4e00\u5806\u8fde\u7eed\u7684\u7ebf\u6bb5\u4e86\u3002\n\n\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u6709\u6761\u4ef6\u9650\u5236\uff0c\u60f3\u5230\u4e86\u5565\uff1fTwo-pointers\u3002\u6211\u4eec\u679a\u4e3e\u5de6\u7aef\u70b9\uff0c\u7136\u540e\u628a\u4e0a\u6b21\u7684\u53f3\u7aef\u70b9\u7ee7\u7eed\u5411\u53f3\u79fb\u52a8\u5373\u53ef\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u5224\u65ad\u662f\u5426\u5168\u90e8\u8986\u76d6\u5462\uff1f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u6bcf\u65b0\u52a0\u3001\u5220\u9664\u4e00\u6761\u7ebf\u6bb5\u5c31\u533a\u95f4\u4fee\u6539\uff0c\u5f53 $1 \\sim m$ \u4e4b\u95f4\u7684\u7ebf\u6bb5\u88ab\u8986\u76d6\u6b21\u6570\u7684\u6700\u5c0f\u503c $\\ge 1$ \u7684\u65f6\u5019\u8bf4\u660e\u5168\u90e8\u88ab\u8986\u76d6\u4e86\u3002\n\n### $\\text{Code}$\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn=4000010;\n#define int long long\nstruct Node{\n\tint l,r,w;\n}node[maxn];\nstruct Segment{\n\tint ls,rs,mx,tag;\n}seg[maxn]; \nint n,m;\ninline void build(int l,int r,int pos){\n\tseg[pos].ls=l,seg[pos].rs=r;\n\tif(l==r) return;\n\tint mid=l+r>>1;\n\tif(l<=mid) build(l,mid,pos<<1);\n\tif(mid<r) build(mid+1,r,pos<<1|1);\n}\nint minn(int a,int b){\n\treturn a<b?a:b;\n}\ninline void pushdown(int pos){\n\tif(seg[pos].tag){\n\t\tseg[pos<<1].tag+=seg[pos].tag;\n\t\tseg[pos<<1].mx+=seg[pos].tag;\n\t\tseg[pos<<1|1].tag+=seg[pos].tag;\n\t\tseg[pos<<1|1].mx+=seg[pos].tag;\n\t\tseg[pos].tag=0;\n\t}\n}\ninline void pushup(int pos){\n\tseg[pos].mx=minn(seg[pos<<1].mx,seg[pos<<1|1].mx);\n}\ninline void change(int l,int r,int cost,int pos){\n\tif(l<=seg[pos].ls&&seg[pos].rs<=r){\n\t\tseg[pos].tag+=cost;\n\t\tseg[pos].mx+=cost;\n\t\treturn;\n\t}\n\tpushdown(pos);\n\tint mid=seg[pos].ls+seg[pos].rs>>1;\n\tif(l<=mid) change(l,r,cost,pos<<1);\n\tif(mid<r) change(l,r,cost,pos<<1|1);\n\tpushup(pos);\n}\ninline bool cmp(Node A,Node B){\n\treturn A.w<B.w;\n}\nint ans=2e9;\nsigned main(){\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(int i=1;i<=n;i++) scanf(\"%lld%lld%lld\",&node[i].l,&node[i].r,&node[i].w);\n\tbuild(1,m-1,1);\n\tsort(node+1,node+n+1,cmp);\n\tint hd=1,tl=0;\n\twhile(hd<=n){\n\t\tbool flag=false;\n\t\tif(seg[1].mx>0){\n\t\t\tflag=true;\n\t\t}\n\t\telse {\n\t\t\twhile(tl<n){\n\t\t\t\ttl++; change(node[tl].l,node[tl].r-1,1,1);\n\t\t\t\tif(seg[1].mx>0){\n\t\t\t\t\tflag=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag){\n\t\t\t//printf(\"check: %lld %lld\\n\",hd,tl);\n\t\t\tif(ans>(node[tl].w-node[hd].w)) ans=(node[tl].w-node[hd].w);\n\t\t}\n\t\tchange(node[hd].l,node[hd].r-1,-1,1); hd++;\n\t} \n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1628149660,
        "uid": 334727,
        "name": "BreakPlus",
        "ccfLevel": 0,
        "title": "Solution CF1555E"
    },
    {
        "content": "# E.Boring Segments\n$\\mathtt{Difficulty}$=$\\mathtt{2100}$\n\n\u9898\u610f\u662f\u6700\u5c0f\u5316\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\uff0c\u4e0d\u96be\u60f3\u5230 $\\texttt{two-pointer}$\u3002\n\n\u679a\u4e3e\u5de6\u7aef\u70b9\uff0c\u7136\u540e\u628a\u4e0a\u6b21\u7684\u53f3\u7aef\u70b9\u7ee7\u7eed\u5411\u53f3\u79fb\u52a8\u5373\u53ef\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u8fd9\u4e2a\u533a\u95f4\u3002\n\n\u63d2\u5165\u3001\u5220\u9664\u5c31\u662f\u5728\u7ebf\u6bb5\u6811 $[l,r-1]$ \u4e0a\u52a0\u51cf\uff0c\u7ef4\u62a4\u533a\u95f4\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O(n\\log m)}$\uff0c\u60f3\u5fc5\u662f\u6b63\u89e3\u5427\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Struct\n{\n    int Left,Right,Value;\n    inline bool operator <(const Struct &Compare)const\n    {\n        return Value<Compare.Value;\n    }\n};\nstruct Node\n{\n    int Tmp,Tag;\n};\nint N,M;\nStruct S[1000010];\nNode C[4000040];\ninline void Pd(int Rt)\n{\n    if(C[Rt].Tag)\n    {\n        C[Rt*2].Tag+=C[Rt].Tag;\n        C[Rt*2+1].Tag+=C[Rt].Tag;\n        C[Rt*2].Tmp+=C[Rt].Tag;\n        C[Rt*2+1].Tmp+=C[Rt].Tag;\n    }\n    C[Rt].Tag=0;\n}\ninline void Pu(int Rt)\n{\n    C[Rt].Tmp=min(C[Rt*2].Tmp,C[Rt*2+1].Tmp);\n}\ninline void Add(int Rt,int L,int R,int LL,int RR,int VV)\n{\n    if(L>=LL&&R<=RR){C[Rt].Tag+=VV,C[Rt].Tmp+=VV;return;}\n    Pd(Rt);\n    if((L+R>>1)>=LL)Add(Rt*2,L,(L+R>>1),LL,RR,VV);\n    if((L+R>>1)<RR)Add(Rt*2+1,(L+R>>1)+1,R,LL,RR,VV);\n    Pu(Rt);\n}\nint main(void)\n{\n    register int i,Cnt=0,Ans=INT_MAX,T=0;\n    cin>>N>>M,M--;\n    for(i=1;i<=N;i++)cin>>S[i].Left>>S[i].Right>>S[i].Value,S[i].Right--;\n    sort(S+1,S+N+1);\n    while(!C[1].Tmp)Cnt++,Add(1,1,M,S[Cnt].Left,S[Cnt].Right,1);\n    Add(1,1,M,S[Cnt].Left,S[Cnt].Right,-1);\n    for(i=Cnt;i<=N;i++)\n    {\n        Add(1,1,M,S[i].Left,S[i].Right,1);\n        while(C[1].Tmp)T++,Add(1,1,M,S[T].Left,S[T].Right,-1);\n        Add(1,1,M,S[T].Left,S[T].Right,1);\n        Ans=min(Ans,S[i].Value-S[T].Value),T--;\n    }\n    cout<<Ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1628151555,
        "uid": 132168,
        "name": "_Clown_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1555E\u3010Boring Segment\u3011"
    },
    {
        "content": "## \u5927\u81f4\u601d\u8def\n\u8bbe $a_i$ ($1 \\leq i \\leq m - 1$) \u8868\u793a\u4e3a $i$ \u4e0e $i + 1$ \u63d0\u4f9b\u901a\u8def\u7684 `segments` \u7684\u6570\u91cf\uff0c\u5373\u540c\u65f6\u8986\u76d6\u4e86 $i$ \u4e0e $i + 1$ \u7684 `segments` \u7684\u6570\u91cf\u3002\u90a3\u4e48\u6570\u5b57 $1$ \u4e0e $m$ \u4e4b\u95f4\u5b58\u5728\u901a\u8def\uff0c\u5f53\u524d\u4ec5\u5f53\u5bf9\u4e8e $\\forall{a_i}$ ($1 \\leq i \\leq m - 1$)\uff0c\u5747\u6709 $a_i \\geq 1$\uff0c\u5373 $max\\{a_i | 1 \\leq i \\leq m - 1\\} \\geq 1$\u3002\u56e0\u6b64\u5bf9\u4e8e\u9009\u62e9\u533a\u95f4\u7684\u64cd\u4f5c\uff0c\u5047\u8bbe\u9009\u62e9\u7684\u533a\u95f4\u8303\u56f4\u662f $[l_i, r_i]$, \u53ef\u4f7f $a_i := a_i + 1$ $(l_i \\leq i \\leq r_i)$\u3002\u540c\u7406\uff0c\u5bf9\u4e8e\u53d6\u6d88\u9009\u62e9\u533a\u95f4\u7684\u64cd\u4f5c\uff0c\u5047\u8bbe\u9009\u62e9\u7684\u533a\u95f4\u8303\u56f4\u662f $[l_i, r_i]$, \u53ef\u4f7f $a_i := a_i - 1$ $(l_i \\leq i \\leq r_i)$\u3002\n\n\u5bf9\u4e8e\u4e0a\u8ff0\u533a\u95f4\u67e5\u8be2\u3001\u533a\u95f4\u4fee\u6539\u7684\u9700\u6c42\uff0c\u6211\u4eec\u53ef\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log m)$\u3002\n\n\u6b64\u5916\uff0c\u7531\u4e8e\u6700\u7ec8\u7684\u82b1\u8d39\u4e3a\u9009\u62e9\u7684 `segments` \u4e2d\u4ee3\u4ef7\u6700\u5927\u4e0e\u4ee3\u4ef7\u6700\u5c11\u7684\u5dee\uff0c\u56e0\u6b64\u5047\u8bbe\u5f53\u524d\u9009\u62e9\u7684\u7ebf\u6bb5\u4e2d\u4ee3\u4ef7\u6700\u5927\u7684\u4e3a $w_{max}$\uff0c\u4ee3\u4ef7\u6700\u5c0f\u7684\u4e3a $w_{min}$\uff0c\u5219\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u9009\u53d6\u6240\u6709\u4ee3\u4ef7\u4f4d\u4e8e $[w_{min}, w_{max}]$ \u4e4b\u95f4\u7684 `segments`\uff0c\u56e0\u4e3a\u9009\u53d6\u8fd9\u4e9b\u7ebf\u6bb5\u5bf9\u6700\u7ec8\u7b54\u6848\u4e0d\u4f1a\u9020\u6210\u5f71\u54cd\uff0c\u4e0d\u4f1a\u4f7f\u5f97\u7ed3\u679c\u53d8\u5f97\u66f4\u5dee\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8d2a\u5fc3\u7684\u8003\u8651\u95ee\u9898\uff0c\u5c06\u6240\u6709 `segments` \u6309\u7167\u5b83\u4eec\u7684\u4ee3\u4ef7\u8fdb\u884c\u6392\u5e8f\uff0c\u4e4b\u540e\u4f7f\u7528\u53cc\u6307\u9488\u7ef4\u62a4\u9009\u62e9\u7684 `segments` \u7684\u533a\u95f4\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u7684\u67e5\u8be2\u53ca\u4fee\u6539\u64cd\u4f5c\uff0c\u901a\u8fc7\u4e0a\u8ff0\u7684\u7ebf\u6bb5\u6811\u5b9e\u73b0\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\nusing i64 = long long;\n\n// \u7ebf\u6bb5\u6811\uff08\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff09\nstruct segtree {\n    struct node {\n        int mn = 0;\n        int add = 0;\n\n        void apply(int v) {\n            mn += v;\n            add += v;\n        }\n    };\n\n    int n;\n    vector<node> tree;\n\n    node unite(const node &a, const node &b) const {\n        node res;\n        res.mn = min(a.mn, b.mn);\n\n        return res;\n    }\n\n    void pull(int p) {\n        tree[p] = unite(tree[p * 2], tree[p * 2 + 1]);\n    }\n\n    void push(int s, int t, int p) {\n        if (tree[p].add) {\n            int mid = (s + t) / 2;\n\n            tree[p * 2].apply(tree[p].add);\n            tree[p * 2 + 1].apply(tree[p].add);\n\n            tree[p].add = 0;\n        }\n    }\n\n    int get(int l, int r) {\n        return get(l, r, 1, n, 1).mn;\n    }\n\n    node get(int l, int r, int s, int t, int p) {\n        if (l <= s && t <= r) {\n            return tree[p];\n        }\n\n        push(s, t, p);\n\n        node res;\n\n        int mid = (s + t) / 2;\n        if (r <= mid) {\n            res = get(l, r, s, mid, p * 2);\n        } else if (l > mid) {\n            res = get(l, r, mid + 1, t, p * 2 + 1);\n        } else {\n            res = unite(get(l, r, s, mid, p * 2), get(l, r, mid + 1, t, p * 2 + 1));\n        }\n\n        return res;\n    }\n\n    void modify(int l, int r, int c) {\n        modify(l, r, c, 1, n, 1);\n    }\n\n    void modify(int l, int r, int c, int s, int t, int p) {\n        if (l <= s && t <= r) {\n            tree[p].apply(c);\n            return;\n        }\n\n        push(s, t, p);\n\n        int mid = (s + t) / 2;\n        if (l <= mid)\n            modify(l, r, c, s, mid, p * 2);\n        if (mid < r)\n            modify(l, r, c, mid + 1, t, p * 2 + 1);\n\n        pull(p);\n    }\n\n    void build(int s, int t, int p, const vector<int> &v) {\n        if (s == t) {\n            tree[p].mn = v[s];\n            return;\n        }\n\n        int mid = (s + t) / 2;\n\n        build(s, mid, p * 2, v);\n        build(mid + 1, t, p * 2 + 1, v);\n\n        pull(p);\n    }\n\n    segtree(int _n): n(_n) {\n        tree.resize(n * 4 + 5);\n    }\n\n    segtree(const vector<int> &v) {\n        n = int(v.size()) - 1;\n        tree.resize(n * 4 + 5);\n\n        build(1, n, 1, v);\n    }\n};\n\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<tuple<int, int, int>> v(n + 1);\n    for (int i = 1; i <= n; i++) {\n        int l, r, w;\n        cin >> l >> r >> w;\n\n        v[i] = {l, r - 1, w};\n    }\n    sort(v.begin() + 1, v.begin() + 1 + n, [&](auto x, auto y) {\n        return get<2>(x) < get<2>(y);\n    });\n\n    segtree seg(m - 1);\n\n    int l = 1, r = 0, res = INT_MAX;\n    while (r < n) {\n        while (r < n && !seg.get(1, m - 1)) {\n            r++;\n            seg.modify(get<0>(v[r]), get<1>(v[r]), +1);\n        }\n\n        if (seg.get(1, m - 1) > 0) {\n            while (seg.get(1, m - 1) > 0) {\n                seg.modify(get<0>(v[l]), get<1>(v[l]), -1);\n                l++;\n            }\n\n            res = min(res, get<2>(v[r]) - get<2>(v[l - 1]));\n        }\n    }\n\n    cout << res << \"\\n\";\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    // int t;\n    // cin >> t;\n    // while (t--)\n        solve();\n\n    return 0;\n}\n```\n",
        "postTime": 1628091969,
        "uid": 426148,
        "name": "caoji2001",
        "ccfLevel": 0,
        "title": "Codeforces 1555E Boring Segments\uff08\u7ebf\u6bb5\u6811+\u53cc\u6307\u9488\uff09"
    }
]