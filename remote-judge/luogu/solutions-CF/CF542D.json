[
    {
        "content": "\u9996\u5148\u4e0d\u96be\u5f97\u51fa\uff0c$J(x)$\u662f\u4e2a\u79ef\u6027\u51fd\u6570\u3002\n\n\u5373\uff1a$J(1)=1$\uff0c\u5bf9\u4e8e$(a,b)=1$\uff0c\u6709$J(ab)=J(a)J(b)$\u3002\n\n\u4f46\u5b83\u4e0d\u662f\u5b8c\u5168\u79ef\u6027\u51fd\u6570\u3002\n\n\u4e0d\u96be\u5f97\u51fa\uff0c\u5bf9\u4e8e$p\\in\\mathbb{P}$\uff0c$J(p^k)=p^k+1$\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u628a$A$\u8868\u793a\u6210$\\prod\\limits_i(p_i^{k_i}+1)$\u7684\u5f62\u5f0f\u3002\n\n$10^{12}$\u5185\uff0c\u7ea6\u6570\u6700\u591a\u7684\u6570\u4e3a$963761198400$\uff0c\u5b83\u7684\u7ea6\u6570\u4e3a$6720$\u4e2a\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6c42$A$\u7684\u7ea6\u6570\uff0c\u7136\u540e\u7559\u4e0b\u6ee1\u8db3\u5f62\u5982$p^k+1$\u7684\u7ea6\u6570\u3002\n\n\u5982\u4f55\u5224\u65ad\u7ea6\u6570\u662f\u5426\u5f62\u5982$p^k+1$\u5462\uff1f\u5373\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u662f\u4e00\u4e2a\u8d28\u6570\u7684\u82e5\u5e72\u6b21\u65b9\u5462\uff1f\n\n\u9996\u5148\u628a$10^6$\u5185\u7684\u8d28\u6570\u7b5b\u51fa\u6765\uff0c\u7136\u540e\u9884\u5904\u7406\u5b83\u4eec\u7684\u82e5\u5e72\u6b21\u65b9\uff0c\u5728$10^{12}$\u8303\u56f4\u5185\u7684\u8fd9\u6837\u7684\u6570\u4e0d\u4f1a\u5f88\u591a\u3002\n\n\u5bf9\u4e8e\u5927\u4e8e$10^6$\u7684\u8d28\u6570\uff0c\u5b83\u6700\u591a\u53ea\u80fd\u662f\u4e00\u6b21\u65b9\uff0c\u5426\u5219\u5c31\u8d85\u8fc7$10^{12}$\u4e86\u3002\n\n\u90a3\u4e48\u5bf9$A$\u5206\u89e3\u56e0\u6570\uff0c\u5bf9\u6bcf\u4e2a\u56e0\u6570$a$\uff0c\u82e5$a-1$\u88ab\u9884\u5904\u7406\u51fa\u6765\u8fc7\uff0c\u6216$a-1$\u662f\u4e2a\u8d28\u6570\uff0c\u5219\u6211\u4eec\u628a\u5b83\u8bb0\u5f55\u4e0b\u6765\u3002\u5224\u65ad\u8d28\u6570\u7528Miller_Rabin\u5373\u53ef\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5DP\u6c42\u65b9\u6848\u6570\u4e86\u3002\n\n\u4ee4$f[i][j]$\u8868\u793a\u8003\u8651\u5230\u7b2c$i$\u4e2a\u8d28\u6570\uff0c\u5408\u6210$j$\u7684\u65b9\u6848\u6570\u3002\u7528map\u5b58\u3002\n\n\u6211\u4eec\u53ea\u8981\u8003\u8651\u6700\u540e\u80fd\u7ec4\u6210$A$\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e0d\u662f$A$\u7684\u7ea6\u6570\u7684\uff0c\u6211\u4eec\u4e0d\u7528\u7edf\u8ba1\u3002\n\n\u7136\u540e\u5c31\u662f\u7c7b\u4f3c\u80cc\u5305\u95ee\u9898\u3002\n\n\u6ce8\u610f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8d28\u6570$p$\uff0c\u53ef\u80fd\u80fd\u8868\u793a\u6210\u591a\u4e2a\u4e0d\u540c\u7684\u4e14\u6709\u7528\u7684$p^k+1$\u7684\u5f62\u5f0f\uff0c\u4e14$J(x)$\u4e0d\u662f\u5b8c\u5168\u79ef\u6027\u51fd\u6570\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u8d28\u6570$p$\u7684\u82e5\u5e72\u6b21\u5e42\uff0c\u6211\u4eec\u8981\u540c\u65f6\u8fdb\u884c\u8f6c\u79fb\u3002\n\n\u6709\u7528\u7684\u72b6\u6001\u6700\u591a$d(A)$\u4e2a\uff08$d(x)$\u8868\u793a$x$\u7684\u7ea6\u6570\u4e2a\u6570\uff09\uff0c\u5206\u89e3\u51fa\u7684\u53ef\u80fd\u7684\u5f62\u5982$p^k+1$\u7684\u6570\u4e5f\u6700\u591a\u53ea\u6709$d(A)$\u4e2a\u3002\n\n\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6$O(\\sqrt A+d(A)^2)$\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<vector>\n#include<map>\n#include<set>\n#define LL long long\nint pri[1000005],tot=0;\nbool isp[1000005];\nstd::map<LL,int>pk,f[2];\nstd::set<int>usd;\nstd::vector<LL>vec[2000005];\nvoid sieve(){\n\tfor(int i=2;i<=1e6;++i){\n\t\tif(!isp[i])pri[++tot]=i;\n\t\tfor(int j=1;j<=tot&&i*(LL)pri[j]<=1e6;++j){\n\t\t\tisp[i*pri[j]]=1;\n\t\t\tif(i%pri[j]==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\nnamespace Miller_Rabin{\n\tconst int P[]={2,3,7,97,19260817};\n\tinline LL mul(LL a,LL b,const LL&md){\n\t\tLL tmp=a*b-(LL)((long double)a*b/md+.5)*md;\n\t\treturn tmp+(tmp>>63&md);\n\t} \n\tinline LL pow(LL a,LL b,const LL&md){\n\t\tLL ret=1;\n\t\tfor(;b;b>>=1,a=mul(a,a,md))if(b&1)ret=mul(ret,a,md);\n\t\treturn ret;\n\t}\n\tbool test(LL a,LL p){\n\t\tLL x=p-1;\n\t\tint d=0;\n\t\twhile(!(x&1))++d,x>>=1;\n\t\tLL t=pow(a,x,p);\n\t\twhile(d--){\n\t\t\tconst LL ls=t;\n\t\t\tt=mul(t,t,p);\n\t\t\tif(t==1&&ls!=1&&ls!=p-1)return 0;\n\t\t}\n\t\treturn t==1;\n\t}\n\tbool check(LL n){\n\t\tif(n<2)return 0;\n\t\tif(n==2||n==3||n==7||n==97||n==P[4])return 1;\n\t\tfor(int i=0;i<5;++i)if(n%P[i]==0)return 0;\n\t\tfor(int i=0;i<5;++i)\n\t\tif(!test(P[i]%n,n))return 0;\n\t\treturn 1;\n\t}\n}\nint main(){\n\tsieve();\n\tLL n;\n\tscanf(\"%lld\",&n);\n\tfor(int i=1;i<=tot;++i){\n\t\tLL p=1;\n\t\twhile(n/p>=pri[i])pk[p*=pri[i]]=i;\n\t}\n\tfor(int i=1;(LL)i*i<=n;++i)\n\tif(n%i==0){\n\t\tif(pk.count(i-1))vec[pk[i-1]].push_back(i),usd.insert(pk[i-1]);\n\t\tif(i*i!=n){\n\t\t\tconst LL j=n/i;\n\t\t\tif(pk.count(j-1))vec[pk[j-1]].push_back(j),usd.insert(pk[j-1]);else\n\t\t\tif(Miller_Rabin::check(j-1))vec[++tot].push_back(j),usd.insert(tot);\n\t\t}\n\t}\n\tf[0][1]=1;\n\tint i=1;\n\tfor(int x:usd){\n\t\tf[i&1]=f[i&1^1];\n\t\tfor(auto j:f[i&1^1])\n\t\tfor(LL q:vec[x])\n\t\tif(n/q>=j.first&&n%(j.first*q)==0)f[i&1][j.first*q]+=j.second;\n\t\t++i;\n\t}\n\tprintf(\"%d\\n\",f[usd.size()&1][n]);\n\treturn 0;\n}\n```",
        "postTime": 1546600985,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF542D \u3010Superhero's Job\u3011"
    },
    {
        "content": "# [CF542D Superhero's Job](https://www.luogu.com.cn/problem/solution/CF542D) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=CF542D-Solution)\n\n### \u9898\u9762\n\n\u5b58\u5728 $ J(x) = \\sum_{k \\mid x, \\gcd(x, \\frac{x}{k}) = 1}k $\uff0c\u7ed9\u5b9a $ A $ \u6c42\u6ee1\u8db3 $ J(x) = A $ \u7684\u6b63\u6574\u6570\u89e3\u7684\u4e2a\u6570\u3002\n\n### Solution\n\n\u9996\u5148 $ J(x) $ \u662f\u4e2a\u4e0d\u5b8c\u5168\u79ef\u6027\u51fd\u6570\uff0c\u8fd9\u91cc\u5c1d\u8bd5\uff08\u53ef\u80fd\u4e0d\u4e25\u8c28\uff09\u8be6\u7ec6\u5730\u8bf4\u4e00\u4e0b\uff1a\n\n\u9996\u5148\u8003\u8651\u82e5\u6211\u4eec\u5c06 $ x $ \u8d28\u56e0\u6570\u5206\u89e3\u4e3a $ x = \\prod p_i^{k_i} $ \u7684\u5f62\u5f0f\uff0c\u90a3\u4e48\u679a\u4e3e\u5176\u56e0\u6570\u5c31\u76f8\u5f53\u4e8e\u662f\u679a\u4e3e\u5176\u6240\u6709\u8d28\u56e0\u5b50\u6240\u6709\u4e0d\u540c\u5e42\u6b21\u80fd\u591f\u7ec4\u6210\u7684\u6240\u6709\u6570 $ k $\uff0c\u800c\u5bf9\u5e94\u7684 $ \\dfrac{x}{k} $ \u4e5f\u5c31\u662f\u5269\u4e0b\u7684\u8d28\u56e0\u6570\u5408\u8d77\u6765\uff0c\u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u4e3a\u5c06\u6240\u6709\u8d28\u56e0\u6570\u5212\u5206\u4e3a\u4e24\u4e2a\u53ef\u7a7a\u7684\u96c6\u5408\uff0c\u800c\u8003\u8651 $ k \\perp \\dfrac{x}{k} $ \u7684\u6761\u4ef6\uff0c\u5176\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e24\u6570\u8d28\u56e0\u6570\u5206\u89e3\u540e\u65e0\u76f8\u540c\u8d28\u56e0\u5b50\uff0c\u4e8e\u662f\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u5bf9\u4e8e $ x $ \u5206\u89e3\u51fa\u7684 $ p_i $\uff0c\u6bcf\u4e00\u4e2a\u96c6\u5408\u4e2d\u8981\u4e48\u6709\u5168\u90e8\u7684 $ p_i $ \u8981\u4e48\u6ca1\u6709 $ p_i $\uff0c\u5426\u5219\u4e24\u4e2a\u96c6\u5408\u5c06\u4f1a\u6709\u516c\u56e0\u5b50 $ p_i $\u3002\u4e8e\u662f\u6700\u7ec8\u95ee\u9898\u8f6c\u5316\u4e3a\u5c06\u8d28\u56e0\u5b50\u79cd\u7c7b\u6570\u8fdb\u884c\u53ef\u7a7a\u5730\u5212\u5206\u3002\u8fd9\u65f6\u6211\u4eec\u60f3\u5230\uff0c\u5982\u679c $ a \\perp b $\uff0c\u90a3\u4e48 $ a, b $ \u8d28\u56e0\u6570\u5206\u89e3\u51fa\u6765\u7684\u8d28\u56e0\u5b50\u4e00\u5b9a\u5b8c\u5168\u4e0d\u540c\uff0c\u90a3\u4e48\u5047\u8bbe $ a $ \u6709 $ x $ \u79cd\uff0c$ b $ \u6709 $ y $ \u79cd\uff0c$ a \\times b $ \u5c31\u4e00\u5b9a\u6709 $ x + y $ \u79cd\uff0c\u6240\u4ee5\u4ece $ x $ \u79cd\u91cc\u9009\u62e9 $ [0, x] $ \u7684\u6240\u6709\u65b9\u6848\u4e58\u4e0a $ y $ \u79cd\u91cc\u9009\u62e9 $ [0, y] $ \u7684\u6240\u6709\u65b9\u6848\u4e00\u5b9a\u7b49\u4ef7\u4e8e\u4ece $ x + y $ \u79cd\u91cc\u9009\u62e9 $ [0, x + y] $ \u7684\u65b9\u6848\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u4ece\u7c7b\u4f3c\u7ec4\u5408\u610f\u4e49\u7684\u601d\u60f3\u4e0a\u53bb\u8003\u8651\uff0c\u6240\u4ee5\u4e00\u5b9a\u6709 $ J(a \\times b) = J(a) \\times J(b) (a \\perp b) $\u3002\n\n\u4e8e\u662f\u4e0d\u96be\u53d1\u73b0\u5bf9\u4e8e\u8d28\u6570 $ p $\uff0c\u6709 $ J(p) = p + 1 $\uff0c\u66f4\u5177\u4f53\u5730\u8bf4\u5e94\u4e3a $ J(p^k) = p^k + 1 $\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u5bf9 $ x $ \u5206\u89e3\u4e3a $ x = \\prod p_i^{k_i} $ \u65f6 $ J(x) $ \u5c31\u53d8\u4e3a\u4e86 $ J(x) = \\prod (p_i^{k_i} + 1) $\u3002\n\n\u81f3\u6b64\u4e0d\u96be\u60f3\u5230\uff0c\u6211\u4eec\u73b0\u5728\u5df2\u77e5 $ J(x) = A $\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u627e\u5230\u6240\u6709 $ A = \\prod (p_i^{k_i} + 1) $ \u7684\u5206\u89e3\u65b9\u6848\uff0c\u5c31\u4f1a\u4e00\u4e00\u5bf9\u5e94\u7740 $ x $ \u7684\u5206\u89e3\u65b9\u6848\uff0c\u4e5f\u5c31\u662f\u8bf4\u5206\u89e3\u65b9\u6848\u7684\u4e2a\u6570\u5c31\u662f\u6700\u7ec8\u7684\u7b54\u6848\u3002\n\n\u8003\u8651\u5982\u4f55\u5206\u89e3\uff0c\u663e\u7136\u5bf9\u4e8e $ 10^{12} $ \u7684\u8303\u56f4\u6839\u53f7\u5206\u6cbb\u662f\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u60f3\u6cd5\uff0c\u8003\u8651\u679a\u4e3e $ 10^6 $ \u4ee5\u5185\u7684\u6240\u6709\u8d28\u6570\uff0c\u53ca\u5176\u8303\u56f4\u5185\u7684\u82e5\u5e72\u6b21\u65b9\u4e22\u5230 `unordered_map` \u91cc\uff0c\u540c\u65f6\u9700\u8981\u8bb0\u5f55\u57fa\u4e8e\u7684\u8d28\u6570\uff0c\u800c\u82e5\u5176\u5b58\u5728 $ 10^6 $ \u4ee5\u5916\u7684\u56e0\u5b50\uff0c\u90a3\u4e48\u4e00\u5b9a\u6700\u591a\u4e3a\u4e00\u6b21\u65b9\uff0c\u53cd\u4e4b $ p^2 + 1 $ \u5c31\u4f1a\u8d85\u8fc7 $ 10^{12} $ \u4ece\u800c\u8d85\u8fc7\u8303\u56f4\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u8003\u8651\u6839\u53f7\u679a\u4e3e $ A $ \u7684\u6240\u6709\u56e0\u6570\uff0c$ 10^6 $ \u5185\u7684\u76f4\u63a5\u67e5\u4e00\u4e0b\u4e4b\u524d\u9884\u5904\u7406\u7684\u91cc\u9762\u6709\u6ca1\u6709\uff0c\u53cd\u4e4b\u5224\u65ad\u5176\u51cf $ 1 $ \u540e\u662f\u5426\u4e3a\u8d28\u6570\u5373\u53ef\u3002\n\n\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u80cc\u5305\u5904\u7406\uff0c\u5373 $ dp(i, j) $ \u8868\u793a\u8003\u8651\u524d $ i $ \u4e2a\u8d28\u6570\uff08\u53ca\u5176\u82e5\u5e72\u6b21\u65b9\uff09\u80fd\u591f\u51d1\u6210 $ j $ \u7684\u65b9\u6848\u6570\uff0c\u8f6c\u79fb\u663e\u7136\uff0c\u540c\u65f6\u6ce8\u610f\u6574\u4e2a $ dp $ \u6570\u7ec4\u662f\u9700\u8981\u79bb\u6563\u4e0b\u6765\u7684\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u901a\u8fc7 `unordered_map` \u7ef4\u62a4\uff0c\u800c\u8bb0\u5f55\u57fa\u4e8e\u67d0\u4e2a\u8d28\u6570\u4fbf\u662f\u4e3a\u4e86\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u4e0d\u51fa\u73b0\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u8d28\u6570\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5bf9\u6bcf\u4e2a\u8d28\u6570\u5f00\u4e2a `basic_string` \u8bb0\u5f55\u5176\u6240\u6709\u5408\u6cd5\u7684 $ p^k $\uff0c\u5177\u4f53\u6765\u8bf4\u8fd9\u91cc\u4e5f\u9700\u8981\u79bb\u6563\u5316\uff0c\u53ef\u4ee5\u5957\u4e2a `unordered_map`\u3002\n\n\u5c1d\u8bd5\u5206\u6790\u590d\u6742\u5ea6\uff0c\u8003\u8651 DP \u65f6\uff0c\u663e\u7136\u679a\u4e3e\u7d20\u6570\u65f6\u6700\u591a\u6709 $ d(n) $\uff0c\u6211\u4eec\u5728 DP \u8fc7\u7a0b\u4e2d\u7b2c\u4e8c\u7ef4\u679a\u4e3e\u76f4\u63a5\u7528\u524d\u4e00\u7ef4\u7684\u72b6\u6001\u548c\u65b0\u7684\u8d28\u6570\u5408\u5e76\uff0c\u8fd9\u6837\u5408\u5e76\u4e4b\u540e\u7684\u6570\u4e00\u5b9a\u4ea6\u4e3a $ n $ \u7684\u56e0\u5b50\uff0c\u6545\u8fd9\u4e00\u7ef4\u4e5f\u662f $ d(n) $\uff0c\u5219 DP \u7684\u590d\u6742\u5ea6\u4e3a $ d^2(n) $\uff0c\u524d\u9762\u4e0d\u8bba\u662f\u7ebf\u6027\u7b5b\u4ea6\u6216\u662f\u679a\u4e3e\u56e0\u6570\u5747\u4e3a $ \\sqrt{n} $ \u7684\uff0c\u5bf9\u4e8e $ x $ \u7684 Miller-Rabin \u6734\u7d20\u5730\u8fdb\u884c $ k $ \u8f6e\u6d4b\u8bd5\u7684\u590d\u6742\u5ea6\u4e3a $ k\\log x $\uff0c\u6211\u4eec\u4f1a\u5bf9\u7ea6 $ \\dfrac{d(n)}{2} $ \u4e2a\u6570\u8fdb\u884c\u6d4b\u8bd5\u3002\u5219\u6700\u7ec8\u590d\u6742\u5ea6 $ O(\\sqrt{n} + d(n)(d(n) + k\\log n)) $\u3002\n\nTips\uff1a\u6ce8\u610f\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e Miller-Rabin \u6709\u591a\u5904\u4f1a\u8d85\u8fc7 `long long` \u8303\u56f4\uff0c\u9700\u8981\u5f00 `__int128_t` \u6216\u7528 `long double` \u5feb\u901f\u4e58\uff0c\u53ef\u4ee5\u901a\u8fc7 Sanitizer \u68c0\u6d4b signed-integer-overflow \u5e76\u8f93\u5165\u6700\u5927\u7684\u6570\u636e\u8fdb\u884c\u6d4b\u8bd5\u5bfb\u627e\u62a5\u9519\u3002\n\nUpd\uff1a\u6ce8\u610f\u5728 Miller-Rabin \u4e2d\u82e5\u6211\u4eec\u4f7f\u7528\u56fa\u5b9a\u7684\u57fa\u5e95\uff0c\u90a3\u4e48\u9a8c\u8bc1\u65f6\u9700\u8981\u5bf9\u4e8e\u57fa\u5e95\u8fdb\u884c $ a \\leftarrow a \\bmod{n} $\uff0c\u5e76\u4e14\u82e5 $ a \\equiv 0 \\pmod{n} $\uff0c\u90a3\u4e48\u5e94\u8be5\u76f4\u63a5\u8ba4\u4e3a\u5176\u901a\u8fc7\u672c\u8f6e\u6d4b\u8bd5\uff0c\u5426\u5219\u5728\u8fdb\u884c\u68c0\u6d4b\u56fa\u5b9a\u57fa\u5e95\u7684\u65f6\u5019\u4f1a\u6982\u7387\u51fa\u9519\u3002\n\n### Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW void* Edge::operator new(size_t){static Edge* P = ed; return P++;}\n#define ROPNEW_NODE void* Node::operator new(size_t){static Node* P = nd; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\n#define LIM (1100000)\n\ntemplate < typename T = int >\ninline T read(void);\n\nll N;\nunordered_map < ll, ll > dp[2];\nbasic_string < ll > Prime;\nunordered_map < ll, ll > pows;\nbitset < LIM + 100 > notPrime;\nunordered_map < ll, basic_string < ll > > tpow;\nbasic_string < ll > tot;\n\nnamespace MillerRabin{\n    int radix[10] = {0,  2, 3, 5, 7, 11, 13, 19, 17};\n    ll qpow(ll a, ll b, ll MOD){\n        ll ret(1), mul(a);\n        while(b){\n            if(b & 1)ret = (__int128_t)ret * mul % MOD;\n            b >>= 1;\n            mul = (__int128_t)mul * mul % MOD;\n        }return ret;\n    }\n    bool Check(ll N){\n        if(N <= 2 || !(N & 1))return N == 2;\n        ll base(N - 1); int cpow(0);\n        while(base % 2 == 0)base >>= 1, ++cpow;\n        for(int t = 1; t <= 8; ++t){\n            if(radix[t] % N == 0)continue;\n            ll cur = qpow(radix[t] % N, base, N);\n            if(cur == 1)continue;\n            for(int i = 1; i <= cpow; ++i){\n                if(cur == N - 1)break;\n                cur = (__int128_t)cur * cur % N;\n                if(i == cpow)return false;\n            }\n        }return true;\n    }\n};\n\nvoid Sieve(void){\n    for(ll i = 2; i <= LIM; ++i){\n        if(!notPrime[i])Prime += i;\n        for(auto p : Prime){\n            if(p * i > LIM)break;\n            notPrime[p * i] = true;\n            if(i % p == 0)break;\n        }\n    }\n}\nvoid Init(void){\n    Sieve();\n    for(auto p : Prime){\n        ll base(p);\n        while(base <= N)pows[base] = p, base *= p;\n    }\n    for(ll i = 1; i * i <= N; ++i){\n        if(N % i)continue;\n        if(pows.find(i - 1) != pows.end())\n            tpow[pows[i - 1]] += i, tot += pows[i - 1];\n        if(i * i != N){\n            if(pows.find(N / i - 1) != pows.end())\n                tpow[pows[N / i - 1]] += N / i, tot += pows[(N / i) - 1];\n            else if(MillerRabin::Check(N / i - 1))\n                tpow[N / i - 1] += N / i, tot += N / i - 1;\n        }\n    }\n    sort(tot.begin(), tot.end());\n    tot.erase(unique(tot.begin(), tot.end()), tot.end());\n}\n\nint main(){\n    N = read < ll >();\n    Init();\n    dp[0][1] = 1;\n    int base(0);\n    for(auto p : tot){\n        base ^= 1, dp[base] = dp[base ^ 1];\n        for(auto lst : dp[base ^ 1])\n            for(auto pri : tpow[p])\n                if((__int128_t)pri * lst.first <= N && N % (pri * lst.first) == 0)\n                    dp[base][pri * lst.first] += lst.second;\n    }printf(\"%lld\\n\", dp[base][N]);\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2023_02_10 \u521d\u7a3f\n\nupdate-2023_02_10 \u4fee\u6b63\u4e00\u4e9b\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u9519\u8bef\n\nupdate-2023_02_10 \u4fee\u6b63 Miller-Rabin \u4e2d\u7684\u9519\u8bef",
        "postTime": 1676023097,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "CF542D Superhero's Job \u9898\u89e3"
    },
    {
        "content": "\u53bb\u5e74\u548c\u5b66\u957f\u4e00\u8d77\u7814\u7a76\u4e86\u8fd9\u9053\u9898\u76ee\u3002\n\n\u6211\u6765\u53d1\u4e00\u7bc7\u7384\u5b66\u9898\u89e3...?\n\n\u9996\u5148\u6c42\u8fd9\u4e2a$J(x)$\u600e\u4e48\u6c42\uff1f\n\n\u89c2\u5bdf\u5b9a\u4e49\u5f0f\uff0c\u6ce8\u610f\u5230\u4e00\u4e2a\u8d28\u56e0\u5b50\u8981\u4e48\u53d6\uff0c\u8981\u4e48\u4e0d\u53d6\uff0c\u800c\u4e14\u8981\u53d6\u5c31\u5fc5\u987b\u53d6\u5b8c\u3002\n\n\u6240\u4ee5\n\n$$J(x)=\\prod_{i}(p_i^{a_i}+1)$$\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u6c42\n\n$$A=\\prod_{i}(p_i^{a_i}+1)$$\n\n\u7684\u89e3\u6570\u3002\n\n\u8003\u8651\u641c\u7d22+\u6839\u53f7\u5206\u6cbb(???)\uff0c\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u641c\u7d22\u65f6\u6bcf\u4e00\u6b21\u679a\u4e3e\u4e00\u4e2a\u8d28\u6570$p^x+1$\u540e\uff0c\u4e0b\u4e00\u6b21\u4e0d\u53ef\u80fd\u518d\u51fa\u73b0\u8d28\u6570$p$\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u8d28\u6570\u3002\n\n\u8bbe$F(i,A)$\u8868\u793a\u7528\u4ece\u5c0f\u5230\u5927$i\\sim \\infty$\u7684\u8d28\u56e0\u5b50\uff0c\u51d1\u51fa$A$\u7684\u65b9\u6848\u6570\u3002\n\n$<\\sqrt A$\u7684\u8d28\u56e0\u5b50\u641c\u7d22\uff0c$\\geq \\sqrt A$\u7684\u5355\u72ec\u8003\u8651\n\n\u5982\u679c$A=1,F(i,A)=1$\n\n\u5982\u679c$p_i+1=A,F(i,A)=1$\n\n\u5982\u679c$p_i+1>A,F(i,A)=0$\n\n\u53ef\u80fd\u6709$A=...\\times(P+1)$\uff0c\u5176\u4e2d$P+1>\\sqrt A$\uff0c\u600e\u4e48\u529e\uff1f\n\n\u6240\u4ee5\u5982\u679c$p_i^2+1>A>p_i+1$\uff0c\u90a3\u4e48\u5224\u65ad$A-1$\u662f\u4e0d\u662f\u8d28\u6570\u5373\u53ef\u3002\n\n\u663e\u7136$\\geq \\sqrt A$\u7684\u8d28\u6570\u5728\u641c\u7d22\u6811\u7684\u4e00\u6761\u94fe\u4e2d\u53ea\u4f1a\u51fa\u73b0$1$\u6b21\uff0c\u800c\u4e14\u5e38\u6570\u5c0f\uff0c\u53ef\u4ee5\u8fc7\u3002\n\n\u590d\u6742\u5ea6\uff1a\u7384\u5b66\n\n\u6211\u4eec\u6700\u574f\u5206\u6790\uff1a\n\n\u56e0\u4e3a\u5b58\u5728\u4e0d\u9009\u62e9\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u641c\u7d22\u6811\u7684\u6700\u5927\u6df1\u5ea6\u662f$\\frac{\\sqrt A}{\\ln A}$\n\n\u6bcf\u4e00\u5c42\u6700\u591a\u4f1a\u6709$\\log_2A\\ +1$\u6761\u5206\u652f\uff0c\u4e14$f(i,A)$\u4e2d\u7684$A$\u6c38\u8fdc\u662f\u521d\u59cb$A$\u7684\u7ea6\u6570\uff0c\u5927\u6982\u662f$\\sigma_0(A)$\u7ea7\u522b\u3002\n\n\u6240\u4ee5\u5355\u7eaf\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u6700\u574f\u662f$O(\\frac{\\sqrt A\\sigma_0(A)}{\\ln A})$\uff0c\u4f46\u662f\u7ea6\u6570\u4e2a\u6570\u600e\u4e48\u53ef\u80fd\u8fbe\u5f97\u5230$\\sqrt A$\u5462\uff1f\u800c\u4e14\u5404\u8def\u526a\u679d\u5e38\u6570\u5f88\u5c0f\uff0c$n\\leq 10^{12}$\u968f\u4fbf\u8dd1\n\n\u8fd8\u6709\u4e00\u4e2a\u74f6\u9888\u4eff\u4f5b\u662f\u8d28\u6570\u5224\u5b9a\uff1f\u4f46\u662f$A$\u7684\u7ea6\u6570\u4e2a\u6570\u662f$\\sigma_0(A)$\uff0c\u5927\u4e8e$\\sqrt A$\u7684\u7ea6\u6570\u4e2a\u6570\u4e5f\u662f\u8fd9\u4e2a\u7ea7\u522b\uff0c\u66b4\u529b\u5224\u65ad\u8d28\u6570\u590d\u6742\u5ea6\u4e5f\u5f88\u5bf9\uff0c\u6700\u574f$O(\\sigma_0(A)\\sqrt A)$\n\n\u90a3\u4e48\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(\\sigma_0(A)\\sqrt A)$\u3002\n\n\u8fd9\u4e2a\u5e38\u6570\u4e0d\u7528\u8bf4\u4e86\u5427\u3002\u7a33\u7a33\u901a\u8fc7\uff0c\u4e0d\u9700\u8981 Miller Rabin\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define ljc 998244353\nusing namespace std;\n#ifdef Fading\n#define gc getchar\n#endif\n#ifndef Fading\ninline char gc(){\n\tstatic char now[1<<16],*S,*T;\n\tif (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n\treturn *S++;\n}\n#endif\ninline ll read(){\n    register ll x=0,f=1;char ch=gc();\n    while (!isdigit(ch)){if(ch=='-')f=-1;ch=gc();}\n    while (isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=gc();}\n    return (f==1)?x:-x;\n}\nll n,p[100101],P,PMAX,tot,vis[1010101];\nunordered_map<ll,bool> has;\nmap<pair<ll,ll>,ll> mF;\ninline bool check(ll num){\n    if (num<=1000003) return !vis[num];\n    if (has.count(num)) return 1;\n\tfor (int i=1;i<=tot&&1LL*p[i]*p[i]<=num;i++){\n\t\tif (num%p[i]==0) return 0;\n\t}\n\thas[num]=1;\n\treturn 1;\n}\ninline ll F(ll num,int las){\n\tif (num==1) return 1;\n\tif (p[las]+1>num) return 0;\n\tif (p[las]+1==num) return 1;\n\tif (1LL*p[las]*p[las]+1LL>num) return check(num-1);\n\tif (mF.count(make_pair(num,las))) return mF[make_pair(num,las)];\n\tll now=p[las],sum=F(num,las+1);\n\tfor (;now+1<=num;now=1LL*now*p[las]){\n\t\tif (num%(now+1)==0){\n\t\t\tsum+=F(num/(now+1),las+1);\n\t\t}\n\t}\n\treturn (mF[make_pair(num,las)]=sum);\n}\ninline void init(int N){\n\tfor (int i=2;i<=N;i++){\n\t\tif (!vis[i]) p[++tot]=i;\n\t\tfor (int j=1;j<=tot&&i*p[j]<N;j++){\n\t\t\tvis[i*p[j]]=1;\n\t\t\tif (i%p[j]==0) break;\t\n\t\t}\n\t}\n}\nsigned main(){\n\tinit(1e6+3);\n\tn=read();\n\tprintf(\"%lld\\n\",F(n,1));\n\treturn 0;\n}\n```\n",
        "postTime": 1581737588,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF542D \u3010Superhero's Job\u3011"
    }
]