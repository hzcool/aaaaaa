[
    {
        "content": "## SA+\u5355\u8c03\u961f\u5217\n\n\u9996\u5148\u8f6c\u5316\u6210$SA$\u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a\u540e\u7f00\uff0c\u6211\u4eec\u627e\u51fa\u6765\u81ea $k$ \u4e2a\u4e0d\u540c\u5b57\u7b26\u4e32\u7684\u540e\u7f00\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684 $LCP$ \u6700\u5927\uff0c\u7136\u540e\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u7b54\u6848\u52a0\u4e0a $LCP$\u7684\u5927\u5c0f\n\n\u76f8\u5f53\u4e8e\u5728\u7edf\u8ba1\u7b54\u6848 $(l,r)$ \u7684\u4e2a\u6570\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a $l$ \uff0c\u6c42\u51fa $r$ \u6700\u5927\u662f\u591a\u5c11\uff0c\u7136\u540e\u8be5\u5b57\u7b26\u4e32\u7684\u7b54\u6848\u52a0\u4e0a $r-l+1$\n\n\u56e0\u6b64\u6309\u7167\u5957\u8def\uff0c\u6211\u4eec\u628a\u8fd9 $n$ \u4e2a\u5b57\u7b26\u4e32\u9996\u5c3e\u76f8\u63a5\uff0c\u5e76\u4e14\u4e3a\u4e86\u9632\u6b62\u8de8\u8d8a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u5f71\u54cd\u7b54\u6848\uff0c\u9700\u8981\u5728\u6bcf\u4e24\u4e2a\u5b57\u7b26\u4e2d\u95f4\u63d2\u5165\u4e00\u4e2a\u95f4\u9694\u7b26\uff0c\u5e76\u4e14\u9700\u8981**\u4e24\u4e24\u4e0d\u540c**\n\n\u6211\u4eec\u53d1\u73b0$LCP$\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff1a\u5bf9\u4e8e\u4e24\u4e2a\u540e\u7f00$i$\u3001$j$\uff0c\u5b83\u4eec\u5728 $SA$ \u4e2d\u7684\u8ddd\u79bb\u8d8a\u8fdc\uff0c$LCP$\u5c31\u8d8a\u77ed\uff08\u7ed3\u5408 \u201c $LCP$ \u662f\u7531 $Height$ \u6570\u7ec4\u53d6\u533a\u95f4\u6700\u5c0f\u503c\u6c42\u5f97\u7684 \u201d \u53ef\u4ee5\u5f62\u8c61\u7406\u89e3\uff09\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u627e\u5230\u7684 $k$ \u4e2a\u540e\u7f00\u5728SA\u6570\u7ec4\u4e2d\u7684\u6392\u540d\u5fc5\u987b\u5c3d\u53ef\u80fd\u4e0e\u8be5\u540e\u7f00 \u201c\u8fd1\u201d\n\n\u5982\u4f55\u91cf\u5316\u8fd9\u4e2a \u201c\u8fd1\u201d \u5462\uff1f\n\n\u6211\u4eec\u627e\u51faSA\u6570\u7ec4\u4e0a\u6240\u6709 \u201c \u5305\u542b**\u6070\u597d** $k$ \u4e2a\u4e0d\u540c\u5b57\u7b26\u4e32\u4e2d\u7684\u540e\u7f00 \u201d \u7684\u533a\u95f4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u533a\u95f4\u7684$LCP$ \u4f5c\u4e3a\u5b83\u7684 \u201c\u4ef7\u503c\u201d \uff0c\u8fd9\u6837\u4e00\u4e2a\u540e\u7f00\u7684\u7b54\u6848\u5c31\u4e00\u5b9a\u5728\u6240\u6709\u5305\u542b\u5b83\u7684\u533a\u95f4\u4e2d\uff08\u56e0\u4e3a\u5982\u679c\u5305\u542b\u4e86\u5927\u4e8ek\u4e2a\uff0c\u90a3\u4e48\u8fd9\u4e9b\u540e\u7f00\u4e00\u5b9a\u79bb\u5b83 \u201c \u4e0d\u591f\u8fd1 \u201d \uff09\uff0c\u53d6max\u5373\u53ef\n\n\u7528\u53cc\u6307\u9488\u7ef4\u62a4\uff0c\u5e76\u628a\u8fd9\u4e9b\u533a\u95f4\u585e\u5230\u4e00\u4e2avector\u91cc\uff0c\u7ed3\u5408\u7ef4\u62a4\u8fc7\u7a0b\u53ef\u4ee5\u5f97\u77e5\u8fd9\u6837\u7684\u533a\u95f4\u53ea\u6709$O(N)$\u4e2a\uff08$N$\u8868\u793a\u5b57\u7b26\u4e32\u957f\u5ea6\u548c\uff09\n\n\u7136\u540e\u5bf9\u4e8eSA\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u6c42\u51fa\u5bf9\u5e94\u7684\u7b54\u6848\uff0c\u7531\u4e8evector\u91cc\u7684\u533a\u95f4\u6ee1\u8db3\u5de6\u53f3\u7aef\u70b9\u90fd\u968f\u7740\u4e0b\u6807\u9012\u589e\u800c\u5355\u8c03\u4e0d\u964d\uff08\u56e0\u4e3a\u662f\u53cc\u6307\u9488\u7ef4\u62a4\u51fa\u6765\u7684\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u62bd\u8c61\u6210\u4e00\u4e2a\u533a\u95f4\u6c42max\uff0c\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u5373\u53ef\n\n\u590d\u6742\u5ea6$O(N\\log N)+O(N)+O(N)=O(N\\log N)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=200005;\nint n,m,k;\nint sa[N],rk[N],tmp[N<<1],cnt[N],h[N];\nint a[N];\nint st[N][20],lg[N];\nvoid SA(){\n\tint i,j,num=m+200;\n\tfor(i=1;i<=n;i++) cnt[rk[i]=a[i]]++;\n\tfor(i=2;i<=num;i++) cnt[i]+=cnt[i-1];\n\tfor(i=1;i<=n;i++) sa[++cnt[rk[i]-1]]=i;\n\tfor(j=1;j<n;j<<=1){\n\t\tfor(i=0;i<=num;i++) cnt[i]=0;\n\t\tfor(i=1;i<=n;i++) cnt[rk[i]]++;\n\t\tfor(i=2;i<=num;i++) cnt[i]+=cnt[i-1];\n\t\tfor(i=n-j+1;i<=n;i++) tmp[++cnt[rk[i]-1]]=i;\n\t\tfor(i=1;i<=n;i++)\n\t\t\tif(sa[i]>j) tmp[++cnt[rk[sa[i]-j]-1]]=sa[i]-j;\n\t\tfor(i=1;i<=n;i++) sa[i]=tmp[i];\n\t\tfor(i=1;i<=n;i++) tmp[i]=rk[i];\n\t\tnum=0;\n\t\tfor(i=1;i<=n;i++)\n\t\t\trk[sa[i]]=((tmp[sa[i]]==tmp[sa[i-1]]&&tmp[sa[i]+j]==tmp[sa[i-1]+j])?num:++num);\n\t}\n\tfor(i=1;i<=n;i++){\n\t\tif(rk[i]==1) continue;\n\t\th[rk[i]]=max(h[rk[i-1]]-1,0);\n\t\tint x=sa[rk[i]-1];\n\t\twhile(i+h[rk[i]]<=n&&a[i+h[rk[i]]]==a[x+h[rk[i]]]) h[rk[i]]++;\n\t}\n\tfor(i=1;i<=n;i++) st[i][0]=h[i];\n\tfor(j=1;(1<<j)<n;j++){\n\t\tfor(i=1;i+(1<<j)-1<=n;i++)\n\t\t\tst[i][j]=min(st[i][j-1],st[i+(1<<j-1)][j-1]);\n\t}\n}\nstring s[N];\nint len[N];\nint pos[N];\nll ans[N];\ninline int qmin(int l,int r){\n\tif(l>r) return len[sa[r]];\n\tint len=lg[r-l+1];\n\treturn min(st[l][len],st[r-(1<<len)+1][len]);\n}\nint q[N],hd,tl;\nstruct seg{\n\tint l,r,w;\n\tinline seg(int l,int r,int w):l(l),r(r),w(w){}\n};\nvector<seg> v;\nint main(){\n\tint i,j;\n\tcin>>m>>k;//\u6211\u8bben\u4e3a\u5b57\u7b26\u4e32\u603b\u957f\uff0cm\u4e3a\u5b57\u7b26\u4e32\u4e2a\u6570\n\tlg[1]=0;for(i=2;i<N;i++) lg[i]=lg[i-1]+(1<<lg[i-1]+1==i);\n\tfor(i=1;i<=m;i++){\n\t\tcin>>s[i];int l=s[i].length();\n\t\tfor(j=0;j<l;j++){\n\t\t\ta[++n]=s[i][j]-'a'+m;\n\t\t\tpos[n]=i;len[n]=l-j;\n\t\t}\n\t\ta[++n]=i;\n\t}\n\ta[n--]=0;\n\tSA();//\u6c42SA,Height\n\tmemset(cnt,0,sizeof(cnt));\n\tint p=m,ck=0;\n    //\u5faa\u73af\u53d8\u91cf\u4ecem\u5f00\u59cb\u662f\u56e0\u4e3a\u524dm-1\u4e2a\u4e00\u5b9a\u662f\u5206\u9694\u7b26\u6253\u5934\uff0c\u6ca1\u6709\u610f\u4e49\n\tfor(i=m;i<=n;i++){//\u9884\u5904\u7406\u533a\u95f4\u4ee5\u53ca\u4ef7\u503c\n\t\tint x=pos[sa[i]];//\u6ce8\u610f\u679a\u4e3e\u987a\u5e8f\u662fsa[1]~sa[n]\uff0c\u800c\u4e0d\u662f1~n\n\t\tif(!cnt[x]) ck++;\n\t\tcnt[x]++;\n\t\twhile(ck>=k){\n\t\t\tif(ck==k) v.push_back(seg(p,i,qmin(p+1,i)));\n\t\t\tif(cnt[pos[sa[p]]]==1){\n\t\t\t\tif(ck==k) break;\n\t\t\t\tck--;\n\t\t\t}\n\t\t\tcnt[pos[sa[p]]]--;p++;\n\t\t}\n\t}\n//\tfor(auto x:v) cout<<x.l<<\" \"<<x.r<<\" \"<<x.w<<endl;\n\tp=0;\n\tfor(i=m;i<=n;i++){//\u5355\u8c03\u961f\u5217\u7edf\u8ba1\u7b54\u6848\n\t\twhile(hd<tl&&v[q[hd]].r<i) hd++;\n\t\twhile(p<v.size()&&v[p].l<=i){\n\t\t\twhile(hd<tl&&v[p].w>=v[q[tl-1]].w) tl--;\n\t\t\tq[tl++]=p;\n\t\t\tp++;\n\t\t}\n\t\tif(hd==tl) continue;\n\t\tans[pos[sa[i]]]+=v[q[hd]].w;\n\t}\n\tfor(i=1;i<=m;i++) cout<<ans[i]<<\" \";\n\treturn 0;\n}\n```\n",
        "postTime": 1580565915,
        "uid": 62948,
        "name": "Crabby_Maskiv",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF204E \u3010Little Elephant and Strings\u3011"
    },
    {
        "content": "\u8d21\u732e\u4e00\u4e2a\u7528\u5e7f\u4e49$SAM$\uff0c\u4e0d\u7528\u5927\u529b\u6570\u636e\u7ed3\u6784\u7684\u505a\u6cd5\n\n\u628a\u95ee\u9898\u5206\u6210\u4e24\u90e8\u5206\u89e3\u51b3\n\n- \u6c42\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728\u591a\u5c11\u4e2a$a_i$\u4e2d\u51fa\u73b0\u8fc7\n- \u679a\u4e3e\u4e00\u4e2a\u4e32\u7684\u4e00\u4e2a\u70b9$i$\uff0c\u6c42\u4ee5$i$\u4e3a\u53f3\u7aef\u70b9\u7684\uff0c\u5728\u81f3\u5c11$k$\u4e2a$a_i$\u4e2d\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\n\n## Case 1\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u5efa\u5e7f\u4e49$SAM$\uff0c\u8bb0\u5f55${a_i}_j$\u5728$SAM$\u4e0a\u5bf9\u5e94\u7684\u8282\u70b9\u4e3a${pos_i}_j$\n\n\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u4e32$a_i$\u6765\u8bf4\uff0c\u5b83\u7684\u8d21\u732e\u76f8\u5f53\u4e8e\u662f\u6240\u6709${pos_i}_j$\u5728$SAM$\u4e0a\u6784\u6210\u7684\u4e00\u68f5\u865a\u6811\uff0c\u865a\u6811\u6bcf\u4e2a\u8282\u70b9sz+1\n\n\u90a3\u4e48\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u7528\u5dee\u5206\uff0c\u6309$dfs$\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e2a$pos$\u7684$sz$+1\uff0c\u7136\u540e\u6bcf\u5bf9\u76f8\u90bb\u7684$pos$\u7684$lca$\u7684$sz$-1\n\n```cpp\ninline bool cmp(const int &u, const int &v){return dfn[u]<dfn[v];}\n\nfor(register int i=1; i<=n; i++){\n    sort(pos[i]+1,pos[i]+len[i]+1,cmp);\n    for(register int j=1; j<=len[i]; j++) sz[pos[i][j]]++;\n    for(register int j=1; j<len[i]; j++) sz[lca(pos[i][j],pos[i][j+1])]--;\n}\n```\n\n\u7136\u540e\u8dd1\u4e2a$dfs$\u7d2f\u52a0\u5dee\u5206\u6570\u7ec4\n```cpp\n\nvoid addmk(int x){\n\tfor(register int u=fst[x]; u; u=edge[u].nxt) \n    \taddmk(edge[u].to),\n        sz[x] += sz[edge[u].to];\n}\n```\n\n\u7136\u540e\u5c31\u6c42\u51fa\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u51fa\u73b0\u6b21\u6570\n\n## Case 2\n\n\u8003\u8651\u4e00\u4e2a\u5f88\u66b4\u529b\u7684\u505a\u6cd5\n`while(x and sz[x]<K) x = fa(x);`\n\u5373\u627e\u5230\u7b2c\u4e00\u4e2a$sz\\geq K$\u7684\u7956\u5148\u7136\u540e\u628a$len$\u7d2f\u52a0\u8fdb\u7b54\u6848\n\n\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u500d\u589e\u53bb\u4ee3\u66ff\uff0c\u56e0\u4e3a\u8d8a\u5f80\u4e0a\u8d70\uff0c\u51fa\u73b0\u7684\u6b21\u6570\u80af\u5b9a\u8d8a\u591a\u3002\u6240\u4ee5\u7528\u7c7b\u4f3c\u4e8e\u6c42$lca$\u7684\u505a\u6cd5\uff0c\u5148\u8df3\u5230\u6700\u4e0a\u9762\u7684\u4e00\u4e2a$sz< K$\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u8df3\u4e00\u6b65\n```cpp\nint x = pos[i][j];\nfor(register int k=Log[dep[x]]; compl k; k--) \n\tif(sz[fa[k][x]]<K) x = fa[k][x]; \nif(sz[x]<K) x = fa[0][x];\nans += len(x);\n```\n\n\u5b8c\u6574\u4ee3\u7801\u5c31\u4e0d\u653e\u4e86\uff0c\u5173\u952e\u4ee3\u7801\u5168\u90e8\u5df2\u7ecf\u7ed9\u51fa\u6765\u4e86\n",
        "postTime": 1611146742,
        "uid": 56825,
        "name": "oisdoaiu",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF204E \u3010Little Elephant and Strings\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a \u7ebf\u6bb5\u6811\u5408\u5e76+\u540e\u7f00\u6811 \u597d\u7684\u7ec3\u624b\u9898\u3002[\u9898\u76ee\u94fe\u63a5](https://codeforces.com/contest/204/problem/E)\n\n## \u9898\u76ee\u53d9\u8ff0\n\n\u7ed9\u4f60\u4e00\u5806\u5b57\u7b26\u4e32\uff0c\u6c42\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u6709\u591a\u5c11\u4e2a\u4e8c\u5143\u7ec4$(l,r)$\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684$[l,r]$\u533a\u95f4\u5185\u7684\u5b57\u7b26\u6309\u987a\u5e8f\u5f62\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u81f3\u5c11\u5728$k$\u4e2a\u5b57\u7b26\u4e32\uff08\u5c31\u662f\u8fd9\u5806\u91cc\u7684\uff09\u4e2d\u51fa\u73b0\u8fc7\u3002\n\n## \u9898\u89e3\n\n\u5efa\u7acb\u5e7f\u4e49\u540e\u7f00\u6811\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u4e2d\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u6bcf\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u5b50\u4e32\u662f\u5426\u53ef\u4ee5\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u540e\u7f00\u7684\u7ed3\u5c3e\u8282\u70b9\uff0c\u770b\u90a3\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6709\u591a\u5c11\u4e2a\u53ef\u884c\u7684\u8282\u70b9\u3002\u7136\u540e\u7d2f\u52a0\u5230\u7b54\u6848\u4e0a\u3002\u5c31\u5b8c\u4e86...\u5176\u5b9e\u4e5f\u633a\u7b80\u5355\u7684\u9898\u5427\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <map>\n\nusing namespace std;\n\ntypedef long long ll;\nconst int maxLen = 2e5 + 5, maxNode = maxLen << 1, inf = 1e8;\nint strNum, common;\nstruct SuffixTree {\n\tint curLen, actLen, now, tail;\n\tmap<int, int> ch[maxNode];\n\tint link[maxNode], curStr[maxLen], start[maxNode], len[maxNode], tag[maxNode], end[maxNode];\n\tSuffixTree() {\n\t\tcurLen = actLen = 0;\n\t\tnow = tail = 1;\n\t\tlen[0] = inf;\n\t}\n\tint NewNode(int st, int le, int flag, int ed) {\n\t\tlink[++tail] = 1;\n\t\tstart[tail] = st;\n\t\tlen[tail] = le;\n\t\ttag[tail] = flag;\n\t\tend[tail] = ed;\n\t\treturn tail;\n\t}\n\tvoid Extend(int ins, int flag, int ed) {\n\t\tcurStr[++curLen] = ins;\n\t\t++actLen;\n\t\tfor (int last = 1; actLen; ) {\n\t\t\twhile (actLen > len[ch[now][curStr[curLen - actLen + 1]]])\n\t\t\t\tactLen -= len[now = ch[now][curStr[curLen - actLen + 1]]];\n\t\t\tint &son = ch[now][curStr[curLen - actLen + 1]], val = curStr[start[son] + actLen - 1];\n\t\t\tif (!son || val == ins) {\n\t\t\t\tlink[last] = now;\n\t\t\t\tlast = now;\n\t\t\t\tif (!son)\n\t\t\t\t\tson = NewNode(curLen - actLen + 1, inf, flag, ed);\n\t\t\t\telse\n\t\t\t\t\tbreak ;\n\t\t\t} else {\n\t\t\t\tint split = NewNode(start[son], actLen - 1, 0, inf);\n\t\t\t\tch[split][val] = son;\n\t\t\t\tch[split][ins] = NewNode(curLen, inf, flag, ed);\n\t\t\t\tstart[son] += actLen - 1;\n\t\t\t\tlen[son] -= actLen - 1;\n\t\t\t\tlink[last] = son = split;\n\t\t\t\tlast = split;\n\t\t\t}\n\t\t\tif (now == 1)\n\t\t\t\t--actLen;\n\t\t\telse\n\t\t\t\tnow = link[now];\n\t\t}\n\t}\n\tvoid Check() {\n\t\tfor (int pos = 1; pos <= curLen; ++pos)\n\t\t\tprintf(\"%c\", curStr[pos] + 'a');\n\t\tprintf(\"\\n\");\n\t\tfor (int id = 1; id <= tail; ++id) {\n\t\t\tprintf(\"id : %d end : %d start : %d len : %d\\n\", id, end[id], start[id], len[id]);\n\t\t\tfor (auto son : ch[id]) {\n\t\t\t\tprintf(\"\tto : %d\\n\", son.second);\n\t\t\t}\n\t\t}\n\t}\n} sft;\nchar str[maxLen];\nstruct SegmentTree {\n\tint tail;\n\tint ch[maxNode << 5][2], kind[maxNode << 5];\n\tvoid PushUp(int now) {\n\t\tif (ch[now][0] || ch[now][1]) \n\t\t\tkind[now] = kind[ch[now][0]] + kind[ch[now][1]];\n\t\telse\n\t\t\tkind[now] = 1;\n\t}\n\tvoid Insert(int &now, int lEP, int rEP, int val) {\n\t\tif (!now)\n\t\t\tnow = ++tail;\n\t\tif (lEP == rEP) {\n\t\t\tkind[now] = 1;\n\t\t\treturn ;\n\t\t}\n\t\tint mid = (lEP + rEP) >> 1;\n\t\tif (val <= mid)\n\t\t\tInsert(ch[now][0], lEP, mid, val);\n\t\telse\n\t\t\tInsert(ch[now][1], mid + 1, rEP, val);\n\t\tPushUp(now);\n\t}\n\tvoid Merge(int &to, int from) {\n\t\tif (!to || !from) {\n\t\t\tto |= from;\n\t\t\treturn ;\n\t\t}\n\t\tMerge(ch[to][0], ch[from][0]);\n\t\tMerge(ch[to][1], ch[from][1]);\n\t\tPushUp(to); //\u56e0\u4e3a\u8fd9\u91cc\u4e0d\u4e00\u5b9a\u4e0d\u66f4\u65b0\u53f6\u5b50\u8282\u70b9\uff0c\u6240\u4ee5 PushUp\u7684\u65f6\u5019\u8981\u5c0f\u5fc3 \n\t}\n\tvoid dfs(int now) {\n\t\tif (!now)\n\t\t\treturn ;\n\t\tprintf(\"********* now : %d ls : %d rs : %d\\n\", now, ch[now][0], ch[now][1]);\n\t\tdfs(ch[now][0]);\n\t\tdfs(ch[now][1]);\n\t}\n} seg;\nint can[maxNode], rt[maxNode], sum[maxNode];\nll ans[maxNode];\nvoid dfs1(int now) {\n\tif (!now)\n\t\treturn ;\n\tsft.len[now] = min(sft.len[now], sft.end[now] - sft.start[now]);\n\tfor (auto son : sft.ch[now]) {\n\t\tint to = son.second, charac = son.first;\n\t\tdfs1(to);\n\t\tseg.Merge(rt[now], rt[to]);\n\t}\n\tif (sft.tag[now]) {\n\t\tseg.Insert(rt[now], 1, strNum, sft.tag[now]);\n\t}\n\tif (seg.kind[rt[now]] >= common) {\n\t\tcan[now] = 1;\n\t}\n}\nvoid dfs2(int now) {\n\tif (!now)\n\t\treturn ;\n\tif (can[now])\n\t\tsum[now] += sft.len[now];\n\tfor (auto son : sft.ch[now]) {\n\t\tint to = son.second;\n\t\tsum[to] = sum[now];\n\t\tdfs2(to);\n\t}\n\tif (sft.tag[now]) {\n\t\tans[sft.tag[now]] += sum[now];\n//\t\tprintf(\"now : %d tag[now] : %d sum : %d\\n\", now, sft.tag[now], sum[now]);\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\", &strNum, &common);\n\tint tmp = 0;\n\tfor (int sI = 1; sI <= strNum; ++sI) {\n\t\tscanf(\"%s\", str + 1);\n\t\tint len = strlen(str + 1);\n\t\ttmp += len + 1;\n\t\tfor (int pos = 1; pos <= len; ++pos)\n\t\t\tsft.Extend(str[pos] - 'a', sI, tmp);\n\t\tsft.Extend(25 + sI, sI, tmp);\n\t}\n\tdfs1(1);\n\tdfs2(1);\n\tfor (int sI = 1; sI <= strNum; ++sI)\n\t\tprintf(\"%I64d\\n\", ans[sI]);\n\treturn 0;\n}\n```\n\n\n\n\u6ce8\u610f\uff1a\n\n+ \u8fd9\u79cd\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u5199\u6cd5\uff08\u5c31\u662f\u4e0d\u4f20$[l,r]$\u533a\u95f4\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\uff09\uff0c\u8981\u5728```PushUp```\u7684\u65f6\u5019\u5224\u65ad\u662f\u5426\u5230\u4e86\u53f6\u5b50\u8282\u70b9\uff0c\u56e0\u4e3a```merge```\u5b8c\u4e86\u4e4b\u540e\u5c31```PushUp```\u4e0d\u4e00\u5b9a\u4e0d\u662f\u53f6\u5b50\u3002",
        "postTime": 1580834806,
        "uid": 75715,
        "name": "KokiNiwa",
        "ccfLevel": 0,
        "title": "Little Elephant and Strings"
    },
    {
        "content": "# \u540e\u7f00\u6570\u7ec4$SA$ + \u7ebf\u6bb5\u6811\n\n\u597d\u770b\u70b9\u7684\u9898\u76ee\uff1a\n\n> \u7ed9\u51fa$n$\u4e2a\u5b57\u7b26\u4e32\uff0c\u6c42\u6bcf\u4e2a\u5b57\u7b26\u4e32\u6709\u591a\u5c11\u4e2a\u5b50\u4e32\u6ee1\u8db3\u8fd9\u4e2a\u5b50\u4e32\u540c\u65f6\u662f\u5176\u4ed6$k$\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6240\u6709\u4e32\u7528\u4e0d\u540c\u7684\u4e14\u4e0d\u662f\u5b57\u6bcd\u7684\u5b57\u7b26\u8fde\u63a5\u8d77\u6765\uff0c\u518d\u8dd1\u4e00\u904d\u540e\u7f00\u6570\u7ec4\u3002\n\n**\u8fd9\u6837\u5c31\u80fd\u628a\u6240\u6709\u4e32\u7684\u6bcf\u4e00\u4e2a\u540e\u7f00\u90fd\u6392\u5e8f\u51fa\u6765\u3002**\n\n\u4f8b\u5982\u5bf9\u4e8e\u5b57\u7b26\u4e32\u96c6\u5408\uff1a$\\{abab,babb,abaa\\}$\u3002\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd9\u6837\u628a\u5b83\u4eec\u62fc\u8d77\u6765\uff1a$S=abab1babb2abaa$\u3002\n\n\u8fd9\u65f6\u6211\u4eec\u5982\u679c\u8981\u6bd4\u8f83\u67d0\u4e24\u4e2a\u540e\u7f00\uff0c\u4f8b\u5982\u7b2c\u4e00\u4e2a\u4e32\u7684\u540e\u7f00$ab$\u4e0e\u7b2c\u4e8c\u4e2a\u4e32\u7684\u540e\u7f00$abb$\uff0c\u5b83\u4eec\u5728$S$\u4e2d\u5206\u522b\u662f\n\n\u540e\u7f00$ab1babb2abaa$\uff08$ab\\color{red}ab1babb2abaa$\uff09\n\n\u548c\u540e\u7f00$abb2abaa$\uff08$abab1b\\color{blue}abb2abaa$\uff09\u3002\n\n**\u90a3\u4e48\u5f53\u6211\u4eec\u5bf9$S$\u8fdb\u884c\u540e\u7f00\u6392\u5e8f\u65f6\uff0c\u4e00\u65e6\u6bd4\u8f83\u5230\u8fde\u63a5\u7b26\u6216\u4e24\u5b57\u7b26\u4e0d\u4e00\u6837\u65f6\uff0c\u5c31\u4f1a\u7acb\u5373\u505c\u6b62\u6392\u5e8f\uff08\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u8fde\u63a5\u7b26\u4e0e\u6240\u6709\u5176\u5b83\u7684\u5b57\u7b26\u90fd\u4e0d\u4e00\u6837\uff09\u3002**\n\n**\u6240\u4ee5\u6309\u7167\u8fd9\u79cd\u62fc\u6cd5\u5c31\u80fd\u6240\u6709\u4e32\u7684\u6bcf\u4e00\u4e2a\u540e\u7f00\u90fd\u6392\u5e8f\u51fa\u6765\u3002**\n\n\u628a\u6240\u6709\u540e\u7f00\u6392\u5b8c\u5e8f\u540e\uff0c\u6211\u4eec\u628a\u6240\u6709$height$\u6309\u7167$SA$\u987a\u5e8f\u653e\u8fdb\u7ebf\u6bb5\u6811\u91cc\u9762\u3002\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e$SA$\u4e2d\u7684\u6bcf\u4e00\u4e2a\u540e\u7f00$i$\uff0c\u5f80\u540e\u5bfb\u627e\uff0c\u76f4\u5230\u627e\u5230\u67d0\u4e00\u4e2a\u4e32$j$\uff0c\u4f7f\u5f97\u5728$SA$\u4e2d\u7684$i$\u540e\u7f00\u5230$j$\u540e\u7f00\u6765\u81ea\u4e8e\u81f3\u5c11$k$\u4e2a\u539f\u4e32\u3002\n\n\u7136\u540e\u627e\u5230$i$\u5230$j$\u4e2d\u7684$height$\u7684\u6700\u5c0f\u503c\uff0c\u8bf4\u660e\u8fd9$i$\u5230$j$\u7684\u540e\u7f00\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u90fd\u662f\u5176\u5b83$k$\u4e2a\u4e32\uff08\u5305\u62ec\u5b83\u81ea\u5df1\uff09\u7684\u5b50\u4e32\u3002\n\n\u8fd9\u4e00\u8fc7\u7a0b\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u4e0e\u83ab\u961f\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n  \n#define N 200010\n#define INF 0x7fffffffffffffff\n  \nusing namespace std;\n \nstruct Tree\n{\n    long long l,r,x;\n}t[N<<2];\n \nchar ch[N];\nlong long n,nn,m,k,sa[N],x[N],y[N],buckets[N],rk[N],height[N],s[N],ans[N],to[N],vis[N],maxn[N];\n \nvoid build(long long l,long long r,long long k)//\u5efa\u7ebf\u6bb5\u6811\n{\n    t[k].l=l,t[k].r=r;\n    if(l==r)\n    {\n        t[k].x=height[l];\n        return;\n    }\n    long long mid=(l+r)>>1;\n    build(l,mid,k<<1);\n    build(mid+1,r,k<<1|1);\n    t[k].x=min(t[k<<1].x,t[k<<1|1].x);\n}\n \nlong long ask(long long k,long long x,long long y)//\u8be2\u95ee\u6700\u5c0f\u503c\n{\n    if(x<=t[k].l&&t[k].r<=y)return t[k].x;\n    long long mid=(t[k].l+t[k].r)>>1,ans=INF;\n    if(x<=mid)ans=min(ans,ask(k<<1,x,y));\n    if(y>mid)ans=min(ans,ask(k<<1|1,x,y));\n    return ans;\n}\n  \nvoid Resort()\n{\n    for(long long i=1;i<=m;i++)buckets[i]=0;\n    for(long long i=1;i<=n;i++)buckets[x[i]]++;\n    for(long long i=2;i<=m;i++)buckets[i]+=buckets[i-1];\n    for(long long i=n;i>=1;i--)sa[buckets[x[y[i]]]--]=y[i];\n}\n \nvoid Suffix_sort()//\u540e\u7f00\u6392\u5e8f\n{\n    m=nn+122;\n    for(long long i=1;i<=n;i++)x[i]=s[i],y[i]=i;\n    Resort();\n    for(long long w=1;w<=n;w<<=1)\n    {\n        long long tot=0;\n        for(long long i=n-w+1;i<=n;i++)y[++tot]=i;\n        for(long long i=1;i<=n;i++)if(sa[i]>w)y[++tot]=sa[i]-w;\n        Resort();\n        swap(x,y);\n        x[sa[1]]=1,tot=1;\n        for(long long i=2;i<=n;i++)x[sa[i]]=((y[sa[i]]==y[sa[i-1]]&&y[sa[i]+w]==y[sa[i-1]+w])?tot:++tot);\n        if(tot==n)break;\n        m=tot;\n    }\n}\n  \nvoid get_height()//\u6c42height\n{\n    long long k=0;\n    for(long long i=1;i<=n;i++)rk[sa[i]]=i;\n    for(long long i=1;i<=n;i++)\n    {\n        if(rk[i]==1)continue;\n        if(k)k--;\n        long long j=sa[rk[i]-1];\n        while(i+k<=n&&j+k<=n&&s[i+k]==s[j+k])k++;\n        height[rk[i]]=k;\n    }\n}\n  \nint main()\n{\n    scanf(\"%lld%lld\",&nn,&k);\n    if(k==1)//\u7279\u5224k=1\u7684\u60c5\u51b5\n    {\n    \tfor(long long i=1;i<=nn;i++)\n    \t{\n    \t\tscanf(\"%s\",ch+1);\n    \t\tlong long len=strlen(ch+1);\n    \t\tprintf(\"%lld \",(len*(len+1))>>1);\n        }\n        return 0;\n    }\n    for(long long i=1;i<=nn;i++)\n    {\n        scanf(\"%s\",ch+1);\n        long long len=strlen(ch+1);\n        for(long long j=1;j<=len;j++)s[++n]=ch[j]+nn,to[n]=i;//\u628a\u8fd9\u4e2a\u4e32\u62fc\u5728S\u540e\n        s[++n]=i;\n    }\n    Suffix_sort();//\u540e\u7f00\u6392\u5e8f\n    get_height();//\u6c42height\n    build(1,n,1);//\u6839\u636eheight\u5efa\u7ebf\u6bb5\u6811\n    long long cnt=0,now=nn;//now\u5c31\u662fj\n    for(long long i=nn+1;i<n;i++)\n    {\n        while(now<n){//\u6c42\u51fa\u6765\u81ea\u4e8e\u4e0d\u540c\u7684k\u4e2a\u4e32\u7684\u540e\u7f00\n            if(cnt>=k)break;\n            now++;\n            if(!vis[to[sa[now]]])cnt++;\n            vis[to[sa[now]]]++;\n        }\n        if(cnt<k)break;\n        long long t=ask(1,i+1,now);//\u6c42\u51faheight\u7684\u6700\u5c0f\u503c\n        for(long long j=i;j<=now;j++)maxn[j]=max(maxn[j],t);//\u628ai\u5230j\u6bcf\u4e2a\u4e32\u90fd\u66f4\u65b0\u4e00\u4e0b\n        vis[to[sa[i]]]--;//\u628ai\u4e32\u53bb\u6389\n        if(!vis[to[sa[i]]])cnt--;\n    }\n    for(long long i=nn+2;i<=n;i++)maxn[i]=max(maxn[i],min(maxn[i-1],height[i]));//\u7c7b\u4f3c\u4e8e\u524d\u7f00\u548c\u7684\u4e1c\u4e1c\n    for(long long i=nn+1;i<=n;i++)ans[to[sa[i]]]+=maxn[i];//\u7edf\u8ba1\u7b54\u6848\n    for(long long i=1;i<=nn;i++)printf(\"%lld \",ans[i]);\n    return 0;\n}\n```\n",
        "postTime": 1558151526,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF204E \u3010Little Elephant and Strings\u3011"
    },
    {
        "content": "\u7531\u4e8e\u662f\u591a\u4e2a\u4e32\uff0c\u8fd8\u4e0e\u6bcf\u4e2a\u5b50\u4e32\u7684\u4fe1\u606f\u6709\u5173\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528 SA \u6216\u5e7f\u4e49 SAM\u3002\u8fd9\u91cc\u9009\u62e9\u7528 SA\u3002\n\n\u9996\u5148\u5148\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u7ec4\uff0c\u8fde\u63a5\u8d77\u6765\uff0c\u4e2d\u95f4\u7528\u4e00\u4e9b\u4e0d\u4f1a\u51fa\u73b0\u7684\u6570\u3002\u5904\u7406\u51fa\u540e\u7f00\u6570\u7ec4\u4e0e $height$ \u6570\u7ec4\uff0c\u4e0b\u9762\u7b80\u5199\u4e3a $h$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8f6c\u5316\u540e\u5b9e\u9645\u4e0a\u5c31\u662f\u6c42\u4e00\u4e2a\u540e\u7f00\u4e2d\u6709\u591a\u957f\u7684\u524d\u7f00\u5728 $k$ \u4e2a\u6765\u6e90\u4e0d\u540c\u4e32\u7684\u540e\u7f00\u7684\u524d\u7f00\u51fa\u73b0\u8fc7\uff0c\u7b54\u6848\u8d21\u732e\u5373\u4e3a\u524d\u7f00\u7684\u957f\u5ea6\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4 $(l,r)$ \u5305\u542b\u4e86 $k$ \u4e2a\u4e0d\u540c\u7684\u4e32\u4e2d\u7684\u540e\u7f00\uff0c\u90a3\u4e48\u8fd9\u4e9b\u4e32\u6709\u516c\u5171\u7684\u957f\u5ea6\u4e3a $\\min(h_i)\\hspace{0.1cm}(l<i\\le r)$ \u7684\u516c\u5171\u524d\u7f00\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u533a\u95f4 $(l_1,r_1)$\uff0c$(l_2,r_2)$\uff0c\u4e14 $l_1\\ge l_2$\uff0c$r1 \\le r2$\uff0c\u90a3\u4e48 $\\min(h_i)>\\min(h_j)\\hspace{0.1cm}(l_1<i\\le r_1,l_2<j\\le r_2)$\uff0c\u56e0\u4e3a\u5177\u6709\u5355\u8c03\u6027\u3002\n\n\u6240\u4ee5\u53ea\u6709\u521a\u597d\u5305\u542b $k$ \u4e2a\u6765\u6e90\u4e0d\u540c\u4e32\u4e2d\u7684\u540e\u7f00\u65f6\uff0c\u624d\u4f1a\u5bf9\u8fd9\u4e2a\u540e\u7f00\u8d21\u732e\u7b54\u6848\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u8fd9\u4e2a\u533a\u95f4\uff0c\u5f53\u8fd9\u4e2a\u533a\u95f4\u8fbe\u5230 $k$ \u4e2a\u6765\u6e90\u4e0d\u540c\u4e32\u7684\u540e\u7f00\u65f6\uff0c\u6211\u4eec\u5c06\u5de6\u7aef\u70b9\u5f80\u53f3\u63a8\uff0c\u5e76\u4e14\u66f4\u65b0\u7b54\u6848\uff0c\u533a\u95f4\u6700\u5c0f\u503c\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u3002\u7136\u800c\u5982\u679c\u591a\u4e2a\u533a\u95f4\u5305\u542b\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u6c42\u7684\u5e94\u8be5\u662f\u6700\u5927\u503c\uff0c\u56e0\u4e3a\u957f\u5ea6\u5927\u7684\u7b26\u5408\u6761\u4ef6\uff0c\u90a3\u4e48\u5c0f\u7684\u4e5f\u7b26\u5408\u6761\u4ef6\uff0c\u90a3\u6c42\u6700\u5927\u503c\u6709\u5f88\u591a\u6c42\u6cd5\uff0c\u4f46\u7ebf\u6bb5\u6811\u4e00\u5b9a\u662f\u6700\u65e0\u8111\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u9009\u62e9\u7ebf\u6bb5\u6811\u3002\n\n\u4e00\u4e2a\u6613\u9519\u70b9\uff0c\u5bf9\u4e8e\u76f8\u540c\u7684\u53f3\u7aef\u70b9\uff0c\u4e0d\u80fd\u53ea\u7528\u6700\u5c0f\u7684\u5305\u542b $k$ \u4e2a\u6765\u6e90\u4e0d\u540c\u4e32\u7684\u540e\u7f00\u7684\u533a\u95f4\u66f4\u65b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u8ba9\u8fd9\u4e2a\u533a\u95f4\u5de6\u8fb9\u7684\u70b9\u65e0\u6cd5\u66f4\u65b0\u5230\u7b54\u6848\uff0c\u5728\u7f29\u77ed\u533a\u95f4\u524d\u4e14\u6ee1\u8db3\u4e3a $k$ \u4e2a\u65f6\uff0c\u53ef\u80fd\u5bf9\u4e8e\u4ed6\u4eec\u8fd9\u4e2a\u533a\u95f4\u6700\u5c0f\u5219\u662f\u8fd9\u4e2a\uff0c\u800c\u5982\u679c\u56de\u9000\u4e86\u5c31\u4e0d\u80fd\u7167\u987e\u8fd9\u4e9b\u70b9\u5bf9\u5e94\u7684\u6700\u5c0f\u533a\u95f4\uff08\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u6709\u4e9b\u503c\u66f4\u65b0\u4e0d\u5230\uff09\uff0c\u6240\u4ee5\u8981\u8fb9\u56de\u9000\u8fb9\u66f4\u65b0\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\times \\log(n))$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<queue>\n#define int long long\n#define pii pair<int,int> \nusing namespace std;\nconst int N=2e5+5;\nint T,kt,a[N],b[N],rk[N],sa[N],cnt[N],n,p[N],h[N],vis[N],laz[4*N],f[4*N],sp[N],c[N];\nlong long ans[N];\nchar s[N];\ndeque<pii>q;\ninline int ls(int x)\n{\n\treturn x<<1;\n}\ninline int rs(int x)\n{\n\treturn x<<1|1;\n}\ninline void pushup(int x)\n{\n\tf[x]=max(f[ls(x)],f[rs(x)]);\n}\ninline void fix(int x,int l,int r,int k)\n{\n\tf[x]=max(f[x],k);\n\tlaz[x]=max(laz[x],k);\n}\ninline void pushdown(int x,int l,int r)\n{\n\tint mid=(l+r)>>1;\n\tfix(ls(x),l,mid,laz[x]);\n\tfix(rs(x),mid+1,r,laz[x]);\n\tlaz[x]=0;\n}\nvoid update(int x,int l,int r,int nl,int nr,int k)\n{\n\tif(l>=nl&&r<=nr)\n\t{\n\t\tf[x]=max(f[x],k);\n\t\tlaz[x]=max(laz[x],k);\n\t\treturn;\n\t}\n\tpushdown(x,l,r);\n\tint mid=(l+r)>>1;\n\tif(mid>=nl)update(ls(x),l,mid,nl,nr,k);\n\tif(mid<nr)update(rs(x),mid+1,r,nl,nr,k);\n\tpushup(x);\n}\nvoid getans(int x,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\t//cout<<l<<\" \"<<sa[l]<<\" \"<<p[sa[l]]<<\" \"<<f[x]<<endl;\n\t\tans[p[sa[l]]]+=f[x];\n\t\treturn;\n\t}\n\tpushdown(x,l,r);\n\tint mid=(l+r)>>1;\n\tgetans(ls(x),l,mid);\n\tgetans(rs(x),mid+1,r);\n}\nsigned main()\n{\n\tscanf(\"%lld%lld\",&T,&kt);\n\tint m=26;\n\tfor(int i=1;i<=T;i++)\n\t{\n\t\tscanf(\"%s\",s+1);\n\t\tint len=strlen(s+1);\n\t\tfor(int j=1;j<=len;j++)a[++n]=s[j]-'a',p[n]=i,sp[n]=a[n];\n\t\tfor(int j=n-len+1;j<=n;j++)c[j]=n-j+1;\n\t\ta[++n]=i+26,sp[n]=a[n],m=i+26;\n\t\tif(kt==1)printf(\"%lld \",len*(len+1)/2);\n\t}\n\tif(kt==1)return 0;\n\tsp[n+1]=2e9;\n\tfor(int i=1;i<=n;i++)cnt[a[i]]++;\n\tfor(int i=1;i<=m;i++)cnt[i]+=cnt[i-1];\n\tfor(int i=n;i>0;i--)sa[cnt[a[i]]--]=i;\n\tfor(int k=1;k<=n;k<<=1)\n\t{\n\t\tint num=0;\n\t\tfor(int i=n-k+1;i<=n;i++)b[++num]=i;\n\t\tfor(int i=1;i<=n;i++)if(sa[i]>k)b[++num]=sa[i]-k;\n\t\tfor(int i=0;i<=m;i++)cnt[i]=0;\n\t\tfor(int i=1;i<=n;i++)cnt[a[i]]++;\n\t\tfor(int i=1;i<=m;i++)cnt[i]+=cnt[i-1];\n\t\tfor(int i=n;i>0;i--)sa[cnt[a[b[i]]]--]=b[i];\n\t\tswap(a,b);\n\t\ta[sa[1]]=1;\n\t\tnum=1;\n\t\tfor(int i=2;i<=n;i++)\n\t\t{\n\t\t\tif(b[sa[i]]==b[sa[i-1]]&&b[sa[i]+k]==b[sa[i-1]+k])a[sa[i]]=num;\n\t\t\telse a[sa[i]]=++num;\n\t\t}\n\t\tif(num==n)break;\n\t\tm=num;\n\t}\n\tint r=0;\n\t//for(int i=1;i<=n;i++)cout<<sa[i]<<\" \";\n\t//cout<<endl;\n\tfor(int i=1;i<=n;i++)rk[sa[i]]=i;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(rk[i]==1)continue;\n\t\tif(r)r--;\n\t\tint j=sa[rk[i]-1];\n\t\twhile(j+r<=n&&i+r<=n&&sp[i+r]==sp[j+r])++r;\n\t\th[rk[i]]=r;\n\t\t//cout<<i<<\" \"<<r<<endl;\n\t}\n\tint sum=0,l=1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!vis[p[sa[i]]])sum++;\n\t\tvis[p[sa[i]]]++;\n\t\twhile(!q.empty()&&q.back().second>=h[i])q.pop_back();\n\t\tq.push_back({sa[i],h[i]});\n\t\twhile(sum>=kt)\n\t\t{\n\t\t\tif(!q.empty()&&sa[l]==q.front().first)q.pop_front();\n\t\t\tupdate(1,1,n,l,i,q.front().second);\n\t\t\tif(sum==kt&&vis[p[sa[l]]]==1)break;\n\t\t\tvis[p[sa[l]]]--;\n\t\t\tif(!vis[p[sa[l]]])sum--;\n\t\t\tl++;\n\t\t\t\n\t\t}//cout<<l<<\" \"<<i<<\" \"<<sum<<\" \"<<c[sa[i]]<<\" \"<<q.front().second<<endl;\n\t\t\n\t}\n\tgetans(1,1,n);\n\tfor(int i=1;i<=T;i++)printf(\"%I64d \",ans[i]); \n\treturn 0;\n}\n/*\n2 2\naaab\naaababa\n*/\n```\n",
        "postTime": 1675674276,
        "uid": 275793,
        "name": "Gmt\u4e36FFF",
        "ccfLevel": 5,
        "title": "CF204E\tLittle Elephant and Strings \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651 SA\uff0c\u628a\u4e32\u4eec\u7528\u4e92\u4e0d\u76f8\u540c\u7684\u5206\u9694\u7b26\u8fde\u8d77\u6765\u7136\u540e\u6c42\u3002\n\n\u5f88\u81ea\u7136\u7684\u60f3\u5230\uff0c\u679a\u4e3e\u6bcf\u4e2a\u4e32\u7684\u6bcf\u4e2a\u4f4d\u7f6e\uff08\u6309\u7167 SA \u7684\u987a\u5e8f\uff09\u4f5c\u4e3a\u5de6\u7aef\u70b9\u8d21\u732e\u3002\u90a3\u4e48\u7b54\u6848\u663e\u7136\u662f\u6240\u6709\u4e32\u4e0e\u5b83\u7684\u6700\u5927\u540e\u7f00 lcp \u4e2d\u7b2c $k$ \u5927\u7684\u3002\u800c\u67d0\u4e2a\u4e32\u4e0e\u8be5\u540e\u7f00\u7684\u6700\u5927\u540e\u7f00 lcp \u600e\u4e48\u6c42\u5462\uff0c\u663e\u7136\u53ea\u53ef\u80fd\u662f\u5de6\u53f3\u4e24\u8fb9\u7b2c\u4e00\u4e2a\u5c5e\u4e8e\u8be5\u4e32\u7684\u540e\u7f00\u5230\u8be5\u4f4d\u7f6e\u7684 $hi$ \u7684 $\\min$\uff0c\u56e0\u4e3a\u518d\u5f80\u4e24\u7aef\u6269\u5c55\u662f\u5355\u8c03\u7684\uff0c\u8fd9\u662f SA \u7684\u4e00\u4e2a\u5e38\u7528\u7684\u6027\u8d28\u3002\n\n\u5982\u679c\u8be5\u4f4d\u7f6e\u7b49\u4e8e $1$ \u7684\u8bdd\uff0c\u90a3\u5c31\u4e0d\u53ef\u80fd\u5f80\u5de6\u8fb9\uff0c\u90a3\u5c31\u5f88\u597d\u529e\u4e86\uff0c\u5c31\u627e\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u5305\u542b $k$ \u4e2a\u4e0d\u540c\u4e32\u7684\u4f4d\u7f6e\u7136\u540e\u8d21\u732e\u5c31\u53ef\u4ee5\u4e86\uff0c\u51b3\u7b56\u662f\u552f\u4e00\u7684\u3002\u4f46\u662f\u666e\u904d\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u4e32\u662f\u6709\u4e24\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u9009\u7684\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u5bf9\u6bcf\u4e2a\u4e32\u7b97\u51fa\u8d21\u732e\u7136\u540e\u6392\u5e8f\u5417\uff1f\u8fd9\u5c31\u4e0d\u4f1a\u7ef4\u62a4\u4e86\u3002\n\n\u6211\u81ea\u5df1 yy \u51fa\u6765\u4e86\u4e00\u4e2a\u7ebf\u6839\u5bf9\u7684\u65b9\u6cd5\u3002\u8003\u8651\u6839\u53f7\u5206\u6cbb\uff0c\u5c0f\u4e32\u9884\u5904\u7406\uff0c\u5927\u4e32\u5b9e\u65f6\u679a\u4e3e\u3002\u9884\u5904\u7406\u7684\u8bdd\uff0c\u5c31\u5728 SA \u4e2d\u7684\u6bcf\u4e24\u4e2a\u76f8\u90bb\u4f4d\u7f6e\u4e4b\u95f4\u7684\u53d8\u5316\u91cf\u662f\u548c\u8be5\u4e32\u957f\u5ea6\u6210\u7ebf\u6027\u7684\uff0c\u6240\u4ee5\u7ebf\u6839\uff1b\u5b9e\u65f6\u679a\u4e3e\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\uff0c\u4e5f\u662f\u7ebf\u6839\uff1b\u8fd8\u8981\u7528\u4e00\u4e2a `set` \u7ef4\u62a4 $k$ \u5927\u503c\u3002\u975e\u5e38\u96be\u5199\uff0c\u5e38\u6570\u4e5f\u5f88\u5927\uff0c\u6ca1\u5199\u4e86\u3002\n\n\u4e8b\u5b9e\u4e0a\u9047\u5230\u8fd9\u79cd\u96be\u7ef4\u62a4\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u6362\u4e00\u4e2a\u89d2\u5ea6\u601d\u8003\u3002\u6211\u4eec\u4e0d\u770b\u5355\u4e32\u4eec\u8fd9\u79cd\u7410\u788e\u7684\u4e1c\u897f\u4e86\uff0c\u6211\u4eec\u8003\u8651\u5f80\u4e24\u7aef\u6269\u5c55\u5230\u54ea\u91cc\u3002\u90a3\u4e48\u968f\u4fbf\u63a8\u4e00\u63a8\u5c31\u4f1a\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u79cd\u5f80\u4e24\u7aef\u6269\u5c55\u7684\u65b9\u6848\uff0c\u8d21\u732e\u662f\u4e24\u7aef\u4e4b\u95f4\u7684 $hi$ \u7684 RMinQ\u3002\u7136\u540e\u5c31\u628a\u6240\u6709\u65b9\u6848\u7ed9 $\\max$ \u8d77\u6765\u5373\u53ef\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u6700\u4f18\u7684\u65b9\u6848\u4e00\u5b9a**\u6070\u597d**\u5305\u542b $k$ \u4e2a\u4e0d\u540c\u7684\u4e32\uff0c\u5bb9\u6613\u53cd\u8bc1\u3002\u6211\u4eec\u8003\u8651\u9884\u5904\u7406\u51fa\u6765\u8fd9\u4e9b\u533a\u95f4\u4eec\uff0c\u7136\u540e\u5f88\u7b80\u5355\u7684\u5dee\u5206\u4e00\u4e0b `multiset` \u626b\u4e00\u904d\u3002\u4f46\u662f\u53c8\u53d1\u73b0\uff0c\u8fd9\u4e9b\u533a\u95f4\u7684\u4e2a\u6570\u5f88\u5bb9\u6613\u88ab\u5361\u5230\u5e73\u65b9\uff0c\u4f8b\u5982 $1\\to n,1\\to n,1\\to n$\u3002\u6211\u4eec\u8003\u8651\u5bf9\u8fd9\u79cd\u60c5\u51b5\u8be5\u5982\u4f55\u89e3\u51b3\u3002\n\n1. \u8be5\u4f4d\u7f6e\u5728\u4e2d\u95f4\u7684\u8bdd\uff0c\u90a3\u663e\u7136\u5de6\u53f3\u4e24\u6bb5\u5404\u4f38\u51fa\u53bb $0$ \u662f\u6700\u597d\u7684\uff1b\n1. \u5728\u4e24\u8fb9\u4e24\u6bb5\u7684\u8bdd\uff0c\u90a3\u663e\u7136\u662f\u53e6\u4e00\u6bb5\u4f38\u51fa\u53bb $0$ \u6700\u597d\u3002\n\n\u7efc\u4e0a\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff0c\u6211\u4eec\u53ea\u9700\u8981\u9884\u5904\u7406\u90a3\u4e9b\uff0c\u5f80\u5de6\u6781\u5c0f\u6216\u5f80\u53f3\u6781\u5c0f\u7684\u533a\u95f4\u3002\u8fd9\u663e\u7136\u662f\u7ebf\u6027\u7684\uff0c\u6b63\u53cd\u4e24\u904d two-pointers \u5373\u53ef\u3002\n\n**_[code](https://www.luogu.com.cn/paste/efbd0qi1)_**",
        "postTime": 1609554842,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF204E \u3010Little Elephant and Strings\u3011"
    },
    {
        "content": "#### \u540e\u7f00\u6570\u7ec4+ST\u8868+~~\u5206\u5757~~\u3002\n\n---\n\n\u5408\u6cd5\u7684\u5b50\u4e32\u5fc5\u987b\u6ee1\u8db3\u81f3\u5c11\u662fk\u4e2a\u4e32\u7684\u5b57\u4e32\u3002\u8fd9\u4e2a\u8981\u6c42\u8ba9\u6211\u4eec~~\u81ea\u7136\u800c\u7136~~\u60f3\u5230\u4e00\u9053\u76f8\u4f3c\u7684\u9898 [P5546 [POI2000]\u516c\u5171\u4e32](https://www.luogu.com.cn/problem/P5546) \uff0c\u8fd9\u9053\u9898\u7528\u540e\u7f00\u6570\u7ec4\u5f88\u5bb9\u6613\u60f3\u5230\u89e3\u6cd5\u3002\n\n\u4e8e\u662f\u5f00\u59cb\u540e\u7f00\u6570\u7ec4\u4e71\u641e\u3002\n\n\u5148\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u7528\u5206\u9694\u7b26\u9694\u5f00\u8fde\u63a5\u6210\u4e00\u4e2a\u4e32\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5206\u9694\u7b26\u5fc5\u987b**\u4e24\u4e24\u4e0d\u540c**\uff0c\u5426\u5219\u6c42\u51fa\u7684 $height$ \u6570\u7ec4\u5c06\u4f1a\u4e0d\u6b63\u786e\u3002\n\n\u5728\u6240\u5f97\u4e32\u4e0a\u8dd1\u4e00\u904d\u540e\u7f00\u6392\u5e8f\uff0c\u5f97\u5230 $height$ \u6570\u7ec4\u3002\n\n\u7136\u540e\u6211\u4eec\u4f7f\u7528\u53cc\u6307\u9488\u5728 $height$ \u6570\u7ec4\u4e0a\u6765\u679a\u4e3e\u5408\u6cd5\u7684\u533a\u95f4\uff0c\u5de6\u53f3\u7aef\u70b9\u7684\u6269\u5c55\u7c7b\u4f3c\u4e8e\u83ab\u961f\uff0c\u5f53\u533a\u95f4\u5185\u51fa\u73b0\u4e86 $K$ \u4e2a\u539f\u4e32\u7684\u5b57\u4e32\u65f6\uff0c\u6b64\u533a\u95f4\u5408\u6cd5\u3002\n\n\u7528ST\u8868\u6c42\u51fa\u533a\u95f4\u5185 $height$ \u7684\u6700\u5c0f\u503c $t$\uff0c\u5373\u4e3a\u533a\u95f4\u5185\u6240\u6709\u540e\u7f00\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\uff0c\u6b64\u65f6\u533a\u95f4\u5185\u6240\u6709\u540e\u7f00\u7684\u957f\u5ea6\u4e3a $t$ \u7684\u524d\u7f00\u5747\u4e3a\u5408\u6cd5\u5b57\u4e32\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff1a\u82e5\u540e\u7f00\u7684\u957f\u5ea6\u4e3a $t$ \u7684\u524d\u7f00\u5408\u6cd5\uff0c\u5219\u8be5\u540e\u7f00\u957f\u5ea6\u4e3a $t' \\leq t$ \u7684\u524d\u7f00\u5747\u5408\u6cd5\u3002\u4e5f\u5c31\u662f\u8bf4\u53ea\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a\u540e\u7f00\u6700\u957f\u7684\u5408\u6cd5\u524d\u7f00\u7684\u957f\u5ea6\u5373\u53ef\u3002\n\n\u9700\u8981\u652f\u6301\u533a\u95f4\u5bf9\u4e00\u4e2a\u503c\u53d6max\uff0c\u5e76\u5355\u70b9\u67e5\u8be2\u3002\n\n\u56e0\u4e3a ~~\u61d2\u5f97\u60f3\u5176\u4ed6\u65b9\u6cd5~~ \u5206\u5757\u597d\u5199\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u76f4\u63a5\u4e0a\u5206\u5757\u4e86\u3002\n\n---\n\n$\\text{Code}:$\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#define maxn 200005\n#define R register\n#define INF 0x3f3f3f3f\nusing namespace std;\ntypedef long long lxl;\n\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n\treturn x*f;\n}\n\nchar s[maxn];\nint N,M,K,a[maxn],n;\nlxl ans[maxn];\nint SA[maxn],rnk[maxn],tax[maxn],tp[maxn],ht[maxn],belong[maxn];\n\ninline void Qsort()\n{\n\tfor(int i=0;i<=M;++i) tax[i]=0;\n\tfor(int i=1;i<=N;++i) ++tax[rnk[i]];\n\tfor(int i=1;i<=M;++i) tax[i]+=tax[i-1];\n\tfor(int i=N;i>=1;--i) SA[tax[rnk[tp[i]]]--]=tp[i];\n}\n\ninline void SuffixSort()\n{\n\tM=30+n;\n\tfor(int i=1;i<=N;++i)\n\t\trnk[i]=a[i],tp[i]=i;\n\tQsort();\n\tfor(int w=1,p=0;p<N;M=p,w<<=1)\n\t{\n\t\tp=0;\n\t\tfor(int i=1;i<=w;++i) tp[++p]=N-w+i;\n\t\tfor(int i=1;i<=N;++i) if(SA[i]>w) tp[++p]=SA[i]-w;\n\t\tQsort();\n\t\tswap(tp,rnk);\n\t\trnk[SA[1]]=p=1;\n\t\tfor(int i=2;i<=N;++i)\n\t\t\trnk[SA[i]]=(tp[SA[i]]==tp[SA[i-1]]&&tp[SA[i]+w]==tp[SA[i-1]+w]) ? p : ++p;\n\t}\n\tfor(int i=1,k=0;i<=N;++i)\n\t{\n\t\tif(k) --k;\n\t\twhile(a[i+k]==a[SA[rnk[i]-1]+k]) ++k;\n\t\tht[rnk[i]]=k;\n\t}\n}\n\nstruct ST_Table\n{\n\tint d[maxn][30],lg[maxn];\n\tinline void init()\n\t{\n\t\tlg[0]=-1;\n\t\tfor(int i=1;i<=N;++i) d[i][0]=ht[i],lg[i]=lg[i>>1]+1;\n\t\tfor(int j=1;j<=25;++j)\n\t\t\tfor(int i=1;i+(1<<(j-1))<=N;++i)\n\t\t\t\td[i][j]=min(d[i][j-1],d[i+(1<<(j-1))][j-1]);\n\t}\n\tinline int query(int l,int r)\n\t{\n\t\tint k=lg[r-l+1];\n\t\treturn min(d[l][k],d[r-(1<<k)+1][k]);\n\t}\n}st;\n\nstruct BIG_Block// \u5927\u5206\u5757 \uff08\u96fe\uff09\n{\n\t#define BN 400\n\tlxl a[maxn],tag[maxn/BN];\n\tinline int pos(int x) {return (x-1)/BN+1;}\n\tinline void Get_Max(int l,int r,lxl d)\n\t{\n\t\tint bl=pos(l),br=pos(r);\n\t\tfor(int i=bl+1;i<br;++i)\n\t\t\ttag[i]=max(tag[i],d);\n\t\tif(bl==br)\n\t\t\tfor(int i=l;i<=r;++i)\n\t\t\t\ta[i]=max(a[i],d);\n\t\telse\n\t\t{\n\t\t\tfor(int i=l;i<=bl*BN;++i)\n\t\t\t\ta[i]=max(a[i],d);\n\t\t\tfor(int i=(br-1)*BN+1;i<=r;++i)\n\t\t\t\ta[i]=max(a[i],d);\n\t\t}\n\t}\n\tinline void Get_Val(int x)\n\t{\n\t\ta[x]=max(max(a[x],tag[pos(x)]),min(a[x-1],1ll*ht[x]));\n\t}\n}_9baka;\n\nint cnt[maxn],flag;\n\ninline void Add(int i)\n{\n\tif(!belong[i]) return;\n\tif(!cnt[belong[i]]) ++flag;\n\t++cnt[belong[i]];\n}\n\ninline void Del(int i)\n{\n\tif(!belong[i]) return;\n\t--cnt[belong[i]];\n\tif(!cnt[belong[i]]) --flag;\n}\n\nint main()\n{\n\t// freopen(\"CF204E.in\",\"r\",stdin);\n\tn=read(),K=read();\n\tif(K==1)\n\t{\n\t\tfor(int i=1;i<=n;++i)\n\t\t{\n\t\t\tscanf(\" %s\",s+1);\n\t\t\tint len=strlen(s+1);\n\t\t\tprintf(\"%lld \",1ll*(1+len)*len>>1);\n\t\t}\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\" %s\",s+1);\n\t\tint len=strlen(s+1);\n\t\tfor(int j=1;j<=len;++j)\n\t\t\ta[++N]=s[j]-'a'+1,belong[N]=i;\n\t\ta[++N]=26+i;\n\t}\n\tSuffixSort();\n\tst.init();\n\tfor(int i=1,j=0;i<=N;++i)\n\t{\n\t\twhile(j<=N&&flag<K) Add(SA[++j])\n        // \u4e3a\u4e86\u4f7f t \u5c3d\u91cf\u5927\uff0c\u8fd9\u91cc\u53ea\u679a\u4e3e\u51fa\u6700\u77ed\u7684\u5408\u6cd5\u533a\u95f4\n\t\tif(flag<K) break;\n        // \u5982\u679c\u53f3\u7aef\u70b9\u679a\u4e3e\u5230\u8fb9\u754c\u90fd\u4e0d\u5408\u6cd5\uff0c\u5219\u5de6\u7aef\u70b9\u518d\u7f29\u5c0f\u8fd8\u662f\u4e0d\u5408\u6cd5\uff0c\u76f4\u63a5break\n\t\tint t=st.query(i+1,j);\n\t\t_9baka.Get_Max(i,j,t);\n\t\tDel(SA[i]);\n\t}\n\tfor(int i=2;i<=N;++i)\n\t\t_9baka.Get_Val(i);\n        //\u82e5\u524d\u540e\u4e24\u540e\u7f00\u6709\u516c\u5171\u524d\u7f00\uff0c\u5219\u53ef\u80fd\u524d\u9762\u7684\u540e\u7f00\u66f4\u65b0\u540e\u9762\u7684\u540e\u7f00\u7684\u7b54\u6848\n\tfor(int i=1;i<=N;++i)\n\t\tans[belong[SA[i]]]+=_9baka.a[i];\n        // \u6700\u957f\u5408\u6cd5\u524d\u7f00\u7684\u957f\u5ea6\u5373\u4e3a\u5408\u6cd5\u524d\u7f00\u7684\u4e2a\u6570\n\tfor(int i=1;i<=n;++i)\n\t\tprintf(\"%lld \",ans[i]);\n\treturn 0;\n}\n\n```",
        "postTime": 1596634925,
        "uid": 224236,
        "name": "GoPoux4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF204E \u3010Little Elephant and Strings\u3011"
    },
    {
        "content": "\u672c\u9898\u662f\u4e00\u9053\u5f88\u7b80\u5355\u7684\u9898\u76ee\uff0c\u8003\u67e5\u5bf9\u4e8e\u540e\u7f00\u6570\u7ec4\u6216\u540e\u7f00\u81ea\u52a8\u673a(\u540e\u7f00\u6811)\u7684\u5e94\u7528\u3002\n\n\u672c\u9898\u5f88\u663e\u7136\u53ef\u4ee5\u7528\u540e\u7f00\u6570\u7ec4$\\Theta(n\\log n)$\u89e3\u3002\n\n\u4f46\u662f\u5bf9\u4e8e\u4e0d\u9700\u8981\u591a\u5c11\u601d\u7ef4\u542b\u91cf\u7684\u540e\u7f00\u81ea\u52a8\u673a$+$\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u53ef\u4ee5\u4e0d\u9700\u8981\u591a\u5c11\u601d\u7ef4\u542b\u91cf\u7684$\\Theta(n\\log n)$\u5199\u3002\n\n\u6240\u4ee5\u6211\u7528\u4e86\u540e\u7f00\u81ea\u52a8\u673a\u3002\n\n\u9996\u5148\u5bf9\u4e8e\u6240\u6709\u4e32\u5efa\u7acb**\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a**\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6240\u8868\u793a\u7684\u4e00\u4e9b\u4e32\uff0c\u5728\u540e\u7f00\u81ea\u52a8\u673a\u7684\u8be5\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u4e0a\u63d2\u5165\u3002\n\n\u7136\u540e\u5728$dfs$\u4e00\u904d\uff0c\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u628a\u6240\u6709\u51fa\u73b0\u6b21\u6570$\\geq k$\u7684\u8282\u70b9\u6807\u8bb0\u4e00\u4e0b\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\uff0c\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u662f\u88ab\u6807\u8bb0\u7684\uff0c\u5bf9\u4e8e\u8be5\u8282\u70b9\u6240\u4ee3\u8868\u7684\u6240\u6709\u4e32\u7684\u7b54\u6848\u53ef\u4ee5\u52a0\u4e0a$len_u$\u3002\u5982\u679c\u8be5\u8282\u70b9\u6ca1\u6709\u88ab\u6807\u8bb0\uff0c\u90a3\u4e48\u4ed6\u7684\u8d21\u732e\u662f\u4ed6\u7684$parent$\u94fe\u4e0a\u957f\u5ea6\u6700\u957f\u7684\u540e\u7f00\u7684$len$\u3002\n\n\u7531\u4e8e\u7b54\u6848\u6700\u5927\u4e3a$\\dfrac{n\\times (n-1)}{2}$\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5f00**long long**\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\Theta(n\\log n)$\u3002\n```cpp\n#pragma GCC optimize(2)\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<queue>\n#include<bitset>\n#define ll long long\n#define ull unsigned long long\nusing namespace std;\nconst int maxn=1e5+5;\nint n,belong[maxn<<1],p[maxn<<1],fa[maxn<<1],last=1,tot=1,sz,k,rt[maxn<<1],len[maxn<<1];\nchar s[maxn];\nbool dp[maxn<<1];\nll ans[maxn<<1];\nint las[maxn<<1];\nvector<int>temp[maxn<<1],vec[maxn<<1];\nstruct edge\n{\n\tint v,nxt;\n\tedge(){}\n\tedge(int vv,int nn)\n\t{\n\t\tv=vv,nxt=nn;\n\t}\n}e[maxn<<2];\ninline void add(int u,int v)\n{\n\te[++sz]=edge(v,p[u]);\n\tp[u]=sz;\n}\nstruct SAM\n{\n\tint son[maxn<<1][26];\n\tinline void insert(int c)\n\t{\n\t\tint np=++tot,p=last;\n\t\tlen[np]=len[p]+1,last=np;\n\t\twhile(p&&!son[p][c])son[p][c]=np,p=fa[p];\n\t\tif(p==0)fa[np]=1;\n\t\telse\n\t\t{\n\t\t\tint q=son[p][c];\n\t\t\tif(len[q]==len[p]+1)fa[np]=q;\n\t\t\telse\n\t\t\t{\n\t\t\t\tint nq=++tot;\n\t\t\t\tlen[nq]=len[p]+1;\n\t\t\t\tfa[nq]=fa[q];\n\t\t\t\tfa[np]=fa[q]=nq;\n\t\t\t\tmemcpy(son[nq],son[q],sizeof(son[q]));\n\t\t\t\twhile(p&&son[p][c]==q)son[p][c]=nq,p=fa[p];\n\t\t\t}\n\t\t}\n\t}\n}sam;\nstruct seg\n{\n\tint tot;\n\tint sum[maxn*40],ls[maxn*40],rs[maxn*40];\n\tseg(){tot=0;}\n\tinline void pushup(int u)\n\t{\n\t\tsum[u]=sum[ls[u]]+sum[rs[u]];\n\t}\n\tinline void update(int &u,int l,int r,int x)\n\t{\n\t\tif(!u)u=++tot;\n\t\tif(l==r)\n\t\t{\n\t\t\tsum[u]=1;\n\t\t\treturn ;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(x<=mid)update(ls[u],l,mid,x);\n\t\t\telse update(rs[u],mid+1,r,x);\n\t\t\tpushup(u);\n\t\t}\n\t}\n\tinline int query(int u,int l,int r,int x,int y)\n\t{\n\t\tif(!u)return 0;\n\t\telse if(x<=l&&y>=r)return sum[u];\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tint ret=0;\n\t\t\tif(x<=mid)ret+=query(ls[u],l,mid,x,y);\n\t\t\tif(y>mid)ret+=query(rs[u],mid+1,r,x,y);\n\t\t\treturn ret;\n\t\t}\n\t}\n\tinline int merge(int x,int y,int l,int r)\n\t{\n\t\tint u=++tot;\n\t\tif(!x||!y)return x+y;\n\t\tif(l==r)\n\t\t{\n\t\t\tsum[u]=sum[x]|sum[y];\n\t\t\treturn u;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tls[u]=merge(ls[x],ls[y],l,mid);\n\t\t\trs[u]=merge(rs[x],rs[y],mid+1,r); \n\t\t\tpushup(u);\n\t\t}\n\t\treturn u;\n\t}\n}tree;\nstruct Trie\n{\n\tint son[maxn][26],tot;\n\tTrie(){tot=0;}\n\tinline void insert(char *s,int typ)\n\t{\n\t\tint now=0;\n\t\tint len=strlen(s+1);\n\t\tfor(int i=1;i<=len;++i)\n\t\t{\n\t\t\tif(!son[now][s[i]-'a'])son[now][s[i]-'a']=++tot;\n\t\t\tnow=son[now][s[i]-'a'];\n\t\t\ttemp[now].push_back(typ);\n\t\t}\n\t}\n\tinline void dfs(int u,int now)\n\t{\n\t\tfor(int i=0;i<=25;++i)\n\t\t{\n\t\t\tif(son[u][i])\n\t\t\t{\n\t\t\t\tlast=now;\n\t\t\t\tsam.insert(i);\n\t\t\t\tdfs(son[u][i],last);\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<temp[u].size();++i)tree.update(rt[now],1,n,temp[u][i]);\n\t\tvec[now]=temp[u];\n\t}\n}trie;\ninline void dfs(int u)\n{\n\tfor(int i=p[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tdfs(v);\n\t\trt[u]=tree.merge(rt[u],rt[v],1,n);\n\t\tdp[u]|=dp[v];\n\t}\n\tif(dp[u]==0)dp[u]|=(tree.query(rt[u],1,n,1,n)>=k);\n}\ninline void dfs2(int u,ll res)\n{\n\tfor(int i=p[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(dp[v])dfs2(v,len[v]);\n\t\telse dfs2(v,res);\n\t}\n\tfor(int i=0;i<vec[u].size();++i)\n\t{\n\t\tans[vec[u][i]]+=res;\n\t}\n}\nint main()\n{\n\tlast=tot=1;\n\tmemset(p,-1,sizeof(p));\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%s\",s+1);\n\t\ttrie.insert(s,i);\n\t}\n\ttrie.dfs(0,1);\n\tfor(int i=tot;i>=1;--i)add(fa[i],i);\n\tdfs(1);\n\tdfs2(1,0);\n\tfor(int i=1;i<=n;++i)printf(\"%lld \",ans[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```",
        "postTime": 1588944835,
        "uid": 333789,
        "name": "lory1608",
        "ccfLevel": 9,
        "title": "\u9898\u89e3CF204E \u3010Little Elephant and Strings\u3011"
    },
    {
        "content": "\u53ef\u80fd\u662f\u6211\u5bf9\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\u8fd8\u662f\u4e0d\u592a\u719f\u7ec3\u5427\uff0c$10$\u5206\u949f\u60f3\u5230\u6b63\u89e3\u4f46\u662f\u7ec6\u8282\u5199\u4e86\u5f88\u4e45\u5f88\u4e45\u3002\u3002\u3002\n\n\u975e\u5e38\u5957\u8def\u7684\u4e00\u9053\u9898\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5927\u5bb6\u90fd\u5199\u540e\u7f00\u6570\u7ec4\u3002\u3002\u3002\n\n\u6211\u4eec\u5efa\u51fa\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u7136\u540e\u6211\u4eec\u6c42\u51fa\u4e00\u4e2a\u8282\u70b9\u88ab\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32\u8986\u76d6\u4e86\u591a\u5c11\u6b21\uff0c\u66b4\u529b\u8df3 parent \u6811\u5c31\u597d\u4e86\u3002\n\n\u6709\u4eba\u95ee\u4e3a\u4ec0\u4e48\u4e0d\u4f1a\u88ab\u5361\u6210$O(n^2)$\uff1f\u6211\u4eec\u53ea\u8981\u518d\u5f00\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u4e0a\u4e00\u6b21\u88ab\u54ea\u4e00\u4e2a\u5b57\u7b26\u4e32\u8986\u76d6\uff0c\u66b4\u529b\u8df3\u7684\u65f6\u5019\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u5df2\u7ecf\u88ab\u8fd9\u4e2a\u5b57\u7b26\u4e32\u8986\u76d6\u8fc7\u4e86\uff0c\u5c31\u4e0d\u7528\u8df3\u4e86\u3002\u6839\u636e\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\u7684\u6027\u8d28\u53ef\u4ee5\u786e\u5b9a\u590d\u6742\u5ea6\u662f\u6b63\u786e\u7684\u3002\n\nupd\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u597d\u50cf\u662f$O(n\\sqrt n)$\u3002\n\n~~\u6709\u672c\u4e8b\u4f60\u4eec\u628a\u6211\u5361\u6389~~\n\n\u6700\u540e\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u4e32\u7684\u524d\u7f00\u8282\u70b9\uff0c\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n$1:$ \u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u88ab\u8986\u76d6\u6b21\u6570$\\geq k$\uff0c\u8d21\u732e\u5c31\u662f$\\text{len}_u-\\text{len}_{pa_u}$\u3002\n\n$2:$ \u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u88ab\u8986\u76d6\u6b21\u6570$<k$\uff0c\u4e5f\u8bb8\u4ed6\u7684 parent \u7956\u5148\u4e2d\u6709\u8986\u76d6\u6b21\u6570$\\geq k$\u7684\u8282\u70b9\u3002\u66b4\u529b\u8df3 parent \u7edf\u8ba1\u8d21\u732e\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6765\u3002\n\n\n\u5176\u5b9e\u8fd9\u662f\u4e00\u9053\u6c34\u9898\uff0c\u6211\u4e00\u5f00\u59cb\u60f3\u590d\u6742\u4e86\u3002\u3002\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define int long long\n#define ljc 998244353\nusing namespace std;\ninline ll read(){\n    ll x=0,f=1;char ch=getchar();\n    while (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();};\n    while (isdigit(ch)){x=(x<<1)+(x<<3)+ch-48;ch=getchar();};\n    return x*f;\n}\ninline char getch(){\n    char ch=getchar();\n    while (!isalpha(ch)) ch=getchar();\n    return ch;\n}\nint n,m,len[1000001];\nchar ss[1000001];\nnamespace sam{\n    int cnt,last,Vis[500001],fg[500001],las[500001],pa[500001],c[500001],len[500001];\n    int g[500001][26];\n    inline void INIT(){\n        cnt=last=1;\n    }\n    inline void insert(int s,int tr){\n        if (g[last][s]&&len[last]+1==len[g[last][s]]){\n            last=g[last][s];return;\n        }\n        int pos=last;last=++cnt;int newp=cnt;\n        len[newp]=len[pos]+1;\n        for (;pos&&!g[pos][s];pos=pa[pos]) g[pos][s]=newp;\n        if (!pos) pa[newp]=1;\n        else{\n            int posx=g[pos][s];\n            if (len[posx]==len[pos]+1) pa[newp]=posx;\n            else{\n                int q=++cnt;len[q]=len[pos]+1;\n                for (int i=0;i<26;i++) g[q][i]=g[posx][i]; \n                pa[q]=pa[posx];pa[posx]=pa[newp]=q;\n                for (;pos&&g[pos][s]==posx;pos=pa[pos]) g[pos][s]=q;\n            }\n        }\n    }\n    inline void update(int x,int y){\n        for (;x&&las[x]!=y;x=pa[x]) fg[x]++,las[x]=y;\n    }\n    void dfs(int u){\n    \tif (u==1||Vis[u]) return;\n    \tVis[u]=1; dfs(pa[u]);c[u]+=c[pa[u]];\n    }\n    inline void doit(){\n        for (int i=1;i<=cnt;i++){\n    \t\tc[i]=len[i]-len[pa[i]];\n    \t\tif (fg[i]<m) c[i]=0;\n        }\n        for (int i=1;i<=cnt;i++) dfs(i);\n    }\n}\nvector<char> S[100021];\nsigned main(){\n    n=read(),m=read();\n    int tot=0,tt=0;\n    sam::INIT();\n    for (int i=1;i<=n;i++){\n    \tscanf(\"%s\",ss+1);\n        sam::last=1;\n        int L=strlen(ss+1);len[i]=L;\n        for (int j=1;j<=L;j++){\n        \tS[i].push_back(ss[j]);\n            sam::insert(ss[j]-'a',i);\n        }\n    }\n    int pos=1;\n    for (int i=1;i<=n;i++){\n        pos=1;\n        for (int j=1;j<=len[i];j++){\n            int x=S[i][j-1]-'a';\n            pos=sam::g[pos][x];\n            sam::update(pos,i);\n        }   \n    }\n    sam::doit();\n    for (int i=1;i<=n;i++){\n    \tpos=1;\n    \tint ans=0;\n        for (int j=1;j<=len[i];j++){\n            int x=S[i][j-1]-'a';\n            pos=sam::g[pos][x];\n            ans+=sam::c[pos];\n        }\n        printf(\"%lld \",ans);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1558581421,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF204E \u3010Little Elephant and Strings\u3011"
    },
    {
        "content": "~~SAM \u4e2a\u5565~~\n\n\u6bcf\u4e2a\u4e32\u5185\u53ef\u4ee5\u53cc\u6307\u9488\uff0c\u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5b50\u4e32 $S'$ \u5728\u51e0\u4e2a $S_i$ \u4e2d\u51fa\u73b0\n\n\u8003\u8651 SA\uff0c\u4e8c\u5206\u51fa $height\\ge |S'|$ \u7684\u533a\u95f4\uff0c\u628a\u6bcf\u540e\u7f00\u6240\u5c5e\u7684\u4e32\u770b\u6210\u4e00\u79cd\u989c\u8272\uff0c\u5c31\u662f\u533a\u95f4\u6570\u989c\u8272\uff0c\u9700\u8981\u5728\u7ebf\uff0c\u628a\u79bb\u7ebf\u7684\u6811\u72b6\u6570\u7ec4\u505a\u6cd5\u6254\u5230\u4e3b\u5e2d\u6811\u4e0a\u5c31\u884c\u4e86\uff0c\u4ee4 $m=\\sum |S_i|$\uff0c\u590d\u6742\u5ea6 $O(m\\log m)$\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n#define fi first\n#define se second\n\n#if __cplusplus < 201703L\n#define register\n#else\n#define rg\n#endif\n\n#define mp make_pair\n#define pb push_back\n#define pf push_front\n\n#define rep(i, s, t) for (int i = s; i <= t; i++)\n#define per(i, s, t) for (int i = t; i >= s; i--)\n#define OK cerr << \"OK!\\n\"\n\nnamespace fastio {\n\tconst int SIZE = (1 << 20) + 1;\n\tchar ibuf[SIZE], *iS, *iT, obuf[SIZE], *oS = obuf, *oT = obuf + SIZE - 1;\n\tchar _st[55];\n\tint _qr = 0;\n\n\tinline char getchar() {\n\t\treturn (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin),\n\t\t       (iS == iT ? EOF : *iS++) : *iS++);\n\t}\n\tinline void qread() {}\n\ttemplate <typename T1, typename... T2>\n\tinline void qread(T1 &x, T2 &...ls) {\n\t\tx = 0;\n\t\tchar ch = ' ';\n\t\tint ps = 1;\n\t\twhile (!isdigit(ch) && ch != '-') ch = getchar();\n\t\tif (ch == '-') ps = -1, ch = getchar();\n\t\twhile (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n\t\tx *= ps;\n\t\tqread(ls...);\n\t}\n\n\tinline void flush() {\n\t\tfwrite(obuf, 1, oS - obuf, stdout);\n\t\toS = obuf;\n\t\treturn;\n\t}\n\tinline void putchar(char _x) {\n\t\t*oS++ = _x;\n\t\tif (oS == oT) flush();\n\t}\n\ttemplate <typename T>\n\tinline void qwrite(T x) {\n\t\tif (x < 0) putchar('-'), x = -x;\n\t\tif (x < 10) return putchar('0' + x), void();\n\t\tqwrite(x / 10), putchar('0' + (x % 10));\n\t}\n\n\ttemplate <typename T>\n\tinline void qwrite(T x, char ch) {\n\t\tqwrite(x), putchar(ch);\n\t}\n};  // namespace fastio\n\nconst ll mod = 1e9 + 7;\n// const ll mod = 1e9 + 9;\n// const ll mod = 19260817;\n// const ll mod = 998244353;\n// const int mod =2017;\n\ntemplate <typename T>\ninline void chkadd(T& x, T y) {\n\tx = x + y >= mod ? x + y - mod : x + y;\n}\ntemplate <typename T>\ninline void chkadd(T& x, T y, T z) {\n\tx = y + z >= mod ? y + z - mod : y + z;\n}\ntemplate <typename T>\ninline void chkmns(T& x, T y) {\n\tx = x - y < 0 ? x - y + mod : x - y;\n}\ntemplate <typename T>\ninline void chkmns(T& x, T y, T z) {\n\tx = y - z < 0 ? y - z + mod : y - z;\n}\ntemplate <typename T>\ninline void chkmax(T& x, T y) {\n\tx = x < y ? y : x;\n}\ntemplate <typename T>\ninline void chkmax(T& x, T y, T z) {\n\tx = y > z ? y : z;\n}\ntemplate <typename T>\ninline void chkmin(T& x, T y) {\n\tx = x < y ? x : y;\n}\ntemplate <typename T>\ninline void chkmin(T& x, T y, T z) {\n\tx = y < z ? y : z;\n}\n\nll qpow(ll x, ll p) {\n\tll base = x, res = 1;\n\twhile (p) {\n\t\tif (p & 1) res = (res * base) % mod;\n\t\tbase = (base * base) % mod;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n\n/* template ends here */\n\nconst int N = 2e5 + 5;\n\nint sa[N], rk[N], h[N], sbelong[N];\nint st[21][N], lg2[N], nn;\npair<pair<int, int>, int> cur[N], tmp[N];\nchar SS[N];\nstring S[N];\nint n, k;\nint stp[N];\nint last[N];\nint rt[N], lson[N << 6], rson[N << 6], sum[N << 6], nodecnt;\n\ninline void add(int& cur, int old, int p, int x, int l, int r) {\n  cur = ++nodecnt;\n  lson[cur] = lson[old];\n  rson[cur] = rson[old];\n  sum[cur] = sum[old] + x;\n  if(l == r) return ;\n  int mid = l + r >> 1;\n  if(p <= mid) add(lson[cur], lson[old], p, x, l, mid);\n  else add(rson[cur], rson[old], p, x, mid + 1, r);\n}\n\ninline int querysum(int cur, int ql, int qr, int l, int r) {\n  if(!cur) return 0;\n  if(ql <= l && r <= qr) return sum[cur];\n  int mid = l + r >> 1;\n  int res = 0;\n  if(ql <= mid) res += querysum(lson[cur], ql, qr, l, mid);\n  if(mid < qr) res += querysum(rson[cur], ql, qr, mid + 1, r);\n  return res;\n}\n\ninline void rsort() {\n  static int pre[N];\n  static const int m = 2e5;\n  memset(pre, 0, sizeof pre);\n  rep(i, 1, nn) pre[cur[i].fi.se]++;\n  rep(i, 1, m) pre[i] += pre[i-1];\n  per(i, 1, nn) tmp[pre[cur[i].fi.se]--] = cur[i];\n  \n\n\n  memset(pre, 0, sizeof pre);\n  rep(i, 1, nn) pre[cur[i].fi.fi]++;\n  rep(i, 1, m) pre[i] += pre[i-1];\n  per(i, 1, nn) cur[pre[tmp[i].fi.fi]--] = tmp[i];\n\n  int p = 1;\n  rk[cur[1].se] = 1;\n  rep(i, 2, nn) {\n    if(cur[i].fi != cur[i-1].fi) p++;\n    rk[cur[i].se] = p;\n  }\n}\n\ninline void SA() {\n  rep(i, 1, nn) rk[i] = SS[i];\n  for(int len = 1; len / 2 <= nn; len <<= 1) {\n    rep(i, 1, nn) cur[i] = mp(mp(rk[i], i+len > nn ? 0 : rk[i+len]), i);\n    rsort();\n  }\n  rep(i, 1, nn) sa[rk[i]] = i;\n}\n\ninline void buildheight() {\n  int p = 0;\n  rep(i, 1, nn) {\n    if(p) p--;\n    while(i+p <= nn && sa[rk[i]-1]+p <= nn && SS[i+p] == SS[sa[rk[i]-1]+p]) p++;\n    h[rk[i]] = p;\n  }\n}\n\ninline void buildST() {\n  lg2[0] = -1;\n  rep(i, 1, nn) lg2[i] = lg2[i>>1] + 1;\n  rep(i, 1, nn) st[0][i] = h[i];\n  rep(j, 1, 19) rep(i, 1, nn) {\n    if(i + (1 << j) - 1 > nn) continue;\n    st[j][i] = min(st[j-1][i], st[j-1][i+(1<<j-1)]);\n  }\n}\n\ninline int query(int L, int R) {\n  if(L > R) return 0;\n  return min(st[lg2[R-L+1]][L], st[lg2[R-L+1]][R-(1<<lg2[R-L+1])+1]);\n}\ninline int lcp(int x, int y) {\n  if(x == y) return n + 1;\n  x = rk[x], y = rk[y];\n  if(x > y) swap(x, y);\n  return query(x + 1, y);\n}\n\ninline void getrange(int s, int len, int& resL, int& resR) {\n  int p = rk[s];\n  resL = resR = p;\n  {\n    int L = 1, R = p-1;\n    while(L <= R) {\n      int mid = L + R >> 1;\n      if(lcp(sa[mid], sa[p]) >= len) resL = mid, R = mid - 1;\n      else L = mid + 1;\n    }\n  }\n  {\n    int L = p+1, R = nn;\n    while(L <= R) {\n      int mid = L + R >> 1;\n      if(lcp(sa[mid], sa[p]) >= len) resR = mid, L = mid + 1;\n      else R = mid - 1;\n    }\n  }\n}\n\ninline bool check(int s, int t, int id) {\n  int p = stp[id] + s - 1;\n  int len = t - s + 1;\n  int L = -1, R = -1;\n  getrange(p, t - s + 1, L, R);\n  return querysum(rt[R], L, R, 1, nn) >= k;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr), cout.tie(nullptr);\n  cin >> n >> k;\n  rep(i, 1, n) {\n    stp[i] = nn + 1;\n    cin >> S[i];\n    rep(j, 0, (int)S[i].length()-1) {\n      SS[++nn] = S[i][j];\n      sbelong[nn] = i;\n    }\n    SS[++nn] = '$';\n    sbelong[nn] = 0;\n  }\n\n\n  rep(i, 1, n) S[i] = ' ' + S[i];\n  \n  SA();\n  buildheight();\n  buildST();\n\n  rep(i, 1, nn) {\n    int p = sa[i];\n    if(sbelong[p]) {\n      if(last[sbelong[p]]) {\n\tadd(rt[i], rt[i-1], last[sbelong[p]], -1, 1, nn);\n\tadd(rt[i], rt[i], i, 1, 1, nn);\n      } else {\n\tadd(rt[i], rt[i-1], i, 1, 1, nn);\n      }\n    } else rt[i] = rt[i-1];\n    last[sbelong[p]] = i;\n  }\n  rep(i, 1, n) {\n    int R = 0;\n    ll ans = 0;\n    rep(L, 1, S[i].length()-1) {\n      R = max(R, L-1);\n      while(R+1 < S[i].length() && check(L, R+1, i)) R++;\n      ans += max(0, R - L + 1);\n    }\n    cout << ans << \" \\n\"[i == n];\n  }\n  return 0;\n}\n```",
        "postTime": 1626848367,
        "uid": 95103,
        "name": "KellyFrog",
        "ccfLevel": 9,
        "title": "CF204 Little Elephant and Strings \u9898\u89e3"
    }
]