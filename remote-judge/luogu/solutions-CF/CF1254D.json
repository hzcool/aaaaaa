[
    {
        "content": "[$\\tt Link$](/problem/CF1254D)\u3002\n\n\u8003\u8651\u5206\u6790\u4e00\u6b21\u4fee\u6539\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1a\n\n+ \u5bf9\u4e8e\u4e00\u6b21\u4fee\u6539 $u,x$\uff0c\u6211\u4eec\u5220\u53bb $u$\uff0c\u4f1a\u51fa\u73b0\u82e5\u5e72\u8054\u901a\u5757\u3002\n+ \u5bf9\u4e8e\u4e00\u4e2a\u5927\u5c0f\u4e3a $s$ \u7684\u8054\u901a\u5757\uff0c\u6bcf\u4e2a\u70b9\u52a0\u4e0a $\\dfrac{n-s}n$\u3002\n\n\u4e0d\u59a8\u8ba9\u6bcf\u4e2a\u70b9\u52a0\u7684\u503c\u4ece $\\dfrac{n-s}n$ \u53d8\u6210 $n-s$\uff0c\u6700\u540e\u4e58\u4e0a\u4e00\u4e2a $n^{-1}\\bmod998244353$ \u5373\u53ef\u3002\n\n\u6211\u4eec\u8bb0\u4e00\u4e2a\u70b9\u7684\u5ea6\u6570\u4e3a $d_u$\u3002\u7136\u540e\u8003\u8651\u4e24\u79cd\u7b97\u6cd5\uff1a\n\n+ \u66b4\u529b $\\tt1$\uff1a\u4fee\u6539\u65f6\u679a\u4e3e $u$ \u7684\u6240\u6709\u513f\u5b50 $v$\uff0c\u66b4\u529b\u6309\u4e0a\u8ff0\u5f0f\u5b50\u52a0\uff08\u5b50\u6811\u52a0\uff0c\u4f7f\u7528\u4fee\u6539\u590d\u6742\u5ea6 $\\mathcal O(k)$ \u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff09\uff0c\u6700\u540e\u5904\u7406\u7236\u4eb2\uff08\u7236\u4eb2\u6240\u5728\u8054\u901a\u5757\u7684\u5927\u5c0f\u5e94\u8be5\u662f $n-u$ \u7684\u5b57\u6570\u5927\u5c0f\uff09\n+ \u66b4\u529b $\\tt2$\uff1a\u67e5\u8be2\u65f6\u679a\u4e3e\u4e00\u4e9b\u70b9 $v$\uff08\u5f53\u7136 $v\\ne u$\uff09\uff0c\u7136\u540e\u5224\u65ad $u$ \u5728 $v$ \u7684\u54ea\u4e2a\u8054\u901a\u5757\uff08\u8981\u4e48 $u$ \u662f $v$ \u7684\u7956\u5148\uff0c\u8981\u4e48\u627e\u5230\u4e00\u4e2a $v$ \u7684\u513f\u5b50 $w$\uff0c\u4f7f\u5f97 $w$ \u662f $u$ \u7684\u7956\u5148\uff09\uff0c\u7136\u540e\u6839\u636e\u6240\u5728\u8054\u901a\u5757\u8ba1\u7b97 $v$ \u5bf9 $u$ \u7684\u8d21\u732e\u662f\u591a\u5c11\u3002\n\n\u54e6\uff0c\u4f46\u662f\u8fd8\u8981\u6ce8\u610f\u5982\u679c\u53d1\u751f\u8fc7\u4fee\u6539 $\\{u,x\\}$\uff0c\u90a3\u4e48 $u$ \u7684\u7b54\u6848\u6700\u540e\u8981\u52a0\u4e0a $x$\u3002\n\n\u8fd9\u4e24\u79cd\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u5206\u522b\u662f $\\mathcal O(kd_u)$ \u548c $\\mathcal O(t)$\uff0c\u5176\u4e2d $t$ \u662f\u4f60\u9009\u62e9\u679a\u4e3e\u7684\u70b9\u6570\uff0c$k$ \u662f\u4f60\u9009\u62e9\u7684\u6570\u636e\u7ed3\u6784\u4fee\u6539\u7684\u590d\u6742\u5ea6\u3002\n\n\u8fd9\u5e76\u4e0d\u4f18\u3002\u4e8e\u662f\u5e38\u89c4\u624b\u6bb5\uff0c\u6839\u53f7\u644a\u5e73\u3002\uff08\u4ee5\u4e0b\u7684\u67e5\u8be2\u6307\u8ba1\u7b97\u8fd9\u4e2a\u70b9\u5bf9\u5176\u5b83\u70b9\u7684\u8d21\u732e\uff09\n\n+ \u5bf9\u4e8e $d_u\\le\\sqrt n$ \u7684\u70b9\u7684\u4fee\u6539\uff0c\u4f7f\u7528\u66b4\u529b $\\tt1$ \u4e2d\u7684\u4fee\u6539\u3002\n+ \u5bf9\u4e8e $d_u\\le\\sqrt n$ \u7684\u70b9\u7684\u67e5\u8be2\uff0c\u7528\u6570\u636e\u7ed3\u6784\u7b97\u51fa\u4efb\u4f55 $d_v\\le\\sqrt n$ \u7684 $v$ \u5bf9 $u$ \u7684\u7b54\u6848\u3002\n+ \u5bf9\u4e8e $d_u\\gt\\sqrt n$ \u7684\u70b9\u7684\u4fee\u6539\uff0c\u8003\u8651\u8df3\u8fc7\uff0c\u76f4\u63a5\u6446\u70c2\u3002\n+ \u5bf9\u4e8e $d_u\\gt\\sqrt n$ \u7684\u70b9\u7684\u67e5\u8be2\uff0c\u679a\u4e3e\u8fd9\u4e9b\u70b9\uff08\u603b\u4e2a\u6570 $t=\\mathcal O(\\dfrac n{\\sqrt n})=\\mathcal O(\\sqrt n)$\uff09\uff0c\u7136\u540e\u8ba1\u7b97\u8d21\u732e\u3002\n\n\u6570\u636e\u7ed3\u6784\u6211\u4eec\u5e0c\u671b\u505a\u5230\u4fee\u6539 $\\mathcal O(1)$\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6700\u540e\u6839\u53f7\u7684\u590d\u6742\u5ea6\u3002\n\n\u6839\u53f7\u9898\u7528\u6839\u53f7 $\\tt DS$ \u662f\u6781\u597d\u7684\uff0c\u6211\u4eec\u9009\u62e9\u91c7\u7528\u5e8f\u5217\u5206\u5757\uff0c\u8fd9\u4e2a\u5b50\u6811\u52a0\u5355\u70b9\u548c\u662f\u5e38\u89c4\u7684 $\\tt dfs$ \u65f6\u95f4\u6233\u3002\n\n\u5728\u8865\u5145\u8bf4\u8bf4\u3002\u66b4\u529b $\\tt2$ \u91cc\u6709\u4e00\u6b65\u662f\u5bf9\u4e8e $u,v$ \u8981\u627e\u5230\u4e00\u4e2a $w$\uff0c\u6ee1\u8db3 $w$ \u662f $v$ \u7684\u513f\u5b50\uff0c\u4e5f\u662f $u$ \u7684\u7956\u5148\u3002\u8fd9\u4e00\u6b65\u5176\u5b9e\u633a\u50cf $\\tt LCA$\uff0c\u8003\u8651\u6811\u5256\u89e3\u51b3\uff1a\n\n\u6211\u4eec\u9b54\u6539\u6811\u6c42 $\\tt LCA$\uff0c\u5728\u6700\u540e\u4e00\u6b65\uff0c\u4e24\u4e2a\u70b9\u90fd\u5728\u4e00\u6761\u91cd\u94fe\u7684\u65f6\u5019\uff0c\u6df1\u5ea6\u5c0f\u7684\u90a3\u4e2a\u70b9\u5728\u91cd\u94fe\u4e0a\u7684\u513f\u5b50\u5c31\u662f\u7b54\u6848\u3002\n\n\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u5b83\u4eec\u4e2d\u6df1\u5ea6\u5c0f\u7684\u90a3\u4e2a\u5728\u91cd\u94fe\u5e95\uff0c\u8fd9\u65f6\u7b54\u6848\u662f\u5b83\u7684\u67d0\u4e2a\u8f7b\u513f\u5b50\uff0c\u6211\u4eec\u65e0\u6cd5\u5f97\u77e5\u3002\u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u5728\u8df3\u91cd\u94fe\u7684\u65f6\u5019\uff0c\u5982\u679c\u67d0\u4e00\u6b65\u51fa\u73b0 $x$ \u7684\u91cd\u94fe\u9876\u7684\u7236\u4eb2\u662f $y$\uff0c\u5c31\u4e0d\u8df3\u4e86\uff0c\u8fd4\u56de $x$ \u7684\u91cd\u94fe\u9876\u5c31\u662f\u7b54\u6848\u3002\n\n\u6211\u89c9\u5f97\u5199\u7684\u53ef\u8bfb\u6027\u5df2\u7ecf\u5f88\u9ad8\u4e86\u3002\n\n\u5982\u679c $\\texttt{WA on test 6}$ \u4e14\u67d0\u4e2a\u7ed3\u679c\u4f60\u8f93\u51fa\u4e86\u8d1f\u6570\uff0c\u90a3\u4e48\u4e0d\u59a8\u68c0\u67e5\u54ea\u4e00\u6b65\u6ca1\u6709\u53d6\u6a21\uff0c\u5e76\u4e14\u6700\u540e\u5224\u65ad\uff1a\u5982\u679c\u81ea\u5df1\u7684\u7b54\u6848\u662f\u8d1f\u6570\uff0c\u5e94\u8be5\u52a0\u4e0a\u6a21\u6570\u4fdd\u8bc1\u8f93\u51fa\u7684\u7ed3\u679c\u4e0d\u662f\u8d1f\u6570\u3002\n\n```cpp\nconst int N = 1.5e5 + 5,SQ = 405;\nconst ll mod = 998244353;\n\nint n,m; ll inv_n,add[N];\nvector<int> G[N],big;\n\nint B,C,st[SQ],ed[SQ],bl[N];\nll sum[SQ],cnt[N];\n\nint dep[N],siz[N],son[N],fa[N];\nint dfn[N],top[N],tot = 0;\n\n#define Big(i) ((signed)G[i].size() > B)\n#define rdfn(u) dfn[u] + siz[u] - 1\n#define subt(u) dfn[u],rdfn(u)\n\nnamespace HLC{\n\tvoid dfs1(int u = 1,int ft = 0){\n\t\tdep[u] = dep[fa[u] = ft] + (siz[u] = 1);\n\t\tfor(int v : G[u]) if(v != ft){\n\t\t\tdfs1(v,u); siz[u] += siz[v];\n\t\t\tif(siz[v] > siz[son[u]]) son[u] = v;\n\t\t} if(Big(u)) big.push_back(u);\n\t}\n\t\n\tvoid dfs2(int u = 1,int tp = 1){\n\t\tdfn[u] = ++tot; top[u] = tp;\n\t\tif(son[u]) dfs2(son[u],tp);\n\t\tfor(int v : G[u]) if(!top[v]) dfs2(v,v);\n\t}\n\t\n\tint son_lca(int x,int y){\n\t\twhile(top[x] != top[y]){\n\t\t\tif(dep[top[x]] < dep[top[y]]) swap(x,y);\n\t\t\tif(fa[top[x]] == y) return top[x];\n\t\t\tx = fa[top[x]];\n\t\t} return son[dep[x] < dep[y] ? x : y];\n\t}\n} using namespace HLC;\n\nnamespace DS{\n\tvoid init(){\n\t\tB = sqrt(n); C = (n - 1) / B + 1;\n\t\trep(i,1,C){\n\t\t\tst[i] = ed[i - 1] + 1;\n\t\t\ted[i] = i == C ? n : i * B;\n\t\t\trep(j,st[i],ed[i]) bl[j] = i;\n\t\t}\n\t}\n\t\n\tvoid upd(int l,int r,ll x){\n\t\tx %= mod; ++r;\n\t\t(cnt[l] += x) %= mod;\n\t\t(cnt[r] += mod - x) %= mod;\n\t\t(sum[bl[l]] += x) %= mod;\n\t\t(sum[bl[r]] += mod - x) %= mod;\n\t}\n\t\n\tll qry(int p){\n\t\tll res = 0;\n\t\trep(i,1,bl[p] - 1) (res += sum[i]) %= mod;\n\t\trep(i,st[bl[p]],p) (res += cnt[i]) %= mod;\n\t\treturn res;\n\t}\n} using namespace DS;\n\nvoid Upd(int u,ll x){\n\t(add[u] += x) %= mod; if(Big(u)) return;\n\tfor(int v : G[u]) if(v != fa[u])\n\t\tDS::upd(subt(v),x * (n - siz[v]));\n\tif(u == 1) return;\n\tll y = x * siz[u]; upd(subt(1),y); upd(subt(u),-y);\n}\n\nll Qry(int u){\n\tll res = qry(dfn[u]);\n\tfor(int v : big) if(u != v){\n\t\tif(!(dfn[v] <= dfn[u] && rdfn(u) <= rdfn(v)))\n\t\t\t(res += add[v] * siz[v] % mod) %= mod;\n\t\telse (res += add[v] * (n - siz[son_lca(u,v)]) % mod) %= mod;\n\t} res = ((inv_n * res % mod) + add[u]) % mod;\n\treturn (res % mod + mod) % mod;\n}\n\nll fpow(ll v,int b){\n\tll res = 1;\n\twhile(b){\n\t\tif(b & 1) (res *= v) %= mod;\n\t\t(v *= v) %= mod; b >>= 1;\n\t}\n\treturn res;\n}\n\nsigned main(){\n\tread(n,m);\n\tinv_n = fpow(n,mod - 2);\n\trep(i,1,n - 1){\n\t\tint u,v; read(u,v);\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\n\t}\n\tinit(); dfs1(); dfs2();\n\twhile(m--){\n\t\tif(read() == 1){ int x = read(); Upd(x,read()); }\n\t\telse print(Qry(read()),'\\n');\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1659099341,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "CF1254D \u6839\u53f7\u5206\u6cbb+\u5e8f\u5217\u5206\u5757"
    },
    {
        "content": "[CF1254D Tree Queries](https://www.luogu.com.cn/problem/CF1254D)\n\n\u5148\u8003\u8651\u6307\u5b9a\u70b9\u4e3a\u6839\u7684\u60c5\u51b5.\u82e5\u6307\u5b9a\u70b9\u4e3a\u6839\u8282\u70b9\uff0c\u4e14\u5f53\u524d\u9009\u5b9a\u5230\u7684\u70b9\u5728\u6839\u8282\u70b9\u7684\u67d0\u4e2a\u513f\u5b50$son$\u7684\u5b50\u6811\u91cc\uff0c\u90a3\u4e48\u5f53\u524d\u8282\u70b9\u4f1a\u52a0\u4e0a$\\frac{n-siz[son]}{n}\\cdot d$\u7684\u6743\u503c.\u82e5\u5f53\u524d\u9009\u5b9a\u5230\u7684\u70b9\u4e3a\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u76f4\u63a5\u52a0\u4e0a$d$\u5373\u53ef.\n\n\u82e5\u5f53\u524d\u70b9\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u90a3\u5bf9\u4e8e\u5404\u4e2a\u513f\u5b50\u8fdb\u884c\u540c\u6837\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u4e0d\u662f\u81ea\u5df1\u5b50\u6811\u5185\u7684\u70b9$x$\uff0c\u4f1a\u52a0\u4e0a$\\frac{siz[x]}{n}\\cdot d$\u7684\u6743\u503c.\n\n\u6211\u4eec\u7ef4\u62a4\u5206\u5b50\uff0c\u6700\u540e\u518d\u5c06\u7ed3\u679c\u4e58\u4e0a$n^{-1}$.\u7531\u4e8e\u6bcf\u6b21\u626b\u63cf\u6240\u6709\u5b50\u6811\u4f1a\u88ab\u83ca\u82b1\u56fe\u5361\u98de\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u6811\u5256\u4f18\u5316.\n\n\u7ef4\u62a4\u5dee\u5206\u5e8f\u5217\uff0c\u6bcf\u6b21\u8fdb\u884c\u64cd\u4f5c$1$\u65f6\uff0c\u6211\u4eec\u53ea\u5bf9\u91cd\u513f\u5b50\u8fdb\u884c\u6811\u72b6\u6570\u7ec4\u533a\u95f4\u4fee\u6539\uff0c\u987a\u4fbf\u7ef4\u62a4\u4e00\u4e2a\u53d8\u91cf$sum=\\sum siz[v]\\cdot d[v]$\uff0c\u5728\u4fee\u6539\u91cd\u513f\u5b50\u65f6\u5c06\u91cd\u590d\u7684\u90e8\u5206\u6d88\u6389.\u5bf9\u4e8e\u64cd\u4f5c$2$\uff0c\u6ce8\u610f\u5230\u6211\u4eec\u521a\u521a\u53ea\u4fee\u6539\u4e86\u91cd\u513f\u5b50\uff0c\u6240\u4ee5\u5f53\u524d\u70b9\u6240\u5728\u94fe\u7684\u94fe\u9876\u7684\u7236\u8282\u70b9\u5728\u6811\u72b6\u6570\u7ec4\u4e00\u5b9a\u4e0d\u4f1a\u5bf9\u5f53\u524d\u67e5\u8be2\u70b9\u7edf\u8ba1\u8fc7\u8d21\u732e\uff0c\u6240\u4ee5\u5c06\u94fe\u9876\u8d21\u732e\u52a0\u8fdb\u53bb\u5373\u53ef.\n\n$O(nlog^2n)$\n\n\n\u6838\u5fc3\u4ee3\u7801\n\n```cpp\nconst ll N=1.5e5+5;\n\nll head[N], to[N<<1], next[N<<1], tot;\ninline void add(ll x, ll y){\n\tto[++tot]=y; next[tot]=head[x]; head[x]=tot;\n} \ninline void Link(ll x, ll y){\n\tadd(x, y); add(y, x);\n}\n\ninline ll quick_pow(ll x, ll y){\n\tll res=1;\n\tfor (; y; y>>=1){\n\t\tif (y&1) (res*=x)%=mod;\n\t\t(x*=x)%=mod;\n\t}\n\treturn res;\n}\n\ninline ll inv(ll x){\n\treturn quick_pow(x, mod-2);\n}\n\nll n, Q, invn;\n\nnamespace bit{\n\tll f[N];\n\t\n\tinline ll lowbit(ll x){\n\t\treturn x&-x;\n\t}\n\t\n\tinline void modify(ll l, ll r, ll v){\n\t\tfor (; l<=n; l+=lowbit(l)) (f[l]+=v)%=mod;\n\t\tfor (++r; r<=n; r+=lowbit(r)) ((((f[r]-=v)%=mod)+=mod)%=mod);\n\t}\n\t\n\tinline ll ask(ll x){\n\t\tll res=0;\n\t\tfor (; x; x-=lowbit(x)) (res+=f[x])%=mod;\n\t\treturn res;\n\t}\n}\n\nll dfn[N], siz[N], son[N], cnt, f[N], top[N];\n\ninline void dfs1(ll x, ll fa){\n\tsiz[x]=1; f[x]=fa;\n\tfor (R ll i=head[x], ver; i; i=next[i]){\n\t\tver=to[i];\n\t\tif (ver==fa) continue;\n\t\tdfs1(ver, x);\n\t\tsiz[x]+=siz[ver];\n\t\tif (siz[ver]>siz[son[x]]) son[x]=ver;\n\t}\t\n}\n\ninline void dfs2(ll x, ll fir){\n\tdfn[x]=++cnt; top[x]=fir;\n\tif (!son[x]) return;\n\tdfs2(son[x], fir);\n\tfor (R ll i=head[x], ver; i; i=next[i]){\n\t\tver=to[i];\n\t\tif (dfn[ver]) continue;\n\t\tdfs2(ver, ver);\n\t}\n}\n\nll sum, res;\nll v[N];\n\nint main(){\n\tread(n); read(Q);\n\tfor (R ll i=1, x, y; i<n; i++){\n\t\tread(x); read(y); Link(x, y);\n\t}\n\tinvn=inv(n);\n\tdfs1(1, 0); dfs2(1, 1);\n\tll op, x, d;\n\twhile (Q--){\n\t\tread(op); read(x);\n\t\tif (op==1){\n\t\t\tread(d);\n\t\t\t(sum+=siz[x]*d)%=mod;\n\t\t\t(v[x]+=d)%=mod;\n\t\t\tif (son[x]){\n\t\t\t\tbit::modify(dfn[son[x]], dfn[son[x]]+siz[son[x]]-1, (((n-siz[son[x]])*d%mod-siz[x]*d%mod)%mod+mod)%mod);\n\t\t\t}\n\t\t}else {\n\t\t\tres=((sum-v[x]*siz[x]%mod)%mod+v[x]*n)%mod;\n\t\t\t(res+=bit::ask(dfn[x]))%=mod;\n\t\t\twhile (1){\n\t\t\t\tx=top[x];\n\t\t\t\tif (x==1) break;\n\t\t\t\t(((res+=(n-siz[x]-siz[f[x]])*v[f[x]])%=mod)+=mod)%=mod;\n\t\t\t\tx=f[x];\n\t\t\t}\n\t\t\twriteln(res*invn%mod);\n\t\t}\n\t}\n}\n\n```\n",
        "postTime": 1604983949,
        "uid": 220285,
        "name": "Saber_Master",
        "ccfLevel": 7,
        "title": "CF1254D Tree Queries"
    },
    {
        "content": "\u6211\u4eec\u77e5\u9053\uff0c\u5bf9\u4e8e\u5bf9 $v$ \u7684\u67e5\u8be2\uff0c\u5047\u5b9a $v$ \u662f\u6811\u6839\uff0c\u5982\u679c $r$ \u548c $u$ \u5728\u540c\u4e00\u4e2a\u5b50\u6811\u5185\uff0c\u5219 $v$ \u4e0d\u5728\u8def\u5f84\u4e0a\uff0c\u4e0d\u4f1a\u52a0 $d$\uff1b\u5426\u5219\u4f1a\u52a0\u4e0a $d$\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u70b9\uff0c\u5b83\u88ab\u52a0\u4e0a $d$ \u7684\u6982\u7387\u662f $P=\\dfrac{n - \\operatorname{sz}(u)}n$\uff0c\u56e0\u6b64\uff0c\u671f\u671b\u503c\u4f1a\u589e\u52a0 $Pd$\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565 $n$\uff0c\u6700\u540e\u4e58\u4e0a\u9006\u5143\u5373\u53ef\u3002\n\n\u4e0b\u9762\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u9ad8\u6548\u7ef4\u62a4\u4e0a\u9762\u7684\u64cd\u4f5c\u4e86\u3002\n\n\u8def\u5f84\u64cd\u4f5c\u53ef\u4ee5\u8ba9\u6211\u4eec\u60f3\u5230 HLD\uff08\u6811\u94fe\u5256\u5206\uff09\u3002\u4e0d\u8fc7\uff0c\u8fd9\u91cc\u7684 HLD \u7ef4\u62a4\u7684\u662f**\u6811\u4e0a\u5dee\u5206**\u3002\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5982\u679c\u6211\u4eec\u53ea\u66f4\u65b0\u91cd\u513f\u5b50\u7684\u8bdd\n\n- \u5982\u679c\u6b64\u65f6\u5728\u91cd\u94fe\u4e0a\uff0c\u90a3\u4e48\u5df2\u7ecf\u76f4\u63a5\u7ef4\u62a4\u597d\u4e86\n- \u5982\u679c\u6b64\u65f6\u5728\u8f7b\u94fe\u4e0a\uff0c\u6211\u4eec\u5c31\u8df3\u5230\u94fe\u9876\u3002\u6b64\u65f6\uff0c\u52a0\u4e0a\u94fe\u9876\u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\uff08\u8fd9\u8fb9\u53ef\u4ee5\u81ea\u5df1\u753b\u4e2a\u56fe\u7406\u89e3\u4e00\u4e0b\uff09\n\n\u7ef4\u62a4\u76f4\u63a5\u4e0a Fenwick Tree \u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\nconst int N = 200020;\nint n, m;\nstruct Fenwick {\n  int arr[N + 15];\n  void modify(int x, int d) {\n    for (; x <= N; x += x & (-x)) {\n      arr[x] = (arr[x] + d) % mod;\n    }\n  }\n  int query(int x) {\n    LL res = 0;\n    for (; x; x -= x & (-x)) {\n      res = (res + arr[x]) % mod;\n    }\n    return res;\n  }\n} fenwick;\nint top[N], dfn[N], dep[N], fa[N], hson[N], sz[N];\nVI g[N];\nvoid dfs1(int u) {\n  sz[u] = 1;\n  for (auto v : g[u]) {\n    if (v == fa[u]) continue;\n    dep[v] = dep[u] + 1;\n    fa[v] = u;\n    dfs1(v);\n    sz[u] += sz[v];\n    if (sz[v] > sz[hson[u]]) hson[u] = v;\n  }\n}\nint in[N], out[N];\nint tot;\nvoid dfs2(int u, int t) {\n  top[u] = t;\n  in[u] = dfn[u] = ++tot;\n  if (hson[u]) dfs2(hson[u], t);\n  for (auto v : g[u])\n    if (v != hson[u] && v != fa[u]) dfs2(v, v);\n  out[u] = tot;\n}\nLL qpow(LL a, LL b = mod - 2) {\n  LL ans = 1;\n  for (; b; b >>= 1) {\n    if (b & 1) ans = ans * a % mod;\n    a = a * a % mod;\n  }\n  return ans % mod;\n}\nint lazy[N];\nvoid solve() {\n  n = qread();\n  m = qread();\n  rep(i, n - 1) {\n    int u = qread(), v = qread();\n    g[u].pb(v);\n    g[v].pb(u);\n  }\n  fa[1] = 1;\n  dep[1] = 1;\n  dfs1(1);\n  dfs2(1, 1);\n  int invn = qpow(n);\n  while (m--) {\n    int op = qread();\n    if (op == 1) {\n      int u = qread(), d = qread();\n      if (u != 1) fenwick.modify(dfn[u], d * (n - sz[u]) % mod);\n      fenwick.modify(1, d * sz[u] % mod);\n      if (hson[u])\n        fenwick.modify(dfn[u] + 1, d * (mod - sz[hson[u]]) % mod);//\u5bf9\u4e8e\u91cd\u513f\u5b50\uff0c\u5728 BIT \u4e0a\u4fee\u6539\u3002\n      lazy[u] = (lazy[u] + d) % mod;//\u5bf9\u4e8e\u975e\u91cd\u513f\u5b50\uff0c\u7d2f\u52a0\u6807\u8bb0\n    } else {\n      int u = qread();\n      LL ans = 0;\n      while (top[u] != 1) {\n        ans = (\n                (\n                  (ans + fenwick.query(dfn[u])) % mod \n                  + mod * 2 - fenwick.query(dfn[top[u]] - 1)\n                ) % mod\n                  + lazy[fa[top[u]]] * (mod * 2 - sz[top[u]]) % mod//\u52a0\u4e0a\u94fe\u9876\u7684\u8d21\u732e\n              ) % mod;\n        u = fa[top[u]];\n      }\n      ans = (ans + fenwick.query(dfn[u])) % mod;\n      printf(\"%lld\\n\", (int)(ans * invn % mod));\n    }\n  }\n\n}\nsigned main() {\n  int T = 1;\n  // T = qread();\n  while (T--) solve();\n  return 0;\n}\n```",
        "postTime": 1599478668,
        "uid": 87696,
        "name": "Lily_White",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1254D \u3010Tree Queries\u3011"
    },
    {
        "content": "ATS\u5927\u4f6c\u7ed9\u7684\u6811\u5256\u9898\uff0c\u770b\u4e86\u4e24\u773c\u4e0d\u4f1a\u5c31\u7ffb\u9898\u89e3\u3002\n\n\u7ed3\u679c\u2026\u2026\u7adf\u7136\u6ca1\u6709\u9898\u89e3\uff1f\n\n\u7136\u540e\u81ea\u5df1\u5199\uff0c\u7ed3\u679c\u5c31A\u4e86\u3002\n\n------------\n\u8fd9\u9898\u51fa\u5f97\u5f88\u597d\u3002\n\n\u9996\u5148\u8003\u8651\uff0c\u5bf9 $v$ \u4f7f\u7528\u64cd\u4f5c $1$ \uff0c\u672c\u8d28\u4e0a\u662f\u4ec0\u4e48\u5462\uff1f\n\n\u4e3a\u65b9\u4fbf\u601d\u8003\uff0c\u8fd9\u91cc\u628a\u6574\u68f5\u6811\u7684\u6839\u6362\u4e3a $v$\u3002\u7136\u540e\u53d1\u73b0\uff1a\n- \u5982\u679c $r\\not=v$\uff0c\u90a3\u4e48\u4efb\u4f55\u4e0e $r$ \u4e0d\u5728\u540c\u4e00\u5b50\u6811\u5185\u7684\u8282\u70b9\u90fd\u4f1a\u52a0 $d$\uff1b\n- \u5982\u679c $r=v$\uff0c\u90a3\u5c31\u662f\u5168\u52a0\u3002\n\n\u6240\u4ee5\u8bf4\uff0c\u8bbe\u8282\u70b9 $u\\not=v$ \u6240\u5728\u7684\u5b50\u6811\u5927\u5c0f\u4e3a $size_u$\uff0c\u5219 $u$ \u88ab\u52a0 $d$ \u7684\u6982\u7387\u4e3a $\\frac{n-size_u}{n}$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5ffd\u7565\u8fd9\u4e2a\u5206\u6bcd $n$\uff0c\u8f93\u51fa\u7684\u65f6\u5019\u518d\u4e58\u4e2a\u9006\u5143\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u91cc\u53ea\u6709\u5355\u70b9\u67e5\u8be2\uff0c\u90a3\u6211\u4eec\u8003\u8651\u6811\u4e0a\u67e5\u5206\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u51cf\u53bb\u5176\u7236\u8282\u70b9\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u6bcf\u6b21\u64cd\u4f5c $1$ \u8981\u7ef4\u62a4\u6bcf\u4e2a\u5b50\u8282\u70b9\u554a\uff1f\u9020\u4e2a\u83ca\u82b1\u4e0d\u5c31 gg \u4e86\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u6bd4\u8f83\u5957\u8def\u7684\u65b9\u6cd5\uff1a\n\n\u6211\u4eec\u6811\u5256\uff0c\u7136\u540e\u53ea\u66f4\u91cd\u513f\u5b50\u3002\u6bcf\u6b21\u67e5\u8be2\u5c31\u5f80\u4e0a\u8df3\u94fe\uff0c\u7136\u540e\u52a0\u4e0a\u94fe\u9876\u7684\u8d21\u732e\u3002\n\n\u7531\u4e8e\u6700\u591a\u8df3 $O(\\log n)$ \u6761\u94fe\uff0c\u6240\u4ee5\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\nupd\uff1a\u5f53\u65f6\u592a\u5e74\u8f7b\uff0c\u590d\u6742\u5ea6\u90fd\u7b97\u9519\u4e86\uff0c\u611f\u8c22 @hs_blakck \u795e\u4ed9\u7684\u6307\u6b63\uff0c\u67e5\u8be2\u590d\u6742\u5ea6\u4e3a $O(\\log^2n)$\n\ncode\uff1a\n```cpp\n#include<vector>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n    int x=0;\n    bool f=0;\n    char c=getchar();\n    while(!isdigit(c)&&c!='-') c=getchar();\n    if(c=='-'){\n        f=1;\n        c=getchar();\n    }\n    while(isdigit(c)){\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return f?-x:x;\n}\nconst int maxn=150000+5;\nint n,q;\nvector<int> g[maxn];\nint fa[maxn],size[maxn],hson[maxn];\nvoid dfs1(int u){\n\tsize[u]=1;\n\thson[u]=0;\n\tfor(int i=0;i<g[u].size();i++){\n\t\tint v=g[u][i];\n\t\tif(v==fa[u]) continue;\n\t\tfa[v]=u;\n\t\tdfs1(v);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>size[hson[u]]) hson[u]=v; \n\t}\n}\nint cnt=0,top[maxn],pos[maxn];\nvoid dfs2(int u){\n\tpos[u]=++cnt;\n\tif(hson[u]){\n\t\ttop[hson[u]]=top[u];\n\t\tdfs2(hson[u]);\n\t}\n\tfor(int i=0;i<g[u].size();i++){\n\t\tint v=g[u][i];\n\t\tif(v==fa[u]||v==hson[u]) continue;\n\t\ttop[v]=v;\n\t\tdfs2(v);\n\t}\n}\ntypedef long long ll;\nconst ll mod=998244353;\nll c[maxn];\ninline int lowbit(int x){\n\treturn x&-x;\n}\nvoid update(int x,ll k){\n\twhile(x<=n){\n\t\tc[x]=(c[x]+k)%mod;\n\t\tx+=lowbit(x);\n\t}\n}\nll query(int x){\n\tll s=0;\n\twhile(x>0){\n\t\ts=(s+c[x])%mod;\n\t\tx-=lowbit(x);\n\t}\n\treturn s;\n}\nll ksm(ll a,ll b){\n\tll ans=1;\n\twhile(b!=0){\n\t\tif(b%2==1) ans=ans*a%mod;\n\t\ta=a*a%mod;\n\t\tb/=2;\n\t}\n\treturn ans;\n}\nll invn;\nll tag[maxn];\nint main(){\n    #ifdef LOCAL\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    n=readint();\n    q=readint();\n    for(int i=1;i<n;i++){\n    \tint u,v;\n    \tu=readint();\n    \tv=readint();\n    \tg[u].push_back(v);\n    \tg[v].push_back(u);\n\t}\n\tfa[1]=0;\n\tsize[0]=0;\n\tdfs1(1);\n\ttop[1]=1;\n\tdfs2(1);\n\tmemset(c,0,sizeof(c));\n\tinvn=ksm(n,mod-2);\n\tmemset(tag,0,sizeof(tag));\n\twhile(q--){\n\t\tint opt=readint();\n\t\tif(opt==1){\n\t\t\tint v=readint();\n\t\t\tll d=readint();\n\t\t\tif(v!=1) update(pos[v],d*(n-size[v])%mod);\n\t\t\tupdate(1,d*size[v]%mod);\n\t\t\tif(hson[v]) update(pos[v]+1,d*(mod-size[hson[v]])%mod);\n\t\t\ttag[v]=(tag[v]+d)%mod;\n\t\t}\n\t\telse{\n\t\t\tint v=readint();\n\t\t\tll ans=0;\n\t\t\twhile(top[v]!=1){\n\t\t\t\tans=(((ans+query(pos[v]))%mod+mod-query(pos[top[v]]-1))%mod+tag[fa[top[v]]]*(mod-size[top[v]])%mod)%mod;\n\t\t\t\tv=fa[top[v]];\n\t\t\t}\n\t\t\tans=(ans+query(pos[v]))%mod;\n\t\t\tprintf(\"%d\\n\",(int)(ans*invn%mod));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1578150805,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1254D \u3010Tree Queries\u3011"
    },
    {
        "content": "~~\u5957\u8def\u9898\u600e\u4e48\u80fd\u6ca1\u6709\u9898\u89e3\u5462\uff1f~~\n\n\u5728\u6211\u7684\u535a\u5ba2\u770b\u6548\u679c\u66f4\u4f73\uff1a[\u70b9\u8fd9\u91cc](https://www.cnblogs.com/1000Suns/p/11922292.html)\n\n\u51fa\u9898\u4eba\u7684\u505a\u6cd5\u662f $O(n\\sqrt{n\\log n})$\uff0c\u7ed3\u679c\u8fd9\u573a\u7ed3\u675f\u540e\u5c31\u88ab\u72c2\u55b7\uff0c\u4e00\u7fa4\u4eba\u7ed9\u51fa\u4e86 $O(n\\sqrt{n})$ \u505a\u6cd5\uff0c\u751a\u81f3 $O(n\\log n)$ \u90fd\u51fa\u6765\u4e86\u2026\u2026\n\n\u9996\u5148\u53d1\u73b0\uff0c\u4fee\u6539\u4e00\u4e2a\u70b9\u65f6\uff0c\u5982\u679c\u628a\u8fd9\u4e2a\u70b9\u770b\u6210\u6839\uff0c\u5176\u5b83\u70b9\u6743\u671f\u671b\u7684\u53d8\u5316\u53ea\u548c\u5728\u6839\u7684\u54ea\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u4e2d\u6709\u5173\uff0c$\\frac{n-sz[u]}{n}d$\uff08\u9009\u9664\u4e86\u8fd9\u4e2a\u5b50\u6811\u4e2d\u7684\u70b9\u90fd\u80fd\u7ecf\u8fc7 $x$\uff09\u3002\n\n$O(n\\sqrt{n\\log n})$ \u5f88\u663e\u7136\uff0c\u5bf9\u4fee\u6539\u7684\u70b9\u7684\u5ea6\u6570\u5206\u7c7b\u8ba8\u8bba\uff0c\u5ea6\u6570\u5c0f\u7684\u5c31\u662f\u4e00\u5806\u5b50\u6811\u52a0\uff0c\u5ea6\u6570\u5927\u7684\u5c31\u6253\u4e2a\u6807\u8bb0\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u628a\u5927\u70b9\u7684\u8d21\u732e\u4e5f\u7b97\u4e0a\u5c31\u884c\u4e86\u3002\n\n$O(n\\sqrt{n})$ \u7684\u8bdd\uff0c\u628a\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\u6362\u6210\u5206\u5757\u3002\u5ea6\u6570\u5c0f\u7684\u4fee\u6539\u590d\u6742\u5ea6\u603b\u5171\u662f $O(\\text{\u5757\u6570}+\\text{\u5ea6\u6570})$\uff08\u6bcf\u68f5\u5b50\u6811\u7684\u533a\u95f4\u4e0d\u4ea4\uff09\u3002\n\n$O(n\\log n)$ \u5c31\u4e0d\u7528\u5ea6\u6570\u6839\u53f7\u5206\u6cbb\u4e86\u3002\n\n\u8003\u8651\u6811\u5256\uff08\u4f3c\u4e4e\u5f88\u5957\u8def\uff1f\uff09\uff0c\u4fee\u6539\u4e00\u4e2a\u70b9\u65f6\uff0c\u53ea\u9700\u8981\u5bf9\u91cd\u5b50\u6811\u548c\u5916\u5b50\u6811\u533a\u95f4\u52a0\u3002\n\n\u8be2\u95ee\u4e00\u4e2a\u70b9\u65f6\uff0c\u53d1\u73b0\u9700\u8981\u518d\u7edf\u8ba1\u7684\u5c31\u662f\u8df3\u91cd\u94fe\u65f6\uff0c\u4ece\u4e00\u6761\u94fe\u8df3\u5230\u53e6\u5916\u4e00\u6761\u94fe\u65f6\u94fe\u5934\u548c\u7236\u4eb2\u4e4b\u95f4\u7684\u8d21\u732e\uff08\u53ea\u6709\u8fd9\u65f6\u624d\u662f\u8f7b\u513f\u5b50\uff09\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst int maxn=300030,mod=998244353;\n#define MP make_pair\n#define PB push_back\n#define lson o<<1,l,mid\n#define rson o<<1|1,mid+1,r\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define ROF(i,a,b) for(int i=(a);i>=(b);i--)\n#define MEM(x,v) memset(x,v,sizeof(x))\ninline ll read(){\n\tchar ch=getchar();ll x=0,f=0;\n\twhile(ch<'0' || ch>'9') f|=ch=='-',ch=getchar();\n\twhile(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn f?-x:x;\n}\nint n,q,el,head[maxn],to[maxn],nxt[maxn],b[maxn],dep[maxn],sz[maxn],son[maxn],fa[maxn],top[maxn],lft[maxn],rig[maxn],cnt,tag[maxn];\ninline void add(int u,int v){\n\tto[++el]=v;nxt[el]=head[u];head[u]=el;\n}\ninline int qpow(int a,int b){\n\tint ans=1;\n\tfor(;b;b>>=1,a=1ll*a*a%mod) if(b&1) ans=1ll*ans*a%mod;\n\treturn ans;\n}\ninline void update(int p,int v){\n\tfor(int i=p;i<=n;i+=i&-i) b[i]=(b[i]+v)%mod;\n}\ninline void update(int l,int r,int v){\n\tupdate(l,v);update(r+1,(mod-v)%mod);\n}\ninline int query(int p){\n\tint s=0;\n\tfor(int i=p;i;i-=i&-i) s=(s+b[i])%mod;\n\treturn s;\n}\nvoid dfs1(int u,int f){\n\tdep[u]=dep[fa[u]=f]+1;\n\tsz[u]=1;\n\tfor(int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(v==f) continue;\n\t\tdfs1(v,u);\n\t\tsz[u]+=sz[v];\n\t\tif(sz[v]>sz[son[u]]) son[u]=v; \n\t}\n}\nvoid dfs2(int u,int topf){\n\ttop[u]=topf;\n\tlft[u]=++cnt;\n\tif(son[u]) dfs2(son[u],topf);\n\tfor(int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(v==fa[u] || v==son[u]) continue;\n\t\tdfs2(v,v);\n\t}\n\trig[u]=cnt;\n}\nvoid update_tree(int u,int d){\n\ttag[u]=(tag[u]+d)%mod;\n\tif(son[u]) update(lft[son[u]],rig[son[u]],1ll*(n-sz[son[u]])*d%mod);\n\tif(u!=1){\n\t\tupdate(1,lft[u]-1,1ll*sz[u]*d%mod);\n\t\tif(rig[u]!=n) update(rig[u]+1,n,1ll*sz[u]*d%mod);\n\t}\n}\nint query_tree(int u){\n\tint s=(1ll*n*tag[u]+query(lft[u]))%mod;\n\twhile(u){\n\t\ts=(s+1ll*tag[fa[top[u]]]*(n-sz[top[u]]))%mod; \n\t\tu=fa[top[u]];\n\t}\n\treturn s;\n}\nint main(){\n\tn=read();q=read();\n\tint inv=qpow(n,mod-2);\n\tFOR(i,1,n-1){\n\t\tint u=read(),v=read();\n\t\tadd(u,v);add(v,u);\n\t}\n\tdfs1(1,0);dfs2(1,1);\n\twhile(q--){\n\t\tint tp=read(),u=read();\n\t\tif(tp==1) update_tree(u,1ll*inv*read()%mod);\n\t\telse printf(\"%d\\n\",query_tree(u));\n\t}\n}\n```",
        "postTime": 1578137665,
        "uid": 72118,
        "name": "AThousandSuns",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1254D \u3010Tree Queries\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u4e2a\u671f\u671b\u5c31\u5f88\u4e0d\u597d\u770b\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u64cd\u4f5c\u65f6\u628a\u6240\u6709 $r$ \u90fd\u505a\u4e00\u904d\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u9664\u4ee5 $n$ \u5373\u53ef\u3002\n\n\u8003\u8651\u5982\u4f55\u6709\u6548\u5730\u8fdb\u884c\u64cd\u4f5c\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 $u$\uff0c\u5982\u679c\u9009\u53d6\u7684 $r$ \u5bf9 $u$ \u7684\u6743\u503c\u4ea7\u751f\u4e86\u8d21\u732e\uff0c\u90a3\u4e48\u5f53\u4e14\u4ec5\u5f53 $u$ \u5230 $r$ \u7684\u8def\u5f84\u7ecf\u8fc7 $v$\uff08\u5b9a\u4e49\uff09\uff0c**\u4e5f\u5c31\u662f\u5206\u4e3a\u4e86\u4ee5\u4e0b\u4e09\u7c7b\u3002**\n\n1. $u=v$\n\n\u6302\u7740\u4e0d\u7ba1\u3002\n\n2. $u$ \u5728 $v$ \u7684\u5b50\u6811\u5916\uff0c\u90a3\u4e48 $r$ \u5728 $v$ \u7684\u5b50\u6811\u5185\u3002\n\n\u8fd9\u90e8\u5206\u76f4\u63a5\u628a\u6811\u62cd\u6241\u6210\u6df1\u5ea6\u4f18\u5148\u5e8f\u7136\u540e\u4e0a\u7ebf\u6bb5\u6811\u533a\u95f4\u52a0\u5c31\u597d\u4e86\u3002\n\n3. $u$ \u5728 $v$ \u7684\u5b50\u6811\u5185\u3002\n\n\u6b64\u65f6 $r$ \u53ea\u9700\u8981\u548c $u$ \u4e0d\u5728 $v$ \u7684\u540c\u4e00\u68f5\u5b50\u6811\u5185\u5c31\u53ef\u4ee5\u4e86\u3002\u6211\u4eec\u60f3\u6a21\u4eff $u$ \u5728 $v$ \u7684\u5b50\u6811\u5916\u90a3\u6837\u7ef4\u62a4\uff0c\u4f46\u662f\u53d1\u73b0\u8fd9\u6837\u7684\u8bdd\u9700\u8981\u904d\u5386 $v$ \u7684\u6240\u6709\u5b50\u6811\uff0c\u6765\u4e2a\u83ca\u82b1\u56fe\u5c31\u53ef\u4ee5\u5361\u7206\u2014\u2014\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u4e86\u6811\u5256\u4f18\u5316\u3002\n\n\u90a3\u4e48\u7ee7\u7eed\u5206\u6210\u4e24\u4e2a\u5c0f\u7c7b\uff1a $u$ \u662f\u5426\u5728 $v$ \u7684\u91cd\u513f\u5b50\u5bf9\u5e94\u7684\u5b50\u6811\u5185\u3002\n\n\u5982\u679c\u662f\uff0c\u76f4\u63a5\u533a\u95f4\u52a0\uff1b\n\n\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u5c31\u4e0d\u7ba1\u4e86\u5148\u3002\n\n\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u9996\u5148\u7edf\u8ba1\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u4e0a\u6302\u7740\u7684\u503c\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u5355\u70b9\u6c42\u503c\u7edf\u8ba1\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u5927\u90e8\u5206\u7956\u5148\u653e\u4e0b\u6765\u7684\u8d21\u732e\u3002\n\n\u7136\u540e\u6211\u4eec\u5f80\u4e0a\u6cbf\u7740\u91cd\u94fe\u8df3\uff1a\u6bcf\u6b21\u8df3\u5230\u94fe\u9876\uff0c\u6b64\u65f6\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u662f\u5176\u7236\u4eb2\uff08\u82e5\u5b58\u5728\uff09\u7684\u4eb2\u513f\u5b50\uff0c\u4e5f\u5c31\u662f\u8bf4\u6b63\u597d\u53ea\u6709\u8fd9\u4e9b\u70b9\u7684\u7236\u4eb2\u7684\u8d21\u732e\u8fd8\u6ca1\u6709\u7edf\u8ba1\u5230\uff0c\u90a3\u4e48\u770b\u770b\u5176\u7236\u4eb2\u6302\u4e86\u591a\u5c11\u503c\uff0c\u7b97\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u4ee3\u7801\u5f88\u597d\u5199\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nconstexpr int N = 1.5e5 + 9, mod = 998244353;\nint n, q, invn, fa[N], sz[N], sn[N], top[N], dfn[N], ed[N], val[N];\nvector<int> tr[N];\nint zkw[N << 2], M = 1;\nint qpow(int bs, int pw) {\n  int ret = 1;\n  while (pw) {\n    if (pw & 1) (ret *= bs) %= mod;\n    pw >>= 1, (bs *= bs) %= mod;\n  }\n  return ret;\n}\nvoid dfs1(int x) {\n  sz[x] = 1;\n  for (int& y : tr[x])\n    if (y != fa[x]) {\n      fa[y] = x, dfs1(y);\n      sz[x] += sz[y];\n      if (sz[y] > sz[sn[x]]) sn[x] = y, swap(tr[x][0], y);\n    }\n}\nvoid dfs2(int x) {\n  dfn[x] = ++dfn[0];\n  top[x] = sn[fa[x]] == x ? top[fa[x]] : x;\n  for (int y : tr[x])\n    if (y != fa[x]) dfs2(y);\n  ed[x] = dfn[0];\n}\nvoid update(int l, int r, int v) {\n  if (l > r) return;\n  for (l += M - 1, r += M + 1; l ^ r ^ 1; l >>= 1, r >>= 1) {\n    if (~l & 1) zkw[l ^ 1] += v;\n    if (r & 1) zkw[r ^ 1] += v;\n  }\n}\nint query(int x) {\n  int ret = 0;\n  for (x += M; x; x >>= 1) ret += zkw[x];\n  return ret;\n}\nsigned main() {\n  cin >> n >> q, invn = qpow(n, mod - 2);\n  while (M <= n) M <<= 1;\n  for (int i = 1, u, v; i < n; ++i)\n    cin >> u >> v, tr[u].push_back(v), tr[v].push_back(u);\n  dfs1(1), dfs2(1);\n  while (q--) {\n    int op, v;\n    cin >> op >> v;\n    if (op == 1) {\n      int d;\n      cin >> d;\n      (val[v] += d) %= mod;\n      update(1, dfn[v] - 1, sz[v] * d % mod);\n      update(ed[v] + 1, n, sz[v] * d % mod);\n      update(dfn[sn[v]], ed[sn[v]], (n - sz[sn[v]]) * d % mod);\n    } else {\n      int ret = val[v] * n + query(dfn[v]);\n      while (fa[v = top[v]]) ret += (n - sz[v]) * val[fa[v]] % mod, v = fa[v];\n      cout << (ret % mod * invn) % mod << endl;\n    }\n  }\n  return 0;\n}\n```\n\nOver.",
        "postTime": 1637063977,
        "uid": 250637,
        "name": "UnyieldingTrilobite",
        "ccfLevel": 9,
        "title": "\u795e\u4ed9\u9898"
    },
    {
        "content": "\u968f\u4fbf\u5237 CF \u5237\u5230\u8fd9\u9053\u9898\uff0c\u7136\u540e\u60f3\u4e86\u4e2a\u5e38\u6570\u5de8\u5927\u7684 $\\mathcal O(n\\sqrt n)$ \u505a\u6cd5\u3002\uff08\u5927\u6982\u548c\u5176\u5b83\u9898\u89e3\u4e0d\u592a\u4e00\u6837\uff09\n\n---\n\n\u8003\u8651\u4fee\u6539\u76f8\u5f53\u4e8e\u7ed9 $u$ \u7684\u6240\u6709\u76f8\u90bb\u7684\u70b9 $v$ \u6240\u5728\u5b50\u6811\u52a0 $(n - {\\rm siz}_v)\\cdot \\dfrac dn$.\uff08\u8fd9\u91cc\u7684 ${\\rm siz}_v$ \u6307\u7684\u662f\u65ad\u6389 $(u,v)$ \u8fd9\u6761\u8fb9\u540e $v$ \u6240\u5728\u8fde\u901a\u5757\u7684\u5927\u5c0f\uff09\u6211\u4eec\u4e0d\u59a8\u4ee4 $d\\leftarrow \\dfrac dn$.\n\n\u6211\u4eec\u5148\u8003\u8651\u5047\u5982\u67e5\u8be2\u5168\u5728\u4fee\u6539\u4e4b\u540e\u600e\u4e48\u505a\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5bf9\u4e8e\u540c\u4e00\u4e2a\u70b9\u7684\u4fee\u6539\u5408\u5e76\uff08$d$ \u5168\u90e8\u52a0\u8d77\u6765\uff09\uff0c\u7136\u540e\u66b4\u529b\u7ed9\u6bcf\u4e2a\u70b9\u6253\u6811\u4e0a\u5dee\u5206\u6807\u8bb0\uff0c\u518d\u66b4\u529b\u7ed9\u6811\u4e0a\u5dee\u5206\u505a\u6811\u4e0a\u524d\u7f00\u548c\uff0c\u505a\u4e00\u6b21\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O(n)$ \u7684\u3002\n\n\u4e8e\u662f\u60f3\u5230\uff0c\u80fd\u5426\u60f3\u5230\u53e6\u5916\u4e00\u4e2a\u505a\u6cd5\uff0c\u4f7f\u5f97\u6211\u4eec\u6bcf\u9694 $B$ \u4e2a\u64cd\u4f5c\u8fdb\u884c\u4e00\u6b21\u4e0a\u8ff0\u64cd\u4f5c\u66b4\u529b\u5e94\u7528\u4fee\u6539\uff0c\u7136\u540e\u5bf9\u4e8e\u8fd9 $B$ \u4e2a\u64cd\u4f5c\u66b4\u529b\u67e5\u5b83\u4eec\u4e4b\u95f4\u7684\u5f71\u54cd\u3002\n\n\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u8981\u5224\u65ad\u4e00\u4e2a\u64cd\u4f5c\u5bf9\u4e00\u4e2a\u8be2\u95ee\u7684\u5f71\u54cd\uff0c\u552f\u4e00\u9700\u8981\u77e5\u9053\u7684\u4e8b\u5c31\u662f\u8be2\u95ee\u7684\u70b9 $v$ \u5728\u4fee\u6539\u4f5c\u7528\u4e8e\u7684\u70b9 $u$ \u7684**\u54ea\u4e00\u68f5\u5b50\u6811**\u5185\u3002\n\n\u968f\u4fbf\u62ff\u4e2a\u70b9\u505a\u6839\uff0c\u8bb0 $v$ \u7684\u6df1\u5ea6\u4e3a $d_v$\uff0c$v$ \u7684\u7236\u4eb2\u4e3a ${\\rm fa}_v$\uff0c\u5219\uff08\u4e0b\u6587\u7684 ${\\rm siz}_v$ \u6307\u7684\u662f\u65ad\u6389 $({\\rm fa}_v, v)$ \u8fd9\u6761\u8fb9\u540e $v$ \u6240\u5728\u8fde\u901a\u5757\u7684\u5927\u5c0f\uff09\uff1a\n\n- \u82e5 $u = v$\uff0c\u5219\u8be5\u4fee\u6539\u5bf9\u8be2\u95ee\u8d21\u732e $n\\cdot d$.\n- \u82e5 $d_u \\ge d_v $\uff0c\u663e\u7136 $v$ \u53ea\u4f1a\u5728 $u$ \u7236\u4eb2\u6240\u5728\u5b50\u6811\u5185\uff0c\u8be5\u4fee\u6539\u5bf9\u8be2\u95ee\u8d21\u732e ${\\rm siz}_u\\cdot d$.\n- \u5426\u5219\uff0c\u8003\u8651\u8df3\u5230 $v$ \u7684 $d_v - d_u - 1$ \u7ea7\u7956\u5148 $x$\uff0c\u5176\u6df1\u5ea6\u6070\u597d\u4e0e $u$ \u5b69\u5b50\u7684\u6df1\u5ea6\u76f8\u540c\uff1a\n  - \u6b64\u65f6\u82e5 ${\\rm fa}_x = u$\uff0c\u5219 $v$ \u5728 $x$ \u6240\u5728\u5b50\u6811\u5185\uff0c\u8be5\u4fee\u6539\u5bf9\u8be2\u95ee\u8d21\u732e $(n - {\\rm siz}_x)\\cdot d$.\n  - \u5426\u5219\uff0c$v$ \u5728 $u$ \u7236\u4eb2\u6240\u5728\u5b50\u6811\u5185\uff0c\u8be5\u4fee\u6539\u5bf9\u8be2\u95ee\u8d21\u732e ${\\rm siz}_u\\cdot d$.\n\n\u5047\u5982\u7528\u500d\u589e\u8df3\u7956\u5148\u7684\u65b9\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O(\\log n)$ \u7684\uff0c\u8fd9\u6837\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O\\left(n\\log n + qB\\log n+n\\dfrac qB \\right)$ \u7684\uff0c\u5728 $B = \\sqrt{\\dfrac n {\\log n}}$ \u65f6\u53d6\u5230\u6700\u5c0f\u503c $\\mathcal O(n\\log n + n\\sqrt{n\\log n})$\uff0c\u6ca1\u8bd5\u8fc7\uff0c\u4f46\u662f\u611f\u89c9\u4e0d\u662f\u5f88\u8dd1\u7684\u8fc7\u53bb\u3002~~\u867d\u7136\u5e38\u6570\u5c0f\u5c31\u662f\u4e86~~\u3002\n\n\u6ce8\u610f\u5230\u8df3 $k$ \u7ea7\u7956\u5148\u53ef\u4ee5\u4f7f\u7528\u957f\u94fe\u5256\u5206\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u9884\u5904\u7406\u51fa $2^i$ \u7ea7\u7956\u5148\uff0c\u5bf9\u4e8e\u6bcf\u6761\u957f\u94fe\uff0c\u5728\u94fe\u9876\u5411\u4e0a\u4e0b\u9884\u5904\u7406\u957f\u94fe\u957f\u5ea6\u7ea7\u7956\u5148\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\uff0c\u8df3\u5230\u4ee4 $i$ \u4e3a $k$ \u4e8c\u8fdb\u5236\u4e0b\u7684\u6700\u9ad8\u4f4d\uff0c\u8df3\u5230 $2^i$ \u7ea7\u7956\u5148\u6240\u5728\u7684\u957f\u94fe\u7684\u94fe\u9876\u3002\u663e\u7136\u8fd9\u6761\u957f\u94fe\u957f\u5ea6\u4e0d\u5c0f\u4e8e $2^i$\uff0c\u66f4\u4e0d\u5c0f\u4e8e\u5269\u4e0b\u7684 $k$\uff08\u6216\u8005\u591a\u8df3\u7684 $k$\uff09\uff0c\u76f4\u63a5\u67e5\u5904\u7406\u8fc7\u7684\u8868\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)-\\mathcal O(1)$.\n\n\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86 $\\mathcal O\\left(n\\log n+qB+n\\dfrac qB \\right)$ \u7684\uff0c\u5728 $B = \\sqrt{n}$ \u65f6\u53d6\u5230\u6700\u5c0f\u503c $\\mathcal O(n\\log n +q\\sqrt n)$\uff0c\u5b9e\u6d4b\u53ef\u8fc7\u3002\n\n---\n\n```cpp\nll QPow(ll a, ll b) {\n\tll ret = 1, bas = a;\n\tfor(; b; b >>= 1, bas = bas * bas % kMod) if(b & 1) ret = ret * bas % kMod;\n\treturn ret;\n}\n\nint n, q;\nstd::vector <int> E[kN];\nvoid Add(int u, int v) { E[u].push_back(v); E[v].push_back(u); }\n\nint fa[kN][20], h_bit[kN], top[kN], d[kN], hvy[kN], dep[kN],\n\tdfn[kN], siz[kN], dfv = 0;\nvoid Dfs(int u) {\n\tdfn[u] = ++dfv; siz[u] = 1;\n\tdep[u] = dep[fa[u][0]] + 1;\n\tfor(auto v : E[u]) if(v != fa[u][0]) {\n\t\tfa[v][0] = u; Dfs(v);\n\t\tif(d[v] > d[hvy[u]]) hvy[u] = v;\n\t\tsiz[u] += siz[v];\n\t}\n\td[u] = d[hvy[u]] + 1;\n}\nvoid GetTop(int u, int t) {\n\ttop[u] = t;\n\tif(hvy[u]) GetTop(hvy[u], t);\n\tfor(auto v : E[u]) if(v != fa[u][0] && v != hvy[u]) {\n\t\tGetTop(v, v);\n\t}\n}\n\nstd::vector <int> lower[kN], upper[kN];\nvoid Init() {\n\tDfs(1); GetTop(1, 1);\n\tfor(int i = 1; i <= 18; ++i)\n\t\tfor(int j = 1; j <= n; ++j)\n\t\t\tfa[j][i] = fa[fa[j][i - 1]][i - 1];\n\th_bit[0] = -1;\n\tfor(int i = 1; i <= n; ++i)\n\t\th_bit[i] = h_bit[i >> 1] + 1;\n\tfor(int i = 1; i <= n; ++i) if(i == top[i]) {\n\t\tfor(int x = i, y = i; top[x] == i; x = hvy[x], y = fa[y][0]) {\n\t\t\tlower[i].push_back(x);\n\t\t\tupper[i].push_back(y);\n\t\t}\n\t}\n}\nint FindAnc(int x, int k) {\n\tif(!k) return x;\n\tint t = top[fa[x][h_bit[k]]];\n\tk -= dep[x] - dep[t];\n\tint ret;\n\tif(k > 0) ret = upper[t][k];\n\telse ret = lower[t][-k];\n\treturn ret;\n}\n\nstruct Mod {\n\tint v; ll d;\n} M[kN];\nint cnt = 0;\nll t[kN], A[kN], dt[kN];\nvoid Push() {\n\tcnt = 0;\n\tfor(int u = 1; u <= n; ++u) if(t[u]) {\n\t\tll d = t[u];\n\t\tfor(auto v : E[u]) if(v != fa[u][0]) {\n\t\t\tdt[dfn[v]] = (dt[dfn[v]] + (n - siz[v]) * d) % kMod;\n\t\t\tdt[dfn[v] + siz[v]] = (dt[dfn[v] + siz[v]] - (n - siz[v]) * d) % kMod;\n\t\t}\n\t\tdt[1] = (dt[1] + siz[u] * d) % kMod;\n\t\tdt[dfn[u]] = (dt[dfn[u]] - siz[u] * d + n * d) % kMod;\n\t\tdt[dfn[u] + 1] = (dt[dfn[u] + 1] - n * d) % kMod;\n\t\tdt[dfn[u] + siz[u]] = (dt[dfn[u] + siz[u]] + siz[u] * d) % kMod;\n\t}\n\tfor(int i = 1; i <= n; ++i)\n\t\tdt[i] = ((dt[i - 1] + dt[i]) % kMod + kMod) % kMod;\n\tfor(int u = 1; u <= n; ++u)\n\t\tA[u] = (A[u] + dt[dfn[u]]) % kMod;\n\tmemset(t, 0, sizeof(t));\n\tmemset(dt, 0, sizeof(dt));\n}\nvoid Modify(int v, ll d) {\n\tt[v] = (t[v] + d) % kMod; \n\tM[++cnt] = (Mod) { v, d };\n}\nll Query(int v) {\n\tll ret = A[v];\n\tfor(int i = 1; i <= cnt; ++i) {\n\t\tint u = M[i].v; ll d = M[i].d;\n\t\tif(u == v) ret = (ret + n * d) % kMod;\n\t\telse if(dep[u] >= dep[v]) ret = (ret + siz[u] * d) % kMod;\n\t\telse {\n\t\t\tint x = FindAnc(v, dep[v] - dep[u] - 1);\n\t\t\tif(fa[x][0] != u) ret = (ret + siz[u] * d) % kMod;\n\t\t\telse ret = (ret + (n - siz[x]) * d) % kMod;\n\t\t}\n\t}\n\treturn ret;\n}\n\nint main() { \n\tll n_inv; int B;\n\trd(n, q); n_inv = QPow(n, kMod - 2);\n\tB = sqrt(n);\n\tfor(int i = 1; i < n; ++i) {\n\t\tint u, v; rd(u, v);\n\t\tAdd(u, v);\n\t}\n\tInit();\n\tfor(int i = 1; i <= q; ++i)  {\n\t\tint opt, v; rd(opt, v);\n\t\tif(i / B != (i - 1) / B) Push();\n\t\tif(opt == 1) {\n\t\t\tll d; rd(d);\n\t\t\tModify(v, d * n_inv % kMod);\n\t\t} else printf(\"%lld\\n\", Query(v));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1605152464,
        "uid": 34238,
        "name": "zhylj",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1254D \u3010Tree Queries\u3011"
    }
]