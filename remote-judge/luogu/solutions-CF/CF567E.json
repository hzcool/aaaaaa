[
    {
        "content": "~~\u4f60\u662f\u5426 Wrong answer on test 104\uff1f~~\n\n\u95ee\u4e00\u6761\u8fb9\u662f\u5426\u4e00\u5b9a\u4f1a\u88ab\u7ecf\u8fc7\uff0c\u8fd9\u975e\u5e38\u7b80\u5355\uff1a\n\n\u53ea\u9700\u8981**\u6b63\u56fe\u53cd\u56fe\u7edf\u8ba1\u4e24\u904d\u6700\u77ed\u8def\u6570\u91cf**\u3002\n\n\u8bb0 $s\\rightarrow i$ \u7684\u6700\u77ed\u8def\u6570\u91cf\u4e3a $d_i$\n\n\u8bb0 $i\\rightarrow t$ \u7684\u6700\u77ed\u8def\u6570\u91cf\u4e3a $d_i'$\n\n\u5982\u679c\u6709\u4e00\u6761\u8fb9 $u\\rightarrow v$ \u5fc5\u987b\u88ab\u7ecf\u8fc7\uff0c\u90a3\u4e48\u5fc5\u7136\u6ee1\u8db3 $d_u\\times d_v'=d_t$\u3002\n\n\u56e0\u4e3a\u663e\u7136\u6700\u77ed\u8def\u6570\u53ef\u4ee5\u975e\u5e38\u591a\uff0c\u5fc5\u987b\u8981\u53d6\u6a21\u3002\n\n\u663e\u7136 cf \u6570\u636e\u975e\u5e38\u6bd2\u7624\uff0c\u5fc5\u987b\u8981\u53cc\u6a21\u6570\u3002\n\n\u7136\u540e\u6ce8\u610f\u8fb9\u6743\u4e0d\u80fd\u51cf\u6210\u8d1f\u7684\uff0c\u5927\u529b\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\u3002\n\n~~\u597d\u50cf\u6a21\u6570\u7a0d\u5fae\u9488\u5bf9\u4e86\u4e00\u4e0b $1e9+7$~~\n\n\u6211\u7528\u7684\u662f \n\n```cpp\n#define mod (998244353)\n#define mod2 (192608173)\n```\n\n### \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <ctime>\n#include <cstdlib>\n#include <queue>\n\n#define rg register\n#define il inline\n#define MX (100000 + 33)\n#define LL long long\n#define mod (998244353)\n#define mod2 (192608173)\n\nint read(){\n\tchar k = getchar(); int x = 0;\n\twhile(k < '0' || k > '9') k = getchar();\n\twhile(k >= '0' && k <= '9')\n\t\tx = x * 10 + k - '0' ,k = getchar();\n\treturn x;\n}\n\nint pos[MX] ,neg[MX] ,tot;\nstruct edge{\n\tint fr ,node ,next ,w;\n}h[MX << 1];\nvoid addedge(int u ,int v ,int w ,int *head){\n\th[++tot].next = head[u] ,head[u] = tot;\n\th[tot].fr = u ,h[tot].node = v,h[tot].w = w;\n}\n\nstruct node{\n\tint d; LL dis;\n\tbool operator <(const node& b)const{\n\t\treturn dis > b.dis;\n\t}\n};\nLL distoT[MX] ,disfrS[MX] ,cnttoT[MX] ,cnt1[MX] ,cnt2[MX] ,cntfrS[MX];\nint s ,t ,n ,m ,vis[MX];\nvoid dijkstra(int ST ,int *head ,LL *dist ,LL *cnt ,LL *CNT){\n\tfor(int i = 1 ; i <= n ; ++i) dist[i] = 1LL << 50;\n\tdist[ST] = 0 ,cnt[ST] = 1 ,memset(vis ,0 ,sizeof vis);\n\tstd::priority_queue<node> q; q.push((node){ST ,0});\n\twhile(!q.empty()){\n\t\tnode tmp = q.top(); int x = tmp.d; q.pop();\n\t\tif(tmp.dis != dist[x] || vis[x]) continue;\n\t\tvis[x] = true;\n\t\tfor(int i = head[x] ,d ; i ; i = h[i].next){\n\t\t\td = h[i].node;\n\t\t\tif(dist[x] + h[i].w == dist[d]){\n\t\t\t\t(cnt[d] += cnt[x]) %= mod;\n\t\t\t\t(CNT[d] += CNT[x]) %= mod2;\n\t\t\t}\n\t\t\tif(dist[x] + h[i].w < dist[d]){\n\t\t\t\tdist[d] = dist[x] + h[i].w ,cnt[d] = cnt[x];\n\t\t\t\tCNT[d] = CNT[x];\n\t\t\t\tif(!vis[d]) q.push((node){d ,dist[d]});\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tn = read() ,m = read() ,s = read() ,t = read();\n\tfor(int i = 1 ,u ,v ,w ; i <= m ; ++i){\n\t\tu = read() ,v = read() ,w = read();\n\t\taddedge(u ,v ,w ,pos) ,addedge(v ,u ,w ,neg);\n\t}\n\tdijkstra(s ,pos ,disfrS ,cntfrS ,cnt1);\n\tdijkstra(t ,neg ,distoT ,cnttoT ,cnt2);\n\tfor(int i = 1 ,u ,v ,w ; i <= m * 2 ; i += 2){\n\t\tu = h[i].fr ,v = h[i].node ,w = h[i].w;\n\t\tif(disfrS[u] + distoT[v] >= (1LL << 50))\tputs(\"NO\");\n\t\telse if(disfrS[u] + w + distoT[v] == disfrS[t]){\n\t\t\tif(cntfrS[t] == cntfrS[u] * cnttoT[v] % mod &&\n\t\t\tcnt1[t] == cnt1[u] * cnt2[v] % mod2)\tputs(\"YES\");\n\t\t\telse{\n\t\t\t\tif(w == 1) puts(\"NO\");\n\t\t\t\telse puts(\"CAN 1\");\n\t\t\t}\n\t\t}else{\n\t\t\tLL del = disfrS[u] + w + distoT[v] - disfrS[t] + 1;\n\t\t\tif(del >= w) puts(\"NO\");\n\t\t\telse printf(\"CAN %lld\\n\" ,del);\n\t\t}\n\t}return 0;\n}\n```",
        "postTime": 1582172916,
        "uid": 47863,
        "name": "Imakf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF567E \u3010President and Roads\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[$luogu$](https://www.luogu.org/problem/CF567E).\n# \u9898\u89e3\n## \u601d\u8def\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u660e\u663e, \u6211\u4eec\u53ef\u4ee5\u4ece\u6b63\u5411\u56fe\u4e0a\u4ece$s$\u8dd1\u6700\u77ed\u8def, \u5728\u53cd\u5411\u56fe\u4e0a\u4ece$t$\u8dd1\u6700\u77ed\u8def, \u8fd9\u6837\u5c31\u80fd\u8003\u5bdf\u6bcf\u6761\u8fb9\u662f\u5426\u5728\u6700\u77ed\u8def\u4e0a.  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u95ee\u9898\u662f, \u5982\u4f55\u5224\u65ad\u67d0\u6761\u8fb9\u7684\u552f\u4e00\u6027?\n## \u8fb9\u7684\u552f\u4e00\u6027\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6392\u5f00\u8fd0\u7528\u4e58\u6cd5\u539f\u7406\u53d6\u6a21\u8ba1\u7b97\u7684\u65b9\u6cd5, \u6211\u4eec\u8003\u8651\u4e00\u79cd$100\\%AC$\u7684\u7b97\u6cd5.  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5b9e\u9645\u4e0a, \u7531\"\u552f\u4e00\u7684\u8fb9\", \u6211\u4eec\u5e94\u8be5\u81ea\u7136\u7684\u8054\u60f3\u5230\u65e0\u5411\u56fe\u4e2d$Tarjan$\u6c42\u6865\u7684\u65b9\u6cd5. \u672c\u9898, \u6211\u4eec\u628a\u6240\u6709\u53ef\u80fd\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u8f6c\u4e3a\u65e0\u5411\u8fb9, \u8fde\u540c\u6240\u6709\u7ed3\u70b9\u5efa\u51fa\u4e00\u4e2a\u65b0\u7684\u65e0\u5411\u56fe, \u8fd9\u4e2a\u56fe\u4e0a\u7684\u6865\u5176\u5b9e\u5c31\u662f\u539f\u56fe\u4e0a\"\u552f\u4e00\u7684\u8fb9\".  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e8e\u662f, \u6211\u4eec\u53ef\u4ee5\u8f7b\u6613\u5730\u533a\u5206\u51fa\"Yes\"\u4e0e\u5176\u5b83\u60c5\u51b5, \u5269\u4e0b\u7684\u5c31\u4ea4\u7ed9\u4f60\u5566!\n## \u4ee3\u7801\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( \u539f\u8c05\u6211\u65e0\u5948WA\u7a7f\u4e4b\u4f59\"define int long long\". )\n```cpp\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <utility>\n\n#define Int register int\n#define int long long\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<LL, int> pli;\n\nconst int MAXN = 1e6, MAXM = 1e6;\nint n, m, s, t, Cnte, ReCnte, SCnte = 1, Head[MAXN + 5] = {}, ReHead[MAXN + 5] = {}, SHead[MAXN + 5] = {};\nint Indx, DFN[MAXN + 5] = {}, Low[MAXN + 5] = {}, Ans[MAXM + 5] = {};\nLL Dist[MAXN + 5] = {}, ReDist[MAXN + 5] = {};\nbool Vis[MAXN + 5] = {}, Unique[MAXN + 5] = {};\npriority_queue<pli, vector<pli>, greater<pli> > Q;\n\nstruct Edge { int To, Cost, _nxt; } Graph[MAXM + 5] = {}, ReGraph[MAXM + 5] = {}, SGraph[MAXM * 2 + 5] = {};\n\ninline void Link ( const int From, const int To, const int Cost ) {\n\tGraph[++ Cnte] = { To, Cost, Head[From] };\n\tHead[From] = Cnte;\n}\n\ninline void ReLink ( const int From, const int To, const int Cost ) {\n\tReGraph[++ ReCnte] = { To, Cost, ReHead[From] };\n\tReHead[From] = ReCnte;\n}\n\ninline void SLink ( const int From, const int To, const int edid ) {\n\tSGraph[++ SCnte] = { To, edid, SHead[From] };\n\tSHead[From] = SCnte;\n}\n\ninline int Min ( const int a, const int b ) { return a < b ? a : b; }\n\ninline void Dijkstra ( int* Head, Edge* Graph, LL* Dist, const int s ) {\n\tmemset ( Vis, false, sizeof Vis );\n\tfor ( Int i = 1; i <= n; ++ i ) Dist[i] = 0x3f3f3f3f3f3f3f3f;\n\tDist[s] = 0, Q.push ( { 0, s } );\n\twhile ( ! Q.empty () ) {\n\t\tpli p = Q.top (); Q.pop ();\n\t\tif ( Vis[p.second] ) continue;\n\t\tVis[p.second] = true;\n\t\tfor ( Int i = Head[p.second], v, w; i; i = Graph[i]._nxt ) {\n\t\t\tif ( ! Vis[v = Graph[i].To] && Dist[v] > Dist[p.second] + ( w = Graph[i].Cost ) ) {\n\t\t\t\tDist[v] = Dist[p.second] + w;\n\t\t\t\tQ.push ( { Dist[v], v } );\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline void Tarjan ( const int u, const int fae ) {\n\tDFN[u] = Low[u] = ++ Indx;\n\tfor ( Int i = SHead[u], v; i; i = SGraph[i]._nxt ) {\n\t\tif ( ! DFN[v = SGraph[i].To] ) {\n\t\t\tTarjan ( v, i );\n\t\t\tif ( Low[v] > DFN[u] ) Unique[SGraph[i].Cost] = true;\n\t\t\tLow[u] = Min ( Low[u], Low[v] );\n\t\t} else if ( DFN[u] > DFN[v] && i ^ fae ^ 1 ) {\n\t\t\tLow[u] = Min ( Low[u], DFN[v] );\n\t\t}\n\t}\n}\n\ninline void Work () {\n\tscanf ( \"%lld %lld %lld %lld\", &n, &m, &s, &t );\n\tfor ( Int i = 1, u, v, w; i <= m; ++ i ) {\n\t\tscanf ( \"%lld %lld %lld\", &u, &v, &w );\n\t\tLink ( u, v, w ), ReLink ( v, u, w );\n\t}\n\tDijkstra ( Head, Graph, Dist, s ), Dijkstra ( ReHead, ReGraph, ReDist, t );\n\tLL MinDist = Dist[t];\n//\tprintf ( \"%d %d\\n\", MinDist, ReDist[s] );\n\tfor ( Int i = 1; i <= n; ++ i ) {\n\t\tfor ( Int j = Head[i], v; j; j = Graph[j]._nxt ) {\n\t\t\tv = Graph[j].To;\n\t\t\tif ( Dist[i] + Graph[j].Cost + ReDist[v] == MinDist ) {\n\t\t\t\tSLink ( i, v, j ), SLink ( v, i, j );\n\t\t\t}\n\t\t}\n\t}\n\tfor ( Int i = 1; i <= n; ++ i ) {\n\t\tif ( ! DFN[i] ) {\n\t\t\tTarjan ( i, 0 );\n\t\t}\n\t}\n//\tfor ( Int i = 1; i <= m; ++ i ) printf ( \"%d \", Unique[i] ); puts ( \"\" );\n\tfor ( Int i = 1; i <= n; ++ i ) {\n\t\tfor ( Int j = Head[i]; j; j = Graph[j]._nxt ) {\n\t\t\tint v = Graph[j].To; LL s = Dist[i] + ReDist[v];\n\t\t\tif ( Unique[j] ) Ans[j] = 0;\n\t\t\telse {\n\t\t\t\tAns[j] = Graph[j].Cost - ( MinDist - s - 1 );\n\t\t\t\tif ( Graph[j].Cost <= Ans[j] ) Ans[j] = -1;\n\t\t\t}\n\t\t}\n\t}\n\tfor ( Int i = 1; i <= m; ++ i ) {\n\t\tif ( Unique[i] || Ans[i] <= 0 ) {\n\t\t\tputs ( ~ Ans[i] || Unique[i] ? \"YES\" : \"NO\" );\n\t\t} else {\n\t\t\tprintf ( \"CAN %lld\\n\", Ans[i] );\n\t\t}\n\t}\n}\n\nsigned main () {\n\tWork ();\n\treturn 0;\n}\n```",
        "postTime": 1572355760,
        "uid": 123807,
        "name": "Rainybunny",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF567E \u3010President and Roads\u3011"
    },
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u628a\u56fe\u6b63\u53cd\u5b58\u4e00\u904d\uff0c\u7136\u540e\u8dd1\u4e00\u4e0b\u4eces\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\uff08\u6b63\u56fe\uff09\uff0c\u4ee5\u53cat\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\uff08\u53cd\u56fe\uff09\n\n\u90a3\u4e48\u4e00\u6761\u8fb9 $(u,v,w)$ \u5728\u6700\u77ed\u8def\u4e0a\u7684\u6761\u4ef6\u5c31\u662f\uff1a\n\n$$dis_su+dis_tv=dis_st$$\n\n\u5982\u4f55\u5224\u65ad\u4e00\u5b9a\u8981\u7ecf\u8fc7\u5462\uff1f\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u628a\u6700\u77ed\u8def\u56fe\uff08\u6b63\u6743\u8fb9\u610f\u4e49\u4e0b\u662f\u4e2a $DAG$\uff09\u641e\u51fa\u6765\uff0c\u7136\u540e\u5f53\u6210\u65e0\u5411\u56fe\u8dd1\u5272\u8fb9\n\n~~\u7531\u4e8e\u6211\u4e0d\u4f1a\u6c42\u5272\u8fb9\uff0c\u6240\u4ee5~~ \u4ecb\u7ecd\u53e6\u4e00\u79cd\u505a\u6cd5\n\n\u8bbe $cnt_uv$ \u8868\u793a\u4ece $u$ \u5230 $v$ \u7684\u6700\u77ed\u8def\u6761\u6570\n\n\u4e00\u6761\u8fb9\u662f\u5fc5\u7ecf\u8fb9\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a\n\n$$cnt_su \\times cnt_tv = cnt_st$$\n\n\u7136\u800c\u6700\u77ed\u8def\u6761\u6570\u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\u4e00\u5806\u73af\u4e32\u8054\u5728\u4e00\u5757\n\n\u4e0d\u8fc7\u8fd9\u91cc\u53ea\u662f\u9700\u8981\u5224\u65ad\u662f\u5426\u76f8\u7b49\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u6a21\u67d0\u4e2a\u7d20\u6570\u610f\u4e49\u4e0b\u5224\u65ad\u76f8\u7b49\u5c31\u884c\u4e86\n\n\u5982\u679c\u89c9\u5f97\u4e0d\u4fdd\u9669\uff0c\u53ef\u4ee5\u591a\u6765\u51e0\u4e2a\u7d20\u6570\u4e00\u5757\u5224\u65ad\n\n``` cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nconst int N = 1e5 + 10;\n\nint head[N], rest[N * 2], to[N * 2], w[N * 2];\n\nvoid add(int u, int v, int w) {\n    static int tot = 0;\n    to[++ tot] = v, :: w[tot] = w, rest[tot] = head[u], head[u] = tot;\n} \n\nint _head[N], _rest[N * 2], _to[N * 2], _w[N * 2];\nvoid _add(int u, int v, int w) {\n    static int tot = 0;\n    _to[++ tot] = v, _w[tot] = w, _rest[tot] =  _head[u], _head[u] = tot;\n}\n\nstruct E {\n    int u, v, w;\n} e[N];\n\nint n, m, ans[N], s, t;\n\nll dis[2][N], cnt[2][2][N];\nconst ll mod[2] = { (ll) (1e9 + 7), 998244853 };\n\nint vis[N];\nstruct T {\n    int u; ll w;\n};\nbool operator < (T a, T b) {\n    return a.w > b.w;\n}\nconst ll inf = 0x3f3f3f3f3f3f3f3fll;\nvoid dij(ll *dis, ll cnt[2][N], int s, int t, int *head, int *rest, int *to, int *w) {\n    for(int i = 1 ; i <= n ; ++ i) vis[i] = 0, dis[i] = inf;\n    priority_queue<T> pq;\n    pq.push((T) { s, dis[s] = 0 });\n    cnt[0][s] = 1;\n    cnt[1][s] = 1;\n    while(pq.size()) {\n        int u = pq.top().u; pq.pop();\n        if(vis[u]) continue; vis[u] = 1;\n        for(int i = head[u] ; i ; i = rest[i]) {\n            int v = to[i], wi = w[i];\n            if(dis[v] > dis[u] + wi) {\n                dis[v] = dis[u] + wi;\n                cnt[0][v] = cnt[0][u];\n                cnt[1][v] = cnt[1][u];\n                pq.push((T) { v, dis[v] });\n            } else if(dis[v] == dis[u] + wi) {\n                cnt[0][v] = (cnt[0][v] + cnt[0][u]) % mod[0];\n                cnt[1][v] = (cnt[1][v] + cnt[1][u]) % mod[1];\n            }\n        }\n    }\n}\n\nint main() {\n//    freopen(\"data.in\", \"r\", stdin);\n    \n    ios :: sync_with_stdio(0);\n    cin >> n >> m >> s >> t;\n    for(int i = 1 ; i <= m ; ++ i) {\n        int u, v, w; cin >> u >> v >> w;\n        add(u, v, w);\n        _add(v, u, w);\n        e[i] = (E) { u, v, w };\n    }\n    dij(dis[0], cnt[0], s, t, head, rest, to, w);\n    dij(dis[1], cnt[1], t, s, _head, _rest, _to, _w);\n    \n//    for(int i = 1 ; i <= n ; ++ i) cout << dis[0][i] << ' '; cout << endl;\n//    for(int i = 1 ; i <= n ; ++ i) cout << dis[1][i] << ' '; cout << endl;\n//    for(int i = 1 ; i <= n ; ++ i) cout << cnt[0][0][i] << ' '; cout << endl;\n//    for(int i = 1 ; i <= n ; ++ i) cout << cnt[1][0][i] << ' '; cout << endl;\n//    for(int i = 1 ; i <= n ; ++ i) cout << cnt[0][1][i] << ' '; cout << endl;\n//    for(int i = 1 ; i <= n ; ++ i) cout << cnt[1][1][i] << ' '; cout << endl;\n    \n    for(int i = 1 ; i <= m ; ++ i) {\n        int u = e[i].u, v = e[i].v, w = e[i].w;\n//        cout << u << ' ' << v << ' ' << w << ' ' << (dis[0][u] + w + dis[1][v] == dis[0][t])\n//        << ((cnt[0][0][u] * cnt[1][0][v]) % mod[0] == cnt[0][0][t])\n//        << ((cnt[0][1][u] * cnt[1][1][v]) % mod[1] == cnt[0][1][t]) << endl; \n        if(dis[0][u] + w + dis[1][v] == dis[0][t]\n        && (cnt[0][0][u] * cnt[1][0][v]) % mod[0] == cnt[0][0][t]\n        && (cnt[0][1][u] * cnt[1][1][v]) % mod[1] == cnt[0][1][t]) {\n           cout << \"YES\" << endl; \n        } else {\n            ll del = dis[0][t] - dis[0][u] - dis[1][v];\n            if(del <= 1) cout << \"NO\" << endl;\n            else cout << \"CAN \" << w - del + 1 << endl; \n        }\n    }\n}\n```",
        "postTime": 1545442982,
        "uid": 47111,
        "name": "nekko",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF567E \u3010President and Roads\u3011"
    },
    {
        "content": "# \u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5224\u5b9a\n\n### \u53ef\u80fd\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\n\n\u5206\u522b\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u4ee5\u53ca\u4ece\u7ec8\u70b9\u5230\u8d77\u70b9\u4e24\u8fb9\u505adijkstra\u7b97\u6cd5\uff0c\u901a\u8fc7\u5224\u65ad\u8fd9\u6761\u8fb9\u7684\u677e\u5f1b\u7ed3\u679c\u662f\u5426\u53d1\u751f\u6539\u53d8\u5c31\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u8fb9\u6743\u503c\u4e3aw\u7684\u6709\u5411\u8fb9e=(u,v)\uff0c\u5982\u679c\u6700\u540e\u7ed3\u679c\u4e2ddis[u]+w=dis[v]\u6210\u7acb\uff0c\u8bf4\u660e\u4e0d\u5b58\u5728\u4e00\u6761\u8fb9\uff08\u6216\u8005\u8def\u5f84\uff09\u5bf9\u8fd9\u4e24\u4e2a\u7aef\u70b9\u7684\u677e\u5f1b\u5177\u6709\u66f4\u597d\u7684\u7ed3\u679c\u7684\uff0c\u4e5f\u5373\u4eceu\u5230v\u7684\u6700\u77ed\u8def\u5f84\u53ef\u80fd\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u3002\u4f46\u662f\u4ec5\u4ec5\u8fd9\u6761\u7ed3\u8bba\u79bb\u6211\u4eec\u7684\u8981\u6c42\u8fd8\u662f\u4e0d\u591f\u7684\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4fdd\u8bc1\u5b58\u5728\u7ecf\u8fc7\u70b9u\u7684\u6700\u77ed\u4ee5\u53ca\u70b9v\u7684\u6700\u77ed\u8def\uff0c\u8fd9\u80fd\u624d\u80fd\u4fdd\u8bc1\u70b9u\u4ee5\u53ca\u70b9v\u53ef\u80fd\u51fa\u73b0\u5728\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u5728\u8fd9\u4e2a\u6761\u4ef6\u7684\u57fa\u7840\u4e0a\uff0c\u7ed3\u5408\u4e0a\u4e00\u6761\u5224\u65ad\u4fbf\u53ef\u4ee5\u5f97\u5230\u6211\u4eec\u7684\u8981\u6c42\u3002\n\n```cpp\nif (dis[0][x] + w == dis[0][y] && dis[0][x] + dis[1][x] == dis[0][t] && dis[0][y] + dis[1][y] == dis[0][t])\n```\n\n\u5176\u4e2ddis[0]\u8868\u793a\u5bf9\u4eces\u5230t\u505adij\u7684\u7ed3\u679c\uff0cdis[1]\u8868\u793a\u4ecet\u5230s\u505adij\u7684\u7ed3\u679c\u3002\n\n```cpp\nif (dis[0][x] + w + dis[1][y] == dis[0][t])\n```\n\n\u5bb9\u6613\u8bc1\u660e\u8fd9\u4e24\u4e2a\u5224\u65ad\u662f\u7b49\u4ef7\u7684\u3002\n\n\u53e6\u5916\u6ce8\u610f\u8fd9\u91cc\u5199dij\u7684\u65f6\u5019\uff0c\u8bbf\u95ee\u8fc7\u7684\u70b9\u4e00\u5b9a\u8981contiune\uff0c\u5426\u5219\u56de\u51fa\u73b0\u540c\u4e00\u4e2a\u70b9\u88ab\u52a0\u591a\u6b21\u7684\u60c5\u51b5\u3002\n\n\n### \u5fc5\u5b9a\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\n\n\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u6cd5\u6211\u6ca1\u6709\u60f3\u51fa\u6765\uff0c\u641c\u5230\u4e86\u4e00\u9053\u5dee\u4e0d\u591a\u7684\u9898\u76ee\u7136\u540e\u770b\u9898\u89e3\u624d\u61c2\u7684\u505a\u6cd5\u3002\n\n\u53c2\u8003\u9898\u76ee[cf_567E](https://codeforces.com/problemset/problem/567/E)\n\n- \u5229\u7528\u4e58\u6cd5\u539f\u7406\n\n    \u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u4ece\u8d77\u70b9s\u5230u\u7684\u8def\u5f84\u6570\u91cf$d_1$\u548c\u4ece\u7ec8\u70b9t\u5230v\u7684\u8def\u5f84\u6570\u91cf$d_2$\uff0c\u5982\u679c\u8981\u6ee1\u8db3\u662f\u5fc5\u8981\u8fb9\u7684\u6761\u4ef6\uff0c\u90a3\u4e48\u5fc5\u7136\u6709\u4ece\u8d77\u70b9s\u5230\u7ec8\u70b9t\u7684\u8def\u5f84\u6570\u91cf$d_3=d_1\\times d_2$\u3002\u56e0\u4e3a\u6570\u636e\u6bd4\u8f83\u5927\uff0c\u9700\u8981\u7ef4\u62a4\u53d6\u6a21\u3002\n\n- \u4f7f\u7528\u5272\u8fb9\n\n    \u5c06\u53ef\u80fd\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5b58\u8d77\u6765\u5e76\u5efa\u7acb\u53cc\u5411\u8fb9\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u82e5\u67d0\u6761\u8fb9\u4e00\u5b9a\u662f\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u8bf4\u660e\u9700\u8981\u4e00\u5b9a\u901a\u8fc7\u8fd9\u6761\u8fb9\u5230\u8fbe\u7ec8\u70b9\uff0c\u8bf4\u660e\u8fd9\u662f\u4e00\u6761\u5272\u8fb9\u3002\u4e0d\u8fc7\u6ce8\u610f\u56e0\u4e3a\u52a0\u5165\u7684\u662f\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5\u6700\u540e\u7ed3\u679c\u53ef\u80fd\u5b58\u7684\u5fc5\u8981\u8fb9\u7684\u53cd\u5411\u8fb9\u3002",
        "postTime": 1594975661,
        "uid": 209614,
        "name": "xiaowang656",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF567E \u3010President and Roads\u3011"
    },
    {
        "content": "\u5efa\u8bae\u5148\u505a\u8fd9\u4e24\u9053\u9898\uff1a\n\n[P1629 \u90ae\u9012\u5458\u9001\u4fe1](https://www.luogu.com.cn/problem/P1629)\n\n[P1608 \u8def\u5f84\u7edf\u8ba1](https://www.luogu.com.cn/problem/P1608)\n\n------------\n\n\u6211\u4eec\u91cd\u70b9\u8ba8\u8bba\u8f93\u51fa ```YES``` \u7684\u60c5\u51b5\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u8d70\u6700\u77ed\u8def\u65f6\uff0c\u67d0\u6761\u8fb9 $e$ \u4e00\u5b9a\u88ab\u7ecf\u8fc7\uff0c\u90a3\u4e48\uff0c\u8fd9\u610f\u5473\u7740\u6240\u6709\u7684\u6700\u77ed\u8def\u5f84\u90fd\u4f1a\u7ecf\u8fc7 $e$\u3002\u66f4\u5f62\u5f0f\u5316\u5730\u8bf4\uff0c$e$ \u5c5e\u4e8e\u6240\u6709\u4ece $s$ \u5230 $t$ \u7684\u6700\u77ed\u8def\u5f84\u7684\u4ea4\u96c6\u3002\n\n\u6211\u4eec\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e00\u6761\u8fb9 $e$ \u662f\u5426\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u505a\u6cd5\uff1a\n\n\u5728\u539f\u56fe\u4e2d\uff0c\u4ee5 $s$ \u4e3a\u8d77\u70b9\u8dd1\u4e00\u904d $Dijkstra$\uff0c\u6c42\u51fa $s$ \u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u548c\u6700\u77ed\u8def\u5f84\u6570\u91cf\uff0c\u8bb0\u4e3a $dis [0] [u]$ \u548c $cnt [0] [u]$\uff1b\u5728\u539f\u56fe\u7684\u53cd\u56fe\u4e2d\uff0c\u4ee5 $t$ \u4e3a\u8d77\u70b9\u8dd1\u4e00\u904d $Dijkstra$\uff0c\u6c42\u51fa $t$ \u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u548c\u6700\u77ed\u8def\u5f84\u6570\u91cf\uff08\u5176\u5b9e\u8fd9\u7b49\u4ef7\u4e8e\u5728\u539f\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u5230 $t$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\u548c\u6700\u77ed\u8def\u5f84\u6570\u91cf\uff09\uff0c\u8bb0\u4e3a $dis [1] [u]$ \u548c $cnt [1] [u]$\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u6761\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u8fb9 $e$\uff08\u4ece $u$ \u5230 $v$ \u4e14\u6743\u503c\u4e3a $w$)\uff0c\u5176\u5fc5\u7136\u6ee1\u8db3\u4e0b\u5217\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n- $dis[0][u]+w+dis[1][v]=dis[0][t]$\n\n- $cnt[0][u]\\times cnt[1][v]=cnt[0][t]$\n\n\u89e3\u91ca\u4e00\u4e0b\uff0c\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u8868\u793a $e$ \u5728\u4e00\u6761\u6700\u77ed\u8def\u5f84\u4e0a\uff1b\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u8fd0\u7528\u4e58\u6cd5\u539f\u7406\uff0c\u8868\u793a\u7ecf\u8fc7 $e$ \u7684\u6700\u77ed\u8def\u5f84\u6570\u91cf\u7b49\u4e8e\u6240\u6709\u4ece $s$ \u5230 $t$ \u7684\u6700\u77ed\u8def\u5f84\u6570\u91cf\uff0c\u90a3\u4e48\u4e5f\u5c31\u8868\u660e\u6240\u6709\u4ece $s$ \u5230 $t$ \u7684\u6700\u77ed\u8def\u5f84\u90fd\u4f1a\u7ecf\u8fc7 $e$\u3002\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u8f93\u51fa ```YES``` \u5373\u53ef\u3002\n\n\u81f3\u4e8e\u5269\u4e0b\u7684\u60c5\u51b5\uff0c\u672c\u8d28\u90fd\u4e00\u6837\uff0c\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u7565\u8fc7\u4e86\u3002\n\n\u4ee3\u7801\u4e2d\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u672c\u9898\u6570\u636e\u975e\u5e38\u6bd2\u7624\uff0c\u4e0a\u8ff0\u7684 $dis$ \u6570\u7ec4\u4f1a\u7206 ```int```\uff0c\u800c $cnt$ \u6570\u7ec4\u751a\u81f3\u4f1a\u7206 ```long long```\u3002\u5e94\u5bf9\u524d\u8005\u5f00 ```long long``` \u5373\u53ef\uff1b\u81f3\u4e8e\u540e\u8005\uff0c\u6211\u4eec\u9700\u8981\u5bf9 $cnt$ \u6570\u7ec4\u53d6\u6a21\uff0c\u8fd9\u91cc\u9009\u53d6\u7684\u6a21\u6570\u662f $1145141$ \uff0c\u5982\u679c\u5b9e\u5728\u4e0d\u653e\u5fc3\u7684\u8bdd\u53ef\u4ee5\u9009\u62e9\u53cc\u6a21\u6570\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define PII pair <int, int>\nusing namespace std;\nconstexpr int mod = 1145141;\nconstexpr int N = 1e5, MAX_N = N + 3;\nconstexpr int M = 1e5, MAX_M = M + 3;\nint n, m;\nvector <PII> E [2] [MAX_N];\nint dis [2] [MAX_N], cnt [2] [MAX_N];\nbool vis [MAX_N];\nvoid Dijkstra (int s, bool d) {\n\tstatic priority_queue <PII, vector <PII>, greater <PII>> Q;\n\tmemset (vis, 0, sizeof vis);\n\tmemset (dis [d], 0x3f, sizeof dis [d]);\n\tcnt [d] [s] = 1;\n\tQ.push ({dis [d] [s] = 0, s});\n\twhile (!Q.empty ()) {\n\t\tint u = Q.top ().second; Q.pop ();\n\t\tif (vis [u]) continue;\n\t\tvis [u] = 1;\n\t\tfor (PII i : E [d] [u]) {\n\t\t\tint v = i.first;\n\t\t\tint w = i.second;\n\t\t\tif (dis [d] [u] + w < dis [d] [v]) {\n\t\t\t\tcnt [d] [v] = cnt [d] [u];\n\t\t\t\tQ.push ({dis [d] [v] = dis [d] [u] + w, v});\n\t\t\t}\n\t\t\telse if (dis [d] [u] + w == dis [d] [v])\n\t\t\t\t(cnt [d] [v] += cnt [d] [u]) %= mod;\n\t\t}\n\t}\n}\nint s, t;\nstruct edge {int u, v, w;} a [MAX_M];\nsigned main () {\n\tios::sync_with_stdio (false);\n\tcin.tie (nullptr);\n\tcout.tie (nullptr);\n\tcin >> n >> m >> s >> t;\n\tfor (int i = 1; i <= m; ++i) {\n\t\tstatic int u, v, w;\n\t\tcin >> u >> v >> w;\n\t\ta [i] = {u, v, w};\n\t\tE [0] [u].push_back ({v, w});\n\t\tE [1] [v].push_back ({u, w});\n\t}\n\tDijkstra (s, 0);\n\tDijkstra (t, 1);\n\tfor (int i = 1; i <= m; ++i) {\n\t\tstatic int u, v, w, tmp, d;\n\t\tu = a [i].u; v = a [i].v; w = a [i].w;\n\t\td = dis [0] [u] + w + dis [1] [v];\n\t\tif (d == dis [0] [t]) {\n\t\t\tif (cnt [0] [u] * cnt [1] [v] % mod == cnt [0] [t]) {\n\t\t\t\tcout << \"YES\\n\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\ttmp = d - dis [0] [t] + 1;\n\t\tif (w - tmp > 0) cout << \"CAN \" << tmp << '\\n';\n\t\telse cout << \"NO\\n\";\n\t}\n}\n```",
        "postTime": 1666696527,
        "uid": 500194,
        "name": "George_Je",
        "ccfLevel": 0,
        "title": "President and Roads"
    },
    {
        "content": "# \u9898\u76ee\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF567E)\n\n# \u9898\u89e3\n\n\u5bf9\u4e8e `NO` \u548c `CAN` \u7684\u60c5\u51b5\u6211\u4eec\u5176\u5b9e\u5f88\u597d\u5224\u65ad\uff0c\u53ea\u9700\u8981\u5728\u6b63\u5411\u3001\u9006\u5411\u8dd1\u4e00\u8fb9 `dijkstra` \u5f97\u5230\u4ece $s,t$ \u5230\u67d0\u8fb9\u4e24\u70b9\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u8fdb\u884c\u5224\u65ad\u5373\u53ef\u3002\n\n\u6700\u96be\u7684\u60c5\u51b5\u5176\u5b9e\u662f `YES` \u7684\u60c5\u51b5\uff0c\u6211\u4eec\u60f3\u4e00\u60f3\u8fd9\u79cd\u60c5\u51b5\u51fa\u73b0\u7684\u60c5\u666f\u2014\u2014\u5728\u6240\u6709\u7684\u6700\u77ed\u8def\u4e2d\uff0c\u8fd9\u6761\u8fb9\u6ca1\u6709\u53ef\u4ee5\u66ff\u4ee3\u7684\u8fb9\uff0c\u5373\u6ca1\u6709\u5176\u4ed6\u76f8\u540c\u957f\u5ea6\u7684\u8def\u5f84\u6709\u548c\u4ed6\u540c\u6837\u7684\u6548\u679c\uff0c\u79f0\u8fd9\u79cd\u6027\u8d28\u4e3a\u201c\u4e0d\u53ef\u66ff\u4ee3\u6027\u201d\u3002\n\n\u53d1\u73b0\u8fd9\u79cd\u201c\u4e0d\u53ef\u66ff\u4ee3\u6027\u201d\u548c\u6865\u76f8\u4f3c\uff0c\u5373\u65e0\u8bba\u5982\u4f55\u4e5f\u8981\u8d70\u8fc7\u8fd9\u6761\u8fb9\uff0c\u624d\u80fd\u6709\u6700\u77ed\u8def\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u628a\u6240\u6709\u6709\u53ef\u80fd\u662f\u6700\u77ed\u8def\u7684\u8fb9\u5efa\u6210\u4e00\u4e2a\u65b0\u56fe\uff0c\u5728\u56fe\u4e0a\u8dd1 $tarjan$ \u627e\u6865\uff0c\u627e\u5230\u7684\u6865\u5373\u4e3a\u5fc5\u8d70\u8fb9\uff0c\u8f93\u51fa `YES`\u3002\n\n\u5269\u4e0b\u4e24\u79cd\u60c5\u51b5\u8fc7\u4e8e\u7b80\u5355\uff0c\u4e0d\u4f5c\u8fc7\u591a\u8d58\u8ff0\u3002\n\n\u8bdd\u8bf4 CF \u6570\u636e\u662f\u771f\u7684\u5f3a\uff0c`dijkstra` \u628a `<` \u6253\u6210 `<=` \u88ab\u5361\uff0c$SPFA$ \u4e5f\u88ab\u5361\u4e86 ~~\u5173\u4e8eSPFA\uff0c\u5b83\u5df2\u7ecf\u6b7b\u4e86~~\n\n# \u4ee3\u7801\n\n```cpp\nhttps://www.cnblogs.com/Arextre/p/13541598.html\n```\n\n",
        "postTime": 1597997383,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF567E \u3010President and Roads\u3011"
    }
]