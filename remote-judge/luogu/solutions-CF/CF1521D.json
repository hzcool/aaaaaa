[
    {
        "content": "[link](http://codeforces.com/contest/1521/problem/D)\n\n### \u9898\u76ee\u5927\u610f\uff1a\n\n- \u7ed9\u51fa\u4e00\u68f5 $n$ \u8282\u70b9\u7684\u6811\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u62c6\u4e00\u6761\u8fb9\u5e76\u4e14\u79fb\u52a8\u5230\u89c4\u5b9a\u4f4d\u7f6e\u3002\n\n- \u6c42\u6700\u5c11\u7684\u64cd\u4f5c\u6570\u91cf\uff0c\u4f7f\u5f97\u8fd9\u68f5\u6811\u53d8\u4e3a\u4e00\u6761\u94fe\u3002\n\n- $1\\le n\\le 2\\times 10^5$\u3002\n\n### \u601d\u8def\uff1a\n\n#### \u521d\u6b65\u601d\u8def\n\n\u6700\u540e\u662f\u4e00\u6761\u94fe\uff0c\u4e0d\u96be\u60f3\u5230\uff0c\u6700\u540e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u90fd\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u3002\n\n\u5bf9\u4e8e\u591a\u4f59\u7684\u513f\u5b50\uff0c\u80af\u5b9a\u8981\u60f3\u5343\u65b9\u767e\u8ba1\u628a\u4ed6\u5e72\u6389\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qucui1to.png)\n\n\u8fd9\u91cc\u7684 10 \u53f7\u8282\u70b9\u548c 23 \u53f7\u8282\u70b9\uff0c\u540c\u6837\u5176\u548c\u5b50\u6811\u5747\u4e3a\u4e00\u6761\u94fe\uff0c\u4f46\u4ed6\u4eec\u7684\u94fe\u4e0d\u4e00\u6837\uff0c 23 \u53f7\u8282\u70b9\u7684\u94fe\u4e0d\u8de8\u8fc7 23 \u53f7\u8282\u70b9\uff0c\u4f46\u662f 10 \u53f7\u8282\u70b9\u7684\u94fe\u8981\u8de8\u8fc7 10 \u53f7\u8282\u70b9\u3002\n\n\u8fd9\u4e24\u79cd\u94fe\uff0c\u5904\u7406\u65b9\u6cd5\u4e5f\u4e0d\u4e00\u6837\u3002\u4e0d\u8de8\u8fc7\u7684\uff08\u79f0\u4e3a 1 \u53f7\u94fe\uff09\uff0c\u5176\u52a0\u4e0a\u7236\u4eb2\u8282\u70b9\u8fd8\u662f\u94fe\u3002\u8de8\u8fc7\u7684\uff08\u6210\u4e3a 2 \u53f7\u94fe\uff09\uff0c\u5176\u52a0\u4e0a\u7236\u4eb2\u8282\u70b9\u5c31\u4e0d\u662f\u94fe\u4e86\u3002\n\n#### \u94fe\u7684\u5408\u5e76\u65b9\u5f0f\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u4e0b\u9762\u53ef\u80fd\u6709\u8bb8\u591a 1 \u53f7\u94fe\u548c 2 \u53f7\u94fe\u3002\n\n\u671f\u671b\uff1a\u6709\u4e24\u4e2a\u4e00\u53f7\u94fe\uff08\u5f62\u6210 2 \u53f7\u94fe\uff09\uff0c\u6709\u4e00\u4e2a\u4e00\u53f7\u94fe\uff08\u5f62\u6210 1 \u53f7\u94fe\u3002\uff09\n\n\u5176\u4e2d\u4e8c\u53f7\u94fe\u80af\u5b9a\u662f\u8981\u6740\u5e72\u51c0\u7684\u3002\n\n\u6211\u4eec\u4e3e 17 \u53f7\u8282\u70b9\u4e3a\u4f8b\u5b50\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a 1 \u53f7\u94fe\u548c\u4e00\u4e2a 2 \u53f7\u94fe\u3002\n\n\u8fd9\u4e2a\u4e8c\u53f7\u94fe\u600e\u4e48\u6740\u5e72\u51c0\u5462\uff1f\u5176**\u672c\u8d28\u4e3a\u4e00\u6761\u94fe**\uff0c\u90a3\u4e48\u53ea\u8981\u5c06\u5176\u5168\u90e8\u62d6\u5230 13 \u90a3\u91cc\uff0c\u5c31\u5b8c\u6210\u4e86\u6740\u94fe\u3002\n\n\u4e5f\u5c31\u662f $5-8-20-10-7$ \u4f5c\u4e3a\u6574\u4f53\u62d6\u8fc7\u53bb\uff0c\u628a $10-17$ \u65ad\u5f00\uff0c\u8fd9\u6837\u5c31\u6740\u6389\u4e86\u4e00\u4e2a\u4e8c\u53f7\u94fe\u3002\u8fd9\u6837\u662f\u6700\u7b80\u5355\u7684\u6740\u4e8c\u53f7\u94fe\u7684\u65b9\u6cd5\u3002\n\n\u518d\u6bd4\u5982\u8bf4\u5230\u4e86 $15$ \u53f7\u7684\u65f6\u5019\uff0c\u4e24\u4e2a\u4e3a\u4e8c\u53f7\u94fe\uff08\u5df2\u7ecf\u5904\u7406\u597d\u4e86\uff09\uff0c\u4e00\u4e2a\u4e3a\u4e00\u53f7\u94fe\uff0c\u90a3\u4e48\u5c31\u628a\u4e24\u4e2a\u4e8c\u53f7\u94fe\u6740\u6389\uff0c\u5c06 $11-12-9$ \u548c $2-4-23-19-3$ \u62d6\u5230 $21$ \u4e0b\u9762\uff0c\u5f62\u6210\u4e00\u4e2a\u4e00\u53f7\u94fe\u3002\n\n\u5bf9\u4e8e\u4e00\u53f7\u94fe\uff0c\u5c31\u6bd4\u8f83\u5bb9\u6613\u4e86\uff0c\u76f4\u63a5\u7275\u5230\u4e00\u53f7\u94fe\u672b\u7aef\u4e0a\u3002\n\n\u6bd4\u5982\u8bf4 $19$\uff0c\u90a3\u4e48\u5c31\u628a $23-4$ \u62d6\u5230 $3$ \u540e\u9762\uff0c\u65ad\u6389 $19-23$\u3002\n\n\u6bd4\u5982\u8bf4 $14$\uff0c$18$ \u53f7\u8282\u70b9\u5904\u7406\u5b8c\u4e86\u662f\u4e00\u4e2a\u4e00\u53f7\u94fe\uff0c$16$ \u53f7\u4e5f\u662f\u4e00\u53f7\u94fe\uff0c\u76f4\u63a5\u628a $16$ \u63a5\u5230 $18$ \u8fd9\u6761\u94fe\u540e\u9762\u5373\u53ef\u3002\n\n\u8fd8\u6ca1\u61c2\u7684\u8bdd\u5c31\u62ff\u8fd9\u4e2a\u56fe\u6a21\u62df\u4e00\u4e0b\u3002\n\n#### \u94fe\u7684\u5408\u5e76\u8d2a\u5fc3\n\n\u5bf9\u4e8e\u4e24\u4e2a\u4e00\u53f7\u94fe\uff0c\u80fd\u7559\u7740\u5c31\u7559\u7740\uff0c\u6bd5\u7adf\u5347\u4e3a\u4e8c\u53f7\u94fe\u8bf4\u4e0d\u5b9a\u8fd8\u80fd\u4e00\u6b21\u5377\u8d70\uff0c\u5982\u679c\u5408\u5e76\u4e3a\u4e00\u53f7\u94fe\u7684\u8bdd\uff0c\u8fd9\u91cc\u5c31\u591a\u4e00\u4e2a\u64cd\u4f5c\uff0c\u80af\u5b9a\u4e0d\u503c\u5f97\u3002\n\n\u5982\u679c\u8981\u5408\u5e76\u7684\u5168\u90fd\u662f\u4e8c\u53f7\u94fe\uff0c\u90a3\u4e5f\u6ca1\u529e\u6cd5\uff0c\u6bd5\u7adf\u8981\u52a0\u4e0a\u7236\u4eb2\u4e3a\u94fe\uff0c\u90a3\u53ea\u80fd\u5c06\u5de6\u94fe\u548c\u53f3\u94fe\u5408\u5e76\u5728\u4e00\u8d77\u5f62\u6210\u4e00\u4e2a\u4e00\u53f7\u94fe\u3002\n\n\u4e3a\u5565\u8fd9\u6837\u5b50\u662f\u5bf9\u7684\u5462\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u4fdd\u8bc1\u4e86\u6bcf\u4e00\u4e2a\u641c\u7d22\u5230\u7684\u70b9\uff0c\u5176\u5f62\u6210\u94fe\u7684\u6b21\u6570\u6700\u5c11\u3002\n\n\u7eb5\u89c2\u5168\u5c40\uff0c\u4e8c\u53f7\u94fe\u7684\u5904\u7406\u662f**\u672c\u8d28**\u7684\u4f18\u5316\u3002\u6bcf\u4e00\u6b21\u4e8c\u53f7\u94fe\u7684\u51fa\u73b0\u90fd\u51cf\u5c11\u4e00\u6b21\u64cd\u4f5c\u6b21\u6570\u3002\uff08\u672c\u6765\u8981\u5408\u5e76\u540e\u518d\u5728 father \u5408\u5e76\uff0c\u73b0\u5728\u4e0d\u9700\u5408\u5e76\u4e4b\u4e00\u6b21\u5377\u8d70\u3002\uff09\n\n\u6709\u6ca1\u6709\u66f4\u4f18\u7684\u65b9\u6cd5\uff1f\u6ca1\u6709\u7684\uff0c\u56e0\u4e3a\u4e09\u53f7\u94fe\u4e0d\u4e3a\u94fe\uff0c\u8981\u5148\u5904\u7406\u6210\u4e3a\u4e3a\u4e8c\u53f7\u94fe\u624d\u80fd\u7ee7\u7eed\u3002\u5176\u8981\u82b1\u4e00\u7684\u4ee3\u4ef7\u5f62\u6210\u4e8c\u53f7\u94fe\u518d\u51cf\u5c11\u4e00\u7684\u4ee3\u4ef7\u3002\u800c\u5728\u54ea\u91cc\u5f62\u6210\u4e8c\u53f7\u94fe\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5176\u672c\u8eab\u79fb\u52a8\u4e00\u4e2a\u8981\u4e00\u7684\u4ee3\u4ef7\uff0c\u4e8c\u53f7\u94fe\u51cf\u5c11\u4e00\u7684\u4ee3\u4ef7\u3002**\u4f60\u4e0d\u53ef\u80fd\u79fb\u5230\u5176\u4ed6\u70b9\u786c\u751f\u751f\u628a\u4e00\u53f7\u94fe\u53d8\u6210\u4e8c\u53f7\u94fe**\uff0c\u79fb\u52a8\u7684\u4ee3\u4ef7\u4e3a 1\uff0c\u4e8c\u53f7\u94fe\u7684\u4ee3\u4ef7\u4e3a 1\uff0c\u539f\u6765\u7684\u8bdd\u4e00\u53f7\u94fe\u4ee3\u4ef7\u4e3a 1\uff0c\u663e\u7136\u8fd9\u4e2a\u66f4\u4f18\uff0c\u6240\u4ee5\u539f\u5730\u5f62\u6210\u4e8c\u53f7\u94fe\u662f\u6700\u4f18\u9009\u62e9\u3002\n\n\u6240\u6709\u5927\u4e8e\u4e8c\u53f7\u7684\u94fe\uff0c\u5c31\u7b97\u73b0\u5728\u4e0d\u5904\u7406\u81f3\u4e8c\u53f7\u94fe\uff0c\u4e4b\u540e\u4e5f\u662f\u4e00\u6837\u7684\u5904\u7406\uff0c\u4e14\u4ee3\u4ef7\u7b49\u5927\uff0c\u6d88\u9664\u4e8c\u53f7\u94fe\u662f\u552f\u4e00\u7684\u4f18\u5316\u3002\u81f3\u4e8e\u4e00\u53f7\u94fe\uff0c\u4e00\u6b21\u628a\u4e24\u4e2a\u4e00\u53f7\u94fe\u4e32\u8d77\u6765\u4e5f\u662f\u6700\u9ad8\u6548\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u662f\u6700\u4f18\u7684\u3002\n\n#### \u4ee3\u7801\u8981\u5904\u7406\u7684\uff1a\n\n- \u4e00\u4e2a\u4e8c\u53f7\u94fe\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u4e00\u53f7\u94fe\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u3002\n\n- \uff08\u8fd9\u91cc\u7533\u660e\u4e00\u4e0b\u5b9a\u4e49\uff0c\u4e00\u4e2a\u4e8c\u53f7\u94fe\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u9700\u8981\u5de6\u53f3\u5206\u660e\uff0c\u540c\u65f6\u8bb0\u5f55\u5176\u5de6\u53f3\u513f\u5b50\uff0c\u8fd9\u6837\u5728\u4e8c\u53f7\u94fe\u5408\u5e76\u4e3a\u4e00\u53f7\u94fe\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5206\u6e05\u695a\u94fe\u7684\u5de6\u53f3\u8282\u70b9\u3002\u4e00\u53f7\u94fe\u7684\u8d77\u70b9\u4e3a\u5176\u672c\u8eab\uff0c\u7ec8\u70b9\u4e3a\u6df1\u5ea6\u6700\u5927\u7684\u70b9\u3002\uff09\n\n- \u4e00\u53f7\u8282\u70b9/\u4e8c\u53f7\u8282\u70b9\uff0c\u56fe\uff0c\u8bb0\u5f55\u7b54\u6848\u7684\u6808\uff08\u8f93\u51fa\u957f\u5ea6\uff09\n\n\u5c31\u662f\u5728\u94fe\u7684\u5408\u5e76\u65f6\u5019\uff0c\u6ce8\u610f\u4e00\u4e0b\u7ec6\u8282\uff0c\u4e0d\u8981\u641e\u9519\u5c31\u884c\u4e86\u3002\n\n### Code:\n\n\u5e72\u5e72\u51c0\u51c0\u7684 O(n)\uff0c\u867d\u7136\u65f6\u95f4\u9650\u5236\u4e3a $3s$\uff0c\u53ea\u8dd1\u4e86 $0.15s$\u3002\n\n```cpp\n\n// \u65e0\u9632\u4f5c\u5f0a\n#include<bits/stdc++.h>\n#define I inline\n#define RI register int\n#define rep(i,a,b) for(RI i=a;i<=b;++i)\n#define dow(i,a,b) for(RI i=a;i>=b;--i)\n#define edg(i,u,v) for(RI i=head[u],v;v=e[i].to,i;i=e[i].next)\nusing namespace std;\nconst int N=2e5+5;\nstruct node {\n\tint a,b,c,d;\n\tnode() {}\n\tnode(int aa,int bb,int cc,int dd) {\n\t\ta=aa,b=bb,c=cc,d=dd;\n\t}\n} a[N]; // \u8bb0\u5f55\u7b54\u6848\u7684\u6808 \nstruct edge {\n\tint to,next;\n} e[N<<1]; \nint T,n,x,y,cnt,top,mi[N],mj[N],dp[N],son[N][2],head[N<<1];\n// mi,mj : \u5206\u522b\u4e3a\u8d77\u70b9\u548c\u7ec8\u70b9\n// dp: \u8868\u793a\u8fd9\u4e2a\u70b9\u662f 1/2 \u53f7\u94fe\n// son: \u8868\u793a\u4e8c\u53f7\u94fe\u7684\u5de6\u53f3\u513f\u5b50 \nI void add(int from,int to) {\n\te[++cnt]=(edge) { to,head[from] };\n\thead[from]=cnt;\n}\nI void dfs(int u,int f) {\n\tdp[u]=1;\n\tmi[u]=mj[u]=u; // \u6bcf\u4e2a\u8282\u70b9\u4e00\u5f00\u59cb\u90fd\u4e3a\u4e00\u53f7\u94fe\uff0c\u90a3\u4e48\u5176\u8d77\u70b9\u7ec8\u70b9\u90fd\u4e3a\u5176\u672c\u8eab\u3002 \n\tRI sum=0,res=0;\n\tedg(i,u,v) if(v^f) {\n\t\tdfs(v,u); // \u5148\u5bf9\u513f\u5b50\u8fdb\u884c\u5904\u7406 \n\t\tres++; // \u8fd9\u91cc\u662f\u513f\u5b50\u4e2a\u6570 \n\t\tsum+=dp[v]==1; // \u8fd9\u91cc\u8bb0\u5f55\u4e00\u53f7\u94fe\u7684\u4e2a\u6570 \n\t}\n\tif(sum>=2) { \n\t\t// \u5982\u679c\u6709\u4e24\u4e2a\u4ee5\u4e0a\u4e00\u53f7\u94fe\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u4e00\u53f7\u94fe\u4fdd\u7559\uff0c\u5176\u4ed6\u63a5\u5230\u4ed6\u4eec\u4e24\u4e2a\u8eab\u4e0a\uff0c\u65b0\u57ce\u5f62\u6210\u4e8c\u53f7\u94fe\u3002 \n\t\tRI x=0,y=0; // \u5206\u522b\u8bb0\u5f55\u4e24\u4e2a\u4e00\u53f7\u94fe \n\t\tdp[u]=2; // \u4e8c\u53f7\u94fe \n\t\tedg(i,u,v) if(v^f&&dp[v]==1) {\n\t\t\tif(!x) x=v;\n\t\t\telse {\n\t\t\t\ty=x,x=v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tson[u][0]=x,son[u][1]=y; // \u8bb0\u5f55\u5b50\u8282\u70b9\uff08\u5176\u5b9e\u8fd9\u91cc\u662f\u5199\u53cd\u7684\uff0c\u4f46\u662f\u4e0d\u60f3\u6539\u4e86\uff0c\u4e0d\u5f71\u54cd\u7b54\u6848\uff09 \n\t\tmi[u]=mj[y],mj[u]=mj[x]; // \u76ee\u524d\u8fd9\u4e2a\u4e8c\u53f7\u94fe\u8d77\u70b9/\u7ec8\u70b9\u4e3a\u4e00\u53f7\u94fe\u7684\u7ec8\u70b9\uff08\u4e00\u53f7\u94fe\u8d77\u70b9\u4e3a\u672c\u8eab\uff09 \n\t\tedg(i,u,v) if(v^f&&v^x&&v^y) { // \u5982\u679c\u90fd\u4e0d\u662f\u8fd9\u4e09\u8005\uff0c\u90a3\u4e48\u9700\u8981\u94fe\u8f6c\u79fb\n\t\t\ta[++top]=node(v,u,mj[v],mj[u]); // \u8bb0\u5f55\u7b54\u6848 \n\t\t\tmj[u]=mi[v]; // \u63a5\u5728\u4e86 mj[u]\uff08\u7ec8\u70b9\uff09\u540e\u9762\uff0c\u90a3\u4e48\u7ec8\u70b9\u66f4\u65b0\u4e3a\u94fe\u7684\u53e6\u4e00\u5934\uff08\u662f\u53e6\u4e00\u5934\uff01\uff09 \n\t\t}\n\t} else if(sum==1) {\n\t\tRI x=0; // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u4e00\u53f7\u94fe\n\t\tedg(i,u,v) if(v^f&&dp[v]==1) x=v; \n\t\tmj[u]=mj[x]; //\u5148\u8ba4\u5b9a\u5f53\u524d\u8282\u70b9\u7ec8\u70b9\u4e3a\u8fd9\u4e2a\u4e00\u53f7\u94fe\u7684\u7ec8\u70b9 \n\t\tedg(i,u,v) if(v^f&&v^x) { // \u679c\u90fd\u4e0d\u662f\u8fd9\u4e24\u8005\uff0c\u90a3\u4e48\u9700\u8981\u94fe\u8f6c\u79fb\n\t\t\ta[++top]=node(v,u,mi[v],mj[u]); // \u8bb0\u5f55\u7b54\u6848 \n\t\t\tmj[u]=mj[v];// mi[v] \u63a5\u5728\u4e86 mj[u]\uff08\u7ec8\u70b9\uff09\u540e\u9762\uff0c\u90a3\u4e48\u7ec8\u70b9\u66f4\u65b0\u4e3a\u94fe\u7684\u53e6\u4e00\u5934 mj[v]\uff08\u662f\u53e6\u4e00\u5934\uff01\uff09 \n\t\t}\n\t} else if(res) { // \u4e5f\u8981\u770b\uff0c\u5fc5\u987b\u8981\u6709\u4e8c\u53f7\u94fe\u624d\u80fd\u5408\u5e76 \n\t\tRI x=0;\n\t\tedg(i,u,v) if(v^f) x=v; // \u8ba4\u5b9a\u4e00\u4e2a\u4e8c\u53f7\u94fe\uff0c\u5176\u4ed6\u7684\u94fe\u90fd\u653e\u5728\u8fd9\u4e2a\u4e0a\u9762 \n\t\tedg(i,u,v) if(v^f&&v^x) {\n\t\t\ta[++top]=node(v,u,mi[v],mi[x]); // \u76f4\u63a5\u5377\u8d70 \n\t\t\tmi[x]=mj[v]; // \u89e3\u91ca\u5982\u4e0a \n\t\t}\n\t\ta[++top]=node(son[x][1],x,mi[x],mj[x]); \n\t\t//\u5de6\u53f3\u5408\u5e76\uff0c\u8fd9\u91cc son \u6570\u7ec4\u8d77\u4f5c\u7528\uff0cson[x][1]\u5176\u5b9e\u5c31\u662f mi[x] \u7684\u8d77\u70b9\uff0c\u5176\u4e0ex\u65ad\u6389\uff0c\u5de6\u53f3\u94fe\u4f4e\u7aef\u5408\u5e76 \n\t\tmj[u]=son[x][1];\n\t\t// \u53f3\u8fb9\u7684 son[x][1] \u5f00\u59cb\u7684\u94fe\uff0c\u7531\u4e8e\u662f\u4e0b\u9762\u7ec3\u8fc7\u6765\uff0c\u90a3\u4e48\u94fe\u672b\u5c31\u662f son[x][1] \u4e86\uff08\u4f60\u4e5f\u53ef\u4ee5\u6362\u7740\u6765\uff09 \n\t}\n}\nint main() {\n\tscanf(\"%d\",&T);\n\twhile(T--) {\n\t\tscanf(\"%d\",&n);\n\t\trep(i,2,n) scanf(\"%d%d\",&x,&y),add(x,y),add(y,x);\n\t\ttop=0,dfs(1,0);\n\t\tprintf(\"%d\\n\",top);\n\t\trep(i,1,top) printf(\"%d %d %d %d\\n\",a[i].a,a[i].b,a[i].c,a[i].d);\n\t\trep(i,1,n) head[i]=mi[i]=mj[i]=dp[i]=son[i][0]=son[i][1]=0;  \n\t\tcnt=0;\n\t}\n\treturn 0;\n}\n```\n\ntoo_late \u6c38\u8fdc\u53ef\u7231\uff01\n\n\u5b8c\u7ed3\u6563\u82b1\uff01\u611f\u8c22\u89c2\u770b\uff01qwqqqqqqqqqqqqq\n\n\u5982\u679c\u6587\u7ae0\u5e2e\u5230\u4f60\u7684\u8bdd\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u535a\u4e3b\u975e\u5e38\u4e4b\u826f\u5fc3\u7ec6\u81f4\u7684\u8bdd\uff0c\u5c31\u70b9\u70b9\u8d5e\u5457QwQ\u3002",
        "postTime": 1620481569,
        "uid": 115857,
        "name": "resound_WANYI_13Ell",
        "ccfLevel": 0,
        "title": "CF1521D Nastia Plays with a Tree"
    },
    {
        "content": "# \u4e00\u3001\u9898\u76ee\uff1a\n\n[codeforces\u539f\u9898](https://codeforces.com/problemset/problem/1521/D)\n\n[\u6d1b\u8c37\u539f\u9898](https://www.luogu.com.cn/problem/CF1521D)\n\n# \u4e8c\u3001\u601d\u8def\uff1a\n\n\u8fd9\u662f\u4e00\u9053\u975e\u5e38\u6e05\u5947\u7684\u8d2a\u5fc3\u9898\u3002\n\n\u8003\u8651\u8fd9\u6837\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5047\u8bbe\u6211\u4eec\u5207\u4e86 $x$ \u5200\u540e\u628a\u6574\u68f5\u6811\u53d8\u6210\u4e86\u4e00\u5806\u94fe\uff0c\u90a3\u4e48\u94fe\u7684\u4e2a\u6570\u4e00\u5b9a\u662f $x+1$ \u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u8fd9\u4e9b\u94fe**\u9996\u5c3e\u76f8\u8fde**\uff0c\u6700\u7ec8\u5f62\u6210\u7684\u6811\u4e5f\u4e00\u5b9a\u662f\u4e00\u6761\u94fe\uff0c\u800c\u9996\u5c3e\u76f8\u8fde\u7684\u64cd\u4f5c\u6b21\u6570\u4e5f\u4e00\u5b9a\u662f $x$ \u3002\n\n\u6211\u4eec\u53c8\u53ef\u4ee5\u53d1\u73b0\uff0c\u5148\u5207\u54ea\u4e00\u5200\u548c\u5148\u8fde\u54ea\u4e00\u6761\u8fb9\u662f\u65e0\u6240\u8c13\u7684\u3002\u6211\u4eec\u53ea\u9700\u8981\u5173\u5fc3\u54ea\u4e9b\u8fb9\u9700\u8981\u88ab\u5207\u6765\u4f7f\u5f97\u5207\u7684\u6b21\u6570\u6700\u5c0f\u3002\n\n\u8003\u8651\u8d2a\u5fc3\u3002\u9996\u5148\u6211\u4eec\u4efb\u9009\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u6839\u3002\u7136\u540e\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u5904\u7406\u4ee5 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u3002\n\n1. \u9012\u5f52\u5904\u7406 $v$ \u7684\u6240\u6709\u513f\u5b50\u3002\n2. \u8bbe $v$ \u73b0\u5728\u6709 $c$ \u4e2a\u513f\u5b50\uff0c\u5bf9 $c$ \u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u3002\n   1. \u82e5 $c\\leq 1$\uff0c\u5565\u90fd\u4e0d\u9700\u8981\u5e72\u3002\n   2. \u82e5 $c=2$\uff0c\u5207\u65ad $v$ \u548c $v$ \u7684\u7236\u4eb2\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002\n   3. \u82e5 $c\\ge 3$\uff0c\u5148\u5207\u65ad $v$ \u548c $v$ \u7684\u7236\u4eb2\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\uff0c\u7136\u540e\u968f\u4fbf\u5207\u65ad $v$ \u7684 $c-2$ \u4e2a\u513f\u5b50\u3002\n\n\u73b0\u5728\u6211\u4eec\u6765\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8fd9\u6837\u8d2a\u5fc3\u662f\u5bf9\u7684\u3002\u5f53\u6267\u884c\u5b8c\u7b2c1\u6b65\u540e\uff0c$v$ \u7684\u6240\u6709\u513f\u5b50\u53d8\u6210\u4e86\u4e00\u6761\u94fe\u7684**\u4e00\u7aef**\u3002\u5bf9\u4e8e $v$ \u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981**\u5c3d\u53ef\u80fd**\u4f7f\u5f97 $v$ \u7684\u7236\u4eb2\u7684\u513f\u5b50\u6570\u51cf\u5c11\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\u6570\u8d8a\u5c11\uff0c\u64cd\u4f5c\u6570\u4e5f\u4f1a\u53d8\u5f97\u8d8a\u5c11\u3002\u6240\u4ee5\u5f53\u6709\u5fc5\u8981\u65f6\uff0c\u9996\u5148\u8003\u8651\u5207 $v$ \u7684\u7236\u4eb2 \uff0c\u518d\u5207 $v$ \u7684\u513f\u5b50\u3002\n\n# \u4e09\u3001\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\ninline int read(void) {\n    int x = 0, f = 1; char ch = getchar();\n    while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); }\n    while (ch >= '0' && ch <= '9') { x = x * 10 + ch - '0'; ch = getchar(); }\n    return f * x;\n}\n\nconst int maxn = 1e5 + 5;\n\nint T, n, head[maxn], tot, top, deg[maxn];\nbool vis[maxn];\n\npair<int, int>pa[maxn];\n\nstruct Edge {\n    int y, next;\n    bool tag;\n    Edge() {}\n    Edge(int _y, int _next, bool _tag) : y(_y), next(_next), tag(_tag) {}\n}e[maxn << 1];\n\nstruct Opt{\n    int x1, y1, x2, y2;\n}opt[maxn];\n\ninline void connect(int x, int y) {\n    e[++ tot] = Edge(y, head[x], 1);\n    head[x] = tot;\n}\n\nvoid dfs(int x, int fa) {\n    int pos = 0;\n    for (int i = head[x]; i; i = e[i].next) {\n        int y = e[i].y;\n        if (y == fa) { pos = i; continue; }\n        dfs(y, x);\n    }\n    int cnt = 0;\n    for (int i = head[x]; i; i = e[i].next) {\n        int y = e[i].y;\n        if (y == fa || !e[i].tag) continue;\n        ++ cnt;\n    }\n    if (cnt <= 1) return;\n    if (cnt == 2) {\n        if (!fa) return;\n        e[pos].tag = e[pos ^ 1].tag = false;\n        opt[++ top].x1 = x; opt[top].y1 = fa;\n        -- deg[x]; -- deg[fa];\n        return;\n    }\n\n    if (fa) {\n        e[pos].tag = e[pos ^ 1].tag = false;\n        opt[++ top].x1 = x; opt[top].y1 = fa;\n        -- deg[x]; -- deg[fa];\n    }\n    int tmp = 0;\n    for (int i = head[x]; i; i = e[i].next) {\n        int y = e[i].y;\n        if (y == fa || !e[i].tag) continue;\n        ++ tmp;\n        if (tmp <= cnt - 2) {\n            e[i].tag = e[i ^ 1].tag = false;\n            opt[++ top].x1 = x; opt[top].y1 = y;\n            -- deg[x];\n            -- deg[y];\n        }\n    }\n}\n\nvoid dfs2(int x, int fa, int &to) {\n    int cnt = 0;\n    vis[x] = true;\n    for (int i = head[x]; i; i = e[i].next) {\n        int y = e[i].y;\n        if (y == fa || !e[i].tag) continue;\n        dfs2(y, x, to);\n        ++ cnt;\n    }\n    if (!cnt) to = x;\n}\n\nint main() {\n    T = read();\n    while (T --) {\n        tot = 1;\n        memset(head, 0, sizeof head);\n        memset(deg, 0, sizeof deg);\n        memset(vis, false, sizeof vis);\n\n        n = read();\n        for (int i = 1; i < n; ++ i) {\n            int a = read(), b = read();\n            connect(a, b); connect(b, a);\n            ++ deg[a]; ++ deg[b];\n        }\n        top = 0;\n        dfs(1, 0);\n        printf(\"%d\\n\", top);\n\n        top = 0;\n        for (int x = 1; x <= n; ++ x) {\n            if (deg[x] == 0 && !vis[x]) {\n                vis[x] = true;\n                pa[++ top] = make_pair(x, x);\n            }\n            if (deg[x] == 1 && !vis[x]) {\n                int y = 0;\n                dfs2(x, 0, y);\n                pa[++ top] = make_pair(x, y);\n            }\n        }\n        -- top;\n        for (int i = 1; i <= top; ++ i) {\n            opt[i].x2 = pa[i].second;\n            opt[i].y2 = pa[i + 1].first;\n            printf(\"%d %d %d %d\\n\", opt[i].x1, opt[i].y1, opt[i].x2, opt[i].y2);\n        }\n    }\n    return 0;\n}\n\n```\n\n",
        "postTime": 1620560406,
        "uid": 43513,
        "name": "\u5cb8\u82b7\u6c40\u5170",
        "ccfLevel": 8,
        "title": "CF1521D Nastia Plays with a Tree \u9898\u89e3"
    },
    {
        "content": "\u7531\u4e8e\u6211\u4eec\u5207\u7684\u8fb9\u548c\u52a0\u7684\u8fb9\u4e2a\u6570\u76f8\u7b49\u3002\n\n\u7b56\u7565\u663e\u7136\u4e3a\u628a\u539f\u6811\u5256\u6210\u4e00\u5806\u94fe\uff0c\u7136\u540e\u9996\u5c3e\u76f8\u8fde\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5207\u65ad\u6700\u5c11\u7684\u8fb9\u628a\u4e00\u68f5\u6811\u5256\u5206\u6210\u4e00\u5806\u94fe\u3002\n\n\u5b98\u65b9\u7ed9\u7684\u662f\u8d2a\u5fc3\uff0c\u4e0d\u8fc7\u6ca1\u7ed9\u5b98\u65b9\u8bc1\u660e\uff0c\u8bc4\u8bba\u533a\u6709\u4e2a\u8001\u54e5\u53d1\u4e86\u4e00\u4e2a\uff0c\u6211\u4e0d\u662f\u5f88\u61c2......\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a dp \u505a\u6cd5\u3002\n\n---\n\n$f_{x,0}$ \u8868\u793a\u628a $x$ \u7684\u5b50\u6811\u5256\u5206\u6210\u4e00\u5806\u94fe\u6700\u5c11\u5207\u51e0\u6761\u8fb9\u3002\n\n$f_{x,1}$ \u8868\u793a\u628a $x$ \u7684\u5b50\u6811\u5256\u5206\u6210\u4e00\u5806\u94fe\u6700\u5c11\u5207\u51e0\u6761\u8fb9\uff0c\u5e76\u4e14 $x$ \u662f\u4e00\u6761\u94fe\u7684\u4e00\u6bb5\u3002\n\n$son_x$ \u8868\u793a $x$ \u7684\u513f\u5b50\u4e2a\u6570\u3002\n\n\u8f6c\u79fb\u4e00\u5171\u6709\u4e09\u79cd\u60c5\u51b5\u3002\n\n1. $x$ \u88ab\u5f53\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u70b9\uff0c$v_1=\\sum\\limits_{u\\in sub(x)} f_{u,0}+son_x$\n2. $x$ \u4f5c\u4e3a\u4e00\u6761\u94fe\u7684\u4e00\u7aef, $v_2=\\sum\\limits_{u\\in sub(x)}f_{u,0}-Max \\{f_{u,0}-f_{u,1}\\}+son_x-1$\n3. $x$ \u4f5c\u4e3a\u4e24\u6761\u94fe\u7684\u5408\u5e76\u70b9\uff0c$v_3=\\sum\\limits_{u\\in sub(x)}f_{u,0}-Max \\{f_{u,0}-f_{u,1}\\}-SecondMax \\{f_{u,0}-f_{u,1}\\}+son_x-2$\n\n\u6839\u636e\u5b9a\u4e49\uff0c\u6709 $f_{u,0}=Min\\{v_1,v_2,v_3\\}$,$f_{u,1}=Min\\{v_1,v_2\\}$\u3002\n\n---\n\n\u6c42\u5177\u4f53\u65b9\u6848\u4e5f\u5f88\u57fa\u7840\uff0c\u76f4\u63a5\u6839\u636e $f$ \u7684\u8f6c\u79fb\u60c5\u51b5\u6765\u5904\u7406\u3002\n\n\u590d\u6742\u5ea6 $\\mathcal{O(n)}$\u3002\n\n\u5904\u7406\u6b21\u5927\u90a3\u4e2a\u5730\u65b9\u6211\u76f4\u63a5\u6392\u5e8f\u7684\uff0c\u590d\u6742\u5ea6$\\mathcal{O(n\\log n)}$\u3002\n\n\u6ce8\u610f\u6ca1\u6709\u6b21\u5927\u7684\u65f6\u5019 $v_3$ \u76f8\u5f53\u4e8e $-\\infty$\uff0c\u800c\u4e0d\u662f $0$\u3002\n\n$\\mathcal{Code}$ \uff08\u53ef\u80fd\u4f1a\u957f\u4e00\u4e9b\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,t;\nint x,y;\nvector<int> v[100010],e[100010];\nint f[100100][2];\ninline bool cmp(int x,int y){\n    return f[x][0]-f[x][1]>f[y][0]-f[y][1];\n}\ninline void predfs(int x,int fa){\n    for(auto y:e[x]){\n        if(y==fa) continue;\n        v[x].push_back(y);\n        predfs(y,x);\n    }\n}\ninline void dfs(int x){\n    int ch=0,sum=0;\n    for(auto y:v[x]){\n        dfs(y);\n        sum+=f[y][0];ch++;\n    }\n    if(ch==0){\n        f[x][0]=f[x][1]=0;\n        return ;\n    }\n    sort(v[x].begin(),v[x].end(),cmp);\n    int y=v[x][0],z;\n    f[x][1]=min(sum+ch,sum-(f[y][0]-f[y][1])+ch-1);\n    if(v[x].size()>=2){\n        z=v[x][1];\n        f[x][0]=sum-(f[y][0]-f[y][1])-(f[z][0]-f[z][1])+ch-2;\n    }\n    else f[x][0]=f[x][1];\n    f[x][0]=min(f[x][1],f[x][0]);\n}\n// dfs \u4e3a\u8ba1\u7b97 f[x][0],f[x][1] \u7684\u51fd\u6570\nint ind[100100];bool vis[100100];\ninline void link(int x,int y){\n    e[x].push_back(y),e[y].push_back(x);\n    ind[x]++,ind[y]++;\n}\nvector<pair<int,int> > sb,ad;\ninline void getans(int x,int flag){\n    int ch=0,sum=0;\n    for(auto y:v[x]){ch++;sum+=f[y][0];}\n    if(ch==0){\n        return ;\n    }\n    int y=v[x][0],z;\n    if(flag==1||f[x][0]==f[x][1]){\n        if(f[x][1]==sum+ch)\n            for(auto y:v[x]) getans(y,0),sb.push_back(make_pair(x,y));\n        else{\n            getans(y,1);link(x,y);\n            for(int i=1;i<v[x].size();i++){int y=v[x][i];getans(y,0);sb.push_back(make_pair(x,y));}\n        }\n        return ;\n    }\n    if(v[x].size()>=2){\n        z=v[x][1];\n        getans(y,1);link(x,y);\n        getans(z,1);link(x,z);\n        for(int i=2;i<v[x].size();i++){int y=v[x][i];getans(y,0);sb.push_back(make_pair(x,y));}\n    }\n    else {\n        if(f[x][0]==sum+ch)\n            for(auto y:v[x]) getans(y,0),sb.push_back(make_pair(x,y));\n        else{\n            getans(y,1);link(x,y);\n            for(int i=1;i<v[x].size();i++){int y=v[x][i];getans(y,0);sb.push_back(make_pair(x,y));}\n        }\n    }\n}\n// getans \u4e3a\u6c42\u89e3\u5220\u7684\u8fb9\u7684\u51fd\u6570\nint ed=0;\ninline void paint(int x,int fa){\n    vis[x]=1;ed=x;\n    for(auto y:e[x]){\n        if(y==fa) continue;\n        paint(y,x);\n    }\n}\nint main(){\n    ios::sync_with_stdio(false);cin.tie(0);\n    cin>>t;\n    while(t--){\n        cin>>n;\n        for(int i=0;i<=n;i++)ind[i]=f[i][0]=f[i][1]=vis[i]=0,v[i].clear(),e[i].clear();\n        sb.clear();ad.clear();\n        for(int i=1;i<n;i++){\n            int x,y;cin>>x>>y;\n            e[x].push_back(y),e[y].push_back(x);\n        }\n        predfs(1,0);\n        for(int i=0;i<=n;i++) e[i].clear();\n        dfs(1);\n        getans(1,0);\n        //-----------------------------------\n        int pre=0;\n        for(int i=1;i<=n;i++){\n            if(ind[i]==1||ind[i]==0){\n                if(vis[i]) continue;\n                paint(i,0);\n                if(pre!=0) ad.push_back(make_pair(pre,i));\n                pre=ed;\n            }\n        }\n        // \u4ee5\u4e0a\u4e3a\u6c42\u89e3\u52a0\u8fb9\u7684\u8fc7\u7a0b\n        cout<<f[1][0]<<endl;\n        for(int k=0;k<sb.size();k++) cout<<sb[k].first<<\" \"<<sb[k].second<<\" \"<<ad[k].first<<\" \"<<ad[k].second<<endl;\n    } \n}// sb -> \u5220\u8fb9 ; ad -> add \u52a0\u8fb9\n```",
        "postTime": 1620480312,
        "uid": 184069,
        "name": "Imitators",
        "ccfLevel": 0,
        "title": "CF1521D"
    }
]