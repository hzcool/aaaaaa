[
    {
        "content": "## $\\text{Start}$\n\u9898\u76ee\u4e2d\u8981\u6c42\u8f93\u51fa\u6240\u6709\u5b50\u4e32\u4e2d\u5b57\u5178\u5e8f\u7b2c $k$ \u5c0f\u7684\u534a\u56de\u6587\u4e32\uff0c\u663e\u7136\u5730\uff0c\u7528\u5230 $\\text{Trie}$\u3002\n\n\u90a3\u4e48\u5982\u4f55\u6c42\u534a\u56de\u6587\u4e32\u5462\uff1f\u8003\u8651 $\\text{DP}$\u3002  \n&nbsp;\n## $\\text{DP}$\n\n\u5047\u8bbe\u8f93\u5165\u5b57\u7b26\u4e32\u662f $\\overline{s_1s_2s_3...s_{n-2}s_{n-1}s_{n}}$\uff0c\u7528 $f[l][r]$ \u8868\u793a $\\overline{s_ls_{l+1}...s_{r-1}s_r}$ \u662f\u5426\u4e3a\u534a\u56de\u6587\u4e32\u3002\n\n\u601d\u8003\u5982\u4f55\u72b6\u6001\u8f6c\u79fb\uff1a\n\n1. $l=r$\n\n\t\u975e\u5e38\u663e\u7136\u5730\uff0c$f[l][r]=\\text{true}$\n    \n2. $l+1=r$\n\n   \u8f6c\u79fb\u540c\u6837\u975e\u5e38\u6d45\u663e\uff0c$f[l][r]=[s_l=s_r]$\n   \n3. $l+2=r$\n\n\t\u540c 2.\uff0c$f[l][r]=[s_l=s_r]$\n\n4. $l+3=r$\n\n\t\u7531\u4e8e\u534a\u56de\u6587\u4e32\u53ea\u8981\u6c42\u5f53 $i$ \u4e3a\u5947\u6570\u65f6\uff0c\u5b50\u4e32 $\\overline{s_ls_{l+1}...s_{r-1}s_r}$ \u6ee1\u8db3 $s_{l+i-1}=s_{r-i+1}$\uff0c\u6240\u4ee5\u53ea\u8981\u6ee1\u8db3 $s_l=s_r$ \u5373\u53ef\uff0c\u540c 2. 3.\uff0c$f[l][r]=[s_l=s_r]$\n    \n5. $l+k=r(k>3)$\n\n\t\u6211\u4eec\u56fa\u7136\u53ef\u4ee5\u6309\u7167\u9898\u610f\u679a\u4e3e $i$ \u5224\u65ad\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6bcf\u4e2a\u5b50\u4e32 $\\mathcal{O}(n)$\uff0c\u663e\u7136\u592a\u6162\u3002\u4f46\u662f\u6839\u636e\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u7528\u5df2\u7ecf\u6c42\u5f97\u7684\u91cf\u6765\u6c42\u65b0\u7684\u91cf\u3002\u6c42 $f[l][r]$ \u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42 $[s_l=s_r]\\ \\&\\ f[l+2][r-2]$\u3002\u56e0\u4e3a$\\overline{s_{l+2}s_{l+3}...s_{r-3}s_{r-2}}$ \u662f\u534a\u56de\u6587\u4e32\u662f $\\overline{s_ls_{l+1}...s_{r-1}s_r}$ \u662f\u534a\u56de\u6587\u4e32\u7684**\u5fc5\u8981\u6761\u4ef6**\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u5fc5\u987b\u6ee1\u8db3$s_l=s_r$\u3002\n    \n\u7efc\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff08\u5316\u7b80\u5f62\u5f0f\uff09\uff1a\n$$\nf[l][r]=\\begin{cases}\n[s_l=s_r],\\ r-l<4 \\\\\n[s_l=s_r]\\ \\&\\ f[l+2][r-2], r-l\\geqslant 4\n\\end{cases}\n$$\n\n\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u7b2c\u4e8c\u7ef4\u5316\u4e3a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u7528 $f[l][r-l+1]$ \u8bb0\u5f55 $\\overline{s_ls_{l+1}...s_{r-1}s_r}$ \u662f\u5426\u4e3a\u534a\u56de\u6587\u4e32\u3002\u90a3\u4e48\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f\u8fd9\u6837\u7684\uff1a\n$$\nf[i][l]=\\begin{cases}\n[s_l=s_{i+l-1}],\\ l<4 \\\\\n[s_l=s_{i+l-1}]\\ \\&\\ f[i+2][l-4], l\\geqslant 4\n\\end{cases}\n$$\n&nbsp;\n## $\\text{Trie}$\n$\\text{DP}$ \u5df2\u7ecf\u505a\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u8003\u8651 $\\text{Trie}$ \u7684\u90e8\u5206\u3002\n\n\u663e\u7136\u5730\uff0c\u4e3a\u4e86\u6c42\u89e3\u7b2c $k$ \u5c0f\uff0c\u6211\u4eec\u8981\u5c06\u5b57\u7b26\u4e32\u4e00\u4e00\u63d2\u5165\u5230 $\\text{Trie}$ \u4e2d\u3002\u5b57\u7b26\u4e32\u7684\u6570\u91cf\u7ea6\u662f $\\frac{n^2}{2}$\u3002\u5355\u6b21\u63d2\u5165\u7684\u590d\u6742\u5ea6\u7ea6\u662f\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n^3)$\uff0c\u65e0\u6cd5\u901a\u8fc7\u3002\n\n\u518d\u60f3\uff0c\u5b57\u7b26\u4e32\u4e2d**\u53ea\u6709 $a$ \u548c $b$**\uff0c\u90a3\u4e48\u8fd9\u4e2a $\\text{Trie}$ \u7684\u5f62\u6001\u7c7b\u4f3c\u4e8e**\u4e8c\u53c9\u6392\u5e8f\u6811**\u3002\u4e8c\u53c9\u6392\u5e8f\u6811\u600e\u4e48\u6c42\u7b2c $k$ \u5c0f\uff1f\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u5728\u63d2\u5165\u65f6\uff0c\u8bb0\u5f55 $\\text{Trie}$ \u4e0a\u5230\u4efb\u610f\u7ed3\u70b9 $p$ \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u6570\u91cf $c_p$\u3002\u5728\u67e5\u8be2\u65f6\uff0c\u5982\u679c $k\\leqslant c_p$\uff0c\u90a3\u4e48\u8f93\u51fa\u4ee5 $\\text{Trie}$ \u4e0a\u8fd9\u4e2a\u7ed3\u70b9\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002\u5426\u5219\u5206\u522b\u5411\u5de6\u5411\u53f3\u641c\u7d22\u3002\n\n\u73b0\u5728\u518d\u5904\u7406\u63d2\u5165\u7684\u95ee\u9898\u3002$\\text{Trie}$ \u662f\u524d\u7f00\u63d2\u5165\u3002$\\overline{s_1},\\overline{s_1s_2},...,\\overline{s_1...s_{n-2}},\\overline{s_1s_{n-1}}$ \u5747\u662f $\\overline{s_1...s_n}$ \u7684\u524d\u7f00\uff0c\u53ef\u4ee5\u5728\u63d2\u5165 $\\overline{s_1...s_n}$ \u65f6\u4e00\u5e76\u8fdb\u884c\u5904\u7406\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u63d2\u5165 $\\overline{s_1...s_n},\\overline{s_2...s_n},...,\\overline{s_{n-1}...s_n},\\overline{s_n}$ \u5373\u53ef\u3002\u5047\u8bbe\u63d2\u5165 $\\overline{s_l...s_n}$\uff0c\u8fdb\u884c\u5230\u5b57\u7b26\u4e32\u4e0a\u7684 $s_i$\uff0c\u6b64\u65f6 $\\text{Trie}$ \u4e0a\u63d2\u5165\u5230\u70b9 $p$\u3002\u90a3\u4e48 $c_p=c_p+f[l][i]$ \uff08\u7b2c\u4e00\u79cd\u8868\u793a\u65b9\u6cd5\uff09\u3002  \n&nbsp;\n## $\\text{Code}$\n\u4e24\u79cd\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7684[\u4ee3\u7801](https://www.luogu.com.cn/paste/m6n1za7a)\u90fd\u6709\u3002\n\n$\\text{Trie}$ \u7684\u5b58\u50a8\u65b9\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u8fd9\u91cc\u7528\u7684\u662f $\\text{vector}\\ +$ \u7ed3\u6784\u4f53\uff0c\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62\u505a\u9898\u662f\u4e0d\u77e5\u9053 $\\text{Trie}$ \u6570\u7ec4\u5e94\u8be5\u5f00\u591a\u5927\u53c8\u6015 $\\text{MLE}$ \u7684\u60c5\u51b5\u3002\u901a\u5e38\u53ea\u8981\u7a7a\u95f4\u5361\u7684\u4e0d\u6b7b\u90fd\u53ef\u4ee5\u7528\u3002  \n&nbsp;\n## $\\text{End}$\n~~\u8bf4\u8fd9\u9898\u662f\u6c34\u9ed1\u4e0d\u8fc7\u5206\u5427\uff01**\u7559\u4e2a\u8d5e\u518d\u8d70\u5457\uff01**~~",
        "postTime": 1658711122,
        "uid": 282929,
        "name": "\u67f3\u6613\u8fb0",
        "ccfLevel": 0,
        "title": "CF557E \u9898\u89e3 Trie + DP"
    },
    {
        "content": "## \u7b97\u6cd5\uff1adp+\u5b57\u5178\u6811\n\n&emsp;&emsp;\u5728CF\u5237\u5b57\u7b26\u4e32\u9898\u7684\u65f6\u5019\u9047\u5230\u4e86\u8fd9\u9898\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709\u9ed1\u9898\u8fd9\u4e48\u96be\uff0c\u4e2a\u4eba\u611f\u89c9\u6700\u591a\u662f\u7d2b\u9898\u5427\uff08~~\u867d\u7136\u4e00\u5f00\u59cb\u4ee5\u4e3a\u662f\u540e\u7f00\u81ea\u52a8\u673a\u7684\u795e\u4ed9\u9898~~\uff09\u3002\n\n&emsp;&emsp;\u9996\u5148\u6ce8\u610f\u5230\u5b57\u7b26\u4e32 $s$ \u957f\u5ea6\u5f88\u5c0f( $1\\le|s|\\le5000$ ),\u53ef\u4ee5 $\\mathcal O(n^2)$ \u5730\u628a\u6240\u6709\u5b50\u4e32\u6c42\u51fa\u6765\uff0c\u518d\u7528Trie\u6811\u5b58\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u65b9\u4fbf\u6211\u4eecdfs\u6c42\u5b57\u5178\u5e8f\u7b2c $k$ \u5c0f\u7684\u534a\u56de\u6587\u4e32\u3002\u6240\u4ee5\u95ee\u9898\u91cd\u5fc3\u53d8\u4e3a\u600e\u4e48\u5feb\u901f\u5224\u65ad\u8fd9\u4e9b\u5b50\u4e32\u662f\u5426\u4e3a\u534a\u56de\u6587\u4e32\u3002\u6839\u636e\u534a\u56de\u6587\u4e32\u7684\u7279\u70b9\uff0c\u957f\u5ea6\u957f\u7684\u534a\u56de\u6587\u4e32\u662f\u5305\u542b\u957f\u5ea6\u5c0f\u7684\u534a\u56de\u6587\u4e32\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u533a\u95f4dp\u89e3\u51b3\u3002\u8bbe $f[i][l]$ \u8868\u793a $s[i,i+l-1]$ \u662f\u5426\u4e3a\u534a\u56de\u6587\u4e32\uff0c\u5b83\u7684\u8f6c\u79fb\u65b9\u7a0b\u53ef\u4ee5\u5199\u4f5c( $[A]$ \u8868\u793a $A$ \u4e3a\u771f\u65f6\u503c\u4e3a1\uff0c\u5426\u5219\u4e3a0)\uff1a\n$$\n\\left\\{\\begin{array}{l}f[i][1]=1\\\\ f[i][2]=[s[i]=s[i+1]]\\\\f[i][3]=[s[i]=s[i+2]]\\\\f[i][4]=[s[i]=s[i+3]] \\\\ f[i][l]~=[~s[i]=s[i+l-1]\\&\\&f[i+2][l-4]~],l\\ge5\\end{array}\\right.\n$$\n&emsp;&emsp;\u8fd9\u6837dp\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f $\\mathcal  O(n^2)$ \u7684\u3002\u4e4b\u540edfs\u6c42\u89e3\u7b2c $k$ \u5c0f\u7684\u534a\u56de\u6587\u4e32\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\uff0c\u7531\u4e8eTrie\u8282\u70b9\u6570\u4e5f\u662f $\\mathcal O(n^2)$ \u7684\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O(n^2)$ \u7684\u3002\n\n## $Code:$\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 5e3 + 5;\nbool f[N][N];\nint trie[N * N][2],cnt,num[N * N],tot,k;\nchar s[N+6],ans[N];\n\nvoid dfs(int now){\n    for(int i = 0;i <= 1;i++){\n        int next = trie[now][i];\n        if(next == 0) continue;\n        //\u5982\u679c\u8be5\u8282\u70b9\u6240\u8868\u793a\u7684\u534a\u56de\u6587\u4e32\u6570\u91cf\u5927\u4e8ek\uff0c\u8bf4\u660e\u7b54\u6848\u5c31\u662f\u8be5\u534a\u56de\u6587\u4e32\u3002\n        if(k <= num[next]) {\n            ans[++tot] = i + 'a';\n            for(int j = 1; j <= tot; j++) printf(\"%c\", ans[j]);\n            exit(0);\n        }\n        k -= num[next];     //k\u4e3a\u5168\u5c40\u53d8\u91cf\n        ans[++tot] = i + 'a';\n        dfs(next);\n        tot--;\n    }\n}\n\nint main() {\n    scanf(\"%s %d\",s+1,&k);\n    int len = strlen(s+1);\n    for(int i = 1;i <=len;i++) f[i][1] = 1;\n    for(int i = 1;i < len;i++) f[i][2] = s[i] == s[i+1];\n    for(int i = 1;i < len;i++) f[i][3] = s[i] == s[i+2];\n    for(int i = 1;i < len;i++) f[i][4] = s[i] == s[i+3];\n    for(int l = 5;l <= len;l++)\n        for(int i = 1; i <= len; i++)\n            f[i][l] = (s[i] == s[i+l-1] && f[i+2][l-4]);\n    //\u5c06s\u6240\u6709\u5b50\u4e32\u52a0\u5165trie\u6811\u4e2d\n    for(int i = 1;i <= len;i++){\n        int now = 0;\n        for(int l = 1; l+i-1 <= len; l++){\n            int c = s[i+l-1] - 'a';\n            if(trie[now][c] == 0) trie[now][c] = ++cnt;\n            now = trie[now][c];\n            if(f[i][l]) num[now]++;\n        }\n    }\n    dfs(0);\n    return 0;\n}\n\n```\n\n",
        "postTime": 1615470196,
        "uid": 281293,
        "name": "ailanxier",
        "ccfLevel": 0,
        "title": "CF557E Ann and Half-Palindrome \u9898\u89e3"
    },
    {
        "content": "\u66b4\u529b \u8d85\u7ea7\u5927\u66b4\u529b \u4e24\u4e2afor\u5faa\u73af\u5efa\u7acb\u539f\u4e32Suffix Trie\u67e5\u8be2\u6392\u540d \u4e00\u4e2aO(n^2)\u7684dp\u9884\u5904\u7406\u51fa\u6240\u6709\u7684half-palindrome  \n\n\u601d\u8def \u505a\u6cd5\u90fd\u4e0d\u96be \n\n\u4f46\u662f\u66b4\u529b\u7684\u505a\u6cd5\u9700\u8981\u8003\u8651\u7684\u7ec6\u8282\u5947\u591a \u7a0d\u5fae\u5361\u70b9\u7a7a\u95f4O(4 * n^2) \n(\u5982\u679c\u5efaST\u65f6\u76f4\u63a5\u5904\u7406\u5c31O\uff083 * n^2\uff09, \u5b58\u5728\u7a7a\u95f4\u590d\u6742\u5ea6O\uff08n^2/8+n\uff09\u7684\u5c0f\u5e38\u6570\u505a\u6cd5\u4f46\u662f\u7801\u91cf\u592a\u5927\u4e86\u6ca1\u5fc5\u8981)\u503c\u5f97\u4e00\u63d0\u7684\u662fdp\u5904\u7406palindrome\u7684\u65f6\u5019\u7ec6\u8282\u8fd8\u662f\u5f88\u591a\u7684\uff08\u5927\u6982\u662f\u771f\u6b63\u7684\u96be\u70b9\uff09\uff0c\u5904\u7406\u4e00\u4e0b\u5c31\u597d\n\nAC\u4ee3\u7801\uff1a\n\n```cpp\n#include<string>\n#include<vector>\n#include<regex>\n#include<algorithm>\n#include<random>\n#include<map>\n#include<set>\n#include<deque>\n#include<iomanip>\n#include<sstream>\n#include<stack>\n#include<iostream>\n#include<limits>\n#include<bitset>\n#include<list>\n#include<queue>\n#include<memory.h>\n#include<functional>\n#include<array>\nusing namespace std;\narray<array<bool, 5200>, 5200> matrix;\nstring s;\nint trie[25200000][2], deep[25200000], fa[25200000], ans[25200000];\nint last[10000];\narray<char, 6000> ch;\nint N;\nint len = 0;\nvoid dfs1(int a, int k)\n{\n\tif (k == 0)\n\t{\n\t\tmatrix[a][a] = true;\n\t\twhile (a - k > 0 && ch[a - k] == ch[a + k])\n\t\t\tmatrix[a - k][a + k] = true, k++;\n\t\tif (k != 0)\n\t\t\tk--;\n\t\tdfs1(a, k + 2);\n\t\treturn;\n\t}\n\tif (a - k < 0)\n\t\treturn;\n\tif (ch[a - k] == ch[a + k])\n\t{\n\t\tmatrix[a - k][a + k] = true;\n\t\tdfs1(a, k + 2);\n\t}\n}\nvoid dfs2(int a, int k)\n{\n\tif (k == 0)\n\t{\n\t\twhile (a - k > 0 && ch[a - k] == ch[a + k-1])\n\t\t\tmatrix[a - k][a + k-1] = true, k++;\n\t\tif (k != 0)\n\t\t\tk--;\n\t\tdfs2(a, k + 2);\n\t\treturn;\n\t}\n\tif (a - k < 0)\n\t\treturn;\n\tif (ch[a - k] == ch[a + k-1])\n\t{\n\t\tmatrix[a - k][a + k-1] = true;\n\t\tdfs2(a, k + 2);\n\t}\n}\nlist<int> st;\nint K;\nbool dfs3(int p)\n{\n\t//cout << K <<\" \"<<ans[p]<< endl;\n\tK -= ans[p];\n\tif (K < 1)\n\t\treturn true;\n\tfor (int i = 0; i < 2; ++i)\n\t{\n\t\tif (trie[p][i] != -1)\n\t\t{\n\t\t\tst.push_back(i);\n\t\t\tif (dfs3(trie[p][i]))\n\t\t\t\treturn true;\n\t\t\tst.pop_back();\n\t\t}\n\t}\n\treturn false;\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tcout.tie(NULL);\n\tmemset(ans, 0, sizeof(ans));\n\tmemset(trie, -1, sizeof(trie));\n\tcin >> s;\n\tch.fill(-1);\n\tint root = 0, p, cur = 1;\n\tdeep[0] = 0;\n\tN = s.size();\n\tfor (int i = 0; i < s.size(); ++i)\n\t{\n\t\tp = root;\n\t\tfor (int j = i; j < s.size(); ++j)\n\t\t{\n\t\t\tif (trie[p][s[j] - 'a'] == -1)\n\t\t\t{\n\t\t\t\ttrie[p][s[j] - 'a'] = cur++;\n\t\t\t\tdeep[trie[p][s[j] - 'a']] = deep[p] + 1;\n\t\t\t\tfa[trie[p][s[j] - 'a']] = p;\n\t\t\t\tp = trie[p][s[j] - 'a'];\n\t\t\t}\n\t\t\telse\n\t\t\t\tp = trie[p][s[j] - 'a'];\n\t\t}\n\t\tlast[i + 1] = p;\n\t}\n\tfor (int i = 0; i < 5200; ++i)\n\t\tmatrix[i].fill(false);\n\tfor (int i = 0; i < s.size(); ++i)\n\t\tch[i + 1] = s[i];\n\tfor (int i = 1; i <= s.size(); ++i)\n\t\tdfs1(i, 0), dfs2(i, 0);\n\tcin >> K;\n\tfor (int i = s.size(); i >0; --i)\n\t{\n\t\tint f = last[i];\n\t\twhile (f != 0)\n\t\t{\n\t\t\t//cout << i << \" \" << matrix[i][deep[f]+i-1] <<\" \"<<deep[f]+i-1<< endl;;\n\t\t\tif (matrix[i][deep[f] + i - 1])\n\t\t\t\tans[f]++;\n\t\t\tf = fa[f];\n\t\t}\n\t}\n\tdfs3(0);\n\tfor (auto &s : st)\n\t\tcout << char(s+'a');\n\tcout << endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1555601181,
        "uid": 154957,
        "name": "qiyue7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF557E \u3010Ann and Half-Palindrome\u3011"
    }
]