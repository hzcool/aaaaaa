[
    {
        "content": "\u5148\u819c\u62dc\u51fa\u9898\u4eba @[1kri](https://www.luogu.com.cn/user/235926)\uff0c\u8d21\u732e\u4e86\u4e00\u9053\u8d28\u91cf\u5f88\u9ad8\u7684\u9898\u76ee\u3002\u8fd9\u9053\u9898\u4e5f\u544a\u8bc9\u4e86\u6211\u4eec\uff1a\u770b\u5230\u5947\u5076\u76f8\u51cf\u4e0d\u6b62\u60f3\u5230 LGV\uff0c\u8fd8\u53ef\u4ee5\u53bb\u6316\u6398\u6027\u8d28\uff0c\u6709\u4e86\u6027\u8d28\u95ee\u9898\u4f1a\u7b80\u5316\u8bb8\u591a\u3002\n\n\u9996\u5148\u5047\u8bbe\u6709\u4e24\u6761\u7ebf\u6bb5 $X,Y$ \u6ee1\u8db3 $X$ \u5305\u542b\u4e86 $Y$\uff0c\u90a3\u4e48 $X$ \u662f\u53ef\u4ee5\u88ab\u5220\u9664\u7684\u3002\u539f\u56e0\u662f\uff1a\u5982\u679c\u9009\u62e9\u4e86 $X$\uff0c\u90a3\u4e48 $Y$ \u662f\u5426\u9009\u62e9\uff0c\u53ef\u4ee5\u7ed9\u5947\u5076\u5206\u522b\u4ea7\u751f\u76f8\u7b49\u7684\u8d21\u732e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5220\u9664 $X$\u3002\n\n\u5bf9\u4e8e\u4e00\u7ec4 $[l,r]$\uff0c\u6211\u4eec\u8003\u8651\u6240\u6709\u5b8c\u5168\u88ab\u5305 $[l,r]$ \u542b\u7684\u7ebf\u6bb5\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u7ebf\u6bb5\uff0c\u6211\u4eec\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f\u3002\u7531\u4e8e\u73b0\u5728\u6ca1\u6709\u7ebf\u6bb5\u6709\u5305\u542b\u5173\u7cfb\u4e86\uff0c\u6240\u4ee5\u53f3\u7aef\u70b9\u5176\u5b9e\u4e5f\u6392\u597d\u4e86\u5e8f\u3002\u8003\u8651\u4e09\u6761\u6309\u5e8f\u7684\u7ebf\u6bb5\uff0c\u5982\u679c\u6ee1\u8db3 $l_1<l_2<l_3<r_1$\uff0c\u90a3\u4e48\u4f1a\u53d1\u73b0\u5982\u679c\u540c\u65f6\u9009\u62e9\u4e86 $1$ \u548c $3$\uff0c\u90a3\u4e48 $2$ \u662f\u5426\u9009\u62e9\u90fd\u4f1a\u7ed9\u5947\u5076\u4ea7\u751f\u76f8\u7b49\u7684\u8d21\u732e\uff0c\u6240\u4ee5 $3$ \u4e5f\u53ef\u4ee5\u88ab\u5220\u9664\uff08\u56e0\u4e3a\u6b64\u65f6 $1$ \u662f\u5fc5\u987b\u9009\u62e9\u7684\uff09\u3002\u8fd9\u6837\u53c8\u53ef\u4ee5\u63a8\u51fa $2$ \u5fc5\u987b\u9009\u62e9\uff0c\u5c31\u53ef\u4ee5\u6309\u6b64\u9012\u63a8\u4e0b\u53bb\u3002\n\n\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u5220\u9664\u7ebf\u6bb5\u540e\uff0c\u5269\u4e0b\u7684\u6240\u6709\u7ebf\u6bb5\u90fd\u5fc5\u987b\u9009\u62e9\u3002\u6240\u4ee5\u5982\u679c\u5269\u4e0b $k$ \u6761\u7ebf\u6bb5\uff0c\u4e14\u6ee1\u8db3 $[l_1, r_1] \\cup [l_2, r_2] \\cup \\cdots \\cup [l_k, r_k] = [l, r]$\uff0c\u90a3\u4e48\u7b54\u6848\u662f $(-1)^k$\uff1b\u5426\u5219\u7b54\u6848\u662f $0$\u3002\u7ebf\u6bb5\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n![](https://s2.loli.net/2022/04/28/q3ypMouNFBawil4.png)\n\n\u6309\u4e0a\u56fe\u7684\u7b54\u6848\u5c31\u662f $0$\uff0c\u56e0\u4e3a\u5e76\u96c6\u4e0d\u662f $[l,r]$\u3002\n\n\u518d\u60f3\u4e00\u4e0b\u6bcf\u7ec4\u8be2\u95ee\u6211\u4eec\u505a\u4e86\u4ec0\u4e48\uff1a\u8be2\u95ee\u524d\u5148\u6254\u6389\u6240\u6709\u5305\u542b\u5176\u4ed6\u7ebf\u6bb5\u7684\u7ebf\u6bb5\uff0c\u6bcf\u6b21\u8be2\u95ee\u6211\u4eec\u5148\u627e\u5230\u5de6\u7aef\u70b9\u5c31\u662f $l$ \u7684\u7ebf\u6bb5\u548c\u5de6\u7aef\u70b9\u5927\u4e8e $l$ \u4e14\u6700\u5c0f\u7684\u4e24\u6761\u7ebf\u6bb5\u4f5c\u4e3a\u8d77\u59cb\u7ebf\u6bb5\u3002\u4ece\u4ed6\u4eec\u5f00\u59cb\uff0c\u8bbe\u4ed6\u4eec\u7f16\u53f7 $1,2$\uff0c\u6211\u4eec\u5148\u4ece $1$ \u627e\u5230\u4e00\u4e2a\u5de6\u7aef\u70b9\u5927\u4e8e $r$ \u4e14\u6700\u5c0f\u7684\u7ebf\u6bb5 $3$\uff0c\u518d\u5bf9 $2$ \u505a\uff0c\u4e00\u76f4\u8fd9\u4e48\u505a\u4e0b\u53bb\uff0c\u76f4\u5230\u53f3\u7aef\u70b9\u5230\u8fbe $r$\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651 $q$ \u7ec4\u8be2\u95ee\u3002\u6211\u4eec\u6309\u7167\u4e0a\u9762\u8fd9\u4e2a\u6b65\u9aa4\u8fdb\u884c\u4e00\u4e2a\u9884\u5904\u7406\uff1a\u5bf9\u4e8e\u7ebf\u6bb5 $i$\uff0c\u6211\u4eec\u627e\u5230\u6700\u5c0f\u7684 $j$ \u6ee1\u8db3 $l_j>r_i$\uff0c\u5efa\u4e00\u68f5\u6811\uff08\u68ee\u6797\uff09\uff0c\u6211\u4eec\u4ee4 $fa_i=j$\u3002\u4e8b\u5b9e\u4e0a\u4e0d\u7528\u628a\u6811\u663e\u5f0f\u5efa\u51fa\u6765\uff0c\u53ea\u8981 $fa$ \u6570\u7ec4\u5c31\u884c\u3002\n\n\u8fd9\u6837\u6211\u4eec\u6bcf\u6b21\u5148\u627e\u5230\u4e24\u6761\u521d\u59cb\u7ebf\u6bb5\uff0c\u53ea\u8981\u7ebf\u6bb5\u8303\u56f4\u6ca1\u6709\u8d85\u8fc7 $r$\uff0c\u5c31\u4e00\u76f4\u500d\u589e\u5411\u540e\u9762\u8df3 $fa$ \uff0c\u5982\u679c\u6700\u7ec8\u4e24\u6761\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u8fd8\u6ca1\u5230 $r$\uff0c\u6216\u8005\u6700\u7ec8\u4e24\u6761\u7ebf\u6bb5\u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $0$ \u4e86\u3002\n\n\u6700\u7ec8\u8df3\u5230\u7684\u7ebf\u6bb5\u76f8\u540c\u7684\u65f6\u5019\uff0c\u8868\u660e\u4e2d\u95f4\u5b58\u5728\u4e00\u6bb5\u7a7a\u9699\uff0c\u6ca1\u6709\u88ab\u4efb\u4f55\u7ebf\u6bb5\u8986\u76d6\u3002\u6bd4\u5982\u4e0a\u56fe\u7684\u60c5\u51b5\uff0c\u4ece $1,2$ \u5f00\u59cb\u8df3\u90fd\u4f1a\u5230\u8fbe $5$\uff0c$r_4$ \u548c $l_5$ \u4e4b\u95f4\u5b58\u5728\u4e86\u7a7a\u9699\uff0c\u6240\u4ee5\u7b54\u6848\u662f $0$\u3002\n\n\u5426\u5219\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u500d\u589e\u7684\u6b21\u6570\u7b97\u51fa\u603b\u5171\u6709\u5947\u6570\u8fd8\u662f\u5076\u6570\u6761\u7ebf\u6bb5\uff0c\u4ece\u800c\u786e\u5b9a\u7b54\u6848\u662f $1$ \u8fd8\u662f $998244352$\u3002\n\n```cpp\nconst int N=200005;\nint n,m,cnt; \nstruct point\n{\n\tint x,y;\n}a[N],b[N];\nbool operator < (const point &x,const point &y)\n{\n\tif (x.x==y.x) return x.y>y.y;\n\treturn x.x<y.x;\n}\nint f[N][21];\nint ask(int x)\n{\n\treturn lower_bound(b+1,b+cnt+1,(point){x,inf})-b;\n}\n\nint query(int l,int r)\n{\n\tint u=ask(l);\n\tif (u>cnt||b[u].x!=l) return 0;\n\tif (b[u].y==r) return mod-1;\n\tint v=ask(l+1);\n\tif (v>cnt||b[v].x>b[u].y) return 0;\n\tif (b[v].y>r) return 0;\n\tint res=0;\n\tfor (int i=20;i>=0;i--)\n\t{\n\t\tif (f[u][i]<=cnt&&b[f[u][i]].y<=r)\n\t\t{\n\t\t\tu=f[u][i];\n\t\t\tif (!i) res^=1;\n\t\t}\n\t}\n\tfor (int i=20;i>=0;i--)\n\t{\n\t\tif (f[v][i]<=cnt&&b[f[v][i]].y<=r)\n\t\t{\n\t\t\tv=f[v][i];\n\t\t\tif (!i) res^=1;\n\t\t}\n\t}\n\tif (u==v) return 0;\n\tif (b[u].y==r||b[v].y==r) \n\t{\n\t\tif (res) return mod-1;\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0);cout.tie(0);\n\tcin >> n >> m;\n\tfor (int i=1;i<=n;i++) cin >> a[i].x >> a[i].y;\n\tsort(a+1,a+n+1);\n\tint mx=inf;\n\tfor (int i=n;i>=1;i--)\n\t{\n\t\tif (a[i].y>=mx) continue;\n\t\tmx=min(mx,a[i].y);\n\t\tb[++cnt]=a[i];\n\t}\n\tsort(b+1,b+cnt+1);\n\tint tmp=1;\n\tfor (int i=1;i<=cnt;i++)\n\t{\n\t\twhile (tmp<=cnt&&b[tmp].x<=b[i].y) tmp++;\n\t\tf[i][0]=tmp;\n\t}\n\tfor (int i=0;i<=20;i++) f[cnt+1][i]=cnt+1;\n\tfor (int i=1;i<=20;i++)\n\t{\n\t\tfor (int j=1;j<=cnt;j++)\n\t\t{\n\t\t\tf[j][i]=f[f[j][i-1]][i-1];\n\t\t}\n\t}\n\twhile (m--)\n\t{\n\t\tint l,r;\n\t\tcin >> l >> r;\n\t\tcout << query(l,r) << \"\\n\";\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1671336977,
        "uid": 151475,
        "name": "Little09",
        "ccfLevel": 8,
        "title": "CF1774G Segment Covering"
    },
    {
        "content": "\u975e\u5e38\u597d\u7684\u9898\u76ee\uff01\n\n\u4e0d\u5728\u533a\u95f4\u4e0a\u6316\u4e00\u4e9b\u6027\u8d28\u662f\u5f88\u96be\u505a\u7684\uff0c\u800c\u533a\u95f4\u6700\u5e38\u89c1\u4e14\u6700\u6709\u7528\u7684\u4e00\u4e2a\u6027\u8d28\u5c31\u662f **\u4e0d\u5305\u542b**\u3002\n\n\u8003\u8651\u4e24\u4e2a\u533a\u95f4 $[x', y']\\subset [x, y]$\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u5305\u542b $[x, y]$ \u7684\u65b9\u6848\uff0c\u662f\u5426\u9009\u62e9 $[x', y']$ \u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u603b\u8d21\u732e\u4e00\u6b63\u4e00\u8d1f\u62b5\u6d88\u6389\u4e86\uff0c\u76f8\u5f53\u4e8e\u94a6\u5b9a\u4e0d\u5305\u542b $[x, y]$\uff0c\u5373\u5c06\u5176\u5220\u53bb\u3002\u6700\u7ec8\u533a\u95f4\u4e92\u4e0d\u5305\u542b\uff0c\u6ee1\u8db3 $x_i$ \u9012\u589e\u4e14 $y_i$ \u9012\u589e\u3002\n\n\u6ce8\u610f\u662f\u5220\u53bb\u8f83\u5927\u7684\u533a\u95f4\u800c\u4e0d\u662f\u5220\u53bb\u8f83\u5c0f\u7684\u533a\u95f4\uff0c\u8fd9\u4fdd\u8bc1\u4e86\u5bf9\u4e8e\u4efb\u610f\u533a\u95f4 $[l, r]$\uff0c\u5bf9\u6240\u6709\u5305\u542b\u4e8e $[l, r]$ \u7684\u533a\u95f4\u505a\u4e0a\u8ff0\u64cd\u4f5c\u7b49\u4ef7\u4e8e\u5bf9\u6240\u6709\u533a\u95f4\u505a\u4e0a\u8ff0\u64cd\u4f5c\u540e\u5305\u542b\u4e8e $[l, r]$ \u7684\u533a\u95f4\u3002\n\n\u73b0\u5728\u8003\u8651\u4e00\u6b21\u8be2\u95ee\u4ee5\u53ca\u6240\u6709\u76f8\u5173\u533a\u95f4 $I_1, I_2, \\cdots, I_k$\u3002\u8bbe $f_i$ \u8868\u793a\u9009\u62e9 $I_i$ \u8986\u76d6 $[x_1, y_i]$ \u7684\u533a\u95f4\u6570\u4e3a\u5076\u6570\u7684\u65b9\u6848\u6570\u51cf\u53bb\u533a\u95f4\u6570\u4e3a\u5947\u6570\u7684\u65b9\u6848\u6570\uff0c\u5219 $f_i = -\\sum_{j = 1} ^ {i - 1} f_j [x_i\\leq y_j]$\u3002\n\n\u5206\u6790\uff1a\n\n$f_1$ \u663e\u7136\u4e3a $-1$\u3002\n\n\u5982\u679c $y_1 < x_2$\uff0c\u5219 $f_2 = 0$\uff0c\u4e14\u6839\u636e\u7aef\u70b9\u5355\u8c03\u7684\u6027\u8d28\uff0c\u63a5\u4e0b\u6765\u6240\u6709 $f$ \u4e5f\u7b49\u4e8e $0$\u3002\u5426\u5219 $f_2 = 1$\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u5bf9\u4e8e\u6240\u6709 $x_i\\leq y_1$ \u7684 $i$\uff0c\u5176 $f_i$ \u7b49\u4e8e $\\sum_{j = 1} ^ {i - 1} f_j = 0$\uff0c\u53ef\u4ee5\u8df3\u5230\u7b2c\u4e00\u4e2a\u4f7f\u5f97 $y_1 < x_i$ \u7684 $i$\u3002\u5982\u679c $y_2 < x_i$\uff0c\u8bf4\u660e $f_i = 0$\uff0c\u4e14\u63a5\u4e0b\u6765\u6240\u6709 $f$ \u4e5f\u7b49\u4e8e $0$\uff0c\u5426\u5219 $f_i = -f_2 = -1$\u3002\u8fdb\u5165\u4e86\u5f62\u5f0f\u76f8\u540c\u4f46\u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\u3002\n\n\u6211\u4eec\u5c1d\u8bd5\u63cf\u8ff0\u4e0a\u8ff0\u8fc7\u7a0b\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u5373\u7ef4\u62a4 $(u, v) = (1, 2)$\uff0c\u6bcf\u6b21\u4ea4\u66ff\u4ee4 $u\\gets p_u$ \u548c $v \\gets p_v$\uff0c\u5176\u4e2d $p_i$ \u8868\u793a\u4f7f\u5f97 $y_i < x_j$ \u7684\u6700\u5c0f\u7684 $j$\u3002\u4efb\u4f55\u65f6\u523b\uff0c\u82e5 $v\\gets p_v$ \u540e\u51fa\u73b0 $y_u < x_v$\uff0c\u6216 $u\\gets p_u$ \u540e $y_v < x_u$ \u5219\u65e0\u89e3\u3002\u4e0d\u59a8\u8bbe\u4f7f\u5f97\u7b2c\u4e00\u6b21\u51fa\u73b0\u65e0\u89e3\u7684\u60c5\u51b5\u662f $y_v < x_u$\uff0c\u5219\u63a5\u4e0b\u6765\u4ee4 $v\\gets p_v$ \u5c06\u4f7f\u5f97 $v = u$\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4tpfzymu.png)\n\n\u4e0d\u65ad\u6267\u884c\u64cd\u4f5c\uff0c\u76f4\u5230 $x_{p_u} > r$ \u4e14 $x_{p_v} > r$\u3002\u82e5 $u = v$\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u65ad\u5f00\u7684\u60c5\u51b5\uff0c\u65e0\u89e3\u3002\u5426\u5219\uff0c\u82e5 $x_u < r$ \u4e14 $x_v < r$\uff0c\u8bf4\u660e $f_k = 0$\u3002\u5426\u5219\u82e5 $x_u = r$ \u5219 $f_k = -1$\uff0c\u56e0\u4e3a $u$ \u7ef4\u62a4\u4e86\u8fc7\u7a0b\u4e2d\u6240\u6709 $f_u = -1$ \u7684\u4f4d\u7f6e\u3002\u540c\u7406\uff0c\u82e5 $x_v = r$ \u5219 $f_k = 1$\u3002\n\n\u52a0\u5165\u591a\u7ec4\u8be2\u95ee\uff0c$i\\to p_i$ \u8fde\u8fb9\u540e\u6811\u4e0a\u500d\u589e\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff1a\n\n- \u82e5\u4e0d\u5b58\u5728 $i$ \u4f7f\u5f97 $x_i = l$\uff0c\u65e0\u89e3\u3002\n- \u82e5\u4e0d\u5b58\u5728 $i$ \u4f7f\u5f97 $y_i = r$\uff0c\u65e0\u89e3\u3002\n- \u6ce8\u610f\u7279\u5224\u521d\u59cb\u60c5\u51b5\uff0c$y_u = r$ \u65f6\u7b54\u6848\u4e3a $-1$\uff0c$y_u > r$ \u65f6\u7b54\u6848\u4e3a $0$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}((n + q)\\log n)$\u3002[\u4ee3\u7801](https://codeforces.com/contest/1774/submission/185763315)\u3002",
        "postTime": 1671351379,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1774G Segment Covering"
    },
    {
        "content": "### [For a better experience please click here.](https://www.cnblogs.com/BrianPeng/p/17006947.html)\n\nSolved the first five questions with brute force. Still 19 points away from reclaiming purple. Hang on!\n\n# Solution: CF1774G Segment Covering\n\nLink to the question: [CF](https://codeforces.com/problemset/problem/1774/G) [Luogu](https://www.luogu.com.cn/problem/CF1774G)\n\n### Preface\n\nA brilliant and tricky question (tricky because modding $998244353$ is 'almost' of no use). This blog is an explanation and extension of the official tutorial.\n\nNotations: We use $[l_i,r_i]$ to denote an interval with index $i$ (or interval $i$) and $[x,y]$ to denote a query interval.\n\n### Analysis\n\nThe question asks about the difference between the number of ways of covering $[x,y]$ with even and odd numbers of existing intervals. As the question does not ask the numbers of ways with even and odd intervals separately, but the difference between them, we need to take advantage of it.\n\n#### Property 1\n\nSuppose an interval contains another interval, i.e. there exist indices $i,j$ such that $l_i\\leqslant l_j\\leqslant r_j\\leqslant r_i,$ or $[l_j,r_j]\\subseteq [l_i,r_i].$ If we use the interval $[l_i,r_i]$ but not $[l_j,r_j]$ in a covering, then we can always pair it with another covering that is the same as the previous one except that $[l_j,r_j]$ is also used. The two coverings differ by $[l_j,r_j]$ only, so one contributes to $f$ and another contributes to $g.$ In the end, they contribute zero to the final answer.\n\nTherefore, to have a non-zero contribution to the answer, we cannot use the interval $[l_i,r_i].$ In other words, we can remove $[l_i,r_i]$ from our list of intervals.\n\nAfter removing all 'useless' intervals, if we sort the remaining intervals by their left boundaries, their right boundaries will also be sorted.\n\n\n#### Property 2\n\nSuppose $[x,y]$ is the query interval and the intervals $[l_i,r_i]$ are trimmed (by Property 1) and sorted in a list. Then, the intervals that might have a chance to be chosen are those contained by $[x,y]$ and are consecutive in the sorted list. We let them be $\\{[l_i,r_i],[l_{i+1},r_{i+1}],\\cdots,[l_{j},r_{j}]\\}.$\n\nIf the list is empty or $l_i\\ne x$ or $r_i<l_{i+1}$ or $r_j\\ne y,$ the answer is obviously $0.$ So, we suppose $l_i=x,r_i\\geqslant l_{i+1},r_j=y,$ and we know that the interval $[l_i,r_i]$ must be chosen.\n\nWe consider the following case:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/d4vv0x6m.png)\n\nHere, the black line represents the query interval $[x,y],$ and the colored lines are intervals in our list. We know that the interval $i$ ($[l_i,r_i]$) must be chosen, so we color it green.\n\nNext, we see that in the picture, $l_{i+2}\\leqslant r_i,$ which means that the interval $i+2$ intersects with the interval $i.$ Thus, if we choose the interval $i+2$ in a covering, then choosing $i+1$ or not does not affect the covering. Similar to Property 1, this means that if we choose $i+2,$ the net contribution to the answer is $0.$ Therefore, the interval $i+2$ is useless in this case, and we color it red.\n\nIn a similar argument, all the intervals that intersect with the interval $i$ (except the interval $i+1$) are useless. We let the interval $k$ be the left-most interval that does not intersect with the interval $i.$\n\nAs we need to cover $[x,y]$ and the only interval that intersects with $i$ is $i+1,$ then we must choose $i+1,$ so we color it green. Now, the interval $i+1$ is a must-be-chosen interval and $k$ is a possible interval next to it. In the picture, we may see that $l_{k+1}\\leqslant r_{i+1},$ so the interval $k+1$ is useless (Why?). In fact, every interval with an index greater than $k$ that intersects with the interval $i+1$ is useless, and then $k$ must be chosen, being the only 'non-useless' interval that intersects with $i+1$.\n\nTo conclude, **a must-be-chosen interval and a possible interval next to it make all the other intervals intersecting with the first interval useless, and the second interval must-be-chosen.**\n\nFrom the above statement, we may show inductively that **every interval is either must-be-chosen or useless, so there is essentially at most one 'useful' covering.** If an even number of intervals are used, the answer is $1.$ If odd, then $-1.$ If the must-be-chosen intervals cannot cover $[x,y]$, then the answer is $0.$ The covering is like the following:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/b47sn311.png)\n\nNote that we split the intervals into two \"layers,\" and for every interval, only the intervals next to it intersect with it. In this picture, the interval $j$ is on the same layer as $i+1,$ so there are an even number of intervals and the answer is $1.$ If $j$ is on the layer of $i$, the answer is $-1.$\n\n#### A Hidden Tree Structure\n\nProperty 2 already gives us a method of finding the useful covering for a query $[x,y],$ which is recursively seeking the must-be-chosen intervals and deleting useless intervals until an interval has its right boundary equal to $y$ is chosen. However, as there are many queries, optimization is needed.\n\nLet's look closer at the picture above. The intervals are divided into two layers, one starting with $i$ and another starting with $i+1.$ Also, for every interval, if it is not the end, its next interval on the same layer is always **the first interval on its right that is disjoint with it.**\n\nTherefore, if we link each interval to the interval on its right that is disjoint with it, a **tree** is formed. For simplicity, we link all the intervals that have no \"parents\" to a virtual root node.\n\nHere is our final \"theorem\" of the question:\n\n$\\text{Theorem. }$There is a scheme of choosing the interval if and only if the interval $j$ is the ancestor of exactly one of $i$ and $i+1.$ If it is the ancestor of $i,$ then the answer is $-1.$ If $i+1,$ then the answer is $1.$\n\np.s. Please prove this theorem independently. There are two points worth noting. Firstly, if $j$ is the common ancestor of both $i$ and $i+1,$ then there is one point where intervals on both layers are disjoint with $j,$ so $[x,y]$ cannot be fully covered. Secondly, the official tutorial calculates the answer $\\pm 1$ by counting the number of intervals used, but actually, we only need to check whose ancestor $j$ is.\n\n### Implementation\n\n#### A trick of STL `set`: removing 'useless' intervals by Property 1\n\nIf an input interval contains another, we remove the larger one.\n\nThis can be done in multiple ways, we may sort the intervals in some manner and label the useless intervals, which is the method in the official tutorial.\n\nHere is another way: we may maintain a `set` of intervals such that no interval is contained by another, through a specifically designed $<$ relation.\n\nWe define that the intervals $[l_1,r_1]<[l_2,r_2]$ if $l_1<l_2$ **and** $r_1<r_2.$ We may see that if an interval contains another, they are considered 'equal' by `set` (because neither $<$ nor $>$).\n\nThe algorithm is: When we try to add $[l,r]$ into the `set`, we use `find()` method to look for the interval that is 'equal' to $[l,r].$ If it does not exist, then we simply insert $[l,r]$ into the `set`.\n\nSuppose it is $[a,b].$ If $[l,r]$ contains $[a,b],$ then we discard $[l,r].$\n\nLastly, if $[a,b]$ contains $[l,r],$ then we remove $[a,b]$ from the `set` **and check if there are other intervals in the `set` that contains $[l,r].$** After removing all of them, we insert $[l,r].$\n\n#### `upper_bound`: looking for 'parents'\n\nWe may use `vector` to store and index the ordered intervals remaining in the `set`. Now, for an interval $[l_i,r_i]$, its 'parent' is the first interval to its right that is disjoint to it. We may use bisection or two-pointers to achieve this. Here is another way:\n\nWe may still use STL and the $<$ relation we have designed. For the interval $[l_i,r_i],$ its 'parent' $[l_k,r_k]$ is exactly the first interval 'greater than' $[r_i,r_i],$ which may be found by `upper_bound`.\n\nSimilarly, we may use `upper_bound` to find the left-most interval for the query $[x,y],$ which is the first interval 'greater than' $[x-1,x-1].$\n\n#### Binary lifting: ancestor?\n\nNote that we need to check whether the interval $j$ (the unique interval $[l_j,r_j]$ such that $r_j=y$) exists and is the ancestor of $i$ or $i+1.$ This can be done by binary lifting, the most commonly used method for LCA. Starting from node $i$ (or $i+1$), we 'lift' it to the last interval with its right boundary $\\leqslant y.$ Then, if its right boundary $=y,$ then it is interval $j$ and is an ancestor of $i$ (or $i+1$).\n\n### Code\n\nHere is a sample code integrating all the ideas above. The binary-lifting array is `f` and the `vector` `v` stores all `non-useless` intervals in order, with indices from $0$ to `v.size()-1`. We let `v.size()` be the index of the virtual root node.\n\nWe use `li` to denote the first interval with its left boundary $\\geqslant x,$ which is the interval $i$ in our analysis section. Note that there are many special cases, please read the code and make sure you understand all of the special cases. \n\n```cpp\n//This program is written by Brian Peng.\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define Rd(a) (a=rd())\n#define Gc(a) (a=getchar())\n#define Pc(a) putchar(a)\nint rd(){\n\tint x;char c(getchar());bool k;\n\twhile(!isdigit(c)&&c^'-')if(Gc(c)==EOF)exit(0);\n\tc^'-'?(k=1,x=c&15):k=x=0;\n\twhile(isdigit(Gc(c)))x=x*10+(c&15);\n\treturn k?x:-x;\n}\nvoid wr(int a){\n\tif(a<0)Pc('-'),a=-a;\n\tif(a<=9)Pc(a|'0');\n\telse wr(a/10),Pc((a%10)|'0');\n}\nsigned const INF(0x3f3f3f3f),NINF(0xc3c3c3c3);\nlong long const LINF(0x3f3f3f3f3f3f3f3fLL),LNINF(0xc3c3c3c3c3c3c3c3LL);\n#define Ps Pc(' ')\n#define Pe Pc('\\n')\n#define Frn0(i,a,b) for(int i(a);i<(b);++i)\n#define Frn1(i,a,b) for(int i(a);i<=(b);++i)\n#define Frn_(i,a,b) for(int i(a);i>=(b);--i)\n#define Mst(a,b) memset(a,b,sizeof(a))\n#define File(a) freopen(a\".in\",\"r\",stdin),freopen(a\".out\",\"w\",stdout)\n#define N (200010)\nint m,q,x,y,f[N][20];\nstruct T{int l,r;\n\tbool operator<(T b)const{return l<b.l&&r<b.r;}\n};//The structure of intervals, with < relation defined.\nset<T>st;\nsigned main(){\n\tRd(m),Rd(q);\n\twhile(m--){\n\t\tRd(x),Rd(y);\n\t\tauto it(st.find({x,y}));//Find the interval in the set that contains\n        //or is contained by the input [x,y]\n\t\tif(it==st.end())st.insert({x,y});\n\t\telse if(x<=it->l&&it->r<=y)continue;//[x,y] contains a smaller interval\n\t\telse{\n\t\t\tst.erase(it);//[x,y] is contained by a larger interval\n\t\t\twhile((it=st.find({x,y}))!=st.end())st.erase(it);\n            //Remove all the intervals that contain it\n\t\t\tst.insert({x,y});\n\t\t}\n\t}\n\tvector<T>v(st.begin(),st.end());\n\tFrn0(i,0,v.size())\n        *f[i]=upper_bound(v.begin()+i+1,v.end(),T({v[i].r,v[i].r}))-v.begin();\n        //Use upper_bound and < relation to find the parent node\n\tint lg(log2(v.size()));\n\t*f[v.size()]=v.size();\n\tFrn1(j,1,lg)Frn1(i,0,v.size())f[i][j]=f[f[i][j-1]][j-1];//binary lifting\n\twhile(q--){\n\t\tRd(x),Rd(y);\n\t\tint li(upper_bound(v.begin(),v.end(),T({x-1,x-1}))-v.begin());\n        //li is the index of the first interval with left boundary >= x\n\t\tif(li==v.size()||v[li].l!=x||v[li].r>y){wr(0),Pe;continue;}\n        //Special cases: li not existing, li not covering x, li exceeding y\n\t\tif(v[li].r==y){wr(998244352),Pe;continue;}\n        //Special case: li is just [x,y]\n\t\tif(li+1==v.size()||v[li+1].r>y||v[li+1].l>v[li].r){wr(0),Pe;continue;}\n        //Special cases concerning li+1\n\t\tint u(li),u2(li+1);\n\t\tFrn_(i,lg,0)if(f[u][i]<v.size()&&v[f[u][i]].r<=y)u=f[u][i];\n\t\tFrn_(i,lg,0)if(f[u2][i]<v.size()&&v[f[u2][i]].r<=y)u2=f[u2][i];\n        //Binary lifting li and li+1 to the last intervals with right boundary <= y\n\t\tif(u==u2||v[u].r!=y&&v[u2].r!=y)wr(0),Pe;\n        //Common ancestor or both not reaching y\n\t\telse if(v[u].r==y)wr(998244352),Pe;//Ancestor of li\n\t\telse wr(1),Pe;//Ancestor of li+1.\n\t}\n\texit(0);\n}\n\n```\n\nTime Complexity: $O((m+q)\\log m)$\n\nMemory Complexity: $O(m\\log m)$\n\n### Extension\n\nSTL is a very powerful tool.\n\nIn this question, we use STL `set` to maintain a set of intervals that one does not contain another, but a specifically designed $<$ relation.\n\nBy designing different $<$ relations, we may maintain a `set` of intervals with different properties conveniently. For example, my blog\n\n[Solution: CF731D 80-th Level Archeology -- Letter, Interval, and Reverse Thinking](https://www.cnblogs.com/BrianPeng/p/16928706.html)\n\nsolves another CF problem by maintaining a `set` of mutually disjoint intervals by defining another $<$ relation between intervals.\n\n**Thanks for reading! See you next round!**\n",
        "postTime": 1672063158,
        "uid": 66199,
        "name": "Bring",
        "ccfLevel": 5,
        "title": "Solution: CF1774G Segment Covering"
    },
    {
        "content": "\u9a8c\u9898\u4eba\u62a5\u9053\uff0c\u4e00\u4e2a\u53e6\u7c7b\u505a\u6cd5\u3002\r\n\r\n\u5148\u8003\u8651 $l=1,r=n$ \u600e\u4e48\u505a\u3002\r\n\r\n\u8003\u8651\u5bb9\u65a5\uff0c\u94a6\u5b9a\u4e00\u90e8\u5206\u70b9\u4e0d\u88ab\u4efb\u4f55\u7ebf\u6bb5\u8986\u76d6\u3002\u4e00\u79cd\u94a6\u5b9a\u65b9\u6848\u7684\u8d21\u732e\u4e3a\u6240\u6709\u672a\u88ab\u94a6\u5b9a\u7684\u70b9\u7ec4\u6210\u7684\u6781\u957f\u8fde\u7eed\u6bb5\u7684\u8d21\u732e\u7684\u4e58\u79ef\u3002\r\n\r\n\u5bf9\u4e8e\u4e00\u4e2a\u672a\u88ab\u94a6\u5b9a\u7684\u70b9\u7ec4\u6210\u7684\u6781\u957f\u8fde\u7eed\u6bb5\uff0c\u8bbe $k$ \u4e3a\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u5305\u542b\u7684\u7ebf\u6bb5\u4e2a\u6570\u3002\r\n\r\n\u663e\u7136\u5982\u679c $k>0$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u7684\u8d21\u732e\u4e3a $0$\uff0c\u56e0\u4e3a\u5947\u5076\u62b5\u6d88\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u8981\u6c42 $k=0$\u3002\r\n\r\n\u8bbe $p_i$ \u8868\u793a\u6700\u5927\u7684\u6570\u6ee1\u8db3 $[p_i,i]$ \u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u6761\u7ebf\u6bb5\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4e3a $-\\infty$\uff0c$dp_i$ \u8868\u793a $[1,i]$ \u7684\u7b54\u6848\u3002\r\n\r\n\u6709\u8f6c\u79fb\u5f0f $dp_i=-\\sum\\limits_{j=p_i}^i dp_{j-1}$\u3002\r\n\r\n\u8bbe $s_i=\\sum\\limits_{j=0}^i dp_j$\u3002\r\n\r\n\u90a3\u4e48 $s_i-s_{i-1}=-(s_{i-1}-s_{p_i-2})$\uff0c$s_i=s_{p_i-2}$\u3002\r\n\r\n\u7b54\u6848\u5373\u4e3a $dp_n=s_n-s_{n-1}$\u3002\r\n\r\n\u8003\u8651\u5982\u4f55\u8ba1\u7b97 $s_n$\u3002\u5bf9\u4e8e $s_{n-1}$ \u53ef\u4ee5\u7c7b\u4f3c\u5730\u5904\u7406\u3002\r\n\r\n\u6211\u4eec\u4ece $i$ \u5411 $p_i-2$ \u8fde\u4e00\u6761\u8fb9\uff0c\u4ece $n$ \u5f00\u59cb\u4e0d\u65ad\u5f80\u524d\u8df3\u76f4\u5230 $<1$\u3002\r\n\r\n\u8bbe\u8df3\u5230\u7684\u4f4d\u7f6e\u4e3a $x$\u3002\u663e\u7136 $x$ \u53ea\u6709\u53ef\u80fd\u662f $0,-1,-\\infty$ \u4e09\u8005\u4e4b\u4e00\u3002\r\n\r\n\u5206\u6790\u53ef\u5f97\uff0c\u53ea\u6709 $x=-1$ \u65f6 $s_n=0$\u3002\u5426\u5219 $s_n=1$\u3002\r\n\r\n\u591a\u7ec4\u8be2\u95ee\u53ea\u9700\u8981\u7528\u500d\u589e\u4f18\u5316\u5f80\u524d\u8df3\u7684\u8fc7\u7a0b\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\r\n\r\n\u53c2\u8003\u4ee3\u7801\uff1a\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define N 200005\r\n#define MOD 998244353\r\nint n,m,ds[N],ps[N],fa[N][18];struct Node {int l,r;}a[N];\r\nint qId(int x) {return lower_bound(ds+1,ds+ds[0]+1,x)-ds;}\r\nint qry(int l,int r)\r\n{\r\n\tint t=qId(r);\r\n\tfor(int i=17;i>=0;--i) if(ps[fa[t][i]]>=l) t=fa[t][i];\r\n\tif(ps[t]>=l) t=fa[t][0];return ps[t]!=l-2;\r\n}\r\nint main()\r\n{\r\n\tscanf(\"%d %d\",&n,&m);ds[++ds[0]]=1e9;\r\n\tfor(int i=1,l,r;i<=n;++i)\r\n\t{\r\n\t\tscanf(\"%d %d\",&l,&r);++l;\r\n\t\tds[++ds[0]]=r-1;a[i]=(Node) {l,r};\r\n\t}sort(ds+1,ds+ds[0]+1);ds[0]=unique(ds+1,ds+ds[0]+1)-ds-1;\r\n\tfor(int i=1;i<=ds[0];++i) ps[i]=-1e9;\r\n\tfor(int i=1,t;i<=n;++i) t=qId(a[i].r),ps[t]=max(ps[t],a[i].l-2);\r\n\tfor(int i=1;i<=ds[0];++i)\r\n\t{\r\n\t\tif(i>1) ps[i]=max(ps[i],ps[i-1]);fa[i][0]=qId(ps[i]);\r\n\t\tfor(int j=1;j<=17;++j) fa[i][j]=fa[fa[i][j-1]][j-1];\r\n\t}\r\n\tfor(int i=1,l,r,t;i<=m;++i)\r\n\t{\r\n\t\tscanf(\"%d %d\",&l,&r);++l;t=qry(l,r)-qry(l,r-1);\r\n\t\tif(t<0) t+=MOD;printf(\"%d\\n\",t);\r\n\t}return 0;\r\n}\r\n```",
        "postTime": 1671350896,
        "uid": 119621,
        "name": "Kubic",
        "ccfLevel": 10,
        "title": "CF1774G Segment Covering"
    },
    {
        "content": "\u9996\u5148\u76f4\u63a5\u6c42 $f,g$ \u662f\u4e0d\u53ef\u505a\u7684\u3002 \u8003\u8651\u8fd9\u4e2a\u5947\u5076\u5dee\u7684\u6027\u8d28\u3002\n\n\u82e5\u65b9\u6848\u552f\u4e00\uff0c\u5219\u7b54\u6848\u4e3a 1 \u6216 -1\u3002\n\n\u82e5\u65b9\u6848\u4e0d\u552f\u4e00\uff1a\n\n\u82e5\u5b58\u5728\u7740\u4e00\u4e9b\u7ebf\u6bb5\u4e4b\u95f4\u6709\u7740\u5305\u542b\u5173\u7cfb\uff0c\u5219\u9009\u62e9\u4e86\u5927\u7ebf\u6bb5\uff0c\u662f\u5426\u9009\u62e9\u88ab\u5305\u542b\u7ebf\u6bb5\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u8fd9\u4e5f\u5bf9\u5e94\u7740\u4e0d\u540c\u7684\u5947\u5076\u6027\uff0c\u4e5f\u5c31\u662f\u8bf4\u7740\u8fd9\u79cd\u60c5\u51b5\u5bf9\u5947\u5076\u5dee\u662f\u6ca1\u6709\u8d21\u732e\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u5220\u6389\u6240\u6709\u5305\u542b\u5176\u5b83\u7ebf\u6bb5\u7684\u7ebf\u6bb5\u3002\n\n\u5219\u73b0\u5728\u7684\u7ebf\u6bb5\u6392\u5e8f\u540e\u7684 $r$ \u662f\u968f\u7740 $l$ \u589e\u52a0\u800c\u589e\u52a0\u7684\u3002\n\n\u8fd8\u6709\u54ea\u4e9b\u7ebf\u6bb5\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5bf9\u5947\u5076\u5dee\u662f\u6ca1\u6709\u8d21\u732e\u7684\uff1f \n\n![](https://cdn.luogu.com.cn/upload/image_hosting/bk5meblj.png)\n\n\u50cf\u8fd9\u6837\uff0c\u5219\u6709\u552f\u4e00\u7684\u9009\u62e9\u65b9\u6cd5\u4f7f\u5f97\u5e76\u96c6\u5408\u6cd5\uff0c\u7b54\u6848\u662f 1 \u6216 -1 \u3002\n\n\u82e5\u5b58\u5728\u8fd9\u79cd\u4e0b\u56fe\u4e2d\u7ea2\u7ebf\u8fd9\u6837\u7684\u7ebf\u6bb5\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7poh3o7m.png)\n\n\u5373\u88ab\u76f8\u90bb\u4e24\u6761\u7ebf\u6bb5\u7684\u5e76\u5305\u542b\u3002\n\n\u5219\u9009\u84dd\u8272\u7ebf\u6bb5\u540e\u65e0\u8bba\u662f\u5426\u9009\u53d6\u7ea2\u8272\u7ebf\u6bb5\uff0c\u90fd\u5408\u6cd5\uff0c\u5bf9\u5947\u5076\u5dee\u65e0\u8d21\u732e\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u6700\u7ec8\u90a3\u4e9b\u6709\u8d21\u732e\u7684\u7ebf\u6bb5\u5927\u6982\u662f\u957f\u8fd9\u6837\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/cu1kxgsg.png)\n\n\u7b2c\u4e00\u6761\u7ebf\u6bb5\u548c\u7b2c\u4e09\u6761\u4ea4\u96c6\u4e3a\u7a7a\uff0c\u7b2c\u4e8c\u6761\u548c\u7b2c\u56db\u6761\u4ea4\u96c6\u4e3a\u7a7a \u2026\u2026 \u8fd9\u6837\u4e0b\u53bb\u3002\n\n\u4e8e\u662f\u73b0\u5728\u5c31\u6709\u4e86 $O(nq)$ \u505a\u6cd5\uff1a \n\n\u5148\u5220\u53bb\u6240\u6709\u5305\u542b\u5173\u7cfb\u7684\u7ebf\u6bb5\uff0c\u518d\u628a\u6240\u6709 $[l,r]$ \u4e2d\u7684\u7ebf\u6bb5\u62ff\u51fa\u6765\uff0c\u5220\u53bb\u6240\u6709\u4e0a\u56fe\u4e2d\u7ea2\u8272\u7ebf\u6bb5\u90a3\u6837\u7684\u7ebf\u6bb5\uff0c\u7136\u540e\u5224\u65ad\u5269\u4e0b\u7684\u7ebf\u6bb5\u662f\u5426\u5f62\u6210\u4e00\u79cd\u8986\u76d6\u4ee5\u53ca\u5947\u5076\u6027\u3002\n\n\u8003\u8651\u4f18\u5316 \uff1a \u6211\u4eec\u5e76\u4e0d\u9700\u8981\u8003\u8651\u201c\u5220\u53bb\u201d\u7684\u7ebf\u6bb5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u90a3\u4e9b\u4fdd\u7559\u7684\u7ebf\u6bb5\uff0c\u800c\u4e0d\u662f\u54ea\u4e9b\u7ebf\u6bb5\u88ab\u5220\u53bb\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u6761\u7ebf\u6bb5\uff0c\u6211\u4eec\u8981\u627e\u7684\u5176\u5b9e\u662f\u540e\u9762\u7b2c\u4e00\u6761\u4e0e\u5b83\u4e0d\u4ea4\u7684\u7ebf\u6bb5\uff0c\u4ece\u4e0a\u56fe\u53ef\u4ee5\u6e05\u6670\u770b\u51fa\u3002 \n\n\u90a3\u4e48\u6211\u4eec\u627e\u5230\u7b2c\u4e00\u6761\uff0c\u7b2c\u4e8c\u6761\u7ebf\u6bb5\uff0c\u5e76\u5206\u522b\u5f80\u540e\u4e00\u76f4\u627e\u4e0b\u53bb\u5c31\u53ef\u4ee5\u627e\u5230\u8fd9\u4e9b\u6709\u7528\u7684\u7ebf\u6bb5\uff0c\u82e5\u51fa\u73b0\u4e86\u6ca1\u6709\u88ab\u8986\u76d6\u7684\u70b9\uff0c\u5219\u7b2c\u4e00\u6761\u548c\u7b2c\u4e8c\u6761\u7ebf\u6bb5\u4f1a\u8df3\u5230\u540c\u4e00\u6761\u7ebf\u6bb5\u4e0a\u3002\n\n\u627e\u4e0b\u4e00\u6761\u7ebf\u6bb5\u7684\u8fc7\u7a0b\u53ef\u4ee5\u4f7f\u7528\u500d\u589e\u4f18\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(q\\log n)$\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u5b9e\u73b0\uff0c\u6709\u4ee5\u4e0b\u7ec6\u8282\u9700\u8981\u5224\u65ad\uff1a\n\n\u6ca1\u6709 $l$ \u5f00\u5934\u7684\u7ebf\u6bb5\u3002\n\n\u6ca1\u6709 $r$ \u7ed3\u5c3e\u7684\u7ebf\u6bb5\u3002\n\n\u7b2c\u4e8c\u6761\u7ebf\u6bb5\u548c\u7b2c\u4e00\u6761\u7ebf\u6bb5\u4e0d\u4ea4\u3002\n\n\u7b2c\u4e8c\u6761\u7ebf\u6bb5\u8d85\u51fa\u4e86 $r$\u3002\n\n[\u4ee3\u7801  ](https://codeforces.com/contest/1774/submission/186659952)(\u5b9e\u73b0\u8f83\u4e3a\u590d\u6742\uff0c\u5728 CF \u6700\u4f18\u89e3\u7b2c\u4e00\u9875\u3002)",
        "postTime": 1673190699,
        "uid": 161697,
        "name": "\u10e6\ua9bf\u0fd0",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011Segment Covering \u6570\u636e\u7ed3\u6784 ad-hoc \u7ed3\u8bba"
    }
]