[
    {
        "content": "\u64cd\u4f5c\u6570\u4e0d\u8d85\u8fc7 $2m$ \u4f3c\u4e4e\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u63d0\u793a\u3002\n\n\u6bcf\u6b21\u8981\u627e\u4e00\u68f5\u751f\u6210\u6811\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e8e\u662f\u5bf9\u539f\u56fe\u5efa\u51fa\u4e00\u68f5 $\\text{dfs}$ \u6811\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u8fb9\u5462\uff1f\u5b83\u4eec\u53ef\u4ee5\u66ff\u6362\u6389 $\\text{dfs}$ \u6811\u4e0a\u7684\u8fb9\u3002\n\n\u6bd4\u5982\u8bbe\u4e00\u6761\u975e\u6811\u8fb9\u4e3a $x$\uff0c\u5b83\u53ef\u4ee5\u66ff\u6362\u6389 $y$\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bf9\u66ff\u6362\u524d\u540e\u7684\u4e24\u68f5\u751f\u6210\u6811\u5206\u522b\u8fdb\u884c\u8fdb\u884c\u64cd\u4f5c\uff0c\u7b49\u4ef7\u7684\u505a\u5230 $x$ \u8fb9 $+e$\uff0c$y$ \u8fb9 $-e$\uff0c\u5176\u4ed6\u8fb9\u6743\u503c\u4e0d\u53d8\u3002\n\n\u5c06\u53ef\u4ee5\u4e92\u76f8\u66ff\u6362\u7684\u6570\u518d\u8fde\u8fb9\u5efa\u7acb\u65b0\u56fe\uff0c\u4f1a\u5f62\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\uff0c\u5c06\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u62bd\u51fa\u4e00\u68f5\u751f\u6210\u6811\u4fdd\u7559\uff0c\u56fe\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u68ee\u6797\u3002\u4f1a\u53d1\u73b0\u4e4b\u524d\u5bf9\u8fb9\u52a0\u51cf $e$ \u7684\u64cd\u4f5c\u662f\u4e0d\u6539\u53d8\u8fb9\u6743\u603b\u548c\u7684\uff0c\u552f\u4e00\u80fd\u6539\u53d8\u8fb9\u6743\u603b\u548c\u7684\u5c31\u53ea\u6709\u5bf9\u6700\u5f00\u59cb\u7684\u751f\u6210\u6811\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ea\u9700\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u80fd\u64cd\u4f5c\u6700\u5f00\u59cb\u7684\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u7684\u548c\u4e3a\u5b83\u4eec\u6700\u7ec8\u9700\u8981\u8fbe\u5230\u7684\u548c\uff0c\u80fd\u6ee1\u8db3\u5c31\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u7ec4\u89e3\uff08\u6bcf\u68f5\u6811\u91cc\u9762\u4ece\u53f6\u5b50\u5f80\u4e0a\u6ee1\u8db3\u6bcf\u4e2a\u70b9\u9700\u6c42\u5c31\u884c\u4e86\uff09\uff0c\u5b9e\u73b0\u7684\u7cbe\u7ec6\u4e00\u70b9\u53ef\u4ee5\u505a\u5230 $m$ \u6b21\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(nm)$\u3002\n\n\uff08~~\u5f00\u59cb\u548c\u4e0e\u4e2a\u6570\u6a21\u610f\u4e49\u4e0b\u5747\u4e3a $0$ \u6ca1\u5224\u65ad\u88ab\u5361\u50bb\u4e86~~\uff09\n\n\u53ef\u4ee5\u987a\u4fbf\u770b\u4e00\u4e0b [P8156](https://www.luogu.com.cn/problem/P8156)\uff0c\u540c\u6837\u7684\u5957\u8def\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define mp make_pair\n#define inf 1e9\n#define pii pair <int, int>\nint mod = 1e9 + 7;\ninline int read () {\n\tint x = 0, f = 1;\n\tchar ch = getchar ();\n\twhile (ch < '0' || ch > '9') f = ((ch == '-') ? -1 : f), ch = getchar ();\n\twhile (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar ();\n\treturn x * f;\n}\ninline void write (int x) {\n\tif (x < 0) x = -x, putchar ('-');\n\tif (x >= 10) write (x / 10);\n\tputchar (x % 10 + '0');\n}\ninline int quickmod (int x, int y) {\n\tx %= mod;\n\tint Ans = 1;\n\twhile (y) {\n\t\tif (y & 1) Ans = (Ans * x) % mod;\n\t\tx = (x * x) % mod;\n\t\ty >>= 1;\n\t}\n\treturn Ans;\n}\ninline void Add(int &x, int y) {\n\tx += y;\n\tif(x >= mod) x -= mod;\n}\ninline void Dec(int &x, int y) {\n\tx -= y;\n\tif(x < 0) x += mod;\n}\nstruct UnionSet {\n\tint fa[1005];\n\tinline void makeSet(int x) {\n\t\tfor(int i = 1; i <= x; i++) fa[i] = i;\n\t}\n\tint findSet(int x) {\n\t\tif(x == fa[x]) return x;\n\t\treturn fa[x] = findSet(fa[x]);\n\t}\n\tvoid unionSet(int x, int y) {\n\t\tx = findSet(x), y = findSet(y);\n\t\tif(x == y) return ;\n\t\tfa[x] = y; \n\t}\n}U;\nint n, m;\nstruct Edge {\n\tint u, v, e;\n}edge[1005];\nstruct st {\n\tint v, id;\n\tst() {}\n\tst(int A, int B) {\n\t\tv = A, id = B;\n\t}\n};\nvector <st> G[1005];\nvector <int> V[1005];\nint Fa[1005], dep[1005], val[1005], vis[1005];\nvector <int> bas, P;\nvector <vector <int> > Ans;\nint visbas[1005];\nvoid dfs(int x, int fa) {\n\tFa[x] = fa, dep[x] = dep[fa] + 1;\n\tvis[x] = 1;\n\tfor(auto y : G[x]) {\n\t\tif(vis[y.v]) continue;\n\t\tbas.push_back(y.id);\n\t\tvisbas[y.id] = 1;\n\t\tval[y.v] = y.id;\n\t\tdfs(y.v, x); \n\t}\n}\nint cnt;\ninline void print(int x, int y, int e) {//x += e, y -= e;\n\tDec(edge[x].e, e), Add(edge[y].e, e); \n\tif(visbas[x]) {\n\t\tcnt = 0; \n\t\tP[cnt++] = (-e % mod + mod) % mod;\n\t\tfor(auto i : bas) if(i != x) P[cnt++] = i;\n\t\tP[cnt++] = y;\n\t\tAns.push_back(P);\n\t\t\n\t\tcnt = 0;\n\t\tP[cnt++] = (e % mod + mod) % mod;\n\t\tfor(auto i : bas) P[cnt++] = i;\n\t\tAns.push_back(P);\n\t}\n\telse {\n\t\tcnt = 0;\n\t\tP[cnt++] = (e % mod + mod) % mod;\n\t\tfor(auto i : bas) if(i != y) P[cnt++] = i;\n\t\tP[cnt++] = x;\n\t\tAns.push_back(P);\n\t\t\n\t\tcnt = 0;\n\t\tP[cnt++] = (-e % mod + mod) % mod;\n\t\tfor(auto i : bas) P[cnt++] = i;\n\t\tAns.push_back(P);\n\t}\n}\n\ninline void add(int u, int v) {\n\tif(U.findSet(u) == U.findSet(v)) return ;\n\tV[u].push_back(v);\n\tV[v].push_back(u);\n//\tprintf(\"[%lld %lld]\\n\", u, v);\n\tU.unionSet(u, v);\n}\nint s[1005], op[1005];\nvoid dfs2(int x, int fa) {\n\tfor(auto y : V[x]) {\n\t\tif(y == fa) continue;\n\t\tdfs2(y, x);\n\t}\n\tif(fa) print(x, fa, edge[x].e);\n\telse if(edge[x].e) {\n\t\tputs(\"-1\");\n\t\texit(0);\n\t}\n}\nsigned main () {\n//\tfreopen (\"1.in\", \"r\", stdin);\n//\tfreopen (\".out\", \"w\", stdout);\n\tn = read(), m = read(), mod = read();\n\tP.resize(n);\n\tfor(int i = 1; i <= m; i++) {\n\t\tint u = read(), v = read(), e = read();\n\t\tedge[i].u = u, edge[i].v = v, edge[i].e = e;\n\t\tG[u].push_back(st(v, i));\n\t\tG[v].push_back(st(u, i));\n\t}\n\tdfs(1, 0);\n\tU.makeSet(m);\n\tfor(int i = 1; i <= m; i++) {\n\t\tif(visbas[i]) continue;\n\t\tint u = edge[i].u, v = edge[i].v;\n\t\twhile(u != v) {\n\t\t\tif(dep[u] < dep[v]) swap(u, v);\n\t\t\tadd(i, val[u]);\n\t\t\tu = Fa[u];\n\t\t}\n\t}\n\tmemset(vis, 0, sizeof vis);\n\tfor(int i = 1; i <= m; i++) {\n\t\top[U.findSet(i)] += visbas[i];\n\t\tAdd(s[U.findSet(i)], edge[i].e);\n\t}\n\tint nd = 0;\n\tfor(int i = 1; i <= m; i++) if(!nd) nd = s[U.findSet(i)] * quickmod(op[U.findSet(i)], mod - 2) % mod;\n\tfor(int i = 1; i <= m; i++) if(nd * op[U.findSet(i)] % mod != s[U.findSet(i)]) return printf(\"-1\\n\") & 0;\n\n\tcnt = 0;\n\tP[cnt++] = (nd % mod + mod) % mod;\n\tfor(auto i : bas) P[cnt++] = i, Dec(edge[i].e, nd);\n\tAns.push_back(P);\n\t\n\tfor(int i = 1; i <= m; i++) if(U.findSet(i) == i) dfs2(i, 0); \n//\treturn 0;\n\twrite((int)Ans.size()), putchar('\\n');\n\tfor(auto x : Ans) {\n\t\tfor(auto y : x) write(y), putchar(' ');\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n/*\n2 2 2\n1 2 1\n2 1 0\n*/\n```",
        "postTime": 1672988327,
        "uid": 161847,
        "name": "Para",
        "ccfLevel": 0,
        "title": "CF1773J Jumbled Trees"
    },
    {
        "content": "\u5c06\u751f\u6210\u6811\u89c6\u4e3a\u957f\u5ea6\u4e3a $m$ \u7684\u5217\u5411\u91cf\uff0c\u7b2c $i$ \u4e2a\u6570\u8868\u793a\u7b2c $i$ \u6761\u8fb9\u662f\u5426\u5728\u751f\u6210\u6811\u5185\u3002\u751f\u6210\u6811\u6570\u91cf\u5f88\u5927\uff0c\u4f46\u6211\u4eec\u53ea\u8981 $m$ \u68f5\u7ebf\u6027\u65e0\u5173\u7684\u751f\u6210\u6811\u3002\u6216\u8005\u8bf4\uff0c\u6c42\u51fa\u6240\u6709\u751f\u6210\u6811\u7684 \u201c\u57fa\u751f\u6210\u6811\u201d\u3002\n\n\u8fd9\u4f3c\u4e4e\u5f88\u56f0\u96be\uff0c\u6211\u4eec\u731c\u4e00\u4e9b\u7ed3\u8bba\uff1a\u627e\u51fa\u4efb\u610f\u751f\u6210\u6811 $T$\uff0c\u8003\u8651\u5c06\u4e00\u6761\u6811\u8fb9\u66ff\u6362\u4e3a\u4e00\u6761\u975e\u6811\u8fb9\u5f62\u6210\u7684\u751f\u6210\u6811 $T'$\u3002**\u6240\u6709 $T'$ \u7684\u5217\u5411\u91cf\u7ec4 $B$ \u548c\u6240\u6709\u751f\u6210\u6811\u7684\u5217\u5411\u91cf\u7ec4 $A$ \u5217\u7b49\u4ef7**\u3002\n\n\u8fd9\u4e2a\u7ed3\u8bba\u5f88\u79bb\u8c31\uff0c\u6211\u4e0d\u592a\u4e86\u89e3\u5b83\u7684\u672c\u8d28\u3002\n\n\u8bc1\u660e\uff1a$T' - T$ \u5f97\u5230\u4e00\u4e2a\u6070\u6709\u4e00\u4e2a $1$ \u548c $-1$\uff0c\u5176\u5b83\u4f4d\u7f6e\u5747\u4e3a $0$ \u7684\u5411\u91cf\u3002\u5b83\u8868\u793a **\u8fb9\u7684\u66ff\u6362**\u3002\u5728\u4e24\u6761\u8fb9\u4e4b\u95f4\u76f8\u8fde\uff0c\u8868\u793a\u5b83\u4eec\u53ef\u76f8\u4e92\u66ff\u6362\uff0c\u5219\u4e00\u6761\u8fb9\u53ef\u4ee5\u66ff\u6362\u4e3a\u5176\u8fde\u901a\u5757\u5185\u4efb\u610f\u8fb9\u3002\n\n- \u56e0\u4e3a $B$ \u662f $A$ \u7684\u5b50\u96c6\uff0c\u6240\u4ee5 $B$ \u80fd\u7ec4\u5408\u51fa\u7684\u5217\u5411\u91cf\uff0c$A$ \u540c\u6837\u80fd\u7ec4\u5408\u51fa\u3002\n- \u8003\u8651\u5f62\u6210 $T'$ \u548c\u8fb9\u7684\u66ff\u6362\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u770b\u51fa **\u540c\u7b80\u5355\u73af\u5185\u7684\u8fb9\u53ef\u76f8\u4e92\u66ff\u6362**\uff0c\u8fdb\u4e00\u6b65\u63a8\u51fa **\u540c\u70b9\u53cc\u5185\u7684\u8fb9\u53ef\u76f8\u4e92\u66ff\u6362**\u3002\u5c06\u539f\u56fe\u70b9\u53cc\u7f29\u70b9\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u751f\u6210\u6811 $U$\uff0c\u5b83\u76f8\u5bf9\u4e8e $T$ \u53ea\u6539\u53d8\u4e86\u6bcf\u4e2a\u70b9\u53cc\u5185\u90e8\u7684\u751f\u6210\u6811\u5f62\u6001\u3002\u8fd9\u8bf4\u660e $U$ \u4e00\u5b9a\u53ef\u4ee5\u7531 $T$ \u66ff\u6362\u5f97\u5230\uff0c\u6240\u4ee5 $B$ \u7684\u6bcf\u4e2a\u5217\u5411\u91cf\u80fd\u88ab $A$ \u7ec4\u5408\u51fa\uff0c\u8fdb\u800c\u8bc1\u660e $A$ \u80fd\u7ec4\u5408\u51fa\u7684\u5217\u5411\u91cf\uff0c$B$ \u540c\u6837\u80fd\u7ec4\u5408\u51fa\u3002\n\n\u7efc\u4e0a\uff0c$A, B$ \u5217\u7b49\u4ef7\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5f97\u5230 $m ^ 2$ \u4e2a\u751f\u6210\u6811\uff0c\u8fd8\u4e0d\u591f\u4f18\u79c0\u3002\u4f46\u6ce8\u610f\u5230\u82e5 $T' - T$ \u7684\u66ff\u6362\u5173\u7cfb\u6210\u73af\uff0c\u5220\u53bb\u73af\u4e0a\u4efb\u610f\u4e00\u6761\u8fb9\u5747\u4fdd\u7559\u6240\u6709\u66ff\u6362\u5173\u7cfb\u3002\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u662f\u5426\u6210\u73af\u5373\u53ef\u3002\u5177\u4f53\u5730\uff0c\u5bf9\u4e8e\u6bcf\u6761\u975e\u6811\u8fb9 $e_i$ \u548c\u5176\u4e24\u7aef\u4e4b\u95f4\u7684\u6240\u6709\u6811\u8fb9 $e_j$\uff0c\u82e5 $(i, j)$ \u5728 \u201c\u66ff\u6362\u56fe\u201d \u4e0a\u4e0d\u8fde\u901a\uff0c\u5219\u5c06 $e_j$ \u66ff\u6362\u4e3a $e_i$ \u52a0\u5165 $B$\uff0c\u5e76\u5728\u66ff\u6362\u56fe\u4e0a\u8fde\u63a5 $(i, j)$\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5f97\u5230\u81f3\u591a $m - 1$ \u68f5\u751f\u6210\u6811\u3002\u52a0\u4e0a $T$ \u672c\u8eab\uff0c\u5171\u6709\u4e0d\u8d85\u8fc7 $m$ \u68f5\u751f\u6210\u6811\u3002\u9ad8\u65af\u6d88\u5143\u7684\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(m ^ 3)$\uff0c\u4f7f\u7528\u53d6\u6a21\u4f18\u5316\u540e\u53ef\u4ee5\u901a\u8fc7\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nusing ull = unsigned long long;\nusing LL = __uint128_t;\nstruct FastMod {\n  ull b, m;\n  FastMod() {}\n  FastMod(ull b): b(b), m((LL(1) << 64) / b) {}\n  ull R(ull a) {\n    ull q = ull((LL(a) * m) >> 64);\n    ull r = a - q * b;\n    return r >= b ? r - b : r;\n  }\n} F;\n\nconstexpr int N = 1e3 + 5;\nint debug, y[N];\nint n, m, p;\nvoid add(int &x, int y) {\n  x += y, x >= p && (x -= p);\n}\nint ksm(int a, int b) {\n  int s = 1;\n  while(b) {\n    if(b & 1) s = F.R(1ll * s * a);\n    a = F.R(1ll * a * a), b >>= 1;\n  }\n  return s;\n}\nint inv(int x) {\n  return ksm(x, p - 2);\n}\n\nint u[N], v[N], x[N], in[N];\nstruct dsu {\n  int fa[N];\n  void init(int n) {\n    for(int i = 0; i <= n; i++) fa[i] = i;\n  }\n  int find(int x) {\n    return fa[x] == x ? x : fa[x] = find(fa[x]);\n  }\n  bool check(int u, int v) {\n    return find(u) == find(v);\n  }\n  void merge(int u, int v) {\n    fa[find(u)] = find(v);\n  }\n} f;\n\nvector<pair<int, int>> e[N];\nint fa[N], dep[N], fid[N];\nvoid dfs(int id, int ff) {\n  fa[id] = ff, dep[id] = dep[ff] + 1;\n  for(auto _ : e[id]) {\n    int it = _.first;\n    if(it == ff) continue;\n    fid[it] = _.second, dfs(it, id);\n  }\n}\n\nint cur = 1, A[N][N], B[N][N], Main[N];\nvoid addTree(int ad, int de) {\n  cur++;\n  for(int i = 1; i <= m; i++)\n    if(i == ad || (i != de && in[i]))\n      A[i][cur] = 1;\n}\nvoid Gauss() {\n  int r = 1;\n  for(int c = 1; c <= cur + 1 && r <= m; c++) {\n    for(int _r = r + 1; _r <= m && !A[r][c]; _r++) {\n      if(A[_r][c]) swap(A[r], A[_r]);\n    }\n    if(!A[r][c]) continue;\n    if(c == cur + 1) puts(\"-1\"), exit(0);\n    int iv = inv(A[r][c]);\n    for(int _c = c; _c <= cur + 1; _c++) A[r][_c] = F.R(1ll * A[r][_c] * iv);\n    for(int _r = 1; _r <= m; _r++) {\n      if(r == _r) continue;\n      for(int _c = cur + 1; _c >= c; _c--)\n        add(A[_r][_c], p - F.R(1ll * A[r][_c] * A[_r][c]));\n    }\n    Main[r] = c, r++;\n  }\n}\n\nint main() {\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"1.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"1.out\", \"w\", stdout);\n    debug = 1;\n  #endif\n  cin >> n >> m >> p;\n  F = FastMod(p);\n  f.init(n);\n  for(int i = 1; i <= m; i++) {\n    cin >> u[i] >> v[i] >> x[i];\n    if(!f.check(u[i], v[i])) {\n      in[i] = A[i][1] = 1;\n      e[u[i]].push_back({v[i], i});\n      e[v[i]].push_back({u[i], i});\n      f.merge(u[i], v[i]);\n    }\n  }\n  dfs(1, 0);\n  f.init(m);\n  for(int i = 1; i <= m; i++) {\n    if(in[i]) continue;\n    vector<int> arr;\n    int x = u[i], y = v[i];\n    while(x != y) {\n      if(dep[x] < dep[y]) swap(x, y);\n      arr.push_back(fid[x]), x = fa[x];\n    }\n    int R = arr.back();\n    addTree(i, R), arr.pop_back();\n    for(int it : arr) {\n      if(f.check(it, R)) continue;\n      f.merge(it, R), addTree(i, it);\n    }\n  }\n  for(int i = 1; i <= m; i++) A[i][cur + 1] = x[i];\n  memcpy(B, A, sizeof(B));\n  Gauss();\n  cout << cur << \"\\n\";\n  for(int i = 1; i <= cur; i++) {\n    int v = 0;\n    for(int j = 1; j <= cur; j++) {\n      if(Main[j] == i) v = A[j][cur + 1];\n    }\n    cout << v << \" \";\n    for(int j = 1; j <= m; j++)\n      if(B[j][i]) {\n        cout << j << \" \";\n        add(y[j], v);\n      }\n    cout << \"\\n\";\n  }\n  for(int i = 1; i <= m; i++) assert(x[i] == y[i]);\n  if(debug) {\n    cout << \"compare: \\n\";\n    for(int i = 1; i <= m; i++) cout << i << \" \" << x[i] << \" \" << y[i] << \"\\n\";\n  }\n  return 0;\n}\n/*\ng++ J.cpp -o J -std=c++14 -O2 -DALEX_WEI\n*/\n```\n\n\u5b9e\u9645\u4e0a\uff0c\u4ece\u66ff\u6362\u5173\u7cfb\u7684\u89d2\u5ea6\u8003\u8651\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5217\u4f7f\u7528\u4e3b\u5143\u6cd5\uff0c\u5373 $I_1x_1 + I_2x_2 = J$ \u5199\u6210 $I_1(x_1 + x_2) + (I_2 - I_1) x_2$\uff0c\u505a\u5230 $\\mathcal{O}(m)$ \u6c42\u89e3\u65b9\u7a0b\u3002\u4f46\u6784\u9020\u65b9\u6848\u4f7f\u5f97\u590d\u6742\u5ea6\u4e0b\u754c\u4e3a $\\mathcal{O}(nm)$\u3002",
        "postTime": 1670978328,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1773J Jumbled Trees"
    }
]