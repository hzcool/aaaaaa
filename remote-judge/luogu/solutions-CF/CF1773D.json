[
    {
        "content": "#### *D. Dominoes\n\n\u5224\u5b9a\u591a\u7c73\u8bfa\u9aa8\u724c\u662f\u5426\u53ef\u4ee5\u5bc6\u94fa\u6574\u4e2a\u7f51\u683c\uff1a\u9ed1\u767d\u67d3\u8272\uff0c\u4e00\u4e2a\u591a\u7c73\u8bfa\u9aa8\u724c\u4ee3\u8868\u4e00\u6761\u8fb9\uff0c\u53ef\u5bc6\u94fa\u7684\u5145\u8981\u6761\u4ef6\u4e3a\u4e8c\u5206\u56fe\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u82e5\u9ed1\u767d\u683c\u6570\u91cf\u76f8\u5dee\u8d85\u8fc7 $2$ \u6216\u4e3a\u5947\u6570\uff0c\u5220\u53bb\u4efb\u610f\u4e24\u683c\u5747\u65e0\u89e3\u3002\u5426\u5219\u82e5\u76f8\u5dee $2$\uff0c\u5219\u5fc5\u987b\u5220\u53bb\u4e24\u4e2a\u8f83\u591a\u989c\u8272\u7684\u683c\u5b50\u3002\u5426\u5219\u76f8\u7b49\uff0c\u5fc5\u987b\u5220\u53bb\u4e24\u4e2a\u4e0d\u540c\u989c\u8272\u7684\u683c\u5b50\u3002\u56e0\u6b64\uff0c\u5220\u53bb\u4e24\u683c\u6709\u89e3\u7684\u65b9\u6848\u6570\u4e0d\u8d85\u8fc7 $\\frac {n ^ 2} 4$\u3002\n\n\u56e0\u4e3a\u7b54\u6848\u53ea\u8981\u548c $10 ^ 6$ \u53d6\u8f83\u5c0f\u503c\uff0c\u6240\u4ee5\u82e5\u7a7a\u5730\u6570\u91cf $N > 2000$ \u5219\u7b54\u6848\u4e00\u5b9a\u4e3a $10 ^ 6$\u3002\n\n\u82e5 $N$ \u4e3a\u5947\u6570\uff0c\u65e0\u8bba\u600e\u4e48\u5220\u90fd\u65e0\u89e3\u3002\u5426\u5219\uff0c\u679a\u4e3e\u5220\u53bb\u7684\u683c\u5b50\u4e4b\u4e00\uff0c\u6c42\u51fa\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u82e5\u5339\u914d\u5927\u5c0f\u5c0f\u4e8e $\\frac N 2 - 1$\uff0c\u65e0\u8bba\u600e\u4e48\u5220\u90fd\u65e0\u89e3\u3002\u5426\u5219\uff0c\u82e5\u5220\u53bb\u540e\u6709\u89e3\uff0c\u4e0d\u59a8\u8bbe\u5de6\u90e8\u56fe\u8f83\u5927\uff0c\u5219\u53e6\u4e00\u4e2a\u683c\u5b50\u4e3a\u5339\u914d\u7684\u975e\u5fc5\u7ecf\u5de6\u90e8\u70b9\u3002\n\n\u6c42\u5339\u914d\u5fc5\u7ecf\u70b9\u662f\u7ecf\u5178\u95ee\u9898\uff1a\u4ece\u6bcf\u4e2a\u5de6\u90e8\u975e\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u904d\u5386\u5b83\u7684\u6240\u6709\u53f3\u90e8\u5339\u914d\u70b9\u90bb\u5c45\u5bf9\u5e94\u7684\u5de6\u90e8\u5339\u914d\u70b9\uff0c\u5219\u6240\u6709\u88ab\u904d\u5386\u5230\u7684\u5de6\u90e8\u5339\u914d\u70b9\u5747\u4e3a\u975e\u5fc5\u7ecf\u70b9\uff0c\u56e0\u4e3a\u4ece\u5b83\u4eec\u5f00\u59cb\u5b58\u5728\u4ea4\u9519\u8def\u5f84\u4f7f\u5f97\u7ec8\u70b9\u4e3a\u975e\u5339\u914d\u70b9\uff0c\u5c06\u5339\u914d\u8fb9\u6362\u6210\u8def\u5f84\u4e0b\u4e00\u6761\u8fb9\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(N ^ {2.5})$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconstexpr int L = 1e3 + 5;\nconstexpr int N = 2e3 + 5;\nconstexpr int M = 2e4 + 5;\nconstexpr int inf = 1000000;\nconstexpr int dx[4] = {-1, 0, 0, 1};\nconstexpr int dy[4] = {0, -1, 1, 0};\n\nint n, m, cnt, type[N], label[L][L];\nint ban, node, ans;\nvector<int> e[N];\n\nstruct flow {\n  int cnt = 1, hd[N], nxt[M << 1], to[M << 1], limit[M << 1];\n  void clear() {\n    memset(hd, 0, sizeof(hd));\n    cnt = 1;\n  }\n  void add(int u, int v, int w) {\n    nxt[++cnt] = hd[u], hd[u] = cnt, to[cnt] = v, limit[cnt] = w;\n    nxt[++cnt] = hd[v], hd[v] = cnt, to[cnt] = u, limit[cnt] = 0;\n  }\n  int T, cur[N], dis[N];\n  int dfs(int id, int res) {\n    if(id == T) return res;\n    int flow = 0;\n    for(int i = cur[id]; i && res; i = nxt[i]) {\n      cur[id] = i;\n      int c = min(limit[i], res), it = to[i];\n      if(dis[id] + 1 == dis[it] && c) {\n        int k = dfs(it, c);\n        flow += k, res -= k, limit[i] -= k, limit[i ^ 1] += k;\n      }\n    }\n    if(!flow) dis[id] = -1;\n    return flow;\n  }\n  int maxflow(int s, int t) {\n    T = t;\n    int flow = 0;\n    while(1) {\n      queue<int> q;\n      memset(dis, -1, sizeof(dis));\n      memcpy(cur, hd, sizeof(cur));\n      q.push(s), dis[s] = 0;\n      while(!q.empty()) {\n        int t = q.front();\n        q.pop();\n        for(int i = hd[t]; i; i = nxt[i])\n          if(dis[to[i]] == -1 && limit[i])\n            dis[to[i]] = dis[t] + 1, q.push(to[i]);\n      }\n      if(dis[t] == -1) return flow;\n      flow += dfs(s, N);\n    }\n  }\n} g;\n\nint mx[N], my[N], vis[N];\nvoid fill(int id) {\n  if(vis[id]) return;\n  vis[id] = 1;\n  for(int it : e[id]) if(my[it]) fill(my[it]);\n}\n\nint main() {\n  ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"1.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"1.out\", \"w\", stdout);\n  #endif\n  cin >> n >> m;\n  for(int i = 1; i <= n; i++) {\n    for(int j = 1; j <= m; j++) {\n      char s;\n      cin >> s;\n      if(s == '.') {\n        label[i][j] = ++cnt, type[cnt] = i + j & 1;\n        if(cnt > 2000) cout << inf << \"\\n\", exit(0);\n      }\n    }\n  }\n  for(int i = 1; i <= n; i++)\n    for(int j = 1; j <= m; j++) {\n      if(!label[i][j]) continue;\n      int id = label[i][j];\n      for(int d = 0; d < 4; d++) {\n        int x = i + dx[d], y = j + dy[d];\n        if(label[x][y]) e[id].push_back(label[x][y]);\n      }\n    }\n  for(int _ = 1; _ <= cnt; _++) {\n    g.clear();\n    memset(vis, 0, sizeof(vis));\n    memset(mx, 0, sizeof(mx));\n    memset(my, 0, sizeof(my));\n    int B = 0, W = 0;\n    for(int i = 1; i <= cnt; i++) if(i != _) type[i] ? B++ : W++;\n    if(abs(B - W) != 1) continue;\n    vector<int> L;\n    int S = 0, T = cnt + 1;\n    for(int i = 1; i <= cnt; i++) {\n      if(i == _) continue;\n      if(type[i] == (B > W)) {\n        g.add(S, i, 1), L.push_back(i);\n        for(int it : e[i]) if(it != _) g.add(i, it, 1);\n      }\n      else g.add(i, T, 1);\n    }\n    int res = g.maxflow(S, T);\n    if(res != (cnt - 1 >> 1)) continue;\n    for(int i : L)\n      for(int j = g.hd[i]; j; j = g.nxt[j]) {\n        int it = g.to[j];\n        if(it && !g.limit[j]) mx[i] = it, my[it] = i;\n      }\n    for(int i : L) if(!mx[i]) fill(i);\n    for(int i : L) ans += vis[i];\n  }\n  ans = cnt * (cnt - 1) / 2 - (ans >> 1);\n  cout << min(ans, inf) << \"\\n\";\n  return 0;\n}\n```\n\n\u5bf9\u539f\u56fe\u8dd1\u4e00\u904d\u6700\u5927\u5339\u914d\u3002\u82e5\u6700\u5927\u5339\u914d\u4e3a $\\frac N 2$\uff0c\u90a3\u4e48\u6c42\u51fa\u5220\u53bb\u6bcf\u4e2a\u70b9\u4e4b\u540e\u5927\u5c0f\u4e3a $\\frac N 2 - 1$ \u7684\u5339\u914d\u662f\u5e73\u51e1\u7684\u3002\u82e5\u6700\u5927\u5339\u914d\u4e3a $\\frac N 2 - 1$\uff0c\u90a3\u4e48\u6c42\u51fa\u5220\u53bb\u67d0\u5de6\u90e8\u70b9\u4e4b\u540e\u5927\u5c0f\u4e3a $\\frac N 2 - 1$ \u7684\u5339\u914d\uff0c\u82e5\u8be5\u70b9\u4e3a\u975e\u5339\u914d\u70b9\u5219\u5e73\u51e1\uff0c\u5426\u5219\u53ea\u9700\u4ece\u8be5\u70b9\u627e\u5230\u4e00\u6761\u4ee5\u5de6\u90e8\u975e\u5339\u914d\u70b9\u7ed3\u5c3e\u7684\u4ea4\u9519\u8def\u3002\u8fd9\u6837\u53ef\u907f\u514d\u6bcf\u6b21\u91cd\u65b0\u8dd1\u6700\u5927\u5339\u914d\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(N ^ 2)$\u3002",
        "postTime": 1670926554,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1773D Dominoes"
    },
    {
        "content": "\u9898\u610f\uff1a$n\\times m$ \u7684\u7f51\u683c\uff0c\u6709\u4e9b\u4f4d\u7f6e\u662f\u969c\u788d\u3002\u95ee\u6709\u591a\u5c11\u79cd\u5c06\u4e24\u4e2a\u7a7a\u683c\u53d8\u6210\u969c\u788d\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u65e0\u6cd5\u4f7f\u7528 $1\\times2$ \u7684\u9aa8\u724c\u5c06\u7f51\u683c\u586b\u6ee1\u3002\u4fdd\u8bc1\u521d\u59cb\u72b6\u6001\u80fd\u88ab\u586b\u6ee1\u3002\u8f93\u51fa\u65b9\u6848\u6570\u5411 $10^6$ \u53d6 $\\min$ \u7684\u7ed3\u679c\u3002$n,m\\le1000$\u3002\n\n\u5178\u4e2d\u5178\u3002\n\n\u7ecf\u5178\u7ed3\u8bba\uff1a\u9ed1\u767d\u7f51\u683c\u6570\u76f8\u540c\u662f\u53ef\u4ee5\u88ab\u586b\u5145\u7684\u5fc5\u8981\u6761\u4ef6\u3002\u56e0\u6b64\uff0c\u540c\u65f6\u586b\u5145\u4e24\u4e2a\u9ed1\u683c\u6216\u767d\u683c\u4e4b\u540e\u4e00\u5b9a\u65e0\u89e3\u3002\n\n\u6b64\u65f6\u82e5\u65b9\u6848\u6570\u4ecd $<10^6$\uff0c\u5219\u6709\u7a7a\u683c\u6570 $<2000$\u3002\n\n\u518d\u8003\u8651\u7ecf\u5178\u505a\u6cd5\u3002\u5bf9\u76f8\u90bb\u7684\u9ed1\u683c\u548c\u767d\u683c\u8fde\u8fb9\uff0c\u6709\u5b8c\u7f8e\u5339\u914d\u662f\u6709\u89e3\u7684\u5145\u8981\u6761\u4ef6\u3002\n\n\u4e0b\u9762\u8bbe\u4e8c\u5206\u56fe\u5de6\u90e8\u548c\u53f3\u90e8\u5404\u6709 $k$ \u4e2a\u7ed3\u70b9\u3002\u7531\u4e8e\u521d\u59cb\u72b6\u6001\u6709\u89e3\uff0c\u8be5\u4e8c\u5206\u56fe\u6709\u5b8c\u7f8e\u5339\u914d\u3002\n\n\u8003\u8651\u53bb\u6389\u5de6\u90e8\u7684\u6bcf\u4e00\u4e2a\u70b9\u3002\u6b64\u65f6\u7684\u6700\u5927\u5339\u914d\u4e00\u5b9a\u662f $k-1$\u3002\u82e5\u53f3\u90e8\u7684\u67d0\u4e00\u4e2a\u70b9**\u5fc5\u5b9a\u5728\u6700\u5927\u5339\u914d\u4e0a**\uff0c\u90a3\u4e48\u5220\u53bb\u8fd9\u4e2a\u70b9\u540e\u4e0d\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u3002\n\n\u4e4b\u540e\u7684\u505a\u6cd5\u5c31\u548c\u4e8c\u5206\u56fe\u535a\u5f08\u5dee\u4e0d\u591a\u4e86\u3002\u7f51\u7edc\u6d41\uff0c\u4ece\u6c47\u70b9\u6cbf $0$ \u8fb9\u8dd1 dfs\uff0c\u641c\u5230\u7684\u70b9\u4e00\u5b9a\u5728\u6700\u5927\u5339\u914d\u4e0a\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define eb emplace_back\n#define ll long long\nconst int maxn = 2010;\nbool vis[maxn * maxn];\nnamespace MF {\n    const int N = 1010;\n    const int lim = 1000000;\n    const int NN = 2010;\n    const int MM = 10010;\n    int n, s, t, head[NN], to[MM << 1], nxt[MM << 1], flow[MM << 1];\n    int cur[NN], d[NN], tot = 1, vis[NN];\n    void init() {\n        memset(head, 0, sizeof(head));\n        tot = 1;\n    }\n    void addedge(int u, int v, int w) {\n        to[++tot] = v, flow[tot] = w, nxt[tot] = head[u], head[u] = tot;\n    }\n    void add(int u, int v, int w) {\n        addedge(u, v, w);\n        addedge(v, u, 0);\n    }\n    bool bfs() {\n        queue<int> q;\n        memset(d, 0, sizeof(d));\n        d[s] = 1, q.push(s);\n        while (!q.empty()) {\n        int u = q.front();\n        q.pop(), cur[u] = head[u];\n        for (int i = head[u]; i; i = nxt[i]) {\n            int v = to[i], w = flow[i];\n            if (w > 0 && !d[v])\n            d[v] = d[u] + 1, q.push(v);\n        }\n        }\n        return d[t];\n    }\n    int dfs(int u, int now) {\n        if (u == t || !now) return now;\n        int rest = now;\n        for (int i = cur[u]; i && rest > 0; i = nxt[i]) {\n        cur[u] = i;\n        int v = to[i], w = flow[i];\n        if (d[v] == d[u] + 1 && w > 0) {\n            int cap = dfs(v, min(rest, w));\n            if (cap) flow[i] -= cap, flow[i ^ 1] += cap, rest -= cap;\n        }\n        }\n        return now - rest;\n    }\n    int Dinic() {\n        int res = 0, cap;\n        while (bfs()) while (cap = dfs(s, 1e9)) res += cap;\n        return res;\n    }\n    void rest_dfs(int u) {\n        vis[u] = 1;\n        for (int i = head[u]; i; i = nxt[i]) {\n        int v = to[i], w = flow[i];\n        if (w == 0 && !vis[v]) rest_dfs(v);\n        }\n    }\n    int solve(int l, int r) {\n        for(int i = 1; i <= n; i++) vis[i] = 0;\n        rest_dfs(t);\n        int cnt = 0;\n        for(int i = l; i <= r; i++) if (!vis[i]) cnt++;\n        return cnt;\n    }\n}\n#define ind(x, y) (((x) - 1) * m + (y))\nconst int lim = 1e6;\nint n, m, cnt[2], ind[maxn][maxn];\nchar s[maxn][maxn];\nll ans;\nvector<pair<int, int>> pos[2];\nvector<int> edge[maxn * maxn];\nsigned main(){\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 1; i <= n; i++){\n        scanf(\"%s\", s[i] + 1);\n        for(int j = 1; j <= m; j++) if(s[i][j] == '.') ind[i][j] = ++cnt[(i + j) & 1], pos[(i + j) & 1].eb(i, j);\n    }\n    ans = 1ll * cnt[0] * (cnt[0] - 1) / 2 + 1ll * cnt[1] * (cnt[1] - 1) / 2;\n    if(ans > lim) return printf(\"%d\\n\", lim), 0;\n    for(auto [x, y] : pos[0]) for(auto [i, j] : pos[1]) if(abs(x - i) + abs(y - j) == 1) edge[ind[x][y]].pb(ind[i][j] + cnt[0]);\n    MF::s = 2 * cnt[0] + 1, MF::n = MF::t = 2 * cnt[0] + 2;\n    for(auto [x, y] : pos[0]){\n        MF::init();\n        for(auto [i, j] : pos[0]) if(i != x || y != j){\n            MF::add(MF::s, ind[i][j], 1);\n            for(int v : edge[ind[i][j]]) MF::add(ind[i][j], v, 1);\n        }\n        for(auto [i, j] : pos[1]) MF::add(ind[i][j] + cnt[0], MF::t, 1);\n        int res = MF::Dinic();\n        if(res != cnt[0] - 1) ans += cnt[0];\n        else ans += MF::solve(cnt[0] + 1, cnt[0] * 2);\n    }\n    printf(\"%lld\\n\", min(ans, 1ll * lim));\n    return 0;\n}\n```",
        "postTime": 1670765190,
        "uid": 170890,
        "name": "Cxny",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1773D Dominoes"
    },
    {
        "content": "[my blog](https://www.cnblogs.com/SkyRainWind/p/17176667.html)\n## Solution\n\n\u9996\u5148\u5c06\u68cb\u76d8\u9ed1\u767d\u67d3\u8272\uff0c\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\n\n\u7531\u4e8e\u9898\u76ee\u4fdd\u8bc1\u521d\u59cb\u72b6\u6001\u4e00\u5b9a\u80fd\u5bc6\u94fa\uff0c\u56e0\u6b64\u8fd9\u4e2a\u4e8c\u5206\u56fe\u4e00\u5b9a\u6709\u5b8c\u7f8e\u5339\u914d\u3002\n\n\u73b0\u5728\u8981\u94fa 2 \u4e2a\u5730\u65b9\uff0c\u663e\u7136\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n- \u9ed1\u767d\u989c\u8272\u76f8\u540c\u3002\n\n\u663e\u7136\u6b64\u65f6\u5e76\u4e0d\u80fd\u4ea7\u751f\u5b8c\u7f8e\u5339\u914d\uff0c\u56e0\u6b64\u8fd9\u4e9b\u60c5\u51b5\u90fd\u662f\u7b54\u6848\uff0c\u5373 $2 \\times \\binom{cnt}{2}$\u3002\n\n- \u989c\u8272\u4e0d\u540c\u3002\n\n\u679a\u4e3e\u9ed1\u8272\u70b9\u5220\u54ea\u4e2a\uff0c\u8003\u5bdf\u54ea\u4e9b\u767d\u8272\u70b9\u5220\u4e86\u4e4b\u540e\u4e8c\u5206\u56fe\u5c31\u4e0d\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u4e86\uff0c\u5373\u6c42\u65b0\u56fe\u6700\u5927\u5339\u914d\u7684\u5fc5\u7ecf\u70b9\u3002\n\n[\u8fd9\u7bc7](https://www.cnblogs.com/SkyRainWind/p/17176631.html)\u5199\u7684\u662f\u5fc5\u7ecf\u8fb9\uff0c\u8fd9\u91cc\u6362\u6210\u4e86\u5fc5\u7ecf\u70b9\uff0c\u5904\u7406\u6709\u6240\u4e0d\u540c\u3002\n\n\u9996\u5148\uff0c\u5982\u679c\u6d41\u91cf\u4e0d\u662f\u767d\u8272\u70b9$-1$\uff0c\u5c31\u8bf4\u660e\u65e0\u8bba\u9009\u4ec0\u4e48\u767d\u8272\u70b9\uff0c\u90fd\u65e0\u6cd5\u8fbe\u5230\u5b8c\u7f8e\u5339\u914d\uff0c\u7b54\u6848\u52a0\u4e0a\u767d\u8272\u70b9\u4e2a\u6570\u3002\n\n\u5426\u5219\uff0c\u8003\u8651\u4ece\u6c47\u70b9 $T$ \u53cd\u5411\u8d70\uff0c\u6bcf\u6b21\u8d70\u6ee1\u6d41\u7684\u70b9\uff0c\u5982\u679c\u5f53\u524d\u70b9\u662f\u767d\u8272\u70b9\uff0c\u5c31\u6807\u8bb0\u3002\u6700\u540e\u7edf\u8ba1\u6ca1\u6807\u8bb0\u7684\u70b9\u5c31\u662f\u5fc5\u7ecf\u70b9\u3002\n\n\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u5462\uff1f\n\n\u9996\u5148\uff0c\u8003\u8651 $T$ \u5230\u67d0\u4e2a\u767d\u8272\u70b9\u7684\u53cd\u5411\u8fb9\uff0c\u53cd\u5411\u8fb9\u7531\u4e8e\u5bb9\u91cf\u4e3a $0$\uff0c\u6ee1\u6d41\u5219\u8bf4\u660e\u5176\u5bf9\u5e94\u7684\u6b63\u5411\u8fb9\u7684\u6d41\u91cf\u4e5f\u4e3a $0$\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u767d\u8272\u70b9\u6ca1\u6709\u53c2\u52a0\u5339\u914d\u3002\n\n\u4ece\u8fd9\u4e2a\u767d\u8272\u70b9\u5f00\u59cb\uff0c\u8d70\u53cd\u5411\u8fb9\u5230\u9ed1\u8272\u70b9\uff0c\u610f\u5473\u7740\u8fd9\u4e2a\u9ed1\u70b9\u5230\u8fd9\u4e2a\u767d\u70b9\u6ca1\u6709\u5339\u914d\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u5907\u9009\u3002\n\n\u7136\u540e\u4ece\u9ed1\u8272\u70b9\u5f00\u59cb\u8d70\uff0c**\u6ee1\u6d41**\u8d70\u5230\u4e0b\u4e00\u4e2a\u767d\u8272\u70b9\uff0c\u610f\u5473\u7740\u8fd9\u4e2a\u9ed1\u70b9\u548c\u4e0b\u4e00\u4e2a\u767d\u8272\u70b9\u5339\u914d\u4e0a\u4e86\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u9ed1\u70b9\u548c\u4e0a\u4e00\u4e2a\u767d\u70b9\u5339\u914d\uff0c\u4e5f\u5c31\u662f\u4e0b\u4e00\u4e2a\u767d\u70b9\u4e0d\u662f\u5fc5\u9009\u70b9\u3002\u8fd9\u6837\u9012\u5f52\u4e0b\u53bb\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6240\u6709\u975e\u5fc5\u9009\u70b9\uff0c\u53cd\u8fc7\u6765\u5c31\u662f\u5fc5\u7ecf\u70b9\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n// by SkyRainWind\n#include <bits/stdc++.h>\n#define mpr make_pair\n#define debug() cerr<<\"Yoshino\\n\"\n#define pii pair<int,int>\n#define pb push_back\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long long LL;\n\nconst int inf = 1e9, INF = 0x3f3f3f3f, maxn = 3005;\n\nint n,m,a[1005][1005];\nstruct ed{\n\tLL from,to,cap,flow,rev;\n\ted(){}\n\ted(LL from,LL to,LL cap,LL flow,LL rev):from(from),to(to),cap(cap),flow(flow),rev(rev){}\n};\nvector<ed>g[maxn];\n\nconst int dx[] = {1,-1,0,0};\nconst int dy[] = {0,0,1,-1};\ninline int in(int x,int y){return x>=1&&x<=n&&y>=1&&y<=m;} \ninline int ind(int x,int y){return (x-1)*m+y;}\n\nstruct netflow{\n\tint cur[maxn]; \n\tint d[maxn], q[maxn], hd, tl;\n\tint s, t;\t// \u6e90 \u6c47 \n\t\n\tnetflow(){s=t=-1;}\n\t\n\tvoid init(int s0,int t0){\n\t\ts = s0, t = t0;\n\t}\n\n\tvoid add(int x,int y,LL v){\n\t\tg[x].push_back(ed(x,y,v,0,g[y].size()));\n\t\tg[y].push_back(ed(y,x,0,0,g[x].size() - 1));\n\t}\n\t\n\tint bfs(){\n\t\tmemset(d,0, sizeof d);\n\t\thd = tl = 0;\n\t\tq[tl ++] = s;\n\t\td[s] = 1;\n\t\twhile(hd != tl){\n\t\t\tint now = q[hd ++];\n\t\t\tfor(int i = 0;i<g[now].size();i++){\n\t\t\t\ted &e = g[now][i];\n\t\t\t\tif(!d[e.to] && e.cap > e.flow)d[e.to] = d[now] + 1, q[tl ++] = e.to;\n\t\t\t}\n\t\t}\n\t\treturn d[t];\n\t}\n\t\n\tLL dfs(int now,LL rem){\t// rem \u5f53\u524d\u6d41\u91cf \n\t\tif(now == t || !rem)return rem;\n\t\tLL flow = 0;\n\t\tfor(int &i = cur[now]; i < g[now].size();i ++){\n\t\t\ted &e = g[now][i];\n\t\t\t\t// \u5206\u5c42\u56fe & \u6b8b\u91cf\u4e0d\u4e3a0 \n\t\t\tif(d[e.to] == d[now] + 1 && e.cap > e.flow){\n\t\t\t\tLL f = dfs(e.to, min(rem, e.cap - e.flow));\n\t\t\t\trem -= f, flow += f, e.flow += f, g[e.to][e.rev].flow -= f;\n\t\t\t}\n\t\t\tif(!rem)break;\n\t\t}\n\t\tif(rem)d[now] = -1;\n\t\treturn flow;\n\t}\n\t\n\tLL dinic(){\n\t\tassert(s!=-1);\n\t\tLL flow = 0;\n\t\twhile(bfs()){\n\t\t\tmemset(cur, 0, sizeof cur);\n\t\t\tflow += dfs(s, 1ll << 62);\n\t\t}\n\t\treturn flow;\n\t}\n}nf;\nvector<pii>ed;\nvector<int>lft,rgt; \nint vis[maxn];\n\nvoid dfs(int x){\n\tvis[x] = 1;\n\tfor(int i=0;i<g[x].size();i++){\n\t\tstruct ed e = g[x][i];\n\t\tif(!vis[e.to] && e.flow == e.cap)dfs(e.to);\n\t}\n}\n\nmap<int,int>mp;\nint cc;\n\nsigned main(){\n//\tfreopen(\"CF1773D.in\",\"r\",stdin);\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tchar s[1005];\n\t\tscanf(\"%s\",s+1);\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tif(s[j] == '#')a[i][j] = 0;\n\t\t\telse a[i][j] = 1;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)if(a[i][j] == 1)mp[ind(i, j)] = ++cc;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)if(a[i][j]){\n\t\t\tif((i%2 + j) & 1){\n\t\t\t\tfor(int k=0;k<4;k++){\n\t\t\t\t\tint fi = i+dx[k], fj = j+dy[k];\n\t\t\t\t\tif(!in(fi, fj) || !a[fi][fj])continue;\n\t\t\t\t\ted.pb(mpr(mp[ind(i, j)], mp[ind(fi, fj)]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\tint cnt0=0, cnt1=0;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)if(a[i][j]){\n\t\t\tif((i%2 + j) & 1)++ cnt0, lft.pb(mp[ind(i, j)]);\n\t\t\telse ++cnt1, rgt.pb(mp[ind(i, j)]);\n\t\t}\n\t\n\tll ans = 1ll*cnt0*(cnt0-1)/2 + 1ll*cnt1*(cnt1-1)/2;\n\tif(ans >= (ll)1e6)return printf(\"%d\\n\",(int)1e6), 0;\n\t\n\tint s = 2*cnt0+1, t = s+1;\n\tnf.init(s, t);\n\tfor(int u : lft){\n\t\tfor(int i : lft)g[i].clear(), vis[i] = 0;\n\t\tfor(int i : rgt)g[i].clear(), vis[i] = 0;\n\t\tg[s].clear(), g[t].clear();\n\t\tvis[s] = vis[t] = 0;\n\t\t\n\t\tfor(pii e : ed){\n\t\t\tif(e.first ^ u){\n\t\t\t\tnf.add(e.first, e.second, 1);\n\t\t\t}\n\t\t}\n\t\tfor(int v : lft)if(u^v)nf.add(s, v, 1);\n\t\tfor(int v : rgt)nf.add(v, t, 1);\n\t\t\n\t\tll res = nf.dinic(), r=0;\n\t\tif(res != cnt0-1){\n\t\t\tans += cnt1;\n\t\t\tcontinue;\n\t\t}\n\t\tdfs(t);\n\t\tfor(int v : rgt)if(!vis[v])++ r;\n\t\tans += r;\n\t}\n\tcout << min(ans, (ll)1e6) << '\\n';\n\n\treturn 0;\n}\n```",
        "postTime": 1677840928,
        "uid": 84042,
        "name": "SkyRainWind",
        "ccfLevel": 7,
        "title": "CF1773D \u9898\u89e3"
    },
    {
        "content": "## Description\n\n\u4f60\u6709\u4e00\u4e2a $n\\times m$ \u7684\u77e9\u5f62\u7f51\u683c\u56fe\uff0c\u4f60\u8981\u7528\u4e00\u4e9b $1\\times 2$ \u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u53bb\u586b\u5145\u8fd9\u4e9b\u7f51\u683c\uff0c\u73b0\u5728\u89c4\u5b9a\u4e00\u4e9b\u7f51\u683c\u4f4d\u7f6e\u88ab ban \u6389\u4e86\uff08\u4e0d\u80fd\u586b\u591a\u7c73\u8bfa\u9aa8\u724c\uff09\uff0c\u95ee\u6709\u591a\u5c11\u5bf9\u672a\u88ab\u586b\u5145\u7684\u70b9 $((x_1,y_1),(x_2,y_2))$\uff0c\u4f7f\u5f97 ban \u6389\u8fd9\u4e24\u4e2a\u70b9\u540e\u80fd\u586b\u6ee1\u6240\u6709\u672a\u88ab ban \u6389\u7684\u70b9\u3002\u8f93\u51fa\u7b54\u6848\u5bf9 $10^6$ \u53d6 $\\min$ \u7684\u7ed3\u679c\u3002\u9898\u76ee\u4fdd\u8bc1\u521d\u59cb\u5f62\u6001\u4e00\u5b9a\u6709\u89e3\u3002\n\n## Analysis\n\n\u6211\u4eec\u5c06\u77e9\u5f62\u7f51\u683c\u9ed1\u767d\u67d3\u8272\uff0c\u663e\u7136\u5982\u679c ban \u6389\u4e24\u4e2a\u4f4d\u7f6e\u540e\u5269\u4e0b\u7f51\u683c\u7684\u9ed1\u70b9\u4e0e\u767d\u70b9\u4e2a\u6570\u4e0d\u540c\uff0c\u663e\u7136\u65e0\u89e3\u3002\n\n\u7531\u4e8e\u521d\u59cb\u9ed1\u767d\u70b9\u6570\u76f8\u540c\uff0c\u6211\u4eec\u53ea\u8981 ban \u6389\u4e24\u4e2a\u9ed1\u70b9\u6216\u4e24\u4e2a\u767d\u70b9\uff0c\u90a3\u4e48\u4e00\u5b9a\u65e0\u89e3\u3002\u6240\u4ee5\u5148\u7b97\u51fa\u672a\u88ab ban \u7684\u9ed1\u767d\u70b9\u7684\u6570\u91cf\uff0c\u5982\u679c\u5355\u79cd\u989c\u8272\u70b9\u6570 $>10^3$\uff0c\u90a3\u4e48\u7b54\u6848\u4e00\u5b9a $\\ge 10^6$\uff0c\u76f4\u63a5\u8f93\u51fa $10^6$ \u5373\u53ef\u3002\n\n\u5426\u5219\u5957\u8def\u5730\uff0c\u6211\u4eec\u8003\u8651\u5efa\u7acb\u4e8c\u5206\u56fe\uff0c\u5c06\u76f8\u90bb\u7684\u9ed1\u767d\u70b9\u4e4b\u95f4\u8fde\u8fb9\u3002\u6211\u4eec\u679a\u4e3e ban \u6389\u7684\u767d\u70b9\u662f\u54ea\u4e2a\uff0c\u7136\u540e\u8dd1\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u82e5\u6700\u5927\u6d41\u91cf\u4e0d\u662f\u603b\u7a7a\u767d\u70b9\u6570 $\\div 2$\uff0c\u5fc5\u7136\u65e0\u89e3\uff0c\u5426\u5219\u5220\u9664\u9ed1\u70b9\u4e2d\u7684\u6700\u5927\u5339\u914d\u5fc5\u7ecf\u70b9\u5c31\u65e0\u89e3\u3002\u6211\u4eec\u53ea\u8981\u7b97\u51fa\u9ed1\u70b9\u4e2d\u7684\u5fc5\u7ecf\u70b9\u5373\u53ef\uff0c\u7b97\u6cd5\u89c1 [link](https://www.cnblogs.com/Vexoben/p/11761040.html)\u3002\n\n\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u662f\u5e73\u51e1\u7684\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u590d\u6742\u5ea6 $k\\sqrt k$\uff0c\u5176\u4e2d $k=2000$\u3002\n\n\u5177\u4f53\u7ec6\u8282\u89c1\u4ee3\u7801\u3002\n\n## Code\n\n```cpp\nconst int N = 1010;\nconst int lim = 1000000;\nconst int NN = 2010;\nconst int MM = 10010;\n\nstruct MF {\n  int n, s, t, head[NN], to[MM << 1], nxt[MM << 1], flow[MM << 1];\n  int cur[NN], d[NN], tot = 1, vis[NN];\n  void init() {\n    memset(head, 0, sizeof(head));\n    tot = 1;\n  }\n  void addedge(int u, int v, int w) {\n    to[++tot] = v, flow[tot] = w, nxt[tot] = head[u], head[u] = tot;\n  }\n  void add(int u, int v, int w) {\n    addedge(u, v, w);\n    addedge(v, u, 0);\n  }\n  bool bfs() {\n    queue<int> q;\n    memset(d, 0, sizeof(d));\n    d[s] = 1, q.push(s);\n    while (!q.empty()) {\n      int u = q.front();\n      q.pop(), cur[u] = head[u];\n      for (int i = head[u]; i; i = nxt[i]) {\n        int v = to[i], w = flow[i];\n        if (w > 0 && !d[v])\n          d[v] = d[u] + 1, q.push(v);\n      }\n    }\n    return d[t];\n  }\n  int dfs(int u, int now) {\n    if (u == t || !now) return now;\n    int rest = now;\n    for (int i = cur[u]; i && rest > 0; i = nxt[i]) {\n      cur[u] = i;\n      int v = to[i], w = flow[i];\n      if (d[v] == d[u] + 1 && w > 0) {\n        int cap = dfs(v, min(rest, w));\n        if (cap) flow[i] -= cap, flow[i ^ 1] += cap, rest -= cap;\n      }\n    }\n    return now - rest;\n  }\n  int mf() {\n    int res = 0, cap;\n    while (bfs()) while (cap = dfs(s, 1e9)) res += cap;\n    return res;\n  }\n  void rest_dfs(int u) {\n    vis[u] = 1;\n    for (int i = head[u]; i; i = nxt[i]) {\n      int v = to[i], w = flow[i];\n      if (w == 0 && !vis[v]) rest_dfs(v);\n    }\n  }\n  int solve(int l, int r) {\n    rep (i, 1, n) vis[i] = 0;\n    rest_dfs(t);\n    int cnt = 0;\n    rep (i, l, r) if (!vis[i]) cnt++;\n    return cnt;\n  }\n}g;\n\nint n, m;\nchar s[N][N];\nvector<pii> pos[2];\nvector<int> eg[N];\n\nint main() {\n  n = read(), m = read();\n  rep (i, 1, n) scanf(\"%s\", s[i] + 1);\n  int cnt[2]; memset(cnt, 0, sizeof(cnt));\n  rep (i, 1, n) rep (j, 1, m) {\n    if (s[i][j] == '.') cnt[(i + j) & 1]++;\n  }\n  assert(cnt[0] == cnt[1]);\n  if (1ll * cnt[0] * (cnt[0] - 1) >= lim) return write(lim), 0;\n  ll ans = 1ll * cnt[0] * (cnt[0] - 1);\n  rep (i, 1, n) rep (j, 1, m) {\n    if (s[i][j] == '.') pos[(i + j) & 1].emplace_back(i, j);\n  }\n  rep (i, 0, cnt[0] - 1) rep (j, 0, cnt[1] - 1){\n    if(abs(pos[0][i].fi - pos[1][j].fi) + abs(pos[0][i].se - pos[1][j].se) == 1) {\n      eg[i + 1].emplace_back(j + 1);\n    }\n  }\n  g.n = 2 * cnt[0] + 2;\n  rep (id, 1, cnt[0]){\n    g.init(), g.s = 2 * cnt[0] + 1, g.t = g.s + 1;\n    int S = g.s, T = g.t;\n    rep (i, 1, cnt[0]) if (i != id) {\n      g.add(S, i, 1);\n      for (int j:eg[i]) g.add(i, cnt[0] + j, 1);\n    }\n    rep (i, 1, cnt[0]) g.add(cnt[0] + i, T, 1);\n    if (g.mf() != cnt[0] - 1) ans += cnt[0];\n    else ans += g.solve(cnt[0] + 1, 2 * cnt[0]);\n  }\n  write(min(ans, 1ll * lim));\n}\n```",
        "postTime": 1670659378,
        "uid": 169574,
        "name": "Enucai",
        "ccfLevel": 7,
        "title": "CF1773D Dominoes"
    }
]