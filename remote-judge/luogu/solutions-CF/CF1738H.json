[
    {
        "content": "\u663e\u7136\u53ef\u4ee5\u7528\u8bba\u6587\u4e2d\u7684\u201c\u524d\u540e\u7aef\u52a0\u5165\u3001\u5220\u9664 PAM\u201d\u505a\uff0c\u663e\u7136\u53ef\u4ee5\u7528\u201c[\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32](https://loj.ac/p/6070)\u201d\u505a\uff0c\u4f46\u662f\u672c\u9898\u5b58\u5728\u4e00\u79cd\u7ebf\u6027\u4e14\u6613\u4e8e\u5b9e\u73b0\u7684\u505a\u6cd5\uff1a\uff08\u611f\u89c9\u4e5f\u4e0d\u662f\u5f88\u96be\u60f3\uff09\n\n\u6211\u4eec\u589e\u91cf\u5730\u7ef4\u62a4\u5ffd\u7565\u5220\u9664\u64cd\u4f5c\u5f97\u5230\u7684 PAM\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u5176\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u53f3\u7aef\u70b9\u3002\n\n\u52a0\u5165\u5b57\u7b26\u65f6\uff0c\u66b4\u529b\u5c06 PAM \u7684\u6307\u9488\u5411\u4e0a\u8df3\u5230\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5220\u9664\u7684\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u70b9\u5728 fail \u6811\u4e0a\u5230\u6839\u7684\u8def\u5f84\u90fd\u8981\u8fdb\u884c\u4e00\u6b21\u6807\u8bb0\u3002\n\n\u5220\u9664\u5b57\u7b26\u65f6\uff0c\u53ea\u9700\u5c06\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u5de6\u7aef\u70b9\u5728\u5f53\u524d\u4f4d\u7f6e\u7684\u6240\u6709\u7ed3\u70b9\u5220\u6389\u3002\u6ce8\u610f\u5230\u4e00\u4e2a\u4f4d\u7f6e\u88ab\u5220\u6389\u65f6\u4e00\u5b9a\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u4e0a\u9762\u7684\u6807\u8bb0\u53ef\u4ee5\u53ea\u5728 PAM \u6307\u9488\u5904\u8fdb\u884c\uff0c\u5e76\u5728\u5220\u9664\u7ed3\u70b9\u65f6\u5c06\u6807\u8bb0\u4e0a\u63a8\u3002\n\n\u6807\u8bb0\u6570\u91cf\u5747\u644a\u7ebf\u6027\uff0c\u590d\u6742\u5ea6\u5747\u644a\u7ebf\u6027\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<stdio.h>\n#include<iostream>\n#include<vector>\nusing namespace std;\nconst int maxn=1000005,maxk=27;\nint tot,last,q,L,R,ans;\nint nxt[maxn][maxk],fail[maxn],len[maxn],dep[maxn],tag[maxn],deg[maxn];\nstring s,t;\nvector<int>V[maxn];\nint getfail(int x,int i) {\n\twhile(i-len[x]-1<0||t[i-len[x]-1]!=t[i])\n\t\tx=fail[x];\n\treturn x;\n}\nint insert(int last,int x,int i) {\n\tint pos=getfail(last,i);\n\tif(nxt[pos][x]==0)\n\t\ttot++,fail[tot]=nxt[getfail(fail[pos],i)][x],nxt[pos][x]=tot,len[tot]=len[pos]+2;\n\treturn nxt[pos][x];\n}\nvoid getlazy(int now,int v) {\n\tif(now>1) {\n\t\tif(tag[now]==0)\n\t\t\tans++,deg[fail[now]]++;\n\t\tif(tag[now]<v)\n\t\t\tV[v-len[now]+1].emplace_back(now),tag[now]=v;\n\t}\n}\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0),cout.tie(0);\n\tt.resize(1000000);\n\ttot=1,fail[0]=1,fail[1]=0,len[0]=0,len[1]=-1;\n\tcin>>q;\n\twhile(q--) {\n\t\tcin>>s;\n\t\tif(s==\"push\") {\n\t\t\tcin>>s,t[R]=s[0]-96,last=insert(last,s[0]-96,R);\n\t\t\twhile(len[last]>R-L+1)\n\t\t\t\tlast=fail[last];\n\t\t\tgetlazy(last,R+1),R++;\n\t\t} else {\n\t\t\tL++;\n\t\t\tfor(int i=0; i<V[L].size(); i++) {\n\t\t\t\tint k=V[L][i];\n\t\t\t\tif(tag[k]-len[k]+1==L&&deg[k]==0)\n\t\t\t\t\tgetlazy(fail[k],tag[k]),deg[fail[k]]--,ans--,tag[k]=0;\n\t\t\t}\n\t\t}\n\t\tcout<<ans<<\"\\n\";\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1668230600,
        "uid": 105611,
        "name": "IdnadRev",
        "ccfLevel": 0,
        "title": "\u3010\u5b57\u7b26\u4e32\u8bb0\u5f55\u3011CF1738H Palindrome Addicts"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[PAM](https://oi-wiki.org/string/pam/)\n\n\u9996\u5148\uff0c\u6211\u4eec\u4e0d\u96be\u901a\u8fc7\u79bb\u7ebf\u6293\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32 $s$ \u548c $q$ \u4e2a\u8be2\u95ee $[l_i, r_i]$\uff0c\u6bcf\u6b21\u6c42\u8be5\u533a\u95f4\u5185**\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u6570\u91cf**\u3002\n\n\u770b\u5230\u56de\u6587\u4e32\uff0c\u8003\u8651\u5148\u5efa\u51fa PAM\u3002\n\n\u66b4\u529b\u600e\u4e48\u505a\uff1f\u8003\u8651\u5148\u5bf9 $r_i$ \u5347\u5e8f\uff0c\u6bcf\u6b21\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 $s_i$\uff0c\u7edf\u8ba1\u4ee5 $s_i$ \u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u7684\u8d21\u732e\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728 PAM \u4e0a\u4e0d\u65ad\u8df3\u7956\u5148\u5b8c\u6210\u3002\u6211\u4eec\u8fd8\u9700\u8981\u5bf9\u6bcf\u4e2a\u70b9 $i$ \u8bb0\u5f55\u5176\u4e0a\u6b21\u51fa\u73b0\u7684\u5de6\u7aef\u70b9 $lst_i$\uff0c\u6bcf\u6b21\u6211\u4eec\u5c06\u5de6\u7aef\u70b9\u5728 $(lst_j, i - len_j + 1]$ \u533a\u95f4\u5185\u7684\u8be2\u95ee\u7684\u7b54\u6848 $+ 1$\uff0c\u6700\u540e\u626b\u4e00\u904d\u6240\u6709 $r_j = i$ \u7684\u8be2\u95ee $j$\u3002\u8fd9\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5728 $O(q^2 \\log q)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u3002\n\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u4f18\u5316\u4fee\u6539\u8fc7\u7a0b\u3002\u8003\u8651\u4e00\u4e2a\u56de\u6587\u5b50\u4e32 $A = s[l, r]$\uff0c\u82e5\u5b58\u5728\u5176\u6700\u957f\u56de\u6587 border $B = s[i, r]$\uff08\u5f53\u7136\u4e5f\u662f PAM \u4e0a\u7684\u7956\u5148\uff09\u4f7f\u5f97 $|B| > \\frac{|A|}{2}$\uff0c\u5219\u66f4\u65b0\u524d $lst_B = l$\uff0c\u5f53\u524d\u6211\u4eec\u9700\u8981\u5c06 $(l, i]$ \u52a0\u4e00\u3002\n\n\u8003\u8651\u5f53\u524d\u8981\u8ba8\u8bba\u7684\u4e00\u6761\u6ee1\u8db3 $\\forall i \\in P, fail_i \\in P, |fail_j| > \\frac{|j|}{2}$ \u7684**\u6781\u957f**\u94fe $P$\uff0c\u8bbe $down(P)$ \u8868\u793a\u94fe $P$ \u4e0a\u6df1\u5ea6\u6700\u5927\u7684\u70b9\uff0c$top(P)$ \u8868\u793a\u94fe $P$ \u4e0a\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\uff0c\u5219\u6211\u4eec\u9700\u8981\u5c06 $(lst_{down(P)}, i - len_{top(P)} + 1]$ \u533a\u95f4\u5185\u7684\u8be2\u95ee\u7684\u7b54\u6848 $+ 1$\uff0c\u56e0\u4e3a\u4f60\u4f1a\u53d1\u73b0**\u6240\u6709\u8981 $+ 1$ \u7684\u533a\u95f4\u88ab\u4e32\u8d77\u6765\u4e86**\u3002\u4e0d\u96be\u53d1\u73b0\u4ece\u4efb\u610f\u70b9\u5230\u6839\u7684\u8def\u5f84\u53ef\u4ee5\u81f3\u591a\u88ab\u5206\u6210 $O(\\log q)$ \u6761\u4e0a\u8ff0\u6781\u957f\u94fe\u3002\n\n\u5bf9\u4e8e $lst_i$\uff0c\u6211\u4eec\u6c42\u51fa PAM \u7684 dfs \u5e8f\u5e76\u7528\u7ebf\u6bb5\u6811\u5b9e\u73b0\u5355\u70b9\u4fee\u6539\u3001\u5b50\u6811 $\\max$\u3002\u7ef4\u62a4\u7b54\u6848\u4f9d\u7136\u91c7\u7528\u6811\u72b6\u6570\u7ec4\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(q \\log^2 q)$\u3002\n\n\u7136\u540e\u4f60\u53d1\u73b0\u4f60\u88ab\u5361\u5e38\u4e86\uff08\u6bd5\u7adf $q$ \u6709 $10^6$\uff09\u3002\u7531\u4e8e\u6bcf\u4e24\u7ec4\u8be2\u95ee\u4e4b\u95f4\u53ea\u4f1a\u4fee\u6539\u4e00\u6b21 $l$ \u6216 $r$\uff0c\u4e8e\u662f\u4f60\u8003\u8651\u628a\u6811\u72b6\u6570\u7ec4\u6362\u6210\u4e00\u4e2a\u5355\u6307\u9488\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u4e3a $O(q \\log^2 q)$\uff0c\u4f46\u5b83\u53ef\u4ee5 AC \u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <stdio.h>\n\ntypedef struct {\n\tint l;\n\tint r;\n} Query;\n\ntypedef struct {\n\tint nxt;\n\tint end;\n} Edge;\n\ntypedef struct {\n\tint l;\n\tint r;\n\tint mid;\n\tint max;\n} Node;\n\nint lst = 0, id1 = 1, cnt = 0, l_, r_, pos_, val_;\nint fail[1000007], len[1000007], nxt[1000007][27], slink[1000007], pos[1000007], head[1000007], in[1000007], out[1000007], val[1000007];\nchar op[7], s[1000007];\nQuery query[1000007];\nEdge edge[2000007];\nNode tree[4000007];\n\ninline void add_edge(int start, int end){\n\tcnt++;\n\tedge[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge[cnt].end = end;\n}\n\nvoid dfs(int u, int &id){\n\tin[u] = ++id;\n\tfor (register int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tdfs(edge[i].end, id);\n\t}\n\tout[u] = id;\n}\n\ninline void init(){\n\tfail[0] = fail[1] = 1;\n\tlen[1] = -1;\n}\n\ninline int get_fail(int x, int pos){\n\twhile (pos - len[x] <= 0 || s[pos - len[x] - 1] != s[pos]) x = fail[x];\n\treturn x;\n}\n\ninline int insert(int pos){\n\tint u = get_fail(lst, pos), ch = s[pos] - 'a';\n\tif (nxt[u][ch] == 0){\n\t\tid1++;\n\t\tlen[id1] = len[u] + 2;\n\t\tfail[id1] = nxt[get_fail(fail[u], pos)][ch];\n\t\tnxt[u][ch] = id1;\n\t\tif (fail[id1] > 1 && len[id1] - len[fail[id1]] < len[fail[id1]] * 2){\n\t\t\tslink[id1] = slink[fail[id1]];\n\t\t} else {\n\t\t\tslink[id1] = id1;\n\t\t}\n\t}\n\tlst = nxt[u][ch];\n\treturn lst;\n}\n\nvoid build(int x, int l, int r){\n\ttree[x].l = l;\n\ttree[x].r = r;\n\ttree[x].mid = (l + r) >> 1;\n\tif (l == r) return;\n\tbuild(x * 2, l, tree[x].mid);\n\tbuild(x * 2 + 1, tree[x].mid + 1, r);\n}\n\ninline int max(int a, int b){\n\treturn a > b ? a : b;\n}\n\nint get_max(int x){\n\tif (tree[x].max == 0) return 0;\n\tif (l_ <= tree[x].l && tree[x].r <= r_) return tree[x].max;\n\tif (l_ > tree[x].mid) return get_max(x * 2 + 1);\n\tif (r_ <= tree[x].mid) return get_max(x * 2);\n\treturn max(get_max(x * 2), get_max(x * 2 + 1));\n}\n\nvoid assign(int x){\n\ttree[x].max = val_;\n\tif (tree[x].l == tree[x].r) return;\n\tif (pos_ <= tree[x].mid){\n\t\tassign(x * 2);\n\t} else {\n\t\tassign(x * 2 + 1);\n\t}\n}\n\nvoid write(int n){\n\tif (n >= 10) write(n / 10);\n\tputchar(n % 10 + '0');\n}\n\nint main(){\n\tint q, n = 0, l = 1, id2 = 0, L = 0, cur_ans = 0, cur_pos = 1;\n\tscanf(\"%d\", &q);\n\tinit();\n\tfor (register int i = 1; i <= q; i++){\n\t\tscanf(\"%s\", &op[1]);\n\t\tif (op[2] == 'u'){\n\t\t\ts[++n] = getchar();\n\t\t\twhile (s[n] < 'a' || s[n] > 'z') s[n] = getchar();\n\t\t} else {\n\t\t\tl++;\n\t\t}\n\t\tquery[i].l = l;\n\t\tquery[i].r = n;\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tpos[i] = insert(i);\n\t}\n\tfor (register int i = 0; i <= id1; i++){\n\t\tif (i != 1) add_edge(fail[i], i);\n\t}\n\tdfs(1, id2);\n\tbuild(1, 1, id2);\n\tfor (register int i = 1; i <= n; i++){\n\t\tfor (register int j = pos[i]; j >= 2; j = fail[slink[j]]){\n\t\t\tint cl, cr = i - len[slink[j]] + 1;\n\t\t\tl_ = in[j];\n\t\t\tr_ = out[j];\n\t\t\tcl = max(get_max(1) - len[j] + 2, 1);\n\t\t\tval[cl]++;\n\t\t\tval[cr + 1]--;\n\t\t\tif (cl <= L && L <= cr) cur_ans++;\n\t\t}\n\t\tpos_ = in[pos[i]];\n\t\tval_ = i;\n\t\tassign(1);\n\t\twhile (cur_pos <= q && query[cur_pos].r == i){\n\t\t\twhile (L < query[cur_pos].l) cur_ans += val[++L];\n\t\t\twrite(cur_ans);\n\t\t\tputchar('\\n');\n\t\t\tcur_pos++;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1664631697,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1738H \u3010Palindrome Addicts\u3011"
    }
]