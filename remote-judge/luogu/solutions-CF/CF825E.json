[
    {
        "content": "\u5076\u7136\u95f4\u7ffb\u5230\u4e09\u4e2a\u6708\u524d\u5199\u7684\u8fd9\u4e2a\u9898\uff0c\u53d1\u73b0\u73b0\u6709\u7684\u9898\u89e3\u5747\u672a\u7ed9\u51fa\u89e3\u6cd5\u7684\u6b63\u786e\u6027\u8bc1\u660e\uff0c\u53ea\u662f\u4e0d\u660e\u4e0d\u767d\u5730\u5199\u4e86\u4e00\u4e9b\u5bf9\u7406\u89e3\u505a\u6cd5\u6beb\u65e0\u5e2e\u52a9\u7684\u8bdd\u3002\u6211\u8ba4\u4e3a\u89e3\u6cd5\u7684\u6b63\u786e\u6027\u5e76\u4e0d\u663e\u7136\uff0c\u56e0\u6b64\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u7ed9\u51fa\u6b63\u786e\u6027\u8bc1\u660e\uff0c\u8865\u4e0a\u903b\u8f91\u6f0f\u6d1e\u3002\n\n\u89e3\u6cd5\u4e0e\u5176\u4ed6\u9898\u89e3\u4e00\u6837\uff0c\u5373\uff1a\u5efa\u53cd\u56fe\uff0c\u7136\u540e\u8dd1\u62d3\u6251\u6392\u5e8f\uff0c\u6bcf\u6b21\u4f18\u5148\u53d6\u51fa\u53ef\u4ee5\u53d6\u51fa\u7684\u7f16\u53f7\u6700\u5927\u7684\u70b9\uff0c\u4ece $n$ \u5230 $1$ \u8d4b\u6743\u503c\u3002\n\n\u8fd9\u4f3c\u4e4e\u6709\u70b9\u53cd\u76f4\u89c9\uff1a\u4e3a\u4ec0\u4e48\u5012\u7740\u505a\u5c31\u6070\u597d\u80fd\u6ee1\u8db3\u5b57\u5178\u5e8f\u6700\u5c0f\u5462\uff1f\u76f8\u4fe1\u5927\u591a\u6570\u4eba\u7684\u7b2c\u4e00\u53cd\u5e94\u90fd\u662f\u6b63\u7740\u505a\uff0c\u8fd9\u4e5f\u662f\u6211\u8ba4\u4e3a\u6b63\u786e\u6027\u5e76\u4e0d\u663e\u7136\u7684\u539f\u56e0\u3002\n\n\u8bc1\u660e\uff1a\n\n\u4ee5\u4e0b\u201c\u5165\u8fb9\u201d\u201c\u51fa\u8fb9\u201d\u201c\u5165\u5ea6\u201d\u201c\u51fa\u5ea6\u201d\u7b49\u5747\u4e3a\u539f\u56fe\u4e0a\u7684\u3002\n\n\u8003\u8651\u6574\u4e2a\u7b97\u6cd5\u7684\u7b2c\u4e00\u6b65\uff0c\u4e5f\u5c31\u662f\u5206\u914d\u6743\u503c $n$\u3002\u663e\u7136\uff0c\u6743\u503c $n$ \u7684\u70b9\u51fa\u5ea6\u5fc5\u987b\u4e3a $0$\u3002\n\n\u6211\u4eec\u8bb0\u5728\u4e0a\u8ff0\u7b97\u6cd5\u4e2d\uff0c\u88ab\u5206\u914d\u4e86\u6743\u503c $n$ \u7684\u70b9\u7684\u7f16\u53f7\u4e3a $u$\u3002\u5229\u7528\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe\u5728\u53e6\u4e00\u79cd\u5206\u914d\u65b9\u6848\u4e2d\uff0c$u$ \u88ab\u5206\u914d\u4e86\u6743\u503c $x$\uff08$x < n$\uff09\uff0c\u800c $v$ \u88ab\u5206\u914d\u4e86\u6743\u503c $n$\u3002\u7531\u4e8e\u7b97\u6cd5\u4e2d\u53d6\u51fa\u7684 $u$ \u662f\u7f16\u53f7\u6700\u5927\u7684\u51fa\u5ea6\u4e3a $0$ \u7684\u70b9\uff0c\u800c $v$ \u7684\u51fa\u5ea6\u4e5f\u5fc5\u987b\u4e3a $0$\uff0c\u56e0\u6b64\u6211\u4eec\u6709 $u > v$\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u5206\u914d\u65b9\u6848\u4e2d\u88ab\u5206\u914d\u6743\u503c $x+1\\sim n$ \u7684\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u91cd\u65b0\u5206\u914d $x\\sim n-1$ \u7684\u6743\u503c\uff0c\u5e76\u5c06 $u$ \u91cd\u65b0\u5206\u914d $n$ \u7684\u6743\u503c\uff0c\u4ecd\u7136\u5f97\u5230\u5408\u6cd5\u7684\u5206\u914d\u65b9\u6848\u3002\u8fd9\u662f\u56e0\u4e3a\uff1a\u70b9 $u$ \u51fa\u5ea6\u4e3a $0$\uff0c\u5c06 $u$ \u7684\u6743\u503c\u589e\u5927\u5e76\u4e0d\u4f1a\u5f71\u54cd $u$ \u4e0e\u5176\u4f59\u8282\u70b9\u7684\u5408\u6cd5\u6027\uff1b\u5e76\u4e14\u8003\u8651\u53bb\u6389\u70b9 $u$ \u7684\u5176\u4ed6\u8282\u70b9\uff0c\u91cd\u65b0\u5206\u914d\u6743\u503c\u76f8\u5f53\u4e8e\u5bf9\u539f\u6765\u7684\u6743\u503c\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u4e0d\u6539\u53d8\u504f\u5e8f\u5173\u7cfb\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u5206\u914d\u6743\u503c\u4f7f\u5f97 $u$ \u7684\u6743\u503c\u4e3a $n$\u3002\u5e76\u4e14\uff0c\u7531\u4e8e $u > v$\uff0c\u91cd\u65b0\u5206\u914d\u6743\u503c\u540e\u7b54\u6848\u7684\u5b57\u5178\u5e8f\u51cf\u5c0f\u3002\n\n\u7531\u4e8e\u70b9 $u$ \u7684\u51fa\u5ea6\u4e3a $0$\uff0c\u7ed9\u5b83\u5206\u914d\u4e86\u6700\u5927\u7684\u6743\u503c $n$ \u4e4b\u540e\uff0c\u5176\u4f59\u8282\u70b9\u4e0e $u$ \u4e4b\u95f4\u5fc5\u7136\u5408\u6cd5\uff0c\u53ea\u9700\u8981\u6c42\u51fa\u5176\u4f59\u8282\u70b9\u7684\u6700\u5c0f\u5b57\u5178\u5e8f\u7b54\u6848\u5373\u53ef\u3002\u56e0\u6b64\u5c06\u70b9 $u$ \u4ee5\u53ca\u5b83\u7684\u6240\u6709\u5165\u8fb9\u90fd\u5220\u9664\uff0c\u5f97\u5230\u89c4\u6a21\u4e3a $n-1$ \u7684\u5b50\u95ee\u9898\u3002\u53c8\u663e\u7136\u5f53 $n=1$ \u65f6\uff0c\u7b97\u6cd5\u53ef\u4ee5\u7ed9\u51fa\u6700\u5c0f\u5b57\u5178\u5e8f\u7b54\u6848\uff0c\u56e0\u6b64\u7b97\u6cd5\u6b63\u786e\u6027\u5f97\u8bc1\u3002$\\square$\n\n```cpp\n//By: OIer rui_er\n#include <bits/stdc++.h>\n#define rep(x,y,z) for(int x=(y);x<=(z);x++)\n#define per(x,y,z) for(int x=(y);x>=(z);x--)\n#define debug(format...) fprintf(stderr, format)\n#define fileIO(s) do{freopen(s\".in\",\"r\",stdin);freopen(s\".out\",\"w\",stdout);}while(false)\n#define likely(exp) __builtin_expect(!!(exp), 1)\n#define unlikely(exp) __builtin_expect(!!(exp), 0)\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e5+5; \n\nint n, m, deg[N], id[N], tms;\nvector<int> e[N];\ntemplate<typename T> void chkmin(T& x, T y) {if(x > y) x = y;}\ntemplate<typename T> void chkmax(T& x, T y) {if(x < y) x = y;}\nvoid toposort() {\n\tpriority_queue<int> q;\n\trep(i, 1, n) if(!deg[i]) q.push(i);\n\twhile(!q.empty()) {\n\t\tint u = q.top(); q.pop();\n\t\tid[u] = ++tms;\n\t\tfor(int v : e[u]) if(!--deg[v]) q.push(v);\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\trep(i, 1, m) {\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\te[v].push_back(u);\n\t\t++deg[u];\n\t}\n\ttoposort();\n\trep(i, 1, n) printf(\"%d%c\", n+1-id[i], \" \\n\"[i==n]);\n\treturn 0;\n}\n```",
        "postTime": 1682172639,
        "uid": 122461,
        "name": "rui_er",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF825E\u3010Minimal Labels\u3011"
    },
    {
        "content": "~~\u611f\u89c9\u6ca1\u6709\u84dd\u9898\u96be\u5ea6\uff1f~~  \n\u4e00\u5f00\u59cb\u60f3\u7684\u662f\u62d3\u6251\u6392\u5e8f+\u5806\u5c31\u5b8c\u4e86\uff0c\u7136\u800c\u5e76\u4e0d\u662f\uff0c\u56e0\u4e3a\u62d3\u6251\u6392\u5e8f\u5728\u8dd1\u7684\u65f6\u5019\u6bcf\u6b21\u53ea\u4f1a\u5728\u201c\u5f53\u524d\u201d\u7684\u70b9\u4e2d\u6392\u51fa\u4e00\u4e2a\u6700\u5c0f/\u5927\u7684\u5b57\u5178\u5e8f\uff0c\u4e0d\u7b26\u5408\u9898\u610f\u3002  \n\u6b63\u786e\u7684\u505a\u6cd5\u662f\u53cd\u5411\u5efa\u56fe\uff0c\u4e4b\u540e\u8dd1\u4e00\u4e2a\u5b57\u5178\u5e8f\u6700\u5927\u7684\u62d3\u6251\u5e8f\u3002\u56e0\u4e3a\u62d3\u6251\u6392\u5e8f\u5177\u6709\u540e\u6548\u6027\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u63a5\u8d2a\u5fc3\u6765\u505a\uff0c\u9700\u8981\u53cd\u8fc7\u6765\u6d88\u9664\u540e\u6548\u6027\u3002  \ncode \n``` cpp\n#include<bits/stdc++.h>\n#define maxn 100010\n#define inf 0x3f3f3f3f\nusing namespace std;\nint head[maxn],cnt,a[maxn],vis[maxn],ans[maxn],n,m,temp;\ninline int read()\n{\n    char c=getchar();\n    int x=0;\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9')\n    \tx=(x<<3)+(x<<1)+c-48,c=getchar();\n    return x;\n}\nstruct node{\n    int u,v,next;\n}edge[maxn];\nvoid add(int a,int b)\n{\n    edge[cnt].u=a;\n    edge[cnt].v=b;\n    edge[cnt].next=head[a];\n    head[a]=cnt++;\n}\npriority_queue<int> q;\nint main()\n{\n    memset(head,inf,sizeof(head));\n    n=read();\n    m=read();\n    for(int i=1;i<=m;i++){\n        int u,v;\n        u=read();\n        v=read();\n        add(v,u);\n        a[u]++;\n    }\n    for(int i=1;i<=n;i++)\n        if(!a[i])\n            q.push(i);\n    temp=n;\n    while(!q.empty()){\n        int u=q.top();\n        ans[u]=temp;\n        temp--;\n        vis[u]=true;\n        q.pop();\n        for(int i=head[u];i!=inf;i=edge[i].next){\n            int nt=edge[i].v;\n            if(vis[nt]==true)\n                continue;\n            a[nt]--;\n            if(a[nt]==0)\n                q.push(nt);\n        }\n    }\n    for(int i=1;i<=n;i++)\n        printf(\"%d \",ans[i]);\n    puts(\"\");\n    return 0;\n}\n```  \n\u63d0\u4ea4\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u6c42\u8fc7QAQ\u3002",
        "postTime": 1590923048,
        "uid": 181506,
        "name": "Jay142753869",
        "ccfLevel": 5,
        "title": "CF825E Minimal Labels\u9898\u89e3"
    },
    {
        "content": "# CF825E Minimal Labels \u9898\u89e3\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u6c42\u6709\u5411\u56fe\u6700\u5c0f\u5b57\u5178\u5e8f\u62d3\u6251\u6392\u5e8f\u3002\n\n## \u505a\u6cd5\n\n\u5efa\u53cd\u56fe\uff0c\u4ece\u5c0f\u5230\u5927\u8d4b\u503c\uff0c\u6bcf\u6b21\u53d6\u51fa\u5f53\u524d\u5165\u5ea6\u4e3a $0$ \u7ed3\u70b9\u4e2d\u7f16\u53f7\u6700\u5927\u7684\u70b9\u8fdb\u884c\u8d4b\u503c\uff0c\u6700\u540e\u53cd\u8f6c\u62d3\u6251\u5e8f\uff0c\u5373 $topo_i\\leftarrow n+1-topo_i$\u3002\n\n## \u6b63\u786e\u6027\u8bc1\u660e\n\n\u5f52\u7eb3\u3002\u6211\u4eec\u5e0c\u671b\u539f\u56fe\u62d3\u6251\u6392\u5e8f\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u5219\u5176\u7b49\u4ef7\u4e8e\u53cd\u56fe\u5b57\u5178\u5e8f\u6700\u5927\uff0c\u8fd9\u662f\u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u539f\u56fe\u62d3\u6251\u6392\u5e8f $topo_i$ \u90fd\u53ef\u4ee5\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a\u53cd\u56fe\u4e0a\u7684\u62d3\u6251\u6392\u5e8f $topo'_i=n+1-topo_i$\u3002\u9996\u5148\u8003\u8651\u521d\u59cb\u60c5\u51b5\uff0c\u539f\u56fe\u4e0a\u53ef\u8d4b\u503c\u4e3a $n$ \u7684\u70b9\u4e3a\u6240\u6709\u7684\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\uff0c\u5373\u53cd\u56fe\u4e0a\u53ef\u8d4b\u503c\u4e3a $1$ \u7684\u70b9\u4e3a\u6240\u6709\u7684\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u3002\u4ece\u611f\u6027\u7406\u89e3\u7684\u89d2\u5ea6\u800c\u8a00\uff0c\u7f16\u53f7\u8f83\u5c0f\u7684\u7ed3\u70b9\u4e00\u5b9a\u5e0c\u671b\u7f16\u53f7\u8f83\u5927\u7684\u7ed3\u70b9\u5148\u586b\u597d\uff0c\u8fd9\u6837\u5b50\u5b83\u80fd\u591f\u586b\u4e0a\u7684\u6807\u8bb0\u5c31\u4f1a\u66f4\u5927\uff0c\u4ece\u800c\u62d3\u6251\u5e8f\u66f4\u5927\u3002\u800c\u6240\u6709\u7ed3\u70b9\u90fd\u5e0c\u671b\u7f16\u53f7\u6700\u5927\u7684\u7ed3\u70b9\u5148\u586b\u597d\uff0c\u8fd9\u4e0d\u4f1a\u8fdd\u80cc\u4efb\u4f55\u7ed3\u70b9\u7684\u201c\u5229\u76ca\u201d\uff0c\u6362\u53e5\u8bdd\u6765\u8bf4\u65e0\u540e\u6548\u6027\uff0c\u5373\u5c40\u90e8\u6700\u4f18\u89e3\u4e0d\u59a8\u788d\u8fbe\u6210\u5168\u5c40\u6700\u4f18\u89e3\uff0c\u56e0\u6b64\uff0c\u7f16\u53f7\u6700\u5927\u7684\u7ed3\u70b9\u4e00\u5b9a\u4f1a\u88ab\u4f18\u5148\u586b\u5165\u3002\n\n\u7406\u6027\u8bc1\u660e\u7684\u8bdd\uff0c\u6211\u4eec\u8003\u8651\u8bbe\u5f53\u524d\u51fa\u5ea6\u4e3a $0$ \u7684\u6240\u6709\u70b9\u7684\u7f16\u53f7\u4e3a $x_1,x_2,x_3,\u2026,x_m$\uff0c\u6309\u7167\u5355\u8c03\u9012\u589e\u987a\u5e8f\u5217\u51fa\u3002\u4e0d\u59a8\u8bbe\u6211\u4eec\u5c06 $x_k,k<m$ \u4f4d\u7f6e\u586b\u6210\u4e86 $1$\uff0c\u800c $x_m$ \u4f4d\u7f6e\u586b\u6210\u4e86 $w$\uff0c\u7136\u540e\u5bf9\u4e8e\u5269\u4e0b\u7684\u6b8b\u56fe\u6309\u7167\u6700\u4f18\u7684\u65b9\u5f0f\uff08\u5373\u5b57\u5178\u5e8f\u5c3d\u53ef\u80fd\u5927\uff09\u5b8c\u6210\u4e86\u6574\u4e2a\u62d3\u6251\u6392\u5e8f\u8fc7\u7a0b\uff0c\u6211\u4eec\u79f0\u4e00\u4e2a\u70b9 $u$ **\u652f\u914d**\u53e6\u4e00\u4e2a\u70b9 $v$\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u6761\u53cd\u56fe\u4e0a\u7684\u8def\u5f84 $u\\rightarrow v$\u3002\u4e00\u4e2a\u70b9 $x$ **\u652f\u914d**\u7684\u6240\u6709\u70b9\u6784\u6210\u5b83\u7684**\u652f\u914d\u96c6\u5408** $S_x$\u3002\u5bb9\u6613\u53d1\u73b0\uff0c$u$ **\u652f\u914d** $v \\Leftrightarrow S_v\\subset S_u$\u3002\u73b0\u5728\u8003\u8651 $S_{x_k}\\cup S_{x_m}$\uff0c\u8fd9\u4e00\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5b83\u4eec\u90fd\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a\u586b\u5165\u7684\u503c\u3002\u8bbe\u4f4d\u7f6e\u5e8f\u5217\u4e3a $pos_1,pos_2,\u2026,pos_{|S_{x_k}\\cup S_{x_m}|}$\uff0c\u503c\u5e8f\u5217\u4e3a $val_1,val_2,\u2026,val_{|S_{x_k}\\cup S_{x_m}|}$\uff0c\u5176\u4e2d $pos_i$ \u5bf9\u5e94 $val_i$\uff0c\u6309\u7167\u503c\u5347\u5e8f\u8fdb\u884c\u6392\u5e8f\uff0c\u5373 $val_i>val_j\\Leftrightarrow i>j$\u3002\u90a3\u4e48\u6211\u4eec\u4ece\u4f4d\u7f6e\u5e8f\u5217\u4e2d\u53bb\u9664\u6389 $x_m$\uff0c\u518d\u4ece\u503c\u5e8f\u5217\u4e2d\u53bb\u9664\u6389 $1$\uff0c\u5c06\u53bb\u9664\u6389\u7684\u4f4d\u7f6e\u4e4b\u540e\u7684\u540e\u7f00\u6574\u4f53\u5728\u6570\u7ec4\u4e2d\u5411\u524d\u632a\u52a8\u4e00\u4f4d\uff0c\u5f97\u5230\u65b0\u7684\u4f4d\u7f6e\u5e8f\u5217\u548c\u503c\u5e8f\u5217  $pos'_1,pos'_2,\u2026,pos'_{|S_{x_k}\\cup S_{x_m}|-1}$\uff0c$val'_1,val'_2,\u2026,val'_{|S_{x_k}\\cup S_{x_m}|-1}$\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u9664\u4e86\u4f4d\u7f6e $x_w$ \u4ee5\u5916\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u539f\u672c\u7684\u4f4d\u7f6e $p$\uff0c\u5176\u6240\u5bf9\u5e94\u7684\u65b0\u7684\u503c $v'$ \u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e\u5176\u539f\u5148\u6240\u5bf9\u5e94\u7684 $v$\uff0c\u53c8\u56e0\u4e3a\u5b58\u5728 $x_k<x_w$ \u800c $x_k$ \u6240\u586b\u5165\u7684\u503c\u589e\u5927\uff0c\u6545\u62d3\u6251\u5e8f\u7684\u5b57\u5178\u5e8f\u589e\u5927\u3002\u90a3\u4e48\u6b64\u65f6\u8003\u8651\u8fd9\u6837\u8fdb\u884c\u8c03\u6574\u540e\u662f\u5426\u4ecd\u7136\u6ee1\u8db3\u62d3\u6251\u5173\u7cfb\u7ea6\u675f\uff0c\u5373\u82e5 $u$ \u652f\u914d $v$\uff0c\u5219 $u$ \u586b\u5165\u7684\u503c\u5c0f\u4e8e $v$ \u586b\u5165\u7684\u503c\u3002\n\n- \u5bf9\u4e8e $x_w$ \u4e4b\u5916\u7684\u4f4d\u7f6e $p$\uff1a\u56e0\u4e3a $S_{x_k}\\cup S_{x_m}$ \u5185\u7684\u6240\u6709\u5143\u7d20\u8fdb\u884c\u7684\u662f\u503c\u57df\u5e73\u79fb\uff0c\u6240\u4ee5\u5bf9\u4e8e\u96c6\u5408\u5185\u90e8\u7684\u7ea6\u675f\u5173\u7cfb\uff0c\u5176\u503c\u4ecd\u7136\u7b26\u5408\u6761\u4ef6\uff1b\u800c\u7531\u4e8e $u$ **\u652f\u914d** $v \\Leftrightarrow S_v\\subset S_u$\uff0c\u6545\u5728 $S_{x_k}\\cup S_{x_m}$ \u4e4b\u5916\u7684\u4f4d\u7f6e\u4e0e $p$ \u4e4b\u95f4\u7684\u5173\u7cfb\u4e00\u5b9a\u662f $p$ \u88ab**\u652f\u914d**\uff0c\u53c8\u56e0\u4e3a\u5176\u586b\u5165\u7684\u503c\u6ca1\u6709\u53d8\u5c0f\uff0c\u6545\u4ecd\u7136\u7b26\u5408\u6761\u4ef6\u3002\n\n- \u5bf9\u4e8e $x_w$\uff1a\u663e\u7136\u4e0d\u4f1a\u53d8\u4e3a\u4e0d\u5408\u6cd5\uff0c\u56e0\u4e3a\u5176\u5165\u5ea6\u4e3a $0$\u3002\n\n\u7279\u522b\u6ce8\u610f\uff0c\u8c03\u6574\u540e\u5b57\u5178\u5e8f\u4e25\u683c\u53d8\u5927\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8bf4\u660e\u5bf9\u4e8e $n$ \u4e2a\u70b9\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5fc5\u987b\u5c06 $1$ \u586b\u5165\u96f6\u5ea6\u7684\u7f16\u53f7\u6700\u5927\u7684\u70b9\uff0c\u663e\u7136\u53ea\u6709 $1$ \u4e2a\u70b9\u7684\u56fe\u4e5f\u5e94\u8fd9\u6837\u505a\uff0c\u6545\u4e0d\u65ad\u5730\u5c06\u5f53\u524d\u7684\u53ef\u4ee5\u8d4b\u503c\u7684\u7f16\u53f7\u6700\u5927\u7684\u70b9\u8fdb\u884c\u8d4b\u503c\u5373\u53ef\u5b8c\u6210\u6574\u4e2a\u8fc7\u7a0b\uff0c\u8bc1\u6bd5\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int>edge[100005];\nvector<int>fedge[100005];\npriority_queue<int>q;\nint deg[100005];\nint lab[100005];\nint main(){\n\tint n,m,u,v;\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tedge[u].push_back(v);\n\t\tdeg[u]++;\n\t\tfedge[v].push_back(u);\n\t}\n\tint done=0;\n\tfor(int i=1;i<=n;i++) if(!deg[i]) q.push(i);\n\twhile(done<n){\n\t\tint qt=q.top();\n\t\tq.pop();\n\t\tlab[qt]=n-(done++);\n\t\tfor(int j=0;j<fedge[qt].size();j++){\n\t\t\tint v=fedge[qt][j];\n\t\t\tdeg[v]--;\n\t\t\tif(!deg[v]) q.push(v);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++) printf(\"%d \",lab[i]);\n\treturn 0;\n}\n```",
        "postTime": 1682299264,
        "uid": 455093,
        "name": "Schi2oid",
        "ccfLevel": 7,
        "title": "CF825E Minimal Labels \u9898\u89e3"
    },
    {
        "content": "## \u7ed9\u6240\u6709\u70b9\u5206\u914d\u7f16\u53f7\u4f7f\u5f97\u5b57\u5178\u5e8f\u6700\u5c0f\uff08\u53cd\u56fe\u3001\u4f18\u5148\u961f\u5217\uff09\n\u76f8\u5f53\u4e8e\u6709\u591a\u7ec4\u7ea6\u675f\u6761\u4ef6\uff0c\u8981\u6c42\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u89e3\n\n> **\u9898\u76ee\u5927\u610f**\uff1a\u7ed9\u51faN\u4e2a\u8282\u70b9\u548cM\u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u8981\u4f60\u4e3a\u8fd9N\u4e2a\u8282\u70b9\u7f16\u53f7\u4e3a1~N\n> - **\u6240\u6709\u8fb9\u7684\u5b50\u8282\u70b9\u7684\u7f16\u53f7\u8981\u6bd4\u5176\u7236\u8282\u70b9\u5927**\n> - \u6700\u540e\u7684\u7f16\u53f7\u8981\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\n\n\n**\u4e5f\u5c31\u662f\u9700\u8981\u5728\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u7684\u540c\u65f6\u5c3d\u53ef\u80fd\u7684\u4f7f\u5e8f\u53f7\u5c0f\u6392\u5728\u524d\u9762\uff0c\u6ce8\u610f\u662f\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u3002**\n\n> **\u89e3\u9898\u601d\u8def**\uff1a\u672c\u9898\u662f\u8981\u6c42\u6211\u4eec\u4eb2\u81ea\u7ed9\u6240\u6709\u7684\u70b9\u5206\u914d\u65b0\u7684\u7f16\u53f7\uff0c \u4f7f\u5f97\u6700\u540e\u7684\u62d3\u6251\u5e8f\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\u4e5f\u5c31\u662f\u539f\u6765\u7684\u7ed3\u70b9\u7f16\u53f7\u6700\u540e\u662f\u6ca1\u6709\u7528\u7684\uff0c\u6211\u4eec\u8fd9\u91cc\u662f\u5148\u5bf9\u70b9\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u4e3a\u8981\u6700\u540e\u5206\u914d\u51fa\u6765\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u8fb9\u5168\u90e8\u53cd\u5411\u5efa\u56fe\uff0c\u8fd9\u6837\u4f1a\u6309\u7167\u9006\u62d3\u6251\u5e8f**\u5148\u7ed9\u5b50\u7ed3\u70b9\u5206\u914d\u7f16\u53f7**\uff0c\u8fd9\u91cc\u6211\u4eec\u8d2a\u5fc3\u5730\u4ece\u5927\u5230\u5c0f\u5730\u7ed9\u5b50\u7ed3\u70b9\u5206\u914d\u7f16\u53f7\uff0c\u5373\u5927\u6570\u80fd\u5f80\u540e\u5c31\u5f80\u540e\uff0c\u4e5f\u5c31\u662f\u5b50\u7ed3\u70b9\u628a\u5927\u7684\u7f16\u53f7\u90fd\u5360\u4e86\uff0c\u524d\u9762\u7684\u7236\u8282\u70b9\u7f16\u53f7\u5c31\u4f1a\u5c3d\u53ef\u80fd\u7684\u5c0f\u3002\n\n```cpp\nconst int N = 500007, M = 5000007;\nint n, m;\nint din[N];\nint ver[M], nex[M], head[N], tot;\nint ans[N], cnt;\n\nvoid add(int x,int y){\n    ver[tot] = y;\n    nex[tot] = head[x];\n    head[x] = tot ++ ;\n    din[y] ++ ;\n}\n\nvoid toposort(){\n    priority_queue<int>q;\n    for(int i = 1;i <= n;++i)\n        if(!din[i])\n            q.push(i);\n    while(q.size()){\n        int x = q.top();\n        q.pop();\n        ans[x] = cnt -- ;\n        for(int i = head[x];~i;i = nex[i]){\n            int y = ver[i];\n            if(-- din[y] == 0)\n                q.push(y);\n        }\n    }\n}\n\nint main(){\n    memset(head,-1,sizeof head);\n    scanf(\"%d%d\",&n,&m);\n    cnt = n;\n    for(int i = 1;i <= m;++i){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(y,x);\n    }\n    toposort();\n\n    for(int i = 1;i <= n;++i)\n        printf(\"%d \",ans[i]);\n    puts(\"\");\n    return 0;\n}\n```\n",
        "postTime": 1596167603,
        "uid": 262605,
        "name": "fanfansann",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF825E \u3010Minimal Labels\u3011"
    }
]