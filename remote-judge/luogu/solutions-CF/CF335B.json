[
    {
        "content": "PS\uff1a\u4e00\u9053\u56de\u6587\u5b50\u5e8f\u5217\u7684\u9898\uff0c\u5efa\u8bae\u5927\u5bb6\u4ed4\u7ec6\u601d\u8003\u518d\u770b\uff0c\u56e0\u4e3a\u6b64\u9898\u6bd4\u8f83\u677f\u3002\n\n- \u9898\u610f\uff1a\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08$n < 50000$\uff09\u786e\u8ba4\u5b83\u662f\u5426\u5305\u542b\u6709\u957f\u5ea6\u4e3a 100 \u7684\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u5982\u679c\u6709\uff0c\u8f93\u51fa\u5176\u4e2d\u4e00\u4e2a\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8f93\u51fa\u5b83\u6240\u5305\u542b\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u3002\n\n\u9996\u5148\uff0c**\u5b50\u5e8f\u5217\u53ef\u4ee5\u4e0d\u8fde\u7eed\uff0c\u800c\u5b50\u4e32\u5fc5\u987b\u8fde\u7eed\u3002**\n\n------------\n\n\n\u5e38\u89c1\u7684\u6700\u957f\u56de\u6587\u5b50\u4e32\u6709\u4e24\u79cd\u89e3\u6cd5\uff1a\n1. [manacher](https://www.luogu.com.cn/problem/P3805)\u3002\n2. \u4e8c\u5206\u4e2d\u70b9 + \u54c8\u5e0c\u5224\u65ad\u3002\n\n\u7531\u4e8e\u4e0e\u672c\u9898\u65e0\u5173\uff0c\u4e0d\u518d\u8d58\u8ff0\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u4e86\u89e3\u3002\n\n------------\n\n\n\u56de\u5230\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u5e38\u89c1\u7684\u4e5f\u6709\u4e24\u79cd\u89e3\u6cd5\uff1a\n1. \u52a8\u6001\u89c4\u5212\u3002\n2. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\uff08LPS\uff09\u957f\u5ea6\u6070\u597d\u7b49\u4e8e\u5b57\u7b26\u4e32 S \u4e0e reverse\uff08S\uff09\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff08LCS\uff09\u3002\n\n\u800c\u7b2c\u4e8c\u79cd\u505a\u6cd5\u4e0d\u662f\u80fd\u5f88\u597d\u5730\u89e3\u51b3\u975e\u6700\u957f\u7684\u56de\u6587\u5b50\u5e8f\u5217 (\u53ef\u80fd\u56e0\u4e3a\u6211\u4e0d\u4f1a) \u3002\u6240\u4ee5\u6211\u4eec\u8003\u8651\u65b9\u6cd5\u4e00\u3002\n\n\u8f7b\u677e\u7684\u5217\u51fa\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$dp[i][j]=\\begin{cases}dp[i+1][j-1]+2&S[i]=S[j]\\\\max(dp[i+1][j], dp[i][j-1])&S[i]!=S[j]\\end{cases}$\n\n\n\u4f46\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u7684\u590d\u6742\u7684\u662f $O(n^2)$ \u7684\uff0c\u800c\u6570\u636e\u8303\u56f4\u662f 50000 \u7684\uff0c\u663e\u7136\u4f1a\u7206\u6389\u3002\n\n\u518d\u6b21\u89c2\u5bdf\u9898\u9762\uff0c\u663e\u7136\u53ef\u5f97\uff1a\u957f\u5ea6\u5927\u4e8e 100 \u7684\u56de\u6587\u4e32\u80af\u5b9a\u5305\u542b\u957f\u5ea6\u7b49\u4e8e 100 \u7684\u56de\u6587\u4e32\uff0c\u6240\u4ee5\u6211\u4eec\u7684 dp \u53ea\u7528\u505a\u5230\u51fa\u73b0\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e 100 \u7684\u56de\u6587\u4e32\u5373\u53ef\u505c\u6b62\u3002\u8fd9\u6837\uff0c\u52a0\u4e00\u4e2a $dp[i][j]$ \u4e0e 100 \u7684\u5224\u65ad\u6761\u4ef6 + \u56de\u6eaf\u8f93\u51fa\u65b9\u6848 + \u6eda\u52a8\u6570\u7ec4\u5c31\u80fd\u8f7b\u6613\u5730\u8fc7\u6389\u8fd9\u9053\u9898\u3002\n\n\u53ef\u662f\u5f53\u6211\u4eec\u4ed4\u7ec6\u60f3\u60f3\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u4e00\u7ec4\u4e00\u76f4\u8ba9\u4f60\u8dd1\u6ee1\u624d\u5f97\u51fa\u7b54\u6848\u7684\u6570\u636e\u5417\uff1f\u6216\u8005\u8bf4\uff0c\u6570\u636e\u518d\u5927\u70b9\u6211\u4eec\u8fd8\u53ef\u4ee5\u8fd9\u4e48\u505a\u5417\uff1f\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u6211\u4eec\u53d1\u73b0\u6bcf 2600 \u4e2a\u5b57\u7b26\u4e2d\u5fc5\u6709\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e 100 \u7684\u56de\u6587\u4e32\uff01\u6839\u636e\u62bd\u5c49\u539f\u7406\uff0c \u4e00\u5171\u6709 26 \u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u5fc5\u6709\u4e00\u4e2a\u5b57\u6bcd\u51fa\u73b0\u5927\u4e8e\u7b49\u4e8e 100 \u6b21\uff0c\u800c\u540c\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u5fc5\u4e3a\u56de\u6587\u4e32\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5f00\u5934\u5224\u65ad\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0e 2600 \u7684\u5173\u7cfb\uff0c\u957f\u5ea6\u6bd4 2600 \u8981\u5927\uff0c\u90a3\u4e48\u626b\u4e00\u904d\u8f93\u51fa 100 \u6b21\u51fa\u73b0\u6b21\u6570\u5927\u4e8e 100 \u6b21\u7684\u5b57\u7b26\u3002\u53cd\u4e4b\uff0c\u5c31\u6b63\u5e38\u8dd1\u4e00\u8fb9 $(n^2)$ \u7684\u66b4\u529b\u5c31 OK \u5566\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint f[2605][2605];\nstring s;\nchar ans[51];\nint cnt[27],n;\nint main(){\n    cin >> s;\n    n = s.length();\n    s = \" \" + s;\n    if (n >= 2600){//\u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\u5927\u4e8e 100 \u7684\u76f4\u63a5\u8f93\u51fa\n        for (int i = 1; i <= n; i++){\n            cnt[s[i]-'a']++;\n        }\n        for (int i = 0; i < 26; i++){\n            if (cnt[i] >= 100){\n                for (int j = 1; j <= 100; j++){\n                    cout << (char)('a'+i);\n                }\n                return 0;\n            }\n        }\n    }\n\n    \n    for (int i = n; i >= 1; i--){ // dp\n        f[i][i] = 1;\n        for (int j = i+1; j <= n; j++){\n            if (s[i] == s[j]){\n                f[i][j] = f[i+1][j-1]+2;\n            }else{\n                f[i][j] = max(f[i+1][j], f[i][j-1]);\n            }\n        }\n    }\n    \n    int x,y,pan;\n    x = 1, y = n;\n    pan = min(f[x][y],100) % 2; // \u5224\u65ad\u5947\u5076\u6027\uff0c\u5224\u65ad\u4e2d\u95f4\u7684\u8f93\u51fa\u51e0\u6b21\n\n    int tot = 0;\n    while(x <= y){ // \u56de\u6eaf\n        if (s[x] == s[y]){\n            ans[++tot] = s[x];\n            x++,y--;\n        } \n        else if (f[x+1][y] > f[x][y-1]) x++;\n        else y--;\n    }\n    for (int i = 1; i <= min(tot,50); i++) cout << ans[i];\n    if (!pan) cout << ans[min(50,tot)];//\u5076\u6570\u5c31\u591a\u8f93\u51fa\u4e00\u6b21\n    for (int i = min(tot-1,49); i >= 1; i--) cout << ans[i];\n    return 0;\n}\n```\n",
        "postTime": 1645187590,
        "uid": 127682,
        "name": "lg_zhou",
        "ccfLevel": 7,
        "title": "CF335B Palindrome"
    },
    {
        "content": "# CF335B Palindrome\n\n### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6 $ \\le 5 \\times 10^4 $ \u7684\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u8f93\u51fa\u4e00\u4e2a\u957f\u5ea6\u6700\u5927\u4e14\u4e0d\u8d85\u8fc7 $ 100 $ \u7684\u56de\u6587\u5b50\u5e8f\u5217\u3002\n\n### \u601d\u8def\n\n* $ 0 \\thicksim 20 $ pts: DFS \u66b4\u529b\u9009\u53d6\u5e76\u5224\u65ad\u3002\n\n  \u65f6\u95f4\u590d\u6742\u5ea6 $ O(2 ^ n k) $\uff08$ k $ \u4e3a\u5b50\u5e8f\u5217\u957f\u5ea6\uff09\u3002\n  \n  \u7531\u4e8e\u8fc7\u4e8e\u66b4\u529b\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\u3002\n\n* $ \\approx 60 $\uff08\u5b58\u7591\uff09pts: \u533a\u95f4 DP\u3002\n\n  \u6839\u636e\u9898\u610f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u533a\u95f4 DP \u6765\u63a8\u51fa\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u957f\u5ea6\u3002\u7136\u540e\u4f7f\u7528\u53cc\u6307\u9488\u627e\u51fa\u56de\u6587\u5b50\u5e8f\u5217\u3002\n\n  $ dp_{i, j} $ \u4ee3\u8868\u533a\u95f4 $ [i, j] $ \u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\n\n  \u521d\u59cb\u72b6\u6001 $ dp_{i, i} = 1 $\u3002\n\n  \u8f6c\u79fb\u65b9\u7a0b:\n\n  $$\n  \n  dp_{i, j} = \\begin {cases} \n  \n  1 ,& s_i = s_j \\\\\n  \\max \\{dp_{i + 1, j}, dp_{i, j - 1}\\} ,& s_i \\neq s_j.\n  \n  \\end {cases}\n  \n  $$\n  \n  \u65f6\u95f4\u590d\u6742\u5ea6 $ O(n ^ 2) $\u3002\n\n* \u53ef\u95ee\u9898\u662f\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e $ n \\le 5 \\times 10 ^ 4 $\uff0c$ O(n ^ 2) $ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u8fc7\u4e0d\u53bb\u7684\u3002\n\n  \u6211\u4eec\u56de\u770b\u9898\u76ee\uff0c\u53d1\u73b0\u6700\u591a\u53ea\u6c42\u4e00\u4e2a\u957f\u5ea6\u4e3a $ 100 $ \u7684\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u800c\u5b57\u7b26\u4e32\u5185\u53c8\u53ea\u6709\u5c0f\u5199\u5b57\u6bcd\u3002\n  \n  \u90a3\u4e48\u6839\u636e\u9e3d\u5de2\u539f\u7406\uff0c\u8bbe\u6700\u5c0f\u7684\u4e00\u5b9a\u5305\u542b\u56de\u6587\u5b50\u5e8f\u5217\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a $ x $\uff0c\u6211\u4eec\u6709:\n  \n  $$ x \\div 26 = 99 \\cdots\\cdots 1 $$\n  $$ x = 26 \\times 99 + 1 $$\n  $$ x = 2575 $$\n  \n  \u6240\u4ee5\u5bf9\u4e8e\u957f\u5ea6 $ \\ge 2575 $ \u7684\u5b57\u7b26\u4e32\uff0c\u5c31\u80af\u5b9a\u6709\u4e00\u4e2a\u957f\u5ea6 $ \\ge 100 $ \u7684\u56de\u6587\u5b50\u5e8f\u5217\u3002\n\n  \u800c\u5bf9\u4e8e\u957f\u5ea6 $ < 2575 $ \u7684\uff0c\u533a\u95f4 DP \u5373\u53ef\u3002\n\n  \u671f\u671b\u5f97\u5206 $ 100 $ pts\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n\nusing namespace std;\n\nint cnt[130] = {0};\nint dp[2600][2600] = {0};\n\nchar s[50010];\nchar Palindrome[110];\n\nint main () {\n    // freopen(\"palindrome.in\", \"r\", stdin);\n    // freopen(\"palindrome.out\", \"w\", stdout);\n    \n    scanf(\"%s\", s + 1);\n    \n    int n = strlen(s + 1);\n    \n    // \u82e5\u5b57\u7b26\u4e32\u957f\u5ea6 >= 2575,\n    // \u6839\u636e\u9e3d\u5de2\u539f\u7406 2575 / 26 = 99 ...... 1, 99 + 1 = 100,\n    // \u5219\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6 >= 100 \u7684\u76f8\u540c\u5b57\u7b26\u5b50\u5e8f\u5217.\n    \n    if (n >= 2575) {    \n        for (int i = 1; i <= n; i ++)\n            cnt[s[i]] += 1;\n        \n        for (int i = 'a'; i < 'z'; i ++) {\n            if (cnt[i] >= 100) {\n                for (int j = 1; j <= 100; j ++) \n                    printf(\"%c\", i);\n                \n                printf(\"\\n\");\n                \n                break;\n            }\n        }\n    }\n    else {  // O(2575 ^ 2).\n        // \u533a\u95f4 DP \u6c42\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217.\n        \n        for (int i = n; i >= 1; i --) {\n            dp[i][i] = 1;\n            \n            for (int j = (i + 1); j <= n; j ++) {\n                if (s[i] == s[j]) \n                    dp[i][j] = dp[i + 1][j - 1] + 2;\n                else \n                    dp[i][j] = max (dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n        \n        int idx = 0;\n        int len = min (dp[1][n], 100);\n        \n        // \u627e\u56de\u6587\u5b50\u5e8f\u5217.\n        \n        int l = 1, r = n;\n        \n        while (l <= r) {\n            if (s[l] == s[r]) {\n                Palindrome[++ idx] = s[l];\n                l ++, r --;\n            }\n            else if (dp[l + 1][r] > dp[l][r - 1])\n                l ++;\n            else if (dp[l + 1][r] <= dp[l][r - 1])\n                r --;\n            \n        }\n        \n        // \u8f93\u51fa\u90e8\u5206, \u8bb0\u5f97\u5224\u65ad\u5b50\u5e8f\u5217\u957f\u5ea6\u5947\u5076\u6027.\n        \n        int num = min (idx, 50);\n        bool lenIsOdd = len & 1;\n        \n        for (int i = 1; i <= num - 1; i ++)\n            printf(\"%c\", Palindrome[i]);\n        \n        if (lenIsOdd) printf(\"%c\", Palindrome[num]);\n        else printf(\"%c%c\", Palindrome[num], Palindrome[num]);\n        \n        for (int i = num - 1; i >= 1; i --) \n            printf(\"%c\", Palindrome[i]);\n        \n        printf(\"\\n\");\n        \n    }\n    \n    \n    return 0;\n}\n```\n\nUpdated on 2022.7.5: \u4fee\u6b63\u4e86\u6587\u4e2d\u591a\u5904\u7528\u8bcd\u9519\u8bef.\n",
        "postTime": 1656920965,
        "uid": 558336,
        "name": "root357",
        "ccfLevel": 0,
        "title": "CF335B Palindrome \u9898\u89e3"
    }
]