[
    {
        "content": "\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u8f6c\u6362\u6210\u56fe\u8bba\u6a21\u578b\uff0c\u7136\u540e\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6216\u8005\u6700\u77ed\u8def\u7b97\u6cd5\uff08Dijkstra\u6216\u8005SPFA\u7b97\u6cd5\uff09\u8fdb\u884c\u6c42\u89e3\u3002  \n\u8fd9\u91cc\u56e0\u4e3a\u53ef\u80fd\u6709\u4e9b\u540c\u5b66\u6ca1\u6709\u5b66\u5230\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u5e76\u4e14\u7528\u6700\u77ed\u8def\u7b97\u6cd5\u89e3\u51b3\u5e7f\u641c\u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898\u6709\u4e00\u70b9\u6740\u9e21\u7528\u725b\u5200\u7684\u611f\u89c9\uff08\u4eca\u5e74CSP-J\u590d\u8d5b\u7b2c4\u9898\u53ef\u4ee5\u7528\u5e7f\u641c\u505a\u7136\u800c\u6211\u4e5f\u7528\u4e86\u6700\u77ed\u8defSPFA\u7b97\u6cd5\uff09\uff0c\u6240\u4ee5\u6211\u8fd9\u91cc\u8fd8\u662f\u8bb2\u89e3\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002  \n\u5bf9\u4e8e\u4e00\u4e2a\u8fb9\u6743\u5747\u4e3a $1$ \u7684\u56fe\u6765\u8bf4\uff0c\u6211\u4eec\u901a\u8fc7\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5f97\u5230\u7684\u5c31\u662f\u6700\u77ed\u8def\u3002\u56e0\u4e3a\u6b64\u65f6\u4e00\u5f00\u59cb\u5165\u961f\u5217\u7684\u90fd\u662f\u8ddd\u8d77\u70b9 $0$ \u7684\u70b9\uff0c\u7136\u540e\u5165\u961f\u5217\u7684\u662f\u8ddd\u8d77\u70b9 $1$ \u7684\u70b9\uff0c\u7136\u540e\u5165\u961f\u5217\u7684\u662f\u8ddd\u8d77\u70b9 $2$ \u7684\u70b9\uff0c\u2026\u2026\uff08\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u4f53\u4f1a\u4e00\u4e0b\uff0c\u6b64\u65f6\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5c31\u662f\u4e00\u4e2a\u5c42\u6b21\u904d\u5386\uff09\n\n\u7136\u540e\u6211\u4eec\u6765\u770b\u600e\u4e48\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002  \n\n\u9996\u5148\u5bf9\u4e8e $a[i]$ \u6765\u8bf4\uff0c  \n- \u5982\u679c $i-a[i] \\ge 1$\uff0c\u5219\u4ece $i-a[i]$ \u5411 $i$ \u8fde\u4e00\u6761\u8fb9\uff1b\n- \u5982\u679c $i+a[i] \\le n$\uff0c\u5219\u4ece $i+a[i]$ \u5411 $i$ \u8fde\u4e00\u6761\u8fb9\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5f00\u59cb\u6211\u4eec\u7684\u641c\u7d22\u4e86\u3002  \n\u5728\u641c\u7d22\u4e4b\u524d\u6211\u4eec\u9700\u8981\u5148\u5f00\u4e24\u4e2a\u6570\u7ec4\uff1a\n- $odd[i]$ \u8868\u793a\u5750\u6807\u4e3a $i$ \u7684\u70b9\u5230\u5927\u6700\u8fd1\u7684\u4e00\u4e2a\u5947\u6570\u70b9\u6240\u9700\u7684\u6700\u5c11\u6b65\u6570\uff1b\n- $even[i]$ \u8868\u793a\u5750\u6807\u4e3a $i$ \u7684\u70b9\u5230\u5927\u6700\u8fd1\u7684\u4e00\u4e2a\u5076\u6570\u70b9\u6240\u9700\u7684\u6700\u5c11\u6b65\u6570\u3002\n\n\u6211\u4eec\u5148\u6765\u6c42 $odd$ \u503c\uff0c  \n\u6211\u4eec\u4ece $1$ \u5230 $n$ \u904d\u5386 $i$ \uff0c\n- \u5982\u679c $a[i]$ \u662f\u5947\u6570\uff0c\u5219\u8bbe $odd[i]$ \u4e3a $0$\uff0c\u540c\u65f6\u5c06\u5176\u52a0\u5165\u961f\u5217\uff1b\n- \u5426\u5219\uff08$a[i]$ \u4e3a\u5076\u6570\uff09\uff0c\u8bbe $odd[i]$ \u4e3a\u65e0\u7a77\u5927\u3002\n\n\u63a5\u4e0b\u6765\u6bcf\u6b21\u4ece\u961f\u5217\u91cc\u9762\u53d6\u51fa\u4e00\u4e2a\u5750\u6807 $u$\uff0c\u7136\u540e\u904d\u5386\u6240\u6709 $u$ \u53ef\u4ee5\u5230\u8fbe\u7684\u70b9 $v$ \uff0c\u5982\u679c $odd[v] > odd[u]+1$ \uff0c\u5219\u6807\u8bb0 $odd[v] = odd[u]+1$ \uff0c\u540c\u65f6\u5c06 $v$ \u52a0\u5165\u961f\u5217\u3002  \n\n\u6700\u7ec8\u6bcf\u4e2a\u70b9\u7684 $odd$ \u503c\u5373\u8868\u793a\u4ece\u5750\u6807 $i$ \u51fa\u53d1\u6700\u5c11\u9700\u8981\u82b1\u8d39\u591a\u5c11\u6b65\u80fd\u591f\u5230\u8fbe\u4e00\u4e2a\u5947\u6570\u503c\u5f97\u70b9\u3002\n\n\u7136\u540e\u6211\u4eec\u518d\u6765\u6c42 $even$ \u503c\uff08\u5176\u5b9e\u4f60\u4eec\u4f1a\u53d1\u73b0\u662f\u4e00\u6837\u7684\u9053\u7406\uff09\uff0c  \n\u6211\u4eec\u4ece $1$ \u5230 $n$ \u904d\u5386 $i$ \uff0c\n- \u5982\u679c $a[i]$ \u662f\u5076\u6570\uff0c\u5219\u8bbe $odd[i]$ \u4e3a $0$\uff0c\u540c\u65f6\u5c06\u5176\u52a0\u5165\u961f\u5217\uff1b\n- \u5426\u5219\uff08$a[i]$ \u4e3a\u5947\u6570\uff09\uff0c\u8bbe $odd[i]$ \u4e3a\u65e0\u7a77\u5927\u3002\n\n\u63a5\u4e0b\u6765\u6bcf\u6b21\u4ece\u961f\u5217\u91cc\u9762\u53d6\u51fa\u4e00\u4e2a\u5750\u6807 $u$\uff0c\u7136\u540e\u904d\u5386\u6240\u6709 $u$ \u53ef\u4ee5\u5230\u8fbe\u7684\u70b9 $v$ \uff0c\u5982\u679c $odd[v] > odd[u]+1$ \uff0c\u5219\u6807\u8bb0 $odd[v] = odd[u]+1$ \uff0c\u540c\u65f6\u5c06 $v$ \u52a0\u5165\u961f\u5217\u3002  \n\n\u81ea\u6b64\uff0c\u6211\u4eec\u5c31\u6c42\u89e3\u5b8c\u4e86 $odd$ \u548c $even$ \u503c\u3002  \n\n\u7136\u540e\u6211\u4eec\u4ece $1$ \u5230 $n$ \u904d\u5386\u5750\u6807 $i$\uff0c\n- \u5982\u679c $a[i]$ \u662f\u5947\u6570\uff0c\u8f93\u51fa $even[i]$\uff1b\n- \u5982\u679c $a[i]$ \u662f\u5076\u6570\uff0c\u8f93\u51fa $odd[i]$\u3002\n\n\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a  \n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 200020;\nint n, a[maxn], odd[maxn], even[maxn];\nvector<int> g[maxn];\nqueue<int> que;\nint main() {\n    cin >> n;\n    for (int i = 1; i <= n; i ++) cin >> a[i];\n    for (int i = 1; i <= n; i ++) {\n        if (i-a[i] >= 1) g[ i-a[i] ].push_back(i);\n        if (i+a[i] <= n) g[ i+a[i] ].push_back(i);\n    }\n    // odd\n    for (int i = 1; i <= n; i ++) {\n        if (a[i]%2) {\n            odd[i] = 0;\n            que.push(i);\n        }\n        else odd[i] = -1;\n    }\n    while (!que.empty()) {\n        int u = que.front();\n        que.pop();\n        int sz = g[u].size();\n        for (int i = 0; i < sz; i ++) {\n            int v = g[u][i];\n            if (odd[v] == -1 || odd[v] > odd[u] + 1) {\n                odd[v] = odd[u] + 1;\n                que.push(v);\n            }\n        }\n    }\n    // even\n    for (int i = 1; i <= n; i ++) {\n        if (a[i] % 2 == 0) {\n            even[i] = 0;\n            que.push(i);\n        }\n        else even[i] = -1;\n    }\n    while (!que.empty()) {\n        int u = que.front();\n        que.pop();\n        int sz = g[u].size();\n        for (int i = 0; i < sz; i ++) {\n            int v = g[u][i];\n            if (even[v] == -1 || even[v] > even[u] + 1) {\n                even[v] = even[u] + 1;\n                que.push(v);\n            }\n        }\n    }\n    for (int i = 1; i <= n; i ++) {\n        if (i > 1) putchar(' ');\n        if (a[i] % 2) cout << even[i];\n        else cout << odd[i];\n    }\n    cout << endl;\n    return 0;\n}\n```",
        "postTime": 1576298388,
        "uid": 291976,
        "name": "quanjun",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1272E \u3010Nearest Opposite Parity\u3011"
    },
    {
        "content": "## \u9898\u610f\uff1a\n\n[\u9898\u610f](https://www.luogu.com.cn/problem/CF1272E)\n\n## \u601d\u8def\uff1a\n\n\u6700\u77ed\u8def\uff0c\u5bf9\u4e8e\u70b9 $i$\uff0c\u5206\u522b\u5411 $i+a_i$ \u548c $i-a_i$ \u52a0\u4e00\u6761\u6743\u503c\u4e3a 1 \u7684\u70b9\u3002\n\n\u66b4\u529b\u7684\u8bdd\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u5076\u6570\u70b9\u627e\u6700\u77ed\u8def\u6700\u5c0f\u7684\u5947\u6570\u70b9\uff0c\u5947\u6570\u70b9\u627e\u6700\u77ed\u8def\u6700\u5c0f\u7684\u5076\u6570\u70b9\uff0c\u663e\u7136\u8fc7\u4e0d\u53bb\u3002\n\n\u8003\u8651\u5efa\u4e24\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff0c\u5947\u6570\u6e90\u70b9\u548c\u5076\u6570\u6e90\u70b9\u3002\u5c06\u6240\u6709 $a_i$ \u4e3a\u5076\u6570\u7684\u70b9\u6211\u4eec\u5411\u5076\u6570\u6e90\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a 0 \u7684\u8fb9\uff0c\u4ece\u6e90\u70b9**\u53cd\u5411**\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u6bcf\u4e2a\u5947\u6570\u8282\u70b9\u6b64\u65f6\u7684\u6700\u77ed\u8def\u7684\u503c\u4e00\u5b9a\u662f\u5230\u6240\u6709\u5076\u6570\u8282\u70b9\u7684\u6700\u5c0f\u6b65\u6570\u3002\u540c\u7406\uff0c\u4ece\u5947\u6570\u8282\u70b9**\u53cd\u5411**\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u6bcf\u4e2a\u5076\u6570\u8282\u70b9\u6b64\u65f6\u6700\u77ed\u8def\u7684\u503c\u662f\u5230\u6240\u6709\u5947\u6570\u8282\u70b9\u7684\u6700\u5c0f\u6b65\u6570\u3002\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <iostream>\n#include <algorithm>\n#include <string>\n#define int long long\nusing namespace std;\n\ninline int read() {\n    int f = 0, s = 0;\n    char ch = getchar();\n    while (!isdigit(ch)) f |= ch == '-', ch = getchar();\n    while (isdigit(ch)) s = s * 10 + (ch ^ 48), ch = getchar();\n    return f ? -s : s;\n}\n\nvoid print (int x) {\n    if (x < 0) putchar('-'), x = -x;\n    if (x > 9) print (x / 10);\n    putchar(x % 10 + '0');\n}\n\nconst int maxn = 2e6 + 10;\nint n, num, head[maxn], dis[maxn], vis[maxn], a[maxn], ans[maxn];\n\nstruct node {\n    int nex, to, w;\n}edge[maxn << 1];\n\nvoid add(int from, int to, int w) {\n    edge[++num].nex = head[from];\n    edge[num].to = to;\n    edge[num].w = w;\n    head[from] = num;\n}\n \nvoid spfa(int s) {\n    memset(vis, 0, sizeof vis);\n    memset(dis, 0x3f, sizeof dis);\n    dis[s] = 0;\n    vis[s] = 1;\n    queue<int> q;\n    q.push(s);\n    while (!q.empty()) {\n        int p = q.front();\n        q.pop();\n        vis[p] = 0;\n        for (int i = head[p]; i; i = edge[i].nex) {\n            int to = edge[i].to;\n            int w = edge[i].w;\n            if (dis[to] > dis[p] + w) {\n                dis[to] = dis[p] + w;\n                if (vis[to] == 0) {\n                    vis[to] = 1;\n                    q.push(to);\n                }\n            }\n        }\n    }\n}\n\nsigned main () {\n    n = read();\n    for (int i = 1; i <= n; i++) a[i] = read();\n    for (int i = 1; i <= n; i++) {\n        if (i + a[i] <= n) add(i + a[i], i, 1);\n        if (i - a[i] >= 1) add(i - a[i], i, 1);\n    } \n    for (int i = 1; i <= n; i++)\n        if (a[i] & 1) add(n + 1, i, 0);\n        else add(n + 2, i, 0);\n    spfa(n + 1);\n    for (int i = 1; i <= n; i++) if (a[i] % 2 == 0) ans[i] = dis[i];\n    spfa(n + 2);\n    for (int i = 1; i <= n; i++) if (a[i] & 1) ans[i] = dis[i];\n    for (int i = 1; i <= n; i++) print(ans[i] != dis[0] ? ans[i] : -1), putchar(' ');\n    return 0;\n}\n```",
        "postTime": 1631759908,
        "uid": 371178,
        "name": "Fan_Tuan",
        "ccfLevel": 4,
        "title": "CF1272E Nearest Opposite Parity \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u4e48\u7b80\u5355\u7684\u9898\u90fd\u6ca1\u4eba\u6765\u53d1\u4e00\u4e0b\u9898\u89e3\u7684\u5417 ( (  \n\n---\n\ndfs \u53ef\u8fc7.  \n\n\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e, \u8bb0\u5f55\u80fd\u8df3\u5230\u5b83\u7684\u8282\u70b9\u7f16\u53f7, \u8fd9\u4e00\u6b65\u53ef\u4ee5\u7528\u90bb\u63a5\u8868\u6765\u5b8c\u6210.  \n\n\u7136\u540e\u5148 O(n) \u626b\u4e00\u904d\u6b65\u6570\u4e3a 1 \u7684\u70b9, \u8fdb\u884c\u6807\u8bb0,  \n\u5c06\u6bcf\u4e00\u4e2a\u70b9\u90fd\u8fdb\u884c\u4e00\u904d dfs, \u5f80\u56de\u91cd\u73b0\u8def\u5f84\u5e76\u66f4\u65b0\u6b65\u6570,  \n\u540c\u65f6\u52a0\u4e0a\u4e00\u4e9b\u526a\u679d.  \n\n\u5177\u4f53\u7ec6\u8282\u5728\u4ee3\u7801\u4e2d\u6709\u4f53\u73b0.\n\n---\n\n\u4ee3\u7801:  \n\n```c\n#include <stdio.h> \n#include <iostream> \n#include <vector> \n\n// #define int long long\n\nint max(int a, int b) {\n    return a > b? a: b; \n}\nint min(int a, int b) {\n    return a < b? a: b; \n}\n\nint n, a[200010]; \nint d[200010]; \nstd :: vector < int > from[200010]; // from \u8bb0\u5f55\u80fd\u8df3\u5230\u8be5\u70b9\u7684\u4f4d\u7f6e\u7684\u96c6\u5408.\n\nvoid dfs(int id) { //\u641c\u7d22\n    if (id - a[id] > 0) \n        d[id] = min(d[id], d[id - a[id]] + 1); // \u66f4\u65b0\u6b65\u6570\n    if (id + a[id] <= n) \n        d[id] = min(d[id], d[id + a[id]] + 1); // \u66f4\u65b0\u6b65\u6570\n    for (int x: from[id]) // \u5f80\u56de\u904d\u5386\u8282\u70b9\n        if (d[x] > d[id] + 1) // \u526a\u679d, \u5982\u679c\u65e0\u6cd5\u7ee7\u7eed\u66f4\u65b0\u518d\u641c\u4e0b\u53bb\u5c31\u65e0\u610f\u4e49\u4e86.\n            dfs(x); // \u5411\u4e0b\u641c.\n}\n\nmain() {\n    scanf(\"%d\", &n); \n    d[0] = 1; // \u9884\u5904\u7406 d[0] = 1, \u53ef\u4ee5\u5bf9 d[i] = 1 \u7684\u4f4d\u7f6e\u8fdb\u884c\u4e00\u4e2a\u7279\u5224\n    for (int i = 1; i <= n; ++ i) \n        d[i] = 2147000000; // \u4e0d\u8981\u8d4b\u503c\u4e3a INT_MAX, \u5bb9\u6613\u6ea2\u51fa\n    for (int i = 1; i <= n; ++ i) {\n        scanf(\"%d\", a + i); \n        from[0].push_back(i); // \u5411 0 \u8fde\u8fb9, \u65b9\u4fbf\u540e\u9762\u76f4\u63a5\u641c\n        if (i - a[i] > 0) \n            from[i - a[i]].push_back(i); // \u90bb\u63a5\u8868\u7edf\u8ba1\n        if (i + a[i] <= n) \n            from[i + a[i]].push_back(i); // \u90bb\u63a5\u8868\u7edf\u8ba1\n    }\n    for (int i = 1; i <= n; ++ i) {\n        if (i - a[i] > 0) \n            if ((a[i - a[i]] ^ a[i]) & 1) {\n                d[i] = 1; // \u66f4\u65b0 d \n            }\n        if (i + a[i] <= n) \n            if ((a[i + a[i]] ^ a[i]) & 1) {\n                d[i] = 1; // \u66f4\u65b0 d \n            }\n    }\n    dfs(0); // \u4ece 0 \u76f4\u63a5\u5f00\u59cb\u641c, \u4e0d\u7528\u5faa\u73af\u4e86\n    for (int i = 1; i <= n; ++ i) \n        printf(\"%d \", (d[i] == 2147000000? -1: d[i])); // -1 \u7684\u60c5\u51b5\u8bb0\u5f97\u5224\u65ad\n    return 0; \n}\n```\n\n\u8c8c\u4f3c\u6709 bfs \u7684\u89e3\u6cd5\u8fd8\u8981\u5757\u4e00\u70b9\u6765\u7740, \u4f46\u662f\u80fd\u8fc7\u5c31\u597d\u4e86 ( (",
        "postTime": 1576255275,
        "uid": 244079,
        "name": "Hydrate",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1272E \u3010Nearest Opposite Parity\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1272E)\n\nsolution\uff1a\n------------\n- \u7c7b\u4f3c `Dijkstra`\uff08\u4e5f\u53ef\u4ee5\u7528 `SPFA`\uff0c\u4f46\u662f\u4f17\u6240\u5468\u77e5 `SPFA` \u5b83\u6b7b\u4e86\uff09\u3002\n1. \u53cd\u5411\u5efa\u56fe\uff1a$n$ \u4e2a\u4f4d\u7f6e\u5206\u522b\u662f $n$ \u4e2a\u70b9\uff0c\u5982\u679c\u7b2c $i$ \u4e2a\u4f4d\u7f6e\u80fd\u8df3\u5230\u7b2c $j$ \u4e2a\u4f4d\u7f6e\uff0c\u5c31\u5efa\u4e00\u6761\u4ece $j$ \u5230 $i$ \u7684\u8fb9\u3002\n2. \u6c42\u5076\u6570\u6240\u5728\u7684\u4f4d\u7f6e\u81f3\u5c11\u8df3\u591a\u5c11\u6b65\u80fd\u5230\u5947\u6570\u6240\u5728\u7684\u4f4d\u7f6e\uff1a\u5c06\u6240\u6709\u5947\u6570\u6240\u5728\u7684\u4f4d\u7f6e\u653e\u8fdb\u961f\u5217 $Q$ \u4e2d\uff0c\u8fdb\u884c `bfs`\u3002\n3. \u6c42\u5947\u6570\u6240\u5728\u7684\u4f4d\u7f6e\u81f3\u5c11\u8df3\u591a\u5c11\u6b65\u80fd\u5230\u5076\u6570\u6240\u5728\u7684\u4f4d\u7f6e\uff1a\u5c06\u6240\u6709\u5076\u6570\u6240\u5728\u7684\u4f4d\u7f6e\u653e\u8fdb\u961f\u5217 $Q$ \u4e2d\uff0c\u8fdb\u884c `bfs`\u3002\n4. \u6328\u4e2a\u8f93\u51fa `bfs` \u540e\u7684\u7b54\u6848\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 5;\nint a[N], ans[N], spj[N], spo[N], n;\nqueue<int> q;\nvector<int> tree[N];\nbool visj[N], viso[N];\nvoid bfs(bool flag) {\n\tif (flag == 1) {//\u5982\u679c\u662f\u5947\u6570\n\t\twhile (!q.empty()) {\n\t\t\tint x = q.front();//\u53d6\u51fa\u961f\u5934\n\t\t\tq.pop();//\u5220\u9664\u961f\u5934\n\t\t\tfor (int i = 0; i < tree[x].size(); i++) {//\u904d\u5386\u5b83\u7684\u6240\u6709\u8fb9\n\t\t\t\tif (!visj[tree[x][i]]) {//\u6ca1\u6709\u8bbf\u95ee\u8fc7\n\t\t\t\t\tvisj[tree[x][i]] = 1;//\u6807\u8bb0\u8bbf\u95ee\n\t\t\t\t\tq.push(tree[x][i]);//\u52a0\u8fdb\u961f\u5217\n\t\t\t\t\tspj[tree[x][i]] = spj[x] + 1;//\u8bb0\u5f55\u6b65\u6570\n\t\t\t\t}\n\t\t\t}\n\t\t}//\u662f\u4e0d\u662f\u5f88\u50cfDijkstra\uff1f\n\t}\n\telse {//\u5982\u679c\u662f\u5076\u6570\n\t\twhile (!q.empty()) {//\u540c\u4e0a\n\t\t\tint x = q.front();\n\t\t\tq.pop();\n\t\t\tfor (int i = 0; i < tree[x].size(); i++) {\n\t\t\t\tif (!viso[tree[x][i]]) {\n\t\t\t\t\tviso[tree[x][i]] = 1;\n\t\t\t\t\tq.push(tree[x][i]);\n\t\t\t\t\tspo[tree[x][i]] = spo[x] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++) scanf(\"%d\", &a[i]);\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (i - 1 >= a[i]) tree[i - a[i]].push_back(i);\n\t\tif (n - i >= a[i]) tree[i + a[i]].push_back(i);\n\t}//\u53cd\u5411\u5efa\u56fe\n\tfor (int i = 1; i <= n; i++) if (a[i] % 2 == 1) q.push(i), visj[i] = 1;//\u662f\u5947\u6570\u5c31\u52a0\u8fdb\u961f\u5217\n\tbfs(1);//bfs\n\tfor (int i = 1; i <= n; i++) if (a[i] % 2 == 0) q.push(i), viso[i] = 1;//\u662f\u5076\u6570\n\tbfs(0);//\u540c\u6837\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (a[i] % 2 == 0) {\n\t\t\tif (visj[i] == 0) printf(\"-1 \");\n\t\t\telse printf(\"%d \", spj[i]);\n\t\t}//\u6328\u4e2a\u8f93\u51fa\n\t\telse {\n\t\t\tif (viso[i] == 0) printf(\"-1 \");\n\t\t\telse printf(\"%d \", spo[i]);\n\t\t}//\u6328\u4e2a\u8f93\u51fa\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1647749193,
        "uid": 479325,
        "name": "Xdl_rp",
        "ccfLevel": 0,
        "title": "CF1272E"
    },
    {
        "content": "**BFS\u5927\u6cd5\u597d\uff01**\n### \u9898\u89e3\n\u65b9\u4fbf\u7406\u89e3\uff0c\u6682\u65f6\u5c06\u53ef\u4ee5\u4e00\u6b65\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u6210\u4e3a\u539f\u70b9\u3002\n\n\u660e\u786e\u4e00\u70b9\uff0c\u4e00\u4e2a\u70b9\u6ee1\u8db3\u6761\u4ef6\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u641c\u5230\u4e00\u4e2a\u539f\u70b9\u3002\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u4e3a\u6700\u5c0f\u7684\u641c\u5230\u539f\u70b9\u7684\u6b65\u6570+1\u3002\u663e\u7136\u53ef\u4ee5BFS\u3002\u7531\u4e8e\u76f4\u63a5\u641c\u7684\u590d\u6742\u5ea6\u662f $O(n^2)$ \u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u51fa\u6240\u6709\u539f\u70b9\uff0c\u5efa\u8fd4\u56fe\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4e3a $O(n)$\u3002\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>//\nusing namespace std;\nint n,a[200005],book[200005];\nvector<int> E[200005];\nbool check(int x)\n{\n\tif(x-a[x]>0&&abs(a[x]-a[x-a[x]])%2) return 1;\n\tif(x+a[x]<=n&&abs(a[x]-a[x+a[x]])%2) return 1;\n\treturn 0;\n}\nint main()\n{\n\tcin>>n;\n\tqueue<int> q;\n\tmemset(book,-1,sizeof(book));\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(i-a[i]>0) E[i-a[i]].push_back(i);\n\t\tif(i+a[i]<=n) E[i+a[i]].push_back(i);//\u5efa\u8fd4\u56fe\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(check(i)) book[i]=1,q.push(i);//\u539f\u70b9\n\twhile(q.size())//BFS\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=0;i<E[u].size();i++)\n\t\t{\n\t\t\tint v=E[u][i];\n\t\t\tif(book[v]!=-1) continue;\n\t\t\tq.push(v);\n\t\t\tbook[v]=book[u]+1;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++) cout<<book[i]<<' ';\n\treturn 0;\n}\n```",
        "postTime": 1638629860,
        "uid": 448159,
        "name": "wz20201136",
        "ccfLevel": 7,
        "title": "CF1272E\u9898\u89e3"
    }
]