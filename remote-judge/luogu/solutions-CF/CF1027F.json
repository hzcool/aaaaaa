[
    {
        "content": "\u8fd9\u9898\u6211\u7528\u5e76\u67e5\u96c6\u8fc7\u4e86\n\n\u770b\u5230\u8303\u56f41e9\uff0c\u6240\u4ee5\u5148\u79bb\u6563\u3002\u7136\u540e\u6bcf\u6b21\u628a\u70b9\u5bf9\u5e94\u7684\u4e24\u4e2a\u65f6\u95f4\u7528\u5e76\u67e5\u96c6\u8fde\u6761\u8fb9\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7684\u4e24\u4e2a\u65f6\u95f4\uff0c\u5206\u7c7b\u8ba8\u8bba\n\n - \u4e24\u4e2a\u65f6\u95f4\u90fd\u6ca1\u9009\uff0c\u6682\u65f6\u9009\u5c0f\u7684\u90a3\u4e2a\uff0c\u5e76\u7528\u5e76\u67e5\u96c6\u628a\u4e24\u4e2a\u65f6\u95f4\u8fde\u8d77\u6765\n - \u6709\u4e00\u4e2a\u9009\u4e86\uff0c\u90a3\u4e48\u8fd9\u6b21\u9009\u5269\u4e0b\u7684\u90a3\u4e2a\uff0c\u7136\u540e\u628a\u8fd9\u4e24\u4e2a\u65f6\u95f4\u5220\u6389\uff08\u5c31\u662f\u5728\u5e76\u67e5\u96c6\u91cc\u628a\u4ed6\u4eec\u7684\u7956\u5148\u8bbe\u7f6e\u4e3a0\uff09\n - \u90fd\u9009\u8fc7\u4e86\uff08\u8868\u73b0\u4e3a\u4e24\u4e2a\u65f6\u95f4\u7684\u7956\u5148\u90fd\u4e3a0\uff09\uff0c\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa-1\u5f97\u4e86\n\n\u4e3a\u4ec0\u4e48\u8fd9\u9898\u7528\u5e76\u67e5\u96c6\u5c31\u641e\u5b9a\u4e86\u5462\uff0c\u5e76\u67e5\u96c6\u7684\u8fde\u8fb9\u64cd\u4f5c\u7684\u610f\u4e49\u662f\u4ec0\u4e48\uff1f\n\n\u5176\u5b9e\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5c31\u884c\u4e86\n\n\u4ee5 $(1,5)(1,7)(5,13)$\u4e3a\u4f8b\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u4efb\u52a1\uff0c\u6211\u5148\u9009\u4e861\uff0c\u628a1\u4e0e5\u8fde\u8d77\u6765\uff0c\u5e76\u4e145\u662f1\u7684\u7956\u5148\uff1b\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u4efb\u52a1\uff0c\u6211\u7684\u5f85\u9009\u65f6\u95f4\u5c31\u53d8\u4e3a\u4e86$(5,7)$\uff0c\u90a3\u4e48\u6211\u90095\u7684\u610f\u4e49\u662f\uff1a\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u4efb\u52a1\u90091\u7684\u64cd\u4f5c\u53cd\u6094\uff0c\u6539\u90095\uff0c\u7136\u540e\u6211\u5728\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u7684\u65f6\u5019\u9009\u62e9\u4e861\n\n\u8fd9\u5c31\u662f\u5e76\u67e5\u96c6\u5728\u8fd9\u91cc\u7684\u7528\u5904\n\n\u5177\u4f53\u5b9e\u73b0\u5728\u4ee3\u7801\u66f4\u597d\n\nCode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 1000010\nusing namespace std;\nstruct node{\n\tint id, x, v;\n}a[maxn << 1];\nint n, ans, num[maxn << 1], f[maxn << 1], p;\n\ninline int read(){\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n\tfor (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n\treturn s * w;\n}\n\nbool cmp1(node x, node y){ return x.x < y.x; }\nbool cmp2(node x, node y){ return x.id == y.id ? x.v < y.v : x.id < y.id; }\nint get(int k){ return k == f[k] ? k : f[k] = get(f[k]); }\n\nint main(){\n\tn = read();\n\tfor (int i = 1; i <= n; ++i) a[(i << 1) - 1].x = read(), a[i << 1].x = read(), a[(i << 1) - 1].id = a[i << 1].id = i;\n\tsort(a + 1, a + 1 + (n << 1), cmp1);\n\ta[0].x = a[1].x + 1;\n\tfor (int i = 1; i <= (n << 1); ++i) a[i].v = a[i].x == a[i - 1].x ? p : ++p, num[a[i].v] = a[i].x;\n\tsort(a + 1, a + 1 + (n << 1), cmp2);\n\tfor (int i = 1; i <= p; ++i) f[i] = i;\n\tfor (int i = 1; i <= n; ++i){\n\t\tint s1 = get(a[(i << 1) - 1].v), s2 = get(a[i << 1].v);\n\t\tif (!s1 && !s2){ puts(\"-1\"); return 0; }\n\t\tif (s1 == s2 || !s1 || !s2){ ans = max(ans, max(num[s1], num[s2])); f[s1] = f[s2] = 0; } else{\n\t\t\tif (s1 > s2) swap(s1, s2);\n\t\t\tans = max(ans, num[s1]); f[s1] = s2;\n\t\t}\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1564019846,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1027F \u3010Session in BSU\u3011"
    },
    {
        "content": "1\u3001\u5982\u679c\u8fb9\u6570\u7b49\u4e8e\u70b9\u6570 \u5373\u4e3a\u4e00\u4e2a\u57fa\u73af\u6811\uff0c\u90a3\u4e48\u660e\u663e \u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u6700\u540e\u65f6\u95f4\u4e3a \u6743\u503c\u6700\u5927\u7684\u70b9\n\n2\u3001\u5982\u679c\u8fb9\u6570\u5c0f\u4e8e\u70b9\u6570 \u5373\u4e3a\u4e00\u4e2a\u6811\uff0c\u90a3\u4e48\u8fde\u901a\u5757\u7684\u6700\u540e\u65f6\u95f4\u4e3a \u6743\u503c\u6b21\u5927\u7684\u70b9\n\n3\u3001\u5982\u679c\u8fb9\u6570\u5927\u4e8e\u70b9\u6570 \u90a3\u4e48\u5c31\u51b2\u7a81\u4e86\uff0c \u8f93\u51fa-1\u5c31\u597d\u4e86\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ninline int read(){int x=0,f=1,ch=getchar(); while(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();} while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();} return x*f;}\ninline void write(int x){if (x<0) putchar('-'),x=-x; if (x>=10) write(x/10); putchar(x%10+'0');}\ninline void writeln(int x){write(x); puts(\"\");}\nconst int N=2e6+5;\nint n,tot,head[N],a[N],b[N],num[N],cnt;\nstruct edge{\n\tint link,next;\n}e[N];\ninline void init(){\n\tn=read();\n\tfor (int i=1;i<=n;i++){\n\t\ta[i]=read(); b[i]=read();\n\t\tnum[++cnt]=a[i]; num[++cnt]=b[i];\n\t}\n\tsort(num+1,num+1+cnt);\n\tcnt=unique(num+1,num+1+cnt)-num-1;\n}\ninline void add_edge(int u,int v){\n\te[++tot]=(edge){v,head[u]}; head[u]=tot;\n}\ninline void insert(int u,int v){\n\tadd_edge(u,v); add_edge(v,u);\n}\nbool vis[N];\nint ans,ed,sz,mx1,mx2;\nvoid dfs(int u){\n\tif (vis[u]) return;\n\tif (u>mx1) mx2=mx1,mx1=u;\n\t\telse if (u>mx2) mx2=u;\n\tvis[u]=1; sz++;\n\tfor (int i=head[u];i;i=e[i].next){\n\t\ted++; dfs(e[i].link);\n\t}\n}\ninline void solve(){\n\tfor (int i=1;i<=n;i++){\n\t\ta[i]=lower_bound(num+1,num+1+cnt,a[i])-num;\n\t\tb[i]=lower_bound(num+1,num+1+cnt,b[i])-num;\n\t\tinsert(a[i],b[i]);\n\t}\n\tans=0;\n\tfor (int i=cnt;i;i--){\n\t\tif (!vis[i]){\n\t\t\tmx2=mx1=sz=ed=0;\n\t\t\tdfs(i);\n\t\t\tif (ed/2>sz) {\n\t\t\t\tputs(\"-1\"); return;\n\t\t\t}else{\n\t\t\t\tif (ed/2==sz) ans=max(ans,mx1);\n\t\t\t\t\telse ans=max(ans,mx2);\n\t\t\t}\n\t\t}\n\t}\n\twriteln(num[ans]);\n}\nint main(){\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1537268284,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1027F \u3010Session in BSU\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n[$KesdiaelKen$](https://www.luogu.org/space/show?uid=32275)\u5927\u4f6c\u8981\u5b9e\u73b0\u4ed6\u7684$AK$\u8ba1\u5212\u3002\u6709$n$\u9053\u9898\u7b49\u7740\u4ed6\u505a\uff0c\u7b2c$i$\u9898\u53ea\u6709\u4e24\u4e2a$AC$\u65f6\u95f4\uff0c$a_i$\u6216$b_i$\u3002\u9519\u8fc7\u4e86\u8fd9\u4e24\u4e2a$AC$\u65f6\u95f4\uff0c\u4ed6\u5c31\u4e0d\u80fd$AK$\u8650\u5168\u573a\u4e86\u3002\u4f46\u662f\u4ed6\u5728\u4e00\u4e2a\u65f6\u95f4\u6bb5\u91cc\u53ea\u80fd\u505a\u81f3\u591a\u4e00\u9053\u9898\u3002\u73b0\u5728\u8bf7\u4f60\u544a\u8bc9\u4ed6\uff0c\u4ed6\u6700\u65e9\u80fd\u5728\u54ea\u4e2a\u65f6\u523b$AK$\u8650\u5168\u573a\u3002\u5982\u679c\u4e0d\u80fd\uff0c\u8f93\u51fa$-1$\u3002\uff08$1\\le n\\le 10^6,1\\le a_i<b_i\\le 10^9$\uff09\n\n## \u89e3\u6cd5\n\n\u6700\u76f4\u63a5\u7684\u60f3\u6cd5\u81ea\u7136\u662f\u79bb\u6563\u5316$a,b$\uff0c\u6bcf\u9053\u9898\u5efa\u4e00\u4e2a\u70b9\uff0c\u6bcf\u4e2a$AC$\u65f6\u523b\u5efa\u4e00\u4e2a\u70b9\uff0c\u4ece\u9898\u76ee\u5411$AC$\u65f6\u523b\u8fde\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u8dd1\u4e8c\u5206\u56fe\u5b8c\u7f8e\u5339\u914d/\u4e8c\u5206\u6700\u5927\u6d41\u3002\uff08\u6ca1\u5b66\u8fc7\u4e8c\u5206\u56fe/\u7f51\u7edc\u6d41\u7684\u5f53\u6211\u6ca1\u8bf4\uff09\n\n\u89c2\u5bdf\u6b64\u9898\u7684\u6570\u636e\u8303\u56f4\uff0c$10^6$\u8fdc\u8fdc\u8d85\u51fa\u4e86\u4e8c\u5206\u56fe/\u7f51\u7edc\u6d41\u53ef\u4ee5\u627f\u53d7\u7684\u8303\u56f4\u3002\u9700\u8981\u5bfb\u627e\u66f4\u4f18\u7684\u505a\u6cd5\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5efa\u597d\u4e86\u56fe\u3002\u73b0\u5728\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u6837\u7684\u56fe\u53ef\u80fd\u662f\u591a\u4e2a\u8054\u901a\u5757\u7ec4\u6210\u7684\u3002\u800c\u8054\u901a\u5757\u4e4b\u95f4\u5e76\u6ca1\u6709\u5f71\u54cd\u5173\u7cfb\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7528$dfs$\u8ba1\u7b97\u5904\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u72b6\u6001\uff0c\u5206\u7c7b\u8ba8\u8bba\uff0c\u6700\u540e\u5bf9\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u7b54\u6848\uff08\u8ba1\u7b97\u51fa\u7684\u6700\u5c0f\u65f6\u95f4\uff09\u53d6\u6700\u5927\u503c\uff0c\u5373\u4e3a\u6240\u6c42\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u60c5\u51b5\uff0c\u5206\u7c7b\u8ba8\u8bba\u5982\u4e0b\uff1a\n\n\u82e5\u8be5\u8054\u901a\u5757\u7684\u8fb9\u6570\u5927\u4e8e\u70b9\u6570\uff0c\u7531\u4e8e\u6bcf\u4e2a\u8fb9\u90fd\u5bf9\u5e94\u4e00\u79cd\u51b3\u7b56\uff0c\u6b64\u65f6\u4e00\u5b9a\u65e0\u89e3\uff0c\u8f93\u51fa$-1$\uff1b\n\n\u82e5\u8be5\u8054\u901a\u5757\u7684**\u8fb9\u6570**\u5c0f\u4e8e**\u70b9\u6570**\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5757\u8fde\u901a\uff0c\u6240\u4ee5\u8fd9\u4e00\u5b9a\u662f\u68f5\u6811\u3002\u5176\u4e2d\u6240\u6709\u7684\u8282\u70b9\u90fd\u4f1a\u88ab\u9009\u5230\uff0c\u53d6\u8be5\u8fde\u901a\u5757\u7684**\u6700\u5927\u503c**\u3002\n\n\u82e5\u8be5\u8054\u901a\u5757\u7684\u8fb9\u6570\u7b49\u4e8e\u70b9\u6570\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u57fa\u73af\u6811\u3002\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u5206\u914d\u65b9\u6848\u3002\u4ee5\u8fde\u901a\u5757\u4e2d\u6700\u5927\u503c\u6240\u5728\u7684\u70b9\u4e3a\u6839\u8fdb\u884c$dfs$\u3002\u6bcf\u4e2a\u70b9\u548c\u5b83\u7684\u7236\u4eb2\u6240\u8fde\u7684\u8fb9\u5373\u4e3a\u6240\u9009\u62e9\u7684\u65b9\u6848\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6b64\u65f6\u53d6\u8be5\u8054\u901a\u5757\u7684**\u6b21\u5927\u503c**\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5728\u627e\u5230\u4e00\u4e2a\u8054\u901a\u5757\u4e4b\u540e\uff0c\u8fdb\u884c\u4e00\u4e2a$dfs$\uff0c\u6c42\u51fa\u8be5\u8054\u901a\u5757\u7684\u70b9\u6570\uff0c\u8fb9\u6570\uff0c\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u5728$O(n)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6109\u5feb\u5730\u6c42\u51fa\u7b54\u6848\u5566\uff01\n\n## \u4ee3\u7801\u5c55\u793a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<set>\n#include<map>\nusing namespace std;\nconst int maxn=1000010;\nint st[maxn*2],current,id[maxn*2];\nint n,a[maxn],b[maxn],cur,cnt,h[maxn*3],nxt[maxn*6],p[maxn*6],ans,idx,cc[maxn*3],nodes,edges,max1,max2;\nmap<int,int>mp;\ninline void add_edge(int x,int y)\n{\n    cur++;nxt[cur]=h[x];h[x]=cur;p[cur]=y;\n}\nvoid dfs(int x)\n{\n    //printf(\"%d\\n\",x);\n    nodes++;\n    cc[x]=idx;\n    for(int j=h[x];j;j=nxt[j])\n    {\n        edges++;\n        if(!cc[p[j]])\n        {\n            dfs(p[j]);\n            if(p[j]>n)\n            {\n                if(p[j]-n>max1)max2=max1,max1=p[j]-n;\n                else if(p[j]-n>max2)max2=p[j]-n;\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)scanf(\"%d%d\",a+i,b+i),st[++current]=a[i],st[++current]=b[i];\n    sort(st+1,st+current+1);\n    for(int i=1;i<=current;i++)if(st[i]!=st[i-1])id[++cnt]=st[i],mp[st[i]]=cnt;\n    for(int i=1;i<=n;i++)a[i]=mp[a[i]]+n,b[i]=mp[b[i]]+n;\n    for(int i=1;i<=n;i++)add_edge(i,a[i]),add_edge(i,b[i]),add_edge(a[i],i),add_edge(b[i],i);//printf(\"%d %d\\n%d %d\\n\",i,a[i],i,b[i]);\n    for(int i=1;i<=n+cnt;i++)if(!cc[i])\n    {\n        nodes=edges=0;\n        max1=max2=-1;\n        idx++;\n        dfs(i);\n        //printf(\"\\n\");\n        edges/=2;\n        if(nodes<edges){printf(\"-1\\n\");return 0;}\n        if(nodes==edges)ans=max(ans,max1);\n        if(nodes>edges)ans=max(ans,max2);\n    }\n    //printf(\"%d %d\\n\",cur,ans);\n    printf(\"%d\\n\",id[ans]);\n    return 0;\n}\n```",
        "postTime": 1535452677,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1027F \u3010Session in BSU\u3011"
    },
    {
        "content": "# \u524d\u8a00\n\u770b\u5230\u9898\u89e3\u91cc\u90fd\u662f\u7528\u5e76\u67e5\u96c6\u4ec0\u4e48\uff0c\u7528DP\u7684\u6211\u6765\u6c34\u4e00\u53d1\u9898\u89e3\u3002\n# \u57fa\u672c\u601d\u8def\n\u9898\u76ee\u4e2d\u8981\u6211\u4eec\u9009\u65f6\u95f4\uff0c\u4f46\u662f\u662f\u9009\u65f6\u95f4\u70b9\uff0c\u4e0d\u662f\u65f6\u95f4\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u79bb\u6563\u5316\uff0c\u8fd9\u6837\u540e\u9762\u6bd4\u8f83\u597d\u5904\u7406\u3002\u7136\u540e\u8fdb\u884c\u8fde\u8fb9\uff0c\u4e00\u6761\u8fb9\u4e0a\u81f3\u5c11\u8981\u9009\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fde\u597d\u8fb9\u4e4b\u540e\u5982\u679c\u73af\u5185\u6709\u73af\uff0c\u90a3\u4e48\u662f\u4e00\u5b9a\u65e0\u89e3\u7684\uff0c\u56e0\u4e3a\u4e00\u4e2a\u73af\u4e0a\u7684\u70b9\u662f\u4e00\u5b9a\u8981\u9009\u7684\uff0c\u73af\u5185\u6709\u73af\u5c31\u5bfc\u81f4\u4e00\u8fb9\u65e0\u6cd5\u6ee1\u8db3\u8981\u6c42\u3002\u5224\u65ad\u597d\u6709\u65e0\u89e3\u4e4b\u540e\uff0c\u5c31\u662fDP\u65f6\u95f4\u4e86\u3002\n# DP\u601d\u8def\n\u6211\u4eec\u5b9a\u4e49 \uff1a\n\n$ f_{x,1} $ ---- $ x $ \u4e0e\u4ed6\u7684\u5b50\u8282\u70b9\u4e2d\u6700\u5927\u7684\u65f6\u95f4\u70b9\uff08\u4e0d\u5305\u62ec\u73af\uff09\u3002\n\n$ g_{x,1} $ ----\u4e0d\u9009 $ x $ \u8fd9\u4e2a\u65f6\u95f4\u70b9\u53ef\u4ee5\u8fbe\u5230\u7684\u6700\u4f18\u89e3\u3002\n\n$ g_{x,0} $ ----\u4ee5 $ x $ \u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u6240\u80fd\u8fbe\u5230\u7684\u6700\u4f18\u89e3\u3002\n\n\u4e0d\u96be\u53d1\u73b0 $ g_{x,1}=\\max(f_{son[x],1}) $ ,\u56e0\u4e3a $ x $ \u4e0d\u9009\uff0c\u4e0b\u9762\u7684\u70b9\u5c31\u5fc5\u987b\u5168\u90e8\u9009\u624d\u80fd\u6ee1\u8db3\u8981\u6c42\u3002\n\n\u800c\u5bf9\u4e8e $ g_{x,0} $ \u5219\u6709\u70b9\u590d\u6742\u3002\n\n$$\ng_{x,0}=\\min(\\max(x,g_{son[x],0}),f_{son[x],1}) \n$$\n\n\u4e0a\u6587\u7684 $ f_{son[x],1} $ \u5c31\u662f $ x $ \u4e0d\u9009\u7684\u60c5\u51b5\uff0c $ \\max(x,g_{son[x],0}) $ \u5219\u662f\u9009\u4e86 $ x $ \u90a3\u4e0b\u9762\u7684\u70b9\u5c31\u53ef\u4ee5\u4e0d\u9009\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u73af\u4e0a\u7684\u70b9 $ ans =\\max(ans,f_{x,1}) $ ,\u56e0\u4e3a\u73af\u4e0a\u7684\u70b9\u5fc5\u987b\u90fd\u7528\u4e8e\u73af\u4e0a\uff0c\u5bf9\u4e8e\u975e\u73af\u7684\u70b9 $ ans=\\max(ans,g_{x,0}) $ \uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u80fd\u6709\u4e9b\u4e0d\u540c\u3002\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint e3[2100000],e2[2100000],e1[2100000],f[2100000][3],a[2100000],b[2100000],d[2100000],de[2100000],f2[4000000],g[2100000][3];\nint l,r,mid,w,ww,n,cnt,ans1,ans2,sum,i,t;\nbool o[2100000],ll[2100000],u[2100000];\ninline int read()\t\t\t\n{\n  int x=0,f=1;char ch=getchar();\n  while(!isdigit(ch)&&ch!='-')ch=getchar();\n  if(ch=='-')f=-1,ch=getchar();\n  while(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n  return x*f;\n}\nvoid add(int x,int y)\n{\n    cnt++;a[cnt]=y;b[cnt]=d[x];d[x]=cnt;\n}\nvoid sc(int x,int fa)\n{\n    if (o[x]) return;o[x]=true;\n    f[x][1]=x;\n    int ans1=0,ans2=0,anss=0,ans=x;\n    for (int i=d[x];i;i=b[i])\n       if (a[i]!=fa)\n          if (ll[a[i]]==false)\n           {\n           sc(a[i],x);\n           if (f[a[i]][1]>ans1)\n                {\n                ans2=ans1;\n               ans1=f[a[i]][1];anss=a[i];\n                }\n        else if ((f[a[i]][1]>ans2)) ans2=f[a[i]][1];\n        if (f[a[i]][1]>ans) ans=f[a[i]][1];\n           }\n   f[x][1]=max(f[x][1],ans);f[x][0]=ans1;\n   g[x][1]=f[x][1];\n   int xx=ans2;\n   int yy=min(max(x,g[anss][0]),f[anss][1]);\n  xx=max(xx,yy);\n  g[x][0]=xx;\n}\nint main()\n{\n    n=read();\n    for (i=1;i<=n;i++)\n         {\n             e1[i]=read();e2[i]=read();\n             w++;e3[w]=e1[i];w++;e3[w]=e2[i];\n         }\n    sort(e3+1,e3+1+w);ww=0;\n    for (i=1;i<=w;i++)\n        if (e3[i]!=e3[i-1])\n            {\n                ww++;e3[ww]=e3[i];\n            }\n    w=ww;\n    for (i=1;i<=n;i++)\n         {\n             l=1;r=w;ans1=0;\n             while (l<=r)\n                  {\n                      mid=(l+r)/2;\n                      if (e3[mid]==e1[i])\n                          {\n                              ans1=mid;break;\n                          }\n                    else if (e3[mid]>e1[i]) r=mid-1;\n                    else l=mid+1;\n                  }\n            l=1;r=w;ans2=0;\n             while (l<=r)\n                  {\n                      mid=(l+r)/2;\n                      if (e3[mid]==e2[i])\n                          {\n                              ans2=mid;break;\n                          }\n                    else if (e3[mid]>e2[i]) r=mid-1;\n                    else l=mid+1;\n                  }\n        e1[i]=ans1;e2[i]=ans2;\n        add(ans1,ans2);add(ans2,ans1);\n        de[ans1]++;de[ans2]++;\n         }\n    n=w;w=0;t=1;\n     for (i=1;i<=n;i++)\n                 if (de[i]==1)\n                     {\n                     w++;f2[w]=i;\n                     }\n            while (t<=w)\n                {\n                if (u[f2[t]]) continue;u[f2[t]]=true;de[f2[t]]--;\n                for (i=d[f2[t]];i;i=b[i])\n                         {\n                         de[a[i]]--;\n                         if (de[a[i]]==1)\n                             {\n                             w++;f2[w]=a[i];\n                             }\n                         }\n                t++; \n                }\n    for (i=1;i<=n;i++)\n        if (de[i]==2)\n            {\n            ll[i]=true;\n            }\n    else if (de[i]>2)   \n           {\n               printf(\"-1\");\n               return 0;\n           }\n    sum=0;\n    for (i=1;i<=n;i++)\n        if (ll[i]==true)\n           {\n               sc(i,0);sum=max(sum,i);\n               sum=max(sum,g[i][1]);\n           }\n   for (i=1;i<=n;i++)\n         if (o[i]==false)\n             {\n             sc(i,0); sum=max(sum,i);\n        sum=max(sum,g[i][0]);\n          }\n    printf(\"%d\\n\",e3[sum]);\n    return 0;\n}\n```\n## \u9898\u5916\u8bdd\n\u5176\u5b9e\u806a\u660e\u4eba\u5e94\u8be5\u770b\u51fa\u6765\u4e86\uff0c\u5bf9\u4e8e\u6709\u73af\u7684\u8054\u901a\u5757\uff0c\u7b54\u6848\u4e3a\u6240\u6709\u503c\u7684\u6700\u5927\u503c\uff0c\u65e0\u73af\u7684\u70b9\uff0c\u7b54\u6848\u4e3a\u6b21\u5927\u503c\uff0c\u53ea\u662f\u6211\u505a\u70e6\u4e86\uff0c\u8fd9\u662f\u4e2a\"\u4f2aDP\"\u3002",
        "postTime": 1618375242,
        "uid": 77615,
        "name": "OIerAlbedo",
        "ccfLevel": 0,
        "title": "CF1027F\u9898\u89e3"
    },
    {
        "content": "~~\u989d\u670b\u53cb\u4eec\u597d \u8fd9\u7bc7\u9898\u89e3\u662f\u6765\u8bb2\u5361\u5e38\u7684 \u56e0\u4e3a\u8fd9\u662f\u4e00\u53ea\u7ebf\u5bf9\u7684\u83dc\u9e21~~\n\n\u7b2c\u4e00\u773c\u770b\u5230\u5c31\u77e5\u9053\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848 + \u5224\u4e8c\u5206\u56fe\u5b8c\u7f8e\u5339\u914d\uff0c\u4f46\u662f\u7f51\u7edc\u6d41\u8dd1\u4e0d\u8fc7\u53bb\u3002\u90a3\u5c31\u8003\u8651 Hall \u5b9a\u7406\u3002\n\n\u5982\u679c\u6709\u4e24\u5929\u90fd\u9009\u4e0d\u4e86\u7684\u5c31\u6eda\u86cb\u3002\u5982\u679c\u53ea\u80fd\u9009\u4e00\u5929\uff0c\u90a3\u5c31\u5f3a\u5236\u9009\uff0c\u7136\u540e\u4f1a\u5bfc\u81f4\u8fde\u9501\u53cd\u5e94\u2014\u2014\u4e00\u4e9b\u5176\u4ed6\u4eba\u4e5f\u5fc5\u987b\u5f3a\u5236\u9009\uff0c\u5c31\u9012\u5f52\u5b9e\u73b0\u5373\u53ef\uff0c\u5982\u679c\u6709\u65e0\u6cd5\u641e\u7684\u5c31\u6eda\u86cb\u3002\u5269\u4e0b\u6765\u7684\u90fd\u662f\u53ef\u4ee5\u9009\u4e24\u5929\u7684\uff0c\u4e8e\u662f\u628a\u4eba\u653e\u5de6\u8fb9\uff0c\u5929\u653e\u53f3\u8fb9\u8fde\u4e8c\u5206\u56fe\u3002\u5e94\u7528 Hall \u5b9a\u7406\uff0c\u5bf9\u4e8e\u4efb\u610f\u5de6\u90e8\u5b50\u96c6\uff0c\u5982\u679c\u8fde\u8fc7\u53bb\u4e4b\u540e\u4e0d\u8fde\u901a\uff0c\u663e\u7136\u53ef\u4ee5\u62c6\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u7684\u5b50\u6761\u4ef6\uff0c\u4e0d\u9700\u8981\u8003\u8651\u3002\u6240\u4ee5\u53ea\u8981\u8003\u8651\u8fde\u901a\u7684\u60c5\u51b5\u3002\n\n\u9009\u4e00\u4e2a\u4eba\u8981\u628a\u8fde\u7684\u4e24\u5929\u90fd\u5e26\u4e0a\uff0c\u8fd9\u4e2a\u300c\u4e24\u300d\u4e0d\u96be\u60f3\u5230\u628a\u4eba\u770b\u6210\u8fb9\uff0c\u8fde\u4e24\u5929\uff0c\u90a3\u4e48\u5c31\u662f\u4e0d\u80fd\u5b58\u5728\u4e00\u4e2a\u8fb9\u96c6\u4f7f\u5f97\u5b83\u7684\u5bfc\u51fa\u5b50\u56fe\u5305\u542b\u70b9\u6570\u8981\u5c0f\u4e8e\u8fb9\u6570\u3002\u4e8e\u662f\u5c31\u5efa\u4e2a\u56fe\u518d\u8bf4\u5566\u3002\u7531\u4e8e\u662f\u8fde\u901a\u7684\uff0c\u6709 $|E|\\geq|V|-1$\uff08\u8fd9\u5c31\u662f\u4ec5\u8003\u8651\u8fde\u901a\u60c5\u51b5\u7684\u597d\u5904\uff09\uff0c\u8981\u6ee1\u8db3 $|E|\\leq|V|$\uff0c\u53ea\u6709 $|E|=|V|-1$ \u6216 $|E|=|V|$\uff0c\u5206\u522b\u7b49\u4ef7\u4e8e\u6811\u548c\u57fa\u73af\u6811\u3002\u7136\u540e\u4e0d\u96be\u53d1\u73b0\uff0c\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u6240\u6709\u8fb9\u5bfc\u51fa\u5b50\u56fe\u90fd\u662f\u6811\u6216\u57fa\u73af\u6811\uff0c\u548c\u8be5\u8fde\u901a\u5757\u662f\u6811\u6216\u57fa\u73af\u6811\u662f\u7b49\u4ef7\u7684\u3002\u90a3\u5c31\u8dd1\u51fa\u6240\u6709\u8fde\u901a\u5757\u7136\u540e\u770b\u662f\u5426\u6811\u6216\u57fa\u73af\u6811\uff0c\u7b49\u4ef7\u4e8e\u5224\u65ad\u662f\u5426\u6709 $|E|\\leq|V|$\u3002\n\n\u8fd9\u6837\u662f\u7ebf\u5bf9\u7684\u3002\u7136\u540e\u8003\u8651\u5230\u4e00\u5f00\u59cb\u9012\u5f52\u5904\u7406\u53ea\u80fd\u9009\u4e00\u5929\u7684\u60c5\u51b5\u6709\u70b9\u96be\u5199\uff0c\u53ef\u4ee5\u5f3a\u884c\u52a0\u5230\u6700\u7ec8\u7684\u7ed3\u8bba\u4e0a\uff0c\u5c31\u662f\u9009\u4e00\u4e2a\u70b9\u7684\u8bdd\u5c31\u53ef\u4ee5\u9009\u5bf9\u5e94\u7684\u53ea\u80fd\u9009\u5b83\u7684\u6240\u6709\u4eba\uff0c\u5c31\u5efa\u82e5\u5e72\u4e2a\u81ea\u73af\u5373\u53ef\u3002\n\n\u770b\u5230\u9898\u89e3\u533a\u57fa\u672c\u5168\u662f\u7ebf\u6027\u7684\uff0c\u6211\u4e0d\u7981\u81ea\u60ed\u5f62\u79fd\u3002~~\u4f46\u662f\u56fe\u8bba\u9898\u603b\u4e0d\u53ef\u80fd\u51fa\u5230 1e7 \u5427\uff1f\u90a3\u4e0d\u51fa\u5230 1e7 \u7684\u8bdd\u7ebf\u6027\u548c\u7ebf\u5bf9\u4e0d\u662f\u4e00\u6837\u7684\u5417\uff1f~~ \u7136\u540e\u771f\u5c31 T \u6389\u4e86\uff0c\u61d2\u5f97\u6539\u524d\u5411\u661f\u5e72\u8106\u76f4\u63a5\u4e0a\u8def\u5f84\u538b\u7f29 + \u542f\u53d1\u5f0f\u53cc\u4f18\u5316\u5e76\u67e5\u96c6\uff0c\u867d\u8bf4\u662f $\\mathrm O(n\\alpha(n)\\log n)$\uff0c\u4f46\u5e38\u6570\u6bd4 `vector` + \u9012\u5f52\u8981\u5c0f\u597d\u591a\u4e86\u3002~~\u6700\u7ec8\u4ee5 3900+ms A \u6389\u4e86\uff0c~~**_[code](https://www.luogu.com.cn/paste/cxwaeyh5)_**\u3002",
        "postTime": 1616984770,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "CF1027F"
    },
    {
        "content": "## CF1027F Session in BSU\n\n### \u9898\u76ee\u5927\u610f\n\n\u6709n\u573a\u8003\u8bd5\uff0c\u6bcf\u573a\u8003\u8bd5\u4f60\u6709\u4e24\u4e2a\u65f6\u95f4\u70b9$a_i,b_i$\u53ef\u4ee5\u8003\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u5929\u53bb\u8003\uff0c\u7136\u540e\u7ecf\u8fc7\u4f60\u7684\u5408\u7406\u5b89\u6392\uff0c\u4f60\u9700\u8981\u5c06\u8fd9n\u573a\u8003\u8bd5\u90fd\u8003\u6389\uff0c\u5e76\u4e14\u6c42\u51fa\u6700\u5c11\u8981\u591a\u5c11\u592a\u5929\u624d\u80fd\u8003\u5b8c\uff0c\u5373\u8003\u5b8c\u7684\u6700\u540e\u4e00\u5929\uff0c\u5982\u679c\u65e0\u6cd5\u505a\u5230\u5c06\u6240\u6709\u8003\u8bd5\u8003\u5b8c\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa-1\u3002over\n\n### \u5907\u6ce8\n\n\u90e8\u5206\u53c2\u8003[**ModestCoder_**](https://www.luogu.com.cn/user/51719)\n\n### \u601d\u8def\n\n\u8fd9\u9898\u4e00\u5f00\u59cb\u505a\u7684\u65f6\u5019\uff0c\u5f88\u5bb9\u6613\u5c31\u60f3\u5230\u8981\u5c06\u65f6\u95f4\u7528\u91cd\u590d\u7684\u8003\u8bd5\u4e00\u8d77\u5904\u7406\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u8003\u8bd5\u662f\u4f1a\u4e92\u76f8\u5173\u8054\u548c\u7275\u5236\u5f71\u54cd\uff0c\u800c\u5bf9\u4e8e\u72ec\u7acb\u7684\u8003\u8bd5\u76f4\u63a5\u5728\u8f83\u65e9\u7684\u4e00\u5929\u8003\u5c31\u884c\u3002\n\n\u6211\u4eec\u518d\u6765\u8003\u8651\u5982\u4f55\u4e00\u8d77\u5904\u7406\u4e92\u76f8\u7275\u5236\u7684\u8003\u8bd5\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u6709\u540c\u79cd\u6027\u8d28\u7684\u4e00\u4e2a\u4e2a\u56e2\u4f53\u5c31\u4f1a\u60f3\u5230\u7528\u5e76\u67e5\u96c6\u3002\u4f46\u5f53\u4f60\u4e00\u5f00\u59cb\u53e3\u7cca\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u4f1a\u89c9\u5f97\u6709\u4e00\u4e9b\u4e1c\u897f\u65e0\u6cd5\u5904\u7406\uff0c\u6211\u8fd9\u53ea\u849f\u84bb\u4e5f\u662f\u3002\n\n\u6bd4\u5982\u5f53\u52a0\u8fdb\u6765\u4e00\u4e2a\u6570\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u8fd9\u573a\u8003\u8bd5\u7684\u4e24\u4e2a\u65f6\u95f4\u662f\u5426\u5df2\u7ecf\u9009\u62e9\uff0c\u56e0\u4e3a\u5728\u5e76\u67e5\u96c6\u91cc\u7684\u6570\u4e0d\u4e00\u5b9a\u88ab\u9009\u62e9\uff0c\u7b49\u4e00\u7cfb\u5217\u95ee\u9898\u3002\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u6765\u8003\u8651\u4e00\u4e0b\u6211\u4eec\u8fd9\u4e2a\u5e76\u67e5\u96c6\u7684\u6027\u8d28\uff1a\n\n1. \u52a0\u8fdb\u6765\u7684\u8003\u8bd5\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u65f6\u95f4\u5df2\u7ecf\u5728\u5e76\u67e5\u96c6\u4e2d\u51fa\u73b0\u8fc7\u4e86\u3002\n\n2. \u7531 $1$ \u53ef\u5f97\u6bcf\u6b21\u52a0\u8fdb\u5e76\u67e5\u96c6\u91cc\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u6570\u3002\n\n3. \u6bcf\u573a\u8003\u8bd5\u52a0\u8fdb\u6765\uff0c\u5c31\u5fc5\u5b9a\u6709\u4e00\u4e2a\u65f6\u95f4\u70b9\u4f1a\u88ab\u9009\u62e9\u3002\n\n4. \u7531 $2\uff0c3$ \u53ef\u5f97\u5e76\u67e5\u96c6\u91cc\u6700\u591a\u53ea\u4f1a\u6709\u4e00\u4e2a\u6570\u6ca1\u88ab\u9009\u62e9\u3002\n\n5. \u5e76\u67e5\u96c6\u53ea\u80fd\u67e5\u8be2\u7956\u5148\uff0c\u4e0d\u80fd\u67e5\u8be2\u8fd9\u4e2a\u7956\u5148\u6709\u54ea\u4e9b\u513f\u5b50\u3002\n\n6. \u7531 $4\uff0c5$ \u53ef\u5f97\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e2a\u6ca1\u9009\u62e9\u7684\u5f53\u505a\u7956\u5148\uff0c\u800c\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6700\u4f18\uff0c\u6240\u4ee5\u80af\u5b9a\u662f\u76f8\u5bf9\u6765\u8bf4\u65f6\u95f4\u8f83\u9760\u540e\u7684\u90a3\u4e2a\u3002\n\n\u4ee5\u4e0a\u5c31\u662f\u6211\u8ba4\u4e3a\u7684\u4e00\u4e9b\u7ec6\u8282\u3002\n\n\u6211\u4eec\u63a5\u4e0b\u8003\u8651\u5982\u4f55\u5904\u7406\u7b54\u6848\uff0c\u5c06\u8003\u8bd5\u5206\u4e2a\u7c7b\uff1a\n\n1. \u4e24\u4e2a\u65f6\u95f4\u70b9\u90fd\u6ca1\u88ab\u9009\u8fc7\uff0c\u5c31\u8fd9\u65f6\u4e24\u4e2a\u6570\u90fd\u662f\u7956\u5148\uff0c\u90a3\u4e48\u5c31\u9009\u5c0f\u7684\u90a3\u4e2a\uff0c\u5c06\u5c0f\u7684\u5e76\u5230\u5927\u7684\u90a3\u4e2a\uff0c\u5927\u7684\u5f53\u7956\u5148\uff0c\u8fd9\u662f\u80af\u5b9a\u662f\u5c40\u90e8\u6700\u4f18\uff0c\u8fd9\u662f\u6709\u4eba\u4f1a\u8bf4\uff0c\u90a3\u4ed6\u4e0d\u4e00\u5b9a\u662f\u5168\u5c40\u6700\u4f18\u554a\uff0c\u6ca1\u4e8b\u653e\u5fc3\uff0c\u540e\u9762\u4f1a\u8c03\u6574\u7684\u3002\n\n2. \u6709\u4e00\u4e2a\u65f6\u95f4\u70b9\u88ab\u9009\u8fc7\uff0c\u4e00\u4e2a\u6ca1\u9009\u8fc7\uff08\u5176\u5b9e\u4e0d\u4e00\u5b9a\u6ca1\u88ab\u9009\u8fc7\uff09\uff0c\u5373\u7956\u5148\u4e0d\u540c\uff0c\u6211\u4eec\u53ea\u8981\u5c06\u9009\u8fc7\u7684\u90a3\u4e2a\u7684\u7956\u5148\uff08\u7531\u4e0a\u8ff0\u76846\u6027\u8d28\u53ef\u77e5\u8fd9\u4e00\u5b9a\u6ca1\u88ab\u9009\u8fc7\uff09\u548c\u53e6\u4e00\u4e2a\u6ca1\u9009\u8fc7\u7684\u50cf1\u4e00\u6837\u5408\u5e76\u5c31\u884c\u3002\u8fd9\u91cc\u8981\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u7956\u5148\uff0c\u56e0\u4e3a\u6211\u4e5f\u7406\u89e3\u4e86\u534a\u5929\u3002\u867d\u7136\u88ab\u9009\u8fc7\u7684\u8fd9\u4e2a\u65f6\u95f4\u70b9\u548c\u7956\u5148\u4e0d\u4e00\u5b9a\u6709\u76f4\u63a5\u5173\u7cfb\uff0c\u4f46\u4e00\u5b9a\u53ef\u4ee5\u901a\u8fc7\u4e00\u5b9a\u7684\u5173\u7cfb\u8054\u7cfb\u8d77\u6765\uff0c\u56e0\u4e3a\u5e76\u67e5\u96c6\u5408\u5e76\u7684\u65f6\u5019\u5c31\u6709\u70b9\u50cf\u8fde\u8fb9\u64cd\u4f5c\uff0c\u5982\u679c\u628a\u8fd9\u4e2a\u5e76\u67e5\u96c6\u60f3\u8c61\u6210\u4e00\u4e2a\u56fe\uff0c\u90a3\u4e48\u5c31\u662f\u76f8\u5f53\u4e8e\u5728\u4e00\u5f20\u8054\u901a\u56fe\u91cc\u9762\u52a0\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u4efb\u610f\u4e24\u4e2a\u70b9\u80af\u5b9a\u8fd8\u662f\u4e92\u901a\u7684\u3002\u4e3e\u4e2a\u6817\u5b50\uff1a\n\n ```cpp\n4\n1 2\n2 3\n3 4\n1 5\n ```\n\n\u200b      \u5f53\u6211\u4eec\u8981\u8fde $1$ \u548c $5$ \u65f6\uff0c\u56fe\u662f\u8fd9\u6837\u7684\uff1a\n\n![img](https://cdn.luogu.com.cn/upload/image_hosting/vej8wg8n.png)\n\n\u7136\u540e\u8fde\u5b8c $1$ \u548c $5$ \u540e\uff1a\n\n![img](https://cdn.luogu.com.cn/upload/image_hosting/kvn2xnnn.png)\n\n\u800c\u5b9e\u9645\u4e0a\u662f\u8fd9\u6837\u7684\uff0c $4$ \u548c $5$ \u6bd4\u8f83\u4e4b\u540e\u80af\u5b9a\u9009 $5$\uff0c\u770b\u4e0a\u53bb\u53ea\u662f\u5c06 $4$ \u8fde\u5411 $5$ \u3002\u4f46\u5176\u5b9e\u662f\u4ece\u539f\u672c\u7684\u7b2c\u4e00\u573a\u8003\u8bd5 $1$ \u8003\uff0c\u7b2c\u4e8c\u573a\u8003\u8bd5 $2$ \u8003\uff0c\u7b2c\u4e09\u573a\u8003\u8bd5\u5728 $3$ \u8003\uff0c\u53d8\u6210\u4e86\u7b2c\u4e00\u573a\u8003\u8bd5\u5728 $2$ \u8003\uff0c\u7b2c\u4e8c\u573a\u8003\u8bd5\u5728 $3$ \u8003\uff0c\u7b2c\u4e09\u573a\u8003\u8bd5\u5728 $4$ \u8003\uff0c\u7b2c\u56db\u573a\u8003\u8bd5\u5728 $1$ \u8003\u3002\u56e0\u6b64\u4e00\u5b9a\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u8def\u5f84\u5c06\u8fd9\u4e24\u4e2a\u70b9\u8054\u7cfb\u5728\u4e00\u8d77\u3002\n\n3. \u5982\u679c\u4e24\u4e2a\u65f6\u95f4\u70b9\u90fd\u540c\u4e00\u5e76\u67e5\u96c6\u91cc\uff0c\u90a3\u4e48\u6b64\u65f6\u4e00\u5b9a\u9009\u4ed6\u4eec\u7684\u7956\u5148\uff0c\u8fd9\u65f6\u8fd9\u4e2a\u5e76\u67e5\u96c6\u5c31\u5e9f\u4e86\uff0c\u4ed6\u5df2\u7ecf\u6ca1\u6709\u4e00\u4e2a\u70b9\u6ca1\u88ab\u9009\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4ed6\u7684\u7956\u5148\u8fde\u5411\u4e00\u4e2a\u7a7a\u8282\u70b9 $0$ \u5373\u53ef\uff0c\n\n4. \u5982\u679c\u8bf4\u4e00\u573a\u8003\u8bd5\u5b83\u8003\u8bd5\u7684\u4e24\u4e2a\u65f6\u95f4\u76f8\u540c\uff0c\u90a3\u4e5f\u5c31\u662f\u8bf4\u8fd9\u573a\u8003\u8bd5\u4e00\u5b9a\u5f97\u5728\u8fd9\u5929\u8003\uff0c\u90a3\u4e48\u5408\u5e76\u5b8c\u540e\uff08\u5408\u4e0d\u5408\u5e76\u65e0\u6240\u8c13\uff09\uff0c\u8fd9\u4e2a\u5e76\u67e5\u96c6\u80af\u5b9a\u5c31\u5e9f\u4e86\u3002\n\n5. \u5982\u679c\u8003\u8bd5\u6709\u4e00\u4e2a\u65f6\u95f4\u5728\u5e9f\u7684\u5e76\u67e5\u96c6\u91cc\uff0c\u90a3\u4e48\u5c06\u53e6\u4e00\u4e2a\u70b9\u52a0\u8fdb\u53bb\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u5e76\u67e5\u96c6\u7684\u8fd8\u662f\u5e9f\u7684\u3002\n\n6. \u5982\u679c\u4e24\u4e2a\u662f\u65f6\u95f4\u70b9\u90fd\u5728\u5e9f\u7684\u7684\u5e76\u67e5\u96c6\u91cc\uff0c\u90a3\u4e48\u80af\u5b9a\u5c31\u65e0\u6cd5\u6ee1\u8db3\uff0c\u8f93\u51fa-1\uff0c\u5e94\u8be5\u5f88\u597d\u7406\u89e3\u3002\n\n   ```cpp\n   #include<iostream>\n   #include<stdio.h>\n   #include<algorithm>\n   using namespace std;\n   int read()\n   {\n   \tint x=0,f=1;\n   \tchar c=getchar();\n   \twhile(c<'0'||c>'9'){\n   \t\tif(c=='-')f=-1;\n   \t\tc=getchar();\n   \t}\n   \twhile(c>='0'&&c<='9')x=(x<<3)+(x<<1)+f*(c-'0'),c=getchar();\n   \treturn x;\n   }\n   \n   const int MAXN=1e6+10;\n   int n,m;\n   int a[MAXN],b[MAXN];\n   int f[MAXN*2];\n   int ans;\n   int d[MAXN*2];\n   int get(int x)\n   {\n   \tif(f[x]==x)return x;\n   \treturn f[x]=get(f[x]);\n   }\n   int main()\n   {\n   \tn=read();\n   \tfor(int i=1;i<=n;i++)\n   \ta[i]=read(),b[i]=read();\n   \tfor(int i=1;i<=n;i++)\n   \td[i*2-1]=a[i],d[i*2]=b[i];\n   \tsort(d+1,d+1+2*n);\n   \tm=unique(d+1,d+1+2*n)-d-1;\n   \tfor(int i=1;i<=n;i++)\n   \t{\n   \t\ta[i]=lower_bound(d+1,d+1+m,a[i])-d;\n   \t\tb[i]=lower_bound(d+1,d+1+m,b[i])-d;\n   \t}//\u79bb\u6563\u5316 \n   \tfor(int i=1;i<=n;i++)\n   \tf[a[i]]=a[i],f[b[i]]=b[i];\n   \tfor(int i=1;i<=n;i++)\n   \t{\n   \tint x,y;\n   \tx=get(a[i]);\n   \ty=get(b[i]);\n   \tif(x==0&&y==0)\n   \t{\n   \t\tprintf(\"-1\\n\");\n   \t\treturn 0;\n   \t }//\u7c7b\u578b6 \n   \tif(x==y||x==0||y==0)\n   \t{\n   \t\tans=max(ans,max(d[x],d[y]));\n   \t\tf[x]=f[y]=0;//\u7c7b\u578b3\uff0c4\uff0c5 \n   \t}else{\n   \t\tif(x>y)swap(x,y);//\u9009\u5c0f\u7684\uff0c\u56e0\u6b64\u5c06\u5927\u7684\u5f53\u6839 \n   \t\tf[x]=y;\n   \t\tans=max(ans,d[x]);//\u7c7b\u578b1\uff0c2 \n   \t}\n   \t}printf(\"%d\\n\",ans);\n    \treturn 0;\n   }\n   \n   ```\n\n   ",
        "postTime": 1612158653,
        "uid": 177604,
        "name": "LXH5514",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1027F \u3010Session in BSU\u3011"
    }
]