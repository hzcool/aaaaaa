[
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u7ecf\u5178\u7684\u5e26\u901a\u914d\u7b26\u7684\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898\u3002\n\n\u95ee\u53f7\u7684\u5339\u914d\u6bd4\u8f83\u5bb9\u6613\uff0c\u56e0\u4e3a\u95ee\u53f7\u53ea\u80fd\u4ee3\u66ff\u4e00\u4e2a\u5b57\u7b26\uff0c\u9047\u5230\u95ee\u53f7\u76f4\u63a5\u5339\u914d\u5373\u53ef\u3002\u4f46\u661f\u53f7\u5374\u80fd\u4ee3\u66ff0\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u5224\u65ad\\*\u524d\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u5931\u914d\uff0c\u663e\u7136\u53ef\u4ee5\u8f93\u51fa-1.\n\n\u5982\u679c\u9047\u5230\\*\u53f7\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u661f\u53f7\u7684\u4f4d\u7f6e\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u626b\u63cf\u3002\n\n\u5f53s\u7684\u957f\u5ea6n\u4e0et\u7684\u957f\u5ea6m\u6ee1\u8db3n>m+1\u65f6\uff0c\u8bf4\u660e\u5339\u914d\u5931\u8d25\uff08\u56e0\u4e3a\u5373\u4f7f\\*\u4ee3\u66ff\u7684\u5185\u5bb9\u4e3a\u7a7a\uff0cn\u7684\u6700\u5927\u957f\u5ea6\u4e5f\u53ea\u662fm+1\uff0c\u5f53 * \u4ee3\u66ff\u7684\u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u663e\u7136\u4f1a\u6ee1\u8db3n>=m\uff09\u3002\n\n\u63a5\u4e0b\u6765\u4ece\u540e\u5f80\u524d\u626b\u63cf\u65f6\uff0c\u53ea\u8981s\u4e0et\u5bf9\u5e94\u7684\u5b57\u6bcd\u76f8\u7b49\uff0c\u5f53\u5b57\u7b26\u4e32s\u5339\u914d\u5230\\*\u65f6\uff0c\u8bf4\u660e\u5339\u914d\u6210\u529f\u3002\n\n```cpp\n#include <stdio.h>\nchar s1[200005],s2[200005];\nint main()\n{\n int n,m;\n scanf(\"%d%d\",&n,&m);\n scanf(\"%s\",s1);\n scanf(\"%s\",s2);\n int flag=1;\n for(int i=0;i<=n;i++)\n  if(s1[i]=='*')\n  {\n   flag=-1;\n   break;\n  }\n  else if(s1[i]=='?')continue;\n  else if(s1[i]!=s2[i])\n  {\n   flag=0;\n   break;\n  }\n if(flag==1)puts(\"YES\");\n else if(flag==0)puts(\"NO\");\n else\n {\n  for(int i=n-1,j=m-1;;i--,j--)\n   if(s1[i]=='*')\n   {\n   \tif(i-1>j)flag=0;\n   \telse flag=1;\n   \tbreak;\n   }\n   else if(s1[i]=='?')continue;\n   else if(s1[i]!=s2[j])\n   {\n    flag=0;\n    break;\n   }\n  if(flag)puts(\"YES\");\n  else puts(\"NO\");\n }\n return 0;\n}\n```",
        "postTime": 1534581135,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1023A \u3010Single Wildcard Pattern Matching\u3011"
    },
    {
        "content": "```cpp\n// \u5b57\u7b26\u4e32\u6a21\u62df\u9898\n// \u9996\u5148\u5148\u7279\u5224\u6389\"n > m + 1\"\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u90fd\u6bd4\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u957f\uff0c\u90a3\u80af\u5b9a\u4e0d\u884c\n// \u7136\u540e\u7279\u5224\u6389\u6ca1\u6709'*'\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u4e24\u4e2a\u5b57\u7b26\u4e32\u5339\u914d\u5373\u53ef\n// \u63a5\u7740\u627e\u5230'*'\u7684\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u5206\u5272\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ece\u524d\u5f80\u540e\u548c\u4ece\u540e\u5f80\u524d\u53bb\u5339\u914d\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\n// \u4e00\u65e6\u51fa\u73b0\u4efb\u4f55\u5931\u914d\uff0c\u5219\u8f93\u51fa\"NO\"\uff0c\u5426\u5219\u8f93\u51fa\"YES\"\n#include <iostream>\n#include <string>\n\nint main()\n{\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    std::cout.tie(nullptr);\n\n    int n, m;\n    std::cin >> n >> m;\n\n    if (n > m + 1)  // \u7279\u5224\u957f\u5ea6\n    {\n        std::cout << \"NO\" << std::endl;\n\n        return 0;\n    }\n\n    std::string Str1, Str2;\n    std::cin >> Str1 >> Str2;\n\n    auto Pos = Str1.find('*');\n    if (Pos == std::string::npos)   // \u6ca1\u6709'*'\u7684\u60c5\u51b5\n    {\n        if (Str1 == Str2)\n        {\n            std::cout << \"YES\" << std::endl;\n        }\n        else\n        {\n            std::cout << \"NO\" << std::endl;\n        }\n    }\n    else\n    {\n        auto p = static_cast<int>(Pos);\n        for (int i = 0; i < p; ++i) // \u4ece\u524d\u5f80\u540e\u626b\n        {\n            if (Str1[i] != Str2[i])\n            {\n                std::cout << \"NO\" << std::endl;\n\n                return 0;\n            }\n        }\n        for (int i = n - 1, j = m - 1; i > p; --i, --j) // \u4ece\u540e\u5f80\u524d\u626b\n        {\n            if (Str1[i] != Str2[j])\n            {\n                std::cout << \"NO\" << std::endl;\n\n                return 0;\n            }\n        }\n\n        std::cout << \"YES\" << std::endl;\n    }\n\n    return 0;\n}\n```",
        "postTime": 1534585364,
        "uid": 59062,
        "name": "\u5c0f\u95f8\u87f9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1023A \u3010Single Wildcard Pattern Matching\u3011"
    },
    {
        "content": "\n\u6211\u60f3\u5230\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c`c++11` \u4ee5\u4e0a\u53ea\u8981\u52a0\u4e0a\u5934\u6587\u4ef6 `<regex>` \u5373\u53ef\u4f7f\u7528\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u4f7f\u7528\u65b9\u6cd5\u53c2\u89c1\uff1a[\u767e\u5ea6\u767e\u79d1](https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215)\u3002\n\n`c++` \u4e2d\u6b63\u5219\u8868\u8fbe\u5f0f\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n```\nregex reg(...);\n```\n\n~~\u7136\u540e\u6211\u5c31\u6302\u4e86\u3002~~\n\n\n\u4e0d\u662f `RE` \u5c31\u662f `TLE`\uff0c\u53cd\u6b63\u6570\u636e\u592a\u6bd2\u7624\uff0c\u6570\u636e\u91cf\u592a\u5927\uff0c`regex` \u53d7\u4e0d\u8d77\u3002\u60f3\u5230\u4e00\u4e2a\u65b9\u6cd5\uff1a\u5bf9\u6bd4\u524d\u9762\u548c\u540e\u9762\u5b57\u7b26\uff0c\u90fd\u4e00\u6837\u5c31\u5168\u5220\u4e86\u3002\n\n\u56e0\u4e3a `regex` \u6bd5\u7adf\u662f `STL` \u7684\u4e1c\u897f\uff0c`STL` \u7684\u4e00\u4e2a\u660e\u663e\u95ee\u9898\u5c31\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u987a\u5e26\u63d0\u4e00\u4e0b\u7684\u662f\uff0c\u672c\u9898\u8003\u7684\u505a\u6cd5\u4e0d\u662f `regex`\uff0c\u867d\u7136 `regex` \u4e5f\u53ef\u4ee5\u8fc7\uff0c\u4f46\u662f\u6b63\u8def\u8fd8\u662f `string` \u6a21\u62df\u3002\n\n\u672c\u9898\u7684\u601d\u8def\u5176\u5b9e\u5f88\u7b80\u5355\uff1a\u56e0\u4e3a\u6211\u4eec\u8981\u7528 `regex` \u6a21\u62df\uff0c\u6240\u4ee5 `regex` \u7684\u8868\u8fbe\u5f0f\u5e94\u8be5\u4e3a `a\u4e2d*\u7684\u524d\u9762\u7684\u5b57\u7b26` + `\u82e5\u5e72\u4e2a\uff08\u5927\u4e8e\u7b49\u4e8e0\u4e2a\uff09\u5c0f\u5199\u5b57\u6bcd` + `a\u4e2d*\u540e\u9762\u7684\u5b57\u7b26`\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230 `*` \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u7528 `substr` \u622a\u53d6\u5373\u53ef\u3002\u4f46\u662f\u4e0d\u8981\u5fd8\u8bb0\u6ca1\u6709 `*` \u7b49\u7279\u5224\u3002\n\n- \u5982\u679c\u5b57\u7b26\u4e32 `a` \u4e2d\u6ca1\u6709 `*`\uff0c\u90a3 `a` \u548c `b` \u5fc5\u987b\u76f8\u7b49\u624d\u662f `YES`\u3002\n- \u5982\u679c `a` \u7684\u957f\u5ea6\u548c `b` \u76f8\u7b49\uff0c\u90a3\u53ea\u6709\u53ef\u80fd `a` \u4e2d\u9664\u4e86 `*` \u5916\u90fd\u548c `b` \u76f8\u7b49\uff0c\u4e0d\u7136\u5c31\u65e0\u6cd5\u5339\u914d\u3002\n\n\u4ee3\u7801\u4e09\u756a\u4e94\u6b21\u5730\u6539\uff0c\u7ec8\u4e8e `AC` \u4e86\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <regex>\nusing namespace std;\n\nstring a, b;\n\nint main()\n{\n\tint lena, lenb;\n\tcin >> lena >> lenb;\n\tcin >> a >> b;\n\tif (a.length() - 1 > b.length()) // \u4e00\u5806\u7279\u5224\n\t{\n\t\tcout << \"NO\\n\";\n\t\treturn 0;\n\t}\n\tif (a == b)\n\t{\n\t\tcout << \"YES\\n\";\n\t\treturn 0;\n\t}\n\tint tims = 0;\n\twhile (a[a.length() - 1] == b[b.length() - 1] && tims <= lena / 10000)\n\t{\n\t\ta.pop_back(); \n\t\tb.pop_back();\n\t\ttims++;\n\t}\n\ttims = 0;\n\twhile (a[0] == b[0] && tims <= lena / 10000)\n\t{\n\t\ta.erase(a.begin()); \n\t\tb.erase(b.begin());\n\t\ttims++;\n\t}\n\tif (a[0] == '*' && a.length() == b.length())\n\t{ \n\t\ta.erase(a.begin());\n\t\tb.erase(b.begin());\n\t\tcout << (a == b ? \"YES\\n\" : \"NO\\n\");\n\t\treturn 0;\n\t}\n\tif (a[0] == '*')\n\t{\n\t\tb = b.substr(b.length() - (a.length() - 1), a.length() - 1);\n\t\ta.erase(a.begin());\n\t\tcout << (a == b ? \"YES\\n\" : \"NO\\n\");\n\t\treturn 0;\n\t}\n\tint lens = a.length();\n\tint lns = b.length();\n\tint place = a.find(\"*\"); \n\tfor (register int i = 0; i < place; i++)\n\t{\n\t\tif (a[i] != b[i])\n\t\t{\n\t\t\tcout << \"NO\\n\";\n\t\t\treturn 0;\n\t\t}\n\t}\n\tif (a[0] != '*' && a[0] != b[0])\n\t{\n\t\tcout << \"NO\\n\";\n\t\treturn 0;\n\t}\n\tif (lens - 1 > lns)\n\t{\n\t\tcout << \"NO\\n\";\n\t\treturn 0;\n\t}\n\tif (lens - lns == 1)\n\t{\n\t\tif (place == string::npos)\n\t\t{\n\t\t\tcout << \"NO\\n\";\n\t\t\treturn 0;\n\t\t}\n\t\ta.erase(place, 1);\n\t\t/*cout << \"a: \" << a << endl;\n\t\tcout << \"b: \" << b << endl;\n\t\t*/\n\t\tif (a != b)\n\t\t{\n\t\t\tcout << \"NO\\n\";\n\t\t}\n\t\telse cout << \"YES\\n\";\n\t\treturn 0;\n\t}\n\tif (lens == lns)\n\t{\n\t\tif (place == string::npos)\n\t\t{\n\t\t\tcout << \"NO\\n\";\n\t\t\treturn 0;\n\t\t}\n\t\tfor (register char x = 'a'; x <= 'z'; x++)\n\t\t{\n\t\t\ta[place] = x;\n\t\t\tif (a == b)\n\t\t\t{\n\t\t\t\tcout << \"YES\\n\";\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\tcout << \"NO\\n\";\n\t\treturn 0;\n\t}\n\tif (place == string::npos && a != b) \n\t{\n\t\tcout << \"NO\\n\";\n\t\treturn 0;\n\t}\n\tstring sub_first = a.substr(0, place);\n\tstring sub_last = a.substr(place + 1, (lens - 1) - place);\n\tstring regs = (sub_first + \"[a-z]*\" + sub_last);\n\tregex reg(regs);\n\ttry\n\t{\n\t\tif (regex_match(b, reg))\n\t\t{\n\t\t\tcout << \"YES\\n\";\n\t\t}\n\t\telse cout << \"NO\\n\";\n\t}\n\tcatch (const std::regex_error& err) // \u5f53\u65f6\u4e3a\u4e86\u907f\u514d RE \u4e0d\u77e5\u9053\u9519\u8bef\u4f4d\u7f6e\u52a0\u7684\n\t{\n\t\tcout << \"There is an error. The error is:\" << err.what() << endl;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1637385084,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "\u6bd2\u7624\u6570\u636e"
    },
    {
        "content": "# \u6211\u7684\u601d\u8def\n\u6211\u7684\u601d\u8def\u5c31\u662f\u5c06\u6574\u4e2a\u8f93\u5165\u7684 $s1$ \u5b57\u7b26\u4e32\u4e0e $s2$ \u8fdb\u884c\u6bd4\u5bf9\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5206\u522b\u4ece\u5f00\u5934\u5230\u7ed3\u5c3e\u5404\u505a\u4e00\u6b21\u5faa\u73af\uff0c\u8bb0\u5f55\u4e0b\u662f\u4ece\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u4e0d\u4e00\u6837\u7684\u3002\u6211\u4eec\u62ff\u6837\u4f8b\u4e3e\u4f8b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/e7is09ab.png)\n\n\u56fe\u4e2d\u7684\u7ea2\u8272\u6846\u5c31\u662f\u6211\u4eec\u5373\u5c06\u7528\u6765\u4ee3\u66ff\u201c $*$ \u201d\u7684\u3002\u6240\u4ee5**\u53ea\u8981\u5c06\u7ea2\u8272\u6846\u5185\u7684\u4e1c\u897f\u5224\u65ad\u4e00\u4e0b\u5927\u5c0f\u5199**\u5c31\u597d\u4e86\u3002\n# \u5439\u6bdb\u6c42\u75b5\n\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u5751\u3002\u9996\u5148\u6837\u4f8b\u4e2d\u6709\u8fc7\u627e\u4e0d\u5230\u201c $*$ \u201d\u53f7\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6709\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u8fd9\u79cd\u7b97\u6cd5\u662f\u4f1a\u51fa\u95ee\u9898\u7684\u3002\u6240\u4ee5\u6211\u4eec\u52a0\u4e00\u53e5\u8bdd\u6765\u5224\u65ad\u8fd9\u4e2a\u662f\u5426\u5408\u683c\uff1a\n\n```cpp\nif(s1.find('*') == s1.npos){ //\u5982\u679c\u627e\u4e0d\u5230*\u53f7\n\tcout << \"NO\" << endl;\n\treturn 0; //\u76f4\u63a5\u518d\u89c1\n}\n```\n# \u8d34\u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tint n1, n2;//\u65e0\u8111\u8f93\u5165\n\tcin >> n1 >> n2;\n\tstring s1, s2;\n\tcin >> s1 >> s2;\n\tif(s1.find('*') == s1.npos){\n\t\tcout << \"NO\" << endl;\n\t\treturn 0;\n\t}\n\t\n\tint fr;//\u5bfb\u627e\u8d77\u70b9\u7ec8\u70b9\n\tfor(int i = 0; i < s1.size(); i++){\n\t\tif(s1[i] != s2[i]){\n\t\t\tfr = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tint bc;\n\tfor(int i = s1.size()-1; i <=0; i--){\n\t\tif(s1[i] != s2[i]){\n\t\t\tbc = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor(int i = fr; i <= bc; i++){\n\t\tif(!islower(s2[i])){ //\u5224\u65ad\u662f\u5426\u5c0f\u5199\n\t\t\tcout << \"NO\" << endl;\n\t\t\treturn 0; //\u6709\u4e0d\u662f\u5c0f\u5199\u7684\u5148\u518d\u89c1\n\t\t}\n\t}\n\tcout << \"YES\" << endl;\n\treturn 0;\n} \n```\n",
        "postTime": 1606749900,
        "uid": 312820,
        "name": "qxhAwA",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 CF1023A \u3010Single Wildcard Pattern Matching\u3011"
    }
]