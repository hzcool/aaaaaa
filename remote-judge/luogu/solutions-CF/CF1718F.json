[
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/CF1718F)\n\n\u9898\u610f\u7b80\u8ff0\uff1a\n\n\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u7ec4 $a$\uff0c\u503c\u57df\u4ece $1$ \u5230 $m$\uff0c\u8fd8\u6709\u4e00\u4e2a\u5e38\u6570 $C$\uff0c$q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a $l$ \u548c $r$\uff0c\u6c42 $\\sum\\limits_{i=1}^C[\\gcd(i,\\prod\\limits_{j=l}^ra_j)=1]$\u3002\n\n$1\\le n,q,C\\le10^5,1\\le m\\le2\\times10^4$\n\n\u597d\u9898\u3002\n\n\u9996\u5148\uff0c\u663e\u800c\u6613\u89c1\u7684\uff0c\u8981\u628a $a_i$ \u8d28\u56e0\u6570\u5206\u89e3\u4e86\u3002\u4e8e\u662f\u8be2\u95ee\u76f8\u5f53\u4e8e\u5bf9\u4e8e $a_{l..r}$ \u7684\u6240\u6709\u6570\u7684\u6240\u6709\u8d28\u56e0\u5b50\uff0c\u5728 $[1,C]$ \u8303\u56f4\u5185\u6709\u591a\u5c11\u4e2a\u4e0d\u662f\u8fd9\u6240\u6709\u8d28\u56e0\u5b50\u4e4b\u4e00\u7684\u500d\u6570\u3002\n\n\u9996\u5148\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u8d28\u6570 $p$\uff0c\u5728 $[1,C]$ \u8303\u56f4\u5185\u6709\u591a\u5c11\u4e2a\u4e0d\u662f\u8fd9\u4e2a\u8d28\u6570\u7684\u500d\u6570\u3002\u7b54\u6848\u662f\u5e73\u51e1\u7684\uff0c\u4e3a $\\tiny\\left\\lfloor\\dfrac Cp\\right\\rfloor$\u3002\n\n\u4e8e\u662f\u6709\u4e00\u4e2a\u5f88\u6734\u7d20\u7684\u505a\u6cd5\u662f\u5bb9\u65a5\uff0c\u5373\u679a\u4e3e\u6240\u6709\u8d28\u56e0\u5b50\u7684\u5b50\u96c6\uff0c\u5728\u5bb9\u65a5\u5730\u8ba1\u7b97\u5176\u8d21\u732e\u3002\u8bbe $a_{l..r}$ \u7684\u6240\u6709\u6570\u7684\u6240\u6709\u8d28\u56e0\u5b50\u96c6\u5408\u4e3a $S$\uff0c\u90a3\u4e48\u5c31\u662f\uff1a\n\n$$\\large\\sum\\limits_{T\\subset S}(-1)^{|T|}\\left\\lfloor\\dfrac C{\\prod\\limits_{i\\in T}i}\\right\\rfloor$$\n\n\u4f46\u662f\uff0c\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u5355\u6b21\u8be2\u95ee\u662f $O(2^{\\text{\u8d28\u56e0\u5b50\u4e2a\u6570}})$ \u7684\uff0c\u5982\u679c\u6ca1\u6709\u5b87\u5b99\u5c04\u7ebf\u4f18\u5316\u7684\u8bdd\u4f1a $\\text{TLE}$\uff0c\u7136\u800c\u5b87\u5b99\u5c04\u7ebf\u4e0d\u4f1a\u603b\u8fd9\u4e48\u597d\u8fd0\u6c14\u5730\u6765\u5e2e\u4f60\u4f18\u5316\u4ee3\u7801\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u81ea\u5df1\u4f18\u5316\u3002\n\n\u4f46\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e00\u4e2a\u6bd4 $C$ \u5c0f\u7684\u6570\u5b57\u5fc5\u7136\u81f3\u591a\u53ea\u6709\u4e00\u4e2a\u5927\u4e8e $\\sqrt C$ \u7684\u8d28\u56e0\u5b50\uff0c\u8fd9\u542f\u53d1\u6211\u4eec\u8981\u628a\u5927\u4e8e $\\sqrt C$ \u7684\u8d28\u56e0\u5b50\u548c\u5c0f\u4e8e $\\sqrt C$ \u7684\u8d28\u56e0\u5b50\u533a\u522b\u5bf9\u5f85\u3002\n\n\u5148\u8003\u8651\u5c0f\u4e8e $\\sqrt C$ \u7684\u8d28\u56e0\u5b50\u3002\u56e0\u4e3a $C\\le10^5$\uff0c\u6545 $\\sqrt C\\le10^{2.5}\\approx316.227766017$\uff0c\u5c0f\u4e8e\u5b83\u7684\u8d28\u6570\u5171\u6709 $65$ \u4e2a\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u8fd9\u4e00\u7b97\u6cd5\uff0c\u901a\u8fc7\u524d\u7f00\u76f8\u51cf\u7684\u65b9\u5f0f\uff0c\u5feb\u901f\u5730\u8ba1\u7b97\u51fa $l$ \u81f3 $r$ \u5185\u6bcf\u4e2a\u5c0f\u8d28\u6570\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u8fdb\u800c\u80fd\u6c42\u51fa $l$ \u81f3 $r$ \u5185\u6240\u6709\u6570\u5305\u542b\u7684\u5c0f\u8d28\u56e0\u6570\u96c6\u5408\uff0c\u7136\u540e\uff0c\u8fd9\u90e8\u5206\u5c31\u53ef\u4ee5\u7528 $O(2^{\\text{\u8d28\u56e0\u5b50\u4e2a\u6570}})$ \u7684\u5de8\u5927\u590d\u6742\u5ea6\u6c42\u51fa\u7b54\u6848\u3002\n\n\u4f46\u662f\uff0c\u6709\u7ec6\u5fc3\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u95ee\uff1a\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5c0f\u8d28\u6570\u6700\u591a\u80fd\u6709 $65$ \u4e2a\u5440\uff0c\u8fd9\u6837\u8fd0\u7b97\u6b21\u6570\u4e0d\u662f\u4f1a\u5230\u8fbe $2^{65}=36893488147419103232$ \u6b21\uff0c\u8fd9\u6837\u80af\u5b9a\u4f1a $\\text{TLE}$ \u5440\uff1f\n\n\u8fd9\u4f4d\u540c\u5b66\uff0c\u4f60\u8bf4\u7684\u5f88\u5bf9\uff0c\u4f46\u4e0d\u662f\u5f88\u5bf9\uff0c\u56e0\u4e3a\u5982\u679c $S$ \u7684\u4e00\u4e2a\u5c0f\u8d28\u6570\u5b50\u96c6 $T$ \u91cc\u9762\u7684\u6240\u6709\u6570\u7684\u4e58\u79ef\u6bd4 $C$ \u5927\u7684\u8bdd\uff0c$\\left\\lfloor\\dfrac C{\\prod\\limits_{i\\in T}i}\\right\\rfloor$ \u5c31\u4f1a\u8fc5\u901f\u5730\u53d8\u6210 $0$\uff0c\u5c31\u6ca1\u6709\u8ba1\u7b97\u7684\u5fc5\u8981\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u987e\u53ca $\\prod\\limits_{i\\in T}i<C$ \u7684\u5b50\u96c6 $T$\u3002\n\n\u800c\u8fd9\u90e8\u5206\u5b50\u96c6\u7684\u6570\u91cf\u662f\u5f88\u5c0f\u7684\u3002\u5982\u679c $C=10^5$ \u4e14 $S=\\{\\small\\text{\u6240\u6709\u5c0f\u4e8e 316.227766017 \u7684\u8d28\u6570}\\normalsize\\}$ \u7684\u8bdd\uff0c\u6253\u4e2a\u8868\u53ef\u4ee5\u53d1\u73b0\u603b\u5171\u7684\u5b50\u96c6\u6570\u4ec5\u4ec5\u53ea\u6709 $14920$ \u4e2a\u3002\u52a0\u4e2a\u8bb0\u5fc6\u5316\u53ef\u4ee5\u5f88\u5feb\u7684\u901a\u8fc7\u6240\u6709\u7684\u6d4b\u8bd5\u6837\u4f8b\u3002\n\n\u7136\u540e\u8003\u8651\u5927\u4e8e $\\sqrt C$ \u7684\u8d28\u6570\u3002\u7531\u4e8e\u4e24\u4e2a\u5927\u8d28\u6570\u4e58\u8d77\u6765\u5c31\u4f1a\u5927\u4e8e $C$\uff0c\u6240\u4ee5\u5982\u679c\u4e00\u4e2a\u5b50\u96c6\u91cc\u9762\u6709\u4e24\u4e2a\u5927\u8d28\u6570\u7684\u8bdd\uff0c\u8fd9\u4e2a\u5b50\u96c6\u5c31\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u8d21\u732e\u3002\u6240\u4ee5\uff0c\u5927\u8d28\u6570\u7684\u8d21\u732e\u5c31\u662f $\\sum\\limits_{p\\text{ is a big prime}}\\left\\lfloor\\frac Cp\\right\\rfloor$\u3002\u7531\u4e8e\u6bcf\u4e2a $a_i$ \u9664\u6389\u5c0f\u8d28\u6570\u540e\u6700\u591a\u53ea\u5269\u4e00\u4e2a\u5927\u8d28\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u6765\u7ef4\u62a4\u5927\u8d28\u6570\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u6837\u7684\u8bdd\u4e00\u4e2a\u5927\u8d28\u6570\u4e58\u4ee5\u5c0f\u8d28\u6570\u4f1a\u51cf\u4e24\u904d\uff0c\u8fd9\u6837\u7684\u8bdd\u5927\u8d28\u6570\u7684\u8d21\u732e\u5c31\u53d8\u6210\u4e86 $\\sum\\limits_{p\\text{ is a big prime}}\\sum\\limits_{1\\le i\\le\\left\\lfloor\\frac Cp\\right\\rfloor}[i\\text{ is not a multiple of a small prime}]$ \u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u8fd9\u6837\u5355\u7eaf\u5730\u7528\u524d\u7f00\u548c\u6765\u7ef4\u62a4\u5927\u8d28\u6570\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u5927\u8d28\u6570 $p$ \u6709 $\\left\\lfloor\\frac Cp\\right\\rfloor\\le\\lfloor\\sqrt C\\rfloor$\uff0c\u6545\u53ef\u4ee5\u4f7f\u7528\u6876\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $1\\le i\\le\\lfloor\\sqrt C\\rfloor$ \u7ef4\u62a4\u5f53\u524d\u8fd9\u4e2a\u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u5927\u8d28\u6570 $p$ \u6ee1\u8db3 $\\left\\lfloor\\frac Cp\\right\\rfloor=i$\uff0c\u8bbe\u8fd9\u4e2a\u6570\u5b57\u4e3a $b_i$\uff0c\u7528\u83ab\u961f\u5f88\u597d\u7ef4\u62a4\uff0c\u518d\u66b4\u529b\u7b5b\u51fa\u5bf9\u4e8e\u6bcf\u4e2a $1\\le i\\le\\lfloor\\sqrt C\\rfloor$ \u7684 $\\sum\\limits_{1\\le j\\le i}[j\\text{ is not a multiple of a small prime}]$\uff08\u522b\u5fd8\u4e86\uff0c\u5c0f\u8d28\u6570\u53ea\u6709 $65$ \u4e2a\uff01\uff01\uff01\uff09\uff0c\u8bbe\u8fd9\u4e2a\u6570\u5b57\u4e3a $c_i$\uff0c\u5219\u6700\u7ec8\u5927\u6570\u7684\u8d21\u732e\u5c31\u662f $\\sum\\limits_{i=1}^{\\lfloor\\sqrt C\\rfloor}b_ic_i$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(C+\\dfrac{n\\sqrt C}{\\log C}+q\\sqrt n+q\\sqrt C+q\\log q)$\u3002\u4ee3\u7801\u8fd8\u662f\u5f88\u597d\u5199\u7684\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace QYB {\n    int n, m, c, q, tot, x[405], xp[405], pr[10005], a[100005];\n    int cnts, tmp[405], sb[100005], cnt[100005][105]; bool vis[100005];\n    struct query { int l, r, id, ans; } s[100005]; map<__int128, int> mp;\n    int dfs(int i, int s, int f) {\n        if (i == cnts + 1) return c / s * f;\n        int res = 0;\n        if (tmp[i] <= c / s) res += dfs(i + 1, s * tmp[i], -f);\n        return res + dfs(i + 1, s, f);\n    } int main() {\n        scanf(\"%d%d%d%d\", &n, &m, &c, &q);\n        for (int i = 2; i <= 100000; i++) {\n            if (!vis[i]) vis[i] = true, pr[++tot] = i;\n            for (int j = 1; j <= tot; j++) {\n                if (i * pr[j] > 100000) break;\n                vis[i * pr[j]] = true;\n                if (i % pr[j] == 0) break;\n            }\n        } for (int i = 1; i <= n; i++) {\n            scanf(\"%d\", a + i);\n            for (int j = 1; j <= tot && j <= 65; j++) {\n                cnt[i][j] = cnt[i - 1][j] + (a[i] % pr[j] == 0);\n                while (a[i] % pr[j] == 0) a[i] /= pr[j];\n            }\n        } for (int i = 1; i <= q; i++) scanf(\"%d%d\", &s[i].l, &s[i].r), s[i].id = i, s[i].ans = 0;\n        sort(s + 1, s + q + 1, [](query a, query b) { return a.l / 320 != b.l / 320? a.l < b.l: a.r < b.r; });\n        for (int i = 1, l = 1, r = 0; i <= q; i++) {\n            while (l > s[i].l) --l, (a[l] > 1 && !(sb[a[l]]++)? ++xp[c / a[l]]: 0);\n            while (r < s[i].r) ++r, (a[r] > 1 && !(sb[a[r]]++)? ++xp[c / a[r]]: 0);\n            while (l < s[i].l) (a[l] > 1 && !(--sb[a[l]])? --xp[c / a[l]]: 0), l++;\n            while (r > s[i].r) (a[r] > 1 && !(--sb[a[r]])? --xp[c / a[r]]: 0), r--;\n            for (int j = 1; j <= 320; x[j++] = 1); __int128 t = 0; int ans = cnts = 0;\n            for (int j = 1; j <= 65; j++) {\n                t |= (__int128)(bool)(cnt[r][j] ^ cnt[l - 1][j]) << j;\n                if (cnt[r][j] ^ cnt[l - 1][j]) {\n                    tmp[++cnts] = pr[j];\n                    for (int k = pr[j]; k <= 320; x[k] = 0, k += pr[j]);\n                }\n            } if (mp.find(t) == mp.end()) mp[t] = ans = dfs(1, 1, 1);\n            else ans = mp[t];\n            for (int j = 1; j <= 320; j++) {\n                ans -= xp[j] * (x[j] += x[j - 1]);\n            } s[i].ans = ans;\n        } sort(s + 1, s + q + 1, [](query a, query b) { return a.id < b.id; });\n        for (int i = 1; i <= q; i++) printf(\"%d\\n\", s[i].ans);\n        return 0;\n    }\n} int main() {\n    return QYB::main();\n}\n```",
        "postTime": 1669295623,
        "uid": 172003,
        "name": "qinyubo",
        "ccfLevel": 7,
        "title": "CF1718F \u9898\u89e3"
    },
    {
        "content": "## \u524d\u8a00\n\u4e71\u641e\u4eba\u5927\u80dc\u5229\uff01\n## \u601d\u8def\n\u8003\u8651 bitset\u3002\n\n\u9996\u5148\u6211\u4eec\u5bf9\u4e8e\u524d $k$ \u4e2a\u8d28\u6570\u7684\u6240\u6709\u5b50\u96c6\u9884\u5904\u7406\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\frac{2^kC}{w}$\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u5269\u4e0b\u7684\u8d28\u6570\uff0c\u6211\u4eec\u8003\u8651\u76f4\u63a5\u732b\u6811\u5206\u6cbb\u3002\n\n\u663e\u7136\u6bcf\u4e2a\u8d28\u6570\u53ea\u4f1a\u5728 $O(\\log n)$ \u4e2a\u533a\u95f4\u5185\u51fa\u73b0\uff0c\u8bbe $p(k)$ \u4e3a\u7b2c $k$ \u4e2a\u8d28\u6570\uff0c\u6211\u4eec\u5c1d\u8bd5\u5206\u6790\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\n\n- \u66b4\u529b\u8d4b\u503c $O(\\frac{n^2\\log n}{p(k)})$\u3002\n- \u62f7\u8d1d bitset $O(\\frac{n^2\\log n}{w})$\n- \u6bcf\u4e2a\u8be2\u95ee\u6c42\u82e5\u5e72\u4e2a bitset \u7684\u5e76 $O(\\frac{nC}{w})$\n\n\u524d\u51e0\u5c42\u56e0\u4e3a $m$ \u4e0d\u592a\u5927\u662f\u5361\u4e0d\u6ee1\u7684\u3002\n\n\u7136\u800c\u7a7a\u95f4\u662f $\\frac{2^kC}{w}$ \u7684\uff0c\u6240\u4ee5 $k$ \u53ea\u80fd\u5f00\u5230 $13$\u3002\n## \u4ee3\u7801\n```cpp\n// Problem: F. Burenka, an Array and Queries\n// Contest: Codeforces - Codeforces Round #814 (Div. 1)\n// URL: https://codeforces.com/contest/1718/problem/F\n// Memory Limit: 256 MB\n// Time Limit: 3000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n//\u56de\u5bb6\uff1f\u6211\u6ca1\u6709\u5bb6\u53ef\u4ee5\u56de\uff0c\u6211\u6ca1\u6709\u9000\u8def\u3002\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\nusing namespace std;\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\n#define arr bitset<100001>\narr f[2303],g[2303],h[16384];\nint n=read(),m=read(),C=read(),Q=read();\nint p[20003],ans[100003],pc;\nstruct query{int l,r,v;}q[100003];\nint fi[100003],gi[100003];\nbitset<20001> vis;\nvector<int> vec[100003];\nvoid solve(int l,int r,vector<int>&v)\n{\n\tvector<int> ls,rs;\n\tint mid=(l+r)>>1;\n\tbool flg=0;\n\tfor(int i:v) \n\t\tif(q[i].r<mid) ls.emplace_back(i);\n\t\telse if(q[i].l>mid) rs.emplace_back(i);\n\t\telse flg=1;\n\tif(flg)\n\t{\n\t\tint fs=0,gs=0;\n\t\tfi[mid+1]=gi[mid-1]=0;\n\t\tfor(int i=mid; i>=l; --i) \n\t\t{\n\t\t\tfor(int j:vec[i]) if(!vis[j])\n\t\t\t{\n\t\t\t\tvis[j]=1,++fs,f[fs]=f[fs-1];\n\t\t\t\tfor(int k=1; j*k<=C; ++k) f[fs][j*k]=1;\n\t\t\t}\n\t\t\tfi[i]=fs;\n\t\t}\n\t\tfor(int i=mid; i>=l; --i)\n\t\t\tfor(int j:vec[i])\n\t\t\t\tvis[j]=0;\n\t\tfor(int i=mid; i<=r; ++i)\n\t\t{\n\t\t\tfor(int j:vec[i]) if(!vis[j])\n\t\t\t{\n\t\t\t\tvis[j]=1,++gs,g[gs]=g[gs-1];\n\t\t\t\tfor(int k=1; j*k<=C; ++k) g[gs][j*k]=1;\n\t\t\t}\n\t\t\tgi[i]=gs;\n\t\t}\n\t\tfor(int i=mid; i<=r; ++i)\n\t\t\tfor(int j:vec[i])\n\t\t\t\tvis[j]=0;\n\t\tfor(int i:v) if(q[i].l<=mid&&q[i].r>=mid)\n\t\t\tans[i]=C-\n\t\t\t(f[fi[q[i].l]]|g[gi[q[i].r]]|h[q[i].v]).count();\n\t}\n\tif(!ls.empty()) solve(l,mid-1,ls);\n\tif(!rs.empty()) solve(mid+1,r,rs);\n\treturn ; \n}\nstruct stor\n{\n\tint a[100003],st[100003][17],l2[100003];\n\tinline void init(int l)\n\t{\n\t\tst[l][0]=a[l];\n\t\tfor(int i=1; i<=16; i++) \n\t\tst[l][i]=st[l][i-1]|st[min(l+(1<<(i-1)),n)][i-1];\n\t}\n\tinline int query(int l,int r)\n\t{\n\t\tint L=l2[r-l+1];\n\t\treturn st[l][L]|st[min(r-(1<<L)+1,n)][L];\n\t}\n\tvoid main()\n\t{\n\t    for(int i=2; i<=n; i++) l2[i]=l2[i>>1]+1;\n\t\tfor(int i=n; i; --i) init(i);\n\t\treturn ;\n\t}\n}st;\nsigned main()\n{\n\tm=20000;\n\tfor(int i=2; i<=m; ++i) if(!vis[i])\n\t{\n\t\tp[++pc]=i;\n\t\tfor(int j=2; i*j<=m; ++j) vis[i*j]=1;\n\t}\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tint x=read();\n\t\tfor(int j=1; j<=14; ++j) if(x%p[j]==0)\n\t\t{\n\t\t\tst.a[i]+=1<<(j-1);\n\t\t\twhile(x%p[j]==0) x/=p[j];\n\t\t}\n\t\tfor(int j=15; j<=pc&&p[j]*p[j]<=x; ++j)\n\t\t\tif(x%p[j]==0)\n\t\t\t\tvec[i].push_back(p[j]),\n\t\t\t\tvec[i].push_back(x/p[j]),x=1;\n\t\tif(x>1) vec[i].push_back(x);\n\t}\n\tst.main();\n\tvector<int> v(Q);\n\tfor(int i=1; i<=Q; ++i)\n\t\tq[i].l=read(),q[i].r=read(),\n\t\tq[i].v=st.query(q[i].l,q[i].r),v[i-1]=i;\n\tfor(int i=1; i<=14; ++i)\n\t\tfor(int j=1; p[i]*j<=C; ++j)\n\t\t\th[1<<(i-1)][p[i]*j]=1;\n\tfor(int i=3; i<16384; ++i)\n\t\tif((i&(-i))!=i)\n\t\t\th[i]=h[i&(-i)]|h[i-(i&(-i))];\n\tsolve(1,n,v);\n\tfor(int i=1; i<=Q; ++i) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1660911156,
        "uid": 111055,
        "name": "dead_X",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1718F"
    },
    {
        "content": "\u770b\u5230\u8d28\u56e0\u6570\u76f8\u5173\u7684\u95ee\u9898\uff0c\u8003\u8651\u6839\u53f7\u5206\u6cbb\u3002\n\n\u5bf9\u4e8e $\\leq \\sqrt{c}$ \u7684\u8d28\u6570\uff0c\u6211\u4eec\u9884\u5904\u7406\u5176\u662f\u5426\u51fa\u73b0\u7684\u524d\u7f00\u548c\uff0c\u67e5\u8be2\u65f6\u8bb0\u5fc6\u5316 + \u66b4\u529b dfs \u5bb9\u65a5\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u770b\u4e0a\u53bb\u4e0d\u592a\u9760\u8c31\uff0c\u4f46\u662f\u5982\u679c\u5728 dfs \u8fc7\u7a0b\u4e2d\u9047\u5230 $0$ \u5c31\u8fd4\u56de\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u73a9\u610f\u8dd1\u5f97\u98de\u5feb\u2014\u2014\u56e0\u4e3a\u72b6\u6001\u6570\u7684\u6700\u5927\u503c\u5373\u4e3a $c$ \u4ee5\u5185\u6700\u5927\u8d28\u56e0\u6570 $\\leq \\sqrt{n}$ \u4e14\u65e0\u5e73\u65b9\u56e0\u6570\u7684\u6570\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u503c\u53ea\u6709\u4e24\u4e07\u5de6\u53f3\uff0c\u800c\u4e14\u56e0\u4e3a\u8bb0\u5fc6\u5316\u8dd1\u4e0d\u6ee1\u3002\n\n\u5bf9\u4e8e $> \\sqrt{c}$ \u7684\u8d28\u6570\uff0c\u6211\u4eec\u7528\u83ab\u961f\u6765\u5904\u7406\u5b83\u6709\u6ca1\u6709\u5728\u5f53\u524d\u533a\u95f4\u5185\u51fa\u73b0\u3002\u7531\u4e8e\u4efb\u610f\u4e00\u4e2a $\\leq c$ \u7684\u6570\u81f3\u591a\u53ea\u6709 $1$ \u4e2a $> \\sqrt{c}$ \u7684\u56e0\u6570\uff0c\u6240\u4ee5\u8fd9\u90e8\u5206\u7684\u8d21\u732e\u53ef\u4ee5\u5199\u6210 $-\\displaystyle\\sum_{i \\in Prime, i > \\sqrt{c}, i \\text{ exists in } [l, r] \\text{ as a prime factor}} f(\\lfloor \\frac{c}{i} \\rfloor)$\uff0c\u5176\u4e2d $f(x) = \\displaystyle\\sum_{i = 1}^x [\\gcd(i, p) = 1]$\u3002\n\n\u6211\u4eec\u5c06 $p$ \u653e\u5230 $\\lfloor \\frac{c}{p} \\rfloor \\leq \\sqrt{c}$ \u7684\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u56de\u7b54\u8be2\u95ee\u65f6 $\\forall 1 \\leq i \\leq \\sqrt{c}$ \u5904\u7406\u51fa $f(i)$\uff0c\u5219\u8be5\u90e8\u5206\u7684\u8d21\u732e\u4e3a $-\\displaystyle\\sum_{i \\in Prime}^{\\sqrt{c}} cnt_i f(i)$\uff0c\u5176\u4e2d $cnt_x$ \u8868\u793a\u6709\u591a\u5c11\u4e2a $\\lfloor \\frac{c}{i} \\rfloor = x$\u3002\n\n\u7efc\u4e0a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\sqrt{q} + q(\\sqrt{c} + N))$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef __int128 lll;\n\ntypedef struct {\n\tint id;\n\tint l;\n\tint r;\n} Query;\n\nconst int N = 2e4 + 7, M = 1e5 + 7, K = 65, P = 316;\nconst lll one = 1;\nint c, block;\nint prime[N], id[N], lpf[N], sum1[M][K + 7], big[M], cnt1[N], cnt2[M], sum2[P + 7], bucket[K + 7], ans[M];\nbool p[N], vis[P + 7];\nQuery query[M];\nmap<lll, int> mp;\n\nbool operator <(const Query a, const Query b){\n\tif (a.l / block != b.l / block) return a.l < b.l;\n\treturn a.r < b.r;\n}\n\ninline int init(int n){\n\tint cnt = 0;\n\tp[0] = p[1] = true;\n\tlpf[1] = 0;\n\tfor (register int i = 2; i <= n; i++){\n\t\tif (!p[i]){\n\t\t\tcnt++;\n\t\t\tprime[cnt] = i;\n\t\t\tid[i] = cnt;\n\t\t\tlpf[i] = i;\n\t\t}\n\t\tfor (register int j = 1; j <= cnt && i * prime[j] <= n; j++){\n\t\t\tint t = i * prime[j];\n\t\t\tp[t] = true;\n\t\t\tlpf[t] = prime[j];\n\t\t\tif (i % prime[j] == 0) break;\n\t\t}\n\t}\n\treturn cnt;\n}\n\ninline void add(int x){\n\tif (big[x] != 0 && ++cnt1[big[x]] == 1) cnt2[c / big[x]]++;\n}\n\ninline void del(int x){\n\tif (big[x] != 0 && --cnt1[big[x]] == 0) cnt2[c / big[x]]--;\n}\n\nint dfs(int n, int cur){\n\tif (n == 0) return 0;\n\tif (cur == 0) return n;\n\treturn dfs(n, cur - 1) - dfs(n / bucket[cur], cur - 1);\n}\n\nint solve(lll state){\n\tif (mp.count(state)) return mp[state];\n\tint bucket_cnt = 0;\n\tfor (register int i = 1; i <= K; i++){\n\t\tif (state >> (i - 1) & 1) bucket[++bucket_cnt] = prime[i];\n\t}\n\treturn mp[state] = dfs(c, bucket_cnt);\n}\n\nint main(){\n\tint n, m, q, prime_cnt;\n\tcin >> n >> m >> c >> q;\n\tblock = ceil(n / sqrt(q));\n\tprime_cnt = init(max(m, P));\n\tfor (register int i = 1; i <= n; i++){\n\t\tint a;\n\t\tcin >> a;\n\t\tfor (register int j = 1; j <= K; j++){\n\t\t\tsum1[i][j] = sum1[i - 1][j];\n\t\t}\n\t\twhile (a > 1){\n\t\t\tint t = lpf[a];\n\t\t\tif (t <= P){\n\t\t\t\tsum1[i][id[t]]++;\n\t\t\t} else {\n\t\t\t\tbig[i] = t;\n\t\t\t}\n\t\t\twhile (a % t == 0){\n\t\t\t\ta /= t;\n\t\t\t}\n\t\t}\n\t}\n\tfor (register int i = 1; i <= q; i++){\n\t\tcin >> query[i].l >> query[i].r;\n\t\tquery[i].id = i;\n\t}\n\tsort(query + 1, query + q + 1);\n\tfor (register int i = 1, j = 1, k = 0; i <= q; i++){\n\t\tlll state = 0;\n\t\twhile (j > query[i].l) add(--j);\n\t\twhile (k < query[i].r) add(++k);\n\t\twhile (j < query[i].l) del(j++);\n\t\twhile (k > query[i].r) del(k--);\n\t\tfor (register int l = 1; l <= P; l++){\n\t\t\tvis[l] = false;\n\t\t}\n\t\tfor (register int l = 1; l <= K; l++){\n\t\t\tif (sum1[query[i].r][l] - sum1[query[i].l - 1][l] > 0){\n\t\t\t\tstate |= one << (l - 1);\n\t\t\t\tfor (register int x = prime[l]; x <= P; x += prime[l]){\n\t\t\t\t\tvis[x] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tans[query[i].id] = solve(state);\n\t\tfor (register int l = 1; l <= P; l++){\n\t\t\tsum2[l] = sum2[l - 1];\n\t\t\tif (!vis[l]) sum2[l]++;\n\t\t\tans[query[i].id] -= cnt2[l] * sum2[l];\n\t\t}\n\t}\n\tfor (register int i = 1; i <= q; i++){\n\t\tcout << ans[i] << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1673595938,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1718F \u3010Burenka, an Array and Queries\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u6bd4\u8f83\u5feb\u7684\u505a\u6cd5\u3002\n\n\u8003\u8651\u9608\u503c\u5206\u6cbb\u3002\u9898\u89e3\u7684\u505a\u6cd5\u662f\u5c0f\u8d28\u6570\u5206\u6cbb\uff0c\u8fd9\u91cc\u91c7\u7528\u6839\u53f7\u5206\u6cbb\uff0c\u4e5f\u5373\u4e0d\u5927\u4e8e $\\sqrt n$ \u7684\u8d28\u6570\u548c\u5927\u4e8e $\\sqrt n$ \u7684\u8d28\u6570\u3002\n\n\u6ce8\u610f\u5230\u95ee\u9898\u8981\u6c42\u7684\u662f\u4e92\u8d28\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u4e00\u4e2a\u7d20\u56e0\u6570\u53ea\u9700\u8981\u4fdd\u7559\u4e00\u4e2a\u5c31\u597d\u4e86\u3002\u6682\u4e14\u5ffd\u7565\u6389\u591a\u7ec4\u8be2\u95ee\uff0c\u9996\u5148\u56e0\u4e3a\u5c0f\u8d28\u6570\u7684\u6570\u91cf\u5e76\u4e0d\u591a\uff08\u4ec5 $65$ \u4e2a\uff09\uff0c\u6211\u4eec\u5148\u5904\u7406\u6389\u5c0f\u8d28\u6570\u7684\u8d21\u732e\u3002\u5047\u8bbe\u533a\u95f4\u5185\u51fa\u73b0\u7684\u5c0f\u8d28\u6570\u4e3a $p_1,p_2,\\cdots ,p_t$\uff0c\u90a3\u5bb9\u65a5\u53ef\u5f97\u7b54\u6848\u5c31\u662f $\\displaystyle \\sum_{S\u2286\\{1,2,\\cdots ,t\\}} (-1)^{|S|} \\dfrac{C}{\\prod_{i \\in S}p_i}$\u3002\u66b4\u529b\u5bb9\u65a5\u7684\u8fc7\u7a0b\u590d\u6742\u5ea6\u5e76\u4e0d\u9ad8\uff0c\u5b9e\u9645\u4e0a\u8dd1\u5f97\u5f88\u5feb\uff0c\u6682\u4e14\u4e0d\u7ba1\u590d\u6742\u5ea6\u3002\n\n\u63a5\u4e0b\u6765\u6709\u5927\u8d28\u6570\u7684\u5f71\u54cd\uff0c\u8fd9\u5f88\u4e0d\u5999\u3002\u6ce8\u610f\u5230\u5927\u8d28\u6570\u4e0d\u53ef\u80fd\u518d\u4e58\u4e0a\u4e00\u4e2a\u5927\u8d28\u6570\u6765\u4ea7\u751f\u8d21\u732e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5355\u72ec\u8003\u8651\u4e00\u4e2a\u6240\u6709\u5927\u8d28\u6570\u7684\u500d\u6570\u3002\u90a3\u5355\u72ec\u8003\u8651\u5927\u8d28\u6570\u7684\u7b54\u6848\u5c31\u662f $\\displaystyle \\sum_{p \\in P_{B}} \\left\\lfloor\\dfrac{C}{p}\\right\\rfloor$\u3002\u8fd9\u6837\u76f4\u63a5\u7b97\u80af\u5b9a\u4e0d\u884c\uff0c\u4f46\u662f\u6ce8\u610f\u5230 $\\left\\lfloor\\dfrac{C}{p}\\right\\rfloor$ \u7684\u53d6\u503c\u53ea\u6709 $O(\\sqrt C)$ \u4e2a\uff0c\u8fd9\u6837\u53ea\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u5185\u5927\u8d28\u6570\u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\u4f46\u662f\u6ce8\u610f\u5230\uff0c\u5c0f\u8d28\u6570\u4e58\u4e0a\u5927\u8d28\u6570\u7684\u8d21\u732e\u88ab\u591a\u7b97\u4e86\u4e00\u6b21\uff0c\u9700\u8981\u51cf\u6389\u3002\u5b9e\u9645\u4e0a\u6211\u4eec\u5728\u5355\u72ec\u5904\u7406\u5927\u8d28\u6570\u7684\u7b54\u6848\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5148\u628a $O(\\sqrt C)$ \u8303\u56f4\u5185\u7684\u6240\u6709\u533a\u95f4\u5185\u5b58\u5728\u7684\u5c0f\u8d28\u6570\u7684\u500d\u6570\u53bb\u6389\uff0c\u7136\u540e\u6eda\u4e00\u4e2a\u524d\u7f00\u548c\u6765\u8ba1\u7b97\u5927\u8d28\u6570\u7684\u8d21\u732e\uff08\u4e5f\u5373\u548c\u5c0f\u8d28\u6570\u4e92\u8d28\u7684\u5927\u8d28\u6570\u500d\u6570\u7684\u4e2a\u6570\uff09\u3002\u8fd9\u6837\u5355\u6b21\u8be2\u95ee\u5904\u7406\u5927\u8d28\u6570\u53ef\u4ee5\u505a\u5230\u63a5\u8fd1 $O(\\sqrt C)$\u3002\n\n\u90a3\u6211\u4eec\u73b0\u5728\u9700\u8981\u52a8\u6001\u7ef4\u62a4\u533a\u95f4\u5185\u6709\u6ca1\u6709\u51fa\u73b0\u5c0f\u8d28\u6570\u548c\u5927\u8d28\u6570\u3002\u5c0f\u8d28\u6570\u53ef\u4ee5\u524d\u7f00\u548c\u505a\uff0c\u5904\u7406\u5927\u8d28\u6570\u968f\u4fbf\u7528\u4e2a\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5373\u53ef\uff0c\u5f53\u7136\u6839\u636e\u590d\u6742\u5ea6\u5199\u83ab\u961f\u4e5f\u5f88\u6b63\u786e\u3002\u4ee3\u7801\u7528\u7684\u662f\u83ab\u961f\u3002\u5b9e\u6d4b\u8dd1\u5f97\u5f88\u5feb\uff0c\u4e00\u70b9\u4e5f\u4e0d\u5361\u5e38\u3002\n\n[\u8bc4\u6d4b\u94fe\u63a5](https://codeforces.com/contest/1718/submission/176879205)\u3002",
        "postTime": 1666098367,
        "uid": 340163,
        "name": "OotoriEmu",
        "ccfLevel": 0,
        "title": "CF1718F Sol"
    },
    {
        "content": "2979ms / 3000ms \u5361\u8fc7\u53bb\u4e86\uff08\n\nu1s1 \u8fd9\u4e2a\u51fa\u9898\u4eba\u633a\u4e0d\u8bb2\u6b66\u5fb7\u7684\uff0c\u5361\u9519\u89e3\u552f\u552f\u8bfa\u8bfa\uff0c\u5361\u6b63\u89e3\u91cd\u62f3\u51fa\u51fb\uff08zky \u73b0\u573a\u6b63\u89e3\u88ab\u5361\u5e38\u4e86\uff0c\u6709\u4e2a\u8001\u54e5\u73b0\u573a\u5199\u4e86\u5047\u505a\u6cd5\u8fc7\u4e86\uff09\n\n\u8054\u60f3\u7701\u9009 D1T1\uff0c\u78b0\u5230\u8fd9\u7c7b\u4e0d\u5305\u542b\u7ed9\u5b9a\u8d28\u56e0\u5b50\u7684\u9898\u76ee\u6211\u4eec\u4e00\u822c\u7684\u601d\u8def\u662f\u9608\u503c\u5206\u6cbb\u3002\u5373\u8bbe\u9608\u503c $B$\uff0c\u5c0f\u4e8e $B$ \u7684\u8d28\u6570\u4e00\u822c\u4e0d\u4f1a\u592a\u591a\uff0c\u5927\u4e8e $B$ \u7684\u8d28\u6570\u6bcf\u4e2a\u6570\u81f3\u591a\u53ea\u6709\u4e00\uff08\u6709\u7684\u65f6\u5019\u662f\u4e8c\uff09\u4e2a\u8fd9\u6837\u7684\u8d28\u56e0\u5b50\uff0c\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\u8fdb\u884c\u89e3\u9898\u3002\n\n\u6b64\u9898\u4e5f\u4e0d\u4f8b\u5916\uff0c\u6211\u4eec\u8fd8\u662f\u5c06 $\\le B$ \u7684\u8d28\u6570\u79f0\u4e3a\u5c0f\u8d28\u6570\uff0c$>B$ \u7684\u8d28\u6570\u79f0\u4e3a\u5927\u8d28\u6570\u3002\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u7ec4\u8be2\u95ee\uff0c\u5148\u6c42\u51fa $\\prod\\limits_{i=l}^ra_i$ \u5305\u542b\u7684\u5c0f\u8d28\u6570\u96c6\u5408 $S$\u2014\u2014\u8fd9\u4e2a\u663e\u7136\u53ef\u4ee5\u524d\u7f00\u548c\u6c42\u51fa\u3002\u6211\u4eec\u5148\u5c06\u5305\u542b $S$ \u4e2d\u8d28\u56e0\u5b50\u7684\u6570\u7b5b\u6389\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u6c42\u51fa\u3002\u6211\u4eec\u8bb0 $1\\sim C$ \u4e2d\u7531 $\\le B$ \u7684\u8d28\u6570\u7ec4\u6210\u7684 square-free \u4e2a\u6570\u4e3a $D$\uff0c\u90a3\u4e48\u5355\u6b21\u5bb9\u65a5\u590d\u6742\u5ea6 $O(D)$\uff0c\u6253\u4e2a\u8868\u53d1\u73b0 $B=70$ \u65f6 $D$ \u5927\u6982\u662f\u51e0\u5343\uff0c\u4e58\u4e2a $q$ \u521a\u597d\u5361\u5230\u8fb9\u754c\u4e0a\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u59a8\u5148\u5c06 $B$ \u8bbe\u4e3a $70$\u3002\n\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u7b5b\u5b8c\u4e86 $\\le B$ \u7684\u8d28\u6570\uff0c\u63a5\u4e0b\u6765\u662f $>B$ \u7684\u8d28\u6570\uff0c\u7531\u4e8e $70>\\sqrt[3]{10^5}$\uff0c\u56e0\u6b64\u6bcf\u4e2a\u6570\u6700\u591a\u5305\u542b\u4e24\u4e2a\u5927\u8d28\u56e0\u5b50\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u518d\u679a\u4e3e\u6bcf\u4e2a\u5927\u8d28\u6570 $p$\uff0c\u4ee4\u7b54\u6848\u51cf\u53bb\u6ee1\u8db3 $p\\mid x$ \u4e14 $\\dfrac{x}{p}$ \u4e0d\u5305\u542b\u4efb\u4f55 $S$ \u4e2d\u8d28\u56e0\u5b50\u7684\u4e2a\u6570\uff0c\u518d\u679a\u4e3e\u6bcf\u4e2a\u5927\u8d28\u6570\u5bf9 $(p_1,p_2)$\uff0c\u518d\u4ee4\u7b54\u6848\u52a0\u4e0a\u6ee1\u8db3 $p_1,p_2\\mid x$ \u4e14 $\\dfrac{x}{p_1p_2}$ \u4e0d\u5305\u542b\u4efb\u4f55 $S$ \u4e2d\u8d28\u56e0\u5b50\u7684\u4e2a\u6570\u3002\u5bf9\u4e8e\u524d\u4e00\u90e8\u5206\uff0c$\\pi(20000)=2262$\uff0c\u56e0\u6b64\u9884\u5904\u7406\u51fa\u4e0d\u542b $S$ \u4e2d\u8d28\u56e0\u5b50\u7684\u6570\u7684\u4e2a\u6570\u7684\u524d\u7f00\u548c\u540e\uff0c\u66b4\u529b\u679a\u4e3e\u590d\u6742\u5ea6 $q\u00b72262$\uff0c\u800c\u524d\u7f00\u548c\u6700\u591a\u53ea\u9700\u9884\u5904\u7406\u5230 $\\dfrac{C}{70}$\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u6700\u540e\u662f\u679a\u4e3e\u5927\u8d28\u6570\u5bf9\uff0c\u76f4\u63a5\u679a\u4e3e\u8c8c\u4f3c\u4f1a T\uff0c\u4e0d\u8fc7\u6ce8\u610f\u5230\u5373\u4fbf $p_1,p_2$ \u90fd\u53d6 $B$\uff0c\u90a3 $\\dfrac{x}{p_1p_2}$ \u4e5f\u53ea\u5230 $20$\uff0c\u56e0\u6b64\u7c7b\u4f3c\u4e8e\u6574\u9664\u5206\u5757\uff0c\u6211\u4eec\u679a\u4e3e $p_1$ \u540e\u679a\u4e3e $\\dfrac{x}{p_1p_2}$\uff0c\u8fd9\u6837 $p_2$ \u53d6\u503c\u8303\u56f4\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u524d\u7f00\u548c\u9884\u5904\u7406\u51fa $[l,r]$ \u6709\u591a\u5c11\u4e2a\u7b26\u5408\u8981\u6c42\u7684 $p_2$ \u5373\u53ef\u3002\u4e0d\u59a8\u8bbe $p_1<p_2$\uff0c\u90a3\u4e48 $p_1\\le\\sqrt{C}$\uff0c\u800c $[71,316]$ \u4e4b\u95f4\u7684\u8d28\u6570\u53ea\u6709 $46$ \u4e2a\u3002\u56e0\u6b64\u8fd9\u90e8\u5206\u590d\u6742\u5ea6\u4e0a\u754c $46\u00b720=920$\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u65f6\u8fd8\u6709\u4e00\u70b9\u5361\u5e38\u7ec6\u8282\uff0c\u8b6c\u5982\u5f00 $2262\u00b7n$ \u7684\u6570\u7ec4\u4f1a MLE\uff0c\u9700\u8981\u83ab\u961f\u5904\u7406\u51fa\u4e00\u4e2a\u533a\u95f4\u51fa\u73b0\u8fc7\u54ea\u4e9b\u5927\u8d28\u6570\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u662f $q\u00b7(D+2262+\\dfrac{10^5}{70}+46\u00b720)+(n+q)\\sqrt{n}$\u3002\u5dee\u4e0d\u591a\u53ef\u4ee5\u52c9\u5f3a\u5361\u8fc7\u53bb\u3002\n\n```cpp\nconst int MAXN = 1e5;\nconst int MAXV = 2e4;\nconst int BLK = 316;\nconst int L1 = 18;\nconst int L2 = 2262;\nconst int S = 2000;\nint n, m, c, qu, a[MAXN + 5], sum[L1 + 3][MAXN + 5], pos[MAXN + 5];\nint pr[MAXN + 5], prcnt = 0, vis[MAXN + 5], mxp[MAXN + 5], mu[MAXN + 5], msk[MAXN + 5];\nvoid sieve(int n) {\n\tmu[1] = 1;\n\tfor (int i = 2; i <= n; i++) {\n\t\tif (!vis[i]) pr[++prcnt] = i, mu[i] = -1, mxp[i] = prcnt;\n\t\tfor (int j = 1; j <= prcnt && pr[j] * i <= n; j++) {\n\t\t\tvis[pr[j] * i] = 1; mxp[pr[j] * i] = mxp[i];\n\t\t\tif (i % pr[j] == 0) break;\n\t\t\tmu[pr[j] * i] = -mu[i];\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) for (int j = 1; j <= L1; j++) if (i % pr[j] == 0) msk[i] |= 1 << j - 1;\n\tfor (int i = 2; i <= n; i++) pos[i] = pos[i - 1] + (!vis[i]);\n}\nint num[MAXN + 5], num_cnt = 0;\nvoid dfs(int x, ll prd) {\n\tif (prd > MAXN) return;\n\tif (x == L1 + 1) return num[++num_cnt] = prd, void();\n\tdfs(x + 1, prd); dfs(x + 1, prd * pr[x]);\n}\nint L[BLK + 5], R[BLK + 5], bel[MAXN + 5], blk_cnt, blk_sz;\nstruct qry {\n\tint l, r, id;\n\tbool operator < (const qry &rhs) {return mp(bel[l], bel[r]) < mp(bel[rhs.l], bel[rhs.r]);}\n} q[MAXN + 5];\nint res[MAXN + 5], buc[MAXN + 5], msks[MAXN + 5];\nvoid push(int x) {\n\tif (mxp[a[x]] > L1) buc[mxp[a[x]]]++;\n\tif (mxp[a[x]] && mxp[a[x] / pr[mxp[a[x]]]] > L1) buc[mxp[a[x] / pr[mxp[a[x]]]]]++;\n}\nvoid pop(int x) {\n\tif (mxp[a[x]] > L1) buc[mxp[a[x]]]--;\n\tif (mxp[a[x]] && mxp[a[x] / pr[mxp[a[x]]]] > L1) buc[mxp[a[x] / pr[mxp[a[x]]]]]--;\n}\nint main() {\n#ifdef LOCAL\n\tfreopen(\"in.txt\", \"r\", stdin);\n\tfreopen(\"out.txt\", \"w\", stdout);\n#endif\n\tscanf(\"%d%d%d%d\", &n, &m, &c, &qu); sieve(MAXN);\n\tblk_sz = (int)sqrt(n); blk_cnt = (n - 1) / blk_sz + 1;\n\tfor (int i = 1; i <= blk_cnt; i++) {\n\t\tL[i] = (i - 1) * blk_sz + 1; R[i] = min(i * blk_sz, n);\n\t\tfor (int j = L[i]; j <= R[i]; j++) bel[j] = i;\n\t}\n\tfor (int i = 1; i <= n; i++) scanf(\"%d\", &a[i]);\n\tfor (int i = 1; i <= L1; i++) for (int j = 1; j <= n; j++)\n\t\tsum[i][j] = sum[i][j - 1] + (a[j] % pr[i] == 0);\n\tdfs(1, 1); sort(num + 1, num + num_cnt + 1);\n\tfor (int i = 1; i <= qu; i++) {\n\t\tscanf(\"%d%d\", &q[i].l, &q[i].r); msks[i] = 0; q[i].id = i;\n\t\tfor (int j = 1; j <= L1; j++) if (sum[j][q[i].r] - sum[j][q[i].l - 1]) msks[i] |= (1 << j - 1);\n\t\tfor (int j = 1; j <= num_cnt; j++) if ((msk[num[j]] & msks[i]) == msk[num[j]])\n\t\t\tres[i] += mu[num[j]] * (c / num[j]);\n\t}\n\tsort(q + 1, q + qu + 1); int cl = 1, cr = 0;\n\tfor (int i = 1; i <= qu; i++) {\n\t\twhile (cr < q[i].r) push(++cr);\n\t\twhile (cl > q[i].l) push(--cl);\n\t\twhile (cl < q[i].l) pop(cl++);\n\t\twhile (cr > q[i].r) pop(cr--);\n\t\tint id = q[i].id; static int ss[S + 5], sbuc[L2 + 5];\n\t\tfor (int j = 1; j <= S; j++) ss[j] = ss[j - 1] + ((msk[j] & msks[id]) == 0);\n\t\tfor (int j = L1 + 1; j <= L2; j++) if (buc[j]) res[id] -= ss[c / pr[j]];\n\t\tfor (int j = 1; j <= L2; j++) sbuc[j] = sbuc[j - 1] + (!!buc[j]);\n\t\tfor (int j = L1 + 1; pr[j] * pr[j] <= c; j++) if (buc[j]) {\n\t\t\tint V = c / pr[j];\n\t\t\tfor (int L = pr[j + 1], R; L * pr[j] <= c; L = R + 1) {\n\t\t\t\tR = V / (V / L);\n\t\t\t\tres[id] += ss[V / L] * (sbuc[pos[R]] - sbuc[pos[L - 1]]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= qu; i++) printf(\"%d\\n\", res[i]);\n\treturn 0;\n}\n```",
        "postTime": 1662095256,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1718F Burenka, an Array and Queries"
    }
]