[
    {
        "content": "\u5982\u679c\u6ca1\u6709 $\\texttt{O}$ \u7684\u9650\u5236\uff0c\u5c31\u662f\u4e00\u4e2a\u72b6\u538b DP \u7684\u6a21\u677f\uff0c\u76f4\u63a5\u8bbe $dp_{i,S}$ \u8868\u793a\u7b2c $i$ \u5217\uff0c\u72b6\u6001\u4e3a $S$ \u7684\u65b9\u6848\u6570\uff0c\u8f6c\u79fb\u624b\u52a8\u679a\u4e3e\u4e00\u4e0b\u5373\u53ef\u3002  \n\u8003\u8651 $\\texttt{O}$ \u8981\u6211\u4eec\u5e72\u4ec0\u4e48\u3002\u81f3\u5c11\u53ef\u4ee5\u79fb\u52a8\u4e00\u6b21\uff0c\u610f\u5473\u7740\u81f3\u5c11\u6709\u4e00\u4e2a $1 \\times 2$ \u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u662f\u53ef\u4ee5\u79fb\u5230\u7a7a\u4f4d\u91cc\u9762\uff0c\u5373 $\\Box\\Box\\texttt{O}$ \u578b\u3002\u56e0\u6b64\u66b4\u529b\u679a\u4e3e\u5468\u56f4\u54ea\u4e9b\u9aa8\u724c\u53ef\u4ee5\u76f4\u63a5\u79fb\u8fdb\u53bb\uff0c\u7b80\u5355\u5bb9\u65a5\u5373\u53ef\u3002\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <numeric>\nconstexpr int kMod = 1e9 + 7;\ntemplate <typename T>\nvoid Read(T &x) {\n  x = 0;\n  int f = 1;\n  char c;\n  while ((c = std::getchar()) < '0' || c > '9')\n    if (c == '-') f = -1;\n  x = c - '0';\n  while ((c = std::getchar()) >= '0' && c <= '9') x = x * 10 + (c - '0');\n  x *= f;\n}\ntemplate <typename T, typename... Args>\nvoid Read(T &x, Args &...args) {\n  Read(x);\n  Read(args...);\n}\ntemplate <typename T>\nvoid checkmax(T &x, T y) {\n  if (x < y) x = y;\n}\ntemplate <typename T>\nvoid checkmin(T &x, T y) {\n  if (x > y) x = y;\n}\ntemplate <typename T>\nT add(T a, T b) {\n  return (a + b) % kMod;\n}\ntemplate <typename T, typename... Args>\nT add(T a, T b, Args... args) {\n  return add(add(a, b), args...);\n}\ntemplate <typename T>\nT sub(T a, T b) {\n  return (a + kMod - b) % kMod;\n}\ntemplate <typename T>\nT mul(T a, T b) {\n  return a * static_cast<long long>(b) % kMod;\n}\ntemplate <typename T, typename... Args>\nT mul(T a, T b, Args... args) {\n  return mul(mul(a, b), args...);\n}\ntemplate <typename T>\nvoid Add(T &a, T b) {\n  a = add(a, b);\n}\ntemplate <typename T, typename... Args>\nvoid Add(T &a, T b, Args... args) {\n  Add(a, add(b, args...));\n}\ntemplate <typename T>\nvoid Sub(T &a, T b) {\n  a = sub(a, b);\n}\ntemplate <typename T>\nvoid Mul(T &a, T b) {\n  a = mul(a, b);\n}\ntemplate <typename T, typename... Args>\nvoid Mul(T &a, T b, Args... args) {\n  Mul(a, mul(b, args...));\n}\nint n, dp[10001][8];\nchar a[3][10001];\nvoid Solve() {\n  std::memset(dp, 0, sizeof(dp));\n  dp[0][7] = 1;\n  for (int i = 1; i <= n; i++) {\n    int T = 0;\n    for (int j = 0; j < 3; j++)\n      if (a[j][i] != '.') T |= 1 << j;\n    Add(dp[i][T], dp[i - 1][7]);\n    if (!(T & 1)) Add(dp[i][T | 1], dp[i - 1][6]);\n    if (!(T & 2)) Add(dp[i][T | 2], dp[i - 1][5]);\n    if (!(T & 3)) Add(dp[i][T | 3], dp[i - 1][4], dp[i - 1][7]);\n    if (!(T & 4)) Add(dp[i][T | 4], dp[i - 1][3]);\n    if (!(T & 5)) Add(dp[i][T | 5], dp[i - 1][2]);\n    if (!(T & 6)) Add(dp[i][T | 6], dp[i - 1][1], dp[i - 1][7]);\n    if (!T) Add(dp[i][7], dp[i - 1][0], dp[i - 1][3], dp[i - 1][6]);\n  }\n}\nint main(int argc, char const *argv[]) {\n  Read(n);\n  for (int i = 0; i < 3; i++) std::scanf(\"%s\", a[i] + 1);\n  int x = 0, y = 0;\n  for (int i = 0; i < 3; i++)\n    for (int j = 1; j <= n; j++)\n      if (a[i][j] == 'O') {\n        x = i;\n        y = j;\n        break;\n      }\n  int ans = 0;\n  for (int L = 0; L < 2; L++)\n    for (int R = 0; R < 2; R++)\n      for (int U = 0; U < 2; U++)\n        for (int D = 0; D < 2; D++) {\n          if ((L && (y <= 2 || a[x][y - 1] == 'X' || a[x][y - 2] == 'X')) ||\n              (R && (y + 2 > n || a[x][y + 1] == 'X' || a[x][y + 2] == 'X')) ||\n              (U && (x < 2 || a[x - 1][y] == 'X' || a[x - 2][y] == 'X')) ||\n              (D && (x || a[x + 1][y] == 'X' || a[x + 2][y] == 'X')) ||\n              !(L + R + U + D))\n            continue;\n          int op = (L + R + U + D) & 1;\n          if (L) a[x][y - 1] = a[x][y - 2] = 'X';\n          if (R) a[x][y + 1] = a[x][y + 2] = 'X';\n          if (U) a[x - 1][y] = a[x - 2][y] = 'X';\n          if (D) a[x + 1][y] = a[x + 2][y] = 'X';\n          Solve();\n          if (op & 1)\n            Add(ans, dp[n][7]);\n          else\n            Sub(ans, dp[n][7]);\n          if (L) a[x][y - 1] = a[x][y - 2] = '.';\n          if (R) a[x][y + 1] = a[x][y + 2] = '.';\n          if (U) a[x - 1][y] = a[x - 2][y] = '.';\n          if (D) a[x + 1][y] = a[x + 2][y] = '.';\n        }\n  std::printf(\"%d\", ans);\n  return 0;\n}\n```",
        "postTime": 1620870221,
        "uid": 68273,
        "name": "xyf007",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF342D \u3010Xenia and Dominoes\u3011"
    }
]