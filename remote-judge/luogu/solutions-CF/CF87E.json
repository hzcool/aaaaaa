[
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF87E)\n\n### \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u51fa3\u4e2a\u51f8\u5305 $A,B,C$\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa\u70b9$p$\uff0c\u95ee\u662f\u5426\u5b58\u5728 $a \\in A , b \\in B , c \\in C$ \uff0c\u4f7f\u5f97 $p$ \u4e3a $\\triangle abc$ \u7684\u91cd\u5fc3\n\n### \u9898\u76ee\u89e3\u6cd5\n\n\u9996\u5148\u601d\u8003\u91cd\u5fc3\u7684\u6027\u8d28\uff1a\n\n\u82e5 $P$ \u4e3a $\\triangle ABC$ \u7684\u91cd\u5fc3\uff0c\u6709 $\\overrightarrow{OP} = \\frac{1}{3}(\\overrightarrow{OA} + \\overrightarrow{OB} + \\overrightarrow{OC})$\n\n\u8bc1\u660e\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/82w4t554.png)\n\n\u5982\u56fe\uff0c$D$ \u4e3a $\\triangle ABC$ \u7684\u91cd\u5fc3\uff0c\u56db\u8fb9\u5f62 $ABCD$ \u4e3a\u5e73\u884c\u56db\u8fb9\u5f62\u3002\n\n\u7531\u4e2d\u7ebf\u7684\u6027\u8d28\u53ef\u77e5\uff1a$DF = \\frac{1}{2} AD$\n\n$\\therefore AD = \\frac{2}{3} AF$\n\n$\\therefore AD = \\frac{1}{3} AE$\n\n$\\therefore \\overrightarrow{AD} = \\frac{1}{3}\\overrightarrow{OE} = \\frac{1}{3}(\\overrightarrow{AB} + \\overrightarrow{AC})$\n\n$\\because \\overrightarrow{OD} = \\overrightarrow{OA} + \\overrightarrow{AD}$\n\n$\\therefore \\overrightarrow{OD} = \\overrightarrow{OA} + \\frac{1}{3}(\\overrightarrow{AB} + \\overrightarrow{AC})$\n\n$\\because \\overrightarrow{AB} = \\overrightarrow{OB} - \\overrightarrow{OA} , \\overrightarrow{AC} = \\overrightarrow{OC} - \\overrightarrow{OA}$\n\n$\\therefore \\overrightarrow{OD} = \\overrightarrow{OA} + \\frac{1}{3}(\\overrightarrow{OB} - \\overrightarrow{OA} + \\overrightarrow{OC} - \\overrightarrow{OA}) = \\frac{1}{3}(\\overrightarrow{OA} + \\overrightarrow{OB} + \\overrightarrow{OC})$\n\n\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a\n\n\u82e5 $p$ \u4e3a\u9898\u610f\u4e2d\u6240\u8ff0\u7684 $\\triangle abc$ \u7684\u7684\u91cd\u5fc3\uff0c\u5219\u6709 $3p \\in \\{a+b+c \\ | \\ a \\in A,b \\in B,c \\in C\\}$\n\n\u89c2\u5bdf\u53f3\u8fb9\u7684\u96c6\u5408\uff0c\u53d1\u73b0\u8fd9\u6b63\u662f\u95f5\u53ef\u592b\u65af\u57fa\u548c\u7684\u5f62\u5f0f\u3002\n\n\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5176\u5b9e\u5c31\u662f\u5c06\u4e09\u4e2a\u51f8\u5305\u7684\u8fb9\u6309\u7167\u6781\u89d2\u6392\u5e8f\u540e\u9996\u5c3e\u76f8\u63a5\uff0c\u5e76\u4e14 $y$ \u5750\u6807\u6700\u5c0f\u7684\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u5c31\u662f\u4e09\u4e2a\u51f8\u5305\u7684 $y$ \u5750\u6807\u6700\u5c0f\u7684\u70b9\u7684\u5750\u6807\u7684\u6a2a\u7eb5\u5750\u6807\u548c\u3002\n\n\u56e0\u4e3a\u51f8\u5305\u7684\u95f5\u53ef\u592b\u65af\u57fa\u548c\u8fd8\u662f\u4e00\u4e2a\u51f8\u5305\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u51f8\u5305\u5185\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u89e3\u51b3\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/41g82lb7.png)\n\n\u5982\u56fe\uff0c\u5224\u65ad\u70b9 $A$ \u5728\u51f8\u5305\u5185\uff0c\u51f8\u5305\u4e2d\u7684\u70b9\u6309\u9006\u65f6\u9488\u987a\u5e8f\u6392\u5217\u3002\n\n\u9996\u5148\u5c06\u70b9 $A$ \u5728\u9634\u5f71\u90e8\u5206\u7684\u60c5\u51b5\u5224\u6389\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5224\u65ad\u70b9 $A$ \u5728 $\\overrightarrow{P_0P_{mid}}$ \u7684\u5de6\u4fa7\u8fd8\u662f\u53f3\u4fa7\uff0c\u82e5\u5728\u5de6\u4fa7\uff0c\u4ee4 $l=mid$ \uff0c\u5426\u5219 $r=mid$\n\n\u6700\u540e\uff0c$P_l$ \u548c $P_r$ \u4f1a\u53d8\u6210\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\uff0c\u800c\u70b9 $A$ \u5728\u5c04\u7ebf $OP_l$ \u4e0e $OP_r$ \u4e4b\u95f4\uff0c\u6b64\u65f6\u53ea\u9700\u8981\u5224\u65ad\u70b9 $A$ \u662f\u5426\u5728 $\\overrightarrow{P_lP_r}$ \u7684\u5de6\u4fa7\u6216 $\\overrightarrow{P_lP_r}$ \u4e0a\uff0c\u662f\u5219\u70b9\u5728\u51f8\u5305\u5185\uff0c\u5426\u5219\u70b9\u5728\u51f8\u5305\u5916\u3002\n\n\u6700\u540e\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6c42\u5b8c\u95f5\u53ef\u592b\u65af\u57fa\u548c\u540e\uff0c\u8981\u5c06\u76f8\u90bb\u7684\u4e14\u6781\u89d2\u76f8\u540c\u7684\u70b9\u5408\u5e76\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u4e00\u4e9b\u5947\u602a\u7684\u9519\u8bef\u3002\n\n### \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n#define maxn 50005\nusing namespace std;\nconst double pi=acos(-1);//\u5706\u5468\u7387 \nstruct Vec{double x,y;};//\u5411\u91cf\u7ed3\u6784\u4f53 \nVec operator + (Vec a,Vec b){return (Vec){a.x+b.x,a.y+b.y};}\nVec operator - (Vec a,Vec b){return (Vec){a.x-b.x,a.y-b.y};}\nVec operator * (Vec a,double b){return (Vec){a.x*b,a.y*b};}\ndouble angle(Vec a){return atan2(a.y,a.x);}//\u6781\u89d2 \ndouble cross(Vec a,Vec b){return a.x*b.y-a.y*b.x;}//\u53c9\u79ef \ndouble dot(Vec a,Vec b){return a.x*b.x+a.y*b.y;}//\u70b9\u79ef \ndouble dist(Vec a){return sqrt(a.x*a.x+a.y*a.y);}\ndouble sqrdist(Vec a){return a.x*a.x+a.y*a.y;}\nvoid hull(Vec &O,Vec *e,int &num)//\u5904\u7406\u51f8\u5305 \n{\n    int n;static Vec v[maxn];\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%lf%lf\",&v[i].x,&v[i].y);\n        if (i==1) O=v[i];//\u6c42\u51fay\u5750\u6807\u6700\u5c0f\u7684\u70b9 \n        if (v[i].y<O.y||(v[i].y==O.y&&v[i].x<O.x)) O=v[i];//\u6c42\u51fay\u5750\u6807\u6700\u5c0f\u7684\u70b9 \n    }\n    for (int i=1;i<=n;i++)\n    {\n        int tar=i%n+1;\n        e[++num]=v[tar]-v[i];//\u51f8\u5305\u7684\u8fb9 \n    }\n}\nVec O_A,O_B,O_C;//\u5206\u522b\u5b58\u50a8\u51f8\u5305A\u3001B\u3001C\u7684y\u5750\u6807\u6700\u5c0f\u7684\u70b9 \nVec e[maxn*3];//\u5b58\u50a8\u4e09\u4e2a\u51f8\u5305\u7684\u8fb9\uff0c\u6ce8\u610f\u8981\u5f003\u500d \nint num;\nVec E[maxn*3];//\u5b58\u50a8\u5408\u5e76\u540e\u4e09\u4e2a\u51f8\u5305\u7684\u9876\u70b9\uff0c\u6ce8\u610f\u8981\u5f003\u500d \nint N;\nbool cmp(Vec a,Vec b)//\u6309\u6781\u89d2\u6392\u5e8f \n{\n    double k1=angle(a);\n    double k2=angle(b);\n    if (k1<0) k1+=2*pi;\n    //\u56e0\u4e3aatan2\u51fd\u6570\u6c42\u51fa\u7684\u6781\u89d2\u662f-\u03c0\u5230\u03c0\u4e4b\u95f4\u7684\uff0c\u800c\u6392\u5e8f\u65f6\u8981\u6309\u7167\u6781\u89d2\u57280\u52302\u03c0\u4e4b\u95f4\u7684\u503c\u6392\u5e8f\uff0c\u6240\u4ee5\u5c06\u5c0f\u4e8e0\u7684\u6781\u89d2\u52a0\u4e0a2\u03c0 \n    if (k2<0) k2+=2*pi;\n    return k1<k2;\n}\nint m;\nint main()\n{\n    hull(O_A,e,num);\n    hull(O_B,e,num);\n    hull(O_C,e,num);\n    sort(e+1,e+1+num,cmp);\n    for (int i=1;i<=num;i++)\n    {\n        if (i==1||angle(e[i])!=angle(e[i-1])) E[++N]=e[i];\n        else E[N]=E[N]+e[i];//\u5408\u5e76\u6781\u89d2\u76f8\u540c\u7684\u8fb9 \n    }\n    E[0]=O_A+O_B+O_C;//\u95f5\u53ef\u592b\u65af\u57fa\u548c\u7684y\u5750\u6807\u6700\u5c0f\u7684\u70b9 \n    for (int i=1;i<=N;i++) E[i]=E[i-1]+E[i];//\u8ba1\u7b97\u51f8\u5305\u7684\u9876\u70b9\u5750\u6807 \n    scanf(\"%d\",&m);\n    Vec p;\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%lf%lf\",&p.x,&p.y);\n        p.x*=3;p.y*=3;//\u7531\u4e8e\u91cd\u5fc3\u662f\u4e09\u4e2a\u9876\u70b9\u7684\u548c\u7684\u4e09\u5206\u4e4b\u4e00\uff0c\u8fd9\u91cc\u5c06\u91cd\u5fc3\u7684\u5750\u6807\u6269\u5927\u4e09\u500d \n        //\u4ee5\u4e0b\u4e3a\u4e0a\u6587\u6240\u8ff0\u5224\u65ad\u8fc7\u7a0b \n        if (cross(E[N-1]-E[0],p-E[0])>0){puts(\"NO\");continue;}\n        if (cross(E[1]-E[0],p-E[0])<0){puts(\"NO\");continue;}\n        int l=1,r=N-1;\n        while(l+1<r)\n        {\n            int mid=(l+r)>>1;\n            if (cross(E[mid]-E[0],p-E[0])>0) l=mid;\n            else r=mid;\n        }\n        if (cross(E[r]-E[l],p-E[l])>=0) puts(\"YES\");\n        else puts(\"NO\");\n    }\n    return 0;\n}\n```",
        "postTime": 1640591487,
        "uid": 52009,
        "name": "\u627e\u6b7b\u5211",
        "ccfLevel": 7,
        "title": "CF87E Mogohu-Rea Idol"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF87E)\n\n\u95f5\u53ef\u592b\u65af\u57fa\u548c\u7684\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00 $3$ \u500d\uff0c\u4e00\u5b9a\u8981\u5f00 $3$ \u500d\uff0c\u4e00\u5b9a\u8981\u5f00 $3$ \u500d\n\n---\n\n**\u3010\u5206\u6790\u3011**\n---\n\n\u8bbe $P$ \u662f $\\triangle A'B'C'$ \u7684\u91cd\u5fc3\uff0c\u5219\u6709\uff1a\n\n$\\vec{OP}={1\\over 3}(\\vec{OA'}+\\vec{OB'}+\\vec{OC'})$\n\n$3\\vec {OP}=\\vec{OA'}+\\vec{OB'}+\\vec{OC'}$\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6c42\u51fa $A,B,C$ \u4e09\u4e2a\u51f8\u5305\u7684\u95f5\u53ef\u592b\u65af\u57fa\u548c\u540e\uff0c\u9a8c\u8bc1 $3\\vec {OP}\n$ \u662f\u5426\u5728\u51f8\u5305\u5185\u5373\u53ef\n\n---\n\n\u7136\u540e\u5224\u5b9a\u70b9\u662f\u5426\u5728\u51f8\u5305\u5185\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n\u8bbe\u51f8\u5305\u7684\u70b9\u6309\u9006\u65f6\u9488\u5206\u522b\u4e3a $P_1, P_2, P_3,\\cdots,P_n$\uff0c\u5f85\u5224\u5b9a\u7684\u70b9\u4e3a $Q$\n\n\u5219\u5f53 $\\vec{P_1Q}\\times \\vec{P_1P_2}>0$ \u6216 $\\vec{P_1P_n}\\times \\vec{P_1Q}>0$ \u65f6\uff0c\u8bf4\u660e $Q$ \u76f8\u5bf9 $P_1$ \u7684\u6781\u89d2\u5728\u51f8\u5305\u5916\uff0c\u70b9\u663e\u7136\u4e0d\u5728\u51f8\u5305\u5185\n\n\u5426\u5219\u6211\u4eec\u6309\u76f8\u5bf9 $P_1$ \u7684\u6781\u89d2\u4e3a\u5e8f\uff0c\u4e8c\u5206\u67e5\u627e\u6700\u5927\u7684\u4e25\u683c\u5c0f\u4e8e $Q$ \u7684\u70b9 $P_{pos}$\n\n\u5219\u5f53 $\\vec{P_{pos}Q}\\times \\vec{QP_{pos+1}}<0$ \u65f6\uff0c $Q$ \u5728\u7ebf $P_{pos}P_{pos+1}$ \u5185\uff0c\u56e0\u6b64\u5728\u51f8\u5305\u5185\n\n\u5219\u5f53 $\\vec{P_{pos}Q}\\times \\vec{QP_{pos+1}}>0$ \u65f6\uff0c $Q$ \u5728\u7ebf $P_{pos}P_{pos+1}$ \u5916\uff0c\u56e0\u6b64\u5728\u51f8\u5305\u5916\n\n\u800c\u7b49\u4e8e $0$ \u65f6\u5fc5\u987b\u7279\u5224\uff0c\u82e5 $\\vec {P_{pos}Q}\\cdot \\vec{QP_{pos+1}}\\geq 0$ \u8bf4\u660e\u4e24\u4e2a\u5411\u91cf\u540c\u5411\u6216 $Q$ \u4e0e\u67d0\u4e00\u70b9\u91cd\u5408\uff0c\u6b64\u65f6\u5728\u51f8\u5305\u4e0a\uff1b\u5426\u5219\u5747\u4e0d\u5728\u51f8\u5305\u4e0a\n\n---\n\n**\u3010\u4ee3\u7801\u3011**\n---\n\n\u8bb0\u5f97\u95f5\u53ef\u592b\u65af\u57fa\u548c\u7684\u6570\u7ec4\u8981\u5f00 $3$ \u500d\uff0c\u672c\u4eba\u5361\u4e86\u4e00\u665a\u4e0a\uff0c\u65e9\u4e0a\u624d\u53d1\u73b0\u6ca1\u5f00 $3$ \u500d\n\n\u4ee5\u53ca\u6700\u597d\u95f5\u53ef\u592b\u65af\u57fa\u548c\u6c42\u51fa\u540e\uff0c\u9700\u8981\u518d\u8dd1\u4e00\u904d\u51f8\u5305\uff0c\u53bb\u9664\u5171\u7ebf\u70b9\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll, ll> pii;\ntypedef double db;\n#define fi first\n#define se second\ninline istream& operator >> (istream& in, pii &p) { return in>>p.fi>>p.se; }\ninline pii operator + (const pii &a, const pii &b) { return pii(a.fi+b.fi, a.se+b.se); }\ninline pii operator - (const pii &a, const pii &b) { return pii(a.fi-b.fi, a.se-b.se); }\ninline ll operator * (const pii &a, const pii &b) { return a.fi*b.fi+a.se*b.se; }\ninline ll operator / (const pii &a, const pii &b) { return a.fi*b.se-a.se*b.fi; }\nconst int MAXN=5e4+10;\nint n1, n2, n3, n;\npii p1[MAXN], p2[MAXN], p3[MAXN], tmp[MAXN], e1[MAXN], e2[MAXN], e3[MAXN], p[MAXN<<2];\ninline bool incov(int n, pii *p, pii q){\n    if( (q-p[1])/(p[2]-p[1])>0 || (p[n]-p[1])/(q-p[1])>0 ) return 0;\n    int pos=lower_bound(p+2, p+1+n, q, [&](const pii &a, const pii &b){\n        return (a-p[1])/(b-p[1])>0;\n    })-p-1;\n    ll res=(q-p[pos])/(p[pos%n+1]-q);\n    return res?res<0:(q-p[pos])*(p[pos%n+1]-q)>=0;\n}\ninline void Andrew(int &n, pii *p){\n    sort(p+1, p+1+n, [](const pii &a, const pii &b){\n        return a.fi!=b.fi?a.fi<b.fi:a.se<b.se;\n    });\n    int cur=0;\n    tmp[cur=1]=p[1];\n    for(int i=2, lst=cur;i<=n;tmp[++cur]=p[i++])\n        while( cur>lst && (tmp[cur]-tmp[cur-1])/(p[i]-tmp[cur])<=0 )\n            --cur;\n    for(int i=n-1, lst=cur;i>=1;tmp[++cur]=p[i--])\n        while( cur>lst && (tmp[cur]-tmp[cur-1])/(p[i]-tmp[cur])<=0 )\n            --cur;\n\n    n=cur-1;\n    if( (tmp[2]-tmp[1])/(tmp[3]-tmp[2])<0 ) reverse(tmp+2, tmp+1+n);\n    for(int i=1;i<=n;++i) p[i]=tmp[i];\n}\ninline void Minkowski(){\n    int q1=1, q2=1, q3=1, cur=0;\n    n=n1+n2+n3;\n    p[cur=1]=p1[1]+p2[1]+p3[1];\n    while(q1<=n1&&q2<=n2&&q3<=n3)\n        if(e1[q1]/e2[q2]>0&&e1[q1]/e3[q3]>0) p[cur+1]=e1[q1++]+p[cur], ++cur;\n        else if(e2[q2]/e3[q3]>0) p[cur+1]=e2[q2++]+p[cur], ++cur;\n        else p[cur+1]=e3[q3++]+p[cur], ++cur;\n    while(q1<=n1&&q2<=n2)\n        if(e1[q1]/e2[q2]>0) p[cur+1]=e1[q1++]+p[cur], ++cur;\n        else p[cur+1]=e2[q2++]+p[cur], ++cur;\n    while(q1<=n1&&q3<=n3)\n        if(e1[q1]/e3[q3]>0) p[cur+1]=e1[q1++]+p[cur], ++cur;\n        else p[cur+1]=e3[q3++]+p[cur], ++cur;\n    while(q3<=n3&&q2<=n2)\n        if(e3[q3]/e2[q2]>0) p[cur+1]=e3[q3++]+p[cur], ++cur;\n        else p[cur+1]=e2[q2++]+p[cur], ++cur;\n    while(q1<=n1) p[cur+1]=e1[q1++]+p[cur], ++cur;\n    while(q2<=n2) p[cur+1]=e2[q2++]+p[cur], ++cur;\n    while(q3<=n3) p[cur+1]=e3[q3++]+p[cur], ++cur;\n    Andrew(n, p);\n}\ninline void inputcov(int &n, pii *p, pii *e){\n    cin>>n;\n    for(int i=1;i<=n;++i) cin>>p[i];\n\n    Andrew(n, p);\n    for(int i=1;i<n;++i) e[i]=p[i+1]-p[i]; e[n]=p[1]-p[n];\n}\ninline void init(){\n    inputcov(n1, p1, e1);\n    inputcov(n2, p2, e2);\n    inputcov(n3, p3, e3);\n    Minkowski();\n}\nint main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0); cout.tie(0);\n    init();\n    int q; cin>>q;\n    pii v;\n    while(q--&&cin>>v)\n        if( incov(n, p, pii(3*v.fi, 3*v.se) ) ) cout<<\"YES\\n\";\n        else cout<<\"NO\\n\";\n    cout.flush();\n    return 0;\n}\n```",
        "postTime": 1625026618,
        "uid": 36031,
        "name": "JustinRochester",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF87E Mogohu-Rea Idol"
    },
    {
        "content": "# **\u3010\u9898\u89e3\u3011Mogohu-Rea Idol [CF87E]**\n\n[$\\mathcal{My}\\ \\mathcal{Blog}$](https://www.cnblogs.com/Xing-Ling/p/13027432.html)\n\n\u4f20\u9001\u95e8\uff1a[$\\text{Mogohu-Rea Idol}$](https://www.luogu.com.cn/problem/CF87E) [$\\text{[CF87E]}$](http://codeforces.com/problemset/problem/87/E)\n\n## **\u3010\u9898\u76ee\u63cf\u8ff0\u3011**\n\n\u6309\u9006\u65f6\u9488\u987a\u5e8f\u7ed9\u51fa\u4e09\u4e2a\u51f8\u5305\u70b9\u96c6 $A,B,C$\uff0c\u6bcf\u6b21\u67e5\u8be2\u7ed9\u51fa\u70b9 $q$\uff0c\u95ee\u662f\u5426\u5b58\u5728\u70b9 $a\\in A,b\\in B,c\\in C$ \u6ee1\u8db3 $q$ \u4e3a $\\Delta abc$ \u7684\u91cd\u5fc3\u3002\n\n## **\u3010\u5206\u6790\u3011**\n\n[**\u3010\u5b66\u4e60\u7b14\u8bb0\u3011\u8ba1\u7b97\u51e0\u4f55\u5168\u5bb6\u6876**](https://www.cnblogs.com/Xing-Ling/p/12102489.html)\n\n\u76ee\u524d\u6211\u6240\u77e5\u7684\u7b2c\u4e09\u9053\u95f5\u53ef\u592b\u65af\u57fa\u548c\u7684\u9898\uff08\u8c8c\u4f3c\u662f\u4e2a\u51b7\u95e8\u8001\u9898\uff09\n\n\u8003\u8651\u4e09\u89d2\u5f62\u91cd\u5fc3 $Q$ \u7684\u57fa\u672c\u6027\u8d28\uff1a$\\vec{OA}+\\vec{OB}+\\vec{OC}=3\\vec{OQ}$ \u3002\n\n\u7136\u540e\u5c31\u662f\u4e2a\u677f\u5b50\u9898\u4e86...\n\n\u5bf9\u4e09\u4e2a\u51f8\u5305\u6c42\u4e2a\u548c\uff0c\u5f97\u5230 $P=\\{a+b+c|a\\in A,b\\in B,c\\in C\\}$\uff0c\u7136\u540e\u76f4\u63a5\u5224\u65ad\u70b9 $q*3$ \u662f\u5426\u5728 $P$ \u4ee5\u5185\u5373\u53ef\u3002\n\n\u6ce8\u610f\u9898\u76ee\u7ed9\u51fa\u7684\u867d\u7136\u662f\u4e25\u683c\u51f8\u5305\uff0c\u4f46\u8fd8\u662f\u8981\u81ea\u5df1\u5199\u4e2a\u7b97\u6cd5\u8dd1\u4e00\u4e0b\uff0c\u76ee\u7684\u662f\u5c06\u5750\u6807\u6700\u5c0f\u7684\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5426\u5219\u540e\u9762\u5bf9\u51f8\u5305\u6c42\u548c\u65f6\u4f1a\u51fa\u95ee\u9898\uff08\u4e5f\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u627e\u6700\u5c0f\u70b9\u4f5c\u4e3a\u51f8\u5305\u8d77\u70b9\uff09\u3002\n\n\u7136\u540e\u5c31\u662f\u505a\u5b8c\u95f5\u53ef\u592b\u65af\u57fa\u548c\u540e\u8981\u518d\u5bf9\u5176\u6c42\u4e00\u4e0b\u51f8\u5305\uff0c\u76ee\u7684\u662f\u53bb\u6389\u5e73\u884c\u8fb9\uff08\u6216\u8005\u8bf4\u91cd\u8fb9\u3002\u5728 $P$ \u4e0a\u8868\u73b0\u4e3a\u4e09\u70b9\u5171\u7ebf\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O((n+m)\\log n)$ \u3002\n\n\u5176\u5b9e\u53ef\u4ee5\u628a\u4e24\u90e8\u5206\u6c42\u51f8\u5305\u7684\u8fc7\u7a0b\u90fd\u6362\u6389\uff1a\u524d\u9762\u679a\u4e3e\u627e\u6700\u5c0f\u70b9\u3001\u591a\u52a0\u4e00\u4e2a\u7279\u5224\u5904\u7406\u91cd\u8fb9\uff0c\u5c31\u53d8\u6210\u4e86 $O(n+m\\log n)$\uff0c\u4f46\u610f\u4e49\u4e0d\u5927\u3002\n\n## **\u3010Code\u3011**\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<cmath>\n#define LD double\n#define LL long long\n#define Vector Point\n#define Re register int\nusing namespace std;\nconst int N=5e4+3;\nconst LD eps=1e-8,Pi=acos(-1.0);\ninline int dcmp(LD a){return a<-eps?-1:(a>eps?1:0);}\ninline void in(Re &x){\n    int f=0;x=0;char c=getchar();\n    while(c<'0'||c>'9')f|=c=='-',c=getchar();\n    while(c>='0'&&c<='9')x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    x=f?-x:x;\n}\nstruct Point{\n    LD x,y;Point(LD X=0,LD Y=0){x=X,y=Y;}\n    inline void In(){Re X,Y;in(X),in(Y),x=X,y=Y;}\n    inline bool operator<(const Point &O)const{return dcmp(x-O.x)?x<O.x:y<O.y;}\n};\ninline LD Dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ninline LD Cro(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\ninline Vector operator+(Vector a,Vector b){return Vector(a.x+b.x,a.y+b.y);}\ninline Vector operator-(Vector a,Vector b){return Vector(a.x-b.x,a.y-b.y);}\ninline Vector operator*(Vector a,LD b){return Vector(a.x*b,a.y*b);}\ninline int pan_PL(Point p,Point a,Point b){//\u3010\u5224\u65ad\u70b9P\u662f\u5426\u5728\u76f4\u7ebfAB\u4e0a\u3011\n    return !dcmp(Cro(p-a,p-b))&&dcmp(Dot(p-a,p-b))<0;\n}\ninline bool cmp1(Vector a,Vector b){return a.x==b.x?a.y<b.y:a.x<b.x;};//\u6309\u5750\u6807\u6392\u5e8f\ninline int ConvexHull(Point *P,Re n,Point *cp){//\u3010Graham\u626b\u63cf\u6cd5\u3011\u6c42\u51f8\u5305\n    sort(P+1,P+n+1,cmp1);\n    Re t=0;\n    for(Re i=1;i<=n;++i){//\u4e0b\u51f8\u5305\n        while(t>1&&dcmp(Cro(cp[t]-cp[t-1],P[i]-cp[t-1]))<=0)--t;\n        cp[++t]=P[i];\n    }\n    Re St=t;\n    for(Re i=n-1;i>=1;--i){//\u4e0a\u51f8\u5305\n        while(t>St&&dcmp(Cro(cp[t]-cp[t-1],P[i]-cp[t-1]))<=0)--t;\n        cp[++t]=P[i];\n    }\n    return --t;//\u8981\u51cf\u4e00\n}\ninline int PIP(Point *P,Re n,Point a){//\u3010\u4e8c\u5206\u6cd5\u3011\u5224\u65ad\u70b9A\u662f\u5426\u5728\u51f8\u591a\u8fb9\u5f62Poly\u4ee5\u5185\n    //\u70b9\u6309\u9006\u65f6\u9488\u7ed9\u51fa\n    if(dcmp(Cro(a-P[1],P[2]-P[1]))>0||dcmp(Cro(P[n]-P[1],a-P[1]))>0)return 0;//\u5728P[1_2]\u6216P[1_n]\u5916\n    if(pan_PL(a,P[1],P[2])||pan_PL(a,P[1],P[n]))return 1;//\u5728P[1_2]\u6216P[1_n]\u4e0a\n    Re l=2,r=n-1;\n    while(l<r){//\u4e8c\u5206\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6epos\u4f7f\u5f97P[1]_A\u5728P[1_pos],P[1_(pos+1)]\u4e4b\u95f4\n        Re mid=l+r+1>>1;\n        if(dcmp(Cro(a-P[1],P[mid]-P[1]))>0)r=mid-1;\n        else l=mid;\n    }\n    return dcmp(Cro(a-P[r],P[r+1]-P[r]))<=0;\n}\nVector V1[N*3],V2[N*3];\ninline int Mincowski(Point *P1,Re n,Point *P2,Re m,Point *P){//\u3010\u95f5\u53ef\u592b\u65af\u57fa\u548c\u3011\u6c42\u4e24\u4e2a\u51f8\u5305{P1},{P2}\u7684\u5411\u91cf\u96c6\u5408{V}={P1+P2}\u6784\u6210\u7684\u51f8\u5305\n    for(Re i=1;i<=n;++i)V1[i]=P1[i<n?i+1:1]-P1[i];\n    for(Re i=1;i<=m;++i)V2[i]=P2[i<m?i+1:1]-P2[i];\n    Re t=0,i=1,j=1;P[++t]=P1[1]+P2[1];\n    while(i<=n&&j<=m)++t,P[t]=P[t-1]+(dcmp(Cro(V1[i],V2[j]))>0?V1[i++]:V2[j++]);\n    while(i<=n)++t,P[t]=P[t-1]+V1[i++];\n    while(j<=m)++t,P[t]=P[t-1]+V2[j++];\n    return t;\n}\nint n,T,n1,n2,n3;Point Q,P[N*3],cp[N*3],P1[N],P2[N],P3[N];\nint main(){\n//    freopen(\"123.txt\",\"r\",stdin);\n    in(n1);for(Re i=1;i<=n1;++i)P1[i].In();n1=ConvexHull(P1,n1,cp);for(Re i=1;i<=n1;++i)P1[i]=cp[i];\n    in(n2);for(Re i=1;i<=n2;++i)P2[i].In();n2=ConvexHull(P2,n2,cp);for(Re i=1;i<=n2;++i)P2[i]=cp[i];\n    in(n3);for(Re i=1;i<=n3;++i)P3[i].In();n3=ConvexHull(P3,n3,cp);for(Re i=1;i<=n3;++i)P3[i]=cp[i];\n    n=Mincowski(P1,n1,P2,n2,P),n=Mincowski(P,n,P3,n3,cp),n=ConvexHull(cp,n,P),in(T);//\u8fd9\u91cc\u5bf9P\u6c42\u4e00\u6b21\u51f8\u5305\u6216\u8005\u5206\u5f00\u6c42\u4e24\u6b21\u51f8\u5305\u6548\u679c\u90fd\u662f\u4e00\u6837\u7684\n//    n=Mincowski(P1,n1,P2,n2,cp),n=ConvexHull(cp,n,P);\n//    n=Mincowski(P,n,P3,n3,cp),n=ConvexHull(cp,n,P),in(T);\n    while(T--)Q.In(),puts(PIP(P,n,Q*3.0)?\"YES\":\"NO\");\n}\n```\n",
        "postTime": 1591016490,
        "uid": 110985,
        "name": "\u8fb0\u661f\u51cc",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF87E \u3010Mogohu-Rea Idol\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5145\u5206\u4f53\u73b0\u4e86\u8ba1\u7b97\u51e0\u4f55\u88f8\u9898\u7684\u5171\u540c\u7279\u5f81\uff1a\u601d\u7ef4\u7b80\u5355\u800c\u7ec6\u8282\u591a\n\n\u9898\u89e3\u662f\u771f\u7684\u7b80\u5355\u3002\u3002\u3002\u5c31\u662f\u5bf9\u4e09\u4e2a\u51f8\u5305\u6c42```Minkowski sum```\uff0c\u7136\u540e\u5224\u65ad\u70b9\u662f\u5426\u5728\u51f8\u591a\u8fb9\u5f62\u5185\u5373\u53ef\u3002\u3002\u3002\n\n\u8fd9\u9898\u7adf\u7136\u8fd8\u4fdd\u8bc1\u4e00\u4e2a\u591a\u8fb9\u5f62\u5185\u4e09\u70b9\u4e0d\u5171\u7ebf\u3002\u3002\u3002\u4e8e\u662f\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u4e00\u4e2a\u591a\u8fb9\u5f62\u8fb9\u4e0a\u53d8\u5f97\u66f4\u7b80\u5355\u3002\u3002\u3002\u4e00\u5f00\u59cb\u7adf\u7136\u6ca1\u6709\u770b\u5230\u8fd9\u4e2a\u6761\u4ef6\uff0c\u5728\u90a3\u91cc\u8fdb\u884c\u68c0\u67e5\u3002\u3002\u3002\n\n\u6700\u540e\uff0c\u5728\u4ee3\u7801\u524d\u7565\u5fae\u89e3\u91ca\u4e00\u4e0b```Minkowski sum```,\u5176\u5b9e\u5c31\u662f$A+B=\\{a+b|a\u2208A,b\u2208B\\}$\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct hull {\n\tmap <int, int> points;\n\tlong long area;\n\tinline hull () {\n\t\tpoints.clear ();\n\t\tarea = 0;\n\t}\n\tinline map <int, int> :: iterator prev (map <int, int> :: iterator it) {\n\t\treturn it == points.begin () ? it : --it;\n\t}\n\tinline map <int, int> :: iterator next (map <int, int> :: iterator it) {\n\t\treturn it == points.end () ? it : ++it;\n\t}\n\tinline long long traparea (long long x1, long long y1, long long x2, long long y2) {\n\t\treturn (x2 - x1) * (y1 + y2);\n\t}\n\tinline long long triarea (long long x1, long long y1, long long x2, long long y2, long long x3, long long y3) {\n\t\treturn traparea (x1, y1, x2, y2) + traparea (x2, y2, x3, y3) + traparea (x3, y3, x1, y1);\n\t}\n\tinline long long traparea (map <int, int> :: iterator a, map <int, int> :: iterator b) {\n\t\treturn traparea (a->first, a->second, b->first, b->second);\n\t}\n\tinline long long triarea (map <int, int> :: iterator it) {\n\t\tlong long sum = 0;\n\t\tif (it != points.begin ()) sum += traparea (prev (it), it);\n\t\tif (next (it) != points.end ()) sum += traparea (it, next (it));\n\t\tif (it != points.begin () && next (it) != points.end ()) sum += traparea (next (it), prev (it));\n\t\treturn sum;\n\t}\n\tinline bool bad(map <int, int> :: iterator it) {\n\t\tif (points.size () < 3 || it == points.begin () || next (it) == points.end ())\n\t\t\treturn false;\n\t\treturn triarea (it) <= 0;\n\t}\n\tinline void insert (int x, int y) {\n\t\tif (points.find (x) != points.end ()) {\n\t\t\tif (y <= points [x])\n\t\t\t\treturn;\n\t\t\tarea -= triarea (points.lower_bound (x));\n\t\t\tpoints.erase (x);\n\t\t}\n\t\tmap <int, int> :: iterator it = points.insert (make_pair (x, y)).first;\n\t\tif (bad (it)) {\n\t\t\tpoints.erase (it);\n\t\t\treturn;\n\t\t}\n\t\tarea += triarea (it);\n\t\twhile (bad (prev (it))) {\n\t\t\tarea -= triarea (prev (it));\n\t\t\tpoints.erase (prev (it));\n\t\t}\n\t\twhile (bad (next (it))) {\n\t\t\tarea -= triarea (next (it));\n\t\t\tpoints.erase (next (it));\n\t\t}\n\t}\n\tinline bool contains (int x, int y) {\n\t\tmap <int, int> :: iterator first = points.begin (), last = prev (points.end ());\n\t\tif (x < first->first || x > last->first)\n\t\t\treturn false;\n\t\tif (x == first->first)\n\t\t\treturn y <= first->second;\n\t\tif (x == last->first)\n\t\t\treturn y <= last->second;\n\t\tmap <int, int> :: iterator it = points.lower_bound (x), p = prev (it);\n\t\tint x1 = p->first, y1 = p->second, x2 = it->first, y2 = it->second;\n\t\treturn (long long) (y - y1) * (x2 - x1) <= (long long) (x - x1) * (y2 - y1);\n\t}\n};\n\ntypedef complex <int> point;\ntypedef vector <point> polygon;\n\ntemplate <typename T> inline pair <T, T> to_pair (complex <T> x) {\n\treturn make_pair (x.real (), x.imag ());\n}\n\ninline long long cross (point a, point b) {\n\treturn (long long) a.real () * b.imag () - (long long) b.real () * a.imag ();\n}\n\npolygon minkowski_sum (polygon a, polygon b) {\n\tint n = a.size (), m = b.size ();\n\tint aind = -1, bind = -1;\n\tfor (int i = 0; i < n; i++)\n\t\tif (aind == -1 || to_pair (a [i]) < to_pair (a [aind]))\n\t\t\taind = i;\n\tfor (int i = 0; i < m; i++)\n\t\tif (bind == -1 || to_pair (b [i]) < to_pair (b [bind]))\n\t\t\tbind = i;\n\tpolygon sum;\n\tsum.reserve (n + m);\n\tbool alooped = false, blooped = false;\n\tint i = aind, j = bind;\n\twhile (!(i == aind && alooped) || !(j == bind && blooped)) {\n\t\tpoint pa = a [(i + 1) % n] - a [i], pb = b [(j + 1) % m] - b [j];\n\t\tif (!(i == aind && alooped) && ((j == bind && blooped) || cross (pa, pb) > 0)) {\n\t\t\tsum.push_back (a [i] + b [j] + pa);\n\t\t\ti = (i + 1) % n;\n\t\t\talooped |= i == 0;\n\t\t} else {\n\t\t\tsum.push_back (a [i] + b [j] + pb);\n\t\t\tj = (j + 1) % m;\n\t\t\tblooped |= j == 0;\n\t\t}\n\t}\n\treturn sum;\n}\n\npolygon A, B, C;\n\nvoid input (polygon &P) {\n\tint n;\n\tscanf (\"%d\", &n);\n\tfor (int x, y, i = 0; i < n; i++) {\n\t\tscanf (\"%d %d\", &x, &y);\n\t\tP.push_back (point (x, y));\n\t}\n}\n\nhull upper, lower;\n\nint main () {\n\tinput (A);\n\tinput (B);\n\tinput (C);\n\tpolygon X = minkowski_sum (A, B);\n\tX = minkowski_sum (X, C);\n\tfor (int i = 0; i < (int) X.size (); i++) {\n\t\tupper.insert (X [i].real (), X [i].imag ());\n\t\tlower.insert (X [i].real (), -X [i].imag ());\n\t}\n\tint M;\n\tscanf (\"%d\", &M);\n\tfor (int x, y, i = 0; i < M; i++) {\n\t\tscanf (\"%d %d\", &x, &y);\n\t\tputs (upper.contains (3 * x, 3 * y) && lower.contains (3 * x, -3 * y) ? \"YES\" : \"NO\");\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1544703742,
        "uid": 119553,
        "name": "rEdWhitE_uMbrElla",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF87E \u3010Mogohu-Rea Idol\u3011"
    }
]