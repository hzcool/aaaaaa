[
    {
        "content": "\u4ea4\u4e92\u9898\uff1f\u9650\u5236\u8fd9\u4e48\u677e\uff1f\u4e71\u641e\uff1f\n\n\u5148\u8bb2\u4e00\u4e0b\u505a\u6cd5\uff0c\u7136\u540e\u7ed9\u8bc1\u660e\u3002\n\n\u679a\u4e3e\u6bcf\u4e00\u4e2a\u8d28\u6570\uff0c\u5e42\u6b21\u521d\u59cb\u4e3a $1$ \uff0c\u52a0\u5165\u4f18\u5148\u961f\u5217\uff0c\u4ee5\u5e42\u6b21\u964d\u5e8f\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u8d28\u6570\u5927\u5c0f\u5347\u5e8f\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u6bcf\u6b21\u4ece\u961f\u9996\u53d6\u51fa\uff0c\u8be2\u95ee\u8fd9\u4e9b\u5e42\u6b21\u7684\u4e58\u79ef\uff0c\u8d8a\u5927\u8d8a\u597d\uff0c\u5982\u679c\u5305\u542b\u8fd9\u4e2a\u5e42\u6b21\u5219\u4ee4\u8fd9\u4e2a\u5e42\u6b21 $+1$ \u91cd\u65b0\u52a0\u5165\u961f\u5217\u5426\u5219\u4e0d\u52a0\u5165\uff0c\u6267\u884c $22$ \u6b21\uff0c\u6700\u540e\u8f93\u51fa\u7b54\u6848 $\\times 2$\u3002\n\n\u8bc1\u660e\uff1f\n\n$1.$\u64cd\u4f5c\u5728 $22$ \u4ee5\u5185\u3002\n\n\u8bf4\u5f97\u5f88\u6e05\u695a\uff0c\u6267\u884c $22$ \u6b21\u3002\n\n$2.$\u65f6\u95f4\u590d\u6742\u5ea6\uff1f\n\n$22$ \u6b21\uff0c\u6bcf\u6b21\u9009\u5341\u51e0\u4e2a\uff0c\u518d\u52a0\u4e0a\u6700\u521d\u52a0\u51e0\u4e07\u4e2a\u5230\u4f18\u5148\u961f\u5217\uff0c\u4f46\u53ea\u6709 $100$ \u7ec4\u6570\u636e\uff0c\u6ca1\u95ee\u9898\u3002\n\n$3.$\u6b63\u786e\u6027\uff1f\n\n\u9996\u5148\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u80fd\u7528\u5230\u7684\u6700\u5927\u8d28\u6570\u5927\u6982\u5728 $900$ \u5de6\u53f3\uff08\u4e0d\u4fe1\u4f60\u81ea\u5df1\u8bd5\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u9ed8\u8ba4 $850$ \u4ee5\u4e0b\u7684\u8d28\u56e0\u5b50\u90fd\u641e\u5b9a\u4e86\uff08\u8fd9\u4e2a\u7edd\u5bf9\u4e0d\u8fc7\u5206\uff09\u3002\n\n\u90a3\u4e48\u5269\u4e0b\u7684\u60c5\u51b5\uff1a\n\n$(1)~~1$\uff0c\u6700\u7ec8\u7b54\u6848\u53ea\u591a\u4e58\u4e86 $2$\uff0c\u6ca1\u6709\u95ee\u9898\u3002\n\n$(2)~$ \u8d28\u6570\uff0c\u6700\u7ec8\u7b54\u6848\u4e58\u4e86 $2$\uff0c\u521a\u597d\u3002\n\n$(3)~$ \u8d28\u6570\u7684\u5e73\u65b9\uff0c\u7b54\u6848\u5e94\u8be5\u4e58 $3$\uff0c\u4f46\u53ea\u4e58\u4e86 $2$\uff0c\u5dee\u8ddd\u6ca1\u95ee\u9898\u3002\n\n$(4)~$ \u8d28\u6570\u4e58\u8d28\u6570\uff0c\u5e94\u8be5\u4e58 $4$\uff0c\u5c11\u4e58\u4e86 $2$\uff0c\u6ca1\u95ee\u9898\u3002\n\n$(5)~$ \u4e09\u4e2a\u8d28\u6570\u76f8\u4e58\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u662f\u4e09\u4e2a $850$ \u4ee5\u4e0a\u8d28\u6570\u76f8\u4e58\u90a3\u4e0d\u53ef\u80fd\u6709\u5176\u4ed6\u8d28\u56e0\u5b50\uff08$\\times 2$ \u5c31\u5927\u4e8e $10^9$ \u4e86\uff09\uff0c\u90a3\u4e48\u7b54\u6848\u81f3\u591a\u4e3a $8$\uff0c\u7136\u800c\u6211\u4eec\u8f93\u51fa\u7684 $2$ \u4e5f\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u4e4b\u5185\u3002\n\n\u6240\u4ee5\u8fd9\u6837\u662f\u6b63\u786e\u7684\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define re register\ninline int read() {\n\tre int t=0;\n\tre char v=getchar();\n\twhile(v<'0')v=getchar();\n\twhile(v>='0')t=(t<<3)+(t<<1)+v-48,v=getchar();\n\treturn t;\n}\nint n,m,t,ans,p[40002],tot,a[40002];\nbool ip[40002];\nlong long ss;\nstruct node{\n\tint x,y,z;\n\tbool operator <(const node a)const{\n\t\treturn a.y==y?a.x<x:a.y>y;\n\t}\n}b[40002];\npriority_queue<node>q;\ninline int gcd(re int x,re int y){\n\treturn y?gcd(y,x%y):x;\n}\nsigned main() {\n\tt=read();\n\tn=4e4;\n\tfor (int i=2; i<=n; ++i) {\n\t\tif (!ip[i])p[++tot]=i;\n\t\tfor(int j=1; j<=tot&&i*p[j]<=n; ++j) {\n\t\t\tip[i*p[j]]=1;\n\t\t\tif(i/p[j]*p[j]==i)break;\n\t\t}\n\t}\n\twhile(t--){//re int kkk=read();\n\t\twhile(!q.empty())q.pop();ans=1;\n\t\tfor(re int i=1;i<=tot;++i)q.push((node){p[i],1,p[i]});\n\t\tfor(re int jj=1;jj<=22;++jj){\n\t\t\tre int x=1,cnt=0;\n\t\t\twhile(!q.empty()){\n\t\t\t\tnode tmp=q.top();q.pop();\n\t\t\t\tif(1.0*x*tmp.x>1e18){q.push(tmp);break;}\n\t\t\t\tb[++cnt]=tmp,x*=tmp.x;\n\t\t\t}\n\t\t\tprintf(\"? %lld\\n\",x);\n\t\t\tfflush(stdout);\n\t\t\tss=read();\n\t\t\tfor(re int i=1;i<=cnt;++i){\n\t\t\t\tif(ss%b[i].x==0){\n\t\t\t\t\tans/=b[i].y;\n\t\t\t\t\t++b[i].y;\n\t\t\t\t\tans*=b[i].y;\n\t\t\t\t\tb[i].x*=b[i].z;\n\t\t\t\t\tq.push(b[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"! %lld\\n\",ans*2);\n\t\tfflush(stdout);\n\t}\n}\n```\n",
        "postTime": 1589685839,
        "uid": 41476,
        "name": "gyh20",
        "ccfLevel": 10,
        "title": "F - Guess Divisors Count"
    },
    {
        "content": "[\u5728\u6211\u7684\u535a\u5ba2\u4e2d\u67e5\u770b](https://158593.blog.luogu.org/solution-cf1355f)\n\n# \u9898\u610f\n\u8981\u6c42\u731c\u4e00\u4e2a$1$\u5230$10^9$\u4e4b\u95f4\u7684\u4e00\u4e2a\u6570$X$\u3002\n\n\u4f60\u53ef\u4ee5\u8be2\u95ee\u4e00\u4e2a\u6570$Q$\uff08$1\\le Q\\le10^{18}$\uff09\uff0c\u7136\u540e\u8bfb\u53d6\u5230$\\gcd(X,Q)$\u3002\n\n\u5728\u4e0d\u591a\u4e8e$22$\u6b21\u731c\u6d4b\uff0c\u5f97\u5230$X$\u7684\u8d28\u56e0\u6570\u4e2a\u6570\u3002\n\n\u6ce8\u610f\uff1a\u8bbe\u4f60\u7684\u7b54\u6848\u4e3a$d$\uff0c\u6807\u51c6\u7b54\u6848\u4e3a$ans$\uff0c\u53ea\u8981\u6ee1\u8db3$|ans-d|\\le7$\u6216$\\frac12\\le\\frac{ans}{d}\\le2$\u5373\u7b97\u6b63\u786e\u3002\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u8be2\u95ee\uff1a\"? Q\"\uff1b\u731c\u6d4b\uff1a\"! d\"\u3002\uff08\u6ce8\u610f\u6bcf\u6b21\u8f93\u51fa\u540e\u8981\u5237\u65b0\u7f13\u51b2\u533a\uff09\u3002\n\n# \u4e2a\u4eba\u7684\u505a\u6cd5\n\u65e2\u7136\u6bcf\u6b21\u8fd4\u56de$\\gcd$\uff0c\u53ef\u4ee5\u5229\u7528$\\gcd$\u6765\u5f97\u5230\u539f\u6765\u7684\u6570\u7684\u56e0\u6570\u3002\n\n\u6839\u636e**\u552f\u4e00\u5206\u89e3\u5b9a\u7406**\uff0c\u53ef\u8bbe$X=\\prod_{i=1}^{n}p_i^{a_i}$\uff0c\u5219\u56e0\u6570\u4e2a\u6570\u4e3a$\\prod_{i=1}^n(a_i+1)$\u3002\n\n## \u65b9\u6cd5\u4e00\n\u6bcf\u6b21\u8be2\u95ee\u95ee$p_i^{a_i}$\uff0c\u4e14$p_i^{a_i+1}>10^9$\u3002\n\ne.g.\n```\n? 536870912\t\t\t//=2^29\uff08\u6ce8\u610f\u8fd9\u91cc\u7684\"^\"\u662f\u4e58\u65b9\u7684\u610f\u601d\uff09\n? 387420489\t\t\t//=3^18\n? 244140625\t\t\t//=5^12\n```\n\u8981\u5728$22$\u6b21\u4ee5\u5185\uff0c\u5c31\u53ea\u80fd\u95ee\u5230$79$\uff0c\u4e0d\u53ef\u53d6\u3002\n\n\u56e0\u4e3a$Q\\le10^{18}$\uff0c\u53ef\u4ee5\u95ee$2^{29}\\times3^{18}$\uff0c\u4f46\u8fd9\u6837\u4e5f\u53ea\u80fd\u95ee\u5230$139$\uff0c\u65e0\u6cd5\u5224\u522b\u3002\n## \u65b9\u6cd5\u4e8c\n\u201c\u65b9\u6cd5\u4e00\u201d\u4e2d\u7684\u5927\u91cf\u8be2\u95ee\u90fd\u4f1a\u8fd4\u56de$1$\uff0c\u8003\u8651\u4f18\u5316\u8fd9\u4e2a\u65b9\u6cd5\u3002\n\n\u6bcf\u6b21\u8be2\u95ee$\\prod_{i=last+1}^k{p_i}$\uff0c\u5176\u4e2d$last$\u6307\u4e0a\u6b21\u8be2\u95ee\u7684$k$\uff0c\u800c\u4e14$\\prod_{i=last+1}^{k+1}{p_i}>10^{18}$\uff0c\u4f8b\u5982\u7b2c\u4e00\u6b21\u8be2\u95ee\u4e3a\n\n$2\\times3\\times5\\times7\\times11\\times...\\times47=614889782588491410$\n\n\u5982\u679c\u7b54\u6848\u67092\u8fd9\u4e2a\u56e0\u6570\uff0c\u95ee$2^{29}$\uff08\u4e5f\u53ef\u4ee5\u4e24\u4e2a\u56e0\u6570\u4e00\u8d77\u95ee\uff09\uff0c\u8fd4\u56de$2^w$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u5c31\u6709$2$\u8fd9\u4e2a\u56e0\u6570\uff0c\u4e14\u6b21\u6570\u4e3a$w$\uff08\u4ee4$ans$\u4e3a\u5df2\u77e5\u7684\u7ea6\u6570\u4e2a\u6570\uff0c\u4f8b\u5982\u77e5\u9053$2^{19}$\u540e\uff0c$ans=19+1=20$\uff09\u3002\uff08\u8fd9\u6837\u7684\u8be2\u95ee\u4e0d\u4f1a\u8d85\u8fc7$9$\u6b21\uff0c\u800c\u4e14\u8d8a\u5f80\u540e\u6b21\u6570\u8d8a\u5c11\uff09\n\n\u7136\u540e\u53ef\u4ee5\u8be2\u95ee$53\\times59\\times...\\times83$\uff0c\u6309\u7167\u7c7b\u4f3c\u7684\u65b9\u6cd5\u3002\uff08\u6b64\u6b21\u8be2\u95ee$p_i^{a_i}$\u6700\u591a\u53ea\u8981$5$\u6b21\uff0c\u56e0\u4e3a$53\\times59\\times61\\times67\\times71\\times73>10^9$\uff09\n\n\u4e00\u4e9b\u89e3\u91ca\uff1a\n\n1. \u5f53\u8be2\u95ee\u5230\u4e00\u4e2a\u6570$X$\u540e\uff08\u4f8b\u5982\u7b2c\u4e00\u6b21\u540e\u4e3a$47$\uff09\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a\u8d28\u6570\u4e3a$p'$\uff0c\u90a3\u4e48\u82e5**\u5269\u4e0b\u7684\u6570**\uff08\u6307$10^9$\u9664\u4ee5\u5df2\u77e5\u7684\u8d28\u56e0\u6570\u53ca\u5176\u6b21\u6570\uff0c\u4f8b\u5982\u5df2\u77e5$2^2$\uff0c\u90a3\u4e48\u201c\u6700\u5927\u7684\u6570\u201d\u5373$2.5\\times10^8$\uff09$X'$\u6ee1\u8db3$X'<p'^3$\uff0c\u5373\u53ef\u76f4\u63a5\u8f93\u51fa$2~ans$\uff0c\u56e0\u4e3a$X'$\u4e00\u5b9a\u662f\u7531\u5927\u4e8e\u7b49\u4e8e$p'$\u7684\u4e24\u4e2a\u8d28\u6570\u76f8\u4e58\uff08**\u6216\u5355\u72ec\u4e00\u4e2a\u8d28\u6570\uff0c\u6216\u8005$X'=1$**\uff09\u5f97\u5230\uff0c\u7b54\u6848\u4e3a$ans$\u6216$2~ans$\u6216$4~ans$\uff0c\u8f93\u51fa$2~ans$\u5373\u53ef\u3002\n2. \u679a\u4e3e\u5230$631$\u5269\u4e0b\u7684\u6570\u5927\u4e8e$p'^3$\u65f6\uff0c\u5206\u4e24\u7ec4\u60c5\u51b5\uff1a\u5982\u679c$ans=1$\u6216$ans=2$\uff0c\u5269\u4e0b\u7684\u6570\u6700\u591a\u7531$3$\u4e2a\u8d28\u6570\u76f8\u4e58\uff0c\u56e0\u6570\u4e2a\u6570\u6700\u591a\u4e3a$2\\times8=16$\uff0c\u6700\u5c11\u4e3a$1$\uff0c\u8f93\u51fa8\u5373\u53ef\uff1b\u5426\u5219\u5c31\u8f93\u51fa$2~ans$\uff0c\u56e0\u4e3a\u5f53$ans>2$\u65f6\uff0c\u5269\u4e0b\u7684\u6570\u6700\u591a\u4e3a$2\\times10^8$\uff0c\u800c$631^3=\u202d251239591\u202c$\uff0c\u6240\u4ee5\u6700\u591a\u662f\u7531$2$\u4e2a\u8d28\u6570\u76f8\u4e58\u7684\uff0c1. \u4e2d\u5df2\u89e3\u91ca\u3002\n\n## Code\n\n```cpp\n#include<iostream>\n#define ll long long\nusing namespace std;\nconst ll q[22]={2ll*3*5*7*11*13*17*19*23*29*31*37*41*43*47,//\u6bcf\u6b21\u8be2\u95ee \n\t\t\t\t53ll*59*61*63*67*71*73*79*83,\n\t\t\t\t89ll*97*101*103*107*109*113*127,\n\t\t\t\t131ll*137*139*149*151*157*163,\n\t\t\t\t167ll*173*179*181*191*193*197,\n\t\t\t\t199ll*211*223*227*229*233*239,\n\t\t\t\t241ll*251*257*263*269*271*277,\n\t\t\t\t281ll*283*293*307*311*313*317,\n\t\t\t\t331ll*337*347*349*353*359*367,\n\t\t\t\t373ll*379*383*389*397*401,\n\t\t\t\t409ll*419*421*431*433*439,\n\t\t\t\t443ll*449*457*461*463*467,\n\t\t\t\t479ll*487*491*499*503*509,\n\t\t\t\t521ll*523*541*547*557*563,\n\t\t\t\t569ll*571*577*587*593*599,\n\t\t\t\t601ll*607*613*617*619*631};\nconst ll cnt[22]={53,89,131,167,199,//\u6bcf\u6b21\u8be2\u95ee\u6700\u5927\u7684\u8d28\u6570\u7684\u540e\u9762\u4e00\u4e2a \n\t\t\t\t241,281,331,373,409,\n\t\t\t\t443,479,521,569,601,\n\t\t\t\t641};\nconst ll prime[205]={2,3,5,7,11,13,17,19,23,29,//\u8d28\u6570\u8868 \n\t\t\t\t\t31,37,41,43,47,53,59,61,67,71,\n\t\t\t\t73,79,83,89,97,101,103,107,109,113,\n\t\t\t\t127,131,137,139,149,151,157,163,167,173,\n\t\t\t\t179,181,191,193,197,199,211,223,227,229,\n\t\t\t\t233,239,241,251,257,263,269,271,277,281,\n\t\t\t\t283,293,307,311,313,317,331,337,347,349,\n\t\t\t\t353,359,367,373,379,383,389,397,401,409,\n\t\t\t\t419,421,431,433,439,443,449,457,461,463,\n\t\t\t\t467,479,487,491,499,503,509,521,523,541,\n\t\t\t\t547,557,563,569,571,577,587,593,599,601,\n\t\t\t\t607,613,617,619,631,641,643,647,653,659};\nint main(){\n\tll t;cin>>t;\n\tfor(ll ans,now,mx;t;--t){\n\t\tans=1,now=0,mx=1000000000;\n\t\tfor(ll i=0,gcd;i<16;++i){\n\t\t\tcout<<\"? \"<<q[i]<<endl,cin>>gcd;//\u8be2\u95ee \n\t\t\tfor(ll g;prime[now]<cnt[i];++now)\n\t\t\t\tif(gcd%prime[now]==0){\n\t\t\t\t\tll num=1,que=1;cerr<<prime[now]<<endl;\n\t\t\t\t\twhile(que<mx)que*=prime[now];//\u8ba1\u7b97\u5b58\u5728\u7684\u8d28\u56e0\u6570\u7684\u6b21\u6570\uff08e.g. 2^29\uff09 \n\t\t\t\t\tcout<<\"? \"<<que<<endl,cin>>g,mx/=g;//\u6b64\u5904\u662f\u5927\u4e8e1e9\u7684\u6700\u5c0f\u6570 \n\t\t\t\t\twhile(g%prime[now]==0)++num,g/=prime[now];//\u5f97\u5230\u6b21\u6570 \n\t\t\t\t\tcerr<<num<<endl;//\u6ce8\uff1acerr\u4f1a\u8f93\u51fa\u5230\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u6d41\uff0c\n\t\t\t\t\t//\u4e0d\u4f1a\u88ab\u4ea4\u4e92\u7a0b\u5e8f\u8bfb\u53d6\uff0c\u4f46\u662f\u5728\u672c\u5730\u8fd0\u884c\u65f6\u53ef\u4ee5\u770b\u89c1 \n\t\t\t\t\tans*=num;\n\t\t\t\t}\n\t\t\tif(mx<cnt[i]*cnt[i]*cnt[i]){//X'>p'^3 \n\t\t\t\tcout<<\"! \"<<ans*2<<endl;\n\t\t\t\tgoto N;//\u8df3\u8fc7\u8df3\u8fc7\u540e\u9762\u7684\u7279\u5224 \n\t\t\t}\n\t\t}\n\t\tif(ans==1 || ans==2)cout<<\"! 8\"<<endl;//\u7edd\u5bf9\u503c\u4e4b\u5dee\u5c0f\u4e8e\u7b49\u4e8e7 \n\t\telse cout<<\"! \"<<ans*2<<endl;N:;//\u7b54\u6848\u5728\u6807\u51c6\u7b54\u6848\u7684\u4e8c\u5206\u4e4b\u4e00\u5230\u4e24\u500d\u4e4b\u95f4 \n\t}\n}\n```\n\n**\u867d\u7136\u4f60\u7528\u8fd9\u4e2a\u4ee3\u7801\u53ef\u4ee5AC\uff0c\u4f46\u8bf7\u4e0d\u8981\u6284\uff01**",
        "postTime": 1589844695,
        "uid": 158593,
        "name": "\u590f\u5b50\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1355F \u3010Guess Divisors Count\u3011"
    },
    {
        "content": "\u573a\u5916\u9009\u624b\u3002\u8bf4\u4e00\u8bf4\u81ea\u5df1\u7684\u4e71\u641e\u505a\u6cd5\u3002\n\n\u4e00\u4e2a\u6bd4\u8f83\u76f4\u63a5\u7684\u66b4\u529b\u662f\u8003\u8651\u5bf9\u6bcf\u4e2a $\\leq \\sqrt{10^9}$ \u7684\u7d20\u6570\u7684\u6700\u5927\u5e42\u8fdb\u884c check\uff0c\u7136\u540e\u4e8c\u5206\u51fa\u6307\u6570\u3002\u4f46\u662f\u8fd9\u6837\u505a\u9700\u8981 $3300+$ \u6b21\u7684\u8be2\u95ee\u2026\u7136\u540e\u8003\u8651\u5982\u4f55\u628a\u72b6\u6001\u538b\u4e00\u538b\u3002\u53d1\u73b0\u53ea\u9700\u8981\u6700\u591a $10^9$ \uff0c\u4f46\u662f\u53ef\u4ee5\u8be2\u95ee $10^{18}$\uff0c\u4e8e\u662f\u53ef\u4ee5\u628a\u76f8\u90bb\u72b6\u6001\u538b\u4e00\u538b\u3002~~\u7136\u540e\u53d1\u73b0\u8fd8\u662f WA on 5~~ .\n\n\u7136\u540e\u53c8\u6709\u4e00\u4e2a\u66f4\u538b\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u8003\u8651\u6bcf\u6b21\u9009\u53d6\u76f8\u90bb\u51e0\u4e2a\u8d28\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570\uff0c\u7136\u540e\u8fd9\u6837\u7b5b\u8fc7\u4e00\u904d\u5c31\u53ef\u4ee5\u77e5\u9053\u6709\u54ea\u4e9b\u6570\u8981\u53bb\u7b5b\u3002\u7136\u540e\u518d\u628a\u8fd9\u91cc\u9762\u7684\u76f8\u90bb\u7ec4\u5408\u2026\u5927\u6982\u5c31\u662f\u5728\u4e0a\u9762\u4e00\u4e2a\u65b9\u6cd5\u5916\u9762\u5957\u4e00\u4e2a\u5206\u7ec4\u3002\u4f46\u8fd9\u6837\u9700\u8981\u8c03\u6574\u5206\u754c\u7ebf\u3002\u7136\u540e\u2026\u7136\u540e\u5c31\u8fc7\u4e86 XD\n\n\n```cpp\n#include <cmath>\n#include <bitset>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std ;\n\ntypedef long long ll ;\n\nconst int Mp = 4000 ;\n\nconst int Mx = 1000000000 ;\n\nint T, used ;\nint pos[Mp], res ;\n\ntemplate <typename T>\nvoid debug(T x, char c = '\\n'){ cerr << x << c ; }\n\ntemplate <typename T>\nvoid debug(T *const tp, int minn, int maxn, char v = ' ', char c = '\\n'){\n    for (int i = minn ; i <= maxn ; ++ i) debug(tp[i], v) ;  cerr << c ;\n}\n\nnamespace Euler{\n\t#define MAXN 51000\n\tbitset <MAXN> vis ;\n\tint pr[MAXN], A, i, j, cnt ;\n\tvoid Ego(){\n        int N = sqrt(Mx) ;\n\t\tvis[1] = vis[0] = 1 ;\n\t\tfor (i = 2 ; i <= N ; ++ i){\n\t\t\tif (!vis[i]) pr[++ cnt] = i ;\n\t\t\tfor (j = 1 ; j <= cnt ; ++ j){\n\t\t\t\tif (i * pr[j] > N) break ;\n\t\t\t\tvis[i * pr[j]] = 1 ;\n\t\t\t\tif (!(i % pr[j])) break ;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint tp ;\nint ng ;\nint tot ;\nll gp[Mp] ;\nint stk[Mp] ;\nint lrg[Mp] ;\nint rrg[Mp] ;\n\nint main(){\n    cin >> T ;\n//    for (int i = 1 ; i <= 44 ; ++ i)\n//        cout << num[i] << '\\n' ;\n    Euler :: Ego() ;\n    lrg[tot = 1] = 1 ;\n    using namespace Euler ;\n    int x, y, z, q1, q2 ; ll o = 1 ;\n    for (int i = 1 ; i <= cnt ; ++ i)\n        pos[i] = log(Mx) / log(pr[i]) ;\n    for (int i = 1 ; i <= cnt ; ++ i){\n        if (1.0 * o * pr[i] > 1e18)\n            gp[tot] = o, rrg[tot] = i - 1, lrg[++ tot] = i, o = 1 ;\n        o *= pr[i] ;\n    }\n//    debug(gp, 1, tot) ;\n//    debug(lrg, 1, tot) ;\n//    debug(rrg, 1, tot) ;\n    while (T --){\n        ng = 1 ;\n        res = 1 ;\n        used = 0 ;\n        do {\n            tp = 0 ; ++ used ;\n            cout << \"? \" << gp[ng] << endl, cin >> y ;\n            for (int i = lrg[ng] ; i <= rrg[ng] ; ++ i)\n                if (y % pr[i] == 0) stk[++ tp] = i ; //cout << tp << '\\n' ;\n            for (int i = 1 ; i <= tp ; ){\n                if (used >= 22) break ;\n                q1 = 0, q2 = 0 ; x = 1, z = 1 ;\n                x = pow(pr[stk[i]], pos[stk[i]]) ;\n                if (i < tp)\n                    z = pow(pr[stk[i + 1]], pos[stk[i + 1]]) ;\n                cout << \"? \" << 1ll * x * z << '\\n' ;\n                cin >> y ; ++ used ;\n                while (y % pr[stk[i]] == 0)\n                    ++ q1, y /= pr[stk[i]] ;\n                if (i < tp)\n                    while (y % pr[stk[i + 1]] == 0)\n                        ++ q2, y /= pr[stk[i + 1]] ;\n                res *= (q1 + 1) * (q2 + 1) ; i += 2 ;\n//                cout << res << '\\n' ;\n            }\n            ++ ng ;\n//            cout << used << \"#\\n \" ;\n        } while(used < 22) ;\n        cout << \"! \" << max(res * 2, res + 7) << endl ;\n    }\n    return 0 ;\n}\n```\n\n\u5927\u6982\u7b97\u4e86 \u4e00\u4e0b\uff0c\u53d1\u73b0\u8fd9\u4e2a\u4e0d\u662f\u5f88\u5bb9\u6613\u5361\u6389\u3002\u8bc1\u660e\u65b9\u5f0f\u5927\u6982\u53ef\u4ee5\u8003\u8651\u5206\u7c7b\u8ba8\u8bba $\\approx 10^3$ \u7684\u8d28\u6570\u4e2a\u6570\u3002\n\n\u53d1\u73b0\u8fd9\u6837\u6700\u591a\u53ea\u80fd check \u5230\u524d $153$ \u4e2a\u8d28\u6570\u3002\u8003\u8651\u6b64\u65f6\u8d28\u6570\u5927\u5c0f\u5df2\u7ecf\u662f $900$ \uff0c\u800c $10^9$ \u81f3\u591a\u5206\u6210 $3$ \u4e2a\u5728 $10^3$ \u5de6\u53f3\u7684\u8d28\u6570\u4e4b\u79ef\uff0c\u8003\u8651\u5982\u679c\u4e09\u4e2a\u8d28\u6570\u90fd\u6ca1\u7b5b\u5230\u90a3\u4e48 $res=1$ \uff0c\u5728 $+7$ \u4e4b\u540e\u5fc5\u7136\u7b26\u5408\u8bef\u5dee\u8303\u56f4\uff1b\u5982\u679c\u53ea\u5269\u4e0b\u4e00\u4e2a\u8d28\u6570\u6ca1\u88ab\u7b5b\u5230\u90a3\u4e48 $\\times 2$ \u4e4b\u540e\u5fc5\u7136\u5408\u6cd5\uff1b\u5982\u679c\u5269\u4e24\u4e2a\u8d28\u6570\u6ca1\u88ab\u7b5b\u5230\uff0c\u90a3\u4e48\u9664\u53bb\u8fd9\u4e24\u4e2a\u8f83\u5927\u7684\u5269\u4e0b\u7684\u6700\u5927\u4e5f\u53ea\u6709 $1200$ \u5de6\u53f3\uff0c\u800c $\\leq 1200$ \u7684\u6570\u6700\u591a\u542b\u6709 $4$ \u4e2a\u4e0d\u540c\u7684\u8d28\u56e0\u5b50\uff0c\u540c\u65f6\u7528\u5230\u8d85\u8fc7\u7b2c\u4e00\u4e2a\u5757(\u5373\u8d85\u8fc7\u524d $15$ \u4e2a\u8d28\u6570)\u7684\u6700\u591a\u4f1a\u6709 $1$ \u4e2a\uff0c\u6bdb\u4f30\u4f30\u4e00\u4e0b\u53d1\u73b0 $22$ \u6b21\u662f\u7ef0\u7ef0\u6709\u4f59\u7684\u3002 \n\n> \n\n",
        "postTime": 1589789019,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u300c\u7b80\u5355\u4ea4\u4e92\u300dCF1355F Guess Divisors Count"
    },
    {
        "content": "\u7ffb\u8bd1\u81ea\u5b98\u65b9\u9898\u89e3 https://codeforces.com/blog/entry/77491\n\n---\n\nIf X=p\u03b111\u22c5p\u03b122\u22c5\u2026\u22c5p\u03b1kk then d(X)=(\u03b11+1)\u22c5(\u03b12+1)\u22c5\u2026\u22c5(\u03b1k+1).\n\n\u6211\u4eec\u77e5\u9053\uff0c\u5982\u679c\u6709 $X=p^{\u03b1_1}_1\u22c5p^{\u03b1_2}_2\u22c5\u2026\u22c5p^{\u03b1_k}_k$ \u5219\u6709 $d(X)=(\u03b1_1+1)\u22c5(\u03b1_2+1)\u22c5\u2026\u22c5(\u03b1_k+1)$\uff08$d(X)$ \u8868\u793a\u6570 $X$ \u7684\u56e0\u6570\u4e2a\u6570\uff09\u3002\n\n---\n\nIf X has prime p in power \u03b1 and Q has p in power \u03b2 then gcd(X,Q) will have p in power \u03b3=min(\u03b1,\u03b2). If \u03b3<\u03b2 then \u03b1=\u03b3, otherwise \u03b3=\u03b2 and \u03b1\u2265\u03b3. We don't know X, but we can choose Q. If we'll choose Q with known prime factorization then we'll be able to extract all the information from query fast (in O(logQ)).\n\n\u5982\u679c\u6570 $X$ \u6709\u56e0\u6570 $p^\u03b1(p,\u03b1\\in N_+\\ |\\ Prime(p))$ \u5e76\u4e14\u6570 $Q$ \u6709\u56e0\u6570 $p^\u03b2(p,\u03b2\\in N_+\\ |\\ Prime(p))$\uff0c\u90a3\u4e48 $\\gcd(X, Q)$ \u6709\u56e0\u6570 $p^\u03b3(p,\u03b3\\in N_+\\ |\\ \u03b3=\\min(\u03b1, \u03b2))$\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 : \u5f53 $\u03b3<\\beta$ \u65f6 $\\alpha=\\gamma$\uff0c\u5f53 $\u03b3=\\beta$ \u65f6 $\\alpha\\ge\\gamma$\u3002\u6211\u4eec\u4e0d\u77e5\u9053 $X$\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u81ea\u7531\u9009\u62e9 $Q$\u3002\u5982\u679c\u6211\u4eec\u7528\u4e00\u79cd\u5df2\u77e5\u7684\u8d28\u56e0\u6570\u5206\u89e3\u6784\u9020 $Q$ \uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u4f1a\u5f88\u5bb9\u6613\u5730\u5728 $O(logQ)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5f97\u5230\u4e00\u4e9b\u5fc5\u8981\u7684\u4fe1\u606f\uff08$\\alpha$ \u7684\u53d6\u503c\u6216\u53d6\u503c\u8303\u56f4\uff09\n\n---\n\nAfter all the queries for each prime p we'll know either the exact power in which X has it, or lower bound for it. We can get upper bound from the fact that X\u2264109.\n\n\u5728\u5bf9\u6bcf\u4e2a\u8d28\u6570 $p$ \u8fdb\u884c\u6240\u6709\u5fc5\u8981\u7684\u67e5\u8be2\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u77e5\u9053 $X$ \u7684\u786e\u5207\u4e58\u65b9\u6216 $X$ \u7684\u4e0b\u754c\u3002 \u540c\u65f6, \u6211\u4eec\u53ef\u4ee5\u4ece $X\\le 10^9$ \u7684\u4e8b\u5b9e\u4e2d\u83b7\u5f97 $X$ \u7684\u4e0a\u9650\u3002\n\n---\n\nIt is clear that we cannot get information about all primes \u2014 there are too many of them and too few queries. We want to somehow use the fact that we don't have to find the exact answer...\n\n\u663e\u7136\uff0c\u6211\u4eec\u65e0\u6cd5\u83b7\u53d6\u6709\u5173\u6240\u6709\u7d20\u6570\u7684\u4fe1\u606f\u2014\u2014\u7d20\u6570\u7684\u4e2a\u6570\u592a\u591a\uff0c\u63d0\u4f9b\u7684\u67e5\u8be2\u6b21\u6570\u5f88\u5c11\u3002 \u6211\u4eec\u9700\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5229\u7528**\u6211\u4eec\u4e0d\u5fc5\u627e\u5230\u786e\u5207\u7b54\u6848\u7684\u4e8b\u5b9e**...\n\n---\n\nSuppose we have figured out that X=X1\u22c5X2 where we know X1 exactly and we also know that X2 has no more than t prime factors (including multiplicity). Then d(X1)\u2264d(X)\u2264d(X1)\u22c5d(X2)\u2264d(X1)\u22c52t. If t\u22641 then our answer will have relative error no more than 0.5...\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 $X = X_1\u22c5X_2$\uff0c\u6211\u4eec\u786e\u5207\u5730\u77e5\u9053 $X_1$\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u77e5\u9053 $X_2$ \u7684\u7d20\u6570\u56e0\u5b50\u4e2a\u6570\uff08\u5305\u62ec\u91cd\u590d\u7684\uff09\u4e0d\u8d85\u8fc7 $t$\u3002 \u5219 $d(X_1)\u2264d(X)\u2264d(X_1)\u22c5d(X_2)\u2264d(X_1)\u22c52^t$\u3002 \u5982\u679c $t\u22641$\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u7b54\u6848\u7684\u76f8\u5bf9\u8bef\u5dee\u5c06\u4e0d\u8d85\u8fc7 $0.5$ ...\n\n---\n\nOne of the ways to guarantee that X2 has few prime factors is to show that it cannot have small prime factors. That means that we have to calculate the exact power for all small primes. This gives an overall idea for the solution: let's make a query Q=p\u03b2 for all primes p\u2264B (for some bound B) where \u03b2 is chosen in such a way that p\u03b2>109. This allows us to know the exact power in which X has p.\n\n\u4fdd\u8bc1 $X_2$ \u6709\u5f88\u5c11\u4e2a\u6570\u7684\u7d20\u6570\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u8bc1\u660e\u5b83\u4e0d\u80fd\u6709\u5f88\u5c0f\u7684\u7d20\u6570\u3002 \u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u8ba1\u7b97\u6240\u6709\u5c0f\u7d20\u6570\u7684\u7cbe\u786e**\u6574\u6570\u6b21\u5e42**\u3002 \u8fd9\u7ed9\u51fa\u4e86\u89e3\u51b3\u65b9\u6848\u7684\u6574\u4f53\u601d\u8def\uff1a\u8ba9\u6211\u4eec\u67e5\u8be2 $Q =p^\u03b2$ \uff08$p$ \u4e3a $p\u2264B$\uff08$B$ \u662f\u67d0\u4e2a\u8fb9\u754c\uff09\u7684\u7d20\u6570\uff0c\u5e76\u4e14 $\\beta$ \u8db3\u591f\u5927\u4ee5\u81f3\u4e8e $p^\u03b2> 10^9$\uff09\u3002 \u8fd9\u4f7f\u6211\u4eec\u77e5\u9053 $X$ \u5177\u6709 $p$ \u7684\u786e\u5207\u5e42\u3002\n\n---\n\nThis basic idea can be improved in several ways:\n\n\u8fd9\u4e2a $naive$ \u7684\u60f3\u6cd5\u53ef\u4ee5\u7528\u5982\u4e0b\u65b9\u6848\u6539\u8fdb\uff1a\n\n1. X has no more than 9 different prime factors, so for most primes its power is 0. If we could exclude these redundant primes fast it could speed up the solution significantly. And there is a way: we could make a query Q=p1p2\u2026ps for s different primes, after that we will know which of them are factors of X;  \n   \n   ---\n   $X$ \u7684\u7d20\u56e0\u5b50\u79cd\u7c7b\u4e0d\u8d85\u8fc7 9 \uff08\u56e0\u4e3a $2\u22c53\u22c55\u22c57\u22c59\u22c511\u22c513\u22c517\u22c519 < 10^9 < 2\u22c53\u22c55\u22c57\u22c59\u22c511\u22c513\u22c517\u22c519\u22c523$\uff09\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u7d20\u6570\u56e0\u5b50\uff0c\u5176\u5728 $X$ \u4e2d\u7684\u5e42\u4e3a $0$\uff08\u611f\u6027\u7406\u89e3\uff09\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u6392\u9664\u8fd9\u4e9b\u591a\u4f59\u7684\u8d28\u6570\uff0c\u5219\u53ef\u4ee5\u5927\u5927\u52a0\u5feb\u89e3\u51b3\u95ee\u9898\u7684\u901f\u5ea6\u3002\u6709\u4e00\u79cd\u65b9\u6cd5\uff1a\u6211\u4eec\u53ef\u4ee5\u67e5\u8be2 $Q = p_1p_2 ... p_s$ \u4ee5\u67e5\u8be2 $s$ \u4e2a\u4e0d\u540c\u7684\u7d20\u6570\uff0c\u7136\u540e\u6211\u4eec\u5c31\u80fd\u77e5\u9053\u5176\u4e2d\u54ea\u4e9b\u662f $X$ \u7684\u56e0\u5b50\uff1b\n2. \u03b2 can be chosen such that p^\u03b2+1>109, because even if \u03b3=\u03b2 and \u03b1\u2265\u03b3=\u03b2 we will know that \u03b1\u2264\u03b2 since otherwise X>109;\n   \n   ---\n   \u9009\u62e9 $\\beta$ \u9700\u6ee1\u8db3 $p^{\\beta + 1}>10^9$\uff0c\u56e0\u4e3a\u5373\u4f7f $\\alpha \\ge \\gamma = \\beta$ \u6211\u4eec\u4e5f\u80fd\u6e05\u695a\u7684\u77e5\u9053 $\\alpha\\le\\beta$\uff0c\u4e0d\u7136 $X$ \u5c06\u5927\u4e8e $10^9$\uff08\u5373 $\\alpha=\\beta$\uff09\n3. From the previous point follows that we can find the exact power for two primes simultaneously, just make a query with a product of two respective numbers.\n   \n   ---\n   \u4ece\u524d\u9762\u7684\u6b65\u9aa4\u4e2d\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u5730\u77e5\u9053\u4e24\u4e2a\u8d28\u6570\u7684\u51c6\u786e**\u5e42\u6b21**\uff0c\u65b9\u6cd5\u662f\u67e5\u8be2 $Q = p_1^{\\beta_1}\u00b7p_2^{\\beta_2}(p_1,p_2$ \u662f\u8d28\u6570 $, \\beta_1,\\beta_2\\in N_+\\ |\\ p_1^{\\beta_1 + 1}>10^9,p_2^{\\beta_2 + 1}>10^9)$\n\n---\n\n\nHow to choose B? Apparently we want B2>109. But actually t\u22642 is ok for us: if we know that L\u2264d(X)\u22644L then we can answer 2L and the relative error will be no more than 0.5. That means we want B3>109 or B=1001.\n\n\u600e\u4e48\u9009\u62e9 $B$\uff1f\u663e\u7136\u6211\u4eec\u5e0c\u671b $B^2>10^9$\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0c$t\\le2$ \u5bf9\u6211\u4eec\u6765\u8bf4\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a\u5982\u679c\u6211\u4eec\u77e5\u9053 $L\u2264d(X)\u22644L$ \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u56de\u7b54 $2L$ \u5e76\u4e14\u7b54\u6848\u7684\u500d\u6570\u8bef\u5dee\u4e0d\u4f1a\u5927\u4e8e $0.5$\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f $B^3>10^9$ \u5373 $B = 1001$\n\n---\n\nWe are close: there are 168 primes less than 1001, we can check 6 primes (for being a factor of X) in one query since 10006\u22641018, so we need 28 queries.\n\n\u66f4\u8fdb\u4e00\u6b65\u5730\u8bf4\uff1a\u5c0f\u4e8e $1001$ \u7684\u7d20\u6570\u6709 $168$ \u4e2a\u3002\u5982\u679c\u6211\u4eec $6$ \u4e2a\u7d20\u6570\u4e00\u7ec4\u5730\u67e5\u8be2\uff08\u56e0\u4e3a $1000^6\\le10^{18}$\uff09\u3002\u4f46\u8fd9\u6837\u9700\u8981 $28$ \u6b21\u67e5\u8be2\u3002\n\n---\n\nLet's note that if we have found some prime factors of X (let's say their product is X1) then X2\u2264109X1. Suppose we have checked all the primes not greater than p and X1\u22c5p3>109. That means that X2 has no more than 2 prime divisors and we are good.\n\n\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5982\u679c\u6211\u4eec\u6709 $X$ \u7684\u4e00\u4e9b\u7d20\u56e0\u5b50\uff08\u5047\u8bbe\u8fd9\u4e9b\u7d20\u56e0\u5b50\u7684\u4e58\u79ef\u662f $X_1$\uff09\u90a3\u4e48 $X_2\\le\\frac{10^9}{X_1}$\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u68c0\u9a8c\u4e86\u6240\u6709\u4e0d\u5927\u4e8e $p$ \u7684\u7d20\u6570\u5e76\u4e14 $X_1\u00b7p^3>10^9$.\u8fd9\u5c31\u610f\u5473\u7740 $X_2$ \u7684\u7d20\u56e0\u5b50\u4e2a\u6570\u6ca1\u6709\u8d85\u8fc7 $2$\uff0c\u6211\u4eec\u8fbe\u6210\u4e86\u76ee\u6807\u3002\n\n--- \n\nWhat is left is to use our right to have absolute error: if X1\u22643 we can just print 8! Either X1\u22643 and we are fine with X2 having 3 prime factors, or X1\u22654 and we have to check all primes up to 109/4\u2212\u2212\u2212\u2212\u2212\u221a3<630. There are 114 such primes, so we need only 19 queries.\n\n\u5269\u4e0b\u5e94\u8be5\u505a\u7684\u662f\u4fdd\u8bc1\u7edd\u5bf9\u503c\u8bef\u5dee\uff1a\u5982\u679c $X_1\\le3$ \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u628a $8$ \u4f5c\u4e3a\u7b54\u6848\u8f93\u51fa\uff01\u82e5 $X_1\\le3$\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a $X_2$ \u6700\u591a\u6709 $3$ \u4e2a\u8d28\u56e0\u6570\uff1b\u82e5 $X_1\\ge4$ \u6211\u4eec\u9700\u8981\u68c0\u67e5\u6240\u6709\u5c0f\u4e8e $\\ ^3\\!\\!\\!\\!\\sqrt{\\dfrac{10^9}{4}}<630$ \u7684\u8d28\u6570\u3002\u8fd9\u91cc\u6709 114 \u4e2a\u8fd9\u6837\u7684\u8d28\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981 19 \u6b21\u67e5\u8be2\u3002\n\n---\n\nWe will also need some queries to find out the exact power for those small prime factors of X we have found. If we have found no more than 2 prime factors, we'll need 1 query, otherwise we'll have to check primes only up to 109/(2\u22c53\u22c55)\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u221a3<330, of which there are only 66 so the first part of the solution spends no more than 11 queries.\n\n\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e9b\u8be2\u95ee\u53bb\u627e\u5230\u4e00\u4e9b\u5c0f\u7d20\u6570\u7684\u51c6\u786e\u5e42\u6b21\u3002\u5982\u679c\u6211\u4eec\u53d1\u73b0 $X$ \u7684\u7d20\u56e0\u6570\u4e2a\u6570\u6ca1\u6709\u8d85\u8fc7 $2$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u67e5\u8be2 $1$ \u6b21\u3002\u5176\u4ed6\u60c5\u51b5\u6211\u4eec\u53ea\u9700\u8981\u67e5\u8be2\u6240\u6709\u5c0f\u4e8e $\\ ^3\\!\\!\\!\\!\\sqrt{\\dfrac{10^9}{2\u00b73\u00b75}}<330$ \u7684\u8d28\u6570\u3002\u8fd9\u4e2a\u8303\u56f4\u5185\u6709 $66$ \u4e2a\u8d28\u6570\uff0c\u6240\u4ee5\u89e3\u51b3\u65b9\u6848\u7684\u7b2c\u4e00\u90e8\u5206\u82b1\u8d39\u7684\u67e5\u8be2\u6570\u4e0d\u8d85\u8fc7 $11$\n\n--- \n\nSo we have shown that the solution spends no more than 20 queries. We did some rough estimations, the actual bound for this solution is 17 queries.\n\n\u5230\u8fd9\u91cc\u6211\u4eec\u8bc1\u660e\u4e86\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u82b1\u8d39\u7684\u67e5\u8be2\u6570\u4e0d\u4f1a\u5927\u4e8e $20$\u3002\u7ecf\u8fc7\u8be6\u7ec6\u7684\u518c\u6570\uff0c\u6211\u4eec\u53d1\u73b0\u5b9e\u9645\u7684\u4e0a\u9650\u662f $17$ \u6b21\u3002\n\n---\n\nAuthor's solution: 80407360\n\n\u51fa\u9898\u4eba\u7684\u63d0\u4ea4\u8bb0\u5f55\uff1a[CF-R80407360](https://codeforces.ml/contest/1355/submission/80407360)\n",
        "postTime": 1589845386,
        "uid": 63720,
        "name": "brealid",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1355F \u3010Guess Divisors Count\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/CF1355F)\n\n\u5927\u6982\u9898\u610f\uff1a\u4ea4\u4e92\u5e93\u60f3\u4e00\u4e2a $[1,10^9]$ \u7684\u6570 $X$\uff0c\u4f60\u53ef\u4ee5\u7ed9\u5b9a\u4e00\u4e2a $[1,10^{18}]$ \u7684\u6570 $Q$\uff0c\u4ea4\u4e92\u5e93\u8fd4\u56de $\\gcd(X,Q)$\u3002\u8981\u4f60\u5728 $22$ \u6b21\u4e4b\u5185\u5f97\u5230 $X$ \u7684\u56e0\u6570\u4e2a\u6570\u3002\n\n\u8bbe\u4f60\u7684\u7b54\u6848\u4e3a $d$\uff0c\u6807\u51c6\u7b54\u6848\u4e3a $ans$\uff0c\u53ea\u8981\u6ee1\u8db3 $|ans-d|\\le7$ \u6216 $\\dfrac12\\le\\dfrac{ans}{d}\\le2$ \u5373\u7b97\u6b63\u786e\u3002\n\n\u601d\u7ef4\u9898\u3002\n\n\u5bb9\u6613\u60f3\u5230\u7684\u662f\u5bf9\u4e8e\u6bcf\u4e2a $X$ \u7684\u8d28\u56e0\u6570\u786e\u5b9a\u5176\u6b21\u6570\uff0c\u518d\u628a\u6b21\u6570\u52a0\u4e00\u4e58\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5177\u4f53\u64cd\u4f5c\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8d28\u6570\u8be2\u95ee\u5176\u6700\u5927\u7684\u5c0f\u4e8e $10^9$ \u7684\u5e42\u6b21\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u7684\u6b21\u6570\u5c31\u662f $X$ \u5305\u542b\u7684\u8fd9\u4e2a\u8d28\u6570\u7684\u6b21\u6570\u3002\u4e00\u4e2a\u6ca1\u4ec0\u4e48\u7528\u7684\u4f18\u5316\u662f\u628a\u4e24\u4e2a\u8d28\u6570\u7684\u6700\u5927\u5e42\u4e58\u8d77\u6765\uff0c\u4e00\u6b21\u8be2\u95ee\u4e24\u4e2a\u8d28\u6570\u3002\n\n\u4f46\u662f $10^9$ \u7684\u8d28\u6570\u5b9e\u5728\u662f\u592a\u591a\u4e86\uff0c\u800c\u5bf9\u4e8e\u5927\u591a\u6570\u8d28\u6570 $X$ \u8be2\u95ee\u7684\u503c\u90fd\u4f1a\u8fd4\u56de $1$\uff0c\u6240\u4ee5\u8003\u8651\u5148\u6c42\u51fa $X$ \u6709\u54ea\u4e9b\u8d28\u56e0\u5b50\u3002\n\n\u6211\u4eec\u628a\u4e00\u4e9b\u8d28\u6570\u4e58\u8d77\u6765\uff08\u6bd4\u5982 $2\\times3\\times5\\times7\\times11\\times\\cdots$\uff09\uff0c\u4e00\u76f4\u4e58\u5230\u521a\u597d\u4e0d\u8d85\u8fc7 $10^{18}$\uff0c\u8be2\u95ee\u540e\u6c42\u51fa $X$ \u5305\u542b\u54ea\u4e9b\u8d28\u56e0\u6570\u518d\u8be2\u95ee\u8fd9\u4e9b\u8d28\u56e0\u6570\u7684\u6b21\u6570\u3002\n\n\u4f46\u662f\u8fd8\u662f\u4e0d\u80fd\u5728 $22$ \u6b21\u8be2\u95ee\u5b8c\uff0c\u53d1\u73b0\u53ef\u4ee5\u4e0d\u7528\u6c42\u51fa\u5177\u4f53\u7684\u503c\uff0c\u5373\u53ea\u8981\u6ee1\u8db3 $\\dfrac12\\le\\dfrac{ans}{d}\\le2$ \u5373\u7b97\u6b63\u786e\u3002\n\n\u90a3\u4e48\u6211\u4eec\u76f8\u5f53\u4e8e\u6709 $4$ \u500d\u7684\u8bef\u5dee\u7a7a\u95f4\u3002\u56e0\u6b64\u60f3\u5230\u7559\u4e24\u4e2a\u8d28\u56e0\u5b50\u4e0d\u8be2\u95ee\uff0c\u5373\u53ea\u66b4\u529b\u8be2\u95ee\u5230 $1000$ \u4ee5\u5185\u7684\u8d28\u6570\uff0c$X$ \u5269\u4e0b\u4e0d\u8d85\u8fc7\u4e24\u4e2a\u8d28\u56e0\u5b50\uff0c\u5269\u4e0b\u7684\u8d28\u56e0\u5b50\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e0d\u8d85\u8fc7 $4$ \u500d\uff0c\u8f93\u51fa\u5f53\u524d\u7b54\u6848\u7684\u4e24\u500d\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n\u4f46\u662f\u8fd8\u662f\u4e0d\u80fd\u5728 $22$ \u6b21\u8be2\u95ee\u5b8c\uff0c\u8003\u8651\u7528\u4e0a $|ans-d|\\le7$ \u7684\u6761\u4ef6\u3002\n\n\u5982\u679c\u6c42\u51fa\u6765\u7684\u7b54\u6848\u8d85\u8fc7 $2$\uff0c\u5219\u7b54\u6848\u81f3\u5c11\u662f $3$\uff0c\u524d\u9762\u7684\u8d28\u6570\u4e58\u8d77\u6765\u81f3\u5c11\u662f $2^2=4$\uff0c\u5269\u4e0b\u6765\u7684\u8d28\u56e0\u5b50\u4e4b\u79ef\u81f3\u591a\u662f $10^9\\div4=2.5\\times10^8$\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u8d28\u6570\u7684\u4e0a\u754c\u8c03\u5230 $\\sqrt[3]{2.5\\times10^8}\\approx630$\uff0c\u8fd9\u65f6\u5269\u4e0b\u6765\u4e0d\u8d85\u8fc7\u4e24\u4e2a\u8d28\u56e0\u5b50\uff0c\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e0d\u8d85\u8fc7 $4$ \u500d\uff0c\u6298\u4e2d\u8f93\u51fa\u5f53\u524d\u7b54\u6848\u7684\u4e24\u500d\u5c31\u884c\u4e86\u3002\n\n\u5982\u679c\u6c42\u51fa\u6765\u7684\u7b54\u6848\u4e0d\u8d85\u8fc7 $2$\uff0c\u90a3\u4e48\u6709\u53ef\u80fd\u5269\u4e0b\u6765 $3$ \u4e2a\u8d28\u56e0\u5b50\uff0c\u7b54\u6848\u6700\u5c0f\u662f $1$\uff0c\u6700\u5927\u662f $2\\times2^3=16$\uff0c\u6298\u4e2d\u8f93\u51fa $8$ \u5c31\u884c\u4e86\u3002\n\n\u901a\u8fc7\u6253\u8868\u53ef\u5f97\uff0c\u4f7f\u7528 $630$ \u4ee5\u5185\u7684\u8d28\u6570\u4e0d\u8d85\u8fc7 $10^{18}$ \u7684\u8fde\u4e58\u79ef\u6c42\u51fa $X$ \u6709\u54ea\u4e9b\u8d28\u56e0\u5b50\u9700\u8981 $16$ \u6b21\u8be2\u95ee\uff0c$X$ \u4e0d\u8d85\u8fc7 $9$ \u4e2a\u8d28\u56e0\u5b50\uff08$2\\times3\\times5\\times7\\times11\\times13\\times17\\times19\\times23\\times29>10^9$\uff09\uff0c\u7ed3\u5408\u628a\u4e24\u4e2a\u8d28\u6570\u6700\u5927\u5e42\u4e58\u8d77\u6765\u8be2\u95ee\u7684\u65b9\u6cd5\u53ef\u4ee5\u7528 $5$ \u6b21\u6c42\u51fa\u5176\u6700\u5927\u5e42\uff0c\u52a0\u8d77\u6765 $21$ \u6b21\u8be2\u95ee\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u4ee3\u7801\u91cc `p[]` \u5b58\u7684\u662f\u8d28\u6570\uff0c`q[]` \u5b58\u7684\u662f\u8d28\u6570\u7684 $16$ \u4e2a\u8fde\u4e58\u79ef\uff0c`r[]` \u5b58\u7684\u662f $16$ \u4e2a\u8fde\u4e58\u79ef\u7684\u5206\u9694\u70b9\uff08\u5373 $q_x=\\prod\\limits_{i=r_{_{x-1}}}^{r_{_x}-1}p_i$\uff09`s[]` \u5b58\u7684\u662f\u8d28\u6570\u7684\u6700\u5927\u5e42\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nnamespace QYB {\n    ll p[] = {\n        1000000007ll, 2ll,   3ll,   5ll,   7ll,   11ll,  13ll,  17ll,  19ll,\n        23ll,  29ll,  31ll,  37ll,  41ll,  43ll,  47ll,  53ll,  59ll,  61ll,\n        67ll,  71ll,  73ll,  79ll,  83ll,  89ll,  97ll,  101ll, 103ll, 107ll,\n        109ll, 113ll, 127ll, 131ll, 137ll, 139ll, 149ll, 151ll, 157ll, 163ll,\n        167ll, 173ll, 179ll, 181ll, 191ll, 193ll, 197ll, 199ll, 211ll, 223ll,\n        227ll, 229ll, 233ll, 239ll, 241ll, 251ll, 257ll, 263ll, 269ll, 271ll,\n        277ll, 281ll, 283ll, 293ll, 307ll, 311ll, 313ll, 317ll, 331ll, 337ll,\n        347ll, 349ll, 353ll, 359ll, 367ll, 373ll, 379ll, 383ll, 389ll, 397ll,\n        401ll, 409ll, 419ll, 421ll, 431ll, 433ll, 439ll, 443ll, 449ll, 457ll,\n        461ll, 463ll, 467ll, 479ll, 487ll, 491ll, 499ll, 503ll, 509ll, 521ll,\n        523ll, 541ll, 547ll, 557ll, 563ll, 569ll, 571ll, 577ll, 587ll, 593ll,\n        599ll, 601ll, 607ll, 613ll, 617ll, 619ll, -1ll\n    }, q[] = {\n        0ll, 614889782588491410ll, 38655288426304091ll, 22125549654501673ll, 316773187163046517ll,\n        9879251463499721ll, 39049078408188253ll, 108538288030848139ll, 309619196508457007ll,\n        796229312542859009ll, 4064625951224869ll, 6860596063872959ll, 10626236358872441ll,\n        17092564102090369ll, 30150641449095443ll, 43889293834596251ll, 234118799ll, -1ll\n    }, r[] = {\n        1ll, 16ll, 25ll, 33ll, 41ll, 48ll, 55ll, 62ll, 69ll, 76ll, 82ll, 88ll, 94ll, 100ll, 106ll, 112ll, 115ll, -1ll\n    }, s[] = {\n        1ll, 536870912ll, 387420489ll, 244140625ll, 282475249ll, 214358881ll, 815730721ll,\n        410338673ll, 893871739ll, 148035889ll, 594823321ll, 887503681ll, 69343957ll,\n        115856201ll, 147008443ll, 229345007ll, 418195493ll, 714924299ll, 844596301ll,\n        20151121ll, 25411681ll, 28398241ll, 38950081ll, 47458321ll, 62742241ll, 88529281ll,\n        104060401ll, 112550881ll, 131079601ll, 141158161ll, 163047361ll, 260144641ll,\n        294499921ll, 352275361ll, 373301041ll, 492884401ll, 519885601ll, 607573201ll,\n        705911761ll, 777796321ll, 895745041ll, 5735339ll, 5929741ll, 6967871ll, 7189057ll,\n        7645373ll, 7880599ll, 9393931ll, 11089567ll, 11697083ll, 12008989ll, 12649337ll,\n        13651919ll, 13997521ll, 15813251ll, 16974593ll, 18191447ll, 19465109ll, 19902511ll,\n        21253933ll, 22188041ll, 22665187ll, 25153757ll, 28934443ll, 30080231ll, 30664297ll,\n        31855013ll, 36264691ll, 38272753ll, 41781923ll, 42508549ll, 43986977ll, 46268279ll,\n        49430863ll, 51895117ll, 54439939ll, 56181887ll, 58863869ll, 62570773ll, 64481201ll,\n        68417929ll, 73560059ll, 74618461ll, 80062991ll, 81182737ll, 84604519ll, 86938307ll,\n        90518849ll, 95443993ll, 97972181ll, 99252847ll, 101847563ll, 109902239ll, 115501303ll,\n        118370771ll, 124251499ll, 127263527ll, 131872229ll, 141420761ll, 143055667ll,\n        158340421ll, 163667323ll, 172808693ll, 178453547ll, 184220009ll, 186169411ll,\n        192100033ll, 202262003ll, 208527857ll, 214921799ll, 217081801ll, 223648543ll,\n        230346397ll, 234885113ll, 237176659ll\n    }, ans;\n    int main() {\n        int t; scanf(\"%d\", &t);\n        while (t--) {\n            ans = 1; vector<ll> v;\n            for (int i = 1; ~q[i]; i++) {\n                printf(\"? %lld\\n\", q[i]); fflush(stdout);\n                ll res; scanf(\"%lld\", &res);\n                for (int j = r[i - 1]; j < r[i]; j++) {\n                    if (res % p[j] == 0) v.push_back(j);\n                }\n            } if (v.size() & 1) v.push_back(0); // \u7531\u4e8e\u540e\u9762\u8981\u628a\u8d28\u6570\u6700\u5927\u5e42\u4e24\u4e24\u4e58\u5728\u4e00\u8d77\u8be2\u95ee\uff0c\u5982\u679c\u7531\u5947\u6570\u4e2a\u8d28\u56e0\u5b50\u5c31\u585e\u8fdb\u53bb\u4e00\u4e2a\u4e0d\u4f1a\u51fa\u73b0\u7684\u5927\u8d28\u6570\n            // v \u91cc\u9762\u5b58\u7684\u662f X \u6240\u6709\u8d28\u56e0\u6570\u7684\u7f16\u53f7\n            for (int i = 0; i < v.size(); i += 2) {\n                printf(\"? %lld\\n\", s[v[i]] * s[v[i + 1]]); fflush(stdout); // \u4e24\u4e24\u7ec4\u5408\u8be2\u95ee\n                ll cnt = 1, res; scanf(\"%lld\", &res);\n                while (res % p[v[i]] == 0) {\n                    res /= p[v[i]]; ++cnt;\n                } ans *= cnt; cnt = 1;\n                while (res % p[v[i + 1]] == 0) {\n                    res /= p[v[i + 1]]; ++cnt;\n                } ans *= cnt;\n            } if (ans <= 2) printf(\"! 8\\n\"); // \u7279\u5224\n            else printf(\"! %lld\\n\", ans * 2);\n        } return 0;\n    }\n} int main() {\n    return QYB::main();\n}\n```",
        "postTime": 1668151270,
        "uid": 172003,
        "name": "qinyubo",
        "ccfLevel": 7,
        "title": "CF1355F \u9898\u89e3"
    },
    {
        "content": "[CF1355F Guess Divisors Count](https://www.luogu.com.cn/problem/CF1355F) \u5bf9\u4e8e\u4e00\u4e2a\u6b63\u6574\u6570 $x \\space (1 \\le x \\le 10^9)$ \u7684\u56e0\u6570\u4e2a\u6570\uff0c\u6bcf\u4e00\u6b21\u53ef\u4ee5\u8be2\u95ee\u4e00\u4e2a\u6b63\u6574\u6570 $Q \\space (1 \\le Q \\le 10^{18})$\uff0c\u4ea4\u4e92\u5e93\u4f1a\u8fd4\u56de $\\gcd(x,Q)$\u3002\u6700\u591a\u53ef\u4ee5\u8be2\u95ee $22$ \u6b21\u3002\u6700\u540e\u9700\u8981\u4f60\u7ed9\u51fa\u8fd9\u4e2a\u6570\u7684\u56e0\u6570\u4e2a\u6570\uff0c\u82e5\u4f60\u7ed9\u51fa\u7684 $ans$ \u4e0e\u7cbe\u786e\u7b54\u6848 $d$ \u6ee1\u8db3\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5219\u89c6\u4e3a\u6b63\u786e\u3002\n\n- $|ans-d| \\le 7$\n- $\\dfrac{1}{2} \\le \\dfrac{ans}{d} \\le 2$\n\n---\n\n\u6c42\u56e0\u6570\u4e2a\u6570\uff0c\u6839\u636e\u552f\u4e00\u5206\u89e3\u5b9a\u7406\uff0c\u5bf9\u4e8e\u6b63\u6574\u6570 $x$ \u6709 $ans=\\prod\\limits_{i=1}^n(p_i+1)$\uff0c\u5176\u4e2d $p_i$ \u8868\u793a $x$ \u7684\u7b2c $i$ \u4e2a\u8d28\u56e0\u5b50\u7684\u6307\u6570\u3002\u8003\u8651\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u679a\u4e3e\u8d28\u56e0\u5b50\uff0c\u6700\u540e\u7b97\u4e58\u79ef\u5c31\u597d\u4e86\u3002\n\n\u4f46\u662f\uff0c\u7531\u4e8e\u8be2\u95ee\u6b21\u6570\u4e0d\u80fd\u8d85\u8fc7 $22$\uff0c\u8003\u8651\u5bf9\u8be2\u95ee\u7684\u8fc7\u7a0b\u8fdb\u884c\u4f18\u5316\u3002\n\n---\n\n1. \u600e\u4e48\u5feb\u901f\u5f97\u5230\u67d0\u4e2a\u8d28\u56e0\u5b50\u7684\u6307\u6570\uff1f\n\n\u6734\u7d20\u505a\u6cd5\u663e\u7136\u662f\u628a\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u6307\u6570\u8be2\u95ee\u4e00\u904d\u3002\u4f46\u662f\u60f3\u60f3\u5c31\u77e5\u9053\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u786e\u5b9a\u5b58\u5728\u7684\u8d28\u56e0\u5b50 $P$\uff0c\u4e0d\u5982\u76f4\u63a5\u7528 $P^k$ \u53bb\u8be2\u95ee $\\gcd$\uff1a\u8fd9\u91cc\u7684 $k$ \u8868\u793a\u7b2c\u4e00\u4e2a\u6ee1\u8db3 $P^k\\ge x_{\\max}$ \u7684\u6b63\u6574\u6570\u3002\u540c\u65f6\uff0c\u8fd9\u91cc\u7684 $x_{\\max}$ \u76f4\u63a5\u8bbe\u4e3a\u4e0a\u754c $10^9$ \u5373\u53ef\uff0c\u8be2\u95ee $Q=P^k$ \u5c31\u53ef\u4ee5\u5feb\u901f\u5f97\u5230\u5b83\u7684\u6307\u6570\u3002\n\n2. \u600e\u4e48\u5feb\u901f\u5f97\u5230 \u201c \u786e\u5b9a\u5b58\u5728\u7684\u8d28\u56e0\u5b50 $P$ \u201d\uff1f\n\n\u7531\u4e8e\u5141\u8bb8\u7684\u8be2\u95ee\u6570\u91cf\u6781\u5c0f\uff0c\u6240\u4ee5\u8003\u8651\u6279\u91cf\u8be2\u95ee\u3002\u7531\u4e8e$Q \\space (1 \\le Q \\le 10^{18})$\uff0c\u60f3\u5230\u628a\u4e00\u4e32\u8d28\u6570\u538b\u6210\u4e00\u4e2a\u5927\u6570\u8fdb\u884c\u8be2\u95ee\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230\u5b58\u5728\u7684\u8d28\u56e0\u5b50\uff1a\u4ece\u800c\u53ef\u4ee5\u901a\u8fc7 1 \u4e2d\u505a\u6cd5\u8fdb\u884c\u5904\u7406\u3002\n\n3. \u4f46\u662f\u5373\u4f7f\u662f\u8fd9\u6837\u4f18\u5316\u4e86\u4e5f\u8dd1\u4e0d\u8fdb $22$ \u6b21\u554a\uff1f\n\n\u8fd8\u6ca1\u5b8c\u5462\uff01\u7531\u4e8e\u8fd9\u9053\u9898\u9700\u8981\u7ed9\u51fa\u6a21\u7cca\u7b54\u6848\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u6a21\u7cca\u7684\u5904\u7406\u3002\n\n\u5148\u524d\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e00\u6b21\u8be2\u95ee\u5b8c\u538b\u6210\u7684\u5927\u6570\u7684\u6bb5\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5f53\u524d\u5269\u4f59\u7684 $\\dfrac{x_{\\max}}{\\prod P}$ \u5c0f\u4e8e\u8fd9\u4e00\u6bb5\u540e\u7b2c\u4e00\u4e2a\u6570\uff08\u4e0d\u59a8\u8bbe\u4e3a $g$\uff0c\u5f53\u524d\u5f97\u5230\u7684\u7b54\u6848\u4e3a $ans$\uff09\u7684\u7acb\u65b9\uff0c\u5373 $g^3$\uff0c\u6b64\u65f6\u7684\u56e0\u6570\u4e2a\u6570\u4e00\u5b9a\u4f1a\u88ab\u63a7\u5236\u5728 $[ans,(3+1)ans]$\uff0c\u5373 $[ans,4ans]$ \u95f4\uff0c\u56e0\u4e3a $g^3$ \u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\u4e3a $4$\uff0c\u800c\u6700\u574f\u60c5\u51b5\u4e3a\u5f53\u524d\u5269\u4f59\u7684\u6570\u65e0\u6cd5\u4ea7\u751f\u65b0\u7684\u8d21\u732e\uff08\u5373\u4e3a $1$\uff09\uff0c\u6240\u4ee5\u6298\u4e2d\u8f93\u51fa $2ans$\uff0c\u5fc5\u5b9a\u6b63\u786e\u3002\n\n\u5904\u7406\u5b8c\u540e\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u8fd8\u6ca1\u6709\u7528\u4e0a\u5dee\u4e0d\u8d85\u8fc7 $7$ \u7684\u6761\u4ef6\u3002\n\n\u6240\u4ee5\u8003\u8651\u8bbe\u7f6e\u4e00\u4e2a\u9608\u503c\u4f7f\u5f97\u7b54\u6848\u53ef\u4ee5\u901a\u8fc7\u7279\u5224\u5f97\u5230\u3002\n\n\u7531\u4e8e\u4e0a\u8ff0\u5904\u7406\u65f6\uff0c\u7acb\u65b9\u53ef\u4ee5\u4fdd\u8bc1 $\\dfrac{1}{2}d \\le ans \\le 2d$\uff0c\u5f97\u5230\u9608\u503c\u8303\u56f4\u5728\u4e09\u6b21\u65b9\u6839\u5185\u3002\n\n\u5145\u5206\u53d1\u626c\u4eba\u7c7b\u667a\u6167\u53d1\u73b0\u8fd9\u79cd\u65b9\u6cd5\u53d6\u5230 $700$ \u5de6\u53f3\u53ef\u4ee5\u901a\u8fc7\uff0c\u4e0b\u9762\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u3002\n\n- \u5982\u679c\u5f53\u524d $ans=1$ \u6216 $ans=2$\uff1a\u5269\u4e0b\u7684\u6570\u6700\u591a\u7531\u4e09\u4e2a\u8d28\u6570\u76f8\u4e58\u5f97\u5230\uff0c\u6700\u7ec8\u7b54\u6848\u6700\u5c11\u4e3a $1 \\times 1 = 1$\uff0c\u6700\u591a\u4e3a $2 \\times 2^3=16$\uff0c\u8f93\u51fa $8$ \u53ef\u4ee5\u6298\u4e2d\u3002\n- \u5982\u679c\u5f53\u524d\u7b54\u6848\u4e0d\u4e3a $1$ \u6216 $2$\uff1a\u8003\u8651\u6700\u574f\u60c5\u51b5\uff0c\u5f53\u524d\u7b54\u6848\u4e3a $3$\uff0c\u524d\u9762\u53d6\u5230 $2^2=4$\u3002\u6b64\u65f6\u5269\u4f59\u7684\u6570\u6700\u591a\u4e3a $2.5 \\times 10^8$\u3002\u53d1\u73b0\u65e0\u6cd5\u627f\u53d7\u7acb\u65b9\u7ea7\u522b\u7684\u65b0\u589e\u8d28\u56e0\u5b50\u79ef\uff08\u7531\u4e8e\u503c\u57df\u4e3a $700$ \u5de6\u53f3\u5f80\u4e0a\uff09\uff0c\u6240\u4ee5\u6700\u591a\u4e3a\u5e73\u65b9\u7ea7\u522b\u7684\u8d21\u732e\u3002\u6b64\u65f6\u7b54\u6848\u6700\u5c11\u4e3a $ans$\uff0c\u6700\u591a\u4e3a $(1+1)^2ans=4ans$\u3002\u6298\u4e2d\u4e3a $2ans$ \u5373\u53ef\u3002\n\n\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\uff0c\u5b9e\u73b0\u7ec6\u8282\u6709\u70b9\u591a\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\n\nconst int Lim = 1e9;\nconst int nxt[30] = {53, 89, 131, 167, 199, 241, 281, 331, 373, 409, 443, 479, 521, 569, 601, 641};\nconst int quer[30] = {614889782588491410, 27362732256821997, 15031861979012587, 1436339604664397, 6797529210792599, 27105383499717587, 82562146564818163, 220730699740396663, 628272447786387869, 3352982574921113, 5910838774210927, 9060769122162619, 14632963178572339, 25286434350286931, 39088031966400007, 53892559501986383};\nconst int p[300] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659};\n\nint T, ans, Limit;\ninline void ask(int x) { cout << \"? \" << x << endl; }\ninline void guess(int x) { cout << \"! \" << x << endl; }\n\nsigned main() {\n  cin >> T;\n  while (T--) {\n    Limit = Lim, ans = 1; int pos = 0; bool ok = false;\n    for (int i=0; i<16; ++i) {\n      ask(quer[i]); int gcd; cin >> gcd;\n      for (; p[pos]<nxt[i]; ++pos) {\n        if (gcd%p[pos]) continue;\n        int pw = 1, bas = 0; while (pw<Limit) pw *= p[pos];\n        ask(pw); int res; cin >> res, Limit /= res;\n        while (!(res%p[pos])) ++bas, res /= p[pos]; ans *= (bas+1);\n      }\n      if (Limit<nxt[i]*nxt[i]*nxt[i]) {\n        guess(ans*2); ok = true;\n        goto xde;\n      }\n    }\n    if (ok) continue;\n    if (ans<=2) guess(8); else guess(ans*2);\n    xde:;\n  }\n  return 0;\n}\n```",
        "postTime": 1668153171,
        "uid": 487752,
        "name": "MistZero",
        "ccfLevel": 0,
        "title": "\u4ea4\u4e92\uff1a\u56e0\u6570\u4e2a\u6570\u3002"
    }
]