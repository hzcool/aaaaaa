[
    {
        "content": "\u8fd9\u9898\u725b\u4e86 \u867d\u7136\u5728\u5361\u7684\u9898\u5355\u7684\u591a\u70b9\u6c42\u503c\u677f\u5757\u91cc\u9762\uff0c\u4f46\u662f std \u6839\u672c\u6ca1\u6709\u7528\u5230\u591a\u70b9\u6c42\u503c\n\n\u9996\u5148\u5bb9\u6613\u628a\u9898\u76ee\u8f6c\u5316\u4e3a\u6c42\u4e00\u7ec4 $(r,p)$ \u6ee1\u8db3 $p|F(r)$\uff0c\u4e14 $p\\ge m$\uff0c\u5176\u4e2d $F(r)$ \u662f\u4e00\u4e2a $n-1$ \u6b21\u7684\u591a\u9879\u5f0f\u3002\n\n\u8003\u8651\u5bf9\u968f\u673a\u7684 $r$\uff0c\u628a $F(r)$ \u4e5f\u89c6\u4e3a $[0,p-1]$ \u4e0a\u7684\u968f\u673a\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7c97\u7565\u4f30\u8ba1\u6b64\u65f6\u65e0\u89e3\u7684\u6982\u7387\u5927\u7ea6\u662f $(1-1/p)^p=1/e\\sim 1/3$\uff0c\u6240\u4ee5\u671f\u671b\u8bd5 $3$ \u6b21\uff0c\u5957\u4e0a\u4e00\u4e2a\u4efb\u610f\u6a21\u6570\u591a\u70b9\u6c42\u503c\u5c31\u53ef\u4ee5\u5728 $O(3n\\log^2n)$ \u7684\u65f6\u95f4\u5185\u89e3\u51b3\u3002\n\n\u4f46\u662f\u6211\u4e0d\u60f3\u5199\u4efb\u610f\u6a21\u6570\u591a\u70b9\u6c42\u503c\uff0c\u6240\u4ee5\u6362\u4e2a\u65b9\u6cd5\u3002\n\n\u8003\u8651\u628a\u5c1d\u8bd5\u7684\u6570\u91cf\u964d\u4f4e\u3002\u53d6 $d|p-1$\uff0c\u5982\u679c\u6211\u4eec\u627e\u5230\u4e00\u4e2a $r_0$\uff0c\u4f7f\u5f97 $r_0^{\\frac{p-1}{d}}\\not\\equiv 1\\pmod p$\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u77e5\u9053 $\\delta_p(r_0)|d$ \u4e14 $\\delta_p(r_0)>1$\u3002\u53d6 $d$ \u4e3a\u8d28\u6570\uff0c\u90a3\u4e48\u5c31\u6709 $\\delta_p(r_0)=d$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u4ee3 $r_0$ \u7684\u5e42\uff08\u4e00\u5171 $d$ \u4e2a\uff09\uff0c\u6ce8\u610f\u5230\u6b64\u65f6 $x^{d+t}\\equiv x^t\\pmod p$\uff0c\u6240\u4ee5\u6b64\u65f6\u53ef\u4ee5\u628a\u591a\u9879\u5f0f\u7684\u5e42\u964d\u5230 $d$\uff0c\u8fd9\u6837\u4e00\u6765\u6211\u4eec\u591a\u70b9\u6c42\u503c\u7684\u590d\u6742\u5ea6\u5c31\u964d\u5230\u4e86 $d^2$\u3002\n\n\u4f46\u662f\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u5355\u6b21\u4e0d\u6210\u529f\u7684\u6982\u7387\u63d0\u5347\u5230\u4e86 $(1-1/p)^d$\uff0c\u7c97\u7565\u4f30\u8ba1 $p=2d+1$ \u5927\u6982\u662f $1/\\sqrt e$\uff0c\u5927\u6982\u8981\u591a\u7b97\u51e0\u6b21\u3002\u4e3a\u4e86\u8fdb\u4e00\u6b65\u4f18\u5316\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u679a\u4e3e $p$ \u6539\u4e3a\u679a\u4e3e $d$\uff0c\u6ce8\u610f $d$ \u4ece $2$ \u5f00\u59cb\u679a\u4e3e\u7684\u65f6\u5019\u627e $r_0$ \u4f1a\u5feb\u4e00\u70b9\u3002\n\n\u590d\u6742\u5ea6\u5df2\u7ecf\u662f\u6211\u7b97\u4e0d\u4e86\u7684\u5883\u754c\u4e86\uff0c\u4f46\u662f\u5b98\u65b9 Tutorial \u8bf4\u8fd9\u671f\u671b\u8dd1 $O(\\log p)$ \u8f6e\uff0c\uff0c\u53cd\u6b63\u6211\u4e0d\u4f1a\n\n\u6254\u4e2a\u6781\u7b80\u4e3b\u4e49\u4ee3\u7801\n```cpp\nvoid solve(ll d){\n\trep(i,0,d-1)a[i]=0;\n\trep(i,0,n-1)a[i%d]+=c[i];\n\tfor(ll p=m/d*d+d+1;p<maxn;p+=d)if(!vst[p])for(ll r,r0;;){\n\t\tr0=rnd(2,p-2);\n\t\tif((r=qpow(r0,(p-1)/d,p))==1)continue;\n\t\tr0=r;\n\t\trep(_,1,d){\n\t\t\tll res=0;\n\t\t\tRep(i,d-1,0)res=(res*r%p+a[i])%p;\n\t\t\tif(res==0)cout<<p<<\" \"<<r<<endl,exit(0);\n\t\t\tr=r*r0%p;\n\t\t}\n\t\tbreak;\n\t}\n}\nint main(){\n\tcin>>n>>m>>s>>t;\n\trep(i,0,n-1)c[i]=s[i]-t[i];\n\tprep(1e6);\n\trep(i,2,tot)solve(pr[i]);\n\treturn 0;\n}\n```",
        "postTime": 1634438308,
        "uid": 121027,
        "name": "Spasmodic",
        "ccfLevel": 7,
        "title": "CF1184A3"
    },
    {
        "content": "\u7ed9\u5b9a\u4e00\u4e2a\u54c8\u5e0c\u8fd0\u7b97\uff0c\u5bf9\u4e8e\u4e32$w$\u7684\u8fd0\u7b97\u7ed3\u679c\u4e3a$H_{p}(w)=\\sum\\limits_{i=0}^{|w|-1} w_{i} r^{i} \\bmod p$\u7ed9\u5b9a\u957f\u4e3a$n$\u7684\u4e24\u4e2a\u4e32$s_1,s_2$\uff0c\u6c42\u4e00\u5bf9$<r,p>$\u6ee1\u8db3$H_p(s_1) = H_p(s_2)$\u3002$p\\geq m$\u3002\n\n\u9996\u5148\u8003\u8651\u4e32\u5bf9\u5e94\u5b57\u7b26\u505a\u5dee\uff0c\u539f\u95ee\u9898\u7b49\u4ef7\u4e8e\u6c42\u4e00\u7ec4$<r,p>$\u4f7f\u7b49\u5f0f$\\sum\\limits_{i=0}^{n-1}(a_i - b_i)r^i \\equiv 0(\\bmod p)$\uff0c\u8fd9\u91cc\u8bb0$c_i = (a_i - b_i)$\u3002\u5148\u8003\u8651\u4e00\u4e2a\u975e\u5e38\u66b4\u529b\u4f46\u6b63\u786e\u7684\u601d\u8def\uff1a\u679a\u4e3e\u5927\u4e8e\u7b49\u4e8e\u4e0b\u754c$m$\u7684\u8d28\u6570$p$\uff0c\u7136\u540e\u679a\u4e3e$r\\in[2,p-2]$\uff0c\u6c42\u5bf9\u5e94\u591a\u9879\u5f0f$f(x) = \\sum\\limits_{i=0}^{n-1}c_ix^i$\u7684\u70b9\u503c\uff0c\u53ea\u8981\u6709\u4e00\u4e2a$r$\u5bf9\u5e94\u70b9\u503c\u7b49\u4e8e0\uff0c\u5219\u5176\u4e3a\u7b54\u6848\u3002\n\n\u8fd9\u91cc\u51fa\u9898\u4eba\u7ed9\u4e86\u4e00\u4e2a\u601d\u8def\uff1a\u5bf9\u4e8e **\u968f\u673a** \u8f93\u5165\u7684$r$\uff0c\u5c06$f(r)$\u4e5f\u89c6\u4f5c\u5728$[0,p-1]$\u4e0a\u7684 **\u968f\u673a** \u8f93\u51fa\uff0c\u8c8c\u4f3c\u53ef\u4ee5\u4ece\u6df7\u6c8c\u7406\u8bba\u627e\u5230\u652f\u6301\uff08\u3002\u5373\u6211\u4eec\u9009\u5b9a\u4e00\u4e2a\u7d20\u6570$p$\uff0c\u5982\u679c\u5c06$f(r)$\u89c6\u4f5c\u968f\u673a\u6570\uff0c\u90a3\u4e48\u5bf9\u4e8e$r\\in[2,p-2]$\uff0c\u6240\u6709\u70b9\u503c\u90fd\u4e0d\u7b49\u4e8e0\u7684\u6982\u7387\u4e3a$(1-\\frac{1}{p})^p \\approx e^{-1} \\approx \\frac{1}{3}$\u3002\u7531\u4e8e\u4e0b\u754c$m\\leq 1e5$\uff0c\u89c6$p$\u662f$1e5$\u89c4\u6a21\u7684\uff0c\u5927\u6982\u53d6\u51e0\u6b21$p$\uff0c\u6c42\u5bf9\u5e94\u70b9\u503c\uff0c\u5c31\u6709\u53ef\u80fd\u627e\u5230\u4e00\u4e2a\u70b9\u503c\u662f0\u3002\u5957\u591a\u9879\u5f0f\u591a\u70b9\u6c42\u503c\u5c31\u80fd\u5728\u671f\u671b\u590d\u6742\u5ea6$O(\\alpha Nlog^2N)$\u89e3\u51b3\uff0c$N = 1e5,\\alpha\\approx \\frac{3}{2}$\u3002\n\n\u8fd9\u79cd\u505a\u6cd5\u975e\u5e38\u4e0d*elegant*\uff08\u51fa\u9898\u4eba\u539f\u8bdd\uff09\u3002\u5b9e\u9645\u4e0a\u590d\u6742\u5ea6\u90fd\u5728\u6c42\u70b9\u503c\u4e0a\uff0c\u5982\u679c\u80fd\u8fdb\u4e00\u6b65\u4f18\u5316\u6734\u7d20\u7684\u591a\u70b9\u6c42\u503c\u7684\u590d\u6742\u5ea6$O(n^2)$\uff0c\u5c31\u53ef\u4ee5\u5728\u66f4\u4f18\u79c0\u7684\u671f\u671b\u590d\u6742\u5ea6\u6c42\u5f97\u7b54\u6848\u3002\n\n\u5728\u6a21\u7cfb\u4e0b\uff0c\u82e5$(r,p)=1$\uff0c\u5176\u4e2d\u5bf9\u4e8e$r$\u6709\u6700\u5c0f\u6b63\u6574\u6570$d$\u4f7f\u5f97$r^d \\equiv 1(\\bmod p)$\uff0c\u5219\u79f0$d$\u4e3a$r$\u5728\u6a21$p$\u4e0b\u7684 **\u9636** \u3002\u6613\u77e5$r,r^2,\\dots,r^d$\u5728\u6a21\u7cfb\u4e0b\u4e24\u4e24\u4e0d\u76f8\u540c\uff08\u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\u8bc1\uff09\u3002\u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c$r_0^{p-1}\\equiv 1(\\bmod p),(r_0,p)=1$\uff0c\u5982\u679c\u6709\u6570$r_0^{\\frac{p-1}{d}}\\neq 1(\\bmod p)$\uff0c\u5219\u53ef\u5c06$r_0^{\\frac{p-1}{d}}$\u89c6\u4f5c\u9636\u4e3a$d$\u7684\u6570\uff08\u7531\u4e8e$(r_0^{\\frac{p-1}{d}})^d\\equiv 1(\\bmod p)$\uff09\uff0c\u90a3\u4e48\u4ee4$r=r_0^{\\frac{p-1}{d}}$\uff0c\u5219$r^i \\equiv r^{i\\bmod \\frac{p-1}{d}}(\\bmod p)$\uff0c\u6545\u5f0f\u5b50$f(r) = \\sum\\limits_{i=0}^{n-1}c_ir^i = \\sum\\limits_{i=0}^{d-1}\\alpha_ir^i$\uff08\u628a\u540c\u4f59\u4e3a$i$\u7684\u5408\u5e76\u5728\u4e00\u8d77\uff09\u90a3\u4e48\u591a\u70b9\u6c42\u503c\u7684\u590d\u6742\u5ea6\u5c31\u964d\u5230\u4e86$O(d^2)$\u3002\uff08\u8fd9\u91cc\u8981\u8bf4\u660e\u4e00\u70b9\uff0c$r_0^{\\frac{p-1}{d}}$\u7684\u9636\u4e0d\u4e00\u5b9a\u662f$d$\uff0c\u4e25\u683c\u6765\u8bf4\u662f$d$\u7684\u7ea6\u6570\uff0c\u51fa\u9898\u4eba*tutorial*\u91cc\u5199\u9519\u4e86\uff0c\u4f46\u4e0a\u8ff0\u591a\u9879\u5f0f\u7684\u540c\u4f59\u9879\u5408\u5e76\u662f\u6ca1\u95ee\u9898\u7684\uff09\u3002\n\n\u90a3\u4e48\u6574\u4e2a\u7b97\u6cd5\u7684\u6d41\u7a0b\u5c31\u5f88\u6e05\u6670\u4e86\uff1a\n\n> 1. \u9009\u53d6\u4e00\u4e2a$d$\uff08\u63a8\u8350\u4ece\u5c0f\u5230\u5927\u7684\u8d28\u6570\uff0c\u6bd4\u5982$3,5,7,11,\\dots$\uff09\uff0c\u7136\u540e\u751f\u6210\u4e00\u4e2a\u8d28\u6570$p = ld + 1,p\\ is\\ prime \\land p\\geq m$\n>\n> 2. \u6309\u6a21$d$\u5408\u5e76\u591a\u9879\u5f0f\u7684\u540c\u4f59\u9879\uff0c\u5f97\u5230$f(x) = \\sum\\limits_{i=0}^{d-1}\\alpha_ix^i$\n>\n> 3. \u5728$[2,p-2]$\u4e0brandom\u4e00\u4e2a$r_0$\uff0c\u4f7f\u5f97$r_0^{\\frac{p-1}{d}}\\neq 1(\\bmod p)$\uff0c\u4ee4$r = r_0^{\\frac{p-1}{d}}$\n>\n> 4. \u6c42$f(x)$\u5728$r,r_2,\\dots,r^d$\u4e0b\u7684\u70b9\u503c\uff0c\u6709\u4e00\u4e2a\u4e3a0\u5373\u7ed3\u675f\uff0c\u5426\u5219\u91cd\u590d1,2,3\u3002\n\n~~\u590d\u6742\u5ea6\u6210\u8ff7\uff0c\u4f46\u671f\u671b\u590d\u6742\u5ea6\u8fd8\u86ee\u4f18\u79c0\u7684\uff1f\u4e3b\u8981\u662f\u77ed\uff08~~ \u66f4\u5177\u4f53\u7684\u8bf7\u770b\u4ee3\u7801\u5427\uff1a\n\n```cpp\n//code sourced from kinesis\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define _REP(i,a,b) for(int i = (a) ; i >= (int)(b) ; --i )\n#define REP(i,a,b) for(int i = (a) ; i <= (int)(b) ; ++i )\n#define UREP(i,u) for(int i = p[(u)] ; i + 1 ; i = edge[i].next)\n//iterator: for(int u:x),x is container\n#define x(p) (p).first\n#define y(p) (p).second\n#define pii pair<int,int>\n#define mp(x,y) make_pair((x), (y))\n#define sign(x) (fabs(x) < eps ? 0 : ((x) > 0 ? 1 : -1))\n#define ll long long\n#define L7 __int128//1<<7 bit\n#define ull unsigned long long\nconst int inf = 0x3f3f3f3f;\nconst ll inff = 0x3f3f3f3f3f3f3f3f;\nconst double eps = 1e-9;\n#define ri1(x) scanf(\"%d\", &(x))\n#define ri2(x,y) scanf(\"%d%d\", &(x), &(y))\n#define ri3(x,y,z) scanf(\"%d%d%d\", &(x), &(y), &(z))\n#define ri4(a,b,c,d) scanf(\"%d%d%d%d\", &(a), &(b), &(c), &(d))\n//#define Debug\n#ifdef Debug\n#endif // Debug\nmt19937 rnd(time(0));\n\nconst int maxn = 1e6 + 5,maxm = 1e5 + 5;\n\nnamespace linear_table\n{\n    bool isp[maxn+10];\n    int prime[maxn+10];\n    int p;\n    void init()\n    {\n        int N = maxn;\n        for(int i = 2; i <= N; i++){\n            if(!isp[i]) prime[++p] = i;\n            for(int j = 1; j <= p&&i * prime[j]<=N; j++){\n                isp[i * prime[j]] = true;\n                if(i % prime[j] == 0) break;\n            }\n        }\n    }\n}\nusing linear_table::isp;\n\nchar s1[maxm],s2[maxm];\nint c[maxm],a[maxm];\n\nll qp(ll base,ll n,ll mod)\n{\n    base %= mod;\n    ll res = 1;\n    while(n){\n        if(n&1) (res *= base) %= mod;\n        (base *= base) %= mod;\n        n >>= 1;\n    }\n    return res;\n}\n\nvoid work(int d,int n,int m)\n{\n    REP(i,0,d-1) a[i] = 0;\n    REP(i,0,n-1) a[i%d] += c[i];\n    for(int p = m / d * d + d;p<maxn;p+=d){\n        if(isp[p+1]) continue;\n        int mod = p + 1;\n        int r,r0;\n        while(1){\n            r = rnd() % (mod-2) + 1;\n            if(qp(r,p/d,mod)!=1){\n                r0 = qp(r,p/d,mod),r = r0;\n                for(int i=1;i<=d;i++){\n                    int res = 0,x = 1;\n                    for(int j=0;j<d;j++) (res += 1LL * a[j] * x % mod) %= mod,x = 1LL * x * r % mod;\n                    if(!res){\n                        printf(\"%d %d\\n\",mod,r);\n                        exit(0);\n                    }\n                    r = 1LL * r * r0 % mod;\n                }\n                break;\n            }\n        }\n    }\n}\n\nint main()\n{\n    #ifndef ONLINE_JUDGE\n    freopen(\"in.txt\",\"r\",stdin);//cf needn't delete this\n    #endif // ONLINE_JUDGE\n    linear_table::init();\n    int n,m;\n    ri2(n,m);\n    scanf(\"%s%s\",s1,s2);\n    for(int i=0;i<n;i++) c[i] = s1[i] - s2[i];\n    for(int i=3;i<=1000000;i++) if(!isp[i]) work(i,n,m);\n    return 0;\n}\n```",
        "postTime": 1602428677,
        "uid": 132396,
        "name": "Kinesis",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1184A3 \u3010Heidi Learns Hashing (Hard)\u3011"
    },
    {
        "content": "**\u539f\u9898\u94fe\u63a5**\uff1a[Click](https://www.luogu.com.cn/problem/CF1184A3)\u3002\n\n**\u524d\u7f6e\u77e5\u8bc6**\uff1a[\u4efb\u610f\u6a21\u6570 Chirp Z-Transform](https://www.luogu.com.cn/problem/P6828)\u3002\n\n-----------------------------\n\n\u672c\u9898\u89e3\u505a\u6cd5\u4e0e\u5176\u4ed6\u7684\u7565\u663e\u4e0d\u540c\uff0c\u4f46\u6574\u4f53\u601d\u8def\u4e00\u81f4\uff0c\u90fd\u662f\u8003\u8651**\u5982\u4f55\u5feb\u901f\u6c42\u51fa\u70b9\u503c**\u3002\n\n\u8bb0\uff1a\n\n$$F(x)=\\sum_{i=0}^{n-1}(w_{1,i}-w_{2,i})x^i$$\n\n\u90a3\u4e48\u9898\u76ee\u5c31\u662f\u8981\u6c42\u51fa\u4e00\u5bf9 $P,r$\uff0c\u4f7f\u5f97\uff1a\n\n$$F(r)\\equiv 0\\pmod P$$\n\n\u5176\u4e2d $m\\le P\\le 10^9,2\\le r\\le P - 2$\uff0c$P$ \u662f\u8d28\u6570\u3002\n\n\u56e0\u4e3a $m\\le 10^5$\uff0c\u6240\u4ee5\u76f4\u63a5\u5047\u8bbe $P\\in [10^5,10^9]$ \u5373\u53ef\u3002\n\n\u6700\u6734\u7d20\u7684\u505a\u6cd5\u662f\u5bf9\u4e8e\u6240\u6709 $1\\le i\\le P-1$\uff0c\u76f4\u63a5\u6c42\u51fa $F(i)\\bmod P$\uff0c\u770b\u770b\u54ea\u4e2a\u70b9\u503c\u4e3a $0$ \u5c31\u8f93\u51fa\u54ea\u4e2a\u3002\n\n\u591a\u9879\u5f0f\u591a\u70b9\u6c42\u503c\u5f53\u7136\u53ef\u4ee5\u505a\u5230\uff0c\u4f46\u6ca1\u5fc5\u8981\u3002\n\n\u6ce8\u610f\u5230\u5bf9\u4e8e $P$ \u7684\u539f\u6839 $g$\uff0c$g^0,g^1,...,g^{P-2}$ \u53ef\u4ee5\u53d6\u904d $1$ \u5230 $P-1$ \u6240\u6709\u6574\u6570\u3002\u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u5982\u4f55\u6c42\u51fa $F(g^i)$\uff0c\u5176\u4e2d $0\\le i\\le P-2$\u3002\n\n\u8fd9\u4e0d\u5c31\u662f Chirp Z-Transform \u561b\uff01\u53ea\u8981\u786e\u5b9a\u4e86 $P$ \u548c $g$\uff0c\u76f4\u63a5\u8fdb\u884c CZT \u5373\u53ef\u3002\n\n------------\n\n**\u7ec6\u8282\u5904\u7406**\uff1a\n\n+ \u6a21\u6570 $P$ \u8981\u5982\u4f55\u786e\u5b9a\uff1f\n\n\u5efa\u8bae\u9009\u62e9\u51e0\u4e2a\u56fa\u5b9a\u7684\u6a21\u6570\uff0c\u6bd4\u5982 $100003,100019$ \u8fd9\u79cd\u3002\u8fd9\u6837\u5e72\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u4e0d\u9700\u8981\u5728\u7ebf\u6c42\u539f\u6839\u3002\n\n\u4e00\u4e2a\u6a21\u6570\u662f\u4e0d\u591f\u7684\u3002\u56e0\u4e3a\u5bf9\u4e8e\u67d0\u4e9b $P$\uff0c\u662f\u4e0d\u5b58\u5728 $r$ \u6765\u6ee1\u8db3\u9898\u610f\u7684\u3002\u7ecf\u8fc7\u5b9e\u8df5\uff0c$7$ \u4e2a\u7edd\u5bf9\u591f\u7528\u3002\n\n+ \u53ef\u4ee5\u9009\u62e9\u80fd NTT \u7684\u6a21\u6570\u5417\uff1f\n\n\u7406\u8bba\u53ef\u884c\uff0c\u4f46\u5b9e\u8df5\u56f0\u96be\u3002\u56e0\u4e3a\u80fd NTT \u7684\u6a21\u6570\u901a\u5e38\u8f83\u5927\uff0c\u4f8b\u5982 $786433$\uff0c\u800c\u6a21\u6570\u8d8a\u5927\uff0c\u8981\u627e\u5230\u4e00\u4e2a\u6ee1\u8db3\u7684 $r$ \u7684\u6982\u7387\u5c31\u8d8a\u5c0f\u3002\u5e76\u4e14\u968f\u7740\u6a21\u6570\u589e\u5927\uff0c\u6211\u4eec\u5fc5\u7136\u65e0\u6cd5\u6c42\u51fa\u6240\u6709 $F(g^i)$\uff0c\u8fd9\u6837\u4e5f\u4f1a\u4f7f\u5f97\u627e\u5230 $r$ \u7684\u6982\u7387\u53d8\u5c0f\u3002\n\n\u7b14\u8005\u5c1d\u8bd5\u8fc7\u7528 $786433, 7340033, 5767169, 8650753$ \u7b49\u505a NTT \u6a21\u6570\uff0c\u6ca1\u80fd AC\uff0c\u6545\u5efa\u8bae\u4f7f\u7528 MTT\u3002\n\n------------\n\n**\u7b97\u6cd5\u6d41\u7a0b**\uff1a\n\n+ \u8bfb\u5165\u6570\u636e\uff0c\u6c42\u51fa $F(x)$\u3002\n\n+ \u679a\u4e3e\u9884\u5148\u51c6\u5907\u597d\u7684\u6a21\u6570\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6a21\u6570 $P$ \u53ca\u5176\u539f\u6839 $g$\uff0c\u505a\u4e00\u6b21 CZT \u6c42\u51fa\u6240\u6709 $F(g^i)$\uff0c\u82e5\u6709 $F(g^i)\\equiv 0$\uff0c\u8f93\u51fa $P,g^i$ \u5e76\u7ed3\u675f\u7a0b\u5e8f\u3002\n\n+ \u5426\u5219\u8fd4\u56de\u7b2c\u4e8c\u6b65\u7ee7\u7eed\u3002\n\n\n------------\n\n**\u4ee3\u7801**\uff1a\n\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio> \n#include <cmath>\n#define ll long long\nusing namespace std;\n\nconst int Mx = 524290;\nconst double Pi = acos(-1);\nint Mod, Prt;\n\nll FastPow(ll a, ll b){\n\tll res = 1;\n\twhile(b){\n\t\tif(b & 1) res = res * a % Mod;\n\t\tb >>= 1, a = a * a % Mod;\n\t}\n\treturn res;\n}\n\nll Inv(ll x){ return FastPow(x % Mod, Mod - 2);}\n\nint Rev[Mx], NowLen;\n\nvoid CalRev(int Len){\n\tint Temp = 1, Pw = -1;\n\twhile(Temp < Len) ++Pw, Temp <<= 1;\n\tNowLen = Len;\n\tfor(int i = 1; i < Len; ++i) Rev[i] = (Rev[i >> 1] >> 1) | ((i & 1) << Pw);\n}\n\nstruct Complex{\n\tdouble a, b;\n\tComplex Conj(){ return {a, -b};}\n\tComplex operator + (const Complex &x) const { return {a + x.a, b + x.b};}\n\tComplex operator - (const Complex &x) const { return {a - x.a, b - x.b};}\n\tComplex operator * (const Complex &x) const { return {a * x.a - b * x.b, a * x.b + b * x.a};}\n\tComplex operator += (const Complex &x) { return (*this) = {a + x.a, b + x.b};}\n\tComplex operator -= (const Complex &x) { return (*this) = {a - x.a, b - x.b};}\n\tComplex operator *= (const Complex &x) { return (*this) = {a * x.a - b * x.b, a * x.b + b * x.a};}\n}Temp;\n\nComplex URt[Mx]; \nvoid PreUnitRoot(int Len){ for(int i = 0; i < Len; i += 2) URt[i >> 1] = {cos(i * Pi / Len), sin(i * Pi / Len)};}\n\nstruct Poly{\n\tComplex F[Mx];\n\tint Len;\n\t\n\tvoid DFT(){\n\t\tfor(int i = 1; i < Len; ++i) if(i < Rev[i]) swap(F[i], F[Rev[i]]);\n\t\tfor(int i = 1; i < Len; i <<= 1){\n\t\t\tfor(int j = 0, ch = Len / i / 2; j < Len; j += (i << 1)){\n\t\t\t\tfor(int k = 0, pos = -ch; k < i; ++k)\n\t\t\t\t\tTemp = F[k + i + j] * URt[pos += ch], \n\t\t\t\t\tF[k + i + j] = F[k + j] - Temp, F[k + j] = F[k + j] + Temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvoid IDFT(){\n\t\tfor(int i = 1; i < Len; ++i) if(i < Rev[i]) swap(F[i], F[Rev[i]]);\n\t\tfor(int i = 1; i < Len; i <<= 1){\n\t\t\tfor(int j = 0, ch = Len / i / 2; j < Len; j += (i << 1)){\n\t\t\t\tfor(int k = 0, pos = -ch; k < i; ++k)\n\t\t\t\t\tTemp = F[k + i + j] * URt[pos += ch].Conj(), \n\t\t\t\t\tF[k + i + j] = F[k + j] - Temp, F[k + j] = F[k + j] + Temp;\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tvoid MTT(const Poly &G);\n}MT1, MT2, MT3;\n\nvoid Poly::MTT(const Poly &G){ // (*this) = (*this) * G\n\tfor(int i = 0; i < Len; ++i){\n\t\tint FF = F[i].a, XF = G.F[i].a;\n\t\tMT1.F[i].a = FF >> 15, MT1.F[i].b = FF & 32767,\n\t\tMT3.F[i].a = XF >> 15, MT3.F[i].b = XF & 32767;\n\t}\n\t\n\tMT1.Len = MT2.Len = MT3.Len = Len;\n\tMT1.DFT(), MT3.DFT();\n\tMT2.F[0] = MT1.F[0].Conj();\n\tfor(int i = 1; i < Len; ++i) MT2.F[i] = MT1.F[Len - i].Conj();\n\tfor(int i = 0; i < Len; ++i) MT1.F[i] *= MT3.F[i], MT2.F[i] *= MT3.F[i];\n\tMT1.IDFT(), MT2.IDFT();\n\t\n\tll t1, t2, t3;\n\tfor(int i = 0; i < Len; ++i){\n\t\tMT1.F[i].a /= Len, MT1.F[i].b /= Len, MT2.F[i].a /= Len;\n\t\tt1 = (ll)((MT2.F[i].a + MT1.F[i].a) / 2 + 0.5) % Mod;\n\t\tt2 = (ll)(MT1.F[i].b + 0.5) % Mod;\n\t\tt3 = (ll)((MT2.F[i].a - MT1.F[i].a) / 2 + 0.5) % Mod;\n\t\tF[i].a = ((((t1 << 15) + t2) << 15) + t3) % Mod;\n\t}\n}\n\nPoly CZT1, CZT2;\n\nint CR[Mx];\n\nvoid CZT(int n, int m, int c, int F[]){ // F[0 ~ n] F(c ^ (0 ~ m))\n\tfor(int i = 0; i < Mx; ++i) CZT1.F[i].a = CZT2.F[i].a = CZT1.F[i].b = CZT2.F[i].b = 0;\n\tmemset(CR, 0, sizeof CR);\n\tint cr = Inv(c), l = n + m, L = (n > m ? n : m);\n\t\n\tll pdc = 1, prc = 1, cp = 1;\n\tCR[0] = 1;\n\tfor(int i = 1; i <= L; ++i) CR[i] = CR[i - 1] * prc % Mod, prc = prc * cr % Mod;\n\tfor(int i = 0; i <= l; ++i)\n\t\tCZT2.F[i].a = cp, cp = cp * pdc % Mod, pdc = pdc * c % Mod;\n\t\n\tfor(int i = 0; i <= n; ++i) CZT1.F[n - i].a = 1ll * F[i] * CR[i] % Mod;\n\t\n\tint Len = 1;\n\twhile(Len <= l) Len <<= 1;\n\tPreUnitRoot(Len), CalRev(Len), CZT1.Len = Len, CZT1.MTT(CZT2);\n\t\n\tfor(int i = 0; i <= m; ++i) F[i] = (ll)CZT1.F[i + n].a * CR[i] % Mod;\n}\n\nconst int ModList[] = {100003, 100019, 100043, 100049, 100057, 100069, 100103};\nconst int PrtList[] = {2, 2, 2, 6, 10, 10, 5};\n\nvoid SetMod(int id){ Mod = ModList[id], Prt = PrtList[id];}\n\nint F[Mx], T[Mx];\n\nint main(){\n\tint n, useless;\n\tscanf(\"%d%d\", &n, &useless);\n\tn -= 1;\n\t\n\tchar t;\n\tfor(int i = 0; i <= n; ++i) scanf(\" %c\", &t), F[i] = t;\n\tfor(int i = 0; i <= n; ++i) scanf(\" %c\", &t), F[i] -= t;\n\t\n\tfor(int i = 0; i < 6; ++i){\n\t\tSetMod(i);\n\t\tint m = Mod - 2;\n\t\t\n\t\tmemset(T, 0, sizeof T);\n\t\tfor(int j = 0; j <= n; ++j) T[j] = (F[j] + Mod) % Mod;\n\t\t\n\t\tCZT(n, m, Prt, T);\n\t\tfor(int j = 0, R = 1; j <= m; ++j, R = R * Prt % Mod){\n\t\t\tif(T[j] == 0 && R >= 2 && R <= Mod - 2){\n\t\t\t\tprintf(\"%d %d\\n\", Mod, R);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```\n\n\n------------\n\n**\u540e\u8bdd**\uff1a\n\n\u610f\u5916\u53d1\u73b0\u8fd9\u79cd\u505a\u6cd5\u7684\u6548\u7387\u5f88\u9ad8\uff0c\u6700\u6162\u7684\u70b9\u4e0d\u8d85 $600 \\text{ ms}$\u3002",
        "postTime": 1670134895,
        "uid": 375984,
        "name": "\u98de\u96e8\u70df\u96c1",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1184A3 Heidi Learns Hashing (Hard)"
    }
]