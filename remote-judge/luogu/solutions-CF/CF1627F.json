[
    {
        "content": "\u8bb0\u5de6\u4e0b\u89d2\u70b9\u4e3a $(0,0)$\uff0c\u53f3\u4e0a\u89d2\u70b9\u4e3a $(k,k)$\u3002\n\n\u91cd\u8981\u6027\u8d28\uff1a\u5207\u51fa\u6765\u7684\u4e24\u4e2a\u56fe\u5f62\u4e00\u5b9a\u5173\u4e8e\u4e2d\u5fc3 $(\\frac{k}{2},\\frac{k}{2})$ \u4e2d\u5fc3\u5bf9\u79f0\u3002\n\n\u8bc1\u660e\u4e0d\u96be\uff0c\u53ea\u8981\u8003\u8651\u4e2d\u5fc3\u70b9\u8fde\u5230\u67d0\u6761\u8fb9\u4e0a\uff0c\u5f62\u6210\u7684\u90e8\u5206\u622a\u7ebf\uff0c\u5bb9\u6613\u53d1\u73b0\u53ef\u4ee5\u76f4\u63a5\u786e\u5b9a\u5269\u4e0b\u90e8\u5206\u622a\u7ebf\u5c31\u662f\u5173\u4e8e\u4e2d\u5fc3\u70b9\u4e2d\u5fc3\u5bf9\u79f0\u786e\u5b9a\u7684\u3002\n\n\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u88ab\u622a\u7ebf\u6a2a\u7a7f\u7684 $1\\times 2$ square \u6700\u5c11\u3002\n\n\u7531\u4e8e\u622a\u7ebf\u7684\u4e2d\u5fc3\u5bf9\u79f0\u6027\u8d28\uff0c\u53ea\u9700\u8981\u627e\u4e2d\u70b9\u5230\u8fb9\u7684\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u6761\u8def\u5f84\u4e0a\u5288\u5f00\u7684 square \u6700\u5c11\u3002\n\n\u663e\u7136\u53ef\u4ee5\u5bf9 $(k+1)^2$ \u4e2a\u683c\u70b9\u4e4b\u95f4\u8fde\u8fb9\u6c42\u89e3 $(\\frac{k}{2},\\frac{k}{2})$ \u4e3a\u8d77\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n\u6ce8\u610f\u5230\u622a\u7ebf\u7684\u4e2d\u5fc3\u5bf9\u79f0\u8981\u6c42\uff0c\u6240\u4ee5\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u662f \u5b83\u5288\u5f00\u7684 square \u6570\u91cf\u52a0\u4e0a\u5b83\u5173\u4e8e\u4e2d\u5fc3\u70b9\u5bf9\u79f0\u7684\u8fb9\u5288\u5f00\u7684 square \u6570\u91cf\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2\\log n^2)$\uff0c\u51fa\u6210 $500$ \u611f\u89c9\u5c0f\u4e86\uff0c\u9a97\u6211\u53bb\u60f3\u4e86 $n^3$ \u505a\u6cd5\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define op(x) ((x&1)?x+1:x-1)\n#define odd(x) (x&1)\n#define even(x) (!odd(x))\n#define lc(x) (x<<1)\n#define rc(x) (lc(x)|1)\n#define lowbit(x) (x&-x)\n#define Max(a,b) (a>b?a:b)\n#define Min(a,b) (a<b?a:b)\n#define next Cry_For_theMoon\n#define il inline\n#define pb(x) push_back(x)\n#define is(x) insert(x)\n#define sit set<int>::iterator\n#define mapit map<int,int>::iterator\n#define pi pair<int,int>\n#define ppi pair<int,pi>\n#define pp pair<pi,pi>\n#define fr first\n#define se second\n#define vit vector<int>::iterator\n#define mp(x,y) make_pair(x,y)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int uint;\ntypedef double db;\nusing namespace std;\nconst int MAXN=1e5+10,MAXK=600,INF=1e9;\nconst int px[4]={-1,0,1,0},py[4]={0,1,0,-1};\nint t,n,k;\nint cnt[MAXK][MAXK][4];\nint vis[MAXK*MAXK],dis[MAXK*MAXK];\nvector<pi>e[MAXK*MAXK];\nstruct Node{\n    int u,dis;\n    bool operator<(const Node& n2)const{return dis>n2.dis;}\n};\npriority_queue<Node>q;\nint H(int i,int j){return i*(k+1)+(j+1);}\nint D(int x,int y,int d){\n    int dx=k/2-x,dy=k/2-y;\n    x+=2*dx;y+=2*dy;\n    if(d==0)d=2;\n    else if(d==1)d=3;\n    else if(d==2)d=0;\n    else if(d==3)d=1;\n    return cnt[x][y][d];\n}\nint valid(int x,int y){return x>=0 && x<=k && y>=0 && y<=k;}\nvoid solve(){\n    scanf(\"%d%d\",&n,&k);\n    rep(x,0,k)rep(y,0,k)rep(z,0,3)cnt[x][y][z]=0;\n    rep(i,1,n){\n        int x1,y1,x2,y2;scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n        if(x1==x2){\n            if(y1>y2)swap(y1,y2);\n            cnt[x1][y1][0]++;\n            cnt[x1-1][y1][2]++;\n        }else{\n            if(x1>x2)swap(x1,x2);\n            cnt[x1][y1-1][1]++;\n            cnt[x1][y1][3]++;\n        }\n    }\n    int s=H(k/2,k/2),end=H(k,k)+1;\n    rep(i,0,end)e[i].clear(),vis[i]=0,dis[i]=INF;\n    rep(i,0,k)rep(j,0,k){\n        if(i==0 || j==0 || i==k || j==k){\n            e[H(i,j)].pb(mp(end,0));\n        }else{\n            rep(d,0,3){\n                int x=i+px[d],y=j+py[d];\n                if(!valid(x,y))continue;\n                e[H(i,j)].push_back(mp(H(x,y),cnt[i][j][d]+D(i,j,d)));\n            }\n        }\n    }\n    dis[s]=0;q.push(((Node){s,0}));\n    while(q.size()){\n        Node tmp=q.top();q.pop();\n        if(vis[tmp.u])continue;\n        vis[tmp.u]=1;\n        for(auto p:e[tmp.u]){\n            if(dis[p.fr]>dis[tmp.u]+p.se){\n                dis[p.fr]=dis[tmp.u]+p.se;\n                q.push(((Node){p.fr,dis[p.fr]}));\n            }\n        }\n    }\n    printf(\"%d\\n\",n-dis[end]);\n}\nint main(){\n    scanf(\"%d\",&t);\n    while(t--)solve();\n    return 0;\n}\n\n```",
        "postTime": 1642547320,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010CF1627F\u3011Not Splitting"
    },
    {
        "content": "# CF1627F\n\n### \u9898\u610f\u7b80\u8ff0\n\u5b9a\u4e49\u4e00\u4e2a\u5143\u7d20\u662f\u7531\u65b9\u683c\u56fe\u4e2d\u76f8\u90bb\u65b9\u683c\u7ec4\u6210\u7684\u4e8c\u5143\u7ec4\u3002\n\n\u79f0\u4e00\u4e2a\u7531\u82e5\u5e72\u5143\u7d20\u7ec4\u6210\u7684\u6570\u7ec4\u662f**\u5f3a**\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u53ef\u4ee5\u6cbf\u65b9\u683c\u7eb8\u4e0a\u7684\u683c\u7ebf\u5c06\u65b9\u683c\u7eb8\u5206\u4e3a\u4e24\u4e2a**\u5168\u7b49\u7684**\u90e8\u5206\uff0c\u4f7f\u5f97\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e2d\u5305\u542b\u7684\u4e24\u4e2a\u65b9\u683c\u90fd\u5904\u4e8e\u540c\u4e00\u90e8\u5206\u3002\n\n\u7ed9\u5b9a\u4e00\u4e2a $k\\times k$ \u7684\u65b9\u683c\u7eb8\u548c $n$ \u4e2a\u5143\u7d20\uff0c\u8bf7\u6c42\u51fa\u81f3\u5c11\u9700\u8981\u5220\u9664\u591a\u5c11\u4e2a\u5143\u7d20\uff0c\u624d\u80fd\u4f7f\u5f97\u5269\u4f59\u7684\u5143\u7d20\u7ec4\u6210\u7684\u6570\u7ec4\u662f**\u5f3a**\u7684\u3002\n\n$1\\leq n\\leq 10^5,2\\leq k\\leq 500,2\\mid k$\u3002\n\n### \u9898\u76ee\u5206\u6790\n\u5bf9\u4e8e\u4e00\u4e2a\u5408\u6cd5\u7684\u5206\u5272\u65b9\u6848\uff0c\u9700\u8981\u5220\u9664\u7684\u5143\u7d20\u5373\u4e3a\u88ab\u5206\u5272\u7ebf\u5212\u4e3a\u4e24\u534a\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5efa\u7acb\u4e00\u4e2a\u6700\u77ed\u8def\u6a21\u578b\u3002\n\n\u5c06\u65b9\u683c\u4f5c\u4e3a\u70b9\uff0c\u683c\u7ebf\u4f5c\u4e3a\u8fb9\u3002\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5143\u7d20\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u683c\u7ebf\u8fb9\u6743\u4e3a $1$\uff0c\u5176\u5b83\u8fb9\u6743\u4e3a $0$\u3002\u5219\u6211\u4eec\u5c06 $(\\frac{k}{2},\\frac{k}{2})$ \u4f5c\u4e3a\u8d77\u70b9\uff0c\u4efb\u610f\u8fb9\u754c\u4f5c\u4e3a\u7ec8\u70b9\u6c42\u89e3\u6700\u77ed\u8def\uff0c\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u6b63\u786e\u7684\u7b54\u6848\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u5168\u7b49\u53ef\u4ee5\u65cb\u8f6c\uff0c\u56e0\u6b64\u7ecf\u8fc7\u4e00\u4e2a\u70b9 $(x,y)$ \u65f6\uff0c\u5e94\u5f53\u89c6\u4f5c $(k-x,k-y)$ \u4e5f\u88ab\u7ecf\u8fc7\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(k^2\\log k)$\u3002\n\nCode\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define mktp make_tuple\nusing namespace std;\nint t,n,k;\nbool vis[510][510];\nmap<tuple<int,int,int,int>,int>mp;\nstruct node\n{\n\tint x,y,w;\n\tbool operator < (node b) const\n\t{\n\t\treturn w>b.w;\n\t}\n};\nint dx[]={1,0,-1,0},dy[]={0,1,0,-1};\nint main()\n{\n\tscanf(\"%d\",&t);\n\twhile(t--)\n\t{\n\t\tscanf(\"%d%d\",&n,&k);\n\t\tfor(int i=1,r1,c1,r2,c2;i<=n;i++)\n\t\t{\n\t\t\tscanf(\"%d%d%d%d\",&r1,&c1,&r2,&c2);\n\t\t\tif(r1>r2)swap(r1,r2);\n\t\t\tif(c1>c2)swap(c1,c2);\n\t\t\tif(r1==r2)mp[mktp(r1-1,c1,r1,c1)]++,mp[mktp(r1,c1,r1-1,c1)]++;\n\t\t\telse mp[mktp(r1,c1-1,r1,c1)]++,mp[mktp(r1,c1,r1,c1-1)]++;\n\t\t}\n\t\tpriority_queue<node>q;\n\t\tq.push((node){k/2,k/2,0});\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tnode u=q.top();q.pop();\n\t\t\tif(vis[u.x][u.y])continue;\n\t\t\tvis[u.x][u.y]=1,vis[k-u.x][k-u.y]=1;\n\t\t\tif(!u.x||u.x==k||!u.y||u.y==k)\n\t\t\t{\n\t\t\t\tprintf(\"%d\\n\",n-u.w);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor(int i=0;i<4;i++)\n\t\t\t{\n\t\t\t\tnode v=(node){u.x+dx[i],u.y+dy[i],0};\n\t\t\t\tif(vis[v.x][v.y])continue;\n\t\t\t\tv.w=u.w+mp[mktp(u.x,u.y,v.x,v.y)]+mp[mktp(k-u.x,k-u.y,k-v.x,k-v.y)];\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<=k;i++)\n\t\t\tfor(int j=0;j<=k;j++)vis[i][j]=0;\n\t\tmp.clear();\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1642298575,
        "uid": 333574,
        "name": "Tyyyyyy",
        "ccfLevel": 7,
        "title": "CF1627F\u9898\u89e3"
    }
]