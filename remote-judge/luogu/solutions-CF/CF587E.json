[
    {
        "content": "\u672c\u9898\u7684\u505a\u6cd5\u548c\u8fd9\u9053\u9898\u5f88\u7c7b\u4f3c[P5607 Ynoi2013\u65e0\u529b\u56de\u5929NOI2017](https://www.luogu.com.cn/problem/P5607),\u662f\u4e00\u9053\u5f88\u597d\u7684\u7ebf\u6027\u57fa\u7ec3\u624b\u7684\u9898\u76ee\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u7ebf\u6027\u57fa\uff0c\u4ed6\u662f**\u79bb\u7ebf\u6570\u636e\u7ed3\u6784**\uff0c\u4e0d\u80fd\u5220\u9664\u6570\u3002\u6240\u4ee5\u4e0d\u80fd\u652f\u6301\u533a\u95f4\u4fee\u6539\u3002\n\n\u90a3\u4e48\u6839\u636e\u7ebf\u6027\u57fa\u7684\u6027\u8d28\uff0c\u53ea\u8981\u662f\u4e24\u4e2a\u7ebf\u6027\u57fa\u7684\u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u4e14\u5176\u4e2d\u4e00\u4e2a\u7ebf\u6027\u57fa\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u88ab\u53e6\u4e00\u4e2a\u7ebf\u6027\u57fa\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u8868\u793a\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u7ebf\u6027\u57fa\u662f\u7b49\u4ef7\u7684\u3002\n\n\u5bf9\u4e8e\u6b64\u9898\uff0c\u7ef4\u62a4$b$\u6570\u7ec4\uff0c\u5176\u4e2d\u521d\u59cb\u65f6$b_i=a_i \\ xor \\ a_{i-1}$,\u7279\u522b\u7684$b_1=a_1$\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u7ef4\u62a4**\u524d\u7f00\u5f02\u6216**\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c$l \\quad r$\uff0c\u90a3\u4e48\u5c31\u9009\u53d6$a_l$\u548c$b_{l+1},b_{l+2},\\cdots,b_r$\u6240\u7ec4\u6210\u7684\u7ebf\u6027\u57fa\uff0c\u5047\u8bbe\u6b63\u5f0f\u8be2\u95ee\u7684\u5e8f\u5217\u662f$c_1,c_2,\\cdots,c_n$,\u90a3\u4e48$c_l=a_l$,\u5bf9\u4e8e$i \\in(l,r]$\u90fd\u6709$c_i=b_i \\ xor \\ c_{i-1}$\u3002\n\n\u6240\u4ee5\u7528$a_l$\u548c$b_{l+1},\\cdots,b_r$\u7ec4\u6210\u7684\u7ebf\u6027\u57fa\u4e0e$c_l,\\cdots,c_r$\u7ec4\u6210\u7684\u7ebf\u6027\u57fa\u7b49\u4ef7\u3002\n\n\u6240\u4ee5\u53ea\u7528\u901a\u8fc7\u4e24\u4e2a\u7ebf\u6bb5\u6811\uff0c\u5206\u522b\u7ef4\u62a4$b$\u7684\u7ebf\u6027\u57fa\u652f\u6301**\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2**\u6570\u7ec4$a$\u652f\u6301**\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2**\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7ef4\u62a4$b$\u7684\u7ebf\u6027\u57fa\uff0c\u53ea\u9700\u8981\u5728\u6811\u4e0a\u5408\u5e76\u7ebf\u6027\u57fa\u5373\u53ef\uff0c\u5408\u5e76\u65b9\u5f0f\u662f\uff0c\u5c06\u5176\u4e2d\u4e00\u4e2a\u7ebf\u6027\u57fa\u4e2d\u7684\u5143\u7d20\u66b4\u529b\u63d2\u5165\u5230\u53e6\u5916\u4e00\u4e2a\u7ebf\u6027\u57fa\u4e2d\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u53ea\u7528\u8f93\u51fa$2^{cnt}$\u5176\u4e2d$cnt$\u8868\u793a\u8be5\u7ebf\u6027\u57fa\u4e2d\u5143\u7d20\u4e2a\u6570\u3002\n\n\u6ce8\u610f\u7ebf\u6027\u57fa\u5728\u7ebf\u6bb5\u6811\u4e0a\u5408\u5e76\u65f6\u8981\u5c06\u539f\u6709\u7684\u7ebf\u6027\u57fa\u6e05\u7a7a\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\Theta(n\\log n\\log w)$,\u7a7a\u95f4\u590d\u6742\u5ea6$\\Theta(n\\log w)$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<queue>\n#include<vector>\n#define ll long long\n#define ull unsigned long long\nusing namespace std;\nconst int maxn=2e5+5;\ninline int getint()\n{\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-')f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tx=(x<<3)+(x<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn (f==1)?x:-x;\n}\nstruct xxj\n{\n\tstatic const int maxm=31;\n\tint a[32];\n\tinline void clear()\n\t{\n\t\tmemset(a,0,sizeof(a));\n\t}\n\tinline void insert(int x)\n\t{\n\t\tfor(int i=maxm;i>=0;--i)\n\t\t{\n\t\t\tif(x&(1<<i))\n\t\t\t{\n\t\t\t\tif(a[i])x^=a[i];\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ta[i]=x;\n\t\t\t\t\treturn ;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tinline void merge(xxj b)\n\t{\n\t\tfor(int i=maxm;i>=0;--i)\n\t\t{\n\t\t\tif(b.a[i])insert(b.a[i]);\n\t\t}\n\t}\n\tinline int query()\n\t{\n\t\tint cnt=0;\n\t\tfor(int i=maxm;i>=0;--i)if(a[i])cnt++;\n\t\treturn (1<<cnt);\n\t}\n};\nint a[maxn];\nint b[maxn],n,m,opt,x,y;\nnamespace A\n{\n\tstruct segmentree\n\t{\n\t\t#define ls u<<1\n\t\t#define rs u<<1|1\n\t\tint sum[maxn<<2],tag[maxn<<2];\n\t\tinline void pushdown(int u)\n\t\t{\n\t\t\tif(tag[u]==0)return ;\n\t\t\ttag[ls]^=tag[u];\n\t\t\ttag[rs]^=tag[u];\n\t\t\tsum[ls]^=tag[u];\n\t\t\tsum[rs]^=tag[u];\n\t\t\ttag[u]=0;\n\t\t}\n\t\tinline void build(int u,int l,int r)\n\t\t{\n\t\t\tif(l==r)\n\t\t\t{\n\t\t\t\tsum[u]=a[l];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\tbuild(ls,l,mid);\n\t\t\t\tbuild(rs,mid+1,r);\n\t\t\t}\n\t\t}\n\t\tinline void update(int u,int l,int r,int x,int y,int v)\n\t\t{\n\t\t\tif(x<=l&&y>=r)\n\t\t\t{\n\t\t\t\ttag[u]^=v;\n\t\t\t\tsum[u]^=v;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\tpushdown(u);\n\t\t\t\tif(x<=mid)update(ls,l,mid,x,y,v);\n\t\t\t\tif(y>mid)update(rs,mid+1,r,x,y,v);\n\t\t\t}\n\t\t}\n\t\tinline int query(int u,int l,int r,int x)\n\t\t{\n\t\t\tif(l==r)return sum[u];\n\t\t\telse\n\t\t\t{\n\t\t\t\tpushdown(u);\n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\tif(x<=mid)return query(ls,l,mid,x);\n\t\t\t\telse return query(rs,mid+1,r,x);\n\t\t\t}\n\t\t}\n\t}tree;\n}\nstruct segmentree\n{\n\t#define ls u<<1\n\t#define rs u<<1|1\n\txxj a[maxn<<2];\n\tinline void pushup(int u)\n\t{\n\t\ta[u].clear();\n\t\ta[u].merge(a[ls]);\n\t\ta[u].merge(a[rs]);\n\t}\n\tinline void build(int u,int l,int r)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\ta[u].insert(b[l]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tbuild(ls,l,mid);\n\t\t\tbuild(rs,mid+1,r);\n\t\t\tpushup(u);\n\t\t}\n\t}\n\tinline void update(int u,int l,int r,int x,int v)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\ta[u].clear();\n\t\t\ta[u].insert(v);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(x<=mid)update(ls,l,mid,x,v);\n\t\t\telse update(rs,mid+1,r,x,v);\n\t\t\tpushup(u);\n\t\t}\n\t}\n\tinline xxj query(int u,int l,int r,int x,int y)\n\t{\n\t\tif(x<=l&&y>=r)\n\t\t{\n\t\t\treturn a[u];\n\t\t}\n\t\telse\n\t\t{\n\t\t\txxj val;\n\t\t\tval.clear();\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(x<=mid)val.merge(query(ls,l,mid,x,y));\n\t\t\tif(y>mid)val.merge(query(rs,mid+1,r,x,y));\n\t\t\treturn val;\n\t\t}\n\t}\n}tree;\nint main()\n{\n\tn=getint(),m=getint();\n\tfor(int i=1;i<=n;++i)a[i]=getint(),b[i]=a[i]^a[i-1];\n\tA::tree.build(1,1,n);\n\ttree.build(1,1,n);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\topt=getint(),x=getint(),y=getint();\n\t\tif(opt==1)\n\t\t{\n\t\t\tint val=getint();\n\t\t\tA::tree.update(1,1,n,x,y,val);\n\t\t\tif(y!=n)tree.update(1,1,n,y+1,b[y+1]^=val);\n\t\t\ttree.update(1,1,n,x,b[x]^=val);\n\t\t}\n\t\telse\n\t\t{\n\t\t\txxj now;\n\t\t\tnow.clear();\n\t\t\tnow.insert(A::tree.query(1,1,n,x));\n\t\t\tif(x!=y)now.merge(tree.query(1,1,n,x+1,y));\n\t\t\tprintf(\"%d\\n\",now.query());\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u7ebf\u6027\u57fa\u5408\u5e76\u662f\u4e24\u4e2a$\\log$\u7684\u3002",
        "postTime": 1588855487,
        "uid": 333789,
        "name": "lory1608",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF587E \u3010Duff as a Queen\u3011"
    }
]