[
    {
        "content": "\u56de\u6587\u4e32\u7684\u8bdd\uff0c\u6700\u591a\u5b58\u57281\u4e2a\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u7ed9\u5b9a\u7684\u4e32\uff0c\u53ea\u8981\u6c42\u51fa\u6709\u54ea\u4e9b\u4e32\u51fa\u73b0\u4e86\u5947\u6570\u6b21\u5373\u53ef\u3002\u5076\u6570\u6b21\u7684\u663e\u7136\u53ef\u4ee5\u5bf9\u6d88\u6389\u3002\u800c\u5947\u6570\u6b21\u7684\u4e5f\u53ea\u7528\u4fdd\u75591\u4e2a\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u5c0f\u5199\u5b57\u6bcd\u6620\u5c04\u621026\u4f4d\u4e8c\u8fdb\u5236\u4e2d\u7684\u6bcf\u4e00\u4f4d\uff0c\u5219\u5bf9\u4e8e\u6bcf\u4e2a\u4e32\uff0c\u679a\u4e3e\u5b83\u7684\u5b57\u6bcd\uff0c\u7136\u540e\u5f02\u6216\u3002\u6700\u540e\u5f97\u5230\u7684\u4e8c\u8fdb\u5236\u6570\u5c31\u6070\u597d\u4e3a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\u7ec4\u6210\u7684\u3002\n\n\u7136\u540e\uff0c\u4e00\u904d\u626b\u8fc7\u6765\uff0c\u7528\u4e00\u4e2a\u6876\u8bb0\u5f55\u6bcf\u4e2a\u72b6\u6001\u7684\u51fa\u73b0\u6b21\u6570\u3002\n\n\u6ee1\u8db3\u6761\u4ef6\u7684\u56de\u6587\u4e32\u7684\u72b6\u6001\u4e2d\u6700\u591a\u67091\u4e2a1\uff0c\u5bf9\u6bcf\u4e2a\u56de\u6587\u72b6\u6001\uff0c\u67e5\u8be2\u6876\u5185\u548c\u5f53\u524d\u72b6\u6001$a_i$\u5f02\u6216\u540e\u80fd\u53d8\u6210\u56de\u6587\u72b6\u6001\u7684\u6570\u7684\u4e2a\u6570\u5373\u53ef\u3002\n\n$2^{26}$\u7684int\u6570\u7ec4\u6070\u597d\u5360\u4e86256MB\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528map\u4ee3\u66ff\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u591a\u4e2a$\\log$\u3002\u4e5f\u53ef\u4ee5\u7528unordered_map\u3002\n\n\u4ee3\u7801\u5947\u77ed\u3002\n\n## Code\uff1a\n```cpp\n#include<map>\n#include<cstdio>\n#include<iostream>\nstd::map<int,int>b;\nint a[100005],n;\nchar s[1000005];\nlong long ans=0;\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%s\",s);\n\t\tint&f=a[i];\n\t\tfor(int t=0;s[t];++t)f^=1<<(s[t]-'a');\n\t}\n\tb[a[1]]=1;\n\tfor(int i=2;i<=n;++i){\n\t\tans+=b[a[i]];\n\t\tfor(int j=0;j<26;++j)ans+=b[a[i]^(1<<j)];\n\t\t++b[a[i]];\n\t}\n\tstd::cout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1543215546,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1045I \u3010Palindrome Pairs\u3011"
    },
    {
        "content": " \u81f3\u5c11\u622a\u6b62\u73b0\u5728\uff082018.9.23\uff09\u8fd9\u9898\u7adf\u7136\u662f\u4e2a\u9ed1\u9898\u3002\u3002\n \n \u4f46\u8fd9\u4e2a\u5927\u6982\u5c31\u662f\u9ec4+/\u7eff-\u7684\u6c34\u5e73\u5427\u3002\u3002\n \n \u8fdb\u5165\u6b63\u9898\u3002\n \n####  \u9898\u76ee\u7ed9\u4e86\u4f60$n$\u4e2a\u5b57\u7b26\u4e32\uff0c\u6c42\u53d6\u51fa\u4e24\u4e2a\u540e\u8fd9\u4e24\u4e2a\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u56de\u6587\u4e32\u7684\u4e2a\u6570\u3002\uff08\u53ef\u4ee5\u4efb\u610f\u6253\u4e71\u987a\u5e8f\uff09\n\n\u5bf9\u4e8e\u66b4\u529b\u5f88\u597d\u60f3\uff0cn^2\u5927\u6982\u5c31\u662f\u679a\u4e3e\u4e24\u4e2a\u5b57\u7b26\u4e32\u770b\u6bcf\u79cd\u5c0f\u5199\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\u5982\u679c\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u4e86\u5947\u6570\u4e2a\u5c31\u53ef\u4ee5\u3002\u4f46\u662fACM\u8d5b\u5236+1e5\u6570\u636e\u663e\u7136\u662f\u4e0d\u884c\u7684\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 aabccd \u5176\u5b9e\u7b49\u4ef7\u4e8e bd \u56e0\u4e3aaa\u548cbb\u5728\u4e0e\u5176\u4ed6\u4e32\u7ec4\u5408\u540e\u6709\u4e0e\u6ca1\u6709\u65e0\u533a\u522b\u3002\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u4e32\uff0c\u5bf9\u4e8ea,b,c,d,..z\u8fd926\u4e2a\u5b57\u7b26\u53ea\u6709\u4e24\u79cd\u60c5\u51b5   \n1. \u51fa\u73b0\u4e86  \n2. \u6ca1\u6709\u51fa\u73b0\n\n\u6240\u4ee5\u8bf4\u5bf9\u4e8e\u6bcf\u4e2a\u4e32\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a26\u4f4d\u4e8c\u8fdb\u5236\u4e32\u3002\u7136\u540e\u8003\u8651\u4ece1\u5230n\u6bcf\u4e2a\u4e32\u8fdb\u884c\u679a\u4e3e\uff0c\u5bf9\u4e8e\u5f53\u524d\u4e32\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u5f53\u524d\u7b2ci\u4e2a\u4e32\u548ci\u524d\u9762\u7684\u6240\u6709\u4e32\u6709\u54ea\u4e9b\u53ef\u4ee5\u6784\u6210\u56de\u6587\u3002\u5bf9\u4e8e\u4e24\u4e2a\u4e32\u53ef\u4ee5\u6784\u6210\u56de\u6587\u53c8\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\u4e24\u4e2a\u4e32\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u76f8\u7b49\u3002\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u4e2a\u5b57\u7b26\u96c6\u90fd\u662f\u8981\u4e48\u4e24\u8fb9\u5404\u6709\u4e00\u4e2a\uff0c\u8981\u4e48\u4e24\u8fb9\u90fd\u6ca1\u6709\u3002\n\n\u7b2ci\u4e2a\u4e32\u53bb\u6389\u4e00\u4e2a\u5b57\u7b26\uff08\u628a\u4e00\u4e2a\u4f4d\u4e0a1\u53d8\u62100\u540e\uff09\u4e24\u4e2a\u4e32\u76f8\u7b49\uff0c\u76f8\u5f53\u4e8e\u4e2d\u95f4\u6709\u4e2a\u5b57\u7b26\u7684\u56de\u6587\u4e32\u3002\n\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u53ea\u9700\u8981\u628a\u524d\u9762\u6240\u6709\u7684\u4e8c\u8fdb\u5236\u5b58\u5165\u4e00\u4e2ahash\u8868\uff08\u6253cf\u5b9e\u73b0\u65f6\u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u7528unordered_map\uff09\u7136\u540e\u5224\u65ad\u3002\u7531\u4e8e\u9700\u8981\u5bf9\u6240\u6709\u4f4d\u76841\u8fdb\u884c\u53bb\u6389\u7684\u5c1d\u8bd5\uff0c\u590d\u6742\u5ea6O(nlogn)\n\n\u4ee3\u7801\u5b9e\u73b0\u8fd8\u6709\u4e9b\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff01 \n\nAccode\n```cpp\n#pragma GCC optimize (\"O3\")\n#include \"iostream\"\n#include \"algorithm\"\n#include \"cstring\"\n#include \"cstdio\"\n#include \"unordered_map\"\nusing namespace std;\ntypedef long long ll;\nunordered_map<ll,ll> S;\n#define MAXN 1000007\nll num[MAXN];\nll n;ll A[26],res;\nint main(){\n    cin >> n;getchar();\n    for(ll i=0;i<n;++i){\n        static char ch;\n        memset(A,0,sizeof A);\n        while(ch = getchar())\n            if(ch!='\\n')++A[ch-'a'];\n            else break;\n        for(ll j=0;j<26;++j)\n            num[i] |= ((A[j]%2)<<j);\n    }\n    sort(num,num+n);\n    for(ll i=0;i<n;++i){\n        res += S[num[i]];\n        for(ll j=0;j<26;++j)\n            if((num[i]>>j)&1) res += S[num[i]^(1<<j)];\n        ++S[num[i]];\n    }\n    cout << res;\n}\n```",
        "postTime": 1537696677,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1045I \u3010Palindrome Pairs\u3011"
    },
    {
        "content": "\u4e00\u9053\u4e71\u641e\u9898\n\n\u6839\u636e\u5b57\u7b26\u51fa\u73b0\u7684\u5947\u5076\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u5316\u6210\u4e00\u4e2a$26$\u5143\u7ec4\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5b57\u7b26\u7528$0/1$\u8868\u793a\u8fd9\u4e2a\u5143\u7d20\u51fa\u73b0\u5076\u6570$/$\u5947\u6570\u6b21\uff0c\u53ef\u4ee5\u76f4\u63a5\u8868\u793a\u6210\u4e00\u4e2a$26$\u4f4d\u7684\u4e8c\u8fdb\u5236\u6570\n\n\u7136\u540e\u6240\u8c13\u5339\u914d\u5c31\u662f\u4e24\u4e2a\u6570\u7684\u6d77\u660e\u8ddd\u79bb$<=1$\uff0c\u76f4\u63a5\u5c06\u8fd9\u4e9b\u6570\u66b4\u529b\u6392\u5e8f\uff0c\u6d77\u660e\u8ddd\u79bb$=0$\u5c31\u662f\u627e\u6709\u591a\u5c11\u4e2a\u76f8\u7b49\u7684\u6570\uff0c$=1$\u6bcf\u6b21\u679a\u4e3e\u6539\u53d8\u4e00\u4f4d\u7136\u540e\u53bb\u6240\u6709\u6570\u5b57\u91cc\u627e\u5c31\u884c\uff0c\u53ef\u4ee5\u4e00\u4e2a$upper\\_bound$\u548c$lower\\_bound$\u4e00\u6c14\u5475\u6210\uff0c\u8be6\u89c1\u4ee3\u7801\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(26nlogn)$\n\n```cpp\n#include<bits/stdc++.h> \n#define fo(i, a, b) for (int i = (a); i <= (b); ++i)\n#define fd(i, a, b) for (int i = (a); i >= (b); --i)\n#define edge(i, u) for (int i = head[u], v = e[i].v; i; i = e[i].nxt, v = e[i].v)\n#define pb push_back\n#define F first\n#define S second\n#define ll long long\n#define inf 1000000007\n#define mp std::make_pair\n#define ls (u << 1)\n#define rs (u << 1 | 1)\n#define mod 998244353\n#define eps 1e-4\n#define lowbit(x) (x & -x)\n#define N 100005\nint n;\nint head[N], tot, a[N], u[N];\nstruct node{\n    int nxt, v, cnt;\n}e[N << 1];\nint tmp[26];\nchar ch;\nll ans;\ninline void read (int &x)\n{\n    memset(tmp, 0, sizeof tmp);\n    ch = getchar();\n    while (!isalpha(ch)) ch = getchar();\n    while (isalpha(ch)) ++tmp[ch - 'a'], ch = getchar();\n    fo (i, 0, 25) x = (x << 1) | (tmp[i] & 1);\n}\nint now, x;\nint main ()\n{\n    scanf(\"%d\", &n);\n    fo (i, 1, n) { read(a[i]); u[i] = a[i]; }\n    std::sort(u + 1, u + n + 1);\n    fo (i, 1, n)\n    {\n        ans += std::upper_bound(u + 1, u + n + 1, a[i]) - std::lower_bound(u + 1, u + n + 1, a[i]) - 1;\n        fo (j, 0, 25)\n        {\n            now = a[i] ^ (1 << j);\n            x = std::upper_bound(u + 1, u + n + 1, now) - std::lower_bound(u + 1, u + n + 1, now);\n            ans += x;\n        }\n    }\n    printf(\"%lld\", ans >> 1);\n}\n```",
        "postTime": 1555069401,
        "uid": 13137,
        "name": "HomuraCat",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1045I \u3010Palindrome Pairs\u3011"
    }
]