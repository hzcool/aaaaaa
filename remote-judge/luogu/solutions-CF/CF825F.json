[
    {
        "content": "\u9898\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e32 $s$ \uff0c\u5176\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u5b50\u4e32\u53ef\u4ee5\u538b\u7f29\u6210 \u201c\u6570\u5b57+\u91cd\u590d\u7684\u5b50\u4e32\u201d \u7684\u5f62\u5f0f\uff0c\u6570\u5b57\u7b97\u957f\u5ea6\u3002\n\n\u53ea\u91cd\u590d\u4e00\u6b21\u7684\u4e32\u4e5f\u8981\u538b\u3002\u6c42\u538b\u7f29\u540e\u7684\u6700\u5c0f\u957f\u5ea6\u3002\n\n$|s|\\leq 8000$ \u3002\n\n---\n\n\u5b57\u7b26\u4e32\u7684\u9898\u76ee\u8fd8\u662f\u4e0d\u592a\u719f\u7ec3\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a $\\rm KMP$ \u4f18\u5316\u7684 $\\rm DP$ \u7b97\u6cd5\u3002\n\n\u4f46\u8fd9\u9898\u7684\u89e3\u6cd5\u4e0d\u6b62\u4e8e\u6b64\uff0c\u751a\u81f3\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u80fd\u7b97\u662f\u5c0f\u4f17\u89e3\u6cd5\u3002\u8c8c\u4f3c  $\\rm hashing$  \u548c $\\rm string \\ suffix\\  structures$ \u6216\u8005 \u4e71\u641e \u90fd\u53ef\u4ee5\u641e\u51fa\u6765\u3002  \n\n----\n\n\u5bb9\u6613\u60f3\u5230\u7528 $dp[i]$ \u8868\u793a\u538b\u7f29\u5230 $i$ \u65f6\u7684\u7b54\u6848\uff0c\u6613\u77e5\u8fd9\u662f\u6ca1\u6709\u540e\u6548\u6027\u7684\u3002\n\n\u4e14 $dp[i]$ \u4e00\u5b9a\u662f\u8981\u5728\u6240\u6709\u7684 $dp[j] \\ (1\\leq j < i)$ \u8f6c\u79fb\uff0c\u56e0\u4e3a\u4ed4\u7ec6\u601d\u8003\u540e\u53d1\u73b0\u4e0d\u5b58\u5728\u4efb\u4f55\u8d2a\u5fc3\u7b56\u7565\u53ef\u4ee5\u4f18\u5316\u8f6c\u79fb\uff0c\u5982 $\\rm aaaaabbabb$ \u524d\u9762\u7684\u8fde\u7eed\u7684\u6700\u540e\u4e00\u4e2a $\\rm a$ \u5e94\u8be5\u662f\u653e\u5728\u540e\u9762\u8ddf\u4f18\u3002\n\n\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u5927\u81f4\u7684 $\\rm DP$ \u7684\u6a21\u578b\uff0c\u90a3\u4e48\u5177\u4f53\u5982\u4f55\u4f18\u5316\u8f6c\u79fb\uff1f\n\n\u4e3a\u627e\u5230\u91cd\u590d\u7684\u4e32\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 $\\rm KMP$ \u7b97\u6cd5\u7684 $\\rm next$ \u6570\u7ec4\u3002\n\n\u7531\u4e8e $\\rm next$ \u7684\u610f\u4e49\u662f\u540e\u7f00\u53ef\u4ee5\u5339\u914d\u7684\u6700\u957f\u524d\u7f00\uff0c\u5f88\u663e\u7136 $[\\rm next[i],i]$ \u662f\u4ee5 $i$ \u4e3a\u7ed3\u5c3e\u7684\u5faa\u73af\u4e32\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u90fd\u8dd1\u4e00\u8fb9\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\u7684 $\\rm KMP $ \uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u70b9\u5411\u540e\u8f6c\u79fb\u5373\u53ef\u3002\n\n---\n\n\u4ee3\u7801:\uff08\u5176\u4e2d  $cnt[i]$ \u6570\u7ec4\u8868\u793a\u7684\u662f $i$ \u7684\u4f4d\u6570\uff09\n\n```cpp\nconst int maxn = 8800;\nchar s[maxn];\nint cnt[maxn], dp[maxn], Next[maxn];\nvoid kmp(char *s, int len, int Next[])\n{\n    Next[0] = Next[1] = 0;\n    for(int i=1; i<len; ++i)\n    {\n        int j = Next[i];\n        while(j && s[i]!=s[j]) j=Next[j];\n        Next[i+1] = s[j]==s[i]?j+1:0;\n    }\n}\nint main()\n{\n    scanf(\"%s\",s);\n    int len = strlen(s);\n    for(int i=1; i<=len; ++i)\n        cnt[i] = cnt[i/10]+1, \n\t\tdp[i] = i+1;\n    for(int i=0; i<len; ++i)\n    {\n        kmp(s+i,len-i,Next);\n        for(int j=1; j+i<=len; ++j)\n        if(j%(j-Next[j]) == 0) dp[j+i] = min(dp[j+i], dp[i]+cnt[j/(j-Next[j])]+(j-Next[j]));\n        else dp[j+i] = min(dp[j+i], dp[i]+1+j);\n    }\n    printf(\"%d\\n\",dp[len]);\n}\n```",
        "postTime": 1605940091,
        "uid": 288460,
        "name": "xzggzh1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF825F \u3010String Compression\u3011"
    },
    {
        "content": "## \u601d\u8def\n\u8003\u8651\u5230\u4e00\u4e2a\u5f88 $\\text{Naive}$ \u7684\u89e3\u6cd5\uff1a\n\n\u6211\u4eec dp \u524d $i$ \u4e2a\u5b57\u7b26\u538b\u7f29\u7684\u6700\u77ed\u957f\u5ea6\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u957f\u5ea6\u4e3a $j$ \u7684\u5b50\u4e32\uff0c\u518d\u679a\u4e3e\u8fd9\u4e2a\u5b50\u4e32\u7684\u5faa\u73af\u6b21\u6570 $k$\uff0c\u7136\u540e\u5982\u679c\u5b57\u7b26\u4e32\u6700\u540e\u7684 $jk$ \u4e2a\u5b57\u7b26\u662f\u5faa\u73af\u8282\u4e3a $j$ \u7684\u5faa\u73af\u4e32\u5c31\u66f4\u65b0 dp\u3002\u5224\u65ad\u5faa\u73af\u4e32\u53ef\u4ee5\u7528\u53cc hash $O(1)$ \u5b9e\u73b0\u3002\n\n\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f $O(n^2\\ln n)$\u3002\u770b\u8d77\u6765\u8fc7\u4e0d\u53bb\u3002\n\n**\u4f46\u662f\u771f\u7684\u8fc7\u4e0d\u53bb\u5417\uff1f**\n\n\u6211\u4eec\u63d0\u4ea4\uff0c\u53d1\u73b0 TLE on 16\u3002\n\n\u6211\u4eec\u5927\u80c6\u731c\u6d4b\u6570\u636e\u4e0d\u5361\u5355 hash\uff0c\u4e8e\u662f\u628a\u53cc hash \u6539\u6210\u5355 hash\uff0cTLE on 23\u3002\n\n**\u4f46\u662f\u771f\u7684\u8fc7\u4e0d\u53bb\u5417\uff1f**\n\n\u6ce8\u610f\u5230\u6211\u4eec\u5728 Fuyuki \u7684\u7a7a\u95f4\u91cc\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u57fa\u4e8e ``uint128`` \u7684\u5feb\u901f\u5bf9 $998244353$ \u53d6\u6a21\u7684\u65b9\u6cd5\uff0c\u4e8e\u662f\u6211\u4eec\u8d3a\u8fc7\u6765\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u6709\u4e00\u4e9b\u9ad8\u660e\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u6211\u4eec\u8d3a\u8fc7\u6765\u3002\n\n\u6ce8\u610f\u5230 C++17(64) \u6bd4 C++17 \u5feb\uff0c\u6211\u4eec\u9009\u4e0a\u3002\n\n\u7136\u540e\u5c31 AC \u5566\uff0c\u7528\u65f6\u534a\u79d2\u4e0d\u5230\uff01\n## \u4ee3\u7801\n```\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\ninline unsigned long long calc(const unsigned long long&x){return x-(__uint128_t(x)*9920937979283557439ull>>93)*998244353;}\nchar s[10003];\nint ans[10003];\nlong long p1=998244353;\ninline int qp1(int x,int y)\n{\n\tint res=1;\n\tfor(int now=x; y; y>>=1,now=calc(now*now)) if(y&1) res=calc(res*now);\n\treturn res;\n}\nint a1[10003];\nint C[10003];\nint i1[10003],i2[10003];\ninline int Hash(int l,int r)\n{\n\treturn calc((p1+a1[r]-a1[l-1])*i1[l-1]);\n}\ninline int calca(int x)\n{\n\tint res=0;\n\twhile(x) x/=10,++res;\n\treturn res;\n}\nsigned main()\n{\n \tscanf(\"%s\",s+1);\n \tint n=strlen(s+1);\n \tfor(int i=1; i<=n; i++) ans[i]=i+1;\n \ti1[0]=1;\n \tlong long awa=qp1(131,p1-2);\n \tfor(int i=1; i<=n; i++) i1[i]=calc(i1[i-1]*awa);\n \tfor(int i=1; i<=n; i++) C[i]=calca(i);\n \tfor(int i=1,b1=1; i<=n; i++,b1=calc(b1*131))\n \ta1[i]=(a1[i-1]+b1*(s[i]-'a'))%p1;\n \tfor(int i=1; i<=n; i++) for(int j=1; j<=i; j++)\n \t{\n \t\tint H=Hash(i-j+1,i);\n \t\tfor(int k=i-j+1,t=1; k>0; k-=j,++t)\n \t\t{\n \t\t\tif(Hash(k,k+j-1)!=H) break;\n \t\t\tans[i]=min(ans[i],ans[k-1]+j+C[t]); \n \t\t}\n \t}   \n \tprintf(\"%lld\\n\",ans[n]);\n\treturn 0;\n}\n```",
        "postTime": 1611650196,
        "uid": 111055,
        "name": "dead_X",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF825F \u3010String Compression\u3011"
    },
    {
        "content": "\u5b57\u7b26\u4e32\u840c\u840c\u9898\u3002\n\n\u521a\u5f00\u59cb\u7684\u65f6\u5019\u770b\u6210\u5b57\u7b26\u4e32\u53ef\u4ee5\u5d4c\u5957\u538b\u7f29\uff0c\u60f3\u7528\u533a\u95f4 DP \u4e71\u641e\u3002\u5927\u5bb6\u4e0d\u8981\u5b66 FGgirl\uff0cFGgirl \u4e0d\u597d\u3002\n\n$f_i$ \u8868\u793a\u538b\u7f29\u5b8c\u524d $i$ \u4f4d\uff0c\u6700\u5c11\u7684\u957f\u5ea6\u662f\u591a\u5c11\u3002\u8f6c\u79fb\u5f88\u7b80\u5355\uff0c\u5173\u952e\u662f\u8fd9\u4e2a\u95ee\u9898\uff1a\n\n> \u6c42\u51fa\u533a\u95f4 $[l,r]$ \u4e2d\u7684\u6700\u957f\u5faa\u73af\u8282\u662f\u591a\u5c11\u3002\n\n\u5982\u679c\u4f60\u505a\u8fc7 [\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P4391) \u5c31\u4f1a\u77e5\u9053\uff0c\u7b54\u6848\u5c31\u662f $n-next_n$\u3002\u5177\u4f53\u8bc1\u660e\u53ef\u4ee5\u770b\u90a3\u9053\u9898\u7684\u9898\u89e3\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u540e\u7f00\uff0c\u505a\u4e00\u904d KMP \u5373\u53ef\u3002\n\n\u6ce8\u610f:\n\n- \u770b\u90a3\u9053\u9898\u539f\u9898\u53ef\u4ee5\u77e5\u9053\uff0c\u7528\u8fd9\u79cd\u65b9\u6cd5\u6c42\u51fa\u7684\u6700\u5927\u5468\u671f\uff0c\u4e0d\u4e00\u5b9a\u662f $n$ \u7684\u56e0\u6570\uff0c\u6240\u4ee5\u8f6c\u79fb\u65f6\u8981\u5224\u65ad\uff0c\u53ea\u6709\u5468\u671f\u957f\u5ea6\u6574\u9664 $n$ \u65f6\u624d\u80fd\u8fd9\u6837\u8f6c\u79fb\uff0c\u5426\u5219\u53ea\u80fd\u6574\u4e2a\u5b57\u4e32\u538b\u7f29\u3002\n\n- KMP \u662f\u5bf9\u4e8e\u6bcf\u4e2a\u540e\u7f00\u6c42\u7684\uff0c\u4e0b\u6807\u4e0d\u8981\u50cf\u6211\u4e00\u6837\u5199\u9519\u3002\n\n- \u8f6c\u79fb\u65f6\uff0c\u8fd8\u8981\u8003\u8651\u6570\u5b57\u7684\u4f4d\u6570\u3002\n\n\u795d\u60a8 AC\u3002\n\n[**Code**](https://www.luogu.com.cn/paste/leanx16q)",
        "postTime": 1650632103,
        "uid": 407564,
        "name": "Rushroom",
        "ccfLevel": 7,
        "title": "CF825F String Compression"
    }
]