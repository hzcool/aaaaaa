[
    {
        "content": "[Codeforces \u9898\u76ee\u4f20\u9001\u95e8](https://codeforces.com/contest/1413/problem/F) & [\u6d1b\u8c37\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1413F)\n\n\u5176\u5b9e\u662f\u4e00\u9053\u8fd8\u7b97\u4e00\u822c\u7684\u9898\u7f62\u2026\u2026\u5927\u6982\u662f\u6700\u8fd1\u5237\u957f\u94fe\u5256\u5206\uff0c\u88ab[\u67d0\u9053\u957f\u94fe\u5256\u5206\u4e0e\u76f4\u5f84\u7ed3\u5408\u7684\u9898](https://codeforces.ml/contest/526/problem/G)\u7206\u8e29\u4e4b\u540e\u5c31\u70b9\u5f00\u4e86\u8fd9\u9898\u3002\n\n\u672c\u9898\u7684\u96be\u70b9\u5c31\u5728\u4e8e\u770b\u51fa\u4e00\u4e2a\u6027\u8d28\uff1a\u6700\u957f\u8def\u5f84\u7684\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\u4e00\u5b9a\u662f\u76f4\u5f84\u7684\u67d0\u4e00\u4e2a\u7aef\u70b9\u3002\n\n\u8bc1\u660e\uff1a\u9996\u5148\u6211\u4eec\u627e\u51fa\u539f\u6811\u7684\u4e00\u4e2a\u76f4\u5f84\uff0c\u5982\u679c\u76f4\u5f84\u4e0a\u6807\u8bb0\u8fb9\u7684\u4e2a\u6570\u4e3a\u5076\u6570\u90a3\u663e\u7136\u8fd9\u6761\u76f4\u5f84\u5c31\u662f\u6700\u4f18\u89e3\uff0c\u7b26\u5408\u9898\u610f\uff0c\u5426\u5219\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u627e\u51fa\u7684\u76f4\u5f84\u4e3a $AB$\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u51fa\u4e86\u4e00\u6761\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84 $CD$\uff0c\u4e0b\u8bc1\u6211\u4eec\u603b\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574 $CD$ \u7684\u7aef\u70b9\uff0c\u627e\u51fa\u4e00\u6761\u4ee5 $A$ \u6216 $B$ \u4e3a\u7aef\u70b9\u7684\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u957f\u5ea6\u4e0d\u52a3\u4e8e\u8def\u5f84 $CD$\u3002\n\n\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n- \u82e5 $CD$ \u4e0e $AB$ \u6ca1\u6709\u516c\u5171\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u603b\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u70b9 $E$ \u5c5e\u4e8e\u8def\u5f84 $CD$\uff0c\u5e76\u4e14 $E$ \u5230\u76f4\u5f84 $AB$ \u7684\u6700\u77ed\u8def\u5f84\u4e0a\u4e0d\u5305\u542b\u5c5e\u4e8e\u8def\u5f84 $CD$ \u7684\u8fb9\uff0c\u5047\u8bbe\u76f4\u5f84 $AB$ \u4e0a\u5230 $E$ \u8ddd\u79bb\u6700\u77ed\u7684\u70b9\u4e3a $F$\uff0c\u7531 $CD$ \u4e3a\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\u53ef\u77e5 $CE,DE$ \u4e24\u6761\u8def\u5f84\u4e0a\u6807\u8bb0\u8fb9\u7684\u5947\u5076\u6027\u76f8\u540c\uff0c\u800c\u7531 $AB$ \u4e0d\u7b26\u5408\u9898\u610f\u53ef\u77e5 $AF,BF$ \u8def\u5f84\u4e0a\u6807\u8bb0\u8fb9\u5947\u5076\u6027\u4e0d\u540c\uff0c\u4ece\u800c $AE,BE$ \u5947\u5076\u6027\u4e5f\u4e0d\u540c\uff0c\u6839\u636e\u62bd\u5c49\u539f\u7406\uff0c\u5728 $AE,BE$ \u4e2d\u603b\u6709\u4e00\u8005\u5947\u5076\u6027\u4e0e $CE$ \u76f8\u540c\uff0c\u4e0d\u59a8\u8bbe\u4e3a $AF$\uff0c\u90a3\u4e48\u8003\u8651\u8def\u5f84 $AC$\uff0c\u7531\u4e8e $AE,CE$ \u5947\u5076\u6027\u76f8\u540c\uff0c\u6545\u8def\u5f84 $AC$ \u7b26\u5408\u6761\u4ef6\uff0c\u800c\u7531 $AB$ \u4e3a\u76f4\u5f84\u53ef\u77e5 $AE\\ge DE$\uff0c\u5426\u5219 $BD$ \u957f\u5ea6\u5c31\u8d85\u8fc7 $AB$ \u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u957f\u5ea6\u4e0d\u52a3\u4e8e $CD$ \u7684\u8def\u5f84 $AB$\u3002\n\n  ![](https://cdn.luogu.com.cn/upload/image_hosting/yq1chiaz.png)\n\n- \u82e5 $CD,AB$ \u6709\u516c\u5171\u90e8\u5206\uff0c\u4e0d\u59a8\u8bbe\u516c\u5171\u90e8\u5206\u4e3a $EF$\uff0c\u6839\u636e\u8def\u5f84 $EF$ \u4e0a\u6807\u8bb0\u8fb9\u7684\u5947\u5076\u6027\u53c8\u53ef\u5206\u4e3a\u4e24\u7c7b\uff0c\u82e5 $EF$ \u4e0a\u6709\u5947\u6570\u6761\u6807\u8bb0\u8fb9\uff0c\u7531 $AB$ \u4e0d\u5408\u6cd5\u53ef\u77e5 $AE,BF$ \u4e0a\u6807\u8bb0\u8fb9\u5947\u5076\u6027\u76f8\u540c\uff0c$CD$ \u5408\u6cd5\u53ef\u77e5 $CE,DF$ \u4e0a\u6807\u8bb0\u8fb9\u5947\u5076\u6027\u4e0d\u540c\uff0c\u6545 $CE,DF$ \u4e2d\u603b\u6709\u4e00\u8005\u5947\u5076\u6027\u4e0e $AE$ \u76f8\u540c\uff0c\u82e5\u4e3a $DF$\uff0c\u5219 $AF$ \u6ee1\u8db3\u6761\u4ef6\uff0c\u5426\u5219 $CE$ \u4e0e $AE$ \u5947\u5076\u6027\u76f8\u540c\uff0c$AE$ \u7531\u4e0e $BF$ \u5947\u5076\u6027\u76f8\u540c\uff0c\u6545 $BF,CE$ \u5947\u5076\u6027\u76f8\u540c\uff0c\u6545 $BE$ \u6ee1\u8db3\u6761\u4ef6\uff0c\u800c\u6839\u636e\u76f4\u5f84\u7684\u6027\u8d28\u53ef\u77e5 $AF,BE$ \u7684\u957f\u5ea6\u90fd\u4e0d\u5c0f\u4e8e $CD$ \u7684\u957f\u5ea6\uff0c\u7b26\u5408\u9898\u610f\u3002\u82e5 $EF$ \u4e0a\u6709\u5076\u6570\u6761\u6807\u8bb0\u8fb9\uff0c\u4eff\u7167\u4e4b\u524d\u7684\u63a8\u7406\u8fc7\u7a0b\u53ef\u77e5 $AF,BE$ \u4e2d\u6070\u597d\u5b58\u5728\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\uff0c\u5f97\u8bc1\u3002\n\n  ![](https://cdn.luogu.com.cn/upload/image_hosting/pb0s5jeu.png)\n\n\u63a5\u4e0b\u6765\u8003\u8651\u77e5\u9053\u8fd9\u4e2a\u6027\u8d28\u4e4b\u540e\u600e\u6837\u89e3\u9898\uff0c\u6211\u4eec\u5148\u4e24\u8fb9 DFS \u5728\u7ebf\u6027\u65f6\u95f4\u5185\u6c42\u51fa\u6811\u7684\u76f4\u5f84\uff0c\u7136\u540e\u4ee5\u4e24\u4e2a\u76f4\u5f84\u5206\u522b\u4e3a\u6839\u518d\u8dd1\u4e00\u904d DFS \u6c42\u51fa DFS \u5e8f\uff08\u8fd9\u6837\u65b9\u4fbf\u540e\u9762\u4fee\u6539\uff0c\u53ef\u7528 DFS \u5e8f\u5c06\u5b50\u6811\u64cd\u4f5c\u8f6c\u5316\u4e3a\u533a\u95f4\u64cd\u4f5c\uff09\u5e76\u5206\u522b\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u533a\u95f4 $[l,r]$ \u7ef4\u62a4\u4e24\u4e2a\u503c $mx0,mx1$\uff0c\u5206\u522b\u8868\u793a DFS \u5e8f\u5728 $[l,r]$ \u4e2d\u5e76\u4e14\u5230\u5f53\u524d\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u6709**\u5076\u6570**\u6761\u6807\u8bb0\u8fb9\u7684\u70b9\u4e2d\uff0c\u6df1\u5ea6\u7684\u6700\u5927\u503c\uff1b\u4ee5\u53caDFS \u5e8f\u5728 $[l,r]$ \u4e2d\u5e76\u4e14\u5230\u5f53\u524d\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u6709**\u5947\u6570**\u6761\u6807\u8bb0\u8fb9\u7684\u70b9\u4e2d\uff0c\u6df1\u5ea6\u7684\u6700\u5927\u503c\uff0c\u4fee\u6539\u5219\u76f8\u5f53\u4e8e\u5bf9\u5b50\u6811\u6253\u6807\u8bb0\uff0c\u8fd9\u4e2a\u53ef\u7528\u533a\u95f4\u61d2\u6807\u8bb0\u5b9e\u73b0\uff0c\u4e0b\u63a8\u6807\u8bb0\u65f6\u4ea4\u6362\u8282\u70b9\u7684 $mx0,mx1$ \u5373\u53ef\uff0c\u67e5\u8be2\u5219\u76f4\u63a5\u8fd4\u56de\u5168\u5c40\u6700\u5927\u503c\uff0c\u4e24\u79cd\u60c5\u51b5\u53d6\u4e2a $\\max$ \u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\u3002\n\n\u8fd9\u9053\u9898\u544a\u8bc9\u6211\u4eec\uff0c\u78b0\u5230\u90a3\u79cd\u6c42\u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u7684\u957f\u5ea6\u6700\u5927\u7684\u8def\u5f84\u65f6\uff0c\u5e38\u53ef\u4ee5\u5f80\u6811\u7684\u76f4\u5f84\u65b9\u9762\u60f3\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define fill0(a) memset(a,0,sizeof(a))\n#define fill1(a) memset(a,-1,sizeof(a))\n#define fillbig(a) memset(a,63,sizeof(a))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\ntemplate<typename T1,typename T2> void chkmin(T1 &x,T2 y){if(x>y) x=y;}\ntemplate<typename T1,typename T2> void chkmax(T1 &x,T2 y){if(x<y) x=y;}\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\nnamespace fastio{\n\t#define FILE_SIZE 1<<23\n\tchar rbuf[FILE_SIZE],*p1=rbuf,*p2=rbuf,wbuf[FILE_SIZE],*p3=wbuf;\n\tinline char getc(){return p1==p2&&(p2=(p1=rbuf)+fread(rbuf,1,FILE_SIZE,stdin),p1==p2)?-1:*p1++;}\n\tinline void putc(char x){(*p3++=x);}\n\ttemplate<typename T> void read(T &x){\n\t\tx=0;char c=getchar();T neg=0;\n\t\twhile(!isdigit(c)) neg|=!(c^'-'),c=getchar();\n\t\twhile(isdigit(c)) x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\t\tif(neg) x=(~x)+1;\n\t}\n\ttemplate<typename T> void recursive_print(T x){if(!x) return;recursive_print(x/10);putc(x%10^48);}\n\ttemplate<typename T> void print(T x){if(!x) putc('0');if(x<0) putc('-'),x=~x+1;recursive_print(x);}\n\tvoid print_final(){fwrite(wbuf,1,p3-wbuf,stdout);}\n}\nconst int MAXN=5e5;\nint n,qu,hd[MAXN+5],to[MAXN*2+5],val[MAXN*2+5],nxt[MAXN*2+5],ec=0;\nvoid adde(int u,int v,int w){to[++ec]=v;val[ec]=w;nxt[ec]=hd[u];hd[u]=ec;}\nnamespace getdia{\n\tint dep1[MAXN+5],dep2[MAXN+5],rt1=1,rt2=1;\n\tvoid dfs1(int x,int f){\n\t\tfor(int e=hd[x];e;e=nxt[e]){\n\t\t\tint y=to[e];if(y==f) continue;\n\t\t\tdep1[y]=dep1[x]+1;dfs1(y,x);\n\t\t}\n\t}\n\tvoid dfs2(int x,int f){\n\t\tfor(int e=hd[x];e;e=nxt[e]){\n\t\t\tint y=to[e];if(y==f) continue;\n\t\t\tdep2[y]=dep2[x]+1;dfs2(y,x);\n\t\t}\n\t}\n\tvoid finddia(){\n\t\tdfs1(1,0);for(int i=1;i<=n;i++) if(dep1[i]>dep1[rt1]) rt1=i;\n\t\tdfs2(rt1,0);for(int i=1;i<=n;i++) if(dep2[i]>dep2[rt2]) rt2=i;\n\t}\n}\nstruct solver{\n\tint rt,dfn[MAXN+5],edt[MAXN+5],tim=0,rid[MAXN+5];\n\tint par[MAXN+5],dw[MAXN+5],dep[MAXN+5];\n\tvoid dfs(int x,int f){\n\t\tdfn[x]=++tim;rid[tim]=x;\n\t\tfor(int e=hd[x];e;e=nxt[e]){\n\t\t\tint y=to[e],z=val[e];if(y==f) continue;\n\t\t\tdw[e+1>>1]=y;par[y]=par[x]^z;dep[y]=dep[x]+1;dfs(y,x);\n\t\t} edt[x]=tim;\n\t}\n\tstruct node{int l,r,mx[2],flp;} s[MAXN*4+5];\n\tvoid pushup(int k){\n\t\ts[k].mx[0]=max(s[k<<1].mx[0],s[k<<1|1].mx[0]);\n\t\ts[k].mx[1]=max(s[k<<1].mx[1],s[k<<1|1].mx[1]);\n\t}\n\tvoid build(int k,int l,int r){\n\t\ts[k].l=l;s[k].r=r;if(l==r){s[k].mx[par[rid[l]]]=dep[rid[l]];return;}\n\t\tint mid=l+r>>1;build(k<<1,l,mid);build(k<<1|1,mid+1,r);pushup(k);\n\t}\n\tvoid pushdown(int k){\n\t\tif(s[k].flp){\n\t\t\tswap(s[k<<1].mx[0],s[k<<1].mx[1]);s[k<<1].flp^=1;\n\t\t\tswap(s[k<<1|1].mx[0],s[k<<1|1].mx[1]);s[k<<1|1].flp^=1;\n\t\t\ts[k].flp=0;\n\t\t}\n\t}\n\tvoid modify(int k,int l,int r){\n\t\tif(l<=s[k].l&&s[k].r<=r){\n\t\t\ts[k].flp^=1;swap(s[k].mx[0],s[k].mx[1]);return;\n\t\t} pushdown(k);int mid=s[k].l+s[k].r>>1;\n\t\tif(r<=mid) modify(k<<1,l,r);\n\t\telse if(l>mid) modify(k<<1|1,l,r);\n\t\telse modify(k<<1,l,mid),modify(k<<1|1,mid+1,r);\n\t\tpushup(k);\n\t}\n\tint query(){return s[1].mx[0];}\n\tvoid init(){dfs(rt,0);build(1,1,n);}\n\tvoid toggle(int x){modify(1,dfn[dw[x]],edt[dw[x]]);}\n} t[2];\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1,u,v,w;i<n;i++) scanf(\"%d%d%d\",&u,&v,&w),adde(u,v,w),adde(v,u,w);\n\tgetdia::finddia();t[0].rt=getdia::rt1;t[1].rt=getdia::rt2;t[0].init();t[1].init();\n\tint qu;scanf(\"%d\",&qu);\n\twhile(qu--){\n\t\tint x;scanf(\"%d\",&x);t[0].toggle(x);t[1].toggle(x);\n\t\tprintf(\"%d\\n\",max(t[0].query(),t[1].query()));\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1616226056,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1413F Roads and Ramen"
    },
    {
        "content": "\u62ec\u53f7\u5e8f\u5217\u505a\u6cd5\u3002\n\n\u9996\u5148\u8f6c\u5316\u9898\u610f\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9 $x$ \uff0c\u8bb0\u5f55 $c_x$ \u8868\u793a $x$ \u5230\u6839\u8def\u5f84\u4e0a\u77f3\u5b50\u8def\u6570\u91cf\u7684\u5947\u5076\u6027\u3002\u8bbe $l$ \u4e3a $x$ \u548c $y$ \u7684 lca\uff0c\u70b9 $x$ \u5230 $y$ \u8def\u5f84\u4e0a\u77f3\u5b50\u8def\u6570\u91cf\u7684\u5947\u5076\u6027\u5373\u4e3a $(c_x\\oplus c_l)\\oplus(c_y\\oplus c_l)=c_x\\oplus c_y$\u3002\u6240\u4ee5 $x$ \u5230 $y$ \u62c9\u9762\u9986\u6570\u4e3a\u5076\u6570\u5f53\u4e14\u4ec5\u5f53 $c_x=c_y$\u3002\n\n\u5bf9\u4e8e\u8fb9 $(x,y)$ \u7684\u4fee\u6539\u64cd\u4f5c\uff0c\u4e0d\u59a8\u8bbe $y=fa_x$\uff0c\u53ea\u9700\u8981\u5bf9 $x$ \u5b50\u6811\u5185\u7684\u70b9 $c$ \u7684\u503c\u53d6\u53cd\u5373\u53ef\u3002\n\n\u4e8e\u662f\u672c\u9898\u8f6c\u5316\u4e3a [[ZJOI2007]\u6349\u8ff7\u85cf](https://www.luogu.com.cn/problem/P2056) \u7684\u5b50\u6811\u4fee\u6539\u7248\u672c.\n\n\u5148\u8bb2\u6349\u8ff7\u85cf\u7684\u505a\u6cd5\u3002\n\n\u5bf9\u4e00\u68f5\u6811 dfs\uff0c\u8fdb\u5165\u4e00\u4e2a\u70b9\u65f6\u52a0\u5165\u4e00\u4e2a\u5de6\u62ec\u53f7\u548c\u70b9\u7684\u7f16\u53f7\uff08\u52a0\u5165\u7f16\u53f7\u662f\u4fbf\u4e8e\u5355\u70b9\u4fee\u6539\uff09\uff0c\u79bb\u5f00\u4e00\u4e2a\u70b9\u65f6\u52a0\u5165\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u5c31\u662f\u6811\u7684\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u5bf9\u4e8e\u672c\u9898\u6837\u4f8b\uff0c\u6309 1->2->3->4->5 \u7684\u987a\u5e8f dfs\uff0c\u62ec\u53f7\u5e8f\u5217\u4e3a (1(2(3(4)(5))))\u3002\n\n\u62ec\u53f7\u5e8f\u5217\u6709\u4e00\u4e2a\u6027\u8d28\uff1a\u4e24\u4e2a\u70b9\u5728\u6811\u4e0a\u7684\u8ddd\u79bb\uff0c\u7b49\u4e8e\u62ec\u53f7\u5e8f\u5217\u4e0a\u4e24\u70b9\u4e4b\u95f4\u53bb\u6389\u5339\u914d\u7684\u62ec\u53f7\u540e\u7684\u62ec\u53f7\u6570\u91cf\u3002\u4f8b\u5982 2 \u548c 5 \u4e4b\u95f4\u7684\u5e8f\u5217\u4e3a 2(3(4)(5\uff0c\u53bb\u6389\u5339\u914d\u7684\u62ec\u53f7\u540e\u4e3a ((\uff0c\u6240\u4ee5\u8ddd\u79bb\u4e3a 2\u3002\n\n\u8bc1\u660e\uff1a\u5bf9\u4e8e\u4e24\u70b9\u8def\u5f84\u4e0a\u7684\u70b9\uff08lca \u9664\u5916\uff09\uff0c\u5de6\u53f3\u62ec\u53f7\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u51fa\u73b0\u5728\u5e8f\u5217\u4e2d\uff0c\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u603b\u548c\u5373\u4e3a\u4e24\u70b9\u8ddd\u79bb\u3002\u5bf9\u4e8e\u5176\u4ed6\u70b9\uff0c\u4e00\u5b9a\u6709 0 \u4e2a\u6216 2 \u4e2a\u62ec\u53f7\u5728\u5e8f\u5217\u4e2d\u51fa\u73b0\uff0c\u5bf9\u7b54\u6848\u6ca1\u6709\u8d21\u732e\u3002\n\n\u56e0\u4e3a\u6709\u4fee\u6539\u64cd\u4f5c\uff0c\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u62ec\u53f7\u5e8f\u5217\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4 $a$ \u8868\u793a\u53f3\u62ec\u53f7\u6570\u91cf\uff0c$b$ \u8868\u793a\u5de6\u62ec\u53f7\u6570\u91cf\uff0c\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u65f6\u5c06\u5de6\u533a\u95f4\u7684 $b$ \u548c\u53f3\u533a\u95f4\u7684 $a$ \u5339\u914d\u3002\u518d\u7ef4\u62a4 $d$ \u8868\u793a\u5f53\u524d\u533a\u95f4\u7684\u6700\u5927\u8ddd\u79bb\uff0c\u5219 $d=l.a+\\operatorname{abs}(l.b-r.a)+r.b$\u3002\n\n\u7136\u800c\u8fd8\u8981\u5224\u65ad\u70b9\u7684 $c$ \u503c\u662f\u5426\u4e3a 0\uff0c\u6240\u4ee5 $d$ \u5e76\u4e0d\u80fd\u76f4\u63a5\u7528 $a$ \u548c $b$ \u6c42\u51fa\u3002\u518d\u7ef4\u62a4\u56db\u4e2a\u503c $l1$,$l2$,$r1$,$r2$\u3002$l1$ \u8868\u793a\u5f53\u524d\u533a\u95f4\u5408\u6cd5\u524d\u7f00\u7684 $a+b$ \u7684\u6700\u5927\u503c\uff08\u201c\u5408\u6cd5\u201d\u6307\u524d\u7f00\u7684\u53f3\u7aef\u70b9 $c$ \u503c\u4e3a 0\uff09\uff0c$l2$ \u8868\u793a\u524d\u7f00 $b-a$ \u7684\u6700\u5927\u503c\uff0c$r1$ \u8868\u793a\u540e\u7f00 $a+b$ \u7684\u6700\u5927\u503c\uff0c$r2$ \u8868\u793a\u540e\u7f00 $a-b$ \u7684\u6700\u5927\u503c\u3002\u4e8e\u662f $d=\\max(\\max(l.d,r.d),\\max(l.r1+r.l2,l.r2+r.l1))$\u3002$l1$,$l2$,$r1$,$r2$ \u7684\u7ef4\u62a4\u4e5f\u5f88\u7b80\u5355\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u3002\u5bf9\u4e8e $c$ \u503c\u4e3a 0 \u7684\u7ed3\u70b9\uff0c\u5c06\u8fd9\u56db\u4e2a\u503c\u521d\u59cb\u5316\u4e3a 0\uff0c\u5426\u5219\u521d\u59cb\u5316\u4e3a\u6781\u5c0f\u503c\u3002\n\n\u63a5\u4e0b\u6765\u662f\u672c\u9898\u7684\u505a\u6cd5\u3002\n\n\u5b50\u6811\u4fee\u6539\u53ef\u4ee5\u8f6c\u5316\u4e3a\u62ec\u53f7\u5e8f\u4e0a\u7684\u533a\u95f4\u4fee\u6539\uff0c\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\u6253\u6807\u8bb0\u5373\u53ef\u3002\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u518d\u7ef4\u62a4\u5c06\u5176\u5bf9\u5e94\u7684\u6240\u6709\u7ed3\u70b9\u7684 $c$ \u503c\u53d6\u53cd\u540e\u7684\u72b6\u6001\uff0c\u4fee\u6539\u7ed3\u70b9\u65f6\u4ea4\u6362\u4e24\u79cd\u72b6\u6001\u3002\u67e5\u8be2\u65f6\u5bf9\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\u7684\u4e24\u79cd\u72b6\u6001\u53d6\u6700\u5927\u503c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n+m\\log n)$\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5e5+3,M=1e6+3,O=15e5+3,P=42e5+3;\nint he[N],x[N],y[N],to[M],ne[M],p[N],ed[N],a[O],id,u,v;\nbool c[N],len[M],t[P];\nvoid dfs(int x,int y){//\u6c42c\u6570\u7ec4\u548c\u62ec\u53f7\u5e8f\u5217\n\t++id,a[++id]=x,p[x]=id;\n\tfor(int i=he[x],j;i;i=ne[i])if((j=to[i])!=y)c[j]=c[x]^len[i],dfs(j,x);\n\ted[x]=id,a[++id]=-1;\n}\nstruct T{\n\tint d,a,b,l1,l2,r1,r2;\n};\nstruct S{\n\tT a,b;\n}s[P];\nvoid get(T&k,int x,bool f){//\u521d\u59cb\u5316\n\tk.d=-1,k.l1=k.l2=k.r1=k.r2=-1e9,k.a=k.b=0;\n\tif(a[x]==0)k.b=1;else if(a[x]==-1)k.a=1;\n\telse if(c[a[x]]^f)k.l1=k.l2=k.r1=k.r2=k.d=0;\n}\nvoid mg(T&k,T&a,T&b){//\u672c\u9898\u6838\u5fc3\u90e8\u5206\uff1a\u533a\u95f4\u5408\u5e76\n\tif(a.b>b.a)k.a=a.a,k.b=a.b-b.a+b.b;\n\telse k.a=a.a-a.b+b.a,k.b=b.b;\n\tk.d=max(max(a.d,b.d),max(a.r2+b.l1,a.r1+b.l2));\n\tk.l1=max(a.l1,max(b.l1+a.a-a.b,b.l2+a.a+a.b));\n\tk.l2=max(a.l2,b.l2+a.b-a.a);\n\tk.r1=max(b.r1,max(a.r1+b.b-b.a,a.r2+b.a+b.b));\n\tk.r2=max(b.r2,a.r2+b.a-b.b);\n}\nvoid build(int k,int l,int r){//\u5efa\u6811\n\tif(l==r)return get(s[k].a,l,1),get(s[k].b,l,0);\n\tint m=l+r>>1,a=k*2,b=a+1;\n\tbuild(a,l,m),build(b,m+1,r),mg(s[k].a,s[a].a,s[b].a),mg(s[k].b,s[a].b,s[b].b);\n}\nvoid upd(int k,int l,int r){//\u533a\u95f4\u4fee\u6539\n\tif(u<=l&&r<=v)return t[k]^=1,swap(s[k].a,s[k].b);\n\tint m=l+r>>1,a=k*2,b=a+1;\n\tif(t[k])swap(s[a].a,s[a].b),swap(s[b].a,s[b].b),t[a]^=1,t[b]^=1,t[k]=0;\n\tif(u<=m)upd(a,l,m);\n\tif(m<v)upd(b,m+1,r);\n\tmg(s[k].a,s[a].a,s[b].a),mg(s[k].b,s[a].b,s[b].b);\n}\nint main(){\n\tint n,m,i,j,k,l,t=0;\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<n;++i){\n\t\tscanf(\"%d%d%d\",&j,&k,&l),x[i]=j,y[i]=k;\n\t\tne[++t]=he[j],to[t]=k,len[t]=l,he[j]=t;\n\t\tne[++t]=he[k],to[t]=j,len[t]=l,he[k]=t;\n\t}\n\tdfs(1,0),build(1,1,id);\n\tscanf(\"%d\",&m);\n\twhile(m--){\n\t\tscanf(\"%d\",&i);\n\t\tif(p[x[i]]<p[y[i]])u=p[y[i]],v=ed[y[i]];else u=p[x[i]],v=ed[x[i]];\n\t\tupd(1,1,id),printf(\"%d\\n\",max(s[1].a.d,s[1].b.d));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1604071143,
        "uid": 221955,
        "name": "panyf",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1413F \u3010Roads and Ramen\u3011"
    },
    {
        "content": "**\u52a8\u6001DP\u505a\u6cd5\u3002**\n\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/HolyK/p/14152777.html)\n\n- \u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u65e0\u6839\u6811\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u6807\u8bb00\u62161\u3002\u73b0\u5728\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u7b2c $id$ \u6761\u8fb9\u7684\u6807\u8bb0\u5f02\u62161\u3002\u5728\u6bcf\u6b21\u64cd\u4f5c\u540e\u8f93\u51fa\u5f53\u524d\u6811\u4e0a\u6700\u957f\u7684\u6709\u5076\u6570\u4e2a1\u7684\u8def\u5f84\u957f\u5ea6\u3002\n\n- $n,m \\leq 5 \\times 10^5$\u3002\n\n\u8bbe $dp[x][0/1]$ \u8868\u793a $x$ \u5411\u4e0b\u6709\u5076\u6570/\u5947\u6570\u4e2a1\u7684\u6700\u957f\u8def\u5f84\uff0c$dp[x][2]$ \u8868\u793a $x$ \u5b50\u6811\u5185\u5076\u6570\u4e2a1\u7684\u76f4\u5f84\u3002\n\n\u5bb9\u6613\u5199\u51fa\u8f6c\u79fb\uff08$val_y$ \u8868\u793a $y$ \u7684\u7236\u8fb9\u7684\u6743\u503c\uff09\uff1a\n$$\n\\begin{aligned}\ndp'[x][0] &= \\max\\{dp[x][0], dp[y][val_y] + 1\\}\\\\\ndp'[x][1] &= \\max\\{dp[x][1], dp[y][val_y \\oplus 1] + 1\\}\\\\\ndp'[x][2] &= \\max\\{dp[x][0] + dp[y][val_y] + 1, dp[x][1] + dp[y][val_y \\oplus 1] + 1, dp[x][2],dp[y][2]\\}\n\\end{aligned}\n$$\n\u6539\u5199\u6210 $x$ \u4ece\u91cd\u513f\u5b50 $y$ \u8f6c\u79fb\u7684\u77e9\u9635\uff08\u8fd9\u91cc\u4ee5 $val_y = 0$ \u4e3a\u4f8b\uff09\n\uff1a\n$$\n\\begin{bmatrix}\ndp'[x][0]\\\\\ndp'[x][1]\\\\\ndp'[x][2]\\\\\n0\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n1 & -\\infty & -\\infty & dp[x][0]\\\\\n-\\infty & 1 & -\\infty & dp[x][1]\\\\\ndp[x][0] + 1 & dp[x][1] + 1 & 0 & dp[x][2]\\\\\n-\\infty & -\\infty & -\\infty & 0\n\\end{bmatrix}\n\\begin{bmatrix}\ndp[y][0]\\\\\ndp[y][1]\\\\\ndp[y][2]\\\\\n0\n\\end{bmatrix}\n$$\n\u4e0a\u9762\u7684 $dp[x]$ \u662f\u6307\u6392\u9664\u6389 $x$ \u91cd\u513f\u5b50\u7684\u7b54\u6848\uff0c$dp'[x]$ \u662f\u6307\u5b8c\u6574\u7684 $x$ \u7684\u7b54\u6848\u3002\n\n$dp[x]$ \u8003\u8651\u76f4\u63a5\u7528 `std::multiset` \u5b58\u4e00\u4e0b\u6bcf\u4e2a\u8282\u70b9\u865a\u513f\u5b50\u7684 $dp[y][0], dp[y][1], dp[y][2]$\uff0c\u53d6\u6bcf\u4e2a\u7684\u6700\u5927\u548c\u6b21\u5927\u503c\u5373\u53ef\u5feb\u901f\u6c42\u51fa\u3002\n\n\u590d\u6742\u5ea6\u662f $O(4^3 m \\log n + m \\log^2n)$\uff0c\u80fd\u8dd1\u8fc7 $5 \\times 10^5$ \u4e5f\u662f\u5947\u8ff9\u3002\n\n**\u7ec6\u8282**\uff1a\u5728 `multiset` \u4e2d\u5220\u9664 $-\\infty$ \u65f6\u4e0d\u80fd\u76f4\u63a5\u67e5\u627e\u5bf9\u5e94\u7684\u503c\uff0c\u5e94\u8be5\u76f4\u63a5\u5220\u9664 `multiset` \u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\u503c\uff08\u5177\u4f53\u89c1\u51fd\u6570 `void erase(std::multiset<int>&, int)`\uff09\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#ifdef LOCAL\n#define dbg(args...) std::cerr << \"\\033[32;1m\" << #args << \" -> \", err(args)\n#else\n#define dbg(...)\n#endif\ninline void err() { std::cerr << \"\\033[0m\\n\"; }\ntemplate<class T, class... U>\ninline void err(const T &x, const U &... a) { std::cerr << x << ' '; err(a...); }\ntemplate <class T>\ninline void readInt(T &w) {\n  char c, p = 0;\n  while (!isdigit(c = getchar())) p = c == '-';\n  for (w = c & 15; isdigit(c = getchar());) w = w * 10 + (c & 15);\n  if (p) w = -w;\n}\ntemplate <class T, class... U>\ninline void readInt(T &w, U &... a) { readInt(w), readInt(a...); }\ntemplate <class T, class U>\ninline bool smin(T &x, const U &y) { return y < x ? x = y, 1 : 0; }\ntemplate <class T, class U>\ninline bool smax(T &x, const U &y) { return x < y ? x = y, 1 : 0; }\n\ntypedef long long LL;\ntypedef std::pair<int, int> PII;\n\nusing Matrix = std::array<std::array<int, 4>, 4>;\nMatrix operator*(const Matrix &a, const Matrix &b) {\n  Matrix r;\n  r[0][0] = std::max({ a[0][0] + b[0][0], a[0][1] + b[1][0], a[0][2] + b[2][0], a[0][3] + b[3][0] });\n  r[0][1] = std::max({ a[0][0] + b[0][1], a[0][1] + b[1][1], a[0][2] + b[2][1], a[0][3] + b[3][1] });\n  r[0][2] = std::max({ a[0][0] + b[0][2], a[0][1] + b[1][2], a[0][2] + b[2][2], a[0][3] + b[3][2] });\n  r[0][3] = std::max({ a[0][0] + b[0][3], a[0][1] + b[1][3], a[0][2] + b[2][3], a[0][3] + b[3][3] });\n  r[1][0] = std::max({ a[1][0] + b[0][0], a[1][1] + b[1][0], a[1][2] + b[2][0], a[1][3] + b[3][0] });\n  r[1][1] = std::max({ a[1][0] + b[0][1], a[1][1] + b[1][1], a[1][2] + b[2][1], a[1][3] + b[3][1] });\n  r[1][2] = std::max({ a[1][0] + b[0][2], a[1][1] + b[1][2], a[1][2] + b[2][2], a[1][3] + b[3][2] });\n  r[1][3] = std::max({ a[1][0] + b[0][3], a[1][1] + b[1][3], a[1][2] + b[2][3], a[1][3] + b[3][3] });\n  r[2][0] = std::max({ a[2][0] + b[0][0], a[2][1] + b[1][0], a[2][2] + b[2][0], a[2][3] + b[3][0] });\n  r[2][1] = std::max({ a[2][0] + b[0][1], a[2][1] + b[1][1], a[2][2] + b[2][1], a[2][3] + b[3][1] });\n  r[2][2] = std::max({ a[2][0] + b[0][2], a[2][1] + b[1][2], a[2][2] + b[2][2], a[2][3] + b[3][2] });\n  r[2][3] = std::max({ a[2][0] + b[0][3], a[2][1] + b[1][3], a[2][2] + b[2][3], a[2][3] + b[3][3] });\n  r[3][0] = std::max({ a[3][0] + b[0][0], a[3][1] + b[1][0], a[3][2] + b[2][0], a[3][3] + b[3][0] });\n  r[3][1] = std::max({ a[3][0] + b[0][1], a[3][1] + b[1][1], a[3][2] + b[2][1], a[3][3] + b[3][1] });\n  r[3][2] = std::max({ a[3][0] + b[0][2], a[3][1] + b[1][2], a[3][2] + b[2][2], a[3][3] + b[3][2] });\n  r[3][3] = std::max({ a[3][0] + b[0][3], a[3][1] + b[1][3], a[3][2] + b[2][3], a[3][3] + b[3][3] });\n  return r;\n}\n\nconstexpr int N(5e5 + 5), INF(1e9);\n\nint n, m, val[N], fa[N], son[N], siz[N];\n\nstd::vector<int> g[N];\n\nvoid dfs1(int x) {\n  siz[x] = 1;  \n  for (int y : g[x]) {\n    if (y == fa[x]) continue;\n    fa[y] = x;\n    dfs1(y);\n    siz[x] += siz[y];\n    if (siz[y] > siz[son[x]]) son[x] = y;\n  }\n}\n\nstruct Node {\n  Node *ls, *rs, *fa;\n  Matrix val, sum;\n  inline void pushup() {\n    sum = ls ? ls->sum * val : val;\n    if (rs) sum = sum * rs->sum;\n  }\n} t[N];\nstd::multiset<int> vir[N][3];\nvoid updateVal(int x) {\n  auto &v = t[x].val;\n  auto p0 = vir[x][0].rbegin(), p1 = vir[x][1].rbegin();\n  int k = val[son[x]], m0 = *p0, m1 = *p1;\n  v[0][k] = 1, v[0][!k] = v[0][2] = -INF, v[0][3] = m0;\n  v[1][!k] = 1, v[1][k] = v[1][2] = -INF, v[1][3] = m1;\n  v[2][k] = m0 + 1, v[2][!k] = m1 + 1, v[2][2] = 0;\n  v[2][3] = vir[x][0].size() > 1 ? std::max(m0 + *++p0, m1 + *++p1) : 0;\n  smax(v[2][3], *vir[x][2].rbegin());\n  v[3][0] = v[3][1] = v[3][2] = -INF, v[3][3] = 0;\n}\nint f[N][3];\nvoid dfs2(int x) {\n  f[x][0] = f[x][2] = 0, f[x][1] = -INF;\n  vir[x][0].insert(0), vir[x][1].insert(-INF), vir[x][2].insert(0);\n  for (int y : g[x]) {\n    if (y == fa[x]) continue;\n    dfs2(y);\n    smax(f[x][2], f[y][2]);\n    smax(f[x][2], f[x][0] + f[y][val[y]] + 1);\n    smax(f[x][2], f[x][1] + f[y][!val[y]] + 1);\n    smax(f[x][0], f[y][val[y]] + 1);\n    smax(f[x][1], f[y][!val[y]] + 1);\n    if (y == son[x]) continue;\n    vir[x][0].insert(f[y][val[y]] + 1);\n    vir[x][1].insert(f[y][!val[y]] + 1);\n    vir[x][2].insert(f[y][2]);\n  }\n  updateVal(x);\n}\nint top[N], s[N], sum[N];\nNode* build(int l, int r) {\n  if (l == r) return t[s[l]].pushup(), t + s[l];\n  int m = l, tot = sum[r] + sum[l - 1];\n  while (m < r && sum[m] << 1 < tot) m++;\n  Node *o = t + s[m];\n  if (l < m) o->ls = build(l, m - 1), o->ls->fa = o;\n  if (m < r) o->rs = build(m + 1, r), o->rs->fa = o;\n  o->pushup();\n  return o;\n}\nNode *root;\nvoid dfs3(int x, int tp) {\n  top[x] = tp;\n  if (x == tp) {\n    int m = 0;\n    for (int i = x; i; i = son[i]) {\n      s[++m] = i;\n      sum[m] = sum[m - 1] + siz[i] - siz[son[i]];\n    }\n    if (x > 1)\n      build(1, m)->fa = t + fa[x];\n    else\n      root = build(1, m);\n  }\n  if (!son[x]) return;\n  dfs3(son[x], tp);\n  for (int y : g[x]) {\n    if (y == fa[x] || y == son[x]) continue;\n    dfs3(y, y);\n  }\n}\ninline void erase(std::multiset<int> &s, int x) {\n  if (x < 0)\n    assert(*s.begin() < 0), s.erase(s.begin());\n  else \n    s.erase(s.find(x));\n}\nvoid work(int x, int y) {\n  assert(fa[y] == x);\n  Node *o = t + x;\n  int &v = val[y];\n  if (son[x] == y) {\n    v ^= 1;\n  } else {\n    Node *p = t + y;\n    while (p->fa != o) p = p->fa;\n    erase(vir[x][0], p->sum[v][3] + 1);\n    erase(vir[x][1], p->sum[!v][3] + 1);\n    v ^= 1;\n    vir[x][0].insert(p->sum[v][3] + 1);\n    vir[x][1].insert(p->sum[!v][3] + 1);\n  }\n  for (updateVal(x); o->fa; o = o->fa) {\n    if (o->fa->ls != o && o->fa->rs != o) {\n      x = o->fa - t, y = val[top[o - t]];\n      erase(vir[x][0], o->sum[y][3] + 1);\n      erase(vir[x][1], o->sum[!y][3] + 1);\n      erase(vir[x][2], o->sum[2][3]);\n      o->pushup();\n      vir[x][0].insert(o->sum[y][3] + 1);\n      vir[x][1].insert(o->sum[!y][3] + 1);\n      vir[x][2].insert(o->sum[2][3]);\n      updateVal(x);\n    } else {\n      o->pushup();\n    }\n  }\n  o->pushup();\n}\nstruct Edge {\n  int x, y, z;\n} e[N];\nint main() {\n  readInt(n);\n  for (int i = 1; i < n; i++) {\n    auto &[x, y, z] = e[i];\n    readInt(x, y, z);\n    g[x].push_back(y), g[y].push_back(x);\n  }\n  dfs1(1);\n  for (int i = 1; i < n; i++) {\n    auto &[x, y, z] = e[i];\n    if (fa[y] != x) std::swap(x, y);\n    assert(fa[y] == x);\n    val[y] = z;\n  }\n  \n  dfs2(1);\n  dfs3(1, 1);\n  readInt(m);\n  while (m--) {\n    int i; readInt(i);\n    work(e[i].x, e[i].y);\n    printf(\"%d\\n\", root->sum[2][3]);\n  }\n  return 0;\n}\n\n```\n\n\n\n",
        "postTime": 1608221204,
        "uid": 32180,
        "name": "\u4e16\u51ea",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1413F \u3010Roads and Ramen\u3011"
    },
    {
        "content": "[Roads and Ramen](https://codeforces.com/contest/1434/problem/D)\n\n\u9898\u76ee\u8981\u6211\u4eec\u627e\u4e00\u6761\u8def\u5f84\uff0c\u62c9\u9762\u9986\u6570\u4e3a\u5076\u6570\uff0c\u4e14\u957f\u5ea6\u6700\u957f\u3002\n\n\u8fd9\u9053\u9898\u8981\u731c\u4e00\u4e2a\u6027\u8d28\uff0c\u6700\u957f\u8def\u5f84\u7684\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\u4e00\u5b9a\u662f\u76f4\u5f84\u7684\u67d0\u4e00\u4e2a\u7aef\u70b9\u3002\n\n\u8bc1\u660e\u89c1\u4e0b:\n\n![](https://lb2003.top/usr/uploads/2020/10/1079144940.png)\n\n\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8fdb\u884c\u8ba8\u8bba\uff0c\u4e00\u79cd\u4e0e\u76f4\u5f84\u65e0\u4ea4\uff0c\u53e6\u4e00\u79cd\u4e0e\u76f4\u5f84\u6709\u4ea4\u3002\n\n\u65e0\u4ea4\u7684\u60c5\u51b5:\n\n\u5982\u56fe\uff0c\u5047\u8bbe\u8def\u5f84\u4e3a $JL$ \uff0c\u90a3\u4e48 $JC,CL$ \u8def\u5f84\u7684\u62c9\u9762\u9986\u6570\u7684\u5947\u5076\u6027\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002\n\n\u76f4\u5f84 $AF$ \u4e0d\u662f\u4e00\u6761\u5408\u6cd5\u8def\u5f84\uff0c\u4ece\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\uff0c$AC,CF$ \u7684\u5947\u5076\u6027\u5e94\u8be5\u662f\u4e0d\u4e00\u6837\u7684\u3002\n\n\u56e0\u6b64 $AC,CF$ \u81f3\u5c11\u6709\u4e00\u6761\u4e0e $JC$ \u7684\u5947\u5076\u6027\u76f8\u540c\uff0c\u6839\u636e\u76f4\u5f84\u7684\u6027\u8d28\uff0c\u90a3\u4e48 $AC,CF\\ge JC$ \uff0c\u8fdb\u800c\u8bf4\u660e\u4ece\u76f4\u5f84\u67d0\u4e00\u7aef\u70b9\u51fa\u53d1\uff0c\u4e5f\u80fd\u627e\u5230\u6700\u4f18\u8def\u5f84\u3002\n\n\u56e0\u6b64\u8def\u5f84\u7684\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\u53ef\u4ee5\u88ab\u66ff\u6362\u6210\u76f4\u5f84\u7684\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\u3002\n\n\u6709\u4ea4\u7684\u60c5\u51b5\uff1a\n\n\u5982\u56fe\uff0c\u5047\u8bbe\u8def\u5f84\u4e3a $NL$ \uff0c\u90a3\u4e48 $NC,LC$ \u5947\u5076\u6027\u76f8\u540c\uff0c$LD,ND$ \u5947\u5076\u6027\u76f8\u540c\u3002\n\n\u5982\u679c $AC$ \u548c $CL$ \u5947\u5076\u6027\u4e0d\u540c\uff0c\u5219 $CF$ \u4e0e $CL$ \u5947\u5076\u6027\u76f8\u540c\uff0c\u6210\u7acb\u3002\n\n\u5982\u679c\u76f8\u540c\uff0c\u4e5f\u6210\u7acb\u3002\n\n\u6545\u547d\u9898\u6210\u7acb\u3002\n\n\u4e4b\u540e\u5c31\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u6df1\u5ea6\u4ee5\u53ca\u5947\u5076\u6027\u7684\u95ee\u9898\u4e86\u3002\n\n ```cpp\nvector<pii> e[N]; int fa[N], dep[N];\nint Q[N], ans[N]; vector<pii> G; int m, n;\n \nstruct state {\n\tint f[N], dfn[N], cnt, yss[N], ed[N];\n\tvoid dfs(int x) {\n\t\tdfn[x] = ++cnt; yss[cnt] = x;\n\t\tfor (pii k : e[x]) {\n\t\t\tif (k.fi == fa[x]) continue; int y = k.fi;\n\t\t\tfa[y] = x; dep[y] = dep[x] + 1; f[y] = (f[x] + k.se) & 1;\n\t\t\tdfs(y); \t\t\n\t\t} ed[x] = cnt;\n\t}\n\tstruct Seg {\n\t\tint w[2]; bool rv;\n\t\tSeg(int a = 0, int b = 0) {w[0] = a, w[1] = b, rv = 0;}  \n\t} t[N << 2];\n\t\n\tSeg friend operator + (const Seg &a, const Seg &b) {\n\t\treturn Seg(max(a.w[0], b.w[0]), max(a.w[1], b.w[1]));\n\t}\n\t\n\tvoid rev(int p) {\n\t\tswap(t[p].w[0], t[p].w[1]); t[p].rv ^= 1;\n\t}\n\t\n\tvoid pushdown(int p) {\n\t\tif (t[p].rv) rev(p << 1), rev(p << 1 | 1), t[p].rv = 0;\n\t}\n \n\tvoid build(int p, int l, int r) {\n\t\tif (l == r) {\n\t\t\tl = yss[l]; t[p].w[f[l]] = dep[l]; return ;\n\t\t} int mid = l + r >> 1;\n\t\tbuild(p << 1, l, mid); build(p << 1 | 1, mid + 1, r);\n\t\tt[p] = t[p << 1] + t[p << 1 | 1];\n\t}\n\t\n\tvoid modify(int p, int l, int r, int L, int R) {\n\t\tif (L <= l && R >= r) return rev(p); \n\t\tint mid = l + r >> 1; pushdown(p);\n\t\tif (L <= mid) modify(p << 1, l, mid, L, R);\n\t\tif (R > mid) modify(p << 1 | 1, mid + 1, r, L, R);\n\t\tt[p] = t[p << 1] + t[p << 1 | 1];\n\t}\n\t\n\tvoid solve(int rt) {\n\t\tfa[rt] = dep[rt] = cnt = 0; dfs(rt);\n\t\tbuild(1, 1, n);\n\t\tfor (int i = 1; i <= m; ++i) {\n\t\t\tint x = G[Q[i] - 1].fi, y = G[Q[i] - 1].se;\n\t\t\tif (fa[x] == y) swap(x, y);\n\t\t\tmodify(1, 1, n, dfn[y], ed[y]);\n\t\t\tans[i] = max(ans[i], t[1].w[0]);\n\t\t} \n\t}\n} A, B;\n \nint rt;\n \nvoid dfs(int x) {\n\tfor (pii k : e[x]) {\n\t\tif (k.fi == fa[x]) continue; int y = k.fi;\n\t\tfa[y] = x; dep[y] = dep[x] + 1; dfs(y);\n\t} if (!rt || dep[x] > dep[rt]) rt = x;\n} \n \nvoid solve() {\n    qr(n);\n    for (int i = 1; i < n; ++i) {\n    \tint x, y, z; qr(x), qr(y), qr(z);\n    \te[x].emplace_back(y, z); e[y].emplace_back(x, z);\n    \tG.emplace_back(x, y);\n    } \n\tqr(m);\n\tfor (int i = 1; i <= m; ++i) qr(Q[i]); \n\trt = 0; fa[1] = dep[1] = 0; dfs(1); \n\tint r1, r2; r1 = rt; \n\trt = 0; fa[r1] = dep[r1] = 0; dfs(r1); r2 = rt;\n\tA.solve(r1); \n\tB.solve(r2); \n\tfor (int i = 1; i <= m; ++i) pr2(ans[i]);\n}\n ```\n\n\n\n\n\n\n\n",
        "postTime": 1603762128,
        "uid": 106232,
        "name": "_Sein",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1413F \u3010Roads and Ramen\u3011"
    }
]