[
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570n\u548ck\uff0c\u8be2\u95ee\u5728\u4e00\u4e2a\u5706\u4e0a\u4f60\u6700\u5c11\u9700\u8981\u51e0\u4e2a\u70b9\uff0c\u624d\u80fd\u5728\u8fd9\u4e9b\u70b9\u4e0a\u6784\u9020\u51fak\u4e2a\u8fb9\u6570\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6b63\u591a\u8fb9\u5f62\u3002\n\n\u611f\u6027\u5206\u6790\u4e00\u6ce2\uff1a\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u9009\u53d6\u4e86\u4e00\u4e2a\u6b63k\u8fb9\u5f62\uff0c\u90a3\u4e48\u8fb9\u6570\u4e3ak\u7684\u56e0\u5b50\u7684\u6240\u6709\u6b63\u591a\u8fb9\u5f62\u4e5f\u5c31\u5168\u90e8\u6ee1\u8db3\u4e86\u3002\u8bbep\uff0c\u6ee1\u8db3p|k.\u90a3\u4e48\u5982\u679c\u6211\u4eec\u9009\u4e86\u6b63k\u8fb9\u5f62\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u5df2\u7ecf\u9009\u62e9\u4e86\u6240\u6709\u6b63p\u8fb9\u5f62\uff08\u6bd4\u5982\u8bf4\u6211\u4eec\u60f3\u8981\u9009\u6b63\u516d\u8fb9\u5f62\uff0c\u90a3\u4e48\u5fc5\u987b\u5148\u9009\u62e9\u6b63\u4e09\u89d2\u5f62\uff09\uff0c\u589e\u52a0\u7684\u70b9\u6570\u5373\u4e3a\u03c6(k)\u3002\u56e0\u6b64\u6211\u4eec\u5bf9\u6b27\u62c9\u51fd\u6570\u6392\u5e8f\uff0c\u5e76\u5c06\u524dk\u4e2a\u7d2f\u52a0\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u6b27\u62c9\u7b5b\u6b27\u62c9\u51fd\u6570\u5176\u5b9e\u6211\u89c9\u5f97\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u8bf4\u7684\uff0c\u548c\u7b5b\u7d20\u6570\u5dee\u4e0d\u591a\uff0c\u53ea\u8981\u77e5\u9053\u6b27\u62c9\u51fd\u6570\u662f\u4e00\u4e2a\u79ef\u6027\u51fd\u6570\uff0c\u6ee1\u8db3$f[a*b]=f[a]*f[b]$\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8be6\u7ec6\u6765\u770b\u5c31\u662f\u5f53i%prime[j]==0\u65f6\uff1a\n\n$phi[i*prime[j]]=phi[i]*prime[j];$\n\ni%prime[j]!=0\u65f6\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8d28\u6570x\u7684\u6b27\u62c9\u51fd\u6570\u03c6(x)=x-1;,\u53c8\u56e0\u4e3a\u6b27\u62c9\u51fd\u6570\u662f\u4e00\u4e2a\u79ef\u6027\u51fd\u6570\n\n\u6240\u4ee5\uff1a\n\n$phi[i*prime[j]]=phi[i]*(prime[j]-1);$\n\n\nCode\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#define ll long long\n#define N 1000010\nusing namespace std;\ninline ll read(){\n\tll x=0,f=1;char ch=getchar();\n\twhile(ch<'0' || ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\n\nint n,k,phi[N],vis[N],prime[N],num;\nll ans;\nvector<int> v;\n\nvoid Euler(){\n\tphi[1]=1,vis[1]=true;\n\tfor(int i=2;i<=n;i++){\n\t\tif(!vis[i]) prime[++num]=i,phi[i]=i-1;\n\t\tfor(int j=1;j<=num && i*prime[j]<=n;j++){\n\t\t\tvis[prime[j]*i]=1;\n\t\t\tif(i%prime[j]==0){\n\t\t\t\tphi[i*prime[j]]=phi[i]*prime[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tphi[i*prime[j]]=phi[i]*(prime[j]-1);\n\t\t}\n\t}\n}\n\nint main(){\n\tn=read(),k=read();\n\tif(k==1) return printf(\"3\\n\"),0;\n\tEuler();\n\tfor(int i=3;i<=n;i++) v.push_back(phi[i]);\n\tsort(v.begin(),v.end());\n\tfor(int i=0;i<k;i++) ans+=v[i];\n\tprintf(\"%lld\\n\",ans+2);\n\treturn 0;\n}\n```\n",
        "postTime": 1571790728,
        "uid": 111850,
        "name": "L______",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF1208G \u3010Polygons\u3011"
    },
    {
        "content": "# \u300cCF1208G\u300d Polygons \n\n~~\u4f3c\u4e4e\u6211\u6821\u795e\u7287\u5728\u5f88\u4e45\u4ee5\u524d\u548c\u6211\u63d0\u8fc7\u8fd9\u9898\uff1f~~\n\n\u9996\u5148\u6709\u4e00\u70b9\u663e\u800c\u6613\u89c1\uff1a\u8fd9 $k$ \u4e2a\u591a\u8fb9\u5f62\u80af\u5b9a\u81f3\u5c11\u6709\u4e00\u4e2a\u516c\u5171\u7684\u9876\u70b9\u3002\u5047\u8bbe\u6211\u4eec\u5c06\u6b64\u70b9\u5b9a\u4e49\u4e3a\u8d77\u70b9\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u6b63 $n$ \u8fb9\u5f62\uff0c\u6bcf\u4e00\u6761\u8fb9\u6240\u622a\u7684\u77ed\u5f27\u6240\u5bf9\u5e94\u7684\u5706\u5fc3\u89d2\u5927\u5c0f\u76f8\u7b49\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u9876\u70b9\u6807\u8bb0\u4e3a $\\frac{1}{n},\\frac{2}{n},\\frac{3}{n},\\cdots,\\frac{n}{n}$\u3002\n\n\u90a3\u4e48\u6709\u7ed3\u8bba\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u6b63 $n$ \u8fb9\u5f62\u7684\u9876\u70b9\uff0c\u5f53\u4e14\u4ec5\u5f53\u9876\u70b9\u6807\u53f7\u4e3a\u4e00\u4e2a\u6700\u7b80\u5206\u6570\u65f6\u624d\u4f1a\u88ab\u7edf\u8ba1\u8fdb\u7b54\u6848\u3002\n\n\u8bc1\u660e\u4e5f\u5f88\u7b80\u5355\uff0c\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u6b63 $n$ \u8fb9\u5f62\u9876\u70b9\u6807\u53f7\u4e3a\u975e\u6700\u7b80\u5206\u6570\u88ab\u7edf\u8ba1\u8fdb\u7b54\u6848\uff0c\u90a3\u4e48\u5c06\u6807\u53f7\u5316\u4e3a\u6700\u7b80\u5206\u6570\u540e\u5176\u6240\u5bf9\u5e94\u7684\u6b63\u591a\u8fb9\u5f62\u6211\u4eec\u4e00\u5b9a\u6ca1\u6709\u9009\u62e9\u3002\u4f46\u662f\u663e\u7136\u8fd9\u4e2a\u6b63\u591a\u8fb9\u5f62\u7684\u70b9\u6570\u6bd4\u6211\u4eec\u521a\u624d\u9009\u62e9\u7684\u6b63 $n$ \u8fb9\u5f62\u8981\u5c11\uff0c\u8fd9\u4e0e\u9898\u76ee\u8981\u6c42\u76f8\u6096\uff0c\u6545\u5047\u8bbe\u4e0d\u6210\u7acb\u3002\n\n\u56e0\u4e3a $n\\ge 3$\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u9876\u70b9\u6ca1\u6709\u88ab\u6211\u4eec\u7edf\u8ba1\u5230\uff1a$\\frac{1}{2} , \\frac{n}{n}$ \u3002\n\n\u8003\u8651\u7279\u5224\uff1a\n\n+ \u5f53 $k=1$ \u65f6\u6211\u4eec\u4e00\u5b9a\u4f1a\u9009\u62e9\u6b63\u4e09\u89d2\u5f62\uff0c\u5176\u5305\u542b $\\frac{n}{n}$\u3002\n\n+ \u5f53 $k=2$ \u65f6\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6b63\u4e09\u89d2\u5f62\u548c\u6b63\u56db\u8fb9\u5f62\uff0c\u5176\u5305\u542b $\\frac{1}{2} , \\frac{n}{n}$\u3002\n+ \u5f53 $k\\ge 3$ \u65f6\u7531\u4e8e\u5df2\u7ecf\u9009\u62e9\u4e86\u6b63\u4e09\u89d2\u5f62\u548c\u6b63\u56db\u8fb9\u5f62\uff0c\u672a\u7edf\u8ba1\u7684\u4e24\u4e2a\u9876\u70b9\u5df2\u7ecf\u7edf\u8ba1\uff0c\u6240\u4ee5\u4e0d\u53d7\u5f71\u54cd\u3002\n\n\u8003\u8651\u5bf9\u4e00\u4e2a\u6b63 $n$ \u8fb9\u5f62\u7edf\u8ba1\u8fd9\u6837\u7684\u6700\u7b80\u5206\u6570\uff0c\u5f88\u663e\u7136\u53ef\u4ee5\u53d1\u73b0\u7b54\u6848\u5c31\u662f $\\varphi(n)$\u3002\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u4ece $\\varphi(5)$ \u5f00\u59cb\u7684\u524d $k$ \u5927\u7684\u6b27\u62c9\u51fd\u6570\u503c\u5373\u53ef\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log_2n)$\uff0c\u4f7f\u7528\u57fa\u6570\u6392\u5e8f\u53ef\u4f18\u5316\u81f3 $O(n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e6+5;\nint p[maxn],pri[maxn],phi[maxn],cnt;\nint n,k;\nint init(){\n\tphi[1]=1;\n\tfor(int i=2;i<=n;++i){\n\t\tif(!p[i]){\n\t\t\tpri[++cnt]=i,phi[i]=i-1;\n\t\t}\n\t\tfor(int j=1;j<=cnt&&pri[j]*i<=n;++j){\n\t\t\tp[pri[j]*i]=1;\n\t\t\tif(i%pri[j]==0){\n\t\t\t\tphi[pri[j]*i]=phi[i]*pri[j];\n\t\t\t\tbreak;\n\t\t\t} \n\t\t\telse phi[i*pri[j]]=phi[i]*(pri[j]-1);\n\t\t}\n\t}\n}\nint main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0),cout.tie(0);\n\tcin>>n>>k;\n\tif(k==1) cout<<3<<'\\n',exit(0);\n\tif(k==2) cout<<6<<'\\n',exit(0);\n\tinit();\n\tsort(phi+5,phi+n+1);\n\tlong long ans=6;\n\tfor(int i=5;i<=5+k-2-1;++i) ans+=phi[i];\n\tcout<<ans<<'\\n';\n\treturn 0;\n}\n```\n\n",
        "postTime": 1599739808,
        "uid": 43957,
        "name": "HenryHuang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1208G \u3010Polygons\u3011"
    },
    {
        "content": "[\u63a8\u9500\u535a\u5ba2](https://foreverlasting1202.github.io/2019/08/27/CF1208%E9%A2%98%E8%A7%A3/)\n\n### G Polygons\n\n\u9898\u610f\uff1a\u7ed9\u51fa$n$\u548c$k$\uff0c\u8981\u6c42\u5728\u5706\u4e0a\u7528\u6700\u5c11\u7684\u70b9\u6570\u4f7f\u5f97\u80fd\u591f\u627e\u5230$k$\u4e2a\u6b63\u591a\u8fb9\u5f62\u800c\u4e14\u8fd9$k$\u4e2a\u6b63\u591a\u8fb9\u5f62\u7684\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e$n$\uff0c\u6c42\u6700\u5c11\u7684\u70b9\u6570\u3002$1\\leq k\\leq n-2\\leq 10^6$\u3002\n\n\u505a\u6cd5\uff1a\u8003\u8651\u5982\u679c\u9009\u62e9\u4e00\u4e2a\u6570$x$\uff08\u4e0d\u8003\u8651$1$\u548c$2$\u7684\u60c5\u51b5\uff09\uff0c\u5219\u663e\u7136\u4e0e\u5b83\u4e0d\u4e92\u8d28\u7684\u6570\u90fd\u5df2\u7ecf\u9009\u8fc7\u4e86\uff08\u5426\u5219\u9009\u4e0d\u4e92\u8d28\u7684\u6570\u4f1a\u66f4\u4f18\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7684\u8d21\u732e\u5c31\u4f1a\u662f$\\phi(x)$\u3002\u56e0\u6b64\u7ed9$\\phi$\u6392\u4e2a\u5e8f\uff0c\u627e\u524d$k$\u4e2a\u5c31\u53ef\u4ee5\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\u3002\n\ncode:\n```cpp\n//2019.8.27 by ljz\n//email 573902690@qq.com\n//if you find any bug in my code\n//please tell me\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define INF 0x3f3f3f3f3f3f3f\n#define unl __int128\n#define eps 5.6e-8\n#define RG register\n#define db double\n#define pc(x) __builtin_popcount(x)\n//#define pc(x) __builtin_popcountll(x)\ntypedef pair<int,int> Pair;\n#define mp make_pair\n#define fi first\n#define se second\n#define pi acos(-1.0)\n#define pb push_back\n#define ull unsigned LL\n#define gc getchar\n//inline char gc() {\n//    static char buf[100000],*p1,*p2;\n//    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n//}\ninline int read() {\n    res s=0,ch=gc();\n    while(ch<'0'||ch>'9')ch=gc();\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n    return s;\n}\n//inline int read() {\n//    res s=0,ch=gc(),w=1;\n//    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=gc();}\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s*w;\n//}\n//inline LL Read() {\n//    RG LL s=0;\n//    res ch=gc();\n//    while(ch<'0'||ch>'9')ch=gc();\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s;\n//}\n//inline LL Read() {\n//    RG LL s=0;\n//    res ch=gc(),w=1;\n//    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=gc();}\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s*w;\n//}\n//inline void write(RG unl x){\n//    if(x>10)write(x/10);\n//    putchar(int(x%10)+'0');\n//}\ninline void swap(res &x,res &y) {\n    x^=y^=x^=y;\n}\n//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n//clock_t start=clock();\n//inline void ck(){\n//    if(1.0*(clock()-start)/CLOCKS_PER_SEC>0.1)exit(0);\n//}\nconst int N=1e6+10;\nnamespace MAIN{\n    int n,k;\n    int prim[N/10],tot,phi[N];\n    bool vis[N];\n    inline void MAIN(){\n        phi[1]=1,n=read(),k=read();\n        for(res i=2;i<=n;i++){\n            if(!vis[i])prim[++tot]=i,phi[i]=i-1;\n            for(res j=1;j<=tot&&prim[j]*i<=n;j++){\n                vis[prim[j]*i]=1;\n                if(i%prim[j]==0){phi[prim[j]*i]=phi[i]*prim[j];;break;}\n                phi[prim[j]*i]=phi[i]*(prim[j]-1);\n            }\n        }\n        sort(phi+1,phi+n+1);\n        RG LL ans=0;\n        for(res i=1;i<=k+2;i++)ans+=phi[i];\n        printf(\"%lld\\n\",ans-(k==1));\n    }\n}\nint main(){\n//    srand(19260817);\n//    freopen(\"signin.in\",\"r\",stdin);\n//    freopen(\"signin.out\",\"w\",stdout);\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1567155991,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1208G \u3010Polygons\u3011"
    },
    {
        "content": "\u6211\u7684\u505a\u6cd5\u8981\u5206\u4e24\u7c7b\u3002\n\n\u548c\u522b\u7684\u9898\u89e3\u4e00\u6837\uff0c\u52a0\u5165\u4e00\u4e2a $n$ \u8fb9\u5f62\u7684\u4ee3\u4ef7\u4e3a $\\varphi(n)$\uff0c\u539f\u56e0\u662f\u53ef\u4ee5\u628a $n$ \u7684\u771f\u56e0\u5b50\u8fb9\u5f62\u6263\u5728 $n$ \u8fb9\u5f62\u91cc\u9762\uff0c\u8fd9\u6837\u65b0\u589e\u7684\u70b9\u6570\u5c31\u662f $[1,n]$ \u4e2d\u4e0e $n$ \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7684**\u5927\u4f53\u601d\u8def**\u5c31\u662f\u627e\u5230\u8fd9 $n-2$ \u4e2a $\\varphi$ \u4e2d\u7684\u524d $k$ \u5c0f\u518d\u6c42\u548c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u4f46\u662f\u8fd9\u6837\u6709**\u4e24\u4e2a\u95ee\u9898**\uff1a\n\n* \u8fd9\u6837\u4fdd\u8bc1\u9009\u4e86 $n$ \u8fb9\u5f62\u4e00\u5b9a\u9009\u4e86 $\\forall d|n,d$ \u8fb9\u5f62\u5417\uff1f\n\n\u4fdd\u8bc1\uff0c\u56e0\u4e3a $\\forall d|n,\\varphi(d)\\le \\varphi(n)$\uff0c\u53ef\u4ee5\u7528\u6b27\u62c9\u51fd\u6570\u5b9a\u4e49\u8bc1\u660e\uff0c\u6216\u8005\n$$\n\\frac{\\varphi(ab)}{\\varphi(a)}=\\frac{\\varphi(a)\\varphi(b)\\gcd(a,b)}{\\varphi(a)\\varphi(\\gcd(a,b))}\\ge\\frac{\\gcd(a,b)}{\\varphi(\\gcd(a,b))}\\ge 1\n$$\n\n* \u4e0d\u5b58\u5728 $1$ \u8fb9\u5f62\u548c $2$ \u8fb9\u5f62\u548b\u529e\uff1f\n\n\u6211\u4eec\u5206\u4e24\u7c7b\uff1a\u4e00\u7c7b\u4e0d\u5b58\u5728 $2k$ \u8fb9\u5f62\uff0c\u53e6\u4e00\u7c7b\u5b58\u5728\u3002\n\n\u5bf9\u4e8e\u4e0d\u5b58\u5728\u7684\uff0c\u6211\u4eec\u521d\u59cb\u5728\u5706\u4e0a\u968f\u610f\u9009\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u201c\u4e00\u8fb9\u5f62\u201d\u4f5c\u4e3a\u57fa\u5e95\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u5b58\u5728\u7684\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u201c\u4e8c\u8fb9\u5f62\u201d\uff0c\u5373\u5728\u9009\u7684\u70b9\u5706\u4e0a\u5bf9\u5cd9\u70b9\u518d\u9009\u4e00\u4e2a\u3002\n\n[\u7b80\u77ed\u7684\u4ee3\u7801](https://codeforces.com/contest/1208/submission/175236017)",
        "postTime": 1665315116,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "CF1208G Polygons\uff08\u6b27\u62c9\u51fd\u6570\u5999\u9898\uff09"
    },
    {
        "content": "## \u89e3\u9898\u601d\u8def\n\n\u663e\u800c\u6613\u89c1\u7684\u4e00\u70b9\uff1a\u8fd9 $k$\u200b \u4e2a\u591a\u8fb9\u5f62\u80af\u5b9a\u81f3\u5c11\u6709\u4e00\u4e2a\u516c\u5171\u7684\u9876\u70b9\u3002\u5047\u8bbe\u6211\u4eec\u5c06\u6b64\u70b9\u5b9a\u4e49\u4e3a\u8d77\u70b9\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6b63 $n$\u200b \u8fb9\u5f62\uff0c\u6bcf\u6761\u8fb9\u6240\u622a\u7684\u77ed\u5f27\u6240\u5bf9\u5e94\u7684\u5706\u5fc3\u89d2\u5927\u5c0f\u76f8\u7b49\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u9876\u70b9\u8bb0\u4e3a\u8fd9\u4e2a\u5206\u6570\u5e8f\u5217\uff1a $\\frac1n,\\frac2n,\\frac3n,\\cdots,\\frac nn$\u200b\u200b\u3002\n\n\u6613\u5f97\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u6b63 $n$\u200b \u8fb9\u5f62\u7684\u9876\u70b9\uff0c\u5f53\u4e14\u4ec5\u5f53\u9876\u70b9\u5bf9\u5e94\u7684\u5206\u6570\u662f\u4e00\u4e2a\u65e2\u7ea6\u5206\u6570\u65f6\u624d\u4f1a\u88ab\u8bb0\u5f55\u8fdb\u7b54\u6848\u3002\n\n\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff1a\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u6b63 $n$\u200b \u8fb9\u5f62\u9876\u70b9\u5bf9\u5e94\u7684\u5206\u6570\u4e0d\u662f\u65e2\u7ea6\u5206\u6570\u5374\u88ab\u7edf\u8ba1\u8fdb\u7b54\u6848\uff0c\u90a3\u4e48\u5c06\u5176\u5bf9\u5e94\u5206\u6570\u5316\u4e3a\u65e2\u7ea6\u5206\u6570\u540e\u5176\u6240\u5bf9\u5e94\u7684\u6b63\u591a\u8fb9\u5f62\u5fc5\u6ca1\u6709\u9009\u62e9\u3002\u4f46\u663e\u7136\u8fd9\u4e2a\u6b63\u591a\u8fb9\u5f62\u7684\u70b9\u6570\u6bd4\u521a\u624d\u9009\u62e9\u7684\u6b63 $n$\u200b \u8fb9\u5f62\u8981\u5c11\uff0c\u4e0e\u8981\u6c42\u76f8\u6096\uff0c\u6545\u5047\u8bbe\u4e0d\u6210\u7acb\u3002\n\n\u56e0\u4e3a $n\\ge3$\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u9876\u70b9\u6ca1\u6709\u88ab\u6211\u4eec\u7edf\u8ba1\u5230\uff1a$\\frac12,\\frac nn$\u200b \u3002\n\n\u8003\u8651\u7279\u5224\uff1a\n\n-   \u5f53 $k=1$\u200b \u65f6\u6211\u4eec\u4e00\u5b9a\u4f1a\u9009\u62e9\u6b63\u4e09\u89d2\u5f62\uff0c\u5176\u5305\u542b $\\frac nn$\u3002\n-   \u5f53 $k=2$\u200b \u65f6\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6b63\u4e09\u89d2\u5f62\u548c\u6b63\u56db\u8fb9\u5f62\uff0c\u5176\u5305\u542b $\\frac 12,\\frac nn$\u3002\n-   \u5f53 $k \\ge 3$\u200b\u200b \u65f6\u7531\u4e8e\u5df2\u7ecf\u9009\u62e9\u4e86\u6b63\u4e09\u89d2\u5f62\u548c\u6b63\u56db\u8fb9\u5f62\uff0c\u672a\u7edf\u8ba1\u7684\u4e24\u4e2a\u9876\u70b9\u5df2\u7ecf\u7edf\u8ba1\uff0c\u6240\u4ee5\u4e0d\u53d7\u5f71\u54cd\u3002\n\n\u8003\u8651\u5bf9\u4e00\u4e2a\u6b63 $n$\u200b\u200b \u8fb9\u5f62\u7edf\u8ba1\u8fd9\u6837\u7684\u65e2\u7ea6\u5206\u6570\uff0c\u5f88\u663e\u7136\u53ef\u4ee5\u53d1\u73b0\u7b54\u6848\u5c31\u662f $\\varphi(n)$\u200b\u200b\u3002\u6240\u4ee5\u9009\u62e9\u4ece $\\varphi(5)$\u200b\u200b \u5f00\u59cb\u7684\u524d $k$\u200b\u200b \u5c0f\u7684\u6b27\u62c9\u51fd\u6570\u7684\u503c\u5373\u53ef\uff0c\u6700\u540e\u8981\u52a0\u4e0a $6$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n\\log_2n)$\u200b\u200b\u200b\u200b\uff08\u4f7f\u7528\u5feb\u6392\u7684\u590d\u6742\u5ea6\uff0c\u5982\u679c\u4f7f\u7528\u57fa\u6570\u6392\u5e8f\u53ef\u4ee5\u4f18\u5316\u81f3 $\\mathcal O\\left(n\\right)$\u200b\u200b\uff09\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\nconst int maxn=1e6+5;\nint p[maxn],pri[maxn],phi[maxn],cnt;\nint n,k;\n\ninline void quick_cppio(void)\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n}\n\n//\u6a21\u677f\nint EulerSolvePhi()\n{\n    phi[1]=1;\n    for(int i=2;i<=n;++i)\n    {\n        if(!p[i])\n        {\n            pri[++cnt]=i,phi[i]=i-1;\n        }\n        for(int j=1;j<=cnt&&pri[j]*i<=n;++j)\n        {\n            p[pri[j]*i]=1;\n            if(i%pri[j]==0)\n            {\n                phi[pri[j]*i]=phi[i]*pri[j];\n                break;\n            } \n            else phi[i*pri[j]]=phi[i]*(pri[j]-1);\n        }\n    }\n}\n\nsigned main()\n{\n    quick_cppio();\n    cin >> n >> k;\n    if(k==1) return cout << 3 <<'\\n', 0;\n    if(k==2) return cout << 6 <<'\\n', 0;\n    \n    EulerSolvePhi();\n    \n    sort(phi+5,phi+n+1);\n    long long ans=6;\n    for(int i=5; i<=5+k-2-1; ++i) ans+=phi[i];\n    cout<<ans<<'\\n';\n    return 0;\n}\n```",
        "postTime": 1636023267,
        "uid": 344700,
        "name": "calabash_love_hmz",
        "ccfLevel": 6,
        "title": "CF1208G Polygons \u9898\u89e3"
    }
]