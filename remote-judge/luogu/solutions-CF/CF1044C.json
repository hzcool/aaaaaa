[
    {
        "content": "\u9996\u5148\u6211\u4eec\u63cf\u4e00\u7ec4\u6570\u636e\uff1a\n\n```\n7\n-1 1\n5 2\n3 0\n-1 4\n5 6\n1 5\n2 3\n```\n\n![](https://ae03.alicdn.com/kf/U1c12e4a8190647a1905ce993def9f1412.jpg)\n\n\u5f53\u6211\u4eec\u9009 4 \u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u5f88\u660e\u663e\uff0c\u53ef\u4ee5\u9009\u51fa\u5904\u4e8e\u6700\u5916\u56f4\u7684 4 \u4e2a\u70b9\u4f5c\u4e3a\u65b0\u56db\u8fb9\u5f62\n\n\u8fd9\u56db\u4e2a\u70b9\u5206\u522b\u662f\u5904\u4e8e\u6700\u5de6\u8fb9\uff0c\u6700\u53f3\u8fb9\uff0c\u6700\u4e0a\u9762\uff0c\u6700\u4e0b\u9762 4 \u4e2a\u4f4d\u7f6e\u3002\n\n\u4f8b\u5982\u56fe\u4e2d\u7684\u56db\u8fb9\u5f62 $EBFA$ \u5c31\u6ee1\u8db3\u8981\u6c42\uff08\u5f53\u7136\uff0c\u56db\u8fb9\u5f62 $EBFD$ \u540c\u7406\uff09\n\n\u8fd9 4 \u4e2a\u70b9\u7ec4\u6210\u7684\u201c\u66fc\u54c8\u987f\u5468\u957f\u201d\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u77e9\u5f62\uff1a\n\n![](https://image.kysic.com.cn/60cfac49366e89c704b67bdbac35cded/77c8553025156.png)\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u8981\u5148\u626b\u4e00\u904d\uff0c\u627e\u51fa $x_{max},y_{max},x_{min},y_{min}$ \u6240\u5bf9\u5e94\u7684\u70b9\uff0c\u6c42\u51fa\u77e9\u5f62\u7684\u5468\u957f\u5c31\u53ef\u4ee5\u4e86\n\n\u81f3\u4e8e $n>4$ \u7684\u60c5\u51b5\uff0c\u663e\u7136\uff0c\u7b54\u6848\u662f\u4e0d\u53d8\u7684\u3002\n\n\u63a5\u4e0b\u6765\u770b $n=3$ \u7684\u60c5\u51b5\uff1a\n\n\u8fd9\u65f6\u6211\u4eec\u4e0d\u80fd\u7ee7\u7eed\u4ece\u539f\u6765\u7684 $x_{max},y_{max},x_{min},y_{min}$ \u4e2d\u9009 3 \u4e2a\u4f5c\u4e3a\u65b0\u70b9\u3002\u53ea\u80fd\u9009\u5b9a $x_{max},y_{max},x_{min},y_{min}$ \u56db\u4e2a\u70b9\u4e2d\u7684\u4e00\u4e2a\uff0c\u7136\u540e\u91cd\u65b0\u679a\u4e3e\u4e00\u904d\u3002\n\n\u8bf7\u770b\u8fd9\u4e48\u4e00\u7ec4hack\u6570\u636e\uff1a\n\n```\n8\n0 3\n2 2\n3 0\n2 -2\n0 -3\n-2 -2\n-3 0\n-2 2\n```\n\n![](https://ae03.alicdn.com/kf/U9291867cc2b94d9982aba84d9f21c844k.jpg)\n\n\u5982\u679c\u6211\u4eec\u6309\u4e0a\u9762\u7684\u65b9\u6cd5\u9009\u70b9\uff0c\u9009\u51fa\u7684\u662f $A,E,G,C$ \uff08\u5982\u4e0b\u56fe\u6240\u793a\uff09\n\n![image.png](https://ae03.alicdn.com/kf/U34061938c72a4d1cbb9c75c983325a7e2.jpg)\n\n\u4f46\u662f\u5f53\u6211\u4eec\u53ea\u90093\u4e2a\u70b9\u65f6\uff0c\u53ef\u4ee5\u9009\u51fa $A,E,H$ \u4e09\u70b9\u4f5c\u4e3a\u201c\u66fc\u54c8\u987f\u5468\u957f\u201d\u6700\u5927\u7684\u4e09\u89d2\u5f62\uff08\u5982\u4e0b\u56fe\u6240\u793a\uff09\n\n![](https://ae03.alicdn.com/kf/Ud865f42e7f8e4e10bec548ef1a0fb2f47.jpg)\n\n\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u679a\u4e3e\n\n\u5177\u4f53\u8bf7\u770b\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```cpp\n/*\n\tAuthor: Chocola4ever\n\tDate: 2021-03-29 19:44:37\n\tLastEditTime: 2021-03-30 21:38:25\n\tFilePath: \\Programs\\test.cpp\n\tDescription: RP++\n*/\n#include<bits/stdc++.h>\n#define ll long long\n#define inf 0x3f3f3f3f\nusing namespace std;\nconst int N=3e5+5;\ninline ll read(){\n\tll x=0,w=1;\n\tchar ch=getchar();\n\tfor (;!isdigit(ch);ch=getchar())\n\t\tif (ch=='-')\n\t\t\tw=-1;\n\tfor (;isdigit(ch);ch=getchar())\n\t\tx=x*10+(ch-'0');\n\treturn x*w;\n}\nint n,x[N],y[N];\nstruct Chocola{\n\tint x,y;\n}maxx,maxy,minx,miny;\nll getC(Chocola x,Chocola y,Chocola z){\n\tint maxX=max(max(x.x,y.x),z.x),maxY=max(max(x.y,y.y),z.y),minX=min(min(x.x,y.x),z.x),minY=min(min(x.y,y.y),z.y);\n\treturn ((maxX-minX)<<1)+((maxY-minY)<<1);\n}\nint main(){\n\tn=read();\n\tif (n==3){ //n=3\u65f6\u76f4\u63a5\u8ba1\u7b97\u8f93\u51fa\n\t\tprintf(\"%lld\",getC((Chocola){read(),read()},(Chocola){read(),read()},(Chocola){read(),read()}));\n\t\treturn 0;\n\t}\n\tx[1]=read(),y[1]=read();\n\tmaxx=minx=maxy=miny=(Chocola){x[1],y[1]};\n\tfor (int i=2;i<=n;++i){\n\t\tx[i]=read(),y[i]=read();\n\t\tif (x[i]>maxx.x)\n\t\t\tmaxx=(Chocola){x[i],y[i]};\n\t\tif (x[i]<minx.x)\n\t\t\tminx=(Chocola){x[i],y[i]};\n\t\tif (y[i]>maxy.y)\n\t\t\tmaxy=(Chocola){x[i],y[i]};\n\t\tif (y[i]<miny.y)\n\t\t\tminy=(Chocola){x[i],y[i]};\n\t}\n\tll ans=((maxx.x-minx.x)<<1)+((maxy.y-miny.y)<<1);\n\tint ans3=0;\n\tfor(int i=1;i<=n;i++){\n\t\tans3=max(max(max(ans3,abs(x[i]-maxx.x)+abs(y[i]-maxy.y)),max(ans3,abs(x[i]-maxx.x)+abs(y[i]-miny.y))),max(max(ans3,abs(x[i]-minx.x)+abs(y[i]-maxy.y)),max(ans3,abs(x[i]-minx.x)+abs(y[i]-miny.y))));\n\t}//\u679a\u4e3e\u6c42\u51faans3\n\tprintf(\"%d \",ans3<<1);\n\tfor (int i=4;i<=n;++i)\n\t\tprintf(\"%lld \",ans);\n/*\tprintf(\"maxx:%d %d\\n\",maxx.x,maxx.y);\u8c03\u8bd5\u4fe1\u606f\n\tprintf(\"maxy:%d %d\\n\",maxy.x,maxy.y);\n\tprintf(\"minx:%d %d\\n\",minx.x,minx.y);\n\tprintf(\"miny:%d %d\\n\",miny.x,miny.y);*/\n\treturn 0;\n}\n\n```",
        "postTime": 1617111714,
        "uid": 40698,
        "name": "Chocola4ever",
        "ccfLevel": 6,
        "title": "CF1044C \u9898\u89e3"
    },
    {
        "content": "1.\u56e0\u4e3a\u672c\u9898\u4e2d\u7684\u8ddd\u79bb\u4e3a\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u6240\u4ee5\u9898\u76ee\u4e2d6\u8fb9\u5f62\u7684\u5468\u957f\u7b49\u4e8e\u5b83\u7684\u5916\u63a5\u77e9\u5f62\u7684\u5468\u957f\n\n2.\u800c\u73b0\u5728\u6211\u53ea\u9700\u8981\u56db\u4e2a\u7aef\u70b9,\u4e5f\u53ef\u4ee5\u6c42\u51fa\u8fd9\u4e2a\u77e9\u5f62\uff0c\u56e0\u6b64\u6700\u4f18k\u8fb9\u5f62\u5468\u957f=\u6700\u4f18\u56db\u8fb9\u5f62\u5468\u957f\u7684\n\n3.\u53c8\u56e0\u4e3a\u6700\u4f18\u56db\u8fb9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u5c31\u662f\u8fd9\u56db\u4e2a\u7aef\u70b9\u3002\u6240\u4ee5\u6211\u4eec\u63a5\u4e0b\u6765\u679a\u4e3e\u627e\u51fa\u6700\u5927\u503c\u5373\u53ef\n\ncode:\n```cpp\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934\u6587\u4ef6 \n#define reg register\n#define ll long long\nusing namespace std;\nll n,x,y,a[4][2],xi[3000005],yi[3000005],ans,anss;\ninline ll dis(reg int i,reg int j)\n{\n\tj%=4;\n\treturn abs(a[i][0]-a[j][0])+abs(a[i][1]-a[j][1]); \n}//\u66fc\u54c8\u987f\u8ddd\u79bb \ninline ll dis2(reg int i,reg int j)\n{\n\treturn abs(a[i][0]-xi[j])+abs(a[i][1]-yi[j]); \n}//\u540c\u4e0a \nint main()\n{\n\tscanf(\"%lld\",&n);\n\tfor(reg int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\txi[i]=x,yi[i]=y;\n\t\tif(i==1)\n\t\tfor(reg int j=0;j<=3;j++)a[j][0]=x,a[j][1]=y;//\u521d\u59cb\u5316 \n\t\telse\n\t\t{\n\t\t\tif(x>a[0][0])a[0][0]=x,a[0][1]=y;\n\t\t\tif(y<a[1][1])a[1][0]=x,a[1][1]=y;\n\t\t\tif(x<a[2][0])a[2][0]=x,a[2][1]=y;\n\t\t\tif(y>a[3][1])a[3][0]=x,a[3][1]=y;\n\t\t}//\u679a\u4e3e\u7aef\u70b9(\u4e0a\u8ff0\u548c\u5916\u63a5\u77e9\u5f62\u7684\u5173\u7cfb) \n\t}\n\tfor(reg int i=0;i<=3;i++)\n\tfor(reg int j=0;j<=3;j++)\n\t{\n\t\treg ll t=dis(i,j);\n\t\tif(i==j)continue;\n\t\tfor(reg int k=1;k<=n;k++)anss=max(anss,t+dis2(i,k)+dis2(j,k));\n\t}//\u67e5\u8be2\u6700\u5927\u503c \n\tprintf(\"%d \",anss);\n\tfor(reg int i=0;i<=3;i++)ans+=dis(i,i+1);//\u6c42\u548c \n\tfor(reg int i=4;i<=n;i++)printf(\"%d \",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1550823202,
        "uid": 48993,
        "name": "liuyifan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1044C \u3010Optimal Polygon Perimeter\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\uff1a\n\u7ed9\u4f60 $n$ \u4e2a\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5185\u7684\u70b9\uff0c\u7136\u540e\u6c42\u51fa $3,4,5...,n$ \u8fb9\u5f62\u7684\u6700\u5927\u5468\u957f\uff0c\u4efb\u610f\u4e24\u70b9\u95f4\u8ddd\u79bb\u4e3a\u66fc\u54c8\u987f\u8ddd\u79bb\u3002\n\n## \u9898\u76ee\u5206\u6790\uff1a\n\n\u663e\u800c\u6613\u89c1\uff0c\u56e0\u4e3a\u8ddd\u79bb\u4e3a\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u6240\u4ee5\u9898\u76ee\u8981\u6c42\u7684\u4e1c\u897f\u5c31\u53d8\u6210\u4e86\u7531\u591a\u4e2a\u70b9\u7ec4\u6210\u7684\u77e9\u5f62\u7684\u5468\u957f\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u4e0b\u56fe\uff0c\u5047\u8bbe\u6211\u4eec\u9009\u62e9\u8fd9\u6837\u56db\u4e2a\u70b9\uff1a\n\n![](https://pic.imgdb.cn/item/62d03b30f54cd3f93737bbba.png)\n\n\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684\u77e9\u5f62\u957f\u8fd9\u6837\uff1a\n\n![](https://pic.imgdb.cn/item/62d03b4af54cd3f93737e42a.png)\n\n\u5f97\u5230\u4e86\u8fd9\u4e2a\u4ee5\u540e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5206\u4e09\u79cd\u60c5\u51b5\u8003\u8651\uff1a\n\n**1.** \u5f53 $k \\geqslant 4$ \u65f6\u5373\u6211\u4eec\u8981\u6c42\u7684\u662f\u4e00\u4e2a\u975e\u4e09\u89d2\u5f62\u7684\u6700\u5927\u5468\u957f\u65f6\uff0c\u8fd9\u65f6\u5c31\u76f4\u63a5\u53d6\u6a2a\u7eb5\u5750\u6807\u7684\u6700\u5927\u5dee\u503c\u6c42\u548c\u4f5c\u4e3a\u7b54\u6848\u5c31\u884c\u4e86\u3002\n\n\u8fd9\u4e2a\u7684\u6b63\u786e\u6027\u663e\u7136\uff0c\u56e0\u4e3a\u5f53\u6211\u4eec\u6c42\u4e2a\u975e\u4e09\u89d2\u5f62\u65f6\uff0c\u5c31\u4e00\u5b9a\u80fd\u53d6\u81f3\u5c11\u56db\u4e2a\u70b9\uff0c\u90a3\u4e48\u8fd9\u65f6\uff0c\u6211\u4eec\u4e00\u5b9a\u80fd\u4fdd\u8bc1\u53d6\u5230\u6700\u5927\u7684\u5dee\u503c\u3002\n\n**2.** \u5f53 $k=3$ \u65f6\u5373\u6211\u4eec\u8981\u6c42\u7684\u662f\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u6700\u5927\u5468\u957f\u65f6\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u65e0\u6cd5\u50cf\u4e0a\u9762\u90a3\u6837\u8003\u8651\uff0c\u6837\u4f8b\u4e00\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\n\n\u6240\u4ee5\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u6c42\u89e3\u3002\n\n**\u6ce8\uff1a**\n\n\u770b\u5230\u6570\u636e\u8303\u56f4 $-10^8 \\leqslant x_i,y_i \\leqslant 10^8$ \u4e00\u5b9a\u8981\u8bb0\u5f97\u5f00 long long\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u6838\u5fc3\u90e8\u5206\u4ee3\u7801\uff1a\n\n```cpp\nint main()\n{\n    n=read();\n    long long maxx=-1,minx=0x7f7f7f;\n    long long maxy=-1,miny=0x7f7f7f;\n    for(register int i=1;i<=n;i++)\n    {\n        x[i]=read(),y[i]=read();\n        maxx=max(maxx,x[i]);\n        minx=min(minx,x[i]);\n        maxy=max(maxy,y[i]);\n        miny=min(miny,y[i]);\n    }\n    long long sum=(maxx-minx+maxy-miny)*2;\n    if(n==3)\n    {\n        cout<<sum;\n        return 0;\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        if(x[i]==maxx)\n            a[1]=x[i],b[1]=y[i];\n        if(x[i]==minx)\n            a[2]=x[i],b[2]=y[i];\n        if(y[i]==maxy)\n            a[3]=x[i],b[3]=y[i];\n        if(y[i]==miny)\n            a[4]=x[i],b[4]=y[i];\n    }\n    long long maxn=0;\n    for(register int i=1;i<=n;i++)\n    {\n        maxn=max(maxn,abs(x[i]-minx)+abs(y[i]-miny));\n        maxn=max(maxn,abs(x[i]-minx)+abs(y[i]-maxy));\n        maxn=max(maxn,abs(x[i]-maxx)+abs(y[i]-maxy));\n        maxn=max(maxn,abs(x[i]-maxx)+abs(y[i]-miny));\n\t}\n    cout<<maxn*2<<' ';\n    for(register int i=4;i<=n;i++)\n    {\n        cout<<sum<<' ';\n    }\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1657817287,
        "uid": 393037,
        "name": "Code_AC",
        "ccfLevel": 5,
        "title": "CF1044C\u9898\u89e3"
    },
    {
        "content": "**~~\u6765\u4e00\u53d1~~**\n\n1. \u601d\u8def\uff1a\u56e0\u4e3a\u662f\u4e00\u4e2a\u51f8\u8fb9\u5f62\uff0c\u90a3\u4e48\u6b64\u79cd\u5b9a\u4e49\u4e0b\u7684\u5468\u957f\u5c31\u662f\u80fd\u5c06\u8fd9\u4e2a\u591a\u8fb9\u5f62\u5b8c\u5168\u88c5\u4e0b\u7684\u6700\u5c0f\u77e9\u5f62\u3002\n![](http://a1.qpic.cn/psc?/V13gqYSE4WvhY3/A5hOE6*rc9U8eSRlr1H24vfaHCp49JKB9AnWBE*SioF4Urb6Zer0Bj4uRd0Qpx8ykDeXlUf2c8VP.kaqbAf2OQ!!/b&ek=1&kp=1&pt=0&bo=RgWBAgAAAAADF*I!&tl=1&vuin=2132886896&tm=1588086000&sce=60-1-1&rf=viewer_4)\n\u6211\u4eec\u5047\u5b9a\u6709\u4ee5\u4e0a7\u4e2a\u70b9\u3002\n**K>=4\u65f6\u6211\u4eec\u9009\u62e9\u6700\u8fb9\u7f18\u7684\u56db\u4e2a\u70b9\uff08\u4e0e\u77e9\u5f62\u63a5\u89e6\u7684\u56db\u4e2a\u70b9\uff09\u5c31\u53ef\u4ee5\u4f7f\u5468\u957f\u6700\u5927**\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u77e9\u5f62\u53eb\u505aA\u77e9\u5f62\nK=3\u65f6\uff0c\u6211\u4eec\u53ea\u80fd\u9009\u62e9\u4e09\u4e2a\u70b9\uff0c\u6211\u4eec\u77e5\u9053\u4e09\u4e2a\u70b9\u5f97\u5230\u7684\u6700\u5927\u77e9\u5f62\u81f3\u5c11\u6709\u4e00\u4e2a\u9876\u70b9\u4e0e\u8fd9\u4e09\u4e2a\u70b9\u7684\u4e00\u4e2a\u70b9\u91cd\u5408\uff0c\u4e14\u4e09\u4e2a\u70b9\u6784\u6210\u7684\u4e09\u89d2\u5f62\u81f3\u5c11\u6709\u4e24\u4e2a\u8fb9\u4e0e\u77e9\u5f62A\u7684\u67d0\u4e00\u5bf9\u90bb\u8fb9\u91cd\u5408\uff08\u53cd\u8bc1\u6cd5\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5c31**\u904d\u5386\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u70b9\u4e0e\u77e9\u5f62A\u6784\u6210\u7684\u56db\u4e2a\u77e9\u5f62\u4e2d\u7684\u6700\u5927\u503c\uff0c\u4f5c\u4e3a\u6211\u4eecK=3\u65f6\u7684\u7ed3\u679c\u3002**\n![](http://m.qpic.cn/psc?/V13gqYSE4WvhY3/VvKoQz*3MdOV*27lszynSb1FJhPBvUErCRfWfwiUYvTbqeo*x*nN.kJB2eTM1A2vrFJVuGsxYTSXfKR2DidIV7D6hR2uTlW8.*nqG91CgQM!/b&bo=RgWBAgAAAAADF*I!&rf=viewer_4)\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint x[300005];\nint y[300005];\nint main()\n{\n    int n;\n    cin >> n;\n    int max_x=-0x3f3f3f3f;\n    int max_y=-0x3f3f3f3f;\n    int min_x=0x3f3f3f3f;\n    int min_y=0x3f3f3f3f;\n    for(int i=1;i<=n;i++)\n    {\n        cin >> x[i] >> y[i];\n        max_x=max(max_x,x[i]);\n        max_y=max(max_y,y[i]);\n        min_x=min(min_x,x[i]);\n        min_y=min(min_y,y[i]);\n    }\n    int c=0;\n    for(int i=1;i<=n;i++)\n    {\n        c=max(c,abs(x[i]-max_x)+abs(y[i]-max_y));\n        c=max(c,abs(x[i]-max_x)+abs(y[i]-min_y));\n        c=max(c,abs(x[i]-min_x)+abs(y[i]-max_y));\n        c=max(c,abs(x[i]-min_x)+abs(y[i]-min_y));\n    }\n    cout << 2*c ;\n    c=2*(max_x-min_x)+2*(max_y-min_y);\n    for(int i=4;i<=n;i++)\n    {\n        cout << \" \" << c;\n    }\n    cout << endl ;\n    return 0;\n}\n\n```\n",
        "postTime": 1588086961,
        "uid": 309328,
        "name": "KadiaNEFU",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1044C \u3010Optimal Polygon Perimeter\u3011"
    },
    {
        "content": "\u9898\u76ee\u601d\u8def\u6709\u4e86\u5c31\u4e0d\u96be\n\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u6c42k\u4e2a\u70b9\u6784\u6210\u7684\u56fe\u5f62\u7528\u4e00\u4e2a\u5468\u957f\u591a\u5c11\u7684\u77e9\u5f62\u624d\u80fd\u88c5\u4e0b\nk>3\u65f6\uff0c\u59cb\u7ec8\u53d6\u6700\u5927\u7684x\u3001y\u548c\u6700\u5c0f\u7684x\u3001y\u3002\nk=3\u65f6\uff0c\u6211\u4eec\u62ff\u6bcf\u4e00\u4e2a\u70b9\u5224\u65ad\u5230\u6700\u5927\u8fb9\u754c\u7684\u8ddd\u79bb\uff0c\u53d6\u6700\u5927\u7684\u4e00\u4e2a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint x[300005];\nint y[300005];\nint main()\n{\n    int n;\n    cin >> n;\n    int max_x=-0x3f3f3f3f;\n    int max_y=-0x3f3f3f3f;\n    int min_x=0x3f3f3f3f;\n    int min_y=0x3f3f3f3f;\n    for(int i=1;i<=n;i++)\n    {\n        cin >> x[i] >> y[i];\n        max_x=max(max_x,x[i]);\n        max_y=max(max_y,y[i]);\n        min_x=min(min_x,x[i]);\n        min_y=min(min_y,y[i]);\n    }\n    int c=0;\n    for(int i=1;i<=n;i++)\n    {\n        c=max(c,abs(x[i]-max_x)+abs(y[i]-max_y));\n        c=max(c,abs(x[i]-max_x)+abs(y[i]-min_y));\n        c=max(c,abs(x[i]-min_x)+abs(y[i]-max_y));\n        c=max(c,abs(x[i]-min_x)+abs(y[i]-min_y));\n    }\n    cout << 2*c << \" \";\n    c=2*(max_x-min_x)+2*(max_y-min_y);\n    for(int i=4;i<=n;i++)\n    {\n        cout << c << \" \";\n    }\n    cout << endl ;\n    return 0;\n}\n\n```\n",
        "postTime": 1587828120,
        "uid": 309328,
        "name": "KadiaNEFU",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1044C \u3010Optimal Polygon Perimeter\u3011"
    }
]