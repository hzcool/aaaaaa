[
    {
        "content": "## CF1407E \u9898\u89e3\n\n### \u9898\u76ee\u5927\u610f\n\n\u6709\u4e00\u5f20\u56fe\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6743\u503c $0/1$ \u3002\n\n\u4f60\u73b0\u5728\u9700\u8981\u7ed9\u70b9\u67d3\u8272 $0/1$ \uff0c\u4e00\u6761\u8fb9\u53ef\u4ee5\u7ecf\u8fc7\u6709\u4e14\u4ec5\u5f53\u5b83\u7684\u8d77\u59cb\u70b9\u7684\u989c\u8272\u548c\u8fb9\u7684\u989c\u8272\u4e00\u6837\u3002\n\n\u95ee\u4f60\u53ef\u4e0d\u53ef\u4ee5\u4f7f\u5f97\u4ece $1 \\to n$ \u4e0d\u5b58\u5728\u8fde\u901a\u7684\u8def\u5f84\uff0c\u5982\u679c\u4e0d\u53ef\u4ee5\uff0c\u6c42\u6700\u77ed\u8def\u5f84\uff0c\u8def\u5f84\u957f\u5ea6\u5b9a\u4e49\u4e3a\u8fd9\u6761\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u91cf\u3002\n\n### \u9898\u89e3\n\n\u8fd9\u9898\u4f5c\u4e3a $2E$ \u6765\u8bf4\u8fd8\u662f\u633a\u7b80\u5355\u7684\uff0c\u7b97\u662f\u767d\u7ed9\u5427\u3002\n\n\u4f60\u8003\u8651\u4e00\u6761\u8fb9\u4ec0\u4e48\u65f6\u5019\u624d\u53ef\u4ee5\u8fde\u901a\uff0c\u8fd9\u662f\u53d6\u51b3\u4e8e\u5b83\u7684\u524d\u4e00\u4e2a\u70b9\u3002\n\n\u4f46\u662f\u5982\u679c\u4f60\u6b63\u5e8f\u7684\u53bb\u904d\u5386\u7684\u8bdd\uff0c\u4f60\u80af\u5b9a\u4f1a\u5148\u904d\u5386\u5230\u5b83\u7684\u8d77\u59cb\u70b9\uff0c\u4f46\u662f\u8fd9\u4e2a\u70b9\u53ef\u80fd\u548c\u591a\u4e2a\u8fb9\u5bf9\u5e94\uff0c\u90a3\u600e\u4e48\u5904\u7406\uff1f\n\n\u90a3\u6211\u4eec\u5c31\u53cd\u7740\u6765\uff01\uff01\n\n\u4ece $n$ \u53f7\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u5982\u679c\u5f53\u524d\u7684 $2$ \u70b9\u4e4b\u95f4\u53ea\u6709\u4e00\u79cd\u989c\u8272\u7684\u8fb9\uff0c\u8868\u793a\u4f60\u53ef\u4ee5\u628a\u8fd9\u6761\u8def\u5835\u6b7b\uff0c\u90a3\u5c31\u628a\u5b83\u5835\u6b7b\u3002\n\n\u5982\u679c\u6709 $2$ \u79cd\u989c\u8272\uff0c\u90a3\u4e48\u4ed6\u7684\u8282\u70b9\u4e5f\u5c31\u4e0d\u662f\u4ec0\u4e48\u5f88\u91cd\u8981\u7684\u95ee\u9898\u4e86\u3002\n\n\u4f60\u4f1a\u8bf4\u4e00\u4e2a\u8282\u70b9\u4f1a\u8fde\u63a5\u591a\u6761\u8fb9\uff0c\u4e3a\u4ec0\u4e48\u5bf9\u5176\u4ed6\u7684\u8fb9\u6ca1\u6709\u5f71\u54cd\u5462\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u505a\u7684\u662f $BFS$ \u6bcf\u4e2a\u8282\u70b9\u53ea\u8981\u7edf\u8ba1\u6700\u77ed\u7684\u8def\u5f84\uff0c\u800c\u4e14\u6bcf\u6b21\u5148\u88ab\u904d\u5386\u5230\u7684\u4e00\u5b9a\u6bd4\u4e0b\u4e00\u6b21\u904d\u5386\u5230\u7684\u8def\u5f84\u8981\u77ed\uff0c\u6240\u4ee5\u76f4\u63a5 $BFS$ \u5c31\u53ef\u4ee5\u4e86\u3002\n\n```\n#include <iostream>\n#include <queue>\n#include <string.h>\n#include <stdio.h>\nusing namespace std;\nconst int maxn = 5e5 + 10;\n\nint n, m, x, y, w, cnt, col[maxn], dis[maxn], vis[maxn], d[maxn], head[maxn];\nstruct node {\n    int nxt, to, val;\n} e[maxn << 1];\nvoid add(int x, int y, int w) {\n\te[++ cnt].to = y; e[cnt].nxt = head[x]; head[x] = cnt; e[cnt].val = w;\n}\nqueue<int>q;\nint main() {\n    // cin >> n >> m;\n    scanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= m; ++ i) {\n\t\t// cin >> x >> y >> w;\n        scanf(\"%d%d%d\", &x, &y, &w);\n        add(y, x, w);\n\t}\n\tif(n == 1) {\n        cout << \"0\" << endl << \"0\";\n\t\treturn 0;\n\t}\n\tmemset(col, -1, sizeof(col));\n\tq.push(n);\n    vis[n] = 0;\n\twhile(q.size()) {\n\t\tint x = q.front(); q.pop();\n\t\tif(x == 1) {\n            break;\n        }\n        for(int i = head[x]; i; i = e[i].nxt) {\n            int v = e[i].to;\n            if(vis[v]) continue;\n\t\t\tif(col[v] == -1 || col[v] == 1 - e[i].val) {\n\t\t\t\tcol[v] = 1 - e[i].val;\n\t\t\t}\n            else {\n\t\t\t\tq.push(v);\n\t\t\t\td[v] = d[x] + 1;\n\t\t\t\tvis[v] = 1;\n\t\t    }\n        }\n\t}\n    if(d[1]) {\n        cout << d[1] << endl;\n    }\n    else {\n        cout << \"-1\" << endl;\n    }\n\tfor(int i = 1; i <= n; ++ i) {\n\t\tif(col[i] == -1) {\n            cout << \"0\";\n        }\n\t\telse {\n            cout << col[i];\n        }\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1599869716,
        "uid": 155767,
        "name": "Tarsal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1407E \u3010Egor in the Republic of Dagestan\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n $ n $ \u4e2a\u70b9 $ m $ \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u8fb9\u6709\u9ed1\u767d\u4e24\u79cd\u989c\u8272\u3002\u73b0\u5728\u8981\u7ed9\u70b9\u67d3\u8272,\u767d\u70b9\u53ea\u80fd\u8d70\u5b83\u8fde\u51fa\u53bb\u7684\u767d\u8fb9\uff0c\u9ed1\u70b9\u53ea\u80fd\u8d70\u5b83\u8fde\u51fa\u53bb\u7684\u9ed1\u8fb9\u3002\u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u67d3\u8272\u65b9\u6848\uff0c\u4f7f\u5f97\u4e0d\u5b58\u5728\u4e00\u6761 $ 1 \\rightarrow n $ \u7684\u8def\u5f84\u3002\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u67d3\u8272\u65b9\u6848\uff0c\u5728\u7b2c\u4e00\u884c\u8f93\u51fa $ -1 $\uff0c\u5426\u5219\u8f93\u51fa $ 1 \\rightarrow n $ \u6700\u957f\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u5e76\u8f93\u51fa\u5bf9\u5e94\u7b2c\u4e00\u884c\u7b54\u6848\u7684\u67d3\u8272\u65b9\u6848\u3002\n\n## \u601d\u8def\n\n\u9996\u5148\u6b63\u5e8f\u8dd1\u7684\u8bdd\u662f\u4e0d\u597d\u5904\u7406\u7684\uff0c\u56e0\u4e3a\u5148\u904d\u5386\u5230\u4e00\u4e2a\u70b9\u7684\u8d77\u59cb\u70b9\u4f1a\u5bf9\u5e94\u5f88\u591a\u6761\u8fb9\u3002\u6240\u4ee5\u6211\u4eec\u8981\u5012\u7740\u63a8\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a $ dp_{u,0/1} $ \u8868\u793a\u5230\u7b2c $ u $ \u4e2a\u70b9\u9009\u62e9\u9ed1\u8fd8\u662f\u767d\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u5f97\u5230 $ dp_{u,0/1} \\leftarrow \\max{dp_{v,0},dp_{v,1}}+1 $\uff0c\u8fd9\u91cc  $ v $ \u662f\u5bf9\u5e94\u8fd9\u989c\u8272\u7684\u8fb9\u53ef\u4ee5\u5230\u7684\u70b9\u3002\u7136\u540e\u5408\u683c\u5c31\u53ef\u4ee5\u653e\u5230 dij \u91cc\u9762\u8dd1\u4e86\u3002\n\n## \u4ee3\u7801\n\n**\u6ce8\uff1a\u53d8\u91cf\u540d\u7565\u6709\u4e0d\u540c\u3002**\n\n```cpp\n#include <bits/stdc++.h>//\u795d\u5927\u5bb6\u5b66\u4e60\u6109\u5feb\uff01\n\nusing namespace std;\n\nconst int maxn=5e5+5;\nconst int inf=0x3f3f3f3f;\nstruct edge{\n\tint to,nxt,c;\n}e[maxn<<1];\nint head[maxn],len;\nstruct node{\n\tint dis,x;\n\tnode(){}\n\tnode(int dd,int xx){\n\t\tdis=dd;\n\t\tx=xx;\n\t}\n\tbool operator < (const node &b) const {\n\t\treturn dis>b.dis;\n\t}\n};\npriority_queue<node> que;\nint dis[maxn][3];\nbool vis[maxn];\n\ninline void init(){\n\tmemset(head,-1,sizeof(head));\n\tmemset(dis,0x3f,sizeof(dis));\n\tlen=0;\n}\nvoid add(int u,int v,int c){\n\te[++len].to=v;\n\te[len].c=c;\n\te[len].nxt=head[u];\n\thead[u]=len;\n}\n\nvoid dij(int s){\n\tdis[s][0]=dis[s][1]=0;\n\tque.push(node(0,s));\n\twhile(!que.empty()){\n\t\tint u=que.top().x;\n\t\tque.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tint d=max(dis[u][0],dis[u][1]);\n\t\tfor(int i=head[u];i!=-1;i=e[i].nxt){\n\t\t\tint v=e[i].to,c=e[i].c;\n\t\t\tif(vis[v]) continue;\n\t\t\tif(dis[v][c]>d+1){\n\t\t\t\tdis[v][c]=d+1;\n\t\t\t\tint maxx=max(dis[v][0],dis[v][1]);\n\t\t\t\tif(maxx<inf) que.push(node(maxx,v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\t\n\tinit();\n\t\n\tint n,m;\n\t\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,c;\n\t\tscanf(\"%d %d %d\",&u,&v,&c);\n\t\tadd(v,u,c);\n\t}\n\t\n\tdij(n);\n\t\n\tint maxx=max(dis[1][0],dis[1][1]);\n\t\n\tif(maxx<inf) printf(\"%d\\n\",maxx);\n\telse puts(\"-1\");\n\tfor(int i=1;i<=n;i++){\n\t\tif(dis[i][0]>dis[i][1]) putchar('0');\n\t\telse putchar('1');\n\t}\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1654950542,
        "uid": 234469,
        "name": "hxyqwq",
        "ccfLevel": 6,
        "title": "CF1407E \u9898\u89e3"
    },
    {
        "content": "[\u83dc\u9e21\u7684Div2\u9898\u89e3](https://big-news.cn/2020/09/09/%E3%80%8C%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A%E3%80%8DCodeforces%20Round%20669%20(Div.%202)/)\n\n\u7b97\u662f\u6211\u89c1\u8fc7\u7684\u6bd4\u8f83\u88f8\u7684\u4e00\u9053 E \u9898\u4e86...\n\n\u8bbe $f[u,0/1]$ \u8868\u793a\u5728 $u$ \u70b9\uff0c\u9009 0 \u8fb9\u8fd8\u662f\u9009 1 \u8fb9\u7684\u7b54\u6848\u3002\n\n\u8f6c\u79fb\u7684\u8bdd\uff0c\u679a\u4e3e\u4e00\u6761\u8fb9 $u\\gets v$\uff0c\u5e94\u5f53\u6709 $f[u,c]\\gets \\max(f[v,0],f[v,1])+1$\uff0c\u5176\u4e2d $c$ \u4ee3\u8868\u8fb9 $u\\gets v$ \u7684\u989c\u8272\u3002\n\n\u6ce8\u610f\u5230\u4e00\u4e2a\u70b9\u4e0d\u4f1a\u88ab\u677e\u5f1b\u8d85\u8fc7\u4e00\u6b21\uff0c\u76f4\u63a5\u8dd1 Dijkstra \u8f6c\u79fb\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+m)\\log n)$\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n\nconst int CN = 1e6 + 6;\nconst int INF = 0x3f3f3f3f;\n\nclass fs {public: int to,nxt,tp; void init(int t,int n,int p) {to = t, nxt = n, tp = p;} } E[CN << 1];\nint hd[CN], ecnt = 0; void add(int x,int y,int z) {E[++ecnt].init(y, hd[x], z); hd[x] = ecnt;}\n\nint n, m;\n\nclass DJ {public: int v, id; bool operator < (const DJ &a) const {return v > a.v;}} ;\nDJ mk(int a, int b) {DJ d; d.v = a, d.id = b; return d;}\nint d[CN][2]; bool vis[CN]; priority_queue<DJ> Q;\nvoid SP(int u){\n    memset(d, 0x3f, sizeof(d)), Q.push( mk(d[u][0] = d[u][1] = 0, u) );\n    while(!Q.empty()){\n        u = Q.top().id, Q.pop();\n        if(vis[u]) continue; vis[u] = true; \n        int dis = max(d[u][0], d[u][1]);\n        for(int k = hd[u]; k; k = E[k].nxt){\n            int v = E[k].to, c = E[k].tp, cur; if(vis[v]) continue;\n            if(d[v][c] > dis + 1){\n                d[v][c] = dis + 1, cur = max(d[v][0], d[v][1]);\n                if(cur < INF) Q.push( mk(cur, v) );\n            }\n        }\n    }\n}\n\nint main()\n{\n    n = read(), m = read();\n    for(int i = 1; i <= m; i++) {int u = read(), v = read(), t = read(); add(v, u, t);}\n    SP(n);\n    \n    if(max(d[1][0], d[1][1]) < INF) printf(\"%d\", max(d[1][0], d[1][1])), puts(\"\");\n    else puts(\"-1\");\n    for(int i = 1; i <= n; i++) putchar(d[i][0] > d[i][1] ? '0' : '1');\n}\n```",
        "postTime": 1599631306,
        "uid": 70177,
        "name": "big_news",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1407E \u3010Egor in the Republic of Dagestan\u3011"
    },
    {
        "content": "## E. Egor in the Republic of Dagestan  \n### \u9898\u76ee\u5927\u610f  \n\n\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u53ef\u4ee5\u6709\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u6bcf\u6761\u8fb9\u6709$0,1$\u6807\u8bb0\u3002  \n\u73b0\u5728\u8981\u6c42\u7ed9\u56fe\u67d3\u8272\uff0c\u4e00\u4e2a\u70b9\u5982\u679c\u88ab\u67d3\u6210$0$\uff0c\u90a3\u4e48\u5b83\u7684$1$\u51fa\u8fb9\u90fd\u8981\u88ab\u5220\u53bb\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 \n\u73b0\u5728\u8981\u6c42\u8fd9\u5f20\u56fe\u4ece$1$\u5230$n$\u7684\u6700\u77ed\u8def\u6700\u957f\uff0c\u6216\u8005\u5e72\u8106\u4e0d\u8fde\u901a\uff0c\u6c42\u51fa\u67d3\u8272\u65b9\u6848\u3002  \n\n### \u601d\u8def  \n~~\u86ee\u7b80\u5355\u7684\u4e00\u9053\u56fe\u8bba\u9898~~  \n\n\u4e00\u5f00\u59cb\u6709\u4e2a\u76f4\u89c2\u7684\u60f3\u6cd5\u5c31\u662f\u5982\u679c\u80fd\u628a\u80fd\u5230\u7b2c$n$\u4e2a\u70b9\u7684\u8fb9\u5168\u90e8\u5c01\u4e0a\uff0c\u5c82\u4e0d\u7f8e\u54c9\uff1f  \n\n\u6ce8\u610f\u5230\u56fe\u4e2d\u4f1a\u6709\u91cd\u8fb9\uff0c\u5e76\u4e14\u8fb9\u7684\u989c\u8272\u4e0d\u540c\uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u8fb9\u4e0d\u80fd\u88ab\u5c01\u4e0a\u3002  \n\n\u518d\u53bb\u8003\u8651\u8fd9\u4e9b\u4e0d\u80fd\u88ab\u5c01\u4e0a\u7684\u8fb9\uff08\u4e00\u4e2a\u70b9\u5230\u67d0\u4e2a\u540e\u7ee7\u8282\u70b9\u6709\u4e24\u4e2a\u989c\u8272\u4e0d\u540c\u7684\u51fa\u8fb9\uff09\uff0c\u53d1\u73b0\u8fd9\u4e2a\u70b9\u7684\u67d3\u4ec0\u4e48\u989c\u8272\u5df2\u7ecf\u4e0d\u91cd\u8981\u4e86\uff0c\u56e0\u4e3a\u5982\u679c\u80fd\u5230\u8fd9\u4e2a\u8282\u70b9\uff0c\u5c31\u76f4\u63a5\u53ef\u4ee5\u5f80\u7ec8\u70b9\u8d70\u53bb\uff0c\u518d\u8d70\u522b\u7684\u8def\u662f\u6d6a\u8d39\u65f6\u95f4\u3002   \n\n\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u7ec8\u70b9\u51fa\u53d1$bfs$\u53cd\u56fe\uff0c\u8d2a\u5fc3\u5730\u67d3\u8272\u6bcf\u4e00\u6761\u8fb9\u6307\u5411\u7684\u70b9\uff0c\u5982\u679c\u8be5\u70b9\u5df2\u7ecf\u88ab\u67d3\u8272\u8fc7\uff0c\u8bf4\u660e\u8fd9\u6761\u8fb9\u65e0\u6cd5\u88ab\u5c01\u4e0a\uff0c\u5c31\u628a\u90a3\u4e2a\u70b9\u5165\u961f\uff0c\u76f4\u5230\u5fc5\u987b\u628a$1$\u53f7\u70b9\u5165\u961f\uff0c\u6b64\u65f6\u5c31\u5f97\u5230\u4e86$1$\u53f7\u70b9\u5230$n$\u53f7\u70b9\u7684\u6700\u77ed\u8def\u6700\u5927\u503c\uff0c\u81f3\u4e8e\u5269\u4e0b\u6ca1\u88ab\u67d3\u8272\u7684\u70b9\uff0c\u4efb\u610f\u67d3\u8272\u5373\u53ef\u3002  \n\n### \u4ee3\u7801  \n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 5e5 + 1009;\n\nint read(){\n\tchar c; int num, f = 1;\n\twhile(c = getchar(),!isdigit(c)) if(c == '-')f = -1; num = c - '0';\n\twhile(c = getchar(), isdigit(c)) num = num * 10 + c - '0';\n\treturn num * f;\n}\n\nint n, m, col[N], dis[N], vis[N], d[N];\nint head[N], nxt[N], ver[N], edge[N], tot;\nvoid add(int x, int y, int w){\n\tver[++tot] = y; nxt[tot] = head[x]; head[x] = tot; edge[tot] = w;\n}\nqueue<int>q;\n\nint main()\n{\n\tn = read(); m = read();\n\tfor(int i = 1; i <= m; i++){\n\t\tint x = read(), y = read(), w = read();\n\t\tadd(y, x, w);\n\t}\n\tif(n == 1){\n\t\tprintf(\"0\\n0\\n\");\n\t\treturn 0;\n\t}\n\tmemset(col, -1, sizeof(col));\n\tq.push(n); vis[n] = 0;\n\twhile(q.size()){\n\t\tint x = q.front(); q.pop();\n\t\tif(x == 1)break;\n\t\tfor(int i = head[x]; i; i = nxt[i])if(!vis[ver[i]]){\n\t\t\tif(col[ver[i]] == -1 || col[ver[i]] == 1 - edge[i]){\n\t\t\t\tcol[ver[i]] = 1 - edge[i];\n\t\t\t}else {\n\t\t\t\tq.push(ver[i]);\n\t\t\t\td[ver[i]] = d[x] + 1;\n\t\t\t\tvis[ver[i]] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\", d[1] ? d[1] : -1);\n\tfor(int i = 1; i <= n; i++){\n\t\tif(col[i] == -1)printf(\"0\");\n\t\telse printf(\"%d\",col[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n",
        "postTime": 1599667382,
        "uid": 66548,
        "name": "onglu",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1407E \u3010Egor in the Republic of Dagestan\u3011"
    },
    {
        "content": "#### \u9898\u610f\uff1a\n\u7ed9\u51fa\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u989c\u82720/1\uff0c\u8981\u6c42\u4e3a\u6bcf\u4e2a\u70b9\u6307\u5b9a\u4e00\u4e2a\u989c\u8272\uff0c\u5f53\u70b9\u7684\u989c\u8272\u548c\u8fd9\u6761\u51fa\u8fb9\u7684\u989c\u8272\u76f8\u540c\u65f6\u624d\u80fd\u8d70\u8fd9\u6761\u8fb9\u3002\u6c42\u6700\u5927\u5316\u4ece\u70b9 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u3002\n\n#### Solution\n\n\u5982\u679c\u6211\u4eec\u8003\u8651\u6700\u77ed\u8def\u4e0a\u7684\u4e00\u4e2a\u70b9 $x$\uff0c\u56e0\u4e3a\u8fb9\u6743\u90fd\u662f $1$\uff0c\u6574\u4e2a\u56fe\u6709\u4e00\u79cd\u5c42\u6b21\u611f\u3002\u53ef\u4ee5\u53d1\u73b0\u70b9 $x$ \u7684\u989c\u8272\u4e0d\u5f71\u54cd $dis[x]$\uff0c\u800c\u4f1a\u5f71\u54cd\u4ece $x$ \u5230 $n$ \u7684\u6700\u5c0f\u8def\u3002\n\n\u8d2a\u5fc3\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6700\u5927\u5316 $x$ \u5230 $n$ \u7684\u6700\u5c0f\u8ddd\u79bb\u3002\n\n\u5728\u53cd\u56fe\u4e0a\uff0c\u4ece $n$ \u5f00\u59cb `bfs`\uff0c\u5f53\u7b2c\u4e00\u6b21\u78b0\u5230\u67d0\u4e2a\u65e0\u8272\u70b9 $x$ \u65f6\uff0c\u5c06 $x$ \u7684\u989c\u8272\u8bbe\u7f6e\u4e3a\u4e0e\u8fd9\u6761\u8fb9\u7684\u989c\u8272\u76f8\u53cd\u3002\u4e4b\u540e\u518d\u8bbf\u95ee\u5230\u65f6\uff0c\u4e14\u8fb9\u7684\u989c\u8272\u4e0e\u70b9\u7684\u989c\u8272\u76f8\u540c\u65f6\uff0c\u5c31\u66f4\u65b0\u5b83\uff08\u5e76\u5165\u961f\u5217\uff09\u3002\u663e\u7136\u6bcf\u4e2a\u70b9\u6700\u591a\u88ab\u66f4\u65b0\u4e00\u6b21\u3002\n\n\u8fd9\u6837\u5c31\u6700\u5927\u5316\u4e86\u6bcf\u4e2a\u70b9\u5230 $n$ \u7684\u8ddd\u79bb\u3002\u4e5f\u5c31\u662f\u6700\u5927\u5316\u4e86 $1$ \u5230 $n$ \u7684\u8ddd\u79bb\u3002\n\n#### Codes\n\n```cpp\n#include <cstdio>\n#include <queue>\nint const maxn = 500005;\nint n = 0, m = 0;\nint head[maxn], nxt[maxn << 1], to[maxn << 1], val[maxn << 1], cnt = 0;\ninline void insert(int u, int e, int v) { nxt[++cnt] = head[u]; head[u] = cnt; to[cnt] = e; val[cnt] = v; }\nint color[maxn], dis[maxn];\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\tint x = 0, y = 0, z = 0;\n\tfor (int i = 1; i <= m; ++i) {\n\t\tscanf(\"%d %d %d\", &x, &y, &z);\n\t\tinsert(y, x, z);  // \u53cd\u56fe\n\t}\n\tfor (int i = 1; i <= n; ++i)\n\t\tcolor[i] = -1, dis[i] = n * 2;\n\tcolor[n] = 0;\n\tdis[n] = 0;\n\tstd::queue<int> q;\n\tq.push(n);\n\twhile (!q.empty()) {\n\t\tint x = q.front();\n\t\tq.pop();\n\t\tfor (int i = head[x]; i; i = nxt[i]) {\n\t\t\tif (color[to[i]] == -1)\n\t\t\t\tcolor[to[i]] = (val[i] ^ 1);\n\t\t\telse {\n\t\t\t\tif (color[to[i]] == val[i] && dis[to[i]] > dis[x] + 1) {\n\t\t\t\t\tdis[to[i]] = dis[x] + 1;\n\t\t\t\t\tq.push(to[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\", dis[1] == 2 * n ? -1 : dis[1]);\n\tfor (int i = 1; i <= n; ++i)\n\t\tputchar('0' + (color[i] == -1 ? 0 : color[i]));\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n",
        "postTime": 1599660685,
        "uid": 128771,
        "name": "\u738b\u9cb2\u9e4f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1407E \u3010Egor in the Republic of Dagestan\u3011"
    }
]