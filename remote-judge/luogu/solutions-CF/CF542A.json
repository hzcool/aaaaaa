[
    {
        "content": "[Link](https://www.luogu.com.cn/problem/CF542A)\n\n[My Blog](https://tony102.com/archives/125/)\n\n\n## Description\n\n\u7ed9\u5b9a $n$ \u4e2a\u533a\u95f4\uff08\u7b2c\u4e00\u7c7b\u533a\u95f4\uff09\u548c\u53e6\u5916 $m$ \u4e2a\u533a\u95f4\uff08\u7b2c\u4e8c\u7c7b\u533a\u95f4\uff09\uff08\u8fd9 $m$ \u4e2a\u533a\u95f4\u6bcf\u4e2a\u5355\u4f4d\u957f\u5ea6\u6709\u4e00\u4e2a\u6743\u503c $c_i$\uff09\uff0c\u73b0\u5728\u8981\u5728 $n$ \u4e2a\u533a\u95f4\u548c $m$ \u4e2a\u533a\u95f4\u4e2d\u5404\u9009\u4e00\u4e2a\u533a\u95f4\uff0c\u4f7f\u5f97\u9009\u51fa\u6765\u7684\u7b2c\u4e00\u4e2a\u533a\u95f4\u548c\u9009\u51fa\u6765\u7684\u7b2c\u4e8c\u4e2a\u533a\u95f4\u7684\u4ea4\u4e58\u4ee5\u7b2c\u4e8c\u4e2a\u533a\u95f4\u7684 $c_i$ \u6700\u5927\u3002\n\n\u6ce8\u610f\uff0c\u5047\u5982\u9009\u51fa\u6765\u7684\u7b2c\u4e00\u4e2a\u533a\u95f4\u662f $[l, r]$\uff0c\u7b2c\u4e8c\u4e2a\u533a\u95f4\u662f $[x, y]$ \u4e14 $[l,r] \\cap [x,y] \\neq \\emptyset$\uff0c\u82e5\u4ea4\u7684\u90e8\u5206\u4e3a $[a, b]$ \uff0c\u5219\u8fd9\u4e00\u6bb5\u7684\u8d21\u732e\u4e3a $(b-a) \\times c_i$\n\n## Sol\n\n\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u5bf9\u7b2c\u4e00\u7c7b\u533a\u95f4\u6309\u7167\u5de6\u7aef\u70b9\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u5347\u5e8f\u6392\u5e8f\uff0c\u82e5\u7b2c\u4e00\u5173\u952e\u5b57\u76f8\u7b49\u5219\u6309\u7167\u4ee5\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u964d\u5e8f\u6392\u5e8f\u3002\n\n\u52a0\u5165\u4e00\u4e2a\u533a\u95f4\u88ab\u53e6\u4e00\u4e2a\u533a\u95f4\u5b8c\u5168\u5305\u542b\uff0c\u5219\u8be5\u533a\u95f4\u663e\u7136\u53ef\u4ee5\u7565\u8fc7\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7b2c\u4e00\u7c7b\u533a\u95f4 $[l_i, r_i]$ \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u6b21\u4e8c\u5206\u67e5\u51fa\uff1a1. \u5de6\u7aef\u70b9 $\\geq l_i$ \u7684\u533a\u95f4 2. \u53f3\u7aef\u70b9 $\\leq r_i$ \u7684\u533a\u95f4\u3002\u4ece\u8fd9\u4e24\u7c7b\u533a\u95f4\u4e2d\u5206\u522b\u4e8c\u5206\u51fa\u5728\u8fb9\u754c\u7684\u90a3\u4e2a\u7b2c\u4e8c\u7c7b\u533a\u95f4\uff0c\u4e0e\u7b54\u6848\u53d6 $\\max$\n\n\u4f46\u662f\u6ce8\u610f\u5230\uff0c\u5b58\u5728\u4e00\u79cd\u60c5\u51b5\uff0c\u5f53\u524d\u8fd9\u4e2a\u533a\u95f4\u53ef\u80fd\u5b8c\u5168\u88ab\u67d0\u4e00\u4e2a\u7b2c\u4e8c\u7c7b\u533a\u95f4\u5305\u542b\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ea\u9700\u8981\u628a\u6240\u6709\u7684\u7b2c\u4e00\u7c7b\u533a\u95f4\u63d2\u5165\u8fdb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u53ea\u9700\u8981\u627e\u51fa\u5de6\u53f3\u7aef\u70b9\u5728\u8303\u56f4\u5185\u7684\u6700\u5927\u533a\u95f4\u957f\u5ea6\u5373\u53ef\u3002\n\n\u8981\u8f93\u51fa\u7b2c\u4e00\u7c7b\u548c\u7b2c\u4e8c\u7c7b\u533a\u95f4\u7684\u7f16\u53f7\uff0c\u7ebf\u6bb5\u6811\u8981\u8bb0\u5f55\u53d6\u6700\u957f\u7684\u533a\u95f4\u7684\u7f16\u53f7\u3002\u7a0d\u5fae\u6ce8\u610f\u4e00\u4e0b\u5373\u53ef\u3002\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair < LL, int > PLI;\nconst int SIZE = 3e5 + 5;\n\nint n, m, N;\n\nstruct node {\n    int l, r, c, idx;\n    bool operator < (const node &a) const {\n        return l == a.l ? r > a.r : l < a.l;\n    }\n    LL operator & (const node &a) const {\n        if (l <= a.l && r >= a.r) return a.r - a.l;\n        if (l >= a.l && r <= a.r) return r - l;\n        return std::max(0, std::min(r, a.r) - std::max(l, a.l));\n    }\n} a[SIZE], b[SIZE], c[SIZE];\n\nnamespace GTR {\n\tconst int bufl = 1 << 15;\n\tchar buf[bufl], *s = buf, *t = buf;\n\tinline int fetch() {\n\t\tif (s == t) { t = (s = buf) + fread(buf, 1, bufl, stdin); if (s == t) return EOF; }\n\t\treturn *s++;\n\t}\n\tinline int read() {\n\t\tint a = 0, b = 1, c = fetch();\n\t\twhile (c < 48 || c > 57) b ^= c == '-', c = fetch();\n\t\twhile (c >= 48 && c <= 57) a = (a << 1) + (a << 3) + c - 48, c = fetch();\n\t\treturn b ? a : -a;\n\t}\n} using GTR::read;\n\nnamespace segmentTree {\n    PLI len[SIZE << 2];\n    #define lson(p) (p << 1)\n    #define rson(p) (p << 1 | 1)\n    \n    void pushUp(int p) {\n        PLI ans = len[lson(p)];\n        if (len[rson(p)].second > ans.second) ans = len[rson(p)];\n        len[p] = ans;\n    }\n\n    void build(int p, int l, int r) {\n        if (l == r) return len[p] = (PLI) {a[l].idx, 1ll * a[l].r - a[l].l}, void();\n        int mid = (l + r) / 2;\n        build(lson(p), l, mid), build(rson(p), mid + 1, r);\n        pushUp(p);\n    }\n    PLI query(int p, int l, int r, int ql, int qr) {\n        if (ql <= l && r <= qr) return len[p];\n        int mid = (l + r) >> 1; PLI ans = (PLI) {0, 0};\n        if (ql <= mid) {\n            PLI res = query(lson(p), l, mid, ql, qr);\n            if (res.second > ans.second) ans = res;\n        }\n        if (qr > mid) {\n            PLI res = query(rson(p), mid + 1, r, ql, qr);\n            if (res.second > ans.second) ans = res;\n        }\n        return ans;\n    }\n} using segmentTree::build; using segmentTree::query;\n\nint main() {\n    // freopen(\"code.in\", \"r\", stdin);\n    n = read(), m = read();\n    for (int i = 1; i <= n; ++ i) c[i].l = read(), c[i].r = read(), c[i].idx = i;\n    for (int i = 1; i <= m; ++ i) b[i].l = read(), b[i].r = read(), b[i].c = read();\n    std::sort(c + 1, c + n + 1);\n    for (int i = 1; i <= n; ++ i) a[i] = c[i];\n    N = 1;\n    for (int i = 2; i <= n; ++ i) {\n        if (a[i].r > a[N].r) a[++ N] = a[i];\n    }\n    build(1, 1, N); LL ans = -1e18; int ansl = 0, ansr = 0;\n    for (int i = 1; i <= m; ++ i) {\n        int l = 1, r = N, mid;\n        while (l < r) {\n            mid = (l + r) / 2;\n            if (l == mid) break;\n            if (a[mid].l < b[i].l) l = mid;\n            else r = mid;\n        }\n        LL res = 1ll * (b[i] & a[l]) * b[i].c;\n        if (ans < res) ans = res, ansl = a[l].idx, ansr = i;\n        // ans = std::max(ans, 1ll * (b[i] & a[l]) * b[i].c);\n        int L = l + 1, R; l = 1, r = N, mid;\n        while (l < r) {\n            mid = (l + r) / 2;\n            if (a[mid].r > b[i].r) r = mid;\n            else l = mid + 1;\n        }\n        R = r - 1;\n        res = 1ll * (b[i] & a[r]) * b[i].c;\n        if (ans < res) ans = res, ansl = a[r].idx, ansr = i;\n        if (R >= L) {\n            PLI tmp = query(1, 1, N, L, R);\n            res = 1ll * tmp.second * b[i].c;\n            if (ans < res) ans = res, ansl = tmp.first, ansr = i;\n        }\n    }\n    if (ans <= 0) puts(\"0\");\n    else printf(\"%lld\\n%d %d\\n\", ans, ansl, ansr);\n    return 0;\n}\n```\n",
        "postTime": 1632212331,
        "uid": 230933,
        "name": "Tony102",
        "ccfLevel": 7,
        "title": "CF542A Place Your Ad Here"
    },
    {
        "content": "\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u7535\u89c6\u53f0$a$\uff0c\u5206\u5982\u4e0b\u51e0\u7c7b\uff1a\n\n1. \u5e7f\u544a\u548c\u7535\u89c6\u53f0\u7684\u516c\u5171\u90e8\u5206\u4e3a$[L_a,x]$\uff0c\u5373\u5de6\u8fb9\u76f8\u4ea4\u4e8e\u5de6\u7aef\u70b9\uff0c\u53f3\u8fb9\u5728\u7ebf\u6bb5\u4e2d\u95f4\u3002\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u68f5\u524d\u7f00\u4e3b\u5e2d\u6811\uff0c\u628a\u5de6\u7aef\u70b9\u5728$1\\sim i$\u5185\u7684\u53f3\u7aef\u70b9\u5b58\u5230\u7ebf\u6bb5\u6811\u4e0a\u3002\u7136\u540e\u67e5\u8be2\u76f8\u5e94\u5de6\u7aef\u70b9\u4e2d\u6700\u53f3\u8fb9\u7684\u90a3\u4e2a\uff0c\u5373\u4e3a\u6700\u4f18\u9009\u6cd5\u3002\n2. \u5e7f\u544a\u548c\u7535\u89c6\u53f0\u7684\u516c\u5171\u90e8\u5206\u4e3a$[x,R_a]$\uff0c\u5373\u53f3\u8fb9\u76f8\u4ea4\u4e8e\u53f3\u7aef\u70b9\uff0c\u5de6\u8fb9\u5728\u7ebf\u6bb5\u4e2d\u95f4\u3002\u6309\u4e0a\u4e00\u79cd\u60c5\u51b5\u7684\u65b9\u6cd5\u5012\u7740\u8ba8\u8bba\u5373\u53ef\u3002\n3. \u5e7f\u544a\u7684\u7535\u89c6\u53f0\u7684\u516c\u5171\u90e8\u5206\u4e3a$[L_a,R_a]$\uff0c\u5373\u7535\u89c6\u53f0\u5b8c\u5168\u88ab\u5305\u542b\u3002\u7531\u4e8e\u60c5\u51b51\u662f\u9009\u53d6\u5de6\u7aef\u70b9\u5728$L_a$\u5de6\u8fb9\u7684\u3001\u6700\u53f3\u8fb9\u7684\u7ebf\u6bb5\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e5f\u4e00\u5b9a\u88ab\u8003\u8651\u8fdb\u53bb\u4e86\uff0c\u8ba1\u7b97\u8d21\u732e\u65f6\u5bf9$R_a$\u53d6\u8f83\u5c0f\u503c\u5373\u53ef\u3002\n4. \u5e7f\u544a\u7684\u7535\u89c6\u53f0\u7684\u516c\u5171\u90e8\u5206\u4e3a$[x,y]$\uff0c\u5373\u5e7f\u544a\u5b8c\u5168\u88ab\u5305\u542b\u3002\u8fd9\u4e2a\u4e0d\u597d\u8003\u8651\u3002\u6211\u4eec\u6362\u4e2a\u601d\u8def\uff1a\u628a\u7535\u89c6\u53f0\u6309\u5de6\u7aef\u70b9\u5efa\u4e3b\u5e2d\u6811\uff0c\u6bcf\u6b21\u5728\u76f8\u5e94\u53f3\u7aef\u70b9\u5904\u63d2\u5165\u5176\u4eba\u6570$c$\u7684\u503c\u3002\u7136\u540e\u5c31\u662f\u53d6\u5b8c\u5168\u8986\u76d6\u5b83\u7684\u4e14$c$\u6700\u5927\u7684\u4e00\u4e2a\u5373\u53ef\u3002\n\n\u6240\u4ee5\u4e3b\u5e2d\u6811\u505a\u4e09\u904d\u5373\u53ef\u3002\u7531\u4e8e\u7a7a\u95f4\u95ee\u9898\uff0c\u53ea\u80fd\u5f00\u4e00\u68f5\u4e3b\u5e2d\u6811\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u6bcf\u6b21\u505a\u5b8c\u4e00\u904d\u540e\u518d\u5efa\u4e0b\u4e00\u904d\u7684\u4e3b\u5e2d\u6811\u3002\n\n\u7531\u4e8e\u9700\u8981\u8f93\u51fa\u65b9\u6848\uff0c\u6240\u4ee5\u4e3b\u5e2d\u6811\u4e2d\u9700\u8981\u591a\u7ef4\u62a4\u4e00\u4e2a\u7f16\u53f7\u3002\u6211\u76f4\u63a5\u5c06\u4e24\u4e2a\u5173\u952e\u5b57\u538b\u6210\u4e00\u4e2along long\u8ba1\u7b97\u3002\n\n\u800c\u4e14\u53ea\u6709256MB\uff0c\u4e3b\u5e2d\u6811\u4e0d\u80fd\u5f00\u592a\u5927\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O((n+m)\\log n)$\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\n#include<vector>\n#define N 200005\n#define M 800005\ntypedef long long LL;\nconst int base=(1<<18)-1;\nstruct istream{\n    char buf[23333333],*s;\n    inline istream(){\n        buf[fread(s=buf,1,23333330,stdin)]='\\n';\n        fclose(stdin);\n    }\n    inline istream&operator>>(int&d){\n        for(d=0;!isdigit(*s);++s);\n        while(isdigit(*s))\n        d=d*10+(*s++^'0');\n        return*this;\n    }\n}cin;\nint ls[M*16],rs[M*16],rt[M],node;\nLL mx[M*16];\nint adL[N],adR[N],qL[N],qR[N],qC[N],n,m,x,y;\nstd::vector<int>vec,id[M];\nLL ans=0;\nvoid add(int&o,int l,int r,const int&pos,const LL&ins){\n    const int pre=o;\n    o=++node;ls[o]=ls[pre],rs[o]=rs[pre];\n    if(l==r)mx[o]=ins;else{\n        const int mid=l+r>>1;\n        if(pos<=mid)add(ls[o],l,mid,pos,ins);else\n        add(rs[o],mid+1,r,pos,ins);\n        mx[o]=std::max(mx[ls[o]],mx[rs[o]]);\n    }\n}\nLL query(const int&o,int l,int r,const int&L){\n    if(!o)return 0;\n    if(L<=l)return mx[o];\n    const int mid=l+r>>1;\n    if(L<=mid)return std::max(query(ls[o],l,mid,L),mx[rs[o]]);else\n    return query(rs[o],mid+1,r,L);\n}\nvoid add2(int&o,int l,int r,const int&pos,const LL&ins){\n    const int pre=o;\n    o=++node;ls[o]=ls[pre],rs[o]=rs[pre];\n    if(l==r)mx[o]=ins;else{\n        const int mid=l+r>>1;\n        if(pos<=mid)add2(ls[o],l,mid,pos,ins);else\n        add2(rs[o],mid+1,r,pos,ins);\n        mx[o]=std::min(mx[ls[o]],mx[rs[o]]);\n    }\n}\nLL query2(const int&o,int l,int r,const int&R){\n    if(!o)return 1e18;\n    if(r<R)return mx[o];\n    const int mid=l+r>>1;\n    if(mid<R)return std::min(query2(rs[o],mid+1,r,R),mx[ls[o]]);else\n    return query2(ls[o],l,mid,R);\n}\nvoid add3(int&o,int l,int r,const int&pos,const LL&C){\n    const int pre=o;\n    o=++node;ls[o]=ls[pre],rs[o]=rs[pre];\n    if(l==r)mx[o]=std::max(mx[pre],C);else{\n        const int mid=l+r>>1;\n        if(pos<=mid)add3(ls[o],l,mid,pos,C);else\n        add3(rs[o],mid+1,r,pos,C);\n        mx[o]=std::max(mx[ls[o]],mx[rs[o]]);\n    }\n}\nint main(){\n    vec.push_back(-1);\n    cin>>n>>m;\n    for(int i=1;i<=n;++i){\n        cin>>adL[i]>>adR[i];\n        vec.push_back(adL[i]),vec.push_back(adR[i]);\n    }\n    for(int i=1;i<=m;++i){\n        cin>>qL[i]>>qR[i]>>qC[i];\n        vec.push_back(qL[i]),vec.push_back(qR[i]);\n    }\n    std::sort(vec.begin(),vec.end());\n    vec.erase(std::unique(vec.begin(),vec.end()),vec.end());\n    for(int i=1;i<=n;++i){\n        adL[i]=std::lower_bound(vec.begin(),vec.end(),adL[i])-vec.begin();\n        adR[i]=std::lower_bound(vec.begin(),vec.end(),adR[i])-vec.begin();\n        id[adL[i]].push_back(i);\n    }\n    for(int i=1;i<=m;++i){\n        qL[i]=std::lower_bound(vec.begin(),vec.end(),qL[i])-vec.begin();\n        qR[i]=std::lower_bound(vec.begin(),vec.end(),qR[i])-vec.begin();\n    }\n    const int S=vec.size();\n    for(int i=1;i<=S;++i){\n        rt[i]=rt[i-1];\n        for(int j=id[i].size()-1;~j;--j)\n        add(rt[i],1,S,adR[id[i][j]],(LL)adR[id[i][j]]<<18|id[i][j]);\n    }\n    for(int i=1;i<=m;++i){\n        LL right=query(rt[qL[i]],1,S,qL[i]);\n        if(right>>18>qR[i])right=(right&base)|((LL)qR[i]<<18);\n        if(right>>18>qL[i]){\n        \tconst LL val=(LL)(vec[right>>18]-vec[qL[i]])*qC[i];\n        \tif(ans<val)ans=val,x=right&base,y=i;\n        }\n    }\n    node=0;\n    *mx=1e18;\n    for(int i=1;i<=S;++i)id[i].clear(),rt[i]=0;\n    for(int i=1;i<=n;++i)id[adR[i]].push_back(i);\n    for(int i=S;i;--i){\n        rt[i]=rt[i+1];\n        for(int j=id[i].size()-1;~j;--j)\n        add2(rt[i],1,S,adL[id[i][j]],(LL)adL[id[i][j]]<<18|id[i][j]);\n    }\n    for(int i=1;i<=m;++i){\n        LL left=query2(rt[qR[i]],1,S,qR[i]);\n        if(left>>18<qL[i])left=(left&base)|((LL)qL[i]<<18);\n        if(left>>18<qR[i]){\n        \tconst LL val=(LL)(vec[qR[i]]-vec[left>>18])*qC[i];\n        \tif(ans<val)ans=val,x=left&base,y=i;\n        }\n    }\n    *mx=node=0;\n    for(int i=1;i<=S;++i)id[i].clear(),rt[i]=0;\n    for(int i=1;i<=m;++i)id[qL[i]].push_back(i);\n    for(int i=1;i<=S;++i){\n        rt[i]=rt[i-1];\n        for(int j=id[i].size()-1;~j;--j)\n        add3(rt[i],1,S,qR[id[i][j]],(LL)qC[id[i][j]]<<18|id[i][j]);\n    }\n    for(int i=1;i<=n;++i){\n        const LL mx=query(rt[adL[i]],1,S,adR[i]);\n        const LL val=(mx>>18)*(vec[adR[i]]-vec[adL[i]]);\n        if(ans<val)ans=val,x=i,y=mx&base;\n    }\n    if(ans)\n    printf(\"%lld\\n%d %d\\n\",ans,x,y);else puts(\"0\");\n    return 0;\n}\n```",
        "postTime": 1546579721,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF542A \u3010Place Your Ad Here\u3011"
    },
    {
        "content": "# [CF542A]Place Your Ad Here\n## \u9898\u76ee\u5927\u610f\uff1a\n\u6709$n(n\\le2\\times10^5)$\u4e2a\u5e7f\u544a\u548c$m(m\\le2\\times10^5)$\u4e2a\u7535\u89c6\u53f0\uff0c\u7b2c$i$\u4e2a\u5e7f\u544a\u53ea\u80fd\u5728$[l_i,r_i]$\u5185\u64ad\u653e\uff0c\u7b2c$j$\u4e2a\u7535\u89c6\u53f0\u4f1a\u5728\u65f6\u95f4\u6bb5$[a_j,b_j]$\u64ad\u51fa\uff0c\u5e76\u4e14\u6709$c_j$\u4e2a\u4eba\u6536\u770b\u3002\u9009\u62e9\u7b2c$x$\u4e2a\u5e7f\u544a\u548c\u7b2c$y$\u4e2a\u7535\u89c6\u53f0\u7684\u6536\u76ca\u4e3a$(v-u)c_y$\uff0c\u5176\u4e2d$[u,v]=[l_x,r_x]\\cap[a_y,b_y]$\u3002\n\n\u4ece\u4e2d\u9009\u53d6\u4e00\u4e2a\u5e7f\u544a\u548c\u4e00\u4e2a\u7535\u89c6\u53f0\uff0c\u4f7f\u6536\u76ca\u6700\u5927\u3002\u6c42\u6700\u5927\u6536\u76ca\uff0c\u5e76\u8f93\u51fa\u4efb\u610f\u4e00\u79cd\u65b9\u6848\u3002\n\n## \u601d\u8def\uff1a\n\u5c06\u5e7f\u544a\u62c6\u6210\u4e24\u4e2a\u7aef\u70b9\u6392\u5e8f\uff0c\u5c06\u7535\u89c6\u53f0\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\u3002\n\n\u679a\u4e3e\u6bcf\u4e2a\u7535\u89c6\u53f0$[l,r]$\uff0c\u82e5\u4e00\u4e2a\u5e7f\u544a\u53ea\u6709\u5de6\u7aef\u70b9\u5728$r$\u524d\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u5173\u5fc3\u6700\u5de6\u7684\u5de6\u7aef\u70b9\uff1b\u82e5\u4e00\u4e2a\u5e7f\u544a\u5de6\u53f3\u7aef\u70b9\u5747\u5728$[l,r]$\u5185\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u5173\u5fc3\u5176\u957f\u5ea6\uff1b\u82e5\u4e00\u4e2a\u5e7f\u544a\u5de6\u7aef\u70b9\u5728$l$\u524d\uff0c\u53f3\u7aef\u70b9\u5728$[l,r]$\u5185\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u5173\u5fc3\u5176\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u7528`set`\u7ef4\u62a4\u5373\u53ef\uff1b\u540e\u4e24\u79cd\u60c5\u51b5\u53ea\u9700\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O(n\\log n)$\u3002\n\n## \u6e90\u4ee3\u7801\uff1a\n```cpp\n#include<set>\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\ninline int getint() {\n\tregister char ch;\n\twhile(!isdigit(ch=getchar()));\n\tregister int x=ch^'0';\n\twhile(isdigit(ch=getchar())) x=(((x<<2)+x)<<1)+(ch^'0');\n\treturn x;\n}\ntypedef long long int64;\nstruct Node {\n\tint p,id;\n\tbool operator < (const Node &rhs) const {\n\t\treturn p<rhs.p;\n\t}\n};\nstruct Seg {\n\tint l,r,w,id;\n\tbool operator < (const Seg &rhs) const {\n\t\treturn r<rhs.r;\n\t}\n};\nconst int N=2e5+1,K=8e5+1;\nNode a[N],b[N];\nSeg c[N];\nint rnk[N],tmp[K];\nclass SegmentTree {\n\t#define _left <<1\n\t#define _right <<1|1\n\t#define mid ((b+e)>>1)\n\tprivate:\n\t\tstd::pair<int,int> val[K<<2];\n\t\tvoid push_up(const int &p) {\n\t\t\tval[p]=std::max(val[p _left],val[p _right]);\n\t\t}\n\tpublic:\n\t\tvoid modify(const int &p,const int &b,const int &e,const int &x,const std::pair<int,int> &v) {\n\t\t\tif(b==e) {\n\t\t\t\tval[p]=std::max(val[p],v);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(x<=mid) modify(p _left,b,mid,x,v);\n\t\t\tif(x>mid) modify(p _right,mid+1,e,x,v);\n\t\t\tpush_up(p);\n\t\t}\n\t\tstd::pair<int,int> query(const int &p,const int &b,const int &e,const int &l,const int &r) const {\n\t\t\tif(b==l&&e==r) return val[p];\n\t\t\tstd::pair<int,int> ret(0,0);\n\t\t\tif(l<=mid) ret=std::max(ret,query(p _left,b,mid,l,std::min(mid,r)));\n\t\t\tif(r>mid) ret=std::max(ret,query(p _right,mid+1,e,std::max(mid+1,l),r));\n\t\t\treturn ret;\n\t\t}\n\t#undef _left\n\t#undef _right\n\t#undef mid\n};\nSegmentTree t1,t2;\nstd::set<std::pair<int,int> > set;\nint main() {\n\tconst int n=getint(),m=getint();\n\tint tot=0;\n\tfor(register int i=1;i<=n;i++) {\n\t\tconst int l=getint(),r=getint();\n\t\ta[i]=(Node){l,i};\n\t\tb[i]=(Node){r,i};\n\t\ttmp[++tot]=l;\n\t\ttmp[++tot]=r;\n\t}\n\tfor(register int i=1;i<=m;i++) {\n\t\ttmp[++tot]=c[i].l=getint();\n\t\ttmp[++tot]=c[i].r=getint();\n\t\tc[i].w=getint();\n\t\tc[i].id=i;\n\t}\n\tstd::sort(&tmp[1],&tmp[tot]+1);\n\tfor(register int i=1;i<=n;i++) {\n\t\ta[i].p=std::lower_bound(&tmp[1],&tmp[tot]+1,a[i].p)-tmp;\n\t\tb[i].p=std::lower_bound(&tmp[1],&tmp[tot]+1,b[i].p)-tmp;\n\t}\n\tfor(register int i=1;i<=m;i++) {\n\t\tc[i].l=std::lower_bound(&tmp[1],&tmp[tot]+1,c[i].l)-tmp;\n\t\tc[i].r=std::lower_bound(&tmp[1],&tmp[tot]+1,c[i].r)-tmp;\n\t}\n\tstd::sort(&a[1],&a[n]+1);\n\tstd::sort(&b[1],&b[n]+1);\n\tstd::sort(&c[1],&c[m]+1);\n\tfor(register int i=1;i<=n;i++) {\n\t\trnk[a[i].id]=i;\n\t}\n\tint64 ans=0;\n\tint x,y;\n\tfor(register int i=1,j=1,k=1;i<=m;i++) {\n\t\tfor(;j<=n&&a[j].p<=c[i].r;j++) {\n\t\t\tset.insert(std::make_pair(tmp[a[j].p],a[j].id));\n\t\t}\n\t\tfor(;k<=n&&b[k].p<=c[i].r;k++) {\n\t\t\tconst int j=rnk[b[k].id];\n\t\t\tset.erase({tmp[a[j].p],a[j].id});\n\t\t\tt1.modify(1,1,tot,a[j].p,{tmp[b[k].p]-tmp[a[j].p],a[j].id});\n\t\t\tt2.modify(1,1,tot,a[j].p,{tmp[b[k].p],a[j].id});\n\t\t}\n\t\t//-: ad\n\t\t//=: tv\n\t\tint len=0,z=0;\n\t\tif(!set.empty()) {\n\t\t\t//  ------\n\t\t\t//======\n\t\t\tconst int t=tmp[c[i].r]-std::max(tmp[c[i].l],set.begin()->first);\n\t\t\tif(t>len) {\n\t\t\t\tlen=t;\n\t\t\t\tz=set.begin()->second;\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t//  --\n\t\t\t//======\n\t\t\tconst auto p=t1.query(1,1,tot,c[i].l,c[i].r);\n\t\t\tif(p.first>len) {\n\t\t\t\tlen=p.first;\n\t\t\t\tz=p.second;\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t//------\n\t\t\t//  ======\n\t\t\tconst auto p=t2.query(1,1,tot,1,c[i].l);\n\t\t\tif(p.first-tmp[c[i].l]>len) {\n\t\t\t\tlen=p.first-tmp[c[i].l];\n\t\t\t\tz=p.second;\n\t\t\t}\n\t\t}\n\t\tif(1ll*len*c[i].w>ans) {\n\t\t\tans=1ll*len*c[i].w;\n\t\t\tx=z,y=c[i].id;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans);\n\tif(ans) printf(\"%d %d\\n\",x,y);\n\treturn 0;\n}\n```",
        "postTime": 1546561377,
        "uid": 10086,
        "name": "skylee",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF542A \u3010Place Your Ad Here\u3011"
    }
]