[
    {
        "content": "### P.S.\n\u6765\u66f4\u5566\uff0c\u9898\u89e3\u4e00\u8840 get\u3002  \n\n### Description.\n\u535a\u5f08\uff0c`Min` \u6709\u5f88\u591a\u5411\u91cf\uff0c`Max` \u6709\u5f88\u591a\u5411\u91cf\u3002  \n\u521d\u59cb\u4f4d\u4e8e $(x_0,y_0)$\uff0c`Max` \u5148\u624b\u3002  \n\u6bcf\u6b21\u53ef\u4ee5\u628a\u5f53\u524d\u70b9\u52a0\u4e0a\u53ef\u4ee5\u9009\u7684\u4efb\u610f\u4e00\u4e2a\u5411\u91cf\uff0c\u53ef\u4ee5\u9009\u591a\u6b21\u3002  \n`Min` \u7684\u76ee\u6807\u662f\u628a\u70b9\u79fb\u52a8\u5230\u7b2c\u4e09\u50cf\u9650\uff0c`Max` \u7684\u76ee\u6807\u662f\u963b\u6b62\u4ed6\u8fd9\u6837\u505a\u3002  \n\u95ee\u8c01\u8d62\u3002  \n\n### Solution.\n\u9996\u5148\uff0c\u8bbe `Min` \u4e3a\u653b\u65b9\uff0c`Max` \u4e3a\u5b88\u65b9\u3002  \n\u56e0\u4e3a\u5b88\u65b9\u5148\u624b\uff0c\u6240\u4ee5\u5982\u679c\u653b\u65b9\u6700\u540e\u80fd\u8d62\uff0c\u663e\u7136\u6b65\u6570\u548c\u5b88\u65b9\u4e00\u6837\u591a\uff0c\u90a3\u4e48\u53ef\u4ee5\u590d\u5236\u8fd9\u6bb5\u8fc7\u7a0b\uff0c\u4f7f\u5f97\u5e73\u9762\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u70b9\u90fd\u662f\u653b\u65b9\u8d62\u3002  \n\u4e8e\u662f\u6211\u4eec\u8bc1\u660e\u4e86\u521d\u59cb\u70b9\u548c\u6e38\u620f\u7ed3\u679c\u65e0\u5173\u3002  \n\u7136\u540e\uff0c\u76f8\u5f53\u4e8e\u5982\u679c\u653b\u65b9\u6709\u4e00\u4e2a\u5411\u91cf\uff0c\u5b83\u80fd\u201c\u8131\u9896\u800c\u51fa\u201d\uff0c\u90a3\u4e48\u653b\u65b9\u5c31\u8d62\u4e86\u3002  \n\u8003\u8651\u201c\u8131\u9896\u800c\u51fa\u201d\u9700\u8981\u4ec0\u4e48\u6761\u4ef6\uff0c\u5c31\u662f\u5b58\u5728\u4e00\u4e2a\u659c\u7387\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u659c\u7387\u79fb\u52a8\u4e0b\u6765\u7b2c\u4e00\u4e2a\u5207\u5230\u7684\u70b9\u662f\u8fd9\u4e2a\u5411\u91cf\u3002  \n\u518d\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u8fd9\u662f\u4ec0\u4e48\uff0c\u8fd9\u5c31\u662f\u5f3a\u5236\u659c\u7387\u521d\u59cb\u4e0d\u5927\u4e8e\u96f6\u7684\u51f8\u5305\u3002  \n\u51f8\u5305\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u662f\u201c\u8131\u9896\u800c\u51fa\u201d\u7684\u3002  \n\u5177\u4f53\u600e\u4e48\u6c42\u6709\u9650\u5236\u7684\u51f8\u5305\uff0c\u5c31\u76f4\u63a5\u628a\u5f53\u524d\u51f8\u5305\u5185 $y$ \u5750\u6807\u5c0f\u4e8e\u5f53\u524d\u70b9\u7684\u5f39\u8c03\u5373\u53ef\u3002 \n\n### Coding.\n```cpp\n//\u662f\u554a\u2026\u2026\u4f60\u5c31\u662f\u90a3\u53ea\u9b3c\u4e86\u2026\u2026\u6240\u4ee5\u88ab\u4f60\u78b0\u5230\u4ee5\u540e\uff0c\u5c31\u8f6e\u5230\u6211\u53d8\u6210\u9b3c\u4e86{{{\n#include<bits/stdc++.h>\nusing namespace std;typedef long long ll;\ntemplate<typename T>inline void read(T &x)\n{\n\tx=0;char c=getchar(),f=0;\n\tfor(;c<'0'||c>'9';c=getchar()) if(c=='-') f=1;\n\tfor(;c>='0'&&c<='9';c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tif(f) x=-x;\n}/*}}}*/\nstruct pnt\n{\n\tint x,y,id;\n\tchar operator<(pnt b) const {return x^b.x?x<b.x:y>b.y;}\n\tchar operator==(pnt b) const {return x==b.x&&y==b.y&&id==b.id;}\n}a[200005],st[200005];\nint n,m,tp,zkakioi,xxynb;\ninline char chk(pnt a,pnt b,pnt c) {return 1ll*(a.x-b.x)*(b.y-c.y)<1ll*(b.x-c.x)*(a.y-b.y);}\nint main()\n{\n\tread(n),read(m),read(zkakioi),read(xxynb);\n\tfor(int i=1;i<=n;i++) read(a[i].x),read(a[i].y),a[i].id=1;\n\tfor(int i=1;i<=m;i++) read(a[i+n].x),read(a[i+n].y);\n\tsort(a+1,a+n+m+1);int cnt=unique(a+1,a+n+m+1)-a-1;\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\twhile(tp&&st[tp].y<a[i].y) tp--;\n\t\twhile(tp>1&&chk(st[tp],st[tp-1],a[i])) tp--;\n\t\tst[++tp]=a[i];\n\t}\n\tfor(int i=1;i<=tp;i++) if(st[i].id) return puts(\"Max\"),0;\n\treturn puts(\"Min\"),0;\n}\n```",
        "postTime": 1620217018,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "CF566G Max and Min\uff08\u9898\u89e3\uff09"
    }
]