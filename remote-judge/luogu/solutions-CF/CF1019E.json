[
    {
        "content": "# \u9898\u76ee\u5206\u6790\n\n\u4e2a\u4eba\u535a\u5ba2->[here](https://blog.csdn.net/litble/article/details/88552839)\n\n\u5047\u8bbe\u4f60\u51c6\u5907\u628a\u6240\u6709\u201c\u53ef\u80fd\u201d\u6210\u4e3a\u6700\u957f\u8def\u5f84\u7684\u8def\u5f84\u90fd\u63d0\u53d6\u51fa\u6765\uff0c\u663e\u7136\u662f\u7528\u6811\u5206\u6cbb\u5566\uff0c\u8fd9\u9898\u4e2d\uff0c\u8fb9\u5206\u6cbb\u6bd4\u70b9\u5206\u6cbb\u66f4\u65b9\u4fbf\u3002\n\n\u8fb9\u5206\u6cbb\u6559\u5b66->[here](https://blog.csdn.net/litble/article/details/80853633)\n\n\u8fb9\u5206\u6cbb\u7684\u5957\u8def\uff0c\u7b2c\u4e00\u6b65\u5c06\u591a\u53c9\u6811\u8f6c\u4e3a\u4e8c\u53c9\u6811\uff0c\u5bf9\u4e8e\u65b0\u589e\u52a0\u51fa\u6765\u7684\u8fb9\uff0c\u5b83\u7684$a$\u548c$b$\u90fd\u662f0\u3002\u7136\u540e\u96c6\u4e2d\u5904\u7406\u7ecf\u8fc7\u67d0\u4e00\u6761\u8fb9\u7684\u8def\u5f84\uff0c\u4e00\u6761\u8fb9\u5c06\u6574\u68f5\u6811\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u8fd9\u6761\u8def\u5f84\u7531\u5728\u8fd9\u4e24\u4e2a\u90e8\u5206\u91cc\u7684\u90e8\u5206\u7ec4\u6210\uff0c\u4e8e\u662f\u6211\u4eec\u8981\u5408\u5e76\u4e24\u4e2a\u90e8\u5206\u7684\u4fe1\u606f\u3002\n\n\u4ec0\u4e48\u662f\u53ef\u80fd\u6210\u4e3a\u6700\u957f\u8def\u5f84\u7684\u8def\u5f84\uff1f\u5c06\u6bcf\u6761\u8def\u5f84\u770b\u505a\u4e00\u6761\u76f4\u7ebf$y=ax+b$\uff0c\u5219\u505a\u534a\u5e73\u9762\u4ea4\u540e\uff0c\u4ece\u5e73\u9762\u6700\u4e0a\u65b9\u5f80\u4e0b\u770b\u80fd\u770b\u5230\u7684\u7ebf\u5c31\u662f\u6709\u53ef\u80fd\u7684\u3002\u4f46\u662f\u534a\u5e73\u9762\u4ea4\u662f\u65e0\u6cd5\u5feb\u901f\u5408\u5e76\u4fe1\u606f\u7684\uff0c\u6240\u4ee5\u8981\u534a\u5e73\u9762\u4ea4\u5bf9\u5076\u8f6c\u51f8\u5305\u3002\n\n\u534a\u5e73\u9762\u4ea4\u5bf9\u5076\u8f6c\u51f8\u5305\u6559\u5b66->[here](http://trinkle.blog.uoj.ac/blog/235)\uff0c\u4e0d\u8fc7\u6211\u4e5f\u6ca1\u770b\u5b8c\uff0c\u5c31\u662f\u5c06\u76f4\u7ebf$y=ax+b$\u8f6c\u4e3a\u70b9$(a,b)$\uff0c\u6c42\u4e00\u4e2a\u4e0b\u51f8\u58f3\u5f0f\u7684\u534a\u5e73\u9762\u4ea4\uff0c\u76f8\u5f53\u4e8e\u6c42\u4e00\u4e2a\u4e0a\u51f8\u58f3\u5f0f\u7684\u51f8\u5305\u3002\n\n\u7136\u540e\u5c06\u4e24\u8fb9\u4fe1\u606f\u5408\u5e76\uff0c\u76f8\u5f53\u4e8e\u505a\u4e24\u4e2a\u51f8\u58f3\u7684\u95f5\u53ef\u592b\u65af\u57fa\u548c\uff0c\u5c31\u662f\u5c06\u4e24\u8fb9\u51f8\u58f3\u5b58\u5728\u7684\u5411\u91cf\u5168\u90e8\u53d6\u51fa\u6765\uff0c\u4ece\u5927\u5230\u5c0f\u6781\u89d2\u6392\u5e8f\uff08\u5f52\u5e76\u5373\u53ef\uff09\uff0c\u7136\u540e\u65b0\u51f8\u58f3\u7b2c\u4e00\u4e2a\u70b9\u4e3a\u4e24\u4e2a\u51f8\u58f3\u7b2c\u4e00\u4e2a\u70b9\u7684$x$\u548c$y$\u5750\u6807\u5206\u522b\u76f8\u52a0\u7684\u503c\uff0c\u518d\u8ba9\u8fd9\u4e2a\u70b9\u4f9d\u6b21\u6309\u7167\u6bcf\u4e2a\u5411\u91cf\u79fb\u52a8\uff0c\u6784\u6210\u4e00\u4e2a\u65b0\u51f8\u58f3\u3002\n\n\u7136\u540e\u5c06\u6bcf\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u8fb9\u4e0a\u7684\u51f8\u58f3\u4e0a\u7684\u70b9\u90fd\u4e22\u5728\u4e00\u8d77\uff0c\u6700\u540e\u518d\u6784\u9020\u51fa\u4e00\u4e2a\u65b0\u7684\u7b54\u6848\u51f8\u58f3\uff0c\u51f8\u58f3\u4e0a\u7684\u70b9\u6570\u662f$O(n \\log n)$\u7ea7\u522b\u7684\u3002\n\n\u6700\u540e\u6c42\u7b54\u6848\uff0c\u4e8c\u5206\uff08abs\u6539\u7f16\u7684\u9898\u8981\u4e8c\u5206\uff0c\u5176\u5b9e\u8fd9\u9898\u76f4\u63a5\u53cc\u6307\u9488\u626b\u5c31\u884c\uff09\uff0c\u6c42$x$\u8fd9\u4e2a\u6a2a\u5750\u6807\u843d\u5728\u54ea\u6761\u76f4\u7ebf\u4e0a\uff0c\u5c31\u662f\u7528\u659c\u7387\u4e3a$-x$\u7684\u76f4\u7ebf\u53bb\u5207\u51f8\u58f3\u3002\n\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define RI register int\nint read() {\n\tint q=0;char ch=' ';\n\twhile(ch<'0'||ch>'9') ch=getchar();\n\twhile(ch>='0'&&ch<='9') q=q*10+ch-'0',ch=getchar();\n\treturn q;\n}\ntypedef double db;\ntypedef long long LL;\nconst int N=400005,inf=0x3f3f3f3f;\nstruct point{LL x,y;};\npoint operator + (point A,point B) {return (point){A.x+B.x,A.y+B.y};}\npoint operator - (point A,point B) {return (point){A.x-B.x,A.y-B.y};}\ndb operator * (point A,point B) {return (db)A.x*(db)B.y-(db)B.x*(db)A.y;}\nbool cmp(point A,point B) {return A.x==B.x?A.y>B.y:A.x<B.x;}\nint n,m,tot,mxx,rt;\nint h[N],ne[N<<1],to[N<<1],vis[N],sz[N];point w[N<<1];\nvector<int> tr1[N];vector<point> tr2[N];\n\nvoid add(int x,int y,point z) {\n\tto[++tot]=y,ne[tot]=h[x],h[x]=tot,w[tot]=z;\n\tto[++tot]=x,ne[tot]=h[y],h[y]=tot,w[tot]=z;\n}\nvoid pre_dfs(int x,int las) {\n\tfor(RI i=h[x];i;i=ne[i]) {\n\t\tif(to[i]==las) continue;\n\t\ttr1[x].push_back(to[i]),tr2[x].push_back(w[i]),pre_dfs(to[i],x);\n\t}\n}\nvoid rebuild() {\n\ttot=1;for(RI i=1;i<=n;++i) h[i]=0;\n\tfor(RI i=1;i<=n;++i) {\n\t\tint sz=tr1[i].size();\n\t\tif(sz<=2) {for(RI j=0;j<sz;++j) add(i,tr1[i][j],tr2[i][j]);}\n\t\telse {\n\t\t\tint o1=++n,o2=++n;\n\t\t\tadd(i,o1,(point){0,0}),add(i,o2,(point){0,0});\n\t\t\tfor(RI j=0;j<sz;++j)\n\t\t\t\tif(j&1) tr1[o2].push_back(tr1[i][j]),tr2[o2].push_back(tr2[i][j]);\n\t\t\t\telse tr1[o1].push_back(tr1[i][j]),tr2[o1].push_back(tr2[i][j]);\n\t\t}\n\t\ttr1[i].clear(),tr2[i].clear();\n\t}\n}\n\nint st[N];vector<point> tmp,ans;\nvoid build_cov(vector<point> &cov) {\n\tsort(cov.begin(),cov.end(),cmp);\n\tint top=0;\n\tfor(RI i=0;i<(int)cov.size();++i) {\n\t\tif(i!=0&&cov[i].x==cov[i-1].x) continue;\n\t\twhile(top>1&&(cov[i]-cov[st[top-1]])*(cov[st[top]]-cov[st[top-1]])<0) --top;\n\t\tst[++top]=i;\n\t}\n\ttmp.clear();for(RI i=1;i<=top;++i) tmp.push_back(cov[st[i]]);\n\tswap(tmp,cov);\n}\nvoid add_cov(vector<point> &cov1,vector<point> &cov2,vector<point> &cov) {\n\tif(cov1.empty()) {cov=cov2;return;}\n\tif(cov2.empty()) {cov=cov1;return;}\n\tcov.clear();point now=cov1[0]+cov2[0];\n\tcov.push_back(now);\n\tfor(RI i=0,j=0,k=1;k<=(int)cov1.size()+(int)cov2.size()-2;++k) {\n\t\tpoint v1,v2;\n\t\tif(i<=(int)cov1.size()-2) v1=cov1[i+1]-cov1[i];\n\t\tif(j<=(int)cov2.size()-2) v2=cov2[j+1]-cov2[j];\n\t\tif(j>(int)cov2.size()-2||(i<=(int)cov1.size()-2&&v1*v2<0)) now=now+v1,++i;\n\t\telse now=now+v2,++j;\n\t\tcov.push_back(now);\n\t}\n}\n\nvector<point> cov1,cov2;\nvoid getrt(int x,int las,int SZ) {\n\tsz[x]=1;\n\tfor(RI i=h[x];i;i=ne[i]) {\n\t\tif(to[i]==las||vis[i>>1]) continue;\n\t\tgetrt(to[i],x,SZ),sz[x]+=sz[to[i]];\n\t\tint bl=max(SZ-sz[to[i]],sz[to[i]]);\n\t\tif(bl<mxx) mxx=bl,rt=i;\n\t}\n}\nvoid dfs(int x,int las,point dis,vector<point> &cov) {\n\tcov.push_back(dis);\n\tfor(RI i=h[x];i;i=ne[i])\n\t\tif(to[i]!=las&&!vis[i>>1])\n\t\t\tdfs(to[i],x,dis+w[i],cov);\n}\nvoid work(int x,int SZ) {\n\tmxx=inf,getrt(x,0,SZ);\n\tif(mxx==inf) return;\n\tint now=rt;vis[now>>1]=1;\n\tcov1.clear(),cov2.clear();\n\tdfs(to[now],0,(point){0,0},cov1),dfs(to[now^1],0,w[now],cov2);\n\tbuild_cov(cov1),build_cov(cov2),add_cov(cov1,cov2,tmp);\n\tfor(RI i=0;i<tmp.size();++i) ans.push_back(tmp[i]);\n\tint ksz=sz[to[now]];work(to[now],ksz),work(to[now^1],SZ-ksz);\n}\n\npoint binary_on_cov(LL x) {\n\tint l=0,r=ans.size()-1;\n\tpoint kv=(point){1,-x};\n\twhile(l<=r) {\n\t\tint mid=(l+r)>>1;\n\t\tif(mid>l&&kv*(ans[mid]-ans[mid-1])<0) r=mid-1;\n\t\telse if(mid<r&&(ans[mid+1]-ans[mid])*kv<0) l=mid+1;\n\t\telse return ans[mid];\n\t}\n}\nint main()\n{\n\tint x,y,k,b;\n\tn=read(),m=read();\n\tfor(RI i=1;i<n;++i)\n\t\tx=read(),y=read(),k=read(),b=read(),add(x,y,(point){k,b});\n\tpre_dfs(1,0),rebuild(),work(1,n),build_cov(ans);\n\tfor(RI t=0;t<m;++t) {\n\t\tif(n==1) printf(\"0 \");\n\t\telse {\n\t\t\tpoint v=binary_on_cov(t);\n\t\t\tprintf(\"%lld \",v.x*t+v.y);\n\t\t}\n\t}\n\tputs(\"\");\n\treturn 0;\n}\n```",
        "postTime": 1552546277,
        "uid": 20604,
        "name": "litble",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1019E \u3010Raining season\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u6bcf\u4e2a$t$\u4f60\u9700\u8981\u627e\u4e00\u6761\u8def\u5f84\u6700\u5927\u5316$t\\sum a_i+\\sum b_i$\uff0c\u6839\u636e\u5957\u8def\u6211\u4eec\u628a\u6bcf\u6761\u8def\u5f84\u90fd\u8868\u793a\u6210\u70b9$(\\sum a_i,\\sum b_i)$\uff0c\u7b54\u6848\u663e\u7136\u5c31\u5728\u4e0a\u51f8\u58f3\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u80fd\u591f\u627e\u51fa\u4e0a\u51f8\u58f3\uff0c\u968f\u7740$t$\u7684\u589e\u52a0\u8fd9\u4e2a\u5728\u51f8\u5305\u4e0a\u7684\u6700\u4f18\u51b3\u7b56\u70b9\u663e\u7136\u662f$\\sum a_i$\u5355\u8c03\u4e0d\u964d\u7684\uff0c\u5c31\u53ef\u4ee5\u5f97\u51fa\u7b54\u6848\u4e86\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84\u7684\u7edf\u8ba1\u4e0d\u96be\u60f3\u5230\u8fb9\u5206\u6cbb\uff0c\u7136\u540e\u4f60\u8981\u628a\u6bcf\u6761\u8def\u5f84\u8f6c\u6210\u51f8\u5305\u4e0a\u7684\u70b9\uff0c\u5bf9\u4e8e\u88ab\u8fd9\u6761\u8fb9\u5206\u6210\u7684\u4e24\u90e8\u5206\uff0c\u628a\u4ed6\u4eec\u7684\u70b9\u7684\u51f8\u5305\u5206\u522b\u641e\u51fa\u6765\uff0c\u518d\u505a\u4e2a\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5c31\u662f\u8de8\u8fd9\u6761\u8fb9\u7684\u8def\u5f84\u7684\u51f8\u5305\u4e86\uff0c\u7136\u540e\u4f60\u628a\u8de8\u6bcf\u6761\u8fb9\u5206\u6210\u7684\u51f8\u5305\u90fd\u641e\u51fa\u6765\u603b\u548c\u662f$O(n\\log n)$\u7684\uff0c\u518d\u6c42\u4e00\u904d\u51f8\u5305\u5c31\u884c\u4e86\u3002\n\n\u4e24\u4e2a\u51f8\u5305\u7684\u95f5\u53ef\u592b\u65af\u57fa\u548c\uff0c\u5c31\u662f\u4f60\u67092\u4e2a\u51f8\u5305$A$\u548c$B$\uff0c\u4f60\u8981\u6c42\u4e00\u4e2a\u70b9\u96c6$C=\\{i+j|i\\in A,j\\in B\\}$\u7684\u51f8\u5305\uff0c\u7136\u540e\u8fd9\u53ef\u4ee5\u770b\u505a\u5148\u5206\u522b\u9009\u4e00\u4e2a\u6700\u5de6\u7aef\u7684\u70b9\u6c42\u548c\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\uff0c\u628a\u6784\u6210\u4e24\u4e2a\u51f8\u5305\u7684\u5411\u91cf\u641e\u5728\u4e00\u8d77\u6309\u7167\u659c\u7387\u4ece\u5927\u5230\u5c0f\uff08\u56e0\u4e3a\u662f\u4e0a\u51f8\u58f3\uff09\u6392\u5e8f\uff0c\u7136\u540e\u8fd9\u4e2a\u70b9\u4e0d\u65ad\u6cbf\u5411\u91cf\u504f\u79fb\u5c31\u662f\u65b0\u51f8\u5305\u4e86\uff0c\u8fd9\u4e2a\u65b0\u51f8\u5305\u7684\u5927\u5c0f\u662f$O(|A|+|B|)$\u7684\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define ld long double\n#define abs(_o) ((_o < 0) ? -(_o) : _o)\n#define ll long long\nusing namespace std;\nnamespace ywy {\n\tinline int get() {\n\t    int n = 0;\n\t    char c;\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            break;\n\t        if (c == '-')\n\t            goto s;\n\t    }\n\t    n = c - '0';\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\ts:\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 - c + '0';\n\t        else\n\t            return (n);\n\t    }\n\t}\n\tvoid print(ll num) {\n\t    if (num >= 10)\n\t        print(num / 10);\n\t    putchar(num % 10 + '0');\n\t}\n\ttypedef struct _b {\n\t    int dest;\n\t    int nxt;\n\t    int a;\n\t    int b;\n\t    unsigned char gg;\n\t} bian;\n\tbian memchi[2000001];\n\tint gn = 2, fheads[200001], heads[200001];\n\tinline void add(int s, int t, int a, int b, int *hd) {\n\t    memchi[gn].dest = t;\n\t    memchi[gn].a = a;\n\t    memchi[gn].nxt = hd[s];\n\t    memchi[gn].b = b;\n\t    hd[s] = gn;\n\t    gn++;\n\t}\n\ttypedef struct _n {\n\t    ll x;\n\t    ll y;\n\t    _n() { x = y = 0; }\n\t    _n(ll i, ll j) {\n\t        x = i;\n\t        y = j;\n\t    }\n\t    friend bool operator<(const _n &a, const _n &b) {\n\t        if (a.x == b.x)\n\t            return (a.y < b.y);\n\t        return (a.x < b.x);\n\t    }\n\t    friend _n operator-(const _n &a, const _n &b) { return (_n(a.x - b.x, a.y - b.y)); }\n\t    friend ld operator*(const _n &a, const _n &b) { return ((ld)a.x * (ld)b.y - (ld)a.y * (ld)b.x); }\n\t    friend _n operator+(const _n &a, const _n &b) { return (_n(a.x + b.x, a.y + b.y)); }\n\t    friend bool operator==(const _n &a, const _n &b) {\n\t        return (abs((ld)a.x * (ld)b.y - (ld)a.y * (ld)b.x) <= 1e-9);\n\t    }\n\t} node;\n\tnode tb[6000001], stk[6000001], tmp[200001], mkf[200001];\n\tint ptr = 1, zx, tot, gtb = 1;\n\tinline int cmp(const node &a, const node &b) { return ((ld)a.y * (ld)b.x > (ld)a.x * b.y); }\n\tint gpt = 1;\n\tvoid dfs(int pt, int baba) {\n\t    int lst = pt;\n\t    for (register int i = fheads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba)\n\t            continue;\n\t        int me = gpt;\n\t        gpt++;\n\t        add(lst, me, 0, 0, heads);\n\t        add(me, lst, 0, 0, heads);\n\t        add(me, memchi[i].dest, memchi[i].a, memchi[i].b, heads);\n\t        add(memchi[i].dest, me, memchi[i].a, memchi[i].b, heads);\n\t        lst = me;\n\t        dfs(memchi[i].dest, pt);\n\t    }\n\t}\n\tll siga[200001], sigb[200001];\n\tint size[200001];\n\tint minn = 123456789;\n\tvoid afs(int pt, int baba) {\n\t    tot++;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba || memchi[i].gg)\n\t            continue;\n\t        afs(memchi[i].dest, pt);\n\t    }\n\t}\n\tvoid bfs(int pt, int baba) {\n\t    size[pt] = 1;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].gg || memchi[i].dest == baba)\n\t            continue;\n\t        bfs(memchi[i].dest, pt);\n\t        size[pt] += size[memchi[i].dest];\n\t        if (abs(size[memchi[i].dest] - (tot - size[memchi[i].dest])) < minn) {\n\t            minn = abs(size[memchi[i].dest] - (tot - size[memchi[i].dest]));\n\t            zx = i;\n\t        }\n\t    }\n\t}\n\tvoid cfs(int pt, int baba) {\n\t    tmp[ptr].x = siga[pt];\n\t    tmp[ptr].y = sigb[pt];\n\t    ptr++;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].gg || memchi[i].dest == baba)\n\t            continue;\n\t        siga[memchi[i].dest] = siga[pt] + memchi[i].a;\n\t        sigb[memchi[i].dest] = sigb[pt] + memchi[i].b;\n\t        cfs(memchi[i].dest, pt);\n\t    }\n\t}\n\tvoid digui(int pt) {\n\t    tot = 0;\n\t    minn = 1234567890;\n\t    afs(pt, 0);\n\t    bfs(pt, 0);\n\t    if (tot == 1)\n\t        return;\n\t    int me = zx, a = memchi[me].dest, b = memchi[me ^ 1].dest;\n\t    memchi[me].gg = memchi[me ^ 1].gg = 1;\n\t    ptr = 1;\n\t    siga[a] = memchi[me].a;\n\t    sigb[a] = memchi[me].b;\n\t    cfs(a, 0);\n\t    ptr--;\n\t    int sp = 0;\n\t    sort(tmp + 1, tmp + 1 + ptr);\n\t    for (register int i = 1; i <= ptr; i++) {\n\t        while (sp > 1 && (tmp[i] - stk[sp - 1]) * (tmp[i] - stk[sp - 2]) <= 0) sp--;\n\t        stk[sp] = tmp[i];\n\t        sp++;\n\t    }\n\t    int lp = 1;\n\t    node dll = stk[0];\n\t    for (register int i = 0; i < sp - 1; i++) mkf[lp] = stk[i + 1] - stk[i], lp++;\n\t    ;\n\t    siga[b] = 0;\n\t    sigb[b] = 0;\n\t    ptr = 1;\n\t    cfs(b, 0);\n\t    ptr--;\n\t    sp = 0;\n\t    sort(tmp + 1, tmp + 1 + ptr);\n\t    for (register int i = 1; i <= ptr; i++) {\n\t        while (sp > 1 && (tmp[i] - stk[sp - 1]) * (tmp[i] - stk[sp - 2]) <= 0) sp--;\n\t        stk[sp] = tmp[i];\n\t        sp++;\n\t    }\n\t    node pdb = _n(stk[0].x + dll.x, stk[0].y + dll.y);\n\t    for (register int i = 0; i < sp - 1; i++) {\n\t        mkf[lp] = stk[i + 1] - stk[i];\n\t        lp++;\n\t    }\n\t    lp--;\n\t    sort(mkf + 1, mkf + 1 + lp, cmp);\n\t    tb[gtb] = pdb;\n\t    gtb++;\n\t    for (register int i = 1; i <= lp; i++) {\n\t        pdb = pdb + mkf[i];\n\t        tb[gtb] = pdb;\n\t        gtb++;\n\t    }\n\t    digui(a);\n\t    digui(b);\n\t}\n\tvoid ywymain() {\n\t    int n = get();\n\t    gpt = n + 1;\n\t    int m = get();\n\t    for (register int i = 1; i < n; i++) {\n\t        int s = get(), t = get(), a = get(), b = get();\n\t        add(s, t, a, b, fheads);\n\t        add(t, s, a, b, fheads);\n\t    }\n\t    dfs(1, 0);\n\t    digui(1);\n\t    gtb--;\n\t    int sp = 0;\n\t    sort(tb + 1, tb + gtb + 1);\n\t    for (register int i = 1; i <= gtb; i++) {\n\t        while (sp > 1 && (tb[i] - stk[sp - 1]) * (tb[i] - stk[sp - 2]) <= 0) sp--;\n\t        stk[sp] = tb[i];\n\t        sp++;\n\t    }\n\t    int pos = 0;\n\t    for (register int i = 0; i < m; i++) {\n\t        while (pos < sp - 1 && (ll)i * stk[pos + 1].x + stk[pos + 1].y >= (ll)i * stk[pos].x + stk[pos].y)\n\t            pos++;\n\t        print(stk[pos].x * (ll)i + stk[pos].y);\n\t        putchar(' ');\n\t    }\n\t}\n} \nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1551854060,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1019E \u3010Raining season\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u6743\u503c $a_i$ \u548c $b_i$\uff0c\u8fb9\u7684\u957f\u5ea6\u4e3a $a_i\\times x+b_i$\uff0c\u6c42\u51fa $x$ \u53d6 $0$ \u5230 $m-1$ \u65f6\u6811\u7684\u76f4\u5f84\uff08\u6700\u957f\u8def\u5f84\uff09\u3002\n\n## \u9898\u89e3\n\u8fd9\u4e2a\u95ee\u9898\u5f88\u660e\u663e\u53ef\u4ee5\u8f6c\u5316\u6210\u51f8\u5305\u6216\u8005\u76f4\u7ebf\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u8003\u8651\u51f8\u5305\uff0c\u53ea\u8981\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u8def\u5f84\u8868\u793a\u7684\u70b9\u7684\u51f8\u5305\uff0c\u5c31\u53ef\u4ee5\u7ebf\u6027\u89e3\u51b3 $x$ \u53d6\u503c\u4e0d\u540c\u7684\u60c5\u51b5\u3002\n\n\u6211\u4eec\u81ea\u7136\u4e0d\u53ef\u80fd\u53bb\u628a\u6240\u6709\u8def\u5f84\u90fd\u5f04\u51fa\u6765\uff0c\u8003\u8651\u7c7b\u4f3c\u7684\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u6811\u5206\u6cbb\u89e3\u51b3\uff0c\u4e8e\u662f\u4f7f\u7528\u8fb9\u5206\u6cbb\u89e3\u51b3\uff08\u6bd4\u70b9\u5206\u6cbb\u65b9\u4fbf\u4e00\u4e9b\uff09\u3002\n\n\u9996\u5148\u4e09\u5ea6\u5316\uff0c\u627e\u4e2d\u5fc3\u8fb9\u90fd\u662f\u6a21\u677f\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5bf9\u4ee3\u7801\u81ea\u884c\u7406\u89e3\u3002\u6700\u91cd\u8981\u7684\u662f\u5982\u4f55\u5408\u5e76\u4e0d\u540c\u5b50\u6811\u7684\u4fe1\u606f\uff0c\u6839\u636e\u51f8\u5305\u7684\u6027\u8d28\uff0c\u5982\u679c dfs \u4ea7\u751f\u7684\u4ee5\u5f53\u524d\u5206\u6cbb\u8fb9\u4e00\u4fa7\u4e3a\u6839\u7684\u4e00\u6761\u8def\u5f84\u5982\u679c\u4e0d\u80fd\u5728\u6240\u6709\u76f8\u540c\u7aef\u70b9\u7684\u51f8\u5305\u4e2d\u51fa\u73b0\uff0c\u90a3\u4e48\u5c31\u4e0d\u53ef\u80fd\u51fa\u73b0\u5728\u6700\u7ec8\u7684\u51f8\u5305\u91cc\u3002\u6240\u4ee5\u6211\u4eec\u628a\u5206\u6cbb\u8fb9\u4e24\u4fa7\u6c42\u51fa\u7684\u51f8\u5305\u4f7f\u7528\u95f5\u53ef\u592b\u65af\u57fa\u548c\u8fdb\u884c\u5408\u5e76\uff0c\u5f97\u5230\u7684\u51f8\u5305\u5c31\u662f\u8de8\u8fc7\u5206\u6cbb\u8fb9\u7684\u6240\u6709\u8def\u5f84\u5f62\u6210\u7684\u51f8\u5305\u3002\n\n\u5173\u4e8e\u95f5\u53ef\u592b\u65af\u57fa\u548c\u7684\u8fc7\u7a0b\uff1a\u6211\u4eec\u628a\u51f8\u5305\u62c6\u6210\u5411\u91cf\uff0c\u90a3\u4e48\u4e24\u4e2a\u51f8\u5305\u76f8\u5f53\u4e8e\u4e24\u4e2a\u659c\u7387\u9012\u51cf\u7684\u5411\u91cf\u5e8f\u5217\uff0c\u5982\u679c\u6211\u4eec\u628a\u7b2c\u4e00\u4e2a\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u5206\u522b\u76f8\u52a0\uff0c\u7136\u540e\u5f52\u5e76\u6392\u5e8f\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u51f8\u5305\u3002\u800c\u8fd9\u4e2a\u51f8\u5305\u4e0a\u7684\u4fe1\u606f\u53ef\u4ee5\u5b8c\u7f8e\u5730\u7b26\u5408\u6211\u4eec\u5bf9\u4e24\u8fb9\u7684\u70b9\u957f\u5ea6\u76f8\u52a0\u6700\u540e\u5f97\u5230\u7684\u51f8\u5305\u3002\n\n\u6211\u4eec\u628a\u6bcf\u6b21\u5206\u6cbb\u5f97\u5230\u7684\u6240\u6709\u51f8\u5305\u4e0a\u7684\u70b9\u8bb0\u5f55\u4e0b\u6765\uff0c\u603b\u5171 $n\\log_2n$ \u4e2a\u70b9\uff0c\u518d\u6c42\u4e00\u6b21\u51f8\u5305\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6211\u4eec\u9700\u8981\u7684\u51f8\u5305\u4e86\u3002\n\n\u5173\u4e8e\u4e00\u4e9b\u7ec6\u8282\uff1a\n\n1. \u6211\u5728\u51f8\u5305\u4e2d\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u539f\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u95f5\u53ef\u592b\u65af\u57fa\u548c\u540e\u53ef\u4ee5\u4fdd\u7559\u539f\u6765\u7684\u51f8\u5305\u4fe1\u606f\u53bb\u7efc\u5408\u5904\u7406\u3002\n\n2. \u7531\u4e8e\u8fdb\u884c\u4e86\u4e09\u5ea6\u5316\uff0c\u6570\u7ec4\u8981\u8bb0\u5f97\u5f00\u5927\u5230\u4e24\u500d\u3002\n\n3. \u5982\u679c\u4e3a\u4e86\u907f\u514d\u7cbe\u5ea6\u8bef\u5dee\uff0c\u7528\u4e58\u6cd5\u4ee3\u66ff\u9664\u6cd5\u5224\u65ad\u659c\u7387\u5927\u5c0f\uff0c\u9700\u8981\u7528 __int128\uff0c\u4e0d\u7136\u4f1a\u5728\u7b2c 45 \u4e2a\u70b9\u6302\u6389\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u7206\u6389 long long\u3002\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+5;\nint n,m,siz[N*2],root,sum,mx,now,cnt,tmp,rt,top;\nint tot,s;\nbool vis[N*4];\nstruct node\n{\n    int tot,ver[N*4],ne[N*4],head[N*2],a[N*4],b[N*4];\n    void add(int x,int y,int z,int w)\n    {\n        ver[++tot]=y;ne[tot]=head[x];head[x]=tot;a[tot]=z;b[tot]=w;\n    }\n}g1,g2;\nstruct vec\n{\n    ll x,y;\n    vec operator + (const vec &a)\n    {\n        return {x+a.x,y+a.y};\n    }\n    vec operator - (const vec &a)\n    {\n        return {x-a.x,y-a.y};\n    }\n}p[N],res[N*30],st[N*30];\nbool cmp(vec i,vec j)\n{\n    if(i.x!=j.x) return i.x<j.x;\n    return i.y<j.y;\n}\nstruct tubao\n{\n    vec p[N],s[N];int cnt,top;\n    tubao(){cnt=1;p[1]={0,0};}\n    void add(vec x)\n    {\n        p[++cnt]=x;\n    }\n    void solve()\n    {\n        sort(p+1,p+cnt+1,cmp);\n        for(int i=1;i<=cnt;i++)\n        {\n            while(top>1 && (__int128)(s[top].y-s[top-1].y)*(p[i].x-s[top].x)<=(__int128)(s[top].x-s[top-1].x)*(p[i].y-s[top].y))\n                top--;\n            s[++top]=p[i];\n        }\n    }\n}t[2];\nvoid mkfsjh()//\u95f5\u53ef\u592b\u65af\u57fa\u548c\n{\n    s=0;\n    if(!t[0].top && !t[1].top) return;\n    if(!t[0].top)\n    {\n        for(int i=1;i<=t[1].top;i++) p[++s]=t[1].s[i];\n        return;\n    }\n    if(!t[1].top)\n    {\n        for(int i=1;i<=t[0].top;i++) p[++s]=t[0].s[i];\n        return;\n    }\n    s++;\n    p[s]=t[0].s[1]+t[1].s[1];\n    int i=2,j=2;\n    while(i<=t[0].top && j<=t[1].top)\n    {\n        vec a=t[0].s[i]-t[0].s[i-1];\n        vec b=t[1].s[j]-t[1].s[j-1];\n        if((__int128)a.y*b.x>(__int128)b.y*a.x)\n            s++,p[s]=p[s-1]+a,i++;\n        else s++,p[s]=p[s-1]+b,j++;\n    }\n    while(i<=t[0].top)\n    {\n        vec a=t[0].s[i]-t[0].s[i-1];\n        s++,p[s]=p[s-1]+a,i++;\n    }\n    while(j<=t[1].top)\n    {\n        vec b=t[1].s[j]-t[1].s[j-1];\n        s++,p[s]=p[s-1]+b,j++;\n    }\n}\nvoid dfs1(int x,int fa)\n{\n    int las=x;\n    for(int i=g1.head[x];i;i=g1.ne[i])\n    {\n        int y=g1.ver[i];\n        if(y==fa) continue;\n        g2.add(las,++sum,0,0);g2.add(sum,las,0,0);\n        g2.add(sum,y,g1.a[i],g1.b[i]);\n        g2.add(y,sum,g1.a[i],g1.b[i]);\n        las=sum;dfs1(y,x);\n    }\n}\nvoid getroot(int x,int fa)\n{\n    siz[x]=1;\n    for(int i=g2.head[x];i;i=g2.ne[i])\n    {\n        int y=g2.ver[i];\n        if(y==fa || vis[i]) continue;\n        getroot(y,x);siz[x]+=siz[y];\n        if(max(siz[y],now-siz[y])<mx)\n        {\n            mx=max(siz[y],now-siz[y]);\n            rt=(i+1)>>1;\n        }\n    }\n}\nvoid dfs2(int x,int fa,ll a,ll b,int op)\n{\n    if(!op) tmp++;\n    t[op].add({a,b});\n    for(int i=g2.head[x];i;i=g2.ne[i])\n    {\n        int y=g2.ver[i];\n        if(y==fa || vis[i]) continue;\n        dfs2(y,x,a+g2.a[i],b+g2.b[i],op);\n    }\n}\nvoid divide(int x,int ss)\n{\n    if(ss==1) return;\n    mx=rt=2e9,now=ss;\n    getroot(x,0);\n    int r1=g2.ver[(rt<<1)-1],r2=g2.ver[rt<<1];\n    vis[(rt<<1)-1]=vis[rt<<1]=1;tmp=0;\n    t[0].cnt=t[1].cnt=1;t[0].top=t[1].top=0;\n    dfs2(r1,r2,0,0,0);dfs2(r2,r1,g2.a[rt<<1],g2.b[rt<<1],1);\n    t[0].solve();t[1].solve();\n    mkfsjh();\n    for(int i=1;i<=s;i++)\n    {\n        res[++tot]=p[i];\n    }\n    int w=siz[x]-tmp;\n    divide(r1,tmp);divide(r2,w);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);sum=n;\n    for(int i=1;i<n;i++)\n    {\n        int x,y,a,b;scanf(\"%d%d%d%d\",&x,&y,&a,&b);\n        g1.add(x,y,a,b);g1.add(y,x,a,b);\n    }\n    dfs1(1,0);\n    divide(1,sum);\n    sort(res+1,res+tot+1,cmp);top=0;\n    for(int i=1;i<=tot;i++)\n    {\n         while(top>1 && (__int128)(st[top].y-st[top-1].y)*(res[i].x-st[top].x)<=(__int128)(st[top].x-st[top-1].x)*(res[i].y-st[top].y))\n            top--;\n        st[++top]=res[i];\n    }\n    int now=1;\n    for(int i=0;i<m;i++)\n    {\n        while(now<top && 1ll*i*st[now+1].x+st[now+1].y>=1ll*i*st[now].x+st[now].y) now++;\n        printf(\"%lld \",1ll*i*st[now].x+st[now].y);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1676559343,
        "uid": 300710,
        "name": "xuyuansu",
        "ccfLevel": 0,
        "title": "CF1019E Raining season"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u592a\u4e00\u6837\u7684\u505a\u6cd5\u3002\n\n\u8003\u8651\u6811\u7684\u76f4\u5f84\u7684\u4e00\u4e2a\u8d2a\u5fc3\u6c42\u6cd5\uff1a\u5728\u6811\u7684\u8fb9\u6743\u90fd\u975e\u8d1f\u65f6\uff0c\u6211\u4eec\u4ee5\u4efb\u610f\u4e00\u70b9 $u$ \u4e3a\u6839\uff0c\u627e\u5230\u4efb\u610f\u4e00\u4e2a\u8ddd\u79bb $u$ \u6700\u8fdc\u7684\u70b9 $p$\uff0c\u518d\u627e\u5230\u8ddd\u79bb $p$ \u6700\u8fdc\u7684\u70b9 $q$\uff0c$(p,q)$ \u5373\u4e3a\u76f4\u5f84\u3002\n\n\u672c\u9898\u4e2d\u6211\u4eec\u53ef\u4ee5\u5148\u968f\u4fbf\u94a6\u5b9a\u4e00\u4e2a\u70b9 $u$ \u4e3a\u6839\uff0c\u8ba1\u7b97\u5f53 $t=0,1,...,(m-1)$ \u65f6\u8ddd\u79bb $u$ \u6700\u8fdc\u7684\u70b9 $c_t$\u3002\u8fd9\u53ef\u4ee5\u7528\u6c42\u51f8\u5305\u6216\u8005\u674e\u8d85\u7ebf\u6bb5\u6811\u6765\u6c42\u51fa\u3002\u5bf9\u6bcf\u4e2a\u8282\u70b9 $p$\uff0c\u6211\u4eec\u53ef\u4ee5\u5b58\u4e0b\u6240\u6709\u6ee1\u8db3 $p=c_t$ \u7684 $t$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u5728\u5bf9\u5e94\u7684 $t$ \u7684\u60c5\u51b5\u4e0b\u79bb $p$ \u6700\u8fdc\u7684\u8282\u70b9\u5230 $p$ \u7684\u8ddd\u79bb\u5373\u53ef\u3002\n\n\u6211\u4eec\u7528\u70b9\u5206\u6cbb\u914d\u5408\u674e\u8d85\u7ebf\u6bb5\u6811\uff0c\u5c31\u80fd\u5728 $O(m\\log m\\log n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3001$O(m\\log n)$ \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u672c\u9898\u3002\u7a0d\u7a0d\u5361\u5361\u5e38\uff0c\u4f8b\u5982\u53ea\u8003\u8651\u53f6\u5b50\u8282\u70b9\u3001\u5728\u5f53\u524d\u70b9\u5206\u6cbb\u8fde\u901a\u5757\u5185\u5df2\u7ecf\u6ca1\u6709\u8ba1\u7b97\u4efb\u52a1\u65f6\u53ca\u65f6\u9000\u51fa\uff0c\u5c31\u80fd\u901a\u8fc7\u672c\u9898\u3002\n\n\u5982\u679c\u8981\u66f4\u52a0\u4f18\u79c0\u7684\u505a\u6cd5\uff0c\u53ef\u4ee5\u7528\u51f8\u5305\u6765\u66ff\u4ee3\u674e\u8d85\u7ebf\u6bb5\u6811\u3002\u9274\u4e8e\u51f8\u5305\u662f\u9759\u6001\u7684\u7b97\u6cd5\uff0c\u96be\u4ee5\u52a8\u6001\u63d2\u5165\uff0c\u8003\u8651\u7528\u8fb9\u5206\u6cbb\u66ff\u4ee3\u70b9\u5206\u6cbb\uff0c\u6bcf\u6b21\u6784\u5efa\u4e24\u8fb9\u7684\u51f8\u5305\u5373\u53ef\u3002\u76f8\u8f83\u4e8e\u5176\u4ed6\u9898\u89e3\uff0c\u53ef\u4ee5\u7701\u53bb\u6c42\u95f5\u53ef\u592b\u65af\u57fa\u548c\u7684\u8fc7\u7a0b\u3002\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u91c7\u7528\u7684\u662f\u70b9\u5206\u6cbb + \u674e\u8d85\u7ebf\u6bb5\u6811\u7684\u5b9e\u73b0\u3002\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<map>\n#include<algorithm>\n\nusing namespace std;\n\nstruct line\n{\n\tlong long k,b;line(long long _k=0,long long _b=0):k(_k),b(_b){}\n\tlong long operator()(long long x){return k*x+b;}\n};\nline operator+(line A,line B){return line(A.k+B.k,A.b+B.b);}\nbool operator<(line A,line B){return A.k==B.k?A.b<B.b:A.k<B.k;}\n\nbool is_ctr[200000],vis[200000];\nvector<pair<int,line> > ed[200000];\nint fa[200000],sz[200000],maxsz[200000];line L[200000];\nint dfn[200000],rev[200000];\n\nvoid dfs_bas(int u,int f)\n{\n\tdfn[u]=++dfn[0],rev[dfn[u]]=u;\n\tfa[u]=f,sz[u]=1,maxsz[u]=0;\n\tfor(int i=0;i<ed[u].size();i++)\n\t{\n\t\tint v=ed[u][i].first;if(!is_ctr[v]&&v!=f){L[v]=L[u]+ed[u][i].second;dfs_bas(v,u);sz[u]+=sz[v],maxsz[u]=max(maxsz[u],sz[v]);}\n\t}\n}\n\nstruct SegmentTree\n{\n\tstruct nd\n\t{\n\t\tline L;int lc,rc,l,r;\n\t}t[2000000];int used,n,pos[2000000];\n\tint new_node(int l,int r)\n\t{\n\t\t++used;t[used].lc=t[used].rc=0,t[used].l=l,t[used].r=r,t[used].L.k=0,t[used].L.b=-1;return used;\n\t}\n\tvoid init(vector<int> P)\n\t{\n\t\tused=0;n=P.size();for(int i=0;i<n;i++)pos[i]=P[i];\n\t\tnew_node(0,n-1);\n\t}\n\tvoid ins(line L,int k=1)\n\t{\n\t\tlong long nl=L(pos[t[k].l]),nr=L(pos[t[k].r]),fl=t[k].L(pos[t[k].l]),fr=t[k].L(pos[t[k].r]);\n\t\tif(nl<=fl&&nr<=fr)return;\n\t\tif(nl>=fl&&nr>=fr){t[k].L=L;return;}\n\t\tint mid=(t[k].l+t[k].r)>>1;if(L(pos[mid])>t[k].L(pos[mid])){swap(L,t[k].L),swap(nl,fl),swap(nr,fr);}\n\t\tif(nl>fl){if(!t[k].lc)t[k].lc=new_node(t[k].l,mid);ins(L,t[k].lc);}\n\t\telse{if(!t[k].rc)t[k].rc=new_node(mid+1,t[k].r);ins(L,t[k].rc);}\n\t}\n\tline query_L(int p)\n\t{\n\t\t//printf(\"QUERY: %d\\n\",p);\n\t\tline L(0,-1);long long ans=-1;int k=1;\n\t\twhile(k)\n\t\t{\n\t\t\tif(t[k].L(p)>ans)L=t[k].L,ans=t[k].L(p);\n\t\t\tif(t[k].l==t[k].r)break;\n\t\t\tint mid=(t[k].l+t[k].r)>>1;k=p<=pos[mid]?t[k].lc:t[k].rc;\n\t\t}\n\t\treturn L;\n\t}\n\tlong long query_ans(int p)\n\t{\n\t\tlong long ans=-1;int k=1;\n\t\twhile(k)\n\t\t{\n\t\t\tif(t[k].L(p)>ans)ans=t[k].L(p);\n\t\t\tif(t[k].l==t[k].r)break;\n\t\t\tint mid=(t[k].l+t[k].r)>>1;k=p<=pos[mid]?t[k].lc:t[k].rc;\n\t\t}\n\t\treturn ans;\n\t}\n}T;\n\nmap<line,int> mp;\nvector<int> task[200000];\n\nlong long ans[2000000];\n\nint main()\n{\n\tint n=0,m=0;scanf(\"%d%d\",&n,&m);\n\tfor(int i=1,u=0,v=0,a=0,b=0;i<n;i++)\n\t{\n\t\tscanf(\"%d%d%d%d\",&u,&v,&a,&b);ed[u].push_back(make_pair(v,line(a,b))),ed[v].push_back(make_pair(u,line(a,b)));\n\t}\n\tdfs_bas(1,0);//for(int i=1;i<=n;i++)printf(\"%lld %lld\\n\",L[i].k,L[i].b);puts(\"\");\n\tvector<int> X;for(int i=0;i<m;i++)X.push_back(i);T.init(X);\n\tfor(int i=1;i<=n;i++)mp[L[i]]=i,T.ins(L[i]);\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tline L=T.query_L(i);//printf(\"%lld %lld\\n\",L.k,L.b);\n\t\ttask[mp[L]].push_back(i);//printf(\"%d\\n\",mp[L]);\n\t}\n\twhile(1)\n\t{\n\t\tbool quit=1;for(int i=1;i<=n;i++)if(!is_ctr[i])quit=0;if(quit)break;\n\t\tfor(int i=1;i<=n;i++)vis[i]=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(!is_ctr[i]&&!vis[i])\n\t\t\t{\n\t\t\t\tdfn[0]=0;dfs_bas(i,0);int c=sz[i];\n\t\t\t\tbool no_query=1;for(int j=1;j<=c;j++){if(task[rev[j]].size()){no_query=0;break;}}\n\t\t\t\tif(no_query){for(int j=1;j<=c;j++)is_ctr[rev[j]]=1;continue;}\n\t\t\t\t\n\t\t\t\tint r=0;\n\t\t\t\tfor(int j=1;j<=c;j++){int u=rev[j];if(2*max(maxsz[u],c-sz[u])<=c){r=u;break;}}\n\t\t\t\tdfn[0]=0,L[r]=line(0,0);dfs_bas(r,0);\n\t\t\t\tX.clear();\n\t\t\t\tfor(int j=1;j<=c;j++)\n\t\t\t\t{\n\t\t\t\t\tint u=rev[j];for(int x=0;x<task[u].size();x++)X.push_back(task[u][x]);\n\t\t\t\t}\n\t\t\t\tsort(X.begin(),X.end());T.init(X);\n\t\t\t\tT.ins(line(0,0));\n\t\t\t\tfor(int j=0;j<ed[r].size();j++)\n\t\t\t\t{\n\t\t\t\t\tint p=ed[r][j].first;if(is_ctr[p])continue;\n\t\t\t\t\tfor(int x=dfn[p];x<dfn[p]+sz[p];x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tint k=rev[x];\n\t\t\t\t\t\tfor(int y=0;y<task[k].size();y++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint f=task[k][y];ans[f]=max(ans[f],L[k](f)+T.query_ans(f));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor(int x=dfn[p];x<dfn[p]+sz[p];x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tint k=rev[x];if(ed[k].size()<=1)T.ins(L[k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int j=0;j<task[r].size();j++)\n\t\t\t\t{\n\t\t\t\t\tint f=task[r][j];ans[f]=max(ans[f],T.query_ans(f));\n\t\t\t\t}\n\t\t\t\tT.init(X);\n\t\t\t\tfor(int j=ed[r].size()-1;j>=0;j--)\n\t\t\t\t{\n\t\t\t\t\tint p=ed[r][j].first;if(is_ctr[p])continue;\n\t\t\t\t\tfor(int x=dfn[p];x<dfn[p]+sz[p];x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tint k=rev[x];\n\t\t\t\t\t\tfor(int y=0;y<task[k].size();y++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint f=task[k][y];ans[f]=max(ans[f],L[k](f)+max(0ll,T.query_ans(f)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor(int x=dfn[p];x<dfn[p]+sz[p];x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tint k=rev[x];if(ed[k].size()<=1)T.ins(L[k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tis_ctr[r]=1;for(int j=1;j<=c;j++)vis[rev[j]]=1;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=0;i<m;i++)printf(\"%lld \",ans[i]);\n}\n```",
        "postTime": 1630036823,
        "uid": 112794,
        "name": "\u5468\u5b50\u8861",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1019E \u3010Raining Season\u3011"
    },
    {
        "content": "## \u95f2\u8bdd\n\n\u53bb\u5e74\u6821\u5185 noip \u6a21\u62df\u8d5b\u8003\u8fd9\u4e2a\uff0c\u53ea\u4e0d\u8fc7\u90a3\u65f6 $m$ \u53ea\u6709 $10^5$\u3002\uff08\u867d\u7136 $m$ \u4e0d\u5f71\u54cd\uff09\u524d\u51e0\u5929\u505a\u4e86 Ynoi \u7684\u4e00\u9053\u51f8\u5305\u9898\uff0c\u4e00\u770b\u8fd9\u9898\n\n\u8fd9\u4e0d\u662f\u8fb9\u5206\u6cbb + \u95f5\u53ef\u592b\u65af\u57fa\u548c sb \u9898\u5417\uff1f\n\n\u7136\u540e\u5c31\u8fde WA \u516d\u53d1\uff0c\u65e0\u6570\u7ec6\u8282\u5199\u9519\u2026\u2026\n\n\u65e0\u6570\u4e8b\u5b9e\u8868\u660e\uff0c\u5728\u6ca1 AC \u4e00\u9053\u9898\u65f6\uff0c\u5343\u4e07\u4e0d\u8981\u9a82\u9898 sb\uff0c\u56e0\u4e3a\u4f60\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u7ec6\u8282\u6ca1\u8003\u8651\u5230\u3002\n\n## \u6b63\u6587\n\n### \u7b97\u6cd5 $1$\uff1a\n\n\u6bcf\u6b21\u66b4\u529b\u6c42\u6811\u7684\u76f4\u5f84\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(nm)$\uff0c\u6781\u5176\u4f18\u79c0\u3002\n\n~~\u4f18\u79c0\u4e2a\u5934~~\n\n### \u7b97\u6cd5 $2$\uff1a\n\n\u76f4\u5f84\u5bf9\u5e94\u7740\u4e00\u6761\u6811\u4e0a\u7684\u8def\u5f84\uff0c\u8003\u8651\u6811\u5206\u6cbb\u3002\u6bcf\u4e2a\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u662f\u4e2a\u4e00\u6b21\u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5408\u5e76\u8fd9\u4e9b\u4e00\u6b21\u51fd\u6570\u3002\n\n\u6211\u4eec\u628a\u4e00\u6b21\u51fd\u6570 $y=ax+b$ \u770b\u6210\u5e73\u9762\u4e0a\u7684\u70b9 $(a,b)$\uff0c\u5bb9\u6613\u53d1\u73b0\u5408\u5e76\u4e24\u4e2a\u51f8\u5305\u5c31\u662f\u95f5\u53ef\u592b\u65af\u57fa\u548c\u3002\n\n\u8fd9\u5c31\u505a\u5b8c\u4e86\uff1f\uff1f\uff1f\n\n\u4e0d\uff0c\u6211\u4eec\u8fd8\u4e0d\u77e5\u9053\u600e\u4e48\u6811\u5206\u6cbb\u5462\u3002\n\n\u8bbe\u4e24\u4e2a\u51f8\u5305\u4e3a $A,B$\uff0c\u90a3\u4e48\u4e00\u6b21\u5408\u5e76\u51f8\u5305\u662f $O(|A|+|B|)$ \u7684\u3002\u6211\u4eec\u5c3d\u53ef\u80fd\u4fdd\u8bc1 $|A|,|B|$ \u76f8\u8fd1\uff0c\u4e0d\u7136\u590d\u6742\u5ea6\u662f\u9519\u7684\u3002\n\n\u4e00\u6b21\u70b9\u5206\u6cbb\u4f1a\u5f97\u5230 $k$ \u4e2a\u51f8\u5305 $P_1,P_2,...,P_k$\uff0c\u6bcf\u4e2a\u51f8\u5305\u7684\u5927\u5c0f\u4e3a $|P_1|,|P_2|,...,|P_k|$\u3002\u6211\u4eec\u53ef\u4ee5\u5199\u4e2a\u7c7b\u4f3c\u5206\u6cbb\u7684\u4e1c\u897f\uff0c\u53ea\u5408\u5e76\u5de6\u53f3\u4e24\u4e2a\u51f8\u5305\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\n\n\u7b49\u7b49\uff0c\u8fd9\u4e0d\u662f\u6a21\u62df\u8fb9\u5206\u6cbb\u5417\u2026\u2026\n\n\u90a3\u4e48\u505a\u6cd5\u5c31\u5f88\u663e\u7136\u4e86\u3002\u5148\u5408\u5e76\u51fa $n\\log n$ \u4e2a\u70b9\uff0c\u7136\u540e\u5bf9\u4e8e\u8fd9\u4e9b\u70b9\u6c42\u4e2a\u51f8\u5305\u3002\u56e0\u4e3a $0,1,...,m-1$ \u662f\u5355\u8c03\u4e0a\u5347\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\uff0c\u5728\u51f8\u5305\u4e0a\u626b\u8fc7\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\n\n\u867d\u7136\u7406\u8bba\u4e0a\u6700\u540e\u90a3\u6b21\u7684\u6392\u5e8f\u662f $O(n\\log n\\log (n\\log n))$ \u7684\uff0c\u4f46\u662f $sort$ \u5bf9\u65f6\u95f4\u7684\u5f71\u54cd\u5927\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u3002\u3002\u3002\n\n\u8fd8\u6709\u5c31\u662f\u4e0d\u8981\u65e0\u8111\u5f00\u7a7a\u95f4\uff0c\u5982\u679c\u4f60\u5acc\u9ebb\u70e6 $maxn$ \u76f4\u63a5\u5f00\u4e86 $4$ \u500d\uff0c\u90a3\u4e48\u603b\u7684\u51f8\u5305\u5927\u5c0f\u5c31\u5f00\u5c0f\u4e00\u70b9\uff0c\u4e0d\u7136\u975e\u5e38\u5bb9\u6613 $MLE$\u3002\u3002\u3002\n\n$Code\\ Below:$\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int maxn=400000+10;\nconst ll inf=1ll<<50;\nint n,m,N,rt,mx,sum,siz[maxn],vis[maxn],head[maxn],tot=1;ll ans[maxn];\n\ninline int read()\n{\n\tregister int x=0,f=1;char ch=getchar();\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') f=-1;\n\tfor(;isdigit(ch);ch=getchar()) x=(x<<3)+(x<<1)+ch-'0';\n\treturn (f==1)?x:-x;\n}\nvoid print(ll x)\n{\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) print(x/10);\n\tputchar(x%10+'0');\n}\n\nstruct Edge\n{\n\tint to,next,a,b;\n}e[maxn<<1];\nvector<Edge> son[maxn];\n\ninline void addedge(int x,int y,int a,int b) {e[++tot]=(Edge){y,head[x],a,b};head[x]=tot;}\nvoid dfs(int x,int f)\n{\n\tfor(int i=head[x];i;i=e[i].next)\n\t\tif(e[i].to!=f)\n\t\t\tson[x].push_back(e[i]),dfs(e[i].to,x);\n}\ninline void rebuild()\n{\n\tmemset(head,0,sizeof(head));tot=1;N=n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint l=son[i].size();\n\t\tif(l<=2)\n\t\t{\n\t\t\tfor(int j=0;j<l;j++)\n\t\t\t{\n\t\t\t\tconst Edge &p=son[i][j];\n\t\t\t\taddedge(i,p.to,(p.to<=N)?p.a:0,(p.to<=N)?p.b:0);\n\t\t\t\taddedge(p.to,i,(p.to<=N)?p.a:0,(p.to<=N)?p.b:0);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint ls=++n,rs=++n;\n\t\t\taddedge(i,ls,0,0);addedge(ls,i,0,0);\n\t\t\taddedge(i,rs,0,0);addedge(rs,i,0,0);\n\t\t\tfor(int j=0;j<l;j++)\n\t\t\t{\n\t\t\t\tif(!(j&1)) son[ls].push_back(son[i][j]);\n\t\t\t\telse son[rs].push_back(son[i][j]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nstruct node\n{\n\tll x,y;\n\tnode(ll _x=0,ll _y=0):x(_x),y(_y){}\n\tfriend inline node operator + (const node &a,const node &b) {return node(a.x+b.x,a.y+b.y);}\n\tfriend inline node operator - (const node &a,const node &b) {return node(a.x-b.x,a.y-b.y);}\n\tfriend inline bool operator <= (const node &a,const node &b) {return a.y*b.x<=a.x*b.y;}\n};\ninline bool cmp(const node &a,const node &b) {return a.x<b.x||(a.x==b.x&&a.y>b.y);}\nnode sta[maxn*10],All[maxn*10],A[maxn],B[maxn];\n\nstruct hull\n{\n\tnode *s;int T;\n\tinline node operator [] (const int &x) {return s[x];}\n\tinline const node operator [] (const int &x) const {return s[x];}\n\tinline void clear() {T=0;}\n\tinline void push(const node &p) {s[++T]=p;}\n\tinline void build()\n\t{\n\t\tsort(s+1,s+T+1,cmp);\n\t\tint top=0;\n\t\tfor(int i=1;i<=T;i++)\n\t\t{\n\t\t\tif(i>1&&s[i].x==s[i-1].x) continue;\n\t\t\twhile(top>1&&(sta[top]-sta[top-1])<=(s[i]-sta[top-1])) top--;\n\t\t\tsta[++top]=s[i];\n\t\t}\n\t\tfor(int i=1;i<=top;i++) s[i]=sta[i];\n\t\tT=top;\n\t}\n\tinline void merge(const hull &a,const hull &b)\n\t{\n\t\tint i=1,j=1;push(a[i]+b[j]);\n\t\twhile(i<a.T||j<b.T)\n\t\t{\n\t\t\tif(j>=b.T||(i<a.T&&(b[j+1]-b[j])<=(a[i+1]-a[i]))) i++;\n\t\t\telse j++;\n\t\t\tpush(a[i]+b[j]);\n\t\t}\n\t}\n\tinline void query()\n\t{\n\t\tint o=1;\n\t\tfor(int i=0;i<m;i++)\n\t\t{\n\t\t\twhile(o!=T&&i*s[o+1].x+s[o+1].y>i*s[o].x+s[o].y) o++;\n\t\t\tans[i]=i*s[o].x+s[o].y;\n\t\t}\n\t}\n};\nhull all,a,b;\n\ninline void init() {all.s=All;a.s=A;b.s=B;}\nvoid getrt(int x,int f)\n{\n\tsiz[x]=1;\n\tfor(int i=head[x];i;i=e[i].next)\n\t{\n\t\tint y=e[i].to;\n\t\tif(y==f||vis[i>>1]) continue;\n\t\tgetrt(y,x);siz[x]+=siz[y];\n\t\tint ret=min(siz[y],sum-siz[y]);\n\t\tif(ret>mx) mx=ret,rt=i;\n\t}\n}\nvoid getPoint(int x,int f,hull &u,ll A,ll B)\n{\n\tif(x<=N) u.push(node(A,B));\n\tfor(int i=head[x];i;i=e[i].next)\n\t\tif(e[i].to!=f&&!vis[i>>1])\n\t\t\tgetPoint(e[i].to,x,u,A+e[i].a,B+e[i].b);\n}\nvoid divide(int x,int pre)\n{\n\tmx=-1e9;rt=0;sum=pre;getrt(x,0);\n\tif(mx==-1e9) return ;\n\tvis[rt>>1]=1;a.clear();b.clear();\n\tgetPoint(e[rt].to,0,a,e[rt].a,e[rt].b);\n\tgetPoint(e[rt^1].to,0,b,0,0);\n\ta.push(node(0,0));b.push(node(0,0));\n\ta.build();b.build();all.merge(a,b);\n\tint now=rt,size=pre-siz[e[now].to];\n\tdivide(e[now].to,siz[e[now].to]);\n\tdivide(e[now^1].to,size);\n}\n\nint main()\n{\n\tinit();\n\tn=read(),m=read();\n\tint x,y,a,b;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tx=read(),y=read(),a=read(),b=read();\n\t\taddedge(x,y,a,b),addedge(y,x,a,b);\n\t}\n\tdfs(1,0);rebuild();divide(1,n);\n\tall.build();all.query();\n\tfor(int i=0;i<m;i++) print(ans[i]),putchar(' '); putchar('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1562985324,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1019E \u3010Raining season\u3011"
    }
]