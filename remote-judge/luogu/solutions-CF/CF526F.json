[
    {
        "content": "> [CF526F Pudding Monsters](https://codeforces.com/contest/526/problem/F)\n\n## \u9898\u610f\n\n- \u7ed9\u5b9a\u4e00\u4e2a $n \\times n$ \u7684\u68cb\u76d8\uff0c\u5176\u4e2d\u6709 $n$ \u4e2a\u68cb\u5b50\uff0c\u6bcf\u884c\u6bcf\u5217\u6070\u597d\u6709\u4e00\u4e2a\u68cb\u5b50\u3002\n- \u6c42\u6709\u591a\u5c11\u4e2a $k \\times k$ \u7684\u5b50\u68cb\u76d8\u4e2d\u6070\u597d\u6709 $k$ \u4e2a\u68cb\u5b50\u3002\n- $n \\le 3 \\times 10^5$\u3002\n\n## \u9898\u89e3\n\n\u5c06\u4e8c\u7ef4\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u7ef4\u95ee\u9898\uff0c\u5373\u6784\u9020\u4e00\u4e2a\u5e8f\u5217 $a_{1\\dots n}$\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $(x,y)$\uff0c$a_x = y$\u3002\n\n\u5219\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\u7ecf\u5178\u7684\u8fde\u7eed\u6bb5\u8ba1\u6570\u95ee\u9898\u3002\n\n\u672c\u9898\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0c\u90a3\u4e5f\u5c31\u662f\u7edf\u8ba1 $\\max - \\min + 1 = \\operatorname{len}$ \u7684\u533a\u95f4\u4e2a\u6570\u3002\n\n\u5c06\u53f3\u7aef\u70b9\u5411\u53f3\u626b\uff0c\u7528\u5355\u8c03\u6808\u7ef4\u62a4\u5f53\u524d\u6bcf\u4e2a\u540e\u7f00\u7684 $\\max$ \u548c $\\min$\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5f53\u524d\u6bcf\u4e2a\u540e\u7f00\u7684 $\\max - \\min - \\operatorname{len}$ \u7684\u503c\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u540e\u7f00\u533a\u95f4\u7684\u503c\u7684\u6700\u5c0f\u503c\u4ee5\u53ca\u6700\u5c0f\u503c\u7684\u4e2a\u6570\u3002\n\n\u663e\u7136 $\\max - \\min - \\operatorname{len} \\ge -1$\uff0c\u540c\u65f6\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9 $r$\uff0c\u81f3\u5c11\u4f1a\u6709\u4e00\u4e2a\u540e\u7f00\u7684\u503c\u4e3a $-1$\uff08$l = r$ \u65f6\uff09\uff0c\u56e0\u6b64\u6bcf\u4e2a\u53f3\u7aef\u70b9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u90fd\u662f\u5f53\u524d\u540e\u7f00\u533a\u95f4\u7684\u503c\u7684\u6700\u5c0f\u503c\u7684\u4e2a\u6570\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n \\log n)$\u3002\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u5176\u5b9e\u53ef\u4ee5\u5904\u7406\u6709\u91cd\u590d\u5143\u7d20\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u7684\u5c31\u662f $\\max - \\min + 1 = \\operatorname{cnt}$ \u7684\u533a\u95f4\u4e2a\u6570\uff0c\u5176\u4e2d $\\operatorname{cnt}$ \u4e3a\u533a\u95f4\u4e2d\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u6570\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```cpp\nconst int N = 3e5 + 7;\nint n, a[N], sx[N], tx, sn[N], tn;\nmap <int, int> p;\nstruct T {\n\tint l, r, x, c, z;\n} t[N<<2];\nll ans;\n\nvoid build(int p, int l, int r) {\n\tt[p].l = l, t[p].r = r, t[p].c = r - l + 1;\n\tif (l == r) return;\n\tbuild(ls, l, md), build(rs, md + 1, r);\n}\n\ninline void add(int p, int x) {\n\tt[p].x += x, t[p].z += x;\n}\n\nvoid upd(int p, int l, int r, int x) {\n\tif (t[p].l >= l && t[p].r <= r) return add(p, x);\n\tif (t[p].z) add(ls, t[p].z), add(rs, t[p].z), t[p].z = 0;\n\tif (l <= md) upd(ls, l, r, x);\n\tif (r > md) upd(rs, l, r, x);\n\tt[p].x = min(t[ls].x, t[rs].x);\n\tt[p].c = (t[ls].x == t[p].x ? t[ls].c : 0) + (t[rs].x == t[p].x ? t[rs].c : 0);\n}\n\nint main() {\n\trd(n);\n\tfor (int i = 1, x, y; i <= n; i++) rd(x), rd(y), a[x] = y;\n\tbuild(1, 1, n);\n\tfor (int i = 1; i <= n; i++) {\n\t\twhile (tx && a[sx[tx]] < a[i]) upd(1, sx[tx-1] + 1, sx[tx], -a[sx[tx]]), --tx;\n\t\twhile (tn && a[sn[tn]] > a[i]) upd(1, sn[tn-1] + 1, sn[tn], a[sn[tn]]), --tn;\n\t\tupd(1, p[a[i]] + 1, i, -1), p[a[i]] = sx[++tx] = sn[++tn] = i;\n\t\tupd(1, sx[tx-1] + 1, i, a[i]), upd(1, sn[tn-1] + 1, i, -a[i]);\n\t\tans += t[1].c;\n\t}\n\tprint(ans);\n\treturn 0;\n}\n```",
        "postTime": 1578575751,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF526F \u3010Pudding Monsters\u3011"
    },
    {
        "content": "# \u9898\u76ee\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/CF526F)\n\n# \u5206\u6790\n\u697c\u4e0b\u8bb8\u591a\u5927\u4f6c\u90fd\u662f\u5199\u7684\u7ebf\u6bb5\u6811\u7684\u5206\u6790\uff0c\u849f\u84bb\u6765\u4e00\u53d1\u5206\u6cbb\u7684\u9898\u89e3\u5427\u3002\n\n### \u9898\u610f\n$1$\u3001\u4e00\u4e2a$n\\times n$\u7684\u77e9\u9635\u91cc\u6bcf\u884c\u6bcf\u5217\u90fd\u53ea\u6709\u4e00\u4e2a$Pudding Monsters $\n\n$2$\u3001\u627e$k\\times k$\u7684\u77e9\u9635\u6ee1\u8db3\u5176\u4e2d\u6709$k$\u4e2a$Pudding Monsters $\n\n$3$\u3001$n\\le 3\\times 10^5,1\\le k \\le n $\n\n### \u5206\u6cbb\n\u5206\u6cbb\u601d\u60f3\u5c31\u662f\u628a\u4e00\u6bb5\u957f\u533a\u95f4\u4e0a\u7684\u95ee\u9898\u5206\u5230\u4e00\u4e2a\u4e2a\u5b50\u95ee\u9898\u6765\u8fdb\u884c\u89e3\u51b3\uff0c\u6700\u540e\u5206\u522b\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u8fd9\u4e2a\u9898\u56e0\u4e3a\u7ed9\u51fa\u7684\u662f\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8f6c\u5316\u4e3a\u4e00\u7ef4\u3002\u9898\u76ee\u4e2d\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\uff1a**\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u90fd\u53ea\u6709\u4e00\u4e2a\u70b9**\u3002\n\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u628a\u5f53\u524d\u5217\u7684$Pudding Monsters $\u5728\u54ea\u4e00\u884c\u8bb0\u5f55\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u5e8f\u5217\uff0c\u7136\u540e\u5f00\u59cb\u5206\u6cbb\u89e3\u51b3\u3002\u6211\u4eec\u7684\u95ee\u9898\u5c31\u7b80\u5316\u4e3a\u4e86\u6709\u591a\u5c11\u533a\u95f4$[l,r]$\u4f7f$Max-Min=l-r$\u6210\u7acb\uff0c\u5176\u4e2d$Max,Min$\u5206\u522b\u4e3a\u533a\u95f4$[l,r]$\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c\u3002\n\n\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u533a\u95f4\u5206\u6210\u4e24\u90e8\u5206$[l,mid],[mid+1,r]$\uff0c\u5206\u6210\u4e00\u4e2a\u4e2a\u7684\u5b50\u95ee\u9898\u6765\u89e3\u51b3\u3002\u6240\u4ee5\u6211\u4eec\u5728\u5f53\u524d\u60c5\u51b5\u4e0b\u53ea\u9700\u8981\u8003\u8651\u8de8\u8fc7$mid$\u7684\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e86\uff0c\u5176\u4ed6\u7684\u90fd\u662f\u9012\u5f52\u7684\u5b50\u95ee\u9898\u3002\n\n\u6211\u4eec\u9700\u8981\u5148\u9884\u5904\u7406\u6700\u5927\u548c\u6700\u5c0f\u503c\u3002\u8bbe$mx[i]$\u548c$mn[i]$\u4e3a\u6700\u5927\u548c\u6700\u5c0f\u6570\u7ec4\uff0c\u90a3\u4e48$l\\le i\\le mid$\u65f6\uff0c\u8fd9\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u7684\u662f\u4ece$i$\u5230$mid$\u7684\u6700\u5927\u548c\u6700\u5c0f\uff0c\u800c$mid+1\\le i\\le r$\u65f6\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u4ece$mid+1$\u5230$i$\u7684\u6700\u5927\u548c\u6700\u5c0f\u3002\n\n\u5355\u4e2a\u70b9\u6211\u4eec\u5148\u4e0d\u5fc5\u8003\u8651\uff0c\u56e0\u4e3a\u5355\u4e2a\u70b9\u5c31\u76f4\u63a5\u8ba9\u7b54\u6848$ans++$\u5c31\u884c\u4e86\uff0c\u8868\u793a\u4e00\u4e2a$1\\times 1$\u7684\u5408\u6cd5\u72b6\u6001\u3002\n\n\u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u4e24\u4e2a\u5206\u5f00\u7684\u533a\u95f4\u5408\u5e76\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u4e00\u5171\u6709\u56db\u79cd\u60c5\u51b5\uff1a\n\n$1$\u3001\u6700\u5927\u6700\u5c0f\u90fd\u5728\u5de6\u533a\u95f4\uff0c\u4e0a\u9762\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u5982\u679c\u6709\u533a\u95f4$[l,r]$\u4f7f$Max-Min=l-r$\u6210\u7acb\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u60c5\u51b5\u3002\u6240\u4ee5\u6211\u4eec\u679a\u4e3e\u5de6\u7aef\u70b9$i$\uff0c\u90a3\u4e48\u6839\u636e\u4e0a\u5f0f\u5f97\u5230$j=i+mx[i]-mn[i]$\u3002\n$2$\u3001\u6700\u5927\u6700\u5c0f\u90fd\u5728\u53f3\u533a\u95f4\uff0c\u90a3\u4e48\u679a\u4e3e\u53f3\u7aef\u70b9$i$\uff0c\u5219\u5de6\u7aef\u70b9$j=i-(mx[i]-mn[i])$\u3002\n\n\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u90fd\u5f88\u597d\u5206\u6790\uff0c\u786e\u5b9a\u4e86\u4e00\u4e2a\u7aef\u70b9\uff0c\u90a3\u4e48\u53e6\u4e00\u4e2a\u7aef\u70b9\u5c31\u786e\u5b9a\u4e86\uff0c\u6211\u4eec\u76f4\u63a5$ans++$\u5c31\u884c\u4e86\u3002\n\n\u4e0b\u8fb9\u662f\u4e24\u79cd\u6bd4\u8f83\u590d\u6742\u7684\u60c5\u51b5\uff1a\n\n$1$\u3001\u6700\u5c0f\u503c\u5728\u5de6\uff0c\u6700\u5927\u5728\u53f3\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u4e0a\u8fb9\u8bf4\u5230\u7684\u90a3\u4e2a\u5f0f\u5b50\u5f97\u51fa\u6765\u679a\u4e3e\u5de6\u7aef\u70b9$i$\uff0c\u90a3\u4e48\u53f3\u7aef\u70b9\u548c\u5176\u7684\u5173\u7cfb\u5c31\u662f$mx[j]-mn[i] = j-i\\to mn[i]-i=mx[j]-j$\n\n$2$\u3001\u4e0e\u4e0a\u8fb9\u76f8\u53cd\uff0c\u6700\u5c0f\u503c\u5728\u53f3\uff0c\u6700\u5927\u5728\u5de6\uff0c\u90a3\u4e48\u6211\u4eec\u679a\u4e3e\u53f3\u7aef\u70b9$i$\uff0c\u5219\u5f97\u5230$mx[j]-mn[i] = i-j\\to mn[i]+i=mx[j]+j$\n\n\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u662f\u4e00\u7aef\u786e\u5b9a\uff0c\u4f46\u662f\u53e6\u4e00\u7aef\u65e0\u6cd5\u786e\u5b9a\uff0c\u4ee5\u590d\u6742\u60c5\u51b5$1$\u4e3a\u4f8b\uff0c\u5de6\u5c0f\u53f3\u5927\uff0c\u90a3\u4e48\u679a\u4e3e\u5de6\u7aef\u70b9\uff0c\u53f3\u7aef\u70b9\u5e76\u4e0d\u786e\u5b9a\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u4e00\u6b21\u5411\u53f3\u626b\u63cf\uff0c$mx[j]$\u90fd\u662f\u4f1a\u53d8\u7684\uff0c\u4f46\u662f\u4e0d\u7528\u6bcf\u4e00\u4e2a$i$\u90fd\u626b\u63cf\u4e00\u904d$j$\u3002\u56e0\u4e3a\u5f53 $i--$ \u7684\u65f6\u5019\uff0c\u5982\u679c\u5de6\u4fa7\u589e\u52a0\u7684\u8fd9\u4e2a\u6570\u66f4\u65b0\u4e86\u6700\u5c0f\u503c\uff0c\u5219\u4e0a\u4e00\u8f6e\u5df2\u7ecf\u626b\u63cf\u8fc7 $mid+1\u223cj$ \u4ecd\u7136\u6ee1\u8db3 $mn[j]>mn[i]$ \u3002\u5982\u679c\u589e\u52a0\u7684\u662f\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u4e14\u5927\u4e8e\u4e86 $mx[j]$ \u6b64\u65f6\u6211\u4eec\u4e5f\u53ea\u9700\u5f80\u540e\u626b\u63cf\u627e\u5230\u5f53\u524d\u7684\u6ee1\u8db3\u6761\u4ef6\u7684 $j$ \u5373\u53ef\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u5c31\u662f\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\u4f4d\u7f6e\uff0c$j$\u548c$k$\u90fd\u4ee3\u8868\u53f3\u8fb9\u7684\u70b9\uff0c\u6211\u4eec\u7528\u4e0a\u8fb9\u8bf4\u5230\u7684\u6761\u4ef6$mx[j]-mn[i] = j-i\\to mn[i]-i=mx[j]-j$\u5f53\u4f5c\u4e0b\u6807\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u8ba9\u4e0b\u6807\u4e3a$mx[j]-j$\u7684\u90a3\u4e2a\u4f4d\u7f6e\u7684\u7b54\u6848\u52a0\u4e00\u3002\u62ff\u60c5\u51b5$1$\u4e3e\u4f8b\uff0c\u8bbe\u8bb0\u5f55\u6570\u7ec4\u4e3a$jl[i]$\uff0c\u5982\u679c\u53f3\u8fb9\u679a\u4e3e\u5230\u7684$j$\u7684\u6700\u5c0f\u5927\u4e8e$mn[i]$\uff0c\u90a3\u4e48\u5c31\u8ba9$jl[mx[j]-j+n]++$\u5176\u4e2d\u52a0$n$\u662f\u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u8d1f\u7684\u4e0b\u6807\u3002\u800c\u6211\u4eec\u5b9a\u4e49\u7684\u53e6\u4e00\u4e2a\u6307\u9488$k$\u662f\u7528\u6765\u5584\u540e\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728$k<j$\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c$mx[k]$\u6bd4\u5de6\u8fb9\u7684$mx[i]$\u8fd8\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u8ba9\u5176\u5bf9\u5e94\u7684\u4e0b\u6807\u7684$jl[mx[k]-k+n]--$\u3002\u56e0\u4e3a\u4e00\u5f00\u59cb\u6211\u4eec\u8bb0\u5f55\u7b54\u6848\u7528\u7684\u662f$mx[j]-j+n$\uff0c\u6240\u4ee5\u6700\u540e\u53ea\u9700\u8981\u6309\u7167\u5f53\u524d\u72b6\u51b5\u4e0b\u7684\u6ee1\u8db3\u6761\u4ef6$mx[j]-j=mn[i]-i$\u8ba9\u4e0b\u6807\u53d8\u6210$mn[i]-i+n$\u6765\u8bb0\u5f55\uff0c\u8fd9\u6837\u6211\u4eec\u5f97\u5230\u7684\u5c31\u90fd\u662f\u5408\u6cd5\u60c5\u51b5\u4e86\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u548c\u8fd9\u4e2a\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u7684\u662f\u6bcf\u4e00\u6b21\u90fd\u8981\u6e05\u7a7a\u4e4b\u524d\u7684\u6570\u7ec4\uff0c\u907f\u514d\u51fa\u73b0\u95ee\u9898\u3002\u5177\u4f53\u4e00\u4e9b\u4f1a\u5728\u4ee3\u7801\u91cc\u6ce8\u91ca\u3002\n\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int maxn = 1e5+10;\nint mn[maxn],mx[maxn],jl[maxn<<1];\nll ans;\nint n,a[maxn];\nvoid fenz(int l,int r){\n\tif(l == r){//\u7edf\u8ba11\u00d71\u7684\u60c5\u51b5\n\t\tans++;\n\t\treturn;\n\t}\n\tint mid = (l+r)>>1;\n\tfenz(l,mid);//\u9012\u5f52\u5904\u7406\u5b50\u5e8f\u5217\n\tfenz(mid+1,r);\n\tmx[mid] = mn[mid] = a[mid];//\u521d\u59cb\u5316\n\tmx[mid+1] = mn[mid+1] = a[mid+1];\n\tfor(int i=mid-1;i>=l;--i){//\u521d\u59cb\u5316\u6bcf\u4e2a\u5de6\u533a\u95f4\u7aef\u70b9\u7684\u6700\u5927\u6700\u5c0f\u503c\n\t\tmx[i] = max(mx[i+1],a[i]);\n\t\tmn[i] = min(mn[i+1],a[i]);\n\t}\n\tfor(int i=mid+2;i<=r;++i){//\u521d\u59cb\u5316\u6bcf\u4e2a\u53f3\u533a\u95f4\u7aef\u70b9\u7684\u6700\u5927\u6700\u5c0f\u503c\n\t\tmx[i] = max(mx[i-1],a[i]);\n\t\tmn[i] = min(mn[i-1],a[i]);\n\t}\n\tfor(int i=mid;i>=l;--i){//\u6700\u5927\u6700\u5c0f\u90fd\u5728\u5de6\u8fb9\n\t\tint j=mx[i]-mn[i]+i;//\u76f4\u63a5\u6309\u7167\u6761\u4ef6\u8fdb\u884c\n\t\tif(j<=r && j>mid && mx[j]<mx[i] && mn[i]<mn[j])ans++;\n\t}\n\tfor(int i=mid+1;i<=r;++i){//\u90fd\u5728\u53f3\u8fb9\n        int j=i-mx[i]+mn[i];\n        if(j<=mid && j>=l && mx[j]<mx[i] && mn[j]>mn[i])\n            ans++;\n    }\n    int j=mid+1,k=mid+1;\n    for(int i=mid;i>=l;--i){//\u5de6\u5c0f\u53f3\u5927\uff0cmn[i]-i=mx[j]-j\n    \twhile(j<=r && mn[j]>mn[i]){//\u53f3\u8fb9\u6700\u5c0f\u6bd4\u5de6\u8fb9\u6700\u5c0f\u5927\n    \t\tjl[mx[j]-j+n]++;//\u6761\u4ef6\u4f5c\u4e3a\u4e0b\u6807\u8ba9jl\u6570\u7ec4++\n    \t\tj++;//\u7ee7\u7eed\u5411\u540e\u679a\u4e3e\n    \t}\n    \twhile(k<j && mx[k]<mx[i]){//\u5584\u540e\uff0c\u5982\u679c\u53f3\u8fb9\u6700\u5927\u6bd4\u5de6\u8fb9\u8fd8\u5c0f\uff0c\u4e0d\u7b26\u5408\n    \t\tjl[mx[k]-k+n]--;//\u76f4\u63a5\u8ba9\u5f53\u524d\u6761\u4ef6--\n    \t\tk++;\n    \t}\n    \tans+=(ll)jl[mn[i]-i+n];//\u6700\u540e\u7528\u6761\u4ef6\u7684\u53e6\u4e00\u8fb9\u7edf\u8ba1\u7b54\u6848\uff0c\u8fd9\u6837\u7edf\u8ba1\u5230\u7684\u5c31\u90fd\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\u7b54\u6848\n    }\n    while(k<j){//\u6e05\u7a7a\uff0c\u4e0d\u8981\u7528memset\uff0c\u4f1aTLE\n    \tjl[mx[k]-k+n]--;\n    \tk++;\n    }\n    j=mid;\n    k=mid;\n    for(int i=mid+1;i<=r;++i){//\u5de6\u5927\u53f3\u5c0f\uff0c\u4ee5\u4e0b\u5177\u4f53\u4e0e\u4e0a\u8fb9\u4e00\u6837\n    \twhile(j>=l && mn[j]>mn[i]){\n    \t\tjl[mx[j]+j]++;\n    \t\t--j;\n    \t}\n    \twhile(k>j && mx[k]<mx[i]){\n    \t\tjl[mx[k]+k]--;\n    \t\tk--;\n    \t}\n    \tans+=(ll)jl[mn[i]+i];\n    }\n    while(k>j){//\u518d\u6e05\u7a7a\n    \tjl[mx[k]+k]--;\n    \tk--;\n    }\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\ta[x] = y;//\u5c06\u4e8c\u7ef4\u5e73\u9762\u8f6c\u5230\u4e00\u4e2a\u5e8f\u5217\u4e0a\n\t}\n\tfenz(1,n);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1594466266,
        "uid": 340084,
        "name": "Vocanda",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF526F \u3010Pudding Monsters\u3011"
    },
    {
        "content": "t\u4e3e\u62a5$CF$\u81ea\u6284\u73b0\u8c61\u4e25\u91cd\uff01\uff08$997E$\u662f\u8fd9\u9053\u9898\u7684\u52a0\u5f3a\u7248\uff09\u4eca\u5929\u770b\u5230\u4e86\u8fd9\u9053\u9898\u5c31\u6765\u6c34\u4e00\u53d1\u5427\u3002\n\n\u9898\u76ee\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff0c\u5c31\u662f\u6bcf\u884c\u6bcf\u5217\u90fd\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a$k\u00d7k$\u7684\u77e9\u5f62\u91cc\u6709$k$\u4e2a\u70b9$(x_1,y_1),(x_2,y_2)...(x_k,y_k)$\uff0c\u5219$max\\{ x_k \\}-min\\{ x_k \\}+1=k,max\\{ y_k\\}-max\\{ y_k \\}+1=k$\u3002\n\n\u4e8c\u7ef4\u7684\u6bd4\u8f83\u96be\u5904\u7406\uff0c\u6211\u4eec\u5148\u5bf9$x$\u8fd9\u4e00\u7ef4\u6392\u5e8f\uff0c\u90a3\u4e48\u5c31\u53ea\u9700\u8981\u5904\u7406$y$\u8fd9\u4e00\u7ef4\u4e86\u3002\u73b0\u5728\u95ee\u9898\u53d8\u6210\u4e86\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff08\u4e00\u5b9a\u4e3a\u4e00\u4e2a\u6392\u5217\uff09\uff0c\u6c42\u5176\u4e2d\u5b50\u6392\u5217\uff08\u4e5f\u662f\u6392\u5217\u7684\u5b50\u4e32\uff09\u7684\u6570\u91cf\u3002\n\n\u8003\u8651\u5b50\u6392\u5217\u7684\u6027\u8d28\u3002\u8bb0\u6392\u5e8f\u597d\u7684\u6570\u7ec4\u4e3a$\\{ a_n\\}$\uff0c\u82e5$[l,r]$\u4e3a\u4e00\u4e2a\u5b50\u6392\u5217\uff0c\u5219\u6ee1\u8db3\uff1a$Max-Min=r-l$\uff0c\u79fb\u9879\u5f97$Max-Min+l-r=0$\u3002\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u7ef4\u62a4$Max-Min+l-r=0$\u7684\u7ec4\u6570\u5373\u53ef\u3002\n\n\u53d1\u73b0$=0$\u7684\u6570\u91cf\u6bd4\u8f83\u96be\u7ef4\u62a4\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\uff0c\u7531\u4e8e\u539f\u4e32\u662f\u4e00\u4e2a\u6392\u5217\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e32\uff0c\u90fd\u6709$Max-Min+l-r\u22650$\u3002\u4e8e\u662f\u7ef4\u62a4$0$\u7684\u6570\u91cf\u53ef\u4ee5\u8f6c\u5316\u4e3a\u7ef4\u62a4\u6700\u5c0f\u503c\u4ee5\u53ca\u6700\u5c0f\u503c\u7684\u6570\u91cf\uff0c\u8fd9\u6837\u5c31\u6bd4\u8f83\u597d\u7ef4\u62a4\u4e86\u3002\n\n\u7136\u540e\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u4e0a\u9762\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n\u5bf9\u4e8e\u5b50\u4e32\u4fe1\u606f\u7684\u67e5\u8be2\uff0c\u6709\u4e00\u79cd\u6bd4\u8f83\u5957\u8def\u7684\u505a\u6cd5\u5c31\u662f\u626b\u63cf\u7ebf\u3002\u672c\u9898\u4e2d\u5bf9$r$\u505a\u626b\u63cf\u7ebf\u3002\u5047\u8bbe\u6211\u4eec\u53f3\u7aef\u70b9\u626b\u63cf\u5230\u4e86$r$\uff0c\u8bb0\u7ebf\u6bb5\u6811t\u4e0a\u7684\u8282\u70b9$[L,R]$\u8868\u793a\u539f\u5e8f\u5217\u4e2d$[L,r],[L+1,r],...,[R,r]$\u8fd9\u4e9b\u533a\u95f4$Max-Min+l-r$\u7684\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u51fa\u73b0\u6b21\u6570\u3002\u7136\u540e\u6211\u4eec\u5206\u522b\u5206\u6790$l,r,Max,Min$\u8fd9\u56db\u4e2a\u91cf\u5982\u4f55\u7ef4\u62a4\u3002\n\n\u5bf9\u4e8e$l$\uff1a\u663e\u7136\uff0c\u56e0\u4e3a\u662f\u53f3\u7aef\u70b9\u5728\u79fb\u52a8\uff0c\u6240\u4ee5\u6bcf\u4e2a\u7ef4\u62a4\u91cf\u7684$l$\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e00\u5f00\u59cb\u5c31\u628a$l$\u7684\u8d21\u732e\u505a\u6389\u3002\n\n\u5bf9\u4e8e$r$\uff1a\u663e\u7136\uff0c\u53f3\u7aef\u70b9\u6bcf\u6b21\u5411\u53f3\u79fb\u4e00\u4f4d\uff0c\u6240\u4ee5$Max-Min+l-r$\u7684\u503c\u90fd\u5148\u4f1a\u51cf1\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u533a\u95f4$-1$\u5373\u53ef\u3002\n\n\u5bf9\u4e8e$Max$\uff0c\u6709\u70b9\u590d\u6742\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5143\u7d20\u5355\u8c03\u9012\u51cf\u7684\u6808\u6765\u7ef4\u62a4\u3002\u8bb0\u6808\u4e3a$stk$\uff0c\u6808\u9876\u7f16\u53f7\u4e3a$top$\u3002\u5982\u679c$a[stk[top]]$\u6bd4$a[r]$\u5c0f\uff0c\u90a3\u4e48\u663e\u7136\u9700\u8981\u66f4\u65b0\u7ebf\u6bb5\u6811\u4e0a$stk[top-1]+1$\u81f3$stk[top]$\u7684\u8fd9\u4e2a\u533a\u95f4\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\u3002\u6700\u540e\u518d\u628a$r$\u52a0\u5165\u5230\u5355\u8c03\u6808\u4e2d\u3002\n\n\u5bf9\u4e8e$Min$\uff0c\u5904\u7406\u65b9\u6cd5\u4e0e$Max$\u4e00\u6837\u3002\n\n\u6700\u540e\u626b\u63cf\u7ebf\u6bcf\u79fb\u52a8\u4e00\u6b21\uff0c\u90fd\u8981\u7edf\u8ba1\u4e00\u6b21\u7b54\u6848\u3002\u8fd9\u9053\u9898\u5c31\u7b97\u505a\u5b8c\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define ll long long\nconst int N=500000;\nint n,top1,top2;\nll ans;\nstruct chess\n{\n\tint x,y;\n\tbool operator <(const chess &P) const {return x<P.x;}\n}c[N],stk1[N],stk2[N];\nstruct node\n{\n\tint Min,tag;ll cnt;\n} t[N<<2];\n\nvoid build(int i,int l,int r)\n{\n\tif (l==r) {t[i].Min=l;t[i].cnt=1;return;}\n\tint mid=(l+r)>>1;\n\tbuild(i<<1,l,mid);build(i<<1|1,mid+1,r);\n\tt[i]=t[i<<1];\n}\n\nvoid pushdown(int i)\n{\n\tint ls=i<<1,rs=ls|1;\n\tt[ls].Min+=t[i].tag;t[rs].Min+=t[i].tag;\n\tt[ls].tag+=t[i].tag;t[rs].tag+=t[i].tag;\n\tt[i].tag=0;\n}\n\nvoid pushup(int i)\n{\n\tint ls=i<<1,rs=ls|1;\n\tt[i].Min=min(t[ls].Min,t[rs].Min);t[i].cnt=0;\n\tif (t[i].Min==t[ls].Min) t[i].cnt+=t[ls].cnt;\n\tif (t[i].Min==t[rs].Min) t[i].cnt+=t[rs].cnt;\n}\n\nvoid update(int i,int l,int r,int x,int y,int val)\n{\n\tif (l>=x&&r<=y) {t[i].Min+=val;t[i].tag+=val;return;}\n\tint mid=(l+r)>>1;pushdown(i);\n\tif (mid>=x) update(i<<1,l,mid,x,y,val);\n\tif (mid<y) update(i<<1|1,mid+1,r,x,y,val);\n\tpushup(i);\n}\n\nint query(int i,int l,int r,int x,int y)\n{\n\tif (l>=x&&r<=y) return t[i].Min==0?t[i].cnt:0;\n\tint mid=(l+r)>>1,ans=0;pushdown(i);\n\tif (mid>=x) ans+=query(i<<1,l,mid,x,y);\n\tif (mid<y) ans+=query(i<<1|1,mid+1,r,x,y);\n\treturn ans;\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++) scanf(\"%d%d\",&c[i].x,&c[i].y);\n\tsort(c+1,c+n+1);build(1,1,n);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tupdate(1,1,n,1,n,-1);\n\t\twhile (top1&&stk1[top1].y<c[i].y)\n\t\t\tupdate(1,1,n,stk1[top1-1].x+1,stk1[top1].x,c[i].y-stk1[top1].y),--top1;\n\t\tstk1[++top1]={i,c[i].y};\n\t\twhile (top2&&stk2[top2].y>c[i].y)\n\t\t\tupdate(1,1,n,stk2[top2-1].x+1,stk2[top2].x,stk2[top2].y-c[i].y),--top2;\n\t\tstk2[++top2]={i,c[i].y};\n\t\tans+=query(1,1,n,1,i);\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\n```\n\n",
        "postTime": 1573644187,
        "uid": 29575,
        "name": "Holy_Push",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF526F \u3010Pudding Monsters\u3011"
    },
    {
        "content": "[MyBlog](https://shuyumo2003.github.io/2020/%E3%80%8C%E9%A2%98%E5%8D%95%E3%80%8DIOI2020%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F%E4%BD%9C%E4%B8%9A-Part-1/#CF526F-Pudding-Monsters)\n# CF526F Pudding Monsters\n\n- \u7ed9\u5b9a\u4e00\u4e2a $n \\times n$ \u7684\u68cb\u76d8\uff0c\u5176\u4e2d\u6709 $n$ \u4e2a\u68cb\u5b50\uff0c\u6bcf\u884c\u6bcf\u5217\u6070\u597d\u6709\u4e00\u4e2a\u68cb\u5b50\u3002\n- \u6c42\u6709\u591a\u5c11\u4e2a $k \\times k$ \u7684\u5b50\u68cb\u76d8\u4e2d\u6070\u597d\u6709 $k$ \u4e2a\u68cb\u5b50\u3002\n- $n \\le 3 \\times 10^5$\u3002\n\n\u6bcf\u884c\u6bcf\u5217**\u6070\u597d\u6709\u4e00\u4e2a**\u68cb\u5b50\u7684\u68cb\u76d8\uff0c\u53ef\u4ee5\u62bd\u8c61\u6210\u4e00\u4e2a\u6392\u5217\u3002 \u800c\u64cd\u4f5c\u4e5f\u662f\u5bf9\u4e8e\u4e00\u4e2a\u6392\u5217\u7684\u4e00\u6bb5\u8fdb\u884c\u64cd\u4f5c\u7684\u3002\n\n\u9898\u610f\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\n - \u7ed9\u51fa\u4e00\u4e2a\u6392\u5217\n - \u6c42\u8fde\u7eed\u6bb5\u6570\u91cf\uff0c\u5373\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u4e14\u6bb5\u4e2d\u7684\u5143\u7d20\u6392\u597d\u5e8f\u4e4b\u540e\u5fc5\u987b\u662f\u516c\u5dee\u4e3a$1$\u7684\u7b49\u5dee\u6570\u5217.\n\n**\u8fde\u7eed\u6bb5\u8ba1\u6570**\n\n\u8003\u8651\u5982\u4f55\u523b\u753b\u201c**\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u4e14\u6bb5\u4e2d\u7684\u5143\u7d20\u6392\u597d\u5e8f\u4e4b\u540e\u5fc5\u987b\u662f\u516c\u5dee\u4e3a$1$\u7684\u7b49\u5dee\u6570\u5217**\u201d\u8fd9\u4e2a\u6761\u4ef6\uff0c\u53ef\u4ee5\u5f62\u5f0f\u5316\u7684\u5b9a\u4e49\uff1a\n\n$$\\operatorname{MaxVal} - \\operatorname{MinVal} = (R - L)$$\n\n\u5373\n\n$$f_{R}(L) = \\operatorname{MaxVal} - \\operatorname{MinVal} - (R - L) = 0$$\n\n\u8fd9\u4e2a\u6761\u4ef6\u6210\u7acb\u7684\u57fa\u7840\u5728\u4e8e\uff0c\u6240\u6c42\u6570\u5217\u4e0d\u80fd\u6709\u91cd\u590d\u5143\u7d20\uff0c\u800c\u4e14\u4e5f\u4fdd\u8bc1\u4e86\u51fd\u6570$f_x(L) \\ge 0$, \u67e5\u8be2\u65f6\u53ea\u9700\u8981\u7ef4\u62a4**\u6700\u5c0f\u503c**\u4ee5\u53ca\u6700\u5c0f\u503c\u7684**\u6570\u91cf**\u5373\u53ef\u3002\n\n\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u4e00\u4e2a\u7aef\u70b9\uff0c\u6bd4\u5982\u53f3\u7aef\u70b9 $R$\uff0c\u7136\u540e\u67e5\u627e\u6709\u591a\u5c11\u7b26\u5408\u6761\u4ef6\u7684\u5de6\u7aef\u70b9 $L$ \uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4$f_R(x)$\u5728\u6bcf\u4e2a\u70b9\u5904\u7684\u51fd\u6570\u503c\u3002\n\n\u8003\u8651\u5f53$f_x(L)$ \u79fb\u52a8\u5230 $f_{x + 1}(L)$ \u65f6\uff0c \u503c\u7684\u53d8\u5316\u3002\u53d8\u5316\u7684\u503c\u6709 $R$ , \u53ef\u80fd\u53d8\u5316\u7684\u6709$MaxVal, MinVal$\u3002\u7528\u5355\u8c03\u6808\u5b9e\u65f6\u7ef4\u62a4\u66f4\u65b0\u540e\u4f1a\u6ce2\u53ca\u54ea\u4e9b\u5143\u7d20\u7684\u6700\u5c0f\u503c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5355\u8c03\u6808\u5904\u7406\u7684\u8fc7\u7a0b\u5c31\u662f\u5728\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u540e\u7f00\u6700\u5c0f\\\u5927\u503c\u6570\u7ec4\u3002\n\n\u8fd9\u91cc\u6709\u51e0\u4e2a\u4e0e\u5176\u6709\u76f8\u4f3c\u4e4b\u5904\u7684\u9898\u76ee\uff0c\u4f46\u662f\u53ef\u80fd\u505a\u6cd5\u5e76\u4e0d\u4e00\u6837\uff0c\u9047\u5230\u4e0d\u8981\u60f3\u6210\u4e00\u6837\u7684\u9898\u76ee\uff1a\n - [\u7b97\u672f\u5929\u624d\u2468\u4e0e\u7b49\u5dee\u6570\u5217](https://www.luogu.com.cn/problem/P5278) (\u4e0d\u4fdd\u8bc1\u5e8f\u5217\u4e2d\u4e00\u5b9a\u5143\u7d20\u4e0d\u91cd\u590d)\n   - \u8003\u8651\u5224\u65ad\u4e00\u4e2a\u5e8f\u5217\u6392\u597d\u5e8f\u540e\u662f\u5426\u4e3a\u7b49\u5dee\u6570\u5217\n     - \u51c6\u786e\u505a\u6cd5\n       - $\\max\u2212\\min=(r\u2212l)k$\n       - \u76f8\u90bb\u4e24\u6570\u5dee\u7684\u7edd\u5bf9\u503c\u7684 $\\operatorname{gcd}$\u662f $k$\n       - \u533a\u95f4 $[l,r]$ \u5185\u7684\u6570\u4e0d\u91cd\u590d\n     - \u6982\u7387\u6027\u505a\u6cd5\n       - hash\u601d\u60f3\uff0c\u7ef4\u62a4 $n$ \u6b21\u65b9\u548c\n - [\u6811\u4e0a\u6392\u5217(ZROI)](http://www.zhengruioi.com/contest/718/problem/1615)  (\u540c\u6837\u4e0d\u4fdd\u8bc1\u5143\u7d20\u4e00\u5b9a\u4e0d\u91cd\u590d) \n   - \u7ed9\u5b9a\u4e00\u9897 $n$ \u4e2a\u70b9\u7684\u6811\u3002\u6bcf\u4e2a\u70b9\u90fd\u4e00\u4e2a\u6b63\u6574\u6570\u70b9\u6743 $A_i$ \uff0c\u4f60\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a\n   - 1\u3001\u8be2\u95ee\u70b9 $x$ \u548c\u70b9 $y$ \u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\uff08\u5305\u62ec\u70b9 $x$ \u548c\u70b9 $y$ \uff09\u7684\u70b9\u6743\u662f\u5426\u6784\u6210\u4e00\u4e2a\u4ece $1$ \u5f00\u59cb\u7684\u6392\u5217\uff08\u5373\u82e5\u8fd9\u6761\u94fe\u957f\u5ea6\u4e3a $len$ \uff0c\u90a3\u4e48\u95ee\u70b9\u6743\u96c6\u5408\u4e3a ${1,2,\u22ef,len}$ \uff09\u3002\n   - 2\u3001\u5c06 $A_x$ \u4fee\u6539\u4e3a $y$ \u3002\n   - \u7531\u4e8e\u5728\u6811\u4e0a\u96be\u4ee5\u5224\u65ad\u67d0\u533a\u95f4\u5185\u7684\u6570\u5b57\u4e0d\u91cd\u590d\uff0cHash\u7ef4\u62a4n\u6b21\u65b9\u548c\u3002\n - \u7ed9\u51fa\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u5e8f\u5217\uff0c\u8be2\u95ee\u67d0\u533a\u95f4\u4e2d\u7684\u5143\u7d20\u662f\u5426\u80fd\u52a0\u5165\u5c0f\u4e8e$k$\u4e2a\u5143\u7d20\u4f7f\u5176\u62cd\u597d\u5e8f\u540e\u6784\u6210\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\u3002\n   - \u6761\u4ef6\u53d8\u6210\u4e86 $$f_{R}(L) = \\operatorname{MaxVal} - \\operatorname{MinVal} - (R - L) \\ge k$$\n - [count(ZROI)](http://www.zhengruioi.com/problem/1532)\u5df2\u77e5\u4e00\u4e2a\u96c6\u5408$S$\u4e2d\u7684\u6700\u5927\u5143\u7d20\u4e3a $N$\uff0c \u4e14\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\uff0c\u7ed9\u51fa\u4e00\u4e9b\u5f62\u5982$x \\in S$\u3001$x \\notin S$\u7684\u9650\u5236\u3002\u6c42\u6700\u7ec8\u7684\u96c6\u5408\u6709\u591a\u5c11\u79cd\u60c5\u51b5\u3002\n   - \u8003\u8651\u523b\u753b\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\u9700\u8981\u4ec0\u4e48\u53c2\u6570\uff1a\u516c\u5dee\uff0c\u548c\u6bcf\u4e2a\u5143\u7d20$\\bmod $ \u516c\u5dee\u7684\u503c\u3002\u679a\u4e3e\u8fd9\u4e24\u4e2a\u53c2\u6570\uff0c\u4f9d\u6b21\u8ba1\u6570\u5373\u53ef\u3002\n\n\uff08\u5f15\u7528\u6b63\u777f\u7684\u4e24\u9053\u9898\u76ee\uff0c\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u6709\u7248\u6743\u95ee\u9898\uff0c\u5982\u679c\u6709\uff0c\u4f1a\u7acb\u5373\u5220\u9664\uff08~~\u987a\u4fbf\u7ed9\u6b63\u777fOI\u6253\u4e2a\u5e7f\u544a~~\uff09\uff09\u3002\n\n## code\n{% note info CF526F Pudding Monsters %}\n```cpp\nint n;\nint A[_];\n#define fir first\n#define sec second\nnamespace SegmentTree{\n    const int _ = 3e6 + 100;\n    struct Node{\n        int MIN;\n        int sMIN;\n        int tar;\n        Node operator + (const Node & rhs) const {\n            Node res;\n            res.MIN  = min(MIN, rhs.MIN);\n            res.sMIN = MIN == rhs.MIN ? ( sMIN + rhs.sMIN) : (MIN < rhs.MIN ? sMIN : rhs.sMIN) ;\n            return res;\n        }\n    }v[_];\n    int tot = 0;\n    int ch[_][2];\n    #define ls(o) (ch[o][0])\n    #define rs(o) (ch[o][1])\n    #define make (tot++, ch[tot][0] = ch[tot][1] = v[tot].MIN = v[tot].sMIN = 0, tot)\n    int Groot() { return make; }\n    void maintain(int o) {\n        v[o].MIN  = min(v[ls(o)].MIN, v[rs(o)].MIN);\n        v[o].sMIN = v[ls(o)].MIN == v[rs(o)].MIN ? v[ls(o)].sMIN + v[rs(o)].sMIN : ( v[ls(o)].MIN < v[rs(o)].MIN ? v[ls(o)].sMIN : v[rs(o)].sMIN );\n    }\n    void tar(int o, int x) { v[o].MIN += x; v[o].tar += x; }\n    void pushdown(int o){\n        if(v[o].tar){\n            tar(ls(o), v[o].tar); tar(rs(o), v[o].tar);\n            v[o].tar = 0;\n        }\n    }\n    void build(int o, int L, int R){\n        if(L == R) { v[o].MIN = 0; v[o].sMIN = 1; return; }\n        int mid = (L + R) >> 1;\n        ls(o) = make; rs(o) = make;\n        build(ls(o), L, mid); build(rs(o), mid + 1, R);\n        maintain(o);\n    }\n    void update(int o, int nowl, int nowr, int L, int R, int x){\n        if(L > R) return ;\n        if(L <= nowl && nowr <= R) return tar(o, x);\n        int mid = (nowl + nowr) >> 1;  pushdown(o);\n        if(L <= mid) update(ls(o), nowl, mid, L, R, x);\n        if(R  > mid) update(rs(o), mid + 1, nowr, L, R, x);\n        maintain(o);\n    }\n    Node query(int o, int nowl, int nowr, int L, int R) {\n        if(L <= nowl && nowr <= R) return v[o];\n        int mid = (nowl + nowr) >> 1; pushdown(o);\n        Node Ans; Ans.MIN = INT_MAX;\n        if(L <= mid) Ans = Ans + query(ls(o), nowl, mid, L, R);\n        if(R  > mid) Ans = Ans + query(rs(o), mid + 1, nowr, L, R);\n        return Ans;\n    }\n    int query(int o, int L, int R){\n        Node res = query(o, 1, n, L, R);\n        return res.MIN == 0 ? res.sMIN : 0;\n    }\n}  using SegmentTree::Groot; using SegmentTree::build; using SegmentTree::query; using SegmentTree::update;\nnamespace Mon_Stack{\n    int t0t = 0, t1t = 0;\n    pair<int, int> S0[_], S1[_];\n    int work(int *A, int n){\n        int Ans = 0;\n        int root = Groot();\n        build(root, 1, n);\n        S0[0].fir = S1[0].fir = 0;\n        for(int i = 1; i <= n; i++) {\n            update(root, 1, n, 1, i - 1, -1);\n            while(t0t != 0 && S0[t0t].sec >= A[i]) { update(root, 1, n, S0[t0t - 1].fir + 1, S0[t0t].fir,  S0[t0t].sec); t0t--; }\n            while(t1t != 0 && S1[t1t].sec <= A[i]) { update(root, 1, n, S1[t1t - 1].fir + 1, S1[t1t].fir, -S1[t1t].sec); t1t--; }\n            update(root, 1, n, S0[t0t].fir + 1, i, -A[i]);\n            update(root, 1, n, S1[t1t].fir + 1, i, A[i]);\n            int t = query(root, 1, i);\n            Ans += t;\n            S0[++t0t] = make_pair(i, A[i]); S1[++t1t] = make_pair(i, A[i]);\n        }\n        return Ans;\n    }\n} using Mon_Stack::work;\nsigned main(){\n    n = read(); for(int i = 1; i <= n; i++) { int x = read(), y = read(); A[x] = y; }\n    printf(\"%lld\\n\", work(A, n));\n    return 0;\n}\n```\n{% endnote %}\n{% note info count(ZROI) %}\n```cpp\n#include <climits>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n#define int long long \nconst int MOD = 1e9 + 7;\nconst int _M = 2e5 + 100;\ninline int read() { char c = getchar(); int sign = 1; int x = 0; while(c > '9' || c < '0') { if(c=='-')sign = -1; c = getchar(); } while(c <= '9' && c >= '0') { x *= 10; x += c - '0'; c = getchar(); } return x * sign; }\nint MAX, m;\nint have[_M], tht = 0;\nint none[_M], tnt = 0;\nint d[_M], tdt = 0; \nint c[_M];//tct = tdt\nbool CanBe[_M];\nint ToL[_M];\nint ToR[_M];\nvoid divide(int s, int x) {\n    for(int i = 1; i * i <= x; i++){\n        if(x % i == 0) d[++tdt] = i, c[tdt] = s % i;\n        if(i * i != x) d[++tdt] = x / i, c[tdt] = s % d[tdt];\n    }\n    for(int i = 1; i <= tdt; i++) CanBe[i] = true;\n}\nsigned main(){\n    int t;\n    MAX = read(), m = read();\n    for(int i = 1; i <= m; i++){\n        int type = read();\n        if(type == 1) have[++tht] = read();\n        else          none[++tnt] = read();\n    }\n    sort(have + 1, have + 1 + tht); sort(none + 1, none + 1 + tnt);\n    int maxd = INT_MAX, Sta;\n    for(int i = 2; i <= tht; i++) {\n        if(maxd > have[i] - have[i - 1]){\n            maxd = have[i] - have[i - 1];\n            Sta = have[i - 1];\n        }\n    }\n    divide(Sta, maxd);\n\n    /* \u516c\u5dee \u53ca \u7279\u5f81 \u68c0\u67e5   */\n    for(int i = 1; i <= tht; i++){\n        for(int j = 1; j <= tdt; j++){\n            if(!CanBe[j]) continue;\n            if(have[i] % d[j] != c[j]) CanBe[j] = false;\n        }\n    }\n    for(int i = 2; i <= tht; i++){\n        int D = have[i] - have[i - 1];\n        for(int j = 1; j <= tdt; j++){\n            if(!CanBe[j]) continue;\n            if(D % d[j] != 0) CanBe[j] = false;\n        }\n    }\n    t = 0;\n    for(int i = 1; i <= tdt; i++){\n        if(!CanBe[i]) continue;\n        d[++t] = d[i];\n        c[  t] = c[i];\n        CanBe[t] = true;\n    } tdt = t;\n    /* \u516c\u5dee \u53ca \u7279\u5f81 \u68c0\u67e5   \u5b8c\u6210*/\n    for(int i = 1; i <= tdt; i++) { \n        if(CanBe[i]) {\n            ToL[i] = (c[i] == 0 ? d[i] : c[i]) - 1;\n            int t = MAX % d[i];\n            if(t == c[i]) ToR[i] = MAX + 1;\n            if(t  > c[i]) ToR[i] = MAX - (t - c[i]) + 1;\n            if(t  < c[i]) ToR[i] = MAX - d[i] + (c[i] - t) + 1;\n        }\n    }\n    t = 0;\n    for(int i = 1; i <= tdt; i++){\n        if(!CanBe[i]) continue;\n        d[++t] = d[i];\n        c[  t] = c[i];\n        CanBe[t] = true;\n    } tdt = t;\n    int MINS = have[1], MAXE = have[tht];\n    for(int i = 1; i <= tnt; i++){\n        int now = none[i];\n        for(int j = 1; j <= tdt; j++){\n            if(!CanBe[j]) continue;\n            if(now % d[j] == c[j]){\n                if(now < MINS)\n                    ToL[j] = max(ToL[j], now);\n                else if(now > MAXE)\n                    ToR[j] = min(ToR[j], now);\n                else CanBe[j] = false;\n            }\n        }\n    }\n    for(int i = 1; i <= tdt; i++) if(ToL[i] > MINS || ToR[i] < MAXE) CanBe[i] = false; else ToL[i]++, ToR[i] --;\n    /* \u975e\u6cd5\u6570\u5b57\u5b58\u5728\u6027\u68c0\u67e5 */\n    int ans = 0;\n    for(int i = 1; i <= tdt; i++){\n        if(!CanBe[i]) continue;\n        int k = (  (MINS - ToL[i]) / d[i] + 1) * ( (ToR[i] - MAXE) / d[i] + 1) % MOD; // TODO;\n        ans = (ans + k) % MOD;\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n```\n{% endnote %}\n{% note info A.20\u8054\u8d5b\u96c6\u8badday3 \u6811\u4e0a\u6392\u5217(\u7ef4\u62a415\u6b21\u65b9\u548chash) %}\n```cpp\n#include <climits> \n#include <cstring>\n#include <cmath>\n#include <iostream>\n#include <algorithm>\n#include <vector>\ninline int read() { char c = getchar(); int sign = 1; int x = 0; while(c > '9' || c < '0') { if(c=='-')sign = -1; c = getchar(); } while(c <= '9' && c >= '0') { x *= 10; x += c - '0'; c = getchar(); } return x * sign; }\nusing namespace std;\nconst int _ = 6e5 + 100;\nconst int base = 15;\nconst int MOD = 1020031005;\nint SS[_];\nint pow(int a, int b = base){ int ans = 1; while(b){ if(b & 1) ans = (ans *1ll* a) % MOD; a = (a *1ll* a) % MOD; b >>= 1; } return ans; }\n\nint head[_];\nint NodeVal[_];\nstruct edges{\n\tint node;\n\tint nxt;\n}edge[_];\nint tot = 0;\nvoid add(int u, int v){\n\ttot++;\n\tedge[tot].node = v;\n\tedge[tot].nxt  = head[u];\n\thead[u]        = tot;\n}\n\nint n, q;\nint dep[_], fa[_], dfn[_], rnk[_], top[_], son[_], si[_], dfc = 0;\nvoid dfs0(int now, int f, int dp){\n\tint &S = si[now] = 1; int &Mid = son[now] = 0; fa[now] = f; dep[now] = dp;\n\tfor(int i = head[now]; i ; i = edge[i].nxt){\n\t\tint ex = edge[i].node; if(ex == f) continue;\n\t\tdfs0(ex, now, dp + 1); S += si[ex];\n\t\tif(si[ex] > si[Mid]) Mid = ex;\n\t} if(!Mid) Mid = 0;\n}\nvoid dfs1(int now, int f, int tp){\n\tdfn[now] = ++dfc; rnk[dfc] = now;\n\ttop[now] = tp;\n\tif(son[now]) dfs1(son[now], now, tp);\n\tfor(int i = head[now]; i ; i = edge[i].nxt){\n\t\tint ex = edge[i].node; if(ex == f || ex == son[now]) continue;\n\t\tdfs1(ex, now, ex);\n\t}\n}\nvoid clear(){\n\tmemset(head, 0, sizeof(head));\n\tdfn[0] = rnk[0] = si[0] = top[0] = fa[0] = son[0] = 0;\n\ttot = 0;\n\tdfc = 0; \n}\nnamespace SegmentTree{\n\tconst int _ = 3e6 + 100;\n\tint tot = 0;\n\tint ch[_][2];\n\tint v[_];\n\t#define make (tot++, ch[tot][0] = ch[tot][1] = v[tot] = 0, tot);\n\t#define ls(x) (ch[x][0])\n\t#define rs(x) (ch[x][1])\n\t#define maintain(o) (v[o] = (v[ls(o)] +0ll+ v[rs(o)]) % MOD )\n\tvoid init_s() { tot = 0; }\n\tint  Groot(){ return make; }\n\tvoid build(int o, int L, int R){\n\t\tif(L == R) return (void)(v[o] = pow(NodeVal[rnk[L]]));\n\t\tint mid = (L + R) >> 1;\n\t\tls(o) = make; rs(o) = make;\n\t\tbuild(ls(o), L, mid); build(rs(o), mid + 1, R);\n\t\tmaintain(o);\n\t}\n\tvoid update(int o, int nowl, int nowr, int p, int x){\n\t\tif(nowl == nowr) return (void)(v[o] = pow(x));\n\t\tint mid = (nowl + nowr) >> 1;\n\t\tif(p <= mid) update(ls(o), nowl, mid, p, x);\n\t\tif(p  > mid) update(rs(o), mid + 1, nowr, p, x);\n\t\tmaintain(o);\n\t}\n\tint query(int o, int nowl, int nowr, int L, int R){\n\t\tif(L > R) return 0;\n\t\tif(L <= nowl && nowr <= R) return v[o];\n\t\tint mid = (nowl + nowr) >> 1;\n\t\tint ans = 0;\n\t\tif(L <= mid) ans = (ans +0ll+ query(ls(o), nowl, mid, L, R)) % MOD;\n\t\tif(R  > mid) ans = (ans +0ll+ query(rs(o), mid + 1, nowr, L, R)) % MOD;\n\t\treturn ans;\n\t}\n} using SegmentTree::Groot; using SegmentTree::init_s; using SegmentTree::build; using SegmentTree::update; using SegmentTree::query;\nint root = 0;\nint LCA;\nint QueryOnPath(int x, int y){\n\tint ans = 0;\n\twhile(top[x] != top[y]){\n\t\tif(dep[top[x]] > dep[top[y]]) swap(x, y);\n\t\tans = (ans +0ll+ query(root, 1, n, dfn[top[y]], dfn[y])) % MOD;\n\t\ty = fa[top[y]];\n\t}\n\tif(dep[x] < dep[y]) swap(x, y); LCA = y;\n\tans = (ans +0ll+ query(root, 1, n, dfn[y], dfn[x])) % MOD; \n\treturn ans;\n}\nvoid doit(){\n\tclear();\n\tn = read(), q = read();\n\tfor(int i = 1; i <= n; i++) NodeVal[i] = read();\n\tfor(int i = 1; i <  n; i++){ int u = read(), v = read(); add(u, v); add(v, u); }\n\tdfs0(1, 1, 1);\n\tdfs1(1, 1, 1);\n\tinit_s(); root = Groot();\n\tbuild(root, 1, n);\n\twhile(q--){\n\t\tint opt = read(), x = read(), y = read();\n\t\tif(opt == 1){\n\t\t\tint r = QueryOnPath(x, y);\n\t\t\tint Len = dep[x] + dep[y] - (dep[LCA] << 1) + 1;\n\t\t\tputs(SS[Len] == r ? \"Yes\" : \"No\");\n\t\t} else{\n\t\t\tupdate(root, 1, n, dfn[x], y);\n\t\t}\n\t}\n}\nint main(){\n\tfor(int i = 1; i <= 3e5; i++) SS[i] = ( SS[i - 1] +0ll+ pow(i) ) % MOD;\n\tint T = read();\n\twhile(T--) doit();\n\treturn 0;\n}\n```\n{% endnote %}\n",
        "postTime": 1603110076,
        "uid": 44615,
        "name": "ShuYuMo",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF526F \u3010Pudding Monsters\u3011"
    },
    {
        "content": "# CF526F Pudding Monsters\n## \u9898\u76ee\u5927\u610f\n\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a $n \\times n$\u7684\u7f51\u683c\uff0c\u6bcf\u4e00\u884c\u6bcf\u4e00\u5217\u90fd\u6709\u4e14\u4ec5\u6709\u4e00\u53ea\n$Pudding Monster$\uff0c\u6c42\u8fd9\u4e2a\u7f51\u683c\u6709\u591a\u5c11\u4e2a\u6b63\u65b9\u5f62\u5b50\u7f51\u683c\u4f7f\u5f97\u8fd9\u4e2a\u5b50\u7f51\u683c\u7684\u6bcf\u4e00\u884c\u6bcf\u4e00\u5217\u90fd\u6709\u4e14\u4ec5\u6709\u4e00\u53ea$Pudding Monster$\u3002\n## \u89e3\u9898\u62a5\u544a\n\u5386\u53f2\u9057\u7559\u95ee\u9898\u7ec8\u4e8e\u5728\u4eca\u5929\u5f7b\u5e95\u89e3\u51b3\u4e86 QwQ\n\n\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u4e8c\u7ef4\u7684\u95ee\u9898\uff0c\u5e76\u4e0d\u597d\u505a\uff0c\u6211\u4eec\u5c1d\u8bd5\u628a\u5b83\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4e00\u7ef4\u7684\u95ee\u9898\u3002\n\n\u6211\u4eec\u628a\u6240\u6709\u7684$Pudding Monster$\u6309\u7167$x$\u5750\u6807\u6392\u5e8f\uff0c\u8bb0\u6b64\u65f6$y$\u5750\u6807\u5f62\u6210\u6570\u7ec4\u4e3a$a$\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86 :\n\n\u7ed9\u51fa\u4e00\u4e2a\u6392\u5217\uff0c\u6c42\u8fd9\u4e2a\u6392\u5217\u6709\u591a\u5c11\u4e2a\u533a\u95f4\u7684\u503c\u662f\u8fde\u7eed\u7684\uff0c\u4e5f\u5c31\u662f\u6c42\u6ee1\u8db3\u4e00\u4e0b\u6761\u4ef6\u7684\u533a\u95f4\u7684\u4e2a\u6570 :\n\n\u533a\u95f4\u6700\u5927\u503c - \u533a\u95f4\u6700\u5c0f\u503c = \u533a\u95f4\u957f\u5ea6 - 1\n\n$n^2$\u7684\u505a\u6cd5\u5f88\u663e\u7136\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8bf4\u4e86\u3002\n\n\u7f51\u4e0a\u6709\u8bb8\u591a\u5206\u6cbb\u7684\u505a\u6cd5\uff0c\u4f46\u662f\u6211\u5e76\u4e0d\u4f1a\uff0c\u8fd9\u91cc\u4e5f\u4e0d\u8bf4\u4e86\u3002 QwQ\n\n\u8fd9\u91cc\u8bf4\u4e00\u79cd\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u3002\n\n\u8981\u6c42\u7684\u662f\u4e00\u4e0b\u533a\u95f4\u7684\u4e2a\u6570 : \n\n$\\max_{l,r} - \\min_{l,r} = r - l$\n\n\u4e5f\u5c31\u662f\u6c42 :\n\n$(\\max_{l,r} - \\min_{l,r}) - (r - l) = 0$\n\n\u8003\u8651\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4$(\\max_{l,r} - \\min_{l,r}) - (r - l)$\u8fd9\u4e2a\u503c\u7684\u6700\u5c0f\u503c\u4ee5\u53ca\u6700\u5c0f\u503c\u7684\u4e2a\u6570\uff0c\u90a3\u6837\u6211\u4eec\u67e5\u8be2\u53ea\u9700\u8981\u8bbf\u95ee\u6839\u7684\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4f46\u662f\u53d1\u73b0\u5982\u679c$l,r$\u90fd\u4e0d\u786e\u5b9a\u7684\u8bdd\u8fd9\u4e2a\u503c\u5f88\u96be\u7ef4\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u5bf9$r$\u4f5c\u626b\u63cf\u7ebf\uff0c\u6bcf\u6b21\u6c42\u51fa\u4ee5$r$\u7ed3\u5c3e\u7684\u5408\u6cd5\u533a\u95f4\u7684\u548c\uff0c\u5168\u90e8\u52a0\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u53d1\u73b0\u8fd9\u6837\u5b50\u76f8\u6bd4\u8d77\u6765\u5c31\u5bb9\u6613\u591a\u4e86\u3002\n\n\u5177\u4f53\u5982\u4f55\u64cd\u4f5c\u5462?\n\n\u9996\u5148\uff0c\u786e\u5b9a\u4e00\u4e0b\u7ebf\u6bb5\u6811\u8282\u70b9\u4e0a\u7ef4\u62a4\u503c\u7684\u610f\u4e49\uff0c\u8bbe\u5f53\u524d\u626b\u5230\u4e86$r$, \u5f53\u524d\u7ebf\u6bb5\u6811\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u4e3a$[left, right]$\uff0c\u7ef4\u62a4\u4e00\u4e2a$min$\uff0c\u8868\u793a\u5728\u5f53\u524d$r$\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u6240\u6709\u7684 $l \\in [left, right]$\uff0c$(\\max_{l,r} - \\min_{l,r}) - (r - l)$\u7684\u6700\u5c0f\u503c\u4ee5\u53ca\u6700\u5c0f\u503c\u7684\u4e2a\u6570 (\u5982\u679c$l > r$\u5219\u6682\u65f6\u5ffd\u7565)\u3002\u53d1\u73b0\u8fd9\u6837\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684$update$\u4e0e$pushdown$\u3002\n\n\u5176\u6b21\uff0c\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u663e\u7136\u8868\u793a\u533a\u95f4$[left, right]$\u7684\u6700\u5c0f\u503c\u4e3a$left$\uff0c\u6700\u5c0f\u503c\u4e2a\u6570\u4e3a$1$\u3002\n\n\u7136\u540e\uff0c\u8003\u8651\u6bcf\u6b21\u5c06$r$\u53d8\u4e3a$r + 1$\u7684\u65f6\u5019\u5982\u4f55\u4fee\u6539\uff0c\u5173\u4e8e$r$\u7684\u5f71\u54cd\uff0c\u53ea\u9700\u8981\u5168\u5c40\u51cf$1$\u5373\u53ef\uff0c\u5bf9\u4e8e$\\max_{l,r}$\u548c$\\min_{l,r}$\u7684\u5f71\u54cd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u6808\u6765\u7ef4\u62a4(\u5177\u4f53\u8be6\u89c1\u4ee3\u7801)\u3002\n\n\u6700\u540e\uff0c\u7edf\u8ba1\u7b54\u6848\uff0c\u663e\u7136\u3002 QwQ\n\n\u9644\u4e0a\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<algorithm>\n\nclass SegmentTree{\nprivate :\n    typedef long long ll;\n     \n    struct Node{\n        Node *child[2];\n        int min, push;\n        ll cnt; //cnt\u8868\u793a\u5408\u6cd5\u7684\u503c, val\u8868\u793a max - min + l\n \n        Node() :\n            min(0), push(0), cnt(0) {\n            child[0] = child[1] = NULL;\n        }\n    };\n    Node *root;\n    int n;\n \n    void update(Node *now) {\n        now->cnt = 0;\n        now->min = std :: min(now->child[0]->min, now->child[1]->min);\n        if (now->min == now->child[0]->min) {\n            now->cnt += now->child[0]->cnt;\n        }\n        if (now->min == now->child[1]->min) {\n            now->cnt += now->child[1]->cnt;\n        }\n \n        //now->val = now->child[0]->val + now->child[1]->val;\n    }\n \n    void pushDown(Node *now) {\n        if (now->push) {\n            for (register int i = 0; i < 2; i++) {\n                now->child[i]->min += now->push;\n                now->child[i]->push += now->push;\n            }\n            now->push = 0;\n        }\n    }\n \n    void buildTree(Node *now, int left, int right) {\n        now->min = left;\n        now->cnt = 1;\n        if (left == right) {\n            return;\n        }\n        int mid = (left + right) >> 1;\n        buildTree(now->child[0] = new Node(), left, mid);\n        buildTree(now->child[1] = new Node(), mid + 1, right);\n        update(now);\n    }\n     \n    void addVal(Node *now, int left, int right, int l, int r, int val) {\n        if (left >= l && right <= r) {\n            now->push += val;\n            now->min += val;\n            return;\n        }\n        pushDown(now);\n        int mid = (left + right) >> 1;\n        if (r <= mid) {\n            addVal(now->child[0], left, mid, l, r, val);\n        } else if (l > mid) {\n            addVal(now->child[1], mid + 1, right, l, r, val);\n        } else {\n            addVal(now->child[0], left, mid, l, r, val);\n            addVal(now->child[1], mid + 1, right, l, r, val);\n        }\n        update(now);\n    }\n \npublic :\n    void init(int x) {\n        buildTree(root = new Node(), 1, n = x);\n    }\n \n    void addVal(int l, int r, int val) {\n        addVal(root, 1, n, l, r, val);\n    }\n \n    ll query() {\n        return root->cnt;\n    }\n};\n\nclass Solution{\nprivate :\n    static const int maxn = 3e5 + 7;\n\n    struct Node{\n        int x, y;\n\n        Node(int x = 0, int y = 0) :\n            x(x), y(y) {}\n\n        bool operator < (const Node &x) const {\n            return this->x < x.x;\n        }\n    };\n\n    int n, a[maxn], max[maxn], min[maxn], cntMax, cntMin;\n    long long ans;\n    Node p[maxn];\n    SegmentTree tree;\n    \npublic :\n    Solution() {\n        Get();\n        Solve();\n    }\n\n    void Get() {\n        scanf(\"%d\", &n);\n        for (register int i = 1; i <= n; i++) {\n            scanf(\"%d %d\", &p[i].x, &p[i].y);\n        }\n    }\n\n    void Solve() {\n        std::sort(p + 1, p + 1 + n);\n        for (register int i = 1; i <= n; i++) {\n            a[i] = p[i].y;\n            //printf(\"%d \", a[i]);\n        }\n        //putchar('\\n');\n        //++n;//, a[n] = n;\n        \n        tree.init(n);\n        /*\n        for (register int i = 1; i <= n; i++) {\n            printf(\"%d \", a[i]);\n        }\n        putchar('\\n');\n        */\n        for (register int i = 1; i <= n; i++) {\n            // do somthing\n            tree.addVal(1, n, -1);\n \n            for (; cntMax && a[i] > a[max[cntMax]]; cntMax--) {\n                // do something\n                tree.addVal(max[cntMax - 1] + 1, max[cntMax], a[i] - a[max[cntMax]]);\n            }\n            max[++cntMax] = i;\n \n            for (;cntMin && a[i] < a[min[cntMin]]; cntMin--) {\n                // do something\n                tree.addVal(min[cntMin - 1] + 1, min[cntMin], a[min[cntMin]] - a[i]);\n            }\n            min[++cntMin] = i;\n            ans += tree.query();\n            //printf(\"%d : %lld\\n\", i, tree.query());\n        }\n        printf(\"%lld\\n\", ans);\n    }\n};\nSolution sol;\n\nint main() {}\n\n```",
        "postTime": 1552286161,
        "uid": 49866,
        "name": "\u9f99\u4e4b\u543b\u2014\u6c34\u8d27",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF526F \u3010Pudding Monsters\u3011"
    },
    {
        "content": "\u66b4\u529b\u5c31\u662f\u679a\u4e3e\u957f\u5ea6\uff0c\u5de6\u4e0a\u89d2\uff0c\u52a0\u4e0a\u4e8c\u7ef4\u524d\u7f00\u548c\u5373\u53ef\u505a\u5230 $\\mathcal{O(n^3)}$\n\n$n$ \u7ed9\u5230\u4e86 $5e4$ \uff0c\u9700\u8981\u627e\u51fa\u4f4e\u4e8e $\\mathcal{O(n^2)}$ \u7684\u505a\u6cd5\u3002\n\n\u4e00\u79cd\u5957\u8def\u662f\u4e8c\u7ef4\u5982\u679c\u4e0d\u597d\u7edf\u8ba1\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u6620\u5c04\u7684\u65b9\u6cd5\u53d8\u6210\u4e00\u7ef4\u7684\u3002\n\n\u540c\u65f6\u53ef\u4ee5\u83b7\u53d6\u53cc\u5c04\u3002\n\n\u9996\u5148\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u9898\u76ee\u4e2d\u6709\u4e00\u4e2a\u5173\u952e\u6761\u4ef6\u662f\u6bcf\u884c\u6bcf\u5217\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u77e9\u5f62\uff0c\u5982\u679c\u5b58\u5728\u77e9\u5f62\u4e2d\u6700\u53f3\u8fb9\u51fa\u73b0\u7684\u70b9\u7684\u4f4d\u7f6e\u51cf\u53bb\u6700\u5de6\u8fb9\u51fa\u73b0\u7684\u70b9\u7684\u4f4d\u7f6e\u7b49\u4e8e\u6700\u4e0b\u8fb9\u70b9\u7684\u4f4d\u7f6e\u51cf\u53bb\u6700\u4e0a\u8fb9\u70b9\u7684\u4f4d\u7f6e\uff0c\u5c31\u8bf4\u660e\u6210\u7acb\u3002\n\n\u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\uff0c\u7531\u4e8e\u4e0a\u9762\u7684\u90a3\u4e2a\u7279\u6b8a\u9650\u5236\uff0c\u5bfc\u81f4\u6bcf\u4e00\u4e2a $m\\times m$ \u7684\u77e9\u9635\u4e00\u5b9a\u662f\u6bcf\u4e00\u884c\u6bcf\u4e00\u5217\u90fd\u8981\u6709\u70b9\u51fa\u73b0\uff0c\u6240\u4ee5\u5728\u503c\u57df\u4e0a\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u7ef4\u6620\u5c04\u4e0a\uff0c\u4ed6\u4eec\u662f\u8fde\u7eed\u7684\u3002\n\n\u6b63\u786e\u6027\u53ef\u4ee5\u753b\u56fe\u7406\u89e3\u3002\n\n\u5177\u4f53\u5f62\u5f0f\u662f\u8fd9\u6837\u7684\uff1a\n\n`if(maxn-minn==i-j)ans++;`\n\n\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nfor(re int i=1;i<=n;i++){\n    int maxn=a[i],minn=a[i];\n    ans++;\n    for(re int j=i-1;j;j--){\n        maxn=max(a[j],maxn);\n        minn=min(a[j],minn);\n        if(maxn-minn==i-j)ans++;\n    }\n}\n\n```\n\n\u4e8e\u662f\u53d1\u73b0\u6bcf\u6b21\u67e5\u8be2\u627e\u7684\u4f4d\u7f6e\u90fd\u662f\u533a\u95f4\u4e0a\u67e5\u8be2\u4f4d\u7f6e\uff0c\u4f46\u662f\u6211\u4eec\u719f\u77e5\u7684\u533a\u95f4\u6570\u636e\u7ed3\u6784\u4f3c\u4e4e\u90fd\u4e0d\u592a\u80fd\u5904\u7406\u3002\n\n\u4f46\u662f\u5982\u679c\u5bf9\u5e94\u4e00\u4e2a\u5177\u4f53\u7684\u503c\u90a3\u5c31\u662f\u597d\u5904\u7406\u7684\u3002\n\n\u53ef\u4ee5\u76f4\u63a5\u79fb\u9879\u3002\n\n`if((maxn-minn)-(j-i)==0)ans++;`\n\n\u56de\u5934\u770b\u6211\u4eec\u4e0a\u9762\u5b8c\u6210\u7684\u53cc\u5c04\u3002\n\n\u53d1\u73b0\u6070\u597d\u4e00\u4e2a\u662f\u533a\u95f4\u957f\u5ea6\uff0c\u53e6\u4e00\u4e2a\u662f\u503c\u57df\u4e0a\u5bf9\u5e94\u7684\u6781\u7aef\u4f4d\u7f6e\u7684\u8ddd\u79bb\u3002\n\n\u8fd9\u4e2a\u503c\u662f\u4e0d\u4f1a\u5c0f\u4e8e $1$ \u7684\u3002\n\n\u539f\u56e0\uff1a\n\n\u8003\u8651\u4e24\u4e2a\u6781\u7aef\u60c5\u51b5\uff0c\u5206\u522b\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\u60c5\u51b5\u4e00\uff1a\u5f53\u6a2a\u5750\u6807\u76f8\u5dee\u5f88\u5c0f\uff0c\u7eb5\u5750\u6807\u76f8\u5dee\u5f88\u5927\u65f6\uff1a\n\n![](https://i.loli.net/2021/08/20/4kGLouCHbAxgpaq.png)\n\n\u663e\u7136\u4e0d\u5c0f\u4e8e0\u554a\u3002\n\n$(maxn-minn)$ \u6781\u5927\uff0c$(j-i)$ \u5f88\u5c0f.\n\n\u60c5\u51b5\u4e8c\uff1a\n\n \u6a2a\u5750\u6807\u76f8\u5dee\u5f88\u5927\uff0c\u4f46\u662f\u7eb5\u5750\u6807\u76f8\u5dee\u5f88\u5c0f\uff1a\n\n![](https://i.loli.net/2021/08/20/xFqz3oufSiIvdPG.png)\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u4ed6\u4eec\u7eb5\u5750\u6807\u76f8\u90bb\uff0c\u4f46\u662f\u7531\u4e8e\u6a2a\u5750\u6807\u5dee\u8ddd\u8fc7\u5927\uff0c\u5e76\u4e14\u7531\u4e8e\u540c\u884c\u540c\u5217\u53ea\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5\u4e2d\u95f4\u7684\u4f4d\u7f6e\u5fc5\u5b9a\u6709\u6bd4\u6700\u4e0b\u9762\u8fd9\u4e00\u884c\u66f4\u9760\u53f3\u7684\u7eb5\u5750\u6807\u4f4d\u7f6e\uff0c\u4e8e\u662f\u8fd9\u4e2a\u60c5\u51b5\u4e0d\u5408\u6cd5\u3002\n\n\u5e76\u4e14\u603b\u80fd\u627e\u5230\u5408\u6cd5\u7684\u5dee\u503c\u5927\u4e8e\u7b49\u4e8e $0$ \u7684\u4f4d\u7f6e\u3002\n\n\u636e\u4ee5\u4e0a\u53ef\u77e5\uff0c\u6211\u4eec\u7ebf\u6bb5\u6811\u4e2d\u7684\u503c\u5c31\u90fd\u662f\u5927\u4e8e\u7b49\u4e8e $0$ \u7684\u3002\n\n\u5e76\u4e14\u53ea\u6709\u4f4d\u7f6e\u662f $0$ \u7684\u624d\u4f1a\u9020\u6210\u8d21\u732e\u3002\n\n\u4e8e\u662f\uff0c\u533a\u95f4\u6700\u5c0f\u503c\uff01\n\n\u5230\u5e95\u600e\u4e48\u7edf\u8ba1\u5462\uff1f\u4e00\u4e2a\u533a\u95f4\u91cc\u6709\u591a\u5c11\u5462\uff1f\n\n\u591a\u52a0\u4e00\u4e2a $cnt$ \u540c\u6b65\u7ef4\u62a4\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\n\n\u4e8e\u662f\u7ebf\u6bb5\u6811\u4e2d\u5c31\u53ef\u4ee5\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n\u5177\u4f53\u5730\uff0c\u6211\u4eec\u53ea\u8981\u5728\u7ebf\u6bb5\u6811\u4e2d\u627e\u5230\u67d0\u4e2a\u503c\u4e3a $0$ \u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5c31\u4ee3\u8868\u5b58\u5728\u4e00\u4e2a\u8fd9\u6837\u7684\u5408\u6cd5\u77e9\u5f62\uff0c\u5c31\u53ef\u4ee5\u7edf\u8ba1\u8fdb\u7b54\u6848\u3002\n\n\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u4f9d\u6b21\u8003\u8651\u52a0\u5165\u6bcf\u4e2a\u8282\u70b9\u3002\u73b0\u5728\u6211\u4eec\u5bf9\u662f\u5426\u4ea7\u751f\u8d21\u732e\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u8003\u8651\u52a0\u4e0a\u6574\u4f53\u52a0\u4e00\uff08\u4e0a\u9762\u8bf4\u5230\u8fc7\uff0c\u6211\u4eec\u901a\u8fc7\u6700\u5c0f\u503c\u6765\u5224\u65ad\u662f\u5426\u662f\u4ea7\u751f\u8d21\u732e\uff0c\u52a0\u4e00\u53ef\u4ee5\u907f\u514d\u4ea7\u751f\u8d21\u732e\uff0c\u6216\u8005\u8bf4\u662f\u7406\u89e3\u4e3a\u5047\u8bbe\u4ed6\u4eec\u503c\u57df\u4e0d\u8fde\u7eed\uff09\n\n\u4e4b\u540e\u8003\u8651\u7531\u4e8e\u8981\u6c42\u503c\u57df\u8fde\u7eed\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8003\u8651\u5f53\u524d\u8282\u70b9\u7eb5\u5750\u6807\u4e0a\u4e00\u4f4d\u548c\u4e0b\u4e00\u4f4d\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u6a2a\u5750\u6807\u5df2\u7ecf\u5728\u4e4b\u524d\u52a0\u5165\u4e86\uff0c\u90a3\u4e48\u8bf4\u660e\u7eb5\u5750\u6807\u5c31\u4f1a\u8fde\u7eed\u3002\n\n\u90a3\u4e48\u4ed6\u53ef\u80fd\u4f1a\u8d21\u732e\uff0c\u6240\u4ee5\u533a\u95f4\u51cf $1$\u3002 \n\n\u6700\u540e\u5c31\u4f1a\u53d1\u73b0\uff0c\u533a\u95f4\u6ca1\u6709\u51cf\u4e00\u7684\u90e8\u5206\uff0c\u5fc5\u5b9a\u5c31\u662f\u4e0d\u8fde\u7eed\u7684\u90e8\u5206\u4e86\u3002\n\n\u53ef\u80fd\u5b58\u5728\u4e00\u79cd\u60c5\u51b5\uff0c\u5bf9\u4e8e\u4e00\u6bb5\uff0c\u4e0a\u9762\u662f\u8fde\u7eed\u7684\uff0c\u4e0b\u9762\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u662f\u4e2d\u95f4\u6ca1\u6709\u51cf\u6389\uff0c\u5bfc\u81f4\u4e0a\u9762\u5408\u6cd5\uff0c\u4e0b\u9762\u5408\u6cd5\uff0c\u4e2d\u95f4\u4e0d\u5408\u6cd5\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u5c31\u80fd\u7edf\u8ba1\u4e0a\u4e0a\u9762\u7684\u548c\u4e0b\u9762\u7684\uff0c\u800c\u4e0d\u4f1a\u591a\u7edf\u8ba1\u4e2d\u95f4\u7684\u3002\n\n\u7531\u4e8e\u6bcf\u4e00\u884c\u90fd\u81f3\u5c11\u51fa\u73b0\u4e00\u4e2a\uff0c\u6240\u4ee5\u591a\u52a0\u7684 $1$ \u6700\u540e\u4e00\u5b9a\u4f1a\u51cf\u6389\uff0c\u5e76\u4e14\u7531\u4e8e\u4e0a\u9762\u7684\u9650\u5236\uff08\u4e0d\u5c0f\u4e8e $0$\uff09\u6240\u4ee5\u4e0d\u4f1a\u51cf\u6210\u8d1f\u6570\u3002\n\n\u4e3a\u4ec0\u4e48\u4e0d\u4f1a\u7edf\u8ba1\u4e0a\u9762\u7684\u90e8\u5206\u5462?\n\n\u7531\u4e8e\u6211\u4eec\u4e00\u5f00\u59cb\u662f \u4ece $1$ \u5230 $i-1$ \u7edf\u4e00\u52a0 $1$ \uff0c\u6240\u4ee5\u5148\u52a0\u518d\u51cf\uff0c\u53ea\u6709\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u7b2c\u4e00\u6b21\u80fd\u7edf\u8ba1\u624d\u4f1a\u7edf\u8ba1\u4ed6\u81ea\u5df1\uff0c\u540e\u9762\u7edf\u8ba1\u7684\u5c31\u662f\u5bf9\u4e8e\u5f53\u524d\u53f3\u7aef\u70b9\u7684\u8d21\u732e\u4e86\u3002\n\n\u5173\u4e8e\u6709\u7684\u70b9\u6709\u52a0\u6709\u51cf\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u4f1a\u91cd\u590d\u7edf\u8ba1\u8d21\u732e\uff1a\n\n\u867d\u7136\u6709\u7684\u70b9\u6709\u52a0\u6709\u51cf\u5e76\u4e14\u53ef\u80fd\u6709\u7684\u533a\u95f4\u7684 $cnt$ \u4e0d\u4f1a\u6539\u53d8\u3002\n\n\u4f46\u662f\u5bf9\u4e8e\u6574\u4e2a\u8981\u67e5\u8be2\u7684\u5927\u533a\u95f4\uff0c\u53ef\u80fd\u53d1\u751f\u6700\u5c0f\u503c\u7684\u53d8\u5316\uff0c\u6240\u4ee5 $cnt$ \u4f1a\u6709\u53d8\u5316\uff0c\n\n\u5bf9\u4e8e\u5f53\u524d\u5c0f\u533a\u95f4\u7684 $cnt$ \u3002\u7531\u4e8e\u6211\u4eec\u4e4b\u524d\u7edf\u8ba1\u4ed6\u7684\u65f6\u5019\u67e5\u8be2\u7684\u80af\u5b9a\u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u533a\u95f4\uff0c\u6bd4\u5982 $(1,2)$ \u8fd9\u79cd\u5f88\u5c0f\u7684\u3002\n\n\u4f46\u662f\u5bf9\u4e8e\u5927\u7684\uff0c\u4ed6\u4e0d\u4f1a\u4f5c\u4e3a\u4e00\u4e2a\u5c0f\u533a\u95f4\u4ea7\u751f\u8d21\u732e\u4e86\uff0c\u4ed6\u7684 $cnt$ \u4e00\u5b9a\u8981\u4e0a\u4f20\uff0c\u7ecf\u8fc7\u5408\u5e76\u4ee5\u540e\u4f5c\u4e3a\u5927\u533a\u95f4\u7684\u67d0\u4e00\u90e8\u5206\u4e00\u8d77\u8d21\u732e\uff0c\u6240\u4ee5\u5c0f\u7684\u4e0d\u4f1a\u91cd\u590d\u7b97\u3002\n\n\u4e0d\u91cd\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u90fd\u80fd\u7edf\u8ba1\u4e0a:\n\n\u5f53\u4ed6\u7b49\u4e8e $0$ \u7684\u65f6\u5019\uff0c\u7b49\u4ef7\u4e8e\u5b83\u6ee1\u8db3\u6761\u4ef6\uff0c\u5e76\u4e14\u8fde\u7eed\uff08\u6709\u591a\u65b9\u9762\u786e\u5b9a\uff09\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e00\u5b9a\u88ab\u7edf\u8ba1\u5230\u3002\n\n\u4e0d\u6f0f\u3002\n\n\u81f3\u6b64\uff0c\u505a\u6cd5\u5c31\u662f\u8fd9\u6837\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u7ed9\u503c\u52a0\u4e2a\u4ec0\u4e48\u503c\u8ba9\u4ed6\u4e0d\u662f $0$\uff0c\u53ef\u80fd\u6bd4\u8f83\u65b9\u4fbf\u8c03\u8bd5\u4e0e\u5224\u65ad\u3002",
        "postTime": 1629709076,
        "uid": 375208,
        "name": "LawrenceSivan",
        "ccfLevel": 0,
        "title": "CF526F Pudding Monsters"
    },
    {
        "content": "## \u5206\u6790\n\u7528\u7ebf\u6bb5\u6811\u5373\u53ef\u89e3\u51b3\n\n\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u8981\u6ee1\u8db3 $k\u00d7k(1\u2264k\u2264N)$ \u7684\u5b50\u7f51\u683c\u56fe\u5305\u542b\u6070\u597d $k$ \u652f\u519b\u961f\n\n\u90a3\u4e48\u8fd9 $k$ \u53ea\u519b\u961f\u7684\u6700\u5927\u6a2a\u5750\u6807\u51cf\u53bb\u6700\u5c0f\u6a2a\u5750\u6807\u6070\u597d\u7b49\u4e8e\u8fd9 $k$ \u53ea\u519b\u961f\u7684\u6700\u5927\u7eb5\u5750\u6807\u51cf\u6700\u5c0f\u7eb5\u5750\u6807\n\n\u4e24\u7ef4\u4e0d\u597d\u5904\u7406\uff0c\u56e0\u6b64\u6211\u4eec\u628a\u6a2a\u5750\u6807\u4f5c\u4e3a\u4e0b\u6807\uff0c\u7eb5\u5750\u6807\u4f5c\u4e3a\u6743\u503c\n\n\u8fd9\u6837\u539f\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5728\u4e00\u4e2a\u6392\u5217\u4e2d\u6709\u591a\u5c11\u533a\u95f4\u5185\u7684\u6570\u662f\u8fde\u7eed\u7684\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\n\n\u6211\u4eec\u628a\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u5b9a\u4e49\u4e3a\u4ee5\u67d0\u4e2a\u70b9\u4e3a\u5de6\u7aef\u70b9\uff0c\u4ee5\u626b\u5230\u7684\u70b9\u4e3a\u53f3\u7aef\u70b9\u7684\u533a\u95f4\u4e2d\u8fde\u7eed\u533a\u95f4\u7684\u4e2a\u6570\n\n\u7ebf\u6bb5\u6811\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u6709\u8fde\u7eed\u533a\u95f4\u4e2a\u6570\u7684\u6700\u5c0f\u503c\uff0c\u8be5\u6700\u5c0f\u503c\u7684\u4e2a\u6570\uff0c\u4ee5\u53ca\u533a\u95f4\u52a0\u548c\u64cd\u4f5c\u4e2d\u7684 $lazy$ \u6807\u8bb0\n\n\u6bcf\u6b21\u4ece\u53f3\u8fb9\u65b0\u52a0\u5165\u4e00\u4e2a\u70b9 $i$ \u65f6\uff0c\u6211\u4eec\u628a\u533a\u95f4 $[1,i]$ \u6574\u4f53\u52a0 $1$\n\n\u4ee3\u8868\u6b64\u65f6\u53c8\u591a\u4e86\u4e00\u4e2a\u4e0d\u8fde\u7eed\u7684\u533a\u95f4\n\n\u6b64\u65f6\u6211\u4eec\u53bb\u627e $a[i]+1$ \u548c $a[i]-1$ \u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u5b83\u4eec\u7684\u4f4d\u7f6e\u5728 $i$ \u7684\u5de6\u8fb9\uff0c\u6211\u4eec\u5c31\u628a $[1,wz[a[i]-1]]$ \u6216\u8005 $[1,wz[a[i]+1]]$ \u6574\u4f53\u51cf\u4e00\uff0c\u4ee3\u8868\u5305\u542b $a[i]+1$ \u6216\u8005 $a[i]-1$ \u7684\u533a\u95f4\u53ef\u4ee5\u4e0e $a[i]$ \u5408\u5e76\u5f62\u6210\u4e00\u4e2a\u5927\u533a\u95f4\n\n\u6bcf\u6b21\u679a\u4e3e\u4e00\u4e2a\u53f3\u7aef\u70b9\u65f6\u5c31\u5355\u72ec\u8ba1\u7b97\u4e00\u4e0b\u4ef7\u503c\n\n## \u4ee3\u7801\n``` cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\nconst int maxn=1e6+5;\ninline int read(){\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0' || ch>'9'){\n\t\tif(ch=='-') f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0' && ch<='9'){\n\t\tx=(x<<1)+(x<<3)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\nint a[maxn],n,wz[maxn];\nstruct asd{\n\tint l,r,min,cnt,laz;\n}tr[maxn<<1];\nvoid push_up(int da){\n\tif(tr[da<<1].min==tr[da<<1|1].min){\n\t\ttr[da].min=tr[da<<1].min;\n\t\ttr[da].cnt=tr[da<<1].cnt+tr[da<<1|1].cnt;\n\t} else if(tr[da<<1].min<tr[da<<1|1].min){\n\t\ttr[da].min=tr[da<<1].min;\n\t\ttr[da].cnt=tr[da<<1].cnt;\n\t} else {\n\t\ttr[da].min=tr[da<<1|1].min;\n\t\ttr[da].cnt=tr[da<<1|1].cnt;\n\t}\n}\nvoid push_down(int da){\n\tif(tr[da].laz==0) return;\n\ttr[da<<1].min+=tr[da].laz;\n\ttr[da<<1|1].min+=tr[da].laz;\n\ttr[da<<1].laz+=tr[da].laz;\n\ttr[da<<1|1].laz+=tr[da].laz;\n\ttr[da].laz=0;\n}\nvoid build(int da,int l,int r){\n\ttr[da].l=l,tr[da].r=r;\n\tif(l==r){\n\t\ttr[da].min=1;\n\t\ttr[da].cnt=1;\n\t\treturn;\n\t}\n\tint mids=(l+r)>>1;\n\tbuild(da<<1,l,mids);\n\tbuild(da<<1|1,mids+1,r);\n\tpush_up(da);\n}\nint cx(int da,int l,int r){\n\tif(tr[da].l>=l && tr[da].r<=r){\n\t\tif(tr[da].min==1) return tr[da].cnt;\n\t\treturn 0;\n\t}\n\tpush_down(da);\n\tint mids=(tr[da].l+tr[da].r)>>1;\n\tint ans=0;\n\tif(l<=mids) ans+=cx(da<<1,l,r); \n\tif(r>mids) ans+=cx(da<<1|1,l,r);\n\treturn ans;\n}\nvoid xg(int da,int l,int r,int val){\n\tif(tr[da].l>=l && tr[da].r<=r){\n\t\ttr[da].min+=val;\n\t\ttr[da].laz+=val;\n\t\treturn;\n\t}\n\tpush_down(da);\n\tint mids=(tr[da].l+tr[da].r)>>1;\n\tif(l<=mids) xg(da<<1,l,r,val);\n\tif(r>mids) xg(da<<1|1,l,r,val);\n\tpush_up(da);\n}\nint main(){\n\tn=read();\n\tfor(int i=1;i<=n;i++){\n\t\tint aa,bb;\n\t\taa=read(),bb=read();\n\t\ta[aa]=bb;\n\t\twz[a[aa]]=aa;\n\t}\n\tbuild(1,1,n);\n\tlong long ans=0;\t\n\tfor(int i=1;i<=n;i++){\n\t\tif(i>1) xg(1,1,i-1,1);\n\t\tif(wz[a[i]-1]<=i && wz[a[i]-1]){\n\t\t\txg(1,1,wz[a[i]-1],-1);\n\t\t}\n\t\tif(wz[a[i]+1]<=i && wz[a[i]+1]){\n\t\t\txg(1,1,wz[a[i]+1],-1);\n\t\t}\n\t\tans+=(long long)cx(1,1,i);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1598499651,
        "uid": 316322,
        "name": "hzoi_liuchang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF526F \u3010Pudding Monsters\u3011"
    },
    {
        "content": "### [\u9898\u76ee](https://www.luogu.com.cn/problem/CF526F)\u7b80\u8ff0\uff1a\n\n\u4e00\u4e2a $n \\times n$ \u7684\u68cb\u76d8\u4e0a\u9762\u6709 $n$ \u4e2a\u68cb\u5b50\uff0c\u6bcf\u884c\u6bcf\u5217\u6070\u597d\u6709\u4e00\u4e2a\u68cb\u5b50\uff0c\u7ed9\u5b9a\u68cb\u5b50\u7684\u4f4d\u7f6e\uff0c\u6c42\u6709\u591a\u5c11\u4e2a $k \\times k$ \u7684\u5b50\u68cb\u76d8\u4e0a\u6070\u597d\u6709 $k$ \u4e2a\u68cb\u5b50\u3002$n \u2264 3 \\times 10^{5}$\u3002 \n\n### \u601d\u8def\uff1a\n\n\u9650\u5236\u662f\u89e3\u51b3\u9898\u76ee\u7684\u7a81\u7834\u53e3\uff0c\u300c\u6bcf\u884c\u6bcf\u5217\u6070\u597d\u6709\u4e00\u4e2a\u68cb\u5b50\u300d\u5c31\u662f\u8fd9\u9053\u9898\u4e2d\u5f88\u597d\u7684\u9650\u5236\u3002\u7531\u4e8e\u8fd9\u4e2a\u9650\u5236\u7684\u5b58\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6570\u5217 $|a_{n}|$\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 $(x,y)$ \u547d $a_{x}=y$\u3002\u8fd9\u6837\u5c31\u5c06\u539f\u9898\u4e2d\u4e8c\u7ef4\u7a7a\u95f4\u7684\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u4e00\u7ef4\u7a7a\u95f4\u4e2d\u7684\u95ee\u9898\uff1a\u300c $|a_{n}|$ \u4e2d\u6709\u591a\u5c11\u4e2a\u533a\u95f4\u4e2d\u7684\u6570\u5b57\u662f\u8fde\u7eed\u7684\u300d\u6216\u8005\u8bf4\u300c $|a_{n}|$ \u4e2d\u6709\u591a\u5c11\u4e2a\u533a\u95f4\uff0c\u6ee1\u8db3 $max-min = r-l$ \u300d\u3002\n\n\u8bb0\u4e00\u4e2a\u533a\u95f4\u7684\u4e2d\u70b9\u4e3a $mid$\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u5206\u6210\u4e09\u90e8\u5206\uff1a$mid$ \u5de6\u8fb9\uff0c$mid$ \u53f3\u8fb9\uff0c\u548c\u8de8\u8d8a $mid$\u3002\u524d\u4e24\u4e2a\u662f\u533a\u95f4\u4ece\u4e2d\u95f4\u5288\u5f00\u6240\u4ea7\u751f\u7684\u5b50\u95ee\u9898\uff0c\u53ef\u4ee5\u9012\u5f52\u89e3\u51b3\uff0c\u6211\u4eec\u7740\u91cd\u8003\u8651\u4e00\u4e0b\u7b2c\u4e09\u90e8\u5206\u3002\n\n\u9884\u5904\u7406\u4e24\u4e2a\u6570\u7ec4 $mx[\\ i\\ ]$ \u548c $mn[\\ i\\ ]$\uff0c\u5206\u522b\u8868\u793a $mid$ \u5230 $i$ \u8fd9\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\u5bf9\u4e8e\u521a\u624d\u63d0\u5230\u7684\u7b2c\u4e09\u90e8\u5206\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u5c06\u5b83\u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff1a\u300c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u5728 $mid$ \u7684\u540c\u4e00\u4fa7\u300d\u548c\u300c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u5728 $mid$ \u7684\u4e24\u4fa7\u300d\u3002\n\n\u5982\u679c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u5728\u540c\u4e00\u4fa7 (\u4e0d\u59a8\u8bbe\u90fd\u5728\u5de6\u4fa7) \uff0c\u6b64\u65f6\u6574\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u90fd\u662f\u5de6\u4fa7\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\u6839\u636e\u9898\u610f\uff0c\u5408\u6cd5\u7684\u533a\u95f4\u6ee1\u8db3 $mx[i]-mn[i]=j-i$\uff0c\u79fb\u9879\u53ef\u5f97 $j=i+mx[i]-mn[i]$\u3002\u6b64\u65f6\u6211\u4eec\u53d1\u73b0 $j$ \u53ea\u4e0e $i$ \u4ee5\u53ca $i$ \u90a3\u4e00\u4fa7\u7684\u6700\u503c\u6709\u5173\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u679a\u4e3e $i$ \u5c31\u53ef\u4ee5\u786e\u5b9a\u53ef\u4ee5\u548c\u4ed6\u6784\u6210\u5408\u6cd5\u533a\u95f4\u7684 $j$\u3002\u5f53\u7136\u6700\u503c\u90fd\u5728\u53f3\u4fa7\u540c\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 $i=j-mx[j]+mn[j]$\u3002\n\n```cpp\n// If the max and min value are both on the left:\n    for(int i = mid; i>=l; i--){\n        int j = mx[i] - mn[i] + i;\n        if(j <= r && j > mid && mx[i] > mx[j] && mn[i] < mn[j]) ans++;\n    }\n```\n\n\u5982\u679c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u5728\u4e24\u4fa7 (\u4e0d\u59a8\u8bbe\u6700\u5c0f\u503c\u5728\u5de6\u4fa7\uff0c\u6700\u5927\u503c\u5728\u53f3\u4fa7)\uff0c\u6839\u636e\u9898\u610f\uff0c\u5408\u6cd5\u7684\u533a\u95f4\u6ee1\u8db3 $mx[j]-mn[i]=j-i$\uff0c\u79fb\u9879\u5f97 $mn[i]-i=mx[j]-j$\u3002\u95ee\u9898\u53d8\u5f97\u68d8\u624b\u8d77\u6765\u4e86\uff1a\u4e0a\u9762\u7684\u5206\u6790\u7684\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u5f53 $i$ \u786e\u5b9a\u65f6\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u51fa\u4e00\u4e2a $j$ \u662f\u4f7f\u7b49\u5f0f\u6210\u7acb\uff0c\u4f46\u662f\u8fd9\u91cc\u5f53 $i$ \u786e\u5b9a\u65f6\u53f3\u8fb9\u7684 $j$ \u8fd8\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u5373\u6bcf\u6b21\u626b\u63cf\u4e00\u4e2a $j$\uff0c$mx[j]$ \u90fd\u4f1a\u53d8\u3002\u770b\u4e0a\u53bb\u53ea\u80fd\u66b4\u529b $O(n^{2})$ \u679a\u4e3e\u5de6\u53f3\u7aef\u70b9\uff0c\u5176\u5b9e\u4e0d\u7136\u3002\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684 $i$\uff0c\u82e5\u5728\u67d0\u4e00\u65f6\u523b\u51fa\u73b0 $mn[j]<mn[i]$ \u7684\u60c5\u51b5 (\u4e0d\u6ee1\u8db3\u9898\u610f)\uff0c\u5219\u65e0\u8bba $j$ \u518d\u600e\u4e48\u626b\u63cf\uff0c\u5bf9\u4e8e\u626b\u63cf\u5230\u7684\u65b0\u70b9 $j'$ \u4e00\u5b9a\u6709 $mn[j]\u2019<mn[j]<mn[i]$\uff0c\u5373\u4e4b\u540e\u7684\u65b9\u6848\u4e00\u5b9a\u4e0d\u5408\u6cd5\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u6ca1\u6709\u7ee7\u7eed\u679a\u4e3e\u4e0b\u53bb\u7684\u5fc5\u8981\u4e86\uff0c\u53ea\u8981\u5728\u7b2c\u4e00\u6b21\u51fa\u73b0\u4e0d\u5408\u6cd5\u65b9\u6848\u7684\u65f6\u5019\u53ca\u65f6\u8df3\u51fa\u5c31\u53ef\u4ee5\u4e86\u3002\u5bf9\u4e8e\u56fa\u5b9a\u7684 $j$ \u4e5f\u662f\u4e00\u6837\uff0c\u82e5\u67d0\u4e00\u65f6\u523b\u51fa\u73b0 $mx[i]>mx[j]$\uff0c\u5219\u4e4b\u540e\u7684\u65b9\u6848\u4e00\u5b9a\u4e0d\u5408\u6cd5\u3002\n\n\u5177\u4f53\u8be5\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7b26\u5408\u9898\u610f\u65f6\u7b49\u5f0f\u4e24\u8fb9\u76f8\u7b49\u7684\u90a3\u4e2a\u503c\u5f00\u4e00\u4e2a\u6876\uff0c\u867d\u7136\u90a3\u4e2a\u503c\u662f $|a_{n}|$ \u6570\u5217\u4e0a\u7684\u4f4d\u7f6e\u52a0\u4e0a (\u6216\u51cf\u53bb) \u503c\uff0c\u4f46\u662f\u7531\u4e8e\u4f4d\u7f6e\u548c\u503c\u90fd\u662f $[1,n]$ \u8303\u56f4\u5185\u7684\uff0c\u6240\u4ee5\u6876\u7684\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7 $2n$\u3002\u5b9a\u4e49\u4e09\u4e2a\u6307\u9488 $i,j,k$\uff0c\u5176\u4e2d $i$ \u662f\u5de6\u8fb9\u7684\u4f4d\u7f6e\uff0c$j$ \u548c $k$ \u662f\u53f3\u8fb9\u7684\u4f4d\u7f6e\u3002\u82e5\u679a\u4e3e\u5230\u4e00\u4e2a $j$ \u6709$mn[j]>mn[i]$ (\u4e0d\u6ee1\u8db3 $mn[j]<mn[i]$ \u7684\u7ea6\u675f\u6761\u4ef6\u4e86)\uff0c\u5c31\u8ba9 $bucket[mx[j]-j+n]++$\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u52a0\u4e0a $n$ \u662f\u4e3a\u4e86\u9632\u6b62\u51fa\u73b0\u8d1f\u7684\u4e0b\u6807\uff0c\u7531\u4e8e\u6240\u6709\u51cf\u53bb\u7684\u60c5\u51b5\u90fd\u52a0\u4e0a\u4e86 $n$\uff0c\u6240\u4ee5\u5728\u4fee\u6539\u7b54\u6848\u7684\u65f6\u5019\u662f\u4e0d\u4f1a\u6709\u5f71\u54cd\u7684\u3002$k$ \u6307\u9488\u7684\u4f5c\u7528\u662f\u4e3a\u4e86\u6ee1\u8db3\u53e6\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6 $mx[j]>mx[i]$\u3002\u5982\u679c\u67d0\u4e00\u65f6\u523b\u6709 $mx[k]<mx[i]$\uff0c\u90a3\u4e48\u5373\u4f7f\u8fd9\u4e2a\u4f4d\u7f6e\u7684 $j$ \u4f7f\u5f97 $mn[j]<mn[i]$\uff0c\u4e5f\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u6848\u3002\u4f7f\u7528 $j$ \u6307\u9488\u66f4\u65b0\u7b54\u6848\u7684\u65f6\u5019\u6211\u4eec\u5e76\u6ca1\u6709\u8003\u8651\u53e6\u4e00\u4e2a\u6761\u4ef6\uff0c\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u8981\u628a\u53ea\u6ee1\u8db3\u4e00\u4e2a\u6761\u4ef6\u800c\u4e0d\u6ee1\u8db3\u53e6\u4e00\u4e2a\u6761\u4ef6\u7684\u65b9\u6848\u51cf\u6389\uff0c\u5373\u8ba9 $bucket[mx[k]-k+n]--$\u3002\n\n```cpp\n// If the min value is on the left while the max value is on the right:\n    // We should have \"mn[i] - i == mx[j] - j\" now.\n    j = k = mid+1;\n    for(i = mid; i>=l; i--){\n        while(j <= r && mn[j] > mn[i]){\n            bucket[mx[j]-j+n]++;\n            j++;\n        }\n        // Why do we stop once mn[j] is not greater than mn[i]?\n        // Because in this condition, mn[j] have been in the right part of segment, so the mn[j] will always less than mn[i].\n        while(k < j && mx[k] < mx[i]){\n            bucket[mx[k]-k+n]--;// By the way we'd better plus n to prevent mx[k]-k from being negative.\n            k++;\n        }\n        ans += bucket[mn[i]-i+n];\n    }\n    // Clear bucket.\n    while(k < j){\n        bucket[mx[k]-k+n]--;\n        k++;\n    }\n```\n\n\u4e0a\u9762\u53ea\u5206\u6790\u4e86\u6700\u5c0f\u503c\u5728\u5de6\u4fa7\u6700\u5927\u503c\u5728\u53f3\u4fa7\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u7ffb\u8fc7\u6765\u4e5f\u662f\u4e00\u6837\u7684\u3002\u8bb0\u5f97\u53ca\u65f6\u66f4\u65b0 $ans$ \u5e76\u6e05\u7a7a\u6876\u3002\n\n### Code\uff1a\n\n```cpp\n//AC?\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<climits>\n#include<utility>\n#define int long long\nusing namespace std;\nconst int MaxN = 300005;\nint n, a[MaxN];\nint mn[MaxN], mx[MaxN], bucket[MaxN*2], ans;\n\ninline int Read(){\n    int num = 0, op = 1;\n    char ch = getchar();\n    while(!isdigit(ch)){\n        if(ch == '-') op = -1;\n        ch = getchar();\n    }\n    while(isdigit(ch)){\n        num = num * 10 + ch - '0';\n        ch = getchar();\n    }\n    return num * op;\n}\n\ninline void Divide_and_Conquer(int l, int r){\n    if(l == r) return (void)ans++;\n    int mid = (l+r)/2;\n    Divide_and_Conquer(l, mid);\n    Divide_and_Conquer(mid+1, r);\n    mx[mid] = mn[mid] = a[mid];\n    mx[mid+1] = mn[mid+1] = a[mid+1];\n    int i, j, k;\n    // Initiate part: calcutale max and min value from middle to the two border.\n    for(i = mid-1; i>=l; i--){\n        mx[i] = max(mx[i+1], a[i]);\n        mn[i] = min(mn[i+1], a[i]);\n    }\n    for(j = mid+2; j<=r; j++){\n        mx[j] = max(mx[j-1], a[j]);\n        mn[j] = min(mn[j-1], a[j]);\n    }\n    // If the max and min value are both on the left:\n    for(i = mid; i>=l; i--){\n        j = mx[i] - mn[i] + i;\n        if(j <= r && j > mid && mx[i] > mx[j] && mn[i] < mn[j]) ans++;\n    }\n    // If the max and min value are both on the right:\n    for(j = mid+1; j<=r; j++){\n        i = j - mx[j] + mn[j];\n        if(i <= mid && i >= l && mx[j] > mx[i] && mn[j] < mn[i]) ans++;\n    }\n    // If the min value is on the left while the max value is on the right:\n    // We should have \"mn[i] - i == mx[j] - j\" now.\n    j = k = mid+1;\n    for(i = mid; i>=l; i--){\n        while(j <= r && mn[j] > mn[i]){\n            bucket[mx[j]-j+n]++;\n            j++;\n        }\n        // Why do we stop once mn[j] is not greater than mn[i]?\n        // Because in this condition, mn[j] have been in the right part of segment, so the mn[j] will always less than mn[i].\n        while(k < j && mx[k] < mx[i]){\n            bucket[mx[k]-k+n]--;// By the way we'd better plus n to prevent mx[k]-k from being negative.\n            k++;\n        }\n        ans += bucket[mn[i]-i+n];\n    }\n    // Reset bucket, j and k.\n    while(k < j){\n        bucket[mx[k]-k+n]--;\n        k++;\n    }\n    i = k = mid;\n    // If the min value is on the right while the max value is on the left:\n    // We should have \"mx[i] - i == mn[j] - j\" now.\n    for(j = mid+1; j<=r; j++){\n        while(i >= l && mn[i] > mn[j]){\n            bucket[mx[i]+i]++;\n            i--;\n        }\n        while(k > i && mx[k] < mx[j]){\n            bucket[mx[k]+k]--;\n            k--;\n        }\n        ans += bucket[mn[j]+j];\n    }\n    // Reset again.\n    while(k > i){\n        bucket[mx[k]+k]--;\n        k--;\n    }\n}\n\nsigned main(){\n    n = Read();\n    for(int i=1; i<=n; i++){\n        int u = Read(), v = Read();\n        a[u] = v;\n    }\n    Divide_and_Conquer(1, n);\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1595895979,
        "uid": 235832,
        "name": "potatoler",
        "ccfLevel": 4,
        "title": "CF526F Pudding Monsters"
    },
    {
        "content": "\u597d\u9898\u3002\n\n\u9996\u5148\u628a\u5b83\u62cd\u6241\u5230\u4e00\u4e2a\u5e8f\u5217\u4e0a\u5e94\u8be5\u4e0d\u96be\u60f3\u5230\uff0c\u7136\u540e\u5c31\u662f\u6c42\u6ee1\u8db3 $\\max[l,r]-\\min[l,r]=r-l$ \u7684 $[l,r]$ \u4e2a\u6570\uff0c\u5176\u4e2d $\\max[l,r]$ \u8868\u793a\u533a\u95f4\u4e2d\u7684\u6700\u5927\u503c\u3002\n\n\u5957\u8def\u5730\u679a\u4e3e $r$\u3002\n\n\u6211\u4eec\u5c1d\u8bd5\u7ef4\u62a4 $\\max[l,r]-\\min[l,r]+l$\uff0c\u7136\u540e\u6211\u4eec\u9700\u8981\u652f\u6301\u6709\u591a\u5c11\u4e2a\u8fd9\u4e2a\u5f0f\u5b50\u7b49\u4e8e $r$\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u4f60\u53ef\u4ee5\u79d2\u51fa\u4e00\u4e2a\u7b97\u6cd5\uff1a\u7528\u6811\u72b6\u6570\u7ec4\u53bb\u7ef4\u62a4\u5dee\u5206\uff0c\u5f00\u4e24\u4e2a\u5355\u8c03\u6808\uff0c\u7136\u540e\u9000\u6808\u5c31\u505a\u4e00\u4e2a\u533a\u95f4\u4fee\u6539\u2026\u2026\n\n\u7136\u540e\u5c31\u5047\u6389\u4e86\uff0c\u56e0\u4e3a\u9000\u6808\u7684\u65f6\u5019\u6709\u53ef\u80fd\u5f97\u904d\u5386\u4e00\u904d\u53e6\u4e00\u4e2a\u6808\uff0c\u590d\u6742\u5ea6\u76f4\u63a5\u88ab\u5361\u6210\u5e73\u65b9\u5e26\u4e00\u4e2a log ~~\u6bd4\u66b4\u529b\u8fd8\u52a3~~\u3002\n\n\u65e2\u7136\u4e0d\u80fd\u76f4\u63a5\u7ef4\u62a4\u51fa\u73b0\u6b21\u6570\uff0c\u6211\u4eec\u4e0d\u59a8\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u5728 $[1,r]$ \u4e2d\u6709\u591a\u5c11\u4e2a $l$ \u6ee1\u8db3 $\\max[l,r]-\\min[l,r]+l=r$\uff0c\u5229\u7528\u5355\u8c03\u6808\uff0c\u6211\u4eec\u9700\u8981\u7684\u5c31\u662f\u533a\u95f4\u52a0\u548c\u6539\u53d8\u7b49\u5f0f\u7684\u53f3\u8fb9\u2026\u2026\n\n\u7136\u540e\u5c31\u53c8\u4e0d\u4f1a\u4e86\u3002\n\n\u5176\u5b9e\u6211\u4eec\u8ddd\u79bb\u6b63\u89e3\u53ea\u6709\u4e00\u6b65\u4e4b\u9065\u3002\u6211\u4eec\u53d1\u73b0 $\\max[l,r]-\\min[l,r]\\ge r-l$\uff0c\u6240\u4ee5\u6211\u4eec\u7ef4\u62a4 $\\max[l,r]-\\min[l,r]+l$ \u7684\u6700\u5c0f\u503c\u53ca\u51fa\u73b0\u6b21\u6570\u5373\u53ef\u3002\n\ncode\uff1a\n```cpp\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n    int x=0;\n    bool f=0;\n    char c=getchar();\n    while(!isdigit(c)&&c!='-') c=getchar();\n    if(c=='-'){\n        f=1;\n        c=getchar();\n    }\n\twhile(isdigit(c)){\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return f?-x:x;\n}\nconst int maxn=3e5+5;\nint n,a[maxn];\nstruct node{\n\tint l,r;\n\tnode* ch[2];\n\tint minv,cnt,addv;\n\tvoid pushup(){\n\t\tif(ch[0]->minv<ch[1]->minv){\n\t\t\tminv=ch[0]->minv;\n\t\t\tcnt=ch[0]->cnt;\n\t\t}\n\t\telse if(ch[0]->minv==ch[1]->minv){\n\t\t\tminv=ch[0]->minv;\n\t\t\tcnt=ch[0]->cnt+ch[1]->cnt;\n\t\t}\n\t\telse{\n\t\t\tminv=ch[1]->minv;\n\t\t\tcnt=ch[1]->cnt;\n\t\t}\n\t}\n\tnode(int l,int r):l(l),r(r),minv(l),cnt(1),addv(0){\n\t\tif(l<r){\n\t\t\tint mid=l+(r-l)/2;\n\t\t\tch[0]=new node(l,mid);\n\t\t\tch[1]=new node(mid+1,r);\n\t\t}\n\t\telse ch[0]=ch[1]=0;\n\t}\n\tvoid pushtag(int k){\n\t\taddv+=k;\n\t\tminv+=k;\n\t}\n\tvoid pushdown(){\n\t\tch[0]->pushtag(addv);\n\t\tch[1]->pushtag(addv);\n\t\taddv=0;\n\t}\n\tvoid modify(int ql,int qr,int k){\n\t\tif(ql==l&&qr==r) pushtag(k);\n\t\telse{\n\t\t\tpushdown();\n\t\t\tif(qr<=ch[0]->r) ch[0]->modify(ql,qr,k);\n\t\t\telse if(ql>=ch[1]->l) ch[1]->modify(ql,qr,k);\n\t\t\telse{\n\t\t\t\tch[0]->modify(ql,ch[0]->r,k);\n\t\t\t\tch[1]->modify(ch[1]->l,qr,k);\n\t\t\t}\n\t\t\tpushup();\n\t\t}\n\t}\n}*rt;\nint s1[maxn],top1=0,s2[maxn],top2=0;\nint main(){\n    #ifdef LOCAL\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    n=readint();\n    for(int i=0;i<n;i++){\n    \tint x=readint();\n    \ta[x]=readint();\n\t}\n\trt=new node(1,n);\n\tlong long ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\twhile(top1&&a[s1[top1]]>a[i]){\n\t\t\trt->modify(s1[top1-1]+1,s1[top1],a[s1[top1]]);\n\t\t\ttop1--;\n\t\t}\n\t\twhile(top2&&a[s2[top2]]<a[i]){\n\t\t\trt->modify(s2[top2-1]+1,s2[top2],-a[s2[top2]]);\n\t\t\ttop2--;\n\t\t}\n\t\trt->modify(s1[top1]+1,i,-a[i]);\n\t\trt->modify(s2[top2]+1,i,a[i]);\n\t\tif(rt->minv==i) ans+=rt->cnt;\n\t\ts1[++top1]=s2[++top2]=i;\n\t}\n\tprintf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1584756911,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF526F \u3010Pudding Monsters\u3011"
    },
    {
        "content": "# \u66f4\u597d\u9605\u8bfb\u4f53\u9a8c\n\n[My Blog](https://blog.csdn.net/init1064573673/article/details/116997668)\n\n# \u95ee\u9898\u63cf\u8ff0\n\u5728\u4e00\u4e2a $n \\times n$ \u7684\u77e9\u9635\u4e2d\uff0c\u6c42\u51fa\u6ee1\u8db3\u6709 $k$ \u4e2a\u68cb\u5b50\u7684 $k \\times k$ \u7684\u6b63\u65b9\u5f62\u7684\u4e2a\u6570\u3002\n# \u9898\u89e3\n\u56e0\u4e3a\u6bcf\u884c\u6bcf\u5217\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u68cb\u5b50\uff0c\u6240\u4ee5\u660e\u663e\u6211\u4eec\u53ef\u4ee5\u628a\u4e8c\n\u7ef4\u7684\u56fe\u6620\u5c04\u5230\u4e00\u4e2a\u5e8f\u5217\u4e0a\uff0c\u5c06\u4e8c\u7ef4\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u7ef4\u95ee\u9898\u3002\n\n\u884c\u53f7\u5bf9\u5e94\u6bcf\u4e2a\u68cb\u5b50\u5728\u5e8f\u5217\u4e0a\u7684\u4f4d\u7f6e\uff0c\u5217\u53f7\u5bf9\u5e94\u6bcf\u4e2a\u68cb\u5b50\u5728\u5e8f\u5217\u4e0a\u7684\u6743\u503c\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u8fd9 $n$ \u4e2a\u68cb\u5b50\u5c31\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a $1$~$n$ \u7684\u6392\u5217\u3002\u800c\u6211\u4eec\u8981\u6c42\u7684\u95ee\u9898\uff0c\u5c31\u8f6c\u5316\u4e3a\u4e86\u6ee1\u8db3 $max - min = R - L$ \u7684\u533a\u95f4 [L,R] \u7684\u4e2a\u6570\u4e3a\u591a\u5c11\u3002\n\n\u56e0\u4e3a $max,min$ \u5206\u522b\u5bf9\u5e94\u7740\u5217\u53f7\u7684\u6700\u5927\u6700\u5c0f\u503c\uff0c$R,L$ \u5206\u522b\u5bf9\u5e94\u7740\u884c\u53f7\u7684\u6700\u5927\u6700\u5c0f\u503c\u3002\u6ee1\u8db3\u4e0a\u8bc9\u6761\u4ef6\u7684\u533a\u95f4\u5c31\u4ee3\u8868\u4e00\u4e2a\u8fb9\u957f\u4e3a $R - L$\uff08\u6216\u8005 $max - min$\uff09\u7684\u6b63\u65b9\u5f62\u91cc\u6709 $R - L$\uff08\u6216\u8005 $max - min$\uff09\u4e2a\u68cb\u5b50\u3002\n\n\u6ce8\u610f\u6211\u4eec\u8981\u628a\u4e8c\u7ef4\u77e9\u9635\u4e2d\u5305\u542b\u7684\u6240\u6709\u6b63\u65b9\u5f62\u90fd\u7edf\u8ba1\u5b8c\uff0c\u800c\u5b83\u4eec\u5728\u5e8f\u5217\u4e0a\u5206\u522b\u5bf9\u5e94\u7740\u533a\u95f4 [1,1],[1,2]\u2026[1,n]\u2026[n,1],[n,2]\u2026[n,n]\u3002\n\n\u5c1d\u8bd5\u7528\u7ebf\u6bb5\u6811 + \u626b\u63cf\u7ebf\u7ef4\u62a4\u3002\n\n\u5c06\u4e0a\u8ff0\u7b49\u5f0f\u79fb\u9879\uff0c\u8bb0 $Min = max - min - R + L$\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a $1$ ~ $n$ \u7684\u6392\u5217\uff0c\u6839\u636e\u9e3d\u5de2\u539f\u7406\uff0c\u663e\u7136\u6709$max - min \\geq R - L$\uff0c\u6240\u4ee5\u6709\uff1a $Min\\geq 0$\uff0c\u90a3\u4e48\u663e\u7136\u6ee1\u8db3\u6761\u4ef6\u7684\u5e8f\u5217\u7684 $Min$ \u503c\u4e3a $0$\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u7528\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4 $Min$\u5c31\u597d\u4e86\uff0c\u56e0\u4e3a\u8fd8\u8981\u6c42\u4e2a\u6570\uff0c\u6240\u4ee5\u518d\u7ef4\u62a4\u503c\u4e3a $Min$ \u7684\u4e2a\u6570\u3002\n\n\u5f53\u626b\u63cf\u5230 $R$ \u65f6\uff0c\u7ebf\u6bb5\u6811\u4e0a\u7684\u5355\u4f4d\u8282\u70b9 [l,r] \u50a8\u5b58\u533a\u95f4 [l,R],[l + 1,R]\u2026[r,R] \u5bf9\u5e94\u7684 $Min$ \u7684\u503c\uff0c\u548c\u503c\u4e3a $Min$ \u7684\u533a\u95f4\u7684\u4e2a\u6570\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e0b\u8ff0\u7684\u57fa\u672c\u6846\u67b6\uff0c\u7ebf\u6bb5\u6811\u7684\u7ec6\u8282\u89c1\u4ee3\u7801\uff1a\n* \u5f53\u6bcf\u6b21 $R+1$ \u540e\uff0c$Min$ \u7684\u503c\u663e\u7136\u4f1a\u51cf\u4e00\uff0c\u533a\u95f4\u4fee\u6539\u3002\n* \u5bf9\u4e8e $max,min$ \u7684\u7ef4\u62a4\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e24\u4e2a\u5355\u8c03\u6808\u3002\n* \u6bcf\u6b21\u5355\u8c03\u6808\u7684\u6808\u9876\u5143\u7d20\u66f4\u65b0\u65f6\uff0c\u663e\u7136\u5bf9\u4e8e $sta_{top - 1}$ ~ $sta_{top}$\uff08\u8fd8\u672a\u66f4\u65b0\uff09\u5bf9\u5e94\u7684\u5e8f\u5217\u7684\u4f4d\u7f6e\u7684 $Min$ \u503c\u90fd\u56e0\u4e3a $max$ \u6216 $min$ \u7684\u503c\u7684\u6539\u53d8\u800c\u53d7\u5230\u4e86\u5f71\u54cd\u9700\u8981\u6539\u53d8\uff0c\u518d\u6b21\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u3002\n* \u6bcf\u6b21\u7ef4\u62a4\u7ed3\u675f\u540e\u518d\u533a\u95f4\u67e5\u8be2\u4e00\u6b21\u7d2f\u52a0\u5165\u7b54\u6848\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N = 3e5 + 5;\n\nstruct SegmentTree {\n\t#define M N << 2\n\tint l[M],r[M],Min[M],tag[M];\n\tlong long cnt[M];\n\tvoid build(int p,int lf,int rg) {\n\t\tl[p] = lf,r[p] = rg;\n\t\tif(lf == rg) {\n\t\t\tMin[p] = lf; cnt[p] = 1;\n\t\t\treturn;\n\t\t}\n\t\tint mid = (lf + rg) >> 1;\n\t\tbuild(p << 1,lf,mid);\n\t\tbuild(p << 1 | 1,mid + 1,rg);\n\t\tMin[p] = Min[p << 1];\n\t}\n\tinline void pushdown(int p) {\n\t\tif(!tag[p]) return;\n\t\tMin[p << 1] += tag[p];\n\t\tMin[p << 1 | 1] += tag[p];\n\t\ttag[p << 1] += tag[p];\n\t\ttag[p << 1 | 1] += tag[p];\n\t\ttag[p] = 0;\n\t}\n\tinline void pushup(int p) {\n\t\tMin[p] = min(Min[p << 1],Min[p << 1 | 1]); cnt[p] = 0;\n\t\tif(Min[p] == Min[p << 1]) cnt[p] +=\tcnt[p << 1];\n\t\tif(Min[p] == Min[p << 1 | 1]) cnt[p] += cnt[p << 1 | 1];\n\t}\n\tvoid add(int p,int L,int R,int k) {\n\t\tif(L <= l[p] && r[p] <= R) {\n\t\t\tMin[p] += k; tag[p] += k;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(p);\n\t\tint mid = (l[p] + r[p]) >> 1;\n\t\tif(L <= mid) add(p << 1,L,R,k);\n\t\tif(R >  mid) add(p << 1 | 1,L,R,k);\n\t\tpushup(p);\n\t}\n\tlong long query(int p,int L,int R) {\n\t\tif(L <= l[p] && r[p] <= R) return Min[p] == 0 ? cnt[p] : 0;\n\t\tint mid = (l[p] + r[p]) >> 1;\n\t\tlong long ans = 0; pushdown(p);\n\t\tif(L <= mid) ans += query(p << 1,L,R);\n\t\tif(R >  mid) ans += query(p << 1 | 1,L,R);\n\t\treturn ans;\n\t}\n}tr;\nstruct data {\n\tint x,y;\n\tbool operator < (const data n) const {\n\t\treturn x < n.x;\t\t\n\t}\n}a[N],sta1[N],sta2[N];\ninline int read() {\n\tint x = 0,flag = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9'){if(ch == '-')flag = -1;ch = getchar();}\n\twhile(ch >='0' && ch <='9'){x = (x << 3) + (x << 1) + ch - 48;ch = getchar();}\n\treturn x * flag;\n}\nint main() {\n\tint n = read(); int top1 = 0,top2 = 0;\n\tfor(int i = 1; i <= n; i++)\n\t\ta[i].x = read(),a[i].y = read();\n\tsort(a + 1,a + 1 + n); tr.build(1,1,n);\n\tlong long ans = 0;\n\tfor(int i = 1; i <= n; i++) {\n\t\ttr.add(1,1,n,-1);\n\t\twhile(top1 && sta1[top1].y < a[i].y)\n\t\t\ttr.add(1,sta1[top1 - 1].x + 1,sta1[top1].x,a[i].y - sta1[top1].y),--top1;\n\t\tsta1[++top1] = (data) {i,a[i].y};\n\t\twhile(top2 && sta2[top2].y > a[i].y)\n\t\t\ttr.add(1,sta2[top2 - 1].x + 1,sta2[top2].x,sta2[top2].y - a[i].y),--top2;\n\t\tsta2[++top2] = (data) {i,a[i].y};\n\t\tans += tr.query(1,1,i);\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1621335277,
        "uid": 385145,
        "name": "\u795e\u7737\u4e4b\u6a31\u82b1",
        "ccfLevel": 4,
        "title": "CF 526F \u9898\u89e3"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u6790\u5408\u6811\u7684\n\n\u4e0d\u4f1a\u7684\u5728oiwiki\u91cc\u5b66\n\n\u8fde\u7eed\u6bb5\u5728\u6811\u4e0a\u8868\u73b0\u4e3a\n\n$1.\\text{\u6790\u70b9\u4ee3\u8868\u7684\u6574\u4e2a\u533a\u95f4}$\n\n$2.\\text{\u5408\u70b9\u7684\u6240\u6709\u513f\u5b50\u6784\u6210\u7684\u533a\u95f4}$\n\n$3.\\text{\u53f6\u5b50\u7ed3\u70b9(\u53ef\u4ee5\u89c6\u4f5c\u6790\u70b9)}$ \n\n\u76f4\u63a5\u7edf\u8ba1\u7b54\u6848 \u5408\u70b9\u5c31\u662f\u513f\u5b50\u5bf9\u6570(k*(k-1)/2) \u6790\u70b9+1\n```cpp\n#include<cstdio>\n#include<vector>\nusing std::min;\nusing std::max;\nusing std::vector;\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch(getchar());\n\twhile (ch<48||ch>57)ch=getchar();\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n}\ntypedef long long ll;\nconst int N(3e5+5),maxn(6e5+5),logn(18);\nll ans;\nint n,a[N];\nstruct ST_Table\n{\n\tint log2[N],pow2[logn+1],mx[N][logn+1],mn[N][logn+1];\n\tinline const void build()\n\t{\n\t\tfor (int i(pow2[0]=1);i<=logn;i++)pow2[i]=pow2[i-1]<<1;\n\t\tfor (int i(2);i<=n;i++)log2[i]=log2[i>>1]+1;\n\t\tfor (int i(1);i<=n;i++)mn[i][0]=mx[i][0]=a[i];\n\t\tfor (int j(1);j<=log2[n];j++)\n\t\t\tfor (int i(1);i+pow2[j]-1<=n;i++)\n\t\t\t\tmn[i][j]=min(mn[i][j-1],mn[i+pow2[j-1]][j-1]),\n\t\t\t\tmx[i][j]=max(mx[i][j-1],mx[i+pow2[j-1]][j-1]);\n\t}\n\tinline const int query(const int &l,const int &r)\n\t{\n\t\tconst int k(log2[r-l+1]);\n\t\treturn max(mx[l][k],mx[r-pow2[k]+1][k])-min(mn[l][k],mn[r-pow2[k]+1][k]);\n\t}\n}st;\nnamespace Segment_Tree\n{\n\tstruct tree\n\t{\n\t\tint mn,add;\n\t\ttree *lson,*rson;\n\t\tvoid *operator new(size_t size);\n\t\tinline tree():mn(0),add(0){}\n\t\tinline const void plus(const int &k)\n\t\t{\n\t\t\tadd+=k;mn+=k;\n\t\t}\n\t\tinline const void pushdown()\n\t\t{\n\t\t\tif (add)\n\t\t\t\tlson->plus(add),\n\t\t\t\trson->plus(add),\n\t\t\t\tadd=0;\n\t\t}\n\t\tinline const void pushup()\n\t\t{\n\t\t\tmn=min(lson->mn,rson->mn);\n\t\t}\n\t\tinline const void update(const int &l,const int &r,const int &L,const int &R,const int &k)\n\t\t{\n\t\t\tif (l>R||r<L)return;\n\t\t\tif (l>=L&&r<=R)return plus(k);\n\t\t\tpushdown();\n\t\t\tconst int mid(l+r>>1);\n\t\t\tlson->update(l,mid,L,R,k);\n\t\t\trson->update(mid+1,r,L,R,k);\n\t\t\tpushup();\n\t\t}\n\t\tinline const int query(const int &l,const int &r)\n\t\t{\n\t\t\tif (l==r)return l;\n\t\t\tpushdown();\n\t\t\tconst int mid(l+r>>1);\n\t\t\tif (!lson->mn)return lson->query(l,mid);\n\t\t\treturn rson->query(mid+1,r);\n\t\t}\n\t}*root;\n\tchar memory_pool[N*sizeof(tree)<<1],*tail(memory_pool+sizeof(memory_pool));\n\tinline void *tree::operator new(size_t size){return tail-=size;}\n\tinline const void build(tree *&p,const int &l,const int &r)\n\t{\n\t\tp=new tree;\n\t\tif (l==r)return;\n\t\tconst int mid(l+r>>1);\n\t\tbuild(p->lson,l,mid);\n\t\tbuild(p->rson,mid+1,r);\n\t}\n\tinline const void build()\n\t{\n\t\tbuild(root,1,n);\n\t}\n\tinline const void update(const int &l,const int &r,const int &k)\n\t{\n\t\troot->update(1,n,l,r,k);\n\t}\n\tinline const int query()\n\t{\n\t\treturn root->query(1,n);\n\t}\n}\n#define sgt Segment_Tree\ntypedef vector<int>Vector;\nVector son[maxn];\nbool comb[maxn];\nint l[maxn],r[maxn],m[maxn],id[maxn],s[N],s1[N],s2[N],top1,top2,top;\ninline const bool judge(const int &l,const int &r)\n{\n\t//printf(\":::[%d,%d] %d\\n\",l,r,st.query(l,r));\n\treturn st.query(l,r)==r-l;\n}\ninline const void insert(const int &k)\n{\n\tfor (;top1&&a[k]<=a[s1[top1]];top1--)sgt::update(s1[top1-1]+1,s1[top1],a[s1[top1]]);\n\tfor (;top2&&a[k]>=a[s2[top2]];top2--)sgt::update(s2[top2-1]+1,s2[top2],-a[s2[top2]]);\n\tsgt::update(s1[top1]+1,k,-a[k]);s1[++top1]=k;\n\tsgt::update(s2[top2]+1,k,a[k]);s2[++top2]=k;\n\tid[k]=++*id;l[*id]=r[*id]=k;\n\tconst int lm(sgt::query());int now(*id);\n\twhile (top&&l[s[top]]>=lm)\n\t{\n\t\tif (comb[s[top]]&&judge(m[s[top]],k))\n\t\t{\n\t\t\tr[s[top]]=k;\n\t\t\tm[s[top]]=l[now];\n\t\t\tson[s[top]].push_back(now);\n\t\t\tnow=s[(top)--];\n\t\t\tcontinue;\n\t\t}\n\t\tif (judge(l[s[top]],k))\n\t\t{\n\t\t\tcomb[++*id]=1;\n\t\t\tr[*id]=k;l[*id]=l[s[top]];m[*id]=l[now];\n\t\t\tson[*id].push_back(s[(top)--]);\n\t\t\tson[*id].push_back(now);\n\t\t\tnow=*id;\n\t\t\tcontinue;\n\t\t}\n\t\tstatic Vector tmp;tmp.clear();\n\t\tdo tmp.push_back(s[(top)--]);while (top&&!judge(l[s[top]],k));\n\t\tl[++*id]=l[s[top]];r[*id]=k;\n\t\tson[*id].push_back(s[(top)--]);\n\t\tfor (Vector::iterator i(tmp.begin());i!=tmp.end();i++)son[*id].push_back(*i);\n\t\tson[*id].push_back(now);\n\t\tnow=*id;\n\t}\n\ts[++top]=now;\n\tsgt::update(1,k,-1);\n}\ninline const void build()\n{\n\tst.build();\n\tsgt::build();\n\tfor (int i(1);i<=n;i++)insert(i);\n}\nint main()\n{\n\tread(n);\n\tfor (int i(1),x,y;i<=n;i++)read(x),read(y),a[x]=y;\n\tbuild();\n\tfor (int i(1);i<=*id;i++)\n\t\tif (comb[i])ans+=1ll*son[i].size()*(son[i].size()-1)/2;\n\t\telse ans++;\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1601631315,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF526F \u3010Pudding Monsters\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u6211\u4eec\u9996\u5148\u628a\u5b83\u8f6c\u5316\u4e3a\u5e8f\u5217\u4e0a\u7684\u95ee\u9898\n\n\u5c31\u662f\u4e00\u6bb5\u533a\u95f4\u5185\u7684\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4ee5\u540e\u8fd9\u6bb5\u533a\u95f4\u7684\u6570\u662f\u8fde\u7eed\u7684\n\n\u53ef\u4ee5\u7406\u89e3\u4e3a\u6700\u5927\u503c-\u6700\u5c0f\u503c+1=\u533a\u95f4\u957f\u5ea6\n\n\u8fd9\u91cc\u8bb2\u89e3\u4e00\u79cd\u4e0d\u592a\u5e38\u89c1\u7684\u505a\u6cd5\u5206\u6cbb\uff01\n\n\u5206\u6cbb\u5c31\u662f\u8003\u8651\u6240\u6709\u5de6\u7aef\u70b9\u5bf9\u4e8e\u53f3\u7aef\u70b9\u7684\u8d21\u732e\u3002\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u600e\u4e48\u5206\u6cbb\u5462\uff1f\n\n\u6211\u4eec\u521a\u5f00\u59cb\u89c9\u5f97\u8fd9\u9053\u9898\u4e0d\u662f\u7279\u522b\u80fd\u5206\u6cbb\uff0c\u56e0\u6b64\u6211\u4eec\u4ed4\u7ec6\u63a8\u4e00\u4e0b\u8fd9\u4e2amin\u548cmax\uff0c\u53ef\u4ee5\u5927\u529b\u5206\u7c7b\u8ba8\u8bba\uff01\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u5206\u6cbb\u533a\u95f4[l,r]\n\n\u6211\u4eec\u8003\u8651mid\u5bf9\u7b54\u6848\u9020\u6210\u7684\u8d21\u732e\uff0c\u5c31\u662f\u5de6\u7aef\u70b9\u5728[l,mid]\uff0c\u53f3\u7aef\u70b9\u5728[mid+1,r]\u7684\u533a\u95f4\u6709\u591a\u5c11\u4e2a\n\n\u5206\u6210\u56db\u7c7b\uff1a\n```\n1.\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u90fd\u5728[l,mid]\uff0c\u4f46\u662f\u7531\u4e8e\u533a\u95f4\u957f\u5ea6\u7684\u9650\u5236\uff0c\u6240\u4ee5\u5fc5\u987b\u53f3\u7aef\u70b9\u4e5f\u8981\u5728[mid+1,r]\n2.\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u90fd\u5728[mid+1,r]\uff0c\u4f46\u662f\u7531\u4e8e\u533a\u95f4\u957f\u5ea6\u7684\u9650\u5236\uff0c\u6240\u4ee5\u5fc5\u987b\u53f3\u7aef\u70b9\u4e5f\u8981\u5728[l,mid]\n3.\u6700\u5c0f\u503c\u5728[l,mid],\u6700\u5927\u503c\u5728[mid+1,r]\n4.\u6700\u5c0f\u503c\u5728[mid+1,r],\u6700\u5927\u503c\u5728[l,mid]\n```\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u51481,3\u7136\u540e\u518d2,4\uff0c\u4e5f\u5c31\u662f1,3\u548c2,4\u662f\u7b49\u4ef7\u7684!\n\n\u6211\u4eec\u53ea\u9700\u8981\u5199\u4e00\u4e2asolve\u51fd\u6570\uff0c\u7136\u540e\u628a\u5e8f\u5217\u4e00\u4e2a\u653e\u5de6\u8fb9\u4e00\u4e2a\u653e\u53f3\u8fb9\uff0c\u53cd\u4e4b\u53cd\u8fc7\u6765\u5c31\u53ef\u4ee5\u4e86\uff01\n\u90a3\u4e48\u6211\u4eec\u4ee51,3\u4e3a\u4f8b\u5b50\u5206\u6790\u4e00\u4e0b\uff1a\n\u770b\u4e00\u4e0b\u8fd9\u4e2asolve\u7684\u4ee3\u7801\uff01\n```cpp\nvoid solve(int *a,int *b){\n\tint la=a[0],lb=b[0],nowmi,nowma;\n\tmi[0]=nowmi=n+1;ma[0]=nowma=0;\n\tfor(int i=1;i<=lb;i++)mi[i]=min(mi[i-1],b[i]),ma[i]=max(ma[i-1],b[i]);\n\tfor(int i=1,nl=1,nr=1,len;i<=la;i++){\n\t\tnowmi=min(nowmi,a[i]);nowma=max(nowma,a[i]);len=nowma-nowmi+1;\n\t\tif(len>i&&len-i<=lb&&mi[len-i]>nowmi&&ma[len-i]<nowma)ans++;\n\t\twhile(nr<=lb&&mi[nr]>nowmi)cnt[ma[nr]-nr+1]++,nr++;\n\t\twhile(nl<nr&&ma[nl]<nowma)cnt[ma[nl]-nl+1]--,nl++;\n\t\t//Lma-nowmi+1==Lpos+i->Lma-Lpos+1==i+nowmi\n\t\tans+=(LL)cnt[i+nowmi];\n\t}\n\tfor(int i=1;i<=lb;i++)cnt[ma[i]-i+1]=0;\n}\n```\n\u5982\u679c\u662f\u7b2c1\u7c7b\u60c5\u51b5\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u6839\u636e\u5e8f\u5217\u7684\u957f\u5ea6\u662fnowma-nowmi+1\u65e2\u4e3alen,\u7531\u4e8e\u5206\u6cbb\u6211\u4eec\u8003\u8651\u7684\u662f\u5de6\u53f3\u7aef\u70b9\u5206\u522b\u5728mid\u7684\u4e24\u4fa7\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5224\u65ad\u5b83\u7684\u53e6\u4e00\u4e2a\u7aef\u70b9\u662f\u5426\u5728\u53e6\u4e00\u8fb9\uff0c\u5e76\u4e14\u4e0d\u80fd\u8d8a\u754c\uff08\u8d85\u51fa\u53e6\u4e00\u8fb9\u7684\u8303\u56f4\uff09\uff0c\u5e76\u4e14\u53e6\u4e00\u8fb9\u7684\u6700\u5927\u503c\u4e0d\u5f97\u8d85\u8fc7\u5f53\u524d\u7684\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u4e5f\u4e0d\u5f97\u8d85\u8fc7\u5f53\u524d\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\uff0cans++\uff01\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u7b2c3\u7c7b\u60c5\u51b5\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u7c7b\u4f3c\u4e8etwo-pointers\u7684\u4e1c\u897f\u626b\u4e00\u4e0b\u53e6\u5916\u7684\u90a3\u4e00\u90e8\u5206\uff0c\u626b\u7684\u533a\u95f4\u6ee1\u8db3\u6211\u4eec\u7684\u6700\u5c0f\u503c\u4e0d\u5f97\u5c0f\u4e8e\u5f53\u524d\u7684\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u6211\u4eec\u94a6\u5b9a\u6700\u5c0f\u503c\u6765\u81ea\u4e8e\u5f53\u524d\u7684\u8fd9\u4e2a\u90e8\u5206\uff0c\u6700\u5927\u503c\u540c\u7406\uff0c\u5fc5\u987b\u8981\u5927\u4e8e\u5f53\u524d\u7684\u6700\u5927\u503c\uff0c\u4e5f\u662f\u6211\u4eec\u94a6\u5b9a\u7684\uff01\n\u7136\u540e\u6211\u4eec\u626b\u51fa\u4e86\u8fd9\u4e2a\u533a\u95f4\u7684\u8303\u56f4\uff0c\u9700\u8981\u6ee1\u8db3\u4e00\u4e2a\u5f0f\u5b50\u5c31\u662f\uff1a\n```\nLma-nowmi+1==Lpos+i->Lma-Lpos+1==i+nowmi\n```\nLma\u4ee3\u8868\u5de6\u8fb9\u7684\u6700\u5927\u503c\uff0cLpos\u662f\u5de6\u8fb9\u7684\u4f4d\u7f6e\n\n\u7136\u540e\u7b49\u53f7\u5de6\u8fb9\u7b49\u4e8e\u6700\u5927\u503c-\u6700\u5c0f\u503c+1\uff0c\u7136\u540e\u53f3\u8fb9\u662fLpos+i\u5c31\u662f\u533a\u95f4\u957f\u5ea6\uff0c\u76f8\u5f53\u4e8e\u4e24\u7aef\u533a\u95f4\u62fc\u8d77\u6765\u8fd9\u4e48\u7406\u89e3\uff01\n\n\u7136\u540e\u6211\u4eec\u79fb\u9879\u5c31\u53d1\u73b0\u6211\u4eec\u6ee1\u8db3\u8fd9\u6837\u4e00\u4e2a\u7b49\u5f0f\uff0c\u53f3\u8fb9\u53ea\u548ci\u6709\u5173\uff0c\u5de6\u8fb9\u53ea\u548c\u53e6\u4e00\u4e2a\u90e8\u5206\u6709\u5173\uff0c\u6211\u4eec\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u4e00\u8fb9\u626b\u4e00\u904d\u7528\u4e00\u4e2acnt\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0b\uff0c\u6ce8\u610f\u6700\u597d\u8981\u6e05\u7a7a\u3002\n\n\u63a5\u7740\u6211\u4eec\u8003\u8651\u5b8c\u8fd9\u79cd\u60c5\u51b5\u540e\uff0c\u6211\u4eec\u5206\u6cbb\u7684\u65f6\u5019\u8c03\u7528\u4e24\u6b21\u8fd9\u4e2asolve\u51fd\u6570\u5c31\u53ef\u4ee5\uff0c\u76f8\u5f53\u4e8e\u662f1,3\u4e00\u8d77\u8ba8\u8bba\u4e86\uff0c2,4\u4e00\u8d77\u8ba8\u8bba\u4e86\uff01\n\n\u6700\u540e\u5206\u6cbb\u7684\u65f6\u5019\u5982\u679c\u5de6\u7aef\u70b9\u7b49\u4e8e\u53f3\u7aef\u70b9ans++\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6211\u4eec\u5355\u72ec\u8003\u8651\u3002\n\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\nusing namespace std;\nconst int N=3e5+5;\nint n,p[N],sl[N],sr[N],cnt[N],mi[N],ma[N];LL ans;\nvoid solve(int *a,int *b){\n\tint la=a[0],lb=b[0],nowmi,nowma;\n\tmi[0]=nowmi=n+1;ma[0]=nowma=0;\n\tfor(int i=1;i<=lb;i++)mi[i]=min(mi[i-1],b[i]),ma[i]=max(ma[i-1],b[i]);\n\tfor(int i=1,nl=1,nr=1,len;i<=la;i++){\n\t\tnowmi=min(nowmi,a[i]);nowma=max(nowma,a[i]);len=nowma-nowmi+1;\n\t\tif(len>i&&len-i<=lb&&mi[len-i]>nowmi&&ma[len-i]<nowma)ans++;\n\t\twhile(nr<=lb&&mi[nr]>nowmi)cnt[ma[nr]-nr+1]++,nr++;\n\t\twhile(nl<nr&&ma[nl]<nowma)cnt[ma[nl]-nl+1]--,nl++;\n\t\t//Lma-nowmi+1==Lpos+i->Lma-Lpos+1==i+nowmi\n\t\tans+=(LL)cnt[i+nowmi];\n\t}\n\tfor(int i=1;i<=lb;i++)cnt[ma[i]-i+1]=0;\n}\nvoid cdq(int l,int r){\n\tif(l==r){ans++;return;}\n\tint mid=(l+r)>>1;sl[0]=sr[0]=0;\n\tfor(int i=mid;i>=l;i--)sl[++sl[0]]=p[i];\n\tfor(int i=mid+1;i<=r;i++)sr[++sr[0]]=p[i];\n\tsolve(sl,sr);solve(sr,sl);\n\tcdq(l,mid);cdq(mid+1,r);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1,x,y;i<=n;i++)scanf(\"%d%d\",&x,&y),p[x]=y;\n\tcdq(1,n);\n\tprintf(\"%lld\\n\",ans); \n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1600141555,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF526F \u3010Pudding Monsters\u3011"
    },
    {
        "content": "\u6807\u7b7e: \u8f6c\u5316, \u7ebf\u6bb5\u6811\n\n#### Part 1\n\n\u663e\u7136 $k\\times k$ \u7684\u68cb\u76d8\u4e5f\u662f\u6bcf\u884c\u6bcf\u5217\u6070\u597d\u4e00\u4e2a\u68cb\u5b50, \u6211\u4eec\u8bb0\u7b2c $i$ \u884c\u7684\u68cb\u5b50\u6240\u5728\u5217\u4e3a $a_i$ .\n\n\u90a3\u4e48\u5bf9\u4e8e\u884c $[l,r]$ \u7684\u68cb\u5b50\u80fd\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u5f53\u4e14\u4ec5\u5f53 $max\\{a_i|i\\in[l,r]\\}-min\\{a_i|i\\in[l,r]\\}=r-l$ .\n\n\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u6ee1\u8db3\u6761\u4ef6\u7684 $[l,r]$ \u533a\u95f4. \u8fd9\u4e2a\u6709\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u505a\u6cd5.\n\n#### Part 2\n\n\u679a\u4e3e $r$ , \u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e $l\\leqslant r$ \u90fd\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 $f_l=max\\{a_i|i\\in[l,r]\\}-min\\{a_i|i\\in[l,r]\\}+l$ .\n\n\u663e\u7136 $f_l\\geqslant r$ , \u90a3\u4e48\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4 $f$ \u7684\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u51fa\u73b0\u7684\u6b21\u6570\u5373\u53ef\u6c42\u5f97\u6ee1\u8db3\u6761\u4ef6\u7684 $l$ .\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$ .\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint read();\nint n;\nint a[300005];\n#define ls l, mid, k << 1\n#define rs mid + 1, r, k << 1 | 1\n#define L k << 1\n#define R k << 1 | 1\nstruct Seg {\n    int mn[2000006], tag[2000006], c[2000006];\n    void update(int k) {\n        mn[k] = min(mn[L], mn[R]);\n        c[k] = (mn[k] != mn[L] ? 0 : c[L]) + (mn[k] != mn[R] ? 0 : c[R]);\n    }\n    void build(int l, int r, int k) {\n        if (l == r) return mn[k] = l, c[k] = 1, void();\n        int mid = l + r >> 1;\n        build(ls), build(rs), update(k);\n    }\n    void Tag(int k, int v) { tag[k] += v, mn[k] += v; }\n    void psd(int k) { Tag(L, tag[k]), Tag(R, tag[k]), tag[k] = 0; }\n    void add(int l, int r, int k, int st, int en, int v) {\n        if (st > r || en < l) return;\n        if (st <= l && en >= r) return Tag(k, v);\n        psd(k);\n        int mid = l + r >> 1;\n        add(ls, st, en, v), add(rs, st, en, v), update(k);\n    }\n} seg;\n\nint st[2][300005], top[2];\n\nint main() {\n    n = read();\n    for (int i = 1, x; i <= n; ++i) x = read(), a[x] = read();\n    long long res = 0;\n    seg.build(1, n, 1);\n    for (int i = 1, p; i <= n; ++i) {\n        p = i;\n        while (top[0] && a[i] < a[st[0][top[0]]])\n            seg.add(1, n, 1, st[0][top[0] - 1] + 1, p - 1,\n                    a[st[0][top[0]]] - a[i]),\n                p = st[0][top[0]--];\n        p = i;\n        while (top[1] && a[i] > a[st[1][top[1]]])\n            seg.add(1, n, 1, st[1][top[1] - 1] + 1, p - 1,\n                    a[i] - a[st[1][top[1]]]),\n                p = st[1][top[1]--];\n        st[0][++top[0]] = st[1][++top[1]] = i, res += seg.c[1];\n    }\n    printf(\"%lld\\n\", res);\n    return 0;\n}\nconst int _SIZE = 1 << 22;\nchar ibuf[_SIZE], *iS = ibuf, *iT = ibuf;\n#define gc                                                         \\\n    (iS == iT ? iT = ((iS = ibuf) + fread(ibuf, 1, _SIZE, stdin)), \\\n     (iS == iT ? EOF : *iS++) : *iS++)\nint read() {\n    int x = 0, f = 1;\n    char c = gc;\n    while (!isdigit(c)) f = (c == '-') ? -1 : f, c = gc;\n    while (isdigit(c)) x = x * 10 + c - '0', c = gc;\n    return x * f;\n}\n```",
        "postTime": 1582814389,
        "uid": 51237,
        "name": "Kinandra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF526F \u3010Pudding Monsters\u3011"
    },
    {
        "content": "\u771f\u662f\u60ed\u6127\u2026\n\n\u505a\u4e0d\u51fa\u81ea\u5df1\u4ee5\u524d\u4f1a\u505a\u7684\u9898\u2026\n\n\u6211\u4eec\u8003\u8651\u4e24\u4e2a\u4e2a\u5355\u8c03\u6808\u626b\u8fc7\u53bb\uff0c\u626b\u63cf\u53f3\u7aef\u70b9\uff0c\u8fd9\u6837\u5c31\u80fd\u77e5\u9053\u4ee5\u8fd9\u4e2a\u7aef\u70b9\u6240\u5728\u7684\u5728\u67d0\u4e2a\u533a\u95f4\u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff0c\u6700\u5927\u503c\u662f\u591a\u5c11\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u5408\u6cd5\u533a\u95f4\uff0c\u6570\u4e00\u4e0b\u4e00\u68f5\u7ebf\u6bb5\u6811\u6709\u591a\u5c11\u4e2a [-1] \u5c31\u884c\u4e86\u3002\u3002\n\n\u8fd9\u4efd\u4ee3\u7801\u662f\u5728 2019.10 \u5199\u7684\uff08\n\n```cpp\n// Isaunoya\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(Ofast)\n#include<bits/stdc++.h>\nusing namespace std ;\n#define int long long\n#define fi first\n#define se second\n#define pb push_back\ninline int read() {\n  register int x = 0 , f = 1 ;\n  register char c = getchar() ;\n  for( ; ! isdigit(c) ; c = getchar()) if(c == '-') f = -1 ;\n  for( ; isdigit(c) ; c = getchar()) x = (x << 1) + (x << 3) + (c & 15) ;\n  return x * f ;\n}\ntemplate < class T > inline bool cmax(T & x , T y) {\n  return x > y ? 1 : x = y , 0 ;\n}\ntemplate < class T > inline bool cmin(T & x , T y) {\n  return x < y ? 1 : x = y , 0 ;\n}\nconst int MAXN = 3e5 + 10 ;\nconst int mod7 = 1e9 + 7 ;\nconst int mod9 = 1e9 + 9 ;\nconst int mod = 998244353 ;\ninline int QP(int x , int y , int Mod){ int ans = 1 ;\n  for( ; y ; y >>= 1 , x = (x * x) % Mod)\n    if(y & 1) ans = (ans * x) % Mod ;\n  return ans ;\n}\nint n , m ;\nvector < int > v ;\nint a[MAXN] ;\ninline void io() {\n  ios :: sync_with_stdio(false) ;\n  cin.tie(0) , cout.tie(0) ;\n}\n\nint mn[MAXN << 2] ;\nint len[MAXN << 2] ;\nint tag[MAXN << 2] ;\ninline void Push_Up(int rt) {\n  mn[rt] = min(mn[rt << 1] , mn[rt << 1 | 1]) ;\n  if(mn[rt << 1] == mn[rt << 1 | 1]) len[rt] = len[rt << 1] + len[rt << 1 | 1] ;\n  else {\n    if(mn[rt] == mn[rt << 1]) len[rt] = len[rt << 1] ;\n    else len[rt] = len[rt << 1 | 1] ;\n  }\n}\ninline void build(int l , int r , int rt) {\n  mn[rt] = 0 ; len[rt] = r - l + 1 ;\n  if(l == r) return ;\n  int mid = l + r >> 1 ;\n  build(l , mid , rt << 1) ;\n  build(mid + 1 , r , rt << 1 | 1) ;\n}\ninline void Push_down(int rt) {\n  if(! tag[rt]) return ;\n  tag[rt << 1] += tag[rt] ;\n  tag[rt << 1 | 1] += tag[rt] ;\n  mn[rt << 1] += tag[rt] ;\n  mn[rt << 1 | 1] += tag[rt] ;\n  tag[rt] = 0 ;\n}\ninline void Upd(int a , int b , int l , int r , int rt , int val) {\n  if(a <= l && r <= b) {\n    mn[rt] += val ;\n    tag[rt] += val ;\n    return ;\n  } Push_down(rt) ;\n  int mid = l + r >> 1 ;\n  if(a <= mid) Upd(a , b , l , mid , rt << 1 , val );\n  if(b > mid) Upd(a , b , mid + 1 , r , rt << 1 | 1 , val) ;\n  Push_Up(rt) ;\n}\ntypedef pair < int , int > pii ;\n#define mp make_pair\ninline pii Query(int a , int b ,int l , int r , int rt) {\n  if(a <= l && r <= b) {\n    return mp(mn[rt] , len[rt]) ;\n  } Push_down(rt) ;\n  int mid = l + r >> 1 ;\n  pii ans1 = mp(INT_MAX , 0) ;\n  pii ans2 = mp(INT_MAX , 0) ;\n  if(a <= mid) ans1 = Query(a , b , l , mid , rt << 1) ;\n  if(b > mid) ans2 = Query(a , b , mid + 1  , r , rt << 1 | 1) ;\n  pii ans ;\n  if(ans1.fi == ans2.fi) {\n    ans = mp(ans1.fi , ans1.se + ans2.se) ;\n    return ans ;\n  }\n  if(ans1.fi < ans2.fi) { ans = ans1 ; return ans ; }\n  else { ans = ans2 ; return ans ; }\n  return ans ;\n}\npii mxs[MAXN] , mns[MAXN] ;\nmap < int , int > _mp ;\nsigned main() {\n  // io() ;\n  n = read() ;\n  for(register int i = 1 ; i <= n ; i ++) {\n  \tint x = read();\n  \ta[x]=read();\n\t}\n  int ans = 0 ;\n  _mp.clear() ;\n  build(1 , n , 1) ;\n  int maxs = 0 , mins = 0 ;\n  for(register int i = 1 ; i <= n ; i ++) {\n    while(maxs > 0 && mxs[maxs].fi < a[i]) {\n      Upd(mxs[maxs - 1].se + 1 , mxs[maxs].se , 1 , n , 1 , a[i] - mxs[maxs].fi) ;\n      maxs -- ;\n    }\n    mxs[++ maxs] = mp(a[i] , i) ;\n    while(mins > 0 && mns[mins].fi > a[i]) {\n      Upd(mns[mins - 1].se + 1 , mns[mins].se , 1 , n , 1 , mns[mins].fi - a[i]) ;\n      mins -- ;\n    }\n    mns[++ mins] = mp(a[i] , i) ;\n    Upd(_mp[a[i]] + 1 , i , 1 , n , 1 , - 1) ;\n    _mp[a[i]] = i ;\n    pii flg = Query(1 , i , 1 , n , 1) ;\n    if(flg.fi == -1) ans += flg.se ;\n  }\n  printf(\"%lld\\n\" , ans) ;\n  return 0 ;\n}\n```",
        "postTime": 1605166747,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF526F \u3010Pudding Monsters\u3011"
    }
]