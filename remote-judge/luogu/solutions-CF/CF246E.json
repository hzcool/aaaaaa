[
    {
        "content": "## \u9898\u89e3 CF246E Blood Cousins Return\n\n#### \u672c\u9898\u601d\u8def:dfs\u5e8f+\u6811\u72b6\u6570\u7ec4\n\n\u5148\u8003\u8651\u8fd9\u9898\u5728\u5e8f\u5217\u4e0a\u600e\u4e48\u505a\uff0c\u660e\u663e\u5728\u5e8f\u5217\u4e0a\u5c31\u662f[HH\u7684\u9879\u94fe](https://www.luogu.com.cn/problem/P1972)\u4e86\u3002\n\n\u7136\u540e\u8003\u8651\u600e\u4e48\u628a\u5b83\u653e\u5728\u6811\u4e0a\uff0c\u90a3\u4e0d\u5c31\u662f[CF208E](https://www.luogu.com.cn/problem/CF208E)\u4e86\u5417\u3002\n\n\u6240\u4ee5CF246E=CF208E+P1972(smg$\\quad$~~(\u7d2b\u9898=\u7d2b\u9898+\u84dd\u9898,\u6240\u4ee5\u84dd\u9898=0)~~\n\n\u4e0b\u9762\u7b80\u8ff0\u8fd9\u4e24\u9898\u3002\n\nCF208E:\u68ee\u6797\u4e2d\u6c42\u4e00\u4e2a\u7684\u8282\u70b9\u7684$K-son$\u4e2a\u6570\u3002\u5bf9\u6bcf\u4e2a\u6df1\u5ea6\u7528$\\text{vector}$\u7ef4\u62a4\u672c\u5c42\u7684dfs\u5e8f\u3002\u5bf9\u6bcf\u4e2a\u67e5\u8be2\u4e8c\u5206\u51fa$K-son$\u4e2a\u6570\u3002\u8be6\u89c1[\u8fd9\u91cc](https://www.luogu.com.cn/blog/Guess00/solution-CF208E)\u3002\n\nHH\u7684\u9879\u94fe:\u6c42\u533a\u95f4\u989c\u8272\u4e2a\u6570\u3002\u5c06\u67e5\u8be2\u79bb\u7ebf\uff0c\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\u3002\u4ece\u5de6\u5230\u53f3\u679a\u4e3e\uff0c\u5c06\u8fd9\u4e2a\u70b9+1,\u8fd9\u4e2a\u70b9\u989c\u8272\u7684\u4e0a\u4e00\u4e2a\u4f4d\u7f6e-1.\u5230\u4e86\u4e00\u4e2a\u67e5\u8be2\u7684\u53f3\u7aef\u70b9\u65f6\u8ba1\u7b97\u7b54\u6848($s_r-s_{l-1}$).\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\u8be6\u89c1[\u539f\u9898](https://www.luogu.com.cn/problem/P1972)\u3002\n\n\u672c\u9898\u540c\u7406\uff0c\u5c06\u67e5\u8be2\u79bb\u7ebf\uff0c\u6c42\u51fa\u5176$K-son$\u7684\u6df1\u5ea6\u3001\u6700\u5de6\u8fb9\u548c\u6700\u53f3\u8fb9\uff0c\u6309\u4f18\u5148\u6df1\u5ea6\u5176\u6b21\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u4e4b\u540e\u5c31\u4e0eHH\u7684\u9879\u94fe\u4e00\u6a21\u4e00\u6837\u4e86\u3002\n\n\u6ce8\u610f\u4e8b\u9879:\n1. \u6bcf\u5904\u7406\u5b8c\u4e00\u5c42\u540e\u65f6\u6ce8\u610f\u6e05\u96f6\u3002\n2. \u867d\u7136\u8fd9\u662f\u4e00\u4e2a\u68ee\u6797\u4f46\u4e0d\u540c\u6811\u7684\u540c\u4e00\u6df1\u5ea6\u53ef\u4ee5\u653e\u4e00\u8d77\u5904\u7406\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6:$\\Theta(n)$~$\\Theta(n\\log n)$\n\n$\\mathbb{CODE:}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=110005;\nstruct que{int id,d,l,r;}a[MAXN];\nint n,q,i,j,x,y,z,l,r,maxd,cnt,c[MAXN],f[MAXN],pre[MAXN],col[MAXN],dep[MAXN],in[MAXN],out[MAXN],ans[MAXN];\nstring s;\nmap<string,int> m;\nvector<int> G[MAXN],inn[MAXN],t[MAXN];\ninline void read(int &x)    //\u5feb\u8bfb \n{\n\tshort negative=1;\n    x=0;\n    char c=getchar();\n    while(c<'0' || c>'9')\n    {\n    \tif(c=='-')\n\t\t\tnegative=-1;\n\t\tc=getchar();\n\t}\n    while(c>='0' && c<='9')\n        x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    x*=negative;\n}\ninline void print(int x)   //\u5feb\u8f93 \n{\n    if (x<0)\n        putchar('-'),x=-x;\n    if (x>9)\n        print(x/10);\n    putchar(x%10+'0');\n}\ninline int lowbit(int x){return x&(-x);}\ninline void add(int x,int y,int n)\n{\n\twhile (x<=n)\n\t\tc[x]+=y,x+=lowbit(x);\n}\ninline int query(int x)\n{\n\tint ans=0;\n\twhile (x)\n\t\tans+=c[x],x-=lowbit(x);\n\treturn ans;\n}\ninline void dfs(int u)\n{\n\tdep[u]=dep[f[u]]+1;\n\tmaxd=max(maxd,dep[u]);\n\tin[u]=++cnt;\n\tif (!inn[dep[u]].size())//\u5728\u6bcf\u5c42\u524d\u9762\u591a\u53d1\u4e00\u4e2a\u6570,\u53c8\u4e0d\u7136\u6811\u72b6\u6570\u7ec4\u4f1a\u9505 (lowbit(0)=0)\n\t\tinn[dep[u]].push_back(-1),t[dep[u]].push_back(-1);\n\tinn[dep[u]].push_back(in[u]);\n\tt[dep[u]].push_back(u);\n\tfor (int i=0;i<G[u].size();i++)\n\t\tdfs(G[u][i]);\n\tout[u]=cnt;\n}\ninline bool cmp(que a,que b)\n{\n\tif (a.d==b.d)\n\t\treturn a.r<b.r;  //\u6df1\u5ea6\u76f8\u540c\u6309\u53f3\u7aef\u70b9\u6392\u5e8f \n\treturn a.d<b.d;   //\u4f18\u5148\u6df1\u5ea6 \n}\nsigned main(void)\n{\n\tread(n);\n\tfor (i=1;i<=n;i++)\n\t{\n\t\tcin>>s;\n\t\tread(f[i]);\n\t\tG[f[i]].push_back(i);\n\t\tif (!m[s])  //\u7528map\u628a\u540d\u5b57\u53d8\u6210\u989c\u8272\uff0c\u65b9\u4fbf\u4e4b\u540e\u8ba1\u7b97 \n\t\t\tm[s]=++cnt;\n\t\tcol[i]=m[s];\n\t}\n\tcnt=0,dep[0]=-1;   //\u6211\u53ea\u662f\u60f3\u8ba90\u53f7\u70b9\u6df1\u5ea6\u4e3a0\u800c\u5df2 \n\tdfs(0);\n\tread(q);\n\tfor (i=1;i<=q;i++)\n\t{\n\t\tread(x),read(y);\n\t\tz=dep[x]+y;  //\n\t\tl=lower_bound(inn[z].begin()+1,inn[z].end(),in[x])-inn[z].begin();\n\t\tr=upper_bound(inn[z].begin()+1,inn[z].end(),out[x])-inn[z].begin()-1;\n\t\t//\u4e8c\u5206\u6c42\u51fak-son\u7684\u6700\u5de6\u8fb9\u4e0e\u6700\u53f3\u8fb9 \n\t\ta[i]=que{i,z,l,r};  //\u5c06\u67e5\u8be2\u79bb\u7ebf \n\t}\n\tsort(a+1,a+q+1,cmp);  //\u6392\u5e8f \n\tfor (x=i=1;i<=q;i++)\n\t{\n\t\tif (a[i].d>maxd)  //\u7531\u4e8e\u6570\u636e\u7684\u7279\u5f02\u6027,\u9700\u8981\u7279\u5224\u5176\u662f\u5426\u8d85\u8fc7\u6700\u5927\u6df1\u5ea6 \n\t\t\tcontinue;\n\t\tfor (j=x;j<=a[i].r;j++)\n\t\t{\n\t\t\ty=col[t[a[i].d][j]];\n\t\t\tif (pre[y])\n\t\t\t\tadd(pre[y],-1,t[a[i].d].size());\n\t\t\tadd(j,1,t[a[i].d].size());\n\t\t\tpre[y]=j;\n\t\t}\n\t\tx=a[i].r+1;\n\t\tans[a[i].id]=query(a[i].r)-query(a[i].l-1);\n\t\tif (i!=q && a[i].d!=a[i+1].d)  //\u6362\u4e86\u4e00\u4e2a\u6df1\u5ea6,\u6e05\u7a7a\u6570\u7ec4 \n\t\t{\n\t\t\tfor (j=0;j<=a[i].r;j++)\n\t\t\t\tpre[col[t[a[i].d][j]]]=0;\n\t\t\tfor (j=0;j<=t[a[i].d].size();j++)\n\t\t\t\tc[j]=0;\n\t\t\tx=1;\n\t\t}\n\t}\n\tfor (i=1;i<=q;i++)\n\t\tprint(ans[i]),putchar('\\n');\n\treturn 0;\n} \n```",
        "postTime": 1598000024,
        "uid": 38455,
        "name": "Guess00",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF246E [Blood Cousins Return]"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u5408\u5e76\u5728\u5904\u7406\u5173\u4e8e\u6df1\u5ea6\u7684\u4fe1\u606f\u4e0a\u51e0\u4e4e\u65e0\u6240\u4e0d\u80fd\u3002\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u4ee5\u6df1\u5ea6\u4e3a\u4e0b\u6807\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u5728\u6bcf\u4e2a\u53f6\u5b50\u4e0a\u7ef4\u62a4\u4e00\u4e2a set \u8868\u793a\u6df1\u5ea6\u4e3a $x$ \u7684\u540d\u5b57\u6784\u6210\u7684\u96c6\u5408\u3002\u5408\u5e76\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u5bf9\u53f6\u5b50\u7684 set \u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\uff0c\u590d\u6742\u5ea6\u662f $O(n\\log^2 n)\\sim O(n\\log n)$\uff08\u524d\u9762\u662f\u65f6\u95f4\uff0c\u540e\u9762\u662f\u7a7a\u95f4\uff09\u3002\u5047\u5982\u7528 https://www.luogu.com.cn/blog/feecle6418/solution-p5384 \u91cc\u9762\u7684\u529e\u6cd5\u4f18\u5316\u7a7a\u95f4\uff0c\u5e76\u4e14\u5c06 `set` \u6362\u4e3a\u6709\u5e8f\u63d2\u5165\u5747\u644a $O(1)$ \u7684 `splay`\uff0c\u53ef\u4ee5\u505a\u5230 $O(n\\log n)\\sim O(n)$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<algorithm>\n#include<set>\n#include<map>\nusing namespace std;\nint n,cnt,cntt,h[100005],root[100005],ans[100005],d[100005],q,val[100005],cnttt,cntttt;\nset<int> s[2000005];\nmap<string,int> mp;\nstruct TreeNode{\n\tint ls,rs,id;\n}t[2000005];\nstruct Edge{\n\tint to,next;\n}e[100005];\nstruct Que{\n\tint k,id;\n};\nvector<Que> vec[100005];\nint NewNode(){\n\treturn ++cntt;\n}\nvoid Add_Edge(int x,int y){\n\te[++cnt].to=y;\n\te[cnt].next=h[x];\n\th[x]=cnt;\n}\nvoid Update(int &p,int l,int r,int x,int y){\n\tif(!p)p=NewNode();\n\tif(l==r){\n\t\tif(!t[p].id)t[p].id=++cntttt;\n\t\ts[t[p].id].insert(y);\n\t\treturn ;\n\t}\n\tint mid=(l+r)/2;\n\tif(x<=mid)Update(t[p].ls,l,mid,x,y);\n\telse Update(t[p].rs,mid+1,r,x,y);\n}\nvoid Merge(int &p,int q,int l,int r){\n\tif(!p||!q){\n\t\tp=p+q;\n\t\treturn ;\n\t}\n\tif(l==r){\n\t\tif(!t[p].id)t[p].id=t[q].id;\n\t\telse {\n\t\t\tif(s[t[p].id].size()<s[t[q].id].size())swap(t[p].id,t[q].id);\n\t\t\tfor(set<int>::iterator it=s[t[q].id].begin();it!=s[t[q].id].end();it++)s[t[p].id].insert(*it);\n\t\t\ts[t[q].id].clear();\n\t\t}\n\t\treturn ;\n\t}\n\tint mid=(l+r)/2;\n\tMerge(t[p].ls,t[q].ls,l,mid);\n\tMerge(t[p].rs,t[q].rs,mid+1,r);\n}\nint Query(int p,int l,int r,int x){\n\tif(l==r)return s[t[p].id].size();\n\tint mid=(l+r)/2;\n\tif(x<=mid)return Query(t[p].ls,l,mid,x);\n\telse return Query(t[p].rs,mid+1,r,x);\n}\nvoid Solve(int now,int fa){\n\tUpdate(root[now],1,n,d[now],val[now]);\n\tfor(int i=h[now];i;i=e[i].next){\n\t\tint y=e[i].to;\n\t\tif(y==fa)continue;\n\t\tSolve(y,now);\n\t\tMerge(root[now],root[y],1,n);\n\t}\n\tfor(Que y:vec[now])ans[y.id]=Query(root[now],1,n,y.k);\n}\nvoid DFS(int now,int dep){\n\td[now]=dep;\n\tfor(int i=h[now];i;i=e[i].next){\n\t\tint y=e[i].to;\n\t\tDFS(y,dep+1);\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1,x;i<=n;i++){\n\t\tstring str;\n\t\tcin>>str;\n\t\tif(!mp[str])val[i]=mp[str]=++cnttt;\n\t\telse val[i]=mp[str];\n\t\tscanf(\"%d\",&x);\n\t\tAdd_Edge(x,i);\n\t}\n\tscanf(\"%d\",&q);\n\tDFS(0,0);\n\tfor(int i=1,x,k;i<=q;i++){\n\t\tscanf(\"%d%d\",&x,&k);\n\t\tif(d[x]+k<=n)vec[x].push_back({d[x]+k,i});\n\t}\n\tSolve(0,0);\n\tfor(int i=1;i<=q;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1584412422,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF246E \u3010Blood Cousins Return\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u7247\u68ee\u6797\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a $x$ \u70b9\uff0c\u8ba1\u7b97 $dep$ \u662f  $dep_x+y$ \u7684\u70b9\u4e0a\u7684\u4e0d\u540c\u5b57\u7b26\u4e32\u4e2a\u6570\u3002\n\n\u5c1d\u8bd5\u8dd1\u6811\u4e0a $\\text{dsu}$\u3002\n\n\u4f60\u7528 $n$ \u4e2a $\\text{vector}$\uff0c\u585e\u5165\u6240\u6709\u8be2\u95ee\u7684 $y$\u3002$\\text{dsu}$ \u65f6\uff0c\u5f00 $n$ \u4e2a $\\text{set}$\uff0c\u8868\u793a\u6df1\u5ea6\u4e3a $i$ \u7684\u5f53\u524d\u8282\u70b9\u7684\u72b6\u6001\u3002\uff08\n\n\u53ef\u80fd\u8bf4\u7684\u6709\u70b9\u8ff7\u60d1\uff0c\u5c31\u7b80\u8981\u8bf4\u4e00\u4e0b\u6d41\u7a0b\u3002\n\n```\n\u6269\u5c55(x)\uff1a\n  if(set[dep[x]].count(a[x]))return\n  set[dep[x]].insert(a[x]);\n\u589e\u52a0\u8d21\u732e(x):\n  \u6269\u5c55(x)\n  \u589e\u52a0\u8d21\u732e(\u6240\u6709\u513f\u5b50\uff09\n\u6e05\u7a7a(x):\n  set[dep[x]].clear()\n  \u6e05\u7a7a(\u6240\u6709\u513f\u5b50)\n\u8482\u827e\u65af\u6cb9(x):\n  \u5904\u7406\u8f7b\u513f\u5b50\n  \u6e05\u7a7a\u8f7b\u513f\u5b50\n  \u5904\u7406\u91cd\u513f\u5b50\n  \u589e\u52a0\u8f7b\u513f\u5b50\u7684\u8d21\u732e\n  \u589e\u52a0\u81ea\u5df1\u7684\u8d21\u732e\n  \u56de\u7b54\u95ee\u9898:\n    \u7b2ci\u4e2a\u95ee\u9898\u7b54\u6848\u662fset[dep].size()\n```\n\n\u6211\u89c9\u5f97\u633a\u597d\u5199\u554a\uff01\n\n```cpp\n#define maxn 100010\nint n,x,y,m;\nstring a[maxn];\nvector<pair<int,int>>v[maxn];\nint head[maxn],Next[maxn],ver[maxn],tot;\nvoid add(int x,int y){\n\tver[++tot]=y;\n\tNext[tot]=head[x];\n\thead[x]=tot;\n}\nint dep[maxn],son[maxn],siz[maxn];\nvoid dfs(int x){\n\tsiz[x]=1;\n\tfor(int i=head[x];i;i=Next[i]){\n\t\tint y=ver[i];\n\t\tdep[y]=dep[x]+1;\n\t\tdfs(y);\n\t\tsiz[x]+=siz[y];\n\t\tif(siz[son[x]]<siz[y])son[x]=y;\n\t}\n}\nset<string>S[maxn*2];\nint Ans[maxn];\nvoid del(int x){\n\tS[dep[x]].clear();\n\tfor(int i=head[x];i;i=Next[i])del(ver[i]);\n}\nvoid upd(int x){\n\tS[dep[x]].insert(a[x]);\n}\nvoid add(int x){\n\tupd(x);\n\tfor(int i=head[x];i;i=Next[i])add(ver[i]);\n}\nint vis[maxn];\nvoid dsu(int x){\n\tvis[x]=1;\n\tfor(int i=head[x];i;i=Next[i])\n\tif(ver[i]!=son[x])dsu(ver[i]),del(ver[i]);\n\tif(son[x])dsu(son[x]);\n\tfor(int i=head[x];i;i=Next[i])\n\tif(ver[i]!=son[x])add(ver[i]);\n\tupd(x);\n\tfor(auto i:v[x])Ans[i.second]=S[i.first].size();\n}\nsigned main(){\n#ifndef ONLINE_JUDGE\n\tfreopen(\"testdata.in\",\"r\",stdin);\n#endif\n\tcin>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a[i]>>x;\n\t\tif(x)add(x,i);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!dep[i])dep[i]=1,dfs(i);\n\tcin>>m;\n\tfor(int i=1;i<=m;i++)cin>>x>>y,v[x].push_back(make_pair(y+dep[x],i));\n\tfor(int i=1;i<=n;i++)if(!vis[i])dsu(i),del(i);\n\tfor(int i=1;i<=m;i++)cout<<Ans[i]<<endl;\n#ifndef ONLINE_JUDGE\n\tcerr<<endl<<(double)clock()/CLOCKS_PER_SEC;\n#endif\n}\n```\n\u6211\u53bb\uff0c\u88ab\u57cb\u4f0f\u5230\u4e86\uff0c\u5c45\u7136\u662f\u4e2a\u68ee\u6797\u3002\u3002",
        "postTime": 1634014625,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "CF246E Blood Cousins Return \u8bb0\u5f55"
    },
    {
        "content": "\nUpdated On 2021.10.20\uff1a\u4fee\u6539\u4e86\u90e8\u5206 $\\LaTeX$\u3002\n\n### \u9898\u76ee\u5927\u610f\n\n> \u7ed9\u4f60\u4e00\u7247 $n$ \u4e2a\u70b9\u7684\u68ee\u6797\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u540d\u5b57\u3002\n>\n> \u6709 $m$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u70b9 $v_i$ \u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u540d\u5b57\u7684 $k_i$ \u7ea7\u513f\u5b50\u3002\n>\n> \uff08\u4e00\u4e2a\u8282\u70b9\u7684 $k$ \u7ea7\u513f\u5b50\u5373\u4e3a\u6df1\u5ea6\u662f\u8be5\u8282\u70b9\u6df1\u5ea6\u52a0 $k$ \u7684\u513f\u5b50\u8282\u70b9\u3002\uff09\n>\n> $1 \\le n,m \\le 10^5, 1 \\le v_i,k_i \\le n$\u3002\n\n### \u89e3\u9898\u601d\u8def\n\n\u554a\u8fd9\u9053\u9898\u540d\u5b57\u53eb `Blood Cousins Return`\uff0c\u800c\u4e4b\u524d\u7684 `CF208E` \u53eb `Blood Cousins`\uff0c\u53ef\u4ee5\u731c\u60f3\u8fd9\u4e24\u9898\u80af\u5b9a\u662f\u6709\u5173\u7cfb\u7684\uff08\u786e\u4fe1\uff09\u3002\n\n\u4e8b\u5b9e\u4e0a\u8fd8\u771f\u7684\u6709\u5173\u7cfb\uff0c\u4e0d\u8fc7\u5173\u7cfb\u4e0d\u5927\u3002\u4e0d\u4f1a `CF208E` \u7684\u53ef\u4ee5\u53bb\u770b[\u6211\u7684\u535a\u5ba2](https://www.encounter.cool/index.php/2021/10/19/cf208e-solution/)\u3002\n\n\u8ddf\u6df1\u5ea6\u6709\u5173\u7684\u95ee\u9898\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u51e0\u4e4e\u662f\u4e07\u80fd\u7684\u3002\u8003\u8651\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u6211\u4eec\u53ea\u8981\u5728\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u4e0a\u5f00\u4e2a `std::set` \uff0c\u7ef4\u62a4\u6df1\u5ea6\u4e3a\u5f53\u524d\u7ebf\u6bb5\u6811\u8282\u70b9\u4ee3\u8868\u533a\u95f4 $l \\sim r$ \u7684\u70b9\u7684\u540d\u5b57\u653e\u5728\u4e00\u8d77\uff0c\u518d\u53bb\u91cd\u540e\u7684\u7ed3\u679c\u3002\u6bcf\u6b21\u5408\u5e76\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u65f6\u5019\u76f4\u63a5\u628a $size$ \u5c0f\u7684 `set` \u5408\u5e76\u5230 $size$ \u5927\u7684 `set` \u4e0a\uff0c\u5927\u6982\u662f\u53eb\u505a `set` \u7684\u542f\u53d1\u5f0f\u5408\u5e76\uff1f\n\n\u8003\u8651\u8bc1\u660e\u590d\u6742\u5ea6\u3002\n\n\u6211\u4eec\u8003\u8651\u7c7b\u4f3c\u4e8e\u8f7b\u91cd\u94fe\u5256\u5206\u7684\u601d\u60f3\uff0c\u6bcf\u4e2a\u70b9\u79bb\u5f00\u81ea\u5df1 `set` \u88ab\u5408\u5e76\u5230\u5176\u4ed6 `set` \u7684\u6b21\u6570\u4e00\u5b9a\u4e0d\u8d85\u8fc7 $O(\\log\u2061n)$ \u6b21\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8fd9\u4e48\u505a\uff0c`set` \u7684 $siz$ \u81f3\u5c11\u4e58 $2$ \u3002\u800c\u5728 $siz$ \u5927\u7684 `set` \u91cc\u662f\u76f4\u63a5\u7ee7\u627f\u7684\u3002\u52a0\u4e0a `set` \u672c\u8eab\u5e73\u8861\u6811\u7684\u590d\u6742\u5ea6\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f $O(n \\log^2\u2061 n)$ \u7684\u3002\n\n### Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200005,LogN=20;\n\nbool St;\n\nstruct Edge{\n\tint vet,nxt;\n}e[N<<1];\n\nstruct Ques{\n\tint val,ord;\n};\n\nstruct Node{\n\tint lson,rson;\n\tset <int> s;\n}tree[N*LogN];\n\nint n,m,edge=0,logN=0,head[N];\nint fa[N],dep[N],name[N];\nint ans[N],rt[N],cntNode=0,cntMap=0;\nbool isrt[N];\nvector <Ques> q[N];\nmap <string,int> Map;\n\ninline int read(){\n\tint x=0,f=1; char ch=getchar();\n\twhile (!isdigit(ch)){ if (ch=='-') f=-1; ch=getchar(); }\n\twhile (isdigit(ch)){ x=x*10+ch-'0'; ch=getchar(); }\n\treturn x*f;\n}\n\ninline void addedge(int x,int y){\n\te[++edge].vet=y;\n\te[edge].nxt=head[x];\n\thead[x]=edge;\n}\n\ninline void dfs(int x,int fath){\n\tfa[x]=fath; dep[x]=dep[fath]+1;\n\tfor (int i=head[x];i;i=e[i].nxt){\n\t\tint v=e[i].vet;\n\t\tif (v==fath) continue;\n\t\tdfs(v,x);\n\t}\n}\n\n#define lid (tree[id].lson)\n#define rid (tree[id].rson)\n\nvoid pushup(int id){\n\tif (tree[lid].s.size()>tree[rid].s.size()){\n\t\ttree[id].s=tree[lid].s;\n\t\tfor (auto it : tree[rid].s)\n\t\t\ttree[id].s.insert(it);\n\t}\n\telse {\n\t\ttree[id].s=tree[rid].s;\n\t\tfor (auto it : tree[lid].s)\n\t\t\ttree[id].s.insert(it);\n\t}\n}\n\nvoid Insert(int& id,int l,int r,int x,int val){\n\tif (!id) id=++cntNode;\n\tif (l==r){\n\t\ttree[id].s.insert(val);\n\t\treturn void();\n\t}\n\tint mid=(l+r)>>1;\n\tif (x<=mid) Insert(lid,l,mid,x,val);\n\telse Insert(rid,mid+1,r,x,val);\n\tpushup(id);\n}\n\nint Mergeset(int x,int y){\n\tif (tree[x].s.size()>tree[y].s.size()){\n\t\tfor (auto it : tree[y].s)\n\t\t\ttree[x].s.insert(it);\n\t\treturn x;\n\t}\n\telse {\n\t\tfor (auto it : tree[x].s)\n\t\t\ttree[y].s.insert(it);\n\t\treturn y;\n\t}\n}\n\nint Merge(int x,int y,int l,int r){\n\tif (!x) return y;\n\tif (!y) return x;\n\tif (l==r) return Mergeset(x,y);\n\tint mid=(l+r)>>1;\n\ttree[x].lson=Merge(tree[x].lson,tree[y].lson,l,mid);\n\ttree[x].rson=Merge(tree[x].rson,tree[y].rson,mid+1,r);\n\t// pushup(x);\n\treturn x;\n}\n\nint Query(int id,int l,int r,int val){\n\tif ((!id) || (l>r)) return 0;\n\tif (l==r) return tree[id].s.size();\n\tint mid=(l+r)>>1;\n\tif (val<=mid) return Query(lid,l,mid,val);\n\telse return Query(rid,mid+1,r,val);\n}\n\ninline void Dfs(int x,int fath){\n\t// printf(\"x=%d fath=%d dep[x]=%d\\n\",x,fath,dep[x]);\n\trt[x]=++cntNode;\n\tInsert(rt[x],1,n+1,dep[x],name[x]);\n\tfor (int i=head[x];i;i=e[i].nxt){\n\t\tint v=e[i].vet;\n\t\tif (v==fath) continue;\n\t\tDfs(v,x);\n\t\trt[x]=Merge(rt[x],rt[v],1,n+1);\n\t}\n\tfor (auto it : q[x])\n\t\tans[it.ord]=Query(rt[x],1,n+1,it.val);\n}\n\nint main(){\n\t//freopen(\"CF246E.in\",\"r\",stdin);\n\t//freopen(\"CF246E.out\",\"w\",stdout);\n\tios::sync_with_stdio(false);\n\tcin>>n; logN=(int)(log2(n)+1);\n\tfor (int i=1;i<=n;++i){\n\t\tint x; string str; cin>>str>>x;\n\t\tif (Map.find(str)==Map.end()) Map[str]=name[i]=++cntMap;\n\t\telse name[i]=Map[str];\n\t\tif (x==0){ isrt[i]=true; continue; }\n\t\taddedge(x,i);\n\t\taddedge(i,x);\n\t}\n\tcin>>m;\n\tfor (int i=1;i<=n;++i)\n\t\tif (isrt[i]) dfs(i,0);\n\tfor (int i=1;i<=m;++i){\n\t\tint x,y; cin>>x>>y;\n\t\tq[x].push_back((Ques){dep[x]+y,i});\n\t}\n\tfor (int i=1;i<=n;++i)\n\t\tif (isrt[i]) Dfs(i,0);\n\tfor (int i=1;i<=m;++i)\n\t\tprintf(\"%d\\n\",ans[i]);\n\tbool Ed; cerr<<\"MemoryUsed:\"<<1.0*(&St-&Ed)/1024/1024<<endl;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1634613091,
        "uid": 119264,
        "name": "Alkaid_Star",
        "ccfLevel": 0,
        "title": "CF246E Blood Cousins Return\uff08\u7ebf\u6bb5\u6811\u5408\u5e76\u5957set\uff09\u9898\u89e3"
    },
    {
        "content": "## $ \\texttt{Introduction} $\n\n\u6811\u4e0a $ \\text{dsu} $ \u4f8b\u9898\u3002\n\n## $ \\texttt{Solution} $ \n\n\u9996\u5148\u5c06\u68ee\u6797\u7684\u95ee\u9898\u89e3\u51b3\u597d\uff0c\u5c31\u662f\u628a $ 0 $ \u4e5f\u5f53\u505a\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u5c31\u89e3\u51b3\u4e86\u3002\n\n\u9996\u5148\u6811\u4e0a $ \\text{dsu} $ \u7684\u524d\u63d0\u662f\u8981\u505a\u51fa $ O(n^2) $ \u7684\u66b4\u529b\uff0c\u800c\u4e14\u8fd9\u4e2a\u66b4\u529b\u53ea\u4e0e\u5b50\u6811\u7684\u7b54\u6848\u6709\u5173\u3002\n\n\u5982\u4f55\u66b4\u529b\u7684\u6700\u5173\u952e\u7684\u4e00\u70b9\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $ x $ \uff0c\u4ed6\u7684 $ \\text{K-son} $ \u6709\u591a\u5c11\u7684\u4e0d\u540c\u7684\u503c\uff0c\u800c\u4e14\u6ca1\u6709\u4efb\u4f55\u533a\u95f4\uff0c\u5c31\u662f\u4e00\u6574\u4e2a $ \\text{K-son} $\uff0c\u800c\u6211\u4eec\u5e73\u65f6\u78b0\u5230\u7684\u4e1c\u897f\u4ec0\u4e48\u4e1c\u897f\u4e0d\u6ee1\u8db3\u53ef\u91cd\u6027\u3002\u90a3\u5c31\u662f\u96c6\u5408\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 $ \\text{set} $ \u53bb\u7ef4\u62a4\u8fd9\u6837\u5b50\u7684\u4e00\u4e2a\u4e1c\u897f\u3002\n\n\u6211\u4eec\u5047\u8bbe $ val[x] $ \u8868\u793a\u5f53\u524d\u5b50\u6811\u4e0b\u6df1\u5ea6\u4e3a $ x $ \u7684\u8282\u70b9\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u6570\uff0c\u90a3\u4e48\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u5c31\u5224\u65ad\u4ed6\u6709\u6ca1\u6709\u5728\u96c6\u5408\u4e2d\uff0c\u5982\u679c\u4ed6\u5728\uff0c\u90a3\u4e48\u4e0d\u52a0\u5165\uff0c\u5426\u5219\u76f4\u63a5\u52a0\u5165\uff0c\u5230\u73b0\u5728\uff0c\u6211\u4eec\u7684\u66b4\u529b\u5df2\u7ecf\u5b8c\u6210\uff0c\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u628a\u8fd9\u4e2a\u66b4\u529b\u8f6c\u6362\u6210\u6811\u4e0a $ \\text{dsu} $\u3002\n\n\u8fd9\u4e2a\u5c31\u5341\u5206\u5957\u8def\u4e86\uff0c\u6211\u4eec\u53d1\u73b0\u4ee5\u5176\u4ed6\u513f\u5b50\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8d21\u732e\u662f\u4e0d\u8981\u7684\uff0c\u6240\u4ee5\u76f4\u63a5 $ \\text{set} $ \u6e05\u7a7a\u5c31\u597d\u4e86\uff0c\u52a0\u70b9\u8fd8\u662f\u66b4\u529b\u7684\u52a0\u70b9\u3002\n\n## $ \\texttt{Code} $\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n//build1:find depth,father,size,height_son \n//build2:find height_son's top and height_son's id\nstruct node{\n\tint col,top,fa,siz,hson,dep;\n} E[510100];\nset<int> Set[201010];\nint col[1001010],up[1001010],Answer[1001010],opt,H[1010100],dfn[1010100],e[1010100],a[1010100],b[1010100],d[1010100],ans;\nint len,u,v,cnt,n,m,i,T,x,y,id;\nbool exist[1010100];\nstring lsh[1001010],Strin[100100];\nint Testing;\nvector<pair<int,int>> Asking[101000];\nvoid add(int x,int y)\n{\n\tcnt++;a[cnt]=y;b[cnt]=d[x];d[x]=cnt;\n}\nvoid build1(int x,int fa)\n{\n\tid++;dfn[x]=id;\n\tE[x].siz=1;int mx=0;E[x].hson=0;\n\tfor (int i=d[x];i;i=b[i])\n\t   if (a[i]!=fa)\n\t     {\n\t     \tE[a[i]].dep=E[x].dep+1;\n            E[a[i]].fa=x;build1(a[i],x);E[x].siz+=E[a[i]].siz; \n\t\t\tif (E[a[i]].siz>mx) mx=E[a[i]].siz,E[x].hson=a[i];    \t\n\t\t }\n\tif (E[x].hson!=0) exist[E[x].hson]=true;\n}\nvoid delet(int x)\n{\n\t//cout<<\"-----\"<<x<<\"-----\\n\";\n\tfor (int i=dfn[x];i<=dfn[x]+E[x].siz-1;i++)\n\t      Set[E[H[i]].dep].clear();\n}\nvoid insert(int x,int fa)\n{\n\tfor (int i=dfn[x];i<=dfn[x]+E[x].siz-1;i++)\n\t      Set[E[H[i]].dep].insert(E[H[i]].col);\n}\nvoid sc(int x,int fa)\n{\n\tint i;\n\tfor (i=d[x];i;i=b[i])\n\t     if (a[i]!=fa)\n\t         if (a[i]!=E[x].hson)\n\t            {\n\t            sc(a[i],x);\n\t            delet(a[i]);\n\t            }\n\tif (E[x].hson!=0)\n\t    {\n\t     sc(E[x].hson,x);\n\t     //cout<<\"---\"<<x<<\"---:\"<<Answer[x]<<endl;\n    \tfor (i=d[x];i;i=b[i])\n\t     if (a[i]!=fa)\n\t         if (a[i]!=E[x].hson)\n\t            insert(a[i],x);\n\t   }\n\tSet[E[x].dep].insert(E[x].col);\n\tfor (i=0;i<Asking[x].size();i++)\n\t    Answer[Asking[x][i].second]=Set[E[x].dep+Asking[x][i].first].size();\n}\nint main()\n{\n\tios::sync_with_stdio(0);cin.tie();cout.tie();\n\tchar s[1010];\n\tcin>>n;\n\tfor (i=1;i<=n;i++) \n\t    {\n\t    \tcin>>Strin[i]>>x;\n\t    \tlsh[i]=Strin[i];\n\t    \tif (x==0) x=n+1;\n\t    \tadd(x,i);\n\t\t } \n\tsort(lsh+1,lsh+n+1);len=unique(lsh+1,lsh+n+1)-lsh-1;\n\tfor (i=1;i<=n;i++) E[i].col=lower_bound(lsh+1,lsh+len+1,Strin[i])-lsh;\n\tE[n+1].dep=1;build1(n+1,0);\n\tfor (i=1;i<=n+1;i++) H[dfn[i]]=i;\n\tcin>>Testing; \n\tfor (i=1;i<=Testing;i++)\n\t   { \n\t     cin>>x>>y;\n\t      Asking[x].push_back(make_pair(y,i));\n\t   }\n\tsc(n+1,0);\n\tfor (i=1;i<=Testing;i++) cout<<Answer[i]<<endl;\n return 0;\n}\n```\n\n",
        "postTime": 1634043980,
        "uid": 508480,
        "name": "Albedo",
        "ccfLevel": 0,
        "title": "CF246E Blood Cousins Return"
    },
    {
        "content": "\u6bd5\u7adf\u662f\u521a\u5b66\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u53ef\u80fd\u4f1a\u8bb2\u5f97\u7a0d\u5fae\u7ec6\u4e00\u70b9\u3002\n\n### [CF246E Blood Cousins Return](https://www.luogu.com.cn/problem/CF246E)\n\n\u7ffb\u8bd1\n\n> \u7ed9\u5b9a\u4e00\u7247\u68ee\u6797\uff0c\u8be2\u95ee\u6bcf\u4e2a\u8282\u70b9 $v$\uff0c\u5176\u6df1\u5ea6\u4e3a $k$ \u7684\u513f\u5b50\u4e2d\u4e0d\u540c\u7684\u540d\u5b57\u4e2a\u6570\u3002\n\n\u8f93\u5165\u683c\u5f0f\n> n \u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u540d\u5b57\u548c\u7236\u4eb2, \u4e4b\u540e\u662f $q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u884c\u8f93\u5165 v \u548c k\u3002\n\n~~\u8bdd\u8bf4\u56e0\u4e3a\u82f1\u8bed\u5dee\uff0c\u770b\u4e86\u7ffb\u8bd1\u597d\u4e45\u3002~~\n\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u5047\u8bbe\u6ca1\u6709\u76f8\u540c\u540d\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u901a\u8fc7\u6743\u503c\u7ebf\u6bb5\u6811\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u6df1\u5ea6\uff0c\u56e0\u4e3a $depmax \\le n$ \u663e\u7136\u53ef\u884c\u3002\n\n> \u4e4b\u524d\u60f3\u7684\u65f6\u5019\u603b\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u7ebf\u6bb5\u6811\u5177\u4f53\u7ef4\u62a4\u6df1\u5ea6\u662f\u5168\u5c40\u7684\u6df1\u5ea6\u8fd8\u662f\u76f8\u5bf9\u6df1\u5ea6\uff0c\u5176\u5b9e\u4ed4\u7ec6\u60f3\u8fc7\u4e4b\u540e\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u80af\u5b9a\u662f\u7ef4\u62a4\u5168\u5c40\u6df1\u5ea6\uff0c\u56e0\u4e3a\u8fd9\u6837\u5408\u5e76\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u505a\u5230 $O(1)$ \u7684\u590d\u6742\u5ea6\u3002\n\n\u4e4b\u540e\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u540d\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5224\u91cd\uff0c\u518d\u8d4b\u4e88\u4e00\u4e2a\u65b0\u7684\u7f16\u53f7\uff0c\u8fd9\u6837\u505a\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u5019\u8c8c\u4f3c\u4f1a\u7b80\u5355\u4e00\u70b9\uff0c\u5173\u952e\u770b\u662f\u600e\u4e48\u5224\u91cd\u7684\u3002\n\n\u4e4b\u540e\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u8fd0\u7528 set \u8fdb\u884c\u7ef4\u62a4\u548c\u5224\u91cd\u3002\u53ef\u4ee5\u53d1\u73b0\u5408\u5e76\u7684\u65f6\u5019\u662f\u4e24\u4e2a set \u66b4\u529b\u5408\u5e76\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5c0f\u7684\u5408\u5e76\u5230\u5927\u7684\u91cc\u9762\u53bb\u6765\u51cf\u5c0f\u590d\u6742\u5ea6\u3002\n\n\u4e4b\u540e\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u5f00\u5927 tree \u6570\u7ec4\u7684\u65f6\u5019\uff0c\u522b\u5fd8\u8bb0\u5c06\u5224\u91cd\u7684\u6570\u7ec4\u4e5f\u5f00\u5927\u3002\n\n----\n$Code$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\nvoid r1(T &x) {\n\tx = 0;\n\tchar c(getchar());\n\tint f(1);\n\tfor(; !isdigit(c); c = getchar()) if(c == '-') f = -1;\n\tfor(; isdigit(c);c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48);\n\tx *= f;\n}\n\nconst int maxn = 1e5 + 5;\nconst int maxm = maxn << 1;\n\ntypedef int room[maxn];\n\nint n, m;\nmap<string, int> vis;\nint num(0), v[maxn];\nint dep[maxn];\nstruct Node {\n\tint l, r, id;\n}t[maxn * 21];\nint stlen(0);\nset<int> st[maxn * 21];\nstruct Seg {\n\tint tot;\n\tSeg() : tot(0) {}\n\t#define mid ((l + r) >> 1)\n\tvoid Insert(int &p,int l,int r,int pos,int v) {\n\t\tif(!p) p = ++ tot;\n\t\tif(l == r) return !t[p].id ? t[p].id = ++ stlen : 0, st[t[p].id].insert(v), void();\n\t\tif(pos <= mid) Insert(t[p].l, l, mid, pos, v);\n\t\telse Insert(t[p].r, mid + 1, r, pos, v);\n\t}\n\tvoid merge(int &p,int v,int l,int r) {\n\t\tif(!p || !v) return p = p + v, void();\n\t\tif(l == r) {\n\t\t\tif(!t[p].id) t[p].id = ++ stlen;\n\t\t\telse {\n\t\t\t\tif(st[t[p].id].size() < st[t[v].id].size()) swap(st[t[p].id], st[t[v].id]);\n\t\t\t\tfor(set<int> :: iterator it = st[t[v].id].begin(); it != st[t[v].id].end(); ++ it)\n\t\t\t\t\tst[t[p].id].insert(*it);\n\t\t\t\tst[t[v].id].clear();\n\t\t\t}\n\t\t\treturn ;\n\t\t}\n\t\tmerge(t[p].l, t[v].l, l, mid), merge(t[p].r, t[v].r, mid +1 , r);\n \t}\n \tint ask(int p,int l,int r,int pos) {\n \t\tif(!p) return 0;\n \t\tif(l == r) return st[t[p].id].size();\n \t\tif(pos <= mid) return ask(t[p].l, l, mid, pos);\n \t\telse return ask(t[p].r, mid + 1, r, pos);\n\t }\n}T;\nstruct Edge {\n\tint to, next;\n}edg[maxn << 1];\nint head[maxn], cnt;\nvoid add(int u, int v) {\n\tedg[++ cnt] = (Edge) {v, head[u]}, head[u] = cnt;\n}\nstruct Query {\n\tint dep, id;\n\tQuery(int a,int b) : dep(a), id(b) {}\n};\nvector<Query> vc[maxn];\nint ans[maxn];\nint rt[maxn];\nvoid dfs(int p,int f) {\n//\tdep[p] = dep[f] + 1;\n\tT.Insert(rt[p], 1, n, dep[p], v[p]);\n\tfor(int i = head[p];i;i = edg[i].next) {\n\t\tint to = edg[i].to;\n\t\tif(to == f) continue;\n\t\tdfs(to, p);\n\t\tT.merge(rt[p], rt[to], 1, n);\n\t}\n\tfor(vector<Query> :: iterator it = vc[p].begin(); it != vc[p].end(); ++ it)\n\t\tans[it->id] = T.ask(rt[p], 1, n, it->dep);\n}\n\nvoid dfs1(int p,int dep1,int f) {\n    dep[p] = dep1;\n    for(int i = head[p];i;i = edg[i].next) {\n        int to = edg[i].to;\n        if(to == f) continue;\n        dfs1(to, dep1 + 1, p);\n    }\n}\n\n\nsigned main() {\n\tint i, j;\n\tr1(n);\n\tfor(i = 1;i <= n; ++ i) {\n\t\tint x;\n\t\tstring s;\n\t\tcin >> s;\n\t\tr1(x);\n\t\tif(vis[s]) v[i] = vis[s];\n\t\telse vis[s] = v[i] = ++ num;\n\t\tadd(x, i);\n\t}\n\tr1(m);\n\tdfs1(0, 0, 0);\n\tfor(i = 1;i <= m; ++ i) {\n\t\tint x, k;\n\t\tr1(x), r1(k);\n\t\tif(dep[x] + k <= n)\n\t\tvc[x].push_back(Query(dep[x] + k, i));\n\t}\n\tdfs(0, 0);\n\tfor(i = 1; i <= m; ++ i) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1614949412,
        "uid": 151723,
        "name": "legendgod",
        "ccfLevel": 7,
        "title": "CF246E Blood Cousins Return \u9898\u89e3"
    },
    {
        "content": "# \u5206\u6790\n\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u4e00\u4e2a\u8282\u70b9\u7684 $\\text{K-son}$ \uff0c\u8fd9\u91cc\u91c7\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u6765\u7ef4\u62a4\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u3002\u7136\u540e\u5bf9\u4e8e\u76f8\u540c\u6df1\u5ea6\u7684\u8282\u70b9\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a $\\text{set}$ \uff0c\u8fd9\u6837\u5c31\u514d\u53bb\u4e86\u53bb\u91cd\u3002\u800c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$ \u3002\u52a0\u4e0a $\\text{set}$ \u603b\u7684\u590d\u6742\u5ea6\u5c31\u4e3a $O(n\\log^2n)$ \u3002\u6240\u4ee5\u8981\u8bb0\u5f97\u5173\u95ed\u6d41\u540c\u6b65\u3002[$QAQ$](https://www.luogu.com.cn/blog/xzc/solution-cf246e)\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 2e6 + 100;\nint son[N],dep[N],L[N],id[N],R[N],Id,si[N];\nint val[N],fa[N],MaxDep,n,m,top,ans[N];\nunordered_map<string,int> Map;\nvector<int> G[N];\nset<int> cnt[N];\nstruct query{int id,k;};\nvector<query> Q[N];\nvoid dfs(int x,int Dep) {\n\tdep[x] = Dep;si[x] = 1;;id[L[x] = ++Id] = x;\n\tMaxDep = max(MaxDep,Dep);\n\tfor(auto y:G[x]) {\n\t\tif(y == fa[x]) continue;\n\t\tdfs(y,Dep+1);\n\t\tsi[x] += si[y];if(si[son[x]] < si[y]) son[x] = y;\n\t}\n\tR[x] = Id;\n}\nvoid solve(int x,int keep) {\n\tfor(auto y:G[x]) {if(y == fa[x] || y == son[x]) continue;solve(y,0);}\n\tif(son[x]) solve(son[x],1);\n\tfor(auto y:G[x]) {\n\t\tif(y == fa[x] || y == son[x]) continue;\n\t\tfor(int i = L[y];i <= R[y];i++) {\n//\t\t\tcout << i <<\" \"<<id[i] <<endl;\n\t\t\tint u = id[i];\n//\t\t\tcout <<\"insert:: \"<<u<<\"  \"<<val[u] << endl;\n\t\t\tcnt[dep[u]].insert(val[u]);\n\t\t}\n\t}\n\tcnt[dep[x]].insert(val[x]);\n\tfor(auto Ans:Q[x]) {\n\t\tint nxt = Ans.k + dep[x];\n\t\tans[Ans.id] = cnt[nxt].size();\n\t}\n\tif(keep) return;\n\tfor(int i = 1;i <= MaxDep;i++) cnt[i].clear();\n}\nint main()\n{\n\tios::sync_with_stdio(0);\n\tcin >> n;\n\tfor(int i = 1;i <= n;i++) {\n\t\tstring A;cin >> A >> fa[i];\n\t\tif(!Map[A]) Map[A] = ++top;\n\t\tval[i] = Map[A];//cout << val[i] << endl;\n\t\tif(fa[i]) G[fa[i]].push_back(i);\n\t\tif(fa[i]) G[i].push_back(fa[i]);\n\t}\n\tfor(int i = 1;i <= n;i++) {if(!fa[i]) dfs(i,1);}\n\tcin >> m;\n\tfor(int i = 1,x,y;i <= m;i++) {\n\t\tcin >> x >> y;\n\t\tQ[x].push_back((query){i,y});\n\t}\n\tfor(int i = 1;i <= n;i++) {if(!fa[i]) solve(i,0);}\n\tfor(int i = 1;i <= m;i++) cout << ans[i] << endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1599741415,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF246E \u3010Blood Cousins Return\u3011"
    },
    {
        "content": "### CF246E Blood Cousins Return\n\n#### \u9898\u610f\n\n\uff08\u6211\u89c9\u5f97\u7ffb\u8bd1\u633a\u7b80\u6d01\u7684\u5c31\u4e0d\u81ea\u5df1\u6982\u62ec\u4e86\uff09\n\n> $~~~~$ \u7ed9\u5b9a\u4e00\u7247\u68ee\u6797\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u8282\u70b9\u7684K-Son\u5171\u6709\u4e2a\u591a\u5c11\u4e0d\u540c\u7684\u540d\u5b57\u3002\u4e00\u4e2a\u8282\u70b9\u7684K-Son\u5373\u4e3a\u6df1\u5ea6\u662f\u8be5\u8282\u70b9\u6df1\u5ea6\u52a0K\u7684\u8282\u70b9\u3002\n\n---\n\n#### \u9898\u89e3  \n\n$~~~~$ \u53ef\u4ee5\u60f3\u5230\u4e00\u9053~~\u540d\u5b57\u548c~~\u5185\u5bb9\u548c\u5b83\u5f88\u76f8\u4f3c\u7684\u9898[CF246E](https://www.luogu.com.cn/problem/CF246E \"\u6c42k\u7ea7\u7956\u5148\u7684k\u7ea7\u513f\u5b50\u4e2a\u6570\") \uff0c\u90a3\u9053\u9898\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u5c31\u662f\u6c42 $k$ \u7ea7\u513f\u5b50\u7684\u4e2a\u6570\uff0c\u76f4\u63a5\u7528 Dsu on tree \u5373\u53ef\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u6b21\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u4e0d\u540c\u6df1\u5ea6\u7684\u70b9\u7684\u4e2a\u6570\u5373\u53ef\u3002  \n\n$~~~~$ \u8fd9\u9898\u4e0d\u5927\u4e00\u6837\uff0c\u9700\u8981\u8ba1\u7b97\u7684\u662f\u79cd\u7c7b\u6570\u800c\u4e0d\u662f\u4e2a\u6570\uff0c\u4f46\u6362\u4e2a\u89d2\u5ea6\u601d\u8003\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u79cd\u7c7b\u6570\u770b\u4f5c\u53bb\u91cd\u8fc7\u540e\u7684\u4e2a\u6570\uff0c\u90a3\u6211\u4eec\u7684 `cnt` \u5c31\u8981\u80fd\u591f\u53bb\u91cd\u5e76\u4e14\u8ba1\u7b97\u5143\u7d20\u4e2a\u6570\u3002  \n\n$~~~~$ ~~\u76f4\u63a5\u4e00\u4e2a STL `set` \u7529\u4e0a\u53bb\u5f53`cnt`\u5c31\u884c\u4e86.~~\n\n$~~~~$ \u73b0\u5728\u7684\u9700\u6c42\u7c7b\u4f3c\u4e8e [P1972 [SDOI2009]HH\u7684\u9879\u94fe](https://www.luogu.com.cn/problem/P1972)\uff0c\u53ea\u662f\u8fd9\u662f\u533a\u95f4\u95ee\u9898\uff0c\u90a3\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u5c1d\u8bd5\u628a\u8fd9\u4e2a\u6811\u4e0a\u7684\u95ee\u9898\u641e\u4e0b\u6765\uff0c\u53d8\u6210\u533a\u95f4\u7684\u95ee\u9898\u5462\uff1f  \n\n$~~~~$ \u5f53\u7136\u53ef\u4ee5\uff01\u6211\u4eec\u8003\u8651\u5230\u6bcf\u4e2a\u8be2\u95ee\u7684\u5bf9\u5e94\u533a\u95f4\u6df1\u5ea6\u4e00\u81f4\uff0c\u90a3\u5c31\u53ef\u4ee5\u53d8\u6210\u8bb0\u5f55\u6bcf\u4e2a\u8be2\u95ee\u7684\u533a\u95f4\u6df1\u5ea6\uff0c\u5728 dfs\u5e8f\u4e0a\u4e24\u4e2a\u7aef\u70b9\u7684\u503c\uff0c\u6309\u6df1\u5ea6\u6392\u5e8f\u540e\u4e00\u6b21\u6309\u6df1\u5ea6\u5bf9\u5f62\u6210\u7684\u533a\u95f4\u6c42\u89e3\u5373\u53ef\u3002  \n\n$~~~~$ \u81f3\u4e8e\u8fd9\u4e2a\u6c42\u89e3\uff0c\u7406\u8bba\u4e0a\u662f\u8981\u7528 BIT \u7684\uff0c\u4e0d\u4f1a\u7684\u8bdd\u53ef\u4ee5\u53bb\u770b\u4e00\u4e0b\u539f\u9898\u3002\u4f46\u4e0d\u77e5\u9053 \u83ab\u961f \u80fd\u4e0d\u80fd\u5361\u8fc7\u53bbawa.",
        "postTime": 1599552045,
        "uid": 160701,
        "name": "Azaz\u0435l",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF246E \u3010Blood Cousins Return\u3011"
    },
    {
        "content": "\u5e7f\u544a\uff1a\u6211\u7684[\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u603b\u7ed3](https://blog.csdn.net/pb122401/article/details/84648993)\n\n\u53c8\u662f\u4e00\u9053$DSU\\; on\\; Tree$\u6a21\u677f\u9898\uff0c\u4f46\u5b58\u50a8\u65b9\u5f0f\u7531\u6570\u7ec4\u5347\u7ea7\u4e3amap\uff08\u5176\u5b9e\u4e5f\u6ca1\u6709\u5347\u7ea7\u591a\u5c11\uff09\n\n\u5f00\u4e00\u4e2a`map<string,int>cnt[sz]`\u8bb0\u5f55\u5f53\u524d\u6bcf\u4e2a\u6df1\u5ea6\u91cc\u6bcf\u4e2a\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u518d\u7528`sum[sz]`\u8bb0\u5f55\u6bcf\u4e2a\u6df1\u5ea6\u5f53\u524d\u7b54\u6848\u5373\u53ef\n\n\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(nlog^2n)$\u5427\u2026\u2026\u80e1\u4e71\u5206\u6790$ing$\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define sz 1000020\n#define mod 998244353\nusing namespace std;\ntypedef long long ll;\nint n;\nstruct hh{int t,nxt;}edge[sz<<1];\nint head[sz],ecnt;\nvoid make_edge(int f,int t)\n{\n\tedge[++ecnt]=(hh){t,head[f]};\n\thead[f]=ecnt;\n\tedge[++ecnt]=(hh){f,head[t]};\n\thead[t]=ecnt;\n}\n#define go(x) for (int i=head[x];i;i=edge[i].nxt)\n#define v edge[i].t\nint dep[sz],size[sz],son[sz],fa[sz];\nvoid dfs1(int x,int fa)\n{\n\tdep[x]=dep[fa]+1;size[x]=1;\n\tgo(x) if (v!=fa)\n\t{\n\t\tdfs1(v,x);\n\t\tsize[x]+=size[v];\n\t\tif (size[v]>size[son[x]]) son[x]=v;\n\t}\n}\nmap<string,int>S[sz];\nint sum[sz];\nstring a[sz];\nbool s[sz];\nvoid add(string s,int d,int t)\n{\n\tif (!S[d][s]) ++sum[d];\n\tS[d][s]+=t;\n\tif (!S[d][s]) --sum[d];\n}\nvoid add(int x,int fa,int t)\n{\n\tadd(a[x],dep[x],t);\n\tgo(x) if (v!=fa&&!s[v]) add(v,x,t);\n}\n#define pii pair<int,int>\n#define MP make_pair\n#define fir first\n#define sec second\nvector<pii>q[sz];\nint ans[sz];\nvoid dfs2(int x,int fa,bool keep)\n{\n\tgo(x) if (v!=fa&&v!=son[x]) dfs2(v,x,0);\n\ts[son[x]]=1;\n\tif (son[x]) dfs2(son[x],x,1);\n\tadd(x,fa,1);\n\tfor (int i=0;i<(int)q[x].size();i++) ans[q[x][i].fir]=sum[q[x][i].sec];\n\ts[son[x]]=0;\n\tif (!keep) add(x,fa,-1); \n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tint i,x,y,m;\n\tcin>>n;\n\tfor (i=1;i<=n;i++) { cin>>a[i]>>fa[i]; if (fa[i]) make_edge(fa[i],i); }\n\tfor (i=1;i<=n;i++) if (!fa[i]) dfs1(i,0);\n\tcin>>m;\n\tfor (i=1;i<=m;i++)\n\t{\n\t\tcin>>x>>y;\n\t\tq[x].push_back(MP(i,dep[x]+y));\n\t}\n\tfor (i=1;i<=n;i++) if (!fa[i]) dfs2(i,0,0);\n\tfor (i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);\n}\n```",
        "postTime": 1543296012,
        "uid": 76481,
        "name": "p_b_p_b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF246E \u3010Blood Cousins Return\u3011"
    },
    {
        "content": "\u6211\u4eec\u8003\u8651\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5c06\u6240\u6709\u540d\u5b57\u90fd Hash \u5904\u7406\u4e00\u4e0b\uff0c\u7136\u540e\u5408\u5e76\u7684\u65f6\u5019\u7528 map \u5b58\u4e00\u4e0b\u4e4b\u524d\u76f8\u540c\u6df1\u5ea6\u7684\u70b9\u4e0a\u51fa\u73b0\u8fc7\u8fd9\u4e2a\u540d\u5b57\u51e0\u6b21\uff0c\u5373\u53ef\u77e5\u9053\u5f53\u524d\u52a0\u5165\u7684\u540d\u5b57\u662f\u5426\u6709\u8d21\u732e\u3002               \n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 1e5 + 5;\nconst int K = 131;\nlong unsigned long Hash,Name[Len];\nmap<long unsigned long,int> mp[Len];\nint n,m,head[Len],cnts,cnt[Len << 2],dep[Len],siz[Len],son[Len],dp[Len][30],Son,ans[Len];\nbool vis[Len];\nvector<int> root;\nstruct node\n{\n\tint next,to;\n}edge[Len << 1];\nvoid add(int from,int to)\n{\n\tedge[++ cnts].to = to;\n\tedge[cnts].next = head[from];\n\thead[from] = cnts;\n}\nstruct Node\n{\n\tint depth,idx;\n};\nvector<Node> G[Len];\nvoid Add(int x,int val)\n{\n\tif(val == 1) \n\t{\n\t\tif(!mp[dep[x]][Name[x]]) cnt[dep[x]] ++;\n\t\tmp[dep[x]][Name[x]] ++;\n\t}\n\telse \n\t{\n\t\tif(mp[dep[x]][Name[x]] == 1) cnt[dep[x]] --;\n\t\tmp[dep[x]][Name[x]] --;\n\t}\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == Son) continue;\n\t\tAdd(to , val);\n\t}\n}\nvoid dfs1(int x,int f)\n{\n\tdep[x] = dep[f] + 1;\n\tsiz[x] = 1;\n\tdp[x][0] =  f;\n\tint maxson = -1;\n\tfor(int i = 1 ; (1 << i) <= dep[x] ; i ++) dp[x][i] = dp[dp[x][i - 1]][i - 1];\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tdfs1(to , x);\n\t\tsiz[x] += siz[to];\n\t\tif(maxson < siz[to]) maxson = siz[to] , son[x] = to;\n\t}\n}\nint Find(int x,int k)//\u722c\u6811 \n{\n\tfor(int i = 20 ; i >= 0 ; i --) if((1 << i) <= k) k -= (1 << i) , x = dp[x][i];\n\treturn x;\n}\nvoid dfs2(int x,int f,int opt)\n{\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == son[x]) continue;\n\t\tdfs2(to , x , 0);\n\t}\t\n\tif(son[x]) dfs2(son[x] , x , 1) , Son = son[x];\n\tAdd(x , 1) , Son = 0;\n\tfor(int e = 0 ; e < G[x].size() ; e ++) ans[G[x][e].idx] = cnt[G[x][e].depth];\n\tif(!opt) Add(x , -1);\n}\nchar s[Len];\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tint x;scanf(\"%s\",s + 1);\n\t\tint lens = strlen(s + 1);Hash = 0;\n\t\tfor(int j = 1 ; j <= lens ; j ++) Hash = Hash * K + s[j] - '0';\n\t\tName[i] = Hash;\n\t\tscanf(\"%d\",&x);\n\t\tif(x == 0) root.push_back(i);\n\t\telse add(x , i);\n\t}\n\tfor(int i = 0 ; i < root.size() ; i ++) dfs1(root[i] , 0);\n\tscanf(\"%d\",&m);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tif(dep[x] + y > n) ans[i] = 0;\n\t\telse\n\t\t{\n\t\t\tNode opt;\n\t\t\topt.depth = dep[x] + y , opt.idx = i;\n\t\t\tG[x].push_back(opt);\n\t\t}\n\t}\n\tfor(int i = 0 ; i < root.size() ; i ++) dfs2(root[i] , 0 , 0);\n\tfor(int i = 1 ; i <= m ; i ++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1626747433,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF246E Blood Cousins Return"
    },
    {
        "content": "$$\\text{CF246E Blood Cousins Return}$$\n\n$\\quad$\u9898\u76ee\u94fe\u63a5\uff1a[CF246E Blood Cousins Return](https://www.luogu.com.cn/problem/CF246E)(\u6d1b\u8c37\u7684\u94fe\u63a5)\n\n$\\quad$\u4e00\u9053 $Dcu$ \u6a21\u677f\u9898(\u4e0b\u9762\u4f1a\u8bb2)\uff0c\u53ea\u9700\u8981\u7528\u4e00\u4e2a $map$ \u6570\u7ec4\u6765\u7ef4\u62a4\u8fd9\u4e2a\u540d\u5b57(\u5b57\u7b26\u4e32)\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u7528 $set$ \u4e5f\u53ef\u4ee5\uff0c\u8c8c\u4f3c\u4f1a\u6162\u4e00\u4e9b\uff0c\u7528 $cnt$ \u6570\u7ec4\u6765\u7ef4\u62a4\u6bcf\u4e00\u5c42\u7684\u4e0d\u540c\u540d\u5b57\u7684\u6570\u91cf\u5373\u53ef\uff0c\u56e0\u4e3a\u662f\u4e00\u4e2a\u68ee\u6797\uff0c\u6240\u4ee5\u8bb0\u5f97\u8981\u6e05\u7a7a\u6570\u7ec4\u3002\n\n### \u4e00\u4e2a\u5927\u5751\u70b9\uff1a\n$\\quad$ $WA$\u7b2c $50$ \u4e2a\u70b9\u7684\u6ce8\u610f\u4e86\uff0c\u5728\u50a8\u5b58\u8be2\u95ee\u65f6\u4e00\u5b9a\u8981\u5224\u65ad\u8be2\u95ee\u8fd9\u4e2a\u7b2c $k$ \u7ea7\u513f\u5b50\u7684\u6df1\u5ea6\u662f\u5426\u8d85\u8fc7\u4e86 $10^5$ \uff0c\u56e0\u4e3a\u6700\u591a\u53ea\u6709 $10^5$ \u4e2a\u70b9\uff0c\u5982\u679c\u8d85\u8fc7\u5c31\u4e0d\u7528\u5b58\u50a8\uff0c\u7b54\u6848\u4e00\u5b9a\u662f $0$ \uff0c\u5b58\u50a8\u7684\u8bdd\u4f1a\u6ea2\u51fa\u6570\u7ec4\uff0c\u9047\u5230\u4e00\u4e9b\u6bd2\u7624\u6570\u636e\u5c31\u4f1aWA\u3002\n\n$\\quad$\u4e0b\u9762\u5c31\u7b80\u5355\u8bb2\u8bb2\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 ($DSU$ $on$ $Tree$)\u7b97\u6cd5\uff0c\u5982\u679c\u6709\u4e0d\u61c2\u7684\u53ef\u4ee5\u63d0\u51fa\u6765\u3002\n\n$$\\text{\u5173\u4e8e\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76(Lsu)\u524d\u7f6e\u77e5\u8bc6}$$\n\n$\\quad$\u5b66\u8fd9\u4e2a\u4e4b\u524d\u9700\u8981\u5bf9\u6811\u4e0a\u64cd\u4f5c\u3001 $dfs$ \u5e8f\u548c\u8f7b\u91cd\u94fe\u5256\u5206\u7b49\u77e5\u8bc6\u6709\u4e00\u5b9a\u4e86\u89e3\uff0c\u6700\u597d\u5df2\u7ecf\u638c\u63e1\u4e86\u6811\u94fe\u5256\u5206\u3002\n\n$$\\text{\u7b97\u6cd5\u601d\u60f3}$$\n\n$\\quad$\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 ($DSU$ $on$ $Tree$)\uff0c\u662f\u4e00\u4e2a\u5728 $O(nlogn)$ \u65f6\u95f4\u5185\u89e3\u51b3\u8bb8\u591a\u6811\u4e0a\u95ee\u9898\u7684\u6709\u529b\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u6811\u4e0a\u79bb\u7ebf\u95ee\u9898\u53ef\u4ee5\u901f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u5927\u90e8\u5206\u7b97\u6cd5\u4e14\u66f4\u6613\u4e8e\u7406\u89e3\u548c\u5b9e\u73b0\u3002\n\n$\\quad$\u5148\u60f3\u4e00\u4e0b\u66b4\u529b\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\u90fd\u904d\u5386\u6574\u68f5\u5b50\u6811\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\uff0c\u6700\u540e\u518d\u6e05\u7a7acnt\u6570\u7ec4\uff0c\u6700\u574f\u60c5\u51b5\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2)$ \uff0c\u5bf9\u4e8e $10^5$ \u7684\u6570\u636e\u80af\u5b9a\u662f\u8fc7\u4e0d\u53bb\u7684\u3002\n\n$\\quad$\u73b0\u5728\u8003\u8651\u4f18\u5316\u7b97\u6cd5\uff0c\u66b4\u529b\u7b97\u6cd5\u8dd1\u5f97\u6162\u7684\u539f\u56e0\u5c31\u662f\u591a\u6b21\u904d\u5386\uff0c\u591a\u6b21\u6e05\u7a7a\u6570\u7ec4\uff0c\u4e00\u4e2a\u663e\u7136\u7684\u4f18\u5316\u5c31\u662f\u5c06\u8be2\u95ee\u540c\u4e00\u4e2a\u5b50\u6811\u7684\u8be2\u95ee\u653e\u5728\u4e00\u8d77\u5904\u7406\uff0c\u4f46\u8fd9\u6837\u8fd8\u662f\u6ca1\u6709\u5904\u7406\u5230\u5173\u952e\uff0c\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f $O(n^2)$ \uff0c\u8003\u8651\u5230\u8be2\u95ee $x$ \u8282\u70b9\u65f6\uff0c $x$ \u7684\u5b50\u6811\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u6e05\u7a7a\u6570\u7ec4\uff0c\u5148\u7edf\u8ba1 $x$ \u7684\u5b50\u6811\u4e2d\u7684\u7b54\u6848\uff0c\u518d\u7edf\u8ba1 $x$ \u7684\u7b54\u6848\uff0c\u8fd9\u6837\u5c31\u9700\u8981\u63d0\u524d\u5904\u7406\u597d $dfs$ \u5e8f\u3002\n\n$\\quad$\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u4f18\u5316\uff0c\u904d\u5386\u5230\u6700\u540e\u4e00\u4e2a\u5b50\u6811\u65f6\u662f\u4e0d\u7528\u6e05\u7a7a\u7684\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u4ea7\u751f\u5bf9\u5176\u4ed6\u8282\u70b9\u5f71\u54cd\u4e86\uff0c\u6839\u636e\u8d2a\u5fc3\u7684\u601d\u60f3\u6211\u4eec\u5f53\u7136\u8981\u628a\u8282\u70b9\u6570\u6700\u591a\u7684\u5b50\u6811\uff08\u5373\u91cd\u513f\u5b50\u5f62\u6210\u7684\u5b50\u6811\uff09\u653e\u5728\u6700\u540e\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u770b\u4f3c\u6bd4\u8f83\u5feb\u7684\u7b97\u6cd5\uff0c\u5148\u904d\u5386\u6240\u6709\u7684\u8f7b\u513f\u5b50\u8282\u70b9\u5f62\u6210\u7684\u5b50\u6811\uff0c\u7edf\u8ba1\u7b54\u6848\u4f46\u662f\u4e0d\u4fdd\u7559\u6570\u636e\uff0c\u7136\u540e\u904d\u5386\u91cd\u513f\u5b50\uff0c\u7edf\u8ba1\u7b54\u6848\u5e76\u4e14\u4fdd\u7559\u6570\u636e\uff0c\u6700\u540e\u518d\u904d\u5386\u8f7b\u513f\u5b50\u4ee5\u53ca\u7236\u8282\u70b9\uff0c\u5408\u5e76\u91cd\u513f\u5b50\u7edf\u8ba1\u8fc7\u7684\u7b54\u6848\u3002\n\n$\\quad$\u5176\u5b9e\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u57fa\u672c\u601d\u8def\u5c31\u662f\u8fd9\u6837\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\u4ee3\u7801\u7406\u89e3\u3002\n\n```\nil int check(int x)//\u7edf\u8ba1\u7b54\u6848\n{\n  int num=0,ret=0;\n  for(re i=1;i<=n;i++)\n    {\n      if(cnt[i]==num){ret+=i;}\n      else if(cnt[i]>num){num=cnt[i],ret=i;}\n    }\n  return ret;\n}\nil void add(int x){cnt[col[x]]++;}//\u5355\u70b9\u589e\u52a0\nil void del(int x){cnt[col[x]]--;}//\u5355\u70b9\u51cf\u5c11\nil void raise(int x){for(re i=seg[x];i<=seg[x]+size[x]-1;i++)add(rev[i]);}//\u589e\u52a0x\u5b50\u6811\u7684\u8d21\u732e\nil void clear(int x){for(re i=seg[x];i<=seg[x]+size[x]-1;i++)del(rev[i]);}//\u6e05\u7a7ax\u5b50\u6811\u7684\u8d21\u732e\nil void dfs1(int x,int fa)\n{\n  dep[x]=dep[fa]+1;father[x]=fa;//\u5904\u7406\u6df1\u5ea6\uff0c\u7236\u4eb2\n  seg[x]=++seg[0];rev[seg[x]]=x;size[x]=1;//\u5b50\u6811\u5927\u5c0f\uff0cdfs\u5e8f\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==fa)continue;dfs1(y,x);\n      size[x]+=size[y];\n      if(size[y]>size[son[x]])son[x]=y;//\u91cd\u513f\u5b50\n    }\n}\nil void dfs2(int x,int flag)//flag\u8868\u793a\u662f\u5426\u4e3a\u91cd\u513f\u5b50\uff0c1\u8868\u793a\u91cd\u513f\u5b50\uff0c0\u8868\u793a\u8f7b\u513f\u5b50\n{\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==son[x]||y==father[x])continue;\n      dfs2(y,0);//\u5148\u904d\u5386\u8f7b\u513f\u5b50\n    }\n  if(son[x])dfs2(son[x],1);//\u518d\u904d\u5386\u91cd\u513f\u5b50\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==son[x]||y==father[x])continue;\n      raise(y);//\u66f4\u65b0\u8f7b\u513f\u5b50\u7684\u8d21\u732e\n    }add(x);//\u52a0\u4e0ax\u7ed3\u70b9\u672c\u8eab\u7684\u8d21\u732e\n  ans[x]=check(x);//\u66f4\u65b0\u7b54\u6848\n  if(!flag)clear(x);//\u5982\u679c\u662f\u8f7b\u513f\u5b50\uff0c\u5c31\u6e05\u7a7a\n}\n```\n$\\quad$\u4e0a\u9762\u7684\u53ea\u662f\u6a21\u677f\u7684\u4ee3\u7801\uff0c\u6b64\u9898\u7684\u5b8c\u6574\u4ee3\u7801\u5728\u4e0b\u9762\u3002(\u9644\u5e26\u6ce8\u91ca)\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<map>\n#include<vector>\nusing namespace std;\n#define re register int\n#define int long long\n#define LL long long\n#define il inline\n#define next nee\n#define inf 1e18\nil int read()\n{\n  int x=0,f=1;char ch=getchar();\n  while(!isdigit(ch)&&ch!='-')ch=getchar();\n  if(ch=='-')f=-1,ch=getchar();\n  while(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n  return x*f;\n}\nil void print(int x)\n{\n  if(x<0)putchar('-'),x=-x;\n  if(x/10)print(x/10);\n  putchar(x%10+'0');\n}\nconst int N=1e5+5;\nint n,m,next[N],go[N],head[N],tot,father[N],ans[N];\nint dep[N],son[N],seg[N],rev[N],size[N],cnt[N];\nstruct node{int k,id;};\nstring s[N]; \nvector<node>q[N];\nmap<string,bool>c[N];\n\nil void Add(int x,int y)\n{\n  next[++tot]=head[x];\n  head[x]=tot;go[tot]=y;\n}\nil void add(int x)//\u5355\u70b9\u589e\u52a0\n{\n  if(!c[dep[x]][s[x]])c[dep[x]][s[x]]=1,cnt[dep[x]]++;\n}\nil void raise(int x)//\u7b97\u4e0ax\u5b50\u6811\u7684\u8d21\u732e\n{\n  for(re i=seg[x];i<=seg[x]+size[x]-1;i++)add(rev[i]);\n}\nil void del(int x)//\u5355\u70b9\u51cf\u5c11\n{\n  c[dep[x]].clear();\n  cnt[dep[x]]=0;\n}\nil void clear(int x)//\u6e05\u7a7ax\u5b50\u6811\n{\n  for(re i=seg[x];i<=seg[x]+size[x]-1;i++)\n    del(rev[i]);\n}\nil void dfs1(int x,int fa)\n{\n  dep[x]=dep[fa]+1;size[x]=1;seg[x]=++seg[0];rev[seg[x]]=x;\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      dfs1(y,x);size[x]+=size[y];\n      if(size[y]>size[son[x]])son[x]=y;\n    }\n}\nil void dfs2(int x,int flag)\n{\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==son[x])continue;\n      dfs2(y,0);//\u5148\u904d\u5386\u8f7b\u513f\u5b50\n    }\n  if(son[x])dfs2(son[x],1);//\u518d\u904d\u5386\u91cd\u513f\u5b50\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {if(y==son[x])continue;raise(y);}//\u66f4\u65b0\u8f7b\u513f\u5b50\u7684\u8d21\u732e\n  add(x);//\u52a0\u4e0ax\u7ed3\u70b9\u672c\u8eab\u7684\u8d21\u732e\n  for(re i=0;i<q[x].size();i++)\n    ans[q[x][i].id]=cnt[dep[x]+q[x][i].k];//\u66f4\u65b0\u7b54\u6848\n  if(!flag)clear(x);//\u5982\u679c\u662f\u8f7b\u513f\u5b50\uff0c\u5c31\u6e05\u7a7a\n}\nsigned main()\n{\n  n=read();\n  for(re i=1,x;i<=n;i++)cin>>s[i],x=read(),father[i]=x,Add(x,i);\n  for(re i=1;i<=n;i++)if(!father[i])dfs1(i,0);//\u9884\u5904\u7406\uff0c\u500d\u589e\u6570\u7ec4\u3001dfs\u5e8f\u7b49\u6811\u4e0a\u4fe1\u606f,\u8bb0\u5f97\u8981\u7528\u5faa\u73af\uff0c\u4ece\u6bcf\u68f5\u6811\u7684\u6839\u8282\u70b9\u51fa\u53d1\n  m=read();\n  for(re i=1,x,y;i<=m;i++)\n    {\n      x=read(),y=read();\n      if(dep[x]+y>=N)continue;//\u6ce8\u610f\uff0c\u5982\u679c\u8be2\u95ee\u7684\u7b2cK\u7ea7\u513f\u5b50\u8d85\u8fc7\u9650\u5236\uff0c\u4e0d\u80fd\u5b58\u50a8\uff0c\u539f\u56e0\u4e0a\u9762\u6709\n      q[x].push_back((node){y,i});\n    }\n  for(re i=1;i<=n;i++)if(!father[i])dfs2(i,0);//\u627e\u6bcf\u68f5\u6811\u7684\u6839\u8282\u70b9\uff0c0\u8868\u793a\u8f7b\u513f\u5b50\uff0c\u8fd9\u6837\u4e0d\u7528\u624b\u52a8\u6e05\u7a7a\u6570\u7ec4\n  for(re i=1;i<=m;i++)print(ans[i]),putchar('\\n');\n  return 0;\n}\n```",
        "postTime": 1605747359,
        "uid": 109220,
        "name": "Farkas_W",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF246E \u3010Blood Cousins Return\u3011"
    }
]