[
    {
        "content": "## Description\n\n> $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\uff0c$k$ \u4e2a\u5145\u7535\u7ad9\uff0c$Q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa\u4e24\u4e2a\u70b9 $p_1$ , $p_2$ \uff0c\u4e24\u4e2a\u70b9\u4e00\u5b9a\u5728\u5145\u7535\u7ad9\u4e0a\uff0c\u95ee\u4ece $p_1$ \u5230  $p_2$ \u7684\u7535\u6c60\u5bb9\u91cf\u6700\u5c11\u9700\u8981\u591a\u5c11\n\n[\u9898\u76ee\u4f20\u9001](https://www.luogu.com.cn/problem/CF1253F)\n\n## \u524d\u7f6e\u77e5\u8bc6\n\n- \u6700\u77ed\u8def\u7b97\u6cd5\n- \u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\n- \u500d\u589e\u6c42LCA / \u6811\u94fe\u5256\u5206\n\n## Solution\n\n\u8003\u8651\u5982\u4f55\u6c42\u51fa\u4efb\u610f\u4e00\u4e2a\u70b9\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u5145\u7535\u7ad9\u7684\u8ddd\u79bb\uff1f\n\n\u66b4\u529b\u7684\u505a\u6cd5\u662f\u5bf9\u6bcf\u4e00\u4e2a\u5145\u7535\u7ad9\u8dd1\u4e00\u8fb9\u5355\u6e90\u6700\u77ed\u8def\uff0c\u4f46\u590d\u6742\u5ea6\u5b9e\u5728\u627f\u53d7\u4e0d\u4e86\n\n\u6709\u4e00\u4e2a\u5f88\u5de7\u5999\u7684\u5904\u7406\u65b9\u6cd5\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff0c\u8fde\u5411\u6240\u6709\u5145\u7535\u7ad9\uff0c\u6743\u503c\u8bbe\u4e3a $0$\uff0c\u7136\u540e\u5728\u65b0\u56fe\u4e0a\u8dd1\u4e00\u4e2a\u6700\u77ed\u8def\uff0c\u5c31\u80fd\u6c42\u51fa\u6240\u6709\u70b9\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u5145\u7535\u7ad9\u5f97\u8ddd\u79bb\u4e86\n\n\u6709\u4ec0\u4e48\u7528\uff1f\u522b\u6025\uff0c\u8ba9\u6211\u4eec\u63a5\u7740\u5f80\u4e0b\u770b\n\n\u8bbe\u8d70\u5230\u4e00\u4e2a\u70b9 $i$\uff0c\u5269\u4f59\u7535\u91cf\u4e3a $x$\uff0c \u90a3\u4e48\u4e00\u5b9a\u6709 $x > dis_i$ \uff08\u4e0d\u7ba1\u662f\u4e2d\u9014\u5145\u7535\u8fd8\u662f\u5230\u8fbe\u7ec8\u70b9\u5747\u6210\u7acb\uff0c\u56e0\u4e3a\u4fdd\u8bc1\u4e86\u7ec8\u70b9\u4e5f\u662f\u5145\u7535\u7ad9\uff09\n\n\u5047\u8bbe\u6211\u4eec\u8981\u6c42\u7684\u7535\u5bb9\u91cf\u4e3a $c$\uff0c\u90a3\u4e48\u4e09\u8005\u5173\u7cfb\u6ee1\u8db3\uff1a\n\n$$c \\ge x \\ge dis_i$$\n\n\u56e0\u4e3a\u8d70\u5230 $i$ \u70b9\u81f3\u5c11\u6d88\u8017\u4e86 $dis_i$ \u7684\u7535\uff08\u6700\u5c11\u7684\u60c5\u51b5\u662f\u4ee5\u5bf9 $i$ \u6765\u8bf4\u5b83\u7684\u8d77\u70b9\u521a\u597d\u662f\u6700\u8fd1\u7684\u5145\u7535\u7ad9\u6765\u8bf4\u7684\uff09\uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u4e0d\u7b49\u5f0f\u53ef\u4ee5\u6539\u4e3a\uff1a\n\n$$c - dis_i \\ge x \\ge dis_i$$\n\n\u8bbe\u4e0b\u4e00\u4e2a\u70b9\u4e3a $j$\uff0c\u8fb9\u6743\u4e3a $w_{i,j}$\uff0c\u540c\u7406\u6709\uff1a\n\n$$c - dis_j \\ge x - w_{i,j} \\ge dis_j$$\n\n\u7ed3\u5408\u4e0a\u9762\u4e24\u4e2a\u5f0f\u5b50\uff0c\u8fdb\u884c\u5408\u5e76\u5f97\u5230 $dis_j \\le x - w_{i,j}$\uff0c\u5373\uff1a\n\n$$dis_j \\le c - dis_i - w_{i,j}$$\n\n\u4ea4\u6362\u4e00\u4e0b\u4f4d\u7f6e\uff1a\n\n$$c \\ge dis_i + dis_j + w_{i,j}$$\n\n\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u7684\u542b\u4e49\u4e3a\uff0c\u4ece $i$ \u70b9\u5230 $j$ \u70b9\u6240\u9700\u6700\u5c0f\u7684\u7535\u6c60\u5bb9\u91cf\u4e3a $dis_i + dis_j + w_{i,j}$\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6761\u8fb9\u7684\u6700\u5c0f\u9650\u5236\u5df2\u7ecf\u6c42\u51fa\u6765\u4e86\uff0c\u7528\u8fd9\u4e2a\u6700\u5c0f\u9650\u5236\u5c31\u53ef\u4ee5\u66f4\u65b0\u56fe\u4e0a\u6240\u6709\u7684\u8fb9\n\n\u90a3\u4e48\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u8d77\u70b9 $a$ \u5230 $b$ \u7684\u6700\u5c0f\u7535\u6c60\u5bb9\u91cf\uff0c\u5c31\u662f\u627e\u4e00\u6761\u4ece $a$ \u70b9\u5230 $b$ \u70b9\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u6700\u5c0f\n\n~~\u5f88\u50cf\u4e8c\u5206\uff1f~~ \u4f46\u7528\u4e0d\u7740\u90a3\u4e48\u9ebb\u70e6\n\n\u56e0\u4e3a\u8fd9\u6761\u8def\u5f84\u4e00\u5b9a\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u540c\u65f6\u5728\u8fd9\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u6bcf\u5bf9\u70b9\u90fd\u6709\u4e00\u4e2a\u7b80\u5355\u8def\u5f84\uff0c\u6700\u5c0f\u751f\u6210\u6811\u7684\u6784\u5efa\u8fc7\u7a0b\u4e5f\u4fdd\u8bc1\u4e86\u8fd9\u6761\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u5c31\u662f\u7b54\u6848\n\n\u90a3\u4e48\u7528LCA+\u500d\u589e\u6cd5\u6c42\u51fa\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u5373\u53ef\uff08\u4e5f\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u6765\u5b9e\u73b0\uff0c~~\u524d\u63d0\u662f\u7801\u529b\u8db3\u591f\u5f3a~~\uff09\n\n\u5177\u4f53\u5b9e\u73b0\u6765\u770b\u4ee3\u7801\n\n## Code\n\n```cpp\n/*\nWork by: Suzt_ilymics\nKnowledge: ??\nTime: O(??)\n\n\u601d\u8def\u6781\u5176\u9b3c\u755c\uff1a\n1\u3001\u6700\u77ed\u8def\n2\u3001\u751f\u6210\u6811\n3\u3001\u500d\u589e+LCA\n4\u3001\u67e5\u8be2 \n*/\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n//#include<time.h>\n#define LL long long\n#define int long long\n#define orz cout<<\"lkp AK IOI!\"<<endl\n\nusing namespace std;\nconst int MAXN = 4e5+5;\nconst int MAXM = 6e5+5;\nconst int INF = 1e9+7;\nconst int mod = 1e9+7;\n\nstruct edge{\n    int from, to, w, nxt;\n}e[MAXM << 2], E[MAXM], E2[MAXM << 1];\nint head[MAXN], num_edge = 0;\nint Head[MAXN], Num_edge = 0;\n\nstruct node{\n    int bh, val;\n    bool operator < (const node &b) const { return val > b.val; }\n};\n\nint n, m, k, Q, cnt;\nint dis[MAXN], fa[MAXN], f[MAXN][22], dep[MAXN], maxm[MAXN][22];\nbool vis[MAXN];\npriority_queue<node> q;\n\nint read(){\n\tint s = 0, f = 0;\n\tchar ch = getchar();\n\twhile(!isdigit(ch))  f |= (ch == '-'), ch = getchar();\n\twhile(isdigit(ch)) s = (s << 1) + (s << 3) + ch - '0' , ch = getchar();\n\treturn f ? -s : s;\n}\n\nbool cmp(edge x, edge y){ return x.w < y.w; }\nvoid add_edge(int from, int to, int w){ e[++num_edge] = (edge){from, to, w, head[from]}, head[from] = num_edge; }\nvoid Add_edge(int from, int to, int w){ E2[++Num_edge] = (edge){from, to, w, Head[from]}, Head[from] = Num_edge; }\nint find(int x) { return fa[x] == x ? x : fa[x] = find(fa[x]); }\n\nvoid dij(){//\u8dd1\u4e00\u8fb9dij\u6c42\u51fa\u6240\u6709\u70b9\u5230\u6700\u8fd1\u7684\u5145\u7535\u7ad9\u7684\u8ddd\u79bb\n    memset(dis, 0x3f, sizeof dis);\n    dis[0] = 0;\n    q.push((node){0, 0});\n    while(!q.empty()){\n        node u = q.top(); q.pop();\n        if(vis[u.bh]) continue;\n        vis[u.bh] = true;\n        for(int i = head[u.bh]; i; i = e[i].nxt){\n            int v = e[i].to;\n            if(dis[v] > dis[u.bh] + e[i].w){\n                dis[v] = dis[u.bh] + e[i].w;\n                if(!vis[v]) q.push((node){v, dis[v]});\n            }\n        }\n    }\n}\n\nvoid kruskal(){//\u5efa\u51fa\u66f4\u65b0\u6743\u503c\u540e\u7684\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\n\tfor(int i = 1; i <= n; ++i) fa[i] = i;//\u91cd\u7f6e\u7236\u4eb2 \n\tfor(int i = 1; i <= m; ++i){\n//    \tcout<<E[i].from<<\" \"<<E[i].to<<\" \"<<E[i].w<<\"lkp\"<<endl;\n\t\tint uf = find(E[i].from), vf = find(E[i].to);\n\t\tif(uf != vf){\n//\t\t\torz;\n//\t\t\tif(rand() % 2) fa[uf] = vf;//\u968f\u673a\u8fde\u7236\u4eb2\uff0c\u968f\u673a\u5316\u4f18\u5316\u590d\u6742\u5ea6 \n//\t\t\telse \n\t\t\tfa[vf] = uf;\n\t\t\tAdd_edge(E[i].from, E[i].to, E[i].w), Add_edge(E[i].to, E[i].from, E[i].w);//\u5efa\u51fa\u6700\u5c0f\u751f\u6210\u6811\u6765 \n\t\t\tcnt++;\n\t\t\tif(cnt == n - 1) return ;//\u5982\u679c\u5efa\u4e86n - 1\u6761\u8fb9\uff0c\u5c31\u7ed3\u675f \n\t\t}\n\t}\n}\n\nvoid dfs(int u, int fa){//dfs\u9884\u5904\u7406lca \uff0c\u6ce8\u610f\u8fd9\u91cc\u8dd1\u7684\u662f\u65b0\u56fe\n\tf[u][0] = fa;\n\tfor(int i = Head[u]; i; i = E2[i].nxt){\n\t\tint v = E2[i].to;\n\t\tif(v == fa) continue;\n\t\tdep[v] = dep[u] + 1;\n\t\tmaxm[v][0] = E2[i].w;\n//\t\tcout<<maxm[v][0]<<endl;\n\t\tdfs(v, u);\n\t}\n}\n\nvoid init(){//\u500d\u589e\u6cd5\u9884\u5904\u7406lca\uff0c\u987a\u4fbf\u7ef4\u62a4\u4e00\u4e2a\u6700\u5927\u503c\n\tfor(int i = 1; i <= 20; ++i){\n\t\tfor(int j = 1; j <= n; ++j){\n\t\t\tf[j][i] = f[f[j][i - 1]][i - 1];\n\t\t\tmaxm[j][i] = max(maxm[j][i - 1], maxm[f[j][i - 1]][i - 1]);\n//\t\t\tcout<<maxm[j][i]<<endl;\n\t\t}\n\t}\n}\n\nint get_max(int x, int y){//\u53ef\u4ee5\u76f4\u63a5\u5728\u6c42\u4e24\u70b9lca\u7684\u8fc7\u7a0b\u4e2d\u6c42\u51fa\u4e24\u70b9\u7b80\u5355\u8def\u5f84\u7684\u6700\u5927\u503c\n\tint ans = 0;\n\tif(dep[x] < dep[y]) swap(x, y);\n\tfor(int i = 20; i >= 0; --i){\n\t\tif(dep[f[x][i]] < dep[y]) continue;\n\t\tans = max(ans, maxm[x][i]);\n\t\tx = f[x][i];\n\t}\n\tif(x == y) return ans;\n\tfor(int i = 20; i >= 0; --i){\n\t\tif(f[x][i] == f[y][i]) continue;\n\t\tans = max(ans, max(maxm[x][i], maxm[y][i]));\n//\t\tcout<<ans<<endl;\n\t\tx = f[x][i];\n\t\ty = f[y][i];\n\t}\n\tans = max(ans, max(maxm[x][0], maxm[y][0]));\n\treturn ans;\n}\n\nsigned main()\n{\n//\tsrand(time(0));\n    n = read(), m = read(), k = read(), Q = read();\n    for(int i = 1, u, v, w; i <= m; ++i){\n        u = read(), v = read(), w = read();\n        add_edge(u, v, w), add_edge(v, u, w);\n        E[i].from = u, E[i].to = v, E[i].w = w;\n    }\n    for(int i = 1; i <= k; ++i){\n        add_edge(0, i, 0), add_edge(i, 0, 0);    \n    }\n    dij();\n//  for(int i = 1; i <= n; ++i) cout<<i<<\" \"<<dis[i]<<\" lkp\"<<endl;\n    for(int i = 1; i <= m; ++i){//\u66f4\u65b0\u8fb9\u7684\u6743\u503c\n    \tE[i].w += dis[E[i].from] + dis[E[i].to];\n\t}\n\tsort(E + 1, E + m + 1, cmp);//\u6309\u8fb9\u6743\u5927\u5c0f\u7531\u5c0f\u5230\u5927\u6392\u5e8f \n\tkruskal();\n\t\n//\tmemset(minn, 0x7f, sizeof minn);\n\tdep[1] = 1;\n\tdfs(1, -1);\n\tinit();\n\t\n\tfor(int i = 1, u, v; i <= Q; ++i){\n\t\tu = read(), v = read();\n\t\tcout<<get_max(u, v)<<endl;//\u76f4\u63a5\u8f93\u51fa\u6240\u6c42\u7ed3\u679c\u5373\u53ef\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1613465623,
        "uid": 230580,
        "name": "Suzt_ilymtics",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1253F \u3010Cheap Robot\u3011"
    },
    {
        "content": "- update 2021/9/22 \u6839\u636e\u56de\u590d\uff0c\u6211\u6765\u6539\u4e00\u4e0b md\u3002\n\n\n> $N$ \u4e2a\u70b9\uff0c $m$ \u6761\u8fb9\uff0c\u5e76\u4e14\u5b58\u5728\u53ef\u4ee5\u6765\u56de\u8d70\u52a8\u7684\u8fb9\uff0c\u8d70\u52a8\u7684\u4ee3\u4ef7\u662f\u82b1\u8d39\u4f60\u5f53\u524d\u7684\u7535\u91cf $W$, \u5f00\u59cb\u4f60\u6709\u4e14\u4e0a\u9650\u4e3a $C$ \u7684\u7535\u6c60\u5bb9\u91cf\uff0c$N$ \u4e2a\u70b9\u4e2d\u6709 $k$ \u4e2a\u5145\u7535\u7ad9\uff0c\u53ef\u4ee5\u4f7f\u81ea\u5df1\u5145\u6ee1\u7535\u4e14\u65e0\u82b1\u8d39\uff0c\u73b0\u7ed9\u51fa $Q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u4e3a$[P_1,P_2]$ \u6c42\u51fa\u4fdd\u8bc1\u7535\u6c60\u5bb9\u91cf\u81f3\u5c11\u4e3a\u591a\u5c11\uff0c\u624d\u80fd\u591f\u62b1\u5b69\u5b50\u80fd\u4ece $P_1$ \u5230 $P_2$\n\n##  \u601d\u8def\n\n\u6211\u4eec\u7684\u5b50\u4efb\u52a1\u80af\u5b9a\u662f\u4e86\u89e3\u5728 $i$ \u8ddd\u79bb\u6700\u8fd1\u7684\u5145\u7535\u7ad9\uff0c\u8fd9\u6837\u624d\u80fd\u591f\u5b8c\u6210\u76ee\u6807\uff0c \u90a3\u4e48\u9996\u5148\u60f3\u5230\u7684\u662f**\u5168\u6e90\u6700\u77ed\u8def**\u3002\n\n\u4f46\u662f\u6ca1\u5fc5\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7acb\u4e00\u4e2a**\u8d85\u7ea7\u6e90\u70b9**\uff0c\u8fde\u63a5\u6bcf\u4e2a\u5145\u7535\u7ad9\uff0c\u8dd1\u4e00\u4e2a\u5355\u6e90\u6700\u77ed\u8def\uff0c\u5f97\u5230\u7684 $dis[i]$,\u8868\u793a $i$ \u5230\u6e90\u70b9\u7684\u6700\u77ed\u8def\uff0c\u6362\u8a00\u4e4b\uff0c\u56e0\u4e3a\u6e90\u70b9\u4e0e\u5145\u7535\u7ad9\u7684\u8fb9\u6743\u4e3a\u96f6\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7b49\u4ef7\u7684\u8868\u793a\u4e3a\uff1a$i$ \u5230\u5145\u7535\u7ad9\u7684\u6700\u77ed\u8def\u5f84\n\n\u6211\u4eec\u8bbe $X_i$ \u4e3a\u5f53\u524d\u5728 $i$ \u70b9\u7684\u7535\u6c60\u5bb9\u91cf\uff0c\u4ed6\u4e0e $dis[i]$ \u7684\u5173\u7cfb\u662f\uff1a\n$$\n    X_i\\ge dis[i]\n$$\n\u82e5\u8bbe \u7535\u6c60\u4e0a\u9650\u603b\u5bb9\u91cf\u4e3a $C$ \uff0c\u90a3\u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\u5e94\u8be5\u662f\n$$\n    C\\ge X_i\\ge dis[i]\n$$\n\u8fdb\u800c\u63a8\u5f97\n\n$$\n    C-dis[i]\\ge X_i\\ge dis[i]\n$$\n\u4e3a\u4ec0\u4e48\uff1f\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6ee1\u7535\u91cf\u7684\u72b6\u6001\u8981\u5230\u8fbe $i$ \u70b9\uff0c\u81f3\u5c11\u8981\u6d88\u8017 $dis[i]$ \u7535\uff0c\u53cd\u8fc7\u6765\u770b\uff0c\u5c31\u662f\u4ece\u52a0\u6cb9\u7ad9\u5230 $i$ \u662f\u7b49\u4ef7\u7684\n\n\u90a3\u4e48\u5bf9\u4e8e $i$ \u4e0e $j$ \u6709\u4e00\u6761 $W_{i,j}$ \u7684\u8fb9\uff0c\u90a3\u4e48\u6309\u7167\u4e0a\u8ff0\u5f0f\u5b50\u63a8\u5f97\n$$\n    C-dis[i]\\ge X_i-W_{i,j}\\ge dis[j]\n$$\n\u5bf9\u4e8e\u4e00\u4e2a $X$ \u662f\u4e0d\u7a33\u5b9a\u7684\uff0c\u5373\u6211\u4eec\u4e0d\u77e5\u9053 $X$ \u7684\u5177\u4f53\u72b6\u6001\uff0c\u6240\u4ee5\u53ef\u4ee5\u60f3\u529e\u6cd5\u5c06\u5176\u6d88\u6389\n\n   \u6211\u4eec\u5df2\u77e5\u4e24\u5f0f\u5b50\uff1a\n  $$\n    dis[j] \\le X_i-W_{i,j}\n    $$\n\n$$\n\t\tdis[j] \\le C-dis[i]-W_{i,j}\n$$\n\n \u5c06 $C$ \u79fb\u9879\u5f97\n$$\n    C\\ge dis[i]+dis[j]+W_{i,j}\n$$\n    \u8fd9\u662f\u4e00\u4e2a\u5145\u8981\u6761\u4ef6\n\n\u6240\u4ee5\u6bcf\u6761\u8fb9\u5fc5\u987b\u6ee1\u8db3\u7684\u6761\u4ef6\u5373\u4e3a\u4e0a\u8ff0\u5f0f\u5b50\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5145\u7535\u7ad9\u6211\u4eec\u5fc5\u987b\u8981\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u91cd\u73b0\u5efa\u4e00\u5f20\u56fe\uff0c$i$ \u5230 $j$ \u7684\u6743\u503c\u4e3a $dis[i]+dis[j]+W_{i,j}$\u3002\n\n\u6545\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053 $P_1$ \u5230 $P_2$ \u8def\u5f84\u4e0a\u6700\u5927\u6240\u9700\u7535\u6c60\u5bb9\u91cf\uff0c\u5373\u8fb9\u6743\u5c31\u53ef\u4ee5\u662f\u5408\u6cd5\u89e3\uff0c\u9898\u76ee\u4e2d\u662f**\u81f3\u5c11**\uff0c\u4e5f\u5c31\u662f\u7535\u6c60\u5bb9\u91cf**\u6700\u5c0f**\uff0c\u4e5f\u5c31\u662f**\u6700\u5927\u8fb9\u6700\u5c0f**\uff0c\u90a3\u4e48\u5c31\u662f\u8f6c\u6362\u6210\u8dd1**\u6700\u5c0f\u751f\u6210\u6811**\u95ee\u9898\u3002\n\n## Code\n```c\n/*\n  CF1253F\n*/\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define ll long long\nusing namespace std;\nconst int A = 1e5 + 11;\nconst int B = 1e6 + 11;\nconst int mod = 1e9 + 7;\nconst int inf = 0x3f3f3f3f;\ninline int read() {\n  char c = getchar();\n  int x = 0, f = 1;\n  for ( ; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n  for ( ; isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n  return x * f;\n}\nstruct edgexx{\n  int v, nxt, w;\n} edge[B];//\u8dd1\u6700\u77ed\u8def\nstruct edgex{\n  int v, nxt;\n} edge_[B];//\u65b0\u56fe \nstruct node{\n  ll d;\n  int id;\n  bool operator<(const node &a)const{return d > a.d;}\n};\nstruct xxs{\n\tint u,v;\n\tll w;\n\tbool operator<(const xxs &e)const{return w<e.w;}\n}e[B];\n/*------------------------------------------------------*/\nint n, cnt, js, k, c, t, head[B], m, q, head2[B], fa[B], u_fa[B];\nll dis[B], wnd[B];\nint sz[B], son[B], top[B], dep[B];\npriority_queue<node> pq;\n/*------------------------------------------------------*/ \nvoid add1(int u, int v, int w)\n{\n  edge[++cnt].nxt = head[u];\n  edge[cnt].v = v;\n  edge[cnt].w = w;\n  head[u] = cnt;\n}//\u8fb9\u88681\nvoid add2(int u, int v){\n  edge_[++js].nxt = head2[u];\n  edge_[js].v = v;\n  head2[u] = js;\n}\nint find(int x){\n  if(x == u_fa[x]) return x;\n  return u_fa[x] = find(u_fa[x]);\n}//\u5e76\u67e5\u96c6 \nvoid dfs1(int u, int f){\n  sz[u] = 1;\n  dep[u] = dep[fa[u] = f] + 1;\n  for (int i = head2[u]; i; i = edge_[i].nxt){\n    int v = edge_[i].v;\n    if(v == f) continue;\n    dfs1 (v, u);\n    sz[u] += sz[v];\n    if(sz[v] > sz[son[u]]) son[u] = v;\n }\n}\nvoid dfs2(int u, int topf){\n  top[u] = topf;\n  if(son[u]) dfs2(son[u], topf);\n  for (int i = head2[u]; i; i = edge_[i].nxt){\n    int v = edge_[i].v;\n    if(v == fa[u] || v == son[u]) continue;\n    dfs2(v, v);\n  }\n}//dfs\u5e8f\u6c42lca \nint lca(int u, int v){\n  while (top[u] != top[v]){\n    if(dep[top[u]] < dep[top[v]]) swap(u, v);\n    u = fa[top[u]];\n  }\n  return dep[u] < dep[v] ? u : v;\n}\nint main() {\n  cin >> n >> m >> k >> q;\n  for (int i = 1; i <= m; i++)\n  {\n    int x = read(), y = read(), z = read();\n    add1(x, y, z);\n    add1(y, x, z);\n    e[i] = (xxs){x, y, z}; \n  }\n  memset (dis, 0x3f, sizeof(dis));\n  for (int i = 1; i <= k; i++) pq.push((node){dis[i] = 0, i});\n  while(!pq.empty()){\n    ll d = pq.top().d;\n    int u = pq.top().id;\n    pq.pop();\n    if (d != dis[u]) continue;\n    for (int i = head[u]; i; i = edge[i].nxt){\n      int v = edge[i].v;\n      if (dis[v] > d + edge[i].w) pq.push((node){dis[v] = d + edge[i].w, v});\n    }\n  }//\u8dd1\u6700\u77ed\u8def \u5730\u6770\u65af\u7279\u62c9\n  for (int i = 1; i <= m; i++) e[i].w += dis[e[i].u] + dis[e[i].v];//\u91cd\u5efa\u8fb9 \n  sort(e + 1, e+ 1 + m); \n  for (int i = 1; i <= 2 * n; i++) u_fa[i] = i;\n  cnt = n;\n  for (int i = 1; i <= m; i++){\n      int u = e[i].u, v = e[i].v;\n      ll w = e[i].w;\n      u = find(u);\n      v = find(v);\n      if (u == v) continue;\n      u_fa[u] = u_fa[v] = ++cnt;\n      wnd[cnt] = w;\n      add2(cnt, u); add2(cnt, v);\n  }//\u5e93\u9c81\u65af\u5361\u5c14\n  dfs1(cnt, 0); dfs2(cnt, cnt);\n  while(q--){\n    int u = read(), v = read();\n    printf(\"%lld\\n\", wnd[lca(u, v)]);\n  }\n  return 0;\n}\n\n\n\n\n```",
        "postTime": 1612696024,
        "uid": 230808,
        "name": "Zxsoul",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF1253F \u3010Cheap Robot\u3011"
    },
    {
        "content": "\u503c\u5f97\u601d\u8003\u7684\u4e00\u9898\u3002\n\n------------\n\n\u8bbe\u7535\u91cf\u6700\u5927\u4e0a\u9650\u4e3a$c$\u3002\n\n\u9996\u5148\u53d1\u73b0\u4e00\u4e2a\u70b9\u4ee5$x$\u7684\u7535\u91cf\u5230\u8fbe\u70b9$y$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5230\u4e00\u4e2a\u6700\u8fd1\u7684\u8865\u7ed9\u70b9\u83b7\u5f97\u80fd\u91cf\u518d\u56de\u6765\u3002\n\n\u7136\u540e\u6211\u4eec\u8bbe$\\text{dis}_y$\u8868\u793a\u70b9$y$\u8d70\u5230\u6700\u8fd1\u7684\u8865\u7ed9\u70b9\u9700\u8981\u82b1\u8d39\u591a\u5c11\u80fd\u91cf\u3002\u8fd9\u4e2a\u6570\u7ec4\u53ef\u4ee5\u7528 dijkstra \u6c42\u51fa\u3002\n\n**\u6027\u8d28$1$** \u5982\u679c$x\\geq \\text{dis}_y$\uff0c\u90a3\u4e48$x$\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u64cd\u4f5c\u53d8\u6210$c-\\text{dis}_y$\u3002\n\n\u5426\u5219\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u70b9\u4e0d\u53ef\u80fd\u5230\u8fbe\u7ec8\u70b9\u4e86\uff08\u56e0\u4e3a\u9898\u76ee\u8bf4\u7ec8\u70b9\u8d77\u70b9\u90fd\u662f\u8865\u7ed9\u70b9\uff09\n\n~~\u7136\u540e\u6211\u5c31\u4e0d\u4f1a\u4e86~~\n\n**\u6027\u8d28$2$** \u5c31\u662f\u5982\u679c$x\\geq \\text{dis}_y$\uff0c\u90a3\u4e48$c-\\text{dis}_y$\u4e00\u5b9a$\\geq x$\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u8bbe\u4e0a\u4e00\u4e2a\u8865\u7ed9\u70b9\u5230$y$\u7684\u8ddd\u79bb\u4e3a$z$\uff0c\u90a3\u4e48$x=c-z$\u3002\u663e\u7136$z\\geq \\text{dis}_y$\uff0c\u6240\u4ee5$x\\leq c-\\text{dis}_y$\u3002\u6240\u4ee5\u6bcf\u5230\u4e00\u4e2a\u70b9\u5c31\u5f80\u6700\u8fd1\u7684\u8865\u7ed9\u70b9\u8d70\u4e00\u8d70\u662f\u6700\u4f18\u7684\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c$y$\u663e\u7136\u662f\u4ece\u4e00\u4e2a\u8865\u7ed9\u70b9\u8d70\u6765\u7684\uff08\u8fd9\u7528\u5230\u4e86\u8d77\u70b9\u4e5f\u662f\u8865\u7ed9\u70b9\u7684\u6027\u8d28\uff09\u3002$c-\\text{dis}_y$\u53ea\u80fd\u6bd4$\\geq x$\u5927\uff0c\u56e0\u4e3a$\\text{dis}_y$\u5df2\u7ecf\u662f\u6700\u8fd1\u7684\u4e86\u3002\n\n\u8fd9\u4e2a\u6027\u8d28\u5341\u5206\u91cd\u8981\uff0c\u6211\u5f53\u65f6\u5c31\u662f\u56e0\u4e3a\u81ea\u5df1\u6ca1\u6709\u53d1\u73b0\u8fd9\u4e2a\u6027\u8d28\u624d\u6ca1\u505a\u51fa\u8fd9\u9053\u9898...\n\n------------\n\n\u8fd9\u4e24\u4e2a\u6027\u8d28\u542f\u793a\u6211\u4eec\u53ef\u4ee5\u53ef\u4ee5\u7528\u56fe\u7684\u8fde\u901a\u6027\u53bb\u505a\u8fd9\u9053\u9898\u3002\n\n\u5982\u679c\u4e00\u6761\u8fb9$(a,b,w)$\u6709\u5e0c\u671b\u4ece$a$\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u5230$b$\uff0c\u800c\u4e14\u4f9d\u9760\u5269\u4f59\u7684\u7535\u91cf\u6709\u5e0c\u671b\u5230\u8fbe\u6700\u8fd1\u7684\u8865\u7ed9\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u8fd9\u6761\u8fb9\u52a0\u5165\u4e00\u5f20\u65b0\u7684\u56fe\u3002\u53d1\u73b0\u95ee\u9898\u7b49\u4ef7\u4e8e\u5224\u65ad\u65b0\u56fe\u4e24\u70b9\u662f\u5426\u8fde\u901a\u4e86\u3002\uff08\u8fd9\u7528\u5230\u4e86\u8d77\u70b9\u7ec8\u70b9\u90fd\u662f\u8865\u7ed9\u70b9\u7684\u6027\u8d28\uff0c\u4e0d\u7136\u4e0d\u7b49\u4ef7\uff09\n\n\u4e00\u6761\u8fb9\u80fd\u52a0\u5165\u7684\u6761\u4ef6\u662f\n\n$$c-\\text{dis}_a-w\\geq \\text{dis}_b$$\n\n\u6839\u636e\u4e0a\u8ff0\u6027\u8d28\u53ef\u4ee5\u770b\u51fa\u3002\n\n\u79fb\u9879\n\n$$c\\geq \\text{dis}_b+\\text{dis}_a+w$$\n\n\u53d1\u73b0\u5982\u679c\u6211\u4eec\u679a\u4e3e$c$\uff0c\u7136\u540e\u628a\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u52a0\u5165\u65b0\u56fe\uff0c\u770b\u770b\u662f\u5426\u8fde\u901a\uff0c\u4e0d\u5c31\u53ef\u4ee5\u4e86\u5417\uff1f\n\n\u8fd9\u6837\u95ee\u9898\u5c31\u7b80\u5355\u4e86\u3002\u53ef\u4ee5\u7528\u79bb\u7ebf\u7684\u5e76\u67e5\u96c6\u6309\u79e9\u5408\u5e76\uff0c\u4e5f\u53ef\u4ee5\u7528\u5728\u7ebf\u7684 kruskal \u91cd\u6784\u6811\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8d2a\u5fc3\u5efa\u51fa\u6700\u5927\u751f\u6210\u6811\u3002\n\n\u540e\u8005\u7a7a\u95f4\u4e0d\u591f\u4f18\u79c0\uff0c\u6240\u4ee5\u6211\u5199\u4e86\u524d\u8005...\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\ninline ll read(){\n    ll x=0,f=1;char ch=getchar();\n    while (!isdigit(ch)){if (ch=='-') f=-1;char ch=getchar();}\n    while (isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n    return x*f;\n}\nstruct edge{\n    int to,nxt,from;\n    ll dis;\n}g[1010101];\nint head[1010101],tot,n,m,K,Q;\ninline void made(int from,int to,ll dis){\n    g[++tot].to=to;g[tot].nxt=head[from];head[from]=tot;\n    g[tot].dis=dis;g[tot].from=from;\n}\nint F[1010101],sz[1010101];\nll dis[1010101];\nint find(int u){\n    if (F[u]!=u) F[u]=find(F[u]);\n    return F[u];\n}\nstruct que{\n    int x,y;\n    int id;\n}q[1010101];\nll ans[1010101];\nvector<que> G[1010101];\ninline bool cmp(edge a,edge b){\n    return a.dis<b.dis;\n}\nll NOW;\nbool vis[1010101];\nint main(){\n    // freopen(\"data.in\",\"r\",stdin);\n    n=read(),m=read(),K=read(),Q=read();\n    for (int i=1;i<=m;i++){\n        int x=read(),y=read();\n        ll z=read();\n        made(x,y,z);made(y,x,z);\n    }\n    for (int i=1;i<=n;i++){\n        F[i]=i;sz[i]=1;\n    }\n    priority_queue<pair<ll,int> > dl;\n    memset(dis,0x3f,sizeof dis);\n    while (!dl.empty()) dl.pop();\n    for (int i=1;i<=K;i++) dis[i]=0,dl.push(make_pair(0,i));\n    while (!dl.empty()){\n        int u=dl.top().second;dl.pop();\n        if (vis[u]) continue;\n        vis[u]=1;\n        for (int i=head[u];i;i=g[i].nxt){\n            int v=g[i].to;\n            if (dis[v]>dis[u]+g[i].dis){\n                dis[v]=dis[u]+g[i].dis;\n                if (!vis[v]){\n                    dl.push(make_pair(-dis[v],v));\n                }\n            }\n        }\n    }\n    for (int i=1;i<=tot;i++){\n        g[i].dis=g[i].dis+dis[g[i].from]+dis[g[i].to];\n    }\n    sort(g+1,g+1+tot,cmp);\n    for (int i=1;i<=Q;i++){\n        q[i].id=i;q[i].x=read(),q[i].y=read();\n        G[q[i].x].push_back(q[i]);G[q[i].y].push_back(q[i]);\n    }\n    for (int i=1;i<=tot;i++){\n        int u=g[i].from,v=g[i].to;\n        NOW=g[i].dis;\n        int fu=find(u),fv=find(v);\n        if (fu!=fv){\n            if (sz[fu]<sz[fv]){\n                swap(fu,fv);swap(u,v);\n            }\n            sz[fu]+=sz[fv];F[fv]=fu;\n            for (auto now:G[fv]){\n                if (find(now.x)==find(now.y)){\n                    if (!ans[now.id]){\n                        ans[now.id]=NOW;\n                    }\n                }else{\n                    G[fu].push_back(now);\n                }\n            }\n        }\n    }\n    for (int i=1;i<=Q;i++){\n        cout<<ans[i]<<endl;\n    }\n    return 0;\n}\n```\n",
        "postTime": 1576746602,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1253F \u3010Cheap Robot\u3011"
    },
    {
        "content": "\u6211\u4eec\u53ef\u4ee5\u53d8\u6362\u4e00\u4e0b\uff0c\u9996\u5148\u8003\u8651\u673a\u5668\u4eba\u5728\u67d0\u4e2a\u70b9\u79bb\u5b83\u6700\u8fd1\u7684\u5145\u7535\u7ad9\u5230\u5b83\u7684\u8ddd\u79bb\uff0c\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u4e3a $dis_i$\uff0c\u5982\u679c\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\uff0c\u90a3\u6211\u5c31\u4e0d\u7528\u5e72\u522b\u7684\u4e86 ~~\u4e00\u4e2a\u6700\u77ed\u8def\u5c31 Game Over \u4e86\u3002~~\n\n\u6211\u4eec\u5f15\u5165\u8d85\u7ea7\u6e90\u70b9\uff08\u8fd9\u4e2a\u4e4b\u524d\u6d89\u53ca\u8fc7\uff0c\u5728\u5dee\u5206\u7ea6\u675f\uff09\uff0c\u770b\u81ea\u5df1\u559c\u597d\uff0c\u8fd9\u91cc\u6211\u5c06\u5176\u8bbe\u4e3a 0 \u53f7\u70b9\uff0c\u90a3\u4e48\u5c06 0 \u53f7\u70b9\u4e0e\u5176\u4ed6\u6240\u6709\u80fd\u5145\u7535\u7684\u70b9\u8fde\u8fb9\u7684\u8fb9\u6743\u5168\u90e8\u8bbe\u4e3a 0\uff0c\u7531\u4e8e\u662f\u65e0\u5411\u8fb9\uff0c\u5219\u4e0d\u96be\u60f3\u51fa\u5176\u4ed6\u4e0d\u80fd\u5145\u7535\u7684\u70b9\u5230\u6700\u8fd1\u7684\u80fd\u5145\u7535\u7684\u70b9\u7684\u8ddd\u79bb\u4e3a $ dis_i $ \uff0c\u5373\u8d85\u7ea7\u6e90\u70b9\u5230\u4ed6\u7684\u6700\u77ed\u8def\uff0c\u7528 Dij \u9884\u5904\u7406\u5373\u53ef\u3002\n\n\u7136\u540e\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u8bbe\u5728\u8fd9\u4e2a\u70b9\u7684\u7535\u91cf\u4e3a $x$\uff0c\u90a3 $x$ \u5e94\u8be5\u5927\u4e8e\u7b49\u4e8e $dis_i$ \uff0c\u5c0f\u4e8e\u7b49\u4e8e\u7535\u6c60\u5bb9\u91cf $c-dis_i$\uff08\u8fd9\u4e2a\u4e0a\u8bfe\u6211\u53e3\u80e1\u5bf9\u529b\uff09\uff0c\u6240\u4ee5 $dis_i \\leq x \\leq c-dis_i$ \uff0c\u53c8\u56e0\u4e3a\u4ece $i$ \u5230 $j$ \uff0c\u8fb9\u6743\u4e3a $val$ \uff0c\u90a3\u4e48\u5728 $i$ \u5269\u4f59\u7535\u91cf\u4e3a $x$\uff0c\u5219\u5728j\u5269\u4f59\u7535\u91cf\u4e3a $x-val$ \uff0c\u5219\u6709\n\n$ dis_j \\leq x-val \\leq c-dis_j $\n\n\u5373 $dis_j+val \\leq x \\leq c-dis_j+val$\n\n\u53ef\u5f97 $dis_j+val \\leq x \\leq c-dis_i$\n\n\u5373 $dis_j+val \\leq c-dis_i$ \n\n$dis_i+dis_j+val \\leq c$\n\n\u6211\u4eec\u901a\u8fc7\u9884\u5904\u7406\u51fa $dis_i$ \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u8fb9\u6743\u8f6c\u5316\u4e3a $dis_i+dis_j+val$ \uff0c\u4ee5\u8fd9\u4e2a\u4e3a\u65b0\u7684\u8fb9\u6743\uff0c\u5efa\u51fa\u5b83\u7684\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u6765\u3002\n\n\u90a3\u4e48\u7b54\u6848\u663e\u7136\u662f\u5728\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u6240\u6709\u8fb9\u91cc\u6700\u5927\u7684\u8fb9\u6743\u503c\uff0c\u5373\u6811\u4e0a\u533a\u95f4\u6700\u503c\u3002\n\n\u7531\u4e8e\u8fd9\u91cc\u6700\u5c0f\u751f\u6210\u6811\u662f\u5e76\u67e5\u96c6\u5b58\u50a8\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u65b0\u5efa\u4e00\u68f5\u6811\uff0c\u6765\u5b9e\u73b0\u6700\u5c0f\u751f\u6210\u6811\uff08kruskal \u91cd\u6784\u6811\uff09\u3002\n\n\u7136\u540e\u5c31\u662f\u6811\u4e0a\u533a\u95f4\u6700\u503c\u4e86\uff0czhx \u8bb2\u7684\u662f\u500d\u589e\u3002\n\n\u4f46\u662f\u500d\u589e\u591a\u9ebb\u70e6\u3002\u3002\u3002\u3002\u6211\u76f4\u63a5\u6811\u5256\u5957\u7ebf\u6bb5\u6811\u3002\n\nTM define int long long \u88ab\u5361\u5e38\u4e86\uff0c\u61d2\u5f97\u6539\u4e86\uff0c\u76f4\u63a5\u5438\u6c27 AC\u3002\n\n\u81ea\u5df1\u6ce8\u610f\u4e00\u4e0b\u5c31\u597d\u3002\n\nAC code\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<algorithm>\n#include<cstdio>\n#include<queue>\n#define int long long\n#define pii pair<int,int>\n\nusing namespace std;\n\nconst int maxm=1e5+5;\n\nconst int maxn=4e5+5;\n\ninline int read()\n{\n\tint w=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0' || ch>'9')\n\t{\n\t\tif(ch=='-') f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0' && ch<='9')\n\t{\n\t\tw=(w<<3)+(w<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn w*f;\n}\n\nint fath[maxn];\nbool vis[maxn];\nint max_son[maxn];\nlong long a[maxn];\nlong long dis[maxm];\nlong long val[maxn];\nint head_tree[maxn];\nint n,tot,m,k,q,cnt;\nint top[maxn],id[maxn];\nint head[maxn],fa[maxn];\nint siz[maxn],deep[maxn];\n\nstruct edge\n{\n\tint to;\n\tint next;\n\tlong long val;\n}e[maxn*2],tree[maxn*2];\n\nstruct s_t\n{\n\tint l,r;\n\tint val;\n}t[maxn*4];\n\nstruct node\n{\n\tint from;\n\tint to;\n\tlong long val;\n}edg[maxn];\n\nvoid add(int x,int y,int z)\n{\n\ttot++;\n\te[tot].to=y;\n\te[tot].val=z;\n\te[tot].next=head[x];\n\thead[x]=tot;\n}\n\nvoid add_tree(int x,int y,int z)\n{\n\ttot++;\n\ttree[tot].to=y;\n\ttree[tot].val=z;\n\ttree[tot].next=head_tree[x];\n\thead_tree[x]=tot;\n}\n\nbool cmp(node x,node y)\n{\n\treturn x.val<y.val;\n}\n\nvoid init()\n{\n\tn=read();\n\tm=read();\n\tk=read();\n\tq=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=read();\n\t\tint v=read();\n\t\tlong long val=read();\n\t\tadd(u,v,val);\n\t\tadd(v,u,val);\n\t\tedg[i]={u,v,val};\n\t}\n}\n\nvoid dij()\n{\n\tfor(int i=1;i<=k;i++) add(0,i,0);\n\tpriority_queue <pii,vector<pii>,greater<pii> > q;\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,false,sizeof(vis));\n\tdis[0]=0; q.push(make_pair(dis[0],0));\n\twhile(!q.empty())\n\t{\n\t\tint k=q.top().second;\n\t\tq.pop();\n\t\tif(vis[k]) continue;\n\t\tvis[k]=true;\n\t\tfor(int i=head[k];i;i=e[i].next)\n\t\t{\n\t\t\tint to=e[i].to;\n\t\t\tif(vis[to]) continue;\n\t\t\tif(dis[to]>dis[k]+e[i].val)\n\t\t\t{\n\t\t\t\tdis[to]=dis[k]+e[i].val;\n\t\t\t\tq.push(make_pair(dis[to],to));\n\t\t\t}\n\t\t}\n\t}\t\n}\n\nint find(int x)\n{\n\tif(x==fa[x]) return x;\n\treturn fa[x]=find(fa[x]);\n}\n\nvoid merger(int x,int y)\n{\n\tfa[y]=x;\n}\n\nvoid kruskal()\n{\t\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=edg[i].from;\n\t\tint v=edg[i].to;\n\t\tedg[i].val+=dis[u]+dis[v];\n\t}\n\tfor(int i=1;i<=n;i++) fa[i]=i;\n\tsort(edg+1,edg+m+1,cmp);tot=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=edg[i].from;\n\t\tint v=edg[i].to;\n\t\tlong long w=edg[i].val;\n\t\tif(find(u)==find(v)) continue;\n\t\tmerger(find(u),find(v));cnt++;\n\t\tadd_tree(u,v,w);add_tree(v,u,w);\n\t\tif(cnt==n-1) break;\n\t}\n}\n\nvoid dfs_first(int x,int f)\n{\n\tsiz[x]=1;deep[x]=deep[f]+1;fath[x]=f;\n\tfor(int i=head_tree[x];i;i=tree[i].next)\n\t{\n\t\tint to=tree[i].to;\n\t\tif(to==f) continue;\n\t\tval[to]=tree[i].val;\n\t\tdfs_first(to,x);\n\t\tsiz[x]+=siz[to];\n\t\tif(siz[to]>siz[max_son[x]])\n\t\t{\n\t\t\tmax_son[x]=to;\n\t\t}\n\t}\n}\n\nvoid dfs_second(int x,int t)\n{\n\ttop[x]=t; tot++;\n\tid[x]=tot;\n\ta[tot]=val[x];\n\tif(max_son[x]==0) return ;\n\tdfs_second(max_son[x],top[x]);\n\tfor(int i=head_tree[x];i;i=tree[i].next)\n\t{\n\t\tint to=tree[i].to;\n\t\tif(to!=max_son[x] && to!=fath[x])\n\t\t\tdfs_second(to,to);\n\t}\n}\n\nvoid build(int p,int l,int r)\n{\n\tt[p].l=l,t[p].r=r;\n\tif(l==r)\n\t{\n\t\tt[p].val=a[l];\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(p*2,l,mid);\n\tbuild(p*2+1,mid+1,r);\n\tt[p].val=max(t[p*2].val,t[p*2+1].val);\n}\n\nlong long query(int p,int l,int r)\n{\n\tif(l>r) return 0;\n\tif(l<=t[p].l && t[p].r<=r)\n\t{\n\t\treturn t[p].val;\n\t}\n\tint mid=(t[p].l+t[p].r)>>1;\n\tlong long ans=0;\n\tif(l<=mid)\n\t{\n\t\tans=max(ans,query(p*2,l,r));\n\t}\n\tif(r>mid)\n\t{\n\t\tans=max(ans,query(p*2+1,l,r));\n\t}\n\treturn ans;\n}\n\nlong long get_ans(int x,int y)\n{\n\tlong long ans=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(deep[top[x]]<deep[top[y]]) swap(x,y);\n\t\tans=max(ans,query(1,id[top[x]],id[x]));\n\t\tx=fath[top[x]];\n\t}\n\tif(deep[x]>deep[y])\tswap(x,y);\n\tans=max(ans,query(1,id[x]+1,id[y]));\n\treturn ans;\n}\n\nsigned main()\n{\t\n\tinit();dij();kruskal();\n\t\n\ttot=0; dfs_first(1,0);\n\ttot=0; dfs_second(1,1);\n\t\n\tbuild(1,1,n);\n\t\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tint x=read();\n\t\tint y=read();\n\t\tcout<<get_ans(x,y)<<endl;\n\t}\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1667346023,
        "uid": 464366,
        "name": "NinT_W",
        "ccfLevel": 0,
        "title": "CF1253F Cheap Robot"
    },
    {
        "content": "### Problem\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1253F)\n\n### Solve\n\n\u8bbe\u7535\u6c60\u5bb9\u91cf\u4e3a $c$\uff0c\u8d70\u5230 $u$ \u70b9\u5269\u4f59\u7684\u7535\u91cf\u4e3a $x$\uff0c\u663e\u7136 $0\\le x\\le c$\u3002\n\n\u5982\u679c\u8bbe $d_u$ \u4e3a\u79bb $u$ \u70b9\u6700\u8fd1\u7684\u52a0\u6cb9\u7ad9\u7684\u8ddd\u79bb\uff08\u5982\u679c $u$ \u662f\u52a0\u6cb9\u7ad9\u5c31\u662f $0$\uff09\uff0c\u5219\u8fd8\u5e94\u6ee1\u8db3 $d_u\\le x\\le c-d_u$\u3002\u56e0\u4e3a $u$ \u70b9\u5269\u4f59\u7684\u7535\u91cf\u4e00\u5b9a\u53ef\u4ee5\u5230\u8fbe\u79bb\u5b83\u6700\u8fd1\u7684\u52a0\u6cb9\u7ad9\u5b8c\u6210\u4e00\u6b21\u5145\u7535\uff0c\u800c\u4e14\u7535\u91cf\u6700\u591a\u4e5f\u53ea\u4f1a\u662f\u4ece\u79bb\u5b83\u6700\u8fd1\u7684\u52a0\u6cb9\u7ad9\u52a0\u4e86\u6cb9\u6765\u5230 $u$\u3002\n\n\u5982\u679c\u4ece $u$ \u8d70\u5230\u76f8\u90bb\u7684 $v$\uff0c\u8fb9\u6743\u4e3a $w$\uff0c\u663e\u7136\u4e5f\u5e94\u8be5\u6ee1\u8db3 $d_v\\le x-w\\le c-d_v$\u3002\n\n\u5408\u5e76 $d_u\\le x\\le c-d_u$ \u548c $d_v\\le x-w\\le c-d_v$\uff0c\u5f97 $d_v\\le c-d_u-w$\uff0c\u5373 $d_v+d_u+w\\le c$\u3002\n\n\u5bf9\u4e8e\u4e00\u6761\u8fb9 $u\\to v(w)$\uff0c\u8fde\u63a5\u4e00\u6761\u8fb9\u6743\u4e3a $d_v+d_u+w$ \u7684\u8fb9\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u56fe\u3002\u82e5\u8be2\u95ee $x$ \u548c $y$\uff0c\u5373\u6700\u5c0f\u5316 $x$ \u5230 $y$ \u8def\u5f84\u7684\u8fb9\u6743\u7684\u6700\u5927\u503c\uff0c\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u500d\u589e\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u5173\u4e8e $d$ \u6570\u7ec4\u5982\u4f55\u6c42\u5f97\uff0c\u53ef\u4ee5\u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9\uff0c\u5411\u6bcf\u4e2a\u52a0\u6cb9\u7ad9\u8fde\u63a5\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\uff0c$d_i$ \u5c31\u662f $i$ \u5230\u8d85\u7ea7\u539f\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define MAXN 100010\n#define MAXM 300010 \n#define INF 1000000000000000ll\nint n, m, k, q, fat[MAXN], dis[MAXN], inq[MAXN], dep[MAXN], anc[MAXN][25], mxn[MAXN][25];\nstruct edge {\n\tint u, v, w;\n\tedge() {}\n\tedge(int a, int b, int c) {\n\t\tu = a, v = b, w = c;\n\t}\n} z[MAXM];\nbool cmp(edge a, edge b) {\n\treturn a.w < b.w;\n}\nvector<pair<int, int> > g[MAXN], e[MAXN];\nint find(int u) {\n\tif (fat[u] == u) return u;\n\treturn fat[u] = find(fat[u]);\n}\nvoid dijk(int s) {\n\tfor (int i = 0; i <= n; i++) dis[i] = INF;\n\tdis[s] = 0;\n\tpriority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > q;\n\tq.push({0, s});\n\twhile (!q.empty()) {\n\t\tint d = q.top().first, u = q.top().second; q.pop();\n\t\tif (inq[u]) continue;\n\t\tinq[u] = 1;\n\t\tfor (int i = 0; i < g[u].size(); i++) {\n\t\t\tint v = g[u][i].first, w = g[u][i].second;\n\t\t\tif (dis[v] > dis[u] + w) {\n\t\t\t\tdis[v] = dis[u] + w;\n\t\t\t\tq.push({dis[v], v}); \n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs(int u, int fa) {\n\tfor (int i = 0; i < e[u].size(); i++) {\n\t\tint v = e[u][i].first, w = e[u][i].second;\n\t\tif (v == fa) continue;\n\t\tdep[v] = dep[u] + 1;\n\t\tanc[v][0] = u; mxn[v][0] = w;\n\t\tdfs(v, u);\n\t}\n}\nint lca(int u, int v) {\n\tif (dep[u] < dep[v]) swap(u, v);\n\tint ans = 0;\n\tfor (int i = 24; i >= 0; i--)\n\t\tif (dep[anc[u][i]] >= dep[v]) ans = max(ans, mxn[u][i]), u = anc[u][i];\n\tif (u == v) return ans;\n\tfor (int i = 24; i >= 0; i--)\n\t\tif (anc[u][i] != anc[v][i]) ans = max(ans, max(mxn[u][i], mxn[v][i])), u = anc[u][i], v = anc[v][i];\n\treturn max(ans, max(mxn[u][0], mxn[v][0]));\n}\nsigned main() {\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcin >> n >> m >> k >> q;\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u, v, w;\n\t\tcin >> u >> v >> w;\n\t\tz[i] = edge(u, v, w);\n\t\tg[u].push_back({v, w}), g[v].push_back({u, w});\n\t}\n\tfor (int i = 1; i <= k; i++) g[0].push_back({i, 0});\n\tdijk(0);\n\tfor (int i = 1; i <= m; i++) z[i].w += dis[z[i].u] + dis[z[i].v];\n\tsort(z + 1, z + m + 1, cmp);\n\tfor (int i = 1; i <= n; i++) fat[i] = i;\n\tint cnt = 0;\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u = z[i].u, v = z[i].v, w = z[i].w;\n\t\tif (find(u) != find(v)) {\n\t\t\tfat[find(u)] = find(v);\n\t\t\te[u].push_back({v, w}), e[v].push_back({u, w});\n\t\t\tcnt++;\n\t\t\tif (cnt == n - 1) break;\n\t\t}\n\t}\n\tdep[1] = 1; dfs(1, 0);\n\tfor (int j = 1; j <= 24; j++)\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tanc[i][j] = anc[anc[i][j - 1]][j - 1], mxn[i][j] = max(mxn[i][j - 1], mxn[anc[i][j - 1]][j - 1]);\n\twhile (q--) {\n\t\tint u, v;\n\t\tcin >> u >> v;\n\t\tcout << lca(u, v) << \"\\n\";\n\t}\n\treturn 0;\n} \n```\n",
        "postTime": 1667883977,
        "uid": 534654,
        "name": "Network_Error",
        "ccfLevel": 0,
        "title": "CF1253F Cheap Robot \u9898\u89e3"
    },
    {
        "content": "## \u672c\u9898\u9700\u8981\u4ee5\u4e0b\u77e5\u8bc6\u70b9\n\n1. \u6c42\u5355\u6e90\u6700\u77ed\u8def\u3002\n2. kruskal \u7b97\u6cd5\u3002\n3. \u500d\u589e\u6c42 LCA\uff08\u7528\u4e8e\u6c42\u6811\u4e0a\u4e24\u70b9\u8ddd\u79bb\uff09\u3002\n\n## \u672c\u9898\u601d\u8def\n\n\u9996\u5148\u53ef\u4ee5\u77e5\u9053\u6709 $k$ \u4e2a\u5145\u7535\u70b9\uff0c\u6211\u4eec\u5982\u679c\u8981\u4fdd\u8bc1\u7535\u6c60\u5bb9\u91cf\u5c3d\u53ef\u80fd\u7684\u5c0f\u7684\u8bdd\u5c31\u8981\u5c3d\u91cf\u8d70\u5f53\u524d\u70b9\u5230\u53e6\u4e00\u4e2a\u5145\u7535\u70b9\u7684\u8ddd\u79bb\u5c3d\u91cf\u5c0f\u7684\u90a3\u4e00\u6761\u8def\uff0c\u7136\u540e\u6211\u4eec\u5c31\u8981\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u70b9\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u5145\u7535\u7ad9\u7684\u8ddd\u79bb\uff0c\u8fd9\u6837\u7684\u8bdd\u80af\u5b9a\u662f\u4e0d\u80fd\u6bcf\u4e00\u4e2a\u70b9\u8dd1\u4e00\u904d\u8fea\u6770\u65af\u7279\u62c9\uff0c\u90a3\u6837\u5c31\u5bf9\u4e0d\u8d77\u4ed6\u7d2b\u7684\u6807\u7b7e\u4e86\uff1b\u6240\u4ee5\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u8be5\u5982\u4f55\u9884\u5904\u7406\u80fd\u5feb\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5f53\u524d\u7684\u5145\u7535\u70b9\u662f $1\\sim k$\uff0c\u4ece\u54ea\u4e00\u4e2a\u70b9\u5f00\u59cb\u90fd\u4e0d\u80fd\u591f\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u6211\u4eec\u628a\u8fd9 $k$ \u4e2a\u70b9\u5411\u4e00\u4e2a\u6e90\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u6b64\u65f6\u8dd1\u4e00\u4e2a\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u5b8c\u7f8e\u7684\u5904\u7406\u51fa\u6240\u6709\u7684\u70b9\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u5145\u7535\u70b9\u7684\u8ddd\u79bb\u4e86\u3002\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u8fde\u5145\u7535\u70b9\u5462\uff1f\u601d\u8003\u4e00\u4e0b\uff0c\u5982\u679c\u662f\u8fde\u5176\u4ed6\u70b9\u7684\u8bdd\uff0c\u90a3\u6837\u4f1a\u5bfc\u81f4\u4e0d\u77e5\u9053\u54ea\u4e00\u4e2a\u662f\u5145\u7535\u70b9\uff0c\u8fd9\u6837\u5c31\u5f88\u96be\u5904\u7406\uff0c\u56e0\u4e3a\u9664\u5145\u7535\u70b9\u4ee5\u5916\u90fd\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u8d77\u70b9\uff0c\u6211\u4eec\u4ece\u5145\u7535\u70b9\u8fd9\u4e2a\u7ec8\u70b9\u5f00\u59cb\u8d70\u7684\u8bdd\uff0c\u90a3\u4e48\u65e0\u8bba\u8d70\u5230\u54ea\u91cc\u90fd\u662f\u8d77\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3 TLE \u7684\u75db\u82e6\u3002\n\n\u8fea\u6770\u65af\u7279\u62c9\u5c31\u4e0d\u7528\u8bf4\u4e86\u5427\u5e94\u8be5\u90fd\u4f1a\u3002\n\n\u9884\u5904\u7406\u5b8c\u4e4b\u540e\u5c31\u8981\u8fdb\u884c\u8fb9\u6743\u7684\u66f4\u65b0\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u51fa\u4e86 $dis$ \u6570\u7ec4\uff08\u5b58\u653e\u6bcf\u4e00\u4e2a\u70b9\u5230\u6700\u8fd1\u5145\u7535\u70b9\u7684\u8ddd\u79bb\uff09\uff0c\u8bbe\u6211\u4eec\u5f53\u524d\u5269\u4f59\u7684\u7535\u6c60\u7535\u91cf\u662f $x$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba\u5c31\u662f\u5f53\u524d\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u4e0a\u7684\u70b9\u7684 $dis[i]$ \u503c\u8981\u5c0f\u4e8e\u7b49\u4e8e $x$\uff0c\u8bbe\u6211\u4eec\u8981\u6c42\u7684\u7535\u6c60\u5bb9\u91cf\u4e3a $c$ \u90a3\u4e48\u53ef\u4ee5\u5f97\u51fa\u8fd9\u4e2a\u5f0f\u5b50\uff1a $dis[i]\\le x\\le c$,\u8d70\u5230\u4e0b\u4e00\u4e2a\u5145\u7535\u70b9\u81f3\u5c11\u8981\u8d70 $dis[i]$\uff0c\u6240\u4ee5\u5f97\u51fa $dis[i]\\le x\\le c-dis[i]$\uff0c\u8bbe\u4e0b\u4e00\u4e2a\u70b9\u662f $j$\uff0c\u90a3\u4e48\u8d70\u5230\u70b9 $j$ \u81f3\u5c11\u5c31\u8981 $w_{ij}$\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f97\u5230 $c-dis[j]\\ge x-w_{i,j}\\ge dis[j]$\uff0c\u7ed3\u5408\u4e00\u4e0b\u53ef\u4ee5\u5f97\u5230 $dis[j]\\le x-w_{i,j}$\uff0c\u4e5f\u5c31\u662f $dis[j]\\le c-dis[i]-w_{i,j}$\uff0c\u4ea4\u6362\u4e00\u4e0b\u4f4d\u7f6e\u5f97\u5230 $c\\ge dis[i]+dis[j]+w_{i,j}$\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fb9\u6743\u6539\u6210\u4ed6\u3002\n\n\u63a5\u4e0b\u6765\u6765\u8003\u8651\u5982\u4f55\u8fdb\u884c\u6700\u5c0f\u751f\u6210\u6811\uff1a\u8fd9\u5df2\u7ecf\u5f88\u663e\u800c\u6613\u89c1\u4e86\uff0c\u628a\u4e4b\u524d\u7684\u8fb9\u6743\u5df2\u66f4\u65b0\u7136\u540e\u76f4\u63a5\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u7136\u540e\u5c31\u662f\u500d\u589e\u6c42 LCA \u4e86\uff08\u5e94\u8be5\u90fd\u4f1a\u5427\uff09\uff0c\u8fd9\u4e2a\u6709\u4e00\u70b9\u4e0d\u540c\u7684\u662f\u6211\u4eec\u8981\u7528\u4e00\u4e2a\u8ddf\u500d\u589e\u6570\u7ec4\u4e00\u6837\u7684\u7ef4\u62a4\u6700\u5927\u503c\u7684\u6570\u7ec4\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u6c42\u4e24\u70b9\u8ddd\u79bb\u7684\u65f6\u5019\u5904\u7406\u51fa\u6700\u5927\u503c\u7136\u540e\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002\n\n\u4e3a\u4ec0\u4e48\u5b58\u526f\u672c\u53ea\u5b58\u5355\u8fb9\uff1f\u56e0\u4e3a\u540e\u9762\u5efa\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\u4f1a\u5efa\u4e24\u6761\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u53bb\u5b58\u6b63\u53cd\u4e24\u8fb9\uff0c\u8d39\u65f6\u53c8\u8d39\u7a7a\u95f4\u3002\n\n\u5bf9\u4e86\u4e00\u5b9a\u4e0d\u8981\u5728 dfs \u7684\u91cc\u9762\u8fdb\u884c init \u51fd\u6570\uff0c\u4f1a TLE\u3002\n\n## code\n\n```cpp\n#include<bits/stdc++.h>\n#define re register \n#define bug cout<<\"WTF?\"<<'\\n'\n#define int long long\n#define N 1000100\nusing namespace std;\nstruct sb{int u,v,w,next;}e[N],e1[N],e2[N];//e\u5b58\u653e\u4e00\u5f00\u59cb\u8f93\u5165\u7684\u8fb9\uff0ce1\u5b58\u653e\u4e00\u5f00\u59cb\u7684\u8fb9\u7684\u4e00\u4e2a\u526f\u672c\uff08\u5355\u8fb9\uff09\uff0ce2\u5b58\u653e\u751f\u6210\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9 \nint head1[N],cnt1=0,head2[N],cnt2=0;//\u94fe\u5f0f\u524d\u5411\u661f\u7528 \nstruct SB{int id,val;bool operator < (const SB &b)const{return val>b.val;}};//dij\u5806\u4f18\u5316\u7528\uff0c\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \nint n,m,k,qq,vis[N],num;//vis\u6807\u8bb0\u5f53\u524d\u70b9\u662f\u5426\u5df2\u6c42\u51fa\u6700\u77ed\u8def\uff0cnum\u6700\u5c0f\u751f\u6210\u6811\u5efa\u8fb9\u8ba1\u6570\u5668 \nint dis[N],fa[N],f[N][21],dep[N],maxn[N][21];//\npriority_queue<SB>q;//\u4f18\u5148\u961f\u5217 \ninline int read(){int x=0,f=1;char ch=getchar();while(!isdigit(ch)){f=ch!='-';ch=getchar();}while(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}return f?x:-x;}\nint cmp(sb a,sb b){return a.w<b.w;}//\u7ed3\u6784\u4f53\u6bd4\u8f83\u51fd\u6570\uff0c\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \nvoid add(int u,int v,int w){e[++cnt1]=(sb){u,v,w,head1[u]};head1[u]=cnt1; }//\u4e00\u5f00\u59cb\u7684\u5b58\u56fe \nvoid Add(int u,int v,int w){e2[++cnt2]=(sb){u,v,w,head2[u]};head2[u]=cnt2;}//\u5efa\u597d\u6700\u5c0f\u751f\u6210\u6811\u540e\u5b58\u56fe \nint fid(int x){return fa[x]==x?x:fa[x]=fid(fa[x]);}//\u5e76\u67e5\u96c6find\u51fd\u6570 \nvoid dij()\n{\n//\tbug;\n\tmemset(dis,0x3f,sizeof dis);//dis\u8d4b\u521d\u503c \n\t{\n\t\tdis[0]=0;//\u6807\u8bb0\u8d77\u70b9\u4e0d\u7528\u8d70 \n\t\tq.push((SB){0,0});//\u8d77\u70b9\u5165\u5217 \n\t\twhile(!q.empty())//\u53ea\u8981\u961f\u5217\u4e0d\u7a7a \n\t\t{\n//\t\t\tbug;\n\t\t\tSB qwq=q.top();q.pop();//\u53d6\u51fa\u961f\u5934\u5143\u7d20 \n\t\t\tint u=qwq.id;//\u53d6\u51fa\u8d77\u70b9\u7f16\u53f7 \n\t\t\tif(vis[u])continue;//\u5982\u679c\u5df2\u7ecf\u6709\u6700\u77ed\u8def\u4e86\u5c31\u653e\u5f03 \n\t\t\tvis[u]=1;//\u6807\u8bb0 \n\t\t\tfor(int i=head1[u];i;i=e[i].next)//\u904d\u5386\u6bcf\u4e00\u6761\u4e0e\u4e4b\u76f8\u8fde\u7684\u8fb9 \n\t\t\t{\n//\t\t\t\tbug;\n\t\t\t\tint v=e[i].v;//\u53d6\u51fa\u7ec8\u70b9 \n\t\t\t\tif(dis[v]>dis[u]+e[i].w)//\u677e\u5f1b\u64cd\u4f5c \n\t\t\t\t  dis[v]=dis[u]+e[i].w;\n\t\t\t\tif(!vis[v])q.push((SB){v,dis[v]});//\u5982\u679c\u6ca1\u6709\u6700\u77ed\u8def\u7684\u8bdd\u5c31\u653e\u5165\u961f\u5217 \n\t\t\t}\n\t\t}\n\t}\n}\nvoid kruskal()\n{\n//\tbug;\n\tfor(re int i=1;i<=n;i++)\n\t  fa[i]=i;//\u521d\u59cb\u5316fa\u6570\u7ec4 \n\tfor(re int i=1;i<=m;i++)\n\t{\n//\t\tbug;\n\t\tint xx=fid(e1[i].u);\n\t\tint yy=fid(e1[i].v);//\u53d6\u51fa\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u4ee3\u8868\u8282\u70b9 \n\t\tif(xx!=yy)//\u4e0d\u76f8\u7b49 \n\t\t{\n\t\t\tfa[xx]=yy;//\u5408\u5e76\u5e76\u5efa\u8fb9 \n\t\t\tAdd(e1[i].u,e1[i].v,e1[i].w);\n\t\t\tAdd(e1[i].v,e1[i].u,e1[i].w);\n\t\t\tnum++;//\u5efa\u8fb9\u6570\u52a0\u4e00 \n\t\t\tif(num==n-1)return ;//\u591fn-1\u6761\u5c31\u9000\u51fa \n\t\t}\n\t}\n}\nvoid init()//\u9884\u5904\u7406\u500d\u589e\u6570\u7ec4 \n{\n\tfor(re int j=1;j<=20;j++)//\u5343\u4e07\u4e0d\u80fd\u4e24\u4e2a\u53cd\u8fc7\u6765 \n\t  for(re int i=1;i<=n;i++)\n\t  {\n\t    f[i][j]=f[f[i][j-1]][j-1];//\u7956\u5148\u500d\u589e \n\t\tmaxn[i][j]=max(maxn[i][j-1],maxn[f[i][j-1]][j-1]);//\u6700\u957f\u8def\u5f84\u500d\u589e \n\t  }\n}\nvoid dfs(int u,int fa)//\u5904\u7406\u6bcf\u4e00\u4e2a\u70b9\u7684\u6df1\u5ea6 \n{\n//\tinit(); \n//\tbug;\n\tf[u][0]=fa;//\u8fd9\u91cc\u5148\u628a\u7236\u4eb2\u8282\u70b9\u7ed9\u5904\u7406\u51fa\u6765 \n\tfor(re int i=head2[u];i;i=e2[i].next)//\u679a\u4e3e\u6bcf\u4e00\u6761\u4e0e\u4e4b\u76f8\u8fde\u7684\u8fb9 \n\t{\n//\t\tbug;\n\t\tint v=e2[i].v;//\u53d6\u51fa\u7ec8\u70b9 \n\t\tif(v==fa)continue;//\u5982\u679c\u7ec8\u70b9\u5c31\u662f\u7236\u8282\u70b9\u5c31\u8df3\u8fc7 \n\t\tdep[v]=dep[u]+1;//\u5904\u7406\u6df1\u5ea6 \n\t\tmaxn[v][0]=e2[i].w;//maxn\u4e5f\u8981\u8d4b\u521d\u503c \n\t\tdfs(v,u);//\u7ee7\u7eed\u641c\u7d22 \n\t}\n}\nint get_max(int x,int y)//x\u5230y\u8def\u5f84\u7684\u6700\u5927\u503c \n{\n\tint ans=0;//ans\u5b58\u653e\u7b54\u6848 \n\tif(dep[x]<dep[y])swap(x,y);//\u4fdd\u8bc1x\u7684\u6df1\u5ea6\u6bd4y\u5927 \n\tfor(re int i=20;i>=0;i--)\n\t{\n\t\tif(dep[f[x][i]]<dep[y])continue;//\u5982\u679c\u4f1a\u8d85\u8fc7y\u5c31\u4e0d\u8df3 \n\t\tans=max(ans,maxn[x][i]);//\u66f4\u65b0\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u503c \n\t\tx=f[x][i];//\u66f4\u65b0x\u70b9\u7684\u7f16\u53f7 \n\t}\n\tif(x==y)return ans;//\u5982\u679cxy\u5728\u4e00\u6761\u94fe\u4e0a\u5c31\u76f4\u63a5\u8fd4\u56de\u7b54\u6848 \n\tfor(re int i=20;i>=0;i--)\n\t{\n\t\tif(f[x][i]==f[y][i])continue;//\u5982\u679c\u8df3\u5230\u516c\u5171\u7956\u5148\u5c31\u8fd4\u56de \n\t\tans=max(ans,max(maxn[x][i],maxn[y][i]));//\u5426\u5219\u5c31\u66f4\u65b0\u6700\u5927\u503c \n\t\tx=f[x][i];y=f[y][i];//\u66f4\u65b0xy\u70b9\u7f16\u53f7 \n\t}\n\tans=max(ans,max(maxn[x][0],maxn[y][0]));//\u66f4\u65b0\u6700\u5927\u503c \n\treturn ans;//\u8fd4\u56de\u7b54\u6848 \n}\nsigned main()\n{\n\tn=read();m=read();k=read();qq=read();\n\tfor(re int i=1;i<=m;i++)\n\t{\n//\t\tbug;\n\t\tint u=read(),v=read(),w=read();\n\t\tadd(u,v,w),add(v,u,w);//\u8f93\u5165\u8fb9 \n\t\te1[i]=(sb){u,v,w};//\u5b58\u526f\u672c \n\t}\n\tfor(re int i=1;i<=k;i++)\n//\t  bug,\n\t  add(0,i,0),add(i,0,0);//\u5efa\u8d85\u7ea7\u6e90\u70b9\u5e76\u8fde\u8fb9 \n\tdij();//\u8dd1\u4e00\u904ddij \n//\tcout<<'\\n';\n//\tfor(int i=1;i<=n;i++)\n//\t  cout<<dis[i]<<'\\n';\n\tfor(re int i=1;i<=m;i++)\n//\t  bug,\n\t  e1[i].w+=dis[e1[i].u]+dis[e1[i].v];//\u66f4\u65b0\u8fb9\u7684\u6743\u503c \n\tsort(e1+1,e1+m+1,cmp);//\u6392\u5e8f \n\tkruskal();//\u751f\u6210\u6700\u5c0f\u751f\u6210\u6811 \n\tdep[1]=1;//\u6807\u8bb0\u7b2c\u4e00\u4e2a\u70b9\u7684\u6df1\u5ea6\u4e3a1 \n//\tcout<<'\\n';\n//\tfor(int i=1;i<=m;i++)\n//\t\tcout<<e2[i].u<<\" \"<<e2[i].v<<\" \"<<e2[i].w<<\" \"<<e2[i].next<<'\\n';\n\tdfs(1,-1);//\u5f00\u59cb\u641c\u7d22\u5904\u7406\u6df1\u5ea6 \n\tinit();//\u9884\u5904\u7406\u51fa\u4e24\u4e2a\u500d\u589e\u6570\u7ec4 \n\tfor(re int i=1;i<=qq;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tcout<<get_max(x,y)<<'\\n';//\u76f4\u63a5\u8f93\u51fa\u8be2\u95ee \n\t}\n\treturn 0;//\u597d\u4e60\u60ef \n}\n```",
        "postTime": 1665057998,
        "uid": 526519,
        "name": "Aisaka_Taiga",
        "ccfLevel": 0,
        "title": "CF1253F"
    },
    {
        "content": "\u88ab\u8bc8\u9a97\u4e86\uff0c\u5176\u5b9e\u4e5f\u4e0d\u9700\u8981\u8bc1\u660e\u7684\u90a3\u4e48\u590d\u6742\u3002            \n\n\u56e0\u4e3a\u8981\u6c42\u7684\u8be2\u95ee\u90fd\u662f\u7535\u6869\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8d2a\u5fc3\u8d70\uff1a\u6bcf\u6b21\u8d70\u5230\u4e0b\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\u53bb\u8ddd\u5b83\u6700\u8fd1\u7684\u7535\u6869\u70b9\u8865\u6ee1\u70b9\u518d\u8d70\u56de\u6765\uff0c\u8fd9\u6837\u505a\u4e00\u5b9a\u53ef\u4ee5\u4fdd\u8bc1\u518d\u4ee5\u5f53\u524d\u72b6\u6001\u8d70\u4e0b\u53bb\u7684\u7535\u91cf\u6700\u591a\u3002         \n\n\u7531\u4e8e\u53ea\u8be2\u95ee\u5145\u7535\u6869\u4e4b\u95f4\u7684\u7b54\u6848\uff0c\u6240\u4ee5\u8003\u8651\u679a\u4e3e\u7b54\u6848 $c$\uff0c\u6bcf\u6b21\u91cd\u65b0\u52a0\u4e0a\u6ee1\u8db3\u6761\u4ef6\u7684\u5982\u4e0b\u8fb9\uff1a\n\n\u8bb0\u5f53\u524d\u7684\u70b9\u4e3a $a$\uff0c\u8d70\u5230\u7684\u70b9\u4e3a $b$\uff0c\u5982\u679c\u5b58\u5728\u4e00\u6761\u8fb9\u6743\u4e3a $w$ \u7684\u8fde\u8fb9 $(a,b)$ \u90a3\u4e48 $(a,b)$ \u60f3\u8981\u91cd\u8fde\u7684\u6761\u4ef6\u4e3a $0 \\leq c - dis_a - w - dis_b$\u3002\u5176\u4e2d $c - dis_a$ \u53ef\u4ee5\u770b\u4f5c\u5728 $a$ \u70b9\u65f6\u7684\u7535\u91cf\u3002           \n\n\u5982\u679c\u4e0d\u662f\u8be2\u95ee\u5145\u7535\u6869\u4e4b\u95f4\u7684\u7b54\u6848\u7684\u8bdd\u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u4f60\u5f00\u5934\u7684\u70b9\u548c\u7ed3\u5c3e\u7684\u70b9\u7ef4\u6301\u7684\u7535\u91cf\u5e76\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7535\u91cf\u800c\u5bfc\u81f4\u8d2a\u5fc3\u7684\u5168\u8fc7\u7a0b\u4e0d\u5b58\u5728\u6700\u4f18\u5b50\u7ed3\u6784\u3002\u4f46\u662f\u82e5\u4fdd\u8bc1\u5f00\u5934\u7684\u70b9\u548c\u7ed3\u5c3e\u7684\u70b9\u90fd\u662f\u5145\u7535\u6869\u4e0a\u7684\u70b9\u7684\u8bdd\u5c31\u4e0d\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002        \n\n\u8fd9\u4e00\u8fc7\u7a0b\u5c31\u76f4\u63a5\u79bb\u6563\u5316\u540e\u679a\u4e3e\u4e5f\u884c\uff0c\u5199\u4e00\u4e2a kruskal \u91cd\u6784\u6811\u4e5f\u884c\uff0c\u74f6\u9888\u4e0d\u5728\u8fd9\u91cc\uff0c\u4e2a\u4eba\u5b9e\u73b0\u7684\u662f\u4e00\u4e2a $O(n \\log n)$ \u7684 kruskal \u91cd\u6784\u6811\u505a\u6cd5\u3002\n\n```cpp\n/*\n\u6bcf\u6b21\u4ece\u6700\u8fd1\u7684\u5145\u7535\u7ad9\u8d70\u56de\u6765\u5c31\u597d\u4e86\nmd\u600e\u4e48\u8fde\u591a\u6e90\u6700\u77ed\u8def\u90fd\u4e0d\u4f1a\u4e86rnm \n*/\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 3e5 + 5;\nconst long long Inf = 1e18;\nint n,m,k,q,head[Len],cnt,id,lim,dp[Len][28],dep[Len];\nlong long dis[Len],w[Len];\nbool flag[Len];\nstruct NNode\n{\n\tint to;long long val;\n\tNNode(){to = val = 0;}\n\tNNode(int TO,long long VAL){to = TO , val = VAL;}\n\tbool operator < (const NNode &Ano) const\n\t{\n\t\treturn val > Ano.val;\n\t}\n}P,PP;\nstruct Node\n{\n\tint x,y;long long val;\n\tNode(){x = y = val = 0;}\n\tNode(int X,int Y,long long VAL){x = X , y = Y , val = VAL;}\n}Edge[Len];bool cmp(Node x,Node y){return x.val < y.val;}\nvector<NNode> v[Len];\nstruct node\n{\n\tint next,to;\n}edge[Len << 1];\nvoid add(int from,int to)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\thead[from] = cnt;\n}\nint fa[Len];\nvoid makeSet(int x){for(int i = 1 ; i <= x ; i ++) fa[i] = i;}\nint findSet(int x){return fa[x] == x ? fa[x] : fa[x] = findSet(fa[x]);}\nvoid rebuild()\n{\n\tid = n , lim = n << 1;makeSet(lim);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tint u = findSet(Edge[i].x) , v = findSet(Edge[i].y);\n\t\tif(u == v) continue;\n\t\tfa[u] = fa[v] = ++ id;\n\t\tadd(id , u) , add(id , v);\n\t\tw[id] = Edge[i].val;\n\t\tif(id == lim - 1) break;\n\t}\n}\nvoid dfs(int x,int f)\n{\n\tdep[x] = dep[f] + 1;\n\tdp[x][0] = f;\n\tfor(int i = 1 ; (1 << i) <= dep[x] ; i ++) dp[x][i] = dp[dp[x][i - 1]][i - 1];\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == f) continue;\n\t\tdfs(to , x);\n\t}\n}\nint FLCA(int x,int y)\n{\n\tif(dep[x] < dep[y]) swap(x , y);\n\tfor(int i = 25 ; i >= 0 ; i --) if(dep[dp[x][i]] >= dep[y]) x = dp[x][i];\n\tif(x == y) return x;\n\tfor(int i = 25 ; i >= 0 ; i --) if(dp[x][i] != dp[y][i]) x = dp[x][i] , y = dp[y][i];\n\treturn dp[x][0]; \n}\nint main()\n{\n\tscanf(\"%d %d %d %d\",&n,&m,&k,&q);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tint x,y;long long z;scanf(\"%d %d %lld\",&x,&y,&z);\n\t\tv[x].push_back(NNode(y , z)) , v[y].push_back(NNode(x , z));\n\t\tEdge[i] = Node(x , y , z);\n\t}\n\tpriority_queue<NNode> Q;\n\tfor(int i = 1 ; i <= n ; i ++) dis[i] = Inf;\n\tfor(int i = 1 ; i <= k ; i ++) dis[i] = 0 , flag[i] = 0 , Q.push(NNode(i , 0));\n\twhile(!Q.empty())\n\t{\n\t\tP = Q.top();Q.pop();\n\t\tif(!flag[P.to])\n\t\t{\n\t\t\tflag[P.to] |= 1;\n\t\t\tfor(int i = 0 ; i < v[P.to].size() ; i ++) \n\t\t\t{\n\t\t\t\tint to = v[P.to][i].to;\n\t\t\t\tif(dis[to] > dis[P.to] + v[P.to][i].val) \n\t\t\t\t{\n\t\t\t\t\tdis[to] = dis[P.to] + v[P.to][i].val;\t\n\t\t\t\t\tif(!flag[to]) Q.push(NNode(to , dis[P.to] + v[P.to][i].val));\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t}\n\tfor(int i = 1 ; i <= m ; i ++) Edge[i].val += dis[Edge[i].x] + dis[Edge[i].y];\n\tsort(Edge + 1 , Edge + 1 + m , cmp);\n\trebuild();\n\tdfs(id , 0); \n\tfor(int i = 1 ; i <= q ; i ++)\n\t{\n\t\tint x,y;scanf(\"%d %d\",&x,&y);\n\t\tprintf(\"%lld\\n\",w[FLCA(x , y)]);\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1632559285,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1253F Cheap Robot"
    },
    {
        "content": "\u9996\u5148\u53d1\u73b0\u6240\u6709\u8be2\u95ee\u70b9\u90fd\u662f\u5145\u7535\u6869\u8fd9\u4e2a\u6761\u4ef6\u5f88\u6709\u7528\u3002\n\n\u5b83\u80fd\u6ecb\u751f\u51fa\u4e00\u79cd\u66b4\u529b\u5230\u6781\u7aef\u7684\u60f3\u6cd5\uff1a\u7528 Floyd \u5bf9\u5168\u5c40\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u3002\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u56fe\uff0c\u56fe\u4e2d\u4e24\u4e24\u5145\u7535\u6869\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5b83\u4eec\u4e4b\u95f4\u7684\u6700\u77ed\u8def\uff0c\u4ee3\u8868\u7740\u4ece\u8fd9\u4e2a\u5145\u7535\u6869\u76f4\u63a5\u8d70\u5230\u90a3\u4e2a\u5145\u7535\u6869\u6700\u5c11\u8981\u5907\u591a\u5c11\u7535\u3002\u7136\u540e\u518d\u628a\u65b0\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u5efa\u51fa\u6765\uff0c\u8be2\u95ee\u65f6\u76f4\u63a5\u8be2\u95ee\u6811\u4e0a\u4e24\u70b9\u8def\u5f84\u8fb9\u6743\u6700\u5927\u503c\u3002\n\n\u53d1\u73b0\u65f6\u95f4\u538b\u6839\u8fc7\u4e0d\u53bb\uff0c\u4e5f\u4e0d\u592a\u597d\u76f4\u63a5\u4f18\u5316\u3002\n\n\u53d1\u73b0\u74f6\u9888\u4e3b\u8981\u662f\u5728\u8dd1 Floyd $O(n^3)$ \u548c\u5efa\u56fe $O(k^2)$\uff0c\u8fd9\u662f\u6211\u4eec\u6211\u4eec\u8fdc\u8fdc\u4e0d\u80fd\u63a5\u53d7\u7684\u3002\n\n\u4f46\u662f\u539f\u56fe\u6700\u591a\u4e5f\u5c31 $m$ \u6761\u8fb9\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u505a\u6cd5\u53ea\u80fd\u628a\u65f6\u95f4\u590d\u6742\u5316\u3002\n\n\u4e8e\u662f\u8003\u8651\u80fd\u4e0d\u80fd\u76f4\u63a5\u5728\u9898\u76ee\u7ed9\u7684\u539f\u56fe\u4e0a\u641e\u4e1c\u897f\u3002\n\n\u4e8e\u662f\u5c31\u6709\u4e86\u4e00\u79cd\u795e\u5947\u7684\u601d\u8def\uff1a\n\n\u65e2\u7136\u5145\u7535\u6869\u76f4\u63a5\u4e24\u4e24\u5efa\u8fb9\u6211\u4eec\u4e0d\u80fd\u63a5\u53d7\uff0c\u6211\u4eec\u4e0d\u5982\u76f4\u63a5\u679a\u4e3e $c$\uff0c\u628a\u4e24\u4e2a\u8ddd\u79bb $\\leq c$ \u7684\u5145\u7535\u6869\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u518d\u770b\u9898\u76ee\u8be2\u95ee\u7684 $A$ \u548c $B$ \u5145\u7535\u6869\u5728\u4ec0\u4e48\u65f6\u5019\u8054\u901a\u3002\n\n\u4f46\u662f\u679a\u4e3e $c$ \u8c8c\u4f3c\u4e5f\u8981\u8ddf\u5145\u7535\u6869\u4e24\u4e24\u95f4\u7684\u8ddd\u79bb\u6709\u5173\uff0c\u90a3\u600e\u4e48\u8f6c\u79fb\u5230\u539f\u56fe\u4e0a\u7684\u8fb9\u5462\uff1f\n\n\u5728\u539f\u56fe\u4e0a\uff0c\u6211\u4eec\u5148\u7528 dijkstra \u9884\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u70b9 $i$ \u5230\u79bb\u5b83\u6700\u8fd1\u7684\u5145\u7535\u6869\u7684\u8ddd\u79bb $dis_i$\u3002\u7136\u540e\u8bbe\u5f53\u524d\u679a\u4e3e\u7684\u4e3a $c$\uff1a\n\n\u7136\u540e\u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9 $(u,v)$\uff0c\u8bbe\u5176\u8fb9\u6743\u4e3a $w$\u3002\u5982\u679c $dis_u+w+dis_v\\leq c$\uff0c\uff0c\u90a3\u4e48\u5c31\u8fde\u4e0a\u8fb9 $(u,v)$\uff0c\u7136\u540e\u518d\u5224\u65ad $A$ \u548c $B$ \u5728\u539f\u56fe\u4e2d\u662f\u5426\u8054\u901a\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u662f\u5bf9\u7684\u5462\uff1f\uff08\u4ee5\u4e0b\u7684 $A$ \u548c $B$ \u5747\u4ee3\u8868\u4efb\u610f\u4e24\u4e2a\u5145\u7535\u6869\uff09\n\n1. \u82e5 $(u,v)$ \u88ab\u8fde\u4e0a\uff0c\u90a3\u4e48 $u$ \u548c $v$ \u7684\u6700\u8fd1\u5145\u7535\u6869\u95f4\u7684\u8ddd\u79bb $\\leq c$\u3002\n\n   \u8bc1\u660e\u663e\u7136\uff0c\u6839\u636e $(u,v)$ \u88ab\u8fde\u4e0a\u7684\u6761\u4ef6\u7684\u5b9a\u4e49\u5373\u53ef\u5f97\u51fa\u3002\n\n2. \u82e5 $A$ \u548c $B$ \u7684\u8ddd\u79bb $\\leq c$\uff0c\u90a3\u4e48 $A$\u3001$B$ \u8054\u901a\u3002\n\n   \u5982\u679c\u4e24\u4e2a\u5145\u7535\u6869 $A$ \u548c $B$ \u7684\u8ddd\u79bb $\\leq c$\uff0c\u90a3\u4e48\u8fd9\u6837\u505a\u4e4b\u540e\u4ed6\u4eec\u4e00\u5b9a\u8054\u901a\u3002\u56e0\u4e3a\u5bf9\u4e8e $A$ \u548c $B$ \u6700\u77ed\u8def\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9 $(u,v)$\uff0c\u5b83\u80af\u5b9a\u80fd\u6ee1\u8db3 $dis_u+w+dis_v\\leq c$\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5f0f\u5b50\u4ee3\u8868\u7740\u4ece\u79bb $u$ \u6700\u8fd1\u7684\u5145\u7535\u6869\u51fa\u53d1\u3001\u80fd\u7ecf\u8fc7 $(u,v)$ \u8d70\u5230\u79bb $v$ \u6700\u8fd1\u7684\u5145\u7535\u6869\u4e14\u6ee1\u8db3\u8def\u7a0b $\\leq c$\uff0c\u800c\u4ece $A$ \u8d70\u5230 $B$ \u80af\u5b9a\u7b97\u5165\u4e00\u79cd\u65b9\u6848\uff0c\u6240\u4ee5 $(u,v)$ \u8fd9\u6761\u8fb9\u80af\u5b9a\u80fd\u8fde\u4e0a\u3002\n\n3. \u63a8\u5e7f\u5230\u95f4\u63a5\u8054\u901a\u4e0a\uff0c\u5982\u679c $A$ \u548c $B$ \u8054\u901a\uff0c$A$ \u5c31\u771f\u7684\u80fd\u5230\u8fbe $B$ \u5417\uff1f\n\n   \u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u56e0\u4e3a $A$ \u548c $B$ \u7684\u8054\u901a\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u88ab\u8fde\u4e0a\uff0c\u90a3\u4e48\u6839\u636e\u4e0a\u8ff0\u4e24\u70b9\u8bc1\u660e\uff0c\u53ef\u4ee5\u5f97\u51fa\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u7684\u6700\u8fd1\u5145\u7535\u6869\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\uff0c\u800c $A$ \u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u80fd\u4e92\u76f8\u5230\u8fbe\u7684\u5145\u7535\u6869\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u5230\u8fbe $B$\u3002\n\n\u6240\u4ee5\u8fd9\u6837\u505a\u662f\u6b63\u786e\u7684\u3002\n\n\u81f3\u4e8e\u7ef4\u62a4\u8fde\u8fb9\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u3002\n\n\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u5728\u5e76\u67e5\u96c6\u7684\u6bcf\u4e2a\u8054\u901a\u5757\u5185\u8bb0\u5f55\u8fd9\u4e2a\u8fde\u901a\u5757\u5185\u5305\u542b\u7684\u672a\u89e3\u51b3\u8be2\u95ee\uff0c\u800c\u5408\u5e76\u8fde\u901a\u5757\u65f6\u8981\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u624d\u80fd\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5177\u4f53\u8be6\u89c1\u4ee3\u7801\u3002\n\n\u7136\u540e\u679a\u4e3e $c$ \u5b9e\u5728\u662f\u592a\u5927\u4e86\uff0c\u4e0d\u7136\u76f4\u63a5\u5148\u628a\u6bcf\u6761\u8fb9\u6309 $dis_u+w+dis_v$ \u6392\u5e8f\uff0c\u518d\u4f9d\u6b21\u679a\u4e3e\u8fb9\u3002\n\n\u8fd9\u6837\u4f60\u5c31\u53d1\u73b0\u8fd9\u79cd \u201c\u7ed9\u8fb9\u6392\u5e8f\uff0c\u518d\u4f9d\u6b21\u52a0\u5165\u56fe\u4e2d\u5224\u65ad\u8054\u901a\u201d \u7684\u65b9\u6cd5\u548c kruskal \u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u8fb9\u6743\u6539\u4e86\u4e00\u4e0b\u800c\u5df2\uff0c\u800c\u4e14\u8fd8\u5e26\u4e0a\u4e86\u8be2\u95ee\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\n#define N 100010\n#define M 300010\n#define ll long long\n\nusing namespace std;\n\nstruct Edge\n{\n\tint u,v;\n\tll w;\n}e[M];\n\nstruct Query\n{\n\tint a,b;\n\tll ans;\n\tQuery(){ans=-1;}\n}q[M];\n\nstruct data\n{\n\tint u;\n\tll s;\n\tdata(){};\n\tdata(int a,ll b){u=a,s=b;}\n\tbool operator < (const data &a) const\n\t{\n\t\treturn s>a.s;\n\t}\n};\n\nint n,m,k,Q;\nint fa[N];\nint cnt,head[N],nxt[M<<1],to[M<<1],w[M<<1];\nll dis[N];\n\nvector<int>g[N];\npriority_queue<data>que;\n\nvoid adde(int u,int v,int wi)\n{\n\tto[++cnt]=v;\n\tw[cnt]=wi;\n\tnxt[cnt]=head[u];\n\thead[u]=cnt;\n}\n\nvoid dijkstra()\n{\n\tmemset(dis,127,sizeof(dis));\n\tfor(int i=1;i<=k;i++)\n\t\tque.push(data(i,0)),dis[i]=0;\n\twhile(!que.empty())\n\t{\n\t\tdata now=que.top();\n\t\tque.pop();\n\t\tfor(int i=head[now.u];i;i=nxt[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tif(dis[now.u]+w[i]<=dis[v])\n\t\t\t{\n\t\t\t\tdis[v]=dis[now.u]+w[i];\n\t\t\t\tque.push(data(v,dis[v]));\n\t\t\t}\n\t\t}\n\t}\n}\n\nbool cmp(Edge a,Edge b)\n{\n\treturn a.w<b.w;\n}\n\nint find(int x)\n{\n\treturn x==fa[x]?x:(fa[x]=find(fa[x]));\n}\n\nint main()\n{\n\tscanf(\"%d%d%d%d\",&n,&m,&k,&Q);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%lld\",&e[i].u,&e[i].v,&e[i].w);\n\t\tadde(e[i].u,e[i].v,e[i].w),adde(e[i].v,e[i].u,e[i].w);\n\t}\n\tfor(int i=1;i<=Q;i++)\n\t{\n\t\tscanf(\"%d%d\",&q[i].a,&q[i].b);\n\t\tg[q[i].a].push_back(i),g[q[i].b].push_back(i);\n\t}\n\tdijkstra();\n\tfor(int i=1;i<=m;i++)\n\t\te[i].w=e[i].w+dis[e[i].u]+dis[e[i].v];\n\tsort(e+1,e+m+1,cmp);\n\tfor(int i=1;i<=n;i++) fa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a=find(e[i].u),b=find(e[i].v);\n\t\tif(a!=b)\n\t\t{\n\t\t\tif(g[b].size()<g[a].size()) swap(a,b);//\u6ce8\u610f\u542f\u53d1\u5f0f\u5408\u5e76\u7684size\u6bd4\u8f83\u4e0d\u662f\u6bd4\u8f83\u7684\u5e76\u67e5\u96c6\u7684size\u800c\u662f\u8be2\u95ee\u5927\u5c0f\u7684size\n\t\t\tfa[a]=b;\n\t\t\tfor(int j=0,size=g[a].size();j<size;j++)\n\t\t\t{\n\t\t\t\tint x=find(q[g[a][j]].a),y=find(q[g[a][j]].b);\n\t\t\t\tif(x==y)\n\t\t\t\t{\n\t\t\t\t\tif(q[g[a][j]].ans==-1)\n\t\t\t\t\t\tq[g[a][j]].ans=e[i].w;\n\t\t\t\t}\n\t\t\t\telse g[b].push_back(g[a][j]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=Q;i++)\n\t\tprintf(\"%lld\\n\",q[i].ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1611538534,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1253F \u3010Cheap Robot\u3011"
    },
    {
        "content": "\u65f6\u9694\u4e94\u4e2a\u6708\u5c31\u4e0d\u4f1a\u5957\u8def\u4e86 /kl\n\n---\n\n### \u9898\u610f\u7b80\u8ff0\n\nhttps://www.luogu.com.cn/problem/CF1253F\u3002\n\n### \u9898\u89e3\n\n\u6211\u4eec\u8003\u8651\u5728\u4e71\u4e03\u516b\u7cdf\u7684\u56fe\u4e0a\u641e\u4e8b\u60c5\u663e\u7136\u662f\u4e0d\u597d\u641e\u7684\u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u628a\u5173\u952e\u70b9\u62ce\u51fa\u6765\u5efa\u4e00\u5e45\u65b0\u56fe\uff0c\u6700\u597d\u662f\u6811\u3002\n\n\u4e00\u4e2a\u7b80\u5355\u7684\u601d\u60f3\u5c31\u662f\u8dd1\u5168\u6e90\u6700\u77ed\u8def\u7136\u540e\u8fde\u8d77\u6765\u8fb9\uff0c\u4e4b\u540e\u8dd1\u4e2a\u8d27\u7269\u8fd0\u8f93\u72b6\u7269\u3002\u8fd9\u4e1c\u897f\u663e\u7136\u662f\u4e0d\u5f97\u884c\u7684\u3002\n\n\u4f46\u662f\u4e00\u5b9a\u8981\u8dd1\u5168\u6e90\u6700\u77ed\u8def\u5417\uff1f\n\n\u6211\u4eec\u70e4\u6ee4\u5bf9\u4e8e\u6bcf\u4e00\u6761\u539f\u56fe\u4e2d\u7684\u8fb9 $(u, v)$ \u8ba1\u7b97\u51fa\u79bb\u5b83\u6700\u8fd1\u7684\u4e24\u4e2a\u5173\u952e\u70b9$(fr_u, fr_v)$\u3002\u7136\u540e\u8fde\u8fb9 $fr_u, fr_v$\uff0c\u8fb9\u6743\u4e3a $dist(fr_u, u) + (u, v) +dist(v, fr_v)$\u3002\u8fd9\u6837\u7684\u8bdd\u4e00\u5b9a\u53ef\u4ee5\u70e4\u6ee4\u5230\u6240\u6709\u5728\u6700\u77ed\u8def\u4e0a\u7684\u70b9\u3002\u8bfb\u8005\u81ea\u8bc1\u4e0d\u96be\u3002\u8fd9\u4e2a\u5957\u8def\u5728[\u8fd9\u91cc](https://www.luogu.com.cn/problem/solution/CF196E)\u662f\u6709\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u79cd\u8f6c\u5316\u6765\u526a\u679d\u7684\u65b9\u6cd5\u662f\u5f88\u597d\u7684\u601d\u60f3\u3002\n\n\u5b9e\u73b0\u7684\u8bdd\u6ca1\u5565\u6280\u5de7\uff0c\u6b63\u5e38\u5730\u5199\u5c31\u8fc7\u4e86\u3002",
        "postTime": 1609126833,
        "uid": 55078,
        "name": "YLWang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1253F \u3010Cheap Robot\u3011"
    }
]