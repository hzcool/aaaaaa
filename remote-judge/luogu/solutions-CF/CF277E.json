[
    {
        "content": "### Description\n\u7ed9\u4f60\u5e73\u9762\u4e0a $n$ \u4e2a\u70b9 $(2 \\leq n \\leq 400)$\uff0c\u8981\u6c42\u7528\u8fd9\u4e9b\u70b9\u7ec4\u6210\u4e00\u4e2a\u4e8c\u53c9\u6811(\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u8282\u70b9\u4e0d\u8d85\u8fc7\u4e24\u4e2a)\uff0c\u5b9a\u4e49\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u4e3a\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u3002\u6c42\u4e00\u4e2a\u6743\u503c\u548c\u6700\u5c0f\u7684\u4e8c\u53c9\u6811\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u6743\u503c\u3002\n\n\u5176\u4e2d\uff0c\u70b9 $i$ \u53ef\u4ee5\u6210\u4e3a\u70b9 $j$ \u7684\u7684\u7236\u4eb2\u7684\u6761\u4ef6\u662f\uff1a\u70b9 $i$ \u7684 $y$ \u5750\u6807\u6bd4 $j$ \u7684 $y$ \u5750\u6807\u5927\u3002\n\n\u5982\u679c\u4e0d\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u4e8c\u53c9\u6811\uff0c\u8f93\u51fa $-1$ \u3002\n\n### Solution\n\n\u8fb9 $(a,b)$ \u8868\u793a\u4e00\u6761\u5bb9\u91cf\u4e3a $a$ \uff0c\u8d39\u7528\u4e3a $b$ \u7684\u8fb9\n\n\u628a\u6bcf\u4e2a\u70b9 $u$ \u62c6\u6210\u4e24\u4e2a\u70b9\u5165\u70b9 $u_1$ \u548c\u51fa\u70b9 $u_2$ \n\n\u4ece\u6e90\u70b9\u5411 $u_1$ \u8fde\u4e00\u6761 $(2,0)$\uff0c\u610f\u4e49\u4e3a\u9650\u5236\u4e86  $u$ \u53ea\u80fd\u6709\u4e24\u4e2a\u513f\u5b50\n\n\u4ece $u_2$  \u5411\u6c47\u70b9\u8fde\u4e00\u6761 $(1,0)$ \uff0c\u610f\u4e49\u662f\u9650\u5236\u4e86 $u$ \u6700\u591a\u53ea\u6709\u4e00\u4e2a\u7236\u4eb2\n\n\u82e5 $u_y > v_y$ \u5219\u5728 $u_1$ \u548c $v_2$ \u4e4b\u95f4\u8fde\u4e00\u6761 $(1,Len)$\uff0c\u5176\u4e2d Len \u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb $\\sqrt {(u_x - v_x)^2 + (u_y-v_y)^2}$\n\n\u7136\u540e\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5b8c\u4e8b\u3002\n\n### Code\n[\u770b\u4ee3\u7801\u6233\u8fd9\u91cc](https://www.cnblogs.com/acfunction/p/10105432.html)",
        "postTime": 1544535342,
        "uid": 54745,
        "name": "Gypsophila",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF277E \u3010Binary Tree on Plane\u3011"
    },
    {
        "content": "\u6ce8\u610f\u5230\u5bf9\u4e8e\u4e00\u4e2a\u8fb9\u96c6\u662f\u4e00\u68f5\u6811\u5f53\u4e14\u4ec5\u5f53\uff0c\u53ea\u6709\u4e00\u4e2a\u70b9\u6ca1\u6709\u5165\u8fb9\uff0c\u5176\u4ed6\u70b9\u90fd\u6070\u597d\u6709\u4e00\u4e2a\u5165\u8fb9\uff0c\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6570\u91cf $\\leq 2$\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u8fd9\u4e2a\u5ea6\u6570\u5efa\u7f51\u7edc\u6d41\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u6761\u6d41\u8868\u793a\u65b0\u589e\u4e0a\u53bb\u4e00\u6761\u8fb9\u3002\u90a3\u4e48 $s$ \u5230\u6bcf\u4e2a\u70b9\u8fde $2$\uff0c\u6bcf\u4e2a\u70b9\u5411 $t$ \u8fde $1$\uff0c\u4e24\u4e2a\u70b9\u95f4\u8be5\u8fde\u8fde\uff0c\u8d39\u7528\u7167\u641e\u3002\u7136\u540e\u8dd1\u6700\u5927\u6d41\u770b\u662f\u5426\u7b49\u4e8e $n-1$\uff0c\u7b49\u4e8e\u7684\u8bdd\u8f93\u51fa\u6700\u5c0f\u8d39\u7528\u3002\n\n\u4f46\u8fd9\u6837\u6709\u4e2a bug\uff0c\u90a3\u5c31\u662f\u4e00\u6761\u6d41\u53ef\u80fd\u4e0d\u7ecf\u8fc7\u4efb\u4f55\u4e2d\u95f4\u8fb9\uff0c\u53ea\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u3002\u90a3\u600e\u4e48\u529e\u5462\u3002**\u9047\u5230\u8fd9\u79cd\u903b\u8f91\u6df7\u4e71\u7684\uff0c\u65e0\u6cd5\u5efa\u56fe\u7684\uff0c\u62c6\u70b9\uff01\u62c6\u70b9\uff01\u62c6\u70b9\uff01**\u8003\u8651\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\u8868\u793a\u5165\u51fa\uff0c\u5165\u8fde\u5411\u51fa\u5e76\u4e14\u81ea\u5df1\u4e0d\u8fde\u5411\u81ea\u5df1\uff0c\u6b63\u786e\u6027\u663e\u7136\u3002",
        "postTime": 1610548415,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF277E \u3010Binary Tree on Plane\u3011"
    },
    {
        "content": "\u9ebb\u4e86\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48 dinic \u4e00\u6b21\u8dd1\u4e0d\u5b8c\u6240\u6709\u589e\u5e7f\u8def\u3002             \n\n\u5176\u5b9e\u5728\u601d\u8def\u4e0a\u611f\u89c9\u8fd8\u662f\u633a trick \u7684\u5427\uff0c\u4e3b\u8981\u8fd8\u662f\u5361\u5e38\uff0c\u786e\u4fe1\u3002                   \n\n\u89c2\u5bdf\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff0c\u5373\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u4e3a $1$\uff0c\u8003\u8651\u4e00\u6761\u8fb9\u5c31\u662f\u8ba9\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\u52a0 $1$\uff0c\u5373\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u5339\u914d\u4e00\u6b21\u3002            \n\n\u5957\u8def\u7684\u5c06\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\u4e00\u4e2a\u8868\u793a\u51fa\u70b9\u4e00\u4e2a\u8868\u793a\u5165\u70b9\uff0c\u505a\u6210\u4e00\u4e2a\u4e8c\u5206\u56fe\u5339\u914d\u72b6\u5de6\u8fb9\u662f\u51fa\u70b9\u53f3\u8fb9\u662f\u5165\u70b9\uff0c\u4ece\u6e90\u70b9\u5411\u6240\u6709\u5165\u70b9\u8fde\u5bb9\u91cf\u4e3a $2$ \u7684\u8fb9\uff0c\u7279\u5224\u6839\u8282\u70b9\u540e\uff0c\u4f7f\u975e\u6839\u8282\u70b9\u7684\u6240\u6709\u51fa\u70b9\u90fd\u5411 $t$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u5373\u53ef\u4fdd\u8bc1\u5728\u6709\u89e3\u7684\u60c5\u51b5\u4e0b\u6700\u5927\u6d41\u6d41\u91cf\u5927\u5c0f\u4e3a $n - 1$\u3002\n\n\u5f53\u7136\u4ee5\u4e0a\u8fb9\u7684\u5355\u4ef7\u5168\u4e3a $0$\uff0c\u6bd5\u7adf\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u3002\n\n\u4e3a\u4e86\u907f\u514d\u8ba8\u8bba\uff0c\u6211\u4eec\u5728\u5224\u65e0\u89e3\u65f6\u4e5f\u76f4\u63a5\u7528\u6700\u5927\u6d41\u6d41\u91cf\u662f\u4e0d\u662f $n - 1$ \u7279\u5224\u5c31\u597d\u4e86\u3002          \n\n$O(n ^ 2)$ \u8fde\u8fb9\uff0c\u5bf9\u4e8e\u6bcf\u6761\u6709\u5411\u8fb9 $(u,v,w)$\uff0c\u8ba9 $u$ \u7684\u51fa\u70b9\u5411 $v$ \u7684\u5165\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u5355\u4ef7\u4e3a\u8ddd\u79bb\u7684\u8fb9\u3002\n\n\u7136\u540e\u5c31\u662f\u5361\u5e38\u4e86\uff0c\u5361\u4e86\u534a\u4e2a\u665a\u4e0a\u7684\u5e38\u8fd8\u662f\u627e\u4e0d\u51fa\u6765\u4e3a\u4ec0\u4e48\u8d39\u7528\u6d41\u7684 dinic \u4e00\u6b21\u8dd1\u4e0d\u51fa\u6765\uff0c\u6700\u540e\u5c31\u76f4\u63a5\u6bcf\u6b21 SPFA \u540e\u591a\u8dd1\u51e0\u6b21 dinic \u5c31\u8fc7\u4e86\u2026\u2026\u5982\u679c\u6709\u4eba\u613f\u610f\u4e5f\u53ef\u4ee5\u6765\u770b\u4e0b dinic \u91cc\u9762\u54ea\u91cc\u5199\u7206\u4e86\u3002            \n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 5e2 + 5;\nconst double Inf = 2e6 + 1;\nint n,m,head[Len * 2],cnt = 1,s,t,flag[Len * 2],Bs[Len * 2],len,SS,tt,maxflow,cur[Len * 2];\ndouble dis[Len * 3],mincost;\nstruct node\n{\n\tint next,to,w;double ww;\n}edge[Len * Len * 2];\nvoid add(int from,int to,int w,double ww)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\tedge[cnt].w = w , edge[cnt].ww = ww;\n\thead[from] = cnt;\n}\nbool SPFA()\n{\n\tqueue<int> q;\n\tfor(int i = 1 ; i <= (n * 2) + 2 ; i ++) dis[i] = Inf , flag[i] = 0;\n\tcur[s] = head[s] , dis[s] = 0 , flag[s] = 1 , q.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint p = q.front();q.pop();\n\t\tflag[p] = 0;\n\t\tfor(int e = head[p] ; e ; e = edge[e].next)\n\t\t{\n\t\t\tint to = edge[e].to;\n\t\t\tif(dis[to] > dis[p] + edge[e].ww && edge[e].w)\n\t\t\t{\n\t\t\t\tdis[to] = dis[p] + edge[e].ww;\n\t\t\t\tcur[to] = head[to];\n\t\t\t\tif(!flag[to]) q.push(to) , flag[to] |= 1;\n\t\t\t}\n\t\t}\n\t}\n\tif(dis[t] == Inf) return 0;\n\treturn 1;\n}\nint dfs(int u,int In)\n{\n\tif(u == t) return In;\n\tflag[u] = 1;\n\tint Out = 0;\n\tfor(int e = cur[u] ; e && In > 0 ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tcur[u] = e;\n\t\tif(!flag[to] && edge[e].w && dis[to] == dis[u] + edge[e].ww)\n\t\t{\n\t\t\tint res = dfs(to , min(In , edge[e].w));\n\t\t\tmincost += res * edge[e].ww;\n\t\t\tIn -= res;\n\t\t\tOut += res;\n\t\t\tedge[e].w -= res;\n\t\t\tedge[e ^ 1].w += res;\t\t\n\t\t}\n\t} \n\tflag[u] = 0;\n\tif(!Out) dis[u] = -1;\n\treturn Out;\n}\nstruct Node\n{\n\tint x,y;\n}P[Len];\nstruct Edge\n{\n\tint u,v;double w;\n\tEdge(){u = v = w = 0;}\n\tEdge(int U,int V,double W){u = U , v = V , w = W;}\n}E[Len * Len];\ndouble dist(int x,int y,int X,int Y)\n{\n\treturn sqrt((X - x) * (X - x) + (Y - y) * (Y - y));\n}\nvoid Work(int a,int b)\n{\n\tif(P[a].y > P[b].y) \n\t{\n\t\tE[++ len] = Edge(a , b , dist(P[a].x , P[a].y , P[b].x , P[b].y));\n\t\tBs[b] ++;\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\ts = (n * 2) + 1 , t = s + 1;\n\tfor(int i = 1 ; i <= n ; i ++) scanf(\"%d %d\",&P[i].x,&P[i].y);\n\tfor(int i = 1 ; i <= n ; i ++)\n\t\tfor(int j = i + 1 ; j <= n ; j ++)\n\t\t{\n\t\t\tif(P[i].y > P[j].y) Work(i , j);\n\t\t\telse Work(j , i);\n\t\t}\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tadd(s , i , 2 , 0) , add(i , s , 0 , 0);\n\t\tif(!Bs[i]) continue;\n\t\tadd(i + n , t , 1 , 0) , add(t , i + n , 0 , 0);\t\n\t} \n\tfor(int i = 1 ; i <= len ; i ++) add(E[i].u , E[i].v + n , 1 , E[i].w) , add(E[i].v + n , E[i].u , 0 , -E[i].w);\n\twhile(SPFA()) \n\t{\n\t\twhile(1)\n\t\t{\n\t\t\tint res = dfs(s , 2000000);\n\t\t\tif(!res) break;\n\t\t\tmaxflow += res;\n\t\t}\n\t}\n\tif(maxflow != n - 1) return puts(\"-1\") & 0;\n\tprintf(\"%.7lf\\n\",mincost);\n \treturn 0;\n}\n```",
        "postTime": 1636378110,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF277E Binary Tree on Plane"
    },
    {
        "content": "## \u63d0\u8981\n\n\u672c\u9898\u9700\u8981\u4e00\u5b9a\u7684\u7f51\u7edc\u6d41\u57fa\u7840\uff0c\u662f\u4e00\u9053\u975e\u5e38\u597d\u7684 **\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41** \u9898\u76ee\u3002\n\n## \u6b63\u6587\n\n\u672c\u9898\u4e2d\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u7ea6\u675f\u5173\u7cfb\uff0c\u5f53\u8d2a\u5fc3\u601d\u60f3\u5341\u5206\u96be\u4ee5\u5904\u7406\u7ea6\u675f\u5173\u7cfb\u7684\u65f6\u5019\uff0c\u6211\u4eec\u66f4\u591a\u65f6\u5019\u9700\u8981\u7528\u7f51\u7edc\u6d41\u7684\u601d\u60f3\u53bb\u89e3\u51b3\u9898\u76ee\u7684\u7ea6\u675f\u3002\n\n\u6211\u4eec\u601d\u8003\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff0c\u4e00\u4e2a\u70b9\u6700\u591a\u7684\u513f\u5b50\u8282\u70b9\u662f $2$  \u4e2a\uff0c\u7236\u4eb2\u8282\u70b9\u662f\u4e00\u4e2a\uff0c\u800c\u4e14\u5fc5\u987b\u4fdd\u8bc1\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u7236\u4eb2\u8282\u70b9\u3002\u90a3\u4e48\u6211\u4eec\u7684\u7ea6\u675f\u80af\u5b9a\u5c31\u662f\u4ece\u7236\u4eb2\u8282\u70b9\u548c\u513f\u5b50\u8282\u70b9\u4e2d\u7684\u5173\u7cfb\u6765\u8003\u8651\u3002\n\n\u8003\u8651\u4e00\u4e2a\u513f\u5b50\u8282\u70b9\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7236\u4eb2\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u522b\u8003\u8651\u4e00\u4e2a\u70b9\u6210\u4e3a\u7236\u4eb2\u8282\u70b9\u548c\u513f\u5b50\u7684\u60c5\u51b5\uff0c\u4e24\u4e2a\u70b9\u7684\u60c5\u51b5\u6211\u4eec\u5c06\u4e00\u4e2a\u70b9 $u$ \u5206\u522b\u62c6\u6210 $u_1,u_2$\uff08\u6ce8\u610f\u8fd9\u91cc\u7684 $u$ \u53ea\u4ee3\u8868\u4e00\u79cd\u53d8\u91cf\u60c5\u51b5\uff0c\u4e0b\u6587\u4e2d\u51fa\u73b0\u7684\u4e00\u4e9b\u65b0\u7684\u547d\u540d\u4e0e\u8fd9\u91cc\u7684\u62c6\u70b9\u8868\u793a\u7684\u662f\u540c\u6837\u7684\u610f\u4e49\uff09\uff0c\u8bbe $u_1$ \u4ee3\u8868\u7740\u6210\u4e3a\u7236\u4eb2\u8282\u70b9\u65f6\u513f\u5b50\u8282\u70b9\u7684\u7ea6\u675f\u60c5\u51b5\uff0c $u_2$ \u4ee3\u8868\u7740\u6210\u4e3a\u513f\u5b50\u8282\u70b9\u65f6\u7684\u88ab\u7ea6\u675f\u60c5\u51b5\uff0c$u_1$ \u5411\u8d85\u7ea7\u6e90\u70b9\u8fde\u6d41\u91cf\u4e3a $2$ \u7684\u8fb9\uff0c$u_2$ \u5411\u8d85\u7ea7\u6c47\u70b9\u8fde\u6d41\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u7528\u6d41\u91cf\u9650\u5236\u7ea6\u675f\u5173\u7cfb\u3002\n\n\u8003\u8651\u5f53\u4e00\u4e2a\u70b9\u6210\u4e3a\u53e6\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\u8282\u70b9\u65f6\u4f1a\u4ea7\u751f\u7684\u8d21\u732e\u5982\u4f55\u8bbe\u7f6e\uff1a\n\n\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u5c06\u6d41\u91cf\u8bbe\u4e3a\u4e86\u7ea6\u675f\u5173\u7cfb\uff0c\u800c\u4e14\u7f51\u7edc\u6d41\u4e2d\u662f\u5f88\u96be\u7528\u5c0f\u6570\u5f53\u505a\u6d41\u91cf\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u81ea\u7136\u7684\u60f3\u5230\u4e86 **\u8d39\u7528** \u3002\n\n\u5f53 $u$ \u70b9\u53ef\u4ee5\u6210\u4e3a $v$ \u70b9\u7684\u7236\u4eb2\u8282\u70b9\u65f6\uff0c\u5c31\u5c06 $u_1$ \u70b9\u8fde\u5411 $v_2$ \u70b9\uff0c\u6d41\u91cf\u968f\u4fbf\uff08\u4e2d\u95f4\u7684\u8fb9\u6743\u5e76\u4e0d\u5f71\u54cd\u70b9\u4e4b\u95f4\u7684\u7ea6\u675f\u5173\u7cfb\uff0c\u70b9\u7684\u7ea6\u675f\u53ea\u4e0e\u6e90\u70b9\u548c\u6c47\u70b9\u6709\u5173\uff09\uff0c\u8fb9\u6743\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\n\n## \u4ee3\u7801\n\n~~~cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int N = 1e6 + 1;\nconst int INF = 1e9 + 1;\nstruct node {\n    int x,y;\n    bool operator<(const node &tem)const{return y > tem.y;}\n};\nint hd[N],nxt[N],to[N],cap[N],tot = 1,cur[N],flow[N],pre[N],lst[N];\ndouble val[N],ans = 0,dis[N];\nbool vis[N];\nint s,t,n;\nnode p[N];\ninline void add(const int u,const int v,const int z,const double k) {nxt[++tot] = hd[u],to[tot] = v,cap[tot] = z,val[tot] = k,hd[u] = tot;}\ninline void adds(const int u,const int v,const int z,const double k) {add(u,v,z,k),add(v,u,0,-k);}\ninline double calc(const int u,const int v) {return sqrt((double)(p[u].x - p[v].x) * (p[u].x - p[v].x) + (p[u].y - p[v].y) * (p[u].y - p[v].y));}\ninline bool SPFA(){\n    queue<int>Q;\n    for(int i = 1; i <= t; i++) flow[i] = INF,dis[i] = INF,vis[i] = false;\n    Q.push(s); vis[s] = 1; dis[s] = 0; pre[t] = -1;\n    while (!Q.empty()) {\n        int now = Q.front(); Q.pop(),vis[now]=0;\n        for (int eg = hd[now]; eg ; eg = nxt[eg]) {\n            int v = to[eg];\n            if (cap[eg] && dis[v] > dis[now] + val[eg]){\n                dis[v] = dis[now] + val[eg],pre[v] = now,lst[v] = eg;\n                flow[v] = min(flow[now],cap[eg]);\n                if (!vis[v]) vis[v] = true,Q.push(v);\n            }\n        }\n    }\n    return pre[t]!=-1;\n}\n\nint mcmf(){\n    int sum = 0;\n    while (SPFA()) {\n        int now = t;\n        sum += flow[t],ans += flow[t] * dis[t];\n        while (now != s){\n            now[lst][cap] -= flow[t];\n            (now[lst] ^ 1)[cap] += flow[t];\n            now = pre[now];\n        }\n    }\n    return sum;\n}\nint main() {\n    scanf(\"%d\",&n);\n    for(int i = 1; i <= n; i++) scanf(\"%d%d\",&p[i].x,&p[i].y);\n    sort(p + 1,p + 1 + n);\n    s = n << 1 + 1,t = n << 1 + 2;\n    for(int i = 1; i <= n; i++) adds(s,i,2,0),adds(i + n,t,1,0);\n    for(int i = 1; i <= n; i++) for(int j = i + 1; j <= n; j++) if(p[i].y > p[j].y) adds(i,j + n,1,calc(i,j));//\u4e24\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u3002\n    if(mcmf() != n - 1) puts(\"-1\");//\u5982\u679c\u8bf4\u6709\u7236\u4eb2\u8282\u70b9\u7684\u8282\u70b9\u4e2a\u6570\u4e0d\u8db3 n - 1 \u4e2a\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4ee3\u8868\u6ca1\u6709\u89e3\n    else printf(\"%.6lf\\n\",ans);\n    return 0;\n}\n~~~\n\n## \u9898\u5916\u8bdd\n\n\u8fd9\u9053\u9898\u6211\u7528 $\\text{dinic}$ \u6b7b\u90fd\u5361\u4e0d\u8fc7\u53bb\uff0c\u7136\u540e\u6362\u4e86 $\\text{EK}$ \u4e4b\u540e\u5c31\u8fc7\u4e86\uff0c\u6240\u4ee5\u8bf4\u8fd9\u79cd\u5355\u6761\u8def\u62d3\u5c55\u7684\u56fe\u8fd8\u662f\u7528 $\\text{EK}$ \u5faa\u73af\u8fd8\u662f\u5feb\u4e00\u4e9b\uff0c $\\text{dinic}$ \u9012\u5f52\u7684\u5e38\u6570\u5b9e\u5728\u662f\u592a\u5927\u4e86\u3002",
        "postTime": 1622857068,
        "uid": 366935,
        "name": "KAMIYA_KINA",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF277E Binary Tree on Plane"
    },
    {
        "content": "\u8d39\u7528\u6d41\u3002\n\n\u53ef\u4ee5\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\u7c7b\u4f3c\u4e8e\u5339\u914d\u7684\u95ee\u9898\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u79cd\u5339\u914d\u5e76\u4e0d\u662f\u4e00\u5bf9\u4e00\u7684\u3002\u5177\u4f53\u5730\uff0c\u5c06\u6bcf\u4e2a\u70b9 $u$ \u62c6\u6210\u4e24\u4e2a\u70b9 $u_\\text{fa},u_\\text{son}$\uff0c\u8bbe\u6e90\u70b9\u4e3a $s$\u3001\u6c47\u70b9\u4e3a $t$\uff0c\u5219\u4e00\u6761\u6d41 $s\\to u_\\text{fa}\\to v_\\text{son}\\to t$ \u5c31\u4ee3\u8868 $u$ \u662f $v$ \u7684\u7236\u4eb2\u3002\n\n\u4e00\u4e2a\u8282\u70b9\u6700\u591a\u4f5c\u4e3a\u4e24\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u56e0\u6b64 $s\\to u_\\text{fa}$ \u7684\u5bb9\u91cf\u4e3a $2$\u3001\u4ee3\u4ef7\u4e3a $0$\u3002\u4e00\u4e2a\u8282\u70b9\u6700\u591a\u4f5c\u4e3a\u4e00\u4e2a\u8282\u70b9\u7684\u513f\u5b50\uff0c\u56e0\u6b64 $u_\\text{son}\\to t$ \u7684\u5bb9\u91cf\u4e3a $1$\u3001\u4ee3\u4ef7\u4e3a $0$\u3002\u5bf9\u4e8e\u6bcf\u4e00\u5bf9\u8282\u70b9 $(u,v)$\uff0c\u82e5 $u$ \u53ef\u4ee5\u4f5c\u4e3a $v$ \u7684\u7236\u4eb2\uff0c\u5219\u8fde\u63a5\u4e00\u6761\u8fb9 $u_\\text{fa}\\to v_\\text{son}$\uff0c\u5bb9\u91cf\u4e3a $1$\u3001\u4ee3\u4ef7\u4e3a $\\sqrt{(\\Delta x)^2+(\\Delta y)^2}$\u3002\n\n\u6c42\u51fa\u6700\u5927\u6d41 $\\text{MF}$ \u548c\u6b64\u65f6\u7684\u6700\u5c0f\u8d39\u7528 $\\text{MC}$\u3002\u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u6784\u6210\u4e00\u68f5\u4e8c\u53c9\u6811\u5f53\u4e14\u4ec5\u5f53 $\\text{MF}=n-1$\uff0c\u6b64\u65f6\u7684 $\\text{MC}$ \u5c31\u662f\u6700\u5c0f\u6743\u503c\u548c\u3002\n\n```cpp\n// Problem: CF277E Binary Tree on Plane\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/CF277E\n// Memory Limit: 250 MB\n// Time Limit: 3000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n//By: OIer rui_er\n#include <bits/stdc++.h>\n#define rep(x,y,z) for(ll x=(y);x<=(z);x++)\n#define per(x,y,z) for(ll x=(y);x>=(z);x--)\n#define debug(format...) fprintf(stderr, format)\n#define fileIO(s) do{freopen(s\".in\",\"r\",stdin);freopen(s\".out\",\"w\",stdout);}while(false)\n#define likely(exp) __builtin_expect(!!(exp), 1)\n#define unlikely(exp) __builtin_expect(!!(exp), 0)\nusing namespace std;\ntypedef long long ll;\nconst ll N = 1e3+5, M = 3e6+5, inf = 0x3f3f3f3f3f3f3f3fll;\n\nll n, s, t, x[N], y[N], vis[N], flow[N], pre[N];\ndouble dis[N];\ntemplate<typename T> void chkmin(T& x, T y) {if(x > y) x = y;}\ntemplate<typename T> void chkmax(T& x, T y) {if(x < y) x = y;}\nstruct Edge {\n\tll v, w, nxt;\n\tdouble c;\n\tEdge(ll a=0, ll b=0, double c=0.0, ll d=0) : v(a), w(b), c(c), nxt(d) {}\n}e[M];\nll h[N], ne = 1;\nvoid add(ll u, ll v, ll w, double c) {\n\te[++ne] = Edge(v, w, c, h[u]); h[u] = ne;\n\te[++ne] = Edge(u, 0,-c, h[v]); h[v] = ne;\n}\nbool BellmanFord() {\n\tfill(dis, dis+1+t, 1e100);\n\tmemset(vis, 0, sizeof(vis));\n\tmemset(flow, 0x3f, sizeof(flow));\n\tqueue<ll> q;\n\tdis[s] = 0.0;\n\tvis[s] = 1;\n\tpre[t] = -1;\n\tq.push(s);\n\twhile(!q.empty()) {\n\t\tll u = q.front(); q.pop();\n\t\tvis[u] = 0;\n\t\tfor(ll i=h[u];i;i=e[i].nxt) {\n\t\t\tll v = e[i].v, w = e[i].w;\n\t\t\tdouble c = e[i].c;\n\t\t\tif(w && dis[v] > dis[u] + c) {\n\t\t\t\tdis[v] = dis[u] + c;\n\t\t\t\tpre[v] = i;\n\t\t\t\tflow[v] = min(flow[u], w);\n\t\t\t\tif(!vis[v]) {\n\t\t\t\t\tvis[v] = 1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ~pre[t];\n}\ntuple<ll, double> MCMF() {\n\tll maxflow = 0; double mincost = 0.0;\n\twhile(BellmanFord()) {\n\t\tll now = inf;\n\t\tfor(ll u = t; u != s; u = e[pre[u]^1].v) chkmin(now, flow[u]);\n\t\tfor(ll u = t; u != s; u = e[pre[u]^1].v) {\n\t\t\te[pre[u]].w -= now;\n\t\t\te[pre[u]^1].w += now;\n\t\t\tmincost += now * e[pre[u]].c;\n\t\t}\n\t\tmaxflow += now;\n\t}\n\treturn make_tuple(maxflow, mincost);\n}\ndouble dist(int i, int j) {\n\tdouble dx = x[i] - x[j], dy = y[i] - y[j];\n\treturn sqrt(dx * dx + dy * dy);\n}\n\nint main() {\n\tscanf(\"%lld\", &n);\n\ts = 2 * n + 1; t = 2 * n + 2;\n\trep(i, 1, n) {\n\t\tscanf(\"%lld%lld\", &x[i], &y[i]);\n\t\tadd(s, i, 2, 0.0);\n\t\tadd(i+n, t, 1, 0.0);\n\t}\n\trep(i, 1, n) rep(j, 1, n) if(y[i] > y[j]) add(i, j+n, 1, dist(i, j));\n\tint maxflow; double mincost;\n\ttie(maxflow, mincost) = MCMF();\n\tif(maxflow < n - 1) puts(\"-1\");\n\telse printf(\"%.15f\\n\", mincost);\n\treturn 0;\n}\n```",
        "postTime": 1675002879,
        "uid": 122461,
        "name": "rui_er",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF277E\u3010Binary Tree on Plane\u3011"
    },
    {
        "content": "\u5b89\u5229\u4e2a\u4eba blog\uff1ahttps://www.cnblogs.com/ET2006/\n\n\u6ce8\u610f\u5230\u4e00\u5f20\u56fe\u662f\u4e00\u68f5\u6811\u5f53\u4e14\u4ec5\u5f53\u53ea\u6709\u4e00\u4e2a\u70b9\uff08\u6839\u8282\u70b9\uff09\u6ca1\u6709\u7236\u4eb2\uff0c\u5176\u5b83\u70b9\u90fd\u6709\u6070\u597d\u4e00\u4e2a\u7236\u4eb2\u3002\u5e76\u4e14\u6bcf\u4e2a\u70b9\u8fde\u5411\u5176\u513f\u5b50\u7684\u8fb9\u4e0d\u8d85\u8fc7 $2$\uff0c\u6545\u53ef\u4ee5\u4ee5\u6b64\u4e3a\u7a81\u7834\u53e3\u5efa\u56fe\u3002\n\n\u505a\u7f51\u7edc\u6d41\u9898\u76ee\u9996\u5148\u8981\u641e\u6e05\u695a\u4e09\u70b9\uff1a\u70b9\u8868\u793a\u4ec0\u4e48\uff0c\u8fb9\u8868\u793a\u4ec0\u4e48\uff0c\u4e00\u6761 $S$ \u5230 $T$ \u7684\u8def\u5f84\u8868\u793a\u4ec0\u4e48\u3002\u8fd9\u9898\u6211\u4eec\u53ef\u4ee5\u7528\u70b9\u8868\u793a\u539f\u56fe\u4e2d\u7684\u70b9\uff0c\u4e00\u6761 $S\\to T$ \u7684\u4e09\u4e2a\u70b9\u7684\u8def\u5f84 $S\\to u\\to v\\to T$ \u8868\u793a $(u,v)$ \u4e4b\u95f4\u591a\u4e86\u6761\u8fb9\uff0c\u5176\u4e2d $u$ \u662f\u7236\u4eb2\uff0c$v$ \u662f\u513f\u5b50\u3002\u8fd9\u6837\u4e00\u6765\u601d\u8def\u5c31\u51fa\u6765\u4e86\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $u$\uff0c\u8fde\u4e00\u6761\u4ece $S$ \u5230 $u$\uff0c\u5bb9\u91cf\u4e3a $2$ \u7684\u8fb9\uff0c\u8868\u793a $u$ \u6700\u591a\u662f $2$ \u4e2a\u8282\u70b9\u7684\u7236\u4eb2\uff1b\u518d\u8fde\u4e00\u6761 $u$ \u5230 $T$\uff0c\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u8868\u793a $u$ \u6700\u591a\u662f\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u3002\u7136\u540e\u5bf9\u4e8e\u6240\u6709\u4e8c\u5143\u7ec4 $(u,v)$ \u6ee1\u8db3 $u$ \u80fd\u6210\u4e3a $v$ \u7684\u7236\u4eb2\uff0c\u8fde\u4e00\u6761\u4ece $u$ \u5230 $v$\uff0c\u5bb9\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a\u8fd9\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u7136\u540e\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5c31\u884c\u4e86\uff0c\u6700\u5927\u6d41\u9650\u5236\u8fb9\u6570\u5fc5\u987b\u4e3a $n-1$\uff0c\u6700\u5c0f\u8d39\u7528\u4fdd\u8bc1\u6743\u503c\u548c\u6700\u5c0f\u3002\u5982\u679c\u6700\u5927\u6d41\u4e0d\u662f $n-1$ \u90a3\u4e48\u5c31\u4e0d\u5b58\u5728\u6ee1\u8db3\u8981\u6c42\u7684\u4e8c\u53c9\u6811\uff0c\u5426\u5219\u8f93\u51fa\u6700\u5c0f\u8d39\u7528\u5373\u53ef\u3002\n\n\u4f46\u8fd9\u6837\u505a\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u4f1a\u51fa\u73b0 $S\\to u\\to T$ \u7684\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u8bf4\u81ea\u5df1\u53ef\u80fd\u4f1a\u6210\u4e3a\u81ea\u5df1\u7684\u513f\u5b50\u3002\u78b0\u5230\u8fd9\u79cd\u60c5\u51b5\u600e\u4e48\u529e\u5462\uff1f\u62c6\u70b9\u554a\u3002\u8003\u8651\u5c06\u6bcf\u4e2a\u70b9\u62c6\u6210 $u_1,u_2$ \u4e24\u4e2a\u70b9\uff0c$u_2$ \u7528\u4e8e\u201d\u63a5\u53d7\u7236\u4eb2\u201c\uff0c$u_1$ \u7528\u4e8e\u201c\u4f5c\u4e3a\u513f\u5b50\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06\u539f\u5148 $S\\to u$ \u7684\u8fb9\u6539\u4e3a $S\\to u_1$\uff0c$S\\to u$ \u7684\u8fb9\u6539\u4e3a $S\\to u_2$\uff0c$u\\to v$ \u7684\u8fb9\u6539\u4e3a $u_2\\to v_1$\u3002\u8fd9\u6837\u5c31\u4e0d\u4f1a\u51fa\u73b0\"\u81ea\u5df1\u53ef\u80fd\u4f1a\u6210\u4e3a\u81ea\u5df1\u7684\u513f\u5b50\"\u7684\u60c5\u51b5\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define fz(i,a,b) for(int i=a;i<=b;i++)\n#define fd(i,a,b) for(int i=a;i>=b;i--)\n#define ffe(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define fill0(a) memset(a,0,sizeof(a))\n#define fill1(a) memset(a,-1,sizeof(a))\n#define fillbig(a) memset(a,63,sizeof(a))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\ntemplate<typename T1,typename T2> void chkmin(T1 &x,T2 y){if(x>y) x=y;}\ntemplate<typename T1,typename T2> void chkmax(T1 &x,T2 y){if(x<y) x=y;}\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntemplate<typename T> void read(T &x){\n\tx=0;char c=getchar();T neg=1;\n\twhile(!isdigit(c)){if(c=='-') neg=-1;c=getchar();}\n\twhile(isdigit(c)) x=x*10+c-'0',c=getchar();\n\tx*=neg;\n}\nconst int MAXN=400;\nconst int MAXV=802;\nconst int MAXE=3e5;\nconst int INF=0x3f3f3f3f;\nint n,x[MAXN+5],y[MAXN+5],S=801,T=802;\nint hd[MAXV+5],to[MAXE+5],nxt[MAXE+5],cap[MAXE+5],ec=1;\ndouble cst[MAXE+5];\ndouble dis(int x1,int y1,int x2,int y2){\n\treturn sqrt(1ll*(x2-x1)*(x2-x1)+1ll*(y2-y1)*(y2-y1));\n}\nvoid adde(int u,int v,int f,double c){\n\tto[++ec]=v;cap[ec]=f;cst[ec]=c;nxt[ec]=hd[u];hd[u]=ec;\n\tto[++ec]=u;cap[ec]=0;cst[ec]=-c;nxt[ec]=hd[v];hd[v]=ec;\n}\ndouble dist[MAXV+5];int flw[MAXV+5],pre[MAXV+5],lste[MAXV+5];\nbool inq[MAXV+5];\nbool getdis(){\n\tfill(dist,dist+MAXV+1,INF);memset(flw,0,sizeof(flw));\n\tdist[S]=0;flw[S]=INF;queue<int> q;q.push(S);inq[S]=1;\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();inq[x]=0;\n\t\tfor(int e=hd[x];e;e=nxt[e]){\n\t\t\tint y=to[e],z=cap[e];double w=cst[e];\n\t\t\tif(dist[y]>dist[x]+w&&z){\n\t\t\t\tdist[y]=dist[x]+w;flw[y]=min(flw[x],z);\n\t\t\t\tpre[y]=x;lste[y]=e;\n\t\t\t\tif(!inq[y]){inq[y]=1;q.push(y);}\n\t\t\t}\n\t\t}\n\t} return dist[T]<INF;\n}\npair<int,double> mcmf(){\n\tint mxfl=0;double mncst=0;\n\twhile(getdis()){\n\t\tmxfl+=flw[T];mncst+=flw[T]*dist[T];\n\t\tfor(int i=T;i!=S;i=pre[i]){\n\t\t\tcap[lste[i]]-=flw[T];cap[lste[i]^1]+=flw[T];\n\t\t}\n\t} return mp(mxfl,mncst);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%d%d\",&x[i],&y[i]);\n\tfor(int i=1;i<=n;i++) for(int j=1;j<=n;j++) if(y[i]<y[j]){\n\t\tadde(j+n,i,1,dis(x[i],y[i],x[j],y[j]));\n\t}\n\tfor(int i=1;i<=n;i++) adde(S,i+n,2,0);\n\tfor(int i=1;i<=n;i++) adde(i,T,1,0);\n\tpair<int,double> ans=mcmf();\n\tif(ans.fi!=n-1) puts(\"-1\");\n\telse printf(\"%.10lf\\n\",ans.se);\n\treturn 0;\n}\n```",
        "postTime": 1611985244,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF277E \u3010Binary Tree on Plane\u3011"
    },
    {
        "content": "\u8d39\u7528\u6d41\u3002\n \n\u56e0\u4e3a\u6709\u4e24\u79cd\u53c2\u6570\uff0c\u4e00\u79cd\u662f\u513f\u5b50/\u7236\u4eb2\u4e2a\u6570(\u6574\u6570)\uff0c\u4e00\u79cd\u662f\u8ddd\u79bb(\u5b9e\u6570)\uff0c\u4e24\u79cd\u4fe1\u606f\u4e0d\u80fd\u626f\u5230\u4e00\u8d77\u8dd1\uff0c\u6240\u4ee5\u8981\u8dd1\u8d39\u7528\u6d41\u3002\n\n\u81ea\u5df1\u521a\u5f00\u59cb\u60f3\u7528\u4e00\u79cd\u975e\u5e38\u5947\u8469\u7684\u65b9\u6cd5\u6784\u9020\uff0cyy\u4e86\u534a\u5929\u53d1\u73b0\u6709\u4e2a\u65e0\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u53c8\u56de\u5230\u6b63\u5e38\u601d\u8def\u3002\n\n\u7528\u4e00\u822c\u7684\u5957\u8def\uff0c\u8d85\u7ea7\u6e90\u70b9\u548c\u6c47\u70b9\u548c\u5176\u4ed6\u70b9\u7684\u8fde\u8fb9\u8981\u4e48\u662f\u8868\u793a\u4e24\u79cd\u76f8\u5bf9\u5e94\u7684\u4e0d\u540c\u4fe1\u606f\uff0c\u8981\u4e48\u662f\u4e3a\u4e86\u4f7f\u6bcf\u4e2a\u8d77\u59cb\u70b9\u90fd\u6709\u65e0\u7a77\u5927\u7684\u6d41\u91cf\uff0c\u6bcf\u4e2a\u7ed3\u675f\u70b9\u7684\u6d41\u91cf\u90fd\u80fd\u6d41\u5230\u4e00\u4e2a\u70b9\u91cc\u7edf\u8ba1\u3002\n\n\u8fd9\u91cc\u663e\u7136\u662f\u524d\u8005\u3002\n\n\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210 $u_i,v_i$ \u4e24\u4e2a\u70b9\uff0c$v_i$ \u7528\u6765\u8868\u793a\u548c\u513f\u5b50\u6709\u5173\u7684\u4fe1\u606f\uff0c$u_i$ \u7528\u6765\u8868\u793a\u548c\u7236\u4eb2\u6709\u5173\u7684\u4fe1\u606f\u3002\n\n\u7136\u540e\u4ece\u6bcf\u4e2a $v_i$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a2\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u5230\u6e90\u70b9\uff0c\u56e0\u4e3a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u70b9\u6700\u591a\u53ea\u80fd\u67092\u4e2a\u513f\u5b50\uff0c\u8fd8\u6ca1\u6709\u513f\u5b50\u7684\u65f6\u5019\u6ca1\u6709\u8ddd\u79bb\uff0c\u4ece\u6bcf\u4e2a $u_i$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u5230\u6c47\u70b9\uff0c\u539f\u56e0\u540c\u4e0a\u3002\n\n\u63a5\u7740\u5bf9\u4e8e\u6bcf\u7ec4 $y_i > y_j$ \u7684\u70b9 $i,j$\uff0c\u4ece $v_i$ \u5230 $u_j$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a\u8ddd\u79bb\u7684\u8fb9\uff0c\u56e0\u4e3a\u8fd9\u65f6 $i$ \u53ef\u4ee5\u5f53 $j$ \u7684\u7236\u4eb2\u3002\n\n\u7136\u540e\u8dd1\u4e00\u904d\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u677f\u5b50\u5373\u53ef\u3002\n\n\u6ce8\u610f\u8f93\u51fa\u65f6\u7684\u7cbe\u5ea6\uff0c\u8fd9\u91cc\u6211\u4fdd\u7559\u4e868\u4f4d\u5c0f\u6570\u3002\n\n\u6700\u540e\u7279\u5224\u65e0\u89e3\uff0c\u5176\u5b9e\u4e0d\u96be\u3002\u8003\u8651\u5230\u6811\u4e0a\u9664\u4e86\u6839\u8282\u70b9\u4e00\u5171\u6709 $n - 1$ \u4e2a\u8282\u70b9\u6709\u7236\u4eb2\uff0c\u6211\u4eec\u53ea\u9700\u5728\u5efa\u8fb9\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a $u_i$ \u5230\u6c47\u70b9\u7684\u8fb9\u7684\u7f16\u53f7\uff0c\u6700\u540e\u679a\u4e3e\u4e00\u4e0b\uff0c\u770b\u8fd9\u4e9b\u8fb9\u6709\u6ca1\u6709\u88ab\u6d41\u6389 $n-1$ \u6761\u5373\u53ef\u3002\n\ncode:\n```cpp\n#include<bits/stdc++.h>\n#define op long long\n#define rint register int\nconst int maxn = 3e5 + 100;\nconst int INF = 2e9;\nint read(){\n    int x = 0,f = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9'){\n        if(ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while(ch >= '0' && ch <= '9'){\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\n\nusing std::ios;\nusing std::cin;\nusing std::cout;\nusing std::max;\nusing std::min;\nusing std::sort;\nusing std::unique;\nusing std::lower_bound;\nusing std::swap;\nusing std::abs;\nusing std::acos;\nusing std::queue;\nusing std::map;\nusing std::string;\ndouble mon[maxn], cost[maxn], mincost;\nqueue<int>q;\nint check[maxn];\nint n, m, s, t, to[maxn], nxt[maxn], fr[maxn], l[maxn], cnt = 1, flow[maxn], maxflow, vis[maxn], pre[maxn], liu[maxn];\nvoid add(int u, int v, int ll, double monn){\n\t++cnt, to[cnt] = v, l[cnt] = ll, mon[cnt] = monn, nxt[cnt] = fr[u], fr[u] = cnt;\n\t++cnt, to[cnt] = u, l[cnt] = 0, mon[cnt] = -monn, nxt[cnt] = fr[v], fr[v] = cnt;\n}\nbool SPFA(){\n\tfor(int i = 1; i < maxn - 10; i++)cost[i] = 123456789.99;\n\tmemset(flow, 0x3f, sizeof(flow));\n\tmemset(vis, 0, sizeof(vis));\n\tvis[s] = 1, pre[t] = -13, cost[s] = 0; q.push(s);\n\twhile(!q.empty()){\n\t\tint now = q.front(); q.pop(); \n\t\tfor(int i = fr[now]; i; i = nxt[i]){\n\t\t\tif(l[i] && cost[to[i]] > cost[now] + mon[i]){\n\t\t\t\tcost[to[i]] = cost[now] + mon[i];\n\t\t\t\tliu[to[i]] = i;\n\t\t\t\tflow[to[i]] = min(l[i], flow[now]);\n\t\t\t\tpre[to[i]] = now;\n\t\t\t\tif(!vis[to[i]]){\n\t\t\t\t\tq.push(to[i]);\n\t\t\t\t\tvis[to[i]] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvis[now] = 0;\n\t}\n\treturn !(pre[t] == -13);\n}\nvoid MCMA(){\n\twhile(SPFA()){\n\t\tint now = t;\n\t\tmaxflow += flow[t], mincost += (double)flow[t] * cost[t];\n\t\twhile(now != s){\n\t\t\tl[liu[now]] -= flow[t];\n\t\t\tl[liu[now] ^ 1] += flow[t];\n\t\t\tnow = pre[now];\n\t\t}\n\t}\n}\ndouble loca(int x1, int x2, int y1, int y2){\n\treturn sqrt((double)(x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\nstruct node{\n\tdouble x, y;\n}p[maxn];\nbool cmp(node a, node b){\n\treturn a.y > b.y;\n}\nint cntp, u[maxn], v[maxn], vout[maxn], ans;\nsigned main(){\n\tn = read();\n\tfor(int i = 1; i <= n; i++){\n\t\tp[i].x = read();\n\t\tp[i].y = read(); \n\t}\n\tsort(p + 1, p + 1 + n, cmp);\n\ts = ++cntp, t = ++cntp;\n\tfor(int i = 1; i <= n; i++){\n\t\tu[i] = ++cntp, v[i] = ++cntp;\n\t\tadd(s, v[i], 2, 0);\n\t\tadd(u[i], t, 1, 0);\n\t\tcheck[i] = cnt - 1;\n    }\n\tfor(int i = 1; i <= n; i++){\n\t\tfor(int j = i + 1; j <= n; j++){\n\t\t\tif(p[i].y != p[j].y){\n\t\t\t    add(v[i], u[j], 1, loca(p[i].x, p[j].x, p[i].y, p[j].y));\n\t\t\t}\n\t\t}\n\t}\n\tMCMA();\n\tfor(int i = 1; i <= cnt; i++){\n\t\tif(l[check[i]] > 0){\n\t\t\tans++;\n\t\t}\n\t}\n\tif(ans > 1)cout << \"-1\";else\n\tprintf(\"%.8lf\", mincost);\n}\n```",
        "postTime": 1596089207,
        "uid": 209547,
        "name": "infinities",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF277E \u3010Binary Tree on Plane\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF277E)\n\n[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://chenyu-w.github.io/2022/08/30/CF277E%20Binary%20Tree%20on%20Plane/)\n\n## \u524d\u8a00\n\n\u5c1d\u8bd5\u5bf9 `double` \u6570\u7ec4\u6570\u7ec4\u8fdb\u884c `memset` \u5e76 debug \u4e00\u5c0f\u65f6\u3002\n\n### \u524d\u7f6e\u829d\u58eb\n\n\u7f51\u7edc\u6d41\n\n\n## \u5206\u6790\n\n\u9996\u5148\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e00\u9898\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u6765\u505a\u5462\uff1f\n\n\u7f51\u7edc\u6d41\u7684\u9898\u76ee\u4e00\u822c\u90fd\u6709\u4e00\u4e2a\u660e\u663e\u7684\u7279\u70b9\uff1a\u6709\u5f88\u591a\u5176\u4ed6\u65b9\u6cd5\u89e3\u51b3\u4e0d\u4e86\u7684\u9650\u5236\u3002\u7136\u540e\u6211\u4eec\u6765\u770b\u8fd9\u9053\u9898\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u6784\u5efa\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u513f\u5b50\u548c\u4e00\u4e2a\u7236\u4eb2\uff0c\u7136\u540e\u8fd8\u6709\u5bf9\u4e8e $y$ \u5750\u6807\u7684\u9650\u5236\uff0c\u8003\u8651\u5230\u8fd9\u4e9b\u9650\u5236\u4e0d\u597d\u7528\u5176\u5b83\u65b9\u6cd5\u641e\uff0c\u4e8e\u662f\u8003\u8651\u7f51\u7edc\u6d41\u5efa\u6a21\u3002\n\n\u6211\u4eec\u8003\u8651\u4efb\u610f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u8282\u70b9 $u$\uff0c\u5b83\u6709\u7740\u53cc\u91cd\u8eab\u4efd\u2014\u2014\u7236\u4eb2\u548c\u513f\u5b50\uff0c\u4e8e\u662f\u6211\u4eec\u628a\u4e00\u4e2a\u70b9 $u$ \u62c6\u6210 $u_1$ \u548c $u_2$ \u4e24\u4e2a\u70b9\uff0c$u_1$ \u4ee3\u8868\u7236\u4eb2\uff0c$u_2$ \u4ee3\u8868\u513f\u5b50\uff0c\u7136\u540e\u6211\u4eec\u5957\u8def\u5730\u5c06\u6e90\u70b9 $s$ \u5411 $u_1$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $2$\uff0c\u8d39\u7528\u4e3a $0$ \u7684\u8fb9\uff0c\u4ee3\u8868\u4e00\u4e2a\u70b9\u6700\u591a\u53ea\u80fd\u6709\u4e24\u4e2a\u513f\u5b50\uff0c$u_2$ \u5411\u6c47\u70b9 $t$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $0$ \u7684\u8fb9\uff0c\u4ee3\u8868\u4e00\u4e2a\u70b9\u6709\u4e00\u4e2a\u7236\u4eb2\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u4e24\u4e2a\u70b9 $u$ \u548c $v$\uff0c\u5982\u679c $u$ \u53ef\u4ee5\u5f53 $v$ \u7684\u7236\u4eb2\uff0c\u6211\u4eec\u5c31\u4ece $u_1$ \u5411 $v_2$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a\u4e24\u70b9\u8ddd\u79bb\u7684\u8fb9\uff0c\u4ee3\u8868\u8fde\u8fb9\u7684\u8d39\u7528\u4e3a\u4e24\u70b9\u95f4\u8ddd\u79bb\uff0c\u7136\u540e\u6211\u4eec\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef AC \u672c\u9898\u3002\n\n## \u4ee3\u7801\n\n```c++\n#include <bits/stdc++.h>\n#define pii pair<int, int>\n\nusing namespace std;\nconst int N = 1e6 + 10, INF = 1 << 30;\nint h[N], e[N], ne[N], f[N], idx;\nint s, t;\ndouble w[N];\npii pos[N];\ndouble d[N];\nint minf[N], pre[N];\nbool vis[N];\nint flow;\ndouble res;\n\ninline int read()\n{\n    int x = 0, y = 1; char c = getchar();\n    while (c < '0' || c > '9') {if (c == '-') y = -1; c = getchar();}\n    while (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x * y;\n}\n\ninline void add(int a, int b, int c, double d)\n{\n    e[idx] = b;\n    f[idx] = c;\n    w[idx] = d;\n    ne[idx] = h[a];\n    h[a] = idx++;\n}\n\ninline double dist(int x1, int y1, int x2, int y2)\n{\n    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\n\ninline bool spfa()\n{\n    for (int i = s; i <= t; i++) d[i] = INF;\n    memset(vis, 0, sizeof vis);\n    queue<int> q;\n    q.push(s);\n    d[s] = 0;\n    minf[s] = INF;\n    while (q.size())\n    {\n        int u = q.front();\n        q.pop();\n        vis[u] = false;\n        for (int i = h[u]; ~i; i = ne[i])\n        {\n            int v = e[i];\n            if (d[v] > d[u] + w[i] && f[i])\n            {\n                d[v] = d[u] + w[i];\n                minf[v] = min(minf[u], f[i]);\n                pre[v] = i;\n                if (!vis[v])\n                    q.push(v), vis[v] = true;\n            }\n        }\n    }\n    return d[t] < INF;\n}\n\ninline void EK()\n{\n    while (spfa())\n    {\n        flow += minf[t], res += d[t] * minf[t];\n        for (int i = t; i != s; i = e[pre[i] ^ 1])\n            f[pre[i]] -= minf[t], f[pre[i] ^ 1] += minf[t];\n    }\n}\n\nint main()\n{\n    memset(h, -1, sizeof h);\n    int n = read();\n    for (int i = 1; i <= n; i++) pos[i].first = read(), pos[i].second = read();\n    s = 0, t = 2 * n + 1;\n    for (int i = 1; i <= n; i++)\n        add(s, i, 2, 0), add(i, s, 0, 0);\n    for (int i = 1; i <= n; i++)\n        add(i + n, t, 1, 0), add(t, i + n, 0, 0);\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= n; j++)\n        {\n            if (i == j || pos[i].second <= pos[j].second) continue;\n            double d = dist(pos[i].first, pos[i].second, pos[j].first, pos[j].second);\n            add(i, j + n, 1, d);\n            add(j + n, i, 0, -d);\n        }\n    EK();\n    if (flow < n - 1) puts(\"-1\");\n    else printf(\"%.10lf\\n\", res);\n    return 0;\n}\n```\n\n",
        "postTime": 1661847489,
        "uid": 587248,
        "name": "wcywcywcywcy",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF277E"
    },
    {
        "content": "\u8003\u8651\u600e\u4e48\u89e3\u51b3\u4e8c\u53c9\u6811\u7684\u9650\u5236\u3002\n\n\u5b83\u7b49\u4ef7\u4e8e\u6bcf\u4e2a\u9876\u70b9\u53ea\u80fd\u8fde\u5411\u4e24\u4e2a $y$ \u5750\u6807\u5c0f\u7684\u8282\u70b9\u3002\n\n\u8f6c\u5316\u4e3a\u4e8c\u5206\u56fe\u6a21\u578b\uff0c\u4e00\u79cd $n-1$ \u6761\u8fb9\u7684\u5339\u914d\u65b9\u6848\u4e2d\u6bcf\u4e00\u6761\u8fb9 $(x,y)$ \uff0c$x$ \u4e3a $y$ \u5728\u6811\u4e0a\u7684\u513f\u5b50\u3002\n\n\u7ed9\u5de6\u4fa7\u6bcf\u4e2a\u70b9\u9650\u5236\u6d41\u91cf\u4e3a $1$ \uff0c\u53f3\u4fa7\u6bcf\u4e2a\u70b9\u9650\u5236\u6d41\u91cf\u4e3a $2$\uff0c\u603b\u6d41\u91cf\u4e0d\u8d85\u8fc7 $n-1$\u3002\n\n\u5bf9\u4e8e\u4e24\u4e2a\u8282\u70b9 $x,y$\uff0c\u76f4\u63a5\u8fde\u4e00\u6761\u8d39\u7528\u662f\u8ddd\u79bb\u7684\u8fb9\u5c31\u884c\u3002\n\n\u6700\u540e\u4e00\u6b21\u8d39\u7528\u6d41\u89e3\u51b3\u95ee\u9898\uff0c\u6700\u52a3\u590d\u6742\u5ea6 $O(n^3 \\sqrt{n})$\uff0c\u5e94\u8be5\u8db3\u591f\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NR=1e3+10;\nconst int MR=1e6+10;\n#define db double\nconst db eps=1e-9;\nint n,maxy,pos,x[NR],y[NR];\nstruct edge{\n\tint to,next,flow;db v;\n}g[MR];\nint tot=1,fte[NR];\nvoid add(int x,int y,int z,db v){\n//\tprintf(\"%d %d %d %.6lf\\n\",x,y,z,v);\n\tg[++tot]=(edge){y,fte[x],z,v};fte[x]=tot;\n\tg[++tot]=(edge){x,fte[y],0,-v};fte[y]=tot;\n}\n\nint s,t,p1,p2,vis[NR];\nqueue<int>q;\ndb dis[NR],ans;\nbool SPFA(){\n\tfor(int i=1;i<=t;i++)dis[i]=1e9;\n\tq.push(s);dis[s]=0;vis[s]=1;\n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();vis[x]=0;\n//\t\tcout<<x<<\" \"<<dis[x]<<endl;\n\t\tfor(int i=fte[x];i;i=g[i].next)\n\t\t\tif(g[i].flow&&dis[g[i].to]>dis[x]+g[i].v+eps){\n\t\t\t\tdis[g[i].to]=dis[x]+g[i].v;\n//\t\t\t\tprintf(\"x:%d y:%d v:%.6lf\\n\",x,g[i].to,g[i].v);\n\t\t\t\tif(!vis[g[i].to])q.push(g[i].to),vis[g[i].to]=1;\n\t\t\t}\n\t}\n\treturn dis[t]<1e9;\n}\nint dfs(int id,int Lim){\n\tif(id==t)return Lim;\n\tvis[id]=1;\n\tint flow=0,f;\n\tfor(int i=fte[id];i;i=g[i].next)\n\t\tif(!vis[g[i].to]&&g[i].flow&&abs(dis[g[i].to]-dis[id]-g[i].v)<eps){\n\t\t\tf=dfs(g[i].to,min(g[i].flow,Lim-flow));\n\t\t\tif(!f){\n\t\t\t\tdis[g[i].to]=1e9;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tflow+=f;g[i].flow-=f;g[i^1].flow+=f;\n\t\t\tans+=f*g[i].v;\n\t\t\tif(flow==Lim)break;\n\t\t}\n\tvis[id]=0;\n\treturn flow;\n}\ndb Dinic(){\n\tint Flow,MaxFlow=0;\n\twhile(SPFA())\n\t\twhile(Flow=dfs(s,1e9))MaxFlow+=Flow;\n\tif(MaxFlow<n-1)puts(\"-1\"),exit(0);\n\treturn ans;\n}\n\nint sq(int x){return x*x;}\nint main(){\n\tcin>>n;s=n*2+3;t=s+1;\n\tp1=n*2+1;p2=p1+1;\n\tfor(int i=1;i<=n;i++)\n\t\tcin>>x[i]>>y[i],maxy=max(maxy,y[i]);\n\tfor(int i=1;i<=n;i++)\n\t\tif(maxy==y[i]){\n\t\t\tif(pos)puts(\"-1\"),exit(0);\n\t\t\telse pos=i;\n\t\t}\n\tadd(s,p1,n-1,0);add(p2,t,n-1,0);\n\tfor(int i=1;i<=n;i++)add(i+n,p2,2,0);\n\tfor(int i=1;i<=n;i++)add(p1,i,1,0);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(y[j]>y[i])add(i,j+n,1,sqrt(sq(x[i]-x[j])+sq(y[i]-y[j])));\n\tprintf(\"%.6lf\\n\",Dinic());\n\treturn 0;\n}\n```",
        "postTime": 1655984746,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "CF277E \u9898\u89e3"
    }
]