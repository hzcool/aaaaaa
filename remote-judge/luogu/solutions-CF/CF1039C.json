[
    {
        "content": "\u663e\u7136\u5bf9\u4e8e\u6240\u6709\u8fb9\u662f\u5426\u5b89\u5168\u90fd\u6ca1\u6709\u5173\u7cfb\u7684$x$\uff0c\u6240\u80fd\u63d0\u4f9b\u7684\u8d21\u732e\u4e00\u5b9a\u662f$2^n$\u3002\u663e\u7136\u8fd9\u79cd\u60c5\u51b5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u90fd\u53ef\u4ee5\u53d6\u6216\u4e0d\u53d6\u3002\n\n\u5982\u679c$x=c_l\\quad xor \\quad c_r$,\u90a3\u4e48$l$\u548c$r$\u8981\u4e48\u90fd\u9009\uff0c\u8981\u4e48\u90fd\u4e0d\u9009\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a$l$\u548c$r$\u770b\u505a\u4e00\u4e2a\u70b9\u6765\u5904\u7406\uff0c\u628a\u5b83\u4eec\u53d8\u6210\u4e00\u4e2a\u8054\u901a\u5757\u3002\u8fd9\u6837\u7684\u8bdd\u8d21\u732e\u5e94\u8be5\u662f$2^{size}$\uff0c$size$\u8868\u793a\u8054\u901a\u5757\u7684\u6570\u91cf\u3002\n\n\u56e0\u4e3a\u4e00\u5171\u6709$m$\u6761\u8fb9\uff0c\u6240\u4ee5\u6700\u591a\u6709$m$\u4e2a$x$\u5bf9\u4e8e\u8fb9\u7684\u72b6\u6001\u6709\u5f71\u54cd\uff0c\u53ef\u4ee5\u8003\u8651\u679a\u4e3e$m$\u6761\u8fb9\uff0c\u8ba1\u7b97\u51fa$x$\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$x$\u6539\u53d8\u70b9\u7684\u72b6\u6001\u3002\n\n\u7136\u540e\u56e0\u4e3a\u6bcf\u4e00\u6761\u8fb9\u53ea\u4f1a\u88ab\u6539\u53d8\u4e00\u6b21\uff0c\u6240\u4ee5\u6700\u591a\u53ef\u4ee5\u6539\u53d8$m$\u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(m)$\u3002\n\n\u4ee3\u7801\uff1a\n```\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n\n#define ll long long\n#define Max 500005\n\nusing namespace std;\n\ninline char gc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\n#define gc getchar\ninline ll read(){\n    ll x=0;char ch=gc();bool positive=1;\n    for(;!isdigit(ch);ch=gc())if(ch=='-')positive=0;\n    for(;isdigit(ch);ch=gc())x=x*10+ch-'0';\n    return positive?x:-x;\n}\n\ninline void write(ll x){\n    if(x<0)x=-x,putchar('-');\n    if(x>9)write(x/10);putchar(x%10+'0');\n}\n\ninline void writeln(ll x){\n    write(x);puts(\"\");\n}//\u65e0\u7528\u7684\u5feb\u8bfb\u5feb\u8f93\n\nstruct Node{\n    ll l,r,num;\n    inline bool operator<(const Node&x)const{\n        return num<x.num;\n    }\n}e[Max];//\u5b58\u8fb9\n\nconst ll mod=1e9+7;\n\nll n,m,k,s,cnt,ans,sum,size,a[Max],fa[Max];\n\ninline ll find(ll x){//\u76f4\u63a5\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\u5757\u72b6\u6001\n    return fa[x]==x?x:fa[x]=find(fa[x]);\n}\n\ninline ll pow(ll x,ll y){\n    ll ans=1;\n    while(y){\n        if(y&1)ans=ans*x%mod;\n        x=x*x%mod;\n        y>>=1;\n    }\n    return ans;\n}\n\nint main(){\n    n=read();m=read();k=read();\n    for(ll i=1;i<=n;i++)a[i]=read();\n    for(ll i=1;i<=m;i++){\n        e[i].l=read();e[i].r=read();\n        e[i].num=a[e[i].l]^a[e[i].r];\n    }\n    sort(e+1,e+m+1);\n    for(ll i=1;i<=n;i++)fa[i]=i;\n    s=1;\n    for(ll i=2;i<=m;i++){//\u679a\u4e3ex\n        if(e[i].num!=e[i-1].num){\n            cnt++;\n            sum=n;//\u521d\u59cb\u5316\n            for(ll j=s;j<i;j++){\n                if(find(e[j].l)!=find(e[j].r)){\n                    sum--;//\u6539\u53d8\u8054\u901a\u5757\u6570\u91cf\n                    fa[find(e[j].l)]=find(e[j].r);\n                }\n            }\n            ans=(ans+pow(2ll,sum))%mod;//\u7edf\u8ba1\u7b54\u6848\n            for(ll j=s;j<i;j++){//\u76f4\u63a5\u8fd8\u539f\n                fa[e[j].l]=e[j].l;\n                fa[e[j].r]=e[j].r;\n            }\n            s=i;\n        }\n    }\n    sum=n;\n    cnt++;\n    for(ll i=s;i<=m;i++){\n        if(find(e[i].l)!=find(e[i].r)){\n            sum--;\n            fa[find(e[i].l)]=find(e[i].r);\n        }\n    }\n    ans=((ans+pow(2ll,sum))%mod+(pow(2ll,k)-cnt+mod)%mod*pow(2ll,n)%mod)%mod;//\u7edf\u8ba1\u7b54\u6848\n    writeln(ans);\n    return 0;\n}\n\n```",
        "postTime": 1537324004,
        "uid": 27884,
        "name": "zhaotiensn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1039C \u3010Network Safety\u3011"
    },
    {
        "content": "\u8bbe\u5927\u5199\u5b57\u6bcd\u4e3a\u70b9\u7684\u7f16\u53f7\uff0c\u5c0f\u5199\u5b57\u6bcd\u4e3a\u5bf9\u5e94\u5927\u5199\u5b57\u6bcd\u70b9\u7684\u503c\u3002\n\n\u5982\u679c\u6211\u6846\u9009\u4e86$A,B$\u4e24\u70b9\uff0c\u90a3\u4e48$A,B$\u4e24\u70b9\u65e0\u8bba\u611f\u67d3\u4e86\u4ec0\u4e48\u75c5\u6bd2\uff0c\u90fd\u4e0d\u4f1a\u7834\u574f\u56fe\u7684\u5b89\u5168\u6027\uff08\u56e0\u4e3a\u4e00\u5f00\u59cb\u56fe\u5c31\u662f\u5b89\u5168\u7684\uff0c\u800c\u4e24\u4e2a\u4e0d\u540c\u6570\u5f02\u6216\u540c\u4e00\u4e2a\u6570\u540e\u4e5f\u4e00\u5b9a\u4e0d\u540c\uff09\u3002\n\n\u90a3\u4e48\u73b0\u5728\u7834\u574f\u56fe\u7684\u5b89\u5168\u6027\u53ea\u6709\u4e00\u79cd\u53ef\u80fd\uff0c\u6211\u9009\u4e86$A$\uff0c\u6ca1\u9009$B$\uff0c\u800c$a \\oplus x=b$\u3002\n\n\u5e76\u4e14\uff0c\u7531\u4e8e\u5f02\u6216\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa$x$\uff0c$x=a\\oplus b$\u3002\n\n\u5bf9\u4e8e\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u77e5\u9053\u4e86\u8981\u8ba9\u56fe\u4e0d\u5b89\u5168\u5c31\u662f\u53ea\u9009\u4e24\u7aef\u70b9\u4e2d\u7684\u4e00\u4e2a\u5e76\u4e14\u75c5\u6bd2\u662f\u4e24\u7aef\u70b9\u7684\u5f02\u6216\u503c\u3002\n\n\u90a3\u4e48\u5728\u75c5\u6bd2\u4e3a$x=a\\oplus b$\u65f6\uff0c\u6211\u4e00\u5b9a\u5f97\u9009$AB$\u4e24\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628aAB\u770b\u505a\u4e00\u4e2a\u70b9\u3002\n\n\u6211\u4eec\u5408\u5e76\u70b9\u540e$k$\u4e2a\u70b9\uff0c\u8fd9$k$\u70b9\u4e4b\u95f4\u7684\u5f02\u6216\u503c\u90fd\u4e0d\u7b49\u4e8e$x$\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u6709$2^k$\u4e2a\u9009\u6cd5\u3002\n\n\u5982\u4f55\u5408\u5e76\u70b9\u5e76\u4e14\u6c42\u51fa\u5408\u5e76\u540e\u70b9\u7684\u6570\u91cf\u5462\uff1f\u7528\u5e76\u67e5\u96c6\uff0c\u6bcf\u6b21\u5408\u5e76\u5c31\u662f\u70b9\u6570$-1$\u3002\n\n\u4e00\u5207\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5f97\u5230\u4e00\u6761\u8fb9\u4e24\u7aef\u7684\u5f02\u6216\u503c\uff0c\u7136\u540e\u5c31\u77e5\u9053\u5b83\u4f1a\u53d7\u5230\u54ea\u4e2a\u75c5\u6bd2\u7684\u5f71\u54cd\u4e86\u3002\n\n\u7531\u4e8e$n$\u5f88\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u7528$map$\u6765\u5b58\u50a8\u3002\n\n\u5177\u4f53\u770b\u4ee3\u7801\uff1a\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\nlong long mod=1e9+7;\n\nint n,m,k;\nlong long b[500005];\n\nlong long ans;\n\nmap<long long,int> a;\nmap<long long,int> g[500005];\n\nlong long fast(long long x,int v)\n{\n    long long an=1;\n    while(v)\n    {\n        if(v%2)\n            an=(an*x)%mod;\n        x=(x*x)%mod;\n        v/=2;\n    }\n    return an;\n}\n\nint findfa(int x,long long key)\n{\n    if(g[x][key]==x)\n        return x;\n    return g[x][key]=findfa(g[x][key],key);\n}\n\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    ans=(fast(2,k)*fast(2,n))%mod;\n    for(int i=1;i<=n;i++)\n        scanf(\"%lld\",&b[i]);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        long long key=b[x]^b[y];\n        if(g[x][key]==0)\n            g[x][key]=x;\n        if(g[y][key]==0)\n            g[y][key]=y;\n        if(findfa(x,key)==findfa(y,key))continue;\n        else\n            g[findfa(x,key)][key]=g[findfa(y,key)][key];\n        ans=((ans-fast(2,n-a[key]))%mod+mod)%mod;\n        a[key]++;\n        ans=(ans+fast(2,n-a[key]))%mod;\n    }\n    printf(\"%lld\",ans%mod);\n    return 0;\n}\n\n```",
        "postTime": 1548924641,
        "uid": 34663,
        "name": "redegg",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1039C \u3010Network Safety\u3011"
    },
    {
        "content": "# CF1039C Network Safety\n\n[~~\u4e3a\u4e86\u5c0a\u91cd\u539f\u7248\uff0c\u8fd9\u91cc\u628a\u82f1\u6587\u9898\u9762\u4e5f\u7559\u4e0b\u3002~~](http://codeforces.com/problemset/problem/1039/C)\n\n\u611f\u8c22 [$zjwwjhy$](https://www.luogu.com.cn/user/81662) \u7684\u8bb2\u89e3\u3002\n\n---\n\n- \u9898\u9762\n\n  The Metropolis computer network consists of nn servers, each has an encryption key in the range from $0$ to $2^k-1$ assigned to it. Let $c_i$ be the encryption key assigned to the $i$ -th server. Additionally, mm pairs of servers are directly connected via a data communication channel. Because of the encryption algorithms specifics, a data communication channel can only be considered safe if the two servers it connects have distinct encryption keys. The initial assignment of encryption keys is guaranteed to keep all data communication channels safe.\n\n  You have been informed that a new virus is actively spreading across the internet, and it is capable to change the encryption key of any server it infects. More specifically, the virus body contains some unknown number $x$ in the same aforementioned range, and when server $i$ is infected, its encryption key changes from $ci$ to $ci$ $\\oplus$ $x$, where $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n  \n  Sadly, you know neither the number $x$ nor which servers of Metropolis are going to be infected by the dangerous virus, so you have decided to count the number of such situations in which all data communication channels remain safe. Formally speaking, you need to find the number of pairs $(A,i)$, where $A$ is some (possibly empty) subset of the set of servers and $x$ is some number in the range from $0$ to $2^k-1$, such that when all servers from the chosen subset $A$ and none of the others are infected by a virus containing the number $x$ , all data communication channels remain safe. Since this number can be quite big, you are asked to find its remainder modulo $10^9+7$.\n\n\n- \u9898\u610f\n\n  \u7ed9\u51fa\u4e00\u4e2a\u7531 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7ec4\u6210\u7684\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c $c_i$\u3002\u4fdd\u8bc1\u7ed9\u51fa\u7684\u56fe\u662f\u201c\u5b89\u5168\u201d\u7684\u3002$(n \\leq 500000,m \\leq min(\\frac{n*(n-1)}{2},500000),c_i \\leq 2^k-1,k \\leq 60)$\n  \n  \u5bf9\u4e8e\u201c\u4e00\u4e2a\u2018\u5b89\u5168\u2019\u7684\u56fe\u201d\u7684\u5b9a\u4e49\u662f\uff1a\u5bf9\u4e8e\u8fd9\u4e2a\u56fe\u91cc\u6240\u6709\u7684\u8fb9\u7684\u4e24\u7aef\u70b9\u90fd\u6ee1\u8db3 $c_l \\not = c_r$\u3002\n  \n  \u73b0\u5728\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a $x$ $(x \\leq 2^k-1)$\uff0c\u56fe\u4e2d\u4efb\u610f\u6570\u91cf\u7684\u70b9\u7ec4\u6210\u7684\u70b9\u96c6 $s$\uff0c\u6c42 $s$ \u4e2d\u6240\u6709\u7684\u70b9 $xor$ $x$ \u540e\uff0c\u56fe\u4ecd\u7136\u4e3a\u201c\u5b89\u5168\u201d\u7684\u56fe\uff0c\u8fd9\u6837\u7684 $x$ \u548c $s$ \u7ec4\u5408\u7684\u65b9\u6848\u6570\uff0c\u7b54\u6848\u5bf9 $10^9+7$ \u53d6\u6a21\u3002\n  \n---\n\n- \u9898\u89e3\n\n  \u8003\u8651\u4e0b\u9762\u8fd9\u4e2a\u6837\u4f8b $n=4,m=4,k=2$ \u7684\u60c5\u51b5\uff0c\u5f88\u660e\u663e\uff0c\u5f53 $x=0,2,3$ \u65f6\u90fd\u6709 $2^4$ \u79cd\u65b9\u6848\u3002\n  \u53ea\u6709\u5f53 $x=1$ \u65f6\uff0c$0 \\oplus 1=1$\uff0c\u4f1a\u4f7f\u56fe\u51fa\u73b0\u4e0d\u5b89\u5168\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u4f7f\u56fe\u4e3a\u5b89\u5168\u7684\u65b9\u6848\u53ea\u6709\u5168\u90e8 $xor$ $x$ \u548c\u5168\u90e8\u4e0d $xor$ $x$ \u4e24\u79cd\u65b9\u6848\u3002\n  ![](https://i.loli.net/2020/11/23/Do9lEN8CH2UzMxs.png)\n  \n  \u90a3\u4e48\u5c31\u53ef\u4ee5\u5f52\u7eb3\u51fa\uff1a\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a $x$\uff0c\u5b83\u5bf9\u56fe\u662f\u5426\u5b89\u5168\u4e0d\u4f1a\u4ea7\u751f\u5f71\u54cd\uff08\u65e0\u8bba\u600e\u4e48\u64cd\u4f5c\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u4ea7\u751f\u4f7f\u56fe\u201c\u4e0d\u5b89\u5168\u201d\u7684 $x$\uff09\uff0c\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e00\u5b9a\u662f $2^n$\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u8003\u8651\u4f1a\u5bf9\u56fe\u662f\u5426\u201c\u5b89\u5168\u201d\u4ea7\u751f\u5f71\u54cd\u7684 $x$ \u5373\u53ef\u3002\n  \n   \u5bf9\u4e8e\u4e00\u6761\u8fb9\uff0c\u5f53 $c_l \\oplus x=c_r$ \u65f6\uff0c\u8981\u4f7f\u56fe\u4e3a\u5b89\u5168\u7684\uff0c\u53ea\u6709\u8fd9\u6761\u8fb9\u4e0a\u4e24\u4e2a\u70b9\u5168\u90e8 $xor$ $x$ \u548c\u5168\u90e8\u4e0d $xor$ $x$ \u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u90fd\u53d6\uff0c\u6216\u8005\u90fd\u4e0d\u53d6\u4e24\u79cd\u60c5\u51b5\u3002\u90a3\u4e48\u5c31\u53ef\u4ee5\u62bd\u8c61\u5730\u628a\u4e24\u4e2a\u70b9\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u7528\u5e76\u67e5\u96c6\u53bb\u7ef4\u62a4\u5408\u5e76\u70b9\u7684\u8fc7\u7a0b\uff0c\u6bcf\u6b21\u5408\u5e76\u70b9\u6570\u90fd $-1$\u3002\uff08\u5982\u56fe\u4e2d\u60c5\u51b5\uff0c\u6bcf\u6b21\u628a\u6bcf\u6761\u8fb9\u4e0a\u7684\u4e24\u4e2a\u70b9\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u5c31\u53ea\u6709\u8fd9\u4e2a\u70b9 $xor$ $x$ \u548c\u4e0d $xor$ $x$ \u4e24\u79cd\u65b9\u6848\u3002\uff09\n  \n---\n\n- \u63a5\u4e0b\u6765\u5c31\u662f\u4e00\u70b9\u4e5f\u4e0d\u6fc0\u52a8\u4eba\u5fc3\u7684\u4ee3\u7801\u4e86\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n/* Forever_chen */\n#define RT register\n#define M 1000000007 \n#define int long long\nusing namespace std;\ntemplate<class t> inline t read(t &x){\n\tchar c=getchar();bool f=0;x=0;\n\twhile(!isdigit(c)) f|=c=='-',c=getchar();\n\twhile(isdigit(c))x=(x<<1)+(x<<3)+(c^48),c=getchar();\n\tif(f)x=-x;return x;\n}\ntemplate<class t>inline void write(t x){\n\tif(x<0)putchar('-'),write(-x);\n\telse{if(x>9)write(x/10);putchar('0'+x%10);}\n}\ntemplate<class t>inline void writeln(t x){\n\twrite(x);putchar('\\n');\n\treturn;\n}\ntemplate<class t>inline void write_blank(t x){\n\twrite(x);putchar(' ');\n\treturn;\n}\nint n,m,k,a[500010],f[500010],cnt[500010],tot,ans,p[500010];\nvector<int> qx[500010],qy[500010];\nmap<int,int>vis;\nnamespace bsfc{\n\tint quick_power(int x,int y){\n\t\tint ans=1,cnt=x;\n\t\twhile(y){\n\t\t\tif(y&1){\n\t\t\t\tans=ans*cnt%M;\n\t\t\t}\n\t\t\tcnt=cnt*cnt%M;\n\t\t\ty>>=1;\n\t\t}\n\t\treturn ans;\n\t}\n\tint find(int k){\n\t\tif(f[k]==k){\n\t\t\treturn k;\n\t\t}\n\t\treturn f[k]=find(f[k]);\n\t}\n} \nsigned main(){\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tread(n);\n\tread(m);\n\tread(k);\n\tfor(int i=1;i<=n;i++){\n\t\tf[i]=i;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tread(a[i]);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tcnt[i]=n;\n\t}\n\tfor(int i=1,l,r;i<=m;i++){\n\t\tread(l);\n\t\tread(r);\n\t\tif(vis[a[l]^a[r]]==0){\n\t\t\ttot++;\n\t\t\tvis[a[l]^a[r]]=tot;\n\t\t}\n\t\tp[vis[a[l]^a[r]]]++;\n\t\tqx[vis[a[l]^a[r]]].push_back(l);\n\t\tqy[vis[a[l]^a[r]]].push_back(r);\n\t}\n\tfor(int i=1;i<=tot;i++){\n\t\tfor(int j=0;j<p[i];j++){\n\t\t\tint fx=bsfc::find(qx[i][j]),fy=bsfc::find(qy[i][j]);\n\t\t\tif(fx!=fy){\n\t\t\t\tf[fx]=fy;\n\t\t\t\tcnt[i]--;\n\t\t\t}\n\t\t}\n\t\tfor(int j=0;j<p[i];j++){\n\t\t\tf[qx[i][j]]=qx[i][j];\n\t\t\tf[qy[i][j]]=qy[i][j];\n\t\t}\n\t\tans=(ans+bsfc::quick_power(2,cnt[i]))%M;\n\t}\n\tans=(ans+((1ll<<k)-tot)%M*bsfc::quick_power(2,n)%M)%M;\n\twriteln(ans);\n\t//system(\"pause\");\n\treturn 0;\n}\n```\n",
        "postTime": 1606113257,
        "uid": 80976,
        "name": "\u534a\u7b19\u3001\u51e1\u5c18",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF1039C \u3010Network Safety\u3011"
    }
]