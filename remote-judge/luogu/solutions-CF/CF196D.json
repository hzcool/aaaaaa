[
    {
        "content": "# Description\n\u7ed9\u51fa\u5b57\u7b26\u4e32$s(|s|\u2264400000)$\u6b63\u6574\u6570$d(d\u2264|s|)$\u3002\u5b9a\u4e49$good$ $string$\u8868\u793a\u4e0d\u5305\u542b\u957f\u5ea6$\u2265d$\u7684\u56de\u6587\u5b50\u4e32\u7684\u5b57\u7b26\u4e32\u3002\u6c42\u957f\u5ea6\u4e3a$|s|$\u4e14\u5b57\u5178\u5e8f\u6070\u597d\u5927\u4e8e$s$\u7684$good$ $string$\u3002\n# Solution\n\u4e00\u4e2a$hash$\u7684\u505a\u6cd5\uff1a\n\n\u5b9a\u4e49$hsh1_i$\u8868\u793a\u524d$i$\u4f4d\u5b57\u7b26\u4e32\u6b63\u7740\u8bfb\u7684$hash$\u503c\uff0c$hsh2_i$\u8868\u793a\u524d$i$\u4f4d\u5b57\u7b26\u4e32\u5012\u7740\u8bfb\u7684$hash$\u503c\u3002\n\n\u6ce8\u610f\u5230\u957f\u5ea6\u4e3a$len$\u7684\u56de\u6587\u4e32\u5fc5\u7136\u5305\u62ec\u4e00\u4e2a\u957f\u5ea6\u4e3a$len-2$\u7684\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u6211\u4eec\u627e\u5230\u7b2c\u4e00\u4e2a\u524d\u9762\u957f\u5ea6\u4e3a$d$\u6216$d+1$\u7684\u56de\u6587\u5b50\u4e32\uff0c\u4ece\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u5f00\u59cb\u5c1d\u8bd5\u66ff\u6362\u5373\u53ef\uff0c\u6b63\u786e\u6027\u663e\u7136\u3002\n\n\u4ece\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u6700\u540e\u4e00\u4f4d\u4f9d\u6b21\u5411\u524d\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662f$'z'$\u7684\u5b57\u6bcd\uff0c\u679a\u4e3e\u5c06\u5b83\u6362\u6210\u4ec0\u4e48\uff0c\u5408\u6cd5\u5219\u9000\u51fa\uff0c\u63a5\u4e0b\u6765\u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e00\u4f4d\u653e\u7f6e\u7684\u5b57\u6bcd\uff0c\u5229\u7528$hash$\u5224\u65ad\u5f53\u524d\u662f\u5426\u5408\u6cd5\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(|s|)$\u3002\n\n\u6211\u7684\u5199\u6cd5\u662f\u81ea\u7136\u6ea2\u51fa$hash$\u3002\n# Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define ull unsigned long long\nusing namespace std;\nconst ull base = 127, maxn = 4e5 + 10;\null hsh1[maxn], hsh2[maxn], pow[maxn];\nint d, n;\nchar s[maxn];\n\nbool check(int l, int r) {\n\tull a = hsh1[r] - hsh1[l - 1], b = (hsh2[r] - hsh2[l - 1] * pow[r - l + 1]) * pow[l - 1];\n\treturn a == b;\n}\n\nint main()\n{ \n\tpow[0] = 1;\n\tfor(int i = 1; i <= 400000; i++) pow[i] = pow[i - 1] * base;\n\tscanf(\"%d\", &d);\n\tscanf(\"%s\", s + 1);\n\tn = strlen(s + 1);\n\tint bad = n;\n\tfor(int i = 1; i <= n; i++) {\n\t\thsh2[i] = hsh2[i - 1] * base + (int)s[i];\n\t\thsh1[i] = hsh1[i - 1] + (int)s[i] * pow[i - 1];\n\t\tif(i >= d && check(i - d + 1, i)) {\n\t\t\tbad = i;\n\t\t\tbreak;\n\t\t}\n\t\tif(i >= d + 1 && check(i - d, i)) {\n\t\t\tbad = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tbool flag = 0;\n\tfor(int i = bad; i; i--) {\n\t\tfor(char c = s[i] + 1; c <= 'z'; c++) {\n\t\t\ts[i] = c;\n\t\t\thsh2[i] = hsh2[i - 1] * base + (int)s[i];\n\t\t\thsh1[i] = hsh1[i - 1] + (int)s[i] * pow[i - 1];\n\t\t\tif(i >= d && check(i - d + 1, i)) continue;\n\t\t\tif(i >= d + 1 && check(i - d, i)) continue;\n\t\t\tflag = 1;\n\t\t\tbreak;\n\t\t}\n\t\tif(flag) {\n\t\t\tbad = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!flag) {\n\t\tprintf(\"Impossible\\n\");\n\t\treturn 0;\n\t} \n\tfor(int i = bad + 1; i <= n; i++)\n\t\tfor(char c = 'a'; c <= 'z'; c++) {\n\t\t\ts[i] = c;\n\t\t\thsh2[i] = hsh2[i - 1] * base + (int)s[i];\n\t\t\thsh1[i] = hsh1[i - 1] + (int)s[i] * pow[i - 1];\n\t\t\tif(i >= d && check(i - d + 1, i)) continue;\n\t\t\tif(i >= d + 1 && check(i - d, i)) continue;\n\t\t\tbreak;\n\t\t}\n\tfor(int i = 1; i <= n; i++) printf(\"%c\", s[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```",
        "postTime": 1533222515,
        "uid": 23138,
        "name": "naive_wcx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF196D \u3010The Next Good String\u3011"
    }
]