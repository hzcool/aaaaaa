[
    {
        "content": "$d_1(x)$\uff1a\u4ece $s_1$ \u5230 $x$ \u7684\u8ddd\u79bb\u3002\n\n$d_2(x)$\uff1a\u4ece $s_2$ \u5230 $x$ \u7684\u8ddd\u79bb\u3002\n\n\u6211\u4eec\u5c06\u4e00\u6761\u8fb9 $(a,b)$ \u7684\u6743\u503c\u53ea\u53ef\u80fd\u8c03\u6574\u5230 $l_i$ \u6216 $r_i$\uff0c\u8003\u8651\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\uff1a\n\n1. \u8fd9\u6761\u8fb9\u6ca1\u6709\u88ab\u4efb\u4f55\u4eba\u7ecf\u8fc7\n\n\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\n\n2. \u8fd9\u6761\u8fb9\u88ab A \u7ecf\u8fc7\u4f46\u6ca1\u6709\u88ab B \u7ecf\u8fc7\n\n\u56e0\u4e3a B \u4e4b\u524d\u6ca1\u6709\u9009\u62e9\u8d70\u8fd9\u6761\u8fb9\uff0c\u4e00\u5b9a\u6709 $d_1(a) < d_2(a)$ \uff0c\u6240\u4ee5\u5982\u679c\u5728\u8fd9\u4e4b\u540e B \u9009\u62e9\u8d70\u8fd9\u6761\u8fb9 $d_1(t) = d_1(a)+dis(a,b)+dis(b,t)$ \u4e5f\u4e00\u5b9a\u5c0f\u4e8e $d_2(t) = d_2(a) + dis(a,b) + dis(b,t) $\uff0c\u5982\u679c B \u4e0d\u9009\u62e9\u8d70\u8fd9\u6761\u8fb9\uff0c$d_1(t)$ \u51cf\u5c0f\u800c $d_2(t)$ \u6ca1\u6709\u53d8\u5316\u3002\n\n3. \u8fd9\u6761\u8fb9\u88ab A\uff0cB \u540c\u65f6\u7ecf\u8fc7\n\n$d_1(t)$ \u548c $d_2(t)$ \u51cf\u5c0f\u540c\u6837\u7684\u6570\u503c\u3002\n\n\uff08\u8fd9\u91cc\u53ea\u8003\u8651\u8c03\u5c0f\uff0c\u8c03\u5927\u540c\u7406\uff09\n\n\u90a3\u4e48\u6211\u4eec\u6709\u4e00\u79cd\u505a\u6cd5\uff0c\u9996\u5148\u628a\u6240\u6709\u8fb9\u6743\u8bbe\u4e3a $r_i$\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u6709 $d_1(a) < d_2(a)$\uff0c\u90a3\u4e48\u5c06\u5b83\u7684\u8fb9\u6743\u8bbe\u4e3a $l_i$\uff0c\u6700\u540e\u5224\u65ad $d_1(t)$ \u662f\u5426\u5c0f\u4e8e $d_2(t)$\uff0c\u5982\u679c\u4e0d\u662f\u5219\u6240\u6709\u8fb9\u6743\u8bbe\u4e3a $r_i$ \u518d\u6765\u4e00\u6b21\uff0c\u5982\u679c\u6709 $d_1(a) \\le d_2(a)$\uff0c\u90a3\u4e48\u5c06\u5b83\u7684\u8fb9\u6743\u8bbe\u4e3a $l_i$\uff0c\u6700\u540e\u5224\u65ad$d_1(t)$ \u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e $d_2(t)$ \u5373\u53ef\u3002\n\n\u8003\u8651\u8fd9\u79cd\u505a\u6cd5\u7684\u6b63\u786e\u6027\uff0c\n\n1. \u5982\u679c\u4e00\u6761\u8fb9\u6ee1\u8db3 $d_1(a) < d_2(a)$\uff0c\u5219\u4e4b\u540e\u5bf9\u8fb9\u6743\u7684\u6539\u53d8\u4e0d\u4f1a\u5f71\u54cd\u8fd9\u4e2a\u6027\u8d28\n\n\u8003\u8651\u53cd\u8bc1\uff0c\u5982\u679c\u5728\u6539\u53d8 $(a_2,b_2)$ \u540e $d_2(a_1) \\le d_1(a_1)$\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u6539\u53d8\u4e86\u4e00\u6761\u8fb9\u5c31\u4f7f $d_2(a_1)$ \u51cf\u5c0f\u4e86\uff0c\u90a3\u4e48 $(a_2,b_2)$ \u4e00\u5b9a\u5728 $s_2$ \u5230 $a_1$ \u7684\u6700\u77ed\u8def\u4e0a\uff0c\u90a3\u4e48 $d_2(a_1)=d_2(a_2)+dis(a_2,b_2)+dis(a_2,a_1)$ \u5927\u4e8e $d_1(a_1)=d_1(a_2)+dis(a_2,b_2)+dis(a_2,a_1)$\uff0c\u77db\u76fe\u3002\n\n\n2. \u6240\u4ee5\u5728\u6700\u540e\u6240\u6709\u8fb9\u6743\u4e3a $l_i$ \u7684\u8fb9\u90fd\u4f1a\u6ee1\u8db3 $d_1(a) < d_2(a)$\uff0c\u800c\u5176\u4ed6\u7684\u8fb9\u5728\u4efb\u4f55\u53ef\u80fd\u7684\u8fb9\u6743\u4e0b\u90fd\u4f1a\u6709 $d_1(a) \\ge d_2(a)$\uff08\u5373\u5bf9\u7b54\u6848\u6ca1\u6709\u6b63\u9762\u8d21\u732e\uff09\n\n\n```cpp\n// Problem: CF360E Levko and Game\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/CF360E\n// Memory Limit: 250 MB\n// Time Limit: 2000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\n#define N 100000\n#define int long long\nusing namespace std;\nint n, m, k, s1, s2, f, head[N], nxt[N], to[N], cnt, s[N], t[N], l[N], r[N],\n    v[N], d1[N], d2[N];\nint *len[N];\nvoid add(int a, int b, int *l) {\n  nxt[++cnt] = head[a];\n  to[cnt] = b;\n  len[cnt] = l;\n  head[a] = cnt;\n}\nstruct node {\n  int x, v;\n  node(int _x, int _v) : x(_x), v(_v) {}\n  bool operator<(const node &t) const { return v > t.v; }\n};\nvoid dij(int s, int *dis) {\n  memset(dis, 0x3f, sizeof(int) * (n + 1));\n  priority_queue<node> p;\n  dis[s] = 0;\n  p.emplace(s, 0);\n  while (!p.empty()) {\n    node x = p.top();\n    p.pop();\n    if (dis[x.x] != x.v) continue;\n    for (int i = head[x.x]; i; i = nxt[i]) {\n      if (dis[to[i]] > dis[x.x] + *len[i]) {\n        dis[to[i]] = dis[x.x] + *len[i];\n        p.emplace(to[i], dis[to[i]]);\n      }\n    }\n  }\n}\nbool solve(int d) {\n  bool flag = false;\n  do {\n    flag = false;\n    dij(s1, d1);\n    dij(s2, d2);\n    for (int i = 1; i <= k; i++) {\n      if (v[i] == r[i] && d1[s[i]] < d2[s[i]] + d) {\n        v[i] = l[i];\n        flag = 1;\n      }\n    }\n  } while (flag);\n  return d1[f] < d2[f] + d;\n}\nsigned main() {\n  cin >> n >> m >> k;\n  cin >> s1 >> s2 >> f;\n  for (int i = 1; i <= m; i++) {\n    int a, b, l;\n    cin >> a >> b >> l;\n    add(a, b, new int(l));\n  }\n  for (int i = 1; i <= k; i++) {\n    cin >> s[i] >> t[i] >> l[i] >> r[i];\n    v[i] = r[i];\n    add(s[i], t[i], &v[i]);\n  }\n  for (int i = 1; i <= k; i++) {\n    dij(s1, d1);\n    dij(s2, d2);\n    if (d1[s[i]] < d2[s[i]]) {\n      v[i] = l[i];\n    }\n  }\n  if (solve(0)) {\n    puts(\"WIN\");\n    for (int i = 1; i <= k; i++) {\n      cout << v[i] << \" \";\n    }\n    return 0;\n  }\n  if (solve(1)) {\n    puts(\"DRAW\");\n    for (int i = 1; i <= k; i++) {\n      cout << v[i] << \" \";\n    }\n    return 0;\n  }\n  puts(\"LOSE\");\n  return 0;\n}\n```",
        "postTime": 1628755323,
        "uid": 183154,
        "name": "swiftc",
        "ccfLevel": 9,
        "title": "CF360E Levko and Game \u9898\u89e3"
    },
    {
        "content": "### [\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/CF360E)\n\n\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u8def\u3002\n\n\u5982\u679c\u5c06 $s_1$ \u5230 $t$ \u7684\u6700\u77ed\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u6743\u8c03\u5230\u6700\u5c0f,\u5176\u4ed6\u8fb9\u6743\u8c03\u5230\u6700\u5927\u3002\n\n\u4f46\u8fd9\u6837\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5982\u679c $s_2$ \u5728 $s_1$ \u5230 $t$ \u7684\u6700\u77ed\u8def\u5f84\u4e0a\u3002\n\n\u6362\u4e00\u79cd\u8d2a\u5fc3\u601d\u8def,\u5148\u628a\u6240\u6709\u53ef\u4ee5\u8c03\u6574\u7684\u8fb9\u8fb9\u6743\u8c03\u6574\u5230\u6700\u5927,\u5bf9\u4e8e\u6bcf\u4e00\u6761\u53ef\u4ee5\u8c03\u6574\u7684\u8fb9 $(u,v)$ ,\u5982\u679c $dis_{s_1,u}<dis_{s_2,u}$ \u90a3\u4e48\u5c31\u5c06  $(u,v)$ \u7684\u8fb9\u6743\u8c03\u5230\u6700\u5c0f\u3002\n\n\u56e0\u4e3a\u5982\u679c $dis_{s_1,u}<dis_{s_2,u}$ \u6210\u7acb,\u90a3\u4e48\u5373\u4f7f\u8c03\u5c0f  $(u,v)$ \u7684\u8fb9\u6743 $s_2$ \u7ed5\u5230\u70b9 $u$ \u53bb\u8d70  $(u,v)$ \u8fd9\u6761\u8fb9\u662f\u4e0d\u503c\u7684,\u56e0\u6b64 $s_2$ \u5230 $t$ \u7684\u6700\u77ed\u8def\u6ca1\u6709\u51cf\u5c0f,\u4f46\u662f  $s_1$ \u5230 $t$ \u7684\u6700\u77ed\u8def\u51cf\u5c0f\u4e86\u3002\n\n\u521d\u59cb\u5316\u6700\u77ed\u8def\u8dd1\u4e00\u8fb9 Dijkstra ,\u5224\u65ad\u662f\u5426\u6709\u8fb9\u6ee1\u8db3 $dis_{s_1,u}<dis_{s_2,u}$ ,\u6709\u5c31\u8c03\u6574,\u7136\u540e\u5728\u91cd\u65b0\u8dd1 Dijkstra ,\u5982\u679c\u4e0d\u53ef\u4ee5\u64cd\u4f5c\u6216\u6240\u6709\u8fb9\u90fd\u64cd\u4f5c\u8fc7\u4e86,\u5c31\u505c\u6b62\u64cd\u4f5c\u3002\n\n\u6b64\u65f6\u5224\u65ad\u662f\u5426 $dis_{s_1,t}<dis_{s_2,t}$ \u5373\u53ef\u3002\n\n\u6ce8\u610f\u8981\u5f00 long long\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(kn \\log n)$ \u3002\n\n------------\n\nCode\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <cmath>\n#include <ctime>\n#include <queue>\n\n#define int long long\n#define ull uisngned long long\n\nusing namespace std;\n\nint read(){int qrx=0,qry=1;char qrc=0;\nwhile(qrc<'0'||qrc>'9'){qrc=getchar();if(qrc=='-')qry=-1;}\nwhile(qrc>='0'&&qrc<='9')qrx=qrx*10+qrc-'0',qrc=getchar();\nreturn qrx*qry;}\n\nconst int N=2e4+7,Mod=998244353,INF=1e18;\nint n,m,k,a[N],s1,s2,t,ecnt,ku[N],lw[N],rw[N],p[N];\nint vis[N],dis[N][2];\nstruct edge{\n\tint to,w;\n\tedge(int to=0,int w=0):to(to),w(w){}\n}e[N];\nstruct node{\n\tint num,d;\n\tnode(int num=0,int d=0):num(num),d(d){}\n\tbool operator <(const node& A)const{return d>A.d;}\n};\nvector<int> g[N];\npriority_queue<node> Q;\n\nvoid Dijkstra(int s,int o){\n\tfor(int i=1;i<=n;i++)vis[i]=0,dis[i][o]=INF;\n\tdis[s][o]=0,Q.push(node(s,0));\n\twhile(!Q.empty()){\n\t\tint u=Q.top().num;\n\t\tQ.pop();\n\t\tif(vis[u]++)continue;\n\t\tfor(int i=0;i<g[u].size();i++){\n\t\t\tint v=e[g[u][i]].to,w=e[g[u][i]].w;\n\t\t\tif(dis[u][o]+w<dis[v][o])dis[v][o]=dis[u][o]+w,Q.push(node(v,dis[v][o]));\n\t\t}\n\t}\n\treturn;\n}\n\nsigned main(){ \n\tn=read(),m=read(),k=read();\n\ts1=read(),s2=read(),t=read();\n\tfor(int i=1,u,v,w;i<=m;i++){\n\t\tu=read(),v=read(),w=read();\n\t\te[++ecnt]=edge(v,w),g[u].push_back(ecnt);\n\t}\n\tfor(int i=1,u,v;i<=k;i++){\n\t\tu=read(),v=read(),lw[i]=read(),rw[i]=read();\n\t\te[++ecnt]=edge(v,rw[i]),g[u].push_back(ecnt);\n\t\tp[i]=ecnt,ku[i]=u;\n\t}\n\t\n\twhile(1){\n\t\tDijkstra(s1,0),Dijkstra(s2,1);\n\t\tint tag=0;\n\t\tfor(int i=1;i<=k;i++){\n\t\t\tint u=ku[i];\n\t\t\tif(e[p[i]].w==rw[i]&&dis[u][0]<dis[u][1]){\n\t\t\t\te[p[i]].w=lw[i],tag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!tag)break;\n\t}\n\t\n\tDijkstra(s1,0),Dijkstra(s2,1);\n\tif(dis[t][0]>dis[t][1])return !printf(\"LOSE\\n\");\n\tif(dis[t][0]==dis[t][1])printf(\"DRAW\\n\");\n\telse printf(\"WIN\\n\");\n\tfor(int i=1;i<=k;i++)printf(\"%lld \",e[p[i]].w);\n\tprintf(\"\\n\");\n\t\n\treturn 0;\n}\n```\n\n\u9898\u89e3\u88abheck\u6389\u4e86,\u4ee3\u7801\u7684\u7ec6\u8282\u4fee\u6539\u4e86\u4e00\u4e0b\u3002",
        "postTime": 1626785817,
        "uid": 328485,
        "name": "Zimse",
        "ccfLevel": 9,
        "title": "[\u9898\u89e3] CF360E Levko and Game"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://duanyll.com/2019/10/05/Codeforces-360E.html)\n\n\n## \u9898\u610f\n\n$n$\u4e2a\u70b9, $m+k$\u6761\u8fb9\u7684\u6709\u5411\u56fe, \u5176\u4e2d\u7ed9\u5b9a$k$\u6761\u8fb9\u53ef\u4ee5\u5728\u7ed9\u5b9a$[l_i, r_i]$\u8303\u56f4\u5185\u4efb\u610f\u4fee\u6539\u8fb9\u6743, \u5224\u65ad\u5e76\u8f93\u51fa\u662f\u5426\u5b58\u5728\u4e00\u79cd\u65b9\u6848\u4f7f$s_1\\rightarrow f$\u7684\u6700\u77ed\u8def\u6bd4$s_2\\rightarrow f$\u77ed.\n\n## \u5206\u6790\n\n\u5148\u4ee4\u6240\u6709\u7684\u8fb9\u6743\u90fd\u53d6\u5230$r_i$, \u7136\u540e\u4ece$s_1,s_2$\u5f00\u59cb\u5355\u6e90\u6700\u77ed\u8def. \u7136\u540e\u6bcf\u6b21\u8003\u8651\u4e00\u6761\u8fb9$(u,v)$\u6ee1\u8db3$dis_1[u] < dis_2[u]$, \u5c06\u4ed6\u7684\u8fb9\u6743\u8bbe\u4e3a$l_i$\u540e\u518d\u8dd1\u6700\u77ed\u8def, \u76f4\u5230\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8fb9, \u7136\u540e\u5224\u65ad\u7ed3\u679c\u5e76\u8f93\u51fa.\n\n\u56e0\u4e3a\u5bf9\u4e8e$dis_1[u] < dis_2[u]$\u7684\u60c5\u51b5, \u5047\u5982$(u, v)$\u5728\u6700\u77ed\u8def\u4e0a, \u4e00\u5b9a\u6709$dis_1[v] < dis_2[v]$, \u6240\u4ee5\u73b0\u5728\u4fee\u6539\u4e86\u8fb9\u6743, \u4e00\u5b9a\u4f1a\u4f7f\u540e\u9762\u7684$dis_1[u]$\u66f4\u5c0f, \u5373\u7b54\u6848\u66f4\u4f18.\n\n\u5141\u8bb8\u5e73\u5c40\u7684\u60c5\u51b5, \u6539\u4e3a$dis_1[u] \\leq dis_2[u]$\u5373\u53ef.\n\n## \u4ee3\u7801\n\n```cpp\n#include <algorithm>\n#include <cassert>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <fstream>\n#include <iostream>\n#include <queue>\nusing namespace std;\n\ntypedef long long int64;\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 1e4 + 110;\n\nclass lfs {\n   public:\n    lfs(int N) {\n        memset(head, -1, sizeof head);\n        memset(l, 0, sizeof l);\n        memset(r, 0, sizeof r);\n        ecnt = 0;\n        n = N;\n    }\n    void adde(int from, int to, int L, int R) {\n        u[ecnt] = from;\n        l[ecnt] = L;\n        r[ecnt] = R;\n        e[ecnt].to = to;\n        e[ecnt].w = R;\n        e[ecnt].next = head[from];\n        head[from] = ecnt++;\n    }\n\n    struct Edge {\n        int to, next, w;\n    } e[MAXN * 2];\n    int head[MAXN];\n    int ecnt;\n    int n;\n\n    int u[MAXN], l[MAXN], r[MAXN];\n};\n\nclass dijkstra : public lfs {\n   public:\n    dijkstra(int n) : lfs(n) {}\n    int64 dis1[MAXN], dis2[MAXN];\n    void solve(int s, int64* dis) {\n        priority_queue<pair<int64, int>, vector<pair<int64, int>>,\n                       greater<pair<int64, int>>>\n            que;\n        dis[s] = 0;\n        que.push(pair<int64, int>(0, s));\n        while (!que.empty()) {\n            pair<int64, int> p = que.top();\n            que.pop();\n            int v = p.second;\n            if (dis[v] < p.first) continue;\n            for (int i = head[v]; ~i; i = e[i].next) {\n                Edge now = e[i];\n                if (now.w + dis[v] < dis[now.to]) {\n                    dis[now.to] = now.w + dis[v];\n                    que.push(pair<int64, int>(dis[now.to], now.to));\n                }\n            }\n        }\n    }\n\n    bool check(int s1, int s2, int f, bool can_draw, int m, int k) {\n        bool updated;\n        do {\n            updated = false;\n            memset(dis1, INF, sizeof dis1);\n            memset(dis2, INF, sizeof dis2);\n            solve(s1, dis1);\n            solve(s2, dis2);\n            if (dis1[f] < dis2[f] + can_draw) {\n                cout << (can_draw ? \"DRAW\" : \"WIN\") << endl;\n                for (int i = m; i < m + k; i++) {\n                    cout << e[i].w << ' ';\n                }\n                cout << endl;\n                return true;\n            }\n            for (int i = m; i < m + k; i++) {\n                if (dis1[u[i]] < dis2[u[i]] + can_draw) {\n                    if (e[i].w > l[i]) {\n                        e[i].w = l[i];\n                        updated = true;\n                        break;\n                    }\n                }\n            }\n        } while (updated);\n        return false;\n    }\n};\n\n#include <cctype>\n#include <cstdio>\n\ntemplate <typename T = int>\ninline T read() {\n    T X = 0, w = 0;\n    char ch = 0;\n    while (!isdigit(ch)) {\n        w |= ch == '-';\n        ch = getchar();\n    }\n    while (isdigit(ch)) {\n        X = (X << 3) + (X << 1) + (ch ^ 48);\n        ch = getchar();\n    }\n    return w ? -X : X;\n}\n\nint main() {\n    int n, m, k;\n    cin >> n >> m >> k;\n    int s1, s2, f;\n    cin >> s1 >> s2 >> f;\n    dijkstra* graph = new dijkstra(n);\n    for (int i = 1; i <= m; i++) {\n        int u = read();\n        int v = read();\n        int w = read();\n        graph->adde(u, v, w, w);\n    }\n    for (int i = 1; i <= k; i++) {\n        int u = read();\n        int v = read();\n        graph->l[i] = read();\n        graph->r[i] = read();\n        graph->adde(u, v, graph->l[i], graph->r[i]);\n    }\n    if (!graph->check(s1, s2, f, false, m, k)) {\n        if (!graph->check(s1, s2, f, true, m, k)) {\n            cout << \"LOSE\" << endl;\n        }\n    }\n}\n```",
        "postTime": 1570246768,
        "uid": 48256,
        "name": "duanyll",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF360E \u3010Levko and Game\u3011"
    },
    {
        "content": "lk \u6a21\u62df\u8d5b\u62c9\u4e86\u8fd9\u9898\uff0c\u4ed6\u7684\u6570\u636e\u628a\u6211\u4eec\u7684\u5047\u6b63\u89e3\u5168\u90e8\u5361\u6210\u4e86 35 \u5206\u3002\n\n\u4ed6\u7684 hack \u540c\u65f6\u4e5f\u53c9\u6389\u4e86\u539f\u6709\u7684\u4e94\u7bc7\u9898\u89e3\u91cc\u7684\u56db\u7bc7\u3002\n\n\u8fd9\u91cc\u8bf4\u4e00\u4e2a\u6b63\u786e\u7684\u505a\u6cd5\u3002\n\n\u663e\u7136\u53ef\u53d8\u7684\u8fb9\u6743\u53ea\u6709\u5728 $l$ \u6216 $r$ \u5904\u53d6\u5230\u6700\u4f18\u89e3\uff0c\u5176\u4ed6\u7684\u4e00\u5b9a\u4e0d\u4f18\u3002\n\n\u9996\u5148\u6709\u4e00\u4e2a\u5f88\u81ea\u7136\u7684\u601d\u8def\u662f\u4e24\u4e2a\u70b9\u540c\u65f6\u8dd1\u6700\u77ed\u8def\uff0c\u7136\u540e\u5982\u679c $s_1$ \u5148\u5230\u5f53\u524d\u70b9\u51fa\u8fb9\u5c31\u9009 $l$\uff0c\u5426\u5219\u9009 $r$\u3002\n\n\u7136\u540e\u5224\u65ad $s_1,s_2$ \u548c $t$ \u7684\u8ddd\u79bb\u5927\u5c0f\u5373\u53ef\u3002\u8fd9\u79cd\u505a\u6cd5\u4e00\u4e0b\u79f0\u4e3a\u201c\u4e00\u6b21 Dijkstra\u201d\u3002\n\n\u8fd9\u6837\u770b\u8d77\u6765\u5f88\u5bf9\uff0c\u4f46\u6709\u6f0f\u6d1e\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e24\u7ec4 hack \u6570\u636e\uff0c\u4e00\u6b21 Dijkstra \u7684\u7b97\u6cd5\u6700\u591a\u53ea\u80fd\u901a\u8fc7\u4e24\u7ec4\u6570\u636e\u4e2d\u7684\u67d0\u4e00\u4e2a\uff1a\n\ninput1\n\n```\n4 4\n1 2 4\n1 3 1 1\n2 3 1 1\n3 4 1 5\n1 4 3 3\n```\n\noutput1\n\n```\nDRAW\n1 1 1 3\n```\n\ninput2\n\n```\n4 4\n1 2 4\n1 3 1 1\n2 3 1 1\n3 4 1 5\n2 4 3 3\n```\n\noutput2\n\n```\nWIN\n1 1 5 3\n```\n\n\u8fd9\u662f\u56e0\u4e3a\u5f53 $s_1,s_2$ \u5230\u540c\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u76f8\u540c\u65f6\uff0c\u6211\u4eec\u7684\u51fa\u8fb9\u5176\u5b9e\u65e2\u53ef\u4ee5\u9009 $l$\uff0c\u4e5f\u53ef\u4ee5\u9009 $r$\u3002\u6211\u4eec\u7684\u7a0b\u5e8f\u4f1a\u9ed8\u8ba4\u9009\u62e9 $l$\uff0c\u4f46\u5982\u679c\u6211\u4eec\u9009 $r$\uff0c\u5176\u5b9e\u662f\u6709\u673a\u4f1a\u8ba9 $s_1$ \u5230\u5176\u4ed6\u70b9\u7684\u8def\u5f84\u6bd4\u8fd9\u6761\u8def\u5f84\u66f4\u77ed\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u7ec4\u66f4\u4f18\u7684\u89e3\u3002\uff08\u7b2c\u4e8c\u4e2a hack \u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u81ea\u5df1\u753b\u4e2a\u56fe\u5c31\u975e\u5e38\u6e05\u695a\uff09\n\n\u6b63\u786e\u7684\u505a\u6cd5\u662f\u8dd1\u4e24\u904d Dijkstra\uff0c\u7b2c\u4e00\u904d\u5c3d\u53ef\u80fd\u4e89\u53d6\u5f97\u5230 WIN \u7684\u5c40\u9762\uff0c\u90a3\u4e48\u8fd9\u65f6\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5982\u679c $s_1,s_2$ \u5230\u5b83\u7684\u6700\u77ed\u8def\u957f\u5ea6\u76f8\u7b49\uff0c\u6211\u4eec\u6743\u503c\u5c31\u9009 $r$\uff0c\u8ba9 $s_1$ \u51fa\u53d1\u7684\u8def\u5f84\u6709\u673a\u4f1a\u6210\u4e3a\u66f4\u77ed\u7684\u8def\u5f84\u3002\n\n\u5982\u679c\u7b2c\u4e00\u904d\u6ca1\u6709\u5f97\u5230 WIN \u7684\u5c40\u9762\uff0c\u6211\u4eec\u518d\u8dd1\u7b2c\u4e8c\u904d Dijkstra \u4e89\u53d6\u5f97\u5230 DRAW\u3002\u90a3\u4e48\u8fd9\u65f6\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5982\u679c $s_1,s_2$ \u5230\u5b83\u7684\u6700\u77ed\u8def\u957f\u5ea6\u76f8\u7b49\uff0c\u6211\u4eec\u6743\u503c\u5c31\u9009 $l$\uff0c\u4e0d\u8ba9 $s_2$ \u51fa\u53d1\u7684\u5176\u4ed6\u8def\u5f84\u6210\u4e3a\u66f4\u77ed\u7684\u8def\u5f84\u3002\n\n\u5982\u679c\u8fd9\u65f6\u4f9d\u7136\u4e0d\u80fd\u5e73\u5c40\uff0c\u90a3\u4e48\u53ea\u80fd\u662f LOSE \u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\nusing namespace std;\n#define int long long\nstruct edge\n{\n    int nxt,to,l,r,w;\n}e[1000001];\nint n,m,p,dis[1000001][2],tot,h[1000001],s1,s2,t;\nbool vis[1000001][2];\nstruct element\n{\n    int val,node;\n    bool tag;\n    element(int val_,int node_,bool tag_):\n        val(val_),node(node_),tag(tag_){}\n    bool operator <(const element &other) const\n    {\n        return val^other.val? val>other.val:node^other.node? node>other.node:tag<other.tag;\n    }\n};\ninline int read()\n{\n    int x=0;\n    char c=getchar();\n    while(c<'0'||c>'9')\n        c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    return x;\n}\nvoid print(int x)\n{\n    if(x>=10)\n        print(x/10);\n    putchar(x%10+'0');\n}\ninline void add(int x,int y,int l,int r)\n{\n    e[++tot].nxt=h[x];\n    h[x]=tot;\n    e[tot].to=y;\n    e[tot].l=l;\n    e[tot].r=r;\n    e[tot].w=r;\n}\ninline void dijkstra(bool opt)\n{\n    for(register int i=1;i<=n;++i)\n    {\n        dis[i][0]=dis[i][1]=1ll<<60;\n        vis[i][0]=vis[i][1]=0;\n    }\n    for(register int i=1;i<=tot;++i)\n        e[i].w=e[i].r;\n    priority_queue<element> q;\n    q.push(element(0,s1,0));\n    q.push(element(0,s2,1));\n    while(!q.empty())\n    {\n        element k=q.top();\n        q.pop();\n        if(vis[k.node][k.tag])\n            continue;\n        vis[k.node][k.tag]=1;\n        dis[k.node][k.tag]=k.val;\n        for(register int i=h[k.node];i;i=e[i].nxt)\n        {\n            if((!k.tag&&!vis[k.node][1]))\n            {\n                e[i].w=e[i].l;\n                q.push(element(k.val+e[i].w,e[i].to,k.tag));\n                continue;\n            }\n            if(opt&&dis[k.node][0]==dis[k.node][1])\n            {\n                e[i].w=e[i].l;\n                q.push(element(k.val+e[i].w,e[i].to,0));\n                q.push(element(k.val+e[i].w,e[i].to,1));\n                continue;\n            }\n            q.push(element(k.val+e[i].w,e[i].to,k.tag));\n        }\n    }\n}\nsigned main()\n{\n    n=read(),m=read(),p=read(),s1=read(),s2=read(),t=read();\n    for(register int i=1;i<=m;++i)\n    {\n        int x=read(),y=read(),w=read();\n        add(x,y,w,w);\n    }\n    for(register int i=1;i<=p;++i)\n    {\n        int x=read(),y=read(),l=read(),r=read();\n        add(x,y,l,r);\n    }\n    dijkstra(0);\n    if(dis[t][0]<dis[t][1])\n    {\n        puts(\"WIN\");\n        for(register int i=m+1;i<=tot;++i)\n        {\n            print(e[i].w);\n            putchar(' ');\n        }\n        puts(\"\");\n        return 0;\n    }\n    dijkstra(1);\n    if(dis[t][0]>dis[t][1])\n    {\n        puts(\"LOSE\");\n        return 0;\n    }\n    puts(\"DRAW\");\n    for(register int i=m+1;i<=tot;++i)\n    {\n        print(e[i].w);\n        putchar(' ');\n    }\n    puts(\"\");\n    return 0;\n}\n```",
        "postTime": 1628766897,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF360E \u3010Levko and Game\u3011"
    },
    {
        "content": "\u73b0\u5728\u660e\u786e\u6211\u4eec\u7684\u76ee\u7684\uff1a\u80fd\u8d62\u5c31\u9009\u62e9\u8d62\u7684\u65b9\u6848\uff0c\u5426\u5219\u5c1d\u8bd5\u5e73\u5c40\uff1b\u5e76\u4e0d\u662f\u6c42\u548c\u5bf9\u65b9\u5dee\u503c\u66f4\u5927\u7684\u65b9\u6848\u3002\n\n\u8003\u8651\u4e00\u4e2a\u8d62/\u5e73\u5c40\u7684\u65b9\u6848\uff0c\u8003\u8651\u6bcf\u4e00\u6761\u8fb9\uff0c\u6ca1\u6709\u88ab\u4efb\u4f55\u4e00\u4e2a\u7ecf\u8fc7\uff0c\u90a3\u4e48\u8c03\u6574\u5230\u4efb\u4f55\u503c\u90fd\u662f\u65e0\u6240\u8c13\u7684\uff1b\u5982\u679c\u4ec5\u88ab $s_1$ \u7ecf\u8fc7\uff0c\u8c03\u6574\u5230 $l$ \u662f\u66f4\u4f18\u7684\uff1b\u5982\u679c\u4ec5\u88ab $s_2$ \u7ecf\u8fc7\uff0c\u8c03\u6574\u5230 $r$ \u662f\u66f4\u4f18\u7684\uff1b\u5982\u679c\u540c\u65f6\u88ab $s_1,s_2$ \u7ecf\u8fc7\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u4e00\u4e2a\u5e73\u5c40\u7684\u65b9\u6848\uff0c\u628a\u8fd9\u6761\u8fb9\u6539\u5f97\u66f4\u5c0f\u8fd8\u4f1a\u4f7f $s_1,s_2$ \u7ecf\u8fc7\u8fd9\u91cc\uff0c\u5982\u679c\u628a\u8fd9\u6761\u8fb9\u6539\u5f97\u66f4\u5927\u53cd\u800c\u53ef\u80fd\u8ba9 $s_1,s_2$ \u8d70\u5176\u4ed6\u8def\u4ece\u800c\u53d8\u6210\u4e00\u4e2a $s_1$ \u8d62\u7684\u65b9\u6848\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8ba9 $s_1$ \u8d62\u7684\u65b9\u6848\u518d\u628a\u5b83\u6539\u6210 $l$ \uff0c\u4e5f\u5c31\u662f\u5c3d\u53ef\u80fd\u5730\u8ba9 $s_1,s_2$ \u4e00\u8d77\u8d70\u5230\u8fd9\u91cc\uff0c\u4fc3\u6210\u5e73\u5c40\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6700\u4f18\u65b9\u6848\u4f7f\u5f97\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u8981\u4e0d\u7136\u4e3a $l$\uff0c\u8981\u4e0d\u7136\u4e3a $r$\u3002\n\n\u8003\u8651\u5982\u4f55\u8ba9 $s_1$ \u8d62\uff1a\u5bf9\u4e8e\u4e00\u6761\u8fb9 $(u,v)$\uff1a\n\n- \u82e5 $dis(s_1,u)\\geq dis(s_2,u)$\uff0c\u90a3\u4e48 $s_1$ \u4e00\u5b9a\u4e0d\u4f1a\u8d70\u8fd9\u6761\u8def\uff0c\u56e0\u4e3a\u8d70\u5230\u8fd9\u6761\u8def\u4e4b\u540e\u548c $s_2$ \u7684\u6700\u4f18\u8def\u7ebf\u91cd\u5408\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u8d62\uff0c\u6240\u4ee5\u6539\u6210 $r$ \u8ba9 $s_2$ \u8d70\u8fd9\u6761\u8def\u7684\u5f00\u9500\u66f4\u5927\uff1b\n\n- \u82e5 $dis(s_1,u)<dis(s_1,u)$\uff0c\u540c\u7406\uff0c$s_2$ \u8d70\u8fd9\u6761\u8def\u4f1a\u4f7f $s_1$ \u8d62\uff0c\u90a3\u4e48 $s_2$ \u4e0d\u4f1a\u8d70\u8fd9\u6761\u8def\uff0c\u6539\u6210 $l$ \u8ba9 $s_1$ \u8d70\u8fd9\u6761\u8def\u7684\u5f00\u9500\u66f4\u5c0f\u3002\n\n\u73b0\u5728\u5224\u65ad\u5b8c\u4e86 $s_1$ \u80fd\u4e0d\u80fd\u8d62\uff0c\u5982\u679c\u4e0d\u80fd\u8d62\u5c31\u5c3d\u53ef\u80fd\u5e73\u5c40\uff0c\u548c\u4e0a\u9762\u7684\u601d\u8def\u57fa\u672c\u4e00\u81f4\uff1a\n\n- \u82e5 $dis(s_1,u)>dis(s_2,u)$\uff0c\u90a3\u4e48 $s_1$ \u4e00\u5b9a\u4e0d\u4f1a\u8d70\u8fd9\u6761\u8def\uff0c\u56e0\u4e3a\u8d70\u5230\u8fd9\u6761\u8def\u4e4b\u540e\u548c $s_2$ \u7684\u6700\u4f18\u8def\u7ebf\u91cd\u5408\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u5e73\u5c40\uff0c\u6240\u4ee5\u6539\u6210 $r$ \u8ba9 $s_2$ \u8d70\u8fd9\u6761\u8def\u7684\u5f00\u9500\u66f4\u5927\uff1b\n\n- \u82e5 $dis(s_1,u)\\leq dis(s_1,u)$\uff0c\u540c\u7406\uff0c$s_2$ \u8d70\u8fd9\u6761\u8def\u4f1a\u5e73\u5c40\u6216 $s_1$ \u8d62 \uff0c\u90a3\u4e48 $s_2$ \u4e0d\u4f1a\u8d70\u8fd9\u6761\u8def\uff0c\u6539\u6210 $l$ \u8ba9 $s_1$ \u8d70\u8fd9\u6761\u8def\u7684\u5f00\u9500\u66f4\u5c0f\u3002\n\n\u5148\u94a6\u70b9\u6240\u6709\u7684\u8fb9\u90fd\u662f $r$\uff0c\u6bcf\u6b21\u8dd1 Dijkstra \u7136\u540e\u770b\u54ea\u4e9b\u8fb9\u8981\u6539\u6743\u503c\u5c31\u6539\uff0c\u6ca1\u6709\u8fb9\u6743\u503c\u8981\u6539\u65f6\u518d\u5224\u65ad\uff0c\u6613\u505a\u5230 $\\mathcal{O}(km\\log n)$\uff0e\n\n\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5728\u6700\u77ed\u8def\u6bcf\u6b21\u677e\u5f1b\u7684\u65f6\u5019\u5224\u65ad\u5f53\u524d\u8fb9\u7684\u6743\u503c\u662f\u591a\u5c11\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(m\\log n)$\uff0e\n\n### $\\mathcal{Code}$\n\n\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u662f SPFA\uff0c\u4e0d\u8fc7\u601d\u8def\u90fd\u662f\u4e00\u6837\u7684\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#define int long long \ntypedef long long ll;\ntemplate <typename T> T Max(T x, T y) { return x > y ? x : y; }\ntemplate <typename T> T Min(T x, T y) { return x < y ? x : y; }\ntemplate <typename T>\nT& read(T& r) {\n\tr = 0; bool w = 0; char ch = getchar();\n\twhile(ch < '0' || ch > '9') w = ch == '-' ? 1 : 0, ch = getchar();\n\twhile(ch >= '0' && ch <= '9') r = r * 10 + (ch ^ 48), ch = getchar();\n\treturn r = w ? -r : r;\n}\nconst int N = 200010;\nconst ll INF = 0x7fffffffffffffff;\nint n, m, k;\nint s1, s2, t;\nll dis[N];\nstruct Edge {\n\tint to, val1, val2, id;\n\tbool fl;\n\tEdge(int x = 0, int y = 0, int z = 0, int p = 0) { to = x; val1 = y; val2 = z; id = p; }\n};\nint ans[N];\nstd::vector<Edge>vec[N];\nstd::queue<int>q;\nvoid SPFA(int s1, int s2, int fl) {\n\tfor(int i = 1; i <= n; ++i) dis[i] = INF;\n\tdis[s1] = 1; dis[s2] = 0;\n\tq.push(s1); q.push(s2);\n\twhile(!q.empty()) {\n\t\tint x = q.front(); q.pop();\n\t\tfor(Edge &e : vec[x]) {\n\t\t\tint v = e.to, w = (e.fl = ((dis[x]&1) == fl)) ? e.val1 : e.val2;\n\t\t\tif(dis[v] > dis[x] + w) {\n\t\t\t\tdis[v] = dis[x] + w;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\nsigned main() {\n\tread(n); read(m); read(k);\n\tread(s1); read(s2); read(t);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tint u, v, l; read(u); read(v); read(l);\n\t\tvec[u].push_back(Edge(v, l<<1, l<<1, 0));\n\t}\n\tfor(int i = 1; i <= k; ++i) {\n\t\tint u, v, l, r; read(u); read(v); read(l); read(r);\n\t\tvec[u].push_back(Edge(v, l<<1, r<<1, i));\n\t}\n\tSPFA(s1, s2, 1);\n\tif(dis[t] & 1) {\n\t\tputs(\"WIN\");\n\t\tfor(int i = 1; i <= n; ++i)\n\t\t\tfor(Edge e : vec[i])\n\t\t\t\tans[e.id] = e.fl ? e.val1 : e.val2;\n\t\tfor(int i = 1; i <= k; ++i) printf(\"%lld \", ans[i]/2);\n\t}\n\telse {\n\t\tSPFA(s2, s1, 0);\n\t\tif(!(dis[t]&1)) {\n\t\t\tputs(\"DRAW\");\n\t\t\tfor(int i = 1; i <= n; ++i)\n\t\t\t\tfor(Edge e : vec[i])\n\t\t\t\t\tans[e.id] = e.fl ? e.val1 : e.val2;\n\t\t\tfor(int i = 1; i <= k; ++i) printf(\"%lld \", ans[i]/2);\n\t\t}\n\t\telse {\n\t\t\tputs(\"LOSE\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1628766020,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300dCodeforces 360E Levko and Game"
    },
    {
        "content": "### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF360E)\n\n## $\\text{Description}$\n\n- \u7ed9\u5b9a\u4e00\u5f20\u56fe $n$ \u4e2a\u70b9 $m+k$ \u6761\u8fb9\uff0c\u5176\u4e2d $m$ \u6761\u8fb9\u8fb9\u6743\u4e00\u5b9a\uff0c$k$ \u6761\u8fb9\u8fb9\u6743\u5728 $[l_i,r_i]$ \u5185\u81ea\u9009\u3002\n- \u7ed9\u5b9a\u521d\u59cb\u70b9 $s_1$\uff0c$s_2$\uff0c\u7ec8\u70b9 $t$\uff0c\u95ee\u80fd\u5426\u786e\u5b9a $k$ \u6761\u8fb9\u8fb9\u6743\uff0c\u4f7f\u5f97 $s_1\\to t$ \u6700\u77ed\u8def\u957f\u5ea6\u5c0f\u4e8e $s_2\\to t$ \u6700\u77ed\u8def\u957f\u5ea6\uff0c\u82e5\u4e0d\u80fd\u5c0f\u4e8e\uff0c\u5219\u7b49\u4e8e\u3002\u82e5\u53ef\u4ee5\u518d\u8f93\u51fa\u65b9\u6848\u3002\n\n## $\\text{Solution}$\n\n\u8003\u573a\u4e0a\u505a\u51fa\u6765\u4e86/se~~\u4e0a\u5927\u5206~~\uff0c[\u4e3a SD \u8001\u54e5\u9ed8\u54c0](https://www.luogu.com.cn/paste/uns3njmc)\u3002\uff08\u540c\u65f6 lk \u7206\u53c9\u4e86\u4ec5\u6709\u7684\u4e94\u7bc7\u9898\u89e3\u4e2d\u7684\u56db\u7bc7\u3002\uff09\n\n\u8003\u8651\u5230 $s_1\\to t$ \u548c $s_2\\to t$ \u7684\u6700\u77ed\u8def\uff0c\u7531\u4e8e\u5b83\u4eec\u90fd\u662f\u6700\u77ed\u8def\uff0c\u56e0\u6b64\u5fc5\u5b9a\u53ef\u4ee5\u901a\u8fc7\u6784\u9020\u4f7f\u5f97\u8fd9\u4e24\u6761\u6700\u77ed\u8def\u4ece\u67d0\u4e2a\u70b9\u5f00\u59cb\u5b8c\u5168\u91cd\u5408\u3002\n\n\u6211\u4eec\u5e0c\u671b $s_1\\to t$ \u4e0a\u662f $l$\uff0c$s_2\\to t$ \u4e0a\u662f $r$\u3002\n\n\u6211\u4eec\u5bf9\u6bcf\u4e2a\u70b9\u8003\u8651\u662f $s_1$ \u5148\u5230\uff0c\u8fd8\u662f $s_2$ \u5148\u5230\u3002\n\n---\n\u82e5 $s_1$ \u5148\u5230\uff0c\u90a3\u4e48\u76f4\u63a5\u4ee4\u51fa\u8fb9\u6700\u5c0f\uff0c\u5373\u4e3a $l$ \u5373\u53ef\u3002\n\n\u56e0\u4e3a\u82e5 $s_2$ \u4e5f\u8d70\u8fd9\u6761\u8fb9\uff0c\u540e\u9762\u5c31\u4e00\u6837\u4e86\uff0c\u80fd\u4fdd\u8bc1 $s_1$ \u5148\u5230\u3002\n\n\u82e5 $s_2$ \u4e0d\u8d70\u8fd9\u6761\u8fb9\u5373\u4e3a\u8d2a\u5fc3\u53d6\u8fb9\u6743\u6700\u5c0f\uff0c\u4f7f\u5f97 $s_1$ \u8def\u5f84\u957f\u5ea6\u6700\u5c0f\u3002\n\n---\n\n\u82e5 $s_2$ \u5148\u5230\uff0c\u90a3\u4e48\u76f4\u63a5\u4ee4\u51fa\u8fb9\u6700\u5927\uff0c\u5373\u4e3a $r$ \u5373\u53ef\u3002\n\n\u5206\u6790\u4e0e\u4e0a\u9762\u4e00\u6837\u3002\n\n---\n\n\u82e5 $s_1$ \u4e0e $s_2$ \u540c\u65f6\u5230\uff0c\u88ab\u53c9\u7684\u9898\u89e3\u90fd\u662f\u628a\u5b83\u76f4\u63a5\u5f52\u4e3a\u4e0a\u9762\u4e24\u7c7b\u4e2d\u7684\u4e00\u7c7b\u3002\n\n\u4f46\u662f\u8fd9\u6837\u662f\u4e0d\u5bf9\u7684\u3002\n\n\u8003\u8651\u6211\u4eec\u7684\u76ee\u7684\u3002\n\n\u5982\u679c\u6211\u4eec\u60f3\u8981 $s_1$ \u8d62\uff0c\u90a3\u4e48\u6211\u4eec\u4ee4\u8fd9\u6761\u51fa\u8fb9\u4e3a $r$\uff0c\u56e0\u4e3a\u73b0\u5728\u6211\u4eec\u82e5\u8d70\u8fd9\u6761\u8fb9\u5c31\u53ea\u80fd\u5e73\u4e86\uff0c\u6211\u4eec\u4ee4\u51fa\u8fb9\u6700\u5927\uff0c\u4e3a\u4e86\u65b9\u4fbf $s_1$ \u4ece\u5176\u5b83\u5730\u65b9\u6284\u8fd1\u9053\u8fc7\u53bb\u3002\n\n\u5982\u679c\u4e0d\u80fd\u8d62\uff0c\u6211\u4eec\u8003\u8651\u8ba9\u5b83\u5e73\uff0c\u90a3\u4e48\u6211\u4eec\u4ee4\u8fd9\u6761\u51fa\u8fb9\u4e3a $l$\uff0c\u4e3a\u4e86\u8ba9 $s_1$ \u548c $s_2$ \u90fd\u8d70\u4e0a\u8fd9\u6761\u8def\u4ece\u800c\u8fbe\u6210\u5e73\u3002\n\n\u5176\u5b9e\u4e0d\u80fd\u8d62\u8fd8\u53ef\u4ee5\u4ece\u53e6\u5916\u4e00\u4e2a\u89d2\u5ea6\u8003\u8651\uff0c\u5c31\u662f\u4e0d\u8ba9 $s_2$ \u8d62\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u60f3\u8981 $s_1$ \u8d62\u7684\u60c5\u51b5\u53cd\u8fc7\u6765\u4ee3\u5165\u5c31\u884c\u4e86\u3002\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u5148\u5e26\u7740 $s_1$ \u8d62\u7684\u76ee\u7684\u8dd1\u4e00\u904d dijkstra\uff0c\u82e5\u4e0d\u80fd\u8d62\uff0c\u518d\u5e26\u7740\u5e73\u7684\u76ee\u7684\u8dd1\u4e00\u904d dijkstra \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log m)$\uff0c\u4e5f\u5c31\u662f\u5806 dijkstra \u7684\u590d\u6742\u5ea6\u3002\n\n~~\u540a\u6253\u4e86 CF std \u7684\u590d\u6742\u5ea6\u3002~~\n\n## $\\text{Code}$\n\n```cpp\nconst int N=1e5+5;const ll INF=903372036854775807;\nint n,m,k,s1,s2,t,hd[N],cnte,tmp[N],l[N],r[N],u[N],v[N],st[N],tp;\nll dis1[N],dis2[N];\npriority_queue<ll,vector<pair<ll,ll> >,greater<pair<ll,ll> > > q;\nstruct edge{int nxt,t,id;}es[N];\ninline void add(int x,int y,int z){es[++cnte]=(edge){hd[x],y,z};hd[x]=cnte;}\n\ninline void dijkstra(bool op){\n\tfor(re i=1;i<=n;++i) dis1[i]=dis2[i]=INF;\n\tdis1[s1]=0;dis2[s2]=0;q.push(mp(0,s1));q.push(mp(0,s2));\n\twhile(!q.empty()){\n\t\tint x=q.top().second;ll d=q.top().first;q.pop();\n\t\tif(min(dis1[x],dis2[x])!=d) continue;\n\t\tif(dis1[x]<dis2[x]||op&&dis1[x]==dis2[x]){\n\t\t\tfor(re i=hd[x];i;i=es[i].nxt){\n\t\t\t\tint to=es[i].t;ll w=d+l[es[i].id];\n\t\t\t\tif(w<min(dis1[to],dis2[to])) q.push(mp(dis1[to]=w,to));\n\t\t\t\telse dis1[to]=min(dis1[to],w);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tfor(re i=hd[x];i;i=es[i].nxt){\n\t\t\t\tint to=es[i].t;ll w=d+r[es[i].id];\n\t\t\t\tif(w<min(dis1[to],dis2[to])) q.push(mp(dis2[to]=w,to));\n\t\t\t\telse dis2[to]=min(dis2[to],w);\n\t\t\t}\n\t\t}\n\t}\n} \n\n// ---------- dijkstra ---------- //\n\nint main(){\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n//\tios::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n\trd(n);rd(m);rd(k);rd(s1);rd(s2);rd(t);\n\tfor(re i=1;i<=m;++i){\n\t\tint x,y;rd(x);rd(y);rd(l[i]);r[i]=l[i];add(x,y,i);\n\t}\n\tfor(re i=m+1;i<=m+k;++i){\n\t\tint x,y;rd(x);rd(y);rd(l[i]);rd(r[i]);add(x,y,i);u[i]=x;v[i]=y;\n\t}\n\tif(s1==s2){\n\t\tputs(\"DRAW\");\n\t\tfor(re i=m+1;i<=m+k;++i) wr(l[i]),putchar(' ');puts(\"\");\n\t\treturn 0;\n\t}\n\tdijkstra(0);\n\tif(dis1[t]<dis2[t]){\n\t\tputs(\"WIN\");\n\t\tfor(re i=m+1;i<=m+k;++i)\n\t\t\twr(dis1[u[i]]<dis2[u[i]]&&dis1[v[i]]<dis2[v[i]]?l[i]:r[i]),putchar(' ');puts(\"\");\n\t\treturn 0;\n\t}\n\tdijkstra(1);\n\tif(dis1[t]<=dis2[t]){\n\t\tputs(\"DRAW\");\n\t\tfor(re i=m+1;i<=m+k;++i)\n\t\t\twr(dis1[u[i]]<=dis2[u[i]]&&dis1[v[i]]<=dis2[v[i]]?l[i]:r[i]),putchar(' ');puts(\"\");\n\t\treturn 0;\n\t}\n\tputs(\"LOSE\");\n\treturn 0;\n}\n\n// ---------- Main ---------- //\n```\n\n\u6765\u70b9\u82b1\u7d6e\u3002\n\n![\u300aT1\u300b](https://z3.ax1x.com/2021/08/12/f00N6S.png)",
        "postTime": 1628764028,
        "uid": 83999,
        "name": "Demoe",
        "ccfLevel": 7,
        "title": "CF360E Levko and Game \u9898\u89e3 \u6784\u9020\u8d2a\u5fc3"
    },
    {
        "content": "## $\\text{Description}$\n\u4f60\u548c\u4f60\u7684\u670b\u53cb\u5728\u4e00\u5f20\u6709 $n$\uff08$n\\le 10^4$\uff09\u4e2a\u70b9\uff0c $m+k$\uff08$m \\le 10^4,k\\le 100$\uff09\u6761\u8fb9\u7684\u5e26\u6743\u6709\u5411\u56fe\u4e0a\u73a9\u4e00\u4e2a\u6e38\u620f.\n\n\u4e00\u5f00\u59cb\u4f60\u4eec\u5206\u522b\u5904\u5728 $S_1$ \u548c $S_2$ \u4e0a,\u4f60\u4eec\u9700\u8981\u5230\u8fbe $T$.\n\n\u4f60\u53ef\u4ee5\u5c06\u7ed9\u5b9a\u7684 $k$ \u6761\u8fb9\u7684\u6743\u503c\u4fee\u6539\u4e3a $[L,R]$ \u4e2d\u4efb\u4f55\u6570.\n\n\u95ee\u4f60\u662f\u5426\u80fd\u5148\u5230\u8fbe $T$,\u5982\u679c\u4e0d\u80fd,\u80fd\u5426\u8fbe\u6210\u5e73\u5c40.  \n$n,m\\le 10^4,k\\le 100$\n## $\\text{Solution}$\n\u4e00\u5f00\u59cb\u628a\u6240\u6709\u8fb9\u7684\u6743\u90fd\u8bbe\u6210\u6700\u5927.  \n\u5bf9\u4e8e\u4e00\u6761\u8fb9 $(u\\to v)$\uff0c\u82e5 $dis1_u\\le dis1_v$\uff0c\u5c31\u628a\u5b83\u7684\u8fb9\u6743\u8bbe\u6210\u6700\u5c0f\uff0c\u56e0\u4e3a\u5982\u679c B \u60f3\u7528\u8fd9\u6761\u8fb9\uff0c\u5fc5\u8d25\u65e0\u7591.  \n\u6539\u6743\u540e\u53ef\u80fd $dis$ \u7684\u5173\u7cfb\u53d1\u751f\u53d8\u5316\uff0c\u91cd\u65b0\u8dd1 Dijkstra\uff0c\u518d\u6b21\u5224\u65ad\u5373\u53ef.  \n\u590d\u6742\u5ea6 $O(nk)$.  \n## $\\text{Code}$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define debug(...) fprintf(stderr,__VA_ARGS__)\nconst int N=1e4+100;\ninline ll read(){\n  ll x(0),f(1);char c=getchar();\n  while(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n  while(isdigit(c)){x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n  return x*f;\n}\nint n,m,k;\nstruct node{\n  int to,nxt,frm,w;\n}p[N<<1];\nint fi[N],cnt;\ninline void addline(int x,int y,int w){\n  p[++cnt]=(node){y,fi[x],x,w};fi[x]=cnt;\n  return;\n}\nint id[105];\nint u[105],v[105],l[105],r[105];\nint s1,s2,t;\nll dis1[N],dis2[N];\nbool vis[N];\n#define pr pair<int,ll>\n#define mkp make_pair\npriority_queue<pr,vector<pr>,greater<pr> >q;\nvoid dij(ll *dis,int s){\n  memset(vis,0,sizeof(vis));\n  dis[s]=0;q.push(mkp(0,s));\n  while(!q.empty()){\n    int now=q.top().second;q.pop();\n    if(vis[now]) continue;\n    vis[now]=1;\n    for(int i=fi[now];~i;i=p[i].nxt){\n      int to=p[i].to;\n      if(dis[to]>dis[now]+p[i].w){\n\tdis[to]=dis[now]+p[i].w;\n\tq.push(mkp(dis[to],to));\n      }\n    }\n  }\n  return;\n}\nint main(){\n  #ifndef ONLINE_JUDGE\n  freopen(\"a.in\",\"r\",stdin);\n  freopen(\"a.out\",\"w\",stdout);\n#endif\n  memset(fi,-1,sizeof(fi));cnt=-1;\n  n=read();m=read();k=read();\n  s1=read();s2=read();t=read();\n  for(int i=1;i<=m;i++){\n    int x=read(),y=read(),w=read();\n    addline(x,y,w);\n  }\n  for(int i=1;i<=k;i++){\n    u[i]=read(),v[i]=read(),l[i]=read(),r[i]=read();\n    addline(u[i],v[i],r[i]);id[i]=cnt;\n  }\n  while(1){\n    int f=0;\n    memset(dis1,0x3f,sizeof(dis1));memset(dis2,0x3f,sizeof(dis2));\n    dij(dis1,s1);dij(dis2,s2);\n    for(int i=1;i<=k;i++){\n      if(p[id[i]].w!=l[i]&&dis1[u[i]]<dis2[u[i]]){\n\tf=1;p[id[i]].w=l[i];break;\n      }\n    }\n    if(!f) break;\n  }\n  memset(dis1,0x3f,sizeof(dis1));memset(dis2,0x3f,sizeof(dis2));\n  dij(dis1,s1);dij(dis2,s2);\n  if(dis1[t]>dis2[t]) printf(\"LOSE\");\n  else{\n    if(dis1[t]==dis2[t]) printf(\"DRAW\\n\");\n    else printf(\"WIN\\n\");\n    for(int i=1;i<=k;i++) printf(\"%d \",p[id[i]].w);\n  }\n  return 0;\n}\n/*\n3 3\ntsy\n*/\n\n```\n",
        "postTime": 1639643594,
        "uid": 449265,
        "name": "wind_whisper",
        "ccfLevel": 10,
        "title": "CF360E Levko and Game"
    }
]