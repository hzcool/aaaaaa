[
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u7528 `set` \u4e5f\u4e0d\u7528\u5dee\u5206\u7684 `tarjan` \u7684\u505a\u6cd5\u5427\uff0c\u5e94\u8be5\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u3002\n\n\u9898\u610f\u662f\u5728\u4e00\u4e2a\u65e0\u5411\u56fe\u4e0a\uff0c\u627e\u5230\u6240\u6709\u53ea\u5728\u4e00\u4e2a\u7b80\u5355\u73af\u4e0a\u7684\u8fb9\u3002\u56e0\u4e3a\u7b80\u5355\u73af\u662f\u4e0d\u80fd\u7ecf\u8fc7\u540c\u4e00\u4e2a\u70b9\u4e24\u6b21\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u73af\u662f\u4e0d\u80fd\u7a7f\u8fc7\u5272\u70b9\u7684\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8dd1\u4e00\u904d `tarjan` \uff0c\u628a\u5272\u70b9\u548c\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u6c42\u51fa\u6765\uff0c\u6bcf\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u662f\u53ef\u4ee5\u5355\u72ec\u8003\u8651\u7684\u3002\u4e0d\u540c\u7684\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\u3002\u6bd4\u5982\u5bf9\u4e8e\u4e0b\u9762\u7684\u56fe\uff0c `1` \u662f\u5272\u70b9\uff0c `1 2 3` \u662f\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u8fd9\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u7b80\u5355\u73af\u3002 `1 4 5 6` \u662f\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5b83\u91cc\u9762\u4e0d\u53ea\u6709\u4e00\u4e2a\u73af\u3002\u5b83\u4eec\u76f8\u4e92\u72ec\u7acb\uff0c\u53ef\u4ee5\u5355\u72ec\u8003\u8651\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/nuel78eb.png)\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u600e\u4e48\u77e5\u9053\u91cc\u9762\u54ea\u4e9b\u8fb9\u662f\u53ea\u5728\u4e00\u4e2a\u73af\u91cc\u7684\u5462\uff1f\u5176\u5b9e\u53ea\u8981\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u91cc\u9762\u4e0d\u6b62\u6709\u4e00\u4e2a\u73af\uff0c\u90a3\u4e48\u6bcf\u6761\u8fb9\u90fd\u53ef\u4ee5\u5728\u4e0d\u6b62\u4e00\u4e2a\u73af\u91cc\u9762\u3002\u6240\u4ee5\u5176\u5b9e\u95ee\u9898\u53d8\u6210\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u53cc\uff0c\u5224\u65ad\u8fd9\u4e2a\u70b9\u53cc\u91cc\u9762\u662f\u4e0d\u662f\u53ea\u6709\u4e00\u4e2a\u73af\u3002\u53ea\u6709\u4e00\u4e2a\u73af\u7b49\u4ef7\u4e8e\u8fd9\u4e2a\u70b9\u53cc\u91cc\u9762\u70b9\u7684\u4e2a\u6570\u7b49\u4e8e\u8fb9\u7684\u6761\u6570\u3002\n\n\u90a3\u4e48\u5982\u4f55\u6c42\u70b9\u53cc\u5185\u90e8\u70b9\u7684\u4e2a\u6570\u548c\u8fb9\u7684\u6761\u6570\u5462\uff1f\u6211\u4eec\u5728\u8dd1 `tarjan` \u7684\u65f6\u5019\uff0c\u5b9a\u4e49\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u53eb `sv` \uff0c\u628a\u6cbf\u9014\u7ecf\u8fc7\u7684\u70b9\u90fd\u5b58\u4e0b\u6765\u3002\u4e00\u4e2a\u53eb `se` \uff0c\u628a\u6cbf\u9014\u7ecf\u8fc7\u7684\u8fb9\u90fd\u5b58\u4e0b\u6765\u3002\u6bcf\u5f53\u53d1\u73b0\u4e00\u4e2a\u70b9\u53cc\u7684\u65f6\u5019\uff0c\u5c31\u628a\u8fd9\u4e24\u4e2a\u6808\u91cc\u9762\u7684\u70b9\u548c\u8fb9\u90fd `pop` \u51fa\u6765\uff0c\u6570\u4e00\u6570\u4e2a\u6570\u662f\u4e0d\u662f\u76f8\u7b49\u5c31\u884c\u4e86\u3002\n\n\u5177\u4f53\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e2d\uff0c\u6211\u770b\u5230\u6709\u9898\u89e3\u662f\u7528 `set` \u6765\u5224\u8fb9\u662f\u4e0d\u662f\u91cd\u590d\uff0c\u56e0\u4e3a\u65e0\u5411\u56fe\u662f\u6b63\u53cd\u53cc\u5411\u63d2\u5165\u8fb9\uff0c\u90a3\u4e48\u6709\u53ef\u80fd\u4e00\u6761\u8fb9\u88ab\u653e\u5230 `se` \u91cc\u9762\u4e24\u6b21\u4e86\uff0c\u6240\u4ee5\u9700\u8981\u53bb\u91cd\u3002\u5176\u5b9e\u8fd9\u4e2a\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u6211\u4eec\u5728 `tarjan` \u7684\u65f6\u5019\uff0c\u52a0\u4e00\u4e2a\u5224\u65ad\uff0c\u53ea\u6709\u8d70\u5230\u4e00\u4e2a\u6ca1\u8bbf\u95ee\u8fc7\u7684\u70b9\uff0c\u6216\u8005\u662f\u4ece\u4e00\u4e2a\u70b9\u8d70\u56de\u7956\u5148\u7684\u65f6\u5019\uff0c\u624d\u63d2\u5165\u5230 `se` \u91cc\u3002\u5982\u679c\u662f\u4e00\u4e2a\u70b9\u5f80\u4e00\u4e2a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u513f\u5b50\u65b9\u5411\u8d70\u7684\u8fb9\uff0c\u6211\u4eec\u5c31\u4e0d\u63d2\u5165\u4e86\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u6761\u8fb9\u53ea\u63d2\u5165\u6808\u4e00\u6b21\uff0c\u4e5f\u5c31\u4e0d\u7528 `set` \u4e86\uff0c\u8282\u7ea6\u4e86\u4e00\u4e2a `log` \u7684\u590d\u6742\u5ea6\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u91cc\u9762\u7684\u6ce8\u91ca\n\n```cpp\n#include <iostream>\n#include <stack>\n\nusing namespace std;\nconst int MAXN = 1e5 + 5;\nstruct Node {\n    int v, id, next;\n} pool[MAXN << 1];\nint n, m, head[MAXN], pre[MAXN], low[MAXN], nn, dt;\nint fa[MAXN];//\u6bcf\u4e2a\u70b9\u5f80\u7236\u4eb2\u65b9\u5411\u8d70\u7684\u8fb9\n\nvoid addEdge(int u, int v, int id) {\n    pool[++nn].v = v;\n    pool[nn].id = id;\n    pool[nn].next = head[u];\n    head[u] = nn;\n}\n\nstack<int> sv;//tarjan\u7ecf\u8fc7\u7684\u6bcf\u4e2a\u70b9\nstack<int> se;//tarjan\u7ecf\u8fc7\u7684\u8fb9\u7684\u7f16\u53f7\nint vis[MAXN];//\u5f53\u524d\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u91cc\u9762\u7ecf\u8fc7\u7684\u8fb9\nint ans[MAXN];//\u6bcf\u4e2a\u662f\u7b54\u6848\u7684\u8fb9\uff0c\u6807\u8bb0\u4e00\u4e0b\n\nvoid tarjan(int u) {\n    sv.push(u);\n    low[u] = pre[u] = ++dt;\n    for (int i = head[u]; i; i = pool[i].next) {\n        int v = pool[i].v;\n        int id = pool[i].id;\n        if (pre[v] == 0) {\n            fa[v] = id;\n            se.push(id);\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n            if (low[v] >= pre[u]) {\n                //\u627e\u5230\u4e00\u4e2a\u70b9\u53cc\uff0c\u7edf\u8ba1\u8fd9\u4e2a\u70b9\u53cc\u91cc\u9762\u70b9\u7684\u4e2a\u6570\u548c\u8fb9\u7684\u6761\u6570\uff0c\u5982\u679c\u70b9\u548c\u8fb9\u76f8\u7b49\uff0c\u8bf4\u660e\u53ea\u6709\u4e00\u4e2a\u73af\n                int cntV = 1;//\u70b9\u7684\u4e2a\u6570\uff0c\u80af\u5b9a\u5305\u542b\u5272\u70b9\u81ea\u5df1\n                int cntE = 0;//\u8fb9\u7684\u4e2a\u6570\n                while (true) {\n                    int t = sv.top();\n                    sv.pop();\n                    cntV++;\n                    if (t == v) break;\n                }\n                while (true) {\n                    int t = se.top();\n                    se.pop();\n                    vis[cntE++] = t;\n                    if (t == fa[v]) break;\n                }\n                if (cntV == cntE) {\n                    //\u53ea\u6709\u4e00\u4e2a\u73af\uff0c\u6807\u8bb0\u4e00\u4e0b\n                    for (int j = 0; j < cntE; j++) {\n                        ans[vis[j]] = 1;\n                    }\n                }\n            }\n        } else if (id != fa[u]) {\n            low[u] = min(low[u], pre[v]);\n            if (pre[v] < pre[u]) {\n                //\u53cd\u5411\u8fb9\u8fdb\u6808\uff0c\u5176\u4ed6\u8fb9\u4e0d\u8fdb\uff0c\u4fdd\u8bc1\u4e0d\u91cd\u590d\n                se.push(id);\n            }\n        }\n    }\n}\n\nint main() {\n    cin >> n >> m;\n    for (int i = 1; i <= m; ++i) {\n        int u, v;\n        cin >> u >> v;\n        addEdge(u, v, i);\n        addEdge(v, u, i);\n    }\n    for (int i = 1; i <= n; ++i) {\n        if (pre[i] == 0) {\n            tarjan(i);\n        }\n    }\n    int cnt = 0;\n    for (int i = 1; i <= m; ++i) {\n        if (ans[i] == 1) cnt++;\n    }\n    cout << cnt << endl;\n    for (int i = 1; i <= m; ++i) {\n        if (ans[i] == 1) {\n            cout << i << \" \";\n        }\n    }\n    cout << endl;\n    return 0;\n}\n```\n",
        "postTime": 1639639979,
        "uid": 43206,
        "name": "\u6ce5\u571f\u7b28\u7b28",
        "ccfLevel": 0,
        "title": "CF962F Simple Cycles Edges\u9898\u89e3"
    },
    {
        "content": "### \u524d\u7f6e\u829d\u58eb\uff1a\n\n\u6211\u4eec\u5982\u4e0b\u5b9a\u4e49\uff1a\n\n$\\large\\texttt{DFS\u6811}$\uff1a\u5bf9\u4e8e\u65e0\u5411\u8fde\u901a\u56feG\uff0c\u5728dfs\u8fc7\u7a0b\u4e2d\u4e0e\u539f\u70b9\u96c6\u6784\u6210\u7684\u751f\u6210\u6811\u5373\u4e3aDFS\u6811\u3002\n\n$\\large\\texttt{\u8fd4\u7956\u8fb9}$\uff1a\u5728\u4e00\u4e2a\u7531\u6811\u8fb9\u548c\u975e\u6811\u8fb9\u7ec4\u6210\u7684\u96c6\u5408$E$\u4e2d\uff0c\u5bf9\u4e8e\u4efb\u610f$u,v\u2208E$\uff0c\u90fd\u6ee1\u8db3$u,v$\u4e3a\u7236\u5b50\u6216\u5b50\u7236\u7684\u5173\u7cfb\u7684\u8fb9\uff0c\u79f0\u4e3a\u8fd4\u7956\u8fb9\u3002\n\n$\\large\\texttt{\u7b80\u5355\u73af}$\uff1a\u4e0d\u7ecf\u8fc7\u91cd\u590d\u8fb9\u7684\u73af\u3002\n\n\u90a3\u4e48\u53ef\u6709\u6027\u8d28\uff1a\u5728$E$\u4e2d\uff0c\u975e\u6811\u8fb9\u5747\u4e3a\u8fd4\u7956\u8fb9\u3002\u6240\u4ee5\u5728\u95ee\u9898\u5904\u7406\u65f6\uff0c**\u6240\u6709\u7684\u8fb9\u90fd\u5728\u4e00\u4e2a\u5b50\u6811\u5185**\u3002\n\n\n\n------------\n### \u7b80\u5355\u73af\u7684\u7814\u7a76\uff1a\n\n\u5982\u56fe\uff1a\u6709\u4e24\u4e2a\u7b80\u5355\u73af\u76f8\u4ea4\u4e8e\u94fe$4-5$\u4e0a\n\n![](https://cdn.luogu.com.cn/upload/pic/71111.png )\n\n\u5bf9\u4e8e$1-4-5$\uff0c$0-4-5$\u90fd\u81ea\u6210\u4e00\u4e2a\u7b80\u5355\u73af\u3002\n\n\u4f46\u662f\u663e\u7136\uff0c\u5bf9\u4e8e\u5927\u73af$0-1-4-5$\u4e5f\u6210\u4e3a\u4e00\u4e2a\u7b80\u5355\u73af\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c**\u5bf9\u4e8e\u4e24\u4e2a\u76f8\u4ea4\u7684\u7b80\u5355\u73af\uff0c\u603b\u662f\u53ef\u4ee5\u62d3\u5c55\u6210\u65b0\u7684\u7b80\u5355\u73af\u3002**\n\n\u6839\u636e\u9898\u610f\u8bf4\u660e\uff0c\u6211\u4eec\u53d1\u73b0\uff0c**\u8981\u4f7f\u4e00\u4e2a\u8fb9\u6070\u597d\u5728\u4e00\u4e2a\u7b80\u5355\u73af\u5185\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u4e24\u4e2a\u7b80\u5355\u73af\u4e0d\u80fd\u76f8\u4ea4\uff0c\u5426\u5219\u6240\u5728\u7b80\u5355\u73af\u6570$++$**\u3002\n\n\u800c\u6839\u636e\u8fd4\u7956\u8fb9\u7684\u6027\u8d28\uff0c**\u4e24\u4e2a\u7b80\u5355\u73af\u7684\u76f8\u4ea4\u5904\u4e00\u5b9a\u5728\u6811\u4e0a**\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u6362\u6210\u4e86\u8fb9\u7684\u8986\u76d6\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5c06\u7edf\u8ba1**\u4e24\u4e2a\u7b80\u5355\u73af\u662f\u5426\u76f8\u4ea4**\u8f6c\u6362\u4e3a**\u4e24\u4e2a\u7b80\u5355\u73af\u4e2d\u7684\u67d0\u4e00\u90e8\u5206\u662f\u5426\u76f8\u4ea4**\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u4e3a\u4e86\u65b9\u4fbf\uff0c\u9ed8\u8ba4\u4e3a\u5224\u65ad\u8fd4\u7956\u8fb9\u662f\u5426\u76f8\u4ea4\uff0c\u5176\u4e2d\u8fd4\u7956\u8fb9\u96c6\u4e3a\u7b80\u5355\u73af\u62c6\u53bb\u975e\u6811\u8fb9\u7684\u4e00\u6761\u94fe\uff08\u73af=\u94fe+\u8fb9\uff09\u3002\n\n\u90a3\u4e48\u601d\u8def\u5c31\u51fa\u6765\u4e86\uff0c**\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7b80\u5355\u73af\uff0c\u6211\u4eec\u5c06\u5b83\u7684\u8fd4\u7956\u8fb9\u8986\u76d6\u5728\u539f\u56fe\u4e0a**\uff0c\u6700\u540e\u603b\u8ba1\u6ca1\u6709\u88ab\u8986\u76d6\u5230\u7684\u533a\u57df\u4e00\u5b9a\u7b26\u5408\u9898\u610f\u3002\n\n\u5bf9\u4e8e\u6811\u4e0a\u67d3\u8272\uff0c\u4f7f\u7528\u6811\u4e0a\u5dee\u5206\u8fdb\u884c\u67d3\u8272\u3002\u5bf9\u4e8e\u4e00\u6761\u8fd4\u7956\u8fb9$u-v$\u8fdb\u884c\u5dee\u5206\uff0c\u6700\u540e\u5dee\u5206\u6570\u7ec4\u5143\u7d20\u4e3a$1$\u7684\u5373\u4e3a\u672a\u8986\u76d6\u533a\u57df\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O$($n+m$)\u3002\n\n\u4ee3\u7801\u5c31\u4e0d\u7ed9\u4e86\uff0c\u770b[caoyang1123](https://cdn.luogu.com.cn/upload/pic/71111.png )\u7684\u5427\u3002\n",
        "postTime": 1565458047,
        "uid": 83906,
        "name": "_stellar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF962F \u3010Simple Cycles Edges\u3011"
    },
    {
        "content": "[$\\verb|CF962F Simple Cycles Edges|$](https://www.luogu.org/problemnew/show/CF962F)\n\n> \u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6c42\u6709\u591a\u5c11\u6761\u8fb9\u4ec5\u88ab\u5305\u542b\u5728\u4e00\u4e2a\u7b80\u5355\u73af\u5185\u5e76\u8f93\u51fa\n>\n> $n,\\ m\\leq10^5$\n\ntarjan\n\n------\n\n\u9996\u5148\uff0c\u4e00\u4e2a\u8fde\u901a\u5757\u662f\u4e00\u4e2a\u73af\uff0c\u5f53\u4e14\u4ec5\u5f53\u8be5\u8fde\u901a\u5757\u7684 \u70b9\u6570=\u8fb9\u6570\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e24\u4e2a\u73af\u4ec5\u7531\u4e00\u4e2a\u516c\u5171\u70b9\u8fde\u63a5\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u73af\u4e92\u4e0d\u5f71\u54cd\uff0c\u5373\u70b9\u53cc\u4e24\u4e24\u4e92\u4e0d\u5f71\u54cd\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5904\u7406\u51fa\u70b9\u53cc\u548c\u6bcf\u4e2a\u70b9\u53cc\u5185\u7684\u8fb9\u6570\n\n\u4f46\u662f\u6c42\u51fa\u70b9\u53cc\u540e\u66b4\u529bdfs\u4f1a\u88ab\u5982\u4e0b\u6570\u636e\u5361\u6389\uff1a\n\n```\n66667 99999\n1 2\n1 3\n2 3\n1 4\n1 5\n4 5\n1 6\n1 7\n6 7\n...\n```\n\n\u56e0\u4e3a $1$ \u8282\u70b9\u6bcf\u6b21\u679a\u4e3e\u6240\u6709\u8fb9\u7684\u6548\u7387\u592a\u4f4e\n\n\u4e8e\u662f\u53ef\u4ee5\u5728tarjan\u65f6\u5c06\u6240\u6709\u8fb9\u538b\u5165\u6808\u4e2d\uff0c\u518d\u7528set\u7edf\u8ba1\u70b9\u53cc\u4e2d\u7684\u8fb9\u6570\u4ee5\u53ca\u7b54\u6848\u5e76\u53bb\u91cd\n\n\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define nc getchar()\nconst int maxn = 1e5 + 10;\nint n, m, tot, top, h[maxn], dfn[maxn], low[maxn], st[maxn * 3];\nstruct edges {\n  int nxt, to;\n} e[maxn << 1];\nset <int> ans, edge[maxn], node[maxn];\n\ninline int read() {\n  int x = 0; char c = nc;\n  while (c < 48) c = nc;\n  while (c > 47) x = x * 10 + c - 48, c = nc;\n  return x;\n}\n\nvoid addline(int u, int v) {\n  static int cnt = 1;\n  e[++cnt] = edges{h[u], v}, h[u] = cnt;\n}\n\nvoid tarjan(int u, int f) {\n  static int now;\n  dfn[u] = low[u] = ++now;\n  for (int i = h[u]; i; i = e[i].nxt) {\n    int v = e[i].to;\n    if (!dfn[v]) {\n      st[++top] = i >> 1, st[++top] = u, st[++top] = v;\n      tarjan(v, u);\n      low[u] = min(low[u], low[v]);\n      if (dfn[u] <= low[v]) {\n        tot++;\n        while (1) {\n          int t1, t2;\n          node[tot].insert(t1 = st[top--]);\n          node[tot].insert(t2 = st[top--]);\n          edge[tot].insert(st[top--]);\n          if (t1 == v && t2 == u) break;\n        }\n      }\n    } else if (dfn[v] < dfn[u] && v != f) {\n      st[++top] = i >> 1, st[++top] = u, st[++top] = v;\n      low[u] = min(low[u], dfn[v]);\n    }\n  }\n}\n\nint main() {\n  n = read(), m = read();\n  for (int i = 1; i <= m; i++) {\n    int u = read(), v = read();\n    addline(u, v), addline(v, u);\n  }\n  for (int i = 1; i <= n; i++) {\n    if (!dfn[i]) tarjan(i, 0);\n  }\n  for (int i = 1; i <= tot; i++) {\n    if (edge[i].size() == node[i].size()) {\n      ans.insert(edge[i].begin(), edge[i].end());\n    }\n  }\n  printf(\"%d\\n\", (int)ans.size());\n  for (int u : ans) printf(\"%d \", u);\n  return 0;\n}\n```",
        "postTime": 1550129618,
        "uid": 73934,
        "name": "Juanzhang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF962F \u3010Simple Cycles Edges\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u7bc7\u4e0d\u9700\u8981\u7528 set \u7684 tarjan \u9898\u89e3\u3002\n\n\u9996\u5148\u9898\u610f\u53ef\u4ee5\u8f6c\u5316\u4e3a\u627e\u51fa\u8fb9\u6570\u7b49\u4e8e\u70b9\u6570\u7684\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u4e0d\u7981\u8ba9\u4eba\u60f3\u8d77 tarjan\u3002\n\n\u53ea\u9700\u8981\u5728 tarjan \u7684\u65f6\u5019\u5bf9\u5f53\u524d\u70b9\u53cc\u8fb9\u7684\u6570\u91cf\u8fdb\u884c\u5dee\u5206\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u5f53\u524d\u70b9\u53cc\u6709\u591a\u5c11\u8fb9\u4e86\u3002\n\n\u4ed4\u7ec6\u60f3\u60f3\uff0c\u7531\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u53cc\u90fd\u662f\u5728\u6700\u5148\u88ab dfs \u5230\u7684\u70b9\u8ba1\u7b97\u7684\uff0c\u6240\u4ee5\u5dee\u5206\u662f\u6b63\u786e\u7684\u3002\n\n\u4ee3\u7801\u5e94\u8be5\u6bd4\u8f83\u6e05\u6670\u4e86\u3002\n\n\u590d\u6742\u5ea6\u5c31\u662f $O(n+m)$ \u7684\u5566\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MX = 1e5 + 23;\n\nint n ,m;\n\nint head[MX] ,tot = 1;\nstruct edge{\n\tint node ,next ,w;\n}h[MX << 1];\nvoid addedge(int u ,int v ,int flg = 1){\n\th[++tot] = (edge){v ,head[u] ,1} ,head[u] = tot;\n\tif(flg) addedge(v ,u ,false);\n}\n\nint DFN[MX] ,low[MX] ,cnt ,stk[MX] ,dep;\nint estk[MX] ,ans[MX];\nint M;\nvoid tarjan(int x){\n\tDFN[x] = low[x] = ++cnt;\n\tstk[++dep] = x;\n\tfor(int i = head[x] ,d ; i ; i = h[i].next){\n\t\tint curm = M;\n        // \u4fdd\u5b58\u4e00\u4e0b\u5f53\u524d\u7684\u8fb9\u6570\n\t\tif(h[i].w){ // \u8fd9\u6761\u8fb9\u662f\u7b2c\u4e00\u6b21\u7ecf\u8fc7\uff08\u4e24\u4e2a\u65b9\u5411\u90fd\u662f\uff09\n\t\t\testk[++M] = i / 2;\n\t\t\th[i].w = h[i ^ 1].w = 0;\n            // \u53cd\u5411\u8fb9\u4e5f\u8981\u66f4\u65b0\n\t\t}\n\t\tif(!DFN[d = h[i].node]){\n\t\t\ttarjan(d);\n\t\t\tlow[x] = min(low[x] ,low[d]);\n\t\t\tif(DFN[x] == low[d]){ \n\t\t\t\tint vcnt = 0;\n\t\t\t\tfor(int tmp = 0 ; tmp != d ; --dep){\n\t\t\t\t\ttmp = stk[dep];\n\t\t\t\t\t++vcnt;\n\t\t\t\t}\n\t\t\t\t++vcnt;\n                // \u4ee5\u4e0a\u662f\u6b63\u5e38\u7f29\u70b9\u53cc\n\t\t\t\tint ok = (M - curm == vcnt);\n                // \u5dee\u5206\u5224\u65ad\u5f53\u524d\u70b9\u53cc\u7684\u8fb9\u6570\u662f\u5426\u548c\u70b9\u6570\u4e00\u81f4\n\t\t\t\twhile(curm < M){\n\t\t\t\t\tans[estk[M]] = ok;\n\t\t\t\t\t--M;\n\t\t\t\t}\n\t\t\t}\n\t\t}else if(DFN[d] < low[x]) low[x] = DFN[d];\n\t}\n}\n\nint main(){\n\tcin >> n >> m;\n\tfor(int i = 1 ,u ,v ; i <= m ; ++i){\n\t\tcin >> u >> v;\n\t\taddedge(u ,v);\n\t}\n\tfor(int i = 1 ; i <= n ; ++i)\n\t\tif(!DFN[i]) tarjan(i);\n\tint cnt = 0;\n\tfor(int i = 1 ; i <= m ; ++i){\n\t\tcnt += ans[i];\n\t}\n\tcout << cnt << endl;\n\tfor(int i = 1 ; i <= m ; ++i){\n\t\tif(ans[i]){\n\t\t\tcout << i << \" \";\n\t\t}\n\t}\n\tcout << endl;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1603251328,
        "uid": 47863,
        "name": "Imakf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF962F \u3010Simple Cycles Edges\u3011"
    },
    {
        "content": "\u5f88\u663e\u7136,\u5bf9\u4e8e\u6c42\u6709\u5173\u56fe.\u73af\u4e4b\u7c7b\u7684\u9898\u76ee\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5efa\u641c\u7d22\u6811\u6765\u505a.\u800c\u5efa\u5b8c\u4e4b\u540e\u6211\u4eec\u53d1\u73b0\u6240\u6c42\u7684\u8fb9\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5:\n1.\u88ab\u4e14\u4ec5\u88ab1\u6761\u8fd4\u7956\u8fb9\u8986\u76d6\u7684\u6811\u8fb9\n2.\u6240\u5728\u8d77\u70b9\u5230\u7ec8\u70b9\u90fd\u662f\u6210\u7acb\u7684\u6811\u8fb9\u7684\u8fd4\u7956\u8fb9.\n\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u5efa\u597d\u641c\u7d22\u6811(\u56e0\u4e3a\u4e0d\u4e00\u5b9a\u8fde\u901a\u6240\u4ee5\u53ef\u80fd\u4e0d\u6b62\u4e00\u68f5),\u4e4b\u540e\u5bf9\u4e8e\u8fd4\u7956\u8fb9\u7684\u8d77\u70b9\u7ec8\u70b9\u8fdb\u884c\u6811\u72b6\u5dee\u5206,\u7136\u540e\u5728\u679a\u4e3e\u6bcf\u6761\u8fd4\u7956\u8fb9\u8d77\u70b9\u5230\u7ec8\u70b9\u5728\u6811\u4e0a\u7684\u8def\u5f84,\u5982\u679c\u8fd9\u6761\u8def\u5f84\u4e0a\u5dee\u5206\u503c\u90fd\u662f1\u5373\u53ef\u884c.\u7edf\u8ba1\u7b54\u6848.(\u679a\u4e3e\u8def\u5f84\u8fd9\u4e00\u6b65\u6211\u5199\u7684\u6709\u4e9b\u66b4\u529b,\u76f4\u63a5\u66b4\u529b\u4ece\u4e00\u4e2a\u70b9\u5f80\u7956\u5148\u8df3,\u6709\u53ef\u80fd\u88ab\u5361,\u6240\u4ee5\u6700\u597d\u53ef\u4ee5\u5199\u6811\u5256,\u4f46\u6211\u5b9e\u5728\u592a\u849f\u84bb\u5c31\u6ca1\u5199...)\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\u5427...\n```cpp\n#pragma GCC optimize(3,\"inline\",\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int>ans;\nint tmp,tp,a,b,u,v,n,m,to[500010],deep[500010],nxt[500010],hd[500010],fa[100010],tofa[500010],num=-1,cf[500010];\nbool tree[500010],vis[100010],flag;\nvoid add(int u,int v)      //\u52a0\u8fb9 (\u53cc\u5411) \n{\n    nxt[++num]=hd[u],to[num]=v,hd[u]=num;\n    nxt[++num]=hd[v],to[num]=u,hd[v]=num;\n}\nvoid dfs1(int pos,int f,int dp)//\u5efa\u641c\u7d22\u6811 \n{\n    fa[pos]=f;vis[pos]=1;deep[pos]=dp;\n    for(int i=hd[pos];i!=-1;i=nxt[i])\n    {\n        if(!vis[to[i]])\n        {\n            tofa[to[i]]=i,tree[i]=1;dfs1(to[i],pos,dp+1);//\u8bb0\u5f55\u662f\u5426\u4e3a\u6811\u8fb9,\u4ee5\u53ca\u5230\u8fde\u63a5\u7236\u4eb2\u8282\u70b9\u8fb9\u7f16\u53f7 \n        }\n    }\n}\nvoid dfs(int pos)\n{\n    vis[pos]=1;\n    for(int i=hd[pos];i!=-1;i=nxt[i])\n    {\n        if(tree[i])dfs(to[i]),cf[pos]+=cf[to[i]];//\u8dd1\u51fa\u5dee\u5206 \n    }\n}\nint main()\n{\n    memset(hd,-1,sizeof hd);\n    memset(nxt,-1,sizeof nxt);\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        add(a,b);\n    }\n    for(int i=1;i<=n;i++)\n        if(!vis[i])dfs1(i,0,1);\n    for(int i=0;i<=num;i+=2)\n    {\n        if(tree[i]||tree[i+1])continue;\n        else u=to[i],v=to[i+1];\n        if(deep[u]<deep[v])swap(u,v);\n        cf[u]++;cf[v]--;//\u8fdb\u884c\u5dee\u5206,\u6ce8\u610f\u5728\u4e00\u4e2a\u70b9\u4e0a\u7684\u5dee\u5206\u503c\u4ee3\u8868\u8fd9\u4e2a\u70b9\u5230\u7236\u4eb2\u7684\u8fb9\u7684\u5dee\u5206,\u56e0\u6b64\u5728u,v\u4e0a\u505a,\u5177\u4f53\u53ef\u753b\u56fe\u7406\u89e3 \n    }\n    memset(vis,0,sizeof vis);\n    for(int i=1;i<=n;i++)\n        if(!vis[i])dfs(i);\n    for(int i=0;i<=num;i+=2)\n    {\n        if(tree[i]||tree[i+1])continue;\n        else u=to[i],v=to[i+1];\n        if(deep[u]<deep[v])swap(u,v);\n        flag=0;tmp=u;\n        for(;fa[tmp]!=v;tmp=fa[tmp])//\u66b4\u529b\u8dd1\u8def\u5f84 \n        {\n            if(cf[tmp]!=1)\n            {\n                flag=1;break;\n            }\n        }\n        if(!flag&&cf[tmp]==1)\n        {\n            ans.push_back((i+2)/2);//\u56e0\u4e3a\u5b58\u7684\u662f\u53cc\u5411\u8fb9,\u6545\u7f16\u53f7\u4e3a+2\u518d/2 \n            while(u!=v)\n            {\n                ans.push_back((tofa[u]+2)/2);\n                u=fa[u];\n            }\n        }\n    }\n    sort(ans.begin(),ans.end());cout<<ans.size()<<endl;\n    for(int i=0;i<ans.size();i++)cout<<ans[i]<<\" \";//\u8f93\u51fa \n}\n```",
        "postTime": 1523534359,
        "uid": 51742,
        "name": "sigland",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF962F \u3010Simple Cycles Edges\u3011"
    },
    {
        "content": "[\u53ef\u4ee5\u5728\u6211\u7684\u535a\u5ba2\u4e2d\u67e5\u770b\uff0c\u8c22\u8c22\u652f\u6301\u3002](https://www.cnblogs.com/crab-in-the-northeast/p/cf962f.html)\n\n\u5728\u4e00\u4e2a\u65e0\u5411\u56fe\u4e2d\uff0c\u67d0\u4e2a\u7b80\u5355\u73af\u7b49\u4ef7\u4e8e\u8fd9\u4e2a\u56fe\u4e2d\u67d0\u4e2a\u70b9\u6570\u7b49\u4e8e\u8fb9\u6570\u7684**\u70b9\u53cc**\u8fde\u901a\u5206\u91cf\u3002\n\n> \u4e3a\u4ec0\u4e48\u4e0d\u662f\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\uff1f\n>\n> \u60f3\u8c61\u4e00\u4e2a 8 \u5b57\u7ed3\u6784\u3002\u8fd9\u4e2a 8 \u5b57\u6574\u4f53\u5e76\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u73af\uff08\u8fb9\u6570\u6bd4\u70b9\u6570\u591a1\uff09\uff0c\u800c\u662f\u4e0a\u4e0b\u4e24\u4e2a\u7b80\u5355\u73af\u4e2d\u95f4\u5171\u7528\u4e00\u4e2a\u70b9\u5f62\u6210\u7684\u3002\n>\n> \u4ece\u70b9\u53cc\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u662f\u4e0a\u4e0b\u4e24\u4e2a\u70b9\u6570\u7b49\u4e8e\u8fb9\u6570\u7684\u70b9\u53cc\uff0c\u8fd9\u662f\u6b63\u786e\u7684\u3002\n>\n> \u800c\u4ece\u8fb9\u53cc\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6574\u4e2a 8 \u5b57\u662f\u4e00\u4e2a\u8fb9\u53cc\uff0c\u800c\u4e0a\u4e0b\u4e24\u4e2a\u73af\u4e3a\u8fd9\u4e2a 8 \u5b57\u8fb9\u53cc\u7684\u5b50\u56fe\uff0c\u5e76\u4e0d\u662f\u8fb9\u53cc\u8054\u901a\u5206\u91cf\uff0c\u7b49\u4ef7\u6027\u5c31\u7834\u574f\u4e86\u3002\n>\n> \u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a**\u4e24\u4e2a\u7b80\u5355\u73af\u53ef\u4ee5\u5171\u7528\u4e00\u4e2a\u70b9\uff0c\u800c\u4e0d\u80fd\u5171\u7528\u4e00\u6761\u8fb9**\u3002\u800c**\u8fb9\u53cc\u662f\u4e0d\u80fd\u5904\u7406\u5171\u7528\u4e00\u4e2a\u70b9\u7684**\uff0c\u6240\u4ee5\u8fb9\u53cc\u4e0d\u884c\u3002\n\n\u5728 tarjan \u6c42\u89e3\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u540c\u65f6\u7528\u4e24\u4e2a\u6808\uff0c\u5206\u522b\u5b58\u70b9\u548c\u8fb9\u3002\n\n\u7136\u540e\u5224\u65ad\u5230\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u65f6\u5019\uff0c\u5982\u679c\u53d1\u73b0\u70b9\u6570\u7b49\u4e8e\u8fb9\u6570\uff0c\u90a3\u4e48\u5b58\u70b9\u7684\u6808\u76f4\u63a5\u5f39\u51fa\uff0c\u5b58\u8fb9\u7684\u6808\u8fb9\u5f39\u8fb9\u628a\u5f39\u51fa\u7684\u8fb9\u8bb0\u5f55\u5728\u7b54\u6848\u4e2d\uff0c\u5426\u5219\u4e24\u4e2a\u6808\u90fd\u76f4\u63a5\u5f39\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4f46\u5b9e\u9645\u5b9e\u73b0\u4ee3\u7801\u7684\u65f6\u5019\u53d1\u73b0\uff0c\u70b9\u6570\u548c\u8fb9\u6570\u4f3c\u4e4e\u672c\u6765\u5c31\u9700\u8981\u5f39\u6808\u540c\u65f6\u7edf\u8ba1\uff1f\u4e0d\u4f1a\u8fd8\u7528\u5230\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u5f39\u51fa\u6765\u7684\u8fb9\uff0c\u7136\u540e\u518d\u56de\u53bb\u7ed9\u6570\u7ec4\u6807\u8bb0\u5427\u3002\u8fd9\u6837\u5c31\u9ebb\u70e6\u4e86\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5b58\u70b9\u7684\u6808\u65e0\u8bba\u5982\u4f55\u90fd\u662f\u76f4\u63a5\u5f39\uff0c\u90a3\u4e48\u70b9\u6570\u76f4\u63a5\u8fb9\u5f39\u8fb9\u7edf\u8ba1\u5373\u53ef\u3002\n\n\u800c\u8fb9\u6570\uff0c\u5176\u5b9e\u5c31\u662f\u6808\u4e2d $(u, v)$ \u8fd9\u6761\u8fb9\uff0c\u4e00\u76f4\u5f80\u4e0a\u5230\u6808\u9876\u7684\u8fd9\u4e9b\u8fb9\u7684\u6570\u91cf\u3002\u90a3\u4e48\u4e00\u5f00\u59cb\u5f39\u5165 $(u, v)$ \u4e4b\u524d\u6211\u4eec\u8bb0\u5f55\u4e00\u4e0b\u5b58\u8fb9\u6808\u7684\u5927\u5c0f $erz$\uff0c\u4e4b\u540e\u68c0\u6d4b\u5230\u70b9\u53cc\uff0c\u5f39\u6808\u4e4b\u524d\u6808\u7684\u5927\u5c0f $s$ \u51cf\u53bb $erz$ \u5c31\u662f\u8fb9\u7684\u6570\u91cf\u3002\u5177\u4f53\u770b\u4ee3\u7801\u3002\n\n```cpp\n/*\n * @Author: crab-in-the-northeast \n * @Date: 2022-10-07 22:53:38 \n * @Last Modified by: crab-in-the-northeast\n * @Last Modified time: 2022-10-08 00:45:49\n */\n#include <bits/stdc++.h>\ninline int read() {\n    int x = 0;\n    bool flag = true;\n    char ch = getchar();\n    while (!isdigit(ch)) {\n        if (ch == '-')\n            flag = false;\n        ch = getchar();\n    }\n    while (isdigit(ch)) {\n        x = (x << 1) + (x << 3) + ch - '0';\n        ch = getchar();\n    }\n    if(flag)\n        return x;\n    return ~(x - 1);\n}\n\nconst int maxn = (int)1e5 + 5;\nconst int maxm = (int)1e5 + 5;\ntypedef std :: pair <int, int> pii;\n\nstd :: vector <pii> G[maxn];\nstd :: vector <int> ans;\nstd :: stack <int> vst, est;\n\nint dfn[maxn], low[maxn], times;\n\ninline bool gmi(int &a, int b) {\n    return b < a ? a = b, true : false;\n}\n\nvoid tarjan(int u, int lst) {\n    dfn[u] = low[u] = ++times;\n    vst.push(u);\n\n    for (pii e : G[u]) {\n        int v = e.first, id = e.second;\n        if (!dfn[v]) {\n            int erz = est.size();\n            est.push(id);\n            tarjan(v, id);\n            gmi(low[u], low[v]);\n            if (low[v] >= dfn[u]) {\n                int ent = est.size() - erz, vnt = 1;\n                while (!vst.empty()) {\n                    int x = vst.top();\n                    vst.pop();\n                    ++vnt;\n                    if (x == v)\n                        break;\n                }\n\n                // printf(\"%d %d %d\\n\", low[u], low[v], ent);\n                while (!est.empty()) {\n                    int x = est.top();\n                    est.pop();\n                    if (ent == vnt)\n                        ans.push_back(x);\n                    if (x == id)\n                        break;\n                }\n            }\n        } else if (id != lst) {\n            // \u6211\u4eec\u521a\u521a\u662f\u4ece\u54ea\u6761\u8fb9\u6765\u7684\uff0c\u4e0d\u80fd\u4ece\u8fd9\u6761\u8fb9\u4e0a\u8fd4\u56de\u53bb\n            // \u4e8b\u5b9e\u4e0a\u8fd8\u6709\u4e00\u79cd\u5199\u6cd5\u662f tarjan \u5728\u4f20\u53c2 u \u7684\u540c\u65f6\u4e5f\u4f20\u53c2 u \u7684\u7236\u4eb2 fa\uff0c\u7136\u540e\u68c0\u6d4b v != fa \u9632\u6b62\u56de\u53bb\n            // \u8fd9\u79cd\u5199\u6cd5\u5728\u65e0\u91cd\u8fb9\uff0c\u6216\u8005\u6c42\u70b9\u53cc/\u5272\u70b9\u7684\u65f6\u5019\u90fd\u6ca1\u6709\u95ee\u9898\uff08\u4f60\u628a\u4e00\u4e2a\u70b9\u5220\u4e86\u91cd\u8fb9\u4e00\u8d77\u6ca1\uff0c\u4e0d\u5f71\u54cd\uff09\n            // \u4f46\u662f\u5728\u6709\u91cd\u8fb9\u73af\u5883\u4e0b\uff0c\u6c42\u8fb9\u53cc/\u6865\u7684\u65f6\u5019\u5c31\u4f1a\u51fa\u95ee\u9898\u4e86\uff0c\u6bd4\u5982 1 - 2 \u4e4b\u95f4\u4e24\u6761\u8fb9\uff0c\u5220\u9664\u4e00\u6761\u53ef\u4ee5\u8d70\u53e6\u4e00\u6761\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ea\u80fd\u50cf\u6211\u8fd9\u4e48\u5199\n            // \u5177\u4f53\u53ef\u4ee5\u770b\u6d1b\u8c37\u4e2d\u8fb9\u53cc\u7684\u677f\u9898 P8436\n            gmi(low[u], dfn[v]);\n            est.push(id);\n        }\n    }\n}\n\nint main() {\n    int n = read(), m = read();\n    for (int i = 1; i <= m; ++i) {\n        int u = read(), v = read();\n        G[u].emplace_back(v, i);\n        G[v].emplace_back(u, i);\n    }\n\n    for (int u = 1; u <= n; ++u)\n        if (!dfn[u])\n            tarjan(u, 0);\n    \n    printf(\"%d\\n\", (int)ans.size());\n    std :: sort(ans.begin(), ans.end());\n    \n    for (auto x : ans)\n        printf(\"%d \", x);\n    puts(\"\");\n    return 0;\n}\n```\n\n",
        "postTime": 1665165093,
        "uid": 120868,
        "name": "dbxxx",
        "ccfLevel": 6,
        "title": "CF962F"
    },
    {
        "content": "## \u601d\u8def:\n\u8003\u8651\u5bf9\u4e8e\u4e24\u4e2a\u7b80\u5355\u73af\u7684\u4ea4\u5bf9\u79f0\u5dee\uff0c\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u7b80\u5355\u73af\n\u6240\u4ee5\u4e00\u4e2a\u7b80\u5355\u73af\u8981\u4e48\u5168\u6ee1\u8db3\uff0c\u8981\u4e48\u5168\u4e0d\u6ee1\u8db3\u3002\n\u5bf9\u4e8e\u4e00\u6761\u975e\u6811\u8fb9\u770b\u4e00\u4e0b\u4e2d\u95f4\u662f\u5426\u53ea\u6709 1 \u4e2a\u8986\u76d6\n\u7528\u6811\u4e0a\u5dee\u5206 + dfs \u5b9e\u73b0\ndfs \u65f6\u8bb0\u5f55\u5b83\u7684\u7956\u5148\u4fdd\u8bc1\u5168\u4e3a 1 \u7684\u6700\u5927\u6df1\u5ea6\n## \u5b9e\u73b0:\n\n```cpp\n#include <bits/stdc++.h>\n\n#ifndef use_ios11\n#define use_ios11\nusing namespace std;\nstruct ins\n{\n    int ans;\n    ins()\n    {\n        ans = 1;\n    }\n#define endl '\\n'\n    void read()\n    {\n    }\n    void read1(char &s)\n    {\n        char c = getchar();\n        for (; !isprint(c) || c == ' ' || c == '\\n' || c == '\\t'; c = getchar())\n            ;\n        s = c;\n        if (c == EOF)\n            ans = 0;\n    }\n    void read1(string &s)\n    {\n        s = \"\";\n        char c = getchar();\n        for (; !isprint(c) || c == ' ' || c == '\\n' || c == '\\t'; c = getchar())\n            ;\n        for (; isprint(c) && c != ' ' && c != '\\n' && c != '\\t'; c = getchar())\n            s += c;\n        if (c == EOF)\n            ans = 0;\n    }\n    template <typename T>\n    void read1(T &n)\n    {\n        T x = 0;\n        int f = 1;\n        char c = getchar();\n        for (; !isdigit(c); c = getchar())\n        {\n            if (c == '-')\n                f = -1;\n            if (c == EOF)\n            {\n                ans = 0;\n                return;\n            }\n        }\n        for (; isdigit(c); c = getchar())\n            x = x * 10 + c - 48;\n        n = x * f;\n        if (c == EOF)\n            ans = 0;\n        if (c != '.')\n            return;\n        T l = 0.1;\n        while ((c = getchar()) <= '9' && c >= '0')\n            x = x + (c & 15) * l, l *= 0.1;\n        n = x * f;\n        if (c == EOF)\n            ans = 0;\n    }\n    void write() {}\n    void write1(string s)\n    {\n        int n = s.size();\n        for (int i = 0; i < n; i++)\n            putchar(s[i]);\n    }\n    void write1(const char *s)\n    {\n        int n = strlen(s);\n        for (int i = 0; i < n; i++)\n            putchar(s[i]);\n    }\n    void write1(char s)\n    {\n        putchar(s);\n    }\n    void write1(float s, int x = 6)\n    {\n        char y[10001];\n        sprintf(y, \"%%.%df\", x);\n        printf(y, s);\n    }\n    void write1(double s, int x = 6)\n    {\n        char y[10001];\n        sprintf(y, \"%%.%dlf\", x);\n        printf(y, s);\n    }\n    void write1(long double s, int x = 6)\n    {\n        char y[10001];\n        sprintf(y, \"%%.%dLf\", x);\n        printf(y, s);\n    }\n    template <typename T>\n    void write1(T n)\n    {\n        if (n < 0)\n            n = -n, putchar('-');\n        if (n > 9)\n            write1(n / 10);\n        putchar('0' + n % 10);\n    }\n    template <typename T>\n    friend ins operator>>(ins x, T &n);\n    template <typename T>\n    friend ins operator<<(ins x, T n);\n    operator bool()\n    {\n        return ans;\n    }\n};\ntemplate <typename T>\nins operator>>(ins x, T &n)\n{\n    if (!x.ans)\n        return x;\n    x.read1(n);\n    return x;\n}\ntemplate <typename T>\nins operator<<(ins x, T n)\n{\n    x.write1(n);\n    return x;\n}\nins yin;\nins yout;\n#endif\nint n, m;\nconst int maxn = 1e5 + 10;\nint tot = 1, head[maxn];\nstruct edge\n{\n    int v, nxt, tr;\n} e[maxn << 1];\nvoid __ADD(int u, int v)\n{\n    e[++tot].v = v;\n    e[tot].nxt = head[u];\n    head[u] = tot;\n}\nvoid add(int a, int b)\n{\n    __ADD(a, b);\n    __ADD(b, a);\n}\nint ans;\nint vis[maxn];\nint a[maxn];\nint dep[maxn];\nint tof[maxn];\nint f[maxn];\nint sum[maxn];\nvoid dfs(int u, int fa)\n{\n    vis[u] = 1;\n    dep[u] = dep[fa] + 1;\n    f[u] = fa;\n    for (int i = head[u]; i; i = e[i].nxt)\n    {\n        int v = e[i].v;\n        if (v == fa)\n            continue;\n        // cout << u << ' ' << v << endl;\n        if (vis[v])\n        {\n            if (dep[u] > dep[v])\n                sum[v]--, sum[u]++;\n        }\n        else\n            dfs(v, u), e[i].tr = e[i ^ 1].tr = 1, tof[v] = i;\n    }\n}\nvector<int> ans1;\nvoid dfs1(int u, int fa, int deep)\n{\n    // cout << u << vis[5] << endl;\n    vis[u] = 1;\n    // cout << u << \" \" << deep << \" \" << sum[u] << endl;\n    deep = sum[u] == 1 ? deep : dep[u] + 1;\n    for (int i = head[u]; i; i = e[i].nxt)\n    {\n        int v = e[i].v;\n        if (v == fa)\n            continue;\n        if (!vis[v])\n            dfs1(v, u, deep);\n        else\n        {\n            if (dep[v] + 1 >= deep && dep[u] > dep[v])\n            {\n                int uu = u, vv = v;\n                ans1.push_back(i / 2);\n                while (uu != vv)\n                {\n                    ans1.push_back(tof[uu] / 2);\n                    // cout << uu << ' ' << v << endl;\n                    uu = f[uu];\n                }\n            }\n        }\n    }\n}\nvoid dfs2(int u, int fa)\n{\n    vis[u] = 1;\n    for (int i = head[u]; i; i = e[i].nxt)\n    {\n        int v = e[i].v;\n        if (v == fa)\n            continue;\n        if (!vis[v])\n        {\n            dfs2(v, u);\n            sum[u] += sum[v];\n        }\n    }\n    // cout << u << \" \" << sum[u] << endl;\n}\nint main()\n{\n    yin >> n >> m;\n    for (int i = 1; i <= m; i++)\n    {\n        int a, b;\n        yin >> a >> b;\n        add(a, b);\n    }\n    for (int i = 1; i <= n; i++)\n        if (!vis[i])\n            dfs(i, 0);\n    memset(vis, 0, sizeof(vis));\n    // cout << vis[5] << endl;\n    for (int i = 1; i <= n; i++)\n        if (!vis[i])\n            dfs2(i, 0);\n    memset(vis, 0, sizeof(vis));\n    for (int i = 1; i <= n; i++)\n        if (!vis[i])\n            dfs1(i, 0, 1);\n    sort(ans1.begin(), ans1.end());\n    yout << ans1.size() << endl;\n    for (int i = 0; i < ans1.size(); i++)\n        yout << ans1[i] << \" \";\n    return 0;\n}\n\n```",
        "postTime": 1595423749,
        "uid": 74346,
        "name": "ybw051114",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF962F \u3010Simple Cycles Edges\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u5947\u602a\u7684\u505a\u6cd5\uff0c\u8c8c\u4f3c\u6ca1\u6709\u770b\u89c1\u76f8\u540c\u505a\u6cd5\u7684\u9898\u89e3\u3002\n\n\u9996\u5148\u5bf9\u4e8e\u4e0d\u540c\u7684\u8fde\u901a\u5757\uff0c\u6211\u4eec\u5206\u522b\u5904\u7406\u5373\u53ef\u3002  \n\u53d1\u73b0\u5982\u679c\u4e00\u6761\u8fb9\u7b26\u5408\u6761\u4ef6\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u6240\u5728\u7684\u70b9\u53cc\u6070\u4e3a\u4e00\u4e2a\u7b80\u5355\u73af\u3002  \n\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u9898\u610f\u8f6c\u5316\u4e3a\uff1a**\u6c42\u6240\u6709\u70b9\u6570\u7b49\u4e8e\u8fb9\u6570\u7684\u70b9\u53cc\u8fde\u901a\u5206\u91cf**\u3002  \n\u56e0\u4e3a\u4e00\u6761\u8fb9\u53ea\u4f1a\u5728\u4e00\u4e2a\u70b9\u53cc\u4e2d\u51fa\u73b0\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651**\u5728\u6bcf\u6761\u8fb9\u4e0a\u65b0\u589e**\u4e00\u4e2a\u70b9\u3002  \n\u5373\u628a\u8fd9\u6837\u4e00\u5f20\u56fe\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/71tjy7ki.png)  \n\u53d8\u6210\u8fd9\u6837\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/twq3qh4c.png)  \n\u6b64\u65f6\uff0c\u5982\u679c\u6211\u4eec\u628a\u539f\u6765\u7684 $n$ \u4e2a\u70b9\u6743\u503c\u8bbe\u4e3a $1$\uff0c\u65b0\u589e\u70b9\u7684\u6743\u503c\u8bbe\u4e3a $-1$\uff0c\u76f8\u5f53\u4e8e\u8981\u6c42**\u6709\u591a\u5c11\u4e2a\u70b9\u53cc\u7684\u70b9\u6743\u548c\u4e3a $0$**\u3002  \n\u8fd9\u662f\u5728 Tarjan \u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u65b9\u4fbf\u5730\u7edf\u8ba1\u7684\u3002  \n\u540c\u65f6\uff0c\u56e0\u4e3a\u6bcf\u6761\u8fb9\u53ea\u4f1a\u5c5e\u4e8e\u4e00\u4e2a\u70b9\u53cc\uff0c\u6240\u4ee5\u6bcf\u4e2a\u65b0\u589e\u70b9\u4e5f\u53ea\u4f1a\u88ab\u4e00\u4e2a\u70b9\u53cc\u5305\u542b\uff0c\u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e2a\u65b0\u589e\u70b9\u5bf9\u5e94\u7684\u70b9\u53cc\u7f16\u53f7\u5373\u53ef\u3002\n\n\u6b64\u65f6\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u5bf9\u4e8e\u4e00\u6761\u4e0d\u5b58\u5728\u4e8e\u4efb\u610f\u4e00\u4e2a\u7b80\u5355\u73af\u4e2d\u7684\u8fb9\uff0c\u6211\u4eec\u8fd9\u6837\u5904\u7406\u4f1a\u5bfc\u81f4\u8bef\u5224\u3002  \n\u6709\u4e00\u4e2a\u6bd4\u8f83\u7b28\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u5728\u65b0\u589e\u70b9\u4e4b\u524d\u8dd1\u4e00\u4e0b\u539f\u56fe\u7684 Tarjan\uff0c\u5219\u6240\u6709\u53ea\u6709\u4e24\u4e2a\u70b9\u7684\u70b9\u53cc\u5c31\u5bf9\u5e94\u4e00\u6761\u8fd9\u6837\u7684\u8fb9\uff0c\u8bb0\u5f55\u4e0b\u6765\u8fd9\u4e9b\u8fb9\u540e\u65b0\u5efa\u70b9\u65f6\u5ffd\u7565\u8fd9\u4e9b\u8fb9\u5373\u53ef\u3002  \n\u4e8e\u662f\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n+m)$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a  \n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define ch getchar\ntemplate<typename T> void read(T &x){\n    x = 0; int f(1); char c = ch();\n    for(;!isdigit(c);c = ch()) if(c == '-') f = -1;\n    for(;isdigit(c);c = ch()) x = x*10+c-'0';\n    x *= f;\n}\ntemplate<typename T,typename... Args>\ninline void read(T &x,Args&... args){\n    read(x); read(args...);\n}\n#define pb emplace_back\nconst int maxn = 100005;\nint n,m,ANS[maxn],cnt;\nint hd[maxn],tt = 1; // \u6ce8\u610f\u524d\u5411\u661f\u7684\u5f00\u59cb\u4e0b\u6807\u3002\nstruct edge{int ed,nxt;}e[2*maxn];\nint dfn[2*maxn],low[2*maxn];\nint sta[2*maxn],top,tot;\nint val[2*maxn],V[2*maxn];\nint eu[maxn],ev[maxn];\nvector<int> Frm[2*maxn];\nvector<int> G[2*maxn];\nvoid star(int u,int v){\n    e[++tt] = (edge){v,hd[u]}; hd[u] = tt;\n    e[++tt] = (edge){u,hd[v]}; hd[v] = tt;\t\n}\nvoid Tarjan(int x){\n    dfn[x] = low[x] = ++tot;\n    sta[++top] = x;\n    for(auto y:G[x]){\n        if(!dfn[y]){\n            Tarjan(y);\n            low[x] = min(low[x],low[y]);\n            if(low[y] == dfn[x]){\n                ++cnt;\n                while(sta[top+1] != y){\n                V[cnt] += val[sta[top]];\n                    if(val[sta[top]] == -1)\n                        Frm[cnt].pb(sta[top]);\n                    --top;\n                }\n                V[cnt] += val[x];\n                if(val[x] == -1)\tFrm[cnt].pb(x);\n                // \u7edf\u8ba1\u70b9\u6743\u548c\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u53cc\u4e2d\u7684\u65b0\u589e\u70b9\u3002\n            }\n        }\n        else\tlow[x] = min(low[x],dfn[y]);\n    }\n}\nvoid tarjan(int x){\n    dfn[x] = low[x] = ++tot;\n    sta[++top] = x;\n    for(int i = hd[x];i;i = e[i].nxt){\n        int y = e[i].ed;\n        if(!dfn[y]){\n            tarjan(y);\n            low[x] = min(low[x],low[y]);\n            if(low[y] == dfn[x]){\n                cnt = 0;\n                while(sta[top+1] != y)\n                    ++cnt,--top;\n                ++cnt;\n                if(cnt == 2)\tANS[i/2] = 1;\n                // \u5bf9\u4e8e\u6240\u6709\u5927\u5c0f\u4e3a 2 \u7684\u70b9\u53cc\uff0c\u7ed9\u8fb9\u6253\u4e0a\u6807\u8bb0\u3002\n            }\n        }\n        else\tlow[x] = min(low[x],dfn[y]);\n    }\n}\nint main(){\n    read(n,m);\n    for(int i(1);i <= m;++i){\n        read(eu[i],ev[i]);\n        star(eu[i],ev[i]);\n    }\n    for(int i(1);i <= n;++i)\n        if(!dfn[i]) tarjan(i),--top;\n//\u7b2c\u4e00\u6b21 tarjan\uff0c\u6c42\u51fa\u4e0d\u5b58\u5728\u4e8e\u4efb\u610f\u4e00\u4e2a\u7b80\u5355\u73af\u4e2d\u7684\u8fb9\uff0c\u5e76\u6253\u4e0a\u6807\u8bb0\u3002\n    memset(dfn,0,sizeof dfn);\n    tot = top = cnt = 0;\n    for(int i(1);i <= n;++i)\tval[i] = 1;\n    for(int i(1);i <= m;++i){\n        if(ANS[i] == 1){ANS[i] = 0;continue;}\n        G[eu[i]].pb(n+i); G[ev[i]].pb(n+i);\n        G[n+i].pb(eu[i]); G[n+i].pb(ev[i]); val[n+i] = -1;\n    }\n//\u65b0\u5efa\u8fb9\u4e0a\u7684\u70b9\u3002\n    n += m;\n    for(int i(1);i <= n;++i)\n        if(!dfn[i]) Tarjan(i),--top;\n//\u7b2c\u4e8c\u6b21 tarjan\uff0c\u6c42\u51fa\u6240\u6709\u65b0\u56fe\u70b9\u53cc\u7684\u6743\u503c\u548c\u3002\n    for(int i(1);i <= cnt;++i)\n        if(V[i] == 0)\n        for(int j(0);j < Frm[i].size();++j)\n            ANS[Frm[i][j]-n+m] = 1;\n//\u7edf\u8ba1\u7b54\u6848\u3001\u8f93\u51fa\u3002\n    cnt = 0;\n    for(int i(1);i <= m;++i)\tcnt += ANS[i];\n    cout << cnt << endl;\n    for(int i(1);i <= m;++i)\n        if(ANS[i])\tprintf(\"%d \",i);\n    return 0;\n}\n```",
        "postTime": 1603338155,
        "uid": 201227,
        "name": "TUIFEI_oier",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF962F \u3010Simple Cycles Edges\u3011"
    },
    {
        "content": "# \u9898\u76ee\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF962F)\n\n# \u9898\u89e3\n\n\u9996\u5148\u5e94\u5206\u6790\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u4e00\u6761\u8fb9\u624d\u53ea\u4f1a\u5305\u542b\u5728\u4e00\u4e2a\u7b80\u5355\u73af\u91cc\u9762\u3002\n\n\u5982\u679c\u4e24\u4e2a\u73af\u6709\u516c\u5171\u8fb9\uff0c\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u73af\u7684\u8fb9\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n- \u5bf9\u4e8e\u516c\u5171\u8fb9\uff0c\u8fd9\u6761\u8fb9\u88ab\u5de6\u3001\u53f3\u4fe9\u73af\u540c\u65f6\u5305\u542b\uff0c\u663e\u7136\u4e0d\u7b26\u9898\u610f\uff1b\n- \u5bf9\u4e8e\u975e\u516c\u5171\u8fb9\uff0c\u9996\u5148\u4ed6\u4eec\u5206\u522b\u5c5e\u4e8e\u81ea\u5df1\u7684\u73af\uff0c\u5176\u6b21\uff0c\u4ed6\u4eec\u53c8\u5728\u4e00\u4e2a\u6700\u5916\u56f4\u7684\u5927\u73af\u4e0a\uff1b\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e24\u4e2a\u73af\u6709\u516c\u5171\u8fb9\uff0c\u90a3\u4e48\u8fd9\u4fe9\u73af\u4e0a\u6ca1\u6709\u8fb9\u662f\u7b26\u5408\u9898\u610f\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u7684\u76ee\u7684\u5c31\u5f88\u660e\u786e\u4e86\u2014\u2014\u5bfb\u627e\u72ec\u7acb\u7684\u7b80\u5355\u73af\u7684\u8fb9\u6570\u5e76\u8f93\u51fa\u5176\u7f16\u53f7\u3002\n\n\u6b64\u5904\u201c\u72ec\u7acb\u201d\u662f\u6307\u4e0e\u5176\u4ed6\u73af\u6ca1\u6709\u516c\u5171\u8fb9\u3002\n\n\u90a3\u4e48\uff0c\u95ee\u9898\u53d8\u6210\u5982\u4f55\u201c\u5bfb\u627e\u201d\u72ec\u7acb\u73af\uff0c\u5206\u6790\u72ec\u7acb\u73af\u7684\u7279\u6027\u2014\u2014\u663e\u7136\uff0c\u70b9\u6570\u7b49\u4e8e\u8fb9\u6570\uff0c\u8fd9\u662f\u518d\u663e\u7136\u4e0d\u8fc7\u7684\u6761\u4ef6\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u70b9\u53cc\u5168\u90e8\u627e\u51fa\u6765\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u53cc\u518d\u5206\u522b\u5224\u65ad\u70b9\u6570\u662f\u5426\u7b49\u4e8e\u8fb9\u6570\u5373\u53ef\u3002\n\n\u4e3a\u4ec0\u4e48\u4e0d\u627e\u8fb9\u53cc\uff1f\u663e\u7136\u4e24\u4e2a\u7b80\u5355\u73af\u662f\u53ef\u4ee5\u5b58\u5728\u516c\u5171\u70b9\u7684\uff08\u533a\u5206\u516c\u5171\u8fb9\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5bfb\u627e\u7684\u5176\u5b9e\u662f\u5272\u70b9\u800c\u975e\u6865\uff0c\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u6a21\u578b\u5c31\u662f $8$ \u5b57\u7ed3\u6784\uff0c\u5728\u8fd9\u79cd\u6a21\u578b\u4e0b\u8fb9\u53cc\u5c31\u4f1a\u51fa\u95ee\u9898\uff08CF \u7684\u6570\u636e\u5e94\u8be5\u662f test#8\uff09\u3002\n\n# \u4ee3\u7801\n\n```cpp\nhttps://www.cnblogs.com/Arextre/p/13540154.html\n```\n\n",
        "postTime": 1597980926,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF962F \u3010Simple Cycles Edges\u3011"
    },
    {
        "content": "\u9996\u5148\u8dd1\u4e00\u904d ```Tarjan``` \u6c42\u51fa\u70b9\u53cc\uff0c\u63a5\u7740\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u53cc\uff0c\u6ce8\u610f\u5230\u5f53\u70b9\u6570\u6070\u597d\u7b49\u4e8e\u8fb9\u6570\u7684\u65f6\u5019\u662f\u4e00\u4e2a\u7b80\u5355\u73af\u3002\u6545\u4f7f\u7528 ```std::set``` \u7ef4\u62a4\u5e76\u8ba1\u6570\u5373\u53ef\u3002\n\nCode:\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\n#define pb push_back\n#define mp make_pair\n#define y1 y114514\n#define elif else if\n#define VPII vector <PII>\n#define y2 y1919810\ntypedef pair <int, int> PII;\ntypedef vector <int> VI;\n//#define int long long\n#define all(x) x.begin(),  x.end()\n#define lsh(i) (1 << (i))\n#define lshll(i) (1LL << (i))\n#define repn(i, n) for (int i = 1; i <= (int)n; i++)\n#define rep(i, n) for (int i = 0; i < (int)n; i++)\n#define range(i, s, t)  for (int i = s; i <= (int)t; i++)\nconst int INF = 0x3f3f3f3f;\nconst long double EPS = 1e-6;\nlong long qread() {\n    char c = getchar();\n    int neg = 1;\n    long long val = 0;\n    while (c != '-' && !isdigit(c)) \n        c = getchar();\n    if (c == '-') {\n        c = getchar(); \n        neg = -1;\n    }\n    while (isdigit(c)) {\n        val = (val << 3) + (val << 1) + c - '0';\n        c = getchar();\n    }\n    return neg * val;\n}\nconst int N = 100010;\nint bcccnt, bccID[N], bccSize[N];\nint n, m;\nVPII G[N]; VI T[N];\nvector <VPII> bcc;\nmap <PII, int> me;\nVI E[N];\nnamespace tarjan {\n    int dfn[N], tot, low[N];\n    stack <PII> s;\n    void tarjan(int u, int f = -1) {\n        dfn[u] = low[u] = ++tot;\n        int sz = 0;\n        for (auto e: G[u]) {\n            int v = e.first;\n            ++sz;\n            if (v == f) continue;\n            if (!dfn[v]) {\n                s.push(mp(u, v));\n                tarjan(v, u);\n                low[u] = min(low[u], low[v]);\n                if ((dfn[u] == 1 && sz > 1) || (dfn[u] > 1 && dfn[u] <= low[v])) {\n                    VPII mirai;\n                    PII t;\n                    while ((t = s.top()) != mp(u, v)) {\n                        mirai.pb(t);\n                        s.pop();\n                    }\n                    mirai.pb(s.top());\n                    s.pop();\n                    bcc.pb(mirai);\n                }\n            } else if (dfn[u] > dfn[v]) {\n                low[u] = min(low[u], dfn[v]);\n                s.push(mp(u, v));\n            }\n        }\n    }\n}\nvoid solve() {\n    n = qread();\n    m = qread();\n    repn(i, m) {\n        int u = qread(), v = qread();\n        G[u].pb(mp(v, i));\n        G[v].pb(mp(u, i));\n        me[mp(u, v)] = me[mp(v, u)] = i;\n    }\n    repn(i, n)\n        if (!tarjan::dfn[i]) {\n            tarjan::tarjan(i);\n            VPII eleanor;\n            while (!tarjan::s.empty()) {\n                eleanor.pb(tarjan::s.top());\n                tarjan::s.pop();\n            }\n            bcc.pb(eleanor);\n        }\n    repn(u, n)\n        for (auto e: G[u]) {\n            int v = e.first;\n            if (bccID[u] != bccID[v]) {\n                T[bccID[u]].pb(bccID[v]);\n            }\n        }\n    n = bcccnt;\n    set <int> ans;\n    for (auto component: bcc) {\n        set <int> distinct;\n        for (auto i:component) {\n            distinct.insert(i.first);\n            distinct.insert(i.second);\n        }\n        if (distinct.size() == component.size()) {\n            for (auto i: component)\n                ans.insert(me[i]);\n        }\n    }\n    printf(\"%d\\n\", (int)ans.size());\n    for (auto e: ans)\n        printf(\"%d \", e);\n    puts(\"\");\n}\nint main() {\n    int T = 1;\n    //T = qread();\n    while (T--) \n        solve();\n    return 0;\n}\n```",
        "postTime": 1599708872,
        "uid": 87696,
        "name": "Lily_White",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF962F \u3010Simple Cycles Edges\u3011"
    }
]