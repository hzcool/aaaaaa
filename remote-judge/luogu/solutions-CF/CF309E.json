[
    {
        "content": "11\uff1a30\uff0c\u8fc7\u9898\u300212\uff1a50\uff0c\u5fd8\u8bb0\u505a\u6cd5\u3002\n\n\u5403\u996d\u65f6\u4e0d\u8be5\u770b\u672a\u6765\u65e5\u8bb0\u7684\uff0cYnoj \u5bb3\u4eba\u4e0d\u6d45\uff08\u786e\u4fe1\uff09\u3002\n\n\u4ee5\u4e0a\u4e3a\u4e2a\u4eba\u5410\u69fd\u3002\n\n-----------------------\n\n# \u9898\u76ee\u5927\u610f\n\n\u4e0d\u77e5\u9053\u9898\u76ee\u7ffb\u8bd1\u662f\u4e2a\u5565\u3002\u3002\u3002\u4f46\u8ba8\u8bba\u533a\u6709\u5927\u4f6c\u7ed9\u51fa\u4e86\u7cbe\u786e\u7684\u7ffb\u8bd1\u3002\u6211\u6539\u5f97\u7b26\u5408\u9898\u76ee\u80cc\u666f\u4e00\u70b9\u653e\u4e0a\u6765\uff1a\n\n\u6bcf\u4e00\u4e2a\u7f8a\u6709\u4e00\u4e2a\u533a\u95f4 $l_i,r_i$ \uff0c\u5982\u679c\u4e24\u53ea\u7f8a\u533a\u95f4\u76f8\u4ea4\uff0c\u6211\u4eec\u79f0\u4e3a\u4e24\u53ea\u7f8a\u201c\u6346\u5728\u4e00\u8d77\u201d\u3002\n\n\u73b0\u5728\uff0c\u4f60\u9700\u8981\u91cd\u65b0\u6392\u5217 $n$ \u53ea\u7f8a\uff0c\u4f7f\u201c\u6346\u5728\u4e00\u8d77\u201d\u7684\u7f8a\u4e4b\u95f4\u7684\u6700\u5927\u8ddd\u79bb\u6700\u5c0f\uff0c\u8f93\u51fa\u65b9\u6848\u3002\n\n\u8ddd\u79bb\u5b9a\u4e49\u4e3a\u4e24\u53ea\u7f8a\u4e2d\u95f4\u7684\u7f8a\u7684\u6570\u91cf\uff08\u5176\u5b9e\u65e0\u6240\u8c13\u4e86\uff0c\u6bd5\u7adf\u53ea\u8981\u8f93\u51fa\u65b9\u6848\uff09\u3002\n\n\u63d0\u793a\uff1a\u6ce8\u610f\u4e00\u53ea\u7f8a\u53ef\u4ee5\u548c\u591a\u53ea\u7f8a\u6346\u5728\u4e00\u8d77\u3002\n\n# \u505a\u6cd5\n\n\u4e8c\u5206\u52a0\u8d2a\u5fc3\u3002\n\n\u4e8c\u5206\u7b54\u6848\uff0c\u95ee\u9898\u53d8\u6210\u4e86\u4fdd\u8bc1\u4e24\u4e2a\u76f8\u4ea4\u7684\u7f8a\u4e4b\u95f4\u8ddd\u79bb\u4e0d\u8d85\u8fc7\u4e8c\u5206\u7684\u7b54\u6848 mid \u3002\n\n\u4e0d\u59a8\u4ece\u5c0f\u5230\u5927\u9009\u62e9\u8fd9\u4e2a\u4f4d\u7f6e\u5e94\u8be5\u653e\u54ea\u4e00\u53ea\u7f8a\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u51fa\u4e00\u4e2a\u6570\u7ec4 fin ,\u8868\u793a\u6bcf\u53ea\u7f8a\u5f53\u524d\u6700\u8fdc\u80fd\u653e\u5230\u7684\u4f4d\u7f6e\u662f\u54ea\u91cc\u3002\n\n\u9996\u5148\u5224\u65ad\u65e0\u89e3\u60c5\u51b5\u3002\u8bbe\u5f53\u524d\u9009\u62e9\u5230\u4e86\u5e8f\u5217\u7684\u4f4d\u7f6e i \uff0c\u6211\u4eec\u7edf\u8ba1\u51fa\u6570\u7ec4 finc\uff0cfinc[j] \u8868\u793a fin \u6570\u7ec4\u503c\u5728\u4ece i \u5230 j \u7684\u7f8a\u7684\u4e2a\u6570\u3002\n\n\u663e\u7136\uff0c\u65e0\u89e3\u7684\u60c5\u51b5\u5c31\u662f $finc[j] > j-i+1$ \u3002\u8bc1\u660e\uff1a\u6839\u636e fin \u7684\u5b9a\u4e49\uff0c\u6bcf\u6b21\u9009\u62e9\u540e\uff0c\u9650\u5236\u53d8\u591a\uff0cfin \u4e0d\u4f1a\u53d8\u5927\u3002\u5982\u679c\u5927\u4e8e\uff0c\u5c31\u4e0d\u80fd\u5c06 fin \u5728 i~j \u4e4b\u95f4\u7684\u7f8a\u585e\u8fdb $j-i+1$ \u4e2a\u4f4d\u7f6e\u4e2d\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u8fd9\u4e2a\u4f4d\u7f6e\u653e\u54ea\u53ea\u7f8a\u3002\u6839\u636e\u65e0\u89e3\u60c5\u51b5\uff0c\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u4e2a\u9650\u5236\uff1a\u5982\u679c $finc[j]=j-i$ \uff0c\u90a3\u4e48\u6211\u4eec\u653e\u7684\u7f8a\u80af\u5b9a\u8981\u5c0f\u4e8e\u7b49\u4e8e j \u3002\u4e0d\u7136\u653e\u4e0b\u4e00\u53ea\u7f8a\u65f6\u5fc5\u5b9a\u4f1a\u5bfc\u81f4\u65e0\u89e3\u60c5\u51b5\uff08 finc\u53ef\u80fd\u4f1a\u589e\u52a0\uff0c$j-i$ \u5fc5\u5b9a\u4f1a\u51cf\u5c0f\uff09\u3002\u800c\u6211\u4eec\u53ea\u9700\u8981\u6ee1\u8db3 j \u6700\u5c0f\u7684\u9650\u5236\u5c31\u884c\u4e86\u3002\u539f\u56e0\u662f\u6ee1\u8db3\u4e86\u4ee5\u540e\u4e4b\u540e\u7684 finc \u90fd\u4f1a\u51cf\u4e00\uff0c\u907f\u514d\u4e86\u4e0a\u9762\u7684\u60c5\u51b5\u3002\n\n\u6ee1\u8db3\u4e0a\u9762\u7684\u9650\u5236\u540e\uff0c\u6211\u4eec\u8d2a\u5fc3\u5730\u9009\u53d6 r \u6700\u5c0f\u7684\u7f8a\u3002\u56e0\u4e3a\u6211\u4eec\u8981\u5c3d\u91cf\u907f\u514d\u76f8\u4ea4\uff0c\u5982\u679c\u4e00\u5f00\u59cb\u5c31\u9009\u53d6\u5927\u7684 r ,\u4e4b\u540e\u7684\u76f8\u4ea4\u6570\u53ea\u4f1a\u5427\u53d8\u591a\u4e0d\u4f1a\u53d8\u5c11\u3002\n\n\u6700\u540e\u4e00\u4e2a\u6b65\u9aa4\uff0c\u9009\u62e9\u5b8c\u70b9\u540e\uff0c\u6211\u4eec\u8981\u6839\u636e\u8fd9\u4e2a\u70b9\u66f4\u65b0\u4e4b\u540e\u7f8a\u7684 fin \u3002\u5177\u4f53\u5730\uff0c\u6211\u4eec\u8981\u4fdd\u8bc1\u4e0e\u4e4b\u76f8\u4ea4\u7684\u70b9\u6700\u8fdc\u653e\u5230\u7684\u4f4d\u7f6e\u5c0f\u4e8e\u7b49\u4e8e $i+mid$ \u3002\n\n\u4e5f\u8bb8\u6211\u8bb2\u7684\u4e0d\u591f\u6e05\u695a\uff0c\u6211\u518d\u628a check \u7684\u603b\u8fc7\u7a0b\u653e\u4e0a\u6765\uff1a\n\n```cpp\ninline bool check(int mid)\n{\n\tfor(int i = 1;i <= n;i ++) fin[i] = n, ans[i] = 0, fl[i] = 0;\n\tfor(int i = 1;i <= n;i ++)\n\t{\n\t\tint b = 0, p = 0;\n\t\tmemset(finc, 0, sizeof(finc));\n\t\tfor(int j = 1;j <= n;j ++) if(!fl[j]) finc[fin[j]] ++;//\u7edf\u8ba1 fin \u4e3a j \u7684\u7f8a\u7684\u53ea\u6570\n\t\tfor(int j = 1;j <= n;j ++) finc[j] += finc[j - 1];\t//\u5b9e\u9645\u4e0a finc \u5c31\u662f\u6c42\u4e00\u904d\u524d\u7f00\u548c\n\t\tfor(int j = i;j <= n;j ++) if(finc[j] > j - i + 1) return 0;//\u5224\u65e0\u89e3\uff08\u88ab\u6807\u8bb0\u7684\u70b9\u7edf\u8ba1 finc \u65f6\u5c31\u6ca1\u6709\u8d21\u732e\uff0c\u65e0\u9700\u989d\u5916\u5224\u65ad\uff09\n\t\tfor(int j = n;j >= i;j --) if(finc[j] == j - i + 1) b = j;//\u5bfb\u627e\u6700\u5c0f\u7684\u9650\u5236\n\t\tfor(int j = 1;j <= n;j ++) if(!fl[j] && fin[j] <= b && r[j] < r[p]) p = j;//\u5728\u9650\u5236\u5185\u5bfb\u627e\u6700\u5c0f\u7684 r\n\t\tfl[ans[i] = p] = 1;//\u6807\u8bb0\uff0c\u4e4b\u540e\u4e0d\u80fd\u518d\u9009\n\t\tfor(int j = 1;j <= n;j ++) if(l[j] <= r[p] && l[p] <= r[j]) fin[j] = min(fin[j], i + mid);//\u66f4\u65b0fin\n\t}\n\treturn 1;\n}\n```\n\n\u4e3a\u4e86\u65b9\u4fbf\u5224\u65ad\uff0c\u6211\u5728\u4e3b\u51fd\u6570\u4e2d\u5c06 $r[0] = INF$\u3002\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\u3002\n\n\n\n------------\n\n# \u540e\u8bb0\n\n\u5176\u5b9e\uff0c\u6211\u4eec\u5224\u65ad\u65e0\u89e3\u65f6\u7528\u4e86\u4e00\u4e2a\u53eb\u505a\u970d\u5c14\u5b9a\u7406\u7684\u4e1c\u897f\u3002\u4f46\u7531\u4e8e\u592a\u8fc7\u663e\u7136\uff0c\u6211\u5c31\u76f4\u63a5\u8bc1\u4e86\u4e00\u904d\u3002\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u4e86\u89e3\u3002\n\n\n\n",
        "postTime": 1665992260,
        "uid": 149219,
        "name": "_maze",
        "ccfLevel": 6,
        "title": "CF309E Sheep \u9898\u89e3"
    },
    {
        "content": "### \u9898\u610f\u63cf\u8ff0\n\u6709 $n$ \u4e2a\u533a\u95f4\uff0c\u7b2c $i$ \u4e2a\u533a\u95f4 $s_i=\\begin{bmatrix}l_i,r_i\\end{bmatrix}$\uff0c\u6c42\u4e00\u4e2a\u6392\u5217 $p$\uff0c\u4f7f\u5f97 $\\max\\limits_{1 \\le i < j \\le n}(i-j)\\times \\begin{bmatrix}s_{p_i}\\cap s_{p_j} \\not= \\emptyset\\end{bmatrix}$ \u6700\u5c0f\u3002\u8f93\u51fa\u6392\u5217 $p$\u3002\n### \u9898\u76ee\u5206\u6790\n\u770b\u5230\u6700\u5927\u503c\u6700\u5c0f\uff0c\u6211\u60f3\u5927\u90e8\u5206\u4eba\u7b2c\u4e00\u53cd\u5e94\u60f3\u5230\u7684\u662f\u4e8c\u5206\u3002\u4e8c\u5206\u5f97\u5230\u4e00\u4e2a\u6700\u5927\u503c $x$ \u4e4b\u540e\uff0c\u8003\u8651\u8d2a\u5fc3\u5730\u6392\u5217\uff1a  \n- \u4e0e\u533a\u95f4\u8986\u76d6\u95ee\u9898\u7c7b\u4f3c\uff0c\u4e3a\u4e86\u9650\u5236\u7684\u533a\u95f4\u5c3d\u91cf\u5730\u5c11\uff0c\u6240\u4ee5\u8003\u8651\u5c06\u7b26\u5408\u6761\u4ef6\u7684\u533a\u95f4\u4e2d\uff0c\u53f3\u7aef\u70b9\u5c0f\u7684\u533a\u95f4\u5148\u653e\u7f6e\uff08\u5176\u5b9e\u5de6\u7aef\u70b9\u5927\u7684\u4e5f\u884c\uff09\uff0c\u8fd9\u6837\u4e0e\u5b83\u76f8\u4ea4\u7684\u533a\u95f4\u4f1a\u8f83\u5c11\u3002\n- \u82e5\u5f53\u524d\u5904\u7406\u5230\u7b2c $i$ \u4f4d\uff0c\u5b58\u5728\u4e00\u4e2a $j$ \u4f7f\u5f97\u5728\u6392\u5217\u4e2d\u9650\u5236\u5fc5\u987b\u653e\u5728\u533a\u95f4 $\\begin{bmatrix}i,j\\end{bmatrix}$ \u4e2d\u7684\u533a\u95f4\u7684\u6570\u91cf $cnt \\le j-i+1$\uff0c\u5219\u6392\u5217\u51fa\u6765\u7684\u5fc5\u5b9a\u4f1a\u5927\u4e8e\u5f53\u524d\u8981\u6c42\u6700\u5927\u503c $x$\uff0c\u65e0\u89e3\u3002\n- \u5426\u5219\u627e\u5230\u6700\u5c0f\u7684 $j$\uff0c\u4f7f\u5f97 $cnt=i-j+1$\uff0c\u5c06\u6392\u5217\u4e2d\u5fc5\u987b\u653e\u7f6e\u5728 $\\begin{bmatrix}i,j\\end{bmatrix}$ \u7684\u6700\u4f18\u533a\u95f4\u653e\u7f6e\u5728 $i$ \u5904\uff0c\u5e76\u66f4\u65b0\u9650\u5236\u3002\n\n$cnt$ \u53ef\u4ee5\u7528\u524d\u7f00\u548c\u7edf\u8ba1\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n### Code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nnamespace r_and_w{//\u81ea\u5df1\u5199\u7684\u5feb\u8bfb\u5feb\u8f93\n    template<typename T>\n    inline void read(T &x){\n        x=0;\n        int f=1;\n        char ch=getchar();\n        while(ch>'9'||ch<'0'){\n            if(ch=='-'){\n                f=-1;\n            }\n            ch=getchar();\n        }\n        while(ch>='0'&&ch<='9'){\n            x=x*10+(ch-'0');\n            ch=getchar();\n        }\n        x=f==1?x:-x;\n    }\n    template<typename T>\n    inline void write(T x){\n        if(x<0){\n            putchar('-');\n            x=-x;\n        }\n        if(x>=10){\n            write(x/10);\n        }\n        putchar(x%10+'0');\n    }\n    template<typename T>\n    inline void write_endl(T x){\n        write(x);\n        putchar('\\n');\n    }\n    template<typename T>\n    inline void write_space(T x){\n        write(x);\n        putchar(' ');\n    }\n}\nusing namespace r_and_w;\nconst int N=2010;\nint n,l[N],r[N],ans_pos[N],pos_max[N],flag[N],cnt[N],Ans[N];\nbool check(int dis){\n    for(int i=1;i<=n;i++){\n        flag[i]=0;//flag\u8868\u793a\u533a\u95f4i\u7684\u4f4d\u7f6e\u662f\u5426\u5df2\u7ecf\u9009\u5b9a\n        pos_max[i]=n;//pos_max\u8868\u793a\u533a\u95f4i\u5728\u6392\u5217\u4e2d\u4f4d\u7f6e\u7684\u6700\u5927\u503c\n    }\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            cnt[j]=0;\n        }\n        for(int j=1;j<=n;j++){\n            if(!flag[j]){\n                cnt[pos_max[j]]++;\n            }\n        }\n        for(int j=1;j<=n;j++){\n            cnt[j]+=cnt[j-1];\n        }//\u524d\u7f00\u548c\u7edf\u8ba1cnt\n        for(int j=i;j<=n;j++){\n            if(cnt[j]>j-i+1){//\u4e0d\u5408\u6761\u4ef6\u7684\u60c5\u51b5\n                return 0;\n            }\n        }\n        int mx=0;\n        for(int j=i;j<=n;j++){\n            if(cnt[j]==(j-i+1)){\n                mx=j;\n                break;\n            }\n        }\n        int pos=n+1;\n        for(int j=1;j<=n;j++){\n            if(!flag[j]&&pos_max[j]<=mx&&r[j]<r[pos]){\n                pos=j;\n            }//\u5bfb\u627e\u6700\u4f18\u533a\u95f4\n        }\n        flag[pos]=1;\n        ans_pos[i]=pos;//\u6807\u8bb0\u82e5\u6700\u5927\u503c\u4e3adis,\u6392\u5217\u4e2d\u7b2ci\u4f4d\u7684\u533a\u95f4\u4e3a\u54ea\u4e2a\n        for(int j=1;j<=n;j++){\n            if(l[j]<=r[pos]&&l[pos]<=r[j]){\n                pos_max[j]=min(pos_max[j],i+dis);\n            }//\u66f4\u65b0\u9650\u5236\n        }\n    }\n    return 1;\n}\nsigned main(){\n    read(n);\n    r[n+1]=INT_MAX;\n    for(int i=1;i<=n;i++){\n        read(l[i]),read(r[i]);\n    }\n    int left=1,right=n-1;\n    while(left<=right){\n        int mid=(left+right)>>1;\n        if(check(mid)){\n            right=mid-1;\n            memcpy(Ans,ans_pos,sizeof(ans_pos));//\u627e\u5230\u7b54\u6848\u5e76\u66f4\u65b0\n        }\n        else{\n            left=mid+1;\n        }\n    }\n    for(int i=1;i<=n;i++){\n        write_space(Ans[i]);\n    }\n    return 0;\n}\n```\n### \u9898\u5916\u8bdd\n\u611f\u8c22\u673a\u623f\u5927\u4f6c @little_coco \u63d0\u4f9b\u7684\u601d\u8def\u3002",
        "postTime": 1666004287,
        "uid": 131610,
        "name": "luo_shen",
        "ccfLevel": 7,
        "title": "CF309E\u9898\u89e3\u517c\u505a\u9898\u5bc4\u5f55"
    }
]