[
    {
        "content": "~~\uff08\u6211\u662f\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u5b98\u65b9\u9898\u89e3\u770b\u4e0d\u61c2\u6d1b\u8c37\u9898\u89e3\u53c8\u770b\u4e86\u4e09\u4e2a\u591a\u5c0f\u65f6\u624d\u4f1a\u5199\u7684\uff09~~\n\n\u987a\u7740CF\u7684\u5b98\u65b9\u9898\u89e3\u7684\u601d\u8def\u6765\u5206\u6790\u8fd9\u4e2a\u9898\u3002\n\n\u9996\u5148\u7b2c\u4e00\uff0c\u600e\u4e48\u6837\u7b97\u5171\u7ebf\u3002\u663e\u7136\u6211\u4eec\u53ea\u7528\u523b\u753b\u5b83\u4eec\u7684$\\tan$\u503c\u5373\u53ef\u3002\u7531\u4e8e\u662f\u5728\u7b2c\u4e00\u8c61\u9650\uff0c\u6211\u4eec\u751a\u81f3\u4e0d\u7528\u7b97\u51fa\u5b83\u7684\u503c\uff0c\u53ea\u7528\u523b\u753b\u5b83\u7684\u5e95\u548c\u9ad8\u5c31\u884c\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5206\u6570\u7c7b\u6765\u5b9e\u73b0\u3002\n\n\u5176\u6b21\u5c31\u662f\u62c6\u70b9\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u70b9\u5f80\u4e0a\u5f80\u53f3\u5e73\u79fb\u5f97\u5230\u7684\u4e24\u4e2a\u65b0\u70b9\u7528\u4e00\u6761\u8fb9\u8fde\u63a5\u4e86\u8d77\u6765\u3002**\u53ef\u4ee5\u8fd9\u4e48\u8ba4\u4e3a\uff0c\u6211\u4eec\u7528\u4e00\u6761\u8fb9\u6765\u8868\u793a\u539f\u56fe\u4e2d\u7684\u4e00\u4e2a\u70b9**\u3002\u4e3a\u4e86\u65b9\u4fbf\u4e4b\u540e\u5339\u914d\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u6784\u5efa\u7684\u56fe\uff08\u4e0b\u79f0\u5f62\u5f0f\u56fe\uff09\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u8bb0\u5f55\u56de\u53bb\u5b83\u5728\u539f\u56fe\uff08\u5750\u6807\u56fe\uff09\u4e0a\u7684\u70b9\u7684\u7f16\u53f7\u3002\n\n\u90a3\u4e48\u7ecf\u8fc7\u8fd9\u6837\u7684\u5904\u7406\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\u2014\u2014\u5728\u4e00\u4e2a\u65e0\u5411\u56fe\u4e0a\uff0c\u627e\u5230\u5c3d\u53ef\u80fd\u591a\u7684\u7ec4\u8fb9\u6570\uff0c\u4f7f\u5f97\u6bcf\u7ec4\u8fb9\u7531\u4e24\u6761\u6709\u516c\u5171\u9876\u70b9\u7684\u8fb9\u7ec4\u6210\uff0c\u4e14\u6bcf\u4e00\u6761\u8fb9\u4ec5\u5728\u4e00\u4e2a\u7ec4\u4e2d\u3002\u8fd9\u5bf9\u5e94\u4e8e\u5b9e\u9645\u95ee\u9898\u4e2d\u7684\u70b9\u5e73\u79fb\uff1a\u5f62\u5f0f\u56fe\u4e2d\u7684\u4e00\u4e2a\u70b9\u4ee3\u8868\u4e00\u4e2a\u6b63\u5207\u503c\uff0c\u5f62\u5f0f\u56fe\u4e2d\u4e00\u7ec4\u8fb9\u6709\u516c\u5171\u70b9\u610f\u5473\u7740\u8fd9\u4e24\u6761\u8fb9\u5206\u522b\u5bf9\u5e94\u4e8e\u5750\u6807\u56fe\u4e2d\u7684\u4e24\u4e2a\u70b9\u671d\u7740\u5b83\u4eec\u5bf9\u5e94\u7684\u65b9\u5411\u79fb\u52a8\u4e4b\u540e\u53ef\u4ee5\u4f7f\u5f97\u5b83\u4eec\u7684\u6b63\u5207\u503c\u76f8\u540c\u3002\u56e0\u800c\u8bb0**\u5f62\u5f0f\u56fe\u4e0a\u8fd9\u6837\u7684\u516c\u5171\u70b9\u4e3a\u67a2\u8f74\u70b9**\uff0c\u5b83\u4eec\u662f\u4e00\u4e2a\u516c\u5171\u7684\u6b63\u5207\u503c\u3002\n\n\u7136\u540e\u95ee\u9898\u5c31\u8f6c\u5316\u5230\u4e86\u5f62\u5f0f\u56fe\u4e2d\u3002\uff08cross edge\u8fd9\u91cc\u6211\u53c8\u5361\u4e86\u534a\u5929\uff09CF\u9898\u89e3\u4e2d\u90a3\u4e2a\u7ed3\u8bba\u662f\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u4f7f\u7528dfs\u904d\u5386\u540c\u65f6\u7ed9\u56fe\u4e2d\u8282\u70b9\u6253\u4e0a\u6df1\u5ea6\u6807\u8bb0\u540e\uff0c\u9664\u53bbdfs\u8d70\u8fc7\u7684\u8fb9\uff0c\u5269\u4e0b\u7684\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u9876\u70b9\u5b83\u4eec\u7684\u6df1\u5ea6\u4e00\u5b9a\u4e0d\u76f8\u540c\u3002\u663e\u7136\uff0c\u5982\u679c\u5b58\u5728\u67d0\u6761\u8fb9\u4e24\u7aef\u6df1\u5ea6\u76f8\u540c\uff0c\u90a3\u4e48\u5728dfs\u904d\u5386\u5230\u5176\u4e2d\u4e00\u6bb5\u65f6\uff0c\u4e00\u5b9a\u4f1a\u8d70\u8fd9\u6761\u8fb9\u904d\u5386\u5230\u53e6\u4e00\u7aef\u3002\u56e0\u800c\uff0c\u8fd9\u6837\u6ca1\u6709\u88abdfs\u904d\u5386\u7684\u8fb9\u79f0\u4e3a**\u8fd4\u7956\u8fb9**\u3002\n\n\u5269\u4e0b\u7684\u90e8\u5206\u522b\u4eba\u8bb2\u7684\u90fd\u5f88\u6e05\u695a\u4e86\u3002\u5728dfs\u6811\u4e0a\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u4e0b\u8f96\u7684\u8fb9\uff08\u5305\u62ec\u76f4\u8fde\u513f\u5b50\u7684\u8fb9\u548c\u5b83\u7684\u540e\u4ee3\u8fd4\u7956\u5230\u5b83\u7684\u8fb9\uff09\u4e3a\u5947\u6570\uff0c\u4e5f\u5c31\u662f\u6709\u4e00\u6761\u8fb9\u6ca1\u529e\u6cd5\u5339\u914d\uff0c\u5c31\u628a\u5b83\u548c\u5b83\u7236\u4eb2\u7684\u8fb9\u626f\u8fc7\u6765\u548c\u5b83\u4e0b\u9762\u5339\u914d\uff0c\u5373\uff0c**\u5b83\u548c\u5b83\u7236\u4eb2\u76f8\u8fde\u7684\u8fb9\u7684\u67a2\u8f74\u5143\u7d20\u662f\u5b83\u81ea\u5df1**\u3002\u82e5\u4e3a\u5076\u6570\u5219\u8fd9\u6761\u8fb9\u67a2\u8f74\u5143\u7d20\u5f52\u7236\u4eb2\uff0c\u56e0\u4e3a\u5b83\u81ea\u5df1\u7684\u5b50\u6811\u90fd\u80fd\u76f8\u4e92\u5339\u914d\u3002\u81f3\u4e8e\u8fd4\u7956\u8fb9\u90a3\u5c31\u76f4\u63a5\u7ed9\u7956\u5b97\u5c31\u597d\u3002\u8fd9\u91cc\u5c31\u662f\u4e00\u4e2a\u8d2a\u5fc3\u3002\n\n~~\uff08\u6211\u662f\u4e0d\u4f1a\u544a\u8bc9\u4f60\u5c31\u8fd9\u4e48\u70b9\u4e1c\u897f\u6211\u751f\u751f\u770b\u522b\u4eba\u7684\u4ee3\u7801\u770b\u4e86\u51e0\u4e2a\u5c0f\u65f6\u624d\u770b\u660e\u767d\u7684\uff09~~\n\n\u4e0b\u9762\u9644\u4e0a\u6709\u8be6\u7ec6\u6ce8\u91ca\u7684\u4ee3\u7801\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <map>\n#include <vector>\nusing namespace std;\nlong long gcd(long long x,long long y)\n{\n    return y == 0 ? x : gcd(y, x % y);\n}\nstruct frac\n{\n    long long p;\n    long long q;  \n    bool operator <(const frac &b)const\n    {\n        return (long double)p / q < (long double)b.p / b.q;//\u8fd9\u91cc\u7cbe\u5ea6\u95ee\u9898\u582a\u5fe7\uff0c\u76f4\u63a5\u4e58\u4f1a\u70b8long long\uff0c\u7528double\u4e0d\u591f\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u9009\u62e9\u7528\u522b\u7684\u65b9\u6cd5\u5224\u65ad\u5927\u5c0f\u6216\u8005\u76f4\u63a5\u7528unordered_map\n    }\n};\nfrac norm(frac a)//\u7ea6\u5206\n{\n    long long gcd_num = gcd(a.p, a.q);\n    return (frac){a.p / gcd_num, a.q / gcd_num};\n}\nmap<frac, int> id;\nstruct line\n{\n    int from;\n    int to;\n    int id;\n    int next;\n};\nstruct line que[2000005];\nint cnt, headers[500005], tot;\nvoid add(int from,int to,int id)\n{\n    cnt++;\n    que[cnt].from = from;\n    que[cnt].to = to;\n    que[cnt].id = id;//\u8bb0\u5f55\u5f53\u524d\u8fd9\u6761\u8fb9\u662f\u5750\u6807\u56fe\u4e0a\u54ea\u4e00\u4e2a\u8282\u70b9\u4ea7\u751f\u7684\u8fd9\u6761\u8fb9\n    que[cnt].next = headers[from];\n    headers[from] = cnt;\n}\nvector<int> con[500005];//con\u8bb0\u5f55\u4e86\u67a2\u8f74\u5143\u7d20\u6240\u7ecf\u8fc7\u7684\u8fb9\u3002\u5373\uff0ccon[i]\u5185\u5b58\u50a8\u7740\u5f62\u5f0f\u56fe\u4e2d\u4ee5i\u8282\u70b9\u4e3a\u67a2\u8f74\u5143\u7d20\u7684\u8fb9\u3002\nint depth[500005];\nvoid dfs(int place,int father)\n{\n    int nownode = -1;//\u548c\u7236\u4eb2\u7684\u76f4\u8fde\u8fb9\u3002\u6ce8\u610f\uff0c\u53ef\u80fd\u6709\u91cd\u8fb9\uff0c\u591a\u4f59\u7684\u8fb9\u4e00\u5f8b\u6309\u8fd4\u7956\u8fb9\u5904\u7406\n    depth[place] = depth[father] + 1;\n    for (int i = headers[place]; i;i=que[i].next)\n    {\n        if(!depth[que[i].to])\n            dfs(que[i].to, place);\n        else\n        {\n            if(depth[que[i].to]>depth[place])//\u6df1\u5ea6\u6bd4\u5b83\u5927\uff0c\u4e00\u5b9a\u4e0d\u662f\u5b83\u7684\u8fd4\u7956\u8fb9\u3002\u8fd4\u7956\u8fb9\u9700\u8981\u5230\u7740\u8282\u70b9\u6df1\u5ea6\u5c0f\u4e8e\u5b83\u81ea\u5df1\n                continue;\n            if(que[i].to==father && nownode==-1)//\u9632\u6b62\u91cd\u8fb9\u9020\u6210\u5f71\u54cd\uff0c\u56e0\u800c\u6709nownode==-1\u7684\u5224\u65ad\n                nownode = que[i].id;//nownode\u4e3a\u8fd9\u6761\u76f4\u8fde\u8fb9\u5bf9\u5e94\u7684\u70b9\u3002\u4e4b\u540e\u4f1a\u7528\u5230\u3002\n            else\n                con[que[i].to].push_back(que[i].id);//\u4e00\u6761\u8fd4\u7956\u8fb9\u3002\u8be5\u8fb9\u7684\u67a2\u8f74\u5143\u7d20\u76f4\u63a5\u7ed9\u7956\u5b97\u3002\n        }\n    }\n    if(father)//\u5982\u679c\u662f\u6839\u8282\u70b9\uff0c\u5219\u6ca1\u6709\u5411\u4e0a\u7684\u76f4\u8fde\u8fb9\uff0c\u4e5f\u5c31\u6ca1\u6709\u8fd9\u90e8\u5206\u4e86\u3002\n    {\n        if(con[place].size()&1)//\u4ee5place\u4e3a\u67a2\u8f74\u5143\u7d20\u7684\u8fb9\u4e0d\u8db3\u4ee5\u914d\u5bf9\uff0c\u56e0\u800c\u9700\u8981\u628a\u76f4\u8fde\u8fb9\u7275\u8fc7\u6765\u914d\u5bf9\u3002\n            con[place].push_back(nownode);\n        else//\u53cd\u8fc7\u6765\uff0c\u5b50\u8282\u70b9\u5185\u90e8\u90fd\u53ef\u4ee5\u5339\u914d\uff0c\u90a3\u4e48\u8fd9\u6761\u76f4\u8fde\u8fb9\u5c31\u7ed9\u7236\u4eb2\u53bb\u5339\u914d\u3002\n            con[father].push_back(nownode);\n    }\n    return;\n}\nint main()\n{\n    int ans = 0, n;\n    frac x, y;\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n;i++)\n    {\n        scanf(\"%lld%lld%lld%lld\", &x.p, &x.q, &y.p, &y.q);\n        x = norm(x);\n        y = norm(y);\n        frac left = (frac){y.p * x.q, (x.p + x.q) * y.q}, up = (frac){(y.p + y.q) * x.q, x.p * y.q};\n        if(!id[left])//\u8bb0\u5f55\u79fb\u52a8\u540e\u7684\u70b9\u5728\u5f62\u5f0f\u56fe\u4e2d\u7684\u7f16\u53f7\n            id[left] = ++tot;\n        if(!id[up])\n            id[up] = ++tot;\n        add(id[left], id[up], i);\n        add(id[up], id[left], i);\n    }\n    for (int i = 1; i <= tot; i++)\n        if(!depth[i])//\u6ce8\u610f\u56fe\u4e0d\u4e00\u5b9a\u8054\u901a\uff0c\u56e0\u800c\u9700\u8981\u5bf9\u6bcf\u4e00\u4e2a\u8fde\u901a\u5b50\u56fe\u90fd\u8981\u8fdb\u884c\u64cd\u4f5c\u3002\n            dfs(i, 0);\n    for (int i = 1; i <= tot; i++)\n        ans += con[i].size() / 2;//\u5339\u914d\u4e2a\u6570\u4e3a\u5404\u67a2\u8f74\u5143\u7d20\u4e0b\u8f96\u7ebf\u6bb5\u6761\u6570/2\n    printf(\"%d\\n\", ans);\n    for (int i = 1; i <= tot;i++)\n        for (int j = 0; j + 1 < con[i].size(); j += 2)\n            printf(\"%d %d\\n\", con[i][j], con[i][j + 1]);//\u5bf9\u4e8e\u4e00\u4e2a\u67a2\u8f74\u5143\u7d20\uff0c\u5176\u7ebf\u6bb5\u5339\u914d\u6570\u76ee\u662f\u4e00\u5b9a\u7684\uff0c\u56e0\u800c\u53ef\u4ee5\u968f\u4fbf\u5206\u914d\u3002\n    return 0;\n}\n```\n",
        "postTime": 1620053226,
        "uid": 80026,
        "name": "walk_alone",
        "ccfLevel": 3,
        "title": "CF1519E Off by One \u9898\u89e3"
    },
    {
        "content": "\u70b9 $A$ \u4e0e $(0,0)$\uff0c$B$ \u5171\u7ebf\u7684\u5145\u8981\u6761\u4ef6\u662f $\\frac{y_A}{x_A}=\\frac{y_B}{x_B}$\uff0c\u5373 $k_{OA}=k_{OB}$\u3002\u53c8\u8003\u8651\u5230\u9898\u76ee\u63d0\u51fa\u523b\u753b\u659c\u7387\u76f8\u7b49\u53cc\u70b9\u95f4\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u4e0d\u59a8\u628a\u6240\u6709\u659c\u7387\u76f8\u540c\u7684\u70b9\u770b\u4f5c\u4e00\u4e2a\u3002\u518d\u8003\u8651\u523b\u753b\u70b9\u7684\u79fb\u52a8\uff0c\u7531\u4e8e\u4e0e\u5171\u7ebf\u7684\u70b9\u662f\u79fb\u52a8\u540e\u4e24\u8005\u4e4b\u95f4\u7684\u54ea\u4e00\u8005\u65e0\u59a8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u79fb\u52a8\u540e\u7684\u4e24\u70b9\u6240\u4ee3\u8868\u7684\u659c\u7387\u96c6\u5408\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u5728\u4e00\u5f20\u65e0\u5411\u56fe\u4e2d\uff0c\u5220\u9664\u6216\u4e00\u6761\u4e09\u70b9\u4e8c\u8fb9\u7684\u94fe\uff0c\u6216\u4e00\u4e2a\u4e8c\u70b9\u4e8c\u8fb9\u7684\u73af\uff0c\u8be2\u95ee\u6700\u591a\u53ef\u4ee5\u5220\u9664\u591a\u5c11\u6b21\uff0c\u5e76\u7ed9\u51fa\u53ef\u884c\u65b9\u6848\u3002\u90a3\u4e48\u7b54\u6848\u4e2d\u6700\u5927\u503c\u7684\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u62ff\u51fa\u6765\uff0c\u5373 $\\lfloor\\frac{\\text{\\# edges}}{2}\\rfloor$\u3002\n\n\u8bba\u5220\u8fb9\u7684\u987a\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u51fa\u8f6c\u5316\u540e\u56fe\u7684\u4efb\u4e00\u751f\u6210\u6811\uff0c\u5e76\u8003\u8651\u975e\u6811\u8fb9\u3002\u8003\u8651\u4efb\u4e00\u7ed3\u70b9 $x$\uff0c\u8bbe\u6709\u975e\u6811\u8fb9\u8fb9 $\\lang x,y\\rang$\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 $y$ \u7ed9\u201c\u62d6\u4e0b\u53bb\u201d\uff0c\u610f\u5373\u65b0\u5efa\u4e00\u4e2a\u70b9\uff0c\u5e76\u5c06 $x$ \u8fde\u5411\u8be5\u70b9\u3002\u5176\u6b63\u786e\u6027\u5e76\u975e\u81ea\u660e\uff0c\u4f46\u662f\u8003\u8651\u6df1\u5ea6\u53ef\u4ee5\u7b80\u5355\u8bc1\u660e\u3002\u81f3\u4e8e\u7b54\u6848\u7684\u6c42\u89e3\u8fc7\u7a0b\uff0c\u53c2\u89c1\u5e38\u89c1 trick \u6811\u7684\u6700\u5927\u5339\u914d\uff08\u4f46\u662f\u7565\u6709\u4e0d\u540c\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\uff09\u3002\n\n\u8bf4\u4e00\u4e0b\u5982\u4f55\u7cbe\u7b80\u5b9e\u73b0\uff0c\u4f60\u7684\u4ee3\u7801\u903b\u8f91\u53ef\u4ee5\u4e0d\u662f\u300c\u5efa\u51fa\u539f\u56fe - \u5f97\u5230\u751f\u6210\u6811 - \u65b0\u5efa\u8282\u70b9 - \u6c42\u5339\u914d\u300d\uff0c\u66f4\u52a0\u4f18\u79c0\u7684\u903b\u8f91\u53ef\u4ee5\u662f\u300c\u5efa\u51fa\u539f\u56fe\u5e76\u901a\u8fc7\u52a8\u6001\u7ef4\u62a4\u8fde\u901a\u6027\u65b0\u5efa\u8282\u70b9 - \u5728\u6c42\u51fa\u751f\u6210\u6811\u7684\u540c\u65f6\u83b7\u5f97\u6df1\u5ea6\u4fe1\u606f - \u6c42\u5339\u914d\u300d\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nint n, rn, uset[500100], head[500100], to[1000100], nxt[1000100], ent;\nll gcd(ll x, ll y) {\n    return y == 0 ? x : gcd(y, x%y);\n}\nint ldr(int x) {\n    while (x != uset[x]) x = uset[x] = uset[uset[x]];\n    return x;\n}\nbool sm(int x, int y) {\n    return ldr(x) == ldr(y);\n}\nvoid mrg(int x, int y) {\n    if (ldr(x) != ldr(y)) {\n        uset[ldr(y)] = ldr(x);\n    }\n}\nstruct frac {\n    ll p, q;\n    frac() {}\n    explicit frac(ll a, ll b) : p(a), q(b) {\n        norm(*this);\n    }\n    bool operator<(const frac& o) const {\n        return p < o.p || (p == o.p && q < o.q);\n    }\n    void norm(frac& x) {\n        ll g = gcd(x.p, x.q);\n        x.p /= g, x.q /= g;\n    }\n};\nmap<frac, int> mp;\nvoid add(int x, int y) {\n    to[++ent] = y, nxt[ent] = head[x], head[x] = ent;\n}\nbool vis[500100];\nint dep[500100], fa[500100], eid[500100], mxd;\nset<int> ch[500100], sd[500100];\nvoid dfs(int x) {\n    mxd = max(mxd, dep[x]);\n    vis[x] = 1;\n    sd[dep[x]].insert(x);\n    for (int i = head[x], y; i; i = nxt[i]) {\n        if (vis[y = to[i]]) {\n            continue;\n        }\n        fa[y] = x, dep[y] = dep[x]+1;\n        ch[x].insert(y);\n        eid[y] = (i+1)/2;\n        dfs(y);\n    }\n}\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin >> n;\n    for (int i = 1; i <= n; ++i) {\n        ll a, b, c, d;\n        cin >> a >> b >> c >> d;\n        frac cur((a+b)*d, b*c);\n        if (!mp.count(cur)) {\n            ++rn;\n            mp[cur] = uset[rn] = rn;\n        }\n        int u = mp[cur], v;\n        cur = frac(a*d, b*(c+d));\n        if (!mp.count(cur)) {\n            ++rn;\n            mp[cur] = uset[rn] = rn;\n        }\n        v = mp[cur];\n        if (sm(u, v)) {\n            v = ++rn;\n        }\n        else mrg(u, v);\n        add(u, v), add(v, u);\n    }\n    for (int i = 1; i <= rn; ++i) {\n        if (!vis[i]) dfs(i);\n    }\n    vector<pair<int, int>> ans;\n    for (int d = mxd; d >= 1; --d) {\n        for (int x : sd[d]) {\n            if (int(ch[fa[x]].size()) >= 2) {\n                ch[fa[x]].erase(x);\n                int bro = *ch[fa[x]].begin();\n                ch[fa[x]].erase(bro), sd[dep[bro]].erase(bro);\n                ans.emplace_back(eid[x], eid[bro]);\n            }\n            else if (fa[fa[x]]) {\n                ch[fa[x]].erase(x);\n                ch[fa[fa[x]]].erase(fa[x]);\n                sd[dep[fa[x]]].erase(fa[x]);\n                ans.emplace_back(eid[x], eid[fa[x]]);\n            }\n        }\n    }\n    cout << ans.size() << \"\\n\";\n    for (auto it : ans) {\n        cout << it.first << \" \" << it.second << \"\\n\";\n    }\n}\n```",
        "postTime": 1656414901,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u5509\u5509\u5509\u5509\u54ce\u54ce\u54ce\u54ce\u54c0\u54c9\u60b2\u54c9\u5c1b\u54c9\u5f58\u54c9\u54d5\u54c9\u5693\u54c9\uff01\uff01\uff01\uff01\uff01"
    },
    {
        "content": "# \u58f9\u3001\u9898\u76ee\u63cf\u8ff0 &para;\n\n[\u4f20\u9001\u95e8 to CF](http://codeforces.com/contest/1519/problem/E)\n\n# \u8d30\u3001\u9898\u89e3 &para;\n\n\u5bf9\u4e8e\u4e00\u4e9b\u70b9 $(x_i,y_i)$\uff0c\u5982\u679c\u5b83\u4eec\u7684\u659c\u7387\u76f8\u540c\uff0c\u5373\u8bf4\u660e $({x_i\\over k},{y_i\\over k})$ \u4e5f\u662f\u76f8\u540c\u7684\uff08\u5176\u4e2d $k\\overset{\\Delta}=\\gcd(x_i,y_i)$\uff09\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c06\u4e00\u4e2a\u70b9 $(x,y)$ \u80fd\u591f\u5230\u8fbe\u7684\u4e24\u4e2a\u70b9\u8fde\u8d77\u6765\uff0c\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\u4e3a\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7\uff0c\u5373\u6211\u4eec\u5c06\u76f8\u540c\u7684\u659c\u7387\u5f53\u6210\u70b9\uff0c\u800c\u5c06\u539f\u6765\u7684\u70b9\u5f53\u6210\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\uff1a\n\n>\u7ed9\u4e00\u4e2a\u65e0\u5411\u56fe\uff08\u6216\u8bb8\u6709\u5f88\u591a\u8fde\u901a\u5757\uff09\uff0c**\u4e00\u4e2a\u5339\u914d\u4e3a\u4e00\u5bf9\u5171\u7528\u81f3\u5c11\u4e00\u4e2a\u9876\u70b9\u7684\u8fb9**\uff0c\u73b0\u5728\u4f60\u8981\u627e\u51fa\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u5339\u914d\u6570\u91cf\u3002\n\n\u8d2a\u5fc3\u5730\u60f3\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6211\u4eec\u671f\u671b\u5730\u5339\u914d\u6570\u91cf\u5e94\u8be5\u662f $\\lfloor{m\\over 2}\\rfloor$\uff0c\u5e76\u4e14\u4e00\u5b9a\u80fd\u591f\u8fbe\u5230\u3002\n\n>\u7b80\u8981\u8bc1\u660e\u4e00\u4e0b\uff1a\u5bf9\u4e8e\u8fd9\u5f20\u56fe\uff0c\u904d\u5386\u51fa\u4e00\u4e2a $\\tt dfs$ \u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff08\u4e0d\u8bba\u662f\u6811\u8fb9\u8fd8\u662f\u975e\u6811\u8fb9\uff09\uff0c\u5f3a\u5236\u5c06\u5176\u770b\u4f5c\u4e3a\u4ece\u6df1\u5ea6\u5c0f\u7684\u8fde\u5411\u6df1\u5ea6\u5927\u7684\uff08\u5373\u5f80\u4e0b\u8d70\uff09\uff0c\u90a3\u4e48\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5ea6\u6570\u4e3a $d$ \u7684\u70b9\uff0c\uff0c\u6211\u4eec\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a\n>\n>- \u82e5 $d=2k$\uff0c\u90a3\u4e48\u5b83\u81ea\u5df1\u5185\u90e8\u5c31\u53ef\u4ee5\u641e\u5b9a\uff1b\n>- \u82e5 $d=2k+1$\uff0c\u90a3\u4e48\u5b83\u81ea\u5df1\u5185\u90e8\u641e\u5b9a\u4e4b\u540e\uff0c\u8ba9\u5b83\u5269\u4e0b\u7684\u8fb9\u548c\u5b83\u7236\u4eb2\u7684\u4e00\u6761\u8fb9\u518d\u6784\u6210\u4e00\u4e2a\u5339\u914d~~\u8ba9\u4f60\u7236\u4eb2\u7ed9\u4f60\u6536\u5c3e\uff1f~~\uff1b\n>  \u6bd4\u8f83\u7279\u522b\u7684\u662f <ruby>\u6811<rt>gu</rt></ruby> <ruby>\u6839<rp>(</rp><rt>er</rt><rp>)</rp></ruby>\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u7236\u4eb2\uff0c\u6240\u4ee5\u5b83\u5982\u679c\u5269\u4e0b\u4e00\u6761\u8fb9\uff0c\u5c31\u6ca1\u4eba\u7ed9\u4ed6\u6536\u5c3e\u4e86\u3002\n\n\u5728\u4ee3\u7801\u5b9e\u73b0\u65f6\uff0c\u5b9a\u4e49 $\\tt match[i]$ \u8868\u793a $i$ \u70b9\u5c1a\u672a\u88ab\u5339\u914d\u7684\u8fb9\u7684\u7f16\u53f7\u662f\u591a\u5c11\uff0c\u7279\u522b\u7684\uff0c\u82e5\u4e3a $0$ \u5373\u6ca1\u6709\u5269\u4f59\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e $({x_i\\over k},{y_i\\over k})$ \u7684\u79bb\u6563\uff0c\u6709\u66f4\u597d\u7684\u505a\u6cd5\uff0c\u8003\u8651 $({a\\over b},{c\\over d})$ \u7684\u659c\u7387\u5b9e\u9645\u4e0a\u548c $(ad,cb)$ \u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\uff0c\u5bf9\u4e8e $({a\\over b}+1,{c\\over d})$ \u6216\u8005 $({a\\over b},{c\\over d}+1)$ \u4e5f\u662f\u4e00\u6837\uff0c\u53ea\u9700\u8981\u540c\u65f6\u4e58\u4e0a $bd$ \u5c31\u884c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\uff0c\u74f6\u9888\u5728 $\\tt hash$.\n\n# \u53c1\u3001\u53c2\u8003\u4ee3\u7801 &para;\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<map>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\n#define Endl putchar('\\n')\n#define mp(a, b) make_pair(a, b)\n#define rep(i, l, r) for(int i=(l), i##_end_=(r); i<=i##_end_; ++i)\n#define fep(i, l, r) for(int i=(l), i##_end_=(r); i>=i##_end_; --i)\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<long long, long long> pll;\ntemplate<class T>inline T fab(T x){ return x<0? -x: x; }\ntemplate<class T>T gcd(T x, T y){ return y? gcd(y, x%y): x; }\ntemplate<class T>inline T readin(T x){\n\tx=0; int f=0; char c;\n\twhile((c=getchar())<'0' || '9'<c) if(c=='-') f=1;\n\tfor(x=(c^48); '0'<=(c=getchar()) && c<='9'; x=(x<<1)+(x<<3)+(c^48));\n\treturn f? -x: x;\n}\n\nconst int maxn=200000<<1;\n\nstruct edge{\n    int to, nxt, id;\n    edge(){}\n    edge(int T, int N, int I): to(T), nxt(N), id(I){}\n}e[maxn<<1|1];\nint tail[maxn+5], ecnt;\ninline void add_edge(int u, int v, int id){\n    // printf(\"add_edge :> u == %d, v == %d, id == %d\\n\", u, v, id);\n    e[ecnt]=edge(v, tail[u], id); tail[u]=ecnt++;\n    e[ecnt]=edge(u, tail[v], id); tail[v]=ecnt++;\n}\n\nint n;\nmap<pll, int>htable;\nint ncnt;\ninline int getid(ll x, ll y){\n    ll d=gcd(x, y);\n    pll cur=mp(x/d, y/d);\n    if(!htable[cur]) htable[cur]=++ncnt;\n    return htable[cur];\n}\n\ninline void input(){\n    memset(tail, -1, sizeof tail);\n    n=readin(1);\n    int a, b, c, d, u, v;\n    rep(i, 1, n){\n        a=readin(1), b=readin(1), c=readin(1), d=readin(1);\n        u=getid(1ll*(a+b)*d, 1ll*c*b);\n        v=getid(1ll*a*d, 1ll*(c+d)*b);\n        add_edge(u, v, i);\n    }\n}\n\nvector<pii>ans;\n\nint vis[maxn+5], match[maxn+5];\nvoid dfs(int u){\n    vis[u]=1;\n    for(int i=tail[u], v, nde; ~i; i=e[i].nxt){\n        v=e[i].to, nde=e[i].id;\n        e[i].to=e[i^1].to=0;\n        if(v){\n            if(!vis[v]) dfs(v);\n            if(match[v]){\n                ans.push_back(mp(nde, match[v]));\n                match[v]=0;\n            }\n            else if(match[u]){\n                ans.push_back(mp(nde, match[u]));\n                match[u]=0;\n            }\n            else match[u]=nde;\n        }\n    }\n}\n\nsigned main(){\n    input();\n    rep(i, 1, ncnt) if(!vis[i])\n        dfs(i);\n    printf(\"%d\\n\", (int)ans.size());\n    for(int i=0, siz=ans.size(); i<siz; ++i)\n        printf(\"%d %d\\n\", ans[i].fi, ans[i].se);\n\treturn 0;\n}\n```\n\n# \u8086\u3001\u7528\u5230 \u306e Trick\n\n\u8fd9\u662f \u201c\u6700\u5927\u8fb9\u5339\u914d\u201d\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u8d2a\u5fc3\u601d\u8def\u6765\u6784\u9020\u3002\n\n\u53e6\u5916\uff0c\u6709\u4e2a\u601d\u60f3\uff1a\u6709\u4e9b\u5b50\u8282\u70b9\u6b20\u4e0b\u7684\u503a\uff0c\u53ef\u4ee5\u7559\u5230\u7236\u8282\u70b9\u6765\u8fd8\u3002\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u503a\u90fd\u53ef\u4ee5\u5b50\u503a\u7236\u8fd8\u7f62\uff1f",
        "postTime": 1620049262,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "[CF1519E]Off by One"
    },
    {
        "content": "[$\\Large\\texttt{CF1519E}$](https://www.luogu.com.cn/problem/CF1519E)\n\n## \u9898\u610f\n\n\u7ed9\u5b9a $n$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9 $(x_i,y_i)$ \u53ef\u4ee5\u53d8\u6210 $(x_i + 1, y_i)$ \u6216 $(x_i, y_i + 1)$\uff0c\u6781\u89d2\u76f8\u540c\u7684\u4e24\u4e2a\u70b9\u53ef\u4ee5\u4e24\u4e24\u5339\u914d\uff0c\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u5339\u914d\u4e00\u6b21\uff0c\u95ee\u6700\u5927\u7684\u5339\u914d\u6570\u91cf\u662f\u591a\u5c11\u3002\n\n## \u601d\u8def\n\n$\\Large\\texttt{stO George1123}$\n\n\u9996\u5148\u5224\u65ad\u6781\u89d2\u76f8\u540c\u53ef\u4ee5\u7528 $\\frac{x}{y}$ \u89e3\u51b3\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u6781\u89d2\u6807\u53f7\uff0c\u800c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4f5c\u5b83\u662f\u628a\u4e24\u4e2a\u4e0d\u540c\u7684\u6781\u89d2\u8fde\u8fb9\uff0c\u800c\u95ee\u9898\u53d8\u6210\u4e86\uff1a\n\n\u7ed9\u5b9a\u4e00\u5f20\u56fe $G$\uff0c\u5bf9\u4e8e $E\\in G$ \u4e24\u6761\u8fb9 $e_1$\uff0c$e_2$ \u53ef\u5339\u914d\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u8fde\u63a5\u4e00\u4e2a\u76f8\u540c\u7684\u70b9 $v$\uff0c\u6c42\u6bcf\u6761\u8fb9\u552f\u4e00\u5339\u914d\u7684\u6700\u5927\u5339\u914d\u6570\u91cf\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\u3002\n\n\u6211\u4eec\u5bf9\u8fd9\u4e2a\u56fe\u4e0d\u91cd\u590d\u904d\u5386\u4e00\u904d\uff0c\u5f97\u5230\u4e00\u4e2a DFS \u6811\u3002\n\n\u90a3\u4e48\u6211\u4eec\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\u8003\u8651\uff0c\u5148\u4e0d\u8003\u8651\u8fd9\u4e2a\u70b9\u8fde\u5411\u7236\u4eb2\u7684\u8fb9\uff0c\u5982\u679c\u8fde\u63a5\u5176\u7684\u8fb9\u7684\u6570\u91cf\u662f\u5076\u6570\u4e2a\uff0c\u90a3\u4e48\u76f4\u63a5\u4e24\u4e24\u5339\u914d\u6389\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5229\u7528\u7236\u4eb2\u7684\u8fb9\u5e73\u8861\u8fd9\u4e2a\u5947\u5076\u6027\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5339\u914d\u6570\u6700\u5927\uff0c**\u56e0\u4e3a\u6bcf\u4e2a\u70b9\uff08\u9664\u4e86\u6839\u8282\u70b9\uff09\u90fd\u6709\u4e00\u6761\u8fde\u5411\u7236\u4eb2\u7684\u8fb9\u5e73\u8861\u5947\u5076\u6027\uff0c\u4e14\u5fc5\u7136\u6ca1\u88ab\u7528\u8fc7\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff08\u9664\u4e86\u6839\u8282\u70b9\uff09\uff0c\u8fde\u63a5\u5b83\u7684\u8fb9\u90fd\u80fd\u591f\u4e24\u4e24\u5339\u914d\u4e0d\u5269\uff08\u9664\u8fde\u63a5\u7684\u7236\u8fb9\uff09**\u3002\n\n\u6ce8\u610f\u56fe\u53ef\u80fd\u4e0d\u8fde\u901a\u3002\n\n\u7b54\u6848\u5c31\u662f $\\sum{|E_i| - |E_i|\\texttt{ mod }2}$\u3002\n\n## \u4ee3\u7801\n\n\u7531\u4e8e\u5b9e\u73b0\u8fc7\u4e8e\u5783\u573e\uff0c\u8bf7\u8c28\u614e\u53c2\u8003QwQ\u3002\n\n```cpp\nint a, top, sum;\nbool vis[N + 5], use[N + 5];\nstruct road {\n\tint v, id;\n\tbool fa;\n};\nstruct frac {\n\tLL x, y;\n\tbool operator<(const frac& o) const {return 1.0L * x * o.y < 1.0L * o.x * y;}\n\tbool operator==(const frac& o) const {return x == o.x && y == o.y;}\n} q1[N + 5], q2[N + 5], q[N + 5];\nfrac f(LL n, LL m) {\n\tint gcd = __gcd(n, m);\n\treturn (frac) {n / gcd, m / gcd};\n}\nvector<road> st[N + 5];\nvector<int> ans[N + 5];\n\nvoid dfs(int n, int fa) {\n\tvis[n] = 1;\n\tint tmp = 0;\n\tbool p = 0;\n\trep(i, 0, siz(st[n]) - 1) {\n\t\troad v = st[n][i];\n\t\tif (v.v == fa && !p) {\n\t\t\tst[n][i].fa = 1, p = 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (vis[v.v]) {\n\t\t\ttmp += !use[v.id];\n\t\t\tcontinue;\n\t\t}\n\t\tdfs(v.v, n);\n\t\ttmp += !use[v.id];\n\t}\n\tif (tmp & 1) {\n\t\trep(i, 0, siz(st[n]) - 1) {\n\t\t\troad v = st[n][i];\n\t\t\tif (use[v.id]) continue;\n\t\t\tans[n].PB(v.id);\n\t\t\tuse[v.id] = 1;\n\t\t}\n\t}\n\telse {\n\t\trep(i, 0, siz(st[n]) - 1) {\n\t\t\troad v = st[n][i];\n\t\t\tif (use[v.id] || v.fa) continue;\n\t\t\tans[n].PB(v.id);\n\t\t\tuse[v.id] = 1;\n\t\t}\n\t}\n\tsum += siz(ans[n]) / 2;\n}\nsigned main() {\n\t// freopen(\"in1.in\", \"r\", stdin);\n\t// freopen(\"out.out\", \"w\", stdout);\n\tLL x, xx, y, yy;\n\ta = read();\n\trep(i, 1, a) {\n\t\tx = read();\n\t\txx = read();\n\t\ty = read();\n\t\tyy = read();\n\t\tq1[i] = f(y * xx, yy * (x + xx));\n\t\tq2[i] = f((y + yy) * xx, yy * x);\n\t\tq[++top] = q1[i];\n\t\tq[++top] = q2[i];\n\t}\n\tsort(q + 1, q + top + 1);\n\ttop = unique(q + 1, q + top + 1) - q - 1;\n\trep(i, 1, a) {\n\t\tx = lower_bound(q + 1, q + top + 1, q1[i]) - q;\n\t\ty = lower_bound(q + 1, q + top + 1, q2[i]) - q;\n\t\tst[x].PB((road) {y, i, 0});\n\t\tst[y].PB((road) {x, i, 0});\n\t}\n\trep(i, 1, top) if (!vis[i]) dfs(i, 0);\n\tprintf(\"%lld\\n\", sum);\n\trep(i, 1, top) {\n\t\tint lst = 0;\n\t\trep(j, 0, siz(ans[i]) - 1) {\n\t\t\tif (lst) {\n\t\t\t\tprintf(\"%lld %lld\\n\", lst, ans[i][j]);\n\t\t\t\tlst = 0;\n\t\t\t}\n\t\t\telse lst = ans[i][j];\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1620010704,
        "uid": 184549,
        "name": "RedreamMer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1519E \u3010Off by One\u3011"
    },
    {
        "content": "## CF1519E\n\n> \u9898\u610f:\u5e73\u9762\u4e0a\u6709$n$\u4e2a\u70b9,\u6bcf\u4e2a\u70b9\u5750\u6807\u4e3a\u4e00\u4e2a\u975e\u8d1f\u5206\u6570\u3002\u6bcf\u4e2a\u70b9**\u5fc5\u987b**\u9009\u62e9\u5411\u4e0a\u6216\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d(y+1\u6216x+1)\u3002\u5bf9\u4e8e\u79fb\u52a8\u540e\u7684\u70b9\uff0c\u6bcf\u6b21\u53ef\u4ee5\u9009\u62e9\u4e0e(0,0)\u4e09\u70b9\u5171\u7ebf\u7684\u70b9\u5bf9(\u91cd\u5408\u4e5f\u7b97)\uff0c\u5c06\u8be5\u70b9\u5bf9\u7684\u70b9\u9664\u53bb\u3002\u95ee\u5728\u6700\u4f18\u65b9\u6848\u4e0b\u6700\u591a\u80fd\u9664\u53bb\u591a\u5c11\u5bf9\u70b9\uff08\u6bcf\u4e2a\u70b9\u53ea\u80fd\u88ab\u9664\u53bb\u4e00\u6b21\uff09\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u82e5\u662f$A$,$B$,$(0,0)$\u4e09\u70b9\u5171\u7ebf\uff0c\u5219\u8bf4\u660e$\\frac{\\overrightarrow A}{|\\overrightarrow  A|}=\\frac{\\overrightarrow B}{|\\overrightarrow  B|}$\n\n\u6240\u4ee5\u6211\u4eec\u4e0d\u96be\u8f6c\u6362\u9898\u610f\uff1a\u6211\u4eec\u4ee4\u70b9$i$\u5411\u4e0a\u79fb\u52a8\u540e\u5f62\u6210\u7684\u5411\u91cf\u6240\u6210\u7684\u5355\u4f4d\u5411\u91cf\u4e3a$\\alpha_i$,\u5411\u53f3\u79fb\u52a8\u6240\u6210\u7684\u5355\u4f4d\u5411\u91cf\u4e3a$\\beta_i$.\u5219\u6211\u4eec\u5728$\\alpha_i$\u4e0e$\\beta_i$\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u4ee4\u56fe$G=(\\{\\alpha_i|i\\in[1,n]\\cap N^+\\}\\cup \\{\\beta_i|i\\in[1,n]\\cap N^+\\},\\{(\\alpha_i,\\beta_i)|i\\in[1,n]\\cap N^+\\})$\n\n\uff0c\u5219\u8981\u6c42\u5c06\u6bcf\u6761\u8fb9\u5206\u914d\u7ed9\u7aef\u70b9\u4e2d\u7684\u4e00\u4e2a\uff0c\u8bbe\u6bcf\u4e2a\u7aef\u70b9$i$\u5206\u914d\u5f97\u7684\u8fb9\u6570\u4e3a$v_i$,\u5219\u7b54\u6848$Ans=f(G)=\\sum_{i\\in V}\\lfloor\\frac{v_i}{2}\\rfloor$\n\n\u9898\u610f\u8f6c\u6362\u540e\u5219\u53d8\u6210\u4e86\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\n\n\u9996\u5148\u6211\u4eec\u4e0d\u96be\u5f97\u5230\u5bf9\u4e8e\u539f\u56fe\u7684\u4efb\u610f\u6781\u5927\u8054\u901a\u5bfc\u51fa\u5b50\u56fe$G'$,\u8fb9\u96c6$V'$,$f(G')\\leq \\lfloor \\frac{|V'|}{2}\\rfloor$\n\n\u7136\u540e\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u53d8\u6210\u4e86\u6784\u9020\u4e00\u79cd\u6ee1\u8db3\u6761\u4ef6\u7684\u65b9\u6848\n\n\u9996\u5148\u5bf9\u4e8e\u6bcf\u4e2a\u8054\u901a\u5757\uff0c\u6211\u4eec\u8fdb\u884c$dfs$\u904d\u5386\uff0c\u8fd9\u91cc\u6709\u4e2a\u7ed3\u8bba\uff0c\u539f\u56fe\u9664\u53bb$dfs$\u6811\u8fb9\u5f62\u6210\u7684\u751f\u6210\u5b50\u56fe\u4e0a\u4e0d\u5b58\u5728$\\tt cross\\space edge$,\u5373\u5269\u4f59\u7684\u8fb9\u4e00\u5b9a\u4e3a\u8fd4\u7956\u8fb9\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u6709\u4e86\u6700\u4f18\u7b56\u7565\uff0c\u5f53$dfs$\u5230\u70b9$n$\u65f6\uff0c\u82e5\u5f53\u524d$n$\u5df2\u7ecf\u6709\u7684\u8fb9\u4e3a\u5947\u6570\uff0c\u5219\u5c06\u7236\u8fb9\u7ed9\u81ea\u5df1\uff0c\u5426\u5219\u7ed9\u7236\u4eb2\uff0c\u8fd4\u7956\u8fb9\u5219\u5168\u90e8\u7ed9\u7956\u5148 ~~\uff08\u5e26\u5b5d\u5b50\uff09~~\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u6837\u81f3\u591a\u5728\u603b\u8fb9\u6570\u4e3a\u5947\u6570\u65f6\u5728$dfs$\u6811\u6839\u5904\u6d6a\u8d39\u4e00\u6761\u8fb9\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n# define ll long long\n# define read read1<ll>()\n# define Type template<typename T>\nType T read1(){\n\tT t=0;\n\tchar k;\n\tbool vis=0;\n\tdo (k=getchar())=='-'&&(vis=1);while('0'>k||k>'9');\n\twhile('0'<=k&&k<='9')t=(t<<3)+(t<<1)+(k^'0'),k=getchar();\n\treturn vis?-t:t;\n}\n# define fre(k) freopen(k\".in\",\"r\",stdin);freopen(k\".out\",\"w\",stdout)\nint s,tot,h[500005];\nll Gcd(ll x,ll y){while(y)swap(x%=y,y);return x;}\nvector<int>G[500005],V[500005];\nmap<pair<ll,ll>,int>ma;\npair<ll,ll> mul(ll x,ll y,ll z,ll w){\n\tx*=w;y*=z;swap(x,y);z=Gcd(x,y);\n\treturn make_pair(x/z,y/z);\n}\nvector<int>ans[500005];\nvoid dfs(int n,int fa){\n\th[n]=h[fa]+1;vector<int>tem;\n\tint lau=-1;\n\tfor(int i=0;i<G[n].size();++i)\n\t\tif(h[G[n][i]]){\n\t\t\tif(h[G[n][i]]>h[n])continue;\n\t\t\tif(G[n][i]==fa&&!~lau)lau=i;\n\t\t\telse tem.push_back(i);\n\t\t}else dfs(G[n][i],n);\n\tif(fa)if(ans[n].size()&1)ans[n].push_back(V[n][lau]);\n\t\telse ans[fa].push_back(V[n][lau]);\n\tfor(int i=0;i<tem.size();++i)\n\t\tans[G[n][tem[i]]].push_back(V[n][tem[i]]);\n}\nint main(){\n\ts=read;\n\tfor(int i=1;i<=s;++i){\n\t\tll x=read,y=read,z=read,w=read;\n\t\tint &u=ma[mul(x+y,y,z,w)],&v=ma[mul(x,y,z+w,w)];\n\t\tif(!u)u=++tot;if(!v)v=++tot;\n\t\tG[u].push_back(v);G[v].push_back(u);\n\t\tV[u].push_back(i);V[v].push_back(i);\n\t}\n\tfor(int i=1;i<=tot;++i)\n\t\tif(!h[i])dfs(i,0);\n\tint t=0;\n\tfor(int i=1;i<=tot;++i)\n\t\tt+=ans[i].size()/2;\n\tprintf(\"%d\\n\",t);\n\tfor(int i=1;i<=tot;++i)\n\t\tfor(int j=1;j<ans[i].size();j+=2)\n\t\t\tprintf(\"%d %d\\n\",ans[i][j-1],ans[i][j]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1620005635,
        "uid": 108067,
        "name": "\u4e1b\u96e8",
        "ccfLevel": 0,
        "title": "CF1519E Off by One"
    },
    {
        "content": "\u5224\u65ad\u4e24\u70b9\u662f\u5426\u53ef\u4ee5\u6267\u884c\u79fb\u52a8\u5e76\u5220\u9664\u662f\u5f88\u5bb9\u6613\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6240\u6709\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\u7684\u70b9\u5bf9\u8fde\u8fb9\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u8f6c\u5316\u4e3a\u65e0\u5411\u56fe\u7684\u6700\u5927\u8fb9\u72ec\u7acb\u96c6\u3002\n\n\u7136\u540e\u4f1a\u53d1\u73b0\u8fb9\u662f $n ^ 2$ \u7ea7\u522b\u7684\uff0c\u5e76\u4e14\u8fd9\u4e2a\u8fb9\u72ec\u7acb\u96c6\u4e5f\u5f88\u96be\u505a\uff0cG\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $(x, y)$\uff0c\u5c06\u5b83\u4e0e\u4e24\u4e2a\u8868\u793a\u659c\u7387 $\\frac {x + 1} {y},\\frac {x} {y + 1}$ \u7684\u70b9\u76f8\u8fde\u3002\u5219\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u4e00\u4e2a\u6700\u5927\u5339\u914d\uff0c\u5b9a\u4e49\u5339\u914d\u5f62\u5982 `Node1 - Slope` \u4e0e `Slope - Node2` \u7684\u4e24\u8fb9\uff0c\u6ce8\u610f `Slope` \u662f\u53ef\u4ee5\u5171\u7528\u7684\u3002\n\n\u611f\u89c9\u80fd\u505a\u554a\u3002\u6765\u6574\u4e2a DFS \u68ee\u6797\uff0c\u6613\u77e5\u53f6\u5b50\u8282\u70b9\u4e00\u5b9a\u662f `Slope` \u8282\u70b9\uff0c\u800c\u6839\u4e5f\u4e3a `Slope` \u8282\u70b9\u3002\n\n\u6211\u4eec\u5f3a\u5236\u8ba9\u6df1\u5ea6\u5c0f\u7684\u8fde\u5411\u6df1\u5ea6\u5927\u7684\uff0c\u4f7f\u5176\u5168\u90e8\u6539\u9020\u4e3a\u6709\u5411\u8fb9\u3002\u5219\u5bf9\u4e8e `Slope` \u70b9 $u$\uff1a\n\n\u8ba9\u4ed6\u6240\u6709\u8fde\u5411\u513f\u5b50\u7684\u8fb9\u4f9d\u6b21\u76f8\u90bb\u5339\u914d\uff0c\u5982\u679c\u4e00\u4e2a\u4e0d\u5269\u5c31\u56de\u6eaf\uff1b\u5982\u679c\u5269\u4e00\u4e2a\u5c31\u548c\u7236\u4eb2\u8fde\u5411\u81ea\u5df1\u7684\u8fb9\u5339\u914d\u3002\u6ce8\u610f `Node` \u9876\u70b9\u4e0d\u80fd\u91cd\u590d\u5339\u914d\uff0c\u6240\u4ee5\u5339\u914d\u4e86\u7684\u8fb9\u7684 `Node` \u9876\u70b9\u8981\u6253\u4e0a\u6807\u8bb0\u3002\n\n\u6700\u540e\u6bcf\u68f5\u6811\u7684\u6839\u6ca1\u7236\u4eb2\u5e2e\u5fd9\u6536\u5c3e\uff0c\u4f46\u53ef\u89c1\u8fd9\u6837\u6bcf\u68f5\u6811\u6700\u591a\u53ea\u4f1a\u635f\u5931\u4e00\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u7684\u7b54\u6848\u53ef\u4ee5\u53d6 $\\sum\\lfloor \\frac {m} {2} \\rfloor$\uff0c\u8fd9\u4e00\u5b9a\u662f\u6700\u5927\u7684\uff01\u6f02\u4eae\u3002\n\n```cpp\n#include <map>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long LL;\nint Abs (int x) { return x < 0 ? -x : x; }\nint Max (int x, int y) { return x > y ? x : y; }\nint Min (int x, int y) { return x < y ? x : y; }\n\nint Read () {\n    int x = 0, k = 1;\n    char s = getchar ();\n    while (s < '0' || s > '9') {\n        if (s == '-')\n            k = -1;\n        s = getchar ();\n    }\n    while ('0' <= s && s <= '9') \n        x = (x << 3) + (x << 1) + (s ^ 48), s = getchar ();\n    return x * k;\n}\n\nvoid Write (int x) {\n    if (x < 0)\n        putchar ('-'), x = -x;\n    if (x > 9)\n        Write (x / 10);\n    putchar (x % 10 + '0');\n}\n\nvoid Print (int x, char s) { Write (x), putchar (s); }\n\nconst int Maxn = 2e5 + 5;\n\nvector <int> Graph[Maxn * 3];\nmap <pair <LL, LL>, int> Pos;\nvector <pair <int, int> > Res;\nbool Vis[Maxn * 3], Used[Maxn];\nint n, Deg[Maxn * 3], Dep[Maxn * 3];\n\nLL Gcd (LL a, LL b) { return !b ? a : Gcd (b, a % b); }\n\nvoid Add_Edge (int u, int v) { Graph[u].push_back (v), Graph[v].push_back (u), Deg[u]++, Deg[v]++; }\n\nvoid Dfs (int u, int Last, int Fa) {\n    Vis[u] = true;\n    for (int i = 0, v; i < Graph[u].size (); i++) {\n        v = Graph[u][i];\n        if (!Vis[v]) \n            Deg[v] = Deg[u] + 1, Dfs (v, u > n ? u : Last, u);\n    }\n    if (u > n) {\n        int x = 0, y = 0;\n        for (int i = 0; i < Graph[u].size (); i++) \n            if (Deg[Graph[u][i]] > Deg[u] && !Used[Graph[u][i]]) {\n                if (!x)\n                    x = Graph[u][i];\n                else {\n                    y = Graph[u][i];\n                    Used[x] = true, Used[y] = true;\n                    Res.push_back (make_pair (x, y));\n                    x = y = 0;\n                }\n            }\n        if (x && !y && Fa) {\n            y = Fa;\n            Used[x] = true, Used[y] = true;\n            Res.push_back (make_pair (x, y));\n            x = y = 0;\n        }\n    }\n}\n\nint main () {\n    n = Read ();\n    int Cnt = n;\n    for (int i = 1; i <= n; i++) {\n        LL a = Read (), b = Read (), c = Read (), d = Read ();\n        LL t = Gcd ((a + b) * d, (b * c));\n        if (!Pos[make_pair ((a + b) * d / t, b * c / t)])\n            Pos[make_pair ((a + b) * d / t, b * c / t)] = ++Cnt;\n        Add_Edge (i, Pos[make_pair ((a + b) * d / t, b * c / t)]);\n\n        t = Gcd ((a * d), (c + d) * b);\n        if (!Pos[make_pair (a * d / t, (c + d) * b / t)])\n            Pos[make_pair (a * d / t, (c + d) * b / t)] = ++Cnt;\n        Add_Edge (i, Pos[make_pair (a * d / t, (c + d) * b / t)]);\n    }\n    for (int i = n + 1; i <= Cnt; i++)\n        if (!Vis[i])\n            Deg[i] = 1, Dfs (i, 0, 0);\n    Print (Res.size (), '\\n');\n    for (int i = 0; i < Res.size (); i++)\n        Print (Res[i].first, ' '), Print (Res[i].second, '\\n');\n    return 0;\n}\n\n// (a + b) * d / b * c\n// a * d / (c + d) * b\n```",
        "postTime": 1656413864,
        "uid": 266779,
        "name": "STrAduts",
        "ccfLevel": 6,
        "title": "\u300cCF1519E\u300dOff by One"
    },
    {
        "content": "\u5c06\u659c\u7387\u770b\u505a\u70b9\uff0c\u7ed9\u7684\u70b9\u770b\u505a\u8fb9\uff0c\u90a3\u4e48\u7ed9\u70b9 $(x,y)$ \u8868\u793a\u5728 $\\frac{x+1}{y}$ \u4e0e $\\frac{x}{y+1}$ \u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\u3002\u95ee\u9898\u53d8\u4e3a\u7ed9\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6bcf\u6b21\u5c06\u4e24\u6709\u516c\u5171\u7aef\u70b9\u7684\u8fb9\u5220\u9664\uff0c\u95ee\u6700\u591a\u5220\u9664\u591a\u5c11\u6b21\u3002\n\n\u5bb9\u6613\u731c\u51fa\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\uff0c\u82e5\u5b83\u542b $e$ \u6761\u8fb9\u5219\u80fd\u5339\u914d\u5230\u7406\u8bba\u6700\u5927\u503c\uff1a$\\lfloor \\frac{e}{2}\\rfloor$ \u5bf9\u8fb9\u3002\n\n\u7136\u540e\u6211\u5361\u4e86\u597d\u4e45\uff0c\u6700\u540e\u5f97\u5230\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5904\u7406\u65b9\u6cd5\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\u6c42\u51fa\u5b83\u7684\u4e00\u68f5\u751f\u6210\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u6761\u4ece $u$ \u5230 $u$ \u7684\u7956\u5148 $v$ \u7684\u8fd4\u7956\u8fb9 $(u,v)$\uff0c\u6211\u4eec\u628a\u8fd9\u6761\u8fb9\u53d8\u6210 $(u,v')$\uff0c\u5176\u4e2d $v'$ \u662f $u$ \u7684\u4e00\u4e2a\u65b0\u7684\u513f\u5b50\u3002\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u5b9e\u9645\u4e0a\u662f\u88ab\u52a0\u5f3a\u4e86\uff0c\u56e0\u4e3a\u672c\u6765\u8fb9 $(u,v)$ \u53ef\u4ee5\u540c\u65f6\u548c\u7aef\u70b9\u4e3a $u$ \u6216 $v$ \u7684\u8fb9\u5339\u914d\uff0c\u4f46\u73b0\u5728\u5b83\u53ea\u80fd\u548c\u7aef\u70b9\u4e3a $u$ \u7684\u8fb9\u5339\u914d\u4e86\u3002\n\n\u4f46\u5176\u5b9e\u8fd9\u4e2a\u95ee\u9898\u7684\u96be\u5ea6\u53d8\u7b80\u5355\u4e86\uff0c\u56e0\u4e3a\u73b0\u5728\u6bcf\u4e2a\u8fde\u901a\u5757\u90fd\u662f\u4e00\u68f5\u6811\u3002\u7ed9\u6bcf\u4e2a\u8fde\u901a\u5757\u90fd\u5b9a\u4e00\u4e2a\u6839\uff0c\u4ee4 $K_u$ \u4e3a $u$ \u5230\u7236\u4eb2\u8282\u70b9\u7684\u8fb9\u7684\u7f16\u53f7\u3002\u8003\u8651\u6bcf\u6b21\u627e\u5230\u6df1\u5ea6\u6700\u6df1\u7684\u70b9 $u$\uff0c\u5982\u679c\u5b83\u6709\u5144\u5f1f\u8282\u70b9 $x$ \u5219\u5339\u914d $(K_u,K_x)$\uff0c\u5426\u5219\u5339\u914d $(K_u,K_{fa_u})$\u3002\n\n$O(n\\log n)$\uff0c\u5b9e\u73b0\u7cbe\u7ec6\u4e00\u70b9\u53ef\u80fd\u53ef\u4ee5 $O(n)$ \u5427\u6211\u4e5f\u4e0d\u592a\u6e05\u695a\u3002",
        "postTime": 1629515143,
        "uid": 62308,
        "name": "Mr_Wu",
        "ccfLevel": 10,
        "title": "CF1519E Off by One"
    }
]