[
    {
        "content": "\u524d\u8a00\uff1a\u8fd9\u4e2a\u505a\u6cd5\u662f $O(n \\log ^2 n)$ \u7684\uff0c\u5b98\u65b9\u9898\u89e3\u8bf4\u6709 $O(n \\log n)$ \u7684\u505a\u6cd5\uff0c\u4f46\u662f\u6211\u6ca1\u770b\u61c2\u4ed6\u5728\u8bf4\u5565\uff0c\u8d34\u7684\u4ee3\u7801\u94fe\u63a5\u7531\u4e8e\u8fc7\u4e8e\u8fdc\u53e4\u5df2\u7ecf\u5931\u6548\u4e86\uff0c\u7f51\u4e0a\u4e5f\u627e\u4e0d\u5230\u5176\u4ed6\u5173\u4e8e\u672c\u9898\u7684\u535a\u5ba2\uff0c\u6700\u540e\u6363\u9f13\u534a\u5929\u6363\u9f13\u51fa\u7684\u8fd9\u4e2a\u505a\u6cd5\uff09\n\n# \u601d\u8def\n\n\u8003\u8651\u6211\u4eec\u73b0\u5728\u627e\u51fa\u4e86\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u6240\u6709\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u95f4\u7684\u6700\u5927\u503c\uff0c\u6211\u4eec\u8981\u8ba9\u8fd9\u4e2a\u6700\u5927\u503c\u6700\u5c0f\uff0c\u4e0d\u96be\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\n\n\u90a3\u4e48\u6211\u4eec\u9996\u5148\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848 $mid$\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u628a\u6bcf\u4e2a\u70b9\u5728 $mid$ \u65f6\u95f4\u5185\u80fd\u7ecf\u8fc7\u7684\u70b9\u770b\u4f5c\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48 $mid$ \u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u70b9\u4ee3\u8868\u7684\u96c6\u5408\u7684\u4ea4\u96c6\u4e0d\u4e3a\u7a7a\u3002\n\n\u8003\u8651\u4e00\u4e2a\u70b9\u80fd\u591f\u5230\u8fbe\u7684\u70b9\u96c6\u662f\u4e00\u4e2a\u83f1\u5f62\u3002\u8fd9\u4e2a\u83f1\u5f62\u5f88\u4e11\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u8003\u8651\u5c06\u66fc\u54c8\u987f\u8ddd\u79bb\u8f6c\u6210\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\uff0c\u8fd9\u6837\u80fd\u5230\u8fbe\u7684\u70b9\u96c6\u5c31\u662f\u4e00\u4e2a\u77e9\u5f62\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u73b0\u5728\u8981\u8003\u8651\u7684\u5c31\u662f\u8fd9\u51e0\u4e2a\u96c6\u5408\u662f\u5426\u6709\u4ea4\u3002\u9996\u5148\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u8d70\u4ee5\u81ea\u5df1\u4e3a\u4e2d\u5fc3\u7684 $mid$ \u7684\u4e00\u4e2a\u77e9\u5f62\uff0c\u800c\u4e14\u5b83\u53ef\u4ee5\u8d70\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u4e00\u4e2a\u8f66\u7ad9\uff0c\u8bbe\u8fd9\u4e2a\u6700\u77ed\u8ddd\u79bb\u4e3a $dis$\uff0c\u90a3\u4e48\u8fd9\u6837\u5c31\u76f8\u5f53\u4e8e\u53c8\u4ee5\u6bcf\u4e2a\u8f66\u7ad9\u4e3a\u4e2d\u5fc3\u7684 $mid - dis$ \u7684\u4e00\u4e2a\u77e9\u5f62\uff0c\u67d0\u4e00\u4e2a\u70b9\u80fd\u591f\u5230\u8fbe\u7684\u70b9\u96c6\u5c31\u662f\u8fd9\u51e0\u4e2a\u77e9\u5f62\u7684\u4ea4\u3002\n\n\u4e0b\u9762\u6709\u4e24\u79cd\u65b9\u5f0f\u80fd\u591f\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff0c\u7b2c\u4e00\u79cd\u6bd4\u8f83\u65e0\u8111\uff0c\u5982\u679c\u611f\u89c9\u7b2c\u4e00\u79cd\u6bd4\u8f83\u62bd\u8c61\u53ef\u4ee5\u770b\u7b2c\u4e8c\u79cd\u3002\n\n\u6211\u4eec\u62ff\u4e2a\u5f0f\u5b50\u6765\u5199\u4e00\u4e9b\uff1a\u8bbe\u4ee5 $i$ \u4e3a\u4e2d\u5fc3\u7684\u77e9\u5f62\u4e3a $A_i$\uff0c$i$ \u80fd\u901a\u8fc7\u8f66\u7ad9\u5230\u8fbe\u7684\u77e9\u5f62\u7684\u96c6\u5408\u7684\u5e76\u4e3a $B_i$\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u5c31\u662f\u8981\u6c42 $\\bigcap (A_i \\cup B_i)$\u3002\n\n\u76f4\u63a5\u628a\u8fd9\u4e2a\u4e1c\u897f\u62c6\u5f00\u3002\u7531\u4e8e\u6211\u4eec\u53d1\u73b0\u5982\u679c $mid - dis_i \\le mid - dis_j$\uff0c\u90a3\u4e48 $B_i \\cap B_j = B_j$\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\u5176\u5b9e\u53ea\u6709 $mid - dis_j$ \u6700\u5927\u7684\u90a3\u4e2a $B_i$ \u662f\u6709\u8d21\u732e\u7684\u3002\u90a3\u4e48\u5982\u679c\u6309\u7167 $mid - dis_j$ \u4ece\u5c0f\u5230\u5927\u6392\u597d\u5e8f\uff0c\u90a3\u4e48\u4e0a\u9762\u90a3\u4e2a\u5f0f\u5b50\u5176\u5b9e\u7b49\u4e8e $(B_1) \\cup (A_1 \\cap B_2) \\cup (A_1 \\cap A_2 \\cap B_3) \\cup \\cdots$\u3002\n\n\u6362\u4e00\u79cd\u65b9\u5f0f\u7406\u89e3\uff0c\u5982\u679c\u67d0\u4e2a\u4eba\u51b3\u5b9a\u8981\u5230\u8f66\u7ad9\uff0c\u90a3\u4e48\u5982\u679c\u6709\u7684\u4eba\u53ef\u4ee5\u5230\u8f66\u7ad9\uff0c\u4e14\u4ed6\u5230\u8f66\u7ad9\u6bd4\u524d\u9762\u90a3\u4e2a\u4eba\u8ddd\u79bb\u8fd8\u77ed\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4eba\u76f4\u63a5\u8ddf\u7740\u90a3\u4e2a\u4eba\u8d70\u5c31\u53ef\u4ee5\u4e86\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8003\u8651\u5230\u8f66\u7ad9\u4e14\u8ddd\u79bb\u6700\u5927\u7684\u90a3\u4e2a\u4eba\u5373\u53ef\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u8981\u6c42\u4e0a\u9762\u90a3\u4e2a\u5f0f\u5b50\u662f\u5426\u4e3a\u7a7a\u96c6\u3002\u7531\u4e8e $A_i$ \u662f\u4e00\u4e2a\u77e9\u5f62\uff0c\u53ef\u4ee5 $O(1)$ \u8ba1\u7b97\u4ea4\u96c6\uff0c\u6211\u4eec\u8003\u8651\u7ef4\u62a4 $A_{1\\sim i-1}$ \u7684\u4ea4\u96c6\uff0c\u7136\u540e\u770b\u5b83\u4e0e $B_i$ \u662f\u5426\u6709\u4ea4\u96c6\u5373\u53ef\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u51fa\u4e8c\u7ef4\u5e73\u9762\u4e0a\u67d0\u4e2a\u77e9\u5f62\u4e2d\u662f\u5426\u6709\u8f66\u7ad9\u3002\u5982\u679c $A$ \u4e0e\u67d0\u4e2a $B$ \u6709\u4ea4\u96c6\uff0c\u90a3\u4e48 $B$ \u7684\u4e2d\u5fc3\u80af\u5b9a\u5728 $A$ \u5f80\u5916\u6269\u5927 $B$ \u7684\u8fb9\u5fc3\u8ddd\u7684\u77e9\u5f62\u5185\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5224\u65ad\u4e86\u3002\n\n\u6c42\u6bcf\u4e2a\u70b9\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fd9\u4e48\u4e8c\u5206\uff0c\u65b9\u6cd5\u5f88\u591a\u5c31\u4e0d\u8bf4\u4e86\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 200005, M = 200000000;\nstruct SegmentTree {\n    struct Node {\n        int lc, rc, sum;\n    } t[MAXN * 60];\n    int tot;\n    void insert(int d, int &p, int l = -M, int r = M) {\n        if (!p) p = ++tot, t[p].sum = 1;\n        else t[++tot] = t[p], p = tot, t[p].sum++;\n        if (l == r) return;\n        int mid = (l + r) >> 1;\n        if (d <= mid) insert(d, t[p].lc, l, mid);\n        else insert(d, t[p].rc, mid + 1, r);\n    }\n    int query(int a, int b, int p, int l = -M, int r = M) {\n        if (!p) return 0;\n        if (a <= l && r <= b) return t[p].sum;\n        int mid = (l + r) >> 1;\n        if (b <= mid) return query(a, b, t[p].lc, l, mid);\n        if (a > mid) return query(a, b, t[p].rc, mid + 1, r);\n        return query(a, b, t[p].lc, l, mid) + query(a, b, t[p].rc, mid + 1, r);\n    }\n} st;\nint X[MAXN], o;\nint root[MAXN];\nbool check(int X1, int X2, int Y1, int Y2) {\n    int l = lower_bound(X + 1, X + 1 + o, X1) - X, r = upper_bound(X + 1, X + 1 + o, X2) - X - 1;\n    return st.query(Y1, Y2, root[r]) - st.query(Y1, Y2, root[l - 1]);\n}\nint n, k;\nint px[MAXN], py[MAXN];\nint sx[MAXN], sy[MAXN];\nvector<int> s[MAXN];\npair<int, int> a[MAXN];\nint main() {\n    scanf(\"%d%d\", &n, &k);\n    int minX = M, maxX = -M;\n    int minY = M, maxY = -M;\n    for (int i = 1; i <= n; i++) {\n        int x, y; scanf(\"%d%d\", &x, &y);\n        px[i] = x + y, py[i] = x - y;\n        minX = min(minX, px[i]), minY = min(minY, py[i]);\n        maxX = max(maxX, px[i]), maxY = max(maxY, py[i]);\n    }\n    int ans = (max(maxX - minX, maxY - minY) + 1) / 2;\n    for (int i = 1; i <= k; i++) {\n        int x, y; scanf(\"%d%d\", &x, &y);\n        sx[i] = x + y, sy[i] = x - y;\n        X[i] = sx[i];\n    }\n    sort(X + 1, X + 1 + k);\n    o = unique(X + 1, X + 1 + k) - X - 1;\n    for (int i = 1; i <= k; i++) {\n        int j = lower_bound(X + 1, X + 1 + o, sx[i]) - X;\n        s[j].push_back(i);\n    }\n    for (int i = 1; i <= o; i++) {\n        root[i] = root[i - 1];\n        for (int j : s[i]) {\n            st.insert(sy[j], root[i]);\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        int l = 0, r = M;\n        while (l < r) {\n            int mid = (l + r) >> 1;\n            if (check(px[i] - mid, px[i] + mid, py[i] - mid, py[i] + mid)) r = mid;\n            else l = mid + 1;\n        }\n        a[i] = { l, i };\n    }\n    sort(a + 1, a + 1 + n, greater<pair<int, int>>());\n    int l = 0, r = ans;\n    while (l < r) {\n        int mid = (l + r) >> 1;\n        minX = M, maxX = -M;\n        minY = M, maxY = -M;\n        bool flag = false;\n        for (int i = 1; i <= n; i++) {\n            if (mid < a[i].first) {\n                minX = min(minX, px[a[i].second] + mid), maxX = max(maxX, px[a[i].second] - mid);\n                minY = min(minY, py[a[i].second] + mid), maxY = max(maxY, py[a[i].second] - mid);\n                if (maxX > minX || maxY > minY) break;\n            } else {\n                if (maxX <= minX && maxY <= minY) {\n                    int w = mid - a[i].first;\n                    if (check(maxX - w, minX + w, maxY - w, minY + w)) {\n                        flag = true;\n                        break;\n                    }\n                }\n                minX = min(minX, px[a[i].second] + mid), maxX = max(maxX, px[a[i].second] - mid);\n                minY = min(minY, py[a[i].second] + mid), maxY = max(maxY, py[a[i].second] - mid);\n            }\n        }\n        if (flag) r = mid;\n        else l = mid + 1;\n    }\n    printf(\"%d\\n\", l);\n    return 0;\n}\n```",
        "postTime": 1672149589,
        "uid": 279652,
        "name": "APJifengc",
        "ccfLevel": 9,
        "title": "\u300c\u89e3\u9898\u62a5\u544a\u300dCF185E Soap Time! - 2"
    }
]