[
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6709 $n$ \u4e2a\u7ed3\u70b9\u7684\u4ee5 $1$ \u4e3a\u6839\u7684\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u6709\u4e00\u4e2a\u64cd\u4f5c\u7c7b\u578b $0$ \u6216 $1$ \u3002\n\n\u64cd\u4f5c\u7c7b\u578b $0$ \u4ee3\u8868\u8be5\u8282\u70b9\u7684\u6743\u503c\u4e3a\u5176\u6240\u6709\u513f\u5b50\u7684\u6743\u503c\u7684\u6700\u5c0f\u503c\uff0c\u64cd\u4f5c\u7c7b\u578b $1$ \u4ee3\u8868\u8be5\u8282\u70b9\u7684\u6743\u503c\u4e3a\u5176\u6240\u6709\u513f\u5b50\u7684\u6743\u503c\u7684\u6700\u5927\u503c\u3002\u53f6\u5b50\u7ed3\u70b9\u7684\u6743\u503c\u6ca1\u6709\u610f\u4e49\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002\n\n\u5047\u8bbe\u8fd9\u68f5\u6811\u6709 $k$ \u4e2a\u53f6\u5b50\uff0c\u4f60\u9700\u8981\u5728\u6bcf\u4e2a\u53f6\u5b50\u4e0a\u586b\u5165\u6570\u5b57 $1-k$ \uff0c\u4f7f\u5f97\u6309\u5982\u4e0a\u8ba1\u7b97\u7ed3\u70b9\u6743\u503c\u540e\uff0c\u7ed3\u70b9 $1$ \u7684\u6743\u503c\u6700\u5927\uff0c\u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u503c\u3002\n\n$2\\le n\\le 3\\times 10^5$\n\n## \u89e3\u9898\u601d\u8def\n\n\u5047\u8bbe\u7b54\u6848\u4e3a $x$ \uff0c\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u4e0a\u7684\u64cd\u4f5c\u4e3a $\\min$ \uff0c\u5219\u5176\u8981\u6c42\u5176\u6bcf\u4e2a\u513f\u5b50\u7ed3\u70b9\u7684\u503c\u90fd\u5927\u4e8e $x$ \uff0c\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u4e0a\u7684\u64cd\u4f5c\u4e3a $\\max$ \uff0c\u5176\u8981\u6c42\u5176\u4e2d\u4e00\u4e2a\u513f\u5b50\u7ed3\u70b9\u7684\u503c\u5927\u4e8e $x$ \u3002\n\n\u6309\u7167\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u6211\u4eec\u5230\u8fbe\u4e86\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e $x$ \u7684\u6570\u6765\u586b\u5165\u8fd9\u4e2a\u683c\u5b50\u4e2d\uff0c\u7531\u4e8e $x$ \u5728\u904d\u5386\u5168\u6811\u65f6\u4e0d\u4f1a\u6539\u53d8\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6700\u540e\u5230\u8fbe\u7684\u53f6\u5b50\u7ed3\u70b9\u6570\u6700\u5c11\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u552f\u4e00\u80fd\u63a7\u5236\u5230\u8fbe\u53f6\u5b50\u7ed3\u70b9\u6570\u7684\u662f\u64cd\u4f5c\u7c7b\u578b $\\max$ \uff0c\u5728\u8ba1\u7b97\u8be5\u8282\u70b9\u4fe1\u606f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u9009\u62e9\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u6570\u6700\u5c0f\u7684\u5b50\u6811\uff0c\u5373\u5bf9\u5176\u6240\u6709\u513f\u5b50\u80fd\u9009\u62e9\u7684\u6700\u5c0f\u53f6\u5b50\u8282\u70b9\u6570\u53d6 $\\min$ \u3002\n\n\u5728\u64cd\u4f5c $\\min$ \u65f6\uff0c\u7531\u4e8e\u5176\u8981\u6c42\u6bcf\u4e2a\u513f\u5b50\u7ed3\u70b9\u7684\u503c\u90fd\u5927\u4e8e $x$ \uff0c\u6211\u4eec\u8981\u5bf9\u5176\u513f\u5b50\u80fd\u9009\u62e9\u7684\u6700\u5c0f\u53f6\u5b50\u7ed3\u70b9\u6570\u6c42\u548c\uff0c\u4f5c\u4e3a\u8be5\u8282\u70b9\u80fd\u9009\u62e9\u7684\u6700\u5c0f\u53f6\u5b50\u7ed3\u70b9\u6570\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u6839\u8282\u70b9\u80fd\u9009\u62e9\u7684\u6700\u5c0f\u53f6\u5b50\u7ed3\u70b9\u6570 $ans$ \u662f\u548c $x$ \u65e0\u5173\u7684\uff0c\u800c\u8fd9\u4e2a\u7ed3\u70b9\u6570\u7684\u610f\u4e49\u662f\u81f3\u5c11\u9700\u8981\u9009\u62e9 $ans$ \u4e2a\u503c\u5927\u4e8e\u7b49\u4e8e $x$ \u7684\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u7684 $x$ \u6700\u5927\u4e3a $k+1-ans$ \u3002\n\n## \u4ee3\u7801\u5c55\u793a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=600010;\nint n,op[maxn],x,k;\nint cur,h[maxn],nxt[maxn],p[maxn];\nint f[maxn];\nvoid add_edge(int x,int y)\n{\n\tcur++;\n\tnxt[cur]=h[x];\n\th[x]=cur;\n\tp[cur]=y;\n}\nvoid dfs(int x,int fa)\n{\n\tint ch=0;\n\tif(op[x]==1)f[x]=2e9;\n\tfor(int j=h[x];j;j=nxt[j])if(p[j]!=fa)\n\t{\n\t\tch++;\n\t\tdfs(p[j],x);\n\t\tif(op[x]==0)f[x]+=f[p[j]];\n\t\telse f[x]=min(f[x],f[p[j]]);\n\t}\n\tif(!ch)k++,f[x]=1;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",op+i);\n\tfor(int i=2;i<=n;i++)scanf(\"%d\",&x),add_edge(i,x),add_edge(x,i);\n\tdfs(1,-1);\n\tprintf(\"%d\\n\",k+1-f[1]);\n\treturn 0;\n}\n```",
        "postTime": 1555316382,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1153D \u3010Serval and Rooted Tree\u3011"
    },
    {
        "content": "\u795e\u4ed9dp\u9898\u3002\n\n\u8003\u8651\u8bbe$g[x]$\u8868\u793ax\u5728\u5176\u5b50\u6811\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\u6392\u540d\u6700\u9ad8\u503c\uff0c\u5219\u663e\u7136\u8981\u4f7f\u6392\u540d\u6700\u5927\u5316\uff0c\u5373$g[x]$\u6700\u5927\u5316\u3002\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\n\n1\uff1ax\u5bf9\u5b50\u8282\u70b9v\u53d6min\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c**\u81f3\u5c11\u6709$\\sum_{v}g[v]$\u4e2a\u6570\u5b57\u5927\u4e8e\u7b49\u4e8ex\u7684\u6743\u503c**\uff08\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u539f\u6765\u6bd4v\u8981\u5927\u7684\u80af\u5b9a\u4e5f\u6bd4\u53d6min\u540e\u7684x\u8981\u5927\uff09\uff0c**\u4e14\u5b58\u5728\u4e00\u79cd\u65b9\u6848\u4f7f\u5f97x\u6392\u540d\u4e3a$\\sum_{v(x->v)}g[v]$**\uff08\u65b9\u6cd5\uff1a\u8bbe$S(x)$\u4e3a\u6bd4x\u5927\u7684\u53f6\u5b50\u8282\u70b9\u96c6\u5408\uff0c\u5219\u5c06$\\bigcup_{v}^{}S(v)$\u5747\u8bbe\u4e3a\u6700\u5927\u7684\u6743\u503c\u5c31\u597d\u4e86\uff09**\u56e0\u6b64$g[x]=\\sum_{v}g[v]$**\n\n2\uff1ax\u5bf9\u5b50\u8282\u70b9\u53d6max\u3002\u8fd9\u4e2a\u5f88\u597d\u7b97\uff0c\u56e0\u4e3a\u53d6\u4e86max\uff0c\u6240\u4ee5\u4f7fg\u6700\u5c0f\u90a3\u4e2a\u5b50\u8282\u70b9\u6240\u5728\u5b50\u6811\u7684\u6743\u503c\u53d6\u6700\u5927\u7684\u5373\u53ef\uff0c\u5176\u4ed6\u5b50\u6811\u4e00\u5b9a\u5c0f\u4e8ex\u7684\u6743\u503c\uff0c\u6240\u4ee5$g[x]=min(g[v])$\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\nusing namespace std;\nconst int N=3e5+2;\nint lj[N],nxt[N],fir[N],f[N],g[N],t[N];\nint n,m,i,bs,x,c;\ninline void read(int &x)\n{\n\tc=getchar();\n\twhile ((c<48)||(c>57)) c=getchar();\n\tx=c^48;c=getchar();\n\twhile ((c>=48)&&(c<=57))\n\t{\n\t\tx=x*10+(c^48);\n\t\tc=getchar();\n\t}\n}\ninline void add(register int x,register int y){lj[++bs]=y;nxt[bs]=fir[x];fir[x]=bs;}\nvoid dfs(int x)\n{\n\tif (!fir[x]) {++m;g[x]=1;return;}\n\tint i;\n\tif (t[x])\n\t{\n\t\tg[x]=n;\n\t\tfor (i=fir[x];i;i=nxt[i]) {dfs(lj[i]);g[x]=min(g[x],g[lj[i]]);}\n\t} else for (i=fir[x];i;i=nxt[i]) {dfs(lj[i]);g[x]+=g[lj[i]];}\n}\nint main()\n{\n\tread(n);\n\tfor (i=1;i<=n;i++) read(t[i]);\n\tfor (i=2;i<=n;i++) {read(x);add(x,i);}\n\tdfs(1);printf(\"%d\",m-g[1]+1);\n}\n```\n",
        "postTime": 1555332415,
        "uid": 29826,
        "name": "SSerxhs",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1153D \u3010Serval and Rooted Tree\u3011"
    },
    {
        "content": "\u9898\u76ee\u5730\u5740\uff1a[CF1153D Serval and Rooted Tree](https://www.luogu.org/problemnew/show/CF1153D)\n\n\u633a\u597d\u73a9\u513f\u4e5f\u633a\u8003\u601d\u7ef4\u7684\u4e00\u9053\u9898\n\n\u601d\u8def\uff1a\u6811\u5f62DP+\u8d2a\u5fc3\n\n\u6570\u7ec4 $d$ \u7ef4\u62a4\u8fd9\u6837\u4e00\u4e2a\u503c\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 $x$ \uff0c\u5b83\u7684\u503c\u6700\u5927\u53ef\u4ee5\u4e3a**\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u53f6\u5b50\u8282\u70b9\u7684\u6570\u503c\u4e2d\u6392\u540d\u7b2c $d_x$ \u5927\u7684\u6570\u503c**\u3002\n\n\u611f\u6027\u7684\u7406\u89e3\u5c31\u662f\uff0c\u5047\u5982\u8fd9\u4e2a\u8282\u70b9\u4e0b\u6709 $n$ \u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u513f\u8fd9\u4e2a\u8282\u70b9\u7684 $d$ \u503c\u4e3a $k$ \uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u6700\u5927\u53ef\u4ee5\u662f $n+1-k$ \u3002\n\n\u5047\u8bbe\u73b0\u5728\u5728\u8282\u70b9 $x$ \uff1a\n\n\u5982\u679c $x$ \u662f\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48 $d_x = 1$ \uff1b\n\n\u5982\u679c $x$ \u662f $min$ \u8282\u70b9\uff0c\u90a3\u4e48 $d_x = \\sum_{y \\in son_x}\\ d_y$ \uff1b\n\n\u5982\u679c $x$ \u662f $max$ \u8282\u70b9\uff0c\u90a3\u4e48 $d_x = min_{y \\in son_x}\\ d_y$ \u3002\n\n\u90a3\u4e48\u663e\u7136 $ans = cnt + 1 - d_1$ \uff0c\u5176\u4e2d $cnt$ \u4e3a\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 3e5 + 6;\nint n, a[N], d[N], cnt;\nvector<int> e[N];\n\nvoid dfs(int x) {\n\tif (!e[x].size()) {\n\t\td[x] = 1;\n\t\t++cnt;\n\t\treturn;\n\t}\n\td[x] = a[x] ? n : 0;\n\tfor (unsigned int i = 0; i < e[x].size(); i++) {\n\t\tint y = e[x][i];\n\t\tdfs(y);\n\t\tif (a[x]) d[x] = min(d[x], d[y]);\n\t\telse d[x] += d[y];\n\t}\n}\n\nint main() {\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) scanf(\"%d\", &a[i]);\n\tfor (int i = 2, f; i <= n; i++) {\n\t\tscanf(\"%d\", &f);\n\t\te[f].push_back(i);\n\t}\n\tdfs(1);\n\tcout << cnt + 1 - d[1] << endl;\n\treturn 0;\n}\n```",
        "postTime": 1555230826,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "CF1153D Serval and Rooted Tree"
    },
    {
        "content": "\u672c\u6821\u9ad8\u4e2d\u6bd5\u4e1a\u7684\u5927\u4e00dalao @[bzh](https://codeforces.com/profile/bzh)\u51fa\u7684\u9898orz\n\n\u4e00\u4e2a\u6709\u8da3\u7684\u6811\u5f62dp\u597d\u9898\u3002\n\n\u8fd9\u4e2adp\u561b\uff0c\u9996\u5148\u60f3\u76f4\u63a5\u6309min-max\u7684\u89c4\u5219dp\uff08\u8fb9\u754c\u7684dp\u503c\u90fd\u4e0d\u786e\u5b9a\u600e\u4e48dp\uff1f\u8fb9\u513f\u53bb\uff01\uff09\u3002\u3002\u3002\n\n\u7136\u540e\u5462\uff0c\u60f3\u5230\u53d6\u6700\u5927\u503c\uff0c\u4e8e\u662f\u5c31\u770b\u770bmin\u8282\u70b9\u548cmax\u8282\u70b9\u53d6\u6700\u5927\u503c\u8981\u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u3002\n\n\u663e\u7136\uff0cmin\u8282\u70b9\u8981\u4f7f\u5f97\u5176\u6240\u6709\u5b50\u8282\u70b9\u503c\u7684\u6700\u5c0f\u503c\u5c3d\u53ef\u80fd\u5927\uff0cmax\u8282\u70b9\u8981\u4f7f\u5f97\u5176\u6240\u6709\u5b50\u8282\u70b9\u503c\u7684\u6700\u5927\u503c\u5c3d\u53ef\u80fd\u5927\uff08\u5176\u5b9e\u5c31\u662f\u4efb\u610f\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u503c\uff09\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4min\u7684\u6240\u6709\u5b50\u8282\u70b9\u5f71\u54cd\u5176\u503c\uff0c\u800cmax\u8282\u70b9\u53ef\u4ee5\u8ba9\u6211\u4eec\u4efb\u610f\u9009\u4e00\u4e2a\u5b50\u8282\u70b9\u5f71\u54cd\u5176\u503c\u3002\n\n\u56e0\u6b64\u6211\u4eec\u5f97\u51fa\u4e00\u4e2a\u8d2a\u5fc3\u7b56\u7565\uff1a\u5bf9\u4e8e\u53f6\u5b50\u8282\u70b9\uff0c\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u5f71\u54cd\u8be5\u8282\u70b9\u503c\uff1b\u5bf9\u4e8e\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u82e5\u662fmin\u8282\u70b9\uff0c\u5f71\u54cd\u8be5\u8282\u70b9\u503c\u7684\u53f6\u5b50\u7ed3\u70b9\u4e2a\u6570\u4e3a\u8be5\u8282\u70b9\u6240\u6709\u5b50\u8282\u70b9\u503c\u7684\u53f6\u5b50\u7ed3\u70b9\u4e2a\u6570\u4e4b\u548c\uff1b\u82e5\u662fmax\u8282\u70b9\uff0c\u5f71\u54cd\u8be5\u8282\u70b9\u503c\u7684\u53f6\u5b50\u7ed3\u70b9\u4e2a\u6570\u4e3a\u8be5\u8282\u70b9\u6240\u6709\u5b50\u8282\u70b9\u503c\u7684\u53f6\u5b50\u7ed3\u70b9\u4e2a\u6570\u4e2d\u6700\u5c0f\u503c\u3002\u8fd9\u6837\uff0c\u5f71\u54cd\u6839\u8282\u70b9\u503c\u7684\u53f6\u5b50\u8282\u70b9\u6570\u5c31\u786e\u5b9a\u4e86\uff0c\u53ea\u9700\u5728\u8fd9\u4e9b\u8282\u70b9\u4e0a\u4f9d\u6b21\u586b\u5165\u6700\u5927\u7684\u4e00\u4e9b\u6570\uff0c\u5c31\u80fd\u6700\u5927\u5316\u6839\u8282\u70b9\u7684\u503c\u3002\u6240\u4ee5\u8bbe\u6709$k$\u4e2a\u53f6\u5b50\u8282\u70b9\u5f71\u54cd\u6839\u8282\u70b9\u7684\u503c\uff0c\u5219\u6839\u8282\u70b9\u503c\u4e3a\u7b2c$k$\u5927\u503c\u5373$N-k+1$\u3002\n\nCode:\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint N,M,a[300003];\nint f,head[300003],cnt;\nstruct edge\n{\n\tint nxt,to;\n}e[300003];\ninline void add(int x,int y)\n{\n\te[++cnt].nxt=head[x];\n\te[cnt].to=y;\n\thead[x]=cnt;\n}\ninline int dfs(int u)\n{\n\tint ans;\n\tif(!head[u])++M,ans=1;\n\telse if(a[u])\n\t{\n\t\tans=N+1;\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tans=min(ans,dfs(v));\n\t\t}\n\t}\n\telse\n\t{\n\t\tans=0;\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tans+=dfs(v);\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\n{\n\tscanf(\" %d\",&N);\n\tfor(int i=1;i<=N;++i)\n\t{\n\t\tscanf(\" %d\",&a[i]);\n\t}\n\tfor(int i=2;i<=N;++i)\n\t{\n\t\tscanf(\" %d\",&f);\n\t\tadd(f,i);\n\t}\n\tint K=dfs(1);\n\tprintf(\"%d\\n\",M-K+1);\n\treturn 0;\n}\n```",
        "postTime": 1562923685,
        "uid": 59388,
        "name": "VinstaG173",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1153D \u3010Serval and Rooted Tree\u3011"
    },
    {
        "content": "\u6811\u5f62dp\n\n\u8bbe$f[x]$\u8868\u793a$x$\u6240\u5728\u5b50\u6811\u7b54\u6848\u6700\u5927\u662f\u7b2c\u51e0\u5927\uff0c$siz[x]$\u8868\u793a$x$\u6240\u5728\u5b50\u6811\u5185\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\u3002\n\n\u90a3\u4e48$siz[now]-f[now]$\u8fd9\u4e00\u6bb5\u6570\u5b57\u4e0d\u53ef\u80fd\u518d\u88ab\u4f7f\u7528\u4e86\u3002\n\n\u8f6c\u79fb\u65f6\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u662f\u6c42$max$\uff0c\u90a3\u4e48$f[x]=siz[x]-min(siz[to]-f[to])$\uff0c\u76f8\u5f53\u4e8e\u627e\u4e00\u68f5\u5b50\u6811\uff0c\u628a\u6700\u5927\u7684\u90fd\u7ed9\u8fd9\u68f5\u5b50\u6811\u3002\n\n\u82e5\u5f53\u524d\u8282\u70b9\u662f$min$\uff0c\u90a3\u4e48\u8981\u5148\u628a\u5b50\u8282\u70b9\u4e0d\u80fd\u4f7f\u7528\u7684\u6570\u5b57\u586b\u6ee1\uff0c\u8bbe\u603b\u5171\u6709$sum$\u4e2a\uff0c\u7136\u540e\u6bcf\u4e2a\u5b50\u8282\u70b9\u586b\u4e00\u4e2a\u6570\uff0c\u53d6\u6700\u5c0f\u503c\uff0c\u90a3\u4e48$f[now]=siz[now]-sum-\\text{\u5b69\u5b50\u4e2a\u6570}+1$\n\n\u8fb9\u754c\u6761\u4ef6\uff1a$f[\\text{\u53f6\u5b50\u8282\u70b9}]=1$\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <bitset>\n#include <set>\n#include <map>\n#include <queue>\n#include <iostream>\n#include <cmath>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef unsigned int uint;\ntypedef double db;\ntypedef pair <int, int> pii;\ntypedef vector <int> vi;\n\n#ifndef ONLINE_JUDGE\n#define DEBUG\n#endif\n\n#define Fi first\n#define Se second\n#define pb push_back\n#define mp make_pair\n#define rep(x, a, b) for(int x = (a); x <= (b); ++ x)\n#define per(x, a, b) for(int x = (a); x >= (b); -- x)\n#define rop(x, a, b) for(int x = (a); x < (b); ++ x)\n#define por(x, a, b) for(int x = (a); x > (b); -- x)\n#define forE(x, a) for(int x = head[a]; x; x = nxt[x])\n\n#ifdef DEBUG\n#define debug(x) cerr << #x << \": \" << x << '\\n'\n#else\n#define debug(x)\n#endif\n\nvoid open(const char *s){\n\t#ifdef DEBUG\n    char str[100];\n\tsprintf(str,\"%s.in\",s);\n\tfreopen(str,\"r\",stdin);\n\tsprintf(str,\"%s.my\",s);\n\tfreopen(str,\"w\",stdout);\n\t#endif\n}\n\nconst db eps = 1e-8;\nconst int inf = 0x3f3f3f3f;\nconst int Minf = 0x7f7f7f7f;\nconst LL INF = 0x3f3f3f3f3f3f3f3fll;\nconst LL MINF = 0x7f7f7f7f7f7f7f7fll;\n\nconst int N = 5e5 + 50;\n\nint opt[N], fa[N]; \nvi q[N];\nint f[N];\nint siz[N];\n\nvoid dfs(int now) {\n\tint y = 0;\n\tint Min = inf, sum = 0;\n\trop(i, 0, (int)q[now].size()) {\n\t\t++ y;\n\t\tdfs(q[now][i]);\n\t\tsiz[now] += siz[q[now][i]];\n\t\tMin = min(Min, siz[q[now][i]] - f[q[now][i]]);\n\t\tsum += siz[q[now][i]] - f[q[now][i]];\n\t}\n\tsiz[now] += (y == 0);\n\tif(opt[now] == 1) f[now] = siz[now] - Min;\n\telse f[now] = siz[now] - sum - y + 1;\n\tif(y == 0) f[now] = 1;\n}\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0); \n\t\n\tint n; cin >> n;\n\trep(i, 1, n) cin >> opt[i];\n\trep(i, 2, n) cin >> fa[i], q[fa[i]].pb(i);\n\t\n\tdfs(1);\n\t\n\tprintf(\"%d\\n\", f[1]);\n\t\n}\n```\n",
        "postTime": 1555237156,
        "uid": 44777,
        "name": "djh123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1153D \u3010Serval and Rooted Tree\u3011"
    },
    {
        "content": "\u8868\u793a\u5f53\u65f6\u8fd9\u573aCF\u6211\u6ca1\u6253\u3002\u7136\u540e\u7b2c\u4e8c\u5929\u770b\u8fd9\u9898\u770b\u4e862h\u624d\u770b\u51fa\u6765\u505a\u6cd5\uff08\u6211\u592a\u5f31\u4e86\uff09\u3002\n\n\u7136\u540e\u8fd9\u79cd\u5728\u6811\u4e0a\u53d6$\\ \\min\\ \\max\\ $\u4e4b\u7c7b\u7684\u5e94\u8be5\u5c31\u662f\u6811\u5f62dp\u3002\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\u9898\u76ee\u8981\u6c42\u6211\u4eec\u5411\u53f6\u5b50\u586b\u4e00\u4e2a\u6392\u5217\uff0c\u6700\u540e\u7ecf\u8fc7\u5411\u4e0a\u5408\u5e76\u540e\u4f7f\u6839\u8282\u70b9\u7684\u503c\u6700\u5927\u3002\n\n\u6b64\u5904\u6211\u4eec\u5148\u8bbe\u4ee5\u70b9$u$\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u4e3a$size[u]$\u3002~~\u663e\u7136~~\u603b\u7684\u53f6\u5b50\u8282\u70b9\u6570\u4e3a$size[1]$\u3002\n\n\u7136\u540e\u5982\u679c\u6839\u8282\u70b9\u6709\u5f88\u591a\u5b50\u6811\uff0c\u6211\u4eec\u5c31\u8981\u5c06$1\\sim s$\u7684\u6392\u5217\u5206\u914d\u7ed9\u5b83\u7684\u5b50\u6811\u3002\u5982\u679c\u4e00\u4e2a\u5b50\u6811\u8fd8\u6709\u5f88\u591a\u5b50\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u5c06\u5206\u914d\u7ed9\u5b83\u7684\u6570\u5206\u914d\u4e0b\u53bb\u2026\u2026\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u9012\u5f52\u5206\u6cbb\u4e86\u2026\u2026\n\n\u5417\uff1f\n\n\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u9012\u5f52\u7684\u65f6\u5019\u5e76\u4e0d\u77e5\u9053\u6211\u4eec\u5f53\u524d\u5206\u914d\u7ed9\u8fd9\u4e2a\u5b50\u6811\u7684\u662f\u54ea\u4e9b\u6570\u3002\n\n\u4f46\u662f\u6211\u4eec\u77e5\u9053\u5206\u914d\u4e0b\u53bb\u7684\u6570\u4e00\u5b9a\u4e92\u4e0d\u76f8\u540c\uff08~~\u663e\u7136\uff0c\u56e0\u4e3a\u4e00\u5f00\u59cb\u662f\u4e00\u4e2a\u6392\u5217~~\uff09\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u5206\u914d\u4e0b\u53bb\u7684\u6570\u5206\u522b\u662f\u7b2c\u51e0\u5927\u5c31\u53ef\u4ee5\u3002\n\n\u7136\u540e\u6211\u4eec\u8fd8\u53d1\u73b0\u5b9e\u9645\u4e0a\u6211\u4eec\u8fde\u5206\u914d\u4e0b\u53bb\u7684\u6570\u5206\u522b\u662f\u7b2c\u51e0\u5927\u90fd\u4e0d\u9700\u8981\u77e5\u9053\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u5982\u679c\u5f53\u524d\u5b50\u6811$u$\u586b\u4e00\u4e2a$1\\sim size[u]$\u7684\u6392\u5217\u7684\u8bdd\uff0c\u6700\u7ec8\u6839\u8282\u70b9\u7684\u6700\u5927\u503c\u662f\u591a\u5c11\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8bbe$f[i]$\u8868\u793a\u5728\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u53f6\u5b50\u8282\u70b9\u586b\u5165$1\\sim size[i]$\u7684\u6392\u5217\uff0c$i$\u5b50\u6811\u7684\u7b54\u6848\uff08\u4e5f\u5c31\u662f$i$\u53ef\u4ee5\u586b\u7684\u6700\u5927\u503c\uff09\u3002\n\n~~\u8fd8\u662f\u5f88\u663e\u7136~~\u5982\u679c$i$\u662f\u53f6\u5b50\uff0c\u90a3\u4e48$f[i] = 1$\uff08\u4f60\u53ea\u80fd\u586b$1$\uff09\n\n\u7136\u540e\u770b$i$\u4e0d\u662f\u53f6\u5b50\u7684\u60c5\u51b5\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u9012\u5f52\u6c42\u51fa\u4e86$i$\u6240\u6709\u5b50\u6811\u7684$f$\u548c$size$\u3002\n\n\u5982\u679c$i$\u4e0a\u9762\u7684\u64cd\u4f5c\u662f\u5bf9\u5b50\u8282\u70b9\u53d6$\\max$\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5173\u5fc3\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\u7684\u6700\u5927\u503c\uff0c\u4e0d\u9700\u8981\u5173\u5fc3\u5176\u4ed6\u70b9\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u8fd9\u4e2a\u5b50\u6811$v$\uff0c\u7136\u540e\u6211\u4eec\u628a\u6700\u9760\u8fd1\u6700\u5927\u503c\u7684\u70b9\u90fd\u586b\u8fdb\u8fd9\u4e2a\u5b50\u6811\u91cc\uff0c\u90a3\u4e48\u7b54\u6848\u5373\u4e3a$size[i]-(size[v]-f[v])$\n\n\uff08\u56e0\u4e3a\u4f60\u586b\u4e86$size[v]$\u4e2a\u70b9\u5728\u8fd9\u4e2a\u5b50\u6811\u91cc\uff0c\u5c31\u6709$size[i]-size[v]$\u4e2a\u586b\u5c0f\u7684\u6570\u7684\u70b9\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u7136\u540e\u672c\u6765$v$\u6700\u5927\u80fd\u53d6$f[v]$\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u53d6$size[i]-size[v]+f[v]$\uff09\u3002\n\n\u7136\u540e\u5173\u4e8e\u600e\u4e48\u627e$v$\uff0c\u53ea\u9700\u8981\u5bf9\u6240\u6709\u5b50\u6811\u7684$size[v]-f[v]$\u53d6$\\min$\u5373\u53ef\u3002\n\n\u7136\u540e\u8003\u8651$i$\u4e0a\u9762\u7684\u64cd\u4f5c\u662f\u5bf9\u5b50\u8282\u70b9\u53d6$\\min$\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u8981\u8003\u8651\u628a\u6bd4\u8f83\u5927\u7684\u6811\u5747\u8861\u5730\u653e\u8fdb\u6bcf\u4e2a\u5b50\u6811\u91cc\u3002\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u5b50\u6811\u8981\u5360\u6389$size[v]-f[v]$\u4e2a\u6bd4\u8f83\u5927\u7684\u6570\u3002\u4e8e\u662f\u7b54\u6848\u5373\u4e3a$size[i]-\\sum{(size[v]-f[v]+1)}+1$\n\n\uff08\u53ef\u4ee5\u53c2\u8003\u7740\u4e0a\u9762\u7684\u89e3\u91ca\u7406\u89e3\uff09\n\n\u7136\u540e\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <algorithm>\n#define maxn 300005\ninline int read() {\n\tint d=0;char ch=getchar();while(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch)){d=d*10+ch-48,ch=getchar();}return d;\n}\n\nint n, op[maxn];\nint sz[maxn], f[maxn];\nint nlf[maxn];\nint head[maxn], ver[maxn], nxt[maxn], tot;\n\ninline void add(int u, int v) {\n\tver[++tot] = v, nxt[tot] = head[u], head[u] = tot;\n}\n\nvoid dfs(int u) {\n\tif(!nlf[u]) {sz[u] = f[u] = 1; return;} // \u662f\u53f6\u5b50\uff0c\u5230\u8fbe\u4e86\u5206\u6cbb\u8fb9\u754c\n\tif(op[u]) {\n\t\tf[u] = 0x3f3f3f3f; // \u4e3a\u4e86\u53d6min\u800c\u521d\u59cb\u5316\u7684\u6781\u5927\u503c\u2026\u2026\n\t\tfor(int p = head[u]; p; p = nxt[p]) {\n\t\t\tint v = ver[p]; dfs(v);\n\t\t\tsz[u] += sz[v];\n\t\t\tf[u] = std::min(f[u], sz[v]-f[v]);\n\t\t}\n\t\tf[u] = sz[u]-f[u];\n\t}\n\telse {\n\t\tfor(int p = head[u]; p; p = nxt[p]) {\n\t\t\tint v = ver[p]; dfs(v);\n\t\t\tsz[u] += sz[v];\n\t\t\tf[u] += sz[v]-f[v]+1;\n\t\t}\n\t\tf[u] = sz[u]-f[u]+1;\n\t}\n}\n\nint main() {\n\tn = read();\n\tfor(int i = 1; i <= n; ++i) op[i] = read();\n\tfor(int i = 2; i <= n; ++i) {\n\t\tint fa = read();\n\t\tadd(fa, i), nlf[fa] = 1;\n\t}\n\tdfs(1);\n\tprintf(\"%d\", f[1]);\n\treturn 0;\n}\n```\n\u7136\u540e\u8f6c\u79fb\u65b9\u7a0b\u770b\u4e0a\u53bb\u7279\u522b\u7684\u590d\u6742\uff0c\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u70b9\u90fd\u7528$size$\u51cf\u4e86\u4e00\u904d\u53c8\u51cf\u4e86\u56de\u53bb\uff0c~~\u6ca1\u610f\u601d~~\uff0c\u6211\u4eec\u8bbe$g[i] = size[i]-f[i]+1$\n\n\u4e0a\u9762$g[i]$\u7684\u5b9e\u9645\u542b\u4e49\u5c31\u662f\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u53f6\u5b50\u8282\u70b9\u586b\u5165$1\\sim size[i]$\u7684\u6392\u5217\uff0c$i$\u5b50\u6811\u80fd\u53d6\u5230\u7b2c\u51e0\u5927\u7684\u6570\u3002\n\n\u7136\u540e\u6211\u4eec\u628a$g[i] = size[i]-f[i]+1$\u4ee3\u5165\u4e0a\u9762\u7684\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6211\u4eec~~\u60ca\u5947\u5730~~\u53d1\u73b0\uff0c\u65b9\u7a0b\u53d8\u4e3a\u4e86\uff1a\n\n$$g[i] = \\min{g[v]}, op[i] = \\max$$\n\n$$g[i] = \\sum{g[v]}, op[i] = \\min$$\n\n\u65b9\u7a0b\u7b80\u5355\u4e86\u5f88\u591a\u3002\u4e0a\u9762\u65b9\u7a0b\u7684\u542b\u4e49\u53ef\u4ee5\u7c7b\u6bd4$f[i]$\u7684\u542b\u4e49\u89e3\u91ca\u51fa\u6765\u3002\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <algorithm>\n#define maxn 300005\ninline int read() {\n\tint d=0;char ch=getchar();while(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch)){d=d*10+ch-48,ch=getchar();}return d;\n}\n\nint n, op[maxn];\nint sz[maxn], g[maxn];\nint nlf[maxn];\nint head[maxn], ver[maxn], nxt[maxn], tot;\n\ninline void add(int u, int v) {\n\tver[++tot] = v, nxt[tot] = head[u], head[u] = tot;\n}\n\nvoid dfs(int u) {\n\tif(!nlf[u]) {sz[u] = g[u] = 1; return;}\n\tif(op[u]) g[u] = 0x3f3f3f3f; // \u4e3a\u4e86\u53d6min\u800c\u521d\u59cb\u5316\u7684\u6781\u5927\u503c\u2026\u2026\n\tfor(int p = head[u]; p; p = nxt[p]) {\n\t\tint v = ver[p]; dfs(v);\n\t\tsz[u] += sz[v];\n\t\tif(op[u]) g[u] = std::min(g[u], g[v]);\n\t\telse g[u] += g[v];\n\t}\n}\n\nint main() {\n\tn = read();\n\tfor(int i = 1; i <= n; ++i) op[i] = read();\n\tfor(int i = 2; i <= n; ++i) {\n\t\tint fa = read();\n\t\tadd(fa, i), nlf[fa] = 1;\n\t}\n\tdfs(1);\n    // \u6ce8\u610f\u9898\u76ee\u8981\u6c42\u7684\u662ff[1]\uff0c\u800cf[1] = sz[1]-g[1]+1\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8f93\u51fasz[1]-g[1]+1\n    // \u4e5f\u5c31\u662f\u57281~sz[1]\u4e2d\uff0c\u7b2cg[1]\u5927\u7684\u6570\n\tprintf(\"%d\", sz[1]-g[1]+1);\n\treturn 0;\n}\n```",
        "postTime": 1555235494,
        "uid": 79017,
        "name": "\u82b1\u91cc\u5fc3\u7231",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1153D \u3010Serval and Rooted Tree\u3011"
    },
    {
        "content": "\u4e00\u79cd\u4e0d\u7528\u52a8\u8111\u5b50\u7684\u505a\u6cd5\u3002\n\n\u611f\u6027\u7406\u89e3\uff0c\u5047\u5982\u6211\u4eec\u80fd\u8ba9\u6839\u8282\u70b9\u7684\u6570\u4e3a $x$\uff0c\u90a3\u4e48\u5c06\u503c\u4e3a $x$ \u7684\u53f6\u8282\u70b9\u6362\u6210\u66f4\u5c0f\u7684\u503c\u4e00\u5b9a\u80fd\u51d1\u51fa\u66f4\u5c0f\u7684\u6570\u3002\u8003\u8651\u4e8c\u5206\u6839\u8282\u70b9\u7684\u503c\u80fd\u5426 $\\ge mid$\uff0c\u628a $\\ge mid$ \u7684\u6570\u770b\u6210 $1$\uff0c\u5269\u4e0b\u7684\u6570\u770b\u6210 $0$\uff0c\u76ee\u6807\u662f\u8ba9\u6839\u8282\u70b9\u503c\u4e3a $1$\u3002\n\n\u5173\u6ce8\u5230 $1$ \u7684\u6570\u91cf\u51cf\u5c0f\u7b54\u6848\u53ea\u4f1a\u53d8\u52a3\uff0c$1$ \u7684\u4e2a\u6570\u8d8a\u5c0f\u7b54\u6848\u8d8a\u5927\u3002\u90a3\u4e48\u6254\u6389\u4e8c\u5206\u7684\u5916\u58f3\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6700\u5c11\u7528\u51e0\u4e2a $1$ \u53ef\u4ee5\u8ba9\u6839\u8282\u70b9\u4e3a $1$\u3002\n\n\u8bbe $dp_{x}$ \u8868\u793a\u8ba9 $val_x=1$\uff0c\u5b50\u6811\u5185\u6700\u5c11\u586b\u51e0\u4e2a $1$\u3002\n\n\u5f53\u524d\u8282\u70b9\u53d6 $\\min$\uff0c$dp_{x}=\\sum dp_{y}$\uff1b\u5f53\u524d\u8282\u70b9\u53d6 $\\max$\uff0c$dp_{x}=\\min\\{dp_y\\}$\u3002\n\n\u7b54\u6848\u5373\u4e3a $k-dp_1+1$\u3002\n\n```cpp\n#include<cstdio>\n#define min(x,y) (x<y?x:y)\nint op[300001],fa[300001],dp[300001];\nbool nlv[300001];\nint main(){\n\tint i,n,cnt=0;\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++){\n\t\tscanf(\"%d\",&op[i]);\n\t\tif(op[i])dp[i]=n+1;\n\t}\n\tfor(i=2;i<=n;i++)scanf(\"%d\",&fa[i]),nlv[fa[i]]=1;;\n\tfor(i=n;i>1;i--){\n\t\tif(!nlv[i])dp[i]=1,cnt++;\n\t\tint x=fa[i];\n\t\tif(op[x])dp[x]=min(dp[x],dp[i]);\n\t\telse dp[x]+=dp[i];\n\t}\n\tprintf(\"%d\",cnt-dp[1]+1);\n}\n```",
        "postTime": 1671690458,
        "uid": 128606,
        "name": "2018ljw",
        "ccfLevel": 7,
        "title": "CF1153D\u9898\u89e3"
    },
    {
        "content": "\u6709\u6807\u9898\n\n\u4f17\u6240\u5468\u77e5\uff0c\u6839\u8282\u70b9\u6700\u7ec8\u7684\u6743\u503c\u6765\u81ea\u4e8e\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u8fd9\u5f88\u663e\u800c\u6613\u89c1\uff0c\u4f46\u662f\u95ee\u9898\u662f\uff1a\u6765\u81ea\u54ea\u4e2a\u53f6\u5b50\u8282\u70b9\uff1f\u8fd9\u4e2a\u662f\u65e0\u6cd5\u786e\u5b9a\u7684\n\n\u6211\u4eec\u867d\u7136\u4e0d\u77e5\u9053\u6765\u81ea\u54ea\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u4f46\u662f\u6211\u4eec\u4f9d\u65e7\u53ef\u4ee5\u6839\u636e\u6811\u7684\u4f18\u7f8e\u6027\u8d28\uff0c\u4f5c\u6811\u4e0a $dp$ \u89e3\u51b3\n\n\u6211\u4eec\u8bbe $dp_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u8282\u70b9\u6743\u503c\u6765\u81ea\u7684\u53f6\u5b50\u8282\u70b9\u5728\u6240\u6709\u7b2c $i$ \u4e2a\u8282\u70b9\u7684\u5b50\u6811\u7684\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\u4e2d\u6700\u5927\u80fd\u662f\u7b2c\u51e0\u5927\u7684\uff0c\u90a3\u4e48\u5982\u679c $i$ \u672c\u8eab\u4e3a\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u663e\u7136 $dp_i=1$\u3002\n\n\u63a5\u7740\u5206\u7c7b\u8ba8\u8bba\uff0c\u5982\u679c $i$ \u7684\u6743\u503c\u6765\u81ea\u4e8e\u513f\u5b50\u6743\u503c\u4e2d\u6700\u5927\u7684\uff0c\u90a3\u4e48\u5c31\u5c06\u6392\u540d\u6700\u9760\u524d\u7684\u513f\u5b50\u8282\u70b9\u53c2\u8003\u4e3a\u81ea\u5df1\u7684\u6392\u540d\uff0c\u53ea\u8981\u628a\u6700\u5927\u7684\u6743\u503c\u4e00\u4e00\u5206\u7ed9\u8be5\u513f\u5b50\u5b50\u6811\u4e0a\u7684\u53f6\u5b50\u8282\u70b9\u5373\u53ef\uff0c\u8fd9\u6837 $dp$ \u503c\u4e3a\u513f\u5b50 $dp$ \u503c\u4e2d\u6700\u5c0f\u7684\n\n\u5982\u679c\u76f8\u53cd\uff0c\u5176\u6743\u503c\u6765\u81ea\u4e8e\u513f\u5b50\u6743\u503c\u4e2d\u6700\u5c0f\u7684\uff0c\u4e0d\u59a8\u5c06\u6bcf\u4e2a\u513f\u5b50 $s$ \u7684\u5b50\u6811\u4e0a\u7684\u53f6\u5b50\u8282\u70b9\u4e2d\u6392\u540d\u524d $dp_s$ \u7684\u6743\u503c\u6c47\u96c6\u8d77\u6765\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8fd9\u6837\u6700\u5c0f\u7684\u6743\u503c\u5fc5\u5b9a\u6765\u81ea\u4e00\u4e2a\u513f\u5b50\u5b50\u6811\u4e4b\u4e0a\uff0c\u4e14\u5c31\u662f\u53f6\u5b50\u8282\u70b9\u4e2d\u6392\u540d\u4e3a\u5176 $dp$ \u503c\uff0c\u8fd9\u6837\u5bb9\u6613\u77e5\u9053 $dp_i$ \u4e3a\u513f\u5b50 $dp$ \u503c\u7684\u548c\n\n\u6c42\u51fa\u6839\u8282\u70b9\u6700\u9760\u524d\u6392\u540d $dp_1$ \u540e\uff0c\u6700\u7ec8\u7b54\u6848\u5373\u4e3a $k-dp_1+1$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 300005\n#define F(_i,_b,_e,_c) for(int _i=_b;_i!=_e;_i=_c)\nusing namespace std;\n\nint n,f[maxn],amt[maxn],son[maxn],bro[maxn],A;\nbool a[maxn];\n\nint dfs(int u){\n\tif(son[u]==0)return amt[u]=1;\n\tint ans=a[u]?maxn:0;\n\tF(v,son[u],0,bro[v]){\n\t\tint rans=dfs(v);\n\t\tif(a[u])ans=min(ans,rans);\n\t\telse ans+=rans;\n\t\tamt[u]+=amt[v];\n\t}\n\treturn ans;\n}\n\nint main(){\n\tcin>>n;\n\tF(i,1,n+1,i+1)cin>>a[i];\n\tF(i,2,n+1,i+1){\n\t\tcin>>f[i];\n\t\tbro[i]=son[f[i]];\n\t\tson[f[i]]=i;\n\t}\n\tA=dfs(1);\n\tcout<<amt[1]-A+1;\n\treturn 0;\n}\n```",
        "postTime": 1658152451,
        "uid": 472950,
        "name": "Mr_Terminator",
        "ccfLevel": 4,
        "title": "\u6ca1\u6709\u6807\u9898"
    },
    {
        "content": "### Description\n\u7ed9\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u70b9\u662f\u5b50\u8282\u70b9\u7684\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c\uff0c\u5c06\u53f6\u5b50\u8282\u70b9\u586b\u4e0a\u6574\u6570\uff0c\u4f7f\u8fd9\u68f5\u6811\u7684\u6839\u6700\u5927\u3002\n### Solution\n\u660e\u663e\u7684$dp$\u9898\uff0c\u4ee3\u7801\u5f88\u77ed\u3002\n\u5206\u7c7b\u8ba8\u8bba\u5982\u4e0b\uff1a\n\n1\u3001\u5982\u679c\u662f\u53f6\u5b50\u8282\u70b9\uff0c$d_x = 1$\n\n2\u3001\u5982\u679c\u662f$min$\u8282\u70b9\uff0c$d_x =\\sum_{y \\in son_x} d_y$\n\n3\u3001\u5982\u679c\u662f$max$\u8282\u70b9\uff0c$d_x = min_{y \\in son_x} d_y$\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 300005;\nint n, a[N], b[N], x, k, ans[N], c[N];\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", &a[i]);\n        ans[i] = a[i] ? n + 1 : 0, c[i] = -1;\n    }\n    for (int i = 2; i <= n; i++) {\n        scanf(\"%d\", &x);\n        b[i] = x, c[x] = i;\n    }\n    for (int i = n; i > 1; i--) {\n        if (c[i] == -1)\n            ans[i] = 1, k++;\n        x = b[i];\n        ans[x] = a[x] ? std::min(ans[x], ans[i]) : ans[x] + ans[i];\n    }\n    printf(\"%d\\n\", k + 1 - ans[1]);\n    return 0;\n}\n```",
        "postTime": 1555485915,
        "uid": 13746,
        "name": "Trimsteanima",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1153D \u3010Serval and Rooted Tree\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u8fd9\u9897\u6811\u7684\u6bcf\u4e2a\u70b9\u662f\u4ed6\u7684\u5b50\u8282\u70b9\u7684\u6700\u5927\u503c\u6216\u8005\u6700\u5c0f\u503c\uff0c\u8981\u6c42\u4f60\u5c06\u8fd9\u68f5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u586b\u4e0a\u6574\u6570\uff081\u5230\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\uff09\u8fd9\u68f5\u6811\u7684\u6839\u6700\u5927\u3002\uff08\u5dee\u4e0d\u591a\u5c31\u662f\u8fd9\u4e2a\u610f\u601d\u5427\uff1f\uff09\n\n\u9996\u5148\u5f88\u660e\u663e\u7b26\u5408\u6811\u72b6dp\u7684\u7ed3\u6784\uff08\u6bcf\u4e2a\u8282\u70b9\u72b6\u6001\u7531\u4ed6\u7684\u5b50\u8282\u70b9\u72b6\u6001\u63a8\u51fa\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u6309\u7167\u6811\u72b6dp\u7684\u60f3\u6cd5\u6765\u60f3\uff0c\u9898\u610f\u53ef\u77e5\u6839\u8282\u70b9\u5fc5\u5b9a\u4e3a\u53f6\u5b50\u8282\u70b9\u4e2d\u7684\u4e00\u4e2a\u4e14\u53f6\u5b50\u8282\u70b9\u5fc5\u5b9a\u4e3a1\u5230\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\uff08\u5e9f\u8bdd\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u72b6\u6001\u4e3a\u8be5\u8282\u70b9\u6700\u5927\u80fd\u4e3a\u4ed6\u6240\u5305\u542b\u7684\u53f6\u5b50\u8282\u70b9\u91cc\u7684\u7b2c\u51e0\u5927\u7684\u6570\uff08\u56e0\u4e3a\u6211\u4eec\u8981\u6700\u5927\u7684\u6240\u4ee5\u6c42\u7b2c\u51e0\u5927\u7684\u6570\uff09\u3002\n\u5982\u6b64\u53ef\u4ee5\u63a8\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u3002\n\n1.\u5982\u679c\u8be5\u70b9\u4e3a\u9700\u8981\u6700\u5927\u503c\u5219\u8fd9\u4e2a\u70b9\u7684\u503c\u4e3a\u4ed6\u6240\u6709\u7684\u5b50\u8282\u70b9\uff08\u6ce8\u610f\u662f\u5b50\u8282\u70b9\uff09\u7684\u6700\u5c0f\u503c\uff0c\uff08\u8981\u6700\u5c0f\u503c\u662f\u56e0\u4e3a\u8fd9\u91cc\u5b58\u7684\u662f\u7b2c\u51e0\u5927\uff08\u7b2c\u4e00\u5927\u80af\u5b9a\u8981\u6bd4\u7b2c\u4e8c\u5927\u5927\u7684\uff09\uff09\u3002\n\n\n2.\u5982\u679c\u8be5\u70b9\u4e3a\u9700\u8981\u6700\u5c0f\u503c\u5219\u8fd9\u4e2a\u70b9\u7684\u503c\u4e3a\u4ed6\u6240\u6709\u5b50\u8282\u70b9\uff08\u6ce8\u610f\u662f\u5b50\u8282\u70b9\uff09\u7684\u548c\u3002\uff08\u4ed6\u80af\u5b9a\u6bd4\u8fd9\u4e9b\u5b50\u8282\u70b9\u5927\u7684\u6570\u5c0f\uff0c\u6240\u4ee5\u662f\u548c\uff09\n\n\u6700\u540e\u7528\u53f6\u5b50\u8282\u70b9-dp\u30101\u3011+1\u5c31\u53ef\u4ee5\u4e86\u3002\n\u7136\u540e\u5199\u5c31\u662f\u4e86\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <cstring>\nusing namespace std;\nvector<int> tr[310000];\nint bj[310000];\nint b[310000];\nint dp[510000];\nint m,n,q,h,gudan;\nint dpp(int x1)\n{\n\tint minn=1e9+7,sum=0;\n\tif(tr[x1].size()==0)\n\t{\n\t\tdp[x1]=1;\n\t\treturn 0;\n\t}\n\tfor(int x=0;x<tr[x1].size();x++)\n\t{\n\t\tif(dp[tr[x1][x]]==-1)\n\t\t{\n\t\t\tdpp(tr[x1][x]);\n\t\t\tminn=min(dp[tr[x1][x]],minn);\n\t\t\tsum+=dp[tr[x1][x]];\n\t\t}\n\t}\n\tif(b[x1]==1)\n\t{\n\t\tdp[x1]=minn;\n\t}\n\telse\n\t{\n\t\t\n\t\tdp[x1]=sum;\n\t}\n}\nint main()\n{\n\tmemset(dp,-1,sizeof(dp));\n\tcin>>m;\n\tfor(int x=1;x<=m;x++)\n\t{\n\t\tcin>>b[x];\n\t}\n\tfor(int x=2;x<=m;x++)\n\t{\n\t\tcin>>h;\n\t\ttr[h].push_back(x);\n\t\tbj[h]++; \n\t}\n\tfor(int x=1;x<=m;x++)\n\t{\n\t\tif(bj[x]==0)\n\t\t{\n\t\t\tgudan++;\n\t\t}\n\t}\n\tdpp(1);\n\tcout<<gudan-dp[1]+1<<endl;\n}\n```\n\n\n\n",
        "postTime": 1555407493,
        "uid": 73320,
        "name": "lenaalyth",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1153D \u3010Serval and Rooted Tree\u3011\uff08\u6811\u5f62dp)"
    },
    {
        "content": "**\u4ece\u53d8\u5316\u4e2d\u627e\u4e0d\u53d8**\n\n\n\n------------\n\n\n\u521d\u770b\u8fd9\u9053\u9898\uff0c\u611f\u89c9\u5341\u5206\u4e0d\u53ef\u505a\uff0c\u4e00\u5806\u4e0d\u77e5\u9053\u7684\u6570\uff0c\u8ba9\u4f60\u6c42 $\\min/\\max$ \u540e\u6700\u5927\u662f\u591a\u5c11\uff1f\n\n\u5982\u679c\u53ea\u662f\u76ef\u4f4f\u8fd9\u4e9b\u6570\u672c\u8eab\uff0c\u60f3\u7740\u600e\u4e48\u53bb\u586b\uff0c\u90a3\u5c31\u6ca1\u529e\u6cd5\u505a\u4e86\n\n\u5176\u5b9e\uff0c\u6211\u4eec\u53ea\u9700\u8981**\u4ece\u53d8\u5316\u4e2d\u627e\u4e0d\u53d8**\uff0c\u60f3\u60f3\uff1a\u4e00\u5806\u6570\u53d6 $\\min/\\max$\uff0c\u54ea\u4e9b\u4fe1\u606f\u662f\u5df2\u77e5\u7684\uff1f\n\n**\u6392\u540d\uff01**\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u8981 DP \u6392\u540d\u5373\u53ef\n\n\u8bbe $dp_u$ \u8868\u793a\u8282\u70b9 $u$ \u5728\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d**\u6700\u5c0f**\u6392\u540d\u591a\u5c11\uff08\u6ce8\uff1a\u6211\u4eec\u4ece\u5927\u5230\u5c0f\u6392\uff0c\u5373\u8ba4\u4e3a\u6700\u5927\u7684\u90a3\u4e2a\u4e3a\u7b2c\u4e00\u540d\uff09\n\n\u5219\uff1a\n\n- \u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u662f $\\max$ \uff0c\u5219\u5b83\u7684\u6392\u540d**\u6700\u5c0f**\u4e3a\u5b83**\u6240\u6709\u513f\u5b50**\u7684\u6392\u540d\u7684**\u6700\u5c0f\u503c**\uff0c\u6700\u5c0f\u503c\u5f53\u6211\u4eec\u7ed9**\u6392\u540d\u6700\u5c0f\u7684\u513f\u5b50\u7684\u5b50\u6811**\u5206\u914d\u6700\u5927\u7684\u6570\u636e\u65f6\u5f97\u5230\n\n- \u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u662f $\\min$ \uff0c\u5219\u5b83\u7684\u6392\u540d**\u6700\u5c0f**\u4e3a\u5b83**\u6240\u6709\u513f\u5b50**\u7684\u6392\u540d**\u4e4b\u548c**\uff0c\u6700\u5c0f\u503c\u5f53\u8fd9\u6837\u5206\u914d\u65f6\u5f97\u5230\uff1a\n\n  - \u82e5\u5b83\u7684\u513f\u5b50 $i$ \u7684\u6392\u540d\u4e3a $k$ \uff0c\u5219**\u5148**\u7ed9\u5b83\u5206\u914d $k$ \u4e2a**\u8fd8\u6ca1\u6709\u88ab\u5206\u914d\u7684**\u6700\u4f18\u7684\u6570\u636e\n  \n  - \u5269\u4e0b\u7684\u6570\u636e\u968f\u4fbf\u5206\n\n\u6240\u4ee5\uff0c\u4e0a\u8ff0\u5206\u6790\u7684\u6700\u5c0f\u503c\u4e00\u5b9a\u53ef\u4ee5\u88ab\u53d6\u5230\n\n\u6700\u540e\uff0c\u6211\u4eec\u7b97\u51fa\u6839\u8282\u70b9\u7684\u6392\u540d\uff0c\u7528\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u51cf\u53bb\uff0c\u518d+1\u5373\u53ef\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define F(i,j,k) for (signed i=signed(j);i<=signed(k);i++)\n#define endl '\\n'\nconst int maxn=3e5+5;\nint n,x,leaf;\nvector<int> v[maxn];\nbool a[maxn];\nint dfs(int u,int fa){\n\t// cerr<<u<<\" \"<<fa<<endl;\n\tif(v[u].size()==1) return leaf++,1;\n\tif(a[u]){\n\t\tint ans=INT_MAX;\n\t\tfor(auto i:v[u]){\n\t\t\tif(i==fa) continue;\n\t\t\tans=min(ans,dfs(i,u));\n\t\t}\n\t\treturn ans;\n\t}\n\telse{\n\t\tint ans=0;\n\t\tfor(auto i:v[u]){\n\t\t\tif(i==fa) continue;\n\t\t\tans+=dfs(i,u);\n\t\t}\n\t\treturn ans;\n\t}\n}\nsigned main() { \n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcout.tie(0);\n\tcin>>n;\n\tF(i,1,n) cin>>a[i];\n\tF(i,2,n) cin>>x,v[x].push_back(i),v[i].push_back(x);\n\tdfs(1,1);//\u5148\u7b97\u4e00\u4e0b\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\n\tcout<<leaf-dfs(1,1)+1<<endl;\n\treturn 0; \n}\n```\n\n",
        "postTime": 1660796729,
        "uid": 482660,
        "name": "konyakest",
        "ccfLevel": 6,
        "title": "CF1153D Serval and Rooted Tree"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.com.cn/problem/CF1153D)\n\n\u9898\u76ee\u5927\u610f\u4e3a\uff1a\n\n$n$ \u4e2a\u8282\u70b9\u4ee5 $1$ \u4e3a\u6839\u7684\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u64cd\u4f5c `max` \u6216 `min`\uff08$0$ \u8868\u793a `min`\uff0c$1$ \u8868\u793a `max`\uff09\uff0c\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u4e2d\u7684\u503c\u5e94\u8be5\u5206\u522b\u7b49\u4e8e\u5176\u5b50\u8282\u70b9\u4e2d\u6240\u6709\u503c\u7684\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c\u3002\u5047\u8bbe\u6811\u4e0a\u6709 $k$ \u4e2a\u53f6\u8282\u70b9\uff0c\u4f60\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u53f6\u8282\u70b9\u586b\u4e0a $[1,k]$ \u7684\u6570\u5b57\uff0c\u4e14\u6bcf\u4e2a\u6570\u5b57\u53ea\u4f7f\u7528\u4e00\u6b21\uff0c\u6c42\u6839\u8282\u70b9\u7684\u6700\u5927\u503c\u3002\n\n---\n\u9996\u5148\u8fd9\u662f\u4e00\u9053\u7b80\u5355\u7684 `\u6811\u5f62DP`\uff0c\u5982\u679c\u662f\u8fdb\u884c `min` \u64cd\u4f5c\uff0c\u5c31\u8981\u6c42\u6bcf\u4e2a\u5b50\u8282\u70b9\u5927\u4e8e\u7236\u8282\u70b9\uff0c\u53cd\u4e4b\u4e5f\u6210\u7acb\u3002\n\n\u9009\u62e9\u4e00\u4e2a**\u53f6\u5b50\u7ed3\u70b9\u6570\u6700\u5c0f**\u7684\u5b50\u6811\uff0c\u5bf9\u5176\u6240\u6709\u513f\u5b50\u80fd\u9009\u62e9\u7684\u6700\u5c0f\u53f6\u5b50\u8282\u70b9\u6570\u53d6 `min`\u3002\u5bf9\u5176\u5b50\u8282\u70b9\u80fd\u9009\u62e9\u7684\u6700\u5c0f\u53f6\u5b50\u7ed3\u70b9\u6570**\u6c42\u548c**\uff0c\u4f5c\u4e3a\u8be5\u8282\u70b9**\u80fd\u9009\u62e9\u7684\u6700\u5c0f\u53f6\u5b50\u7ed3\u70b9\u6570**\u3002\n\n\n## code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint ch=0,num=0;\n\tchar c=getchar();\n\twhile(!isdigit(c))ch|=(c=='-'),c=getchar();\n\twhile(isdigit(c))num=(num<<1)+(num<<3)+(c^48),c=getchar();\n\treturn ch?-num:num;\n}\ninline void write(int x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>=10)write(x/10);\n\tputchar(x%10+'0');\n}\nint n,a[300005],dp[300005],tot;\nbool flag[300005];\nvector<int>G[300005];\ninline void dfs(int x){\n\tfor(int i=0;i<G[x].size();++i){\n\t\tdfs(G[x][i]);\n\t\tif(a[x]==1){\n\t\t\tif(!dp[x])dp[x]=dp[G[x][i]];\n\t\t\tdp[x]=min(dp[x],dp[G[x][i]]);\n\t\t}else dp[x]+=dp[G[x][i]];\n\t}\n}\nsigned main(){\n\tn=read();\n\tfor(int i=1;i<=n;++i)a[i]=read();\n\tfor(int i=2;i<=n;++i){\n\t\tint x=read();\n\t\tG[x].push_back(i),flag[x]=1;\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tif(!flag[i])dp[i]=1,++tot;\n\t}\n\tdfs(1);\n\twrite(tot-dp[1]+1);\n\treturn 0;\n}\n```",
        "postTime": 1648203972,
        "uid": 482869,
        "name": "cqbzhyf",
        "ccfLevel": 5,
        "title": "CF1153D Serval and Rooted Tree\u9898\u89e3"
    },
    {
        "content": "## Update\n2022.4.3 \u66f4\u65b0\u4e86\u4e00\u4e2a\u9519\u522b\u5b57\n\n\u663e\u7136\u53ef\u4ee5\u53d1\u73b0\u672c\u9898\u662f\u6811\u5f62 `dp`\u3002\n\n\u73b0\u5728\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u975e\u5e38\u5bb9\u6613\u60f3\u5230\u7684\u8f6c\u79fb\uff1a\n\n\u8bbe $dp_i$ \u8868\u793a $i$ \u7684\u6700\u4f18\u89e3\u3002\n\n$dp_u\\gets\\min\\limits_{v=1}^ndp_v(v\\in u)(a_u=0)$\n\n$dp_u\\gets\\max\\limits_{v=1}^ndp_v(v\\in u)(a_u=1)$\n\n\u73b0\u5728\uff0c\u6709\u4e00\u4e2a\u6700\u5173\u952e\u7684\u95ee\u9898\u662f\uff1a$dp_v$ \u662f\u8981\u53d8\u5316\u7684\uff01\uff01\uff01\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6570\u7684\u6392\u540d\u4e0d\u4f1a\u53d8\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe $dp_i$ \u8868\u793a\u7684\u662f $i$ \u7684\u6700\u4f18\u6392\u540d\uff0c\u6392\u540d\u8d8a\u5c0f\u503c\u57df\u8d8a\u5927\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u7684 $dp$ \u4e3a $1$\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5f97\u5230\uff1a\n\n$dp_u\\gets\\min\\limits_{v=1}^ndp_v(v\\in u)(a_u=1)$\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u7ee7\u7eed\uff0c\u5982\u679c $a_u=0$\uff0c\u4e00\u4e2a\u5b50\u8282\u70b9 $v$ \u53ef\u4ee5\u663e\u7136\u5f97\u5230 $dp_u\\gets dp_v$\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8bbe $v_1$\u3001$v_2$ \u5206\u522b\u4e3a $u$ \u7684\u5b50\u8282\u70b9\uff0c\u5047\u8bbe\u9009\u62e9 $v_2$\uff0c\u90a3\u4e48 $v_1$ \u4e2d\u7684\u503c\uff0c$v_2$ \u5c31\u4e0d\u80fd\u6709\uff0c\u90a3\u4e48\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f $dp_{v_1}+dp_{v_2}$\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u53ef\u5f97\uff1a\n\n$dp_u\\gets\\sum\\limits_{v=1}^ndp_v(v\\in u)(a_u=0)$\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n```cpp\n#pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"Ofast,no-stack-protector\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=3e5+5;\nint n,k,dp[maxn],f[maxn];\nvector<int> G[maxn];\nvoid dfs(int u){\n\tif(!G[u].size()){\n\t\t++k;\n\t\tdp[u]=1;\n\t\treturn; \n\t}\n\tif(f[u])\n\t\tdp[u]=0x3f3f3f3f;\n\tfor(int i=0,len=G[u].size();i<len;++i){\n\t\tint v=G[u][i];\n\t\tdfs(v);\n\t\tif(f[u])\n\t\t\tdp[u]=min(dp[u],dp[v]);\n\t\telse\n\t\t\tdp[u]+=dp[v];\n\t}\n}\ninline char gc(){\n    static char buf[1000000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++;\n}\ninline int read(){\n\tint res=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t\tch=getchar();\n\twhile(ch>='0'&&ch<='9'){\n\t\tres=(res<<1)+(res<<3)+(ch^'0');\n\t\tch=getchar();\n\t}\n\treturn res;\n}\nint main(){\n\tn=read();\n\tfor(int i=1;i<=n;++i)\n\t\tf[i]=read();\n\tfor(int i=2,a;i<=n;++i){\n\t\ta=read();\n\t\tG[a].push_back(i);\n\t}\t\n\tdfs(1);\n\tprintf(\"%d\\n\",k-dp[1]+1);\n\treturn 0;\n}\n```",
        "postTime": 1647652695,
        "uid": 556362,
        "name": "UnnamedOrNamed",
        "ccfLevel": 5,
        "title": "CF1153D Serval and Rooted Tree \u9898\u89e3"
    },
    {
        "content": "# 0x00 \u601d\u8def\n\u5148\u770b\u9898\u3002\n>$n$ \u4e2a\u8282\u70b9**\u4ee5 $1$ \u4e3a\u6839\u7684\u4e00\u68f5\u6811**\uff0c\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u64cd\u4f5c $\\max$ \u6216 $\\min$\uff08$0$ \u8868\u793a $\\min$\uff0c$1$ \u8868\u793a $\\max$\uff09\uff0c\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u4e2d\u7684\u503c\u5e94\u8be5\u5206\u522b\u7b49\u4e8e**\u5176\u5b50\u8282\u70b9\u4e2d\u6240\u6709\u503c\u7684\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c**\u3002\u5047\u8bbe\u6811\u4e0a\u6709 $k$ \u4e2a\u53f6\u8282\u70b9\uff0c\u4f60\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u53f6\u8282\u70b9\u586b\u4e0a $[1,k]$ \u7684\u6570\u5b57\uff0c\u4e14\u6bcf\u4e2a\u6570\u5b57\u53ea\u4f7f\u7528\u4e00\u6b21\uff0c\u6c42**\u6839\u8282\u70b9\u7684\u6700\u5927\u503c**\u3002\n\n\u4ed6\u8981\u6c42\u6bcf\u4e2a\u6570\u5b57\u53ea\u7528\u4e00\u6b21\u2026\u2026\uff1f\n\n\u6216\u8005\u8bf4\u2026\u2026\u4e00\u4e2a\u53f6\u8282\u70b9\u53ef\u4ee5\u586b\u4efb\u610f\u4e00\u4e2a\u6570\uff1f\n\n\u6839\u8282\u70b9\u7684\u2026\u2026\u6700\u5927\u503c\uff1f\n\n\u60f3\u5230\u4ec0\u4e48\u4e86\u5417\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u5728\u67d0\u4e2a\u8282\u70b9\u4e0b\u7684\u6240\u6709\u53f6\u5b50\u8282\u70b9\u5360\u636e\u4e86\u5728\u6240\u6709\u6570\u4e2d\u6700\u5927\u7684\u6570\uff0c\u90a3\u4e48\u5728\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e $\\min$ \u548c $\\max$ \u627e\u5230\u8fd9\u4e2a\u8282\u70b9\u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5927\u503c\u5728 $[1,n]$ \u4ece\u5927\u5230\u5c0f\u7684\u6392\u5217\u4e2d\u6240\u5904\u7684\u4f4d\u7f6e\u3002\n\n\u63a5\u7740\u6709\u4e86\u601d\u8def\uff0c\u6211\u4eec\u518d\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\u3002\n# 0x01 $\\min$ & $\\max$\n1. $\\max$\n\n\t\u6211\u4eec\u53ea\u9700\u8981\u53bb\u627e\u5b83\u7684\u6240\u6709\u5b50\u8282\u70b9\u4e2d\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u5373\u53ef\u3002\n2. $\\min$\n\n\t\u7531\u4e8e\u5176\u8981\u6c42\u6bcf\u4e2a\u513f\u5b50\u7ed3\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e\u5b83\u81ea\u8eab\u7684\u503c \uff0c\u6211\u4eec\u8981\u770b\u5b83\u6240\u6709\u53ef\u4ee5\u5230\u8fbe\u7684\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\uff0c\u56e0\u4e3a\u6211\u4eec\u5047\u8bbe\u7684\u662f\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u6210\u4e3a\u6700\u5927\u7684\u503c\u662f\u591a\u5c11\uff0c\u800c\u6700\u76f4\u89c2\u7684\u5c31\u662f\u770b\u5b83\u7684\u513f\u5b50\u8282\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u513f\u5b50\u80fd\u9009\u62e9\u7684\u6700\u5c0f\u53f6\u5b50\u7ed3\u70b9\u6570\u4e4b\u548c\uff0c\u4f5c\u4e3a\u8be5\u8282\u70b9\u80fd\u9009\u62e9\u7684\u6700\u5c0f\u53f6\u5b50\u7ed3\u70b9\u6570\u3002\n## code\n```c++\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<vector>\nusing namespace std;\nint oper[300005],d[300005],leave;\nbool book[300005];\nvector<int>V[300005];\nvoid Go(int now)\n{\n        int i;\n        if(oper[now])//\u521d\u59cb\u503c\n            d[now]=1e9;\n        for(i=0;i<V[now].size();i++)\n        {\n            Go(V[now][i]);\n            if(!oper[now])//min\n                d[now]+=d[V[now][i]];\n            else//max\n                d[now]=min(d[now],d[V[now][i]]);\n        }\n        if(V[now].size()==0)//\u53f6\u5b50\u8282\u70b9\u503c\u5747\u4e3a1\n        {\n            d[now]=1;\n            leave++;\n        }\n}\nint main()\n{\n      int n,i,x;\n      scanf(\"%d\",&n);\n      for(i=1;i<=n;i++)\n          scanf(\"%d\",&oper[i]);\n      for(i=1;i<n;i++)\n      {\n          scanf(\"%d\",&x);\n          V[x].push_back(i+1);\n      }\n      Go(1);\n      printf(\"%d\",leave+1-d[1]);\n      //d\u6570\u7ec4\u8bb0\u5f55\u7684\u662f\u4ece\u5927\u5230\u5c0f\u53d6\u5f97\u7684\u6700\u5927\u503c\u7684\u6392\u540d\uff0c\u53c8\u7531\u4e8e\u53f6\u5b50\u8282\u70b9\u53d6\u503c\u4e3a[1,\u53f6\u5b50\u8282\u70b9\u6570\uff08leave)]\uff0c\u6240\u4ee5\u7528leave\u6765\u51cf\n      return 0;\n}\n```",
        "postTime": 1647651010,
        "uid": 465692,
        "name": "Harry_Hedwig",
        "ccfLevel": 6,
        "title": "CF1153D Serval and Rooted Tree \u9898\u89e3"
    },
    {
        "content": "## \u60f3\u51fa\u6765\u540e\u624d\u53d1\u73b0\u4e0d\u662f\u4ec0\u4e48\u96be\u9898\u54c8\u54c8\n\n\n\u521a\u5f00\u59cb\u770b\u771f\u662f\u65e0\u4ece\u4e0b\u624b,\u60f3$dp$\u5374\u53c8\u786e\u5b9a\u4e0d\u4e86\u6700\u5927\u503c\u3002\n\n\u4f46\u662f\u7a81\u7136\u53d1\u73b0\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027,\u90a3\u4e8c\u5206\u5440!!\n\n**\u90a3\u6211\u4eec\u76f4\u63a5\u53bbcheck\u8fd9\u4e2a\u4e8c\u5206\u7684mid\u5c31\u597d\u4e86**\n\n\u8bbe$dp[u]$\u8868\u793a$u$\u4e3a\u4e86\u8fbe\u5230$mid$\u8fd9\u4e2a\u503c,\u5b50\u6811\u7684\u6700\u5c0f\u82b1\u8d39(\u9700\u8981\u4f7f\u7528\u51e0\u4e2a\u5927\u4e8e$mid$\u7684\u503c)\n\n\u82e5$u$\u662f\u53f6\u5b50\u8282\u70b9,$dp[u]=1$,\u56e0\u4e3a\u53ea\u9700\u8981$u$\u9009\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e$mid$\u7684\u586b\u4e0a\n\n**\u5f53u\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\u65f6**\n\n\u663e\u7136\u5f53$u$\u8282\u70b9\u53d6$max$\u65f6,\u5728\u6240\u6709\u513f\u5b50\u4e2d\u9009\u4e00\u4e2a\u6700\u5c0f\u7684$dp[son]$\u5373\u53ef\n\n\u5f53$u$\u8282\u70b9\u53d6$min$\u65f6,\u6bcf\u4e2a\u513f\u5b50\u90fd\u8981\u8fbe\u5230$mid$,\u6240\u4ee5$dp[u]=\\sum{dp[son]}$\n\n\u90a3\u4e481\u8282\u70b9\u5230\u8fbemid\u9700\u8981\u7684\u6700\u5c0f\u82b1\u8d39\u662f$dp[1]$\n\n\u800c\u4e00\u5171\u6709$k-mid+1$\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e$mid$($k$\u8868\u793a\u53f6\u5b50\u8282\u70b9\u4e2a\u6570)\n\n\u6240\u4ee5\u5f53$k>=dp[1]$\u65f6\u4e8c\u5206\u6210\u529f,\u7ee7\u7eed\u7f29\u5c0f\u8303\u56f4\n\n[\u4e8c\u5206dp\u4ee3\u7801](https://paste.ubuntu.com/p/XYyphQrmsC/)\n\n\u4f46\u662f\u6211\u7adf\u7136\u7684\u53d1\u73b0\u6811\u578bdp\u7684\u8fc7\u7a0b\u4e2d\u5b8c\u5168\u6ca1\u6709\u7528\u5230\u4e8c\u5206\u7684$mid!$\n\n\u8fd9\u8bf4\u660e\u6bcf\u6b21$dfs$\u5f97\u5230\u7684$dp$\u6570\u7ec4\u76f8\u540c,\u4e0d\u9700\u8981\u6bcf\u6b21\u4e8c\u5206\u90fd\u53bb$dfs$\n\n**\u5b9e\u9645\u4e0a\u8fde\u4e8c\u5206\u90fd\u4e0d\u9700\u8981\u4e86**\n\n\u56de\u60f3\u4e00\u4e0b\u8bbe\u8ba1\u7684\u72b6\u6001$dp[i]$\n\n\u5b9e\u9645\u4e0a\u5c31\u8868\u793a$i$\u8282\u70b9\u8981\u8fbe\u5230$x$,\u9700\u8981\u6709$dp[i]$\u4e2a\u6bd4x\u5927\u7684\u6570\u5b57!!\n\n\u4e5f\u5c31\u662f$k-x+1>=dp[1]$\n\n$x<=k+1-dp[1]$\n\n$x$\u6700\u5927\u53d6$k+1-dp[1]$\n\n$\u81f3\u4e8e\u4ee3\u7801\u548c\u90a3\u4e2a\u4e8c\u5206\u7684\u4e00\u6478\u4e00\u6837,\u5c31\u662f\u53bb\u6389\u4e86\u4e8c\u5206\u800c\u5df2.$\n\n",
        "postTime": 1596427402,
        "uid": 299810,
        "name": "issue_is_fw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1153D \u3010Serval and Rooted Tree\u3011"
    }
]