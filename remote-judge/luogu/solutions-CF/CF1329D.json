[
    {
        "content": "\u4eba\u751f\u4e2d\u7b2c\u4e00\u6b21\u5728\u6bd4\u8d5b\u671f\u95f4\u505a\u5bf9 $3000$ \u96be\u5ea6\u7684\u9898\uff0c\u53d1\u7bc7\u9898\u89e3\u5e86\u795d\u4e00\u4e0b\u3002\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 $s$\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5220\u6389\u5b83\u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u6ee1\u8db3\u8fd9\u4e2a\u5b50\u4e32\u4e2d\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u5b57\u7b26\u5747\u4e0d\u76f8\u540c\uff0c\u6c42\u6700\u5c11\u9700\u8981\u51e0\u6b21\uff0c\u8f93\u51fa\u65b9\u6848\u3002\n\n### \u5206\u6790\n\n\u9996\u5148\u8ba9\u6211\u4eec\u624b\u73a9\u627e\u4e00\u627e\u89c4\u5f8b\u3002\n\n\u5982\u679c $s$ \u4e2d\u4e0d\u5b58\u5728\u4e24\u4e2a\u76f8\u90bb\u5b57\u7b26\u76f8\u7b49\uff0c\u90a3\u4e48\u53ef\u4ee5 $1$ \u6b65\u5220\u5b8c\u3002\n\n\u5426\u5219\uff0c\u5047\u8bbe\u6709 $k$ \u5bf9\u76f8\u90bb\u7684\u76f8\u540c\u5b57\u7b26\uff0c\u5bb9\u6613\u53d1\u73b0\u6bcf\u6b21\u64cd\u4f5c\u6700\u591a\u53ea\u80fd\u51cf\u5c11\u4e24\u5bf9\uff0c\u6240\u4ee5\u64cd\u4f5c\u6570\u91cf\u7684\u4e0b\u754c\u662f $\\lceil\\frac k2\\rceil+1$\u3002\n\n\u6bcf\u6b21\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u9009\u62e9\u4e24\u4e2a\u6ee1\u8db3 $s_i=s_{i+1}$ \u7684\u4f4d\u7f6e\uff0c\u8981\u6c42\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u6240\u6709\u76f8\u90bb\u5b57\u7b26\u90fd\u4e0d\u76f8\u7b49\uff0c\u5c06\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5b50\u4e32\u5220\u6389\u3002\n\n\u4e3a\u4e86\u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\uff0c\u6211\u4eec\u81ea\u7136\u5e0c\u671b\u5220\u6389\u4e4b\u540e\u65b0\u62fc\u63a5\u8d77\u6765\u7684\u5b57\u7b26\u4e0d\u76f8\u7b49\u3002\n\n### \u8f6c\u5316\n\n\u6211\u4eec\u91cd\u65b0\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32 $t$\u3002\u5982\u679c $s_i=s_{i+1}$\uff0c\u90a3\u5c31\u5728 $t$ \u7684\u672b\u5c3e\u65b0\u52a0\u5165\u5b57\u7b26 $s_i$\u3002\n\n\u8fd9\u6837\u6784\u9020\u4e4b\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u6b21\u64cd\u4f5c\u5bf9\u5e94\u4e86\u4e0b\u9762\u4e24\u79cd\u60c5\u51b5\uff1a\n\n- \u9009\u62e9\u4e00\u4e2a $i$ \u4f7f\u5f97 $t_i\\neq t_{i+1}$\uff0c\u5220\u6389 $t_i$ \u548c $t_{i+1}$\u3002\n- \u9009\u62e9\u4e00\u4e2a $i$\uff0c\u5220\u6389 $t_i$\u3002\n\n\u82e5\u901a\u8fc7 $x$ \u6b21\u64cd\u4f5c\u80fd\u628a $t$ \u5220\u7a7a\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $x+1$\u3002\n\n\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u663e\u7136\u6ca1\u6709\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u4f18\u79c0\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c3d\u53ef\u80fd\u4f7f\u7528\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u3001\n\n### \u8ba8\u8bba\n\n\u8bbe $t$ \u7684\u957f\u5ea6\u4e3a $m$\uff0c\u5176\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b57\u7b26 $c$ \u51fa\u73b0\u4e86 $x$ \u6b21\u3002\n\n\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n- $2x> m$\uff1a\u7528\u6808\u6a21\u62df\uff0c\u6240\u6709\u5176\u5b83\u5b57\u7b26\u90fd\u8981\u548c $c$ \u4e00\u8d77\u5220\uff0c\u6700\u540e\u5269\u4e0b\u4e00\u4e9b $c$ \u6328\u4e2a\u5220\u3002\n- $2x\\leq m$\uff1a\u7528\u4e00\u4e2a\u6808\uff0c\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u5904\u7406\uff0c\u5982\u679c\u5220\u6389\u5f53\u524d\u5143\u7d20\u548c\u6808\u9876\u4e4b\u540e\u4ecd\u7136\u6ee1\u8db3 $2x\\le m$ \u90a3\u5c31\u5220\u6389\uff0c\u5426\u5219\u8fdb\u5165\u5230\u6808\u4e2d\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e2d\u5982\u679c $m$ \u662f\u5947\u6570\u5904\u7406\u5230\u6700\u540e\u4f1a\u51fa\u73b0\u65e0\u6cd5\u5220\u9664\u7684\u60c5\u51b5\uff0c\u6211\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u5148\u968f\u4fbf\u5220\u6389\u4e00\u4e2a\u5b57\u7b26\uff0c\u628a $m$ \u53d8\u6210\u5076\u6570\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\Sigma)$\u3002\uff08\u56e0\u4e3a\u6bcf\u6b21\u64cd\u4f5c\u9700\u8981\u6c42\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b57\u7b26\uff09\n\n### \u5b9e\u73b0\u7ec6\u8282\n\n\u7531\u4e8e\u9700\u8981\u8f93\u51fa\u65b9\u6848\uff0c\u6211\u4eec\u9700\u8981\u652f\u6301\u7ed9\u5b9a $t$ \u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6c42\u51fa\u6765\u8fd9\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u4e86 $s$ \u4e2d\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u987a\u4fbf\u6c42\u51fa\u6765\u8fd9\u4e2a\u4f4d\u7f6e\u5f53\u524d\u662f\u7b2c\u51e0\u4e2a\uff08\u56e0\u4e3a\u5220\u9664\u4f1a\u5bfc\u81f4\u7f16\u53f7\u53d1\u751f\u53d8\u5316\uff09\u3002\n\n\u4ece $t$ \u5230 $s$ \u7684\u6620\u5c04\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4\u5b9e\u73b0\uff0c\u800c\u67e5\u8be2\u5f53\u524d\u4f4d\u7f6e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\uff0c\u6c42\u51fa\u6765\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u524d\u6709\u591a\u5c11\u4f4d\u7f6e\u5df2\u7ecf\u88ab\u5220\u9664\u4e86\u3002\u9700\u8981\u652f\u6301\u533a\u95f4\u8d4b\u503c\u4e3a $1$ \u548c\u533a\u95f4\u6c42\u548c\u3002\n\n\u5728\u7528\u6808\u641e\u5b8c\u4e4b\u540e\uff0c\u53ef\u80fd\u4f1a\u53d1\u73b0\u6709\u4e00\u4e9b\u4f4d\u7f6e\u8fd8\u6ca1\u6709\u5220\u9664\u5e72\u51c0\uff0c\u6240\u4ee5\u6700\u540e\u8fd8\u9700\u8981\u8d2a\u5fc3\u4e00\u6b21\u3002\n\n### \u4ee3\u7801\n\n\u8003\u573a\u5199\u7684\u4ee3\u7801\uff0c\u5199\u7684\u6bd4\u8f83\u4e11\u964b\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define lc x<<1\n#define rc x<<1|1\n#define mid (l+r)/2\nusing namespace std;\nstruct Tree\n{\n\tint sum;\n\tbool tag;\n}tree[800005];//\u7ebf\u6bb5\u6811\nint T,n,m,pos[200005],cnt[26],u[200005],v[200005],num;\nchar s[200005],t[200005];\nint st[200005],top;\nvoid pushup(int x)\n{\n\ttree[x].sum=tree[lc].sum+tree[rc].sum;\n}\nvoid pushdown(int x,int l,int r)\n{\n\tif(tree[x].tag)\n\t{\n\t\ttree[lc].tag=tree[rc].tag=1;\n\t\ttree[lc].sum=mid-l+1;\n\t\ttree[rc].sum=r-mid;\n\t\ttree[x].tag=0;\n\t}\n}\nvoid build(int x,int l,int r)//\u7ebf\u6bb5\u6811\u9884\u5904\u7406\uff08\u6ce8\u610f\u591a\u6d4b\uff09\n{\n\ttree[x].sum=tree[x].tag=0;\n\tif(l==r)return;\n\tbuild(lc,l,mid);\n\tbuild(rc,mid+1,r);\n}\nvoid update(int x,int l,int r,int from,int to)//\u533a\u95f4\u8986\u76d6\n{\n\tif(l>=from&&r<=to)\n\t{\n\t\ttree[x].tag=1;\n\t\ttree[x].sum=r-l+1;\n\t\treturn;\n\t}\n\tpushdown(x,l,r);\n\tif(from<=mid)update(lc,l,mid,from,to);\n\tif(to>mid)update(rc,mid+1,r,from,to);\n\tpushup(x);\n}\nint query(int x,int l,int r,int from,int to)//\u6c42\u548c\n{\n\tif(l>=from&&r<=to)return tree[x].sum;\n\tpushdown(x,l,r);\n\tint ans=0;\n\tif(from<=mid)ans+=query(lc,l,mid,from,to);\n\tif(to>mid)ans+=query(rc,mid+1,r,from,to);\n\treturn ans;\n}\nbool check()//\u68c0\u67e5\u5f53\u524d\u662f\u5426\u6ee1\u8db32x<=m\n{\n\tint sum=0,maxx=0;\n\tfor(int i=0;i<26;i++)\n\t{\n\t\tsum+=cnt[i];\n\t\tmaxx=max(maxx,cnt[i]);\n\t}\n\treturn maxx*2<=sum;\n}\nint main()\n{\n\tscanf(\"%d\",&T);\n\twhile(T--)\n\t{\n\t\tscanf(\"%s\",s+1);\n\t\tn=(int)strlen(s+1);\n\t\tmemset(cnt,0,sizeof(cnt));\n\t\tm=0;\n\t\tfor(int i=2;i<=n;i++)\n\t\t{\n\t\t\tif(s[i]==s[i-1])\n\t\t\t{\n\t\t\t\tt[++m]=s[i];\n\t\t\t\tcnt[s[i]-'a']++;//cnt\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n\t\t\t\tpos[m]=i;\n\t\t\t}\n\t\t}\n\t\tt[++m]='\\0';//\u4ee5\u4e0a\u662f\u6c42\u51fa\u5b57\u7b26\u4e32t\n\t\tm--;\n\t\tint res=0;\n\t\tfor(int c=0;c<26;c++)\n\t\t  if(cnt[c]>cnt[res])res=c;\n\t\tnum=0;\n\t\tif(cnt[res]*2<=m)//\u60c5\u51b52\n\t\t{\n\t\t\tif(m&1)cnt[t[m]-'a']--,m--;//\u56e0\u4e3a\u5947\u6570\u7684\u60c5\u51b5\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\uff0c\u6240\u4ee5\u5148\u628am\u53d8\u6210\u5076\u6570\n\t\t\ttop=0;\n\t\t\tfor(int i=1;i<=m;i++)\n\t\t\t{\n\t\t\t\tif(!top||t[i]==t[st[top]])st[++top]=i;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcnt[t[i]-'a']--;\n\t\t\t\t\tcnt[t[st[top]]-'a']--;\n\t\t\t\t\tif(check())//\u5982\u679c\u5408\u6cd5\u90a3\u5c31\u5220\u9664\uff0c\u5426\u5219\u5165\u6808\n\t\t\t\t\t{\n\t\t\t\t\t\tnum++;\n\t\t\t\t\t\tu[num]=pos[st[top]],v[num]=pos[i]-1;\n\t\t\t\t\t\ttop--;\n\t\t\t\t\t}\n\t\t\t\t\telse cnt[t[i]-'a']++,cnt[t[st[top]]-'a']++,st[++top]=i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse//\u60c5\u51b51\n\t\t{\n\t\t\ttop=0;\n\t\t\tfor(int i=1;i<=m;i++)\n\t\t\t{\n\t\t\t\tif(t[i]=='a'+res)\n\t\t\t\t{\n\t\t\t\t\tif(t[st[top]]=='a'+res||!top)st[++top]=i;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnum++;\n\t\t\t\t\t\tu[num]=pos[st[top]],v[num]=pos[i]-1;\n\t\t\t\t\t\ttop--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(t[st[top]]=='a'+res&&top)\n\t\t\t\t\t{\n\t\t\t\t\t\tnum++;\n\t\t\t\t\t\tu[num]=pos[st[top]],v[num]=pos[i]-1;\n\t\t\t\t\t\ttop--;\n\t\t\t\t\t}\n\t\t\t\t\telse st[++top]=i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbuild(1,1,n);//\u7ebf\u6bb5\u6811\u64cd\u4f5c\n        //\u5728\u8fd9\u4e4b\u4e0a\uff0cuv\u8868\u793a\u4e00\u6b21\u64cd\u4f5c\u5bf9\u5e94\u5728s\u4e2d\u7684\u4f4d\u7f6e\n        //\u5728\u8fd9\u4e4b\u4e0b\uff0cuv\u8868\u793a\u8f93\u51fa\u7684\u64cd\u4f5c\n\t\tfor(int i=1;i<=num;i++)\n\t\t{\n\t\t\tint x=u[i]-query(1,1,n,1,u[i]);\n\t\t\tint y=v[i]-query(1,1,n,1,v[i]);\n\t\t\tupdate(1,1,n,u[i],v[i]);\n\t\t\tu[i]=x,v[i]=y;//\u7528\u7ebf\u6bb5\u6811\u66f4\u65b0\u4f4d\u7f6e\n\t\t}\n\t\tm=0;//\u7531\u4e8e\u8fd9\u6837\u5904\u7406\u4e4b\u540e\u5b57\u7b26\u4e32\u53ef\u80fd\u8fd8\u6ca1\u6709\u5220\u5e72\u51c0\uff0c\u6240\u4ee5\u518d\u8fdb\u884c\u4e00\u6b21\u5220\u9664\uff0c\u8fd9\u6b21\u53ea\u9700\u8981\u4ece\u524d\u5230\u540e\u8d2a\u5fc3\u5c31\u597d\u4e86\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(query(1,1,n,i,i))continue;\n\t\t\tt[++m]=s[i];\n\t\t}\n\t\tint last=1;\n\t\tfor(int i=2;i<=m;i++)\n\t\t{\n\t\t\tif(t[i]==t[i-1])\n\t\t\t{\n\t\t\t\tu[++num]=1;\n\t\t\t\tv[num]=i-last;\n\t\t\t\tlast=i;\n\t\t\t}\n\t\t}\n\t\tu[++num]=1;\n\t\tv[num]=m+1-last;\n\t\tprintf(\"%d\\n\",num);\n\t\tfor(int i=1;i<=num;i++)printf(\"%d %d\\n\",u[i],v[i]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1586141327,
        "uid": 54214,
        "name": "wucstdio",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1329D \u3010Dreamoon Likes Strings\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6709\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u7ed3\u8bba\uff1a**\u5c06\u4e00\u4e2a\u4e32\u5212\u5206\u6210\u82e5\u5e72\u4e2a\u7f8e\u4e3d\u7684\u5b50\u4e32\uff0c\u7528\u6700\u5c11\u7684\u6b21\u6570\u628a\u8fd9\u4e9b\u4e32\u53d6\u5b8c\u5219\u662f\u6700\u4f18\u65b9\u6848**\u3002\u53ef\u4ee5\u8bc1\u660e\u4e0d\u4f1a\u6709\u6bd4\u8fd9\u79cd\u53d6\u6cd5\u66f4\u4f18\u7684\u65b9\u6848\u3002\n\n\u66f4\u5f62\u5f0f\u5730\u63cf\u8ff0\uff0c\u5c06\u4e00\u4e2a\u4e32\u5212\u5206\u6210\u82e5\u5e72\u4e2a\u5b50\u4e32\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f\u627e\u5230\u6240\u6709 $a_i=a_{i+1}$ \u7684 $i$\u3002\u5bf9\u4e8e\u7b2c $x$ \u4e2a\u8fd9\u6837\u7684 $i$\uff0c\u5c06\u5176\u8bb0\u4e3a $p_x$\u3002\u90a3\u4e48\u4ece\u5de6\u5411\u53f3\u6570\u7684\u7b2c $x$ \u4e2a\u7f8e\u4e3d\u7684\u5b50\u4e32\u5c31\u4e3a $a[p_{x-1}+1..p_x]$\u3002\n\n\u7ecf\u8fc7\u624b\u73a9\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u628a\u6bcf\u4e2a\u7f8e\u4e3d\u7684\u5b50\u4e32\u7528\u5b83\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4ee3\u8868\uff0c\u6784\u6210\u4e00\u4e2a\u65b0\u4e32 $b$\uff0c\u5373$b_i=a_{p_i}$\u90a3\u4e48\u5728\u539f\u4e32 $a$ \u4e0a \u53d6\u4e00\u4e2a\u7f8e\u4e3d\u7684\u5b50\u4e32\u7684\u64cd\u4f5c\u5c31\u53d8\u4e3a\u4e0b\u8ff0\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n- \u5728\u65b0\u4e32 $b$ \u4e0a\u53d6\u4e00\u4e2a\u5b57\u7b26\u3002\n- \u5728\u65b0\u4e32 $b$ \u4e0a\u53d6\u4e24\u4e2a **\u76f8\u90bb\u4f46\u4e0d\u76f8\u540c** \u7684\u5b57\u7b26\u3002\n\n\u600e\u4e48\u7406\u89e3\u8fd9\u6837\u7684\u4e24\u4e2a\u64cd\u4f5c\u5462\uff1f\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n- \u5728\u539f\u4e32\u4e0a\u53d6\u4e86\u5934\u5c3e\u7684\u5b50\u4e32\uff0c\u663e\u7136\u5728 $b$ \u4e0a\u7684\u5f71\u54cd\u4e3a\u88ab\u53d6\u8d70\u4e00\u4e2a\u5b57\u7b26\u3002\n- \u5728\u539f\u4e32\u4e0a\u53d6\u4e86\u4e2d\u95f4\u7684\u5b50\u4e32\uff0c\u4f46\u662f\u5bf9\u4e8e\u88ab\u53d6\u8d70\u7684\u5b50\u4e32 $a[p_{i-1}+1,p_i]$\uff0c\u6709 $a_{p_{i-1}}=a_{p_i+1}$\u3002\u7ecf\u8fc7\u5206\u6790\u5f88\u5bb9\u6613\u5f97\u5230\uff0c\u8fd9\u5c31\u662f\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u53bb\u6389 **\u4e0d\u76f8\u540c\u7ea6\u675f** \u7684\u60c5\u51b5\u3002\n\n\u7ecf\u8fc7\u4e0a\u8ff0\u8ba8\u8bba\u81ea\u7136\u53ef\u4ee5\u5f97\u51fa\uff0c $b$ \u4e0a\u7684\u4e00\u6b21\u4e0a\u8ff0\u64cd\u4f5c\u5bf9\u5e94\u539f\u4e32 $a$ \u4e0a\u7684\u4e00\u6b21\u64cd\u4f5c\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\uff1a\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e0a\uff0c\u6bcf\u6b21\u53ef\u4ee5\u53d6\u8d70\u4e00\u4e2a\u5b57\u7b26\uff0c\u6216\u8005 **\u53d6\u8d70\u4e24\u4e2a\u76f8\u90bb\u4f46\u4e0d\u76f8\u540c** \u7684\u5b57\u7b26\uff0c\u6bcf\u6b21\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u540e\uff0c\u5c06\u5269\u4f59\u7684\u5b57\u7b26\u6309\u539f\u6765\u987a\u5e8f\u8fde\u63a5\u8d77\u6765\uff0c\u6c42\u6700\u5c11\u591a\u5c11\u6b21\u80fd\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53d6\u7a7a\u3002\n\n\u4f9d\u7136\u662f\u5206\u7c7b\u8ba8\u8bba\uff0c\u8bb0 $b$ \u4e2d\u6700\u591a\u51fa\u73b0\u7684\u5b57\u7b26\u6b21\u6570\u4e3a $mx$\uff0c$b$ \u7684\u957f\u5ea6\u4e3a $sum$\uff0c\u5219\uff1a\n\n- \u82e5 $\\frac{mx}{2}>sum$\uff0c\u7531\u4e8e\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u66f4\u4f18\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u4ee4\u5176\u4ed6\u5b57\u7b26\u4e0e\u6700\u591a\u51fa\u73b0\u7684\u5b57\u7b26\u914d\u5bf9\uff0c\u5982\u679c\u4e0d\u518d\u6709\u5b57\u7b26\u80fd\u4e0e\u6700\u591a\u51fa\u73b0\u7684\u5b57\u7b26\u914d\u5bf9\uff0c\u5219\u5c06\u5269\u4e0b\u7684\u5b57\u7b26\u5168\u90e8\u4f7f\u7528\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u53d6\u5b8c\u3002\n\n- \u82e5 $\\frac{mx}{2}\\leq sum$\uff0c\u7531\u4e8e\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u66f4\u4f18\uff0c\u6211\u4eec\u4f1a\u5c3d\u53ef\u80fd\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\uff0c\u4ee4\u4e0d\u76f8\u540c\u7684\u4e24\u4e2a\u5b57\u7b26\u914d\u5bf9\u3002\u76f4\u5230\u5f53\u524d\u7684 $\\frac{mx}{2}>sum$\uff0c\u8f6c\u5316\u4e3a\u7b2c\u4e00\u79cd\u60c5\u51b5\u3002\n\n\u7ecf\u8fc7\u624b\u73a9\u53ef\u4ee5\u53d1\u73b0\u4e0a\u8ff0\u8fc7\u7a0b\u4e0e\u62ec\u53f7\u5339\u914d\u5f88\u50cf\uff0c\u53ef\u4ee5\u4f7f\u7528\u6808\u5b9e\u73b0\u4e0a\u8ff0\u8fc7\u7a0b\u3002\n\n$b$ \u4e32\u4e2d\u9ed8\u8ba4\u5ffd\u7565\u4e86\u6700\u540e\u4e00\u4e2a\u5b50\u4e32\uff0c\u6240\u4ee5\u6700\u540e $ans=\\max(\\lceil\\frac{sum}{2}\\rceil,mx)+1$\uff0c\u8fd8\u9700\u8981\u6700\u540e\u4e00\u6b21\u5220\u9664\u5c06\u6700\u540e\u90a3\u4e2a\u4e32\u5220\u6389\u3002\n\n\u7531\u4e8e\u6700\u540e\u8f93\u51fa\u65b9\u6848\u65f6\u9700\u8981\u8f93\u51fa\u6bcf\u6b21\u5220\u9664\u540e\u7684\u4f4d\u7f6e\u800c\u4e0d\u662f\u521d\u59cb\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u533a\u95f4\u8d4b\u503c+\u533a\u95f4\u67e5\u8be2+\u5355\u70b9\u67e5\u8be2\u5373\u53ef\u3002\n\n**Show the Code**\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define mx tot[res]\n#define max(a,b) ((a)>(b)? (a):(b))\n#define min(a,b) ((a)<(b)? (a):(b))\nstruct node {int l,r;}tmp[200005];\nchar a[200005],b[200005];\nint tag[800005],sum[800005];\nint tot[355],resL[200005],resR[200005],st[200005],p[200005],tmpL[200005],tmpR[200005];\ninline bool cmp1(node x,node y) {return x.l<y.l;}\ninline bool cmp2(node x,node y) {return x.r>y.r;}\ninline void build(int p,int l,int r) {\n\ttag[p]=-1;sum[p]=0;\n\tif(l==r) {sum[p]=1;return;}\n\tint mid=l+r>>1;\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n\tsum[p]=sum[p<<1]+sum[p<<1|1];\n}\ninline void spread(int p,int l,int r) {\n\tint mid=l+r>>1;\n\tif(tag[p]!=-1) {\n\t\ttag[p<<1]=tag[p<<1|1]=tag[p];\n\t\tsum[p<<1]=(mid-l+1)*tag[p];\n\t\tsum[p<<1|1]=(r-mid)*tag[p];\n\t\ttag[p]=-1;\n\t}\n}\ninline void change(int p,int l,int r,int L,int R,int val) {\n\tif(L<=l&&r<=R) {sum[p]=(r-l+1)*val;tag[p]=val;return;}\n\tspread(p,l,r);\n\tint mid=l+r>>1;\n\tif(L<=mid) change(p<<1,l,mid,L,R,val);\n\tif(R>mid) change(p<<1|1,mid+1,r,L,R,val);\n\tsum[p]=sum[p<<1]+sum[p<<1|1];\n}\ninline int ask(int p,int l,int r,int L,int R) {\n\tif(L<=l&&r<=R) return sum[p];\n\tspread(p,l,r);\n\tint mid=l+r>>1,res=0;\n\tif(L<=mid) res+=ask(p<<1,l,mid,L,R);\n\tif(R>mid) res+=ask(p<<1|1,mid+1,r,L,R);\n\treturn res;\n}\ninline int askPos(int p,int l,int r) {\n\tif(l==r) return l;\n\tint mid=l+r>>1;\n\tif(sum[p<<1]) return askPos(p<<1,l,mid);\n\telse return askPos(p<<1|1,mid+1,r);\n}\nint main() {\n\tint T;\n\tscanf(\"%d\",&T);\n\twhile(T--) {\n\t\tint top=0,m=0,num=0,len=0,ans=0,res=0,now,pos1,pos2;\n\t\tscanf(\"%s\",a+1);\n\t\tlen=strlen(a+1);\n\t\tfor(register char ch='a';ch<='z';++ch) tot[ch]=0;\n\t\tfor(register int i=1;i<=len;++i) if(a[i]==a[i+1]) {++tot[a[i]];p[++num]=i;b[num]=a[i];}\n\t\tm=num;pos1=1;pos2=len;\n\t\t//for(register int i=1;i<=num;++i) printf(\"%d\\n\",p[i]);\n\t\tbuild(1,1,len);\n\t\t//std::swap(b[num],b[num-1]);std::swap(p[num],p[num-1]);\n\t\t//if(num&1) {resL[++ans]=1;resR[ans]=p[1];tmpL[ans]=1;tmpR[ans]=p[1];change(1,1,len,1,p[1],0);--tot[b[1]];--m;}\n\t\t//if(num&1) {resL[++ans]=p[num]+1;resR[ans]=len;tmpL[ans]=p[num]+1;tmpR[ans]=len;change(1,1,len,p[num]+1,len,0);--tot[b[num]];--num;--m;}\n\t\t//if(num&1) {resL[++ans]=p[num-1]+1;resR[ans]=p[num];tmpL[ans]=resL[ans];tmpR[ans]=resR[ans];change(1,1,len,resL[ans],resR[ans],0);--tot[b[num-1]];--m;}\n\t\tfor(now=1;now<=num;++now) {\n\t\t\t//if(now==num-1) continue;\n\t\t\tfor(register char ch='a';ch<='z';++ch) res=tot[res]>tot[ch]? res:ch;\n\t\t\tif(2*mx>=m) break;\n\t\t\tif(!top) {st[++top]=now;}\n\t\t\telse {\n\t\t\t\tif(b[st[top]]==b[now]) {st[++top]=now;}\n\t\t\t\telse {\n\t\t\t\t\t--tot[b[st[top]]];--tot[b[now]];\n\t\t\t\t\tresL[++ans]=ask(1,1,len,1,p[st[top]]+1);resR[ans]=ask(1,1,len,1,p[now]);\n\t\t\t\t\ttmpL[ans]=p[st[top]]+1;tmpR[ans]=p[now];\n\t\t\t\t\tchange(1,1,len,p[st[top]]+1,p[now],0);--top;m-=2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(m) {\n\t\t\tfor(;now<=num;++now) {\n\t\t\t\tif(!top||b[st[top]]==b[now]||(b[st[top]]!=res&&b[now]!=res)) {st[++top]=now;}\n\t\t\t\telse {\n\t\t\t\t\t--tot[b[st[top]]];--tot[b[now]];\n\t\t\t\t\tresL[++ans]=ask(1,1,len,1,p[st[top]]+1);resR[ans]=ask(1,1,len,1,p[now]);\n\t\t\t\t\ttmpL[ans]=p[st[top]]+1;tmpR[ans]=p[now];\n\t\t\t\t\tchange(1,1,len,p[st[top]]+1,p[now],0);--top;m-=2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(register int t=1;t<=top;++t) {\n\t\t\tint pos=askPos(1,1,len);\n\t\t\t--tot[b[st[t]]];\n\t\t\tresL[++ans]=ask(1,1,len,1,pos);\n\t\t\tresR[ans]=ask(1,1,len,1,p[st[t]]);\n\t\t\ttmpL[ans]=pos;tmpR[ans]=p[st[t]];\n\t\t\tchange(1,1,len,pos,p[st[t]],0);\n\t\t}\n\t\tprintf(\"%d\\n\",ans+1);\n\t\tfor(register int i=1;i<=ans;++i) {printf(\"%d %d\\n\",resL[i],resR[i]);tmp[i].l=tmpL[i];tmp[i].r=tmpR[i];}\n\t\t//for(register int i=1;i<=ans;++i)  {printf(\"%d %d\\n\",tmpL[i],tmpR[i]);tmp[i].l=tmpL[i];tmp[i].r=tmpR[i];}\n\t\t//pos1=(resL[i]<=pos1? max(pos1,resR[i]+1):pos1);(pos2=resR[i]>=pos2? min(pos2,resL[i]-1):pos2);\n\t\tstd::sort(tmp+1,tmp+1+ans,cmp1);\n\t\tfor(register int i=1;i<=ans;++i) pos1=(tmp[i].l<=pos1? max(pos1,tmp[i].r+1):pos1);\n\t\tstd::sort(tmp+1,tmp+1+ans,cmp2);\n\t\tfor(register int i=1;i<=ans;++i) pos2=(tmp[i].r>=pos2? min(pos2,tmp[i].l-1):pos2);\n\t\tpos1=max(pos1,1);pos2=min(pos2,len);\n\t\t//printf(\"%d %d\\n\",pos1,pos2);\n\t\t//for(register int i=1;i<=ans;++i) printf(\"%d %d\\n\",resL[i],resR[i]);\n\t\tprintf(\"%d %d\\n\",ask(1,1,len,1,pos1),ask(1,1,len,1,pos2));\n\t}\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n",
        "postTime": 1590745131,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1329D \u3010Dreamoon Likes Strings\u3011"
    },
    {
        "content": "# \u524d\u8a00\n\n~~\u56e0\u4e3a\u6211\u5e76\u6ca1\u6709\u770b\u61c2\u9898\u89e3\uff0c\u6240\u4ee5\u6211\u6765\u5199\u9898\u89e3\u4e86~~\u3002\n\n**update**\n\n20211105\uff1a~~\u56e0\u4e3a\u56fe\u592a\u4e11\u4e86~~\uff0c\u91cd\u65b0\u753b\u4e86\u4e00\u4e0b\u56fe\u3002\u5c0f\u8865\u4e86\u4e00\u4e0b\u3002\n\n20211108\uff1a\u9898\u89e3\u53c8\u88ab\u6253\u56de\u4e86\uff08/kk\uff09\uff0c\u66f4\u65b0\u4e86\u4e00\u4e0b LaTex\uff0c\u4f46\u5e76\u6728\u6709\u53d1\u73b0\u90a3\u91cc\u7684\u4ee3\u7801\u7247\u6bb5\u672a\u6269\u8d77\uff08\u6bd5\u7adf\u53ea\u6709\u6700\u540e\u4e00\u6bb5\u6709\u4ee3\u7801\uff09\uff0c\u5e0c\u671b\u518d\u88ab\u6253\u56de\uff08\u5e0c\u671b\u4e0d\u8981\uff09\u7684\u65f6\u5019\u80fd\u8be6\u7ec6\u8bf4\u660e\u4e00\u4e0b\u3002\n\n# \u6b63\u6587\n\n## \u524d\u7f6e\n\u6211\u4eec\u7528 $S$ \u8868\u793a\u9898\u76ee\u4e2d\u7684\u5b50\u4e32\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u8d2a\u5fc3\u7684\u7f8e\u4e3d\u5b50\u4e32\u4e3a\u539f\u4e32\u4e2d\u7684\u4e00\u4e2a\u5b50\u4e32 $S_{st}$ ~ $S_{en}$\u3002 \u4ed6\u7684\u5f00\u5934 $st$ \u6ee1\u8db3 $S_{st}=S_{st-1}$ \u6216 $st=1$\uff0c\u7ed3\u5c3e $en$ \u6ee1\u8db3 $S_{en}=S_{en+1}$\u3002\n\n\uff08\u4e0b\u6587\u7f8e\u4e3d\u5b50\u4e32\u82e5\u4e0d\u7279\u6b8a\u8bf4\u660e\uff0c\u90fd\u6307\u8d2a\u5fc3\u7684\u7f8e\u4e3d\u5b50\u4e32\uff09\n\n\u9996\u5148\uff0c\u5bb9\u6613\u53d1\u73b0\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u65b9\u6848\uff0c\u80fd\u6ee1\u8db3\u5c06\u539f\u5e8f\u5217\u5212\u5206\u6210\u82e5\u5e72\u4e2a\u7f8e\u4e3d\u5b50\u4e32\uff0c\u7136\u540e\u5bf9\u8fd9\u4e9b\u7f8e\u4e3d\u5b50\u4e32\u6574\u4f53\u8fdb\u884c\u64cd\u4f5c\u80fd\u5f97\u5230\u7b54\u6848\u3002\n\n\u82e5\u5212\u5206\u7684\u5e8f\u5217\u4e3a\u4e0d\u7f8e\u4e3d\u5b50\u4e32\uff0c\u90a3\u4e48 \u4e0d\u7f8e\u4e3d\u5b50\u4e32 $+$ \u7f8e\u4e3d\u5b50\u4e32 $=$ \u4e0d\u7f8e\u4e3d\u5b50\u4e32\uff0c\u8fd9\u4e2a\u4e0d\u7f8e\u4e3d\u5e8f\u5217\u5e76\u4e0d\u80fd\u5168\u90e8\u6d88\u53bb\uff08\u5373\u4f7f\u5408\u5e76\u4e5f\u4e0d\u80fd\uff09\uff0c\u6240\u4ee5\u4e0d\u5408\u6cd5\u3002\n\n\u82e5\u5212\u5206\u7684\u5e8f\u5217\u4e3a\u90e8\u5206\u7f8e\u4e3d\u5b50\u4e32\uff0c\u6bd4\u5982\u4e00\u4e2a\u5b8c\u6574\u7684\u7f8e\u4e3d\u5b50\u4e32\u88ab\u62c6\u6210\u4e24\u4e2a\uff0c\u90a3\u4e48\u60f3\u8981\u53d8\u5f97\u66f4\u4f18\uff0c\u80af\u5b9a\u662f\u6709\u4e00\u4e2a\u7f8e\u4e3d\u5b50\u4e32\u8d77\u5230\u6865\u7684\u4f5c\u7528\uff1a\uff08\u6d88\u53bb\u8fd9\u4e2a\u7f8e\u4e3d\u5b50\u4e32\u4f7f\u5f97\u4e24\u8fb9\u7684\u7f8e\u4e3d\u5b50\u4e32\u53ef\u4ee5\u5e76\u5728\u4e00\u8d77\u6d88\u6389\uff09\n\n[![InTDHg.png](https://z3.ax1x.com/2021/11/05/InTDHg.png)](https://imgtu.com/i/InTDHg)\n\n\uff08\u56fe\u4e2d $2$ \u662f\u6865\uff0c\u4e00\u79cd\u662f\u5148\u6d88\u53bb $2+3$\uff0c\u518d\u6d88\u53bb $1,4$\uff0c\u8fd8\u6709\u4e00\u79cd\u662f\u5148\u6d88\u53bb $2$,\u518d\u6d88\u53bb $1+3,4$\uff09\n\n\u56e0\u4e3a\u5bf9\u4e8e\u8fd9\u4e00\u4e2a\u6865\uff08$2$\uff09\u6765\u8bf4\uff0c\u5148\u6d88\u6389\u4ed6\u76f8\u5f53\u4e8e\u8ba9\u4ed6\u4e24\u8fb9\u7684\u6570\uff08$1,3$\uff09\u6709\u53ef\u80fd\u5408\u5728\u4e00\u8d77\u2014\u2014\u5373\u4e00\u6b21\u5c31\u80fd\u628a\u4ed6\u4eec\u4e24\u4e2a\u6d88\u6389\u3002\n\n\u4f46\u82e5\u6211\u4eec\u8d2a\u5fc3\u7684\u9009\u80af\u5b9a\u662f\u4e0d\u4f1a\u6bd4\u4e0a\u9762\u52a3\u7684\u3002\u56e0\u4e3a\u4f60\u53ef\u4ee5\u53d1\u73b0\u4ed6\u7701\u6389\u7684\u4e00\u6b21\u7528\u5728\u4e86\u53bb\u9664\u4e0d\u662f\u6865\u7684\u5b8c\u7f8e\u5b50\u4e32\uff08$2$\uff09\u3002\u90a3\u4e48\u6211\u4eec\u8d2a\u5fc3\u76f8\u5f53\u4e8e\u7528\u4e00\u6b21\u6d88\u6389\u4e86\u4e24\u4e2a\u5757\uff08$2,3$\uff09\uff0c\u518d\u7528\u8fd9\u591a\u51fa\u6765\u7684\u4e00\u6b21\u673a\u4f1a\u53bb\u5e72\u522b\u7684\u4e8b\u60c5\uff08\u6bd4\u5982\u6d88 $1$\uff09\u3002\n\n\u8bc1\u6bd5\u3002\n\n## \u8f6c\u5316\n\n\u6709\u4e86\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c\u6211\u4eec\u53ef\u4ee5\u624b\u6413\u51fa\u4e00\u4e2a\u60f3\u6cd5\uff1a\u628a\u6240\u6709\u7f8e\u4e3d\u5b50\u4e32\u90fd\u7f29\u6210\u4e00\u4e2a\u70b9\u6765\u505a\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u6784\u9020\u51fa\u4e00\u4e2a\u65b0\u7684\u4e32 $t$\uff0c\u5176\u4e2d\uff0c\u82e5\u6709 $S_i=S_{i-1}$\uff08$S$ \u8868\u793a\u5b57\u7b26\u4e32\uff09,\u6211\u4eec\u628a $S_i$ \u52a0\u5165\u5230 $t$ \u4e2d\u3002\n\n\u5373\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7f8e\u4e3d\u5b50\u4e32\uff08\u8d2a\u5fc3\u53d6\u6700\u5927\uff09\uff0c\u6211\u4eec\u53d6\u4ed6\u7684\u6700\u540e\u4e00\u4f4d\u4ee3\u8868\u8fd9\u4e2a\u5b50\u4e32\u3002\u56e0\u6b64\uff0c\u539f\u4e32\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u7f8e\u4e3d\u5b50\u4e32\u7686\u672a\u7b97\u5728\u5185\u3002\n\n\n\u7136\u540e\u8003\u8651\u539f\u5e8f\u5217\u7684\u64cd\u4f5c\u8f6c\u5316\u5230\u65b0\u5e8f\u5217\u4e0a:\n\n* \u4ece $t$ \u4e2d\u9009\u53d6\u4e00\u4e2a\u5b57\u6bcd\u5220\u53bb\n\n* \u4ece $t$ \u4e2d\u9009\u53d6\u4e24\u4e2a**\u76f8\u90bb**\u4e14**\u4e0d\u76f8\u540c**\u7684\u5b57\u6bcd\u5220\u53bb\n\n\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u663e\u7136\u662f\u5bf9\u7684\uff0c\u5bf9\u4e8e\u539f\u56fe\u4e0a\u5c31\u662f\u5220\u9664\u4ed6\u6240\u5bf9\u5e94\u7684\u7f8e\u4e3d\u5b50\u4e32\uff0c\u90a3\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u5462\uff1f\n\n\u6211\u4eec\u7ed3\u5408\u4e0b\u56fe\u6765\u8bc1\u660e\uff1a\n\n[![InHCeU.png](https://z3.ax1x.com/2021/11/05/InHCeU.png)](https://imgtu.com/i/InHCeU)\n\n\u6211\u4eec\u4ece\u4e0a\u56fe\u7684\u4e32\u4e2d\u5220\u6389 $S_6$ ~ $S_{11}$\uff0c\u5bf9\u5e94\u7740 $t$ \u4e2d\u7684\u5b57\u7b26 $E$ \u88ab\u5220\u6389\uff0c\u7136\u540e\u5462\uff1f\n\n[![InHYlt.png](https://z3.ax1x.com/2021/11/05/InHYlt.png)](https://imgtu.com/i/InHYlt)\n\n\u7531\u4e8e $S_2$ ~ $S_5$ \u4e0e $S_12$ \u5f62\u6210\u4e86\u4e00\u4e2a\u65b0\u7684\u4e32\uff0c\u7ed3\u5c3e\u4e3a $E$\u3002\u56e0\u6b64\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a $D$ \u5220\u6389\u3002\uff08**\u6240\u4ee5\u6700\u540e\u7559\u4e00\u4e2a\u4e32\u662f\u4e3a\u4e86\u4e0e\u524d\u9762\u76f8\u8fde**\uff09\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u5bf9\u5e94 $b$ \u4e2d\u5220\u9664\u7f8e\u4e3d\u5b50\u4e32\uff0c$b$ \u4e2d\u4ed6\u524d\u540e\u7684\u4e32\u4e0d\u80fd\u5408\u5e76\u3002\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u8868\u660e $b$ \u4e2d\u5220\u6389\u7f8e\u4e3d\u5b50\u4e32\uff0c$b$ \u4e2d\u524d\u540e\u5408\u5e76\u4e86\u3002\u56e0\u6b64 $t$ \u4e2d\u7684\u64cd\u4f5c\u4e0e $b$ \u4e2d\u7684\u64cd\u4f5c\u5bf9\u5e94\uff0c\u5e76\u4e14\u81ea\u5e26\u81ea\u52a8\u5408\u5e76\u529f\u80fd\u3002\u6240\u4ee5\u8f6c\u5316\u662f\u5bf9\u7684\uff0c\u4e0d\u7528\u62c5\u5fc3\u5220\u4e0d\u5168\u7684\u60c5\u51b5\u3002\n\nBUT\uff08\u4e00\u4e2a\u5f3a\u6709\u529b\u7684\u4f46\u662f\u51fa\u73b0\u4e86\uff01\uff09\n\n\u6211\u4eec\u8fd9\u4e2a\u5408\u5e76\u57fa\u4e8e\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u7f8e\u4e3d\u5b50\u4e32 $S_{st}$ ~ $S_{en}$\uff0c$S_{st-1}=S_{st}$\uff0c$S_{en}=S_{en+1}$\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7f8e\u4e3d\u5b50\u4e32\u7684\u6700\u540e\u4e00\u4f4d\u6765\u5224\u65ad\u3002\uff08\u56e0\u4e3a\u4ed6\u548c\u4e0b\u4e00\u4f4d\u76f8\u540c\uff0c\u53ef\u4ee5\u5224\u65ad\u80fd\u4e0d\u80fd\u5408\u5e76\uff09\n\n\u4e07\u4e00 $b$ \u4e2d\u7684\u7f8e\u4e3d\u5b50\u4e32\u524d\u540e\u88ab\u64cd\u4f5c\u8fc7\u4e86\u5462\uff1f\u6211\u4eec\u5c31\u4e0d\u80fd\u786e\u5b9a\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u64cd\u4f5c\u4e00\u4e2a\u7f8e\u4e3d\u5b50\u4e32\u65f6\uff0c\u4ed6\u7684\u540e\u9762\u6ca1\u6709\u64cd\u4f5c\u8fc7\u2014\u2014\u8fd9\u4e0d\u5c31\u662f\u6808\u5417\uff1f\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u7528**\u6808**\u6765\u6a21\u62df\u4e0a\u9762 $t$ \u4e2d\u7684\u64cd\u4f5c\u3002\n\n\n## \u6700\u4f18\u89e3\n\n\u9996\u5148\uff0c\u6211\u4eec\u7528 $c_i$ \u8868\u793a $t$ \u4e2d\u5b57\u7b26 $i$ \u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7528 $sum$ \u8868\u793a $t$ \u7684\u957f\u5ea6\u3002\n\n\u663e\u7136\uff0c\u7531\u4e8e\u6bcf\u6b21\u6700\u591a\u5220\u9664\u4e24\u4e2a\u5b57\u6bcd\uff0c\u56e0\u6b64\u4e0b\u754c\u4e3a $\\lceil\\frac{sum}{2}\\rceil$\u3002\u56e0\u4e3a\u76f8\u540c\u7684 $c_i$ \u4e0d\u80fd\u4e92\u6d88\uff0c\u6240\u4ee5\u81f3\u5c11\u8981\u6d88 $\\max(c_i)$ \u6b21\u3002\n\n\u7136\u9e45\u7b54\u6848\u662f\u53d6\u4ed6\u4eec\u4fe9\u7684\u6700\u5927\u503c\u52a0 $1$\uff1a$\\max(\\lceil\\frac{sum}{2}\\rceil,max(c_i))+1$\u3002\n\n\u6211\u4eec\u6765\u8bc1\u660e\u4e00\u4e0b\uff1a\n\n>\u5bf9\u4e8e $\\lceil\\frac{sum}{2}\\rceil \\le max(c_i)$ \u7684\u60c5\u51b5\uff0c\u6211\u4eec\u8bbe\u6700\u5927\u7684 $c_i$ \u4e3a $c_{max}$\uff0c\u5219\u82e5\u6709\u5176\u4ed6 $c_i$ \u6709\u503c\uff0c\u4ed6\u80af\u5b9a\u80fd\u627e\u5230\u4e00\u4e2a $c_i$ \u4e0e\u4ed6\u76f8\u90bb\uff08\u56e0\u4e3a $c_{max}$ \u4e0e\u5916\u754c\u63a5\u89e6\u6700\u5c11\u4e5f\u5c31\u662f\u6210\u4e3a\u4e00\u4e2a\u533a\u95f4\uff0c\u800c\u56e0\u4e3a\u8fd8\u6709\u5176\u4ed6\u6570\uff0c\u4ed6\u81f3\u5c11\u6709\u4e00\u8fb9\u4e0e\u4e00\u4e2a\u6570\u76f8\u63a5\uff09,\u7136\u540e\u4e0d\u505c\u5220\u53bb\u8fd9\u4e24\u4e2a\u6570\u76f4\u5230\u5176\u4ed6 $c_i$ \u6ca1\u6709\u503c\u3002\u7136\u540e\u4e0d\u505c\u5220\u81ea\u5df1\uff0c\u5219\u6700\u4f18\u6b21\u6570\u4e3a $c_{max}$\u3002\n\n>\u5bf9\u4e8e $\\lceil\\frac{sum}{2}\\rceil > max(c_i)$ \u7684\u60c5\u51b5\u3002\u5bf9\u4e8e\u6bcf\u6b21\u6211\u4eec\u90fd\u80fd\u627e\u5230\u4e24\u4e2a\u4e0d\u540c\u7684\u6570\uff08\u663e\u7136\u81f3\u5c11\u6709\u4e24\u79cd\u5b57\u7b26\uff0c\u56e0\u4e3a\u4e00\u4e2a $c_i \\le \\lceil\\frac{sum}{2}\\rceil$\uff0c\u81f3\u5c11\u8981\u4e24\u4e2a\uff0c \u4e5f\u5c31\u662f\u81f3\u5c11\u6709\u4e00\u4e2a\u533a\u95f4\u76f8\u4ea4\u5904\uff0c\u80af\u5b9a\u80fd\u627e\u5230\uff09\u628a\u4ed6\u5220\u6389\uff0c\u76f4\u5230\u5220\u5b8c\u6216\u8005 $\\lceil\\frac{sum}{2}\\rceil \\le max(c_i)$\u3002\n\n>\u5bf9\u4e8e $\\lceil\\frac{sum}{2}\\rceil$\uff0c\u7531\u4e8e\u6bcf\u6b21\u5220\u53bb\u4e24\u4e2a\u6570\uff0c\u6240\u4ee5\u6bcf\u6b21\u51cf\u5c0f $1$\uff08\u56e0\u4e3a\u8981\u88ab $2$ \u9664\uff09\uff0c\u5bf9\u4e8e $c_i$ \uff0c\u7531\u4e8e\u6bcf\u6b21\u6700\u591a\u5220\u9664\u4e24\u4e2a\u4e0d\u540c\u5b57\u7b26\uff0c\u56e0\u6b64\u5de6\u8fb9\u6bcf\u6b21\u6700\u591a\u51cf\u5c0f $1$\u3002\u4e24\u8fb9\u6bcf\u6b21\u6700\u591a\u76f8\u5dee $1$\u3002\n\n>\u56e0\u6b64\u5f53\u76f8\u9047\u7684\u65f6\u5019\uff0c\u80af\u5b9a\u662f $max(c_i)$ \u6070\u597d\u7b49\u4e8e $\\lceil\\frac{sum}{2}\\rceil$\uff0c\u6b64\u65f6\u7b54\u6848\u4e3a $max(c_i)+ \\Delta\\lceil\\frac{sum}{2}\\rceil=\\lceil\\frac{sum}{2}\\rceil$\u3002\uff08$\\Delta\\lceil\\frac{sum}{2}\\rceil$ \u8868\u793a $\\lceil\\frac{sum}{2}\\rceil$ \u7684\u53d8\u5316\u91cf\uff09\n\n\u6700\u540e\u518d\u5220\u4e00\u6b21\u6700\u540e\u7684\u4e32\uff0c\u7b54\u6848\u5373\u4e3a $\\max(\\lceil\\frac{sum}{2}\\rceil,\\max(c_i))+1$\u3002\n\n\u90a3\u4e48\u64cd\u4f5c\u4e0e\u4e0a\u9762\u7c7b\u4f3c\uff1a\n\n![image.png](https://i.loli.net/2021/10/30/LiTGCwF2Vftn4HM.png)\n\n\uff08\u6458\u81ea [tommy0103](https://www.luogu.com.cn/user/95244) \u7684[\u9898\u89e3](https://www.luogu.com.cn/blog/infinity-dimension/solution-cf1329d)\uff0c\u7531\u4e8e\u592a\u61d2\uff0c\u6240\u4ee5\u4e0d\u60f3\u518d\u6253\u4e00\u904d\uff0c\u5176\u4e2d $b$ \u4e0e\u672c\u6587 $t$ \u610f\u601d\u76f8\u540c\u3002\uff09\n\n## \u5b9e\u73b0\n\n\u7531\u4e8e\u9898\u76ee\u8981\u6c42\uff0c\u6211\u4eec\u8981\u8f93\u51fa\u6539\u53d8\u7684\u4e0b\u8868\u3002\u4e5f\u5c31\u662f\u82e5 $S_i$ ~ $S_j$ \u88ab\u5220\u6389\uff0c\u5219 $j$ \u5f80\u540e\u7684\u4f4d\u7f6e\u90fd\u8981\u53f3\u79fb $j-i+1$ \u4f4d\u3002\u7531\u4e8e $\\sum n \\le 2e5 $\uff0c\u56e0\u6b64\u7528 $O(n\\log n)$ \u7684\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff08\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u662f\u5426\u8fd8\u5b58\u5728\uff09\u3002\n\n\u79ef\u5b58\u7684\u5b57\u6bcd\u90fd\u662f\u76f8\u540c\u7684\uff08\u4e0d\u7136\u4f1a\u88ab\u6d88\u6389\uff09\u3002\u53ef\u4ee5\u7406\u89e3\u4e3a\u6240\u6709\u6808\u91cc\u90fd\u662f\u540c\u4e00\u4e2a\u5b57\u6bcd\u3002\n\n\u7136\u540e\u5168\u90e8\u585e\u5b8c\u4e4b\u540e\u6808\u4e0d\u65ad\u6e05\u7a7a\u5c31\u884c\u4e86\u3002~~\u56e0\u4e3a\u4ece\u524d\u9762\u6e05\u7a7a\u6bd4\u8f83\u65b9\u4fbf\uff0c\u6240\u4ee5\u6211\u76f4\u63a5\u5f00\u53cc\u7aef\u961f\u5217\u4e86\u3002~~\n\n\u8be6\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e6+1e3; \n#define ls x<<1\n#define rs x<<1|1\n#define midd ((l(x)+r(x))>>1)\nstruct Segment_Tree\n{\n    int l,r,laz,sum;\n    #define l(x) tr[x].l\n    #define r(x) tr[x].r\n    #define laz(x) tr[x].laz\n    #define sum(x) tr[x].sum\n    #define len(x) (r(x)-l(x)+1)\n}tr[N<<2];\nvoid pushup(int x)\n{\n    sum(x)=sum(ls)+sum(rs);\n}\nvoid pushdown(int x)\n{\n    if(laz(x)==-1)return;\n    laz(ls)=laz(x);laz(rs)=laz(x);\n    sum(ls)=laz(x)*len(ls);sum(rs)=laz(x)*len(rs);\n    laz(x)=-1;\n      //\u8fd9\u8fb9\u8981\u6c42\u76f4\u63a5\u8986\u76d6\n}\nvoid build(int x,int l,int r)\n{\n    l(x)=l,r(x)=r;sum(x)=0;laz(x)=-1;\n    if(l==r)return sum(x)=1,void(); \n    int mid=midd;\n    build(ls,l,mid);build(rs,mid+1,r);\n    pushup(x); \n}\nvoid update(int x,int l,int r,int v)\n{\n    if(l<=l(x)&&r(x)<=r)return sum(x)=len(x)*v,laz(x)=v,void();\n    pushdown(x);\n    int mid=midd;\n    if(l<=mid)update(ls,l,r,v);\n    if(r>mid)update(rs,l,r,v);\n    pushup(x);\n}\nint ask(int x,int l,int r)\n{\n    if(l<=l(x)&&r(x)<=r)return sum(x);\n    pushdown(x);\n    int mid=midd,t=0;\n    if(l<=mid)t=ask(ls,l,r);\n    if(r>mid)t+=ask(rs,l,r);\n    return t;\n}\n//\u7ebf\u6bb5\u6811\u677f\u5b50\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n \nint n,m;\nint c[N],b[N],p[N];\nchar s[N];\ndeque<int>q;\nvector<pii>ans;\nint main()\n{\n    int _;scanf(\"%d\",&_);\n    while(_--)\n    {\n        scanf(\"%s\",s+1);\n        m=0;ans.clear();\n        n=strlen(s+1);build(1,1,n);\n        for(int i='a';i<='z';i++)c[i]=0;\n        for(int i=1;i<=n;i++)if(s[i]==s[i+1]){c[s[i]]++,b[++m]=s[i],p[m]=i;}\n        int tmp=m;\n        for(int now=1,res=0;now<=tmp;now++)\n        {\n            for(int i='a';i<='z';i++)if(c[res]<c[i])res=i;\n            if(q.empty()||b[q.back()]==b[now]){q.pb(now);continue;}\n            if(c[res]*2>=m&&(b[q.back()]!=res&&b[now]!=res)){q.pb(now);continue;}\n            c[b[q.back()]]--;c[b[now]]--;\n            int l=ask(1,1,p[q.back()]+1),r=ask(1,1,p[now]);\n            //\u5220\u7684\u662f\u7f8e\u4e3d\u5b50\u4e32\n            ans.pb(mp(l,r));\n            update(1,p[q.back()]+1,p[now],0);\n            q.pop_back();m-=2;\n        }\n        q.push_back(n);p[n]=n;\n        //\u987a\u4fbf\u628a\u6700\u540e\u4e00\u4e2a\u7f8e\u4e3d\u5b50\u4e32\u4e5f\u585e\u8fdb\u53bb\n        while(!q.empty())\n        {\n            // c[b[q.front()]]--; \n            int l=1,r=ask(1,1,p[q.front()]);\n            //\u56e0\u4e3a\u524d\u9762\u7684\u90fd\u5220\u5b8c\u4e86\uff0c\u6240\u4ee5\u6309\u9053\u7406\u8bb2\u662f\u4ece 1 \u5f00\u59cb\n            ans.pb(mp(l,r));\n            update(1,1,p[q.front()],0);q.pop_front();\n        }\n        printf(\"%d\\n\",ans.size());\n        for(auto j:ans)printf(\"%d %d\\n\",j.fi,j.se);\n    }\n    return 0;\n}\n\n```\n \n# \u540e\u8bb0\n\n\n~~\u6211\u5199\u5b8c\u9898\u89e3\u53d1\u73b0\u6211\u8fd8\u662f\u770b\u4e0d\u61c2\uff0cwtcl~~\u3002\n",
        "postTime": 1635589591,
        "uid": 223891,
        "name": "max67",
        "ccfLevel": 0,
        "title": "CF1329D Dreamoon Likes Strings \u9898\u89e3"
    },
    {
        "content": "[My Blog](https://liuxizai.ac.cn/archives/solution-cf1329d.html)\n\n## Description\n\n\u6211\u4eec\u79f0\u76f8\u90bb\u5b57\u7b26\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u662f\u7f8e\u4e3d\u7684\u3002\n\n\u7ed9\u5b9a\u5b57\u7b26\u4e32 $s_{1\\dots n}$\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u5220\u9664 $s$ \u7684\u4e00\u4e2a\u7f8e\u4e3d\u5b50\u4e32\uff0c\u5269\u4e0b\u7684\u5b57\u7b26\u4f1a\u6309\u7167\u539f\u6765\u7684\u987a\u5e8f\u62fc\u63a5\u8d77\u6765\u3002\n\n\u6c42\u5c06 $s$ \u53d8\u6210\u7a7a\u4e32\u7684\u6700\u5c0f\u6b65\u6570\u3002\n\n$n\\le2\\times10^5$\n\n## Solution\n\n\u5bb9\u6613\u53d1\u73b0\u7684\u662f\uff0c\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u7f8e\u4e3d\u5b50\u4e32\u7684\u5177\u4f53\u6784\u6210\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u7f8e\u4e3d\u5b50\u4e32\u538b\u7f29\u8d77\u6765\u3002\n\n\u6700\u76f4\u89c2\u7684\u4e00\u79cd\u6784\u9020\u65b9\u5f0f\u662f\uff0c\u5c06\u539f\u4e32\u8f6c\u5316\u4e3a\u82e5\u5e72\u4e2a\u76f8\u540c\u5b57\u7b26\u7684\u8fde\u7eed\u6bb5\uff0c\u5220\u53bb\u6bb5\u95f4\u7684\u90e8\u5206\uff0c\u6bd4\u5982\uff1a\n$$\n\\texttt{aaaa{\\color{red}bcd}eee{\\color{red}fg}hhh{\\color{red}ijk}}\n$$\n\u4f46\u662f\u8fd9\u6837\u7684\u8f6c\u5316\u4e0d\u591f\u4f18\u7f8e\uff0c\u7559\u4e0b\u7684\u8fd9\u4e9b\u8fde\u7eed\u6bb5\u8fd8\u53ef\u80fd\u5728\u5220\u9664\u8fc7\u7a0b\u4e2d\u52a8\u6001\u7684\u62fc\u63a5\u6210\u66f4\u957f\u7684\u7f8e\u4e3d\u5b50\u4e32\uff0c\u8fd9\u4e0d\u5229\u4e8e\u6211\u4eec\u7684\u4ee3\u7801\u5b9e\u73b0\uff0c\u540c\u65f6\u4e5f\u96be\u4ee5\u8fdb\u884c\u8d2a\u5fc3\u3002\n\n\u6ce8\u610f\u5230\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5904\u7406\u7f8e\u4e3d\u5b50\u4e32\u7684\u62fc\u63a5\uff0c\u6211\u4eec\u8003\u8651\u4e00\u79cd\u65b0\u7684\u6784\u9020\uff0c\u8ba9\u6bcf\u4e2a\u5b57\u7b26\u4ee3\u8868\u4e00\u4e2a\u7f8e\u4e3d\u5b50\u4e32\u3002\n\n\u6784\u9020\u5b57\u7b26\u4e32 $t$\uff0c\u82e5 $s_i=s_{i+1}$\uff0c\u5219\u5c06 $s_i$ \u52a0\u5230 $t$ \u7684\u672b\u5c3e\uff0c\u6548\u679c\u5982\u4e0b\uff1a\n$$\n\\begin{aligned}\n\\texttt{s: }&\\texttt{aaaabcdeeefghh{\\color{red}hijk}}\\\\\n\\texttt{t: }&\\texttt{aaa \\ \\ \\ ee\\ \\ \\ hh}\n\\end{aligned}\n$$\n$t$ \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u90fd\u662f\u4e00\u4e2a\u7f8e\u4e3d\u5b50\u4e32\u7684\u672b\u5c3e\uff0c\u5f53\u7136\u6211\u4eec\u53d1\u73b0\u539f\u4e32\u4e2d\u6700\u540e\u7684\u4e00\u4e2a\u7f8e\u4e3d\u5b50\u4e32\u88ab\u629b\u5f03\u4e86\uff0c\u8fd9\u4e2a\u6700\u540e\u5355\u72ec\u5220\u53bb\u5373\u53ef\u3002\n\n\u5bf9\u4e8e $t$\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1. \u76f4\u63a5\u5220\u53bb\u4e00\u4e2a\u5b57\u7b26\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u5220\u53bb\u4e86\u5176\u4ee3\u8868\u7684\u7f8e\u4e3d\u5b50\u4e32\u3002\n\n2. \u5220\u53bb\u4e24\u4e2a\u76f8\u90bb\u4e14\u4e0d\u540c\u7684\u5b57\u7b26\u3002\n\n    \u6ce8\u610f\uff0c\u5220\u53bb\u4e24\u4e2a\u5b57\u7b26\u5e76\u4e0d\u610f\u5473\u7740\u5220\u53bb\u4e24\u4e2a\u7f8e\u4e3d\u5b50\u4e32\uff0c\u5047\u8bbe $t$ \u4e2d\u6709\u4e09\u4e2a\u5b57\u7b26 abc\uff0c\u6211\u4eec\u5e0c\u671b\u5220\u53bb ab\uff0c\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u5220\u53bb\u4e86 b \u5bf9\u5e94\u7684\u7f8e\u4e3d\u5b50\u4e32\uff0c**\u5e76\u4f7f a \u4e0e c \u5408\u5e76**\u3002\n\n    \u8003\u8651\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\uff0ca \u548c b \u4e0d\u540c\u4e5f\u5c31\u610f\u5473\u7740 a\uff08\u5bf9\u5e94\u7f8e\u4e3d\u5b50\u4e32\uff09\u7684\u672b\u5c3e\u4e0e b \u7684\u672b\u5c3e\u4e0d\u540c\uff0c\u5047\u5982\u5728\u5bf9 ab \u64cd\u4f5c\u65f6**\u540e\u9762\u7684\u90e8\u5206\u8fd8\u6ca1\u6709\u64cd\u4f5c\u8fc7**\uff0c\u7531\u4e8e $t$ \u4e2d\u4efb\u610f\u5b57\u7b26\u5bf9\u5e94\u5230\u539f\u4e32\u4e2d\u53bb\u90fd\u6709 $s_i=s_{i+1}$\uff0c\u5219\u5fc5\u7136\u6709 a \u7684\u672b\u5c3e\u4e0e c \u7684\u5f00\u5934\u4e0d\u540c\uff0c\u53ef\u4ee5\u5408\u5e76\u3002\n\n    \u53e6\u5916\uff0c\u6709\u4e9b\u65f6\u5019 a \u4f1a\u4e0e\u539f\u4e32\u6700\u540e\u88ab\u629b\u5f03\u7684\u7f8e\u4e3d\u5b50\u4e32\u5408\u5e76\u3002\n\n    \u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u6309\u7167\u4ece\u524d\u5230\u540e\u7684\u987a\u5e8f\u8fdb\u884c\u5220\u9664\u5373\u53ef\u3002\n\n\u663e\u7136\u6211\u4eec\u4f1a\u5c3d\u91cf\u4f7f\u7528 2 \u64cd\u4f5c\u3002\n\n\u7c7b\u4f3c\u62ec\u53f7\u5339\u914d\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6808\u6765\u7ef4\u62a4\u8fd9\u4e00\u8fc7\u7a0b\u3002\n\n\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8fdb\u884c\u8d2a\u5fc3\uff0c\u4e3a\u4e0e\u4ee3\u7801\u7edf\u4e00\uff0c\u4ee4 $t$ \u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b57\u7b26\u4e3a $amx$\uff0c\u51fa\u73b0\u6b21\u6570\u4e3a $mx$\uff0c$t$ \u7684\u957f\u5ea6\u4e3a $sum$\u3002\n\n1. $mx>\\lceil sum/2\\rceil$\n\n    \u8fd9\u610f\u5473\u7740\u65e0\u8bba\u600e\u4e48\u5220\u90fd\u4e00\u5b9a\u4f1a\u5269\u4e0b\u82e5\u5e72\u4e2a $amx$\uff0c\u4e3a\u4f7f\u64cd\u4f5c\u6570\u6700\u5c11\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u6bcf\u6b21 2 \u64cd\u4f5c\u90fd\u662f\u5220\u53bb $amx$ \u4e0e\u67d0\u4e2a\u5176\u4ed6\u5b57\u7b26\u3002\n\n2. $mx\\le\\lceil sum/2\\rceil$\n\n    \u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u6bcf\u6b21\u5220\u9664\u540e\uff0c\u5982\u679c\u66f4\u65b0 $amx,mx,sum$\uff0c\u4ecd\u7136\u6709 $mx\\le\\lceil sum/2\\rceil$\uff0c\u8fd9\u6837\u6700\u540e\u4e0d\u4f1a\u5269\u4e0b\u4efb\u4f55\u5b57\u7b26\uff0c$sum$ \u4e3a\u5947\u6570\u7684\u8bdd\u5219\u4f1a\u5269\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u76f4\u63a5\u5220\u53bb\u5373\u53ef\u3002\n\n\u9898\u76ee\u8981\u6c42\u8f93\u51fa\u6bcf\u4e00\u6b21\u64cd\u4f5c\u5220\u53bb\u7684\u5b50\u4e32\u4e0b\u6807\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u4ece\u524d\u5f80\u540e\u5220\u9664\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u5220\u9664\u4e86\u51e0\u4e2a\u6570\uff0c\u7cbe\u7ec6\u5b9e\u73b0\u5c31\u4e0d\u9700\u8981\u7ebf\u6bb5\u6811\u4e86\u3002\n\n\u590d\u6742\u5ea6 $O(n\\Sigma)$\u3002\n\n## Code\n\n```cpp\nnamespace Main{\n    const int N = 200005;\n    const int S = 30;\n    int t, n, c, cnt[S], sum, mx, amx;\n    char s[N];\n    pair<int, int> a[N];\n    vector<pair<int, int>> ans;\n    void update(){\n        mx = -1, sum = 0;\n        for(int i = 0; i < S; i++){\n            if(cnt[i] > mx){\n                mx = cnt[i];\n                amx = i;\n            }\n            sum += cnt[i];\n        }\n    }\n    void Main(){\n        input(t);\n        while(t--){\n            memset(cnt, 0, sizeof(cnt));\n            ans.clear();\n            scanf(\"%s\", s + 1);\n            n = strlen(s + 1);\n            c = 0;\n            for(int i = 1; i < n; i++){\n                if(s[i] == s[i + 1]){\n                    a[++c] = {i, s[i] - 'a'};\n                    cnt[a[c].second]++;\n                }\n            }\n            update();\n            int del = 0;\n            stack<pair<int, int>> stk;\n            if(mx * 2 > sum){\n                for(int i = 1; i <= c; i++){\n                    if(stk.empty()) stk.emplace(a[i].first - del, a[i].second);\n                    else{\n                        if((stk.top().second == amx ^ a[i].second == amx) == 1){\n                            ans.emplace_back(stk.top().first + 1, a[i].first - del);\n                            del += a[i].first - del - stk.top().first;\n                            stk.pop();\n                        }\n                        else stk.emplace(a[i].first - del, a[i].second);\n                    }\n                }\n            }\n            else{\n                for(int i = 1; i <= c; i++){\n                    if(stk.empty() || stk.top().second == a[i].second){\n                        stk.emplace(a[i].first - del, a[i].second);\n                    }\n                    else{\n                        cnt[stk.top().second]--, cnt[a[i].second]--;\n                        update();\n                        if(mx * 2 <= sum + 1){\n                            ans.emplace_back(stk.top().first + 1, a[i].first - del);\n                            del += a[i].first - del - stk.top().first;\n                            stk.pop();\n                        }\n                        else{\n                            cnt[stk.top().second]++, cnt[a[i].second]++;\n                            update();\n                            stk.emplace(a[i].first - del, a[i].second);\n                        }\n                    }\n                }\n            }\n            while(!stk.empty()){\n                pair<int, int> tmp = stk.top(); stk.pop();\n                if(stk.empty()) ans.emplace_back(1, tmp.first), del += tmp.first;\n                else{\n                    ans.emplace_back(stk.top().first + 1, tmp.first);\n                    del += tmp.first - stk.top().first;\n                }\n            }\n            if(del != n) ans.emplace_back(1, n - del);\n            write(ans.size()); puts(\"\");\n            for(pair<int, int> op: ans) write(op.first), putchar(' '), write(op.second), puts(\"\");\n        }\n        return;\n    }\n} // namespace\n```\n\n\n",
        "postTime": 1666492253,
        "uid": 371439,
        "name": "Liuxizai",
        "ccfLevel": 6,
        "title": "Solution. CF1329D Dreamoon Likes Strings"
    }
]