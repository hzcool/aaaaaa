[
    {
        "content": "\u6811\u5f62dp\u3002\u9898\u76ee\u4e2d\u7684\u8fb9\u662f\u5355\u5411\u8fb9\uff0c\u4f46\u5b9e\u9645\u5b58\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u53cc\u5411\u5b58\u50a8\u8fd9\u6761\u8fb9\uff0c\u7528\u4e00\u4e2abool\u578b\u53d8\u91cfw\u6765\u8868\u793a\uff0c\u770b\u505a\u8fd9\u6761\u8fb9\u7684\u6743\u503c\uff080\u4e3a\u6b63\u5411\uff0c1\u4e3a\u53cd\u5411\uff09\u3002\u5047\u5982\u7b2ci\u4e2a\u70b9\u9009\u4e3a\u9996\u90fd\uff0c\u90a3\u4e48i\u4e0d\u4ec5\u53ef\u4ee5\u5230\u5b83\u7684\u5b50\u8282\u70b9\uff0c\u8fd8\u53ef\u4ee5\u5230\u5b83\u7684\u7956\u5148\u3002\u5728\u7b2c\u4e00\u6b21**\u81ea\u5e95\u5411\u4e0a**\u7684dfs\u4e2d\uff0c\u6211\u4eec\u7528dp[u]\u8868\u793a**\u4ee5u\u8282\u70b9\u4e3a\u9996\u90fd\u65f6\uff0cu\u5230\u6240\u6709\u5b50\u8282\u70b9S\u9700\u8981\u9006\u8f6c\u7684\u8fb9\u6570**\u3002\u5f88\u5bb9\u6613\u53ef\u4ee5\u5f97\u51fa\u5b83\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a$dp[u]=\\sum(dp[S]+w[i,S])$\u3002\u5728\u7b2c\u4e8c\u6b21**\u81ea\u9876\u5411\u4e0b**\u7684dfs\u4e2d\uff0cdp[i]\u7684\u5b9a\u4e49\u53d8\u6210\u4e86**u\u5230\u5168\u6811\u8282\u70b9\u9700\u8981\u9006\u8f6c\u7684\u8fb9\u6570**\u3002\u5047\u5982f\u662fu\u7684\u7236\u4eb2\uff0c\u90a3\u4e48\u5f53f->u\u8fd9\u6761\u8fb9\u662f\u6b63\u5411\u7684\u65f6\u5019\uff0c\u4ee5u\u4e3a\u9996\u90fd\u5219\u9700\u8981\u5c06\u8fd9\u6761\u8fb9\u9006\u8f6c\uff0c$dp[u]+=dp[f]+1$\u3002\u5f53f->u\u8fd9\u6761\u8fb9\u662f\u53cd\u5411\u7684\u65f6\u5019\uff0c\u4ee5u\u4e3a\u9996\u90fd\u4e0d\u9700\u8981\u5c06\u8fd9\u6761\u8fb9\u9006\u8f6c\uff0c\u4f46\u7531\u4e8eu\u662ff\u7684\u5b50\u8282\u70b9\uff0c\u56e0\u6b64\u5728dp[f]\u4e2d\u5c06\u8fd9\u6761\u8fb9\u9006\u8f6c\u4e86\uff0c\u6240\u4ee5$dp[u]+=dp[f]-1$\u3002\u4ee3\u7801\u5982\u4e0b\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nstruct edge {\n    int to,next;\n    bool w;\n}e[400010];\nint head[200010],cnt,dp[200010];\ninline void adde(int from,int to,bool w) {//\u52a0\u8fb9\n    e[++cnt]=(edge){to,head[from],w};\n    head[from]=cnt;\n}\nvoid dfs1(int u,int f) {//\u7b2c\u4e00\u6b21dfs\uff1a\u6c42\u51fau\u5230\u5b50\u8282\u70b9\u9700\u8981\u9006\u8f6c\u7684\u8fb9\u6570\n    for (int i=head[u];i;i=e[i].next) \n        if (e[i].to!=f) {\n            dfs1(e[i].to,u);\n            dp[u]+=dp[e[i].to]+e[i].w;\n        }\n}\nvoid dfs2(int u,int f) {//\u7b2c\u4e8c\u6b21dfs\uff1a\u6c42\u51fau\u5230\u5168\u6811\u9700\u8981\u9006\u8f6c\u7684\u8fb9\u6570\n    for (int i=head[u];i;i=e[i].next)\n        if (e[i].to!=f) {\n            dp[e[i].to]=dp[u]+(e[i].w?-1:1);\n            dfs2(e[i].to,u);\n        }\n}\nint main() {\n    int n,a,b;\n    while (~scanf(\"%d\",&n)) {\n        cnt=0;\n        memset(head,0,sizeof(head));\n        for (int i=1;i<=n-1;i++) {\n            scanf(\"%d%d\",&a,&b);\n            adde(a,b,false);adde(b,a,true);//\u53cc\u5411\u52a0\u8fb9\n        }\n        memset(dp,0,sizeof(dp));\n        dfs1(1,-1);dfs2(1,-1);\n        int Min=99999999;\n        for (int i=1;i<=n;i++) if (Min>dp[i]) Min=dp[i];\n        printf(\"%d\\n\",Min);\n        for (int i=1;i<=n;i++) if (Min==dp[i]) printf(\"%d \",i);\n        printf(\"\\n\");\n    }\n}\n```",
        "postTime": 1517224328,
        "uid": 39914,
        "name": "An_Account",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "#### \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u5b9a$n$\u4e2a\u70b9\uff0c$n-1$\u6761\u6709\u5411\u8fb9\uff0c\u6c42\u5230\u8fbe\u6240\u6709\u5176\u4ed6\u70b9\u9700\u8981\u66f4\u6362\u65b9\u5411\u6700\u5c0f\u7684\u6b21\u6570\uff0c\u53ca\u7b26\u5408\u8fd9\u7c7b\u6761\u4ef6\u7684\u70b9\u7684\u5347\u5e8f\u5e8f\u5217\uff0c\u5178\u578b\u7684\u6362\u6839dp\u9e2d\n\n#### \u601d\u8def\u5206\u6790 \n- \u9996\u5148\u9898\u76ee\u8bf4\u4e86\uff0c\u7ed9\u5b9a\u7684\u662f\u4e00\u9897\u6811\uff0c\u6240\u4ee5\u4e00\u5b9a\u6709\u552f\u4e00\u7684\u65b9\u6848\u901a\u5f80\u6240\u6709\u70b9\uff0c\u8bbe$f[i]$\u4e3a$i$\u70b9\u5230\u8fbe\u5176\u4f59\u6240\u6709\u70b9\u9700\u8981\u4fee\u6539\u7684\u9053\u8def\u6570\u91cf\n\n- \u6211\u4eec\u53ef\u4ee5\u5148\u628a$1$\u5f53\u505a\u6811\u7684\u6839\u8282\u70b9\uff0c\u5206\u522b\u5efa\u7acb\u6b63\u8fb9\u548c\u53cd\u8fb9\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u53ef\u4ee5\u901a\u5f80\u6240\u6709\u70b9\u4e86\uff0c\u7136\u540e\u6839\u636e\u7ecf\u8fc7\u7684\u53cd\u8fb9\u7684\u6570\u91cf\u6c42\u51fa$1$\u70b9\u5230\u8fbe\u6240\u6709\u7684\u9053\u8def\u6240\u9700\u8981\u4fee\u6539\u7684\u9053\u8def\u6570\u91cf\n\n#### \u770b\u56fe\u65f6\u95f4\n\n![\u539f\u8c05\u6211\u9ad8\u8d85\u7684\u753b\u6280](https://cdn.luogu.com.cn/upload/image_hosting/xmxfsl7b.png)\n\n\u4e3e\u6837\u4f8b2\u6765\u8bf4\u660e\u4e00\u4e0b\u3002\u9996\u5148\uff0c\u6211\u4eec\u8bbe\u7f6e$1$\u4e3a\u6839\u8282\u70b9\uff0c\u7136\u540e\uff0c\u6211\u4eec\u5c31\u5f00\u59cb\u795e\u5947\u7684\u6df1\u641c\uff0c\u6c42\u51fa\u5230\u8fbe\u6240\u6709\u70b9\u9700\u8981\u4fee\u6539\u7684\u9053\u8def\u4e2a\u6570\n\n```\nvoid dfs1(int x,int fu)\n{\n\tfor(int i=head[x];i;i=e[i].last)\n\t{\n\t\tint v=e[i].to;\n\t\tint pd=e[i].pik;\n\t\tif(v==fu) continue;\n\t\tif(pd==1) f[x]++; //\u8fd9\u662f\u4e00\u6761\u53cd\u8fb9 \n\t\tdfs1(v,x);\n\t\tf[x]+=f[v];\n\t}\n}\n```\n\u5f53\u7136\uff0c\u5728\u6211\u8fd9\u4e2a\u4ee3\u7801\u4e2d\u53ea\u6709$f[1]$\u6709\u5b9e\u9645\u610f\u4e49\u8868\u793a\u4fee\u6539\u7684\u9053\u8def\u4e2a\u6570\u7684\uff0c\u5176\u4ed6\u7684\u53ea\u662f\u5f53\u505a\u4e00\u4e2a\u4e2d\u95f4\u5a92\u4ecb\uff0c\u4e0b\u4e00\u6b21\u4f7f\u7528\u8981\u6e05\u96f6\uff08\u4e0d\u8fc7\u8c8c\u4f3c\u6ca1\u4ec0\u4e48\u5f71\u54cd\uff09,\n\n\u90a3\u4e48\u7b2c\u4e00\u904d\u6df1\u641c\u7ed3\u675f\u4e86,\u6b64\u65f6$f[1]=2$\n\n\u7136\u540e\u6211\u4eec\u518d\u770b\u56fe\u627e\u89c4\u5f8b\uff0c\u5f53\u6211\u4eec\u8f6c\u6362\u5230\u8282\u70b94\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7ecf\u8fc7\u7684\u662f\u4e00\u6761\u6b63\u8fb9\u8d70\u8fc7\u53bb\u7684\uff0c\u7136\u540e\u6211\u4eec\u7528\u8089\u773c\u6c42\u51fa$f[4]=3$\n\u4e5f\u5c31\u662f$f[1]+1$\n\n\u90a3\u4e48\u6211\u4eec\u518d\u770b$3$\u8fd9\u4e2a\u70b9\uff0c\u4ece$4$\u70b9\u5230\u8fbe$3$\u70b9\u6211\u4eec\u662f\u7ecf\u5386\u4e86\u4e00\u6761\u53cd\u8fb9\u5230\u8fbe\u7684\uff0c\u7136\u540e\u6211\u4eec\u7528\u8089\u773c\u6c42\u51fa$f[3]=2$,\u4e5f\u5c31\u662f$f[4]-1$\n\n\u90a3\u4e48\u73b0\u5728\uff0c\u53d1\u73b0\u89c4\u5f8b\u4e86\u6ca1\u6709!\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/s88a873r.png)\n\n\u6ca1\u6709\u9519\uff0c\u5c31\u662f\u4f60\u60f3\u7684\u90a3\u6837\u5b50\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e86\uff01\uff01\uff01(\u8bbe\u6807\u8bb0\u4e3a$pik$)\n\n$$f[to]=\\begin{cases} \n\n\t\tf[father]+1\\ \\ \\ \\ (pik=0)\n        \\\\\n        \\\\\n        f[father]-1\\ \\ \\ \\ (pik=1)\n\t\t\n\t\t\\end{cases} $$\n\n\u90a3\u4e48\u8fdb\u884c\u5b8c\u7b2c\u4e8c\u904d\u6df1\u641c\u6211\u4eec\u5c31\u53ef\u4ee5A\u6389\u8fd9\u4e2a\u9898\u76ee\u4e86\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lcgmiw89.png)\n\n#### \u4ee3\u7801\u5b9e\u73b0\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<stack>\n#include<map>\n#include<algorithm>\nusing namespace std;\nconst int N=4e5+9;\nstruct node{\n\tint last;\n\tint to;\n\tint dis;\n\tint pik;\n}e[N];\nint f[N];\nint ans=0x3f3f3f3f;\nint head[N];\nint cnt;\nvoid add(int from,int to,int dis)\n{\n\te[++cnt].last=head[from];\n\te[cnt].to=to;\n\te[cnt].dis=dis;\n\thead[from]=cnt;\n}\nvoid dfs2(int x,int fu)\n{\n\tfor(int i=head[x];i;i=e[i].last)\n\t{\n\t\tint v=e[i].to;\n\t\tint pd=e[i].pik;\n\t\tif(v==fu) continue;\n\t\tif(pd==1)f[v]=f[x]-1;\n\t\tif(pd==0)f[v]=f[x]+1;\n\t\tans=min(f[v],ans);\n\t\tdfs2(v,x);\n\t}\n}\nvoid dfs1(int x,int fu)\n{\n\tfor(int i=head[x];i;i=e[i].last)\n\t{\n\t\tint v=e[i].to;\n\t\tint pd=e[i].pik;\n\t\tif(v==fu) continue;\n\t\tif(pd==1) f[x]++; //\u8fd9\u662f\u4e00\u6761\u53cd\u8fb9 \n\t\tdfs1(v,x);\n\t\tf[x]+=f[v];\n\t}\n}\nint main()\n{\n\tint n;\n\tcin>>n;\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tadd(x,y,1);\n\t\te[cnt].pik=0;//\u6b63\u5411\u8fb9\u4e3a0 \n\t\tadd(y,x,1);\n\t\te[cnt].pik=1;//\u53cd\u5411\u8fb9\u4e3a1 \n\t}\n\tdfs1(1,1);\n\tans=f[1];\n\tfor(int i=2;i<=n;i++)f[i]=0;\n\tdfs2(1,1);\n\tcout<<ans<<endl;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(f[i]==ans)\n\t\tcout<<i<<\" \";\n\t} \n\treturn 0;\n}\n```\n\n",
        "postTime": 1605773428,
        "uid": 230804,
        "name": "Durancer",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "## [CF219D](https://www.luogu.com.cn/problem/CF219D)\n\n\n\n------------\n  \n### \u601d\u8def\n\n\u6211\u4eec\u5bf9\u8bfb\u5165\u7684\u8fb9\u8fdb\u884c\u5904\u7406\uff0c\u8bfb\u5165\u7684\u6b63\u5411\u8fb9\u7684\u8fb9\u6743\u8bbe\u4e3a 0 \uff0c\u540c\u65f6\u5efa\u7acb\u4e00\u6761\u53cd\u5411\u8fb9\uff0c\u8fb9\u6743\u8bbe\u4e3a 1 \u3002\u7136\u540e\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6839\u5c06\u6240\u6709\u70b9\u904d\u5386\u4e00\u904d\uff0c\u5c06\u904d\u5386\u8fc7\u7a0b\u4e2d\u7684\u8fb9\u6743\u7d2f\u52a0\uff0c\u5c31\u662f\u4ee5\u5f53\u524d\u70b9\u4e3a\u6839\u8981\u7ffb\u8f6c\u7684\u8fb9\u7684\u6570\u91cf\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2)$\n\n\n\n------------\n\n### \u4f18\u5316\n\n\u6211\u4eec\u8003\u8651\u6362\u6839 DP\uff0c\u8bbe\u7236\u4eb2\u8282\u70b9\u4e3a $u$\uff0c\u5b50\u8282\u70b9\u4e3a $v$\uff0c\u90a3\u4e48\u5206\u522b\u4ee5\u8fd9\u4e24\u4e2a\u70b9\u4e3a\u6839\u904d\u5386\u65f6\uff0c\u9664\u4e86\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u4e0d\u540c\uff0c\u5176\u4ed6\u7684\u8fb9\u6743\u6ca1\u6709\u53d8\u5316\u3002\u800c\u5f53 $u$ \u5411 $v$ \u7684\u8fb9\u6743\u4e3a 1 \u65f6\uff0c $v$ \u5411 $u$ \u7684\u8fb9\u6743\u4e00\u5b9a\u4e3a 0\u3002\u53cd\u4e4b\u4ea6\u7136\u3002\u6240\u4ee5\u53ef\u4ee5\u6709\u4ee5\u4e0b\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$ dp[v] = \\left\\{ \n\\begin{array}{rcl}\n\tdp[u] + 1 &  & {e[i].w = 0} \\\\\n\tdp[u] - 1 &  & {e[i].w = 1 } \\\\\n\\end{array} \\right.\n$$\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$ \uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n------------\n\n### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n#define max_(a, b) a > b ? a : b\n#define min_(a, b) a < b ? a : b\n#define swap_(i, j) i = i^j, j = i^j, i = i^j\n#define abs_(x) (((x)>>31)^(x)) - ((x)>>31)\n#define INF 0x3f3f3f3f\n#define rep(i, f, t) for(register int i(f); i <= t; ++i)\n#define per(i, f, t) for(register int i(t); i >= f; --i)\n#define ste(i, f, t, s) for(register int i(f); i <= t; i += s)\n#define nx(i, u) for(register int i(head[u]); i; i = e[i].next) \n#define index(l, r) (l + r | l != r)\n// #define dis(a, b) (abs(nd[a].x - nd[b].x))\n// #define int long long\ntypedef long long ll;\n\n/***************??***************/\n\nnamespace IO {\nchar buf[1<<21], *p1 = buf, *p2 = buf, buf1[1<<21];\ninline char gc () {return p1 == p2 && (p2 = (p1 = buf) + fread (buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++;}\n\n#ifndef ONLINE_JUDGE\n#endif\n\ntemplate<class I>\ninline void read(I &x) {\n    x = 0; I f = 1; char c = gc();\n    while(c < '0' || c > '9') {if(c == '-') f = -1; c = gc(); }\n    while(c >= '0' && c <= '9') {x = x * 10 + c - '0'; c = gc(); }\n    x *= f;\n}\n\ntemplate<class I>\ninline void write(I x) {\n    if(x == 0) {putchar('0'); return;}\n    I tmp = x > 0 ? x : -x;\n    if(x < 0) putchar('-');\n    int cnt = 0;\n    while(tmp > 0) {\n        buf1[cnt++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while(cnt > 0) putchar(buf1[--cnt]);\n}\n\n#define in(x) read(x)\n#define outn(x) write(x), putchar('\\n')\n#define out(x) write(x), putchar(' ')\n\n} using namespace IO;\n\n/***************??***************/\n\nint n, u, v, ans;\nint dp[200003];\n\nstruct node {\n    int to, next, lim;\n}e[400003];\n\nint cnt, head[200003];\n\ninline void add (int u, int v, int w) {\n    e[++cnt] = (node){v, head[u], w};\n    head[u] = cnt;\n}\n\nvoid dfs_1 (int u, int fa) {\n    nx(i, u) {\n        int v = e[i].to;\n        if(v == fa) continue;\n        dp[1] += e[i].lim;\n        dfs_1(v, u);\n    }\n}\n\nvoid dfs_2 (int u, int fa) {\n    nx(i, u) {\n        int v = e[i].to;\n        if(v == fa) continue;\n        if(e[i].lim) dp[v] = dp[u] - 1;\n        else dp[v] = dp[u] + 1;\n        ans = min_(ans, dp[v]);\n        dfs_2(v, u);\n    }\n}\n\nint main () {\n    read(n);\n    rep(i, 1, n-1) {\n        read(u), read(v);\n        add(u, v, 0), add(v, u, 1);\n    }\n    dfs_1(1, 0);\n    ans = dp[1];\n    dfs_2(1, 0);\n    outn(ans);\n    rep(i, 1, n) if(ans == dp[i]) out(i);\n}\n```\n\n\n------------\n\n\u611f\u8c22\u60a8\u80fd\u9605\u8bfb\u672c\u849f\u84bb\u8fd9\u7bc7\u535a\u5ba2\uff01",
        "postTime": 1622098457,
        "uid": 450290,
        "name": "MurataHimeko",
        "ccfLevel": 0,
        "title": "\u9898\u89e3"
    },
    {
        "content": "### Choosing Capital for Treeland\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF219D)\n\n\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u4f46\u662f\u6811\u4e0a\u7684\u8fb9\u90fd\u662f\u5355\u5411\u8fb9\uff0c\u95ee\u4ee5 i \u70b9\u4e3a\u6839\u7684\u65f6\u5019\uff0c\u4e3a\u4e86\u80fd\u591f\u904d\u5386\u5230\u6bcf\u4e2a\u70b9\uff0c\u9700\u8981\u4fee\u6539\u591a\u5c11\u6761\u8fb9\u7684\u65b9\u5411\u3002\n\n---\n\n\u8bbe $f_x$ \u4e3a\u4ee4 x \u5f53\u9996\u90fd\u7684\u65f6\u5019\uff0c\u5982\u8981\u7ffb\u8f6c\u591a\u5c11\u6761\u8fb9\u3002\n\n\u5efa\u56fe\u7684\u65f6\u5019\u6309\u7167\u53cc\u5411\u8fb9\u5efa\u56fe\uff0c\u6b63\u5411\u548c\u53cd\u5411\u8fb9\u5206\u522b\u6807\u8bb0\uff0c\u7136\u540e\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u6c42\u51fa\u4ee5 1 \u4e3a\u6839\u65f6\u7684\u7b54\u6848\u3002\n\n\u8f6c\u79fb\u7684\u65f6\u5019\u5c31\u5224\u65ad x \u4e0e to \u4e4b\u95f4\u8fde\u7684\u8fb9\u662f\u6b63\u5411\u8fb9\u8fd8\u662f\u53cd\u5411\u8fb9\u5c31\u884c\u4e86\u3002\n\n- \u5982\u679c\u662f\u6b63\u5411\u8fb9\uff0c\u6211\u4eec\u7684\u9996\u90fd\u4ece x \u5230 to\uff0c\u9700\u8981\u628a\u8fd9\u6761\u8fb9\u7ffb\u8f6c\uff0c\u7b54\u6848\u5c31\u662f $f_{to} = f_{x} + 1$\u3002\n\n- \u5982\u679c\u662f\u53cd\u5411\u8fb9\uff0c\u56e0\u4e3a\u4ee5 x \u4e3a\u9996\u90fd\u7684\u65f6\u5019\u5df2\u7ecf\u7ffb\u8f6c\u4e86\uff0c\u6240\u4ee5\u8981\u7ffb\u8f6c\u56de\u6765\uff0c\u4e5f\u5c31\u662f\u4e0d\u7528\u7ffb\u8f6c $f_{to} = f_{x}-1$\u3002\n\n### code\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define N 200010\n#define M 1010\n\nusing namespace std;\nint n, add_edge;\nint head[N << 1], dp[N];\nstruct node {\n  int next, to; bool w;\n}edge[N << 1];\n\nint read() {\n  int s = 0, f = 0; char ch = getchar();\n  while (!isdigit(ch)) f |= (ch == '-'), ch = getchar();\n  while (isdigit(ch)) s = s * 10 + (ch ^ 48), ch = getchar();\n  return f ? -s : s;\n}\n\nvoid add(int from, int to, bool w) {\n  edge[++add_edge].next = head[from];\n  edge[add_edge].to = to;\n  edge[add_edge].w = w;\n  head[from] = add_edge;\n}\n\nvoid dfs(int x, int fa) {\n  for (int i = head[x]; i; i = edge[i].next) {\n    int to = edge[i].to;\n    if (to == fa) continue;\n    if (edge[i].w == 1) dp[1]++;\n    dfs(to, x);\n  }\n}\n\nvoid dfs2(int x, int fa) {\n  for (int i = head[x]; i; i = edge[i].next) {\n    int to = edge[i].to;\n    if (to == fa) continue;\n    if (edge[i].w == 1) dp[to] = dp[x] - 1;\n    else dp[to] = dp[x] + 1;\n    dfs2(to, x);\n  }\n}\n\nint main() {\n  n = read();\n  for (int i = 1, x, y; i < n; i++) {\n    x = read(), y = read();\n    add(x, y, 0), add(y, x, 1);\n  }\n  dfs(1, 1);\n  dfs2(1, 1);\n  int minn = 1111111111;\n  for (int i = 1; i <= n; i++)\n    minn = min(minn, dp[i]);\n  printf(\"%d\\n\", minn);\n  for (int i = 1; i <= n; i++)\n    if (dp[i] == minn) cout << i << \" \";\n  return 0;\n}\n\n```",
        "postTime": 1605496449,
        "uid": 188155,
        "name": "K2sen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e2a\u4e0d\u96be\u7684\u4e8c\u6b21\u626b\u63cf\u9898\u76ee\uff08\u6216\u8005\u53ef\u4ee5\u8bf4\u662f\u6362\u6839\u6cd5\uff09\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5bf9\u4e8e\u4e00\u6761\u6709\u5411\u8fb9 $u\\to v$\uff0c\u6211\u4eec\u5efa\u8fb9 $(u,v,0)$\uff08\u5373\u8fb9\u6743\u4e3a $0$\uff09\u548c $(u,v,1)$\uff0c\u7406\u7531\u5f88\u7b80\u5355\uff0c\u8fb9\u6743\u4ee3\u8868\u8981\u4e0d\u8981\u6362\u624d\u80fd\u4ece $u$ \u8d70\u5230 $v$\u3002\n\n\u6211\u4eec\u8bbe $f_u$ \u4e3a\u4ee5 $u$ \u4e3a\u9996\u90fd\u7684\u65f6\u5019\u8981\u6362\u591a\u5c11\u6b21\u8fb9\u3002\u7b2c\u4e00\u6b21\u904d\u5386\uff0c\u6211\u4eec\u6c42\u51fa $u$ \u5b50\u6811\u4e2d\u8981\u6362\u591a\u5c11\u6b21\u8fb9\u3002\n\n```cpp\nvoid dfs1(int u,int fa){\n\tfor(int i=hd[u],v;i;i=e[i].nxt)\n\t\tif((v=e[i].to)!=fa)\n\t\t\tdfs1(v,u),\n\t\t\tf[u]+=(f[v]+e[i].w);\n}\n```\n\n\u7136\u540e\uff0c\u6211\u4eec\u4ece\u7236\u4eb2\u8282\u70b9\u63a8\u51fa\u5b50\u8282\u70b9\u7684\u603b\u5171\u7684\u4ee3\u4ef7\u3002\u6211\u4eec\u753b\u56fe\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f71\u54cd\u7684\u53ea\u6709\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\u8fd9\u6761\u8fb9\u3002\u5982\u679c\u7236\u8282\u70b9\u76f4\u63a5\u8fde\u5411\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5b50\u8282\u70b9\u7684\u603b\u5171\u4ee3\u4ef7\u5e94\u8be5\u662f\u7236\u8282\u70b9 $+1$\uff08\u56e0\u4e3a\u9700\u8981\u6539\u53d8\u8fd9\u6761\u8fb9\uff09\uff0c\u5426\u5219\u5e94\u8be5\u662f\u7236\u8282\u70b9\u7684\u4ee3\u4ef7 $-1$\u3002\n\n```cpp\nvoid dfs2(int u,int fa){\n\tfor(int i=hd[u],v;i;i=e[i].nxt)\n\t\tif((v=e[i].to)!=fa)\n\t\t\tf[v]=f[u]+pow(-1,e[i].w),\n\t\t\tdfs2(v,u);\n\tif(f[u]<ans) ans=f[u],cnt=0;\n\tif(f[u]==ans) ak[++cnt]=u;\n}\n```\n\n\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\u653e\u4e0a\u5168\u90e8\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+9;\nstruct edge{int to,nxt,w;}e[N*2]; int hd[N],tot;\nvoid add(int u,int v,int w){e[++tot]=(edge){v,hd[u],w};hd[u]=tot;}\nint f[N],ans,ak[N],cnt;\nvoid dfs1(int u,int fa){\n\tfor(int i=hd[u],v;i;i=e[i].nxt)\n\t\tif((v=e[i].to)!=fa)\n\t\t\tdfs1(v,u),\n\t\t\tf[u]+=(f[v]+e[i].w);\n}\nvoid dfs2(int u,int fa){\n\tfor(int i=hd[u],v;i;i=e[i].nxt)\n\t\tif((v=e[i].to)!=fa)\n\t\t\tf[v]=f[u]+pow(-1,e[i].w),\n\t\t\tdfs2(v,u);\n\tif(f[u]<ans) ans=f[u],cnt=0;\n\tif(f[u]==ans) ak[++cnt]=u;\n}\nint main(){\n\tint n;\n\twhile(cin>>n){\n\t\tmemset(f,0,sizeof(f)),memset(ak,0,sizeof(ak)),ans=0x3f3f3f3f;\n\t\tmemset(hd,0,sizeof(hd)),memset(e,0,sizeof(e)),tot=0;\n\t\tfor(int i=1,u,v;i<n;i++)\n\t\t\tscanf(\"%d%d\",&u,&v),add(u,v,0),add(v,u,1);\n\t\tdfs1(1,0), dfs2(1,0);\n\t\tprintf(\"%d\\n\",ans);\n\t\tsort(ak+1,ak+cnt+1);\n\t\tfor(int i=1;i<=cnt;i++) printf(\"%d \",ak[i]); puts(\"\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1588922123,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "~~**\u8fd9\u9053\u9898\u7684\u96be\u5ea6\u4e0d\u5e94\u8be5\u662f\u7d2b\u7684\u5440**~~\n\nn\u7684\u8303\u56f4\u662f\uff082<=n<=2e5\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5148\u7b97\u51fa\u4e00\u4e2a\u70b9\uff08\u4efb\u610f\uff0c\u5c31\u5f53\u4ed6\u662f\u8282\u70b91\u597d\u4e86\uff09\u662f\u9996\u90fd\u65f6\u8981\u6539\u7684\u8def\u7684\u6570\u91cf\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u9012\u63a8\u51fa\u4e0e\u4e4b\u76f8\u90bb\u7684\u70b9\u7684\u7b54\u6848\uff0c\u53d6\u6700\u5c0f\u503c\uff0c\u518d\u626b\u4e00\u904d\uff0c\u8f93\u51fa\u3002\n\n\u5c31\u8fd9\u4e48\u51e0\u70b9\uff1a\n  - \u7b97\u51fa\u4efb\u610f\u4e00\u4e2a\u70b9\uff08\u56fa\u5b9a\uff09\n  - \u9012\u63a8\u51fa\u4e0e\u4e4b\u76f8\u90bb\u7684\u70b9\u7684\u7b54\u6848\n  - \u8f93\u51fa\n  \n\u7b2c\u4e8c\u70b9\u6bd4\u8f83\u91cd\u8981\uff0c\u89c1\u56fe:\n![](https://cdn.luogu.com.cn/upload/image_hosting/d1q57ohj.png)\n\u81f3\u4e8e\u7b2c\u4e00\u70b9\u7684\u8dd1dfs\u5e94\u8be5\u662f\u5f88\u7b80\u5355\u7684\u3002\n\n\u9012\u5f52\u6c42\u89e3\u5373\u53ef\u3002\n\n```\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nint n;\nstruct R {\n\tint e;//\u4e0b\u4e00\u4e2a\u70b9\n\tbool w;//1\u662f\u9a6c\u8def\uff0c0\u662f\u5c0f\u8def\n} s;\nint ans[200005],tem=INT_MAX;\nvector <R> E[200005];\nint dfs(int now,int last) {\n\tint ans=0;\n\tfor(int k=0; k<E[now].size(); k++) {\n\t\tif(last==E[now][k].e) continue;\n\t\tans+=(E[now][k].w==1?0:1)+dfs(E[now][k].e,now);//\"?\"\u4e0d\u4f1a\u7528\u7684\u8bdd\uff0c\u53ef\u81ea\u884c\u6362\u6210if\n\t}\n\treturn ans;\n}\nvoid dp(int now,int last) {//\u7b2c\u4e8c\u6b65\n\ttem=min(tem,ans[now]);//\u53d6\u6700\u5c0f\n\tfor(int k=0; k<E[now].size(); k++) {\n\t\tif(last==E[now][k].e) continue;\n\t\tans[E[now][k].e]=(E[now][k].w==1?1:-1)+ans[now];\n\t\tddfs(E[now][k].e,now);\n\t}\n}\nint main() {\n\tcin>>n;\n\tfor(int j=1; j<n; j++) {\n\t\tint e,u;\n\t\tcin>>e>>u;\n\t\ts.e=u,s.w=1;\n\t\tE[e].push_back(s);\n\t\ts.e=e,s.w=0;\n\t\tE[u].push_back(s);\n\t}\n\tans[1]=dfs(1,1);//\u4e00\u822c\u4ee51\u8d77\u70b9\uff0c\u5176\u4ed6\u7684\u70b9\u8dd1\u51fa\u6765\u4e5f\u4e00\u6837\uff0c\u4e0e\u4e0b\u9762\u7684\u201cdp\u201d\u4e2d\u76f8\u540c\u5373\u53ef\n\tdp(1,1);\n\tprintf(\"%d\\n\",tem);\n\tfor(int j=1; j<=n; j++)\n    \t\tif(tem==ans[j]) printf(\"%d \",j);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1572855409,
        "uid": 251809,
        "name": "wick",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u79cd\u4e00\u68f5\u6811\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u90fd\u8981\u6c42\u7b54\u6848\u7684\u53ef\u4ee5\u8003\u8651\u6362\u6839 dp \u89e3\u51b3\u3002\n\n\u9898\u76ee\u5927\u610f\u662f\u7ed9\u4e00\u4e9b\u6709\u5411\u8fb9\uff0c\u95ee\u6700\u5c11\u628a\u8fd9\u4e9b\u6709\u5411\u8fb9\u7ffb\u8f6c\u591a\u5c11\u6b21\u80fd\u5f62\u6210\u4e00\u68f5\u6811\uff0c\u5e76\u4e14\u8981\u6c42\u4ee5\u54ea\u4e9b\u7ed3\u70b9\u4e3a\u6839\u65f6\u7ffb\u8f6c\u6b21\u6570\u6700\u5c11\u3002\n\n\u9996\u5148\u60f3\u60f3\u600e\u4e48\u6c42\u4ee5\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u6839\u65f6\u7684\u6700\u5c11\u7ffb\u8f6c\u6b21\u6570\u3002\u9898\u76ee\u4e2d\u867d\u7136\u7ed9\u7684\u662f\u6709\u5411\u8fb9\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u53ea\u9700\u8981\u5c06\u4e00\u6761\u8fb9\u7ffb\u8f6c\u4e00\u6b21\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u6761\u7ffb\u8f6c\u7684\u6709\u5411\u8fb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u4e0d\u59a8\u8bbe\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u4e3a\u8fd9\u6761\u8fb9\u7ffb\u8f6c\u7684\u6b21\u6570\uff0c\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u539f\u6709\u7684\u8fb9\u8fb9\u6743\u4e3a $0$\uff0c\u8fd9\u6761\u8fb9\u7684\u53cd\u5411\u8fb9\u8fb9\u6743\u4e3a $1$.\u663e\u7136\u4ee5\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u6839\u65f6\u7684\u6700\u5c11\u7ffb\u8f6c\u6b21\u6570\u5c31\u662f\u4ee5\u8fd9\u4e2a\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\u65f6\u7ec4\u6210\u6811\u6240\u6709\u8fb9\u6743\u4e4b\u548c\u3002\n\n\u4ee5\u6837\u4f8b\u4e3a\u4f8b\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/i2x9hqk0.png)\n\n\u9ed1\u8fb9\u4e3a\u539f\u6765\u7684\u6709\u5411\u8fb9\uff0c\u7ea2\u8fb9\u4e3a\u53cd\u8f6c\u8fb9\uff0c\u84dd\u8272\u90e8\u5206\u5373\u4e3a\u4ee5 $1$ \u4e3a\u6839\u7684\u6811\u7684\u6240\u6709\u8fb9\u3002\n\n\u6211\u4eec\u5df2\u7ecf\u6c42\u51fa\u4e86\u4ee5 $1$ \u4e3a\u6839\u7684\u6811\u7684\u6700\u5c11\u7ffb\u8f6c\u6b21\u6570\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u60f3\u60f3\u5982\u4f55\u5feb\u901f\u7684\u6c42\u51fa\u4ee5\u5176\u4ed6\u70b9\u4e3a\u6839\u7684\u6700\u5c11\u7ffb\u8f6c\u6b21\u6570\u3002\n\n\u8bbe $f_i$ \u4e3a\u4ee5 $i$ \u4e3a\u6839\u7684\u6700\u5c11\u7ffb\u8f6c\u6b21\u6570\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9yo9fc1n.png)\n\n\u4ece\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5f53\u8ddf\u7531 $i$ \u53d8\u4e3a $i$ \u7684\u4e00\u4e2a\u513f\u5b50 $j$ \u65f6\u6574\u68f5\u6811\u53ea\u6709\u8fd9\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u7684\u65b9\u5411\u9700\u8981\u6539\u53d8\u3002\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5f53\u8fd9\u6761\u8fb9\u8fb9\u6743\u4e3a $0$ \u65f6\u5b83\u7ffb\u8f6c\u540e\u9700\u8981\u539f\u6765\u6ca1\u6709\u7684\u6709\u5411\u8fb9\uff08\u5c31\u662f\u6211\u4eec\u5b58\u7684\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff09\uff0c\u6240\u4ee5 $f_j=f_i+1$\uff0c\u53cd\u4e4b\u5219\u662f $f_j=f_i-1$.\n\nCode\n\n```cpp\n\n#include <cstdio>\nusing namespace std;\nconst int MAXN=200005;\ninline int read() {\n\tint res=0,f=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') f=-1; ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {res=res*10+ch-'0'; ch=getchar();}\n\treturn res*f;\n}\nint n,ecnt;\nint head[MAXN];\nint f[MAXN];\nint t[MAXN];\nstruct Edge {\n\tint next,to,dis;\n}e[MAXN<<1];\ninline void add(int from,int to,int dis) {\n\te[++ecnt].next=head[from];\n\te[ecnt].to=to;\n\te[ecnt].dis=dis;\n\thead[from]=ecnt;\n}\ninline void dfs1(int x,int fa) { //\u6c42\u51fa\u4ee51\u4e3a\u6839\u65f6\u6700\u5c11\u7ffb\u8f6c\u6b21\u6570\n\tt[x]=0;\n\tfor(register int i=head[x];i;i=e[i].next) {\n\t\tif(e[i].to==fa) continue;\n\t\tdfs1(e[i].to,x);\n\t\tt[x]+=e[i].dis;\n\t\tt[x]+=t[e[i].to];\n\t}\n}\ninline void dfs2(int x,int fa) {//\u6362\u6839dp\n\tfor(register int i=head[x];i;i=e[i].next) {\n\t\tif(e[i].to==fa) continue;\n\t\tif(e[i].dis) f[e[i].to]=f[x]-1;\n\t\telse f[e[i].to]=f[x]+1;\n\t\tdfs2(e[i].to,x);\n\t}\n}\nsigned main() {\n\twhile(~scanf(\"%d\",&n)) {//\u7531\u4e8e\u9898\u76ee\u8f93\u5165\u6ca1\u6709\u7ed9\u6837\u4f8b\u7ec4\u6570\u6240\u4ee5\u9700\u8981\u7528\u8fd9\u4e2awhile\u6765\u5224\u65ad\u8bfb\u5165\u662f\u5426\u7ed3\u675f\n\t\tfor(register int u,v,i=1;i<n;++i) {\n\t\t\tu=read(); v=read(); \n\t\t\tadd(u,v,0); add(v,u,1);\n            \n\t\t}\n\t\tdfs1(1,0);\n\t\tf[1]=t[1];\n\t\tdfs2(1,0);\n\t\tint mn=1919810;\n\t\tfor(register int i=1;i<=n;++i)\n\t\t\tif(f[i]<mn) mn=f[i];\n\t\tprintf(\"%d\\n\",mn);\n\t\tfor(register int i=1;i<=n;++i)\n\t\t\tif(f[i]==mn) printf(\"%d \",i);\n\t\tprintf(\"\\n\");\n\t\tecnt=0;\n\t\tfor(register int i=1;i<=n;++i)\n\t\t\thead[i]=0;\n        //\u522b\u5fd8\u4e86\u6bcf\u7ec4\u6570\u636e\u5904\u7406\u5b8c\u540e\u8981\u91cd\u65b0\u521d\u59cb\u5316\u6570\u7ec4\n\t}\n\treturn 0;\n}",
        "postTime": 1627539141,
        "uid": 149815,
        "name": "Isprime",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "\u9898\u76ee\u94fe\u63a5\uff1a**[CF219D Choosing Capital for Treelan](https://www.luogu.com.cn/problem/CF219D)**\n\n\u8fd9\u662f\u4e00\u9053\u7b80\u5355\u7684\uff08\u4e14\u6d89\u53ca\u5230\u4e00\u4e2a\u5c0f Trick \u7684\uff09\u6362\u6839 DP\u3002\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u8282\u70b9 $n-1$ \u6761\u6709\u5411\u8fb9\u7684\u6811\uff0c\u8bbe\u7f6e\u67d0\u4e2a\u8282\u70b9 $i$ \u4e3a\u6839\uff0c\u5219\u4e3a\u4e86\u8ba9\u4ed6\u80fd\u591f\u5230\u8fbe\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u9700\u8981\u7ffb\u8f6c $k$ \u9053\u8def\uff0c\u6c42\u51fa\u4f7f\u5f97 $k$ \u6700\u5c0f\u7684\u8282\u70b9 $i$\u3002\n\n## \u89e3\u6cd5\n\n\u6839\u4e0e\u6839\u4e4b\u95f4\u987b\u6709\u5173\u7cfb\u3002\n\n\u9996\u5148\u5c06\u8bfb\u5165\u7684\u8fb9\u8fb9\u6743\u8bbe\u4e3a $0$\uff0c\u540c\u65f6\u5efa\u7acb\u4e00\u6761\u53cd\u5411\u7684\u8fb9\uff0c\u8bbe\u7f6e\u5176\u8fb9\u6743\u4e3a $1$\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u6362\u6839 DP\u3002\n\n\u4ee4\u7236\u4eb2\u8282\u70b9\u4e3a $u$\uff0c\u513f\u5b50\u8282\u70b9\u4e3a $v$\uff0c\u6b64\u65f6\u4e0d\u96be\u53d1\u73b0\u5f53\u6839\u8282\u70b9\u8f6c\u5316\u7684\u65f6\u5019\uff0c\u9664\u4e86\u8fd9\u4e24\u70b9\u4e4b\u95f4\u7684\u4e00\u6761\u8fb9\uff0c\u5176\u4ed6\u7684\u8fb9\u5e76\u6ca1\u6709\u53d1\u751f\u6539\u53d8\uff0c\u5e76\u4e14 $u\\to v$ \u548c $v\\to u$ \u4e00\u5b9a\u662f\u4e00\u4e2a $0$ \u4e00\u4e2a $1$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$f_v=\\begin{cases}f_u+1&{w_{u,v}=0}\\\\f_u-1&{w_{u,v}=1}\\end{cases}$$\n \n\n\u663e\u7136\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u5176\u4e2d\u4e00\u4e2a\u70b9\u7684 $f$ \u503c\u5c31\u53ef\u4ee5\u63a8\u53ca\u6240\u6709\u7684 $f$ \u503c\u3002\u4ee3\u7801\u5c31\u5f88\u5bb9\u6613\u5b9e\u73b0\u4e86\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h> \n#define int long long\n#define N 200005 \n#define INF 0x7fffffff\nusing namespace std;\nstruct Edge{\n    int v,nxt;\n    bool w;\n}e[N<<1];\nint h[N],cnt,f[N],n,a,b;\nvoid add(int u,int v,bool w){\n\te[++cnt].v=v;e[cnt].nxt=h[u];\n\te[cnt].w=w;h[u]=cnt;\n}void dfs(int x,int fa){\n\tfor(int i=h[x];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(v==fa)continue;\n\t\tdfs(v,x);f[x]+=f[v]+e[i].w;\n\t}\n}void cal(int x,int fa){\n\tfor(int i=h[x];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(v==fa)continue;\n\t\tf[v]=f[x]+(e[i].w?-1:1);\n\t\tcal(v,x);\n\t}\n}signed main(){\n    while(scanf(\"%lld\",&n)!=EOF){\n        cnt=0;\n        memset(h,0,sizeof h);\n        memset(f,0,sizeof f);\n        for(int i=1;i<n;i++){\n            scanf(\"%lld%lld\",&a,&b);\n            add(a,b,0);add(b,a,1);\n        }dfs(1ll,-1ll);cal(1ll,-1ll);\n        int mn=INF;\n        for(int i=1;i<=n;i++)mn=min(mn,f[i]);\n        printf(\"%lld\\n\",mn);\n        for(int i=1;i<=n;i++)if(f[i]==mn)printf(\"%lld \",i);\n        puts(\"\");\n    }return 0;\n}\n```\n\n\u8fdb\u884c\u4e24\u6b21\u6df1\u641c\u662f\u666e\u901a\u6362\u6839 DP \u7684\u666e\u904d\u89e3\u6cd5\uff0c\u8fd9\u6837\u4e00\u4e2a $O(n)$ \u7684 DP \u662f\u53ef\u4ee5\u88ab\u63a5\u53d7\u7684\u3002",
        "postTime": 1627440456,
        "uid": 212283,
        "name": "Aw\u987f\u987f",
        "ccfLevel": 5,
        "title": "\u3010\u9898\u89e3\u3011CF219D Choosing Capital for Treelan"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF219D)\n\n\u7b2c\u4e00\u7a3f\uff1a2020.8.16 21:10:59\n\n\u7b2c\u4e8c\u7a3f\uff1a2020.8.17 14:33:21 \u6dfb\u52a0\u4e86\u9898\u9762\u7b80\u8ff0\uff0c\u589e\u52a0\u4e86\u4ee3\u7801\u6ce8\u91ca\uff0c\u589e\u5f3a\u4e86\u9898\u89e3\u53ef\u8bfb\u6027\uff0c\u66f4\u6539\u4e86\u5206\u7ec4\u3002\n\n\u9898\u610f\u7b80\u8ff0(\u5df2\u53bb\u9664\u9898\u76ee\u80cc\u666f)\uff1a\n\u5df2\u77e5\u4e00\u68f5\u6709 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6811\u4e0a\u7684\u8fb9\u662f\u6709\u5411\u7684\uff0c\u73b0\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u8282\u70b9\u4e3a\u6839\uff0c\u4f7f\u5f97\u6b64\u6839\u80fd\u5230\u8fbe\u6240\u6709\u5176\u4ed6\u8282\u70b9\u3002\u5982\u679c\u65e0\u6cd5\u901a\u8fc7\u67d0\u6761\u8def\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u7ffb\u8f6c\uff08\u5373\u5c06 $a->b$ \u6539\u4e3a $b->a$)\u3002\n\u4f60\u7684\u4efb\u52a1\u662f\uff1a\u627e\u5230\u4e00\u4e2a\u6839\uff0c\u4f7f\u6b64\u6839\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u6240\u9700\u7ffb\u8f6c\u9053\u8def\u6570\u6700\u5c0f\u3002\uff08\u7b54\u6848\u4e0d\u552f\u4e00\uff09\uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u7ffb\u8f6c\u8fb9\u6570\u53ca\u6240\u6709\u6ee1\u8db3\u6b64\u7ffb\u8f6c\u8fb9\u6570\u7684\u6839\u3002\n\n\u5bf9\u4e8e\u6837\u4f8b\u4e00\uff08\u5982\u56fe\uff09\uff1a\n\u70b9 $2$ \u5373\u4e3a\u6ee1\u8db3\u9898\u610f\u7684\u6700\u4f18\u89e3\uff0c\u4ee5\u5176\u4e3a\u6839\u65e0\u9700\u7ffb\u8f6c\u4efb\u4f55\u4e00\u6761\u8fb9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tuqux12f.png)\n\n\u5bf9\u4e8e\u6837\u4f8b\u4e8c\uff08\u5982\u56fe\uff09\uff1a\n\u5982\u679c\u9009\u62e9\u70b9 $4$ \u5219\u9700\u8981\u7ffb\u8f6c $3$ \u6761\u8fb9\uff0c\u800c\u9009\u62e9\u70b9 $1$\uff0c$2$ \u6216 $3$ \u5219\u53ea\u9700\u7ffb\u8f6c\u4e24\u6761\u8fb9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qh0qo1vw.png)\n\n\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u641c\u7d22\u5230\u70b9 $nod$\uff0c\u6b64\u8282\u70b9\u53ea\u80fd\u901a\u5f80 $fa$ \u548c\u552f\u4e00\u7684\u70b9 $son$,\u90a3\u4e48\u70b9 $nod$ \u7684\u72b6\u6001\u53ea\u4e0e\u70b9 $son$ \u7684\u72b6\u6001\u548c\u6b64\u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u51b3\u5b9a\u3002\n\n\u6b64\u7ed3\u8bba\u5bf9\u4e8e\u6b64\u8282\u70b9\u6709 $k$ \u4e2a $son$ \u4f9d\u7136\u6210\u7acb\u3002\n\n\u4e0d\u96be\u770b\u51fa\u8fd9\u662f\u4e00\u4e2a\u6811\u5f62dp\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2adp\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u5f53\u524d\u70b9\u7684\u72b6\u6001\u3002\n\n\u5982\u679c\u6709\u5411\u8fb9\u4e3a $nod$ \u5230 $son$\uff0c\u5219 $dp[nod]+=dp[son];$\uff08\u6b64\u8fb9\u4e0d\u9700\u7ffb\u8f6c\uff09\n\n\u5426\u5219 $dp[nod]+=dp[son]+1;$\uff08\u6b64\u8fb9\u9700\u7ffb\u8f6c\uff09\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u4ee5\u4e0b\u7684\u4ee3\u7801\u6bb5(\u6811\u5f62dp\uff09\uff1a\n```cpp\nvoid dfs(int nod,int fa) {  // nod\u4e3a\u5f53\u524d\u8282\u70b9\uff0cfa\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9\n    int l(way[nod].size());\n    for(int i(0); i!=l; ++i) {\n        int son(way[nod][i]);\n        if(son==fa) continue;\n        dfs(son,nod);\n        dp[nod]+=dp[son];\n        if(_to[mpr(son,nod)]) ++dp[nod];\n    }\n```\n\n~~\u7136\u540e\u6211\u50bb\u4e4e\u4e4e\u5730\u8dd1\u4e86\u4e00\u4e2aO(TLE) \u7684n\u904d\u6811\u5f62dp\u3002\u3002\u3002~~\n\n~~Time Limit Exdeeded in #8~~\n\n\u8ba9\u6211\u4eec\u518d\u6765\u5206\u6790\u4e00\u4e0b\u9898\u76ee\uff1a\n\u5bf9\u4e8e\u4ee5\u70b9 $nod$ \u4e3a\u9996\u90fd\u548c\u4ee5\u70b9 $son$ \u4e3a\u9996\u90fd\uff0c\u5bf9\u5176\u9020\u6210\u5f71\u54cd\u7684\u53ea\u6709\u5b83\u4eec\u4e2d\u95f4\u7684\u4e00\u6761\u8def\uff0c\u5373 $dp[nod]$ \u548c $dp[son]$ \u7684\u5dee\u503c\u4e3a 1 \u3002\n\n\u6240\u4ee5\u6211\u4eec\u52a0\u4e00\u4e2a\u5224\u65ad\uff0c\u5982\u679c\u5355\u5411\u8def\u4e3a\u4ece $nod$ \u5230 $son$ \uff0c\u5219 $dp[son]=dp[nod]+1;$ \u5426\u5219 $dp[son]=dp[nod]-1;$\n\n\u4e8e\u662f\u5c31\u6709\u4e86\u8fd9\u6bb5\u4ee3\u7801\uff08\u5177\u4f53\u7684\u6ce8\u91ca\u5728\u4e0b\u9762\u7684AC\u4ee3\u7801\u4e2d\uff09\uff1a\n```cpp\n#define mpr make_pair\n\ntypedef pair<int,int> P;\nmap <P,bool> _to;\n\nif(_to[mpr(son,nod)]) ans[son]=ans[nod]-1;\nelse ans[son]=ans[nod]+1;\n```\n\u4ee5\u4e0a\u5373\u4e3a\u9898\u76ee\u7684\u5927\u4f53\u601d\u8def\uff0c\u4e0b\u9762\u9644\u4e0aAC\u4ee3\u7801~~\uff08\u7ed3\u5408\u6ce8\u91ca\u98df\u7528\u66f4\u4f73\uff09~~ \uff1a\n```cpp\n#include<bits/stdc++.h>\n#define mpr make_pair\nusing namespace std;\nconst int MAXN=2e5+20; // \u5373\u4e3a200020 \ntypedef pair<int,int> P;\nmap <P,bool> _to; // \u7528\u6765\u5b58\u6709\u5411\u8fb9  \nvector <int> way[MAXN],a;// way[nod]\u8868\u793a\u6709\u54ea\u4e9b\u70b9\u548c\u70b9nod\u6709\u8fb9\u76f4\u63a5\u76f8\u8fde, a\u7528\u6765\u5b58\u50a8\u6700\u4f18\u89e3\u6709\u54ea\u51e0\u79cd   \nint dp[MAXN],ans[MAXN];// ans[nod] \u8868\u793a\u4ee5\u70b9nod\u4e3a\u6839\u6240\u9700\u7ffb\u8f6c\u8fb9\u6570  \nint n,minn(MAXN);\nvoid made() { // \u5b58\u50a8\u8fb9 \n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    _to[mpr(x,y)]=true;  // \u6709\u5411\u8fb9\u5b58\u50a8  \n    way[x].push_back(y);\n    way[y].push_back(x); // \u53cc\u5411\u9053\u8def \u65b9\u4fbf\u5904\u7406  \n}\nvoid dfs(int nod,int fa) { // \u7b2c\u4e00\u904d\u641c\u7d22  \n    int l(way[nod].size());\n    for(int i(0); i!=l; ++i) {\n        int son(way[nod][i]);\n        if(son==fa) continue; // \u9632\u6b62nod->son->nod->son...\u6b7b\u5faa\u73af \n        dfs(son,nod);  //\u5148\u5411\u4e0b\u4e00\u7ea7\u641c\u7d22\uff0c\u56de\u6eaf  \n        dp[nod]+=dp[son]; //\u5f53\u524d\u70b9\u72b6\u6001\u9700\u4e0e\u5b50\u8282\u70b9\u72b6\u6001\u76f8\u52a0  \n        if(_to[mpr(son,nod)]) ++dp[nod]; //\u82e5\u6709\u5411\u8fb9\u4e3ason->nod\u5219\u9700\u8981\u518d\u589e\u52a0\u4e00\u4e0b\u7ffb\u8f6c\u6b64\u8fb9\u7684\u6b21\u6570  \n    }\n}\nvoid solve(int nod,int fa) { // \u6362\u6839  \n    int l(way[nod].size());\n    for(int i(0); i!=l; ++i) {\n        int son(way[nod][i]);\n        if(son==fa) continue;// \u9632\u6b62nod->son->nod->son...\u6b7b\u5faa\u73af \n        if(_to[mpr(son,nod)]) ans[son]=ans[nod]-1; //\u5355\u5411\u8fb9\u4e3a\u4ece son \u5230 nod\n        else ans[son]=ans[nod]+1; //\u5355\u5411\u8fb9\u4e3a\u4ece nod \u5230 son \n        solve(son,nod); //\u4e0b\u4e00\u70b9\u72b6\u6001\u9700\u4ece\u5f53\u524d\u70b9\u63a8\u51fa\uff0c\u6240\u4ee5\u5f53\u524d\u70b9\u641c\u5b8c\u518d\u641c\u4e0b\u4e00\u70b9 \n    }\n}\nvoid output() {\n    printf(\"%d\\n\",minn);\n    int l(a.size());\n    for(int i(0); i!=l; ++i) printf(\"%d \",a[i]);\n    printf(\"\\n\");\n}\nint main() {\n    scanf(\"%d\",&n);\n    for(int i(1); i!=n; ++i) made();\n    dfs(1,0); ans[1]=dp[1]; solve(1,0);\n    for(int i(1); i<=n; ++i) {// \u7b54\u6848\u5904\u7406 \n        if(ans[i]<minn) {\n            minn=ans[i];\n            a.clear();\n        }\n        if(ans[i]==minn) a.push_back(i);\n    }\n    output();\n    return 0;\n}\n```",
        "postTime": 1597583459,
        "uid": 109009,
        "name": "\u8fdd\u89c4\u7528\u6237\u540d109009",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "\u6811\u5f62DP\u65b0\u624b\u5165\u95e8\u5fc5\u5907\u4e4b\u9898 ->[this](https://www.luogu.com.cn/problem/CF219D)\n\n\u5176\u5b9e\u662f\u9ec4\u9898\u7684\u96be\u5ea6\u5566\u3002\n\n\u6362\u6839DP~~\u5957\u8def~~\u601d\u8def\uff1a\n\n1. \u968f\u4fbf\u627e\u4e00\u4e2a\u6839(\u4e00\u822c\u53d61)\uff0c\u8ba1\u7b97\u51fa\u5f53\u51b3\u7b56\u4e3a\u5b83\u65f6\u7684\u7b54\u6848\uff08\u8ba1\u7b97\u51fa\u4ee51\u4e3a\u9996\u90fd\u9700\u8981\u53cd\u8f6c\u51e0\u6761\u8def\uff09\n\n2. \u7531\u6839\u63a8\u5411\u53f6\u5b50\uff0c\u6211\u4eec\u9700\u8981\u627e\u51fa\u4e00\u4e2a DP \u65b9\u7a0b\u3002\n\n\u7ecf\u5178\u4f8b\u9898\uff1a\n\n1. \u6811\u7684\u91cd\u5fc3\uff0c\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u628a\u6811\u53d8\u6210\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u6709\u6839\u6811\u65f6\uff0c\u6700\u5927\u5b50\u6811\u7684\u8282\u70b9\u6570\u6700\u5c0f\u3002\n\n\u5982\u679c\u6309\u5957\u8def\uff0c\u5c31\u5e94\u8be5\u8bbe$f_i$\u4e3a\u4ee5 i \u4e3a\u6839\u65f6\u7684\u6700\u5927\u5b50\u6811\u7684\u8282\u70b9\u6570\u3002\n\n\u4e0d\u8fc7\u8fd9\u6837\u4e0d\u597d\u8f6c\u79fb\uff0c\u7ecf\u8fc7\u601d\u8003\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa\u4ee5 1 \u4e3a\u6839\u65f6\u5b50\u6811 i \u7684\u5927\u5c0f$sum_i$\uff08\u6709\u51e0\u4e2a\u8282\u70b9\uff09\uff0c$f_i$ \u5373\u4e3a$\\max(sum_i-1~,~n-sum_i )$ ,\u7136\u540e\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u4f8b\u5b50\u544a\u8bc9\u6211\u4eec\u6c42\u8f6c\u79fb\u65b9\u7a0b\u65f6\u8981\u7075\u6d3b\u3002\n\n-------------------------------------\n\n\u6b65\u5165\u6b63\u9898\uff1a \n\n\u76f8\u6bd4\u6811\u7684\u91cd\u5fc3\uff0c\u6b64\u9898\u66f4\u52a0\u7b26\u5408\u5957\u8def\u3002\n\n\u8bbe $f_i$\u4e3a\u4ee5 $i$ \u4e3a\u9996\u90fd\u9700\u8981\u53cd\u8f6c\u51e0\u6761\u9053\u8def\u3002\u5728\u6c42 1 \u4e3a\u9996\u90fd\u65f6\uff0c\u4e0d\u96be\u60f3\u51fa\uff0c\u82e5\u9053\u8def\u7684\u65b9\u5411\u662f\u7531 `\u6839 <- \u5b50\u8282\u70b9 \u7684\u8bdd`\uff0c$f_1$\u5c31\u8981\u52a01\uff0c\u7ffb\u8f6c\u6b64\u6761\u9053\u8def\u3002\n\n\u7136\u540e\u8f6c\u79fb\u65b9\u7a0b\u4e5f\u5f88\u597d\u60f3\uff0c\u4e00\u822c\u6211\u4eec\u901a\u5e38\u4f7f\u7528 pull($f_i = f_{i-1}+f_{i-2}$) \u578b\u7684\u8f6c\u79fb\u65b9\u7a0b\uff0c\u7136\u800c\u5728\u6b64\u9898\u4e2d push \u578b$(f_{i+1}+=f_i~,~f_{i+2}+=f_i)$\u66f4\u597d\u5199\u3002\n\n\u601d\u8003\u540e\uff0c\u53ef\u4ee5\u60f3\u5230\u5f88\u7b80\u5355\u7684\u65b9\u7a0b\n$$f_{edge_i} = f_i + 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~(\\text{\u8def\u5f84\u4e3a\u6839 -> \u5b50\u8282\u70b9}\n$$\n$$f_{edge_i} = f_i - 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~(\\text{\u8def\u5f84\u4e3a\u6839 <- \u5b50\u8282\u70b9}))$$\n\n\u4e3a\u751a\uff1f\u9996\u5148 \u8def\u5f84\u4e3a \u6839 -> \u5b50\u8282\u70b9 \u65f6\uff0c\u6211\u4eec\u8981\u8ba9\u5b50\u8282\u70b9\u671d\u5411\u6839\u624d\u884c\uff0c\u53cd\u4e4b\u540c\u7406\u3002\u5177\u4f53\u7ec6\u8282\u89c1\u4ee3\u7801\u5427\u3002\n\n```\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\ntypedef long long ll;\nconst int N = 1e6+10;\nint cnt = 0,head[N],edge[N],next[N],val[N];\n//val = 1\u8868\u793a\u8fb9\u7684\u65b9\u5411\u4e3a\u6b63\u5411\u7684\uff0c\u5426\u5219\u662f\u53cd\u5411\u8fb9\u3002\nvoid add(int x,int y,int v) {\n\tnext[++cnt] = head[x];\n\thead[x] = cnt;\n\tedge[cnt] = y;\n\tval[cnt] = v;\n} \nvoid addd(int x,int y) {add(x,y,1);add(y,x,0);}\nint f[N],cntt = 0x7ffffff;//cnt\u4e3a\u7b54\u6848\nint pre(int fa,int now) {\n\tint ans = 0;\n\tfor(int i = head[now];i; i = next[i]) {\n\t\tif(edge[i] == fa)continue;\n\t\tif(!val[i])ans++;//\uff01val[i] <-> val[i] == 0\n\t\tans += pre(now,edge[i]);\n\t}\n\treturn ans;\n}\nvoid dp(int fa,int now) {\n\tcntt = std::min(cntt,f[now]);\n\tfor(int i = head[now];i; i = next[i]) {\n\t\tif(edge[i] == fa)continue;\n\t\tif(val[i] == 1)f[edge[i]] = f[now]+1;\n\t\tif(val[i] == 0)f[edge[i]] = f[now]-1;\n\t\tdp(now,edge[i]);\n\t}\n}\nint main() {\n\tint n;scanf(\"%d\",&n);\n\tfor(int i = 1; i <= n-1; i++) {\n\t\tint a,b;scanf(\"%d%d\",&a,&b);\n\t\taddd(a,b);\n\t}\n\tf[1] = pre(-1,1);\n\tdp(-1,1);\n\tprintf(\"%d\\n\",cntt);\n\tfor(int i = 1; i <= n; i++) \n\t\tif(f[i] == cntt)printf(\"%d\\n\",i);\n\n\treturn 0;\n} \n//      \u250f\u251b \u253b\u2501\u2501\u2501\u2501\u2501\u251b \u253b\u2513\n//      \u2503\u3000\u3000\u3000\u3000\u3000\u3000 \u2503\n//      \u2503\u3000\u3000\u3000\u2501\u3000\u3000\u3000\u2503\n//      \u2503\u3000\u2533\u251b\u3000  \u2517\u2533\u3000\u2503\n//      \u2503\u3000\u3000\u3000\u3000\u3000\u3000 \u2503\n//      \u2503\u3000\u3000\u3000\u253b\u3000\u3000\u3000\u2503\n//      \u2503\u3000\u3000\u3000\u3000\u3000\u3000 \u2503\n//      \u2517\u2501\u2513\u3000\u3000\u3000\u250f\u2501\u2501\u2501\u251b\n//        \u2503\u3000\u3000\u3000\u2503   \u795e\u517d\u4fdd\u4f51\n//        \u2503\u3000\u3000\u3000\u2503   AC Accept \u5f97\u5206100\uff01\n//        \u2503\u3000\u3000\u3000\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n//        \u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000    \u2523\u2513\n//        \u2503\u3000\u3000\u3000\u3000         \u250f\u251b\n//        \u2517\u2501\u2513 \u2513 \u250f\u2501\u2501\u2501\u2533 \u2513 \u250f\u2501\u251b\n//          \u2503 \u252b \u252b   \u2503 \u252b \u252b\n//          \u2517\u2501\u253b\u2501\u251b   \u2517\u2501\u253b\u2501\u251b\n```\n",
        "postTime": 1593092108,
        "uid": 226148,
        "name": "Suuon_Kanderu",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "\u5176\u4ed6\u7684\u4e0d\u7528\u8bf4\u4e86\u5427\uff0c\u6211\u4eec\u76f4\u63a5\u5207\u5165\u6b63\u9898\u3002\n\n\u9996\u5148\u8003\u8651\u6700\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u4e5f\u5c31\u662f\u679a\u4e3e\u9996\u90fd\u4f4d\u7f6e\uff0c\u518d\u6c42\u89e3\u5f53\u524d\u4f4d\u7f6e\u4e0b\u6700\u5c0f\u9700\u8981\u6539\u5efa\u9053\u8def\u7684\u6761\u6570\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2)$\u3002\u5bf9\u4e8e\u672c\u9898\u7684\u6570\u636e\u89c4\u6a21\u663e\u7136\u4f1a\u8d85\u65f6\u3002\n\n\u5982\u679c\u662f\u5927\u4f6c\u8fd9\u91cc\u5c31\u4f1a\u7528\u6811\u5f62dp\u4e86\uff0c\u4f46\u662f\u6211\u4e0d\u662f\u5927\u4f6c\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u4e2a\u840c\u65b0\u4e5f\u542c\u5f97\u61c2\u7684\u65b9\u6cd5\u3002\n\n\u5bf9\u4e8ebfs\u5b9e\u73b0\u6c42\u67d0\u70b9\u4e3a\u9996\u90fd\u4e0b\u7684\u6700\u5c0f\u6539\u5efa\u9053\u8def\u6761\u6570\u5e76\u4e0d\u96be\uff0c\u4e5f\u4e0d\u505a\u8fc7\u591a\u8bb2\u89e3\uff0c\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\u3002\u7136\u540e\u91cd\u8981\u7684\u90e8\u5206\u6765\u4e86\uff0c\u770b\u56fe\u7247\u3002\u4ee5\u6837\u4f8b2\u4e3a\u4f8b\uff0c\n![](https://cdn.luogu.com.cn/upload/image_hosting/9ua74crn.png)\n\u8bbe$Cost_i$\u4e3a\u67d0\u4e2a\u70b9\u80fd\u591f\u8fbe\u5230\u7684\u6700\u5c0f\u6539\u5efa\u6761\u6570\uff0c\u5982\u679c\u6709\u70b9$j$\u6709\u4e00\u6761\u5c0f\u8def\u5230\u8fbe$i$\uff0c\u5219$Cost_j=Cost_i+1$\uff0c\u5982\u679c\u70b9$j$\u6709\u4e00\u6761\u9a6c\u8def\u5230\u8fbe$i$\uff0c\u5219$Cost_j=Cost_i-1$\u3002\n\n\u6ce8\u610f\uff0c\u8fd9\u4e2a\u7ed3\u8bba\u53ea\u6709\u5728\u5f53\u524d\u56fe\u662f\u4e00\u68f5\u6811\u65f6\u624d\u9002\u7528\uff0c\u6b63\u786e\u6027\u5176\u5b9e\u4e0d\u751a\u663e\u7136\uff0c\u7531\u4e8e\u5728\u4e00\u68f5\u6811\u4e2d\uff0c\u4e00\u6761\u8fb9\u5de6\u53f3\u8fde\u7740\u7684\u4e24\u4e2a\u5757\u6709\u4e14\u4ec5\u6709\u8fd9\u4e00\u6761\u8def\u5f84\u901a\u5411\u53e6\u5916\u4e00\u4e2a\u5757\uff0c\u6240\u4ee5\u901a\u8fc7\u8fd9\u6761\u8fb9\u4e0a\u4ed8\u51fa\u7684\u4ee3\u4ef7\u53d8\u5316\u5373\u4e3a\u603b\u9700\u8981\u4ed8\u51fa\u7684\u4ee3\u4ef7\u53d8\u5316\u3002\n\n\u5c31\u662f\u8fd9\u6837\uff0c\u6c42\u51fa\u4e00\u4e2a\u70b9\u7684\u6700\u5c0f\u4ee3\u4ef7\u540e\uff0c\u6765\u6b21\u6df1\u641c\u5bfc\u51fa\u5176\u4ed6\u70b9\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n```cpp\n\n#include<bits/stdc++.h>\nusing\u00a0namespace\u00a0std;\nint\u00a0n,v[200005],val,res,top;\nbool\u00a0mk[200005];\nvector<pair<int,bool>\u00a0>w[200005];//\u4fdd\u5b58\u8fde\u5230\u67d0\u4e2a\u70b9\u7684\u8fb9\nqueue<pair<int,int>\u00a0>que;\nstruct\u00a0node{\n\u00a0\u00a0\u00a0\u00a0int\u00a0val,id;\n}ans[200005],sta[200005];//\u7ed3\u679c\u7684\u961f\u5217\nbool\u00a0cmp1(node\u00a0a,node\u00a0b){\n\u00a0\u00a0\u00a0\u00a0return\u00a0a.val<b.val;\n}\nbool\u00a0cmp2(node\u00a0a,node\u00a0b){\n\u00a0\u00a0\u00a0\u00a0return\u00a0a.id<b.id;\n}\nvoid\u00a0dfs(int\u00a0p,int\u00a0val){\n\u00a0\u00a0\u00a0\u00a0for(int\u00a0i=0;i<w[p].size();i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(!mk[w[p][i].first]&&w[p][i].second){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0que.push(make_pair(w[p][i].first,val));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mk[w[p][i].first]=1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dfs(w[p][i].first,val);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n}\nvoid\u00a0dfs2(int\u00a0p,int\u00a0c){\n\u00a0\u00a0\u00a0\u00a0ans[p].val=val+c;//\u6df1\u641c\u6807\u8bb0\u67d0\u70b9\u53ca\u5176\u6700\u5c0f\u4ee3\u4ef7\n\u00a0\u00a0\u00a0\u00a0for(int\u00a0i=0;i<w[p].size();i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(!mk[w[p][i].first]){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mk[w[p][i].first]=1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(w[p][i].second){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dfs2(w[p][i].first,c+1);//\u7ecf\u8fc7\u9a6c\u8def\u989d\u5916\u503c\u5c31\u589e\u52a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dfs2(w[p][i].first,c-1);//\u5426\u5219\u51cf\u5c11\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n}\nint\u00a0main(){\n\u00a0\u00a0\u00a0\u00a0cin>>n;\n\u00a0\u00a0\u00a0\u00a0for(int\u00a0i=1,u,v;i<n;i++){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cin>>u>>v;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w[u].push_back(make_pair(v,1));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w[v].push_back(make_pair(u,0));\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0mk[1]=1;\n\u00a0\u00a0\u00a0\u00a0que.push(make_pair(1,0));\n\u00a0\u00a0\u00a0\u00a0while(!que.empty()){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int\u00a0cur=que.front().first,id=que.front().second+1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0cout<<\"cur=\"<<cur<<\"\u00a0val=\"<<val<<'\\n';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0que.pop();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dfs(cur,id-1);//\u76f4\u63a5\u6807\u8bb0\u4e0d\u9700\u8981\u901a\u8fc7\u5c0f\u8def\u7684\u70b9\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int\u00a0i=0;i<w[cur].size();i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(!mk[w[cur][i].first]&&w[cur][i].second==0){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0que.push(make_pair(w[cur][i].first,id));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val++;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mk[w[cur][i].first]=1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}//\u5e7f\u641c\u5b9e\u73b0\u67e5\u627e\u67d0\u70b9\u7684\u6700\u5c0f\u4ee3\u4ef7\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0for(int\u00a0i=1;i<=n;i++){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ans[i].id=i;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ans[i].val=2147483647;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0//\u00a0cout<<\"val=\"<<val<<'\\n';\n\u00a0\u00a0\u00a0\u00a0memset(mk,0,sizeof(mk));\n\u00a0\u00a0\u00a0\u00a0mk[1]=1;\n\u00a0\u00a0\u00a0\u00a0dfs2(1,0);\n\u00a0\u00a0\u00a0\u00a0sort(ans+1,ans+n+1,cmp1);\n\u00a0\u00a0\u00a0\u00a0cout<<ans[1].val<<'\\n';\n\u00a0\u00a0\u00a0\u00a0for(int\u00a0i=1;i<=n&&ans[i].val==ans[1].val;i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sta[++top]=ans[i];\n\u00a0\u00a0\u00a0\u00a0sort(sta+1,sta+top+1,cmp2);\n\u00a0\u00a0\u00a0\u00a0for(int\u00a0i=1;i<=top;i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout<<sta[i].id<<\"\u00a0\";//\u6392\u5e8f\u5e76\u8f93\u51fa\n}\n\n\n```",
        "postTime": 1572916537,
        "uid": 251723,
        "name": "Schwarzkopf_Henkal",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "The country Treeland consists of n cities, some pairs of them are connected with unidirectional roads. Overall there are n\u2009-\u20091 roads in the country. We know that if we don't take the direction of the roads into consideration, we can get from any city to any other one.\n\nThe council of the elders has recently decided to choose the capital of Treeland. Of course it should be a city of this country. The council is supposed to meet in the capital and regularly move from the capital to other cities (at this stage nobody is thinking about getting back to the capital from these cities). For that reason if city a is chosen a capital, then all roads must be oriented so that if we move along them, we can get from city a to any other city. For that some roads may have to be inversed.\n\nHelp the elders to choose the capital so that they have to inverse the minimum number of roads in the country.\n## Input\nThe first input line contains integer n (2\u2009\u2264\u2009n\u2009\u2264\u20092\u00b7105) \u2014 the number of cities in Treeland. Next n\u2009-\u20091 lines contain the descriptions of the roads, one road per line. A road is described by a pair of integers si,\u2009ti (1\u2009\u2264\u2009si,\u2009ti\u2009\u2264\u2009n; si\u2009\u2260\u2009ti) \u2014 the numbers of cities, connected by that road. The i-th road is oriented from city si to city ti. You can consider cities in Treeland indexed from 1 to n.\n## Output\nIn the first line print the minimum number of roads to be inversed if the capital is chosen optimally. In the second line print all possible ways to choose the capital \u2014 a \nsequence of indexes of cities in the increasing order.\n## \u9898\u76ee\u89e3\u6790\n\n\u6211\u4eec\u9700\u8981\u8dd1\u4e24\u6b21\u6811\u5f62dp\uff0c\u6700\u7ec8\u6c42\u89e3\u51fa\u6240\u6709\u7ed3\u70b9\u5230\u6574\u9897\u6570\u7684\u7ed3\u70b9\u9700\u8981\u53cd\u8f6c\u7684\u8fb9\u6570\n\n\u4e0d\u59a8\u5728\u539f\u56fe\u7684\u57fa\u7840\u4e0a\u5efa\u7acb\u53cd\u56fe\uff0c\u6b63\u5411\u8fb9\u6743\u503c\u4e3a$0$\uff0c\u9006\u5411\u8fb9\u6743\u503c\u4e3a$1$\uff0c\u4ee4$c$\u4e3a\u56fe\u7684\u6743\u51fd\u6570\n\n\u5728\u7b2c\u4e00\u904d\u6811\u5f62dp\u4e2d\uff0c\u6211\u4eec\u4ee4$f[x]$\u8868\u793a\u70b9$x$\u5230\u5176\u5b50\u6811\u7ed3\u70b9\u9700\u8981\u53cd\u8f6c\u7684\u8fb9\u6570\n\n\u5728\u641c\u7d22\u5176\u5b69\u5b50\u7ed3\u70b9\u56de\u6eaf\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5f97\u5230\u7ed3\u679c\n$$f[x]=\\sum_{y\\in son(x)}c(x,y)$$\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u6c42\u70b9$x$\u5230\u6574\u68f5\u6811\u7ed3\u70b9\u6240\u9700\u53cd\u8f6c\u7684\u8fb9\u6570\u4e86\uff0c\u4ee4\u5176\u7ed3\u679c\u4e3a$f'[x]$\n\n\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\n\n- $c(x,y)=1$\uff0c\u5373\u8fb9$(x,y)$\u4e3a\u6b63\u5411\u8fb9\uff0c\u6240\u4ee5\u8fb9$(y,x)$\u4e3a\u53cd\u5411\u8fb9\uff0c$f'[y]=f'[x]-1$\n\n- $c(x,y)=0$\uff0c\u5373\u8fb9$(x,y)$\u4e3a\u53cd\u5411\u8fb9\uff0c\u6240\u4ee5\u8fb9$(y,x)$\u4e3a\u6b63\u5411\u8fb9\uff0c$f'[y]=f'[x]+1$\n\n\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n\nusing namespace std;\nconst int N = 2e+5 + 1;\nconst int inf = 0x3f3f3f3f;\nint n, x, y, ans, tot, head[N], dp[N];\nstruct Graph {\n\tint to, w, next;\n}edge[N<<1];\n\nvoid add_edge(int x, int y, int w) {\n\tedge[++tot].to = y;\n\tedge[tot].w = w;\n\tedge[tot].next = head[x];\n\thead[x] = tot;\n}\nvoid dfs1(int x, int fa) {\n\tfor(int i = head[x]; i; i = edge[i].next) {\n\t\tint y = edge[i].to;\n\t\tif(y == fa) continue;\n\t\tdfs1(y, x);\n\t\tdp[x] += dp[y] + edge[i].w;\n\t}\n}\nvoid dfs2(int x, int fa) {\n\tfor(int i = head[x]; i; i = edge[i].next) {\n\t\tint y = edge[i].to;\n\t\tif(y == fa) continue;\n\t\tdp[y] = dp[x] + (edge[i].w ? -1 : 1);\n\t\tdfs2(y, x);\n\t}\n}\nint main()\n{\n\twhile(scanf(\"%d\", &n) != EOF) {\n\t\tmemset(head, 0, sizeof head);\n\t\tmemset(dp, 0, sizeof dp);\n\t\tans = inf, tot = 0;\n\t\tfor(int i = 1; i < n; i++) {\n\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\tadd_edge(x, y, 0);\n\t\t\tadd_edge(y, x, 1);\n\t\t}\n\t\tdfs1(1, 0);\n\t\tdfs2(1, 0);\n\t\tfor(int i = 1; i <= n; i++)\n\t\t\tans = min(ans, dp[i]);\n\t\tprintf(\"%d\\n\", ans);\n\t\tfor(int i = 1; i <= n; i++)\n\t\t\tif(dp[i] == ans) printf(\"%d \", i);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1562555950,
        "uid": 139340,
        "name": "Gauss0320",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF219D Choosing Capital for Treeland"
    },
    {
        "content": "\u8003\u8651\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u601d\u8def\u3002\n\n\u6211\u4eec\u4ece$1$\u5f00\u59cbdfs\uff0c\u80fd\u6c42\u51fa\u5bf9\u4e8e$1$\u70b9\u7684\u7b54\u6848\u3002\u987a\u4fbf\u80fd\u6c42\u51fa\u5404\u4e2a\u70b9\u76f8\u5bf9\u4e8e$1$\u70b9\u7684**\u7b54\u6848\u5dee**\uff0c\u540c\u65f6\u5f00**vector**\u8bb0\u5f55\u7b54\u6848\u5dee\u7684\u70b9\u96c6\u3002\n\n```\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nconst int N=2e5+50;\nint n,x,y,ans,Ans;\nint to[N<<1],las[N<<1],fir[N],ds[N<<1],cnt;\ninline void add_edge(int u,int v){\n\tto[++cnt]=v;las[cnt]=fir[u];fir[u]=cnt;ds[cnt]=1;\n\tto[++cnt]=u;las[cnt]=fir[v];fir[v]=cnt;ds[cnt]=-1;\n}\nvector<int>vp[N<<1];\nvoid dfs(int u,int v,int a){\n\t//u\u4e3a\u5f53\u524d\u8282\u70b9\uff0cv\u662f\u7236\u4eb2\uff0ca\u662f\u4e0e1\u70b9\u7b54\u6848\u7684\u5dee\n\tvp[a+N].push_back(u);//vector\u8bb0\u5f55\n\tif(Ans>a)Ans=a;//\u66f4\u65b0\u6700\u5c0f\u503c\n\tfor(int i=fir[u];i;i=las[i])\n\tif(to[i]!=v)ans+=(ds[i]<0),dfs(to[i],u,a+ds[i]);\n    //\u8bb0\u5f551\u70b9\u7684\u7b54\u6848\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd_edge(x,y);\n\t}\n\tdfs(1,0,0);\n\tprintf(\"%d\\n\",ans+Ans);\n    //\u7b54\u6848\u663e\u7136\u662f1\u70b9\u7684\u7b54\u6848\u52a0\u4e0a\u6700\u5c0f\u503c\n\tAns+=N;\n\tsort(vp[Ans].begin(),vp[Ans].end());\n\tfor(int i=0;i<vp[Ans].size();i++)\n\tprintf(\"%d \",vp[Ans][i]);//\u6392\u5e8f\u8f93\u51fa\n}\n```",
        "postTime": 1548061543,
        "uid": 50092,
        "name": "da32s1da",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "## CF219D \u9898\u89e3\n\n+ ### \u9898\u610f\n\n  \u7ed9\u51fa\u4e00\u9897\u542b\u6709$n$\u4e2a\u70b9\u7684\u6709\u5411\u6811\uff0c\u663e\u7136\u8981\u4ece\u67d0\u4e2a\u70b9\u8d70\u5230\u5176\u4ed6\u6240\u6709\u70b9\u53ef\u80fd\u884c\u4e0d\u901a\uff0c\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u5c06\u4e00\u4e9b\u8fb9\u53cd\u5411\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u627e\u51fa\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u8be5\u70b9\u53cd\u5411\u6700\u5c11\u8fb9\u80fd\u591f\u5230\u8fbe\u5176\u4ed6\u6240\u6709\u70b9\uff0c\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684\u70b9\uff0c\u5347\u5e8f\u8f93\u51fa\u3002\n\n+ ### \u601d\u8def\n\n  \u8003\u8651\u6362\u6839dp\u3002\n\n  \u6309\u7167\u5957\u8def\uff0c\u8bbe $g[i]$ \u8868\u793a $i$ \u5230\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u6709\u591a\u5c11\u6761\u53cd\u5411\u8fb9\uff0c$f[i]$ \u8868\u793a $i$ \u5230\u6240\u6709\u70b9\u6709\u591a\u5c11\u6761\u53cd\u5411\u8fb9\u3002\n\n  \u600e\u4e48\u8bb0\u5f55\u53cd\u5411\u8fb9\u5462\uff1f\u5f88\u7b80\u5355\uff0c\u5efa\u53cc\u5411\u8fb9\u7684\u65f6\u5019\u7ed9\u8fb9\u6253\u4e0a `0/1` \u6807\u8bb0\uff0c$0$ \u8868\u793a\u6b63\u5411\uff0c$1$ \u8868\u793a\u53cd\u5411\u3002\n\n  \u4e8e\u662f\u6709\u65b9\u7a0b\uff1a\n  $$\n  g[u] = \\sum \\limits _{v \\in son[u]} ( g[v] + [e_{u,v}=1])\n  $$\n\n  $$\n  f[u]=f[fa]+(e_{fa,u}=1?-1:1)\n  $$\n\n  ~~\u6240\u4ee5g[x]\u7528\u5904\u4e0d\u5927\u53ef\u4ee5\u76f4\u63a5\u53ea\u6c42\u4e00\u4e2a $g[1]$~~\n\n  \u7b2c\u4e8c\u4e2a\u65b9\u7a0b\u753b\u753b\u56fe\u5e94\u8be5\u5f88\u597d\u61c2\uff08\n\n+ ### \u90e8\u5206\u4ee3\u7801\n\n  ```cpp\n  void dfs1(int u,int fa){\n  \tfor(int i=head[u];i;i=e[i].next){\n  \t\tint v=e[i].to;if(v==fa)continue;\n  \t\tdfs1(v,u);g[u]+=g[v]+e[i].d;\n  \t}\n  }\n  \n  void dfs2(int u,int fa){\n  \tfor(int i=head[u];i;i=e[i].next){\n  \t\tint v=e[i].to;if(v==fa)continue;\n  \t\tf[v]=f[u]+(e[i].d?-1:1);\n  \t\tdfs2(v,u);\n  \t}\n  }\n  ```",
        "postTime": 1610164422,
        "uid": 65502,
        "name": "Crab_Dave",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "#### \u7b97\u6cd5\n\n\u6362\u6839DP\uff08\u4e8c\u6b21\u626b\u63cf\u6cd5\uff09\n\n#### \u601d\u8def\n\n\u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u9898\u610f\u5efa\u6811\uff0c\u5e76\u7ed9\u8fb9\u9644\u4e0a\u6743\u503c\uff1a\u539f\u6709\u7684\u8fb9\u6743\u503c\u4e3a$0$\uff0c\u53cd\u5411\u8fb9\u6743\u503c\u4e3a$1$\uff0c\u4ee3\u8868\u8d70\u8fd9\u6761\u8fb9\u6240\u9700\u4ee3\u4ef7\u3002\n\n\u7b2c\u4e00\u6b21$DFS$\uff0c\u94a6\u5b9a$1$\u4e3a\u6839\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u4ee5$1$\u4e3a\u6839\u7684\u7b54\u6848\u3002\n\n\u7b2c\u4e8c\u6b21$DFS$\uff0c\u8003\u8651\u6839\u7531$u$\u8f6c\u79fb\u5230$v$\u65f6\u7b54\u6848\u4f1a\u600e\u4e48\u53d8\u3002\n\n+ \u82e5$u$\u5230$v$\u7684\u8fb9\u6743\u4e3a$0$\uff0c\u90a3\u4e48\u4e00\u5f00\u59cb\u6211\u4eec\u662f\u4ece$u$\u5230$v$\uff0c\u6ca1\u6709\u8ba1\u7b97\u8fb9\u6743\uff0c\u6240\u4ee5\u4e0d\u4ec5\u8981\u52a0\u4e0a\u4ece$v$\u5230$u$\u7684\u8fb9\u6743$1$\uff0c\u8fd8\u8981\u628a\u4e00\u5f00\u59cb\u6ca1\u7b97\u7684\u8fb9\u6743\u52a0\u4e0a\uff0c\u603b\u5171\u8981$+2$\uff1b\n+ \u8fb9\u6743\u4e3a$1$\u540c\u7406\uff0c\u4e0d\u8fc7\u662f$-2$\u3002\n\n\u8bbe$f_u$\u4e3a\u4ee5$u$\u4e3a\u6839\u65f6\u7684\u6700\u5c0f\u8f6c\u6362\u6b21\u6570\uff0c\u5219\u6709\uff1a\n\n$$f_v=f_u - (val_{u->v}=1) + (val_{u -> v} = 0) \\quad [v \\in ch_u]$$\n\n\u5176\u4e2d\uff0c$val_{u->v}$\u8868\u793a\u7531$u$\u8fde\u5411$v$\u7684\u8fb9\u7684\u6743\u503c\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u7edf\u8ba1\u51fa\u7b54\u6848\u4e86\uff01\n\n#### \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 2e5 + 10;\nint n,head[maxn << 1],num;\nstruct Edge{\n    int then,to,val;\n}e[maxn << 1];\n\nvoid add(int u, int v, int val){e[++num] = (Edge){head[u], v, val}; head[u] = num;}\n\nint f[maxn];\nvoid DFS1(int u, int fa){\n    for(int i = head[u]; i; i = e[i].then){\n        int v = e[i].to;\n        if(v != fa){\n            f[u] += e[i].val;\n            DFS1(v, u);\n            f[u] += f[v];\n        }\n    }\n}\n\nvoid DFS2(int u, int fa){\n    for(int i = head[u]; i; i = e[i].then){\n        int v = e[i].to;\n        if(v != fa){\n            f[v] = f[u] + (e[i].val == 0) - (e[i].val == 1);\n            DFS2(v, u);\n        }\n    }\n}\n\nint main(){\n    scanf(\"%d\", &n);\n    for(int i = 1; i < n; ++ i){\n        int u,v; scanf(\"%d%d\", &u, &v);\n        add(u, v, 0); add(v, u, 1);\n    }\n    DFS1(1, 1); DFS2(1, 1);\n    int Ans = 0x3f3f3f3f;\n    for(int i = 1; i <= n; ++ i) Ans = min(Ans, f[i]);\n    printf(\"%d\\n\", Ans);\n    for(int i = 1; i <= n; ++ i)\n        if(f[i] == Ans) printf(\"%d \", i);\n    printf(\"\\n\");\n    return 0;\n}\n```\n\n",
        "postTime": 1605230846,
        "uid": 120351,
        "name": "When",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "\n## \u9898\u89e3\uff1a\n\n\u601d\u8def\uff1a\n\n\u6811\u4e0a\u6700\u4f18\u5316\uff1a\u8003\u8651\u6811\u5f62DP\u3002\u9700\u8981\u679a\u4e3e\u6240\u6709\u6839\u6c42\u6811\u4e0a\u6700\u4f18\u5316\uff1a\u8003\u8651\u6362\u6839DP\u3002\n\n\u6240\u4ee5\u6b63\u89e3\uff1a\u6811\u5f62\u6362\u6839DP\u3002\n\n\u6362\u6839DP\u4e5f\u53eb\u4e8c\u6b21\u626b\u63cfDP\uff0c\u5982\u6709\u4e0d\u61c2\u7684\u5c0f\u4f19\u4f34\u8bf7\u8d70\u8fd9\u8fb9\uff1a\n\n[\u6d45\u8c08\u6362\u6839DP](https://www.cnblogs.com/fusiwei/p/13615814.html)\n\n\u6240\u8c13\u4e8c\u6b21\u626b\u63cf\uff0c\u5f53\u7136\u5c31\u662f\u8981\u626b\u63cf\u4e24\u6b21\u3002\u7b2c\u4e00\u6b21\u626b\u63cf\u662f\u4ece\u4e0b\u5f80\u4e0a\u56de\u6eaf\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u201d\u9009\u62e9\u4efb\u610f\u8282\u70b9\u4e3a\u6839\u7684\u6811\u5f62DP\u9884\u5904\u7406\u201c\u3002\u7b2c\u4e8c\u6b21\u626b\u63cf\u662f\u4ece\u4e0a\u5f80\u4e0b\u66f4\u65b0\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u201d\u6539\u53d8\u6811\u7684\u5f62\u6001\uff0c\u7956\u5148\u53d8\u513f\u5b50\u7684\u6362\u6839DP\u201c\u3002\n\n\u5173\u952e\u5728\u4e8e\u627e\u51fa\u4e24\u6b21\u626b\u63cf\u7684\u8f6c\u79fb\u65b9\u7a0b\u3002\n\n\u7b2c\u4e00\u6b21\u626b\u63cf\u7684\u8f6c\u79fb\u65b9\u7a0b\u662f\u6bd4\u8f83\u597d\u60f3\u7684\uff0c\u53ea\u9700\u8981\u5224\u65ad\u5f53\u524d\u679a\u4e3e\u5230\u7684\u8fd9\u6761\u8fb9\u9700\u4e0d\u9700\u8981\u53cd\u5411\u5373\u53ef\u3002\u9700\u8981\u53cd\u5411\u5c31\u52a0\u4e00\uff0c\u4e0d\u9700\u8981\u53cd\u5411\u5c31\u4e0d\u52a8\u3002\n\n\u7b2c\u4e8c\u6b21\u626b\u63cf\u5462\uff1f\n\n\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9y\u6765\u8bb2\uff0c\u5b83\u76ee\u524d\u7ef4\u62a4\u7684\u4ee51\u4e3a\u521d\u6839\u7684dp[y]\u662f\u6b63\u786e\u7684\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u53ea\u9700\u8981\u7edf\u8ba1\u5b83\u539f\u6765\u7684\u7956\u5148\u4f1a\u5bf9\u5b83\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\u3002\u5bb9\u6613\u6839\u636e\u4e0a\u4e00\u6b21\u8f6c\u79fb\u53d1\u73b0\u7684\u6027\u8d28\u662f\uff1a\u5b83\u7236\u4eb2\u7684\u7b54\u6848\u662f\u5305\u542b\u5b83\u7684\uff0c\u4e5f\u5c31\u662f\uff0c\u5bf9\u4e8e\u4e00\u5bf9\u7236\u5b50(x,y)\u6765\u8bb2\uff0c\u53ea\u9700\u8981\u8003\u8651\u4ed6\u4eec\u4e2d\u95f4\u7684\u8fb9\u5728\u6362\u6839\u540e\u9700\u4e0d\u9700\u8981\u8f6c\u5411\u3002\n\n\u539f\u6765\u4e0d\u9700\u8981\uff0c\u73b0\u5728\u5c31\u9700\u8981\uff0c\u539f\u6765\u9700\u8981\uff0c\u73b0\u5728\u5c31\u4e0d\u9700\u8981\u3002\n\n\u4e8e\u662f\u6211\u4eec\u4e5f\u6784\u601d\u51fa\u4e86\u53e6\u5916\u4e00\u4e2a\u8f6c\u79fb\u65b9\u7a0b\u3002\n\n\u5269\u4e0b\u7684\u7ec6\u8282\u53ef\u4ee5\u8be6\u89c1\u4ee3\u7801\u3002\u518d\u9700\u8981\u58a8\u8ff9\u7684\u4e00\u4e2a\u5c0f\u6280\u5de7\u5c31\u662f\u5bf9\u4e8e\u8fd9\u79cd\u6709\u5411\u56fe\u5224\u65ad\u53cd\u8f6c\u8fb9\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u53cc\u5411\u8fb9\u90fd\u5b58\u8fdb\u53bb\uff0c\u4e5f\u5c31\u662f\u5b58\u4e24\u6761\u8fb9$(u,v,0),(v,u,1)$\u8868\u793a\u8fd9\u6761\u8fb9\u9700\u4e0d\u9700\u8981\u53cd\u8f6c\u3002\n\n\u90a3\u4e48\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int maxn=2*1e5+10;\nconst int INF=1e9;\nint n,cnt,ans;\nint tot,to[maxn<<1],nxt[maxn<<1],val[maxn<<1],head[maxn];\nint pos[maxn],dp[maxn];\n//dp[i]\u8868\u793a\u4ee5i\u4e3a\u6839\u5b50\u6811\u9700\u8981\u8f6c\u591a\u5c11\u8fb9\u624d\u80fd\u8f6c\u56de\u53bb\nvoid add(int x,int y,int z)\n{\n\tto[++tot]=y;\n\tnxt[tot]=head[x];\n\tval[tot]=z;\n\thead[x]=tot;\n}\nvoid dfs1(int x,int f)\n{\n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tint y=to[i];\n\t\tif(y==f)\n\t\t\tcontinue;\n\t\tdfs1(y,x);\n\t\tdp[x]+=(dp[y]+val[i]);\n\t}\n}\nvoid dfs2(int x,int f)\n{\n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tint y=to[i];\n\t\tif(y==f)\n\t\t\tcontinue;\n\t\tdp[y]=dp[x]+pow(-1,val[i]);\n\t\tdfs2(y,x);\n\t}\n\tif(dp[x]<ans)\n\t\tans=dp[x],cnt=0;\n\tif(dp[x]==ans)\n\t\tpos[++cnt]=x;\n}\nint main()\n{\n\twhile(scanf(\"%d\",&n)!=EOF)\n\t{\n\t\tcnt=0;tot=0;ans=INF;\n\t\tmemset(dp,0,sizeof(dp));\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tadd(x,y,0);\n\t\t\tadd(y,x,1);\n\t\t}\n\t\tdfs1(1,0);\n\t\tdfs2(1,0);\n\t\tprintf(\"%d\\n\",ans);\n\t\tsort(pos+1,pos+cnt+1);\n\t\tfor(int i=1;i<=cnt;i++)\n\t\t\tprintf(\"%d \",pos[i]);\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1603332233,
        "uid": 175131,
        "name": "\u5085\u601d\u7ef4666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "\u770b\u5230\u9700\u8981\u6c42\u51fa\u4ee5\u6240\u6709\u8282\u70b9\u4e3a\u6839\u7684\u7b54\u6848\uff0c\u5f88\u663e\u7136\u662f\u4e00\u9053\u6362\u6839 DP\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u6c42\u51fa\u5728\u4ee5 $1$ \u4e3a\u6839\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5bf9\u5b83\u7684\u8d21\u732e\u3002\n\n\u6211\u4eec\u8bbe $f_i$ \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u65f6\uff0c\u5b83\u7684\u5b50\u6811\u7684\u6700\u5c0f\u53cd\u8f6c\u8fb9\u6570\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9 $v(v\\in son_x)$\uff1a\n\n\u5f53 $E(x,v)$ \u7684\u65b9\u5411\u4e3a\u4ece $x$ \u5230 $v$ \u65f6\uff0c$f_x+=f_v$\uff1b\n\n\u5f53 $E(x,v)$ \u7684\u65b9\u5411\u4e3a\u4ece $v$ \u5230 $x$ \u65f6\uff0c$f_x+=f_v+1$\u3002\n\n\u7d27\u63a5\u7740\u6211\u4eec\u8003\u8651\u6362\u6839\u3002\n\n\u8bbe $g_i$ \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u65f6\uff0c\u6574\u68f5\u6811\u7684\u6700\u5c0f\u53cd\u8f6c\u8fb9\u6570\u3002\n\n\u663e\u7136\u6709 $g_1=f_1$\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u6839\u4ece $x$ \u6362\u5230 $v(v\\in son_x)$ \u65f6\uff1a\n\n\u663e\u7136\u9664\u4e86 $E(x,v)$ \u5916\uff0c\u5176\u5b83\u8fb9\u90fd\u4e0d\u9700\u8981\u8f6c\u5411\u3002\n\n\u5f53 $E(x,v)$ \u7684\u65b9\u5411\u4e3a\u4ece $x$ \u5230 $v$ \u65f6\uff0c$g_v=g_x+1$\uff1b\n\n\u5f53 $E(x,v)$ \u7684\u65b9\u5411\u4e3a\u4ece $v$ \u5230 $x$ \u65f6\uff0c\u7531\u4e8e $E(x,v)$ \u5728 $g_x$ \u4e2d\u5df2\u7ecf\u53d8\u6362\u4e86\u4e00\u6b21\uff0c\u6240\u4ee5 $g_v=g_x-1$\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u5224\u65ad\uff0c\u6211\u4eec\u628a\u6b63\u5411\u8fb9\u7684\u8fb9\u6743\u8bb0\u4e3a $0$\uff0c\u53cd\u5411\u8fb9\u7684\u8fb9\u6743\u8bb0\u4e3a $1$\u3002\n\nCode:\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <cstring>\nusing namespace std ;\nconst int MAXN = 2e5 + 10 , INF = 0x3f3f3f3f ;\nint n , f[MAXN] ; \nstruct edge {\n\tint to ; bool dir ;\n\tedge (int v = 0 , bool w = 0) {to = v ; dir = w ;}\n} ;\nvector <edge> G[MAXN] ;\nvoid dfs1 (int x , int fa) {\n\tfor (int i = 0 ; i < G[x].size () ; i++) {\n\t\tint v = G[x][i].to , w = G[x][i].dir ;\n\t\tif (v == fa) continue ;\n\t\tdfs1 (v , x) ;\n\t\tf[x] += f[v] + w ;\n\t}\n}\nvoid dfs2 (int x , int fa) {\n\tfor (int i = 0 ; i < G[x].size () ; i++) {\n\t\tint v = G[x][i].to , w = G[x][i].dir ;\n\t\tif (v == fa) continue ;\n\t\tf[v] = f[x] + (w ? -1 : 1) ;\n\t\tdfs2 (v , x) ;\n\t}\n}\nint main () {\n\twhile (scanf (\"%d\" , &n) == 1) {\n\t\tmemset (f , 0 , sizeof (f)) ;\n\t\tfor (int i = 1 ; i <= n ; i++) G[i].clear () ; \n\t\tfor (int i = 1 ; i < n ; i++) {\n\t\t\tint u , v ;\n\t\t\tscanf (\"%d %d\" , &u , &v) ;\n\t\t\tG[u].push_back (edge (v , 0)) ;\n\t\t\tG[v].push_back (edge (u , 1)) ; \n\t\t}\n\t\tdfs1 (1 , 0) ;\n\t\tdfs2 (1 , 0) ;\n\t\tint k = INF ;\n\t\tfor (int i = 1 ; i <= n ; i++)\n\t\t\tif (f[i] < k) k = f[i] ;\n\t\tprintf (\"%d\\n\" , k) ;\n\t\tfor (int i = 1 ; i <= n ; i++)\n\t\t\tif (f[i] == k) printf (\"%d \" , i) ;\n\t\tprintf (\"\\n\") ;\n\t}\n\treturn 0 ;\n}\n```",
        "postTime": 1591418153,
        "uid": 122641,
        "name": "GIFBMP",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "\u53ef\u4ee5\u6811\u5f62DP\n\n\u7136\u540e\u8003\u8651\u4e00\u4e0b\u6362\u6839\u5c31\u53ef\u4ee5\u4e86\n\n$dp[u]=\\sum\\limits_{v\\in son_u}dp[v]+w(u,v)$\n\n\u6362\u6839\u540e\n\n$dp'[u]=dp[u]-dp[v]-w(u,v)$\n\n$dp'[v]=dp[v]+dp'[u]+w(v,u)=dp[u]+w(v,u)-w(u,v)$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cctype>\n#include<set>\n#include<queue>\n#define M 1000100\n#define inf 0x3f3f3f3f\n#define LL long long\nconst int mod=988244353;\nusing namespace std;\ninline int read(){\n\tint f=1,x=0;char s=getchar();\n\twhile (!isdigit(s)){if(s=='-')f=-1;s=getchar();}\n\twhile (isdigit(s)){x=(x<<1)+(x<<3)+(s^48),s=getchar();}\n\treturn x*f;\n}\nint t,n,head[M],cnt,dp[M],dpp[M],ans,c[M];\nstruct edge{int to,nxt,val;}e[M<<1];\ninline void add_edge(int u,int v,int w){e[++cnt].nxt=head[u],head[u]=cnt,e[cnt].to=v,e[cnt].val=w;} \ninline void dfs(int rt,int fa){\n\tdp[rt]=0;\n\tfor (int i=head[rt];i;i=e[i].nxt){\n\t\tif (e[i].to==fa) continue;\n\t\tdfs(e[i].to,rt),dp[rt]+=dp[e[i].to]+e[i].val;\t\n\t}\n}\ninline void redfs(int rt,int fa){\n\tfor (int i=head[rt];i;i=e[i].nxt){\n\t\tif (e[i].to==fa) continue;\n\t\tdpp[e[i].to]=dpp[rt]+(e[i].val?-1:1);\n\t\tredfs(e[i].to,rt);\n\t}\n}\nvector<int>p; \nsigned main(void){\n\twhile (scanf(\"%d\",&n)!=EOF){\n\t\tmemset(head,0,sizeof(head)),cnt=0;\n\t\tfor (int i=1;i<=n-1;i++){\n\t\t\tint u=read(),v=read();\n\t\t\tadd_edge(u,v,0),add_edge(v,u,1);\n\t\t}\n\t\tdfs(1,0),dpp[1]=dp[1];\n\t\tredfs(1,0);int ans=0,minx=inf;\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tif (minx>dpp[i]) minx=dpp[i],p.clear(),ans=0;\n\t\t\tif (minx==dpp[i]) p.push_back(i),ans++;\n\t\t}\n\t\tprintf(\"%d\\n\",minx);\n\t\tfor (int i=0;i<p.size();i++) printf(\"%d \",p[i]);\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1585528081,
        "uid": 78290,
        "name": "Polaris_Dane",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "# CF219D Choosing Capital for Treeland\n\n\u8fd9\u9053\u9898\u4e00\u5f00\u59cb\u89c9\u5f97\u6bd4\u8f83\u6bd2\uff0c\u4f46\u662f\u60f3\u4e00\u4e0b\u8fd8\u662f\u60f3\u7684\u51fa\u6765\u7684\u3002\n\n\u6211\u4eec\u8003\u8651\u5b9a\u4e49$dp[i][0]$\u4ee3\u8868\u5230\u70b9$i$\u6240\u6709\u5b50\u8282\u70b9\u7684\u6700\u5c0f\u6743\u503c\uff0c$dp[i][1]$\u4ee3\u8868\u5230\u70b9$i$\u5b50\u6811\u5916\u6240\u6709\u8282\u70b9\u7684\u6700\u5c0f\u6743\u503c\u3002\n\n\u90a3\u4e48\u663e\u7136\u6709\uff1a$dp[i][0]=\\sum _{t\\in son_i} dp[t][0]+[t->i]$\n\n\u5f53$fa_i=p$\uff0c\u53c8\u53ef\u4ee5\u63a8\u51fa\uff1a$dp[i][1]=dp[p][1]+[i->p]+\\sum _{t\\in son_p,t\\neq i}(dp[t][0]+[t->p])$\n\n\u90a3\u4e48\u6700\u540e\uff0c\u5bf9\u4e8e\u8282\u70b9$x$\uff0c\u9009\u62e9$x$\u4e3a\u9996\u90fd\u7684\u4ee3\u4ef7\u5c31\u662f\uff1a$dp[x][0]+dp[x][1]$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<map>\n#include<unordered_map>\n#define ll long long\n#define maxn  (int)(2e5+1000)\nusing namespace std;\nstruct node {\n    int u,v;\n};\nstruct cop {\n  bool operator()(const node a,const node b) const{\n    return (a.u==b.u)?(a.v<b.v):(a.u<b.u);\n  }\n};\nint dp[maxn][2],n,ans[maxn],cnt,mi=1e9+1000;\nvector<int>side[maxn];\nmap<node,bool,cop>check;\nll sum[maxn];\nbool test(int u,int v) {\n    struct node a={u,v};\n    return check[a];\n}\nvoid dfs1(int now,int fa) {\n    for(int i=0;i<side[now].size();i++) {\n        int v=side[now][i];if(v==fa)continue;\n        dfs1(v,now);dp[now][0]+=dp[v][0]+test(v,now);\n    }\n}\nvoid dfs2(int now,int fa) {\n    if(now==1){dp[now][1]=0;}\n    else {\n        dp[now][1]=dp[fa][1]+test(fa,now)+(sum[fa]-(dp[now][0]+test(now,fa)));\n    }\n    int tmp=dp[now][0]+dp[now][1];\n    if(tmp<mi) {\n        cnt=1,ans[cnt]=now,mi=tmp;\n    }\n    else if(tmp==mi) {\n        ans[++cnt]=now;\n    }\n    for(int i=0;i<side[now].size();i++) {\n        int v=side[now][i];if(v==fa)continue;\n        sum[now]+=dp[v][0]+test(v,now);\n    }\n    for(int i=0;i<side[now].size();i++) {\n        int v=side[now][i];if(v==fa)continue;\n        dfs2(v,now);\n    }\n}\nint main() {\n    cin>>n;\n    for(int i=1;i<n;i++) {\n        int u,v;cin>>u>>v;side[u].push_back(v);side[v].push_back(u);\n        struct node a={u,v};check[a]=1;\n    };\n    dfs1(1,0);\n    dfs2(1,0);\n    sort(ans+1,ans+1+cnt);\n    cout<<mi<<endl;\n    for(int i=1;i<=cnt;i++)cout<<ans[i]<<' ';\n    return 0;\n}\n```\n\n\n",
        "postTime": 1566394475,
        "uid": 43420,
        "name": "GavinZheng",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u53ef\u4ee5 \u4e00\u6b21 dfs \u89e3\u51b3\u7684pwq \n\n\u9996\u5148\u6c42\u51fa\u4ee51 \u4e3a\u6839\u7684\u65f6\u5019\u9700\u8981\u53cd\u8f6c\u591a\u5c11\u6b21\uff0c\u5e76\u8bb0\u5f55\u5bf9\u4e8e\u8282\u70b9u\u57281\u4e3a\u6839\u7684\u65f6\u5019\u8bb2u\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u53cd\u8f6c\u6210\u5408\u6cd5\u5b50\u6811\u9700\u8981\u591a\u5c11\u6b21\u3002\u3002\uff08\u5408\u6cd5 \u610f\u601d\u662f \u4eceu\u53ef\u4ee5\u5230u\u5b50\u6811\u4e0a\u7684\u4efb\u4f55\u70b9\uff09\n\n\u987a\u4fbf\u8dd1\u7684\u65f6\u5019\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u548c\u4ece\u8fd9\u4e2a\u70b9\u5230\u6839\u7ed3\u70b9\uff081\uff09\u628a1\u4e3a\u6839\u5408\u6cd5\u65f6\u5019\u4e00\u5171\u53cd\u8f6c\u4e86\u7684\u6b21\u6570\u3002\u3002\n\n\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5982\u679c\u60f3\u628a\u8fd9\u4e2a\u70b9\u53d8\u6210\u6839\u7136\u540e\u4f7f\u5f97\u8fd9\u4e2a\u6811\u5408\u6cd5\uff0c\u663e\u7136\u5c31\u53ea\u9700\u8981\u5c06\u539f\u67651 \u4e3a\u6839\u7684\u65f6\u5019\u4ece1\u5230\u8fd9\u4e2a\u70b9\u5168\u90e8\u53d8\u6210\u9006\u5e8f\u5c31\u597d\u3002\u539f\u6765\u662f\u4ece1\u53ef\u4ee5\u4e00\u8def\u8d70\u9053u\uff0c\u73b0\u5728\u53d8\u6210\u4eceu\u53ef\u4ee5\u4e00\u8def\u8d70\u52301\n\n\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u7531\u4e8e\u539f\u6765\u662f\u53cd\u8f6c\u8fc7\u7684\u8fb9\u73b0\u5728\u663e\u7136\u4e0d\u9700\u8981\u53cd\u8f6c\uff0c\u6240\u4ee5\u628a1\u4e3a\u6839\u7684\u7b54\u6848-=\u4ece\u8fd9\u4e2a\u6839\u5230\u8fd9\u4e2a\u70b9\u7684\u53cd\u8f6c\u6b21\u6570\uff0c\u7136\u540e\u7531\u4e8e\u5269\u4e0b\u7684\u8fb9\u5168\u90e8\u9700\u8981\u53cd\u8f6c\uff08\u539f\u6765\u6ca1\u53cd\u8f6c\uff09\u518d\u52a0\u4e0adep[u] - \u4ece\u8fd9\u4e2a\u6839\u5230\u8fd9\u4e2a\u70b9\u7684\u53cd\u8f6c\u6b21\u6570 \u603b\u7684\u6765\u8bf4\u5c31\u662f -= 2*\u8fd9\u4e2a\u6839\u5230\u8fd9\u4e2a\u70b9\u7684\u53cd\u8f6c\u6b21\u6570 + dep[u] \u7edf\u8ba1\u7b54\u6848\uff0c\u89e3\u51b3\u95ee\u9898\u3002  \n\u4ee3\u7801\u4e2d\u7528depf \u8868\u793a\u8fd9\u4e2a\u70b9\u52301\u4e3a\u6839\u7684\u65f6\u50191\u5230\u8fd9\u4e2a\u70b9\u7684\u53cd\u8f6c\u6b21\u6570\u3002\u3002\n\n\u5f00\u59cb\u6ca1\u60f3\u7740\u8bb0\u5f55\u66b4\u529b\u4ece\u8fd9\u4e2a\u70b9\u8dd1\u5230\u68391\uff0cT\u98de\u3002\u3002\u3002\n\n```cpp\n/*Heroes Never Die!*/\n#pragma GCC optimize(3)\n#include \"iostream\"\n#include \"algorithm\"\n#include \"cstring\"\n#include \"cstdio\"\nusing namespace std;\n#define MAXN 200006\nint sum[MAXN];\nint yn;\nstruct edge{\n    int u,w;edge* next;\n    edge(int u=0,int w=0,edge* next=NULL):u(u),w(w),next(next){}\n    void insert(int u,int w){\n        if(this->next == NULL) this->next = new edge(u,w,NULL);\n        else this->next = new edge(u,w,this->next);\n    }\n}e[MAXN];\nint depf[MAXN],dep[MAXN];\nvoid dfs(int u,int fa){\n    for(edge* n=e[u].next;n!=NULL;n=n->next){\n        int v = n->u;\n        if(v == fa) continue;\n        depf[v] = depf[u] + n->w;\n        dep[v] = dep[u] + 1;\n        dfs(v,u);\n        sum[u] += sum[v] + n->w;\n    }\n}\nint ans[MAXN],p;\nint res = 0,Res\nint main(){\n    cin >> yn;\n    for(int i=0;i<yn-1;++i){\n        static int u,v;scanf(\"%d%d\",&u,&v);\n        e[u].insert(v,0),e[v].insert(u,1);\n    }\n    dfs(1,1);\n    Res = res = sum[1],ans[p++] = 1;\n    for(int i=2;i<=yn;++i){\n        int curres = Res;\n        curres += -2*depf[i] + dep[i];\n        if(curres < res) res = curres,p = 0,ans[p++] = i;\n        else if(curres == res) ans[p++] = i;\n    }\n    sort(ans,ans+p);\n    cout << res << endl;\n    for(int i=0;i<p;++i) printf(\"%d \",ans[i]);\n}\n```",
        "postTime": 1539351774,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF219D \u3010Choosing Capital for Treeland\u3011"
    }
]