[
    {
        "content": "\u9996\u5148\u5206\u6790\u9898\u76ee\u3002\n\u77e5\u9053\u8fd9\u9053\u9898\u662f\u5b57\u7b26\u4e32\u548c\u6a21\u5f0f\u4e32\u7684\u5339\u914d\u95ee\u9898\u3002\u4f46\u662f\u4e0d\u8981\u88ab\u8fd9\u4e2a\u8bef\u5bfc\u4e86\uff0c\u8fd9\u9898\u5e76\u4e0d\u662f\u5b57\u7b26\u4e32\u7b97\u6cd5\u6a21\u677f\u9898\u54e6\u3002\n\n\u770b\u5230\u662f\u6570\u6570\u9898\uff0c\u8003\u8651\u52a8\u6001\u89c4\u5212\u3002\u9898\u76ee\u95ee\u6211\u4eec\u5b57\u7b26\u4e32\u7684\u5339\u914d\uff0c\u6211\u4eec\u53ef\u4ee5\u8bd5\u7740\u6c42\u4e00\u4e0b**\u4ece\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\u4e0a\u5f00\u59cb\uff0c\u518d\u627e\u591a\u5c11\u4e2a\u5b57\u7b26\u624d\u80fd\u62fc\u51d1\u51fa\u4e00\u4e2a\u6a21\u5f0f\u4e32\uff0c\u4e0d\u9700\u8981\u8fde\u7eed**\u3002\u53ef\u4ee5\u9009\u62e9\u66b4\u529b $|S|^2$ \u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u5904\u7406\u4e00\u4e0b\u3002\u4ee3\u7801\u5982\u4e0b\u3002\n```cpp\nfor (int i = 0; i < lenS; i++) {\n  int index = i;\n  bool fail = false;\n  for (int j = 0; j < lenT; j++, index++) {\n    while (index < lenS && strS[index] != strT[j]) {\n      index++;\n    }\n    if (index == lenS) {\n      fail = true;\n      break;\n    }\n  }\n  if (!fail) {\n    minlen[i] = index - i;\n  } else {\n    minlen[i] = -1;\n  }\n}\n```\n---\n\u63a5\u4e0b\u6765\u53ef\u4ee5\u5f00\u59cb\u8003\u8651\u52a8\u6001\u89c4\u5212\u4e86\u3002\u9996\u5148\u9898\u76ee\u8981\u6c42\u5b57\u7b26\u4e32\u5339\u914d\u6700\u5927\u503c\uff0c\u5927\u53ef\u4ee5\u76f4\u63a5\u628a\u52a8\u6001\u89c4\u5212\u6570\u7ec4\u521d\u59cb\u503c\u5f52\u96f6\u3002\n\n\u7136\u540e\u5f00\u59cb\u8bbe\u8ba1\u72b6\u6001\u3002\u8fd9\u91cc\u6211\u7ed9\u51fa\u7684\u72b6\u6001\u662f $dp_{i, j}$ \u8868\u793a\u5728\u6e90\u5b57\u7b26\u4e32 $i - 1$ \u4f4d\u524d\uff0c\u5220\u9664 $j$ \u4e2a\u5b57\u7b26\u7684\u60c5\u51b5\u4e0b\u6700\u591a\u53ef\u4ee5\u5339\u914d\u5230\u591a\u5c11\u4e2a\u6a21\u5f0f\u4e32\u3002\n\n\u7136\u540e\u6211\u4eec\u60f3\u4e00\u4e0b\u52a8\u6001\u89c4\u5212\u7684\u5f0f\u5b50\u3002\u9996\u5148\u6709\u4e24\u4e2a\u6bcb\u5eb8\u7f6e\u7591\u7684\u5f0f\u5b50\u3002\n$$dp_{i + 1, j} = \\max (dp_{i + 1, j}, dp_{i, j})$$\n$$dp_{i + 1, j + 1} = \\max (dp_{i + 1, j + 1}, dp_{i, j})$$\n\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u6211\u4eec\u4e5f\u77e5\u9053 $dp_{i, j} \\lt dp_{i + 1, j}$ \u662f\u6052\u6210\u7acb\u7684\u3002\u56e0\u4e3a\u591a\u52a0\u4e00\u4f4d\u53c2\u8003\u8ddd\u79bb\u53c8\u4e0d\u4f1a\u628a\u4f60\u5df2\u7ecf\u914d\u5bf9\u597d\u7684\u53c8\u62c6\u5f00\u3002\n\n\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u628a $i + 1$ \u4f4d\u5220\u9664\uff0c\u53cd\u6b63\u8d77\u7801\u8fd9\u4e2a\u65b9\u6848\u662f\u53ef\u884c\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\uff1a\u6211\u4eec\u5728\u7b2c $i$ \u4f4d\u60f3\u8981\u518d\u52a0\u5165\u4e00\u4e2a\u6a21\u5f0f\u4e32\u8fdb\u6765\uff0c\u80af\u5b9a\u8981\u6269\u5927 $minlen_i$ \u7684\u8303\u56f4\u5e76\u4e14\u51cf\u6389\u4e2d\u95f4\u7684\u5176\u4ed6\u4e1c\u897f\u3002\u4e0d\u96be\u77e5\u9053\u51cf\u6389\u7684\u6570\u91cf\u80af\u5b9a\u662f $minlen_i - |T|$ \u4e2a\u5b57\u7b26\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e86\u4e0b\u9762\u7684\u5f0f\u5b50\u3002\n$$dp_{i + minlen[i], j + minlen[i] - lenT} = \\max (dp_{i + minlen[i], j + minlen[i] - lenT}, dp_{i, j} + 1)$$\n\u8fd9\u6837\u6211\u4eec\u7684\u4ee3\u7801\u5c31\u51fa\u6765\u4e86\u3002\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\nusing ll = long long;\nconst int kMaxS = 2e3 + 5, kMaxT = 555;\n\nchar strS[kMaxS], strT[kMaxT];\nint minlen[kMaxS], dp[kMaxS][kMaxS];\nint main () {\n  ios :: sync_with_stdio (false);\n  cin.tie (0), cout.tie (0);\n\n  cin >> strS >> strT;\n  int lenS = strlen (strS), lenT = strlen (strT);\n  for (int i = 0; i < lenS; i++) {\n    int index = i;\n    bool fail = false;\n    for (int j = 0; j < lenT; j++, index++) {\n      while (index < lenS && strS[index] != strT[j]) {\n        index++;\n      }\n      if (index == lenS) {\n        fail = true;\n        break;\n      }\n    }\n    if (!fail) {\n      minlen[i] = index - i;\n    } else {\n      minlen[i] = -1;\n    }\n  }\n\n  memset (dp, 0, sizeof (dp));\n  for (int i = 0; i < lenS; i++) {\n    for (int j = 0; j <= i; j++) {\n      dp[i + 1][j] = max (dp[i + 1][j], dp[i][j]);\n      dp[i + 1][j + 1] = max (dp[i + 1][j + 1], dp[i][j]);\n      if (minlen[i] != -1) {\n        dp[i + minlen[i]][j + minlen[i] - lenT] = max (dp[i + minlen[i]][j + minlen[i] - lenT], dp[i][j] + 1);\n      }\n    }\n  }\n  for (int i = 0; i <= lenS; i++) {\n    cout << dp[lenS][i] << ' ';\n  }\n  cout << '\\n';\n  return 0;\n}\n```",
        "postTime": 1640769263,
        "uid": 355510,
        "name": "Lightwhite",
        "ccfLevel": 4,
        "title": "CF476E"
    }
]