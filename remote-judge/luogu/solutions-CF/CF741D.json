[
    {
        "content": "\u9996\u5148\u4e00\u4e2a\u4e32\u80fd\u91cd\u6392\u5f62\u6210\u662f\u56de\u6587\u4e32\u5f53\u4e14\u4ec5\u5f53\u5176\u5b57\u7b26\u6570\u91cf\u5747\u4e3a\u5076\u6570\u6216\u8005\u6070\u597d\u6709\u4e00\u4e2a\u5947\u6570\n\n\u5b9e\u9645\u4e0a\u5bf9\u4e8e\u4efb\u610f\u7684\u4e00\u6761\u8def\u5f84\u6211\u4eec\u53ea\u5173\u6ce8\u5176\u4efb\u610f\u5b57\u7b26\u7684\u5947\u5076\u6027\n\n\u56e0\u4e3a\u5b57\u7b26\u53ea\u6709$22$\u79cd\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c06\u5176\u538b\u7f29\u79f0\u4e3a\u4e00\u4e2a\u72b6\u6001$0$\u8868\u793a\u6b64\u5b57\u7b26\u4e3a\u5076\u6570\u800c$1$\u8868\u793a\u4e3a\u5947\n\n\u4e8e\u662f\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u8def\u5f84$(u,v)$\u6211\u4eec\u8003\u8651\u5176\u72b6\u6001\u5c31\u53ef\u4ee5\u901a\u8fc7\u5dee\u5206\u6765\u5f97\u5230\uff1a\n\n\u4e0d\u59a8\u8bb0$dis_x$\u8868\u793a$x$\u5230$1$\u7684\u8def\u5f84\u4e0a\u7684\u5b57\u7b26\u6240\u5f62\u6210\u7684\u72b6\u6001\n\n\u4e8e\u662f\u6709\uff1a$dis_u \\oplus dis_v\\oplus dis_{lca} \\oplus dis_{lca}$\u5c31\u662f\u8fd9\u6761\u8def\u5f84\u7684\u72b6\u6001\n\n\u6ce8\u610f\u5230\u5f02\u6216\u7684\u6027\u8d28\uff0c\u6240\u4ee5$dis_u\\oplus dis_v$\u5373\u8fd9\u4e2a\u72b6\u6001\n\n\u4e8e\u662f\u6709\u4e00\u6761\u8def\u5f84\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53$dis_u\\oplus dis_v$\u4e3a\u5982\u4e0b$23$\u79cd\u72b6\u6001\uff1a\n\n$$000...00$$\n\n$$100...00$$\n\n$$......$$\n\n$$000...10$$\n\n$$000...01$$\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u66b4\u529b\u6c42\u89e3\n\n$1.$\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u70b9\u5bf9\u5e76\u4ee5$O(23)$\u7684\u590d\u6742\u5ea6\u68c0\u67e5\n\n$2.$\u6211\u4eec\u7c7b\u4f3c\u4e8e\u70b9\u5206\u6cbb\uff0c\u5bf9$2^{22}$\u79cd\u4e0d\u540c\u7684\u72b6\u6001\u5f00\u4e2a\u6876\n\n\u6ce8\u610f\u5230\u4e00\u4e2a\u70b9\u5bf9$u,v$\u5bf9\u7b54\u6848\u9020\u6210\u7684\u8d21\u732e\u4e3a$dep_u+dep_v-2*dep_{lca}$\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4ece\u4e00\u4e2a\u70b9$x$\u5f00\u59cb\u641c\u7d22\n\n\u904d\u5386\u5176\u6240\u6709\u5b50\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001$dis_u$\u4e0e\u5176$\\oplus$\u5f97\u5230\u7ed3\u679c\u5408\u6cd5\u7684\u72b6\u6001\u662f\u56fa\u5b9a\u7684$23$\u79cd\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u68c0\u67e5\u6876\u5185\u6709\u6ca1\u6709\u5408\u6cd5\u7684\u5373\u53ef\n\n\u7136\u540e\u5bf9\u6bcf\u4e2a\u6876\u90fd\u53ea\u8981\u7ef4\u62a4\u6700\u5927\u7684$dep$\u5373\u53ef\n\n\u590d\u6742\u5ea6$O(23*n^2)$\n\n$3.$\u521a\u521a\u7684\u66b4\u529b$2$\u6211\u4eec\u91c7\u7528$dsu$\u5b9e\u73b0\u5c31\u662f$O(23*n\\log n)$\u4e86$qwq$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define Next( i, x ) for( register int i = head[x]; i; i = e[i].next )\n#define rep( i, s, t ) for( register int i = s; i <= t; ++ i )\n#define re register\nint read() {\n\tchar cc = getchar(); int cn = 0, flus = 1;\n\twhile(cc < '0' || cc > '9') {  if( cc == '-' ) flus = -flus;  cc = getchar();  }\n\twhile(cc >= '0' && cc <= '9')  cn = cn * 10 + cc - '0', cc = getchar();\n\treturn cn * flus;\n}\nconst int N = 2000000 + 5 ; \nint n, cnt, idnex, L[N], R[N], head[N], dep[N], sz[N], son[N] ;\nint book[N * 10], vis[N], Ans[N], dis[N], Id[N] ; \nstruct E {\n\tint to, next, w ; \n} e[N] ;\nvoid add( int x, int y, int w ) {\n\te[++ cnt] = (E){ y, head[x], w }, head[x] = cnt ; \n}\nvoid dfs( int x, int fa ) {\n\tsz[x] = 1, L[x] = ++ idnex, dep[x] = dep[fa] + 1, Id[idnex] = x ; \n\tNext( i, x ) {\n\t\tint v = e[i].to ; dis[v] = dis[x] ^ e[i].w, dfs( v, x ), sz[x] += sz[v] ;\n\t\tif( sz[son[x]] < sz[v] ) son[x] = v ; \n\t} R[x] = idnex ; \n}\nvoid dfs2( int x, int keep ) {\n\tNext( i, x ) {\n\t\tint v = e[i].to ; if( v == son[x] ) continue ; \n\t\tdfs2( v, 0 ), Ans[x] = max( Ans[x], Ans[v] ) ; \n\t}\n\tif( son[x] ) dfs2( son[x], 1 ), Ans[x] = max( Ans[x], Ans[son[x]] ) ; \n\tif( book[dis[x]] ) Ans[x] = max( Ans[x], book[dis[x]] - dep[x] ) ; \n\trep( i, 0, 21 ) if( book[dis[x] ^ ( 1 << i )] ) Ans[x] = max( Ans[x], book[dis[x] ^ ( 1 << i )] - dep[x] ) ; \n\tbook[dis[x]] = max( dep[x] , book[dis[x]] ) ;\n\tNext( i, x ) {\n\t\tint v = e[i].to ; if( v == son[x] ) continue ; \n\t\trep( j, L[v], R[v] ) {\n\t\t\tint u = Id[j] ; \n\t\t\tif( book[dis[u]] ) Ans[x] = max( Ans[x], book[dis[u]] + dep[u] - 2 * dep[x] ) ; \n\t\t\trep( k, 0, 21 ) if( book[dis[u] ^ ( 1 << k )] ) Ans[x] = max( Ans[x], book[dis[u] ^ ( 1 << k )] + dep[u] - 2 * dep[x] ) ; \n\t\t}\n\t\trep( j, L[v], R[v] ) book[dis[Id[j]]] = max( book[dis[Id[j]]], dep[Id[j]] ) ; \n\t}\n\tif( !keep ) rep( i, L[x], R[x] ) book[dis[Id[i]]] = 0 ; \n}\nsigned main()\n{\n\tn = read() ; int x; char ch ; \n\trep( i, 2, n ) {\n\t\tscanf(\"%d\", &x), cin >> ch, add( x, i, 1ll << ( ch - 'a' ) ) ; \n\t}\n\tdfs( 1, 1 ), dfs2( 1, 1 ) ;\n\trep( i, 1, n ) printf(\"%d \", Ans[i] ) ;\n\treturn 0;\n}\n```",
        "postTime": 1567740121,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF741D \u3010Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths\u3011"
    },
    {
        "content": "# \u9898\u76ee\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF741D)\n\n# \u9898\u89e3\n\n\u7531\u6811\u542f\u53d1\u7b97\u6cd5\u53d1\u660e\u8005\u51fa\u7684\u9898\u3002\n\n\u6d89\u53ca\u56de\u6587\uff0c\u90a3\u4e48\u6211\u4eec\u6765\u60f3\u4e00\u4e0b\u56de\u6587\u7684\u7279\u6027\uff1a\n\n>\u6700\u591a\u53ea\u6709\u4e00\u79cd\u5b57\u7b26\u51fa\u73b0\u5947\u6570\u6b21\u7684\u4e00\u5806\u5b57\u7b26\u624d\u4f1a\u88ab\u91cd\u65b0\u6392\u5e8f\u6210\u4e3a\u4e00\u4e2a\u56de\u6587\u4e32\u3002\n\n\u6240\u4ee5\uff0c\u8fd9\u9053\u9898\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\uff0c\u5728\u67d0\u4e00\u6761\u94fe\u4e0a\uff0c\u6709\u591a\u5c11\u5b57\u7b26\u51fa\u73b0\u5947\u6570\u6b21\uff0c\u800c\u5076\u6570\u6b21\u7684\u5b57\u7b26\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u3002\n\n\u8fd9\u6709\u70b9\u60f3\u4ec0\u4e48\uff1f\u662f\u4e0d\u662f\u4e8c\u8fdb\u5236\u4e2d\u7684**\u5f02\u6216\u8fd0\u7b97**\uff1f\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u6bcf\u79cd\u5b57\u7b26\u8868\u793a\u4e3a\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u7684\u4e00\u4f4d\uff0c\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e3a $2^{ch-'a'}$\uff0c\u800c\u4e24\u6761\u8def\u7684\u5408\u5e76\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528 $\\oplus$ \u6765\u5408\u5e76\u3002\n\n\u63a5\u4e0b\u6765\u600e\u4e48\u5904\u7406\uff1f\n\n\u9996\u5148\u60f3\u6e05\u695a\u4e00\u4e2a\u4e1c\u897f\uff1a\u5bf9\u4e8e\u4e24\u6761\u8def\u4e4b\u95f4\u7684\u5f02\u6216\u548c\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\n$$\n\\begin{aligned}\n\\text{dis}(u,v)&=\\text{dis}(u,1)\\oplus \\text{dis}(\\text{lca}_{u,v},1)\\oplus \\text{dis}(v,1)\\oplus \\text{dis}(\\text{lca}_{u,v},1) \\\\\n&=\\text{dis}(u,1)\\oplus \\text{dis}(v,1)\n\\end{aligned}\n$$\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u5230 $1$ \u7684\u5f02\u6216\u8def\u5f84\u548c\uff0c\u6211\u4eec\u5c31\u80fd $\\mathcal O(1)$ \u5730\u5904\u7406\u51fa\u4e24\u70b9\u7684\u8def\u5f84\u5f02\u6216\u548c\u3002\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u6570\u7ec4\u8bb0\u4e3a $\\text{Xor}_u$\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53c8\u600e\u4e48\u5904\u7406\uff1f\n\n\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u5904\u7406\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5982\u679c\u4e00\u6761\u94fe\u4ece $u$ \u5f00\u59cb\uff0c\u4e00\u76f4\u8fde\u5230\u4ed6\u7684\u67d0\u4e00\u4e2a\u5b50\u6811\u4e2d\u7684\u70b9\uff0c**\u8d2a\u5fc3\u5730\uff0c\u8fd9\u4e2a\u70b9\u7684\u6df1\u5ea6\u4e00\u5b9a\u662f\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u4e2d\u6700\u6df1\u7684**\u3002\n\n\u4f46\u662f\u8fd9\u53c8\u5f15\u51fa\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u600e\u4e48\u627e\u8fd9\u4e9b\u7b26\u5408\u6761\u4ef6\u7684\u70b9\uff0c\u6216\u8005\u8bf4\u8fd9\u4e9b\u7b26\u5408\u6761\u4ef6\u7684\u70b9\u9700\u8981\u6ee1\u8db3\u4ec0\u4e48\u8981\u6c42\u5462\uff1f\n\n\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6c42\u7684\u8def\u5f84\u7684\u8def\u5f84\u5f02\u6216\u548c\u4e3a $0$ \u6216\u8005 $2^i$\uff0c\u90a3\u4e48\u8fd9\u4e9b\u7b26\u5408\u6761\u4ef6\u7684\u70b9\u4e00\u5b9a\u6ee1\u8db3\u4e0b\u9762\u7b49\u5f0f\n$$\n\\text{Xor}_u\\oplus \\text{Xor}_v=0\n$$\n\u6216\u8005\n$$\n\\text{Xor}_u\\oplus \\text{Xor}_v=2^i\n$$\n\u7531\u5f02\u6216\u548c\u7684\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u89e3\u5f97 $\\text{Xor}_v$ \u7684\u503c\n$$\n\\text{Xor}_v=\\text{Xor}_u\\space \u6216\\space \\text{Xor}_u\\oplus2^i\n$$\n\u7531\u4e8e\u6211\u4eec\u7684\u8d2a\u5fc3\u6027\u8d28\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a $f_i$ \u6570\u7ec4\uff0c\u8868\u793a\u6ee1\u8db3 $\\text{Xor}=i$ \u7684\u70b9\u7684\u6700\u5927\u6df1\u5ea6\u3002\n\n\u8fd9\u4e2a $f_i$ \u600e\u4e48\u7ef4\u62a4\uff1f\n\n\u53ef\u4ee5\u770b\u4e00\u4e0b\u8fd9\u6bb5\uff0c\u5e94\u8be5\u6bd4\u8f83\u597d\u7406\u89e3\n\n```cpp\nvoid count(const int u,const int d,const int delta){\n    if(delta==1)f[Xor[u]]=Max(f[Xor[u]],d);\n    else f[Xor[u]]=0;\n    erep(t,u)count(v,d+1,delta);\n}\n```\n\n\u5269\u4e0b\u7684\u95ee\u9898\uff0c\u6211\u4eec\u8003\u8651\u600e\u4e48\u66f4\u65b0\u4e00\u4e2a\u70b9 $u$ \u7684\u7b54\u6848 $ans_u$\u3002\n\n\u4ed6\u6709\u591a\u79cd\u9014\u5f84\u66f4\u65b0\uff1a\n\n1. \u4ece\u513f\u5b50\u7684\u5b50\u6811\u4e2d\u6765\uff0c\u8fd9\u79cd\u60c5\u51b5 $ans_u=\\min\\{ans_u,ans_v\\mid v\\in son_u\\}$\uff1b\n2. \u8003\u8651\u548c\u5b50\u6811\u4e2d\u7684\u67d0\u4e2a\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u90a3\u4e48 $ans_u=\\min\\{ans_u,f_{\\text{Xor}_u}-d_u,f_{\\text{Xor}_u\\oplus 2^i}-d_u\\}$\uff1b\n3. \u8003\u8651\u8de8\u5b50\u6811\u7ec4\u5408\u6210\u4e00\u6761\u94fe\uff0c\u8fd9\u4e2a\u60c5\u51b5\u6211\u4eec\u5148\u4e0d\u8003\u8651\uff0c\u540e\u9762\u518d\u8bf4\uff1b\n\n\u5728\u5177\u4f53\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u904d\u5386\u6bcf\u4e2a\u5b50\u8282\u70b9\uff08\u975e\u91cd\u513f\u5b50\uff09\u5e76\u5904\u7406\uff0c\u4e4b\u540e\u6e05\u7a7a\u5b50\u8282\u70b9\u5f97\u5230\u7684 $f_i$ \uff08\u5c31\u7528\u521a\u521a\u7684 `count()` \u51fd\u6570\uff09\u3002\n\n\u7136\u540e\u5904\u7406\u91cd\u513f\u5b50\uff0c**\u4e0d\u6e05\u7a7a $f_i$**\uff0c\u7136\u540e\u91cd\u65b0\u904d\u5386\u8f7b\u513f\u5b50\uff0c\u8003\u8651\u5c06\u4e24\u4e2a\u513f\u5b50\u7684 $f_i$ \u8fdb\u884c\u5408\u5e76\uff0c\u5728\u5408\u5e76\u4e4b\u524d\uff0c**\u6211\u4eec\u53ef\u4ee5\u5148\u904d\u5386\u4e00\u904d\u8f7b\u513f\u5b50\u5b50\u6811\u5e76\u5904\u7406\u4e0a\u9762\u7b2c\u4e09\u79cd\u60c5\u51b5**\uff0c\u5373\u8de8\u5b50\u6811\u7ec4\u5408\u7684\u60c5\u51b5\uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a\n\n```cpp\nint dfs3(const int u,const int d,const int rtd){\n    int ret=0;\n    if(f[Xor[u]])ret=Max(ret,f[Xor[u]]+d-(rtd<<1));\n    rep(i,0,21)if(f[Xor[u]^(1<<i)])\n        ret=Max(ret,f[Xor[u]^(1<<i)]+d-(rtd<<1));\n    erep(t,u){\n        ret=Max(ret,dfs3(v,d+1,rtd));\n    }return ret;\n}\n```\n\n\u5176\u4e2d $rtd$ \u8868\u793a $u$ \u7684\u6df1\u5ea6\u3002\n\n\u5728\u8ba1\u7b97\u5b8c\u7b54\u6848\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u5c06\u8f7b\u513f\u5b50\u5b50\u6811\u52a0\u5165\u5230 $f_i$ \u5373\u53ef\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,__l,__r) for(signed i=(__l),i##_end_=(__r);i<=i##_end_;++i)\n#define fep(i,__l,__r) for(signed i=(__l),i##_end_=(__r);i>=i##_end_;--i)\n#define erep(i,u) for(signed i=tail[u],v=e[i].to;i;i=e[i].nxt,v=e[i].to)\n#define writc(a,b) fwrit(a),putchar(b)\n#define mp(a,b) make_pair(a,b)\n#define ft first\n#define sd second\n#define LL long long\n#define ull unsigned long long\n#define uint unsigned int\n#define pii pair< int,int >\n#define Endl putchar('\\n')\n// #define int long long\n// #define int unsigned\n// #define int unsigned long long\n\n#ifdef _GLIBCXX_CSTDIO\n#define cg (c=getchar())\ntemplate<class T>inline void qread(T& x){\n    char c;bool f=0;\n    while(cg<'0'||'9'<c)f|=(c=='-');\n    for(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n    if(f)x=-x;\n}\ntemplate<class T>inline T qread(const T sample){\n    T x=0;char c;bool f=0;\n    while(cg<'0'||'9'<c)f|=(c=='-');\n    for(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n    return f?-x:x;\n}\n#undef cg\ntemplate<class T>void fwrit(const T x){//just short,int and long long\n    if(x<0)return (void)(putchar('-'),fwrit(-x));\n    if(x>9)fwrit(x/10);\n    putchar(x%10^48);\n}\n#endif\n// template<class T,class... Args>inline void qread(T& x,Args&... args){qread(x),qread(args...);}\ntemplate<class T>inline T Max(const T x,const T y){return x>y?x:y;}\ntemplate<class T>inline T Min(const T x,const T y){return x<y?x:y;}\ntemplate<class T>inline T fab(const T x){return x>0?x:-x;}\ninline int gcd(const int a,const int b){return b?gcd(b,a%b):a;}\ninline void getInv(int inv[],const int lim,const int MOD){\n    inv[0]=inv[1]=1;for(int i=2;i<=lim;++i)inv[i]=1ll*inv[MOD%i]*(MOD-MOD/i)%MOD;\n}\ninline LL mulMod(const LL a,const LL b,const LL mod){//long long multiplie_mod\n    return ((a*b-(LL)((long double)a/mod*b+1e-8)*mod)%mod+mod)%mod;\n}\n\nconst int MAXN=5e5;\nconst int MAXSIZE=1<<22;\nstruct edge{int to,nxt,w;}e[MAXN+5];\nint tail[MAXN+5],ecnt;\ninline void add_edge(const int u,const int v,const int w){\n    e[++ecnt]=edge{v,tail[u],w};tail[u]=ecnt;\n}\n\nint n,ans[MAXN+5];\n\ninline void Init(){\n    n=qread(1);\n    char ch[5];int fa;\n    rep(i,2,n){\n        scanf(\"%d %s\",&fa,ch);\n        add_edge(fa,i,1<<(ch[0]-'a'));\n    }\n}\n\nint wson[MAXN+5],sz[MAXN+5],Xor[MAXN+5];\n\nint f[MAXSIZE+5];//\u8bb0\u5f55\u4ece\u6839\u5230\u70b9\u5f02\u6216\u503c\u4e3a i \u7684\u70b9\u7684\u6700\u5927\u6df1\u5ea6\n\nvoid dfs1(const int u){\n    sz[u]=1,wson[u]=0;\n    erep(t,u){\n        Xor[v]=Xor[u]^e[t].w;\n        dfs1(v);\n        sz[u]+=sz[v];\n        if(sz[v]>sz[wson[u]])wson[u]=v;\n    }\n}\n\nvoid count(const int u,const int d,const int delta){\n    if(delta==1)f[Xor[u]]=Max(f[Xor[u]],d);\n    else f[Xor[u]]=0;\n    erep(t,u)count(v,d+1,delta);\n}\n\nint dfs3(const int,const int,const int);\n\nvoid dfs2(const int u,const int d){\n    erep(t,u)if(v^wson[u]){\n        dfs2(v,d+1);\n        ans[u]=Max(ans[u],ans[v]);\n        /*\u540e\u9762\u5728\u628a u \u52a0\u5165\u91cd\u513f\u5b50\u4e2d\u7684\u65f6\u5019, \u4e5f\u4f1a\u8003\u8651\u5230\u5c06\u8fd9\u4e2a\u70b9\u52a0\u5165\u8f7b\u513f\u5b50\u7684\u94fe, \u6240\u4ee5\u6b64\u5904\u6ca1\u6709\u5fc5\u8981\u8003\u8651\n        if(cnt[Xor[u]])ans[u]=Max(ans[u],cnt[Xor[u]]-d);\n        rep(i,0,21)if(cnt[Xor[u]^(1<<i)])\n            ans[u]=Max(ans[u],cnt[Xor[u]^(1<<i)]-d);\n        */\n        count(v,d+1,-1);\n    }\n    if(wson[u])dfs2(wson[u],d+1),ans[u]=Max(ans[u],ans[wson[u]]);\n    if(f[Xor[u]])ans[u]=Max(ans[u],f[Xor[u]]-d);\n    rep(i,0,21)if(f[Xor[u]^(1<<i)])ans[u]=Max(ans[u],f[Xor[u]^(1<<i)]-d);\n    f[Xor[u]]=Max(d,f[Xor[u]]);\n    erep(t,u)if(v^wson[u]){\n        ans[u]=Max(dfs3(v,d+1,d),ans[u]);\n        count(v,d+1,1);\n    }\n}\n\nint dfs3(const int u,const int d,const int rtd){\n    int ret=0;\n    if(f[Xor[u]])ret=Max(ret,f[Xor[u]]+d-(rtd<<1));\n    rep(i,0,21)if(f[Xor[u]^(1<<i)])\n        ret=Max(ret,f[Xor[u]^(1<<i)]+d-(rtd<<1));\n    erep(t,u){\n        ret=Max(ret,dfs3(v,d+1,rtd));\n    }return ret;\n}\n\nsigned main(){\n    // ios::sync_with_stdio(false);\n    Init();\n    dfs1(1);\n    dfs2(1,0);\n    rep(i,1,n)printf(\"%d \",ans[i]);\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1591322403,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF741D \u3010Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths\u3011"
    },
    {
        "content": "$$\\text{CF741D Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths}$$\n\n$\\quad$\u9898\u76ee\u94fe\u63a5\uff1a[CF741D Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths](https://www.luogu.com.cn/problem/CF741D)(\u6d1b\u8c37\u7684\u94fe\u63a5)\n\n$\\quad$\u8fd9\u5176\u5b9e\u7b97\u4e00\u9053 Dsu \u7684\u538b\u8f74\u9898\uff0c\u636e\u8bf4\u662f\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7b97\u6cd5\u7684\u521b\u59cb\u8005\u51fa\u7684\u9898\u3002\n\n$\\quad$\u8fd9\u9898\u786e\u5b9e\u662f\u6709\u4e9b\u96be\u5ea6\u7684\uff0c\u603b\u4e4b\u6211\u4e00\u5f00\u59cb\u8fde\u9898\u89e3\u90fd\u6ca1\u6709\u770b\u61c2\u3002\n\n$\\quad$\u9996\u5148\u8003\u8651\u56de\u6587\u7684\u95ee\u9898\uff0c\u5176\u4ed6\u9898\u89e3\u5176\u5b9e\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u53ea\u898122\u4e2a\u5b57\u6bcd\u4e2d\u6700\u591a\u6709\u4e00\u4e2a\u5b57\u6bcd\u6570\u91cf\u4e3a\u5947\u6570\u5373\u53ef\uff0c\u4e5f\u53ef\u90fd\u4e3a\u5076\u6570\uff0c\u6240\u4ee5\u4e00\u517123\u79cd\u60c5\u51b5\uff0c\u4f46\u8003\u8651\u6240\u6709\u60c5\u51b5(\u53ea\u5206\u5947\u5076)\u6709 $2^{22}$\u4e2d\u60c5\u51b5\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u8868\u793a\uff0c**\u7528 $cnt_i$ \u8868\u793a\u4e8c\u8fdb\u5236\u6570\u4e3a $i$ \u7684\u7ed3\u70b9\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u4e8c\u8fdb\u5236\u6570\u6307\u7684\u662f\u4ece\u8fd9\u4e2a\u7ed3\u70b9\u5230\u6839\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u5e8f\u5217\uff0c$num_x$ \u8868\u793a\u7ed3\u70b9 $x$ \u5230\u6839\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u5e8f\u5217**\uff0c\u8bf7\u4ed4\u7ec6\u7406\u89e3\u8fd9\u53e5\u8bdd\uff0c\u5426\u5219\u4e4b\u540e\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u770b\u4e0d\u61c2\u3002\n\n$\\quad$\u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u4e24\u4e2a\u4fee\u6539\u51fd\u6570\u90fd\u8bb2\u4e00\u904d\u3002\n\n$\\quad$\u7b2c\u4e00\u4e2a\u4fee\u6539\u51fd\u6570\uff0c\u5c31\u662f\u5224\u65ad\u662f\u5426\u6709\u6709\u7b26\u5408\u6761\u4ef6\u7684\uff0c\u5982\u5bf9\u4e8e\u8282\u70b9 $x$ \u6765\u8bf4\uff0c\u548cTA\u5230\u6839\u8282\u70b9\u7684\u5e8f\u5217\u4e3a $num_x$\uff0c$cnt_{num_x}$ \u8868\u793a\u4e4b\u524d\u51fa\u73b0\u7684\u53e6\u4e00\u6761\u5927\u5c0f\u4e3a $num_x$ \u5e8f\u5217\uff0c\u8fd9\u6837\u8fd9\u4e24\u6761\u8def\u5f84\u5408\u5e76\u540e\u5b57\u6bcd\u6570\u5c31\u90fd\u662f\u5076\u6570\uff0c\u4e4b\u540e\u7684\u5faa\u73af\u679a\u4e3e\u7684\u662f\u6709\u4e00\u4e2a\u5b57\u6bcd\u4e0d\u540c\u7684\u60c5\u51b5\uff0c\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u662f\u7b26\u5408\u6761\u4ef6\u7684\u3002\n\n```cpp\nil void add1(int x)\n{\n  ans[now]=max(ans[now],dep[x]+cnt[num[x]]);\n  for(re i=0;i<=21;i++)ans[now]=max(ans[now],dep[x]+cnt[(1<<i)^num[x]]);\n}\n```\n$\\quad$\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u4fee\u6539\u51fd\u6570\uff0c\u5c31\u662f\u628a\u8fd9\u4e2a\u7ed3\u70b9 $x$ \u7684\u4fe1\u606f\u8f7d\u5165 $cnt$ \u6570\u7ec4\uff0c\u5e76\u4e14\u4e3a\u4e86\u6700\u540e\u7684\u5e8f\u5217\u6700\u957f\uff0c\u8981\u5c3d\u53ef\u80fd\u9009\u6df1\u5ea6\u5927\u7684\uff0c\u663e\u7136\u6df1\u5ea6\u5927\u7684\u7b54\u6848\u66f4\u4f18\u3002\n\n```cpp\nil void add2(int x)\n{cnt[num[x]]=max(cnt[num[x]],dep[x]);}\n```\n$\\quad$\u6ce8\u610f\u8981\u5148\u505a\u4fee\u6539\u64cd\u4f5c $1$\uff0c\u518d\u505a\u4fee\u6539\u64cd\u4f5c $2$\uff0c\u4e5f\u5c31\u662f\u8bf4\u5148\u7edf\u8ba1\u8fd9\u4e2a\u70b9\u7684\u7b54\u6848(\u6216\u4e00\u68f5\u5b50\u6811)\uff0c\u518d\u8f7d\u5165\u8fd9\u4e2a\u70b9\u7684\u6570\u636e(\u6216\u4e00\u68f5\u5b50\u6811)\uff0c\u5426\u5219\u7b54\u6848\u4f1a\u628a\u81ea\u5df1\u4e5f\u8bb0\u8fdb\u53bb\uff0c\u53ef\u4ee5\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u3002\n\n$\\quad$\u63a5\u4e0b\u6765\u6211\u4eec\u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4e00\u68f5\u5b50\u6811\u4e00\u68f5\u5b50\u6811\u4e3a\u5355\u4f4d\u4fee\u6539\u7684\uff0c\u5982\u679c\u8fd9\u4e2a\u6700\u4f18\u7b54\u6848\u5728\u5b50\u6811\u4e2d\u4f1a\u600e\u4e48\u6837\uff1f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u7684\u7b54\u6848\u5728\u5b50\u6811\u4e2d\u4e00\u5b9a\u88ab\u7edf\u8ba1\u8fc7\u4e86\uff0c\u5f53\u8fd9\u6761\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u7684LCA\u88ab\u8be2\u95ee\u65f6\u5c31\u4ee5\u53ca\u88ab\u8bb0\u5f55\u4e86\uff0c\u6240\u4ee5\u8fd8\u8981\u8dd1\u4e00\u904d\u6240\u6709\u5b50\u6811\uff0c\u7528\u5b50\u6811\u7684\u7b54\u6848\u6765\u66f4\u65b0\u5f53\u524d\u7ed3\u70b9\u3002\n\n$\\quad$\u53e6\u5916\u6211\u4eec\u8fd8\u8981\u6ce8\u610f\u8282\u70b9 $i$ \u7684\u7b54\u6848\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\n\n$$ans_i=\\max (dep_x+dep_y-2\\times dep_i)$$\n\n$\\quad$\u8fd9\u5176\u5b9e\u5c31\u662f $x$\uff0c$y$ \u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u516c\u5f0f( $x$,$y$ \u4e3a\u6700\u77ed\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9)\uff0c\u53e6\u5916\u53ef\u4ee5\u53d1\u73b0\u6700\u4f18\u60c5\u51b5\u4e0b\u7ed3\u70b9 $i$ \u4e3a\u7ed3\u70b9 $x$ \u548c\u7ed3\u70b9 $y$ \u7684LCA\uff0c\u56e0\u4e3a\u7ed3\u70b9 $x$ \u548c\u7ed3\u70b9 $y$ \u7684\u5728\u4ee5 $i$ \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\uff0c\u82e5\u4e0d\u662f\u7684\u8bdd\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u4f1a\u7b97\u591a\uff0c\u4f46\u8fd9\u663e\u7136\u662f\u9519\u8bef\u7684\u7b54\u6848\uff0c\u6240\u4ee5\u6211\u4eec\u662f\u4e00\u68f5\u5b50\u6811\u4e00\u68f5\u5b50\u6811\u4e3a\u5355\u4f4d\u4fee\u6539\u7684\uff0c\u8fd9\u4e5f\u7b97\u56de\u7b54\u4e86\u4e0a\u9762\u7684\u95ee\u9898\u3002\n\n$\\quad$\u6700\u540e\u6765\u770b\u770b\u5b8c\u6574\u4ee3\u7801\u5427\uff01\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<map>\n#include<vector>\nusing namespace std;\n#define re register int\n#define il inline\n#define next nee\n#define inf 1e9+5\nil int read()\n{\n  int x=0,f=1;char ch=getchar();\n  while(!isdigit(ch)&&ch!='-')ch=getchar();\n  if(ch=='-')f=-1,ch=getchar();\n  while(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n  return x*f;\n}\nil void print(int x)\n{\n  if(x<0)putchar('-'),x=-x;\n  if(x/10)print(x/10);\n  putchar(x%10+'0');\n}\nconst int N=5e5+5;\nint n,m,next[N],go[N],head[N],tot,seg[N],son[N],father[N],now;\nint size[N],rev[N],ans[N],s[N],dep[N],num[N],cnt[1<<23];\nil int Max(int x,int y){return x>y?x:y;}\nil void Add(int x,int y,int z)\n{\n  next[++tot]=head[x];\n  head[x]=tot;go[tot]=y;s[tot]=z;\n}\nil void add1(int x)//\u4fee\u6539\u64cd\u4f5c1\n{\n  ans[now]=max(ans[now],dep[x]+cnt[num[x]]);\n  for(re i=0;i<=21;i++)ans[now]=max(ans[now],dep[x]+cnt[(1<<i)^num[x]]);\n}\nil void add2(int x)//\u4fee\u6539\u64cd\u4f5c2\n{cnt[num[x]]=max(cnt[num[x]],dep[x]);}\nil void clear(int x)//\u6e05\u7a7a\u64cd\u4f5c\n{\n  for(re i=seg[x];i<=seg[x]+size[x]-1;i++)\n    cnt[num[rev[i]]]=-inf;\n}\nil void dfs1(int x)\n{\n  dep[x]=dep[father[x]]+1;size[x]=1;seg[x]=++seg[0];rev[seg[x]]=x;\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      num[y]=num[x]^(1<<s[i]);dfs1(y);\n      size[x]+=size[y];\n      if(size[y]>size[son[x]])son[x]=y;\n    }\n}\nil void dfs2(int x,int flag)\n{\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==son[x])continue;\n      dfs2(y,0);\n    }if(son[x])dfs2(son[x],1);now=x;\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==son[x])continue;\n      for(re i=seg[y];i<=seg[y]+size[y]-1;i++)add1(rev[i]);\n      for(re i=seg[y];i<=seg[y]+size[y]-1;i++)add2(rev[i]);\n    }add1(x),add2(x);//\u8bb0\u5f97\u8981\u4fee\u6539x\u7ed3\u70b9\n  ans[x]-=(dep[x]<<1);//\u51cf\u53bb\u672c\u8eab\u7684\u6df1\u5ea6\n  for(re i=head[x],y;i,y=go[i];i=next[i])ans[x]=max(ans[x],ans[y]);\n  if(!flag)clear(x);\n}\nsigned main()\n{\n  n=read();char ch;\n  for(re i=0;i<(1<<22);i++)cnt[i]=-inf;//\u4e00\u5b9a\u8981\u521d\u59cb\u5316\u4e3a\u8d1f\u503c\n  for(re i=2,x;i<=n;i++){x=read();father[i]=x;scanf(\"%c\",&ch);Add(x,i,ch-'a');}\n  dfs1(1);dfs2(1,1);\n  for(re i=1;i<=n;i++)print(Max(ans[i],0)),putchar(' ');//\u53ef\u80fd\u4f1a\u8f93\u51fa\u8d1f\u6570\n  return 0;\n}\n```",
        "postTime": 1605792931,
        "uid": 109220,
        "name": "Farkas_W",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF741D \u3010Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths\u3011"
    },
    {
        "content": "\u63a8\u8350\u4e00\u4e0b\u81ea\u5df1\u7684[\u535a\u5ba2](https://www.cnblogs.com/ET2006/)\uff0c\u559c\u6b22\u5c31\u968f\u624b\u70b9\u4e2a\u5173\u6ce8\u54e6\u3002\n\n\u96be\u5ea6 *2900 \u7684 hot tea\uff0c\u5e76\u4e14\u7adf\u7136\u81ea\u5df1\u60f3\u51fa\u6765\u4e86\uff0c~~\u66f4\u65b0\u4e86\u81ea\u5df1\u72ec\u7acb\u60f3\u51fa\u6765\u7684\u9898\u76ee\u7684\u96be\u5ea6\u4e0a\u754c~~\uff08bushi\uff09\u3002\n\n\u6211\u4eec\u9884\u5904\u7406\u51fa $msk_x$\uff0c\u5176\u4e2d $msk_x$ \u662f\u4e00\u4e2a 22 \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u7b2c $i$ \u4f4d\u662f $1$ \u8868\u793a\u5b57\u6bcd\u8868\u4e2d\u7b2c $i$ \u4e2a\u5b57\u7b26\u5728 $x$ \u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u5426\u5219\u8868\u793a\u51fa\u73b0\u4e86\u5076\u6570\u6b21\u3002\n\n\u663e\u7136 $x$ \u5230 $y$ \u7684\u8def\u5f84\u4e0a\u7684\u5b57\u7b26\u53ef\u4ee5\u91cd\u6392\u4e3a\u4e00\u4e2a\u56de\u6587\u4e32\u5f53\u4e14\u4ec5\u5f53 $msk_x\\oplus msk_y$ \u5728\u4e8c\u8fdb\u5236\u4e0b\u4e2d\u81f3\u591a\u6709 $1$ \u4f4d\u4e3a $1$\uff0c\u5373 $msk_x\\oplus msk_y=0,1,2^1,2^2,\\dots,2^{21}$\n\n\u8003\u8651\u4f7f\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5047\u8bbe\u6211\u4eec dfs \u5230\u70b9 $u$\u3002\u663e\u7136 $u$ \u5b50\u6811\u5185\u7684\u8def\u5f84\u7531 LCA \u4e3a\u70b9 $u$ \u7684\u8def\u5f84\u4e0e LCA \u4e0d\u4e3a $u$ \u7684\u8def\u5f84\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u540e\u8005\u7684\u6700\u5927\u503c\u4e3a $\\max\\limits_{v\\in son_u}ans_v$\uff0c\u5173\u952e\u662f\u5982\u4f55\u8ba1\u7b97\u524d\u8005\u7684\u7b54\u6848\uff0c\u5373\u5bf9\u4e8e\u6ee1\u8db3 $msk_x\\oplus msk_y=0,1,2^1,2^2,\\dots,2^{21}$ \u4e14 $x,y$ \u5728 $u$ \u7684\u4e0d\u540c\u5b50\u6811\u4e2d\u7684 $x,y$\uff0c$dep_x+dep_y-2\\times dep_u$ \u7684\u6700\u5927\u503c\u3002\u7531\u4e8e $2\\times dep_u$ \u4e3a\u5b9a\u503c\uff0c\u6545\u53ea\u9700\u6c42\u51fa $dep_x+dep_y$ \u7684\u6700\u5927\u503c\u3002\n\n\u8003\u8651\u7528\u7c7b\u4f3c\u4e8e\u70b9\u5206\u6cbb\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u5b9e\u65f6\u7ef4\u62a4\u4e00\u4e2a $mx_x$ \u8868\u793a $msk_u=x$ \u7684 $u$ \u4e2d $dep_u$ \u7684\u6700\u5927\u503c\u3002\u4f9d\u6b21 dfs $u$ \u7684\u6bcf\u4e2a\u5b50\u6811\uff0c\u5148\u8003\u8651\u8fd9\u4e2a\u5b50\u6811\u4e2d\u6bcf\u4e2a\u70b9\u7684\u8d21\u732e\uff0c\u7136\u540e\u66f4\u65b0 $mx$ \u6570\u7ec4\u3002\u8ba1\u7b97\u8d21\u732e\u7684\u5177\u4f53\u65b9\u5f0f\u662f\uff0c\u8003\u8651\u8be5\u5b50\u6811\u4e2d\u6bcf\u4e00\u4e2a\u8282\u70b9 $x$\uff0c\u679a\u4e3e $msk_x\\oplus msk_y$ \u7684\u503c $v$\uff08\u663e\u7136\u53ea\u6709 23 \u79cd\u53ef\u80fd\uff09\uff0c\u5982\u679c $mx_{msk_x\\oplus v}\\neq 0$\uff0c\u5c31\u7528 $mx_{msk_x\\oplus v}+dep_x-2\\times dep_u$ \u66f4\u65b0 $ans_u$\u3002\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6211\u4eec\u7b97\u51fa\u7684 $x,y$ \u662f\u5c5e\u4e8e $u$ \u7684\u4e0d\u540c\u5b50\u6811\u4e86\u3002\n\n\u8fd8\u6709\u4e00\u70b9\uff0c\u6709\u4eba\u53ef\u80fd\u4f1a\u95ee\uff1a\u8fd9\u4e2a $mx_x$ \u4e0d\u662f\u6c42\u67d0\u4e2a\u4e1c\u897f\u7684\u6700\u5927\u503c\uff0c\u4e0d\u6ee1\u8db3\u53ef\u64a4\u9500\u6027\u5417\u3002\u6ce8\u610f\uff0c\u5728\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u4e2d\uff0c\u6211\u4eec\u7684\u5220\u9664\u64cd\u4f5c\u662f**\u5168\u5c40\u5220\u9664**\uff0c\u9700\u6d88\u9664\u5b50\u6811\u5185\u6240\u6709\u70b9\u7684\u8d21\u732e\uff0c\u6240\u4ee5\u76f4\u63a5\u628a\u5bf9\u5e94\u7684 $msk$ \u503c\u8d4b\u4e3a $0$ \u5c31\u884c\u4e86\uff0c\u4e0d\u9700\u8981\u753b\u86c7\u6dfb\u8db3\u5730\u7ef4\u62a4\u4e2a ```std::multiset<int>``` \u4e4b\u7c7b\u7684\u3002\n\n\u7b97\u4e0b\u590d\u6742\u5ea6\uff0cdsu on tree \u590d\u6742\u5ea6 1log\uff0c\u679a\u4e3e $msk_x\\oplus msk_y$ \u8fd8\u6709\u4e2a 23 \u7684\u5e38\u6570\u3002\u603b\u590d\u6742\u5ea6 $23n\\log n$\u3002\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\u3002\u6211\u4e00\u5f00\u59cb\u8fd8\u62c5\u5fc3\u80fd\u4e0d\u80fd\u8dd1\u8fc7\u53bb\uff0c\u4e0d\u8fc7 CF \u673a\u5b50\u53ef\u8c13\u662f\u795e\u4e00\u822c\u5f97\u5feb\uff0c\u518d\u52a0\u4e0a 3s \u65f6\u9650\uff0c\u8dd1\u8fc7\u53bb\u6ca1\u6709\u5927\u95ee\u9898\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define fz(i,a,b) for(int i=a;i<=b;i++)\n#define fd(i,a,b) for(int i=a;i>=b;i--)\n#define ffe(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define fill0(a) memset(a,0,sizeof(a))\n#define fill1(a) memset(a,-1,sizeof(a))\n#define fillbig(a) memset(a,63,sizeof(a))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\ntemplate<typename T1,typename T2> void chkmin(T1 &x,T2 y){if(x>y) x=y;}\ntemplate<typename T1,typename T2> void chkmax(T1 &x,T2 y){if(x<y) x=y;}\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntemplate<typename T> void read(T &x){\n\tx=0;char c=getchar();T neg=1;\n\twhile(!isdigit(c)){if(c=='-') neg=-1;c=getchar();}\n\twhile(isdigit(c)) x=x*10+c-'0',c=getchar();\n\tx*=neg;\n}\nconst int MAXN=5e5;\nconst int MAXV=1<<22;\nint n,hd[MAXN+5],to[MAXN+5],id[MAXN+5],nxt[MAXN+5],ec=0;\nvoid adde(int u,int v,int w){to[++ec]=v;id[ec]=w;nxt[ec]=hd[u];hd[u]=ec;}\nint msk[MAXN+5],dep[MAXN+5],siz[MAXN+5],wson[MAXN+5];\nint mx[MAXV+5],ans[MAXN+5];\nvoid dfs0(int x,int f){\n\tsiz[x]=1;\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e],z=id[e];if(y==f) continue;\n\t\tdep[y]=dep[x]+1;msk[y]=msk[x]^(1<<z);dfs0(y,x);siz[x]+=siz[y];\n\t\tif(siz[y]>siz[wson[x]]) wson[x]=y;\n\t}\n}\nint pth[MAXN+5],pth_num=0;\nvoid getpth(int x,int f){\n\tpth[++pth_num]=x;\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e];if(y==f) continue;getpth(y,x);\n\t}\n}\nvoid add(int x,int f){\n\tchkmax(mx[msk[x]],dep[x]);\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e];if(y==f) continue;add(y,x);\n\t}\n}\nvoid del(int x,int f){//\u5168\u5c40\u5220\u9664\n\tmx[msk[x]]=0;\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e];if(y==f) continue;del(y,x);\n\t}\n}\nvoid dfs(int x,int f){\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e];if(y==f||y==wson[x]) continue;\n\t\tdfs(y,x);chkmax(ans[x],ans[y]);del(y,x);\n\t} if(wson[x]) dfs(wson[x],x),chkmax(ans[x],ans[wson[x]]);\n\tfor(int i=0;i<22;i++) if(mx[msk[x]^(1<<i)])\n\t\tchkmax(ans[x],mx[msk[x]^(1<<i)]-dep[x]);\n\tif(mx[msk[x]]) chkmax(ans[x],mx[msk[x]]-dep[x]);\n\tchkmax(mx[msk[x]],dep[x]);\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e];if(y==f||y==wson[x]) continue;\n\t\tpth_num=0;getpth(y,x);\n\t\tfor(int i=1;i<=pth_num;i++){\n\t\t\tfor(int j=0;j<22;j++) if(mx[msk[pth[i]]^(1<<j)])\n\t\t\t\tchkmax(ans[x],mx[msk[pth[i]]^(1<<j)]+dep[pth[i]]-dep[x]*2);\n\t\t\tif(mx[msk[pth[i]]]) chkmax(ans[x],mx[msk[pth[i]]]+dep[pth[i]]-dep[x]*2);\n\t\t} add(y,x);\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=2;i<=n;i++){\n\t\tchar c;int f;cin>>f>>c;\n\t\tadde(f,i,c-'a');\n\t} dfs0(1,0);dfs(1,0);\n\tfor(int i=1;i<=n;i++) printf(\"%d%c\",ans[i],(i==n)?'\\n':' ');\n\treturn 0;\n}\n```",
        "postTime": 1612164775,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF741D \u3010Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths\u3011"
    },
    {
        "content": "orz \u4e00\u4e2a 2900 D1D\uff0c\u4e0d\u8fc7\u8fd8\u662f\u88ab\u6211\u81ea\u5df1\u60f3\u51fa\u6765\u4e86\uff08\n\n\u8fd9\u79cd\u5173\u4e8e\u7edf\u8ba1\u6240\u6709\u6811\u4e0a\u8def\u5f84\u7684\uff0c\u5e94\u8be5\u5957\u8def\u5730\u4f7f\u7528\u6dc0\u7c89\u8d28\u3002\u4e0d\u8fc7\u6211\u53ea\u4f1a dsu on tree/kk\uff0c\u800c\u4e14 yy \u51fa\u6765\u7684\u662f $\\mathrm O(22n\\log n)$ \u7684\u5783\u573e\u590d\u6742\u5ea6\uff0c\u6ca1\u60f3\u5230\u7adf\u7136\u548c\u5b98\u65b9\u9898\u89e3\u91cd\u5408\uff1f\n\n\u663e\u7136\u4e00\u4e2a\u5b50\u6811\u5185\u7684\u8def\u5f84\uff0c\u8981\u4e48\u7a7f\u8fc7\u6839\uff0c\u8981\u4e48\u5c31\u4e00\u5b9a\u5305\u542b\u5728\u4e00\u4e2a\u5b50\u5b50\u6811\u91cc\u9762\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u5b50\u6811\u5148\u7b97\u51fa\u90a3\u4e9b\u7a7f\u8fc7\u6839\u7684\u6700\u957f\u7684\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\uff0c\u6700\u7ec8 dfs \u4e0e\u513f\u5b50\u5408\u5e76\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u5f88\u81ea\u7136\u7684\u60f3\u5230\uff0c\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u5904\u7684\u5173\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u5947\u5076\u6027\u7684\u524d\u7f00 bitmask\uff0c\u7136\u540e\u4e00\u6761\u8def\u5f84\u7684 bitmask \u663e\u7136\u662f $Msk_x\\oplus Msk_y$\u3002\u6211\u4eec\u8981\u7edf\u8ba1\u7684\u5c31\u662f\u90a3\u4e9b $x,y$ \u5c5e\u4e8e\u4e0d\u540c\u5b50\u5b50\u6811\u7684\u6ee1\u8db3 $|Msk_x\\oplus Msk_y|\\leq 1$ \u7684\u8def\u5f84 $x\\to y$\uff0c\u5b83\u7684\u957f\u5ea6\u4e3a $dep_x+dep_y-2dep_{a}$\uff0c\u5176\u4e2d $a$ \u662f\u5f53\u524d\u6839\u3002\u8fd9\u4e2a $-2dep_a$ \u662f\u5b9a\u503c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6700\u5927\u5316 $dep_x+dep_y$\u3002\n\n\u4e0d\u96be\u60f3\u5230\u8fd9\u6837\u4e00\u4e2a\u66b4\u529b\uff1a\u5bf9\u4e8e\u6bcf\u4e2a $a$\uff0c\u7528\u5173\u4e8e\u5b50\u6811\u5927\u5c0f\u7684\u590d\u6742\u5ea6\u5904\u7406\uff1a\u5b9e\u65f6\u7ef4\u62a4\u4e00\u4e2a $mx$ \u6570\u7ec4\uff0c$mx_{msk}$ \u8868\u793a $Msk_x=msk$ \u7684\u6700\u5927 $dep_x$\u3002\u7136\u540e\u4f9d\u6b21\u8003\u8651\u6bcf\u4e2a\u5b50\u6811\uff0c\u5148\u7528\u8fd9\u4e2a\u5b50\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u8d21\u732e\u6700\u5927\u6df1\u5ea6\u548c\uff0c\u7136\u540e\u677e\u5f1b\u8fd9\u4e2a $mx$\uff08\u8fd9\u6837\u80fd\u8ba9\u300c\u5c5e\u4e8e\u4e0d\u540c\u5b50\u5b50\u6811\u300d\u83b7\u5f97\u4fdd\u8bc1\uff09\u3002\u8d21\u732e\u7684\u5177\u4f53\u65b9\u5f0f\u662f\uff1a\u679a\u4e3e $Msk_x\\oplus Msk_y$\uff08\u663e\u7136\u662f $\\mathrm O(22)$ \u7684\uff09\uff0c\u7136\u540e\u663e\u7136\u53ef\u4ee5\u786e\u5b9a\u51fa $Msk_y$\uff0c\u5f80 $mx$ \u91cc\u8c03\u7528\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u8003\u8651\u628a\u8fd9\u4e2a\u66b4\u529b\u7528 dsu on tree \u8fdb\u884c\u4f18\u5316\u3002\u663e\u7136\u662f\u53ef\u884c\u7684\uff0c\u800c\u4e14\u4e0d\u662f\u90a3\u4e48\u5957\u8def\u7684 dsu on tree\uff0c\u5b9e\u73b0\u65b9\u5f0f\u6709\u70b9\u5c0f\u53d8\u5316\u3002\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff1a$mx$ \u8fd9\u4e1c\u897f\u867d\u7136\u4e0d\u53ef\u64a4\u9500\uff0c\u4f46 dsu on tree \u672c\u6765\u5c31\u4e0d\u7528\u64a4\u9500\uff0c\u800c\u53ea\u9700\u8981\u5168\u5c40\u6e05\u7a7a\uff1b\u4e8e\u662f\u53ea\u9700\u8981\u8d4b\u4e3a $-\\infty$ \u800c\u4e0d\u9700\u8981\u6362\u6210 `set` \u7b49\u6570\u636e\u7ed3\u6784\u3002\n\n**_[code](https://www.luogu.com.cn/paste/lce0cxrl)_**",
        "postTime": 1611392968,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF741D \u3010Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths\u3011"
    },
    {
        "content": "### Solution\n\n\u200b\t\t\u56e0\u4e3a\u8981\u6c42\u8def\u5f84\u4e0a\u7684\u5b57\u7b26\u91cd\u65b0\u6392\u5e8f\u540e\u4e3a\u56de\u6587\u4e32\uff0c\u4e5f\u5c31\u662f\u8bf4\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\u7684\u5b57\u7b26\u4e0d\u4f1a\u8d85\u8fc7\u4e00\u4e2a\u3002\u6211\u4eec\u7ed9\u6bcf\u4e2a\u5b57\u7b26\u4e00\u4e2a $2^x$ \u5f62\u5f0f\u7684\u6743\u503c\uff0c\u90a3\u4e48\u5408\u6cd5\u8def\u5f84\u5f02\u6216\u548c\u8981\u4e48\u4e3a $0$ \uff0c\u8981\u4e48\u4e3a $2^x$ \u7684\u5f62\u5f0f\u3002\n\n\u200b\t\t\u8bbe\u70b9 $x$ \u5230\u6839\u7684\u5f02\u6216\u548c\u4e3a $D_x$ \uff0c\u7531\u4e8e\u662f\u8fb9\u6743\uff0cx\u548cy\u8def\u5f84\u4e0a\u7684\u5f02\u6216\u548c\u53ef\u4ee5\u7528 $D_x~xor~D_y$ \u6765\u8868\u793a\u3002\u518d\u7528\u4e00\u4e2a\u6570\u7ec4 $c$ \u6765\u5b58\u50a8\u7b54\u6848\u3002\u5176\u4e2d $c_i$ \u8868\u793a $D_x=i$ \u7684 $x$ \u7684\u6700\u5927\u6df1\u5ea6\u3002\n\n\u200b\t\t\u6211\u4eec\u53ef\u4ee5\u7528 $dsu~on~tree$ \u6765\u5c06\u590d\u6742\u5ea6\u4f18\u5316\u5230 $O(n\\log~n)$ \uff0c\u56e0\u4e3a $dsu~on~tree$ \u53ef\u4ee5\u5229\u7528\u8f7b\u91cd\u94fe\u5256\u5206\u548c\u542f\u53d1\u5f0f\u5408\u5e76\u6765\u66f4\u597d\u7684\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u3002\n\n#### \u4ee3\u7801\n\n```c++\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n\nusing namespace std;\nconst int N=500010,INF=1<<30;\nint n,c[1<<22],son[N],siz[N],dep[N];\nint head[N],nxt[N],D[N],ans[N];\n\ninline int read(){\n    int x=0,f=1;\n    char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-') f=-1;ch=getchar();}\n    while(isdigit(ch)){x=x*10+(ch^48);ch=getchar();}\n    return x*f;\n}\n\nvoid dfs(int u){\n    siz[u]=1;\n    for(int i=head[u];i;i=nxt[i]){\n        D[i]^=D[u];\n        dep[i]=dep[u]+1;\n        dfs(i);siz[u]+=siz[i];\n        if(siz[i]>siz[son[u]]) son[u]=i;\n    }\n}\n\nvoid init(int u){\n    c[D[u]]=-INF;\n    for(int i=head[u];i;i=nxt[i]) init(i);\n}\n\nint o;\nvoid up(int u){\n    ans[o]=max(ans[o],dep[u]+c[D[u]]);\n    for(int i=0;i<=21;i++) ans[o]=max(ans[o],dep[u]+c[1<<i^D[u]]);\n    for(int i=head[u];i;i=nxt[i]) up(i);\n}\n\nvoid ins(int u){\n    c[D[u]]=max(c[D[u]],dep[u]);\n    for(int i=head[u];i;i=nxt[i]) ins(i);\n}\n\n//dsu on tree\nvoid work(int u){\n    for(int i=head[u];i;i=nxt[i])\n        if(i!=son[u]) work(i),init(i);\n    if(son[u]) work(son[u]); o=u;\n    for(int i=head[u];i;i=nxt[i])\n        if(i!=son[u]) up(i),ins(i);\n    c[D[u]]=max(c[D[u]],dep[u]);\n    ans[u]=max(ans[u],dep[u]+c[D[u]]);\n    for(int i=0;i<=21;i++) ans[u]=max(ans[u],dep[u]+c[1<<i^D[u]]);//\u679a\u4e3e\u6ee1\u8db3\u6761\u4ef6\u7684y\n    ans[u]-=dep[u]<<1;//x-y\u7684\u8ddd\u79bb=dep[y]+dep[x]-2*dep[x]\n    for(int i=head[u];i;i=nxt[i]) ans[u]=max(ans[u],ans[i]);//\u5728\u5b50\u6811\u5185\u6bd4\u8f83\n}\n\nint main(){\n    n=read();\n    for(int i=0;i<(1<<22);i++) c[i]=-INF;\n    for(int i=2,x;i<=n;i++){\n        x=read();\n        nxt[i]=head[x];head[x]=i;\n        char c=getchar();\n        while(c>'v'||c<'a') c=getchar();\n        D[i]=1<<(c-'a');\n    }\n    dfs(1);work(1);\n    for(int i=1;i<=n;i++) printf(\"%d \",ans[i]);\n    return 0;\n}\n```\n\n",
        "postTime": 1599469694,
        "uid": 272143,
        "name": "\u662f\u4e2a\u6c49\u5b50",
        "ccfLevel": 4,
        "title": "CF741D Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths"
    },
    {
        "content": " \n\n**Problem**\n\n\n\u7ed9\u5b9a\u4e00\u68f5\u4ee5 $1$ \u4e3a\u6839\u7684\u6709\u6839\u6811\uff0c\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u662f `['a','v']` \u7684\u4e00\u4e2a\u5b57\u6bcd\u3002\u73b0\u5bf9\u4e8e\u6bcf\u4e2a\u6811\u4e0a\u7ed3\u70b9 $x$ \uff0c\u6c42\u51fa\u7ed3\u70b9 $x$ \u7684\u5b50\u6811\u7684\u6700\u957f\u7684\u4e00\u6761 \u201c\u56de\u6587\u201d \u8def\u5f84\u7684\u957f\u5ea6\u3002\u201c\u56de\u6587\u201d \u8def\u5f84\u7684\u542b\u4e49\u662f\u5c06\u8def\u5f84\u4e0a\u6240\u6709\u7684\u5b57\u6bcd\u53d6\u51fa\uff0c\u4efb\u610f\u6392\u5217\u540e\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u56de\u6587\u4e32\u3002\n\n\n$1\\le n\\le 5\\times 10^5$\n\n\n**Solution**\n\n\u5b57\u7b26\u4e32\u91cd\u6392\u540e\u662f\u56de\u6587\u4e32\uff0c\u663e\u7136\u8be5\u5b57\u7b26\u4e32\u5185\u6700\u591a\u53ea\u6709\u4e00\u79cd\u5b57\u7b26\u51fa\u73b0\u5947\u6570\u6b21\uff0c\u5176\u4f59\u5747\u51fa\u73b0\u5076\u6570\u6b21\u3002\n\n\u5f88\u5bb9\u6613\u53ef\u4ee5\u60f3\u5230\u5f02\u6216\u64cd\u4f5c\u3002\n\n\u7edf\u8ba1\u5b57\u7b26\u4e32\u662f\u5426\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u5947\u6570\u6b21\uff0c\u663e\u7136\u53ef\u4ee5\u5c06\u5b57\u7b26\u8868\u793a\u4e3a\u4e8c\u8fdb\u5236\u6570\uff0c\u6bcf\u6761\u8fb9\u4e00\u4e2a\u5b57\u7b26\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u8fb9\u6743\u8bbe\u4e3a $2^{\\ ch-'a'}$ \uff0c\u4e24\u6761\u8def\u7684\u5408\u5e76\u64cd\u4f5c\u5c31\u53ef\u4ee5 $O(1)$  \u4f7f\u7528 $\\text{XOR}$  \u6765\u5408\u5e76\u3002\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u5f02\u6216\u548c\u6765\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u4e32\u3002\n\n\n\u663e\u7136\u5bf9\u4e8e\u6811\u4e0a\u4e24\u6761\u8def\u5f84\u4e4b\u95f4\u7684\u5f02\u6216\u548c\u6709\uff1a\n\n$\\begin{aligned} \\text{dis}(u,v)&=\\text{dis}(u,1)\\oplus \\text{dis}(\\text{lca}_{u,v},1)\\oplus \\text{dis}(v,1)\\oplus \\text{dis}(\\text{lca}_{u,v},1) \\\\ &=\\text{dis}(u,1)\\oplus \\text{dis}(v,1) \\end{aligned}$\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9 $u$ \u5230\u6839\u7ed3\u70b9 $1$ \u7684\u8def\u5f84\u6743\u503c\u7684\u5f02\u6216\u548c $\\text{XOR}_u=\\text{dis}(u,1)$\uff0c\u5c31\u53ef\u4ee5 $O(1)$ \u8ba1\u7b97\u51fa\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u6743\u503c\u5f02\u6216\u548c\u3002 \n\n\u663e\u7136\u4e00\u6761\u8def\u5f84\u5408\u6cd5\uff08\u662f\u56de\u6587\u4e32\uff09\u5f53\u4e14\u4ec5\u5f53 $\\text{XOR}_u\\oplus \\text{XOR}_v$ \u7684\u4e8c\u8fdb\u5236\u6570\u4e2d\u4ec5\u6709\u4e00\u4e2a $1$ \u6216\u4e00\u4e2a\u90fd\u6ca1\u6709  \uff0c\u5373\u5982\u4e0b $23$ \u79cd\u72b6\u6001\uff1a\n\n```cpp\n000...00  \n100...00  \n010...00 \n ......   \n000...10   \n000...01 \n```\n\n\u5373\u5408\u6cd5\u8def\u5f84 $(u,v)$ \u4e3a $\\text{XOR}_u\\oplus \\text{XOR}_v = 0$ \u6216\u8005 $\\text{XOR}_u\\oplus \\text{XOR}_v= 2^i$\n\n\n\n\n\n\u6211\u4eec\u9700\u8981\u6c42\u7684\u5c31\u662f\u4ee5 $u$ \u4e3a\u6839\u5b50\u6811\u4e2d\u7684\u4e24\u70b9 $x,y$\uff0c\u6ee1\u8db3 $\\text{XOR}_x\\oplus\\text{XOR}_y=0$ \u6216$\\text{XOR}_x\\oplus\\text{XOR}_y=2^i$ \u7684\u70b9\u5bf9\u6240\u6709 $(x,y)$ \u4e2d\u7684\u6700\u957f\u957f\u5ea6\u3002\n\n \n\n  \u5bf9\u4e8e\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u6811\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u6700\u957f\u8def\u5f84\u663e\u7136\u6709\u4e09\u79cd\uff1a\n 1. \u4e0d\u7ecf\u8fc7\u6839 $u$\n \u5373\u6700\u957f\u8def\u5f84\u5728\u5b50\u6811\u4e2d\n 2. \u8def\u5f84\u7684\u4e00\u4e2a\u7aef\u70b9\u5c31\u662f\u6839 $u$\n \u5373\u5b50\u6811\u4e2d\u7684\u4e00\u70b9  $v$ \u4e0e \u6839 $u$ \u6784\u6210\u7684\u8def\u5f84\n 3. \u7ecf\u8fc7\u6839 $u$ \uff0c\u4e24\u4e2a\u7aef\u70b9\u5728\u5b50\u6811\u4e2d\n \u5373\u4e24\u4e2a\u7aef\u70b9\u5728\u5b50\u6811\u4e2d\uff0c\u8def\u5f84\u7ecf\u8fc7\u4e86\u6839 $u$\n\n \u8bbe `f[x]` \u8868\u793a\u5f53\u524d\u5b50\u6811\u4e2d\u7ed3\u70b9 $v$ \u5230\u6839\u7ed3\u70b9 $u$ \u7684\u8def\u5f84\u7684\u5f02\u6216\u548c\u7b49\u4e8e $x$ \u7684\u7ed3\u70b9 $v$ \u7684\u6700\u5927\u6df1\u5ea6\u3002\n \n \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u663e\u7136\u7b54\u6848\u5c31\u662f $\\text{ans}_u = \\max\\{\\text{ans}_u, \\text{ans}_v\\}$\uff0c$v$ \u662f $u$ \u7684\u5b50\u6811\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\u3002\n \n \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u663e\u7136\u7b54\u6848\u5c31\u662f $\\text{ans}_u = \\max\\{\\text{ans}_u, \\max\\{f[\\text{XOR}_u], f[\\text{XOR}_u\\oplus 2^i]\\} - \\text{depth}[u]\\}$\u3002\n \n \u5bf9\u4e8e\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u8ba1\u7b97\uff0c\u6b64\u65f6\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7edf\u8ba1\u8d21\u732e\u3002\n \n \u5373\u5148\u8ba1\u7b97\u8f7b\u513f\u5b50\uff0c\u56de\u7b54\u8be2\u95ee\u4e4b\u540e\uff0c\u6e05\u7a7a\u8f7b\u513f\u5b50\u7684\u8d21\u732e $f_i$\uff0c\u7136\u540e\u5904\u7406\u91cd\u513f\u5b50\uff0c\u4fdd\u7559\u91cd\u513f\u5b50\u7684\u8d21\u732e $f_i$\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u4e00\u6b21\u5269\u4f59\u7684\u8f7b\u513f\u5b50\uff0c\u4fdd\u7559\u8d21\u732e\u5728\u6570\u7ec4 $f_i$ \u4e2d\uff0c\u7528\u4e8e\u4e0e\u4e0a\u5c42\u5408\u5e76\u3002 \u6b64\u65f6\u7ecf\u8fc7\u6839\u8282\u70b9 $u$ \u7684\u8def\u5f84 $(x,u)$\u7684\u957f\u5ea6\u663e\u7136\u4e3a `max{f[XOR[x]], f[XOR[x] ^ (1 << i)]} - depth[u] + depth[x] - depth[u]`\uff0c\u5373\u4ee5 $u$ \u4e3a\u6839\u7684\u51fa $x$ \u5b50\u6811\u7684\u5176\u4ed6\u5b50\u6811\u4e2d\u4e0e $\\text{XOR}_x$ \u5f02\u6216\u548c\u4e3a $0$ \u6216 $2^i$ \u7684\u6df1\u5ea6\u6700\u5927\u7684\u7ed3\u70b9 $y$ \u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u6211\u4eec\u5148\u66f4\u65b0\u7b54\u6848 `ans` \uff0c\u9000\u51fa\u904d\u5386\u4ee5\u540e\u518d\u66f4\u65b0 $f_i$ \u6570\u7ec4\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u4e0d\u80fd\u81ea\u5df1\u5339\u914d\u81ea\u5df1\uff08\n\n\u6ce8\u610f\u8fd9\u91cc\u7ed9\u7684\u662f\u8fb9\u6743\uff0c\u6211\u4eec\u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u518d\u8bbe\u4e00\u4e2a\u6570\u7ec4 `id` \u53bb\u533a\u5206\u5f00 $(u,v)$ \u548c $(u,w)$ \uff0c\u6bd4\u8f83\u9ebb\u70e6\u3002\u4f46\u5b83\u7ed9\u5b9a\u7684\u8fb9\u662f $p_{i+1}$ \u4e0e $i+1$ \u8fde\u6743\u503c\u4e3a `ch` \u7684\u8fb9\uff0c\u5e76\u4fdd\u8bc1 $p_{i+1}$ \u4e00\u5b9a\u5c0f\u4e8e $i+1$ \uff0c\u5e76\u4e14\u56e0\u4e3a\u662f\u6811\uff0c\u6ca1\u6709\u73af\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u8fde\u5355\u5411\u8fb9 $(p_{i+1},i+1)$ \uff0c\u5c06\u8fb9\u6743\u4f5c\u4e3a $i+1$ \u7684\u70b9\u6743\uff0c\u6211\u4eec\u4ece\u6839 $1$ \u5f00\u59cb\uff0c\u904d\u5386\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u662f\u4ece\u4e0a\u5f80\u4e0b\u904d\u5386\u7684\uff0c\u6bcf\u4e00\u4e2a\u70b9\u53ea\u6709\u4e00\u4e2a\u6307\u5411\u7684\u70b9\uff0c\u4e0d\u4f1a\u91cd\u590d\uff0c\u5c31\u4e0d\u9700\u8981\u533a\u5206\u4e86\uff0c\u4e00\u4e2a\u70b9\u6743\u5c31\u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4\u4e86\u3002\n\n**Code**\n\n\n\n```cpp \n#include <bits/stdc++.h> \nusing namespace std; \nconst int N = 6e5 + 7, M = 3e6 + 7, INF = 0x3f3f3f3f; \nint n, m, t, k;\nint ans[N];\nint head[N], ver[M], nex[M], edge[M], tot;\nbool vis[N];\nint siz[N], depth[N];\nint f[1 << 22];\nint XOR[N];\nint hson[N];\n\nvoid add(int x, int y)\n{\n\tver[tot] = y;\n\tnex[tot] = head[x];\n\thead[x] = tot ++ ;\n}\n\nvoid dfs1(int x)\n{\n\tsiz[x] = 1;\n\tans[x] = -INF;\n\tint h_size = 0, h_son = 0;\n\tfor (int i = head[x]; ~i; i = nex[i]) {\n\t\tint y = ver[i];\n\t\tdepth[y] = depth[x] + 1;\n\t\tXOR[y] ^= XOR[x];//\u5230 1 \u7684\u8def\u5f84\u7684\u5f02\u6216\u548c\n\t\tdfs1(y);\n\t\tsiz[x] += siz[y];\n\t\tif(siz[y] > h_size)\n\t\t\th_size = siz[y], h_son = y;\n\t}\n\tif(h_son != 0)\n\t\thson[x] = h_son;\n}\n\nvoid update_ans(int x, int fa)\n{\n\tans[fa] = max(ans[fa], f[XOR[x]] - depth[fa] + depth[x] - depth[fa]);\n\tfor (int i = 0; i < 22; ++ i)\n\t\tans[fa] = max(ans[fa], f[XOR[x] ^ (1 << i)] - depth[fa] + depth[x] - depth[fa]);\n\tfor (int i = head[x]; ~i; i = nex[i]) {\n\t\tint y = ver[i];\n\t\tupdate_ans(y, fa);\n\t}\n}\n\nvoid modify_f(int x, int fa)\n{\n\tf[XOR[x]] = max(f[XOR[x]], depth[x]);\n\tfor (int i = head[x]; ~i; i = nex[i]) {\n\t\tint y = ver[i];\n\t\tmodify_f(y, x);\n\t}\n}\n\nvoid solve(int x, int h_son)\n{\n\tf[XOR[x]] = max(f[XOR[x]], depth[x]);\n\n\t//\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4e0d\u7ecf\u8fc7\u6839 x\n\tfor (int i = head[x]; ~i; i = nex[i]) {\n\t\tint y = ver[i];\n\t\tans[x] = max(ans[x], ans[y]);\n\t}\n\t//\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u4ee5\u6839 x \u4e3a\u7aef\u70b9\n\tans[x] = max(ans[x], f[XOR[x]] - depth[x]);\n\tfor (int i = 0; i < 22; ++ i)\n\t\tans[x] = max(ans[x], f[XOR[x] ^ (1 << i)] - depth[x]);\n\t//\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u7ecf\u8fc7\u6839 x\n\tfor (int i = head[x]; ~i; i = nex[i]) {\n\t\tint y = ver[i];\n\t\tif(y == h_son) continue;\n\t\tupdate_ans(y, x);\n\t\tmodify_f(y, x);\n\t}\n}\n\nvoid init(int x)\n{\n    f[XOR[x]] = -INF;\n    for (int i = head[x]; ~i; i = nex[i]) {\n        int y = ver[i];\n        init(y);\n    }\n}\n\nvoid dsu_on_tree(int x)\n{\n\tans[x] = 0;\n\tfor (int i = head[x]; ~i; i = nex[i]) {\n\t\tint y = ver[i];\n\t\tif(hson[x] == y) continue;\n\t\tdsu_on_tree(y);\n\t\tinit(y);\n\t}\n\tif(hson[x] != 0)\n\t\tdsu_on_tree(hson[x]);\n\tsolve(x, hson[x]);\n}\n\nint main()\n{\n\tmemset(head, -1, sizeof head);\n\tfor (int i = 0; i <= (1 << 22) - 1; ++ i)\n\t\tf[i] = -INF;\n\tscanf(\"%d\", &n);\n\tfor (int i = 2; i <= n ; ++ i) {\n\t\tint u;\n\t\tchar ch[10];\n\t\tscanf(\"%d%s\", &u, ch);\n\t\tadd(u, i);//u -> i \u4e00\u5b9a\u662f\u5c0f\u7684\u5411\u5927\u7684\u8fde\uff0c\u6839\u4e3a1\uff0c\u6240\u4ee5\u662f\u4ece\u4e0a\u5f80\u4e0b\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8fde\u5355\u8fb9\uff0c\u5373\u53ef\u628a\u8fb9\u6743\u8f6c\u5316\u4e3a\u70b9\u6743\n\t\tXOR[i] = 1 << (ch[0] - 'a'); \n\t}\n\tdfs1(1);\n\tdsu_on_tree(1);\n\tfor (int i = 1; i <= n; ++ i)\n\t\tprintf(\"%d%s\", ans[i], i == n ? \"\\n\" : \" \");\n\treturn 0;\n}\n```\n",
        "postTime": 1627296487,
        "uid": 262605,
        "name": "fanfansann",
        "ccfLevel": 0,
        "title": "\uff08\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff09CF741D Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths"
    },
    {
        "content": "# CF741D Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths\n\n\u91cd\u6392\u540e\u56de\u6587\uff0c\u76f8\u5f53\u4e8e\u81f3\u591a\u53ea\u6709\u4e00\u4e2a\u5b57\u6bcd\uff0c\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\u3002\n\n\u56e0\u4e3a\u53ea\u548c\u51fa\u73b0\u6b21\u6570\u7684\u5947\u5076\u6027\u6709\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u51fa\u73b0\u6b21\u6570\uff0c\u7b80\u5316\u4e3a\u4e00\u4e2a $22$ \u4f4d\u4e8c\u8fdb\u5236 $\\text{mask}$\u3002\n\n\u8003\u8651\u6c42\u70b9 $u$ \u7684\u7b54\u6848\uff08\u5b50\u6811\u91cc\u7684\u6700\u5927\u5408\u6cd5\u8def\u5f84\uff09\u3002\u9996\u5148\u53ef\u4ee5\u7ee7\u627f $u$ \u7684\u6240\u6709\u513f\u5b50\uff0c\u7136\u540e\u8003\u8651\u8de8\u8fc7 $u$ \u7684\u8def\u5f84\u3002\u90a3\u4e48\u4e00\u5b9a\u662f\u4e24\u4e2a\u4e0d\u540c\u513f\u5b50\u5b50\u6811\u91cc\u7684\u70b9\uff0c\u5230 $u$ \u7684\u8def\u5f84\u62fc\u8d77\u6765\u7684\u3002\n\n\u8003\u8651\u4e24\u4e2a\u70b9 $x,y$\uff0c\u6765\u81ea\u4e0d\u540c\u513f\u5b50\u7684\u5b50\u6811\u3002\u5982\u679c\u8bb0 $f_i$ \u8868\u793a\u70b9 $i$ \u5230\u6839\u8def\u5f84\u4e0a\uff0c\u8fd9\u4e9b\u8fb9\u7684 $\\text{mask}$\u3002\u5219 $x,y$ \u4e4b\u95f4\u7684\u8def\u5f84\u7684 $\\text{mask}$\uff0c\u5c31\u7b49\u4e8e $f_x\\operatorname{xor} f_y$\uff0c\u56e0\u4e3a\u4ece LCA \u5230\u6839\u7684\u90e8\u5206\uff0c\u88ab\u5f02\u6216\u540e\u62b5\u6d88\u4e86\u3002\n\n\u4f9d\u6b21\u8003\u8651 $u$ \u7684\u6bcf\u4e2a\u513f\u5b50\uff0c\u505a\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u679a\u4e3e\u8f83\u5c0f\u7684\u96c6\u5408\u91cc\u7684\u4e00\u4e2a\u70b9 $y$\uff0c\u90a3\u4e48\u8981\u5728\u53e6\u4e00\u4e2a\u96c6\u5408\u91cc\u67e5\u8be2\u4e00\u4e2a\u6570\uff0c\u4e0e $f_y$ \u7684\u5f02\u6216\u503c\uff0c\u81f3\u591a\u53ea\u6709\u4e00\u4f4d\u4e8c\u8fdb\u5236\u4f4d\u4e3a $1$\u3002\u679a\u4e3e\u5177\u4f53\u662f\u54ea\u4e00\u4f4d\u4e3a $1$\u3002\u53ef\u4ee5\u7528 $\\texttt{std::map}$ \u7ef4\u62a4\u96c6\u5408\uff0c\u652f\u6301\u63d2\u5165\u548c\u67e5\u627e\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n \\cdot c)$\u3002\n\n\u5c06 $\\texttt{std::map}$ \u66ff\u6362\u4e3a $\\texttt{std::unordered_map}$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u4e3a $O(n\\log n\\cdot c)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n//problem:CF741D\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define pb push_back\n#define mk make_pair\n#define lob lower_bound\n#define upb upper_bound\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\n\ntemplate<typename T>inline void ckmax(T& x,T y){x=(y>x?y:x);}\ntemplate<typename T>inline void ckmin(T& x,T y){x=(y<x?y:x);}\n\n/* --------------- fast io --------------- */ // begin\nnamespace Fread{\nconst int SIZE=1<<20;\nchar buf[SIZE],*S,*T;\ninline char getchar(){\n\tif(S==T){\n\t\tT=(S=buf)+fread(buf,1,SIZE,stdin);\n\t\tif(S==T)return EOF;\n\t}\n\treturn *S++;\n}\n}//namespace Fread\nnamespace Fwrite{\nconst int SIZE=1<<20;\nchar buf[SIZE],*S=buf,*T=buf+SIZE;\ninline void flush(){\n\tfwrite(buf,1,S-buf,stdout);\n\tS=buf;\n}\ninline void putchar(char c){\n\t*S++=c;\n\tif(S==T)flush();\n}\nstruct _{\n\t~_(){flush();}\n}__;\n}//namespace Fwrite\n\n#ifdef ONLINE_JUDGE\n\t#define getchar Fread::getchar\n\t#define putchar Fwrite::putchar\n#endif\n\ntemplate<typename T>inline void read(T& x){\n\tx=0;int f=1;\n\tchar c=getchar();\n\twhile(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n\twhile(isdigit(c))x=x*10+(c-'0'),c=getchar();\n\tx*=f;\n}\ntemplate<typename T>inline void write(T x,bool _enter=0,bool _space=0){\n\tif (!x)putchar('0');else{\n\t\tif(x<0)putchar('-'),x=-x;\n\t\tstatic char dig[41];\n\t\tint top=0;\n\t\twhile(x)dig[++top]=(x%10)+'0',x/=10;\n\t\twhile(top)putchar(dig[top--]);\n\t}\n\tif(_enter)putchar('\\n');\n\tif(_space)putchar(' ');\n}\n\nnamespace Fastio{\nstruct reader{\n\ttemplate<typename T>reader& operator>>(T& x){::read(x);return *this;}\n\treader& operator>>(char& c){\n\t\tc=getchar();\n\t\twhile(c=='\\n'||c==' ')c=getchar();\n\t\treturn *this;\n\t}\n\treader& operator>>(char* str){\n\t\tint len=0;\n\t\tchar c=getchar();\n\t\twhile(c=='\\n'||c==' ')c=getchar();\n\t\twhile(c!='\\n'&&c!=' ')str[len++]=c,c=getchar();\n\t\tstr[len]='\\0';\n\t\treturn *this;\n\t}\n}cin;\nconst char endl='\\n';\nstruct writer{\n\ttemplate<typename T>writer& operator<<(T x){::write(x,0,0);return *this;}\n\twriter& operator<<(char c){putchar(c);return *this;}\n\twriter& operator<<(char* str){\n\t\tint cur=0;\n\t\twhile(str[cur])putchar(str[cur++]);\n\t\treturn *this;\n\t}\n\twriter& operator<<(const char* str){\n\t\tint cur=0;\n\t\twhile(str[cur])putchar(str[cur++]);\n\t\treturn *this;\n\t}\n}cout;\n}//namespace Fastio\n#define cin Fastio::cin\n#define cout Fastio::cout\n#define endl Fastio::endl\n/* --------------- fast io --------------- */ // end\n\nconst int MAXN = 5e5;\nconst int INF = 1e9;\nint n, fa[MAXN + 5];\nchar c[MAXN + 5];\n\nstruct EDGE {int nxt, to;} edge[MAXN+ 5];\nint head[MAXN + 5], tot;\ninline void add_edge(int u, int v) { edge[++tot].nxt = head[u], edge[tot].to = v, head[u] = tot; }\n\nunordered_map<int, int> mp[MAXN + 5];\nint id[MAXN + 5], dep[MAXN + 5], mask[MAXN + 5], ans[MAXN + 5];\nint merge(int v, int u) {\n\t// v join u\n\tif(SZ(mp[id[v]]) > SZ(mp[id[u]])) {\n\t\tswap(id[v], id[u]);\n\t}\n\tint res = -INF;\n\tfor(unordered_map<int,int> :: iterator it = mp[id[v]].begin(); it != mp[id[v]].end(); ++it) {\n\t\tint msk = (it -> fi);\n\t\tif(mp[id[u]].count(msk)) {\n\t\t\tckmax(res, (it -> se) + mp[id[u]][msk]);\n\t\t}\n\t\tfor(int j = 0; j < 22; ++j) {\n\t\t\tif(mp[id[u]].count(msk ^ (1 << j))) {\n\t\t\t\tckmax(res, (it -> se) + mp[id[u]][msk ^ (1 << j)]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(unordered_map<int,int> :: iterator it = mp[id[v]].begin(); it != mp[id[v]].end(); ++it) {\n\t\tckmax(mp[id[u]][it -> fi], it -> se);\n\t}\n\treturn res;\n}\nvoid dfs(int u) {\n\tmp[id[u]][mask[u]] = dep[u];\n\tans[u] = 0;\n\tfor(int i = head[u]; i; i = edge[i].nxt) {\n\t\tint v = edge[i].to;\n\t\tdep[v] = dep[u] + 1;\n\t\tmask[v] = (mask[u] ^ (1 << (c[v] - 'a')));\n\t\tdfs(v);\n\t\tckmax(ans[u], ans[v]);\n\t\tckmax(ans[u], merge(v, u) - dep[u] * 2);\n\t}\n}\nint main() {\n\tcin >> n;\n\tfor(int i = 2; i <= n; ++i) {\n\t\tcin >> fa[i] >> c[i];\n\t\tadd_edge(fa[i], i);\n\t}\n\tfor(int i = 1; i <= n; ++i) {\n\t\tid[i] = i;\n\t}\n\tdfs(1);\n\tfor(int i = 1; i <= n; ++i) {\n\t\tcout << ans[i] << \" \";\n\t}\n\tcout << endl;\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1600179376,
        "uid": 100674,
        "name": "duyi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF741D \u3010Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths\u3011"
    },
    {
        "content": "[$\\Large\\color{#FFBBFF}\\textit{Tian-Xing's blog}$](https://Tian-Xing.github.io)\n\n------------\n\n# Description\n\n[\u4f20\u9001\u95e8](http://codeforces.com/problemset/problem/741/D)\n\n------------\n\n# Solution\n\n\u5c06\u5b57\u7b26\u4e32\u7684\u8def\u5f84\u770b\u505a\u4e8c\u8fdb\u5236\u6570\uff0c\u90a3\u4e48\u4e00\u4e2a\u8def\u5f84\u4e0a\u7684\u5b57\u7b26\u80fd\u91cd\u65b0\u8c03\u6574\u6210\u56de\u6587\u4e32\u7684\u5145\u8981\u6761\u4ef6\u662f\u4ece\u6839\u5230\u4e24\u4e2a\u70b9\u7684\u4e8c\u8fdb\u5236\u6570\u5f02\u6216\u548c\u4e3a$0$\u6216\u8005$2$\u7684\u5e42\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u4e00\u4e2a\u56de\u6587\u4e32\u91cc\uff0c\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\u7684\u5b57\u7b26\u53ea\u80fd\u6709\u4e00\u4e2a\u6216\u8005\u6ca1\u6709\u3002\n\n\u90a3\u4e48\u95ee\u9898\u73b0\u5728\u53d8\u6210$x$\u7684\u5b50\u6811\u91cc\u627e\u6700\u5927\u7684$dep_a + dep_b - dep_{lca(a, b)}$\u3002\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u94a6\u5b9a\u4e24\u4e2a\u70b9\u7684$lca$\u4e3a$x$\uff0c\u6700\u540e\u7528$x$\u7684\u5b50\u6811\u7684\u503c\u66f4\u65b0\u5b83\u5373\u53ef\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e86$dsu\\ on\\ tree$\u7684\u601d\u8def\u3002\u90a3\u4e48\u5982\u4f55\u4fdd\u8bc1\u4e24\u4e2a\u70b9\u7684$lca$\u5c31\u662f$x$\u70b9\u5462\uff1f\u53ea\u9700\u8981\u4e00\u6761\u94fe\u4e00\u6761\u94fe\u7684\u8fdb\u884c\u5904\u7406\uff0c\u8fd9\u6837\u4efb\u610f\u4e24\u70b9\u7684$lca$\u5fc5\u7136\u5c31\u662f$x$\u3002\u5c06\u4e8c\u8fdb\u5236\u6570\u4e3a$s$\u7684\u6700\u6df1\u6df1\u5ea6\u8bb0\u5f55\u4e0b\u6765\uff0c\u679a\u4e3e\u4e00\u4e0b\u4e8c\u8fdb\u5236\u6570\u4e92\u76f8\u5f02\u6216\u5f97\u5230\u7684\u503c\u5c31\u884c\u4e86\u3002\n\n------------\n\n# Code\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int N = 500000;\n\nint head[N + 50], num, a[N + 50], n, siz[N + 50], dep[N + 50], ans[N + 50], maxson[N + 50], s[N + 50], maxv, f[N * 20], inf;\n\nstruct Node\n{\n\tint next, to;\n} edge[N + 50];\n\nvoid Addedge(int u, int v)\n{\n\tedge[++num] = (Node){head[u], v};\n\thead[u] = num;\n\treturn;\n}\n\nvoid Dfs1(int x, int fa)\n{\n\tsiz[x] = 1; dep[x] = dep[fa] + 1;\n\tif (x != 1) s[x] = s[fa] ^ (1 << a[x]);\n\tfor (int i = head[x]; i; i = edge[i].next)\n\t{\n\t\tint v = edge[i].to;\n\t\tDfs1(v, x);\n\t\tsiz[x] += siz[v];\n\t\tif (siz[v] > siz[maxson[x]]) maxson[x] = v;\n\t}\n\treturn;\n}\n\nvoid Calc(int rt, int x)\n{\n\tint now = s[x];\n\tmaxv = max(maxv, f[now] + dep[x] - 2 * dep[rt]);\n\tif ((s[x] ^ s[rt]) == 0) maxv = max(maxv, dep[x] - dep[rt]);\n\tfor (int i = 0; i < 22; i++)\n\t{\n\t\tnow = (1 << i) ^ s[x];\n\t\tmaxv = max(maxv, f[now] + dep[x] - 2 * dep[rt]);\n\t\tif ((s[x] ^ s[rt]) == (1 << i)) maxv = max(maxv, dep[x] - dep[rt]);\n\t}\n\tfor (int i = head[x]; i; i = edge[i].next)\n\t{\n\t\tint v = edge[i].to;\n\t\tCalc(rt, v);\n\t} \n\treturn;\n}\n\nvoid Change(int x, int k)\n{\n\tif (k) f[s[x]] = max(f[s[x]], dep[x]);\n\telse f[s[x]] = inf;\n\tfor (int i = head[x]; i; i = edge[i].next) Change(edge[i].to, k);\n\treturn;\n}\n\nvoid Dfs2(int x, int remain)\n{\n\tfor (int i = head[x]; i; i = edge[i].next)\n\t{\n\t\tint v = edge[i].to;\n\t\tif (v == maxson[x]) continue;\n\t\tDfs2(v, 0); \n\t}\n\tif (maxson[x]) Dfs2(maxson[x], 1);\n\tmaxv = 0; int now = s[x];\n\tmaxv = max(maxv, f[now] - dep[x]);\n\tfor (int i = 0; i < 22; i++)\n\t{\n\t\tnow = (1 << i) ^ s[x];\n\t\tmaxv = max(maxv, f[now] - dep[x]);\n\t}\n\tfor (int i = head[x]; i; i = edge[i].next)\n\t{\n\t\tint v = edge[i].to;\n\t\tif (v == maxson[x]) continue;\n\t\tCalc(x, v); Change(v, 1);\n\t}\n\tans[x] = maxv;\n\tif (!remain) \n\t{\n\t\tfor(int i = head[x]; i; i = edge[i].next)\n\t\t\tChange(edge[i].to, 0);\n\t\tf[s[x]] = inf; \n\t}\n\telse f[s[x]] = max(f[s[x]], dep[x]);\n\treturn;\n}\n\nvoid Erase(int x)\n{\n\tfor (int i = head[x]; i; i = edge[i].next)\n\t{\n\t\tint v = edge[i].to; Erase(v);\n\t\tans[x] = max(ans[x], ans[v]);\n\t}\n\treturn;\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tchar tmp;\n\tfor (int i = 2, fa; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &fa);\n\t\tcin >> tmp;\n\t\tAddedge(fa, i); a[i] = tmp - 'a';\n\t}\n\tDfs1(1, 0); \n\tmemset(f, 128, sizeof(f)); inf = f[0];\n\tDfs2(1, 0);\n\tErase(1);\n\tfor (int i = 1; i <= n; i++) printf(\"%d \", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1591773394,
        "uid": 73983,
        "name": "Infiltrator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF741D \u3010Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths\u3011"
    },
    {
        "content": "\u9898\u76ee\u610f\u601d\u5f88\u6e05\u695a\u4e86\u5427\uff0c\u90a3\u4e48\u6211\u4eec\u4ece**\u91cd\u6392\u56de\u6587\u4e32**\u7684\u6027\u8d28\u5165\u624b\u3002\n\n\u5f88\u5bb9\u6613\u5f97\u51fa\uff0c\u53ea\u8981\u6240\u6709\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u4e3a**\u5076\u6570**\uff0c\u6216\u8005\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u4e3a**\u5947\u6570**\u5c31\u6ee1\u8db3\u8981\u6c42\u4e86\u3002\n\n\u7136\u540e\u60f3\u5230\u4ec0\u4e48\uff0c**Hash**\uff1f\u5927\u53ef\u4e0d\u5fc5\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b57\u7b26$\\in [a,v]$\uff0c\u4e00\u5171$22$\u79cd\uff0c\u90a3\u4e48\u6211\u4eec\u5957\u8def\u7684**\u72b6\u538b**\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u9898\u76ee\u653e\u5728\u4e00\u68f5\u6811\u4e0a\uff0c\u6211\u4eec\u4e0d\u7981\u8054\u60f3\u6811\u4e0a\u5e38\u7528\u7684\u7b97\u6cd5\u2014\u2014**\u500d\u589e\uff0c\u6811\u5256\uff0c\u6811\u5206\u6cbb\uff0c\u6811\u4e0a\u83ab\u961f\uff0cLCT**\uff0c\u4f46\u662f\u597d\u50cf\u90fd\u4e0d\u597d\u505a\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u662f\u4e00\u4e2a**\u9759\u6001\u5b50\u6811\u4fe1\u606f\u7ef4\u62a4**\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6bd4\u8f83\u51b7\u95e8\u7684\u7b97\u6cd5**Dsu on Tree**\uff08\u4e2d\u6587\u540d\u53eb**\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76**\uff09\n\n\u5b83\u7684\u5927\u4f53\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5bf9\u66b4\u529bDFS\u7684\u8fc7\u7a0b\u505a\u4e86\u4f18\u5316\u3002\u5148\u7c7b\u4f3c\u4e8e**\u8f7b\u91cd\u5256\u5206**\u90a3\u6837\u6c42\u51fa\u8f7b\u91cd\u513f\u5b50\uff0c\u7136\u540e\u6bcf\u6b21\u5148\u66b4\u529b\u9012\u5f52\u8f7b\u513f\u5b50\uff0c\u7b97\u5b8c\u8d21\u732e\u7136\u540e**\u5220\u53bb**\u3002\n\n\u7136\u540e\u518d\u7edf\u8ba1\u91cd\u513f\u5b50\u7684\u8d21\u732e\uff0c\u505a\u5b8c**\u4e0d\u518d\u5220\u53bb**\uff0c\u7136\u540e\u6700\u540e\u56de\u6eaf\u7684\u65f6\u5019\u628a\u8f7b\u513f\u5b50\u7684\u518d\u52a0\u56de\u53bb\u3002\n\n\u7531\u4e8e\u6bcf\u8df3\u4e00\u6b21\u91cd\u513f\u5b50\uff0c\u5b50\u6811\u89c4\u6a21\u81f3\u5c11\u51cf\u5c11\u4e00\u534a\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u8282\u70b9\u6700\u591a\u5411\u4e0a\u5408\u5e76$\\log n$\u6b21\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f$O(n\\log n)$\u7684\u3002\n\n\u518d\u6765\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e**\u5f02\u6216\u4ee5\u53ca\u6df1\u5ea6**\u7684\u53ef\u51cf\u6027\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a\u6570\u7ec4\u7edf\u8ba1\u5b50\u6811\u5185\u6bcf\u79cd\u72b6\u6001\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u6bcf\u6b21\u6839\u636e\u8fd9\u4e2a\u6570\u7ec4\u66f4\u65b0\u4fe1\u606f\u5373\u53ef\u3002\n\n\u4e0d\u8fc7\u8981\u6ce8\u610f\u8fd9\u6837\u505a\u7684\u7b54\u6848\u662f\u5f3a\u5236\u8fc7\u5f53\u524d\u6839\u8282\u70b9\u7684\uff0c\u4e0d\u8fc7\u7531\u4e8e\u8fd9\u662f\u4e2a**\u6700\u503c**\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b50\u6811\u7684\u4fe1\u606f\u5411\u4e0a\u53d6$\\max$\u3002\n\n\u867d\u7136\u4f1a\u6709\u4e00\u4e2a$22$\u7684\u5e38\u6570\uff0c\u4f46\u662f\u4f60\u8981\u575a\u4fe1CF\u795e\u673a\u662f\u53ef\u4ee5\u8dd1\u8fc7\u53bb\u7684\u3002\n\n\u603b\u590d\u6742\u5ea6$O(22n\\log n)$\uff0c\u5e38\u6570\u5f88\u5c0f\u3002\n\nCODE\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#define RI register int\n#define CI const int&\n#define Tp template <typename T>\n#define add(x,y) e[++cnt]=(edge){y,head[x]},head[x]=cnt\nusing namespace std;\nconst int N=500005,R=22,status=(1<<R)-1,INF=1e9;\nstruct edge\n{\n    int to,nxt;\n}e[N]; int fa[N],n,head[N],cnt,dep[N],prefix[N],son[N],ans[N],size[N],bit[R+5],f[(1<<R)+5]; char ch;\nclass FileInputOutput\n{\n    private:\n        static const int S=1<<21;\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n        #define pc(ch) (Ftop<S?Fout[Ftop++]=ch:(fwrite(Fout,1,S,stdout),Fout[(Ftop=0)++]=ch))\n        char Fin[S],Fout[S],*A,*B; int Ftop,pt[15];\n    public:\n        Tp inline void read(T& x)\n        {\n            x=0; char ch; while (!isdigit(ch=tc()));\n            while (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n        }\n        Tp inline void write(T x)\n        {\n        \tif (!x) return (void)(pc('0'),pc(' ')); RI ptop=0;\n        \twhile (x) pt[++ptop]=x%10,x/=10; while (ptop) pc(pt[ptop--]+48); pc(' ');\n        }\n        inline void get_alpha(char& ch)\n        {\n        \twhile (!isalpha(ch=tc()));\n        }\n        inline void Fend(void)\n        {\n        \tfwrite(Fout,1,Ftop,stdout);\n        }\n        #undef tc\n        #undef pc\n}F;\ninline void maxer(int& x,CI y)\n{\n    if (y>x) x=y;\n}\n#define to e[i].to\ninline void DFS1(CI now)\n{\n    size[now]=1; for (RI i=head[now];i;i=e[i].nxt)\n    {\n        dep[to]=dep[now]+1; prefix[to]^=prefix[now]; DFS1(to);\n        size[now]+=size[to]; if (size[to]>size[son[now]]) son[now]=to;\n    }\n}\ninline void calc(CI now,CI par)\n{\n    RI i; for (i=0;i<=R;++i) maxer(ans[par],dep[now]+f[prefix[now]^bit[i]]);\n    for (i=head[now];i;i=e[i].nxt) calc(to,par);\n}\ninline void Add(CI now)\n{\n    maxer(f[prefix[now]],dep[now]); for (RI i=head[now];i;i=e[i].nxt) Add(to);\n}\ninline void Del(CI now)\n{\n    f[prefix[now]]=-INF; for (RI i=head[now];i;i=e[i].nxt) Del(to);\n}\ninline void DFS2(CI now)\n{\n    RI i; for (i=head[now];i;i=e[i].nxt) if (to!=son[now])\n    DFS2(to),Del(to); if (son[now]) DFS2(son[now]);\n    maxer(f[prefix[now]],dep[now]); for (i=0;i<=R;++i)\n    maxer(ans[now],dep[now]+f[prefix[now]^bit[i]]);\n    for (i=head[now];i;i=e[i].nxt) if (to!=son[now]) calc(to,now),Add(to);\n}\n#undef to\nint main()\n{\n    //freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n    RI i; for (F.read(n),i=2;i<=n;++i) F.read(fa[i]),F.get_alpha(ch),\n    add(fa[i],i),prefix[i]=1<<ch-'a'; for (i=0;i<=status;++i)\n    f[i]=-INF; for (i=0;i<R;++i) bit[i]=1<<i;\n    for (DFS1(1),DFS2(1),i=1;i<=n;++i) ans[i]-=2*dep[i];\n    for (i=n;i;--i) maxer(ans[fa[i]],ans[i]); for (i=1;i<=n;++i)\n    F.write(ans[i]); return F.Fend(),0;\n}\n```\n\n",
        "postTime": 1548394924,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF741D \u3010Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths\u3011"
    },
    {
        "content": "\u628a\u4e00\u6761\u8def\u5f84\u4e0a\u5b57\u6bcd\u6570\u91cf\u7684\u5947\u5076\u6027\uff0c\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u7f16\u7801\u3002\n\n\u82e5\u662f\u80fd\u6784\u6210\u56de\u6587\u4e32\u3002\u90a3\u4e48x^y\u5fc5\u5b9a\u662f0\u6216\u80052\u7684\u5e42\u6b21\n\n\u7531\u4e8e\u662f\u5b50\u6811\u8be2\u95ee\u3002\u53ef\u4ee5\u8003\u8651\u6811dsu\u3002\n\n\u662f\u677f\u5b50\u9898\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ninline int read(){int x=0,f=1,ch=getchar(); while(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();} while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();} return x*f;}\ninline void write(int x){if (x<0) putchar('-'),x=-x; if (x>=10) write(x/10); putchar(x%10+'0');}\ninline void writeln(int x){write(x); puts(\"\");}\nconst int INF=1e9,N=5e5+5;\nstruct edge{\n\tint link,next,val;\n}e[N]; \nint tot,n,head[N];\ninline void add_edge(int u,int v,int w){\n\te[++tot]=(edge){v,head[u],w}; head[u]=tot;\n}\ninline void init(){\n\tn=read();\n\tfor (int i=2;i<=n;i++){\n\t\tint x=read(),c=getchar()-'a';\n\t\tadd_edge(x,i,c);\n\t}\n}\nint D[N],dep[N],heavy[N],sz[N];\nvoid Dfs(int u){\n\tsz[u]=1;\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tD[v]=D[u]^(1<<e[i].val); dep[v]=dep[u]+1; Dfs(v); sz[u]+=sz[v];\n\t\tif (!heavy[u]||sz[heavy[u]]<sz[v]){\n\t\t\theavy[u]=v;\n\t\t}\n\t}\n}\nint mx,col[1<<22],ans[N],now;\ninline void cal(int u){\n\tif (col[D[u]]) mx=max(mx,dep[u]+col[D[u]]-now);\n\tfor (int i=0;i<22;i++) if (col[(1<<i)^D[u]]) mx=max(mx,dep[u]+col[(1<<i)^D[u]]-now);\n}\ninline void up(int u){\n\tcol[D[u]]=max(dep[u],col[D[u]]);\n}\nvoid calc(int u){\n\tcal(u);\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tcalc(v);\n\t}\n}\nvoid upd(int u){\n\tup(u);\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tupd(v);\n\t}\n}\nvoid clear(int u){\n\tcol[D[u]]=0;\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tclear(v);\n\t}\n}\nvoid dfs(int u,bool keep){\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tif (v!=heavy[u]){\n\t\t\tdfs(v,0);\n\t\t}\n\t}\n\tif (heavy[u]) dfs(heavy[u],1);\n\tnow=dep[u]<<1;\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tmx=max(ans[v],mx);\n\t}\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tif (v!=heavy[u]){\n\t\t\tcalc(v);\n\t\t\tupd(v);\n\t\t}\n\t}\n\tcal(u); up(u); \n\tans[u]=mx;\n\tif (!keep){\n\t\tclear(u);\n\t\tmx=0;\n\t}\n}\ninline void solve(){\n\tDfs(1);\n\tdfs(1,1);\n\tfor (int i=1;i<=n;i++) write(ans[i]),putchar(' ');\n}\nint main(){\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1533627945,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF741D \u3010Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths\u3011"
    },
    {
        "content": "\u697c\u4e0a\u7684\u5927\u4f6c\u4eec\u8bb2\u7684\u90fd\u5f88\u597d \u4e0d\u8fc7\u6211\u89c9\u5f97\u53ef\u80fd\u50cf\u6211\u4e00\u6837\u7684\u521d\u5b66 dsu on tree \u7684\u4eba\u770b\u5b8c\u4e86\u4e0d\u4e00\u5b9a\u80fd\u7801\u51fa\u6765 \u6211\u6765\u66f4\u7ec6\u81f4\u8bb2\u4e00\u4e0b\u5177\u4f53\u5b9e\u73b0\u597d\u4e86 qwq\n\ndsu on tree \u7ecf\u5178\u9898 \u505a\u8d77\u6765\u611f\u89c9\u8fd8\u662f\u6709\u4e00\u5b9a\u96be\u5ea6\u7684\n\n\u5173\u4e8e\u5f02\u6216\u7684\u8def\u5f84\u5dee\u5206\u548c\u95ee\u9898\u8f6c\u5316\u697c\u4e0a\u5927\u4f6c\u4eec\u8bb2\u7684\u5f88\u6e05\u695a \u6211\u5c31\u4e0d\u8d58\u8ff0\u4e86 \u6211\u4eec\u76f8\u5f53\u4e8e\u6709\u4e00\u4e2a $2^{22}$ \u5927\u5c0f\u7684\u6876 \u800c\u7b54\u6848\u53ea\u6709 $23$ \u79cd\n\n\u8003\u8651\u95ee\u9898\u8f6c\u5316\u540e\u6211\u4eec\u8981\u7ef4\u62a4\u7684\u4e1c\u897f\n\n\u6211\u4eec\u8bb0 $w_x$ \u4e3a\u8282\u70b9 $x$ \u5230\u6839\u6240\u6709\u8fb9\u6743\u503c\u5f02\u6216\u548c \u800c\u6211\u4eec\u8981\u627e\u7684\u662f\u4e00\u5bf9\u70b9 $(x,y)$ \u6ee1\u8db3\uff1a\n\n1. $w_x$ Xor $w_y$ \u5c5e\u4e8e 23 \u79cd\u7b54\u6848\u7684\u4e00\u79cd  _\u5305\u62ec 0_ \n\n2. $dep_x+dep_y-2 \\cdot dep_{lca(x,y)}$ \u6700\u5927\n\n\u5982\u679c\u6211\u4eec\u6c42 $lca$ \u5c06\u4f1a\u591a\u4e00\u4e2a $\\log$ \u4e0d\u5212\u7b97\u4e14\u7801\u91cf\u5927\n\n\u8003\u8651 dsu on tree \u5b9e\u73b0\u7684\u8fc7\u7a0b \n\ndsu on tree \u5f88\u50cf\u5206\u6cbb \n\n1. \u5904\u7406\u8f7b\u5b50\u6811\u5185\u7684\u7b54\u6848 \u4e0d\u4fdd\u5b58\n\n2. \u5904\u7406\u91cd\u5b50\u6811\u7684\u7b54\u6848 \u4fdd\u5b58\n\n3. \u518d\u6b21\u5904\u7406\u8f7b\u5b50\u6811 \u5408\u5e76\u5230\u91cd\u5b50\u6811\u7b54\u6848 \u5f97\u5230\u66f4\u5927\u7684\u4e00\u9897\u5b50\u6811\n\n\u4e3a\u4ec0\u4e48\u4e0d\u4fdd\u5b58\u8f7b\u5b50\u6811\u7b54\u6848\u76f4\u63a5\u548c\u91cd\u5b50\u6811\u5408\u5e76\uff1f\n\n\u5408\u5e76\u4ee3\u4ef7\u662f\u6876\u5927\u5c0f \u4e0d\u5212\u7b97 \u4f18\u5316\u4e4b\u540e\u53ef\u80fd\u53eb\u7ebf\u6bb5\u6811\u5408\u5e76 \u7a7a\u95f4\u5927 \u540c\u65f6\u4e5f\u662f $n\\log n$\n\n\u56de\u5230\u8fd9\u9053\u9898\u4e0a \u6211\u4eec\u5b50\u6811\u7b54\u6848\u4e3a\u5355\u5728\u5b50\u6811\u5185\u7684\u6700\u957f\u8def\u5f84\n\n\u6309\u5206\u6cbb\u7684\u505a\u6cd5 \u5bf9\u4e8e\u70b9 $x$ \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u6240\u6709\u513f\u5b50\u7684\u5b50\u6811\u7b54\u6848 \u90a3\u4e48\u70b9\u5bf9\u5728\u540c\u5b50\u6811\u5185\u7684\u4e0d\u9700\u8981\u5904\u7406\u4e86 \u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5b83\u7684\u6700\u5927\u503c \u53ea\u9700\u8981\u8003\u8651\u8de8\u5b50\u6811\u7684\u70b9\u5bf9\n\n\u8de8\u5b50\u6811\u70b9\u5bf9\u662f\u8981\u8fc7 $x$ \u70b9\u7684 \u56e0\u6b64\u5929\u7136\u7684 $lca$ \u662f $x$ \u7ee7\u7eed\u8003\u8651\u989d dsu \u7684\u8fc7\u7a0b \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u5b8c\u4e86\u91cd\u513f\u5b50 \u9700\u8981\u5c06\u8f7b\u513f\u5b50\u5b50\u6811\u66b4\u529b\u63d2\u5165\u5904\u7406 \n\n\u6211\u4eec\u7684\u6876\u7ef4\u62a4 $2^{22}$ \u79cd\u72b6\u6001\u4e2d \u6bcf\u79cd\u72b6\u6001\u7684\u6df1\u5ea6\u6700\u5927\u503c \u66b4\u529b\u5904\u7406\u5b50\u6811\u65f6\u66f4\u65b0\u6876\u7684\u4fe1\u606f \u540c\u65f6\u66f4\u65b0 23 \u79cd\u7b54\u6848\u7684\u4fe1\u606f \u4f46\u6211\u4eec\u53d1\u73b0 \u6709\u53ef\u80fd\u66f4\u65b0\u540e **\u6709\u53ef\u80fd\u53d6\u5230\u540c\u4e00\u5b50\u6811\u7684\u4e24\u4e2a\u70b9 \u800c\u4ed6\u4eec $lca$ \u4e00\u5b9a\u4e0d\u4e3a $x$**\n\n\u8fd9\u5f88\u50cf dp \u72b6\u6001\u8f6c\u79fb\u65f6\u66f4\u65b0\u7684\u987a\u5e8f\n\n\u4e3a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 **\u6211\u4eec\u8bb0\u4e00\u4e2a\u7f13\u5b58\u6570\u7ec4 \u8bb0\u5f55\u8981\u66f4\u65b0\u7684\u6876\u548c\u66f4\u65b0\u7684\u503c \u5f53\u5904\u7406\u5b8c\u8fd9\u4e00\u5b50\u6811\u540e\u4e00\u8d77\u66f4\u65b0** \u90a3\u4e48\u6211\u4eec\u7684\u66f4\u65b0\u4fbf\u662f\u7528\u5176\u4ed6\u5b50\u6811\u53bb\u66f4\u65b0\u4e00\u4e2a\u5b50\u6811\u4e86\n\n\u66f4\u65b0\u7b54\u6848\u5373\u679a\u4e3e\u8f7b\u5b50\u6811\u6bcf\u4e2a\u70b9 \u6c42\u4e0e\u4ed6\u7684\u70b9\u6743  _\u5373\u4ed6\u5230\u6839\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u5f02\u6216\u548c_  \u5f02\u6216\u540e\u4e3a\u7b54\u6848\u7684 $23$ \u4e2a\u6570 \u4ece\u6876\u6570\u7ec4\u91cc\u5206\u522b\u627e\u5230\u8fd9\u4e9b\u6743\u503c\u6240\u5bf9\u5e94\u70b9\u7684\u6700\u6df1\u6df1\u5ea6 \u66f4\u65b0\u7b54\u6848\u5373\u53ef \n\n\u6700\u7ec8 \u6bcf\u4e2a\u70b9\u7684 $ans$ \u4e3a\u5176\u6240\u6709\u513f\u5b50\u7684 $ans$ \u548c $23$ \u4e2a\u6570\u8def\u5f84\u957f\u5ea6 \u7684\u6700\u5927\u503c\n\n\u5177\u4f53\u7ec6\u8282 \u6876\u6570\u7ec4\u6e05\u7a7a\u8981\u6e05\u4e3a\u7edd\u5bf9\u503c\u5f88\u5927\u7684\u8d1f\u6570 \u5426\u5219\u6709\u53ef\u80fd\u6839\u672c\u4e0d\u5b58\u5728\u5f02\u6216\u540e\u4e3a\u7b54\u6848\u7684\u503c \u4f46\u4e5f\u66f4\u65b0\u4e86\u7b54\u6848\u6570\u7ec4\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n;\nconst int N=5e5+3;\nconst int M=(1<<22)+3;\ninline int read()\n{\n\tint x=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')c=getchar();\n\twhile(c<='9'&&c>='0')\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x;\n}\nunordered_map<char,int>mp;\nstruct node\n{\n\tint to;\n\tint nxt;\n\tint w;\n}e[N<<1];\nint h[N],tot,w[N];\ninline void add(int x,int y,int w)\n{\n\te[++tot].to=y;\n\te[tot].nxt=h[x];\n\th[x]=tot;\n\te[tot].w=w;\n}\nint dep[N],son[N];\nint dfs1(int x,int fa)\n{\n\tint size=1;\n\tint maxson=-1;\n\tfor(int i=h[x];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to!=fa)\n\t\t{\n\t\t\tw[e[i].to]=w[x]^e[i].w;\n\t\t\tdep[e[i].to]=dep[x]+1;\n\t\t\tint subsize=dfs1(e[i].to,x);\n\t\t\tif(subsize>maxson)\n\t\t\t{\n\t\t\t\tmaxson=subsize;\n\t\t\t\tson[x]=e[i].to;\n\t\t\t}\n\t\t\tsize+=subsize;\n\t\t}\n\t}\n\treturn size;\n}\nint ans[N],max_dep[M],good[25],dis_good[25];\npair<int,int>change[N];\nint cntw;\nvoid dfs2(int x,int fa,int root,int realroot)\n{\n\tif(dep[x]>max_dep[w[x]])\n\t{\n\t\tchange[++cntw]={w[x],dep[x]};\n\t}\n\tfor(int i=0;i<=22;i++)\n\t{\n\t\tint wt=w[x]^good[i];\n\t\tdis_good[i]=max(dis_good[i],max_dep[wt]+dep[x]-2*dep[realroot]);\n\t}\n\tfor(int i=h[x];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to!=fa)dfs2(e[i].to,x,root,realroot);\n\t}\n}\nvoid clear(int x,int fa)\n{\n\tmax_dep[w[x]]=-100000;\n\tfor(int i=h[x];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to!=fa)clear(e[i].to,x);\n\t}\n}\nvoid dsu(int x,int fa)\n{\n\tif(!son[x])\n\t{\n\t\tfor(int i=0;i<=22;i++)\n\t\tif(good[i]==w[x])\n\t\t{\n\t\t\tdis_good[i]=1;\n\t\t\tbreak;\n\t\t}\n\t\tmax_dep[w[x]]=dep[x];\n\t\tans[x]=0;\n\t\treturn;\n\t}\n\tfor(int i=h[x];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to!=fa&&e[i].to!=son[x])\n\t\t{\n\t\t\tdsu(e[i].to,x);\n\t\t\tclear(e[i].to,x);\n\t\t\tans[x]=max(ans[x],ans[e[i].to]);\n\t\t\tfor(int i=0;i<=22;i++)dis_good[i]=0;\n\t\t}\n\t}\n\tdsu(son[x],x);\n\tfor(int i=h[x];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to!=fa&&e[i].to!=son[x])dfs2(e[i].to,x,e[i].to,x);\n\t\tfor(int j=1;j<=cntw;j++)\n\t\tif(max_dep[change[j].first]<change[j].second)\n\t\t{\n\t\t\tmax_dep[change[j].first]=change[j].second;\n\t\t}\n\t\tcntw=0;\n\t}\n\tfor(int i=0;i<=22;i++)\n\t{\n\t\tint wt=w[x]^good[i];\n\t\tdis_good[i]=max(dis_good[i],max_dep[wt]-dep[x]);\n\t}\n\tif(dep[x]>max_dep[w[x]])\n\t{\n\t\tmax_dep[w[x]]=dep[x];\n\t}\n\tans[x]=max(ans[x],ans[son[x]]);\n\tfor(int i=0;i<=22;i++)\n\tans[x]=max(ans[x],dis_good[i]);\n}\n\t\nint main()\n{\n\tn=read();\n\tfor(int i=0;i<=M-2;i++)max_dep[i]=-100000;\n\tgood[0]=0;\n\tgood[1]=mp['a']=1;\n\tfor(int i=1;i<22;i++)\n\tgood[i+1]=mp['a'+i]=(1<<i);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x=read();\n\t\tchar c=getchar();\n\t\twhile(c<'a'||c>'v')c=getchar();\n\t\tadd(x,i+1,mp[c]);\n\t\tadd(i+1,x,mp[c]);\n\t}\n\tdfs1(1,0);\n\tdsu(1,0);\n\tfor(int i=1;i<=n;i++)printf(\"%d \",ans[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1644479228,
        "uid": 223560,
        "name": "_HL_",
        "ccfLevel": 0,
        "title": "CF741D \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8 CF741D](https://codeforces.com/problemset/problem/741/D)\n\n\u9898\u76ee\u5927\u610f\uff1a\u4e00\u68f5\u6811\u7684\u8fb9\u4e0a\u6709\u4e00\u4e9b\u5b57\u6bcd\u3002\u5bf9\u4e8e\u6bcf\u9897\u5b50\u6811\uff0c\u8981\u627e\u5230\u8be5\u5b50\u6811\u4e2d\u4e00\u6761\u94fe\uff0c\u8fd9\u6761\u94fe\u6240\u7ecf\u8fc7\u7684\u8fb9\u4e0a\u5b57\u6bcd\u7ecf\u8fc7\u8c03\u6574\u540e\u53ef\u4ee5\u5f62\u6210\u56de\u6587\u4e32\u3002\n\n---\n\n\u7b97\u6cd5\uff1a\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 $+$ \u72b6\u538b\u4f18\u5316\u3002\n\n\u53ef\u4ee5\u5c06 $a$ \u8868\u793a\u6210 $2^0$\uff0c\n\n\u5c06 $b$ \u8868\u793a\u6210 $2^1$\uff0c\n\n\u5c06 $c$ \u8868\u793a\u6210 $2^2$\uff0c\n\n......\n\n\u53ef\u77e5\u8def\u5f84\u4e0a\u7684\u5b57\u6bcd\u5f02\u6216\u540e\u4e3a $0$ \u6216 $2^i$\uff0c\n\n\u624d\u662f\u5408\u6cd5\u7684\u5b57\u7b26\u4e32\uff0c\n\n\u7528 $cal_i$ \u8868\u793a\u5f53\u524d\u5728 $u$ \u7684\u5b50\u6811\u4e2d\u4ece\u6839\u5f02\u6216\u5230 $v$ \u8282\u70b9\u7684\u7ed3\u679c\u4e3a $i$ \u7684\u6700\u5927\u6df1\u5ea6\u3002\n\n\u6709 $3$ \u79cd\u66f4\u65b0\u7b54\u6848\u7684\u65b9\u6cd5\uff1a\n\n1.\u5b50\u8282\u70b9\u7684\u7b54\u6848\n\n2.\u4ece\u5f53\u524d $u$ \u8282\u70b9\u5230 $u$ \u7684\u5b50\u6811\u4e2d\n\n3.\u5b50\u6811\u4e2d\u7ecf\u8fc7 $u$ \u8282\u70b9\u7684\u8def\u5f84\n\n\u5bf9\u4e8e\u60c5\u51b5 $1$\uff0c\u7531\u513f\u5b50\u8282\u70b9\u66f4\u65b0\u7b54\u6848\uff0c\n\n\u5bf9\u4e8e\u60c5\u51b5 $2.\\ 3$\uff0c\u679a\u4e3e $u$ \u7684\u5b50\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u3002\n\n---\n\n### Code\n\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <bitset>\nusing namespace std;\nconst int M=(1<<22)+10,N=5e5+10;\nint n,tot;\nint fst[N],nxt[N],to[N],wei[N],fa[N],ex[N],dep[N];\nint cnt[N],hson[N],ans[N],cal[M],ord[N],dis[N],ed[N];\nchar op;\nvoid add_road(int ui,int vi,int wi)\n{\n\tto[++tot]=vi,wei[tot]=wi,\n\tnxt[tot]=fst[ui],fst[ui]=tot;\n}\nvoid dfs(int x)\n{\n\tcnt[x]=1,dep[x]=dep[fa[x]]+1;\n\tord[x]=++tot;\n\tdis[tot]=x;\n\tfor (int i=fst[x];i;i=nxt[i])\n\t{\n\t\tif (to[i]==fa[x]) continue;\n\t\tex[to[i]]=ex[x]^wei[i];\n\t\tdfs(to[i]);\n\t\tif (cnt[hson[x]]<cnt[to[i]]) hson[x]=to[i];\n\t\tcnt[x]+=cnt[to[i]];\n\t}\n\ted[x]=tot;\n}\nvoid calc(int x)\n{\n\tfor (int i=0;i<=(1<<21);i<<=1,i+=!i)\n\t\tif (cal[i^ex[x]])\n\t\t\tans[x]=max(ans[x],cal[i^ex[x]]-dep[x]);\n\tcal[ex[x]]=max(cal[ex[x]],dep[x]);\n\tfor (int i=fst[x];i;i=nxt[i])\n\t{\n\t\tint y=to[i];\n\t\tif (y==fa[x]||y==hson[x]) continue;\n\t\tfor (int j=ord[y];j<=ed[y];j++)\n\t\t{\n\t\t\tint z=dis[j];\n\t\t\tfor (int q=0;q<=(1<<21);q<<=1,q+=!q)\n\t\t\t\tif (cal[q^ex[z]])\n\t\t\t\t\tans[x]=max(ans[x],cal[q^ex[z]]+dep[z]-2*dep[x]);\n\t\t}\n\t\tfor (int j=ord[y];j<=ed[y];j++) cal[ex[dis[j]]]=max(cal[ex[dis[j]]],dep[dis[j]]);\n\t}\n}\nvoid dfs(int x,bool flag)\n{\n\tfor (int i=fst[x];i;i=nxt[i])\n\t{\n\t\tif (to[i]==fa[x]||to[i]==hson[x]) continue;\n\t\tdfs(to[i],1),ans[x]=max(ans[x],ans[to[i]]);\n\t}\n\tif (hson[x]) dfs(hson[x],0),ans[x]=max(ans[x],ans[hson[x]]);\n\tcalc(x);\n\tif (flag)\n\t\tfor (int i=ord[x];i<=ed[x];i++) cal[ex[dis[i]]]=0;\n}\nint main()\n{\n\tcin>>n;\n\tfor (int i=2;i<=n;i++)\n\t{\n\t\tscanf(\"%d %c\",&fa[i],&op);\n\t\tadd_road(fa[i],i,1<<(op-'a'));\n\t}\n\ttot=0,dfs(1);\n\tdfs(1,0);\n\tfor (int i=1;i<=n;i++) printf(\"%d \",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1640611441,
        "uid": 318254,
        "name": "billf",
        "ccfLevel": 0,
        "title": "CF-741D \u9898\u89e3"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](http://zrzring.cn/index.php/archives/247)\n\n\u9996\u5148\u8003\u8651\u5982\u4f55\u8868\u793aDokhtar-kosh string\uff0c\u56e0\u4e3a\u4e00\u4e2a\u56de\u6587\u4e32\u6700\u591a\u6709\u4e00\u4e2a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u7b26\uff0c\u4f7f\u7528hash\u601d\u60f3\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u79cd\u5b57\u6bcd\u8868\u793a\u6210\u4ec5\u4e00\u4f4d\u4e0a\u662f1\u4e14\u4e92\u4e0d\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6743\u503c\u5b9a\u4e49\u4e3a\u8be5\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u6bcd\u8868\u793a\u7684\u6570\u7684\u5f02\u6216\u548c\uff0c\u82e5\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6743\u503c\u5728\u4e8c\u8fdb\u5236\u4e0b\u53ea\u6709\u4e00\u4e2a1\u5219\u8be5\u5b57\u7b26\u4e32\u4e3aDokhtar-kosh string\n\n\u8bb0str(x,y)\u8868\u793ax\u5230y\u7684\u94fe\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u7684\u6743\u503c\uff0c\u8003\u8651\u6811\u4e0a\u5dee\u5206\uff0cstr(u,v)\u6ee1\u8db3\u4e0a\u8ff0\u6027\u8d28\uff0c\u7b49\u4ef7\u4e8estr(1,u)\u5f02\u6216str(1,v)\u200b\u6ee1\u8db3\u4e0a\u8ff0\u6027\u8d28\uff0c\u4e8e\u662f\u9884\u5904\u7406\u51fa\u6240\u6709\u7684str(1,i)\uff0c\u6bcf\u6b21\u5728\u5b50\u6811\u4e2d\u5339\u914dstr(1,j)\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u662f\u6240\u6709\u5b50\u6811\u5927\u5c0f\u548c\u4e3a$O(n^2)$\uff0c\u7528dsu on tree\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u904d\u5386\u6240\u6709\u8f7b\u513f\u5b50\u7684\u5b50\u6811\uff0c\u5373\u53ef\u4f18\u5316\u5230$O(n log n)$\n\n\u6ce8\u610fmx\u6570\u7ec4\u8981\u521d\u59cb\u5316\u4e3a\u65e0\u7a77\u5c0f\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <queue>\nusing namespace std;\nvoid file() {\n    freopen(\"std.in\", \"r\", stdin);\n    freopen(\"wa.out\", \"w\", stdout);\n}\nconst int N = 1e6 + 10, V = 2e7 + 10, inf = 1e9;\ninline int read() {\n    bool sym = 0; int res = 0; char ch = getchar();\n    while (!isdigit(ch)) sym |= (ch == '-'), ch = getchar();\n    while (isdigit(ch)) res = (res << 3) + (res << 1) + (ch ^ 48), ch = getchar();\n    return sym ? -res : res;\n}\nstruct EDGE {\n    int u, v, nxt, dis;\n} edge[N];\nint n, m, head[N], cnt, siz[N], son[N], po[N], L[N], R[N], dis[N], ans[N], mx[V], dep[N];\nchar ch[N];\nvoid add(int u, int v, int t) {edge[++cnt] = (EDGE){u, v, head[u], t}; head[u] = cnt;}\nvoid dfs1(int u) {\n    siz[u] = 1; L[u] = ++cnt; po[cnt] = u;\n    for (int e = head[u]; e; e = edge[e].nxt) {\n        int v = edge[e].v; dis[v] = dis[u] ^ edge[e].dis; dep[v] = dep[u] + 1;\n        dfs1(v); siz[u] += siz[v]; if (siz[v] > siz[son[u]]) son[u] = v;\n    }\n    R[u] = cnt;\n}\nvoid dfs2(int u, bool keep) {\n    for (int e = head[u]; e; e = edge[e].nxt) {\n        int v = edge[e].v; if (v == son[u]) continue;\n        dfs2(v, 0); ans[u] = max(ans[u], ans[v]);\n    }\n    if (son[u]) dfs2(son[u], 1), ans[u] = max(ans[u], ans[son[u]]);\n    ans[u] = max(ans[u], mx[dis[u]] - dep[u]);\n    for (int i = 0; i <= 21; i++) ans[u] = max(ans[u], mx[dis[u] ^ 1 << i] - dep[u]);\n    mx[dis[u]] = max(mx[dis[u]], dep[u]);\n    for (int e = head[u]; e; e = edge[e].nxt) {\n        int v = edge[e].v; if (v == son[u]) continue;\n        for (int i = L[v], x = po[i]; i <= R[v]; i++, x = po[i]) {\n            ans[u] = max(ans[u], mx[dis[x]] + dep[x] - 2 * dep[u]);\n            for (int i = 0; i <= 21; i++) ans[u] = max(ans[u], mx[dis[x] ^ 1 << i] + dep[x] - 2 * dep[u]);\n        }\n        for (int i = L[v], x = po[i]; i <= R[v]; i++, x = po[i]) {\n            mx[dis[x]] = max(mx[dis[x]], dep[x]);\n        }\n    }\n    if (!keep) {for (int i = L[u], x = po[i]; i <= R[u]; i++, x = po[i]) mx[dis[x]] = -inf;}\n}\nint main() {\n    n = read(); memset(mx, 128, sizeof(mx));\n    for (int v = 2; v <= n; v++) {\n        int u = read(); char t = getchar(); add(u, v, 1ll << t - 'a');\n    }\n    dep[1] = 1; dfs1(1); dfs2(1, 1); for (int i = 1; i <= n; i++) printf(\"%d \", ans[i]);\n    return 0;\n}\n```\n\n",
        "postTime": 1599101181,
        "uid": 28392,
        "name": "zrzring",
        "ccfLevel": 5,
        "title": "CF741D \u3010Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths\u3011"
    },
    {
        "content": "\u6211\u4eec\u53ef\u4ee5\u5c06\u5b50\u6811\u4e2d\u7684 Dokhtar-kosh \u8def\u5f84\u5206\u4e3a\u4e24\u79cd\uff1a\u8fc7\u5b50\u6811\u7684\u6839\u7684\u548c\u4e0d\u8fc7\u5b50\u6811\u7684\u6839\u7684\u3002\n\n\u6700\u957f\u7684\u4e0d\u8fc7\u6839\u7684\u8def\u5f84\u53ef\u4ee5\u53d6\u6240\u6709\u5b50\u6811\u7684\u7b54\u6848\u7684\u6700\u5927\u503c\u3002\n\n\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u8fc7\u6839\u8def\u5f84\uff1a\n\n\u6211\u4eec\u5c06 $c_i$ \u4f7f\u7528 $0$ \u81f3 $21$ \u4e2d\u7684\u4e00\u4e2a\u6570\u5b57\u8868\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u6761\u8def\u5f84\u8f6c\u6362\u4e3a\u4e00\u4e2a $22$ \u4f4d\u7684\u4e8c\u8fdb\u5236\u6570 $s$\uff0c\u5176\u4e2d\u7b2c $i$ \u4f4d\u4e3a $1$ \u8868\u793a\u8fd9\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u5426\u5219\u8868\u793a\u51fa\u73b0\u4e86\u5076\u6570\u6b21\u3002\u53ef\u4ee5\u53d1\u73b0\u7531 $s$ \u548c $t$ \u62fc\u63a5\u800c\u6210\u7684\u8def\u5f84\u4e3a $s \\oplus t$\u3002\n\n\u6240\u4ee5 $s_{u,v} = s_{u,\\operatorname{lca}(u,v)} \\oplus s_{v,\\operatorname{lca}(u,v)} = s_{u,\\operatorname{lca}(u,v)} \\oplus s_{\\operatorname{lca}(u,v),root} \\oplus s_{v,\\operatorname{lca}(u,v)} \\oplus s_{\\operatorname{lca}(u,v),root} = s_{u,root} \\oplus s_{v,root}$\u3002\n\n\u53ef\u4ee5\u53d1\u73b0 $s$ \u4e3a Dokhtar-kosh \u8def\u5f84\u65f6 $\\operatorname{popcount}(s) \\le 1$\uff0c\u6211\u4eec\u5148\u9884\u5904\u7406\u51fa $sum_u=s_{u,root}$\uff0c\u5f00\u4e00\u4e2a\u6876\u7edf\u8ba1\u6bcf\u4e00\u79cd\u51fa\u73b0\u7684\u5230\u6839\u7684\u8def\u5f84\u7684\u6700\u957f\u957f\u5ea6\uff0c\u7edf\u8ba1 $s = 0$ \u65f6\u76f4\u63a5\u5728\u6876\u91cc\u627e $sum_u$\uff0c\u7edf\u8ba1 $\\operatorname{popcount}(x) = 1$ \u65f6\u679a\u4e3e\u4e0d\u540c\u7684\u4f4d\u5373\u53ef\u3002\n\n\u53ef\u4ee5\u4f7f\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u5c06\u590d\u6742\u5ea6\u4f18\u5316\u5230 $O(n \\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ull = unsigned long long;\nusing pii = pair<int, int>;\nconst int maxn = 5e5+5;\nconst int maxb = 5e6+5;\nint n,p,a[maxn];\nchar c;\nvector<int> G[maxn];\nint sum[maxn],dep[maxn],sz[maxn],hs[maxn];\nint hgt[maxb],ans[maxn];\nvoid dfs1(int u){\n    sz[u]=1;\n    for(auto v:G[u]){\n        dep[v]=dep[u]+1;\n        sum[v]=sum[u]^(1<<a[v]); // \u9884\u5904\u7406\u5230\u6839\u7684\u8def\u5f84\n        dfs1(v);\n        sz[u]+=sz[v];\n        if(sz[v]>sz[hs[u]])hs[u]=v;\n    }\n}\nvoid count_tree(int u,int fr){\n    if(hgt[sum[u]])ans[fr]=max(ans[fr],hgt[sum[u]]+dep[u]-2*dep[fr]); // s=0\n    for(int i=0;i<22;++i)if(hgt[sum[u]^(1<<i)])ans[fr]=max(ans[fr],hgt[sum[u]^(1<<i)]+dep[u]-2*dep[fr]); // popcount(s)=1\n    for(auto v:G[u])count_tree(v,fr);\n}\nvoid add_tree(int u){\n    hgt[sum[u]]=max(hgt[sum[u]],dep[u]);\n    for(auto v:G[u])add_tree(v);\n}\nvoid del_tree(int u){\n    hgt[sum[u]]=0;\n    for(auto v:G[u])del_tree(v);\n}\nvoid dfs2(int u,bool keep){\n    for(auto v:G[u])\n        if(v!=hs[u]){\n            dfs2(v,0);\n            ans[u]=max(ans[u],ans[v]);\n        }\n    if(hs[u]){\n        dfs2(hs[u],1);\n        ans[u]=max(ans[u],ans[hs[u]]);\n    }\n    // \u5355\u72ec\u7edf\u8ba1\u4e00\u7aef\u4e3a\u6839\u4e00\u7aef\u5728\u91cd\u513f\u5b50\u5b50\u6811\u4e2d\u7684\u8def\u5f84\n    if(hgt[sum[u]])ans[u]=max(ans[u],hgt[sum[u]]+dep[u]-2*dep[u]);\n    for(int i=0;i<22;++i)if(hgt[sum[u]^(1<<i)])ans[u]=max(ans[u],hgt[sum[u]^(1<<i)]-dep[u]);\n    // \u6839\u4e5f\u8981\u653e\u8fdb\u6876\n    hgt[sum[u]]=max(hgt[sum[u]],dep[u]);\n    for(auto v:G[u])\n        if(v!=hs[u]){\n            // \u5148\u7edf\u8ba1\u518d\u653e\u8fdb\u6876\u4fdd\u8bc1\u4e0d\u4f1a\u7edf\u8ba1\u5230\u4e00\u4e2a\u5b50\u6811\u5185\n            count_tree(v,u);\n            add_tree(v);\n        }\n    if(!keep)del_tree(u);\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    cin>>n;\n    for(int i=2;i<=n;++i){\n        cin>>p>>c;\n        G[p].push_back(i);\n        a[i]=c-'a';\n    }\n    dep[1]=1;\n    dfs1(1);\n    dfs2(1,1);\n    for(int i=1;i<=n;++i)cout<<ans[i]<<' ';\n    return 0;\n}\n```\n",
        "postTime": 1682840732,
        "uid": 460457,
        "name": "KnownError_",
        "ccfLevel": 4,
        "title": "CF741D Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths \u9898\u89e3"
    },
    {
        "content": "[Luogu CF741D Arpa's letter-marked tree and Mehrdad's Dokhtar-kosh paths](https://www.luogu.com.cn/problem/CF741D)\n\n\u7b2c\u4e00\u4e2a\u96be\u9898\u5728\u4e8e\u5982\u4f55\u7b80\u5355\u5730\u8868\u793a\u8def\u5f84\uff1a\u8def\u5f84\u4e0a\u7684\u5b57\u7b26\u7ecf\u8fc7\u91cd\u65b0\u6392\u5e8f\u540e\u53ef\u4ee5\u53d8\u6210\u4e00\u4e2a\u56de\u6587\u4e32 $\\Leftrightarrow$ \u8def\u5f84\u4e0a\u81f3\u591a\u53ea\u6709 $1$ \u79cd\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\u3002\u4e8e\u662f\u6211\u4eec\u53ea\u5173\u5fc3\u8def\u5f84\u4e0a\u6bcf\u79cd\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u7684\u5947\u5076\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a $22$ \u4f4d\u7684\u4e8c\u8fdb\u5236\u4e32\u8868\u793a\u4e00\u6761\u8def\u5f84\u7684\u72b6\u6001\uff0c\u7b2c $i$ \u4f4d\u662f $0/1$ \u8868\u793a\u5b57\u7b26 `char('a'+i)` \u51fa\u73b0\u6b21\u6570\u4e3a\u5076/\u5947\u6570\u3002\u6dfb\u52a0/\u51cf\u5c11\u4e00\u4e2a\u5b57\u7b26\u4f7f\u7528\u6a21 $2$ \u610f\u4e49\u4e0b\u7684\u52a0/\u51cf\u6cd5\u2014\u2014$\\operatorname{xor}$ \u8fd0\u7b97\u3002\u5224\u65ad\u4e00\u6761\u8def\u5f84\u662f\u5426\u662f Dokhtar-kosh \u8def\u5f84\u53ea\u9700\u5224\u65ad\u5b83\u7684\u72b6\u6001 $i$ \u662f\u5426\u6ee1\u8db3 $\\operatorname{popcount}(i)\u22641$\uff0c\u6362\u8a00\u4e4b\uff0c$i$ \u662f\u5426\u7b49\u4e8e $0/2^k,(k\\in[0,21])$\u3002\n\n\u8bbe\u4e00\u68f5\u5b50\u6811\u7684\u6839\u8282\u70b9\u662f $u$\u3002\u5b50\u6811 $u$ \u5185\u7684\u7b80\u5355\u8def\u5f84\u5206\u4e3a $3$ \u79cd\uff1a\u4e0d\u7ecf\u8fc7\u70b9 $u$ \u7684\u8def\u5f84\u3001\u7ecf\u8fc7\u70b9 $u$ \u4e14\u4e24\u7aef\u90fd\u4e0d\u662f\u70b9 $u$ \u7684\u8def\u5f84\u3001\u7ecf\u8fc7\u70b9 $u$ \u4e14\u4e00\u7aef\u662f\u70b9 $u$ \u7684\u8def\u5f84\u3002\u7b2c $1$ \u79cd\u53ef\u4ee5\u5f80\u4e0b\u9012\u5f52\u5904\u7406\uff0c\u7b2c $3$ \u79cd\u662f\u7b2c $2$ \u79cd\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u56e0\u6b64\u6211\u4eec\u73b0\u5728\u6765\u8ba8\u8bba\u5982\u4f55\u5904\u7406\u7b2c $2$ \u79cd\u8def\u5f84\u3002\n\n\u4e00\u4e2a $O(N^3)$ \u7684\u66b4\u529b\u65b9\u6cd5\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u68f5\u5b50\u6811\u7684\u6839\u8282\u70b9 $u$ \u90fd\u6c42\u51fa\u5b50\u6811 $u$ \u5185\u6240\u6709\u4e00\u7aef\u662f\u70b9 $u$ \u7684\u8def\u5f84\uff0c\u7136\u540e\u628a\u6240\u6c42\u5f97\u7684\u8def\u5f84\u4e24\u4e24\u914d\u5bf9\u3002\n\n\u4e00\u4e2a $O(N^2)$ \u7684\u4f18\u5316\u65b9\u6cd5\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 $u$ \u90fd\u5f00\u4e00\u4e2a\u6876 $f_{u,i}$\uff1a\u5f53\u524d\u4ee5\u70b9 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u72b6\u6001\u662f $i$ \u7684\u8def\u5f84\u7684\u957f\u5ea6\u6700\u5927\u503c\uff08\u56e0\u4e3a\u7b54\u6848\u8981\u6c42\u6700\u957f\u7684 Dokhtar-kosh \u8def\u5f84\u7684\u957f\u5ea6\u3002\u82e5\u4e0d\u5b58\u5728\u72b6\u6001\u662f $i$ \u7684\u8def\u5f84\uff0c\u5219 $f_{u,i}=0$\u3002\uff09\u3002\u501f\u52a9\u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28 $a \\operatorname{xor} b=c\\Leftrightarrow a=b \\operatorname{xor} c$\uff0c\u5f53\u5373\u5c06\u5411\u70b9 $u$ \u5408\u5e76\u4e00\u6761\u72b6\u6001\u4e3a $j$ \u7684\u65b0\u8def\u5f84\u65f6\uff0c\u8ba9\u8def\u5f84 $j$ \u4e0e\u6876\u91cc\u72b6\u6001\u4e3a $j \\operatorname{xor} 0/j \\operatorname{xor} 2^k,(k\\in [0,21])$ \u7684\u8def\u5f84\u914d\u5bf9\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u4f7f\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7ee7\u7eed\u4f18\u5316\u3002\n\n\u4f46\u662f\u73b0\u5728\u9762\u4e34\u7740\u53c8\u4e00\u4e2a\u96be\u9898\uff1a$u$ \u600e\u4e48\u5feb\u901f\u7ee7\u627f\u5176\u91cd\u513f\u5b50 $son_u$ \u7684\u6876\u5462\uff1f\u5982\u679c\u628a $son_u$ \u7684\u6876\u91cc\u7684\u6240\u6709\u8def\u5f84\u7684\u72b6\u6001\u5f02\u6216\u4e0a $w(u,son_u)$\uff0c\u957f\u5ea6\u52a0\u4e0a $1$\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u4e0d\u80fd\u4fdd\u8bc1\u3002\u901a\u8fc7\u65b0\u5efa\u53d8\u91cf\u7ef4\u62a4\u6876\u91cc\u5143\u7d20\u7684\u503c\u7684\u504f\u79fb\u91cf\uff0c\u5c31\u53ef\u4ee5 $O(1)$ \u7ee7\u627f\u91cd\u513f\u5b50\u7684\u6876\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(22\\times N\\log N)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define x first\n#define y second\ntypedef pair<int,int> PII;\nconst int N=5e5+10,M=(1<<22)+10,INF=0x3f3f3f3f;\nint n;\nint ans[N];\nint h[N],e[N],w[N],ne[N],idx;\nint siz[N],son[N],wson[N],f[M]; //wson[u]\uff1a\u8fb9(u,son[u])\u7684\u6743\u503c\uff1bf[i]\uff1a\u6876\uff0c\u72b6\u6001\u662fi\u7684\u8def\u5f84\u7684\u957f\u5ea6\u6700\u5927\u503c\nvector<PII> path;   //\u7edf\u8ba1\u8f7b\u513f\u5b50\u7684\u8def\u5f84{\u72b6\u6001,\u957f\u5ea6}\nvector<int> cle;    //\u7edf\u8ba1\u5728\u4ee5\u5f53\u524d\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u4fee\u6539\u4e86\u54ea\u4e9b\u6876\u7684\u4fe1\u606f\uff0c\u8f85\u52a9\u4f5c\u4e3a\u8f7b\u513f\u5b50\u56de\u6eaf\u65f6\u6e05\u7a7a\u6876\u7684\u64cd\u4f5c\n\nvoid add(int u,int v,int wor)\n{\n    e[++idx]=v,w[idx]=wor,ne[idx]=h[u],h[u]=idx;\n    return ;\n}\n\n//\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u91cd\u513f\u5b50\uff0c\u4e3a\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u4f5c\u51c6\u5907\nvoid dfs1(int u,int fa)\n{\n    siz[u]=1;\n    for(int i=h[u];i!=0;i=ne[i])\n    {\n        int v=e[i];\n        if(v==fa) continue;\n        dfs1(v,u);\n        siz[u]+=siz[v];\n        if(siz[son[u]]<siz[v]) son[u]=v,wson[u]=w[i];\n    }\n    return ;\n}\n\n//\u66b4\u529b\u904d\u5386\u8f7b\u513f\u5b50\nvoid dfs3(int u,int fa,int dis,int dep)\n{\n    path.push_back({dis,dep});\n    for(int i=h[u];i!=0;i=ne[i])\n    {\n        int v=e[i];\n        if(v==fa) continue;\n        dfs3(v,u,dis^w[i],dep+1);\n    }\n    return ;\n}\n\n//\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\nPII dfs2(int u,int fa)\n{\n    if(!son[u]) return {0,0};\n    for(int i=h[u];i!=0;i=ne[i])\n    {\n        int v=e[i];\n        if(v==fa || v==son[u]) continue;\n        dfs2(v,u);\n        ans[u]=max(ans[u],ans[v]);\n    }\n    PII res=dfs2(son[u],u); //\u504f\u79fb\u91cf\n    ans[u]=max(ans[u],ans[son[u]]); //\u4e0d\u7ecf\u8fc7\u70b9u\u7684\u8def\u5f84\uff0c\u5f80\u4e0b\u9012\u5f52\u5904\u7406\n    f[res.x]=max(f[res.x],-res.y);\n    cle.push_back(res.x);\n    res.x^=wson[u];\n    res.y++;\n    for(int i=h[u];i!=0;i=ne[i])\n    {\n        int v=e[i];\n        if(v==fa || v==son[u]) continue;\n        path.clear();\n        dfs3(v,u,w[i],1);\n        for(auto it : path) //\u7ecf\u8fc7\u70b9u\u4e14\u4e24\u7aef\u90fd\u4e0d\u662f\u70b9u\u7684\u8def\u5f84\n        {\n            ans[u]=max(ans[u],f[(0^it.x)^res.x]+res.y+it.y);    //\u501f\u52a9\u4e86\u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28a xor b=c <-> a=b xor c\n            for(int j=0;j<22;j++) ans[u]=max(ans[u],f[((1<<j)^it.x)^res.x]+res.y+it.y);\n        }\n        for(auto it : path)\n        {\n            f[it.x^res.x]=max(f[it.x^res.x],it.y-res.y);\n            cle.push_back(it.x^res.x);\n        }\n    }\n    ans[u]=max(ans[u],f[0^res.x]+res.y);    //\u7ecf\u8fc7\u70b9u\u4e14\u4e00\u7aef\u662f\u70b9u\u7684\u8def\u5f84\n    for(int i=0;i<22;i++) ans[u]=max(ans[u],f[(1<<i)^res.x]+res.y);\n    if(son[fa]!=u)//\u4f5c\u4e3a\u8f7b\u513f\u5b50\u56de\u6eaf\u65f6\u8981\u6e05\u7a7a\u6876\n    {\n        for(auto it : cle) f[it]=-INF;\n        cle.clear();\n    }\n    return {res.x,res.y};\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=2;i<=n;i++)\n    {\n        int p;\n        char c;\n        scanf(\"%d %c\",&p,&c);\n        add(p,i,1<<(c-'a'));\n    }\n    dfs1(1,0);\n    memset(f,-0x3f,sizeof f);\n    dfs2(1,0);\n    for(int i=1;i<=n;i++) printf(\"%d \",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1676713670,
        "uid": 557756,
        "name": "Brilliance_Z",
        "ccfLevel": 0,
        "title": "\u9898\u89e3  CF741D"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5b57\u6bcd\uff0c\u6c42\u6bcf\u4e2a\u70b9\u5b50\u6811\u5185\u5b57\u6bcd\u91cd\u65b0\u6392\u5217\u53ef\u4ee5\u5f62\u6210\u56de\u6587\u5e8f\u5217\u7684\u6700\u957f\u8def\u5f84\u3002\n## \u9898\u89e3\n\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u6765\u5199\u3002\n\n\u53ef\u4ee5\u5148\u8003\u8651\u4e00\u4e0b\u5408\u6cd5\u7684\u60c5\u51b5\u600e\u4e48\u6765\u68c0\u9a8c\u3002\u7531\u4e8e\u53ea\u6709 22 \u4e2a\u5b57\u6bcd\uff0c\u6240\u4ee5\u5b8c\u5168\u53ef\u4ee5\u72b6\u6001\u538b\u7f29\uff0c\u8868\u793a\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u4e86\u5947\u6570\u6216\u8005\u5076\u6570\u6b21\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u7684\u72b6\u6001\uff0c\u4e24\u4e2a\u72b6\u6001\u53ea\u8981\u5f02\u6216\u8d77\u6765\u53ea\u5269\u4e0b\u4e00\u4e2a\u5b57\u6bcd\u6216\u8005\u6ca1\u6709\u5c31\u662f\u5408\u6cd5\u7684\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u7b54\u6848\u3002\u4e00\u4e2a\u70b9\u5b50\u6811\u5185\u7684\u7b54\u6848\u6709\u4e24\u7c7b\uff0c\u4e00\u79cd\u8fc7\u8fd9\u4e2a\u70b9\uff0c\u4e00\u79cd\u4e0d\u8fc7\u3002\u5176\u5b9e\u53ea\u8981\u8003\u8651\u8fc7\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\u5c31\u53ef\u4ee5\u4e86\uff0c\u7b2c\u4e8c\u79cd\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f\u513f\u5b50\u7684\u7b54\u6848\u3002\u73b0\u5728\u7684\u95ee\u9898\u5728\u4e8e\u600e\u6837\u8ba1\u7b97\u957f\u5ea6\u3002\n\n\u5148\u5f00\u4e00\u4e9b\u6876\uff0c\u8bb0\u5f55\u6bcf\u79cd\u60c5\u51b5\u4e0b\u5bf9\u5e94\u7684\u8282\u70b9\u6700\u6df1\u7684\u6df1\u5ea6\uff0c\u628a\u8fd9\u4e2a\u70b9\u5b50\u6811\u5185\u6240\u6709\u70b9\u5230\u6839\u7684\u8def\u5f84\u72b6\u6001\u653e\u8fdb\u6876\uff0c\u6bcf\u6761\u8def\u5f84\u76f4\u63a5\u627e\u5bf9\u5e94\u7684\u7ed3\u679c\uff0c\u8fd9\u4e2a\u7ed3\u679c\u662f\u5f53\u524d\u7684\u6700\u5927\u503c\u3002\u8fd9\u4e2a\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u6765\u5199\u4e0d\u96be\u3002\n\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u8fd9\u6837\u8ba1\u7b97\u6709\u53ef\u80fd\u5b83\u7684 LCA \u4e0d\u662f\u6307\u5b9a\u7684\u8282\u70b9\uff0c\u7ed3\u5408\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u5199\u6cd5\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\u5728\u904d\u5386\u8f7b\u513f\u5b50\u6765\u66f4\u65b0\u5f53\u524d\u70b9\u65f6\uff0c\u628a\u8fd9\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u5185\u8282\u70b9\u62ff\u53bb\u66f4\u65b0\u7b54\u6848\uff0c\u4f46\u662f\u4e0d\u7acb\u5373\u66f4\u65b0\u5bf9\u5e94\u72b6\u6001\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u7528\u4e00\u4e2a vector \u5b58\u4e0b\u6765\uff0c\u904d\u5386\u5b8c\u8fd9\u4e2a\u8f7b\u513f\u5b50\u518d\u66f4\u65b0\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\u7b54\u6848\u66f4\u65b0\u90fd\u662f\u8fc7\u6307\u5b9a\u70b9\u7684\u3002\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5e5+5;\nint n,ver[N*2],ne[N*2],head[N],val[N*2],tot;\nint dep[N],d[N],siz[N],son[N],ans[24],ma,res[N];\nint t[1<<23];\nvector<pair<int,int> > v;\nvoid add(int x,int y,int z)\n{\n\tver[++tot]=y;ne[tot]=head[x];head[x]=tot;val[tot]=z;\n}\nvoid dfs(int x)\n{\n\tsiz[x]=1;\n\tfor(int i=head[x];i;i=ne[i])\n\t{\n\t\tint y=ver[i];\n\t\tdep[y]=dep[x]^(1<<val[i]);\n\t\td[y]=d[x]+1;dfs(y);\n\t\tsiz[x]+=siz[y];\n\t\tif(siz[y]>siz[son[x]]) son[x]=y;\n\t}\n}\nvoid clear(int x)//\u6e05\u7a7a\n{\n\tt[dep[x]]=0;\n\tfor(int i=head[x];i;i=ne[i])\n\t{\n\t\tint y=ver[i];\n\t\tclear(y);\n\t}\n}\nvoid dfs2(int x,int f)\n{\n\tif(t[dep[x]]) ma=max(ma,d[x]+t[dep[x]]-2*d[f]);\n\tfor(int i=0;i<22;i++)\n\t\tif(t[dep[x]^(1<<i)]) ma=max(ma,d[x]+t[dep[x]^(1<<i)]-2*d[f]);\n\tv.push_back(make_pair(dep[x],d[x]));\n\tfor(int i=head[x];i;i=ne[i])\n\t{\n\t\tint y=ver[i];\n\t\tdfs2(y,f);\n\t}\n}\nvoid dfs1(int x)\n{\n\tfor(int i=head[x];i;i=ne[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(y==son[x]) continue;\n\t\tdfs1(y);clear(y);ma=0;\n\t\tres[x]=max(res[x],res[y]);\n\t}\n\tif(son[x]) dfs1(son[x]),res[x]=max(res[x],res[son[x]]);\n\tif(t[dep[x]])\n\t\tma=max(ma,t[dep[x]]-d[x]);\n\tfor(int i=0;i<22;i++)\n\t\tif(t[dep[x]^(1<<i)])\n\t\t\tma=max(ma,t[dep[x]^(1<<i)]-d[x]);\n\tt[dep[x]]=max(t[dep[x]],d[x]);\n\tfor(int i=head[x];i;i=ne[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(y==son[x]) continue;\n\t\tdfs2(y,x);\n\t\tfor(auto j : v) t[j.first]=max(t[j.first],j.second);//\u5ef6\u8fdf\u66f4\u65b0\n\t\tv.clear();\n\t}\n\tres[x]=max(res[x],ma);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint x;char c;\n\t\tscanf(\"%d %c\",&x,&c);\n\t\tadd(x,i,c-'a');\n\t}\n\td[1]=1;dfs(1);\n\tdfs1(1);\n\tfor(int i=1;i<=n;i++) printf(\"%d \",res[i]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1670142971,
        "uid": 300710,
        "name": "xuyuansu",
        "ccfLevel": 0,
        "title": "CF741D Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths"
    },
    {
        "content": "[\u6d1b\u8c37\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF741D)\n\n[CF\u9898\u76ee\u4f20\u9001\u95e8](https://codeforces.com/problemset/problem/741/D)\n\n\u8fd9\u662f\u4e00\u9053\u5f88\u597d\u7684\u6a21\u677f\u9898\u3002\n\n\u4f60\u5148\u8981\u5b66\u4f1a DSU on Tree\uff0c[\u8fd9\u662f CodeForces \u4e0a\u4e00\u7bc7\u8bb2 DSU on Tree \u7684\u535a\u6587](https://codeforces.com/blog/entry/44351)\u3002\n\n\u5927\u5bb6\u90fd\u77e5\u9053 DSU on Tree \u53ef\u4ee5\u7528\u6765\u5904\u7406\u5b50\u6811\u4fe1\u606f\uff0c\u53ef\u662f\u6709\u65f6\u5019\u5b83\u4e5f\u53ef\u4ee5\u7528\u6765\u5904\u7406\u94fe\u4e0a\u4fe1\u606f\u3002\n\nIOI 2011\u91cc\u6709\u4e00\u9053\u540d\u53eb Race \u7684\u8457\u540d\u7684\u70b9\u5206\u6cbb\u6a21\u677f\u9898\uff0c\u8981\u6c42\u7edf\u8ba1\u94fe\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u7528 DSU on Tree \u6765\u505a\uff0c\u9898\u76ee\u94fe\u63a5\uff1a[$Link$](https://www.luogu.com.cn/problem/P4149)\u3002\n\n\u57fa\u672c\u601d\u8def\u548c\u70b9\u5206\u6cbb\u662f\u4e00\u6837\u7684\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $u$\uff0c\u6211\u4eec\u7edf\u8ba1\u51fa\u6240\u6709\u7ecf\u8fc7 $u$ \u7684\u8def\u5f84\u7684\u4fe1\u606f\u3002\n\n\u4e8e\u662f\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u601d\u8def\uff1a\u7edf\u8ba1\u6bcf\u4e2a\u70b9 $u$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u8bb0\u5f55\u4e0b $u$ \u7684\u6240\u6709\u5b50\u5b59\u8282\u70b9\u5230 $u$ \u7684\u4fe1\u606f\uff0c\u653e\u5728\u4e00\u4e2a\u6570\u7ec4\u91cc\u5b58\u50a8\u3002\n\n\u4ee5\u8fd9\u9053\u9898\u4e3a\u4f8b\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u5b57\u7b26\u4e32\u538b\u7f29\u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4e32\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8bb0\u5f55 $u$ \u7684\u6bcf\u4e2a\u540e\u7ee7\u8282\u70b9\u5230 $u$ \u7684\u8def\u5f84\u6240\u5f62\u6210\u7684\u5b57\u7b26\u4e32\u3002\n\n\u4f46\u95ee\u9898\u6765\u4e86\uff0c\u6211\u4eec\u8981\u4fdd\u7559\u91cd\u513f\u5b50\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u8282\u70b9 $u$ \u548c\u5b83\u7684\u91cd\u513f\u5b50\u4e4b\u95f4\u6709\u4e00\u4e2a\u5b57\u6bcd\uff0c\u6211\u4eec\u8981\u628a\u8fd9\u4e2a\u5b57\u6bcd\u52a0\u5230\u91cd\u513f\u5b50\u7684\u6240\u6709\u540e\u7ee7\u8282\u70b9\u4e0a\uff0c\u8fd9\u5c31\u9000\u5316\u6210\u4e86\u66b4\u529b\u4e86\u3002\n\n\u5bf9\u4e8e [IOI 2011 Race](https://www.luogu.com.cn/problem/P4149) \u8fd9\u6837\u7684\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff0c\u4e8e\u662f\u590d\u6742\u5ea6\u591a\u4e86\u4e00\u4e2a $log$\u3002\n\n\u5f53\u7136\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u89e3\u6cd5\uff0c\u5bf9\u4e8e\u672c\u9898\u548c [IOI 2011 Race](https://www.luogu.com.cn/problem/P4149) \u8fd9\u6837\u7684\u9898\uff0c\u94fe\u4e0a\u7684\u4fe1\u606f\u662f\u53ef\u51cf\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u4e0d\u4fdd\u5b58\u201c\u540e\u7ee7\u8282\u70b9\u5230\u70b9 $u$ \u201d\u7684\u4fe1\u606f\uff0c\u800c\u662f\u4fdd\u5b58\u201c\u540e\u7ee7\u8282\u70b9\u5230\u6839\u201d\u7684\u4fe1\u606f\uff0c\u7136\u540e\u5728\u7edf\u8ba1\u7684\u65f6\u5019\u518d\u51cf\u53bb\u201c $u$ \u5230\u6839\u7684\u4fe1\u606f\u201d\u3002\n\n\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u7684\u4fe1\u606f\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u5c31\u4e0d\u9700\u8981\u7ef4\u62a4\u4e86\uff0c\u53c8\u56e0\u4e3a\u8def\u5f84\u4fe1\u606f\u53ef\u51cf\uff0c\u6240\u4ee5\u5904\u7406\u8d77\u6765\u4e5f\u5f88\u65b9\u4fbf\u3002\u5f53\u7136\uff0c\u5bf9\u4e8e\u4e0d\u53ef\u51cf\u7684\u8def\u5f84\u4fe1\u606f\uff0c\u53ef\u4ee5\u9009\u62e9\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff0c\u7ef4\u62a4\u4e0d\u4e86\u7684\u8bdd\u8fd8\u662f\u5199\u70b9\u5206\u6cbb\u5427\u3002\n\n[**AC\u4ee3\u7801**](https://www.luogu.com.cn/paste/q960lmrn)",
        "postTime": 1660108170,
        "uid": 679961,
        "name": "zhang_kevin",
        "ccfLevel": 0,
        "title": "CF741D \u9898\u89e3"
    }
]