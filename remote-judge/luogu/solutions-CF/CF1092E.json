[
    {
        "content": "\u6253CF\u865a\u62df\u6bd4\u8d5b\u7684\u65f6\u5019\u4e00\u4e2a\u540c\u5b66\u6002\u607f\u6211\u5012\u7740\u5207\u9898\n\n\u7136\u540e\u6211\u5c31\u5361\u5728\u4e86\u8fd9\u9053\u9898\u4e0a\uff0c\u5e76\u4e14\u6210\u529f\u6389\u5230\u4e865000\u540d\u4ee5\u5916\n\n\u770b\u5230\u8fd9\u9053\u9898\u7b2c\u4e00\u53cd\u5e94\u76f4\u63a5\u83ca\u82b1\u56fe\u5c31\u53ef\u4ee5\u4e86\n\n\u60f3\u4e86\u4e00\u4f1a\u513f\u53d1\u73b0\u8fd9\u9053\u9898\u548cCF455C Civilization\u6709\u70b9\u50cf\uff0c\u6bcf\u6b21\u968f\u4fbf\u627e\u4e24\u4e2a\u8fde\u901a\u5757\u8fde\u63a5\u5b83\u4eec\u76f4\u5f84\u7684\u4e2d\u70b9\u5373\u53ef\n\nWrong Answer on test 18\n\n\u76f4\u5230\u5403\u665a\u996d\u7684\u65f6\u5019\u624d\u53d1\u73b0\u53ea\u8981\u66b4\u529b\u679a\u4e3e\u83ca\u82b1\u56fe\u7684\u6839\u5373\u53ef\n\n\u679a\u4e3e\u51fa\u83ca\u82b1\u56fe\u7684\u6839\u540e\uff0c\u4ece\u6839\u5411\u6240\u6709\u8fde\u901a\u5757\u76f4\u5f84\u7684\u4e2d\u70b9\u8fde\u4e00\u6761\u8fb9\n\n\u56e0\u4e3a\u8fde\u901a\u5757\u4f1a\u548c\u5176\u4ed6\u8fde\u901a\u5757\u4e00\u8d77\u7ecf\u8fc7\u6839\u5bf9\u76f4\u5f84\u4ea7\u751f\u8d21\u732e\uff0c\u800c\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u8d21\u732e\u4e3a\u8fde\u901a\u5757\u4e2d\u4e0e\u6839\u8fde\u8fb9\u7684\u8282\u70b9\u5230\u5b83\u7684\u76f4\u5f84\u4e24\u7aef\u4e2d\u7684\u8f83\u8fdc\u70b9\u7684\u8ddd\u79bb\uff0c\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e2a\u8ddd\u79bb\u5728\u6839\u8282\u70b9\u5411\u76f4\u5f84\u7684\u4e2d\u70b9\u8fde\u8fb9\u65f6\u6700\u5c0f\n\n\u5927\u529b\u4e24\u6b21DFS\u6c42\u76f4\u5f84\uff0c\u5f53\u76f4\u5f84\u6bd4\u5f53\u524d\u7b54\u6848\u5c0f\u65f6\u66f4\u65b0\u7b54\u6848\n\n\u8d39\u52b2\u4e00\u756a\u5468\u6298\u540e\u7ec8\u4e8eA\u4e86\u8fd9\u4e2a\u9898\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1100;\nint head[maxn],nxt[maxn<<1],ver[maxn<<1],tot;\ninline void addedge(int a,int b)\n{\n\tnxt[++tot]=head[a];ver[tot]=b;head[a]=tot;\n\tnxt[++tot]=head[b];ver[tot]=a;head[b]=tot;\n}\nint n,m;\nint fa[maxn],mxdis,getv;\ninline void dfs(int x,int fat,int nowdep)\n{\n\tif(nowdep>mxdis) mxdis=nowdep,getv=x;fa[x]=fat;\n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tint y=ver[i];if(y==fat) continue;\n\t\tdfs(y,x,nowdep+1);\n\t}\n}\ninline pair<int,int> getcenter(int x)\n{\n\tmxdis=0;dfs(x,0,1);\n\tint get1=getv;\n\tmxdis=0;dfs(get1,0,1);\n\tint getlen=mxdis-1;\n\tint now=getv;\n\tfor(int i=1;i<=((getlen+1)>>1);i++) now=fa[now];\n\treturn make_pair(getlen,now);\n}\n//first\u4e3a\u76f4\u5f84\uff0csecond\u4e3a\u76f4\u5f84\u7684\u4e2d\u70b9\nint Fa[maxn];\ninline int find(int x){return x==Fa[x]?x:Fa[x]=find(Fa[x]);}\nvector<pair<int,int> > V;\nint tmp[maxn],tmpnxt[maxn<<1],tmpver[maxn<<1];\ninline int check(int x)\n{\n\ttmp[0]=tot;for(int i=1;i<maxn;i++) tmp[i]=head[i];\n\tfor(int i=1;i<(maxn<<1);i++) tmpnxt[i]=nxt[i],tmpver[i]=ver[i];\n\tfor(int i=0;i<(int)V.size();i++) if(find(x)!=find(V[i].second)) addedge(x,V[i].second);\n\tint ans=getcenter(x).first;\n\ttot=tmp[0];for(int i=1;i<maxn;i++) head[i]=tmp[i];\n\tfor(int i=1;i<(maxn<<1);i++) nxt[i]=tmpnxt[i],ver[i]=tmpver[i];\n\treturn ans;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) Fa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b;scanf(\"%d%d\",&a,&b);\n\t\taddedge(a,b);\n\t\tFa[find(a)]=find(b);\n\t}\n\tfor(int i=1;i<=n;i++) if(find(i)==i) V.push_back(getcenter(i));\n\tint mn=check(1),mnv=1;\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint x=check(i);\n\t\tif(x<mn) mn=x,mnv=i;\n\t}\n\tcout<<mn<<endl;\n\tfor(int i=0;i<(int)V.size();i++) if(find(mnv)!=find(V[i].second)) printf(\"%d %d\\n\",mnv,V[i].second);\n}\n```",
        "postTime": 1545348356,
        "uid": 84419,
        "name": "daifucong",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1092E \u3010Minimal Diameter Forest\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1092E)\n## \u601d\u8def\n\u8fd9\u9898\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u4e5f\u975e\u5e38\u70e6\uff0c\u8c03\u4e86\u6211 $\\verb!1h!$\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff1a\u6211\u4eec\u8fde\u63a5\u7684\u662f\u6bcf\u9897\u6811\u76f4\u5f84\u7684\u4e2d\u70b9\u3002\u8fd9\u4e2a\u7ed3\u8bba\u975e\u5e38\u597d\u8bc1\uff0c\u4e0d\u518d\u5c55\u5f00\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4e0d\u59a8\u8bbe\u6bcf\u68f5\u6811\u7684\u76f4\u5f84\u88ab\u5206\u6210\u4e86 $x_i$ \u548c $y_i$ \u4e24\u90e8\u5206\uff0c\u663e\u7136\u8fd9\u4e24\u90e8\u5206\u8981\u5c3d\u53ef\u80fd\u63a5\u8fd1\u3002\u63a5\u4e0b\u6765\u53c8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4eec\u4ece\u54ea\u68f5\u6811\u7684\u76f4\u5f84\u4e2d\u70b9\u5f00\u59cb\u8fde\u3002\n\n\u53e6\u4e00\u4e2a\u663e\u7136\u7684\u8d2a\u5fc3\u601d\u8def\u662f\uff1a\u4ece $\\max(x_i,y_i)$ \u6700\u5927\u7684\u90a3\u4e2a $i$ \u5f00\u59cb\u8fde\u3002\n\n\u56e0\u4e3a\u4ece\u90a3\u4e2a\u70b9\u5f00\u59cb\u8fde\uff0c\u53ea\u6709\u5b83\u672c\u8eab\u7684 $x_i,y_i$ \u662f\u4e0d\u53d8\u7684\uff0c\u53e6\u5916\u6811\u7684 $x_i,y_i$ \u90fd\u53d8\u6210\u4e86 $x_i+1,y_i+1$\u3002\n\n\u7136\u540e\u5efa\u51fa\u56fe\uff0c\u518d\u8dd1\u4e00\u904d\u76f4\u5f84\u5373\u53ef\u3002\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nint const N=1e3+10;\nint maxx1[N],maxx2[N],dep[N],vs[N],cnt,flag[N],pre[N],vis[N];\nvector<int>a[N];vector< pair<int,int> >answer;\ninline void dfs(int x,int fa){\n    vis[x]=1;\n    for (auto v:a[x]){\n        if (v==fa) continue;\n        pre[v]=x;dep[v]=dep[x]+1;\n        dfs(v,x);\n    }\n}\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    int n,m;cin>>n>>m;\n    int nowm=-1,nowmi;\n    while (m--){\n        int u,v;cin>>u>>v;\n        a[u].push_back(v);\n        a[v].push_back(u);\n    }\n    for (int i=1;i<=n;++i){\n        if (vis[i]) continue;\n        for (int j=1;j<=n;++j) dep[j]=pre[j]=0;\n        dfs(i,-1);vector<int>now,now1;\n        int maxn=0,maxni=i;\n        for (int j=1;j<=n;++j) if (dep[j]>maxn) maxn=dep[j],maxni=j;\n        int x=maxni;\n        for (int j=1;j<=n;++j) dep[j]=pre[j]=0;\n        dfs(maxni,-1);\n        maxn=0,maxni=i;\n        for (int j=1;j<=n;++j) if (dep[j]>maxn) maxn=dep[j],maxni=j;\n        x=maxni;\n        while (x) now1.push_back(x),x=pre[x];\n        reverse(now1.begin(),now1.end());\n        for (auto i:now1) now.push_back(i);\n        maxx1[++cnt]=(now.size()-1)/2;\n        maxx2[cnt]=(now.size()-1)-((now.size()-1)/2);\n        flag[cnt]=now[(ceil(now.size()/2.0))-1];\n        if (max(maxx1[cnt],maxx2[cnt])>nowm) nowm=max(maxx1[cnt],maxx2[cnt]),nowmi=cnt;\n    }\n    for (int i=1;i<=cnt;++i){\n        if (i==nowmi) continue;\n        a[flag[nowmi]].push_back(flag[i]);\n        a[flag[i]].push_back(flag[nowmi]);\n        answer.push_back({flag[nowmi],flag[i]});\n    }\n    for (int j=1;j<=n;++j) dep[j]=pre[j]=0;\n    dfs(1,-1);vector<int>now,now1;\n    int maxn=0,maxni=1;\n    for (int j=1;j<=n;++j) if (dep[j]>maxn) maxn=dep[j],maxni=j;\n    int x=maxni;\n    for (int j=1;j<=n;++j) dep[j]=pre[j]=0;\n    dfs(maxni,-1);\n    maxn=0,maxni=1;\n    for (int j=1;j<=n;++j) if (dep[j]>maxn) maxn=dep[j],maxni=j;\n    cout<<maxn<<'\\n';\n    for (auto i:answer) cout<<i.first<<' '<<i.second<<'\\n';\n    return 0;\n}\n```\n",
        "postTime": 1664160483,
        "uid": 253608,
        "name": "Tx_Lcy",
        "ccfLevel": 7,
        "title": "CF1092E Minimal Diameter Forest"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u7ed3\u8bba\uff1a\n\n**\u7ed3\u8bba 1 \uff1a\u4e24\u4e2a\u6811\u76f8\u8fde\u4f7f\u76f4\u5f84\u6700\u77ed\uff0c\u5fc5\u7136\u8fde\u63a5\u4e24\u68f5\u6811\u76f4\u5f84\u7684\u4e2d\u70b9\u3002**\n\n\u4e0d\u90a3\u4e48\u4e25\u8c28\u7684\u8bc1\u660e\uff1a\n\n\u8fde\u63a5\u4e24\u68f5\u6811\uff0c\u90a3\u4e48\u65b0\u6811\u7684\u76f4\u5f84\u53ef\u80fd\u6765\u81ea\uff1a\n\n\u6811 $1$ \u7684\u6700\u957f\u94fe+\u6b21\u957f\u94fe\uff0c\u6811 $2$ \u7684\u6700\u957f\u94fe+\u6b21\u957f\u94fe\uff0c\u6811 $1$ \u4e2d\u7684\u6700\u957f\u94fe+\u6811 $2$ \u4e2d\u7684\u6700\u957f\u94fe\u3002\n\n\u524d\u9762\u4e24\u90e8\u5206\u663e\u7136\u65e0\u6cd5\u6539\u53d8\uff0c\u4f46\u7b2c\u4e09\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u4f7f\u5176\u5c3d\u91cf\u5c0f\u3002\n\n\u5219\u663e\u7136\u9009\u53d6\u76f4\u5f84\u7684\u4e2d\u70b9\u53ef\u4ee5\u6ee1\u8db3\u5982\u4e0a\u9700\u6c42\u3002\n\n**\u7ed3\u8bba $2$ \uff1a\u6700\u540e\u8fde\u63a5\u4e00\u5b9a\u5448\u83ca\u82b1\u56fe\u72b6\u3002**\n\n\n\u53cd\u8bc1\u6cd5\uff1a\n\n\u5047\u8bbe\u4e0b\u56fe\u662f\u6700\u4f18\u7684\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/i59z2h28.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u5176\u4e2d\u4e09\u89d2\u5f62\u4ee3\u8868\u6bcf\u4e00\u68f5\u6811\uff0c\u5706\u5f62\u4ee3\u8868\u6211\u4eec\u4e4b\u524d\u9009\u51fa\u7684\u76f4\u5f84\u4e2d\u70b9\u3002\n\n\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u505a\u5230\u5982\u56fe $2$ \u66f4\u4f18\u3002\n\n\n![\u56fe\u6781\u8349](https://cdn.luogu.com.cn/upload/image_hosting/y6lwjhq6.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u5219\u5b9a\u5448\u73b0\u83ca\u82b1\u56fe\u72b6\u3002\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u600e\u4e48\u786e\u5b9a\u83ca\u82b1\u56fe\u7684\u6839\u5462\uff1f\n\n\u7136\u540e\u53d1\u73b0 $n$ \u624d $1000$ \uff0c\u6240\u4ee5\u76f4\u63a5\u679a\u4e3e\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2)$\u3002\n\n\u4ee3\u4ef7\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2008;\nconst int M=2e5;\nint n,m;\nint d[N];\nint now[M],to[M],pre[M],tot=0;\nint id[N],num=0,Mid[N];\nint a[N];\nbool pd=0;\nint X[M],Y[M];\nint now2[M],to2[M],pre2[M],tot2=0;\nint lst=INT_MAX,lst_mid=0;\nvoid add2(int x,int y) {\n    tot2++;\n    to2[tot2]=y;\n    pre2[tot2]=now2[x];\n    now2[x]=tot2;\n}\nvoid add(int x,int y) {\n    tot++;\n    to[tot]=y;\n    pre[tot]=now[x];\n    now[x]=tot;\n}\nvoid dfs(int x,int f,int dep,int ID) {\n    if(ID!=-1) id[x]=ID;\n    d[x]=dep;\n    for(int i=now[x]; i; i=pre[i]) {\n        int node=to[i];\n        if(node==f) continue;\n        dfs(node,x,dep+1,ID);\n    }\n}\n\nvoid dfs2(int x,int f,int dep) {\n    d[x]=dep;\n    for(int i=now2[x]; i; i=pre2[i]) {\n        int node=to2[i];\n        if(node==f) continue;\n        dfs2(node,x,dep+1);\n    }\n}\nvoid get_mid(int x,int f,int dep,int y,int wh) {\n    a[dep]=x;\n    if(x==y) {\n        Mid[wh]=a[(dep+1)/2];\n        return ;\n    }\n    for(int i=now[x]; i; i=pre[i]) {\n        int node=to[i];\n        if(node==f) continue;\n        get_mid(node,x,dep+1,y,wh);\n    }\n}\nint main() {\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<=m; i++) {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        add(y,x);\n        X[i]=x,Y[i]=y;\n    }\n    for(int i=1; i<=n; i++) {\n        if(id[i]) continue;\n        num++;\n        if(!id[i]) {\n            memset(d,0,sizeof(d));\n            dfs(i,0,0,num);\n            int tmp=i;\n            for(int j=1; j<=n; j++)\n                if(d[j]>d[tmp])\n                    tmp=j;\n            memset(d,0,sizeof(d));\n            dfs(tmp,0,0,-1);\n            int tmp2=i;\n            for(int j=1; j<=n; j++)\n                if(d[j]>d[tmp2])\n                    tmp2=j;\n            get_mid(tmp,0,1,tmp2,num);\n        }\n    }\n    for(int i=1; i<=num; i++) {\n        tot2=0;\n        memset(now2,0,sizeof(now2));\n        for(int j=1; j<=m; j++) {\n            add2(X[j],Y[j]);\n            add2(Y[j],X[j]);\n        }\n        for(int j=1; j<=num; j++) {\n            if(i==j) continue;\n            add2(Mid[i],Mid[j]);\n            add2(Mid[j],Mid[i]);\n        }\n        memset(d,0,sizeof(d));\n        dfs2(Mid[i],0,0);\n        int tmp=Mid[i];\n        for(int j=1; j<=n; j++)\n            if(d[j]>d[tmp])\n                tmp=j;\n        memset(d,0,sizeof(d));\n        dfs2(tmp,0,0);\n        int ans=0;\n        for(int j=1; j<=n; j++) \n            ans=max(ans,d[j]);\n        if(ans<lst) {\n            lst=ans;\n            lst_mid=i;\n        }\n    }\n    cout<<lst<<endl;\n    for(int i=1; i<=num; i++) {\n        if(i==lst_mid) continue;\n        cout<<Mid[i]<<\" \"<<Mid[lst_mid]<<endl;\n    }\n    return 0;\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1631594967,
        "uid": 216213,
        "name": "syk666",
        "ccfLevel": 7,
        "title": "CF1092E Minimal Diameter Forest"
    }
]