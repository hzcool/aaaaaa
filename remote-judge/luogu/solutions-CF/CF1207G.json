[
    {
        "content": "\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\u7684\u505a\u6cd5. \n\n\n\u5047\u8bbe\u6bcf\u6b21\u8be2\u95ee $t$ \u5728\u6240\u6709 $s$ \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u90a3\u4e48\u8fd9\u662f\u975e\u5e38\u7b80\u5355\u7684\uff1a \n\n\n\u76f4\u63a5\u5bf9 $s$ \u6784\u5efa\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u968f\u4fbf\u7ef4\u62a4\u4e00\u4e0b $endpos$ \u5927\u5c0f\u5c31\u53ef\u4ee5. \n\n\n\u7136\u800c\uff0c\u60f3\u6c42 $t$ \u5728 $trie$ \u6811\u4e2d\u4e00\u4e2a\u8282\u70b9\u5230\u6839\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u5c31\u96be\u4e86\u5f88\u591a. \n\n\n\u6211\u4eec\u6162\u6162\u8bb2\uff1a \n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5bf9\u9898\u4e2d\u7ed9\u7684 $trie$ \u6811\uff08\u5373\u6240\u6709 $s$ \u4e32\uff09\u6784\u5efa\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a. \n\n\n\u56e0\u4e3a\u540e\u7f00\u81ea\u52a8\u673a\u80fd\u8bc6\u522b\u6240\u6709\u7684\u5b50\u4e32\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5c06 $t$ \u5728\u81ea\u52a8\u673a\u4e0a\u5339\u914d. \n\n\n\u5047\u8bbe\u5339\u914d\u6210\u529f\uff0c\u5373\u5f97\u5230\u7ec8\u6b62\u8282\u70b9 $p$. \n\n\n\u90a3\u4e48\u6211\u4eec\u60f3\u6c42 $s_{i}$ \u4e2d\u5305\u542b $p$ \u7684\u4e2a\u6570. \n\n\n\u4ee4 $s_{i}$ \u5bf9\u5e94\u5230 $trie$ \u6811\u7684\u7ec8\u6b62\u8282\u70b9\u4e3a $end(i)$ \uff0c\u90a3\u4e48\u5c06 $end(i)$ \u5230\u6839\u8282\u70b9\u7684\u6240\u6709\u5b57\u7b26\u90fd\u63d2\u5165\u540e\u7f00\u81ea\u52a8\u673a\u4e4b\u540e\uff0c\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u7684\u5c31\u662f $trie$ \u4e2d $end(i)$ \u5230\u6839\u4e2d\u540e\u7f00\u5305\u542b $t$ \u7684\u8282\u70b9\u4e2a\u6570. \n\n\n\u800c\u5de7\u5999\u7684\u662f\uff0c\u5bf9 $s_{i}$ \u6709\u8d21\u732e\u7684\u6240\u6709 $trie$ \u4e2d\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u4f4d\u7f6e\u5173\u7cfb\u662f\u94fe\u7684\u5173\u7cfb. \n\n\n\u5373\u4ed6\u4eec\u90fd\u5728 $end(i)$ \u5230\u6839\u8282\u70b9\u8fd9\u6761\u8def\u5f84\u4e0a. \n\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u8054\u60f3\uff0c\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\uff0c\u80fd\u8ba9\u6df1\u5ea6\u9012\u589e\u7684\u8282\u70b9\u7f16\u53f7\u8fde\u7eed\u5462\uff1f\n\n\n\u2014\u2014\u6811\u94fe\u5256\u5206. \n\n\n\u6ca1\u9519\uff0c\u6211\u4eec\u5bf9 $trie$ \u6765\u4e00\u904d\u6811\u5256\u6c42\u89e3\u6bcf\u4e2a\u70b9\u7684\u6811\u5256\u5e8f. \n\n\n\u5bf9\u540e\u7f00\u81ea\u52a8\u673a\u6bcf\u4e00\u4e2a\u8282\u70b9\u5efa\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u7684\u662f\u540e\u7f00\u6811\u4e2d\u8be5\u8282\u70b9\u4e3a\u6839\u5b50\u6811\u4e2d\u6240\u6709\u6811\u5256\u5e8f\u7684\u6240\u6709\u6807\u53f7\u79cd\u7c7b.  \n\n\n\u5bf9\u4e8e\u8fd9\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6269\u5c55 $trie$ \u6811\u5b57\u7b26\u7684\u65f6\u5019\u5c31\u5728\u81ea\u52a8\u673a\u4e2d\u65b0\u5efa\u8282\u70b9\u63d2\u5165\u8be5\u70b9\u7684\u6811\u5256\u5e8f\uff0c\u7136\u540e\u6269\u5c55\u5b8c $trie$ \u6811\u540e\u518d\u6765\u4e00\u904d\u7ebf\u6bb5\u6811\u5408\u5e76. \n\n\n\u6700\u540e\uff0c\u53ea\u9700\u66b4\u529b\u8df3\u91cd\u94fe\uff0c\u5e76\u67e5\u8be2 $dfn[top[x]]$~$dfn[x]$ \u5728 $p$ \u8282\u70b9\u6240\u5728\u7ebf\u6bb5\u6811\u4e2d\u6709\u51e0\u4e2a\u51fa\u73b0. \n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nlog^2n)$\uff0c\u5e38\u6570\u5de8\u5927\uff0c\u8fdc\u6ca1\u6709 AC \u81ea\u52a8\u673a\u597d\u5199\uff0c\u8fd0\u884c\u5feb. \n\n\n\u4e0d\u8fc7\uff0c\u8fd9\u786e\u5b9e\u662f\u4e00\u9053\u7ec3\u4e60\u540e\u7f00\u81ea\u52a8\u673a\u7684\u597d\u9898. \n\n\n```cpp\n#include <map>\n#include <vector> \n#include <queue> \n#include <cstdio>  \n#include <cstring> \n#include <algorithm>\n#define N 400003 \n#define setIO(s) freopen(s\".in\",\"r\",stdin) \nusing namespace std;  \nchar S[N]; \nint n,m,rt[N<<1];   \nnamespace Trie {\n\tint id[N],tim; \n\tstruct Node {    \n\t\tmap<int,int>ch;   \n\t\tint siz,dfn,top,son,fa;     \n\t}t[N];  \n\tvoid dfs1(int u) { \n\t\tt[u].siz=1; \n\t\tfor(int i=0;i<27;++i) \n\t\t\tif(t[u].ch.count(i)) {    \n\t\t\t\tint v=t[u].ch[i]; \n\t\t\t\tt[v].fa=u,dfs1(v),t[u].siz+=t[v].siz;   \n\t\t\t\tif(!t[u].son||t[v].siz>t[t[u].son].siz) t[u].son=v;    \n\t\t\t}\n\t} \n\tvoid dfs2(int u,int tp) {\n\t\tt[u].top=tp; \n\t\tt[u].dfn=++tim;   \n\t\tif(t[u].son) dfs2(t[u].son,tp); \n\t\tfor(int i=0;i<27;++i) \n\t\t\tif(t[u].ch.count(i)) { \n\t\t\t\tint v=t[u].ch[i]; \n\t\t\t\tif(v!=t[u].son) \n\t\t\t\t\tdfs2(v,v); \n\t\t\t} \n\t}\n\tvoid build_tree() {  \n\t\tdfs1(0), dfs2(0,0);    \n\t}\n}; \nnamespace seg { \n\t#define ls t[x].lson \n\t#define rs t[x].rson\n\tint tot; \n\tstruct Node { \n\t\tint lson,rson,sum; \n\t}t[N*50]; \n\tvoid pushup(int x) {\n\t\tt[x].sum=t[ls].sum+t[rs].sum;    \n\t}\n\tvoid update(int &x,int l,int r,int p,int v) {\n\t\tif(!x) \n\t\t\tx=++tot; \n\t\tif(l==r) {\n\t\t\tt[x].sum=v; \n\t\t\treturn;\n\t\t} \n\t\tint mid=(l+r)>>1;    \n\t\tif(p<=mid) update(ls,l,mid,p,v); \n\t\telse update(rs,mid+1,r,p,v); \n\t\tpushup(x);  \n\t}\n\tint query(int x,int l,int r,int L,int R) {\n\t\tif(!x) return 0; \n\t\tif(l>=L&&r<=R) return t[x].sum; \n\t\tint mid=(l+r)>>1,re=0; \n\t\tif(L<=mid) re+=query(ls,l,mid,L,R); \n\t\tif(R>mid) re+=query(rs,mid+1,r,L,R);  \n\t\treturn re; \n\t}\n\tint merge(int l,int r,int x,int y,int tt) { \n\t\tif(!x||!y) \n\t\t\treturn x+y;  \n\t\tint oo=++tot;      \n\t\tif(l==r) \n\t\t\tt[oo].sum=1;                 \n\t\telse { \n\t\t\tint mid=(l+r)>>1; \n\t\t\tt[oo].lson=merge(l,mid,t[x].lson,t[y].lson,tt); \n\t\t\tt[oo].rson=merge(mid+1,r,t[x].rson,t[y].rson,tt); \n\t\t\tpushup(oo);   \n\t\t} \n\t\treturn oo; \n\t}\n\t#undef ls\n\t#undef rs\n}; \nnamespace SAM {  \n\tint tot,id[N<<1],tax[N<<1],rk[N<<1];      \n\tstruct Node {  \n\t\tmap<int,int>ch; \n\t\tint len,pre; \n\t}t[N<<1];            \n\tstruct Edge { \n\t\tint from,c;      \n\t\tEdge(int from=0,int c=0):from(from),c(c){} \n\t};             \n\tqueue<int>q; \n\tint extend(int lst,int c,int i) {      \n\t\tint p=lst; \n\t    if(t[p].ch.count(c)) { \n\t    \tint q=t[p].ch[c]; \n\t    \tif(t[q].len==t[p].len+1) seg::update(rt[q],1,Trie::tim,i,1),lst=q; \n\t    \telse { \n\t    \t\tint nq=++tot; \n\t    \t\tt[nq].len=t[p].len+1;  \n\t    \t\tt[nq].pre=t[q].pre,t[q].pre=nq;     \n\t    \t\tt[nq].ch=t[q].ch; \n\t    \t\tseg::update(rt[nq],1,Trie::tim,i,1);      \n\t    \t\tfor(;p&&t[p].ch.count(c)&&t[p].ch[c]==q;p=t[p].pre) t[p].ch[c]=nq;      \n\t    \t\tlst=nq;            \n\t    \t}\n\t    } \n\t    else { \n\t    \tint np=++tot;  \n\t    \tt[np].len=t[p].len+1;  \n\t    \tseg::update(rt[np],1,Trie::tim,i,1);    \n\t    \tfor(;p&&!t[p].ch.count(c);p=t[p].pre) t[p].ch[c]=np;   \n\t    \tif(!p) t[np].pre=1;  \n\t        else {\n\t        \tint q=t[p].ch[c]; \n\t        \tif(t[q].len==t[p].len+1) t[np].pre=q;     \n\t        \telse { \n\t        \t\tint nq=++tot; \n\t        \t\tt[nq].len=t[p].len+1; \n\t        \t\tt[nq].pre=t[q].pre,t[q].pre=t[np].pre=nq;         \n\t        \t\tt[nq].ch=t[q].ch; \n\t        \t\tfor(;p&&t[p].ch.count(c)&&t[p].ch[c]==q;p=t[p].pre) t[p].ch[c]=nq;  \n\t        \t}\n\t        }\n\t        lst=np; \n\t    }  \n\t    return lst;  \n\t}  \n\tvoid construct() {\n\t\tint i,j; \n\t\tid[0]=tot=1;   \n\t\tq.push(0);    \n\t\twhile(!q.empty()) {\n\t\t\tint u=q.front();q.pop(); \n\t\t\tfor(i=0;i<27;++i) {\n\t\t\t\tif(Trie::t[u].ch.count(i)) { \n\t\t\t\t\tint v=Trie::t[u].ch[i];   \n\t\t\t\t\tq.push(v);               \n\t\t\t\t\tid[v]=extend(id[u],i,Trie::t[v].dfn);        \n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\tfor(i=1;i<=tot;++i) tax[i]=0; \n\t\tfor(i=1;i<=tot;++i) ++tax[t[i].len];    \n\t\tfor(i=1;i<=tot;++i) tax[i]+=tax[i-1];        \n\t\tfor(i=1;i<=tot;++i) rk[tax[t[i].len]--]=i;   \n\t\tfor(i=tot;i>1;--i) { \n\t\t\tint u=rk[i];     \n\t\t\tint ff=t[u].pre;   \n\t\t\tif(ff>1) \n\t\t\t\trt[ff]=seg::merge(1,Trie::tim,rt[u],rt[ff],0); \n\t\t}\n\t} \n}; \nvoid solve(int x) { \n\tint p=1,i,len=strlen(S+1),re=0; \n\tfor(i=1;i<=len;++i) {\n\t\tint c=S[i]-'a'; \n\t\tif(SAM::t[p].ch.count(c)) \n\t\t\tp=SAM::t[p].ch[c]; \n\t\telse {\n\t\t\tprintf(\"0\\n\"); \n\t\t\treturn; \n\t\t}\n\t}    \n\tfor(x=Trie::id[x];x;x=Trie::t[Trie::t[x].top].fa) {  \n\t    re+=seg::query(rt[p],1,Trie::tim,Trie::t[Trie::t[x].top].dfn,Trie::t[x].dfn);       \n\t}\n\tprintf(\"%d\\n\",re);     \n}\nint main() {\n\tint i,j; \n\t// setIO(\"input\"); \n\tscanf(\"%d\",&n); \n\tfor(i=1;i<=n;++i) {\n\t\tint op,lst=0; \n\t\tchar str[3];  \n\t\tscanf(\"%d\",&op);      \n\t\tif(op==2) scanf(\"%d\",&lst),lst=Trie::id[lst]; \n\t\tscanf(\"%s\",str);   \n\t\tif(!Trie::t[lst].ch.count(str[0]-'a')) {  \n\t\t\tTrie::t[lst].ch[str[0]-'a']=i; \n\t\t\tTrie::id[i]=i;        \n\t\t}\n\t\telse Trie::id[i]=Trie::t[lst].ch[str[0]-'a'];   \n\t} \n\tTrie::build_tree();   \n\tSAM::construct();     \n\tscanf(\"%d\",&m);   \n\tfor(i=1;i<=m;++i) \n\t\tscanf(\"%d%s\",&j,S+1), solve(j);       \n\treturn 0; \n}\n```\n",
        "postTime": 1566815412,
        "uid": 53622,
        "name": "EM_LGH",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1207G \u3010Indie Album\u3011"
    },
    {
        "content": "$\\Large\\natural$ **CF1207G Indie Album \\ [\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/CF1207G) \\ [\u66f4\u597d\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/BlankAo/p/14375202.html)**\n\n## \u89e3\u6cd5\n\n\u8fd9\u79cd\u9898\u7b97\u662f\u6bd4\u8f83\u5957\u8def\u7684\u4e86\uff0c\u6211\u4eec\u770b\u89c1\u8fd9\u79cd\u591a\u5b57\u7b26\u4e32\u5339\u914d\uff0c\u4f1a\u60f3\u5230**AC\u81ea\u52a8\u673a**\u3002\n\n\u5982\u679c\u4e0d\u4f1a**AC\u81ea\u52a8\u673a**\u7684\u53ef\u4ee5\u770b\u770b [\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/BlankAo/p/14373027.html) \uff0c\u5e0c\u671b\u80fd\u7ed9\u60a8\u5e26\u6765\u5e2e\u52a9\u3002\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u5bf9\u4e8e\u6240\u6709\u5b57\u5178\u6811\u8282\u70b9\u8fde\u8fb9 $i-fail_i$\uff08\u6839\u8282\u70b9\u6ca1\u6709 $fail$\uff0c\u4e0d\u8fde\u8fb9\uff09\uff0c\u90a3\u4e48\u5c31\u5f97\u5230\u4e86\u4e00\u68f5 **Fail\u6811**\u3002\n\n\u90a3\u4e48\uff0c\u5982\u679c\u4e00\u53f7\u70b9\u4e3a\u6839\u8282\u70b9\uff0c\u90a3\u6240\u6709 $fail$ \u76f4\u63a5\u6216\u95f4\u63a5\u6307\u5411 $i$ \u53f7\u70b9\u7684\u8282\u70b9\uff0c\u90fd\u5728 $i$ \u7684\u5b50\u6811\u4e2d\u3002\n\n\u6240\u4ee5\u67e5\u8be2\u5b57\u7b26\u4e32 $X$ \u5728\u5b57\u7b26\u4e32 $Y$ \u4e2d\u51fa\u73b0\u51e0\u6b21\uff0c\u7b49\u4ef7\u4e8e\u5efa\u51fa **Trie** \u548c **Fail\u6811** \u540e\uff0c\u5728 **Fail\u6811\u4e2d** \u4ee5 \u201c$X$\u7684\u7ed3\u675f\u8282\u70b9\u201d\uff08\u8bbe\u4e3a $i$\uff09 \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u4e2a $Y$ \u5305\u542b\u7684\u8282\u70b9\u3002\n\n\u4e0d\u7406\u89e3\u53ef\u4ee5\u770b\u8fd9\u89e3\u91ca\uff1a\u6bd4\u5982 $j$ \u53f7\u70b9\u662f $Y$ \u6240\u5305\u542b\u7684\uff0c\u662f $Y$ \u7684\u7b2c $id$ \u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u4ee3\u8868\u5728 $Y$ \u67e5\u8be2\u65f6\uff0c$j$ \u8dd1 $fail$ \u53ef\u4ee5\u8dd1\u51fa $X$\uff0c\u6240\u4ee5 $X$ \u662f $Y$ \u4e2d $1\\sim id$ \u8fd9\u4e2a\u5b50\u4e32\u7684\u540e\u7f00\u3002 \n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u7c7b\u6bd4 [\u963f\u673a\u7684\u6253\u5b57\u72f8](https://www.luogu.com.cn/problem/P2414) \uff1a\n\n\u8bbe\u8be2\u95ee\u7684\u5b57\u7b26\u4e32\u4e3a $T$\uff0c\u5219\u663e\u7136\u6709\u8fd9\u6837\u4e00\u4e2a\u65b9\u6cd5\uff1a\u8ba9 $T$ \u5728 **Trie** \u4e0a\u8dd1\uff0c\u7ecf\u8fc7\u7684\u70b9\u5bf9\u4e8e\u7684 **Fail\u6811\u8282\u70b9**\u6743\u503c\u52a0\u4e00\u3002\u7136\u540e\u6211\u4eec\u67e5\u8be2 $S$ \u5728 **Trie** \u7684\u7ed3\u5c3e\u8282\u70b9 $G$\uff0c\u5bf9\u5e94\u7684 **Fail\u6811\u8282\u70b9** \uff0c\u7684\u5b50\u6811\u548c\uff08\u53ef\u80fd\u6709\u70b9\u7ed5\uff09\u3002\u6700\u540e\u6211\u4eec\u518d\u628a\u90a3\u4e9b\u52a0\u4e00\u7684\u70b9\u518d\u51cf\u4e00\uff0c\u590d\u539f\u539f\u6765\u7684\u6811\u3002\n\n\u628a\u7b54\u6848\u79bb\u7ebf\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 **Trie\u6811** \u4e0a **DFS**\uff0c\u6765\u5230\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u70b9\u5bf9\u4e8e\u7684 **Fail\u6811\u8282\u70b9** \u6743\u503c\u52a0\u4e00\uff1b\u79bb\u5f00\u4e00\u4e2a\u70b9\uff0c\u540c\u6837\u5730\u6743\u503c\u51cf\u4e00\u3002\u8fd9\u6837\u5f53\u6211\u4eec\u5230\u8fbe\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1**\u6709\u4e14\u4ec5\u6709**\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u70b9\u4e0a\u6709\u503c\u3002\u7136\u540e\u6211\u4eec\u8c03\u51fa\u5728\u8fd9\u4e2a\u70b9\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u67e5\u8be2\u5b83\u4eec\u5bf9\u5e94\u7684 **Fail\u6811\u8282\u70b9** \u7684\u5b50\u6811\u548c\u5373\u53ef\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u652f\u6301\u5355\u70b9\u52a0\u503c\uff0c\u4ee5\u53ca\u67e5\u8be2\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u548c\uff0c\u53ef\u4ee5\u7528 **DFS\u5e8f** \u89e3\u51b3\u3002\n\n\u56e0\u4e3a\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u5728 **DFS\u5e8f** \u4e0a\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u7528**\u533a\u95f4\u67e5\u8be2\uff08\u7ed9\u5b50\u6811\u67e5\u8be2\uff09\u3001\u5355\u70b9\u52a0\u503c\uff08 \u5728 Trie \u8dd1\u4e0a DFS \u65f6\u52a0\u51cf\uff09**\u5c31\u884c\u4e86\uff0c\u663e\u7136\u5957\u6811\u72b6\u6570\u7ec4\u6a21\u677f\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```c++\n#include<bits/stdc++.h>\n#define rep(i,x,y) for(int i=x;i<=y;++i)\n#define mar(o) for(int E=fst[o];E;E=e[E].nxt)\n#define v e[E].to\nusing namespace std;\nconst int n7=401234,m7=801234,z7=1601234;\nstruct dino{int to,nxt;}e[z7];\nstruct lyca{int z,id;};\nint n,T,cnt=1,tre[m7][26],fail[m7],poi[n7],head,tail,que[m7];\nint ecnt,fst[m7],t,atre[n7],L[n7],R[n7],ans[n7];\nchar cr[n7];bool tru[m7][26];\nvector <lyca> vec[m7];\n\nint rd(){\n   int shu=0;char ch=getchar();\n   while(!isdigit(ch))ch=getchar();\n   while(isdigit(ch))shu=(shu<<1)+(shu<<3)+(ch^48),ch=getchar();\n   return shu;\n}\n\nvoid edge(int sta,int edn){\n\tecnt++;\n\te[ecnt]=(dino){edn,fst[sta]};\n\tfst[sta]=ecnt;\n}\n\nvoid insert1(){\n\trep(i,1,n){\n\t\tint sys=rd(),las=1;\n\t\tif(sys==2)las=poi[ rd() ];\n\t\tchar ch=getchar()-'a';\n\t\tif(!tre[las][ch]){\n\t\t\tcnt++,tre[las][ch]=cnt;\n\t\t}\n\t\tpoi[i]=tre[las][ch];\n\t}\n}\n\nvoid insert2(int z){\n\tint len=strlen(cr+1),now=1;\n\trep(i,1,len){\n\t\tint ch=cr[i]-'a';\n\t\tif(!tre[now][ch]){\n\t\t\tcnt++,tre[now][ch]=cnt;\n\t\t}\n\t\tnow=tre[now][ch];\n\t}\n\tpoi[z]=now;\n}\n\nvoid Gfail(){\n\thead=1,tail=1,que[1]=1;\n\trep(i,0,25)tre[0][i]=1;\n\twhile(head<=tail){\n\t\tint now=que[head];\n\t\trep(i,0,25){\n\t\t\tint edn=tre[ fail[now] ][i];\n\t\t\tif(tre[now][i]){\n\t\t\t\tfail[ tre[now][i] ]=edn;\n\t\t\t\tedge(edn,tre[now][i]);\n\t\t\t\ttail++,que[tail]=tre[now][i];\n\t\t\t\ttru[now][i]=1;\n\t\t\t}\n\t\t\telse tre[now][i]=edn;\n\t\t}\n\t\thead++;\n\t}\n}\n\n#define lb(z) (z&-z)\nvoid updat(int z,int id){\n\twhile(id<=cnt)atre[id]+=z,id+=lb(id);\n}\nint Dquery(int id){\n\tint tot=0;\n\twhile(id)tot+=atre[id],id-=lb(id);\n\treturn tot;\n}\nint query(int l,int r){\n\treturn Dquery(r)-Dquery(l-1);\n}\n\nvoid dfs1(int o){\n\tt++,L[o]=t;\n\tmar(o)dfs1(v);\n\tR[o]=t;\n}\n\nint fimd(){\n\tint len=strlen(cr+1),now=1;\n\trep(i,1,len)now=tre[now][ cr[i]-'a' ];\n\treturn now;\n}\n\nvoid dfs2(int o){\n\tupdat(1,L[o]);\n\tint wal=vec[o].size()-1;\n\trep(i,0,wal){\n\t\tint ll=L[ vec[o][i].z ];\n\t\tint rr=R[ vec[o][i].z ];\n\t\tans[ vec[o][i].id ]=query(ll,rr);\n\t}\n\trep(i,0,25){\n\t\tif(tru[o][i])dfs2(tre[o][i]); \n\t}\n\tupdat(-1,L[o]);\n}\n\nint main(){\n\tn=rd(),insert1(),T=rd();\n\trep(i,1,T){\n\t\tint z=rd();scanf(\"%s\",cr+1);\n\t\tinsert2(i+n);\n\t\tvec[ poi[z] ].push_back( (lyca){poi[i+n],i} );\n\t}\n\tGfail(),dfs1(1),dfs2(1);\n\trep(i,1,T)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1612447504,
        "uid": 99623,
        "name": "BlankAo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1207G \u3010Indie Album\u3011"
    },
    {
        "content": "> [CF1207G Indie Album](https://www.luogu.com.cn/problem/CF1207G)\n\n> \u9898\u610f\u7b80\u8ff0\uff1a\u6709 $n$ \u79cd\u64cd\u4f5c\uff0c\u7ed9\u51fa\u6574\u6570\uff0c\u6574\u6570\u548c\u5b57\u7b26 $op,j(op=2),c$\u3002\u82e5 $op=1$ \u5219 $s_i=c$\uff1b\u5426\u5219 $s_i=s_j+c$\u3002$m$ \u6b21\u8be2\u95ee\u7ed9\u51fa $i,t$\uff0c\u6c42 $t$ \u5728 $s_i$ \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002\n\n> \u672c\u6587\u8282\u9009\u81ea [ACAM \u4e71\u505a IV.](https://www.cnblogs.com/alex-wei/p/ACAM.html)\n\n~~\u4ee5\u524d\u6253\u8fc7\u8fd9\u573a\u6bd4\u8d5b\uff0c\u8981\u662f\u6211\u5f53\u65f6\u4f1a ACAM \u591a\u597d\u554a\u3002~~\n\n---\n\n\u6ce8\u610f\u5230\u5982\u679c\u6211\u4eec\u5bf9\u64cd\u4f5c\u4e32 $s$ \u5efa\u51fa ACAM \u9700\u8981\u52a8\u6001\u4fee\u6539 fail \u6811\u7684\u7ed3\u6784\uff0c\u4e0d\u592a\u53ef\u884c\u3002\u90a3\u4e48\u6362\u4e2a\u601d\u8def\uff0c\u8003\u8651\u5bf9\u6240\u6709\u8be2\u95ee\u4e32 $t$ \u5efa\u51fa ACAM\u3002\u90a3\u4e48\u8fd9\u6837\u5c31\u662f\u5728 ACAM \u4e0a\u8dd1 $s_i$\uff0c\u6c42\u51fa\u6709\u591a\u5c11\u4e2a\u8dd1\u5230\u7684\u8282\u70b9\u5728 fail \u6811\u4e0a\u4ee5 $t$ \u7684\u7ec8\u6b62\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u3002\u8fd9\u4e2a\u53ef\u4ee5\u5bf9 fail \u6811\u8fdb\u884c\u4e00\u904d dfs\uff0c\u7528\u6bcf\u4e2a\u8282\u70b9\u7684 dfs \u5e8f\u548c size \u7ef4\u62a4\u3002\u8fd9\u6837\u5c31\u662f\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u5373\u53ef\u3002\n\n\u53ef\u662f $s_i$ \u7684\u603b\u957f\u5ea6\u53ef\u80fd\u4f1a\u5f88\u5927\u3002\u4e0d\u96be\u53d1\u73b0\u6bcf\u4e2a $s_i$ \u5f62\u6210\u4e86\u4e00\u4e2a\u4f9d\u8d56\u5173\u7cfb\uff0c\u5efa\u51fa\u6811\uff0c\u6211\u4eec\u53ea\u9700\u8981\u518d\u5bf9\u8fd9\u4e2a \u201c\u64cd\u4f5c\u6811\u201d \u8fdb\u884c dfs\uff0c\u5148\u8ba1\u7b97\u8d21\u732e\uff08\u4f4d\u7f6e $son_{p,c_i}$ \u52a0\u4e0a $1$\uff09\uff0c\u518d\u66f4\u65b0\u5e76\u4e0b\u4f20\u8dd1\u5230\u7684\u4f4d\u7f6e $p=son_{p,c_i}$\uff0c\u6700\u540e\u64a4\u9500\u8d21\u732e\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}((n+m)\\log \\sum|t|)$\u3002 \n\n```cpp\n/*\n\tPowered by C++11.\n\tAuthor : Alex_Wei.\n*/\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n//#pragma GCC optimize(3)\n//#define int long long\n\n#define pb emplace_back\n\nconst int N=4e5+5;\n\nint n,m,ans[N];\nint cnt,dn,son[N][26],ed[N],fa[N],sz[N],dfn[N];\nvector <int> e[N],f[N],ft[N];\nchar ad[N];\nvoid ins(int id,string s){\n\tint p=0;\n\tfor(char it:s){\n\t\tif(!son[p][it-'a'])son[p][it-'a']=++cnt;\n\t\tp=son[p][it-'a'];\n\t} ed[id]=p;\n} void build(){\n\tqueue <int> q;\n\tfor(int i=0;i<26;i++)if(son[0][i])q.push(son[0][i]);\n\twhile(!q.empty()){\n\t\tint t=q.front(); q.pop();\n\t\tfor(int i=0;i<26;i++)\n\t\t\tif(son[t][i])q.push(son[t][i]),fa[son[t][i]]=son[fa[t]][i];\n\t\t\telse son[t][i]=son[fa[t]][i];\n\t\tft[fa[t]].pb(t);\n\t}\n} void dfs(int id){\n\tdfn[id]=++dn,sz[id]=1;\n\tfor(int it:ft[id])dfs(it),sz[id]+=sz[it];\n}\n\nint c[N];\nvoid add(int x,int v){while(x<=dn)c[x]+=v,x+=x&-x;}\nint query(int x){int ans=0; while(x)ans+=c[x],x-=x&-x; return ans;}\nint query(int l,int r){return query(r)-query(l-1);}\nvoid cal(int id,int p){\n\tif(id)p=son[p][ad[id]-'a'],add(dfn[p],1);\n\tfor(int it:e[id])ans[it]=query(dfn[ed[it]],dfn[ed[it]]+sz[ed[it]]-1);\n\tfor(int it:f[id])cal(it,p);\n\tadd(dfn[p],-1);\n}\n\nint main(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tint tp,p=0; cin>>tp;\n\t\tif(tp==2)cin>>p;\n\t\tf[p].pb(i),cin>>ad[i];\n\t} cin>>m;\n\tstring q;\n\tfor(int i=1,id;i<=m;i++)\n\t\tcin>>id>>q,e[id].pb(i),ins(i,q);\n\tbuild(),dfs(0),cal(0,0);\n\tfor(int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1615603220,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1207G Indie Album"
    },
    {
        "content": "## \u3010ACAM\u3011\u3010CF1207G\u3011 Indie Album\n\n### Analysis\n\ncf \u7adf\u7136\u51fa[\u539f\u9898](https://www.luogu.com.cn/problem/P2414)\uff08\n\n\u8003\u8651\u628a\u8be2\u95ee\u4e32\u548c\u539f\u4e32\u90fd\u63d2\u5165\u5230 AC \u81ea\u52a8\u673a\u91cc\uff0c\u8fdb\u884c\u4e00\u6b21\u8be2\u95ee $i, t$ \u65f6\uff0c\u7b54\u6848\u5c31\u662f $s_i$ \u7684\u6240\u6709\u524d\u7f00\u4e2d\uff0c\u5728 fail \u6811\u4e0a\u662f $t$ \u7684\u540e\u4ee3\u7684\u7ed3\u70b9\u4e2a\u6570\u3002\n\n\u67e5\u8be2\u67d0\u8282\u70b9\u662f\u53e6\u4e00\u8282\u70b9\u7684\u540e\u4ee3\u7684\u5957\u8def\u64cd\u4f5c\u662f\u6c42\u51fa dfs \u5e8f\u548c\u5b50\u6811 size\uff0c\u5982\u679c $v$ \u662f $u$ \u7684\u540e\u4ee3\uff0c\u90a3\u4e48 $dfn_u \\leq v \\leq dfn_u + size_u$\uff0c\u5176\u4e2d $dfn$ \u8868\u793a dfs \u5e8f\uff0c$size$ \u8868\u793a\u5b50\u6811\u5927\u5c0f\u3002\n\n\u628a\u8be2\u95ee\u79bb\u7ebf\uff0c\u6302\u5230 $s_i$ \u5728 Trie \u6811\u4e0a\u5bf9\u5e94\u7684\u8282\u70b9\u4e0a\uff0c\u904d\u5386 Trie \u6811\uff0c\u540c\u65f6\u7ef4\u62a4\u5f53\u524d\u8282\u5230\u6839\u7684\u6240\u6709\u8282\u70b9\u7684 dfs \u5e8f\u7684\u6743\u503c\u6811\u72b6\u6570\u7ec4\uff0c\u5373\u53ef $O(\\log |s| + |t|)$ \u6c42\u51fa\u7b54\u6848\u3002\n\n### Code\n\n```cpp\nnamespace Fusu {\n\nconst int maxt = 26;\nconst int maxn = 1000006;\n\nvoid Init();\nvoid Build();\nvoid Query();\n\nvoid Main() {\n  Init();\n  Build();\n  Query();\n}\n\nint vistime;\nstruct Node {\n  int sz, dfn;\n  Node *fail, *fa;\n  Node *son[maxt];\n  std::vector<Node*> fson;\n  std::vector<int> qid;\n\n  void dfs() {\n    dfn = ++vistime;\n    sz = 1;\n    for (auto v : fson) {\n      v->dfs();\n      sz += v->sz;\n    }\n  }\n};\nNode Mem[maxn], *pool = Mem + 1, *rot = Mem;\nNode* New() {\n  return pool++;\n}\n\nint n, m;\nchar s[maxn];\nNode *eid[maxn];\nstd::pair<int, int> querys[maxn];\nvoid Init() {\n  qr(n);\n  for (int i = 1, op, j; i <= n; ++i) {\n    qr(op);\n    auto u = rot;\n    if (op == 2) {\n      qr(j); u = eid[j];\n    }\n    qrs(s);\n    int k = *s - 'a';\n    auto v = u->son[k] ? u->son[k] : (u->son[k] = New());\n    v->fa = u; eid[i] = u = v;\n  }\n  qr(m);\n  for (int i = 1, j, k; i <= m; ++i) {\n    qr(j); k = qrs(s + 1);\n    auto u = rot;\n    for (int ii = 1, x = s[ii] - 'a'; ii <= k; x = s[++ii] - 'a') {\n      auto v = u->son[x] ? u->son[x] : (u->son[x] = New());\n      v->fa = u; u = v;\n    }\n    eid[k = i + n] = u;\n    querys[i] = std::make_pair(j, k);\n  }\n}\n\nstd::queue<Node*> Q;\nvoid Build() {\n  for (auto &v : rot->son) if (v != nullptr) {\n    Q.push(v); v->fail = rot;\n  } else {\n    v = rot;\n  }\n  for (Node *u, *v; !Q.empty(); Q.pop()) {\n    u = Q.front();\n    u->fail->fson.push_back(u);\n    for (int i = 0; i < maxt; ++i) if ((v = u->son[i]) != nullptr) {\n      v->fail = u->fail->son[i]; Q.push(v);\n    } else {\n      u->son[i] = u->fail->son[i];\n    }\n  }\n  rot->dfs();\n}\n\nstruct BIT {\n  int tr[maxn];\n\n  inline int lowbit(const int x) { return x & -x; }\n  inline void upd(int p, const int v) { do tr[p] += v; while ((p += lowbit(p)) <= vistime); }\n  inline int qry(int p) { int ret = 0; do ret += tr[p]; while (p -= lowbit(p)); return ret; }\n};\nBIT bit;\n\nint ans[maxn];\nvoid dfs(Node *const u) {\n  bit.upd(u->dfn, 1);\n  for (auto v : u->qid) {\n    auto yzy = eid[querys[v].second];\n    int l = yzy->dfn - 1, r = yzy->dfn + yzy->sz - 1;\n    ans[v] = bit.qry(r) - bit.qry(l);\n  }\n  for (auto v : u->son) if (v->fa == u) {\n    dfs(v);\n  }\n  bit.upd(u->dfn, -1);\n}\n\nvoid Query() {\n  for (int i = 1; i <= m; ++i) {\n    eid[querys[i].first]->qid.push_back(i);\n  }\n  dfs(rot);\n  qwa(ans + 1, m, '\\n', '\\n');\n}\n\n} // namespace Fusu\n```\n\n\n\n",
        "postTime": 1587035625,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1207G \u3010Indie Album\u3011"
    },
    {
        "content": "\u9898\u76ee\u4e2d\u7ed9\u51fa\u4e86\u4e2atrie\uff0c\u8be2\u95ee\u7ed9\u5b9a\u524d\u7f00\u4e2d\u8be2\u95ee\u4e32\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\u5982\u679c\u6211\u4eec\u80fd\u7ef4\u62a4\u4e00\u4e2aSA\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u8be2\u95eeO\uff08|S|logn\uff09\u56de\u7b54\u3002\u5355\u72ec\u6784\u5efa\u6bcf\u4e2a\u524d\u7f00\u7684\u540e\u7f00\u6570\u7ec4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u65e0\u6cd5\u627f\u53d7\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\u6bcf\u4e2a\u524d\u7f00\u90fd\u662f\u7531\u5176\u7956\u5148\u5728\u5c3e\u90e8\u8ffd\u52a0\u4e00\u4e2a\u5b57\u7b26\u6784\u6210\u7684\u65b0\u7684\u540e\u7f00\u6570\u7ec4\uff08\u5373\u53ea\u6dfb\u52a0\u4e00\u4e2a\u540e\u7f00\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u540e\u7f00\u6570\u7ec4\uff0cdfs\u65f6\u8fdb\u5165\u4e00\u4e2a\u65b0\u8282\u70b9\u5373\u63d2\u5165\u4e00\u4e2a\u540e\u7f00\uff0c\u56de\u9000\u65f6\u5220\u9664\u8be5\u540e\u7f00\u5373\u53ef\u3002\u590d\u6742\u5ea6O\uff08nlogn\uff09\u3002\n\n\u53c2\u8003\u8d44\u6599 \u9648\u7acb\u6770 \u300a\u91cd\u91cf\u5e73\u8861\u6811\u548c\u540e\u7f00\u5e73\u8861\u6811\u5728\u4fe1\u606f\u5b66\u5965\u8d5b\u4e2d\u7684\u5e94\u7528\u300b\n\nAC\u4e3b\u4ee3\u7801\uff1a\n\n```cpp\nvector<int> query[410000];\nvector<int> edge[410000];\nint ans[410000];\nint str[410000];\nchar vet[410000];\nstring s2[410000];\nvoid dfs(int cur)\n{\n\tsbt.push_back(vet[cur]);\n\tif (!query[cur].empty())\n\t{\n\t\tfor (auto &p : query[cur])\n\t\t{\n\t\t\tint nn = s2[p].size();\n\t\t\tfor (int i = 0; i < nn; ++i)\n\t\t\t\tstr[nn-i] = s2[p][i];\n\t\t\tstr[nn + 1] = 123456;\n\t\t\tans[p] = sbt.query(str,nn);\n\t\t}\n\t}\n\tfor (auto &p : edge[cur])\n\t\tdfs(p);\n\tsbt.pop_back();\n}\nint main()\n{\n\tint n, q,q2,opt;\n\tchar p;\n\tstring ss;\n\tcin >> n;\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\tcin >> opt;\n\t\tif (opt == 1)\n\t\t{\n\t\t\tcin >> p;\n\t\t\tedge[0].emplace_back(i);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcin >>q2>> p;\n\t\t\tedge[q2].emplace_back(i);\n\t\t}\n\t\tvet[i] = p;\n\t}\n\tcin >> q;\n\tfor (int i = 1; i <= q; ++i)\n\t{\n\t\tcin >> q2 >> s2[i];\n\t\tquery[q2].emplace_back(i);\n\t}\n\tdfs(0);\n\tfor (int i = 1; i <= q; ++i)\n\t\tcout << ans[i] << endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1567589080,
        "uid": 154957,
        "name": "qiyue7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1207G \u3010Indie Album\u3011"
    },
    {
        "content": "AC\u81ea\u52a8\u673a\u3002\n\n\u628a\u6240\u6709\u7684\u8be2\u95ee\u4e32\u52a0\u5165AC\u81ea\u52a8\u673a\u3002\u628a\u52a0\u5165\u65b0\u5b57\u7b26\u7684\u64cd\u4f5c\u5efa\u6210\u6811\uff0c\u628a\u8be2\u95ee\u6302\u5728\u6811\u7684\u8282\u70b9\u4e0a\u3002\u5728\u6811\u4e0aDFS\uff0c\u67d0\u8282\u70b9\u7684\u4e32\u5373\u6839\u5230\u5b83\u7684\u4e00\u6bb5\u3002\n\n\u7531AC\u81ea\u52a8\u673a\u7684\u77e5\u8bc6\u53ef\u77e5\uff0c\u8d70\u5230\u81ea\u52a8\u673a\u7684\u67d0\u4e2a\u70b9\u7684\u65f6\u5019\uff0cFail\u6811\u4e0a\u5b83\u5230\u6839\u7684\u70b9\u5168\u90e8\u88ab\u5339\u914d\u5230\u4e86\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u5355\u70b9\u52a0\uff0c\u5b50\u6570\u5185\u6c42\u548c\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\u3002$O(nlogn)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nconst int N = 5e5 + 233;\n\nint ch[N][26], fail[N], end[N], tot;\n\nvoid insert(char str[], int id) {\n    int now = 0, len = strlen(str + 1);\n    for (int i = 1; i <= len; ++i) {\n        int c = str[i] - 'a';\n        if (!ch[now][c])\n            ch[now][c] = ++tot;\n        now = ch[now][c];\n    }\n    end[id] = now;\n}\n\nvoid build_acam() {\n    std::queue<int> que;\n    for (int i = 0; i < 26; ++i)\n        if (ch[0][i])\n            que.push(ch[0][i]);\n    while (!que.empty()) {\n        int x = que.front(); que.pop();\n        for (int i = 0; i < 26; ++i) {\n            if (ch[x][i]) {\n                fail[ch[x][i]] = ch[fail[x]][i];\n                que.push(ch[x][i]);\n            } else\n                ch[x][i] = ch[fail[x]][i];\n        }\n    }\n}\n\nstd::vector<int> fson[N];\n\nvoid build_tree() {\n    for (int i = 1; i <= tot; ++i)\n        fson[fail[i]].push_back(i);\n}\n\nint id[N], num, size[N];\n\nvoid dfs_tree(int x) {\n    id[x] = ++num; size[x] = 1;\n    for (auto y : fson[x]) {\n        dfs_tree(y);\n        size[x] += size[y];\n    }\n}\n\nint sum[N * 4];\n\n#define ls(p) p << 1\n#define rs(p) p << 1 | 1\n\nvoid add(int p, int x, int y, int L, int R) {\n    if (L == R) return (void)(sum[p] += y);\n    int mid = (L + R) >> 1;\n    if (x <= mid) add(ls(p), x, y, L, mid);\n    else add(rs(p), x, y, mid + 1, R);\n    sum[p] = sum[ls(p)] + sum[rs(p)];\n}\n\nint ask(int p, int l, int r, int L, int R) {\n    if (l <= L && r >= R) return sum[p];\n    int mid = (L + R) >> 1, ret = 0;\n    if (l <= mid) ret = ask(ls(p), l, r, L, mid);\n    if (r > mid) ret += ask(rs(p), l, r, mid + 1, R);\n    return ret;\n}\n\nint n, m, ans[N]; char str[N];\n\nstruct Edge {\n    int to; char c;\n};\nstd::vector<Edge> son[N];\n\nstd::vector<int> qu[N];\n\nvoid solve(int x, int now) {\n    add(1, id[now], 1, 1, num);\n    for (auto i : qu[x])\n        ans[i] = ask(1, id[end[i]], id[end[i]] + size[end[i]] - 1, 1, num);\n    for (auto i : son[x])\n        solve(i.to, ch[now][i.c - 'a']);\n    add(1, id[now], -1, 1, num);\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; ++i) {\n        int op, lst = 0; char c;\n        scanf(\"%d\", &op);\n        if (op == 2) scanf(\"%d\", &lst);\n        scanf(\" %c\", &c);\n        son[lst].push_back({ i, c });\n    }\n    scanf(\"%d\", &m);\n    for (int i = 1; i <= m; ++i) {\n        int id; scanf(\"%d%s\", &id, str + 1);\n        insert(str, i); qu[id].push_back(i);\n    }\n    build_acam();\n    build_tree();\n    dfs_tree(0);\n    solve(0, 0);\n    for (int i = 1; i <= m; ++i)\n        printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1566545782,
        "uid": 52068,
        "name": "kai586123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1207G \u3010Indie Album\u3011"
    },
    {
        "content": "# CF1207G Indie Album\n\n\u4e00\u9053\u5f88\u6709\u610f\u601d\u7684AC\u81ea\u52a8\u673a\u597d\u9898\u3002\n\nAC\u81ea\u52a8\u673a\u7684\u672c\u8d28\u662f\u8bb0\u5f55\u4e86\u4e00\u68f5\u5b57\u5178\u6811\u4e0a\u6240\u6709\u5b57\u7b26\u4e32\u7684\u6240\u6709\u540e\u7f00\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u5145\u5206\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u3002\n\n\u8fd9\u9053\u9898\u4e0e\u677f\u5b50\u9898\u7684\u4e0d\u540c\u4e4b\u5904\u5c31\u5728\u4e8e\uff1a\u6587\u672c\u4e32\u5728\u4e0d\u505c\u7684\u53d8\u5316\uff0c\u6bcf\u6b21\u589e\u52a0\u4e00\u4e2a\u5b57\u7b26\u3002\n\n\u6211\u4eec\u5148\u6765\u590d\u4e60\u4e00\u4e0bAC\u81ea\u52a8\u673a\u6a21\u7248\u9898\u7684\u6d41\u7a0b\n\n1. \u904d\u5386\u6587\u672c\u4e32\u7684\u6240\u6709\u524d\u7f00\u3002\n2. \u5c06\u6240\u6709\u662f\u8fd9\u4e2a\u524d\u7f00\u7684\u540e\u7f00\u7684\u6a21\u5f0f\u4e32\u51fa\u73b0\u6b21\u6570+1\u3002\uff08\u5373\u6cbf\u7740fail\u6307\u9488\u4e00\u76f4\u8d70\u5230\u6839\uff0c\u6cbf\u9014\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u7b26\u5408\u6761\u4ef6\u7684\uff09\n\n\u800c\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u56e0\u4e3a\u6587\u672c\u4e32\u6bcf\u6b21\u53ea\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u3002\u6240\u4ee5\u6211\u4eec\u5728\u4e0a\u4e00\u4e2a\u6587\u672c\u4e32\u7684\u57fa\u7840\u4e0a\uff0c\u52a0\u5165\u4ee5\u5f53\u524d\u8282\u70b9\u5230\u6839\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\u90a3\u8fd9\u9053\u9898\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u6bd4\u8f83\u6e05\u6670\u4e86\uff1a\n\n\u6211\u4eec\u5c06\u5b57\u7b26\u4e32$s$\u5b9a\u4e49\u4e3a\u5f53\u524d\u5b57\u5178\u6811\u8282\u70b9\u5230\u6839\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u6587\u672c\u4e32$s$\u5bf9\u5e94\u7684\u6a21\u5f0f\u4e32\u51fa\u73b0\u6b21\u6570\u7684\u8bb0\u4e3a$t[s]$\uff0c\u5c06\u6587\u672c\u4e32$s$\u5bf9\u5e94\u7684\u7b54\u6848\u8bb0\u4e3a$ans[s]$\n\n1. \u5efa\u51fa\u4e00\u4e2a\u6587\u672c\u4e32\u7ec4\u6210\u7684\u5b57\u5178\u6811\u3002\n2. \u5bf9\u5b57\u5178\u6811\u8fdb\u884cDFS\uff0c\u6bcf\u8d70\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u6240\u6709\u4e3as\u540e\u7f00\u7684\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570$t$\u52a01\u3002\n3. \u8bb0\u5f55\u7b54\u6848$ans[s]=t[s]$\u3002\n4. DFS\u56de\u6eaf\u65f6\uff0c\u5c06\u6240\u6709\u4e3as\u540e\u7f00\u7684\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570$t$\u51cf1\u3002\n\n\u56e0\u4e3a\u6240\u6709\u5b57\u7b26\u4e32\u957f\u5ea6\u548c$T$\u7684\u5927\u5c0f\u5173\u7cfb\uff0c$T^2$\u7b97\u6cd5\u662f\u8fc7\u4e0d\u4e86\u7684\u3002\u4f46\u662f\u56e0\u4e3a\u7d2f\u8ba1\u7b54\u6848\u662f\u5728$fail$\u6307\u9488\u6784\u6210\u7684\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u3002\u590d\u6742\u5ea6\u53d8\u6210\u4e86$T\\log T$\u3002\n\n\u4e2a\u4eba\u611f\u89c9\u8fd9\u9053\u9898\u7684\u5173\u952e\u5728\u4e8e\u5229\u7528AC\u81ea\u52a8\u673a\u201c\u6c42\u89e3\u5355\u6587\u672c\u4e32\u95ee\u9898\u65f6\u4f1a\u904d\u5386\u6587\u672c\u4e32\u7684\u6240\u6709\u524d\u7f00\u201d\u8fd9\u4e2a\u6027\u8d28\uff0c\u4ece\u800c\u6c42\u89e3\u7279\u6b8a\u7684\u591a\u6587\u672c\u4e32\u95ee\u9898\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<string>\n#include<vector>\n#define ll long long\n#define maxn (int)(4*1e5+1000)\nusing namespace std;\nint ans[maxn],ch[maxn][30],tr[maxn][30],c[maxn],queue[maxn],n,m,now_insert,tcnt,acnt,fcnt,ver_tr[maxn],fail[maxn],size[maxn],id[maxn];//id\u6307\u5728ac\u81ea\u52a8\u673a\u4e0a\u7684\u70b9\u5728fail\u6811\u4e0a\u7684\u7f16\u53f7\nbool is_end[maxn];\nchar s[10];\nstruct gg{\n    int lo,id,mod_ed;string add;//\u7248\u672c\u548c\u8be2\u95ee\u7684\u6a21\u5f0f\u4e32,\u4ee5\u53ca\u6a21\u5f0f\u4e32\u7ed3\u5c3e\u4f4d\u7f6e\u5728AC\u81ea\u52a8\u673a\u4e0a\u7684\u7f16\u53f7\n}query[maxn];\nvector<int>tr_ver[maxn],fail_son[maxn];\nvector<gg>so[maxn];//\u8bb0\u5f55\u6bcf\u4e2a\u7248\u672c\u7684\u8be2\u95ee\nvoid change(int now,int num) {\n    for(int i=now;i<=fcnt;i+=i&-i){c[i]+=num;}\n}\nint sum(int now) {\n    int re=0;for(int i=now;i>=1;i-=i&-i){re+=c[i];}return re;\n}\nint insert_ac(string data) {\n    int now=0;\n    for(int i=0;i<data.size();i++) {\n        int cha=data[i]-'a';\n        if(!ch[now][cha])ch[now][cha]=++acnt;\n        now=ch[now][cha];\n    }\n    is_end[now]=1;return now;\n}\nvoid build_ac() {\n    int l=1,r=0;\n    for(int i=0;i<30;i++)if(ch[0][i]){queue[++r]=ch[0][i];fail_son[0].push_back(ch[0][i]);}\n    while(l<=r) {\n        int now=queue[l];l++;\n        for(int i=0;i<30;i++) {\n            if(ch[now][i]) {\n                queue[++r]=ch[now][i];\n                fail[ch[now][i]]=ch[fail[now]][i];\n                fail_son[ch[fail[now]][i]].push_back(ch[now][i]);\n            }\n            else ch[now][i]=ch[fail[now]][i];\n        }\n    }\n}\nvoid dfs1(int now) {\n    id[now]=++fcnt;size[id[now]]=1;\n    for(int i=0;i<fail_son[now].size();i++){dfs1(fail_son[now][i]);size[id[now]]+=size[id[fail_son[now][i]]];}\n}\nvoid update(int now,int num) {//\u66f4\u6539AC\u81ea\u52a8\u673a\u4e0anow\u70b9\u6240\u6709\u513f\u5b50\n    change(id[now],num);\n}\nvoid get_ans(gg data,int fail_now) {\n    ans[data.id]=sum(fail_now+size[fail_now]-1)-sum(fail_now-1);\n}\nvoid dfs2(int tr_now,int ac_now) {\n    if(tr_now) {\n        update(ac_now, 1);//\u6240\u6709\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u52a0\u4e0a1\u3002\n        for (int i = 0; i < tr_ver[tr_now].size(); i++) {//\u679a\u4e3e\u4ee5\u5f53\u524d\u70b9\u7ed3\u5c3e\u7684\u6240\u6709\u7248\u672c\n            int now_ver = tr_ver[tr_now][i];//\u73b0\u5728\u7684\u5904\u7406\u7248\u672c\n            for (int j = 0; j < so[now_ver].size(); j++) {\n                gg now_qu = so[now_ver][j];//\u73b0\u5728\u5904\u7406\u7684\u8be2\u95ee\n                get_ans(now_qu,id[now_qu.mod_ed]);\n            }\n        }\n    }\n    for(int i=0;i<30;i++) {\n        if(tr[tr_now][i]) {\n            dfs2(tr[tr_now][i],ch[ac_now][i]);\n        }\n    }\n    if(tr_now) {\n        update(ac_now,-1);\n    }\n}\nint main() {\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) {\n        int ty;scanf(\"%d\",&ty);\n        if(ty==1) {\n            scanf(\"%s\",s);\n            now_insert=0;\n        }\n        else {\n            scanf(\"%d\",&now_insert);now_insert=ver_tr[now_insert];scanf(\"%s\",s);\n        }\n        int tar=s[0]-'a',now;\n        if(!tr[now_insert][tar])tr[now_insert][tar]=++tcnt;\n        now=tr[now_insert][tar];\n        tr_ver[now].push_back(i);\n        ver_tr[i]=now;\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++) {\n        scanf(\"%d\",&query[i].lo);cin>>query[i].add;query[i].mod_ed=insert_ac(query[i].add);query[i].id=i;\n        so[query[i].lo].push_back(query[i]);\n    }\n    build_ac();\n    dfs1(0);\n    dfs2(0,0);\n    for(int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n}\n```\n\n",
        "postTime": 1566946789,
        "uid": 43420,
        "name": "GavinZheng",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1207G \u3010Indie Album\u3011"
    }
]