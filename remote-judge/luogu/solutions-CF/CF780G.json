[
    {
        "content": "[$\\tt Link$](/problem/CF780G)\u3002\n\n\u6709\u4e9b\u7403\u5728\u67d0\u6b21\u6389\u843d\u540e\u4f1a\u5904\u4e8e\u76f8\u540c\u9ad8\u5ea6\uff0c\u76f8\u540c\u4f4d\u7f6e\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u7ec4\u5408\u4e3a\u4e00\u4e2a\u300c\u8282\u70b9\u300d\u3002\n\n\u5047\u8bbe\u626b\u63cf\u7ebf\u5230\u9694\u677f $l,r,u,s$\uff0c\u6211\u4eec\u8be2\u95ee $[l,r]$ \u91cc\u9ad8\u5ea6 $\\le\\min\\{h+1,u+s\\}$ \u7684\u300c\u8282\u70b9\u300d\u7684\u70b9\u603b\u6570\u5e76\u5c06\u8fd9\u4e9b\u300c\u8282\u70b9\u300d\u5220\u9664\uff0c\u8bb0\u70b9\u7684\u603b\u6570\u4e3a $v$\uff0c\u7136\u540e\u5c06 $u$ \u4e3a\u9ad8\uff0c$v$ \u4e3a\u70b9\u6570\u7ec4\u6210\u7684\u8282\u70b9\u52a0\u5165 $[l,r]$ \u4e24\u7aef\u3002\n\n\u8f85\u52a9\u4e0a\u8ff0\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u662f\u7ebf\u6bb5\u6811\u3002\u7ebf\u6bb5\u6811\u7684\u5e95\u5c42\u7ef4\u62a4\u6309\u9ad8\u5ea6\u6392\u5e8f\u7684\u6240\u6709\u8282\u70b9\u3002\uff08\u4f60\u53ef\u4ee5\u7528 `set`\uff0c`priority_queue`\uff09\u3002\u63d2\u5165\u5c31\u66b4\u529b\u63d2\uff0c$\\mathcal O(\\log w)$\u3002\u8be2\u95ee\uff0c\u56e0\u4e3a\u5df2\u7ecf\u6309\u9ad8\u5ea6\u6392\u597d\u5e8f\uff0c\u6240\u4ee5\u5bb9\u6613\u6309\u7167\u9ad8\u5ea6\u5220\u9664\u3002\n\n\u4f46\u662f\u4f60\u8be2\u95ee\u4e0d\u80fd\u66b4\u529b\u904d\u5386\u7136\u540e\u5220\u9664\u554a\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u662f\u9519\u7684\u3002\u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5b50\u6811\u6df1\u5ea6\u6700\u5c0f\u503c $v$\uff0c\u5982\u679c $v\\gt$ \u8be2\u95ee\u7684\u9ad8\u5ea6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b50\u6811\u5c31\u6ca1\u7528\u4e86\u3002\n\n\u590d\u6742\u5ea6\u5206\u6790\u89c1\u4e0b\u3002\n\n```cpp\nconst int N = 1e5 + 5;\nconst int S = N << 2;\nconst int mod = 1e9 + 7;\nconst int inf = 0x3f3f3f3f;\n\nint h,w,n,L[N],R[N],T[S];\n\nstruct barrier{ int u,l,r,s; } B[N];\nusing node = pair<int,int>;\n\npriority_queue<node> Q[N];\n\n#define lc (i << 1)\n#define rc (i << 1 | 1)\n#define mid ((L + R) >> 1)\n#define ls lc,L,mid\n#define rs rc,mid + 1,R\n#define id int i = 1,int L = 1,int R = w\n#define psu T[i] = min(T[lc],T[rc])\n\nvoid build(id){\n\tif(L == R) return Q[L].emplace(-(T[i] = h + 1),-1);\n\tbuild(ls); build(rs); psu;\n}\n\nvoid upd(int p,int h,int v,id){\n\tif(L == R){\n\t\tQ[L].emplace(-h,-v);\n\t\treturn void(T[i] = -Q[L].top().first);\n\t}\n\tp <= mid ? upd(p,h,v,ls) : upd(p,h,v,rs); psu;\n}\n\nint qry(int l,int r,int x,id){\n\tif(T[i] > x) return 0;\n\tint sum = 0;\n\tif(L == R){\n\t\twhile(Q[L].size() && -Q[L].top().first <= x)\n\t\t\t(sum += -Q[L].top().second) %= mod,Q[L].pop();\n\t\tT[i] = Q[L].size() ? -Q[L].top().first : inf;\n\t\treturn sum;\n\t}\n\tif(l <= mid) sum += qry(l,r,x,ls);\n\tif(r > mid) (sum += qry(l,r,x,rs)) %= mod;\n\tpsu; return sum;\n}\n\nint main(){\n\tread(h,w,n);\n\trep(i,1,n) read(B[i].u,B[i].l,B[i].r,B[i].s);\n\tsort(B + 1,B + n + 1,[](auto a,auto b){return a.u > b.u;});\n\tbuild();\n\trep(i,1,n){\n\t\tint x = qry(B[i].l,B[i].r,min(h + 1,B[i].s + B[i].u));\n\t\tif(B[i].l != 1) upd(B[i].l - 1,B[i].u,x * ((B[i].r == w) + 1) % mod);\n\t\tif(B[i].r != w) upd(B[i].r + 1,B[i].u,x * ((B[i].l == 1) + 1) % mod);\n\t}\n\tprint(qry(1,w,inf));\n\treturn 0;\n}\n```\n\n+ \u6211\u4eec\u8ba4\u4e3a $n,w$ \u540c\u9636\u3002\n+ \u521d\u59cb\u7403\u7684\u6570\u91cf\u662f $\\mathcal O(w)$\uff0c\u800c\u8ba9\u7403\u6570\u91cf\u53d1\u751f\u53d8\u5316\u7684 `upd` \u51fd\u6570\u53ea\u4f1a\u8fdb\u884c $\\mathcal O(n)$ \u6b21\uff0c\u6240\u4ee5\u7403\u7684\u603b\u6570\u662f $\\mathcal O(n)$ \u7684\u3002\n+ \u5bf9\u4e8e\u843d\u5230\u4e00\u5757\u9694\u677f\u7684\u7403\uff0c\u5b83\u4eec\u4f1a\u5408\u5e76\u4e3a\u4e00\u4e2a\n+ \u5bf9\u4e8e\u6ca1\u843d\u5230\u4e00\u5757\u9694\u677f\u7684\u7403\uff0c\u5b83\u4eec\u4e0d\u4f1a\u88ab\u518d\u7528\u5230\uff08\u56e0\u4e3a\u9694\u677f\u6309\u9ad8\u5ea6\u964d\u5e8f\uff09\n+ \u6240\u4ee5\u590d\u6742\u5ea6\u6b63\u786e",
        "postTime": 1658287510,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "CF780G Andryusha and Nervous Barriers"
    },
    {
        "content": "## \u9898\u610f\n\n\u6709\u4e00\u4e2a\u9ad8 $h$\uff0c\u5bbd $w$ \u7684\u5730\u56fe\uff0c\u6709\u4e00\u4e9b\u7403\u4ece\u9ad8\u5ea6\u4e3a $h + 1$ \u7684\u76f4\u7ebf\u5904\u5f00\u59cb\u4e0b\u843d\u3002\u540c\u65f6\u4f1a\u6709 $n$ \u4e2a\u6321\u677f\uff0c\u6bcf\u4e00\u4e2a\u6321\u677f\u90fd\u6709\u5de6\u53f3\u7aef\u70b9 $l_i, r_i$ \u548c\u4e00\u4e2a\u9ad8\u5ea6 $u_i$\u3002\u5230\u8fbe\u6321\u677f\u65f6\uff0c\u5982\u679c\u5c0f\u7403\u4ece\u4e0a\u6b21\u5206\u88c2\u524d\u4e0b\u843d\u7684\u9ad8\u5ea6\u5927\u4e8e $s_i$\uff0c\u5c31\u4f1a\u76f4\u63a5\u7a7f\u8fc7\uff1b\u5426\u5219\u4f1a\u5206\u88c2\u540e\u4ece\u6321\u677f\u7684\u4e24\u4fa7\u8fb9\u7f18\u5904\u5206\u522b\u4e0b\u843d\uff08\u5982\u679c\u6709\u4e00\u4fa7\u5230\u4e86\u8fb9\u754c\uff0c\u90a3\u4e48\u5c31\u4f1a\u90fd\u4ece\u53e6\u4e00\u4fa7\u8fb9\u7f18\u4e0b\u843d\uff09\n\n## \u5206\u6790\n\n\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u4f3c\u4e4e\u53ef\u4ee5\u626b\u63cf\u7ebf\uff0c\u4e8e\u662f\u8003\u8651\u5982\u4f55\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5c0f\u7403\u7684\u603b\u6570\u548c\u5f53\u524d\u4e0b\u843d\u7684\u9ad8\u5ea6\u3002\u4e3a\u4e86\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u6240\u6709\u5c0f\u7403\u7684\u96c6\u5408\uff08\u53ea\u5728\u53f6\u5b50\u8282\u70b9\u5904\u7ef4\u62a4\uff09\u3002\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a\u4e00\u4e2a\u6321\u677f\u4f1a\u51cf\u5c11\u81f3\u5c11 $1$ \u4e2a\u96c6\u5408\uff0c\u540c\u65f6\u81f3\u591a\u65b0\u589e $2$ \u4e2a\u96c6\u5408\u3002\u4e0d\u96be\u770b\u51fa\uff0c\u6700\u591a\u4f1a\u6709 $w + n$ \u4e2a\u96c6\u5408\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u5728\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7ef4\u62a4\u4e00\u4e2a `priority_queue`\uff0c\u7528\u5c0f\u6839\u5806\u7ef4\u62a4\u5f53\u524d\u7684\u6700\u4f4e\u9ad8\u5ea6\u3002\u4ece\u4e0a\u5230\u4e0b\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6321\u677f\uff0c\u7ef4\u62a4\u5728\u8fd9\u4e2a\u6321\u677f\u533a\u95f4\u5185\u7684\u7403\u7684\u6570\u91cf\uff0c\u5728\u5c06\u5b83\u4eec `pop` \u6389\u7684\u540c\u65f6\u5728\u4e24\u8fb9\u65b0\u589e\u4e24\u4e2a\u7403\u7684\u96c6\u5408\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u5bf9\u4e8e\u4e00\u6a21\u4e00\u6837\u7684\u7403\uff08\u4f4d\u7f6e\u4e0e\u5f00\u59cb\u4e0b\u843d\u4f4d\u7f6e\u76f8\u540c\uff09\uff0c\u8981\u76f4\u63a5\u8bb0\u5f55\u6570\u91cf\u800c\u4e0d\u662f\u4e00\u4e2a\u4e2a `push` \u8fdb\u5165 `priority_queue`\u3002\u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u4e0d\u70b8\u7a7a\u95f4\u4e86\u3002\n\n\u4f46\u662f\uff0c\u53d1\u73b0\u6b64\u65f6\u7684\u590d\u6742\u5ea6\u5e76\u4e0d\u662f\u975e\u5e38\u7684\u6b63\u786e\uff0c\u4e8e\u662f\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u526a\u679d\uff1a\u7ef4\u62a4\u5f53\u524d\u533a\u95f4\u5185\u7684\u6700\u5c0f\u9ad8\u5ea6\u503c\u3002\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u6709\u7528\u7684\u6321\u677f\u90fd\u4f1a\u81f3\u5c11\u5c11\u6389\u4e00\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u6700\u591a $n$ \u6b21\u649e\u51fb\u4e4b\u540e\u5c31\u4f1a\u5168\u53d8\u6210 `inf`\u3002\u8fd9\u65f6\u6211\u4eec\u5c31\u4f1a\u62e5\u6709\u4e00\u4e2a\u6b63\u786e\u7684 $O(n\\log n)$ \u7684\u590d\u6742\u5ea6\u4e86\u3002\n\n## \u4ee3\u7801\n\n```cpp\n// ...\u5feb\u8bfb...\n#include <algorithm>\n#include <queue>\nconst int mod = 1e9 + 7;\nint h, w, n;\ninline int min(const int &x, const int &y) { return x < y ? x : y; }\ninline int max(const int &x, const int &y) { return x < y ? y : x; }\nstruct barrier {\n\tint h, l, r, s;\n} a[100010];\ninline bool operator < (const barrier &x, const barrier &y) { return x.h > y.h; }\nint L[400010], R[400010];\nint minh[400010];\nstd::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int> >,\n\t\t\t\t\tstd::greater<std::pair<int, int> > > pq[400010]; // \u5728\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7ef4\u62a4 priority_queue\ninline void build(int k, int l, int r) {\n\tL[k] = l, R[k] = r;\n\tif (l == r) {\n\t\tpq[k].push({h + 1, 1});\n\t\tminh[k] = h + 1;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(k << 1, l, mid);\n\tbuild(k << 1 | 1, mid + 1, r);\n\tminh[k] = min(minh[k << 1], minh[k << 1 | 1]); // \u7ef4\u62a4\u6700\u5c0f\u503c\n}\ninline int query(int k, int l, int r, int x) {\n\tif (minh[k] > x) return 0; // \u526a\u679d\n\tif (L[k] == R[k]) {\n\t\tint res = 0;\n\t\tfor (; pq[k].size() && pq[k].top().first <= x; )\n\t\t\tres = (res + pq[k].top().second) % mod, pq[k].pop();\n\t\tif (!pq[k].size()) minh[k] = 0x3f3f3f3f;\n\t\telse minh[k] = pq[k].top().first;\n\t\treturn res;\n\t}\n\tint mid = (L[k] + R[k]) >> 1, res = 0;\n\tif (l <= mid) res = (res + query(k << 1, l, r, x)) % mod;\n\tif (mid < r) res = (res + query(k << 1 | 1, l, r, x)) % mod;\n\tminh[k] = min(minh[k << 1], minh[k << 1 | 1]);\n\treturn res;\n}\ninline void modify(int k, int pos, int h, int val) {\n\tif (L[k] == R[k]) {\n\t\tpq[k].push({h, val});\n\t\tminh[k] = pq[k].top().first;\n\t\treturn;\n\t}\n\tint mid = (L[k] + R[k]) >> 1;\n\tif (pos <= mid) modify(k << 1, pos, h, val);\n\telse modify(k << 1 | 1, pos, h, val);\n\tminh[k] = min(minh[k << 1], minh[k << 1 | 1]);\n}\nint main() {\n\tcio.scan(h, w, n);\n\tfor (int i = 1; i <= n; ++ i)\n\t\tcio.scan(a[i].h, a[i].l, a[i].r, a[i].s);\n\tstd::sort(a + 1, a + n + 1);\n\tbuild(1, 1, w);\n\tfor (int i = 1, v; i <= n; ++ i) {\n\t\tv = query(1, a[i].l, a[i].r, min(h + 1, a[i].h + a[i].s));\n\t\tif (a[i].l == 1) modify(1, a[i].r + 1, a[i].h, 2 * v % mod);\n\t\telse if (a[i].r == w) modify(1, a[i].l - 1, a[i].h, 2 * v % mod);\n\t\telse modify(1, a[i].r + 1, a[i].h, v), modify(1, a[i].l - 1, a[i].h, v);\n\t}\n\tcio.print(query(1, 1, w, 0x3f3f3f3f));\n}\n```",
        "postTime": 1658237404,
        "uid": 228486,
        "name": "SunsetSamsara",
        "ccfLevel": 7,
        "title": "CF780G Andryusha and Nervous Barriers \u9898\u89e3"
    },
    {
        "content": "\u6a21\u62df\u8d5b\u8003\u4e86\u8fd9\u9898\uff0c\u5199\u4e86\u4e2a\u6811\u5957\u6811\u6ca1\u8c03\u51fa\u6765/px\n\n\u8fd9\u9053\u9898\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u601d\u7ef4\u96be\u5ea6\uff0c\u662f\u4e00\u4e2a\u4e09\u7ef4\u6570\u70b9\u7684\u677f\u5b50\uff0c\u6bcf\u4e2a\u677f\u5b50\u53ef\u4ee5\u63a5\u4f4f\u6b63\u4e0a\u65b9\u4e00\u4e2a $s_i\\times(r_i-l_i+1)$ \u7684\u77e9\u5f62\u5185\u7684\u7403\uff0c\u53ef\u4ee5\u7528\u6811\u5957\u6811\u7ef4\u62a4\u3002\n\n\u4f46\u662f\u5185\u5c42\u518d\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4f1a\u70b8\u7a7a\u95f4\uff08\u6211\u4eec\u6a21\u62df\u8d5b\u9650\u5236 256MB\uff09\uff0c~~\u5e76\u4e14\u4e0d\u597d\u5199\uff0c\u4e0d\u597d\u8c03~~\uff0c\u6211\u4eec\u8003\u8651\u6362\u4e2a\u65b9\u6cd5\u3002\n\n\u6ce8\u610f\u5230\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u6240\u6709\u7403\uff0c\u4e00\u4e2a\u677f\u5b50\u80fd\u63a5\u5230\u7684\u4e00\u5b9a\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u5806\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7403\u7684\u9ad8\u5ea6\uff0c\u6570\u91cf\u5373\u53ef\u3002\n\n\u7136\u540e\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u7684\u6700\u5c0f\u9ad8\u5ea6\u7528\u6765\u526a\u679d\uff0c\u9632\u6b62\u5728\u65e0\u7528\u533a\u95f4\u6d6a\u8d39\u65f6\u95f4\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u677f\u5b50\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u77e9\u5f62\u5185\u67e5\u8be2\uff0c\u7edf\u8ba1\u7b54\u6848\uff0c\u7136\u540e\u5206\u522b\u5728\u677f\u5b50\u4e24\u4fa7\u52a0\u5165\u540c\u6837\u6570\u91cf\u7684\u7403\u5373\u53ef\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nusing namespace std;\n#define int long long\nconst int mod=1000000007;\nstruct board\n{\n\tint h,l,r,s;\n\tbool operator <(const board &other) const\n\t{\n\t\treturn h>other.h;\n\t}\n}a[100001];\nint maxn,w,n,sum,ans[100001<<2];\npriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q[100001];\ninline int read()\n{\n\tint x=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t\tc=getchar();\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x;\n}\ninline int ls(int k)\n{\n\treturn k<<1;\n}\ninline int rs(int k)\n{\n\treturn k<<1|1;\n}\ninline void push_up(int k)\n{\n\tans[k]=min(ans[ls(k)],ans[rs(k)]);\n}\nvoid build(int k,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tq[l].push(make_pair(maxn+1,1));\n\t\tans[k]=maxn+1;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(ls(k),l,mid);\n\tbuild(rs(k),mid+1,r);\n\tpush_up(k);\n}\nvoid update(int node,int l,int r,int k,int p,int h)\n{\n\tif(l==r)\n\t{\n\t\tq[l].push(make_pair(h,p));\n\t\tans[k]=min(ans[k],h);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(node<=mid)\n\t\tupdate(node,l,mid,ls(k),p,h);\n\telse\n\t\tupdate(node,mid+1,r,rs(k),p,h);\n\tpush_up(k);\n}\nint query(int nl,int nr,int l,int r,int k,int h,int s)\n{\n\tif(ans[k]>h+s)\n\t\treturn 0;\n\tif(l==r)\n\t{\n\t\tint res=0;\n\t\twhile(!q[l].empty()&&q[l].top().first<=h+s)\n\t\t{\n\t\t\tres=(res+q[l].top().second)%mod;\n\t\t\tq[l].pop();\n\t\t}\n\t\tans[k]=q[l].empty()? 1e10+7:q[l].top().first;\n\t\treturn res;\n\t}\n\tint mid=(l+r)>>1,res=0;\n\tif(nl<=mid)\n\t\tres=(res+query(nl,nr,l,mid,ls(k),h,s))%mod;\n\tif(nr>mid)\n\t\tres=(res+query(nl,nr,mid+1,r,rs(k),h,s))%mod;\n\tpush_up(k);\n\treturn res;\n}\nsigned main()\n{\n\tmaxn=read(),w=read(),n=read();\n\tfor(register int i=1;i<=n;++i)\n\t\ta[i].h=read(),a[i].l=read(),a[i].r=read(),a[i].s=read();\n\tsum=w;\n\tbuild(1,1,w);\n\tsort(a+1,a+n+1);\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tint tmp=query(a[i].l,a[i].r,1,w,1,a[i].h,a[i].s);\n\t\tsum=(sum+tmp)%mod;\n\t\tif(a[i].l==1)\n\t\t\tupdate(a[i].r+1,1,w,1,(tmp<<1)%mod,a[i].h);\n\t\telse\n\t\t\tif(a[i].r==w)\n\t\t\t\tupdate(a[i].l-1,1,w,1,(tmp<<1)%mod,a[i].h);\n\t\t\telse\n\t\t\t{\n\t\t\t\tupdate(a[i].l-1,1,w,1,tmp,a[i].h);\n\t\t\t\tupdate(a[i].r+1,1,w,1,tmp,a[i].h);\n\t\t\t}\n\t}\n\tprintf(\"%lld\\n\",sum);\n\treturn 0;\n}\n```\n",
        "postTime": 1620563317,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF780G \u3010Andryusha and Nervous Barriers\u3011"
    },
    {
        "content": "dp[i]\u8868\u793a\u4e00\u4e2a\u5c0f\u7403\u4ece\u7b2ci\u4e2a\u969c\u788d\u4e0b\u843d\u6700\u540e\u4f1a\u5206\u89e3\u6210dp[i]\u4e2a\n\n\u8003\u8651\u7528\u6811\u5957\u6811\uff08\u7ebf\u6bb5\u6811\u5957set\uff09\u7ef4\u62a4\u626b\u63cf\u7ebf\uff0c\u4ece\u5e95\u5f80\u4e0a\u626b\u66f4\u65b0dp\u503c\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#define int long long\nusing namespace std;\ninline int read(){int x=0,f=1; char ch=getchar(); while(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();} while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();} return x*f;}\ninline void write(int x){if (x<0) putchar('-'),x=-x; if (x>=10) write(x/10); putchar(x%10+'0');}\ninline void writeln(int x){write(x); puts(\"\");}\nconst int maxn=1e5+5,mod=1e9+7;\nstruct node{\n\tint h,l,r,s;\n}e[maxn];\nstruct event{\n\tint id,h,opt;\n}b[maxn<<1];\nstruct tree{\n\tint h,id;\n\tbool operator <( const tree a)const {\n\t\treturn h>a.h;\n\t}\n};\nset<tree> a[maxn<<2];\nint height,ID,tot,H,w,n,dp[maxn];\ninline void init(){\n\tH=read(); w=read(); n=read();\n\tfor (int i=1;i<=n;i++){\n\t\tint h=read(),l=read(),r=read(),s=read();\n\t\te[i]=(node){h,l,r,s};\n\t\tb[++tot]=(event){i,h,1};\n\t\tif (h+s<=H) b[++tot]=(event){i,h+s+1,0};\n\t}\n}\ninline bool cmp(event a,event b){\n\tif (a.h==b.h) return a.opt<b.opt;\n\treturn a.h<b.h;\n}\nvoid update(int k,int l,int r,int x,int y,int opt){\n\tint mid=(l+r)>>1;\n\tif (l==x&&r==y){\n\t\tif (opt==0) a[k].erase((tree){height,ID});\n\t\t\telse a[k].insert((tree){height,ID}); \n\t\treturn;\n\t}\n\tif (mid>=y) update(k<<1,l,mid,x,y,opt);\n\t\telse if (mid<x) update(k<<1|1,mid+1,r,x,y,opt);\n\t\t\telse update(k<<1,l,mid,x,mid,opt),update(k<<1|1,mid+1,r,mid+1,y,opt);\n}\ntree ans;\nvoid query(int k,int l,int r,int x){\n\tif (!a[k].empty()){\n\t\ttree temp=* a[k].begin();\n\t\tif (temp<ans) {\n\t\t\tans=temp;\n\t\t}\n\t}\n\tif (l==r){\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif (mid>=x) query(k<<1,l,mid,x);\n\t\telse query(k<<1|1,mid+1,r,x);\n}\ninline int query(int x){\n\tans=(tree){-1,-1};\n\tquery(1,1,w,x);\n\tif (ans.id==-1) return 1;\n\t\telse return dp[ans.id];\n}\ninline void solve(){\n\tsort(b+1,b+1+tot,cmp);\n\tfor (int i=1;i<=tot;i++){\n\t\tID=b[i].id;\n\t\tnode now=e[ID];\n\t\theight=now.h;\n\t\tif (b[i].opt==0){\n\t\t\tupdate(1,1,w,now.l,now.r,0);\n\t\t}else{\n\t\t\tif (now.l==1) dp[ID]=query(now.r+1)*2%mod;\n\t\t\t\telse if (now.r==w) dp[ID]=query(now.l-1)*2%mod;\n\t\t\t\t\telse (dp[ID]=query(now.l-1)+query(now.r+1))%=mod;\n\t\t\tupdate(1,1,w,now.l,now.r,1);\n\t\t}\n\t}\n\tint res=0;\n\tfor (int i=1;i<=w;i++){\n\t\t(res+=query(i))%=mod;\n\t}\n\twriteln(res);\n}\nsigned main(){\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1539733170,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF780G \u3010Andryusha and Nervous Barriers\u3011"
    },
    {
        "content": "\u6765\u4e2a\u4e0d\u4e00\u6837\u7684\u505a\u6cd5\uff1a\u626b\u63cf\u7ebf\uff0c\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u3002\n\n### \u601d\u8def\n\u6211\u4eec\u53d1\u73b0\u53ea\u9700\u627e\u5230\u5c0f\u7403\u843d\u5230\u6bcf\u4e2a\u6321\u677f\u540e\u7684\u4e0b\u4e00\u4e2a\u6321\u677f\uff0c\u5c31\u53ef\u4ee5\u5efa\u51fa\u4e00\u5f20 DAG\uff0c\u5728 DAG \u4e0a\u7b80\u5355 DP \u5373\u53ef\u6c42\u65b9\u6848\u3002  \n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u600e\u4e48\u5efa\u56fe\u3002  \n\u5927\u591a\u4eba\u7528\u626b\u63cf\u7ebf\u662f\u4ece\u4e0b\u5230\u4e0a\u626b\u63cf\u7684\uff0c\u4f46\u6211\u4eec\u8003\u8651\u4ece\u5de6\u5230\u53f3\u626b\u63cf\u3002  \n\u6211\u4eec\u5728\u6321\u677f\u5de6\u7aef\u505a\u52a0\u5165\u64cd\u4f5c\uff0c\u53f3\u7aef\u505a\u5220\u9664\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u626b\u63cf\u4e2d\u6bcf\u4e00\u4e2a\u6a2a\u5750\u6807\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u51fa\u6bcf\u4e2a\u9ad8\u5ea6\u7684\u6321\u677f\u7f16\u53f7\u3002  \n\u5bf9\u4e8e\u7b2c $i$ \u53f7\u6321\u677f\uff0c\u6211\u4eec\u9700\u8981\u5728\u6a2a\u5750\u6807\u4e3a $l_i-1$ \u548c $r_i+1$ \u65f6\uff0c\u627e\u5230\u6700\u9ad8\u7684\u6321\u677f $j$\uff0c\u6ee1\u8db3 $u_j < u_i$ \u4e14 $u_j + s_j \\geq u_i$\u3002  \n\u663e\u7136\uff0c\u6211\u4eec\u53ea\u8981\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u533a\u95f4 $u_j + s_j$ \u7684\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff0c\u5bf9\u6bcf\u4e2a $i$ \u6c42\u51fa\u5bf9\u5e94\u7684 $j$\u3002  \n\u65f6\u95f4\u590d\u6742\u5ea6 $O((n + w)\\log{n})$\u3002  \n\n### \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+5;\nconst int MOD=1e9+7;\nint Add(int a,int b){\n\treturn (a+b)%MOD;\n}\nint Mul(int a,int b){\n\treturn 1ll*a*b%MOD;\n}\nint h,w,n,u[N],s[N],ord[N],rk[N],cnt,f[N];\nvector<int> lh,ne[N];\nstruct operation{\n\tint t,id,x;\n\tbool operator < (const operation &B) const{\n\t\t//\u6ce8\u610f\u6392\u5e8f\u65f6\u7684\u4f18\u5148\u7ea7\uff0c\u8fd9\u4e2a\u9700\u8981\u5168\u9762\u7684\u8003\u8651 \n\t\tif(x!=B.x){\n\t\t\treturn x<B.x;\n\t\t}else{\n\t\t\tif(t!=B.t){\n\t\t\t\treturn t<B.t;\n\t\t\t}else{\n\t\t\t\tif(t){\n\t\t\t\t\treturn u[id]>u[B.id];\n\t\t\t\t}else{\n\t\t\t\t\treturn u[id]<u[B.id];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}op[2*N];\nstruct SGT{//\u7ebf\u6bb5\u6811 \n\tstruct node{\n\t\tint l,r,val;\n\t}tree[4*N];\n\tvoid pushup(int p){\n\t\ttree[p].val=max(tree[2*p].val,tree[2*p+1].val);\n\t}\n\tvoid build(int p,int l,int r){\n\t\ttree[p]={l,r,0};\n\t\tif(l<r){\n\t\t\tint mid=(l+r)/2;\n\t\t\tbuild(2*p,l,mid);\n\t\t\tbuild(2*p+1,mid+1,r);\n\t\t}\n\t}\n\tvoid modify(int p,int x,int v){\n\t\tint l1=tree[p].l,r1=tree[p].r;\n\t\tif(l1==r1){\n\t\t\ttree[p].val=u[v]+s[v];\n\t\t}else{\n\t\t\tint mid=(l1+r1)/2;\n\t\t\tif(x<=mid){\n\t\t\t\tmodify(2*p,x,v);\n\t\t\t}else{\n\t\t\t\tmodify(2*p+1,x,v);\n\t\t\t}\n\t\t\tpushup(p);\n\t\t}\n\t}\n\tint query(int p,int x,int v){\n\t\tint res=0;\n\t\tif(x){\n\t\t\tint l1=tree[p].l,r1=tree[p].r;\n\t\t\tif(l1==r1){\n\t\t\t\tif(tree[p].val>=v){\n\t\t\t\t\tres=r1;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tint mid=(l1+r1)/2;\n\t\t\t\tif(x>mid){\n\t\t\t\t\tres=query(2*p+1,x,v);\n\t\t\t\t}\n\t\t\t\tif(!res&&tree[2*p].val>=v){\n\t\t\t\t\tres=query(2*p,x,v);\n\t\t\t\t}\n\t\t\t\t//\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u7684\u7cbe\u9ad3\u5728\u4e8e\u4e0a\u9762\u7684\u4e24\u4e2aif\uff0c\u5982\u679c\u5199\u9519\u590d\u6742\u5ea6\u5c31\u4f1a\u4e0d\u5bf9 \n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}tr;\nint main(){\n\tscanf(\"%d%d%d\",&h,&w,&n);\n\tfor(int i=1;i<=n;i++){\n\t\tint l,r;\n\t\tscanf(\"%d%d%d%d\",&u[i],&l,&r,&s[i]);\n\t\tord[i]=i;\n\t\tif(l-1){\n\t\t\top[++cnt]={1,i,l-1};\n\t\t}else{\n\t\t\tlh.push_back(i);//\u6240\u6709\u9760\u52301\u7684\u6321\u677f\u7279\u6b8a\u5904\u7406 \n\t\t}\n\t\tif(r+1<=w){\n\t\t\top[++cnt]={0,i,r+1};\n\t\t}\n\t}\n\tsort(ord+1,ord+n+1,[&](int x,int y){\n\t\treturn u[x]<u[y];\n\t});\n\tfor(int i=1;i<=n;i++){\n\t\trk[ord[i]]=i;\n\t}\n\t//ord[i]\u6307\u7b2ci\u4f4e\u7684\u6321\u677f\u7f16\u53f7\uff0crk[i]\u6307\u6321\u677fi\u7684\u9ad8\u5ea6\u6392\u540d \n\tsort(op+1,op+cnt+1);\n\ttr.build(1,1,n);\n\tfor(int i=0;i<lh.size();i++){\n\t\ttr.modify(1,rk[lh[i]],lh[i]);//\u4e00\u5b9a\u8981\u52a0\u5165\u9760\u52301\u7684\u6321\u677f \n\t}\n\tfor(int i=1,j=1;i<=w;i++){\n\t\twhile(j<=cnt&&op[j].x==i&&!op[j].t){\n\t\t\tint idx=op[j].id;\n\t\t\ttr.modify(1,rk[idx],0);//\u5220\u9664\u6321\u677f \n\t\t\tne[rk[idx]].push_back(tr.query(1,rk[idx]-1,u[idx]));\n\t\t\tj++;\n\t\t}\n\t\tf[tr.query(1,n,h+1)]++;\n\t\twhile(j<=cnt&&op[j].x==i&&op[j].t){\n\t\t\tint idx=op[j].id;\n\t\t\tne[rk[idx]].push_back(tr.query(1,rk[idx]-1,u[idx]));\n\t\t\ttr.modify(1,rk[idx],idx);//\u52a0\u5165\u6321\u677f \n\t\t\tj++;\n\t\t}\n\t}\n\tfor(int i=n;i>=1;i--){\n\t\tif(ne[i].size()==1){\n\t\t\tf[ne[i][0]]=Add(f[ne[i][0]],Mul(2,f[i]));\n\t\t}else{\n\t\t\tf[ne[i][0]]=Add(f[ne[i][0]],f[i]);\n\t\t\tf[ne[i][1]]=Add(f[ne[i][1]],f[i]);\n\t\t}\n\t}\n\t//DAG\u4e0aDP \n\tprintf(\"%d\",f[0]);\n\treturn 0;\n}\n```",
        "postTime": 1672629231,
        "uid": 344354,
        "name": "yanghanyv",
        "ccfLevel": 0,
        "title": "CF780G Andryusha and Nervous Barriers \u9898\u89e3"
    },
    {
        "content": "[$\\text{Link}$](https://www.luogu.com.cn/problem/CF780G)\n\n\u63d0\u4f9b\u4e00\u4e2a\u66b4\u529b\u505a\u6cd5\uff0c\u6a21\u62df\u8d5b\u65f6\u8fc7\u4e86\u3002\n## \u9898\u610f\n\u6709\u4e00\u4e2a $h\\times w$ \u7684\u5c4f\u5e55\uff0c\u5c4f\u5e55\u4e0a\u65b9\u6bcf\u5217\u6709\u4e00\u4e2a\u5c0f\u7403\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u4eec\u7684\u521d\u59cb\u9ad8\u5ea6\u4e3a $h+1$\u3002\u5c0f\u7403\u4f1a\u6cbf\u6240\u5728\u5217\u7ad6\u76f4\u4e0b\u843d\u3002\n\n\u5c4f\u5e55\u4e0a\u6709 $n$ \u4e2a\u6321\u677f\uff0c\u7b2c $i$ \u4e2a\u6321\u677f\u5728 $u_i$ \u7684\u9ad8\u5ea6\uff0c\u4f4d\u4e8e $[l_i,r_i]$ \u4e4b\u95f4\u7684\u5217\uff0c\u62e5\u6709\u5c5e\u6027 $s_i$\u3002\n\n\u5177\u4f53\u5730\uff0c\u5f53\u4e00\u4e2a\u4ece\u9ad8\u5ea6 $t$ \u5f00\u59cb\u6389\u843d\u7684\u5c0f\u7403\u843d\u5728\u6321\u677f $i$ \u4e0a\u65f6\uff0c\n- \u82e5 $i>u_i+s_i$\uff0c\u5219 $i$ \u4f1a\u76f4\u63a5\u7a7f\u8fc7\u5f53\u524d\u6321\u677f\uff08\u4e0d\u91cd\u65b0\u8ba1\u7b97\u5f00\u59cb\u6389\u843d\u9ad8\u5ea6\uff09\uff1b\n- \u5426\u5219\uff0c\u8be5\u7403\u4f1a\u5206\u88c2\u4e3a\u4e24\u4e2a\u5c0f\u7403\uff0c\u5206\u522b\u5728 $l_i-1$ \u548c $r_i+1$ \u5217\uff0c\u4ece\u9ad8\u5ea6\u4e3a $u_i$ \u7684\u5730\u65b9\u5f00\u59cb\u4e0b\u843d\u3002\u82e5\u4e0a\u9762\u4e24\u5217\u6709\u4e00\u4e2a\u4e0d\u5728\u5c4f\u5e55\u5185\uff0c\u5219\u5bf9\u5e94\u7684\u5c0f\u7403\u53d8\u5230\u53e6\u4e00\u8fb9\u3002\n\n\u4fdd\u8bc1\u4e00\u884c\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u6321\u677f\u3002\n\n$n,w\\le 10^5$\uff0c$h_i\\le 10^9$\u3002\n\n## \u601d\u8def\n\u58f0\u660e\uff1a\u672c\u9898\u89e3\u4ec5\u4e3a\u6bd4\u8f83\u4f18\u79c0\u7684\u66b4\u529b\uff0c\u8fc7\u4e86 CF \u6570\u636e\u3002\u5982\u6709\u9700\u8981\u8bf7\u5ffd\u7565\u672c\u9898\u89e3\u3002\n\n\u8003\u8651\u5230\u9664\u4e86 $h+1$ \u884c\uff0c\u6bcf\u4e00\u884c\u90fd\u6700\u591a\u53ea\u6709 $2$ \u5217\u6709\u5c0f\u7403\u3002\n\n\u5bf9\u4e8e\u7b2c $h+1$ \u884c\uff0c\u7ef4\u62a4\u5e76\u67e5\u96c6\u4ee5\u652f\u6301\u5feb\u901f\u5220\u9664/\u67e5\u627e\u533a\u95f4\u5269\u4f59\u5c0f\u7403\u4f4d\u7f6e\u3002\u548c[\u8fd9\u4e2a](https://www.luogu.com.cn/discuss/372365)\u4e00\u6837\u3002\uff08\u8fd9\u90e8\u5206\u590d\u6742\u5ea6\u662f\u6b63\u786e\u7684\uff09\n\n\u5bf9\u4e8e\u5176\u4f59\u884c\uff0c\u5bf9\u6240\u6709\u6709\u7403\u7684\u884c\u7ef4\u62a4 `set`\uff0c\u6bcf\u6b21\u67e5\u8be2\u3001\u5220\u9664\u65f6\u904d\u5386\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u884c\uff0c\u5e76\u5c06\u5176\u533a\u95f4\u5185\u7684\u70b9\u5220\u53bb\u3002\n\n\u590d\u6742\u5ea6\u6b63\u786e\u7684\u505a\u6cd5\u6709 `KD-Tree`\uff0c\u7ebf\u6bb5\u6811\u5bf9\u5217\u7ef4\u62a4 `set` \u4e4b\u7c7b\uff0c\u5176\u4f59\u9898\u89e3\u6709\u8bb2\uff0c\u4e14\u90fd\u8f83\u4e3a\u76f4\u89c2\uff0c\u672c\u9898\u89e3\u4fbf\u4e0d\u505a\u8bf4\u660e\u3002\n\n\u4ee3\u7801\uff1a\n\n\u751a\u81f3\u8dd1\u5230\u4e86\u6700\u4f18\u89e3\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nnamespace IO{//by cyffff\n\t\n}\nconst int N=3e5+10,mod=1e9+7;\nint h,w,n;\nstruct block{\n\tint u,l,r,s;\n\tinline friend bool operator<(const block &a,const block &b){\n\t\treturn a.u>b.u;\n\t}\n}b[N];\nvector<int>num;\ninline int find(int x){\n\treturn lower_bound(num.begin(),num.end(),x)-num.begin()+1;\n}\nint f[N];\ninline int findf(int x){\n\treturn x==f[x]?x:f[x]=findf(f[x]);\n}\nstruct node{\n\tint u;\n\tmutable int p1,p2,c;\n\tint cc;\n\tinline friend bool operator<(const node &a,const node &b){\n\t\treturn a.u>b.u;\n\t}\n\tinline friend bool operator<(const node &a,const int &b){\n\t\treturn a.u>b;\n\t}\n};\nset<node>hx;\ninline bool ins(int x,int l,int r){\n\treturn l<=x&&x<=r;\n}\nint main(){\n\th=read(),w=read(),n=read();\n\tfor(int i=1;i<=n;i++)\n\t\tb[i].u=read(),b[i].l=read(),\n\t\tb[i].r=read(),b[i].s=read()+b[i].u;\n\tfor(int i=1;i<=w+1;i++)\t\n\t\tf[i]=i;\n\tsort(b+1,b+n+1);\n\tnum.push_back(h+1);\n\tfor(int i=1;i<=n;i++)\n\t\tnum.push_back(b[i].u),\n\t\tnum.push_back(b[i].s);\n\tsort(num.begin(),num.end());\n\tnum.resize(unique(num.begin(),num.end())-num.begin());\n\tint tmp=find(h+1),L=num.size()+10;\n\tfor(int i=1;i<=n;i++){\n\t\tint u=find(b[i].u),l=b[i].l,r=b[i].r,s=find(b[i].s);\n\t\tint c=0;\n\t\tif(s>=tmp){\n\t\t\tfor(int i=findf(l);i<=r;i=findf(i))\n\t\t\t\tc++,f[i]=i+1;\n\t\t}\n\t\tint t=s;\n\t\tauto it=hx.lower_bound({t,0,0,0,0});\n\t\tfor(;it!=hx.end();){\n\t\t\tnode tmp=*it;\n\t\t\tif(tmp.p1&&ins(tmp.p1,l,r)) tmp.p1=0,tmp.c--,c=(c+tmp.cc)%mod;\n\t\t\tif(tmp.p2&&ins(tmp.p2,l,r)) tmp.p2=0,tmp.c--,c=(c+tmp.cc)%mod;\n\t\t\tt=tmp.u-1;\n\t\t\tif(tmp.c==0) hx.erase(it);\n\t\t\telse it->p1=tmp.p1,it->p2=tmp.p2,it->c=tmp.c;\n\t\t\tit=hx.lower_bound({t,0,0,0,0});\n\t\t}\n\t\tif(!c) continue;\n\t\tif(l<=1) hx.insert({u,r+1,r+1,2,c}); \n\t\telse if(r>=w) hx.insert({u,l-1,l-1,2,c}); \n\t\telse hx.insert({u,l-1,r+1,2,c}); \n\t}\n\tint ans=0;\n\tfor(int i=findf(1);i<=w;i=findf(i+1))\n\t\tans++,f[i]=i+1;\n\tfor(auto x:hx)\n\t\tans=(ans+1ll*x.cc*x.c)%mod;\n\twrite(ans);\n\tflush();\n}\n```\n\u518d\u89c1 qwq~",
        "postTime": 1658238492,
        "uid": 365127,
        "name": "cyffff",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF780G\u3010Andryusha and Nervous Barriers\u3011"
    },
    {
        "content": "\u4e0d\u59a8\u8003\u8651\u4e00\u4e2a\u7403\u4ece\u4e00\u4e2a\u5750\u6807 $(x,y)$ \u4e0b\u843d\u7684\u7b54\u6848\uff0c\u4f46\u662f $h\\leq 10^9, w\\leq 10^5$\uff0c\u76f4\u63a5\u5b9a\u4e49\u5e76\u4e0d\u53ef\u884c\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u6709\u7528\u7684\u72b6\u6001\u53ea\u6709\u8d77\u59cb\u7684 $w$ \u4e2a\u70b9\u548c $n$ \u4e2a\u969c\u788d\u7684\u5de6\u53f3\u4e24\u4e2a\u70b9 $(l_i-1,u_i),(r_i+1,u_i)$\uff0c\u6240\u4ee5\u72b6\u6001\u6570\u662f $\\mathcal{O} (n)$ \u7ea7\u522b\u7684\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u627e\u5230\u4e0b\u9762\u7b2c\u4e00\u4e2a\u80fd\u6321\u4f4f\u5b83\uff08\u5373\u6ee1\u8db3 $u_i< h \\leq u_i+s_i$\uff09\u7684\u969c\u788d\uff0c\u76f4\u63a5 $dp$ \u8f6c\u79fb\u662f $\\mathcal{O} (n^2)$ \u7684\n\n\u8003\u8651\u5bf9\u8f6c\u79fb\u8fdb\u884c\u4f18\u5316\uff0c\u4e0d\u59a8\u6309\u9ad8\u5ea6\u4ece\u4e0a\u5f80\u4e0b\u8003\u8651\u6bcf\u4e2a\u969c\u788d\u7684\u5de6\u53f3\u80fd\u6709\u591a\u5c11\u4e2a\u7403\u5230\u8fbe\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u6240\u6709\u6ee1\u8db3 $l_i\\leq x\\leq r_i,u_i\\leq r\\leq u_i+s_i$ \u7684\u70b9\u7684\u6743\u503c\u6c42\u548c\u5e76\u6e05\u96f6\uff0c\u7136\u540e\u66f4\u65b0\u5230\u5f53\u524d\u969c\u788d\u7684\u5de6\u53f3\u7aef\u70b9\u4e0a\uff0c\u8fd9\u4e2a\u7528 $\\text{KD-Tree}$ \u7ef4\u62a4\u4e00\u4e0b\u5c31\u884c\u4e86\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 3e5 + 50, INF = 0x3f3f3f3f, mod = 1e9 + 7;\n\ninline int read () {\n\tregister int x = 0, w = 1;\n\tregister char ch = getchar ();\n\tfor (; ch < '0' || ch > '9'; ch = getchar ()) if (ch == '-') w = -1;\n\tfor (; ch >= '0' && ch <= '9'; ch = getchar ()) x = x * 10 + ch - '0';\n\treturn x * w;\n}\n\ninline int addmod (register int a, register int b) {\n\treturn a += b, a >= mod ? a - mod : a;\n}\n\nint h, w, n, rt, now, len, nowans, p[maxn], mp[maxn];\n\nstruct Node {\n\tint id, h, l, r, s;\n\tinline friend bool operator < (register const Node &a, register const Node &b) { return a.h > b.h; }\n} a[maxn];\n\nstruct Tree {\n\tint fa, lch, rch, val, sumval, id, d[2], maxx[2], minn[2];\n\tbool lazy;\n\tTree () {}\n\tTree (register int x, register int y, register int z) { lch = rch = val = sumval = 0, d[0] = x, d[1] = y, id = z; }\n\tinline friend bool operator < (register const Tree &a, register const Tree &b) { return a.d[now] < b.d[now]; }\n} b[maxn], tree[maxn];\n\ninline void Pushup (register int rt) {\n\tregister int lch = tree[rt].lch, rch = tree[rt].rch;\n\ttree[rt].sumval = addmod (tree[rt].val, addmod (tree[lch].sumval, tree[rch].sumval));\n\tfor (register int i = 0; i < 2; i ++) {\n\t\ttree[rt].maxx[i] = tree[rt].minn[i] = tree[rt].d[i];\n\t\tif (lch) tree[rt].maxx[i] = max (tree[rt].maxx[i], tree[lch].maxx[i]), tree[rt].minn[i] = min (tree[rt].minn[i], tree[lch].minn[i]);\n\t\tif (rch) tree[rt].maxx[i] = max (tree[rt].maxx[i], tree[rch].maxx[i]), tree[rt].minn[i] = min (tree[rt].minn[i], tree[rch].minn[i]);\t\n\t}\n}\n\ninline void Update (register int rt) {\n\ttree[rt].val = tree[rt].sumval = 0, tree[rt].lazy = 1;\n}\n\ninline void Pushdown (register int rt) {\n\tif (! tree[rt].lazy) return;\n\tif (tree[rt].lch) Update (tree[rt].lch);\n\tif (tree[rt].rch) Update (tree[rt].rch);\n\ttree[rt].lazy = 0;\n}\n\ninline int Build (register int l, register int r, register int typ, register int fa) {\n\tregister int mid = (l + r) >> 1; now = typ;\n\tnth_element (b + l, b + mid, b + r + 1);\n\ttree[mid] = b[mid], tree[mid].fa = fa, mp[b[mid].id] = mid;\n\tif (b[mid].id == 0) tree[mid].val = 1;\n\tif (l < mid) tree[mid].lch = Build (l, mid - 1, typ ^ 1, mid);\n\tif (r > mid) tree[mid].rch = Build (mid + 1, r, typ ^ 1, mid);\n\treturn Pushup (mid), mid;\n}\n\ninline void Modify (register int rt, register int val) {\n\tregister int u = rt, num = 0;\n\twhile (u) p[++ num] = u, u = tree[u].fa;\n\tfor (register int i = num; i >= 1; i --) Pushdown (p[i]);\n\ttree[rt].val = addmod (tree[rt].val, val);\n\tfor (register int i = 1; i <= num; i ++) Pushup (p[i]);\n}\n\ninline void Query (register int rt, register int xl, register int xr, register int yl, register int yr) {\n\tif (! tree[rt].sumval) return;\n\tif (tree[rt].maxx[0] < xl || tree[rt].minn[0] > xr) return;\n\tif (tree[rt].maxx[1] < yl || tree[rt].minn[1] > yr) return;\n\tif (xl <= tree[rt].minn[0] && tree[rt].maxx[0] <= xr && yl <= tree[rt].minn[1] && tree[rt].maxx[1] <= yr) return nowans = addmod (nowans, tree[rt].sumval), Update (rt), void ();\n\tif (xl <= tree[rt].d[0] && tree[rt].d[0] <= xr && yl <= tree[rt].d[1] && tree[rt].d[1] <= yr) nowans = addmod (nowans, tree[rt].val), tree[rt].val = 0;\n\tPushdown (rt);\n\tregister int lch = tree[rt].lch, rch = tree[rt].rch;\n\tif (lch) Query (lch, xl, xr, yl, yr);\n\tif (rch) Query (rch, xl, xr, yl, yr);\n\tPushup (rt);\n}\n\nint main () {\n\th = read(), w = read(), n = read();\n\tfor (register int i = 1; i <= w; i ++) b[++ len] = Tree (i, h + 1, 0);\n\tfor (register int i = 1; i <= n; i ++) {\n\t\ta[i].id = i, a[i].h = read(), a[i].l = read(), a[i].r = read(), a[i].s = read();\n\t\tif (a[i].l > 1) b[++ len] = Tree (a[i].l - 1, a[i].h, i);\n\t\tif (a[i].r < w) b[++ len] = Tree (a[i].r + 1, a[i].h, i + n);\n\t}\n\trt = Build (1, len, 0, 0), sort (a + 1, a + n + 1);\n\tfor (register int i = 1, id; i <= n; i ++) {\n\t\tnowans = 0, id = a[i].id, Query (rt, a[i].l, a[i].r, a[i].h + 1, a[i].h + a[i].s);\n\t\ta[i].l == 1 ? Modify (mp[id + n], nowans) : Modify (mp[id], nowans);\n\t\ta[i].r == w ? Modify (mp[id], nowans) : Modify (mp[id + n], nowans);\n\t}\n\treturn printf (\"%d\\n\", tree[rt].sumval), 0;\n}\n```",
        "postTime": 1621674694,
        "uid": 335193,
        "name": "Rubyonly",
        "ccfLevel": 8,
        "title": "CF780G \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5206\u6cbb\u89e3\u6cd5\u3002\n\n\u9996\u5148\u628a\u6240\u6709\u677f\u5b50\u6309\u9ad8\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c$dp[i]$ \u8868\u793a\u4e00\u4e2a\u7403\u843d\u5230 $i$ \u53f7\u677f\u4e0a\uff0c\u6700\u7ec8\u5206\u88c2\u51fa\u7684\u5c0f\u7403\u4e2a\u6570\u3002\n\n\u8003\u8651 $i$ \u4e0a\u7684\u7403\u4e0b\u4e00\u6b65\u4f1a\u843d\u5230\u54ea\u4e2a\u677f\u5b50\u4e0a\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u5b83\u4eec\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u3002\n\n\u5411\u5de6\u843d\u5230 $j$ \u4e0a\uff08\u6b64\u65f6 $l[i]>1$\uff09\uff1a\n\n\u4e00\u5b9a\u6709 $l[j]\\le l[i]-1\\le r[j]\\land u[i]-s[j]\\le u[j]\\le u[i]$\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684 $j$\uff0c\u843d\u5230\u5730\u9762\u4e0a\uff1b\u5426\u5219\u53d6 $u[j]$ \u6700\u5927\u7684\u90a3\u4e2a $j$\u3002\n\n\u5411\u53f3\u843d\u5230 $k$ \u4e0a\uff08\u6b64\u65f6 $r[i]<w$\uff09\uff1a\n\n\u4e00\u5b9a\u6709 $l[k]\\le r[i]+1\\le r[k]\\land u[i]-s[k]\\le u[k]\\le u[i]$\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684 $k$\uff0c\u843d\u5230\u5730\u9762\u4e0a\uff0c\u5426\u5219\u53d6 $u[k]$ \u6700\u5927\u7684\u90a3\u4e2a $k$\u3002\n\n\u77e5\u9053\u4e86 $j,k$ \u540e\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u8ba1\u7b97\u51fa $dp[i]$\u3002\n\n\u5982\u679c\u6ca1\u6709 $s$ \u7684\u9650\u5236\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u4e0b\u5f80\u4e0a\u626b\u63cf\uff0c\u5e76\u5728\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u8986\u76d6\u6765\u627e\u5230 $j,k$\u3002\n\n\u6709\u9650\u5236\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u5f80\u7ebf\u6bb5\u6811\u4e0a\u63d2\u5165\u548c\u5220\u9664\u82e5\u5e72\u6761\u6c34\u5e73\u7ebf\u6bb5\uff08\u626b\u5230\u9ad8\u5ea6 $u[j]$ \u540e\u5c31\u52a0\u5165\u7ebf\u6bb5 $j$\uff0c\u626b\u5230\u5927\u4e8e $u[j]+s[j]$ \u7684\u9ad8\u5ea6\u4e4b\u540e\u5c31\u5220\u9664\u7ebf\u6bb5 $j$\uff09\uff0c\u6c42\u51fa\u4e0e\u76f4\u7ebf $x=i$ \u76f8\u4ea4\u7684\u7ebf\u6bb5\u4e2d\uff0c\u6700\u9ad8\u7684\u90a3\u6761\u7ebf\u6bb5\u7684\u7f16\u53f7\u3002\u8fd9\u57fa\u672c\u5c31\u662f [[HEOI2013]Segment](https://www.luogu.com.cn/problem/P4097)\uff0c\u674e\u8d85\u6811\u677f\u5b50\u3002\n\n\u674e\u8d85\u6811\u662f\u4e0d\u652f\u6301\u5220\u7ebf\u6bb5\u7684\uff0c\u4f46\u662f\u652f\u6301\u64a4\u9500\u7ebf\u6bb5\uff0c\u8fd9\u542f\u53d1\u6211\u4eec\u5c06\u64cd\u4f5c\u79bb\u7ebf\u4e0b\u6765\u8fdb\u884c\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u7528 $\\mathbb O(n\\log^2n)$ \u7684\u65f6\u95f4\u89e3\u51b3\u95ee\u9898\u3002\n\n\u6700\u540e\u8ba1\u7b97\u7b54\u6848\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002\u5148\u628a\u6240\u6709\u677f\u5b50\u90fd\u63d2\u5165\u674e\u8d85\u6811\u4e2d\uff0c\u5bf9\u4e8e $i\\in[1,w]$\uff0c\u627e\u51fa\u6ee1\u8db3 $l[j]\\le i\\le r[j]\\land u[j]+s[j]\\le h+1$ \u4e14 $u[j]$ \u6700\u5927\u7684 $j$\uff0c$dp$ \u503c\u52a0\u548c\u4e00\u4e0b\u5373\u53ef\u3002\n\ncode\n\n\u7531\u4e8e\u53ea\u6709\u6c34\u5e73\u7ebf\u6bb5\uff0c\u6240\u4ee5\u90fd\u4e0d\u7528\u6574\u4e2a\u674e\u8d85\u6811\uff0c\u666e\u901a\u7684\u6807\u8bb0\u6c38\u4e45\u5316\u7ebf\u6bb5\u6811\u5c31\u597d\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int mod=1e9+7;\nint h,w,n,tag[100005],b[100005],ans;\nstruct star{\n\tint u,l,r,s;\n\tfriend bool operator<(const star&x,const star&y){return x.u<y.u;}\n}bot[100005];\nnamespace LC{\n\tint tree[100003<<2];\n\tvector<pair<int,int>>cl;\n\t#define cmp(x,y) bot[x].u>bot[y].u\n\tvoid update(int id,int l,int r,int ql,int qr,int upd){\n\t\tif(l>qr||r<ql)return;\n\t\tif(l>=ql&&r<=qr){\n\t\t\tif(cmp(upd,tree[id]))\n\t\t\tcl.emplace_back(id,tree[id]),tree[id]=upd;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tupdate(id<<1,l,mid,ql,qr,upd),update(id<<1|1,mid+1,r,ql,qr,upd);\n\t}\n\tint query(int id,int l,int r,int pos){\n\t\tif(l>pos||r<pos)return 0;\n\t\tif(l==r)return tree[id];\n\t\tint mid=(l+r)>>1;\n\t\tint res1=query(id<<1,l,mid,pos),res2=query(id<<1|1,mid+1,r,pos);\n\t\tres1=cmp(res1,res2)?res1:res2;\n\t\treturn cmp(res1,tree[id])?res1:tree[id];\n\t}\n}using namespace LC;\nnamespace ST{\n\tvector<int>uuz[100005<<2];\n\tvoid update(int id,int l,int r,int ql,int qr,int t){\n\t\tif(l>qr||r<ql)return;\n\t\tif(l>=ql&&r<=qr){uuz[id].emplace_back(t);return;}\n\t\tint mid=(l+r)>>1;\n\t\tupdate(id<<1,l,mid,ql,qr,t),update(id<<1|1,mid+1,r,ql,qr,t);\n\t}\n\tvoid query(int id,int l,int r){\n\t\tint back=cl.size();\n\t\tfor(int v:uuz[id])LC::update(1,1,w,bot[v].l,bot[v].r,v);\n\t\tif(l==r){\n\t\t\tint a=tag[LC::query(1,1,w,bot[l].r+1)];\n\t\t\tint b=tag[LC::query(1,1,w,bot[l].l-1)];\n\t\t\ttag[l]=((bot[l].l==1?a:b)+(bot[l].r==w?b:a))%mod;\n\t\t}else{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tquery(id<<1,l,mid),query(id<<1|1,mid+1,r);\n\t\t}\n\t\twhile(cl.size()!=back)\n\t\ttree[cl.back().first]=cl.back().second,cl.pop_back();\n\t}\n}\nint main(){\n\tscanf(\"%d%d%d\",&h,&w,&n);\n\tfor(int i=1;i<=n;i++)\n\tscanf(\"%d%d%d%d\",&bot[i].u,&bot[i].l,&bot[i].r,&bot[i].s);\n\tif(!n)printf(\"%d\",w),exit(0);\n\tsort(bot+1,bot+n+1);\n\tfor(int i=1;i<=n;i++)b[i]=bot[i].u;\n\tfor(int i=1;i<=n;i++)\n\tST::update(1,1,n,i+1,upper_bound(b+1,b+n+1,bot[i].u+bot[i].s)-b-1,i);\n\tST::query(tag[0]=1,1,n);\n\tfor(int i=1;i<=n;i++)if(bot[i].u+bot[i].s>=h+1)\n\tupdate(1,1,w,bot[i].l,bot[i].r,i);\n\tfor(int i=1;i<=w;i++)ans=(ans+tag[query(1,1,w,i)])%mod;\n\tprintf(\"%d\",ans);return 0;\n}\n```\n",
        "postTime": 1672629626,
        "uid": 148226,
        "name": "Fan_sheng",
        "ccfLevel": 6,
        "title": "CF780G Andryusha and Nervous Barriers"
    },
    {
        "content": "# \u9898\u89e3\n\n- \u5f00\u59cb\u4ee5\u4e3a\u662f\u4e2a\u6a21\u62df\uff0c\u7ed3\u679c $1\\leq h\\leq 10^9,1\\leq w,n\\leq 10^5$\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u8003\u8651 $O(n)$ \u6216 $O(n\\log n)$ \u7684\u505a\u6cd5\u3002\n\n- \u7531\u4e8e\u6211\u4eec\u521d\u59cb\u6709 $w$ \u4e2a\u5c0f\u7403\uff0c\u7a7f\u8fc7\u5c4f\u969c\u65f6\u6700\u6709\u4f1a\u591a\u4e00\u4e2a\u5c0f\u7403\uff0c\u800c\u6bcf\u4e00\u9ad8\u5ea6\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5c4f\u969c\uff0c\u6240\u4ee5\u5c0f\u7403\u7684\u4e2a\u6570\u5728 $n+w$ \u4e4b\u5185\u3002\n\n- \u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u6bcf\u4e00\u5217\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u8bb0\u5f55\u8be5\u5217\u8fd8\u5b58\u5728\u7684\u5c0f\u7403\u3002\u5c4f\u969c\u7684\u8bdd\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u54ea\u4e00\u4e9b\u7403\u4f1a\u843d\u5728\u4e0a\u9762\u3002\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4e2d\u6700\u4f4e\u7684\u7403\uff0c\u5224\u65ad\u5176\u4f1a\u4e0d\u4f1a\u843d\u5728\u5c4f\u969c\u4e0a\uff0c\u662f\u5219\u5c06\u7403\u8bb0\u5f55\u5728\u6808\u4e2d\uff0c\u5e76\u9000\u6808\uff1b\u5426\u5219\uff0c\u5904\u7406\u5b8c\u5f53\u524d\u5c4f\u969c\u3002\n\n- \u6700\u540e\u7684\u7b54\u6848\u5373\u4e3a\u6bcf\u4e2a\u6808\u4e2d\u7684\u7403\u7684\u4e2a\u6570\u548c\u3002\n\n- \u7531\u4e8e\u6211\u4eec\u9700\u8981\u5bf9\u6bcf\u4e2a\u7403\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u5904\u7406\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((n+w)\\log w)$\u3002\n\n- \u4ee3\u7801\u61d2\u5f97\u5199\u4e86\u3002",
        "postTime": 1658234658,
        "uid": 342868,
        "name": "Ted_hjl",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF780G\u3010Andryusha and Nervous Barriers\u3011"
    },
    {
        "content": "### CF780G Andryusha and Nervous Barriers\n\n\u8003\u8651\u6811\u5957\u6811\u3002\n\n\u4e00\u7ef4\u7ef4\u62a4\u533a\u95f4\u5217\uff0c\u53e6\u4e00\u7ef4\u7ef4\u62a4\u5217\u4e0a\u7684\u7403\u7684\u9ad8\u5ea6\uff0c\u4fdd\u8bc1\u70b9\u6570\u6b63\u786e\u3002\n\n\u7ef4\u62a4\u5355\u70b9\u52a0\uff0c\u533a\u95f4\u67e5\u3002\n\n\u626b\u63cf\u7ebf\u9ad8\u5ea6\u4ece\u5927\u5230\u5c0f\u7ef4\u62a4\u5230\u6bcf\u4e00\u4e2a\u677f\u65f6\u7684\u60c5\u51b5\u3002\n\n\u4f18\u5316\uff1a\u533a\u95f4\u67e5\u662f\u5224\u533a\u95f4\u7403\u9ad8\u5ea6\u6700\u5c0f\u90fd\u53ea\u80fd\u7a7f\u8fc7\u6321\u677f\u5c31\u7ed3\u675f\u6389\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log^2n)$\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define int long long\ntypedef long long ll;\n\n#define ha putchar(' ')\n#define he putchar('\\n')\n\ninline int read() {\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-')\n\t\t\tf = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9')\n\t\tx = (x << 3) + (x << 1) + (c ^ 48), c = getchar();\n\treturn x * f;\n}\n\ninline void write(int x) {\n\tif (x < 0) {\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9)\n\t\twrite(x / 10);\n\tputchar(x % 10 + 48);\n}\n\nconst int _ = 1e5 + 10, mod = 1e9 + 7;\n\nint h, w, n, N;\n\nll ans[_ << 2];\n\npriority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q[_];\n\nstruct abc {\n\tint u, l, r, s;\n\tbool operator < (const abc &t) const {\n\t\treturn u > t.u;\n\t}\n} k[_];\n\nvoid build(int o, int l, int r) {\n\tif (l == r) {\n\t\tq[l].push({h + 1, 1});\n\t\tans[o] = h + 1;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(o << 1, l, mid), build(o << 1 | 1, mid + 1, r);\n\tans[o] = min(ans[o << 1], ans[o << 1 | 1]);\n}\n\nvoid upd(int o, int l, int r, int pos, int p, int h) {\n\tif (l == r) {\n\t\tq[l].push({h, p});\n\t\tans[o] = min(ans[o], (ll)h);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid) upd(o << 1, l, mid, pos, p, h);\n\telse upd(o << 1 | 1, mid + 1, r, pos, p, h);\n\tans[o] = min(ans[o << 1], ans[o << 1 | 1]);\n}\n\nint qry(int o, int l, int r, int L, int R, int h, int s) {\n\tif (ans[o] > h + s) return 0;\n\tif (l == r) {\n\t\tint res = 0;\n\t\twhile (!q[l].empty() && q[l].top().first <= h + s) {\n\t\t\tres = (res + q[l].top().second) % mod;\n\t\t\tq[l].pop();\n\t\t}\n\t\tans[o] = q[l].empty() ? 1e10 + 7 : q[l].top().first;\n\t\treturn res;\n\t}\n\tint mid = (l + r) >> 1, res = 0;\n\tif (L <= mid) res = qry(o << 1, l, mid, L, R, h, s);\n\tif (R > mid) res = (res + qry(o << 1 | 1, mid + 1, r, L, R, h, s)) % mod;\n\tans[o] = min(ans[o << 1], ans[o << 1 | 1]);\n\treturn res;\n}\n\nsigned main() {\n\th = read(), w = read(), n = read();\n\tfor (int i = 1; i <= n; ++i) k[i].u = read(), k[i].l = read(), k[i].r = read(), k[i].s = read();\n\tN = w;\n\tbuild(1, 1, w);\n\tsort(k + 1, k + n + 1);\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint t = qry(1, 1, w, k[i].l, k[i].r, k[i].u, k[i].s);\n\t\tN = (N + t) % mod;\n\t\tif (k[i].l == 1) upd(1, 1, w, k[i].r + 1, (t << 1) % mod, k[i].u);\n\t\telse if (k[i].r == w) upd(1, 1, w, k[i].l - 1, (t << 1) % mod, k[i].u);\n\t\telse {\n\t\t\tupd(1, 1, w, k[i].l - 1, t, k[i].u);\n\t\t\tupd(1, 1, w, k[i].r + 1, t, k[i].u);\n\t\t}\n\t}\n\twrite(N), he;\n\treturn 0;\n}\n```",
        "postTime": 1658219709,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "CF780G Andryusha and Nervous Barriers"
    }
]