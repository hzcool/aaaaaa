[
    {
        "content": "# [CF843D]Dynamic Shortest Path\n\n### \u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6743\u6709\u5411\u56fe\uff0c\u5305\u542b$n(n\\le10^5)$\u4e2a\u70b9\u548c$m(m\\le10^5)$\u6761\u8fb9\u3002\u5171$q(q\\le2000)$\u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5305\u542b\u4ee5\u4e0b\u4e24\u79cd\uff1a\n\n- $1\\:v$\u2014\u2014\u67e5\u8be2\u4ece$1$\u5230$v$\u7684\u6700\u77ed\u8def\u3002\n- $2\\:c\\:l_1\\:l_2\\:\\ldots\\:l_c$\u2014\u2014\u5c06\u8fb9$l_1,l_2,\\ldots,l_c$\u589e\u52a0$1$\u7684\u6743\u503c\u3002\n\n### \u601d\u8def\uff1a\n\n\u9996\u5148\u4f7f\u7528Dijkstra\u7b97\u6cd5\u6c42\u51fa\u539f\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84$dis[i]$\u3002\u5bf9\u4e8e\u6240\u6709\u7684\u64cd\u4f5c$2$\uff0c\u8003\u8651\u589e\u52a0\u8fb9\u6743\u540e\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\u3002\u4e0d\u96be\u53d1\u73b0\u6bcf\u6b21\u4fee\u6539\u8fb9\u6743\u540e$dis[i]$\u90fd\u4f1a\u589e\u52a0\u4e00\u5b9a\u91cf\u6216\u4fdd\u6301\u4e0d\u53d8\u3002\u4e0d\u59a8\u5c06\u6bcf\u6b21\u6bcf\u4e2a\u70b9\u7684\u589e\u52a0\u91cf\u8bb0\u4f5c$add[i]$\uff0c\u8003\u8651\u589e\u52a0\u8fb9\u6743\u540e\u8ba1\u7b97$add[i]$\u7684\u503c\u3002\n\n\u7c7b\u6bd4Dijkstra\u7b97\u6cd5\u7684\u201c\u677e\u5f1b\u201d\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u70b9$x$\uff0c\u82e5$add[x]\\ne0$\uff0c\u6211\u4eec\u53ef\u4ee5\u7528$x$\u6765\u677e\u5f1b\u522b\u7684\u7ed3\u70b9\u3002\u679a\u4e3e$x$\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9$y$\uff0c\u82e5\u6b64\u65f6\u7528$x$\u4f5c\u4e3a\u6700\u77ed\u8def\u4e2d\u7684\u4e0a\u4e00\u4efb\u7ed3\u70b9\uff0c\u5219\u6700\u77ed\u8def\u957f\u5ea6\u9700\u8981\u589e\u52a0$dis[x]+w(x,y)+add[x]-dis[y]$\u3002\u800c$add[y]$\u5219\u9700\u8981\u5bf9\u6240\u6709\u8fd9\u6837\u7684\u503c\u53d6$\\min$\u3002\u8fd9\u6837\u5b8c\u6210\u6240\u6709\u7684\u677e\u5f1b\u64cd\u4f5c\u540e\uff0c$dis'[i]=dis[i]+add[i]$\u3002\u800c\u8fd9\u53ef\u4ee5\u7528BFS\u5b9e\u73b0\uff0c\u5176\u4e2d\u5f53$add[i]>c$\u65f6\u5219\u6ca1\u6709\u201c\u677e\u5f1b\u201d\u7684\u5fc5\u8981\uff0c\u53ef\u4ee5\u8fdb\u884c\u526a\u679d\u3002\n\n\u914d\u5bf9\u5806\u4f18\u5316Dijkstra\u590d\u6742\u5ea6$\\mathcal O(n\\log n+m)$\uff0c\u5355\u6b21BFS\u66f4\u65b0\u6700\u77ed\u8def$\\mathcal O(q(n+m))$\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O(n\\log n+m+q(n+m))$\u3002\n\n### \u7ec6\u8282\uff1a\n\n\u6ce8\u610f\u8fb9\u6743\u53ef\u80fd\u4e3a$0$\uff0c\u56e0\u6b64Dijkstra\u4e2d\u88ab\u677e\u5f1b\u7684\u7ed3\u70b9\u53ef\u80fd\u4f1a\u8dd1\u5230\u5806\u9876\uff0c\u4e0d\u80fd\u677e\u5f1b\u5b8c\u518d\u5220\u9664\u5806\u9876\u5143\u7d20\u3002\u672c\u9898\u65f6\u95f4\u9650\u5236\u8f83\u7d27\uff0c\u5b9e\u73b0\u65f6\u6ce8\u610f\u4f18\u5316\u5e38\u6570\u3002\n\n### \u6e90\u4ee3\u7801\uff1a\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cctype>\n#include<climits>\n#include<algorithm>\n#include<functional>\n#include<forward_list>\n#include<ext/pb_ds/priority_queue.hpp>\nusing int64=long long;\ninline int getint() {\n\tregister char ch;\n\twhile(!isdigit(ch=getchar()));\n\tregister int x=ch^'0';\n\twhile(isdigit(ch=getchar())) x=(((x<<2)+x)<<1)+(ch^'0');\n\treturn x;\n}\nconstexpr int N=1e5+1;\nint n,w[N],add[N];\nint64 dis[N];\nusing Edge=std::pair<int,int>;\nstd::forward_list<Edge> e[N];\nusing Vertex=std::pair<int64,int>;\n__gnu_pbds::priority_queue<Vertex,std::greater<Vertex>> q;\n__gnu_pbds::priority_queue<Vertex,std::greater<Vertex>>::point_iterator p[N];\ninline void dijkstra() {\n\tfor(register int i=1;i<=n;i++) {\n\t\tp[i]=q.push({dis[i]=i==1?0:LLONG_MAX,i});\n\t}\n\twhile(!q.empty()&&q.top().first!=LLONG_MAX) {\n\t\tconst int x=q.top().second;\n\t\tq.pop();\n\t\tfor(register auto &j:e[x]) {\n\t\t\tconst int &y=j.first,&w=::w[j.second];\n\t\t\tif(dis[x]+w<dis[y]) {\n\t\t\t\tq.modify(p[y],{dis[y]=dis[x]+w,y});\n\t\t\t}\n\t\t}\n\t}\n\tq.clear();\n}\nstd::queue<int> v[N];\nint main() {\n\tn=getint();\n\tconst int m=getint(),q=getint();\n\tfor(register int i=1;i<=m;i++) {\n\t\tconst int u=getint(),v=getint();\n\t\tw[i]=getint();\n\t\te[u].emplace_front(std::make_pair(v,i));\n\t}\n\tdijkstra();\n\tfor(register int i=1;i<=n;i++) {\n\t\tif(dis[i]==LLONG_MAX) dis[i]=-1;\n\t}\n\tfor(register int i=0;i<q;i++) {\n\t\tif(getint()==1) {\n\t\t\tprintf(\"%lld\\n\",dis[getint()]);\n\t\t} else {\n\t\t\tconst int c=getint();\n\t\t\tfor(register int i=0;i<c;i++) w[getint()]++;\n\t\t\tstd::fill(&add[1],&add[n]+1,c+1);\n\t\t\tv[add[1]=0].emplace(1);\n\t\t\tfor(register int i=0;i<=c;i++) {\n\t\t\t\tfor(;!v[i].empty();v[i].pop()) {\n\t\t\t\t\tconst int &x=v[i].front();\n\t\t\t\t\tif(add[x]!=i) continue;\n\t\t\t\t\tfor(register auto &j:e[x]) {\n\t\t\t\t\t\tconst int &y=j.first,&w=::w[j.second];\n\t\t\t\t\t\tconst int64 d=dis[x]+w+add[x]-dis[y];\n\t\t\t\t\t\tif(d<add[y]) v[add[y]=d].emplace(y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(register int i=1;i<=n;i++) {\n\t\t\t\tif(add[i]!=c+1) dis[i]+=add[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1527768325,
        "uid": 10086,
        "name": "skylee",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF843D \u3010Dynamic Shortest Path\u3011"
    },
    {
        "content": "\u795e\u4ed9\u9898 \u795e\u4ed9\u5207 @Ctime_Pup_314 orz\n\n\u6709\u4e00\u79cd$O(m+W)$\u7684\u505a\u6cd5(W\u662f\u503c\u57df)\n\n\u8003\u8651\u88f8\u7684\u8fea\u6770\u65af\u7279\u62c9\u7684\u8fc7\u7a0b\n\n\u6211\u4eec\u6bcf\u6b21\u627e\u5168\u5c40$dis$\u7684\u6700\u5c0f\u503c  \u7136\u540e\u53d6\u51fa\u8fd9\u4e2a\u70b9\u8fdb\u884c\u62d3\u5c55\n\n\u73b0\u5728\u6211\u4eec\u5728\u505a\u8fea\u6770\u65af\u7279\u62c9\u7684\u65f6\u5019 \u5bf9\u503c\u57df\u5f00\u4e00\u4e2a\u6876 dij\u7684\u65f6\u5019\u626b\u8fc7\u8fd9\u4e9b\u6876\n\u53d6\u51fa\u6700\u5c0f\u7684\u503c\u8fdb\u884c\u62d3\u5c55(\u53d8\u6210\u4e86bfs)\n\n\u56e0\u4e3a\u76f8\u540c\u7684\u503c\u6709\u5f88\u591a\u70b9 \u56e0\u6b64\u6211\u4eec\u8981\u62ff\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u4fdd\u5b58\u8fd9\u4e9b\u70b9(\u53ef\u4ee5\u662fvector\u6216\u8005queue\u6216\u8005\u94fe\u8868)\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898 \u6211\u4eec\u53ef\u4ee5\u5148\u7528\u666e\u901a\u7684\u8fea\u6770\u65af\u7279\u62c9\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def \u8bb0\u5f551\u5230\u6bcf\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8defdis\n\n\u7136\u540e\u6211\u4eec\u8d4b\u503c\u4e00\u4e2a\u65b0\u8fb9\u6743:\u5bf9\u4e8e\u4e00\u6761\u8fb9$(x,y)$ \u6211\u4eec\u628a\u5b83\u7684\u8fb9\u6743\u8d4b\u503c\u4e3a$dis[x]+e[i].w-d[y]$ \n\n\u7531\u4e8e\u8fb9\u6743\u662f\u53ea\u589e\u52a0\u4e0d\u51cf\u5c11\u7684 \u6240\u4ee5\u6700\u77ed\u8def\u53ea\u4f1a\u53d8\u5927 \u4e0d\u4f1a\u53d8\u5c0f\n\n\u90a3\u4e48\u5728\u65b0\u56fe\u4e0a\u8d70\u7684\u542b\u4e49\u5c31\u662f\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u589e\u91cf\n\n\u8981\u6700\u5c0f\u5316\u8fd9\u4e2a\u589e\u91cf \u6211\u4eec\u5c31\u5e94\u8be5\u8d70\u4e00\u4e2a\u6700\u77ed\u8def\n\n\u8fd8\u6709\u4e00\u4ef6\u4e8b ~~\u7ed9\u8001\u7239\u5012\u676f\u8336~~\n\n\n\u56e0\u4e3a\u66f4\u65b0c\u6761\u8fb9 \u6240\u4ee5\u6700\u77ed\u8def\u5bf9\u591a\u589e\u52a0c\n\n\u6709\u56e0\u4e3a\u6700\u77ed\u8def\u7684\u8def\u5f84\u6784\u6210\u662f\u4e00\u68f5\u6811 \u6240\u4ee5\u6700\u591a\u589e\u52a0$n-1$\n\n\u6240\u4ee5\u6211\u4eec\u628a$<=min(c,n-1)$ \u7684\u589e\u91cf\u52a0\u5165\u961f\u5217\n\n\n```cpp\n#include <iostream> \n#include <cstdio>\n#include <cstring>\n#include <queue>\n#define il inline\n#define res register int\n#define ll long long\n#define pa pair <ll,int>\n#define mp make_pair\nusing namespace std;\nconst int N=1e5+5;\nconst int M=1e5+5; \nconst ll inf=0x3f3f3f3f3f3f3f3f;\nil int read()\n{\n\tint x=0,f=0,c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n\treturn f?-x:x;\n}\nstruct Edge\n{\n\tint to,next,w;\n}e[M];\nint head[N],cnt;\nil void add(int a,int b,int c)\n{\n\tcnt++;\n\te[cnt].to=b;e[cnt].w=c;e[cnt].next=head[a];\n\thead[a]=cnt; \n}\nll d[N];\nbool vis[N];\nint n,m,q;\nll dij(int s)\n{\n\tpriority_queue< pa > q;\n\tmemset(d,0x3f,sizeof d);\n\tmemset(vis,0,sizeof vis);\n\td[s]=0; q.push( mp(0,s) );\n\twhile(!q.empty())\n\t{\n\t\tint x=q.top().second; q.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x]=1;\n\t\tfor(res i=head[x];i;i=e[i].next)\n\t\t{\n\t\t\tint y=e[i].to;\n\t\t\tif(d[y]>d[x]+e[i].w) d[y]=d[x]+e[i].w, q.push(mp(-d[y],y ));\n\t\t}\n\t}\n}\nqueue<int> s[N];\nll f[N],mx;\n\nvoid bfs(int c)\n{\n\tmx=0;\n\tfor(res i=0;i<=mx;i++)//\u904d\u5386\u503c\u57df \u66f4\u65b0\u503c\u57df\n\t\twhile(!s[i].empty())\n\t\t{\n\t\t\tint x=s[i].front(); s[i].pop();\n\t\t\tif(f[x]<i) continue;\n\t\t\tfor(res i=head[x];i;i=e[i].next)\n\t\t\t{\n\t\t\t\tint y=e[i].to,z=d[x]+e[i].w-d[y];\n\t\t\t\tif(f[y]>f[x]+z)\n\t\t\t\t{\n\t\t\t\t\tf[y]=f[x]+z;\n\t\t\t\t\tif(f[y]<=min(c,n-1))  \n\t\t\t\t\t{\n\t\t\t\t\t\ts[f[y]].push(y);\n\t\t\t\t\t\tmx=max((ll)mx,f[y]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}\n\nint main()\n{\n\tn=read(); m=read(); q=read();\n\tfor(res i=1;i<=m;i++) \n\t{\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,y,z); \n\t}\n\tdij(1);\n//\tcout<<\"dfa:\"<<inf<<endl;\n\twhile(q--)\n\t{\n\t\tint opt=read(),c=read();\n\t\tif(opt==1) d[c]==inf?puts(\"-1\"):printf(\"%I64d\\n\",d[c]);\n\t\telse \n\t\t{\n\t\t\tfor(res i=1;i<=c;i++) e[read()].w++;\n\t\t\tmemset(f,0x3f,sizeof f);\n\t\t\tf[1]=0; s[0].push(1); \n\t\t\tbfs(c);\n\t\t\tfor(res i=1;i<=n;i++) d[i]=min(inf,f[i]+d[i]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1571668507,
        "uid": 126534,
        "name": "\u849f\u84bb\u6eb4\u5316\u6c22",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF843D \u3010Dynamic Shortest Path\u3011"
    },
    {
        "content": "\n## \u9898\u89e3\uff1a\n\n[\u535a\u5ba2\u98df\u7528\u53e3\u5473\u66f4\u4f73](https://www.cnblogs.com/fusiwei/p/11778651.html)\n\n~~2019.11.1\u6a21\u62df\u8d5bT3 50\u5206\u573a~~\n\n\u4e00\u5f00\u59cb\u89c9\u5f97\u6b63\u89e3\u5e94\u8be5\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\u4e00\u4e0b\uff0c\u4f46\u662f\u5e76\u4e0d\u77e5\u9053\u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u3002\u6240\u4ee5\u76f4\u63a5\u66b4\u529b\u4fee\u6539\u53cd\u590d\u8dd1\u6700\u77ed\u8def\u3002~~\u6211\u50bbX\u7528\u4e86SPFA~~\n\n\u4e0d\u8981\u5e7b\u60f3\u4e86\uff0c\u4e00\u5b9a\u4f1aT\u3002\n\n#### **\u6b63\u89e3\uff1a**\n\n\u56e0\u4e3a\u8dd1\u5f88\u591a\u904dDIJ\u4e00\u5b9a\u4f1aT\uff0c\u8fd9\u4e0d\u662f\u4f60\u52a0\u4e0d\u52a0\u4f18\u5316\u5c31\u80fd\u6539\u53d8\u7684\u4e86\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u60f3\u4e00\u4e0b\uff0c\u80fd\u4e0d\u80fd\u53ea\u8dd1\u4e00\u904dDIJ\u3002\n\n\u8ddf\u7740\u8fd9\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\u7531\u4e8e\u662f\u5355\u6e90\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u5bf9\u4e8e\u66f4\u6539\u7684\u8fb9\u6743\uff0c\u53ea\u4f1a\u66f4\u6539\u4e00\u90e8\u5206\u8282\u70b9\u7684\u6700\u77ed\u8def\u3002\u6240\u4ee5\u6211\u4eec\u8bd5\u7740\u53ea\u8dd1\u4e00\u904dDIJ\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u5df2\u7ecf\u88ab\u5904\u7406\u51fa\u6765\u7684\u521d\u59cb\u72b6\u6001\u4e0b\u7684\u6700\u77ed\u8def\u8fdb\u884c\u4fee\u6539\u3002\n\n\u5177\u4f53\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u8bbe\u7f6e$f[i]$\u8868\u793a$i$\u70b9\u7684\u6700\u77ed\u8def\u8ddd\u79bb\u589e\u52a0\u91cf\u3002\u5bf9\u4e8e\u589e\u52a0\u503c\uff0c\u6211\u4eec\u5f00\u4e00\u4e2a\u6876\u3002\u8fd9\u4e2a\u6876\u53ef\u4ee5\u4f7f\u7528$queue$\u6765\u5b9e\u73b0\u3002\u8fd9\u4e2a\u961f\u5217\u91cc\u5b58\u7684\u662f\u8fd9\u4e2a\u8ddd\u79bb\u589e\u52a0\u91cf\u7684\u8282\u70b9\u7f16\u53f7\u4eec\u3002\u90a3\u4e48\u6211\u4eec\u4ece\u8fd9\u4e9b\u70b9\u4e2d\u8fdb\u884c\u6269\u5c55\u3002\u8fd9\u6b21\u7684\u6269\u5c55\u9700\u8981\u5f15\u5165\u65b0\u8fb9\u6743\uff08\u56e0\u4e3a$val$\u5df2\u7ecf\u88ab\u4fee\u6539\u8fc7\u4e86\uff0c\u6240\u4ee5\u6269\u5c55\u589e\u91cf\u7684\u8fb9\u6743\u5e94\u8be5\u88ab\u5b9a\u4e49\u6210$dist[x]-dist[y]+val[i]$\uff09\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u589e\u52a0\u4e86$c$\u6761\u8fb9\uff0c\u6240\u4ee5\u9700\u8981\u628a$c$\u548c$n-1$\uff08\u6700\u77ed\u8def\u8def\u5f84\u662f\u6811\uff09\u505a\u4e00\u4e0b\u6bd4\u8f83\uff0c\u5982\u679c\u8fd9\u4e2a\u589e\u91cf\u6bd4\u4ed6\u4fe9\u7684\u6700\u5c0f\u503c\u8fd8\u8981\u5c0f\uff0c\u8bf4\u660e\u8fd8\u6709\u540e\u7eed\u7684\u66f4\u65b0\uff0c\u518d\u628a\u5b83\u538b\u5165\u6876\u91cc\u8fdb\u884c\u7ee7\u7eed\u677e\u5f1b\u3002\n\n\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4fee\u6539\u7684\u8fc7\u7a0b\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#define int long long\nusing namespace std;\nconst int maxn=1e5+10;\nconst int INF=0x3f3f3f3f3f3f3f3f;\nint n,m,Q;\nint tot,head[maxn],val[maxn],nxt[maxn],to[maxn];\npriority_queue<pair<int,int> >q;\nint v[maxn],dist[maxn];\nqueue<int> t[maxn];\nint f[maxn],maxx;\nvoid add(int x,int y,int z)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    val[tot]=z;\n    head[x]=tot;\n}\nvoid dijkstra()\n{\n    memset(dist,0x3f,sizeof(dist));\n    memset(v,0,sizeof(v));\n    q.push(make_pair(0,1));\n    dist[1]=0;\n    while(!q.empty())\n    {\n        int x=q.top().second;\n        if(v[x])\n        {\n            q.pop();\n            continue;\n        }\n        x=q.top().second;q.pop();v[x]=1;\n        for(int i=head[x];i;i=nxt[i])\n        {\n            int y=to[i];\n            if(dist[y]>dist[x]+val[i])\n                dist[y]=dist[x]+val[i],q.push(make_pair(-dist[y],y));\n        }\n    }\n}\nvoid bfs(int v)\n{\n    memset(f,0x3f,sizeof(f));\n    f[1]=0;\n    t[0].push(1);\n    maxx=0;\n    for(int i=0;i<=maxx;i++)\n        while(!t[i].empty())\n        {\n            int x=t[i].front();\n            t[i].pop();\n            if(f[x]<i)\n                continue;\n            for(int i=head[x];i;i=nxt[i])\n            {\n                int y=to[i];\n                int z=dist[x]+val[i]-dist[y];\n                if(f[y]>f[x]+z)\n                {\n                    f[y]=f[x]+z;\n                    if(f[y]<=min(v,n-1))\n                    {\n                        t[f[y]].push(y);\n                        maxx=max(maxx,f[y]);\n                    }\n                }\n            }\n        }\n}\nsigned main()\n{\n    scanf(\"%I64d%I64d%I64d\",&n,&m,&Q);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        scanf(\"%I64d%I64d%I64d\",&x,&y,&z);\n        add(x,y,z);\n    }\n    dijkstra();\n    while(Q--)\n    {\n        int opt,v,c;\n        scanf(\"%I64d%I64d\",&opt,&v);\n        if(opt==1)\n        {\n            if(dist[v]==INF)\n            {\n                puts(\"-1\");\n                continue;\n            }\n            printf(\"%I64d\\n\",dist[v]);\n        }\n        else\n        {\n            for(int i=1;i<=v;i++)\n            {\n                int a;\n                scanf(\"%I64d\",&a);\n                val[a]++;\n            }\n            bfs(v);\n            for(int i=1;i<=n;i++)\n                dist[i]=min(INF,f[i]+dist[i]);\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1572604439,
        "uid": 175131,
        "name": "\u5085\u601d\u7ef4666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF843D \u3010Dynamic Shortest Path\u3011"
    },
    {
        "content": "\n#### \u52a8\u6001\u6700\u77ed\u8def\uff1a[CF843D Dynamic Shortest Path](https://www.luogu.org/problem/CF843D)\n\n\n\u9898\u610f\uff1a\n\u6709\u4e00\u5f20$n$\u4e2a\u70b9$m$\u6761\u8fb9\u7684\u6709\u5411\u5e26\u6743\u56fe\uff0c$q$\u6b21\u8be2\u95ee\uff1a\n\n```1``` $1 v$ \u8be2\u95ee\u4ece$1$\u5230$v$\u7684\u6700\u77ed\u8def\uff0c\u65e0\u89e3\u8f93-$1$\n\n```2``` $c\\ l_1\\ l_2\\ ...\\ l_c\\ l_i$\u7684\u8fb9\u6743\u589e\u52a0$1$\n\n$q \\leqslant 2000 n,m \\leqslant 10^5$\n\n\u9898\u89e3\uff1a\n\n\u66b4\u529b$dij$\u663e\u7136\u8fc7\u4e0d\u4e86\uff0c\u9700\u8981\u4f18\u5316\n\n\u9996\u5148\u6211\u4eec\u77e5\u9053\u4e00\u79cd$dij$\u7684\u4f18\u5316\u65b9\u6cd5\uff1a\n\u4fdd\u8bc1\u8fb9\u6743\u90fd\u4e3a\u6b63\uff0c\u4e14\u8fb9\u6743\u548c\u4e0d\u8d85\u8fc7$W$\u7684\u65f6\u5019\n\n\u6027\u8d28\uff1a\u5982\u679c\u7528 $x$ \u66f4\u65b0\u5468\u56f4\u7684\u70b9 $t$ \u7684\u6700\u77ed\u8def\uff0c\u90a3\u4e48\n\u6e90\u5230 $t$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\u4e00\u5b9a\u5927\u4e8e\u5230 $x$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n\u7528$0$~$W$ \u7684(\u6876)\u961f\u5217\u4ee3\u66ff\u5806\n\n\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u503c\u6765\u53d6\u51fa\u5f53\u524d\u6700\u5c0f\u503c\u3002\u6839\u636e\u6027\u8d28\uff0c\u52a0\n\u5165\u7684\u5143\u7d20\u4e00\u5b9a\u53ea\u4f1a\u52a0\u5230\u5f53\u524d\u679a\u4e3e\u7684\u8fd9\u4e2a\u503c\u7684\u540e\u9762\u3002\n\n\u590d\u6742\u5ea6$O(m+W)$\uff0c\u73b0\u5728\u6211\u4eec\u8981\u5c3d\u91cf\u7f29\u5c0f\u503c\u57df\u5c31\u53ef\u4ee5\u4f18\u5316\u4e86\n\n\u5148\u505a\u4e00\u904d\u6b63\u5e38$dij$\uff0c\u7136\u540e\u8003\u8651\u8be5\u8fb9\u82e5\u5e72\u6761\u8fb9\u9020\u6210\u7684\u5f71\u54cd\n\n\u4ee4\u6bcf\u6761\u8fb9$(x,y)$\u7684\u8fb9\u6743\u4e3a$dis[x]+edge[i]-dis[y]$,\n\n\u5047\u8bbe\u8fd9\u6837\u6c42\u51fa\u6765\u7684\u6700\u77ed\u8def\u4e3a$f[x]$\uff0c\u5219$f[x]$\u8868\u793a\u65b0\u56fe\u4e2d\u6b64\u70b9\u7684\u8ddd\u79bb\u8f83\u539f\u56fe\u7684\u589e\u91cf\n\n\u5206\u6790$f[x]$\u7684\u503c\u57df\uff1a\u4e00\u6b21\u66f4\u65b0$c$\u6761\u8fb9\uff0c\u5219\u6700\u77ed\u8def\u6700\u591a\u589e\u52a0$c$\uff0c$n$\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5171\u7ecf\u8fc7$n-1$\u6761\u8fb9\uff0c\n\u5219\u6700\u77ed\u8def\u589e\u52a0\u4e0d\u8d85\u8fc7$n-1$,\u800c$n$\u7684\u8303\u56f4\u662f$10^5$\uff0c\u5c31\u53ef\u4ee5\u63a5\u53d7\u4e86\uff0c\u603b\u5171\u590d\u6742\u5ea6$O(q(m+W))$\n\n```cpp\n//CF843D-Dynamic-ShortestPath\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <cctype>\n#include <queue>\nusing namespace std;\n\ntypedef long long LL;\n#define cls(x) memset(x,0,sizeof(x))\n#define For(i,j,k) for(register int i=(j);i<=(k);++i)\n#define Rep(i,j,k) for(register int i=(j);i>=(k);--i)\n#define rint register int\n#define il inline\n\nil int read(int x=0,int f=1,char ch='0')\n{\n    while(!isdigit(ch=getchar())) if(ch=='-') f=-1;\n    while(isdigit(ch)) x=x*10+ch-'0',ch=getchar();\n    return f*x;\n}\n\nconst int N=1e5+5;\nint head[N],ver[N],nxt[N],edge[N];\nint n,m,Q,tot;\nLL d[N],f[N],t; bool v[N];\nil void add(int x,int y,int z)\n{ ver[++tot]=y; nxt[tot]=head[x]; head[x]=tot; edge[tot]=z; }\n\nil void dij()\n{\n    priority_queue<pair<LL,int> > q; \n    memset(d,0x3f,sizeof(d)); d[1]=0;\n    q.push(make_pair(0,1));\n    while(q.size())\n    {\n        int x=q.top().second; q.pop();\n        if(v[x]) continue; v[x]=1;\n        for(rint i=head[x];i;i=nxt[i])\n        {\n            int y=ver[i]; if(d[y]<=d[x]+edge[i]) continue;\n            d[y]=d[x]+edge[i]; q.push(make_pair(-d[y],y));\n        }\n    }\n}\n\nqueue<int> q[N];\nil void work(int maxn)\n{\n    memset(f,0x3f,sizeof(f)); \n    f[1]=0; q[0].push(1);\n    for(rint now=0;now<=t;++now) while(q[now].size())\n    {\n        int x=q[now].front(); q[now].pop(); if(f[x]<now) continue;\n        //\u4e00\u4e2a\u70b9\u53ef\u80fd\u88ab\u63d2\u5165\u591a\u4e2a\u961f\u5217\u4e2d\n        for(rint i=head[x];i;i=nxt[i])\n        {\n            int y=ver[i],z=d[x]+edge[i]-d[y];\n            if(f[y]<=f[x]+z) continue;\n            f[y]=f[x]+z; if(f[y]>maxn) continue;\n            q[f[y]].push(y); t=max(t,f[y]);\n        }\n    }\n    For(i,1,n) d[i]=min(d[0],d[i]+f[i]);\n}\n\nint main()\n{\n    n=read(); m=read(); Q=read();\n    For(i,1,m) { int x=read(),y=read(),z=read(); add(x,y,z); }\n    dij();\n    while(Q--)\n    {\n        int op=read();\n        if(op==1)\n        {\n            int x=read();\n            printf(\"%lld\\n\",d[x]>=d[0]?-1:d[x]);\n        }\n        else\n        {\n            int c=read(),k; For(i,1,c) k=read(),++edge[k];\n            work(min(c,n-1));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1571795050,
        "uid": 123553,
        "name": "robin12138",
        "ccfLevel": 0,
        "title": "CF843D Dynamic Shortest Path"
    }
]