[
    {
        "content": "### \u9898\u610f\u7b80\u8ff0\n\u7ed9\u51fa $n$ \u4e2a\u5b57\u7b26\u4e32\uff0c\u5c06\u5176\u62fc\u6210 ```kotlinkotlin...kotlin``` \u7684\u5f62\u5f0f\u3002\n\n### \u89e3\u9898\u601d\u8def\n\u5c06\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u770b\u6210\u4e00\u6761\u8fb9\uff0c\u6bd4\u5982 kotl \u662f\u4ece k \u5230 i \u7684\u8fb9\uff0cink \u662f\u4ece i \u5230 o \u7684\u8fb9\uff0cotlin \u662f\u4ece o \u5230 k \u7684\u8fb9\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u800c\u9898\u76ee\u5219\u662f\u8981\u6c42\u6211\u4eec\u6c42\u4e00\u6761\u6b27\u62c9\u56de\u8def\u3002\n\n>\u5982\u679c\u56feG\u4e2d\u7684\u4e00\u4e2a\u8def\u5f84\u5305\u62ec\u6bcf\u4e2a\u8fb9\u6070\u597d\u4e00\u6b21\uff0c\u5219\u8be5\u8def\u5f84\u79f0\u4e3a\u6b27\u62c9\u8def\u5f84\u3002 \u2014\u2014\u767e\u5ea6\u767e\u79d1\n\n\u6c42\u6b27\u62c9\u56de\u8def\u53ef\u4ee5\u7528 Fleury \u7b97\u6cd5\u6216 Hierholzer \u7b97\u6cd5\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u540e\u8005\u3002\n\n\u9898\u76ee\u4fdd\u8bc1\u4e86\u6b27\u62c9\u56de\u8def\u5b58\u5728\uff0c\u6240\u4ee5\u4ece k \u8282\u70b9\u5f00\u59cb DFS \uff0c\u6bcf\u6b21\u968f\u610f\u9009\u62e9\u4e00\u6761\u51fa\u8fb9\uff0c\u5220\u9664\u5df2\u8d70\u8fc7\u7684\u8fb9\uff0c\u76f4\u5230\u56de\u5230 k. \u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u6761\u56de\u8def\u3002\n\n\u63a5\u4e0b\u6765\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u5bfb\u627e\u4ecd\u6709\u51fa\u8fb9\u7684\u70b9\uff0c\u4ece\u5b83\u5f00\u59cb\u540c\u6837 DFS \u5bfb\u627e\u4e00\u6761\u56de\u8def\uff0c\u5c06\u5b83\u52a0\u5165\u8def\u5f84\u4e2d\u3002\u6bd4\u5982 0 -> 1 -> 4 -> 0 \uff0c\u5982\u679c 1 \u8fd8\u6709\u51fa\u8fb9\uff0c\u627e\u5230\u4e00\u6761\u56de\u8def 1 -> 2 -> 3 -> 1\uff0c\u90a3\u4e48\u52a0\u5165\u540e\u5c31\u53d8\u6210 0 -> 1 -> 2 -> 3 -> 1 -> 4 -> 0.\n\n\u5f53\u8def\u5f84\u4e0a\u6240\u6709\u7684\u70b9\u90fd\u6ca1\u6709\u51fa\u8fb9\u65f6\uff0c\u5f97\u5230\u7684\u8def\u5f84\u5c31\u662f\u6b27\u62c9\u56de\u8def\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f $O(n)$ \uff0c\u4f46\u662f\u6211\u5199\u7684\u662f\u6bcf\u6b21\u627e\u5230\u65b0\u7684\u56de\u8def\u5c31\u4ece\u8def\u5f84\u5f00\u5934\u91cd\u65b0\u5f00\u59cb\u5224\u65ad\uff0c\u6700\u5dee\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n^2)$. ~~\u4e3b\u8981\u539f\u56e0\u662f\u4e0d\u4f1a\u7528 Kotlin~~\n\nAC\u4ee3\u7801\uff1a\n```java\nimport java.util.*\ndata class edge (var to:Int,var index:Int)\nfun place(ch:Char):Int{\n    when(ch){\n        'k' -> return 0\n        'o' -> return 1\n        't' -> return 2\n        'l' -> return 3\n        'i' -> return 4\n        else -> return 5\n    }\n}\nvar graph=Array(6) { mutableListOf<edge>() }\nfun findloop(st:Int):LinkedList<edge>{\n    var ptr=graph[st][0].to\n    var ptro:Int\n    var ret=LinkedList<edge>()\n    ret.add(graph[st][0])\n    graph[st].removeAt(0)\n    while(ptr!=st){\n        ret.add(graph[ptr][0])\n        ptro=ptr\n        ptr=graph[ptr][0].to\n        graph[ptro].removeAt(0)\n    }\n    return ret\n}\nfun main(args:Array<String>) {\n    val sc = Scanner(System.`in`)\n    var route = LinkedList<edge>()\n    var n = sc.nextInt()\n    var flag = true\n    var temp: String\n    sc.nextLine()\t//\u6d88\u9664\u56de\u8f66\n    for (i in 1..n) {\n        temp = sc.nextLine()\n        graph[place(temp[0])].add(edge((place(temp.last())+1)%6,i))\n    }\n    route = findloop(0)\n    while (flag) {\n        flag = false\n        if (graph[0].size != 0) {\n            route.addAll(0, findloop(0))\n            flag = true\n        } else for (i in route) {\n            if (graph[i.to].size != 0) {\n                route.addAll(route.indexOf(i) + 1, findloop(i.to))\n                flag = true\n                break\n            }\n        }\n    }\n    for (i in route) {\n        print(i.index)\n        print(\" \")\n    }\n    println(\"\")\n}\n```",
        "postTime": 1584023083,
        "uid": 212805,
        "name": "Lpttor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1211F \u3010kotlinkotlinkotlinkotlin...\u3011"
    }
]