[
    {
        "content": "# CF1086D Rock-Paper-Scissors Champion\n\n\u5148\u4e0d\u7ba1\u4fee\u6539\uff0c\u53ea\u5bf9\u4e00\u4e2a\u5e8f\u5217\u6c42\u7b54\u6848\u3002\n\n\u8003\u8651\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u4eba\uff0c\u5224\u65ad\u4ed6\u662f\u5426\u53ef\u80fd\u6210\u4e3a\u51a0\u519b\u3002\u56e0\u4e3a R, S, P \u672c\u8d28\u662f\u7b49\u4ef7\u7684\uff0c\u6240\u4ee5\u4e0d\u59a8\u5047\u8bbe\u6211\u4eec\u679a\u4e3e\u7684\u4eba\u6253\u7b97\u51fa R\u3002\u90a3\u4e48\u4ed6\u4e0e S \u6bd4\u65f6\u4f1a\u8d62\uff0c\u4e0e P \u6bd4\u65f6\u4f1a\u8f93\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u4eba\u5de6\u53f3\u4e24\u8fb9\u90fd\u4e0d\u5b58\u5728 P\uff0c\u4ed6\u663e\u7136\u53ef\u4ee5\u593a\u51a0\uff08\u56e0\u4e3a\u548c R \u6bd4\u65f6\uff0c\u90fd\u53ef\u4ee5\u94a6\u5b9a\u4ed6\u83b7\u80dc\uff09\u3002\u5426\u5219\uff0c\u8003\u8651\u5982\u679c\u4ed6\u7684\u5de6\u8fb9\u6709 P\uff0c\u90a3\u4e48\u9700\u8981\u5728\u4ed6\u548c\u8fd9\u4e2a P \u6bd4\u8d5b\u4e4b\u524d\uff0c\u63d0\u524d\u8ba9\u4e00\u4e2a S \u6765\u51fb\u8d25 P\u3002\u6240\u4ee5\u4ed6\u7684\u5de6\u8fb9\u5fc5\u987b\u540c\u65f6\u4e5f\u6709\u4e00\u4e2a S\u3002\u5e76\u4e14\u53ea\u8981\u4ed6\u5de6\u8fb9\u5b58\u5728\u4e00\u4e2a S\uff0c\u5c31\u4e00\u5b9a\u80fd\u901a\u8fc7\u5b89\u6392\u987a\u5e8f\uff0c\u4f7f\u5f97 S \u9010\u4e2a\u51fb\u8d25\u4ed6\u5de6\u8fb9\u7684\u6240\u6709 P\u3002\u53f3\u8fb9\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u51fa\u7ed3\u8bba\uff1a**\u4e00\u4e2a\u4eba\u4e0d\u80fd\u593a\u51a0\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u7684\u5de6\u8fb9\u6216\u53f3\u8fb9\uff0c\u5b58\u5728\u4e00\u4e2a\u80fd\u51fb\u8d25\u4ed6\u7684\u4eba\uff08P\uff09\u4e14\u4e0d\u5b58\u5728\u80fd\u88ab\u4ed6\u51fb\u8d25\u7684\u4eba\uff08S\uff09**\u3002\n\n\u5728\u6709\u4fee\u6539\u65f6\uff0c\u6211\u4eec\u7528\u4e09\u4e2a\u6570\u636e\u7ed3\u6784\u5206\u522b\u7ef4\u62a4 R, S, P \u4e09\u4e2a\u4e1c\u897f\u7684\u51fa\u73b0\u4f4d\u7f6e\u3002\u4fee\u6539\u65f6\u76f4\u63a5\u5728\u6570\u636e\u7ed3\u6784\u4e0a\u66f4\u65b0\uff08\u5355\u70b9\u4fee\u6539\uff09\u3002\u7136\u540e\u8003\u8651\u6c42\u7b54\u6848\u3002\u679a\u4e3e R, S, P \u4e09\u79cd\u4e1c\u897f\uff0c\u8003\u8651\u8fd9\u79cd\u4e1c\u897f\u6709\u591a\u5c11\u4e2a\u662f**\u4e0d\u80fd\u593a\u51a0**\u7684\u3002\u5bb9\u6613\u53d1\u73b0\u4e0d\u80fd\u593a\u51a0\u7684\u662f\u4e24\u4e2a\u533a\u95f4\u7684\u5e76\uff1a\u4ee5 R \u4e3a\u4f8b\uff0c\u4e0d\u80fd\u593a\u51a0\u7684\u662f\u5de6\u8fb9\u7b2c\u4e00\u4e2a P \u5230\u7b2c\u4e00\u4e2a S \u4e4b\u95f4\u7684\u8fd9\u6bb5\u533a\u95f4\uff0c\u4ee5\u53ca\u53f3\u8fb9\u6700\u540e\u4e00\u4e2a S \u5230\u6700\u540e\u4e00\u4e2a P \u4e4b\u95f4\u8fd9\u6bb5\u533a\u95f4\u3002\u7528\u6570\u636e\u7ed3\u6784\u6c42\u533a\u95f4\u5143\u7d20\u4e2a\u6570\u5373\u53ef\u3002\n\n\u7efc\u4e0a\u6211\u4eec\u7684\u6570\u636e\u7ed3\u6784\u8981\u652f\u6301\uff1a\u5355\u70b9\u4fee\u6539\uff08\u63d2\u5165 / \u5220\u9664\u5143\u7d20\uff09\uff0c\u6c42\u7b2c\u4e00\u6b21 / \u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u533a\u95f4\u6c42\u548c\uff08\u6c42\u533a\u95f4\u5143\u7d20\u6570\u91cf\uff09\u3002\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff0c\u6216 $\\texttt{std::set}$ + \u6811\u72b6\u6570\u7ec4\u6765\u5b9e\u73b0\uff08\u56e0\u4e3a\u53ea\u6709 $\\texttt{std::set}$ \u7684\u8bdd\u53ef\u80fd\u4e0d\u652f\u6301\u6700\u540e\u4e00\u9879\u64cd\u4f5c\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+q)\\log n)$\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n\u6211\u9009\u62e9\u4e86\u7528 $\\texttt{std::set}$ + \u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u3002\n\n```cpp\n// problem: CF1086D\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define pb push_back\n#define mk make_pair\n#define lob lower_bound\n#define upb upper_bound\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\n\ntemplate<typename T> inline void ckmax(T& x, T y) { x = (y > x ? y : x); }\ntemplate<typename T> inline void ckmin(T& x, T y) { x = (y < x ? y : x); }\n\nconst int MAXN = 2e5;\nstruct FenwickTree {\n\tint c[MAXN + 5], sz;\n\tvoid point_add(int p, int v) {\n\t\tfor (int i = p; i <= sz; i += (i & (-i))) {\n\t\t\tc[i] += v;\n\t\t}\n\t}\n\tint query_pre_sum(int p) {\n\t\tint res = 0;\n\t\tfor (int i = p; i; i -= (i & (-i))) {\n\t\t\tres += c[i];\n\t\t}\n\t\treturn res;\n\t}\n\tint query_range_sum(int l, int r) {\n\t\tassert(l >= 1);\n\t\tassert(r <= sz);\n\t\tassert(l <= r);\n\t\treturn query_pre_sum(r) - query_pre_sum(l - 1);\n\t}\n\tvoid init(int _sz) {\n\t\tsz = _sz;\n\t}\n\tFenwickTree() {}\n};\n\n/*\n\u7ea6\u5b9a: Rock = 0, Scissors = 1, Paper = 2\n*/\nmap<char, int> id;\nset<int> s[3];\nFenwickTree fwk[3];\n\nint n, q;\nchar str[MAXN + 5];\n\nvoid modify(int p, int oldc, int newc) {\n\ts[oldc].erase(p);\n\tfwk[oldc].point_add(p, -1);\n\ts[newc].insert(p);\n\tfwk[newc].point_add(p, 1);\n}\nint calc(int me, int lose, int win) {\n#define IT set<int> :: iterator\n\tif (!SZ(s[win]))\n\t\treturn 0;\n\tint res = 0;\n\t\n\tint p = *s[win].begin();\n\tIT it = s[lose].lob(p);\n\tint l1 = -1, r1 = -1, l2 = -1, r2 = -1;\n\tif (it == s[lose].begin()) {\n\t\tint nxt = n + 1;\n\t\tif (it != s[lose].end()) nxt = *it;\n\t\tif (p + 1 <= nxt - 1) {\n\t\t\tres += fwk[me].query_range_sum(p + 1, nxt - 1);\n\t\t\tl1 = p + 1;\n\t\t\tr1 = nxt - 1;\n\t\t}\n\t}\n\tp = *s[win].rbegin();\n\tit = s[lose].upb(p);\n\tif (it == s[lose].end()) {\n\t\tint pre = 0;\n\t\tif (it != s[lose].begin()) { --it, pre = *it; }\n\t\tif (pre + 1 <= p - 1) {\n\t\t\tres += fwk[me].query_range_sum(pre + 1, p - 1);\n\t\t\tl2 = pre + 1;\n\t\t\tr2 = p - 1;\n\t\t}\n\t}\n\tif (l1 != -1 && l2 != -1) {\n\t\tif (l1 > l2) {\n\t\t\tswap(l1, l2);\n\t\t\tswap(r1, r2);\n\t\t}\n\t\tif (l2 <= r1) {\n\t\t\tres -= fwk[me].query_range_sum(l2, min(r1, r2));\n\t\t}\n\t}\n\treturn res;\n#undef IT\n}\nint getans() {\n\tint res = n;\n\tres -= calc(0, 1, 2);\n\tres -= calc(1, 2, 0);\n\tres -= calc(2, 0, 1);\n\treturn res;\n}\nint main() {\n\tid['R'] = 0;\n\tid['S'] = 1;\n\tid['P'] = 2;\n\tcin >> n >> q;\n\tcin >> (str + 1);\n\t\n\tfwk[0].init(n);\n\tfwk[1].init(n);\n\tfwk[2].init(n);\n\tfor (int i = 1; i <= n; ++i) {\n\t\ts[id[str[i]]].insert(i);\n\t\tfwk[id[str[i]]].point_add(i, 1);\n\t}\n\tcout << getans() << endl;\n\tfor (int tq = 1; tq <= q; ++tq) {\n\t\tint p; char c;\n\t\tcin >> p >> c;\n\t\tmodify(p, id[str[p]], id[c]);\n\t\tstr[p] = c;\n\t\tcout << getans() << endl;\n\t}\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1606485341,
        "uid": 100674,
        "name": "duyi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1085F \u3010Rock-Paper-Scissors Champion\u3011"
    }
]