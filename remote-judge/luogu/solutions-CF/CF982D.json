[
    {
        "content": "\u5176\u5b83\u9898\u89e3\u505a\u6cd5\u770b\u4e0a\u53bb\u6bd4\u8f83\u9ebb\u70e6\uff0c\u53d1\u4e2a\u7b80\u5355\u70b9\u7684\n\n\u5148\u628a $a_i$ \u5347\u5e8f\u6392\u5e8f\uff0c\u8fd9\u6837\u5c31\u76f8\u5f53\u4e8e\u6bcf\u6b21\u52a0\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u5224\u65ad\u8fd9\u4e9b\u5b50\u6bb5\u662f\u5426\u5408\u6cd5\uff0c\u5e76\u627e\u51fa\u4f7f\u5b50\u6bb5\u6700\u591a\u7684\u6700\u5c0f\u7684 $k$\n\n\u8003\u8651\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\uff08\u63a5\u4e0b\u6765\u90fd\u5c06\u5b50\u6bb5\u89c6\u4e3a\u82e5\u5e72\u4e2a\u533a\u95f4\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vium67fr.png)\n\n\u6bcf\u6b21\u52a0\u70b9\u65e0\u975e\u5c31\u4e09\u79cd\u60c5\u51b5\uff1a\n\n1. \u5408\u5e76\u4e24\u6bb5\u533a\u95f4\n2. \u5ef6\u957f\u4e00\u6bb5\u533a\u95f4\n3. \u65b0\u5efa\u4e00\u6bb5\u533a\u95f4\n\n\u7ef4\u62a4\u7684\u5177\u4f53\u5b9e\u73b0\u53ea\u9700\u8981\u7528\u4e00\u4e2a $f$ \u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u662f\u5426\u88ab\u52a0\u5165\u8fc7\uff0c\u5e76\u4e14\u6bcf\u6b21\u5408\u5e76\u5bf9\u5e94\u7684\u533a\u95f4\u5373\u53ef\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u5224\u65ad\u8fd9\u4e9b\u533a\u95f4\u662f\u5426\u5408\u6cd5\n\n\u66f4\u65b0\u533a\u95f4\u540e\u663e\u7136\u533a\u95f4\u7684\u957f\u5ea6\u53ea\u4f1a\u53d8\u957f\uff0c\u4e0d\u4f1a\u53d8\u77ed\n\n\u90a3\u4e48\u8003\u8651\u52a8\u6001\u7ef4\u62a4\u51e0\u4e2a\u7b80\u5355\u7684\u4e1c\u897f\uff1a\u533a\u95f4\u7684\u603b\u6570\u91cf\uff0c\u6700\u957f\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u957f\u5ea6\u7b49\u4e8e\u6700\u957f\u533a\u95f4\u7684\u533a\u95f4\u4e2a\u6570\uff0c\u5408\u6cd5\u533a\u95f4\u7684\u6700\u5927\u4e2a\u6570\u53ca\u6b64\u65f6\u6700\u5c0f\u7684 $k$\n\n\u8fd9\u4e9b\u663e\u7136\u5728\u5408\u5e76\u533a\u95f4\u662f\u53ef\u4ee5\u8f7b\u677e\u7ef4\u62a4\uff08\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\u5b9e\u73b0\uff09\n\n\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\u5f53 \u533a\u95f4\u7684\u603b\u6570\u91cf$=$\u957f\u5ea6\u7b49\u4e8e\u6700\u957f\u533a\u95f4\u7684\u533a\u95f4\u4e2a\u6570 \u65f6\uff0c\u8fd9\u4e9b\u533a\u95f4\u662f\u5408\u6cd5\u7684\u3002\u6b64\u65f6\u53ef\u4ee5\u7528\u533a\u95f4\u7684\u603b\u6570\u53bb\u66f4\u65b0\u7b54\u6848\uff0c\u6700\u540e\u8f93\u51fa\u6700\u4f18\u89e3\u5373\u53ef\n\n$Code\\ Below$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+5;\n\ninline int read()\n{\n\tregister int s=0;\n\tregister char c=getchar(),lc='+';\n\twhile (c<'0'||'9'<c) lc=c,c=getchar();\n\twhile ('0'<=c&&c<='9') s=s*10+c-'0',c=getchar();\n\treturn lc=='-'?-s:s;\n}\nvoid write(register int x)\n{\n\tif (x<0)\n\t{\n\t\tputchar('-');\n\t\tx=-x;\n\t}\n\tif (x<10) putchar(x+'0');\n\telse\n\t{\n\t\twrite(x/10);\n\t\tputchar(x%10+'0');\n\t}\n}\ninline void print(const register int x,const register char c='\\n')\n{\n\twrite(x);\n\tputchar(c);\n}\nbool f[N];\nint p[N],a[N],fa[N],siz[N];\nbool cmp(int x,int y)\n{\n\treturn a[x]<a[y];\n}\nint find(int x)\n{\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\nvoid merge(int x,int y)\n{\n\tint u=find(x),v=find(y);\n\tfa[u]=v;\n\tsiz[v]+=siz[u];\n}\n\nint main()\n{\n\tmemset(f,0,sizeof(f));\n\tint n=read();\n\tfor (int i=1;i<=n;i++) p[i]=fa[i]=i,siz[i]=1;\n\tfor (int i=1;i<=n;i++) a[i]=read();\n\tsort(p+1,p+1+n,cmp);\n\tint tot=0,cnt=0,L=1,Max=0,ans;//tot\u533a\u95f4\u7684\u603b\u6570\u91cf\uff0ccnt\u957f\u5ea6\u7b49\u4e8e\u6700\u957f\u533a\u95f4\u7684\u533a\u95f4\u4e2a\u6570\uff0cL\u6700\u957f\u533a\u95f4\u7684\u957f\u5ea6\uff0cMax\u5408\u6cd5\u533a\u95f4\u7684\u6700\u5927\u4e2a\u6570\u53ca\u6b64\u65f6\u6700\u5c0f\u7684\u7b54\u6848ans\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tint now=p[i];\n\t\tf[now]=1;\n\t\tif (!f[now-1]&&!f[now+1])\n\t\t{\n\t\t\ttot++;\n\t\t\tif (L==1) cnt++;\n\t\t}\n\t\telse if (f[now-1]&&f[now+1])\n\t\t{\n\t\t\ttot--;\n\t\t\tmerge(now-1,now);\n\t\t\tmerge(now+1,now);\n\t\t\tif (siz[now]>L)\n\t\t\t{\n\t\t\t\tL=siz[now];\n\t\t\t\tcnt=1;\n\t\t\t}\n\t\t\telse if (siz[now]==L) cnt++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (f[now-1]) merge(now-1,now);\n\t\t\tif (f[now+1]) merge(now+1,now);\n\t\t\tif (siz[now]>L)\n\t\t\t{\n\t\t\t\tL=siz[now];\n\t\t\t\tcnt=1;\n\t\t\t}\n\t\t\telse if (siz[now]==L) cnt++;\n\t\t}\n\t\tif (tot==cnt)\n\t\tif (tot>Max)\n\t\t{\n\t\t\tMax=tot;\n\t\t\tans=a[now]+1;\n\t\t}\n\t}\n\tprint(ans);\n\n\treturn 0;\n}\n```",
        "postTime": 1599786030,
        "uid": 61120,
        "name": "QwQcOrZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF982D \u3010Shark\u3011"
    },
    {
        "content": "\u7ffb\u8bd1\u6709\u70b9\u5570\u55e6\u4e86\uff0c\u5176\u5b9e\u8fd9\u9898\u8f93\u5165\u4e00\u4e32\u6570\uff0c\u8981\u6c42\u4f60\u627e\u5230\u4e00\u4e2a\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684 $k$\u3002\n\n1. \u6240\u6709\u5c0f\u4e8e $k$ \u7684\u6570\u7ec4\u6210\u7684\u8fde\u7eed\u5b50\u6bb5\u957f\u5ea6\u8981\u76f8\u7b49\u3002\n2. \u6ee1\u8db3 $1$ \u7684\u60c5\u51b5\u4e0b\u6bb5\u5c3d\u53ef\u80fd\u591a\u3002\n3. \u6ee1\u8db3\u524d\u4e24\u6761\u7684\u60c5\u51b5\u4e0b $k$ \u5c3d\u53ef\u80fd\u5c0f\u3002\n\n\u9047\u5230\u8fd9\u6837\u9650\u5236\u5f88\u591a\u7684\u9898\u76ee\uff0c\u4e00\u822c\u8003\u8651\u6392\u4e2a\u5e8f\u53bb\u6389\u4e00\u4e2a\u518d\u8003\u8651\u5269\u4e0b\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u6392\u4e2a\u5e8f\u7136\u540e\u4f9d\u6b21\u63d2\u5165\u5c31\u4fdd\u8bc1\u6ee1\u8db3 $1$ \u4e86\u3002\n\n\u90a3\u4e48\u53ea\u9700\u8981\u8003\u8651\u600e\u4e48\u5904\u7406\u5b50\u6bb5\u5c31\u884c\u4e86\u3002\u8fd9\u9898\u6ca1\u6709\u5bf9\u4e00\u6bb5\u91cc\u9762\u6570\u76f8\u5bf9\u4f4d\u7f6e\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u770b\u6210\u96c6\u5408\uff0c\u7528\u5e76\u67e5\u96c6\u5373\u53ef\u3002\u5408\u5e76\u7684\u65f6\u5019\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u4ee5\u53ca\u6700\u5927\u7684\uff0c\u5982\u679c\u96c6\u5408\u5927\u5c0f\u7b49\u4e8e\u6700\u5927\u7684\u7684\u6570\u91cf\u5c31\u662f\u96c6\u5408\u7684\u6570\u91cf\u5c31\u53ef\u4ee5\u66f4\u65b0\u7b54\u6848\u4e86\u3002\n\n\u4ee3\u7801\u5176\u5b9e\u5f88\u77ed\u554a\uff0c\u4e3a\u4ec0\u4e48\u5176\u5b83\u9898\u89e3\u770b\u4e0a\u53bb\u90a3\u4e48\u957f\u3002  \n\n```cpp\n// eq \u662f\u5927\u5c0f\u548c\u6700\u5927\u7684\u76f8\u7b49\u7684\u6bb5\u7684\u6570\u91cf\uff0cml \u662f\u6700\u5927\u7684\u5927\u5c0f\uff0cnum \u662f\u96c6\u5408\u6570\nvoid add(int x) {\n\tflag[x] = 1;\n\tflag[x-1] && (num --, eq -= size[find(x-1)] == ml, merge(x, x-1)), \n\tflag[x+1] && (num --, eq -= size[find(x+1)] == ml, merge(x, x+1));\n\tnum ++;\n\tint t = size[find(x)];\n\tif(ml < t) eq = 1, ml = t;\n\telse if(ml == t) eq ++;\n}\nint main() {\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; i++) scanf(\"%d\", &a[i].v), a[i].id = i;\n\tstd::sort(a+1, a+1+n);\n\tfor(int i = 1; i <= n; i++) fa[i] = i, size[i] = 1;\n\tfor(int i = 1; i <= n; i++) {\n\t\tadd(a[i].id);\n\t\tif(num == eq && (num > ann || (num == ann && ank > a[i].v+1))) \n\t\t\tank = a[i].v+1, ann = num;\n\t}\n\tprintf(\"%d\", ank);\n}\n```",
        "postTime": 1624430570,
        "uid": 40318,
        "name": "Acfboy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF982D Shark"
    },
    {
        "content": "\u9898\u76ee\u610f\u601d\uff1a\n\n\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217$a$\uff0c\u8ba9\u4f60\u6c42\u51fa\u4e00\u4e2a$k$\uff0c$a$\u4e2d\u5c0f\u4e8e$k$\u7684\u90e8\u5206\u5f62\u6210\u4e86\u5f88\u591a\u6bb5\u8fde\u7eed\u7684\u5e8f\u5217\uff0c\u8981\u6c42\u8fd9\u4e9b\u5e8f\u5217\u5fc5\u987b\u5168\u90e8\u4e00\u6837\u957f\uff0c\u5e76\u4e14\u8981\u6c42\u5e8f\u5217\u7684\u6570\u91cf\u5c3d\u91cf\u591a\uff0c\u5728\u5e8f\u5217\u6570\u91cf\u6700\u591a\u7684\u60c5\u51b5\u4e0b\u8981\u6c42$k$\u6700\u5c0f\u3002\n\n\u90a3\u4e48\u6211\u4eec\u7528\u4e00\u4e2a\u66f4\u597d\u7406\u89e3\u7684\u6a21\u578b\u6765\u8bf4\u660e\uff0c\u6211\u4eec\u770b\u6210\u8fd9\u91cc\u6709\u4e2a\u4e00\u7ef4\u6c99\u76d2\uff0c$a_i$\u8868\u793a$i$\u5730\u533a\u7684\u5730\u9762\u9ad8\u5ea6\uff0c\u73b0\u5728\u6211\u4eec\u7ed9\u5b9a\u4e00\u4e2a\u6c34\u4f4d$k$\uff0c\u5c0f\u4e8e$k$\u7684\u5730\u65b9\u90fd\u88ab\u6c34\u6df9\u6ca1\u4e86\uff0c\u88ab\u6df9\u6ca1\u7684\u533a\u57df\u88ab\u6ca1\u88ab\u6df9\u6ca1\u7684\u533a\u57df\u9694\u5f00\u4e86\u3002\n\n\u73b0\u5728\u6211\u4eec\u5047\u8bbe\u901a\u8fc7\u5e8f\u5217\u6765\u5efa\u7acb\u4e86\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c$son$\u8868\u793a\u5b50\u8282\u70b9\uff0c$father$\u5219\u662f\u7236\u4eb2\u8282\u70b9\uff0c\u8fd9\u68f5\u4e8c\u53c9\u6811\u4e2d\u4fdd\u8bc1$a[i] \\ge a[son[i]]$\uff0c\u90a3\u4e48$i$\u70b9\u4e0e$son[i]$\u7684\u5173\u7cfb\u662f\uff0c\u5f53$i$\u70b9\u88ab\u6df9\u6ca1\u540e\uff0c\u4ed6\u7684\u5de6\u513f\u5b50$lson[i]$\u548c\u53f3\u513f\u5b50$rson[i]$\u672c\u6765\u662f\u4e24\u4e2a\u5206\u5f00\u7684\u88ab\u6df9\u6ca1\u7684\u5757\uff0c\u73b0\u5728\u53d8\u6210\u4e86\u4e00\u5757\u88ab\u6df9\u6ca1\u7684\u5757\u4e86\u3002\u90a3\u4e48\u540c\u7406\uff0c\u5f53$father[i]$\u88ab\u6df9\u6ca1\uff0c$i$\u70b9\u548c\u4ed6\u6240\u6709\u5b50\u8282\u70b9\u5f62\u6210\u7684\u90a3\u4e2a\u88ab\u6df9\u6ca1\u7684\u5757\u5c31\u4f1a\u548c$father[i]$\u7684\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\u6240\u5c5e\u7684\u88ab\u6df9\u6ca1\u7684\u5757\u5408\u5e76\u3002\n\n\u6211\u4eec\u5efa\u7acb\u6709\u8fd9\u6837\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff0c\u6211\u6682\u65f6\u53ea\u60f3\u5230\u4e86\u901a\u8fc7\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u8bbe\u627e\u5230\u533a\u95f4$[l,r]$\u91cc\u9762\u6700\u5927\u503c\u7684\u4f4d\u7f6e\u7684\u51fd\u6570\u4e3a$max[l,r]$\uff0c\u7136\u540e\u5f53$x=max[l,r]$\uff0c\u6709$father[max[l,x-1]]=x$\u548c$father[max[x+1,r]]=x$\uff0c\u8fd9\u6837\u4fbf\u6784\u5efa\u4e00\u4e2a\u6709\u8fd9\u6837\u6027\u8d28\u7684\u4e8c\u53c9\u6811\n\n\u5269\u4e0b\u7684\uff0c\u4fbf\u662f\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u70b9\uff0c\u76f8\u5f53\u4e8e\u6dfb\u70b9\uff0c\u6dfb\u70b9$i$\u540e\uff0c$i$\u6240\u5728\u7684\u5b50\u6811\u7684\u7ed3\u70b9\u6811\u4fbf\u662f\u5b83\u6240\u5728\u7684\u88ab\u6df9\u6ca1\u7684\u5757\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u6211\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u73b0\u5728\u6709\u591a\u5c11\u4e2a\u72ec\u7acb\u7684\u8fd8\u6ca1\u6709\u5408\u5e76\u7684\u4e8c\u53c9\u6811$tree$\uff0c\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e9b\u6811\u4e2d\u7b49\u4e8e\u73b0\u5728\u6700\u957f\u6df9\u6ca1\u5757\u7684\u6570\u91cf$u$\uff0c\u8bb0\u5f55\u4e00\u4e0b\u73b0\u5728\u6700\u957f\u7684\u6df9\u6ca1\u5757\u957f\u5ea6$now$\uff0c\u5f53$u=tree$\u65f6\u66f4\u65b0\u7b54\u6848\u5c31\u597d\u4e86\u3002\n\n\u5269\u4e0b\u7684\u770b\u4ee3\u7801\u5427\u3002\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\n\nint n;\n\nstruct in\n{\n    int maxn,id;\n    bool operator < (const in &aa)const\n    {\n        return maxn<aa.maxn;\n    }\n}b[100005];\nin c[500005];\nint a[100005];\n\nbool cmp(const in &aa,const in &bb)\n{\n    return aa.maxn<bb.maxn;\n}\n\n//---------------------------------\n\nvoid build(int l,int r,int id)\n{\n    if(l==r)\n    {\n        c[id].maxn=a[l];\n        c[id].id=l;\n        return ;\n    }\n    int mid=(l+r)/2;\n    build(l,mid,id*2);\n    build(mid+1,r,id*2+1);\n    c[id]=max(c[id*2],c[id*2+1]);\n}\n\nin cck(int l,int r,int z,int y,int id)//\u533a\u95f4\u6700\u5927\u503c\n{\n    if(l==z&&r==y)\n        return c[id];\n    int mid=(l+r)/2;\n    if(mid>=y)return cck(l,mid,z,y,id*2);\n    else if(mid<z)return cck(mid+1,r,z,y,id*2+1);\n    else return max(cck(l,mid,z,mid,id*2),cck(mid+1,r,mid+1,y,id*2+1));\n}\n\n\n//-------------------------------------\n\n\nint l[100006];//\u5de6\u513f\u5b50\nint r[100006];//\u53f3\u513f\u5b50\nint t[100005];//\u5b50\u6811\u4e2a\u6570\nint v[100005];//\u5b50\u6811\u70b9\u6570\n\nint now;//\u73b0\u5728\u8fd9\u4e9b\u72ec\u7acb\u7684\u6811\u4e2d\u6700\u5927\u7684\u70b9\u6570\nint u;//\u70b9\u6570\u7b49\u4e8e\u73b0\u5728\u72ec\u7acb\u7684\u6811\u4e2d\u6700\u5927\u70b9\u6570\u7684\u6811\u7684\u4e2a\u6570\nint tree;//\u73b0\u5728\u72ec\u7acb\u7684\u6811\u7684\u4e2a\u6570\nint an;//\u6700\u5927\u7684\u76f8\u7b49\u5206\u6bb5\u6570\nint ans;//\u7b54\u6848\n\nint dfs(int x,int z,int y)//\u5efa\u6811\n{\n    if(z>y)return 0;\n    int nx=cck(1,n,z,y,1).id;\n    v[nx]++;\n    if(nx<x)\n        l[x]=nx;\n    if(nx>x)\n        r[x]=nx;\n    t[x]++;\n    if(nx+1<=y)\n        v[nx]+=dfs(nx,nx+1,y);\n    if(nx-1>=z)\n        v[nx]+=dfs(nx,z,nx-1);\n    return v[nx];\n}\n\nvoid run()\n{\n    build(1,n,1);\n    int first=cck(1,n,1,n,1).id;\n    if(first+1<=n)\n        v[first]+=dfs(first,first+1,n);\n    if(first-1>=1)\n        v[first]+=dfs(first,1,first-1);\n    v[first]++;\n    an=1;\n    ans=b[1].maxn;\n\n    for(int i=1;i<=n;i++)//\u4ece\u5c0f\u5230\u5927\u52a0\u70b9\n    {\n        int x=b[i].id;\n        tree-=(t[x]-1);\n\n        if(v[x]==now)\n            u++;\n        if(v[x]>now)\n        {\n            u=1;\n            now=v[x];\n        }\n        if(u==tree&&u>an)//\u5f53\u6240\u6709\u72ec\u7acb\u7684\u6811\u90fd\u662f\u540c\u6837\u957f\u65f6\uff0c\u66f4\u65b0\u7b54\u6848\n        {\n            an=u;\n            ans=b[i].maxn;\n        }\n    }\n\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n        b[i].maxn=a[i];\n        b[i].id=i;\n    }\n    sort(b+1,b+1+n,cmp);\n    run();\n    printf(\"%d\\n\",ans+1);\n    return 0;\n}\n```",
        "postTime": 1549529192,
        "uid": 34663,
        "name": "redegg",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF982D \u3010Shark\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u4ee4\u4eba\u70e6\u8e81\u7684\u5e76\u67e5\u96c6\u3002\n## \u601d\u8def\n\n\u8fd9\u9053\u9898\u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u628a\u5e8f\u5217 a \u6392\u5e8f\uff0c\u5b58\u5165\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4 b \u4e2d\uff0c\u4e3a\u4e86\u4f7f k \u5c3d\u91cf\u5c0f\uff0c\u6240\u4ee5\u7528\u6bcf\u4e2a\u626b\u4e00\u904d\u539f\u6570\u7ec4 a \u5224\u65ad\u662f\u5426\u7b26\u5408\u8981\u6c42\u3002\u4f46\u662f\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2)\n\n\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\uff0c\u6211\u4eec\u5728\u6392\u5e8f\u7684\u65f6\u5019\u5c06\u6570\u636e\u7684\u4e0b\u6807\u5b58\u4e0b\u6765\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u6570\u7ec4sum\u6765\u5b58\u4ee5 i \u4e3a\u6839\u7ed3\u70b9\u7684\u7684\u96c6\u5408\u5927\u5c0f\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4 cum \u6765\u5b58\u5927\u5c0f\u4e3a i \u7684\u96c6\u5408\u4e2a\u6570\uff0c\u7528 cnt \u6765\u5b58\u6240\u6709\u96c6\u5408\u7684\u4e2a\u6570\u3002\n\n\u6211\u4eec\u6bcf\u627e\u4e00\u4e2a\u4ece b \u6570\u7ec4\u4e2d\u6bcf\u627e\u4e00\u4e2a\u6570\u5c31\u770b\u5b83\u539f\u672c\u6570\u7ec4\u4e0b\u6807\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679c\u5c0f\u4e8e\u5c31\u548c\u524d\u9762\u4e00\u4e2a\u4f4d\u7f6e\u5408\u5e76\u3002\n\n\u7136\u540e\u5224\u65ad cnt \u662f\u5426\u7b49\u4e8e\uff0c\u5982\u679c\u7b49\u4e8e\uff0c\u5c31\u8868\u660e\u8fd9\u4e2a\u6570\u52a01\u7b26\u5408\u6761\u4ef6\uff0c\u5c06\u7b54\u6848\u66f4\u65b0\u3002\n\n\u7ed9\u51fa\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint fa[110001],a[110001],cnt,sum[110001],cum[110001],ans,maxn,n;;\nstruct node\n{\n    int val,index;\n}b[110001];\nbool cmp(node a,node b){return a.val<b.val;}\nint find(int x)\n{\n    if(fa[x]==x)\n        return x;\n    return fa[x]=find(fa[x]);\n}\nvoid merge(int a,int b)\n{\n    a=find(a);b=find(b);\n    cum[sum[a]]--;cum[sum[b]]--; \n    sum[a]+=sum[b];\n    fa[b]=a;cum[sum[a]]++;cnt--;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n        b[i].val=a[i];b[i].index=i;\n        fa[i]=i;\n    }\n    sort(b+1,b+1+n,cmp);\n    for(int i=1;i<=n;i++)\n    {\n        int ind=b[i].index;\n        sum[ind]=1;cum[sum[ind]]++;\n        cnt++;\n        if (ind!=1&&a[ind-1]<=a[ind])\n            merge(ind-1,ind);\n        if (ind!=n&&a[ind+1]<=a[ind])\n            merge(ind,ind+1);\n        for (;b[i].val==b[i+1].val&&i!=n;i++)\n        {\n            ind=b[i].index;sum[ind]=1;\n            cum[sum[ind]]++;cnt++;\n            if (ind!=1&&a[ind-1]<=a[ind])\n                merge(ind-1,ind);\n            if (ind!=n&&a[ind+1]<=a[ind])\n                merge(ind,ind+1);\n        }\n        if (cnt==cum[sum[find(b[i].index)]])\n            if (cnt>maxn)\n            {\n                maxn=cnt;\n                ans=b[i].val+1;\n            }\n    }\n    printf(\"%d\",ans);\n}\n```\n",
        "postTime": 1562680868,
        "uid": 41988,
        "name": "RNG_XDD\u5c0f\u53ee\u5f53",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF982D \u3010Shark\u3011"
    },
    {
        "content": "#### \u9898\u76ee\u5927\u610f\uff1a      \n\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 $a$\uff0c\u8ba9\u4f60\u6c42\u51fa\u4e00\u4e2a $k$ \uff0c$a$ \u4e2d\u5c0f\u4e8e $k$ \u7684\u90e8\u5206\u5f62\u6210\u4e86\u5f88\u591a\u6bb5\u8fde\u7eed\u7684\u5e8f\u5217\uff0c\u8981\u6c42\u8fd9\u4e9b\u5e8f\u5217\u5fc5\u987b\u5168\u90e8\u4e00\u6837\u957f\uff0c\u5e76\u4e14\u8981\u6c42\u5e8f\u5217\u7684\u6570\u91cf\u5c3d\u91cf\u591a\uff0c\u5728\u5e8f\u5217\u6570\u91cf\u6700\u591a\u7684\u60c5\u51b5\u4e0b\u8981\u6c42 $k$ \u6700\u5c0f\u3002     \n\u8fd9\u9053\u9898\u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u628a\u5e8f\u5217 $a$ \u6392\u5e8f\uff0c\u5b58\u5165\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4 $b$ \u4e2d\uff0c\u4e3a\u4e86\u4f7f $k$  \u5c3d\u91cf\u5c0f\uff0c\u6240\u4ee5\u7528\u6bcf\u4e2a $b_1+1$ \u6765\u626b\u4e00\u904d\u539f\u6570\u7ec4 $a$ \u5224\u65ad\u662f\u5426\u7b26\u5408\u8981\u6c42\uff0c\u5982\u679c\u53ef\u4ee5\u4ee5\u5c31\u5c06\u7b54\u6848\u66f4\u65b0\u3002\u4f46\u662f\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2)$\u7684\uff0c\u5f88\u660e\u663e\u8fc7\u4e0d\u4e86\u3002      \n\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\uff0c\u6211\u4eec\u5728\u6392\u5e8f\u7684\u65f6\u5019\u5c06\u6570\u636e\u7684\u4e0b\u6807\u5b58\u4e0b\u6765\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u6570\u7ec4$sum$\u6765\u5b58\u4ee5 $i$ \u4e3a\u6839\u7ed3\u70b9\u7684\u7684\u96c6\u5408\u5927\u5c0f\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4 $cntsum$ \u6765\u5b58\u5927\u5c0f\u4e3a $ i$ \u7684\u96c6\u5408\u4e2a\u6570\uff0c\u7528 $cnt$ \u6765\u5b58\u6240\u6709\u96c6\u5408\u7684\u4e2a\u6570\u3002\u6211\u4eec\u6bcf\u627e\u4e00\u4e2a\u4ece $b$ \u6570\u7ec4\u4e2d\u6bcf\u627e\u4e00\u4e2a\u6570\u5c31\u770b\u5b83\u539f\u672c\u6570\u7ec4\u4e0b\u6807\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679c\u5c0f\u4e8e\u5c31\u548c\u524d\u9762\u4e00\u4e2a\u4f4d\u7f6e\u5408\u5e76\u3002\u540e\u4e00\u4e2a\u4f4d\u7f6e\u540c\u7406\u3002\u7136\u540e\u5224\u65ad $cnt$ \u662f\u5426\u7b49\u4e8e $cntsum[sum[\u8fd9\u4e2a\u6570\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807]]$\uff0c\u5982\u679c\u7b49\u4e8e\uff0c\u5c31\u8868\u660e\u8fd9\u4e2a\u6570\u52a01\u7b26\u5408\u6761\u4ef6\uff0c\u5c06\u7b54\u6848\u66f4\u65b0\u3002   \n#### CODE:\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define N 110000\nusing namespace std;\nint fa[N+1],a[N+1],cnt,sum[N+1],cntsum[N+1];\nstruct node\n{\n\tint val,index;\n}b[N+1];\nbool cmp(node a,node b)\n{\n\treturn a.val<b.val;\n}\nint find(int x)\n{\n\tif(fa[x]==x)\n\t\treturn x;\n\treturn fa[x]=find(fa[x]);\n}\nvoid merge(int a,int b)\n{\n\ta=find(a); b=find(b);\n\tcntsum[sum[a]]--; cntsum[sum[b]]--;//\u548c\u5e76\u65f6\u8981\u7ef4\u62a4cnt,cntsum,sum \n\tsum[a]+=sum[b];\n\tfa[b]=a;\n\tcntsum[sum[a]]++;\n\tcnt--;\n}\nint ans,maxn;\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t\tb[i].val=a[i];\n\t\tb[i].index=i;\n\t\tfa[i]=i;\n\t}\n\tsort(b+1,b+1+n,cmp);\n\tfor(int i=1;i<=n;i++)\n\t{\n//\t\tprintf(\"i %d cnt %d\\n\",i,cnt);\n\t\tint pos=b[i].index;\n\t\tsum[pos]=1;\n\t\tcntsum[sum[pos]]++;\n\t\tcnt++;\n\t\tif(pos!=1&&a[pos-1]<=a[pos])\n\t\t\tmerge(pos-1,pos);\n\t\tif(pos!=n&&a[pos+1]<=a[pos])\n\t\t\tmerge(pos,pos+1);\n\t\tfor(;b[i].val==b[i+1].val&&i!=n;i++)\n\t\t{\n\t\t\tpos=b[i].index;\n\t\t\tsum[pos]=1;\n\t\t\tcntsum[sum[pos]]++;\n\t\t\tcnt++;\n\t\t\tif(pos!=1&&a[pos-1]<=a[pos])\n\t\t\t\tmerge(pos-1,pos);\n\t\t\tif(pos!=n&&a[pos+1]<=a[pos])\n\t\t\t\tmerge(pos,pos+1);\n\t\t}\n\t\tif(cnt==cntsum[sum[find(b[i].index)]])\n\t\t\tif(cnt>maxn)\n\t\t\t{\n\t\t\t\tmaxn=cnt;\n\t\t\t\tans=b[i].val+1;\n\t\t\t}\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1562285545,
        "uid": 111475,
        "name": "doctorZ_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF982D \u3010Shark\u3011"
    }
]