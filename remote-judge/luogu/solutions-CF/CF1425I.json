[
    {
        "content": "\u5bf9\u4e8e $a_i$ \u6839\u53f7\u5206\u6cbb\u3002\n\n\u5bf9\u4e8e $a_i>B$\uff1a\u628a\u6811\u62cd\u5e73\u7136\u540e\u62a0\u51fa\u6bcf\u4e2a $a_i>B$ \u7684\u8282\u70b9\uff0c\u585e\u8fdb\u4e00\u4e2a\u5206\u5757\u91cc\uff0c\u6bcf\u6b21\u66b4\u529b\u53d6\u51fa\u6240\u6709\u9700\u8981\u91c7\u6458\u7684\u8282\u70b9\u3002\u590d\u6742\u5ea6 $\\mathcal O(\\frac{Q}{B}+\\sqrt Q)$\u3002\n\n\u5bf9\u4e8e $a_i\\leq B$\uff1a\u5bf9\u6bcf\u4e2a $a_i$ \u5f00\u4e2a Beats \u5b58\u50a8\u5176\u4e0b\u6b21\u51fa\u73b0\u679c\u5b9e\u7684\u65f6\u95f4 $t_i$\uff0c\u6bcf\u6b21\u64cd\u4f5c\u76f8\u5f53\u4e8e\u628a\u6240\u6709 $t_i\\leq now$ \u7684 $t_i$ \u53d8\u6210 $now+a_i$\uff0c\u7136\u540e\u7edf\u8ba1\u76f8\u5173\u4fe1\u606f\u3002\u590d\u6742\u5ea6 $\\mathcal O(B\\log n)$\u3002\n\n\u5e73\u8861\u4e00\u4e0b\uff0c\u590d\u6742\u5ea6 $\\mathcal O(Q\\sqrt{Q\\log n})$\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u7531\u4e8e\u6811\u672c\u8eab\u662f\u4e00\u4e2a\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u539f\u6811\u5f53\u6210\u4e00\u4e2a Beats \u6765\u505a\u3002\n\n------------\n\n\u4f46\u662f $n,Q$ \u90fd\u53ea\u6709 $5\\times 10^4$\uff0c\u65f6\u9650\u6709 $7s$\u3002\n\n\u800c\u4e14\u66b4\u529b\u505a\u6cd5\u7684\u5e38\u6570\u5f88\u5c0f\u3002\n\n\u4e8e\u662f\u5c1d\u8bd5\u5199\u4e86\u4e00\u53d1 $\\mathcal O(nQ)$ \u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5b83\u8fc7\u4e86\u3002\u3002\u3002\n\n\u62c9\u706b\u8f66\u5934\u7684\u4e00\u90e8\u5206\u4ee3\u7801\u4e4b\u540e\u6781\u9650\u6570\u636e\u53ea\u9700\u8981 $1.2s$\u3002\n\n```cpp\n#pragma GCC optimize(\"Ofast,no-stack-protector,unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,fma,tune=native\") \n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int N=5e4+5;\n\nll read(){static ll x;scanf(\"%lld\",&x);return x;}\nvoid write(ll x){printf(\"%lld\",x);}\nvoid print(ll x,char c='\\n'){write(x),putchar(c);}\n\nvector<int>e[N];\nint a[N],t[N],st[N],ed[N],cntdfn=0,deep[N];\nvoid dfs(int now)\n{\n\tst[now]=++cntdfn;\n\tfor (int to:e[now]) deep[to]=deep[now]+1,dfs(to);\n\ted[now]=cntdfn;\n}\nvoid shuffle_p(int *a,int *p,int n)\n{\n\tstatic int b[N];\n\tmemcpy(b,a,sizeof(int)*(n+1));\n\tfor (int i=1;i<=n;i++) a[p[i]]=b[i];\n}\n\nsigned main()\n{\n\tint n=read(),Q=read();\n\tfor (int i=1;i<=n;i++) a[i]=read(),t[i]=0;\n\tfor (int i=2;i<=n;i++) e[read()].push_back(i);\n\tdfs(1);\n\tshuffle_p(a,st,n);\n\tshuffle_p(deep,st,n);\n\tfor (int T=1;T<=Q;T++)\n\t{\n\t\tint x=read(),ans1=0,ans2=0;\n\t\tfor (register int L=st[x],R=ed[x],i=L;i<=R;i++)\n\t\tif (t[i]<=T)\n\t\t{\n\t\t\tans1++,ans2+=deep[i];\n\t\t\tt[i]=T+a[i];\n\t\t}\n\t\tans2-=ans1*deep[st[x]];\n\t\tprint(ans2,' '),print(ans1);\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1640648091,
        "uid": 61120,
        "name": "QwQcOrZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1425I \u3010Impressive Harvesting of The Orchard\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a$n$\u4e2a\u70b9\u7684\u6709\u6839\u6811\uff0c\u6bcf\u4e2a\u70b9\u521d\u59cb\u6709\u4e2a\u679c\u5b50\uff0c\u7b2c$i$\u70b9\u7684\u679c\u5b50\u88ab\u6458\u4e86\u540e\u4f1a\u5728$a_i$\u5929\u540e\u91cd\u65b0\u957f\u51fa\u6765\uff0c\u4e00\u5171\u6709$q$\u5929\uff0c\u6bcf\u5929\u6458\u6389$x_i$\u5b50\u6811\u5185\u7684\u6240\u6709\u679c\u5b50\uff0c\u6c42\u6bcf\u5929\u6458\u4e86\u591a\u5c11\u679c\u5b50\u4ee5\u53ca\u6458\u7684\u679c\u5b50\u5230$x_i$\u7684\u8ddd\u79bb\u4e4b\u548c\u3002\n\nSolution\uff1a\n\n\u663e\u7136\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u5b50\u6811\u5185\u679c\u5b50\u7684\u4e2a\u6570\u4ee5\u53ca\u6df1\u5ea6\u4e4b\u548c\u5373\u53ef\u8ba1\u7b97\u7b54\u6848\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u53ef\u80fd\u628a\u6240\u6709\u7684\u679c\u5b50\u90fd\u679a\u4e3e\u4e00\u904d\uff0c\u56e0\u4e3a**\u6709\u7684**\u70b9\u7684$a_i$\u6bd4\u8f83\u5c0f\uff0c\u679a\u4e3e\u4f1a\u70b8\u6389\u3002\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5bf9$a_i$\u6309\u7167\u6839\u53f7\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n\u2460\u5bf9\u4e8e$a_i>\\sqrt q$\u7684\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5$O(\\sqrt q)$\u679a\u4e3e\u5b83\u957f\u51fa\u7684\u6240\u6709\u679c\u5b50\uff0c\u5c31\u662f\u627e\u957f\u51fa\u679c\u5b50\u540e\u5728\u6700\u65e9\u7684\u54ea\u5929\u88ab\u6458\u6389\u3002\u8fd9\u4e2a\u53ef\u4ee5\u79bb\u7ebfdfs\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u5230\u7956\u5148\u7684\u4e00\u6761\u94fe\u4e0a\u7684\u6240\u6709\u8be2\u95ee\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u679c\u5b50\uff0c\u5728\u5b58\u7740\u7956\u5148\u8be2\u95ee\u7684\u7ebf\u6bb5\u6811\u6216set\u4e0a\u4e8c\u5206\u6458\u6389\u65e5\u671f\u5373\u53ef\u3002\u8fd9\u662f$O(n\\sqrt q \\log n)$\u7684\u3002\n\n\u2461\u5bf9\u4e8e$a_i<=\\sqrt q$\u7684\u70b9\uff0c\u8fd9\u5927\u6982\u5c31\u9700\u8981\u5728\u6bcf\u4e00\u5929$t$\uff0c$O(\\sqrt q)$\u679a\u4e3e$a_i$\uff0c\u7136\u540e\u628a\u8fd9\u679c\u5b50\u201c\u6254\u5230\u201d$t+a_i$\u4e4b\u540e\u3002\u6211\u4eec\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e0b\u4e00\u4e2a\u679c\u5b50\u957f\u51fa\u7684\u65f6\u95f4$T_i$\uff0c\u90a3\u4e48\u5c31\u662f\uff0c\u628a\u6240\u6709\u5b50\u6811\u5185\u503c\u4e3a$a_i$\u4e14$T_i<=t$\u7684\u70b9\u90fd\u52a0\u4e0a$a_i$\uff0c\u7136\u540e\u7edf\u8ba1\u5b83\u4eec\u7684\u4fe1\u606f\u548c\u3002\u8fd9\u662f\u5565\uff1f\u8fd9\u662f\u5409\u8001\u5e08\u7ebf\u6bb5\u6811\u80fd$O(\\log n)$\u5e72\u7684\u3002\u5927\u6982\u5c31\u662f\uff0c\u7ef4\u62a4\u533a\u95f4\u5185\u6700\u5c0f\u503c\uff0c\u6b21\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff0c\u5173\u4e8e\u6574\u4f53\u7684\u4fe1\u606f\u4ee5\u53ca\u4ec5\u5173\u4e8e\u6700\u5c0f\u503c\u7684\u4fe1\u606f\uff0c\u6bcf\u6b21\u80fd\u76f4\u63a5\u64cd\u4f5c\u7684\u533a\u95f4\u8981\u4e48\u662f\u6574\u4f53\u5168\u90e8\u4fee\u6539\uff0c\u8981\u4e48\u4ec5\u4fee\u6539\u6700\u5c0f\u503c\uff0c\u8ba8\u8bba\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u5b98\u65b9\u9898\u89e3\u7684\u505a\u6cd5\u7adf\u7136\u662f\u76f4\u63a5\u628a\u6574\u68f5\u6811\u5f53\u4e00\u4e2a\u201c\u7ebf\u6bb5\u6811\u201d\u7136\u540e\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6811\u9ad8\u5f88\u4f4e\uff0c\u70b9\u7684\u513f\u5b50\u5f88\u5c11\u3002\u6211\u7684\u505a\u6cd5\u662f\u76f4\u63a5\u7528dfs\u5e8f\u533a\u95f4\u53bb\u5728$\\sqrt q$\u68f5\u7ebf\u6bb5\u6811\u4e0a\u505a\uff0c\u611f\u89c9\u8981\u6bd4\u524d\u9762\u90a3\u4e2a\u597d\u4e00\u70b9\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n#define blo 200\n#define N 50010\n#define inf 0x7fffffff\n#define upmin(_o, _a) _o = min(_o, _a)\n#define ls(_o) (_o << 1)\n#define rs(_o) ((_o << 1) | 1)\n#define did(_o, _x) \\\n    minn[_o] += _x; \\\n    adds[_o] += _x\nusing namespace std;\nnamespace ywy {\ninline int get() {\n    int n = 0;\n    char c;\n    while ((c = getchar()) || 23333)\n        if (c >= '0' && c <= '9')\n            break;\n    n = c - '0';\n    while ((c = getchar()) || 23333) {\n        if (c >= '0' && c <= '9')\n            n = n * 10 + c - '0';\n        else\n            return (n);\n    }\n}\nint lef[N * 2], rgh[N * 2], minn[N * 2], sec[N * 2], cmin[N * 2], sig[N * 2], cnt[N * 2], gn = 1, fan[N],\n                                                                                          a[N];\nvector<int> chs[N];\nvector<int> qry[N];\nint anscnt[N], anssig[N], deep[N], gdfn = 1;\nint pid, now, dx, maxn[N * 2], sigall[N * 2], call[N * 2];\ntypedef struct _seg {\n    int rt;\n    vector<int> vec;\n    inline void up(int tree) {\n        minn[tree] = min(minn[lef[tree]], minn[rgh[tree]]);\n        sec[tree] = inf;\n        cnt[tree] = sig[tree] = 0;\n        if (minn[lef[tree]] != minn[tree])\n            upmin(sec[tree], minn[lef[tree]]);\n        else\n            cnt[tree] += cnt[lef[tree]], sig[tree] += sig[lef[tree]];\n        if (minn[rgh[tree]] != minn[tree])\n            upmin(sec[tree], minn[rgh[tree]]);\n        else\n            cnt[tree] += cnt[rgh[tree]], sig[tree] += sig[rgh[tree]];\n        upmin(sec[tree], sec[lef[tree]]);\n        upmin(sec[tree], sec[rgh[tree]]);\n        maxn[tree] = max(maxn[lef[tree]], maxn[rgh[tree]]);\n        sigall[tree] = sigall[lef[tree]] + sigall[rgh[tree]];\n    }\n    int build(int l, int r) {\n        int me = gn;\n        gn++;\n        if (l == r) {\n            int pt = fan[vec[l - 1]];\n            minn[me] = maxn[me] = 1;\n            sec[me] = inf;\n            sig[me] = sigall[me] = deep[pt];\n            cnt[me] = 1;\n            return (me);\n        }\n        int mid = (l + r) >> 1;\n        lef[me] = build(l, mid);\n        rgh[me] = build(mid + 1, r);\n        up(me);\n        return (me);\n    }\n    inline void down(int tree, int l, int r) {\n        if (call[tree]) {\n            int mid = (l + r) >> 1;\n            cnt[lef[tree]] = mid - l + 1;\n            cnt[rgh[tree]] = r - mid;\n            sig[lef[tree]] = sigall[lef[tree]];\n            sig[rgh[tree]] = sigall[rgh[tree]];\n            int x = call[tree];\n            call[tree] = 0;\n            sec[lef[tree]] = sec[rgh[tree]] = inf;\n            maxn[lef[tree]] = maxn[rgh[tree]] = minn[lef[tree]] = minn[rgh[tree]] = x;\n            call[lef[tree]] = call[rgh[tree]] = x;\n            cmin[lef[tree]] = cmin[rgh[tree]] = 0;\n        }\n        if (cmin[tree]) {\n            int x = cmin[tree];\n            cmin[tree] = 0;\n            int g = min(minn[lef[tree]], minn[rgh[tree]]);\n            if (minn[lef[tree]] == g) {\n                minn[lef[tree]] = x;\n                if (sec[lef[tree]] == inf)\n                    maxn[lef[tree]] = x;\n                cmin[lef[tree]] = x;\n                call[lef[tree]] = 0;\n            }\n            if (minn[rgh[tree]] == g) {\n                minn[rgh[tree]] = x;\n                if (sec[rgh[tree]] == inf)\n                    maxn[rgh[tree]] = x;\n                cmin[rgh[tree]] = x;\n                call[rgh[tree]] = 0;\n            }\n        }\n    }\n    void stb(int rl, int rr, int l, int r, int tree) {\n        if (minn[tree] > now)\n            return;\n        int mid = (l + r) >> 1;\n        if (l != r)\n            down(tree, l, r);\n        if (rl == l && rr == r) {\n            if (maxn[tree] <= now) {\n                cmin[tree] = 0;\n                call[tree] = maxn[tree] = minn[tree] = now + dx;\n                sec[tree] = inf;\n                cnt[tree] = r - l + 1;\n                sig[tree] = sigall[tree];\n                anscnt[pid] += (r - l + 1);\n                anssig[pid] += sigall[tree];\n                return;\n            }\n            if (minn[tree] <= now && sec[tree] > now + dx) {\n                cmin[tree] = minn[tree] = now + dx;\n                anscnt[pid] += cnt[tree];\n                anssig[pid] += sig[tree];\n                return;\n            }\n            stb(l, mid, l, mid, lef[tree]);\n            stb(mid + 1, r, mid + 1, r, rgh[tree]);\n            up(tree);\n            return;\n        }\n        if (rl > mid)\n            stb(rl, rr, mid + 1, r, rgh[tree]);\n        else {\n            if (rr <= mid)\n                stb(rl, rr, l, mid, lef[tree]);\n            else {\n                stb(rl, mid, l, mid, lef[tree]);\n                stb(mid + 1, rr, mid + 1, r, rgh[tree]);\n            }\n        }\n        up(tree);\n    }\n} Segtree;\nint sz[N][blo + 2];\nSegtree ts[blo + 2];\nint size[N], dfn[N];\nvoid dfs(int pt) {\n    dfn[pt] = gdfn;\n    fan[gdfn] = pt;\n    gdfn++;\n    size[pt] = 1;\n    if (a[pt] <= blo)\n        sz[pt][a[pt]]++;\n    for (register int i = 0; i < chs[pt].size(); i++) {\n        deep[chs[pt][i]] = deep[pt] + 1;\n        dfs(chs[pt][i]);\n        size[pt] += size[chs[pt][i]];\n        for (register int j = 1; j <= blo; j++) sz[pt][j] += sz[chs[pt][i]][j];\n    }\n}\nnamespace sgt {\nint data[N * 4];\nvoid addpt(int l, int r, int tree, int pt, int x) {\n    data[tree] += x;\n    if (l == r)\n        return;\n    int mid = (l + r) >> 1;\n    if (pt <= mid)\n        addpt(l, mid, ls(tree), pt, x);\n    else\n        addpt(mid + 1, r, rs(tree), pt, x);\n}\nint query(int rl, int rr, int l, int r, int tree) {\n    if (!data[tree] || rl > rr)\n        return (0);\n    if (l == r)\n        return (l);\n    int mid = (l + r) >> 1;\n    if (rl == l && rr == r) {\n        if (data[ls(tree)])\n            return (query(l, mid, l, mid, ls(tree)));\n        return (query(mid + 1, r, mid + 1, r, rs(tree)));\n    }\n    if (rl > mid)\n        return (query(rl, rr, mid + 1, r, rs(tree)));\n    if (rr <= mid)\n        return (query(rl, rr, l, mid, ls(tree)));\n    int t = query(rl, mid, l, mid, ls(tree));\n    if (t)\n        return (t);\n    return (query(mid + 1, rr, mid + 1, r, rs(tree)));\n}\n}  // namespace sgt\nint n, q;\nvoid solve(int pt) {\n    for (register int i = 0; i < qry[pt].size(); i++) sgt::addpt(1, q, 1, qry[pt][i], 1);\n    if (a[pt] > blo) {\n        int lst = 1;\n        while (1) {\n            int dst = sgt::query(lst, q, 1, q, 1);\n            if (!dst)\n                break;\n            lst = dst + a[pt];\n            anscnt[dst]++;\n            anssig[dst] += deep[pt];\n        }\n    }\n    for (register int i = 0; i < chs[pt].size(); i++) solve(chs[pt][i]);\n    for (register int i = 0; i < qry[pt].size(); i++) sgt::addpt(1, q, 1, qry[pt][i], -1);\n}\nint pts[N];\nvoid ywymain() {\n    n = get(), q = get();\n    for (register int i = 1; i <= n; i++) a[i] = get();\n    for (register int i = 2; i <= n; i++) chs[get()].push_back(i);\n    dfs(1);\n    for (register int i = 1; i <= n; i++) {\n        if (a[i] <= blo)\n            ts[a[i]].vec.push_back(dfn[i]);\n    }\n    for (register int i = 1; i <= blo; i++) {\n        if (!sz[1][i])\n            continue;\n        sort(ts[i].vec.begin(), ts[i].vec.end());\n        ts[i].rt = ts[i].build(1, ts[i].vec.size());\n    }\n    for (register int i = 1; i <= q; i++) {\n        int me = get();\n        pts[i] = me;\n        pid = i;\n        now = i;\n        int dl = dfn[me], dr = dfn[me] + size[me] - 1;\n        for (register int j = 1; j <= blo; j++) {\n            if (!sz[me][j])\n                continue;\n            int ans = -1, l = 0, r = ts[j].vec.size() - 1;\n            while (l <= r) {\n                int mid = (l + r) >> 1;\n                if (ts[j].vec[mid] >= dl)\n                    ans = mid, r = mid - 1;\n                else\n                    l = mid + 1;\n            }\n            int rl = ans;\n            ans = -1;\n            l = 0, r = ts[j].vec.size() - 1;\n            while (l <= r) {\n                int mid = (l + r) >> 1;\n                if (ts[j].vec[mid] <= dr)\n                    ans = mid, l = mid + 1;\n                else\n                    r = mid - 1;\n            }\n            int rr = ans;\n            dx = j;\n            ts[j].stb(rl + 1, rr + 1, 1, ts[j].vec.size(), ts[j].rt);\n        }\n        qry[me].push_back(i);\n    }\n    solve(1);\n    for (register int i = 1; i <= q; i++) {\n        printf(\"%d %d\\n\", anssig[i] - deep[pts[i]] * anscnt[i], anscnt[i]);\n    }\n}\n}  // namespace ywy\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1601510646,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1425I \u3010Impressive Harvesting of The Orchard\u3011"
    },
    {
        "content": "\u6811\u5256\u59d0\u59d0\u5b66\u5b8c\u6587\u5316\u8bfe\u53d1\u73b0\u5979\u7684 DS \u6c34\u5e73\u4e0d\u884c\u4e86\uff0c\u4e8e\u662f\u5979\u5c31\u5199\u4e86\u4e2a\u66b4\u529b\u8fc7\u4e86\u8fd9\u4e2a\u9898\uff0c\u5e76\u53d1\u7bc7\u9898\u89e3\u796d\u4e4b\u3002\n\n\u7136\u800c\u4f20\u7edf\u7684\u66b4\u529b\uff08\u76f4\u63a5\u679a\u4e3e\u5b50\u8282\u70b9\uff09\u5e76\u4e0d\u80fd\u901a\u8fc7\uff0c\u56e0\u6b64\u66b4\u529b\u9700\u8981\u6362\u4e2a\u59ff\u52bf\u3002\n\n\u6211\u4eec\u5c06\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u8d21\u732e\u3002\u7136\u540e\u6211\u4eec\u76f4\u63a5\u679a\u4e3e\u8282\u70b9\u3002\u56e0\u4e3a\u6811\u9ad8\u53ea\u6709 $10$\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u6807\u8bb0\u8be5\u8282\u70b9\u7684\u7956\u5148\uff0c\u8fd9\u6837\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u5728\u679a\u4e3e\u8be2\u95ee\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u5728\u4e0d\u5728 $x_i$ \u7684\u5b50\u6811\u91cc\u3002\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u679a\u4e3e\u5b8c\u5c31\u8df3\u8fc7 $a_i$ \u4e2a\u8be2\u95ee\uff08\u56e0\u4e3a\u8fd9\u65f6\u5019\u679c\u5b50\u8fd8\u6ca1\u6709\u957f\u51fa\u6765\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u6781\u5927\u51cf\u5c11\u679a\u4e3e\u6570\u91cf\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\n\n#define pb push_back\n#define MAXN 100005\n\nint n,m;\nint fa[MAXN],a[MAXN],s[MAXN],h[MAXN];\nvector<int>v[MAXN],w[MAXN];\nint cnt = 0;\nint b[MAXN];\nint d[MAXN],df[MAXN];\nint ne[MAXN],t[MAXN],fr[MAXN];\nint an1[MAXN],an2[MAXN],c[MAXN];\n\nint read() {\n\tint x = 0;\n\tchar ch = ' ';\n\twhile(ch < '0' || ch > '9') ch = getchar();\n\twhile('0' <= ch  && ch <= '9') {\n\t\tx = x*10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn x;\n}\n\nvoid put(int x) {\n\tif(x >= 10) put(x/10);\n\tputchar(x%10+'0');\n}\n\nvoid dfs(int x) {\n\tfor(int i = 0; i < w[x].size(); i ++) {\n\t\tint y = w[x][i]; \n\t\th[y] = h[x]+1;\n\t\tdfs(y);\n\t} \n}\n\nsigned main() {\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n; i ++) {\n\t\ta[i] = read();\n\t\ta[i] --;\n\t}\n\t\n\t\t\n\tfor(int i = 2; i <= n; i ++) {\n\t\tfa[i] = read();\n\t\tw[fa[i]].pb(i);\n\t}\n\tdfs(1);\n\tfor(int i = 1; i <= m; i ++) c[i] = read();\n\t\n\tfor(int i = 1; i <= n; i ++) {\n\t\tfor(int j = i; j ; j = fa[j])\n\t\t\tfr[j] = i;\n\t\t\n\t\tfor(int j = 1; j <= m; j ++) \n\t\tif(fr[c[j]] == i){\n\t\t\tan1[j] ++;\n\t\t\tan2[j] += h[i];\n\t\t\tj += a[i];\n\t\t}\n\t}\n\tfor(int i = 1; i <= m; i ++)\n\t\tan2[i] -= an1[i]*h[c[i]];\n\tfor(int i = 1; i <= m; i ++) {\n\t\tput(an2[i]);putchar(' ');\n\t\tput(an1[i]);putchar('\\n');\n\t\t\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1657726097,
        "uid": 124721,
        "name": "Ynoi",
        "ccfLevel": 7,
        "title": "\u9898\u89e3CF1425I"
    }
]