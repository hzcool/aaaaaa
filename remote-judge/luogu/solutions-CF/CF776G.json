[
    {
        "content": "> G. [CF776G Sherlock and the Encrypted Data](https://www.luogu.com.cn/problem/CF776G) *2900\n\n> $q$ \u7ec4\u8be2\u95ee\uff0c\u4ee5 16 \u8fdb\u5236\u7684\u5f62\u5f0f\u7ed9\u51fa $L, R$\uff0c\u6c42\u51fa\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6574\u6570 $x$ \u7684\u4e2a\u6570\u3002\n>\n> 1. $L\\leq x \\leq R$\u3002\n> 2. $f(x) < x$\u3002\u5176\u4e2d $f(x)$ \u5b9a\u4e49\u5982\u4e0b\uff1a\n>\n> \u8bbe $x$ \u5728 16 \u8fdb\u5236\u4e0b\u7684\u6570\u4f4d\u5206\u522b\u4e3a $\\overline{d_k d_{k - 1} d_{k - 2} \\cdots d_0}$\uff0c\u4ee4 $y = \\sum\\limits_{i = 0} ^ {15} 2 ^ i[i\\in d]$\uff0c\u5219 $f(x) = x \\oplus y$\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c$f(x)$ \u7b49\u4e8e $x$ \u5f02\u6216\u4e0a \u201c$2$ \u7684 \u201c\u6240\u6709\u5728 $x$ \u7684 16 \u8fdb\u5236\u4e0b\u51fa\u73b0\u7684\u6570\u7801\u201d \u6b21\u5e42\u4e4b\u548c\u201d\u3002\n>\n> $1\\leq q\\leq 10 ^ 4$\uff0c$0\\leq L\\leq R < 16 ^ {15}$\u3002\n\n\u8003\u8651\u6570\u4f4d DP\uff0c\u7528 $\\leq R$ \u7684\u7b26\u5408\u6761\u4ef6 2 \u7684\u6570\u7684\u4e2a\u6570\u51cf\u53bb $< L$\u200b \u7684\u7b26\u5408\u6761\u4ef6 2 \u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u4ee4 $D = \\max d$\u3002\u6211\u4eec\u53ea\u5173\u5fc3 $x$ \u5728\u4e8c\u8fdb\u5236\u4e0b\u7b2c $D$ \u4f4d\u7684\u53d6\u503c\u3002\u56e0\u4e3a\u82e5\u4e3a $1$\uff0c\u5219 $f(x)$ \u7684\u7b2c $D$ \u4f4d\u4e3a $0$\uff08\u800c\u9ad8\u4f4d\u4e0d\u53d8\u56e0\u4e3a $D$ \u5df2\u7ecf\u662f\u6700\u9ad8\u4f4d\u4e86\uff09\uff0c$f(x) < x$\uff1b\u5426\u5219 $f(x)$ \u7684\u7b2c $D$ \u4f4d\u4e3a $1$\uff0c$f(x) > x$\u200b\u3002\n\n\u56e0\u6b64\uff0c\u76f4\u63a5\u679a\u4e3e $D$\uff0c\u5957\u8def\u5730\u8bbe $f_{i, j, k}$ \u8868\u793a\u5f53\u524d\u8003\u8651\u4e86\u9ad8 $i$ \u4f4d\uff0816 \u8fdb\u5236\u4e0b\uff09\uff0c\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u4e00\u4f4d\u6ee1\u8db3 $d_p = D$ \u4ee5\u53ca\u662f\u5426\u9876\u5230\u4e0a\u754c\u3002\u6839\u636e\u5b9e\u9645\u610f\u4e49\u679a\u4e3e\u4e0b\u4e00\u4f4d\u8f6c\u79fb\u5373\u53ef\uff0c\u6ce8\u610f\u8003\u8651 $D$\uff0c\u9876\u5230\u4e0a\u754c\u7684 $d_{p - 1}(R)$ \u4ee5\u53ca **\u4e8c\u8fdb\u5236\u4e0b** \u7b2c $D$ \u4f4d\u4e3a $0$ \u7684\u9650\u5236\u3002\n\n\u7b54\u6848\u5373\u5bf9 $R$ \u6c42\u7684 $\\sum\\limits_{D = 0} ^ {15} f_{0, 1, 0} + f_{0, 1, 1}$ \u51cf\u53bb\u5bf9 $L$ \u6c42\u7684 $\\sum\\limits_{D = 0} ^ {15} f_{0, 1, 0}$\uff0c\u56e0\u4e3a\u524d\u8005\u662f $\\leq$\uff0c\u540e\u8005\u662f $<$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(qw ^ 3)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 16;\nlong long q, ans, f[N][2][2];\nlong long calc(char *s, bool type) {\n\tlong long n = strlen(s), d[N], ans = 0;\n\treverse(s, s + n); // ADD THIS LINE\n\tfor(int i = 0; i < n; i++) d[i] = isdigit(s[i]) ? s[i] - '0' : s[i] + 10 - 'a';\n\tfor(int mxd = 0; mxd < N; mxd++) {\n\t\tmemset(f, 0, sizeof(f)), f[n][0][1] = 1;\n\t\tif(mxd >= n << 2) continue;\n\t\tfor(int p = n; p; p--) {\n\t\t\tfor(int x : {0, 1}) {\n\t\t\t\tfor(int y : {0, 1}) {\n\t\t\t\t\tif(!f[p][x][y]) continue;\n\t\t\t\t\tfor(int dig = 0; dig <= mxd; dig++) {\n\t\t\t\t\t\tif((mxd >> 2) == p - 1 && dig >> mxd - (p - 1 << 2) & 1 ^ 1) continue;\n\t\t\t\t\t\tif(y && dig > d[p - 1]) continue;\n\t\t\t\t\t\tf[p - 1][x | (dig == mxd)][y & (dig == d[p - 1])] += f[p][x][y];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tans += f[0][1][0] + type * f[0][1][1];\n\t}\n\treturn ans;\n}\nint main() {\n\t// freopen(\"1.in\", \"r\", stdin);\n\tcin >> q;\n\tfor(int i = 1; i <= q; i++) {\n\t\tchar s[N];\n\t\tscanf(\"%s\", s), ans = -calc(s, 0);\n\t\tscanf(\"%s\", s), cout << ans + calc(s, 1) << endl;\n\t}\n\treturn 0;\n}\n\n/*\n2022/4/28\nstart thinking at ??:??\n\n\u56de\u5bb6\u8def\u4e0a\u60f3\u7684.\n\u6ce8\u610f\u5230\u53ea\u548c maxdigit \u6709\u5173, maxdigit \u7684\u4f4d\u7f6e\u51b3\u5b9a\u4e86\u5176\u5927\u5c0f.\n\u76f4\u63a5\u679a\u4e3e maxdigit DP \u5373\u53ef.\nf_{i, j, k} \u8868\u793a\u8003\u8651\u9ad8 i \u4f4d, \u662f\u5426\u51fa\u73b0 maxdigit, \u662f\u5426\u9876\u5230\u4e0a\u754c\n\u65f6\u95f4\u590d\u6742\u5ea6 q * base ^ 2 * log_{base} n \n\n\nstart coding at 21:13\nfinish debugging at 21:37\n*/\n```",
        "postTime": 1651546691,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF776G Sherlock and the Encrypted Data"
    },
    {
        "content": "\u9898\u610f\uff1a\u95ee$[L,R]$\u533a\u95f4\u91cc\u6709\u591a\u5c11\u4e2a\u6570\u5728\u8fdb\u884c\u4e0b\u5217\u4e09\u6b21\u64cd\u4f5c\u540e\u53d8\u5c0f\uff1a\n\n1. \u5199\u6210$16$\u8fdb\u5236\uff0c\u628a\u6bcf\u4e2a\u4e0d\u540c\u6570\u4f4d\u5217\u51fa\u6765. \n\n1. \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u4f4d\uff0c\u8ba1\u7b97$2$\u7684\u5bf9\u5e94\u6b21\u5e42\uff0c\u6c42\u548c\u5f97\u5230$sum$. \n\n1. \u5c06\u539f\u6570\u4e0e$sum$\u5f02\u6216. $L,R\\le 16^{15}$\n\n\u89e3\uff1a\u5f88\u5bb9\u6613\u60f3\u5230\u6570\u4f4d$dp$\u3002\u4e0d\u96be\u53d1\u73b0\u7b2c$2$\u6b65\u7b97\u51fa\u7684\u548c\u6700\u591a\u53ea\u80fd\u6709$2^{16}-1$\uff0c\u4e5f\u5c31\u662f\u53ea\u5f71\u54cd\u539f\u6570\u5341\u516d\u8fdb\u5236\u4e0b\u7684\u6700\u540e$4$\u4f4d\u3002\u90a3\u4e48\u600e\u4e48\u8bbe\u8ba1\u72b6\u6001\u5462\uff1f\u5982\u679c\u5c06\u8fd9\u4e2a\u548c\u76f4\u63a5\u52a0\u5165\u72b6\u6001\uff0c\u90a3\u4e48\u603b\u72b6\u6001\u6570\u81f3\u5c11\u662f\uff08\u4f4d\u6570\u00d7\u72b6\u6001\u6570=$16 * 2^{16} $\uff09\uff0c\u4e58\u4e0a\u6570\u636e\u7ec4\u6570\u7684\u8bdd\u663e\u7136\u4f1a\u8d85\u65f6\u3002\u90a3\u4e48\u600e\u4e48\u7b80\u5316\u72b6\u6001\u5462\uff1f\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u5b58\u50a8\u6574\u4e2a$sum$\u3002\u201c\u5f02\u6216\u540e\u51cf\u5c0f\u201d\u8fd9\u4e2a\u6761\u4ef6\u53ef\u4ee5\u8f6c\u5316\u6210\uff1a\u539f\u6570\u4e2d$sum$\u7684\u6700\u9ad8\u4f4d\u7684\u90a3\u4e00\u4f4d\u4e5f\u662f$1$\uff0c\u56e0\u4e3a\u6bd4\u8fd9\u4e00\u4f4d\u66f4\u9ad8\u7684\u4f4d\u5f02\u6216\u540e\u4e0d\u4f1a\u53d8\u5316\uff0c\u8fd9\u4e00\u4f4d\u5f02\u6216\u540e\u4ece$1$\u53d8\u4e3a$0$\uff0c\u90a3\u4e48\u6839\u636e\u4e8c\u8fdb\u5236\u6570\u7684\u6027\u8d28\u539f\u6570\u4e00\u5b9a\u4f1a\u51cf\u5c0f\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5b58\u50a8$sum$\u7684\u6700\u9ad8\u4f4d\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5728\u4ee3\u7801\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e0d\u5fc5\u5c06$sum$\u7684\u6700\u9ad8\u4f4d\u4fdd\u5b58\u5728\u771f\u6b63\u7684\u72b6\u6001\u4e2d\uff0c\u53ef\u4ee5\u679a\u4e3e$sum$\u7684\u6700\u9ad8\u4f4d\uff0c\u8bbe\u4e3a\u7b2c$high$\u4f4d\uff0c\u5c06\u5b83\u4fdd\u5b58\u5728\u5168\u5c40\u53d8\u91cf\u4e2d\u7136\u540e\u76f4\u63a5\u505a16\u8fdb\u5236\u7684\u6570\u4f4ddp\u3002\u679a\u4e3e\u7684\u65f6\u5019\u6bcf\u4e00\u4f4d\u6700\u591a\u679a\u4e3e\u5230$high$\uff0c\u6ce8\u610f\u5728\u679a\u4e3e$high$\u6240\u5728\u7684\u90a3\u4e2a16\u8fdb\u5236\u6570\u4f4d\u7684\u65f6\u5019\uff0c\u8981\u4fdd\u8bc1\u8fd9\u4e00\u4f4d\u4e0a\u7684\u6570\u6ee1\u8db3\u201c\u539f\u6570\u4e2d$sum$\u7684\u6700\u9ad8\u4f4d\u7684\u90a3\u4e00\u4f4d\u4e5f\u662f$1$\u201d\u8fd9\u4e2a\u6761\u4ef6\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long int ll;\nll dp[2][16];\nint a[20];\nint high;\nll dfs(int pos,int state,bool lead,bool limit)\n/*pos\u8868\u793a\u679a\u4e3e\u5230\u7b2cpos\u4f4d\uff0cstate\u8868\u793a\u5f53\u524d\u679a\u4e3e\u7684\u6570\u4f4d\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e00\u4f4d\u7684\u503c\u4e3ahigh*/\n{\n    if(pos==-1)return state;\n    if(!limit&&!lead&&dp[state][pos]!=-1)return dp[state][pos];\n    int up=limit?a[pos]:15;\n    up=min(up,high);\n    ll ans=0;\n    for(int i=0;i<=up;i++)\n    {\n    \tif((pos<<2)==((high>>2)<<2)&&!(i>>(high%4)&1))continue;\n        /*\u5982\u679c\u679a\u4e3e\u5230high\u6240\u5728\u768416\u8fdb\u5236\u4f4d\u8981\u7279\u5224*/\n    \tint nstate=state;\n    \tif((lead&&i==0)==0)/*\u65e0\u524d\u5bfc0*/\n    \t{\n    \t\tif(i==high)nstate=1;\n    \t}\n    \tans+=dfs(pos-1,nstate,lead&&i==0,limit&&i==a[pos]);\n    }\n    if(!limit&&!lead) dp[state][pos]=ans;\n    return ans;\n\n}\nll work(ll t)\n{\n\tif(t<=0)return 0;\n\tint cnt=0;\n\twhile(t)\n\t{\n\t\ta[cnt++]=t%16;\n\t\tt>>=4;\n\t}\n\tll ans=0;\n\tfor(high=4;high<min(16,cnt*4);high++)/*\u8fd9\u91cc\u5077\u4e86\u4e2a\u61d2\uff0chigh=0-3\u662f\u4e0d\u53ef\u80fd\u7684*/\n\t{\n\t\tmemset(dp,-1,sizeof(dp));\n\t\tans+=dfs(cnt-1,0,1,1);\n\t}\n\treturn ans;\n}\nint main()\n{\n\tint T;scanf(\"%d\",&T);\n\twhile(T--)\n\t{\n\t\tll l,r;\n\t\tscanf(\"%llx%llx\",&l,&r);\t\n\t\tprintf(\"%lld\\n\",work(r)-work(l-1));\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1580182964,
        "uid": 19639,
        "name": "aison",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF776G \u3010Sherlock and the Encrypted Data\u3011"
    },
    {
        "content": "\u633a\u81ea\u7136\u7684\u4e00\u4e2a\u9898\u5427\u3002\n\n\u8bbe\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u4e3a khx \u6570\u3002\n\n\u9996\u5148\u5dee\u5206\u8f6c\u5316\u3002\u53d8\u6210\u82e5\u5e72\u4e2a\u6c42\u5c0f\u4e8e\u67d0\u4e2a\u6570\u7684 khx \u6570\u7684\u6570\u91cf\u3002\n\n\u7136\u540e\u679a\u4e3e\u7b2c\u4e00\u4f4d\u4e0d\u540c\u7684\uff0c\u4ee5\u53ca\u8fd9\u4e00\u4f4d\u662f\u591a\u5c11\uff0c\u53d8\u6210 $\\mathrm O\\left(16^2q\\right)$ \u4e2a\u300c\u56fa\u5b9a\u524d\u7f00 $pre$\uff0c\u540e\u7f00 $suf$ \u4e2a\u4f4d\u7f6e\u968f\u4fbf\u53d6\uff0c\u5f97\u5230\u7684 khx \u6570\u7684\u6570\u91cf\u300d\u95ee\u9898\u3002\n\nkhx \u6570\u5176\u5b9e\u5c31\u662f\u627e\u5230\u8be5\u6570\u6700\u5927\u7684 digit $d$\uff0c\u6ee1\u8db3\u8be5\u6570\u7684\u4e8c\u8fdb\u5236\u7b2c $d$ \u4f4d\u4e3a $1$\u3002\u90a3\u5c31\u679a\u4e3e $d$ \u5457\u3002\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. $d$ \u5728 $pre$ \u91cc\u3002\u90a3\u4e48\u300c\u4e8c\u8fdb\u5236\u8be5\u4f4d\u4e3a $1$\u300d\u5df2\u7ecf\u53ef\u4ee5\u5224\u65ad\u3002\u63a5\u4e0b\u6765\u8981\u505a\u7684\u662f\u8ba1\u7b97\u5269\u4e0b $suf$ \u4f4d\u7684\u53d6\u503c\u65b9\u6848\u6570\uff0c\u4f7f\u5f97\u4e0e $pre$ \u4e00\u5e76\u7684\u6700\u5927 digit \u4e3a $d$\u3002\u5982\u679c $pre$ \u91cc\u6709 $>d$ \u90a3\u76f4\u63a5 skip\uff1b\u5426\u5219\u5982\u679c\u6709\u7b49\u4e8e $d$\uff0c\u90a3\u53ea\u8981\u6ee1\u8db3\u540e\u9762\u5168\u90e8\u4e0d\u8d85\u8fc7 $d$\uff1b\u5426\u5219\u4e0d\u4ec5\u5168\u90e8\u4e0d\u8d85\u8fc7 $d$\uff0c\u8fd8\u8981\u6709\u4e00\u4e2a\u7b49\u4e8e $d$\u3002\n\n   \u8bb0\u5f55 $f_{t,x}$ \u8868\u793a $x$ \u4e2a 16 \u8fdb\u5236\u4f4d\uff0cmask \u4e3a $t$ \u7684\u65b9\u6848\u6570\u3002\u5982\u679c\u6c42\u51fa\u4e86\u8fd9\u4e2a\u6570\u7ec4\uff0c\u9884\u5904\u7406\u4e2a\u524d\u7f00\u548c\u663e\u7136\u53ef\u4ee5 $\\mathrm O(1)$ \u56de\u7b54\u4e0a\u8ff0\u5185\u5bb9\u3002\n\n2. $d$ \u5728 $suf$ \u91cc\u3002\u90a3\u4e48\u5173\u4e8e\u6700\u5927 digit \u4e3a $d$\uff0c\u8ddf\u4e0a\u9762\u4e00\u6837\u3002\u6b64\u5916\u8fd8\u8981\u6ee1\u8db3\u7b2c `d >> 2` \u4f4d\u7684\u4e8c\u8fdb\u5236\u56db\u4f4d\u4e2d\u7b2c `d & 3` \u4f4d\u5fc5\u987b\u4e3a $1$\u3002\u5bb9\u6613\u53d1\u73b0\uff0c`d >> 2` \u4e0d\u7ba1\u662f\u591a\u5c11\u90fd\u672c\u8d28\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u7ed9 $f$ \u52a0\u4e00\u7ef4\u8868\u793a `d & 3`\u3002\u73b0\u5728 $f_{t,x,i}$ \u8868\u793a `d & 3` \u7b49\u4e8e $i$\uff0c\u5982\u679c\u65e0\u9650\u5236\u5219 $i=4$\u3002\n\n\u5982\u679c\u6c42\u51fa\u4e86 $f$\uff0c\u5219\u590d\u6742\u5ea6 $\\mathrm O\\!\\left(16^3q\\right)$\u3002\u73b0\u5728\u8003\u8651\u600e\u4e48\u6c42 $f$\u3002$x\\leq 1$ \u968f\u4fbf\u641e\u5427\uff0c\u5426\u5219\u7528\u5237\u8868\u6cd5\u51b3\u7b56\u67d0\u4e2a\u65e0\u9650\u5236\u7684\u4f4d\uff0c\u5bb9\u6613\u53d1\u73b0\u6b64\u65f6 $i$ \u662f\u591a\u5c11\u4e0d\u5f71\u54cd\u8f6c\u79fb\u7684\u8fc7\u7a0b\u3002\u72b6\u6001\u6570 $\\mathrm O\\!\\left(5\\times 16\\times 2^{16}\\right)$\uff0c\u8f6c\u79fb $\\mathrm O(16)$\uff0c\u590d\u6742\u5ea6 $\\mathrm O\\!\\left(5\\times16^2\\times 2^{16}\\right)$\u3002\n\n\u8bb2\u4e2a\u7b11\u8bdd\uff0c\u4e00\u5f00\u59cb\u6025\u5fd9\u8ddf tzc \u62a2\u4e00\u8840\uff0c\u8bfb\u9519\u9898\u4e86\uff0c\u4ee5\u4e3a digit \u4e0d\u53bb\u91cd\u3002\u90a3\u5176\u5b9e\u51e0\u4e4e\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7 $f$ \u6570\u7ec4\u7684 $t$ \u7684\u503c\u57df\u53d8\u6210\u4e86 $16\\times 2^{15}$\uff0c\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86 $\\mathrm O\\!\\left(5\\times 16^3\\times 2^{15}\\right)$\u3002\u8bfb\u9519\u9898\uff0c\u4f60\u8be5\u53cd\u601d\uff01\n\n```cpp\nint toint(char c) { return isdigit(c) ? c ^ 48 : c - 'a' + 10; }\nchar tochar(int x) { return x < 10 ? x ^ 48 : 'a' + (x - 10); }\n\nint f[1 << 16 | 10][16][5];\nvoid solve() {\n    f[0][0][4] = 1;\n    REP(v, 0, 15) REP(d, 0, 4) {\n        if(d == 4 || v >> d & 1) ++f[1 << v][1][d];\n    }\n    REP(x, 1, 14) REP(d, 0, 4) REP(t, 0, (1 << 16) - 1) if(f[t][x][d]) {\n        REP(v, 0, 15) f[t | 1 << v][x + 1][d] += f[t][x][d];\n    }\n    REP(t, 1, (1 << 16) - 1) REP(x, 0, 15) REP(d, 0, 4) f[t][x][d] += f[t - 1][x][d];\n}\n\nvoid mian() {\n    solve();\n    auto ask = [&](string pre, int suf) {\n        auto F = [&](int x, int y, int z) {\n            // cout << x << \" \" << y << \" \" << z << \"!!!\\n\";\n            if(x < 0) return 0ll;\n            else return f[x][y][z];\n        };\n        int ans = 0, alr = 0;\n        for(char c : pre) alr |= 1 << toint(c);\n        REP(d, 0, 15) {\n            int bit = d >> 2, mod = d & 3, cnt = 0;\n            if(alr >= (1 << d + 1)) continue;\n            if(bit >= suf) {\n                int shd = SZ(pre) - (bit - suf + 1);\n                if(shd >= 0 && toint(pre[shd]) >> mod & 1) {\n                    cnt += F((1 << d + 1) - 1, suf, 4);\n                    if(~alr >> d & 1) cnt -= F((1 << d) - 1, suf, 4);\n                }\n            } else {\n                cnt += F((1 << d + 1) - 1, suf, mod);\n                if(~alr >> d & 1) cnt -= F((1 << d) - 1, suf, mod);\n            }\n            ans += cnt;\n        }\n        return ans;\n    };\n    auto deal = [&](string s) {\n        int ans = 0;\n        REP(i, 0, SZ(s) - 1) {\n            int x = toint(s[i]);\n            REP(y, 0, x - 1) {\n                ans += ask(s.substr(0, i) + tochar(y), SZ(s) - 1 - i);\n            }\n        }\n        return ans;\n    };\n    auto ok = [&](string s) {\n        int S = 0, sum = 0, now = 1;\n        reverse(ALL(s));\n        for(char c : s) {\n            S += now * toint(c);\n            sum |= 1 << toint(c);\n            now *= 16;\n        }\n        return (S ^ sum) < S;\n    };\n    // int ans = 0;\n    // REP(a, 0, 1) REP(b, 0, 15) REP(c, 0, 15) {\n    //     string s = string() + tochar(a) + tochar(b) + tochar(c);\n    //     if(ans != deal(s)) cout << s << \" is bad\\n\";\n    //     if(ok(s)) ++ans;\n    // }\n    int qu = read();\n    while(qu--) {\n        string s, t; cin >> s >> t;\n        int ans = 0;\n        ans += deal(t);\n        ans -= deal(s);\n        ans += ok(t);\n        prt(ans), pc('\\n');\n    }\n}\n```",
        "postTime": 1651152479,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "cf776G"
    }
]