[
    {
        "content": "## Question\n\n[CF609E Minimum spanning tree for each edge](https://www.luogu.com.cn/problem/CF609E)\n\n## Solution\n\n+ [**Kruskal**](https://www.cnblogs.com/yoke/p/6697013.html)\n\n+ [**\u6811\u94fe\u5256\u5206**](https://www.cnblogs.com/ivanovcraft/p/9019090.html)\n\n\u5148\u7528 Kruskal \u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\n\n\u63a5\u7740\u5bf9\u6211\u4eec\u6c42\u51fa\u7684\u8fd9\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff08\u5176\u5b9e\u4e5f\u662f\u68f5\u6811\uff09\u8fdb\u884c\u6811\u94fe\u5256\u5206\u3002\n\n### \u7406\u60f3\u505a\u6cd5\n\n\u5bf9\u4e8e\u7b2c i \u4e2a\u67e5\u8be2\uff0c\u5148\u52a0\u4e0a\u7b2c i \u6761\u8fb9\uff0c\n\n\u63a5\u7740\u5728\u6784\u6210\u7684\u8fd9\u4e2a\u73af\u4e2d\u51cf\u53bb\u4e00\u6761\u8fb9\u6743\u6700\u5927\u7684\u8fb9\uff08\u7b2c i \u6761\u8fb9\u9664\u5916\uff09\u3002\n\n### \u5b9e\u9645\u505a\u6cd5\n\n\u9996\u5148\u8fd9\u4e2a\u7b2c i \u6761\u8fb9\u80af\u5b9a\u662f\u4e0d\u80fd\u771f\u7684\u52a0\u4e0a\u53bb\u7684\uff08\u8f93\u51fa\u65f6\u52a0\u4e0a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u5c31\u884c\u8fa3\uff09\n\n\u8bbe\u7b2c i \u6761\u8fb9\u662f\u8fde\u63a5\u8282\u70b9 u \u548c\u8282\u70b9 v \u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u73af\u9664\u53bb\u7b2c i \u6761\u8fb9\u540e\u5c31\u662f u \u548c v \u7684\u6700\u77ed\u8def\u5f84\uff08\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff09\u3002\n\n\u90a3\u8fd9\u4e2a\u73af\u4e2d\u6700\u5927\u8fb9\u6743\uff08\u7b2c i \u6761\u8fb9\u7684\u8fb9\u6743\u9664\u5916\uff09\u5c31\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u6c42\u51fa\u6765\u4e86\u3002\n\n\u53ef\u662f\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\n\n\u666e\u901a\u7684\u6811\u94fe\u5256\u5206\u662f\u70b9\u6743\uff0c\u800c\u8fd9\u91cc\u662f\u8fb9\u6743\u3002\n\n\u5176\u5b9e\u6211\u4eec\u53ea\u8981\u6bcf\u4e00\u4e2a\u70b9\u4e0a\u5b58\u8fd9\u4e2a\u70b9\u5230\u5b83\u7684\u7236\u4eb2\u7684\u8fb9\u7684\u8fb9\u6743\uff0c\u6839\u4e0a\u5b58\u4e00\u4e2a 0 \u5c31\u884c\u4e86\u3002\n\n\u63a5\u7740\u5728\u6811\u94fe\u5256\u5206\u7684\u67e5\u8be2\u4e0a\u6ce8\u610f\u4e00\u4e0b\uff0c\u4e0e\u666e\u901a\u7684\u6811\u94fe\u5256\u5206\u7565\u6709\u4e0d\u540c\uff0c\u81ea\u5df1\u753b\u56fe\u63a8\u4e00\u4e0b\u3002\n\n## Code\n\n### Notice\n\n\u5341\u5e74 OI \u4e00\u573a\u7a7a\uff0c\u4e0d\u5f00 **long long** \u89c1\u7956\u5b97\u3002\n\n```cpp\n#include\"bits/stdc++.h\"\nusing namespace std;\n#define N (long long)(2e5+10)\nlong long n,m;\nvector<long long>g[N];\nvector<long long>e[N];\nstruct ee {\n\tlong long a,b,c;\n}edge[N],d[N];\nlong long f[N],Ans=0,a[N];\nlong long dep[N],father[N],siz[N],hson[N],top[N],seg[N],rev[N],tot=1;\nstruct node {\n\tlong long l,r,Max;\n}t[N<<2];\ninline long long find(long long x) {\n\tif (f[x]!=x) f[x]=find(f[x]);\n\treturn f[x];\n}\ninline bool cmp(ee a,ee b) {\n\treturn a.c<b.c;\n}\ninline void dfs1(long long u,long long f) {\n\tdep[u]=dep[f]+1;\n\tfather[u]=f;\n\tsiz[u]=1;\n\tfor(long long i=0;i<g[u].size();i++) {\n\t\tlong long v=g[u][i];\n\t\tif (v!=f) {\n\t\t\ta[v]=e[u][i];\n\t\t\tdfs1(v,u);\n\t\t\tsiz[u]+=siz[v];\n\t\t\tif (siz[v]>siz[hson[u]]) hson[u]=v;\n\t\t}\n\t}\n}\ninline void dfs2(long long u,long long f) {\n\tif (hson[u]) {\n\t\ttop[hson[u]]=top[u];\n\t\tseg[hson[u]]=++tot;\n\t\trev[tot]=hson[u];\n\t\tdfs2(hson[u],u);\n\t\tfor(long long i=0;i<g[u].size();i++) {\n\t\t\tlong long v=g[u][i];\n\t\t\tif (v!=f&&v!=hson[u]) {\n\t\t\t\ttop[v]=v;\n\t\t\t\tseg[v]=++tot;\n\t\t\t\trev[tot]=v;\n\t\t\t\tdfs2(v,u);\n\t\t\t}\n\t\t}\n\t}\n}\ninline void build(long long p,long long l,long long r) {\n\tt[p].l=l; t[p].r=r;\n\tif (l==r) {\n\t\tt[p].Max=a[rev[l]];\n\t\treturn ;\n\t}\n\tlong long mid=(t[p].l+t[p].r)>>1;\n\tbuild(p<<1,l,mid); build(p<<1|1,mid+1,r);\n\tt[p].Max=max(t[p<<1].Max,t[p<<1|1].Max);\n}\ninline long long query(long long p,long long x,long long y) {\n\tif (x>y) return 0;\n\tif (t[p].l>=x&&t[p].r<=y) return t[p].Max;\n\tlong long ans=0,mid=(t[p].l+t[p].r)>>1;\n\tif (x<=mid) ans=max(ans,query(p<<1,x,y));\n\tif (mid<y) ans=max(ans,query(p<<1|1,x,y));\n\treturn ans;\n}\ninline long long qrange(long long x,long long y) {\n\tlong long ans=0;\n\twhile (top[x]!=top[y]) {\n\t\tif (dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tans=max(ans,query(1,seg[top[x]],seg[x]));\n\t\tx=father[top[x]]; if (x==0) x=1;\n\t}\n\tif (dep[x]>dep[y]) swap(x,y);\n\tans=max(ans,query(1,seg[hson[x]],seg[y]));\n\treturn ans;\n}\nsigned main() {\n\tios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n\tcin>>n>>m;\n\tfor(long long i=1;i<=m;i++) cin>>edge[i].a>>edge[i].b>>edge[i].c,d[i]=edge[i];\n\tfor(long long i=1;i<=n;i++) f[i]=i;\n\tsort(edge+1,edge+m+1,cmp);\n\tfor(long long i=1;i<=m;i++) {\n\t\tlong long fx=find(edge[i].a),fy=find(edge[i].b);\n\t\tif (fx==fy) continue;\n\t\tf[fx]=fy;\n\t\tg[edge[i].a].push_back(edge[i].b); e[edge[i].a].push_back(edge[i].c);\n\t\tg[edge[i].b].push_back(edge[i].a); e[edge[i].b].push_back(edge[i].c);\n\t\tAns+=edge[i].c;\n \t}\n \tdfs1(1,0); top[1]=seg[1]=rev[1]=1; dfs2(1,0);\n \tbuild(1,1,n);\n \tfor(long long i=1;i<=m;i++) {\n \t\tcout<<Ans+d[i].c-qrange(d[i].a,d[i].b)<<endl;\n \t}\n\treturn 0;\n}\n```\n\n\u5b8c\u7ed3\u6492\u82b1\uff01 ^.^",
        "postTime": 1621063615,
        "uid": 355448,
        "name": "Fido_Puppy",
        "ccfLevel": 0,
        "title": "CF609E Minimum spanning tree for each edge"
    },
    {
        "content": "**\u7b97\u6cd5\uff1akruskal \u6c42\u6700\u5c0f\u751f\u6210\u6811+\u6811\u5256+ST\u8868**\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u7528 kruskal \u8dd1\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7edf\u8ba1\u51fa\u5176\u8fb9\u6743\u548c\uff0c\u8bb0\u5176\u4e3a $anss$ \u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u5982\u679c\u5176\u5728\u6700\u5c0f\u751f\u6210\u6811\u5185\uff0c\u76f4\u63a5\u8f93\u51fa $anss$ \uff0c\u5426\u5219\u5f3a\u884c\u5728\u539f\u6811\u4e0a\u8fde $u$ \u5230 $v$ \u7684\u8fb9\uff0c\u5728 $u$ \u5230 $v$ \u7684\u8def\u5f84\u4e0a\u5bfb\u627e\u4e00\u6761\u6743\u503c\u6700\u5927\u7684\u8fb9\uff0c\u8bb0\u5b83\u8fb9\u6743\u4e3a $t$ \uff0c\u5c06\u5176\u5220\u53bb\uff0c\u7b54\u6848\u4e3a $anss+w-t$ \u3002\u5bfb\u627e\u8fd9\u6761\u6700\u5927\u7684\u8fb9\uff0c\u53ef\u4ee5\u500d\u589e\uff0c\u6811\u5256\uff0c\u8fd9\u4e2a\u561b\uff0c\u600e\u4e48\u5f00\u5fc3\u600e\u4e48\u6765\u3002\u6211\u9009\u62e9\u6811\u5256\uff0c\u4e0d\u8fc7\u4e0a\u8df3\u7edf\u8ba1\u7b54\u6848\u65f6\u5e76\u4e0d\u7528\u7ebf\u6bb5\u6811\uff0c\u800c\u662f $O(n\\log n)$ \u9884\u5904\u7406\uff0c$O(1)$ \u67e5\u8be2\u7684 ST \u8868\uff0c\u548c\u7ebf\u6bb5\u6811\u6bd4\u4f18\u52bf\u660e\u663e\u3002\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\u3002\n\n\u6c42\u6700\u5c0f\u751f\u6210\u6811\u590d\u6742\u5ea6 $O(m\\log m)$ \uff0c\u6811\u5256\u9884\u5904\u7406 $O(n)$ ,ST\u8868\u9884\u5904\u7406 $O(n \\log n)$ \uff0c\u67e5\u8be2\u603b\u590d\u6742\u5ea6 $O((m-n)\\log n)$ \uff0c\u603b\u590d\u6742\u5ea6 $O(m\\log m+m \\log n+n)$ \uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n**Q: \u4e3a\u4ec0\u4e48\u8981\u5220\u53bb $u$ \u5230 $v$ \u7684\u8def\u5f84\u4e0a\u6743\u503c\u6700\u5927\u7684\u8fb9\uff1f**\n\nA: \u4f60\u8981\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6240\u4ee5\u8981\u5220\u6700\u5927\u7684\u8fb9\uff1b\u5220\u8fb9\u540e\u662f\u4e00\u68f5\u6811\uff0c\u4e5f\u5c31\u662f\u8981\u56fe\u8054\u901a\uff0c\u5220\u53bb\u4e00\u6761\u8fb9\uff0c\u4e24\u7aef\u7684\u70b9\u6ca1\u6cd5\u76f4\u63a5\u76f8\u8fde\uff0c\u4f46\u4e4b\u95f4\u80fd\u4e92\u76f8\u5230\u8fbe\uff0c\u8fd9\u5c31\u5f97\u7ecf\u8fc7 $u$ \u5230 $v$ \u8fd9\u6761\u8fb9\u3002\u60f3\u4e00\u60f3\uff0c\u53d1\u73b0\u8fd9\u6761\u8fb9\u5fc5\u987b\u5728 $u$ \u5230 $v$ \u7684\u8def\u5f84\u4e0a\uff0c\u53ef\u4ee5\u753b\u56fe\u7406\u89e3\u3002\n\n\u4ee3\u7801\u5c31\u662f\u5f88\u7b80\u5355\u7684\u4e86\u3002\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge\n{\n\tint u,v,w,id,fl;\n}p[200010];\nbool cmp(edge a,edge b)\n{\n\treturn a.w<b.w;\n}\nint f[200010];\nint find(int x)\n{\n\tif(x==f[x])return x;\n\treturn f[x]=find(f[x]);\n}\n//kruskal\nint st[200001][21];\nint ask(int l,int r)\n{\n\tint k=log2(r-l+1);\n\treturn max(st[l][k],st[r-(1<<k)+1][k]);\n}\nvoid solve()\n{\n\tfor(int j=1;j<=22;j++)for(int i=1;i+(1<<j)-1<=n;i++)st[i][j]=max(st[i][j-1],st[i+(1<<(j-1))][j-1]);\n}//ST\u8868 \nstruct qq\n{\n\tint v,w,nex;\n}o[400010];\nint cnt,head[200010];\nint fa[2000010],top[200001],siz[200001],son[200001],d[200001],id[200001],ab[200001],a[200001];\nvoid add(int u,int v,int w)\n{\n\to[++cnt]=(qq){v,w,head[u]};head[u]=cnt;\n}\nvoid dfs(int x,int f,int deep)\n{\n\td[x]=deep;fa[x]=f;siz[x]=1;\n\tfor(int i=head[x],v,maxn=-1;i;i=o[i].nex)\n\t{\n\t\tv=o[i].v;if(v==fa[x])continue;\n\t\tdfs(v,x,deep+1);ab[v]=o[i].w;\n\t\tsiz[x]+=siz[v];\n\t\tif(maxn<siz[v])maxn=siz[v],son[x]=v;\n\t}\n}\nvoid dfs2(int x,int fafa)\n{\n\ttop[x]=fafa;st[id[x]=++id[0]][0]=ab[x];if(!son[x])return;\n\tdfs2(son[x],fafa);\n\tfor(int i=head[x],v;i;i=o[i].nex)\n\t{\n\t\tv=o[i].v;if(v==son[x]||v==fa[x])continue;\n\t\tdfs2(v,v);\n\t}\n}//\u6811\u5256 \nint ta(int u,int v)\n{\n\tint ans=-2100000000;\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(d[top[u]]<d[top[v]])swap(u,v);\n\t\tans=max(ans,ask(id[top[u]],id[u]));\n\t\tu=fa[top[u]];\n\t}\n\tif(d[u]>d[v])swap(u,v);\n\tif(u!=v)ans=max(ans,ask(id[u]+1,id[v]));\n\treturn ans;\n}//\u6c42u\u5230v\u6700\u5927\u7684\u8fb9 \nint n,m;\nlong long ans[200010],anss;\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)f[i]=i;\n\tfor(int i=1,u,v,w;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tp[i]=(edge){u,v,w,i,0};\n\t}\n\tsort(p+1,p+m+1,cmp);\n\tfor(int i=1;i<=m;i++)if(find(p[i].u)!=find(p[i].v))\n\t{\n\t\tf[find(p[i].u)]=find(p[i].v);\n\t\tadd(p[i].u,p[i].v,p[i].w);add(p[i].v,p[i].u,p[i].w);\n\t\tp[i].fl=1;anss+=p[i].w;\n\t}\n\tdfs(1,0,1);dfs2(1,1);solve();\n\tfor(int i=1;i<=m;i++)if(p[i].fl)ans[p[i].id]=anss;else ans[p[i].id]=anss+p[i].w-ta(p[i].u,p[i].v);\n\tfor(int i=1;i<=m;i++)printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1594715766,
        "uid": 223624,
        "name": "Apollo13",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    },
    {
        "content": "\u6709\u4e00\u8bf4\u4e00\uff0c\u611f\u89c9\u8fd9\u9053\u9898\u7684\u96be\u5ea6\u53ef\u80fd\u8fbe\u4e0d\u5230\u7d2b\uff0c\u4e0d\u8fc7\u7406\u89e3\u7684\u624d\u662f\u597d\u7684\u5bf9\u5427\u3002\n\n\u9996\u5148\u6211\u4eec\u6765\u4e86\u89e3\u4e0b\u9898\u76ee\u5927\u610f\uff1a\u5c31\u662f\u8ba9\u4f60\u6c42\u51fa\u8fd9\u68f5\u6811\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u7528\u5220\u53bb\u6240\u8f93\u5165\u70b9\u76f8\u8fde\u7684\u6700\u5927\u6743\u503c\u5728\u52a0\u4e0a\u8fb9\u6743\u3002\n\n\u800c\u8fd9\u9053\u9898\u672c\u849f\u84bb\u662f\u7528 LCA+Kruskal \u505a\u7684\uff0c\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u3002\n\n### \u8bdd\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\uff01\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nstruct node\t\t\t\t//\u8f93\u5165\u8f93\u5165\u6240\u7528\u7684\u7ed3\u6784\u4f53\n{\n    long long dis;\n\tint u,v,id;\n}t[400010];\nstruct EDGE\t\t\t\t//\u524d\u5411\u661f\u7ed3\u6784\u4f53\n{\n    long long dis;\n\tint ver,nxt;\n}p[400010];\nint depth[200010],f[200020][21],vis[200010],fa[200010],cnt,head[200010],n,m,x,y,q,start,end;\nlong long w[200020][21],alltreelong;\nint find(int x)\t\t\t\t//\u5e76\u67e5\u96c6\u5408\u5e76\u64cd\u4f5c\n{\n    if(fa[x]!=x) \n\tfa[x]=find(fa[x]);\n    return fa[x];\n}\nvoid add(int u,int v,long long l)\t//\u524d\u5411\u661f\n{\n    p[++cnt].dis=l;\n    p[cnt].nxt=head[u];\n    p[cnt].ver=v;\n    head[u]=cnt;\n}\nint cmp(node a,node b)\t\t\t//Kruskal \u5feb\u6392\u6c42\u6700\u77ed\u8fb9\n{\n    return a.dis<b.dis;\n}\nint cmp2(node a,node b)\t\t\t//\u540e\u671f\u6839\u636e ID \u8fd8\u539f\u987a\u5e8f\n{\n    return a.id<b.id;\n}\nvoid kru()\t\t\t\t//Kruskal \u5408\u5e76\n{\n    sort(t+1,t+m+1,cmp);\n    for(int i=1;i<=n;i++)\n\tfa[i]=i;\n    for(int i=1;i<=m;i++)\n\t{\n        int x=t[i].u,y=t[i].v,fx=find(x),fy=find(y);\n        if(fx!=fy)\n\t\t{\n            fa[fx]=fy;\n\t\t\tadd(fx,fy,t[i].dis);\n\t\t\tadd(fy,fx,t[i].dis);\n\t\t\talltreelong+=t[i].dis;\n        }\n    }\n}\nvoid dfs(int u)\t\t\t\t//\u6df1\u641c\u5efa\u6811\n{\n    vis[u]=1;\n    for(int j=1;j<=20;j++)\n\t{\n\n\t\tf[u][j]=f[f[u][j-1]][j-1] ;\n\t\tw[u][j]=max(w[u][j-1],w[f[u][j-1]][j-1]) ;\n\t}\n    for(int i=head[u];i;i=p[i].nxt)\n\t{\n        int v=p[i].ver;\n        if(vis[v])\n\t\tcontinue;\n        depth[v]=depth[u]+1;\n        f[v][0]=u;\n\t\tw[v][0]=p[i].dis;\n        dfs(v);\n    }\n}\nlong long lca(int x,int y)\t\t//LCA \u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148\t\n{\n    long long ans=0;\n    if (depth[x]<depth[y])  swap(x,y);\n    for(int i=20;i>=0;i--)\n\t{\n        if(depth[f[x][i]]>=depth[y])\n\t\t{\n            ans=max(ans,w[x][i]);\n\t\t\tx=f[x][i];\n        }\n    }\n    if (x==y)\treturn ans;\n    for(int i=20;i>=0;i--)\n\t{\n       if(f[x][i]!=f[y][i])\n\t\t{\n            ans=max(ans,max(w[x][i],w[y][i]));\n            x=f[x][i];\n\t\t\t\ty=f[y][i];\n        }\n    }\n    return max(ans,max(w[x][0],w[y][0]));\n} \nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n\t {\n        cin>>t[i].u>>t[i].v>>t[i].dis;\n\t\t\tt[i].id=i;\t\t//\u5c06\u5404\u81eaID\u8bb0\u5f55\n    }\n    kru();\n    dfs(1);\n    long long ans;\n    sort(t+1,t+m+1,cmp2);\t\t//\u8fd8\u539f\uff0c\u5426\u5219\u987a\u5e8f\u4e0d\u5bf9\n    for (int i=1;i<=m;i++)\n\t{\n        ans=alltreelong+t[i].dis-lca(t[i].u,t[i].v);\n\t\tprintf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```\n#### \u7801\u98ce\u8fd8\u662f\u6bd4\u8f83\u5927\u4f17\u5316\u7684\uff0c\u91cd\u5728\u7406\u89e3\uff01",
        "postTime": 1595907475,
        "uid": 105759,
        "name": "IL\u6770\u4f63",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    },
    {
        "content": "\u6c42\u51fa\u5fc5\u7136\u5305\u542b\u7b2c $i$ \u6761\u8fb9\u7684 $\\text{MST}$\uff0c\u53ef\u4ee5\u60f3\u5230\u662f\u5148\u6c42\u51fa\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811 $T$\uff0c\u518d\u5728 $T$ \u4e0a\u52a0\u4e0a\u7b2c $i$ \u6761\u8fb9\uff0c\u5e76\u5220\u53bb\u4e00\u6761\u8fb9\u4ee4\u5f97\u5230\u7684\u751f\u6210\u6811\u6743\u503c\u6700\u5c0f\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u786e\u5b9a\u7684 $i$\uff0c\u7b2c $i$ \u6761\u8fb9\u7684\u6743\u503c\u662f\u4e00\u4e2a\u5b9a\u503c\uff0c\u81ea\u7136\u5220\u53bb\u7684\u8fb9\u6743\u6700\u5927\uff0c\u624d\u80fd\u53d6\u5230\u6700\u5c0f\u6743\u503c\u548c\u3002\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u52a0\u4e0a\u7b2c $i$ \u6761\u8fb9 $(x,y)$\uff0c\u8bb0\u8fd9\u4e2a\u56fe\u4e3a $G'$\uff0c\u5fc5\u7136\u6784\u6210\u4e00\u4e2a\u73af $x\\to y\\to \\text{lca}(x,y)$\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u84dd\u8272\u7684\u865a\u7ebf\u8fb9\u4e3a\u52a0\u5165\u7684\u7b2c $i$ \u6761\u8fb9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/8z4g8c1f.png)\n\n\u4e3a\u4e86\u4f7f\u5220\u53bb\u4e00\u6761\u8fb9\u540e $G'$ \u53d8\u4e3a\u6811\uff0c\u6211\u4eec\u53ea\u80fd\u65ad\u5f00\u73af\u4e0a\u7684\u8fb9\uff0c\u4e5f\u5c31\u662f\u53ea\u80fd\u5220\u9664 $x\\to y$ \u8def\u5f84\u4e0a\u6700\u5927\u7684\u8fb9\u3002\u6c42 $x\\to y$ \u8def\u5f84\u4e0a\u6700\u5927\u7684\u8fb9\u53ef\u4ee5\u4f7f\u7528\u500d\u589e $/$ \u6811\u5256+$\\text{ST}$ \u8868\u8f7b\u677e\u5b9e\u73b0\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m+n \\log n)$\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\ntypedef long long ll;\nint cnt=0;\nstruct edge {int x,y,w,id;} e[200005];\nint fa[200005];\nint h[200005],to[400005],ver[400005],w[400005];\nint f[200005][25],g[200005][25],dep[200005],rev[200005];\ninline int read() {\n\tregister int x=0,f=1;register char s=getchar();\n\twhile(s>'9'||s<'0') {if(s=='-') f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9') {x=x*10+s-'0';s=getchar();}\n\treturn x*f;\n}\ninline void add(int x,int y,int z) {to[++cnt]=y;ver[cnt]=h[x];w[cnt]=z;h[x]=cnt;}\ninline bool cmp(const edge &x,const edge &y) {return x.w<y.w;}\ninline void swap(int &x,int &y) {int tmp=y;y=x;x=tmp;}\ninline int max(const int &x,const int &y) {return x>y? x:y;}\ninline int find(int x) {return x==fa[x]? x:fa[x]=find(fa[x]);}\ninline void prework(int x) {\n\tfor(register int i=1;i<=20;++i) f[x][i]=f[f[x][i-1]][i-1],g[x][i]=max(g[x][i-1],g[f[x][i-1]][i-1]);\n\tfor(register int i=h[x];i;i=ver[i]) {int y=to[i]; if(y==f[x][0]) continue; f[y][0]=x; g[y][0]=w[i]; dep[y]=dep[x]+1; prework(y);}\n}\ninline int ask(int x,int y) {\n\tif(dep[x]<dep[y]) swap(x,y);\n\tint res=0;\n\tfor(register int i=20;i>=0;--i) {if(dep[f[x][i]]>=dep[y]) {res=max(res,g[x][i]);x=f[x][i];}} if(x==y) return res;\n\tfor(register int i=20;i>=0;--i) if(f[x][i]!=f[y][i]) {res=max(res,max(g[x][i],g[y][i]));x=f[x][i];y=f[y][i];}\n\treturn max(res,max(g[x][0],g[y][0]));\n}\nint main() {\n\tint n=read(),m=read(); ll sum=0;\n\tfor(register int i=1;i<=n;++i) fa[i]=i;\n\tfor(register int i=1;i<=m;++i) {e[i].x=read();e[i].y=read();e[i].w=read();e[i].id=i;}\n\tstd::sort(e+1,e+1+m,cmp);\n\tfor(register int i=1;i<=m;++i) rev[e[i].id]=i;\n\tfor(register int i=1;i<=m;++i) {\n\t\tint fx=find(e[i].x),fy=find(e[i].y);\n\t\tif(fx!=fy) {sum+=e[i].w; add(e[i].x,e[i].y,e[i].w); add(e[i].y,e[i].x,e[i].w); fa[fx]=fy;}\n\t}\n\tdep[1]=1; prework(1);\n\tfor(register int i=1;i<=m;++i) {printf(\"%lld\\n\",sum-ask(e[rev[i]].x,e[rev[i]].y)+e[rev[i]].w);}\n\treturn 0;\n}\n```",
        "postTime": 1602231891,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    },
    {
        "content": "\u8fd9\u9898\u8981\u6c42\u51fa\u5fc5\u987b\u5305\u542b\u7b2c$i$\u6761\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u5927\u5c0f\uff0c\u53ef\u4ee5\u8003\u8651\u5148\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n- 1\uff1a\u5f53\u524d\u8fb9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a  \n\n\u8fd9\u79cd\u60c5\u51b5\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u7ed3\u679c\u663e\u7136\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u7684\u5927\u5c0f\uff0c\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002  \n\n- 2\uff1a\u5f53\u524d\u8fb9\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a  \n\n\u5047\u8bbe\u8fd9\u6761\u8fb9\u8fde\u63a5$u$\u548c$v$\u4e24\u4e2a\u8282\u70b9\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u8fde\u51fa\u6765\u7684\u56fe\u4ecd\u7136\u662f\u4e00\u68f5\u6811\uff0c\u5c31\u5fc5\u987b\u62c6\u6389\u6700\u5c0f\u751f\u6210\u6811\u4e2d$u,v$\u8def\u5f84\u4e0a\u7684\u4e00\u6761\u8fb9\u3002  \n\u56e0\u4e3a\u6211\u4eec\u8fd8\u8981\u4fdd\u8bc1\u65b0\u7684\u6811\u6743\u503c\u548c\u6700\u5c0f\uff0c\u6240\u4ee5\u628a\u6743\u503c\u6700\u5927\u7684\u8fb9\u62c6\u6389\u5c31\u597d\u3002\n\n\u7531\u4e8e\u8fd9\u9898\u6ca1\u6709\u4fee\u6539\uff0c\u6240\u4ee5\u6c42\u6811\u4e0a\u8def\u5f84\u6700\u5927\u8fb9\u6743\u662f\u53ef\u4ee5$\\Theta(\\log n)$\u505a\u7684\u3002  \n\u8fd9\u91cc\u6211\u6ca1\u6709\u7528\u500d\u589e\uff0c\u5728\u6811\u5256\u7b2c\u4e8c\u904ddfs\u65f6\uff0c\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u5230\u91cd\u94fe\u9876\u7684\u6700\u5927\u6743\u503c\u5373\u53ef\u3002   \n\u8fd9\u4e2a\u53ef\u4ee5\u9012\u63a8\u5f97\u5230\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\u7ebf\u6027\u7684\u3002   \n\u52a0\u4e86\u8fd9\u4e2a\u5c0f\u4f18\u5316\uff0c\u8dd1\u7684\u8fd8\u7b97\u6bd4\u8f83\u5feb\uff0c$8968\\text{ms}$  \n\n\u8fd9\u9898\u4e5f\u6709\u5751\u70b9\uff0c\u505a\u8fb9\u6743\u6811\u5256\u65f6\uff0c\u8981\u6ce8\u610f\u8fb9\u6743\u8f6c\u70b9\u6743\u7b49\u7ec6\u8282\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u3002  \n\u4ee3\u7801\u5199\u7684\u6bd4\u8f83\u957f\uff0c$194$\u884c\uff1a  \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<queue>\n#define N 200003\n#define ll long long\n#define inf 0x3f3f3f3f\n#define mid ((l+r)>>1)\n#define ls (u<<1)\n#define rs (u<<1|1)\nusing namespace std;\n\nstruct edge{\n\tint u,v,w,id;\n\tedge(int u=0,int v=0,int w=0,int id=0):u(u),v(v),w(w),id(id){}\n\tbool operator < (const edge& a) const{\n\t\treturn w < a.w;\n\t}\n};\n\nint un[N],tpmax[N],top[N],son[N],fa[N],bd[N];\nint size[N],dep[N],id[N],a[N],mx[N<<2];\nedge e[N],selc[N],nsel[N];\nint n,m,lena,lenb,cid;\nll sum;\nll ans[N];\nvector<edge> adj[N];\n\ninline void read(int &x);\nvoid print(ll x);\ninline int max(int x,int y);\nvoid kruskal();\nint find(int x);\nvoid dfs1(int u,int f);\nvoid dfs2(int u,int f);\nvoid build(int u,int l,int r);\ninline void push_up(int u);\nint inline query(int l,int r);\nint qwq(int nl,int nr,int l,int r,int u);\ninline int queryPath(int u,int v);\n\nint main(){\n\tint u,v,w,t;\n\tread(n),read(m);\n\tfor(int i=1;i<=n;++i) un[i] = i;\n\tfor(int i=1;i<=m;++i){\n\t\tread(u),read(v),read(w);\n\t\te[i] = edge(u,v,w,i);\n\t}\n\tkruskal();\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=lena;++i)\n\t\tans[selc[i].id] = sum; //kruskal\u7684\u6392\u5e8f\u6253\u4e71\u4e86\u8fb9\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u8981\u7528\u4e00\u4e2a\u7b54\u6848\u6570\u7ec4\u6765\u8bb0\u5f55\n\tfor(int i=1;i<=lenb;++i){\n\t\tu = nsel[i].u,v = nsel[i].v;\n\t\tw = nsel[i].w;\n\t\tt = queryPath(u,v);\n\t\tans[nsel[i].id] = sum+w-t;\n\t}\n\tfor(int i=1;i<=m;++i){\n\t\tprint(ans[i]);\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n\nint qwq(int nl,int nr,int l,int r,int u){\n    int res = -inf;\n    if(nl<=l&&r<=nr) return mx[u];\n    if(nl<=mid) res = max(res,qwq(nl,nr,l,mid,ls));\n    if(nr>mid) res = max(res,qwq(nl,nr,mid+1,r,rs));\n    push_up(u);\n    return res;\n}\n\ninline int query(int l,int r){\n\treturn qwq(l,r,1,n,1);\n}\n\ninline void push_up(int u){\n\tmx[u] = max(mx[ls],mx[rs]);\n}\n\nvoid build(int u,int l,int r){\n\tif(l==r){\n\t\tmx[u] = bd[l];\n\t\treturn;\n\t}\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\tpush_up(u);\n}\n\ninline int queryPath(int u,int v){\n\tint res = -inf;\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tres = max(res,tpmax[u]);\n\t\tu = fa[top[u]];\n\t}\n\tif(dep[u]>dep[v]) swap(u,v);\n\tres = max(res,query(id[u]+1,id[v])); //\u4e3a\u4e86\u907f\u5f00\u4e24\u70b9\u7684lca\uff0c\u8fd9\u91cc\u67e5\u8be2\u8981+1\n\treturn res;\n}\n\nvoid dfs1(int u,int f){\n\tfa[u] = f;\n\tdep[u] = dep[f]+1;\n\tsize[u] = 1;\n\tint t = -1,v,l = adj[u].size();\n\tfor(int i=0;i<l;++i){\n\t\tv = adj[u][i].v;\n\t\tif(v==f){\n\t\t\ta[u] = adj[u][i].w; //\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u4e3a\u5230\u5176\u7236\u4eb2\u8fb9\u7684\u8fb9\u6743\n\t\t\tcontinue;\n\t\t}\n\t\tdfs1(v,u);\n\t\tsize[u] += size[v];\n\t\tif(size[v]>t){\n\t\t\tt = size[v];\n\t\t\tson[u] = v;\n\t\t}\n\t}\n}\n\nvoid dfs2(int u,int f){\n\tid[u] = ++cid;\n\tbd[cid] = a[u];\n\ttop[u] = f;\n\tif(u==f) tpmax[u] = a[u];\n\telse tpmax[u] = max(a[u],tpmax[fa[u]]); //\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5230\u5176\u91cd\u94fe\u9876\u7aef\u7684\u6700\u5927\u6743\u503c\n\tif(son[u]==0) return;\n\tdfs2(son[u],f);\n\tint v,l = adj[u].size();\n\tfor(int i=0;i<l;++i){\n\t\tv = adj[u][i].v;\n\t\tif(v==fa[u]||v==son[u]) continue;\n\t\tdfs2(v,v);\n\t}\n}\n\nvoid kruskal(){\n\tint u,v,w,j,cnt = 0;\n\tsort(e+1,e+1+m);\n\tfor(int i=1;i<=m;++i){\n\t\tif(cnt==n-1){\n\t\t\tj = i;\n\t\t\tbreak;\n\t\t}\n\t\tu = e[i].u,v = e[i].v;\n\t\tw = e[i].w;\n\t\tif(find(u)==find(v)){\n\t\t\tnsel[++lenb] = e[i];\n\t\t\tcontinue;\n\t\t}\n\t\tsum += w;\n\t\tun[find(u)] = find(v);\n\t\t++cnt;\n\t\tadj[u].push_back(edge(u,v,w,e[i].id));\n\t\tadj[v].push_back(edge(v,u,w,e[i].id));\n\t\tselc[++lena] = e[i];\n\t}\n\tfor(int i=j;i<=m;++i) nsel[++lenb] = e[i];\n}\n\nint find(int x){\n\tif(x==un[x]) return x;\n\tun[x] = find(un[x]);\n\treturn un[x];\n}\n\ninline void read(int &x){\n    x = 0;\n    char c = getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0'&&c<='9'){\n        x = (x<<3)+(x<<1)+(c^48);\n        c = getchar();\n    }\n}\n\nvoid print(ll x){\n    if(x>9) print(x/10);\n    putchar(x%10+'0');\n}\n\ninline int max(int x,int y){\n\treturn x>y?x:y;\n}\n```",
        "postTime": 1548503800,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u8fb9\u6743\uff0c\u6c42\u51fa\u5305\u542b\u7b2ci\u6761\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\n\n# \u601d\u8def\n\n\u8fd9\u9053\u9898\u8fd8\u662f\u6bd4\u8f83\u5999\u7684\uff0c\u9996\u5148\u60f3\u5230\u6bcf\u6b21\u8dd1$m$\u904d\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5f3a\u5236\u9009\u7b2c$i$\u6761\u8fb9\uff0c\u4f46\u6570\u636e\u8303\u56f4\u662f$n,m\\leq 2 \\times 10^5$\u7684\uff0c\u7edd\u903c\u4f1a\u7206(~~\u4e0d\u7136\u8fd9\u9053\u9898\u4e5f\u4e0d\u4f1a\u662fCF\u7684E\u9898~~)\u3002\n\n\u6709\u4e00\u4e2a\u5de7\u5999\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\uff0c\u67e5\u8be2**\u53bb\u6389\u4e00\u6761\u6743\u503c\u6700\u5927\u7684\u8fb9**\uff0c\u7136\u540e**\u628a\u8fd9\u6761\u8fb9\u6362\u6210\u5f53\u524d\u67e5\u8be2\u7684\u8fb9**\u3002\u8fd9\u6837\u5c31\u8dd1\u7684\u5feb\u591a\u4e86\u3002\n\n\u5148\u8bc1\u660e\u4e00\u6ce2\u3002\u8bbe\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u6709$n$\u4e2a\u70b9\uff0c$n-1$\u6761\u8fb9\uff0c\u90a3\u4e48\u8fde\u63a5\u70b9$u$\u548c\u70b9$v$\uff0c\u5b83\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u56fe\uff0c**\u5e76\u4e14\u51fa\u73b0\u4e86\u73af**\uff0c\u90a3\u4e48**\u4efb\u610f\u5220\u53bb\u70b9$u$\u548c\u70b9$v$\u73af\u4e0a\u7684\u4e00\u6761\u8fb9**\uff0c\u8fd9\u4e2a\u73af\u5c31\u6d88\u5931\u4e86\uff0c\u5e76\u4e14**\u5b83\u53c8\u53d8\u6210\u4e86\u4e00\u68f5\u6811**\uff0c(\u8fd8\u662f$n$\u4e2a\u70b9\uff0c$n-1$\u6761\u8fb9\uff0c\u4e14\u4efb\u610f\u4e24\u70b9\u53ef\u4e92\u8fbe\uff0c\u6ca1\u6709\u73af\uff0c\u4e0d\u4fe1\u7684\u7ae5\u978b\u53ef\u4ee5\u81ea\u5df1\u753b\u4e00\u4e0b)\n\n\u7136\u540e\u5c31\u51fa\u73b0\u4e86\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\u2460\uff1a\u7b2c$i$\u6761\u8fb9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002\n\n\u2461\uff1a\u7b2c$i$\u6761\u8fb9\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u5c31\u662f\u4e0a\u9762\u8bf4\u7684\u90a3\u4e2a\u65b9\u6cd5\uff0c**\u52a0\u4e0a\u8fd9\u6761\u8fb9\u7684\u6743\u503c\uff0c\u540c\u65f6\u5220\u53bb\u8fd9\u6761\u8fb9\u7684\u7aef\u70b9$u$,$v$\u4e4b\u95f4\u6743\u503c\u6700\u5927\u7684\u90a3\u6761\u8fb9\uff08\u5f53\u7136\u662f\u5728\u6700\u5c0f\u751f\u6210\u6811\u91cc\u7684\uff09**\uff0c\u8fd9\u6837\u5f97\u51fa\u7684\u6811**\u4e00\u5b9a\u662f\u5305\u542b\u8fd9\u6761\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811**\uff08\u53ef\u80fd\u4f1a\u6709\u70b9\u7ed5\uff0c\u5efa\u8bae\u753b\u56fe\u7406\u89e3\u4e00\u4e0b\uff09\n\n~~(\u5f53\u7136\u4e5f\u53ef\u4ee5\u50cf\u6211\u4e00\u6837\u61d2\u4e00\u70b9\u76f4\u63a5\u6df7\u6210\u4e00\u79cd\u60c5\u51b5\u8003\u8651\uff0c\u8fd9\u6837\u4e5f\u662f\u6b63\u786e\u7684)~~\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u76f4\u63a5\u8f93\u51fa\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u3002\u7b2c\u4e8c\u79cd\u60c5\u51b5\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\uff0c\u8981\u6c42\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u7528\u5404\u79cd\u7384\u5b66\u6570\u636e\u7ed3\u6784\u4e86\u3002\u672c\u849f\u84bb\u7528\u7684\u662f\u500d\u589elca ~~(\u56e0\u4e3a\u592a\u83dc\u4e86)~~ \u3002\n\n~~\uff08\u7801\u98ce\u6709\u4e9b\u5947\u602a\uff0c\u4e0d\u559c\u8bef\u55b7\u3002\uff09~~\n\n\n### \u4e0a\u4ee3\u7801\n------------\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std ;\ntypedef long long ll ;\nconst int maxn=200000+20 ;\nint p[maxn][30] ;\nll ans[maxn][30] ; \nint N,M ;\nint head[maxn],tot,deep[maxn];\nint fa[maxn] ;\nll dis ; //\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c \nstruct node{\n\tint v,next ;\n\tll w ;\n}e[maxn<<1]; \nstruct edge{\n\tint v;\n\tll w ;\n\tint u ;\n}krus[maxn<<1],krus2[maxn<<1];\ninline bool cmp(edge a,edge b){\n\n\treturn a.w<b.w ;\n} \ninline void addedge(int u,int v,ll w){\n\te[++tot].v=v ;\n\te[tot].w=w ;\n\te[tot].next=head[u] ;\n\thead[u]=tot ;\n}\ninline int getf(int a){\n\treturn fa[a]==a?a:fa[a]=getf(fa[a]) ;\n}\ninline void kruskal(){\n\tfor(int i=1;i<=N;i++) fa[i]=i ;\n\tsort(krus+1,krus+M+1,cmp) ;\n\tint cnt=0 ;\n\tfor(int i=1;i<=M;i++){\n\t\tint u=krus[i].u,v=krus[i].v ;\n\t\tif(getf(u)==getf(v)) continue ;\n\t\t\tfa[getf(v)]=getf(u) ;\n\t\t\tcnt++ ;\n\t\t\taddedge(u,v,krus[i].w) ;\n\t\t\taddedge(v,u,krus[i].w) ;\n\t\t\tdis+=krus[i].w ;\n\t\tif(cnt==N-1) break ; \n\t} //\u6b63\u5e38\u7684kruskal\u6700\u5c0f\u751f\u6210\u6811 \n\treturn ;\n}\ninline void dfs(int u,int fa,ll val){\n\tdeep[u]=deep[fa]+1 ;\n\tp[u][0]=fa ;\n\tans[u][0]=val ;\n\tfor(int j=1;j<=20;j++){\n\n\t\tp[u][j]=p[p[u][j-1]][j-1] ;\n\t\tans[u][j]=max(ans[u][j-1],ans[p[u][j-1]][j-1]) ;\n\t}\n\tfor(int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].v ;\n\t\tif(v==fa) continue ;\n\t\tdfs(v,u,e[i].w) ;\n\t} \n}\ninline ll lca(int a,int b){\n\n\tll tryans=0 ;\n\tif(deep[a]>deep[b]) swap(a,b) ;\n\tfor(int j=20;j>=0;j--){\n\n\t\tif(deep[a]<=deep[p[b][j]]){\n\n\t\t\ttryans=max(tryans,ans[b][j]) ;\n\t\t\tb=p[b][j] ;\n\t\t}\n\t}\n\tif(a==b) return tryans  ;\n\tfor(int j=20;j>=0;j--){\n\n\t\tif(p[a][j]==p[b][j]) continue ;\n\t\t\ttryans=max(ans[b][j],max(tryans,ans[a][j])) ;\n\t\t\tb=p[b][j] ;\n\t\t\ta=p[a][j] ;\n\t}\n\t// \u500d\u589e\u6c42\u51fa a,b \u4e4b\u95f4 \u8fb9\u6743 \u7684\u6700\u5927\u503c \n\treturn max(ans[b][0],max(tryans,ans[a][0])) ;\n}\nint main(){\n\tscanf(\"%d%d\",&N,&M) ;\n\tfor(int i=1;i<=M;i++){\n\t\tscanf(\"%d%d%lld\",&krus2[i].u,&krus2[i].v,&krus2[i].w) ;\n\t\tkrus[i].u=krus2[i].u;\n\t\tkrus[i].v=krus2[i].v;\n\t\tkrus[i].w=krus2[i].w;\n\t}\n\tkruskal() ;\n\tdfs(1,0,0) ;//\u500d\u589e \u9884\u5904\u7406 \n\tll nowans ;\n\tfor(int i=1;i<=M;i++){\n\t\tnowans=dis+krus2[i].w-lca(krus2[i].u,krus2[i].v) ;// \u66ff\u6362\u64cd\u4f5c\uff0c\u672c\u849f\u84bb\u56e0\u4e3a\u592a\u61d2\u4e86\u5c31\u628a\u4e24\u79cd\u60c5\u51b5\u6df7\u5728\u4e00\u8d77\uff0c\u8bc1\u660e\u7565 \n\t\tprintf(\"%lld\\n\",nowans) ; \n\t}\n\treturn 0 ;\n}\n\n```\n\n",
        "postTime": 1564320043,
        "uid": 59545,
        "name": "\u8dc3\u52a8\u306e\u5149\u306f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    },
    {
        "content": "~~\u597d\u50cf\u8fd8\u6ca1\u6709\u6811\u5256\u7684\u9898\u89e3\uff1f~~\n\n### \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u5b9a\u4e00\u5f20$n$\u4e2a\u70b9\uff0c$m$\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u8981\u6c42\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u6240\u5728\u751f\u6210\u6811\u7684\u6700\u5c0f\u6743\u503c\u3002\n\n----\n### \u57fa\u672c\u601d\u8def\n\u9996\u5148\u5bf9\u539f\u56fe\u8dd1\u4e00\u904d$Kruskal$\uff0c\u5728$MST$\u4e0a\u518d\u8dd1\u6811\u5256\uff0c\u7ef4\u62a4\u4e00\u4e0b\u6700\u5927\u8fb9\u6743  \n\uff08\u6211\u7528\u7684\u7ebf\u6bb5\u6811\uff0c\u4e0d\u8fc7\u597d\u50cf\u6811\u72b6\u6570\u7ec4\u4e5f\u80fd\u505a\uff1f[\u6233\u8fd9\u91cc](https://www.luogu.org/blog/Chanis/super-BIT)\uff09  \n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5224\u65ad\u4e00\u4e0b\uff1a  \n\u82e5\u8be5\u8fb9\u4e3a$MST$\u4e0a\u7684\u8fb9\uff0c\u5219\u76f4\u63a5\u8f93\u51fa$MST$\u7684\u6743\uff0c\u5426\u5219\u8f93\u51fa$MST+dis(e)-qmax(u,v)$  \n\uff08$dis(e)$\u4e3a\u5f53\u524d\u8fd9\u6761\u8fb9\u7684\u6743\uff0c$u,v$\u4e3a\u8be5\u8fb9\u4e24\u7aef\u7684\u70b9\uff09  \n\n### \u7ec6\u8282\u6ce8\u610f\u4e8b\u9879\n1. \u8bb0\u5f97\u5f00$long\\ long$\n1. \u8fd9\u9898\u8fd8\u662f\u8981**\u8fb9\u6743\u8f6c\u70b9\u6743**\uff0c\u8bb0\u5f97\u522b\u628a$LCA$\u7b97\u8fdb\u6765~~\u5e94\u8be5\u6ca1\u4eba\u548c\u6211\u4e00\u6837\u5427~~\n\n----\n### \u53c2\u8003\u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define rg register\n#define int long long\nconst int MAXN = 200010;\nusing namespace std;\ninline int max(int a, int b) { return a > b ? a : b; }\ninline void swap(int& a, int& b) { int t = a; a = b; b = t; }\ninline int read() {\n    int s = 0; bool f = false; char c = getchar();\n    while (c < '0' || c > '9') f |= (c =='-'), c = getchar();\n    while (c >= '0' && c <= '9') s = (s << 3) + (s << 1) + (c ^ 48), c = getchar();\n    return f ? -s : s;\n}\nint n, m; struct edge{ int u, v, d, p; }g[MAXN];\ninline bool cmp1(const edge& x, const edge& y) { return x.d < y.d; }\ninline bool cmp2(const edge& x, const edge& y) { return x.p < y.p; }\nint tot, head[MAXN], nxt[MAXN << 1], ver[MAXN << 1], w[MAXN << 1];\ninline void Add_edge(int u, int v, int d)\n{ nxt[++tot] = head[u], head[u] = tot, ver[tot] = v, w[tot] = d; }\nint fa[MAXN], mst[MAXN];\ninline int findd(int k) { return fa[k] == k ? k : fa[k] = findd(fa[k]); }\ninline void unionn(int u, int v) { fa[findd(u)] = findd(v); }\ninline int Kruskal() {\n    int MST = 0;\n    for (rg int i = 1; i <= n; ++i) fa[i] = i;\n    sort(g + 1, g + 1 + m, cmp1);\n    for (rg int u, v, d, i = 1; i <= m; ++i) {\n        u = g[i].u, v = g[i].v, d = g[i].d;\n        if (findd(u) == findd(v)) continue;\n        MST += d, mst[g[i].p] = 1, unionn(u, v), Add_edge(u, v, d), Add_edge(v, u, d);\n    }\n    sort(g + 1, g + 1 + m, cmp2);\n    return MST;\n}\nint val[MAXN], Max[MAXN << 2];\nint top[MAXN], seg[MAXN], rev[MAXN];\nint dep[MAXN], son[MAXN], siz[MAXN], father[MAXN];\ninline int lc(int rt) { return rt << 1; }\ninline int rc(int rt) { return rt << 1 | 1; }\ninline void pushup(int rt) { Max[rt] = max(Max[lc(rt)], Max[rc(rt)]); }\ninline void build(int rt, int l, int r) {\n    if (l == r) { Max[rt] = val[rev[l]]; return; }\n    int mid = (l + r) >> 1;\n    build(lc(rt), l, mid), build(rc(rt), mid + 1, r), pushup(rt);\n}\ninline int query(int rt, int l, int r, int x, int y) {\n    if (x <= l && r <= y) return Max[rt];\n    int mid = (l + r) >> 1, res = 0;\n    if (x <= mid) res = max(res, query(lc(rt), l, mid, x, y));\n    if (y > mid) res = max(res, query(rc(rt), mid + 1, r, x, y));\n    return res;\n}\ninline void dfs1(int u, int fa) {\n    siz[u] = 1, father[u] = fa, dep[u] = dep[fa] + 1;\n    for (rg int v, i = head[u]; i; i = nxt[i])\n        if (!dep[v = ver[i]]) {\n            dfs1(v, u), siz[u] += siz[v], val[v] = w[i];\n            if (siz[v] > siz[son[u]]) son[u] = v;\n        }\n}\ninline void dfs2(int u, int topf) {\n    top[rev[seg[u] = ++seg[0]] = u] = topf;\n    if (!son[u]) return; dfs2(son[u], topf);\n    for (rg int v, i = head[u]; i; i = nxt[i])\n        if (!top[v = ver[i]]) dfs2(v, v);\n}\ninline int qmax(int x, int y) {\n    int res = 0; \n    while (top[x] ^ top[y]) {\n        if (dep[top[x]] < dep[top[y]]) swap(x, y);\n        res = max(res, query(1, 1, n, seg[top[x]], seg[x]));\n        x = father[top[x]];\n    }\n    if (dep[x] > dep[y]) swap(x, y);\n    return max(res, query(1, 1, n, seg[x] + 1, seg[y]));\n}\nsigned main() {\n    n = read(), m = read();\n    for (rg int u, v, d, i = 1; i <= m; ++i)\n        u = read(), v = read(), d = read(), g[i] = (edge) { u, v, d, i };\n    int MST = Kruskal();\n    dfs1(1, 0), dfs2(1, 1), build(1, 1, n);\n    for (rg int i = 1; i <= m; ++i) {\n        if (mst[i]) printf(\"%lld\\n\", MST);\n        else printf(\"%lld\\n\", MST + g[i].d - qmax(g[i].u, g[i].v));\n    }\n    return 0;\n}\n\n```\n**\u5b8c\u7ed3\u6492\u82b1**$qwq$",
        "postTime": 1562775573,
        "uid": 87839,
        "name": "Sangber",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    },
    {
        "content": "## \u9898\u76ee\n\u7ed9\u4f60n\u4e2a\u70b9\uff0cm\u6761\u8fb9\uff0c\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u8981\u6c42\u5fc5\u987b\u5305\u62ec\u7b2ci(1<=i<=m)\u6761\u8fb9\uff0c\u90a3\u4e48\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u603b\u548c\u6700\u5c0f\u662f\u591a\u5c11\u3002\n\n\u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884cn\uff0cm\n\n\u540e\u9762m\u884c\u6bcf\u884cu,v,w\u4ee3\u8868\u4e00\u6761\u8fb9\n\n\u8f93\u51fa\u683c\u5f0f\n\nm\u884c\uff0c\u7b2ci\u884c\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u5305\u62ec\u7b2ci\u6761\u8fb9\u65f6\u7684\u6700\u5c0f\u6743\u503c\u548c\n\n[CF609E](https://www.luogu.org/problemnew/show/CF609E)\n\n## \u9898\u89e3\n- \u5148\u5bf9\u539f\u56fe\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\n- \u5bf9\u4e8e\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u8fb9\u76f4\u63a5\u8f93\u51fa\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\n- \u5c06\u5176\u4f59\u8fb9\u52a0\u8fdb\u53bb\u540e\uff08\u5176\u5b9e\u4e0d\u7528\u771f\u7684\u52a0\u8fdb\u53bb\uff09\uff0c\u4f1a\u6784\u6210\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u53ea\u9700\u627e\u5230\u73af\u4e0a\u9664\u521a\u52a0\u8fdb\u53bb\u7684\u90a3\u6761\u8fb9\u6743\u503c\u6700\u5927\u7684\u8fb9\u5373\u53ef\n- \u53ef\u4ee5\u6811\u94fe\u5256\u5206\u6765\u627e\n\n## code\n```cpp\n#include <bits/stdc++.h>\nusing namespace std; \nconst int maxn = 200000 + 1000; \nconst int inf = 0x3f3f3f3f; \ntypedef long long LL; \n\ntemplate <class T> \ninline void read(T &s) {\n\ts = 0; \n\tT w = 1, ch = getchar(); \n\twhile (!isdigit(ch)) { if (ch == '-') w = -1; ch = getchar(); }\n\twhile (isdigit(ch)) { s = (s << 1) + (s << 3) + (ch ^ 48); ch = getchar(); }\n\ts *= w; \n}\n\nLL SumTree; \nLL tree[maxn * 4], ans[maxn], val[maxn][5]; \nint n, m, cnt, tot, size_val; \nint f[maxn], dep[maxn], siz[maxn], fat[maxn]; \nint idx[maxn], top[maxn], son[maxn], lin[maxn]; \nstruct MST { \n\tint from, to, id; \n\tLL dis; \n\tbool operator <(const MST &A) const {\n\t\treturn dis < A.dis; \n\t}\n} t[maxn * 4]; \nstruct node{ int next, to; } edge[maxn << 1]; \n\ninline int get(int k) { \n\treturn f[k] == k ? f[k] : f[k] = get(f[k]);\n}\n\ninline void add(int from, int to) {\n\tedge[++tot].to = to; \n\tedge[tot].next = lin[from]; \n\tlin[from] = tot; \n}\n\nvoid Kruskal() {\n\tsort(t + 1, t + m + 1); \n\tfor (int i = 1; i <= n; ++i) f[i] = i; \n\tfor (int i = 1; i <= m; ++i) {\n\t\tint u = get(t[i].from), v = get(t[i].to); \n\t\tint dis = t[i].dis, id = t[i].id; \n\t\tif (f[u] != v) {\n\t\t\tf[u] = v; \n\t\t\tSumTree += dis; \n\t\t\tadd(t[i].from, t[i].to); \n\t\t\tadd(t[i].to, t[i].from); \n\t\t\t++size_val; \n\t\t\tval[size_val][0] = t[i].from; \n\t\t\tval[size_val][1] = t[i].to; \n\t\t\tval[size_val][2] = t[i].dis; \n\t\t}\n\t}\n}\n\nvoid dfs1(int u, int fa, int depth) {\n\tsiz[u] = 1; \n\tfat[u] = fa; \n\tdep[u] = depth; \n\tint maxson = -1; \n\tfor (int i = lin[u]; i; i = edge[i].next) {\n\t\tint v = edge[i].to; \n\t\tif (v == fa) continue; \n\t\tdfs1(v, u, depth + 1); \n\t\tsiz[u] += siz[v]; \n\t\tif (siz[v] > maxson) {\n\t\t\tmaxson = siz[v]; \n\t\t\tson[u] = v; \n\t\t}\n\t}\n}\n\nvoid dfs2(int u, int tp) {\n\tidx[u] = ++cnt; \n\ttop[u] = tp; \n\tif (!son[u]) return ; \n\tdfs2(son[u], tp); \n\tfor (int i = lin[u]; i; i = edge[i].next) {\n\t\tint v = edge[i].to; \n\t\tif (!idx[v]) \n\t\t\tdfs2(v, v); \n\t}\n}\n\nvoid update(int p, int l, int r, int pos, int v) {\n\tif (l == r) {\n\t\ttree[p] = v; \n\t\treturn ; \n\t}\n\tint mid = (l + r) >> 1; \n\tif (pos <= mid) update(p<<1, l, mid, pos, v); \n\telse update(p<<1|1, mid + 1, r, pos, v); \n\ttree[p] = max(tree[p<<1], tree[p<<1|1]); \n}\n\nLL queryMax(int p, int l, int r, int x, int y) {\n\tif (x > r || y < l) return 0; \n\tif (x <= l && y >= r) return tree[p]; \n\tint mid = (l + r) >> 1; \n\tLL sum = 0ll; \n\tsum = max(sum, queryMax(p<<1, l, mid, x, y)); \n\tsum = max(sum, queryMax(p<<1|1, mid + 1, r, x, y)); \n\treturn sum; \n}\n\nLL TreeMax(int x, int y) {\n\tLL sum = 0ll; \n\twhile (top[x] != top[y]) {\n\t\tif (dep[top[x]] < dep[top[y]]) swap(x, y); \n\t\tsum = max(sum, queryMax(1, 1, cnt, idx[top[x]], idx[x])); \n\t\tx = fat[top[x]]; \n\t}\n\tif (x == y) return sum; \n\tif (dep[x] > dep[y]) swap(x, y); \n\tsum = max(sum, queryMax(1, 1, cnt, idx[son[x]], idx[y])); \n\treturn sum; \n}\n\nint main() {\n\tread(n); read(m); \n\tfor (int i = 1; i <= m; ++i) {\n\t\tread(t[i].from), read(t[i].to), read(t[i].dis); \n\t\tt[i].id = i; \n\t}\n\n\tKruskal(); \n\n\tint rt = (n / 2) + 1; \n\tdfs1(rt, 0, 1); \n\tdfs2(rt, rt); \n\n\tfor (int i = 1; i <= size_val; ++i) {\n\t\tif (dep[val[i][0]] > dep[val[i][1]]) swap(val[i][0], val[i][1]); \n\t\tupdate(1, 1, cnt, idx[val[i][1]], val[i][2]); \n\t}\n\n\tfor (int i = 1; i <= m; ++i) {\n\t\tans[t[i].id] = SumTree + t[i].dis - TreeMax(t[i].from, t[i].to);  \n\t}\n\tfor (int i = 1; i <= m; ++i) \n\t\tprintf(\"%lld\\n\", ans[i]); \n\treturn 0; \n}\n\n```\n",
        "postTime": 1563368717,
        "uid": 145352,
        "name": "MILLOPE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    },
    {
        "content": "\u653e\u4e00\u7bc7\u500d\u589e\u7684\u9898\u89e3\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u8fd9\u6837\u4e00\u4e2a\u6027\u8d28\uff1a\u5728MST\u4e0a\u9762\u4efb\u610f\u52a0\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u5f62\u6210\u6070\u597d\u4e00\u4e2a\u73af\u3002\u7136\u540e\u4ece\u8fd9\u4e2a\u73af\u4e0a\u9762\u4efb\u610f\u62c6\u4e00\u6761\u8fb9\uff0c\u5c31\u53c8\u4f1a\u5f62\u6210\u4e00\u68f5\u751f\u6210\u6811\u3002\n\n\u90a3\u4e48\u8fd9\u9898\u7684\u505a\u6cd5\u5c31\u5f88\u660e\u663e\u4e86\uff1a\u5982\u679c\u67d0\u6761\u8fb9\u5c31\u5728MST\u4e0a\u9762\uff0c\u90a3\u4e48\u6ca1\u4ec0\u4e48\u53ef\u8bf4\u7684\uff0c\u5c31\u662fMST\u6743\u503c\uff1b\u5426\u5219\uff0c\u6211\u4eec\u4ece\u8fd9\u6761\u73af\u4e0a\u9762\u62c6\u6389\u9664\u8be5\u8fb9\u4ee5\u5916\u6700\u5927\u7684\u4e00\u6761\u8fb9\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86\u3002\n\n\u5728\u6c42MST\u52a0\u5165\u8fb9$(u,v)$\u540e\u5f62\u6210\u7684\u73af\u4e0a\u7684\u6700\u5927\u503c\u65f6\uff0c\u6211\u4eec\u5b9e\u9645\u8981\u6c42\u7684\u662f$u$\u5230$v$\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u3002\u663e\u7136\uff0c\u8fd9\u91cc\u53ef\u4ee5\u7528\u500d\u589e\u4f18\u5316\u3002\n\n\u603b\u590d\u6742\u5ea6$\\Theta(N \\log N)$\u3002\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n//\u90bb\u63a5\u8868\u5b58\u8fb9\nstruct Edge {\n    long long to, nxt, len;\n    Edge() {\n        nxt = -1;\n    }\n};\n//Kruskal\u5b58\u8fb9\uff0cidx\u5bf9\u5e94\u8f93\u5165\u987a\u5e8f\nstruct Edge2 {\n    long long u, v, w, idx;\n    bool operator < (const Edge2& e) const {\n        return w < e.w;\n    }\n    bool operator > (const Edge2& e) const {\n        return idx < e.idx;\n    }\n};\nEdge e[400005];\nEdge2 e2[200005];\nlong long n, m, hd[200005], pnt, fa[200005][25], dep[200005], rt[200005], mst, mx[200005][25];\nbool book[200005];\n//\u4ee5\u4e0b3\u4e2a\u51fd\u6570\u5747\u4e3a\u5e76\u67e5\u96c6\u64cd\u4f5c\nvoid Init() {\n    for (long long i = 1;i <= n;i++) {\n        rt[i] = i;\n    }\n}\n\nlong long GetRoot(long long v) {\n    if (rt[v] == v) {\n        return v;\n    }\n    rt[v] = GetRoot(rt[v]);\n    return rt[v];\n}\n\nbool Merge(long long x, long long y) {\n    long long u = GetRoot(x), v = GetRoot(y);\n    if (u != v) {\n        rt[v] = u;\n        return 1;\n    }\n    return 0;\n}\n//\u5728\u90bb\u63a5\u8868\u5185\u52a0\u5165\u4e00\u6761\u8fb9\nvoid AddEdge(long long u, long long v, long long w) {\n    e[++pnt].to = v;\n    e[pnt].len = w;\n    e[pnt].nxt = hd[u];\n    hd[u] = pnt;\n}\n\nvoid Read() {\n    scanf(\"%lld%lld\", &n, &m);\n    for (long long i = 1;i <= m;i++) {\n        scanf(\"%lld%lld%lld\", &e2[i].u, &e2[i].v, &e2[i].w);\n        e2[i].idx = i;\n    }\n}\n//\u4ee5\u4e0b\u4e24\u4e2a\u51fd\u6570\u4e3a\u500d\u589e\u9884\u5904\u7406\nvoid Dfs(long long u, long long f) {\n    for (long long i = hd[u];i != -1;i = e[i].nxt) {\n        if (e[i].to != f) {\n            fa[e[i].to][0] = u;\n            mx[e[i].to][0] = e[i].len;//\u500d\u589e\u6c42\u6700\u5927\u503c\n            dep[e[i].to] = dep[u] + 1;\n            Dfs(e[i].to, u);\n        }\n    }\n}\n\nvoid Prefix() {\n    for (long long j = 1;j <= 20;j++) {\n        for (long long i = 1;i <= n;i++) {\n            fa[i][j] = fa[fa[i][j - 1]][j - 1];\n            mx[i][j] = max(mx[i][j - 1], mx[fa[i][j - 1]][j - 1]);\n        }\n    }\n}\n//\u6c42MST\u4ee5\u53caMST\u5185\u6709\u54ea\u4e9b\u8fb9\nvoid Kruskal() {\n    sort(e2 + 1, e2 + m + 1);\n    Init();\n    long long cnt = 0;\n    for (long long i = 1;i <= m;i++) {\n        if (Merge(e2[i].u, e2[i].v)) {\n            cnt++;\n            mst += e2[i].w;\n            AddEdge(e2[i].u, e2[i].v, e2[i].w);\n            AddEdge(e2[i].v, e2[i].u, e2[i].w);\n            book[e2[i].idx] = 1;\n        }\n        if (cnt == n - 1) {\n            break;\n        }\n    }\n    sort(e2 + 1, e2 + m + 1, greater <Edge2> ());\n}\n//\u6c42LCA\nlong long Lca(long long u, long long v) {\n    if (dep[u] < dep[v]) {\n        swap(u, v);\n    }\n    for (long long i = 20;i >= 0;i--) {\n        if (dep[fa[u][i]] >= dep[v]) {\n            u = fa[u][i];\n        }\n    }\n    if (u == v) {\n        return u;\n    }\n    for (long long i = 20;i >= 0;i--) {\n        if (fa[u][i] != fa[v][i]) {\n            u = fa[u][i];\n            v = fa[v][i];\n        }\n    }\n    return fa[u][0];\n}\n//\u6c42\u94fe\u4e0a\u6700\u5927\u503c\nlong long QueryMax(long long u, long long v) {\n    long long ans = 0;\n    for (long long i = 20;i >= 0;i--) {\n        if (dep[fa[u][i]] >= dep[v]) {\n            ans = max(ans, mx[u][i]);\n            u = fa[u][i];\n        }\n    }\n    return ans;\n}\n\nvoid Solve() {\n    for (long long i = 1;i <= m;i++) {\n        if (book[i]) {\n            printf(\"%lld\\n\", mst);\n        } else {\n            long long k = Lca(e2[i].u, e2[i].v);\n            printf(\"%lld\\n\", mst - max(QueryMax(e2[i].u, k), QueryMax(e2[i].v, k)) + e2[i].w);//\u62c6\u6389\u4e00\u6761\u8fb9\u518d\u8fde\u4e0a\u5f53\u524d\u8fb9\n        }\n    }\n}\n\nint main() {\n\tmemset(hd, -1, sizeof(hd));\n    Read();\n    Kruskal();\n    dep[1] = 1;\n    Dfs(1, -1);\n    Prefix();\n    Solve();\n    return 0;\n}\n```",
        "postTime": 1560777029,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    },
    {
        "content": "### solution CF609E\n\n\u9898\u610f\u7b80\u5355\uff0c\u6c42\u56fe\u4e0a\u5305\u542b\u7b2c$i$\u6761\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u9996\u5148\u8dd1\u4e00\u904dKruskal\u6700\u5c0f\u751f\u6210\u6811\uff0c\u540c\u65f6\u8bb0\u5f55\u4e0b\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u3002\n\n\u7136\u540e\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u8fb9\u6743\u6700\u5927\u503c\u3002\n\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u5982\u679c\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u5c31\u76f4\u63a5\u8f93\u51fa\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\u3002\u5982\u679c\u8fb9x---y\u4e0d\u5728\u6811\u4e0a\uff0c\u5220\u6389\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u5728\u94fex->y\u4e0a\u7684\u6700\u5927\u8fb9\u5e76\u52a0\u5165\u5f53\u524d\u8fb9\u5373\u53ef\u3002\n\n### code\n\n```cpp\n#include <bits/stdc++.h>\nconst int M = 2e5 + 5;\nint n, m, tot, uset[M], to[M << 1], nxt[M << 1], h[M], dfn[M], d[M], siz[M], son[M], top[M], f[M], you[M];\nlong long ans, now[M];\nstruct edge { int x, y, id; long long w; } a[M];\nint operator <(edge ax, edge bx) { return ax.w < bx.w; }\nint find(int x) { return uset[x] = uset[x] == x ? x : find(uset[x]); }\n#define debug putchar('*')\nvoid add_edge(int u, int v) {\n    to[++tot] = v, nxt[tot] = h[u], h[u] = tot;\n    to[++tot] = u, nxt[tot] = h[v], h[v] = tot;\n}\nvoid dfs(int x) {\n    siz[x] = 1;\n    for(int i = h[x]; i; i = nxt[i]) {\n        if(d[to[i]]) continue;\n        d[to[i]] = d[x] + 1, f[to[i]] = x;\n        dfs(to[i]);\n        siz[x] += siz[to[i]];\n        if(siz[to[i]] > siz[son[x]]) son[x] = to[i];\n    }\n}\nvoid sfd(int x, int tp) {\n    top[x] = tp, dfn[x] = ++dfn[0];\n    if(son[x]) sfd(son[x], tp);\n    for(int i = h[x]; i; i = nxt[i])\n        if(to[i] != f[x] && to[i] != son[x]) sfd(to[i], to[i]);\n}\ninline int lca(int x, int y) {\n    for(; top[x] ^ top[y]; x = f[top[x]])\n        if(d[top[x]] < d[top[y]]) std::swap(x, y);\n    return d[x] < d[y] ? x : y;\n}\nlong long tr[M << 2];\n#define ls (rt << 1)\n#define rs (rt << 1 | 1)\n#define mid (l + r >> 1)\nlong long qmax(int rt, int l, int r, int sl, int sr) {\n    if(sl <= l && r <= sr) return tr[rt];\n    long long ret = 0;\n    if(sl <= mid) ret = std::max(ret, qmax(ls, l, mid, sl, sr));\n    if(sr > mid) ret = std::max(ret, qmax(rs, mid + 1, r, sl, sr));\n    return ret;\n}\nvoid modify(int rt, int l, int r, int pos, long long k) {\n    if(l > pos || r < pos) return;\n    if(l == r) { tr[rt] = k; return; }\n    modify(ls, l, mid, pos, k), modify(rs, mid + 1, r, pos, k);\n    tr[rt] = std::max(tr[ls], tr[rs]);\n}\nlong long tree_max(int x, int y) {\n    long long ret = 0;\n    for(; top[x] ^ top[y]; x = f[top[x]])\n        ret = std::max(ret, qmax(1, 1, n, dfn[top[x]], dfn[x]));\n    return std::max(ret, qmax(1, 1, n, dfn[y] + 1, dfn[x]));\n}\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 1; i <= m; ++i)\n        scanf(\"%d%d%lld\", &a[i].x, &a[i].y, &a[i].w), a[i].id = i;\n    for(int i = 1; i <= n; ++i) uset[i] = i;\n    std::sort(a + 1, a + m + 1);\n    for(int i = 1, k; i <= m; ++i) {\n        int fx = find(a[i].x), fy = find(a[i].y);\n        if(fx ^ fy) uset[fx] = fy, ++k, add_edge(a[i].x, a[i].y), ans += a[i].w, you[a[i].id] = 1;\n        if(k == n - 1) break;\n    }\n    d[1] = 1, f[1] = 1;\n    dfs(1), sfd(1, 1);\n    for(int i = 1; i <= m; ++i)\n        if(you[a[i].id]) {\n            if(d[a[i].x] > d[a[i].y]) modify(1, 1, n, dfn[a[i].x], a[i].w);\n            else modify(1, 1, n, dfn[a[i].y], a[i].w);\n        }\n    for(int i = 1; i <= m; ++i) {\n        if(you[a[i].id]) now[a[i].id] = ans;\n        else {\n            int acl = lca(a[i].x, a[i].y);\n            now[a[i].id] = ans + a[i].w - std::max(tree_max(a[i].x, acl), tree_max(a[i].y, acl));\n        }\n    }\n    for(int i = 1; i <= m; ++i)\n        printf(\"%lld\\n\", now[i]);\n}\n```",
        "postTime": 1541069440,
        "uid": 52082,
        "name": "Delta_Rain",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    },
    {
        "content": "\u4eba\u751f\u4e2d\u7b2c\u4e00\u6b21\u5728 20 \u79d2\u5185\u60f3\u51fa\u6765 `*2100` \u96be\u5ea6\u7684\u9898\u7684\u6b63\u89e3\uff0c\u7eaa\u5ff5\u4e00\u4e0b\u3002\r\n\r\n\u53e6\uff0c\u9898\u89e3\u533a\u6ca1\u770b\u5230\u5728 Kruskal \u91cd\u6784\u6811\u4e0a\u8fdb\u884c LCA \u7684\u9898\u89e3\uff0c\u56e0\u6b64\u987a\u624b\u5199\u4e86\u6ca1\u574f\u5904\u3002\r\n\r\n## \u601d\u8def\r\n\r\n\u9996\u5148\uff0c\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\u3002\r\n\r\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff1a\r\n\r\n1. \u5f53\u524d\u8fb9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff1a\u76f4\u63a5\u8f93\u51fa\u6700\u5c0f\u751f\u6210\u6811\u5927\u5c0f\u5373\u53ef\u3002\r\n\r\n2. \u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff1a\u8d2a\u5fc3\u7b56\u7565\u4e3a\u627e\u5230\u6240\u6709\u8054\u901a $u$ \u548c $v$ \u7684\u8fb9\uff0c\u53d6\u6700\u5927\u503c\u3002\r\n\r\n\u5bf9\u4e8e 1 \u64cd\u4f5c\u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651\u4e86\uff0c\u53ea\u9700\u8981\u8003\u8651\u5982\u4f55\u5feb\u901f\u6c42\u89e3 2 \u64cd\u4f5c\u3002\u6211\u6b63\u597d\u5728\u505a\u8fd9\u4e2a\u9898\u4e4b\u524d\u5b66\u4e60\u4e86 Kruskal \u91cd\u6784\u6811\u3002Kruskal \u91cd\u6784\u6811\u5728\u6bcf\u4e00\u6b21\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u70b9\u6743\u5c31\u662f\u5f53\u524d\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u3002\u90a3\u4e48\uff0c\u7531\u4e8e\u6211\u4eec Kruskal \u7684\u65f6\u5019\uff0c\u8fb9\u6743\u662f\u4ece\u5c0f\u5230\u5927\u5904\u7406\u7684\uff0c\u56e0\u6b64\u65b0\u5efa\u7684\u8282\u70b9\u8d8a\u5f80\u540e\uff0c\u5176\u6743\u503c\u8d8a\u5927\u3002\r\n\r\n\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u5462\uff1f\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u5185\u6240\u6709\u8fb9\u6743\u7684\u6700\u5927\u503c\u5c31\u662f\u5b83\u81ea\u5df1\u3002\u800c\u4e00\u4e2a\u5b50\u6811\u5185\u4fdd\u8bc1 $x,y$ \u8054\u901a\u7684\u8fb9\uff0c\u4e00\u5b9a\u4f4d\u4e8e $x \\rightarrow \\operatorname{LCA}(x,y)$ \u548c $y \\rightarrow \\operatorname{LCA}(x,y)$ \u8fd9\u4e24\u4e2a\u8def\u5f84\u4e0a\u3002\u800c\u6211\u4eec\u60ca\u5947\u7684\u53d1\u73b0\u4ed6\u4eec\u7684\u6700\u5927\u503c\u6070\u597d\u5c31\u662f $\\operatorname{LCA}(x,y)$ \u7684\u70b9\u6743\u3002\r\n\r\n\u6240\u4ee5\uff0c\u6211\u4eec\u6bcf\u6b21\u500d\u589e\u6c42\u51fa $\\operatorname{LCA}$\uff0c\u7136\u540e\u7528\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u51cf\u53bb\u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u52a0\u4e0a\u5f53\u524d\u8fb9\u7684\u8fb9\u6743\u5373\u53ef\u3002\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(m(\\log m+\\alpha(m))+m \\log n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\uff08Kruskal \u6392\u5e8f + \u5e76\u67e5\u96c6\u7684\u590d\u6742\u5ea6 + \u6c42\u6700\u591a $m$ \u6b21 LCA \u590d\u6742\u5ea6\uff09\r\n\r\n## \u4ee3\u7801\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\n#define int long long\r\ninline int qr(){\r\n\tchar ch=getchar(); bool f=1; int w=0;\r\n\tfor(;ch<'0' || ch>'9';ch=getchar()) if(ch=='-')f=0;\r\n\tfor(;ch>='0' && ch<='9';ch=getchar()) w=w*10+ch-'0';\r\n\treturn f?w:-w;\r\n}\r\nusing namespace std;\r\n\r\nconst int MAXN=400005; // \u91cd\u6784\u6811\u65b0\u5efa n-1 \u4e2a\u8282\u70b9\uff0c\u4e00\u5b9a\u8981\u5f00\u4e8c\u500d\u7a7a\u95f4\uff01\r\nstruct Edge{\r\n\tint u,v,w,id;\r\n\tconst bool operator<(const Edge &e)const{\r\n\t\treturn w<e.w;\r\n\t}\r\n}a[MAXN];\r\nbool cmp(const Edge &u,const Edge &v){\r\n\treturn u.id<v.id;\r\n}\r\nvector<int> E[MAXN];\r\nint n,m,fa[MAXN],w[MAXN],sum=0;\r\nint dep[MAXN],f[MAXN][25];\r\nbool used[MAXN];\r\n\r\nint find(int k){\r\n\tif(fa[k]==k) return k;\r\n\treturn fa[k]=find(fa[k]);\r\n}\r\nvoid Kruskal(){\r\n\tfor(int i=1;i<=n<<1;i++) fa[i]=i; // \u9884\u5904\u7406\u5e76\u67e5\u96c6\r\n\tint j=1; sort(a+1,a+1+m);\r\n\tfor(int i=1;i<n;i++){\r\n\t\twhile(find(a[j].u)==find(a[j].v)) j++;\r\n\t\tint fu=find(a[j].u),fv=find(a[j].v);\r\n\t\tused[a[j].id]=1; // \u8bb0\u5f55\u8fd9\u6761\u8fb9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\r\n\t\tE[i+n].push_back(fu); // \u91cd\u6784\u6811\u65b0\u5efa\u7684\u8282\u70b9\u548c\u5df2\u6709\u7684\u4e24\u4e2a\u8282\u70b9\u8fde\u8fb9\uff08\u6ce8\u610f\u662f find(u) \u548c find(v)\uff0c\u4e0d\u662f\u76f4\u63a5\u8fde\u8fb9\uff01\uff09\r\n\t\tE[i+n].push_back(fv);\r\n\t\tf[fu][0]=f[fv][0]=i+n; // \u9884\u5904\u7406\u51fa LCA \u7684\u7b2c\u4e00\u5c42\r\n\t\tfa[fu]=fa[fv]=i+n; // \u5e76\u67e5\u96c6\u5408\u5e76\uff08\u8fd9\u91cc\u548c\u666e\u901a Kruskal \u4e0d\u540c\uff0c\u662f\u628a u \u548c v \u4e00\u8d77\u5408\u5e76\u5230\u65b0\u5efa\u7684\u8282\u70b9\u4e0a\uff0c\u8fd9\u6837\u65b9\u4fbf\u8ba1\u7b97\uff09\r\n\t\tw[i+n]=a[j].w; // \u65b0\u5efa\u8282\u70b9\u7684\u70b9\u6743\u5c31\u662f\u8fb9\u6743\r\n\t\tsum+=a[j].w; // \u8ba1\u7b97\u6700\u5c0f\u751f\u6210\u6811\u5927\u5c0f\r\n\t\tj++;\r\n\t}\r\n}\r\nvoid dfs(int u,int fa){\r\n\tdep[u]=dep[fa]+1; // \u8ba1\u7b97\u6df1\u5ea6\r\n\tfor(int i=0;i<E[u].size();i++){\r\n\t\tint v=E[u][i];\r\n\t\tif(v==fa) continue;\r\n\t\tdfs(v,u);\r\n\t}\r\n}\r\nint LCA(int u,int v){ // \u6c42 LCA\r\n\tif(dep[u]<dep[v]) swap(u,v);\r\n\tint tmp=dep[u]-dep[v];\r\n\tfor(int j=22;j>=0;j--)\r\n\t\tif((tmp>>j)&1) u=f[u][j]; // \u5148\u8df3\u5230\u540c\u4e00\u6df1\u5ea6\r\n//\tcout<<u<<\" \"<<v<<\" \"<<dep[u]<<\" \"<<dep[v]<<endl;\r\n\tif(u==v) return u;\r\n\tfor(int j=22;j>=0;j--){\r\n\t\tif(f[u][j]==f[v][j]) continue;\r\n\t\tu=f[u][j],v=f[v][j]; // \u518d\u4e00\u8d77\u5f80\u4e0a\u8df3\r\n\t}\r\n\treturn f[u][0];\r\n}\r\nsigned main(){\r\n\tn=qr(),m=qr();\r\n\tfor(int i=1;i<=m;i++){\r\n\t\ta[i]=(Edge){qr(),qr(),qr(),i}; // \u5efa\u8fb9\r\n\t}\r\n\tKruskal(); // \u6700\u5c0f\u751f\u6210\u6811 + Kruskal \u91cd\u6784\u6811\r\n\tdfs(n+n-1,0); // \u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\uff0c\u4f9b LCA \u7528\r\n\tfor(int j=1;j<=22;j++)\r\n\t\tfor(int i=1;i<=n<<1;i++)\r\n\t\t\tf[i][j]=f[f[i][j-1]][j-1]; // \u500d\u589e\u9884\u5904\u7406 LCA\r\n\tsort(a+1,a+1+m,cmp); // \u8bb0\u5f97\u91cd\u65b0\u6392\u56de\u8f93\u5165\u987a\u5e8f\uff01\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tif(used[i]) cout<<sum<<endl; // \u5982\u679c\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa\u6700\u5c0f\u751f\u6210\u6811\u5927\u5c0f\r\n\t\telse{\r\n\t\t\tint t=LCA(a[i].u,a[i].v); // \u7b97\u51fa\u91cd\u6784\u6811\u7684 LCA\r\n//\t\t\tcout<<a[i].u<<\" \"<<a[i].v<<\" \"<<t<<endl;\r\n\t\t\tcout<<sum-w[t]+a[i].w<<endl; // \u8ba1\u7b97\u7b54\u6848\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n\r\n\u76ee\u6d4b\u4ee3\u7801\u76f8\u5bf9\u4e8e\u8bb8\u591a\u9898\u89e3\u7684\u6811\u5256\u5e38\u6570\u8f83\u5c0f\u5e76\u4e14\u7b80\u6d01qwq",
        "postTime": 1660220364,
        "uid": 195198,
        "name": "E1_de5truct0r",
        "ccfLevel": 7,
        "title": "CF609E \u9898\u89e3"
    },
    {
        "content": "# \u524d\u8a00\n[\u535a\u5ba2\u56ed\u4f53\u9a8c\u66f4\u4f73](https://www.cnblogs.com/C202202chenkelin/p/15033423.html)\n\n[\u9898\u76ee\u94fe\u63a5\uff1aCodeForces](https://codeforces.com/problemset/problem/609/E)\n# \u9898\u610f\n\u7ed9\u4f60 $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\uff0c\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u8981\u6c42\u5fc5\u987b\u5305\u62ec\u7b2c $i(1\\leq i\\leq m)$ \u6761\u8fb9\uff0c\u90a3\u4e48\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u603b\u548c\u6700\u5c0f\u662f\u591a\u5c11\u3002\n# \u601d\u8def\n\u9996\u5148\u6c42\u51fa\u8be5\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u7684\u7b54\u6848\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u3002\u8bb0\u5f55\u4e0b\u6765\u8fd9\u4e2a\u6743\u503c\u548c\uff0c\u8bb0\u4e3a $ans$\u3002\n\n\u8003\u8651\u5fc5\u987b\u5305\u542b\u4e0d\u5728\u751f\u6210\u6811\u4e2d\u7684\u8fb9\uff0c\u5f3a\u884c\u52a0\u5165\u4e86\u6700\u5c0f\u751f\u6210\u6811\u5bf9\u4e8e\u7b54\u6848\u7684\u5f71\u54cd\u3002\n\n\u5c31\u76f8\u5f53\u4e8e\u73b0\u5c06\u8fd9\u6761\u8fb9\u52a0\u5165\u751f\u6210\u6811\u4e2d\uff0c\u7136\u540e\u518d\u8dd1 kruskal\uff0c\u9700\u8981\u627e\u5230\u88ab\u5e76\u67e5\u96c6\u67e5\u5230\u76f8\u540c\u7684\u7236\u4eb2\u7684\u90a3\u6761\u8fb9\uff0c\u4e14\u8fd9\u6761\u8fb9\u5728\u6700\u5c0f\u751f\u6210\u6811\u5185\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u76f4\u63a5\u5728\u751f\u6210\u6811\u4e2d\u52a0\u5165\u8fd9\u6761\u8fb9\u5f62\u6210\u7684\u73af\uff0c\u90fd\u6709\u53ef\u80fd\u53d7\u8fd9\u6761\u8fb9\u7684\u5f71\u54cd\u3002\n\n\u7531\u4e8e\u6309\u7167 kruskal \u7684\u601d\u60f3\uff0c\u8fb9\u662f\u88ab\u6392\u4e86\u5e8f\u7684\uff0c\u5f71\u54cd\u5230\u7684\u8fb9\uff0c\u53ea\u6709\u6743\u503c\u6700\u5927\u7684\u4e00\u6761\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u7ef4\u62a4\u4e0d\u5e26\u4fee\u6539\u7684\u6811\u4e0a\u8def\u5f84\u6700\u5927\u503c\u3002\u7528LCA\u6216\u8005\u6811\u5256+ST\u8868/\u7ebf\u6bb5\u6811 \u90fd\u53ef\u4ee5\u7ef4\u62a4\u3002\n# Code\n\u5f00\u4e86long long\u5c31\u4e0d\u4f1a\u6b7b\u3002\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n#define LL long long\nconst int MAXN = 2e5 + 5;\nstruct Edge {\n\tint To, Dis, Next;\n};\nint head[MAXN], tot = 1;\nEdge edge[MAXN << 1];\nvoid Addedge(int u, int v, int w) {\n\tedge[++tot].Next = head[u], edge[tot].To = v, edge[tot].Dis = w, head[u] = tot;\n\tedge[++tot].Next = head[v], edge[tot].To = u, edge[tot].Dis = w, head[v] = tot;\n}\nstruct Edge1 {\n\tint u, v, w, id;\n\tfriend bool operator < (Edge1 x, Edge1 y) {\n\t\treturn x.w < y.w;\n\t}\n};\nEdge1 e[MAXN];\nint dp[MAXN][40], maxn[MAXN][40];\nint fa[MAXN], dep[MAXN], n, m;\nbool flag[MAXN];\nLL ans;\nint Find(int x) {\n\treturn fa[x] == x ? x : (fa[x] = Find(fa[x]));\n}\nvoid Union(int x, int y) {\n\tfa[Find(x)] = fa[Find(y)];\n}\nint Maxpast(int x, int y) {\n\tint res = 0;\n\tif (x == y) return res;\n\tif (dep[x] < dep[y])\n\t\tswap(x, y);\n\tfor (int i = 30; i >= 0; i--) {\n\t\tif (dep[x] - (1 << i) >= dep[y]) {\n\t\t\tres = max(res, maxn[x][i]);\n\t\t\tx = dp[x][i];\n\t\t}\n\t}\n\tif (x == y) return res;\n\tfor (int i = 30; i >= 0; i--) {\n\t\tif (dp[x][i] != dp[y][i]) {\n\t\t\tres = max(res, max(maxn[x][i], maxn[y][i]));\n\t\t\tx = dp[x][i];\n\t\t\ty = dp[y][i];\n\t\t}\n\t}\n\tres = max(res, max(maxn[x][0], maxn[y][0]));\n\treturn res;\n}\nvoid dfs(int u, int fa) {\n\tdp[u][0] = fa;\n\tdep[u] = dep[fa] + 1;\n\tfor (int i = head[u]; i; i = edge[i].Next) {\n\t\tint v = edge[i].To;\n\t\tif (v == fa) continue;\n\t\tdfs(v, u);\n\t\tmaxn[v][0] = edge[i].Dis;\n\t}\n}\nbool cmp(Edge1 x, Edge1 y) {\n\treturn x.id < y.id;\n}\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\tfor (int i = 1; i <= m; i++) {\n\t\tscanf(\"%d %d %d\", &e[i].u, &e[i].v, &e[i].w);\n\t\te[i].id = i;\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tfa[i] = i;\n\tsort(e + 1, e + 1 + m);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u = Find(e[i].u), v = Find(e[i].v);\n\t\tif (u == v) continue;\n\t\tUnion(u, v);\n\t\tans += e[i].w;\n\t\tflag[e[i].id] = 1;\n\t\tAddedge(e[i].u, e[i].v, e[i].w);\n\t}\n\tdfs(1, 0);\n\tfor (int j = 1; j <= 30; j++) {\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tdp[i][j] = dp[dp[i][j - 1]][j - 1];\n\t\t\tmaxn[i][j] = max(maxn[i][j - 1], maxn[dp[i][j - 1]][j - 1]);\n\t\t}\n\t}\n\tsort(e + 1, e + 1 + m, cmp);\n\tfor (int i = 1; i <= m; i++) {\n\t\tLL tmp = 0;\n\t\tif (flag[i])\n\t\t\ttmp = ans;\n\t\telse\n\t\t\ttmp = ans - Maxpast(e[i].u, e[i].v) + e[i].w;\n\t\tprintf(\"%lld\\n\", tmp);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1626746118,
        "uid": 254733,
        "name": "Night_Bringer",
        "ccfLevel": 0,
        "title": "[\u9898\u89e3] CF609E Minimum spanning tree for each edge"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u548c\u6b21\u5c0f\u751f\u6210\u6811\u633a\u50cf\u7684\u3002\n\n\u6211\u4eec\u5982\u679c\u66b4\u529b\u5730\u6bcf\u6b21\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u590d\u6742\u5ea6\u4f1a\u8fbe\u5230 $O(m^2)$\uff0c\u663e\u7136\u4f1a T\u3002\u90a3\u4e48\u6211\u4eec\u8003\u8651\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u5b83\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u90a3\u7b54\u6848\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u5927\u5c0f\uff1b\u5982\u679c\u4e0d\u5728\uff0c\u8bbe\u4e24\u4e2a\u7aef\u70b9\u4e3a $x,y$\uff0c\u90a3\u4e48\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u52a0\u4e0a\u8fd9\u6761\u8fb9\u5e76\u5220\u53bb\u8def\u5f84 $x->lca->y$ \u4e0a\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u5373\u53ef\u3002\u6211\u4eec\u5728\u500d\u589e\u6c42 LCA \u7684\u8fc7\u7a0b\u4e2d\u5c31\u987a\u4fbf\u5904\u7406\u51fa\u6765\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(mlogn)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u6ce8\u610f\u8981\u5f00 `long long`\uff0c\u5e76\u4e14\u6392\u5e8f\u540e\u8fb9\u7684\u987a\u5e8f\u4f1a\u6253\u4e71\uff0c\u9700\u8981\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\ninline int read()\n{\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t    ch=getchar();\n\tint res=0;\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tres=res*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn res;\n}\nstruct edge\n{\n\tint x,y;\n\tint w;\n\tint id;\n}e[200001];\nint n,m,father[200001],cnt,head[200001],to[400001],nxt[400001],w[400001],tot,depth[200001],up[200001][19],Max[200001][19];\nll sum,res[200001];//\u80fd\u4e0d\u7528long long\u5c31\u4e0d\u7528\nbool inmst[200001];\ninline bool cmp(edge e1,edge e2)\n{\n\treturn e1.w<e2.w;\n}\nint find(int x)//\u5e76\u67e5\u96c6\n{\n\tif(x==father[x])\n\t\treturn x;\n\treturn father[x]=find(father[x]);\n}\ninline void add(int x,int y,int z)//\u5efa\u56fe\n{\n\tto[++tot]=y;\n\tw[tot]=z;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n}\nvoid dfs(int x,int fa)//\u500d\u589e\u9884\u5904\u7406\n{\n\tup[x][0]=fa;\n\tdepth[x]=depth[fa]+1;\n\tfor(register int i=head[x];i;i=nxt[i])\n\t\tif(to[i]!=fa)\n\t\t{\n\t\t\tMax[to[i]][0]=w[i];\n\t\t\tdfs(to[i],x);\n\t\t}\n}\nint main()\n{\n\tn=read();\n\tm=read();\n\tfor(register int i=1;i<=n;++i)\n\t\tfather[i]=i;\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\te[i].x=read();\n\t\te[i].y=read();\n\t\te[i].w=read();\n\t\te[i].id=i;\n\t}\n\tsort(e+1,e+m+1,cmp);\n\tfor(register int i=1;cnt<n-1;++i)\n\t{\n\t\tint xx=find(e[i].x),yy=find(e[i].y);\n\t\tif(xx==yy)\n\t\t\tcontinue;\n\t\t++cnt;\n\t\tfather[yy]=xx;\n\t\tsum+=e[i].w;\n\t\tinmst[i]=1;\n\t\tadd(e[i].x,e[i].y,e[i].w);\n\t\tadd(e[i].y,e[i].x,e[i].w);\n\t}//\u8dd1\u51fa\u6700\u5c0f\u751f\u6210\u6811\u5e76\u5efa\u6811\n\tdfs(1,0);\n\tfor(register int i=1;i<19;++i)\n\t\tfor(register int j=1;j<=n;++j)\n\t\t{\n\t\t\tup[j][i]=up[up[j][i-1]][i-1];\n\t\t\tMax[j][i]=max(Max[j][i-1],Max[up[j][i-1]][i-1]);\n\t\t}//\u9884\u5904\u7406\n\tfor(register int i=1;i<=m;++i)//\u500d\u589e\u6c42\u89e3\n\t{\n\t\tif(inmst[i])\n\t\t{\n\t\t\tres[e[i].id]=sum;\n\t\t\tcontinue;\n\t\t}\n\t\tint maxx=0,tx=e[i].x,ty=e[i].y;\n\t\tif(depth[tx]<depth[ty])\n\t\t\tswap(tx,ty);\n\t\tfor(register int j=18;j>=0;--j)\n\t\t\tif(depth[up[tx][j]]>=depth[ty])\n\t\t\t{\n\t\t\t\tmaxx=max(maxx,Max[tx][j]);\n\t\t\t\ttx=up[tx][j];\n\t\t\t}\n\t\tif(tx==ty)\n\t\t{\n\t\t\tres[e[i].id]=sum+e[i].w-maxx;\n\t\t\tcontinue;\n\t\t}\n\t\tfor(register int j=18;j>=0;--j)\n\t\t\tif(up[tx][j]!=up[ty][j])\n\t\t\t{\n\t\t\t\tmaxx=max(maxx,max(Max[tx][j],Max[ty][j]));\n\t\t\t\ttx=up[tx][j];\n\t\t\t\tty=up[ty][j];\n\t\t\t}\n\t\tmaxx=max(maxx,max(Max[tx][0],Max[ty][0]));\n\t\tres[e[i].id]=sum+e[i].w-maxx;\n\t}\n\tfor(register int i=1;i<=m;++i)\n\t\tprintf(\"%lld\\n\",res[i]);//\u5b8c\uff01\n\treturn 0;\n}\n```\n",
        "postTime": 1598500726,
        "uid": 68011,
        "name": "\u53e4\u660e\u5730_ypc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    },
    {
        "content": "\u9898\u610f\u5f88\u6e05\u695a\uff0c\u7ed9\u5b9a\u4e00\u5f20\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u5bf9\u4e8e\u56fe\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u8be2\u95ee\u5305\u62ec\u8fd9\u4e00\u6761\u8fb9\u7684\u751f\u6210\u6811\u4e2d\u8fb9\u6743\u6743\u503c\u4e4b\u548c\u6700\u5c0f\u7684\u3002\n\n\u9996\u5148\u60f3\u5230\u7684\u65b9\u6cd5\u662f\u6bcf\u6b21\u90fd\u5148\u628a\u8981\u6c42\u7684\u8fd9\u6761\u8fb9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u8dd1\u4e00\u904d Kruskal\uff0c\u4f46\u7528\u819d\u76d6\u60f3\u4e00\u4e0b\u90fd\u77e5\u9053\u8fd9\u6837\u80af\u5b9a\u662f\u4f1a T \u98de\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u539f\u6765\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u8fdb\u884c\u4fee\u6539\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u8fd9\u4e00\u6761\u8fb9\u5f3a\u884c\u585e\u8fdb\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7531\u4e8e\u8fd9\u6837\u5f88\u660e\u663e\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u4ece\u8fd9\u4e2a\u73af\u91cc\u518d\u5220\u6389\u4e00\u6761\u8fb9\u3002\n\n\u5047\u8bbe\u6b64\u65f6\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u662f $u$ \u548c $v$ \u4e24\u4e2a\u70b9\uff0c\u5219\u4ece $u$ \u5230 $v$ \u7684\u6700\u77ed\u8def\u5f84\u5e94\u8be5\u4f1a\u7ecf\u8fc7 $\\operatorname{LCA}(u,v)$\uff0c\u6240\u4ee5\u8fd9\u4e2a\u73af\u5e94\u8be5\u662f\u4ece $u$ \u5230 $\\operatorname{LCA}(u,v)$ \u518d\u5230 $v$ \u6700\u540e\u56de\u5230 $u$\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5220\u6389\u7684\u8fb9\u5e94\u8be5\u662f\u5728\u4ece $u$ \u5230 $\\operatorname{LCA}(u,v)$ \u518d\u5230 $v$ \u8fd9\u6761\u8def\u5f84\u4e0a\uff0c\u53c8\u56e0\u4e3a\u8981\u6c42\u65b0\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u6700\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c3d\u91cf\u5220\u6389\u6743\u503c\u8f83\u5927\u7684\u8fb9\u3002\n\n\u56e0\u6b64\uff0c\u8fd9\u9053\u9898\u5c31\u53d8\u6210\u4e86\u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u8be2\u95ee\u5176\u4e24\u4e2a\u7aef\u70b9\u5728\u6811\u4e0a\u7684\u6700\u77ed\u8def\u5f84\u4e2d\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u3002\n\n\u8fd9\u79cd\u95ee\u9898\u672c\u6765\u53ef\u4ee5\u7528\u6811\u5256\u505a\uff0c\u4f46\u7531\u4e8e\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\uff0c\u4e0d\u9700\u8981\u90a3\u4e48\u9ebb\u70e6~~\u5176\u5b9e\u5c31\u662f\u61d2~~\uff0c\u4f7f\u7528\u500d\u589e\u6c42 LCA\uff0c\u5728\u6c42\u6bcf\u4e2a\u70b9\u7684\u7b2c $2^i$ \u4e2a\u7236\u4eb2\u7684\u65f6\u5019\uff0c\u53e6\u5916\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u6bcf\u4e2a\u70b9\u5230\u5b83\u7b2c $2^i$ \u4e2a\u7236\u4eb2\u8fd9\u6761\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8fb9\u6743\uff0c\u7136\u540e\u5728\u5f80\u4e0a\u8df3\u7684\u65f6\u5019\u987a\u4fbf\u7528\u4e00\u4e2a\u53d8\u91cf\u7edf\u8ba1\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u5177\u4f53\u7684\u770b\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define mp(a,b) make_pair(a,b)\n#define pll pair<long long,long long>\nusing namespace std;\nstruct Edge\n{\n\tlong long u;\n\tlong long v;\n\tlong long c;\n\tlong long id;\n};\nbool cmp(Edge a,Edge b)\n{\n\treturn a.c<b.c;\n}\nbool cmp2(Edge a,Edge b)//\u8fd9\u4e2a\u662f\u6c42\u5b8c\u6700\u5c0f\u751f\u6210\u6811\u540e\u8fd8\u539f\u6240\u6709\u8fb9\u7684\u987a\u5e8f\u7684\uff0c\u867d\u7136\u4e5f\u53ef\u4ee5\u518d\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f46\u662f\u6211\u61d2\u3002\n{\n\treturn a.id<b.id;\n}\nEdge a[200001];\nvector<pll> edge[200001];\nlong long n,m,cnt,k,log2n,f[200001],dep[200001],fa[200001][21],maxn[200001][21];\nlong long find(long long x)\n{\n\treturn f[x]==x? f[x]:f[x]=find(f[x]);\n}\nvoid dfs(long long u,long long father)\n{\n\tfa[u][0]=father;\n\tdep[u]=dep[father]+1;\n\tfor(long long i=1;(1<<i)<=dep[u];i++)\n\t{\n\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\t\tmaxn[u][i]=max(maxn[u][i-1],maxn[fa[u][i-1]][i-1]);//\u6c42 u \u5230\u5b83\u7b2c 2^i \u4e2a\u7236\u4eb2\u8fd9\u6761\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8fb9\u6743\u3002\n\t}\n\tfor(long long i=0;i<edge[u].size();i++)\n\t{\n\t\tlong long v=edge[u][i].first,c=edge[u][i].second;\n\t\tif(v!=father)\n\t\t{\n\t\t\tmaxn[v][0]=c;//\u5728\u641c\u7d22\u513f\u5b50\u524d\u5148\u628a\u8fd9\u4e2a\u521d\u59cb\u5316\u4e00\u4e0b\u3002\n\t\t\tdfs(v,u);\n\t\t}\n\t}\n}\nlong long lca(long long u,long long v)\n{\n\tlong long depu=dep[u],depv=dep[v],ans=0;//ans \u7528\u6765\u7edf\u8ba1\u6700\u5927\u8fb9\u6743\u3002\n\tif(depu!=depv)\n\t{\n\t\tif(depu<depv)\n\t\t{\n\t\t\tswap(depu,depv);\n\t\t\tswap(u,v);\n\t\t}\n\t\tfor(long long i=0;(1<<i)<=depu-depv;i++)\n\t\t\tif((depu-depv)&(1<<i))\n\t\t\t{\n\t\t\t\tans=max(ans,maxn[u][i]);\n\t\t\t\tu=fa[u][i];\n\t\t\t}\n\t}\n\tif(u==v)\n\t\treturn ans;\n\tfor(long long i=log2n;i>=0;i--)\n\t\tif(fa[u][i]!=fa[v][i])\n\t\t{\n\t\t\tans=max(ans,max(maxn[u][i],maxn[v][i]));\n\t\t\tu=fa[u][i];\n\t\t\tv=fa[v][i];\n\t\t}\n\treturn max(ans,max(maxn[u][0],maxn[v][0]));\n}\nsigned main()\n{\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(long long i=1;i<=n;i++)\n\t\tf[i]=i;\n\tfor(long long i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld%lld%lld\",&a[i].u,&a[i].v,&a[i].c);\n\t\ta[i].id=i;\n\t}\n\tsort(a+1,a+1+m,cmp);\n\tfor(long long i=1;i<=m;i++)//Kruskal \u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\n\t{\n\t\tlong long t1=find(a[i].u),t2=find(a[i].v);\n\t\tif(t1!=t2)\n\t\t{\n\t\t\tf[t1]=t2;\n\t\t\tcnt++;\n\t\t\tk+=a[i].c;\n\t\t\tedge[a[i].u].push_back(mp(a[i].v,a[i].c));\n\t\t\tedge[a[i].v].push_back(mp(a[i].u,a[i].c));\n\t\t}\n\t\tif(cnt==n-1)\n\t\t\tbreak;\n\t}\n\tsort(a+1,a+1+m,cmp2);\n\tlog2n=log(n)/log(2)+0.5;\n\tdfs(1,0);\n\tfor(long long i=1;i<=m;i++)\n\t\tprintf(\"%lld\\n\",k+a[i].c-lca(a[i].u,a[i].v));//\u52a0\u4e0a\u5f53\u524d\u8fd9\u6761\u7684\u8fb9\u6743\uff0c\u5220\u53bb\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8fb9\u6743\u3002\n\treturn 0;\n}\n```\n\n\n\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u6211\u8fd8\u60f3\u7740\u8981\u4e0d\u8981\u5224\u65ad\u4e00\u4e0b\u8fd9\u6761\u8fb9\u662f\u5426\u662f\u6811\u8fb9\uff0c\u4f46\u5176\u5b9e\u5982\u679c\u662f\u6811\u8fb9\u7684\u8bdd\uff0c\u90a3\u4e48\u52a0\u4e0a\u7684\u4e5f\u662f\u5b83\uff0c\u5220\u53bb\u7684\u4e5f\u662f\u5b83\uff0c\u6839\u672c\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u6ca1\u5fc5\u8981\u7279\u5224\u3002\n\n\u53e6\u5916\uff0c\u8fd9\u9053\u9898\u4e00\u5b9a\u8981\u5f00 long long\uff0c\u56e0\u4e3a $10^9\\times 2\\cdot10^5$ \u5f88\u660e\u663e\u70b8 int \u4e86\u3002",
        "postTime": 1597059693,
        "uid": 183235,
        "name": "Islauso",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9053\u9898\u5f88\u50cf[P4180[BJWC2010]\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811](https://www.luogu.com.cn/problem/P4180)\u3002\n****\n\n\u9996\u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u5efa\u7acb\u6570\u636e\u7ed3\u6784\uff08\u91cd\u94fe\u5256\u5206\uff0c\u500d\u589e\uff0c  $lct$\uff09\uff0c\u7528\u6765\u7ef4\u62a4\u94fe\u4e0a\u7684\u6700\u5927\u503c\u3002\n\n\u6bcf\u6b21\u7684\u7b54\u6848\u5c31\u662f\uff08\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c$+$\u8be5\u8fb9\u8fb9\u6743$-$\u8be5\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u94fe\u7684\u6743\u503c\u6700\u5927\u503c\uff09\u3002\n\n\u7528lct\u7ef4\u62a4\u65f6\uff0c\u5c06\u8fb9\u8f6c\u5316\u4e3a\u4e00\u4e2a\u70b9\uff0c\u5411\u4ed6\u6240\u8fde\u5f97\u4e24\u4e2a\u70b9\u8fde\u8fb9\u5373\u53ef\uff08\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\uff09\n\n**\u6ce8\u610f\uff1a\u4e00\u5b9a\u8981\u5f00long long**\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<queue>\n#include<bitset>\n#define ll long long\n#define ull unsigned long long\nusing namespace std;\nconst int maxn=4e5+5;\nint fa[maxn],n,m,f[maxn],val[maxn];\nll ans[maxn];\nll sum;\nstruct edge\n{\n\tint u,v,w,bh;\n\tinline bool operator<(const edge&rhs)const\n\t{\n\t\treturn w<rhs.w;\n\t}\n}e[maxn];\nnamespace LCT\n{\n\tstruct lct\n\t{\n\t\tint son[maxn][2],maxv[maxn];\n\t\tbool rev[maxn];\n\t\tinline void pushdown(int u)\n\t\t{\n\t\t\tif(rev[u])\n\t\t\t{\n\t\t\t\trev[son[u][1]]^=1;\n\t\t\t\trev[son[u][0]]^=1;\n\t\t\t\tswap(son[u][0],son[u][1]);\n\t\t\t\trev[u]=0;\n\t\t\t}\n\t\t}\n\t\tinline void pushup(int u)\n\t\t{\n\t\t\tmaxv[u]=max(val[u],max(maxv[son[u][0]],maxv[son[u][1]]));\n\t\t}\n\t\tinline bool nroot(int x)\n\t\t{\n\t\t\treturn son[fa[x]][0]==x||son[fa[x]][1]==x;\n\t\t}\n\t\tinline void rotate(int x)\n\t\t{\n\t\t\tint y=fa[x],z=fa[y],k=son[y][1]==x;\n\t\t\tif(nroot(y))son[z][son[z][1]==y]=x;\n\t\t\tfa[x]=z;\n\t\t\tson[y][k]=son[x][k^1];\n\t\t\tfa[son[x][k^1]]=y;\n\t\t\tson[x][k^1]=y;\n\t\t\tfa[y]=x;\n\t\t\tpushup(y);\n\t\t\tpushup(x);\n\t\t}\n\t\tinline void pushall(int x)\n\t\t{\n\t\t\tif(nroot(x))pushall(fa[x]);\n\t\t\tpushdown(x);\n\t\t}\n\t\tinline void splay(int x)\n\t\t{\n\t\t\tpushall(x);\n\t\t\twhile(nroot(x))\n\t\t\t{\n\t\t\t\tint y=fa[x],z=fa[y];\n\t\t\t\tif(nroot(y))\n\t\t\t\t{\n\t\t\t\t\tif((son[z][1]==y)^(son[y][1]==x))rotate(x);\n\t\t\t\t\telse rotate(y);\n\t\t\t\t}\n\t\t\t\trotate(x);\n\t\t\t}\n\t\t}\n\t\tinline void access(int x)\n\t\t{\n\t\t\tfor(int y=0;x;y=x,x=fa[x])\n\t\t\t{\n\t\t\t\tsplay(x);\n\t\t\t\tson[x][1]=y;\n\t\t\t\tpushup(x);\n\t\t\t}\n\t\t}\n\t\tinline void makeroot(int x)\n\t\t{\n\t\t\taccess(x);\n\t\t\tsplay(x);\n\t\t\trev[x]^=1;\n\t\t}\n\t\tinline int findroot(int x)\n\t\t{\n\t\t\taccess(x);\n\t\t\tsplay(x);\n\t\t\tpushdown(x);\n\t\t\twhile(son[x][0])\n\t\t\t{\n\t\t\t\tx=son[x][0];\n\t\t\t\tpushdown(x);\n\t\t\t}\n\t\t\tsplay(x);\n\t\t\treturn x;\n\t\t}\n\t\tinline void link(int x,int y)\n\t\t{\n\t\t\tmakeroot(x);\n\t\t\tif(findroot(y)!=x)\n\t\t\t{\n\t\t\t\tfa[x]=y;\n\t\t\t}\n\t\t}\n\t\tinline void split(int x,int y)\n\t\t{\n\t\t\tmakeroot(x);\n\t\t\taccess(y);\n\t\t\tsplay(y);\n\t\t}\n\t\tinline int query(int x,int y)\n\t\t{\n\t\t\tsplit(x,y);\n\t\t\treturn maxv[y];\n\t\t}\n\t}lct;\n\tinline void work()\n\t{\n\t\tfor(int i=1;i<=m;++i)\n\t\t{\n\t\t\tans[e[i].bh]=sum+e[i].w-lct.query(e[i].u,e[i].v);\n\t\t}\n\t\tfor(int i=1;i<=m;++i)\n\t\t{\n\t\t\tprintf(\"%lld\\n\",ans[i]);\n\t\t}\n\t}\n}\nnamespace MST\n{\n\tinline int get(int x)\n\t{\n\t\tif(x==f[x])return x;\n\t\telse return f[x]=get(f[x]);\n\t}\n\tinline void work()\n\t{\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tfor(int i=1;i<=n;++i)f[i]=i;\n\t\tfor(int i=1;i<=m;++i)\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n\t\t\te[i].bh=i;\n\t\t\tval[i+n]=e[i].w;\n\t\t}\n\t\tsort(e+1,e+m+1);\n\t\tfor(int i=1;i<=m;++i)\n\t\t{\n\t\t\tint fu=get(e[i].u),fv=get(e[i].v);\n\t\t\tif(fu==fv)continue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tf[fu]=fv;\n\t\t\t\tLCT::lct.link(e[i].u,e[i].bh+n);\n\t\t\t\tLCT::lct.link(e[i].v,e[i].bh+n);\n\t\t\t\tsum+=e[i].w;\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tMST::work();\n\tLCT::work();\n}\n```",
        "postTime": 1587299735,
        "uid": 333789,
        "name": "lory1608",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF609E \u3010Minimum spanning tree for each edge\u3011"
    }
]