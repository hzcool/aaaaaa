[
    {
        "content": "\u672c\u9898\u8981\u4e0d\u96be\u60f3\u5230\u8981\u7528\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u4e4b\u7c7b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u9898\u76ee\u8981\u6c42\u5728\u6811\u4e0a\u64cd\u4f5c\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u5904\u7406\u5462\uff1f\n\n\u9996\u5148\u6211\u4eec\u8981\u7528\u5230\u4e00\u4e2a\u53ebdfs\u5e8f\u7684\u6982\u5ff5\u3002\u5176\u5b9e\u5e76\u4e0d\u96be\uff0c\u521a\u63a5\u89e6\u7684\u540c\u5b66\u4e0d\u8981\u88ab\u5b83\u5413\u5230\uff0c\u5b83\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u68f5\u6811\u7684\u5148\u5e8f\u904d\u5386\uff0c\u6240\u8c13\u5148\u5e8f\u904d\u5386\u5c31\u662f\u5148\u904d\u5386\u6839\uff0c\u7136\u540e\u904d\u5386\u5de6\u5b50\u8282\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u5b50\u8282\u70b9\u3002**\u6211\u4eec\u9700\u8981\u628adfs\u5e8f\u5b58\u5728pos\u6570\u7ec4\u4e2d\uff0c\u5e76\u628a\u6bcf\u4e2a\u8282\u70b9\u7b2c\u4e00\u6b21\u904d\u5386\u5230\u7684\u65f6\u95f4\u70b9\u548c\u7b2c\u4e8c\u6b21\u904d\u5386\u5230\u7684\u65f6\u95f4\u70b9\u5b58\u5230in\u548cout\u6570\u7ec4\u4e2d\uff0c\u8fd9\u6837\u5c31\u6210\u529f\u5730\u628a\u4e00\u68f5\u6811\u8f6c\u6362\u4e3a\u4e86\u7ebf\u6027\u7ed3\u6784\u3002\u5bf9\u4e00\u68f5\u5b50\u6811\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u53ea\u9700\u5bf9\u8fd9\u68f5\u5b50\u6811\u7684\u6839\u8282\u70b9\u4e24\u6b21\u904d\u5386\u5230\u7684\u65f6\u95f4\u6233\u4e2d\u95f4\u7684\u90e8\u5206\u8fdb\u884c\u64cd\u4f5c\u5373\u53ef**\u3002\n\n\u6c42dfs\u5e8f\u7684\u4ee3\u7801\n```cpp\nvoid dfs(ll x,ll fa){\n\ttim++;\n\tin[x]=tim;\n\tpos[tim]=x;\n\tfor(ll i=head[x];i;i=edge[i].next){\n\t\tll y=edge[i].v;\n\t\tif(y==fa) continue;\n\t\tdfs(y,x);\n\t}\n\tout[x]=tim;\n}\n\n```\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7528dfs\u5e8f\uff0c\u4e5f\u5c31\u662fpos\u6570\u7ec4\u5bf9\u7ebf\u6bb5\u6811\u8fdb\u884c\u64cd\u4f5c\u4e86\uff0c\u4e0d\u8fc7\u9700\u8981\u7528\u5230\u72b6\u6001\u538b\u7f29\uff0c\u8981\u628a\u989c\u8272\u538b\u7f29\u6210\u4e8c\u8fdb\u5236\u6570\u5230\u7ebf\u6bb5\u6811\u4e2d\uff0c\u6240\u4ee5\u8981\u5f00long long\u3002\u63a5\u4e0b\u6765\u57fa\u672c\u4e0a\u90fd\u662f\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u7684\u6a21\u677f\u4e86\u3002**\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u67e5\u8be2\u51fa\u6765\u7684\u503c\u662f\u4e00\u4e2a\u7ecf\u8fc7\u72b6\u538b\u540e\u7684\u6570\uff0c\u6211\u4eec\u9700\u8981\u628a\u5b83\u5206\u89e3\u3002**\u8fd9\u91cc\u53ef\u4ee5\u501f\u9274\u6811\u72b6\u6570\u7ec4\u7684\u601d\u60f3\uff0c\u5373\u6bcf\u6b21\u51cf\u53bb\u4e00\u4e2alowbit\uff08\u4e00\u68f5\u6811\u4e0a\u6709\u6570\u503c\u7684\u8282\u70b9\u7684\u6700\u4f4e\u4f4d,\u4e0d\u4f1a\u7684\u8bdd\u53ef\u4ee5\u5148\u53bb\u5b66\u4e60\u4e00\u4e0b\u6811\u72b6\u6570\u7ec4\uff0c\u8fd9\u91cc\u4e0d\u518d\u8fc7\u591a\u8d58\u8ff0\uff09\u518d\u8ba9ans++\uff0c\u56e0\u4e3a\u72b6\u538b\u540e\u53ea\u67090\u548c1\uff0c\u6709\u503c\u7684\u8bdd\u4e00\u5b9a\u662f1\u3002ans\u5c31\u662f\u6700\u540e\u7684\u7b54\u6848\u3002\n\n\u9644\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#define N 400010\n#define ll long long\n\nusing namespace std;\n\nstruct node{                      //\u7528\u524d\u5411\u661f\u627edfs\u5e8f\n\tll v,next;\n}edge[N<<2];\nll head[N],tot,tim;\nll in[N],out[N],pos[N];\n\nll a[N];\nll ans[N<<2],lazy[N<<2];          //\u7ebf\u6bb5\u6811\u5f004\u500d\u7a7a\u95f4\n\n\n//-----------------------\u627edfs\u5e8f\nvoid dfs(ll x,ll fa){\n\ttim++;\n\tin[x]=tim;\n\tpos[tim]=x;\n\tfor(ll i=head[x];i;i=edge[i].next){\n\t\tll y=edge[i].v;\n\t\tif(y==fa) continue;\n\t\tdfs(y,x);\n\t}\n\tout[x]=tim;\n}\n\nvoid add(ll x,ll y){\n\ttot++;\n\tedge[tot].v=y;\n\tedge[tot].next=head[x];\n\thead[x]=tot;\n}\n\n//-----------------------\u72b6\u538b\u7ebf\u6bb5\u6811\u5404\u79cd\u64cd\u4f5c\nvoid pushup(ll rt){\n\tans[rt]=ans[rt<<1]|ans[rt<<1|1];   //\u72b6\u538b\uff0c\u6240\u4ee5\u662f\u6216\u8fd0\u7b97\n}\n\nvoid pushdown(ll rt){\n\tif(lazy[rt]!=0){\n\t\tlazy[rt<<1]=lazy[rt];\n\t\tlazy[rt<<1|1]=lazy[rt];\n\t\tans[rt<<1]=lazy[rt];\n\t\tans[rt<<1|1]=lazy[rt];\n\t\tlazy[rt]=0;\n\t}\n}\n\nvoid build(ll l,ll r,ll rt){\n\tif(l==r){\n\t\tans[rt]=1ll<<(a[pos[l]]);\n\t\treturn;\n\t}\n\tll mid=(l+r)>>1;\n\tbuild(l,mid,rt<<1);\n\tbuild(mid+1,r,rt<<1|1);\n\tpushup(rt);\n}\n\nvoid update(ll L,ll R,ll x,ll l,ll r,ll rt){\n\tif(L<=l&&r<=R){\n\t\tans[rt]=1ll<<x;     //\u5b58\u7684\u662f\u4e8c\u8fdb\u5236\u6570\uff0c\u5de6\u79fbx\u4f4d\u4ee3\u8868\u989c\u8272\uff0c\u521a\u5f00\u59cb\u63a5\u89e6\u7684\u8bdd\u5982\u679c\u4e0d\u61c2\u591a\u505a\u9898\u5c31\u80fd\u6162\u6162\u7406\u89e3\u4e86\n\t\tlazy[rt]=1ll<<x;    //1ll\u662f\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u6210long long\u7684\u610f\u601d\uff0c\u4e00\u5b9a\u8981\u6709\uff0c\u5f53\u65f6\u6211\u5c31\u5728\u8fd9\u91cc\u5361\u4e86\u597d\u4e45\n\t\treturn; \n\t}\n\tpushdown(rt);\n\tll mid=(l+r)>>1;\n\tif(L<=mid) update(L,R,x,l,mid,rt<<1);\n\tif(R>mid) update(L,R,x,mid+1,r,rt<<1|1);\n\tpushup(rt);\n}\n\nll query(ll L,ll R,ll l,ll r,ll rt){\n\tif(L<=l&&r<=R)\n\t\treturn ans[rt];\n\tpushdown(rt);\n\tll mid=(l+r)>>1;\n\tll res=0;\n\tif(L<=mid) res|=query(L,R,l,mid,rt<<1);\n\tif(R>mid) res|=query(L,R,mid+1,r,rt<<1|1);\n\treturn res;\n}\n\n//-----------------------\u5229\u7528\u6811\u72b6\u6570\u7ec4\u601d\u8def\u5206\u89e3\u72b6\u538b\u540e\u7684\u6570\uff0c\u5e76\u6c42\u51fa\u7b54\u6848\nll lowbit(ll k){\n\treturn k&(-k);\n}\n\nll getsum(ll x){\n\tll ans=0;\n\tfor(ll i=x;i>0;i-=lowbit(i))\n\t\tans++;\n\treturn ans;\n}\n\nint main(){\n\tll n,m,p,v,c;\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(ll i=1;i<=n;i++)\n\t\tscanf(\"%lld\",&a[i]);\n\tfor(ll i=1;i<n;i++){\n\t\tll x,y; \n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tdfs(1,0);\n\tbuild(1,n,1);\n\tfor(ll i=1;i<=m;i++){\n\t\tscanf(\"%lld\",&p);\n\t\tif(p==1){\n\t\t\tscanf(\"%lld%lld\",&v,&c);\n\t\t\tupdate(in[v],out[v],c,1,n,1);\n\t\t}else{\n\t\t\tscanf(\"%lld\",&v);\n\t\t\tll num=query(in[v],out[v],1,n,1);\n\t\t\tprintf(\"%lld\\n\",getsum(num));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1582384744,
        "uid": 158846,
        "name": "xixike",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF620E \u3010New Year Tree\u3011"
    },
    {
        "content": "\u77e5\u8bc6\u50a8\u5907\uff1a\u7ebf\u6bb5\u6811\u3001\u56fe\u7684\u5b58\u50a8\u4e0e\u904d\u5386\u3001\u72b6\u6001\u538b\u7f29\n\u9898\u610f\u7ffb\u8bd1\n\n\u4f60\u6709\u4e00\u68f5\u4ee51\u4e3a\u6839\u7684\u6709\u6839\u6811\uff0c\u6709n\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u521d\u59cb\u6709\u4e00\u4e2a\u989c\u8272c[i]\u3002\n\n\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1 v c \u5c06\u4ee5v\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u989c\u8272\u66f4\u6539\u4e3ac\n\n2 v \u67e5\u8be2\u4ee5v\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u989c\u8272\n\u9898\u76ee\u94fe\u63a5\uff1ahttps://www.luogu.org/problem/CF620E\n\u9996\u5148\u6211\u4eec\u8bb2\u4e00\u4e0bdfs\u5e8f\u5728\u8fd9\u9053\u9898\u91cc\u9762\u7684\u5e94\u7528\n\n\u5b9a\u4e49\uff1a\u4e00\u68f5\u6811\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u7528\u4e00\u4e2a\u65f6\u95f4\u6233\u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e00\u4e2a\u70b9\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4\uff0c\u5f97\u5230\u7684\u5e8f\u5217\u5c31\u53ebdfs\u5e8f\u3002\n\n\u6ce8\u610f\uff1a\u4ee5\u4e0d\u540c\u65b9\u5f0f\u5b58\u6811\u4f1a\u6709\u4e0d\u540c\u7684dfs\u5e8f\uff0c\u4f46\u662f\u5bf9\u4e8e\u540c\u4e00\u4e2a\u90bb\u63a5\u8868\u641c\u51fa\u6765\u7684dfs\u5e8f\u6c38\u8fdc\u4e00\u6837\n\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20190803212440813.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1eWFuMDQwOA==,size_16,color_FFFFFF,t_70)\n\n\u8fd9\u68f5\u6811\u7684dfs\u5e8f\uff08\u4e0d\u552f\u4e00\uff09\u5c31\u662f\uff1a1 4 6 3 7 10 5 8 2 9\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u4e00\u4e2a\u70b9\u7684dfs\u5e8f\u4ee3\u8868\u8fd9\u4e2a\u70b9\uff0c\u8fd9\u6837\u4e0d\u8bba\u6811\u7684\u5f62\u72b6\u662f\u600e\u6837\u7684\uff0cdfs\u5e8f\u90fd\u53ef\u4ee5\u628a\u5b83\u8f6c\u5316\u6210\u7ebf\u6027\u7ed3\u6784\n\n\u6211\u4eec\u901a\u8fc7dfs\u628a\u8fd9\u9897\u6811\u7684dfs\u5e8f\u5b58\u50a8\u5728pos\u6570\u7ec4\u4e2d\n\n\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u8981\u8bb0\u5f55\u4e00\u4e2a\u70b9\u7684\u5165\u70b9\u65f6\u95f4\u6233\u4e0e\u51fa\u70b9\u65f6\u95f4\u6233\u3002\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u6211\u4eec\u652f\u6301\u66f4\u6539\u4e00\u6574\u4e2a\u5b50\u6811\uff0c\u5982\u679c\u6211\u4eec\u628a\u5b83\u8f6c\u5316\u6210\u7ebf\u6027\u7ed3\u6784\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5b83\u800c\u4e0d\u7528dfs\u4e86\uff0c\u4f46\u662f\u7ebf\u6bb5\u6811\u8981\u6709\u5de6\u53f3\u7aef\u70b9\uff0c\u800c\u8fd9\u4e2a\u5de6\u53f3\u7aef\u70b9\u5c31\u662f\u7528in\u4e0eout\u6570\u7ec4\u5b9e\u73b0\u3002\n\ndfs\u4ee3\u7801\uff1a\n\u6211\u662f\u7528\u90bb\u63a5\u8868\u5b58\u56fe\uff0ctot\u4e3a\u65f6\u95f4\uff0cpos\u8bb0\u5f55\u5f53\u524d\u65f6\u95f4\u8bbf\u95ee\u5230\u7684\u7ed3\u70b9\u3002\n\n```cpp\nvoid dfs(int x,int fa){//\u7528dfs\u5e8f\u5c06\u6811\u5f62\u7ed3\u6784\u8f6c\u4e3a\u7ebf\u6027\u7ed3\u6784 \n\ttot++;\n\tin[x]=tot;\n\tpos[tot]=x;\n\tfor(int i=head[x];i+1;i=e[i].next){\n\t\tint k=e[i].to;\n\t\tif(k==fa)continue;\n\t\tdfs(k,x);\n\t}\n\tout[x]=tot;//\u5176\u5b9e\u6211\u4eecout\u8bb0\u5f55\u7684\u662f\u8be5\u5b50\u6811\u4e2ddfs\u5e8f\u6700\u5927\u7ed3\u70b9\u7684dfs\u5e8f\uff0c\u6240\u4ee5tot\u4e0d\u52a0\u4e00 \n\treturn;\n} \n```\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528pos\u6570\u7ec4\u5efa\u6811\u4e86\uff01\n\n```\nstruct tree{\n\tlong long sum;\n\tlong long tag;//\u8bb0\u5f55\u8981\u4fee\u6539\u4e3a\u54ea\u4e2a\u989c\u8272 \n\tint l,r;\n}t[1600040];\n```\n\n\u6211\u4eec\u628a\u989c\u8272\u72b6\u6001\u538b\u7f29\u5230\u4e00\u4e2along long\u4e2d\uff0c\u7136\u540e\u8981\u5efa\u7acb\u4e00\u9897\u4e0e\u8fd0\u7b97\u7684\u7ebf\u6bb5\u6811\uff1a\n\u9996\u5148\u662f\u4e0a\u4f20\u3001\u4e0b\u4f20\u4ee5\u53ca\u5efa\u6811\uff1a\n\n```cpp\nvoid pushup(int rt){\n\tt[rt].sum=t[rt<<1].sum|t[rt<<1|1].sum;\n\treturn;\n}\nvoid pushdown(int rt){\n\tif(t[rt].tag!=0){//\u6216\u8fd0\u7b97\u4e0d\u50cf\u533a\u95f4\u548c\uff0c\u8fd9\u91cc0\u662f\u5f71\u54cd\u7b54\u6848\u7684 \n\t\tt[rt<<1].sum=t[rt].tag;\n\t\tt[rt<<1].tag=t[rt].tag;\n\t\tt[rt<<1|1].sum=t[rt].tag;\n\t\tt[rt<<1|1].tag=t[rt].tag;\n\t\tt[rt].tag=0;\n\t}\t\n\treturn;\n}\nvoid build(int rt,int l,int r){\n\tt[rt].l=l;\n\tt[rt].r=r;\n\tif(l==r){\n\t\tt[rt].sum=(long long)1<<(c[pos[l]]);//\n\t\tt[rt].tag=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(rt<<1,l,mid);\n\tbuild(rt<<1|1,mid+1,r);\n\tpushup(rt);\n\treturn;\n}\n```\n\u7136\u540e\uff0c\u6211\u4eec\u5206\u522b\u6765\u5904\u7406\u4e24\u79cd\u64cd\u4f5c\n\n\u9996\u5148\u4f7f\u4fee\u6539\u64cd\u4f5c\uff1a\n\u5c06\u4ee5x\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u989c\u8272\u4fee\u6539\u4e3ap\uff1a\n\n```cpp\nvoid modify(int rt,int l,int r,int p){//\u5c06dfs\u5e8f\u4ecel\u5230r\u8fd9\u4e00\u533a\u95f4\u7684\u989c\u8272\u6539\u4e3ap  \u6ce8\u610f\u72b6\u538b \n\tif(t[rt].l>=l&&t[rt].r<=r){\n\t\tt[rt].sum=(long long)1<<p;//\n\t\tt[rt].tag=(long long)1<<p;//\n\t\treturn ;\n\t}\n\tint mid=(t[rt].l+t[rt].r)>>1;\n\tpushdown(rt);\n\tif(l<=mid)modify(rt<<1,l,r,p);\n\tif(r>mid)modify(rt<<1|1,l,r,p);\n\tpushup(rt);\n\treturn;\n}\n```\n\u8fd8\u8bb0\u5f97\u6211\u4e00\u5f00\u59cb\u7684dfs\u8fc7\u7a0b\u5417\uff1f\u6211\u4eec\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u70b9\u5c31\u8bb0\u5f55\u5b83\u7684\u5165\u70b9\u65f6\u95f4\u6233\uff0c\u7136\u540e\u904d\u5386\u5b83\u6bcf\u4e00\u4e2a\u513f\u5b50\uff0c\u7136\u540e\u8bb0\u5f55\u51fa\u70b9\u65f6\u95f4\u6233\uff0c\u8fd9\u6837\u7684\u8bdd\u4e00\u4e2a\u70b9\u7684\u5165\u3001\u51fa\u70b9\u65f6\u95f4\u6233\u4e4b\u95f4\u5c31\u5305\u542b\u4e86\u5b83\u7684\u6240\u6709\u5b69\u5b50\u3002\uff08\u8fd9\u6709\u70b9\u50cf\u7b1b\u5361\u5c14\u6811\u4e2d\u5e8f\u904d\u5386\u5c31\u662f\u4e00\u6bb5\u533a\u95f4\uff09\u3002\n\n\u6240\u4ee5l\u548cr\u5c31\u5206\u522b\u662fin[x]\u548cout[x]\n\n\u7136\u540e\u662f\u67e5\u8be2\u64cd\u4f5c\uff1a\n\n```cpp\nlong long query(int rt,int l,int r){//\u67e5\u8be2dfs\u5e8f\u4ecel\u5230r\u7684\u989c\u8272\u4e2a\u6570 \n\tif(t[rt].l>=l&&t[rt].r<=r){\n\t\treturn t[rt].sum;\n\t}\n\tpushdown(rt);\n\tint mid=(t[rt].l+t[rt].r)>>1;\n\tlong long rec=0;\n\tif(l<=mid)rec|=query(rt<<1,l,r);\n\tif(r>mid)rec|=query(rt<<1|1,l,r);\n\tpushup(rt);\n\treturn rec;\n}\n```\n\u4f46\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u72b6\u538b\u4e4b\u540e\u7684\u6570\u5b57\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u5206\u89e3\u5b83\uff0c\u8fd9\u91cc\u6709\u4e24\u79cd\u5199\u6cd5\uff1a\n\u7b2c\u4e00\u79cd\u6bd4\u8f83\u76f4\u89c2\uff0c\u4f46\u6709\u4e00\u4e9b\u6162\n\n```cpp\nwhile(res) {\n                s += res&1;\n                res >>= 1;\n            }\n```\n\u5b9e\u9645\u601d\u60f3\u5c31\u662f\u6309\u4f4d\u4e0e\u8bb0\u5f55\u7b54\u6848\n\n\u8fd8\u6709\u4e00\u79cd\u662f\u7528lowbit\uff0c\u6ca1\u5b66\u8fc7\u6811\u72b6\u6570\u7ec4\u7684\u8bdd\u53ef\u4ee5\u5148\u53bb\u770b\u4e00\u4e0b\u6811\u72b6\u6570\u7ec4\u3002\n\u8fd4\u56de\u67d0\u4e00\u4e2a\u6570\u4e8c\u8fdb\u5236\u4e0b\u7b2c\u4e00\u4e2a1\u6240\u4ee3\u8868\u7684\u503c\uff0c**\u6ce8\u610f**\uff1a\u662f\u503c\uff0c\u4e0d\u662f\u4f4d\u7f6e\n\n```cpp\nlong long lowbit(long long x){\n\treturn x&(-x);\n}\n```\n\n```\n\tfor(long long j=num;j>0;j-=lowbit(j))ans++;\n```\n\u7136\u540e\u63a5\u7ed3\u675f\u4e86\uff01\n\n\u4e0b\u9644AC\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nint read(){\n\tchar s;\n\tint x=0,f=1;\n\ts=getchar();\n\twhile(s<'0'||s>'9'){\n\t\tif(s=='-')f=-1;\n\t\ts=getchar();\n\t}\n\twhile(s>='0'&&s<='9'){\n\t\tx*=10;\n\t\tx+=s-'0';\n\t\ts=getchar();\n\t}\n\treturn x*f;\n}\nstruct tree{\n\tlong long sum;\n\tlong long tag;//\u8bb0\u5f55\u8981\u4fee\u6539\u4e3a\u54ea\u4e2a\u989c\u8272 \n\tint l,r;\n}t[1600040];\nint c[400040];\nint tot=0;\nint pos[400040];//\u65f6\u95f4\u6233\u6240\u5bf9\u5e94\u7684\u70b9\nint in[400040];//\u5165\u70b9\u65f6\u95f4\u6233 \nint out[400040];//\u51fa\u70b9\u65f6\u95f4\u6233 \nstruct edge{\n\tint to,next;\n}e[800080];\nint eid=0;\nint head[400040];\nvoid insert(int u,int v){\n\teid++;\n\te[eid].to=v;\n\te[eid].next=head[u];\n\thead[u]=eid;\n}\nvoid dfs(int x,int fa){//\u7528dfs\u5e8f\u5c06\u6811\u5f62\u7ed3\u6784\u8f6c\u4e3a\u7ebf\u6027\u7ed3\u6784 \n\ttot++;\n\tin[x]=tot;\n\tpos[tot]=x;\n\tfor(int i=head[x];i+1;i=e[i].next){\n\t\tint k=e[i].to;\n\t\tif(k==fa)continue;\n\t\tdfs(k,x);\n\t}\n\tout[x]=tot;//\u5176\u5b9e\u6211\u4eecout\u8bb0\u5f55\u7684\u662f\u8be5\u5b50\u6811\u4e2ddfs\u5e8f\u6700\u5927\u7ed3\u70b9\u7684dfs\u5e8f\uff0c\u6240\u4ee5tot\u4e0d\u52a0\u4e00 \n\treturn;\n} \nvoid pushup(int rt){\n\tt[rt].sum=t[rt<<1].sum|t[rt<<1|1].sum;\n\treturn;\n}\nvoid pushdown(int rt){\n\tif(t[rt].tag!=0){//\u6216\u8fd0\u7b97\u4e0d\u50cf\u533a\u95f4\u548c\uff0c\u8fd9\u91cc0\u662f\u5f71\u54cd\u7b54\u6848\u7684 \n\t\tt[rt<<1].sum=t[rt].tag;\n\t\tt[rt<<1].tag=t[rt].tag;\n\t\tt[rt<<1|1].sum=t[rt].tag;\n\t\tt[rt<<1|1].tag=t[rt].tag;\n\t\tt[rt].tag=0;\n\t}\t\n\treturn;\n}\nvoid build(int rt,int l,int r){\n\tt[rt].l=l;\n\tt[rt].r=r;\n\tif(l==r){\n\t\tt[rt].sum=(long long)1<<(c[pos[l]]);//\n\t\tt[rt].tag=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(rt<<1,l,mid);\n\tbuild(rt<<1|1,mid+1,r);\n\tpushup(rt);\n\treturn;\n}\nvoid modify(int rt,int l,int r,int p){//\u5c06dfs\u5e8f\u4ecel\u5230r\u8fd9\u4e00\u533a\u95f4\u7684\u989c\u8272\u6539\u4e3ap  \u6ce8\u610f\u72b6\u538b \n\tif(t[rt].l>=l&&t[rt].r<=r){\n\t\tt[rt].sum=(long long)1<<p;//\n\t\tt[rt].tag=(long long)1<<p;//\n\t\treturn ;\n\t}\n\tint mid=(t[rt].l+t[rt].r)>>1;\n\tpushdown(rt);\n\tif(l<=mid)modify(rt<<1,l,r,p);\n\tif(r>mid)modify(rt<<1|1,l,r,p);\n\tpushup(rt);\n\treturn;\n}\nlong long query(int rt,int l,int r){//\u67e5\u8be2dfs\u5e8f\u4ecel\u5230r\u7684\u989c\u8272\u4e2a\u6570 \n\tif(t[rt].l>=l&&t[rt].r<=r){\n\t\treturn t[rt].sum;\n\t}\n\tpushdown(rt);\n\tint mid=(t[rt].l+t[rt].r)>>1;\n\tlong long rec=0;\n\tif(l<=mid)rec|=query(rt<<1,l,r);\n\tif(r>mid)rec|=query(rt<<1|1,l,r);\n\tpushup(rt);\n\treturn rec;\n}\nint n,m;\nlong long lowbit(long long x){\n\treturn x&(-x);\n}\nint main(){\n\tmemset(head,-1,sizeof(head));\n\tn=read();\n\tm=read();\n\tfor(int i=1;i<=n;i++){\n\t\tc[i]=read();\n\t}\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tx=read();\n\t\ty=read();\n\t\tinsert(x,y);\n\t\tinsert(y,x);\n\t}\n\tdfs(1,0);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tint a;\n\t\ta=read();\n\t\tif(a==1){\n\t\t\tint x,y;\n\t\t\tx=read();\n\t\t\ty=read();\n\t\t\tmodify(1,in[x],out[x],y);\n\t\t\t//cout<<query(1,in[x],in[x])<<endl;\n\t\t}\n\t\telse{\n\t\t\tint x;\n\t\t\tx=read();\n\t\t\tlong long num=query(1,in[x],out[x]);\n\t\t\tint ans=0;\n\t\t\t//cout<<num<<endl;\n\t\t\tfor(long long j=num;j>0;j-=lowbit(j))ans++;\n\t\t\tcout<<ans<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1567250019,
        "uid": 120244,
        "name": "luyan",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF620E \u3010New Year Tree\u3011"
    },
    {
        "content": "\n## \u9898\u89e3\uff1a\n\n\u6765\u6c34\u4e00\u53d1\u5176\u4ed6\u5927\u4f6c\u90fd\u6ca1\u63d0\u5230\u8fc7\u7684\u9898\u89e3\uff1a\n\n#### bitset+\u534a\u6811\u94fe\u5256\u5206\n\n\u77e5\u8bc6\u94fa\u57ab\uff1a\n\n\u5bf9$bitset$\u5bb9\u5668\u4e0d\u592a\u4e86\u89e3\u7684\u5c0f\u4f19\u4f34\u8bf7\u6233\u8fd9\u91cc\uff1a\n\n[\u8be6\u89e3bitset\u5bb9\u5668](https://www.cnblogs.com/fusiwei/p/11720118.html)\n\n\u5bf9\u6811\u94fe\u5256\u5206\u4e0d\u592a\u4e86\u89e3\u7684\u5c0f\u4f19\u4f34\u8bf7\u6233\u8fd9\u91cc\uff1a\n\n[\u6811\u94fe\u5256\u5206\u8be6\u89e3](https://www.cnblogs.com/fusiwei/p/11519470.html)\n\n~~2019.10.29\u6a21\u62df\u8d5bT3 50\u5206\u573a~~\n\n\u4e00\u5f00\u59cb\u89c9\u5f97\u7528\u6811\u94fe\u5256\u5206\u53ef\u505a\uff0c\u60f3\u5f97\u5f88\u7b80\u5355\uff0c\u540e\u6765\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\u78b0\u5230\u4e00\u5806\u95ee\u9898\u3002\u51a5\u601d\u82e6\u60f3\u5f88\u957f\u65f6\u95f4\u4e4b\u540e\uff0c\u7528\u641c\u7d22\u7edf\u8ba1\u62ff\u5230\u4e8650\u5206\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int maxn=8*1e5+10;\nint n,m;\nint a[maxn];\nint tot,head[maxn],nxt[maxn<<1],to[maxn<<1],fa[maxn];\nbool vis[70];\nvoid add(int x,int y)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nvoid update(int x,int k)\n{\n    a[x]=k;\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==fa[x])\n            continue;\n        update(y,k);\n    }\n}\nint query(int x)\n{\n    int ret=0;\n    if(!vis[a[x]])\n    {\n        vis[a[x]]=1;\n        ret++;\n    }\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==fa[x])\n            continue;\n        ret+=query(y);\n    }\n    return ret;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&a[i]);\n    for(int i=1;i<n;i++)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        add(u,v);\n        add(v,u);\n        fa[v]=u;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int opt;\n        scanf(\"%d\",&opt);\n        int v,c;\n        if(opt==1)\n        {\n            scanf(\"%d%d\",&v,&c);\n            update(v,c);\n        }\n        else\n        {\n            scanf(\"%d\",&v);\n            memset(vis,0,sizeof(vis));\n            printf(\"%d\\n\",query(v));\n        }\n    }\n    return 0;\n}\n```\n\n\u540e\u6765\u770b\u5230\u6b63\u89e3\u662f\u7528\u72b6\u6001\u538b\u7f29\u52a0DFS\u5e8f\u8f6c\u7ebf\u6bb5\u6811\u8fc7\u7684\u3002\n\n\u6211\u6ca1\u6709\u6539\u53d8\u6b63\u89e3\u7684\u601d\u8def\uff0c\u53ea\u662f\u5728\u5b9e\u73b0\u65b9\u5f0f\u4e0a\u53d8\u4e86\u4e00\u4e0b\u82b1\u6837\u3002\n\n\u5927\u5bb6\u662f\u7528long long\u8fdb\u884c\u72b6\u538b\u7684\u3002\u6211\u4f7f\u7528\u4e86bitset\u5bb9\u5668\u3002\u5927\u5bb6\u662f\u7528DFS\u8bb0\u5f55\u4e86DFS\u5e8f\u7684\u4e24\u4e2a\u65f6\u95f4\u6233\u8fdb\u884c\u67e5\u8be2/\u4fee\u6539\u7684\u3002\u6211\u4f7f\u7528\u7684\u662f\u6811\u94fe\u5256\u5206\u9884\u5904\u7406\u64cd\u4f5c\u4e2d\u7684size\u6570\u7ec4\u8fdb\u884c\u5b9e\u73b0\u7684\u3002\n\n\u601d\u8def\uff1a\u8f93\u5165\u6570\u636e\u5efa\u7acb\u539f\u59cb\u6811\uff0c\u7136\u540e\u5728\u8fdb\u884c\u4e24\u6b21DFS\uff08\u4e00\u6b21\u5f53\u7136\u53ef\u4ee5\uff0c\u4f46\u56e0\u4e3a\u6211\u76f4\u63a5\u7528\u7684\u6811\u94fe\u5256\u5206\u7684\u677f\u5b50\uff0c\u5c31\u61d2\u5f97\u6539\u4e86\uff09\u8dd1\u51fasize\u6570\u7ec4\u548cid\u3001idx\u6570\u7ec4\uff0c\u8fd9\u4e24\u4e2a\u6570\u7ec4\u6784\u5efa\u4e86\u4e00\u4e2a\u5b8c\u6574\u3001\u53ef\u590d\u7684\u6620\u5c04\u5173\u7cfb\u3002\u7136\u540e\u4ee5\u6b64\u5efa\u7acb\u7ebf\u6bb5\u6811\u3002\u5176\u4e2d**bitset\u5bb9\u5668\u7684\u6bcf\u4f4d\u8868\u793a\u8fd9\u79cd\u989c\u8272\u6709\u8fd8\u662f\u6ca1\u6709**\uff0c\u6240\u4ee5\u6700\u540e\u53ea\u9700\u8981\u7edf\u8ba1bitset\u5bb9\u5668\u4e2d1\u7684\u4e2a\u6570\u5c31\u53ef\u4ee5\u3002\u7701\u53bb\u4e86\u7528lowbit\u8fd0\u7b97\u8fdb\u884c\u65701\u7684\u64cd\u4f5c\u3002\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u66f4\u65b0\uff0c\u6211\u4eec\u91c7\u7528\u4e86\u4f4d\u8fd0\u7b97\u4e2d\u7684**\u6216\u8fd0\u7b97**\uff0c\u6839\u636ebitset\u5bb9\u5668\u7684\u6027\u8d28\uff0c\u6216\u8fd0\u7b97\u662f\u53ef\u4ee5\u5e94\u7528\u4e8ebitset\u5bb9\u5668\u4e0a\u7684\uff0c\u5c31\u6210\u529f\u5730\u628a\u7ebf\u6bb5\u6811\u7684\u4e24\u4e2a\u72b6\u6001\u5408\u5e76\u5230\u4e00\u8d77\u3002\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u67e5\u8be2/\u4fee\u6539\u533a\u95f4\uff0c\u5f88\u660e\u663e\uff0c\u5b83\u5728\u533a\u95f4\u4e0a\u7684\u8303\u56f4\u5c31\u662f$[id[x],id[x]+size[x]-1]$\uff0c\u5982\u6709\u4e0d\u61c2\u8bf7\u53c2\u7167\u4e0a\u9762\u7684\u6811\u94fe\u5256\u5206\u535a\u5ba2\u8865\u4e60\u3002\n\n\u5b8c\u6574AC\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<bitset>\n#define lson pos<<1\n#define rson pos<<1|1\nusing namespace std;\nconst int maxn=4*1e5+10;\nchar *p1,*p2,buf[100000];\n#define nc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++)\nint read()\n{\n    int x=0;\n    char ch=nc();\n    while(ch>47)\n        x=(((x<<2)+x)<<1)+ch-48,ch=nc();\n    return x;\n}\nint n,m,a[maxn],cnt;\nint tot,head[maxn],nxt[maxn<<1],to[maxn<<1];\nint fa[maxn],id[maxn],idx[maxn],size[maxn];\nint lazy[maxn<<2];\nbitset<64> tree[maxn<<2];\nvoid add(int x,int y)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nvoid dfs1(int x,int f)\n{\n    fa[x]=f;\n    size[x]=1;\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==f)\n            continue;\n        dfs1(y,x);\n        size[x]+=size[y];\n    }\n}\nvoid dfs2(int x)\n{\n    id[x]=++cnt;\n    idx[cnt]=x;\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==fa[x])\n            continue;\n        dfs2(y);\n    }\n}\nvoid build(int pos,int l,int r)\n{\n    int mid=(l+r)>>1;\n    if(l==r)\n    {\n        tree[pos].set(a[idx[l]]);\n        return;\n    }\n    build(lson,l,mid);\n    build(rson,mid+1,r);\n    tree[pos]=tree[lson]|tree[rson];\n}\nvoid mark(int pos,int l,int r,int k)\n{\n    lazy[pos]=k;\n    tree[pos].reset();\n    tree[pos].set(k);\n}\nvoid pushdown(int pos,int l,int r)\n{\n    int mid=(l+r)>>1; \n    if(!lazy[pos]) \n        return;\n    mark(lson,l,mid,lazy[pos]);\n    mark(rson,mid+1,r,lazy[pos]);\n    lazy[pos]=0;\n}\nvoid update(int pos,int l,int r,int x,int y,int k)\n{\n    int mid=(l+r)>>1;\n    if(x<=l && r<=y)\n    {\n        mark(pos,l,r,k);\n        return;\n    }\n    pushdown(pos,l,r);\n    if(x<=mid)\n        update(lson,l,mid,x,y,k);\n    if(y>mid)\n        update(rson,mid+1,r,x,y,k);\n    tree[pos]=tree[lson]|tree[rson];\n}\nbitset<64> query(int pos,int l,int r,int x,int y)\n{\n    int mid=(l+r)>>1;\n    bitset<64> ret;\n    if(x<=l && r<=y)\n        return tree[pos];\n    pushdown(pos,l,r);\n    if(x<=mid)\n        ret|=query(lson,l,mid,x,y);\n    if(y>mid)\n        ret|=query(rson,mid+1,r,x,y);\n    return ret;\n}\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=n;i++)\n        a[i]=read();\n    for(int i=1;i<n;i++)\n    {\n        int u,v;\n        u=read(),v=read();\n        add(u,v);\n        add(v,u);\n    }\n    dfs1(1,0);\n    dfs2(1);\n    build(1,1,n);\n    for(int i=1;i<=m;i++)\n    {\n        int opt,v,c;\n        opt=read();\n        if(opt==1)\n        {\n            v=read();c=read();\n            update(1,1,n,id[v],id[v]+size[v]-1,c);\n        }\n        else \n        {\n            v=read();\n            printf(\"%d\\n\",query(1,1,n,id[v],id[v]+size[v]-1).count());\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1572333258,
        "uid": 175131,
        "name": "\u5085\u601d\u7ef4666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF620E \u3010New Year Tree\u3011"
    },
    {
        "content": " ~~\u56e0\u4e3a\u7ea2\u8272\u7684MikeDuke\u53d8\u6210\u4e86\u6a59\u8272\u7684MikeDuke~~\n \n ~~\u6240\u4ee5\u6211\u6765\u6c34\u9898\u89e3\u4e86\u3002\u3002~~\n \n##  \u73c2\u5b66\u7684\u529b\u91cf\u662f\u6709\u6781\u9650\u7684\uff01\n\n\u8fd9\u9898\u4e00\u773c\u73c2\u5b66\u9898\uff0c\u7136\u800c\u88ab\u6bd2\u7624\u51fa\u9898\u4eba\u5361\u4e86\u3002\u3002\n\n\u5728\u653e\u51fa\u6b63\u89e3\u4e4b\u524d\uff0c\u6211\u63d0\u4f9b\u4e00\u4efd\u4e11\u964b\u4e0d\u582a\uff0c\u5e38\u6570\u5de8\u5927\u7684\u73c2\u5b66\u4ee3\u7801\u4f9b\u5404\u4f4d\u795e\u7287\u53c2\u8003\n\n```cpp\n#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define M 1000005\n \n \ninline int read()\n{\n\tint x = 0, f = 1; char ch = getchar();\n\twhile (!isdigit(ch)) { if (ch == '-') f = -1; ch = getchar(); }\n\twhile (isdigit(ch)) { (x *= 10) += ch - '0'; ch = getchar(); }\n\treturn x * f;\n}\n \nint n, cnt, m, opt, t1, t2;\n \nint col[M], dfn[M], siz[M], ver[M];\n \nvector<int> G[M];\n \ninline void add_edge(int u, int v)\n{\n\tG[u].push_back(v);\n\tG[v].push_back(u);\n}\n \nstruct Node\n{\n\tint l,r;\n\tmutable int v;\n\tNode(int L, int R=-1, int V=0):l(L), r(R), v(V) {}\n\tbool operator<(const Node& x) const\n\t{\n\t\treturn l < x.l;\n\t}\n};\n \nset<Node> s;\n \ntypedef set<Node>::iterator IT;\n \ninline IT split(int pos)\n{\n\tIT it = --s.upper_bound(Node(pos));\n\tif (it->l == pos) return it;\n\tint ls = it->l, rs = it->r, val = it->v;\n\ts.erase(it); s.insert(Node(ls, pos - 1, val));\n\treturn s.insert(Node(pos, rs, val)).first;\n}\n \ninline void assign(int l, int r, int v)\n{\n\tIT itr = split(r + 1), itl = split(l);\n\ts.erase(itl, itr);\n\ts.insert(Node(l, r, v));\n}\n \nvoid dfs(int u, int c_fa)\n{\n\tsiz[u] = 1;\n\tdfn[u] = ++cnt;\n\tver[cnt] = u;\n\tint sz = G[u].size();\n\tfor (int i = 0; i < sz; i++)\n\t{\n\t\tint v = G[u][i];\n\t\tif (v == c_fa) continue;\n\t\tdfs(v, u);\n\t\tsiz[u] += siz[v];\n\t}\n}\n \ninline int query(int u)\n{\n\tIT itr = split(dfn[u] + siz[u]), itl = split(dfn[u]);\n\tint cnt[65] = {}, ans = 0;\n\tfor (IT it = itl; it != itr; it++)\n\t{\n\t\tif (!cnt[it->v]) ans++;\n\t\tcnt[it->v]++;\n\t}\n\treturn ans;\n}\n \nint main()\n{\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tcol[i] = read();\n\t}\n\t\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tadd_edge(read(), read());\n\t}\n\t\n \tdfs(1, 0);\n \n \tfor (int i = 1; i <= n; i++)\n\t{\n\t\tint p = ver[i];\n\t\ts.insert( Node(dfn[p], dfn[p], col[p]) );\n\t}\n\t\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\topt = read(), t1 = read();\n\t\tif (opt == 1)\n\t\t{\n\t\t\tt2 = read();\n\t\t\tassign(dfn[t1], dfn[t1] + siz[t1] - 1, t2);\n\t\t}\n\t\tif (opt == 2)\n\t\t{\n\t\t\tprintf(\"%d\\n\", query(t1));\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```\ntime limit exeeded on test 67..\n\n~~\u5982\u679c\u80fd\u5f00O2\u6211\u5c06\u7edd\u6740\uff0c\u53ef\u60dc\u5f00\u4e0d\u5f97~~\n\n\n------------\n\n\n# \u90a3\u6211\u4eec\u6765\u770b\u6b63\u89e3\n\n\u6211\u5728\u8bfb\u9898\u7684\u65f6\u5019\u5076\u7136\u53d1\u73b0\u4e86\n```\n1 <= c[i] <= 60\n```\n\u6211\u53c8\u6070\u5de7\u60f3\u5230\u4e86\n```\n1 << 60 \u2248 long long\u4e0a\u9650\n```\n\u90a3\u4e48\u8fd9\u8bf4\u660e\u53ef\u4ee5\u4f7f\u7528**\u72b6\u6001\u538b\u7f29**\n\n\n------------\n\n\n\u60f3\u5fc5\u505a\u8fd9\u9053\u9898\u7684\u795e\u7287\u4eec\u90fd\u719f\u7ec3\u638c\u63e1**\u6811\u94fe\u5256\u5206**\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8f7b\u6613\u77e5\u9053\u5bf9**\u4ee5\u4e00\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811**\u8fdb\u884c\u5947\u2642\u602a\u7684\u64cd\u4f5c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728**dfn\u5e8f**\u4e0a\uff0c\u5bf9\u4e00\u6bb5**\u8fde\u7eed\u533a\u95f4**\u8fdb\u884c\u5947\u2642\u602a\u7684\u64cd\u4f5c\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u5bf9**\u4ee5$u$\u4e3a\u6839\u7684\u5b50\u6811**\u8fdb\u884c\u64cd\u4f5c\u7b49\u4ef7\u5728**dfn\u5e8f**\u4e0a\u5bf9\u95ed\u533a\u95f4 $(dfn[u], dfn[u] + siz[u] - 1)$\u8fdb\u884c\u64cd\u4f5c\n\ndfn\u5e8f\u5217\u53ef\u4ee5\u7528**\u7ebf\u6bb5\u6811**\u7ef4\u62a4\n\n\n------------\n\u5047\u8bbe$dat$\u7528\u6765\u5b58\u50a8**\u4e00\u6bb5\u533a\u95f4\u4e0a\u7684\u989c\u8272\u4fe1\u606f**\n\n\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u65b9\u6cd5\n\n#### $dat$\u7684\u7b2c$i$\u4f4d\u662f$1$\uff0c\u5219$dat$\u6240\u8868\u793a\u7684\u533a\u95f4\u5c31\u6709$i$\u8fd9\u79cd\u989c\u8272\n\n\n------------\n### \u5982\u4f55$pushup$\n\n\u60f3\u5fc5\u5404\u4f4d\u795e\u7287\u719f\u7ec3\u638c\u63e1\u4f4d\u8fd0\u7b97\u7684\u5404\u79cd\u6280\u5de7\n\n\u90a3\u4e48\u5c31\u5f88\u5bb9\u6613\u5f97\u5230\u4ee5\u4e0b\u5f0f\u5b50\n\ndat[pos] = dat[pos<<1] **|** dat[pos<<1|1]\n\n\u5de6\u53f3\u5b50\u533a\u95f4\u4efb\u4f55\u4e00\u4e2a\u6709\u4e86\u67d0\u79cd\u989c\u8272\uff0c\u90a3\u4e48\u6bcd\u533a\u95f4\u4e00\u5b9a\u4e5f\u6709\u8fd9\u79cd\u989c\u8272\uff0c\u6240\u4ee5\u4f7f\u7528\u4f4d\u8fd0\u7b97\u4e2d\u7684**\u6216**\n\n\n------------\n### \u5982\u4f55$pushdown$\n\n$mark[pos]$\u8868\u793a$pos$\u4ee3\u8868\u7684\u533a\u95f4\u7684\u6807\u8bb0\n\n\u90a3\u4e48\n\n$mark[pos<<1] = mark[pos<<1|1] = mark[pos]$\n\n$dat[pos<<1] = dat[pos<<1|1] = mark[pos]$\n\n\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\n\n\n------------\n### \u6700\u540e\uff0c\u5b8c\u6574\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define M 400005\n\ninline int read()\n{\n\tint x = 0, f = 1; char ch = getchar();\n\twhile (!isdigit(ch)) { if (ch == '-') f = -1; ch = getchar(); }\n\twhile (isdigit(ch)) { (x *= 10) += ch - '0'; ch = getchar(); }\n\treturn x * f;\n}\n\nint n, m, cnt, opt, t1, t2;\nint l_[M<<2], r_[M<<2], siz[M], ver[M], dfn[M], col[M];\nlong long mark[M<<2], dat[M<<2];\n\nvector<int> G[M];\n\ninline void add_edge(int u, int v)\n{\n\tG[u].push_back(v);\n\tG[v].push_back(u);\n}\n\ninline int count(long long val) // \u4e00\u4e2a\u72b6\u6001\u4e2d\u6709\u591a\u5c11\u4e2a1\uff0c\u5373\u4e0d\u540c\u7684\u989c\u8272\u6570\n{\n\tint res = 0;\n\twhile (val)\n\t{\n\t\tif (val & 1) res++;\n\t\tval >>= 1;\n\t}\n\treturn res;\n}\n\ninline void push_down(int pos)\n{\n\tif (mark[pos] != 0)\n\t{\n\t\tmark[pos<<1] = mark[pos<<1|1] = mark[pos];\n\t\tdat[pos<<1] = dat[pos<<1|1] = mark[pos];\n\t\tmark[pos] = 0;\n\t}\n}\n\nvoid build(int pos, int l, int r)\n{\n\tl_[pos] = l, r_[pos] = r;\n\tif (l == r)\n\t{\n\t\tdat[pos] = 1ll << col[ver[l]]; // \u76f4\u63a5\u5c06\u72b6\u6001\u4e2d\u7684\u7b2ccol\u4f4d\u53d8\u62101\uff0c\u8868\u793a\u6709\u8fd9\u79cd\u989c\u8272\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(pos<<1, l, mid);\n\tbuild(pos<<1|1, mid + 1, r);\n\tdat[pos] = dat[pos<<1] | dat[pos<<1|1];\n}\n\nvoid upd(int pos, int l, int r, int c)\n{\n\tif (l_[pos] >= l && r_[pos] <= r)\n\t{\n\t\tmark[pos] = dat[pos] = 1ll << c;\n\t\treturn;\n\t}\n\tpush_down(pos);\n\tint mid = (l_[pos] + r_[pos]) >> 1;\n\tif (l <= mid) upd(pos<<1, l, r, c);\n\tif (r > mid) upd(pos<<1|1, l, r, c);\n\tdat[pos] = dat[pos<<1] | dat[pos<<1|1];\n}\n\nlong long query(int pos, int l, int r)\n{\n\tif (l_[pos] >= l && r_[pos] <= r)\n\t{\n\t\treturn dat[pos];\n\t}\n\tlong long ans = 0;\n\tpush_down(pos);\n\tint mid = (l_[pos] + r_[pos]) >> 1;\n\tif (l <= mid) ans |= query(pos<<1, l, r);\n\tif (r > mid) ans |= query(pos<<1|1, l, r);\n\tdat[pos] = dat[pos<<1] | dat[pos<<1|1];\n\treturn ans; // query\u8fd4\u56de\u7684\u662f\u538b\u7f29\u540e\u7684\u72b6\u6001\n}\n\nvoid dfs(int u, int c_fa)\n{\n\tsiz[u] = 1, dfn[u] = ++cnt, ver[cnt] = u;\n\tint sz = G[u].size();\n\tfor (int i = 0; i < sz; i++)\n\t{\n\t\tint v = G[u][i];\n\t\tif (v == c_fa) continue;\n\t\tdfs(v, u);\n\t\tsiz[u] += siz[v];\n\t}\n}\n\nint main()\n{\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; i++)\n\t\tcol[i] = read();\n    for (int i = 1; i < n; i++)\n\t\tadd_edge(read(), read());\n\n\tdfs(1, 0);\n\t\n\tbuild(1, 1, n);\n\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\topt = read(), t1 = read();\n\t\tif (opt == 1)\n\t\t{\n\t\t\tt2 = read();\n\t\t\tupd(1, dfn[t1], dfn[t1] + siz[t1] - 1, t2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"%d\\n\", count(query(1, dfn[t1], dfn[t1] + siz[t1] - 1)));\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1581562497,
        "uid": 150218,
        "name": "MikeDuke",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF620E \u3010New Year Tree\u3011"
    },
    {
        "content": "## **@Fuko_Ibuki \u5927\u4f6c\u8bf4\u6b64\u9898\u975e\u5e38\u6c34\uff0c\u7136\u540e\u6211\u5c31\u6765\u505a\u4e86\u4e00\u4e0b**\n\n**\u8fd9\u662f\u4e00\u9053\u975e\u5e38dark\u7684\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u770b\u5230\u8fd9\u9053\u9898\u7684\u989c\u8272\u6700\u591a\u53ea\u670960\u79cd\uff0c\u6240\u4ee5\u7406\u6240\u5e94\u5f53\u7684\u60f3\u5230\u7a81\u7834\u53e3\u5c31\u662f\u989c\u8272\uff0c60\u7684\u8303\u56f4\u53ef\u4ee5\u8003\u8651\u72b6\u538b\uff0c\u5176\u5b9e\u6211\u4eec\u5728\u4e4e\u7684\u53ea\u662f\u6709\u6216\u8005\u6ca1\u6709\u8be5\u989c\u8272\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u6216\u8fd0\u7b97\u6765\u5408\u5e76\u4e24\u4e2a\u5757\uff0c\u8fd9\u81ea\u7136\u662f\u7ebf\u6bb5\u6811\u7684\u601d\u8def\uff0c\u56e0\u4e3a\u53ea\u6709\u4fee\u6539\u5b50\u6811\u6216\u8005\u67e5\u8be2\u5b50\u6811\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u76f4\u63a5dfs\u5e8f\u5c31\u53ef\u4ee5\u5566~\u5bf9dfs\u5e8f\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u652f\u6301\u533a\u95f4\u4fee\u6539\u533a\u95f4\u6216\uff0c\u7edf\u8ba1\u533a\u95f4\u6216\u4e4b\u540e\u5f97\u5230\u7684\u6570\u5728\u4e8c\u8fdb\u5236\u4e0b1\u7684\u4e2a\u6570\uff0c\u8fd9\u5373\u4e3a\u7b54\u6848**\n\n**\u4ee3\u7801\u5982\u4e0b**\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define lson root<<1\n#define rson root<<1|1\nusing namespace std;\n\nstruct node\n{\n\tint l,r;\n\tlong long sum,lazy;\n} tr[1600010];\n\nvector<int> g[400010];\nint dfsn[400010],c[400010],w[400010],size[400010],tot;\n\nint get_bit(long long x)\n{\n\tint ans=0;\n\twhile(x)\n\t{\n\t\tif(x&1)\n\t\t{\n\t\t\tans++;\n\t\t}\n\t\tx>>=1;\n\t}\n\treturn ans;\n}\n\nvoid push_up(int root)\n{\n\ttr[root].sum=tr[lson].sum|tr[rson].sum;\n}\n\nvoid push_down(int root)\n{\n\ttr[lson].sum=tr[root].lazy;\n\ttr[rson].sum=tr[root].lazy;\n\ttr[lson].lazy=tr[root].lazy;\n\ttr[rson].lazy=tr[root].lazy;\n\ttr[root].lazy=-1;\n}\n\nvoid build(int root,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\ttr[root].l=l;\n\t\ttr[root].r=r;\n\t\ttr[root].lazy=-1;\n\t\ttr[root].sum=1ll<<c[l];\n\t\treturn ;\n\t}\n\ttr[root].l=l;\n\ttr[root].r=r;\n\ttr[root].lazy=-1;\n\tint mid=(l+r)>>1;\n\tbuild(lson,l,mid);\n\tbuild(rson,mid+1,r);\n\tpush_up(root);\n}\n\nvoid update(int root,int l,int r,int val)\n{\n\tif(tr[root].l==l&&tr[root].r==r)\n\t{\n\t\ttr[root].sum=1ll<<val;\n\t\ttr[root].lazy=1ll<<val;\n\t\treturn ;\n\t}\n\tif(~tr[root].lazy)\n\t{\n\t\tpush_down(root);\n\t}\n\tint mid=(tr[root].l+tr[root].r)>>1;\n\tif(l>mid)\n\t{\n\t\tupdate(rson,l,r,val);\n\t}\n\telse\n\t{\n\t\tif(r<=mid)\n\t\t{\n\t\t\tupdate(lson,l,r,val);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tupdate(lson,l,mid,val);\n\t\t\tupdate(rson,mid+1,r,val);\n\t\t}\n\t}\n\tpush_up(root);\n}\n\nlong long query(int root,int l,int r)\n{\n\tif(tr[root].l==l&&tr[root].r==r)\n\t{\n\t\treturn tr[root].sum;\n\t}\n\tif(~tr[root].lazy)\n\t{\n\t\tpush_down(root);\n\t}\n\tint mid=(tr[root].l+tr[root].r)>>1;\n\tif(l>mid)\n\t{\n\t\treturn query(rson,l,r);\n\t}\n\telse\n\t{\n\t\tif(r<=mid)\n\t\t{\n\t\t\treturn query(lson,l,r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn query(lson,l,mid)|query(rson,mid+1,r);\n\t\t}\n\t}\n}\n\nvoid dfs(int now,int f)\n{\n\tdfsn[now]=++tot;\n\tsize[now]=1;\n\tc[tot]=w[now];\n\tfor(int i=0;i<g[now].size();i++)\n\t{\n\t\tif(g[now][i]==f)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tdfs(g[now][i],now);\n\t\tsize[now]+=size[g[now][i]];\n\t}\n}\n\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&w[i]);\n\t}\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint from,to;\n\t\tscanf(\"%d%d\",&from,&to);\n\t\tg[from].push_back(to);\n\t\tg[to].push_back(from);\n\t}\n\t\n\tdfs(1,0);\n\tbuild(1,1,n);\n\t\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint kd;\n\t\tscanf(\"%d\",&kd);\n\t\tif(kd==1)\n\t\t{\n\t\t\tint v,val;\n\t\t\tscanf(\"%d%d\",&v,&val);\n\t\t\tupdate(1,dfsn[v],dfsn[v]+size[v]-1,val);\n\t\t}\n\t\tif(kd==2)\n\t\t{\n\t\t\tint v;\n\t\t\tscanf(\"%d\",&v);\n\t\t\tprintf(\"%d\\n\",get_bit(query(1,dfsn[v],dfsn[v]+size[v]-1)));\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1524967433,
        "uid": 48740,
        "name": "Styx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF620E \u3010New Year Tree\u3011"
    },
    {
        "content": "# \u4f4d\u8fd0\u7b97.dfs\u5e8f.\u7ebf\u6bb5\u6811\n# \u9898\u9762\n- \u7ed9\u5b9a\u4e00\u4e2a\u6811\uff0c\u6811\u4e0a\u6709\u989c\u8272\uff0c\u4fee\u6539\u5b50\u6811\uff0c\u6c42\u5b50\u6811\u4e2d\u989c\u8272\u7684\u6570\u91cf\n# Solution\n- #### \u5b50\u6811\u4fee\u6539\uff0c\u5b50\u6811\u6c42\u548c\uff0cdfs\u5e8f\u7684\u77e5\u8bc6\uff08\u7c7b\u4f3c\u533a\u95f4\u4fee\u6539\u533a\u95f4\u6c42\u548c\uff09\n- #### \u8003\u8651\u5230\u989c\u8272\u7684\u4e2a\u6570\u95ee\u9898\uff0c\u5229\u7528\u4f4d\u8fd0\u7b97\u8fdb\u884c\u8868\u793a\u3002\n- #### \u6700\u540e\u7b54\u6848\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff0c$\\ 1\\ $\u8868\u793a\u6709\u8be5\u79cd\u989c\u8272\uff0c$\\ 0\\ $\u8868\u793a\u6ca1\u6709\uff0c\n- #### \u56e0\u6b64\u8fd8\u9700\u8003\u8651\u7b54\u6848$\\ 1\\ $\u7684\u6570\u91cf\u3002\n- #### dfs\u5e8f\u95ee\u9898\u81ea\u7136\u7528\u5230\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\u3002\n\n## \u5177\u4f53\u4ecb\u7ecd\u4e00\u4e0b\u4f4d\u8fd0\u7b97\uff0c\u548c\u4e00\u4e9b\u5c0f\u9519\u8bef\n- #### \u65b9\u6848\u603b\u6570\u4e0d\u662f\u4e24\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u65b9\u6848\u6570\u7684\u7b80\u5355\u76f8\u52a0\uff0c\u800c\u662f\u201c|\u201d\uff08\u6216\uff09\n- #### \u7b54\u6848\u7ef4\u62a4\u7684\u662f\u989c\u8272\u7684\u4e2a\u6570\uff0c\u4f46\u4e0d\u662f\u5177\u4f53\u6570\u503c\n- #### \u5173\u4e8e\u7b54\u6848$\\ 1\\ $\u7684\u4e2a\u6570,\u53ef\u4ee5\u5229\u7528\u5feb\u901f\u5e42\n- #### \u4e5f\u53ef\u5229\u7528$\\ lowbit\\ $,\u4f5c\u7528\u662f\u5f97\u5230\u6700\u540e$\\ 1\\ $\u7684\u4f4d\u7f6e\u4e0a\u8868\u793a\u7684\u6570\u3002\n- #### \u5efa\u6811\u7684\u65f6\u5019\u7279\u522b\u8bb0\u4f4f\u9700\u8981$\\ long \\ long \\ $\u7684\u5730\u65b9\n![](https://cdn.luogu.com.cn/upload/image_hosting/52rrh7w8.png)\n\n### [\u66f4\u52a0\u8be6\u7ec6\u7684\u5185\u5bb9](https://www.cnblogs.com/yrjns/p/11246163.html)\n---\n# Code\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <algorithm>\n#include <vector>\n#define clr(a,b) memset(a,b,sizeof(a))\nusing namespace std;\ntypedef long long ll;\nconst int manx=1e6+10;\nconst int mamx = 1e7 + 11;\nconst int B = 1e6 + 11;\nconst int mod = 1e9 + 7;\nconst int inf = 0x3f3f3f3f;\ninline int read() {\n  char c = getchar(); int x = 0, f = 1;\n  for ( ; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n  for ( ; isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n  return x * f;\n}\nstruct nodee{\n\tint l,r;\n\tll sum;\n\tll add;\n}e[manx<<2+2];\nint clr[manx<<1];\nstruct node{\n    int u;\n    int v;\n    int nxt;\n    int w;\n}ee[manx];\nint head[manx],js,l[manx],r[manx],cnt,n,m,dfn[manx];\nint add(int u,int v){\n    ee[++cnt].u = u;\n    ee[cnt].nxt = head[u];\n    ee[cnt].v = v;\n    //e[cnt].w = w;\n    head[u] = cnt;\n}\ninline void init(){\n    cnt=js=0;\n    clr(head,-1);\n}\n//\u5927\u6cd5\u5e08 \nvoid dfs(int u, int pre){ \n    js++;\n    l[u] = js;\n    dfn[js] = u;    \n    for(int i = head[u];~i;i = ee[i].nxt){\n        int v = ee[i].v;\n        if( v == pre ) continue;\n        dfs(v,u);\n    }\n    r[u] = js; //\u6211\u4eec\u53ef\u4ee5\u53ea\u8bb0\u5f55\u4ed6\u7684\u5165\u6bb5\uff0c\u5c3e\u7aef\u90a3\u4e2a\u4e0d\u5fc5\u91cd\u590d \n\treturn ; \n}\n//\u7ebf\u6bb5\u6811 \nvoid uploat(int s){//\u4e0a\u4f20 \n\te[s].sum = 0;\n\tif(e[s<<1].l) e[s].sum |=e[s<<1].sum ;\n\tif(e[s<<1|1].l ) e[s].sum |=e[s<<1|1].sum ;\n}\nvoid downloat(int i){\n\tif(e[i].add !=0){\n\t\tll s = e[i].add ;//\u4e0d\u8981\u7528int \u7528ll\uff0c\u4f5c\u8005\u5c31\u5728\u8fd9\u5361\u4e86\u4e00\u5929 \n\t\te[i<<1].sum = s;\n\t\te[i<<1].add = s;\n\t\te[i<<1|1].add = s;\t\n\t\te[i<<1|1].sum = s;\n\t e[i].add = 0; \n\t}\n}\nvoid build_up (int rt,int l,int r){\n\te[rt].l = l;e[rt].r = r;\n\tif(l == r){\n\t\te[rt].sum = (ll)1<<(clr[dfn[l]]);\n\t\te[rt].add = 0;\n\t\treturn;\n\t}\n\tint mid = (l+r) >> 1;\n\tbuild_up(rt<<1,l,mid);\n\tbuild_up(rt<<1|1,mid+1,r);\n\te[rt].sum = e[rt<<1].sum | e[rt<<1|1].sum;\n}\nvoid updata(int i,int l,int r,int add){\n\tif(e[i].l >= l && e[i].r <= r)\n\t{\n\t\te[i].sum = (ll)1<<add;\n\t\te[i].add = (ll)1<<add;\n\t\treturn;\n\t}\n\tint mid = (e[i].l  + e[i].r ) >> 1;\n\tdownloat(i);\n\tif(mid >= r)updata(i<<1,l,r,add);\n\telse if(mid <l)updata(i<<1|1,l,r,add);\n\telse updata(i<<1,l,mid,add),updata(i<<1|1,mid+1,r,add);\n\tuploat(i);\n }\nll query(int i,int l,int r)\n{\n   if(e[i].l >= l && e[i].r <= r){\n   \t   return e[i].sum ;\n   }\n   downloat(i);\n   int mid = (e[i].l +e[i].r ) >> 1;\n\tif(mid >= r)  \n\t\treturn  query(i<<1,l,r);\n\telse \n\t\tif(mid<l)\n\t\treturn  query(i<<1|1,l,r);//\u719f\u6089\u7684\u64cd\u4f5c \n\t\treturn  query(i<<1,l,mid)|query(i<<1|1,mid+1,r);\n}\nll lowbit(ll x){\n\treturn x&-x;//lowbit\u51fd\u6570 \n}\nint  ans;\nint main(){\n    n = read();\n    m = read();\n\tinit ();\n    for(int i = 1;i <= n;i ++)\n    \tclr[i] = read();\n    for(int i = 1;i <= n - 1;i ++)\n    {\n    \tint x = read(),y = read();\n    \tadd(x,y);add(y,x);\n\t} \n\tdfs(1,0);\n\tbuild_up(1,1,n);//\u5efa\u6811 \n\tfor(int i = 1;i <= m; i++)\n\t{\n\t\tint x = read();\n\t\tint y;\n\t\tint z;\n\t\tif(x == 1){\n\t\t\ty = read();z = read();\n\t\t  updata(1,l[y],r[y],z);\t\n\t\t}\n\t\telse{\n\t\t\tans = 0;y = read();\n\t\t\tll diet = query(1,l[y],r[y]);\n\t\t\twhile(diet>0){\n\t\t\t\tdiet-=lowbit(diet);\n\t\t\t\tans++;//\u5224\u65ad1\u7684\u4e2a\u6570 \n\t\t\t}\n\t\t\tcout<<ans<<endl;//\u534e\u4e3d\u6536\u573a \n\t\t}\n\t}\n\treturn 0;\n}\n```\n---\n\n# \u611f\u8c22\u89c2\u770b~~\n",
        "postTime": 1604153663,
        "uid": 230808,
        "name": "Zxsoul",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF620E \u3010New Year Tree\u3011"
    },
    {
        "content": "#### \u7ebf\u6bb5\u6811+dfs\u5e8f+\u72b6\u6001\u538b\u7f29\u641e\u5b9a\u8fd9\u9053\u9898\n\u6211\u4eec\u628a\u6bcf\u79cd\u989c\u8272k\u8bbe\u4e3a2^k\uff0c\u5148dfs\u4e00\u904d\u628a\u6811\u53d8\u6210\u533a\u95f4\uff0c\u540c\u65f6\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u3002\uff08\u6211\u7528\u7684\u662fpair\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a\u6570\u7ec4\uff09\n\n\u540c\u65f6\uff0c\u8fd9\u9053\u9898\u7684\u4ee3\u7801~~\u6bd4\u8f83~~\u957f\uff0c\u8981\u6ce8\u610f\u7ec6\u8282\u5466\u3002\uff08\u6bd4\u5982\u8bf4\u8981\u5f00 long long \uff09\n\n\u5177\u4f53\u63a8\u5bfc\u8fc7\u7a0b\u697c\u4e0b\u5df2\u7ecf\u5199\u5f97\u5f88\u8be6\u7ec6\u4e86\uff0c\u6211\u5c31\u662f\u6765\u4e0a\u4efd\u8be6\u7ec6\u6ce8\u91ca\u3001\u53ef\u8bfb\u6027\u8f83\u9ad8\u7684\u4ee3\u7801\u3002\uff08\u90a3\u91cc\u5077\u6765\u7684\u81ea\u4fe1\uff09\n```cpp\n#include<iostream>\n#include<cstdio>\n#define int long long\ntypedef unsigned long long ull;\nconst int Maxn=400010;\nusing namespace std;\n\nstruct edge{\n\tint v,nxt;\n}e[Maxn<<2];int head[Maxn],cnt;//\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n\nvoid adg(int u,int v){//\u52a0\u8fb9\u64cd\u4f5c\n\te[++cnt].v=v,e[cnt].nxt=head[u],head[u]=cnt;\n}\n\nint pos[Maxn],t;//pos\u7528\u6765\u5b58\u653edfs\u5e8f\npair<int,int>tim[Maxn];//\u7528\u6765\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f tim[i].second\u4ee3\u8868\u8fd9\u68f5\u5b50\u6811\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n\nvoid dfs(int x,int f){\n\tpos[++t]=x;//\u5b58\u50a8dfs\u5e8f\n\ttim[x].first=t;//\u8fd9\u68f5\u5b50\u6811\u7684\u6839\n\tfor(int i=head[x];i;i=e[i].nxt){//\u904d\u5386\u8fd9\u4e2a\u8282\u70b9\u7684\u8fb9\n\t\tint tmp=e[i].v;//\u5b58\u653e\u4e0b\u4e2a\u8282\u70b9\n\t\tif(tmp==f)continue;//\u4e0d\u80fd\u5f80\u56de\u8d70\n\t\tdfs(tmp,x);\n\t}\n\ttim[x].second=t;//\u8fd9\u68f5\u5b50\u6811\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n}\n\n#define ls p<<1//\u5077\u4e2a\u61d2\uff0c\u4e8b\u5148\u8bbe\u5b9a\u597d\n#define rs p<<1|1//\u548cp*2+1\u4e00\u6837\null c[Maxn];//\u539f\u5e8f\u5217\n\nstruct Stree{\n\tint l,r;ull dat,chg;\n\t#define l(x) St[x].l//\u540c\u6837\uff0c\u65b9\u4fbf\u5199\u4ee3\u7801\uff0c\u4e5f\u65b9\u4fbf\u7406\u89e3\uff08\u4ece\u54ea\u91cc\u5077\u6765\u7684\u81ea\u4fe1\uff09\n\t#define r(x) St[x].r\n\t#define d(x) St[x].dat\n\t#define c(x) St[x].chg\n}St[Maxn<<2];//\u56e0\u4e3a\u6700\u540e\u4e00\u5c42\u6709\u7a7a\u8282\u70b9\uff0c\u6240\u4ee5\u8981\u5f00\u56db\u500d\n//\u8fdb\u5165\u6700\u53ef\u7231\u7684\u7ebf\u6bb5\u6811\u90e8\u5206\nvoid build(int p,int l,int r){//\u5efa\u6811\n\tl(p)=l,r(p)=r;//\u786e\u5b9a\u5b50\u6811\u8303\u56f4\n\tif(l==r){d(p)=1ll*c[pos[l]];return;}//\u5982\u679c\u533a\u95f4\u957f\u5ea6\u4e3a\u4e00\uff0c\u4ee3\u8868\u5230\u4e86\u6700\u5e95\u5c42\uff0c\u8fd4\u56de\n\tint mid=(l+r)>>1;\n\tbuild(ls,l,mid);//\u5efa\u7acb\u5de6\u5b50\u6811\n\tbuild(rs,mid+1,r);//\u5efa\u7acb\u53f3\u5b50\u6811\n\td(p)=d(ls)|d(rs);//\u4e0a\u4f20\u4fe1\u606f\uff0c\u7531\u4e8e\u8981\u7edf\u8ba1\u989c\u8272\u4e2a\u6570\uff0c\u6240\u4ee5\u7528\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\uff08\u6216|\uff09\uff0c\u4ee3\u8868\u6709\u8fd9\u79cd\u989c\u8272\n}\n\nvoid spread(int p){//\u4e0b\u4f20\u6807\u8bb0\uff0c\u6ce8\u610f\u662f\u76f4\u63a5\u4fee\u6539\uff0c\u4e0d\u662f\u589e\u52a0\u3002\n\tif(c(p)){//\u5982\u679c\u6709\u6807\u8bb0\n\t\td(ls)=c(p),d(rs)=c(p);//\u76f4\u63a5\u4fee\u6539\u5b50\u6811\u503c\n\t\tc(ls)=c(p),c(rs)=c(p);//\u628a\u6807\u8bb0\u4e0b\u4f20\u7ed9\u5b57\u6570\n\t\tc(p)=0ll;//\u53d6\u6d88\u6807\u8bb0\n\t}\n}\n\nvoid change(int p,int l,int r,int d){//\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\n\tif(l(p)>=l&&r(p)<=r){\n\t\td(p)=d;c(p)=d;return;\n\t}//\u5982\u679c\u8986\u76d6\u533a\u95f4\uff0c\u76f4\u63a5\u6253\u6807\u8bb0\uff0c\u964d\u4f4e\u590d\u6742\u5ea6\n\tspread(p);//\u5426\u5219\u5148\u4e0b\u4f20\u6807\u8bb0\n\tint mid=(l(p)+r(p))>>1;\n\tif(l<=mid)change(ls,l,r,d);//\u5982\u679c\u5de6\u5b50\u6811\u6709\u91cd\u53e0\uff0c\u4fee\u6539\u5de6\u5b50\u6811\n\tif(r>mid) change(rs,l,r,d);//\u540c\u7406\u53ef\u8bc1\n\td(p)=d(ls)|d(rs);//\u4e0a\u4f20\u4fe1\u606f\uff0c\u7ebf\u6bb5\u6811\u6bcf\u90e8\u64cd\u4f5c\u90fd\u8981\u987a\u4fbf\u4e0a\u4f20\u4fe1\u606f\n}\n\null ask(int p,int l,int r){//\u8be2\u95ee\u64cd\u4f5c\n\tif(l(p)>=l&&r(p)<=r){\n\t\treturn d(p);\n\t}//\u5982\u679c\u5b8c\u5168\u8986\u76d6\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\n\tspread(p);//\u5426\u5219\u5148\u4e0b\u4f20\u6807\u8bb0\n\tint mid=(l(p)+r(p))>>1;\n\tull val=0;//\u4e00\u5f00\u59cb\u6ca1\u6709\u4efb\u4f55\u989c\u8272\n\tif(l<=mid)val|=ask(ls,l,r);//\u5982\u679c\u5de6\u5b50\u6811\u6709\u91cd\u53e0\uff0c\u7edf\u8ba1\u5de6\u5b50\u6811\n\tif(r>mid) val|=ask(rs,l,r);//\u5982\u679c\u53f3\u5b50\u6811\u6709\u91cd\u53e0\uff0c\u7edf\u8ba1\u53f3\u5b50\u6811\n\td(p)=d(ls)|d(rs);//\u987a\u4fbf\u4e0a\u4f20\u4fe1\u606f\n\treturn val;//\u8fd4\u56de\u989c\u8272\n}\n\nsigned main(){\n\tint n,m;\n\tscanf(\"%lld%lld\",&n,&m);\n\t\n\tfor(int i=1,tmp;i<=n;i++){\n\t\tscanf(\"%lld\",&tmp);c[i]=(1ll<<tmp);\n\t}\n\t\n\tint x,y;\n\tfor(int j=1;j<=n-1;j++){\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\tadg(x,y),adg(y,x);\n\t}\n\t\n\tdfs(1,0);build(1,1,n);\n\t\n\t#define lowbit(x) x&-x\n\tint t,v,l,r;ull ch;\n\tfor(int k=1,tmp;k<=m;k++){\n\t\tscanf(\"%lld\",&t);\n\t\tif(t==2){\n\t\t\tscanf(\"%lld\",&v);\n\t\t\tl=tim[v].first,r=tim[v].second;\n\t\t\tull temp=ask(1,l,r);int ans=0;\n\t\t\tfor(;temp;temp-=lowbit(temp))ans++;//\u7edf\u8ba1\u7b54\u6848\uff0clowbit\u662f\u6700\u540e\u4e00\u4f4d\u552f\u4e00\u7684\u6570\u4f4d\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}else{\n\t\t\tscanf(\"%lld%lld\",&v,&tmp);\n\t\t\tl=tim[v].first,r=tim[v].second,ch=(1ll<<tmp);\n\t\t\tchange(1,l,r,ch);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1583933348,
        "uid": 304572,
        "name": "_CloudySky_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF620E \u3010New Year Tree\u3011"
    },
    {
        "content": "\u86ee\u597d\u73a9\u7684\u4e00\u9053\u9898\n\n\u9996\u5148dfs\u5e8f\u53d8\u6210\u5e8f\u5217\u64cd\u4f5c\u5c31\u4e0d\u8bf4\u4e86\n\n\u8003\u8651\u5230\u989c\u8272\u6570\u6bd4\u8f83\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u989c\u8272\u6570\u72b6\u538b\uff0c\u7ef4\u62a4\u4e00\u4e2a$sum$\u8868\u793a\u989c\u8272\u96c6\u5408\uff0c\u4e0a\u4f20\u7684\u65f6\u5019\u6216\u4e00\u4e0b\u5c31\u597d\u4e86\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define fo(i, a, b) for (int i = (a); i <= (b); ++i)\n#define fd(i, a, b) for (int i = (a); i >= (b); --i)\n#define edge(i, u) for (int i = head[u], v = e[i].v; i; i = e[i].nxt, v = e[i].v)\n#define N 400005\n#define pb push_back\n#define F first\n#define S second\n#define ll long long\n#define inf 1000000007\n#define mp std::make_pair\n#define lowbit(x) (x & -x)\n#define ls (k << 1)\n#define rs (k << 1 | 1)\nint n, m, a[N], x, y, L[N], R[N], tim, ti[N], val, opt, tot;\nstruct edge{\n    int nxt, v;\n}e[N << 1];\nint head[N];\nstruct node{\n    ll sum;\n    bool tag;\n}t[N << 2];\ninline void addedge (int u, int v)\n{\n    e[++tot] = (edge) {head[u], v};\n    head[u] = tot;\n}\ninline int count (ll x)\n{\n    int ret = 0;\n    while (x) x -= lowbit(x), ++ret;\n    return ret;\n}\ninline void dfs (int u, int fa)\n{\n    L[u] = ++tim; ti[tim] = u;\n    edge(i, u)\n    {\n        if (v == fa) continue;\n        dfs(v, u);\n    }\n    R[u] = tim;\n}\ninline void pushdown (int k)\n{\n    if (t[k].tag)\n    {\n        t[k].tag = 0;\n        t[ls].sum = t[rs].sum = t[k].sum;\n        t[ls].tag = t[rs].tag = 1;\n    }\n}\ninline void build (int k, int l, int r)\n{\n    if (l == r) {t[k].sum = 1ll << a[ti[l]]; return;}\n    int mid = l + r >> 1;\n    build(ls, l, mid);\n    build(rs, mid + 1, r);\n    t[k].sum = t[ls].sum | t[rs].sum;\n}\ninline void modify (int k, int l, int r, int x, int y)\n{\n    if (x <= l && r <= y) {t[k].sum = 1ll << val; t[k].tag = 1; return;}\n    pushdown(k);\n    int mid = l + r >> 1;\n    if (x <= mid) modify(ls, l, mid, x, y);\n    if (mid < y) modify(rs, mid + 1, r, x, y);\n    t[k].sum = t[ls].sum | t[rs].sum;\n}\ninline ll query (int k, int l, int r, int x, int y)\n{\n    if (x <= l && r <= y) {return t[k].sum;}\n    pushdown(k);\n    int mid = l + r >> 1;\n    if (y <= mid) return query(ls, l, mid, x, y);\n    if (x > mid) return query(rs, mid + 1, r, x, y);\n    return query(ls, l, mid, x, y) | query(rs, mid + 1, r, x, y);\n}\nint main ()\n{\n    scanf(\"%d %d\", &n, &m);\n    fo (i, 1, n)\n        scanf(\"%d\", &a[i]);\n    fo (i, 2, n)\n    {\n        scanf(\"%d %d\", &x, &y);\n        addedge(x, y); addedge(y, x);\n    }\n    dfs(1, 0);\n    build(1, 1, n);\n    fo (I, 1, m)\n    {\n        scanf(\"%d\", &opt);\n        if (opt == 2)\n        {\n            scanf(\"%d\", &x);\n            ll ans = query(1, 1, n, L[x], R[x]);\n         //   printf(\"%d \\n\", I);\n            printf(\"%d\\n\", count(ans));\n        }\n        else\n        {\n            scanf(\"%d %d\", &x, &val);\n            modify(1, 1, n, L[x], R[x]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1540476974,
        "uid": 13137,
        "name": "HomuraCat",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF620E \u3010New Year Tree\u3011"
    },
    {
        "content": "## **@Styx \u9996\u5148\u6211\u8981\u66f4\u6b63\u4e00\u70b9,\u8fd9\u4e2a\u4eba\u624d\u662f\u5927\u4f6c,\u6211\u5f88\u83dc.**  \n\u5177\u4f53\u7684\u505a\u6cd5\u697c\u4e0b\u90fd\u8bf4\u8fc7\u4e86,\u4f46\u6211\u8fd8\u6709\u51e0\u70b9\u8981\u8bf4\u7684.  \n`\u9996\u5148\u72b6\u6001\u538b\u7f29\u7684\u65f6\u5019\u7ebf\u6bb5\u6811\u91cc\u4e00\u5b9a\u8981\u51991ll<<x,\u4e0d\u80fd\u51991<<x,\u5426\u5219\u4f1a\u7206int.`  \n`\u4e0d\u7136\u4f60\u4f1aWA\u5728\u7b2c13\u4e2a\u70b9.\u8fd9\u4e2a\u9519\u8bef\u6211\u5df2\u7ecf\u4e0d\u6b62\u72af\u8fc7\u4e00\u6b21\u4e86,\u800c\u4e14\u6bcf\u6b21\u90fd\u4e0d\u77e5\u6539\u6094.`  \n`\u8fd8\u6709\u5728\u6c42\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e2d1\u7684\u4e2a\u6570\u7684\u65f6\u5019\u4e0d\u80fd\u7528c++\u81ea\u5e26\u7684__builtin_popcount\u51fd\u6570,\u8981\u81ea\u5df1\u5199\u4e00\u4e2a.\u8fd9\u4e2a\u51fd\u6570\u53ea\u5bf9int\u6709\u6548.`  \n\u6700\u540e\u7528dfs\u5e8f\u52a0\u4e0a\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u8fc7\u4e86.\n```cpp\n#include<bits/stdc++.h> //Ithea Myse Valgulious\nnamespace chtholly{\ntypedef long long ll;\n#define re0 register int\n#define rec register char\n#define rel register ll\n#define gc getchar\n#define pc putchar\n#define p32 pc(' ')\n#define pl puts(\"\")\n/*By Citrus*/\ninline int read(){\n  re0 x=0,f=1;rec c=gc();\n  for (;!isdigit(c);c=gc()) f^=c=='-';\n  for (;isdigit(c);c=gc()) x=(x<<3)+(x<<1)+(c^'0');\n  return f?x:-x;\n  }\ninline void read(rel &x){\n  x=0;re0 f=1;rec c=gc();\n  for (;!isdigit(c);c=gc()) f^=c=='-';\n  for (;isdigit(c);c=gc()) x=(x<<3)+(x<<1)+(c^'0');\n  x=f?x:-x;\n  }\ntemplate <typename mitsuha>\ninline int write(mitsuha x){\n  if (!x) return pc(48);\n  if (x<0) x=-x,pc('-');\n  re0 bit[20],i,p=0;\n  for (;x;x/=10) bit[++p]=x%10;\n  for (i=p;i;--i) pc(bit[i]+48);\n  }\ninline char fuhao(){\n  rec c=gc();\n  for (;isspace(c);c=gc());\n  return c;\n  }\n}using namespace chtholly;\nusing namespace std;\nconst int yuzu=4e5;\ntypedef int fuko[yuzu|10];\nvector<int> lj[yuzu|10];\nint n,m,cnt;\nfuko dfn,edf,ord,a;\n\nvoid dfs(int u,int fa){\ndfn[u]=++cnt,ord[cnt]=u;\nfor (int v:lj[u]) if (v^fa) dfs(v,u);\nedf[u]=cnt;\n}\n\ntypedef ll karen[yuzu<<2|13];\nstruct segtree{\n#define le rt<<1\n#define ri le|1\n#define ls le,l,mid\n#define rs ri,mid+1,r\nkaren val,lazy;\nvoid build(int rt=1,int l=1,int r=n){\n  lazy[rt]=-1;\n  if (l==r) val[rt]=1ll<<a[ord[l]];\n  else{\n    int mid=l+r>>1;\n    build(ls),build(rs);\n    val[rt]=val[le]|val[ri];\n    }\n  }\nvoid push_down(int rt){\n  if (~lazy[rt]){\n    lazy[le]=lazy[ri]=lazy[rt];\n    val[le]=val[ri]=1ll<<lazy[rt];\n    lazy[rt]=-1;\n    }\n  }\nvoid update(int ql,int qr,int v,int rt=1,int l=1,int r=n){\n  if (ql>r||qr<l) return;\n  if (ql<=l&&qr>=r){\n    val[rt]=1ll<<v-1;\n    lazy[rt]=v-1;\n    }else{\n    int mid=l+r>>1;\n    push_down(rt);\n    update(ql,qr,v,ls),update(ql,qr,v,rs);\n    val[rt]=val[le]|val[ri];\n    }\n  }\nll query(int ql,int qr,int rt=1,int l=1,int r=n){\n  if (ql>r||qr<l) return 0;\n  if (ql<=l&&qr>=r) return val[rt];\n  int mid=l+r>>1;\n  push_down(rt);\n  return query(ql,qr,ls)|query(ql,qr,rs);\n  }\n}my_;\n\n#define all(u) dfn[u],edf[u]\nint _bp(ll x){//\u770b\u5f97\u51fa\u5427,__builtin_popcount\u7684\u7b80\u79f0.\nint ans=0;\nfor (;x;x&=x-1) ++ans;\nreturn ans;\n}\n\nint main(){\nre0 i;\nn=read(),m=read();\nfor (i=1;i<=n;++i) a[i]=read()-1;\nfor (i=1;i<n;++i){\n  int u=read(),v=read();\n  lj[u].push_back(v);\n  lj[v].push_back(u);\n  }\ndfs(1,0),my_.build();\nfor (;m--;){\n  int op=read(),u=read();\n  if (op==1){ \n    my_.update(all(u),read());\n    }\n  else{\n    write(_bp(my_.query(all(u)))),pl;\n    }\n  }\n}\n```",
        "postTime": 1524993654,
        "uid": 49371,
        "name": "Fuko_Ibuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF620E \u3010New Year Tree\u3011"
    }
]