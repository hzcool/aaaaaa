[
    {
        "content": "\u9898\u76ee\uff1a[On Changing Tree](https://www.luogu.com.cn/problem/CF396C)\n\n\u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u5148 `dfs` \u9884\u5904\u7406\u8f6c\u6210\u533a\u95f4\u95ee\u9898\uff0c\u7136\u540e\u518d\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\n\n\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u7ebf\u6bb5\u6811\u7684 `lazytag` \u96be\u4ee5\u7ef4\u62a4\uff0c\u65e2\u6709\u4e0d\u540c\u7684\u6df1\u5ea6\uff0c\u53c8\u6709\u4e0d\u540c\u7684 $x$ \u548c $k$\u3002\u56e0\u6b64\u8003\u8651\u5c06\u4fee\u6539\u64cd\u4f5c\u5316\u7b80\u3002\n\n\u6211\u4eec\u5047\u8bbe\u8282\u70b9 $i$ \u7684\u6df1\u5ea6\u4e3a $dep_i$\uff0c\u7236\u4eb2\u4e3a $fa_i$\u3002\n\n\u5bf9\u4e8e\u4ee5 $u$ \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\uff0c\u5982\u679c\u6211\u4eec\u6267\u884c\u4fee\u6539\u64cd\u4f5c $(x, k)$\uff0c\u5c31\u7b49\u4ef7\u4e8e\u5728 $fa_u$ \u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u6267\u884c\u64cd\u4f5c $(x + k, k)$\uff08\u5f53\u7136\uff0c\u6211\u4eec\u4e0d\u4fee\u6539 $u$ \u7684\u5176\u4ed6\u5144\u5f1f\u5b50\u6811\uff09\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u7684\u4fee\u6539\u64cd\u4f5c\u7684\u6839\u7edf\u4e00\u5230\u8282\u70b9 $1$ \u4e0a\u9762\uff0c\u4e5f\u5c31\u662f\u8bf4\u628a\u64cd\u4f5c\u5316\u4e3a\u5728\u6839\u8282\u70b9\u4e0a\u6267\u884c $(x + k(dep_u - dep_1), k)$\u3002\n\n\u90a3\u4e48\u653e\u5230\u6839\u8282\u70b9\u4e0a\u6709\u4f55\u597d\u5904\u5462\uff1f\u5047\u5982\u73b0\u5728 `lazytag` \u4e2d\u6807\u8bb0\u4e86\u64cd\u4f5c $(x, k)$\uff0c\u53c8\u8981\u653e\u7f6e\u65b0\u6807\u8bb0 $(x', k')$\uff0c\u7531\u4e8e\u8ddd\u79bb\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u76f8\u7b49\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u5408\u5e76\u4e3a $(x + x', k + k')$\u3002\n\n\u6240\u4ee5\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <vector>\n\ntypedef long long i64;\n\nconst int MAXN = 3e5;\nconst i64 MODN = 1e9 + 7;\n\nstd::vector<int> graph[MAXN + 5];\n\nint n;\n\nint dfs_start[MAXN + 5], dfs_end[MAXN + 5], dfs_map[MAXN + 5], dep[MAXN + 5], cnt = 0;\n\nvoid dfs(int cur, int fa)\n{\n    dep[cur] = dep[fa] + 1;\n    dfs_start[cur] = ++cnt;\n    dfs_map[cnt] = cur;\n    for (auto i : graph[cur])\n    {\n        dfs(i, cur);\n    }\n    dfs_end[cur] = cnt;\n}\n\nstruct lazy_t\n{\n    i64 x, k;\n    lazy_t(i64 x = 0, i64 k = 0) : x(x), k(k) {}\n    bool nolazy() { return x == 0 && k == 0; }\n};\n\ntemplate<class T, class L, size_t S>\nstruct segtree\n{\n    T data[S * 4];\n    L lazy[S * 4];\n};\n\nsegtree<i64, lazy_t, MAXN> tree;\n\nvoid build_segtree(int ll, int rr, int p)\n{\n    if (ll == rr)\n    {\n        tree.data[p] = 0;\n    }\n    else\n    {\n        int mid = (ll + rr) / 2, lchild = p * 2, rchild = p * 2 + 1;\n        build_segtree(ll, mid, lchild);\n        build_segtree(mid + 1, rr, rchild);\n        tree.data[p] = 0;\n    }\n}\n\ni64 to_root(i64 x, int u, i64 k) // \u5c06\u64cd\u4f5c\u7edf\u4e00\u5230\u6839\u8282\u70b9 1 \u4e0a\uff0c\u6c42\u51fa\u65b0\u7684 x\n{\n    return (x + (dep[u] - dep[1]) * k);\n}\n\nvoid put_tag(i64 x, i64 k, int ll, int rr, int p)\n{\n    tree.data[p] += ((x - (dep[dfs_map[ll]] - dep[1]) * k) % MODN + MODN) % MODN;\n    tree.lazy[p].k = (tree.lazy[p].k + k) % MODN; // \u5168\u90e8\u7edf\u4e00\u5230\u6839\u8282\u70b9\u540e\u53ef\u4ee5\u76f4\u63a5\u5408\u5e76 (x, k)\u3002\n    tree.lazy[p].x = (tree.lazy[p].x + x) % MODN;\n}\n\nvoid push_down(int ll, int rr, int p)\n{\n    if (!tree.lazy[p].nolazy())\n    {\n        int mid = (ll + rr) / 2, lchild = p * 2, rchild = p * 2 + 1;\n        put_tag(tree.lazy[p].x, tree.lazy[p].k, ll, mid, lchild);\n        put_tag(tree.lazy[p].x, tree.lazy[p].k, mid + 1, rr, rchild);\n        tree.lazy[p].k = tree.lazy[p].x = 0;\n    }\n}\n\nvoid update_segtree(int l, int r, i64 x, i64 k, int ll, int rr, int p)\n{\n    if (l <= ll && rr <= r)\n    {\n        put_tag(x, k, ll, rr, p);\n    }\n    else\n    {\n        push_down(ll, rr, p);\n        int mid = (ll + rr) / 2, lchild = p * 2, rchild = p * 2 + 1;\n        if (l <= mid) update_segtree(l, r, x, k, ll, mid, lchild);\n        if (mid < r) update_segtree(l, r, x, k, mid + 1, rr, rchild);\n    }\n}\n\ni64 query_segtree(int pos, int ll, int rr, int p)\n{\n    if (ll == pos && rr == pos)\n    {\n        return (tree.data[p] % MODN + MODN) % MODN;\n    }\n    else\n    {\n        push_down(ll, rr, p);\n        int mid = (ll + rr) / 2, lchild = p * 2, rchild = p * 2 + 1;\n        if (pos <= mid) return query_segtree(pos, ll, mid, lchild);\n        else if (mid < pos) return query_segtree(pos, mid + 1, rr, rchild);\n    }\n    return 0;\n}\n\nint main()\n{\n    scanf(\"%d\", &n);\n    for (int i = 2; i <= n; i++)\n    {\n        int p;\n        scanf(\"%d\", &p);\n        graph[p].push_back(i);\n    }\n\n    dfs(1, 0);\n    build_segtree(1, n, 1);\n    int q;\n    scanf(\"%d\", &q);\n    while (q--)\n    {\n        int op;\n        scanf(\"%d\", &op);\n        if (op == 1)\n        {\n            int v;\n            i64 x, k;\n            scanf(\"%d%lld%lld\", &v, &x, &k);\n            update_segtree(dfs_start[v], dfs_end[v], to_root(x, v, k), k, 1, n, 1);\n        }\n        else if (op == 2)\n        {\n            int u;\n            scanf(\"%d\", &u);\n            printf(\"%lld\\n\", query_segtree(dfs_start[u], 1, n, 1));\n        }\n    }\n}\n```\n",
        "postTime": 1644417347,
        "uid": 177146,
        "name": "EarthMessenger",
        "ccfLevel": 0,
        "title": "On Changing Tree \u9898\u89e3"
    },
    {
        "content": "~~\u8fd9\u4e0d\u662f\u5957\u8def\u9898\u4e48\u2026\u2026\u4e3a\u4ec0\u4e48\u662f\u7d2b\u724c\u554a\u2026\u2026~~\n\n\u8bbe$dep_u$\u8868\u793a$u$\u7684\u6df1\u5ea6\n\n\u5982\u679c\u5bf9\u4e8e$u$\u4e3a\u6839\u7684\u5b50\u6811\u6267\u884c\u64cd\u4f5c$2$\uff0c\u65e2\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u6811\u4e2d\u7684\u8282\u70b9$v$\uff0c\u90a3\u4e48\u65b0\u589e\u52a0\u7684\u503c\u4e3a\n\n$$x-dis_{u,v}k=x-(dep_v-dep_u)k=(-dep_vk)+(x-dep_uk)$$\n\n\u5bf9\u4e8e\u540e\u8fb9\u7684\u90a3\u4e00\u9879\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5b50\u6811\u6574\u4f53\u52a0\u4e00\u4e2a\u5e38\u6570\uff0c\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e0b\u5c31\u884c\u4e86\n\n\u5bf9\u4e8e\u524d\u9762\u90a3\u9879\uff0c\u53d1\u73b0$dep_v$\u662f\u5173\u4e8e$v$\u7684\u56fa\u6709\u5c5e\u6027\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c$\\sum -dep_vk_i=-dep_v\\sum k_i$\uff0c\u4e5f\u5c31\u662f\u8bf4\u76f4\u63a5\u7ef4\u62a4\u5b50\u6811\u7684$k$\u4e4b\u548c\u5c31\u884c\u4e86\n\n\u4e8e\u662f\u5199\u4fe9\u6811\u72b6\u6570\u7ec4\u5c31\u53ef\u4ee5\u505a\u4e86\n\n``` cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 3e5 + 10, mod = 1e9 + 7;\n\nint n, l[N], r[N];\nvector<int> g[N];\n\nstruct BIT {\n\tll sum[N];\n\tvoid addsig(int x, ll y) {\n\t\tfor( ; x <= n ; x += x & -x)\n\t\t\t(sum[x] += y) %= mod;\n\t}\n\tvoid add(int l, int r, ll s) {\n\t\taddsig(l, s), addsig(r + 1, -s);\n\t}\n\tll ask(int x) {\n\t\tll r = 0;\n\t\tfor( ; x ; x -= x & -x)\n\t\t\t(r += sum[x]) %= mod;\n\t\treturn r;\n\t}\n} a, b;\n\nint dep[N];\nvoid dfs(int u) {\n\tstatic int tot = 0;\n\tl[u] = ++ tot;\n\tfor(int v: g[u])\n\t\tdep[v] = dep[u] + 1, dfs(v);\n\tr[u] = tot;\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor(int i = 2, fa ; i <= n ; ++ i)\n\t\tscanf(\"%d\", &fa), g[fa].push_back(i);\n\tdfs(1);\n\tint q; scanf(\"%d\", &q);\n\tfor(int i = 1, op, v, x, k ; i <= q ; ++ i) {\n\t\tscanf(\"%d\", &op);\n\t\tif(op == 1) {\n\t\t\tscanf(\"%d%d%d\", &v, &x, &k);\n\t\t\ta.add(l[v], r[v], k % mod);\n\t\t\tb.add(l[v], r[v], (x + 1ll * dep[v] * k % mod) % mod);\n\t\t} else {\n\t\t\tscanf(\"%d\", &v);\n\t\t\tll qa = a.ask(l[v]);\n\t\t\tll qb = b.ask(l[v]);\n\t\t\tll ans = (1ll * -dep[v] * qa % mod + qb) % mod;\n\t\t\tans = (ans % mod + mod) % mod;\n\t\t\tprintf(\"%lld\\n\", ans);\n\t\t}\n\t}\n}\n```",
        "postTime": 1537403113,
        "uid": 47111,
        "name": "nekko",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF396C \u3010On Changing Tree\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problem/CF396C)\n\n~~\u6ca1\u6709\u6811\u94fe\u5256\u5206\u7684\u9898\u89e3\uff1f\u90a3\u6211\u5199\u4e00\u4e2a~~\n\n\u5927\u81f4\u601d\u8def\uff1a\u628a\u6bcf\u6b21\u7684\u4fee\u6539\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u7ed9v\u8282\u70b9\u548c\u5b83\u7684\u5b50\u6811\u4e0a\u7684\u6240\u6709\u8282\u70b9\u52a0\u4e0a\u4e00\u4e2ax\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u7ed9v\u8282\u70b9\u548c\u5b83\u7684\u6240\u6709\u5b50\u6811\u4e0a\u7684\u8282\u70b9\u51cf\u53bb\u4e00\u4e2a$k*(dep_u-dep_v)$\uff08u\u8868\u793a\u5f53\u524d\u8282\u70b9\uff0cdep\u8868\u793a\u6df1\u5ea6\uff09\uff0c\u7136\u540e\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u5f00\u4e24\u9897\u7ebf\u6bb5\u6811\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c31\u5c06\u7b2c\u4e8c\u9897\u7ebf\u6bb5\u6811\u4e0a\u7684v\u8282\u70b9\u548c\u5b83\u7684\u6240\u6709\u5b50\u6811\u4e0a\u7684\u8282\u70b9\u90fd\u52a0\u4e0a\u4e00\u4e2a$x+k*dep_v$\uff0c\u518d\u5c06\u7b2c\u4e00\u9897\u7ebf\u6bb5\u6811\u4e0a\u7684v\u8282\u70b9\u548c\u5b83\u7684\u6240\u6709\u5b50\u6811\u4e0a\u7684\u8282\u70b9\u90fd\u52a0\u4e0a\u4e00\u4e2ak\uff0c\u6700\u540e\u67e5\u8be2\u65f6\u5c31\u8f93\u51fa\u8be5\u8282\u70b9\u7684\u7b2c\u4e8c\u9897\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u7684\u503c\u51cf\u53bb\u7b2c\u4e00\u9897\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u7684\u503c\u4e58\u4e0a\u8be5\u8282\u70b9\u7684\u6df1\u5ea6\u5373\u53ef\uff0c\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\uff0c~~\u7136\u800c\u76f4\u5230\u6700\u540e\u6211\u624d\u53d1\u73b0\u5176\u5b9e\u4e0d\u9700\u8981\u5199\u6811\u94fe\u5256\u5206\u3002~~\n\n\u4ee3\u7801\uff08~~\u4e5f\u5c31144\u884c~~\uff09\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst long long P=1000000007; \nconst long long N=300001;\nlong long n,m,head[N],dep[N],fa[N],top[N],son[N],size[N],id[N],cnt1,cnt2,a1,a2,a3;\nstruct sb1\n{\n\tlong long a,b;\n}e[N<<1];\nstruct sb2\n{\n\tlong long s,la;\n}tre[N<<2],tre2[N<<2];//tre\u540c\u9898\u76ee\u63cf\u8ff0\u4e2d\u7684\u7b2c\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0ctre2\u540c\u63cf\u8ff0\u4e2d\u7684\u7b2c\u4e8c\u68f5\u7ebf\u6bb5\u6811\nvoid add(long long a,long long b)//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n{\n\te[++cnt1]=sb1{head[a],b};\n\thead[a]=cnt1;\n}\nvoid dfs1(long long x,long long y)//\u6811\u94fe\u5256\u5206\u6a21\u677f\n{\n\tdep[x]=dep[y]+1;\n\tfa[x]=y;\n\tsize[x]=1;\n\tlong long k=-1;\n\tfor(long long i=head[x];i;i=e[i].a)\n\t{\n\t\tif(e[i].b!=y)\n\t\t{\n\t\t\tdfs1(e[i].b,x);\n\t\t\tsize[x]+=size[e[i].b];\n\t\t\tif(size[e[i].b]>k)\n\t\t\t{\n\t\t\t\tk=size[e[i].b];\n\t\t\t\tson[x]=e[i].b;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs2(long long x,long long y)\n{\n\tid[x]=++cnt2;\n\ttop[x]=y;\n\tif(!son[x])return;\n\tdfs2(son[x],y);\n\tfor(long long i=head[x];i;i=e[i].a)\n\t{\n\t\tif(e[i].b!=fa[x] && e[i].b!=son[x])dfs2(e[i].b,e[i].b);\n\t}\n}\nvoid pushdown(long long p,long long l,long long r)//\u7ebf\u6bb5\u6811\u6a21\u677f\n{\n\tif(tre[p].la==0)return;\n\tlong long mid=(l+r)>>1;\n\ttre[p<<1].s=(tre[p<<1].s+tre[p].la*(mid-l+1))%P;\n\ttre[p<<1|1].s=(tre[p<<1|1].s+tre[p].la*(r-mid))%P;\n\ttre[p<<1].la=(tre[p<<1].la+tre[p].la)%P;\n\ttre[p<<1|1].la=(tre[p<<1|1].la+tre[p].la)%P;\n\ttre[p].la=0;\n}\nvoid add(long long p,long long l,long long r)\n{\n\tif(l>=a1 && r<=a2){tre[p].s=(tre[p].s+(r-l+1)*a3%P)%P;tre[p].la+=a3;return;}\n\tpushdown(p,l,r);\n\tlong long mid=(l+r)>>1;\n\tif(mid>=a1)add(p<<1,l,mid); \n\tif(mid<a2)add(p<<1|1,mid+1,r);\n\ttre[p].s=(tre[p<<1].s+tre[p<<1|1].s)%P;\n}\nlong long query(long long p,long long l,long long r)\n{\n\tif(l>=a1 && r<=a2)return tre[p].s;\n\tpushdown(p,l,r);\n\tlong long mid=(l+r)>>1,ans=0;\n\tif(mid>=a1)ans=(ans+query(p<<1,l,mid))%P; \n\tif(mid<a2)ans=(ans+query(p<<1|1,mid+1,r))%P;\n\treturn ans; \n}\nvoid pushdown2(long long p,long long l,long long r)\n{\n\tif(tre2[p].la==0)return;\n\tlong long mid=(l+r)>>1;\n\ttre2[p<<1].s=(tre2[p<<1].s+tre2[p].la*(mid-l+1))%P;\n\ttre2[p<<1|1].s=(tre2[p<<1|1].s+tre2[p].la*(r-mid))%P;\n\ttre2[p<<1].la=(tre2[p<<1].la+tre2[p].la)%P;\n\ttre2[p<<1|1].la=(tre2[p<<1|1].la+tre2[p].la)%P;\n\ttre2[p].la=0;\n}\nvoid add2(long long p,long long l,long long r)\n{\n\tif(l>=a1 && r<=a2){tre2[p].s=(tre2[p].s+(r-l+1)*a3%P)%P;tre2[p].la+=a3;return;}\n\tpushdown2(p,l,r);\n\tlong long mid=(l+r)>>1;\n\tif(mid>=a1)add2(p<<1,l,mid); \n\tif(mid<a2)add2(p<<1|1,mid+1,r);\n\ttre2[p].s=(tre2[p<<1].s+tre2[p<<1|1].s)%P;\n}\nlong long query2(long long p,long long l,long long r)\n{\n\tif(l>=a1 && r<=a2)return tre2[p].s;\n\tpushdown2(p,l,r);\n\tlong long mid=(l+r)>>1,ans=0;\n\tif(mid>=a1)ans=(ans+query2(p<<1,l,mid))%P; \n\tif(mid<a2)ans=(ans+query2(p<<1|1,mid+1,r))%P;\n\treturn ans; \n}\nsigned main()\n{\n\tscanf(\"%lld\",&n);\n\tfor(long long i=2;i<=n;i++)\n\t{\n\t\tlong long b;\n\t\tscanf(\"%lld\",&b);\n\t\tadd(i,b);\n\t\tadd(b,i);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tscanf(\"%lld\",&m);\n\twhile(m--)\n\t{\n\t\tlong long k;\n\t\tscanf(\"%lld\",&k);\n\t\tif(k==1)\n\t\t{\n\t\t\tlong long a,b,c;\n\t\t\tscanf(\"%lld%lld%lld\",&a,&b,&c);\n\t\t\ta1=id[a],a2=id[a]+size[a]-1,a3=b+c*dep[a];//\u64cd\u4f5c\n\t\t\tadd2(1,1,n+1);\n\t\t\ta1=id[a],a2=id[a]+size[a]-1,a3=-c;//\u64cd\u4f5c\n\t\t\tadd(1,1,n+1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong long a,ans=0;\n\t\t\tscanf(\"%lld\",&a);\n\t\t\ta1=id[a],a2=id[a];//\u8ba1\u7b97\u7b54\u6848\n\t\t\tans+=query2(1,1,n+1);\n\t\t\ta1=id[a],a2=id[a];\n\t\t\tans+=query(1,1,n+1)*dep[a];\n\t\t\tans%=P;\n\t\t\tprintf(\"%lld\\n\",(ans+P)%P);//\u9632\u6b62\u51fa\u73b0\u8d1f\u6570\n\t\t}\n\t}\n}\n```\n![](https://www.luogu.org/images/congratulation.png)",
        "postTime": 1569217864,
        "uid": 60075,
        "name": "pzc2004",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF396C \u3010On Changing Tree\u3011"
    },
    {
        "content": "\u6811\u4e0a\u95ee\u9898\u4e00\u822c\u7528**\u6811\u94fe\u5256\u5206**,\u4f46\u662f\u8fd9\u9898\u4e0d\u6d89\u53ca\u94fe\u4e0a\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ea\u9700\u8981```dfs\u5e8f```\u3002\u8bbe\u5b50\u6811\u6839\u8282\u70b9\u4e3a $u$\uff0c\u8282\u70b9\u4e2a\u6570\u4e3a $size_u$\uff0c $u$ \u7684dfs\u5e8f\u4e3a $dfn_u$,\u6539\u53d8\u5b50\u6811\u53ea\u9700\u6539\u53d8 $(dfn_u,dfn_u+size_u-1)$ \u7684\u8282\u70b9\uff0c\u533a\u95f4\u4fee\u6539\u5355\u70b9\u67e5\u8be2\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\uff0c~~\u5948\u4f55\u672c\u4eba\u592a\u83dc\uff0c\u4e0d\u4f1a\u6811\u72b6\u6570\u7ec4~~\u4e0b\u9762\u6765\u4ecb\u7ecd\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u3002\n\n\u9898\u76ee\u7684\u4fee\u6539\u64cd\u4f5c\u96be\u4ee5\u7528\u5355\u4e00\u61d2\u6807\u8bb0\u7ef4\u62a4\uff0c\u4e14\u65e0\u6cd5\u5408\u5e76\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u64cd\u4f5c\u62c6\u5206\u6210\u52a0\u4e0a $x+deep_u \\times k$ \u548c\u51cf $deep_v \\times k$\uff0c\u6807\u8bb0 $x+deep_u \\times k$ \u548c $k$\uff0c\u67e5\u8be2\u65f6\u5c06\u524d\u4e00\u4e2a\u6807\u8bb0\u51cf\u53bb\u540e\u4e00\u4e2a\u6807\u8bb0\u4e58 $deep_v$\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5408\u5e76\u6807\u8bb0\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u6700\u540e\u9644\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define mod 1000000007\n#define N 300010\nusing namespace std;\nvoid read(int &o) {\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9') {\n\t\tif(ch=='-') f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tx=(x<<1)+(x<<3)+(ch^48);\n\t\tch=getchar();\n\t}\n\to=x*f;\n\treturn;\n}\nint n,id[N],m,size[N],deep[N],fa[N];\nvector<int> a[N];\nstruct obj {\n\tint l,r,lan1,lan2;\n} tree[N<<4];\nint cnt=0;\nvoid dfs(int x) {\n\tid[x]=++cnt;\n\tdeep[cnt]=deep[id[fa[x]]]+1;\n\tsize[x]=1;\n\tfor(int i=0; i<a[x].size(); i++) {\n\t\tdfs(a[x][i]);\n\t\tsize[x]+=size[a[x][i]];\n\t}\n\treturn;\n}\nvoid build(int u,int l,int r) {\n\ttree[u].l=l,tree[u].r=r;\n\tif(l>=r) return;\n\tint mid=(l+r)>>1;\n\tbuild(u<<1,l,mid),build(u<<1|1,mid+1,r);\n}\nvoid pushdown(int u) {\n\ttree[u<<1].lan1=(tree[u<<1].lan1+tree[u].lan1)%mod;\n\ttree[u<<1].lan2=(tree[u<<1].lan2+tree[u].lan2)%mod;\n\ttree[u<<1|1].lan1=(tree[u<<1|1].lan1+tree[u].lan1)%mod;\n\ttree[u<<1|1].lan2=(tree[u<<1|1].lan2+tree[u].lan2)%mod;\n\ttree[u].lan1=0;\n\ttree[u].lan2=0;\n\treturn;\n}\nvoid update(int u,int l,int r,int x,int k) {\n\tif(tree[u].l>=l&&r>=tree[u].r) {\n\t\ttree[u].lan1+=x;\n\t\ttree[u].lan1%=mod;\n\t\ttree[u].lan2+=k;\n\t\ttree[u].lan2%=mod;\n\t\treturn;\n\t}\n\tint mid=(tree[u].l+tree[u].r)>>1;\n\tif(l<=mid) update(u<<1,l,r,x,k);\n\tif(r>mid) update(u<<1|1,l,r,x,k);\n\treturn;\n}\nint querry(int u,int x) {\n\tif(tree[u].l>=tree[u].r) {\n\t\treturn (tree[u].lan1-tree[u].lan2*deep[tree[u].l]+mod)%mod;\n\t}\n\tpushdown(u);\n\tint mid=(tree[u].l+tree[u].r)>>1;\n\tif(x<=mid) return querry(u<<1,x);\n\telse return querry(u<<1|1,x);\n}\nsigned main() {\n\tread(n);\n\tfor(int i=2; i<=n; i++) {\n\t\tint x;\n\t\tread(x);\n\t\tfa[i]=x;\n\t\ta[x].push_back(i);\n\t}\n\tdfs(1);\n\tbuild(1,1,n);\n\tread(m);\n\twhile(m--) {\n\t\tint opt;\n\t\tread(opt);\n\t\tif(opt==1) {\n\t\t\tint x,v,k;\n\t\t\tread(v),read(x),read(k);\n\t\t\tx=(x+deep[id[v]]*k)%mod;\n\t\t\tupdate(1,id[v],id[v]+size[v]-1,x,k);\n\t\t} else {\n\t\t\tint x;\n\t\t\tread(x);\n\t\t\tprintf(\"%lld\\n\",(querry(1,id[x])%mod+mod)%mod); \n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1657884340,
        "uid": 196631,
        "name": "xuzz",
        "ccfLevel": 6,
        "title": "CF396C On Changing Tree"
    },
    {
        "content": "#### CF396C\u9898\u89e3\n\n[\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/CF396C)\n\n\n#### \u601d\u8def\uff1a\n\n\u7531\u4e8e\u5b50\u6811\u91cc\u4e0d\u540c\u6df1\u5ea6\u7684\u8282\u70b9\u6743\u503c\u4e0d\u540c\uff0c\u6240\u4ee5\u7528\u7ebf\u6bb5\u6811\u76f4\u63a5\u7ef4\u62a4\u7684\u96be\u5ea6\u6bd4\u8f83\u9ad8\u3002\u4f46\u5bb9\u6613\u6ce8\u610f\u5230\uff1a\u8fdb\u884c\u52a0\u64cd\u4f5c\u65f6\uff0c\u76f8\u90bb\u6df1\u5ea6\u4e4b\u95f4\u589e\u52a0\u6743\u503c\u7684\u5dee\u662f **\u4e00\u6837** \u7684\uff0c\u800c\u4e14\u8be2\u95ee\u64cd\u4f5c\u5c45\u7136 **\u53ea\u6709\u5355\u70b9\u67e5\u8be2** \uff0c\u975e\u5e38\u5bb9\u6613\u60f3\u5230\u4e00\u4e2a\u5e38\u7528\u7684\u6280\u5de7\uff1a **\u5dee\u5206** \u3002\n\n------------\n\n\n\u5b9a\u4e49 $f(x)$ \u4e3a $x$ \u548c $root$ \u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u548c\uff0c$v$ \u4e3a\u6811\u4e2d\u7684\u8282\u70b9\uff0c$u$ \u4e3a $v$ \u5b50\u6811\u4e2d\u7684\u8282\u70b9\uff08$u$ \u4e0e $v$ \u4e0d\u540c\uff09\u3002\n\n\n#### \u4fee\u6539\u64cd\u4f5c\uff1a\n\n\n\u6211\u4eec\u4ee4\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u5b83\u4e0e\u5b83\u7236\u4eb2\u7684\u5dee\uff0c$v$ \u539f\u672c\u7684\u503c\u7b49\u4e8e $f(v)$\u3002\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\u65f6\uff0c\u7ed9 $v$ \u7684\u6743\u503c\u52a0 $x$\uff0c\u6b64\u65f6 $f(v)$ \u589e\u52a0\u4e86 $x$\uff0c\u540c\u65f6 $f(u)$ \u4e5f\u589e\u52a0\u4e86 $x$\u3002\u518d\u8ba9\u6240\u6709\u7684 $u$ \u51cf\u53bb $k$\uff0c$f(u)$ \u7684\u503c\u5168\u90e8\u90fd\u51cf\u53bb $dis(u,v)\\cdot k$\uff0c\u8fd9\u6837\u6240\u6709\u7684\u503c\u90fd\u6309\u7167\u9898\u610f\u8fdb\u884c\u4e86\u6539\u53d8\u3002\u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4fe1\u606f\uff0c\u4e00\u6b21\u5355\u70b9\u4fee\u6539 $v$ \u52a0 $x$\uff0c\u4e00\u6b21\u533a\u95f4\u4fee\u6539 $u$ \u51cf $k$\uff0c\u590d\u6742\u5ea6\u4e3a $O(\\log_2n)$\n \n```cpp\nvoid Update(ll v, ll x, ll k) {\n    sgt.Update(1, 1, n, id[v], id[v] + siz[v] - 1, -k);//\u7ed9\u6574\u4e2a\u5b50\u6811-k\n    sgt.Update(1, 1, n, id[v], id[v], k + x);//\u52a0\u56dev\u539f\u6709\u7684k\u540c\u65f6\u52a0\u4e0ax\n    return;\n}\n```\n\n\n#### \u67e5\u8be2\u64cd\u4f5c\uff1a\n\n\u8fd9\u662f\u6700\u5bb9\u6613\u7684\u90e8\u5206\uff0c\u53ea\u9700\u8981\u6c42 $f(v)$ \u5373\u53ef\u3002\u76f4\u63a5\u5411\u4e0a\u66b4\u529b\u8df3\uff0c\u5747\u644a\u7684\u590d\u6742\u5ea6\u4f3c\u4e4e\u8fd8\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u5047\u5982\u6bd2\u7624\u51fa\u9898\u4eba\u8ba9\u6811\u53d8\u6210\u4e00\u6839\u94fe\uff0c\u590d\u6742\u5ea6\u4fbf\u4f1a\u9000\u5316\u5230 $O(n\\log_2n)$\u3002\u6539\u7528\u6811\u94fe\u5256\u5206\u7ef4\u62a4\uff0c\u590d\u6742\u5ea6 $O(\\log_2^2n)$\u3002\n\n```cpp\nll Query(ll x) {\n    ll res = 0;\n    while (top[x] != 1) {\n        res = (res + sgt.Query(1, 1, n, id[top[x]], id[x]) + mod) % mod;\n        x = fa[top[x]];\n    }\n    res = (res + sgt.Query(1, 1, n, 1, id[x]) + mod) % mod;\n    return res;\n}\n```\n\n\n\n------------\n\n\u4ee5\u4e0b\u662f AC \u4ee3\u7801\uff0c\u590d\u6742\u5ea6\u4ecb\u4e8e $O(q\\log_2n)$ \u5230 $O(q\\log_2^2n)$ \u4e4b\u95f4\u3002\u6d4b\u8bd5\u70b9\u6700\u957f\u7528\u4e86 $1.6s$\uff08\u4e3a\u4ec0\u4e48\u5e38\u6570\u8fd9\u4e48\u5927\uff09\uff0c\u4f46\u662f\u8fd8\u662f\u53ef\u4ee5 AC\u3002\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define lc (k << 1)\n#define rc (k << 1 | 1)\nconst ll mod = 1000000007;\nconst ll maxn = 3e5 + 10;\n//\u5efa\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5dee\u5206\u7684\u548c\nclass SegTree {\npublic:\n    ll tr[maxn << 2];\n    ll lazy[maxn << 2];\n    SegTree() {\n        memset(tr, 0, sizeof(tr));\n        memset(lazy, 0, sizeof(lazy));\n    }\n    void TagUpdate(ll k, ll l, ll r) {\n        ll mid = (l + r) >> 1;\n        tr[lc] = (tr[lc] + lazy[k] * ((mid - l + 1 + mod) % mod) + mod) % mod;\n        tr[rc] = (tr[rc] + lazy[k] * ((r - mid + mod) % mod) + mod) % mod;\n        lazy[lc] += lazy[k];\n        lazy[rc] += lazy[k];\n        lazy[k] = 0;\n        return;\n    }\n    void FatherUpdate(ll k) {\n        tr[k] = tr[lc] + tr[rc];\n        return;\n    }\n    void Update(ll k, ll l, ll r, ll L, ll R, ll val) {\n        if (L <= l && r <= R) {\n            tr[k] = (tr[k] + (r - l + 1) * val + mod) % mod;\n            lazy[k] = (lazy[k] + val + mod) % mod;\n            return;\n        }\n        TagUpdate(k, l, r);\n        ll mid = (l + r) >> 1;\n        if (L <= mid)\n            Update(lc, l, mid, L, R, val);\n        if (R > mid)\n            Update(rc, mid + 1, r, L, R, val);\n        FatherUpdate(k);\n        return;\n    }\n    ll Query(ll k, ll l, ll r, ll L, ll R) {\n        if (L <= l && r <= R) {\n            return tr[k];\n        }\n        TagUpdate(k, l, r);\n        ll mid = (l + r) >> 1, res = 0;\n        if (L <= mid)\n            res = (res + Query(lc, l, mid, L, R) + mod) % mod;\n        if (R > mid)\n            res = (res + Query(rc, mid + 1, r, L, R) + mod) % mod;\n        return res;\n    }\n} sgt;\nvector<ll> G[maxn];\nll n, q;\nll top[maxn], dep[maxn], siz[maxn], son[maxn], fa[maxn], id[maxn], re[maxn], cnt;\n//\u6811\u5256\nvoid Dfs1(ll u, ll f) {\n    dep[u] = dep[f] + 1;\n    siz[u] = 1;\n    fa[u] = f;\n    for (auto v : G[u]) {\n        if (v == f)\n            continue;\n        Dfs1(v, u);\n        siz[u] += siz[v];\n        if (!son[u] || siz[v] > siz[son[u]])\n            son[u] = v;\n    }\n    return;\n}\nvoid Dfs2(ll u, ll tp) {\n    top[u] = tp;\n    id[u] = ++cnt;\n    re[cnt] = u;\n    if (son[u])\n        Dfs2(son[u], tp);\n    for (auto v : G[u]) {\n        if (v == fa[u] || v == son[u])\n            continue;\n        Dfs2(v, v);\n    }\n    return;\n}\nvoid Update(ll v, ll x, ll k) {\n    sgt.Update(1, 1, n, id[v], id[v] + siz[v] - 1, -k);\n    sgt.Update(1, 1, n, id[v], id[v], k + x);\n    return;\n}\nll Query(ll x) {\n    ll res = 0;\n    while (top[x] != 1) {\n        res = (res + sgt.Query(1, 1, n, id[top[x]], id[x]) + mod) % mod;\n        x = fa[top[x]];\n    }\n    res = (res + sgt.Query(1, 1, n, 1, id[x]) + mod) % mod;\n    return res;\n}\nvoid Init() {\n    scanf(\"%lld\", &n);\n    for (ll i = 2; i <= n; i++) {\n        ll f;\n        scanf(\"%lld\", &f);\n        G[i].push_back(f);\n        G[f].push_back(i);\n    }\n    Dfs1(1, 1);\n    Dfs2(1, 1);\n    scanf(\"%lld\", &q);\n    return;\n}\nvoid Solve() {\n    for (ll i = 1; i <= q; i++) {\n        ll v, x, k, opt;\n        scanf(\"%lld\", &opt);\n        if (opt == 1) {\n            scanf(\"%lld%lld%lld\", &v, &x, &k);\n            Update(v, x, k);\n        } else {\n            scanf(\"%lld\", &v);\n            ll ans = Query(v);\n            while (ans < 0) ans += mod;\n            printf(\"%lld\\n\", ans);\n        }\n    }\n    return;\n}\nint main() {\n    // freopen(\"data.in\", \"r\", stdin);\n    // freopen(\"ans.out\", \"w\", stdout);\n    Init();\n    Solve();\n    return 0;\n}\n```\n\n\u9644\u8d60\u9020\u6570\u636e\u673a\u4e00\u4e2a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define N 10\n#define Q 100\nint main() {\n    freopen(\"data.in\", \"w\", stdout);\n    srand(time(NULL));\n    int n = N, q = Q;\n    printf(\"%d\\n\", n);\n    for (int i = 2; i <= n; i++) {\n        int f = rand() % (i - 1) + 1;\n        printf(\"%d \", f);\n    }\n    printf(\"\\n%d\\n\", q);\n    for (int i = 1; i <= q; i++) {\n        int opt = rand() % 2 + 1;\n        printf(\"%d \", opt);\n        if (opt == 1) {\n            printf(\"%d %d %d\\n\", rand() % n + 1, rand() % 100, rand() % 100);\n        } else {\n            printf(\"%d\\n\", rand() % n + 1);\n        }\n    }\n}\n```",
        "postTime": 1657629167,
        "uid": 401583,
        "name": "a_z_c",
        "ccfLevel": 6,
        "title": "CF396C\u9898\u89e3"
    },
    {
        "content": "~~\u666e\u901a\u6811\u636e\u7ed3\u6784\u9898\uff0c\u6811\u72b6\u6570\u7ec4\u968f\u4fbf\u641e\u641e\u5c31\u884c\u4e86~~\n\n_____________________\n\n\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u68f5\u4ee51\u4e3a\u6839\u7684\u6811,\u521d\u59cb\u65f6\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u5168\u90e8\u662f0,\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\n\n\u64cd\u4f5c1\uff0c\u7ed9\u8282\u70b9$u$\u52a0\u4e0a$x$,\u5bf9\u4e8e$u$\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\uff0c\u5982\u679c\u5b83\u548c$u$\u7684\u8ddd\u79bb\u4e3a$i$\u90a3\u4e48\u8fd9\u4e2a\u70b9\u88ab\u52a0\u4e0a$x-ik$,$x$\u548c$k$\u5747\u4e3a\u8f93\u5165\u7684\u53c2\u6570\n\n\u64cd\u4f5c2:\u8be2\u95ee\u8282\u70b9u\u7684\u70b9\u6743\n\n_______________________\n\n## \u672c\u9898\u9898\u89e3\n\n\u53d1\u73b0\u8be2\u95ee\u5f02\u5e38\u7684\u7b80\u5355\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u8d21\u732e\n\n\u8003\u8651\u5728\u4e00\u4e2a\u65f6\u523bt\uff0c\u6211\u4eec\u8be2\u95ee\u4e86\u8282\u70b9$v$\u7684\u70b9\u6743\n\n\u90a3\u4e48\u4ec0\u4e48\u6837\u7684\u4fee\u6539\u4f1a\u5bf9\u8fd9\u4e2a\u8be2\u95ee\u4ea7\u751f\u8d21\u732e\u5462\uff1f\n\n\u7b2c\u4e00\u8fd9\u4e2a\u4fee\u6539\u53d1\u751f\u7684\u65f6\u523b$t'$\u5fc5\u987b\u5c0f\u4e8e$t$\n\n\u7b2c\u4e8c\u5c31\u662f\u8fd9\u4e2a\u4fee\u6539\u7684$u$\u5fc5\u987b\u5728\u8fd9\u4e2a\u70b9\u52301\u7684\u8def\u5f84\u4e0a\uff0c\u5426\u5219\u663e\u7136\u5f71\u54cd\u4e0d\u5230\u8fd9\u4e2a\u70b9\n\n\u90a3\u4e48\u6b64\u65f6v\u7684\u70b9\u6743\u53c8\u662f\u591a\u5c11\u5462?\n\n\u5e94\u8be5\u662f\n\n$$\\sum_{i}x_{i}-dis(u_{i},v)k_{i}$$\n\n\u7b80\u5355\u7684\u628adis\u62c6\u4e00\u4e0b\n\n$$\\sum_{i}x_{i}-(dep_{v}-dep_{u_{i}})k_{i}$$\n\n\u7136\u540e\u7b80\u5355\u7684\u62c6\u4e00\u4e0b\u03a3\n\n$$(\\sum_{i}x_{i}+dep_{u_{i}}k_{i})-(dep_{v}\\sum_{i}k_{i})$$\n\n\u6362\u53e5\u8bdd\u8bf4\u8981\u6211\u4eec\u67e5\u8be2\u7684\u4e1c\u897f\u662f\u6240\u6709\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u4fee\u6539\u7684$x+dep_{u}k$\u7684\u548c\u4ee5\u53ca$k$\u7684\u548c\n\n1.\u8fd9\u4e2a\u4fee\u6539\u7684$t$\u5c0f\u4e8e\u6211\u4eec\u8be2\u95ee\u7684$t$\n\n2.\u8fd9\u4e2a\u4fee\u6539\u7684\u70b9$u$\u5728$1-v$\u7684\u8def\u5f84\u4e0a\n\n\n\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u76f8\u5f53\u7684\u597d\u89e3\u51b3\uff0c\u6211\u4eec\u5728\u6811\u4e0adfs,\u5c06u\u538b\u6808\u7684\u65f6\u5019\u5c31\u5c06\u548cu\u6709\u5173\u7684\u4fee\u6539\u90fd\u63d2\u5165\u67d0\u6570\u636e\u7ed3\u6784\u91cc\uff0c\u5c06u\u5f39\u6808\u7684\u65f6\u5019\u5c31\u5c06\u548cu\u6709\u5173\u7684\u4fee\u6539\u5168\u90e8\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u5220\u9664\uff0c\u8fd9\u6837\u7684\u8bdd\u5f53\u6211\u4eecdfs\u5230v\u7684\u65f6\u5019\u6570\u636e\u7ed3\u6784\u4e2d\u7559\u4e0b\u7684\u4fee\u6539\u5c31\u5168\u90e8\u57281~v\u7684\u8def\u5f84\u4e0a\u4e86\n\n\u8fd8\u5269\u4e0b\u7b2c\u4e00\u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u53d1\u73b0\u53ea\u662f\u4e00\u4e2a\u4fee\u6539\u7684t\u5c0f\u4e8e\u8be2\u95eet\u7684\u5173\u7cfb\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5c31\u76f8\u5f53\u7684\u597d\u89e3\u51b3\u4e86,\u6211\u4eec\u5c06\u8be2\u95ee\u79bb\u7ebf\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e0b\uff0c\u5230\u65f6\u5019\u67e5\u4e24\u53d1\u524d\u7f00\u548c\u5c31\u884c\u4e86\n\n\u5177\u4f53\u70b9\u6765\u8bb2\u5c31\u662f\u5f00\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u5f53\u6211\u4eec\u63d2\u5165\u4e00\u4e2a\u8be2\u95ee\u7684\u65f6\u5019\u00b7\u5728\u8fd9\u4e2a\u8be2\u95ee\u7684$t$\u7684\u4f4d\u7f6e\u5355\u70b9\u52a0\u4e0a$x+dep_{u}k$\uff0c\u5728\u53e6\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u4e0a\u5355\u70b9\u52a0$k$,\u5220\u9664\u7684\u65f6\u5019\u5c31\u6362\u6210\u51cf\u6cd5\u5c31\u53ef\u4ee5\u4e86\n\n\u56de\u7b54\u4e00\u4e2a\u8be2\u95ee\u7684\u65f6\u5019\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u67e5\u4e24\u53d1\u524d\u7f00\u548c\u7136\u540e\u5957\u4e2a\u5f0f\u5b50\u51cf\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86~\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<vector>\nusing namespace std;const int N=3*1e5+10;typedef long long ll;const ll mod=1e9+7;\nint n;int m;\nstruct data{ll x;ll k;int t;};vector <data> ve[N];vector <int> qr[N];\nstruct treearray//\u6811\u72b6\u6570\u7ec4 \n{\n    ll ta[N];\n    inline void c(int x,ll t){for(;x<=m;x+=x&(-x))(ta[x]+=t)%=mod;}\n    inline ll q(int x){ll r=0;for(;x;x-=x&(-x))(r+=ta[x])%=mod;return r;}\n}ta1,ta2;int v[N];int x[N];int ct;int al[N];ll ans[N];\ninline void add(int u,int V){v[++ct]=V;x[ct]=al[u];al[u]=ct;}\ninline void dfs(int u,int dep)//dfs \n{\n    for(vector <data>::iterator it=ve[u].begin();it!=ve[u].end();++it)//\u63d2\u5165 \n        ta1.c(it->t,(it->x+dep*it->k)%mod),ta2.c(it->t,it->k);\n    for(vector <int>::iterator it=qr[u].begin();it!=qr[u].end();++it)//\u56de\u7b54 \n        ans[*it]=(ta1.q(*it)+mod-ta2.q(*it)*dep%mod)%mod;\n    for(int i=al[u];i;i=x[i])dfs(v[i],dep+1);//dfs \n    for(vector <data>::iterator it=ve[u].begin();it!=ve[u].end();++it)//\u5220\u9664 \n        ta1.c(it->t,mod-(it->x+dep*it->k)%mod),ta2.c(it->t,mod-it->k);\n}\nint main()\n{\n    scanf(\"%d\",&n);for(int i=2,f;i<=n;i++)scanf(\"%d\",&f),add(f,i);scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)ans[i]=-1;\n    for(int i=1,t,u,x,k;i<=m;i++)//\u79bb\u7ebf \n    {\n        scanf(\"%d%d\",&t,&u);\n        if(t==1)scanf(\"%d%d\",&x,&k),ve[u].push_back((data){x,k,i});\n        else qr[u].push_back(i);\n    }dfs(1,0);//\u8f93\u51fa\u7b54\u6848 \n    for(int i=1;i<=m;i++)if(ans[i]!=-1)printf(\"%I64d\\n\",ans[i]);return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n\n\n```\n\n\n\n",
        "postTime": 1537516331,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF396C \u3010On Changing Tree\u3011"
    },
    {
        "content": "\u6811\u5256\u98988.jpg(\u53cd\u6b63\u4e00\u773c\u662f\u8fd9\u4e2a\u601d\u8def\n\n\u8003\u8651\u4fee\u6539\u64cd\u4f5c\uff0c\u6df1\u5ea6\u8d8a\u5927\u8981\u589e\u52a0\u7684\u503c\u8d8a\u5c11\uff0c\u6bcf\u589e\u52a01\u6df1\u5ea6\u589e\u52a0\u7684\u503c\u51cf\u5c11 $k$ \uff0c\u8003\u8651\u5dee\u5206\uff0c\u5728\u4fee\u6539\u7684\u70b9 $v$ \u5904\u52a0\u4e0a\u503c $x$\uff0c\u4e4b\u540e\u5728\u5b83\u7684\u5b50\u6811\u4e2d\u6240\u6709\u9664\u4e86\u5b83\u7684\u70b9\u5168\u90e8\u52a0\u4e0a $-k$\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u56e0\u4e3a\u8981\u6ee1\u8db3\u201c\u589e\u52a01\u6df1\u5ea6\u5c31\u51cf\u5c11 $k$\u201d\u8fd9\u4e2a\u6761\u4ef6\uff0c\u90a3\u4e48\u663e\u7136\u5c31\u662f\u67e5\u8be2 $1-x$ \u7684\u94fe\u4e0a\u7684\u6570\u5b57\u548c\uff0c\u6240\u4ee5\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u5b50\u6811\u52a0\u94fe\u67e5\u8be2\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(q\\log ^2n)$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int mod=1e9+7;\nvector<int> vc[300010];\nint fa[300010],in[300010],out[300010],siz[300010];\nint top[300010],son[300010],dep[300010];\nint sum[1200010],addv[1200010],n,q,cnt;\nvoid dfs1(int u)\n{\n\tsiz[u]=1;\n\tfor(auto v:vc[u])\n\t{\n\t\tdep[v]=dep[u]+1;\n\t\tdfs1(v);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])\n\t\t{\n\t\t\tson[u]=v;\n\t\t}\n\t}\n}\nvoid dfs2(int u,int tp)\n{\n\ttop[u]=tp;\n\tin[u]=++cnt;\n\tif(son[u])\n\t{\n\t\tdfs2(son[u],tp);\n\t}\n\tfor(auto v:vc[u])\n\t{\n\t\tif(v==son[u])\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tdfs2(v,v);\n\t}\n\tout[u]=cnt;\n}\nvoid pushdown(int o,int lf,int rg)\n{\n\tif(addv[o])\n\t{\n\t\taddv[o<<1]+=addv[o];\n\t\taddv[o<<1]%=mod;\n\t\taddv[o<<1|1]+=addv[o];\n\t\taddv[o<<1|1]%=mod;\n\t\tint mid=(lf+rg)>>1;\n\t\tsum[o<<1]=(sum[o<<1]+addv[o]*(mid-lf+1)%mod)%mod;\n\t\tsum[o<<1|1]=(sum[o<<1|1]+addv[o]*(rg-mid)%mod)%mod;\n\t\taddv[o]=0;\n\t}\n}\nvoid modify(int o,int lf,int rg,int l,int r,int x)\n{\n\tif(l<=lf&&rg<=r)\n\t{\n\t\tsum[o]+=(rg-lf+1)*x;\n\t\taddv[o]+=x;\n\t\treturn ;\n\t}\n\tint mid=(lf+rg)>>1;\n\tpushdown(o,lf,rg);\n\tif(l<=mid)\n\t{\n\t\tmodify(o<<1,lf,mid,l,r,x);\n\t}\n\tif(mid<r)\n\t{\n\t\tmodify(o<<1|1,mid+1,rg,l,r,x);\n\t}\n\tsum[o]=sum[o<<1]+sum[o<<1|1];\n}\nint query(int o,int lf,int rg,int l,int r)\n{\n\tif(l<=lf&&rg<=r)\n\t{\n\t\treturn sum[o];\n\t}\n\tpushdown(o,lf,rg);\n\tint ans=0,mid=(lf+rg)>>1;\n\tif(l<=mid)\n\t{\n\t\tans=(ans+query(o<<1,lf,mid,l,r))%mod;\n\t}\n\tif(mid<r)\n\t{\n\t\tans=(ans+query(o<<1|1,mid+1,rg,l,r))%mod;\n\t}\n\treturn ans;\n}\nint qpath(int x,int y)\n{\n\tint ans=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t{\n\t\t\tswap(x,y);\n\t\t}\n\t\tans=(ans+query(1,1,n,in[top[x]],in[x])+mod)%mod;\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y])\n\t{\n\t\tswap(x,y);\n\t}\n\tans=(ans%mod+query(1,1,n,in[y],in[x])%mod+mod)%mod;\n\treturn (ans+mod)%mod;\n}\nsigned main()\n{\n\tcin>>n;\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&fa[i]);\n\t\tvc[fa[i]].push_back(i);\n\t}\n\tdfs1(1);\n\tdfs2(1,1); \n\tcin>>q;\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tint opt,x,y,z;\n\t\tscanf(\"%lld%lld\",&opt,&x);\n\t\tif(opt==1)\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&y,&z);\n\t\t\tmodify(1,1,n,in[x],in[x],y);\n\t\t\tmodify(1,1,n,in[x]+1,out[x],-z);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout<<qpath(1,x)<<\"\\n\";\n\t\t}\n\t}\n}\n```",
        "postTime": 1584017736,
        "uid": 48265,
        "name": "decoqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF396C \u3010On Changing Tree\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF396C)\n\n---\n\n\u6ca1\u6709\u4ec0\u4e48\u601d\u7ef4\u96be\u5ea6\u7684\u65b9\u6cd5\uff0c\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u6ca1\u6709\u6811\u5256\u3002\n\n\u7531\u4e8e\u662f\u5bf9 $\\mathrm{v}$ \u7684\u5b50\u6811\uff0c\u6240\u4ee5\u6df1\u5ea6\u90fd\u6bd4 $\\mathrm{v}$ \u5927\u3002\n\n\u7ef4\u62a4\u533a\u95f4\u6df1\u5ea6\uff0c\u533a\u95f4\u957f\u5ea6\uff0c\u554a\uff0c\u8fd9\u7684 $k$ \u662f\u7ebf\u6bb5\u6811\u4e0b\u6807\u3002\n\n\u4e00\u4e2a\u533a\u95f4\u7684\u4fee\u6539\uff0c\u5c31\u662f $dep_v \\times len_k \\times K - sum_k \\times x$\u3002\n\n\u7136\u540e\u4e09\u4e2a $\\operatorname{tag}$ \u7ef4\u62a4 $k,x,dep_v\\times x$ \u5c31\u662f\u4e86\u3002 \n\n```cpp\n#include <map>\n#include <queue>\n#include <cmath>\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nchar buf[1 << 23],*p1 = buf,*p2 = buf,obuf[1 << 23],*O = obuf;\n#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1 << 21,stdin),p1 == p2) ? EOF : *p1 ++)\n#define putchar(x) *O ++ = x\n\ntemplate<typename T>void read(T &x) {\n\tx = 0;T f = 1;char ch = getchar();\n\twhile (!isdigit(ch)) {if (ch == '-') f = -1;ch = getchar();}\n\twhile (isdigit(ch)) {x = (x << 3) + (x << 1) + ch - '0';ch = getchar();}\n\tx *= f;\n}\nint read() {\n\tint x = 0, f = 1;char ch = getchar();\n\twhile (!isdigit(ch)) {if (ch == '-') f = -1;ch = getchar();}\n\twhile (isdigit(ch)) {x = (x << 3) + (x << 1) + ch - '0';ch = getchar();}\n\treturn x *= f;\n}\ntemplate<typename T>void print(T x) {\n\tif (x < 0) putchar('-'),x = -x;\n\tif (x > 9) print(x / 10);\n\tputchar(x % 10 + '0');\n}\n\ntemplate<typename T>T Abs(T x) {return x < 0 ? -x : x;}\ntemplate<typename T>T Min(T x,T y) {return x < y ? x : y;}\ntemplate<typename T>T Max(T x,T y) {return x > y ? x : y;}\ntemplate<typename T>void Swap(T &x,T &y) {T z = x;x = y;y = z;}\n\nconst int N = 3e5 + 5;\nconst int MOD = 1e9 + 7;\n\nint nxt[N],ver[N],head[N],tot;\nvoid addEdge(int u,int v) {nxt[++ tot] = head[u];ver[tot] = v;head[u] = tot;}\n\nint n,m,tim;\nint dfn[N],dep[N],sz[N],s[N];\nint t[N << 2],tag[N << 2],lazy[N << 2],lazytag[N << 2],sum[N << 2],len[N << 2];\n\nvoid dfs(int u,int pre) {\n\tsz[u] = 1;\n\tdfn[u] = ++ tim;\n\tdep[u] = dep[pre] + 1;\n\ts[tim] = s[tim - 1] + dep[u];\n\tfor (int e = head[u] ; e ; e = nxt[e]) {\n\t\tint v = ver[e];\n\t\tif (v == pre) continue;\n\t\tdfs(v,u);\n\t\tsz[u] += sz[v];\n\t}\n}\n\nvoid build(int l,int r,int k) {\n\tsum[k] = s[r] - s[l - 1];\n\tlen[k] = r - l + 1;\n\tif (l == r) {\n\t\tt[k] = lazytag[k] = lazy[k] = tag[k] = 0;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tbuild(l,mid,k << 1);\n\tbuild(mid + 1,r,k << 1 | 1);\n}\n\nvoid pushdown(int k) {\n\ttag[k << 1] = (tag[k << 1] + tag[k]) % MOD;\n\ttag[k << 1 | 1] = (tag[k << 1 | 1] + tag[k]) % MOD;\n\tlazy[k << 1] = (lazy[k << 1] + lazy[k]) % MOD;\n\tlazy[k << 1 | 1] = (lazy[k << 1 | 1] + lazy[k]) % MOD;\n\tlazytag[k << 1] = (lazytag[k << 1] + lazytag[k]) % MOD;\n\tlazytag[k << 1 | 1] = (lazytag[k << 1 | 1] + lazytag[k]) % MOD;\n\tt[k << 1] = (t[k << 1] - 1ll * sum[k << 1] * lazy[k] + 1ll * len[k << 1] * tag[k] + 1ll * len[k << 1] * lazytag[k]) % MOD;\n\tt[k << 1 | 1] = (t[k << 1 | 1] - 1ll * sum[k << 1 | 1] * lazy[k] + 1ll * len[k << 1 | 1] * tag[k] + 1ll * len[k << 1 | 1] * lazytag[k]) % MOD;\n\ttag[k] = lazytag[k] = lazy[k] = 0;\n}\n\nvoid update(int l,int r,int L,int R,int k,int d,int z,int y) {\n\tif (L <= l && r <= R) {\n\t\tt[k] = (t[k] - (sum[k] - 1ll * d * len[k]) % MOD * z % MOD + 1ll * len[k] * y) % MOD;\n\t\ttag[k] = (tag[k] + 1ll * d * z % MOD) % MOD;\n\t\tlazy[k] = (lazy[k] + z) % MOD;\n\t\tlazytag[k] = (lazytag[k] + y) % MOD;\n\t\treturn;\n\t}\n\tpushdown(k);\n\tint mid = l + r >> 1;\n\tif (L <= mid) update(l,mid,L,R,k << 1,d,z,y);\n\tif (R >  mid) update(mid + 1,r,L,R,k << 1 | 1,d,z,y);\n\tt[k] = (t[k << 1] + t[k << 1 | 1]) % MOD;\n}\n\nint query(int l,int r,int x,int k) {\n\tif (l == r) return t[k];\n\tpushdown(k);\n\tint mid = l + r >> 1;\n\tif (x <= mid) return query(l,mid,x,k << 1);\n\tif (x >  mid) return query(mid + 1,r,x,k << 1 | 1);\n}\n\nint main () {\n\tread(n);\n\tfor (int i = 2 ; i <= n ; ++ i)\n\t\taddEdge(read(),i);\n\tdfs(1,0);\n\tread(m);\n\tbuild(1,n,1);\n\tint op,v,x,k;\n\tfor (int i = 1 ; i <= m ; ++ i) {\n\t\tread(op);\n\t\tif (op == 1) {\n\t\t\tread(v);read(x);read(k);\n\t\t\tupdate(1,n,dfn[v],dfn[v] + sz[v] - 1,1,dep[v],k,x);\n\t\t}\n\t\telse {\n\t\t\tread(v);\n\t\t\tprint((query(1,n,dfn[v],1) % MOD + MOD) % MOD),putchar('\\n');\n\t\t}\n\t}\n\tfwrite(obuf,O - obuf,1,stdout);\n\treturn 0;\n}\n```",
        "postTime": 1605856477,
        "uid": 163516,
        "name": "Strelitzia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF396C \u3010On Changing Tree\u3011"
    },
    {
        "content": "\u8981\u6c42\u652f\u6301\u4fee\u6539\u5b50\u6811\u548c\u67e5\u8be2\u6743\u503c\n\n\u65e0\u8111\u4e0a\u6811\u5256\n\n\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\n\n\u6211\u4eec\u4ee4$newval = val + deep[x] * k$\n\n\u5176\u4e2d$x$\u4e3a\u8282\u70b9\uff0c$val$\u4e3a\u52a0\u7684\u6743\u503c\uff0c$k$\u5c31\u662f\u9898\u610f\u4e2d\u7684$k$\n\n\u9047\u5230\u4e00\u4e2a\u8282\u70b9$y$\uff0c\u6211\u4eec\u5c31\u628a\u4ed6\u7684\u6743\u503c\u52a0\u4e0a$newval - k * deep[y]$\n\n\u8fd9\u6837\u8f6c\u6362\u540e\u7ebf\u6bb5\u6811\u652f\u6301\u52a0\u64cd\u4f5c\u5c31\u5bb9\u6613\u7ef4\u62a4\u4e86\n\n```cpp\n#define int long long\n#define next kkksc03\n#define mid ((l+r)>>1)\n#define lson (o<<1)\n#define rson (o<<1|1)\n#define R register\n#define PP pair<int, int>\n#define mp(x, y) make_pair(x, y)\n\n#define size dedede//cf\n\nconst int P = 1e9 + 7;\nconst int N = 3e5 + 10;\n\nint n, m;\n\nint cut, head[N], ver[N << 1], next[N << 1];\ninline void add(int x, int y)\n{\n\tver[++cut] = y; next[cut] = head[x]; head[x] = cut;\n}\n\nint deep[N], f[N], size[N], son[N], id[N], tot, dede[N];\ninline void dfs1(int x, int fa)\n{\n\tdeep[x] = deep[fa] + 1;\n\tf[x] = fa;\n\tsize[x] = 1;\n\tfor(R int i = head[x]; i; i = next[i])\n\t{\n\t\tint y = ver[i];\n\t\tif(y == fa) continue;\n\t\tdfs1(y, x);\n\t\tsize[x] += size[y];\n\t\tif(size[y] > size[son[x]]) son[x] = y;\n\t}\n}\n\ninline void dfs2(int x, int mtop)\n{\n\tid[x] = ++tot;\n\tdede[tot] = x;\n\tif(!son[x]) return;\n\tdfs2(son[x], mtop);\n\tfor(R int i = head[x]; i; i = next[i])\n\t{\n\t\tint y = ver[i];\n\t\tif(y == son[x] || y == f[x]) continue;\n\t\tdfs2(y, y);\n\t}\n}\n\nPP tree[N << 2];\nint ans[N];\n\ninline void pushdown(int o, int l1, int r1, int l2, int r2)\n{\n\tif(tree[o].first == 0 && tree[o].second == 0) return;\n\tif(l1 == r1) ans[l1] = ((ans[l1] + tree[o].first - tree[o].second * deep[dede[l1]]) % P + P) % P;\n\telse tree[lson].first = ((tree[lson].first + tree[o].first) % P + P) % P, tree[lson].second = ((tree[lson].second + tree[o].second) % P + P) % P;\n\tif(l2 == r2) ans[l2] = ((ans[l2] + tree[o].first - tree[o].second * deep[dede[l2]]) % P + P) % P;\n\telse tree[rson].first = ((tree[rson].first + tree[o].first) % P + P) % P, tree[rson].second = ((tree[rson].second + tree[o].second) % P + P) % P;\n\ttree[o].first = 0;\n\ttree[o].second = 0;\n}\n\ninline void update(int o, int l, int r, int ql, int qr, PP val)\n{\n\tif(ql <= l && r <= qr)\n\t{\n\t\tif(l == r) ans[l] = ((ans[l] + val.first - deep[dede[l]] * val.second) % P + P) % P;\n\t\telse tree[o].first = ((tree[o].first + val.first) % P + P) % P, tree[o].second = ((tree[o].second + val.second) % P + P) % P;\n\t\treturn;\n\t}\n\tpushdown(o, l, mid, mid + 1, r);\n\tif(ql <= mid) update(lson, l, mid, ql, qr, val);\n\tif(qr > mid) update(rson, mid + 1, r, ql, qr, val);\n}\n\ninline int query(int o, int l, int r, int pos)\n{\n\tif(l == r) return ans[l];\n\tpushdown(o, l, mid, mid + 1, r);\n\tif(pos <= mid) return query(lson, l, mid, pos);\n\telse return query(rson, mid + 1, r, pos);\n}\n\nsigned main()\n{\n\tinto();\n\tread(n);\n\tfor(R int i = 2, x; i <= n; i++) read(x), add(x, i), add(i, x);\n\tdfs1(1, 0);\n\tdfs2(1, 1);\n\tread(m);\n\twhile(m--)\n\t{\n\t\tR int opt, x, value, k;\n\t\tread(opt); read(x);\n\t\tif(opt == 1)\n\t\t{\n\t\t\tread(value); read(k);\n\t\t\tupdate(1, 1, n, id[x], id[x] + size[x] - 1, mp((value + deep[x] * k) % P, k));\n\t\t}\n\t\telse writeln(query(1, 1, n, id[x]));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1605705665,
        "uid": 103023,
        "name": "AvA_sleeper",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF396C \u3010On Changing Tree\u3011"
    },
    {
        "content": "# On Changing Tree\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF396C)\n## \u601d\u8def1:\u6811\u72b6\u6570\u7ec4\n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u70b9$v$\u7b97\u51fa\u5b83\u7684\u503c\u90a3\u4e48\u5c31\u662f:\n\n$$\\sum_{t=1}^{i-1} (x_t-dis[u_t,v]\\times k_t)$$\n\n$$=\\sum_{t=1}^{i-1} (x_t-(deep[v]-deep[u_t])\\times k_t)$$\n\n$$=\\sum_{t=1}^{i-1} (x_t+deep[u_t]\\times k_t)-deep[v]\\times \\sum_{t=1}^{i-1} k_t$$\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u9700\u8981\u6ee1\u8db3$u_t$\u5728$1\\to v$\u7684\u8def\u5f84\u4e0a\uff0c\u600e\u4e48\u529e\u5462\uff1f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528$dfs$\u7684\u7279\u6027\u89e3\u51b3\u5373\u53ef\uff0c\u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u76f4\u63a5\u7528\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u4e00\u4e2a\u64cd\u4f5c\u4f1a\u52a0\u5165\u5220\u9664\u5404\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\Theta(m\\log m+n)$\u3002\n## $\\text {Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define Int register int\n#define mod 1000000007\n#define int long long\n#define MAXN 300005\n\nint n,m;\n\nstruct edge\n{\n\tint v,nxt;\n}e[MAXN];\n\nint top = 1;\nint head[MAXN];\n\nvoid Add_Edge (int u,int v)\n{\n\te[++ top] = edge {v,head[u]};\n\thead[u] = top; \n}\n\nclass Bit_tree\n{\n\tprivate:\n\t\tint bit[MAXN];\n\t\tint lowbit (int x){return x & (-x);}\n\tpublic:\n\t\tvoid update (int pos,int x){for (Int i = pos;i <= m;i += lowbit (i)) (bit[i] += x) %= mod;}\n\t\tint query (int pos){int ans = 0;for (Int i = pos;i;i -= lowbit (i)) (ans += bit[i]) %= mod;return ans;}\n}Tree1,Tree2;\n\nstruct Node\n{\n\tint x,k,Index;//x,k,\u65f6\u95f4 \n};\n\nvector <int> Que[MAXN];\nvector <Node> Ins[MAXN];\n\nint Ans[MAXN];\n\nvoid dfs (int u,int dep)\n{\n\tfor (vector <Node>::iterator it = Ins[u].begin();it != Ins[u].end();++ it)\n\t\tTree1.update (it -> Index,(it -> x + dep * it -> k % mod) % mod),\n\t\tTree2.update (it -> Index,it -> k % mod);\n\tfor (vector <int>::iterator it = Que[u].begin();it != Que[u].end();++ it)\n\t\tAns[*it] = (Tree1.query (*it) + mod - dep * Tree2.query (*it) % mod) % mod;\n\tfor (Int i = head[u];i;i = e[i].nxt)\n\t{\n\t\tint v = e[i].v;\n\t\tdfs (v,dep + 1);\n\t}\n\tfor (vector <Node>::iterator it = Ins[u].begin();it != Ins[u].end();++ it)\n\t\tTree1.update (it -> Index,mod - (it -> x + dep * it -> k % mod) % mod),\n\t\tTree2.update (it -> Index,mod - it -> k % mod);\n}\n\nint read ()\n{\n\tint x = 0;char c = getchar();int f = 1;\n\twhile (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}\n\twhile (c >= '0' && c <= '9'){x = (x << 3) + (x << 1) + c - '0';c = getchar();}\n\treturn x * f;\n}\n\nvoid write (int x)\n{\n\tif (x < 0){x = -x;putchar ('-');}\n\tif (x > 9) write (x / 10);\n\tputchar (x % 10 + '0');\n}\n\nsigned main()\n{\n\tn = read ();\n\tfor (Int i = 2;i <= n;++ i)\n\t{\n\t\tint fa = read ();\n\t\tAdd_Edge (fa,i);\n\t}\n\tm = read ();\n\tfor (Int i = 1,x,k;i <= m;++ i)\n\t{\n\t\tAns[i] = -1;\n\t\tint type = read (),u = read ();\n\t\tif (type == 1) x = read (),k = read (),Ins[u].push_back(Node {x,k,i});\n\t\telse Que[u].push_back (i);\n\t}\n\tdfs (1,1);\n\tfor (Int i = 1;i <= m;++ i) if (Ans[i] != -1) write (Ans[i]),putchar ('\\n');\n\treturn 0;\n}\n```\n## \u601d\u8def2:\u7ebf\u6bb5\u6811\n\u5176\u5b9e\u5f88\u5957\u8def\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u662f\u7ed9\u5b50\u6811\u5185\u52a0\u4e0a\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\uff08\u4e0d\u662f\u5f88\u4e25\u8c28\uff0c\u5927\u5bb6\u610f\u4f1a\u4e00\u4e0b\uff09\uff0c\u8ddf[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P4243)\u6709\u4e9b\u76f8\u4f3c\u3002\n\n\u4e8e\u662f\u5c31\u5341\u5206\u5957\u8def\u4e86\u3002\u6211\u4eec\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u5dee\u5206\u6570\u7ec4\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c31\u76f8\u5f53\u4e8e\u7ed9$u$\u8282\u70b9\u52a0\u4e0a$x$,\u7ed9\u5b50\u6811\u5185\u5176\u4ed6\u8282\u70b9\u52a0\u4e0a$-k$\u3002\n\n\u67e5\u8be2\u64cd\u4f5c\u5c31\u76f8\u5f53\u4e8e\u8be2\u95ee$1\\to u$\u7684\u8def\u5f84\u548c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\Theta(m\\log ^2n+n)$\u3002\n## $\\text {Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define Int register int\n#define mod 1000000007\n#define int long long\n#define MAXN 300005\n\nint n,m;\n\nstruct edge\n{\n\tint v,nxt;\n}e[MAXN];\n\nint toop = 1;\nint head[MAXN];\n\nvoid Add_Edge (int u,int v)\n{\n\te[++ toop] = edge {v,head[u]};\n\thead[u] = toop;\n}\n\nint Index;\nint par[MAXN],dep[MAXN],son[MAXN],top[MAXN],dfn[MAXN],size[MAXN];\n\nvoid dfs1 (int u,int fa)\n{\n\tpar[u] = fa,size[u] = 1,dep[u] = dep[fa] + 1;\n\tfor (Int i = head[u];i;i = e[i].nxt)\n\t{\n\t\tint v = e[i].v;\n\t\tdfs1 (v,u);\n\t\tsize[u] += size[v];\n\t\tif (size[v] > size[son[u]]) son[u] = v;\n\t}\n}\n\nvoid dfs2 (int u,int Top)\n{\n\ttop[u] = Top;\n\tdfn[u] = ++ Index;\n\tif (son[u]) dfs2 (son[u],Top);\n\tfor (Int i = head[u];i;i = e[i].nxt)\n\t{\n\t\tint v = e[i].v;\n\t\tif (v == son[u]) continue;\n\t\tdfs2 (v,v);\n\t}\n}\n\nstruct node\n{\n\tint l,r,sum,lazy;\n}tree[MAXN << 2];\n\nvoid Pushup (int i)\n{\n\ttree[i].sum = tree[i << 1].sum + tree[i << 1 | 1].sum;\n}\n\nvoid Pushdown (int i)\n{\n\tif (!tree[i].lazy) return ;\n\t(tree[i << 1].sum += (tree[i << 1].r - tree[i << 1].l + 1) * tree[i].lazy % mod) %= mod;\n\t(tree[i << 1 | 1].sum += (tree[i << 1 | 1].r - tree[i << 1 | 1].l + 1) * tree[i].lazy % mod) %= mod;\n\t(tree[i << 1].lazy += tree[i].lazy) %= mod,(tree[i << 1 | 1].lazy += tree[i].lazy) %= mod;\n\ttree[i].lazy = 0;\n}\n\nvoid build (int i,int l,int r)\n{\n\ttree[i].l = l,tree[i].r = r;\n\tif (l == r) return ;\n\tint mid = (l + r) >> 1;\n\tbuild (i << 1,l,mid);\n\tbuild (i << 1 | 1,mid + 1,r); \n}\n\nvoid update (int i,int l,int r,int val)\n{\n\tif (tree[i].l > r || l > tree[i].r) return ;\n\tif (tree[i].l >= l && tree[i].r <= r) return (tree[i].sum += val * (tree[i].r - tree[i].l + 1)) %= mod,(tree[i].lazy += val) %= mod,void ();\n\tPushdown (i);\n\tupdate (i << 1,l,r,val);\n\tupdate (i << 1 | 1,l,r,val);\n\tPushup (i);\n}\n\nint query (int i,int l,int r)\n{\n\tif (tree[i].l > r || l > tree[i].r) return 0;\n\tif (tree[i].l >= l && tree[i].r <= r) return tree[i].sum;\n\tPushdown (i);\n\treturn (query (i << 1,l,r) + query (i << 1 | 1,l,r)) % mod;\n}\n\nint Tree_query (int u,int v)\n{\n\tint Ans = 0;\n\twhile (top[u] ^ top[v])\n\t{\n\t\tif (dep[top[u]] < dep[top[v]]) swap (u,v);\n\t\tAns = (Ans + query (1,dfn[top[u]],dfn[u]));\n\t\tu = par[top[u]];\n\t}\n\tif (dep[u] > dep[v]) swap (u,v);\n\tAns = (Ans + query (1,dfn[u],dfn[v])) % mod;\n\treturn (Ans % mod + mod) % mod;\n}\n\nint read ()\n{\n\tint x = 0;char c = getchar();int f = 1;\n\twhile (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}\n\twhile (c >= '0' && c <= '9'){x = (x << 3) + (x << 1) + c - '0';c = getchar();}\n\treturn x * f;\n}\n\nvoid write (int x)\n{\n\tif (x < 0){x = -x;putchar ('-');}\n\tif (x > 9) write (x / 10);\n\tputchar (x % 10 + '0');\n}\n\nsigned main()\n{\n\tn = read ();\n\tfor (Int i = 2;i <= n;++ i)\n\t{\n\t\tint fa = read ();\n\t\tAdd_Edge (fa,i);\n\t}\n\tdfs1 (1,0);\n\tdfs2 (1,1);\n\tbuild (1,1,n);\n\tm = read ();\n\tfor (Int i = 1;i <= m;++ i)\n\t{\n\t\tint type = read (),u = read (),x,k;\n\t\tif (type == 1) x = read (),k = read (),update (1,dfn[u],dfn[u],x),update (1,dfn[u] + 1,dfn[u] + size[u] - 1,mod - k);\n\t\telse write (Tree_query (1,u)),putchar ('\\n'); \n\t}\n\treturn 0;\n}\n```\n## \u540e\u8bb0\n\u53ef\u4ee5\u6765\u4f53\u4f1a\u4e00\u4e0b\u79bb\u7ebf\u548c\u5728\u7ebf\u7684\u65f6\u95f4\u5dee\u8ddd:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/zkspurtm.png)",
        "postTime": 1584756701,
        "uid": 124781,
        "name": "Walking_Dead",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF396C \u3010On Changing Tree\u3011"
    },
    {
        "content": "\u6253\u5e7f\u544a->[\u8fd9\u91cc](https://www.cnblogs.com/bztMinamoto/p/9456692.html)\n\n\u8bdd\u8bf4\u771f\u6ca1\u60f3\u5230\u8fd9\u9898\u7adf\u7136\u8fd9\u4e48\u7b80\u5355\u2026\u2026\u6b7b\u6d3b\u90fd\u60f3\u4e0d\u51fa\u6765\u2026\u2026\n\n\u5148dfs\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684dfs\u5e8f\uff0c\u4ee5\u53ca\u5b50\u6811\u4ee3\u8868\u7684\u533a\u95f4$ls$\u548c$rs$\uff0c\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u70b9\u7684\u6df1\u5ea6$dep$\n\n\u5047\u8bbe\u5148$add(ls[v],x+dep[v]*k),add(rs[v]+1,-x-dep[v]*k)$\uff0c\u7136\u540e\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u524d\u7f00\u548c\uff0c\u6811\u72b6\u6570\u7ec4\u8bbe\u4e3a$c1$\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c$v$\u8fd9\u4e2a\u70b9\u591a\u52a0\u53bb\u4e86$dep[v]*k$\uff0c\u8981\u51cf\u6389\u3002\u540c\u7406\u53ef\u5f97\uff0c$v$\u7684\u6240\u6709\u5b50\u6811\u90fd\u8981\u51cf\u6389$dep[j]*k$\uff08$j$\u4e3a$v$\u7684\u5b50\u8282\u70b9\uff09\n\n\u53ef\u4ee5\u8bc1\u660e\u4ee5\u4e0a\u8fd9\u4e48\u4e71\u641e\u4e4b\u540e\u6bcf\u4e00\u4e2a\u70b9\u7684\u503c\u90fd\u52a0\u4e0a\u4e86\u6b63\u786e\u7684\u6570\n\n\u4e71\u8bc1\uff1a$j$\u8282\u70b9\u7ecf\u8fc7\u8fd9\u4e00\u64cd\u4f5c\u540e\u52a0\u4e0a\u4e86$dep[v]*k-dep[j]*k=k*(dep[j]-dep[v])=k*dis[v,j]$\n\n\u7136\u540e\u8bc1\u660e\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u52a0\u4e0a\u4e86\u6b63\u786e\u7684\u6570\u503c\n\n\u90a3\u4e48\u53ea\u8981\u518d\u5f00\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u524d\u7f00$k$\u5c31\u53ef\u4ee5\u4e86\n\n\u67e5\u8be2\u7684\u7b54\u6848\u5c31\u662f$sum(ls[v],c1)-sum(ls[v],c2)*dep[v]$\n```\n//minamoto\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\n#define getc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){\n    #define num ch-'0'\n    char ch;bool flag=0;int res;\n    while(!isdigit(ch=getc()))\n    (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getc());res=res*10+num);\n    (flag)&&(res=-res);\n    #undef num\n    return res;\n}\nchar sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(ll x){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]='\\n';\n}\nconst int N=300005,mod=1e9+7;\nint ver[N],head[N],Next[N],dep[N];\nint ls[N],rs[N];\nll c[2][N];\nint n,tot,q,cnt;\ninline void add(int x,ll val,int k){\n    for(int i=x;i<=n;i+=i&(-i))\n    (c[k][i]+=val)%=mod;\n}\ninline ll sum(int x){\n    ll a=0,b=0;\n    for(int i=ls[x];i;i-=i&(-i)){\n        a+=c[0][i],b+=c[1][i];\n    }\n    return ((a-b*dep[x])%mod+mod)%mod;\n}\nvoid dfs(int u,int fa){\n    ls[u]=++cnt;\n    dep[u]=dep[fa]+1;\n    for(int i=head[u];i;i=Next[i]) dfs(ver[i],u);\n    rs[u]=cnt;\n}\nint main(){\n    //freopen(\"testdata.in\",\"r\",stdin);\n    n=read();\n    for(int i=2;i<=n;++i){\n        int fa=read();\n        ver[++tot]=i,Next[tot]=head[fa],head[fa]=tot;\n    }\n    dfs(1,0);\n    q=read();\n    while(q--){\n        int opt=read(),v=read();\n        if(opt&2) print(sum(v));\n        else{\n            ll x=read(),k=read();\n            add(ls[v],x+dep[v]*k,0);\n            add(rs[v]+1,-x-dep[v]*k,0);\n            add(ls[v],k,1);\n            add(rs[v]+1,-k,1);\n        }\n    }\n    Ot();\n    return 0;\n}\n```",
        "postTime": 1533895933,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF396C \u3010On Changing Tree\u3011"
    }
]