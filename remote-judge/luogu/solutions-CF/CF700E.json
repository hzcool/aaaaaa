[
    {
        "content": "## right\u96c6\u5408\u795e\u9898 + \u795e\u4ed9\u7ed3\u8bba\u9898 \n\n### \u7ed3\u8bba\uff081\uff09\n\n\u6bcf\u6b21\u53ea\u7b97$s[i-1]$\u662f$s[i]$\u7684\u540e\u7f00\u7684\u60c5\u51b5\uff0c\u663e\u7136\u662f\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u7684\u3002\n\n\u56e0\u4e3a\u5982\u679c$s[i-1]$\u4e0d\u662f$s[i]$\u7684\u540e\u7f00\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u4e0d\u4e0e$s[i-1]$\u5339\u914d\u7684\u90a3\u540e\u9762\u4e00\u622a\u90fd\u53bb\u6389\uff0c$s[i]$\u5c31\u4f1a\u53d8\u77ed\u3002\n\n\u5982\u679c\u6ca1\u53d8\u77ed\u4e4b\u524d\u5b83\u5728\u67d0\u4e00\u4e2a\u5b57\u7b26\u4e32\u91cc\u51fa\u73b0\u8fc7\u4e86\uff0c\u90a3\u4e48\u53d8\u77ed\u540e\u663e\u7136\u8fd8\u662f\u51fa\u73b0\u8fc7\u7684\u3002\n\n\u8fd9\u4e2a\u7ed3\u8bba\u662f\u663e\u7136\u7684\uff0c\u4e5f\u6bd4\u7ed3\u8bba\uff082\uff09\u5bb9\u6613\u7406\u89e3\u3002 \n\n\u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a\u3002\n\u5bb9\u6613\u60f3\u5230\u76f4\u63a5\u5728parent\u6811\u4e0a\u81ea\u4e0a\u5411\u4e0bDP\uff1b \n\n\u8003\u8651\u5982\u4f55\u5224\u65adx\u7684\u7956\u5148y\u6240\u4ee3\u8868\u7684\u5b50\u4e32\u662f\u5426\u5728x\u4e2d\u51fa\u73b0\u4e86\u4e24\u6b21\uff1a\n$len[x]$\u8868\u793a$x$\u4ee3\u8868\u7684\u6700\u957f\u5b50\u4e32\u957f\u5ea6\uff0c\u5047\u8bbe$x$\u7684$right$\u96c6\u5408\u4e2d\u5b58\u5728\u4e00\u4e2a\u4f4d\u7f6e$p$\uff0c\n\u90a3\u4e48$p$\u663e\u7136\u5df2\u7ecf\u5728$y$\u7684$right$\u96c6\u5408\u4e2d\u4e86\uff0c\n\u6211\u4eec\u53ea\u8981\u5224\u65ad$y$\u7684$right$\u96c6\u5408\u4e2d\u6709\u6ca1\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\n\u5728\u533a\u95f4$[pos(x)-len(x)+len(y),pos(x)-1]$\u4e2d\u5224\u65ady\u4e32\u662f\u5426\u51fa\u73b0\u4e24\u6b21\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u5bb9\u6613\u7ebf\u6bb5\u6811\u5408\u5e76\u5b8c\u6210\u3002 \n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u4ee5\u4e0a\u7684\u505a\u6cd5\u90fd\u53ea\u8003\u8651\u7236\u4eb2\u4ee3\u8868\u7684\u6700\u957f\u4e32\u90fd\u5fc5\u987b\u51fa\u73b0\u5728x\u4ee3\u8868\u7684\u6700\u957f\u4e32\u4e2d\u3002\n\n\u8fd9\u6837\u6709\u6ca1\u6709\u95ee\u9898\u5462\uff1f\u53c8\u5982\u4f55dp\u5462\uff1f \n\n### \u7ed3\u8bba\uff082\uff09\n\n\u8bbes\u662f\u67d0\u4e2a\u8282\u70b9u\u8868\u793a\u7684\u6700\u957f\u4e32,v\u662fu\u7684\u7956\u5148\uff08\u5373\u4e32\u7684\u540e\u7f00\uff09\uff0c \n\u5219v\u8868\u793a\u7684\u6240\u6709\u5b57\u7b26\u4e32\u5728s\u4e0a\u7684\u5339\u914d\u60c5\u51b5\u662f\u7b49\u4ef7\u7684\uff08\u5373\u4e0d\u4f1a\u51fa\u73b0\u6709\u7684\u80fd\u5339\u914d\u3001\u6709\u7684\u4e0d\u80fd\uff09\u3002\n\n\u8bc1\u660e\u7684\u8bdd\uff0c\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n$(1)\\ \\ \\ \\ \\ \\ abcb$\n\n$(2)\\ \\ \\ \\ babcb$\n\n$(s)\\ \\ \\ \\ \\ \\ abcbabcb$\n\n\u8003\u8651\u53cd\u8bc1\uff1a \n\n\u5047\u8bbe\u8fd9\u91cc(s)\u7684\u540e\u7f00(1)(2)\u5747\u4e3av\u8282\u70b9\u8868\u793a\u7684\u4e32\uff0c\uff081\uff09\u6210\u529f\u5339\u914d\u800c\uff082\uff09\u4e0d\u884c\u3002\n\n\u56e0\u4e3a(2)\uff0c\u6240\u6709\u663e\u7136\u8fd8\u5b58\u5728\u7740\u8fd9\u4e2a\u4e32\uff1a\n\n$(3)\\ \\ \\ \\ babcbabcb$\n\n\u53c8\u56e0\u4e3a(s)\u8868\u793a\u7684\u5df2\u7ecf\u662fu\u7684\u6700\u957f\u4e32\u4e86\uff0c\u6240\u4ee5(3)\u4e32\u4e00\u5b9a\u6765\u81ea\u53e6\u4e00\u4e2a\u8282\u70b9\u3002\n\n\u8bbe(3)\u4e32\u6765\u81ea\u53e6\u4e00\u4e2a\u8282\u70b9w\uff0cu\u662fw\u7684\u7956\u5148\u3002\n\n\u6839\u636e\u5b9a\u4e49\u77e5\n$$ |Right(u)| > |Right(w)| $$\n\n\u8fd9\u6837\uff0c\u5219\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u4f4d\u7f6ep\n$$p \u2208Right(u) - Right(w)$$\n\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u53ea\u51fa\u73b0\u4e86(s)\u4e32\u800c\u6ca1\u6709(3)\u4e32\u3002\n\n\u8fd9\u6837\u5c31\u5b58\u5728\u4e00\u4e2a\u4f4d\u7f6e\u4f7f\u5f97\u53ea\u51fa\u73b0(1)\u4e32\u800c\u6ca1\u6709(2)\u4e32\u3002\n\n\u8fd9\u6837\u5f97\u5230(1)(2)\u4e24\u4e32$Right$\u96c6\u5408\u4e0d\u540c\uff1f\uff1f \n\n\u8fd9\u4e0e\u5b83\u4eec\u6765\u81ea\u540c\u4e00\u4e2a\u8282\u70b9\u77db\u76fe\uff01\n\n\u8bc1\u6bd5. \n\n\u6709\u4e86\u7ed3\u8bba\uff082\uff09\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8bbe\u8ba1dp\u72b6\u6001\u4e86\uff1a \n\n$dp[i]$\u8868\u793a\u4f7f\u7528\u8282\u70b9i\u6700\u957f\u7684\u90a3\u4e2a\u5b57\u7b26\u4e32\u7684\u7b54\u6848\uff0c\n\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7956\u5148\u8282\u70b9j\u6700\u957f\u7684\u90a3\u4e2a\u5b57\u7b26\u4e32\u8f6c\u79fb\uff08\u56e0\u4e3a\u90fd\u7b49\u4ef7\u554a\uff09\n\n\u8fd9\u6837\u4e00\u6765\u6574\u4e2adp\u8fc7\u7a0b\u90fd\u662f\u5ffd\u7565\u90a3\u90e8\u5206\u77ed\u4e32\u7684\uff0c\u5c31\u975e\u5e38\u81ea\u7136\u4e86\u3002 \n\n\u8fd9\u4e2adp\u663e\u7136\u53ef\u4ee5\u500d\u589e\uff0c\u5bb9\u6613\u505a\u5230\u7ebf\u6027\u3002\u5176\u4ed6\u9898\u89e3\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\u3002\n\n```cpp\n#include<set>\n#include<map>\n#include<cmath>\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#define pb push_back\n#define fi first\n#define se second\n#define mp make_pair\nusing namespace std;\n\ntypedef double db;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pi;\n\nconst int N=400005;\n\nchar S[N];\nint n,tot(1),la,ch[N][26],len[N],fa[N],pos[N],rt[N],cnt,rk[N],ar[N],dp[N],fr[N],Ans;\n\nstruct node {\n\tint lc,rc;\n}t[N*20];\n\nvoid Upd(int &u,int l,int r,int p)\n{\n\tif(!u)\n\t\tu=++cnt;\n\tif(l!=r)\n\t{\n\t\tint m=(l+r)>>1;\n\t\tif(m>=p) Upd(t[u].lc,l,m,p);\n\t\telse Upd(t[u].rc,m+1,r,p);\n\t}\n}\n\nint Merge(int x,int y,int l,int r)\n{\n\tif(!x||!y)\n\t\treturn x+y;\n\tint o=++cnt;\n\tif(l!=r)\n\t{\n\t\tint m=(l+r)>>1;\n\t\tt[o].lc=Merge(t[x].lc,t[y].lc,l,m);\n\t\tt[o].rc=Merge(t[x].rc,t[y].rc,m+1,r);\n\t}\n\treturn o;\n}\n\nint Query(int u,int l,int r,int L,int R)\n{\n\tif(!u||l>R||r<L)\n\t\treturn 0;\n\tif(l>=L&&r<=R)\n\t\treturn 1;\n\tint m=(l+r)>>1;\n\treturn Query(t[u].lc,l,m,L,R)||Query(t[u].rc,m+1,r,L,R);\n}\n\nvoid extend(int id,int where)\n{\n\tint p=la;\n\tint np=++tot;\n\tlen[np]=len[p]+1;\n\tpos[np]=where;\n\twhile(p && !ch[p][id])\n\t{\n\t\tch[p][id]=np;\n\t\tp=fa[p];\n\t}\n\tif(!p)\n\t{\n\t\tfa[np]=1;\n\t}\n\telse\n\t{\n\t\tint q=ch[p][id];\n\t\tif(len[p]+1==len[q])\n\t\t{\n\t\t\tfa[np]=q;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint nq=++tot;\n\t\t\tlen[nq]=len[p]+1;\n\t\t\tfa[nq]=fa[q];\n\t\t\tpos[nq]=pos[q];\n\t\t\tfor(int i=0; i<26; i++)\n\t\t\t\tch[nq][i]=ch[q][i];\n\t\t\tfa[np]=fa[q]=nq;\n\t\t\twhile(p && ch[p][id]==q)\n\t\t\t{\n\t\t\t\tch[p][id]=nq;\n\t\t\t\tp=fa[p];\n\t\t\t}\n\t\t}\n\t}\n\tla=np;\n\tUpd(rt[la],1,n,where);\n}\n\nvoid Sort()\n{\n\tfor(int i=1; i<=tot; i++) ar[len[i]]++;\n\tfor(int i=1; i<=n; i++) ar[i]+=ar[i-1];\n\tfor(int i=1; i<=tot; i++) rk[ar[len[i]]--]=i;\n}\n\nint main()\n{\n\tscanf(\"%d%s\",&n,S+1);\n\tla=1;\n\tfor(int i=1; i<=n; i++) extend(S[i]-'a',i);\n\tSort();\n\tfor(int i=tot; i!=1; i--)\n\t{\n\t\tint u=rk[i],v=fa[u];\n\t\trt[v]=Merge(rt[v],rt[u],1,n);\n\t}\n\tfor(int i=2; i<=tot; i++)\n\t{\n\t\tint u=rk[i],v=fa[u];\n\t\tif(v==1)\n\t\t{\n\t\t\tdp[u]=1;\n\t\t\tfr[u]=u;\n\t\t}\n\t\telse if(Query(rt[fr[v]],1,n,pos[u]-len[u]+len[fr[v]],pos[u]-1))\n\t\t{\n\t\t\tdp[u]=dp[v]+1;\n\t\t\tfr[u]=u;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdp[u]=dp[v];\n\t\t\tfr[u]=fr[v];\n\t\t}\n\t\tAns=max(Ans,dp[u]);\n\t}\n\tprintf(\"%d\",Ans);\n\treturn 0;\n}\n",
        "postTime": 1557059260,
        "uid": 13052,
        "name": "iostream",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF700E \u3010Cool Slogans\u3011"
    },
    {
        "content": "> [CF700E Cool Slogans](https://codeforces.com/contest/700/problem/E)\n\n## \u9898\u610f\n\n- \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32 $s$\u3002\n- \u4f60\u8981\u6784\u9020\u4e00\u4e2a\u6700\u957f\u7684\u5b57\u7b26\u4e32\u5e8f\u5217 $t_{1\\dots k}$\uff0c\u6ee1\u8db3\uff1a\n  1. \u5bf9\u4e8e $i \\in [1,k]$\uff0c$t_i$ \u4e3a $s$ \u7684\u5b50\u4e32\u3002\n  2. \u5bf9\u4e8e $i \\in [2,k]$\uff0c$t_i$ \u5728 $t_{i-1}$ \u4e2d\u51fa\u73b0\u4e86\u81f3\u5c11\u4e24\u6b21\u3002\n- $n \\le 2 \\times 10^5$\u3002\n\n## \u9898\u89e3\n\n\u5bf9\u5b57\u7b26\u4e32\u5efa SAM\uff0c\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5408\u5e76\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 $\\operatorname{endpos}$ \u96c6\u5408\u3002\n\n\u5728 $\\operatorname{parent}$ \u6811\u4e0a\u4ece\u6839\u5411\u4e0b dp\uff0c\u8bbe $f_i$ \u8868\u793a\u5230\u8282\u70b9 $i$ \u65f6\u7684\u6700\u5927\u503c\u3002\n\n\u5982\u679c\u4e00\u4e2a\u7236\u8282\u70b9\u7684\u5b50\u4e32\u5728\u5b50\u8282\u70b9\u7684\u5b50\u4e32\u4e2d\u51fa\u73b0\u4e86\u81f3\u5c11\u4e24\u6b21\uff0c\u5219\u8f6c\u79fb\u65f6 $f$ \u52a0\u4e00\uff0c\u5426\u5219\u4e0d\u53d8\u3002\n\n\u8003\u8651\u5982\u4f55\u5224\u65ad\u662f\u5426\u51fa\u73b0\u4e86\u81f3\u5c11\u4e24\u6b21\uff0c\u8bbe\u6b64\u65f6\u7684\u5b50\u8282\u70b9\u4e3a $x$\uff0c\u7236\u8282\u70b9\u4e3a $pa_x$\u3002\n\n\u627e\u5230 $x$ \u5bf9\u5e94\u7684 $\\operatorname{endpos}$ \u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e $pos$\uff0c\u5219 $pos$ \u5904 $pa_x$ \u7684\u5b50\u4e32\u4e00\u5b9a\u51fa\u73b0\u4e86\u4e00\u6b21\u3002\n\n\u90a3\u4e48\u53e6\u4e00\u6b21\u53ea\u8981\u5728 $[pos - \\operatorname{len}(x) + \\operatorname{len}(pa_x), pos - 1]$ \u4e2d\u6709\u51fa\u73b0\u5c31\u884c\u4e86\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n \\log n)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\nconst int N = 2e5 + 7;\nstruct T {\n\tint l, r;\n} t[N<<6|1];\nint rt[N<<1], f[N<<1], g[N<<1], tot, ans = 1;\n\nint insert(int l, int r, int x) {\n\tint p = ++tot;\n\tif (l == r) return p;\n\tint mid = (l + r) >> 1;\n\tif (x <= mid) t[p].l = insert(l, mid, x);\n\telse t[p].r = insert(mid + 1, r, x);\n\treturn p;\n}\n\nint merge(int p, int q) {\n\tif (!p || !q) return p | q;\n\tint o = ++tot;\n\tt[o].l = merge(t[p].l, t[q].l);\n\tt[o].r = merge(t[p].r, t[q].r);\n\treturn o;\n}\n\nbool ask(int p, int l, int r, int L, int R) {\n\tif (!p) return 0;\n\tif (L <= l && R >= r) return 1;\n\tint mid = (l + r) >> 1;\n\tif (L <= mid && ask(t[p].l, l, mid, L, R)) return 1;\n\tif (R > mid && ask(t[p].r, mid + 1, r, L, R)) return 1;\n\treturn 0;\n}\n\nstruct SAM {\n\tint n, l, ch[N<<1][26], len[N<<1], pa[N<<1], t;\n\tchar s[N];\n\tint pos[N<<1];\n\tinline void init() { pa[0] = -1; }\n\tinline void add(int c, int o) {\n\t\tint w = ++t, p = l;\n\t\tlen[w] = len[l] + 1, pos[w] = o;\n\t\twhile (~p && !ch[p][c]) ch[p][c] = w, p = pa[p];\n\t\tif (!~p) return pa[l=w] = 0, void();\n\t\tint q = ch[p][c];\n\t\tif (len[p] + 1 == len[q]) return pa[l=w] = q, void();\n\t\tint k = ++t;\n\t\tpa[k] = pa[q], pos[k] = pos[q], memcpy(ch[k], ch[q], sizeof(ch[k]));\n\t\tlen[k] = len[p] + 1, pa[w] = pa[q] = k;\n\t\twhile (~p && ch[p][c] == q) ch[p][c] = k, p = pa[p];\n\t\tl = w;\n\t}\n\tinline void build() {\n\t\tinit();\n\t\tfor (int i = 1; i <= n; i++) add(s[i] - 'a', i);\n\t}\n\tint b[N<<1], c[N];\n\tinline void sort() {\n\t\tfor (int i = 1; i <= t; i++) ++c[len[i]];\n\t\tfor (int i = 1; i <= n; i++) c[i] += c[i-1];\n\t\tfor (int i = 1; i <= t; i++) b[c[len[i]]--] = i;\n\t}\n\tinline void work() {\n\t\tfor (int i = 1, p = 0; i <= n; i++)\n\t\t\tp = ch[p][s[i]-'a'], rt[p] = insert(1, n, i);\n\t\tfor (int i = t; i; i--)\n\t\t\trt[pa[b[i]]] = merge(rt[pa[b[i]]], rt[b[i]]);\n\t\tfor (int i = 1; i <= t; i++) {\n\t\t\tint x = b[i];\n\t\t\tif (!pa[x]) {\n\t\t\t\tf[x] = 1, g[x] = x;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (ask(rt[g[pa[x]]], 1, n, pos[x] - len[x] + len[g[pa[x]]], pos[x] - 1))\n\t\t\t\tf[x] = f[pa[x]] + 1, g[x] = x;\n\t\t\telse f[x] = f[pa[x]], g[x] = g[pa[x]];\n\t\t\tans = max(ans, f[x]);\n\t\t}\n\t}\n} sam;\n\nint main() {\n\trd(sam.n), rds(sam.s, sam.n), sam.build();\n\tsam.sort(), sam.work(), print(ans);\n\treturn 0;\n}\n```",
        "postTime": 1584211477,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF700E \u3010Cool Slogans\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u54e6~~](https://blog.csdn.net/qq_42886072/article/details/105092059)\n\n[\u9898\u76ee](https://www.luogu.com.cn/problem/CF700E)\n\n\u7b80\u660e\u9898\u610f:\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32$S$,\u8981\u6c42\u6784\u9020$s_1,s_2,...s_k$,\u6ee1\u8db3$\\forall i\\in[1,k]\\cap N,s_i\\in S$\u9664\u7b2c\u6700\u540e\u4e2a\u4e32\u5916,\u5176\u4ed6\u6bcf\u4e2a\u4e32\u90fd\u5728\u540e\u4e00\u4e2a\u4e32\u51fa\u73b0\u4e24\u6b21\u4ee5\u4e0a.\n\n**upd:\u65b9\u6cd51\u4e3a\u9519\u89e3,\u6b63\u786e\u6027\u65e0\u6cd5\u4fdd\u8bc1(\u4ec5\u4f9b\u5a31\u4e50),\u611f\u8c22[Treaker](https://www.luogu.com.cn/user/153898)\u7684hack,\u5982\u6709\u7c7b\u4f3c\u65b9\u6cd51\u7684\u6b63\u786e\u5b9e\u73b0\u65b9\u6cd5,\u9ebb\u70e6\u544a\u77e5\u6211.(2020/4/7)**\n> $hack\u6570\u636e:$\n\n> 10\n\n> aaabaabaab\n# \u65b9\u6cd51\n\u672c\u6587\u63d0\u4f9b\u4e00\u79cd\u7b80\u77ed\u9ad8\u6548\u7684STL+Hash\u7684\u65b9\u6cd5.\n\n\u672c\u6587\u4e3b\u8981\u53c2\u8003\u795e\u7287[zhouyuyang](https://codeforces.ml/problemset/submission/700/36707934)\u5728CF\u4e2d\u7684AC\u4ee3\u7801,\u5e76\u89e3\u91ca\u4e00\u4e0b\u795e\u7287\u7684\u4ee3\u7801\u6240\u8574\u542b\u7684\u795e\u5947\u601d\u8def.\n\n## \u5355\u5411$orz ~~zhouyuyang$.\n\n## \u5355\u5411$orz ~~zhouyuyang$.\n\n## \u5355\u5411$orz ~~zhouyuyang$.\n\n\n# \u6b63\u9898\n\n\u76f4\u63a5\u8d34\u51fa\u795e\u7287\u7684\u4ee3\u7801\u5e76\u9644\u672c\u4eba\u83dc\u9e21\u7406\u89e3:\n```cpp\n#include<cstdio>\n#include<map>\n#include<vector>\n#define ll long long\n#define mk make_pair\n#define pb push_back\nusing namespace std;\nconst int N=2e5+5;\nconst int Mo=1e9+713,Base=317;//\u795e\u7287\u6a21\u6570 \nmap<pair<int,int>,vector<int> >f[N];\n//pair<int,int>\u4ee3\u8868\u4e00\u4e2a\u5b57\u7b26\u4e32,\u7b2c\u4e00\u5143\u4e3ahash\u503c,\u7b2c\u4e8c\u5143\u4e3a\u957f\u5ea6.\u8fd9\u6837\u5927\u5927\u51cf\u5c0fhash\u7684\u9519\u8bef.\n//\u5b83\u6240\u6620\u5c04\u7684vector,\u8868\u793a\u8be5\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5f00\u5934\u4f4d\u7f6e. \nint n,i,j,ans,q[N];char s[N];\nint pow[N],num[N];\nint Hash(int l,int r){\n\treturn (num[r]-(ll)num[l-1]*pow[r-l+1]%Mo+Mo)%Mo;\n}\nint main(){\n\tscanf(\"%d%s\",&n,s+1);\n\tfor (pow[0]=1,i=1;i<=n;i++){//hash\u5e38\u89c4\u64cd\u4f5c \n\t\tnum[i]=((ll)num[i-1]*Base+s[i])%Mo;\n\t\tpow[i]=(ll)pow[i-1]*Base%Mo;\n\t}\n\tfor (i=1;i<=n;i++) f[1/*\u8fd9\u4e00\u7ef4\u8868\u793a\u8be5\u5b57\u7b26\u4e32\u80fd\u5f62\u6210\u7684\u6700\u5927\u7b54\u6848*/][mk(s[i],1)].pb(i);//\u6839\u636e\u4e0a\u8ff0\u5b9a\u4e49,\u6240\u4ee5\u8981\u8fd9\u6837\u9884\u5904\u7406. \n\tfor (i=1;i<=n;i++) if (!f[i].empty()){ans=i;//\u66f4\u65b0\u7b54\u6848. \n\t\tmap<pair<int,int>,vector<int> >::iterator it;\n\t\tfor (it=f[i].begin();it!=f[i].end();it++){\n\t\t\tint len=it->first.second;\n\t\t\tvector<int>a=it->second;\n\t\t\tint m=a.size()-1;\n\t\t\tfor (j=0;j<m;j++)\n\t\t\t\tq[j]=Hash(a[j]+len,a[j+1]-1);\n\t\t\t\t//\u628a\u76f8\u90bb\u4e24\u4e2a\u8be5\u4e32\u4e4b\u95f4\u7684\u4e32\u8fdb\u884c\u9884\u5904\u7406. \n\t\t\tfor (int l=0,r=1;l<m;l=r,r++){\n\t\t\t\tfor (;r<m&&q[r-1]==q[r];r++);//\u662f\u5faa\u73af\u4e32\u5c31\u4e0d\u65ad\u589e\u957f. \n\t\t\t\tf[i+r-l][mk(Hash(a[l],a[r]+len-1),a[r]-a[l]+len)].pb(a[l]);\n\t\t\t\t//\u6bcf\u6b21\u5904\u7406\u5b8c\u540e[l,r]\u88ab\u5408\u5e76\u6210\u65b0\u7684\u4e32.\u5faa\u73af\u6b21\u6570\u4e3a(r-l+1),\u90a3\u4e48\u5bf9\u7b54\u6848\u7684\u6700\u5927\u8d21\u732e\u5c31\u4e3ar-l \n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\",ans);\n}\n```\n## \u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e\n\u9996\u5148\u6211\u4eec\u6765\u770b\u590d\u6742\u5ea6\u6700\u8ff7\u7684\u5730\u65b9.\n```cpp\nfor (int l=0,r=1;l<m;l=r,r++){\n\tfor (;r<m&&q[r-1]==q[r];r++);//\u662f\u5faa\u73af\u4e32\u5c31\u4e0d\u65ad\u589e\u957f. \n\tf[i+r-l][mk(Hash(a[l],a[r]+len-1),a[r]-a[l]+len)].pb(a[l]);\n\t//\u6bcf\u6b21\u5904\u7406\u5b8c\u540e[l,r]\u88ab\u5408\u5e76\u6210\u65b0\u7684\u4e32.\u5faa\u73af\u6b21\u6570\u4e3a(r-l+1),\u90a3\u4e48\u5bf9\u7b54\u6848\u7684\u6700\u5927\u8d21\u732e\u5c31\u4e3ar-l \n}\n```\n\n\u6211\u4eec\u76f4\u63a5\u8003\u8651\u6781\u9650:\u6bcf\u6b21\u5904\u7406\u5b8c\u90fd\u662f$r=l+1$,\u8fd9\u6837\u751f\u6210\u7684\u72b6\u6001\u663e\u7136\u6700\u591a.\n\n\u8fd9\u6837\u72b6\u6001\u590d\u6742\u5ea6\u663e\u7136$O(n^2)$?\u4e0d\u4e0d\u4e0d.\n\n\u6ce8\u610f\u5230\u6bcf\u6b21\u751f\u6210\u7684\u90fd\u662f**\u6781\u5927**\u5faa\u73af\u4e32,\u751f\u6210\u51fa\u6765\u7684\u4e32\u7684\u957f\u5ea6\u4e5f\u81f3\u5c11\u4e3a$2len$.\n\n\u4f60\u53ef\u80fd\u4f1a\u95ee:\u5b83\u4eec\u4e0d\u53ef\u80fd\u76f8\u4ea4\u5417?\n\n> \u8bc1\u660e: (\u5f52\u7eb3\u6cd5)\n\u663e\u7136\u5bf9\u4e8e\u5e95\u5c42(\u4e00\u4e2a\u5b57\u7b26\u800c\u8a00)\u4e0d\u53ef\u80fd\u91cd\u53e0.\n\u90a3\u4e48\u5408\u5e76\u7684\u65f6\u5019\u53d1\u73b0\u53ef\u80fd\u5b58\u5728\u91cd\u53e0\u7684\u65b0\u72b6\u6001$[l,r][r,r']$.\n\u4f46\u662f\u8fd9\u4fe9\u65b0\u72b6\u6001\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u4e0d\u540c,\u5426\u5219\u4e0e\u6781\u5927\u5faa\u73af\u4e32\u77db\u76fe.\n\n\u6700\u540e\u6211\u4eec\u6839\u636e\u5e95\u5c42\u5f97\u51fa\u590d\u6742\u5ea6:\n\n\u6700\u574f\u60c5\u51b5\u4e0b\u5e95\u5c42\u6bcf\u4e24\u4e2a\u76f8\u540c\u76f8\u90bb\u5b57\u7b26\u4e4b\u95f4\u4f1a\u751f\u6210$\\log(n)$\u4e2a\u72b6\u6001.\n\n\u4f8b\u5982\"abaca\",\u7b2c\u4e00\u4e2a'a'\u4e0e\u7b2c\u4e8c\u4e2a'a'\u751f\u6210\u4e00\u5806\u72b6\u6001.\u7b2c\u4e8c\u4e2a'a'\u4e0e\u7b2c\u4e09\u4e2a'a'\u751f\u6210\u4e00\u5806\u72b6\u6001.\n\n\u8fd9\u6837\u603b\u5171\u6709$O(n)$\u7ea7\u522b\u7684\u76f8\u540c\u76f8\u90bb\u5b57\u7b26,\u6bcf\u6b21\u751f\u6210$\\log(n)$\u4e2a\u72b6\u6001,\u52a0\u4e0amap,\u5929\u7136\u7684\u5e38\u6570$\\log(n)$.\u603b\u590d\u6742\u5ea6\u5373\u4e3a$O(n*\\log^2(n))$.\n\n# \u5c0f\u7ed3\n\u8fd9\u4e2a\u65b9\u6cd5\u907f\u514d\u4f7f\u7528SAM+\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u9ad8\u6df1\u601d\u8def,\u590d\u6742\u5ea6\u4e5f\u4e0d\u900a\u8272.\n\n\u52a0\u4e0a\u672c\u9898\u5927\u65f6\u9650+CF\u8d85\u5f3a\u8bc4\u6d4b\u673a,\u4e00\u70b9\u4e5f\u4e0d\u7528\u62c5\u5fc3\u4f1aT.\n\n# \u65b9\u6cd52\n>SAM+\u7ebf\u6bb5\u6811\u5408\u5e76.\n\n\u7ed3\u8bba:\n\n 1. $s_{i-1}\u4e00\u5b9a\u4e3as_i$\u7684\u540e\u7f00,\u4e0d\u7136\u628a$s_i$\u540e\u9762\u622a\u53bb\u4e00\u5b9a\u53ef\u4ee5\u53d8\u4e3a$s_{i-1}$\u7684\u540e\u7f00,\u8fd9\u6837$s_i$\u957f\u5ea6\u66f4\u77ed,\u4e14\u4e0e$s_{i-1}$\u7684\u5339\u914d\u6b21\u6570\u4e0d\u53d8,\u663e\u7136\u66f4\u4f18.\n 2. $\u5bf9\u4e8eSAM\u4e2d\u72b6\u6001x,y(y\u4e3ax\u7236\u8282\u70b9),\u5219y\u6240\u5bf9\u5e94\u7684\u6240\u6709\u5b50\u4e32\u5728x\u6700\u957f\u4e32\u4e2d\u7684\u5339\u914d\u6b21\u6570\u76f8\u7b49$.\n $\u8bc1\u660e:(\u53cd\u8bc1\u6cd5).\u8bbes\u4e3ax\u7684\u6700\u957f\u4e32,a,b\u4e3ay\u7684\u4e24\u4e2a\u5b50\u4e32$\n $\u4e3e\u4e2a\u4f8b\u5b50,\u8bbea=\"abcb\",b=\"babcb\",s=\"ababcb\",\u6b64\u65f6a,b\u5728s\u7684\u51fa\u73b0\u6b21\u6570\u4e0d\u540c$\n $a,b$\u5728\u76f8\u540c\u72b6\u6001,\u6240\u4ee5\u4e00\u5b9a\u6709$w=\"bababcb\"$.\n \u56e0\u4e3a$s$\u4e3a$x$\u6700\u957f\u4e32,\u6240\u4ee5$w$\u4e00\u5b9a\u4e3a$x$\u7684\u4e00\u4e2a\u5b69\u5b50.\n \u6839\u636e\u5b9a\u4e49\u5f97:$|\\operatorname{endpos(s)}|>|\\operatorname{endpos(w)}|$.\n \u6240\u4ee5\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a$p\\in \\operatorname{endpos(s)}-\\operatorname{endpos(w)}$\n\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u4f4d\u7f6e$a\u5b58\u5728,b\u4e0d\u5b58\u5728$,\u4e0e$ab$\u5728\u76f8\u540c\u72b6\u6001\u77db\u76fe,\u8bc1\u6bd5!\n\n\u7efc\u4e0a:\u6211\u4eec\u7684\u7236\u8282\u70b9\u4e00\u5b9a\u53d6\u6700\u957f\u7684\u6700\u4f18,\u56e0\u4e3a\u8fd9\u6837\u5b83\u5305\u542b\u7684\u4e32\u6700\u591a\u4e14\u5bf9\u540e\u9762\u5f71\u54cd\u76f8\u540c.\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728$parent$\u6811\u4e0a$dp$.\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#define lc t[x].l\n#define rc t[x].r\nusing namespace std;\nconst int N=1<<19|9;\nchar s[N];\nint n,ans,root[N],f[N],top[N];\n\n//SAM\nstruct node {int len,fa,v[26],pos;}tr[N]; int last=1,tot=1,b[N],c[N];\nvoid add(int c,int now) {\n\tint p=last,x=last=++tot; tr[x].len=tr[p].len+1; tr[x].pos=now;\n\tfor(\t;p&&!tr[p].v[c];p=tr[p].fa) tr[p].v[c]=x;\n\tif(!p) tr[x].fa=1;\n\telse {\n\t\tint q=tr[p].v[c],y;\n\t\tif(tr[p].len+1==tr[q].len) tr[x].fa=q;\n\t\telse {\n\t\t\ttr[y=++tot]=tr[q];\n\t\t\ttr[y].len=tr[p].len+1;\n\t\t\ttr[q].fa=tr[x].fa=y;\n\t\t\tfor(\t;p&&tr[p].v[c]==q;p=tr[p].fa) tr[p].v[c]=y;\n\t\t}\n\t}\n}\n\n//\u4e3b\u5e2d\u6811 \nstruct T {int l,r;}t[N*18]; int cnt;\nvoid insert(int &x,int l,int r,int p) {\n\tif(!x) x=++cnt;\n\tif(l==r) return ;\n\tint mid=(l+r)>>1;\n\tif(p<=mid) insert(lc,l,mid,p);\n\telse insert(rc,mid+1,r,p);\n}\nint merge(int x,int y) {\n\tif(1LL*x*y==0) return x|y;\n\tint z=++cnt;\n\tt[z].l=merge(t[x].l,t[y].l);\n\tt[z].r=merge(t[x].r,t[y].r);\n\treturn z;\n}\nbool query(int x,int l,int r,int L,int R) {\n\tif(!x) return 0;\n\tif(L<=l&&r<=R) return 1;\n\tint mid=(l+r)>>1;\n\tif(L<=mid&&query(lc,l,mid,L,R)) return 1;\n\tif(mid< R&&query(rc,mid+1,r,L,R)) return 1;\n\treturn 0;\n}\n\nint main() {\n\tscanf(\"%d %s\",&n,s+1);\n\tfor(int i=1;i<=n;i++) add(s[i] -= 'a',i),insert(root[last],1,n,i);\n\tfor(int i=1;i<=tot;i++) c[tr[i].len]++;\n\tfor(int i=1;i<=n;i++) c[i]+=c[i-1];\n\tfor(int i=tot;i ;i--) b[c[tr[i].len]--]=i;\n\tfor(int i=tot,j,k;i>1;i--) j=b[i],k=tr[j].fa,root[k]=merge(root[k],root[j]);\n\tans=1;\n\tfor(int i=2;i<=tot;i++) {\n\t\tint x=b[i],fa=tr[x].fa,p=tr[x].pos;\n\t\tif(fa==1) {f[x]=1; top[x]=x; continue;}\n\t\tint t=query(root[top[fa]],1,n,p-tr[x].len+tr[top[fa]].len,p-1);\n\t\tif(t) f[x]=f[fa]+1,top[x]=x,ans=max(ans,f[x]);\n\t\telse  f[x]=f[fa],top[x]=top[fa];\n\t}\n\tprintf(\"%d\\n\",ans); return 0;\n}\n\n```\n",
        "postTime": 1585109665,
        "uid": 118826,
        "name": "2018LZY",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF700E \u3010Cool Slogans\u3011"
    },
    {
        "content": "[\u66f4\u4e0d\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff08\u4e2a\u4eba\u535a\u5ba2\uff09](https://www.cnblogs.com/whale-at-cola/p/sulotion-cf700e.html)\n\n\u9898\u76ee\u4f20\u9001\u95e8\uff1a[luogu](https://www.luogu.com.cn/problem/CF700E)\uff0c[CF](codeforces.com/problemset/problem/700/E)\u3002\n\n\u5355\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u76f8\u5173\u95ee\u9898\uff0c\u8003\u8651\u5148\u5957\u4e0a\u4e00\u4e2a SAM\u3002\n\n\u8003\u8651 $s_p$ \u5bf9\u5e94\u7684 SAM \u4e0a\u7684\u8282\u70b9 $x$\uff0c\u56e0\u4e3a $s_p$ \u4e3a $s_{p+1}$ \u7684\u5b50\u4e32\uff0c\u6240\u4ee5\u6700\u4f18\u60c5\u51b5\u4e0b $s_{p+1}$ \u4e00\u5b9a\u4e3a $s_p$ \u7684\u540e\u7f00\uff0c\u5373 $s_{p+1}$ \u5bf9\u5e94\u7684\u8282\u70b9\u4e00\u5b9a\u5728 $x$ \u7684 fail \u6811\u5b50\u6811\u4e2d\u3002\n\n\u4f46\u662f\uff0cSAM \u4e2d\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u591a\u4e2a endpos \u96c6\u5408\u76f8\u540c\u7684\u4e32\uff0c\u5f53\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 $s_p$ \u65f6\u5e94\u8be5\u53d6\u5bf9\u5e94\u8282\u70b9\u7684\u4e00\u4e2a\u4ec0\u4e48\u957f\u5ea6\u7684\u4e32\u5462\uff1f\u53d1\u73b0\u5bf9\u4e8e\u8282\u70b9 $x$ \u5bf9\u5e94\u7684\u6240\u6709\u957f\u5ea6\u7684\u4e32\uff0c\u56e0\u4e3a\u5b83\u4eec endpos \u96c6\u5408\u76f8\u540c\uff0c\u6240\u4ee5\u6bcf\u4e2a\u957f\u5ea6\u7684\u4e32\u53ef\u4ea7\u751f\u7684 $s_{p+1}$ \u6240\u5bf9\u5e94\u7684\u8282\u70b9 $y$ \u7684\u96c6\u5408\u90fd\u4e00\u6837\uff08\u8003\u8651 $x$ \u5bf9\u5e94\u7684 $s_p$ \u589e\u957f\u540e\u5982\u679c $s_{p+1}$ \u4e0d\u80fd\u518d\u5bf9\u5e94\u67d0\u4e00\u4e2a\u8282\u70b9 $y$\uff0c\u90a3\u8bf4\u660e\u589e\u957f\u524d\u540e\u7684\u4e32 endpos \u4e00\u5b9a\u4e0d\u540c\uff09\uff0c\u800c\u53c8\u8981\u5bf9\u4e8e\u4e0d\u540c\u7684 $s_{p-1}$ \u63a5\u7eb3\u8fdb\u6765\u7684\u6700\u591a\uff0c\u6240\u4ee5\u957f\u5ea6\u76f4\u63a5\u53d6 $maxlen_x$ \u4e00\u5b9a\u4e0d\u4f1a\u4f7f\u60c5\u51b5\u53d8\u52a3\uff08\u4e3a\u65b9\u4fbf\uff0c\u4e0b\u6587\u4e2d\u5c06 $x$ \u8282\u70b9\u5bf9\u5e94\u7684\u4e32\u4e2d\u957f\u4e3a $maxlen_x$ \u7684\u4e32\u6210\u4e3a $mls_x$\uff09\u3002\n\n\u90a3\u4e48\u8003\u8651\u4e00\u4e2a\u6811\u5f62 dp\uff0c$dp_x$ \u8868\u793a $x$ \u5b50\u6811\u4e2d\u6309\u4e0a\u8ff0\u6784\u9020\u65b9\u6cd5\u80fd\u751f\u6210\u7684\u6700\u957f\u7684 $s$ \u5e8f\u5217\uff0c\u65b9\u7a0b\u4e3a $dp_x=max \\{dp_y|y\\in subtree_x \\wedge show(mls_x,mls_y)\\geq 2\\}$\uff08\u5176\u4e2d $show(s1,s2)$ \u8868\u793a $s1$ \u5728 $s2$ \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff09\u3002\n\n\u6839\u636e\u5b9a\u4e49\uff0c\u5bf9\u4e8e\u4e00\u4e2a $x$ \u6ee1\u8db3 $show(mls_p,mls_x)\\geq 2$ \u7684 $p$ \u4e00\u5b9a\u662f\u5b83\u5230\u6839\u8def\u5f84\u4e0a\u6df1\u5ea6\u6d45\u7684\u4e00\u6bb5\uff0c\u8bbe\u5176\u4e2d\u6700\u6df1\u7684\u70b9\u4e3a $g_x$\uff0c\u53ef\u4ee5\u53d1\u73b0 $g_{fa_x}$ \u4e00\u5b9a\u4e3a $g_x$ \u7684\u7956\u5148\u8282\u70b9\uff0c\u6240\u4ee5\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684 $g_x$ \u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684 dp \u4e86\u3002\n\n\u9884\u5904\u7406\u7684\u4e00\u4e2a\u9ebb\u70e6\u4e4b\u5904\u5c31\u662f\u5224\u65ad\u8981 $show(mls_x,mls_y)\\geq 2$ \u662f\u5426\u4e3a\u771f\uff0c\u5957\u8def\u5730\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u51fa\u6bcf\u4e2a\u70b9\u7684 endpos \u96c6\u5408\uff0c\u5bf9\u4e8e $endpos_y$ \u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e $p$\uff0c\u5176\u6240\u5bf9\u5e94\u7684\u4e32\u5373\u4e3a $[p-maxlen_y+1,p]$ \u8fd9\u4e2a\u533a\u95f4\u3002\u56e0\u4e3a $x$ \u4e3a $y$ \u7956\u5148\uff0c\u6240\u4ee5 $p$ \u4e00\u5b9a\u4e5f\u5728 $endpos_x$  \u4e2d\uff0c\u8bb0 $p$ \u7684\u524d\u9a71\uff08\u5728 $endpos_x$ \u4e2d\uff09\u4e3a $q$\uff0c\u82e5 $q$ \u6240\u5bf9\u5e94\u7684\u4e32 $[q-maxlen_x+1,q]$ \u88ab $[p-maxlen_y+1,p]$ \u5305\u542b\uff0c\u5219\u8bf4\u660e $show(mls_x,mls_y)\\geq 2$ \u6210\u7acb\uff0c\u5426\u5219\u4e0d\u6210\u7acb\u3002\u56e0\u4e3a\u6240\u5bf9\u5e94\u7684\u4e32\u672c\u8d28\u76f8\u540c\uff0c\u6240\u4ee5 $p$ \u53d6 $endpos_y$ \u4e2d\u7684\u4efb\u610f\u5143\u7d20\u5747\u53ef\uff0c\u5b9e\u73b0\u4e2d\u53d6\u7b2c\u4e00\u4e2a\u6bd4\u8f83\u65b9\u4fbf\u3002\n\n\u4ee3\u7801\u89c1\u4e0b\uff0c\u7801\u98ce\u4e0d\u5f88\u80fd\u770b\uff0c\u52ff\u55b7\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register\n\nconst int N=404040,M=N*80;\nint n,tot=1,las=1,ch[N][26],ml[N],fa[N],fp[N],ton[N],tp[N],g[N],rt[N];\nint cnt,sum[M],ls[M],rs[M],dp[N];\n\ninline void ext(int c,int k){\n\tint x=++tot,p=las,q;\n\tlas=x,ml[x]=ml[p]+1,fp[x]=k;\n\twhile(!ch[p][c]&&p) ch[p][c]=x,p=fa[p];\n\tif(!p) return fa[x]=1,void();\n\tif(ml[q=ch[p][c]]==ml[p]+1) return fa[x]=q,void();\n\tml[++tot]=ml[p]+1,fa[tot]=fa[q],fa[q]=fa[x]=tot;\n\tmemcpy(ch[tot],ch[q],sizeof ch[tot]);\n\twhile(ch[p][c]==q) ch[p][c]=tot,p=fa[p];\n}\n\ninline void topo(){\n\tfor(re int i=1;i<=tot;++i) ++ton[ml[i]];\n\tfor(re int i=tot-1;i;--i) ton[i]+=ton[i+1];\n\tfor(re int i=1;i<=tot;++i) tp[ton[ml[i]]--]=i;\n}\n\ninline void upd(int &k,int l,int r,int x){\n\tsum[k=++cnt]=1;\n\tif(l==r) return ;\n\tint d=(l+r)>>1;\n\tif(x<=d) upd(ls[k],l,d,x);\n\telse upd(rs[k],d+1,r,x);\n}\n\ninline int mrg(int k1,int k2,int l,int r){\n\tif(!k1||!k2) return k1|k2;\n\tint k=++cnt,d=(l+r)>>1;sum[k]=sum[k1]+sum[k2];\n\tif(l!=r) ls[k]=mrg(ls[k1],ls[k2],l,d),rs[k]=mrg(rs[k1],rs[k2],d+1,r);\n\treturn k;\n}\n\ninline void init(){\n\tfor(re int i=1;i<=tot;++i) if(fp[i]!=0x3f3f3f3f) upd(rt[i],1,n,fp[i]);\n\tfor(re int i=1;i<=tot;++i) g[i]=fa[i];\n\tfor(re int i=1,x=tp[i],y=fa[x];i<tot;y=fa[x=tp[++i]])\n\t\tfp[y]=min(fp[y],fp[x]),rt[y]=mrg(rt[y],rt[x],1,n);\n}\n\ninline int pre(int k,int l,int r,int x){\n\tif(x<l||!sum[k]) return 0;\n\tif(l==r) return l;\n\tint d=(l+r)>>1,res=pre(rs[k],d+1,r,x);\n\treturn res?res:pre(ls[k],l,d,x);\n}\n\ninline bool check(int x,int y){return fp[y]-ml[y]<=pre(rt[x],1,n,fp[y]-1)-ml[x];}\ninline void solve(){\n\tfor(re int i=1,x=tp[i],y=fa[x];i<tot;y=fa[x=tp[++i]]){\n\t\twhile(g[x]&&!check(g[x],x)) g[x]=fa[g[x]];\n\t\tif(ml[g[y]]>ml[g[x]]) g[y]=g[x];\n\t}\n\tfor(re int i=1,x=tp[i];i<tot;x=tp[++i])\n\t\tdp[fa[x]]=max(dp[fa[x]],dp[x]),dp[g[x]]=max(dp[g[x]],dp[x]+1);\n\tprintf(\"%d\\n\",dp[1]);\n}\n\nchar s[N];\nsigned main(){\n\tmemset(fp,0x3f,sizeof fp);\n\tscanf(\"%d%s\",&n,s+1);\n\tfor(re int i=1;i<=n;++i) ext(s[i]-'a',i);\n\ttopo(),init(),solve();\n\treturn 0;\n}\n```",
        "postTime": 1648199397,
        "uid": 232349,
        "name": "WhaleAtCola",
        "ccfLevel": 9,
        "title": "\u3010\u9898\u89e3\u3011CF700E Cool Slogans"
    },
    {
        "content": "\u540e\u7f00\u6570\u7ec4\u518d\u6b21\u8bc1\u660e\u4e86\uff1aSAM \u80fd\u505a\u7684\u9898\uff0cSA \u4e5f\u80fd\u505a\u3002\n\n\u6211\u4eec\u5c1d\u8bd5\u6539\u53d8\u4e00\u4e0b\u5b9a\u4e49\uff0c\u5f3a\u5236\u8ba9 $t_{i + 1}$ \u662f $t_i$ \u7684 border\uff0c\u5982\u679c\u4e0d\u662f\u7684\u8bdd\u53ef\u4ee5\u51cf\u5c0f $t_i$ \u7684\u957f\u5ea6\uff0c\u663e\u7136\u4e0d\u66f4\u52a3\u3002\n\n\u5728\u8fd9\u6837\u7684\u8c03\u6574\u4e0b\uff0c\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a\n\n\u4ee4 $\\mathrm{cool}(s)$ \u8868\u793a\u5f3a\u5236\u8981\u6c42 $t_1 = s$ \u4ee5\u53ca $t_{i + 1}$ \u662f $t_i$ \u7684 border \u7684\uff0c\u6700\u5927\u7684 $k$ \u503c\u3002\n\n\u90a3\u4e48\u8981\u6c42\u7684\u5373\u662f $s$ \u7684\u6240\u6709\u5b50\u4e32\u4e2d\u7684\u6700\u5927\u7684 $\\mathrm{cool}$ \u503c\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u8003\u8651\u4f7f\u7528 SA\uff0c\u6240\u4ee5\u4ee4 $\\mathrm{f}[i]$ \u8868\u793a $s$ \u4ee5 $i$ \u5f00\u59cb\u7684\u540e\u7f00\u7684\u6240\u6709\u524d\u7f00\u4e2d\u7684\u6700\u5927\u7684 $\\mathrm{cool}$ \u503c\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u8f6c\u79fb\uff0c\u663e\u7136\u4ece\u540e\u5f80\u524d\u8f6c\u79fb\uff08\u540e\u7f00\u7684\u957f\u5ea6\u9012\u589e\uff09\u662f\u6bd4\u8f83\u5408\u7406\u7684\u3002\n\n\u5047\u8bbe\u6211\u4eec\u8981\u5229\u7528\u540e\u9762\u7684\u4fe1\u606f\u6c42\u51fa $\\mathrm{f}[i] = k$\uff0c\u6839\u636e\u5b9a\u4e49\uff0c\u8981\u4e48 $\\mathrm{f}[i] = 1$\uff0c\u8981\u4e48\u6709 $t_2$ \u662f $t_1$ \u7684 border\u3002\n\n\u800c\u5982\u679c $t_2$ \u662f $t_1$ \u7684 border\uff0c\u663e\u7136 $t_2$ \u4e0d\u4ec5\u662f $s[i : n]$ \u7684\u4e00\u4e2a\u524d\u7f00\uff0c\u800c\u4e14\u8fd8\u5fc5\u987b\u5728 $s[i + 1 : n]$ \u4e2d\u51fa\u73b0\u8fc7\u81f3\u5c11 $1$ \u6b21\u3002\n\n\u800c\u4e14\u6211\u4eec\u8fd8\u6709 $\\mathrm{cool}(t_2) = k - 1$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u540e\u9762\u7684\u6240\u6709 $\\mathrm{f}[j] = k - 1$ \u7684\u4f4d\u7f6e\uff0c\u5b83\u4eec\u5c31\u6709\u53ef\u80fd\u8f6c\u79fb\u7ed9 $\\mathrm{f}[i]$\uff0c\u7136\u800c\u5b9e\u9645\u4e0a\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 $k$ \u7684\u503c\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0e\u5176\u8003\u8651\u4e00\u4e2a\u4f4d\u7f6e\u4ece\u540e\u8f6c\u79fb\u800c\u6765\uff0c\u4e0d\u5982\u6362\u4e2a\u89d2\u5ea6\uff0c\u8003\u8651\u8ba9\u4e00\u4e2a\u4f4d\u7f6e\u5411\u524d\u8f6c\u79fb\u3002\n\n\u4f46\u662f\u8f6c\u79fb\u7684\u8fc7\u7a0b\u5374\u548c\u540e\u7f00\u7684 LCP \u4ee5\u53ca $\\mathrm{f}[i]$ \u5bf9\u5e94\u7684\u524d\u7f00\u957f\u5ea6\u606f\u606f\u76f8\u5173\uff1a  \n\u4e00\u4e2a $i$ \u80fd\u8f6c\u79fb\u5230\u66f4\u524d\u9762\u7684 $j$ \u5f53\u4e14\u4ec5\u5f53 $\\mathrm{LCP}(j, i) \\ge |s_i|$\uff0c\u5176\u4e2d $s_i$ \u5373\u4e3a $\\mathrm{cool}(s_i) = \\mathrm{f}[i]$ \u7684\u4e00\u4e2a $s[i : n]$ \u7684\u524d\u7f00\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c**\u5f53\u6709\u591a\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684 $\\boldsymbol{s_i}$ \u65f6\uff0c\u53d6\u6700\u77ed\u7684 $\\boldsymbol{s_i}$ \u624d\u662f\u6b63\u786e\u7684**\u3002\n\n----\n\n\u8fd9\u63d0\u793a\u6211\u4eec\u53ef\u80fd\u9700\u8981\u518d\u7ef4\u62a4\u4e00\u4e2a\u5bf9\u5e94\u7684 $s_i$ \u957f\u5ea6\u7684\u4fe1\u606f\uff0c\u8bb0\u4f5c $\\mathrm{len}$\u3002\u5982\u679c $\\mathrm{f}[i] = 1$\uff0c\u663e\u7136 $\\mathrm{len}[i] = 1$\u3002\n\n\u8fd9\u65f6\u4f60\u53ef\u80fd\u4f1a\u60f3\u51fa\u8fd9\u6837\u7684\u8f6c\u79fb\u8fc7\u7a0b\uff1a  \n\u5982\u679c $\\mathrm{LCP}(j, i) \\ge \\mathrm{len}[i]$\uff0c\u90a3\u4e48 $\\mathrm{f}[j] = \\mathrm{f[i]}$\uff0c$\\mathrm{len}[j] = \\mathrm{len[i]} + i - j$\u3002  \n\uff08\u5f53\u7136\u8981\u5728\u4ee5 $\\mathrm{f}$ \u5c3d\u91cf\u5927\u7684\u524d\u63d0\u4e0b\uff0c\u8ba9 $\\mathrm{len}$ \u5c3d\u91cf\u5c0f\uff09\n\n\u4f46\u662f\u5f88\u53ef\u60dc\u8fd9\u6837\u662f\u9519\u8bef\u7684\uff0c\u8003\u8651 $s = \\mathtt{acacaba}$\u3002\n\n\u5bf9\u4e8e\u4f4d\u7f6e $7$ \u6709 $\\langle \\mathrm{f}, \\mathrm{len} \\rangle = \\langle 1, 1 \\rangle$\uff0c\u8f6c\u79fb\u7ed9\u4f4d\u7f6e $1, 3, 5$\u3002\n\n\u5bf9\u4e8e\u4f4d\u7f6e $5$ \u6709 $\\langle \\mathrm{f}, \\mathrm{len} \\rangle = \\langle 2, 3 \\rangle$\uff0c\u6ce8\u610f\u5b83**\u65e0\u6cd5**\u8f6c\u79fb\u7ed9 $1$ \u548c $3$\u3002\n\n\u4f46\u662f\uff0c\u5bf9\u4e8e\u4f4d\u7f6e $3$\uff0c\u771f\u5b9e\u7684 $\\langle \\mathrm{f}, \\mathrm{len} \\rangle$ \u5e94\u8be5\u4e3a $\\langle 2, 3 \\rangle$\uff0c\u7136\u800c\u5728\u8fd9\u91cc\u53d8\u6210\u4e86 $\\langle 2, 5 \\rangle$\uff0c\u662f\u88ab\u4f4d\u7f6e $7$ \u800c\u975e\u4f4d\u7f6e $5$ \u8f6c\u79fb\u7684\u3002\n\n\u8fdb\u800c\u5f71\u54cd\u5230\u4f4d\u7f6e $1$ \u7684\u503c\uff0c\u6700\u7ec8\u5f71\u54cd\u7b54\u6848\uff0c\u6b63\u786e\u7b54\u6848\u4e3a $3$ \u4f46\u662f\u8fd9\u6837\u6c42\u51fa\u6765\u7684\u7b54\u6848\u4e3a $2$\u3002\n\n\u5982\u679c\u4f4d\u7f6e $5$ \u5f53 $\\mathrm{f} = 1$ \u65f6\u7684 $\\mathrm{len}$ \u4e5f\u80fd\u8f6c\u79fb\u7ed9\u4f4d\u7f6e $3$ \u5c31\u597d\u4e86\uff0c\u4f46\u662f\u8fd9\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u56e0\u4e3a $\\mathrm{f}$ \u53ef\u80fd\u592a\u5927\u65e0\u6cd5\u4e00\u4e00\u8f6c\u79fb\u3002\n\n----\n\n\u5176\u5b9e\u6b63\u786e\u65b9\u6cd5\u662f\uff0c\u4e0d\u7528\u540c\u65f6\u7ef4\u62a4 $\\mathrm{len}$ \u4e86\uff0c\u76f4\u63a5\u5728\u4f7f\u7528\u65f6\u8ba1\u7b97 $\\mathrm{len}$ \u5373\u53ef\u3002\n\n\u56e0\u4e3a\u5b9e\u9645\u4e0a\uff0c\u5982\u679c $\\mathrm{len}$ \u7684\u8ba1\u7b97\u6b63\u786e\uff0c\u662f\u4e0d\u4f1a\u5f71\u54cd $\\mathrm{f}$ \u503c\u7684\u8f6c\u79fb\u7684\uff0c\u4f46\u662f\u95ee\u9898\u51fa\u5728 $\\mathrm{len}$ \u7684\u8ba1\u7b97\u4e0a\u3002\n\n\u5982\u679c\u6211\u4eec\u5df2\u77e5 $\\mathrm{f}[i] = k$\uff0c\u80fd\u5426\u540c\u65f6\u786e\u5b9a $\\mathrm{len}$ \u7684\u503c\u5462\uff1f\n\n- \u5982\u679c $k = 1$\uff0c\u5219 $\\mathrm{len}[i] = 1$\u3002\n- \u5426\u5219\u6211\u4eec\u8fd8\u9700\u8981\u77e5\u9053 $\\mathrm{f}[i]$ \u662f\u4ece\u54ea\u4e2a $\\mathrm{f}[j] = k - 1$ \u5904\u8f6c\u79fb\u800c\u6765\u7684\u3002\n  - \u5982\u679c\u6709\u591a\u5904\uff0c\u5e94\u8be5\u9009\u62e9 $\\mathrm{len}[j]$ \u6700\u5c0f\u7684\u90a3\u4e00\u5904\u3002\n  - \u83b7\u5f97\u4e86 $\\mathrm{len}[j]$ \u4e4b\u540e\uff0c\u6211\u4eec\u5728 SA \u4e2d\u5b9a\u4f4d $\\mathrm{LCP}(i, x) \\ge \\mathrm{len}[j]$ \u7684\u53ef\u884c\u7684 $x$ \u7684\u533a\u95f4\u3002\n  - \u5728\u7ebf\u6bb5\u6811\u4e2d\u67e5\u8be2\u8fd9\u4e2a\u533a\u95f4\u5185\uff0c\u5728 $i$ \u4e4b\u540e\u7684\uff0c\u4e14\u79bb $i$ \u5c3d\u91cf\u8fd1\u7684\u4f4d\u7f6e $y$\u3002\n  - \u5219 $\\mathrm{len}[i] = \\mathrm{len}[j] + y - i$\u3002\n\n\u786e\u5b9a\u4e86 $\\mathrm{len}[i]$ \u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5f80\u524d\u8f6c\u79fb\u4e86\u3002\u5728 SA \u4e2d\u5b9a\u4f4d $\\mathrm{LCP}(x, i) \\ge \\mathrm{len}[i]$ \u7684\u53ef\u884c\u7684 $x$ \u7684\u533a\u95f4\u3002\n\n\u7136\u540e\u7528\u7ebf\u6bb5\u6811\uff0c\u8f6c\u79fb\u7ed9\u533a\u95f4\u5185\u7684\u6240\u6709\u5728 $i$ \u4e4b\u524d\u7684\u4f4d\u7f6e\uff0c\u7ebf\u6bb5\u6811\u8981\u7ef4\u62a4\u5728 $k$ \u5c3d\u91cf\u5927\u7684\u524d\u63d0\u4e0b\u8ba9 $\\mathrm{len}$ \u5c3d\u91cf\u5c0f\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O (n \\log n)$\uff0c[\u8bc4\u6d4b\u94fe\u63a5](https://codeforces.com/contest/700/submission/73441291)\u3002",
        "postTime": 1584528634,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF700E \u3010Cool Slogans\u3011"
    },
    {
        "content": "\u3000\u3000\u770b\u4e86\u4e00\u4e2a\u4e2d\u5348\u7684\u4ee3\u7801\u7ec8\u4e8e\u5f04\u61c2\u4e86\u2026\u2026$yyb$\u5927\u4f6c\u5f3a\u65e0\u654c\u2026\u2026\n\n\u3000\u3000\u4e00\u5f00\u59cb\u4ee5\u4e3a\u662fSAM\u5efa\u597d\u4e4b\u540e\u76f4\u63a5\u4e0a$dp$\uff0c\u76f4\u63a5\u7528$parent$\u6811\u4e0a\u7684\u513f\u5b50\u8282\u70b9\u66f4\u65b0\u7236\u4eb2\uff0c\u56e0\u4e3aparent\u6811\u4e0a\u8282\u70b9\u4e0d\u540c\u8bf4\u660e\u51fa\u73b0\u6b21\u6570\u5fc5\u5b9a\u4e0d\u540c\u3002\u4f46\u4ea4\u4e0a\u53bb\u4e00\u53d1WA\u4e86\u3002\u624d\u53d1\u73b0\u81ea\u5df1\u8fd9\u79cd\u60f3\u6cd5\u4e0d\u80fd\u4fdd\u8bc1$parent$\u6811\u4e0a\u7684\u7236\u4eb2\u5fc5\u5b9a\u5728\u513f\u5b50\u4e2d\u51fa\u73b0\u8fc7\u8d85\u8fc7\u4e24\u6b21\u2026\u2026\n\n\u3000\u3000\u8fd8\u662f\u6765\u8bf4\u8bf4\u6b63\u89e3\u5427\u3002\u6211\u4eec\u5148\u5bf9\u539f\u4e32\u5efa\u597dSAM\uff0c\u5e76\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u4efb\u610f\u4e00\u4e2a$endpos$\u3002\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u4e32\u662f\u5426\u5728\u53e6\u4e00\u4e2a\u4e32\u4e2d\u51fa\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u4e32\uff08\u8bbe\u4e32$A$\uff09\u5728\u53e6\u4e00\u4e2a\u4e32\uff08\u8bbe\u4e32$B$\uff09\u4e2d\u51fa\u73b0\u4e86\u5927\u4e8e\u7b49\u4e8e\u4e24\u6b21\uff0c\u90a3\u4e48\u5728\u539f\u4e32\u7684\u4efb\u610f\u4f4d\u7f6e\u7684\u4e32$B$\u4e2d\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002\n\n\u3000\u3000\u4e8e\u662f\u8003\u8651\u4e00\u4e0b\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u70b9\u7684$endpos$\u96c6\u5408\uff0c\u8fd9\u4e2a\u53ea\u8981\u7528\u7ebf\u6bb5\u6811\u5c31\u884c\u4e86\u3002\u5982\u679c$A$\u5728$B$\u4e2d\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u90a3\u4e48$A$\u7684$endpos$\u96c6\u5408\u5728$[pos[B]-len[B]+len[A],pos[B]]$\u4e2d\u51fa\u73b0\u4e86\u81f3\u5c11\u4e24\u6b21\uff08\u5176\u4e2d$pos[B]$\u8868\u793a$B$\u7684\u4efb\u610f\u4e00\u4e2a$endpos$\uff09\u3002\n\n\u3000\u3000\u4e0d\u96be\u53d1\u73b0\u6709\u4e00\u4e2a$dp$\uff0c\u6bcf\u4e00\u4e2a$parent$\u6811\u4e0a\u7684\u7236\u4eb2\u8282\u70b9\u90fd\u53ef\u80fd\u8f6c\u79fb\u5230\u513f\u5b50\u8282\u70b9\uff0c\u4e8e\u662f\u4ece\u4e0a\u5230\u4e0b$dp$\u3002\u53c8\u56e0\u4e3a$parent$\u6811\u4e0a\u7236\u4eb2\u662f\u513f\u5b50\u7684\u4e25\u683c\u540e\u7f00\uff0c\u6240\u4ee5\u5fc5\u7136\u5728\u513f\u5b50\u91cc\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u90a3\u4e48\u53ea\u8981\u8003\u8651$endpos[A]$\u4e2d\u662f\u5426\u6709\u5143\u7d20\u5728$[pos[B]-len[B]+len[A],pos[B]-1]$\u4e2d\u5c31\u884c\u4e86\n```\n//minamoto\n#include<cstdio>\n#include<cstring>\nusing namespace std;\ntemplate<class T>inline bool cmax(T&a,const T&b){return a<b?a=b,1:0;}\nconst int N=444444;\nint fa[N],ch[N][26],l[N],f[N],a[N],c[N],pos[N],top[N];char s[N];\nint last=1,cnt=1,n,ans=1;\nvoid ins(int c,int k){\n    int p=last,np=++cnt;last=np,l[np]=l[p]+1,pos[np]=k;\n    for(;p&&!ch[p][c];p=fa[p]) ch[p][c]=np;\n    if(!p) fa[np]=1;\n    else{\n        int q=ch[p][c];\n        if(l[q]==l[p]+1) fa[np]=q;\n        else{\n            int nq=++cnt;l[nq]=l[p]+1,pos[nq]=pos[q];\n            memcpy(ch[nq],ch[q],sizeof(ch[q]));\n            fa[nq]=fa[q],fa[np]=fa[q]=nq;\n            for(;ch[p][c]==q;p=fa[p]) ch[p][c]=nq;\n        }\n    }\n}\nvoid calc(){\n    for(int i=1;i<=cnt;++i) ++c[l[i]];\n    for(int i=1;i<=cnt;++i) c[i]+=c[i-1];\n    for(int i=1;i<=cnt;++i) a[c[l[i]]--]=i;\n}\nint L[N*25],R[N*25],rt[N],tot;\nvoid modify(int &now,int l,int r,int x){\n    now=++tot;if(l==r) return;\n    int mid=l+r>>1;\n    if(x<=mid) modify(L[now],l,mid,x);\n    else modify(R[now],mid+1,r,x);\n}\nint merge(int x,int y){\n    if(!x||!y) return x|y;\n    int z=++tot;\n    L[z]=merge(L[x],L[y]);\n    R[z]=merge(R[x],R[y]);\n    return z;\n}\nint query(int x,int l,int r,int ql,int qr){\n    if(!x) return 0;if(ql<=l&&qr>=r) return 1;\n    int mid=l+r>>1;\n    if(ql<=mid&&query(L[x],l,mid,ql,qr)) return 1;\n    if(qr>mid&&query(R[x],mid+1,r,ql,qr)) return 1;\n    return 0;\n}\nint main(){\n    scanf(\"%d\",&n);\n    scanf(\"%s\",s+1);\n    for(int i=1;i<=n;++i) ins(s[i]-'a',i),modify(rt[last],1,n,i);\n    calc();\n    for(int i=cnt;i>1;--i) rt[fa[a[i]]]=merge(rt[fa[a[i]]],rt[a[i]]);\n    for(int i=2;i<=cnt;++i){\n        int u=a[i],ff=fa[u];\n        if(ff==1){f[u]=1,top[u]=u;continue;}\n        int x=query(rt[top[ff]],1,n,pos[u]-l[u]+l[top[ff]],pos[u]-1);\n        if(x) f[u]=f[ff]+1,top[u]=u;\n        else f[u]=f[ff],top[u]=top[ff];\n        cmax(ans,f[u]);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1534229971,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF700E \u3010Cool Slogans\u3011"
    },
    {
        "content": "# [CF700E Cool Slogans](https://www.luogu.com.cn/problem/CF700E)\n\n\u8fd9\u662f\u4e00\u9053\u7528\u540e\u7f00\u6570\u7ec4\u4f18\u5316DP\u7684\u795e\u9898\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5148\u629b\u5f00\u540e\u7f00\u6570\u7ec4\uff0c\u4eceDP\u7684\u89d2\u5ea6\u6765\u60f3\u9898\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u7ec4\u5408\u6cd5\u7684$s_1,\\dots,s_n$\uff0c\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5**\u6390\u5934\u53bb\u5c3e**\uff0c\u4f7f\u5f97$s_i$\u662f$s_{i-1}$\u7684$\\text{Border}$\uff0c\u5373\u9996\u5c3e\u7684\u4e00\u4e2a\u76f8\u540c\u5b50\u4e32\u3002\u8fd9\u5f88\u597d\u7406\u89e3\u2014\u2014\u56e0\u4e3a\u6390\u5934\u53bb\u5c3e\u5269\u4e0b\u7684\u4e1c\u897f\u4e00\u5b9a\u662f\u539f\u6765\u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u800c$s_i$\u672c\u6765\u5c31\u5728$s_{i-1}$\u4e2d\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u6545$s_i$\u7684\u5b50\u4e32\uff0c\u65e0\u8bba\u6390\u6210\u5565\u6837\uff0c\u90fd\u5fc5\u5b9a\u4f1a\u5728$s_{i-1}$\u4e2d\u4ecd\u7136\u51fa\u73b0\u4e24\u6b21\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u8bbe\u60f3DP\u72b6\u6001\u4e86\uff1a\u4ee4$f_i$\u8868\u793a\u4ee5\u7b2c$i$\u4e2a\u5b57\u7b26\u5f00\u5934\u7684\u6240\u6709\u5b50\u4e32\u4e2d\uff0c\u6700\u591a\u80fd\u5957\u5a03\u51e0\u5c42$\\text{Border}$\u3002\u5219\u7b54\u6848\u5373\u4e3a$\\max\\limits_{i=0}^{n-1}f_i$\u3002\n\n\u6211\u4eec\u8003\u8651\u5982\u4f55\u6c42\u51fa$f_i$\u3002\u663e\u7136\uff0c\u5b83\u7684DP\u987a\u5e8f\u5e94\u8be5\u662f**\u5012\u7740\u7684**\uff0c\u56e0\u4e3a\u957f\u4e32\u53ea\u80fd\u7531\u77ed\u4e32\u8f6c\u79fb\u800c\u6765\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u8bbe\u60f3\u51fa\u4e00\u79cdDP\u65b9\u7a0b\u51fa\u6765\uff1a\n\n$f_i$\u53ef\u4ee5\u7531$f_j$\u8f6c\u79fb\u800c\u6765\uff0c\u5f53\u4e14\u4ec5\u5f53$i<j$\u4e14$\\operatorname{LCP}(i,j)\\geq|s_j|$\uff0c\u5176\u4e2d$|s_j|$\u662f$j$\u6240\u4ee3\u8868\u7684$\\text{Border}$\u7684\u957f\u5ea6\u3002\n\n\u8fd9\u542f\u53d1\u6211\u4eec\u8981\u8bb0\u5f55\u4e00\u4e2a$len_j$\u8868\u793a\u4e0a\u8ff0\u7684$\\text{Border}$\u957f\u5ea6\u3002\u663e\u7136\uff0c\u8fd9\u4e2a$len_j$\u5e94\u662f**\u8d8a\u77ed\u8d8a\u597d**\u3002\n\n\u5219\u6211\u4eec\u7684\u8f6c\u79fb\u6761\u4ef6\u5373\u4e3a\uff1a$i<j\\ \\land\\ \\operatorname{LCP}(i,j)\\geq len_j$\u3002\n\n------------\n\n\u4f46\u6211\u4eec\u5e94\u8be5\u60f3\u60f3\uff0c**\u8fd9\u771f\u7684\u662f\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u5417**\uff1f\u5982\u679c$\\operatorname{LCP}(i,j)<len_j$\uff0c\u5c31\u4e0d\u53ef\u4ee5\u8f6c\u79fb\u4e86\u5417\uff1f\u8fd9\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u9002\u5f53\u51cf\u5c0f$f_j$\u7684\u8bdd\uff0c\u5b83\u5bf9\u5e94\u7684$len_j$\u4e5f\u4f1a\u8ddf\u7740\u51cf\u5c0f\uff0c\u6700\u7ec8\u5c31\u6709\u53ef\u80fd\u51cf\u5c0f\u5230$\\leq\\operatorname{LCP}$\u7684\u5730\u6b65\uff0c\u5c31\u53ef\u4ee5\u8f6c\u79fb\u4e86\u3002\u90a3\u662f\u4e0d\u662f\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a$j$\uff0c\u5c31\u8981\u4e8c\u5206\u51fa\u6765\u53ef\u4ee5\u8f6c\u79fb\u7684$f_j$\u4e86\u5462\uff1f\n\n\u8fd9\u770b\u4e0a\u53bb\u5f88\u6709\u9053\u7406\u7684\u6837\u5b50\u2014\u2014\u4f46\u6211\u4eec\u7684\u62c5\u5fc3\u5b9e\u9645\u4e0a**\u5b8c\u5168\u662f\u591a\u4f59**\u7684\u3002$f_j$\u7684\u51cf\u5c0f\uff0c\u5c31\u610f\u5473\u7740$\\text{Border}$\u5957\u5a03\u5c42\u6570\u7684\u51cf\u5c0f\u3002\u800c\u5957\u5a03\u6b21\u6570\u66f4\u5c11\u7684\u72b6\u6001\uff0c\u5b9e\u9645\u4e0a**\u88ab\u4fdd\u5b58\u5728\u4e86\u5176\u5b83\u4f4d\u7f6e**\u3002\n\n\u4f8b\u5982\uff0c\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u6761\u5173\u7cfb\uff1a$f_j\\leftarrow f_k$\uff0c\u5373$k$\u8f6c\u79fb\u5230$j$\u3002\n\n\u73b0\u5728\u6211\u4eec\u60f3\u5c1d\u8bd5\u7528$j$\u8f6c\u79fb\u5230$i$\u53bb\uff0c\u4f46\u53d1\u73b0$\\operatorname{LCP}$\u592a\u77ed\u4e0d\u591f\u3002\u4e8e\u662f\u6211\u4eec\u51cf\u5c0f$f_j$\u3002\n\n\u4f46\u662f$f_j$\u4e00\u51cf\u5c0f\uff0c\u5c31\u76f8\u5f53\u4e8e**\u9000\u5316\u6210$f_k$\u4e86**\uff0c\u800c$f_k$\u7684\u72b6\u6001\uff0c\u6211\u4eec\u662f**\u6709\u5907\u4efd\u7684**\uff0c\u5373$k$\u672c\u8eab\uff0c\u5b83\u4e5f\u53ef\u4ee5\u8f6c\u79fb\u5230$i$\u53bb\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u7528\u62c5\u5fc3\u66f4\u5c0f\u7684$f_j$\u662f\u5426\u66f4\u4f18\u2014\u2014\u5b83\u7684\u7956\u5148\u4f1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u3002\n\n------------\n\n\u597d\u7684\u6211\u4eec\u73b0\u5728\u56de\u5230\u8f6c\u79fb\u672c\u8eab\u3002\u5f88\u660e\u663e$len_j$\u4e5f\u662f\u4e00\u4e2a\u9700\u8981\u7ef4\u62a4\u7684\u503c\u3002\u6216\u8bb8\u4f60\u4eec\u4f1a\u8ba4\u4e3a$len_i$\u53ef\u4ee5\u540c$f_i$\u4e00\u8d77\u8f6c\u79fb\u3002\u5373\uff0c\u6211\u4eec\u5148\u6c42\u51fa$f_i$\uff0c\u7136\u540e\u627e\u51fa\u6240\u6709$f_j=f_i-1$\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5c1d\u8bd5\u7528$len_j$\u66f4\u65b0$len_i$\u3002\n\n\u4f46\u662f\u8fd9\u53c8\u6709\u95ee\u9898\u4e86\u2014\u2014\u4e4b\u524d\u6211\u4eec\u51cf\u5c0f$f_j$\u7684\u60f3\u6cd5\uff0c\u662f\u5426\u5728\u8fd9\u91cc\u5c31\u4f1a\u5b9e\u73b0\uff1f\n\n\u4f8b\u5982\uff0c\u6211\u4eec\u8fd9\u91cc\u8fd8\u662f\u6709\u4e00\u6761$f_j\\leftarrow f_k$\u3002\n\n\u73b0\u5728\u6211\u4eec\u53c8\u60f3\u8f6c\u79fb$i$\u4e86\u3002\u4f46\u662f$j$\u4ecd\u7136\u8f6c\u79fb\u4e0d\u4e86\uff0c\u6211\u4eec\u5c31\u88ab\u8feb\u4ece$f_k$\u8f6c\u79fb\u6765\u3002\u663e\u7136\uff0c\u8fd9\u91cc\u7684$len_i$\u957f\u5ea6\u5c31\u5e94\u8be5\u662f$k-i+len_k$\u3002\n\n\u4f46\u662f\uff0c\u5982\u679c\u5b83\u53ef\u4ee5\u4ece$j$\u8f6c\u79fb\u6765\u7684\u8bdd\uff08\u5f53\u7136$f_j$\u5e94\u8be5\u51cf\u5c0f\u5230$f_i-1$\u7684\u5927\u5c0f\uff09\uff0c\u957f\u5ea6\u5f88\u6709\u53ef\u80fd\u5c31\u6210\u4e3a\u4e86$j-i+len_j$\u3002\u663e\u7136\u8fd9\u4e2a$len_j$\u5e94\u8be5\u7b49\u4e8e$len_k$\uff0c\u6bd5\u7adf$k$\u662f$j$\u7684\u7956\u5148\uff0c\u5219\u5982\u679c\u5b83\u4eec\u5957\u5a03\u5c42\u6570\u4e00\u81f4\uff0c\u957f\u5ea6\u5c31\u5e94\u8be5\u4e00\u81f4\u3002\n\n\u800c\u53c8\u5e94\u6709$j<k$\uff0c\u6545\u5b9e\u9645\u4e0a$j-i+len_j<k-i+len_k$\uff0c\u5e94\u8be5\u4ece$j$\u8f6c\u79fb\u800c\u4e0d\u662f\u4ece$k$\u8f6c\u79fb\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4e4b\u524d\u5728$f$\u7684\u8f6c\u79fb\u4e2d\u4e0d\u8d77\u6548\u7684\u60c5\u51b5\uff0c\u5728\u8fd9\u91cc\u5374\u53c8\u8d77\u6548\u4e86\u3002\u5e94\u8be5\u5982\u4f55\u5e94\u5bf9\u5462\uff1f\n\n------------\n\n\u5148\u4ece$len$\u7684\u90e8\u5206\u7f13\u7f13\uff0c\u6211\u4eec\u5148\u56de\u5230\u6c42\u51fa$f_i$\u7684\u8fc7\u7a0b\u3002\u8fd9\u91cc\u6211\u4eec\u53c8\u6709\u4e24\u79cd\u60f3\u6cd5\uff0c\u5373\u586b\u8868\u6cd5\uff08\u7531$i$\u8003\u8651\u6240\u6709\u5408\u6cd5\u7684$j$\uff09\u4e0e\u5237\u8868\u6cd5\uff08\u7531$j$\u8f6c\u79fb\u5230\u6240\u6709\u80fd\u8f6c\u79fb\u7684$i$\uff09\u3002\u5982\u679c\u6211\u4eec\u9009\u62e9\u524d\u4e00\u79cd\u7684\u8bdd\uff0c\u4e0d\u540c\u7684$j$\u7684$\\operatorname{LCP}$\u53d8\u5316\u6beb\u65e0\u89c4\u5f8b\uff0c\u4e0d\u597d\u8f6c\u79fb\uff1b\u800c\u5982\u679c\u9009\u62e9\u540e\u4e00\u79cd\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u56fa\u5b9a\u4e86$len_j$\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u6240\u6709$\\operatorname{LCP}(i,j)\\geq len_j$\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\u4f9d\u636e$\\text{LCP Lemma}$\uff0c\u8fd9\u5728\u540e\u7f00\u6570\u7ec4\u4e2d**\u662f\u4ece$rk_i$\u51fa\u53d1\u5411\u5de6\u5411\u53f3\u7684\u4e00\u6bb5\u533a\u95f4**\u3002\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u5728\u540e\u7f00\u6570\u7ec4\u4e0a\u4e8c\u5206\u6c42\u51fa\u8fd9\u6bb5\u533a\u95f4\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u533a\u95f4\u53d6$\\max$\u5373\u53ef\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u8981\u8003\u8651\u6c42\u51fa$len_i$\u4e86\u3002\u663e\u7136\uff0c\u5728\u6c42\u51fa$f_i$\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u987a\u624b\u6c42\u51fa$len_j$\uff0c\u5373\u6240\u6709$f_j=f_i-1$\u7684$j$\u4e2d\uff0c\u6700\u5c0f\u7684$len$\u3002\u8fd9\u4fbf\u662f\u6211\u4eec\u4e0a\u6587\u4e2d\u201c$len_j$\u5e94\u8be5\u7b49\u4e8e$len_k$\u201d\u90a3\u53e5\u8bdd\u4e2d\uff0c\u90a3\u4e2a\u59cb\u7ec8\u4e0d\u53d8\u7684$len_j$\u3002\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u627e\u51fa$\\operatorname{LCP}(i,j)\\geq len_j$\u7684\u533a\u95f4\uff0c\u7136\u540e\u627e\u5230\u533a\u95f4\u91cc\u6700\u5c0f\u7684\u90a3\u4e2a$j$\uff0c\u5219\u6709$len_i=j-i+len_j$\u3002\u5173\u4e8e\u533a\u95f4\u91cc\u6700\u5c0f\u7684$j$\uff0c\u56e0\u4e3a\u6211\u4eec\u540c\u65f6\u8fd8\u8981\u8981\u6c42$j>i$\uff0c\u6240\u4ee5\u4ecd\u7136\u5fc5\u987b\u5f97\u7528\u7ebf\u6bb5\u6811\u5b9e\u73b0\u3002\n\n\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n\\log n)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200100;\nint res;\nnamespace Suffix_Array{\n\tint x[N],y[N],buc[N],sa[N],ht[N],rk[N],n,m,LG[N],mn[N][20];\n\tchar s[N];\n\tbool mat(int a,int b,int k){\n\t\tif(y[a]!=y[b])return false;\n\t\tif((a+k<n)^(b+k<n))return false;\n\t\tif((a+k<n)&&(b+k<n))return y[a+k]==y[b+k];\n\t\treturn true;\n\t}\n\tvoid SA(){\n\t\tfor(int i=0;i<n;i++)buc[x[i]=s[i]]++;\n\t\tfor(int i=1;i<=m;i++)buc[i]+=buc[i-1];\n\t\tfor(int i=n-1;i>=0;i--)sa[--buc[x[i]]]=i;\n\t\tfor(int k=1;k<n;k<<=1){\n\t\t\tint num=0;\n\t\t\tfor(int i=n-k;i<n;i++)y[num++]=i;\n\t\t\tfor(int i=0;i<n;i++)if(sa[i]>=k)y[num++]=sa[i]-k;\n\t\t\tfor(int i=0;i<=m;i++)buc[i]=0;\n\t\t\tfor(int i=0;i<n;i++)buc[x[y[i]]]++;\n\t\t\tfor(int i=1;i<=m;i++)buc[i]+=buc[i-1];\n\t\t\tfor(int i=n-1;i>=0;i--)sa[--buc[x[y[i]]]]=y[i];\n\t\t\tswap(x,y);\n\t\t\tx[sa[0]]=num=0;\n\t\t\tfor(int i=1;i<n;i++)x[sa[i]]=mat(sa[i],sa[i-1],k)?num:++num;\n\t\t\tif(num>=n-1)break;\n\t\t\tm=num;\n\t\t}\n\t\tfor(int i=0;i<n;i++)rk[sa[i]]=i;\n\t\tfor(int i=0,k=0;i<n;i++){\n\t\t\tif(!rk[i])continue;\n\t\t\tif(k)k--;\n\t\t\tint j=sa[rk[i]-1];\n\t\t\twhile(i+k<n&&j+k<n&&s[i+k]==s[j+k])k++;\n\t\t\tht[rk[i]]=k;\n\t\t}\n\t\tfor(int i=2;i<n;i++)LG[i]=LG[i>>1]+1;\n\t\tfor(int i=1;i<n;i++)mn[i][0]=ht[i];\n\t\tfor(int j=1;j<=LG[n-1];j++)for(int i=1;i+(1<<j)-1<n;i++)mn[i][j]=min(mn[i][j-1],mn[i+(1<<(j-1))][j-1]);\n\t}\n\tint LCP(int x,int y){\n\t\tif(x>y)swap(x,y);\n\t\tx++;\n\t\tint k=LG[y-x+1];\n\t\treturn min(mn[x][k],mn[y-(1<<k)+1][k]);\n\t}\n\tvoid Range(int x,int len,int &L,int &R){//ask for the range of elements that LCP[x,i]>=len is held.\n\t\tx=rk[x];\n\t\tint l,r;\n\t\tl=0,r=x;\n\t\twhile(l<r){\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(LCP(mid,x)>=len)r=mid;\n\t\t\telse l=mid+1;\n\t\t}\n\t\tL=r;\n\t\tl=x,r=n-1;\n\t\twhile(l<r){\n\t\t\tint mid=(l+r+1)>>1;\n\t\t\tif(LCP(mid,x)>=len)l=mid;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tR=l;\n\t}\n}\nusing namespace Suffix_Array;\nstruct SegTree{\n\tint f,len;\n\tSegTree(){f=1,len=1;}\n\tSegTree(int A,int B){f=A,len=B;}\n\tfriend bool operator<(const SegTree &x,const SegTree &y){\n\t\tif(x.f!=y.f)return x.f<y.f;\n\t\treturn x.len>y.len;\n\t}\n};\n#define lson x<<1\n#define rson x<<1|1\n#define mid ((l+r)>>1)\nnamespace SG1{\n\tSegTree tag[N<<2];\n\t#define pushdown(x) tag[lson]=max(tag[lson],tag[x]),tag[rson]=max(tag[rson],tag[x]),tag[x]=SegTree()\n\tvoid modify(int x,int l,int r,int L,int R,SegTree sg){\n\t\tif(l>R||r<L)return;\n\t\tif(L<=l&&r<=R){tag[x]=max(tag[x],sg);return;}\n\t\tpushdown(x),modify(lson,l,mid,L,R,sg),modify(rson,mid+1,r,L,R,sg);\n\t}\n\tSegTree query(int x,int l,int r,int P){\n\t\tif(l==r)return tag[x];\n\t\tpushdown(x);\n\t\treturn (P<=mid)?query(lson,l,mid,P):query(rson,mid+1,r,P);\n\t}\n}\nnamespace SG2{\n\tint mn[N<<2];\n\tvoid pushup(int x){mn[x]=min(mn[lson],mn[rson]);}\n\tvoid modify(int x,int l,int r,int P){\n\t\tif(l>P||r<P)return;\n\t\tif(l==r){mn[x]=sa[P];return;}\n\t\tmodify(lson,l,mid,P),modify(rson,mid+1,r,P),pushup(x);\n\t}\n\tint query(int x,int l,int r,int L,int R){\n\t\tif(l>R||r<L)return 0x3f3f3f3f;\n\t\tif(L<=l&&r<=R)return mn[x];\n\t\treturn min(query(lson,l,mid,L,R),query(rson,mid+1,r,L,R));\n\t}\n}\nint main(){\n\tscanf(\"%d%s\",&n,s),m='z',SA(),memset(SG2::mn,0x3f,sizeof(SG2::mn));\n\tfor(int i=n-1,L,R;i>=0;i--){\n\t\tSegTree tmp=SG1::query(1,0,n-1,rk[i]);\n\t\tres=max(res,tmp.f);//in this phase, f is the real f, while len is still the former status'.\n\t\tif(tmp.f!=1){//need to get the real len.\n\t\t\tRange(i,tmp.len,L,R);\n\t\t\ttmp.len+=SG2::query(1,0,n-1,L,R)-i;\n\t\t}\n\t\ttmp.f++;\n\t\tRange(i,tmp.len,L,R);\n\t\tSG1::modify(1,0,n-1,L,R,tmp);\n\t\tSG2::modify(1,0,n-1,rk[i]);\n\t}\n\tprintf(\"%d\\n\",res);\n\treturn 0;\n}\n```\n",
        "postTime": 1596631723,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF700E \u3010Cool Slogans\u3011"
    },
    {
        "content": "SAM\u597d\u9898  \n\u9996\u5148\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u80fd\u5224\u65ad\u4e00\u4e2a\u4e32\u5728\u53e6\u4e00\u4e2a\u4e32\u91cc\u6709\u65e0\u51fa\u73b0\u4e24\u6b21  \n\u6b64\u65f6\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5728parent\u6811\u4e0a\u7684\u6811\u578bdp  \n\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u5728parent\u6811\u4e0a\uff1f  \n\u8003\u8651\u67d0\u4e2a\u4e32a\u5728\u4ed6\u975eparent\u6811\u5b50\u6811\u7684\u8282\u70b9\u5bf9\u5e94\u7684\u4e32b\u4e0a\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e32b\u80af\u5b9a\u662f\u7531a\u5b50\u6811\u91cc\u67d0\u4e2a\u4e32\u52a0\u4e0a\u4e00\u4e2a\u540e\u7f00\u5f97\u5230\u7684\uff0c\u8fd9\u6837\u5b50\u663e\u7136\u4e0d\u4f18  \n\u6811\u578bdp\u600e\u4e48\u8f6c\u79fb\uff1f  \n\u5927\u6982\u5c31\u662f\u5982\u679c\u8fd9\u4e2a\u4e32\u7684\u67d0\u4e2a\u7956\u5148\u8282\u70b9\u521a\u597d\u5728\u8fd9\u91cc\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u90a3\u4e48\u8be5\u70b9\u7684dp\u503c\u5c31\u662f\u8fd9\u4e2a\u7956\u5148\u8282\u70b9\u7684dp\u503c+1  \n\u627e\u7956\u5148\u7684\u8bdd\u5c31\u662f\u5404\u663e\u795e\u901a\u4e86\uff0c\u500d\u589e\u4e5f\u884c\uff0c\u53cc\u6307\u9488\u4e5f\u884c   \n\u90a3\u4e48\u73b0\u5728\u8003\u8651\u600e\u4e48\u77e5\u9053\u4e00\u4e2a\u4e32\u5728\u53e6\u4e00\u4e2a\u4e32\u91cc\u51fa\u73b0\u4e24\u6b21  \n\u663e\u7136\u6bcf\u4e2a\u4e32\u7684\u6700\u957f\u503c\u901a\u8fc7\u5efaSAM\u6211\u4eec\u662f\u53ef\u4ee5\u77e5\u9053\u7684\uff0c\u540c\u65f6\u4e00\u4e2a\u51fa\u73b0\u4f4d\u7f6e\u7684\u503c\u662f\u53ef\u4ee5\u77e5\u9053\u7684  \n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u957f\u4e32\u51fa\u73b0\u7684\u4e00\u4e2a\u533a\u95f4\u7684\u8303\u56f4  \n\u53ea\u8981\u5728\u8fd9\u4e2a\u8303\u56f4\u91cc\u67e5\u77ed\u4e32\u662f\u5426\u51fa\u73b0\u4e24\u904d\u5c31\u53ef\u4ee5\u4e86  \n\u90a3\u4e48\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u4e00\u4e2aright\u96c6\u5408\uff0c\u67e5\u8be2\u77ed\u4e32\u7684right\u662f\u4e0d\u662f\u5728\u957f\u5ea6\u8303\u56f4\u91cc\u51fa\u73b0\u4e24\u6b21\u5373\u53ef\uff0c\u56e0\u4e3a\u7ef4\u62a4\u7684\u662fright\uff0c\u6240\u4ee5\u957f\u5ea6\u8303\u56f4\u7684\u524d\u77ed\u4e32\u957f\u5ea6\u4e2a\u70b9\u662f\u4e0d\u80fd\u7b97\u7684\uff0c\u8981\u53bb\u6389\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define N 400040\n#define lson tr[now].l\n#define rson tr[now].r\nusing namespace std;\n\nint n;\nchar s[200020];\n\nstruct SM\n{\n    struct point \n    {\n        int son[26],len,mx,at,fa;\n    }t[N];\n\n    struct tree\n    {\n        int sum,l,r;\n    }tr[N<<5];\n\n    int last=1,cnt=1,gg=0;\n    int tot=0;\n    int rt[N];\n    int top[N],dp[N];\n    bool sz[N],vis[N];\n    vector<int> g[N];\n\n    void add(int c)\n    {\n        int p=last;\n        int np=++cnt;\n        t[np].len=t[p].len+1;\n        t[np].at=++gg;\n        sz[np]=1;\n        while(p&&(!t[p].son[c]))\n        {\n            t[p].son[c]=np;\n            p=t[p].fa;\n        }\n        if(!p) t[np].fa=1;\n        else\n        {\n            int q=t[p].son[c],nq;\n            if(t[q].len==t[p].len+1)\n            {\n                t[np].fa=q;\n            }\n            else\n            {\n                nq=++cnt;\n                t[nq]=t[q];\n                t[nq].len=t[p].len+1;\n                t[np].fa=t[q].fa=nq;\n                t[nq].at=t[np].at;\n                while(p&&(t[p].son[c]==q))\n                {\n                    t[p].son[c]=nq;\n                    p=t[p].fa;\n                } \n            }\n        }\n        last=np;\n    }\n\n    void push_up(int now)\n    {   \n        tr[now].sum=tr[lson].sum+tr[rson].sum;\n    }\n\n    void insert(int &now,int l,int r,int pos,int val)\n    {\n        if(!now) now=++tot;\n        if(l==r) \n        {\n            tr[now].sum=val;\n            return ;\n        }\n        int mid=(l+r)>>1;\n        if(pos<=mid)\n        {\n            insert(lson,l,mid,pos,val);\n        }\n        else\n        {\n            insert(rson,mid+1,r,pos,val);\n        }\n        push_up(now);\n    }\n\n    int query(int now,int l,int r,int ll,int rr)\n    {\n        if(ll>rr) return 0;\n        if(!now) return 0;\n        if(ll<=l&&r<=rr)\n        {\n            return tr[now].sum;\n        } \n        int mid=(l+r)>>1;\n        if(rr<=mid)\n        {\n            return query(lson,l,mid,ll,rr);\n        }\n        else\n        {\n            if(ll>mid)\n            {\n                return query(rson,mid+1,r,ll,rr); \n            }\n            else\n            {\n                return query(lson,l,mid,ll,mid)+query(rson,mid+1,r,mid+1,rr);\n            }\n        }\n    } \n\n    int merge(int a,int b,int l,int r)\n    {\n        if(!a) return b;\n        if(!b) return a;\n        int now=++tot;\n        if(l==r)\n        {\n            tr[now].sum=1;\n            return now;\n        }\n        int mid=(l+r)>>1;\n        tr[now].l=merge(tr[a].l,tr[b].l,l,mid);\n        tr[now].r=merge(tr[a].r,tr[b].r,mid+1,r);\n        push_up(now);\n        return now;\n    }\n\n    int dfs(int now)\n    {\n        if(sz[now])\n        {\n            insert(rt[now],1,n,t[now].at,1);\n        }\n        for(int i=0;i<g[now].size();i++)\n        {\n            dfs(g[now][i]);\n            rt[now]=merge(rt[now],rt[g[now][i]],1,n);\n        }\n    }\n\n    int dfs1(int now)\n    {\n        if(query(rt[top[t[now].fa]],1,n,t[now].at-t[now].len+t[top[t[now].fa]].len,t[now].at-1))\n        {\n            dp[now]=dp[t[now].fa]+1;\n            top[now]=now;\n        }\n        else\n        {\n            dp[now]=dp[t[now].fa];\n            top[now]=top[t[now].fa];\n        }\n        for(int i=0;i<g[now].size();i++)\n        {\n            dfs1(g[now][i]);\n        }\n    }\n\n    int print(int now,int l,int r)\n    {\n        if(l==r)\n        {\n            if(tr[now].sum) printf(\"%d \",l);\n            return 0; \n        }\n        int mid=(l+r)>>1;\n        if(tr[lson].sum) print(lson,l,mid);\n        if(tr[rson].sum) print(rson,mid+1,r);\n    }\n\n    int solve()\n    {\n        for(int i=1;i<=cnt;i++)\n        {\n            g[t[i].fa].push_back(i);\n        }\n        dfs(1); \n        for(int i=0;i<g[1].size();i++)\n        {\n            top[g[1][i]]=g[1][i];\n            dp[g[1][i]]=1;\n            for(int j=0;j<g[g[1][i]].size();j++)\n            {\n                dfs1(g[g[1][i]][j]);\n            }\n        }\n        int ans=0;\n        for(int i=1;i<=cnt;i++)\n        {\n            ans=max(ans,dp[i]);\n        }\n        printf(\"%d\\n\",ans);\n    }\n}sm;\n\nint main()\n{\n    scanf(\"%d\",&n);\n    scanf(\"%s\",s);\n    n=strlen(s);\n    for(int i=0;i<n;i++)\n    {\n        sm.add(s[i]-'a');\n    }\n    sm.solve();\n} \n```\n",
        "postTime": 1550462405,
        "uid": 185441,
        "name": "\u30cb\u30d2\u30eb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF700E \u3010Cool Slogans\u3011"
    },
    {
        "content": "### \u9898\u610f:\n\n\u6211\u4eec\u5b9a\u4e49 $\\forall i ,s_i$ \u662f\u7ed9\u5b9a\u4e32 $S$ \u7684\u5b50\u4e32\uff0c\u4e14 $s_{i-1}$ \u5728 $s_{i}$ \u8981\u51fa\u73b0\u81f3\u5c11\u4e24\u6b21\u3002\u6c42\u6700\u5927\u7684 $k$\uff0c\u4f7f\u5f97 $\\forall i,s_i \\in S$\u3002\n\n### sol:\n\n\u6211\u4eec\u8003\u8651\u5230\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $i$\uff0c$fa_i$ \u662f $i$ \u7684\u5b50\u4e32\uff0c\u5e76\u4e14\u662f\u540e\u7f00\uff0c\u6211\u4eec\u5b9a\u4e49 $g_i$ \u662f\u4e0a\u6b21\u5339\u914d\u5230\u7684\u70b9\uff0c$f_i$ \u662f\u5339\u914d\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u957f\u957f\u5ea6\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u80fd\u5339\u914d\u5c31\u5339\u914d\uff0c\u8fd9\u6837\u663e\u7136\u662f\u6700\u4f18\u7684\uff0c\u4e0d\u80fd\u5c31\u590d\u5236\u7236\u8282\u70b9\u4fe1\u606f\u63a5\u7740\u5f80\u4e0b\u73a9\u3002\n\n\n\u6211\u4eec\u8003\u8651\u5230 $1$ ~ $i$ \u7684\u4e00\u6761\u94fe\u4e0a\u540e\u7f00\u90fd\u76f8\u540c\u4f46\u662f\u957f\u5ea6\u4e0d\u540c\u3002\n\n\u7136\u540e\u6211\u4eec\u8981\u8003\u8651\u5982\u679c $g_u$ \u7684\u5b50\u6811\u5305\u542b $v$\uff0c\u90a3\u4e48 $g_u$ \u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u5728 $v$ \u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 \u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u6613\u8bc1\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7ebf\u6bb5\u6811\u5408\u5e76\u51fa\u6765\u6bcf\u4e2a\u70b9 $i$ \u7684\u5b50\u6811\u4fe1\u606f\u5c31\u53ef\u4ee5\u4e86\u3002\u5c31\u662f\u8bf4\u54ea\u4e2a\u51fa\u73b0\u8fc7\u54ea\u4e2a\u6ca1\u51fa\u73b0\u8fc7\u3002\n\n\u7136\u540e\u7684\u8bdd\u6211\u4eec\u5c31\u8003\u8651\u4e00\u4e0b\u53e6\u4e00\u6b21\u51fa\u73b0\u600e\u4e48\u6c42\u5462\u3002\u663e\u7136\u4f60\u51fa\u73b0\u7684\u4f4d\u7f6e\u662f $pos_v$ \u90a3\u4e48\u6211\u4eec\u8981\u628a $pos_v$ \u8fd9\u4e2a\u70b9\u53bb\u6389\u3002\u5e76\u4e14\u6211\u4eec\u8981\u5728 $[pos_v - len_v + len_{g_u} , pos_v - 1]$ \u8fd9\u6bb5\u533a\u95f4\u5185\u627e\u5230\u70b9\u3002\n\n\u4e3a\u4ec0\u4e48\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\uff0c$len_v$ \u662f $v$ \u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u90a3\u4e48 $len_{g_u}$ \u540c\u7406\uff0c\u56e0\u4e3a\u4f60\u7684\u4e0a\u4e2a\u8f6c\u79fb\u70b9\u662f $g_u$ \u6240\u4ee5\u663e\u7136\u662f $g_u$ \u4f46\u662f\u957f\u5ea6\u81f3\u5c11\u4e3a $len_{g_u}$ \u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u70b9\u5fc5\u987b\u5728 $pos_v - len_v + len_{g_u}$ \u540e\u9762\u3002\n\n\u4ee3\u7801\u633a\u597d\u5199\u7684.jpg\n\n### code:\n\n```cpp\n// clang-format off\n// powered by c++11\n// by Isaunoya\n#include<bits/stdc++.h>\n#define rep(i,x,y) for(register int i=(x);i<=(y);++i)\n#define Rep(i,x,y) for(register int i=(x);i>=(y);--i)\nusing namespace std;using db=double;using ll=long long;\nusing uint=unsigned int;using ull=unsigned long long;\nusing pii=pair<int,int>;\n#define Tp template\n#define fir first\n#define sec second\nTp<class T>void cmax(T&x,const T&y){if(x<y)x=y;}Tp<class T>void cmin(T&x,const T&y){if(x>y)x=y;}\n#define all(v) v.begin(),v.end()\n#define sz(v) ((int)v.size())\n#define pb emplace_back\nTp<class T>void sort(vector<T>&v){sort(all(v));}Tp<class T>void reverse(vector<T>&v){reverse(all(v));}\nTp<class T>void unique(vector<T>&v){sort(all(v)),v.erase(unique(all(v)),v.end());}inline void reverse(string&s){reverse(s.begin(),s.end());}\nconst int SZ=1<<23|233;\nstruct FILEIN{char qwq[SZ],*S=qwq,*T=qwq,ch;\n#ifdef __WIN64\n#define GETC getchar\n#else\ninline char GETC(){return(S==T)&&(T=(S=qwq)+fread(qwq,1,SZ,stdin),S==T)?EOF:*S++;}\n#endif\ninline FILEIN&operator>>(char&c){while(isspace(c=GETC()));return*this;}inline FILEIN&operator>>(string&s){s.clear();while(isspace(ch=GETC()));if(!~ch)return*this;s=ch;while(!isspace(ch=GETC())&&~ch)s+=ch;return*this;}\ninline FILEIN&operator>>(char*str){char*cur=str;while(*cur)*cur++=0;cur=str;while(isspace(ch=GETC()));if(!~ch)return*this;*cur=ch;while(!isspace(ch=GETC())&&~ch)*++cur=ch;*++cur=0;return*this;}\nTp<class T>inline void read(T&x){bool f=0;while((ch=GETC())<48&&~ch)f^=(ch==45);x=~ch?(ch^48):0;while((ch=GETC())>47)x=x*10+(ch^48);x=f?-x:x;}\ninline FILEIN&operator>>(int&x){return read(x),*this;}inline FILEIN&operator>>(ll&x){return read(x),*this;}inline FILEIN&operator>>(uint&x){return read(x),*this;}inline FILEIN&operator>>(ull&x){return read(x),*this;}\ninline FILEIN&operator>>(double&x){read(x);bool f=x<0;x=f?-x:x;if(ch^'.')return*this;double d=0.1;while((ch=GETC())>47)x+=d*(ch^48),d*=.1;return x=f?-x:x,*this;}\n}in;\nstruct FILEOUT{const static int LIMIT=1<<22;char quq[SZ],ST[233];int sz,O,pw[233];\nFILEOUT(){set(7);rep(i,pw[0]=1,9)pw[i]=pw[i-1]*10;}~FILEOUT(){flush();}\ninline void flush(){fwrite(quq,1,O,stdout),fflush(stdout),O=0;}\ninline FILEOUT&operator<<(char c){return quq[O++]=c,*this;}inline FILEOUT&operator<<(string str){if(O>LIMIT)flush();for(char c:str)quq[O++]=c;return*this;}\ninline FILEOUT&operator<<(char*str){if(O>LIMIT)flush();char*cur=str;while(*cur)quq[O++]=(*cur++);return*this;}\nTp<class T>void write(T x){if(O>LIMIT)flush();if(x<0){quq[O++]=45;x=-x;}do{ST[++sz]=x%10^48;x/=10;}while(x);while(sz)quq[O++]=ST[sz--];}\ninline FILEOUT&operator<<(int x){return write(x),*this;}inline FILEOUT&operator<<(ll x){return write(x),*this;}inline FILEOUT&operator<<(uint x){return write(x),*this;}inline FILEOUT&operator<<(ull x){return write(x),*this;}\nint len,lft,rig;void set(int l){len=l;}inline FILEOUT&operator<<(double x){bool f=x<0;x=f?-x:x,lft=x,rig=1.*(x-lft)*pw[len];return write(f?-lft:lft),quq[O++]='.',write(rig),*this;}\n}out;\n#define int long long\nstruct Math{\nvector<int>fac,inv;int mod;\nvoid set(int n,int Mod){fac.resize(n+1),inv.resize(n+1),mod=Mod;rep(i,fac[0]=1,n)fac[i]=fac[i-1]*i%mod;inv[n]=qpow(fac[n],mod-2);Rep(i,n-1,0)inv[i]=inv[i+1]*(i+1)%mod;}\nint qpow(int x,int y){int ans=1;for(;y;y>>=1,x=x*x%mod)if(y&1)ans=ans*x%mod;return ans;}int C(int n,int m){if(n<0||m<0||n<m)return 0;return fac[n]*inv[m]%mod*inv[n-m]%mod;}\nint gcd(int x,int y){return!y?x:gcd(y,x%y);}int lcm(int x,int y){return x*y/gcd(x,y);}\n}math;\n// clang-format on\nint n;\nconst int maxn = 4e5 + 54;\nchar s[maxn];\n\nint rt[maxn];\nstruct SegMentTree {\n  const static int maxnode = maxn << 5;\n  int ls[maxnode], rs[maxnode], cnt;\n\n  SegMentTree() { cnt = 0; }\n\n  void upd(int& p, int l, int r, int x) {\n    if (!p) p = ++cnt;\n    if (l == r) return;\n    int mid = l + r >> 1;\n    if (x <= mid)\n      upd(ls[p], l, mid, x);\n    else\n      upd(rs[p], mid + 1, r, x);\n  }\n\n  int merge(int x, int y) {\n    if (!x || !y) return x | y;\n    int qwq = ++cnt;\n    ls[qwq] = merge(ls[x], ls[y]);\n    rs[qwq] = merge(rs[x], rs[y]);\n    return qwq;\n  }\n\n  int qry(int p, int a, int b, int l, int r) {\n    if (!p) return 0;\n    if (a <= l && r <= b) return 1;\n    int mid = l + r >> 1, ans = 0;\n    if (a <= mid) ans += qry(ls[p], a, b, l, mid);\n    if (b > mid) ans += qry(rs[p], a, b, mid + 1, r);\n    return ans;\n  }\n} smt;\n\nint ans = 1;\nstruct SAM {\n  int ch[maxn][26], fa[maxn], len[maxn], pos[maxn], las, cnt;\n  SAM() { las = cnt = 1; }\n\n  void add(int c, int id) {\n    int p = las, np = las = ++cnt;\n    pos[np] = id, len[np] = len[p] + 1, smt.upd(rt[np], 1, n, id);\n    for (; p && !ch[p][c]; p = fa[p]) ch[p][c] = np;\n    if (!p) {\n      fa[np] = 1;\n    } else {\n      int q = ch[p][c];\n      if (len[q] == len[p] + 1) {\n        fa[np] = q;\n      } else {\n        int nq = ++cnt;\n        memcpy(ch[nq], ch[q], sizeof(ch[q]));\n        pos[nq] = pos[q], fa[nq] = fa[q], fa[q] = fa[np] = nq, len[nq] = len[p] + 1;\n        for (; p && ch[p][c] == q; p = fa[p]) ch[p][c] = nq;\n      }\n    }\n  }\n\n  vector<int> g[maxn];\n  void dfs(int u) {\n    for (int v : g[u]) {\n      dfs(v);\n      rt[u] = smt.merge(rt[u], rt[v]);\n    }\n  }\n\n  void build(char* s) {\n    char* cur = s;\n    int id = 0;\n    while (*cur) {\n      int c = (*cur++) - 'a';\n      add(c, ++id);\n    }\n    rep(i, 2, cnt) g[fa[i]].pb(i);\n  }\n\n  int f[maxn], G[maxn];\n  void dfs2(int u) {\n    for (int v : g[u]) {\n      if (fa[v] == 1) {\n        f[v] = 1, G[v] = v;\n      } else {\n        if (smt.qry(rt[G[u]], pos[v] - (len[v] - len[G[u]]), pos[v] - 1, 1, n))\n          f[v] = f[u] + 1, G[v] = v;\n        else\n          f[v] = f[u], G[v] = G[u];\n      }\n      dfs2(v);\n    }\n    cmax(ans, f[u]);\n  }\n} sam;\n\nsigned main() {\n  // code begin.\n  in >> n >> s, sam.build(s), sam.dfs(1), sam.dfs2(1);\n  out << ans << '\\n';\n  return 0;\n  // code end.\n}\n```",
        "postTime": 1584890165,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF700E \u3010Cool Slogans\u3011"
    },
    {
        "content": "\u6807\u7b7e: \u5b57\u7b26\u4e32, \u540e\u7f00\u81ea\u52a8\u673a(SAM).\n\n\u5bb9\u6613\u53d1\u73b0\u5fc5\u5b9a\u5b58\u5728\u4e00\u79cd\u6700\u4f73\u65b9\u6848\u4f7f\u5f97 $s_i$ \u65f6 $s_{i-1}$ \u7684\u540e\u7f00(\u4e8b\u5b9e\u4e0a\u540c\u65f6\u4e5f\u53ef\u4ee5\u662f\u524d\u7f00), \u90a3\u4e48\u6211\u4eec\u5c31\u6c42\u8fd9\u6837\u7684\u65b9\u6848\u5c31\u597d\u4e86.\n\n\u6211\u4eec\u5bf9 $S$ \u5efa\u7acb SAM , \u5f97\u5230parent\u6811, \u90a3\u4e48\u6211\u4eec\u5c31\u6709\u4e00\u4e2a\u663e\u7136\u7684DP: \u5bf9\u4e8eparent\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9 $u$ , \u627e\u5230\u6700\u8fd1\u7684\u5728 $u$ \u4e2d\u51fa\u73b0\u4e24\u6b21\u7684\u7956\u5148 $v$ , \u90a3\u4e48 $u$ \u7684\u7b54\u6848\u4e3a $v$ \u7684\u7b54\u6848 $+1$ .\n\n\u7531\u4e8e\u7b54\u6848\u4e00\u6b21\u8f6c\u79fb\u6700\u591a $+1$, \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u53d6\u4e0e $u$ \u7236\u4eb2\u7b54\u6848\u76f8\u540c\u7684\u6700\u6d45\u7684\u7956\u5148\u4f5c\u4e3a $v$ \u8f6c\u79fb\u5373\u53ef.\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n;\nchar s[200005];\n\nint lst[200005], ch[400005][26], len[400005], fa[400005], pos[400005], idcnt;\nvoid ins(int c, int i) {\n    int p = lst[i - 1], np = lst[i] = ++idcnt;\n    len[np] = len[p] + 1, pos[np] = i;\n    while (p && !ch[p][c]) ch[p][c] = np, p = fa[p];\n    if (!p) return fa[np] = 1, void();\n    int q = ch[p][c];\n    if (len[q] == len[p] + 1) return fa[np] = q, void();\n    int nq = ++idcnt;\n    len[nq] = len[p] + 1, memcpy(ch[nq], ch[q], sizeof(ch[q]));\n    fa[nq] = fa[q], fa[np] = fa[q] = nq, pos[nq] = pos[q];\n    while (ch[p][c] == q) ch[p][c] = nq, p = fa[p];\n}\n\nint rt[400005], segcnt;\nstruct Seg {\n    int ls[10000007], rs[10000007];\n    void ins(int &k, int l, int r, int p) {\n        k = ++segcnt;\n        if (l == r) return;\n        int mid = l + r >> 1;\n        (p <= mid) ? ins(ls[k], l, mid, p) : ins(rs[k], mid + 1, r, p);\n    }\n\n    int merge(int x, int y) {\n        if (!(x && y)) return x ^ y;\n        int k = ++segcnt;\n        ls[k] = merge(ls[x], ls[y]), rs[k] = merge(rs[x], rs[y]);\n        return k;\n    }\n\n    bool check(int k, int l, int r, int st, int en) {\n        if (!k || st > r || en < l) return 0;\n        if (st <= l && en >= r) return 1;\n        int mid = l + r >> 1;\n        return check(ls[k], l, mid, st, en) ? 1\n                                            : check(rs[k], mid + 1, r, st, en);\n    }\n} seg;\n\nint cnt[200005], a[400005];\nvoid topo_sort() {\n    for (int i = 1; i <= idcnt; ++i) ++cnt[len[i]];\n    for (int i = 1; i <= n; ++i) cnt[i] += cnt[i - 1];\n    for (int i = 1; i <= idcnt; ++i) a[cnt[len[i]]--] = i;\n}\n\nint f[400005];\nint main() {\n    scanf(\"%d%s\", &n, s + 1);\n    lst[0] = idcnt = 1;\n    for (int i = 1; i <= n; ++i)\n        ins(s[i] - 'a', i), seg.ins(rt[lst[i]], 1, n, i);\n    topo_sort();\n    for (int i = idcnt; i > 1; --i)\n        rt[fa[a[i]]] = seg.merge(rt[fa[a[i]]], rt[a[i]]);\n    int res = 1;\n    for (int i = 2, u, v; i <= idcnt; ++i) {\n        u = a[i], v = fa[u];\n        if (v == 1) {\n            f[u] = 1, fa[u] = u;\n            continue;\n        }\n        seg.check(rt[fa[v]], 1, n, pos[u] - len[u] + len[fa[v]], pos[u] - 1)\n            ? (f[u] = f[v] + 1, fa[u] = u)\n            : (f[u] = f[v], fa[u] = fa[v]);\n        res = max(res, f[u]);\n    }\n    printf(\"%d\\n\", res);\n    return 0;\n}\n```\n",
        "postTime": 1580703609,
        "uid": 51237,
        "name": "Kinandra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF700E \u3010Cool Slogans\u3011"
    },
    {
        "content": "[CF 700E](http://codeforces.com/problemset/problem/700/E)\u3002\n\n## Description\n\n\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32 $\\mathrm{str}$\u3002\u4f60\u9700\u8981\u6784\u9020\u4e00\u4e2a\u5c3d\u91cf\u5b57\u7b26\u4e32\u5e8f\u5217 $s_1, s_2, \\cdots, s_k$\uff0c\u6ee1\u8db3\uff1a\n\n- \u5bf9\u4e8e\u4efb\u610f $1 \\leq i \\leq n$\uff0c$s_i$ \u4e3a $\\mathrm{str}$ \u7684\u5b50\u4e32\u3002\n- \u5bf9\u4e8e\u4efb\u610f $1 < i \\leq n$\uff0c$s_{i - 1}$ \u5728 $s_i$ \u4e2d\u81f3\u5c11\u51fa\u73b0\u4e86\u4e24\u6b21\uff08\u53ef\u91cd\u53e0\uff09\u3002\n\n\u53ea\u9700\u6c42\u51fa $k$ \u7684\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1 \\leq n \\leq 2 \\times 10^5$\u3002  \n\u65f6\u7a7a\u9650\u5236\uff1a$4000 \\ \\mathrm{ms} / 500 \\ \\mathrm{MiB}$\u3002\n\n## Solution\n\n> #### \u5f15\u7406 1\n\n> \u4e00\u5b9a\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u65b9\u6848\uff0c\u4f7f\u5f97 $s_{i - 1}$ \u4e3a $s_i$ \u7684 border\u3002\n\n> #### \u8bc1\u660e\n\n> \u5bf9\u4e8e\u4e00\u4e2a\u4e32 $s_i$\uff0c\u5c06\u5176\u9996\u5c3e\u591a\u4f59\u7684\u90e8\u5206\u53bb\u6389\uff0c\u6b64\u65f6 $s_i$ \u5373\u4e3a $s_{i - 1}$ \u7684 border\u3002\u6309 $i$ \u4ece\u5927\u5230\u5c0f\u5c06 $s_i$ \u7684\u591a\u4f59\u90e8\u5206\u53bb\u6389\u5373\u53ef\u5f97\u5230\u6ee1\u8db3\u8be5\u6027\u8d28\u7684\u65b9\u6848\u3002\n\n\u6839\u636e\u300c\u5f15\u7406 1\u300d\uff0c\u53ef\u4ee5\u5f97\u77e5 $s_{i - 1}$ \u4e3a $s_i$ \u7684\u4e25\u683c\u540e\u7f00\u3002\u8003\u8651\u5c06\u539f\u4e32\u7684 SAM \u5efa\u51fa\u3002\n\n> #### \u5f15\u7406 2\n\n> \u5728 SAM \u7684 parent \u6811\u4e0a\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u72b6\u6001 $x$ \u4e0e\u5176\u7956\u5148\u72b6\u6001 $y$\uff0c$y$ \u8868\u793a\u7684\u6240\u6709\u5b50\u4e32\u5728 $x$ \u8868\u793a\u7684\u6700\u957f\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u76f8\u540c\u3002\n\n> #### \u8bc1\u660e\n\n> ![P2.png](https://s2.loli.net/2022/04/17/WkSscZQ4OPn9xpm.png)\n\n> \u53cd\u8bc1\u6cd5\uff0c\u8003\u8651\u5982\u56fe\u6240\u793a\u7684\u5b50\u4e32\u7ed3\u6784\u3002\u4e32 $S$ \u662f\u72b6\u6001 $x$ \u6240\u8868\u793a\u7684\u6700\u957f\u4e32\uff1b\u4e32 $T_1, T_2$ \u662f\u72b6\u6001 $y$ \u6240\u8868\u793a\u7684\u4efb\u610f\u4e24\u4e2a\u5b50\u4e32\uff0c\u8fd9\u4e24\u4e2a\u5b50\u4e32\u5728 $S$ \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u4e0d\u540c\uff0c\u5fc5\u7136\u4f1a\u51fa\u73b0\u5982\u56fe\u6240\u793a\u7684\u7ed3\u6784\u3002\u6b64\u65f6\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u4e32 $S'$ \u6765\u4f7f\u5f97 $T_1, T_2$ \u5728 $S'$ \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u76f8\u540c\u3002\n\n> \u7531\u4e8e $\\mathrm{endpos}(x) \\subsetneqq \\mathrm{endpos}(y)$\uff0c\u5219\u51fa\u73b0 $S$ \u7684\u5730\u65b9\uff0c\u524d\u9762\u603b\u4f1a\u8ddf\u7740\u4e00\u4e2a\u4e32 $T_2$\u3002\u8fd9\u6837\u7684\u8bdd\u4f1a\u4f7f\u5f97 $S, T_2$ \u7ec4\u5408\u6210\u4e00\u4e2a $S'$\uff0c\u53ef\u4ee5\u63a8\u51fa $\\mathrm{endpos}(S) = \\mathrm{endpos}(S')$\uff0c\u8fd9\u4e0e $S$ \u4e3a\u72b6\u6001 $x$ \u6240\u8868\u793a\u7684\u6700\u957f\u4e32\u77db\u76fe\uff0c\u6545\u5047\u8bbe\u4e0d\u6210\u7acb\u3002\n\n> Q.E.D\n\n\u6839\u636e\u300c\u5f15\u7406 2\u300d\uff0c\u53ef\u4ee5\u5f97\u77e5\u5bf9\u4e8e SAM \u7684\u6bcf\u4e2a\u72b6\u6001\uff0c\u6211\u4eec\u90fd\u53ea\u9700\u8981\u8bb0\u5f55\u5176\u6240\u8868\u793a\u7684\u6700\u957f\u4e32\u7684\u7b49\u7ea7\u4fe1\u606f\u5373\u53ef\u3002\n\n\u6b64\u65f6\u5c31\u53ef\u4ee5\u5728 parent \u6811\u4e0a dp\uff0c\u8bbe $f_i$ \u8868\u793a\u4ece\u6839\u8282\u70b9\u5230\u8282\u70b9 $i$ \u7684\u6700\u5927\u7b49\u7ea7\uff0c\u8bbe $g_i$ \u8868\u793a\u4ece\u6839\u8282\u70b9\u5230\u8282\u70b9 $i$ \u6700\u5927\u7b49\u7ea7\u4e32\u7684\u72b6\u6001\u7f16\u53f7\u3002\n\n- \u82e5 $x$ \u6240\u8868\u793a\u7684\u6700\u957f\u4e32\u4e2d\u51fa\u73b0\u4e86\u4e24\u6b21 $g_{\\mathrm{Fa}_x}$ \u6240\u8868\u793a\u7684\u6700\u957f\u4e32\uff0c\u5219\n\n$$\nf_x = f_{{\\mathrm{Fa}_x}} + 1\n$$\n$$\ng_x = x\n$$\n\n- \u5426\u5219\n\n$$\nf_x = f_{\\mathrm{Fa}_x}\n$$\n$$\ng_x = g_{\\mathrm{Fa}_x}\n$$\n\n\u8fd0\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4 $\\mathrm{endpos}$ \u96c6\u5408\uff0c\u6765\u5224\u65ad\u6bcf\u6b21\u662f\u5426\u53ef\u4ee5\u6210\u529f\u8f6c\u79fb\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n \\log n)$\u3002\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nconst int N = 200100;\n\nint n;\nchar str[N];\n\nnamespace SGT {\n\tconst int SIZE = 10001000;\n\n\tint cT;\n\tstruct node {\n\t\tint lc, rc;\n\t} t[SIZE];\n\n\tvoid insert(int &p, int l, int r, int x) {\n\t\tp = ++ cT;\n\t\tif (l == r) return;\n\t\tint mid = (l + r) >> 1;\n\t\tif (x <= mid)\n\t\t\tinsert(t[p].lc, l, mid, x);\n\t\telse\n\t\t\tinsert(t[p].rc, mid + 1, r, x);\n\t}\n\n\tint merge(int p, int q) {\n\t\tif (!p || !q) return p ^ q;\n\t\tint x = ++ cT;\n\t\tt[x].lc = merge(t[p].lc, t[q].lc);\n\t\tt[x].rc = merge(t[p].rc, t[q].rc);\n\t\treturn x;\n\t}\n\n\tbool ask(int p, int l, int r, int s, int e) {\n\t\tif (!p) return 0;\n\t\tif (s <= l && r <= e) return 1;\n\t\tint mid = (l + r) >> 1;\n\t\tif (s <= mid && ask(t[p].lc, l, mid, s, e)) return 1;\n\t\tif (mid < e && ask(t[p].rc, mid + 1, r, s, e)) return 1;\n\t\treturn 0;\n\t}\n}\n\nint ans;\n\nnamespace SAM {\n\tconst int SIZE = N * 2; \n\n\tint cT = 1, Last = 1;\n\tstruct node {\n\t\tint trans[26];\n\t\tint link, maxl;\n\t} t[SIZE];\n\n\tint root[SIZE], pos[SIZE];\n\n\tint tot, head[SIZE], ver[SIZE], Next[SIZE];\n\tvoid add_edge(int u, int v) {\n\t\tver[++ tot] = v;    Next[tot] = head[u];    head[u] = tot;\n\t}\n\n\tvoid extend(int id, int c) {\n\t\tint p = Last,\n\t\t\tnp = Last = ++ cT;\n\n\t\tSGT::insert(root[np], 1, n, id);\n\t\tpos[np] = id;\n\n\t\tt[np].maxl = t[p].maxl + 1;\n\n\t\tfor (; p && t[p].trans[c] == 0; p = t[p].link) t[p].trans[c] = np;\n\n\t\tif (!p) {\n\t\t\tt[np].link = 1;\n\t\t} else {\n\t\t\tint q = t[p].trans[c];\n\n\t\t\tif (t[q].maxl == t[p].maxl + 1) {\n\t\t\t\tt[np].link = q;\n\t\t\t} else {\n\t\t\t\tint nq = ++ cT;\n\n\t\t\t\tt[nq] = t[q], t[nq].maxl = t[p].maxl + 1, pos[nq] = pos[q], t[np].link = t[q].link = nq;\n\t\t\t\tfor (; p && t[p].trans[c] == q; p = t[p].link) t[p].trans[c] = nq;\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid build_tree() {\n\t\tfor (int i = 2; i <= cT; i ++)\n\t\t\tadd_edge(t[i].link, i);\n\t}\n\n\tvoid dfs(int u) {\n\t\tfor (int i = head[u]; i; i = Next[i]) {\n\t\t\tint v = ver[i];\n\t\t\tdfs(v);\n\t\t\troot[u] = SGT::merge(root[u], root[v]);\n\t\t}\n\t}\n\n\tint f[SIZE], g[SIZE];\n\n\tvoid dp(int u) {\n\t\tif (t[u].link == 1) {\n\t\t\tf[u] = 1, g[u] = u;\n\t\t} else if (u > 1) {\n\t\t\tint pa = t[u].link;\n\t\t\tif (SGT::ask(root[g[pa]], 1, n, pos[u] - t[u].maxl + t[g[pa]].maxl, pos[u] - 1)) {\n\t\t\t\tf[u] = f[pa] + 1, g[u] = u;\n\t\t\t} else {\n\t\t\t\tf[u] = f[pa], g[u] = g[pa];\n\t\t\t}\n\t\t}\n\n\t\tans = std::max(ans, f[u]);\n\n\t\tfor (int i = head[u]; i; i = Next[i]) {\n\t\t\tint v = ver[i];\n\t\t\tdp(v);\n\t\t}\n\t}\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tscanf(\"%s\", str + 1);\n\n\tfor (int i = 1; i <= n; i ++)\n\t\tSAM::extend(i, str[i] - 'a');\n\n\tSAM::build_tree();\n\tSAM::dfs(1);\n\tSAM::dp(1);\n\n\tprintf(\"%d\\n\", ans);\n\n\treturn 0;\n}\n```",
        "postTime": 1650263631,
        "uid": 129578,
        "name": "Calculatelove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF700E\u3010Cool Slogans\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://codeforces.com/problemset/problem/700/E)\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5f3a\u5236 $s_{i-1}$ \u662f $s_i$ \u7684\u540e\u7f00\uff0c\u8fd9\u6837\u662f\u4e0d\u4f1a\u4f7f\u7b54\u6848\u53d8\u52a3\u7684\uff0c\u56e0\u4e3a\u628a $s_{i}$ \u540e\u9762\u4e0d\u80fd\u548c $s_{i-1}$ \u5339\u914d\u7684\u90a3\u6bb5\u780d\u6389\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9009\u7684 $s$ \u5176\u5b9e\u662f\u540e\u7f00\u81ea\u52a8\u673a Parent Tree \u4e0a\u7684\u4e00\u6761\u4ece\u6839\u51fa\u53d1\u7684\u94fe\u90e8\u5206\u8282\u70b9\uff0c\u4e14\u540c\u4e2a\u8282\u70b9\u6700\u591a\u9009\u4e00\u4e2a\uff08\u56e0\u4e3a\u540c\u4e2a\u8282\u70b9\u7684\u4e0d\u540c\u4e32\u4e0d\u53ef\u80fd\u6ee1\u8db3\u51fa\u73b0 2 \u6b21\u7684\u5173\u7cfb\uff09\u3002\u4f46\u662f\u73b0\u5728\u95ee\u9898\u6765\u4e86\uff0c\u6211\u4eec\u600e\u4e48\u77e5\u9053\u8fd9\u4e2a\u8282\u70b9\u4e2d\u5e94\u8be5\u9009\u54ea\u4e2a\uff0c\u6240\u4ee5\u8fd9\u91cc\u5148\u8981\u77e5\u9053\u4e00\u4e2a\u5f15\u7406\uff1a\n\n> \u5bf9\u4e8e\u8282\u70b9 $u$ \u548c\u8282\u70b9 $v$ \u6ee1\u8db3 $u$ \u662f $v$ \u7684\u7956\u5148\uff0c\u82e5\u53d6\u51fa $v$ \u4e2d\u6700\u957f\u7684\u4e32\uff0c\u5219 $u$ \u4e2d\u6240\u6709\u7684\u4e32\u5728\u6b64\u4e32\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u662f\u4e00\u6837\u7684\u3002\n\n\u795e iostream \u7ed9\u51fa\u4e86\u4e25\u8c28\u7684\u8bc1\u660e\uff0c\u6240\u4ee5\u6211\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u53ef\u80fd\u4f1a\u5f62\u8c61\u5177\u4f53\u7684\uff0c\u65b9\u4fbf\u5927\u5bb6\u611f\u6027\u7406\u89e3\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lt10gyke.png?x-oss-process=image/resize,m_lfit,h_270,w_425)\n\n\u5982\u56fe\uff0c\u7ebf\u6bb5\u4ee3\u8868\u7684\u662f $v$ \u4e2d\u7684\u90a3\u4e2a\u6700\u957f\u4e32\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u70b9\u4ee3\u8868 $u$ \u4e2d\u7684\u4e32\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u53d1\u73b0\u4e0a\u9762\u7684\u7ed3\u8bba\u4e0d\u6210\u7acb\u53ea\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u5373 $u$ \u4e2d\u67d0\u4e2a\u8f83\u77ed\u7684\u4e32\u585e\u7684\u8fdb\u7ebf\u6bb5\u91cc\uff0c\u8f83\u957f\u7684\u4e32\u585e\u4e0d\u8fdb\u53bb\uff0c\u5c31\u662f\u5982\u4e0b\u60c5\u51b5\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/w8rpwm80.png?x-oss-process=image/resize,m_lfit,h_270,w_425)\n\n\u84dd\u7ebf\u4ee3\u8868\u90a3\u4e2a\u8f83\u957f\u7684\u4e32\uff0c\u7ea2\u7ebf\u4ee3\u8868\u8f83\u77ed\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e00\u4e2a\u7ebf\u6bb5\u524d\u9762\u90fd\u6709\u4e00\u5c0f\u6bb5\u4e00\u6837\u7684\u84dd\u7684\uff0c\u628a\u90a3\u4e00\u5c0f\u6bb5\u84dd\u7684\u52a0\u8fdb\u7ebf\u6bb5\u91cc\u4e5f\u4f1a\u5f62\u6210\u4e00\u4e2a\u548c $v$ \u7684 endpos \u76f8\u540c\u7684\u4e32\uff0c\u800c\u4e14\u8fd9\u4e2a\u4e32\u6bd4 $v$ \u4e2d\u6700\u957f\u4e32\uff0c\u4e5f\u5c31\u662f\u56fe\u4e2d\u7684\u90a3\u4e2a\u7ebf\u6bb5\u8981\u957f\uff0c\u56e0\u4e3a endpos \u4e00\u6837\uff0c\u8fd9\u4e2a\u65b0\u4e32\u4e5f\u5e94\u8be5\u5728 $v$ \u4e2d\uff0c\u53c8\u56e0\u4e3a\u5b83\u66f4\u957f\uff0c\u8fd9\u4e0e\u56fe\u4e2d\u7ebf\u6bb5\u662f $v$ \u4e2d\u6700\u957f\u7684\u4e32\u77db\u76fe\uff0c\u6240\u4ee5\u7ed3\u8bba\u6210\u7acb\u3002\n\n \u6211\u4eec\u9009\u7684\u90a3\u6761\u94fe\uff0c\u6df1\u5ea6\u6700\u5927\u7684\u90a3\u4e2a\u8282\u70b9\u80af\u5b9a\u8d2a\u5fc3\u7684\u9009\u6700\u957f\u7684\uff0c\u800c\u6df1\u5ea6\u7b2c\u4e8c\u5927\u7684\u56e0\u4e3a\u6df1\u5ea6\u6700\u5927\u7684\u9009\u4e86\u6700\u957f\uff0c\u6839\u636e\u5f15\u7406\uff0c\u5b83\u9009\u4ec0\u4e48\u957f\u5ea6\u8981\u4e48\u90fd\u53ef\u4ee5\u8981\u4e48\u90fd\u4e0d\u884c\uff0c\u6240\u4ee5\u5b83\u4e5f\u5e94\u8be5\u8d2a\u5fc3\u5730\u9009\u6700\u957f\u7684......\u6240\u4ee5\u5bf9\u4e8e\u6240\u6709\u9009\u7684\u8282\u70b9\uff0c\u6211\u4eec\u90fd\u5e94\u8be5\u9009\u6700\u957f\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u76f4\u63a5 DP \u4e86\uff0c$f_u$ \u8868\u793a\u4ece\u6839\u4e00\u76f4\u4e0b\u6765\u9009\u5230 $u$\uff0c\u4e14 $u$ \u9009\u4e86\u7684\u6700\u5927\u7b54\u6848\uff0c\u8f6c\u79fb\u5f88\u663e\u7136\u662f $f(u)=\\max\\{f(fa_u),f(v)+1\\}$ \uff0c\u5176\u4e2d $v$ \u662f $u$ \u7684\u7956\u5148\u4e14\u5728 $u$ \u4e2d\u81f3\u5c11\u51fa\u73b0\u4e24\u6b21\uff0c\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u4f18\u5316\uff1a$f$ \u663e\u7136\u662f\u5173\u4e8e\u6df1\u5ea6\u5355\u8c03\u4e0d\u51cf\u7684\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u6709 $f(v)$ \u80fd\u8d85\u8fc7 $f(fa_u)$\uff0c\u5176\u5b9e\u6211\u4eec\u53ea\u7528\u7ba1 $f(v)=f(fa_u)$ \u7684 $v$ \u5c31\u597d\u4e86\uff0c\u4e14\u8fd9\u6837\u7684 $v$ \u80af\u5b9a\u662f\u5e0c\u671b\u5b83\u8d8a\u6d45\u8d8a\u597d\uff0c\u4e71\u641e\u4e00\u4e0b\u7ef4\u62a4\u51fa\u8fd9\u6837\u7684 $v$\u3002\n\n\u81f3\u4e8e\u5224\u65ad\u662f\u5426\u51fa\u73b0\u4e86 2 \u904d\uff0c\u5957\u8def\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4 endpos \u5373\u53ef\u3002 \n\n```cpp\n#include<iostream>\n#include<stdio.h>\n#include<ctype.h>\n#include<string.h>\n#define N 400005\nusing namespace std;\ninline int read(){\n\tint x=0,f=0; char ch=getchar();\n\twhile(!isdigit(ch)) f|=(ch==45),ch=getchar();\n\twhile(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn f?-x:x;\n}\nstruct edge{\n\tint b,n;\n}e[2*N];\nint n,h[2*N],tot;\nchar s[N];\ninline void charu(int a,int b){\n\te[++tot].b=b,e[tot].n=h[a],h[a]=tot;\n}\nstruct SuffixAutoMaton{\n\tint tail,pool,pos[2*N],nxt[2*N][26],fail[2*N],len[2*N];\n\tinline void init(){tail=pool=1,fail[1]=0;}\n\tinline void insert(int c){\n\t\tlen[++pool]=len[tail]+1,pos[pool]=len[pool];\n\t\tint p=tail;tail=pool;\n\t\tfor(;p && !nxt[p][c];p=fail[p]) nxt[p][c]=tail;\n\t\tif(!p) return (void)(fail[tail]=1);\n\t\tint q=nxt[p][c];\n\t\tif(len[p]+1==len[q]) return (void)(fail[tail]=q);\n\t\tlen[++pool]=len[p]+1,fail[pool]=fail[q],pos[pool]=pos[q];\n\t\tmemcpy(nxt[pool],nxt[q],sizeof(nxt[q]));\n\t\tfail[q]=fail[tail]=pool;\n\t\tfor(;nxt[p][c]==q;p=fail[p]) nxt[p][c]=pool;\n\t}\n}sam;\nstruct segmentTree{\n\tint ls,rs,sum;\n}d[50*N];\nint nd,rt[N*2];\nvoid update(int &k,int l,int r,int x){\n\tk=++nd;\n\tif(l==r) return (void)(d[k].sum=1);\n\tint mid=l+r>>1;\n\tif(x<=mid) update(d[k].ls,l,mid,x);\n\telse update(d[k].rs,mid+1,r,x);\n\td[k].sum=d[d[k].ls].sum+d[d[k].rs].sum;\n}\nint merge(int x,int y){\n\tif(!x || !y) return x|y;\n\tint k=++nd;\n\td[k].sum=d[x].sum+d[y].sum;\n\td[k].ls=merge(d[x].ls,d[y].ls);\n\td[k].rs=merge(d[x].rs,d[y].rs);\n\treturn k;\n}\nint query(int k,int l,int r,int x,int y){\n\tif(x<=l && r<=y) return d[k].sum;\n\tint mid=l+r>>1,res=0;\n\tif(x<=mid) res=query(d[k].ls,l,mid,x,y);\n\tif(mid+1<=y) res+=query(d[k].rs,mid+1,r,x,y);\n\treturn res;\n}\nvoid dfs(int u){\n\tif(sam.pos[u]) update(rt[u],1,n,sam.pos[u]);\n\tfor(int i=h[u];i;i=e[i].n){\n\t\tint v=e[i].b;\n\t\tdfs(v);\n\t\trt[u]=merge(rt[u],rt[v]);\n\t}\n}\nint f[2*N],ans,lnk[2*N];\nvoid solve(int u,int fa){\n\tif(u!=1){\n\t\tint p=lnk[fa];f[u]=f[p];\n\t\tif(p==1) f[u]++;\n\t\telse if(query(rt[p],1,n,sam.pos[u]-sam.len[u]+sam.len[p],sam.pos[u]-1)) f[u]++;\n\t}\n\tlnk[u]=(f[u]==f[fa]?lnk[fa]:u);\n\tlnk[1]=1;\n\tfor(int i=h[u];i;i=e[i].n){\n\t\tint v=e[i].b;\n\t\tsolve(v,u);\n\t}\n\tans=max(ans,f[u]);\n}\nint main(){\n\tn=read();\n\tscanf(\"%s\",s+1);\n\tsam.init();\n\tfor(int i=1;i<=n;++i) sam.insert(s[i]-'a');\n\tfor(int i=1;i<=sam.pool;++i) charu(sam.fail[i],i);\n\tdfs(1);\n\tsolve(1,0);\n\tcout<<ans;\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1647435439,
        "uid": 238861,
        "name": "xzzduang",
        "ccfLevel": 0,
        "title": "CF700E Cool Slogans"
    },
    {
        "content": "> \u7ed9\u51fa\u4e32 $S$ \uff0c\u8bf7\u95ee\u6ee1\u8db3 $A_{n-1}$ \u5728 $A_n$ \u4e2d\u51fa\u73b0\u81f3\u5c11\u4e24\u6b21\u4e14\u90fd\u662f $S$ \u5b50\u4e32\u7684\u5b57\u7b26\u4e32\u5e8f\u5217 $A$ \u7684\u6700\u957f\u957f\u5ea6\u662f\u591a\u5c11\uff1f\n>\n> $1\\le n\\le 2\\times 10^5$\n\n\u8fd9\u9053\u9898\u662f TLE_Automat \u5927\u4f6c\u7ed9\u6211\u7684\u9898\u3002~~\uff08\u5728\u7ebf\u819c TAM %%\uff09~~ \u7136\u540e\u770b\u4e86\u773c\uff0c\u597d\u554a\uff0c\u4e0d\u4f1a\u554a\uff0c\u8fd9\u770b\u8d77\u6765\u5b8c\u5168\u4e0d\u53ef\u505a\u554a\u3002\n\n\u4f46\u662f\u7a0d\u5fae\u60f3\u4e00\u60f3\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u4ece\u57fa\u672c\u8d2a\u5fc3\u53d6\u5f97\u4e00\u4e2a\u7ed3\u8bba\uff1a$A_{n-1}$ \u5fc5\u5b9a\u662f $A_n$ \u7684\u540e\u7f00\uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u662f\u7684\u8bdd\u4f60\u53ef\u4ee5\u5c06 $A_n$ \u7684\u4e00\u4e2a\u540e\u7f00\u5220\u53bb\u3002\n\n\u63a5\u7740\u4ece\u540e\u7f00\u94fe\u7684\u6027\u8d28\u53ef\u4ee5\u770b\u51fa\u6765\uff0c$A_{n-1}$ \u548c $A_n$ \u5fc5\u5b9a\u5728\u540c\u4e00\u540e\u7f00\u94fe\u4e0a\u7684\u4e24\u4e2a\u7b49\u4ef7\u7c7b\u4e2d\u51fa\u73b0\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740 $A$ \u5e8f\u5217\u4e0a\u7684\u5b57\u7b26\u4e32\u5fc5\u5b9a\u90fd\u5728\u540c\u4e00\u540e\u7f00\u94fe\u7684\u7b49\u4ef7\u7c7b\u4e2d\u51fa\u73b0\u3002\n\n\u5728\u8fd9\u4e2a\u65b9\u5411\u5f00\u59cb\u6784\u60f3\u4e4b\u540e\uff0c\u5c31\u6709\u51e0\u4e2a\u7ed3\u8bba\u4fbf\u9700\u8981\u6211\u4eec\u8bc1\u660e\u3002\n\n\u200b\t\t$\\text{Conclusion 1}$  \u4e0d\u53ef\u80fd\u5b58\u5728 $A_n$ \u548c $A_n-1$ \u5728\u540c\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u51fa\u73b0\u7684\u60c5\u51b5\u3002\n\n\u200b\t\u8bc1\u660e\uff1a\u5982\u679c\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\u7684\u8bdd\uff0c\u90a3\u4e48\u7531 $A_n$ \u548c $A_{n-1}$ \u5728\u540c\u4e00\u7b49\u4ef7\u7c7b\u7684\u6761\u4ef6\u53ef\u4ee5\u5f97\u51fa $A_n$ \u6709\u4e00\u4e2a $\\text{endpos}$ \u6070\u597d\u5728\u81ea\u5df1\u5185\u3002\u6240\u4ee5\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u4f1a\u4e00\u76f4\u5411\u5de6\u53f3\u5ef6\u4f38\uff0c\u76f4\u5230\u4e32\u7684\u5c3d\u5934\uff0c\u800c\u8fd9\u65f6\uff0c$A_n$ \u548c $A_{n-1}$ \u4e5f\u4e0d\u53ef\u80fd $\\text{endpos}$ \u76f8\u540c\uff0c\u56e0\u6b64\u7ed3\u8bba\u6210\u7acb\u3002\n\n\u8fd9\u4e2a\u7ed3\u8bba\u5176\u5b9e\u4e5f\u8bf4\u660e\uff0c\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u5185\u7684\u4efb\u610f\u4e24\u4e2a\u5b57\u7b26\u4e32\u6700\u591a\u4ee5\u67d0\u4e00\u65b9\u5411\u5305\u542b $1$ \u6b21\u3002\n\n\u200b\t\t$\\text{Conclusion 2}$  \u5728\u540e\u7f00\u94fe\u4e0a\u8df3\u8dc3\u65f6\uff0c\u53ea\u8981\u9009\u5b9a\u4e86\u4e00\u4e2a\u8d77\u70b9\uff0c\u603b\u662f\u5411\u4e0a\u8df3\u6700\u77ee\u7684\u9ad8\u5ea6\u603b\u662f\u6700\u4f18\u7684\u3002\n\n\u200b\t\u8bc1\u660e\uff1a\u663e\u7136\uff0c\u4e0d\u8bc1\u4e86\u3002\n\n\u901a\u8fc7\u8fd9\u4e24\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u8981\u505a\u7684\u5176\u5b9e\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7b49\u4ef7\u7c7b\uff0c\u627e\u5230\u4e00\u4e2a\u79bb\u5b83\u6700\u8fd1\u7684 parent \u6811\u4e0a\u7956\u5148\u6ee1\u8db3\u5b83\u7684\u8fd9\u4e2a\u7956\u5148\u53ef\u4ee5\u5728\u5b83\u51fa\u73b0\u4e24\u6b21\u3002\u73b0\u5728\u7684\u95ee\u9898\u4e5f\u8bb8\u4f60\u5df2\u7ecf\u53d1\u73b0\u4e86\uff0c\u6211\u4eec\u521a\u521a\u7684\u63cf\u8ff0\u5bf9\u4e8e\u5b57\u7b26\u4e32\u548c\u7b49\u4ef7\u7c7b\u5341\u5206\u6df7\u6dc6\uff0c\u8fd9\u5176\u5b9e\u662f\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u786e\u5b9a\u7b49\u4ef7\u7c7b\u548c\u5b57\u7b26\u4e32\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\u7684\u5173\u7cfb\u3002\u6362\u8a00\u4e4b\uff1a\u7ed9\u4f60\u4e24\u4e2a\u7b49\u4ef7\u7c7b\uff0c\u4f60\u600e\u4e48\u5728\u6bcf\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u5185\u9009\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u7136\u540e\u5224\u5b9a\u5b83\u4eec\u4e24\u4e2a\u662f\u5426\u4ee5\u67d0\u79cd\u65b9\u5411\u51fa\u73b0\u4e24\u6b21\u5462\uff1f\n\n\u200b\t\t$\\text{Conclusion 3}$  \u4e3a\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u4f5c\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u662f\u6070\u597d\u662f\u8fd9\u4e2a\u7b49\u4ef7\u7c7b\u4e2d\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u5373\uff0c\n\n\u200b\t\t\u5982\u679c $\\text{str}(u)\\mathop{\\not\\subset}\\limits^\\text{Twice}str(v)$ \uff0c\u90a3\u4e48\u4e0d\u5b58\u5728 $s\\in u$ \u4f7f\u5f97 $s\\mathop{\\subset}\\limits^\\text{Twice}str(v)$ \uff0c\u6700\u77ed\u7684\u4e5f\u4e0d\u884c\u3002\n\n\u200b\t\u8bc1\u660e\uff1a\u9996\u5148\uff0c\u7b49\u4ef7\u7c7b $v$ \u9009\u51fa\u81ea\u5df1\u6700\u957f\u7684\u5b57\u7b26\u4e32 $str(v)$ \u662f\u5f88\u660e\u667a\u7684\u3002\u6211\u4eec\u73b0\u5728\u53ea\u9700\u8981\u8bc1\u660e\u65e0\u8bba\u7b49\u4ef7\u7c7b $u$ \u9009\u51fa\u6700\u957f\u7684\u6216\u662f\u6700\u77ed\u7684\u5b57\u7b26\u4e32\u90fd\u65e0\u5173\u7ed3\u679c\u5373\u53ef\u3002\n\n\u200b\t\u82e5\u5b58\u5728\u8fd9\u4e48\u4e24\u4e2a\u7b49\u4ef7\u7c7b $u$ \u548c $v$ \uff0c$\\text{str}(u)=A+B$ \uff0c$B$ \u5728 $\\operatorname{str}(v)$ \u4e2d\u51fa\u73b0\u4e24\u6b21\uff0c\u800c $A+B$ \u5219\u53ea\u6709\u4e00\u6b21\u3002\n\n\u200b\t\u6211\u4eec\u8003\u8651\u4e24\u79cd\u60c5\u51b5\uff1a\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f $\\text{str}(v)$ \u7684\u6240\u6709\u51fa\u73b0\u53ea\u6709\u4e00\u6b21\u524d\u9762\u6070\u597d\u6709 $A$  \u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c$A+B$ \u7684 $\\text{endpos}$ \u663e\u7136\u8ddf $B$ \u7684$\\text{endpos}$ \u4e0d\u540c\uff0c\u7b49\u4ef7\u7c7b $u$ \u4e0d\u5b58\u5728\uff1b\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f $\\text{str}(v)$ \u7684\u6240\u6709\u51fa\u73b0\u524d\u9762\u90fd\u6070\u597d\u6709 $A$  \uff0c\u6b64\u65f6 $A+str(v)$ \u7684 $\\text{endpos}$ \u6070\u597d\u4e0e $v$ \u7684 $\\text{endpos}$ \u4e00\u81f4\uff0c\u7b49\u4ef7\u7c7b $v$ \u4e0d\u5b58\u5728\uff0c\u7ed3\u8bba\u4e00\u5b9a\u6210\u7acb\u3002\n\n\u81f3\u4e8e\u521a\u521a\u7684\u8fd9\u4e2a\u7ed3\u8bba\u4ee5\u53ca\u5176\u8bc1\u660e\u662f\u600e\u4e48\u60f3\u51fa\u6765\u7684\uff0c\u5b9e\u9645\u4e0a\u6211\u662f\u778e jr \u627e\u4f8b\u5b50\u8bd5\u51fa\u8fd9\u4e2a\u7ed3\u8bba\u4e4b\u540e\u518d\u60f3\u529e\u6cd5\u6784\u9020\u8bc1\u660e\u7684\uff0c\u8fd9\u4e2a\u7ed3\u8bba\u975e\u5e38\u4e0d\u663e\u7136\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u7528\u6bcf\u4e2a\u7b49\u4ef7\u7c7b\u7684 $\\text{str}$ \u6765\u4ee3\u66ff\u8fd9\u4e2a\u7b49\u4ef7\u7c7b\u662f\u6b63\u786e\u7684\uff0c\u8fd9\u4e5f\u6697\u793a $A_{-1}$ \u4e00\u5b9a\u662f\u67d0\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u7684 $\\text{str}$ \u3002\n\n\u73b0\u5728\uff0c\u6211\u4eec\u5047\u8bbe\u7ed9\u5b9a\u4e24\u4e2a\u8282\u70b9\u7684 $\\text{str}$ \u6211\u4eec\u5224\u5b9a\u5176\u4e2d\u4e00\u4e2a\u662f\u5426\u5728\u53e6\u4e00\u4e2a\u51fa\u73b0\u4e24\u6b21\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $f(n)$ \u3002\u6211\u4eec\u73b0\u5728\u53ea\u5173\u5fc3\u6211\u4eec\u6700\u5c11\u8981\u5224\u5b9a\u591a\u5c11\u6b21\u624d\u80fd\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u90fd\u627e\u5230\u5b83\u7684\u6700\u8fd1\u53ef\u4ee5\u8df3\u7684\u7956\u5148\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/0ai8uq79.png?x-oss-process=image/resize,m_lfit,h_1000,w_400)\n\n\u6211\u4eec\u8003\u8651\u8fd9\u4e48\u4e00\u68f5 parent \u6811\u3002\u8bf7\u95ee\uff0c\u8282\u70b9 $4$ \u7684\u8df3\u8dc3\u8fb9\u6709\u6ca1\u6709\u53ef\u80fd\u6307\u5411 $3$ \u5462\uff1f\u90a3\u6709\u6ca1\u6709\u53ef\u80fd\u6307\u5411 $1$ \u5462\uff1f\n\n\u7b54\u6848\u662f\uff0c\u4e0d\u53ef\u80fd\u6307\u5411 $3$ \uff0c\u4f46\u662f\u53ef\u80fd\u6307\u5411 $1$ \u3002\u5177\u4f53\u4e3a\u4ec0\u4e48\u8bf7\u60a8\u72ec\u7acb\u601d\u8003\uff0c\u8fd9\u4e2a\u95ee\u9898\u975e\u5e38\u7b80\u5355\uff0c\u5199\u51fa\u8bc1\u660e\u662f\u5728\u8fd9\u91cc\u6d6a\u8d39\u7a7a\u95f4\u3002\n\n\u6216\u8005\uff0c\u6211\u4eec\u5f62\u5f0f\u5316\u5730\u8868\u8fbe\u8fd9\u4e2a\u89c4\u5f8b\uff1a\u6211\u4eec\u8bbe $\\text{jump}(x)$ \u8868\u793a\u8282\u70b9 $x$ \u7684\u8df3\u8dc3\u8fb9\u7684\u6700\u7ec8\u8282\u70b9\u3002\u90a3\u4e48\n$$\n\\text{dep}(\\text{jump}(x))=\\min_{e\\in son_x}\\{\\text{dep}(\\text{jump}(e))\\}\n$$\n\u6240\u4ee5\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u6709\u4ec0\u4e48\u7528\u5417\uff1f\u4f60\u4f1a\u53d1\u73b0\uff0c\u5982\u679c parent \u6811\u6070\u597d\u662f\u6761\u94fe\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u7684\u610f\u4e49\u5c31\u662f\u5c3a\u53d6\u7b97\u6cd5\uff0c\u800c\u5c3a\u53d6\u7b97\u6cd5\u7684\u5224\u5b9a\u6570\u662f $O(n)$ \u7ea7\u522b\u7684\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u628a\u5c3a\u53d6\u653e\u5230\u6811\u4e0a\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4ec0\u4e48\u5462\uff1f\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u52bf\u80fd\u6cd5\u6765\u8bc1\u660e\uff0c\u4f46\u662f\u6270\u52a8\u6cd5\u5374\u66f4\u7b80\u5355\u4e00\u70b9\u3002\n\n\u7531\u4e8e\u6811\u662f\u4e00\u6761\u94fe\u65f6\u5224\u5b9a\u6570\u662f $O(n)$ \u7684\uff0c\u5e76\u4e14\u5728\u4f60\u52a0\u5165\u4e86\u4e00\u6761\u65b0\u94fe\u4e4b\u540e\uff0c\u9664\u4e86\u65b0\u94fe\u4ee5\u5916\u7684\u5176\u4ed6\u90e8\u5206\u7684\u5224\u5b9a\u6570\u53ea\u51cf\u4e0d\u589e\uff0c\u800c\u65b0\u94fe\u8fd9\u4e2a\u90e8\u5206\u7684\u5224\u5b9a\u6570\u4ecd\u662f $O(size)$ \u7684\uff0c\u4e8e\u662f\u6dfb\u52a0\u4e00\u6761\u94fe\u540e\u5224\u5b9a\u6570\u4ecd\u4e3a $O(n)$ \uff0c\u5176\u4e2d $n$ \u4e3a\u73b0\u5728\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002\n\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u5982\u4f55\u8fdb\u884c\u5224\u5b9a\u3002\u50cf 3.6 \u7684\u5957\u8def\u4e00\u6837\uff0c\u7ef4\u62a4 $\\text{endpos}$ \u96c6\uff0c\u5224\u5b9a\u662f\u5426 $u$ \u4e24\u6b21\u5305\u542b $v$ \u65f6\u53ea\u9700\u8981\u5728 $u$ \u7684 $\\text{endpos}$ \u4e2d\u968f\u4fbf\u627e\u51fa\u6765\u4e00\u4e2a\u503c $x$ \uff0c\u7136\u540e\u770b\u662f\u5426\u5728 $[x-\\text{len}(u)+1,x]$ \u5185\u5b58\u5728\u4e24\u4e2a $\\text{endpos}(v)$ \u7684\u5143\u7d20\u5373\u53ef\uff0c\u4e0a\u8ff0\u64cd\u4f5c\u5747\u53ef\u5728 $O(\\log |S|)$ \u5185\u5b8c\u6210\uff0c\u800c parent \u6811\u7684\u8282\u70b9\u6570\u53c8\u662f $O(|S|)$ \u7684\uff0c\u4e8e\u662f\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(|S| \\log |S|)$ \uff0c\u662f\u53ef\u63a5\u53d7\u7684\u8303\u56f4\u3002\n\n\u627e\u5230 $\\text{jump}$ \u94fe\u63a5\u4e4b\u540e\u7684 dp \u975e\u5e38\u7b80\u5355\uff0c\u6211\u89c9\u5f97\u5927\u5bb6\u90fd\u4f1a\uff0c\u6240\u4ee5\u4e0d\u518d\u6d6a\u8d39\u7a7a\u95f4\u4e86\u3002\n\n~~\u6700\u540e\u5410\u69fd\uff1a\u4e3a\u4ec0\u4e48\u8981\u7528\u7384\u5b66 DP \u5462\uff0c\u52bf\u80fd\u5206\u6790\u6570\u636e\u7ed3\u6784\u591a\u9999\u554a~~\n",
        "postTime": 1645527020,
        "uid": 82284,
        "name": "Echidna",
        "ccfLevel": 7,
        "title": "Solution CF700E"
    },
    {
        "content": "\u9898\u610f\u9898\u9762\u5df2\u7ecf\u5199\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u4e0b\u9762\u76f4\u63a5\u4e0a\u89e3\u9898\u8fc7\u7a0b\u3002\n\n## Step $1$ :\n\n\u770b\u5230\u9898\u76ee\u5f88\u96be\u4e0b\u624b\uff0c\u4e0d\u59a8\u53cd\u8fc7\u6765\u60f3\uff0c**\u5047\u5b9a**\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u4e00\u4e2a\u6700\u957f\u7684\u7b54\u6848\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://s4.ax1x.com/2022/02/18/HockEn.md.png)\n\n\uff08\u56e0\u4e3a $s_2$ \u5728 $s_1$ \u4e2d\u51fa\u73b0\u81f3\u5c11 $2$ \u6b21\uff0c$s_3$ \u5728 $s_2$ \u4e2d\u51fa\u73b0\u81f3\u5c11\u4e24\u6b21\uff0c\u6240\u4ee5 $s_2 , s_3$ \u753b\u4e86\u4e24\u904d\uff09 \n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u628a $s_3$ \u6700\u53f3\u8fb9\u7684 $s_1 , s_2$ \u5168\u780d\u53bb\u4e5f\u662f\u5408\u6cd5\u7b54\u6848\uff0c\u5e76\u4e14\u4e0d\u4f1a\u6bd4\u4e4b\u524d\u7684\u7b54\u6848\u66f4\u52a3\uff0c\u5982\u4e0b\u56fe\uff1a\n\n\u200b                     ![](https://s4.ax1x.com/2022/02/18/HocLMF.md.png) \n\n\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u6784\u9020\u7684\u65b9\u5f0f\u8bc1\u660e\u4e86\uff1a\n\n- \u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6700\u4f18\u89e3\uff0c\u4f7f\u5f97 $s_{i+1}$ \u662f $s_i$ \u7684\u540e\u7f00\u3002 \n\n\u8fd9\u8ba9\u6211\u4eec\u8054\u60f3\u5230\u4e86\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u5efa\u51fa\u7684 $\\text{parent}$ \u6811\uff0c\u56e0\u4e3a\u5728\u8fd9\u9897\u6811\u4e0a\uff0c\u7236\u8282\u70b9\u7684 $\\text{endpos}$ \u96c6\u5408\u6240\u4ee3\u8868\u7684\u6240\u6709\u4e32\uff0c\u4e00\u5b9a\u662f\u5b50\u8282\u70b9 $\\text{endpos}$ \u96c6\u5408\u6240\u4ee3\u8868\u7684\u6240\u6709\u4e32\u7684\u540e\u7f00\u3002\n\n## Step $2$ :\n\n\u5728\u4e0a\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u60f3\u5230\u4e86 $\\text{parent}$ \u6811\uff0c\u90a3\u600e\u4e48\u624d\u80fd\u5728\u8fd9\u68f5\u6811\u4e0a\u6784\u9020\u51fa\u4e00\u4e2a\u6700\u957f\u4e14\u6ee1\u8db3\u9898\u610f\u7684\u5e8f\u5217\u5462\uff1f\n\n\u6211\u4eec\u4e0d\u59a8\u5148\u8003\u8651 $s_i$ \u4e0e $s_{i+1}$ \u4e4b\u95f4\u7684\u5173\u7cfb\u3002\uff08\u4e3a\u4e86\u7b80\u6d01\uff0c\u4e0b\u6587\u6240\u8bf4\u7684**\u6811**\u82e5\u4e0d\u4f5c\u7279\u6b8a\u8bf4\u660e\uff0c\u5747\u6307 $\\text{parent}$ \u6811\uff09\n\n1. $s_i$ \u4e0e $s_{i+1}$ \u53ef\u80fd\u6765\u81ea\u6811\u4e0a\u540c\u4e00\u7ed3\u70b9 $u$ \u6240\u4ee3\u8868\u7684\u7b49\u4ef7\u7c7b\u4e2d\u7684\u4e24\u4e2a\u4e0d\u540c\u540e\u7f00\u3002\u4f46\u8fd9\u79cd\u60c5\u51b5\u662f**\u4e0d\u6210\u7acb**\u7684\uff01\n\n   \u8003\u8651\u53cd\u8bc1\uff0c\u5982\u679c\u6210\u7acb\uff0c\u5373 $s_{i+1}$ \u5728 $s_i$ \u4e2d\u4e0d\u4ec5\u4f5c\u4e3a\u540e\u7f00\u51fa\u73b0\uff0c\u8fd8\u4f5c\u4e3a\u975e\u540e\u7f00\u7684\u5b50\u4e32\u51fa\u73b0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b50\u4e32\u7684\u53f3\u7aef\u70b9\u4f1a\u5f62\u6210\u4e00\u4e2a\u65b0\u7684$\\text{endpos}$ \u96c6\u5408\uff08\u5982\u679c\u4e0d\u5f62\u6210\u65b0\u7684\uff0c\u53ef\u4ee5\u65e0\u9650\u5957\u5a03\u76f4\u5230\u5f62\u6210\u65b0\u7684\uff09\uff0c\u8fd9\u5c31\u4e0e $s_i$ \u4e0e $s_{i+1}$ \u5c5e\u4e8e\u540c\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u77db\u76fe\u3002\n\n2. $s_{i+1}$ \u4e3a\u7ed3\u70b9 $x$ \u6240\u4ee3\u8868\u7684\u7b49\u4ef7\u7c7b\u4e2d\u7684\u540e\u7f00\uff0c$s_i$ \u4e3a $y$ \u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u7b49\u4ef7\u7c7b\u4e2d\u7684\u540e\u7f00\uff0c\u4e14 $x$ \u662f $y$ \u7684\u7956\u5148\u3002\u8fd9\u79cd\u60c5\u51b5\u663e\u7136\u662f**\u6210\u7acb**\u7684\uff01 \n\n   \u4f46\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c$x$ \u6240\u4ee3\u8868\u7684\u7b49\u4ef7\u7c7b\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u540e\u7f00\u8ddf $s_i$ \u7684\u5339\u914d\u90fd\u662f\u7b49\u4ef7\u7684\uff0c\u4e0d\u4f1a\u5b58\u5728 $x$ \u4e2d\u4e00\u4e2a\u540e\u7f00\u662f $s_i$ \u7684\u975e\u540e\u7f00\u5b50\u4e32\u800c\u53e6\u4e00\u4e2a\u540e\u7f00\u4e0d\u662f\u7684\u60c5\u51b5\uff0c\u8bc1\u660e\u540c\u4e0a\u3002\n\n   \u8fd8\u6709\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a $x$ \u7684 $\\text{endpos}$ \u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u7684\u540e\u7f00\uff0c\u4ed6\u4e0e $s_i$ \u7684\u5339\u914d\u4e5f\u662f\u7b49\u4ef7\u7684\u3002\n\n\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u53ea\u8981\u7ebf\u6bb5\u6811\u5408\u5e76\u51fa\u6811\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u7684 $\\text{endpos}$ \u96c6\u5408\uff0c\u7136\u540e\u5982\u4f55 $\\text{dp}$ \u5176\u5c31\u5f88 $\\text{trivial}$ \u4e86\u3002\n\n ```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define SZ(x) ((int)((x).size()))\n#define mkp make_pair\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef pair<int,int> pii;\n\nconst int MAXN=2e5+10;\nconst int MAXT=4e5+10;\n\nnamespace SAM\n{\t\n\tint len[MAXT],fa[MAXT];\n\tint nxt[MAXT][26],ep[MAXT];\n\tint sz,lst;\n\n\tinline void add(char ch,int pos)\n\t{\n\t\tint c=ch-'a';\n\t\t\n\t\tint cur=sz++;\n\t\tlen[cur]=len[lst]+1;\n        ep[cur]=pos;\n\n\t\tint p=lst;\n\t\tfor(;p!=-1 && !nxt[p][c];p=fa[p]) \n\t\t\tnxt[p][c]=cur;\n\t\t\n\t\tif(p==-1) fa[cur]=0;\n\t\telse\n\t\t{\n\t\t\tint q=nxt[p][c];\n\t\t\tif(len[p]+1==len[q]) fa[cur]=q;\n\t\t\telse\n\t\t\t{\n\t\t\t\tint clone=sz++;\n\t\t\t\tfa[clone]=fa[q];\n                ep[clone]=ep[q];\n                memcpy(nxt[clone],nxt[q],sizeof(nxt[q]));\n\t\t\t\tlen[clone]=len[p]+1;\n                \n\t\t\t\tfor(;p!=-1 && nxt[p][c]==q;p=fa[p])\n\t\t\t\t\tnxt[p][c]=clone;\n\t\t\t\tfa[q]=fa[cur]=clone;\n\t\t\t}\n\t\t}\n\t\tlst=cur;\n\t}\n\t\n\tinline void build(char *s,int n)\n\t{\n\t\tfa[0]=-1; sz=1;\n\t\tlen[0]=lst=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tadd(s[i],i);\n\t}\n}\nusing SAM::fa;\nusing SAM::len;\nusing SAM::ep;\n\nstruct Segment_tree\n{\n    int cnt_id=0;\n    int ls[MAXT*43],rs[MAXT*43];\n    bool sum[MAXT*43];\n\n    inline void push_up(int root){ sum[root]=sum[ls[root]]|sum[rs[root]]; }\n    inline void update(int &root,int l,int r,int idx)\n    {\n        if(!root) root=++cnt_id;\n        if(l==r) return sum[root]=true,(void)0;\n\n        int mid=(l+r)>>1;\n        if(idx<=mid) update(ls[root],l,mid,idx);\n        else update(rs[root],mid+1,r,idx); \n        push_up(root);\n    }\n    inline bool query(int root,int l,int r,int sp,int ep)\n    {\n        if(!root) return false;\n        if(sp<=l && r<=ep) return sum[root];\n        int mid=(l+r)>>1;\n        bool res=false;\n        if(sp<=mid) res|=query(ls[root],l,mid,sp,ep);\n        if(ep>mid) res|=query(rs[root],mid+1,r,sp,ep);\n        return res;\n    }\n    inline int merge(int x,int y,int l,int r)\n    {\n        if(!x || !y) return x^y;\n        int cur=++cnt_id;\n        if(l==r) return sum[cur]=sum[x]|sum[y],cur;\n\n        int mid=(l+r)>>1;\n        ls[cur]=merge(ls[x],ls[y],l,mid);\n        rs[cur]=merge(rs[x],rs[y],mid+1,r);\n        return push_up(cur),cur;\n    }\n\n} T;\n\nint n;\nchar s[MAXN];\n\nint rt[MAXT];\nvector<int> G[MAXT];\ninline void dfs_edpos(int u)\n{\n    if(ep[u]) T.update(rt[u],1,n,ep[u]);\n    for(int v : G[u])\n    {\n        dfs_edpos(v);\n        rt[u]=T.merge(rt[u],rt[v],1,n);   \n    }\n}\n\nint ans;\nint dp[MAXT],tp[MAXT];\ninline void dfs_dp(int u)\n{\n    for(int v : G[u])\n    {\n        if(!u) dp[v]=1,tp[v]=v;\n        else\n        {\n            dp[v]=dp[u]; tp[v]=tp[u];\n            if(T.query(rt[tp[u]],1,n,ep[v]-len[v]+len[tp[u]],ep[v]-1))\n                dp[v]++,tp[v]=v;\n        }\n        ans=max(ans,dp[v]);\n        dfs_dp(v);\n    }\n}\n\nint main()\n{\n\tscanf(\"%d%s\",&n,s+1);\n    SAM::build(s,n);\n\n    for(int i=1;i<SAM::sz;i++)\n        G[fa[i]].push_back(i);\n    dfs_edpos(0);\n    dfs_dp(0);\n    printf(\"%d\\n\",ans);\n\n\treturn 0;\n}\n\n ```\n\n\n\n\n\n\n\n",
        "postTime": 1645157556,
        "uid": 116060,
        "name": "TLE_Automat",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011CF700E"
    },
    {
        "content": "# \u9898\u76ee\n&emsp;&emsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/CF700E)\u770b\u9898\u76ee\u3002   \n# \u5206\u6790\n&emsp;&emsp;\u7531\u4e8e\u8fd9\u4e2a\u95ee\u9898\u4e0e\u5b50\u4e32\u76f8\u5173\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5148\u628a\u540e\u7f00\u81ea\u52a8\u673a\u7ed9\u5efa\u51fa\u6765\u3002  \n&emsp;&emsp;\u9898\u76ee\u6761\u4ef6\u975e\u5e38\u7279\u6b8a\u2014\u2014\u201c\u51fa\u73b0\u81f3\u5c11\u4e24\u6b21\u201d\u3002\u800c fail \u6811\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u7956\u5148\u72b6\u6001\uff0c\u6839\u636e\u5b9a\u4e49\uff0c\u81f3\u5c11\u4f1a\u5728\u5f53\u524d\u72b6\u6001\u4e2d\u51fa\u73b0\u4e00\u6b21\u3002\u6211\u4eec\u4fbf\u53ef\u4ee5\u77e5\u9053\uff0c**\u7b54\u6848\u6240\u5bf9\u5e94\u7684\u72b6\u6001\u5728 fail \u6811\u4e0a\u4e00\u5b9a\u5448\u7956\u5b59\u5173\u7cfb**\u3002  \n&emsp;&emsp;\u6211\u4eec\u53ef\u4ee5\u7528\u500d\u589e\u6cd5\uff0c\u6c42\u51fa\u72b6\u6001$S$\u7684\u7956\u5148\u4e0a**\u7b2c\u4e00\u4e2a\u5728$S$\u4e2d\u51fa\u73b0\u4e24\u6b21\u4ee5\u4e0a\u7684\u72b6\u6001**\uff1a\u5148\u500d\u589e\u627e\u5230\u6700\u540e\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u4e32\uff0c\u5b83\u7684\u7236\u4eb2\u5373\u662f\u6211\u4eec\u6240\u6c42\u3002\u6211\u4eec\u79f0\u8fd9\u4e2a\u72b6\u6001\u4e3a$pre(S)$\u3002    \n&emsp;&emsp;\u6309\u7167\u8fd9\u4e2a\u5173\u7cfb\u6211\u4eec\u5c31\u53ef\u4ee5\u8bbe\u8ba1 DP \uff1a  \n&emsp;&emsp;$f(u)$\uff1a\u4ee5$u$\u4f5c\u4e3a\u672b\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u5e8f\u5217\u7684\u6700\u5927\u957f\u5ea6\u3002   \n&emsp;&emsp;\u8f6c\u79fb\u663e\u7136\uff1a   \n$$f(u)=1+\\max_{pre(v)=u}f(v)$$\n&emsp;&emsp;\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\uff0c\u5982\u4f55\u5224\u65ad\u7956\u5148\u72b6\u6001\u6709\u6ca1\u6709\u51fa\u73b0\u591a\u6b21\u3002  \n&emsp;&emsp;\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u66b4\u529b\u7684\u65b9\u6cd5\u2014\u2014\u5148\u7528**\u7ebf\u6bb5\u6811\u5408\u5e76**\u5f97\u5230\u6bcf\u4e2a\u70b9\u4e0a\u7684$end-pos$\u96c6\u5408\uff0c\u518d\u8fdb\u884c\u68c0\u67e5\u3002  \n&emsp;&emsp;\u5bf9\u4e8e\u72b6\u6001$S$\uff0c\u5b83\u6709\u7956\u5148\u72b6\u6001$S'$\u3002\u7531\u4e8e$S$\u5728\u539f\u4e32\u51fa\u73b0\u4e00\u6b21\uff0c$S'$\u5c31\u5fc5\u7136\u4f1a\u8ddf\u7740\u51fa\u73b0\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u53ea\u9488\u5bf9\u67d0\u4e00\u4e2a\u7279\u6b8a\u7684\u51fa\u73b0\u4f4d\u7f6e\u68c0\u67e5\u2014\u2014\u6bd4\u5982\uff0c$S$\u7684\u7b2c\u4e00\u4e2a\u51fa\u73b0\u4f4d\u7f6e$fir(S)$\u3002\u63a5\u7740\uff0c$S'$\u5728$S$\u4e2d\u51fa\u73b0\u4e24\u6b21\u4ee5\u4e0a\u7b49\u4ef7\u4e8e\uff1a$\\exists p\\in end-pos(S'),p\\in[fir(S)-len(S)+len(S'),fir(S))$\uff0c\u5373\u5b58\u5728$S'$\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u6ee1\u8db3\u5b83\u4e0d\u5c5e\u4e8e$end-pos(S)$\uff0c\u4f46\u5374\u5305\u542b\u5728\u4e86\u4ece$fir(S)$\u5f00\u59cb\u7684$S$\u4e32\u91cc\u9762\u3002\u8fd9\u4e2a\u4fbf\u662f\u5728$end-pos$\u4e0a\u7684\u533a\u95f4\u67e5\u8be2\u95ee\u9898\uff0c\u53ef\u4ee5\u6839\u636e\u5df2\u6709\u7ebf\u6bb5\u6811\u4fe1\u606f\u89e3\u51b3\u3002  \n&emsp;&emsp;\u7efc\u5408\u4ee5\u4e0a\u65b9\u6cd5\uff0c\u6c42$pre$\u603b\u65f6\u95f4$O(n\\log_2^2n)$\uff0c DP \u65f6\u95f4$O(n)$\u3002\u603b\u65f6\u95f4$O(n\\log_2^2n)$\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n\nconst int MAXN = 4e5 + 5, MAXLOG = 20, MAXS = MAXN * 50;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nstruct edge\n{\n\tint to, nxt;\n}Graph[MAXN << 1];\n\nint f[MAXN][MAXLOG];\nbool s[MAXS]; int lch[MAXS], rch[MAXS];\nint dp[MAXN], seq[MAXN], ID;\nint ch[MAXN][26], fa[MAXN], mx[MAXN], head[MAXN], rot[MAXN], fir[MAXN];\nint N, lg2, rt, lst, tot, cnt, siz;\nchar S[MAXN];\n\nvoid upt( const int x ) { s[x] = s[lch[x]] | s[rch[x]]; }\nvoid copy( int a, int b ) { fa[a] = fa[b], mx[a] = mx[b], memcpy( ch[a], ch[b], sizeof ch[b] ); }\n\nvoid addEdge( const int from, const int to )\n{\n\tGraph[++ cnt].to = to, Graph[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nvoid expand( const char c )\n{\n\tint x = c - 'a', p = lst, cur = ++ tot;\n\tmx[cur] = mx[lst] + 1, lst = cur;\n\twhile( p && ! ch[p][x] ) ch[p][x] = cur, p = fa[p];\n\tif( ! p ) { fa[cur] = rt; return ; }\n\tint q = ch[p][x];\n\tif( mx[q] == mx[p] + 1 ) { fa[cur] = q; return ; }\n\tint nq = ++ tot; copy( nq, q );\n\tmx[nq] = mx[p] + 1, fa[q] = fa[cur] = nq;\n\twhile( p && ch[p][x] == q ) ch[p][x] = nq, p = fa[p];\n}\n\nvoid update( int &u, const int l, const int r, const int pos )\n{\n\tif( ! u ) u = ++ siz;\n\tif( l == r ) { s[u] = true; return ; }\n\tint mid = l + r >> 1;\n\tif( pos <= mid ) update( lch[u], l, mid, pos );\n\telse update( rch[u], mid + 1, r, pos );\t\n\tupt( u );\n}\n\nbool query( const int u, const int l, const int r, const int segL, const int segR )\n{\n\tif( ! u ) return false;\n\tif( segL <= l && r <= segR ) return s[u];\n\tint mid = l + r >> 1, ret = false;\n\tif( segL <= mid ) ret |= query( lch[u], l, mid, segL, segR );\n\tif( mid < segR ) ret |= query( rch[u], mid + 1, r, segL, segR );\n\treturn ret;\n}\n\nint merg( int u, int v )\n{\n\tif( ! u || ! v ) return u + v;\n\tint cur = ++ siz;\n\tlch[cur] = merg( lch[u], lch[v] );\n\trch[cur] = merg( rch[u], rch[v] );\n\ts[cur] = s[u] | s[v];\n\treturn cur;\n}\n\nvoid DFS( const int u )\n{\n\tseq[++ ID] = u;\n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt )\n\t{\n\t\tDFS( v = Graph[i].to );\n\t\trot[u] = merg( rot[u], rot[v] );\n\t\tfir[u] = MIN( fir[u], fir[v] );\n\t}\n}\n\nint main()\n{\n\trt = lst = ++ tot;\n\tmemset( fir, 0x3f, sizeof fir );\n\tread( N ), scanf( \"%s\", S + 1 );\n\tfor( int i = 1 ; i <= N ; i ++ ) \n\t\texpand( S[i] ), \n\t\tupdate( rot[lst], 1, N, i ), fir[lst] = i;\n\tfor( int i = 2 ; i <= tot ; i ++ ) addEdge( fa[i], i );\n\tDFS( rt );\n\tlg2 = log2( tot );\n\tfor( int i = 1 ; i <= tot ; i ++ ) f[i][0] = fa[i];\n\tfor( int j = 1 ; j <= lg2 ; j ++ )\n\t\tfor( int i = 1 ; i <= tot ; i ++ )\n\t\t\tf[i][j] = f[f[i][j - 1]][j - 1];\n\tfor( int i = tot, u, p ; i ; i -- )\n\t{\n\t\tu = p = seq[i];\n\t\tfor( int k = lg2 ; ~ k ; k -- )\n\t\t\tif( f[p][k] > rt && ! query( rot[f[p][k]], 1, N, fir[u] - mx[u] + mx[f[p][k]], fir[u] - 1 ) )\n\t\t\t\tp = f[p][k];\n\t\tp = fa[p];\n\t\tdp[p] = MAX( dp[p], dp[u] + 1 );\n\t}\n\twrite( dp[rt] ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1590849492,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[CF700E]Cool Slogans"
    },
    {
        "content": "\u597d\u9898\u3002\n\n\u611f\u89c9\u6709\u4e9b\u5730\u65b9\u5176\u4ed6\u9898\u89e3\u8bb2\u7684\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u8fd9\u91cc\u6765\u8bb2\u4e00\u4e0b\u3002\n\n\u9996\u5148\u7ed9\u51fa\u4e00\u4e2a\u6027\u8d28\uff1a\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6700\u4f18\u7684\u65b9\u6848\uff0c\u4f7f\u5f97 $s_i$ \u662f $s_{i+1}$ \u7684\u540e\u7f00\u3002\n\n\u8bc1\u660e\uff1a\u5982\u679c\u4e0d\u662f\uff0c\u628a $s_i$ \u5728 $s_{i+1}$ \u4e2d\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u540e\u9762\u90fd\u780d\u6389\uff0c\u7b54\u6848\u4e0d\u4f1a\u66f4\u5dee\u3002\n\n\u597d\u7684\u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u5728 SAM \u4e0a dp \u4e86\u3002\u8bbe $dp_i$ \u4e3a\u4ee5\u7b2c $i$ \u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u5f00\u59cb\uff0c\u6700\u591a\u80fd\u591f\u62fc\u4e00\u4e2a\u591a\u957f\u7684\u5e8f\u5217\u2026\u2026\n\n\u8bf6\u4e0d\u5bf9\u554a\uff0c\u8fd9\u6837\u4e00\u4e2a\u8282\u70b9\u662f\u6709\u53ef\u80fd\u4ee3\u8868\u591a\u4e2a\u5b57\u7b26\u4e32\u7684\u554a\uff1f\n\n\u8fd9\u6837\u662f\u6ca1\u6709\u533a\u522b\u7684\u3002\u5982\u679c\u4f60\u4e0d\u60f3\u770b\u8bc1\u660e\u4f60\u53ef\u4ee5\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u5982\u679c\u60f3\u770b\u7684\u8bdd\u53ef\u4ee5\u53bb@iostream \u795e\u4ed9\u7684\u9898\u89e3\u3002\n\n\u597d\u7684\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8f6c\u79fb\u4e86\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8d2a\u5fc3\u5f97\u8f6c\u79fb\u5230\u5b83 parent \u6811\u4e0a\u7684\u7b2c\u4e00\u4e2a\u5728\u5b83\u91cc\u9762\u51fa\u73b0\u4e86\u4e24\u6b21\u7684\u8282\u70b9\uff0c\u8fd9\u6837\u505a\u7684\u6b63\u786e\u6027\u5bb9\u6613\u8bc1\u660e\u3002\n\n\u7b49\u7b49\u6211\u4eec\u600e\u4e48\u53bb\u5224\u65ad\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u5728\u5b83\u91cc\u9762\u51fa\u73b0\u4e86\u4e24\u6b21\u5462\uff1f\n\n\u7ebf\u6bb5\u6811\u5408\u5e76\u5904\u7406\u4e00\u4e0b endpos \u96c6\u5408\u5373\u53ef\uff0c\u5177\u4f53\u505a\u6cd5\u4e0d\u96be\u60f3\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 parent \u6811\u4e0a\u500d\u589e\u6216\u8005\u6811\u5256\u5957\u4e8c\u5206\u627e\u51fa\u8fd9\u4e2a\u8282\u70b9\u4e86\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8f6c\u79fb\u4e86\uff0c\u590d\u6742\u5ea6 $O(n\\log^2n)$\u3002\n\n\u8fd9\u79cd\u4e1c\u897f\u591a\u534a\u662f\u8fc7\u4e0d\u4e86\u7684\u2026\u2026\u7136\u540e\u6211\u5c31\u4e0d\u4f1a\u4e86\uff0c\u770b\u9898\u89e3\u3002\n\n\u9898\u89e3\u5e76\u6ca1\u6709\u8bf4\uff0c\u4f46\u662f\u5176\u5b9e\u91c7\u7528\u4e86\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u53cc\u6307\u9488\u7684\u4e1c\u897f\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u8f6c\u79fb\u70b9\u7684\u4e0b\u9762\u7684\u4e00\u4e2a\u70b9\u3002\u5982\u679c\u53d1\u73b0\u53ef\u4ee5\u8f6c\u79fb\u5230\u8fd9\u4e2a\u70b9\uff0c\u5c31\u8f6c\u79fb\u5230\u8fd9\u4e2a\u70b9\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u4e0b\u9762\u591a\u4e2a\u70b9\u90fd\u53ef\u4ee5\u8f6c\u79fb\uff0c\u90a3\u4e0d\u5c31\u4e8f\u4e86\u5417\uff1f\u6211\u5176\u5b9e\u4e5f\u60f3\u8fc7\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u4f46\u662f\u5c31\u56e0\u4e3a\u8fd9\u79cd\u60f3\u6cd5\u5361\u4f4f\u4e86\u3002\n\n\u540e\u6765\u60f3\u4e86\u4e00\u4e0b\uff0c\u5176\u5b9e\u662f\u4e0d\u4f1a\u7684\u3002\n\n\u53ef\u4ee5\u7528\u5f52\u7eb3\u6cd5\u8bc1\u660e\uff1a\u5982\u679c\u4e00\u4e2a\u70b9 $u$ \u4e0a\u9762\u7684\u70b9\u5168\u90fd\u6309\u8fd9\u79cd\u65b9\u6cd5\u505a\u4e86\u6ca1\u6709\u51fa\u9505\uff0c\u90a3\u4e48\u5047\u8bbe\u8fd9\u4e2a\u70b9\u4f1a\u51fa\u9505\u3002\u5047\u8bbe\u5b83\u8f6c\u79fb\u5230\u4e86\u4e0a\u9762\u90a3\u4e2a\u70b9 $v$ \u4e0b\u9762\u7684\u67d0\u4e00\u4e2a\u70b9 $w$\uff0c\u90a3\u4e48\u6839\u636e\u8fd9\u79cd\u505a\u6cd5\uff0c$w$ \u4e00\u5b9a\u662f\u65e0\u6cd5\u8f6c\u79fb\u5230 $v$ \u7684\uff0c\u5e76\u4e14 $w$ \u7684\u8f6c\u79fb\u70b9\u4e00\u5b9a\u548c $v$ \u7684\u8f6c\u79fb\u70b9\u76f8\u540c\u3002\u6240\u4ee5 $u$ \u76f4\u63a5\u8f6c\u79fb\u5230 $v$ \u4e0d\u4f1a\u4e8f\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u4e00\u8def\u8f6c\u79fb\u4e0b\u6765\u4e86\u3002\u7b97\u4e0a\u7ebf\u6bb5\u6811\uff0c\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n\u8fd8\u662f\u6709\u4e00\u70b9\u7ec6\u8282\u7684\uff0c\u5e76\u4e14\u6ce8\u610f\u8fd9\u91cc\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u8981\u53ef\u6301\u4e45\u5316\u3002\u6211\u7684\u5199\u6cd5\u597d\u50cf\u7a7a\u95f4\u5e38\u6570\u6709\u4e00\u70b9\u5927\uff0c\u4e0d\u8fc7\u80fd\u8fc7\u5c31\u884c\u3002\n\ncode\uff1a\n```cpp\n#include<algorithm>\n#include<map>\n#include<vector>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=2e5+5;\nint n;\nchar s[maxn];\nstruct node{\n\tint l,r;\n\tnode* ch[2];\n\tint sum;\n\tnode(int l,int r):l(l),r(r),sum(0){\n\t\tch[0]=ch[1]=0;\n\t}\n\tvoid modify(int x,int k){\n\t\tsum+=k;\n\t\tif(l<r){\n\t\t\tint mid=l+(r-l)/2;\n\t\t\tif(x<=mid){\n\t\t\t\tif(!ch[0]) ch[0]=new node(l,mid);\n\t\t\t\tch[0]->modify(x,k);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(!ch[1]) ch[1]=new node(mid+1,r);\n\t\t\t\tch[1]->modify(x,k);\n\t\t\t}\n\t\t}\n\t}\n\tint query(int ql,int qr){\n\t\tif(ql<=l&&qr>=r) return sum;\n\t\telse{\n\t\t\tint ans=0;\n\t\t\tif(ch[0]&&ql<=ch[0]->r) ans+=ch[0]->query(ql,qr);\n\t\t\tif(ch[1]&&qr>=ch[1]->l) ans+=ch[1]->query(ql,qr);\n\t\t\treturn ans;\n\t\t}\n\t}\n};\nnode* merge(node* a,node* b){\n\tif(!a) return b;\n\tif(!b) return a;\n\tnode* x=new node(a->l,a->r);\n\tx->sum=a->sum+b->sum;\n\tx->ch[0]=merge(a->ch[0],b->ch[0]);\n\tx->ch[1]=merge(a->ch[1],b->ch[1]);\n\treturn x;\n}\nnode* rt[maxn*2];\nint sz,last,link[maxn*2],len[maxn*2],pos[maxn*2];\nmap<char,int> nxt[maxn*2];\nvector<int> ch[maxn*2];\nvoid init(){\n\tsz=1;\n\tlast=0;\n\tlink[0]=-1;\n\tlen[0]=0;\n\trt[0]=new node(0,n);\n\trt[0]->modify(0,1);\n\tpos[0]=0;\n}\nvoid extend(char c){\n\tint cur=sz++;\n\tlen[cur]=len[last]+1;\n\trt[cur]=new node(0,n);\n\trt[cur]->modify(len[cur],1);\n\tpos[cur]=len[cur];\n\tint p=last;\n\twhile(p>=0&&!nxt[p].count(c)){\n\t\tnxt[p][c]=cur;\n\t\tp=link[p];\n\t}\n\tif(p<0) link[cur]=0;\n\telse{\n\t\tint q=nxt[p][c];\n\t\tif(len[p]+1==len[q]) link[cur]=q;\n\t\telse{\n\t\t\tint clone=sz++;\n\t\t\tlen[clone]=len[p]+1;\n\t\t\tlink[clone]=link[q];\n\t\t\tnxt[clone]=nxt[q];\n\t\t\trt[clone]=0;\n\t\t\tpos[clone]=0;\n\t\t\twhile(p>=0&&nxt[p][c]==q){\n\t\t\t\tnxt[p][c]=clone;\n\t\t\t\tp=link[p];\n\t\t\t}\n\t\t\tlink[q]=link[cur]=clone;\n\t\t}\n\t}\n\tlast=cur;\n}\nvoid dfs1(int u){\n\tfor(int i=0;i<ch[u].size();i++){\n\t\tint v=ch[u][i];\n\t\tdfs1(v);\n\t\trt[u]=merge(rt[u],rt[v]);\n\t\tpos[u]=max(pos[u],pos[v]);\n\t}\n}\nint d[maxn*2],c[maxn*2];\nvoid dfs2(int u){\n\tif(u==0){\n\t\td[u]=0;\n\t\tc[u]=0;\n\t}\n\telse{\n\t\tint v=c[link[u]];\n\t\tif(rt[v]->query(pos[u]-len[u]+len[v],pos[u])>=2){\n\t\t\td[u]=d[link[u]]+1;\n\t\t\tc[u]=u;\n\t\t}\n\t\telse{\n\t\t\td[u]=d[link[u]];\n\t\t\tc[u]=v;\n\t\t}\n\t}\n\tfor(int i=0;i<ch[u].size();i++) dfs2(ch[u][i]);\n}\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tn=readint();\n\tscanf(\"%s\",s);\n\tinit();\n\tfor(int i=0;i<n;i++)  extend(s[i]);\n\tfor(int i=1;i<sz;i++) ch[link[i]].push_back(i);\n\tdfs1(0);\n\tdfs2(0);\n\tint ans=0;\n\tfor(int i=0;i<sz;i++) ans=max(ans,d[i]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1585145632,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF700E \u3010Cool Slogans\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u6d89\u53ca\u5230\u4e00\u822c\u5b50\u4e32\uff0c\u770b\u4e0a\u53bb\u5f88\u4e0d\u53ef\u505a\u3002\n\n\u4eba\u7c7b\u667a\u6167\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\u4ee5\u4e0b\u7ed3\u8bba\uff1a\n\n- \u5b58\u5728\u4e00\u79cd\u6700\u4f18\u65b9\u6848\uff0c\u4f7f\u5f97 $\\forall 2 \\leq i \\leq k$\uff0c$s_{i - 1}$ \u4e3a $s_i$ \u540e\u7f00\u3002\n\n\u8bc1\u660e\uff1a\u6211\u4eec\u968f\u610f\u53d6\u4e00\u79cd\u6700\u4f18\u65b9\u6848\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684 $i$\uff0c\u6211\u4eec\u53ef\u4ee5\u5220\u53bb $s_i$ \u7684\u4e00\u4e2a\u540e\u7f00\u4f7f\u5f97\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u800c\u6b64\u65f6 $s_i$ \u5728 $s_{i + 1}$ \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u4e5f\u4e0d\u4f1a\u51cf\u5c11\u3002\n\n\u770b\u5230\u540e\u7f00\uff0c\u8003\u8651\u5efa\u51fa SAM \u7684 fail \u6811\u3002\u73b0\u5728\u6211\u4eec\u8003\u8651\u5728\u8fd9\u68f5\u6811\u4e0a dp\u3002\n\n\u8bbe $dp_u$ \u8868\u793a $s_k = \\text{any string in endpos}(u)$ \u65f6\u7684 $k_{\\max}$\u3002\u8fd9\u4e2a\u72b6\u6001\u7684\u6b63\u786e\u6027\u5f97\u76ca\u4e8e\u540c\u4e00\u4e2a endpos \u7b49\u4ef7\u7c7b\u5185\u90e8\u7684\u4e32\u4e92\u76f8\u8981\u4e48\u6070\u597d\u51fa\u73b0\u4e00\u6b21\uff0c\u8981\u4e48\u4e0d\u51fa\u73b0\u3002\n\n\u521d\u503c\uff1a$dp_{root} = 1$\u3002\n\n\u8f6c\u79fb\uff1a$dp_u = dp_v + 1$\uff0c\u5176\u4e2d $v$ \u4e3a fail \u6811\u4e0a $u$ \u7684\u7956\u5148\u4e2d\u7b2c\u4e00\u4e2a\u5728 $u$ \u7684\u7b49\u4ef7\u7c7b\u4e2d\u51fa\u73b0\u81f3\u5c11\u4e24\u6b21\u7684\u7b49\u4ef7\u7c7b\u3002\n\n\u7b54\u6848\uff1a$\\displaystyle\\max_{i} dp_i$\u3002\n\n\u73b0\u5728\u95ee\u9898\u53d8\u4e3a\u5982\u4f55\u5feb\u901f\u8f6c\u79fb\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u8f6c\u79fb\u6539\u5199\u6210\u4e00\u4e2a\u66f4\u52a0\u5bb9\u6613\u5b9e\u73b0\u7684\u5f62\u5f0f\uff1a\n\n- \u7ef4\u62a4 $from_u$ \u8868\u793a $u$ \u7684\u7956\u5148\u4e2d\u4e0a\u4e00\u6b21\u5339\u914d\u5230\u5bf9\u5e94 $v$ \u7684\u70b9\u3002\n- \u8f6c\u79fb\u65f6\uff0c\u82e5 $from_{fa_u}$ \u5728 $u$ \u4e2d\u51fa\u73b0\u6070\u597d\u4e00\u6b21\uff0c\u5219 $dp_u = dp_{fa_u}, from_u = from_{fa_u}$\uff1b\u5426\u5219\uff0c$dp_u = dp_{fa_u} + 1, from_u = u$\u3002\u6b63\u786e\u6027\u663e\u7136\uff0c\u56e0\u4e3a\u4e00\u6761\u7956\u5148\u5230\u540e\u4ee3\u7684\u94fe\u4e0a\u7684 dp \u503c\u4e00\u5b9a\u5355\u8c03\u4e0d\u964d\u3002\n\n\u73b0\u5728\u95ee\u9898\u53d8\u4e3a\u5982\u4f55\u5bf9\u5e94 $u$ \u7684\u7956\u5148 $v$\uff0c\u5feb\u901f\u5224\u65ad $v$ \u5728 $u$ \u4e2d\u662f\u5426\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u53d6 endpos \u7b49\u4ef7\u7c7b\u4e2d\u6700\u957f\u8005 $S, T$\u3002\n\n\u6839\u636e fail \u6811\u7684\u5b9a\u4e49\u6709 $S[len_u - len_v + 1, len_u] = T$\uff0c\u5219\u6211\u4eec\u53ea\u9700\u8981\u770b\u8fd8\u6709\u6ca1\u6709\u5176\u4ed6\u7684\u4f4d\u7f6e\u6ee1\u8db3\u6761\u4ef6\u5373\u53ef\u3002\n\n\u90a3\u8fd9\u91cc\u201c\u5176\u4ed6\u7684\u4f4d\u7f6e\u201d\u9700\u8981\u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u5462\uff1f\u8bbe $u$ \u7684\u5176\u4e2d\u4e00\u4e2a\u51fa\u73b0\u4f4d\u7f6e\u7684\u53f3\u7aef\u70b9\u4e3a $pos_u$\uff0c\u6211\u4eec\u6240\u6c42\u7684\u4e00\u4e2a\u5408\u6cd5\u53f3\u7aef\u70b9\u4e3a $r$\u3002\n\n- $r - len_v + 1 \\geq pos_u - len_u + 1$\u3002\n- $r < pos_u$\u3002\n\n\u5408\u8d77\u6765\u53ef\u4ee5\u5f97\u5230 $pos_u - len_u + len_v \\leq r \\leq pos_u - 1$\u3002\n\n\u4e8e\u662f\u6211\u4eec\u7ebf\u6bb5\u6811\u5408\u5e76\u9884\u5904\u7406\u5b50\u6811\u5185\u7684\u7ed3\u5c3e\u4f4d\u7f6e\u5e76\u5728\u5224\u65ad\u65f6\u67e5\u8be2\u5b50\u6811\u5185\u5728\u4e0a\u8ff0\u533a\u95f4\u4e2d\u662f\u5426\u5b58\u5728\u7ed3\u5c3e\u4f4d\u7f6e\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <stdio.h>\n\ntypedef struct {\n\tint nxt;\n\tint end;\n} Edge;\n\ntypedef struct {\n\tint ls;\n\tint rs;\n\tint sum;\n} Node;\n\nint lst = 1, sam_id = 1, cnt = 0, seg_id = 0;\nint len[400007], nxt[400007][27], fa[400007], pos[400007], head[400007], root[400007], dp[400007], from[400007];\nchar s[200007];\nEdge edge[400007];\nNode tree[7600007];\n\ninline int insert(int ch){\n\tint u = lst, v = lst = ++sam_id;\n\tlen[v] = len[u] + 1;\n\twhile (u != 0 && nxt[u][ch] == 0){\n\t\tnxt[u][ch] = v;\n\t\tu = fa[u];\n\t}\n\tif (u == 0){\n\t\tfa[v] = 1;\n\t\treturn v;\n\t}\n\tint w = nxt[u][ch];\n\tif (len[w] == len[u] + 1){\n\t\tfa[v] = w;\n\t\treturn v;\n\t}\n\tint x = ++sam_id;\n\tlen[x] = len[u] + 1;\n\tfa[x] = fa[w];\n\tfa[v] = fa[w] = x;\n\tfor (register int i = 1; i <= 26; i++){\n\t\tnxt[x][i] = nxt[w][i];\n\t}\n\twhile (nxt[u][ch] == w){\n\t\tnxt[u][ch] = x;\n\t\tu = fa[u];\n\t}\n\treturn v;\n}\n\ninline void add_edge(int start, int end){\n\tcnt++;\n\tedge[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge[cnt].end = end;\n}\n\ninline void update(int x){\n\ttree[x].sum = tree[tree[x].ls].sum + tree[tree[x].rs].sum;\n}\n\nvoid insert(int &x, int l, int r, int pos){\n\tif (x == 0) x = ++seg_id;\n\tif (l == r){\n\t\ttree[x].sum++;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid){\n\t\tinsert(tree[x].ls, l, mid, pos);\n\t} else {\n\t\tinsert(tree[x].rs, mid + 1, r, pos);\n\t}\n\tupdate(x);\n}\n\nint merge(int x, int y){\n\tif (x == 0) return y;\n\tif (y == 0) return x;\n\tint z = ++seg_id;\n\ttree[z].ls = merge(tree[x].ls, tree[y].ls);\n\ttree[z].rs = merge(tree[x].rs, tree[y].rs);\n\tupdate(z);\n\treturn z;\n}\n\nvoid dfs1(int u, int n){\n\tif (pos[u] != 0) insert(root[u], 1, n, pos[u]);\n\tfor (register int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tdfs1(x, n);\n\t\troot[u] = merge(root[u], root[x]);\n\t\tif (pos[u] == 0) pos[u] = pos[x];\n\t}\n}\n\nint get_sum(int x, int L, int R, int l, int r){\n\tif (x == 0) return 0;\n\tif (l <= L && R <= r) return tree[x].sum;\n\tint mid = (L + R) >> 1, ans = 0;\n\tif (l <= mid) ans = get_sum(tree[x].ls, L, mid, l, r);\n\tif (r > mid) ans += get_sum(tree[x].rs, mid + 1, R, l, r);\n\treturn ans;\n}\n\nvoid dfs2(int u, int n){\n\tfor (register int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (u == 1){\n\t\t\tdp[x] = 1;\n\t\t\tfrom[x] = x;\n\t\t} else if (get_sum(root[from[u]], 1, n, pos[x] - len[x] + len[from[u]], pos[x] - 1) == 0){\n\t\t\tdp[x] = dp[u];\n\t\t\tfrom[x] = from[u];\n\t\t} else {\n\t\t\tdp[x] = dp[u] + 1;\n\t\t\tfrom[x] = x;\n\t\t}\n\t\tdfs2(x, n);\n\t}\n}\n\ninline int max(int a, int b){\n\treturn a > b ? a : b;\n}\n\nint main(){\n\tint n, ans = 0;\n\tscanf(\"%d\", &n);\n\tscanf(\"%s\", &s[1]);\n\tfor (register int i = 1; i <= n; i++){\n\t\tpos[insert(s[i] - 'a' + 1)] = i;\n\t}\n\tfor (register int i = 2; i <= sam_id; i++){\n\t\tadd_edge(fa[i], i);\n\t}\n\tdfs1(1, n);\n\tdfs2(1, n);\n\tfor (register int i = 2; i <= sam_id; i++){\n\t\tans = max(ans, dp[i]);\n\t}\n\tprintf(\"%d\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1673339882,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF700E \u3010Cool Slogans\u3011"
    },
    {
        "content": "\u6d1b\u8c37\u7684\u4ee3\u7801\u663e\u793a\u6709\u70b9\u9634\u95f4\uff0c\u5728[\u6211\u7684\u535a\u5ba2](https://lookcatbox.github.io/post/ti-jie-cf700e-cool-slogans/)\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u3002\n\n~~\u4e32\u4e32\u9898\uff01~~\n\n\u4e2a\u4eba\u611f\u89c9\u672c\u9898\u548c[CF1063F](https://www.luogu.com.cn/problem/solution/CF1063F) \u5f88\u50cf\uff0c\u7279\u522b\u662f\u5173\u4e8e\u76f8\u90bb\u4e32\u4e4b\u95f4\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u5148\u53bb\u770b\u770b\u8fd9\u9898\u3002\n\n\u8003\u8651\u5728\u540c\u6837\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c$s_{i-1}$ \u662f $s_i$ \u7684\u540e\u7f00\u7684\u60c5\u51b5\u4e00\u5b9a\u6bd4 $s_{i-1}$ \u4e0d\u662f $s_i$ \u540e\u7f00\u7684\u60c5\u51b5\u4f18\u3002\n\n\u8bc1\u660e\uff1a\n\n> \u5982\u679c $s_{i-1}$ \u4e0d\u662f $s_i$ \u7684\u540e\u7f00\uff0c\u90a3\u4e48\u6211\u4eec\u628a  $s_i$ \u4e2d\uff0c $s_{i-1}$ \u7b2c\u4e8c\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u7ed3\u5c3e\u4e4b\u540e\u7684\u5b57\u7b26\u5168\u90e8\u5220\u6389\uff0c\u5f97\u5230 $s_i'$ \u3002\u5219 $s_{i-1}$ \u548c $s_i'$ \u4f9d\u65e7\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e14\u7531\u4e8e $s_i'$ \u662f $s_i$ \u7684\u5b50\u4e32\uff0c$s_i'$ \u4e0e $s_{i+1}$ \u4f9d\u65e7\u6ee1\u8db3\u6761\u4ef6\uff0c\u5bf9\u6574\u4e2a\u5e8f\u5217\u7684\u5408\u6cd5\u6027\u4e0d\u9020\u6210\u5f71\u54cd\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ea\u8003\u8651 $s_{i-1}$ \u662f $s_i$ \u540e\u7f00\u7684\u60c5\u51b5\u3002\n\n\u8003\u8651\u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a\u3002\u5bf9\u4e8e\u540e\u7f00\u81ea\u52a8\u673a\u7684 parent tree \u800c\u8a00\uff0c\u6bcf\u4e2a\u70b9 $i$ \u7684 $fa_i$ \u6240\u4ee3\u8868\u7684\u6700\u957f\u4e32\u90fd\u662f\u70b9 $i$  \u6240\u4ee3\u8868\u7684\u6700\u957f\u4e32\u7684\u4e25\u683c\u540e\u7f00\u3002\u6211\u4eec\u5148\u53ea\u8003\u8651\u4ece $fa_i$ \u5411 $i$ \u8d21\u732e\u3002\u65e2\u7136 $fa_i$ \u4f5c\u4e3a $i$ \u7684\u540e\u7f00\uff0c\u90a3\u5b83\u7b2c\u4e8c\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u53ea\u9700\u8981\u8003\u8651\u5b83\u662f\u5426\u6709\u5728\u524d\u9762\u7684\u4f4d\u7f6e\u51fa\u73b0\u8fc7\u5373\u53ef\u3002\u8bbe\u70b9 $i$ \u6240\u4ee3\u8868\u7684\u6700\u957f\u4e32\u7684\u7b2c\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u4e3a $p_i$ \uff0c\u8ba1\u7b97  $fa_i$ \u7684 $endpos$ \u96c6\u5408\u662f\u5426\u5728 $[p_i-len_i+len_{fa_i},p_i-1]$ \u4e2d\u6709\u5143\u7d20\u5373\u53ef\u3002\n\n\u6211\u4eec\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684 $endpos$ \u96c6\u5408\u3002\u8003\u8651\u4e00\u4e2a\u70b9\u7684 $endpos$ \u96c6\u5408\u7531\u81ea\u5df1\u7684\u6240\u6709\u513f\u5b50\u7684 $endpos$ \u96c6\u5408\u5408\u5e76\u800c\u6765\uff0c\u4e14\u5f53\u4e14\u4ec5\u5f53 **\u8be5\u70b9\u6240\u4ee3\u8868\u7684\u6700\u957f\u4e32\u662f\u6574\u4e2a\u4e32\u7684\u4e00\u4e2a\u524d\u7f00\u65f6** \u4f1a\u7f3a\u5c11\u6700\u957f\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u6545\u4ece\u513f\u5b50\u5408\u5e76\u4e0a\u6765\u540e\u52a0\u5165\u6700\u957f\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\n\n\u73b0\u5728\u6765\u8bc1\u660e\u4e00\u4e2a\u7ed3\u8bba\uff1a**\u5bf9\u4e8e\u4e00\u4e2a $f_i$ \u800c\u8a00\uff0c\u5f53 $f_i$ \u7684\u6700\u957f\u4e32\u7b26\u5408\u6761\u4ef6\u65f6\uff0c$f_i$ \u4e2d\u7684\u6240\u6709\u4e32\u7b26\u5408\u6761\u4ef6\u3002\u5f53 $f_i$ \u7684\u6700\u957f\u4e32\u4e0d\u7b26\u5408\u6761\u4ef6\u65f6\uff0c$f_i$ \u4e2d\u7684\u6240\u6709\u4e32\u90fd\u4e0d\u7b26\u5408\u6761\u4ef6\u3002**\n\n\u8bc1\u660e\uff1a\n\n> \u9996\u5148\u7b2c\u4e00\u70b9\u5f88\u597d\u8bc1\uff0c\u7531\u4e8e $f_i$ \u4e2d\u7684\u6240\u6709\u5176\u5b83\u4e32\u90fd\u662f $f_i$ \u7684\u6700\u957f\u4e32\u7684\u540e\u7f00\uff0c\u56e0\u6b64\u53ea\u8981 $f_i$ \u7684\u6700\u957f\u4e32\u7b26\u5408\u6761\u4ef6\u5176\u4e5f\u4e00\u5b9a\u7b26\u5408\u6761\u4ef6\u3002\n>\n> \u5bf9\u4e8e\u7b2c\u4e8c\u70b9\uff0c\u6211\u4eec\u5047\u8bbe $f_i$ \u7684\u6700\u957f\u4e32\u4e0d\u5728 $i$ \u7684\u6700\u957f\u4e32\u4e2d\u51fa\u73b0\u4e24\u6b21\uff0c\u800c $f_i$ \u6240\u4ee3\u8868\u7684\u53e6\u4e00\u4e2a\u66f4\u5c0f\u7684\u4e32\u5728 $i$ \u7684\u6700\u957f\u4e32\u4e2d\u51fa\u73b0\u4e86\u4e24\u6b21\u3002\u7531\u4e8e\u4e24\u4e2a\u4e32\u7684 $endpos$ \u96c6\u5408\u76f8\u540c\uff0c\u56e0\u6b64\u5fc5\u7136\u53ef\u4ee5\u5728 $i$ \u7684\u6700\u957f\u4e32\u7684\u524d\u9762\u6dfb\u52a0\u4e00\u4e32\u5b57\u7b26\u5f97\u5230\u5b57\u7b26\u4e32 $w$ \uff0c\u4f7f\u5f97 $f_i$ \u6240\u4ee3\u8868\u7684\u7684\u6700\u957f\u4e32\u5728 $w$ \u4e2d\u51fa\u73b0\u4e24\u6b21\u3002\u7531\u4e8e $i$ \u7684\u6700\u957f\u4e32\u662f $w$ \u7684\u540e\u7f00\uff0c\u56e0\u6b64 $w$ \u5c5e\u4e8e $i$ \u7684\u513f\u5b50\u3002\u4f46\u662f\u7531\u4e8e\u6bcf\u4e2a $i$ \u7684\u6700\u957f\u4e32\u90fd\u5fc5\u5b9a\u4e3a\u4e00\u4e2a $w$ \u7684\u540e\u7f00\uff0c\u6240\u4ee5 $endpos_i \\in endpos_w$ \uff0c\u8fd9\u70b9\u8bc1\u660e $w$ \u5c5e\u4e8e $i$ \u81ea\u8eab\u6216 $i$ \u7684\u7956\u5148\uff0c\u4e0e\u4e4b\u524d\u63a8\u5bfc\u51fa\u7684 $w$ \u5c5e\u4e8e $i$ \u7684\u513f\u5b50\u77db\u76fe\uff0c\u5047\u8bbe\u4e0d\u6210\u7acb\u3002\n\n\u8bbe $f_i$ \u4e3a\u8003\u8651\u5230 $i$ \u65f6\u5e8f\u5217\u7684\u6700\u957f\u957f\u5ea6\uff0c$g_i$ \u4e3a\u8003\u8651\u5230 $i$ \u65f6\u5e8f\u5217\u7ed3\u5c3e\u7684\u4f4d\u7f6e\u3002\u5982\u679c $i$ \u7684\u6700\u957f\u4e32\u4e0e $g_{fa_i}$ \u6ee1\u8db3\u6761\u4ef6\uff0c\u5219 $f_i = f_{fa_i}+1$ \uff0c\u4e14 $g_i=i$ \uff0c\u5426\u5219 $f_i=f_{fa_i}$ \uff0c$g_i=g_{fa_i}$ \u3002\u5c06\u540e\u7f00\u81ea\u52a8\u673a\u7684\u8282\u70b9\u62d3\u6251\u6392\u5e8f\u4e00\u4e0b\u4ece\u540e\u5f80\u524d $dp$ \u5373\u53ef\u3002\n\n$Code$\n\n```cpp\n#include<bits/stdc++.h>\n#define N 600010\n#define mid (l+r)/2\nusing namespace std;\nint n;\nchar s[N];\nint ls[N<<5],rs[N<<5],cnt,rt[N];\nvoid update(int &k,int l,int r,int pos) {\n\tif(!k) k=++cnt;\n\tif(l==r) return ;\n\tif(pos<=mid) update(ls[k],l,mid,pos);\n\telse update(rs[k],mid+1,r,pos);\n}\nint merge(int x,int y,int l,int r) {\n\tif(!x||!y) return x+y;\n\tint now=++cnt;\n\tif(l!=r) {\n\t\tls[now]=merge(ls[x],ls[y],l,mid);\n\t\trs[now]=merge(rs[x],rs[y],mid+1,r);\n\t}\n\treturn now;\n}\nint query(int k,int l,int r,int L,int R) {\n    if(!k||l>R||r<L) return 0;\n    if(L<=l&&r<=R) return 1;\n    if(R<=mid) return query(ls[k],l,mid,L,R);\n    else if(L>mid) return query(rs[k],mid+1,r,L,R);\n    else return query(ls[k],l,mid,L,R)||query(rs[k],mid+1,r,L,R);\n}\n\nstruct SAM {\n\tint tr[N][30],fa[N],lst,tot,pos[N],len[N];\n\tSAM(){lst=tot=1;}\n \tvoid add(int c,int w) {\n\t\tint p=lst,np=++tot;\n\t\tlen[np]=len[p]+1,pos[np]=w,lst=np;\n\t\tupdate(rt[np],1,n,w);\n\t\twhile(p&&!tr[p][c]) tr[p][c]=np,p=fa[p];\n\t\tif(!p) {fa[np]=1;return ;}\n\t\tint q=tr[p][c];\n\t\tif(len[p]+1==len[q]) {fa[np]=q;return ;}\n\t\tint nq=++tot;\n\t\tlen[nq]=len[p]+1;\n\t\tfa[nq]=fa[q],pos[nq]=pos[q],fa[q]=fa[np]=nq;\n\t\tfor(int i=0; i<26; i++) tr[nq][i]=tr[q][i];\n\t\twhile(p&&tr[p][c]==q) tr[p][c]=nq,p=fa[p];\n\t}\n\tint buc[N],rk[N];\n\tvoid topo() {\n\t\tfor(int i=1; i<=tot; i++) buc[len[i]]++;\n\t\tfor(int i=1; i<=n; i++) buc[i]+=buc[i-1];\n\t\tfor(int i=1; i<=tot; i++) rk[buc[len[i]]--]=i; \n\t}\n}sam;\nint read() {\n\tint res=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)) f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch)) res=res*10+ch-'0',ch=getchar();\n\treturn f*res;\n}\nint f[N],g[N],ans;\nint main()\n{\n\tn=read();\n\tscanf(\"%s\",s+1);\n\tfor(int i=1; i<=n; i++) sam.add(s[i]-'a',i);\n\tsam.topo();\n\tfor(int i=sam.tot; i>1; i--) {\n\t\tint u=sam.rk[i],v=sam.fa[u];\n\t\trt[v]=merge(rt[v],rt[u],1,n);\n\t}\n\tfor(int i=2; i<=sam.tot; i++) {\n\t\tint u=sam.rk[i],v=sam.fa[u];\n\t\tif(v==1) f[u]=1,g[u]=u;\n\t\telse if(query(rt[g[v]],1,n,sam.pos[u]-sam.len[u]+sam.len[g[v]],sam.pos[u]-1)) f[u]=f[v]+1,g[u]=u;\n\t\telse f[u]=f[v],g[u]=g[v];\n\t\tans=max(ans,f[u]);\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1649346629,
        "uid": 124918,
        "name": "LinkyChristian",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011CF700E Cool Slogans"
    }
]