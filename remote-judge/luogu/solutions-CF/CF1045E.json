[
    {
        "content": "\u611f\u8c22\u51ac\u4ee4\u8425\u65f6\u949f\u5b50\u8c26julao\u7684\u8bb2\u89e3\n\n\u7b80\u5316\u9898\u610f\uff1a\n\n\u5728\u5e73\u9762\u4e0a\u6709n\u4e2a\u70b9\uff0c\u6709\u7684\u662f\u767d\u70b9\uff0c\u6709\u7684\u662f\u9ed1\u70b9\uff08\u7ed9\u5b9a\u5750\u6807\u548c\u989c\u8272\uff09\u3002\u4fdd\u8bc1\u6ca1\u6709\u4e09\u70b9\u5171\u7ebf\u3002\n\u4f60\u9700\u8981\u628a\u767d\u70b9\u8fde\u6210\u4e00\u9897\u751f\u6210\u6811\uff0c\u9ed1\u70b9\u8fde\u6210\u4e00\u9897\u751f\u6210\u6811\u3002\u751f\u6210\u6811\u7684\u6811\u8fb9\u5373\u4e3a\u5e73\u9762\u4e0a\u8fde\u63a5\u8fd9\u4e24\u70b9\u7684\u76f4\u7ebf\u6bb5\u3002\u4f60\u9700\u8981\u4fdd\u8bc1\u4efb\u4e24\u6761\u4e0d\u5171\u7aef\u70b9\u7684\u8fb9\u4e0d\u76f8\u4ea4\uff08\u767d\u6811\u7684\u8fb9\u4e5f\u4e0d\u80fd\u548c\u9ed1\u6811\u7684\u8fb9\u76f8\u4ea4\uff09\u3002\u5982\u679c\u65e0\u89e3\u8f93\u51faImpossible\u3002\n1<=n<=1000\n\n\u9996\u5148\u8003\u8651\u505a\u6574\u5f20\u56fe\u7684\u51f8\u5305\n\n\u5982\u679c\u51f8\u5305\u4e0a\u7684\u70b9\u5b58\u5728\u9ed1\u767d\u76f8\u95f4\u7684\u60c5\u51b5\uff0c\u90a3\u5c31\u65e0\u89e3\n\n\u5982\u679c\u51f8\u5305\u4e0a\u7684\u70b9\u5168\u662f\u540c\u79cd\u989c\u8272\uff1a\n\n\u5982\u679c\u5185\u90e8\u7684\u989c\u8272\u4e5f\u4e00\u6837\uff0c\u5c31\u76f4\u63a5\u8dd1\u51fa\u4e2a\u751f\u6210\u6811\u5c31\u597d\u4e86\n\n\u5982\u679c\u5185\u90e8\u5b58\u5728\u5f02\u8272\u70b9\uff0c\u90a3\u4e48\u5c31\u8ba9\u51f8\u5305\u4e0a\u7684\u6240\u6709\u76f8\u90bb\u70b9\u5bf9\u4e0e\u4efb\u610f\u4e00\u4e2a\u5f02\u8272\u70b9\u5f62\u6210\u4e2a\u4e09\u89d2\u5f62\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u4e09\u89d2\u5f62\uff0c\u6709\u4e24\u4e2a\u989c\u8272\u76f8\u540c\u7684\u9876\u70b9\u548c\u4e00\u4e2a\u5f02\u8272\u9876\u70b9\uff0c\u67e5\u8be2\u5176\u5185\u90e8\u6240\u6709\u7684\u70b9\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5f02\u8272\u70b9\uff08\u4e0e\u5f02\u8272\u9876\u70b9\u989c\u8272\u76f8\u540c\u7684\u70b9\uff09\uff0c\u90a3\u4e48\u5c31\u8fde\u63a5\u4e24\u540c\u8272\u9876\u70b9\u4e0e\u5185\u90e8\u6240\u6709\u70b9\uff08\u4e5f\u53ef\u80fd\u91cc\u9762\u6ca1\u6709\u70b9\uff09\u7684\u4efb\u610f\u4e00\u4e2a\u751f\u6210\u6811\uff1b\u5426\u5219\u53d6\u4efb\u610f\u4e00\u4e2a\u5f02\u8272\u70b9\uff0c\u5982\u4e0b\u56fe\uff0c\u518d\u5f80\u4e09\u4e2a\u9876\u70b9\u5f62\u6210\u4e09\u89d2\u5f62\u9012\u5f52\u4e0b\u53bb\uff0c\u6700\u7ec8\u603b\u80fd\u5316\u6210\u65e0\u5f02\u8272\u70b9\u7684\u60c5\u51b5\n\n![luogu](https://cdn.luogu.com.cn/upload/pic/51786.png)\n\n\u5982\u679c\u51f8\u5305\u4e0a\u7684\u70b9\u989c\u8272\u5e76\u4e0d\u76f8\u540c\uff0c\u5982\u679c\u6709\u89e3\uff0c\u90a3\u5fc5\u662f\u51f8\u5305\u53ea\u5206\u6210\u4e24\u6bb5\uff0c\u4e00\u6bb5\u9ed1\u4e00\u6bb5\u767d\uff0c\u90a3\u4e48\u540c\u6837\u5730\u628a\u76f8\u90bb\u9ed1\u70b9\u5f80\u7b2c\u4e00\u4e2a\u767d\u70b9\u5f62\u6210\u4e09\u89d2\u5f62\uff0c\u76f8\u90bb\u767d\u70b9\u5f80\u7b2c\u4e00\u4e2a\u9ed1\u70b9\u5f62\u6210\u4e09\u89d2\u5f62\uff0c\u540c\u7406\u9012\u5f52\u4e0b\u53bb\u5373\u53ef\n\n![luogu](https://cdn.luogu.com.cn/upload/pic/51787.png)\n\n\u5047\u8bbe\u51f8\u5305\u4e0a\u6709m\u4e2a\u70b9\uff0c\u90a3\u4e48\u521d\u59cb\u5c31\u4f1a\u6709m-2(\u51f8\u5305\u4e0d\u540c\u8272)\u6216m\u4e2a\u4e09\u89d2\u5f62(\u51f8\u5305\u540c\u8272)\uff0c\u6bcf\u6b21\u5256\u5206\u4f1a\u591a\u51fa\u4e24\u4e2a\u4e09\u89d2\u5f62\uff0c\u6240\u4ee5\u6700\u7ec8\u4f1a\u67092(n-m)+m=2n-m\u62162(n-m)+m-2=2n-m-2\u4e2a\u4e09\u89d2\u5f62\uff0c\u800cm<=n\uff0c\u6240\u4ee5\u4e09\u89d2\u5f62\u6570\u662fO(n)\u7ea7\u522b\u7684\uff0c\u6bcf\u6b21\u627e\u4e09\u89d2\u5f62\u5185\u90e8\u7684\u70b9\u7684\u6734\u7d20\u590d\u6742\u5ea6\u662fO(n)\u7684\uff0c\u5171O(n^2)\uff0c\u8fde\u751f\u6210\u6811\u6bcf\u6b21\u662fO(\u4e09\u89d2\u5f62\u70b9\u6570^2)\uff0c\u4f46\u603b\u5171\u6709n\u4e2a\u70b9\uff0c\u6240\u4ee5\u603b\u5171\u662f\u5dee\u4e0d\u591aO(n^2)\u7684\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u5927\u6982O(n^2) n<=1000\uff0c\u80fd\u8fc7\n\n```cpp\n#include<cmath>\n#include<cctype>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing std::pair;\nusing std::sort;\nusing std::swap;\nusing std::make_pair;\ntypedef double dbl;\nconst int N=1e3+10;\nint n,top,ans[N][2],cnt;\nbool incv[N];\nstruct point\n{\n\tint x,y,org;//org\u8868\u793a\u8bfb\u5165\u70b9\u7684\u539f\u7f16\u53f7(1\u5f00\u59cb)\n\tbool color;\n\tinline point(int a=0,int b=0){x=a;y=b;}\n\tinline const bool operator==(const point &p)const\n\t{\n\t\treturn color==p.color;\n\t}\n\tinline const friend dbl distance(const point &p1,const point &p2)\n\t{\n\t\treturn sqrt(pow(1.0*(p1.x-p2.x),2.0)+pow(1.0*(p1.y-p2.y),2.0));\n\t}\n}p[N],s[N],ss[N];\ntypedef pair<point,point>ppp;\ntypedef std::vector<point>vpt;\nstruct vector\n{\n\tint x,y;\n\tinline vector(const point &a,const point &b)\n\t{\n\t\tx=b.x-a.x;\n\t\ty=b.y-a.y;\n\t}\n\tinline const dbl length()\n\t{\n\t\treturn distance(point(0,0),point(x,y));\n\t}\n\tinline const friend int cross_product(const vector &v1,const vector &v2)\n\t{\n\t\treturn v1.x*v2.y-v1.y*v2.x;\n\t}\n\t/*inline const friend int dot_product(const vector &v1,const vector &v2)\n\t{\n\t\treturn v1.x*v2.x+v1.y*v2.y;\n\t}\n\tinline const friend dbl getcos(vector v1,vector v2)\n\t{\n\t\treturn dot_product(v1,v2)/v1.length()/v2.length();\n\t}*/\n};\nstruct triangle\n{\n\tpoint v[3];\n\tinline triangle(const point &a,const point &b,const point &c)\n\t{\n\t\tv[0]=a;v[1]=b;v[2]=c;\n\t}\n\tinline const bool difference() //\u5f97\u51fa\u5f02\u8272\n\t{\n\t\tint cnt[2];\n\t\tcnt[0]=cnt[1]=0;\n\t\tfor (int i=0;i<3;i++)\n\t\t\tcnt[v[i].color]++;\n\t\treturn cnt[0]>cnt[1];\n\t}\n\tinline const ppp same() //\u5f97\u51fa\u540c\u8272\u70b9\n\t{\n\t\tbool c=difference();\n\t\tint s[2],cnt=-1;\n\t\tfor (int i=0;i<3;i++)\n\t\t\tif (v[i].color^c)\n\t\t\t\ts[++cnt]=i;\n\t\treturn make_pair(v[s[0]],v[s[1]]);\n\t}\n\t/*inline const dbl size()\n\t{\n\t\treturn 0.5*abs(1.0*cross_product(vector(v[0],v[1]),vector(v[0],v[2])));\n\t}*/\n\tinline const bool in(const point &p) //\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u8be5\u4e09\u89d2\u5f62\u5185\u90e8\n\t{\n\t\t/*dbl S=0.0,s;\n\t\tfor (int i=0;i<2;i++)\n\t\t\tif (S+=(s=triangle(v[i],v[i+1],p).size()),!s)return false;\n\t\tS+=triangle(v[0],v[2],p).size();\n\t\treturn S==size();*/\n\t\tint cp1=cross_product(vector(v[0],v[1]),vector(v[0],p)),\n\t\t\tcp2=cross_product(vector(v[1],v[2]),vector(v[1],p)),\n\t\t\tcp3=cross_product(vector(v[2],v[0]),vector(v[2],p));\n\t\treturn cp1&&cp2&&cp3&&(cp1>0)==(cp2>0)&&(cp1>0)==(cp3>0);\n\t}\n};\nint fa[N];//\u5e76\u67e5\u96c6\u5efa\u751f\u6210\u6811\ninline const void init()\n{\n\tfor (int i=1;i<=n;i++)fa[i]=i;\n}\ninline const int find(int x)\n{\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\ninline const void Union(int x,int y)\n{\n\tfa[find(x)]=find(y);\n}\ninline const bool operator<(const point &p1,const point &p2)\n{\n\tvector v1(p[1],p1),v2(p[1],p2);\n\tint cp=cross_product(v1,v2);\n\tif (cp>0)return true;\n\tif (!cp&&v1.length()<v2.length())return true;\n\treturn false;\n}\ninline const void convex_hull()//\u6c42\u51f8\u5305\n{\n\tfor (int i=1;i<=n;i++)\n\t\tif (p[i].y<p[1].y)\n\t\t\tswap(p[1],p[i]);\n\tsort(p+2,p+n+1);s[++top]=p[1];incv[p[1].org]=1;//incv\u662f\u770b\u539f\u6807\u53f7\u4e3ai\u7684\u70b9\u662f\u5426\u5728\u51f8\u5305\u4e0a\n\tfor (int i=2;i<=n;i++)\n\t{\n\t\twhile (top>1&&cross_product(vector(s[top-1],s[top]),vector(s[top],p[i]))<=0)incv[s[top].org]=0,top--;\n\t\ts[++top]=p[i];\n\t\tincv[p[i].org]=1;\n\t}\n}\ninline const void divide(triangle t)\n{\n\tbool c=t.difference();\n//\tfor (int i=0;i<3;i++)printf(\"%d %d\\n\",t.v[i].x,t.v[i].y);puts(\"kk\");\n\tstatic vpt same,diff;same.clear();diff.clear();//same\u662f\u5185\u90e8\u540c\u8272\u70b9\u96c6\uff0cdiff\u662f\u5185\u90e8\u5f02\u8272\u70b9\u96c6\n\tfor (int i=1;i<=n;i++)\n\t\tif (t.in(p[i]))\n\t\t\tif (p[i].color^c)same.push_back(p[i]);\n\t\t\telse diff.push_back(p[i]);\n\tppp P=t.same(); //\u8868\u793a\u4e24\u4e2a\u540c\u8272\u9876\u70b9\n\tif (diff.empty())//\u6ca1\u6709\u5185\u90e8\u5f02\u8272\u70b9\n\t{\n\t\tsame.push_back(P.first);same.push_back(P.second);\n\t//\tprintf(\"%d %d %d %d\\npp\\n\",P.first.x,P.first.y,P.second.x,P.second.y);\n\t\tfor (int i=0;i<same.size()-1;i++)\n\t\t\tfor (int u,v,j=i+1;j<same.size();j++)\n\t\t\t\tif (find(u=same[i].org)^find(v=same[j].org))\n\t\t\t\t\tans[++cnt][0]=u-1,ans[cnt][1]=v-1,Union(u,v);\n\t\treturn;\n\t}\n/*\tdbl mx=-2.0,now;point nxt; //\u8fd9\u4e2a\u662f\u7528\u6765\u627e\u5206\u5272\u70b9\u7684\uff0c\u9ed8\u8ba4\u662f\u6700\u9760\u8fd1\u540c\u8272\u9876\u70b9\u7684\u8fde\u8fb9\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\n\tfor (vpt::iterator i=diff.begin();i!=diff.end();i++)\n\t\tif (mx==-2.0)nxt=*i;\n\t\telse \n\t\t\tif ((now=getcos(vector(P.first,P.second),vector(P.first,*i)))>mx)\n\t\t\t\tnxt=*i,mx=now;*/\n\t\t\t\tpoint nxt=diff[0]; //\u4efb\u9009\u4e00\u4e2a\u5c31\u884c\u4e86\n\tfor (int i=0;i<2;i++)\n\t\tdivide(triangle(t.v[i],t.v[i+1],nxt));\n\tdivide(triangle(t.v[2],t.v[0],nxt));\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++)\n\t\tscanf(\"%d%d%d\",&p[i].x,&p[i].y,&p[i].color),\n\t\tp[i].org=i;\n\tconvex_hull();init();\n\tfor (int i=1;i<=top;i++)ss[i]=s[i];\n\tint tot=std::unique(ss+1,ss+top+1)-ss-1;//\u628a\u540c\u8272\u4e32\u7f29\u6210\u4e00\u4e2a\u70b9\u6765\u5224\u65ad\u6709\u65e0\u89e3\n\tif (tot>3||tot==3&&ss[1].color^ss[tot].color)return puts(\"Impossible\"),0; //\u88ab\u7f29\u6210\u4e86\u4e09\u4e2a\u70b9\u53ca\u4ee5\u4e0a\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u88ab\u7f29\u6210\u4e09\u4e2a\u70b9\uff0c\u9996\u4f4d\u540c\u8272\uff0c\u56e0\u4e3a\u51f8\u5305\u662f\u4e00\u4e2a\u73af\u9996\u4f4d\u76f8\u63a5\u6240\u4ee5\u5e76\u4e0d\u65e0\u89e3\uff0c\u4f46\u9996\u4f4d\u5f02\u8272\u7684\u8bdd\u5c31\u65e0\u89e3\u4e86\uff1b\u88ab\u7f29\u6210\u4e09\u4e2a\u70b9\u4ee5\u4e0a\uff0c\u65e0\u89e3\n\tbool c=ss[1].color;//\u9996\u7684\u989c\u8272\n\tif (tot>2)\n\t{\n    \tint fst=0,lst=0; //fst\u8868\u793a\u8fde\u7eed\u7684\u989c\u8272\u4e32\u7684\u5934,lst\u8868\u793a\u5c3e(\u56e0\u4e3a\u88ab\u5206\u6210\u4e09\u6bb5\u7684\u8fd9\u79cd\u60c5\u51b5\u9996\u4f4d\u5728\u6570\u7ec4\u4e2d\u662f\u4e0d\u8fde\u7eed\u7684)\n\t\tfor (int i=1;i<=top;i++)\n\t\t{\n\t\t\tif (s[i].color^c&&!fst)fst=i;\n\t\t\tif (s[i].color^c)lst=i;\n\t\t}\n\t/*(int i=1;i<fst-1;i++)\n\t\t\tdivide(triangle(s[i],s[i+1],s[lst]));\n\t\tfor (int i=lst+1;i<top;i++)\n\t\t\tdivide(triangle(s[lst],s[i],s[i+1]));\n\t\tdivide(triangle(s[top],s[1],s[lst]));*/\n\t\tfor (int i=fst;i<lst;i++)\n\t\t\tdivide(triangle(s[i],s[i+1],s[lst+1]));\n\t\tfor (int i=lst+1;i<top;i++)\n\t\t\tdivide(triangle(s[i],s[i+1],s[fst]));\n\t\tfor (int i=1;i<fst-1;i++)\n\t\t\tdivide(triangle(s[i],s[i+1],s[fst]));\n\t\tdivide(triangle(s[top],s[1],s[fst]));\n\t}\n\tif (tot==2) //\u53ea\u88ab\u5206\u6210\u4e86\u4e24\u6bb5\uff0c\u5c31\u662f\u4e0a\u9762\u90a3\u4e2aif\u7684\u7b80\u5316\u7248\n\t{\n\t\tint pos;\n\t\tfor (int i=1;i<=top;i++)\n\t\t\tif (s[i].color^c)\n\t\t\t\t{pos=i;break;}\n\t\tfor (int i=pos;i<top;i++)\n\t\t\tdivide(triangle(s[pos-1],s[i],s[i+1]));\n\t\tfor (int i=1;i<pos-1;i++)\n\t\t\tdivide(triangle(s[i],s[i+1],s[top]));\n\t}\n\tif (tot==1)//\u53ea\u6709\u4e00\u6bb5\uff0c\u8bf4\u660e\u51f8\u5305\u540c\u8272\n\t{\n\t\tpoint one;bool found=0;\n\t\tfor (int i=1;i<=n;i++)\n\t\t\tif (!incv[p[i].org]&&p[i].color^c)\n\t\t\t\t{one=p[i];found=1;break;} //\u627e\u4e2a\u5f02\u8272\u70b9\n\t\tif (found)\n\t\t{\n\t\t\tfor (int i=1;i<top;i++)\n\t\t\t\tdivide(triangle(s[i],s[i+1],one));\n\t\t\tdivide(triangle(s[top],s[1],one));\n\t\t}\n\t\telse //\u6ca1\u5f02\u8272\u70b9\u76f4\u63a5\u51fa\u751f\u6210\u6811\n\t\t{\n\t\t\tfor (int i=1;i<n;i++)\n\t\t\t\tfor (int j=i+1;j<=n;j++)\n\t\t\t\t\tif (find(i)^find(j))\n\t\t\t\t\t\tans[++cnt][0]=i-1,ans[cnt][1]=j-1,Union(i,j);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",cnt);\n\tfor (int i=1;i<=cnt;i++)\n\t\tprintf(\"%d %d\\n\",ans[i][0],ans[i][1]);\n\treturn 0;\n}\n```",
        "postTime": 1550163095,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1045E \u3010Ancient civilizations\u3011"
    },
    {
        "content": "\u51f8\u5305\u4e0e\u6784\u9020\u7ed3\u5408\u7684\u597d\u9898\u3002\n\n\u9996\u5148\u5efa\u51fa\u51f8\u5305\uff0c\u5982\u679c\u51f8\u5305\u4e0a\u9ed1\u767d\u8272\u7684\u6bb5\u6570 $\\ge 2$\uff0c\u90a3\u4e48\u663e\u7136\u4e0d\u53ef\u80fd\u5c06\u9ed1\u70b9\u3001\u767d\u70b9\u90fd\u8fde\u6210\u4e00\u68f5\u751f\u6210\u6811\uff0c\u76f4\u63a5\u8f93\u51fa `Impossible` \u5373\u53ef\u3002\n\n\u90a3\u4e48\u53ef\u4ee5\u8bc1\u660e\uff0c\u5bf9\u4e8e\u5269\u4f59\u60c5\u51b5\uff0c\u5fc5\u7136\u5b58\u5728\u5408\u6cd5\u7684\u8fde\u8fb9\u65b9\u6848\u3002\u5728\u63a2\u7a76\u5177\u4f53\u5982\u4f55\u5904\u7406\u5269\u4f59\u60c5\u51b5\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u8ba8\u8bba\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u8fdb\u800c\u5c06\u5176\u63a8\u5e7f\u5230\u4e00\u822c\u60c5\u51b5\uff1a\n\n- \u51f8\u5305\u4e0a\u53ea\u6709\u4e09\u4e2a\u70b9\uff0c\u5e76\u4e14\u6240\u6709\u70b9\uff08\u5305\u62ec\u51f8\u5305\u4e0a\u7684\u70b9\uff09\u989c\u8272\u90fd\u4e00\u6837\u3002\n\n  \u8fd9\u65f6\u5019\u6211\u4eec\u5148\u5c06\u51f8\u5305\u8fde\u6210\u4e00\u6761\u94fe\uff0c\u968f\u4fbf\u627e\u5230\u4e2d\u95f4\u4e00\u4e2a\u70b9\u5e76\u968f\u4fbf\u5c06\u5176\u4e0e\u51f8\u5305\u4e0a\u67d0\u4e2a\u70b9\u8fde\u8fb9\uff0c\u7136\u540e\u5c06\u6574\u4e2a\u4e09\u89d2\u5f62\u5206\u6210\u4e09\u4e2a\u5c0f\u4e09\u89d2\u5f62\u9012\u5f52\u5904\u7406\u5373\u53ef\u3002\u5bb9\u6613\u8bc1\u660e\u5176\u6b63\u786e\u6027\u3002\n\n- \u51f8\u5305\u4e0a\u53ea\u6709\u4e09\u4e2a\u70b9\uff0c\u5e76\u4e14\u6070\u6709\u4e24\u4e2a\u70b9\u989c\u8272\u76f8\u540c\u3002\n\n  \u4e0d\u59a8\u5047\u8bbe\u51f8\u5305\u4e0a\u6709\u4e24\u4e2a\u9ed1\u70b9 $A,B$ \u548c\u4e00\u4e2a\u767d\u70b9 $C$\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u5728 $A,B$ \u95f4\u8fde\u8fb9\uff0c\u8003\u8651\u51f8\u5305\u5185\u90e8\u7684\u70b9\uff0c\u5982\u679c\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u767d\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d6\u51fa\u8fd9\u4e2a\u767d\u70b9 $D$\uff0c\u7136\u540e\u8fde\u8fb9 $CD$\uff0c\u5e76\u5c06\u5176\u4f59\u70b9\u5206\u5230 $\\triangle ABD,\\triangle ACD,\\triangle BCD$ \u4e2d\u5904\u7406\u5373\u53ef\u3002\u5426\u5219\u6211\u4eec\u4efb\u53d6\u4e00\u4e2a\u9ed1\u70b9 $D$\uff0c\u8fde\u8fb9 $AD$\uff08\u6216 $BD$\uff09\uff0c\u7136\u540e\u8fd8\u662f\u9012\u5f52\u4e09\u4e2a\u4e09\u89d2\u5f62\u5373\u53ef\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4e09\u89d2\u5f62\u5185\u90e8\u65e2\u6709\u9ed1\u70b9\u53c8\u6709\u767d\u70b9\u65f6\uff0c\u4e0d\u80fd\u968f\u4fbf\u53d6\u4e00\u4e2a\u70b9\u800c\u5fc5\u987b\u5f3a\u8c03\u201c\u53d6\u4e00\u4e2a**\u767d\u70b9**\u201d\uff0c\u56e0\u4e3a\u5982\u679c\u53d6\u5230\u7684\u662f\u9ed1\u70b9 $D$\uff0c\u5e76\u4e14\u4e09\u89d2\u5f62 $ABD$ \u4e2d\u6709\u767d\u70b9 $E$\uff0c\u90a3\u4e48 $C,E$ \u5c06\u4e0d\u80fd\u8fde\u901a\u3002\n\n- \u51f8\u5305\u4e0a\u53ea\u6709\u4e09\u4e2a\u70b9\u3002\n\n  - \u5982\u679c\u6240\u6709\u70b9\u7684\u989c\u8272\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u6309\u7167\u4e0a\u9762\u7b2c\u4e00\u79cd\u60c5\u51b5\u5904\u7406\u5373\u53ef\u3002\n\n  - \u5982\u679c\u51f8\u5305\u4e0a\u6070\u6709\u4e24\u4e2a\u70b9\u989c\u8272\u76f8\u540c\uff0c\u90a3\u4e48\u6309\u7167\u4e0a\u9762\u7b2c\u4e8c\u79cd\u60c5\u51b5\u5904\u7406\u5373\u53ef\u3002\n\n  - \u5426\u5219\uff0c\u51f8\u5305\u4e0a\u4e09\u4e2a\u70b9\u989c\u8272\u76f8\u540c\uff0c\u4f46\u51f8\u5305\u5185\u90e8\u6709\u989c\u8272\u4e0d\u540c\u4e8e\u51f8\u5305\u4e0a\u4e09\u4e2a\u70b9\u7684\u70b9\uff0c\u6211\u4eec\u627e\u51fa\u8fd9\u6837\u7684\u70b9 $D$\uff0c\u5047\u8bbe\u51f8\u5305\u4e0a\u7684\u70b9\u4e3a $A,B,C$\uff0c\u90a3\u4e48\u6211\u4eec\u6309\u7167\u201c\u51f8\u5305\u4e0a\u53ea\u6709\u4e09\u4e2a\u70b9\u201d\u7684\u60c5\u51b5\u5904\u7406\u4e09\u4e2a\u4e09\u89d2\u5f62 $\\triangle ABD,\\triangle ACD,\\triangle BCD$ \u5373\u53ef\u3002\n\n  \u4e0b\u56fe\u662f\u4e0a\u9762\u7684\u7b97\u6cd5\u6d41\u7a0b\u7684\u4e00\u4e2a\u4f8b\u5b50\uff08\u5176\u4e2d\u5b9e\u7ebf\u8868\u793a\u8fde\u51fa\u7684\u8fb9\uff0c\u865a\u7ebf\u8868\u793a\u4e09\u89d2\u5256\u5206\u8fde\u51fa\u7684\u7ebf\uff0c\u7c89\u70b9\u3001\u7eff\u70b9\u8868\u793a\u4e24\u79cd\u989c\u8272\uff09\uff1a\n\n  ![](https://cdn.luogu.com.cn/upload/image_hosting/891tk6yr.png)\n\n  \u53bb\u6389\u865a\u7ebf\u4ee5\u540e\uff1a\n\n  ![](https://cdn.luogu.com.cn/upload/image_hosting/pfu6uguv.png)\n\n\u63a5\u4e0b\u6765\u8003\u8651\u539f\u9898\uff1a\n\n- \u5982\u679c\u6240\u6709\u70b9\u989c\u8272\u90fd\u4e00\u6837\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u5176\u4e09\u89d2\u5256\u5206\u6210\u82e5\u5e72\u4e2a\u4e09\u89d2\u5f62\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u4e09\u89d2\u5f62\u5206\u522b\u8fdb\u884c\u4e0a\u9762\u7684\u60c5\u51b5\u4e09\u5373\u53ef\u3002\n- \u5982\u679c\u51f8\u5305\u4e0a\u6240\u6709\u70b9\u989c\u8272\u90fd\u4e00\u6837\uff0c\u4f46\u5185\u90e8\u5b58\u5728\u5f02\u8272\u70b9\uff0c\u6211\u4eec\u4efb\u53d6\u4e00\u5f02\u8272\u70b9\uff0c\u5c06\u5176\u4e0e\u51f8\u5305\u6240\u6709\u9876\u70b9\u76f8\u8fde\u5f62\u6210 $n$ \u4e2a\u4e09\u89d2\u5f62\uff0c\u5bf9\u6bcf\u4e2a\u4e09\u89d2\u5f62\u5206\u522b\u8fdb\u884c\u4e0a\u9762\u7684\u60c5\u51b5\u4e8c\u5373\u53ef\u3002\n- \u5426\u5219\u5982\u679c\u51f8\u5305\u4e0a\u6070\u6709\u4e00\u4e2a\u70b9\u4e0e\u5176\u4ed6\u70b9\u989c\u8272\u4e0d\u540c\uff0c\u90a3\u4e48\u5047\u8bbe\u8fd9\u4e2a\u70b9\u4e3a\u767d\u8272\uff0c\u5176\u4ed6\u70b9\u4e3a\u9ed1\u8272\uff0c\u6211\u4eec\u5c31\u5728\u51f8\u5305\u5185\u90e8\u627e\u4e00\u4e2a\u767d\u70b9\u7136\u540e\u5c06\u8fd9\u4e2a\u70b9\u4e0e\u51f8\u5305\u9876\u70b9\u8fde\u8fb9\u5f62\u6210 $n$ \u4e2a\u4e09\u89d2\u5f62\u5206\u522b\u5904\u7406\uff0c\u5982\u679c\u51f8\u5305\u5185\u90e8\u6ca1\u6709\u767d\u70b9\u5c31\u6539\u627e\u4e00\u4e2a\u9ed1\u70b9\u5373\u53ef\u3002\n- \u5426\u5219\uff0c\u5047\u8bbe\u51f8\u5305\u4e0a $P_1\\sim P_k$ \u4e3a\u9ed1\u8272\uff0c$P_{k+1}\\sim P_m$ \u4e3a\u767d\u8272\uff0c\u6211\u4eec\u5c31\u5c06\u8fd9\u4e2a\u4e09\u89d2\u5f62\u5256\u6210 $P_1P_2\\cdots P_kP_{k+1}$ \u548c $P_{k+1}P_{k+2}\\cdots P_{m-1}P_m$ \u4e24\u4e2a\u591a\u8fb9\u5f62\u2014\u2014\u663e\u7136\u8fd9\u4e24\u4e2a\u591a\u8fb9\u5f62\u4e0a\u90fd\u6070\u6709\u4e00\u4e2a\u70b9\u4e0e\u5176\u4ed6\u70b9\u989c\u8272\u4e0d\u540c\uff0c\u5206\u522b\u5904\u7406\u8fd9\u4e24\u4e2a\u591a\u8fb9\u5f62\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $n^2$\u3002\n\n```cpp\nconst int MAXN = 1000;\nint n;\nstruct point {\n\tint x, y;\n\tpoint() {x = y = 0;}\n\tpoint(int _x, int _y) {x = _x; y = _y;}\n\tpoint operator + (const point &rhs) {return point(x + rhs.x, y + rhs.y);}\n\tpoint operator - (const point &rhs) {return point(x - rhs.x, y - rhs.y);}\n\tll operator | (const point &rhs) {return 1ll * x * rhs.y - 1ll * y * rhs.x;}\n\tll operator ^ (const point &rhs) {return 1ll * x * rhs.x + 1ll * y * rhs.y;}\n};\nstruct dat {point p; int col, id;} a[MAXN + 5];\nbool cmp(dat A, dat B) {return (A.p.x ^ B.p.x) ? (A.p.x < B.p.x) : (A.p.y < B.p.y);}\nll area(point A, point B, point C) {return abs((B - A) | (C - A));}\nstruct tri {\n\tint A, B, C;\n\ttri() {A = B = C = 0;}\n\ttri(int _A = 0, int _B = 0, int _C = 0): A(_A), B(_B), C(_C) {}\n\tbool in(int id) {\n\t\treturn area(a[A].p, a[B].p, a[id].p) + area(a[A].p, a[C].p, a[id].p) +\n\t\t\t   area(a[B].p, a[C].p, a[id].p) == area(a[A].p, a[B].p, a[C].p);\n\t}\n\tint gettyp() {\n\t\tif (a[A].col == a[B].col && a[B].col == a[C].col) return -1;\n\t\tstatic int cnt[2]; fill0(cnt);\n\t\tcnt[a[A].col]++; cnt[a[B].col]++; cnt[a[C].col]++;\n\t\treturn (cnt[1] > cnt[0]);\n\t}\n};\nstruct convex {\n\tvector<int> vec; // in counter-clockwise direction\n\tbool in(int x) {\n\t\tfor (int i = 2; i < vec.size(); i++) if (tri(vec[0], vec[i - 1], vec[i]).in(x))\n\t\t\treturn 1;\n\t\treturn 0;\n\t}\n} H;\nbool on[MAXN + 5]; int f[MAXN + 5]; vector<pii> res;\nint find(int x) {return (!f[x]) ? x : f[x] = find(f[x]);}\nvoid con(int x, int y) {\n\tassert(a[x].col == a[y].col);\n\tint fx = find(x), fy = find(y);\n\tif (fx != fy) {\n\t\tf[fx] = fy;\n\t\tres.pb(mp(a[x].id - 1, a[y].id - 1));\n\t} else cerr << \"!!!\\n\";\n}\nvoid solve_tri(tri A, vector<int> pt) {\n\tif (pt.empty()) return; int id = pt[0];\n//\tprintf(\"solve:\"); for (int x : pt) printf(\" %d\", x); printf(\"\\n\");\n\tif (~A.gettyp()) {\n\t\tfor (int x : pt) if (a[x].col == (A.gettyp() ^ 1))\n\t\t\tid = x;\n\t}\n\tif (a[A.A].col == a[id].col) con(A.A, id);\n\telse if (a[A.B].col == a[id].col) con(A.B, id);\n\telse if (a[A.C].col == a[id].col) con(A.C, id);\n\telse exit(-1);\n\tvector<int> vec1, vec2, vec3;\n\tfor (int x : pt) if (x != id) {\n\t\tif (tri(A.A, A.B, id).in(x)) vec1.pb(x);\n\t\telse if (tri(A.B, A.C, id).in(x)) vec2.pb(x);\n\t\telse if (tri(A.C, A.A, id).in(x)) vec3.pb(x);\n\t}\n\tsolve_tri(tri(A.A, A.B, id), vec1);\n\tsolve_tri(tri(A.B, A.C, id), vec2);\n\tsolve_tri(tri(A.C, A.A, id), vec3);\n}\nvoid solve_hull(convex h, vector<int> pt) {\n\tif (pt.empty()) return;\n\tstatic int cnt[2]; fill0(cnt);\n\tfor (int i = 0; i < h.vec.size(); i++) cnt[a[h.vec[i]].col]++;\n\tint C = (cnt[0] == 1) ? 0 : 1, id = pt[0];\n\tfor (int x : pt) if (a[x].col == C) id = x;\n\tfor (int x : h.vec) if (a[x].col == a[id].col) {con(x, id); break;}\n//\tprintf(\"! %d %d\\n\", C, id);\n//\tfor (int x : pt) printf(\"%d \", x); printf(\"\\n\");\n\tstatic vector<int> bel[MAXN + 5];\n\tfor (int i = 0; i < h.vec.size(); i++) bel[i].clear();\n\tfor (int x : pt) if (x != id) {\n\t\tfor (int j = 0; j < h.vec.size(); j++)\n\t\t\tif (tri(h.vec[j], h.vec[(j + 1) % h.vec.size()], id).in(x))\n\t\t\t\tbel[j].pb(x);\n\t}\n\tfor (int i = 0; i < h.vec.size(); i++)\n\t\tsolve_tri(tri(h.vec[i], h.vec[(i + 1) % h.vec.size()], id), bel[i]);\n}\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++) scanf(\"%d%d%d\", &a[i].p.x, &a[i].p.y, &a[i].col), a[i].id = i;\n\tsort(a + 1, a + n + 1, cmp); static int stk[MAXN + 5]; int tp = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t\twhile (tp > 1 && ((a[stk[tp - 1]].p - a[stk[tp]].p) | (a[i].p - a[stk[tp]].p)) >= 0) --tp;\n\t\tstk[++tp] = i;\n\t}\n\tfor (int i = 1; i <= tp; i++) H.vec.pb(stk[i]);\n\tfor (int i = 1; i <= n; i++) {\n\t\twhile (tp > 1 && ((a[stk[tp - 1]].p - a[stk[tp]].p) | (a[i].p - a[stk[tp]].p)) <= 0) --tp;\n\t\tstk[++tp] = i;\n\t}\n\tfor (int i = tp - 1; i > 1; i--) H.vec.pb(stk[i]);\n\tfor (int id : H.vec) on[id] = 1;\n\tint pos = -1, cnt = 0;\n\tfor (int i = 0; i < H.vec.size(); i++) if (a[H.vec[i]].col != a[H.vec[(i + 1) % H.vec.size()]].col)\n\t\tpos = (i + 1) % H.vec.size(), cnt++;\n\tif (cnt >= 4) return puts(\"Impossible\"), 0;\n\tfor (int i = 0; i < H.vec.size(); i++) if (a[H.vec[i]].col == a[H.vec[(i + 1) % H.vec.size()]].col)\n\t\tcon(H.vec[i], H.vec[(i + 1) % H.vec.size()]);\n\tif (!~pos) {\n\t\tint id = -1;\n\t\tfor (int i = 1; i <= n; i++) if (!on[i] && a[i].col != a[H.vec[0]].col)\n\t\t\tid = i;\n\t\tif (!~id) {\n\t\t\tstatic vector<int> bel[MAXN + 5];\n\t\t\tfor (int i = 1; i <= n; i++) if (!on[i]) {\n\t\t\t\tfor (int j = 2; j < H.vec.size(); j++)\n\t\t\t\t\tif (tri(H.vec[j - 1], H.vec[j], H.vec[0]).in(i))\n\t\t\t\t\t\tbel[j].pb(i);\n\t\t\t}\n\t\t\tfor (int j = 2; j < H.vec.size(); j++)\n\t\t\t\tsolve_tri(tri(H.vec[j - 1], H.vec[j], H.vec[0]), bel[j]);\n\t\t} else {\n\t\t\tstatic vector<int> bel[MAXN + 5];\n\t\t\tfor (int i = 1; i <= n; i++) if (!on[i] && i != id) {\n\t\t\t\tfor (int j = 0; j < H.vec.size(); j++)\n\t\t\t\t\tif (tri(H.vec[j], H.vec[(j + 1) % H.vec.size()], id).in(i))\n\t\t\t\t\t\tbel[j].pb(i);\n\t\t\t}\n\t\t\tfor (int j = 0; j < H.vec.size(); j++)\n\t\t\t\tsolve_tri(tri(H.vec[j], H.vec[(j + 1) % H.vec.size()], id), bel[j]);\n\t\t}\n\t} else {\n\t\tint L = pos, R = pos;\n\t\twhile (a[H.vec[R]].col == a[H.vec[L]].col) R = (R + 1) % H.vec.size();\n\t\tif (R == (L + 1) % H.vec.size() || L == (R + 1) % H.vec.size()) {\n\t\t\tvector<int> vec;\n\t\t\tfor (int i = 1; i <= n; i++) if (!on[i]) vec.pb(i);\n\t\t\tsolve_hull(H, vec);\n\t\t} else {\n\t\t\tconvex H1, H2;\n\t\t\tfor (int i = L; i != (R + 1) % H.vec.size(); i = (i + 1) % H.vec.size())\n\t\t\t\tH1.vec.pb(H.vec[i]);\n\t\t\tfor (int i = R; i != (L + 1) % H.vec.size(); i = (i + 1) % H.vec.size())\n\t\t\t\tH2.vec.pb(H.vec[i]);\n\t\t\tvector<int> vec1, vec2;\n\t\t\tfor (int i = 1; i <= n; i++) if (!on[i]) {\n\t\t\t\tif (H1.in(i)) vec1.pb(i);\n\t\t\t\telse vec2.pb(i);\n\t\t\t}\n\t\t\tsolve_hull(H1, vec1); solve_hull(H2, vec2);\n\t\t}\n\t}\n\tprintf(\"%d\\n\", res.size());\n\tfor (pii p : res) printf(\"%d %d\\n\", p.fi, p.se);\n\treturn 0;\n}\n/*\n11\n0 0 0\n0 10000 0\n10000 0 1\n10000 10000 0\n5001 4994 0\n2499 2501 0\n7503 7499 0\n4010 5995 0\n6011 3987 0\n1015 5003 0\n5043 5007 0\n*/\n```",
        "postTime": 1645367912,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1045E Ancient civilizations"
    }
]