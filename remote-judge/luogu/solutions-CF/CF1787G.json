[
    {
        "content": "CF1787G\uff0c~~\u5728\u7269\u7406\u671f\u672b\u8003\u8bd5\u524d\u7684\u8be1\u5f02\u81ea\u4e60\u91cc\u641e\u51fa\u6765\u4e86~~\u3002  \n\n***\n\n\u867d\u7136\u8bf4\u4f60\u5bf9\u6bcf\u4e2a\u989c\u8272\u90fd\u5efa\u865a\u6811\u7a7a\u95f4\u662f $O(n)$ \u7684\uff0c\u4f46\u662f\u5206\u5f00\u7ef4\u62a4\u6ca1\u6709\u51fa\u8def\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e00\u4e2a\u70b9\u8fde\u51fa\u7684\u989c\u8272\u6570\u662f $O(n)$ \u7684\u3002\u8003\u8651\u4e00\u6735\u83ca\u82b1\uff0c\u53cd\u590d\u64cd\u4f5c\u83ca\u82b1\u7684\u6839\u5c31\u53ef\u4ee5\u4f7f\u5f97\u6bcf\u6b21\u8981\u4fee\u6539 $O(n)$ \u68f5\u865a\u6811\u7684\u503c\u3002  \n\n\u90a3\u4e48\u8003\u8651\u5c31\u653e\u5728\u8fd9\u68f5\u6811\u4e0a\u7ef4\u62a4\u3002\uff08\u7531\u4e8e\u6467\u6bc1\u548c\u4fee\u590d\u662f\u540c\u7406\u7684\u6240\u4ee5\u4e0b\u6587\u53ea\u8003\u8651\u6467\u6bc1\uff09  \n\n\u663e\u7136\u6240\u6709\u597d\u8def\u5f84\u90fd\u662f\u6811\u94fe\uff0c\u6467\u6bc1\u4e00\u4e2a\u70b9 $u$ \u4f1a\u5f71\u54cd\u7684\u8def\u5f84\u5c31\u81ea\u7136\u5730\u5206\u4e3a\u4e24\u79cd\uff1a\u4ee5 $u$ \u4e3a\u6839\u7684\u94fe \u548c \u6839\u662f $u$ \u7684\u7956\u5148\u7684\u94fe\u3002  \n\n\u6ce8\u610f\u5230\u7b2c\u4e8c\u79cd\u81f3\u591a\u53ea\u6709\u4e00\u6761\uff08\u6bcf\u4e2a\u70b9\u8fde\u5411\u7236\u4eb2\u7684\u989c\u8272\u552f\u4e00\uff09\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u6761\u94fe\u53ef\u4ee5\u7b80\u5355\u5730\u7ef4\u62a4\u6709\u591a\u5c11\u70b9\u88ab\u6467\u6bc1\u4ece\u800c\u5224\u65ad\u5b83\u662f\u5426\u4ea7\u751f\u8d21\u732e\uff0c\u800c\u4e0d\u9700\u8981\u77e5\u9053\u5177\u4f53\u54ea\u4e9b\u70b9\u88ab\u6467\u6bc1\u3002  \n\n\u73b0\u5728\u52a0\u4e0a\u7b2c\u4e00\u79cd\u94fe\uff0c\u5bf9\u5e94\u64cd\u4f5c\u5c31\u662f\u53d6\u6d88\u6240\u6709\u4ee5 $u$ \u4e3a\u6839\u7684\u94fe\u7684\u8d21\u732e\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u628a\u6bcf\u6761\u94fe\u90fd\u6302\u5728\u5b83\u7684\u6839\u5904\uff0c\u4f7f\u7528\u5355\u70b9\u4fee\u6539\u3001\u6c42\u5168\u5c40\u6700\u5927\u503c\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4ee5\u652f\u6301\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u94fe\u7684\u4fee\u6539\uff0c\u518d\u5728\u5916\u9762\u4f7f\u7528\u53e6\u4e00\u4e2a\u540c\u6837\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u6240\u6709 \u6302\u4e86\u94fe\u7684\u672a\u88ab\u6467\u6bc1\u7684\u70b9\uff0c\u5176\u62e5\u6709\u7684\u94fe\u7684\u6700\u5927\u503c \u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u5c31\u505a\u5b8c\u4e86\u3002  \n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u6811\u6216\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+q) \\log n)$\uff0c\u7a7a\u95f4 $O(n)$ \u6216 $O(n \\log n)$\u3002  \n\n\u5b9e\u9645\u4e0a\u7ebf\u6bb5\u6811\u90e8\u5206\u53ea\u9700\u8981\u5199 $8$ \u884c\uff08\u3002  \n\u53e6\u5916\uff0c\u6ce8\u610f\u627e\u51fa\u6bcf\u79cd\u989c\u8272\u7684\u94fe\u957f\u548c\u6839\u65f6\u4e0d\u8981\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\uff0c\u4f7f\u7528 `vector` \u5c06\u6240\u6709\u8fb9\u6309\u989c\u8272\u6392\u5e8f\u53ef\u4ee5\u505a\u5230 $O(n \\log n)$\u3002  \n\n\n```cpp\nconst int N = 200003, oo = 2e9;\nint n,q,head[N],cntr,dep[N],lca[N];\nint fir[N],cnt[N],col[N],siz[N]; bool S[N]; ll len[N];\nstruct Node{\n\tint to,w,c;\n\tinline bool operator <(const Node &a) const{ return c==a.c?w<a.w:c<a.c; }\n}; vector<Node> e[N];\n#define all(x) x.begin(),x.end()\n\ninline void DFS(int u,int fa){\n\tdep[u]=dep[fa]+1,sort(all(e[u]));\n\t(u!=1&&dep[fir[col[u]]]<dep[u])&&(fir[col[u]]=u);\n\tfor(auto t:e[u]){\n\t\tint v=t.to; if(v==fa) continue;\n\t\t(dep[fir[t.c]]<dep[v])&&(fir[t.c]=v),col[v]=t.c,DFS(v,u);\n\t}\n}\ninline void Get(int u,int fa,int c){\n\t(!lca[c]||dep[lca[c]]>dep[u])&&(lca[c]=u),++siz[c];\n\tfor(auto it = upper_bound(all(e[u]),(Node){+oo,+oo,c-1}); it!=e[u].end()&&it->c==c; ++it)\n\t\tif(it->to!=fa){ int v=it->to; len[c]+=it->w,Get(v,u,c); break; }\n}\ntemplate<const int SIZ> struct SegTree{\n\tstruct Seg{ int lc,rc; ll val; }tr[SIZ]; int tot,root[N];\n\tinline void Push(int u){ tr[u].val=max(tr[tr[u].lc].val,tr[tr[u].rc].val); }\n\tinline void Mdf(int &u,int l,int r,int x,ll d){\n\t\tif(!u) u=++tot; if(l==r){ tr[u].val=d; return; } int mid=l+r>>1;\n\t\tx<=mid?Mdf(tr[u].lc,l,mid,x,d):Mdf(tr[u].rc,mid+1,r,x,d); Push(u);\n\t}\n}; SegTree<N*20> t; SegTree<N<<1> T;\n\nauto Lock = [](int u){\n\tT.Mdf(T.root[0],1,n,u,0);\n\tif(u==1) return; --siz[col[u]];\n\tif(lca[col[u]]&&siz[col[u]]==cnt[col[u]]-1){\n\t\tint LCA = lca[col[u]];\n\t\tt.Mdf(t.root[LCA],1,n,col[u],0);\n\t\tif(S[LCA]) T.Mdf(T.root[0],1,n,LCA,t.tr[t.root[LCA]].val);\n\t}\n};\nauto Unlock = [](int u){\n\tT.Mdf(T.root[0],1,n,u,t.tr[t.root[u]].val);\n\tif(u==1) return; ++siz[col[u]];\n\tif(lca[col[u]]&&siz[col[u]]==cnt[col[u]]){\n\t\tint LCA = lca[col[u]];\n\t\tt.Mdf(t.root[LCA],1,n,col[u],len[col[u]]);\n\t\tif(S[LCA]) T.Mdf(T.root[0],1,n,LCA,t.tr[t.root[LCA]].val);\n\t}\n};\n\nmain(){\n\trd(n),rd(q),fill(S+1,S+n+1,1);\n\tfor(int i=1,u,v,w,c;i<n;++i)\n\t\trd(u),rd(v),rd(w),rd(c),e[u].push_back({v,w,c}),e[v].push_back({u,w,c}),++cnt[c];\n\tfor(int i=1;i<=n;++i) if(cnt[i]) ++cnt[i];\n\tDFS(1,0);\n\tfor(int i=1;i<=n;++i) if(fir[i]){\n\t\tGet(fir[i],0,i); if(siz[i]!=cnt[i]){ len[i]=lca[i]=-1; continue; }\n\t\tt.Mdf(t.root[lca[i]],1,n,i,len[i]);\n\t}\n\tfor(int i=1;i<=n;++i) if(t.root[i])\n\t\tT.Mdf(T.root[0],1,n,i,t.tr[t.root[i]].val);\n\twhile(q--){\n\t\tint p,x; rd(p),rd(x),S[x]^=1;\n\t\tp?Unlock(x):Lock(x); writeln(T.tr[T.root[0]].val);\n\t}\n}\n```",
        "postTime": 1676630141,
        "uid": 538609,
        "name": "Neutralized",
        "ccfLevel": 7,
        "title": "\u5fc3\u5728\u8df3\uff0c\u4e0d\u662f\u767d\u8c61\u7684\u6211\u4e0d\u8df3\u3002"
    },
    {
        "content": "\u9898\u610f\uff1a\n\n\u5b9a\u4e49\u4e00\u6761\u8def\u5f84\u4e3a\u597d\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a\n\n1\u3001\u6240\u6709\u8fb9\u540c\u8272\u3002\n\n2\u3001\u6240\u6709\u70b9\u5747\u6ca1\u6709\u88ab\u9501\u3002\n\n3\u3001\u5305\u542b\u4e86\u8fd9\u79cd\u989c\u8272\u7684\u6240\u6709\u8fb9\u3002\n\n\u5b9a\u4e49\u4e00\u6761\u8def\u5f84\u7684\u6743\u503c\u4e3a\u8fb9\u6743\u4e4b\u548c\u3002\n\n\u73b0\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6709\u591a\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u9501\u6216\u89e3\u9501\u4e00\u4e2a\u70b9\uff0c\u4f60\u9700\u8981\u6c42\u51fa\u6700\u5927\u7684\u597d\u8def\u5f84\u7684\u6743\u503c\uff0c\u82e5\u4e0d\u5b58\u5728\u8f93\u51fa $0$\u3002\n\n\u9898\u89e3\uff1a\n\n\u5148\u6c42\u51fa\u6240\u6709\u597d\u7684\u8def\u5f84\uff0c\u76f4\u63a5\u628a\u4e00\u79cd\u989c\u8272\u7684\u8fb9\u6293\u51fa\u6765\uff0c\u5224 $deg$ \u662f\u5426\u5168\u90e8\u4e0d\u8d85\u8fc7 $2$\uff0c\u518d\u770b $deg = 1$ \u7684\u662f\u5426\u6070\u4e3a\u4e24\u4e2a\u5373\u53ef\u3002\n\n\u7136\u540e\u8003\u8651\u4fee\u6539\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u8bf4\u8981\u53bb\u4fee\u6539\u6bcf\u4e00\u6761\u597d\u8def\u5f84\u7684\u72b6\u6001\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f $O(n ^ 2)$ \u7684\uff0c\u663e\u7136\u4e0d\u884c\u3002\n\n\u4e8e\u662f\u8003\u8651\u5c06\u8def\u5f84\u6302\u5230\u70b9\u4e0a\uff0c\u7528 ```set``` \u7ef4\u62a4\uff0c\u6bcf\u6b21\u4fee\u6539\u4e00\u4e2a\u70b9\u5c31\u5c06\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u8d4b\u4e3a $0$ \u6216 ```set``` \u4e2d\u7684\u6700\u5927\u503c\uff0c\u4f46\u662f\u8fd9\u4e5f\u662f $O(n ^ 2)$ \u7684\uff0c\u56e0\u4e3a\u8981\u4fee\u6539\u6bcf\u4e2a\u70b9\u7684\u72b6\u6001\u3002\n\n\u90a3\u6211\u4eec\u601d\u8003\uff0c\u80fd\u4e0d\u80fd\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u53ea\u7ef4\u62a4\u67d0\u4e9b\u7ecf\u8fc7\u5b83\u7684\u8def\u5f84\uff1f\n\n\u6ce8\u610f\u5230\uff0c\u4e00\u4e2a\u70b9\u5411\u4e0a\u7684\u8def\u5f84\u6700\u591a\u53ea\u6709\u4e00\u6761\uff0c\u4e8e\u662f\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7ef4\u62a4 $\\operatorname{lca} = x$ \u7684\u6240\u6709\u8def\u5f84\u3002\n\n\u90a3\u4e48\u4fee\u6539\u65f6\u53ea\u9700\u8981\u5c06\u672c\u8eab\u7684\u6743\u503c\u8bbe\u4e3a $0$ \u6216 ```set```\n\u4e2d\u7684\u6700\u5927\u503c\uff0c\u518d\u53bb\u4fee\u6539\u5f80\u4e0a\u7684\u8def\u5f84\u7684 $\\operatorname{lca}$ \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```\n#include <bits/stdc++.h>\n#define fi first\n#define se second\n\nusing i64 = long long;\nconstexpr int N = 2e5;\n\nstd::vector<std::pair<int, int>> adj[N + 5];\nint dep[N + 5], up[N + 5];\n\nstruct SegTree {\n\t#define ls(p) (p << 1)\n\t#define rs(p) (p << 1 | 1)\n\t#define mid (((l) + (r)) >> 1)\n\tstd::vector<i64> mx;\n\tSegTree() {}\n\tvoid init(int n) {\n\t\tmx.resize(4 * n);\n\t}\n\tSegTree(int n) {\n\t\tinit(n);\n\t}\n\tvoid change(int p, int l, int r, int k, int d) {\n\t\tif (l == r) {\n\t\t\tmx[p] = d;\n\t\t\treturn ;\n\t\t}\n\t\tif (k <= mid) change(ls(p), l, mid, k, d);\n\t\telse change(rs(p), mid + 1, r, k, d);\n\t\tmx[p] = std::max(mx[ls(p)], mx[rs(p)]);\n\t}\n};\n\nvoid dfs(int u, int fa) {\n\tfor (auto e : adj[u]) {\n\t\tint v = e.fi;\n\t\tif (v != fa) {\n\t\t\tdep[v] = dep[u] + 1, up[v] = e.se;\n\t\t\tdfs(v, u);\n\t\t}\n\t}\n}\n\nint main() {\n\tint n, m;\n\tstd::scanf(\"%d %d\", &n, &m);\n\tstd::vector<std::vector<int>> s(n);\n\tstd::vector<i64> len(n);\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tint x, y, z, c;\n\t\tstd::scanf(\"%d %d %d %d\", &x, &y, &z, &c);\n\t\t--x, --y, --c;\n\t\tadj[x].emplace_back(y, c);\n\t\tadj[y].emplace_back(x, c);\n\t\tlen[c] += z;\n\t\ts[c].emplace_back(x);\n\t\ts[c].emplace_back(y);\n\t}\n\tdfs(0, -1);\n\tstd::vector<int> deg(n), node(n, -1);\n\tstd::vector<std::multiset<i64>> mx(n);\n\tSegTree t(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tint ok = 1, cnt = 0;\n\t\tfor (auto x : s[i]) {\n\t\t\t++deg[x];\n\t\t\tok &= deg[x] <= 2;\n\t\t}\n\t\tfor (auto x : s[i]) cnt += deg[x] == 1;\n\t\tif (ok && cnt == 2) {\n\t\t\tint lca = s[i][0];\n\t\t\tfor (auto x : s[i]) {\n\t\t\t\tif (dep[x] < dep[lca]) lca = x;\n\t\t\t}\n\t\t\tmx[lca].insert(len[i]);\n\t\t\tt.change(1, 0, n - 1, lca, *mx[lca].rbegin());\n\t\t\tnode[i] = lca;\n\t\t}\n\t\tfor (auto x : s[i]) --deg[x];\n\t}\n\tstd::vector<int> sum(n), block(n);\n\twhile (m--) {\n\t\tint op, x;\n\t\tstd::scanf(\"%d %d\", &op, &x);\n\t\t--x;\n\t\tif (op == 0) {\n\t\t\tt.change(1, 0, n - 1, x, 0);\n\t\t\tblock[x] = 1;\n\t\t\tif (x && node[up[x]] != -1) {\n\t\t\t\tint c = up[x];\n\t\t\t\t++sum[c];\n\t\t\t\tif (sum[c] == 1) {\n\t\t\t\t\tint u = node[c];\n\t\t\t\t\tmx[u].erase(mx[u].find(len[c]));\n\t\t\t\t\tif (!block[u]) {\n\t\t\t\t\t\tt.change(1, 0, n - 1, u, mx[u].empty() | block[u] ? 0 : *mx[u].rbegin());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tt.change(1, 0, n - 1, x, mx[x].empty() ? 0 : *mx[x].rbegin());\n\t\t\tblock[x] = 0;\n\t\t\tif (x && node[up[x]] != -1) {\n\t\t\t\tint c = up[x];\n\t\t\t\t--sum[c];\n\t\t\t\tif (sum[c] == 0) {\n\t\t\t\t\tint u = node[c];\n\t\t\t\t\tmx[u].insert(len[c]);\n\t\t\t\t\tt.change(1, 0, n - 1, u, mx[u].empty() | block[u] ? 0 : *mx[u].rbegin());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstd::printf(\"%d\\n\", t.mx[1]);\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1675430786,
        "uid": 201278,
        "name": "xianggl",
        "ccfLevel": 0,
        "title": "CF1787G \u9898\u89e3"
    },
    {
        "content": "\u5927\u5bb6\u597d\u554a\uff0c\u8fd9\u91cc\u53c8\u662f\u66f4\u52a3\u4e14\u66f4\u96be\u5199\u7684 $O(n \\log ^ 2 n)$ \u505a\u6cd5\u3002\n\n#### \u9898\u610f\n\n\u4e00\u9897 $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u8fb9\u6709\u957f\u5ea6\u4e14\u6709\u989c\u8272\uff0c\u4e00\u6761\u597d\u7684\u8def\u5f84\u5b9a\u4e49\u4e3a\u4e00\u6761\u4ec5\u5305\u542b\u4e00\u79cd\u989c\u8272 $c$\uff0c\u4e14\u5305\u542b\u4e86\u6240\u6709\u989c\u8272\u4e3a $c$ \u7684\u8fb9\u7684\u7b80\u5355\u8def\u5f84\uff0c\u540c\u65f6\u8981\u6c42\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u672a\u88ab\u6467\u6bc1\u3002\n\n$m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6467\u6bc1\u6216\u4fee\u590d\u4e00\u4e2a\u70b9\uff0c\u4fee\u6539\u540e\u6c42\u6240\u6709\u597d\u7684\u8def\u5f84\u7684\u957f\u5ea6\u6700\u5927\u503c\u3002\n\n#### \u9898\u89e3\n\n\u9996\u5148\u4e00\u79cd\u989c\u8272\u81f3\u591a\u5bf9\u5e94\u4e00\u6761\u53ef\u80fd\u597d\u7684\u8def\u5f84\uff0c\u8fd9\u662f\u5bb9\u6613\u6c42\u7684\u3002\u7b80\u5355\u601d\u8003\u53d1\u73b0\u8fd9\u4e9b\u8def\u5f84\u597d\u50cf\u53ea\u80fd\u5728\u70b9\u4e0a\u76f8\u4ea4\uff0c\u800c\u4e14\u6574\u4f53\u4e0a\u7531\u4e8e\u6811\u7684\u9650\u5236\u4e0d\u4f1a\u5448\u73b0\u8fc7\u4e8e\u590d\u6742\u7684\u7ed3\u6784\u3002\u8003\u8651\u5efa\u4e00\u4e2a\u65b0\u56fe\uff0c\u7b2c $i$ \u4e2a\u70b9\u5bf9\u5e94\u539f\u56fe\u4e0a\u989c\u8272\u4e3a $i$ \u7684\u597d\u8def\u5f84\u3002\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u989c\u8272\u4e3a $a_1, a_2 ,\\dots , a_k$ \u7684\u597d\u8def\u5f84\u7ecf\u8fc7\uff0c\u90a3\u4e48\u8fde\u63a5 $(a_1, a_2), (a_2, a_3), \\dots, (a_{k - 1}, a_k)$\uff0c\u90a3\u4e48\u6700\u540e\u6574\u5f20\u65b0\u56fe\u4e5f\u5fc5\u7136\u662f\u4e00\u68f5\u6811\uff08\u6216\u68ee\u6797\uff09\uff0c\u5426\u5219\u53ef\u4ee5\u63a8\u51fa\u539f\u56fe\u6709\u73af\u3002\n\n\u6b64\u65f6\u8003\u8651\u4e00\u4e2a\u70b9\u7684\u6467\u6bc1\u4e0e\u4fee\u590d\u5e26\u6765\u4e86\u4ec0\u4e48\uff0c\u76f8\u5f53\u4e8e\u628a $a_1 - a_2 - a_3 - \\dots - a_k$ \u8fd9\u6761\u94fe\u7ed9\u6467\u6bc1\u6216\u4fee\u590d\u4e86\u4e00\u6b21\u3002\u4ee4 $v_i$ \u8868\u793a\u4e00\u4e2a\u70b9\u88ab\u6467\u6bc1\u7684\u6b21\u6570\uff0c\u90a3\u4e48\u4e00\u6761\u94fe\u8fd8\u6d3b\u7740\u7b49\u4ef7\u4e8e $v_i = 0$\uff0c\u6467\u6bc1\u548c\u4fee\u590d\u64cd\u4f5c\u5bf9\u5e94\u94fe\u4e0a\u6743\u503c\u52a0 $1$ \u6216\u51cf $1$\u3002\n\n\u6ce8\u610f\u5230 $v_i \\geqslant 0$\uff0c\u56e0\u6b64\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u76f4\u63a5\u7ef4\u62a4\u8fd9\u79cd\u4fe1\u606f\u7684\u3002\u7c7b\u4f3c\u626b\u63cf\u7ebf\u6c42\u77e9\u5f62\u9762\u79ef\u5e76\uff0c\u5728\u7ebf\u6bb5\u6811\u8282\u70b9 $x$ \u4e2d\u4ee4 $mn_x$ \u8868\u793a\u5bf9\u5e94\u533a\u95f4\u7684 $v_i$ \u6700\u5c0f\u503c\uff0c$mx_x$ \u8868\u793a\u5728\u90a3\u4e9b $v_i$ \u53d6\u6700\u5c0f\u503c\u7684\u5730\u65b9\u8def\u5f84\u957f\u5ea6\u7684\u6700\u5927\u503c\uff0c\u518d\u5f00\u4e00\u4e2a $lz_x$ \u7528\u6765\u5b9e\u73b0\u533a\u95f4\u52a0\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u901a\u8fc7\u91cd\u94fe\u5256\u5206\u628a\u94fe\u62c6\u6210 $O(\\log n)$ \u6bb5\u533a\u95f4\u5373\u53ef\u505a\u5230 $O(n \\log ^ 2 n)$ \u7684\u590d\u6742\u5ea6\uff0c\u5e94\u7528\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u6216\u8005 LCT \u5e94\u8be5\u80fd\u505a\u5230 $O(n \\log n)$\uff0c\u4f46\u662f\u6811\u5256\u5df2\u7ecf\u591f\u96be\u5199\u4e86\u6240\u4ee5\u4e0d\u4f1a\u6709\u4eba\u5c1d\u8bd5\u7684\u5427\u3002\n\n#### \u4ee3\u7801\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\ntypedef long long ll;\nconst int N = 200005;\nint n, m;\nstruct edge\n{\n    int u, v, w, c;\n} e[N];\nint deg[N];\nstruct Edge\n{\n    int to, nxt;\n} E[N << 1];\nint head[N], tot;\ninline void add(int f, int t)\n{\n    E[++tot] = {t, head[f]}, head[f] = tot;\n    return;\n}\nbool vis[N];\nint st[N], col[N];\nll val[N];\nint fa[N], dep[N], siz[N], son[N], top[N], dfn[N], rks[N], tt;\nvoid dfs1(int x, int from)\n{\n    dep[x] = dep[fa[x] = from] + 1, siz[x] = 1;\n    for (int i = head[x];i;i = E[i].nxt)\n    {\n        int y = E[i].to;\n        if(y == from)\n            continue;\n        dfs1(y, x), siz[x] += siz[y], son[x] = siz[son[x]] >= siz[y] ? son[x] : y;\n    }\n    return;\n}\nvoid dfs2(int x, int tp)\n{\n    rks[dfn[x] = ++tt] = x, top[x] = tp;\n    if(son[x])\n        dfs2(son[x], tp);\n    for (int i = head[x];i;i = E[i].nxt)\n    {\n        int y = E[i].to;\n        if(y == son[x] || y == fa[x])\n            continue;\n        dfs2(y, y);\n    }\n    return;\n}\nstruct SgT\n{\n    struct node\n    {\n        int mn, lz;\n        ll mx;\n    } t[N << 2];\n    inline int ls(int x)\n    {\n        return x << 1;\n    }\n    inline int rs(int x)\n    {\n        return x << 1 | 1;\n    }\n    inline void pushup(int x)\n    {\n        t[x].mn = std::min(t[ls(x)].mn, t[rs(x)].mn);\n        if(t[ls(x)].mn == t[rs(x)].mn)\n            t[x].mx = std::max(t[ls(x)].mx, t[rs(x)].mx);\n        else\n            t[x].mx = t[ls(x)].mn < t[rs(x)].mn ? t[ls(x)].mx : t[rs(x)].mx;\n        return;\n    }\n    inline void modify(int x, int v)\n    {\n        t[x].mn += v, t[x].lz += v;\n        return;\n    }\n    inline void pushdown(int x)\n    {\n        if(t[x].lz)\n            modify(ls(x), t[x].lz), modify(rs(x), t[x].lz), t[x].lz = 0;\n        return;\n    }\n    void build(int x, int l, int r)\n    {\n        if(l == r)\n            return t[x].mn = 0, t[x].mx = val[rks[l]], void(0);\n        int mid = (l + r) >> 1;\n        build(ls(x), l, mid), build(rs(x), mid + 1, r), pushup(x);\n        return;\n    }\n    void update(int x, int l, int r, int ql, int qr, int v)\n    {\n        if(l >= ql && r <= qr)\n            return modify(x, v), void(0);\n        pushdown(x);\n        int mid = (l + r) >> 1;\n        if(ql <= mid)\n            update(ls(x), l, mid, ql, qr, v);\n        if(qr > mid)\n            update(rs(x), mid + 1, r, ql, qr, v);\n        pushup(x);\n        return;\n    }\n    inline ll query(void)\n    {\n        return t[1].mn == 0 ? t[1].mx : 0ll;\n    }\n} T;\ninline void update(int x, int y, int v)\n{\n    while(top[x] != top[y])\n    {\n        if(dep[top[x]] < dep[top[y]])\n            std::swap(x, y);\n        T.update(1, 1, tt, dfn[top[x]], dfn[x], v), x = fa[top[x]];\n    }\n    if(dep[x] < dep[y])\n        std::swap(x, y);\n    T.update(1, 1, tt, dfn[y], dfn[x], v);\n    return;\n}\nint main(void)\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i < n;++i)\n        scanf(\"%d%d%d%d\", &e[i].u, &e[i].v, &e[i].w, &e[i].c), add(e[i].u, e[i].v), add(e[i].v, e[i].u);\n    std::sort(e + 1, e + n, [](edge a, edge b) -> bool\n              { return a.c < b.c; });\n    dfs1(1, 0);\n    memset(head, 0, sizeof(head)), tot = 0;\n    for (int l = 1, r; l < n; l = r) // \u8fd9\u662f\u5728\u627e\u51fa\u597d\u7684\u8def\u5f84\n    {\n        r = l;\n        while(r < n && e[r].c == e[l].c)\n            ++deg[e[r].u], ++deg[e[r].v], val[e[l].c] += e[r].w, ++r;\n        bool flag = 1;\n        std::vector<int> vec;\n        for (int i = l; i < r; ++i)\n        {\n            if(deg[e[i].u] == 1)\n                vec.push_back(e[i].u);\n            if(deg[e[i].v] == 1)\n                vec.push_back(e[i].v);\n            if (vec.size() > 2u)\n            {\n                flag = 0;\n                break;\n            }\n        }\n        for (int i = l; i < r;++i)\n            --deg[e[i].u], --deg[e[i].v];\n        if (flag)\n        {\n            int rt = e[l].c, u = vec[0], v = vec[1];\n            vis[rt] = 1;\n            while (1)\n            {\n                if (dep[u] < dep[v])\n                    std::swap(u, v);\n                if (col[u])\n                    add(rt, col[u]), add(col[u], rt), col[u] = rt;\n                else\n                    st[u] = col[u] = rt;\n                if(u == v)\n                    break;\n                u = fa[u];\n            }\n        }\n    }\n    memset(fa, 0, sizeof(fa));\n    memset(son, 0, sizeof(son));\n    for (int i = 1; i <= n;++i)\n        if(vis[i] && !fa[i])\n            dfs1(i, 0), dfs2(i, i);\n    if(tt == 0)\n    {\n        for (int i = 1; i <= m;++i)\n            puts(\"0\");\n        return 0;\n    }\n    T.build(1, 1, tt);\n    for (int i = 1, op, x; i <= m;++i)\n    {\n        scanf(\"%d%d\", &op, &x);\n        if(st[x])\n            update(st[x], col[x], op ? -1 : 1);\n        printf(\"%lld\\n\", T.query());\n    }\n    return 0;\n}\n```\n\n\u8bf4\u53e5\u95f2\u8bdd\uff0c\u8fd9\u4efd\u5de8\u957f\u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u6211\u53ea\u8c03\u4e86\u4e0d\u5230\u4e24\u5206\u949f\u5c31\u4e00\u904d\u8fc7\u4e86\u3002",
        "postTime": 1675867456,
        "uid": 244204,
        "name": "namelessgugugu",
        "ccfLevel": 9,
        "title": "CF1787G \u9898\u89e3"
    },
    {
        "content": "\u9898\u76ee\u4e2d\u5173\u4e8e\u8def\u5f84\u7684\u9650\u5236\u7279\u522b\u5f3a\u3002\u5bb9\u6613\u53d1\u73b0\u6709\u81f3\u591a $n$ \u6761\u53ef\u80fd\u5408\u6cd5\u7684\u8def\u5f84\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u8003\u8651\u5bf9\u6bcf\u4e2a\u70b9\u6240\u5728\u7684\u5408\u6cd5\u8def\u5f84\u5b58\u8d77\u6765\uff0c\u8fd9\u6837\u770b\u4e0a\u53bb\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u770b\u4e0a\u53bb\u4e0d\u592a\u53ef\u505a\u3002\u6240\u4ee5\u8003\u8651\u4ece\u539f\u56fe\u662f\u4e2a\u6811\u5165\u624b\uff0c\u770b\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u597d\u7684\u6027\u8d28\u3002\n\n\u6211\u4eec\u5c06\u6240\u6709\u7684\u5408\u6cd5\u8def\u5f84\u5efa\u4e00\u4e2a\u70b9\uff0c\u539f\u672c\u7684\u70b9\u90fd\u5efa\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u4e0e\u6240\u6709\u5b83\u6240\u5728\u7684\u8def\u5f84\u5bf9\u5e94\u7684\u70b9\u8fde\u8fb9\u3002\n\n\u7136\u540e\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u4e8c\u5206\u56fe\u5b9e\u9645\u4e0a\u4e5f\u662f\u4e00\u4e2a\u6811/\u68ee\u6797\u3002\u56e0\u4e3a\u5982\u679c\u8fd9\u4e0d\u662f\u4e00\u68f5\u6811/\u68ee\u6797\uff0c\u76f8\u5f53\u4e8e\u6709\u73af\u7684\u51fa\u73b0\uff0c\u90a3\u4e48\u539f\u56fe\u4e0a\u4e5f\u4e00\u5b9a\u4f1a\u6709\u4e2a\u73af\u3002\u8fd9\u5c31\u77db\u76fe\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u68f5\u6811\uff0c\u5c06\u4e00\u4e2a\u539f\u6811\u4e0a\u7684\u70b9\u4f5c\u4e3a\u6839\uff0c\u90a3\u4e48\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u8def\u5f84\u53ea\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u7236\u4eb2\u3002\u6211\u4eec\u7528\u6bcf\u4e2a\u7236\u4eb2\u641e\u4e00\u4e2a\u652f\u6301\u5355\u70b9\u4fee\u6539\u548c\u6574\u4f53\u4fee\u6539\u7684\u6570\u636e\u7ed3\u6784\u53bb\u7ba1\u8f96\u5b83\u7684\u513f\u5b50\u3002\u8fd9\u6837\uff0c\u6240\u6709\u8def\u5f84\u90fd\u80fd\u88ab\u552f\u4e00\u7684\u70b9\u6240\u7ba1\u8f96\u3002\n\n\u4fee\u6539\u7684\u65f6\u5019\uff0c\u8003\u8651\u5bf9\u4e00\u4e2a\u70b9\u7ba1\u8f96\u7684\u513f\u5b50\u6574\u4f53\u52a0\u51cf\uff0c\u5bf9\u7236\u4eb2\u7684\u7236\u4eb2\u5355\u70b9\u4fee\u6539\u5373\u53ef\u3002\u7136\u540e\u62ff\u4e00\u4e2a\u5806\u6216\u8005 multiset \u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7ba1\u8f96\u7684\u53ef\u7528\u7684\u513f\u5b50\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\n\nhttps://codeforces.com/contest/1787/submission/192148553",
        "postTime": 1675511852,
        "uid": 115936,
        "name": "\u6cf7\u6cfd\u4e09\u6708",
        "ccfLevel": 0,
        "title": "CF1787G"
    },
    {
        "content": "### CF1787E Weighed Tree Radius\r\n\r\n\u524d\u8a00\uff1a\r\n\r\nNGC5457 \u53d1\u73b0\u8fd9\u9053\u9898\u7684\u9898\u76ee\u540d\u5b57\u6253\u9519\u4e86\uff0c\u5e94\u7528 \"Weighted\" \u800c\u975e \"Weighed\"\u3002\r\n\r\n\r\n---\r\n\u9996\u5148\u5c06\u201c\u534a\u5f84\u201d\u8f6c\u5316\u4e3a\u6c42\u76f4\u5f84\u7684\u4e00\u534a\uff0c\u8fd9\u6837\u8003\u8651\u7684\u4e1c\u897f\u5c31\u662f\u4e0d\u5e26\u6709\u65b9\u5411\u6027\u7684\u3002\r\n\r\n\u5bb9\u6613\u53d1\u73b0\u7b54\u6848\u53ef\u4ee5\u53d6\u5230\u76f4\u5f84\u7684\u4e00\u534a\u4e0a\u53d6\u6574\u4e14\u4e0d\u53ef\u80fd\u66f4\u5c0f\uff0c\u6811\u8fb9\u5168\u4e3a $1$ \u6240\u4ee5\u6811\u4e0a\u4e00\u5b9a\u6709\u8fd9\u4e2a\u70b9\uff0c\u82e5\u67d0\u6761\u8def\u5f84\u7684\u4e2d\u70b9\u4e0d\u5728\u6811\u4e0a\uff0c\u90a3\u4e48\u534a\u5f84\u5c31\u662f\u8f83\u957f\u7684\u90a3\u6761\u8def\u5f84\u3002\r\n\r\n\u4e24\u79cd\u4e0d\u540c\u7684\u505a\u6cd5\uff1a\r\n\r\n\r\n---\r\n\r\n### \u505a\u6cd5\u4e00\r\n\r\n\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u662f\u201c\u52a0\u5165\u4e00\u4e2a\u70b9\u597d\u66f4\u65b0\u7b54\u6848\uff0c\u5220\u9664\u4e00\u4e2a\u70b9\u4e0d\u597d\u66f4\u65b0\u7b54\u6848\u201d\u7684\u95ee\u9898\uff1a\r\n\r\n\u52a0\u5165\u4e00\u4e2a\u70b9\u76f4\u63a5\u67e5\u8be2\u8be5\u70b9\u548c\u76ee\u524d\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u65b0\u7684\u76f4\u5f84\u8981\u4e48\u662f\u539f\u672c\u7684\u76f4\u5f84\u8981\u4e48\u662f\u67d0\u4e2a\u7aef\u70b9\u548c\u65b0\u7684\u70b9\u7684\u8fde\u7ebf\uff0c\u76f4\u63a5\u5904\u7406\u5c31\u884c\u4e86\u3002\r\n\r\n\u56e0\u4e3a\u4e0d\u597d\u5220\u9664\u4e14\u53ef\u4ee5\u79bb\u7ebf\uff0c\u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u5728\u52a0\u5165\u6bcf\u4e2a\u70b9\u7684\u65f6\u5019\u7ef4\u62a4\u76f4\u5f84\u5e76\u66f4\u65b0\u7b54\u6848\u3002\r\n\r\n\u67e5\u8be2\u8ddd\u79bb\u9700\u8981\u5728\u539f\u6811\u4e0a\u6c42 LCA\uff0c\u6240\u4ee5\u9700\u8981\u79bb\u7ebf\u628a\u539f\u6811\u5efa\u51fa\u6765\u3002\r\n\u4f7f\u7528 dfs \u5e8f\u548c RMQ \u6c42 LCA\uff0c\u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3a $O(n\\log n)$\u3002\r\n\r\n\u4f18\u70b9\u662f\u53ef\u4ee5\u6269\u5c55\u5230\u8fde\u8fb9\u65ad\u8fb9\u7684\u60c5\u51b5\uff0c\u7f3a\u70b9\u662f\u7801\u91cf\u548c\u5e38\u6570\u90fd\u8f83\u5927\uff0c\u4e14\u7a7a\u95f4\u590d\u6742\u5ea6\u9ad8\u3002\r\n\r\n---\r\n\r\n### \u505a\u6cd5\u4e8c\r\n\r\n\u8003\u8651\u4e00\u6761\u5e26\u6743\u7684\u975e\u9000\u5316\u4e3a\u70b9\u7684\u8def\u5f84\u7684\u6743\u503c\u5bf9\u5e94\u7684\u503c\u662f $dep_u+a_u+dep_v+a_v-2dep_{LCA}$\u3002\r\n\r\n\u6839\u636e dfs \u5e8f\u6c42 LCA \u7684\u7ed3\u8bba\uff0cLCA \u4e00\u5b9a\u662f dfs \u5e8f\u5728 $u,v$ \u4e4b\u95f4\u6700\u6d45\u70b9\u7684\u7236\u4eb2\uff0c\u6240\u4ee5\u4e0a\u9762\u90a3\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u770b\u4f5c $dep_x+a_x - 2 dep_y+2+dep_z+a_z(x<y\\leq z)$\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u6c42\u8be5\u5f0f\u5b50\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5 $(x,z]$ \u4e4b\u95f4\u7684\u70b9\u53ea\u4f1a\u6bd4 LCA \u6df1\uff0c\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\r\n\r\n\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e0a\u9762\u90a3\u4e2a\u5f0f\u5b50\u5c31\u884c\u4e86\uff0c\u5176\u5f62\u5982 $a_x+b_y+c_z(x\\leq y\\leq z)$ \u6240\u4ee5\u53ef\u5e76\u3002\r\n\r\n\u65f6\u95f4 $O(n\\log n)$\uff0c\u7a7a\u95f4\u7ebf\u6027\u3002\r\n\r\n\u4f18\u70b9\u662f\u5e38\u6570\u5c0f\uff0c\u597d\u5199\uff0c\u7a7a\u95f4\u7ebf\u6027\uff0c\u7f3a\u70b9\u662f\u53ef\u6269\u5c55\u6027\u4f4e\u3002\r\n\r\n---\r\n",
        "postTime": 1675761329,
        "uid": 161697,
        "name": "\u10e6\ua9bf\u0fd0",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011 CF1787G Weighed Tree Radius"
    }
]