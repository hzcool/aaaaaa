[
    {
        "content": "# _CF545E Paths and Trees_\n\n## \u524d\u8a00\uff1a\n\n\u5b66\u8fd9\u4e2a\u7684\u65f6\u5019\u770b\u4e86\u4e00\u4e9b\u535a\u5ba2\uff0c\u611f\u89c9\u5176\u5b9e\u8fd9\u4e00\u5757\u7f51\u4e0a\u5f88\u591a\u535a\u5ba2\u548c\u9898\u89e3\u5176\u5b9e\u4e00\u4e9b\u7ec6\u8282\u6ca1\u6709\u8bf4\u592a\u6e05\u695a\u3002\u4e8e\u662f\u4eca\u5929\u4e3b\u8981\u60f3\u8bf4\u4e00\u4e0b\u5173\u4e8e\u6700\u77ed\u8def\u5f84\u6811\u7684\u4e00\u4e9b\u7ec6\u8282\u4e0e\u5904\u7406\u95ee\u9898\u3002\n\n## \u6700\u77ed\u8def\u5f84\u6811\n$SPT$\uff0c\u5c31\u662f\u4ece\u4e00\u5f20\u8fde\u901a\u56fe\u4e2d\uff0c\u6709\u6811\u6ee1\u8db3\u4ece\u6839\u8282\u70b9\u5230\u4efb\u610f\u70b9\u7684\u8def\u5f84\u90fd\u4e3a\u539f\u56fe\u4e2d\u6839\u5230\u4efb\u610f\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u6811\u3002\n\n$SBT$ \u6709\u4ee5\u4e0b\u7279\u70b9\uff1a\n\n- \u6811\u4e0a\u4efb\u610f\u4e0d\u5c5e\u4e8e\u6839\u7684\u8282\u70b9 $x$\uff0c$dis(root,x)=$ \u539f\u56fe\u8d70\u5230 $x$ \u7684\u6700\u77ed\u8def\u3002\n\n- \u5168\u56fe\u8054\u901a\uff0c\u4e14\u6709 $n-1$ \u6761\u8fb9\u3002\n\n\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u7684\u533a\u522b\uff1a\u6700\u5c0f\u751f\u6210\u6811\u53ea\u9700\u8981\u6ee1\u8db3\u5168\u56fe\u8054\u901a\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8fd9\u4e2a\u95ee\u9898[\u8fd9\u7bc7\u65e5\u62a5](https://xyzl.blog.luogu.org/Shortest-Path-Tree-SPT)\u5199\u7684\u5f88\u6e05\u695a\u3002\n\n\u4e00\u822c\u7528 _Dijkstra_ \u5b9e\u73b0\u3002\n\n\u5927\u5bb6\u90fd\u77e5\u9053\uff0c _Dijkstra_ \u5b9e\u73b0\u8fc7\u7a0b\u5c31\u50cf\u662f\u4e00\u6761\u4e00\u6761\u628a\u8fb9\u62c9\u8fdb\u6765\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u5728\u677e\u5f1b\u64cd\u4f5c\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u524d\u9a71\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8fd9\u4e2a\u4e0e\u4e00\u822c\u7684 _Dijkstra_ \u65e0\u5f02\u3002\n\n```cpp\nint pre[maxn];\n\nbool vis[maxn];\n\nll dis[maxn],ans[maxn];\n\n#define P pair<ll,int>\n#define mp make_pair\n\ninline void Dijkstra(int s){\n\tpriority_queue <P,vector<P>,greater<P> > q;\n\tmemset(vis,0,sizeof(vis));\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[s]=0;\n\tq.push(mp(0,s));\n\twhile(!q.empty()){\n\t\tint x=q.top().second;q.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=true;\n\t\tfor(re int i=head[x];i;i=nxt[i]){\n\t\t\tint v=to[i];\n\t\t\tif(dis[v]>=dis[x]+w[i]){\n\t\t\t\tdis[v]=dis[x]+w[i];\n\t\t\t\tpre[v]=i;//\u8bb0\u5f55\u524d\u9a71\n\t\t\t\tq.push(mp(dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n\u590d\u6742\u5ea6 $O((n+m)logn)$\n\n## \u7ec6\u8282\u90e8\u5206\n\n### $1$\uff1a\u5173\u4e8e\u8fd9\u9053\u9898\u7684\u9898\u76ee\u8981\u6c42\uff08\u6743\u503c\u548c\u6700\u5c0f\uff09\uff1a\n\n#### \u5982\u4f55\u8003\u8651\n\n>\u7ed9\u5b9a\u4e00\u5f20\u5e26\u6b63\u6743\u7684\u65e0\u5411\u56fe\u548c\u4e00\u4e2a\u6e90\u70b9\uff0c\u6c42\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u6700\u77ed\u8def\u5f84\u6811\u3002\n\n\u8981\u6c42\u6211\u4eec\u6c42\u51fa\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u3002\n\n\u53ef\u4ee5\u753b\u56fe\u7406\u89e3\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ggl6h9qd.png)\n\n\u663e\u7136\uff0c\u4ece\u8282\u70b9 $1$ \u5230 \u8282\u70b9 $5$ \u6709\u4e24\u6761\u8def\u5f84\u90fd\u662f\u6700\u77ed\u7684\u3002\n\n\u5982\u679c\u9009\u62e9 $1->2->3->5$ \u8fd9\u4e00\u6761\uff0c\u90a3\u4e48\u6700\u77ed\u8def\u6811\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5wt77kto.png)\n\n\n\u6743\u503c\u548c\u662f $1+1+1+1=4$.\n\n\u5982\u679c\u9009\u62e9 $1->4->5$ \u8fd9\u4e00\u6761\uff0c\u6700\u77ed\u8def\u6811\u957f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/rwdssj97.png)\n\n\n\u6743\u503c\u548c\u662f $1+1+1+2=5$. \n\n\u6839\u636e\u9898\u610f\uff0c\u9009\u62e9\u4e0a\u9762\u90a3\u4e00\u79cd\u3002\n\n\u4e3a\u4ec0\u4e48\uff1f\n\n\u6211\u4eec\u53cd\u5411\u8003\u8651\uff1a\n\n\u5f53\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u53d1\u73b0\u6709\u4e24\u6761\u8def\u5f84\u90fd\u662f\u6700\u77ed\u8def\uff0c\u4e3a\u4e86\u6c42\u6700\u77ed\u8def\u5f84\u6811\uff0c\u5fc5\u7136\u53ea\u6709\u4e00\u6761\u8def\u80fd\u88ab\u9009\u5230\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u8fb9\u4f1a\u6210\u4e3a\u6811\u8fb9\uff0c\u53e6\u4e00\u4e2a\u5c31\u662f\u975e\u6811\u8fb9\uff0c\u800c\u6700\u77ed\u8def\u5f84\u6811\u6743\u503c\u548c\u6700\u5c0f\u662f\u9488\u5bf9\u6811\u8fb9\u800c\u8a00\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u9009\u62e9\u7684\u95ee\u9898\u5c31\u96c6\u4e2d\u5728\u8fde\u63a5\u8fd9\u4e2a\u70b9\u7684\u4e24\u6761\u8fb9\u54ea\u4e00\u4e2a\u66f4\u5c0f\uff0c\u5e76\u4f7f\u4e4b\u6210\u4e3a\u6811\u8fb9\u3002\n\n\u6709\u7684\u9898\u89e3\u4f1a\u8fd9\u4e48\u5199\uff1a\n\n>\u4e3a\u4e86\u6ee1\u8db3\u672c\u9898\u7684\u8981\u6c42\uff0c\u8fd8\u8981\u751f\u6210\u6811\u8fb9\u6743\u6700\u5c0f\u3002\u81ea\u7136\u662f\u4e24\u70b9\u95f4\u8def\u7a0b\u76f8\u7b49\u60c5\u51b5\u4e0b\uff0c\u7ecf\u8fc7\u7684\u8fb9\u6570\u8d8a\u591a\u8d8a\u597d\n\n\u5176\u5b9e\u8fd9\u662f\u4e0d\u6b63\u786e\u7684\u3002\n\n\u901a\u8fc7\u4e00\u5f20\u56fe\u6765\u770b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/l4vi5ano.png)\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ece\u8282\u70b9 $1$ \u5230\u8282\u70b9 $4$ \u7684\u6700\u77ed\u8def\u6709\u4e24\u6761\u3002\n\n\u8def\u7ebf\u4e00 $1->2->3->4$ \uff0c\u8fb9\u6570\u662f $3$\uff0c\n\n\u8def\u7ebf\u4e8c $1->5->6->7->8->9->4$ \uff0c \u8fb9\u6570\u662f $6$.\n\n\u82e5\u9009\u62e9\u8def\u7ebf\u4e00\uff1a\n\n\u6700\u77ed\u8def\u6811\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/t475ygm8.png)\n\n\u6743\u503c\u548c\u4e3a $10+10+10+2+2+2+2+2=40$.\n\n\u82e5\u9009\u62e9\u8def\u7ebf\u4e8c\uff1a\n\n\u6700\u77ed\u8def\u6811\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mzg6pz2m.png)\n\n\n\u6743\u503c\u548c\u4e3a $10+10+2+2+2+2+2+20=50$.\n\n#### \u4ee3\u7801\u5b9e\u73b0\n\n\u5728\u6ee1\u8db3\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u5927\u90e8\u5206\u9898\u89e3\u90fd\u4f1a\u8fd9\u4e48\u5199\uff1a\n\n```cpp\nfor(re int i=head[x];i;i=nxt[i]){\n\tint v=to[i];\n\tif(dis[v]>dis[x]+w[i]){\n\t\tdis[v]=dis[x]+w[i];\n\t\tpre[v]=i;\n\t\tq.push(mp(dis[v],v));\n\t}\n\telse if(dis[v]==dis[x]+w[i]&&w[i]<w[pre[v]])pre[v]=i;\n}\n\n```\n\n\u5c31\u662f\u8bf4\u4ed6\u4eec\u628a\u6743\u503c\u76f8\u7b49\u65f6\u5355\u72ec\u62ff\u51fa\u6765\u8fdb\u884c\u5224\u65ad\uff0c\u8fdb\u884c\u677e\u5f1b\u7684\u65f6\u5019\u5982\u679c\u677e\u5f1b\u524d\u7684\u7ed3\u679c\u4e0e\u677e\u5f1b\u540e\u7684\u7ed3\u679c\u76f8\u7b49\u5373 $dis[now]=dis[next]+w$\uff0c\u6bd4\u8f83\u8fde\u63a5\u8fd9\u6761\u70b9\u7684\u8fb9\u7684\u5927\u5c0f\uff0c\u5373 $w[i]$ \u4e0e $w[pre[next]]$ \uff0c\u5982\u679c $w[i]<w[pre[next]]$\uff0c\u90a3\u4e48\u66f4\u65b0\u5f53\u524d\u7684 $pre$ \u3002\n\n\u5176\u5b9e\u8fd9\u662f\u5b8c\u5168**\u6ca1\u5fc5\u8981**\u7684\u3002\n\n\u753b\u56fe\u7406\u89e3\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ggl6h9qd.png)\n\n\u5047\u5982\u73b0\u5728\u53ea\u6709\u4e00\u4e2a\u70b9\u6ca1\u6709\u5728\u6700\u77ed\u8def\u6811\u4e2d\u3002\n\n\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u5806\u4f18\u5316\u7684 _Dijkstra_ \uff0c\u6240\u4ee5\u7387\u5148\u88ab\u6269\u5c55\u51fa\u6765\u7684\u70b9\u7684 $dis$ \u4e00\u5b9a\u662f\u66f4\u5c0f\u7684\u3002\n\n\u6bd4\u5982\u4e0a\u56fe\u4e2d\uff0c\u5982\u679c\u60f3\u8981\u6269\u5c55\u5230 $5$ \uff0c\u90a3\u4e48\u53ea\u80fd\u4ece $3$ \u6216\u8005 $4$ \u800c\u6765\u3002\n\n$dis[4]=1$ ,$dis[3]=2$ \uff0c$dis[4]<dis[3]$\uff0c \u663e\u7136\u662f $4$ \u5148\u6269\u5c55\u51fa\u6765\uff0c\u7136\u540e\u624d\u80fd\u6269\u5c55 $5$ \u3002\n\n\u53c8\u56e0\u4e3a\u4ed6\u4eec\u7684\u8def\u5f84\u6743\u503c\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u53ea\u80fd\u8bf4\u660e \u8fde\u63a5 $3,5$ \u7684\u8fb9\u7684\u6743\u503c\u662f\u5c0f\u4e8e\u8fde\u63a5 $4,5$ \u7684\u8fb9\u7684\u6743\u503c\u7684\u3002\n\n\u6839\u636e\u4e0a\u9762\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u9700\u8981\u9009\u62e9 $3->5$ \u8fd9\u4e2a\u8fb9\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u53d1\u73b0\uff1a\n\n**\u5728\u6700\u77ed\u8def\u76f8\u7b49\u7684\u60c5\u51b5\u4e0b\uff0c\u6269\u5c55\u5230\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u540e\u51fa\u5806\u7684\u70b9\u8fde\u7684\u8fb9\u6743\u503c\u4e00\u5b9a\u66f4\u5c0f**\n\n\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5c31\u53ef\u4ee5\u7701\u53bb\u5206\u7c7b\u8ba8\u8bba\u7684\u529f\u592b\uff0c\u76f4\u63a5\u628a\u4ed6\u4eec\u5199\u5728\u4e00\u8d77\uff1a\n\n```cpp\nfor(re int i=head[x];i;i=nxt[i]){\n\tint v=to[i];\n\tif(dis[v]>=dis[x]+w[i]){//\u8fd9\u91cc\u52a0\u4e0a\u7b49\u53f7\n\t\tdis[v]=dis[x]+w[i];\n\t\tpre[v]=i;\n\t\tq.push(mp(dis[v],v));\n\t}\n\t//else if(dis[v]==dis[x]+w[i]&&w[i]<w[pre[v]])pre[v]=i;\n    //\u4e0a\u9762\u8fd9\u884c\u76f4\u63a5\u5220\u6389\n}\n\n```\n\n### $2$\uff1a\u5173\u4e8e\u8fb9\u7684 $id$ \u8bb0\u5f55\n\n\u4e5f\u6709\u4e00\u4e9b\u540c\u5fd7\u5199\u7684\u65f6\u5019\u559c\u6b22\u8bb0\u5f55\u4e00\u4e0b\u8fb9\u7684 $id$ \uff0c\u867d\u7136\u8fd9\u6837\u505a\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u6211\u4e2a\u4eba\u66f4\u559c\u6b22\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff1a\u5728\u5faa\u73af\u7684\u65f6\u5019\u76f4\u63a5\u7528 $i$ \u6765\u4f5c\u4e3a $id$ \uff0c\u8fd9\u6837\u505a\u4f1a\u7701\u4e0b\u4e00\u4e9b\u7a7a\u95f4~~\u867d\u7136\u8fd9\u4e9b\u7a7a\u95f4\u5b8c\u5168\u6ca1\u6709\u7701\u4e0b\u7684\u5fc5\u8981~~\n\n\u5355\u72ec\u5f00 $id$ \uff1a\n\n```cpp\n\nint head[maxn],to[maxn<<1],nxt[maxn<<1],id[maxn<<1],cnt;\n\nll w[maxn<<1];\n\ninline void add(int u,int v,ll val,int i){\n\tnxt[++cnt]=head[u];\n\tto[cnt]=v;\n\tw[cnt]=val;\n\tid[cnt]=i;\n\thead[u]=cnt;\n}\n\nint main(){\n\tn=read();m=read();k=read();\n\tfor(re int i=1,u,v;i<=m;i++){\n\t\tll val;\n\t\tu=read();v=read();val=read();\n\t\tadd(u,v,val,i);\n\t\tadd(v,u,val,i);\n\t}\n\t\n\t...\n}\n\n```\n\u7528\u5faa\u73af\u53d8\u91cf\u7d22\u5f15\uff1a\n\n```cpp\nint head[maxn],to[maxn<<1],nxt[maxn<<1],cnt;\n\nll w[maxn<<1];\n\ninline void add(int u,int v,ll val){\n\tnxt[++cnt]=head[u];\n\tto[cnt]=v;\n\tw[cnt]=val;\n\thead[u]=cnt;\n}\n\n\nint main(){\n\tn=read();m=read();k=read();\n\tfor(re int i=1,u,v;i<=m;i++){\n\t\tll val;\n\t\tu=read();v=read();val=read();\n\t\tadd(u,v,val);\n\t\tadd(v,u,val);\n\t}\n\t\n\t...\n}\n\n```\n\n\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u5355\u72ec\u5f00\u4e00\u4e2a $id$ \u6570\u7ec4\u7528\u6765\u8bb0\u5f55 $id$ \u7684\u8bdd\uff0c\u90a3\u4e48\u6700\u540e $dfs$ \u7684\u65f6\u5019 $id$ \u5c31\u76f4\u63a5\u662f\u7b54\u6848\u4e86\u3002\n\n\u4f46\u662f\u5982\u679c\u4f7f\u7528\u5faa\u73af\u53d8\u91cf $i$ \u6765\u8fdb\u884c\u7d22\u5f15\uff0c\u90a3\u4e48\u6700\u540e\u5f97\u51fa\u7b54\u6848\u65f6\u9700\u8981 $(ans[i]+1)/2)$.\n\n\u5177\u4f53\u539f\u56e0\u4e5f\u5f88\u597d\u60f3\u3002\n\n\u5355\u72ec\u8bb0\u5f55 $id$ \u7684\u8bdd\uff0c\u53cc\u5411\u8fb9\u7684 $id$ \u662f\u4e00\u6837\u7684\uff0c\u800c\u5faa\u73af\u53d8\u91cf\u7d22\u5f15\u5374\u5bfc\u81f4\u4e24\u6761\u53cc\u5411\u8fb9 $id$ \u4e0d\u4e00\u6837\u3002\n\n\u5355\u72ec\u5f00 $id$ \uff1a\n\n```cpp\nvoid dfs(int u){\n\tif(tot>=k)return;\n\tvis[u]=true;\n\tfor(re int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i],pos=id[i];\n\t\tif(vis[v])continue;\n\t\tif(dis[v]==dis[u]+w[i]){\n\t\t\tans[++h]=pos;\n\t\t\ttot++;\n\t\t\tdfs(v);\n\t\t\tif(tot>=k)return;\n\t\t}\n\t}\n}\n\nint main(){\n\t\n\t...\n\t\n\t\n\tdfs(1);\n\t\n\tfor(re int i=1;i<=h;i++){\n\t\tprintf(\"%d \",ans[i]);\n\t}\n\t\n}\n\n```\n\n\u7528\u5faa\u73af\u53d8\u91cf\u7d22\u5f15\uff1a\n\n```cpp\nvoid dfs(int u){\n\tif(tot>=k)return;\n\tvis[u]=true;\n\tfor(re int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(vis[v])continue;\n\t\tif(dis[v]==dis[u]+w[i]){\n\t\t\tans[++h]=i;\n\t\t\ttot++;\n\t\t\tdfs(v);\n\t\t\tif(tot>=k)return;\n\t\t}\n\t}\n}\n\nint main(){\n\t\n\t...\n\t\n\t\n\tdfs(1);\n\t\n\tfor(re int i=1;i<=h;i++){\n\t\tprintf(\"%d \",(ans[i]+1)/2);\n\t}\n\t\n}\n\n```\n\n### $3$\uff1a\u5173\u4e8e\u8f93\u51fa\u95ee\u9898\n\n\u8fd9\u4e2a\u9898\u5b8c\u5168\u4e0d\u7528\u6392\u5e8f\u554a\u3002\n\n>You may print the numbers of the edges in any order.\n\n>If there are multiple answers, print any of them.\n\n\u867d\u7136\u9898\u76ee\u7ffb\u8bd1\u6ca1\u8bf4\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u5173\u4e8e\u8f93\u5165\u8f93\u51fa\u7684\u82f1\u6587\u539f\u6587\u8fd8\u662f\u8981\u770b\u770b\u7684\u5427\u3002\n\n\u4e0d\u592a\u61c2\u4e3a\u4ec0\u4e48\u522b\u7684\u9898\u89e3\u8981\u6392\u4e00\u904d\u5e8f\u3002\n\n_long long_ \u8fd8\u662f\u8981\u5f00\u7684\u3002\n\n## CODE:\n\n```cpp\n//#define LawrenceSivan\n\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define re register\nconst int maxn=3e5+5;\n#define INF 0x3f3f3f3f3f3f3f3f\n\nint head[maxn],to[maxn<<1],nxt[maxn<<1],cnt;\n\nll w[maxn<<1];\n\ninline void add(int u,int v,ll val){\n\tnxt[++cnt]=head[u];\n\tto[cnt]=v;\n\tw[cnt]=val;\n\thead[u]=cnt;\n}\n\nint pre[maxn];\n\nbool vis[maxn];\n\nll dis[maxn],ans[maxn];\n\n#define P pair<ll,int>\n#define mp make_pair\n\ninline void Dijkstra(int s){\n\tpriority_queue <P,vector<P>,greater<P> > q;\n\tmemset(vis,0,sizeof(vis));\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[s]=0;\n\tq.push(mp(0,s));\n\twhile(!q.empty()){\n\t\tint x=q.top().second;q.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=true;\n\t\tfor(re int i=head[x];i;i=nxt[i]){\n\t\t\tint v=to[i];\n\t\t\tif(dis[v]>=dis[x]+w[i]){\n\t\t\t\tdis[v]=dis[x]+w[i];\n\t\t\t\tpre[v]=i;\n\t\t\t\tq.push(mp(dis[v],v));\n\t\t\t}\n\t\t\t//else if(!vis[v]&&dis[v]==dis[x]+w[i]&&w[i]<w[pre[v]])pre[v]=i;\n\t\t}\n\t}\n}\n\nint n,m,s;\n\ninline ll read(){\n    ll x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)){x=x*10+(ch^48);ch=getchar();}\n    return x*f;\n}\n\nint main(){\n#ifdef LawrenceSivan\n    freopen(\"aa.in\",\"r\",stdin);\n    freopen(\"aa.out\",\"w\",stdout);\n#endif\n\tn=read();m=read();\n\tfor(re int i=1,x,y;i<=m;i++){\n\t\tll val;\n\t\tx=read();y=read();val=read();\n\t\tadd(x,y,val);\n\t\tadd(y,x,val);\n\t}\n\t\n\ts=read();\n\t\n\tDijkstra(s);\n\t\n\tll sum=0,tot=0;\n\tfor(re int i=1;i<=n;i++){\n\t\tif(i==s)continue;\n\t\tint pos=pre[i];\n\t\tsum+=w[pos];\n\t\tans[++tot]=pos;\n\t}\n\n\tprintf(\"%lld\\n\",sum);\n\t\n\tfor(re int i=1;i<=tot;i++){\n\t\tprintf(\"%lld \",(ans[i]+1)/2);\n\t}\n\n\n\n    return 0;\n}\n\n```\n",
        "postTime": 1623035887,
        "uid": 375208,
        "name": "LawrenceSivan",
        "ccfLevel": 0,
        "title": "CF545E Paths and Trees\uff08\u6700\u77ed\u8def\u5f84\u6811\uff09"
    },
    {
        "content": "# \u6d45\u8c08 SPT\n\n\u672c\u7bc7\u6587\u7ae0\u53c2\u8003 [\u8fd9\u7bc7\u65e5\u62a5](https://xyzl.blog.luogu.org/Shortest-Path-Tree-SPT)\n\n## \u4ecb\u7ecd\n\nSPT\uff0c\u5373 Shortest Path Tree\uff0c\u6700\u77ed\u8def\u5f84\u6811\u3002\n\n\u5982\u4e0b\u56fe\uff0c\u6211\u4eec\u5047\u8bbe\u6e90\u70b9\u4e3a 1\uff0c\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/0t8q2v1w.png)\n\n\u5219\u7531\u5b83\u751f\u6210\u7684 SPT \u4e3a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vphk2sy3.png)\n\n\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 SPT \u8981\u6ee1\u8db3\u7684\u4e00\u4e9b\u6027\u8d28\uff1a\n\n- \u662f\u4e00\u9897\u751f\u6210\u6811\uff0c\u6bcf\u4e2a\u70b9**\u8fde\u901a**\u3002\n- \u4ece**\u6839\u8282\u70b9\u5230\u6811\u4e0a\u4efb\u610f\u4e00\u70b9\u7684\u8ddd\u79bb**\u5373\u4e3a\u539f\u56fe\u4e2d**\u6e90\u70b9\u5230\u8be5\u70b9**\u7684**\u6700\u77ed\u8def**\u3002\n\n## \u6211\u4eec\u5982\u4f55\u6784\u9020 SPT \u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u7528 Dijkstra\u3001Floyd \u7b49\u7b97\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u53ea\u8bf4\u7528 Dijkstra \u7684\u505a\u6cd5\u3002\n\n\u6211\u4eec\u8bb0\u5f55\u4e00\u4e2a\u6570\u7ec4 $pre$\uff0c$pre_i$ \u8868\u793a\u4ece\u6e90\u70b9\u5230\u70b9 $i$ \u7684**\u6700\u77ed\u8def\u5f84**\u4e0a\u4e0e $i$ \u76f8\u8fde\u7684**\u8fb9\u7684\u7f16\u53f7**\uff0c\u5373 $i$ \u7684\u4e0a\u4e00\u6761\u8fb9\uff0c\u6bcf\u6b21\u677e\u5f1b\u65f6\u66f4\u65b0\u3002\n\n```cpp\n//\u8fd9\u662f\u677e\u5f1b\u7684\u4ee3\u7801\nfor(int i=h[u];i;i=ne[i]){\n\tint v=e[i];\n\tif(dis[v]>=dis[u]+w[i]){\n\t\tdis[v]=dis[u]+w[i];\n\t\tq.push((node){v,dis[v]});\n\t\tpre[v]=i;\n\t}\n}\n```\n\u8fd9\u91cc\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4ee3\u7801\u4e2d $dis_v>=dis_u+w_i$\u3002\u9996\u5148 $dis_v>dis_u+w_i$ \u65f6\u663e\u7136\u662f\u8981\u66f4\u65b0\u7684\uff1b\u5f53 $dis_v=dis_u+w_i$ \u65f6\uff0c\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/p59wf170.png)\n\n\u5bf9\u4e8e $1$ \u5230 $5$\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u8def\u5f84\uff1a\n\n1. `1->3->5`\n\n2. `1->3->2->5`\n\n\u5b83\u4eec\u7684\u957f\u5ea6\u90fd\u662f $3$\u3002\u4f46\u662f\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u4e24\u79cd\u8def\u5f84\u4e0b\u7684\u751f\u6210\u6811\uff1a\n\n\u8fd9\u662f\u7b2c\u4e00\u79cd\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/wxzrsfen.png)\n\n\u8fd9\u662f\u7b2c\u4e8c\u79cd\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/fibp4592.png)\n\n\u7b2c\u4e00\u79cd\u7684\u6743\u503c\u548c\u4e3a $5$\uff0c\u7b2c\u4e8c\u79cd\u7684\u6743\u503c\u548c\u4e3a $4$\uff0c\u663e\u7136\u7b2c\u4e8c\u79cd\u624d\u662f\u6211\u4eec\u8981\u6c42\u7684 SPT\u3002\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u8981\u4f7f\u4efb\u610f\u4e24\u70b9\u76f8\u8fde\u7684\u8fb9\u7684**\u8fb9\u6743\u5c3d\u53ef\u80fd\u5c0f**\u3002\n\n\u90a3\u4e3a\u4ec0\u4e48\u76f4\u63a5\u52a0\u4e2a\u7b49\u4e8e\u53f7\u5c31\u884c\u4e86\u5462\uff1f[\u8fd9\u7bc7\u535a\u5ba2](https://www.luogu.com.cn/blog/LawrenceSivan/cf545e-paths-and-trees-zui-duan-lu-jing-shu-post)\u8bb2\u7684\u5f88\u597d\u3002\n\n\u8fd8\u662f\u4ee5\u539f\u56fe\u4e3a\u4f8b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/p59wf170.png)\n\n\u6211\u4eec\u8981\u6269\u5c55\u5230 $5$\uff0c\u9996\u5148\u4f1a\u6269\u5c55\u5230 $2$ \u548c $3$\u3002\u7531\u4e8e $dis_2<dis_3$\uff0c\u6839\u636e Dijkstra \u7684\u6027\u8d28\uff0c\u4f1a\u5148\u6269\u5c55 **$dis$ \u6700\u5c0f**\u7684\u90a3\u4e00\u4e2a\uff0c\u6240\u4ee5 $3$ \u4f1a\u5148\u88ab\u6269\u5c55\u5230\u3002\u7531\u4e8e\u6e90\u70b9\u7ecf\u8fc7 $2$ \u548c $3$ \u5230 $5$ \u7684\u8def\u5f84\u957f\u5ea6\u76f8\u7b49\uff0c\u53c8 $dis_2>dis_3$\uff0c\u6240\u4ee5 $edge_{2,5}<edge_{3,5}$\u3002\u56e0\u4e3a $2$ \u662f\u540e\u6269\u5c55\u5230\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u8986\u76d6\u5c31\u884c\u4e86\u3002\u5982\u679c\u8fd8\u6709\u70b9\u6ee1\u8db3\u8fd9\u79cd\u5173\u7cfb\u4e5f\u540c\u7406\u3002\n\n\u518d\u6765\u8bf4\u8bf4\u8f93\u51fa\u89e3\u3002SPT \u662f\u4e00\u9897\u6811\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u6839\u5230\u67d0\u4e00\u7ed3\u70b9**\u53ea\u6709\u4e00\u6761**\u7b80\u5355\u8def\u5f84\uff0c\u53ea\u6709 $n-1$ \u6761\u8fb9\u3002\u90a3\u4e48\u9664\u6839\u7ed3\u70b9\u5916\uff0c**\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u5bf9\u5e94\u4e00\u6761\u8fb9**\uff0c\u4e5f\u5c31\u662f\u5b83\u4eec\u7684 $pre$\u3002\u7531\u4e8e\u52a0\u7684\u662f\u53cc\u5411\u8fb9\uff0c\u8f93\u51fa\u7684\u65f6\u5019\u5e94\u4e3a $(pre_i+1)/2$\u3002\n\n### tips: \u4e0d\u5f00 long long \u89c1\u7956\u5b97qwq\n\n## $Code:$\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\n\nconst int N=3e5+10,M=N<<1,inf=0x7f;\n\nint n,m,s;\nint h[N],e[M],ne[M],w[M],idx;\nint pre[N];\nlong long dis[N];\nbool vis[N];\nstruct node{\n\tint to;long long w;\n\tinline bool operator <(const node& a)const{\n\t\treturn w>a.w;\n\t}\n};\npriority_queue<node>q;\n\ninline void add(int a,int b,int c){\n\te[++idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx;\n}\n\nvoid dij(){\n\tmemset(dis,inf,sizeof dis);\n\tq.push((node){s,0});dis[s]=0;\n\twhile(!q.empty()){\n\t\tint u=q.top().to;q.pop();\n\t\tif(vis[u])continue;\n\t\tvis[u]=true;\n\t\tfor(int i=h[u];i;i=ne[i]){\n\t\t\tint v=e[i];\n\t\t\tif(dis[v]>=dis[u]+w[i]){\n\t\t\t\tdis[v]=dis[u]+w[i];\n\t\t\t\tq.push((node){v,dis[v]});\n\t\t\t\tpre[v]=i;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;++i){\n\t\tint a,b,c;scanf(\"%d%d%d\",&a,&b,&c);\n\t\tadd(a,b,c);add(b,a,c);\n\t}\n\tscanf(\"%d\",&s);\n\tdij();\n\tlong long sum=0;\n\tfor(int i=1;i<=n;++i){\n\t\tif(i==s)continue;\n\t\tsum+=w[pre[i]];\n\t}\n\tprintf(\"%lld\\n\",sum);\n\tfor(int i=1;i<=n;++i)if(i!=s)printf(\"%d \",pre[i]+1>>1);\n\treturn 0;\n}\n```",
        "postTime": 1623566794,
        "uid": 339846,
        "name": "RuntimeErr",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF545E Paths and Trees"
    },
    {
        "content": "### \u601d\u8def\uff1a\n\n$\\quad$\u53ea\u9700\u8981\u4ee5\u9898\u76ee\u7ed9\u5b9a\u7684 $u$ \u4e3a\u8d77\u70b9\u8dd1\u4e00\u904d $Dijkstra$ \u6700\u77ed\u8def\u5373\u53ef\uff0c\u6bcf\u6b21\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71(\u5373\u5230\u8fbe\u8fd9\u4e2a\u70b9\u7684\u8fb9)\uff0c\u6ce8\u610f\u6709\u591a\u4e2a\u53ef\u4ee5\u9009\u62e9\u7684\u8fb9\u4e2d\u9009\u62e9\u8fb9\u6743\u6700\u5c0f\u7684\uff0c\u611f\u89c9\u5f88\u50cf\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6700\u540e\u8bb0\u5f97\u8981\u8bb0\u5f55\u6811\u4e0a\u7684\u8fb9\u6743\u5e76\u6392\u5e8f\u518d\u8f93\u51fa\uff0c\u8d77\u70b9 $u$ \u662f\u6ca1\u6709\u524d\u9a71\u7684\uff0c\u6240\u4ee5\u8981\u4ece $2$ \u5f00\u59cb\u8f93\u51fa\u3002\n\n$\\quad$\u5982\u679c\u8fd8\u4e0d\u80fd\u7406\u89e3\u5c31\u770b\u770b\u4ee3\u7801\u5427\uff0c\u6709\u4e00\u4e9b\u5173\u952e\u7684\u6ce8\u91ca\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<queue>\n#include<stack>\n#include<cstring>\nusing namespace std;\n#define re register int\n#define int long long\n#define LL long long\n#define il inline\n#define next nee\n#define inf 1e18\nil int read()\n{\n  int x=0,f=1;char ch=getchar();\n  while(!isdigit(ch)&&ch!='-')ch=getchar();\n  if(ch=='-')f=-1,ch=getchar();\n  while(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n  return x*f;\n}\nil void print(int x)\n{\n  if(x<0)putchar('-'),x=-x;\n  if(x/10)print(x/10);\n  putchar(x%10+'0');\n}\nconst int N=3e5+5;\nint n,m,next[N<<1],go[N<<1],head[N],tot,dis[N],s[N<<1],t,du[N],ans;\nbool b[N];\nil void Add(int x,int y,int z)\n{\n  next[++tot]=head[x];head[x]=tot;\n  go[tot]=y;s[tot]=z;\n}\nstruct node{\n  int pos,dis;\n  il bool operator<(const node &x)const\n  {return dis>x.dis;}\n};\npriority_queue<node>q;\nil void Dijkstra(int p)//\u677f\u5b50Dijkstra\n{\n  for(re i=1;i<=n;i++)dis[i]=inf;dis[p]=0;\n  q.push((node){p,0});\n  while(!q.empty())\n    {\n      node tmp=q.top();q.pop();\n      int x=tmp.pos;\n      if(b[x])continue;\n      b[x]=1;\n      for(re i=head[x];i;i=next[i])\n\t{\n\t  int y=go[i];\n\t  if(dis[y]>dis[x]+s[i])\n\t    {\n\t      du[y]=i;//du\u8bb0\u5f55\u524d\u9a71\u7f16\u53f7\u4e3ai\u7684\u8fb9\n\t      dis[y]=dis[x]+s[i];\n\t      q.push((node){y,dis[y]});\n\t    }\n\t  else if(dis[y]==dis[x]+s[i])//\u6709\u591a\u6761\u6700\u77ed\u8def\u5f84\u65f6\n\t    {if(s[du[y]]>s[i])du[y]=i;}//\u9009\u62e9\u8fb9\u6743\u5c0f\u7684\n\t}\n    }\n}\nsigned main()\n{\n  n=read();m=read();\n  for(re i=1;i<=m;i++)\n    {re x=read(),y=read(),z=read();Add(x,y,z);Add(y,x,z);}\n  t=read();\n  Dijkstra(t);\n  for(re i=1;i<=n;i++)ans+=s[du[i]];//ans\u7edf\u8ba1\u7b54\u6848\n  for(re i=1;i<=n;i++)dis[i]=du[i]+1>>1;\n  sort(dis+1,dis+n+1);//\u522b\u5fd8\u4e86\u6392\u5e8f\n  print(ans);putchar('\\n');\n  for(re i=2;i<=n;i++)print(dis[i]),putchar(' ');//\u4ece2\u5f00\u59cb\u8f93\u51fa\n  return 0;\n}\n```",
        "postTime": 1605535536,
        "uid": 109220,
        "name": "Farkas_W",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF545E \u3010Paths and Trees\u3011"
    },
    {
        "content": "\u4e00\u770b\u8fd9\u9053\u9898\u76ee,\u6446\u660e\u7684\u662f\u8ba9\u6211\u4eec\u7528\u6700\u77ed\u8def\u6811\u7684\u505a\u6cd5,\u7136\u540e\u770b\u770b\u9898\u89e3,\u53d1\u73b0\u7b2c\u4e00\u7bc7\u7684\u9898\u89e3\u6709\u4e00\u70b9\u95ee\u9898,\u590d\u5236\u4e4b\u540e\u597d\u50cf\u8fc7\u4e0d\u53bb\u6837\u4f8b(\u5e76\u4e14\u4ee3\u7801\u4e2d\u89e3\u91ca\u8f83\u5c11),\u6240\u4ee5\u5c31\u51b3\u5b9a\u81ea\u5df1\u6253\u4e00\u6ce2\u53d1\u4e00\u4e0b\u6700\u77ed\u8def\u6811\u7684\u9898\u89e3\n\n(\u4e0b\u9762\u7684\u7801\u98ce\u56e0\u4e3a\u53d7\u5230\u4e86lrj\u7684dij\u7684\u6a21\u677f\u7684\u5f71\u54cd,\u4f7f\u7528struct\u6765\u5c01\u88c5)\n\n\u4e0b\u9762\u5c31\u662f\u6700\u77ed\u8def\u6811\u7684\u89e3\u91ca\u4e86:\n\n(\u6572\u91cd\u70b9)\n\n\u4e00\u822c\u7684\u65b9\u6cd5\u662f\u5148\u7528dij\u8dd1\u4e00\u904d,\u5728\u8dd1\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u7684\u4fdd\u5b58\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71,\u6362\u53e5\u8bdd\u8bf4\u4e5f\u5c31\u662f\u6bcf\u4e00\u4e2a\u70b9\u7684\u7238\u7238,\u7136\u540e\u5728\u6700\u7ec8\u7684\u8f93\u51fa\u4e2d\u4f7f\u7528\u5373\u53ef\n\n### \u4e5f\u5c31\u662f\u8fd9\u4e2a\u6700\u77ed\u8def\u6811\u7684\u6bcf\u4e00\u6761\u8fb9\u662f\u7ef4\u62a4\u8fd9\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8def\n\n(\u5e0c\u671b\u8fd9\u4e00\u7bc7\u7b80\u6d01\u7684\u4ee3\u7801\u80fd\u591f\u6210\u4e3a\u5404\u4f4d\u6253\u6700\u77ed\u8def\u6811\u65f6\u7684\u4e00\u4e2a\u597d\u501f\u9274)\n(\u8fd9\u4e2a\u6a21\u677f\u8fd8\u53ef\u4ee5\u5728[\u8fd9\u4e2a\u4e2d\u4f7f\u7528](https://www.luogu.com.cn/problem/CF1005F))\u5404\u4f4d\u5927\u4f6c\u6253\u5b8c\u540e\u8fd8\u53ef\u4ee5\u6253\u6253\u8fd9\u9053\u9898\n\n\u7136\u540e\u5728\u90a3\u4e2a\u677e\u5f1b\u7684\u65f6\u5019\u7684\u505a\u6cd5\u6709\u4e00\u70b9\u4e0d\u540c\n\n\u5728\u4e0b\u9762\u4ee3\u7801\u7684\u6ce8\u91ca\u4e2d\u4f1a\u7740\u91cd\u7684\u8f85\u52a9\u8bb2\u89e3\n```\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst ll inf=1e18;\nconst int maxn=300050;\nstruct Edge{//dij\u7528\u7684,\u4e0d\u89e3\u91ca\n    int from,to,id;\n    ll dist;\n    Edge(int f,int t,type d,int i):from(f),to(t),dist(d),id(i){}\n};\nstruct HeapNode{//\u8fd9\u662f\u4f18\u5148\u961f\u5217,\u60f3\u5fc5\u6bcf\u4e2a\u770b\u5230\u8fd9\u9053\u9898\u5e76\u60f3\u6253\u7684\u4eba\u90fd\u4f1a\u5427\n    ll d;\n    int u;\n    HeapNode(ll dd,int uu):d(dd),u(uu){}\n    bool operator<(const HeapNode& rhs)const{\n        return d>rhs.d;\n    }\n};\nstruct Dijkstra{//\u771f*\u6a21\u677f\n    int n,m;\n    vector<Edge> edges;//\u8bb0\u5f55\u7684\u662f\u8fb9\n    vector<int> g[maxn];\n    bool done[maxn];//vis,\u5373\u5224\u65ad\u6709\u65e0\u7528\u8fc7\n    ll d[maxn];//dist \u8ddd\u79bb\n    int p[maxn];//\u8bb0\u5f55\u524d\u9a71\n    void init(int n){//\u521d\u59cb\u5316\n        this->n=n;\n        for(int i=0;i<n;++i) g[i].clear();\n        edges.clear();\n    }\n    void add(int from,int to,type dist,int id){//\u8fd9\u662f\u52a0\u8fb9\u7684\u64cd\u4f5c\n        edges.push_back(Edge(from,to,dist,id));\n        m=edges.size();\n        g[from].push_back(m-1);\n    }\n    void dijkstra(int s){\n        priority_queue<HeapNode> q;\n        for(int i=0;i<n;++i) d[i]=inf;\n        d[s]=0;\n        memset(done,0,sizeof(done));\n        que.push(HeapNode(0,s));\n        while(!que.empty()){\n            HeapNode x=que.top();\n            q.pop();\n            int u=x.u;\n            if(done[u]) continue;\n            done[u]=true;\n            for(int i=0;i<g[u].size();++i){\n                Edge& e=edges[g[u][i]];\n                if(d[e.to]>d[u]+e.dist){//\u8fd9\u91cc\u5c31\u9700\u8981\u597d\u597d\u5730\u7406\u89e3\u4e86,\u5f53\u4e0d\u76f8\u7b49\u7684\u65f6\u5019,\u663e\u7136\u5c31\u662f\u4e00\u6837\u7684\u64cd\u4f5c\n                    d[e.to]=d[u]+e.dist;\n                    p[e.to]=g[u][i];\n                    q.push(HeapNode(d[e.to],e.to));\n                }\n                else if(d[e.to]==d[u]+e.dist && e.dist<edges[p[e.to]].dist){\n                //\u4f46\u662f\u5f53\u4ed6\u4eec\u76f8\u7b49\u65f6,\u663e\u7136\u662f\u8981\u8d8a\u591a\u8d8a\u597d,\u60f3\u4e00\u60f3,\u4e3a\u4ec0\u4e48\n                    p[e.to]=g[u][i];\n                }\n            }\n        }\n    }\n    void solve(int s){//\u8fd9\u5c31\u662f\u505a\u5b8cdij\u540e\u89e3\u51b3\u95ee\u9898\u7684\u4e1c\u897f\u4e86\n        ll sum=0;\n        vector<int> ans;//\u8fd9\u4e2aans\u8bb0\u5f55\u7684\u5c31\u662f\u7b54\u6848\u4e86\n        for(int i=0;i<n;++i){\n            if(i==s) continue;//\u663e\u7136\u4e0d\u8bb0\u5f55\u81ea\u5df1\u5230\u81ea\u5df1\n            Edge& e=edges[p[i]];//\u524d\u9a71\u7684\u4f5c\u7528\n            ans.push_back(e.id);//\u8bb0\u5f55\u6807\u53f7,\u56e0\u4e3a\u6700\u540e\u8981\u8f93\u51fa\u8def\u5f84\n            sum+=e.dist;//\u8fd9\u5c31\u662f\u8bb0\u5f55\u8def\u957f\u4e86\n        }\n        sort(ans.begin(),ans.end());\n        printf(\"%lld\\n\",sum);//\u8f93\u51fa\n        for(int i=0;i<ans.size();++i){\n            printf(\"%d%c\",ans[i],i+1==ans.size()?'\\n':' ');\n        }\n    }\n};\nint n,m;\nDijkstra dij;//\u56e0\u4e3a\u662fstruct\nint main(){//\u4e0b\u9762\u5f88\u597d\u7406\u89e3\n    scanf(\"%d%d\",&n,&m);\n    dij.init(n);\n    for(int i=1;i<=m;++i){\n        int u,v;\n        ll d;\n        scanf(\"%d%d%lld\",&u,&v,&d);\n        --u,--v;\n        dij.add(u,v,d,i);\n        dij.add(v,u,d,i);\n    }\n    int s;\n    scanf(\"%d\",&s);\n    --s;\n    dij.dijkstra(s);\n    dij.solve(s);\n    return 0;\n}\n```\n\n~~\u671b\u8fc7\u554a~~",
        "postTime": 1593007163,
        "uid": 234497,
        "name": "Y_J_Y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF545E \u3010Paths and Trees\u3011"
    },
    {
        "content": "\u9898\u610f\u795e\u5947\uff0c\u53cd\u6b63\u6211\u662f\u7406\u89e3\u4e86\u597d\u957f\u7684\u65f6\u95f4\n\n\u5dee\u4e0d\u591a\u5c31\u662f\u6c42\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u4efb\u610f\u70b9\u5230\u6e90\u70b9\u7684\u6700\u77ed\u8def\u7b49\u4e8e\u539f\u56fe\u4e2d\u7684\u6700\u77ed\u8def\u3002\u518d\u8ba9\u8fd9\u4e2a\u751f\u6210\u6811\u8fb9\u6743\u548c\u6700\u5c0f\n\n\u5f88\u663e\u7136\u5f97\u5148dij\u4e00\u4e0b\n\n\u8003\u8651dij\u8fc7\u7a0b\u4e2d\u677e\u5f1b\u7684\u6761\u4ef6\uff0c\u8ddf\u4e00\u822c\u7684dij\u4e0d\u4e00\u6837\uff0c\u4e3a\u4e86\u6ee1\u8db3\u672c\u9898\u7684\u8981\u6c42\uff0c\u8fd8\u8981\u751f\u6210\u6811\u8fb9\u6743\u6700\u5c0f\u3002\u81ea\u7136\u662f\u4e24\u70b9\u95f4\u8def\u7a0b\u76f8\u7b49\u60c5\u51b5\u4e0b\uff0c\u7ecf\u8fc7\u7684\u8fb9\u6570\u8d8a\u591a\u8d8a\u597d\uff08\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff09\n\n\u6700\u77ed\u8def\u8dd1\u51fa\u4e4b\u540e\u5982\u4f55\u5f97\u77e5\u5efa\u51fa\u6765\u7684\u751f\u6210\u6811\uff1f\n\n\u7b80\u5355\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5f00\u4e00\u4e2a$pre$\u6570\u7ec4\u8868\u793a\u7236\u4eb2\u8fde\u5230\u81ea\u5df1\u7684\u8fb9\u7684\u7f16\u53f7\u3002\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u89e3\u51b3\u9898\u76ee\u4ea4\u7ed9\u6211\u4eec\u7684\u4efb\u52a1\n\nCode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 300010\n#define inf 1e18\n#define int long long\nusing namespace std;\nstruct node{\n\tint val, len;\n\tbool operator < (const node &x) const{ return x.len < len; }\n};\npriority_queue <node> q;\nstruct Edge{\n\tint to, next, len;\n}edge[maxn << 1];\nint num, head[maxn], n, m, rt, vis[maxn], dis[maxn], pre[maxn];\n\ninline int read(){\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n\tfor (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n\treturn s * w;\n}\n\nvoid addedge(int x, int y, int z){ edge[++num] = (Edge) { y, head[x], z }; head[x] = num; }\n\nsigned main(){\n\tn = read(), m = read();\n\tfor (int i = 1; i <= m; ++i){\n\t\tint x = read(), y = read(), z = read();\n\t\taddedge(x, y, z); addedge(y, x, z);\n\t}\n\trt = read();\n\tfor (int i = 1; i <= n; ++i) dis[i] = inf; dis[rt] = 0;\n\tq.push((node) {rt, 0});\n\twhile (!q.empty()){\n\t\tnode tmp = q.top(); q.pop();\n\t\tint u = tmp.val, len = tmp.len;\n\t\tif (vis[u]) continue; vis[u] = 1;\n\t\tfor (int i = head[u]; i; i = edge[i].next){\n\t\t\tint v = edge[i].to;\n\t\t\tif (dis[v] >= len + edge[i].len){//\u4e0d\u4e00\u6837\u7684\u677e\u5f1b\u6761\u4ef6\uff0c\u6ce8\u610f\u8fd9\u4e2a\u7b49\u53f7\n\t\t\t\tdis[v] = len + edge[i].len, pre[v] = i;\n\t\t\t\tif (!vis[v]) q.push((node) {v, dis[v]});\n\t\t\t}\n\t\t}\n\t}\n\tint ans = 0;\n\tfor (int i = 1; i <= n; ++i) if (i != rt) ans += edge[pre[i]].len;\n\tprintf(\"%lld\\n\", ans);\n\tfor (int i = 1; i <= n; ++i) if (i != rt)  printf(\"%lld \", (pre[i] + 1) >> 1);\n\treturn 0;\n}\n```\n",
        "postTime": 1564480043,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF545E \u3010Paths and Trees\u3011"
    },
    {
        "content": "### Preface\n\n\u6700\u77ed\u8def\u5f84\u6811 (SPT) \u6a21\u677f\u9898\u3002\u770b[\u6d1b\u8c37\u65e5\u62a5](https://xyzl.blog.luogu.org/Shortest-Path-Tree-SPT)\u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u5176\u5b9e\u5e76\u4e0d\u96be\u5b66\u3002\n\n### Solution\n\n\u5728 dijkstra \u6c42\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u5bf9 $u\\to v$ \u677e\u5f1b\u7684\u65f6\u5019\uff0c\u90fd\u66f4\u65b0 $u\\to v$ \u6240\u9009\u53d6\u7684\u8fb9\u7684\u7f16\u53f7\uff0c\u5373 $pre_v$\u3002\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u6700\u5c0f SPT\uff0c\u56e0\u6b64\u677e\u5f1b\u7684\u6761\u4ef6\u8981\u53d6\u7b49\u53f7\uff0c\u5e76\u66f4\u65b0\u66f4\u5c0f\u7684\u8fb9\u3002\n\n\u9898\u89e3\u533a\u8c8c\u4f3c\u6ca1\u6709\u6bd4\u8f83\u7b80\u5355\u7684 `vector` \u5b9e\u73b0\u4ee3\u7801\u3002\u94fe\u5f0f\u524d\u5411\u661f\u56fa\u7136\u65b9\u4fbf\uff0c\u4e0d\u8fc7\u5bf9\u4e8e `vector` \u515a\u53ea\u9700\u591a\u5f00\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b58\u8fb9\uff0c\u8bb0\u5f55\u7f16\u53f7\u5373\u53ef\u3002 \n\n### Code\n\n```cpp\ntypedef const int cint;\ntypedef long long ll;\ncint MAXN=3e5+5;\nint n,m,s;\nstruct node\n{\n\tint to;ll val;int id;//id \u5373\u7f16\u53f7\n\tbool operator<(const node& a)const\n\t{\n\t\treturn val>a.val;\n\t}\n};\nstruct Edge\n{\n\tint u,v,w;\n}e[MAXN];//\u8bb0\u5f55\u8fb9\u7684\u7f16\u53f7\nvector<node> edge[MAXN];\nbool visit[MAXN];\nll dis[MAXN];\nint pre[MAXN];\n\nvoid dijkstra(void)\n{\n\t#define pli pair<ll,int>\n\tfor(int i=1;i<=n;i++)\tdis[i]=LLONG_MAX;\n\tpriority_queue<pli,vector<pli>,greater<pli>> q;\n\tq.emplace(make_pair(dis[s]=0,s));\n\twhile(!q.empty())\n\t{\n\t\tconst int u=q.top().second;\n\t\tq.pop();\n\t\tif(visit[u])\tcontinue;\n\t\tvisit[u]=true;\n\t\tfor(const auto& cur:edge[u])\n\t\t{\n\t\t\tcint v=cur.to;const ll w=cur.val;\n\t\t\tif(dis[v]>=dis[u]+w)\n\t\t\t{\n\t\t\t\tif(dis[v]>dis[u]+w || e[pre[v]].w>w)\tpre[v]=cur.id;//\u6838\u5fc3\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tq.emplace(make_pair(dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tread(n,m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v,w;read(u,v,w);\n\t\te[i]=Edge{u,v,w};\n\t\tedge[u].emplace_back(node{v,w,i});\n\t\tedge[v].emplace_back(node{u,w,i});\n\t}\n\tread(s);\n\tdijkstra();\n\tll sum=0;\n\tvector<int> ans;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(i==s)\tcontinue;\n\t\tsum+=e[pre[i]].w;\n\t\tans.emplace_back(pre[i]);\n\t} \n\tsort(ans.begin(),ans.end());\n\tcout<<sum<<endl;\n\tfor(const auto& Ans:ans)\tcout<<Ans<<' ';\n\tcout<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1619181475,
        "uid": 80049,
        "name": "Hexarhy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF545E \u3010Paths and Trees\u3011"
    },
    {
        "content": "# \u9898\u89e3\n\n## \u8fd9\u5f88\u660e\u663e\u662f\u4e00\u9053$SPT$(\u6700\u77ed\u8def\u5f84\u6811)\u7684\u6a21\u677f\u9898\u3002\n\n### \u524d\u7f00\u829d\u58eb$:$\n\n1. **\u6700\u77ed\u8def\u5f84\u6811**\u7684\u5b9a\u4e49\u53ca\u90e8\u5206\u524d\u7f00\u829d\u58eb\u3002\n\n2. $Dijsktra$\u52a0**\u5806\u4f18\u5316**\u3002\n\n## 1.\u601d\u8def$:$\n\n\u9996\u5148\u6211\u4eec\u5f97\u4fdd\u8bc1**\u6e90\u70b9**\u5230\u4efb\u610f\u7684\u4e00\u70b9\u7684\u8ddd\u79bb\u4e00\u5b9a\u662f**\u6700\u5c0f\u7684**\u3002\u90a3\u4e48\u8fd9\u4e2a$Dijsktra$\u53ef\u4ee5\u505a\u5230\u3002\n\n#### \u91cd\u96be\u70b9$:$\n\n\u6211\u4eec\u5982\u4f55\u4fdd\u8bc1**\u6574\u68f5\u6811\u7684\u6743\u503c\u548c**\u4e3a\u6700\u5c0f\u7684\u5462$?$\u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u8981\u8ba8\u8bba\u4e00\u4e2a**\u8d2a\u5fc3**\u7684\u601d\u8def$:$\n\n\u6211\u4eec\u5728\u4fdd\u8bc1**\u6bcf\u4e2a\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6700\u5c0f\u7684\u524d\u63d0\u4e0b**\uff0c\u5982\u679c\u6709\u4e00\u6761\u8fb9\u5728\u8fdb\u884c**\u677e\u5f1b**\u64cd\u4f5c\u540e\uff0c\u5982\u679c\u76ee\u524d\u8003\u8651\u7684\u4e00\u6761\u8def\u7ebf\u548c\u4e4b\u524d\u7684\u8def\u7ebf\u8ddd\u79bb\u76f8\u7b49\uff0c\u90a3\u4e48\u6211\u4eec\u9009\u62e9\u4e0a\u4e00\u4e2a\u70b9\u5230\u8fd9\u4e2a\u70b9\u4e4b\u95f4\u7684\u7ebf\u6bb5\u8ddd\u79bb**\u77ed\u7684\u90a3\u4e00\u6761**\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u6bcf\u4e00\u6761\u90fd\u662f\u6700\u5c0f\u7684\u3002\u5373**\u6574\u68f5\u6811\u7684\u6743\u503c\u548c**\u4e3a\u6700\u5c0f\u7684\u3002\n\n## 2. \u7ec6\u8282$:$\n\n1. \u5982\u679c\u6211\u4eec\u662f\u7528**\u94fe\u5f0f\u524d\u5411\u661f**\u5b58\u56fe\uff0c\u56e0\u4e3a\u6211\u4eec\u662f**\u65e0\u5411\u56fe**\uff0c\u6240\u4ee5\u6211\u4eec\u6700\u540e\u5fc5\u987b\u5c06\u8282\u70b9\u4fe1\u606f$ans$\u8f6c\u6362\u4e3a$(ans+1)/2$\u3002(0<=ans<2n)\n2. \u8bb0\u5f97$sort$\u4e00\u904d\n3. $long$ $long$\u522b\u5fd8\u8bb0\u5f00$!$\n\n## 3. $Code:$\n\n```cpp\n//\u4ee3\u7801\u6ca1\u8fc7\u591a\u6ce8\u91ca,\u524d\u9762\u8bb2\u89e3\u7684\u591f\u6e05\u695a\u4e86\n#include<cstdio>\n#include<algorithm>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#define INF 92233720354775807\n#define LL long long\n#define rint register int\n#define maxn 300005\n#define maxm 600010\nusing namespace std;\ninline int read(){\n\trint d(0),f(1);char ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-'){\n\t\t\tf=-1;\n\t\t}ch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\td=(d<<1)+(d<<3)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn d*f;\n}\nvoid writes(LL x){\n\tif(x>9) writes(x/10);\n\tputchar(x%10+48);\n}\ninline void write(LL x){\n\tif(x<0) putchar('-'),writes(-x);\n\telse writes(x);\n\tputchar(' ');\n}\nstruct Edge{\n\tint to,w;\n\tLL next;\n}edge[maxm];\nint n,m,s,cnt,head[maxn],pre[maxn];//pre\u662f\u4e00\u4e2a\u70b9\u524d\u9762\u7684\u7ebf,\u7528\u4e8e\u8bb0\u5f55\u7b54\u6848QwQ\nLL dis[maxn],ans[maxn];\nbool vis[maxn];\ninline void add(int u,int v,int w){\n\tcnt++;\n\tedge[cnt].to=v;\n\tedge[cnt].w=w;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n}\nstruct node{\n\tint id;LL dist;\n\tbool operator < (const node &x) const{\n\t\treturn dist>x.dist;\n\t}\n};\nvoid Dijkstra(int start){\n\tpriority_queue<node> q;\n\tfor(rint i=1;i<=n;i++){\n\t\tdis[i]=INF;vis[i]=false;\n\t}\n\tdis[start]=0;\n\tnode Start;\n\tStart.dist=0,Start.id=start;\n\tq.push(Start);\n\twhile(!q.empty()){\n\t\tnode now=q.top();\n\t\tint u=now.id;\n\t\tq.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=true;\n\t\tfor(rint i=head[u];i;i=edge[i].next){\n\t\t\tint next=edge[i].to,w=edge[i].w;\n\t\t\tif(dis[next]>dis[u]+w){\n\t\t\t\tdis[next]=dis[u]+w;\n\t\t\t\tnode nt;\n\t\t\t\tnt.id=next;\n\t\t\t\tnt.dist=dis[next];\n\t\t\t\tq.push(nt);\n\t\t\t\tpre[next]=i;\n\t\t\t}\n\t\t\telse if(dis[next]==dis[u]+w&&w<edge[pre[next]].w) pre[next]=i;\n\t\t}\n\t}\n}\nsigned main(){\n\tn=read(),m=read();\n\tfor(rint i=1;i<=m;i++){\n\t\tint x=read(),y=read();\n\t\tLL w=read();\n\t\tadd(x,y,w),add(y,x,w); \n\t}\n\ts=read();\n\tDijkstra(s);\n\tLL sum=0,tot=0;\n\tfor(rint i=1;i<=n;i++){\n\t\tif(i==s) continue;\n\t\tint id=pre[i];\n\t\tsum+=edge[id].w;\n\t\tans[++tot]=id;\n\t}\n\tsort(ans+1,ans+tot+1);\n\twrite(sum);\n\tputchar('\\n');\n\tfor(rint i=1;i<=tot;i++) write((ans[i]+1)/2);\n\treturn 0;\n}\n\n```\n\n\u5b8c\u7ed3\u6492\u82b1$qwq$\u3002",
        "postTime": 1619617131,
        "uid": 436389,
        "name": "Vidoliga",
        "ccfLevel": 6,
        "title": "CF545E\u9898\u89e3"
    },
    {
        "content": "update->2021.4.24  21:05  \u66f4\u6539\u4e86\u4e00\u4e9b\u7b14\u8bef\uff08~~\u70b9\u7684\u8fb9\u6743~~\uff09\n\n\u540c Hexarhy \u5927\u4f6c\uff0c\u4e5f\u662f\u4ece[\u65e5\u62a5](https://xyzl.blog.luogu.org/Shortest-Path-Tree-SPT)\u8fc7\u6765\u7684\u3002\n\n### \u524d\u7f6e\u829d\u58eb\n\n- 1.\u6700\u77ed\u8def\u5f84\u6811\u7684\u5404\u79cd\u5b9a\u4e49\u3002\n\n- 2 .dijkstra\u5806\u4f18\u5316\n \n### \u89e3\u9898\u601d\u8def\n\n\u9996\u5148\u8fd9\u9898\u662f\u4e00\u9053\u6700\u77ed\u8def\u5f84\u6811\u7684\u6a21\u677f\u9898\uff08\u7ffb\u8bd1\u90fd\u5199\u4e86\uff09\n\n\u6700\u77ed\u8def\u5f84\u6811\u53ef\u4ee5\u7528\u6700\u77ed\u8def\u7b97\u6cd5\uff08dijkstra\u6216floyd\uff09 \u6765\u5b9e\u73b0\uff0c\u4ee5\u4e0b\u8bf4\u4e00\u4e0bdij\u7684\u5806\u4f18\u5316\u7b97\u6cd5\u5b9e\u73b0\u3002\n\n\u9996\u5148\u8dd1 dij \uff0c\u5728\u6bcf\u4e00\u6b21\u7684 $x->y$ \u677e\u5f1b\u64cd\u4f5c\u4e4b\u540e\uff0c\u8003\u8651\u5982\u679c $y$ \u70b9\u7684\u524d\u9a71\u6bd4\u8fd9\u6761\u8fb9\u8981\u5927\uff0c\u56e0\u4e3a\u8981\u6c42**\u6700\u77ed\u8def\u5f84\u6811**\uff0c\u6240\u4ee5\u5c06 $y$ \u70b9\u7684\u524d\u9a71\u8be5\u4e3a\u5f53\u524d\u8fd9\u6761\u8fb9\u3002\n\n\u8fb9\u7684\u5e8f\u53f7\u8bdd\uff0c\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u8fb9\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u5b9a\u597d\u4e86\u5e8f\u53f7\uff0c\u56e0\u4e3a\u662f\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5\u6bcf\u6761\u8fb9\u771f\u6b63\u7684\u7f16\u53f7\u662f $(i+1)/2$ \uff0c$i$ \u4e3a\u539f\u7f16\u53f7\u3002\n\n\u5f53\u7136\u5982\u679c\u7528 vector \u5efa\u8fb9\u7684\u8bdd\uff0c\u5e94\u8be5\u5c31\u4e0d\u7528\u8003\u8651\u90a3\u4e48\u591a\u4e86\uff0c\u5177\u4f53\u7684\u53ef\u53c2\u8003[Hexarhy\u7684\u535a\u5ba2](https://www.luogu.com.cn/blog/80049/solution-cf545e)\n\n\u6700\u540e\u8f93\u51fa\u7684\u662f\uff0c\u9664\u6e90\u70b9\u4e4b\u5916\u7684\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\u7684\u8fb9\u6743\u548c\uff0c\u548c\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\u7684\u6743\uff08\u5347\u5e8f\u8f93\u51fa\uff09\u3002\n\n### \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<queue>\n#include<algorithm>\n#define int long long\nusing namespace std;\nconst int N=3e5+1,inf=0x3f3f3f3f3f3f3f3f;\npriority_queue<pair<int,int> ,vector<pair<int,int> >,greater<pair<int,int> > > pq;\nint n,m;\nint x,y,z;\nint s,sum;\nstruct edge{\n\tint to,ne,dis;\n}e[N<<1];\nint adj[N],l;\nint dis[N],vis[N],pre[N],ans[N],len;\ninline void add(int x,int y,int z){e[++l].to=y,e[l].ne=adj[x],e[l].dis=z,adj[x]=l;}\ninline void dij(int s){\n\tfor(int i=1;i<=n;i++) dis[i]=inf;\n\tdis[s]=0;\n\tpq.push(make_pair(0,s));\n\twhile(!pq.empty()){\n\t\tint x=pq.top().second,y=pq.top().first;pq.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x]=1;\n\t\tfor(int i=adj[x];i;i=e[i].ne){\n\t\t\tint y=e[i].to,z=e[i].dis;\n\t\t\tif(dis[y]>dis[x]+z){\n\t\t\t\tdis[y]=dis[x]+z;\n\t\t\t\tpq.push(make_pair(dis[y],y));\n\t\t\t\tpre[y]=i;\n\t\t\t}\n\t\t\tif(dis[y]==dis[x]+z&&z<e[pre[y]].dis) pre[y]=i;\n\t\t}\n\t}\n}\nsigned main(){\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(int i=1;i<=m;i++) scanf(\"%lld%lld%lld\",&x,&y,&z),add(x,y,z),add(y,x,z); \n\tscanf(\"%lld\",&s);\n\tdij(s);\n\tfor(int i=1;i<=n;i++){\t\n\t\tif(i==s) continue;\n\t\tint k=pre[i];\n\t\tsum+=e[k].dis;\n\t\tans[++len]=k;\n\t}\n\tsort(ans+1,ans+len+1);\n\tprintf(\"%lld\\n\",sum);\n\tfor(int i=1;i<=len;i++) printf(\"%lld \",(ans[i]+1)/2);\n} \n```\n\n\n\n\n-------------------------------------------------------------------------------------\n\n\u53c2\u8003\u8d44\u6599\uff1a[\u4f60\u8c37\u65e5\u62a5](https://xyzl.blog.luogu.org/Shortest-Path-Tree-SPT)\n",
        "postTime": 1619268095,
        "uid": 209808,
        "name": "\u94f6\u6cb3AI",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF545E Paths and Trees"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u6700\u5c0f\u8def\u5f84\u6811\u7684\u677f\u5b50\u9898\u3002\n\n### \u6700\u77ed\u8def\u5f84\u6811\n\n\u6700\u77ed\u8def\u5f84\u6811\u6307\u7684\u662f\u5728\u4e00\u5f20\u8fde\u901a\u56fe\u4e2d\uff0c\u4ece**\u6839\u5230\u4efb\u610f\u70b9\u7684\u8def\u5f84**\u90fd\u662f**\u539f\u56fe\u4ece\u6839\u5230\u4efb\u610f\u70b9\u7684\u6700\u77ed\u8def\u5f84**\u7684\u751f\u6210\u6811\u3002\n\n### \u5982\u4f55\u6c42\u89e3\uff1f\n\n\u6839\u636e\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u6c42\u6cd5\u3002\u4ee3\u7801\u4ee5 $Dijkstra$ \u4e3a\u4f8b\u3002\n\n\u6bcf\u6b21\u9009\u53d6 $dis$ \u6700\u5c0f\u7684\u672a\u786e\u5b9a\u7684\u70b9\u52a0\u5165\u5df2\u786e\u5b9a\u7684\u6700\u77ed\u8def\u96c6\u5408 $S$\u3002\u5bf9\u4e8e\u70b9 $v$\uff0c\u6700\u7ec8\u5230 $v$ \u70b9\u7684\u6700\u77ed\u8def $dis[v]=dis[u]+w(u,v)$\uff0c\u5fc5\u7136\u662f\u7531\u67d0\u6b21\u52a0\u5165\u96c6\u5408 $S$ \u7684\u70b9 $u$ \u7684\u51fa\u8fb9 $w(u,v)$ \u677e\u5f1b\u4ea7\u751f\u7684\uff0c\u4e14 $dis[u]$ \u662f\u5230 $u$ \u7684\u6700\u77ed\u8def\u3002\n\n\u8bf7\u5404\u4f4d\u7406\u89e3\u8fd9\u70b9\u3002\u4e4b\u540e\uff0c\u5957\u4e0a $Dijkstra$ \u677f\u5b50\u5c31**\u57fa\u672c**\u5b8c\u4e8b\u4e86\u3002\n\n\u5b9e\u9645\u4e0a\u5c31\u5c06\u5176\u4e2d\u4e00\u6bb5\u6539\u6210\u4e86\u8fd9\u6837\uff1a\n\n```cpp\nfor(int i=head[x];i;i=nxt[i]){\n\tint y=ver[i];\n\tif(d[y]>d[x]+val[i])\n\t\tpre[y]=i,\t//\u8bb0\u5f55\u677e\u5f1b\u7684\u8fb9(\u524d\u9a71)\n\t\td[y]=d[x]+val[i],\n\t\tq.push((node){y,d[y]});\n}\n```\n\n\u4e5f\u5c31\u662f\u8bb0\u5f55\u677e\u5f1b\u5b83\u7684\u8fb9\u5373\u53ef\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u505a\u5230\u8ba9\u6570\u8fb9\u6743\u503c\u548c\u6700\u5c0f\uff1f\u6211\u4eec\u91c7\u53d6\u8d2a\u5fc3\u7684\u601d\u60f3\u3002\u5982\u679c\u9047\u5230**\u677e\u5f1b\u524d\u540e\u7ed3\u679c\u76f8\u7b49**\uff0c\u5373 $dis[v]=dis[u]+w(u,v)$\uff0c\u6b64\u65f6**\u5bf9\u6bd4\u8fde\u63a5\u8fd9\u70b9\u7684\u8fb9\u7684\u5927\u5c0f**\uff0c\u5982\u679c $val[pre[v]]>val[u]$ \u5219\u66f4\u65b0 $pre$\u3002\n\n\u56e0\u6b64\u5b9e\u9645\u4e0a\u4e5f\u5c31\u591a\u4e86\u8fd9\u884c\u4ee3\u7801\uff1a\n\n```cpp\nif(d[y]==d[x]+val[i]&&val[pre[y]]>val[i])pre[y]=i;\n```\n\n### \u5b9e\u73b0\u7ec6\u8282\n\n- \u9700\u8981\u6ce8\u610f\u7684\u662f\u6b64\u9898\u9700\u8981\u5f00 $\\text{long long}$\u3002\n- \u53e6\u5916\u6ce8\u610f\u8ba9\u4f60\u8f93\u51fa\u7684\u662f\u4ec0\u4e48\u3002\n\n\u81f3\u4e8e\u4ee3\u7801\uff0c\u57fa\u672c\u5c31\u662f\u5728dij\u4e0a\u7565\u52a0\u6539\u52a8\u4e86\u3002\u6211\u5df2\u7ecf\u5c06\u91cd\u8981\u90e8\u5206\u63d0\u51fa\uff0c\u56e0\u6b64\u4e0d\u5355\u72ec\u653e\u5b8c\u6574\u4ee3\u7801\uff0c\u5efa\u8bae\u5404\u4f4d\u5b8c\u5168\u72ec\u7acb\u6253\u51fa\u3002",
        "postTime": 1618708388,
        "uid": 246979,
        "name": "SalomeJLQ",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF545E Paths and Trees \u6700\u77ed\u8def\u5f84\u6811"
    },
    {
        "content": "\u7531\u4e8e\u672c\u4eba\u6bd4\u8f83\u5f31\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5c06\u9898\u89e3\u7684\u4ee3\u7801\u6574\u9f50\u7684\u8f93\u51fa\uff0c\u6240\u4ee5\u53ea\n\n\u597d\u7528\u622a\u5c4f\u4e86\u3002\u3002\u3002\n\n\u672c\u9898\u5171\u670960\u591a\u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6570\u636e\u91cf\u975e\u5e38\u7684\u5927\u3002\n\n\u6807\u6ce8\u548c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/19336.png)\n![](https://cdn.luogu.com.cn/upload/pic/19338.png)\n![](https://cdn.luogu.com.cn/upload/pic/19337.png)\n![](https://cdn.luogu.com.cn/upload/pic/19339.png)",
        "postTime": 1526397158,
        "uid": 25030,
        "name": "zsc2003",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF545E \u3010Paths and Trees\u3011"
    }
]