[
    {
        "content": "\u672c\u9898\u53ef\u7528hash + BFS\u3002\n\n- \u5c06\u7ed9\u5b9a\u7684\u4e09\u5143\u7ec4\u63d2\u5165\u54c8\u5e0c\u8868, \u5b9a\u4e49Hash(x) = (a * b * c + a + b + c) % M, \u5176\u4e2dM = 99991\u3002\n\n\t```cpp\n\tvector<triplet>Hash[M + 1];\n\tinline int getHash(triplet x) {\n\t    return ((x.a * x.b % M * x.c % M) + x.a + x.b + x.c) % M;\n\t}\n\tinline void insert(triplet x) {\n\t    Hash[getHash(x)].push_back(x);\n\t}\n\t```\n- \u5bf9\u4e8e\u5f53\u524d\u70b9cur, \u5df2\u77e5\u6307\u5411\u8be5\u70b9\u7684\u8fb9\u7684id, \u5219\u6709\u4e09\u5143\u7ec4(Edge[id^1].to\uff0ccur, to)\u3002(\u5229\u7528\u4e86\u6210\u5bf9\u50a8\u5b58\u6280\u5de7) \n\n- \u67e5\u8be2\u662f\u5426\u4e3a\u88ab\u8bc5\u5492\u7684\u4e09\u5143\u7ec4\uff1a\n\t```cpp\n\tinline bool check(triplet x) {\n\t    for (auto i : Hash[getHash(x)]) \n\t        if (x.a == i.a && x.b == i.b && x.c == i.c) return true;\n\t    return false;\n\t}\n- BFS\u4e2d, pre[i], dis[i], vis[i]\u5206\u522b\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u8fb9\u7684\u524d\u9a71, \u7ecf\u8fc7\u7684\u8ddd\u79bb\uff0c\u662f\u5426\u8bbf\u95ee\u8fc7\u3002\uff08\u5982\u679c\u50a8\u5b58\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u4f1a\u51fa\u73b0\u6837\u4f8b3\u4e2d\u4e00\u4e2a\u70b9\u591a\u6b21\u88ab\u8bbf\u95ee\uff0c\u8f93\u51fa\u8def\u5f84\u51fa\u73b0\u6b7b\u5faa\u73af)\n\nBFS:\n```cpp\ninline void BFS() { \n\tqueue<pair<int, int> >q; //first\u8bb0\u5f55\u5f53\u524d\u8282\u70b9 second\u8bb0\u5f55\u6307\u5411\u8be5\u8282\u70b9\u7684\u8fb9\u7684id\n\tq.push({1, 0});\n\twhile (!q.empty()) {\n\t\tint cur = q.front().first, id = q.front().second;\n\t\tq.pop();\n\t\tfor (int i = head[cur]; i; i = Edge[i].next) {\n\t\t\tint to = Edge[i].to;\n\t\t\tif (check(triplet(Edge[id ^ 1].to, cur, to)) || vis[i]) continue; //\u4e09\u5143\u7ec4\u5224\u65ad\u4ee5\u53ca\u8be5\u8fb9\u662f\u5426\u8bbf\u95ee\u8fc7\n\t\t\tdis[i] = dis[id] + 1, pre[i] = id, vis[i] = true;\n\t\t\t//\u5230\u8fbei\u53f7\u8fb9\u7684\u8ddd\u79bb \u5e76\u8bb0\u5f55i\u53f7\u8fb9\u7684\u524d\u9a71\n\t\t\tif(to == n) {\n\t\t\t\tprintf(\"%d\\n\", dis[i]), print(i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.push({to, i});\n\t\t}\n\t}\n\tputs(\"-1\");\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801:\n```cpp\n#include<bits/stdc++.h>\nconstexpr int MAXN = 3e3 + 3;\nconstexpr int MAXM = 2e4 + 4;\nconstexpr int M = 99991;\nusing namespace std;\ninline int read() {\n\tint x = 0, f = 1;\n\tchar ch = getchar();\n\twhile (!isdigit(ch)) f = (ch == '-') ? -1 : 1, ch = getchar();\n\twhile (isdigit(ch)) x = x * 10 + ch - 48, ch = getchar();\n\treturn x * f;\n}\nint n, m, k, tot = 1;\nint dis[MAXM << 1], pre[MAXM << 1], head[MAXN], vis[MAXM << 1];\nstruct triplet { //\u4e09\u5143\u7ec4\n\tint a, b, c;\n\ttriplet(){}\n\ttriplet(int _a, int _b, int _c) : a(_a), b(_b), c(_c){}\n}tmp;\nstruct E{ //\u8fb9\n\tint to, next;\n\tE(){}\n\tE(int _to, int _next) : to(_to), next (_next){}\n}Edge[MAXM << 1];\ninline void add(int from, int to){\n\tEdge[++tot] = E(to, head[from]), head[from] = tot;\n\tEdge[++tot] = E(from, head[to]), head[to] = tot;\n}\n/******************hash********************/\nvector<triplet>Hash[M + 1];\ninline int getHash(triplet x) {\n\treturn ((x.a * x.b % M * x.c % M) + x.a + x.b + x.c) % M;\n}\ninline void insert(triplet x) {\n\tHash[getHash(x)].push_back(x);\n}\ninline bool check(triplet x) {\n\tfor (auto i : Hash[getHash(x)]) \n\t\tif (x.a == i.a && x.b == i.b && x.c == i.c) return true;\n\treturn false;\n}\n/*****************hash********************/\ninline void print(int id) {\n\tif(id != 0) print(pre[id]), printf(\"%d \", Edge[id].to);\n\telse printf(\"1 \");\n}\ninline void BFS() { \n\tqueue<pair<int, int> >q; //first\u8bb0\u5f55\u5f53\u524d\u8282\u70b9 second\u8bb0\u5f55\u6307\u5411\u8be5\u8282\u70b9\u7684\u8fb9\u7684id\n\tq.push({1, 0});\n\twhile (!q.empty()) {\n\t\tint cur = q.front().first, id = q.front().second;\n\t\tq.pop();\n\t\tfor (int i = head[cur]; i; i = Edge[i].next) {\n\t\t\tint to = Edge[i].to;\n\t\t\tif (check(triplet(Edge[id ^ 1].to, cur, to)) || vis[i]) continue;\n\t\t\tdis[i] = dis[id] + 1, pre[i] = id, vis[i] = true;\n\t\t\t//\u5230\u8fbei\u53f7\u8fb9\u7684\u8ddd\u79bb \u5e76\u8bb0\u5f55i\u53f7\u8fb9\u7684\u524d\u9a71\n\t\t\tif(to == n) {\n\t\t\t\tprintf(\"%d\\n\", dis[i]), print(i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tq.push({to, i});\n\t\t}\n\t}\n\tputs(\"-1\");\n}\nint main() {\n\tn = read(), m = read(), k = read();\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u = read(), v = read();\n\t\tadd(u, v); //\u5efa\u56fe \u9700\u6210\u5bf9\u50a8\u5b58 tot\n\t}\n\tfor (int i = 1; i <= k; i++) {\n\t\ttmp.a = read(), tmp.b = read(), tmp.c = read();\n\t\tinsert(tmp); //\u63d2\u5165hash\u8868\n\t}\n\tBFS();\n\treturn 0;\n}\n```\n",
        "postTime": 1581581653,
        "uid": 48611,
        "name": "_NoOne",
        "ccfLevel": 0,
        "title": "CF59E Shortest Path"
    },
    {
        "content": "```cpp\n//\u849f\u84bb\u7684\u6b6a\u89e3\uff0c\u4ec5\u4f9b\u5404\u4f4d\u5946\u4f6c\u4eec\u53c2\u8003...\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<string>\n#include<algorithm>\n#include<queue>\n#include<map>\nusing namespace std;\nstruct node{\n    //pid\u4e3a\u5b83\u662f\u961f\u5217\u4e2d\u7684\u7b2cpid\u4e2a\u8282\u70b9\n    //pre\u4e3a\u8fd9\u4e2a\u70b9\u4ecepre\u8d70\u8fc7\u6765\n    //u\u4e3a\u5f53\u524d\u8282\u70b9\n    //ti\u4e3a\u65f6\u95f4\n    int pid,pre,u,ti;\n}f,q[300010];\nstring s;\nint u,v,n,m,k,a,b,c,r,l;\nvector<int> g[3010];\nmap<string,bool> mp,mp2;\n//mp\u5b58\u4e09\u5143\u7ec4\n//mp2\u5b58\u8fd9\u4e2a\u70b9\u662f\u5426\u5df2\u7ecf\u88ab\u67d0\u4e2a\u70b9\u66f4\u65b0\u8fc7\nstring str(int x){\n    //\u624b\u52a8\u628a\u6570\u5b57\u5c01\u88c5\u6210\u5b57\u7b26\u4e32\uff0c\u5946\u4f6c\u4eec\u80af\u5b9a\u90fd\u770b\u5f97\u61c2\n    string s=\"\";\n    if(x==0)s+='0';\n    while(x>0){\n        s+=(char)((x%10)+'0');\n        x/=10;\n    }\n    reverse(s.begin(),s.end());\n    return s;\n}\nvoid pri(node x){\n\t//\u9012\u5f52\u8f93\u51fa\n\tif(x.pid==-1){\n\t\tprintf(\"%d \",x.u);\n\t\treturn; \n\t}\n\tpri(q[x.pid]);\n\tprintf(\"%d \",x.u);\n\treturn;\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&u,&v);\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }//\u5efa\u65e0\u5411\u56fe\n    for(int i=1;i<=k;i++){\n        s=\"\";\n        scanf(\"%d%d%d\",&a,&b,&c);\n        s+=str(a);\n        s+=\" \";\n        s+=str(b);\n        s+=\" \";\n        s+=str(c);\n        mp[s]=true;\n        //\u7528map\u50a8\u5b58\u4e09\u5143\u7ec4\u5b57\u7b26\u4e32\u5c01\u88c5\n        //\u4e0d\u80fd\u76f4\u63a5\u8bfb\u5165\uff0c\u4f1a\u51fa\u9519\uff01\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\n    }\n    q[++r]=(node){-1,0,1,0};\n    while(r>=l){//\u56e0\u4e3a\u662f\u8981\u8f93\u51fa\u8def\u5f84\uff0c\u6240\u4ee5\u624b\u5199\u961f\u5217\u65b9\u4fbf\u9012\u5f52\u8f93\u51fa\n        f=q[++l];\n        u=f.u;\n        for(int i=0;i<g[u].size();i++){\n            v=g[u][i];\n            string pd=\"\";\n            pd+=str(f.pre);\n            pd+=\" \";\n            pd+=str(u);\n            pd+=\" \";\n            pd+=str(v);\n            if(mp[pd]){\n                continue;\n                //\u5982\u679c\u6709\u4e09\u5143\u7ec4\u9650\u5236\uff0c\u5219\u65e0\u6cd5\u8d70\u6b64\u8def\n            }\n            pd=\"\";\n            pd+=str(u);\n            pd+=\" \";\n            pd+=str(v);\n            if(mp2[pd]){\n            \tcontinue;\n            }//\u5982\u679c\u539f\u6765\u5df2\u7ecf\u4ece\u8fd9\u4e2a\u70b9\u66f4\u65b0\u8fc7\u6765\uff0c\u5219\u4e0d\u9700\u8981\u8d70\u8fd9\u6761\u8def\uff0c\u5373\u8d70\u8fc7\u4e86\uff0c\u518d\u8d70\u4e00\u6b21\u7ed3\u679c\u4e00\u6837\n\t    mp2[pd]=true;\n            if(v==n){//\u8fbe\u5230\u76ee\u6807\u8f93\u51fa\u8def\u5f84\n                printf(\"%d\\n\",f.ti+1);\n                pri(f);\n                printf(\"%d\",n);\n                return 0;\n            }\n            q[++r]=(node){l,u,v,f.ti+1};\n            //\u65b0\u72b6\u6001\u5165\u961f\n            //l\u4e3a\u8fd9\u4e2a\u70b9\u4ece\u8be5\u961f\u5217\u4e2d\u7b2cl\u4e2a\u70b9\u66f4\u65b0\u8fc7\u6765\n            //u\u4e3a\u8fd9\u4e2a\u70b9\u4e3a\u8fd9\u4e2a\u70b9\u4eceu\u66f4\u65b0\u8fc7\u6765\n            //v\u4e3a\u5f53\u524d\u8282\u70b9\n        }\n    }\n    //\u65e0\u89e3\n    printf(\"-1\");\n    return 0;\n}\n```\n",
        "postTime": 1600433090,
        "uid": 374929,
        "name": "SpeMars",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF59E \u3010Shortest Path\u3011"
    },
    {
        "content": "\u4e0a\u6b21\u7684\u9898\u89e3\u88ab\u5361\u4e86,\u539f\u56e0:map\u6548\u7387\u592a\u4f4e\uff0c3\u79d2\u65f6\u9650\u4e5f\u8fc7\u4e0d\u4e86\u4e8e\u662f\u6211\u5c06map\u6539\u4e3a\u4e86\u54c8\u5e0c\u8868\n\u795e\u5947\u7684\u662f\u65f6\u9650\u5f00500ms\u4e5f\u80fd\u8fc7\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\nusing namespace std;\nstruct node{\n    int pid,pre,u,ti;\n    //pid\u4e3a\u5f53\u524d\u8282\u70b9\u7531\u961f\u5217\u4e2d\u7684\u7b2cpid\u4e2a\u8282\u70b9\u66f4\u65b0\u800c\u6765\n    //pre\u4e3a\u5f53\u524d\u8282\u70b9\u7531\u8282\u70b9pre\u66f4\u65b0\u8fc7\u6765\n    //u\u4e3a\u8fd9\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\n    //ti\u4e3a\u8d70\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u5c0f\u65f6\u95f4(\u65e0\u6743\u5219\u7528\u65f6\u95f4\u4f5c\u4e3a\u6700\u77ed\u8def\u7a0b)\n}f,q[300010];//q\u4e3a\u624b\u5199\u961f\u5217\nint u,v,n,m,k,a,b,c,r,l,base=3001;\n//base\u5c06\u4e09\u5143\u7ec4\u5c01\u88c5\u6210base\u8fdb\u5236\u6570\u7c7b\u4f3cstringHash\n//\u4f5c\u7528:\u5c06\u4e09\u5143\u7ec4\u6620\u5c04\u4e3a\u4e00\u4e2a\u6570\u503c\u65b9\u4fbfO(1)\u65f6\u95f4\u5224\u65ad\n//\u4e5f\u53ef\u4ee5\u5c06\u8d70\u8fc7\u7684\u8def\u5c01\u88c5\u4e3abase\u8fdb\u5236\u6570\nunsigned long long s;//Hash\u6700\u597d\u7528unsigned long long \u5b58\nvector<int> g[3010];\nvector<unsigned long long> syz[1000007],path[1000007];\ninline int read(){\n    register int s=0,w=0;\n    static char ch=getchar();\n    for(;!isdigit(ch);)ch=getchar();\n    for(;isdigit(ch);){\n        s=(s<<1)+(s<<3)+(ch^48);\n        ch=getchar();\n    }\n    return w?-s:s;\n}\nvoid insert1(unsigned long long x){//\u5728\u4e09\u5143\u7ec4\u9650\u5236\u4e2d\u6dfb\u52a0\u9650\u5236\n\tunsigned long long key=x%1000007;\n\tsyz[key].push_back(x);\n\treturn;\n}\nvoid insert2(unsigned long long x){\n\t//\u8bb0\u5f55\u8d70\u8fc7\u7684\u8def\u5f84(\u5373\u4ece\u8bb0\u5f55\u4eceu\u5230v\u5df2\u7ecf\u8d70\u8fc7)\n   \t//(\u4e0b\u6b21\u5982\u679c\u8fd8\u662f\u4eceu\u5230v\u5219\u4e0d\u9700\u5904\u7406)(because\u7ed3\u679c\u4e00\u6837)\n\tunsigned long long key=x%1000007;\n\tpath[key].push_back(x);\n\treturn;\n}\nbool find(unsigned long long x){//\u5728\u4e09\u5143\u7ec4\u4e2d\u67e5\u8be2\u9650\u5236\n\tunsigned long long key=x%1000007;\n\tfor(int i=0;i<syz[key].size();++i)if(x==syz[key][i])return true;\n\treturn false;\n}\nbool find2(unsigned long long x){//\u5728\u8d70\u8fc7\u7684\u8def\u5f84\u4e2d\u67e5\u8be2\u8be5\u8def\u5f84\u662f\u5426\u8d70\u8fc7\n\tunsigned long long key=x%1000007;\n\tfor(int i=0;i<path[key].size();++i)if(x==path[key][i])return true;\n\treturn false;\n}\nvoid pri(node x){//\u9012\u5f52\u8f93\u51fa\n\tif(x.pid==-1){//(\u8fb9\u754c)\n    \t\t//\u5982\u679c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u8282\u70b9\u5219\u56de\u5f52\uff0c\u505c\u6b62\u9012\u5f52\n\t\tprintf(\"%d \",x.u);\n\t\treturn; \n\t}\n   \t//\u8f93\u51fa\u5b83\u7684\u524d\u4e00\u4e2a\u70b9\u7684\u8def\u5f84\n\tpri(q[x.pid]);\n   \t//\u518d\u8f93\u51fa\u81ea\u5df1\n\tprintf(\"%d \",x.u);\n\treturn;\n}\nint main(){\n    n=read(),m=read(),k=read();\n    for(register int i=1;i<=m;++i){//\u5efa\u65e0\u5411\u56fe\n        u=read(),v=read();\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    for(register int i=1;i<=k;++i){\n        a=read(),b=read(),c=read();\n        s=0,s+=a;s*=base,s+=b,s*=base,s+=c;\n        //\u4e09\u5143\u7ec4\u5c01\u88c5\u5e76push\u8fdbHash\n        insert1(s);\n    }\n    q[++r]=(node){-1,0,1,0};//\u521d\u59cb\u8282\u70b9\u5165\u961f\n    for(;r>=l;){//\u624b\u5199\u961f\u5217\u65b9\u4fbf\u9012\u5f52\u8f93\u51fa\n        f=q[++l];\n        u=f.u;\n        for(register int i=0;i<g[u].size();++i){\n            v=g[u][i];\n            //\u5c01\u88c5\u4eceu\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u8d70\u5411u\u518d\u8d70\u5411v\u662f\u5426\u6709\u4e09\u5143\u7ec4\u9650\u5236\n            s=0,s+=f.pre,s*=base,s+=u,s*=base,s+=v;\n            if(find(s))continue;//\u5982\u679c\u6709\u5219\u4e0d\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\n            s=0,s+=u,s*=base,s+=v;\n            //\u518d\u5904\u7406\u8fd9\u4e2a\u70b9\u662f\u4e0d\u662f\u7531\u540c\u4e00\u4e2a\u70b9\u66f4\u65b0\u800c\u6765\u7684\n            if(find2(s))continue;//\u5982\u679c\u6709\u4e5f\u4e0d\u5904\u7406(\u5904\u7406\u540e\u7ed3\u679c\u4e00\u6837)\n\t    insert2(s);\n            if(v==n){//\u8fbe\u5230\u76ee\u6807\u9012\u5f52\u8f93\u51fa\u8def\u5f84\n                printf(\"%d\\n\",f.ti+1);\n                pri(f);\n                printf(\"%d\",n);\n                return 0;\n            }\n            //\u65b0\u72b6\u6001\u5165\u961f\n            q[++r]=(node){l,u,v,f.ti+1};\n        }\n    }\n    //\u65e0\u89e3\n    puts(\"-1\");\n    return 0;\n}\n```",
        "postTime": 1606394053,
        "uid": 374929,
        "name": "SpeMars",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF59E \u3010Shortest Path\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u76ee\u662f\u6c42\u5e26\u9650\u5236\u6761\u4ef6\u7684\u6700\u77ed\u8def\uff0c\u60f3\u5230 BFS\u3002\n\n\u5f53\u6211\u8d70\u5230\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8bb0\u5f55\u56db\u4e2a\u503c $o,las,dis,fro$\uff0c\u4f9d\u6b21\u4ee3\u8868\u6211\u73b0\u5728\u6240\u5904\u7684\u70b9\uff0c\u6211\u7684\u4e0a\u4e00\u4e2a\u70b9\uff0c\u6211\u8d70\u8fc7\u7684\u8ddd\u79bb\uff0c\u6211\u662f\u4ece\u961f\u5217\u7684\u51e0\u53f7\u5143\u7d20\u8f6c\u79fb\u6765\u7684\uff08\u4fbf\u4e8e\u6700\u540e\u8f93\u51fa\u65b9\u6848\uff09\u3002\n\n\u8fd9\u6837\uff0c\u6211\u679a\u4e3e\u4e0b\u4e00\u4e2a\u70b9 $v$\u200b \u7684\u65f6\u5019\uff0c\u6211\u53ea\u7528\u5224\u65ad\u5982\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n1. $las,o,v$\u200b \u662f\u5426\u662f\u4e00\u4e2a**\u88ab\u7981\u6b62\u7684**\u4e09\u5143\u7ec4\u3002\n\n   \u7528 C++11 \u7684 `Tuple` \u51fd\u6570\uff08\u5373 `pair` \u7684\u5347\u7ea7\u7248\uff0c\u53ef\u4ee5\u6709\u4e09\u5143\u7ec4\u3001\u56db\u5143\u7ec4\u7b49\u7b49\uff09\uff0c\u53ef\u4ee5\u8f7b\u677e\u5224\u91cd\u3002\n\n2. \u628a\u53cc\u5411\u8fb9\u62c6\u6210\u4e24\u6761\u5355\u5411\u8fb9\u540e\uff0c\u5224\u65ad\u8fd9\u6761\u8fb9\u6709\u6ca1\u6709\u88ab\u8d70\u8fc7\u3002\u56e0\u4e3a\u8fd9\u662f BFS\uff0c\u65e9\u6807\u8bb0\u7684\u65f6\u95f4\u80af\u5b9a\u4e0d\u5927\u4e8e\u665a\u6807\u8bb0\u7684\u65f6\u95f4\u3002\n\n\u6700\u7ec8\u5229\u7528 $fro$ \u53bb\u9012\u5f52\uff0c\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002\n\n```c++\n#include<bits/stdc++.h>\n#define rep(i,x,y) for(int i=x;i<=y;++i)\n#define mar(o) for(int E=fst[o];E;E=e[E].nxt)\n#define v e[E].to\n#define MP make_tuple\nusing namespace std;\nconst int n7=3012,m7=20123*2;\nstruct dino{int to,nxt;}e[m7];\nstruct cafe{int o,las,dis,fro;}que[m7];\nint n,m,K,head,tail,ecnt,fst[n7];bool u[m7];\nmap < tuple<int,int,int>,bool > mop;\n\nint rd(){\n\tint shu=0;bool fu=0;char ch=getchar();\n\twhile( !isdigit(ch) ){if(ch=='-')fu=1;ch=getchar();}\n\twhile( isdigit(ch) )shu=(shu<<1)+(shu<<3)+ch-'0',ch=getchar();\n\treturn fu?-shu:shu;\n}\n\nvoid edge(int sta,int edn){\n\tecnt++;\n\te[ecnt]=(dino){edn,fst[sta]};\n\tfst[sta]=ecnt;\n}\n\nvoid output(int z){\n\tif(que[z].fro)output(que[z].fro);\n\tprintf(\"%d \",que[z].o);\n}\n\nvoid bfs(){\n\tque[1].o=1,head=tail=1;\n\twhile(head<=tail){\n\t\tcafe now=que[head];\n\t\tmar(now.o){\n\t\t\tif(u[E]||mop[ MP(now.las,now.o,v) ])continue;\n\t\t\tif(v==n){\n\t\t\t\tprintf(\"%d\\n\",now.dis+1);\n\t\t\t\toutput(head);\n\t\t\t\tprintf(\"%d\",n);\n\t\t\t\texit(0);\n\t\t\t}\n\t\t\tu[E]=1,tail++;\n\t\t\tque[tail]=(cafe){v,now.o,now.dis+1,head};\n\t\t}\n\t\thead++;\n\t}\n}\n\nint main(){\n\tn=rd(),m=rd(),K=rd();\n\trep(i,1,m){\n\t\tint sta=rd(),edn=rd();\n\t\tedge(sta,edn),edge(edn,sta);\n\t}\n\trep(i,1,K){\n\t\tint p=rd(),q=rd(),z=rd();\n\t\tmop[ MP(p,q,z) ]=1;\n\t}\n\tbfs();\n\tputs(\"-1\");\n\treturn 0;\n}\n```\n\n",
        "postTime": 1629018929,
        "uid": 99623,
        "name": "BlankAo",
        "ccfLevel": 0,
        "title": "CF59E"
    },
    {
        "content": "# \u3010\u56fe\u8bba\u8bb0\u5f55\u3011CF59E Shortest Path\n\n\u770b\u4e86\u9898\u89e3\n\n## \u9898\u610f\n\n\u6709 $n $ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u8fb9\u6743\u4e3a $1$ \u7684\u65e0\u5411\u56fe\u3002\u6709 $k$ \u4e2a\u6709\u5e8f\u7684\u4e09\u5143\u7ec4 $(x,y,z)$ \uff0c\u4e0d\u80fd\u51fa\u73b0\u8fde\u7eed\u8d70\u8fc7 $x,y,z$\u3002\u6c42 $1$ \u5230 $n$ \u6700\u77ed\u8def\u5e76\u8f93\u51fa\u8def\u5f84\u3002\n\n$1\\le n\\le 3000,1\\le m \\le 2\\times 10^4,1\\le k\\le 10^5$\n\n## \u9898\u89e3\n\n\u8fb9\u6743\u4e3a $1$ \u7684\u6700\u77ed\u8def\uff0c\u8003\u8651\u76f4\u63a5 $bfs$\u3002\u5bf9\u4e8e\u4e09\u5143\u7ec4\uff0c\u53ef\u4ee5\u7528 $map$ \u6216\u8005\u54c8\u5e0c\u5b58\u4e0b\u6765\u3002\n\n\u73b0\u5728\u6709\u4e2a\u975e\u5e38 $naive$ \u7684\u60f3\u6cd5(\u5168\u662f\u6211\u5f53\u65f6\u7684\u60f3\u6cd5)\uff0c\u76f4\u63a5\u8dd1\u6700\u77ed\u8def\uff0c\u961f\u5217\u91cc\u5b58\u4e0a\u4e00\u6b21\u7684\u70b9\u548c\u4e0a\u4e0a\u6b21\u7684\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u524d\u9a71\u3002\n\n\u5f53\u7136\u8fd9\u662f\u6709\u5f88\u591a\u95ee\u9898\u7684\u3002\n\n* \u961f\u5217\u91cc\u8fd8\u8981\u5b58\u8d70\u5230\u4e0a\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\n\n\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5927\u5c0f\u662f\u4f1a\u4e0d\u65ad\u88ab\u66f4\u65b0\u4e14\u53d8\u5927\u7684\uff0c\u6240\u4ee5\u8981\u5b58\u4e0b\u5f53\u524d\u7684\u6700\u77ed\u8def\n\n* \u4e0d\u80fd\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u524d\u9a71\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u8bb0\u5f55\u524d\u9a71\n\n\u628a\u53cc\u5411\u8fb9\u62c6\u4e3a\u4e24\u6761\u5355\u5411\u8fb9\uff0c\u5f88\u663e\u7136\u6bcf\u6761\u8fb9\u6700\u591a\u88ab\u8d70\u8fc7\u4e00\u904d\u3002\u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u4f18\u5316\uff1a\n\n* \u5982\u679c\u8fd9\u6761\u8fb9\u88ab\u641c\u8fc7\uff0c\u5219\u4e0d\u7ee7\u7eed\u641c\n\n## Code\n\n```cpp\n#define maxn 3005\n#define maxm 100005\nint n,m,k,h[maxn],head=1,vis[maxm];\nint pre[maxm],ans[maxn],tot;\nstruct node{\n\tint x,y,z;\n\tbool operator <(const node &a)const{\n\t    if (x^a.x) return x<a.x;\n\t    if (y^a.y) return y<a.y;\n\t    return z<a.z;\n\t}\n\tnode (int a=0,int b=0,int c=0){\n\t\tx=a,y=b,z=c;\n\t}\n};\nmap<node,bool>mp;\nstruct yyy{\n\tint to,z;\n\tinline void add(int x,int y){\n\t\tto=y;z=h[x];h[x]=head;\n\t}\n}a[maxm];\nqueue<node>q;\ninline void print(int now){\n\trg int i;\n\twhile (now){\n\t\tans[++tot]=a[now^1].to;\n\t\tnow=pre[now];\n\t}\n\tfor (i=tot;i;i--) printf(\"%d \",ans[i]);printf(\"%d \",n);\n}\ninline int bfs(void){\n\trg int i,x,y,z;\n\tq.push(node(1,0,0));\n\twhile (!q.empty()){\n\t\tx=q.front().x;y=q.front().y;z=q.front().z;q.pop();\n\t\tfor (i=h[x];i;i=a[i].z)\n\t\t    if (!vis[i]&&mp[node(a[y^1].to,x,a[i].to)]==0){\n\t\t    \tpre[i]=y;q.push(node(a[i].to,i,z+1));vis[i]=1;\n\t\t    \tif (a[i].to==n) return printf(\"%d\\n\",z+1),print(i),0;\n\t\t\t}\n\t}\n\tputs(\"-1\");\n}\nsigned main(){\n    rg int i,x,y,z;\n    read(n);read(m);read(k);\n    for (i=1;i<=m;i++){\n    \tread(x);read(y);\n    \ta[++head].add(x,y);\n    \ta[++head].add(y,x);\n\t} \n\tfor (i=1;i<=k;i++){\n\t\tread(x);read(y);read(z);\n\t\tmp[node(x,y,z)]=1;\n\t\t\n\t}\n\tbfs();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1623151705,
        "uid": 51569,
        "name": "\u8fdd\u89c4\u7528\u6237\u540dFkZyA0!2",
        "ccfLevel": 0,
        "title": "\u3010\u56fe\u8bba\u8bb0\u5f55\u3011CF59E Shortest Path"
    },
    {
        "content": "\u5bf9\u4e8e $k$ \u5bf9\u6709\u5e8f\u7684\u4e09\u5143\u7ec4 $(x,y,z)$ \u4e3a\u4e0d\u80fd\u8d70\u7684\u8def\u7ebf\u3002\u672c\u9898\u5bf9\u9009\u62e9\u6070\u5f53\u7684\u5de5\u5177\u5b58\u50a8\u4e09\u5143\u7ec4\u6709\u7740\u8f83\u9ad8\u7684\u8981\u6c42\u3002\n\n\u9996\u5148\u60f3\u5230\u7684\u662f `map` \u4e0e `set`\uff0c\u4ee4 `set <int> ban[x][y]` \u8bb0\u5f55\u5f62\u5982 $x \\to y \\to z_i$ \u7684\u6240\u6709 $z_i$\u3002\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u8bb0\u5f55\u4e00\u4e2a\u70b9 $u$ \u7684\u524d\u9a71 $p$ \u70b9\u7684\u540c\u65f6\u904d\u5386\u540e\u7ee7\u8282\u70b9 $v$\uff0c\u82e5 $(u,v,z)$ \u5408\u6cd5\uff0c\u5373 `ban[x][y].find (z) == ban[x][y].end ()`\uff0c\u540c\u65f6\u8be5\u8def\u5f84\u53ef\u4ee5\u66f4\u65b0\uff0c\u90a3\u4e48\u52a0\u5165\u961f\u5217\u4e2d\u53bb\u5e76\u8bb0\u5f55\u4e0b\u524d\u9a71\u8282\u70b9\uff08\u7528\u4e8e\u8def\u5f84\u7684\u8f93\u51fa\uff09\u3002\u4e8e\u662f\u5f97\u5230\u4e86\u4ee5\u4e0b\u6838\u5fc3\u4ee3\u7801\uff1a\n\n```cpp\nset <int> ban[MAX][MAX];\nvoid bfs ()\n{\n\tq.push ({0,1});\n\twhile (!q.empty ())\n\t{\n\t\tpair <int,int> x = q.front ();q.pop ();\n\t\tint p = x.first,u = x.second;\n\t\tif (u == n)\n\t\t{\n\t\t\tprintf (\"%d\\n\",dis[p][u]);\n\t\t\tprint (p,u);\n\t\t\tok = 1;puts (\"\");\n\t\t\treturn ;\n\t\t}\n\t\tfor (auto v : ve[u])\n\t\t{\n\t\t\tif (ban[p][u].find (v) == ban[p][u].end () && !dis[u][v])\n\t\t\t{\n\t\t\t\tpre[u][v] = p;dis[u][v] = dis[p][u] + 1;\n\t\t\t\tq.push ({u,v});\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\u867d\u7136\u80fd\u8fc7\u6837\u4f8b\uff0c\u53ef\u662f\u2026\u2026\u4e00\u4ea4\u53d1\u73b0 $\\texttt{MLE}$\u3002\u4ed4\u7ec6\u4e00\u770b $k$ \u7684\u8303\u56f4\uff0c\u76f4\u63a5\u5bc4\u3002\u4e8e\u662f\u5c1d\u8bd5\u7528\u54c8\u5e0c\u6765\u4f18\u5316\u7a7a\u95f4\u3002\u5927\u4f53\u601d\u8def\u76f8\u540c\uff0c\u800c\u8fd9\u6b21\u7528 $xyz+x+y+z$ \u5bf9\u5927\u8d28\u6570 $p$ \u7684\u503c\u6765\u8868\u793a $(x,y,z)$\uff0c\u8003\u8651\u5230\u91cd\u590d\uff0c\u7528 `vector <tri> hsh[M]` \u6765\u8bb0\u5f55\u540c\u4e00\u4e2a\u503c\u7684\u4e0d\u540c\u4e09\u5143\u7ec4\uff0c\u8fd9\u6837\u7a7a\u95f4\u4fbf\u53ef\u5927\u5927\u964d\u4f4e\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\u4ee3\u7801\u5982\u4e0b:\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <queue>\n#include <set>\n#include <vector>\n#define init(x) memset (x,0,sizeof (x))\n#define ll long long\n#define ull unsigned long long\n#define INF 0x3f3f3f3f\nusing namespace std;\nconst int MAX = 3005;\nconst int M = 999983;\nconst int MOD = 1e9 + 7;\ninline int read ();\nstruct tri\n{\n\tint x,y,z;\n};\nint n,m,k,ok,dis[MAX][MAX],pre[MAX][MAX];\nvector <int> ve[MAX];\nvector <tri> hsh[M];\nqueue <pair <int,int> > q;\nint get (int x,int y,int z);\nvoid add (int u,int v);\nbool check (int x,int y,int z);\nvoid bfs ();\nvoid print (int u,int v);\nint main ()\n{\n\t//freopen (\".in\",\"r\",stdin);\n\t//freopen (\".out\",\"w\",stdout);\n\tn = read ();m = read ();k = read ();\n\tfor (int i = 1;i <= m;++i)\n\t{\n\t\tint x = read (),y = read ();\n\t\tve[x].push_back (y);ve[y].push_back (x);\n\t} \n\tfor (int i = 1;i <= k;++i)\n\t{\n\t\tint x = read (),y = read (),z = read ();\n\t\thsh[get (x,y,z)].push_back ((tri){x,y,z});\n\t}\n\tbfs ();\n\tif (!ok) puts (\"-1\");\n\treturn 0;\n}\ninline int read ()\n{\n    int s = 0;int f = 1;\n    char ch = getchar ();\n    while ((ch < '0' || ch > '9') && ch != EOF)\n\t{\n        if (ch == '-') f = -1;\n        ch = getchar ();\n    }\n    while (ch >= '0' && ch <= '9')\n\t{\n        s = s * 10 + ch - '0';\n        ch = getchar ();\n    }\n    return s * f;\n}\nint get (int x,int y,int z)//\u8fdb\u884c\u54c8\u5e0c\u64cd\u4f5c\n{\n\treturn (1ll * x * y * z % M + 1ll * x + 1ll * y + 1ll * z) % M;\n}\nbool check (int x,int y,int z)//\u68c0\u6d4b\u662f\u5426\u5408\u6cd5\n{\n\tfor (auto tmp : hsh[get (x,y,z)])\n\t\tif (tmp.x == x && tmp.y == y && tmp.z == z) return 1;\n\treturn 0;\n}\nvoid bfs ()\n{\n\tq.push ({0,1});\n\twhile (!q.empty ())\n\t{\n\t\tpair <int,int> x = q.front ();q.pop ();\n\t\tint p = x.first,u = x.second;\n\t\tif (u == n)\n\t\t{\n\t\t\tprintf (\"%d\\n\",dis[p][u]);//\u8f93\u51fa\u8def\u5f84\u957f\u5ea6\n\t\t\tprint (p,u);\n\t\t\tok = 1;puts (\"\");\n\t\t\treturn ;\n\t\t}\n\t\tfor (auto v : ve[u])\n\t\t{\n\t\t\tif (!check (p,u,v) && !dis[u][v])//\u5408\u6cd5\u4e14\u80fd\u8fc7\u66f4\u65b0\n\t\t\t{\n\t\t\t\tpre[u][v] = p;dis[u][v] = dis[p][u] + 1;\n\t\t\t\tq.push ({u,v});\n\t\t\t}\n\t\t}\n\t}\n}\nvoid print (int u,int v)// \u9012\u5f52\u8f93\u51fa\u8def\u5f84\n{\n\tif (!v) return ;//\u7ec8\u6b62\u6761\u4ef6\n\tprint (pre[u][v],u);\n\tprintf (\"%d \",v);\n}\n```",
        "postTime": 1683542301,
        "uid": 183603,
        "name": "SUNCHAOYI",
        "ccfLevel": 6,
        "title": "\u9898\u89e3\u3010CF59E Shortest Path\u3011"
    },
    {
        "content": "\u7b80\u5355\u9898\u3002\n\n\u6211\u4eec\u4f7f\u7528 `map+tuple<int,int,int>` \u6765\u5224\u65ad\u6bcf\u4e2a\u4e09\u5143\u7ec4\u662f\u5426\u88ab\u8bc5\u5492\uff0c\u7136\u540e\u8dd1 SPFA\uff0cSPFA \u7684 $\\tt node$ \u53ef\u4ee5\n\n+ \u8bb0\u5f55\u8fd9\u4e2a\u72b6\u6001\u662f\u901a\u8fc7\u54ea\u4e2a\u72b6\u6001\u6765\u7684\uff0c\u6765\u5f97\u5230\u6700\u7ec8\u7684\u8def\u5f84\u3002\n+ \u8bb0\u5f55\u8fd9\u4e2a\u70b9\u7684\u4e0a\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u70b9\u7684\u4e0a\u4e00\u4e2a\u70b9\u7684\u4e0a\u4e00\u4e2a\u70b9\uff08\u4e3a\u4e86\u68c0\u67e5\u662f\u5426\u662f\u88ab\u8bc5\u5492\u4e09\u5143\u7ec4\uff09\n\n\u961f\u5217\u662f\u624b\u5199\u7684\u6570\u7ec4\uff0c\u4e00\u65b9\u9762\u5e76\u4e0d\u4f1a\u6709\u592a\u591a\u7684\u72b6\u6001\u9700\u8981\u52a0\u5165\u961f\u5217\uff0c\u53e6\u4e00\u65b9\u9762\u8fd9\u6837\u4ee5\u524d\u7684\u72b6\u6001\u4e0d\u4f1a\u6d88\u5931\uff0c\u65b9\u4fbf\u6700\u540e\u67e5\u627e\u8def\u5f84\u7684\u65f6\u5019\u83b7\u53d6\u3002\n\n```cpp\n#define MT std::make_tuple\n#define TP std::tuple<int,int,int>\n#define PR std::pair<int,int>\n\nconst int maxn = 3e3 + 5;\nconst int maxm = 4e4 + 5;\nconst int inf = 1e9;\n\nint n,m,k,u,v,w;\nstd::vector<PR> G[maxn];\nstd::map<TP,bool> M;\n\nstruct node{\n\tint u,s,d,f;\n}; node q[maxm];\nint st = 1,ed = 0;\n\n#define node(a,b,c,d) (node){a,b,c,d}\n\nbool vis[maxm];\nint tmp[maxn],len;\n\nvoid SPFA(){\n\tq[++ed] = node(1,0,0,0);\n\twhile(st <= ed){\n\t\tint id; auto[u,s,d,f] = q[id = st++];\n\t\tif(u == n){\n\t\t\tint i = id;\n\t\t\twhile(i){\n\t\t\t\ttmp[++len] = q[i].u;\n\t\t\t\ti = q[i].f;\n\t\t\t}\n\t\t\tprint(len - 1,'\\n');\n\t\t\twhile(len) print(tmp[len--],' '); print('\\n');\n\t\t\texit(0);\n\t\t}\n\t\tfor(auto[v,i] : G[u]){\n\t\t\tif(M[MT(s,u,v)] || vis[i]) continue;\n\t\t\tvis[i] = true;\n\t\t\tq[++ed] = node(v,u,d,id);\n\t\t}\n\t}\n}\n\nint main(){\n\tread(n,m,k);\n\tint ec = 0;\n\trep(i,1,m){\n\t\tread(u,v);\n\t\tG[u].emplace_back(v,++ec);\n\t\tG[v].emplace_back(u,++ec);\n\t}\n\trep(i,1,k){\n\t\tread(u,v,w);\n\t\tM[MT(u,v,w)] = 1;\n\t}\n\tSPFA();\n\tprint(\"-1\\n\");\n    return 0;\n}\n```",
        "postTime": 1664971790,
        "uid": 333549,
        "name": "TammyZhao",
        "ccfLevel": 0,
        "title": "CF59E Shortest Path"
    },
    {
        "content": "RT\uff0c\u548c P1811 \u662f\u53cc\u500d\u7ecf\u9a8c\uff0c\u4f46\u662f\u88ab\u90a3\u9053\u9898\u5361\u4e86\u7a7a\u95f4\u3002\n\n## \u9898\u610f\u7b80\u8ff0\n\n> \u7ed9\u5b9a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u6743\u56fe\uff0c\u4ee5\u53ca\u82e5\u5e72\u6761\u9650\u5236\u6761\u4ef6\uff0c\u8868\u793a\u4e0d\u80fd\u8fde\u7eed\u7ecf\u8fc7 $a,b,c$ \u4e09\u4e2a\u70b9\uff0c\u6c42\u4ece $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u3002\n\n## \u89e3\u6cd5\n\n\u770b\u5230\u65e0\u6743\u56fe\u6700\u77ed\u8def\uff0c\u76f4\u63a5\u4e0a\u5e7f\u641c\u3002\u96be\u70b9\u4e3b\u8981\u5728\u4e8e\u9650\u5236\u6761\u4ef6\u600e\u4e48\u5224\u65ad\u548c\u66f4\u65b0\u3002\n\n\u5148\u89e3\u51b3\u9650\u5236\u6761\u4ef6\u7684\u5b58\u50a8\u95ee\u9898\u3002\u4e00\u5f00\u59cb\u6ca1\u8fc7\u8111\u5b50\u5f00\u4e86\u4e00\u4e2a `vector<int>k[3005][3005]`\uff0c\u7136\u540e\u6761\u4ef6 $(a,b,c)$ \u5c31\u5b58\u50a8\u4e3a `k[a][b].push_back(c)`\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u904d\u5386\u4e00\u904d `k[a][b]` \u5373\u53ef\u3002CF \u4e0a\u53ef\u8fc7\uff0cP1811 \u4f1a MLE\u3002\u4e8e\u662f\u6539\u4e3a\u7d22\u5f15\u4e00\u4e2a\u70b9\uff08\u4f8b\u5982 $b$\uff09\uff0c`vector` \u91cc\u5b58\u50a8 `pair<int,int>` \u8bb0\u5f55 $(a,c)$\u3002\u8fd9\u6837\u7a7a\u95f4\u5c31\u53ef\u4ee5\u5361\u7684\u975e\u5e38\u5c0f\u4e86\u3002\u672c\u4ee5\u4e3a\u65f6\u95f4\u4f1a\u727a\u7272\u4e00\u70b9\uff0c\u7ed3\u679c\u53cd\u5012\u65f6\u95f4\u66f4\u5feb\u4e86\uff08\uff08\uff08\n\n\u8fd9\u91cc\u60f3\u4e86\u4e00\u4e2a\u5c0f\u4f18\u5316\uff0c\u6ca1\u6709\u5b9e\u73b0\uff0c\u5c31\u662f\u5982\u679c\u9650\u5236\u6761\u4ef6\u66f4\u591a\uff0c\u53ef\u4ee5\u5bf9 `vector` \u505a\u6392\u5e8f\uff0c\u7136\u540e\u4e8c\u5206\u53bb\u627e\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\u3002\u4ee3\u4ef7\u662f\u8981\u591a\u4e00\u4e2a\u6392\u5e8f\uff0c\u4e0d\u77e5\u9053\u65f6\u95f4\u80fd\u4e0d\u80fd\u66f4\u5feb\u3002\n\n\u518d\u8003\u8651\u600e\u4e48\u66f4\u65b0\u3002\u4e00\u5f00\u59cb\u6ca1\u6ce8\u610f\u5230\u662f\u65e0\u6743\u56fe\uff0c\u4ee5\u4e3a\u8981\u8dd1 Dijkstra\uff0c\u7136\u540e\u6253\u7b97\u7ed9\u6bcf\u4e2a\u70b9\u624b\u5199\u4e2a\u6808\u8bb0\u5f55\u66f4\u65b0\u8fc7\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u70b9\u4ee5\u53ca\u5bf9\u5e94\u7684\u6700\u77ed\u8def\u3002\u663e\u7136\u8fd9\u4e2a\u6808\u5173\u4e8e\u6700\u77ed\u8def\u4ece\u9876\u5230\u5e95\u5355\u8c03\u9012\u51cf\uff0c\u7528\u7684\u65f6\u5019\u5982\u679c\u53d1\u73b0\u4e0d\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\uff0c\u5c31\u4ece\u9876\u5230\u5e95\u5f00\u59cb\u627e\u7b2c\u4e00\u4e2a\u80fd\u7b26\u5408\u6761\u4ef6\u7684\u53bb\u66f4\u65b0\uff08\u6ce8\u610f\u4e0d\u5f39\u51fa\uff09\u3002\u4f46\u662f\u5728\u5904\u7406\u524d\u9a71\u8282\u70b9\u8bb0\u5f55\u4e0a\u6ca1\u60f3\u597d\u600e\u4e48\u641e\u3002\u540e\u6765\u53d1\u73b0\u65e0\u6743\u56fe\uff0c\u5c31\u7b80\u5355 bfs\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u5c31\u4e0d\u5165\u961f\u5373\u53ef\u3002\u4e3a\u4e86\u65b9\u4fbf\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\uff0c\u5c06\u6309\u70b9 bfs \u6539\u4e3a\u6309\u8fb9 bfs\uff0c\u524d\u5411\u661f\u91cc\u8bb0\u5f55\u4e00\u4e2a `from`\uff0c\u7136\u540e\u961f\u5217\u91cc\u9762\u538b\u524d\u5411\u661f\u7684\u8fb9\u7f16\u53f7\u5373\u53ef\u3002\n\n\u6700\u540e\u6709\u4e00\u6b65\u8f93\u51fa\u8def\u5f84\uff0c\u5e38\u89c4\u5957\u8def\u8bb0\u5f55\u524d\u9a71\u8282\u70b9\uff0c\u6700\u540e\u56de\u6eaf\u5230 1 \u53f7\u8282\u70b9\u53cd\u5411\u8f93\u51fa\u5373\u53ef\u3002\n\n\u5728 bfs \u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f00\u4e8c\u7ef4\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u6700\u77ed\u8def\u548c\u5f53\u524d\u8fb9\u524d\u9a71\uff0c\u4f46\u662f\u4e3a\u4e86\u538b\u7a7a\u95f4\uff0c\u4ee3\u7801\u4e2d\u6539\u4e3a\u4e86\u76f4\u63a5\u8bb0\u5f55\u8fb9\u7f16\u53f7\u3002\n\n## \u4ee3\u7801\n\n```cpp\n//\u5feb\u8bfb\u5feb\u5199\u51fd\u6570\u58f0\u660e\u5982\u4e0b\nint read()\nvoid wr(int x, char ch='\\n')\n\n#define pii pair<int, int>\nconst int N=3005,M=40005;\nint tot=0,head[N],to[M],nxt[M],from[M];\ninline void addedge(int u, int v) {\n\tto[++tot]=v;\n\tfrom[tot]=u;\n\tnxt[tot]=head[u];\n\thead[u]=tot;\n}\ninline void add(int u, int v) {\n\taddedge(u,v);\n\taddedge(v,u);\n}\n\nvector< pii >k[N];\nqueue<int>Q;\nint dis[M],pre[M],ans[N],tail=1;\n\nint n,m,K,x,y,a,b,c;\nint elast;\n\nint bfs() {\n\tto[0]=1,from[0]=0,nxt[0]=head[0]=0;\n\tQ.push(0);\n\twhile(!Q.empty()) {\n\t\tint epre=Q.front();\n\t\tQ.pop();\n\t\tint fa=from[epre],u=to[epre];\n\t\tif(u==n) {\n\t\t\telast=epre;\n\t\t\treturn fa;\n\t\t}\n\t\tfor(int e=head[u];e;e=nxt[e]) {\n\t\t\tint v=to[e];\n\t\t\tif(v==u||dis[e]) continue;\n\t\t\tbool flag=true;\n\t\t\tfor(int i=0;i<k[v].size();++i) {\n\t\t\t\tif(k[v][i].second==u&&k[v][i].first==fa) {\n\t\t\t\t\tflag=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag) {\n\t\t\t\tdis[e]=dis[epre]+1;\n\t\t\t\tpre[e]=epre;\n\t\t\t\tQ.push(e);\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n\nint main(void) {\n\tn=read(),m=read(),K=read();\n\twhile(m--) {\n\t\tx=read(),y=read();\n\t\tadd(x,y);\n\t}\n\twhile(K--) {\n\t\ta=read(),b=read(),c=read();\n\t\tk[c].push_back(pii(a,b)); \n\t}\n\tint fa=bfs();\n\tif(fa==-1) wr(-1);\n\telse {\n\t\twr(dis[elast]),wr(1,' ');\n\t\tint sw,cur=n,curedge=elast;\n\t\twhile(cur^1) {\n\t\t\tans[tail++]=cur;\n\t\t\tsw=fa;\n\t\t\tcuredge=pre[curedge];\n\t\t\tfa=from[curedge];\n\t\t\tcur=sw;\n\t\t}\n\t\twhile(--tail) wr(ans[tail],' ');\n\t}\n\treturn 0;\n}\n```\n\n\u65f6\u95f4\uff1a41ms\n\n\u7a7a\u95f4\uff1a1.90MB\n\n\u4e0a\u8ff0\u4ee3\u7801\u4e0e\u539f\u4ee3\u7801\u7565\u6709\u533a\u522b\u3002",
        "postTime": 1660104994,
        "uid": 372299,
        "name": "\u8d85\u7ea7\u739b\u4e3d\u738b\u5b50",
        "ccfLevel": 5,
        "title": "CF59E - \u6709\u9650\u5236\u5e7f\u641c\u6700\u77ed\u8def"
    },
    {
        "content": "## \u9898\u89e3\n\n### \u9898\u76ee\u5927\u610f\n\n\u6709 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u8fb9\u6743\u4e3a $1$ \u7684\u65e0\u5411\u56fe\u3002\u6709 $k$ \u4e2a\u6709\u5e8f\u7684\u4e09\u5143\u7ec4 $(x,y,z)$ \uff0c\u4e0d\u80fd\u51fa\u73b0\u8fde\u7eed\u8d70\u8fc7 $x,y,z$\u3002\u6c42 $1$ \u5230 $n$ \u6700\u77ed\u8def\u5e76\u8f93\u51fa\u8def\u5f84\u3002\n\n### Sulotion\n\n\u672c\u9898\u53ef\u4ee5\u4f7f\u7528\u5e7f\u641c+hash\u6280\u672f\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u628a\u7ed9\u5b9a\u7684\u4e09\u5143\u7ec4\u54c8\u5e0c\u4e00\u4e0b\uff0c\u7136\u540e\u6253\u8fdb\u53bb\n\n\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u641c\u7d22\u7684\u65f6\u5019\u5c31check\u4e00\u4e0b\n\n\u6211\u4eec\u5728BFS\u7684\u65f6\u5019\u987a\u624b\u8bb0\u5f55\u4e00\u4e0b\u4e0a\u4e00\u6761\u8fb9\uff0c\u5229\u7528\u53cc\u5411\u8fb9\u7684\u6027\u8d28check\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\n\n\u5177\u4f53\u89c1\u4ee3\u7801\u6ce8\u91ca\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=3e4+10;\nconst int maxk=1e6+10;\nconst int maxm=2e5+10;//\u968f\u4fbf\u5f00\u7684\u6570\u636e\u8303\u56f4\nconst int mod=99991;\nstruct myhash\n{\n    int x,y,z;\n}tmp[maxk];\nint tot=0;\nint n,m,k;\nvector<int >f[100000];\nint gethash(myhash tmp)\n{\n    return (((tmp.x*tmp.y)%mod*tmp.z)%mod+tmp.x+tmp.y-tmp.z)%mod;\n}//\u7b80\u5355hash\u503c\nvoid inserthash(int x,int y,int z)\n{\n    tmp[++tot].x=x;tmp[tot].y=y;tmp[tot].z=z;\n    int key=gethash(tmp[tot]);\n    f[key].push_back(tot);\n}//\u63d2\u5165\u4e00\u4e2ahash\u503c\uff0c\u5e76\u4e14\u5efa\u7acbhash\u8868\nbool check(int x,int y,int z)\n{\n    myhash kkk;kkk.x=x;kkk.y=y;kkk.z=z;\n    int tim=gethash(kkk);\n    for(int i=0;i<(int)f[tim].size();i++)//\n    {\n        myhash now=tmp[f[tim][i]];\n        if(now.x==x && now.y==y && now.z==z) return 1;\n    }\n    return 0;\n}//\u67e5\u8be2\u4e00\u4e0b\u5f53\u524d\u4e09\u5143\u7ec4\u662f\u5426\u5408\u6cd5\nint cnt=1,head[maxn],dis[maxm],pre[maxm];\nbool vis[maxm];\nstruct node\n{\n    int v,next;\n}e[maxm<<1];\nvoid add(int u,int v)\n{\n    e[++cnt].next=head[u];\n    e[cnt].v=v;\n    head[u]=cnt;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u56fe\nstruct now\n{\n    int u,last;\n};//\u8fd9\u5176\u5b9e\u662f\u4e00\u4e2apair\uff0c\u4f46\u662f\u6211\u5199\u8fd9\u9053\u9898\u7684\u65f6\u5019\u62bd\u98ce\u4e86\nnow make(int u,int last)\n{\n    now tmp;\n    tmp.u=u;tmp.last=last;\n    return tmp;\n}//make_pair\nvoid pp(int i)\n{\n    if(i) {pp(pre[i]);printf(\"%d \",e[i].v);}\n    else printf(\"1 \");\n}//\u53cd\u5411\u8f93\u51fa\uff0c\u8bb0\u5f55\u8fb9\u7684\u524d\u9a71\u5c31\u53ef\u4ee5\u4e86\nvoid bfs(int st)\n{\n    queue<now>q;\n    q.push(make(st,0));//\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u8282\u70b9\u548c\u4e0a\u4e00\u6761\u8fb9\n    while(!q.empty())\n    {\n        int u=q.front().u,last=q.front().last;q.pop();\n        for(int i=head[u];i;i=e[i].next)\n        {\n            int v=e[i].v;\n            if(check(e[last^1].v,u,v) || vis[i]) continue;\n            //\u5229\u7528\u53cc\u5411\u8fb9\u7684\u6027\u8d28\u627e\u5230\u4e0a\u4e00\u4e2a\u70b9\n            //\u663e\u7136\u5728\u6211\u4eec\u628a\u53cc\u5411\u8fb9\u62c6\u6210\u4e24\u4e2a\u5355\u5411\u8fb9\uff0c\u663e\u7136\u5c31\u4e0d\u53ef\u80fd\u7ecf\u8fc7\u4e00\u6761\u8fb9\u4e24\u6b21\n            pre[i]=last;dis[i]=dis[last]+1;vis[i]=1;//\n            if(v==n)\n            {\n                printf(\"%d\\n\",dis[i]);\n                pp(i);//\u5982\u679c\u627e\u5230\u4e86\u5c31\u8f93\u51fa\n                return;\n            }\n            q.push(make(v,i));\n        }\n    }\n    puts(\"-1\");//\u6ca1\u627e\u5230\u5c31-1\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1,u,v;i<=m;i++)\n        scanf(\"%d%d\",&u,&v),add(u,v),add(v,u);//\u62c6\u8fb9\n    //cout<<1<<endl;\n    for(int i=1,x,y,z;i<=k;i++)\n        scanf(\"%d%d%d\",&x,&y,&z),inserthash(x,y,z);//\u63d2\u5165\n    //cout<<check(1,4,3);\n    bfs(1);//\u76f4\u63a5\u7206\u641c\n    return 0;\n}\n```\n\n\n\n",
        "postTime": 1636073834,
        "uid": 178804,
        "name": "\u592a\u9633\u8d77\u665a\u4e86\u5462",
        "ccfLevel": 0,
        "title": "CF59E\u9898\u89e3"
    },
    {
        "content": "\u672c\u9898\u89e3\u4e0e @_NoOne \u5927\u4f6c \u7684\u9898\u89e3\u9ad8\u5ea6\u76f8\u4f3c\n\n\uff08\u672c\u6765\u53ea\u662f\u60f3\u5199\u4e2a\u505a\u9898\u8bb0\u5f55\uff0c\u4f46\u662f\u80fd\u4ea4\u9898\u89e3\u5c31\u4ea4\u5427\uff09\n\n\u90a3\u4e48\u5bf9\u4e8e\u672c\u9898\uff0c\u53ef\u4ee5\u60f3\u5230\u7684\u662f\u5fc5\u987b\u8bb0\u5f55\u8def\u5f84\uff0c\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u9898\u76ee\u7684\u8f93\u51fa\u8981\u6c42\uff0c\u4e5f\u662f\u6211\u4eec\u8981\u6ee1\u8db3\u9898\u76ee\u4e2d\u7684\u4e09\u5143\u7ec4\u5173\u7cfb\u5fc5\u987b\u8981\u7684\u505a\u6cd5\u3002\n\n\u56e0\u4e3a\u8fb9\u6743\u90fd\u662f$1$,\u4e0d\u96be\u60f3\u5230\u5e7f\u641c\u3002\n\n\u90a3\u4e48\u5047\u5982\u8bf4\u6211\u4eec\u5f53\u524d\u4e09\u6b65\u8d70\u7684\u662f$(x,y,z)$\u8fd9\u4e09\u4e2a\u8282\u70b9\uff0c\u5982\u4f55\u68c0\u7d22\u9650\u5236\u6761\u4ef6\u4e2d\u662f\u5426\u6709\u8fd9\u6837\u7684\u4e09\u5143\u7ec4\u5462?\n\n\u4e0d\u96be\u60f3\u5230**Hsah**,\u8bbe$h((x,y,z))=x*y*z+x+y+z \\ mod \\ m$\n\n\u5e73\u5747\u4e0b\u6765\u662f$O(1)$\u68c0\u7d22\u3002\n\n\u90a3\u4e48\u73b0\u5728\u6709\u4e00\u4e2a\u95ee\u9898\u4e86\uff0c\u5982\u6837\u4f8b3\uff0c\u6211\u4eec\u5982\u679c\u60f3\u8981\u6ee1\u8db3\u6761\u4ef6\u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u70b9\u4f1a\u53cd\u590d\u7ecf\u5386\u3002\n\n\u90a3\u4e48\u7528\u4e00\u8d2f\u7528\u7684\u6807\u8bb0\u70b9\u7684\u65b9\u6cd5\uff0c\u662f\u65e0\u6cd5\u89e3\u51b3\u672c\u9898\u7684\u3002\u53ea\u597d\u6362\u4e00\u79cd\u6807\u8bb0\u4e86\u3002\u3002\u3002\n\n\u901a\u8fc7\u89c2\u5bdf\uff0c\u5982\u679c\u6211\u4eec\u6700\u540e\u5f97\u5230\u7684\u8def\u5f84\u662f\u5e8f\u5217$a$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684\u4e8c\u5143\u7ec4$(a_i,a_{i+1})$\u4e24\u4e24\u4e4b\u95f4\u5fc5\u7136\u4e92\u5f02\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5982\u679c\u628a\u6bcf\u6761\u53cc\u5411\u8fb9\u62c6\u6210\u4e24\u6761\u5355\u5411\u8fb9\u4e4b\u540e\uff0c\u6211\u4eec\u80fd\u901a\u8fc7\u6807\u8bb0\u8fb9\u7684\u65b9\u5f0f\u6765\u4fdd\u8bc1\u8def\u5f84\u6700\u77ed\u3002\n\n\u6240\u4ee5\u5c31\u8bb0\u5f55\u4e0a\u4e00\u6761\u8fb9\u5c31\u884c\u4e86\u3002\n\n```\n#include<bits/stdc++.h>\n#define N 3005\n#define M 20005\n#define mod 99991\nusing namespace std;\nint n,m,k,idx;\nint a[N],head[N];\nint ans[N];\nint dis[N];\nstruct edge{\n\tint u,v,next;\n}e[2*M];\nstruct node{\n\tint x,y,z;\n};\nvoid add(int u,int v){\n\te[++idx].v=v;\n\te[idx].u=u;\n\te[idx].next=head[u];\n\thead[u]=idx;\n}\nint Hash(node a){\n\treturn (((a.x*a.y)%mod*a.z)%mod+a.x+a.y+a.z)%mod;\n}\nvector<node> v[mod+5];\nbool find(node a){\n\tint t=Hash(a);\n\tfor(int i=0;i<v[t].size();i++){\n\t\tif(v[t][i].x==a.x&&v[t][i].y==a.y&&v[t][i].z==a.z) return true;\n\t}\n\treturn false;\n}\nint path[N],cnt[N],p[N];\nbool vis[N];\nvoid print(int id){\n\tif(id){\n\t\tprint(p[id]);\n\t\tcout<<e[id].v<<' ';\n\t}\n\telse cout<<1<<' ';\n}\nvoid bfs(){\n\tfor(int i=1;i<=n;i++) dis[i]=-1;\n\tdis[1]=0;\n\tqueue<pair<int,int> > q;\n\tq.push(make_pair(1,0));\n\twhile(!q.empty()){\n\t\tint u=q.front().first,pre=q.front().second;\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].v;\n\t\t\tif(vis[i]) continue;\n\t\t\tif(pre){\n\t\t\t\tnode a;\n\t\t\t\ta.x=e[pre].u;\n\t\t\t\ta.y=u;\n\t\t\t\ta.z=v;\n\t\t\t\tif(find(a)) continue;\n\t\t\t}\n\t\t\tvis[i]=1;\n\t\t\tp[i]=pre;\n\t\t\tdis[i]=dis[pre]+1;\n\t\t\tif(v==n){\n\t\t\t\tcout<<dis[i]<<endl;\n\t\t\t\tprint(i);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tq.push(make_pair(v,i));\n\t\t}\n\t}\n\tcout<<-1;\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tidx=1;\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tfor(int i=1;i<=k;i++){\n\t\tnode a;\n\t\tscanf(\"%d%d%d\",&a.x,&a.y,&a.z);\n\t\tv[Hash(a)].push_back(a);\n\t}\n\tbfs();\n\treturn 0;\n}\n```\n",
        "postTime": 1612351304,
        "uid": 128870,
        "name": "chen_qian",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF59E \u3010Shortest Path\u3011"
    },
    {
        "content": "\u601d\u8def\uff1aBFS\n\n\u4e00\u770b\u8fd9\u4e2a\u9898\uff0c\u672c\u849f\u84bb\u5c31\u60f3\u5230\u4e86\u6700\u77ed\u8def\uff08\u60f3\u4e0d\u5230\u7684\u8bddGG\uff09\u53ea\u662f\u52a0\u4e00\u4e2a\u5224\u65ad\uff0c\u8bbepre[x]\u4e3ax\u7684\u4e0a\u4e00\u4e2a\u641c\u5230\u7684\u70b9\uff0c\u7136\u540e\u6bcf\u6b21\u641c\u7d22\u5224\u65adf[pre[x]][x]\u662f\u5426\u7b49\u4e8ev\u5c31\u884c\u4e86\u5457\n\n\u8fd8\u987a\u4fbf\u5410\u69fd\u4e86\u4e00\u4e0b\u4f60\u8c37\u7684\u8bc4\u7ea7\n\n\u53ef\u662f\u6253\u5b8c\u4e4b\u540e\uff0c\u6837\u4f8b\u6ca1\u8fc7\uff0cGG\n\n\u53d1\u73b0\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\uff0c\u56e0\u4e3a\u4e00\u4e2ax\u53ef\u80fd\u7531\u591a\u4e2a\u70b9\u8f6c\u79fb\u800c\u6765\n\n\u4e8e\u662f\u600e\u4e48\u529e\u5462\uff1f \u4e00\u822c\u641c\u7d22\u7684\u4e1c\u897f\uff0c\u601d\u8def\u9519\u4e86\uff0c\u591a\u534a\u662f\u72b6\u6001\u6ca1\u8bbe\u8ba1\u597d\u3002\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u6309\u8fb9\u641c\u7d22\uff0c\u7528\u961f\u5217\u8bb0\u5f55\u4e0b\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u7136\u540e\u5728\u641c\u7d22\u7684\u540c\u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5224\u65ad\u5230\u6240\u6709\u70b9x\u53ef\u80fd\u7684\u4e0a\u4e00\u5c42\uff0c\u4e8e\u662f\u5c31A\u4e86\u3002\n\n\u89c1\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<string>\n#include<queue>\n#include<cstdlib>\n#include<vector>\n#define il inline\nusing namespace std;\nconst int maxn=3005;\nconst int maxm=4e5+5;\nstruct Edge\n{\n    int next;\n    int to;\n}edge[maxm];\nstruct node\n{\n    int u;\n    int v;\n};\nqueue<node> q;\nvector<int> f[maxn][maxn];//f[x][y]\u8868\u793a\u4ecex\u5230y\u4e0d\u80fd\u901a\u8fc7\u7684\u70b9 \nint n,cnt,tot,m,k;\nint head[maxm],dis[maxn][maxn],ans[maxm],pre[maxn][maxn];\n//dis[x][y]\u8868\u793a\u70b91\u7ecf\u8fc7\u4e86x\u5230\u8fbey\u7684\u6700\u77ed\u8def\u5f84\n//\u7531\u4e8e\u8981\u8f93\u51fa\u8def\u5f84\uff0c\u6211\u4eec\u7528pre\u8bb0\u5f55\u8def\u5f84 \nil int read()//\u8bfb\u5165\u4f18\u5316 \n{\n    int num=0,f=1;\n    char ch=getchar();\n    while(!isdigit(ch))\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=num*10+ch-'0';\n        ch=getchar();\n    }\n    return num*f;\n}\nil bool check(int d,int u,int v)//\u5224\u65ad\u662f\u5426\u6709\u8bc5\u5492 \n{\n\tfor(int i=0;i<f[d][u].size();i++)\n\t\tif(f[d][u][i]==v) return false;\n\treturn true;\n}\nil void addedge(int from,int to)\n{\n//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9 \n    edge[++tot].next=head[from];\n    edge[tot].to=to;\n    head[from]=tot;\n}\nil void print(int d)\n{\n    printf(\"%d\\n1 \",dis[d][n]);\n    int tmp,fat=n;\n    while(fat!=1)\n    {\n        ans[++cnt]=fat;\n        tmp=d;d=pre[d][fat];fat=tmp;\n    }\n    for(int i=cnt;i>=1;i--)\n        printf(\"%d \",ans[i]);\n    printf(\"\\n\");\n}\nil void bfs()\n{\n\t//\u5e7f\u641c\u6a21\u677f \n    q.push((node){0,1});\n    while(!q.empty())\n    {\n        node tmp=q.front();q.pop();\n        int u=tmp.v,d=tmp.u;\n        if(u==n)\n        {\n            print(d);\n            exit(0);\n        }\n        for(int i=head[u];i;i=edge[i].next)\n        {\n            int v=edge[i].to;\n            if(check(d,u,v)&&!dis[u][v])\n            {\n                pre[u][v]=d;\n                dis[u][v]=dis[d][u]+1;\n                q.push((node){u,v});\n            }\n        }\n    }\n}\nint main()\n{\n    int x,y,z;\n    n=read();m=read();k=read();\n    for(int i=1;i<=m;i++)\n    {\n        x=read();y=read();\n        addedge(x,y);\n        addedge(y,x);\n    }\n    for(int i=1;i<=k;i++)\n    {\n        x=read();y=read();z=read();\n        f[x][y].push_back(z);//\u6ce8\u610f\u7531x\u5230y\u4ee5\u540e\uff0c\u4e0d\u80fd\u7ecf\u8fc7\u7684\u70b9\u4e0d\u53ea\u67091\u4e2a \n    }\n    bfs();\n    printf(\"-1\\n\");\n    return 0;\n}\n```\n",
        "postTime": 1565770743,
        "uid": 38481,
        "name": "doyo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF59E \u3010Shortest Path\u3011"
    }
]