[
    {
        "content": "## \u9898\u610f\n\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5728\u6c42\u51fa\u5176\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u8ba1\u7b97\u5176\u8fb9\u6743**\u6700\u5927\u80fd**\u6539\u53d8\u4e3a\u591a\u5c11\uff0c\u4f7f\u5f97\u5176\u80fd\u88ab\u5305\u62ec\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\n## $\\operatorname{Sol}$\n\u8fd9\u9898\u662f[\u8fd9\u9898](https://www.luogu.com.cn/problem/CF1184E1)\u7684\u52a0\u5f3a\u7248\uff0c\u5efa\u8bae\u5148 A \u4e86\u5f31\u5316\u7248\u518d\u6765\u770b\u672c\u9898\uff08\u867d\u7136\u89e3\u6cd5\u8c8c\u4f3c\u9664\u4e86\u6c42\u6700\u5c0f\u751f\u6210\u6811\u5e76\u6ca1\u6709\u4ec0\u4e48\u76f8\u540c\u5904\uff09\u3002\n\n\u4ee5\u4e0b\u9762\u8fd9\u4e2a\u56fe\u4e3a\u4f8b\uff0c\u5b9a\u4e49\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u4e3a\u6811\u8fb9\uff0c\u5176\u4f59\u8fb9\u4e3a\u975e\u6811\u8fb9\uff0c\u5c06\u6811\u8fb9\u52a0\u7c97\u6807\u51fa\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5upeds0n.png)\n\n\u6211\u4eec\u8003\u8651 $(4,2)$ \u8fd9\u6761\u975e\u6811\u8fb9\uff0c\u601d\u8003\u4e3a\u4ec0\u4e48\u5b83\u4e0d\u80fd\u88ab\u5305\u62ec\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\u663e\u7136\uff0c\u56e0\u4e3a\u5df2\u7ecf\u6709 $(1,4),(1,2)$ \u4e24\u6761\u8fb9\u5c06\u5176\u8054\u901a\uff0c\u4e14\u8fd9\u4e24\u6761\u8fb9\u7684\u6743\u503c\u5747\u5c0f\u4e8e\u8fb9 $(4,2)$ \u7684\u6743\u503c\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u8fb9 $(4,2)$ \u7684\u6743\u503c **\u5c0f\u4e8e\u7b49\u4e8e\u6811\u4e0a\u8fde\u63a5 $(4,2)$ \u7684\u4efb\u4e00\u6761\u8fb9\u7684\u6743\u503c**\uff0c\u5b83\u5c31\u80fd\u88ab\u5305\u62ec\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002\u56e0\u4e3a\u8981\u6700\u5927\u5316\u8fb9\u6743\uff0c\u5176\u6743\u503c\u5e94\u53d6\u6811\u4e0a\u8def\u5f84\u7684\u8fb9\u6743\u6700\u5927\u503c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u4fbf\u6709\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u7b97\u6cd5\uff1a\u5efa\u597d\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9 $(u,v)$\uff0c\u6211\u4eec\u5c06\u5176\u6743\u503c\u8d4b\u4e3a\u4ece $u$ \u81f3 $v$ \u6811\u4e0a\u8def\u5f84\u7684\u8fb9\u6743\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u663e\u7136\u53ef\u4ee5\u7528\u500d\u589e\u5b9e\u73b0\u3002\n## $\\operatorname{Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 5, M = 1e6 + 5, logN = 20;\n//\u7565\u53bb\u5feb\u8bfb\u677f\u5b50\nstruct edge{int nxt, to, dis;}e[N << 1];\nstruct Edge{int u, v, w, id, ans;}E[M];\nbool cmp(Edge x, Edge y){return x.w < y.w;}\nbool cmmp(Edge x, Edge y){return x.id < y.id;}\nint head[N], cnt;\nvoid add(int u, int v, int w){\n    e[++cnt].nxt = head[u];\n    e[cnt].to = v;\n    e[cnt].dis = w;\n    head[u] = cnt;\n}\nint n, m, fa[N], vis[M];\nint find(int k){return fa[k] == k ? k : fa[k] = find(fa[k]);}\n//\u500d\u589e\u9884\u5904\u7406--------------\nint f[N][logN], Max[N][logN], dep[N];\nvoid dfs(int u, int Fa){\n    for (int i = head[u], v; i; i = e[i].nxt){\n        v = e[i].to;\n        if (v == Fa)continue;\n        dep[v] = dep[u] + 1;\n        f[v][0] = u, Max[v][0] = e[i].dis;\n        dfs(v, u);\n    }\n}\nvoid init(){\n    for (int j = 1; j < logN; j++)\n        for (int i = 1; i <= n; i++)\n            f[i][j] = f[f[i][j - 1]][j - 1], \n            Max[i][j] = max(Max[i][j - 1], Max[f[i][j - 1]][j - 1]);\n}\n//\u500d\u589e\u9884\u5904\u7406--------------\nint LCA(int u, int v){\n    if (dep[u] < dep[v])swap(u, v);\n    for (int k = logN - 1; k >= 0; k--)\n        if (dep[f[u][k]] >= dep[v])\n            u = f[u][k];\n    if (u == v)return u;\n    for (int k = logN - 1; k >= 0; k--)\n        if (f[u][k] != f[v][k])\n            u = f[u][k], v = f[v][k];\n    return f[u][0];\n}\nint query(int u, int lca){\n    int ans = 0;\n    for (int k = logN - 1; k >= 0; k--)\n        if (dep[f[u][k]] >= dep[lca])\n            ans = max(ans, Max[u][k]);\n    return ans;\n}\n\nint main (){\n    read(n, m);\n    for (int i = 1; i <= m; i++)read(E[i].u, E[i].v), read(E[i].w), E[i].id = i;\n    sort(E + 1, E + 1 + m, cmp);\n    for (int i = 1; i <= n; i++)fa[i] = i;\n    for (int i = 1, sum = 0; i <= m; i++){\n        int uf = find(E[i].u), vf = find(E[i].v);\n        if (uf != vf){\n            fa[uf] = vf;\n            vis[i] = 1;//\u6807\u8bb0\u4e00\u4e0b\u6811\u8fb9\n            E[i].ans = -1;\n            add(E[i].u, E[i].v, E[i].w); add(E[i].v, E[i].u, E[i].w);\n            sum++;\n            if (sum == n - 1)break;\n        }\n    }\n    dfs(1, 0);\n    init();\n    for (int i = 1; i <= m; i++){\n        if (!vis[i]){\n            int lca = LCA(E[i].u, E[i].v);\n            E[i].ans = max(query(E[i].u, lca), query(E[i].v, lca));\n        }\n    }\n    sort(E + 1, E + 1 + m, cmmp);//\u6ce8\u610f\u8f93\u51fa\u8981\u6309\u7167\u8f93\u5165\u7684\u987a\u5e8f\u8f93\u51fa\n    for (int i = 1; i <= m; i++)\n        if (E[i].ans != -1)\n            write(E[i].ans);\n    return 0;\n}",
        "postTime": 1596794634,
        "uid": 180959,
        "name": "rouxQ",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1184E2 \u3010Daleks' Invasion (medium)\u3011"
    },
    {
        "content": "\u6613\u3001\u4e2d\u3001\u96be\u4e09\u4e2a\u7248\u672c\u4e2d\uff0c\u4e3b\u8981\u662f\u8981\u61c2\u5f97\u5b8c\u6574\u96be\u7248\u7684\u505a\u6cd5\uff08\u53e6\u4e24\u9898\u7684\u505a\u6cd5\u4e5f\u4f1a\u63d0\u5230\uff09\n# easy version\n\u53ea\u8be2\u95ee $1$ \u6761\u8fb9\uff0c\u53ef\u4ee5\u4e8c\u5206\u8fd9\u6761\u8fb9\u7684\u503c\uff0c\u6bcf\u6b21\u68c0\u9a8c\u7528 $\\text{Kruskal}$ \u6700\u5c0f\u751f\u6210\u6811\u68c0\u9a8c\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u8fb9\u6392\u5e8f\u7684\u65b9\u5f0f\u5e94\u5f53\u662f\u4ee5\u8fb9\u6743\u5347\u5e8f\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4ee5\u8fb9\u7684\u7f16\u53f7\u5347\u5e8f\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\n\n\u4f8b\u5982\u5b58\u5728\u8fb9 $(1,2,3),(1,3,4),(2,3,3)$\uff0c\u8fd9\u91cc\u7684\u7b2c\u4e00\u6761\u8fb9 $(1,2,3)$ \u5b58\u5728\u4e8e\u4e00\u79cd\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u4f46\u662f\u4e0d\u6309\u7167\u7f16\u53f7\u6392\u5e8f\u53ef\u80fd\u4f7f\u5f97\u6211\u4eec\u5f97\u5230\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u662f\u5305\u542b\u7b2c\u4e00\u6761\u8fb9\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(m\\log m\\log a)$\uff0c\u53ea\u4fee\u6539\u4e00\u6761\u8fb9\u6743\u503c\u6bcf\u6b21\u5192\u6ce1\u4e00\u4e0b\u4e5f\u53ef\u4ee5\u5feb\u4e00\u70b9\uff1f\n# medium version\n\u8be2\u95ee\u6240\u6709\u975e\u6811\u8fb9\u3002\n\n\u53ef\u4ee5\u753b\u51fa\u8fd9\u4e2a\u65e0\u5411\u56fe\u4ee5\u53ca\u5176\u6700\u5c0f\u751f\u6210\u6811\uff0c\u53d1\u73b0\u5f53\u6211\u4eec\u5c06\u4e00\u6761\u975e\u6811\u8fb9\u53d8\u6210\u6811\u8fb9\u65f6\uff0c\u5176\u4e0e\u6811\u5f62\u6210\u7684\u4e00\u4e2a\u73af\u5c31\u8981\u65ad\u5f00\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u5f53\u8fd9\u6761\u8fb9\u6743\u503c\u5927\u4e8e\u7b49\u4e8e\u975e\u6811\u8fb9\u6743\u503c\u65f6\uff0c\u4e5f\u5c31\u53ef\u4ee5\u66ff\u6362\u4e86\u3002\n\n\u4e8e\u662f\u5bf9\u4e8e\u975e\u6811\u8fb9\u8981\u67e5\u8be2\u7684\u662f\uff1a\u5176\u5728\u6811\u4e0a\u5bf9\u5e94\u7684\u8def\u5f84\u4e2d\u6743\u503c\u6700\u5927\u503c\u3002\n\n\u9759\u6001\u95ee\u9898\uff0c\u6811\u94fe\u5256\u5206 + $\\text{ST}$ \u8868\u5373\u53ef\u89e3\u51b3\u95ee\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(m\n\\log m+m\\log n)$\n# hard version\n\u57fa\u4e8e\u4e0a\u4e00\u9898\u7684\u505a\u6cd5\uff0c\u9700\u8981\u5904\u7406\u6811\u8fb9\u3002\n\n\u53d1\u73b0\u975e\u6811\u8fb9\u8981\u8003\u8651\u7684\u662f\u5bf9\u5e94\u6811\u4e0a\u8def\u5f84\u7684\u6811\u8fb9\uff0c\u90a3\u4e48\u6811\u8fb9\u8003\u8651\u7684\u5c31\u662f\u80fd\u8986\u76d6\u5b83\u7684\u975e\u6811\u8fb9\uff0c\u6362\u8a00\u4e4b\u662f\u4e0e\u5176\u5f62\u6210\u73af\u7684\u975e\u6811\u8fb9\u3002\n\n\u9700\u8981\u67e5\u8be2\uff1a\u4e0e\u8fd9\u6761\u6811\u8fb9\u80fd\u5f62\u6210\u73af\u7684\u975e\u6811\u8fb9\u4e2d\u7684\u6700\u5c0f\u503c\u3002\n\n\u533a\u95f4\u53d6 $\\min$ \u64cd\u4f5c\u662f\u5728\u9493\u9c7c\uff0c\u4e2d\u95f4\u4e0d\u67e5\u8be2\uff0c\u4e8e\u662f\u76f4\u63a5\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u6539\u6210\u533a\u95f4\u8d4b\u503c\uff0c\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(m\\log m+m\\log^2 n)$\n\n# \u672c\u9898\u4ee3\u7801\n\n```cpp\nint n,m;\nstruct Tree{\n    struct G_Edge{\n        int u,v,w,id;\n        bool tag;\n    }GE[maxm];\n    int bel[maxn];\n    int find(int x){\n        if(x==bel[x]) return x;\n        else return bel[x]=find(bel[x]);\n    }\n    struct T_Edge{\n        int v,w;\n        T_Edge()=default;\n        T_Edge(int v_,int w_):v(v_),w(w_){}\n    };\n    vector<T_Edge> E[maxn];\n    inline void add_edge(int u,int v,int w){\n        E[u].push_back(T_Edge(v,w));\n    }\n    inline void Krusal(){\n        sort(GE+1,GE+m+1,[&](G_Edge x,G_Edge y){\n            return x.w<y.w;\n        });\n        for(int i=1;i<=n;++i) bel[i]=i;\n        int cnt=0;\n        for(int i=1;i<=m;++i){\n            int u=GE[i].u,v=GE[i].v,w=GE[i].w;\n            int fu=find(u),fv=find(v);\n            if(fu==fv) continue;\n            else{\n                bel[fv]=fu;\n                GE[i].tag=true;\n                add_edge(u,v,w);\n                add_edge(v,u,w);\n                // printf(\"%d<->%d %d\\n\",u,v,w);\n                ++cnt;\n                if(cnt==n-1) break;\n            }\n        }\n        sort(GE+1,GE+m+1,[&](G_Edge x,G_Edge y){\n            return x.id<y.id;\n        });\n    }\n    int fa[maxn],dep[maxn],siz[maxn],son[maxn],val[maxn];\n    int top[maxn],dfn[maxn],dfncnt;\n    int mx[maxn][18];\n    void dfs1(int u,int f,int d){\n        fa[u]=f,dep[u]=d,siz[u]=1;\n        int maxson=-1;\n        for(T_Edge e:E[u]){\n            int v=e.v,w=e.w;\n            if(v==f) continue;\n            val[v]=w;\n            dfs1(v,u,d+1);\n            siz[u]+=siz[v];\n            if(siz[v]>maxson) maxson=siz[v],son[u]=v;\n        }\n    }\n    void dfs2(int u,int t){\n        top[u]=t,dfn[u]=++dfncnt;\n        mx[dfn[u]][0]=val[u];\n        if(!son[u]) return;\n        dfs2(son[u],t);\n        for(T_Edge e:E[u]){\n            int v=e.v;\n            if(v==fa[u]||v==son[u]) continue;\n            dfs2(v,v);\n        }\n    }\n    inline void build_st(){\n        mx[1][0]=0;\n        for(int k=1;k<=17;++k){\n            for(int i=1;i+(1<<k)-1<=n;++i){\n                mx[i][k]=max(mx[i][k-1],mx[i+(1<<(k-1))][k-1]);\n            }\n        }\n    }\n    inline int query_st(int l,int r){\n        int k=log2(r-l+1);\n        return max(mx[l][k],mx[r-(1<<k)+1][k]);\n    }\n    inline int query(int u,int v){\n        int res=0;\n        while(top[u]!=top[v]){\n            if(dep[top[u]]>dep[top[v]]) swap(u,v);\n            res=max(res,query_st(dfn[top[v]],dfn[v]));\n            v=fa[top[v]];\n        }\n        if(dep[u]>dep[v]) swap(u,v);\n        if(u!=v) res=max(res,query_st(dfn[u]+1,dfn[v]));\n        return res;\n    }\n}T;\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<=m;++i){\n        T.GE[i].u=read(),T.GE[i].v=read(),T.GE[i].w=read(),T.GE[i].id=i;\n        T.GE[i].tag=false;\n    }\n    T.Krusal();\n    T.dfs1(1,0,0);\n    T.dfs2(1,1);\n    T.build_st();\n    for(int i=1;i<=m;++i){\n        if(T.GE[i].tag) continue;\n        int u=T.GE[i].u,v=T.GE[i].v;\n        int res=T.query(u,v);\n        printf(\"%d\\n\",res);\n    }\n    return 0;\n}\n```",
        "postTime": 1666767468,
        "uid": 321177,
        "name": "SoyTony",
        "ccfLevel": 6,
        "title": "CF\u9898\u89e3\u2014\u2014CF1184E2 Daleks' Invasion"
    }
]