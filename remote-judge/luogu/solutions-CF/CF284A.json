[
    {
        "content": "## \u597d\u50cf\u6ca1\u6709\u6253\u8868\u7684\u9898\u89e3\u3002\u3002\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u77e5\u9053\uff1a\n$$\\text{$p$\u7684\u539f\u6839\u4e2a\u6570}=\u03c6(\u03c6(p))$$  \n\u8bc1\u660e\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/vfxuaawj.png)  \n\\--\u767e\u5ea6\u767e\u79d1  \n$$\\text{\u53c8}\\because \\text{$p$\u4e3a\u8d28\u6570}$$  \n$$\\therefore \u03c6(p)=p-1$$  \n\u8bc1\u660e\uff1a$p$\u662f\u8d28\u6570\uff0c\u6240\u4ee51~$p$-1\u90fd\u4e0e\u5b83\u4e92\u8d28   \n$$\\therefore ans=\u03c6(p-1)$$  \n### \u6253\u8868\u65b9\u6cd5\uff1a\n~~\u65b9\u6cd51\uff1a\u4e0aOEIS~~   \n\u65b9\u6cd52\uff1a\u7b97\u51fa\u6765$\u03c6(\\left[0,1999]\\right)$  \n\u5373\uff1a  \n```cpp\n#include <bits/stdc++.h>\n\ninline int phi(int n)//\u6b27\u62c9\u51fd\u6570\n{\n\tint res, a;\n\tres = a = n;\n\tfor (int i = 2; i * i <= a; ++i)\n\t{\n\t\tif (a % i)\n\t\t\tcontinue;\n\t\tres = res / i * (i - 1);\n\t\twhile (!(a % i))\n\t\t\ta /= i;\n\t}\n\tif (a > 1)\n\t\tres = res / a * (a - 1);\n\treturn res;\n}\n\nint main()\n{\n\tfor(int i=1;i<=2000;i++)printf(\"%d,\",phi(i-1));\n\treturn 0;\n}\n```\n\u7136\u540e\u3002\u3002\u3002  \n```\n#include <bits/stdc++.h>\n//\u522b\u5fd8\u4e86\u4e0b\u6807\u4ece0\u5f00\u59cb\nint ans[2005]={0,0,1,1,2,2,4,2,6,4,6,4,10,4,12,6,8,8,16,6,18,8,12,10,22,8,20,12,18,12,28,8,30,16,20,16,24,12,36,18,24,16,40,12,42,20,24,22,46,16,42,20,32,24,52,18,40,24,36,28,58,16,60,30,36,32,48,20,66,32,44,24,70,24,72,36,40,36,60,24,78,32,54,40,82,24,64,42,56,40,88,24,72,44,60,46,72,32,96,42,60,40,100,32,102,48,48,52,106,36,108,40,72,48,112,36,88,56,72,58,96,32,110,60,80,60,100,36,126,64,84,48,130,40,108,66,72,64,136,44,138,48,92,70,120,48,112,72,84,72,148,40,150,72,96,60,120,48,156,78,104,64,132,54,162,80,80,82,166,48,156,64,108,84,172,56,120,80,116,88,178,48,180,72,120,88,144,60,160,92,108,72,190,64,192,96,96,84,196,60,198,80,132,100,168,64,160,102,132,96,180,48,210,104,140,106,168,72,180,108,144,80,192,72,222,96,120,112,226,72,228,88,120,112,232,72,184,116,156,96,238,64,240,110,162,120,168,80,216,120,164,100,250,72,220,126,128,128,256,84,216,96,168,130,262,80,208,108,176,132,268,72,270,128,144,136,200,88,276,138,180,96,280,92,282,140,144,120,240,96,272,112,192,144,292,84,232,144,180,148,264,80,252,150,200,144,240,96,306,120,204,120,310,96,312,156,144,156,316,104,280,128,212,132,288,108,240,162,216,160,276,80,330,164,216,166,264,96,336,156,224,128,300,108,294,168,176,172,346,112,348,120,216,160,352,116,280,176,192,178,358,96,342,180,220,144,288,120,366,176,240,144,312,120,372,160,200,184,336,108,378,144,252,190,382,128,240,192,252,192,388,96,352,168,260,196,312,120,396,198,216,160,400,132,360,200,216,168,360,128,408,160,272,204,348,132,328,192,276,180,418,96,420,210,276,208,320,140,360,212,240,168,430,144,432,180,224,216,396,144,438,160,252,192,442,144,352,222,296,192,448,120,400,224,300,226,288,144,456,228,288,176,460,120,462,224,240,232,466,144,396,184,312,232,420,156,360,192,312,238,478,128,432,240,264,220,384,162,486,240,324,168,490,160,448,216,240,240,420,164,498,200,332,250,502,144,400,220,312,252,508,128,432,256,324,256,408,168,460,216,344,192,520,168,522,260,240,262,480,160,506,208,348,216,480,176,424,264,356,268,420,144,540,270,360,256,432,144,546,272,360,200,504,176,468,276,288,276,556,180,504,192,320,280,562,184,448,282,324,280,568,144,570,240,380,240,440,192,576,272,384,224,492,192,520,288,288,292,586,168,540,232,392,288,592,180,384,296,396,264,598,160,600,252,396,300,440,200,606,288,336,240,552,192,612,306,320,240,616,204,618,240,396,310,528,192,500,312,360,312,576,144,630,312,420,316,504,208,504,280,420,256,640,212,642,264,336,288,646,216,580,240,360,324,652,216,520,320,432,276,658,160,660,330,384,328,432,216,616,332,444,264,600,192,672,336,360,312,676,224,576,256,452,300,682,216,544,294,456,336,624,176,690,344,360,346,552,224,640,348,464,240,700,216,648,320,368,352,600,232,708,280,468,352,660,192,480,356,476,358,718,192,612,342,480,360,560,220,726,288,486,288,672,240,732,366,336,352,660,240,738,288,432,312,742,240,592,372,492,320,636,200,750,368,500,336,600,216,756,378,440,288,760,252,648,380,384,382,696,256,768,240,512,384,772,252,600,384,432,388,720,192,700,352,504,336,624,260,786,392,524,312,672,240,720,396,416,396,796,216,736,320,528,400,720,264,528,360,536,400,808,216,810,336,540,360,648,256,756,408,432,320,820,272,822,408,400,348,826,264,828,328,552,384,672,276,664,360,540,418,838,192,812,420,560,420,624,276,660,416,564,320,792,280,852,360,432,424,856,240,858,336,480,430,862,288,688,432,544,360,780,224,792,432,576,396,600,288,876,438,584,320,880,252,882,384,464,442,886,288,756,352,540,444,828,296,712,384,528,448,840,240,832,400,504,448,720,300,906,452,600,288,910,288,820,456,480,456,780,288,918,352,612,460,840,240,720,462,612,448,928,240,756,464,620,466,640,288,936,396,624,368,940,312,880,464,432,420,946,312,864,360,632,384,952,312,760,476,560,478,816,256,930,432,636,480,768,264,966,440,576,384,970,324,828,486,480,480,976,324,880,336,648,490,982,320,784,448,552,432,924,240,990,480,660,420,792,328,996,498,648,400,720,332,928,500,528,502,936,288,1008,400,672,440,1012,312,672,504,672,508,1018,256,1020,432,600,512,800,324,936,512,588,408,1030,336,1032,460,528,432,960,344,1038,384,692,520,888,336,720,522,696,520,1048,240,1050,524,648,480,840,320,900,506,704,416,1060,348,1062,432,560,480,960,352,1068,424,576,528,1008,356,840,536,716,420,984,288,1012,540,684,540,720,360,1086,512,660,432,1090,288,1092,546,576,544,1096,360,936,400,732,504,1102,352,768,468,720,552,1108,288,1000,552,624,556,888,360,1116,504,744,384,1044,320,1122,560,600,562,924,368,1128,448,672,564,1020,324,904,560,756,568,1056,288,972,570,756,480,912,380,1080,480,764,440,1150,384,1152,576,480,544,1056,384,1080,448,756,492,1162,384,928,520,776,576,996,288,1170,584,704,586,920,336,1060,540,780,464,1180,392,936,576,624,592,1186,360,1120,384,792,592,1192,396,952,528,648,598,1080,320,1200,600,800,504,960,396,1120,600,720,440,1032,400,1212,606,648,576,1216,336,1144,480,720,552,1222,384,840,612,816,612,1228,320,1230,480,816,616,864,408,1236,618,696,480,1152,396,1120,620,656,528,1176,384,1248,500,828,624,1068,360,1000,624,836,576,1258,288,1152,630,840,624,880,420,1080,632,828,504,1200,416,1188,504,640,560,1276,420,1278,512,720,640,1282,424,1024,642,720,528,1288,336,1290,576,860,646,864,432,1296,580,864,480,1300,360,1302,648,672,652,1306,432,960,520,792,640,1200,432,1048,552,876,658,1318,320,1320,660,756,660,1040,384,1326,656,884,432,1210,432,1260,616,704,664,1140,444,1224,528,888,600,1248,384,1072,672,896,672,1260,360,1152,624,800,676,1080,448,1276,576,900,512,1360,452,1288,600,576,682,1366,432,1332,544,912,588,1372,456,1000,672,864,624,1176,352,1380,690,920,688,1104,360,1296,692,924,552,1272,448,1188,640,720,696,1260,464,1398,480,932,700,1320,432,1120,648,792,640,1408,368,1312,704,936,600,1128,464,1296,708,840,560,1176,468,1422,704,720,660,1426,384,1428,480,936,712,1432,476,960,716,956,718,1438,384,1300,612,864,684,1088,480,1446,720,792,560,1450,440,1452,726,768,576,1380,486,1458,576,972,672,1080,480,1168,732,972,732,1344,336,1470,704,980,660,1160,480,1260,738,896,576,1480,432,1482,624,720,742,1486,480,1488,592,840,744,1492,492,1056,640,996,636,1498,400,1404,750,996,736,1008,500,1360,672,1004,600,1510,432,1408,756,800,756,1440,440,1260,576,936,760,1522,504,1200,648,1016,760,1380,384,1530,764,864,696,1224,512,1456,768,972,480,1452,512,1542,768,816,772,1152,504,1548,600,920,768,1552,432,1240,776,1032,720,1558,384,1332,700,1040,704,1248,504,1566,672,1044,624,1570,520,1320,786,720,784,1476,524,1578,624,960,672,1582,480,1264,720,1012,792,1356,416,1512,792,1044,796,1120,432,1596,736,960,640,1600,528,1368,800,848,720,1606,528,1608,528,1068,720,1612,536,1152,800,840,808,1618,432,1620,810,1080,672,1200,540,1626,720,1080,648,1392,512,1540,756,864,816,1636,432,1480,640,1092,820,1560,544,1104,822,1080,816,1536,400,1512,696,1008,826,1320,528,1656,828,936,656,1500,552,1662,768,864,672,1666,552,1668,664,1112,720,1428,540,1320,836,1008,838,1584,384,1640,812,960,840,1344,560,1440,840,1124,624,1584,552,1692,660,896,832,1696,564,1698,640,972,792,1560,560,1200,852,1136,720,1708,432,1624,848,1140,856,1176,480,1600,858,1140,672,1720,480,1722,860,880,862,1560,576,1296,688,1152,864,1732,544,1384,720,1152,780,1656,448,1740,792,984,864,1392,576,1746,792,1040,600,1632,576,1752,876,864,876,1500,584,1758,640,1172,880,1680,504,1408,882,1080,768,1680,464,1320,884,1176,886,1400,576,1776,756,1184,704,1632,540,1782,888,768,828,1786,592,1788,712,1188,768,1620,528,1432,896,1196,840,1536,480,1800,832,1200,800,1368,504,1656,896,1188,720,1810,600,1512,906,880,904,1716,600,1696,576,1212,910,1822,576,1440,820,1008,912,1740,480,1830,912,1104,780,1464,576,1660,918,1224,704,1572,612,1728,920,960,840,1846,480,1806,720,1232,924,1728,612,1248,896,1236,928,1560,480,1860,756,1188,928,1488,620,1866,932,1056,640,1870,576,1872,936,1000,792,1876,624,1878,736,1080,940,1608,624,1344,880,1152,928,1888,432,1800,840,1260,946,1512,624,1620,864,1260,720,1900,632,1720,768,1008,952,1906,624,1804,760,1008,952,1912,560,1528,956,1260,816,1800,512,1792,930,1280,864,1200,636,1840,960,1284,768,1930,528,1932,966,1008,880,1776,576,1656,768,1292,970,1848,648,1552,828,1160,972,1948,480,1950,960,1080,976,1408,648,1836,880,1304,672,1872,648,1800,980,1040,982,1680,640,1780,784,1296,896,1972,552,1560,864,1316,924,1978,480,1692,990,1320,960,1584,660,1986,840,1152,792,1800,656,1992,996,864,996,1996,648,1998};\nint p;\n\nint main()\n{\n\tscanf(\"%d\",&p);\n\tprintf(\"%d\",ans[p]);\n\treturn 0;\n}\n```\n",
        "postTime": 1586254055,
        "uid": 312393,
        "name": "ADay",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF284A \u3010Cows and Primitive Roots\u3011"
    },
    {
        "content": "\u9898\u76ee\u4f20\u9001\u95e8\uff1a [Link](https://www.luogu.com.cn/problem/CF284A)\n\n\u9898\u610f\u7b80\u8ff0\uff1a\u6c42\u6a21\u4e00\u4e2a\u7d20\u6570 $p$ \u610f\u4e49\u4e0b\u7684\u539f\u6839\u6570\u91cf\u3002\n\n## Solution\n\n\u6ce8\u610f\u5230\u4e00\u6761\u4e8b\u5b9e\uff1a\n\n+ \u82e5 $p$ \u662f\u4e00\u4e2a\u5947\u7d20\u6570\uff0c\u90a3\u4e48\u6a21 $p$ \u610f\u4e49\u4e0b\u7684\u539f\u6839\u6570\u91cf\u4e3a $\\varphi(\\varphi(p))$ \u3002\n\n\u800c $\\varphi(p),p\\in prime$ \u65f6\uff0c $\\varphi(p)=p-1$ \u3002\n\n\u6240\u4ee5 $ans=\\varphi(p-1)$ \u3002\n\n\uff08\u7b14\u8005\u7531\u4e8e\u6c34\u5e73\u592a\u70c2\uff0c\u4e0d\u4f1a\u8bc1\u660e\u90a3\u4e00\u6761\u4e8b\u5b9e\u3002\u5982\u679c\u6709\u5927\u4f6c\u4f1a\u8bc1\u660e\u7684\u8bdd\uff0c\u53ef\u4ee5\u79c1\u4fe1\u7b14\u8005\u6216\u8005\u5728\u8bc4\u8bba\u533a\u7559\u8a00\uff0c\u7b14\u8005\u4f1a\u53ca\u65f6\u6dfb\u52a0\u3002\uff09\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\n#define N 20009\nusing namespace std;\nint phi[N],n,pri[N],vst[N];\ninline void init(int n){\n\tphi[1]=1;\n\tfor(int i=2;i<=n;i++){\n    \tif(!vst[i]){phi[i]=i-1;pri[++pri[0]]=i;}\n    \tfor(int j=1;j<=pri[0]&&i*pri[j]<=n;j++){\n    \t\tvst[i*pri[j]]=1;\n    \t\tif(i%pri[j]==0){\n\t\t\t\tphi[i*pri[j]]=phi[i]*pri[j];\n\t\t\t\tbreak;\n\t\t\t}\n    \t\telse phi[i*pri[j]]=phi[i]*(pri[j]-1);\n    \t}\n\t}\n}// \u7ebf\u6027\u7b5b\u6b27\u62c9\u51fd\u6570\nint main(){\n    init(20000);\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",phi[n-1]);\n    return 0;\n}\n```",
        "postTime": 1585913731,
        "uid": 91204,
        "name": "Fatalis_Lights",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF284A \u3010Cows and Primitive Roots\u3011"
    },
    {
        "content": "[\u6211\u7684blog](https://www.cnblogs.com/wangjunrui/p/12624553.html)\n> > \u9898\u76ee\u94fe\u63a5\uff1a[CF284A Cows and Primitive Roots](https://www.luogu.com.cn/problem/CF284A)\n\n$$description$$\n\n\u7ed9\u51fa\u8d28\u6570p\uff0c\u6c42\u6a21p\u610f\u4e49\u4e0b\u7684\u539f\u6839\u6570\u91cf\n\n$$solution$$\n\n\u8fd9\u9898\u767e\u5ea6\u767e\u79d1\u4e0a\u6709\u8be6\u7ec6\u89e3\u91ca\u539f\u6839\uff0c\u5728\u8fd9\u91cc\uff1a\n[![](https://s1.ax1x.com/2020/04/03/GN9gqU.png)](https://baike.baidu.com/item/%E5%8E%9F%E6%A0%B9/8103534?fr=aladdin)\n\n~~\u6240\u4ee5\u6709\u4e9b\u5927\u4f6c\u8ba4\u4e3a\u8fd9\u9898\u5f88\u7b80\u5355~~\n\n\u7531\u91cc\u9762\u5199\u7684\u53ef\u5f97\uff0c\u5728\u6a21p\u610f\u4e49\u4e0b\u6709\u539f\u6839\u65f6\uff0c\u4ed6\u6709$\\varphi(\\varphi(p))$\u4e2a\u3002\n\n\n$$code$$\n```cpp\n#include <cstdio>\n#define int long long\n#define re register\nusing namespace std;\ntemplate<typename T>\ninline void read(T&x)\n{\n\tx=0;\n\tchar s=(char)getchar();\n\tbool f=false;\n\twhile(!(s>='0'&&s<='9'))\n\t{\n\t\tif(s=='-')\n\t\t\tf=true;\n\t\ts=(char)getchar();\n\t}\n\twhile(s>='0'&&s<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+s-'0';\n\t\ts=(char)getchar();\n\t}\n\tif(f)\n\t\tx=(~x)+1;\n}\ninline int euler(int x)\n{\n\tint ans=x;\n\tfor(re int i=2; i*i<=x; ++i)\n\t\tif(x%i==0)\n\t\t{\n\t\t\tdo\n\t\t\t\tx/=i;\n\t\t\twhile(x%i==0);\n\t\t\tans=ans/i*(i-1);\n\t\t}\n\tif(x>1)\n\t\tans=ans/x*(x-1);\n\treturn ans;\n}\nsigned main()\n{\n\tint p;\n\tread(p);\n\tprintf(\"%lld\\n\",euler(euler(p)));\n\treturn 0;\n}\n```",
        "postTime": 1585877682,
        "uid": 133322,
        "name": "QwQ\u849f\u84bbwjr",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF284A \u3010Cows and Primitive Roots\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6b63\u6574\u6570$x$\uff0c$\u03c6(x)$\u5b9a\u4e49\u662f\u5728$[1,x]\u2229\\mathbb{Z^+}$\u4e0a\u4e0e$x$\u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u8d28\u6570$p$\uff0c\u663e\u7136$\u03c6(p)=p-1$\u3002\n\n\u6253\u51e0\u4e2a\u8868\u53d1\u73b0\u7b54\u6848\u662f$\u03c6(p-1)$\u3002\n\n\u8bbe$p-1=\\prod p_i^{\u03b1_i}$\u3002\n\n\u5219\u5728$[1,p-1]\u2229\\mathbb{Z^+}$\u4e0a\u4e0e$p-1$\u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u4e3a$p*\\prod (1-\\dfrac{1}{p_i})$\u3002\n\n\u679a\u4e3e$p-1$\u7684\u8d28\u56e0\u6570\u5373\u53ef\u3002\n\nCODE:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long x,wddzx;\nint main(){\n\tscanf(\"%lld\",&x);\n   \tx--;\n\twddzx=x;\n\tfor(int i=2;i<=sqrt(x);++i){\n\t\tif(!(x%i)){\n\t\t\twddzx=wddzx*(i-1)/i;\n\t\t}\n\t\twhile(!(x%i)){\n\t\t\tx=x/i;\n\t\t}\n\t}\n\tif((x-1)){\n\t\twddzx=wddzx*(x-1)/x;\n\t}\n\tcout<<wddzx<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1590890876,
        "uid": 258325,
        "name": "Scrutiny",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF284A \u3010Cows and Primitive Roots\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u6c42\u6a21\u4e00\u4e2a\u8d28\u6570 $p$ \u610f\u4e49\u7684\u4e0b\u539f\u6839\u4e2a\u6570\u3002\n\n\u505a\u6cd5\u7075\u59d0\u59d0\u4ed6\u4eec\u7684\u9898\u89e3\u548c[\u767e\u5ea6\u767e\u79d1](https://baike.baidu.com/item/%E5%8E%9F%E6%A0%B9/8103534?fr=aladdin)\u90fd\u5df2\u7ecf\u8be6\u7ec6\u7684\u8bf4\u660e\u4e86\uff0c\u4e5f\u90fd\u77e5\u9053 $ans=\\varphi(\\varphi(p))=\\varphi(p-1)$\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u9610\u8ff0\u4e86\u3002\n\n\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u8bc1\u660e\u4e00\u4e0b $\\varphi(p)=p-1\\quad (p \\in prime)$\u3002\n\n~~\u4f17\u6240\u5468\u77e5\uff0c~~$\\varphi(p)=\\sum\\limits_{i=1}^{p}1\\quad(\\gcd(i,p)=1)$\uff0c\u53c8\u56e0\u4e3a $p$ \u662f\u8d28\u6570\uff0c\u6240\u4ee5\u5c0f\u4e8e\u7b49\u4e8e $p$ \u7684 $p$ \u4e2a\u6b63\u6574\u6570\u9664\u4e86 $p$ \u672c\u8eab\u5168\u90e8\u4e0e $p$ \u4e92\u8d28\uff08\u5f53 $p=1$ \u65f6\u4e0d\u592a\u4e00\u6837\uff0c\u4f46 $p \\ge 2$\uff09\uff0c\u6240\u4ee5 $\\varphi(p)=p-1\\quad (p \\in prime)$\u3002\n\n\u732e\u4e0a\u4ee3\u7801\uff1a\n```\n#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <cstring>\n#include <queue>\nusing namespace std;\nint varphi(int n)//\u6c42\u6b27\u62c9\u51fd\u6570\uff08\u5ffd\u7565\u51fd\u6570\u540d\uff09 \n{\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)//\u8fd9\u91cc\u5199n\u662f\u56e0\u4e3a\u5982\u679c\u5199n-1\u5f53p=2\u7684\u65f6\u5019\u53ef\u80fd\u51fa\u9505\uff0c\n\t{\n\t\tif(__gcd(i,n)==1)//\u61d2\u5f97\u5199\u6c42\u6700\u5927\u516c\u56e0\u6570\u7684\u51fd\u6570\u4e86 \n\t\t{\n\t\t\tans++;\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\n{\n\tint p;\n\tcin>>p;\n\tcout<<varphi(p-1)<<endl;\n    return 0;\n}\n```\n\uff08\u8fd9\u4e2a\u662f\u521a\u624d\u66f4\u6539\u4e86\u4e00\u4e9b\u8bed\u6cd5\u9519\u8bef\u7684\uff0c\u5df2\u7ecf\u901a\u8fc7\u8fc7\uff0c\u8bf7\u7ba1\u7406\u5458\u901a\u8fc7\uff09",
        "postTime": 1586256419,
        "uid": 191868,
        "name": "monstersqwq",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF284A \u3010Cows and Primitive Roots\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5c31\u662f\u6c42\u4e00\u4e2a\u5947\u7d20\u6570$p$\u7684\u539f\u6839\u6570\u91cf\u3002\n\u3000\u3000\n\n\u516c\u5f0f\u662f$\\varphi(\\varphi(p))$\u3002\u53c8\u56e0\u4e3a$p$\u662f\u8d28\u6570\uff0c\u6240\u4ee5\u5c31\u662f$\\varphi(p - 1)$\u3002    \n\n\uff08\u8bc1\u660e\u5565\u7684\u6211\u4e0d\u4f1a\u2026\u2026\uff09   \n```c++\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cctype>\n#include<vector>\n#include<stack>\n#include<queue>\nusing namespace std;\n#define enter puts(\"\") \n#define space putchar(' ')\n#define Mem(a, x) memset(a, x, sizeof(a))\n#define rg register\ntypedef long long ll;\ntypedef double db;\nconst int INF = 0x3f3f3f3f;\nconst db eps = 1e-8;\n//const int maxn = ;\ninline ll read()\n{\n  ll ans = 0;\n  char ch = getchar(), last = ' ';\n  while(!isdigit(ch)) last = ch, ch = getchar();\n  while(isdigit(ch)) ans = (ans << 1) + (ans << 3) + ch - '0', ch = getchar();\n  if(last == '-') ans = -ans;\n  return ans;\n}\ninline void write(ll x)\n{\n  if(x < 0) x = -x, putchar('-');\n  if(x >= 10) write(x / 10);\n  putchar(x % 10 + '0');\n}\n\nint n;\nint phi(int n)\n{\n  int ans = n;\n  for(int i = 2; i * i <= n; ++i)\n    if(n % i == 0)\n      {\n\tans = ans / i * (i - 1);\n\twhile(n % i == 0) n /= i;\n      }\n  if(n > 1) ans = ans / n * (n - 1);\n  return ans;\n}\n\nint main()\n{\n  while(scanf(\"%d\", &n) != EOF) write(phi(n - 1)), enter;\n  return 0;\n}\n```",
        "postTime": 1542359733,
        "uid": 55965,
        "name": "mrclr",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF284A \u3010Cows and Primitive Roots\u3011"
    }
]