[
    {
        "content": "\u9898\u610f\u662f\u5bf9\u4e00\u68f5\u65e0\u6839\u6811\uff0c\u8fdb\u884c\u67d0\u79cd\u6811\u94fe\u5256\u5206\u540e\uff0c\u4f7f\u5f97\u94fe\u957f\u7684\u6700\u5c0f\u503c\u6700\u5927\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6700\u5927\u503c\u3002\n\n\u5148\u60f3\u60f3\u4ee5 $1$ \u4e3a\u6839\u600e\u4e48\u505a\uff1f\u5f53\u7136\u662f\u4ece\u53f6\u5b50\u5f00\u59cb\uff0c\u6bcf\u6761\u94fe\u5f80\u4e0a\u751f\u957f\uff0c\u4e00\u4e2a\u70b9\u5982\u679c\u6709\u591a\u4e2a\u513f\u5b50\uff0c\u4f1a\u8d2a\u5fc3\u5730\u9009\u62e9\u6700\u77ed\u94fe\u5f80\u4e0a\u751f\u957f\u3002\n\n\u8bb0 $f_u$ \u8868\u793a $u$ \u7684\u6bcf\u4e2a\u513f\u5b50\u7684\u6240\u5728\u7684\u94fe\u957f\u96c6\u5408\uff0c\u5176\u4e2d\u94fe\u957f\u6307\u7684\u662f\u94fe\u4e2d\u70b9\u7684\u4e2a\u6570\uff0c\u53f6\u8282\u70b9\u7684 $f_u=\\varnothing$\u3002\n\n\u90a3\u4e48 $u$ \u4f1a\u5f52\u5c5e\u4e8e\u5176\u4e2d\u7684\u6700\u77ed\u94fe\uff0c\u800c\u6b21\u77ed\u94fe\u5f00\u59cb\u7684\u5176\u4ed6\u94fe\u957f\u5ea6\u5c31\u6c38\u8fdc\u505c\u7559\u5728\u4e86\u539f\u5730\uff0c\u6240\u4ee5\u6700\u7ec8\u7b54\u6848\u4e0d\u4f1a\u8d85\u8fc7\u6240\u6709 $f_u$ \u91cc\u7684\u6b21\u5c0f\u503c\u3002\n\n\u6700\u7ec8\u7b54\u6848\u4e5f\u4e0d\u4f1a\u8d85\u8fc7 $f_1$ \u7684\u6700\u5c0f\u503c\u52a0 $1$\uff0c\u90a3\u4e48\u4ee5 $1$ \u4e3a\u6839\u7684\u7b54\u6848\u5c31\u7b97\u51fa\u6765\u4e86\u3002\n\n\u7136\u540e\u7528\u6362\u6839\u6cd5\u6765\u7b97\u5176\u4ed6\u7ed3\u70b9\u4e3a\u6839\u65f6\u7684\u7b54\u6848\uff0c\u9700\u8981\u4e00\u4e2a\u5168\u5c40`multiset`\u7ef4\u62a4\u6240\u6709\u70b9\u7684\u6b21\u5c0f\u503c\u96c6\u5408\u3002\u5177\u4f53\u800c\u8a00\uff0c\u628a\u6839\u4ece $u$ \u5207\u6362\u5230\u513f\u5b50 $v$ \u65f6\uff0c\u5148\u5728 $f_u$ \u91cc\u5220\u9664 $v$ \u5bf9 $u$ \u7684\u8d21\u732e\uff0c\u7136\u540e\u5728 $f_v$ \u91cc\u52a0\u4e0a $u$ \u5bf9 $v$ \u7684\u8d21\u732e\uff0c\u5904\u7406\u5b8c $v$ \u5b50\u6811\u540e\u518d\u8fd8\u539f\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int INF = 0x3f3f3f3f;\nconst LL mod = 1e9 + 7;\nconst int N = 200005;\n\nvector<int> G[N];\nmultiset<int> f[N]; \nmultiset<int> se;   \nint ans;\n\nint getlen(int u) {\n    return f[u].size() == 0 ? 1 : *f[u].begin() + 1;\n}\nvoid add(int u, int val) {\n    if (f[u].size() >= 2) se.erase(se.find(*next(f[u].begin())));\n    f[u].insert(val);\n    if (f[u].size() >= 2) se.insert(*next(f[u].begin()));\n}\nvoid del(int u, int val) {\n    if (f[u].size() >= 2) se.erase(se.find(*next(f[u].begin())));\n    f[u].erase(f[u].find(val));\n    if (f[u].size() >= 2) se.insert(*next(f[u].begin()));\n}\n\nvoid dfs1(int u, int fa) {\n    for (auto v : G[u]) {\n        if (v == fa) continue;\n        dfs1(v, u);\n        f[u].insert(getlen(v));\n    }\n    if (f[u].size() >= 2) se.insert(*next(f[u].begin()));\n}\nvoid dfs2(int u, int fa) {\n    ans = max(ans, min(getlen(u), se.empty() ? INF : *se.begin()));\n    for (auto v : G[u]) {\n        if (v == fa) continue;\n        del(u, getlen(v));\n        add(v, getlen(u));\n        dfs2(v, u);\n        del(v, getlen(u));\n        add(u, getlen(v));\n    }\n}\n\nint main() {\n    int _;\n    scanf(\"%d\", &_);\n    while (_--) {\n        int n;\n        scanf(\"%d\", &n);\n        se.clear();\n        for (int i = 1; i <= n; i++) G[i].clear(), f[i].clear();\n        for (int i = 1; i < n; i++) {\n            int u, v;\n            scanf(\"%d%d\", &u, &v);\n            G[u].push_back(v);\n            G[v].push_back(u);\n        }\n        ans = 0;\n        dfs1(1, 0);\n        dfs2(1, 0);\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n```\n\n\n\n",
        "postTime": 1678094357,
        "uid": 54357,
        "name": "OMG_wc",
        "ccfLevel": 0,
        "title": "CF1796E Colored Subgraphs \u9898\u89e3"
    },
    {
        "content": "\u673a\u623f\u540c\u5b66\u8bf4\u6b64\u9898 $O(n)$ \u5f88\u70e6\uff0c\u4e8e\u662f\u6211\u5199\u4e86\u4e00\u4e2a\u3002\n\n\u7b80\u8981\u9898\u610f\uff1a\u4efb\u610f\u9009\u53d6\u6839\uff0c\u5bf9\u6811\u8fdb\u884c\u6811\u94fe\u5256\u5206\uff0c\u6c42\u6700\u77ed\u94fe\u6700\u5927\u7684\u957f\u5ea6\u3002\n\n\u73b0\u5728\u8003\u8651\u5b9a\u6839\u7684 dp \u65b9\u7a0b\uff1a  \n$up_i$ \u8868\u793a\u8282\u70b9 $i$ \u5728\u5b50\u6811\u6700\u4f18\u7684\u60c5\u51b5\u4e0b\u4ece\u8fd9\u4e2a\u8282\u70b9\u5411\u4e0b\u5c5e\u4e8e\u540c\u4e00\u4e2a\u94fe\u7684\u957f\u5ea6\u3002  \n$minlen_i$ \u8868\u793a\u8282\u70b9 $i$ \u5728\u5b50\u6811\u6700\u4f18\u7684\u60c5\u51b5\u4e0b\u5b50\u6811\u5185\u94fe\u7684\u6700\u77ed\u957f\u5ea6\uff08\u4e0d\u5305\u62ec\u6b64\u8282\u70b9\u5411\u4e0a\u7684\u94fe\uff09\n\n\u8fd9\u4e2a dp \u72b6\u6001\u53ca\u5176\u5bb9\u6613\u8d2a\u5fc3\u8f6c\u79fb\u3002  \n\u5b50\u8282\u70b9\u4e2d\u957f\u5ea6\u975e\u96f6\u7684\u6700\u77ed\u94fe\u5c31\u5e94\u8be5\u662f\u5f53\u524d\u8282\u70b9 $up_i$ \u9009\u62e9\u7684\u5411\u4e0a\u6269\u5c55\u7684\u94fe\u3002  \n\u4f59\u4e0b\u6240\u6709\u975e\u96f6\u957f\u5ea6\u7684\u94fe\u90fd\u8981\u548c $minlen_i$ \u53d6 $\\min$ \u6765\u8bb0\u5f55\u7236\u4eb2\u8282\u70b9\u7684 $minlen$\u3002\n\n\u8f6c\u79fb\u4ee3\u7801\u5982\u4e0b\uff08\u7801\u98ce\u6bd4\u8f83\u5947\u602a\uff09\uff1a\n```cpp\nstruct DpType {\n    ll minl, up;\n    DpType( ll minl_ = numeric_limits<ll>::max(), ll up_ = 0 ) {\n        minl = minl_, up = up_;\n    }\n    // \u5408\u5e76\u4e24\u4e2a dp \u72b6\u6001\n    DpType operator + ( const DpType rhs ) const {\n        ll n_minl = min(minl, rhs.minl), n_up;\n        ll up1 = min(up, rhs.up ), up2 = max(up, rhs.up );\n        #define RT(a,b); return DpType(a,b);\n        if ( up1 == 0 && up2 == 0 ) {\n            RT(n_minl,0ll);\n        } else if ( up1 == 0 ) {\n            RT(n_minl, up2);\n        } else {\n            RT(min(n_minl,up2), up1);\n        }\n    }\n    // \u5c06\u5f53\u524d\u70b9\u63a5\u5230 up \u4e0a\n    DpType operator () () const {\n        return DpType(minl,up+1);\n    }\n};\n```\n\n\u63a5\u4e0b\u6765\u8fdb\u884c\u4e00\u4e2a\u6362\u6839\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u6807\u51c6\u7684\u6362\u6839 dp\uff0c\u6240\u4ee5\u60f3\u4e86\u4e00\u4e2a\u6781\u5176\u5947\u602a\u7684\u505a\u6cd5\uff1a\n\n\u5f15\u7406\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5f53\u67d0\u4e2a\u8282\u70b9 $fa$ \u786e\u5b9a\u4e3a\u5b83\u7684\u6839\u65f6\uff0cdp \u7684\u72b6\u6001\u4e0d\u968f\u6839\u6539\u53d8\u3002  \n\uff08\u663e\u7136\u6210\u7acb\uff0c\u6545\u4e0d\u8bc1\u660e\uff09\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8bb0\u5fc6\u5316\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u7531\u4e8e\u603b\u5171\u53ea\u6709 $n-1$ \u6761\u8fb9\uff0c\u56e0\u6b64\u5b50\u8282\u70b9\u548c\u7236\u8282\u70b9\u7684\u4e0d\u540c\u7684\u5173\u7cfb\u603b\u5171\u6700\u591a\u53ea\u6709 $2n-2$ \u4e2a\uff0c\u56e0\u6b64\u603b\u72b6\u6001\u6570\u662f $O(n)$\n\n\u7136\u540e\u8fdb\u884c\u4e00\u4e2a\u4e71\u641e\uff0c\u76f4\u63a5\u987a\u5e8f\u94a6\u5b9a\u6839\u8fdb\u884c\u5904\u7406\uff0c\u642d\u914d\u8bb0\u5fc6\u5316\uff0c\u4f7f\u7528\u805a\u5408\u5206\u6790\u53ef\u77e5\uff0cdfs \u51fd\u6570\u6700\u591a\u8c03\u7528 $O(n)$ \u6b21\u3002\n\ndfs \u51fd\u6570\u5982\u4e0b\uff1a\n```cpp\nDpType node::dfs( ll fa, ll _id )  {\n    if ( nxt.size() == 1 ) return DpType(numeric_limits<ll>::max(),1);\n    while ( l < _id - 1 ) {\n        update(l+1, nd[nxt[l+1].first].dfs(id, nxt[l+1].second));\n    }\n    while ( r > _id + 1 ) {\n        update(r-1, nd[nxt[r-1].first].dfs(id, nxt[r-1].second));\n    }\n    DpType result = (Pre(_id-1)+Suf(_id+1))();\n    return result;\n}\n```\n\n\u8fd9\u91cc\u7528\u5230\u4e00\u4e2a\u5c0f trick\uff1a  \n\u5728\u8282\u70b9\u4e0a\u8bb0\u5f55\u6240\u6709\u76f8\u90bb\u8282\u70b9\u7684 dp \u72b6\u6001\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6ca1\u6709\u591a\u4f59\u7684 dfs \u8c03\u7528\u3002  \nupdate \u5373\u4e3a\u8bb0\u5f55\u72b6\u6001\u7684\u51fd\u6570\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\uff1a  \n\u5229\u7528\u76f8\u90bb\u8282\u70b9 dp \u72b6\u6001\u7684\u524d\u540e\u7f00\u6765\u8fdb\u884c\u5904\u7406\uff0c\u8fd9\u6837\u8fd4\u56de\u7b54\u6848\u662f $O(1)$ \u7684\u3002\n\n\u5230\u8fd9\u91cc\u57fa\u672c\u4e0a\u6838\u5fc3\u7684\u5185\u5bb9\u90fd\u6709\u4e86\u3002",
        "postTime": 1677889930,
        "uid": 263063,
        "name": "tianhangj",
        "ccfLevel": 7,
        "title": "CF1796E \u9898\u89e3"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff1f](https://zhuanlan.zhihu.com/p/610522558)\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c$n$ \u4e2a\u8282\u70b9\u3002\u4f60\u9700\u8981\u7ed9\u6bcf\u4e2a\u8282\u70b9\u67d3\u8272\uff0c\u4f7f\u5f97\u4efb\u610f\u989c\u8272\u76f8\u540c\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u989c\u8272\u4e5f\u4e0e\u524d\u9762\u4e24\u4e2a\u70b9\u76f8\u540c\u3002\n\n$cnt_i$ \u8868\u793a\u989c\u8272\u4e3a $i$ \u7684\u8282\u70b9\u6570\uff0c\u627e\u5230 $\\min cnt_i$ \u7684\u6700\u5927\u503c\u3002\n\n## \u7b80\u8981\u5206\u6790\n\n\u5148\u4e0d\u8003\u8651\uff0c\u6839\u4e0d\u56fa\u5b9a\u7684\u60c5\u51b5\uff0c\u5f3a\u5236\u94a6\u5b9a $r =  1$\uff0c\u8fd9\u91cc $r$ \u6307\u6839\u8282\u70b9\u3002\n\n\u6211\u4eec\u53d1\u73b0\u7b54\u6848\u901a\u8fc7\u4e8c\u5206\u53ef\u4ee5\u8f6c\u5316\u6210\u5224\u5b9a\u6027\u95ee\u9898\uff0c\u5373\u80fd\u5426\u5c06\u6811\u5212\u5206\u6210\u82e5\u5e72\u6761\u81ea\u5e95\u5411\u4e0a\u76ee\u957f\u5ea6\u81f3\u5c11\u4e3a $k$ \u7684\u94fe\u3002\n\n\u8bbe $dep_u$ \u8868\u793a\uff0c\u81ea\u5e95\u5411\u4e0a\u7684\u5230\u8fbe $u$ \u7684\u6700\u77ed\u957f\u5ea6\uff0c$minx$ \u8868\u793a\u4e48 $x$ \u7684\u513f\u5b50\u4e2d $dep_v$ \u7684\u6700\u5c0f\u503c\u3002\n\n\u663e\u7136\u5bf9\u4e8e\u53f6\u5b50\u6709\uff0c$dep_w=1$\uff0c\u800c\u5bf9\u4e8e\u975e\u65f6\u5b50\u8282\u70b9\uff0c\u663e\u7136\u6709\u8f6c\u79fb $dep_w=minx +1$\u3002\n\n\u5bf9\u4e8e\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff0c$u$ \u5b58\u5728\u4e24\u4e2a\u513f\u5b50\uff0c\u4ed6\u4eec\u7684 $dep_w$ \u90fd\u8981\u5c0f\u4e8e $k$\uff0c\u56e0\u4e3a $u$ \u53ea\u80fd\u548c\u4e00\u4e2a\u513f\u5b50\u5f80\u4e0a\u62fc\u63a5\uff0c\u4e24\u4e2a\u5c31\u4e0d\u884c\u4e86\uff0c\u8fd9\u4e2a\u8bb0\u4e3a\u60c5\u6cc1 $1$\u3002\n\n\u6700\u7ec8\u53ea\u9700\u8981\u5224\u65ad\u4e00\u4e0b $dep_1$\uff0c \u662f\u5426\u4e0d\u5c0f\u4e8e $k$ \u5373\u53ef\uff0c\u8fd9\u4e2a\u8bb0\u4e3a\u60c5\u51b5 $2$\u3002\n\n\u7136\u540e\u5c31\u662f\uff0c$r$ \u4e0d\u56fa\u5b9a\u7684\u60c5\u51b5\uff0c\u5f53\u7136\uff0c\u5047\u8bbe\u8bf4 $r = 1$ \u53ef\u884c\u90a3\u4e48\u6211\u4eec\u5c31\u76f4\u63a5\u8f93\u51fa\u4e86\u3002\n\n\u5982\u679c\u60c5\u51b5 $1$ \u4e0d\u5408\u6cd5\uff0c\u5b50\u6811\u4ee5\u5916\u7684\u70b9\u4f5c\u4e3a\u6839\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5b50\u6811\u7684\u672c\u8eab\u7ed3\u6784\u662f\u4e0d\u53d8\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u9700\u8981\u5c06 $minx$ \u5bf9\u5e94\u7684\u8282\u70b9 $v$ \u53d8\u6210\u6839\u3002\n\n\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u4e0d\u5408\u6cd5\u4e00\u5b9a\u662f\u8bf4\u660e\u4e86\u8fd9\u4e2a\u70b9\u5230 $u$ \u8ddd\u79bb\u662f\u5c0f\u4e8e $k$ \u7684\uff0c\u800c\u80af\u5b9a\u8fd8\u6709\u4e00\u4e2a $v\u2019$ \u5230 $u$ \u7684\u8ddd\u79bb\u662f\u5c0f\u4e8e $v$ \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u672c\u8d28\u4e0a\u662f\u628a $v$ \u5230 $v\u2019$ \u7684\u8def\u5f84\u6d82\u6210\u4e00\u79cd\u989c\u8272\u3002\n\n\u5982\u679c\u60c5\u51b5 $2$ \u4e0d\u5408\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u540c\u7406\uff0c\u4e5f\u662f\u627e $minx$ \u5c31\u884c\u4e86\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long ll;\nconst ll maxn = 2e5 + 7;\nconst ll INF = 1e18 + 7, MOD = 998244353;\n\ninline ll read() {\n    char cCc;\n    ll xXx = 0, wWw = 1;\n    while (cCc < '0' || cCc > '9')\n        (cCc == '-') && (wWw = -wWw), cCc = getchar();\n    while (cCc >= '0' && cCc <= '9')\n        xXx = (xXx << 1) + (xXx << 3) + (cCc ^ '0'), cCc = getchar();\n    xXx *= wWw;\n    return xXx;\n}\n\ninline void write(ll xXx) {\n    if (xXx < 0)\n        putchar('-'), xXx = -xXx;\n    if (xXx > 9)\n        write(xXx / 10);\n    putchar(xXx % 10 + '0');\n}\n\nll n, tx, ty, dep[maxn], minnode[maxn];\nvector<ll> G[maxn];\n\nbool dfs(ll u, ll fa, ll k) {\n    ll x = 0, y = 0, miny = INF, minx = INF;\n    for (auto v : G[u]) {\n        if (v == fa)continue;\n        if (!dfs(v, u, k))return false;\n        if (dep[v] <= minx)y = x, miny = minx, x = minnode[v], minx = dep[v];\n        else if (dep[v] <= miny)y = minnode[v], miny = dep[v];\n    }\n\n    if (miny < k) {\n        tx = x, ty = y;\n        return false;\n    }\n\n    if (x == 0)dep[u] = 1, minnode[u] = u;\n    else dep[u] = minx + 1, minnode[u] = x;\n\n    if (!fa) {\n        if (dep[u] < k)tx = minnode[u], ty = 1;\n        return dep[u] >= k;\n    }\n\n    return true;\n}\n\nbool check(ll k) {\n    if (dfs(1, 0, k)) return true;\n    else if (dfs(tx, 0, k) || dfs(ty, 0, k))return true;\n    return false;\n}\n\nvoid solve() {\n    n = read();\n    for (ll i = 1; i < n; i++) {\n        ll u = read(), v = read();\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n\n    ll l = 0, r = n, ans = 0;\n    while (l <= r) {\n        ll mid = (l + r) >> 1;\n        if (check(mid))\n            ans = mid, l = mid + 1;\n        else r = mid - 1;\n    }\n\n    cout << ans << '\\n';\n    for (ll i = 1; i <= n; i++)G[i].clear();\n}\n\nsigned main() {\n//    freopen(\"code.in\",\"r\",stdin);\n//    freopen(\"code.out\",\"w\",stdout);\n    ll T = read();\n    while (T--)solve();\n    return 0;\n}\n```\n",
        "postTime": 1677756058,
        "uid": 378222,
        "name": "fakestd",
        "ccfLevel": 0,
        "title": "[CF1796E] Colored Subgraphs \u9898\u89e3"
    },
    {
        "content": "~~remake \u4e86\u65e0\u6570\u904d\uff0c\u6211\u662f\u8fc5\u54e5~~\n\n---\n\n\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u9897\u65e0\u6839\u6811\uff0c\u6c42\u8986\u76d6\u6ee1\u6574\u68f5\u6811\u4e00\u7ec4\u6df1\u5ea6\u53ea\u53ef\u80fd\u9012\u589e\u7684\u94fe\u7684\u957f\u5ea6\u6700\u5c0f\u503c\u6700\u5927\u3002\n\n\u9996\u5148\u8003\u8651\u5b9a\u6839\u60c5\u51b5\uff0c\u7531\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\u53ea\u80fd\u4e0e\u5b83\u7684\u4e00\u4e2a\u513f\u5b50\uff08\u4e00\u6761\u94fe\uff09\u76f8\u8fde\uff0c\u6240\u4ee5\u6bcf\u6b21\u8d2a\u5fc3\u8fde\u6700\u77ed\u7684\u94fe\u5fc5\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\u5176\u6b21\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u6362\u6839\u53bb\u7edf\u8ba1\u6240\u6709\u7ed3\u70b9\u4e3a\u6839\u65f6\u7684\u7b54\u6848\u53d6\u6700\u5927\u503c\u3002\n\n\u6211\u4eec\u5148\u4fdd\u5b58\u539f\u6765\u6240\u6709\u7684\u94fe\u957f\u3002\n\n\u73b0\u5728\u8003\u8651\u4ee5 $u$ \u4e3a\u6839\u7684\u4e00\u68f5\u6811\uff0c\u5bf9\u4e8e\u5b83\u7684\u5b50\u7ed3\u70b9 $v$\uff0c\u8fdb\u884c\u6362\u6839\uff0c\u5f62\u6210\u4e00\u9897\u4ee5 $v$ \u4e3a\u6839\u7684\u6811\u3002\n\n\u6211\u4eec\u5206\u522b\u8ba8\u8bba $u$ \u8ddf $v$\u3002\n\n\u5bf9\u4e8e $u$ \u6765\u8bf4\uff0c\u5b83\u5c11\u4e86\u4e00\u9897\u5b50\u6811 $v$\uff0c\u5f53\u524d\u4ec5\u5f53 $v$ \u662f $u$ \u539f\u6765\u5b50\u8282\u70b9\u4e2d\u7684\u6700\u77ed\u7684\u94fe\u65f6\uff0c\u4f1a\u5bf9 $u$ \u7684\u94fe\u4ea7\u751f\u5f71\u54cd\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u5220\u6389\u539f\u6765\u4ee5 $u$ \u7ed3\u70b9\u4e3a\u9876\u70b9\u7684\u94fe\uff08\u6b64\u65f6 $u$ \u4e3a\u6839\uff0c\u5fc5\u5b9a\u662f\u94fe\u7684\u9876\u70b9\uff09\uff0c\u518d\u628a $u$ \u5b50\u7ed3\u70b9\u4e2d\u7684\u6b21\u5c0f\u503c\u7684\u90a3\u6761\u94fe\u5220\u9664\u628a $u$ \u8fde\u4e0a\u90a3\u6761\u94fe\u8fdb\u884c\u63d2\u5165\u3002\n\n\u5bf9\u4e8e $v$ \u6765\u8bf4\uff0c\u5b83\u591a\u4e86\u4e00\u9897\u5b50\u6811 $u$\uff0c\u82e5 $u$ \u7684\u65b0\u503c\u5c0f\u4e8e $v$ \u539f\u6765\u5b50\u7ed3\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u540c\u4e0a\uff0c\u5220\u6389\u539f\u6765\u7684 $v$ \u94fe\uff0c\u52a0\u5165\u539f\u6765 $v$ \u5b50\u7ed3\u70b9\u7684\u6700\u5c0f\u94fe\uff0c\u5c06\u6b21\u5c0f\u503c\u8d4b\u4e3a\u6700\u5c0f\u503c\uff0c\u5220\u6389 $u$ \u94fe\uff0c\u5c06 $v$ \u8fde\u4e0a $u$ \u63d2\u5165\uff0c\u5c06 $v$ \u7684\u5b50\u7ed3\u70b9\u7684\u6700\u5c0f\u503c\u8bbe\u4e3a $u$\uff1b\u82e5 $u$ \u5c0f\u4e8e $v$ \u539f\u6765\u5b50\u8282\u70b9\u4e2d\u7684\u6b21\u5c0f\u503c\uff0c\u76f4\u63a5\u5c06\u6b21\u5c0f\u503c\u8d4b\u4e3a $u$\u3002\n\n\u5f53\u56de\u6eaf\u65f6\uff0c\u5c06\u6240\u6709\u7684\u503c\u6062\u590d\u6210\u8fdb\u5165\u4e0b\u4e00\u5c42\u4e4b\u524d\uff0c\u5c06\u5220\u9664\u7684\u63d2\u5165\uff0c\u5c06\u63d2\u5165\u7684\u5220\u9664\u3002\n\n\u6bcf\u4e2a\u7ed3\u70b9\u4e3a\u6839\u7684\u7b54\u6848\u4fbf\u662f\u6240\u6709\u94fe\u957f\u7684\u6700\u5c0f\u503c\u3002\n\n\u53ef\u7528 multiset \u8fdb\u884c\u7b80\u5355\u7ef4\u62a4\u3002\n\n---\nCode\uff1a\n\n```cpp\nvoid dfs1(int u,int fa)//\u7b2c\u4e00\u904d\u4ee51\u4e3a\u6839\uff0c\u7edf\u8ba1\u7b54\u6848\u3002\n{//f \u4e3a\u5230\u5f53\u524d\u7ed3\u70b9\u7684\u94fe\u957f\uff0cMin1 Min2 \u5206\u522b\u4e3a\u5b50\u8282\u70b9\u4e2d\u94fe\u957f\u7684\u6700\u5c0f\u503c\u548c\u6b21\u5c0f\u503c\u3002\n    Min1[u]=Min2[u]=INF;\n    for(int i=head[u];i;i=e[i].nxt)\n    {\n        int v=e[i].to;\n        if(v==fa) continue;\n        dfs1(v,u);\n        if(f[v]<Min1[u]) Min2[u]=Min1[u],Min1[u]=f[v];\n        else if(f[v]<Min2[u]) Min2[u]=f[v];\n    }\n    f[u]=(Min1[u]==INF?0:Min1[u])+1;\n    auto it=link.find(Min1[u]);\n    if(it!=link.end()) link.erase(it);\n    link.insert(f[u]);//\u7edf\u8ba1\u5f00\u59cb\u7684\u6240\u6709\u94fe\u957f\n}\n\nvoid dfs2(int u,int fa)\n{\n    ans=max(ans,*link.begin());\n    for(int i=head[u];i;i=e[i].nxt)\n    {\n        int v=e[i].to,t1=f[u],t2=f[v],vm1=Min1[v],vm2=Min2[v];\n        vector<int> del,ins;\n        if(v==fa) continue;\n        if(f[v]==Min1[u])//\u4fee\u6539 u\u3002\n        {\n            auto it=link.find(f[u]);\n            if(it!=link.end()) link.erase(it),del.push_back(f[u]);\n            it=link.find(Min2[u]);\n            if(it!=link.end()) link.erase(it),del.push_back(Min2[u]);\n            f[u]=(Min2[u]==INF?0:Min2[u])+1;\n            link.insert(f[u]);\n            ins.push_back(f[u]);\n            link.insert(f[v]);\n            ins.push_back(f[v]);\n        }\n        if(f[u]<Min1[v])//\u4fee\u6539 v\u3002\n        {\n            auto it=link.find(f[v]);\n            if(it!=link.end()) link.erase(it),del.push_back(f[v]);\n            if(Min1[v]!=INF) link.insert(Min1[v]),ins.push_back(Min1[v]);\n            Min2[v]=Min1[v];\n            Min1[v]=f[u];\n            it=link.find(f[u]);\n            if(it!=link.end()) link.erase(it),del.push_back(f[u]);\n            f[v]=f[u]+1;\n            link.insert(f[v]);\n            ins.push_back(f[v]);\n        }\n        else if(f[u]<Min2[v]) Min2[v]=f[u];\n        dfs2(v,u);\n        f[u]=t1;//\u8fd8\u539f\n        f[v]=t2;\n        Min1[v]=vm1;\n        Min2[v]=vm2;\n        for(auto j:del) link.insert(j);\n        for(auto j:ins)\n        {\n            auto it=link.find(j);\n            link.erase(it);\n        }\n    }\n}\n```",
        "postTime": 1678686946,
        "uid": 370599,
        "name": "why_cb",
        "ccfLevel": 0,
        "title": "CF1796E Colored Subgraphs \u9898\u89e3"
    },
    {
        "content": "**\u524d\u8a00**\n\n------------\n\n`\u6362\u6839dp`\u3002\n\n**\u9898\u89e3**\n\n------------\n\n\u4e00\u773c\u6362\u6839\uff0c\u4f46\u662f\u786e\u5b9e\u633a\u96be\u8c03\u7684\uff0c\u53ef\u4ee5 $O(n)$\uff0c\u4f46\u662f\u7528 `map` \u5c31\u597d\u5199\u591a\u4e86\u3002\n\n\u9996\u5148\u4e0d\u8003\u8651\u6839\u4e0d\u5b9a\u7684\u60c5\u51b5\uff0c\u8fd9\u4e2a\u65f6\u5019\u9898\u76ee\u5c31\u53d8\u6210\u4e86\u628a\u6811\u5212\u5206\u6210\u4e0d\u80fd\u62d0\u89d2\u7684\u94fe\uff0c\u8981\u6c42\u6700\u5c0f\u94fe\u7684\u6700\u5927\u5927\u5c0f\u3002\n\n\u8fd9\u65f6\u5019\u5c31\u662f\u4e00\u4e2a `\u6811\u5f62dp` \u518d\u52a0\u4e0a\u4e00\u70b9\u5c0f\u5c0f\u7684\u8d2a\u5fc3\uff1a\u56e0\u4e3a\u5bf9\u4e8e\u7ed3\u70b9 $p$\uff0c\u5176\u6bcf\u4e00\u4e2a\u513f\u5b50 $tmp$ \u90fd\u5728\u4e14\u4ec5\u5728\u4e00\u6761\u94fe\uff0c\u6b64\u65f6\u8fd9\u4e2a\u7ed3\u70b9 $p$ \u5c31\u5212\u5f52\u4e0e\u6240\u6709\u513f\u5b50\u6240\u5728\u7684\u94fe\u4e2d\u6700\u5c0f\u7684\u4e00\u6761\u5c31\u884c\u4e86\u3002\u53ef\u4ee5 $O(n)$ \u5904\u7406\u3002\u7ef4\u62a4\u6bcf\u4e2a\u6839\u6240\u5728\u7684\u94fe\u7684\u5927\u5c0f\u548c\u5176\u5b50\u6811\u4e2d\u4e0d\u5728 $p$ \u7684\u94fe\u7684\u6700\u5c0f\u503c\u3002\n\n\u4f46\u662f\u6b64\u65f6\u6839\u662f\u4e0d\u5b9a\u7684\uff0c\u8003\u8651\u6362\u6839\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u6bcf\u6b21\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u628a\u5b83\u53d8\u6210\u6839\u53ea\u9700\u8981\u8003\u8651\u5176\u7236\u4eb2\u7684\u5176\u4ed6\u5b50\u7ed3\u70b9\u6240\u5728\u6811\u7684\u72b6\u6001\uff0c\u7528 `map` \u5b58\u50a8\u5373\u53ef\u5feb\u901f\u67e5\u627e\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5c31\u5f88\u597d\u5b9e\u73b0\u4e86\u3002\n\n**code**\n\n------------\n\n```\n#include<bits/stdc++.h>\ntemplate<typename G>inline void read(G&x) {G f=1;x=0;char ch=getchar();while((ch<'0'||ch>'9')&&ch!='-') ch=getchar();if(ch=='-') f=-1,ch=getchar();while(ch>='0'&&ch<='9') x=x*10+(ch^48),ch=getchar();x*=f;}\nusing namespace std;\nconst int MAXN=2e5+5;\nint T,n,u,v,f[MAXN],g[MAXN],ans;\nvector<int> G[MAXN];\nmap<int,int> sf[MAXN],sg[MAXN];\nvoid dfs(int p,int las) {\n\tint idx=0;f[p]=1e6;sf[p].clear(),sg[p].clear();\n\tfor(auto tmp:G[p]) {\n\t\tif(tmp!=las) {\n\t\t\tdfs(tmp,p);\n\t\t\t++sf[p][f[tmp]],++sg[p][g[tmp]];\n\t\t\tf[p]=min(f[p],f[tmp]);\n\t\t\tif(!idx||g[idx]>g[tmp]) idx=tmp;\n\t\t}\n\t}\n\tg[p]=g[idx]+1;\n\tfor(auto tmp:G[p]) {\n\t\tif(tmp!=las&&tmp!=idx) {\n\t\t\tf[p]=min(f[p],g[tmp]);\n\t\t}\n\t}\n}\nint fs[MAXN],gs[MAXN];\nvoid bfs(int p,int las) {\n\tif(p!=1) {\n\t\tint FS=fs[las],GS=gs[las];\n\t\t--sf[las][f[p]],--sg[las][g[p]];\n\t\tif(!sf[las][f[p]]) sf[las].erase(f[p]);\n\t\tif(!sg[las][g[p]]) sg[las].erase(g[p]);\n\t\tauto it1=sf[las].begin(),it2=sg[las].begin();\n\t\tif(it1!=sf[las].end()) FS=min(FS,it1->first);\n\t\tif(it2!=sg[las].end()) {\n\t\t\tif(it2->first+1<GS) {\n\t\t\t\tFS=min(FS,GS-1);\n\t\t\t\tGS=it2->first+1;\n\t\t\t\tif(it2->second==1) ++it2;\n\t\t\t\tif(it2!=sg[las].end()) FS=min(FS,it2->first);\n\t\t\t}\n\t\t\telse FS=min(FS,it2->first);\n\t\t}\n\t\telse if(las==1) GS=1;\n\t\t++sf[las][f[p]],++sg[las][g[p]];\n\t\tfs[p]=FS,gs[p]=GS+1;\n\t\tint SF=1e6,SG=1e6;\n\t\tauto it3=sf[p].begin(),it4=sg[p].begin();\n\t\tif(it3!=sf[p].end()) SF=min(SF,it3->first);\n\t\tif(it4!=sg[p].end()) {\n\t\t\tSG=min(SG,it4->first);\n\t\t\tif(it4->second==1) ++it4;\n\t\t\tif(it4!=sg[p].end()) SF=min(SF,it4->first);\n\t\t}\n\t\tSF=min(SF,FS);\n\t\tif(SG>GS) SF=min(SF,SG),SG=GS;\n\t\telse SF=min(SF,GS);\n\t\tans=max(ans,min(SF,SG+1));\n\t}\n\tfor(auto tmp:G[p]) {\n\t\tif(tmp!=las) {\n\t\t\tbfs(tmp,p);\n\t\t}\n\t}\n}\nsigned main() {\n\tread(T);\n\twhile(T--) {\n\t\tread(n);\n\t\tfor(int i=1;i<=n;++i) G[i].clear();\n\t\tfor(int i=2;i<=n;++i) {\n\t\t\tread(u),read(v);\n\t\t\tG[u].emplace_back(v);\n\t\t\tG[v].emplace_back(u);\n\t\t}\n\t\tdfs(1,0);gs[1]=fs[1]=1e6;\n\t\tans=min(f[1],g[1]);\n\t\tbfs(1,0);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1678284218,
        "uid": 271260,
        "name": "PosVII",
        "ccfLevel": 7,
        "title": "CF1796E Colored Subgraphs \u9898\u89e3"
    }
]