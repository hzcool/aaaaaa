[
    {
        "content": "CodeForces\u7684\u6807\u7b7e\u4e2d\u8bf4\u8fd9\u9898\u662f\u8ba1\u7b97\u51e0\u4f55\u9898\uff0c\uff0c\uff0c\u800c\u5b98\u65b9\u9898\u89e3\u91cc\u8bf4\u8fd9\u662f\u8d2a\u5fc3\u9898\uff0c\uff0c\uff0c\u7136\u800c\u6211\u8ba4\u4e3a\u8fd9\u5c31\u662f\u4e00\u9053\u66b4\u529b\u9898\u3002\u3002\n\n\u8bbe\u6709\u4e24\u4e2a\u70b9$(x_1,y_1)$\u548c$(x_2,y_2)$\uff0c\u5219\u8fd9\u6761\u8fb9\u7684\u957f$l=\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$\uff0c\u90a3\u4e48$l^2=(x_1-x_2)^2+(y_1-y_2)^2$\u3002\u6211\u4eec\u5b9a\u4e49{X,Y}\u4e3a\u8fd9\u6761\u8fb9\u7684\u79fb\u52a8\u91cf\uff0c\u5219$\\{X,Y\\}=\\{x_1-x_2,y_1-y_2\\}$\u3002\u6240\u4ee5\u6709$X^2+Y^2=l^2$\u3002\n\n\u5047\u8bbe\u6709\u4e00\u4e2an\u8fb9\u5f62\uff0c\u5219\u6709$\\{\\sum_{i=1}^{i=n}X_i,\\sum_{i=1}^{i=n}Y_i\\}=\\{0,0\\}$\uff0c\u6240\u4ee5$\\sum_{i=1}^{i=n}(X_i)^2$\u548c$\\sum_{i=1}^{i=n}(Y_i)^2$\u7686\u4e3a\u5076\u6570\uff0c\u6240\u4ee5$\\sum_{i=1}^{i=n}(l_i)^2$\u4e3a\u5076\u6570\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u6709\u4e00\u70b9\u4e3a(0,0),\u7b2c\u4e00\u6761\u8fb9\u4e3a\u6700\u957f\u8fb9\u3002\u4ece4\u5f00\u59cb\u7a77\u4e3e$l^2$(\u56e0\u4e3a1,2,3\u662f\u4e0d\u53ef\u80fd\u4f5c\u4e3a$l^2$)\uff0c\u6211\u4eec\u77e5\u9053\u4ece(0,0)\u4e3a\u4e00\u4e2a\u7aef\u70b9\uff0c\u9009\u53e6\u4e00\u4e2a\u6574\u6570\u683c\u70b9\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u7aef\u70b9\u4e14\u7ebf\u6bb5\u957f\u5ea6\u4e3al\u7684\u7ebf\u6bb5\u6700\u591a\u67098\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u9009\u4e00\u4e2a\u7ebf\u6bb5\u4f5c\u4e3a\u7b2c\u4e00\u6761\u8fb9\uff0c\u4e8e\u662f$X_1$\u548c$Y_1$\u4fbf\u5c31\u5df2\u77e5\u4e86\u3002\u7136\u540e\u5c31\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u95ee\u9898\uff1a\u5df2\u77e5$X_1$\u548c$Y_1$\u7684\u503c\uff0c\u6c42$\\left\\{\\begin{matrix} \\sum_{i=2}^{i=n}X_i=-X_1 \\\\  \\sum_{i=2}^{i=n}Y_i=-Y_1 \\\\ l_{i(2\\le i\\le n)}\\le l_1 \\end{matrix}\\right.$\u7684\u4e00\u7ec4\u89e3\u3002\u8fd9\u4e2a\u53ef\u4ee5\u914d\u5408\u5947\u5076\u6027\u5feb\u901f\u6c42\u51fa\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct point {\n\tint x , y , r;\n\tpoint() {}\n\tpoint(int a,int b):x(a) , y(b) , r(a*a + b*b){}\n\tbool operator == (point &cmp) const {\n\t\treturn r == cmp.r;\n\t}\n};\nvector <point> vec;\nvector <pair<int,int> > X , Y;\n\nbool cmp1(const point &a,const point &b) {\n\treturn a.r < b.r;\n}\nbool cmp2(const point &a,const point &b) {\n\treturn atan2(a.y+0.0 , a.x+0.0) < atan2(b.y+0.0 , b.x+0.0) - 1e-8;\n}\nvoid init() {\n\tfor (int i = 0 ; i < 200 ; i ++) {\n\t\tfor (int j = i ; j < 200 ; j ++) {\n\t\t\tvec.push_back(point(i , j));\n\t\t}\n\t}\n\tsort(vec.begin() , vec.end() , cmp1);\n\tvec.erase(unique(vec.begin() , vec.end()) , vec.end());\n}\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tinit();\n\tint n;\n\tcin >> n;\n\tint del = 0;\n\tfor (int i = 4 , cnt = 2 , bit = 1; ; i ++) {\n\t\tint p = bit;\n\t\tint q = (vec[i].x + vec[i].y) & 1;\n\t\tif (p && q) {\n\t\t\tif (++cnt == n) del = 3;\n\t\t\t++cnt;\n\t\t} else if (p && !q) {\n\t\t\tif (++cnt == n) del = 6;\n\t\t} else if (!p && !q) ++ cnt;\n\t\tbit = (p + q) & 1;\n\t\tif (cnt >= n) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 1 ; j <= i ; j ++) {\n\t\t\t\tif (j == del) continue;\n\t\t\t\tX.push_back(make_pair(vec[j].x , X.size()));\n\t\t\t\tY.push_back(make_pair(vec[j].y , Y.size()));\n\t\t\t\tsum = (sum + vec[j].x) & 1;\n\t\t\t}\n\t\t\tif (sum & 1) swap(X[0].first , Y[0].first);\n\t\t\tbreak;\n\t\t}\n\t}\n\tsort(X.begin() , X.end());\n\tsort(Y.begin() , Y.end());\n\tint sumX = 0 , sumY = 0;\n\tfor (int i = X.size() - 1 ; i >= 0 ; i --) {\n\t\tif (abs(sumX - X[i].first) < abs(sumX + X[i].first)) {\n\t\t\tsumX -= X[i].first;\n\t\t\tX[i].first = -X[i].first;\n\t\t} else sumX += X[i].first;\n\t\tif (abs(sumY - Y[i].first) < abs(sumY + Y[i].first)) {\n\t\t\tsumY -= Y[i].first;\n\t\t\tY[i].first = -Y[i].first;\n\t\t} else sumY += Y[i].first;\n\t}\n\twhile (sumX || sumY);\n\tfor (int i = 0; i < X.size() ; i ++) {\n\t\tvec[ X[i].second ].x = X[i].first;\n\t\tvec[ Y[i].second ].y = Y[i].first;\n\t}\n\tvec.erase(vec.begin() + X.size() , vec.end());\n\tsort(vec.begin() , vec.end() , cmp2);\n\tcout<<\"YES\"<<endl;\n\tint sumx = 0 , sumy = 0;\n\tfor (int i = 0 ; i < vec.size() ; i ++) {\n\t\tsumx += vec[i].x;\n\t\tsumy += vec[i].y;\n\t\tcout << sumx << ' ' << sumy << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1544895106,
        "uid": 119553,
        "name": "rEdWhitE_uMbrElla",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF46G \u3010Emperor's Problem\u3011"
    }
]