[
    {
        "content": "\u88ab\u6628\u5929\u7684\u6bd4\u8d5b\u9524\u7206\u4e86\uff0c\u4e8e\u662f\u53ea\u80fd\u627e\u70b9\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\u9898\u505a\u505a\u3002\n\n\u5728 Codeforces \u7684 Problemset \u627e $2100+$ \u7684\u6570\u636e\u7ed3\u6784\u9898\u5c45\u7136\u7b2c\u4e00\u9053\u5c31\u662f\u8fd9\u4e2a\uff0c\u70b9\u5f00\u4e00\u770b\u8bf6\u8fd9\u4e0d\u662f[\u6211\u51fa\u7684\u9898](https://www.luogu.com.cn/problem/U96295)\u4e48\uff1f\u679c\u7136\u968f\u4fbf\u51fa\u9053\u9898\u90fd\u80fd\u88ab\u627e\u539f\u9898\uff0c\u81ea\u95ed\u4e86\u3002\n\n-----\n\n\u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e24\u4e2a\u4e1c\u897f\uff1a\u533a\u95f4 $[l,r]$ \u5185\u4e0d\u80fd\u5339\u914d\u7684\u5de6\u62ec\u53f7\u6570\u91cf $Lsum_k$ \u548c\u53f3\u62ec\u53f7\u6570\u91cf $Rsum_k$\u3002\n\n\u5bf9\u4e8e\u53f6\u8282\u70b9\uff0c\u82e5\u539f\u5e8f\u5217\u7684\u8fd9\u4e00\u4f4d\u662f `(`\uff0c\u5219 $Lsum_k=1,Rsum_k=0$\uff1b\u5426\u5219 $Lsum_k=0,Rsum_k=1$\u3002\n\n\u5bf9\u4e8e\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u8bbe\u5176\u5de6\u513f\u5b50\u4e3a $lc$\uff0c\u53f3\u513f\u5b50\u4e3a $rc$\uff0c\u5219\u6709\uff1a\n\n$$Lsum_k=Lsum_{lc}+Lsum_{rc}-\\min\\{Lsum_{lc},Rsum_{rc}\\}$$\n\n$$Rsum_k=Rsum_{lc}+Rsum_{rc}-\\min\\{Lsum_{lc},Rsum_{rc}\\}$$\n\n\u82e5\u4e0d\u80fd\u4ea7\u751f\u4efb\u4f55\u65b0\u7684\u5339\u914d\uff0c\u5219\u4e0d\u80fd\u5339\u914d\u7684\u5de6\u62ec\u53f7\u6570\u91cf\u7b49\u4e8e\u5de6\u53f3\u513f\u5b50\u4e0d\u80fd\u5339\u914d\u7684\u5de6\u62ec\u53f7\u4e4b\u548c\u3002\u89c2\u5bdf\u5230\u5de6\u513f\u5b50\u4e0d\u80fd\u5339\u914d\u7684\u5de6\u62ec\u53f7\u53ef\u4ee5\u548c\u53f3\u513f\u5b50\u4e0d\u80fd\u5339\u914d\u7684\u53f3\u62ec\u53f7\u53ef\u4ee5\u5339\u914d\uff0c\u6240\u4ee5\u5e94\u8be5\u51cf\u53bb\u53ef\u4ee5\u5339\u914d\u7684\u6570\u91cf $\\min\\{Lsum_{lc},Rsum_{rc}\\}$\u3002\u5bf9\u4e8e\u53f3\u62ec\u53f7\u540c\u7406\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m \\log n)$\u3002\n\n```cpp\n# include <bits/stdc++.h>\n# define rr register\nconst int N=1000010;\nstruct Tree{\n    int Lsum,Rsum;\n}tree[N<<2];\nchar s[N];\nint n,m;\ninline int lc(int x){\n    return x<<1;\n}\ninline int rc(int x){\n    return x<<1|1;\n}\ninline void pushup(int k){\n    int New=std::min(tree[lc(k)].Lsum,tree[rc(k)].Rsum);\n    tree[k].Lsum=tree[lc(k)].Lsum+tree[rc(k)].Lsum-New;\n    tree[k].Rsum=tree[lc(k)].Rsum+tree[rc(k)].Rsum-New;\n    return;\n}\nvoid build(int k,int l,int r){\n    if(l==r){\n        if(s[l]=='(')\n            tree[k].Lsum=1;\n        if(s[r]==')')\n            tree[k].Rsum=1;\n        return;     \n    }\n    int mid=(l+r)>>1;\n    build(lc(k),l,mid);\n    build(rc(k),mid+1,r);\n    pushup(k);\n    return;\n}\nTree ask(int k,int l,int r,int L,int R){\n    if(L<=l&&r<=R){\n        return tree[k];\n    }\n    int mid=(l+r)>>1;\n    if(L<=mid&&!(mid<R))\n        return ask(lc(k),l,mid,L,R);\n    if(!(L<=mid)&&mid<R)\n        return ask(rc(k),mid+1,r,L,R);\n    Tree Lc=ask(lc(k),l,mid,L,R),Rc=ask(rc(k),mid+1,r,L,R),Ans;\n    int New=std::min(Lc.Lsum,Rc.Rsum);\n    Ans.Lsum=Lc.Lsum+Rc.Lsum-New;\n    Ans.Rsum=Lc.Rsum+Rc.Rsum-New;\n    return Ans;\n}\nint main(void){\n    scanf(\"%s\",s+1);\n    n=strlen(s+1);\n    build(1,1,n);\n    scanf(\"%d\",&m);\n    int l,r;\n    while(m--){\n        scanf(\"%d%d\",&l,&r);\n        Tree Ans=ask(1,1,n,l,r);\n        printf(\"%d\\n\",(r-l+1)-Ans.Lsum-Ans.Rsum);\n    }\n    return 0;\n}\n```",
        "postTime": 1583132210,
        "uid": 108949,
        "name": "Meatherm",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF380C \u3010Sereja and Brackets\u3011"
    },
    {
        "content": "# CF380C Sereja and Brackets \u9898\u89e3\n\n## \u9898\u610f\n\n\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u5927\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217\u957f\u5ea6\u3002\n\n## \u5206\u6790\n\n\u4e00\u822c\u9047\u5230\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\uff0c\u5f88\u591a\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u8f6c\u5316\uff1a\n\n**\u6bcf\u4e2a\u5de6\u62ec\u53f7\u89c6\u4e3a $1$\uff0c\u53f3\u62ec\u53f7\u89c6\u4e3a $-1$\u3002\u5408\u6cd5\u7684\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u524d\u7f00\u548c\u4e0d\u4e3a\u8d1f\u6570\uff0c\u4e14\u4ee5 $0$ \u7ed3\u675f\u3002**\n\n\u6240\u4ee5\u5bf9\u4e8e\u4e00\u6bb5\u524d\u7f00\u548c\uff0c\u5148\u8003\u8651\u662f\u5426\u5b58\u5728\u8d1f\u6570\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5c31\u53bb\u6389\u76f8\u5e94\u6570\u91cf\u7684\u53f3\u62ec\u53f7\u3002\n\n\u4e0d\u4ee5 $0$ \u7ed3\u675f\uff0c\u5c31\u53bb\u6389\u76f8\u5e94\u6570\u91cf\u7684\u5de6\u62ec\u53f7\u3002\n\n## \u5b9e\u73b0\n\n\u4e00\u5f00\u59cb\u5c31\u76f4\u63a5\u7ef4\u62a4\u6574\u4f53\u7684\u524d\u7f00\u548c\u3002\u90a3\u4e48\uff0c\u628a\u5355\u4e2a\u533a\u95f4\u7684\u524d\u7f00\u548c\u62ce\u51fa\u6765\u4e5f\u5c31\u7b80\u5355\u4e86\u3002\n\n\u9ed8\u8ba4\u662f\u6574\u4e2a\u533a\u95f4\u957f\u5ea6\u3002\u67e5\u627e\u8d1f\u6570\u76f4\u63a5\u7528 RMQ \u627e\u4e2a\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff0c\u53bb\u6389\u53f3\u62ec\u53f7\u65f6\u8981\u5bf9\u6574\u4e2a\u533a\u95f4\u7684\u524d\u7f00\u548c\u505a\u5bf9\u5e94\u7684\u5904\u7406\u3002\n\n\u5982\u679c\u6b64\u65f6\u8fd8\u4e0d\u4ee5 $0$ \u7ed3\u5c3e\uff0c\u5c31\u518d\u53bb\u6389\u5bf9\u5e94\u7684\u5de6\u62ec\u53f7\u3002\n\n\u90a3\u4e48\uff0c\u8fd9\u9053\u9898\u5c31\u88ab\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a\u7b80\u5355 RMQ\uff01\n\n\u5047\u8bbe\u533a\u95f4\u957f\u5ea6\u662f $n$\u3002$r=-\\min(0,\\min_{i=l}^{r}\\{a_i\\})$\uff0c\u800c\uff08\u672a\u7ecf\u53d8\u5316\u7684\uff09\u6574\u4e2a\u533a\u95f4\u7684\u524d\u7f00\u548c\u662f $s$\u3002\n\n\u90a3\u6211\u7684\u7ed3\u8bba\u5c31\u662f $n-r-(s+r)$\u3002\n\nST \u8868\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n+m)$\uff0c\u7ebf\u6bb5\u6811\u53ef\u4ee5\u505a\u5230 $O(n+m\\log n)$\u3002\n\n## \u4ee3\u7801\n\nST \u8868\u90fd\u53ef\u4ee5\u8dd1\u8fc7\u53bb\u3002\u66f4\u602a\u5f02\u7684\u662f\uff0c\u5982\u679c\u5199\u9519 ST \u8868\uff0c\u53d6 $r$ \u7684\u65f6\u5019\u4e0d\u8003\u8651\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u53ea\u8981\u5728 $s+r$ \u90a3\u91cc\u52a0\u4e0a\u7edd\u5bf9\u503c\u4e5f\u53ef\u4ee5\u8fc7\uff08\u5177\u4f53\u53ef\u4ee5\u63a8\u4e00\u63a8\u5f0f\u5b50\uff0c\u9519\u89e3\u6211\u5c31\u4e0d\u8d58\u8ff0\u4e86\uff09\u3002\u7b11\u6b7b\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MXN = 1000005;\nconst int MXLG = 20;\nint st[MXN][MXLG], lg[MXN];\nchar str[MXN];\nint N, M;\n\ninline int query(int l, int r) {\n\tint g(lg[r - l + 1]);\n\treturn min(st[l][g], st[r - (1 << g) + 1][g]);\n}\n\nint main() {\n\tcin >> (str + 1);\n\tN = strlen(str + 1);\n\tlg[1] = 0;\n\tfor (int i(2); i <= N; ++i) lg[i] = lg[i >> 1] + 1;\n\tfor (int i(1); i <= N; ++i) {\n\t\tif (str[i] == '(') st[i][0] = st[i - 1][0] + 1;\n\t\telse st[i][0] = st[i - 1][0] - 1;\n\t}\n\tfor (int i(1); (1 << i) <= N; ++i) {\n\t\tfor (int j(1); j + (1 << (i - 1)) <= N; ++j) {\n\t\t\tst[j][i] = min(st[j][i - 1], st[j + (1 << (i - 1))][i - 1]);\n\t\t}\n\t}\n\tcin >> M;\n\tfor (int l(0), r(0); M--; ) {\n\t\tcin >> l >> r;\n\t\tint nmin(-min(query(l, r) - st[l - 1][0], 0));\n\t\tcout << (r - l + 1) - nmin - (st[r][0] - st[l - 1][0] + nmin) << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1653976787,
        "uid": 478829,
        "name": "euphoria_ai",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 - CF380C Sereja and Brackets"
    },
    {
        "content": "\u8003\u8651\u4e00\u4e2a\u62ec\u53f7\u5e8f\u5217\uff0c\u6211\u4eec\u628a\u80fd\u5339\u914d\u7684\u62ec\u53f7\u5168\u90fd\u5220\u6389\uff0c\u5269\u4e0b\u7684\u62ec\u53f7\u4e00\u5b9a\u5f62\u5982 ))))))((((((((\n\n\u6211\u4eec\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u5185\uff0c\u5de6\u8fb9\u6709\u51e0\u4e2a )\uff0c\u53f3\u8fb9\u6709\u51e0\u4e2a (\uff0c\u80fd\u5339\u914d\u51e0\u5bf9\u62ec\u53f7\uff0c\u7136\u540e\u533a\u95f4\u5408\u5e76\u7684\u65f6\u5019\u8ba1\u7b97\u4e00\u4e0b\u80fd\u591a\u5339\u914d\u51e0\u5bf9\u62ec\u53f7\u5373\u53ef\n\n```cpp\n#include <bits/stdc++.h>\n#define Fast_cin ios::sync_with_stdio(false), cin.tie(0);\n#define rep(i, a, b) for(register int i = a; i <= b; i++)\n#define per(i, a, b) for(register int i = a; i >= b; i--)\n#define DEBUG(x) cerr << \"DEBUG\" << x << \" >>> \" << endl;\nusing namespace std;\n\ntypedef unsigned long long ull;\ntypedef pair <int, int> pii;\ntypedef long long ll;\n\ntemplate <typename _T>\ninline void read(_T &f) {\n    f = 0; _T fu = 1; char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') fu = -1; c = getchar(); }\n    while(c >= '0' && c <= '9') { f = (f << 3) + (f << 1) + (c & 15); c = getchar(); }\n    f *= fu;\n}\n\ntemplate <typename T>\nvoid print(T x) {\n    if(x < 0) putchar('-'), x = -x;\n    if(x < 10) putchar(x + 48);\n    else print(x / 10), putchar(x % 10 + 48);\n}\n\ntemplate <typename T>\nvoid print(T x, char t) {\n    print(x); putchar(t);\n}\n\ntemplate <typename T>\nstruct hash_map_t {\n    vector <T> v, val, nxt;\n    vector <int> head;\n    int mod, tot, lastv;\n    T lastans;\n    bool have_ans;\n\n    hash_map_t (int md = 0) {\n        head.clear(); v.clear(); val.clear(); nxt.clear(); tot = 0; mod = md;\n        nxt.resize(1); v.resize(1); val.resize(1); head.resize(mod);\n        have_ans = 0;\n    }\n\n    bool count(int x) {\n        int u = x % mod;\n        for(register int i = head[u]; i; i = nxt[i]) {\n            if(v[i] == x) {\n                have_ans = 1;\n                lastv = x;\n                lastans = val[i];\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    void ins(int x, int y) {\n        int u = x % mod;\n        nxt.push_back(head[u]); head[u] = ++tot;\n        v.push_back(x); val.push_back(y);\n    }\n\n    int qry(int x) {\n        if(have_ans && lastv == x) return lastans;\n        count(x);\n        return lastans;\n    }\n};\n\nconst int N = 1e6 + 5;\n\nint n, m;\n\nstruct ele {\n    int ans, left, right;\n    ele (int a = 0, int b = 0, int c = 0) : ans(a), left(b), right(c) {}\n};\n\nele merge(ele a, ele b) {\n    ele ans;\n    int val = min(a.right, b.left);\n    a.right -= val; b.left -= val;\n    ans.ans = a.ans + b.ans + val;\n    ans.left = a.left + b.left;\n    ans.right = a.right + b.right;\n    return ans;\n}\n\nstruct node_t {\n    int l, r;\n    ele val;\n} p[N << 2];\n\nchar c[N];\nvoid build(int u, int l, int r) {\n    p[u].l = l; p[u].r = r;\n    if(l == r) {\n        p[u].val = ele(0, c[l] == ')', c[l] == '(');\n        return;\n    }\n    int mid = (l + r) >> 1;\n    build(u << 1, l, mid); build(u << 1 | 1, mid + 1, r);\n    p[u].val = merge(p[u << 1].val, p[u << 1 | 1].val);\n}\n\nele query(int u, int l, int r) {\n    if(l <= p[u].l && p[u].r <= r) return p[u].val;\n    int mid = (p[u].l + p[u].r) >> 1; ele ans;\n    if(mid >= l) ans = merge(ans, query(u << 1, l, r));\n    if(mid + 1 <= r) ans = merge(ans, query(u << 1 | 1, l, r));\n    return ans;\n}\n\nint main() {\n    scanf(\"%s\", c + 1); n = strlen(c + 1);\n    build(1, 1, n);\n    read(m); while(m--) {\n        int l, r; read(l); read(r);\n        print(query(1, l, r).ans << 1, '\\n');\n    }\n    return 0;\n}\n```",
        "postTime": 1554080612,
        "uid": 51815,
        "name": "LJC00118",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF380C \u3010Sereja and Brackets\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f:\u7ed9\u5b9a\u4e00\u4e2a\u62ec\u53f7\u5b57\u7b26\u4e32, \u8fdb\u884c m \u6b21\u67e5\u8be2, \u6bcf\u6b21\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u4e2d\u6700\u957f\u7684\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217\u3002\n\n\u8003\u8651\u5c06\u62ec\u53f7\u5e8f\u5217\u8fdb\u884c\u4e00\u6b21\u53d8\u6362, \u5982\u679c\u6211\u4eec\u8bbe $($ \u7684\u6743\u503c\u4e3a $1$, $)$ \u7684\u6743\u503c\u4e3a $-1$, \u6211\u4eec\u4f1a\u5f97\u5230\u4e0b\u9762\u4e00\u4e2a\u5e8f\u5217:\n\n$())(())(())($ \u53d8\u4e3a $1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1$\u3002\n\n\u90a3\u8fd9\u6709\u4ec0\u4e48\u7528\u5462?\u5982\u679c\u6211\u4eec\u5bf9\u8fd9\u4e2a\u5e8f\u5217\u505a\u4e2a\u524d\u7f00\u548c $pre$, \u5e76\u6570\u5f62\u7ed3\u5408\u4e00\u4e0b, \u6211\u4eec\u6216\u8bb8\u80fd\u53d1\u73b0\u4e00\u4e9b\u6027\u8d28:\n\n![](https://s2.loli.net/2022/01/23/E3ZBy85QdxGfTXe.png)\n\n\u5728\u8fd9\u5f20\u56fe\u4e0a, \u5982\u679c\u6211\u4eec\u9009\u51fa\u4e00\u4e2a\u5728\u9ed1\u7ebf\u4e4b\u4e0b\u7684\u70b9, \u5b83\u524d\u9762\u7684\u53f3\u62ec\u53f7\u6570\u91cf\u6bd4\u5de6\u62ec\u53f7\u591a\u3002\n\n\u540c\u7406, \u9ed1\u7ebf\u4e4b\u4e0a\u7684\u70b9, \u524d\u9762\u7684\u53f3\u62ec\u53f7\u6570\u91cf\u6bd4\u5de6\u62ec\u53f7\u5c11\u3002\n\n\u4e5f\u5c31\u662f\u8bf4, \u5982\u679c\u6211\u4eec\u4efb\u610f\u9009\u51fa\u4e24\u4e2a\u70b9 $l, r$, \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 $pre_l, pre_r$ \u6765\u786e\u5b9a\u533a\u95f4\u5185\u5404\u79cd\u62ec\u53f7\u7684\u6570\u91cf\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5173\u6ce8\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898:\u5728\u4e0b\u9762\u8fd9\u4e2a\u533a\u95f4\u4e2d, \u6211\u4eec\u6700\u591a\u80fd\u9009\u51fa\u591a\u957f\u7684\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217\u5462?\n\n![](https://s2.loli.net/2022/01/23/ZxQrYsmoc5lBCRN.png)\n\n\u4e0d\u59a8\u8bbe\u6211\u4eec\u53d6\u51fa\u4e86 $x$ \u4e2a $($ , $y$ \u4e2a $)$, \u800c\u8fd9\u4e2a\u533a\u95f4\u91cc\u6709 $a$ \u4e2a $($, $b$ \u4e2a $)$\u3002\n\n\u6211\u4eec\u6709\u4ec0\u4e48\u7ed3\u8bba\u5462?\u663e\u7136 $x\u2265y$, $a\u2264b$, $x\u2264a$, $y\u2264b$\u3002\n\n\u6574\u7406\u5f97 $y \u2264 a$, \u5f53 $y$ \u53d6\u6700\u5927\u503c\u65f6, \u8fd8\u5269\u4e0b $b-a = h$ \u4e2a\n\n\u6240\u4ee5\u8bf4, \u6211\u4eec\u6700\u591a\u9009\u51fa\u957f\u5ea6\u4e3a $2b$ \u7684\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217.\n\n\u90a3\u5982\u679c\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc $)$ \u7684\u6570\u91cf\u5927\u4e8e $($ \u5462\uff1f\n\n\u540c\u7406\u5f97\u6700\u591a\u9009\u51fa $2a$ \u4e2a\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217, \u4e5f\u8fd8\u5269\u4e0b $h$ \u4e2a $($ \u6ca1\u6709\u88ab\u9009\u5230\u3002\n\n\u90a3\u4e48, \u8fd9\u6709\u4ec0\u4e48\u7528\u5462?\n\n\u6211\u4eec\u56de\u5230\u539f\u672c\u7684\u90a3\u5f20\u56fe\u4e2d:\n\n![](https://s2.loli.net/2022/01/23/E3ZBy85QdxGfTXe.png)\n\n\u5982\u679c\u6211\u4eec\u73b0\u5728\u8981\u6c42\u533a\u95f4 $[1, 10]$ \u4e2d\u7684\u6700\u957f\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217\u3002\n\n\u8fd9\u65f6\u6211\u4eec\u9009\u51fa $7$ \u8fd9\u4e2a\u70b9, \u6ce8\u610f\u8fd9\u662f\u8fd9\u4e2a\u533a\u95f4\u4e2d\u7684\u6700\u4f4e\u70b9\u3002\n\n\u6211\u4eec\u53d1\u73b0, \u533a\u95f4 $[1,7]$ \u548c $[8,10]$ \u4e0d\u5c31\u662f\u6211\u4eec\u521a\u521a\u6240\u6c42\u51fa\u7684\u95ee\u9898\u5417?\n\n\u56e0\u6b64\u5bf9\u4e8e $[1,7]$ , $h$ \u4e3a $1$, \u56e0\u6b64\u53ef\u4ee5\u9009\u51fa $7 - 1=6$ \u957f\u5ea6\u7684\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217\u3002\n\n\u5bf9\u4e8e $[8,10]$ , $h$ \u4e3a $1$, \u56e0\u6b64\u53ef\u4ee5\u9009\u51fa $3-1=2$ \u957f\u5ea6\u7684\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217\u3002\n\n\u6ce8\uff1a\u5bf9\u4e8e\u533a\u95f4\u7684 $l$, \u6211\u4eec\u8981\u770b\u7684\u662f\u7ebf\u6bb5\u7684\u8d77\u70b9, \u800c\u5bf9\u4e8e\u533a\u95f4\u7684 $r$, \u6211\u4eec\u8981\u770b\u7684\u662f\u7ec8\u70b9\u3002\n\n\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u7b54\u6848\u52a0\u8d77\u6765, $8$ \u5c31\u662f\u6700\u7ec8\u7684\u7b54\u6848\u3002\n\n\u4f60\u53ef\u80fd\u4f1a\u95ee, \u90a3\u5982\u679c\u524d\u540e\u820d\u5f03\u7684\u62ec\u53f7\u53c8\u62fc\u6210\u4e86\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217\u600e\u4e48\u529e?\n\n\u4e8b\u5b9e\u4e0a, \u524d\u9762\u6211\u4eec\u53ea\u820d\u5f03\u4e86\u53f3\u62ec\u53f7, \u800c\u540e\u9762\u6211\u4eec\u53ea\u820d\u5f03\u4e86\u5de6\u62ec\u53f7, \u4e0d\u53ef\u80fd\u62fc\u6210\u65b0\u7684\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u5f97\u5230 $h$ \u5373\u53ef\u3002\u4ee3\u7801\u5982\u4e0b:\n\n```\n#include <bits/stdc++.h>\n#define maxn 4000005\nusing namespace std;\nchar mp[maxn];\nint n, minn[maxn], m;\nint pre[maxn];\nint ls(int p) {\n\treturn p << 1;\n}\nint rs(int p) {\n\treturn p << 1 | 1;\n}\nvoid pushup(int p) {\n\tminn[p] = min(minn[ls(p)], minn[rs(p)]);\n}\nvoid build(int p, int l, int r) {\n\tint mid = (l + r) >> 1;\n\tif(l == r) {\n\t\tminn[p] = pre[l];\n\t\treturn;\n\t}\n\tbuild(ls(p), l, mid);\n\tbuild(rs(p), mid + 1, r);\n\tpushup(p);\n}\nint querymin(int l, int r, int p, int nl, int nr) {\n\tif(nl <= l && r <= nr) return minn[p];\n\tint mid = (l + r) >> 1, res = 2147483647;\n\tif(nl <= mid) res = min(res, querymin(l, mid, ls(p), nl, nr));\n\tif(nr > mid) res = min(res, querymin(mid + 1, r, rs(p), nl, nr));\n\treturn res;\n}\nint main() {\n\tcin >> mp + 1;\n\tn = strlen(mp + 1);\n\tfor(int i = 1;i <= n;i++) {\n\t\tif(mp[i] == '(') pre[i] = pre[i - 1] + 1;\n\t\telse pre[i] = pre[i - 1] - 1;//\u524d\u7f00\u548c\n\t}\n\tbuild(1, 1, n);\n\tscanf(\"%d\", &m);\n\tfor(int i = 1;i <= m;i++) {\n\t\tint l, r;\n\t\tscanf(\"%d%d\", &l, &r);\n\t\tint k = querymin(1, n, 1, l, r);//\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5c0f\u503c\n\t\tprintf(\"%d\\n\", r - l + 1 - abs(pre[r] - k) - abs(pre[l - 1] - k));\n\t}\n}\n```\n",
        "postTime": 1642922025,
        "uid": 141599,
        "name": "sinsop90",
        "ccfLevel": 7,
        "title": "CF380C\u9898\u89e3"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Coros-Trusds/p/16097295.html)\n\n\u7ebf\u6bb5\u6811\u6a21\u677f\u9898\u3002\n\n# \u9898\u76ee\u5206\u6790\n\n\u7ed9\u5b9a\u4e00\u4e2a\u62ec\u53f7\u4e32\u548c $m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u6c42\u533a\u95f4 $[l,r]$ \u5185\u6700\u957f\u5408\u6cd5\u62ec\u53f7**\u5b50\u5e8f\u5217**\u7684\u957f\u5ea6\u3002\n\n# \u9898\u76ee\u5206\u6790\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u666e\u901a\u7ebf\u6bb5\u6811\u4e0a\u518d\u8bb0\u5f55\u4e24\u4e2a\u53d8\u91cf $lnum,rnum$\uff0c\u5206\u522b\u8868\u793a\u533a\u95f4\u5185\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\u7684\u6570\u91cf\u548c\u672a\u5339\u914d\u7684\u53f3\u62ec\u53f7\u7684\u6570\u91cf\u3002\n\n\u4e8e\u662f\u6709\uff1a\n\n```cpp\ninline void pushup(int p) {\n\tnode[p].lnum = node[lson].lnum + node[rson].lnum - min(node[lson].lnum,node[rson].rnum);\n\tnode[p].rnum = node[lson].rnum + node[rson].rnum - min(node[lson].lnum,node[rson].rnum);\n}\n```\n\n\u5bf9\u4e8e\u5de6\u62ec\u53f7\u7684\u7edf\u8ba1\uff1a\n\n\u8bbe\u4e00\u975e\u53f6\u5b50\u8282\u70b9\u4e3a $p$\uff0c\u5176\u5de6\u513f\u5b50\u4e3a $ls$\uff0c\u53f3\u513f\u5b50\u4e3a $rs$\uff0c\u90a3\u4e48 $lnum_p=lnum_{ls}+lnum_{rs}$\uff0c\u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u5230\u4e00\u8d77\uff0c\u8fd9\u4e24\u4e2a\u533a\u95f4\u4e2d\u6ca1\u6709\u5408\u5e76\u6210\u529f\u7684\u62ec\u53f7\u53ef\u80fd\u4f1a\u518d\u6b21\u5408\u5e76\u6210\u529f\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a$ls$ \u4ee3\u8868\u7684\u533a\u95f4\u5b50\u4e32\u4e3a `()((`\uff0c$rs$ \u4ee3\u8868\u7684\u533a\u95f4\u5b50\u4e32\u4e3a `))()`\uff0c\u90a3\u4e48\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u5728\u4e00\u8d77\u540e\u4f1a\u53d8\u6210 `()(())()`\uff0c\u4f1a\u53d1\u73b0\u6b64\u65f6\u6ca1\u6709\u5339\u914d\u5931\u8d25\u7684\u62ec\u53f7\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u518d\u51cf\u53bb\u80fd\u591f\u5339\u914d\u7684\u62ec\u53f7\u6570\uff0c\u663e\u7136\u53ea\u8981\u6709\u4e24\u4e2a\u4e0d\u540c\u65b9\u5411\u7684\u62ec\u53f7\u5c31\u80fd\u5339\u914d\u6210\u529f\uff0c\u6240\u4ee5\u5e94\u51cf\u53bb $\\min\\{lnum_{ls},rnum_{rs}\\}$\u3002\n\n\u53f3\u62ec\u53f7\u7684\u7edf\u8ba1\u540c\u7406\u3002\n\n# \u4ee3\u7801\n\n```cpp\n//2022/2/12\n//2022/4/3\n#define _CRT_SECURE_NO_WARNINGS\n#include <iostream>\n#include <cstdio>\n#include <climits>//need \"INT_MAX\",\"INT_MIN\"\n#include <cstring>//need \"memset\"\n#include <numeric>\n#include <algorithm>\n#define enter putchar(10)\n#define debug(c,que) cerr << #c << \" = \" << c << que\n#define cek(c) puts(c)\n#define blow(arr,st,ed,w) for(register int i = (st);i <= (ed); ++ i) cout << arr[i] << w;\n#define speed_up() ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)\n#define mst(a,k) memset(a,k,sizeof(a))\n#define Abs(x) ((x) > 0 ? (x) : -(x))\n#define stop return(0)\nconst int mod = 1e9 + 7;\ninline int MOD(int x) {\n\tif(x < 0) x += mod;\n\treturn x % mod;\n}\nnamespace Newstd {\n\tchar buf[1 << 21],*p1 = buf,*p2 = buf;\n\tinline int getc() {\n\t\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1 << 21,stdin),p1 == p2) ? EOF : *p1 ++;\n\t}\n\tinline int read() {\n\t\tint ret = 0,f = 0;char ch = getc();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif(ch == '-') f = 1;\n\t\t\tch = getc();\n\t\t}\n\t\twhile (isdigit(ch)) {\n\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\tch = getc();\n\t\t}\n\t\treturn f ? -ret : ret;\n\t}\n\tinline void write(int x) {\n\t\tif(x < 0) {\n\t\t\tputchar('-');\n\t\t\tx = -x;\n\t\t}\n\t\tif(x > 9) write(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nusing namespace Newstd;\nusing namespace std;\n\nconst int N = 1e6 + 5;\nchar str[N];\nint n,m;\nstruct Segment_Tree {\n\tstruct Node {\n\t\tint l,r;\n\t\tint lnum,rnum;\n\t\t//lnum:\u5de6\u62ec\u53f7\u591a\u4f59\u7684\u6570\u91cf,rnum:\u6709\u62ec\u53f7\u591a\u4f59\u7684\u6570\u91cf\n\t} node[N << 2];\n\t#define lson (p << 1)\n\t#define rson (p << 1 | 1)\n\tinline void pushup(int p) {\n\t\tnode[p].lnum = node[lson].lnum + node[rson].lnum - min(node[lson].lnum,node[rson].rnum);\n\t\tnode[p].rnum = node[lson].rnum + node[rson].rnum - min(node[lson].lnum,node[rson].rnum);\n\t}\n\tinline void build(int p,int l,int r) {\n\t\tnode[p].l = l,node[p].r = r;\n\t\tif (l == r) {\n\t\t\tif (str[l] == '(') {\n\t\t\t\tnode[p].lnum = 1,node[p].rnum = 0;\n\t\t\t} else {\n\t\t\t\tnode[p].lnum = 0,node[p].rnum = 1;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tbuild(lson,l,mid),build(rson,mid + 1,r);\n\t\tpushup(p);\n\t}\n\tinline Node query(int x,int y,int p) {\n\t\tif (x <= node[p].l && node[p].r <= y) {\n\t\t\treturn node[p];\n\t\t}\n\t\tint mid = node[p].l + node[p].r >> 1;\n\t\tif (x <= mid && mid < y) {\n\t\t\tNode lans = query(x,y,lson),rans = query(x,y,rson),ans;\n\t\t\tans.lnum = lans.lnum + rans.lnum - min(lans.lnum,rans.rnum);\n\t\t\tans.rnum = lans.rnum + rans.rnum - min(lans.lnum,rans.rnum);\n\t\t\treturn ans;\n\t\t}\n\t\tif (x <= mid) return query(x,y,lson);\n\t\tif (y > mid) return query(x,y,rson);\n\t}\n\tinline int getans(int l,int r) {\n\t\tNode ans = query(l,r,1);\n\t\treturn r - l + 1 - ans.lnum - ans.rnum;\n\t}\n\t#undef lson\n\t#undef rson\n} seg;\nint main(void) {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\",\"r\",stdin);\n#endif\n\tcin >> str + 1 >> m;\n\tn = strlen(str + 1);\n\tseg.build(1,1,n);\n\twhile (m -- ) {\n\t\tint l,r;\n\t\tcin >> l >> r;\n\t\tcout << seg.getans(l,r) << \"\\n\";\n\t}\n\n\treturn 0;\n}\n```",
        "postTime": 1648990090,
        "uid": 430409,
        "name": "Coros_Trusds",
        "ccfLevel": 6,
        "title": "CF380C Sereja and Brackets"
    },
    {
        "content": "[\u5f15\u6d41\u3002](https://www.cnblogs.com/AllWeKnow/p/15367413.html)\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ef4\u62a4\u4e00\u6bb5\u957f\u5ea6 $|s|\\leq 10^6$ \u7684\u62ec\u53f7\u4e32\uff0c\u9700\u8981\u56de\u7b54 $m\\leq 10^5$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a\u533a\u95f4 $[l,r]$\uff0c\u6c42 $[l,r]$ \u7684**\u5b50\u5e8f\u5217**\u4e2d\u6700\u957f\u7684\u5408\u6cd5\u62ec\u53f7\u4e32\u957f\u5ea6\u3002\n\n## \u5206\u6790\n\n\u8003\u8651\u4e00\u4e2a\u62ec\u53f7\u4e32\u7684\u5b50\u5e8f\u5217\u4e2d\u6700\u957f\u7684\u5408\u6cd5\u62ec\u53f7\u4e32\u957f\u5ea6\uff0c\u4e0d\u59a8\u5206\u522b\u8ba1\u7b97\u5176\u4e2d\u6ca1\u6709\u5339\u914d\u7684\u5de6\u62ec\u53f7\u548c\u53f3\u62ec\u53f7\u4e2a\u6570\u3002\n\n\u4e0d\u59a8\u5206\u6cbb\u8ba1\u7b97\u5176\u4e2d\u5de6\u534a\u5b50\u4e32\u4e0e\u53f3\u534a\u5b50\u4e32\u4e2d\u6ca1\u6709\u5339\u914d\u7684\u5de6\u62ec\u53f7\u4e2a\u6570\u548c\u53f3\u62ec\u53f7\u4e2a\u6570\u3002\n\n\u663e\u7136\u5de6\u534a\u5b50\u4e32\u4e2d\u6ca1\u6709\u5339\u914d\u7684\u5de6\u62ec\u53f7\u53ef\u4ee5\u548c\u53f3\u534a\u5b50\u4e32\u4e2d\u6ca1\u6709\u5339\u914d\u7684\u53f3\u62ec\u53f7\u8fdb\u884c\u5339\u914d\u3002\u8fdb\u884c\u5408\u5e76\u65f6\u51cf\u6389\u5373\u53ef\u3002\n\n\u7531\u4e8e\u662f\u5bf9\u4e8e\u4e00\u4e2a\u62ec\u53f7\u4e32\u7684\u5b50\u4e32\u8fdb\u884c\u8be2\u95ee\uff0c\u81ea\u7136\u800c\u7136\u5730\u53ef\u4ee5\u60f3\u5230 Segment Tree\u3002\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5373 pushup \u7684\u8fc7\u7a0b\u3002\n\n\u5982\u679c\u8bf4\u7684\u4e0d\u591f\u6e05\u695a\uff0c\u53ef\u4ee5\u7528\u5f0f\u5b50\u8868\u793a\u4e00\u4e0b\u3002\u4e0b\u6807 $l$ \u8868\u793a\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\uff0c$r$ \u8868\u793a\u672a\u5339\u914d\u7684\u53f3\u62ec\u53f7\u3002\n\n$$\\begin{cases}\\text{tot}_l=\\text{left son}_l+\\text{right son}_l-\\min(\\text{left son}_l,\\text{right son}_r)\\\\\\text{tot}_r=\\text{left son}_r+\\text{right son}_r-\\min(\\text{left son}_l,\\text{right son}_r)\\end{cases}$$\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define HohleFeuerwerke using namespace std\n#pragma GCC optimize(3,\"Ofast\",\"-funroll-loops\",\"-fdelete-null-pointer-checks\")\n#pragma GCC target(\"ssse3\",\"sse3\",\"sse2\",\"sse\",\"avx2\",\"avx\")\n#define int long long\nHohleFeuerwerke;\ninline int read(){\n\tint s=0,f=1;char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) s=s*10+c-'0';\n\treturn s*f;\n}\ninline void write(int x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>=10) write(x/10);\n\tputchar('0'+x%10);\n}\nconst int MAXN=1e6+5;\nint n,T;\nchar str[MAXN];\nstruct node{\n\tint l,r;\n\tint lsum,rsum;\n}t[MAXN*4];\ninline void update(int i){\n\tt[i].lsum=t[i*2].lsum+t[i*2+1].lsum-min(t[i*2].lsum,t[i*2+1].rsum);\n\tt[i].rsum=t[i*2].rsum+t[i*2+1].rsum-min(t[i*2].lsum,t[i*2+1].rsum);\n\t//\u7531\u4e8e\u5de6\u53f3\u533a\u95f4\u5408\u5e76\u65f6\u4e0d\u80fd\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u5de6\u534a\u533a\u95f4\u6ca1\u6709\u5339\u914d\u7684\u5de6\u62ec\u53f7\u90fd\u5bf9\u5e94\u53f3\u8fb9\u6ca1\u6709\u5339\u914d\u7684\u53f3\u62ec\u53f7\uff0c\u505a\u51cf\u6cd5\u65f6\u53d6\u7684\u662f\u8f83\u5c0f\u503c\u3002\n}\ninline void build(int i,int l,int r){\n\tt[i].l=l,t[i].r=r;\n\tif(l==r){\n\t\tif(str[l]=='(') t[i].lsum=1;\n\t\tif(str[l]==')') t[i].rsum=1;\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tbuild(i*2,l,mid); build(i*2+1,mid+1,r);\n\tupdate(i);\n}\ninline node query(int i,int l,int r){\n\tif(t[i].l>=l&&t[i].r<=r){\n\t\treturn t[i];\n\t}\n\tint mid=(t[i].l+t[i].r)/2;\n\tif(l>mid) return query(i*2+1,l,r);//\u5f85\u67e5\u533a\u95f4\u5b8c\u5168\u5728 mid \u53f3\u4fa7\n\tif(r<=mid) return query(i*2,l,r);//\u5f85\u67e5\u533a\u95f4\u5b8c\u5168\u5728 mid \u5de6\u4fa7\n\t//\u6ce8\u610f\u8fd9\u91cc\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u53ea\u9700\u8981\u6709\u4ea4\u96c6\u5c31\u67e5\u7684\u533a\u522b\n\t//\u5982\u679c\u5f85\u67e5\u533a\u95f4\u5728\u4e24\u8fb9\u5185\u90fd\u6709\n\tnode tl=query(i*2,l,r),tr=query(i*2+1,l,r);\n\tnode ans;\n\tans.lsum=tl.lsum+tr.lsum-min(tl.lsum,tr.rsum);\n\tans.rsum=tl.rsum+tr.rsum-min(tl.lsum,tr.rsum);\n\t//\u5b9e\u9645\u4e0a\u5373\u5408\u5e76\u5de6\u53f3\u5b50\u533a\u95f4\n\treturn ans;\n}\nsigned main()\n{\n\tscanf(\"%s\",str+1);\n\tn=strlen(str+1);\n\tbuild(1,1,n);\n\tT=read();\n\twhile(T--){\n\t\tint l=read(),r=read();\n\t\tnode tmp=query(1,l,r);\n\t\twrite((r-l+1)-tmp.lsum-tmp.rsum);\n\t\t//\u6240\u6c42\u7684\u662f\u5339\u914d\u7684\u5b50\u5e8f\u5217\u957f\u5ea6\u3002\u53ef\u4ee5\u7528\u603b\u957f-\u6ca1\u6709\u5339\u914d\u7684\u5de6\u62ec\u53f7\u4e2a\u6570-\u6ca1\u6709\u5339\u914d\u7684\u53f3\u62ec\u53f7\u4e2a\u6570\u6765\u8ba1\u7b97 \n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1633356822,
        "uid": 143271,
        "name": "HohleFeuerwerke",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF380C\u3010Sereja and Bracket\u3011"
    },
    {
        "content": "\u9996\u5148$[l,r]$\u4e2d\u5408\u6cd5\u7684\u62ec\u53f7\u4e32\u957f\u5ea6\u5c31\u7b49\u4e8e$r - l + 1 -$ \u672a\u5339\u914d\u7684$'(' - $ \u672a\u5339\u914d\u7684$')'$\n\n\u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u5185\u6709\u591a\u5c11\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\u548c\u672a\u5339\u914d\u7684\u53f3\u62ec\u53f7\n\n\u5408\u5e76\u7684\u65f6\u5019\u51cf\u53bb\u65b0\u5339\u914d\u7684\u62ec\u53f7\u6570\uff0c\u5373\uff1a\n\n$tl[o] = tl[lson] + tl[rson] - min(tl[lson], tr[rson])$\n\n$tr[o] = tr[lson] + tr[rson] - min(tl[lson], tr[rson])$\n\n\u5176\u4e2dlson\u4e3a\u5de6\u513f\u5b50rson\u4e3a\u53f3\u513f\u5b50\n\n\u6bcf\u6bb5\u533a\u95f4\u5904\u7406\u5b8c\u540e\u7b49\u4e8e\u5220\u6389\u5339\u914d\u7684\u62ec\u53f7\uff0c\u53ea\u5269\u4e0b\u7c7b\u4f3c $))))(((($ \u7684\uff08\u5de6\u53f3\u62ec\u53f7\u53ef\u6709\u53ef\u65e0\uff09\n\n```cpp\ninline void into() { ios::sync_with_stdio(false); }\n\n#define int long long\n#define mid ((l+r)>>1)\n#define lson (o<<1)\n#define rson (o<<1|1)\n#define R register\n#define PP pair<int, int>\n#define mp(x, y) make_pair(x, y)\n\nconst int N = 1e6 + 10;\n\nchar s[N];\nint n, m;\n//tl\u672a\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\u6570\uff0ctr\u4e3a\u672a\u5339\u914d\u7684\u53f3\u62ec\u53f7\u6570\nint tl[N << 2], tr[N << 2];\n//\u5408\u5e76\ninline void pushup(int o)\n{\n\ttl[o] = tl[lson] + tl[rson] - min(tl[lson], tr[rson]);\n\ttr[o] = tr[lson] + tr[rson] - min(tl[lson], tr[rson]);\n}\n\ninline void build(int o, int l, int r)\n{\n\tif(l == r)\n\t{\n\t\tif(s[l] == '(') tl[o] = 1;\n\t\telse tr[o] = 1;\n\t\treturn;\n\t}\n\tbuild(lson, l, mid);\n\tbuild(rson, mid + 1, r);\n\tpushup(o);\n}\n\ninline PP ask(int o, int l, int r, int ql, int qr)\n{\n\tif(ql <= l && r <= qr) return mp(tl[o], tr[o]);\n\tif(qr <= mid) return ask(lson, l, mid, ql, qr);\n\tif(ql > mid) return ask(rson, mid + 1, r, ql, qr);\n\tPP ls = ask(lson, l, mid, ql, qr), rs = ask(rson, mid + 1, r, ql, qr), res;\n\tres.first = ls.first + rs.first - min(ls.first, rs.second);\n\tres.second = ls.second + rs.second - min(ls.first, rs.second);\n\treturn res;\n}\n\nint x, y;\n\nsigned main()\n{\n\tinto();\n\tcin >> s + 1;\n\tn = strlen(s + 1);\n\tbuild(1, 1, n);\n\tcin >> m;\n\twhile(m--)\n\t{\n\t\tcin >> x >> y;\n\t\tPP ans = ask(1, 1, n, x, y);\n\t\tcout << (y - x + 1) - ans.first - ans.second << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1605253135,
        "uid": 103023,
        "name": "AvA_sleeper",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF380C \u3010Sereja and Brackets\u3011"
    }
]