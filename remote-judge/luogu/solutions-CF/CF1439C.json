[
    {
        "content": "\u76f8\u8f83\u4e8e div2 C \u6211\u8fd8\u662f\u89c9\u5f97\u8fd9\u9898\u66f4\u597d\u5199/kk\n\n\u4e00\u773c\u5c31\u77e5\u9053\u662f\u4e2a\u5bf9\u5e8f\u5217\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u9898\u3002\u6709\u4e24\u79cd\u64cd\u4f5c\uff0c\u4e00\u79cd\u4fee\u6539\uff0c\u4e00\u79cd\u67e5\u8be2\u3002\n\n\u8003\u8651**\u4ece\u6027\u8d28\u5165\u624b**\uff0c\u672c\u9898\u7684\u6027\u8d28\u662f\u5e8f\u5217**\u5355\u8c03\u4e0d\u9012\u589e**\uff0c\u5e76\u4e14\u4fee\u6539\u540e\u4e5f\u663e\u7136\u6ee1\u8db3\u8be5\u6027\u8d28\u3002\u90a3\u4e48\u6709\u5e8f\u5e8f\u5217\u5c31\u53ef\u4ee5\u60f3\u5230**\u4e8c\u5206**\u3002\n\n\u4e8e\u662f\u663e\u800c\u6613\u89c1\u64cd\u4f5c $1$ \u9700\u8981\u4e8c\u5206\u51fa\u6700\u5927\u7684\u5c0f\u4e8e $y$ \u7684\u6570\u5728\u54ea\uff0c\u64cd\u4f5c $2$ \u9700\u8981\u4e8c\u5206\u51fa\u4e00\u4e2a\u4f4d\u7f6e $s$\uff0c\u4f7f\u5f97 $\\sum_{i=x}^sa_i\\leq y$ \u4e14 $\\sum_{i=x}^{s+1}a_i> y$\uff0c\u6216\u8005 $\\sum_{i=x}^na_i\\leq y$\u3002\n\n\u505a\u6cd5\u6709\u5f88\u591a\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u6709\u7684\u5199\u4e0d\u597d\u5c31\u5e26\u4e0a\u4e86 3log \u4ece\u800c gg\u3002\u8003\u8651\u7ebf\u6bb5\u6811\u7684\u4f18\u7f8e\u6027\u8d28\u4e8e\u662f\u76f4\u63a5\u5728\u5b83\u4e0a\u9762\u4e8c\u5206\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $1$ \u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u82e5\u5de6\u513f\u5b50\u6700\u5c0f\u503c\u5927\u4e8e\u7b49\u4e8e $y$ \u5c31\u5230\u53f3\u513f\u5b50\u91cc\u9762\u627e\uff0c\u5426\u5219\u9012\u5f52\u5de6\u513f\u5b50\u3002\u8fd9\u90e8\u5206\u663e\u7136\u662f $O(logn)$ \u7684\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $2$ \u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u5148\u7ed9\u51fa\u4ee3\u7801\u3002\n```cpp\ninline int query(int id,int l,int r,int lbor,int &y){\n    if(r<lbor||y<mn[id]) return 0;\n    if(l>=lbor&&y>=sum[id]){\n        y-=sum[id];\n        return min(n,r)-l+1;\n    }\n    pushdown(id,l,r);\n    int mid=(l+r)>>1,ans=0;\n    if(mid>=lbor) ans+=query(id<<1,l,mid,lbor,y);\n    ans+=query(id<<1|1,mid+1,r,lbor,y);\n    return ans;\n}\n```\n\n\n\u82e5\u8be5\u533a\u95f4\u53f3\u7aef\u70b9\u5c0f\u4e8e $x$ \u6216\u533a\u95f4\u6700\u5c0f\u503c\u5927\u4e8e\u5f53\u524d $y$\uff0c\u90a3\u4e48\u663e\u7136\u662f $0$\uff1b\u82e5\u533a\u95f4\u5408\u6cd5\u4e14\u533a\u95f4\u548c\u5c0f\u4e8e\u5f53\u524d $y$ \u5219\u76f4\u63a5\u7b97\u4e0a\u8fd9\u6bb5\u957f\u5ea6\uff0c\u5426\u5219\u9012\u5f52\u5de6\u53f3\u513f\u5b50\u3002\n\n\u5728\u6b64\u5bf9 $y$ \u91c7\u53d6\u5f15\u7528\u53ef\u4ee5\u5b9e\u65f6\u51cf\u53bb\u5df2\u7ecf\u6210\u4e3a\u7b54\u6848\u7684\u6bb5\uff0c\u540c\u65f6\u5148\u904d\u5386\u5de6\u513f\u5b50\u518d\u904d\u5386\u53f3\u513f\u5b50\u4e5f\u6ee1\u8db3\u4e86\u4ece\u5de6\u5230\u53f3\u8fdb\u884c\u904d\u5386\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u88ab\u8bb0\u5165\u7b54\u6848\u7684\u8282\u70b9\u6570\u91cf\u4e3a $log_2y$ \u7ea7\u522b\u3002\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a\u5176\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u6df1\u5ea6\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u82e5\u4e00\u4e2a\u88ab\u9009\u8282\u70b9\u662f\u5176\u7236\u8282\u70b9\u7684\u5de6\u513f\u5b50\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u9009\u7684\u8282\u70b9\u5fc5\u7136\u4e0d\u4f1a\u662f\u53f3\u8282\u70b9\uff0c**\u5426\u5219\u7b54\u6848\u4e0d\u8fde\u7eed**\uff1b\u5e76\u4e14\u53ea\u80fd\u9009**\u6df1\u5ea6\u6bd4\u5b83\u66f4\u6df1**\u7684\u5de6\u8282\u70b9\uff0c\u76f4\u5230\u53f6\u5b50\u8282\u70b9\u3002\n\n\u82e5\u4e00\u4e2a\u88ab\u9009\u8282\u70b9\u662f\u5176\u7236\u8282\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u5b83\u6709**\u4e24\u79cd\u9009\u62e9**\uff1a\u9009\u6df1\u5ea6\u4e0d\u5c0f\u4e8e\u5b83\u7684\u5de6\u513f\u5b50\uff0c\u968f\u540e\u6df1\u5ea6\u9010\u6e10\u52a0\u6df1\uff0c\u4e00\u76f4\u5230\u53f6\u5b50\u8282\u70b9\uff1b\u9009\u6df1\u5ea6\u5c0f\u4e8e\u5b83\u7684\u4e00\u4e2a\u53f3\u513f\u5b50\uff08\u5b83\u7236\u4eb2\u7684\u5144\u5f1f\uff09\u3002\n\n\u6240\u4ee5\u6240\u9009\u4ece\u5de6\u5230\u53f3\u8282\u70b9\u7684\u6df1\u5ea6\u5e94\u5f53\u662f**\u5148\u9012\u51cf\u540e\u9012\u589e**\uff0c\u5047\u5b9a\u4e00\u5f00\u59cb\u5728\u53f6\u5b50\u7ed3\u70b9\u9012\u589e\uff0c\u6700\u540e\u9012\u51cf\u5230\u53e6\u5916\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u4e2d\u95f4\u7ecf\u8fc7\u7684\u70b9\u6570\u4e5f\u53ea\u6709 $2log_2y$\u3002\u800c\u62b5\u8fbe\u4e00\u4e2a\u8282\u70b9\u6240\u7ecf\u8fc7\u7684\u8282\u70b9\u6570\u4e0d\u8d85\u8fc7 $log_2n$\uff0c\u6545\u8fd9\u6b65\u64cd\u4f5c\u590d\u6742\u5ea6\u4e0d\u5927\u4e8e $O(logylogn)$\u3002\n\n[code](https://www.luogu.com.cn/paste/yktubhwc)",
        "postTime": 1605671383,
        "uid": 135839,
        "name": "Fairicle",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1439C \u3010Greedy Shopping\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u975e\u9012\u589e\u5e8f\u5217 $a$\uff0c\u5728\u4e00\u6bb5\u8def\u4e0a\u4f9d\u6b21\u6392\u5217\u4e86 $n$ \u4e2a\u5546\u5e97\uff0c\u5728\u7b2c $i$ \u4e2a\u5546\u5e97\u4e70\u4e00\u987f\u996d\u7684\u4ef7\u94b1\u662f $a_i$\u3002\u73b0\u5728\u6709 $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5f62\u5982\u4ee5\u4e0b\u4e24\u79cd\uff1a\n\n- `1 x y`\uff1a\u5bf9\u6240\u6709 $1\\leq i\\leq n$ \u5c06 $a_i$ \u8d4b\u503c\u4e3a $\\max(a_i,y)$\u3002\n\n- `2 x y`\uff1a\u4e00\u4e2a\u4eba\u4ece $x$ \u53f7\u5546\u5e97\u5f00\u59cb\u8d70\u5411\u6700\u540e\u4e00\u4e2a\u5546\u5e97\uff0c\u4e00\u5f00\u59cb\u6709 $y$ \u5143\u94b1\u3002\u5982\u679c\u8d70\u5230\u67d0\u4e00\u5bb6\u5546\u5e97\u95e8\u524d\u770b\u5230\u81ea\u5df1\u80fd\u591f\u4e70\u4e00\u987f\u996d\u90a3\u5c31\u4e70\uff0c\u6c42\u51fa\u8fd9\u4e2a\u4eba\u4e70\u4e86\u51e0\u987f\u996d\u3002\n\n$\\texttt{Data Range:}1\\leq n,q\\leq 2\\times 10^5$\n\n### \u9898\u89e3\n\n\u6781\u597d\u7684\u7ebf\u6bb5\u6811\u4e8c\u5206\u9898\u3002\n\n\u5bf9\u4e8e $1$ \u64cd\u4f5c\u6765\u8bf4\uff0c\u53ef\u4ee5\u4e8c\u5206\u51fa\u6700\u5de6\u7aef\u7684\u4f4d\u7f6e $i$ \u6ee1\u8db3 $a_i<y$\uff0c\u7136\u540e\u533a\u95f4\u8986\u76d6\u5373\u53ef\uff0c**\u6ce8\u610f\u8fd9\u4e2a\u64cd\u4f5c\u5e76\u4e0d\u6539\u53d8\u5e8f\u5217\u7684\u5355\u8c03\u6027\u3002**\n\n\u5bf9\u4e8e $2$ \u64cd\u4f5c\u6765\u8bf4\uff0c\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u51fa\u8fd9\u4e2a\u7b54\u6848\u6765\u3002\u4f46\u662f\u8fd9\u4e2a\u5de6\u7aef\u70b9\u7684\u9650\u5236\u4f1a\u4f7f\u5f97\u4e8c\u5206\u5199\u8d77\u6765\u5f88\u9ebb\u70e6\uff0c\u4e8e\u662f\u8003\u8651\u5c06\u8fd9\u4e2a\u5f71\u54cd\u6d88\u6389\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4eba $(x,y)$ \u6765\u8bf4\uff0c\u5c06\u4ed6\u7684\u94b1\u589e\u52a0 $\\sum\\limits_{i=1}^{x-1}a_i$ \u7136\u540e\u8ba9\u4ed6\u4ece $1$ \u5f00\u59cb\u8d70\uff0c\u7531\u4e8e\u8fd9\u4e2a\u4eba\u4ece $1$ \u5230 $x-1$ \u90fd\u4f1a\u4e70\u4e1c\u897f\uff0c\u6240\u4ee5\u5230\u4e86 $x$ \u8fd9\u4e2a\u4f4d\u7f6e\u4ed6\u7684\u94b1\u5c31\u4e0e\u539f\u6765\u662f\u4e00\u6837\u7684\uff0c\u6700\u540e\u518d\u628a\u4e4b\u524d\u591a\u7b97\u7684 $x-1$ \u4e2a\u5546\u5e97\u51cf\u6389\u5c31\u597d\u4e86\u3002 \n\n\u6ce8\u610f\u5230\u6bcf\u4e2a\u4eba\u8fdb\u5546\u5e97\u4e70\u4e1c\u897f\u6784\u6210\u6700\u591a $\\log y$ \u4e2a\u8fde\u7eed\u6bb5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(q\\log y\\log n)$ \u7684\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long int ll;\nconst ll MAXN=2e5+51;\nstruct SegmentTree{\n\tll l,r,mn,sum,tag;\n};\nSegmentTree tree[MAXN<<2];\nll n,m,op,u,v;\nll x[MAXN];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\n#define ls node<<1\n#define rs (node<<1)|1\ninline void update(ll node)\n{\n\ttree[node].mn=min(tree[ls].mn,tree[rs].mn);\n\ttree[node].sum=tree[ls].sum+tree[rs].sum;\n}\ninline void create(ll l,ll r,ll node)\n{\n\ttree[node]=(SegmentTree){l,r,0,0,0};\n\tif(l==r)\n\t{\n\t\treturn (void)(tree[node].sum=tree[node].mn=x[l]);\n\t}\n\tll mid=(l+r)>>1;\n\tcreate(l,mid,ls),create(mid+1,r,rs),update(node);\n}\ninline void spread(ll node)\n{\n\tif(tree[node].tag)\n\t{\n\t\tll lenl=tree[ls].r-tree[ls].l+1,lenr=tree[rs].r-tree[rs].l+1;\n\t\tll tag=tree[node].tag;\n\t\ttree[ls].mn=tag,tree[rs].mn=tag,tree[ls].tag=tag,tree[rs].tag=tag;\n\t\ttree[ls].sum=tag*lenl,tree[rs].sum=tag*lenr,tree[node].tag=0;\n\t}\n}\ninline void cover(ll l,ll r,ll val,ll node)\n{\n\tif(l<=tree[node].l&&r>=tree[node].r)\n\t{\n\t\ttree[node].sum=val*(tree[node].r-tree[node].l+1);\n\t\treturn (void)(tree[node].tag=tree[node].mn=val);\n\t}\n\tll mid=(tree[node].l+tree[node].r)>>1;\n\tspread(node);\n\tl<=mid?cover(l,r,val,ls):(void)1,r>mid?cover(l,r,val,rs):(void)1;\n\tupdate(node);\n}\ninline ll query(ll l,ll r,ll node)\n{\n\tif(l<=tree[node].l&&r>=tree[node].r)\n\t{\n\t\treturn tree[node].sum;\n\t}\n\tll mid=(tree[node].l+tree[node].r)>>1;\n\tspread(node);\n\treturn (l<=mid?query(l,r,ls):0)+(r>mid?query(l,r,rs):0);\n}\ninline ll lb(ll val,ll node)\n{\n\tif(tree[node].l==tree[node].r)\n\t{\n\t\treturn tree[node].l;\n\t}\n\tll mid=(tree[node].l+tree[node].r)>>1;\n\tspread(node);\n\treturn lb(val,tree[ls].mn>val?rs:ls);\n}\ninline ll query(ll &val,ll node)\n{\n\tif(tree[node].sum<=val)\n\t{\n\t\treturn val-=tree[node].sum,tree[node].r-tree[node].l+1;\n\t}\n\tif(tree[node].l==tree[node].r)\n\t{\n\t\treturn 0;\n\t}\n\tspread(node);\n\tll lenl=tree[node].r-tree[node].l+1,res=0;\n\ttree[ls].mn<=val?res+=query(val,ls):1;\n\ttree[rs].mn<=val?res+=query(val,rs):1;\n\treturn res;\n}\ninline void disp(ll node)\n{\n\tif(tree[node].l==tree[node].r)\n\t{\n\t\treturn (void)(printf(\"%d \",tree[node].sum));\n\t}\n\tspread(node),disp(ls),disp(rs);\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tx[i]=read();\n\t}\n\tcreate(1,n,1);\n\tfor(register int i=0;i<m;i++)\n\t{\n\t\top=read(),u=read(),v=read();\n\t\tif(op==1)\n\t\t{\n\t\t\tcover(lb(v,1),u,v,1);\n\t\t}\n\t\tif(op==2)\n\t\t{\n\t\t\tv+=u>1?query(1,u-1,1):0,printf(\"%d\\n\",query(v,1)-u+1);\n\t\t}\n\t}\n}\n```",
        "postTime": 1605687848,
        "uid": 60990,
        "name": "Karry5307",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1439C \u3010Greedy Shopping\u3011"
    },
    {
        "content": "\u5b66\u957f\u8bf4\u8fd9\u662f\u4e00\u9053\u7ebf\u6bb5\u6811\u4e8c\u5206\u9898\uff0c\u8ba9\u6211\u4eec\u4e00\u5b9a\u8981\u5b66\u4f1a\uff0c\u4e8e\u662f\u6211\u5f00\u59cb\u4e86~~\u7206\u809d~~\u4e4b\u65c5\u3002\u4e3a\u4e86\u7ed9\u548c\u6211\u4e00\u6837~~\u6bd4\u8f83\u83dc\u7684\u4eba\u770b~~\uff0c\u6211\u6253\u7b97\u5c06\u9898\u89e3\u5199\u5f97\u8be6\u7ec6\u800c\u4e14\u901a\u4fd7\u6613\u61c2\u4e00\u4e9b\u3002\n\n## \u601d\u8def\n\n\u9996\u5148\u4e00\u773c\u79d2\u7684\u66b4\u529b\u601d\u8def\uff0c\u76f4\u63a5\u4e24\u5c42\u5faa\u73af\u4e0a\u53bb\u5e72\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(qn)$\uff0c~~\u7136\u540e\u76f4\u63a5\u66b4\u6bd9\u3002~~\n\n\u63a5\u7740\u60f3\u600e\u4e48\u4f18\u5316\uff0c\u65e2\u7136\u5b66\u957f\u8bf4\u662f\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u83ab\u975e\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4+\u4e8c\u5206\u67e5\u627e\uff1f\u6211\u8bd5\u8bd5\u6211\u8bd5\u8bd5\uff0c\u55ef\uff0c\u9996\u5148\u53d1\u73b0\u64cd\u4f5c$1$\u4e0d\u4f1a\u6539\u53d8\u5e8f\u5217\u7684\u5355\u8c03\u6027\uff1a\u5927\u7684\u4e0d\u4f1a\u53d8\uff0c\u56e0\u4e3a\u5b83\u4eec\u672c\u6765\u5c31\u6bd4\u8fd9\u4e2a\u503c\u8981\u5927\uff1b\u800c\u88ab\u6539\u7684\u503c\u672c\u6765\u5c31\u6bd4\u8fd9\u4e2a\u503c\u5c0f\uff0c\u6539\u5b8c\u4e4b\u540e\u8fd8\u662f\u6bd4\u6ca1\u6709\u6539\u7684\u503c\u5c0f\uff0c\u6240\u4ee5\u5927\u5c0f\u5173\u7cfb\u6ca1\u6709\u6539\u53d8\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e8c\u5206\u3002\u5bf9\u4e8e\u64cd\u4f5c$1$\uff0c\u6211\u53ea\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\uff0c\u7136\u540e\u6bcf\u6b21\u5728\u7ebf\u6bb5\u6811\u4e2d\u5f80\u4e0b\u9012\u5f52\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u66ff\u6362\u503c\u7684\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u4e86\u3002\u67e5\u8be2\u533a\u95f4\u6700\u5927\u503c\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(logn)$\uff0c\u7136\u540e\u4e8c\u5206\u53c8\u662f$O(logn)$\uff0c\u4e00\u5171\u6709$q$\u6b21\u64cd\u4f5c\uff0c\u90a3\u4e48\u73b0\u5728\u5bf9\u4e8e\u64cd\u4f5c$1$\uff0c\u6211\u5c31\u53ef\u4ee5\u5728$O(nlog^2n)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u4e86\u3002\u770b\u4e00\u773c\u6570\u636e\u8303\u56f4\uff1a$n \\leq 2*10^5$\uff0c\u55ef\u8001\u54e5\u8fd9\u6ce2\u5f88\u7a33\u3002\u7136\u540e\u518d\u770b\u64cd\u4f5c$2$\uff0c**\u6545 \u6280 \u91cd \u65bd**\uff0c\u5bb3\uff0c\u8fd9\u4e0d\u662f\u5c0f\u83dc\u4e00\u789f\uff1f\u8fd9\u84dd\u9898\u5c31\u8fd9\u5440\uff0c\u6211\u8fd8\u4ee5\u4e3a\u7ebf\u6bb5\u6811\u4e8c\u5206\u6709\u591a\u96be\u5462\uff0c\u4e24\u4e2a\u666e\u53ca\u7b97\u6cd5\u62fc\u8d77\u6765\u7f62\u4e86\u3002\u9996\u5148\u4e8c\u5206\u627e\u5230\u7b2c\u4e00\u4e2a\u80fd\u4e70\u7684\u4e1c\u897f\u7684\u4f4d\u7f6e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(logn)$\u3002\u7136\u540e\u8ba1\u7b97\u533a\u95f4\u548c\uff0c$O(logn)$\u3002\u7136\u540e......\u6b38\uff1f\u8c8c\u4f3c\u4e0d\u592a\u5bf9\u52b2\u554a\uff1f\u597d\u50cf\u540e\u9762\u8fd8\u6709\u82e5\u5e72\u6bb5\uff0c\u800c\u6bcf\u4e00\u6bb5\u90fd\u9700\u8981$O(log^2n)$\u6765\u89e3\u51b3\uff0c\u518d\u52a0\u4e0a$q$\u6b21\u8be2\u95ee\uff0c\u6211\u4e0d\u5c31\u70b8\u4e86\u5417$QWQ$\u3002\n\n\u5371\uff0c\u60f3\u9519\u4e86\u3002\n\n\u6b63\u5f53\u6211\u7ede\u5c3d\u8111\u6c41\u60f3\u5982\u4f55\u4f18\u5316\u65f6\uff0c\u5b66\u957f\u4e00\u8bed\u60ca\u9192\u68a6\u4e2d\u4eba\uff1a\u5982\u679c\u5728\u7ebf\u6bb5\u6811\u5916\u9762\u4e8c\u5206\uff0c\u90a3\u4e48\u65e0\u8bba\u600e\u4e48\u4f18\u5316\u90fd\u662f\u8981\u5e26\u7740\u8fd9\u4e2a$log$\u3002\u4f46\u662f\u7ebf\u6bb5\u6811\u4e8c\u5206\u7684\u610f\u601d\u662f\u5728\u7ebf\u6bb5\u6811\u91cc\u9762\u4e8c\u5206\uff0c\u8fd9\u6837\u4f60\u9012\u5f52\u7684\u65f6\u5019\u4e0d\u5c31\u76f8\u5f53\u4e8e\u628a\u533a\u95f4\u4e8c\u5206\u4e86\u5417\uff0c\u7528\u4e00\u4e2a$log$\u5c31\u5168\u90e8\u89e3\u51b3\u4e86\u3002\u604d\u7136\u5927\u609f\uff01\n\n\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\uff1a\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6211\u53bb\u9012\u5f52\u5de6\u53f3\u513f\u5b50\u8282\u70b9\u3002\u9996\u5148\u5206\u4e3a\u4e09\u79cd\u5927\u60c5\u51b5\uff1a$1.$\u5b8c\u5168\u5305\u542b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5206\u4e3a\u4e09\u79cd\u5b50\u60c5\u51b5\uff1a$a.$\uff0c\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u6bd4$y$\uff08\u542b\u4e49\u89c1\u9898\u610f\uff09\u8981\u5c0f\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\uff0c\u7b2c\u4e00\u4e2a\u80fd\u4e70\u7684\u5546\u54c1\u5c31\u662f\u5de6\u7aef\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de\u5de6\u7aef\u70b9\u3002$b.$\uff0c\u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6700\u5c0f\u503c\u6bd4$y$\u8981\u5927\uff0c\u90a3\u4e5f\u5c31\u662f\u8bf4\u8fd9\u6bb5\u533a\u95f4\u91cc\u7684\u4e1c\u897f\u6211\u4e00\u4e2a\u4e5f\u4e70\u4e0d\u8d77\uff0c\u90a3\u4e48\u53ef\u4ee5\u8fd4\u56de$n+k$\uff0c\u5176\u4e2d$k$\u53ea\u8981\u968f\u4fbf\u7ed9\u4e00\u4e2a\u6b63\u503c\u5c31\u884c\u4e86\uff0c\u4e3a\u7684\u662f\u8ba9\u5b83\u5927\u4e8e$n$\uff0c\u6211\u4ee3\u7801\u4e2d\u5199\u7684\u662f$10$\u3002$c.$\u6bd4\u6700\u5927\u503c\u5c0f\uff0c\u6bd4\u6700\u5c0f\u503c\u5927\uff0c\u90a3\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u6c42\u7684\u7b54\u6848\u6070\u597d\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\uff0c$pushdown$\u4e0b\u4f20\u6807\u8bb0\u4e4b\u540e\u76f4\u63a5\u9012\u5f52\u7136\u540e\u53bb$min$\u5373\u53ef\uff08\u56e0\u4e3a\u6211\u4eec\u8981\u627e\u7684\u662f**\u7b2c\u4e00\u4e2a**\u80fd\u4e70\u7684\u7269\u54c1\u7684\u4f4d\u7f6e\uff09\u3002$2.$\u5b8c\u5168\u4e0d\u5305\u542b\u3002\u8fd9\u79cd\u60c5\u51b5\u76f4\u63a5\u8fd4\u56de$n+k$\u5373\u53ef\uff08\u4e0d\u5305\u542b\u7b97\u4e2a**\uff09\u3002$3.$\u90e8\u5206\u5305\u542b\u3002\u8fd9\u79cd\u60c5\u51b5\u4e5f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u9012\u5f52\u5de6\u53f3\u513f\u5b50\u5c31\u884c\u4e86\u3002\u8fd9\u6837\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5728\u7ebf\u6bb5\u6811\u5411\u4e0b\u9012\u5f52\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u65e0\u610f\u95f4\u5b8c\u6210\u4e86\u7c7b\u4f3c\u4e8c\u5206\u7684\u8fc7\u7a0b\u3002\u5728\u539f\u5148\u7684\u7ebf\u6bb5\u6811+\u4e8c\u5206\u4e2d\uff0c\u6211\u4eec\u8981\u5148\u7528$log$\u7684\u65f6\u95f4\u6c42\u51fa\u6700\u5927\u6216\u6700\u5c0f\u503c\uff0c\u7136\u540e\u4e8c\u5206\u8fd8\u8981\u4e00\u4e2a$log$\u3002\u4f46\u73b0\u5728\u4e00\u4e2a$log$\u5c31\u89e3\u51b3\u4e86\u3002\n\n\u800c\u4e0a\u8ff0\u53ea\u662f\u64cd\u4f5c$2$\u7684\u524d\u534a\u90e8\u5206\uff0c\u540e\u534a\u90e8\u5206\u8fd8\u8981\u6c42\u51fa\u4e00\u6bb5\u533a\u95f4\uff0c\u4f7f\u5f97\u8fd9\u6bb5\u533a\u95f4\u6ee1\u8db3\uff1a\u5982\u679c\u52a0\u4e0a\u539f\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u6570\uff0c\u548c\u5c31\u4f1a\u8d85\u8fc7$y$\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u4e70\u4e0d\u8d77\u4e86\u3002\u6211\u4ee3\u7801\u4e2d\u7684\u6b64\u51fd\u6570\u8fd4\u56de\u503c\u662f\u6211\u521a\u597d**\u4e70\u4e0d\u8d77**\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u4e0b\u6807\u3002\u90a3\u4e48\u6309\u7167\u4e0a\u4e2a\u66b4\u529b\u7684\u601d\u8def\uff0c\u5355\u6b21\u8fd9\u6837\u53c8\u8981$log$\u6c42\u51fa\u533a\u95f4\u548c\u7136\u540e$log$\u4e8c\u5206\u3002\u4f46\u662f\u4e0e\u521a\u624d\u7684\u601d\u8def\u5dee\u4e0d\u591a\uff0c\u6211\u4eec\u8fd8\u662f\u9012\u5f52\u5de6\u53f3\u513f\u5b50\u8282\u70b9\uff1a\u8fd9\u534a\u90e8\u5206\u64cd\u4f5c\u5c31\u660e\u663e\u6bd4\u4e0a\u534a\u90e8\u5206\u8981\u7b80\u5355\u4e00\u70b9\u3002\u5927\u81f4\u601d\u8def\u5c31\u662f\uff0c\u5982\u679c\u5de6\u513f\u5b50\u7684\u533a\u95f4\u548c\u6211\u80fd\u4e70\u5f97\u8d77\uff0c\u90a3\u4e48\u6211\u8981\u627e\u7684\u4f4d\u7f6e\u80af\u5b9a\u5728\u53f3\u8fb9\u3002\u53cd\u4e4b\uff0c\u5c31\u5728\u5de6\u8fb9\u3002\u6211\u4eec\u901a\u8fc7\u524d\u534a\u90e8\u5206\u64cd\u4f5c\u6765\u786e\u5b9a\u5de6\u7aef\u70b9\u7136\u540e\u5728\u533a\u95f4\u5185\u8001\u8001\u5b9e\u5b9e\u5730\u9012\u5f52\u5373\u53ef\u3002\u4f46\u662f\u5b66\u957f\u53c8\u63d0\u51fa\u4e86\u9a9a\u64cd\u4f5c\uff0c\u5305\u62ec\u5176\u4ed6\u6709\u7684\u9898\u89e3\u4e5f\u6709\u8fd9\u4e2a\u9a9a\u64cd\u4f5c\uff1a\u6211\u5176\u5b9e\u4e0d\u7528\u7ba1\u5de6\u7aef\u70b9\u5728\u54ea\u4e2a\u4f4d\u7f6e\u3002\u5047\u8bbe\u8bf4\uff0c\u6211\u5e94\u8be5\u4ece$x$\u53f7\u5f00\u59cb\u4e70\uff0c\u4f46\u662f\u6211\u5982\u679c\u4ece$1$\u53f7\u5f00\u59cb\u4e70\uff0c\u5c31\u76f8\u5f53\u4e8e\u6211\u591a\u82b1\u4e86$1$\u53f7\u5230$x-1$\u53f7\u7684\u94b1\u3002\u5982\u679c\u6211\u624b\u4e2d\u7684\u94b1\u52a0\u4e0a\u8fd9\u4e00\u90e8\u5206\u94b1\uff0c\u7136\u540e\u4ee5$1$\u4e3a\u8d77\u70b9\u5f00\u59cb\u67e5\u627e\uff0c\u8fd9\u6837\u5c31\u4f1a\u53d1\u73b0\u6211\u4eec\u628a\u5de6\u7aef\u70b9\u7edf\u4e00\u4e86\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u5c31\u662f\u4ee3\u7801\u4e2d\u5c11\u4e86\u5f88\u591a\u7ec6\u8282\uff0c\u66f4\u4fbf\u4e8e\u5b9e\u73b0\u548c\u8c03\u8bd5\uff0c\u5305\u62ec\u6211\u4e5f\u662f\u8fd9\u4e48\u505a\u7684\u3002\n\n\u81f3\u6b64\uff0c\u4ee3\u7801\u548c\u601d\u8def\u4ee5\u53ca\u5b8c\u5168\u8be6\u7ec6\u5730\u8bb2\u89e3\u4e86\u4e00\u904d\u3002\u4f46\u662f\u73b0\u5728\u8fd8\u5dee\u6700\u540e\u7684\u4e00\u6b65\uff1a\u8bc1\u660e\u590d\u6742\u5ea6\u3002\u7ecf\u8fc7\u4e0a\u9762\u7684\u4f18\u5316\uff0c\u6211\u4eec\u6210\u529f\u628a\u6bcf\u4e00\u6b21\u64cd\u4f5c$1$\u90fd\u4f18\u5316\u5230\u4e86$O(qlog^2n)$\uff0c\u800c\u6bcf\u4e00\u6b21\u64cd\u4f5c$2$\u90fd\u4f18\u5316\u5230\u4e86$O(qlogn*k)$\u3002\u800c\u5176\u4e2d\u7684$k$\u5c31\u5728\u4e8e\u6211\u4e70\u4e86\u51e0\u6bb5\uff0c\u6211\u4e70\u4e86\u51e0\u6bb5\u4e1c\u897f\u5c31\u8981\u9012\u5f52\u51e0\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u8981\u8bc1\u660e$k$\u6700\u5927\u80fd\u6709\u591a\u5927\u3002\n\n\u800c\u7ed3\u8bba\u5c31\u662f\uff1a$k \\leq log_2y$\n\n\u6211\u4e5f\u4e0d\u77e5\u9053\u8fd9\u7b97\u662f\u611f\u6027\u7406\u89e3\u8fd8\u662f\u7406\u6027\u8bc1\u660e\uff0c\u4f46\u662f\u6b63\u786e\u6027\u662f\u53ef\u4ee5\u4fdd\u8bc1\u7684\u3002\u6211\u4eec\u8fd9\u6837\u60f3\uff1a\u5047\u8bbe\u6709\u4e00\u4e2a\u4eba\u8fd9\u6837\u53bb\u5199\u4e86\uff0c\u4f60\u8981\u6784\u9020\u4e00\u7ec4\u6570\u636e\u628a\u4ed6\u5361\u6210$TLE$\uff0c\u90a3\u4e48\u5c31\u8981\u8ba9$k$\u5c3d\u53ef\u80fd\u7684\u5927\u3002\u800c\u7ed9\u5b9a\u7684\u533a\u95f4$x-n$\u662f\u4e0d\u4f1a\u6539\u53d8\u7684\uff0c\u5982\u679c\u6784\u9020\u4e00\u7ec4\u6570\u636e\uff0c\u8ba9\u4ed6\u6bcf\u4e00\u6bb5\u90fd\u53ea\u4e70\u4e86\u4e00\u4ef6\u7269\u54c1\uff0c\u5c31\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u8ba9\u6bb5\u6570\u53d8\u591a\u3002**\u4f46\u662f\uff0c**\u5982\u679c\u4e00\u6bb5\u53ea\u5356\u4e00\u4e2a\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u4e00\u5b9a\u4e70\u4e0d\u8d77\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5047\u8bbe\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u7269\u54c1\uff0c\u5b83\u4eec\u7684\u4ef7\u683c\u5206\u522b\u662f$w_i$\u548c$w_{i+1}$\uff0c\u90a3\u4e48$w_i \\leq y < w_i+w_{i+1}$\u3002\u6211\u4eec\u8fd9\u6837\u60f3\uff1a\u7531\u4e8e\u5e8f\u5217\u662f\u5355\u8c03\u4e0d\u589e\u7684\uff0c\u90a3\u4e48$y-w_i < y/2$\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u770b\u6210\uff0c\u6bcf\u4e00\u6b21\u4e70\u4e00\u4e2a\u4e1c\u897f\uff0c\u6700\u540e\u603b\u6bb5\u6570\u8981\u6bd4\u6bcf\u4e00\u6b21\u603b\u94b1\u6570\u9664\u4ee5$2$\u5f97\u5230\u7684\u603b\u6bb5\u6570\u8981\u5c11\u3002\u800c\u6bcf\u6b21\u9664\u4ee5$2$\uff0c\u6700\u7ec8\u5c31\u4f1a\u5f97\u5230$log_2y$\u6bb5\u3002\u603b\u7ed3\u4e00\u4e0b\u5c31\u662f\uff1a\u5728**\u6700\u574f\u60c5\u51b5\u4e0b\uff0c**\uff0c\u6700\u591a\u4f1a\u5206\u6210$logy$\u6bb5\uff0c\u4e5f\u5c31\u662f$O(logn)$\u7684\u64cd\u4f5c\u6700\u591a\u8fdb\u884c$logy$\u6b21\u3002\u90a3\u4e48\u5bf9\u4e8e\u6574\u4e2a\u64cd\u4f5c$2$\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(qlog^2n+qlognlogy)$\u3002\u53ef\u4ee5\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u6c42\u51fa\u6700\u7ec8\u7684\u7ed3\u679c\u3002\n\n\u5e0c\u671b\u80fd\u7ed9\u4e0d\u4f1a\u7684\u7ae5\u978b\u4ee5\u5e2e\u52a9\uff0c\u8282\u7701\u66f4\u591a\u7684\u65f6\u95f4\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\ninline ll read(){\n\tll x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-') f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n\treturn x*f;\n}\nint n,m;\nll a[200005];\nstruct Node {\n\tint l,r;\n\tll v,tag,minn=1000000000000,maxx=-1000000000000;\n\tNode *ls,*rs;\n\tNode(const int L,const int R) {\n\t\tl=L,r=R;\n\t\tif(l==r) {\n\t\t\ttag=0;\n\t\t\tv=a[l];\n\t\t\tminn=a[l];\n\t\t\tmaxx=a[l];\n\t\t\tls=rs=NULL;\n\t\t} else {\n\t\t\ttag=0;\n\t\t\tint M=(L+R)/2;\n\t\t\tls=new Node(L,M);\n\t\t\trs=new Node(M+1,R);\n\t\t\tpushup();\n\t\t}\n\t}\n\tinline void pushup() {\n\t\tmaxx=max(ls->maxx,rs->maxx);\n\t\tminn=min(ls->minn,rs->minn);\n\t\tv=ls->v+rs->v;\n\t}\n\tinline void pushdown() {\n\t\tif(tag==0) return;\n\t\telse {\n\t\t\tls->maketag(tag);\n\t\t\trs->maketag(tag);\n\t\t\ttag=0;\n\t\t}\n\t}\n\tinline void maketag(ll w) {\n\t\tv=(r-l+1)*w;\n\t\ttag=w;\n\t\tminn=tag;\n\t\tmaxx=tag;\n\t}\n\tinline bool InRange(const int L,const int R) {\n\t\treturn (l>=L)&&(r<=R);\n\t}\n\tinline bool OutofRange(const int L,const int R) {\n\t\treturn (r<L)||(l>R);\n\t}\n\tinline void upd(const int L,const int R,ll w) {\n\t\tif(InRange(L,R)) {\n\t\t\tmaketag(w);\n\t\t} else if(!OutofRange(L,R)) {\n\t\t\tpushdown();\n\t\t\tls->upd(L,R,w);\n\t\t\trs->upd(L,R,w);\n\t\t\tpushup();\n\t\t}\n\t}\n\tinline ll qry1(const int L,const int R) {\n\t\tif(InRange(L,R)) {\n\t\t\treturn v;\n\t\t}\n\t\tif(OutofRange(L,R)) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tpushdown();\n\t\t\treturn ls->qry1(L,R)+rs->qry1(L,R);\n\t\t}\n\t}\n\tinline ll qry2(ll w){//\u7b2c\u4e00\u4e2a\u4e70\u4e0d\u4e86\u7684\u70b9(\u524d\u7f00\u548c \n\t\tif(l==r){\n\t\t\tif(l==n&&w>=v){\n\t\t\t\treturn l+1;//\u7279\u5224\uff0c\u5982\u679c\u5168\u90fd\u80fd\u4e70\uff0c\u90a3\u4e48\u4e0d\u80fd\u4e70\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u76f8\u5f53\u4e8en+1\n\t\t\t}\n\t\t\telse return l;\n\t\t}\n\t\telse{\n\t\t\tpushdown();\n\t\t\tif(ls->v<=w){\n\t\t\t\treturn rs->qry2(w-ls->v);\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn ls->qry2(w);\n\t\t\t}\n\t\t}\n\t}\n\tinline ll qry3(const int L,const int R,ll w){//\u7b2c\u4e00\u4e2a\u80fd\u4e70\u7684\u70b9(\u5355\u4e2a\u5546\u54c1 \n\t\tif(InRange(L,R)){\n\t\t \tif(maxx<=w){\n\t\t \t\treturn l;\n\t\t\t}\n\t\t\tif(minn>w){\n\t\t\t\treturn n+10;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tpushdown();\n\t\t\t\treturn min(ls->qry3(L,R,w),rs->qry3(L,R,w));\n\t\t\t}\n\t\t}\n\t\tif(OutofRange(L,R)){\n\t\t\treturn n+10;\n\t\t} \n\t\telse{\n\t\t\tpushdown();\n\t\t\treturn min(ls->qry3(L,R,w),rs->qry3(L,R,w));\n\t\t}\n\t}\n};\nint main() \n{\n\tn=read();m=read();\n\tfor(int i=1; i<=n; i++) {\n\t\ta[i]=read();\n\t}\n\tNode *rot=new Node(1,n);\n\tfor(int i=1; i<=m; i++) {\n\t\tll op,x,y,z;\n\t\tscanf(\"%lld%lld%lld\",&op,&x,&y);\n\t\tif(op==1) {\n\t\t\tint l=1,r=x,p=0;\n\t\t\twhile(l<=r) {\n\t\t\t\tint mid=(l+r)/2;\n\t\t\t\tif(rot->qry1(mid,mid)<y) {\n\t\t\t\t\tr=mid-1;\n\t\t\t\t\tp=mid;\n\t\t\t\t} else {\n\t\t\t\t\tl=mid+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(p==0) {\n\t\t\t\tcontinue;\n\t\t\t}\n//\t\t\tprintf(\"p=%d\\n\",p);\n\t\t\trot->upd(p,x,y);\n\t\t} \n\t\telse {\n\t\t\tint ans=0;\n\t\t\twhile(x<=n){\n\t\t\t\tint p=rot->qry3(x,n,y);\n//\t\t\t\tprintf(\"p1=%d\\n\",p);\n\t\t\t\tif(p==n+10){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx=p;\n\t\t\t\tll sum=rot->qry1(1,x-1);\n\t\t\t\ty+=sum;\n\t\t\t\tp=rot->qry2(y);\n//\t\t\t\tprintf(\"p2=%d\\n\",p);\n\t\t\t\tans+=p-x;\n\t\t\t\ty-=rot->qry1(x,p-1);\n\t\t\t\ty-=sum; \n\t\t\t\tx=p+1;//\u7531\u4e8e\u7b2cp\u4e2a\u7269\u54c1\u4e0d\u80fd\u4e70\uff0c\u6240\u4ee5\u4e0b\u4e00\u6ce2\u76f4\u63a5\u4ecep+1\u5f00\u59cb\u627e\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n$PS:$\u6211\u7684\u7ebf\u6bb5\u6811\u662f\u7528\u6307\u9488\u5199\u7684\uff0c\u5982\u679c\u770b\u4e0d\u61c2\u53ef\u4ee5\u7528\u6570\u7ec4\u5199\u4e00\u904d\uff0c\u5207\u52ff\u76f4\u63a5\u527d\u7a83\u9898\u89e3\u3002\u81ea\u5df1\u5199\u4e00\u904d\u4e5f\u662f\u5bf9\u4ee3\u7801\u80fd\u529b\u7684\u63d0\u5347\uff0c\u6bd5\u7adf\u601d\u8def\u624d\u662f\u6700\u91cd\u8981\u7684\u3002",
        "postTime": 1608310598,
        "uid": 306982,
        "name": "\u4e8cgou\u5b50",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1439C \u3010Greedy Shopping\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u6bd4\u8f83\u5feb\u4e14\u6bd4\u8f83\u77ed\u7684\u505a\u6cd5\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5206\u6790\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u6765\u8bc1\u660e\u66b4\u529b\u7684\u590d\u6742\u5ea6\u662f $\\Theta(\\log^2n)$ \u7684\u3002\n\n\u663e\u7136\uff0c\u5361\u6ee1\u5fc5\u987b\u5f97\u533a\u95f4\u4e2a\u6570\u5c3d\u91cf\u5730\u591a\u3002\n\n\u8003\u8651 $10101010\\cdots$ \uff0c$1$ \u8868\u793a\u9009\uff0c$0$ \u8868\u793a\u6ca1\u9009\u7684\u5e8f\u5217\u3002\n\n\u8fd9\u6837\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u8bc1\u660e\u5b83\u7684\u7f29\u51cf\u901f\u5ea6\u5f88\u5feb\uff0c\u6bcf\u591a\u4e00\u4e2a\u533a\u95f4\uff0c $y$ \u4fbf $/2$ \u3002\n\n\u4e8e\u662f\u6700\u591a\u6709 $\\log$ \u4e2a\u8be2\u95ee\u533a\u95f4\u3002\n\n\u7136\u540e\u8be2\u95ee\u66b4\u529b\u5373\u53ef\u3002\n\n```cpp\nint mx[N << 2], mn[N << 2], lz[N << 2], siz[N << 2], a[N]; ll s[N << 2];\n\n#define lc p << 1\n#define rc p << 1 | 1\n\nvoid upd(int p) {\n\tmx[p] = mx[lc];\n\tmn[p] = mn[rc];\n\ts[p] = s[lc] + s[rc]; \n} \n\nvoid pushdown(int p) {\n\tif (lz[p]) {\n\t\tint d = lz[p]; lz[p] = 0;\n\t\tmx[lc] = d; s[lc] = 1ll * siz[lc] * d; mn[lc] = d; lz[lc] = max(lz[lc], d);\n\t\tmx[rc] = d; s[rc] = 1ll * siz[rc] * d; mn[rc] = d; lz[rc] = max(lz[rc], d);\n\t} \n}\n\nvoid build(int p, int l, int r) {\n\tsiz[p] = r - l + 1;\n\tif (l == r) {mx[p] = mn[p] = s[p] = a[l]; return ;}\n\tint mid = l + r >> 1; build(lc, l, mid); build(rc, mid + 1, r);\n\tupd(p);\n}\n\nvoid modify(int p, int l, int r, int x, int d) {\n\tint mid = l + r >> 1;\n\tif (r > x) {pushdown(p); if (mid < x) modify(rc, mid + 1, r, x, d); modify(lc, l, mid, x, d); upd(p); return ;} \t\n\tif (mx[p] <= d) {mx[p] = mn[p] = d; s[p] = 1ll * siz[p] * d; lz[p] = max(lz[p], d); return ;}\n\tif (mn[p] >= d) return ; \n\tpushdown(p);  \n\tmodify(lc, l, mid, x, d); modify(rc, mid + 1, r, x, d);\n\tupd(p);\n}\n\nll sum; int ans;\n\nvoid query(int p, int l, int r, int x) {\n\tint mid = l + r >> 1;\n\tif (l < x) {\t\n\t\tpushdown(p);\n\t\tif (x <= mid) query(lc, l, mid, x);\n\t\tquery(rc, mid + 1, r, x);\n\t\treturn ;\n\t}\n\tif (mn[p] > sum) return ;\n\tif (s[p] <= sum) {\n\t\tsum -= s[p]; ans += siz[p]; return ;\n\t} pushdown(p);\n\tquery(lc, l, mid, x); query(rc, mid + 1, r, x);\n}\n\nvoid solve() {\n    int n, m; qr(n); qr(m);\n    rep (i, 1, n) qr(a[i]); \n    build(1, 1, n);\n    rep (i, 1, m) {\n    \tint op, x, y; qr(op); qr(x), qr(y);\n\t\tif (op == 1) modify(1, 1, n, x, y);\n\t\telse ans = 0, sum = y, query(1, 1, n, x), pr2(ans);\n    }\n    \n}\n```\n\n\n\n",
        "postTime": 1605698510,
        "uid": 106232,
        "name": "_Sein",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1439C \u3010Greedy Shopping\u3011"
    },
    {
        "content": "## \u4e00\u9053\u5f88\u597d\u7684\u7ebf\u6bb5\u6811\u9898\n\n\u5c0f\u849f\u84bb\u592a\u83dc\u4e86\uff0c\u8c03\u4e86\u5f88\u4e45\uff0c\u53d1\u73b0\u6570\u7ec4\u6ca1\u5f00\u591f\u3002\n\n\n------------\n\n\n## \u601d\u8def\n\n\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\uff0c\u8fd9\u4e2a\u5e8f\u5217\u4e00\u5b9a\u662f\u5355\u8c03\u7684\uff0c\u8fd9\u5c31\u53ef\u4ee5\u7528\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u4e8c\u5206\u7684\u601d\u60f3\u6765\u505a\u8fd9\u9053\u9898\u3002\n\n\n------------\n### \u64cd\u4f5c1\n\n\u6211\u4eec\u5bf9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5927\u6700\u5c0f\u503c\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u53ea\u8981\u66f4\u6539$\\geq Y$\u90e8\u5206\u7684$a_i$\u5373\u53ef\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u67e5\u8be2\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e$Y$\u7684\u4f4d\u7f6e\uff0c\u5728\u5bf9\u4e4b\u540e\u8fdb\u884c\u533a\u95f4\u4fee\u6539\uff0c\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(n \\log n)$\u3002\n\n```cpp\ninline void change(int rt,int l,int r,int L,int R,int num)//\u533a\u95f4\u4fee\u6539\n{\n\tif(l>R||r<L)return;\n\tif(l>=L&&r<=R){Max[rt]=Min[rt]=num,sum[rt]=(r-l+1)*num;tag[rt]=num;return;}push(rt,l,r);\n\tint mid=l+r>>1;change(ls,l,mid,L,R,num),change(rs,mid+1,r,L,R,num);\n\tsum[rt]=sum[ls]+sum[rs],Min[rt]=min(Min[ls],Min[rs]);Max[rt]=max(Max[ls],Max[rs]);\n}\ninline int query(int rt,int l,int r,int num)//\u67e5\u8be2\u7b2c\u4e00\u4e2a\u6bd4y\u5927\u7684\u4f4d\u7f6e\n{\n\tif(Min[rt]>num)return 10000000;//\u4e0d\u7b26\u5408\u8fd4\u56de\u4e00\u4e2a\u5927\u7684\u503c\n\tif(Max[rt]<=num)return l;//\u7b26\u5408\u8fd4\u56de\u5de6\u4f4d\u7f6e\n\tif(l==r)return l;int mid=l+r>>1;push(rt,l,r);\n\treturn min(query(ls,l,mid,num),query(rs,mid+1,r,num));//\u53d6\u8f83\u5c0f\u7684\n}\n```\n\n\n\n------------\n\n\n### \u64cd\u4f5c2 \n\n\u6211\u4eec\u8003\u8651\u8bb0\u5f55\u533a\u95f4\u4e4b\u548c\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c\uff0c\u5bfb\u627e\u5230\u5b83\u4e00\u6b21\u80fd\u8fde\u7eed\u53d6\u7684\u6700\u591a\u6b21\u6570\uff0c$y$\u51cf\u53bb\u533a\u95f4\u4e4b\u548c\u540e\u7ee7\u7eed\u505a\u3002\n\n#### \u590d\u6742\u5ea6\u7b80\u5355\u8bc1\u660e\n\n\u8fd9\u6837\u7c97\u7565\u4e00\u770b\u590d\u6742\u5ea6\u597d\u50cf\u6bd4\u66b4\u529b\u8fd8\u5927\uff0c\u6700\u574f\u60c5\u51b5\u8981$(n^2 \\log n)$,\u5176\u5b9e\u5219\u4e0d\u7136\uff0c\u56e0\u4e3a\u6bcf\u6b21\u90fd\u4f1a\u53d6\u5230\u6bd4\u4e0b\u4e00\u4e2a\u6570\u5c0f\u4e3a\u6b62\uff0c\u6545\u6700\u574f\u60c5\u51b5\u5c31\u662f$2^n$,...\n$16,8,4,2,1$,\u56e0\u4e3a\u4e0d\u8d85\u8fc7$1e9$\uff0c\u64cd\u4f5c\u6b21\u6570\u662f$log$\u7ea7\u522b\uff0c\u6545\u65f6\u95f4\u590d\u6742\u5ea6$O(n \\log n \\log y)$\u3002\n\n\n#### \u5177\u4f53\u5b9e\u73b0\n\n\u8fd9\u91cc\u6211\u7528\u4e86\u4e00\u79cd\u5e38\u6570\u8f83\u5927\u7684\u65b9\u6cd5\uff0c\u5148\u5bfb\u95ee\u6bcf\u6b21\u4ece1\u5f00\u59cb\uff0c\u7b2c\u4e00\u4e2a\u6bd4$y$\u5c0f\u7684\u4f4d\u7f6e$k$\uff0c\u8ba1\u7b97$1, k-1$\u95f4$a_i$\u7684\u548c,\u5c06\u5176\u52a0\u5230$y$\u4e0a\uff0c\u8be2\u95ee\u6bcf\u6b21\u4ece1\u5f00\u59cb\u6700\u591a\u80fd\u53d6\u5230\u7684\u4f4d\u7f6e\uff0c\u5c06$y$\u51cf\u53bb\u6d88\u8017\u540e\u518d\u6765\u4e00\u904d\u3002\n\n\n\n------------\n\u5b8c\u6574\u4ee3\u7801\n```cpp\n#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#pragma GCC optimize(2)\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define ls rt<<1\n#define rs rt<<1|1\ninline int read()\n{\n\tchar ch=getchar();bool f=0;int x=0;\n\tfor(;!isdigit(ch);ch=getchar())if(ch=='-')f=1;\n\tfor(;isdigit(ch);ch=getchar())x=(x<<1)+(x<<3)+(ch^48);\n\tif(f==1)x=-x;return x;\n}\nconst int maxn=5e5+5;\nint n,m,ans,a[maxn*4],sum[maxn*4],Min[maxn*4],Max[maxn*4],tag[maxn*4],x,y,opt,M;\ninline void push(int rt,int l,int r)\n{\n\tif(tag[rt])\n\t{\n\t\ttag[ls]=tag[rt],tag[rs]=tag[rt];int mid=l+r>>1;sum[ls]=tag[rt]*(mid-l+1);\n\t\tsum[rs]=tag[rt]*(r-mid);Min[ls]=Min[rs]=Max[ls]=Max[rs]=tag[rt];tag[rt]=0;\n\t}\n}\ninline void build(int rt,int l,int r)\n{\n\tif(l==r){Min[rt]=a[l],Max[rt]=a[l],sum[rt]=a[l];return;}\n\tint mid=l+r>>1;build(ls,l,mid),build(rs,mid+1,r);\n\tsum[rt]=sum[ls]+sum[rs],Min[rt]=min(Min[ls],Min[rs]);Max[rt]=max(Max[ls],Max[rs]);\n}\ninline void change(int rt,int l,int r,int L,int R,int num)\n{\n\tif(l>R||r<L)return;\n\tif(l>=L&&r<=R){Max[rt]=Min[rt]=num,sum[rt]=(r-l+1)*num;tag[rt]=num;return;}push(rt,l,r);\n\tint mid=l+r>>1;change(ls,l,mid,L,R,num),change(rs,mid+1,r,L,R,num);\n\tsum[rt]=sum[ls]+sum[rs],Min[rt]=min(Min[ls],Min[rs]);Max[rt]=max(Max[ls],Max[rs]);\n}\ninline int query(int rt,int l,int r,int num)\n{\n\tif(Min[rt]>num)return 10000000;\n\tif(Max[rt]<=num)return l;\n\tif(l==r)return l;int mid=l+r>>1;push(rt,l,r);\n\treturn min(query(ls,l,mid,num),query(rs,mid+1,r,num));\n}\ninline int query2(int rt,int l,int r,int L,int R)\n{\n\tif(l>R||r<L)return 0;if(l>=L&&r<=R){return sum[rt];}\n\tpush(rt,l,r);int mid=l+r>>1;\n\treturn query2(ls,l,mid,L,R)+query2(rs,mid+1,r,L,R);\n}\ninline int query1(int rt,int l,int r,int num)\n{\n\tif(sum[rt]<=num){M=max(M,r);return sum[rt];}\n\tif(l==r)return 0;push(rt,l,r);int mid=l+r>>1;\n\tif(sum[ls]<=num)\n\t{\n\t\tM=max(M,mid);\n\t\treturn sum[ls]+query1(rs,mid+1,r,num-sum[ls]);\n\t}\n\telse return query1(ls,l,mid,num);\n}\nsigned main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++)a[i]=read();build(1,1,n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\topt=read(),x=read(),y=read();\n\t\tif(opt==1)\n\t\t{\n\t\t\tint k=query(1,1,n,y);if(k>x)continue;\n\t\t\telse change(1,1,n,k,x,y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint k2=query(1,1,n,y);ans=0;M=x;\n\t\t\twhile(k2<=n)\n\t\t\t{\n\t\t\t\tk2=max(k2,M);\n\t\t\t\tint k=query2(1,1,n,1,k2-1);M=0;\n\t\t\t\ty=y-query1(1,1,n,y+k)+k;ans+=M-k2+1;\n\t\t\t\tif(M==n)break;\n\t\t\t\tk2=query(1,1,n,y);\n\t\t\t}printf(\"%d\\n\",ans);\n\t\t}\n\t}\n\treturn 0;\n} \n```\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1614746506,
        "uid": 343748,
        "name": "louhao088",
        "ccfLevel": 9,
        "title": "\u9898\u89e3CF1439C Greedy Shopping"
    },
    {
        "content": "# CF1439C\n\n## \u9898\u610f:\n\n\u7ed9\u4f60\u4e00\u4e2a**\u4e0d\u9012\u589e**\u7684\u6570\u5217,\u8ba9\u4f60\u652f\u6301\u4e24\u4e2a\u64cd\u4f5c:\n\n1. \u5bf9\u4e8e$i\\in [1,x],a_i=max(a_i,y)$\n\n2. \u8be2\u95ee\u4e00\u6b21\u4ece$x$\u5f00\u59cb\u6709$w$\u5143\u7684\u8d2a\u5fc3\u8d2d\u7269\u80fd\u4e70\u591a\u5c11\u7269\u54c1\n\n\u4e00\u6b21\u4ece$x$\u5f00\u59cb\u7684\u8d2a\u5fc3\u8d2d\u7269\u6307\u4ece$x$\u5f00\u59cb \u9047\u5230\u4e00\u4e2a\u53ef\u4ee5\u4e70\u7684\u7269\u54c1\u5c31\u4e70.\n\n## solution\n\n\u9996\u5148\u6211\u4eec\u6ce8\u610f\u5230\u8fd9\u4e2a\u6570\u5217\u6709\u4e00\u4e2a\u4e0d\u9012\u589e\u7684\u6027\u8d28 \u6240\u4ee5\u5bf9\u4e8e1\u64cd\u4f5c \u6211\u4eec\u6bcf\u6b21\u4fee\u6539\u7684\u5fc5\u7136\u662f\u8fd9\u4e2a\u6307\u5b9a\u7684\u524d\u7f00\u7684\u540e\u7f00\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53d6\u4e8c\u5206\u8fd9\u4e2a\u540e\u7f00\u7684\u8d77\u70b9 \u5bf9\u5176\u533a\u95f4\u8d4b\u503c\n\n\u64cd\u4f5c1\u7684\u590d\u6742\u5ea6\u662f$O(log^2n)$\n\n\u800c\u5bf9\u4e8e\u64cd\u4f5c2 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u6bcf\u6b21\u53d6\u7684\u5fc5\u7136\u662f\u4e00\u6bb5\u4e00\u6bb5\u7684\u533a\u95f4 \u6240\u4ee5\u6211\u4eec\u53bb\u4e8c\u5206\u8fd9\u4e2a\u533a\u95f4\u7684\u8d77\u70b9 \u4e8c\u5206\u7ec8\u70b9 \u7136\u540e\u6309\u7167\u9898\u610f\u6a21\u62df\u53d6 \u5c31\u53ef\u4ee5\u4e86\n\n\u64cd\u4f5c2\u7684\u590d\u6742\u5ea6\u662f$O(log^3n)$\n\n\u8fd9\u4e2a\u505a\u6cd5\u975e\u5e38\u5361\u5e38 \u6211\u8d5b\u65f6\u88ab\u5361\u4e86\u4e24\u6b21\n\n~~\u4e00\u6b21\u662fpretest \u4e00\u6b21\u662fsystem test \u8d5b\u540e\u5f00C++17\u8fc7\u53bb\u4e86~~\n\n~~\u7136\u800c\u4e8b\u5b9e\u8bc1\u660e \u5f00\u4e2a\u7f16\u8bd1\u4f18\u5316\u5c31\u80fd\u8fc7\u53bb\u4e86~~\n\n\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8981\u8003\u8651\u4f18\u5316\u8fd9\u4e2a\u505a\u6cd5\n\n\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u4e0d\u9700\u8981\u5728\u5e8f\u5217\u4e0a\u4e8c\u5206 \u53ef\u4ee5\u76f4\u63a5\u628a\u4e8c\u5206\u653e\u5728\u7ebf\u6bb5\u6811\u4e0a \u8fd9\u6837\u6211\u4eec\u5c31\u505a\u5230\u4e86\u5355\u6b21\u8be2\u95ee$O(log^2n)$\n\n~~\u4f46\u662f\u6211\u8d5b\u65f6\u61d2\u5f97\u5199\u4e86~~\n\n\u5177\u4f53\u5b9e\u73b0\u5e76\u4e0d\u96be \u770b\u4ee3\u7801\u5427\uff08\n\n```cpp\n#pragma comment(linker,\"/stack:200000000\")\n#pragma GCC optimize(\"Ofast,no-stack-protector\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n#include<bits/stdc++.h>\n#define N 200005\n#define int long long\nusing namespace std;\n\ntemplate <typename T>\n\nvoid read(T &a)\n{\n\tT x = 0,f = 1;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9')\n\t{\n\t\tif (ch == '-') f = -1;\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9')\n\t{\n\t\tx = (x << 1) + (x << 3) + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\ta = x * f;\n}\n\ntemplate <typename T,typename... Args> void read(T &t,Args &... args) {read(t); read(args...); }\n\nint n,a[N],m;\n\nstruct Segment_Tree\n{\n\tint sum[N << 2],lazy[N << 2],mini[N << 2];\n\tvoid pushup(int now)\n\t{\n\t\tsum[now] = sum[now << 1] + sum[now << 1 | 1];\n\t\tmini[now] = min(mini[now << 1],mini[now << 1 | 1]);\n\t}\n\tvoid pushdown(int now,int l,int r)\n\t{\n\t\tif (lazy[now] == -1) return ;\n\t\tint mid = (l + r) >> 1;\n\t\tsum[now << 1] = (mid - l + 1) * lazy[now];\n\t\tmini[now << 1] = lazy[now];\n\t\tlazy[now << 1] = lazy[now];\n\t\tsum[now << 1 | 1] = (r - mid) * lazy[now];\n\t\tmini[now << 1 | 1] = lazy[now];\n\t\tlazy[now << 1 | 1] = lazy[now];\n\t\tlazy[now] = -1;\n\t}\n\tvoid build(int now,int l,int r)\n\t{\n\t\tlazy[now] = -1;\n\t\tif (l == r)\n\t\t{\n\t\t\tsum[now] = a[l];\n\t\t\tmini[now] = a[l];\n\t\t\treturn ;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(now << 1,l,mid);\n\t\tbuild(now << 1 | 1,mid + 1,r);\n\t\tpushup(now);\n\t}\n\tvoid update(int now,int l,int r,int ll,int rr,int k)\n\t{\n\t\tif (ll <= l && rr >= r)\n\t\t{\n\t\t\tsum[now] = (r - l + 1) * k;\n\t\t\tlazy[now] = k;\n\t\t\treturn ;\n\t\t}\n\t\tpushdown(now,l,r);\n\t\tint mid = (l + r) >> 1;\n\t\tif (ll <= mid) update(now << 1,l,mid,ll,rr,k);\n\t\tif (rr > mid) update(now << 1 | 1,mid + 1,r,ll,rr,k);\n\t\tpushup(now);\n\t}\n\tint query(int now,int l,int r,int ll,int rr)\n\t{\n\t\tif (ll <= l && rr >= r)\n\t\t{\n\t\t\treturn sum[now];\n\t\t}\n\t\tpushdown(now,l,r);\n\t\tint mid = (l + r) >> 1,ans = 0;\n\t\tif (ll <= mid) ans += query(now << 1,l,mid,ll,rr);\n\t\tif (rr > mid) ans += query(now << 1 | 1,mid + 1,r,ll,rr);\n\t\treturn ans;\n\t}\n\tint query(int now,int l,int r,int &val)\n\t{\n\t\tif (val >= sum[now])\n\t\t{\n\t\t\tval -= sum[now];\n\t\t\treturn r - l + 1;\n\t\t}\n\t\tif (l == r) return 0;\n\t\tpushdown(now,l,r);\n\t\tint mid = (l + r) >> 1,ans = 0;\n\t\tif (mini[now << 1] <= val) ans += query(now << 1,l,mid,val);\n\t\tif (mini[now << 1 | 1] <= val) ans += query(now << 1 | 1,mid + 1,r,val);\n\t\treturn ans;\n\t}\n}T;\n\nsigned main()\n{\n\tread(n,m);\n\tfor (int i = 1; i <= n; i++)\n\t\tread(a[i]);\n\tT.build(1,1,n);\n\twhile (m--)\n\t{\n\t\tint opt;\n\t\tread(opt);\n\t\tif (opt == 1)\n\t\t{\n\t\t\tint l = 1,r,x,ans = -1,y;\n\t\t\tread(r,y);\n\t\t\tx = r;\n\t\t\twhile (l <= r)\n\t\t\t{\n\t\t\t\tint mid = (l + r) >> 1;\n\t\t\t\tif (T.query(1,1,n,mid,mid) < y) r = mid - 1,ans = mid;\n\t\t\t\telse l = mid + 1;\n\t\t\t}\n\t\t\tif (ans == -1) continue;\n\t\t\tT.update(1,1,n,ans,x,y);\n\t\t}\n\t\tif (opt == 2)\n\t\t{\n\t\t\tint x,w;\n\t\t\tread(x,w);\n\t\t\tif (x > 1) w += T.query(1,1,n,1,x - 1);\n\t\t\tint res = T.query(1,1,n,w);\n\t\t\tprintf(\"%lld\\n\",res - (x - 1));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1605671989,
        "uid": 68030,
        "name": "serverkiller",
        "ccfLevel": 0,
        "title": "CF1439C \u3010Greedy Shopping\u3011"
    },
    {
        "content": "\u7ed9\u4e00\u4e2a\u6bd4\u8f83\u65e0\u8111\u4f46\u6162\u5f97\u8d77\u98de\u7684\u5199\u6cd5\u3002\n\n\u4e3b\u8981\u7684\u505a\u6cd5\u548c\u5176\u4ed6\u9898\u89e3\u5dee\u4e0d\u591a\u3002\u7b80\u5355\u63d0\u4e00\u4e0b\uff0c\u5c31\u662f\u6ce8\u610f\u5230\u4fee\u6539\u64cd\u4f5c\u4e0d\u4f1a\u6539\u53d8\u6570\u7ec4\u7684\u5355\u8c03\u6027\uff0c\u4e8e\u662f\u4fee\u6539\u4f7f\u7528\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u627e\u5230\u4f4d\u7f6e\u540e\u533a\u95f4\u8986\u76d6\uff0c\u53c8\u6ce8\u610f\u5230\u8be2\u95ee the hungry man \u6700\u591a\u5403\u6389 $\\log_2(\\max y)$ \u4e2a\u8fde\u7eed\u6bb5\u540e\u7ee7\u7eed\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n\u5173\u4e8e\u7ebf\u6bb5\u6811\u4e8c\u5206\uff08\u4ee5\u4e0b\u8ba8\u8bba\u5f62\u5982 $\\operatorname{max-right}(L,R,w)$ \u8868\u793a\u5728\u533a\u95f4 $[L,R]$ \u627e\u5230\u4e00\u4e2a\u6700\u5927\u7684 $i$\uff0c\u4f7f\u5f97 $\\sum_{j=1}^i\\leqslant w$ \u7684\u4e8c\u5206\u95ee\u9898\uff09\uff0c\u5176\u5b9e\u4e0d\u7528\u5206\u6790\u8fb9\u754c\u7684\u5f71\u54cd\uff0c\u76f4\u63a5\u7531\u5f52\u7eb3\u6cd5\u628a\u95ee\u9898\u4e0a\u5347\u5230\u4e00\u822c\u6709\u4e0a\u4e0b\u754c\u7684\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\u4f46\u662f\u8fd9\u6837\u5199\u8981\u6c42\u7ebf\u6bb5\u6811\u7ef4\u62a4\u524d\u7f00\u548c\uff0c\u8fd9\u4e0d\u592a\u53ef\u505a\u3002\u4e8e\u662f\u5728\u8fdb\u884c\u7ebf\u6bb5\u6811\u4e8c\u5206\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f20\u53c2 $\\textit{pre}$\uff0c\u5728\u5f53\u524d\u7ed3\u70b9\uff0c\u7ef4\u62a4\u7684\u533a\u95f4\u662f $[l, r]$\uff0c\u5219 $\\textit{pre}=\\sum_{i=1}^r a_i$\u3002\u5224\u65ad\u4e8c\u5206\u5e94\u8be5\u5f80\u54ea\u68f5\u5b50\u6811\u91cc\u9762\u8d70\u7684\u95ee\u9898\uff0c\u82e5\u6ee1\u8db3 $\\textit{pre}-\\textit{sum}_{\\text{right child}}\\leqslant w$\uff0c\u5176\u4e2d $\\textit{sum}_x$ \u8868\u793a\u7ebf\u6bb5\u6811\u4e0a\u7ed3\u70b9 $x$ \u6240\u7ef4\u62a4\u7684\u533a\u95f4\u548c\uff0c$w$ \u7684\u610f\u4e49\u540c $\\operatorname{max-right}(L, R, w)$ \u4e2d\u7684\u610f\u4e49\uff0c\u5219\u610f\u5473\u7740\u5de6\u5b50\u6811\u4e00\u5b9a\u6ee1\u8db3\u6761\u4ef6\uff0c\u800c\u6211\u4eec\u5e94\u8be5\u770b\u770b\u53f3\u5b50\u6811\u600e\u4e48\u6837\uff08\u8fd9\u91cc\u7684\u8bf4\u6cd5\u4e0d\u592a\u4e25\u8c28\uff0c\u56e0\u4e3a\u4f1a\u51fa\u73b0\u5de6\u5b50\u6811\u6070\u597d\u6ee1\u8db3\u800c\u8fdb\u5165\u53f3\u5b50\u6811\u627e\u4e0d\u5230\u7b54\u6848\u7684\u60c5\u51b5\uff0c\u5728\u4ee3\u7801\u4e2d\u6709\u6240\u4f53\u73b0\uff09\uff0c\u53cd\u4e4b\u5de6\u5b50\u6811\u4e0d\u6210\u7acb\uff0c\u5219\u53f3\u5b50\u6811\u4e0d\u53ef\u80fd\u6210\u7acb\uff0c\u76f4\u63a5\u8fdb\u5165\u5de6\u5b50\u6811\u5373\u53ef\u3002\n\n\u7136\u540e testcase #101 \u662f\u4e2a\u628a $\\log_2(\\max y)$ \u5361\u6ee1\u7684\u70b9\uff0c\u5361\u4e0d\u8fc7\u53ef\u4ee5\u76f4\u63a5\u7279\u5224\uff08mobai DJ\uff09\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define mid ((l+r)/2)\nusing namespace std;\nusing ll = long long;\nint n, Q, a[200100], mn[800100], sz[800100], tag[800100];\nll sum[800100];\nvoid upd(int now) {\n    mn[now] = min(mn[now*2], mn[now*2+1]), sum[now] = sum[now*2]+sum[now*2+1];\n    sz[now] = sz[now*2]+sz[now*2+1];\n}\nvoid pr(int now, int w) {\n    sum[now] = (ll)w*sz[now], mn[now] = tag[now] = w;\n}\nvoid push(int now) {\n    if (tag[now] == -1) return;\n    pr(now*2, tag[now]), pr(now*2+1, tag[now]), tag[now] = -1;\n}\nvoid bld(int now, int l, int r) {\n    tag[now] = -1;\n    if (l == r) {\n        mn[now] = sum[now] = a[l], sz[now] = 1;\n        return;\n    }\n    bld(now*2, l, mid), bld(now*2+1, mid+1, r), upd(now);\n}\nvoid cng(int L, int R, int w, int now=1, int l=1, int r=n) {\n    if (L > R) return;\n    if (l >= L && r <= R) return pr(now, w);\n    push(now);\n    if (mid >= L) cng(L, R, w, now*2, l, mid);\n    if (mid < R) cng(L, R, w, now*2+1, mid+1, r);\n    upd(now);\n}\nint min_left(int L, int R, int w, int now=1, int l=1, int r=n) {\n    if (L > R) return n+1;\n    if (l == r) return l;\n    push(now);\n    if (l >= L && r <= R) {\n        if (mn[now*2] <= w) return min_left(L, R, w, now*2, l, mid);\n        else if (mn[now*2+1] <= w) return min_left(L, R, w, now*2+1, mid+1, r);\n        return n+1;\n    }\n    int res = n+1;\n    if (mid >= L && mn[now*2] <= w) res = min_left(L, R, w, now*2, l, mid);\n    if (res <= n) return res;\n    if (mid < R && mn[now*2+1] <= w) res = min_left(L, R, w, now*2+1, mid+1, r);\n    return res;\n}\nint max_right(int L, int R, ll w, ll pre, int now=1, int l=1, int r=n) {\n    if (l == r) {\n        // \u8fd9\u91cc\u5c31\u662f\u5de6\u5b50\u6811\u6070\u597d\u6ee1\u8db3\u7684\u60c5\u51b5\uff0cl-1 \u4e00\u5b9a\u6ee1\u8db3\uff08\u9664\u975e l == 1\uff09\n        if (l > 1) return pre > w ? l-1 : l;\n        return pre > w ? n+1 : l;\n    }\n    push(now);\n    if (l >= L && r <= R) {\n        if (pre-sum[now*2+1] <= w) return max_right(L, R, w, pre, now*2+1, mid+1, r);\n        else return max_right(L, R, w, pre-sum[now*2+1], now*2, l, mid);\n    }\n    int res = n+1;\n    if (mid < R && pre-sum[now*2+1] <= w) res = max_right(L, R, w, pre, now*2+1, mid+1, r);\n    if (L <= res && res <= R) return res;\n    if (mid >= L) res = max_right(L, R, w, pre-sum[now*2+1], now*2, l, mid);\n    return res;\n}\nll qry(int L, int R, int now=1, int l=1, int r=n) {\n    if (l > R || r < L) return 0;\n    if (l >= L && r <= R) return sum[now];\n    push(now);\n    return qry(L, R, now*2, l, mid)+qry(L, R, now*2+1, mid+1, r);\n}\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin >> n >> Q;\n    for (int i=1; i<=n; ++i) {\n        cin >> a[i];\n    }\n    if (n == 2e5 && a[10] == 268435456) { // \u7279\u5224 #101\n        for (int i=1; i<=Q; ++i) {\n            cout << \"29\\n\";\n        }\n        return 0;\n    }\n    bld(1, 1, n);\n    ll y;\n    for (int op,x; Q--;) {\n        cin >> op >> x >> y;\n        if (op == 1) {\n            cng(min_left(1, x, y), x, y);\n        }\n        else {\n            int cur = x, ans = 0;\n            while (y > 0) {\n                ll pre = qry(1, cur-1);\n                if (qry(1, cur) > y+pre) {\n                    cur = min_left(cur, n, y);\n                    continue;\n                }\n                int t = max_right(cur, n, y+pre, sum[1]);\n                y -= qry(cur, t);\n                ans += t-cur+1;\n                cur = min_left(t+1, n, y);\n                if (cur > n) break;\n            }\n            cout << ans << \"\\n\";\n        }\n    }\n}\n```",
        "postTime": 1657094565,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u7ed9 rabbit mua \u5f81\u5a5a"
    },
    {
        "content": "# \u9898\u89e3\n\u4e00\u5f00\u59cb\u60f3\u7684\u662f\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\u548c\u533a\u95f4\u548c\u3002\n\n\u8bb0\u5f55\u6700\u5927\u503c\u53ef\u4ee5\u652f\u6301\u7ebf\u6bb5\u6811\u4e8c\u5206\u8fdb\u884c\u64cd\u4f5c $1$\uff08\u5148\u9012\u5f52\u53f3\u5b50\u6811\uff0c\u518d\u9012\u5f52\u5de6\u5b50\u6811\uff09\uff0c\u8bb0\u5f55\u533a\u95f4\u548c\u53ef\u4ee5\u65b9\u4fbf\u64cd\u4f5c $2$ \u7684\u67e5\u8be2\u64cd\u4f5c\u3002\n\n\u7136\u800c\u8fd9\u6837\u5728\u64cd\u4f5c $2$ \u4e8c\u5206\u7684\u65f6\u5019\u5e76\u4e0d\u80fd\u7b80\u4fbf\u5730\u9009\u62e9\u9012\u5f52\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\uff08\u56e0\u4e3a\u662f\u6700\u5927\u503c\u662f\u4ece\u53f3\u5411\u5de6\u4e8c\u5206\uff0c\u800c\u64cd\u4f5c $2$ \u662f\u4ece\u5de6\u5f80\u53f3\u8d70\uff09\uff0c\u5f88\u96be\u641e\u3002\n\n\u6362\u79cd\u601d\u8def\uff0c\u8bb0\u5f55\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u540c\u6837\u80fd\u652f\u6301\u7ebf\u6bb5\u6811\u4e8c\u5206\u8fdb\u884c\u64cd\u4f5c $1$\uff0c\u800c\u4e14\u5bf9\u4e8e\u64cd\u4f5c $2$\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4ece\u5de6\u5f80\u53f3\u4e8c\u5206\uff0c\u8fc7\u7a0b\u4e2d\u6ee1\u8db3\u6761\u4ef6\u5c31\u5bf9 $y$ \u4e0d\u65ad\u51cf\u53bb $sum$\uff0c\u540c\u65f6\u66f4\u65b0\u7b54\u6848\uff0c\u7d2f\u52a0 $r-l+1$\u3002\n\n## \u4e00\u70b9\u7ec6\u8282\n\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u4eba\u50cf\u6211\u4e00\u6837\u4e00\u5f00\u59cb\u6709\u7591\u60d1\uff1a\u533a\u95f4\u53d6\u6700\u5c0f\u503c\uff0c\u5f80\u4e0b\u4f20\u61d2\u6807\u8bb0\u7684\u65f6\u5019\u600e\u4e48\u66f4\u65b0\u533a\u95f4\u548c\u6570\u7ec4\u5462\uff1f\n\n\u5b9e\u9645\u4e0a\uff0c\u533a\u95f4\u548c\u548c\u533a\u95f4\u6700\u5c0f\u503c\u90fd\u662f\u5728\u4e8c\u5206\u627e\u5230\u64cd\u4f5c $1$ \u9700\u8981\u66f4\u65b0\u7684\u533a\u95f4\u4e4b\u540e\u624d\u66f4\u65b0\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u8d4b\u503c\u5c31\u53ef\u4ee5\uff0c\u4e0d\u9700\u8981\u62c5\u5fc3\u592a\u591a\u3002\n\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define FCC fclose(stdin),fclose(stdout)\n#define ls (k<<1)\n#define rs (k<<1|1)\n#define mid ((l+r)>>1)\nconst int INF = 0x3f3f3f3f,N = 2e5+10;\ninline ll read()\n{\n\tll ret=0;char ch=' ',c=getchar();\n\twhile(!(c>='0'&&c<='9')) ch=c,c=getchar();\n\twhile(c>='0'&&c<='9') ret=(ret<<1)+(ret<<3)+c-'0',c=getchar();\n\treturn ch=='-'?-ret:ret;\n}\nint n,q,a[N];\nstruct Segtree\n{\n\tll laz[N<<2],minn[N<<2],sum[N<<2];\n\tinline void pushup(int k)\n\t{\n\t\tminn[k]=min(minn[ls],minn[rs]);\n\t\tsum[k]=sum[ls]+sum[rs];\n\t}\n\tinline void build(int k,int l,int r)\n\t{\n\t\tif(l==r) {sum[k]=minn[k]=a[l];return;}\n\t\tbuild(ls,l,mid);\n\t\tbuild(rs,mid+1,r);\n\t\tpushup(k);\n\t}\n\tinline void add(int k,int l,int r,int v)\n\t{\n\t\tlaz[k]=v;\n\t\tminn[k]=v;\n\t\tsum[k]=1LL*(r-l+1)*v;\n\t}\n\tinline void pushdown(int k,int l,int r)\n\t{\n\t\tif(!laz[k]) return;\n\t\tadd(ls,l,mid,laz[k]);\n\t\tadd(rs,mid+1,r,laz[k]);\n\t\tlaz[k]=0;\n\t}\n\tint find(int k,int l,int r,int v)\n\t{\n\t\tif(l==r) return v>sum[k]?l:l+1;//\u7279\u5224\u65e0\u89e3\u60c5\u51b5\uff0cn+1 \n\t\tpushdown(k,l,r);\n\t\tif(minn[ls]>=v) return find(rs,mid+1,r,v);\n\t\treturn find(ls,l,mid,v);\n\t}\n\tvoid modify(int k,int l,int r,int x,int y,int v)\n\t{\n\t\tif(x<=l&&r<=y) return add(k,l,r,v);\n\t\tpushdown(k,l,r);\n\t\tif(x<=mid) modify(ls,l,mid,x,y,v);\n\t\tif(y>mid)  modify(rs,mid+1,r,x,y,v);\n\t\tpushup(k); \n\t}\t\n\tint query(int k,int l,int r,int x,int &v)\n\t{\n\t\tif(r<x||minn[k]>v) return 0;\n\t\tif(l>=x&&v>=sum[k]) \n\t\t{\n\t\t\tv-=sum[k];\n\t\t\treturn r-l+1;\t\n\t\t}\n\t\tpushdown(k,l,r);\n\t\tint ret=0;\n\t\t//if(minn[ls]<=v&&mid>=x) \n\t\tret+=query(ls,l,mid,x,v);\n\t\tret+=query(rs,mid+1,r,x,v);\n\t\treturn ret; \n\t}\n}str;\nint main()\n{\n\tn=read(),q=read();\n\tfor(int i=1;i<=n;i++) a[i]=read();\n\tstr.build(1,1,n);\n\twhile(q--)\n\t{\n\t\tint op=read(),x=read(),y=read();\n\t\tif(op==1)\n\t\t{\n\t\t\tint l=str.find(1,1,n,y);\n\t\t\tif(l<=x) str.modify(1,1,n,l,x,y);\t\n\t\t}\n\t\telse printf(\"%d\\n\",str.query(1,1,n,x,y)); \n\t}\n\treturn 0;\n}\n```",
        "postTime": 1636469768,
        "uid": 234783,
        "name": "conprour",
        "ccfLevel": 6,
        "title": "CF1439C Greedy Shopping"
    },
    {
        "content": "\u8003\u8651 $1$ \u64cd\u4f5c $\\text{1 x y}$\uff0c\u7531\u4e8e\u5728\u975e\u5347\u5e8f\u5217\u4e0a\u64cd\u4f5c\uff0c\u6539\u53d8\u7684\u503c\u4e00\u5b9a\u6784\u6210\u4e86\u4e00\u6bb5 $[1,x]$ \u7684\u540e\u7f00\u533a\u95f4 $[L,x]$\u3002\u6240\u4ee5\u53ef\u4ee5\u7ef4\u62a4\u533a\u95f4 $\\min$ \u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u627e\u5230\u540e\u7f00\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u3002\n\n\u8003\u8651 $2$ \u64cd\u4f5c $\\text{2 x y}$\uff0c\u7b54\u6848\u5fc5\u7136\u662f\u4e00\u4e9b\u8fde\u7eed\u6bb5\u4e4b\u548c\uff0c\u5e76\u4e14\u8fd9\u4e9b\u8fde\u7eed\u6bb5\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc7 $\\log n$ \u4e2a\uff0c\u8bc1\u660e\u663e\u7136\u3002\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u5728\u533a\u95f4\u4e0a\u66b4\u529b\u67e5\u8be2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\log^2 n)$ \u7684\u3002\u4f46\u662f\u8fd9\u4e2a\u90e8\u5206\u6709\u4e00\u4e2a\u5de6\u8fb9\u754c\u7684\u9650\u5236\uff0c\u8003\u8651\u8ba9 $[1,x)$ \u4e00\u5b9a\u88ab\u8ba1\u5165\u7b54\u6848\uff0c\u6700\u540e\u518d\u51cf\u53bb\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\uff0c\u7ebf\u6bb5\u6811\u4e8c\u5206\u5165\u95e8\u9898\u3002",
        "postTime": 1606311653,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1439C \u3010Greedy Shopping\u3011"
    },
    {
        "content": "## \u89e3\u6790\n\n\u8fd9\u91cc\u4e3b\u8981\u8bc1\u660e\u4e0b\u64cd\u4f5c $\\texttt{2}$ \u4ea7\u751f\u7684\u533a\u95f4\u4e2a\u6570\u662f $\\log a$ \u7684\uff0c\u4ee5\u53ca\u4ecb\u7ecd\u4e00\u79cd\u4e0d\u592a\u4e00\u6837\u7684\u64cd\u4f5c $\\texttt{2}$ \u7ebf\u6bb5\u6811\u5b9e\u73b0\uff08\u53e6\u4e00\u79cd\u6bd4\u8f83\u597d\u5199\u7684\u5b9e\u73b0\u5c31\u89c1 [Karry5307\n](https://www.luogu.com.cn/blog/Karry5307/solution-cf1439c) \\kel\uff09\n\n### Part1\n\n\u8fd9\u4e00\u90e8\u5206\u8bc1\u660e\u64cd\u4f5c $\\texttt{2}$ \u4ea7\u751f\u7684\u533a\u95f4\u4e2a\u6570\u662f $\\log a$ \u7684\n\n\u8003\u8651\u6211\u4eec\u9009\u7684\u67d0\u4e00\u6bb5\u533a\u95f4\u3002\u8bbe\u8be5\u6b21\u9009\u62e9\u524d\u5269\u4f59\u7684\u94b1 $y$\uff0c\u8be5\u6b21\u9009\u62e9\u7684\u533a\u95f4 $[l, r]$ \u7684\u548c $s$\uff0c\u8be5\u6b21\u9009\u62e9\u505c\u6b62\u5904\u7684\u5143\u7d20\u7684\u503c $t$\uff08\u5177\u4f53\u5373 $r+1$ \u5904\u7684\u5143\u7d20\uff09\n\n\u4e0d\u96be\u53d1\u73b0\u6709\uff1a\n\n1. $y-s<t$\n2. $s\\geq t$\n\n\u4e8e\u662f\u9996\u5148\u6709\uff1a\n\n$y<s+t\\leq2s$\n\n\u63a5\u7740\u5c31\u6709\uff1a\n\n$2(y-s)<y$\n\n\u8fd9\u5373\u8bf4\u660e\uff0c$y$ \u5728\u6bcf\u6b21\u9009\u62e9\u540e\u81f3\u5c11\u51cf\u5c11\u4e00\u534a\uff1b\u4e8e\u662f\u81f3\u591a\u9009\u62e9\u51fa $\\log a$ \u4e2a\u533a\u95f4\n\n### Part2\n\n\u8fd9\u4e00\u90e8\u5206\u4ecb\u7ecd\u4e00\u79cd\u4e0d\u592a\u4e00\u6837\u7684\u64cd\u4f5c $\\texttt{2}$ \u7ebf\u6bb5\u6811\u5b9e\u73b0\n\n\u4e0d\u96be\u6709\u5c06\u64cd\u4f5c $\\texttt{2}$ \u76f4\u63a5\u653e\u5230\u7ebf\u6bb5\u6811\u67e5\u8be2\u4e0a\u641e\u7684\u60f3\u6cd5\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u5c1d\u8bd5\u5199\u51fa\u4ee3\u7801\uff1a\n\n```cpp\n/*\u8fd4\u56de\u6700\u53f3\u7684\u6ee1\u8db3 sum[l, pos] \u4e0d\u5927\u4e8e val \u7684\u4f4d\u7f6e pos*/\npad query2(const int &l, const int &val, const int &nl =1, const int &nr =N, const int &x =1){\n\tif(nl == nr)\n\t\treturn (val >= sum[x]) ? pad(nl, sum[x]) : pad(-0x3f3f3f3f, 0);\n\tpushdown(x);\n\tint mid =(nl+nr)>>1;\n\tif(l < nl){\n\t\tif(sum[x<<1] < val){\n\t\t\tpad ret =query2(l, val-sum[x<<1], mid+1, nr, x<<1^1);\n\t\t\tret.pos =max(ret.pos, mid), ret.sum +=sum[x<<1];\n\t\t\treturn ret;\n\t\t}\n\t\telse\n\t\t\treturn query2(l, val, nl, mid, x<<1);\n\t}\n\telse if(l <= mid){\n\t\tpad ret =query2(l, val, nl, mid, x<<1);\n\t\tif(ret.pos == mid && ret.sum < val){\n\t\t\tpad ret2 =query2(l, val-ret.sum, mid+1, nr, x<<1^1);\n\t\t\tret.pos =max(ret.pos, ret2.pos), ret.sum +=ret2.sum;\n\t\t}\n\t\treturn ret;\n\t}\n\telse\n\t\treturn query2(l, val, mid+1, nr, x<<1^1);\n}\n```\n\n\uff08\u53d8\u91cf/\u7ed3\u6784\u4f53\u5b9a\u4e49\u53ef\u89c1\u4e0b\u9762\u5b8c\u6574\u4ee3\u7801\uff1b\u5177\u4f53\u542b\u4e49\u624b\u5217\u4e0b\u60c5\u51b5\u5e94\u8be5\u5c31\u80fd\u7406\u89e3X\uff09\n\n\u5176\u4e2d\u4e3b\u8981\u6bd4\u8f83\u5bb9\u6613\u4f7f\u4eba\u8ff7\u60d1\u7684\u662f `(l <= mid)` \u5904\u7684\u5206\u652f\uff0c\u56e0\u4e3a\u5b83\u540c\u65f6\u9012\u5f52\u4e86\u5de6\u53f3\u5b50\u6811\n\n\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u51fd\u6570\u5355\u8bcd\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u7684\u786e\u662f $O(\\log n)$ \u7684\uff0c\u8003\u8651\u5176\u9012\u5f52\u8def\u7ebf\u5927\u6982\u662f\u8fd9\u6837\uff1a\n\n![query](https://cdn.luogu.com.cn/upload/image_hosting/dgro6tmn.png)\n\n\u7531\u6b64\u4e5f\u53ef\u53d1\u73b0\u5b83\u6700\u574f\u53ef\u80fd\u5e26\u4e00\u4e2a $2$ \u7684\u5e38\u6570...\u56e0\u6b64\u7406\u8bba\u590d\u6742\u5ea6\u4e0d\u4e00\u5b9a\u4f1a\u6bd4\u5f00\u5934\u63d0\u5230\u7684\u8f83\u7b80\u6613\u7684\u5b9e\u73b0\u66f4\u4f18 \\fad\n\n## CODE\n\n\u5373 $\\texttt{Part 2}$ \u63d0\u5230\u7684\u5b9e\u73b0\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#define ll long long\nusing std::min;\nusing std::max;\n\nconst int MAXN =2e5+20, MAXT =1<<19;\n\n/*------------------------------IO------------------------------*/\n\nint read(){\n\tint x =0; char c =getchar(); bool f =0;\n\twhile(c < '0' || c > '9') (c == '-') ? f =1, c =getchar() : c =getchar();\n\twhile(c >= '0' && c <= '9') x =(x<<1)+(x<<3)+(48^c), c =getchar();\n\treturn (f) ? -x : x;\n}\n\nvoid write(const int &x){\n\tif(x/10)\n\t\twrite(x/10);\n\tputchar('0'+x%10);\n}\n\n/*------------------------------Seg------------------------------*/\n\nint N =1;\nll sum[MAXT];\nll tag_s[MAXT];\nint mn[MAXT];\nint tag_mn[MAXT];\n\ninline void pushup(const int &x){\n\tsum[x] =sum[x<<1]+sum[x<<1^1];\n\tmn[x] =min(mn[x<<1], mn[x<<1^1]);\n}\n\ninline void pushdown(const int &x){\n\tif(tag_s[x]){\n\t\tsum[x<<1] =tag_s[x]/2;\n\t\tsum[x<<1^1] =tag_s[x]/2;\n\t\ttag_s[x<<1] =tag_s[x]/2;\n\t\ttag_s[x<<1^1] =tag_s[x]/2;\n\t\ttag_s[x] =0;\n\t}\n\tif(tag_mn[x]){\n\t\tmn[x<<1] =tag_mn[x];\n\t\tmn[x<<1^1] =tag_mn[x];\n\t\ttag_mn[x<<1] =tag_mn[x];\n\t\ttag_mn[x<<1^1] =tag_mn[x];\n\t\ttag_mn[x] =0;\n\t}\n}\n\nvoid modify(const int &l, const int &r, const int &val, const int &nl =1, const int &nr =N, const int &x =1){\n\tif(l > r)\n\t\treturn;\n\tif(l == nl && r == nr){\n\t\tsum[x] =1ll*val*(nr-nl+1);\n\t\ttag_s[x] =1ll*val*(nr-nl+1);\n\t\tmn[x] =val;\n\t\ttag_mn[x] =val;\n\t\treturn;\n\t}\n\tpushdown(x);\n\tint mid =(nl+nr)>>1;\n\tif(r <= mid)\n\t\tmodify(l, r, val, nl, mid, x<<1);\n\telse if(l >= mid+1)\n\t\tmodify(l, r, val, mid+1, nr, x<<1^1);\n\telse\n\t\tmodify(l, mid, val, nl, mid, x<<1), modify(mid+1, r, val, mid+1, nr, x<<1^1);\n\tpushup(x);\n}\n\n/*\u6700\u5de6\u7684\u81f3\u5c11\u4e3a pos \u7684\u4e0d\u5927\u4e8e val \u7684\u4f4d\u7f6e*/\nint query1(const int &pos, const int &val, const int &nl =1, const int &nr =N, const int &x =1){\n\tif(nl == nr)\n\t\treturn (mn[x] <= val) ? nl : 0x3f3f3f3f;\n\tpushdown(x);\n\tint mid =(nl+nr)>>1;\n\tif(mid >= pos && mn[x<<1] <= val)\n\t\treturn query1(pos, val, nl, mid, x<<1);\n\telse\n\t\treturn query1(pos, val, mid+1, nr, x<<1^1);\n}\n\nstruct pad{\n\tint pos, sum;\n\t\n\tpad(const int &P, const int &S):pos(P), sum(S){}\n};\n\n/*\u6700\u53f3\u7684 sum[l, pos] \u4e0d\u5927\u4e8e val \u7684\u4f4d\u7f6e pos*/\npad query2(const int &l, const int &val, const int &nl =1, const int &nr =N, const int &x =1){\n\tif(nl == nr)\n\t\treturn (val >= sum[x]) ? pad(nl, sum[x]) : pad(-0x3f3f3f3f, 0);\n\tpushdown(x);\n\tint mid =(nl+nr)>>1;\n\tif(l < nl){\n\t\tif(sum[x<<1] < val){\n\t\t\tpad ret =query2(l, val-sum[x<<1], mid+1, nr, x<<1^1);\n\t\t\tret.pos =max(ret.pos, mid), ret.sum +=sum[x<<1];\n\t\t\treturn ret;\n\t\t}\n\t\telse\n\t\t\treturn query2(l, val, nl, mid, x<<1);\n\t}\n\telse if(l <= mid){\n\t\tpad ret =query2(l, val, nl, mid, x<<1);\n\t\tif(ret.pos == mid && ret.sum < val){\n\t\t\tpad ret2 =query2(l, val-ret.sum, mid+1, nr, x<<1^1);\n\t\t\tret.pos =max(ret.pos, ret2.pos), ret.sum +=ret2.sum;\n\t\t}\n\t\treturn ret;\n\t}\n\telse\n\t\treturn query2(l, val, mid+1, nr, x<<1^1);\n}\n\n/*------------------------------Main------------------------------*/\n\nint work(int pos, int money, const int &n){\n\tint ret =0;\n\twhile(pos <= n){\n\t\tint S =query1(pos, money);\n\t\t\n\t\tif(S > n)\n\t\t\tbreak;\n\t\t\n\t\tpad get =query2(S, money);\n\t\tint T =get.pos;\n\t\t\n\t\tret +=T-S+1;\n\t\tmoney -=get.sum;\n\t\tpos =T+1;\n\t}\n\treturn ret;\n}\n\nint main(){\n\tint n =read(), q =read();\n\t\n\twhile(N < n)\n\t\tN <<=1;\n\tfor(int i =N; i < N+n; ++i)\n\t\tsum[i] =read(), mn[i] =sum[i];\n\tfor(int i =N+n; i < 2*N; ++i)\n\t\tsum[i] =mn[i] =0x3f3f3f3f;\n\tfor(int i =N-1; i >= 1; --i)\n\t\tpushup(i);\n\t\n\tfor(int t =0; t < q; ++t){\n\t\tint op =read();\n\t\tint x =read(), y =read();\n\t\tif(op == 1)\n\t\t\tmodify(query1(1, y), x, y);\n\t\telse\n\t\t\twrite(work(x, y, n)), putchar('\\n');\n\t}\n}\n```",
        "postTime": 1605788365,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1439C \u3010Greedy Shopping\u3011"
    }
]