[
    {
        "content": "[\u540c\u6b65\u53d1\u8868\u5728\u535a\u5ba2\u91cc\u54e6](https://foreverlasting1202.github.io/)\n\n\u6784\u9020\u3002\n\n\u795e\u4ed9\u6784\u9020\u9898\u3002\n\n\u9898\u9762\uff1a\u7ed9\u51fa\u4e24\u68f5$n$\u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u8981\u6c42\u5bfb\u627e\u4e00\u79cd\u70b9\u7684\u4e00\u4e00\u6620\u5c04\uff0c\u4f7f\u5f97\u4e24\u68f5\u6811\u6ca1\u6709\u91cd\u8fb9\u3002\n\n\u62ff\u5230\u8fd9\u9053\u9898\uff0c\u7b2c\u4e00\u53cd\u5e94\u5c31\u53d1\u73b0\u83ca\u82b1\u6811\u663e\u7136\u662f\u4e0d\u884c\u7684\u3002\n\n\u8fd9\u662f\u663e\u7136\u7684\uff0c\u5bf9\u4e8e\u83ca\u82b1\u6811\u7684\u6839\u8282\u70b9\u6211\u4eec\u6839\u672c\u627e\u4e0d\u5230\u70b9\u53bb\u6620\u5c04\u3002\n\n~~\u7136\u540e\u6211\u5c31\u4e0d\u4f1a\u505a\u4e86\u3002~~\n\n\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u5176\u4ed6\u60c5\u51b5\u90fd\u6709\u89e3\u3002\n\n\u8003\u8651\u679a\u4e3e$n=4$\u548c$n=5$\u7684\u60c5\u51b5\uff0c\u4f60\u5168\u6392\u5217\u679a\u4e3e\u4e00\u4e0b\uff0c\u53d1\u73b0\u90fd\u6709\u89e3\u3002\n\n\u4e8e\u662f\u5bf9\u4e8e$n=4$\u548c$n=5$\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u6620\u5c04\u3002\n\n\u7136\u540e\u53bb\u60f3\u529e\u6cd5\u9012\u5f52\u6c42\u89e3\u3002\n\n\u5bf9\u4e8e\u5f53\u524d\u4e00\u4e2a$n$\u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u5224\u6389\u65e0\u89e3\u7684\u60c5\u51b5\u540e\uff0c\u5b83\u4e00\u5b9a\u662f\u4e00\u68f5\u6df1\u5ea6\u81f3\u5c11\u4e3a$3$\u7684\u6811\u3002\n\n\u5982\u679c\u8fd9\u68f5\u6811\u6df1\u5ea6\u4e3a3\u800c\u4e14\u53f6\u5b50\u7ed3\u70b9\u6df1\u5ea6\u5927\u4e8e\u7b49\u4e8e3\u7684\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u6784\u9020\u89e3\u3002\n\n\u8003\u8651\u6839\u8282\u70b9\u4e3a$u$\uff0c\u90a3\u4e2a\u53f6\u5b50\u7ed3\u70b9\u4e3a$v$\uff0c\u8fde\u63a5$v$\u7684\u70b9\u4e3a$w$\u3002\n\n\u6211\u4eec\u8ba9$u$\u53bb\u5bf9\u5e94\u7b2c\u4e8c\u68f5\u6811\u7684\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9$u'$\uff0c$v$\u53bb$u'$\u7684\u90bb\u5c45$v'$\uff0c\u7136\u540e\u627e\u4e00\u4e2a\u4e0e$v'$\u6ca1\u8fde\u8fb9\u7684\u70b9$w'$\u4e0e$w$\u5bf9\u5e94\uff0c\u5269\u4f59\u7684\u968f\u4fbf\u5bf9\u5e94\u5c31\u884c\u4e86\u3002\u8fd9\u6837\u663e\u7136\u662f\u5bf9\u7684\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u6df1\u5ea6\u4e3a3\u800c\u4e14\u53f6\u5b50\u7ed3\u70b9\u6df1\u5ea6\u4e3a\u5927\u4e8e\u7b49\u4e8e3\u7684\u6709\u4e24\u4e2a\uff0c\u4f60\u5c31\u8003\u8651\u5220\u9664\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e3\u7684\u53f6\u5b50\u548c\u4e00\u4e2a\u4e0e\u6839\u8282\u70b9\u76f8\u8fde\u7684\u53f6\u5b50\u5c31\u884c\u4e86\u3002\n\n\u5176\u4ed6\u60c5\u51b5\u76f4\u63a5\u968f\u610f\u5220\u6389\u4e24\u4e2a\u53f6\u5b50\u7ed3\u70b9\u5c31\u884c\u4e86\uff0c\u4e8e\u662f\u6210\u529f\u5730\u6784\u9020\u4e86\u51fa\u6765\u3002\n\n\u66b4\u529b\u662f$O(n^2)$\uff0c\u7136\u540e\u7528$set$\u7ef4\u62a4\u4e00\u4e0b\u5220\u70b9\u7b49\u64cd\u4f5c\u5c31\u53d8\u6210$O(nlogn)$\u4e86\u3002\n\ncode:\n```cpp\n//2019.3.20 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-10\n#define RG register\ninline int read() {\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') {\n        if(ch=='-')w=1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y) {\n    x^=y^=x^=y;\n}\ninline int _abs(const res &x) {\n    return x>0?x:-x;\n}\ninline int _max(const res &x,const res &y) {\n    return x>y?x:y;\n}\ninline int _min(const res &x,const res &y) {\n    return x<y?x:y;\n}\nconst int N=1e4+10;\nnamespace MAIN {\n    int n;\n    int ans[N],tmp[N];\n    typedef pair<int,int> Pair;\n#define mp make_pair\n#define fi first\n#define se second\n    struct TR{\n        set<Pair> edge;\n        set<int> lj[N];\n        int du[N];\n        inline void addedge(const res &u,const res &v){\n            edge.insert(mp(u,v)),edge.insert(mp(v,u)),lj[u].insert(v),lj[v].insert(u),du[u]++,du[v]++;\n        }\n        set<int> cz;\n        set<Pair> qb,leaf;\n        inline void init(){\n            for(res i=1;i<=n;i++){\n                cz.insert(i),qb.insert(mp(du[i],i));\n                if(du[i]==1)leaf.insert(mp(*lj[i].begin(),i));\n            }\n        }\n        inline int checkjh(){\n            return int(cz.size()-(*qb.rbegin()).fi-1);\n        }\n        inline int pushin(res *p,const res &U,const res &V,const res &W){\n            res px=0;\n            for(auto it:cz)if(U!=it&&V!=it&&W!=it)p[++px]=it;\n            return px;\n        }\n        Pair S[5];\n        inline Pair get_leaf(){\n            S[1]=*leaf.begin(),S[2]=*++leaf.begin(),S[3]=*leaf.rbegin(),S[4]=*++leaf.rbegin(),sort(S+1,S+4+1);\n            res mxid=-1;\n            for(res i=1;i<=4;i++){\n                RG Pair it=S[i];\n                if(du[it.fi]>2){mxid=it.fi;break;}\n            }\n            if(mxid==-1)return mp((*leaf.begin()).se,(*leaf.rbegin()).se);\n            res u=-1,v=-1;\n            for(res i=1;i<=4;i++){\n                RG Pair it=S[i];\n                if(it.fi==mxid)u=it.se;\n                else v=it.se;\n            }\n            return mp(u,v);\n        }\n        inline void erase(const res &id){\n            res x=*lj[id].begin();\n            cz.erase(id),leaf.erase(mp(x,id)),qb.erase(mp(1,id)),lj[id].erase(x),lj[x].erase(id),qb.erase(mp(du[x],x)),du[x]--,qb.insert(mp(du[x],x));\n            if(du[x]==1)leaf.insert(mp(*lj[x].begin(),x));\n        }\n    }A,B;\n    inline void put(){\n        puts(\"Yes\");\n        for(res i=1;i<=n;i++)printf(\"%d \",ans[i]+n);\n        exit(0);\n    }\n    int g[N],h[N];\n    inline bool check(const res &nw){\n        for(res i=1;i<=nw;i++)\n            for(res j=1;j<i;j++)\n                if(A.edge.find(mp(g[i],g[j]))!=A.edge.end()&&B.edge.find(mp(h[i],h[j]))!=B.edge.end())return 0;\n        return 1;\n    }\n    inline void blsolve(){\n        res nw=A.pushin(g,0,0,0);\n        B.pushin(h,0,0,0);\n        do{\n            if(check(nw)){\n                for(res i=1;i<=nw;i++)ans[g[i]]=h[i];\n                return;\n            }\n        }while(next_permutation(g+1,g+nw+1));\n    }\n    inline void onesolve(TR &A,TR &B){\n        res u=((*++A.qb.rbegin()).se),v=*A.lj[u].begin(),w=*A.lj[u].rbegin();\n        if(A.du[w]==1)_swap(v,w);\n        res U=-1,W=(*B.leaf.begin()).se,V=(*B.leaf.begin()).fi;\n        for(auto it:B.cz)if(B.edge.find(mp(it,V))==B.edge.end()&&B.edge.find(mp(it,W))==B.edge.end()){U=it;break;}\n        ans[u]=U,ans[v]=V,ans[w]=W;\n        res nw=A.pushin(g,u,v,w);\n        B.pushin(h,U,V,W);\n        for(res i=1;i<=nw;i++)ans[g[i]]=h[i];\n    }\n    inline void zh(){\n        for(res i=1;i<=n;i++)tmp[ans[i]]=i;\n        for(res i=1;i<=n;i++)ans[i]=tmp[i];\n    }\n    void solve(){\n        if((A.cz.size())<=3||!A.checkjh()||!B.checkjh()){puts(\"No\");exit(0);}\n        if((A.cz.size())<=5){blsolve();return;}\n        if(A.checkjh()==1){onesolve(A,B);return;}\n        if(B.checkjh()==1){onesolve(B,A),zh();return;}\n        RG Pair a=A.get_leaf(),c=B.get_leaf(),b=mp(*A.lj[a.fi].begin(),*A.lj[a.se].begin()),d=mp(*B.lj[c.fi].begin(),*B.lj[c.se].begin());\n        A.erase(a.fi),A.erase(a.se),B.erase(c.fi),B.erase(c.se),solve();\n        if(ans[b.fi]!=d.fi&&ans[b.se]!=d.se)ans[a.fi]=c.fi,ans[a.se]=c.se;\n        else ans[a.fi]=c.se,ans[a.se]=c.fi;\n    }\n    inline void MAIN(){\n        n=read();\n        for(res i=1;i<n;i++){\n            res u=read(),v=read();\n            A.addedge(u,v);\n        }\n        for(res i=1;i<n;i++){\n            res u=read()-n,v=read()-n;\n            B.addedge(u,v);\n        }\n        A.init(),B.init(),solve(),put();\n    }\n}\nint main() {\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1553255173,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010CF923F\u3011Public Service"
    },
    {
        "content": "\u662f\u4e00\u9053\u4e0d\u9519\u7684 \\*3200 \u7684\u6784\u9020\u9898\u55ef\u3002\u53cd\u6b63\u6211\u662f\u600e\u4e48\u7740\u90fd\u4e0d\u53ef\u80fd\u60f3\u5230\u4e86\u3002\n\n<!---more--->\n\n## \u9898\u610f\n\n> \u7ed9\u5b9a\u4e24\u68f5\u6811\uff0c\u4f60\u9700\u8981\u7ed9\u7b2c\u4e00\u68f5\u6811\u91cd\u6807\u53f7\uff0c\u4f7f\u5f97\u4e0d\u5b58\u5728\u4e00\u5bf9\u70b9 $(u,v)$\uff0c\u6ee1\u8db3 $(u,v)$ \u8fd9\u6761\u8fb9\u5728\u4e24\u68f5\u6811\u4e0a\u90fd\u5b58\u5728\u3002\n>\n> $n\\leq 10^4$\u3002\n\n## \u9898\u89e3\n\n\u8003\u8651\u5bf9\u4e8e $n$ \u6bd4\u8f83\u5c0f\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u505a\u3002\n\n\u663e\u7136\uff0c\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e2a\u6811\u662f\u83ca\u82b1\u56fe\u7684\u60c5\u51b5\uff0c\u4e00\u5b9a\u662f\u65e0\u89e3\u7684\u3002\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u83ca\u82b1\u4e2d\u5fc3\u7684\u90a3\u4e2a\u70b9\u4e0d\u80fd\u5728\u53e6\u4e00\u68f5\u6811\u4e0a\u548c\u4efb\u610f\u4e00\u4e2a\u70b9\u8fde\u8fb9\u3002\n\n\u5426\u5219\u53ef\u4ee5\u8bc1\u660e\u4e00\u5b9a\u662f\u6709\u89e3\u7684\u3002\u4e0b\u9762\u6211\u4eec\u6765\u8003\u8651\u6784\u9020\u8fd9\u6837\u7684\u89e3\u3002\u8bbe $x$ \u5728\u53e6\u4e00\u4e2a\u56fe\u4e0a\u5bf9\u5e94\u70b9 $x'$\u3002\n\n\u8003\u8651\u4e00\u4e2a\u83ca\u82b1\u56fe\u5916\u6302\u4e00\u4e2a\u70b9 $v$ \u7684\u60c5\u51b5\u3002\u663e\u7136 $v$ \u7684\u5ea6\u4e3a $1$\u3002\u6211\u4eec\u8bbe\u4e0e $v$ \u76f8\u90bb\u7684\u70b9\u4e3a $u$\uff0c\u5220\u6389 $v$ \u4e4b\u540e\u7684\u9053\u5fb7\u83ca\u82b1\u56fe\u7684\u4e2d\u5fc3\u4e3a $w$\u3002\n\n\u5728\u53e6\u4e00\u4e2a\u56fe\u4e2d\uff0c\u627e\u5230\u4e00\u4e2a\u53f6\u5b50 $w'$\uff0c\u5c06\u5b83\u7684\u7236\u4eb2\u6807\u8bb0\u4e3a $v'$\uff0c\u7136\u540e\u627e\u5230\u4efb\u610f\u4e00\u4e2a\u4e0d\u4e0e $v'$ \u76f8\u90bb\u7684\u70b9\uff0c\u5c06\u5176\u6807\u4e3a $u'$\u3002\u5269\u4e0b\u7684\u70b9\u5c31\u53ef\u4ee5\u968f\u4fbf\u4e71\u641e\u4e86\u3002\n\n\u7136\u540e\u8003\u8651\u66f4\u4e3a\u4e00\u822c\u7684\u60c5\u51b5\u3002\u91c7\u7528\u5f52\u7eb3\u6784\u9020\uff1a\u5728\u7b2c\u4e00\u68f5\u6811\u91cc\u9762\u627e\u5230\u4e24\u4e2a\u53f6\u5b50 $u,v$ \u6ee1\u8db3 $dis(u,v)\\geq 3$ \u4e14\u539f\u56fe\u53bb\u6389\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u540e\u4e0d\u4f1a\u53d8\u6210\u83ca\u82b1\u56fe\u3002\n\n\u6ce8\u610f\u5230\u8981\u4e48 $n$ \u6bd4\u8f83\u5c0f\uff0c\u8981\u4e48\u539f\u56fe\u662f\u83ca\u82b1\u56fe\u5916\u6302\u4e00\u4e2a\u70b9\uff0c\u5426\u5219\u8fd9\u6837\u7684\u70b9\u4e00\u5b9a\u662f\u5b58\u5728\u7684\u3002\u5728\u53e6\u4e00\u4e2a\u6811\u4e0a\u4e5f\u627e\u5230\u8fd9\u6837\u7684\u4e00\u5bf9\u70b9 $u',v'$\uff0c\u7136\u540e\u5c06\u8fd9\u56db\u4e2a\u70b9\u5220\u6389\u5373\u53ef\u3002\u76f4\u5230\u5176\u4e2d\u81f3\u5c11\u4e00\u4e2a\u56fe\u51fa\u73b0\u4e86 $n$ \u8f83\u5c0f\u65f6\u6216\u8005\u539f\u56fe\u53d8\u6210\u4e86\u83ca\u82b1\u5916\u6302\u4e00\u4e2a\u70b9\u65f6\uff0c\u7528\u7279\u6b8a\u65b9\u6cd5\u89e3\u51b3\u3002\u81f3\u4e8e\u5220\u53bb\u7684\u70b9\uff0c\u6211\u4eec\u5728\u56de\u6eaf\u7684\u65f6\u5019\u5224\u5b9a\u4e00\u4e0b\u9009\u62e9 $u\\to u',v\\to v'$ \u8fd9\u6837\u7684\u5bf9\u5e94\u8fd8\u662f $u\\to v',v\\to u'$ \u8fd9\u6837\u7684\u5bf9\u5e94\u5373\u53ef\u3002\n\n\u8003\u8651\u6bcf\u6b21\u627e\u70b9\u5220\u70b9\u662f $\\mathcal O(n^2)$ \u7684\uff0c\u5982\u4f55\u5feb\u901f\u4f18\u5316\u8fd9\u4e00\u8fc7\u7a0b\u3002\n\n\u8003\u8651\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u6cd5\u627e\u4e00\u5bf9 $u,v$\uff1a\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u53f6\u5b50 $u$\uff0c\u627e\u51fa\u4e0e\u8fd9\u4e2a\u53f6\u5b50\u76f8\u90bb\u7684\u70b9 $x$\uff0c\u7136\u540e\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u4e0d\u4e0e $x$ \u76f8\u90bb\u7684\u70b9 $v$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5f00\u4e00\u4e2a `set` \u7ef4\u62a4\u4e0e\u5b83\u76f8\u90bb\u7684\u53f6\u5b50\uff0c\u518d\u5f00\u4e00\u4e2a `set` \u7ef4\u62a4\u76f8\u90bb\u70b9\u91cc\u6709\u53f6\u5b50\u7684\u7ed3\u70b9\u3002\u6bcf\u6b21\u968f\u4fbf\u627e\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e00\u4e2a\u53f6\u5b50\uff0c\u518d\u968f\u4fbf\u627e\u53e6\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e00\u4e2a\u53f6\u5b50\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n\\log n)$\uff0c\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u901a\u8fc7\u6b64\u9898\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n// #define int long long\nusing namespace std;\nbool Begin;\nconst int max_n=300005;\ninline int read(){\n    int x=0;bool w=0;char c=getchar();\n    while(c<'0' || c>'9') w|=c=='-',c=getchar();\n    while(c>='0' && c<='9') x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    return w?-x:x;\n}\ninline void write(int x){\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10^48);\n}\n\nint n;\n\nset< pair<int,int> > sA,sB;\nset<int> leaf[max_n<<1],g[max_n<<1];\n\nint ans[max_n];\n\ninline void ValueOne(set< pair<int,int> > &s1,set< pair<int,int> > &s2,int n){\n    bool rev=0;\n    if(s1.rbegin()->first!=n-3){\n        swap(s1,s2);\n        rev=1;\n    }\n    int w=s1.rbegin()->second,u=next(s1.rbegin())->second,v=*leaf[u].begin();\n    ans[v]=s2.rbegin()->second;\n    ans[w]=*leaf[ans[v]].begin();\n    for(auto p:s2) if(g[ans[v]].find(p.second)==g[ans[v]].end()){\n        ans[u]=p.second;\n        break;\n    }\n    auto it=s2.begin();\n    for(auto p:s1) if(!ans[p.second]){\n        while(it->second==ans[u] || it->second==ans[v] || it->second==ans[w])\n            ++it;\n        ans[p.second]=it->second;\n        ++it;\n    }\n    if(rev) for(auto p:s1)\n        ans[ans[p.second]]=p.second;\n}\ninline void SmallGraph(set< pair<int,int> > &s1,set< pair<int,int> > &s2,int n){\n    map<int,int> mp;\n    vector<int> vec,A,B;\n    for(auto p:s1) A.emplace_back(p.second);\n    for(auto p:s2) B.emplace_back(p.second);\n    for(int i=0;i<n;++i) vec.emplace_back(i);\n    do{\n        mp.clear();\n        for(int i=0;i<n;++i)\n            mp[A[vec[i]]]=B[i];\n        bool ok=1;\n        for(int i=0;i<n && ok;++i)\n            for(auto p:g[A[vec[i]]])\n                if(g[B[i]].find(mp[p])!=g[B[i]].end()){\n                    ok=0;\n                    break;\n                }\n        if(ok){\n            for(int i=0;i<n;++i)\n                ans[A[vec[i]]]=B[i];\n            return;\n        }\n    }while(next_permutation(vec.begin(),vec.end()));\n}\n\ninline void Delete(set< pair<int,int> > &s,int x){\n    int y=*g[x].begin();\n    s.erase(make_pair(0,x));\n    s.erase(make_pair(leaf[y].size(),y));\n    leaf[y].erase(x);\n    s.emplace(leaf[y].size(),y);\n    g[y].erase(x);\n    if(g[y].size()==1){\n        int z=*g[y].begin();\n        s.erase(make_pair(leaf[z].size(),z));\n        leaf[z].emplace(y);\n        s.emplace(leaf[z].size(),z);\n    }\n}\n\ninline void solve(set< pair<int,int> > &s1,set< pair<int,int> > &s2){\n    int n=s1.size();\n    if(s1.rbegin()->first==n-3 || s2.rbegin()->first==n-3) return ValueOne(s1,s2,n);\n    if(n<7) return SmallGraph(s1,s2,n);\n    int a=s1.rbegin()->second,b=next(s1.rbegin())->second,c=s2.rbegin()->second,d=next(s2.rbegin())->second;\n    int u1=*leaf[a].begin(),v1=*leaf[b].begin(),u2=*leaf[c].begin(),v2=*leaf[d].begin();\n    Delete(s1,u1),Delete(s1,v1),Delete(s2,u2),Delete(s2,v2);\n    solve(s1,s2);\n    if(g[u2].find(ans[a])==g[u2].end() && g[v2].find(ans[b])==g[v2].end())\n        ans[u1]=u2,ans[v1]=v2;\n    else\n        ans[u1]=v2,ans[v1]=u2;\n}\n\nbool End;\n#define File \"vvakioi\"\nsigned main(){\n    #ifndef ONLINE_JUDGE\n    freopen(File \".in\",\"r\",stdin);\n    freopen(File \".out\",\"w\",stdout);\n    #endif\n    // cerr<<\"Memory : \"<<(&Begin-&End)/1024.0/1024<<\"\\n\";\n    n=read();\n    for(int i=1;i<n;++i){\n        int u=read(),v=read();\n        g[u].emplace(v),g[v].emplace(u);\n    }\n    for(int i=1;i<n;++i){\n        int u=read(),v=read();\n        g[u].emplace(v),g[v].emplace(u);\n    }\n    for(int i=1;i<=(n<<1);++i){\n        if(g[i].size()==n-1) return puts(\"No\"),0;\n        if(g[i].size()==1) leaf[*g[i].begin()].emplace(i);\n    }\n    for(int i=1;i<=n;++i)\n        sA.emplace(leaf[i].size(),i);\n    for(int i=n+1;i<=(n<<1);++i)\n        sB.emplace(leaf[i].size(),i);\n    solve(sA,sB);\n    puts(\"Yes\");\n    for(int i=1;i<=n;++i)\n        write(ans[i]),putchar(' ');\n    return 0;\n}\n```\n\n",
        "postTime": 1667374645,
        "uid": 181776,
        "name": "_Arahc_",
        "ccfLevel": 7,
        "title": "CF923F"
    }
]