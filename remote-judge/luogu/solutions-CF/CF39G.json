[
    {
        "content": "# \u5206\u6790:\n\n\u663e\u7136\u6211\u4eec\u9700\u8981\u5236\u4f5c\u4e00\u4e2a\u7b80\u5316\u7248\u7684\u89e3\u91ca\u6027 $\\text{C++}$ \u7684\u89e3\u91ca\u5668\u3002\n\n\u6ce8\u610f\u5230 $n\\in[0,2^{15})$ \u53ea\u6709 $32768$ \u79cd\u8f93\u5165\u60c5\u51b5\u3002\n\n\u52a0\u5165**\u8bb0\u5fc6\u5316**\uff0c\u8bb0\u5f55\u6bcf\u79cd ``f(n)`` \u7684\u7ed3\u679c\uff0c\u5c31\u80fd\u5c06\u5e73\u5747\u5355\u6b21\u8c03\u7528\u51fd\u6570\u7684\u590d\u6742\u5ea6\u7f29\u51cf\u81f3 $O(1)$ \uff0c\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5199\u4e00\u4e2a**\u5927\u6a21\u62df**\u5c31\u80fd\u89e3\u51b3\u95ee\u9898\u4e86\u3002\n\n\u76f4\u63a5\u6a21\u62df\u663e\u7136\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5**\u4ece\u5916\u5f80\u91cc**\u4e00\u5c42\u5c42\u6a21\u62df\u3002\n\n# \u4ee3\u7801\u91cd\u8981\u7ec6\u8282:\n\n- \u8981\u6ce8\u610f**\u62ec\u53f7**\u7684\u5224\u65ad\uff0c\n\n\u2460\u5982\u679c\u4e00\u4e2a $\\text{arithmExpr}$ \u4e3a ``f(n / 2) + 1`` \uff0c\u90a3\u4e48\u4e0d\u5224\u65ad\u62ec\u53f7\u5c06\u4f1a\u5f97\u5230 $\\text{f(n}$ \uff0c $\\text{2)+}$ \u548c $1$ \u4e09\u9879 $\\text{multiplier}$\u3002\n\n\u2461\u5982\u679c\u4e00\u4e2a $\\text{operator}$ \u4e3a ``if(f(f(f(0))) == 0) return 0`` \uff0c\u90a3\u4e48\u5728\u67e5\u627e $\\text{logicalExpr}$ \u65f6\uff0c\u4f60\u4f1a\u5f97\u5230 ``f(f(f(0)`` \u800c\u975e ``f(f(f(0))`` \u3002\n\n- **\u8d1f\u6570**\u5904\u7406\u65f6\u5e76\u4e0d\u9700\u8981\u56f0\u96be\u7684\u6570\u5b66\u65b9\u6cd5\uff0c\n\n\u56e0\u4e3a $0-32767=-32767$ \u662f\u6700\u5c0f\u7684\u8d1f\u6570\u53ef\u80fd\u60c5\u51b5\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5c06\u6240\u6709\u8d1f\u6570\u52a0 $32768$ \u7136\u540e\u5bf9 $32768$ \u53d6\u6a21\u5373\u53ef\u3002\n\n- $\\text{product}$ \u548c $\\text{sum}$ \u7684\u8fd0\u7b97\u7b26\u8981**\u4ece\u540e\u5f80\u524d**\u627e\uff0c\u5426\u5219 $-$ \u6216 $/$ \u8fd0\u7b97\u4f1a\u51fa\u73b0\u8981\u8ba1\u7b97 $a-b+c-d$ \u5374\u8ba1\u7b97\u6210\u4e86 $a-(b+c-d)$ \u7684\u95ee\u9898\n\n- \u5927\u6a21\u62df**\u4e0d\u592a\u597d\u8c03**\uff0c\u5efa\u8bae\u4f7f\u7528 $\\text{Objective-C}$ \u6216**\u9762\u5411\u5bf9\u8c61**\u7684 $\\text{C++}$\uff0c\u4e0d\u8981\u7528 $abcd$ \u547d\u540d\u53d8\u91cf\u3002\n\n- \u679a\u4e3e**\u8f93\u5165\u53c2\u6570**\u8981**\u4ece\u5c0f\u5230\u5927**\uff0c\u5426\u5219\u4f1a**\u9012\u5f52\u5c42\u6570\u8fc7\u591a**\u70b8\u6808\u3002\n\n# \u4ee3\u7801\uff1a\n\n~~\u4e0d\u9700\u8981\u5224\u65ad\u6b7b\u5faa\u73af\uff0c\u4f46\u662f\u6211\u6ca1\u770b\u89c1~~\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int NUM_MAX = 0x7fff, N = 1000005;\nconst int UNSOLVEABLE = NUM_MAX + 1;\n\nclass Interpreter {\n\tpublic:\n\t\tchar code[N];\n\t\tint ret[NUM_MAX + 5];\n\t\tbool vis[NUM_MAX + 5];\n\n\t\tInterpreter(const char* _code = \"\\0\") {\n\t\t\tmemset(ret, -1, sizeof(ret));\n\t\t\tstrcpy(code + 1, _code);\n\t\t}\n\n\t\tInterpreter operator=(const Interpreter& i) {\n\t\t\tmemset(ret, -1, sizeof(ret));\n\t\t\tstrcpy(code + 1, i.code + 1);\n\t\t\treturn *this;\n\t\t}\n\n\t\tvoid init(const char* _code) {\n\t\t\t*this = Interpreter(_code);\n\t\t}\n\n\t\tint explainNumber(int argu, int l, int r) {\n\t\t\tint x;\n\t\t\tsscanf(code + l, \"%d\", &x);\n\t\t\treturn x;\n\t\t}\n\n\t\tint explainMultiplier(int argu, int l, int r) {\n\t\t\tfor (int i = l; i <= r; i++) {\n\t\t\t\tif (code[i] == 'n') return argu;\n\t\t\t\tif (code[i] == 'f') {\n\t\t\t\t\t//\u67e5\u627ef(n)\u7c7b\u7684Multiplier\u7684\u62ec\u53f7\u4e2d\u7684arithmExpr\u8303\u56f4\n\t\t\t\t\tint bracLevel = 0, lBracPos = -1, rBracPos;\n\t\t\t\t\tfor (int j = i + 1; j <= r; j++) {\n\t\t\t\t\t\tif (code[j] == '(' && lBracPos == -1) lBracPos = j;\n\t\t\t\t\t\tif (code[j] == '(') bracLevel++;\n\t\t\t\t\t\tif (code[j] == ')') bracLevel--;\n\t\t\t\t\t\tif (bracLevel == 0) { //\u5224\u65ad\u62ec\u53f7\u5c42\u6570\n\t\t\t\t\t\t\trBracPos = j;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint ariExp = explainArithmExpr(argu, lBracPos + 1, rBracPos - 1);\n\t\t\t\t\tif (ariExp == UNSOLVEABLE) return UNSOLVEABLE;\n\t\t\t\t\treturn explainFunction(ariExp, 1, strlen(code + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn explainNumber(argu, l, r);\n\t\t}\n\n\t\tint explainProduct(int argu, int l, int r) {\n\t\t\tint opPos = -1, opType = 1, bracLevel = 0;\n\t\t\t//\u67e5\u627eproduct\u4e2d\u7684\u64cd\u4f5c\u7b26\u4f4d\u7f6e\uff08\u8981\u4ece\u540e\u5f80\u524d\u627e\uff09\n\t\t\tfor (int i = r; i >= l; i--) {\n\t\t\t\tif (code[i] == ')') bracLevel++;\n\t\t\t\tif (code[i] == '(') bracLevel--;\n\t\t\t\tif (bracLevel == 0) {\n\t\t\t\t\tif (code[i] == '*') {\n\t\t\t\t\t\topPos = i, opType = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (code[i] == '/') {\n\t\t\t\t\t\topPos = i, opType = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint product = 1;\n\t\t\tif (opPos != -1) {\n\t\t\t\tproduct = explainProduct(argu, l, opPos - 1);\n\t\t\t\tif (product == UNSOLVEABLE) return UNSOLVEABLE;\n\t\t\t} else opPos = l - 1;\n\t\t\tint mult = explainMultiplier(argu, opPos + 1, r);\n\t\t\tif (mult == UNSOLVEABLE) return UNSOLVEABLE;\n\t\t\tif (opType == 1) return (product * mult + NUM_MAX + 1) % (NUM_MAX + 1);\n\t\t\treturn (product / mult + NUM_MAX + 1) % (NUM_MAX + 1);\n\t\t}\n\n\t\tint explainSum(int argu, int l, int r) {\n\t\t\tint opPos = -1, opType = 1, bracLevel = 0;\n\t\t\t//\u67e5\u627esum\u4e2d\u7684\u64cd\u4f5c\u7b26\u4f4d\u7f6e\uff08\u8981\u4ece\u540e\u5f80\u524d\u627e\uff09\n\t\t\tfor (int i = r; i >= l; i--) {\n\t\t\t\tif (code[i] == ')') bracLevel++;\n\t\t\t\tif (code[i] == '(') bracLevel--;\n\t\t\t\tif (bracLevel == 0) {\n\t\t\t\t\tif (code[i] == '+') {\n\t\t\t\t\t\topPos = i, opType = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (code[i] == '-') {\n\t\t\t\t\t\topPos = i, opType = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint sum = 0;\n\t\t\tif (opPos != -1) {\n\t\t\t\tsum = explainSum(argu, l, opPos - 1);\n\t\t\t\tif (sum == UNSOLVEABLE) return UNSOLVEABLE;\n\t\t\t} else opPos = l - 1;\n\t\t\tint product = explainProduct(argu, opPos + 1, r);\n\t\t\tif (product == UNSOLVEABLE) return UNSOLVEABLE;\n\t\t\tif (opType == 1) return (sum + product + NUM_MAX + 1) % (NUM_MAX + 1);\n\t\t\treturn (sum - product + NUM_MAX + 1) % (NUM_MAX + 1);\n\t\t}\n\n\t\tint explainArithmExpr(int argu, int l, int r) {\n\t\t\treturn explainSum(argu, l, r);\n\t\t}\n\n\t\tint explainLogicalExpr(int argu, int l, int r) {\n\t\t\tint opBegin, opEnd, opType;\n\t\t\t//\u67e5\u627elogicalExpr\u4e2d\u7684\u64cd\u4f5c\u7b26\u4f4d\u7f6e\n\t\t\tfor (int i = l; i <= r; i++) {\n\t\t\t\tif (code[i] == '<') {\n\t\t\t\t\topBegin = opEnd = i;\n\t\t\t\t\topType = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (code[i] == '>') {\n\t\t\t\t\topBegin = opEnd = i;\n\t\t\t\t\topType = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (code[i] == '=' && code[i + 1] == '=') {\n\t\t\t\t\topBegin = i, opEnd = i + 1;\n\t\t\t\t\topType = 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint ari1Result = explainArithmExpr(argu, l, opBegin - 1);\n\t\t\tif (ari1Result == UNSOLVEABLE) return UNSOLVEABLE;\n\t\t\tint ari2Result = explainArithmExpr(argu, opEnd + 1, r);\n\t\t\tif (ari2Result == UNSOLVEABLE) return UNSOLVEABLE;\n\t\t\tif (opType == 1) return ari1Result < ari2Result;\n\t\t\tif (opType == 2) return ari1Result > ari2Result;\n\t\t\treturn ari1Result == ari2Result;\n\t\t}\n\n\t\tint explainOperator(int argu, int l, int r) {\n\t\t\tfor (int i = l; i <= r; i++) {\n\t\t\t\tif (code[i] == 'i' && code[i + 1] == 'f') { //\u5e26if\u7684operator\n\t\t\t\t\tint logExpBegin = -1, bracLevel = 0, logExpEnd;\n\t\t\t\t\tfor (int j = i; j <= r; j++) {\n\t\t\t\t\t\tif (code[j] == '(' && logExpBegin == -1) logExpBegin = j + 1;\n\t\t\t\t\t\tif (code[j] == '(') bracLevel++;\n\t\t\t\t\t\tif (code[j] == ')') bracLevel--;\n\t\t\t\t\t\tif (bracLevel == 0 && logExpBegin != -1) {\n\t\t\t\t\t\t\tlogExpEnd = j - 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint logResult = explainLogicalExpr(argu, logExpBegin, logExpEnd);\n\t\t\t\t\tif (logResult == 0 || logResult == UNSOLVEABLE) return UNSOLVEABLE;\n\t\t\t\t\ti = logExpEnd + 2;\n\t\t\t\t}\n\t\t\t\tif (code[i] == 'r' && code[i + 1] == 'e') { //\u5e26return\u7684operator\n\t\t\t\t\tint ariEnd;\n\t\t\t\t\tfor (int j = i + 6; j <= r; j++) {\n\t\t\t\t\t\tif (code[j] == ';') {\n\t\t\t\t\t\t\tariEnd = j - 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn explainArithmExpr(argu, i + 6, ariEnd);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn UNSOLVEABLE;\n\t\t}\n\n\t\tint explainOperatorSequence(int argu, int l, int r) {\n\t\t\tif (l >= r) return UNSOLVEABLE;\n\t\t\tint opEnd, opResult;\n\t\t\tfor (opEnd = l; opEnd <= r; opEnd++) {\n\t\t\t\tif (code[opEnd] == ';') break; //\u6309;\u5206\u5272operatorSequence\n\t\t\t}\n\t\t\tif ((opResult = explainOperator(argu, l, opEnd)) != UNSOLVEABLE) return opResult;\n\t\t\treturn explainOperatorSequence(argu, opEnd + 1, r);\n\t\t}\n\n\t\tint explainFunction(int argu, int l, int r) {\n\t\t\tif (vis[argu]) return UNSOLVEABLE;\n\t\t\tif (ret[argu] >= 0) return ret[argu];\n\t\t\tvis[argu] = true;\n\t\t\tint opSeqBegin, opSeqEnd;\n\t\t\t//\u67e5\u627eoperatorSequence\u7684\u4f4d\u7f6e\n\t\t\tfor (int i = l; i <= r; i++) {\n\t\t\t\tif (code[i] == '{') opSeqBegin = i + 1;\n\t\t\t\tif (code[i] == '}') {\n\t\t\t\t\topSeqEnd = i - 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ret[argu] = explainOperatorSequence(argu, opSeqBegin, opSeqEnd);\n\t\t}\n\n\t\tint run(int want) {\n\t\t\tint codeLen = strlen(code + 1), ans = -1;\n\t\t\tfor (int argu = 0; argu <= NUM_MAX; argu++) { //\u4ece\u524d\u5f80\u540e\u679a\u4e3e\u8f93\u5165\u53c2\u6570\n\t\t\t\tmemset(vis, 0, sizeof(vis));\n\t\t\t\tif (explainFunction(argu, 1, codeLen) == want) ans = max(ans, argu);\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n};\n\nInterpreter intPre;\nint want;\nstring code, s;\n\nint main() {\n\tscanf(\"%d\\n\", &want);\n\twhile (getline(cin, s)) code += s + \" \";\n\tintPre.init(code.c_str());\n\tprintf(\"%d\\n\", intPre.run(want));\n\treturn 0;\n}\n```\n\nLuogu\u63d0\u4ea4\u8bb0\u5f55\uff1a[R99706280](https://www.luogu.com.cn/record/99706280)\n\n~~R1e8\u4e0d\u8fdc\u4e86\u5427~~\n\nCodeforces\u63d0\u4ea4\u8bb0\u5f55\uff1a[submission189160878](https://codeforces.com/contest/39/submission/189160878)",
        "postTime": 1673668585,
        "uid": 257045,
        "name": "DSCS2009",
        "ccfLevel": 6,
        "title": "CF39G \u9898\u89e3"
    }
]