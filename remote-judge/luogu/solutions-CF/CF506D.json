[
    {
        "content": "\u795e\u4ed9\u9898\u3002\n\n\u66b4\u529b+\u66b4\u529b=AC\u3002\n\n\u6ca1\u9519\uff0c\u5148\u60f3\u51fa\u4e24\u4e2a\u66b4\u529b\uff0c\u7136\u540e\u62fc\u8d77\u6765\uff0c\u4f60\u5c31 AC \u4e86\u8fd9\u9053\u9898\u3002\n\n**\u7528\u5206\u5757\u6765\u9009\u62e9\u7528\u54ea\u4e2a\u66b4\u529b\uff0c\u53ef\u80fd\u4e5f\u662f\u4e00\u79cd\u6b63\u89e3\u7684\u505a\u6cd5\u3002**\n\n\u9996\u5148\u6211\u4eec\u80fd\u60f3\u5230\u6700\u65e0\u8111\u7684\u66b4\u529b 1 \u3002\n\n## \u66b4\u529b 1\n\n\u5bf9\u4e8e\u6bcf\u79cd\u989c\u8272\u5efa\u4e00\u4e2a\u4ec5\u542b\u6709\u8fd9\u4e00\u79cd\u989c\u8272\u7684\u8fb9\u7684\u56fe\uff0c\u7136\u540e\u7528\u5e76\u67e5\u96c6\u5224\u8fde\u901a\uff0c\u626b\u4e00\u6b21\u6240\u6709\u8be2\u95ee\u7edf\u8ba1\u8d21\u732e\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u9996\u5148 $\\operatorname{O}(m)$ \u7684\u679a\u4e3e\u989c\u8272\uff0c\u7136\u540e $\\operatorname{O}(n\\alpha(n))$ \u7684\u5efa\u56fe+\u5e76\u67e5\u96c6\uff08\u5176\u5b9e\u5efa\u56fe\u53ef\u4ee5\u4e0d\u7528\uff0c\u76f4\u63a5\u5e76\u67e5\u96c6\u5c31\u591f\u4e86\uff09\uff0c\u518d\u52a0\u4e0a $\\operatorname{O}(q\\alpha(n))$ \u7684\u5904\u7406\u8be2\u95ee\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\operatorname{O}(m\\alpha(n)(n+q))$ \u3002\n\n\u8fd9\u663e\u7136\u662f\u8fc7\u4e0d\u4e86\u8fd9\u9053\u9898\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u518d\u6765\u60f3\u53e6\u4e00\u4e2a\u66b4\u529b\u3002\n\n## \u66b4\u529b 2\n\n\u5176\u5b9e\u53ea\u662f\u5bf9\u66b4\u529b 1 \u7684\u4e00\u70b9\u4fee\u6539\u3002\n\n\u5bf9\u4e8e\u6bcf\u79cd\u989c\u8272\u5efa\u4e00\u4e2a\u4ec5\u542b\u6709\u8fd9\u4e00\u79cd\u989c\u8272\u7684\u8fb9\u7684\u56fe\uff0c\u7136\u540e\u7528\u5e76\u67e5\u96c6\u5224\u8fde\u901a\uff0c\u5728\u6bcf\u4e2a\u8fde\u901a\u5757\u5185\u679a\u4e3e\u6240\u6709\u7684\u70b9\u5bf9 $(u,v)$ \uff0c\u66f4\u65b0 $(u,v)$ \u8fd9\u4e2a\u70b9\u5bf9\u7684\u8d21\u732e\u3002\n\n\u8fd9\u4e2a\u4e1c\u897f\u5728\u8fde\u901a\u5757\u5f88\u5c0f\uff08\u8fde\u901a\u5757\u5927\u5c0f\u7684\u5e73\u65b9\u5c0f\u4e8e $q$ \uff09\u7684\u65f6\u5019\u4f1a\u6bd4\u66b4\u529b 1 \u66f4\u4f18\u4e00\u4e9b\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u9996\u5148 $\\operatorname{O}(m)$ \u7684\u679a\u4e3e\u989c\u8272\uff0c\u7136\u540e $\\operatorname{O}(n\\alpha(n))$ \u7684\u5efa\u56fe+\u5e76\u67e5\u96c6\uff08\u5176\u5b9e\u5efa\u56fe\u53ef\u4ee5\u4e0d\u7528\uff0c\u76f4\u63a5\u5e76\u67e5\u96c6\u5c31\u591f\u4e86\uff09\uff0c\u7136\u540e $\\operatorname{O}(n^2\\alpha(n))$ \u7684\u7b97\u8d21\u732e\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\operatorname{O}(mn^2\\alpha(n))$\u3002\n\n## \u6b63\u89e3\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u60f3\u5230\uff1a\u53ef\u4e0d\u53ef\u4ee5\u5728\u8fde\u901a\u5757\u5927\u5c0f\u7684\u5e73\u65b9\u5c0f\u4e8e $q$ \u7684\u65f6\u5019\u7528\u66b4\u529b 2 \uff0c\u800c\u5728\u8fde\u901a\u5757\u5927\u5c0f\u7684\u5e73\u65b9\u5927\u4e8e $q$ \u7684\u65f6\u5019\u518d\u7528\u66b4\u529b 1 \u5462\uff1f\n\n\u5f53\u7136\u53ef\u4ee5\u3002\n\n\u4ec0\u4e48\u65f6\u5019\u4e00\u4e2a\u989c\u8272\u7684\u56fe\u4e2d\u6bcf\u4e2a\u8fde\u901a\u5757\u5927\u5c0f\u7684\u5e73\u65b9\u90fd\u5c0f\u4e8e $q$ \uff1f\n\n\u5728 \u8be5\u989c\u8272\u8fb9\u6570 $<\\sqrt{m}$ \u7684\u65f6\u5019\uff0c\u6240\u6709\u8fd9\u79cd\u989c\u8272\u7684\u6240\u6709\u8fde\u901a\u5757\u5185\u70b9\u6570\u7684\u5e73\u65b9\u548c\u4e0d\u4f1a\u8d85\u8fc7 $n\\sqrt n$ \u3002\n\n\u4e8e\u662f\uff0c\u66b4\u529b 2 \u5c31\u53ef\u4ee5\u80dc\u4efb\u8fd9\u90e8\u5206\u7684\u4efb\u52a1\uff0c\u590d\u6742\u5ea6 $\\operatorname{O}(n\\alpha(n)\\sqrt n)$\u3002\n\n\u5728 \u8be5\u989c\u8272\u8fb9\u6570 $\\ge\\sqrt{m}$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u66b4\u529b 1 \uff0c\u56e0\u4e3a\u6b64\u65f6\u6ee1\u8db3\u8fd9\u79cd\u60c5\u51b5\u7684\u989c\u8272\u6570\u91cf\u53ea\u4f1a $\\le\\sqrt m$\u3002\u8fd9\u6837\u7684\u8bdd\u518d\u626b\u4e00\u904d\u6240\u6709\u8be2\u95ee\uff0c\u590d\u6742\u5ea6\u662f $\\operatorname{O}(\\sqrt m(q\\alpha(q)))$ \u7684\u3002\n\n\u8fd9\u6837\uff0c\u4e24\u4e2a\u66b4\u529b\u62fc\u8d77\u6765\uff0c\u5c31\u6253\u51fa\u4e86\u6b63\u89e3\u3002\n\n\u8003\u8651\u5b9e\u73b0\u7edf\u8ba1\u7b54\u6848\u65f6\u7528 `map` \u7edf\u8ba1\uff0c\u590d\u6742\u5ea6\u5e94\u4e58\u4e0a $\\operatorname{O}(\\log q)$\u3002\u6240\u4ee5\uff0c\u603b\u590d\u6742\u5ea6\u4e3a\uff1a$\\operatorname{O}((n\\alpha(n)\\sqrt n+\\sqrt m(q\\alpha(q)))\\log q)$ \u3002\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);++i)\n#define per(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int N=200005;\nint n,m,q;\nint num[N];\nvector<pair<int,int> > e[N],qs;\nmap<pair<int,int>,int> ans,lst;\nint f[N],sz[N],qto[N];\nint find(int i) {return f[i]==i?i:f[i]=find(f[i]);}\nvoid merge(int u,int v) {\n    u=find(u);v=find(v);\n    if(u!=v) {\n        if(sz[u]>sz[v]) {\n            f[v]=u;\n            sz[u]+=sz[v];\n        } else {\n            f[u]=v;\n            sz[v]+=sz[u];\n        }\n    }\n}\nvoid bao1(int co) {\n    rep(i,1,n) f[i]=i,sz[i]=1;\n    for(vector<pair<int,int> >::iterator ii=e[co].begin();ii!=e[co].end();++ii) {\n        merge(ii->first,ii->second);\n    }\n    for(vector<pair<int,int> >::iterator ii=qs.begin();ii!=qs.end();++ii) {\n        int u=ii->first,v=ii->second;\n        u=find(u),v=find(v);\n        if(u==v) {\n            ++ans[make_pair(ii->first,ii->second)];\n        }\n    }\n}\nvoid bao2(int co) {\n    int ps[N],tot=0;\n    for(vector<pair<int,int> >::iterator ii=e[co].begin();ii!=e[co].end();++ii) {\n        ps[++tot]=ii->first;\n        ps[++tot]=ii->second;\n    }\n    sort(ps+1,ps+tot+1);\n    tot=unique(ps+1,ps+tot+1)-ps-1;\n    rep(i,1,tot) f[ps[i]]=ps[i],sz[ps[i]]=1;\n    for(vector<pair<int,int> >::iterator ii=e[co].begin();ii!=e[co].end();++ii) {\n        merge(ii->first,ii->second);\n    }\n    rep(i,1,tot) {\n        rep(j,i+1,tot) {\n            bool flg=0;\n            int u=find(ps[i]),v=find(ps[j]);\n            if(u==v) flg=1;\n            if(flg&&ans.count(make_pair(ps[i],ps[j]))) {\n                ans[make_pair(ps[i],ps[j])]++;\n            }\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    rep(i,1,m) {\n        int u,v,c;\n        scanf(\"%d%d%d\",&u,&v,&c);\n        num[c]++;e[c].push_back(make_pair(min(u,v),max(u,v)));\n    }\n    scanf(\"%d\",&q);\n    int now=0;\n    rep(i,1,q) {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        if(!ans.count(make_pair(min(u,v),max(u,v)))) {\n            qs.push_back(make_pair(min(u,v),max(u,v)));\n            ++now;\n            lst[make_pair(min(u,v),max(u,v))]=now;\n            qto[i]=now;\n        }\n        else qto[i]=lst[make_pair(min(u,v),max(u,v))];\n        ans[make_pair(min(u,v),max(u,v))]=0;\n    }\n    rep(i,1,m) {\n        if(num[i]) {\n            if(num[i]>=sqrt(m)) {\n                bao1(i);\n            } else bao2(i);\n        }\n    }\n    rep(i,1,q) {\n        int u=qs[qto[i]-1].first,v=qs[qto[i]-1].second;\n        printf(\"%d\\n\",ans[make_pair(u,v)]);\n    }\n    return 0;\n}\n```",
        "postTime": 1595253949,
        "uid": 76156,
        "name": "henrytb",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF506D \u3010Mr. Kitayuta's Colorful Graph\u3011"
    },
    {
        "content": "\u9898\u76ee\u63cf\u8ff0\uff1a\u4e00\u4e2a$n$\u4e2a\u70b9$m$\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u989c\u8272\uff0c$q$\u6b21\u8be2\u95ee$u,v$\uff0c\u6c42\u6709\u591a\u5c11\u4e2a\u989c\u8272$c$\uff0c\u4f7f\u5f97\u4e00\u4e2a$u$\u5230$v$\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u7684\u989c\u8272\u90fd\u662f$c$\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$n,m,q,c\\le 10^5$\n\n\u6211\u4eec\u5148\u6765\u5199\u4e2a\u66b4\u529b\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u989c\u8272\u5f00\u5e76\u67e5\u96c6\uff0c\u7136\u540e\u5bf9\u4e8e$u$\u548c$v$\u4e2d\uff0c\u679a\u4e3e\u4e0e$u$\u76f8\u8fde\u7684\u6240\u6709\u989c\u8272\uff0c\u5e76\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u8fde\u901a\u3002\n\n\u53d1\u73b0\u5e76\u67e5\u96c6\u4e2d\u5b9e\u9645\u7528\u5230\u53ea\u6709$2m$\u4e2a\u72b6\u6001\uff08\u6bcf\u4e2a\u70b9\u5ea6\u6570\u4e4b\u548c\uff09\uff0c\u4e8e\u662f\u53ef\u4ee5\u5f00\u4e2aunordered_map\u6765\u538b\u7f29\u72b6\u6001\u3002\n\n\u53d1\u73b0\u679a\u4e3e\u4e0e$u$\u76f8\u8fde\u7684\u989c\u8272\u8ddf\u679a\u4e3e\u4e0e$v$\u76f8\u8fde\u7684\u989c\u8272\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u7684\u679a\u4e3e\u3002\n\n\u53d1\u73b0\u5982\u679c\u8001\u662f\u95ee\u4f60\u76f8\u540c\u7684$u$\u548c$v$\u662f\u4e0d\u7528\u91cd\u590d\u8ba1\u7b97\u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u52a0\u4e2a\u8bb0\u5fc6\u5316\u3002\n\n\u4e8e\u662f\u4f60\u5199\u51fa\u4e86\u8fd9\u6837\u7684\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define Rint register int\n#define fi first\nusing namespace std;\ntypedef pair<int, int> pii;\nconst int N = 100003;\nint n, m, q;\nunordered_map<int, int> fa[N], ans[N];\ninline int getfa(int x, int col){return fa[x][col] == x ? x : (fa[x][col] = getfa(fa[x][col], col));}\ninline void merge(int x, int y, int col){\n\tif(!fa[x].count(col)) fa[x][col] = x;\n\tif(!fa[y].count(col)) fa[y][col] = y;\n\tx = getfa(x, col); y = getfa(y, col);\n\tif(x != y) fa[x][col] = y;\n}\nint main(){\n\tscanf(\"%d%d\", &n, &m);\n\tfor(Rint i = 1;i <= m;i ++){\n\t\tint a, b, c;\n\t\tscanf(\"%d%d%d\", &a, &b, &c);\n\t\tmerge(a, b, c);\n\t}\n\tscanf(\"%d\", &q);\n\twhile(q --){\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tif(fa[u].size() > fa[v].size()) swap(u, v);\n\t\tif(ans[u].count(v)){printf(\"%d\\n\", ans[u][v]); continue;}\n\t\tint res = 0;\n\t\tfor(pii t : fa[u]) res += (fa[v].count(t.fi) && getfa(u, t.fi) == getfa(v, t.fi));\n\t\tprintf(\"%d\\n\", ans[u][v] = res);\n\t}\n}\n```\n\n\u7136\u540e\u4f60\u8fc7\u4e86\u3002\n\nWhy\uff1f\n\n\u6211\u4eec\u8bbe$deg_i$\u8868\u793a\u4e0e$i$\u76f8\u8fde\u7684\u989c\u8272\u6570\u3002\u4e8e\u662f\u4e00\u6b21\u8be2\u95ee$(u,v)$\u4f1a\u67e5\u8be2$O(\\min(deg_u,deg_v))$\u6b21\u5e76\u67e5\u96c6\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\n\n1. \u82e5$deg_i\\ge \\sqrt{2m}$\uff0c\u8fd9\u6837\u7684\u70b9\u4e0d\u8d85\u8fc7$\\sqrt{2m}$\u4e2a\uff08\u56e0\u4e3a\u603b\u548c\u662f$2m$\uff09\u3002\u90a3\u4e48\u81f3\u591a\u53ea\u7528\u67e5\u8be2$O((\\sum c_x)*\\sqrt{m})=O(m\\sqrt{m})$\u6b21\u5e76\u67e5\u96c6\u3002\n\n2. \u82e5$deg_i<\\sqrt{2m}$\uff0c\u81f3\u591a\u53ea\u7528\u67e5\u8be2$O(q\\sqrt{m})$\u6b21\u5e76\u67e5\u96c6\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O((m+q)\\sqrt{m}\\alpha(n))$\uff08\u6309\u79e9\u5408\u5e76\uff09\u6216\u8005$O((m+q)\\sqrt{m}\\log n)$\uff08\u4e0d\u6309\u79e9\u5408\u5e76\uff09\u3002\u5f53\u7136\u5f88\u591a\u65f6\u5019\u8fbe\u4e0d\u5230\u4e0a\u754c\uff0c\u6240\u4ee5\u5c31\u8fd9\u6837A\u6389\u4e86\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u5982\u679c\u4e0d\u4f1a\u6b63\u89e3\uff0c\u5199\u66b4\u529b\u5e76\u52a0\u4ee5\u4f18\u5316\u6709\u65f6\u662f\u975e\u5e38\u4f18\u79c0\u7684\u3002",
        "postTime": 1572859387,
        "uid": 68148,
        "name": "watermoon",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF506D \u3010Mr. Kitayuta's Colorful Graph\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fb9\u7684\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\u6839\u53f7\u5206\u6cbb\u3002                \n\n\u5982\u679c\u4e00\u79cd\u989c\u8272\u51fa\u73b0\u6b21\u6570 $\\leq \\sqrt m$ \u8bf4\u660e\u8fde\u51fa\u7684\u56fe\u7684\u5927\u5c0f\u5728 $O(4m)$ \u4ee5\u5185\uff0c\u5e76\u4e14\u5206\u6790\u603b\u70b9\u5bf9\u6570\u4f1a\u5728 $\\sqrt m$ \u5904\u53d6\u5f97\u6700\u5927\u503c\u4e3a $O(4m \\sqrt m)$\u3002    \n\n\u5bf9\u4e8e\u989c\u8272\u51fa\u73b0\u6b21\u6570 $> \\sqrt m$ \u7684\u989c\u8272\u53ea\u4f1a\u6709 $\\Theta(\\sqrt m)$ \u79cd\uff0c\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u8fde\u5b8c\u540e\u5bf9 $q$ \u4e2a\u8be2\u95ee\u90fd\u56de\u7b54\u4e00\u904d\u5373\u53ef\u3002              \n\n\u7528 map \u628a\u70b9\u5bf9\u7ef4\u62a4\u4e00\u4e0b\u5c31\u662f $O((m + q) \\sqrt m \\log n)$ \u4e86\uff0c\u4e2a\u4eba\u6bd4\u8f83\u61a8\u53ea\u4f1a\u6bcf\u6b21\u5e76\u67e5\u96c6\u8fde\u5b8c\u540e\u56de\u64a4\u6240\u6709\u5e76\u67e5\u96c6\u5c31\u5e26 $\\log n$ \u4e86\u3002\n\n\u8981\u5361\u5e38\u53ef\u4ee5\u8c03\u9608\u503c\uff0c\u6216\u8005\u628a map \u7684 pair \u64a4\u6210\u4e00\u4e2a\u6574\u5f62\u5565\u7684\u4f46\u662f\u6548\u679c\u90fd\u6ca1\u6709\u4e0d\u5361\u5e38\u7684\u597d\u3002\n\n```cpp\n/*\n\u8003\u8651\u5982\u4f55\u628an\\sqrtn\u4e2a(u,v)\u52a0\u5230\u76f8\u5e94\u7684(u,v)\u4e2d\u53bb\n\u4e0d\u7ba1\u4e86\u76f4\u63a5 map \u7b97  \nO(n \\sqrt n \\log n)\n*/\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 1e5 + 5;\nint n,m,q,maxcol;\nmap<pair<int,int>,int> mp;\npair<int,int> pr;\nstruct NNode\n{\n\tint u,v,w,p;\n\tNNode(){u = v = w = p = 0;}\n\tNNode(int U,int V,int W,int P){u = U , v = V , w = W , p = P;}\n}ques[Len],stk[Len],pst;\nint fa[Len],dep[Len],top,col[Len];\nvector<NNode> v[Len];\nvoid makeSet(int x){for(int i = 1 ; i <= x ; i ++) fa[i] = i , dep[i] = 1;}\nint findSet(int x){return fa[x] == x ? fa[x] : findSet(fa[x]);}\nvoid unionSet(int x,int y)\n{\n\tint u = findSet(x) , v = findSet(y);\n\tif(u == v) return;\n\tif(dep[u] < dep[v]) swap(u , v);\n\tstk[++ top] = NNode(u , v , fa[v] , dep[u]);\n\tfa[v] = u;\n\tdep[u] = max(dep[u] , dep[v] + 1);\n}\nvoid del(int x){fa[stk[top].v] = stk[top].w;dep[stk[top].u] = stk[top].p;}\nint w;\nvoid PP1(int Col)//\u5bf9\u4e8e\u5927\u4e8e\u7b49\u4e8e \\sqrt m \u7684\u8fb9 \n{\n\t//makeSet(n);\n\t//for(int i = 1 ; i <= n ; i ++) printf(\"???%d %d\\n\",fa[i],dep[i]);\n\ttop = 0;\n\tfor(int j = 0 ; j < v[Col].size() ; j ++) unionSet(v[Col][j].u , v[Col][j].v);\n\tfor(int i = 1 ; i <= q ; i ++) \n\t{\n\t\tif(findSet(ques[i].u) == findSet(ques[i].v)) \n\t\t{\n\t\t//\tprintf(\"%d %d %d\\n\",Col,ques[i].u,ques[i].v);\n\t\t\tques[i].w ++;\n\t\t}\n\t}\n\twhile(top) \n\t{\n\t\tdel(top);\n\t\ttop --;\n\t}\n} \nvector<int> FevPst;\nvoid PP2(int Col)\n{\n\t//makeSet(n);\n\t//for(int i = 1 ; i <= n ; i ++) printf(\"???%d %d\\n\",fa[i],dep[i]);\n\tFevPst.clear();\n\ttop = 0;\n\tfor(int j = 0 ; j < v[Col].size() ; j ++) \n\t{\n\t\tunionSet(v[Col][j].u , v[Col][j].v);\n\t\tFevPst.push_back(v[Col][j].u) , FevPst.push_back(v[Col][j].v);\n\t}\n\tsort(FevPst.begin() , FevPst.end());\n\tFevPst.erase(unique(FevPst.begin() , FevPst.end()) , FevPst.end());\n\tfor(int j = 0 ; j < FevPst.size() ; j ++)\n\t\tfor(int k = j + 1 ; k < FevPst.size() ; k ++)//\u4e00\u5b9a\u8981\u6ce8\u610f\u5c0f\u7684\u5728pair\u524d\u9762 \n\t\t{\n\t\t\tif(findSet(FevPst[j]) == findSet(FevPst[k]))\n\t\t\t{\n\t\t\t\tpr.first = FevPst[j] , pr.second = FevPst[k];\n\t\t\t\tmp[pr] ++;\n\t\t\t}\n\t\t}\n\twhile(top) \n\t{\n\t\tdel(top);\n\t\ttop --;\n\t}\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tscanf(\"%d %d %d\",&pst.u,&pst.v,&w);\n\t\tif(pst.u > pst.v) swap(pst.u , pst.v);\n\t\tmaxcol = max(maxcol , w);\n\t\tcol[w] ++;\n\t\tv[w].push_back(pst);\n\t}\n\tint t = sqrt(m);\n\tscanf(\"%d\",&q);\n\tfor(int i = 1 ; i <= q ; i ++) \n\t{\n\t\tscanf(\"%d %d\",&ques[i].u,&ques[i].v);\n\t\tif(ques[i].u > ques[i].v) swap(ques[i].u , ques[i].v);\n\t}\n\tmakeSet(n);\n\tfor(int i = 1 ; i <= maxcol ; i ++)\n\t{\n\t\tif(!col[i]) continue;\n\t\tif(col[i] >= t) PP1(i);\n\t\telse PP2(i);\n\t}\n\tfor(int i = 1 ; i <= q ; i ++)\n\t{\n\t\tpr.first = ques[i].u , pr.second = ques[i].v;\n\t\t//printf(\"###%d %d\\n\",i,ques[i].w);\n\t\tprintf(\"%d\\n\",ques[i].w + mp[pr]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1637150078,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF506D Mr. Kitayuta's Colorful Graph"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u989c\u8272\uff0c\u989c\u8272\u7f16\u53f7 $\\in [1,m]$\u3002\n\n\u518d\u7ed9\u5b9a $q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fa\u4e24\u4e2a\u4e0d\u540c\u7684\u70b9\u7684\u7f16\u53f7 $u,v$\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u989c\u8272\u6ee1\u8db3\uff1a\u53ea\u4fdd\u7559\u8fd9\u79cd\u989c\u8272\u7684\u8fb9\u65f6\uff0c$u$ \u548c $v$ \u8fde\u901a\u3002\n\n**\u6570\u636e\u8303\u56f4**\uff1a$2 \\le n \\le 10^5$\uff0c$1 \\le m,q \\le 10^5$\u3002\n\n## \u9898\u89e3\n\n\u8003\u8651\u989c\u8272\u7f16\u53f7\u4e3a $i$ \u7684\u6240\u6709\u8fb9\u7ec4\u6210\u7684\u56fe\uff0c\u8bbe\u6709 $c_i$ \u6761\u8fb9\u989c\u8272\u4e3a $i$\u3002\n\n\u9664\u53bb\u5b64\u7acb\u70b9\uff08\u6ca1\u6709\u8fde\u8fb9\u7684\u70b9\uff09\uff0c\u8fd9\u4e2a\u56fe\u4e2d\u81f3\u591a\u6709 $c_i$ \u4e2a\u8fde\u901a\u5757\u3002\n\n\u7531\u4e8e $\\sum{c_i}=m$\uff0c\u5219\u6bcf\u79cd\u989c\u8272\u7684\u56fe\u4e2d\u5927\u5c0f $\\ge 2$ \u7684\u8fde\u901a\u5757\u603b\u5171\u4e0d\u8d85\u8fc7 $m$ \u4e2a\u3002\n\n\u8bbe\u5927\u5c0f $\\ge 2$ \u7684\u8fde\u901a\u5757\u603b\u5171\u6709 $k$ \u4e2a\uff0c\u5176\u4e2d $1 \\le k \\le m$\u3002\n\n\u6211\u4eec\u5c06\u8fd9\u4e9b\u8fde\u901a\u5757\u4f9d\u6b21\u7f16\u53f7\u4e3a $1$ \u5230 $k$\uff0c\u5e76**\u7ed9\u8fde\u901a\u5757\u4e2d\u7684\u6bcf\u4e2a\u70b9\u6253\u4e0a\u8be5\u8fde\u901a\u5757\u7f16\u53f7\u7684\u6807\u8bb0**\u3002\n\n\u4f7f\u7528**\u5e76\u67e5\u96c6**\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u5305\u542b\u54ea\u4e9b\u6807\u8bb0\u3002\n\n------------\n\n\u6b64\u65f6\u4e00\u4e2a\u67e5\u8be2\u7684\u7b54\u6848\u5c31\u53d8\u4e3a\uff1a$u$ \u548c $v$ \u6709\u591a\u5c11\u79cd\u516c\u5171\u7684\u6807\u8bb0\u3002\n\n\u4f7f\u7528 **bitset** \u5373\u53ef\u505a\u5230 $O(\\dfrac{qm}{\\omega})$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u6b64\u65f6\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(nm)$\uff0c\u7f16\u8bd1\u90fd\u8fc7\u4e0d\u4e86\u3002\n\n\u7531\u4e8e bitset \u4e2d\u6709\u5f88\u591a\u4f4d\u7f6e\u662f\u7a7a\u7684\uff0c\u6211\u4eec\u8003\u8651**\u5206\u5757 + bitset**\uff0c\u5373\uff1a**\u5bf9\u4e8e\u67d0\u4e00\u5757\uff0c\u82e5\u5b58\u5728\u4f4d\u7f6e\u4e0d\u4e3a\u7a7a\uff0c\u5c31\u7528\u4e00\u4e2a bitset \u8bb0\u5f55\uff0c\u5426\u5219\u65e0\u9700\u8bb0\u5f55**\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u65f6\uff0c\u53ef\u7528\u4e00\u4e2a vector \u5b58\u50a8\u6240\u6709\u7684 bitset\uff0c\u6bcf\u4e00\u5757\u53ea\u8bb0\u5f55\u8be5\u5757\u5bf9\u5e94\u7684 bitset \u5728 vector \u4e2d\u7684\u4e0b\u6807\u5373\u53ef\uff08\u65e0\u9700\u8bb0\u5f55\u5219\u5c06\u7f16\u53f7\u7f6e\u4e3a $0$\uff09\u3002\n\n------------\n\n\u8bbe\u5757\u957f\u4e3a $B$\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m \\cdot \\dfrac{B}{\\omega}+q \\cdot \\dfrac{m}{B} \\cdot \\dfrac{B}{\\omega})$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\cdot \\dfrac{m}{B}+m \\cdot B)$\u3002\n\n\u53d6 $B=\\sqrt{m}$ \u53ef\u8fbe\u5230\u7406\u8bba\u6700\u597d\u7684\u65f6\u7a7a\u590d\u6742\u5ea6\uff0c\u5373\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\dfrac{qm}{\\omega})$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O((n+m)\\sqrt{m})$\u3002\n\nP.S.\n\n\u6709\u7684\u4eba\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c\u65f6\u95f4\u6bd4\u7a7a\u95f4\u66f4\u91cd\u8981\uff0c\u800c\u7406\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\u968f $B$ \u51cf\u5c0f\u800c\u51cf\u5c0f\uff0c\u6240\u4ee5\u5e94\u8be5\u5728\u7a7a\u95f4\u80fd\u591f\u63a5\u53d7\u7684\u524d\u63d0\u4e0b\uff0c\u51cf\u5c0f\u5757\u957f $B$ \u7684\u5927\u5c0f\u3002\n\n\u4f46\u4e8b\u5b9e\u4e0a\uff0c$B$ \u6839\u672c\u5c31\u4e0d\u80fd\u5c0f\u591a\u5c11\uff08\u4e0d\u7136\u7a7a\u95f4\u4f1a\u7206\uff09\uff0c\u518d\u52a0\u4e0a\u51cf\u5c0f $B$ \u5e76\u4e0d\u4f1a\u6539\u53d8\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u74f6\u9888\u90e8\u5206\uff0c\u5728\u5b9e\u9645\u8fd0\u884c\u4e2d\u6bd4\u53d6 $B=\\sqrt{m}$ \u8981\u6162\u3002\n\n## \u4ee3\u7801\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair<int,int> P;\nconst int max_m=1e5+5;\nvector<P> edge[max_m];\nconst int max_n=1e5+5;\nint col[max_n],vis[max_n],fa[max_n],cnt_col;\nint get_fa(int x)\n{\n\treturn fa[x]!=x?fa[x]=get_fa(fa[x]):x;\n}\ninline void merge(int x,int y)\n{\n\tx=get_fa(x),y=get_fa(y);\n\tif(x!=y)\n\t\tfa[x]=y;\n}\nvector<int> c[max_n];\nconst int B=316;\nbitset<B> now;\nvector<bitset<B> > b(1);\nconst int max_B=316+5;\nint id[max_n][max_B];\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tedge[c].push_back(P(a,b));\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tfa[i]=i;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tfor(vector<P>::iterator it=edge[i].begin();it!=edge[i].end();++it)\n\t\t\tmerge(it->first,it->second);\n\t\tfor(vector<P>::iterator it=edge[i].begin();it!=edge[i].end();++it)\n\t\t{\n\t\t\tint u=it->first;\n\t\t\tif(vis[u]!=i)\n\t\t\t{\n\t\t\t\tif(!col[get_fa(u)])\n\t\t\t\t\tcol[fa[u]]=++cnt_col;\n\t\t\t\tc[u].push_back(col[fa[u]]);\n\t\t\t\tvis[u]=i;\n\t\t\t}\n\t\t\tu=it->second;\n\t\t\tif(vis[u]!=i)\n\t\t\t{\n\t\t\t\tif(!col[get_fa(u)])\n\t\t\t\t\tcol[fa[u]]=++cnt_col;\n\t\t\t\tc[u].push_back(col[fa[u]]);\n\t\t\t\tvis[u]=i;\n\t\t\t}\n\t\t}\n\t\tfor(vector<P>::iterator it=edge[i].begin();it!=edge[i].end();++it)\n\t\t{\n\t\t\tint u=it->first;\n\t\t\tfa[u]=u,col[u]=0;\n\t\t\tu=it->second;\n\t\t\tfa[u]=u,col[u]=0;\n\t\t}\n\t}\n\tassert(cnt_col<=m);\n\tfor(int i=1;i<=n;++i)\n\t\tfor(int j=0;j<int(c[i].size());++j)\n\t\t{\n\t\t\tint k=(c[i][j]-1)/B;\n\t\t\tint L=k*B+1,R=(k+1)*B;\n\t\t\tnow.reset();\n\t\t\twhile(j<(int)c[i].size()&&c[i][j]>=L&&c[i][j]<=R)\n\t\t\t\tnow[c[i][j++]-L]=true;\n\t\t\tb.push_back(now);\n\t\t\tid[i][k]=(int)b.size()-1;\n\t\t\t--j;\n\t\t}\n\tint q;\n\tscanf(\"%d\",&q);\n\tint cnt_blocks=(n+B-1)/B;\n\twhile(q--)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tint ans=0;\n\t\tfor(int i=0;i<=cnt_blocks-1;++i)\n\t\t{\n\t\t\tif(id[u][i]&&id[v][i])\n\t\t\t\tans+=(b[id[u][i]]&b[id[v][i]]).count();\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1631536291,
        "uid": 145355,
        "name": "wsyhb",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF506D Mr. Kitayuta's Colorful Graph"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9b\u53e6\u5916\u4e00\u79cd\u4e0d\u540c\u7684\u505a\u6cd5\uff1a `bitset` +\u5c0f\u578b\u66b4\u529b\n\n\u60f3\u5230\u5bf9\u4e8e\u6bcf\u4e2a\u989c\u8272\u8fde\u901a\u5757\uff0c\u5982\u679c\u8be2\u95ee\u70b9\u540c\u65f6\u5c5e\u4e8e\u4e00\u4e2a\u989c\u8272\u8fde\u901a\u5757\u96c6\u5408\uff0c\u5219\u8d21\u732e+1\u3002\n\n\u60f3\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u627e\u5230\u5c5e\u4e8e\u7684\u8fde\u901a\u5757\uff0c\u7528 `bitset` \u5408\u5e76\u8ba1\u7b97\u8d21\u732e\u3002\n\n\u53d1\u73b0\u989c\u8272\u8fde\u901a\u5757\u4e2a\u6570\u53ef\u80fd\u8fbe\u5230 $m$ \u7ea7\u522b\u4e3a $10^5$ \uff0c `bitset` \u5f00\u4e0d\u4e0b\uff0c\u8003\u8651\u4f18\u5316\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\u662f\u5bf9\u4e8e\u6570\u91cf\u8f83\u5c0f\u7684\u8fde\u901a\u5757\u53ef\u4ee5\u66b4\u529b $O(n^2)$ \u4f7f\u7528 `map` \u50a8\u5b58\u3002\n\n\u8bbe\u8fde\u901a\u5757\u5927\u5c0f\u4e3a $s$ \n\n\u4e8e\u662f\uff0c\u5f53 $s\\le10$ \u7684\u65f6\u5019\u9009\u62e9 $O(n^2)$ \u5904\u7406\u51fa\u8282\u70b9\uff0c\u653e\u8fdb `map` \uff0c\u5269\u4e0b\u7684 $s\\ge 10^{5-1} = 10^4$ \u4f7f\u7528 `bitset` \u50a8\u5b58\uff0c\u590d\u6742\u5ea6 $10^2\\times \\log n+10^{5+4}/64$\u8f7b\u677e\u8dd1\u8fc7\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nchar gc(){static char buf[1<<16],*s,*t;if(s==t){t=(s=buf)+fread(buf,1,1<<16,stdin);if(s==t)return EOF;}return*s++;}\n//#define getchar gc\nll read()\n{\n\tchar c;\n\tll w=1;\n\twhile((c=getchar())>'9'||c<'0')if(c=='-')w=-1;\n\tll ans=c-'0';\n\twhile((c=getchar())>='0'&&c<='9')ans=(ans<<1)+(ans<<3)+c-'0';\n\treturn ans*w;\n}\nbitset<10005>bit[100005];\nmap<pair<int,int>,int>mp;//n^2\u90e8\u5206\uff0c\u603b\u6570\u4e0d\u591a \nconst int xx=1e5+5;\nint n,m,fa[xx],vis[xx];\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nstruct node{int a,b,c;bool operator<(const node&w)const{return c<w.c;};}e[xx];\nvector<int>v[xx];\nsigned main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++)e[i].a=read(),e[i].b=read(),e[i].c=read();\n\tsort(e+1,e+m+1);\n\tint tt=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint l=i,r=i;\n\t\twhile(r<m&&e[r+1].c==e[r].c)r++;\n\t\tvector<int>use;\n\t\tfor(int j=l;j<=r;j++)\n\t\t{\n\t\t\tif(!vis[e[j].a])use.push_back(e[j].a),vis[e[j].a]=1;\n\t\t\tif(!vis[e[j].b])use.push_back(e[j].b),vis[e[j].b]=1;\n\t\t}\n\t\tfor(auto it:use)vis[it]=0,fa[it]=it;\n\t\tfor(int j=l;j<=r;j++)fa[find(e[j].a)]=find(e[j].b);\n\t\tfor(auto it:use)v[find(it)].push_back(it);\n\t\tfor(auto it:use)\n\t\t{\n\t\t\tif(v[it].size())\n\t\t\t{\n\t\t\t\tif(v[it].size()<=10)\n\t\t\t\t{\n\t\t\t\t\tfor(auto a:v[it])\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(auto b:v[it])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(a>=b)continue;\n\t\t\t\t\t\t\tmp[make_pair(a,b)]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\ttt++;\n\t\t\t\t\tfor(auto a:v[it])bit[a][tt]=1;\n\t\t\t\t}\n\t\t\t\tv[it].clear();\n\t\t\t}\n\t\t}\n\t\ti=r;\n\t}\n\tint q=read();\n\twhile(q--)\n\t{\n\t\tint a=read(),b=read();\n\t\tif(a>b)swap(a,b);\n//\t\tcout<<mp[make_pair(a,b)]<<\"\\n\";\n\t\tcout<<mp[make_pair(a,b)]+(bit[a]&bit[b]).count()<<\"\\n\";\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1631530602,
        "uid": 371852,
        "name": "\u4e00\u5ff5\u4e4b\u95f4\u3001\u3001",
        "ccfLevel": 0,
        "title": "CF506D"
    },
    {
        "content": "\u601d\u8def\uff1a\u5e76\u67e5\u96c6\uff0c\u5bf9\u989c\u8272\u8fb9\u6570\u91c7\u7528\u5206\u5757\u601d\u60f3\uff0c map \u7edf\u8ba1\u7b54\u6848\u3002\n\n----\n\n\u9996\u5148\u5b58\u4e0b\u6240\u6709\u8fb9\uff0c\u6309\u7167\u989c\u8272\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u628a\u540c\u79cd\u989c\u8272\u7684\u8fb9\u653e\u5230\u4e00\u8d77\u3002\u540c\u65f6\u79bb\u7ebf\u8be2\u95ee\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6bcf\u6b21\u9009\u62e9\u4e00\u79cd\u989c\u8272\u7684\u8fb9\uff0c\u7edf\u8ba1\u8fd9\u79cd\u989c\u8272\u8fb9\u7684\u6570\u91cf `tot`\uff0c\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u3002\n\n1. $tot \\ge \\sqrt{n}$\n2. $tot < \\sqrt{n}$\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u989c\u8272\u6570\u91cf\u4e0d\u4f1a\u8d85\u8fc7 $\\sqrt{n}$ \u4e2a\u3002\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u989c\u8272\u8fb9\u76f4\u63a5\u505a\u5e76\u67e5\u96c6\u3002\u7136\u540e\u626b\u4e00\u904d\u8be2\u95ee\uff0c\u5982\u679c\u8be2\u95ee\u7684\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f 1 \u7684\u8d21\u732e\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u663e\u7136\u8fde\u901a\u5757\u5185\u7684\u70b9\u6570\u4e0d\u4f1a\u8d85\u8fc7 $n\\sqrt{n}$ \u4e2a\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u505a\u5b8c\u5e76\u67e5\u96c6\u4e4b\u540e\uff0c\u679a\u4e3e\u8be5\u79cd\u989c\u8272\u8fb9\u6240\u8fde\u63a5\u7684\u70b9\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u8fd9\u5bf9\u70b9\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u3002\n\n\u8fd9\u91cc\u5c31\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u70b9\u5bf9\u4e0a\u7684\u7b54\u6848\u600e\u4e48\u5bf9\u8be2\u95ee\u7684\u7b54\u6848\u4ea7\u751f\u8d21\u732e\uff1f\n\n\u53ef\u4ee5\u8003\u8651\u7528 `map` \u5b58\u50a8\uff0c\u5efa\u7acb\u4e00\u4e2a `pair<int,int>` \u5bf9 `int` \u7684\u6620\u5c04\uff0c\u8fd9\u6837\u53ef\u4ee5\u76f4\u63a5\u8bb0\u5f55\u70b9\u5bf9\u7684\u8d21\u732e\uff0c\u6700\u540e\u5728\u8f93\u51fa\u7b54\u6848\u7684\u65f6\u5019\u52a0\u8fdb\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6ce8\u610f\uff1a\n1. \u56e0\u4e3a `pair` \u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5728\u5b58\u50a8\u65f6\u53ef\u4ee5\u5c06\u70b9\u5bf9 $(x,y)$ \u5904\u7406\u6210 $x<y$ \u3002\n2. \u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u91cc\uff0c\u989c\u8272\u8fb9\u6240\u8fde\u63a5\u7684\u70b9\u53ef\u80fd\u6709\u91cd\u590d\uff0c\u9700\u8981\u53bb\u91cd\u3002\n\n\u5e76\u67e5\u96c6\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u548c\u6309\u79e9\u5408\u5e76\u4f18\u5316\uff0c\u590d\u6742\u5ea6 $O(\\alpha(n))$ \uff0c `map` \u590d\u6742\u5ea6 $O(\\log n)$ \uff0c \u5206\u5757\u590d\u6742\u5ea6 $O(n\\sqrt n)$ \uff0c\u7531\u4e8e\u5e76\u67e5\u96c6\u590d\u6742\u5ea6\u51e0\u4e4e\u53ef\u4ee5\u4e0d\u8ba1\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u7ea6\u4e3a $O(n\\sqrt n \\log n)$ \u3002\n\nCode:\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<map>\n#define mp make_pair\n#define pi pair<int,int>\nusing namespace std;\nconst int N=100005;\ninline int read() {\n\tint sum=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9') {\n\t\tif(ch=='-') w=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tsum=(sum<<3)+(sum<<1)+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn sum*w;\n}\nint n,m,q,qx[N],qy[N],f[N],d[N],ans[N],tmp[N],siz;\nstruct node {\n\tint x,y,z;\n\tbool operator < (const node &a) const {\n\t\treturn z<a.z;\n\t}\n} e[N];\nmap<pi,int> p;\nint find(int x) {//\u5e76\u67e5\u96c6\n\treturn f[x]==x?x:f[x]=find(f[x]);\n}\nvoid merge(int x,int y) {\n\tx=find(x),y=find(y);\n\tif(x!=y) {\n\t\tif(d[x]<d[y]) swap(x,y);\n\t\tf[y]=x;\n\t\tif(d[x]==d[y]) d[x]++;\n\t}\n}\nint main() {\n\tn=read(),m=read();\n\tfor(int i=1; i<=n; i++) f[i]=i;\n\tfor(int i=1; i<=m; i++) {\n\t\te[i].x=read(),e[i].y=read(),e[i].z=read();\n\t\tif(e[i].x>e[i].y) swap(e[i].x,e[i].y);//\u786e\u4fddx<y \n\t}\n\tsort(e+1,e+m+1);//\u6309\u989c\u8272\u6392\u5e8f \n\tq=read();\n\tfor(int i=1; i<=q; i++) {\n\t\tqx[i]=read(),qy[i]=read();\n\t\tif(qx[i]>qy[i]) swap(qx[i],qy[i]);//\u79bb\u7ebf\u8be2\u95ee \n\t}\n\tfor(int i=1,j=1; i<=m; i=++j) {\n\t\twhile(e[j].z==e[j+1].z) j++;//j\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u6761\u8be5\u989c\u8272\u7684\u8fb9 \n\t\tfor(int k=i; k<=j; k++) merge(e[k].x,e[k].y);//\u505a\u5e76\u67e5\u96c6 \n\t\tint tot=j-i+1; \n\t\tif(tot<sqrt(m)) {//\u5206\u5757 \n\t\t\tsiz=0;\n\t\t\tfor(int k=i; k<=j; k++) tmp[++siz]=e[k].x,tmp[++siz]=e[k].y;//\u8bb0\u5f55\u8be5\u989c\u8272\u8fb9\u6240\u8fde\u63a5\u7684\u70b9 \n\t\t\tsort(tmp+1,tmp+siz+1);\n\t\t\tsiz=unique(tmp+1,tmp+siz+1)-tmp-1;//\u53bb\u91cd \n\t\t\tfor(int x=1; x<siz; x++)\n\t\t\t\tfor(int y=x+1; y<=siz; y++)\n\t\t\t\t\tif(find(tmp[x])==find(tmp[y])) p[mp(tmp[x],tmp[y])]++;//\u5728\u540c\u4e00\u8fde\u901a\u5757\uff0c\u5f80\u70b9\u5bf9\u4e0a\u6dfb\u52a0\u7b54\u6848 \n\t\t} else for(int k=1; k<=q; k++) ans[k]+=(find(qx[k])==find(qy[k]));//\u76f4\u63a5\u626b\u8be2\u95ee\u7edf\u8ba1\u7b54\u6848 \n\t\tfor(int k=i; k<=j; k++) f[e[k].x]=e[k].x,f[e[k].y]=e[k].y,d[e[k].x]=d[e[k].y]=0;//\u6e05\u7a7a \n\t}\n\tfor(int i=1; i<=q; i++) {\n\t\tif(p.find(mp(qx[i],qy[i]))!=p.end()) ans[i]+=p[mp(qx[i],qy[i])];//\u7edf\u8ba1\u70b9\u5bf9\u5bf9\u7b54\u6848\u7684\u8d21\u732e \n\t\tprintf(\"%d\\n\",ans[i]);\n\t}\n\treturn 0;\n}\n```\n\n[\u5f31\u5316\u7248](https://www.luogu.com.cn/problem/CF505B)",
        "postTime": 1627956701,
        "uid": 189521,
        "name": "ahawzlc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF506D\u3010Mr. Kitayuta's Colorful Graph\u3011"
    },
    {
        "content": "\u5f88\u660e\u663e\uff0c\u8fd9\u4e2a\u9898\u5e94\u8be5\u4e0d\u540c\u989c\u8272\u5206\u5f00\u8003\u8651\u3002\n\n\u4e00\u79cd\u663e\u7136\u7684 $O(n^2)$ \u66b4\u529b\uff1a\u5bf9\u4e8e\u4e00\u79cd\u989c\u8272 $c$ \uff0c\u628a\u6240\u6709\u989c\u8272\u4e3a $c$ \u7684\u8fb9\u53d6\u51fa\u6765\uff0c\u4f1a\u5f62\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\uff1b\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u5f53\u4e2d\u7684\u70b9 $u,v$\uff0c$(u,v)$ \u7684\u7b54\u6848 $+1$\u3002\n\n\u8fd9\u79cd\u505a\u6cd5\u5ffd\u7565\u4e86\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u70b9\uff1a\u6709 $k$ \u6761\u8fb9\u7684\u8fde\u901a\u5757\u81f3\u591a\u53ea\u6709 $k+1$ \u4e2a\u70b9\uff0c\u6240\u4ee5\u6bcf\u4e00\u79cd\u989c\u8272\u5f62\u6210\u7684\u6709\u6548\u8fde\u901a\u5757\u7684\u5927\u5c0f\u603b\u548c\u6700\u591a\u662f $2\\times 10^5$\u3002\n\n\u6240\u6709\u8fde\u901a\u5757\u7684\u603b\u5927\u5c0f\u88ab\u63a7\u5236\u4e86\uff0c\u81ea\u7136\u60f3\u5230\u6839\u53f7\u5206\u6cbb\u3002\n\n* \u5982\u679c\u8fde\u901a\u5757\u7684\u5927\u5c0f $>\\sqrt{m}$ \uff0c\u90a3\u4e48\u8bb0\u5f55\u8fde\u901a\u5757\u4e2d\u7684\u6240\u6709\u70b9\u3002\n\n* \u5982\u679c\u8fde\u901a\u5757\u7684\u5927\u5c0f $\\le \\sqrt{m}$ \uff0c\u90a3\u4e48\u66b4\u529b\u66f4\u65b0\u70b9\u5bf9\u7684\u7b54\u6848\u3002\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\u7684\u5927\u8fde\u901a\u5757\u6700\u591a\u53ea\u6709 $\\sqrt{m}$ \u4e2a\uff0c\u56e0\u6b64\u9884\u5904\u7406\u590d\u6742\u5ea6 $O(m \\sqrt{m})$\uff1b\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u8bbe\u8fde\u901a\u5757\u5927\u5c0f\u4e3a $x$ \uff0c\u90a3\u4e48\u6709\u590d\u6742\u5ea6 $O(\\sum x) \\le O(m \\sqrt{m} \\cdot T)$\u3002\n\n\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u4f9d\u6b21\u626b\u4e00\u904d\u6240\u6709\u5927\u8fde\u901a\u5757\u4e2d $u,v$ \u662f\u5426\u5171\u5b58\uff0c\u518d\u8c03\u7528\u5c0f\u8fde\u901a\u5757\u5904\u7406\u597d\u7684\u7b54\u6848\u5c31\u884c\uff1b\u4e0d\u96be\u53d1\u73b0\u5355\u6b21\u67e5\u8be2\u590d\u6742\u5ea6 $O(\\sqrt{m} \\cdot T)$\u3002\n\n\u7efc\u4e0a\uff0c\u590d\u6742\u5ea6 $O(m \\sqrt{m} \\cdot T)$ \uff0c$T$ \u4e3a\u6570\u636e\u7ed3\u6784\u5355\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6\uff0c\u4f7f\u7528 `STL::unordered_map` \u5373\u53ef\u505a\u5230 $O(m \\sqrt{m})$ \uff0c\u7528 `STL::map` $O(m \\sqrt{m} \\log m)$ \u4e5f\u53ef\u4ee5\u3002",
        "postTime": 1654090220,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "CF506D \u9898\u89e3"
    }
]