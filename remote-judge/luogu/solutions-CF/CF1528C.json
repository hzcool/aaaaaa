[
    {
        "content": "## \u7ffb\u8bd1\n\n\u7ed9\u5b9a\u4e24\u68f5\u6811\uff0c\u8981\u6c42\u9009\u51fa\u4e00\u4e2a\u6781\u5927\u7684\u96c6\u5408 $P$\uff0c\u4f7f\u5f97 $P$ \u4e2d\u4efb\u610f\u4e24\u70b9\u90fd\u6ee1\u8db3\uff1a\n\n1. \u5728\u7b2c\u4e00\u68f5\u6811\u4e0a\uff0c\u4e24\u4e2a\u70b9\u4e2d\u4e00\u4e2a\u4e3a\u53e6\u4e00\u4e2a\u7684\u7956\u5148\uff1b\n2. \u5728\u7b2c\u4e8c\u68f5\u6811\u4e0a\uff0c\u4e24\u4e2a\u70b9\u4e92\u4e0d\u4e3a\u7956\u5148\u5173\u7cfb\u3002\n\n$n\\leq 3\\times 10^5$\u3002\n\n## \u9898\u89e3\n\n\u8003\u8651\u66f4\u4f18\u79c0\u7684\u9650\u5236\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u68f5\u6811\u7684\uff0c\u5bb9\u6613\u53d1\u73b0\u6211\u4eec\u4f1a\u9009\u4e00\u6761\u7956\u5148-\u5b50\u5b59\u94fe\u4e0a\u7684\u67d0\u4e9b\u70b9\u3002  \n\n\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff0c\u5bf9\u4e8e\u4efb\u610f $i$ \u90fd\u6ee1\u8db3 $fa_i\\leq i$\u3002\u8fd9\u63d0\u793a\u6211\u4eec\u82e5\u5c06\u7b2c\u4e8c\u68f5\u6811\u6620\u5c04\u5230 dfs \u5e8f\u4e0a\u53bb\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f $i<j$\uff0c$i$ \u6240\u7ba1\u8f96\u7684\u533a\u95f4\u548c $j$ \u6240\u7ba1\u8f96\u7684\u533a\u95f4 \u8981\u4e48\u662f $i$ \u5305\u542b $j$\uff0c\u8981\u4e48\u4e0d\u76f8\u4ea4\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u7b2c\u4e00\u68f5\u6811\u4e0a\u8d2a\u5fc3\u3002\u5982\u679c\u7956\u5148\u548c\u5f53\u524d\u70b9\u51b2\u7a81\u4e86\uff0c\u5c31\u628a\u5b83\u5220\u4e86\u9009\u5f53\u524d\u70b9\u3002\n\n\u9700\u8981\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u76f8\u4ea4\u5173\u7cfb\u3002\u53ef\u4ee5\u4f7f\u7528 `STL::set` \u6216\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\u3002\n\n\u70b9\u4e2a\u8d5e\u5427\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n//\u4f1f\u5927\u7684\u5bfc\u5e08\uff0c\u4f1f\u5927\u7684\u9886\u8896\uff0c\u4f1f\u5927\u7684\u7edf\u5e05\uff0c\u4f1f\u5927\u7684\u8235\u624b\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma\")\n#pragma GCC optimize(\"unroll-loops\")\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nchar __buf[1<<20],*__p1,*__p2;\n#define getchar() (__p1==__p2?(__p2=__buf+fread(__p1=__buf,1,1<<20,stdin),__p1==__p2?EOF:*__p1++):*__p1++)\nint read() {\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') s=(s<<3)+(s<<1)+(ch^48),ch=getchar();\n\treturn s*w;\n}\nconst int maxn = 3e5+10;\nint s[maxn<<2],tg[maxn<<2],ans,res;\nvoid Tag(int k,int vl) {s[k]=tg[k]=vl;}\nvoid psd(int k) {if(~tg[k]) Tag(k<<1,tg[k]),Tag(k<<1|1,tg[k]),tg[k]=-1;}\nvoid ins(int k,int l,int r,int L,int R,int vl) {\n\tif(l>R||L>r) return;\n\tif(L<=l&&r<=R) return Tag(k,vl);psd(k);int mid=l+r>>1;\n\tins(k<<1,l,mid,L,R,vl),ins(k<<1|1,mid+1,r,L,R,vl),s[k]=max(s[k<<1],s[k<<1|1]);\n}\nint ask(int k,int l,int r,int L,int R) {\n\tif(l>R||L>r) return 0;\n\tif(L<=l&&r<=R) return s[k];psd(k);int mid=l+r>>1;\n\treturn max(ask(k<<1,l,mid,L,R),ask(k<<1|1,mid+1,r,L,R));\n}\nint dfn[maxn],low[maxn],dfx,n;\nvector<int>G[maxn],C[maxn];\nvoid dfs(int x) {\n\tdfn[x]=++dfx;\n\tfor(auto y:C[x]) dfs(y);\n\tlow[x]=dfx;\n}\nvoid _dfs(int x) {\n\tint t=ask(1,1,n,dfn[x],low[x]);\n\tif(t) ins(1,1,n,dfn[t],low[t],0);else ++ans;\n\tins(1,1,n,dfn[x],low[x],x);\n\tres=max(res,ans);for(auto y:G[x]) _dfs(y);\n\tif(t) ins(1,1,n,dfn[t],low[t],t);else ins(1,1,n,dfn[x],low[x],0),--ans;\n}\nsigned main() {\n\tint T=read();\n\twhile(T--) {\n\t\tn=read(),dfx=0,res=0;\n\t\tfor(int i=1;i<=n;i++) G[i].clear(),C[i].clear();\n\t\tfor(int i=1;i<=n<<2;i++) tg[i]=-1,s[i]=0;\n\t\tfor(int i=2;i<=n;i++) G[read()].push_back(i);\n\t\tfor(int i=2;i<=n;i++) C[read()].push_back(i);\n\t\tdfs(1),_dfs(1),cout<<res<<'\\n';\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1622000585,
        "uid": 106182,
        "name": "KaisuoShutong",
        "ccfLevel": 0,
        "title": "CF1528C Trees of Tranquillity \u9898\u89e3"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u4f60\u4e24\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u8981\u4f60\u627e\u4e00\u4e2a\u6700\u5927\u7684\u70b9\u96c6 $S$\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f $u,v\\in S$\uff0c\u90fd\u6ee1\u8db3 $u,v$ \u5728\u7b2c\u4e00\u68f5\u6811\u4e0a\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u7956\u5148\uff0c\u5728\u7b2c\u4e8c\u68f5\u6811\u4e0a\u4e92\u76f8\u90fd\u6ca1\u6709\u7956\u5148\u5173\u7cfb\uff0c\u8f93\u51fa $S$ \u7684\u5927\u5c0f\u5373\u53ef\u3002\n\n### \u601d\u8def\n\n\u6211\u4eec\u53ef\u4ee5 dfs \u7b2c\u4e00\u68f5\u6811\uff0c\u641c\u5230\u8282\u70b9 $x$ \u7684\u65f6\u5019\u7ef4\u62a4 $x$ \u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u70b9\uff08\u5b83\u4eec\u5728\u7b2c\u4e00\u68f5\u6811\u4e0a\u4e00\u5b9a\u6ee1\u8db3\u4e24\u4e24\u6709\u7956\u5148\u5173\u7cfb\uff09\u3002\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u5728\u7b2c\u4e8c\u68f5\u6811\u4e0a\u7ef4\u62a4\u5728\u8fd9\u4e9b\u70b9\u6700\u591a\u9009\u591a\u5c11\u70b9\u4e24\u4e24\u6ca1\u6709\u7956\u5148\u5173\u7cfb\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u5f53\u524d\u8fd9\u4e9b\u70b9\u5728\u7b2c\u4e8c\u68f5\u6811\u4e0a\u6784\u6210\u7684\u865a\u6811\uff08\u53ea\u662f\u8fd9\u4e48\u8bf4\uff0c\u5e76\u4e0d\u662f\u771f\u7684\u8981\u5efa\u865a\u6811\uff09\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u865a\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5c31\u662f\u80fd\u9009\u51fa\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u70b9\u96c6\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u6811\u5256\u7ef4\u62a4\u7b2c\u4e8c\u68f5\u6811\uff0c\u6bcf\u52a0\u5165\u4e00\u4e2a\u70b9 $x$\uff0c\u5982\u679c $x$ \u6ca1\u88ab\u6807\u8bb0\uff0c\u5c31\u628a $x$ \u7684\u5b50\u6811\u4ee5\u53ca $x$ \u5230\u6839\u8282\u70b9\u8def\u5f84\u90fd\u6253\u4e0a\u6807\u8bb0\uff08\u6bd4\u5982\u5f02\u6216\u4e0a $x$\uff09\uff0c\u5982\u679c\u6807\u8bb0\u8fc7\u4e86\uff0c\u82e5\u6807\u8bb0\u7684\u70b9\u662f $x$ \u7684\u7956\u5148\uff0c\u5220\u6389\u5b83\u5e76\u52a0\u5165 $x$\uff0c\u5982\u679c $x$ \u662f\u6807\u8bb0\u7684\u70b9\u7684\u7956\u5148\uff0c\u90a3\u5c31\u4e0d\u52a0\u5165 $x$\u3002\n\ndfs \u7b2c\u4e00\u68f5\u6811\u65f6\uff0c\u8fd8\u8981\u5728\u641c\u5b8c\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\u56de\u6eaf\uff0c\u6240\u4ee5\u8bb0\u5f55\u4e0b\u6240\u6709\u64cd\u4f5c\uff0c\u56de\u6eaf\u65f6\u5728\u6811\u5256\u4e0a\u628a\u64cd\u4f5c\u64a4\u9500\u3002\n\n\u8fd9\u4e2a\u505a\u6cd5\u662f\u6211\u8d5b\u540e\u60f3\u5230\u7684\uff08wtcl \u8d5b\u65f6\u6ca1\u505a\u51fa\u6765\uff09\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^2 n)$\uff0c\u5e94\u8be5\u80fd\u8fc7\u3002\n\n\u540e\u6765\u770b\u4e86\u5b98\u65b9\u9898\u89e3\u7684\u505a\u6cd5\uff0c\u5b83\u7528 set \u7ef4\u62a4\u5f53\u524d\u7b54\u6848\u96c6\u5408\u91cc\u70b9\u7684\u6b27\u62c9\u5e8f\uff0c\u505a\u7684\u66f4\u7b80\u5355\u4e9b\u3002\n\n\u6b27\u62c9\u5e8f\uff08\u5bf9\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u4e00\u4e2a\u8fdb\u5165\u7684\u65f6\u95f4\u6233 $st$\uff0c\u548c\u79bb\u5f00\u7684\u65f6\u95f4\u6233 $ed$\uff09\u6709\u70b9\u50cf\u4e00\u4e2a\u62ec\u53f7\u5e8f\u5217\uff0c\u5373\u6bcf\u4e2a\u533a\u95f4 $[st_i,ed_i]$ \u90fd\u8981\u4e48\u662f\u5305\u542b\u5173\u7cfb\uff0c\u8981\u4e48\u4e0d\u76f8\u4ea4\u3002\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u7ef4\u62a4\u5f53\u524d\u6700\u591a\u591a\u5c11\u4e2a\u533a\u95f4\u4e24\u4e24\u4e0d\u76f8\u4ea4\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528 set \u7ef4\u62a4\u3002\u91c7\u7528\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u8def\uff0c\u52a0\u5165\u4e00\u4e2a\u533a\u95f4\u65f6\uff0c\u5982\u679c\u5b83\u88ab\u5176\u4ed6\u533a\u95f4\u5305\u542b\uff0c\u90a3\u4e48\u628a\u5305\u542b\u5b83\u7684\u533a\u95f4\u6362\u6210\u5b83\u4e00\u5b9a\u4e0d\u52a3\uff0c\u5982\u679c\u65b0\u52a0\u5165\u7684\u533a\u95f4\u5305\u542b\u4e86\u5176\u4ed6\u533a\u95f4\uff0c\u90a3\u4e48\u52a0\u5165\u5b83\u4e00\u5b9a\u4e0d\u4f18\uff0c\u4e0d\u52a0\u5165\u5b83\uff0c\u5982\u679c\u65b0\u52a0\u5165\u7684\u533a\u95f4\u4e0d\u4e0e\u5176\u4ed6\u533a\u95f4\u76f8\u4ea4\uff0c\u76f4\u63a5\u52a0\u5165\u5373\u53ef\u3002\n\n\u4f9d\u7136\u662f\u5728 dfs \u7b2c\u4e00\u68f5\u6811\u7684\u65f6\u5019\u7ef4\u62a4\u4e0a\u8ff0\u4e1c\u897f\uff0c\u641c\u5b8c\u4e00\u4e2a\u70b9\u65f6\u56de\u6eaf\u3002\u8fd9\u4e2a\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\u3002\n\n[\u4ee3\u7801\u5b9e\u73b0\uff08set\uff09](https://www.luogu.com.cn/paste/wb3pveco)",
        "postTime": 1622035096,
        "uid": 176569,
        "name": "iMya_nlgau",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1528C \u3010Trees of Tranquillity\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u4e00\u4e2a\u56e2\u7684\u6240\u6709\u70b9\u4e00\u5b9a\u5728\u7b2c\u4e00\u68f5\u6811\uff08\u7b80\u79f0\u6811 $A$\uff0c\u7b2c\u4e8c\u68f5\u7b80\u79f0\u6811 $B$\uff09\u4e0a\u7684\u4e00\u6761\u94fe\u4e0a\u3002\u6ce8\u610f\u5230\u6570\u636e\u8303\u56f4\u4e2d $1<=a_i<i$ \u548c $1<=b_i<i$ \u7684\u9650\u5236\uff0c$i$ \u5728 $A$ \u4e0a\u7684\u4e00\u4e2a\u7956\u5148\u5728 $B$ \u4e0a\u4e00\u5b9a\u4e0d\u662f $i$ \u7684\u5b50\u5b59\u3002\n\n\u9996\u5148\uff0c\u5b9a\u4e49\u7956\u5148\u94fe\u4e3a\u4e00\u4e2a\u96c6\u5408\uff0c\u5728\u8fd9\u4e2a\u96c6\u5408\u91cc\u4efb\u610f\u4e24\u4e2a\u70b9\u90fd\u662f\u7956\u5148\u6216\u5b50\u5b59\u7684\u5173\u7cfb\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u8003\u8651\u6811 $A$ \u4e0a\u7684\u6bcf\u4e00\u6761\u94fe\uff0c\u5bb9\u6613\u53d1\u73b0\u5b83\u53ef\u4ee5\u88ab\u62c6\u6210\u5728 $B$ \u4e0a\u7684\u82e5\u5e72\u4e2a\u7956\u5148\u94fe\uff0c\u800c\u7956\u5148\u94fe\u7684\u4e2a\u6570\u5c31\u662f\u8fd9\u6761\u94fe\u7684\u7b54\u6848\u3002\n\n\u5982\u679c\u8bb0\u5f55 $v_i$ \u4ee3\u8868\u6700\u63a5\u8fd1 $i$ \u7684\u5728 $A$ \u548c $B$ \u4e0a\u90fd\u662f $i$ \u7684\u7956\u5148\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u4e00\u4e2a\u7956\u5148\u94fe\u4e2d\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u662f\u8fd9\u6761\u94fe\u4e0a\u4e00\u4e2a\u70b9\u7684 $v$ \u503c\uff0c\u6240\u4ee5\u53c8\u7b49\u4ef7\u4e8e\u6c42\u6709\u591a\u5c11\u4e2a\u5143\u7d20 $u$\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u94fe\u4e0a\u4efb\u4f55\u4e00\u4e2a\u70b9\uff0c\u5b83\u7684 $v$ \u503c\u90fd\u4e0d\u662f $u$\u3002\n\n\u7ef4\u62a4 $v$ \u503c\u4e0d\u96be\uff0c\u76f4\u63a5 dfs \u4e00\u4e0b\u6811 $A$\uff0c\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u5c31\u628a\u5b83\u5728 $B$ \u4e0a\u7684\u5b50\u6811 dfs \u5e8f\uff08\u4e00\u6bb5\u533a\u95f4\uff09\u6807\u5728\u6811\u72b6\u6570\u7ec4\u91cc\uff0c\u5c31\u4e0d\u96be\u505a\u4e86\uff08\u53ef\u4ee5\u81ea\u5df1\u60f3\u4e00\u60f3\uff09\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint f1[300005],f2[300005],t1=0,t2=0,b1[300005],e1[300005],b2[300005],e2[300005];\nint n,f[300005],v[300005],ans=0;\nlong long c[300005];\nvector<int>g1[300005],g2[300005];\nvoid dfs1(int x)\n{\n\tb1[x]=e1[x]=++t1;\n\tfor(int i=0;i<g1[x].size();i++)\n\t{\n\t\tint cu=g1[x][i];\n\t\tdfs1(cu);\n\t\te1[x]=max(e1[x],e1[cu]);\n\t}\n}\nvoid dfs2(int x)\n{\n\tb2[x]=e2[x]=++t2;\n\tfor(int i=0;i<g2[x].size();i++)\n\t{\n\t\tint cu=g2[x][i];\n\t\tdfs2(cu);\n\t\te2[x]=max(e2[x],e2[cu]);\n\t}\n}\nvoid add(int x,int s)\n{\n\twhile(x<=n)\n\t{\n\t\tc[x]+=s;\n\t\tx+=x&-x;\n\t}\n}\nint query(int x)\n{\n\tint ans=0;\n\twhile(x)\n\t{\n\t\tans+=c[x];\n\t\tx-=x&-x;\n\t}\n\treturn ans;\n}\nvoid dfs3(int x,int dd)\n{\n\tint S1=query(b2[x]);\n\tif(S1)\n\t{\n\t\tadd(b2[S1],-S1);\n\t\tadd(e2[S1]+1,S1);\n\t}else dd++;\n\tans=max(ans,dd);\n\tadd(b2[x],x);\n\tadd(e2[x]+1,-x);\n\tfor(int i=0;i<g1[x].size();i++)\n\t{\n\t\tint cu=g1[x][i];\n\t\tdfs3(cu,dd);\n\t}\n\tadd(b2[x],-x);\n\tadd(e2[x]+1,x);\n\tif(S1)\n\t{\n\t\tadd(b2[S1],S1);\n\t\tadd(e2[S1]+1,-S1);\n\t}\n}\nint main()\n{\n\tint t;\n\tcin>>t;\n\twhile(t--)\n\t{\n\t\tcin>>n;\n\t\tfor(int i=1;i<=n;i++)g1[i].clear(),g2[i].clear(),c[i]=0;\n\t\tfor(int i=2;i<=n;i++)\n\t\t{\n\t\t\tint u;\n\t\t\tscanf(\"%d\",&u);\n\t\t\tf1[i]=u;\n\t\t\tg1[u].push_back(i);\n\t\t}\n\t\tfor(int i=2;i<=n;i++)\n\t\t{\n\t\t\tint u;\n\t\t\tscanf(\"%d\",&u);\n\t\t\tf2[i]=u;\n\t\t\tg2[u].push_back(i);\n\t\t}\n\t\tt1=0,t2=0;\n\t\tdfs1(1),dfs2(1);\n\t\tfor(int i=1;i<=n;i++)f[i]=1;\n\t\tans=0,dfs3(1,0);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1622098108,
        "uid": 107484,
        "name": "wmy_goes_to_thu",
        "ccfLevel": 8,
        "title": "CF1528C \u9898\u89e3"
    },
    {
        "content": "\u8d5b\u65f6\u88ab D \u7ed9\u5361\u4e86\u5f88\u4e45\uff0c\u8d5b\u540e\u4e5f\u6ca1\u60f3\u5230\u8d2a\u5fc3\u2026\u2026\u6211\u662f\u4e0d\u662f\u771f\u7684\u6ca1\u8f99\u4e86\u3002             \n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u6211\u4eec\u9009\u51fa\u6765\u7684\u70b9\u96c6\uff1a            \n\n- \u5728A\u6811\u4e0a\u6240\u6709\u70b9\u90fd\u4e92\u76f8\u6210\u7956\u5148\u5173\u7cfb\uff1b          \n\n- \u5728B\u6811\u4e0a\u6240\u6709\u70b9\u90fd\u4e0d\u4e92\u76f8\u6210\u7956\u5148\u5173\u7cfb\u3002               \n\n\u6211\u4eec\u8003\u8651 dfs A\u6811\u65f6\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u5408\u6cd5\u70b9\u96c6\uff0c\u5e76\u4e14\u6bcf\u6b21\u52a0\u70b9\u65f6\u5c3d\u53ef\u80fd\u7684\u52a0\u8fdb\u53bb\u3002            \n\n\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e48\u8d2a\u5fc3\u52a0\u70b9\u662f\u6700\u4f18\u7684\uff1a            \n\n- \u5728 dfs \u5230\u4e00\u4e2a\u65b0\u70b9\u65f6\uff0c\u6839\u636e\u7236\u4eb2\u5f97\u5230\u7684\u5408\u6cd5\u70b9\u96c6\u8003\u8651\u5f53\u524d\u70b9\u600e\u4e48\u52a0\u5165\uff1b           \n\n- \u5982\u679c\u5f53\u524d\u70b9\u5728 B\u6811\u4e2d\u4e0e\u4e00\u4e2a\u53ca\u4ee5\u4e0a\u7684\u70b9\u6784\u6210\u7956\u5148\u5173\u7cfb\uff0c\u90a3\u4e48\u76f4\u63a5\u628a\u8fd9\u4e2a\u70b9\u5f03\u4e86\u3002\u6b64\u65f6\u9009\u4e0a\u5b83\u8986\u76d6\u7684\u6240\u6709\u70b9\u660e\u663e\u6bd4\u9009\u4e0a\u5b83\u6ca1\u6709\u8986\u76d6\u7684\u6240\u6709\u70b9\u66f4\u4f18\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u5728B\u6811\u91cc\uff0c\u6211\u9009\u4f60\u8fd9\u4e2a\u70b9\u5728B\u6811\u7684\u5b50\u6811\u91cc\u7684\u70b9\u66f4\u4f18\uff1b\uff08\u6709\u70b9\u5c0f\u7ed5\uff09           \n\n- \u5982\u679c\u5f53\u524d\u70b9\u5728 B\u6811\u4e2d\u6ca1\u8986\u76d6\u70b9\uff0c\u6211\u4eec\u5c31\u770b\u5b83\u6709\u6ca1\u6709\u88ab\u5176\u5b83\u70b9\u8986\u76d6\u3002\u7531\u4e8e\u4e0a\u4e00\u4e2a\u72b6\u6001\u662f\u5408\u6cd5\u72b6\u6001\uff0c\u6240\u4ee5\u6b64\u65f6\u81f3\u591a\u53ea\u4f1a\u6709\u4e00\u4e2a\u70b9\u5728B\u6811\u4e0a\u8986\u76d6\u5b83\u3002\u90a3\u4e48\u8fd9\u4e2a\u8986\u76d6\u5b83\u7684\u70b9\u5fc5\u7136\u662f\u5b83\u5728 B\u6811\u4e0a\u7684\u7956\u5148\uff0c\u76f4\u63a5\u628a\u8fd9\u4e2a\u7956\u5148\u627e\u51fa\u6765\u6740\u6389\u5c31\u597d\u4e86\uff1b         \n\n- \u5426\u5219\uff0c\u5b83\u6ca1\u6709\u4efb\u4f55\u51b2\u7a81\uff0c\u76f4\u63a5\u52a0\u3002            \n\n\u8fd9\u4e2a\u6bcf\u4e00\u6b65\u90fd\u662f\u4e0d\u52a3\u7684\uff0c\u6240\u4ee5\u8d2a\u5fc3\u65e0\u8bef\u3002           \n\n\u5728 dfs \u56de\u6eaf\u7684\u65f6\u5019\u6211\u4eec\u76f4\u63a5\u5bf9\u5e94\u7740\u52a0\u8fdb\u6765\u7684\u65b9\u5f0f\u8fdb\u884c\u56de\u6eaf\u5c31\u597d\u4e86\uff0c\u7528\u7ebf\u6bb5\u6811\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$ \u3002         \n\n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;//\u5982\u679c\u6709\u4e00\u4e2a\u4eba\u662f\u6211\u7684\u7956\u5148\uff0c\u90a3\u4e48\u6211\u76f4\u63a5\u628a\u4f60\u6362\u6389\u5c31\u597d\u4e86\uff0c\u5426\u5219\u6211\u6362\u4f60\u663e\u7136\u66f4\u4e0d\u4f18 \nconst int Len = 3e5 + 5;\nint n,m,ans[Len << 2][2],tag[Len << 2][2],head[Len][2],cnt[2],id[Len],siz[Len],tot;\nstruct node\n{\n\tint next,to;\n}edge[Len << 1][2];\nvoid add(int from,int to,int sim)\n{\n\tedge[++ cnt[sim]][sim].to = to;\n\tedge[cnt[sim]][sim].next = head[from][sim];\n\thead[from][sim] = cnt[sim];\n}\nint ls(int x){return x << 1;}\nint rs(int x){return x << 1 | 1;}\nvoid push_up(int x){ans[x][1] = ans[ls(x)][1] + ans[rs(x)][1];}\nvoid build(int p,int l,int r)\n{\n\tans[p][0] = -1;ans[p][1] = tag[p][0] = tag[p][1] = 0;\n\tif(l == r) return;int mid = (l + r) >> 1;\n\tbuild(ls(p) , l , mid);\n\tbuild(rs(p) , mid + 1 , r);\n}\nvoid push_down(int p,int l,int r)\n{\n\tif(tag[p][0]) tag[ls(p)][0] = tag[rs(p)][0] = ans[ls(p)][0] = ans[rs(p)][0] = tag[p][0];\n\ttag[p][0] = 0;\n}\nvoid update1(int p,int l,int r,int nl,int nr,int CH)\n{\n\tif(nl <= l && nr >= r) \n\t{\n\t\tans[p][0] = CH;\n\t\ttag[p][0] = CH;\n\t\treturn;\n\t}\n\tpush_down(p , l , r);\n\tint mid = (l + r) >> 1;\n\tif(nl <= mid) update1(ls(p) , l , mid , nl , nr , CH);\n\tif(nr > mid) update1(rs(p) , mid + 1 , r , nl , nr , CH);\n}\nint query1(int p,int l,int r,int idx)\n{\n\tif(l == r) return max(ans[p][0] , 0);\n\tint mid = (l + r) >> 1;push_down(p , l , r);\n\tif(idx <= mid) return query1(ls(p) , l , mid , idx);\n\telse return query1(rs(p) , mid + 1 , r , idx); \n}\nvoid update2(int p,int l,int r,int idx,int w)\n{\n\tif(l == r){ans[p][1] += w ; return;}\n\tint mid = (l + r) >> 1;\n\tif(idx <= mid) update2(ls(p) , l , mid , idx , w);\n\telse update2(rs(p) , mid + 1 , r , idx , w);\n\tpush_up(p); \n}\nint query2(int p,int l,int r,int nl,int nr)\n{\n\tif(nl <= l && nr >= r) return ans[p][1];\n\tint mid = (l + r) >> 1 , res = 0;\n\tif(nl <= mid) res += query2(ls(p) , l , mid , nl , nr);\n\tif(nr > mid) res += query2(rs(p) , mid + 1 , r , nl , nr);\n\treturn res; \n}\nvoid dfs1(int x,int f)\n{\n\tid[x] = ++ tot;\n\tsiz[x] = 1;\n\tfor(int e = head[x][1] ; e ; e = edge[e][1].next)\n\t{\n\t\tint to = edge[e][1].to;\n\t\tif(to == f) continue;\n\t\tdfs1(to , x);\n\t\tsiz[x] += siz[to];\n\t}\n}\nint anss , Ans;\nvoid dfs2(int x,int f)\n{\n\tint f1 = 0 , Fd = 0;\n\tif(!query2(1 , 1 , n , id[x] , id[x] + siz[x] - 1)) //\u5982\u679c\u52a0\u8fdb\u53bb\u7684\u70b9\u4f1a\u8986\u76d6\u5176\u4ed6\u70b9\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u70b9\u5728B\u6811\u4e2d\u662f\u73b0\u5728\u5df2\u6709\u70b9\u7684\u7956\u5148\uff0c\u90a3\u4e48\u52a0\u8fdb\u53bb\u4e00\u5b9a\u4f1a\u66f4\u4e0d\u4f18 \n\t{\n\t\tf1 = 1;\n\t\tFd = query1(1 , 1 , n , id[x]);\n\t\tif(!Fd)//\u8bf4\u660e\u6b64\u65f6\u5e76\u6ca1\u6709\u8986\u76d6\u5230\u8fd9\u91cc\u6765\n\t\t{\n\t\t\tupdate1(1 , 1 , n , id[x] , id[x] + siz[x] - 1 , x);\n\t\t\tupdate2(1 , 1 , n , id[x] , 1);\t\n\t\t\tanss ++;\n\t\t} \n\t\telse//\u6b64\u65f6\u8bf4\u660e\u6211\u4eec\u65b0\u52a0\u8fdb\u53bb\u7684\u70b9\u88ab\u8986\u76d6\u4e86\uff0c\u6b64\u65f6\u8fd9\u4e2a\u5df2\u6709\u70b9\u4e00\u5b9a\u5728B\u6811\u4e2d\u662f\u5f53\u524d\u70b9\u7684\u7956\u5148\uff0c\u8003\u8651\u6362\u6389\u5b83 \n\t\t{\n\t\t\tupdate1(1 , 1 , n , id[Fd] , id[Fd] + siz[Fd] - 1 , -1);\n\t\t\tupdate2(1 , 1 , n , id[Fd] , -1);\n\t\t\tupdate1(1 , 1 , n , id[x] , id[x] + siz[x] - 1 , x);\n\t\t\tupdate2(1 , 1 , n , id[x] , 1);\t\n\t\t}\n\t}\n\tAns = max(Ans , anss);\n\tfor(int e = head[x][0] ; e ; e = edge[e][0].next)\n\t{\n\t\tint to = edge[e][0].to;\n\t\tif(to == f) continue;\n\t\tdfs2(to , x);\n\t}\n\tif(f1)\n\t{\n\t\tif(!Fd)\n\t\t{\n\t\t\tupdate1(1 , 1 , n , id[x] , id[x] + siz[x] - 1 , -1);\n\t\t\tupdate2(1 , 1 , n , id[x] , -1);\n\t\t\tanss --;\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tupdate1(1 , 1 , n , id[x] , id[x] + siz[x] - 1 , -1);//\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e3a\u4e86\u5b8c\u5168\u8fd8\u539f\uff0c\u6211\u4eec\u5f97\u5148\u8fd8\u539fx\u518d\u8fd8\u539fFd \n\t\t\tupdate2(1 , 1 , n , id[x] , -1);\n\t\t\tupdate1(1 , 1 , n , id[Fd] , id[Fd] + siz[Fd] - 1 , Fd);\n\t\t\tupdate2(1 , 1 , n , id[Fd] , 1);\t\t\n\t\t}\n\t}\n}\nsigned main()\n{\n\tint t;scanf(\"%d\",&t);\n\twhile(t --)\n\t{\n\t\tscanf(\"%d\",&n);\n\t\tcnt[0] = cnt[1] = tot = Ans = anss = 0;memset(head , 0 , sizeof head);\n\t\tfor(int i = 2 ; i <= n ; i ++)\n\t\t{\n\t\t\tint x;scanf(\"%d\",&x);\n\t\t\tadd(x , i , 0);\n\t\t}\n\t\tfor(int i = 2 ; i <= n ; i ++)\n\t\t{\n\t\t\tint x;scanf(\"%d\",&x);\n\t\t\tadd(x , i , 1);\n\t\t}\n\t\tbuild(1 , 1 , n);\n\t\tdfs1(1 , 0);\n\t\t//for(int i = 1 ; i <= n ; i ++) printf(\"%d %d\\n\",id[i],siz[i]);\n\t\tdfs2(1 , 0);\n\t\tprintf(\"%d\\n\",Ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1622044076,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1528C Trees of Tranquillity"
    },
    {
        "content": "### \u89e3\u9898\u601d\u8def\uff1a\n\n\u6811\u4e0a\u8d2a\u5fc3\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u8bb0\u8ff0\uff0c\u5728\u8fd9\u7bc7\u9898\u89e3\u91cc\uff1a\u7b2c\u4e00\u4e2a\u6811\uff0c\u4e5f\u5c31\u662f\u8981\u6c42\u6bcf\u4e00\u4e2a\u70b9\u90fd\u662f\u7956\u5148\u5173\u7cfb\u7684\u90a3\u4e00\u68f5\uff0c\u88ab\u8ba4\u4e3a\u662f\u5de6\u8fb9\u7684\u6811\uff0c\u7b2c\u4e8c\u68f5\u6811\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u4efb\u4f55\u7956\u5148\u5173\u7cfb\u7684\u90a3\u4e00\u68f5\uff0c\u88ab\u8ba4\u4e3a\u662f\u53f3\u8fb9\u7684\u6811\u3002~~\uff08\u5176\u5b9e\u662f\u5199\u5b8c\u4e86\u53d1\u73b0\u548c\u5b9a\u4e49\u4e0d\u4e00\u6837\u7136\u540e\u4e0d\u60f3\u6539\u4e86\uff09~~\n\n\u5bf9\u4e8e\u5de6\u8fb9\u6811\u4e0a\u7684\u8282\u70b9\uff0c\u4e0a\u9762\u7684\u6240\u6709\u70b9\u90fd\u662f\u5728\u4e00\u6761\u94fe\u4e0a\u7684\uff0c\u800c\u5728\u53f3\u8fb9\u7684\u6811\u4e0a\uff0c\u6240\u6709\u7684\u70b9\u4e00\u5b9a\u662f\u5206\u6563\u7684\u3002\n\n\u5c3d\u7ba1\u5728\u5de6\u5b50\u6811\u4e0a\u5224\u65ad\u540c\u94fe\u6bd4\u8f83\u5bb9\u6613\uff0c\u4f46\u5728\u53f3\u8fb9\u6811\u4e0a\u627e\u5206\u6563\u7684\u70b9\u5e76\u4e0d\u597d\u505a\uff0c\u6240\u4ee5\u8003\u8651\u5728\u5de6\u8fb9\u7684\u67d0\u4e00\u6761\u94fe\u4e0a\u627e\u70b9\u3002\n\n\u5bf9\u4e8e\u5de6\u8fb9\u7684\u67d0\u4e00\u4e2a\u70b9\uff0c\u82e5\u8fd9\u4e2a\u70b9\u5728\u53f3\u8fb9\u7684\u6811\u4e0a\u4e0d\u4ec5\u4e0d\u662f\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\uff0c\u4e5f\u4e0d\u662f\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u7956\u5148\uff0c\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u76f4\u63a5\u52a0\u3002\n\n\u800c\u5982\u679c\u8fd9\u4e2a\u70b9\u5305\u542b\u4e86\u81f3\u5c11\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5982\u679c\u628a\u8fd9\u4e9b\u8282\u70b9\u6362\u6210\u5f53\u524d\u8282\u70b9\u4e00\u5b9a\u4e0d\u4f18\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728\u4ef7\u503c\u6ca1\u6709\u589e\u52a0\u7684\u524d\u63d0\u4e0b\u8fd8\u5bfc\u81f4\u4e86\u5360\u7528\u7684\u4e0d\u53ef\u4f7f\u7528\u8282\u70b9\u66f4\u591a\u3002\n\n\u53cd\u4e4b\u82e5\u8fd9\u4e2a\u8282\u70b9\u88ab\u67d0\u4e00\u4e2a\u8282\u70b9\u5305\u542b\u4e86\uff0c\u90a3\u4e48\u628a\u8fd9\u4e00\u4e2a\u8282\u70b9\u6362\u4e0b\u6765\u4e00\u5b9a\u662f\u4f18\u7684\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728\u4ee3\u4ef7\u6ca1\u6709\u51cf\u5c0f\u7684\u524d\u63d0\u4e0b\u4f7f\u5f97\u5360\u7528\u7684\u4e0d\u53ef\u4f7f\u7528\u8282\u70b9\u53d8\u5c11\u4e86\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u5f53\u524d\u8282\u70b9\u548c\u5df2\u9009\u7684\u8282\u70b9\u7684\u5173\u7cfb\u6765\u505a\u3002\n\n---\n\n\u4f46\u662f\u7ef4\u62a4\u4f3c\u4e4e\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\u3002\u3002\u3002\n\n\u5982\u679c $O(n)$ \u5730\u679a\u4e3e\u5df2\u9009\u8282\u70b9\uff0c\u7136\u540e $O(logn)$ \u5730\u5224\u65ad\u662f\u5426\u5b58\u5728\u5305\u542b\u6216\u88ab\u5305\u542b\u5173\u7cfb\uff0c\u590d\u6742\u5ea6\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\u3002\n\n\u8003\u8651\u7528\u6b27\u62c9\u5e8f\u4f18\u5316\uff0c\u76f4\u63a5\u7528\u4e00\u4e2a set \u7ef4\u62a4\u5f53\u524d\u5df2\u9009\u8282\u70b9\u7684\u6b27\u62c9\u5e8f\u60c5\u51b5\uff0c\u7136\u540e\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u7528\u4e8c\u5206\u6cd5\u627e\u51fa\u76f8\u90bb\u7684\u533a\u95f4\uff0c\u5224\u65ad\u5373\u53ef\u3002\n\n\u5728\u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\uff0cset \u4e2d\u8bb0\u5f55\u7684\u5176\u5b9e\u5e76\u4e0d\u662f\u5b8c\u6574\u7684\u533a\u95f4\uff0c\u800c\u5e94\u5f53\u662f\u533a\u95f4\u7684\u5934\u548c\u8282\u70b9\u7f16\u53f7\u3002\u8fd9\u662f\u56e0\u4e3a\u5728 dfs \u56de\u6eaf\u65f6\u9700\u8981\u53d6\u6d88\u5f53\u524d\u8282\u70b9\u7684\u5f71\u54cd\uff0c\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u5c06\u67d0\u4e00\u4e2a\u8282\u70b9\u9876\u51fa\u53bb\u4e86\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u518d\u52a0\u56de\u6765\uff0c\u8fd9\u91cc\u9700\u8981\u7528\u5230\u8282\u70b9\u7684\u7f16\u53f7\u3002\n\n\n\n---\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<set>\nusing namespace std;\nconst int MAXN=300010;\nset<pair<int,int> > st;\nvector <int> T1[MAXN],T2[MAXN];\nint T,low[MAXN],dfn[MAXN],dfs_num,x,n,ans;\nint add(int now){\n\tset<pair<int,int> >::iterator it=st.lower_bound(make_pair(dfn[now],now));\n\tif(it!=st.end()&&low[it->second]<=low[now])return -2;\n\tif(it==st.begin())return -1;it--;\n\tint res=it->second;\n\tif(low[now]>low[res])return -1;\n\tst.erase(it);\n\treturn res;\n}\nvoid dfs1(int now){\n\tdfn[now]=++dfs_num;\n\tfor(int i=0;i<T2[now].size();i++)dfs1(T2[now][i]);\n\tlow[now]=dfs_num;\n}\nvoid dfs2(int now){\n\tint res=add(now);\n\tif(res!=-2)st.insert(make_pair(dfn[now],now));\n\tans=max(ans,(int)st.size());\n\tfor(int i=0;i<T1[now].size();i++)dfs2(T1[now][i]);\n\tif(res!=-2){\n\t\tst.erase(make_pair(dfn[now],now));\n\t\tif(res!=-1)st.insert(make_pair(dfn[res],res));\n\t}\n}\nint main(){\n\tscanf(\"%d\",&T);\n\twhile(T--){st.clear();\n\t\tmemset(low,0,sizeof(low));\n\t\tmemset(dfn,0,sizeof(dfn));\n\t\tdfs_num=0;ans=0;\n\t\tscanf(\"%d\",&n);\n\t\tfor(int i=1;i<=n;i++)T1[i].clear(),T2[i].clear();\n\t\tfor(int i=2;i<=n;i++)scanf(\"%d\",&x),T1[x].push_back(i);\n\t\tfor(int i=2;i<=n;i++)scanf(\"%d\",&x),T2[x].push_back(i);\n\t\tdfs1(1);dfs2(1);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1633423819,
        "uid": 223559,
        "name": "qxp101",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1528C Trees of Tranquillity"
    },
    {
        "content": "\u5728\u5b9e\u73b0\u96be\u5ea6\u4e0a\uff0c\u4e2a\u4eba\u66f4\u503e\u5411\u4e8e\u672c\u9898\u4f7f\u7528\u6b27\u62c9\u5e8f\u5217+ set \u53bb\u5b9e\u73b0\u3002\u672c\u9898\u89e3\u4e3b\u8981\u662f\u5bf9\u5b98\u65b9\u4ee3\u7801\u8fdb\u884c\u4e00\u4e2a\u5206\u6790\u3002\n\n\u8003\u8651\u6b27\u62c9\u5e8f\u5217\u7684\u6027\u8d28\u3002\u8be6\u7ec6\u6027\u8d28\u53ef\u4ee5\u53c2\u89c1\u672c\u6587\uff1a[\u6811\u7684\u5176\u4ed6\u77e5\u8bc6\u2014\u2014\u6b27\u62c9\u5e8f\u5217](https://www.luogu.com.cn/blog/walk-alone/shu-de-qi-ta-zhi-shi-ou-la-xu-lie)\u3002\u5176\u4e2d\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\uff0c\u5c31\u662f**\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4 $[st_1,ed_1],[st_2,ed_2]$\uff0c\u8fd9\u4fe9\u533a\u95f4\u8981\u4e48\u5b8c\u5168\u5305\u542b\u8981\u4e48\u5b8c\u5168\u4e0d\u76f8\u4ea4**\u3002\u5e76\u4e14\uff0c\u5982\u679c\u662f\u5305\u542b\u5173\u7cfb\u7684\u8bdd\uff0c\u4e00\u5b9a\u6709\u7956\u5148\u5173\u7cfb\u3002\u56e0\u800c\u6211\u4eec\u5229\u7528\u597d\u8fd9\u4e2a\u6027\u8d28\u3002\n\n\u8003\u8651\u6700\u540e\u6700\u5927\u56e2\u7684\u7ec4\u6210\u3002\u5b83\u9700\u8981\u8fd9\u91cc\u9762\u6bcf\u4e2a\u8282\u70b9\u90fd\u548c\u5176\u4ed6\u7684\u90fd\u6709\u8fb9\u76f8\u8fde\uff0c\u7531\u4e8e\u6709\u7b2c\u4e00\u4e2a\u6761\u4ef6\u2014\u2014Soroush \u6811\u4e0a\u6709\u7956\u5148\u5173\u7cfb\u7684\u5b58\u5728\uff0c\u8fd9\u4e9b\u70b9\u5fc5\u7136\u662f Soroush \u4e0a\u7684\u4e00\u6761\u94fe\u3002 \u4e3a\u4e86\u6784\u9020\u6700\u5927\u56e2\uff0c\u6700\u597d\u4f7f\u5f97\u521d\u59cb\u5f85\u9009\u62e9\u7684\u70b9\u5c3d\u53ef\u80fd\u7684\u591a\uff0c\u56e0\u800c\u662f Soroush \u6811\u4e0a\u7684\u4e00\u6761\u94fe\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u8fd9\u6761\u94fe\u4e0a\u6ee1\u8db3\u7b2c\u4e8c\u6761\u4ef6\u7684\u70b9\u96c6\u3002\u7531\u4e8e\u6b27\u62c9\u5e8f\u5217\u7684\u6027\u8d28\uff0c\u6211\u4eec\u5c06\u95ee\u9898\u7b49\u4ef7\u4e8e\u4ece\u8fd9\u4e9b\u70b9\u4e2d\u9009\u53d6\u4e00\u4e9b\uff0c\u4f7f\u5f97\u5b83\u4eec\u90fd\u4e0d\u76f8\u4ea4\uff08\u7b49\u4ef7\u4e8e\u4e0d\u5b58\u5728\u5305\u542b\u5173\u7cfb\uff09\u3002\u90a3\u4e48\u4e00\u4e2a\u8d2a\u5fc3\u7684\u57fa\u672c\u539f\u5219\uff1a\u80fd\u9009\u5c0f\u533a\u95f4\u5c31\u4e0d\u9009\u5927\u533a\u95f4\uff0c\u56e0\u800c\u6709\u5b98\u65b9\u9898\u89e3\u7684\u4e24\u6761\u539f\u5219\uff1a\n\n1. \u5982\u679c\u4e4b\u524d\u7684\u94fe\u4e0a\u65e0\u533a\u95f4\u8986\u76d6\u5f53\u524d\u8282\u70b9\u533a\u95f4\uff0c\u76f4\u63a5\u8d2a\u5fc3\u52a0\u5165\uff1b\n\n1. \u5982\u679c\u6709\uff0c\u4fdd\u7559\u5c0f\u533a\u95f4\uff0c\u5220\u53bb\u5927\u533a\u95f4\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5b9e\u73b0\u95ee\u9898\u3002\n\n\u9996\u5148\u662f\u6c42 Keshi \u6811\u7684\u6b27\u62c9\u5e8f\u5217\u3002\u7136\u540e\u53bb\u904d\u5386 Soroush \u6811\uff0c\u5728 set \u4e2d\u4ec5\u7ef4\u62a4\u5f53\u524d\u8282\u70b9\u5230\u6839\u8282\u70b9\u8fd9\u4e9b\u533a\u95f4\u4e2d\u5408\u6cd5\u7684\u90e8\u5206\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u3002\u6211\u4eec\u5c31\u4e0d\u4e00\u5b9a\u8981\u6c42\u4e00\u5b9a\u8981\u5230\u6839\u8282\u70b9\u53bb\u4e86\u3002\n\n\u9274\u4e8e CF \u7684\u5b98\u65b9\u9898\u89e3\u5b9e\u73b0\u7684\u8f83\u4e3a\u7b80\u6d01\uff0c\u56e0\u800c\u5728\u8fd9\u91cc\u6211\u5bf9 CF \u7684\u9898\u89e3\u4ee3\u7801\u8fdb\u884c\u4e00\u4e2a\u8be6\u7ec6\u7684\u8bc4\u8ff0\u3002\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u5927\u4f53\u7684\u6d41\u7a0b\uff1a\n\n\u8fd9\u91cc\u662f\u5224\u65ad\u4e00\u4e2a\u70b9\u6240\u5bf9\u5e94\u7684\u6b27\u62c9\u5e8f\u5217\u533a\u95f4\u662f\u5426\u5728 set \u4e2d\u6709\u91cd\u53e0\u90e8\u5206\uff0c\u4ee5\u53ca\u91cd\u53e0\u60c5\u51b5\uff0c\u6765\u5224\u65ad\u662f\u5426\u8981\u52a0\u70b9\u3002\n\n```cpp\nint judge(int place)\n{\n    auto iter = exist.lower_bound(make_pair(st[place], place));\n    //\u9996\u5148\u662f\u627e\u5230\u8be5\u70b9\u9644\u8fd1\u7684\u51e0\u4e2a\u533a\u95f4\u3002\u6ce8\u610f\u8fd9\u91cc\u6211\u4eec\u5728set\u4e2d\u7ef4\u62a4\u7684\u662f\u5b83\u7684\u8d77\u59cb\u70b9\u548c\u5f53\u524d\u8282\u70b9\u7f16\u53f7\u3002\u53ef\u4ee5\u5b58\u50a8\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u7684\u6b27\u62c9\u533a\u95f4\uff08\u5373\u5f00\u59cb\u548c\u7ed3\u675f\uff09\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u4fbf\u4e8e\u540e\u9762\u7684\u5904\u7406\u3002\n    //\u8fd9\u91cc\u4f7f\u7528\u8d77\u59cb\u70b9\u548c\u5f53\u524d\u8282\u70b9\u7f16\u53f7\u7684\u53e6\u4e00\u4e2a\u597d\u5904\u5728\u4e8e\uff0c\u5728set\u4e2d\u6392\u5e8f\u65f6\u662f\u4f18\u5148\u6309\u7167\u8d77\u59cb\u70b9\u5728\u6392\u5e8f\uff0c\u56e0\u800c\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u8fd9\u6837\u7684\u533a\u95f4\u3002\n    //iter\u73b0\u5728\u6307\u5411\u7684\u662f\u7b2c\u4e00\u4e2a\u5927\u4e8e\u5f53\u524d\u70b9\u5bf9\u5e94\u533a\u95f4\u7684\u533a\u95f4\u3002\u7531\u4e8e\u6b27\u62c9\u5e8f\u5217\u7684\u6027\u8d28\uff0c\u4e24\u4e2a\u70b9\u5bf9\u5e94\u7684\u6b27\u62c9\u5e8f\u5217\u8d77\u59cb\u70b9\u548c\u7ec8\u6b62\u70b9\u5fc5\u4e0d\u76f8\u540c\u3002\n    //\u56e0\u800c\u73b0\u5728\u7684\u60c5\u51b5\u662f iter\u5bf9\u5e94\u7684\u70b9\u7684\u8d77\u59cb\u70b9start>st[place]\n    if(iter!=exist.end() && ed[iter->second]<=ed[place])\n    //\u5982\u679c\u5f53\u524d\u70b9\u7684\u7ec8\u6b62\u70b9\u8fd8\u5728place\u7ec8\u6b62\u70b9\u524d\uff0c\u90a3\u4e48\u8bc1\u660e\u8fd9\u662f\u4e2a\u88abplace\u5305\u7edc\u7684\u4e00\u4e2a\u5c0f\u533a\u95f4\uff0cplace\u5c31\u4e0d\u5fc5\u52a0\u5165set\u4e86\u3002\n        return -2;\n    //\u7279\u4f9b\u4e8eset\u4e3a\u7a7a\u3002\n    if(iter==exist.begin())\n        return -1;\n    iter--;\n    //\u8fd4\u56de-1\u7684\u542b\u4e49\uff1a\u5f53\u524dset\u4e2d\u65e0\u5305\u7edc\u533a\u95f4\u3002\n    //\u8fd4\u56de-2\u7684\u542b\u4e49\uff1aset\u4e2d\u5df2\u6709\u8f83\u5c0f\u533a\u95f4\uff0c\u5f53\u524d\u70b9\u4e0d\u5fc5\u52a0\u5165\n    if(ed[iter->second]<ed[place])\n    //\u73b0\u5728\u7684\u8d77\u59cb\u70b9\u4e00\u5b9a\u5728st[place]\u524d\uff0c\u90a3\u4e48\u5982\u679c\u5f53\u524d\u7ec8\u70b9\u4e5f\u5728place\u524d\uff0c\u8bc1\u660e\u65e0\u5305\u7edc\u3002\n        return -1;\n    exist.erase(iter);\n    //iter\u6307\u5411\u7684\u533a\u95f4\u4e3a\u5927\u533a\u95f4\uff0c\u4f46\u662f\u8fd9\u4e2a\u8001\u533a\u95f4\u8f88\u5206\u9ad8\uff0c\u56e0\u800c\u5728place\u5b50\u6811\u5904\u7406\u5b8c\u540e\u8981\u8865\u56de\u6765\uff0c\u56e0\u800c\u9700\u8981\u8bb0\u5f55\u3002\u4f46\u662f\u5728place\u5b50\u6811\u4e0b\uff0c\u8fd9\u4e2a\u5927\u533a\u95f4\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u800c\u8981\u5220\u6389\u3002\n    return iter->second;\n}\n```\n\n\u8003\u8651 judge \u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u6709\u5982\u4e0b\u7684\u4e3b\u8981\u9012\u5f52\u51fd\u6570\uff1a\n\n```cpp\nvoid solve(int place)\n{\n    int res = judge(place);\n    if(res!=-2)\n    //\u53ea\u8981\u4e0d\u662f-2\u7684\u4e0d\u5fc5\u52a0\u5165\uff0c\u5728\u5904\u7406place\u5b50\u6811\u7684\u65f6\u5019\u90fd\u9700\u8981\u52a0\u5165\u3002\n        exist.insert(make_pair(st[place], place));\n    ans = max(ans, (int)exist.size());\n    for (int i = headers[0][place]; i; i = que[0][i].next)\n        solve(que[0][i].to);\n    if(res!=-2)//\u56de\u6eaf\u5de5\u4f5c\n    {\n        exist.erase(make_pair(st[place], place));\n        //\u9996\u5f53\u5176\u51b2\uff0c\u5b50\u6811\u904d\u5386\u5b8c\u5b83\u4e5f\u4e0d\u5728\u6b63\u5728\u6c42\u7684\u94fe\u4e0a\u4e86\uff0c\u5220\u6389\n        if (res != -1)//\u6709\u8001\u7684\u3001\u5305\u7edc\u5927\u533a\u95f4\uff0c\u56e0\u800c\u9700\u8981\u6062\u590d\n            exist.insert(make_pair(st[res], res));\n    }\n}\n```\n\n\u5176\u4f59\u4ee3\u7801\u5b9e\u73b0\u5c31\u975e\u5e38\u7b80\u5355\u4e86\u3002",
        "postTime": 1625808999,
        "uid": 80026,
        "name": "walk_alone",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 CF1528C Trees of Tranquillity"
    },
    {
        "content": "### \u9996\u5148\u6211\u4eec\u6574\u7406\u601d\u8def\n\u663e\u7136\u70b9\u96c6\u5728\u6811 $A$ \u4e0a\u662f\u5728\u4e00\u6761\u94fe\u4e0a\uff0c\u90a3\u6211\u4eec\u8003\u8651\u5728 $A$ \u4e0a $dfs$ \uff0c\u6df1\u641c\u65f6\u7edf\u8ba1\n\n\u90a3\u6211\u4eec\u5355\u5355\u8003\u8651\u5728\u4e00\u6761\u94fe\u4e0a\u6dfb\u52a0\u7684\u60c5\u51b5\n\n\u9996\u5148\u4ee4\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u989c\u8272 $c_i$ \uff0c\u521d\u59cb\u65f6\u90fd\u662f $0$\n\n\u90a3\u6211\u4eec\u6709\u4e00\u4e2a\u5927\u81f4\u7684\u601d\u8def\uff0c\u641c\u5230 $x$ \u70b9\u65f6\uff0c\u5982\u679c\u989c\u8272\u4e3a $0$ \uff0c\u5c31\u5360\u9886\uff0c\u518d\u628a $x$ \u5230\u6839\u4e0e $x$ \u5b50\u6811\u90fd\u6807\u8bb0\u4e00\u4e0b\uff0c\u518d\u641c\u65f6\u5c31\u53ef\u4ee5\u5904\u7406\u51b2\u7a81\n\n\u8003\u8651\u51b2\u7a81\uff0c\u5982\u679c\u5728$B$\u4e0a\u6709\u4e24\u4e2a\u4f4d\u7f6e $x,y$ \uff0c\u4ee4 $x$ \u662f $y$ \u7684\u7956\u5b97\u3002\u90a3\u4e48 $y$ \u6807\u8bb0\u7684\u989c\u8272\u4e00\u5b9a\u6bd4 $x$ \u6807\u8bb0\u7684\u989c\u8272\u591a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7ylylylr.png)\n\n\u6240\u4ee5\u6211\u4eec\u5c3d\u53ef\u80fd\u5730\u4fdd\u7559\u4e0b\u9762\u7684\u8282\u70b9\n\n\u4e8e\u662f\u6211\u4eec\u8fd9\u4e48\u67d3\u8272\uff0c\u628a $x$ \u5230\u6839\u7684\u989c\u8272\u90fd\u6d82\u6210 $-1$ \uff0c\u628a $x$ \u5b50\u6811\u90fd\u67d3\u4e0a $x$ \u7684\u989c\u8272\u3002\n\n$Case1$ \uff1a\u5f53\u6211\u4eec\u641c\u5230\u989c\u8272\u4e3a $-1$ \u7684\u70b9\u65f6\uff0c\u4e0d\u7ba1\u4e86\uff0c\u56e0\u4e3a$B$\u6811\u4e0b\u9762\u6709\u66f4\u6df1\u7684\u70b9\n\n$Case2$ \uff1a\u5f53\u6211\u4eec\u641c\u5230\u989c\u8272\u4e3a $0$ \u7684\u70b9\u65f6\uff0c\u5360\u9886\u8fd9\u4e2a\u70b9\u5e76\u6d82\u8272\n\n$Case3$ \uff1a\u5f53\u6211\u4eec\u641c\u5230\u5176\u4ed6\u989c\u8272\u4e3a $y$ \u7684 $x$ \u70b9\u65f6\uff0c\u989c\u8272\u5c31\u4ee3\u8868\u4ec0\u4e48\u70b9\u5728 $x$ \u4e0a\u9762\uff0c\u4e8e\u662f\u628a\u989c\u8272\u4ee3\u8868\u7684 $y$ \u70b9\u548c\u5b83\u67d3\u51fa\u6765\u7684\u989c\u8272\u5220\u53bb\uff0c\u589e\u52a0 $x$ \uff0c\u6d82\u5b50\u6811\uff0c\u6d82\u5230\u6839\n\n\u7136\u540e\u8003\u8651\u56de\u6eaf\uff0c\u56e0\u4e3a\u56de\u6eaf\u65f6\u8981\u6d88\u9664\u5f71\u54cd\uff0c\u5b9a\u4e49\u4e00\u4e2a$eat$\u6570\u7ec4\uff0c\u5f53\u6211\u4eec\u8fdb\u5165 $Case3$ \u65f6\uff0c\u8bb0\u5f55 $eat_x=y$ \uff0c\u4ee3\u8868 $x$ \u628a $y$ \u5403\u4e86\uff0c\u56de\u6eaf\u65f6\u628a $y$ \u589e\u52a0\u56de\u6765\uff0c\u5f85\u9009\u96c6\u5408\u5927\u5c0f\u52a0 $1$ \u5373\u53ef\uff08\u4f46\u6709\u53ef\u80fd $eat_x=0$ \uff0c\u5c31\u4ee3\u8868 $x$ \u6ca1\u5403\uff0c\u5c31\u4e0d\u7528\u52a0\u56de\u6765\uff09\u7136\u540e\u518d\u628a $x$ \u548c\u5b83\u67d3\u51fa\u6765\u7684\u989c\u8272\u5220\u53bb\uff0c\u5f85\u9009\u96c6\u5408\u5927\u5c0f\u51cf$1$\n### \u5904\u7406\u67d3\u8272\u95ee\u9898\n\u6811\u4e0a\u5230\u6839\uff0c\u5b50\u6811\u533a\u95f4\u64cd\u4f5c\uff0c\u800c\u4e14\u662f\u533a\u95f4\u63a8\u5e73\n\n\u73c2\u6735\u8389\u6811\uff01\uff01\uff01\uff01\n\n\u7136\u800c\u8fc7\u4e0d\u53bb\uff0c\u8349\uff0c\u952e\u76d8\u4e0a\u7684\u62f3\u5934\u786c\u4e86\n### \u5404\u79cd\u5751\n\u591a\u6d4b\u4e14 $1\\le t\\le3*10^5$ \uff0c\u4f7f\u7528 $memset$ \u89c1\u7956\u5b97\n\n\u7ebf\u6bb5\u6811\u67d3\u8272\u65f6 $tag$ \u4e0d\u80fd\u9ed8\u8ba4\u4e3a $0$ \uff0c\u56e0\u4e3a\u67d3\u8272\u53ef\u80fd\u4f1a\u523b\u610f\u67d3\u6210 $0$ \uff0c\u4e5f\u4e0d\u80fd\u662f $-1$ \uff0c\u4e8e\u662f\u6211\u628a $tag$ \u523b\u610f\u8bbe\u6210\u4e86 $-114514$ \uff08\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define debug(x) cerr<<#x<<' '<<x<<endl\n#ifndef ONLINE_JUDGE\n\t#define pia getchar\n#else\n\t#define pia nc\n#endif\nchar nc(){\n  \tstatic char buf[1<<25],*p=buf,*q=buf;\n  \tif(p==q&&(q=(p=buf)+fread(buf,1,1<<25,stdin),p==q))return EOF;\n  \treturn *p++;\n}\ntemplate<class T>void rd(T&x){\n\tshort f=1;x=0;\n\tchar ch=pia();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-')f=-1;\n\t\tch=pia();\n\t}while(isdigit(ch)){\n\t\tx=(x<<1)+(x<<3)+(ch^48);\n\t\tch=pia();\n\t}x*=f;\n}\ntemplate<class T>void wr(T x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>=10)wr(x/10);\n\tputchar(x%10+48);\n}\n\n#define maxn 300010\nint n,x,T;\nstruct G{\n\tint head[maxn],Next[maxn<<1],ver[maxn<<1],tot;\n\tinline void add(int x,int y){\n\t\tver[++tot]=y;\n\t\tNext[tot]=head[x];\n\t\thead[x]=tot;\n\t}\t\n\tinline void clear(){\n\t\ttot=0;\n\t//\tmemset(head,0,sizeof (n+1)*sizeof(head));\n\t}\n}A,B;\nint dep[maxn],fa[maxn],son[maxn],siz[maxn];\nint dfn[maxn],top[maxn],cnt;\ninline void dfs1(int x){\n\tsiz[x]=1;\n\tfor(int i=B.head[x];i;i=B.Next[i]){\n\t\tint y=B.ver[i];\n\t\tif(dep[y])continue;\n\t\tdep[y]=dep[x]+1;\n\t\tfa[y]=x;\n\t\tdfs1(y);\n\t\tsiz[x]+=siz[y];\n\t\tif(siz[y]>siz[son[x]])son[x]=y;\n\t}\n}\ninline void dfs2(int x,int t){\n\tdfn[x]=++cnt;\n\ttop[x]=t;\n\tif(!son[x])return;\n\tdfs2(son[x],t);\n\tfor(int i=B.head[x];i;i=B.Next[i])\n\tif(B.ver[i]!=fa[x]&&B.ver[i]!=son[x])dfs2(B.ver[i],B.ver[i]);\n}/*\nstruct point{\n\tint l,r;\n\tmutable int v;\n\tpoint(int ll,int rr,int vv):l(ll),r(rr),v(vv){}\n\tinline bool operator<(point x)const{return l<x.l;}\n};\n#define Iter set<point>::iterator\nstruct ST{\n\tset<point>s;\n\tvoid init(){\n\t\ts.clear();\n\t\ts.insert(point(1,n,0));\n\t}\n\tinline Iter split(int x){\n\t\tif(x>n)return s.end();\n\t\tIter it=--s.upper_bound(point(x,0,0));\n\t\tif(it->l==x)return it;\n\t\tint l=it->l,r=it->r,v=it->v;\n\t\ts.erase(it),s.insert(point(l,x-1,v));\n\t\treturn s.insert(point(x,r,v)).first;\n\t}\n\tinline void assign(int l,int r,int v){\n\t\tIter itr=split(r+1),itl=split(l);\n\t\ts.erase(itl,itr);\n\t\ts.insert(point(l,r,v));\n\t}\n}st;*/\nstruct ST{\n\tstruct TR{\n\t\tint l,r,x,tag;\n\t}tree[maxn<<2];\n\tvoid build(int x,int l,int r){\n\t\ttree[x]=(TR){l,r,0,-114514};\n\t\tint mid=(tree[x].l+tree[x].r)>>1;\n\t\tif(l==r)return;\n\t\tbuild(x<<1,l,mid),build(x<<1|1,mid+1,r);\n\t}\n\tvoid pushdown(int x){\n\t\tif(tree[x].tag!=-114514){\n\t\t\ttree[x<<1].tag=tree[x<<1|1].tag=tree[x<<1].x=tree[x<<1|1].x=tree[x].tag;\n\t\t\ttree[x].tag=-114514;\n\t\t}\n\t}\n\tvoid insert(int x,int l,int r,int d){\n\t\tif(tree[x].l>=l&&tree[x].r<=r){\n\t\t\ttree[x].x=tree[x].tag=d;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(x);\n\t\tint mid=(tree[x].l+tree[x].r)>>1;\n\t\tif(l<=mid)insert(x<<1,l,r,d);\n\t\tif(r>mid)insert(x<<1|1,l,r,d);\n\t}\n\tint ask(int x,int pos){\n\t\tif(tree[x].l==tree[x].r)return tree[x].x;\n\t\tpushdown(x);\n\t\tint mid=(tree[x].l+tree[x].r)>>1;\n\t\tif(pos<=mid)return ask(x<<1,pos);\n\t\telse return ask(x<<1|1,pos);\n\t}\n\tvoid CHECK(){\n\t\tbuild(1,1,10);\n\t\tinsert(1,2,5,3);\n\t\tfor(int i=1;i<=10;i++)cout<<ask(1,i)<<' ';puts(\"\");\n\t\tinsert(1,4,6,4);\n\t\tfor(int i=1;i<=10;i++)cout<<ask(1,i)<<' ';puts(\"\");\n\t\tinsert(1,4,6,0);\n\t\tfor(int i=1;i<=10;i++)cout<<ask(1,i)<<' ';puts(\"\");\n\t\t\n\t\texit(0);\n\t}\n}st;\ninline void toroot(int x,int d){\n\twhile(x){\n\t//\tst.assign(dfn[top[x]],dfn[x],d);\n\t\tst.insert(1,dfn[top[x]],dfn[x],d);\n\t\tx=fa[top[x]];\n\t}\n}\ninline void sontree(int x,int d){\n\tst.insert(1,dfn[x],dfn[x]+siz[x]-1,d);\n//\tst.assign(dfn[x],dfn[x]+siz[x]-1,d);\n}\ninline void del(int x){\n\ttoroot(x,0),sontree(x,0);\n}\ninline void add(int x){\n\ttoroot(x,-1),sontree(x,x);\n}\nint ans,res;\nint eat[maxn];\ninline void dfs(int x,int fa){\n//\tint tmp=(--st.s.upper_bound(point(dfn[x],0,0)))->v;\n\tint tmp=st.ask(1,dfn[x]);\n\tif(tmp==0)res++,add(x);\n\telse if(tmp!=-1)eat[x]=tmp,del(tmp),add(x);\n//puts(\"__________________\");\n//\tcout<<x<<endl;\n//\tcout<<tmp<<endl;\n//\tst.print();\n//puts(\"__________________\");\n\tans=max(ans,res);\n\tfor(int i=A.head[x];i;i=A.Next[i]){\n\t\tint y=A.ver[i];\n\t\tif(y==fa)continue;\n\t\tdfs(y,x);\n\t}\n\tdel(x);\n\tif(eat[x])add(eat[x]);\n\telse res--;\n}\nsigned main(){\n#ifndef ONLINE_JUDGE\n\tfreopen(\"testdata.in\",\"r\",stdin);\n#endif\n\tfor(rd(T);T;T--){\n\t\trd(n);\n\t\tfor(int i=1;i<=n;i++)A.head[i]=B.head[i]=son[i]=dep[i]=eat[i]=0;\n\t\tst.build(1,1,n);\n\t\tA.clear(),B.clear();\n\t\tfor(int i=2;i<=n;i++)rd(x),A.add(x,i),A.add(i,x);\n\t\tfor(int i=2;i<=n;i++)rd(x),B.add(x,i),B.add(i,x);\n\t\tcnt=0;\n\t//\tmemset(dep,0,sizeof (n+1)*sizeof(int));\n\t//\tmemset(son,0,sizeof (n+1)*sizeof(int));\n\t\tdep[1]=1;dfs1(1);\n\t\tdfs2(1,1);\n\t\tans=res=0;\n\t//\tfor(int i=1;i<=n;i++)cout<<dfn[i]<<' ';puts(\"\");\n\t\tdfs(1,-1);\n\t\twr(ans),putchar('\\n');\n\t}\n#ifndef ONLINE_JUDGE\n\tcerr<<endl<<(double)clock()/CLOCKS_PER_SEC;\n#endif\n}\n\n```\n",
        "postTime": 1625030099,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "CF1528C Trees of Tranquillity\u9898\u89e3"
    },
    {
        "content": "\u8003\u573a\u4e0a\u6ca1\u505a\u51fa\u6765\u4e8f\u5927\u4e86\u3002\u8c28\u4ee5\u6b64\u9898\u89e3\u819c\u62dc @Reanap \u548c\u8bb0\u5f55\u6211\u7684\u50bb\u903c\u3002\n\n\u663e\u7136\uff0c\u6211\u4eec\u9009\u4f5c\u4e3a\u7b54\u6848\u7684\u70b9\u5728\u7b2c\u4e00\u68f5\u6811\u4e0a\u7684\u6839\u5230\u67d0\u4e00\u4e2a\u53f6\u5b50\u7684\u94fe\u4e0a\u3002\u4e0d\u59a8\u5148\u8003\u8651\u7b2c\u4e00\u68f5\u6811\u662f\u4e00\u6761\u94fe\u7684\u505a\u6cd5\u3002\u6211\u4eec\u5728\u8003\u8651\u52a0\u5165\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\uff1a\n\n1. \u5728\u7b2c\u4e8c\u68f5\u6811\u4e0a\u52a0\u5165\u8fd9\u4e2a\u70b9\uff0c\u4f7f\u5f97\u9009\u7684\u70b9\u7684\u516c\u5171\u7956\u5148\u53d1\u751f\u6539\u53d8\u4e14\u4ecd\u7136\u6ee1\u8db3\u6761\u4ef6\uff1b   \n2. \u5728\u7b2c\u4e8c\u68f5\u6811\u4e0a\u52a0\u5165\u8fd9\u4e2a\u70b9\uff0c\u4f7f\u5f97\u4e4b\u524d\u9009\u7684\u70b9\u7684\u516c\u5171\u7956\u5148\u662f\u8fd9\u4e2a\u70b9\u7684\u7956\u5148\uff1b    \n3. \u5728\u7b2c\u4e8c\u68f5\u6811\u4e0a\u52a0\u5165\u8fd9\u4e2a\u70b9\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u70b9\u662f\u4e4b\u524d\u9009\u7684\u70b9\u7684\u516c\u5171\u7956\u5148\u7684\u7956\u5148\u3002\n\n\u5206\u60c5\u51b5\u8ba8\u8bba\u3002\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u663e\u7136\u7b54\u6848\u53ef\u4ee5\u589e\u52a0\u4e0d\u8981\u767d\u4e0d\u8981\uff1b\u5bf9\u4e8e\u7b2c\u4e8c\u4e09\u79cd\u60c5\u51b5\u8d2a\u5fc3\u8003\u8651\uff0c\u663e\u7136\u7b54\u6848\u65e0\u53d8\u5316\uff0c\u90a3\u4e48\u8ba9\u516c\u5171\u7956\u5148\u7684\u6df1\u5ea6\u8d8a\u6df1\u8d8a\u597d\uff0c\u5373\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0d\u7ba1\uff0c\u7b2c\u4e09\u79cd\u60c5\u51b5\u5c06\u539f\u6765\u7684\u516c\u5171\u7956\u5148\u5220\u53bb\uff0c\u5c06\u5f53\u524d\u7684\u516c\u5171\u7956\u5148\u7f6e\u4e3a\u65b0\u52a0\u5165\u7684\u70b9\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u6574\u4e2a\u7684\u8ba8\u8bba\u53ea\u8ddf\u9009\u7684\u70b9\u7684\u516c\u5171\u7956\u5148\u6709\u5173\uff0c\u6211\u4eec\u6ca1\u5fc5\u8981\u7ba1\u54ea\u4e9b\u70b9\u5b9e\u9645\u5728\u3002\n\n\u6ce8\u610f\u5230\u94fe\u4e0e\u94fe\u4e4b\u95f4\u4e92\u4e0d\u51b2\u7a81\u53ef\u4ee5\u5408\u5e76\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u505a\u5230 $O(n \\log n)$ \u4e86\u3002\u5b8c\u5168\u4e0d\u61c2\u4e3a\u4ec0\u4e48\u6709\u4eba\u4f1a\u7528\u6811\u5256\u3002\n\n\u56e0\u4e3a\u61d2\u5f97\u5199\u4ee3\u7801\u6240\u4ee5\u8bb2\u4e00\u4e0b\u5b9e\u73b0\u7ec6\u8282\u3002\u6211\u4eec\u5728\u904d\u5386\u7b2c\u4e00\u68f5\u6811\u7684\u65f6\u5019\u5c06\u5728\u7b2c\u4e8c\u68f5\u6811\u4e0a\u7684\u5f53\u524d\u7684\u516c\u5171\u7956\u5148\u8bb0\u4e0b\u6765\u3002\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\u6bd4\u8f83\u6df1\u5ea6\u5373\u53ef\u3002\n\n\u6211\u600e\u4e48\u8fd9\u4e48\u50bb\u903c\u554a\uff1f\uff1f",
        "postTime": 1622086921,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "CF1528C Trees of Tranquillity \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u6700\u5927\u56e2\u7684\u5b9e\u9645\u610f\u4e49\u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u5927\u56e2\u7684\u70b9\u5728 A \u6811\u4e0a\u5fc5\u7136\u662f\u4ece\u6839\u5f00\u59cb\u7684\u4e00\u6761\u94fe\u4e0a\uff0c\u800c\u5728 B \u6811\u4e0a\uff0c\u5fc5\u7136\u662f\u6ca1\u6709\u4efb\u4f55\u7684\u7956\u5148\u540e\u4ee3\u5173\u7cfb\u3002\n\n\u6211\u4eec\u8003\u8651\u5728 A \u6811\u7684\u4e00\u6761\u94fe\uff0c\u5982\u4f55\u6c42\u51fa\u6700\u591a\u591a\u5c11\u4e2a\u70b9\u5728 B \u4e2d\u65e0\u7956\u5148-\u540e\u4ee3\u5173\u7cfb\u3002\n\n\u6211\u4eec\u8d2a\u5fc3\u7684\u60f3\uff0c\u4e00\u4e2a\u70b9\u81ea\u7136\u662f\u6df1\u5ea6\u8d8a\u5927\u8d8a\u597d\u3002\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684\u70b9 $u$ \uff0c\u82e5\u4ed6\u7684\u5b50\u6811\u5185\u6709\u88ab\u9009\u4e2d\u7684\u70b9 $v$ \uff0c\u90a3\u5fc5\u7136\u662f\u9009\u62e9\u4e0d\u9009\u62e9 $u$ \u4e3a\u597d\u3002\n\n\u82e5 $v$ \u7684\u5b50\u6811\u5185\u65e0\u9009\u4e2d\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u770b\u4e00\u4e0b\u4ece $v$ \u5230\u6839\u7684\u8def\u5f84\u4e0a\u662f\u5426\u6709\u9009\u4e2d\u70b9\uff0c\u82e5\u6709\u7684\u8bdd\u5c06\u5176\u5220\u6389\uff0c\u7136\u540e\u9009\u4e2d $u$ \u3002\u8be5\u64cd\u4f5c\u5c31\u76f8\u5f53\u4e8e\u5c06\u9009\u4e2d\u70b9\u8d2a\u5fc3\u7684\u5411\u4e0b\u79fb\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u5c06\u9009\u4e2d\u70b9\u8d4b\u503c\u4e3a 1 \uff0c\u672a\u9009\u4e2d\u70b9\u8d4b\u503c\u4e3a 0 \u3002\u90a3\u4e48\u4f7f\u7528\u6811\u5256\u7ef4\u62a4\u5b50\u6811\u4e2d\u4ee5\u53ca\u5230\u6839\u8def\u5f84\u4e0a\u6709\u65e0\u9009\u4e2d\u70b9\u3002\n\n\u73b0\u5728\u6211\u4eec\u5c06\u6811 B \u641e\u4e00\u4e0b\u6811\u5256\uff0c\u7136\u540e DFS \u6811 A \uff0c\u6bcf DFS \u4e00\u4e2a\u70b9\uff0c\u7528\u5b83\u66f4\u65b0\u6700\u5927\u56e2\uff0c DFS \u51fa\u53bb\u7684\u65f6\u5019\u5c06\u4fee\u6539\u64a4\u9500\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n\n#define mid (l+r>>1)\n\nusing namespace std;\n\nnamespace model{\n\tconst int N = 1e6+7,P=998244353;\n\tint read()\n\t{\n\t\tint a = 0,x = 1;char ch = getchar();\n\t\twhile(ch > '9' || ch < '0') {if(ch == '-') x = -1;ch = getchar();}\n\t\twhile(ch >= '0' && ch <= '9'){a = a*10 + ch-'0';ch = getchar();}\n\t\treturn a*x;\n\t}\n\tint fpow(int a,int x,int p) \n\t{\n\t\tif(x == 1) return a;\n\t\tif(x == 0) return 1;\n\t\tint t = fpow(a,x>>1,p);\n\t\tif(x&1) return t*t%p*a%p;\n\t\treturn t*t%p;\n\t}\n\tvoid Mod(int &a) {if(a >= P) a %= P;}\n}\n\nusing model::read;\nusing model::N;\n\nint n,a[N],fa[N],siz[N],son[N],str[N],dep[N],dfn[N],pos[N];\n\nint head[N],go[N],nxt[N],cnt;\nvoid add(int u,int v)\n{\n\tgo[++cnt] = v;\n\tnxt[cnt] = head[u];\n\thead[u] = cnt;\n}\n\nvoid dfs1(int u)\n{\n\tdep[u] = dep[fa[u]] + 1,siz[u] = 1,son[u] = 0;\n\tfor(int e = head[u];e;e = nxt[e]) {\n\t\tint v = go[e];\n\t\tdfs1(v);siz[u] += siz[v];if(siz[v] > siz[son[u]]) son[u] = v;\n\t}\n}\n\nvoid dfs2(int u,int h)\n{\n\tstr[u] = h;dfn[u] = ++cnt;pos[cnt] = u;\n\tif(son[u]) dfs2(son[u],h);\n\tfor(int e = head[u];e;e = nxt[e]) {\n\t\tint v = go[e];if(v == son[u]) continue;\n\t\tdfs2(v,v);\n\t}\n}\n\nint tot,tre[N*6],ls[N*6],rs[N*6],rt,tre1[N*6],ans;\nint Newnode() {++tot;ls[tot] = rs[tot] = tre[tot] = tre1[tot] = 0;return tot;}\n\nvoid push_up(int root)\n{\n\ttre[root] = tre[ls[root]] + tre[rs[root]];\n\ttre1[root] = tre1[ls[root]] ? tre1[ls[root]] : tre1[rs[root]];\n}\n\nvoid modify(int &root,int l,int r,int p,int x)\n{\n\tif(!root) root = Newnode();\n\tif(l == r && l == p) {tre[root] = x,tre1[root] = x*pos[l];return ;}\n\tif(p <= mid) modify(ls[root],l,mid,p,x);\n\telse modify(rs[root],mid+1,r,p,x);\n\tpush_up(root);\n}\n\nint query(int root,int l,int r,int ql,int qr)\n{\n\tif(l > qr || r < ql || !root) return 0;\n\tif(l >= ql && r <= qr) return tre[root];\n\treturn query(ls[root],l,mid,ql,qr) + query(rs[root],mid+1,r,ql,qr);\n}\n\nint query_p(int root,int l,int r,int ql,int qr)\n{\n\tif(l > qr || r < ql || !root) return 0;\n\tif(l >= ql && r <= qr) return tre1[root];\n\tint tmp = query_p(ls[root],l,mid,ql,qr);\n\tif(tmp) return tmp;\n\telse return query_p(rs[root],mid+1,r,ql,qr);\n}\n\nint getplace(int a)\n{\n\tint tmp = 0;\n\twhile(a) {\n\t\tif(tmp = query_p(rt,1,n,dfn[str[a]],dfn[a])) return tmp;\n\t\ta = fa[str[a]];\n\t}\n\treturn 0;\n}\n\nvoid dfs(int u)\n{\n\tint tmp1=0,tmp2=0;\n\tif(query(rt,1,n,dfn[u],dfn[u]+siz[u]-1)) tmp2 = 0;\n\telse {\n\t\ttmp2 = 1,tmp1 = getplace(u);\n\t\tif(tmp1) modify(rt,1,n,dfn[tmp1],0);\n\t\tmodify(rt,1,n,dfn[u],1);\n\t}\n\tans = max(ans,tre[rt]);\n\tfor(int e = head[u];e;e = nxt[e]) {\n\t\tint v = go[e];dfs(v);\n\t}\n\tif(tmp2) {\n\t\tif(tmp1) modify(rt,1,n,dfn[tmp1],1);\n\t\tmodify(rt,1,n,dfn[u],0);\n\t}\n}\n\nvoid solve()\n{\n\tn = read();head[1] = cnt = rt = ans = 0;\n\tfor(int i = 2;i <= n;i ++) a[i] = read(),head[i] = 0;\n\tfor(int i = 2;i <= n;i ++) fa[i] = read(),add(fa[i],i);\n\tdfs1(1);cnt=0;dfs2(1,1);tot = 0;cnt = 0;\n\tfor(int i = 1;i <= n;i ++) head[i] = 0;\n\tfor(int i = 2;i <= n;i ++) add(a[i],i);\n\tdfs(1);printf(\"%d\\n\",ans);\n}\n\nint main()\n{\n\tint t = read();\n\twhile(t --) solve();\n}\n```",
        "postTime": 1622018355,
        "uid": 305911,
        "name": "\u5fd8\u6000\u661f",
        "ccfLevel": 0,
        "title": "CF1528C"
    }
]