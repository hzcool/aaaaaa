[
    {
        "content": "\u8fd9\u662f\u771f\u795e\u9898\u3002\n\n\u9996\u5148\u89c2\u5bdf\u53d1\u73b0\uff0c\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u5411\u4fee\u6539\u503e\u659c\uff0c\u5373\u8be2\u95ee\u590d\u6742\u5ea6\u6bd4\u8f83\u4f4e\uff0c\u53ef\u4ee5\u8003\u8651\u8be2\u95ee\u7684\u65f6\u5019\u641e\u70b9\u4e8b\u60c5\u3002\n\n\u8003\u8651 $(1)$ \u64cd\u4f5c\u7684\u672c\u8d28\u3002\u56e0\u4e3a\u8981\u5411\u8be2\u95ee\u503e\u659c\uff0c\u6240\u4ee5\u8003\u8651\u5982\u679c\u67d0\u4e2a\u70b9 $z$ \u4f1a\u88ab `1 x` \u5f71\u54cd\u5230 \uff0c\u90a3\u4e48\u5fc5\u7136\u6709 $x\\sim z$ \u8fd9\u6761\u8def\u5f84\u4e0a\u9664\u4e86 $x$ \u4e4b\u5916\u7684\u6240\u6709\u70b9\u90fd\u5df2\u7ecf\u88ab\u67d3\u9ed1\u4e86\u3002\n\n\u8003\u8651\u5ffd\u7565 $(2)$ \u64cd\u4f5c\u65f6\uff0c\u5982\u4f55\u901a\u8fc7\u7ef4\u62a4\u6743\u503c\u5b9e\u73b0\u8fd9\u4e2a\u4e8b\u60c5\u3002\u4e00\u5f00\u59cb\u5c06\u5168\u90e8\u7684\u70b9\u6743\u8bbe\u4e3a $0$\uff0c\u6bcf\u6b21 $(1)$ \u64cd\u4f5c\u5c31\u662f\u5bf9\u8be5\u70b9\u8fdb\u884c\u5355\u70b9 $+1$ \u3002\u8fd9\u6837\u8be2\u95ee\u5c31\u53ef\u4ee5\u8003\u8651\u8be2\u95ee $root\\to x$ \u8fd9\u6761\u8def\u5f84\u4e0a\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u540e\u7f00 $(s,x)$ \u7684\u6743\u548c\u7b49\u4e8e $(s,x)$ \u7684\u957f\u5ea6\u3002\u8fd9\u6837\u76f4\u63a5\u505a\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6811\u94fe\u4e0a\u7684\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u4f46\u5176\u5b9e\u53ef\u4ee5\u7528\u4e00\u4e2a\u6bd4\u8f83\u4f20\u7edf\u7684\u6280\u5de7\u4f18\u5316\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5373\u5dee\u5206\u3002\u8003\u8651\u628a\u6bcf\u4e2a\u70b9\u7684\u521d\u59cb\u70b9\u6743\u8bbe\u4e3a $-1$ \uff0c\u8fd9\u6837\u5c31\u662f\u8be2\u95ee\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u540e\u7f00\uff0c\u5176\u548c $\\geqslant 0$ \u3002\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u94fe\u4e0a\u7684\u6700\u5927\u540e\u7f00\u548c\u6765\u505a\uff0c\u5199\u8d77\u6765\u7b80\u5355\u4e00\u4e9b\u3002\n\n\u7136\u540e\u8003\u8651\u52a0\u4e0a $(2)$ \u64cd\u4f5c\u540e\u5982\u4f55\u5feb\u901f\u7ef4\u62a4\u3002\u53d1\u73b0 $(2)$ \u64cd\u4f5c\u7684\u672c\u8d28\u662f\u8ba9\u6574\u68f5\u5b50\u6811\u7684\u70b9\u6743\u5747\u53d8\u4e3a $-1$ \u3002\u4f46\u8fd9\u8fd8\u4e0d\u591f\uff0c\u56e0\u4e3a $(2)$ \u672c\u8d28\u4e0a\u662f\u5f3a\u5236\u8ba9\u67d0\u4e2a\u70b9 $x$ \u53d8\u6210\u767d\u8272\uff0c\u800c\u4e0a\u9762\u90a3\u4e2a\u505a\u6cd5\u672c\u8d28\u4e0a\u662f\u5bf9\u4fee\u6539\u79bb\u7ebf\uff0c\u6700\u540e\u518d\u5206\u522b\u786e\u5b9a\u6bcf\u4e2a\u4fee\u6539\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\u4e0d\u8fc7\u4e5f\u6709\u6bd4\u8f83\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u5f0f\uff0c\u5373\u8ba9 `2 x` \u4e2d\u7684 $x$ \u5355\u70b9\u51cf\u4e00\u4e2a\u6743\u503c $v$ \uff0c\u4f7f\u5f97 $root\\to x$ \u4e0a\u7684\u6700\u5927\u540e\u7f00\u548c\u4e5f\u4e3a $-1$ \u3002\u4e0d\u96be\u53d1\u73b0 $v=qry(x)+1$ \u3002\n\n\u4e8e\u662f\u6700\u540e\u5c31\u53ef\u4ee5\u7528 $n\\log ^2n $ \u7684\u590d\u6742\u5ea6\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002\n\n```cpp\n#include <cstdio>\n\n#include <vector>\n\n#include <cstring>\n\n#define p_b push_back\n\nusing std :: max ;\nusing std :: min ;\nusing std :: vector ;\n\nconst int N = 300010 ;\n\nint ans ;\nint cnt ;\nint n, q ;\nint sz[N] ;\nint fa[N] ;\nint _id[N] ;\nint dfn[N] ;\nint son[N] ;\nint dep[N] ;\nint top[N] ;\n\nvector <int> E[N] ;\n\nvoid dfs1(int x, int da){\n    dep[x] = dep[da] + 1 ;\n    sz[x] = 1, fa[x] = da ;\n    for (auto y : E[x]){\n        if (y == da) continue ;\n        dfs1(y, x) ; sz[x] += sz[y] ;\n        if (sz[y] > sz[son[x]]) son[x] = y ;\n    }\n}\nvoid dfs2(int x, int tp){\n    top[x] = tp ; ++ cnt ;\n    _id[dfn[x] = cnt] = x ;\n    if (son[x])\n        dfs2(son[x], tp) ;\n    for (auto y : E[x])\n        if (y != fa[x] && y != son[x]) dfs2(y, y) ;\n}\n\nint seg[N * 3] ;\nint val[N * 3] ;\nint tag[N * 3] ;\n\n#define lc (rt << 1)\n#define rc (rt << 1 | 1)\n\nvoid _up(int rt){\n    seg[rt] = seg[lc] + seg[rc] ;\n    val[rt] = max(val[rc], val[lc] + seg[rc]) ;\n}\nvoid _down(int rt, int l, int r){\n    if (!tag[rt]) return ;\n    int mid = (l + r) >> 1 ;\n    seg[rc] =  - (r - mid) ;\n    seg[lc] =  - (mid - l + 1) ;\n    val[lc] = -1, val[rc] = -1 ;\n    tag[rc] = tag[lc] = 1, tag[rt] = 0 ;\n}\nvoid build(int rt, int l, int r){\n    if (l == r)\n        return void(seg[rt] = val[rt] = -1) ;\n    int mid = (l + r) >> 1 ;\n    build(rc, mid + 1, r) ;\n    build(lc, l, mid) ; _up(rt) ;\n}\nvoid upd(int rt, int l, int r, int p, int v){\n    if (l == r){\n        seg[rt] += v ;\n        val[rt] += v ;\n        return void() ;\n    }\n    _down(rt, l, r) ;\n    int mid = (l + r) >> 1 ;\n    if (p <= mid) upd(lc, l, mid, p, v) ;\n    else upd(rc, mid + 1, r, p, v) ;\n    _up(rt) ;\n}\nvoid cov(int rt, int l, int r, int cl, int cr){\n    if (cl <= l && r <= cr){\n        seg[rt] = - (r - l + 1) ;\n        val[rt] = -1 ; return void(tag[rt] = 1) ;\n    }\n    int mid = (l + r) >> 1 ; _down(rt, l, r) ;\n    if (cr > mid) cov(rc, mid + 1, r, cl, cr) ;\n    if (cl <= mid) cov(lc, l, mid, cl, cr) ; _up(rt) ;\n}\nint sum(int rt, int l, int r, int ql, int qr){\n    if (ql <= l && r <= qr) return seg[rt] ;\n    int mid = (l + r) >> 1, ret = 0 ; _down(rt, l, r) ;\n    if (ql <= mid) ret += sum(lc, l, mid, ql, qr) ;\n    if (qr > mid) ret += sum(rc, mid + 1, r, ql, qr) ;\n    return ret ;\n}\nint qry(int rt, int l, int r, int ql, int qr){\n     _down(rt, l, r) ;\n    if (ql <= l && r <= qr) return val[rt] ;\n    int mid = (l + r) >> 1, ret = - n ; _down(rt, l, r) ;\n    if (ql <= mid) ret = max(ret, qry(lc, l, mid, ql, qr)) ;\n    if (qr > mid) ret = max(ret + sum(rc, mid + 1, r, ql, qr), qry(rc, mid + 1, r, ql, qr)) ;\n    return ret ;\n}\nint Q(int x){\n    int ret, v = 0 ;\n    ret = -(n + 1) ;\n    while (top[x] > 1){\n        ret = max(ret, v + qry(1, 1, n, dfn[top[x]], dfn[x])) ;\n        v += sum(1, 1, n, dfn[top[x]], dfn[x]) ; x = fa[top[x]] ;\n    }\n//    printf(\"%d\\n\", qry(1, 1, n, dfn[top[x]], dfn[x])) ;\n    ret = max(ret, v + qry(1, 1, n, 1, dfn[x])) ; return ret ;\n}\nint main(){\n    scanf(\"%d%d\", &n, &q) ; int x, z ;\n    for (int y = 2 ; y <= n ; ++ y)\n        scanf(\"%d\", &x), E[x].p_b(y), E[y].p_b(x) ;\n    dfs1(1, 0) ; dfs2(1, 1) ; build(1, 1, n) ;\n//    for (int i = 1 ; i <= n ; ++ i) printf(\"%d%c\", top[i], \" \\n\"[i == n]) ;\n//        printf(\"%d %d\\n\", i, sz[i]) ;\n    while (q --){\n        scanf(\"%d%d\", &z, &x) ;\n        if (z == 1) upd(1, 1, n, dfn[x], 1) ;\n        else if (z == 2){\n            cov(1, 1, n, dfn[x], dfn[x] + sz[x] - 1) ;\n            upd(1, 1, n, dfn[x], - Q(x) - 1) ;\n        }\n        else if (z == 3){\n//            printf(\"%d\\n\", Q(x)) ;\n            ans = (bool)(Q(x) >= 0) ;\n            puts(ans ? \"black\" : \"white\") ;\n        }\n    }\n    return 0 ;\n}\n```\n\n",
        "postTime": 1592314115,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u300c\u6709\u8da3\u7684\u94fe\u5256\u9898\u300d [Codeforces 1017G] The Tree"
    },
    {
        "content": "\u6211\u4eec\u79f0 1 \u64cd\u4f5c\u4e3a\u300c\u6655\u5f00\u300d\uff0c2 \u64cd\u4f5c\u4e3a\u300c\u6e05\u7a7a\u300d\u3002\n\n\u53d1\u73b0\u6734\u7d20\u6655\u5f00\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6211\u4eec\u53d7\u4e0d\u4e86 qwq\uff0c\u5c1d\u8bd5\u7528\u6811\u5256\u65b9\u5f0f\u4e0e\u8be2\u95ee\u644a\u4e00\u4e0b\u3002\n\n\u82e5\u5728\u4e00\u4e2a\u4f4d\u7f6e\u6655\u5f00\u4e00\u6b21\u9ed1\u8272\uff0c\u6211\u4eec\u5c31\u5355\u70b9\u52a0 $1$\uff0c\u82e5\u6240\u6709\u7684\u521d\u59cb\u70b9\u6743\u5747\u4e3a $-1$\uff0c\u5219\u5355\u70b9\u8be2\u95ee $x$ \u65f6\u76f8\u5f53\u4e8e\u95ee\uff1a\n\n\u4ece\u6839\u5230 $x$ \u8def\u5f84\u4e0a\u7684\u70b9\u6743\u7684\u6700\u5927\u540e\u7f00\u548c\uff08\u4e0d\u53ef\u7a7a\uff09\u662f\u5426 $\\ge 0$\u3002\n\n\u539f\u56e0\u662f\u6bcf\u4e2a\u70b9\u8981\u6d88\u8017\u4e00\u4e2a\u5355\u4f4d\uff0c\u6240\u4ee5\u521d\u59cb\u503c\u4e3a $-1$\uff0c\u800c\u6bcf\u6b21\u6655\u5f00\u76f8\u5f53\u4e8e\u5411\u4e0b\u591a\u6269\u5c55 $1$\u3002\n\n\u6e05\u7a7a $x$ \u5982\u4f55\uff1f\u9996\u5148\u6211\u4eec\u8981\u8ba9 $x$ \u5b50\u6811\u5185\u7684\u70b9\u6743\u5747\u6e05\u7a7a\u4e3a $-1$\uff0c\u7136\u540e\u8981\u963b\u65ad\u6b64\u65f6\u4ece\u4e0a\u5c42\u6765\u7684\u58a8\u91cf\uff0c\u6240\u4ee5\u7528 $x$ \u300c\u5438\u6536\u300d\uff0c\u5373 $x$ \u70b9\u6743\u518d\u51cf $x$ \u5904\u7684\u8be2\u95ee\u503c\u518d $-1$\u3002\n\n\u8be2\u95ee\u5219\u6811\u5256\u8df3\u94fe\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u533a\u95f4\u6700\u5927\u540e\u7f00\u548c\u5373\u53ef\u3002\n\n```cpp\n//We'll be counting stars.\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\n#define fir first\n#define sec second\n#define mkp make_pair\n#define pb emplace_back\n#define For(i,j,k) for(int i=(j),i##_=(k);i<=i##_;i++)\n#define Rof(i,j,k) for(int i=(j),i##_=(k);i>=i##_;i--)\n#define ckmx(a,b) a=max(a,b)\n#define ckmn(a,b) a=min(a,b)\n#define debug(...) cerr<<\"#\"<<__LINE__<<\": \"<<__VA_ARGS__<<endl\n#define ll long long\nconst ll mod=1;\ninline ll pw(ll x,ll y){ll r=1;while(y){if(y&1)r=r*x%mod;x=x*x%mod;y>>=1;}return r;}\n#define int ll\n#define N 100005\nstruct node{\n\tint sum,ans;\n\tnode(int s=0,int a=0){ sum=s,ans=a; }//ans(suf) can't be empty\n\tfriend node operator+(node x,node y){ return node(x.sum+y.sum,max(y.ans,x.ans+y.sum)); }\n}t[N<<2];\nbool lz[N<<2];\nvector<int> e[N];\nint n,q,sz[N],wson[N],dfn[N],top[N],f[N],tim=0;\nvoid dfs(int rt,int fa){\n\tsz[rt]=1;\n\tf[rt]=fa;\n\tfor(int i:e[rt]) if(i!=fa){\n\t\tdfs(i,rt);\n\t\tsz[rt]+=sz[i];\n\t\tif(sz[i]>sz[wson[rt]]) wson[rt]=i;\n\t}\n}\nvoid dfs2(int rt,int tp){\n\ttop[rt]=tp;\n\tdfn[rt]=++tim;\n\tif(wson[rt]) dfs2(wson[rt],tp);\n\tfor(int i:e[rt]) if(i!=f[rt] && i!=wson[rt]){\n\t\tdfs2(i,i);\n\t}\n}\n#define ls (rt<<1)\n#define rs (rt<<1|1)\n#define mid ((l+r)>>1)\nvoid build(int rt,int l,int r){\n\tlz[rt]=false;\n\tif(l==r){\n\t\tt[rt]=node(-1,-1);\n\t\treturn ;\n\t}\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\tt[rt]=t[ls]+t[rs];\n}\nvoid tag(int rt,int l,int r){\n\tlz[rt]=true;\n\tt[rt]=node(-(r-l+1),-1);\n}\nvoid pd(int rt,int l,int r){\n\tif(lz[rt]){\n\t\tlz[rt]=false;\n\t\ttag(ls,l,mid);\n\t\ttag(rs,mid+1,r);\n\t}\n}\nvoid add(int rt,int l,int r,int id,int val){\n\tif(l==r){\n\t\tt[rt].sum+=val;\n\t\tt[rt].ans+=val;\n\t\treturn ;\n\t}\n\tpd(rt,l,r);\n\tif(id<=mid) add(ls,l,mid,id,val);\n\telse add(rs,mid+1,r,id,val);\n\tt[rt]=t[ls]+t[rs];\n}\nvoid cle(int rt,int l,int r,int x,int y){//clean to val -1\n\tif(x<=l && r<=y){\n\t\ttag(rt,l,r);\n\t\treturn ;\n\t}\n\tpd(rt,l,r);\n\tif(x<=mid) cle(ls,l,mid,x,y);\n\tif(y>mid) cle(rs,mid+1,r,x,y);\n\tt[rt]=t[ls]+t[rs];\n}\nnode query(int rt,int l,int r,int x,int y){\n\tif(l==x && r==y) return t[rt];\n\tpd(rt,l,r);\n\tif(y<=mid) return query(ls,l,mid,x,y);\n\telse if(x>mid) return query(rs,mid+1,r,x,y);\n\telse return query(ls,l,mid,x,mid)+query(rs,mid+1,r,mid+1,y);\n}\nint Que(int x){\n\tnode res=query(1,1,n,dfn[top[x]],dfn[x]);\n\tx=f[top[x]];\n\twhile(x){\n\t\tres=query(1,1,n,dfn[top[x]],dfn[x])+res;\n\t\tx=f[top[x]];\n\t}\n\treturn res.ans;\n}\nsigned main(){ios::sync_with_stdio(false),cin.tie(nullptr);\n\tcin>>n>>q;\n\tint opt,x;\n\tFor(i,2,n){\n\t\tcin>>x;\n\t\te[x].pb(i);\n\t\te[i].pb(x);\n\t}\n\tdfs(1,0);\n\tdfs2(1,1);\n\tbuild(1,1,n);\n\tFor(i,1,q){\n\t\tcin>>opt>>x;\n\t\tif(opt==1){\n\t\t\tadd(1,1,n,dfn[x],1);\n\t\t}else if(opt==2){\n\t\t\tcle(1,1,n,dfn[x],dfn[x]+sz[x]-1);\n\t\t\tadd(1,1,n,dfn[x],-1-Que(x));//make this node's max suf=-1\n\t\t}else{\n\t\t\tcout<<(Que(x)>=0?\"black\":\"white\")<<endl;\n\t\t}\n\t}\nreturn 0;}\n```",
        "postTime": 1659710109,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "CF1017G The Tree\uff08\u6811\u5256 DFS \u5e8f\u540c\u65f6\u5904\u7406\u5b50\u6811\u4fee\uff09"
    },
    {
        "content": "\u600e\u4e48\u90fd\u6ca1\u4eba\u5199\u597d\u5199\u53c8\u597d\u61c2\u7684\u5b98\u65b9\u9898\u89e3\u7684\u505a\u6cd5\uff1f\n\n\u8003\u8651\u5bf9\u8be2\u95ee\u5206\u5757\u3002\n\n\u8bbe\u5757\u5927\u5c0f\u4e3a $s$ \uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a\u8be2\u95ee\u5757\u7528\u5230\u8fc7\u7684\u70b9\u7684\u6570\u91cf\u662f $O(s)$ \u7684\u3002\n\n\u8003\u8651\u628a\u8be2\u95ee\u7684\u8fd9 $s$ \u4e2a\u70b9\u62ff\u51fa\u6765\u5efa\u865a\u6811\uff08\u8fd9\u91cc\u53ef\u4ee5 $O(n)$ \u5efa\u865a\u6811\u7684\uff09\u3002\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u865a\u6811\u4e0a\u7684\u8fb9\uff0c\u5b58\u4e00\u4e0b\u8fd9\u8fb9\u5728\u539f\u6811\u4e0a\u7684\u70b9\u7684\u4e2a\u6570\uff0c\u767d\u8272\u70b9\u7684\u4e2a\u6570\u3002\n\n\u7136\u540e\u8003\u8651\u7b2c\u4e00\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u65b0\u6811\u4e0a\u6a21\u62df\u8fdb\u884c\u64cd\u4f5c\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4fee\u6539\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u767d\u8272\u76f4\u63a5\u4fee\u6539\uff0c\u5426\u5219\u67e5\u4e00\u4e0b\u5f53\u524d\u64cd\u4f5c\u8fd9\u4e2a\u70b9\u7684\u6570\u91cf\u662f\u5426\u8db3\u4ee5\u9012\u5f52\u8fdb\u4e00\u4e2a\u5b50\u6811\u3002\u9012\u5f52\u64cd\u4f5c\u5373\u53ef\u3002\u8bf4\u767d\u4e86\uff0c\u5bf9\u5173\u952e\u70b9\u4fee\u6539\u76f4\u63a5\u6539\uff0c\u5bf9\u975e\u5173\u952e\u70b9\u5ef6\u5230\u5757\u5904\u7406\u5b8c\u4e86\u518d\u6539\u3002\u590d\u6742\u5ea6\u662f $O(s)$\u3002\n\n\u8003\u8651\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\uff0c\u66b4\u529b\u4fee\u6539\u5b50\u6811\uff0c\u628a\u6bcf\u6761\u8fb9\u4e0a\u767d\u8272\u70b9\u7684\u4e2a\u6570\u53d8\u6210\u539f\u6811\u4e0a\u70b9\u7684\u4e2a\u6570\u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(s)$\u3002\n\n\u8003\u8651\u8be2\u95ee\uff0c\u76f4\u63a5\u8f93\u51fa\u8fd9\u4e2a\u70b9\u7684\u989c\u8272\u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(1)$\u3002\n\n\u8003\u8651\u5bf9\u4e00\u4e2a\u5757\u64cd\u4f5c\u5b8c\u4e86\uff0c\u6211\u4eec\u904d\u5386\u8fd9\u4e2a\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u5efa\u7acb\u865a\u6811\u65f6\u7684\u529e\u6cd5\u628a\u6bcf\u4e2a\u672a\u88ab\u8be2\u95ee\u7684\u70b9\u7684\u989c\u8272\u8fd8\u539f\u3002\n\n```cpp\n#include \"iostream\"\n#include \"algorithm\"\n#include \"cstring\"\n#include \"cstdio\"\n#include \"cmath\"\n#include \"vector\"\n#include \"map\"\n#include \"set\"\n#include \"queue\"\nusing namespace std;\n#define MAXN 200006\n//#define int long long\n#define rep(i, a, b) for (int i = (a), i##end = (b); i <= i##end; ++i)\n#define per(i, a, b) for (int i = (a), i##end = (b); i >= i##end; --i)\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define vi vector<int>\n#define all(x) (x).begin() , (x).end()\n#define mem( a ) memset( a , 0 , sizeof a )\ntypedef long long ll;\nint n , q;\nint A[MAXN] , fa[MAXN];\n\nvi G[MAXN];\nint head[MAXN] , to[MAXN << 1] , nex[MAXN << 1] , wto[MAXN << 1] , dto[MAXN << 1] , ecn;\nvoid ade( int u , int v , int w , int ww ) {\n\tto[++ ecn] = v , nex[ecn] = head[u] , head[u] = ecn , wto[ecn] = w , dto[ecn] = ww;\n} \n\nint mark[MAXN] , black[MAXN];\nvoid afs( int u , int f , int w , int d ) {\n\tif( mark[u] ) {\n\t\tif( f != -1 ) ade( f , u , w , d );\n\t\tfor( int& v : G[u] ) afs( v , u , 0 , 0 );\n\t} else {\n\t\tif( !black[u] ) ++ w;\n\t\tfor( int& v : G[u] ) afs( v , f , w , d + 1 );\n\t}\n}\n\nint pu[MAXN];\nvoid rever( int u ) {\n\tif( !black[u] ) return void( black[u] = 1 );\n\t++ pu[u];\n\tfor( int i = head[u] ; i ; i = nex[i] ) if( wto[i] + 1 <= pu[u] )\n\t\trever( to[i] );\n}\n\nint cov[MAXN]; // the whole subtree is white\nvoid cover( int u ) {\n\tblack[u] = pu[u] = 0;\n\tcov[u] = 1;\n\tfor( int i = head[u] ; i ; i = nex[i] ) wto[i] = dto[i] , cover( to[i] );\n}\n\nint re[MAXN];\nvoid cfs( int u , int p , int cl ) {\n\tif( mark[u] ) \n\t\tp = pu[u] , cl |= cov[u];\n\telse {\n\t\tblack[u] = re[u];\n\t\tif( cl ) black[u] = 0;\n\t\tif( !black[u] && p ) black[u] = 1 , -- p;\n\t}\n\tfor( int v : G[u] ) cfs( v , p , cl );\n}\n\nint op[MAXN] , pt[MAXN];\n\nvoid solve() {\n\tcin >> n >> q;\n\tint blo = sqrt( q );\n\tint u;\n\trep( i , 2 , n ) scanf(\"%d\",&u) , fa[i] = u , G[u].pb( i );\n\trep( i , 1 , q ) scanf(\"%d%d\",op + i,pt + i);\n\tint s = ( q - 1 ) / blo + 1;\n\trep( i , 1 , s ) {\n\t\tint l = ( i - 1 ) * blo + 1 , r = min( q , i * blo );\n\t\trep( i , 1 , n ) re[i] = black[i] , mark[i] = cov[i] = pu[i] = head[i] = 0;\n\t\trep( i , l , r ) mark[pt[i]] = 1;\n\t\tafs( 1 , -1 , 0 , 0 );\n\t\trep( i , l , r ) {\n\t\t\tif( op[i] == 1 ) rever( pt[i] );\n\t\t\telse if( op[i] == 2 ) cover( pt[i] );\n\t\t\telse puts( black[pt[i]] ? \"black\" : \"white\" );\n\t\t}\n\t\tcfs( 1 , 0 , 0 );\n\t}\n}\n\nsigned main() {\n//    int T;cin >> T;while( T-- ) solve();\n    solve();\n}\n\n\n```\n\n",
        "postTime": 1590496690,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1017G \u3010The Tree\u3011"
    },
    {
        "content": "> [CF1017G The Tree](https://www.luogu.com.cn/problem/CF1017G)\n\n\u5148\u8003\u8651\u6811\u662f\u4e00\u6761\u94fe\u7684\u60c5\u51b5\u3002\u6362\u8a00\u4e4b\uff0c\u8003\u8651 $x$ \u53ca\u5176\u7956\u5148 $a$\u3002\u5bf9 $a$ \u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u4e00\uff0c\u5bf9 $x$ \u7684\u5f71\u54cd\u4e3a\u627e\u5230\u4ece\u6839\u5230 $x$ \u8fd9\u6761\u94fe\u4e0a\u4ece $a$ \u5f00\u59cb\u7b2c\u4e00\u4e2a\u767d\u70b9\u5e76\u5c06\u5176\u67d3\u9ed1\u3002\u5bf9 $a$ \u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u4e8c\uff0c\u5bf9 $x$ \u7684\u5f71\u54cd\u4e3a\u5c06 $a$ \u5230 $x$ \u7684\u6240\u6709\u70b9\u67d3\u9ed1\u3002\n\n\u6211\u4eec\u5fc5\u987b\u627e\u5230\u5728\u6267\u884c\u64cd\u4f5c\u4e00\u4e0d\u4f9d\u8d56\u4e8e\u627e\u5230\u7b2c\u4e00\u4e2a\u767d\u70b9\u7684\u7b97\u6cd5\uff0c\u5426\u5219\u7b97\u6cd5\u65e0\u6cd5\u6269\u5c55\u5230\u6811\u4e0a\u3002\u6362\u79cd\u89d2\u5ea6\u8003\u8651\uff0c\u5b58\u5728 $x$ \u7684\u7956\u5148 $b$ \u4f7f\u5f97\u8def\u5f84 $b \\to x$ \u4e0a\u6240\u6709\u8282\u70b9\u88ab\u6267\u884c\u64cd\u4f5c\u4e00\u7684\u6b21\u6570\u4e4b\u548c\u4e0d\u5c0f\u4e8e\u8def\u5f84\u957f\u5ea6\uff0c\u8fd9\u662f $x$ \u4e3a\u9ed1\u70b9\u7684\u5145\u8981\u6761\u4ef6\u3002\u56e0\u6b64\uff0c\u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u88ab\u6267\u884c\u64cd\u4f5c\u4e00\u7684\u6b21\u6570 **\u51cf $1$**\uff0c\u67e5\u8be2\u65f6\u6c42\u6839\u5230 $x$ \u8def\u5f84\u4e0a\u540e\u7f00\u6700\u5927\u503c\u662f\u5426 $\\geq 0$\u3002\n\n\u5bf9\u4e8e\u4e8c\u64cd\u4f5c\u5462\uff1f\u9996\u5148 $x$ \u5b50\u6811\u5185\u7684\u6240\u6709\u64cd\u4f5c\u4e00\u5168\u90e8\u4f5c\u5e9f\u3002\u95ee\u9898\u5728\u4e8e\u8fd9\u6837\u505a\u4e86\u4e4b\u540e\u5e76\u4e0d\u80fd\u4fdd\u8bc1 $x$ \u5b50\u6811\u5185\u5168\u90e8\u53d8\u6210\u767d\u70b9\u3002\u4f46\u6211\u4eec\u53d1\u73b0 $x$ \u5b50\u6811\u5185\u7684\u9ed1\u70b9\u4e00\u5b9a\u662f\u4ece $dep_x$ \u5230\u67d0\u4e2a\u6df1\u5ea6 $d$ \u7684\u6240\u6709\u8282\u70b9\uff0c\u56e0\u4e3a\u5b50\u6811\u5185\u4e0d\u5b58\u5728\u64cd\u4f5c\u4e00\uff0c\u9ed1\u70b9\u53ea\u80fd\u4ece $x$ \u7684\u7956\u5148\u8d21\u732e\u3002\u8fd9\u542f\u53d1\u6211\u4eec\u8fdb\u884c $d - dep_x + 1$ \u6b21 \u201c\u8d1f\u64cd\u4f5c\u4e00\u201d\uff0c\u4e5f\u5c31\u662f\u628a\u9ed1\u8282\u70b9\u5438\u56de\u53bb\u3002\n\n\u5177\u4f53\u5730\uff0c\u6c42\u51fa\u6839\u5230 $x$ \u8def\u5f84\u540e\u7f00\u6700\u5927\u503c $v$\uff0c\u82e5 $v \\geq 0$ \u8bf4\u660e\u8282\u70b9 $v$ \u4e3a\u9ed1\u8272\uff0c\u9700\u8981\u6267\u884c $v + 1$ \u6b21\u8d1f\u64cd\u4f5c $1$\uff0c\u5373\u5c06 $x$ \u88ab\u6267\u884c\u64cd\u4f5c\u4e00\u7684\u6b21\u6570\u51cf\u53bb $v + 1$\u3002\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u8d4b\u503c\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u540e\u7f00\u6700\u5927\u503c\u3002\u5957\u4e0a\u6811\u5256\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n + q\\log ^ 2 n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n#define fi first\n#define se second\n#define TIME 1e3 * clock() / CLOCKS_PER_SEC\nusing ll = long long;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\ninline int read() {\n  int x = 0;\n  char s = getchar();\n  while(!isdigit(s)) s = getchar();\n  while(isdigit(s)) x = x * 10 + s - '0', s = getchar();\n  return x;\n}\ninline void print(int x) {\n  if(x < 0) return putchar('-'), print(-x);\n  if(x >= 10) print(x / 10);\n  putchar(x % 10 + '0');\n}\nbool Mbe;\nconstexpr int N = 1e5 + 5;\nbool laz[N << 2];\nint len[N << 2];\nstruct dat {\n  int sum, suf;\n  dat operator + (const dat &x) {return {sum + x.sum, max(x.suf, suf + x.sum)};}\n} val[N << 2];\nvoid tag(int x) {val[x] = {-len[x], -1}, laz[x] = 1;}\nvoid down(int x) {if(laz[x]) tag(x << 1), tag(x << 1 | 1), laz[x] = 0;}\nvoid build(int l, int r, int x) {\n  len[x] = r - l + 1, val[x] = {-len[x], -1};\n  if(l == r) return;\n  int m = l + r >> 1;\n  build(l, m, x << 1), build(m + 1, r, x << 1 | 1);\n}\nvoid modify(int l, int r, int ql, int qr, int x) {\n  if(ql <= l && r <= qr) return tag(x);\n  int m = l + r >> 1;\n  down(x);\n  if(ql <= m) modify(l, m, ql, qr, x << 1);\n  if(m < qr) modify(m + 1, r, ql, qr, x << 1 | 1);\n  val[x] = val[x << 1] + val[x << 1 | 1];\n}\nvoid toggle(int l, int r, int p, int x, int v, int type) {\n  if(l == r) return val[x].sum = val[x].suf = type ? v : val[x].sum + v, void();\n  int m = l + r >> 1;\n  down(x);\n  if(p <= m) toggle(l, m, p, x << 1, v, type);\n  else toggle(m + 1, r, p, x << 1 | 1, v, type);\n  val[x] = val[x << 1] + val[x << 1 | 1];\n}\ndat query(int l, int r, int ql, int qr, int x) {\n  if(ql <= l && r <= qr) return val[x];\n  int m = l + r >> 1;\n  dat ans = {0, -1};\n  down(x);\n  if(m < qr) ans = query(m + 1, r, ql, qr, x << 1 | 1) + ans;\n  if(ql <= m) ans = query(l, m, ql, qr, x << 1) + ans;\n  return ans;\n}\nint n, q;\nvector<int> e[N];\nint sz[N], dep[N], fa[N], son[N];\nint dn, dfn[N], top[N];\nvoid dfs1(int id) {\n  sz[id] = 1, dep[id] = fa[id] + 1;\n  for(int it : e[id]) {\n    dfs1(it), sz[id] += sz[it];\n    if(sz[it] > sz[son[id]]) son[id] = it;\n  }\n}\nvoid dfs2(int id, int tp) {\n  dfn[id] = ++dn, top[id] = tp;\n  if(son[id]) dfs2(son[id], tp);\n  for(int it : e[id]) if(it != son[id]) dfs2(it, it);\n}\nbool Med;\nint main() {\n  fprintf(stderr, \"%.3lf MB\\n\", (&Mbe - &Med) / 1048576.0);\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"1.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"1.out\", \"w\", stdout);\n  #endif\n  ios::sync_with_stdio(0);\n  cin >> n >> q;\n  for(int i = 2; i <= n; i++) cin >> fa[i], e[fa[i]].push_back(i);\n  dfs1(1), dfs2(1, 1);\n  build(1, n, 1);\n  for(int i = 1; i <= q; i++) {\n    int op, x;\n    cin >> op >> x;\n    if(op == 1) toggle(1, n, dfn[x], 1, 1, 0);\n    if(op == 2) {\n      modify(1, n, dfn[x], dfn[x] + sz[x] - 1, 1);\n      dat cur = {0, -1};\n      int u = fa[x];\n      while(u) cur = query(1, n, dfn[top[u]], dfn[u], 1) + cur, u = fa[top[u]];\n      if(cur.suf >= 0) toggle(1, n, dfn[x], 1, -cur.suf - 1, 1);\n    }\n    if(op == 3) {\n      dat cur = {0, -1};\n      while(x && cur.suf < 0) cur = query(1, n, dfn[top[x]], dfn[x], 1) + cur, x = fa[top[x]];\n      if(cur.suf >= 0) puts(\"black\");\n      else puts(\"white\");\n    }\n  }\n  cerr << TIME << \" ms\\n\";\n  return 0;\n}\n/*\n2022/9/8\nauthor: Alex_Wei\nstart coding at 13:00\nfinish debugging at 13:45\n*/\n```",
        "postTime": 1662694595,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1017G The Tree"
    },
    {
        "content": "\u5e76\u4e0d\u660e\u767d\u5927\u5bb6\u4e3a\u4ec0\u4e48\u5199\u5f97\u8fd9\u4e48\u77ed\n\n---\n\n## \u4e0d\u8003\u8651\u5168\u90e8\u67d3\u767d\u7684\u60c5\u51b5\n\n\n\n\u663e\u7136,\u64cd\u4f5c\u4e4b\u95f4\u662f\u6ca1\u6709\u987a\u5e8f\u7684.\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u67d3\u8272\u7684\u6b21\u6570 $wal$,\u4ee5\u53ca\u5230\u6839\u7684\u67d3\u8272\u6b21\u6570 $depth$.\u5982\u679c $a$ \u6700\u540e\u4e3a\u9ed1\u8272,\u90a3\u4e48\u5176\u5145\u8981\u6761\u4ef6\u4e3a\u5b58\u5728\u4e00\u4e2a $b$,\u6ee1\u8db3 $depth_a-depth_b+wal_b\\geq deep_a-deep_b+1$\n\n\u79fb\u9879\u5f97 $depth_b-deep_b-w_b\\leq depth_a-deep_a-1$\n\n\u67e5\u8be2\u7684\u65f6\u5019\u67e5\u8be2\u4e00\u4e0b\u6839\u5230\u81ea\u5df1\u6700\u5927\u503c\u5373\u53ef,\u4fee\u6539\u7684\u65f6\u5019\u5b50\u6811\u52a0\u5373\u53ef\n\n\n\n## \u8003\u8651\u5168\u90e8\u67d3\u767d\u7684\u60c5\u51b5\n\n\u9996\u5148\u5f53\u7136\u9700\u8981\u6e05\u7a7a\u5b50\u6811\u5185\u6240\u6709\u70b9\u7684\u67d3\u8272\u6b21\u6570,\u5e76\u5c06\u7ef4\u62a4 $depth$.\u5982\u679c\u5b50\u6811\u7684\u6839\u8282\u70b9 $y$ \u6b64\u65f6\u4e3a\u767d\u8272,\u90a3\u4e48\u5f53\u7136\u65e0\u4e8b\u53d1\u751f.\u4f46\u662f,\u5982\u679c $y$ \u6b64\u65f6\u4e3a\u9ed1\u8272,\u90a3\u4e48\u8bf4\u660e $y$ \u7684\u7956\u5148\u4f1a\u5bf9 $y$ \u53ca\u5176\u5b50\u6811\u5185\u7684\u70b9\u4ea7\u751f\u5f71\u54cd.\n\n\u8003\u8651\u5982\u679c $y$ \u4e0d\u4f1a\u88ab\u5f71\u54cd,\u90a3\u4e48\u5176\u5b50\u6811\u5185\u7684\u5176\u4f59\u6240\u6709\u70b9\u90fd\u4e0d\u4f1a\u88ab\u5f71\u54cd.\u90a3\u5c31\u7ed9 $wal_y$ (\u4ee5\u53ca $depth_y$ )\u52a0\u4e0a\u4e00\u4e2a\u6700\u5c0f\u7684\u6743\u503c $c$ ,\u6ee1\u8db3 $\\min_{b\\text{\u4e3a}y\\text{\u7684\u7956\u5148}}\\{depth_b-deep_b-w_b\\}>depth_y-deep_y-1+c$\n\n\u79fb\u9879\u5f97 $c=\\min_{b\\text{\u4e3a}y\\text{\u7684\u7956\u5148}}\\{depth_b-deep_b-wal_b\\}-depth_y+deep_y$\n\n\u90a3\u4e48,\u6211\u4eec\u5728\u6811\u5256\u4e4b\u540e\u9700\u8981\u4e00\u9897\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u4e00\u4e0b\u64cd\u4f5c\n\n- \u533a\u95f4\u52a0 $depth$\n- \u533a\u95f4\u8d4b\u503c $depth$\n- \u5355\u70b9\u4fee\u6539 $wal$\n- \u533a\u95f4\u6e05\u96f6 $wal$\n- \u5355\u70b9\u52a0 $wal$\n- \u533a\u95f4\u67e5\u8be2 $depth-deep-wal$ \u6700\u5c0f\u503c\n- \u5355\u70b9\u67e5\u8be2 $depth$\n\n## \u4ee3\u7801\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define Ri register\ntemplate<typename T>inline T read(Ri T&t)\n{Ri T f=1;Ri char ch=getchar();t=0;\nwhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();}\nwhile(ch>='0'&&ch<='9')t=t*10+ch-'0',ch=getchar();t*=f;return t;}\ntemplate<typename T,typename...Args>\ninline void read(T&t,Args&...args)\n{read(t);read(args...);}\nconst long long p=998244353;\ninline long long power(Ri long long x,Ri long long k=p-2)\n{Ri long long re=1;for(;k;k>>=1,x=x*x%p)if(k&1)re=re*x%p;return re;}\nint n,Q;\nint head[100005],ne[200005],to[200005],total=1;\ninline void add(int a,int b)\n{\n\ttotal++;\n\tto[total]=b;\n\tne[total]=head[a];\n\thead[a]=total;\n}\nint deep[100005];\nint size[100005];\nint fa[100005],son[100005];\nint id[100005],id_top;\nint fid[100005];\nint top[100005];\nvoid dfs1(int now)\n{\n\tsize[now]=1;\n\tdeep[now]=deep[fa[now]]+1;\n\tfor(int i=head[now];i;i=ne[i])\n\t\tif(to[i]!=fa[now])\n\t\t{\n\t\t\tfa[to[i]]=now;\n\t\t\tdfs1(to[i]);\n\t\t\tsize[now]+=size[to[i]];\n\t\t\tif(size[to[i]]>size[son[now]])son[now]=to[i];\n\t\t}\n}\nvoid dfs2(int now,int topf)\n{\n\ttop[now]=topf;\n\tid[now]=++id_top;\n\tfid[id_top]=now;\n\tif(son[now])dfs2(son[now],topf);\n\tfor(int i=head[now];i;i=ne[i])\n\t\tif(to[i]!=fa[now]&&to[i]!=son[now])\n\t\t\tdfs2(to[i],to[i]);\n}\nstruct SGT\n{\n\tint lcs,rcs;\n\tint Depth,Wal;\n\tint value;//deep+Depth-Wal\u7684\u6700\u5927\u503c \n\tint Add_lazy,Rev_lazy;//\u5179\u78c1\u533a\u95f4\u52a0depth,\u533a\u95f4\u8d4b\u503cdepth\n\tbool Cle_lazy;//\u5179\u78c1\u533a\u95f4\u6e05\u96f6wal,\u5355\u70b9\u4fee\u6539wal,\u5355\u70b9\u52a0wal \n\tint min_Depth_Deep;//\u7528\u6765\u5728\u533a\u95f4\u6e05\u96f6Wal\u4e4b\u540e\u7ef4\u62a4value \\min\\{depth+deep\\}\n\tint min_Depth_Wal;//\u7528\u6765\u5728\u533a\u95f4\u8d4b\u503cdepth\u4e4b\u540e\u7ef4\u62a4value \\min\\{deep-wal\\}  \n\tint min_Deep;//\u7528\u6765\u5728\u533a\u95f4\u6e05\u96f6Wal\u548c\u533a\u95f4\u8d4b\u503cdepth\u4e4b\u540e\u7ef4\u62a4 mDD,mDW \\min\\{deep\\}\n\t \n\t#define mid ((l+r)>>1)\n\t#define lc v[p].lcs\n\t#define rc v[p].rcs\n\t#define depth v[p].Depth\n\t#define wal v[p].Wal\n\t#define val v[p].value\n\t#define a_laz v[p].Add_lazy\n\t#define r_laz v[p].Rev_lazy\n\t#define c_laz v[p].Cle_lazy\n\t#define mDD v[p].min_Depth_Deep\n\t#define mDW v[p].min_Depth_Wal\n\t#define mD v[p].min_Deep\n}v[200005];\nint tot;\nvoid build(int l,int r,int & p)\n{\n\tp=++tot;\n\tr_laz=-1;\n\tif(l==r)return mD=mDD=mDW=val=-deep[fid[l]],void();\n\tbuild(l,mid,lc);\n\tbuild(mid+1,r,rc);\n\tmD=min(v[lc].min_Deep,v[rc].min_Deep);\n\tmDD=min(v[lc].min_Depth_Deep,v[rc].min_Depth_Deep);\n\tmDW=min(v[lc].min_Depth_Wal,v[rc].min_Depth_Wal);\n\tval=min(v[lc].value,v[rc].value);\n\tif(val==v[lc].value)wal=v[lc].Wal,depth=v[lc].Depth;\n\tif(val==v[rc].value)wal=v[rc].Wal,depth=v[rc].Depth;\n}\nvoid push_down(int l,int r,int p)//\u6ce8\u610f\u4e0b\u653e\u987a\u5e8f\u548c\u6807\u8bb0\u6e05\u7a7a \n{\n\tif(r_laz!=-1)\n\t{\n\t\tv[lc].Rev_lazy=r_laz;\n\t\tv[rc].Rev_lazy=r_laz;\n\t\tv[lc].Add_lazy=0;\n\t\tv[rc].Add_lazy=0;\n\t\tv[lc].min_Depth_Deep=v[lc].min_Deep+r_laz;\n\t\tv[rc].min_Depth_Deep=v[rc].min_Deep+r_laz;\n\t\tv[lc].value=v[lc].min_Depth_Wal+r_laz;\n\t\tv[rc].value=v[rc].min_Depth_Wal+r_laz;\n\t\tv[lc].Depth=r_laz;\n\t\tv[rc].Depth=r_laz;\n\t\tr_laz=-1;\n\t}\n\tif(a_laz)\n\t{\n\t\tv[lc].Add_lazy+=a_laz;\n\t\tv[rc].Add_lazy+=a_laz;\n\t\tv[lc].value+=a_laz;\n\t\tv[rc].value+=a_laz;\n\t\tv[lc].Depth+=a_laz;\n\t\tv[rc].Depth+=a_laz;\n\t\tv[lc].min_Depth_Deep+=a_laz;\n\t\tv[rc].min_Depth_Deep+=a_laz;\n\t\ta_laz=0; \n\t}\n\tif(c_laz)\n\t{\n\t\tv[lc].Cle_lazy=c_laz;\n\t\tv[rc].Cle_lazy=c_laz;\n\t\tv[lc].value=v[lc].min_Depth_Deep;\n\t\tv[rc].value=v[rc].min_Depth_Deep;\n\t\tv[lc].Wal=0;\n\t\tv[rc].Wal=0;\n\t\tv[lc].min_Depth_Wal=v[lc].min_Deep;\n\t\tv[rc].min_Depth_Wal=v[rc].min_Deep;\n\t\tc_laz=0;\n\t}\n}\nvoid push_up(int l,int r,int p)\n{\n\tval=min(v[lc].value,v[rc].value);\n\tif(val==v[lc].value)wal=v[lc].Wal,depth=v[lc].Depth;\n\tif(val==v[rc].value)wal=v[rc].Wal,depth=v[rc].Depth;\n\tmDD=min(v[lc].min_Depth_Deep,v[rc].min_Depth_Deep);\n\tmDW=min(v[lc].min_Depth_Wal,v[rc].min_Depth_Wal);\n}\nvoid revise1(int l,int r,int p,int nl,int nr,int vals)//\u533a\u95f4\u52a0depth\n{\n\tif(nl<=l&&r<=nr)\n\t{\n\t\tval+=vals;\n\t\tdepth+=vals;\n\t\tmDD+=vals;\n\t\ta_laz+=vals;\n\t\treturn;\n\t}\n\tpush_down(l,r,p);\n\tif(nl<=mid)revise1(l,mid,lc,nl,nr,vals);\n\tif(mid+1<=nr)revise1(mid+1,r,rc,nl,nr,vals);\n\tpush_up(l,r,p);\n}\nvoid revise2(int l,int r,int p,int nl,int nr,int vals)//\u533a\u95f4\u8d4b\u503cdepth\n{\n\tif(nl<=l&&r<=nr)\n\t{\n\t\tval=mDW+vals;\n\t\tdepth=vals;\n\t\tmDD=mD+vals;\n\t\ta_laz=0;\n\t\tr_laz=vals;\n\t\treturn;\n\t}\n\tpush_down(l,r,p);\n\tif(nl<=mid)revise2(l,mid,lc,nl,nr,vals);\n\tif(mid+1<=nr)revise2(mid+1,r,rc,nl,nr,vals);\n\tpush_up(l,r,p);\n}\nvoid revise3(int l,int r,int p,int pos,int vals)//\u5355\u70b9\u4fee\u6539wal\n{\n\tif(l==r&&l==pos)\n\t{\n\t\twal=vals;\n\t\tval=mDD+wal;\n\t\tmDW=mD+vals;\n\t\treturn;\n\t}\n\tpush_down(l,r,p);\n\tif(pos<=mid)revise3(l,mid,lc,pos,vals);\n\tif(mid+1<=pos)revise3(mid+1,r,rc,pos,vals);\n\tpush_up(l,r,p);\n}\nvoid revise4(int l,int r,int p,int nl,int nr)//\u533a\u95f4\u6e05\u96f6wal\n{\n\tif(nl<=l&&r<=nr)\n\t{\n\t\twal=0;\n\t\tval=mDD;\n\t\tmDW=mD;\n\t\tc_laz=1;\n\t\treturn;\n\t}\n\tpush_down(l,r,p);\n\tif(nl<=mid)revise4(l,mid,lc,nl,nr);\n\tif(mid+1<=nr)revise4(mid+1,r,rc,nl,nr);\n\tpush_up(l,r,p);\n}\nvoid revise5(int l,int r,int p,int pos,int vals)//\u5355\u70b9\u52a0wal\n{\n\tif(l==r&&l==pos)\n\t{\n\t\twal+=vals;\n\t\tval-=vals;\n\t\tmDW-=vals;\n\t\treturn;\n\t}\n\tpush_down(l,r,p);\n\tif(pos<=mid)revise5(l,mid,lc,pos,vals);\n\tif(mid+1<=pos)revise5(mid+1,r,rc,pos,vals);\n\tpush_up(l,r,p);\n}\nint enquire(int l,int r,int p,int nl,int nr)//\u533a\u95f4\u67e5\u8be2value\u6700\u5c0f\u503c\n{\n\tif(nl<=l&&r<=nr)return val;\n\tpush_down(l,r,p);\n\tint re=1e9;\n\tif(nl<=mid)re=min(re,enquire(l,mid,lc,nl,nr));\n\tif(mid+1<=nr)re=min(re,enquire(mid+1,r,rc,nl,nr));\n\treturn re;\n}\nint enquire(int l,int r,int p,int pos)//\u5355\u70b9\u67e5\u8be2depth\n{\n\tif(l==r&&l==pos)return depth;\n\tpush_down(l,r,p);\n\tif(pos<=mid)return enquire(l,mid,lc,pos);\n\tif(mid+1<=pos)return enquire(mid+1,r,rc,pos);\n}\nint enquire(int x)//\u67e5\u8be2\u5230\u6839\u7684value\u6700\u5927\u503c \n{\n\tint re=1e9;\n\twhile(x)\n\t{\n\t\tre=min(re,enquire(1,n,1,id[top[x]],id[x]));\n\t\tx=fa[top[x]];\n\t}\n\treturn re;\n}\n\nint main()\n{\n\tread(n,Q);\n\tfor(int i=2,x;i<=n;i++)\n\t\tread(x),\n\t\tadd(x,i),\n\t\tadd(i,x);\n\tdfs1(1);dfs2(1,1);\n\tint root;build(1,n,root);\n\twhile(Q--)\n\t{\n\t\tint opt,x;read(opt,x);\n\t\tif(opt==1)\n\t\t{\n\t\t\trevise1(1,n,1,id[x],id[x]+size[x]-1,1);\n\t\t\trevise5(1,n,1,id[x],1);\n\t\t}\n\t\tif(opt==2)\n\t\t{\n\t\t\trevise4(1,n,1,id[x],id[x]+size[x]-1);\n\t\t\tint fmax;\n\t\t\tif(fa[x])fmax=enquire(1,n,1,id[fa[x]]);\n\t\t\telse fmax=0;\n\t\t\trevise2(1,n,1,id[x],id[x]+size[x]-1,fmax);\n\t\t\tint mx=enquire(x);\n\t\t\tint mi=enquire(1,n,1,id[x]);\n\t\t\tint c=mx-mi+deep[x];\n\t\t\tif(c<0)\n\t\t\t{\n\t\t\t\trevise5(1,n,1,id[x],c);\n\t\t\t\trevise1(1,n,1,id[x],id[x],c);\n\t\t\t}\n\t\t\tint X=enquire(1,n,1,id[x]);\n\t\t\trevise2(1,n,1,id[x],id[x]+size[x]-1,X); \n\t\t}\n\t\tif(opt==3)\n\t\t{\n\t\t\tint mx=enquire(x);\n\t\t\tint mi=enquire(1,n,1,id[x]);\n\t\t\tif(mx<=mi-deep[x]-1)printf(\"black\\n\");\n\t\t\telse printf(\"white\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1600752629,
        "uid": 114409,
        "name": "9AC8E2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1017G \u3010The Tree\u3011"
    },
    {
        "content": "\u8bbe $f(x)$ \u8868\u793a $x$ \u5230\u6839\u8fd9\u6bb5\u91cc\u9762\u6709\u51e0\u4e2a\u767d\u70b9\u3002\n\n- \u64cd\u4f5c 1\uff1a\u5c06\u67d0\u4e2a dfs \u5e8f\u533a\u95f4\u5185 $f(l)\\sim f(r)$ \u4e2d\u7684\u6bcf\u4e2a\u6570 $x$ \u6539\u4e3a $\\max(x-1,A)$\uff08$A=f(fa)$\uff09\u3002\n- \u64cd\u4f5c 2\uff1a\u5148\u67e5\u8be2 $f(fa)$\uff0c\u5c06\u533a\u95f4\u5185\u7b2c $i$ \u4e2a\u6570\u6539\u4e3a $d_i+B$\u3002$d$ \u8868\u793a\u6df1\u5ea6\u3002\n- \u64cd\u4f5c 3\uff1a\u67e5\u8be2 $f(x),f(fa)$\u3002\n\n\u8fd9\u4e1c\u897f\u663e\u7136\u53ef\u4ee5\u5206\u5757\u7ef4\u62a4\uff0c\u6253\u4e24\u4e2a\u6807\u8bb0\n\n- \u5757\u5185\u662f\u5426\u5168\u90e8\u6539\u4e3a\u4e86 $d$ \u6570\u7ec4\u52a0\u4e0a\u67d0\u4e2a\u503c\n- \u73b0\u5728\u5757\u5185\u7684\u6240\u6709 $x\\to \\max(x+P,Q)$ \u4e86\uff08\u5982\u679c\u6709\u7b2c\u4e00\u4e2a\u6807\u8bb0\uff0c$x$ \u5c31\u7b49\u4e8e $d_i$\uff0c\u5426\u5219 $x$ \u5c31\u7b49\u4e8e\u5757\u4e0a\u4e00\u6b21 pushdown \u540e\u7684\u503c\uff09\n\n\u67e5\u8be2\u65f6\u628a\u6807\u8bb0 pushdown\u3002\u663e\u7136\u590d\u6742\u5ea6\u662f $O(n\\sqrt n)$\u3002",
        "postTime": 1644664325,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "CF1017G The tree"
    },
    {
        "content": "[Codeforces \u9898\u9762\u4f20\u9001\u95e8](https://codeforces.ml/contest/1017/problem/G) & [\u6d1b\u8c37\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1017G)\n\n\u597d\u9898\u3002\n\n\u9996\u5148\u8fd9\u4e2a\u4fee\u6539\u64cd\u4f5c\u770b\u8d77\u6765\u5c31\u6709\u70b9\u9e21\u808b\uff0c\u6211\u4eec\u8003\u8651\u5c06\u5176\u8fdb\u884c\u8f6c\u5316\u3002\u6211\u4eec\u4e0d\u59a8\u4ece\u4fee\u6539\u5bf9\u8be2\u95ee\u7684\u8d21\u732e\u7684\u89d2\u5ea6\u6765\u770b\u5f85\u8fd9\u4e9b\u4fee\u6539\uff0c\u90a3\u4e48\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $x$\uff0c\u4e00\u4e2a\u70b9 $y$ \u7684\u4fee\u6539\u80fd\u591f\u4f7f $x$ \u53d8\u6210\u9ed1\u8272\uff0c\u5f53\u4e14\u4ec5\u5f53 $y$ \u662f $x$ \u7684\u7956\u5148\uff0c\u5e76\u4e14 $x$ \u5230 $y$\u200b \u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684\u64cd\u4f5c\u6b21\u6570\u4e4b\u548c\u5927\u4e8e $x,y$ \u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u8fd9\u6837 $y$ \u7684\u4fee\u6539\u624d\u80fd\u5f71\u54cd\u5230 $x$\u3002\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6a21\u578b\u8fdb\u884c\u5982\u4e0b\u8f6c\u5316\uff1a\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u70b9\u6743\uff0c\u521d\u59cb\u662f $-1$\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u67d0\u4e2a\u70b9\u7684\u70b9\u6743\u52a0 $1$\uff0c\u6216\u8005\u8be2\u95ee\u4e00\u4e2a\u70b9 $x$ \u5230\u6839\u8def\u5f84\u4e0a\u662f\u5426\u5b58\u5728\u53e6\u4e00\u4e2a\u70b9 $y$\uff0c\u6ee1\u8db3 $x,y$ \u4e4b\u95f4\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u4e4b\u548c $\\ge 0$\u3002\u4e0d\u96be\u53d1\u73b0\u8be5\u95ee\u9898\u548c\u539f\u95ee\u9898\u662f\u7b49\u4ef7\u7684\uff0c\u7ebf\u6bb5\u6811 + \u6811\u94fe\u5256\u5206\u7ef4\u62a4\u540e\u7f00\u6700\u5927\u503c\u5373\u53ef\u89e3\u51b3\u3002\n\n\u5982\u679c\u6ca1\u6709 $2$ \u64cd\u4f5c\u90a3\u4e48\u95ee\u9898\u8fd9\u4e48\u505a\u5c31\u89e3\u51b3\u4e86\uff0c\u63a5\u4e0b\u6765\u8003\u8651\u600e\u6837\u5904\u7406 $2$ \u64cd\u4f5c\uff0c\u4e00\u4e2a\u5f88\u76f4\u89c2\u7684\u60f3\u6cd5\u662f\u5c06 $x$ \u5b50\u6811\u5185\u6240\u6709\u70b9\u6743\u503c\u8bbe\u4e3a $-1$\uff0c\u4f46\u662f\u95ee\u9898\u771f\u7684\u5c31\u8fd9\u4e48\u7b80\u5355\u5417\uff1f\u4e0d\u96be\u53d1\u73b0\u6709\u53ef\u80fd\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u5728 clear $x$ \u7684\u5b50\u6811\u4e4b\u524d\uff0c$x$ \u7684\u7236\u4eb2\u8fdb\u884c\u4e86\u5f88\u591a\u6b21\u64cd\u4f5c\u5bfc\u81f4\u70b9\u6743\u5f88\u5927\uff0c\u6b64\u65f6\u4f60\u5373\u4fbf\u628a $x$ \u6743\u503c\u8bbe\u4e3a $-1$\uff0c$x$ \u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u6743\u503c\u7684\u6700\u5927\u524d\u7f00\u548c\u8fd8\u662f $\\ge 0$\u3002\u600e\u4e48\u529e\u5462\uff1f\u7531\u4e8e\u6211\u4eec\u5f3a\u5236\u8981\u5c06 $x$ \u7684\u6743\u503c\u8bbe\u4e3a $-1$\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u9002\u5f53\u51cf\u5c0f $x$ \u70b9\u7684\u6743\u503c\uff0c\u4f7f\u5f97 $x$ \u70b9\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5927\u524d\u7f00\u548c $=-1$\uff0c\u5f88\u660e\u663e\uff0c\u6211\u4eec\u9700\u8981\u8ba9 $x$ \u70b9\u7684\u6743\u503c\u51cf\u53bb $\\text{\u6b64\u65f6 }x\\text{ \u70b9\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5927\u524d\u7f00\u548c}+1$\uff0c\u76f4\u63a5\u7ebf\u6bb5\u6811\u4e0a\u5355\u70b9\u4fee\u6539\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $n\\log^2n$\u3002\n\n```cpp\nconst int MAXN = 1e5;\nconst int INF = 0x3f3f3f3f;\nint n, qu, hd[MAXN + 5], to[MAXN + 5], nxt[MAXN + 5], ec = 0;\nvoid adde(int u, int v) {to[++ec] = v; nxt[ec] = hd[u]; hd[u] = ec;}\nint fa[MAXN + 5], siz[MAXN + 5], wson[MAXN + 5], dep[MAXN + 5];\nint top[MAXN + 5], dfn[MAXN + 5], edt[MAXN + 5], tim = 0;\nvoid dfs1(int x) {\n\tsiz[x] = 1;\n\tfor (int e = hd[x]; e; e = nxt[e]) {\n\t\tint y = to[e]; dep[y] = dep[x] + 1; dfs1(y); siz[x] += siz[y];\n\t\tif (siz[y] > siz[wson[x]]) wson[x] = y;\n\t}\n}\nvoid dfs2(int x, int tp) {\n\ttop[x] = tp; dfn[x] = ++tim; if (wson[x]) dfs2(wson[x], tp);\n\tfor (int e = hd[x]; e; e = nxt[e]) if (to[e] != wson[x]) dfs2(to[e], to[e]);\n\tedt[x] = tim;\n}\nstruct dat {\n\tint sum, mxsuf;\n\tdat() {sum = mxsuf = 0;}\n\tfriend dat operator + (dat x, dat y) {\n\t\tdat res; res.sum = x.sum + y.sum;\n\t\tres.mxsuf = max(y.mxsuf, y.sum + x.mxsuf);\n\t\treturn res;\n\t}\n};\nstruct node {int l, r, tg; dat v;} s[MAXN * 4 + 5];\nvoid pushup(int k) {s[k].v = s[k << 1].v + s[k << 1 | 1].v;}\nvoid build(int k, int l, int r) {\n\ts[k].l = l; s[k].r = r; if (l == r) return s[k].v.sum = s[k].v.mxsuf = -1, void();\n\tint mid = l + r >> 1; build(k << 1, l, mid); build(k << 1 | 1, mid + 1, r); pushup(k);\n}\nvoid tag(int k) {s[k].tg = 1; s[k].v.sum = -(s[k].r - s[k].l + 1); s[k].v.mxsuf = -1;}\nvoid pushdown(int k) {if (s[k].tg) tag(k << 1), tag(k << 1 | 1), s[k].tg = 0;}\nvoid assign(int k, int l, int r) {\n\tif (l <= s[k].l && s[k].r <= r) return tag(k), void(); pushdown(k); int mid = s[k].l + s[k].r >> 1;\n\tif (r <= mid) assign(k << 1, l, r); else if (l > mid) assign(k << 1 | 1, l, r);\n\telse assign(k << 1, l, mid), assign(k << 1 | 1, mid + 1, r); pushup(k);\n}\nvoid modify(int k, int p, int v) {\n\tif (s[k].l == s[k].r) return s[k].v.sum += v, s[k].v.mxsuf += v, void(); pushdown(k);\n\tint mid = s[k].l + s[k].r >> 1; (p <= mid) ? modify(k << 1, p, v) : modify(k << 1 | 1, p, v); pushup(k);\n}\ndat query(int k, int l, int r) {\n\tif (l <= s[k].l && s[k].r <= r) return s[k].v; pushdown(k); int mid = s[k].l + s[k].r >> 1;\n\tif (r <= mid) return query(k << 1, l, r); else if (l > mid) return query(k << 1 | 1, l, r);\n\telse return query(k << 1, l, mid) + query(k << 1 | 1, mid + 1, r);\n}\nint askmx(int x) {\n\tint csum = 0, mx = -INF;\n\twhile (x) {\n\t\tdat D = query(1, dfn[top[x]], dfn[x]);\n\t\tchkmax(mx, csum + D.mxsuf); csum += D.sum;\n\t\tx = fa[top[x]];\n\t}\n//\tprintf(\"%d\\n\", mx);\n\treturn mx;\n}\nint main() {\n\tscanf(\"%d%d\", &n, &qu);\n\tfor (int i = 2; i <= n; i++) scanf(\"%d\", &fa[i]), adde(fa[i], i);\n\tdfs1(1); dfs2(1, 1); build(1, 1, n);\n//\tfor (int i = 1; i <= n; i++) printf(\"%d%c\", top[i], \" \\n\"[i == n]);\n//\tfor (int i = 1; i <= n; i++) printf(\"%d %d\\n\", dfn[i], edt[i]);\n\twhile (qu--) {\n\t\tint opt, x; scanf(\"%d%d\", &opt, &x);\n\t\tif (opt == 1) modify(1, dfn[x], 1);\n\t\telse if (opt == 2) {\n\t\t\tif (dfn[x] != edt[x]) assign(1, dfn[x] + 1, edt[x]);\n\t\t\tmodify(1, dfn[x], -(askmx(x) + 1));\n\t\t} else printf(\"%s\\n\", (askmx(x) >= 0) ? \"black\" : \"white\");\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1641136989,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1017G The Tree"
    },
    {
        "content": "[**Linker**](https://www.luogu.org/problem/CF1017G)\n\n> \u505a\u6cd5\uff1a\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\n\n\u9996\u5148$O(n^2)$\u7684\u66b4\u529b\u8fd8\u662f\u633a\u597d\u60f3\u7684\uff0c\u5c31\u4e0d\u591a\u9610\u8ff0\u4e86\u3002\n\n\u7136\u540e\u770b\u6ca1\u67092\u64cd\u4f5c\u7684\u8be5\u600e\u4e48\u5199\u3002\n\n\u5f53\u6ca1\u67092\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u79cd\u7279\u6b8a\u7684\u5f62\u5f0f\u6765\u8bb0\u5f55\u70b9\u7684\u67d3\u8272\uff1a\u901a\u8fc7\u7ed9\u8fd9\u4e2a\u70b9\u52a0\u6743\u503c\u3002\n\n\u5047\u8bbex\u662fy\u7684\u7956\u5148\uff0c\u82e5x\u53ef\u4ee5\u5f71\u54cd\u5230y\u7684\u8bdd\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u9700\u8981\u6ee1\u8db3\u7684\u6027\u8d28\u5c31\u662f $x\\to y\\ \\text{\u8fd9\u4e00\u6bb5\u8def\u4e0a\u7684\u603b\u6743\u503c}>=dep[x]-dep[y]+1$\n\n\u8bb0\u5f55\u8fd9\u4e00\u6bb5\u8def\u4e0a\u7684\u603b\u6743\u503c\u4e3a$dis$\uff0c\u79fb\u9879\u5f97\u5230 $dis+dep[x]>=dep[y]+1$\n\n\u5229\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4$dis+dep[x]$,\u7136\u540e\u5bf9\u4e8e\u5411\u4e0a\u8df3\u7684\u8fc7\u7a0b\u76f4\u63a5\u6811\u94fe\u5256\u5206\u5411\u4e0a\u8df3\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u901a\u8fc7\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u5c31\u80fd\u5199\u51fa\u6765\u3002\u8fd9\u91cc\u4ee3\u7801\u5c31\u4e0d\u653e\u51fa\u6765\u4e86\u3002\n\n\u518d\u770b\u5982\u679c\u6709\u4e862\u64cd\u4f5c\u6211\u4eec\u8be5\u5982\u4f55\u5199\u3002\n\n\u9996\u5148\u628a\u8fd9\u4e00\u6574\u8bfe\u5b50\u6811\u6e05\u7a7a\u662f\u80af\u5b9a\u8981\u7684\u3002\n\n\u7136\u540e\u5c31\u770b\u5982\u679c\u7956\u5148\u7684$dis$\u7684\u5f71\u54cd\u5230\u4e86\u4e0b\u9762\u7684\u8282\u70b9\u8be5\u5982\u4f55\u64cd\u4f5c\u3002\n\n\u518d\u6765\u770b\u770b\u521a\u521a\u7684\u5f0f\u5b50 : $dis+dep[x]>=dep[y]+1$\n\n\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u627e\u5230x\u7684\u7956\u5148\u7684$dis+dep$\u7684**\u6700\u5927\u503c**(\u5176\u5b9e\u5c31\u662f\u518d\u5f80\u4e0a\u8df3\u4e00\u904d),\u4e5f\u4f1a\u5f71\u54cd\u5230\u4ed6\u7684\u5b50\u6811(\u867d\u7136\u8bf4\u5b50\u6811\u7684\u6bcf\u4e2a\u70b9\u7684$dis+dep$\u5df2\u7ecf\u6e05\u96f6\u4e86\uff0c\u4f46\u662f\u8fd8\u662f\u53ef\u4ee5\u4ece\u4e0a\u9762\u8f6c\u79fb\u4e0b\u6765)\n\n\u4e8e\u662f\u6211\u4eec\u627e\u5230\u8fd9\u4e2a\u503c\u4ee5\u540e\uff0c\u518d\u8ba9x\u7684\u6743\u503c\u51cf\u53bb\u5b83\u5c31\u597d\u4e86(\u76f8\u5f53\u4e8e\u5dee\u5206)\n\n```cpp\n//\u4ee3\u7801\u5f88\u4e11\uff0c\u52ff\u55b7\n#include<bits/stdc++.h>\n#define re register\n#define rep(i,a,b) for(re int i=a,i##end=b; i<=i##end; i++)\n#define drep(i,a,b) for(re int i=a,i##end=b; i>=i##end; i--)\n#define repp(i,a,b) for(re int i=a,i##end=b; i<i##end; i++)\n#define drepp(i,a,b) for(re int i=a,i##end=b; i>i##end; i--)\n#define Erep(i,x) for(re int i=head[x]; i; i=Edge[i].nxt)\n#define lowbit(x) ((x)&-(x))\n#define debug(x) cerr<<#x<<\" = \"<<x<<endl\n#define ms(x,a) memset(x,a,sizeof x)\n#define PII pair<int,int>\n#define PLL pair<ll,ll>\n#define fi first\n#define se second\n#define coint const int\n#define coll const ll\n#define CM cerr<<(&S2-&S1)/1024./1024.<<\"MB\"<<endl\ntypedef long long ll;\nusing namespace std;\ntemplate<class T>inline T rd(){\n\tstatic char ch;static bool neg;static T x;\n\tfor(ch=0, neg=0; ch>'9'||ch<'0'; neg|=(ch=='-'),ch=getchar());\n\tfor(x=0; ch>='0'&&ch<='9'; x=(x<<1)+(x<<3)+(ch^'0'),ch=getchar());\n\treturn neg?-x:x;\n}\ntemplate<class T>inline T Max(const T &x, const T &y) { return x>y?x:y; }\ntemplate<class T>inline T Min(const T &x, const T &y) { return x<y?x:y; }\n\ncoint N=100000+5,M=200000+5;\nstruct edge{\n\tint to,nxt;\n}Edge[N<<1];\nint head[N],tcnt;\ninline void AddEdge(coint u, coint v){\n\tEdge[++tcnt]=(edge)<%v,head[u]%>;\n\thead[u]=tcnt; return;\n}\n\nstruct Ask{\n\tint opt,x;\n\tinline void read() { opt=rd<int>(); x=rd<int>(); return; }\n}ask[M];\n\nint n,m;\n\nint dep[N],f[N],sz[N],son[N],top[N],L[N],R[N],ID[N],dfn;\n\nvoid pre_dfs(coint x, coint fa){\n\tint &SZ=sz[x],&SON=son[x]; SZ=1;\n\tErep(i,x){\n\t\tint y=Edge[i].to;\n\t\tif(y==fa) continue;\n\t\tdep[y]=dep[x]+1; f[y]=x;\n\t\tpre_dfs(y,x);\n\t\tSZ+=sz[y];\n\t\tSON=(sz[SON]<sz[y]?y:SON);\n\t}\n\treturn;\n}\n\nvoid dfs_top(coint x, coint fa, coint tp){\n\ttop[x]=tp; L[x]=++dfn; ID[dfn]=x;\n\tcoint &SON=son[x];\n\tif(SON) dfs_top(SON,x,tp);\n\tErep(i,x){\n\t\tint y=Edge[i].to;\n\t\tif(y==fa || y==SON) continue;\n\t\tdfs_top(y,x,y);\n\t} R[x]=dfn;\n\treturn;\n}\n\nstruct node{\n\tint sum,mx;\n\tfriend node operator + (const node &x, const node &y){\n\t\treturn (node)<%x.sum+y.sum,Max(x.mx+y.sum,y.mx)%>;\n\t}\n};\n\nstruct Segment_Tree{\n\tnode sum[N<<2];\n\tint lazy[N<<2];\n\tinline void Up(coint p){\n\t\tcoint ls=p<<1,rs=ls|1;\n\t\tsum[p]=sum[ls]+sum[rs];\n\t\treturn;\n\t}\n\tinline void Down(coint p){\n\t\tint &x=lazy[p];\n\t\tif(!x) return;\n\t\tcoint ls=p<<1,rs=ls|1;\n\t\tlazy[ls]=lazy[rs]=1;\n\t\tsum[ls]=sum[rs]=(node)<%0,0%>;\n\t\tx=0; return;\n\t}\n\tvoid Build(coint p, coint l, coint r){\n\t\tsum[p]=(node)<%0,0%>; lazy[p]=0;\n\t\tif(l==r) return;\n\t\tcoint mid=(l+r)>>1,ls=p<<1,rs=ls|1;\n\t\tBuild(ls,l,mid); Build(rs,mid+1,r);\n\t\treturn;\n\t}\n\tvoid Upd1(coint p, coint l, coint r, coint L, coint R){\n\t\tif(l==L && r==R){\n\t\t\tsum[p]=(node)<%0,0%>;\n\t\t\tlazy[p]=1;\n\t\t\treturn;\n\t\t}\n\t\tDown(p);\n\t\tcoint mid=(l+r)>>1,ls=p<<1,rs=ls|1;\n\t\tif(R<=mid) Upd1(ls,l,mid,L,R);\n\t\telse if(L>mid) Upd1(rs,mid+1,r,L,R);\n\t\telse Upd1(ls,l,mid,L,mid),Upd1(rs,mid+1,r,mid+1,R);\n\t\tUp(p); return;\n\t}\n\tvoid Upd2(coint p, coint l, coint r, coint x, coint val){\n\t\tif(l==r){\n\t\t\tsum[p]=(node)<%val,dep[ID[l]]+val%>;\n\t\t\treturn;\n\t\t}\n\t\tDown(p);\n\t\tcoint mid=(l+r)>>1,ls=p<<1,rs=ls|1;\n\t\tif(x<=mid) Upd2(ls,l,mid,x,val);\n\t\telse Upd2(rs,mid+1,r,x,val);\n\t\tUp(p); return;\n\t}\n\tnode Que(coint p, coint l, coint r, coint L, coint R){\n\t\tif(l==L && r==R) return sum[p];\n\t\tDown(p);\n\t\tcoint mid=(l+r)>>1,ls=p<<1,rs=ls|1;\n\t\tif(R<=mid) return Que(ls,l,mid,L,R);\n\t\tif(L>mid) return Que(rs,mid+1,r,L,R);\n\t\treturn Que(ls,l,mid,L,mid)+Que(rs,mid+1,r,mid+1,R);\n\t}\n}sgtr;\n\ninline int Get_Max(int x){\n\tnode res=(node)<%0,0%>;\n\tint tpx=top[x];\n\twhile(x){\n\t\tres=sgtr.Que(1,1,n,L[tpx],L[x])+res;\n\t\tx=f[tpx]; tpx=top[x];\n\t}\n\treturn res.mx;\n}\n\ninline void solve(){\n\tpre_dfs(1,0); dfs_top(1,0,1);\n\trep(i,1,m){\n\t\tcoint opt=(ask[i].opt),x=ask[i].x;\n\t\tswitch(opt){\n\t\t\tcase 1:{\n\t\t\t\tsgtr.Upd2(1,1,n,L[x],sgtr.Que(1,1,n,L[x],L[x]).sum+1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:{\n\t\t\t\tsgtr.Upd1(1,1,n,L[x],R[x]);\n\t\t\t\tint tmp=Get_Max(x);\n\t\t\t\tif(tmp>=dep[x]+1) sgtr.Upd2(1,1,n,L[x],dep[x]-tmp);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\tputs(Get_Max(x)>=dep[x]+1?\"black\":\"white\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\n\n\nint main(){\n\tn=rd<int>(),m=rd<int>();\n\trep(i,2,n){\n\t\tint x=rd<int>();\n\t\tAddEdge(x,i); AddEdge(i,x);\n\t}\n\trep(i,1,m) ask[i].read();\n\tsolve();\n\treturn 0;\n}\n\n```",
        "postTime": 1573462884,
        "uid": 81715,
        "name": "ppp204",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1017G \u3010The Tree\u3011"
    },
    {
        "content": "# \u9898\u89e3\r\n\r\n- \u6811\u94fe\u5256\u5206 $+$ \u7ebf\u6bb5\u6811\u3002\r\n\r\n- \u8003\u8651\u64cd\u4f5c $1$\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $x$\uff0c\u4e00\u4e2a\u70b9 $y$ \u7684\u4fee\u6539\u80fd\u591f\u4f7f $x$ \u53d8\u6210\u9ed1\u8272\uff0c\u5f53\u4e14\u4ec5\u5f53 $y$ \u662f $x$ \u7684\u7956\u5148\uff0c\u5e76\u4e14 $x$ \u5230 $y$ \u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684\u64cd\u4f5c\u6b21\u6570\u4e4b\u548c\u5927\u4e8e  $x,y$ \u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\r\n\r\n- \u7136\u540e\u5c06\u6a21\u578b\u8fdb\u884c\u5982\u4e0b\u8f6c\u5316\uff1a\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u70b9\u6743\uff0c\u521d\u59cb\u662f $-1$\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u67d0\u4e2a\u70b9\u7684\u70b9\u6743\u52a0 $1$\uff0c\u6216\u8005\u8be2\u95ee\u4e00\u4e2a\u70b9 $x$ \u5230\u6839\u8def\u5f84\u4e0a\u662f\u5426\u5b58\u5728\u53e6\u4e00\u4e2a\u70b9 $y$\uff0c\u6ee1\u8db3 $x,y$ \u4e4b\u95f4\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u4e4b\u548c $\\ge0$\uff0c\u7ebf\u6bb5\u6811 $+$ \u6811\u94fe\u5256\u5206\u7ef4\u62a4\u540e\u7f00\u6700\u5927\u503c\u5373\u53ef\u3002\r\n\r\n- \u63a5\u4e0b\u6765\u8003\u8651\u64cd\u4f5c $2$\uff0c\u5373\u4f7f $x$ \u548c $x$ \u5b50\u6811\u5185\u7684\u70b9\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u6743\u503c\u7684\u6700\u5927\u524d\u7f00\u548c\u4e3a $-1$\u3002\u5f88\u660e\u663e\uff0c\u6211\u4eec\u9700\u8981\u8ba9 $x$ \u70b9\u7684\u6743\u503c\u51cf\u53bb\u6b64\u65f6 $x$ \u70b9\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5927\u524d\u7f00\u548c $+1$\uff0c\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\u5373\u53ef\u3002\u6ce8\u610f\u8fd8\u9700\u5c06 $x$ \u5b50\u6811\u5185\u9664 $x$ \u7684\u70b9\u6743\u503c\u8bbe\u4e3a $-1$\u3002\r\n\r\n- \u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n \\log^2 n)$\uff0c\u4ee3\u7801\u4e0d\u653e\u4e86\u3002",
        "postTime": 1664971571,
        "uid": 333549,
        "name": "TammyZhao",
        "ccfLevel": 0,
        "title": "CF1017G The Tree \u9898\u89e3"
    },
    {
        "content": "## CF1017G\n\n### \u9898\u610f\u7b80\u8ff0\n\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n- \u7ed9\u5b9a\u4e00\u4e2a\u70b9\uff0c\u4e0d\u65ad\u5f80\u4e0b\u9012\u5f52\u76f4\u5230\u627e\u5230\u767d\u70b9\uff0c\u628a\u767d\u70b9\u67d3\u9ed1\u3002\u5982\u679c\u5f53\u524d\u70b9\u662f\u9ed1\u70b9\u8981\u9012\u5f52\u5b83\u7684\u6240\u6709\u513f\u5b50\u3002\n\n- \u5b50\u6811\u67d3\u767d\u3002\n\n- \u5355\u70b9\u67e5\u989c\u8272\u3002\n\n$1\\leq n,q\\leq 10^5$\u3002\n\n### \u9898\u76ee\u5206\u6790\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7b2c\u4e00\u79cd\u64cd\u4f5c\u5f88\u70e6\uff0c\u800c\u4e14\u67e5\u8be2\u53ea\u67e5\u5355\u70b9\uff0c\u4e0d\u96be\u60f3\u5230\u6839\u53f7\u91cd\u6784\u3002\u6211\u4eec\u5c06\u64cd\u4f5c\u7684\u65f6\u95f4\u8f74\u5206\u4e3a\u6bcf $\\sqrt{n}$ \u4e2a\u64cd\u4f5c\u4e00\u5757\uff0c\u90a3\u4e48\u6bcf\u4e00\u5757\u5185\u8003\u8651\u65f6\uff0c\u6211\u4eec\u672c\u8d28\u4e0a\u53ea\u5173\u5fc3\u8fd9\u4e00\u5757\u5185\u7684\u64cd\u4f5c\u6d89\u53ca\u5230\u7684 $\\sqrt{n}$ \u4e2a\u7ed3\u70b9\u3002\n\n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u786e\u5b9a\u7684\u5757\u600e\u4e48\u7ef4\u62a4\u5176\u4e2d\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fd9 $\\sqrt{n}$ \u4e2a\u5173\u952e\u70b9\u5efa\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u865a\u6811\u7684\u4e1c\u897f\uff0c\u5728\u6709\u7956\u5148\u5173\u7cfb\u7684\u76f8\u90bb\u4e24\u5173\u952e\u70b9\u4e4b\u95f4\u8fde\u8fb9\u3002\u8003\u8651\u6211\u4eec\u9700\u8981\u5728\u8fb9\u4e0a\u8bb0\u5f55\u4ec0\u4e48\u4fe1\u606f\uff0c\u9010\u6761\u64cd\u4f5c\u5206\u6790\uff1a\n\n- \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u53ef\u4ee5\u5728\u76f8\u90bb\u4e24\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u94fe\u4e0a\u6d88\u9664\u4e00\u4e2a\u767d\u70b9\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u8fd9\u6761\u94fe\u4e0a\u7684\u767d\u70b9\u4e2a\u6570\u3002\n\n- \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u6e05\u7a7a\u8fd9\u4e2a\u5b50\u6811\uff0c\u540c\u65f6\u91cd\u7f6e\u94fe\u4e0a\u7684\u767d\u70b9\u4e2a\u6570\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u8fd9\u6761\u94fe\u4e0a\u7684\u7ed3\u70b9\u6570\u91cf\u3002\n\n\u5bf9\u4e8e\u7ef4\u62a4\u64cd\u4f5c\u672c\u8eab\u800c\u8a00\uff0c\u56e0\u4e3a\u8fd9\u68f5\u65b0\u6811\u4e0a\u53ea\u6709 $\\sqrt{n}$ \u4e2a\u7ed3\u70b9\uff0c\u6211\u4eec\u66b4\u529b dfs \u7684\u540c\u65f6\u7ef4\u62a4\u4e0a\u8ff0\u4fe1\u606f\u5373\u53ef\u3002\u67e5\u8be2\u662f\u7b80\u5355\u7684\u3002\n\n\u73b0\u5728\u8fd8\u5269\u4e0b\u4e00\u4e2a\u95ee\u9898\uff1a\u5728\u76f8\u90bb\u4e24\u5757\u4e4b\u95f4\u5982\u4f55\u91cd\u6784\u8fd9\u4e2a\u65b0\u6811\uff1f\u6211\u4eec\u77e5\u9053\u6bcf\u4e00\u6b21\u64cd\u4f5c\u4e00\u53ef\u4ee5\u6d88\u9664\u4e00\u4e2a\u94fe\u4e0a\u7684\u767d\u70b9\uff0c\u800c\u64cd\u4f5c\u4e8c\u76f8\u5f53\u4e8e\u91cd\u7f6e\u6240\u6709\u8fd9\u4e2a\u5b50\u6811\u5185\u7684\u64cd\u4f5c\u4e00\u3002\u6211\u4eec\u5728\u64cd\u4f5c\u7684\u8fc7\u7a0b\u4e2d\u518d\u7ef4\u62a4\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u505a\u4e86\u591a\u5c11\u6b21\u64cd\u4f5c\u4e00\uff0c\u6a21\u62df\u64cd\u4f5c\u8fc7\u7a0b\u5373\u53ef\u7ef4\u62a4\u51fa\u6811\u4e0a\u7ed3\u70b9\u989c\u8272\u7684\u53d8\u5316\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt{n})$\u3002\u56e0\u4e3a\u9012\u5f52\u5e38\u6570\u6bd4\u8f83\u5927\uff0c\u5b9e\u6d4b\u53d6\u5757\u957f\u4e3a $600$ \u5de6\u53f3\u6548\u7387\u6700\u9ad8\u3002\n\nCode\uff1a\n```cpp\nconst int N=1e5+10,S=600;\nint n,q,p[N],t[N],v[N];\nvector<int>G[N];\nvector<pair<int,pii> >g[N];\nbool vis[N],clr[N],tmp[N],col[N];\nint tag[N];\nvoid init()\n{\n\tfor(int i=1;i<=n;i++)\n\t\tvis[i]=clr[i]=0,g[i].resize(0),tmp[i]=col[i],tag[i]=0;\n}\nvoid build(int u,int fa,int cnt,int d)\n{\n\tif(vis[u])\n\t{\n\t\tif(fa)g[fa].push_back({u,{cnt,d}});\n\t\tfor(int v:G[u])build(v,u,0,0);\n\t}\n\telse for(int v:G[u])build(v,fa,cnt+(!col[u]),d+1);\n}\nvoid rebuild(int u,int tg,bool clear)\n{\n\tif(vis[u])tg=tag[u],clear|=clr[u];\n\telse\n\t{\n\t\tcol[u]=tmp[u];\n\t\tif(clear)col[u]=0;\n\t\tif(!col[u]&&tg)col[u]=1,tg--;\n\t}\n\tfor(int v:G[u])rebuild(v,tg,clear);\n}\nvoid upd1(int u)\n{\n\tif(!col[u])return col[u]=1,void();\n\ttag[u]++;\n\tfor(auto edge:g[u])\n\t{\n\t\tint v=edge.fi,cnt=edge.se.fi;\n\t\tif(cnt<tag[u])upd1(v);\n\t}\n}\nvoid upd2(int u)\n{\n\tcol[u]=0,tag[u]=0,clr[u]=1;\n\tfor(auto &edge:g[u])\n\t{\n\t\tedge.se.fi=edge.se.se;\n\t\tupd2(edge.fi);\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=2;i<=n;i++)scanf(\"%d\",&p[i]),G[p[i]].push_back(i);\n\tfor(int i=1;i<=q;i++)scanf(\"%d%d\",&t[i],&v[i]);\n\tfor(int i=1;i<=q;i+=S)\n\t{\n\t\tint R=min(q,i+S-1);\n\t\tinit();\n\t\tfor(int j=i;j<=R;j++)vis[v[j]]=1;\n\t\tbuild(1,0,0,0);\n\t\tfor(int j=i;j<=R;j++)\n\t\t\tif(t[j]==1)upd1(v[j]);\n\t\t\telse if(t[j]==2)upd2(v[j]);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(col[v[j]])puts(\"black\");\n\t\t\t\telse puts(\"white\");\n\t\t\t}\n\t\trebuild(1,0,0);\n\t}\n\tIO::pchar(0);\n\treturn 0;\n}\nconst int N=1e5+10,S=600;\nint n,q,p[N],t[N],v[N];\nvector<int>G[N];\nvector<pair<int,pii> >g[N];\nbool vis[N],clr[N],tmp[N],col[N];\nint tag[N];\nvoid init()\n{\n\tfor(int i=1;i<=n;i++)\n\t\tvis[i]=clr[i]=0,g[i].resize(0),tmp[i]=col[i],tag[i]=0;\n}\nvoid build(int u,int fa,int cnt,int d)\n{\n\tif(vis[u])\n\t{\n\t\tif(fa)g[fa].push_back({u,{cnt,d}});\n\t\tfor(int v:G[u])build(v,u,0,0);\n\t}\n\telse for(int v:G[u])build(v,fa,cnt+(!col[u]),d+1);\n}\nvoid rebuild(int u,int tg,bool clear)\n{\n\tif(vis[u])tg=tag[u],clear|=clr[u];\n\telse\n\t{\n\t\tcol[u]=tmp[u];\n\t\tif(clear)col[u]=0;\n\t\tif(!col[u]&&tg)col[u]=1,tg--;\n\t}\n\tfor(int v:G[u])rebuild(v,tg,clear);\n}\nvoid upd1(int u)\n{\n\tif(!col[u])return col[u]=1,void();\n\ttag[u]++;\n\tfor(auto edge:g[u])\n\t{\n\t\tint v=edge.fi,cnt=edge.se.fi;\n\t\tif(cnt<tag[u])upd1(v);\n\t}\n}\nvoid upd2(int u)\n{\n\tcol[u]=0,tag[u]=0,clr[u]=1;\n\tfor(auto &edge:g[u])\n\t{\n\t\tedge.se.fi=edge.se.se;\n\t\tupd2(edge.fi);\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=2;i<=n;i++)scanf(\"%d\",&p[i]),G[p[i]].push_back(i);\n\tfor(int i=1;i<=q;i++)scanf(\"%d%d\",&t[i],&v[i]);\n\tfor(int i=1;i<=q;i+=S)\n\t{\n\t\tint R=min(q,i+S-1);\n\t\tinit();\n\t\tfor(int j=i;j<=R;j++)vis[v[j]]=1;\n\t\tbuild(1,0,0,0);\n\t\tfor(int j=i;j<=R;j++)\n\t\t\tif(t[j]==1)upd1(v[j]);\n\t\t\telse if(t[j]==2)upd2(v[j]);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(col[v[j]])puts(\"black\");\n\t\t\t\telse puts(\"white\");\n\t\t\t}\n\t\trebuild(1,0,0);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1651913159,
        "uid": 333574,
        "name": "Tyyyyyy",
        "ccfLevel": 7,
        "title": "CF1017G\u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u4e00\u79cd\u6bd4\u8f83\u663e\u7136\u7684\u6027\u8d28\uff1a\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c $3$ \u7684 $x_1$\uff0c\u53ea\u6709 $1,2$ \u64cd\u4f5c\u4e2d $x$ \u5728 $x_1$ \u7956\u5148\u94fe\u4e0a\u7684\u64cd\u4f5c\u4f1a\u5f71\u54cd\u5f53\u524d\u67e5\u8be2\u7684\u7b54\u6848\u3002\n\n\u5047\u8bbe\u6211\u4eec\u8981\u786e\u5b9a\u4ece\u4e00\u4e2a\u7956\u5148\u70b9 $z$ \u5f00\u59cb\u5411\u4e0b\uff0c\u662f\u5426\u80fd\u628a $z \\sim x$ \u8def\u5f84\u5168\u67d3\u6210\u9ed1\u70b9\uff0c\u8bb0\u521d\u59cb\u65f6\u6240\u6709\u70b9\u70b9\u6743\u4e3a $-1$\uff0c\u4e00\u6b21 $1$ \u64cd\u4f5c\u5bf9\u4e8e\u70b9\u6743 $+1$\uff0c\u90a3\u4e48\u95ee\u9898\u53d8\u4e3a\u4e86\u8be2\u95ee\u662f\u5426\u6709\u4e00\u6761\u7956\u5148--\u5b50\u5b59\u7684\u8def\u5f84 $z \\sim x$ \u6ee1\u8db3\u94fe\u4e0a\u6743\u503c\u548c $\\geq 0$\uff0c\u4e5f\u7b49\u4ef7\u4e8e\u67e5\u8be2\u6839\u5230 $x$ \u4e0a\u5173\u4e8e $x$ \u7684\u6700\u5927\u540e\u7f00\u3002\n\n\u5c06\u6240\u6709\u64cd\u4f5c\u8fdb\u884c\u6784\u9020\u8f6c\u5316\uff1a\n\n- \u64cd\u4f5c $1$\uff1a\u5bf9\u4e8e $x$ \u70b9\u6743 $+1$\uff1b\n\n- \u64cd\u4f5c $2$\uff1a\u5bf9\u4e8e $x$ \u5b50\u6811\u5185\u7684\u70b9\u6743\u533a\u95f4\u8d4b\u503c\u6210 $-1$\uff0c\u5bf9\u4e8e $x$ \u70b9\u6743\u52a0\u4e0a $-\\max(z,x) - 1$\uff1b\n\n- \u64cd\u4f5c $3$\uff1a\u67e5\u8be2\u6839\u5230 $x$ \u4e0a\u5173\u4e8e $x$ \u7684\u6700\u5927\u540e\u7f00\u3002\n\n\u5173\u4e8e\u64cd\u4f5c $2$ \u7684\u6b63\u786e\u6027\uff0c\u53ef\u4ee5\u7406\u89e3\u6210\u53bb\u9664\u4e4b\u524d\u5386\u53f2\u72b6\u6001\u4e0b\u7956\u5148\u94fe\u5bf9\u4e8e\u5f53\u524d\u5b50\u6811\u7684\u5f71\u54cd\u3002\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u5904\u7406\u540e\u5b8c\u7f8e\u5730\u89c4\u907f\u4e86\u4e92\u76f8\u5f71\u54cd\u7684\u95ee\u9898\u3002\n\n\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53d8\u6210 $O(n \\log ^ 2  n)$ \u4e86\u3002\n\n\u540c\u65f6\u8fd8\u5b58\u5728\u4e00\u79cd\u57fa\u4e8e\u64cd\u4f5c\u5206\u5757\u4e0e\u5e8f\u5217\u5206\u5757\u7684\u505a\u6cd5\u3002\u64cd\u4f5c\u5206\u5757\u5373\u6bcf $\\sqrt q$ \u4e2a\u64cd\u4f5c\u5efa\u7acb\u865a\u6811\uff0c\u6d89\u53ca\u5230\u7684\u70b9\u90fd\u505a\u6210\u5173\u952e\u70b9\u540e\u66b4\u529b\u6a21\u62df\u4e09\u4e2a\u64cd\u4f5c\uff0c\u8fdb\u884c\u4e00\u4e9b\u5904\u7406\u540e\u4fee\u6539\u64cd\u4f5c\u90fd\u53ef\u4ee5\u505a\u5230\u4e0e\u865a\u6811\u70b9\u6570\u76f8\u5173\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u5e73\u8861\u4e86\u3002\n\n\u5e8f\u5217\u5206\u5757\u53ef\u4ee5[\u4f20\u9001\u95e8](https://www.luogu.com.cn/blog/feecle6418/solution-cf1017g)\u3002\n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 1e5 + 5;\nint n,m,head[Len],cnt,dfn[Len],tim,siz[Len],son[Len],dep[Len],top[Len],fa[Len];\nstruct node\n{\n\tint next,to;\n}edge[Len << 1];\nvoid add(int from,int to)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\thead[from] = cnt;\n}\nvoid dfs1(int x,int f)\n{\n\tdep[x] = dep[f] + 1;\n\tfa[x] = f;\n\tsiz[x] = 1;\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == f) continue;\n\t\tdfs1(to , x);\n\t\tsiz[x] += siz[to];\n\t\tif(siz[son[x]] < siz[to]) son[x] = to;\n\t}\n}\nvoid dfs2(int x,int topf)\n{\n\ttop[x] = topf;\n\tdfn[x] = ++ tim;\n\tif(!son[x]) return;\n\tdfs2(son[x] , topf);\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == fa[x] || to == son[x]) continue;\n\t\tdfs2(to , to);\n\t}\n}\nint tag[Len << 2],sum[Len << 2],mx[Len << 2],v[Len << 2];\n#define ls(p) p << 1\n#define rs(p) p << 1 | 1\nvoid push_up(int x)\n{\n\tsum[x] = sum[ls(x)] + sum[rs(x)];\n\tmx[x] = max(mx[rs(x)] , mx[ls(x)] + sum[rs(x)]);\n}\nvoid push_down(int p,int l,int r)\n{\n\tif(tag[p])\n\t{\n\t\tint mid = (l + r) >> 1;\n\t\ttag[ls(p)] = tag[rs(p)] = tag[p];\n\t\tsum[ls(p)] = -(mid - l + 1) , sum[rs(p)] = -(r - mid);\n\t\tv[ls(p)] = v[rs(p)] = mx[ls(p)] = mx[rs(p)] = -1;\n\t\ttag[p] = 0;\n\t}\n} \nvoid build(int p,int l,int r)\n{\n\ttag[p] = 0;\n\tif(l == r)\n\t{\n\t\tv[p] = mx[p] = sum[p] = -1;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(ls(p) , l , mid);\n\tbuild(rs(p) , mid + 1 , r);\n\tpush_up(p);\n}\nvoid updp(int p,int l,int r,int idx,int w)\n{\n\tif(l == r)\n\t{\n\t\tv[p] += w;\n\t\tmx[p] += w;\n\t\tsum[p] += w;\n\t\treturn;\t\n\t}\n\tpush_down(p , l , r);\n\tint mid = (l + r) >> 1;\n\tif(idx <= mid) updp(ls(p) , l , mid , idx , w);\n\telse updp(rs(p) , mid + 1 , r , idx , w);\n\tpush_up(p);\n}\nvoid cover(int p,int l,int r,int nl,int nr)\n{\n\tif(nl <= l && nr >= r)\n\t{\n\t\ttag[p] = 1;\n\t\tv[p] = mx[p] = -1;\n\t\tsum[p] = -(r - l + 1);\n\t\treturn;\n\t}\n\tpush_down(p , l , r);\n\tint mid = (l + r) >> 1;\n\tif(nl <= mid) cover(ls(p) , l , mid , nl , nr);\n\tif(nr > mid) cover(rs(p) , mid + 1 , r , nl , nr);\n\tpush_up(p);\n}\nint qs(int p,int l,int r,int nl,int nr)\n{\n\tif(nl <= l && nr >= r) return sum[p];\n\tpush_down(p , l , r);\n\tint mid = (l + r) >> 1 , res = 0;\n\tif(nl <= mid) res += qs(ls(p) , l , mid , nl , nr);\n\tif(nr > mid) res += qs(rs(p) , mid + 1 , r , nl , nr);\n\treturn res;\n}\nint qmx(int p,int l,int r,int nl,int nr)\n{\n\tif(nl <= l && nr >= r) return mx[p];\n\tpush_down(p , l , r);\n\tint mid = (l + r) >> 1 , res = -1e9;\n\tif(nl <= mid) res = max(res , qmx(ls(p) , l , mid , nl , nr));\n\tif(nr > mid) res = max(qmx(rs(p) , mid + 1 , r , nl , nr) , res + qs(rs(p) , mid + 1 , r , nl , nr));\n\treturn res;\n}\nint Qchain(int x)\n{\n\tint res = -1e9 , w = 0;\n\twhile(top[x])\n\t{\n\t\tres = max(res , w + qmx(1 , 1 , n , dfn[top[x]] , dfn[x]));\n\t\tw += qs(1 , 1 , n , dfn[top[x]] , dfn[x]);\n\t\tx = fa[top[x]];\n\t}\n\treturn res;\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i = 2 ; i <= n ; i ++) \n\t{\n\t\tint f;scanf(\"%d\",&f);\n\t\tadd(f , i);\n\t}\n\tdfs1(1 , 0);\n\tdfs2(1 , 1);\n\tbuild(1 , 1 , n);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tint opt,x;scanf(\"%d %d\",&opt,&x);\n\t\tif(opt == 1) updp(1 , 1 , n , dfn[x] , 1);\n\t\telse if(opt == 2)\n\t\t{\n\t\t\tcover(1 , 1 , n , dfn[x] , dfn[x] + siz[x] - 1);\n\t\t\tupdp(1 , 1 , n , dfn[x] , -Qchain(x) - 1);\n\t\t}\n\t\telse if(opt == 3)\n\t\t{\n\t\t\tint flg = Qchain(x);\n\t\t\tputs(flg >= 0 ? \"black\" : \"white\");\t\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1649161694,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1017G The Tree"
    },
    {
        "content": "[\u4e5f\u8bb8\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://endsah.cf/blog/CF1017G-The-Tree/)\n\n\u66b4\u529b\u67d3\u8272\u4e0d\u592a\u597d\u7ef4\u62a4\u3002\u8003\u8651\u5982\u4f55\u67e5\u8be2\u4e00\u4e2a\u8282\u70b9\u662f\u5426\u88ab\u67d3\u8272\uff0c\u5982\u679c\u628a 1 \u8fd9\u4e2a\u67d3\u8272\u64cd\u4f5c\u89c6\u4f5c\u5355\u70b9\u52a0 1\uff0c\u90a3\u4e48\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u7956\u5148\uff08\u5305\u542b $x$\uff09\uff0c\u5176\u5230 $x$ \u7684\u8def\u5f84\u6743\u503c\u548c\u5927\u4e8e\u7b49\u4e8e\u8def\u5f84\u957f\u5ea6\uff0c\u90a3\u4e48 $x$ \u4fbf\u88ab\u67d3\u8272\u3002\n\n\u4e8e\u662f\u4fbf\u6709\u4e86\u4e00\u4e2a\u601d\u8def\uff1a\u628a\u8def\u5f84\u957f\u5ea6\u8bbe\u4e3a\u8d1f\u7684\uff0c\u4e5f\u5c31\u662f\u521d\u59cb\u628a\u6240\u6709\u70b9\u6743\u89c6\u4e3a -1\uff0c\u7136\u540e\u67e5\u8be2\u5c31\u76f4\u63a5\u67e5\u8be2\u6839\u5230 $x$ \u7684\u6240\u6709\u540e\u7f00\u548c\u7684\u6700\u5927\u503c\u662f\u5426 $\\ge 0$ \u5373\u53ef\u3002\n\n\uff08\u524d\u7f00\u6307\u6839\u5230 $x$\uff0c\u540e\u7f00\u6307 $x$ \u5230\u6839\uff09\n\n\u6811\u76f4\u63a5\u60f3\u600e\u4e48\u7ef4\u62a4\u6240\u6709\u540e\u7f00\u548c\u7684\u6700\u5927\u503c\u53ef\u80fd\u4e0d\u76f4\u89c2\uff0c\u4e22\u5230\u5e8f\u5217\u4e0a\u5c31\u5f88\u597d\u60f3\uff1a\u4e00\u4e2a\u533a\u95f4\u7684\u540e\u7f00\u6700\u5927\u503c\u4e3a \u5de6\u533a\u95f4\u7684\u540e\u7f00\u6700\u5927\u503c + \u53f3\u533a\u95f4\u6743\u503c\u548c\uff0c\u53f3\u533a\u95f4\u540e\u7f00\u6700\u5927\u503c \u8fd9\u4e24\u4e2a\u503c\u4e2d\u5927\u7684\u90a3\u4e2a\u3002\u4e8e\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u67e5\u8be2\u76f4\u63a5\u5bf9\u90a3 $\\log$ \u4e2a\u533a\u95f4\u6309\u4e0a\u9762\u8fd9\u4e2a\u65b9\u6cd5\u4ece\u53f3\u5f80\u5de6\u5408\u5e76\u3002\n\n\u5728\u6811\u4e0a\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u6811\u5256\u63d0\u533a\u95f4\u3002\u56e0\u4e3a\u662f\u4ece $x$ \u5f80\u6839\u8df3\uff0c\u6240\u4ee5\u533a\u95f4\u9ed8\u8ba4\u4ece\u53f3\u5f80\u5de6\uff0c\u76f4\u63a5\u5408\u5e76\u5c31\u884c\u3002\n\n\u8003\u8651\u600e\u6837\u5728\u5f53\u524d\u8fd9\u4e2a\u601d\u8def\u4e0b\u6b63\u786e\u7ef4\u62a4 2 \u64cd\u4f5c\u3002\u9996\u5148\u80af\u5b9a\u5f97\u533a\u95f4\u8986\u76d6\u4e3a -1\uff0c\u8fd8\u5f97\u8ba9**\u8986\u76d6\u64cd\u4f5c\u4e4b\u540e**\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u5230\u6839\u7684\u540e\u7f00\u548c\u6700\u5927\u503c\u4e3a -1\uff0c\u800c\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u7684\u540e\u7f00\u8def\u5f84\u8981\u4e48\u4e0d\u5305\u542b $x$\uff0c\u6b64\u65f6\u80af\u5b9a\u540e\u7f00\u6700\u5927\u503c\u662f\u4ed6\u81ea\u5df1\u5230\u4ed6\u81ea\u5df1\u7684\u8def\u5f84\uff0c\u503c\u4e3a -1\uff1b\u8981\u4e48\u5305\u542b $x$\uff0c\u8fd9\u4e2a\u6709\u53ef\u80fd\u4e0d\u5bf9\uff08\u56e0\u4e3a\u6709\u4e0a\u9762\u8282\u70b9\u7684\u5f71\u54cd\uff09\uff0c\u6240\u4ee5\u76f4\u63a5\u5728\u8986\u76d6\u4e4b\u540e\u67e5 $x$ \u7684\u540e\u7f00\u548c\u6700\u5927\u503c\uff0c\u7ed9 $x$ \u5355\u70b9\u52a0\u8fd9\u4e2a `-(\u67e5\u5230\u7684\u503c + 1)` \u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u80fd\u786e\u4fdd\u6240\u6709\u8282\u70b9\u5230\u6839\u7684\u540e\u7f00\u548c\u6700\u5927\u503c\u4e3a -1 \u4e86\u3002\n\n\u4e00\u5b9a\u5f97\u8bb0\u5f97\u5408\u5e76\u987a\u5e8f\u3002\n\n\u4ee3\u7801\uff1a\uff08\u6307\u9488\u8b66\u544a\uff09\n\n```cpp\n/**********************************************************\n * Author        : EndSaH\n * Email         : hjxhb1@gmail.com\n * Created Time  : 2019-08-16 14:21\n * FileName      : bigbro.cpp\n * Website       : https://endsah.cf\n * *******************************************************/\n\n#include <cstdio>\n#include <cctype>\n#include <vector>\n\ntypedef std::pair<int, int> pii;\n\n#define fir first\n#define sec second\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define Debug(s) debug(\"The message in line %d, Function %s: %s\\n\", __LINE__, __FUNCTION__, s)\n#define getchar() (ipos == iend and (iend = (ipos = _ibuf) + fread(_ibuf, 1, __bufsize, stdin), ipos == iend) ? EOF : *ipos++)\n#define putchar(ch) (opos == oend ? fwrite(_obuf, 1, __bufsize, stdout), opos = _obuf : 0, *opos++ = (ch))\n#define __bufsize (1 << 21 | 1)\n\nchar _ibuf[__bufsize], _obuf[__bufsize], _stk[50];\nchar *ipos = _ibuf, *iend = _ibuf, *opos = _obuf, *oend = _obuf + __bufsize, *stkpos = _stk;\n\nstruct END\n{ ~END() { fwrite(_obuf, 1, opos - _obuf, stdout); } }\n__;\n\ninline int read()\n{\n    register int x = 0;\n    register char ch;\n    while (!isdigit(ch = getchar()));\n    while (x = (x << 3) + (x << 1) + (ch & 15), isdigit(ch = getchar()));\n    return x;\n}\n\ntemplate <typename _INT>\ninline void write(_INT x)\n{\n    while (*++stkpos = x % 10 ^ 48, x /= 10, x);\n    while (stkpos != _stk)\n        putchar(*stkpos--);\n}\n\ninline void Puts(const char* str)\n{\n    while (*str)\n        putchar(*str++);\n    putchar('\\n');\n}\n\ntemplate <typename _Tp>\ninline bool Chkmax(_Tp& x, const _Tp& y)\n{ return x < y ? x = y, true : false; }\n\ntemplate <typename _Tp>\ninline bool Chkmin(_Tp& x, const _Tp& y)\n{ return x > y ? x = y, true : false; }\n\nconst int maxN = 2e5 + 2;\n\nint n, m, dfst;\nint fa[maxN], top[maxN], son[maxN], dfn[maxN], size[maxN];\nstd::vector<int> G[maxN];\n\ninline pii Merge(pii l, pii r)\n{ return pii(l.fir + r.fir, std::max(r.sec, l.sec + r.fir)); }\n\nnamespace SEG\n{\n    typedef struct Node* ptr;\n\n    ptr root;\n\n    struct Node\n    {\n        int l, r;\n        pii info;\n        bool tag;\n        ptr lson, rson;\n\n        Node() { }\n\n        Node(int _l, int _r) : l(_l), r(_r)\n        { this->tag = false; }\n\n        void Cover()\n        { this->tag = true, this->info = pii(this->l - this->r - 1, -1); }\n\n        void Pushup()\n        { this->info = Merge(this->lson->info, this->rson->info); }\n\n        void Pushdown()\n        {\n            if (this->tag)\n                this->lson->Cover(), this->rson->Cover(), this->tag = false;\n        }\n    };\n\n    inline ptr New(int l, int r)\n    {\n        static ptr mempool = new Node[n << 2];\n        return new(mempool++) Node(l, r);\n    }\n\n    void Build(int l, int r, ptr& cur = root)\n    {\n        cur = New(l, r);\n        if (l == r)\n        {\n            cur->info = pii(-1, -1);\n            return;\n        }\n        int mid = (l + r) >> 1;\n        Build(l, mid, cur->lson), Build(mid + 1, r, cur->rson);\n        cur->Pushup();\n    }\n\n    void Add(int pos, int addval, ptr cur = root)\n    {\n        if (cur->l == cur->r)\n        {\n            cur->info = pii(cur->info.fir + addval, cur->info.sec + addval);\n            return;\n        }\n        cur->Pushdown();\n        int mid = (cur->l + cur->r) >> 1;\n        if (pos <= mid)\n            Add(pos, addval, cur->lson);\n        else\n            Add(pos, addval, cur->rson);\n        cur->Pushup();\n    }\n\n    pii Query(int ql, int qr, ptr cur = root)\n    {\n        if (ql <= cur->l and cur->r <= qr)\n            return cur->info;\n        cur->Pushdown();\n        pii res(0, -1e9);\n        int mid = (cur->l + cur->r) >> 1;\n        if (mid < qr)\n            res = Merge(Query(ql, qr, cur->rson), res);\n        if (ql <= mid)\n            res = Merge(Query(ql, qr, cur->lson), res);\n        return res;\n    }\n\n    void Cover(int ql, int qr, ptr cur = root)\n    {\n        if (ql <= cur->l and cur->r <= qr)\n        {\n            cur->Cover();\n            return;\n        }\n        if (ql > cur->r or qr < cur->l)\n            return;\n        cur->Pushdown();\n        Cover(ql, qr, cur->lson), Cover(ql, qr, cur->rson);\n        cur->Pushup();\n    }\n}\n\nvoid DFS1(int u)\n{\n    size[u] = 1;\n    for (int v : G[u]) if (v != fa[u])\n    {\n        DFS1(v);\n        size[u] += size[v];\n        if (size[v] > size[son[u]])\n            son[u] = v;\n    }\n}\n\nvoid DFS2(int u)\n{\n    dfn[u] = ++dfst;\n    if (son[u])\n        top[son[u]] = top[u], DFS2(son[u]);\n    for (int v : G[u]) if (!top[v])\n        top[v] = v, DFS2(v);\n}\n\ninline int Query(int x)\n{\n    pii res(0, -1e9);\n    while (top[x] != 1)\n    {\n        res = Merge(SEG::Query(dfn[top[x]], dfn[x]), res);\n        x = fa[top[x]];\n    }\n    res = Merge(SEG::Query(1, dfn[x]), res);\n    return res.sec;\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"bigbro.in\", \"r\", stdin);\n    freopen(\"bigbro.out\", \"w\", stdout);\n#endif\n    n = read(), m = read();\n    for (int i = 2; i <= n; ++i)\n        G[fa[i] = read()].push_back(i);\n    DFS1(1);\n    top[1] = 1, DFS2(1);\n    SEG::Build(1, n);\n    while (m--)\n    {\n        int opt = read(), x = read(), val;\n        switch (opt)\n        {\n        case 1 :\n            SEG::Add(dfn[x], 1);\n            break;\n        case 2 :\n            SEG::Cover(dfn[x], dfn[x] + size[x] - 1);\n            SEG::Add(dfn[x], -Query(x) - 1);\n            break;\n        case 3 :\n            Puts(Query(x) >= 0 ? \"Yes\" : \"No\");\n            break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1565945715,
        "uid": 91252,
        "name": "EndSaH",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1017G \u3010The Tree\u3011"
    },
    {
        "content": "# CF1017G The Tree\n\n[\u849f\u84bb\u7684Blog](https://www.cnblogs.com/cj-chd/)\n\n\u6811\u94fe\u5256\u5206\u597d\u9898\u3002\n\n\u4e4d\u4e00\u770b\u8fd8\u4ee5\u4e3a\u662f\u9053\u6c99\u6bd4\u9898\uff0c\u7136\u540e\u53d1\u73b0\u4fee\u6539\u64cd\u4f5c\u6709\u70b9\u4e0d\u4e00\u6837\u3002\n\n\u4f46\u662f\u5982\u679c\u4f60\u5bf9\u57fa\u672c\u64cd\u4f5c\u8fd8\u4e0d\u592a\u719f\u7ec3\uff0c\u53ef\u4ee5\u770b\u770b\u6211\u7684[\u6811\u94fe\u5256\u5206\u603b\u7ed3](https://www.cnblogs.com/cj-chd/p/10038820.html)\n\n\u6709\u4e09\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u4ece\u4e00\u4e2a\u70b9\u5f80\u4e0b\u67d3\u9ed1\uff0c\u662f\u9ed1\u8272\u8282\u70b9\u5c31\u7ee7\u7eed\u67d3\uff0c\u4e00\u76f4\u67d3\u5230\u767d\u8272\u8282\u70b9\u4e3a\u6b62\uff1b\n2. \u67d3\u767d\u4e00\u68f5\u5b50\u6811\uff1b\n3. \u67e5\u8be2\u4e00\u4e2a\u70b9\u7684\u989c\u8272\u3002\n\n\u4e3b\u8981\u662f\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u4e0d\u597d\u5904\u7406\u3002\u7531\u4e8e\u6bcf\u6b21\u53ea\u8be2\u95ee\u4e00\u4e2a\u70b9\u7684\u4fe1\u606f\uff0c\u8003\u8651\u628a\u4e00\u4e2a\u70b9\u7684\u989c\u8272\u7528\u4ece\u6839\u8282\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684**\u6700\u5927\u540e\u7f00\u548c**\u6765\u8868\u8fbe\uff1a\u6700\u5927\u540e\u7f00\u548c\u5c0f\u4e8e\u96f6\u5219\u4e3a\u767d\u8272\uff0c\u53cd\u4e4b\u5219\u4e3a\u9ed1\u8272\u3002\u9996\u5148\u628a\u6811\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u90fd\u5b9a\u4e3a$-1$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a1\u64cd\u4f5c\uff0c\u628a\u8be5\u70b9\u7684\u6743\u503c++\uff1b\u5bf9\u4e8e\u6bcf\u4e2a2\u64cd\u4f5c\uff0c\u628a\u4e00\u68f5\u5b50\u6811\u7684\u6743\u503c\u5168\u90fd\u53d8\u6210$-1$\uff0c\u5e76\u5728\u8be5\u5b50\u6811\u7684\u6839\u8282\u70b9\u51cf\u53bb\u4e00\u4e2a\u6743\u503c\uff0c\u4f7f\u5f97\u5927\u6811\u6839\u8282\u70b9\u5230\u5b50\u6811\u6839\u8282\u70b9\u7684\u6700\u5927\u540e\u7f00\u548c\u6070\u4e3a$-1$\uff1b\u5bf9\u4e8e3\u67e5\u8be2\uff0c\u67e5\u8be2\u4e00\u4e2a\u6839\u8282\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u5927\u540e\u7f00\u548c\uff0c$<0$\u767d\u8272\uff0c$\\ge  0$\u9ed1\u8272\u3002\u53ef\u4ee5\u8bc1(shou)\u660e(wan)\uff0c\u8fd9\u6837\u505a\u6b63\u786e\u5730\u5728$O(n(log n)^2)$\u7684\u590d\u6742\u5ea6\u5185\u7ef4\u62a4\u4e86\u6811\u4e0a\u7684\u4fe1\u606f\u3002\n\n\u5982\u679c\u4f60\u4e0d\u4f1a\u5728\u6811\u4e0a\u7ef4\u62a4\u6700\u5927\u540e\u7f00\u548c\uff0c\u53ef\u4ee5\u5148\u8003\u8651\u5728\u533a\u95f4\u4e0a\u7ef4\u62a4\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u548c\u3001\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u540e\u7f00\u548c\u5c31\u597d\u4e86\uff0c\u5408\u5e76\u4fe1\u606f\u7684\u65b9\u6cd5\u5c31\u5f88\u5bb9\u6613\u770b\u51fa\u4e86\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u6cd5\u5408\u5e76\uff0c\u653e\u5230\u6811\u4e0a\u6765\u4e4b\u540e\u5408\u5e76\u7684\u65b9\u6cd5\u8fd8\u662f\u6ca1\u6709\u53d8\u3002\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#define R register\n#define I inline\nusing namespace std;\nconst int S=200003,M=800003,inf=0x3f3f3f3f;\nchar buf[1000000],*p1,*p2;\nI char gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,S,stdin),p1==p2)?EOF:*p1++;}\nI int rd(){\n\tR int f=0; R char c=gc();\n\twhile(c<48||c>57) c=gc();\n\twhile(c>47&&c<58) f=f*10+(c^48),c=gc();\n\treturn f;\n}\nstruct O{int f,g;};\nstruct N{int f,g,b;}a[M];\nint h[S],s[S],g[S],d[S],t[S],p[S],q[S],r[S],f[S],c,e,n;\nI int max(int x,int y){return x>y?x:y;}\nO operator+(O x,O y){return (O){max(x.f+y.g,y.f),x.g+y.g};}\nI void add(int x,int y){s[++c]=h[x],h[x]=c,g[c]=y;}\nI void upd(int k,int l,int r){a[k].f=-1,a[k].g=-(r-l+1),a[k].b=1;}\nI void psu(int k,int p,int q){a[k].f=max(a[q].f,a[p].f+a[q].g),a[k].g=a[p].g+a[q].g;}\nI void psd(int k,int l,int r){\n\tif(a[k].b){\n\t\tR int p=k<<1,q=p|1,m=l+r>>1;\n\t\tupd(p,l,m),upd(q,m+1,r),a[k].b=0;\n\t}\n}\nvoid bld(int k,int l,int r){\n\tif(l==r){a[k].f=a[k].g=-1; return ;}\n\tR int p=k<<1,q=p|1,m=l+r>>1;\n\tbld(p,l,m),bld(q,m+1,r),psu(k,p,q);\n}\nvoid mdf1(int k,int l,int r,int x,int v){\n\tif(l==r){a[k].f+=v,a[k].g+=v; return ;}\n\tR int p=k<<1,q=p|1,m=l+r>>1;\n\tpsd(k,l,r);\n\tif(x<=m) mdf1(p,l,m,x,v);\n\telse mdf1(q,m+1,r,x,v);\n\tpsu(k,p,q);\n}\nvoid mdf2(int k,int l,int r,int x,int y){\n\tif(x<=l&&r<=y){upd(k,l,r); return ;}\n\tR int p=k<<1,q=p|1,m=l+r>>1;\n\tpsd(k,l,r);\n\tif(x<=m) mdf2(p,l,m,x,y);\n\tif(m<y) mdf2(q,m+1,r,x,y);\n\tpsu(k,p,q);\n}\nO qry(int k,int l,int r,int x,int y){\n\tif(x<=l&&r<=y) return (O){a[k].f,a[k].g};\n\tR int p=k<<1,q=p|1,m=l+r>>1;\n\tO o=(O){-inf,0};\n\tpsd(k,l,r);\n\tif(x<=m) o=o+qry(p,l,m,x,y);\n\tif(m<y) o=o+qry(q,m+1,r,x,y);\n\treturn o;\n}\nvoid dfs1(int x,int f){\n\td[x]=d[f]+1,p[x]=f,t[x]=1;\n\tfor(R int i=h[x],y,m=0;i;i=s[i])\n\t\tif((y=g[i])^f){\n\t\t\tdfs1(y,x),t[x]+=t[y];\n\t\t\tif(t[y]>m) q[x]=y,m=t[y];\n\t\t}\n}\nvoid dfs2(int x,int t){\n\tf[x]=++e,r[x]=t;\n\tif(q[x]) dfs2(q[x],t);\n\tfor(R int i=h[x],y;i;i=s[i])\n\t\tif((y=g[i])^p[x]&&y^q[x])\n\t\t\tdfs2(y,y);\n}\nI int qry0(int x){\n\tR int o=-inf,v=0; O u;\n\twhile(x)\n\t\tu=qry(1,1,n,f[r[x]],f[x]),o=max(o,u.f+v),v+=u.g,x=p[r[x]];\n\treturn o;\n}\nint main(){\n\tR int Q,i,x,y;\n\tfor(n=rd(),Q=rd(),i=2;i<=n;++i)\n\t\tx=rd(),add(x,i);\n\tdfs1(1,0),dfs2(1,1),bld(1,1,n);\n\tfor(i=1;i<=Q;++i){\n\t\tx=rd(),y=rd();\n\t\tif(x==1)\n\t\t\tmdf1(1,1,n,f[y],1);\n\t\tif(x==2)\n\t\t\tmdf2(1,1,n,f[y],f[y]+t[y]-1),mdf1(1,1,n,f[y],-(qry0(y)+1));\n\t\tif(x==3)\n\t\t\tqry0(y)>=0?printf(\"black\\n\"):printf(\"white\\n\");\n\t}\n\treturn 0;\n}\n\n```\n\n\u8dd1\u7684\u8fd8\u7b97\u5feb\u3002",
        "postTime": 1545099632,
        "uid": 91933,
        "name": "newbiechd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1017G \u3010The Tree\u3011"
    }
]