[
    {
        "content": "\u6ca1\u4eba\u5199\u9898\u89e3\uff1f\n\nCF \u5b98\u65b9\u9898\u89e3\u597d\u50cf\u662f\u4e00\u4e2a\u975e\u5e38\u795e\u4ed9\u7684\u8d2a\u5fc3\uff0c\u90a3\u6211\u6765\u8bf4\u4e00\u4e0b DP \u505a\u6cd5\u3002\n\n\u8bbe $f_i$ \u8868\u793a\u524d $i$ \u4e2a\u80fd\u88ab\u62ff\u51fa\u6765\u591a\u5c11\u4e2a\u5b50\u5e8f\u5217\uff0c\u8fd9\u65f6\u5019\u4e0d\u80fd\u76f4\u63a5\u8f6c\u79fb\u3002\n\n\u5fc5\u987b\u679a\u4e3e $j$\uff0c\u7136\u540e\u5224\u65ad $(j,i]$ \u91cc\u9762\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a $4$ \u7684\u5408\u6cd5\u5b50\u5e8f\u5217\u3002\n\n\u5982\u4f55\u786e\u5b9a $j$ \u7684\u8303\u56f4\u5c31\u662f\u6700\u6838\u5fc3\u7684\u95ee\u9898\u4e86\uff0c\u5982\u679c\u80fd\u786e\u5b9a\u7684\u8bdd\u53ef\u4ee5\u968f\u624b\u62ff\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\n\n\u601d\u8003\u8fd9\u4e48\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5047\u8bbe $nxt_i$ \u8868\u793a $i$ \u540e\u9762\u7b2c\u4e00\u4e2a\u548c\u4ed6\u4e00\u6837\u7684\u70b9\u3002\n\n\u6211\u4eec\u5148\u5904\u7406\u6389 $x,x,x,x$ \u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u627e\u540e\u9762\u7684\u56db\u4e2a\u76f8\u7b49\u7684\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5bfb\u627e\u7684\u5373\u4e3a $x,y,nxt_x,nxt_y$\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\u5c31\u80fd\u4ece $x$ \u8f6c\u79fb\u5230 $nxt_y$ \u4e86\u3002\n\n\u8fd9\u4e00\u6b65\u6709\u4e2a\u8d2a\u5fc3\uff0c\u6709\u6ca1\u6709\u53ef\u80fd\u5176\u4ed6\u7684\u51b3\u7b56\u66f4\u52a0\u4f18\u79c0\uff1f\n\n\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u51fa\u73b0\u4e86 $x,nxt_x,y,nxt_{nxt_x},nxt_y$ \u7684\u60c5\u51b5\uff0c\u7136\u540e $x$ \u548c $nxt_{nxt_x}$ \u5339\u914d\uff0c\u5fc5\u7136\u6709 $nxt_x$ \u548c $nxt_{nxt_x}$ \u5339\u914d\u66f4\u52a0\u4f18\u79c0\u3002\n\n\u7136\u540e\u5c31\u5f88\u597d\u505a\u4e86\uff0c\u5982\u679c\u6211\u4eec\u628a $i$ \u89c6\u4e3a\u5de6\u7aef\u70b9\uff0c$nxt_i$ \u89c6\u4e3a\u53f3\u7aef\u70b9\uff0c\u5c31\u662f\u5bf9\u6bcf\u6761\u7ebf\u6bb5\u627e\u5230\u548c\u4ed6\u6709\u4ea4\uff0c\u5e76\u4e14\u4e0d\u5305\u542b\uff0c\u7136\u540e\u6743\u503c\u4e3a $i$\uff0c\u8981\u6c42\u6743\u503c\u6700\u5927\u3002\n\n\u90a3\u4e48\u601d\u8003\u8fd9\u4e2a\u95ee\u9898\u7c7b\u4f3c\u4e8e\u4e8c\u7ef4\u6570\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\u662f\uff1a\n\n$[a,b]$ \u548c $[c,d]$ \u6709\u4ea4\u3002\n\n\u90a3\u4e48\u5c31\u662f $a \\le c$ \u5e76\u4e14 $c \\le b \\le d$\u3002\n\n\u524d\u9762\u90a3\u4e2a\u53ef\u4ee5\u76f4\u63a5\u6392\u5e8f\u6d88\u6389\uff0c\u540e\u9762\u90a3\u4e2a\u53ef\u4ee5\u4e0a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\u3002\n\n\u4e8e\u662f\u518d DP \u4e00\u4e0b\u8bb0\u5f55\u65b9\u6848\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5199\u7684\u6bd4\u8f83\u5197\u4f59\uff0c\u5b9e\u9645\u4e0a\u6ca1\u90a3\u4e48\u957f\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u79cd\u601d\u8def\u66f4\u597d\u60f3\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define pii pair<int,int>\n#define fi first\n#define se second\nusing namespace std;\nconst int INF=1e6+5;\nint n,nxt[INF],a[INF],id[INF],pre4[INF];\nmap <int,int> la,la1;\nstruct Segment{\n    #define ll tl[id]\n    #define rr tr[id]\n    #define ls(x) x<<1\n    #define rs(x) x<<1|1\n    int tl[INF<<2],tr[INF<<2],sum[INF<<2];\n    void push_up(int id) {\n        sum[id]=max(sum[ls(id)],sum[rs(id)]);\n    }\n    void build(int l,int r,int id) {\n        ll=l;rr=r;\n        if (ll==rr) {sum[id]=0;return ;}\n        int Mid=(ll+rr)>>1;\n        build(l,Mid,ls(id));\n        build(Mid+1,r,rs(id));\n        push_up(id);\n    }\n    void add(int l,int x,int id) {\n        if (ll==rr) {\n            sum[id]=x;\n            return ;\n        }\n        int Mid=(ll+rr)>>1;\n        if (l<=Mid) add(l,x,ls(id));\n        else add(l,x,rs(id));\n        push_up(id);\n    }\n    int query(int l,int r,int id) {\n        if (l<=ll && rr<=r) return sum[id];\n        int Mid=(ll+rr)>>1;\n        if (l>Mid) return query(l,r,rs(id));\n        else if (r<=Mid) return query(l,r,ls(id));\n        else return max(query(l,r,ls(id)),query(l,r,rs(id)));\n    }\n}T1;\nstruct _node_edge{\n    int to_,next_,disv_;\n}edge[INF<<1];\nint tot,head[INF],pre[INF],pre1[INF],pre2[INF],pre3[INF];\nvoid add_edge(int x,int y,int z) {\n    edge[++tot]={y,head[x],z};\n    head[x]=tot;\n}\nnamespace Sub {\n    void print(int x) {\n        if (x==0) return ;\n        print(pre3[x]);\n        if (pre1[x])\n            cout<<a[pre2[x]]<<\" \"<<a[pre1[x]]<<\" \"<<a[pre4[x]]<<\" \"<<a[x]<<\" \";\n    }\n    int f[INF];\n    void main() {\n        f[0]=0;\n        for (int x=1;x<=n;x++) {\n            f[x]=f[x-1];pre3[x]=x-1;\n            for (int i=head[x];i;i=edge[i].next_) {\n                int v=edge[i].to_,d=edge[i].disv_;\n                if (f[v-1]+4<=f[x]) continue;\n                // cout<<v<<\" -> \"<<x<<\" \"<<id[i]<<\" yiw?\\n\";\n                pre[x]=nxt[v];pre1[x]=d;pre2[x]=v;pre3[x]=v-1;\n                pre4[x]=nxt[pre2[x]];\n                if (id[i]) pre4[x]=nxt[nxt[pre2[x]]];\n                f[x]=f[v-1]+4;\n            }\n        }\n\n        cout<<f[n]<<\"\\n\";\n        print(n);\n    }\n}\nsigned main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n;\n    for (int i=1;i<=n;i++) cin>>a[i];\n    for (int i=n;i;i--) {\n        if (la[a[i]]) nxt[i]=la[a[i]];\n        else nxt[i]=n+1;\n        la[a[i]]=i;\n    }\n\n    // for (int i=1;i<=n;i++) f[i][0]=nxt[i],f1[i][0]=i;\n    // for (int i=1;i<=25;i++) {\n    //     if ((1ll<<i)>n) break;\n    //     for (int j=1;j+(1<<i)-1<=n;j++) {\n    //         if (f[j][i-1]>f[j+(1<<(i-1))][i-1]) \n    //             f[j][i]=f[j+(1<<(i-1))][i-1],f1[j][i]=f1[j+(1<<(i-1))][i-1];\n    //         else f[j][i]=f[j][i-1],f1[j][i]=f1[j][i-1];\n    //     }\n    // }\n    // for (int i=1;i<=n;i++)\n    //     cout<<nxt[i]<<\" \";\n    // cout<<\" endl\\n\";\n    T1.build(1,n,1);\n    for (int i=1;i<=n;i++) {\n\n        int R=i;\n        for (int j=1;j<=3;j++) R=nxt[R];\n        if (R<=n) add_edge(R,i,nxt[i]),id[tot]=1;\n    }\n\n    //     if (nxt[i]==n+1) continue;\n    //     if (i==nxt[i]-1) continue;\n    //     pii k1=T1.query(i+1,nxt[i]-1,nxt[i],1);\n    //     int kk=k1.se;\n\n    //     // cout<<kk<<\" kekkqwe\\n\";\n    //     // i->kk->nxt[i]->nxt[kk]\n    //     if (i<kk && kk<nxt[i] && nxt[i]<nxt[kk]) add_edge(nxt[kk],i,kk);\n    // }\n    \n    for (int i=1;i<=n;i++) {\n        if (nxt[i]==n+1) continue;\n        if (i==nxt[i]-1) continue;\n        int kk=T1.query(i+1,nxt[i]-1,1);\n        // cout<<kk<<\" \"<<nxt[i]<<\" yiwiyw\\n\";\n        if (kk<i && i<nxt[kk] && nxt[kk]<nxt[i]) add_edge(nxt[i],kk,i);\n        T1.add(nxt[i],i,1);\n    }\n    Sub::main();\n    return 0;\n}\n```\n",
        "postTime": 1671593415,
        "uid": 208653,
        "name": "_edge_",
        "ccfLevel": 0,
        "title": "CF467E"
    }
]