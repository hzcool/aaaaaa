[
    {
        "content": "## CF1680E Moving Chips\n\n### \u7b97\u6cd5\n\n\u8fd9\u9898\u91cc\u5403\u7684\u8def\u5f84\u5176\u5b9e\u662f\u53ef\u9006\u7684\uff0c\u6bd4\u5982\u8bf4 A \u5403\u4e86 B\uff0cC \u518d\u5403\u4e86 B \u548c A \u5403\u4e86 B \u7136\u540e\u7ee7\u7eed\u5403\u4e86 C \u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u51fa\u4ee3\u4ef7\u6700\u5c11\u7684\u4e00\u6761\u5403\u4eba\u8def\u5f84\uff0c\u5e76\u4e14\u53ef\u4ee5\u94a6\u5b9a\u4efb\u610f\u4e00\u4e2a\u661f\u53f7\u4f5c\u4e3a\u6700\u7ec8\u72b6\u6001\u3002\u5047\u5982\u8bbe\u6700\u540e\u7559\u4e0b\u6765\u7684\u662f\u6700\u53f3\u8fb9\u7684\u67d0\u4e2a\u661f\u53f7\uff0c\u90a3\u5c31\u662f\u300c\u4ece\u5de6\u5403\u5230\u53f3\u300d\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 DP \u6765\u6700\u4f18\u5316\u65b9\u6848\u3002\n\n\u8bbe $f(i,0/1)$ \u4e3a\u628a\u7b2c $1$ \u5230\u7b2c $i-1$ \u5217\u5168\u90e8\u5403\u6389\uff0c\u4e14\u661f\u53f7\u4ec5\u5728 $(i,0/1)$ \u65f6\u7684\u6700\u5c0f\u6b65\u6570\u3002\u5728\u5bf9\u8fd9\u4e00\u5217\u8fdb\u884c DP \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8981\u8003\u8651\u7684\u95ee\u9898\u662f**\u600e\u4e48\u628a\u4e0a\u4e00\u5217\u7684\u661f\u53f7\u5168\u90e8\u8f6c\u79fb\u5230\u8fd9\u4e00\u5217\u7684\u76ee\u6807\u4f4d\u7f6e\u4e2d\u53bb**\u3002\u5047\u5982\u672c\u5217\u6709\u4e24\u4e2a\u661f\u53f7\uff0c**\u5408\u5e76\u4e00\u5b9a\u66f4\u4f18**\uff08\u5426\u5219\u540c\u65f6\u79fb\u4e24\u4e2a\u5c31\u662f\u6d6a\u8d39\uff09\uff0c\u6240\u4ee5\u4e5f\u8981\u8003\u8651\u5408\u5e76\u3002\n\n- \u82e5\u5168\u90e8\u8f6c\u79fb\u5230 $(i,0)$\uff1a\n    - \u4ece $(i-1,0)$ \u8f6c\u79fb\uff1a\u4ee3\u4ef7\u4e3a $1$\uff0c\u4f46\u5982\u679c $(i,1)$ \u6709\u661f\u53f7\uff0c\u8fd8\u9700\u8981\u518d\u52a0\u4e00\u3002\n    - \u4ece $(i-1,1)$ \u8f6c\u79fb\uff1a\u53ef\u4ee5\u987a\u4fbf\u5403\u4e86 $(i,1)$\uff0c\u65e0\u8bba\u5982\u4f55\u4ee3\u4ef7\u59cb\u7ec8\u4e3a $2$\u3002\n- \u82e5\u5168\u90e8\u8f6c\u79fb\u5230 $(i,1)$\uff1a\n    - \u4ece $(i-1,1)$ \u8f6c\u79fb\uff1a\u4ee3\u4ef7\u4e3a $1$\uff0c\u4f46\u5982\u679c $(i,0)$ \u6709\u661f\u53f7\uff0c\u8fd8\u9700\u8981\u518d\u52a0\u4e00\u3002\n    - \u4ece $(i-1,0)$ \u8f6c\u79fb\uff1a\u4ee3\u4ef7\u59cb\u7ec8\u4e3a $2$\u3002\n\n\u53ef\u4ee5\u8f7b\u677e\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u3002\n\n### \u5b9e\u73b0\n\n```cpp\nint T, n;\nint g[200001][2], f[200001][2];\n\nint main() {\n    std::cin >> T;\n    while (T--) {\n        std::cin >> n;\n        for (int i = 1; i <= n; ++i)\n            f[i][0] = f[i][1] = 0;\n        for (int i = 0; i < 2; ++i) {\n            for (int j = 1; j <= n; ++j) {\n                char c; std::cin >> c;\n                g[j][i] = (c == '*');\n            }\n        }\n        int l = 1, r = n;\n        while (!g[l][0] && !g[l][1]) ++l;\n        while (!g[r][0] && !g[r][1]) --r;\n        for (int i = l; i <= r; ++i) {\n            f[i][0] = std::min(f[i - 1][0] + g[i][1] + 1, f[i - 1][1] + 2);\n            f[i][1] = std::min(f[i - 1][1] + g[i][0] + 1, f[i - 1][0] + 2);\n        }\n        std::cout << std::min(f[r][0], f[r][1]) - 1 << std::endl;\n        // \u4e4b\u524d\u6ca1\u6709\u7279\u5730\u7b97 f[l][0/1] \u7684\u521d\u59cb\u503c\uff0c\u5faa\u73af\u76f4\u63a5\u4ece l \u5f00\u59cb\uff0c\u4f46\u662f l-1 -> l \u7b97\u4e86 1 \u6b65\uff0c\u6240\u4ee5\u8fd9\u91cc\u51cf\u53bb\u4e00\u3002\n    }\n    return 0;\n}\n```",
        "postTime": 1652607094,
        "uid": 357545,
        "name": "CGDGAD",
        "ccfLevel": 6,
        "title": "CF1680E Moving Chips"
    },
    {
        "content": "-  \u7b80\u5355\u8d2a\u5fc3\u3002\u624b\u63a8\u5bb9\u6613\u53d1\u73b0\u6bcf\u4e2a\u8fde\u901a\u5757\u5408\u5e76\u7684\u6700\u5c11\u6b21\u6570\u4e00\u5b9a\uff0c\u6240\u4ee5\u8003\u8651\u600e\u4e48\u6d88\u8017\u6700\u5c11\u7684\u4ee3\u4ef7\u628a\u8fde\u901a\u5757\u8fde\u8d77\u6765\u3002\u6ce8\u610f\u5230\u53ea\u6709\u4e24\u884c\uff0c\u4e8e\u662f\u7ebf\u6027\u4ece\u5de6\u5f80\u53f3\u626b\u5206\u7c7b\u8ba8\u8bba\u8fde\u901a\u5757\u4e4b\u95f4\u4e0a\u9762\u4e0b\u9762\u51f8\u51fa\u8fd8\u662f\u4e0a\u4e0b\u5e73\u7684\u3002\n\n- \u4ee3\u7801\uff1a\n\n```cpp\n///*****Sellaris*****///\n//#pragma once\n//#pragma GCC optimize(2)\n//#pragma GCC optimize(3)\n#include <bits/stdc++.h>\n//#include <bits/extc++.h>\n#define ll long long\nusing namespace std;\n//using namespace __gnu_pbds;\nconst int maxn=2e5+10;\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-f;ch=getchar();}\n    while(isdigit(ch)){ret=ret*10+ch-'0';ch=getchar();}\n    return ret*f; //x=(x<<1)+(x<<3)+(ch^48);\n}\nint n;\nchar s[3][maxn];\nint cnt=0;\ninline void solve(){\n\tcin>>n;\n\tcin>>s[1]+1;\n\tcin>>s[2]+1;\n\tint flag=0;\n\tint ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(s[1][i]=='.' && s[1][i]==s[2][i]) {\n\t\t\tcnt++;\n\t\t}\n\t\tif(s[1][i]=='*' && s[1][i]==s[2][i]) {\n\t\t\tans=ans+2;\n\t\t\tif(flag!=0) ans+=cnt;\n\t\t\tflag=2;//all\n\t\t\tcnt=0;\n\t\t}else if(s[1][i]=='*' && s[1][i]!=s[2][i]){\n\t\t\tans=ans+1;\n\t\t\tif(flag==2 || flag==3) ans+=cnt;\n\t\t\tif(flag==4) ans+=cnt+1,flag=2;\n\t\t\telse flag=3;//up\n\t\t\tcnt=0;\n\t\t}else if(s[1][i]=='.' && s[1][i]!=s[2][i]){\n\t\t\tans+=1;\n\t\t\tif(flag==2 || flag==4) ans+=cnt;\n\t\t\tif(flag==3) ans+=cnt+1,flag=2;\n\t\t\telse flag=4;//down\n\t\t\tcnt=0;\n\t\t}\n\tcout<<ans-1<<endl;\n}\nsigned main(){\n    //std::ios::sync_with_stdio(false);std::cin.tie(NULL);std::cout.tie(NULL);\n    //freopen(\"in.txt\",\"r\",stdin);\n\t//freopen(\"out.txt\",\"w\",stdout);\n\tint t=read();\n\twhile(t--){\n\t\tsolve();\n\t}\n    return 0;\n}\n\n```\n\n",
        "postTime": 1655225235,
        "uid": 567739,
        "name": "Sellaris",
        "ccfLevel": 4,
        "title": "CF1680E"
    },
    {
        "content": "\u4eca\u5929\u591a\u6821\u8054\u6d4b\u8003\u4e86\u8fd9\u9053\u9898\uff0c\u6211\u8003\u573a\u4e0a\u5e72\u4e86\u4e09\u4e2a\u5c0f\u65f6\u786c\u662f\u6ca1\u5e72\u51fa\u6765\uff0c\u540e\u6765\u6539\u4e86\u5341\u51e0\u5206\u949f\u5c31\u5207\u4e86\uff0c\u7279\u6b64\u5199\u7bc7\u9898\u89e3\u3002\n\n--------\n\n\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd $O(n)$ \u7684\u7b97\u6cd5\u3002\n\n~~\u5927\u529b\u5206\u7c7b\u8ba8\u8bba~~\u3002\n\n\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u4e00\u4e2a\u68cb\u5b50\u4ece\u8d77\u59cb\u70b9\u79fb\u5230\u7ec8\u70b9\uff0c\u671f\u95f4\u4e0e\u5176\u4ed6\u68cb\u5b50\u5408\u5e76\u4ee5\u5171\u540c\u79fb\u52a8\u3002\u90a3\u4e48\u8fd9\u4e2a\u68cb\u5b50\u663e\u7136\u662f\u5728\u4e24\u8fb9\u7684\u65f6\u5019\u624d\u80fd\u66f4\u591a\u5730\u4e0e\u5176\u4ed6\u68cb\u5b50\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u5197\u4f59\u79fb\u52a8\u3002\u4e0d\u59a8\u8bbe\u8be5\u68cb\u5b50\u4e3a\u6700\u5de6\u8fb9\u7684\u68cb\u5b50(\u56e0\u4e3a\u4ece\u5de6\u5f80\u53f3\u63a8\u548c\u4ece\u53f3\u5f80\u5de6\u63a8\u662f\u7b49\u4ef7\u7684)\u3002\u79f0\u8be5\u68cb\u5b50\u4e3a\u4e3b\u68cb\u5b50\u3002\n\n\u8003\u8651\u5982\u4f55\u8ba9\u4e3b\u68cb\u5b50\u4e0e\u5176\u4ed6\u68cb\u5b50\u5408\u5e76\u3002\n\n--------\n\n\u8bbe $\\text{sus}$ $(\\text{status}$\uff0c\u72b6\u6001$)$\uff0c\u5f53\u5176\u503c\u4e3a $1$ \u65f6\u8bf4\u660e\u4e3b\u68cb\u5b50\u5176\u5904\u4e8e\u7b2c\u4e00\u884c\u3002\u7c7b\u4f3c\u5730\uff0c\u5176\u503c\u4e3a $2$ \u65f6\u8bf4\u660e\u4e3b\u68cb\u5b50\u76ee\u524d\u5904\u4e8e\u7b2c\u4e00\u884c\u3002\n\n\u5f53\u5176\u503c\u4e3a $0$ \u65f6\u4e3a\u4e0d\u5b9a\u6001\uff0c\u4e5f\u5c31\u662f\u4e3b\u68cb\u5b50\u65e2\u53ef\u4ee5\u4f4d\u4e8e\u7b2c\u4e00\u884c\u4e5f\u53ef\u4ee5\u7b2c\u4e8c\u884c\u65f6\u3002\n\n### \u5f53\u4e3b\u68cb\u5b50\u72b6\u6001\u786e\u5b9a\u65f6(\u5373 $\\text{sus}$ \u4e3a $1$ \u6216 $2$ \u65f6)\n\n*(\u4ee5\u4e0b `x` \u6307\u7684\u5c31\u662f\u4e3b\u68cb\u5b50)*\n\n- \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4e0e\u540c\u884c\u68cb\u5b50\u5408\u5e76\u3002\n\n```\nx *\n. .\n```\n\n\u663e\u7136\u53ea\u9700\u8981\u5c06 `x` \u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u5373\u53ef\u5408\u5e76\uff0c\u7b54\u6848\u4ec5\u9700\u8981 $+1$\uff0c\u4e0d\u9700\u8981\u5c06\u4e3b\u68cb\u5b50\u6362\u884c\uff0c\u6240\u4ee5 $\\text{sus}$ \u4ecd\u7136\u4e3a $1$\u3002\n\n--------\n\n- \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u4e0e\u5f02\u884c\u68cb\u5b50\u5408\u5e76\u3002\n\n```\nx .\n. *\n```\n\n\u6b64\u65f6\u53ef\u4ee5\u5c06\u4e3b\u68cb\u5b50\u6362\u884c\u4e0e `*` \u5408\u5e76\uff0c**\u4f46\u662f**\u4e5f\u53ef\u4ee5\u8ba9 `*` \u6362\u884c\u5230\u7b2c\u4e00\u884c\u4e0e\u4e3b\u68cb\u5b50\u5408\u5e76\u3002\u5206\u4e24\u79cd\u60c5\u51b5\u3002\n\n```\nx . * *\n. * . .\n```\n\n$\u2191$ \u8fd9\u79cd\u60c5\u51b5\u4e0b\u8ba9\u7b2c\u4e8c\u884c\u7684 `*` \u5230\u7b2c\u4e00\u884c\u4e0e\u4e3b\u68cb\u5b50\u5408\u5e76\u662f\u66f4\u4f18\u7684\u3002\n\n```\nx . . .\n. * * *\n```\n\n$\u2191$ \u8fd9\u79cd\u60c5\u51b5\u4e0b\u8ba9\u4e3b\u68cb\u5b50\u5230\u7b2c\u4e8c\u884c\u4e0e\u5176\u4ed6\u68cb\u5b50\u5408\u5e76\u662f\u66f4\u4f18\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba9\u6b64\u65f6\u7684 $\\text{sus}$ \u53d8\u4e3a\u4e0d\u5b9a\u6001\uff0c\u4ee4\u7b54\u6848 $+2$ (\u56e0\u4e3a\u4e3b\u68cb\u5b50\u548c\u5176\u4ed6\u68cb\u5b50\u5fc5\u5b9a\u6709\u4e00\u4e2a\u8981\u6362\u884c\uff0c\u6240\u4ee5\u8981\u989d\u5916 $+1$ )\u3002\n\n--------\n\n- \u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u540c\u65f6\u4e0e\u4e24\u4e2a\u884c\u7684\u68cb\u5b50\u5408\u5e76\u3002\n\n```\n. *\nx *\n```\n\n\u6b64\u65f6\u4e3b\u68cb\u5b50\u65e2\u53ef\u53d8\u4e3a\u7b2c\u4e00\u884c\uff0c\u4e5f\u53ef\u4ee5\u53d8\u4e3a\u7b2c\u4e8c\u884c\uff0c\u5bf9\u5f53\u524d\u4e00\u6b65\u7684\u7b54\u6848\u65e0\u5f71\u54cd\uff0c\u4e8e\u662f\u53ef\u4ee5\u8ba9 $\\text{sus}$ \u53d8\u4e3a\u4e0d\u5b9a\u6001\uff0c\u4ee4\u7b54\u6848 $+2$ (\u539f\u56e0\u540c\u4e0a\u4e00\u79cd\u60c5\u51b5)\u3002\n\n### \u5f53\u4e3b\u68cb\u5b50\u72b6\u6001\u4e0d\u786e\u5b9a\u65f6(\u5373 $\\text{sus}$ \u4e3a $0$ \u65f6)\n\n*(\u4ee5\u4e0b `?` \u6307\u7684\u5c31\u662f\u4e3b\u68cb\u5b50\u5904\u4e8e\u4e0d\u5b9a\u6001)*\n\n- \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4e0e\u5355\u4e2a\u68cb\u5b50\u5408\u5e76\u3002\n\n```\n? *\n? .\n```\n\n\u7531\u4e8e\u6b64\u65f6\u4e3b\u68cb\u5b50\u7684\u4f4d\u7f6e\u53ef\u4ee5\u5728\u7b2c\u4e00\u884c\uff0c\u4e5f\u53ef\u4ee5\u5728\u7b2c\u4e8c\u884c\uff0c\u6240\u4ee5\u76f4\u63a5\u4ee4 $\\text{sus}$ \u53d8\u4e3a\u65b0\u68cb\u5b50\u6240\u5728\u884c\uff0c\u4ee4\u7b54\u6848 $+1$ \u5373\u53ef\u3002\n\n--------\n\n- \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u4e0e\u4e24\u4e2a\u68cb\u5b50\u5408\u5e76\u3002\n\n```\n? *\n? *\n```\n\n\u6b64\u65f6\u4e3b\u68cb\u5b50\u5408\u5e76\u4e4b\u540e\u4ecd\u7136\u4e3a\u4e0d\u5b9a\u6001\uff0c\u4f46\u662f\u65b0\u7684\u68cb\u5b50\u4e4b\u4e00\u4ecd\u9700\u8981\u6362\u884c\uff0c\u6240\u4ee5\u7b54\u6848\u5e94 $+2$\u3002\n\n--------\n\n\u5206\u7c7b\u8ba8\u8bba\u4ece\u5de6\u5f80\u53f3\u626b\u4e00\u904d\u5373\u53ef\u3002\u4ee3\u7801\u91cc\u6709\u4e00\u4e9b\u6ce8\u91ca\u8f85\u52a9\u7406\u89e3\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```cpp\n#include <iostream>\n#define GMY (520&1314)\n#define FBI_OPENTHEDOOR(x, y) freopen(#x \".in\", \"r\", stdin), freopen(#y \".out\", \"w\", stdout);\n#define re register int\n#define char_phi signed\n#define _ ' '\n#define CASE 10005\n#define N 200005\nusing namespace std;\ninline void Fastio_setup(){ios::sync_with_stdio(false); cin.tie(NULL), cout.tie(NULL);}\n\nint T, n, sus, final_ans, st, ed;// status 0\uff1a\u4e0d\u5b9a\u6001\uff1b1\uff1a\u884c\u4e00\uff1b2\uff1a\u884c\u4e8c\nchar s[3][N];\n\ninline void Clean(){ sus = final_ans = st = ed = 0; }\n\ninline void work(){\n\tClean();\n\tcin >> n;\n\tcin >> s[1]+1;\n\tcin >> s[2]+1;\n\t\n\tfor (re i = 1 ; i <= n ; ++ i)// \u627e\u8d77\u70b9\n\t\tif (s[1][i] == '*' or s[2][i] == '*')\n\t\t\t{ st = i; break; }\n\tfor (re i = n ; i >= 1 ; -- i)// \u627e\u7ec8\u70b9\n\t\tif (s[1][i] == '*' or s[2][i] == '*')\n\t\t\t{ ed = i; break; }\n    \n\tif (s[1][st] == '*' and s[2][st] == '*')// \u5224\u65ad\u5f53\u524d\u4f4d\u4e8e\u8d77\u70b9\u65f6\u7684\u72b6\u6001\n\t\tsus = 0, final_ans = 1;\n\telse if (s[1][st] == '*')\n\t\tsus = 1;\n\telse if (s[2][st] == '*')\n\t\tsus = 2;\n\t\n\tfor (re i = st+1 ; i <= ed ; ++ i){\n\t\tif (s[1][i] == '*' and s[2][i] == '*'){\n\t\t\tif (sus == 0)// \u4e0d\u5b9a\u6001\u4e0e\u4e24\u4e2a\u68cb\u5b50\u5408\u5e76\n\t\t\t\tsus = 0, final_ans += 2;\n\t\t\telse if (sus == 1)// \u884c\u8f6c\u4e0d\u5b9a\u6001\n\t\t\t\tsus = 0, final_ans += 2;\n\t\t\telse \n\t\t\t\tsus = 0, final_ans += 2;\n\t\t}\n\t\telse if (s[1][i] == '*'){\n\t\t\tif (sus == 0)// \u4e0d\u5b9a\u6001\u8f6c\u884c\n\t\t\t\tsus = 1, final_ans += 1;\n\t\t\telse if (sus == 1)// \u540c\u884c\n\t\t\t\tsus = 1, final_ans += 1;\n\t\t\telse // \u884c\u4e92\u6362\n\t\t\t\tsus = 0, final_ans += 2;\n\t\t}\n\t\telse if (s[2][i] == '*'){\n\t\t\tif (sus == 0)\n\t\t\t\tsus = 2, final_ans += 1;\n\t\t\telse if (sus == 2)\n\t\t\t\tsus = 2, final_ans += 1;\n\t\t\telse \n\t\t\t\tsus = 0, final_ans += 2;\n\t\t}\n\t\telse \n\t\t\tfinal_ans ++;\n\t}\n\t\n\tcout << final_ans << '\\n';\n}\n// #define IXINGMY\nchar_phi main(){\n\t#ifdef IXINGMY\n\t\tFBI_OPENTHEDOOR(a, a);\n\t#endif\n\tFastio_setup();\n\tcin >> T;\n\twhile (T --)\n\t\twork();\n\treturn GMY;\n}\n```",
        "postTime": 1665220589,
        "uid": 652982,
        "name": "char_phi",
        "ccfLevel": 4,
        "title": "CF1680E Moving Chips \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u7b80\u5355\u7684\u6a21\u62df\u5408\u5e76\u8fc7\u7a0b\u3002\n\n\u5408\u5e76\u7ec8\u70b9\u5904\u4e8e\u661f\u53f7\u7684\u533a\u95f4\u5185\u7b54\u6848\u90fd\u662f\u7b49\u4ef7\u7684\u3002\n\n\u7b80\u5355\u663e\u7136\u4e00\u4e0b\u5c31\u662f\uff0c$4$ \u5230 $7$ \u7684\u4e00\u6bb5\u533a\u95f4\uff0c$4$ \u5230 $7$ \u4e4b\u95f4\u7684\u6240\u6709\u6570\u5230\u4e24\u5934\u7684\u8ddd\u79bb\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u4e3a $3$\uff0c\u5982\u679c\u5728\u533a\u95f4\u5916\uff0c\u5230 $4$ \u548c $7$ \u7684\u8ddd\u79bb\u4e00\u5b9a\u5927\u4e8e $3$\u3002\n\n\u6211\u4eec\u8003\u8651\u4ece\u6700\u53f3\u7aef\u5f00\u59cb\uff0c\u4e00\u8def\u5408\u5e76\u5230\u6700\u5de6\u7aef\u3002\n\n\u5148 $O(n)$ \u9884\u5904\u7406\u51fa\u884c $1$ \u548c\u884c $2$ \u7684\u6700\u5de6\u548c\u6700\u53f3\u7684\u661f\u53f7\u4f4d\u7f6e\uff0c\n\u5206\u522b\u8bb0\u4e3a $le1$\uff0c$ri1$\uff0c$le2$\uff0c$ri2$\u3002\n\n\u56e0\u4e3a\u5b58\u5728\u4e00\u4e2a\u540c\u65f6\u5e73\u79fb\u7684\u6027\u8d28\uff0c\u80af\u5b9a\u662f\u4ece\u6700\u8fb9\u754c\u7684\u70b9\u4e00\u8def\u5408\u5e76\u6700\u4f18\uff0c\u5047\u8bbe\u7ec8\u70b9\u56fa\u5b9a\uff0c\u6700\u540e\u8fb9\u754c\u4e00\u5b9a\u8981\u5230\u7ec8\u70b9\uff0c\u5b83\u4f1a\u7ecf\u8fc7\u6574\u6bb5\u533a\u95f4\uff0c\u6240\u4ee5\u5728\u8fb9\u754c\u4e4b\u524d\u53bb\u5408\u5e76\u4e2d\u95f4\u7684\u70b9\u663e\u7136\u66f4\u52a3\uff0c\u6d6a\u8d39\u6b21\u6570\u3002\n\n\u5982\u679c $ri1 \\le le2$ \u6216\u8005 $ri2 \\le le1$ \u8fd9\u79cd\u60c5\u51b5\u76f4\u63a5\u628a\u4e24\u884c\u4ece\u5404\u81ea\u8fb9\u754c\u4f4d\u7f6e\u7684\u4e00\u4e2a\u661f\u53f7\uff0c\u4e00\u8def\u5e73\u79fb\u5230\u4e2d\u95f4 $ri1$ \u5230 $le2$ \u7684\u4f4d\u7f6e\u663e\u7136\u662f\u6700\u4f18\u7684\uff0c\u6700\u7ec8\u7b54\u6848\u518d\u52a0\u4e0a $1$ \u6b21\u4e0a\u4e0b\u5e73\u79fb\u5373\u53ef\uff0c\u540c\u65f6\u5904\u7406\u4e00\u4e0b\u96f6\u7684\u60c5\u51b5\u3002\n\n\u5982\u679c\u4e0a\u4e0b\u4e24\u884c\u7684\u533a\u95f4\u6709\u4ea4\u53c9\uff0c\u4f1a\u5728\u4e0a\u4e0b\u5e73\u79fb\u8fd9\u91cc\u51fa\u73b0\u4f18\u52a3\u95ee\u9898\u3002\u6211\u4eec\u7528 $1$ \u4ee3\u66ff\u661f\u53f7\u3002\n\n\u6bd4\u5982\uff1a\n\n$$0100$$\n\n$$1100$$\n\n\u5982\u679c\u6211\u4eec\u8981\u5c06\u4e0b\u9762\u4e24\u4e2a\u661f\u53f7\u79fb\u52a8\u5230\u7b2c\u4e00\u884c\u7b2c\u4e8c\u5217\uff0c\u4e24\u8005\u5148\u5728\u7b2c\u4e8c\u884c\u5408\u5e76\u518d\u4e0a\u79fb\u6b65\u6570\u662f $2$\uff0c\u5404\u81ea\u5355\u72ec\u79fb\u52a8\u4e0a\u53bb\u518d\u5408\u5e76\u6b65\u6570\u662f $3$\u3002\n\n\u4f46\u662f\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff1a\n\n$$1100$$\n\n$$1100$$\n\n\u4e0b\u9762\u4e24\u4e2a\u661f\u53f7\u5148\u5408\u5e76\u8fd8\u662f\u5148\u5404\u81ea\u4e0a\u79fb\u5bf9\u4e8e\u6700\u7ec8\u7b54\u6848\u5c31\u6ca1\u6709\u533a\u522b\u4e86\u3002\n\n\u8fd8\u6709\u8fd9\u79cd\u60c5\u51b5\uff1a\n\n$$10000001$$\n\n$$01111110$$\n\n\u5408\u5e76\u70b9\u5728\u4e0b\u9762\u5de6\u53f3\u5408\u5e76\u518d\u4e0a\u53bb\u663e\u7136\u662f\u6bd4\u628a\u4e0b\u9762\u7684\u90fd\u5355\u72ec\u79fb\u52a8\u4e0a\u53bb\u66f4\u4f18\u79c0\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u4e00\u79cd $O(n)$ \u7684\u8d2a\u5fc3\u7b56\u7565\u3002\n\n\u5148\u5bf9 $le1$\uff0c$le2$ \u53d6\u8f83\u5927\u503c\u4f5c\u4e3a\u5de6\u8fb9\u754c\uff0c$ri1$\uff0c$ri2$ \u53d6\u8f83\u5c0f\u503c\u4f5c\u4e3a\u53f3\u8fb9\u754c\u3002\n\n\u5904\u4e8e\u8fb9\u754c\u4e4b\u5916\u7684\u70b9\u4e0d\u4f1a\u6d89\u53ca\u4e0a\u4e0b\u4f18\u52a3\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u628a\u5b83\u4eec\u79fb\u52a8\u5230\u8fb9\u754c\u5373\u53ef\u3002\n\n\u5f00\u4e00\u4e2a $pos$ \u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u5408\u5e76\u70b9\u5904\u4e8e\u54ea\u4e00\u884c\u3002\n\n\u521d\u59cb\u5de6\u53f3\u8fb9\u754c\u90fd\u662f\u4e0a\u4e0b\u90fd\u6709\u70b9\u7684(\u56e0\u4e3a\u6211\u4eec\u79fb\u52a8\u8fc7\u6765\u4e86)\u3002\n\n\u6240\u4ee5\u521d\u59cb $pos=0$ \u610f\u5473\u5904\u4e8e\u4e0d\u5b9a\u6001\uff0c\u5373\u5bf9\u4e8e\u5408\u5e76\u70b9\u5904\u4e8e\u7684\u5217\u6765\u8bf4\uff0c\u5b83\u5230\u7b2c\u4e00\u884c\u548c\u7b2c\u4e8c\u884c\u6b65\u6570\u662f\u4e00\u6837\u7684\u7684\uff0c\u5177\u4f53\u5904\u5728\u54ea\u4e00\u884c\u6839\u636e\u4e0b\u4e00\u5217\u6765\u5224\u65ad\u5728\u54ea\u4e00\u884c\u66f4\u4f18\u3002\n\n\n**\u5982\u679c\u4e0a\u4e00\u5217\u662f\u4e0d\u5b9a\u6001**\n\n\u4e0b\u4e00\u5217\u5982\u679c\u4e0a\u4e0b\u90fd\u6709\u661f\u53f7\uff0c\u90a3\u4e48 $ans$ \u52a0 $2$\uff0c\u4f9d\u65e7\u5904\u4e8e\u4e0d\u5b9a\u6001\u3002\n\n\u4e0b\u4e00\u5217\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u661f\u53f7\uff0c\u90a3\u4e48 $ans$ \u52a0 $1$\uff0c$pos$ \u6839\u636e\u4e0b\u4e00\u5217\u7684\u4f4d\u7f6e\u5bf9\u5e94\u66f4\u65b0\u3002\n\n\u4e0b\u4e00\u5217\u662f\u4e24\u4e2a\u70b9\u53f7\uff0c\u76f4\u63a5 $ans$ \u52a0 $1$\uff0c\u4e0d\u505a\u5904\u7406\u3002\n\n**\u5982\u679c\u4e0a\u4e00\u5217 $pos$ \u662f $1$**\uff08\u4e0e $pos$ \u662f $2$ \u540c\u7406\uff09\n\n\u4e0b\u4e00\u5217\u5982\u679c\u662f\u4e0a\u4e0b\u90fd\u6709\u661f\u53f7\uff0c\u90a3\u4e48 $ans$ \u52a0 $2$\uff0c\u66f4\u65b0\u6210\u4e3a\u4e0d\u5b9a\u6001\u3002\n\n\u4e0b\u4e00\u5217\u5982\u679c\u662f\u5728\u7b2c\u4e00\u884c\u6709\u661f\u53f7\uff0c\u90a3\u4e48 $ans$ \u52a0 $1$\uff0c\u4f4d\u7f6e\u4e0d\u53d8\u3002\n\n\u4e0b\u4e00\u5217\u5982\u679c\u662f\u5728\u7b2c\u4e8c\u884c\u6709\u661f\u53f7\uff0c\u90a3\u4e48 $ans$ \u52a0 $2$\uff0c\u540c\u65f6 $pos$ \u66f4\u65b0\u4e3a\u4e0d\u5b9a\u6001\u3002\n\u56e0\u4e3a\u6b64\u523b\u4e0a\u4e00\u5217\u5230\u4e0b\u4e00\u5217\u8981\u8fbe\u6210\u5168\u6536\u96c6\uff0c\u5fc5\u987b\u8d70\u4e24\u6b65\uff0c\u8fd9\u4e24\u6b65\u53ef\u4ee5\u5148\u53f3\u518d\u4e0b\u5230\u7b2c\u4e8c\u884c\uff0c\u4e5f\u53ef\u4ee5\u5148\u53f3\uff0c\u518d\u8ba9\u4e0b\u9762\u7684\u4e0a\u6765\u8fd8\u662f\u7b2c\u4e00\u884c\u3002\n\n\u4e0b\u4e00\u5217\u662f\u4e24\u4e2a\u70b9\u53f7\uff0c\u76f4\u63a5 $ans$ \u52a0 $1$\uff0c\u4e0d\u505a\u5904\u7406\u3002\n\n\n\n\u53ef\u80fd\u8bf4\u8d77\u6765\u633a\u9ebb\u70e6\uff0c\u5176\u5b9e\u4ee3\u7801\u5e76\u4e0d\u590d\u6742\uff0c\u4e00\u4e9b\u7ec6\u8282\u5c31\u770b\u4ee3\u7801\u5427\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int mx=2e5+1000;\nint T,n;\nchar s[3][mx];                        \nvoid MYH(){\n    scanf(\"%d\",&T);\n    while(T--){\n        scanf(\"%d\",&n);\n        for(int i=1;i<=2;++i){\n            scanf(\"%s\",s[i]+1);\n        }\n        int po1=0,po2=0,mid=1e9,cn1=0,cn2=0,ans=0;\n        for(int i=1;i<=n;++i){\n            if(s[1][i]=='*'){if(po1==0)po1=i;cn1=i;}\n            if(s[2][i]=='*'){if(po2==0)po2=i;cn2=i;}\n        }\n        if(cn2<=po1){\n            if(cn2==0)ans=cn1-po1;\n            else ans=ans+po1-po2+cn1-po1+1;\n            printf(\"%d\\n\",ans);\n            continue;\n        }\n        else if(cn1<=po2){\n            if(cn1==0)ans=cn2-po2;\n            else ans=ans+po2-po1+cn2-po2+1;\n            printf(\"%d\\n\",ans);\n            continue;\n        }\n        ans=ans+abs(cn1-cn2);\n        ans=ans+abs(po1-po2);\n        int cnt=min(cn1,cn2);int po=max(po1,po2);\n        int up=0;ans++;\n        s[1][cnt]='*';s[2][cnt]='*';s[1][po]='*';s[2][po]='*';\n        for(int i=cnt-1;i>=po;--i){\n            if(s[1][i]=='*' && s[2][i]=='*')ans=ans+2;up=0;\n            if(s[1][i]=='*' && s[2][i]=='.'){\n                if(up==1)ans++;\n                else if(up==0)ans++;up=1;\n                else ans=ans+2;up=0;\n            }\n            if(s[1][i]=='.' && s[2][i]=='*'){\n                if(up==2)ans++;\n                else if(up==0)ans++;up=2;\n                else ans=ans+2;up=0;\n            }\n            if(s[1][i]=='.' && s[2][i]=='.')ans++;\n        }\n        printf(\"%d\\n\",ans);\n    }\n}\nint main(){\n  //  freopen(\"1.in\",\"r\",stdin);\n  //  freopen(\"1.out\",\"w\",stdout);\n    MYH();\n    return 0;\n}\n```\n\n\u795d\u60a8\uff0c\u6b66\u8fd0\u660c\u9686\n\n",
        "postTime": 1665216749,
        "uid": 280635,
        "name": "SMTwy",
        "ccfLevel": 0,
        "title": "CF1680E Moving Chips"
    },
    {
        "content": "### Analysis\n\n\u9898\u76ee\u4e2d\u7684 Chips \u6d88\u5931\u673a\u5236\u5373\u5bf9\u5e94\u7740\u5728 $2\\times n$ \u7684\u7f51\u683c\u56fe\u4e2d\u627e\u8fd9\u4e9b Chips \u521d\u59cb\u4f4d\u7f6e\u7684[\u6700\u5c0f\u65af\u5766\u7eb3\u6811](https://www.luogu.com.cn/problem/P6192)\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/wiojcnzg.png)\n\n\u5f53\u7136\u8fd9\u9053\u9898\u6ca1\u6709\u90a3\u4e2a\u8fd9\u4e48\u96be\u3002\n\n***\n\n**\u7ed3\u8bba\uff1a** \u6b64\u56fe\u5fc5\u7136\u6709\u4e00\u4e2a\u6700\u5c0f\u65af\u5766\u7eb3\u6811\uff0c\u4f7f\u5f97\u4e24\u4e2a\u76f8\u90bb\u5217\u4e4b\u95f4\u7684 $2$ \u6761\u8fb9\u6700\u591a\u9009\u62e9 $1$ \u6761\u3002\n\n\u8bc1\u660e\u7565\uff08\u975e\u5e38\u663e\u7136\uff0c\u8bfb\u8005\u81ea\u8bc1\uff09\u3002\n\n***\n\n\u6240\u4ee5\u53ea\u8981 $1\\to n$ \u904d\u5386\u6bcf\u4e00\u5217\uff0c\u8bb0\u5f55\u4e0e\u4e0a\u4e00\u5217\u8fde\u63a5\u7684\u662f\u4e0a\u8fb9\u8fd8\u662f\u4e0b\u8fb9\u7684\u6700\u5c0f\u8fb9\u6570\uff0c\u518d\u6309\u5f53\u524d\u5217 Chips \u7684\u72b6\u6001\u5206\u7c7b\u9012\u63a8\uff08\u5171 $4$ \u4e2d\u72b6\u6001\uff09\u3002\n\n\u65f6\u95f4 $O(n)$\u3002\n\n### Code\n\n```cpp\n//Said no more counting dollars. We'll be counting stars.\n#pragma GCC optimize(\"Ofast\")\n//#pragma GCC optimize(\"unroll-loops\")//DONT use rashly,I have suffered\n//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")//DONT use rashly,I have suffered\n#include<bits/stdc++.h>\nusing namespace std;\n#define IOS ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)\n#define fir first\n#define sec second\n#define mkp make_pair\n#define pb emplace_back\n#define mem(x,y) memset(x,y,sizeof(x))\n#define For(i,j,k) for(int i=j;i<=k;i++)\n#define Rof(i,j,k) for(int i=j;i>=k;i--)\n#define Fe(x,y) for(int x=head[y];x;x=e[x].nxt)\n#define ckmx(a,b) a=max(a,b)\n#define ckmn(a,b) a=min(a,b)\n#define fin(s) freopen(s,\"r\",stdin)\n#define fout(s) freopen(s,\"w\",stdout)\n#define file(s) fin(s\".in\");fout(s\".out\")\n#define cerr cerr<<'_'\n#define debug cerr<<\"Passed line #\"<<__LINE__<<endl\ntemplate<typename T>T ov(T x){cerr<<\"Value: \"<<x<<endl;return x;}\n#define ll long long\nconst ll mod=1000000007;\ninline ll pw(ll x,ll y){ll r=1;while(y){if(y&1)r=r*x%mod;x=x*x%mod;y>>=1;}return r;}\ninline void mad(ll &a,ll b){a=(a+b)%mod;while(a<0)a+=mod;}\ninline void mmu(ll &a,ll b){a=a*b%mod;while(a<0)a+=mod;}\n#define inv(a) pw(a,mod-2)\n#define int long long\n#define N 200010\n\nchar ch;\nint n,b[N];\npair<int,int> a[N];\nvoid work(){\n\tcin>>n;\n\tFor(i,1,n){\n\t\tcin>>ch;\n\t\ta[i].fir=ch=='*';\n\t}\n\tFor(i,1,n){\n\t\tcin>>ch;\n\t\ta[i].sec=ch=='*';\n\t}\n\tb[n+1]=0;\n\tRof(i,n,1) b[i]=b[i+1]+a[i].fir+a[i].sec;\n\tbool flag=0;\n\tint a1=1,a2=1,b1,b2;\n\tFor(i,1,n){\n\t\tif(!flag && b[i]-b[i+1]==0) continue;\n\t\tif(!flag){\n\t\t\tflag=1;\n\t\t\tif(a[i].fir) a2=2;\n\t\t\tif(a[i].sec) a1=2;\n\t\t\tcontinue;\n\t\t}\n\t\tif(b[i]==0) continue;\n\t\tif(a[i].fir==1 && a[i].sec==1){\n\t\t\tb1=b2=2+min(a1,a2);\n\t\t}\n\t\tif(a[i].fir==1 && a[i].sec==0){\n\t\t\tb1=1+min(a1,1+a2);\n\t\t\tb2=2+min(a1,a2);\n\t\t}\n\t\tif(a[i].fir==0 && a[i].sec==1){\n\t\t\tb1=2+min(a1,a2);\n\t\t\tb2=1+min(1+a1,a2);\n\t\t}\n\t\tif(a[i].fir==0 && a[i].sec==0){\n\t\t\tb1=1+min(a1,1+a2);\n\t\t\tb2=1+min(a2,1+a1);\n\t\t}\n\t\ta1=b1;\n\t\ta2=b2;\n\t}\n\tcout<<min(a1,a2)-1<<endl;\n}\nsigned main(){IOS;\n\tint T;cin>>T;\n\twhile(T--)work();\nreturn 0;}\n```\n\n",
        "postTime": 1652614793,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "CF1680E Moving Chips\uff08\u6700\u5c0f\u65af\u5766\u7eb3\u6811\u5f31\u5316\u7248\uff09"
    }
]