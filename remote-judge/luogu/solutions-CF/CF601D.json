[
    {
        "content": "## \u524d\u8a00\n\u6765\u70b9\u9634\u95f4 vp \u65f6\u7684\u795e\u5947\u505a\u6cd5\u3002\n## \u601d\u8def\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7\u4e00\u4e9b\u65b9\u6cd5\u679a\u4e3e\u6240\u6709\u7684\u5b50\u4e32\u3002\n\n\u76f4\u63a5\u5b58\u6240\u6709\u5b50\u4e32\u663e\u7136\u4e0d\u592a\u884c\uff0c\u8003\u8651\u7ef4\u62a4 Hash \u503c\u3002\n\n\u7531\u4e8e\u9700\u8981\u652f\u6301\u63d2\u5165\uff0c\u5168\u4f53\u4e58 $base$\uff0c\u5168\u4f53\u52a0\u4e00\u4e2a\u503c\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u663e\u7136\u5b8c\u5168\u4e0d\u80fd\u7ef4\u62a4\u8fd9\u79cd\u96c6\u5408\uff0c\u90a3\u4e48 dsu-on-tree \u5462\uff1f\n\n\u9996\u5148 dsu-on-tree \u7684\u4e00\u4e9b\u6b65\u9aa4\u90fd\u662f\u66b4\u529b\u63d2\u5165\u548c\u66b4\u529b\u5220\u9664\uff0c\u4e8e\u662f\u95ee\u9898\u53d8\u6210\u4e86\u8fd9\u4e2a\u4e1c\u897f\uff1a\n\n* \u96c6\u5408\n* \u652f\u6301\u63d2\u5165\n* \u652f\u6301\u5168\u4f53\u52a0\n* \u652f\u6301\u5168\u4f53\u4e58\n* \u652f\u6301\u67e5\u8be2\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\n* \u6240\u6709\u64cd\u4f5c\u5728\u6a21\u5927\u8d28\u6570\u610f\u4e49\u4e0b\u8fdb\u884c\n\n\u8fd9\u4e2a\u5c31\u6bd4\u8f83\u597d\u505a\u4e86\uff0c\u6211\u4eec\u5728\u4e00\u4e2a\u64cd\u4f5c\u7684\u65f6\u5019\u4e0d\u6539\u53d8\u96c6\u5408\u5185\u7684\u6570\uff0c\u800c\u8ba9\u4e4b\u540e\u6240\u6709\u7684\u63d2\u5165\u64cd\u4f5c\u989d\u5916\u4e58\u4e0a\u4e00\u4e2a\u7cfb\u6570\u5373\u53ef\uff0c\u4e8e\u662f\u6b64\u9898\u5728 $O(n\\log^2n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u3002\n\n\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u5b50\u4e32\u6570\u91cf\u4f1a\u8fbe\u5230 $10^{12}$ \u7ea7\u522b\uff0c\u5355\u6a21\u662f\u4e00\u5b9a\u4f1a\u88ab\u5361\u7684\uff0c\u8bf7\u4f7f\u7528\u53cc\u6a21\u6216\u591a\u6a21 hash\u3002\n\n\u53ef\u80fd\u7565\u5fae\u5361\u5e38\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u706b\u8f66\u5934\u5728 C++17(64) \u4e0b\u901a\u8fc7\u3002\n## \u4ee3\u7801\n```cpp\n// Problem: D. Acyclic Organic Compounds\n// Contest: Codeforces Round #333 (Div. 1)\n// URL: https://codeforces.com/contest/601/problem/D\n// Memory Limit: 512 MB\n// Time Limit: 3000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n \n//And in that light,I find deliverance.\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\nusing namespace std;\n#define int long long\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nconst int p1=1019260817,p2=998244353,base=131;\nint qp1(int x,int y)\n{\n\tint res=1;\n\tfor(int t=x; y; y>>=1,t=t*t%p1) if(y&1) res=res*t%p1;\n\treturn res;\n}\nint qp2(int x,int y)\n{\n\tint res=1;\n\tfor(int t=x; y; y>>=1,t=t*t%p2) if(y&1) res=res*t%p2;\n\treturn res;\n}\n#define mp(x,y) make_pair(x,y)\nset<pair<int,int>> ss;\nchar str[300003];\nint mx=-1,cnt=0;\nint son[300003],sz[300003];\nint a[300003];\nvector<int> e[300003];\nvoid dfs(int x,int fa)\n{\n\tsz[x]=1;\n\tfor(int y:e[x]) if(y!=fa)\n\t\tdfs(y,x),sz[x]+=sz[y],(sz[y]>sz[son[x]])&&(son[x]=y);\n\treturn ;\n}\nvoid add(int x,int fa,int qwq,int awa,int qwq_,int awa_,\nint k,int b,int k_,int b_,set<pair<int,int>> &s)\n{\n\tqwq=(qwq+awa*str[x])%p1,awa=awa*131%p1;\n\tqwq_=(qwq_+awa_*str[x])%p2,awa_=awa_*131%p2;\n\ts.insert(make_pair((qwq+p1-b)*qp1(k,p1-2)%p1,\n\t(qwq_+p2-b_)*qp2(k_,p2-2)%p2));\n\tfor(int y:e[x]) if(y!=fa) \n\t\tadd(y,x,qwq,awa,qwq_,awa_,k,b,k_,b_,s);\n\treturn ;\n}\nvoid solve(int x,int fa,int&k,int&b,int&k_,int&b_,set<pair<int,int>> &s)\n{\n\tset<pair<int,int>> st;\n\tint tk,tb,tk_,tb_;\n\tfor(int y:e[x]) if(y!=fa&&y!=son[x]) \n\ttk=tk_=1,tb=tb_=0,solve(y,x,tk,tb,tk_,tb_,st),st.clear();\n\tif(son[x]) solve(son[x],x,k,b,k_,b_,s);\n\t//(kx+b)*131+s[x]\n\tb=(b*131+str[x])%p1,k=k*131%p1;\n\tb_=(b_*131+str[x])%p2,k_=k_*131%p2;\n\ts.insert(make_pair((p1+str[x]-b)*qp1(k,p1-2)%p1,\n\t(p2+str[x]-b_)*qp2(k_,p2-2)%p2));\n\tfor(int y:e[x]) if(y!=fa&&y!=son[x]) \n\tadd(y,x,str[x],131,str[x],131,k,b,k_,b_,s);\n\ta[x]+=(int)s.size();\n\tif(a[x]>mx) mx=a[x],cnt=1;\n\telse if(a[x]==mx) ++cnt; \n\treturn ;\n}\nsigned main()\n{\n\tint n=read();\n\tfor(int i=1; i<=n; ++i) a[i]=read();\n\tscanf(\"%s\",str+1);\n\tfor(int i=1; i<n; ++i)\n\t{\n\t\tint u=read(),v=read();\n\t\te[u].push_back(v);\n\t\te[v].push_back(u);\n\t}\n\tset<pair<int,int>> s;\n\tint K=1,B=0,KK=1,BB=0;\n\tdfs(1,1),solve(1,1,K,B,KK,BB,s);\n\tprintf(\"%lld\\n%lld\\n\",mx,cnt);\n\treturn 0;\n}\n```",
        "postTime": 1636376382,
        "uid": 111055,
        "name": "dead_X",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF601D"
    },
    {
        "content": "\u8fd9\u4e2a\u73a9\u610f\u660e\u663e\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76+trie\u3002\n\n\u4ece\u5e95\u4e0b\u5230\u4e0a\u9762\u76f4\u63a5\u5408\u5e76\u4e0a\u53bb\uff0c\u7136\u540e\u5c31\u77e5\u9053\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u4e32\u4e86\uff08\u4e0d\u540c\u7ed3\u5c3e\u3002\uff09\n\uff08\u4e32\u5e94\u8be5\u662f\u53cd\u7684\u3002\uff09\n\n\u7136\u540e\u5c31\u76f4\u63a5\u66f4\u65b0\u7b54\u6848\u5373\u53ef\uff1f",
        "postTime": 1599660142,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF601D \u3010Acyclic Organic Compounds\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\n\u6700\u8fd1\u9047\u5230\u4e86\u4e00\u9053\u8be1\u5f02\u7684\u9898\uff0cstd \u7684\u65b9\u6cd5\u662f\u542f\u53d1\u5f0f\u5408\u5e76 Trie \u6811\uff0c\u4f46\u6211\u5199\u4e86\u4e2a\u66f4\u7b80\u5355\uff08\uff1f\uff09\u7684 BFS\uff0bTrie\u6811+LCA \u505a\u6cd5\u3002\n\n\u540e\u6765\u5f97\u77e5\u662f CF \u7684\u9898\uff0c\u5c31\u4e0a\u6765\u4ea4\u4e00\u6ce2\uff0c\u7ed3\u679c\u786e\u5b9e AC \u4e86\u3002\n\n\u8fd9\u505a\u6cd5\u5927\u6982\u662f\u5bf9\u7684\uff0c\u4f46\u662f\u4f3c\u4e4e\u6709\u70b9\u6162\uff08\u8fd8\u4e0d\u597d\u5199\uff09...\n\n## \u9898\u610f\n\n\u6709\u4e00\u68f5\u4ee5\u7ed3\u70b9 $1$\u200b \u4e3a\u6839\u7684\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u90fd\u6709\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u5bf9\u4e8e\u4ee5\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u4ece\u8be5\u7ed3\u70b9\u51fa\u53d1\u5411\u5176\u5b50\u6811\u4e2d\u8d70\uff0c\u8def\u4e0a\u7ecf\u8fc7\u7684\u70b9\u80fd\u5f62\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6c42\u4ee5\u6bcf\u4e2a\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u80fd\u7528\u6b64\u65b9\u6cd5\u8d70\u51fa\u7684\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u6570\u91cf\u3002\n\nCF\u4e0a\u539f\u9898\u8fd8\u6709\u4e00\u4e9b\u5947\u602a\u7684\u64cd\u4f5c\u5c31\u4e0d\u8bf4\u4e86\u3002\n\n## Solution\n\n\u663e\u7136\u8fd9\u9053\u9898\u548c Trie \u6811\u6709\u5173\u3002\n\n\u5bf9\u6bcf\u4e2a\u70b9 $i$\u200b\u200b\u200b \u8bb0\u5f55\u4e00\u4e2a $mus[i]$\u200b\u200b\uff0c\u8868\u793a\u4ee5 $i$\u200b\u200b\u200b\u200b \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u3002~~\uff08mus\u7684\u610f\u601d\u5927\u6982\u662fminus\uff0c\u5373\u201c\u51cf\u201d\uff09~~\n\n\u8003\u8651 BFS \u539f\u6811\uff0c\u5c06\u904d\u5386\u5230\u7684\u70b9\u63d2\u5165\u5230 Trie \u6811\u4e2d\uff0cBFS \u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b Trie \u6811\u4e0a\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u5728\u539f\u6811\u4e0a\u7684\u70b9\u6570\u7ec4 $trie$\uff0c\u5982\u679c\u63d2\u5165\u7684\u65f6\u5019\u53d1\u73b0\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5df2\u7ecf\u88ab\u63d2\u5165\u5230 Trie \u6811\u4e2d\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u5b57\u7b26\u4e32\uff0c\u5c06\u8fd9\u4e2a\u70b9\u548c Trie \u6811\u4e0a\u7684\u70b9\u5bf9\u5e94\u5728\u539f\u6811\u4e0a\u70b9\u7684 LCA \u7684 $mus$ \u6570\u7ec4 $+1$\u200b\u200b\u200b\uff0c\u66f4\u65b0\u4e0a\u9762\u7684 $trie$ \u6570\u7ec4\u3002\n\n\u6700\u540e\u8dd1\u4e00\u904d DFS \u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u5b57\u7b26\u4e32\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u5728\u539f\u6811\u4e0a\u6df1\u5ea6\u5fc5\u5b9a\u76f8\u540c\uff0c\u6240\u4ee5 LCA \u7684\u65f6\u5019\u4e0d\u7528\u8df3\u5230\u6df1\u5ea6\u76f8\u540c\u4e86\uff0c\u76f4\u63a5\u6c42\u5c31\u884c\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u5728 LCA \u4e0a\u6253\u6807\u8bb0\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u6253\u6807\u8bb0\u7684\u65f6\u5019\u8981\u8d70\u5230\u4e24\u4e2a\u7ed3\u70b9\u76f8\u540c\u7684\uff0c\u6700\u65e9\u51fa\u73b0\u6709\u81f3\u5c11\u4e24\u4e2a\u513f\u5b50\u7684\u5b57\u7b26\u76f8\u540c\u7684\u7ed3\u70b9\uff0c\u5728\u8fd9\u91cc\u6253\u6807\u8bb0\uff0c\u624d\u4f1a\u4e0d\u91cd\u4e0d\u6f0f\u3002\u53ef\u4ee5\u753b\u753b\u56fe\u7406\u89e3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u8db3\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n## Code\n\n\u6211\u8fd9\u4ee3\u7801\u5e38\u6570\u8d3c\u5927\uff0c\u522b\u4eba\u6700\u6162\u4e5f\u8dd1 $30s$\uff0c\u6211\u76f4\u63a5\u5e72\u5230 $50s$\u3002\n\n\u8fd8\u597d\u8fd9\u9898\u65f6\u9650\u5f00\u5f97\u4e5f\u5927\uff08\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 300010;\nint ch[maxn][28], tot = 1, trie[maxn]; // ch \u662f Trie \u6811\n// trie[i] \u4ee3\u8868\u5728 Trie \u6811\u4e0a\u7f16\u53f7\u4e3a i \u7684\u7ed3\u70b9\u5bf9\u5e94\u5728\u539f\u6811\u4e0a\u7684\u7ed3\u70b9\u7f16\u53f7\u3002\nvector<int> e[maxn];\nvoid add(int x, int y) { e[x].push_back(y), e[y].push_back(x); }\nstring s;\nint mus[maxn], siz[maxn], ans[maxn], v[maxn], a[maxn], n;\nint f[maxn][32];\nstruct node // BFS \u7528\u7ed3\u6784\u4f53\n{\n    int fa, x, tfa; // fa\uff0cx \u4ee3\u8868\u5728\u539f\u6811\u4e2d\u8be5\u7ed3\u70b9\u7236\u4eb2\u3001\u8be5\u7ed3\u70b9\u7f16\u53f7\u3002\n    // tfa \u4ee3\u8868\u5728 Trie \u6811\u4e0a\u8be5\u7ed3\u70b9\u7684\u7236\u4eb2\n};\nvoid dfs_lca(int x, int fa)\n{\n    f[x][0] = fa;\n    for (int i = 1; i <= 31; i++)\n        f[x][i] = f[f[x][i - 1]][i - 1];\n    for (int i = 0; i < e[x].size(); i++)\n        if (e[x][i] != fa)\n            dfs_lca(e[x][i], x);\n}\nint LCA(int x, int y)\n{\n    if (x == y)\n        return x;\n    for (int i = 31; i >= 0; i--)\n        if (f[x][i] != f[y][i])\n            x = f[x][i], y = f[y][i];\n    return f[x][0];\n}\n\nvoid init()\n{\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++)\n        cin >> a[i];\n    cin >> s;\n    s = \" \" + s;\n    int x, y;\n    for (int i = 0; i < n - 1; i++)\n        scanf(\"%d%d\", &x, &y), add(x, y);\n    dfs_lca(1, 0);\n}\nvoid bfs()\n{\n    queue<node> q;\n    q.push((node){0, 1, 1});\n    while (!q.empty())\n    {\n        node now = q.front();\n        q.pop();\n        //now.P();\n        if (v[now.x])\n            continue;\n        v[now.x] = 1;\n        int c = s[now.x] - 'a';\n        if (ch[now.tfa][c]) // \u5982\u679c\u5f53\u524d\u7ed3\u70b9\u5bf9\u5e94\u5b57\u7b26\u4e32\u5df2\u7ecf\u88ab\u63d2\u5165\u5230 Trie \u6811\u4e2d\n            mus[LCA(now.x, trie[ch[now.tfa][c]])]++, trie[ch[now.tfa][c]] = now.x;\n        // \u5728\u4e24\u70b9 LCA \u4e0a\u6253\u6807\u8bb0\uff0c\u5e76\u5c06 Trie \u6811\u4e0a\u8be5\u70b9\u5bf9\u5e94\u539f\u6811\u4e0a\u7ed3\u70b9\u66f4\u65b0\n        else\n            ch[now.tfa][c] = ++tot, trie[ch[now.tfa][c]] = now.x;\n        // \u6ca1\u88ab\u63d2\u5165\u5c31\u65b0\u5f00\u4e2a\u70b9\uff0c\u5e76\u66f4\u65b0 trie \u6570\u7ec4\n        for (int i = 0; i < e[now.x].size(); i++)\n            q.push((node){now.x, e[now.x][i], ch[now.tfa][c]});\n    }\n}\nvoid dfs(int x, int fa) // DFS \u7edf\u8ba1\u7b54\u6848\n{\n    siz[x] = 1;\n    for (int i = 0; i < e[x].size(); i++)\n    {\n        if (e[x][i] != fa)\n        {\n            dfs(e[x][i], x);\n            siz[x] += siz[e[x][i]];\n            mus[x] += mus[e[x][i]];\n        }\n    }\n    ans[x] = siz[x] - mus[x];\n}\nvoid out_put()\n{\n    int mx = -1, cnt = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        if (mx == ans[i] + a[i])\n            cnt++;\n        else if (ans[i] + a[i] > mx)\n            mx = ans[i] + a[i], cnt = 1;\n    }\n    cout << mx << endl\n         << cnt << endl;\n}\nvoid solve()\n{\n    bfs();\n    memset(v, 0, sizeof(v));\n    dfs(1, 0);\n}\nint main()\n{\n    init();\n    solve();\n    out_put();\n    return 0;\n}\n```",
        "postTime": 1629125672,
        "uid": 373429,
        "name": "_slb",
        "ccfLevel": 0,
        "title": "\u3010Solution\u3011 CF601D & \u6700\u8fd1\u4e00\u9053\u6a21\u62df\u8d5b\u9898\u7684\u8be1\u5f02\u89e3\u6cd5"
    },
    {
        "content": "\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u70b9\u5b83\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u6570\u4e3a\u8be5\u70b9\u6240\u6709\u513f\u5b50\u7684\u4e0d\u540c\u5b50\u4e32\u6570\u76f8\u52a0\u51cf\u53bb\u4ed6\u4eec\u7684\u516c\u5171\u90e8\u5206\u3002\n\n\u800c\u5bf9\u4e8e\u516c\u5171\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u5229\u7528trie\u5408\u5e76\u6765\u5904\u7406\u3002\n\ntrie\u5408\u5e76\u7684\u8fc7\u7a0b\u4e0e\u7ebf\u6bb5\u6811\u5408\u5e76\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u5177\u4f53\u770b\u4ee3\u7801\n\n```\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nint n;long long v[300010];\nchar s[300010];\nstruct bian\n{\n\tint from, to;\n}eg[300010 << 1];\nint front[300010], num;\nint trie[300010][30];\nlong long siz[300010], maxs, zong;\nvoid lian(int x, int y)\n{\n\teg[++ num].to = y;\n\teg[num].from = front[x];\n\tfront[x] = num;\n}\nlong long merge(int x, int y)\n{\n\tlong long maretu = 1;//\u516c\u5171\u90e8\u5206\u6570\uff08\u9ed8\u8ba4\u6709\u4e00\u4e2a\u91cd\u5408\uff09\n\tif(trie[x][s[y] - 'a'] == 0)\n\t{\n\t\ttrie[x][s[y] - 'a'] = y;//\u5982\u679c\u8be5\u8282\u70b9\u4e0d\u5b58\u5728\u5219\u5c06\u5176\u5408\u5e76\n\t\tmaretu = 0;//\u540c\u65f6\u4e5f\u4e0d\u5b58\u5728\u516c\u5171\u90e8\u5206\n\t}\n\telse\n\t{\n\t\tfor (int i = 0; i <= 25; ++ i)//\u5bf9\u4e8e\u6bcf\u4e2a\u513f\u5b50\u8fdb\u884c\u8be5\u64cd\u4f5c\n\t\t{\n\t\t\tif(trie[y][i] > 0)\n\t\t\t{\n\t\t\t\tmaretu += merge(trie[x][s[y] - 'a'], trie[y][i]);//\u516c\u5171\u90e8\u5206\u5373\u4e3a\u513f\u5b50\u7684\u516c\u5171\u90e8\u5206\u548c\n\t\t\t}\n\t\t}\n\t}\n\treturn maretu;\n}\nvoid dfs(int o, int fa)\n{\n\tfor (int i = front[o]; i; i = eg[i].from)\n\t{\n\t\tint to = eg[i].to;\n\t\tif(to == fa)continue;\n\t\tdfs(to, o);\n\t\tsiz[o] += siz[to];\n\t\tsiz[o] -= merge(o, to);\n\t}\n\tif(siz[o] + v[o] == maxs)\n\t++ zong;\n\tif(siz[o] + v[o] > maxs)\n\tmaxs = siz[o] + v[o], zong = 1;\n\t\n}\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; ++ i)\n\t{\n\t\tsiz[i] = 1;\n\t\tscanf(\"%lld\", &v[i]);\n\t}\n\tscanf(\"%s\", s + 1);\n\tfor (int i = 1; i < n; ++ i)\n\t{\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tlian(x, y);\n\t\tlian(y, x);\n\t}\n\tdfs(1, 0);\n\tprintf(\"%lld\\n%lld\", maxs, zong);\n}\n```\n",
        "postTime": 1599661020,
        "uid": 111728,
        "name": "\u5e7b\u5f71\u661f\u575a\u5f3a",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF601D \u3010Acyclic Organic Compounds\u3011"
    },
    {
        "content": "\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u663e\u7136\u4e3a\u6bcf\u4e2a\u70b9\u5230\u5176\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u6240\u751f\u6210\u7684trie\u7684\u8282\u70b9\u6570-1+\u9898\u76ee\u7ed9\u51fa\u7684weight   \n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u81ea\u5e95\u5411\u4e0a\u8fdb\u884ctrie\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002\u590d\u6742\u5ea6O(26*n)\n\nAC\u4ee3\u7801\uff1a\n```cpp\n\nusing namespace std;\nconst int N = 310010;\nstruct node\n{\n\tnode *nex[26];\n\tint size;\n\tnode()\n\t{\n\t\tsize = 1;\n\t\tmemset(nex, 0, sizeof(nex));\n\t}\n\tvoid maintain()\n\t{\n\t\tsize = 1;\n\t\tfor (int i = 0; i < 26; ++i)\n\t\t\tif (nex[i] != NULL)\n\t\t\t\tsize += nex[i]->size;\n\t}\n};\nnode *trie[N];\nint weight[N],pre1[N],W2[N];\nchar w[N];\nvector<int> edge[N];\nvoid merge(node *a, node *b)\n{\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tif (a->nex[i] && b->nex[i])\n\t\t\tmerge(a->nex[i], b->nex[i]);\n\t\telse if (!a->nex[i] && b->nex[i])\n\t\t\ta->nex[i] = b->nex[i];\n\t}\n\ta->maintain();\n}\nvoid dfs(int u,int pre)\n{\n\tqueue<int> que;\n\tfor (auto &s : edge[u])\n\t{\n\t\tif (s != pre)\n\t\t{\n\t\t\tque.push(s);\n\t\t\tdfs(s, u);\n\t\t}\n\t}\n\tif (que.empty())\n\t\treturn;\n\twhile (!que.empty())\n\t{\n\t\tint k;\n\t\tk = que.front();\n\t\tque.pop();\n\t\tif (trie[u]->nex[w[u] - 'a']->nex[w[k] - 'a'] == NULL)\n\t\t{\n\t\t\ttrie[u]->nex[w[u] - 'a']->nex[w[k] - 'a'] = trie[k]->nex[w[k] - 'a'];\n\t\t\ttrie[u]->nex[w[u] - 'a']->maintain();\n\t\t\ttrie[u]->maintain();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmerge(trie[u]->nex[w[u] - 'a'], trie[k]);\n\t\t\ttrie[u]->nex[w[u] - 'a']->maintain();\n\t\t\ttrie[u]->maintain();\n\t\t}\n\t}\n\tW2[u] = trie[u]->size-1+weight[u];\n}\n\u00a0\n\u00a0\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tcout.tie(NULL);\n\tint n,u,v;\n\tstring s;\n\tmemset(pre1, 0, sizeof(pre1));\n\tcin >> n;\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\tcin >> weight[i];\n\t\tW2[i] = 1+weight[i];\n\t}\n\tcin >> s;\n\tfor (int i = 0; i < n; ++i)\n\t\tw[i+1] = s[i];\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\ttrie[i] = new node();\n\t\ttrie[i]->nex[w[i] - 'a'] = new node();\n\t\ttrie[i]->maintain();\n\t}\n\tfor (int i = 1; i < n; ++i)\n\t{\n\t\tcin >> u >> v;\n\t\tedge[u].push_back(v);\n\t\tedge[v].push_back(u);\n\t}\n\tdfs(1, 0);\n\tlong long kkk = 0,cnt=0;\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\tif (W2[i] > kkk)\n\t\t{\n\t\t\tcnt = 1;\n\t\t\tkkk = W2[i];\n\t\t}\n\t\telse if (W2[i] == kkk)\n\t\t\tcnt++;\n\t}\n\tcout << kkk << endl << cnt << endl;;\n\treturn 0;\n}\n\n```\n",
        "postTime": 1562591676,
        "uid": 154957,
        "name": "qiyue7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF601D \u3010Acyclic Organic Compounds\u3011"
    }
]