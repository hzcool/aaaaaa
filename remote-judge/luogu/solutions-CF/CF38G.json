[
    {
        "content": "\u770b\u5230\u7edd\u5927\u90e8\u5206\u5927\u4f6c\u90fd\u5199\u7684$SPlay$ \uff0c\u4f46\u662f\u6211\u592a\u5f31\u4e86\u6839\u672c\u4e0d\u4f1a$Splay$ , \u6240\u4ee5\u53ea\u80fd\u5199\u66b4\u529b\u4e86\u3002\n\n\n\n\n\n\u9996\u5148\u628a\u6574\u4e2a\u5e8f\u5217**\u5927\u529b\u5206\u5757**\uff0c\u5bf9\u6bcf\u4e2a\u5757\u7ef4\u62a4**\u6700\u5927\u91cd\u8981\u503c**\uff0c\u7136\u540e\u6bcf\u6b21\u6709\u4eba\u6765\u6392\u961f\uff0c\u5148\u4e00\u6b65\u4e00\u6b65\u8df3\u51fa**\u5f53\u524d\u5757**\uff0c\u56e0\u4e3a\u6709\u4e86\u5757\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e00\u5927\u5757\u4e00\u5927\u5757\u8df3\uff0c\u6700\u540e\u4e0d\u80fd\u8df3\u65f6\uff0c\u518d\u4e00\u6b65\u4e00\u6b65\u8df3\uff0c\u8fd9\u6837\u5c31\u627e\u5230\u4e86\u6392\u961f\u7684\u4f4d\u7f6e\u3002\n\n\n\n\u4f46\u662f\u5f88\u660e\u663e\uff0c\u627e\u5230\u4f4d\u7f6e\u540e\u8fd8\u8981\u63d2\u5165\u65b0\u6570\u503c\uff0c\u53ef\u80fd\u4f1a\u5bf9\u540e\u9762\u7684**\u6240\u6709\u5757**\u6709\u5f71\u54cd\uff0c\u6240\u4ee5\u5c31\u4e0d\u80fd\u76f4\u63a5\u7ef4\u62a4\u6700\u5927\u503c\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u7ed9\u6bcf\u4e00\u4e2a\u5757\u4e00\u4e2a$set$\u548c$deque$\uff0c\u7528$set$\u7ef4\u62a4\u6700\u5927\u503c\uff0c$deque$\u5b58\u5757\u5185\u961f\u5217\uff0c\u6bcf\u6b21\u63d2\u5165\u4e4b\u540e\uff0c\u4e0d\u65ad\u628a\u5757\u5185**\u6700\u540e\u4e00\u4e2a\u5143\u7d20**\u5f39\u5230\u540e\u9762\u4e00\u4e2a\u5757\u7684**\u6700\u524d\u9762**\u53bb\uff0c\u540c\u65f6\u7ef4\u62a4\u6700\u5927\u503c\u3002\n\n\n\n\u67e5\u627e\u63d2\u5165\u4f4d\u7f6e\u590d\u6742\u5ea6\u4e3a$O(m\\frac{n}{block})$\uff0c\u63d2\u5165+\u8c03\u6574\u540e\u9762\u5757\u590d\u6742\u5ea6\u4e3a$O(m\\frac{n\\ log \\ block}{block})$\uff0c\u53d6$block=\\sqrt{n \\ log\\ n}$\uff0c\u5219\u603b\u590d\u6742\u5ea6\u4e3a$O(m\\ \\frac{n\\ log\\ \\sqrt{n\\ log\\ n}}{\\sqrt{n\\ log\\ n}})$\uff0c\u518d\u52a0\u4e0a$O2$\u4f18\u5316\u548c\u6253\u6d88\u540c\u6b65\uff0c\u8fd9\u9898\u5c31A\u4e86\u3002\n\n\n\n\u4ee3\u7801:\n\n```cpp\n#pragma GCC optimize(3)\n#include <bits/stdc++.h>\nusing namespace std;\ndeque<int> a[10000];\nset<int> s[10000];\nint ipt[1000000], c[1000000];\nint lb[1000000], rb[1000000];\nint block;\nint lnk[1000000];\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        // cin >> ipt[i] >> c[i];\n        ipt[i] = c[i] = i;\n    }\n    block = sqrt(n * log2(n));\n    for (int i = 0; i < n; i++)\n    {\n        if (i % block == 0)\n            lb[i / block] = i;\n        rb[i / block] = i;\n        lnk[i] = i / block;\n    }\n    for (int i = 0; i < n; i++)\n    {\n        int pos = i;\n        if (i)\n        {\n            if (i == 19)\n            {\n                i = 19;\n            }\n            // jump to the front of present block\n            while (pos != lb[lnk[pos]] && ipt[i] > ipt[a[lnk[i]][pos - lb[lnk[i]] - 1]] && c[i]-- > 0)\n                pos--;\n            // jump above blocks\n            while (pos == lb[lnk[pos]] && lnk[pos] && (c[i] >= block && (*s[lnk[pos] - 1].rbegin()) < ipt[i]))\n            {\n                pos = lb[lnk[pos] - 1];\n                c[i] -= block;\n            }\n            // jump in the last block\n            if (pos == lb[lnk[pos]] && c[i]-- > 0 && lnk[pos] && ipt[a[lnk[pos] - 1].back()] < ipt[i])\n            {\n                pos--;\n                while (c[i]-- > 0 && pos != lb[lnk[pos]] && ipt[i] > ipt[a[lnk[pos]][pos - lb[lnk[pos]] - 1]])\n                    pos--;\n            }\n        }\n        a[lnk[pos]].insert(a[lnk[pos]].begin() + pos - lb[lnk[pos]], i);\n        s[lnk[pos]].insert(ipt[i]);\n        int now = lnk[pos];\n        while (a[now].size() > block)\n        {\n            a[now + 1].push_front(a[now].back());\n            s[now + 1].insert(ipt[a[now].back()]);\n            s[now].erase(ipt[a[now].back()]);\n            a[now].pop_back();\n            now++;\n        }\n        /*\n        for(int i = 0; i < ceil((double)n / (double)block); i++)\n            for(auto x : a[i])\n                cout << x + 1 << ' ';\n            cout << endl;\n        */\n    }\n    int t = ceil((double)n / (double)block);\n    for (int i = 0; i < t; i++)\n        for (auto x : a[i])\n            cout << x + 1 << ' ';\n}\n\n```\n\n\n\n",
        "postTime": 1582870085,
        "uid": 84832,
        "name": "MaxDYF",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF38G \u3010Queue\u3011"
    },
    {
        "content": "### \u7b80\u8981\u9898\u610f\n\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u6570 $a_i$ \u8981\u4ea4\u6362\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e $a_i$ \u7684\u6570\u540e\u9762\uff0c\u4e14\u81f3\u591a\u4ea4\u6362 $c_i$ \u6b21\u3002\u6700\u540e\u8f93\u51fa\u8fd9\u4e2a\u5e8f\u5217\u3002\n\n### \u5206\u6790\n\u56e0\u4e3a\u8981\u5c06 $a_i$ \u4ea4\u6362\u5230\u4ea4\u6362\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e $a_i$ \u7684\u6570\u540e\u9762\uff0c\u6240\u4ee5\u6211\u4eec\u80af\u5b9a\u81f3\u5c11\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\uff0c\u8003\u8651\u5230\u8fd8\u4f1a\u4fee\u6539\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u7528\u5e73\u8861\u6811\u7ef4\u62a4\uff0c\u8fd9\u91cc\u6211\u662f\u7528 fhq treap \u7ef4\u62a4\u7684\u3002\n\n\u7531\u4e8e\u6700\u591a\u53ea\u80fd\u4ea4\u6362 $c_i$ \u6b21\uff0c\u6240\u4ee5\u4e0d\u59a8\u76f4\u63a5\u628a $i - c$ \u5230 $i - 1$ \u5206\u88c2\u51fa\u6765\uff0c\u8fd9\u6837\u5206\u88c2\u540e\u4ea4\u6362\u540e\u7684 $a_i$ \u5c31\u53ea\u53ef\u80fd\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\u9762\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\u9762\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e $a_i$ \u7684\u6570\u3002\n\n\u63a5\u4e0b\u6765\u6839\u636e\u5e73\u8861\u6811\u7684\u6027\u8d28\u627e\u533a\u95f4\u91cc\u7684\u7b2c\u4e00\u4e2a\u5927\u4e8e $a_i$ \u7684\u6570\uff0c\u5982\u679c\u53f3\u513f\u5b50\u7684\u6700\u5927\u503c\u6ee1\u8db3\u5c31\u9012\u5f52\u53f3\u513f\u5b50\uff0c\u5982\u679c\u6839\u6ee1\u8db3\u5c31\u76f4\u63a5\u8fd4\u56de\uff0c\u5982\u679c\u5de6\u513f\u5b50\u6ee1\u8db3\u5c31\u9012\u5f52\u5de6\u513f\u5b50\u3002\u7531\u4e8e\u662f\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e $a_i$ \u7684\u6570\uff0c\u6240\u4ee5\u5fc5\u987b\u6309\u7167\u5148\u627e\u53f3\u513f\u5b50\u518d\u627e\u6839\u6700\u540e\u518d\u627e\u5de6\u513f\u5b50\u7684\u987a\u5e8f\u3002\n\n\u7136\u540e\u628a $a_i$ \u52a0\u5165\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e $a_i$ \u7684\u6570\u7684\u540e\u9762\uff0c\u6700\u540e\u4e2d\u5e8f\u904d\u5386\u8f93\u51fa\u5373\u53ef\u3002\n\n### \u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<random>\n#define ls(x) treap[x].lson\n#define rs(x) treap[x].rson\nusing namespace std;\nnamespace AKIOI{\n    const int N = 1e5, inf = 2e9;\n    struct node{\n        int val, id, max, size, pri, lson, rson;\n    } treap[N + 10];\n    int n;\n    int Root, cnt;\n    random_device R;\n    mt19937 G(R());\n    int rd(int l, int r){\n        return uniform_int_distribution<int>(l, r)(G);\n    }\n    void newnode(int &u, int val, int id){\n        u = ++cnt;\n        treap[u].pri = rd(1, inf);\n        treap[u].size = 1;\n        treap[u].val = treap[u].max = val;\n        treap[u].id = id;\n        ls(u) = rs(u) = 0;\n    }\n    void push_up(int u){\n        treap[u].size = treap[ls(u)].size + treap[rs(u)].size + 1;\n        treap[u].max = max(max(treap[ls(u)].max, treap[rs(u)].max), treap[u].val);\n    }\n    void merge(int &u, int root_l, int root_r){\n        if(!root_l || !root_r)\n            return void(u = root_l | root_r);\n        if(treap[root_l].pri >= treap[root_r].pri){\n            u = root_l;\n            merge(rs(root_l), rs(root_l), root_r);\n        }\n        else{\n            u = root_r;\n            merge(ls(root_r), root_l, ls(root_r));\n        }\n        push_up(u);\n    }\n    void split_size(int u, int &root_l, int &root_r, int cri){\n        if(!u)\n            return void(root_l = root_r = 0);\n        if(treap[ls(u)].size + 1 <= cri){\n            root_l = u;\n            split_size(rs(root_l), rs(root_l), root_r, cri - treap[ls(u)].size - 1);\n        }\n        else{\n            root_r = u;\n            split_size(ls(root_r), root_l, ls(root_r), cri);\n        }\n        push_up(u);\n    }\n    int find(int u, int a){//\u8fd4\u56de\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u91cc\u7b2c\u4e00\u4e2a\u5927\u4e8ea\u7684\u6570\u7684\u4e0b\u6807\n        if(treap[rs(u)].max > a)\n            return find(rs(u), a) + treap[ls(u)].size + 1;\n        else if(treap[u].val > a)\n            return treap[ls(u)].size + 1;\n        else if(treap[ls(u)].max > a)\n            return find(ls(u), a);\n        else\n            return 0;\n    }\n    void dfs(int u){\n        if(!u)\n            return;\n        dfs(ls(u));\n        printf(\"%d \", treap[u].id);\n        dfs(rs(u));\n    }\n    int main(){\n        scanf(\"%d\", &n);\n        for(int i = 1; i <= n; i++){\n            int a, c;\n            scanf(\"%d%d\", &a, &c);\n            int root_l, root_r, root_r_l, root_r_r, son;\n            split_size(Root, root_l, root_r, i - c - 1);//\u5206\u88c2\u51fa\u4e0b\u6807\u5927\u4e8ei-c-1\u7684\u6570\uff0c\u5373\u5927\u4e8e\u7b49\u4e8ei-c\u7684\u6570\n            split_size(root_r, root_r_l, root_r_r, find(root_r, a));//\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8ea\u7684\u6570\n            newnode(son, a, i);//\u63d2\u5165\n            merge(root_r_r, son, root_r_r);\n            merge(root_r, root_r_l, root_r_r);\n            merge(Root, root_l, root_r);\n        }\n        dfs(Root);\n        return 0;\n    }\n}\nint main(){\n    return AKIOI::main();\n}\n```\n",
        "postTime": 1681310668,
        "uid": 654992,
        "name": "tangyigeng",
        "ccfLevel": 0,
        "title": "CF38G Queue \u9898\u89e3"
    },
    {
        "content": "$\\text{AVL Tree}$\n\n\u8fd9\u662f\u6700\u65e9\u88ab\u53d1\u660e\u7684\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\u3002\n\n\u770b\u5230\u8fd9\u9898\u4e0d\u9700\u8981\u7ffb\u8f6c\uff0c\u81ea\u7136\u4f7f\u7528\u5b83\u4f1a\u66f4\u5feb\u66f4\u597d\u5199\u3002\n\n\u7ef4\u62a4\u4e00\u4e2a $a$ \u6570\u7ec4\u7684\u6700\u5927\u503c\uff0c\u5728\u6811\u4e2d\u67e5\u8be2\u9760\u53f3\u8fde\u7eed\u5c0f\u4e8e\u7684\u6570\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u5728\u5e73\u8861\u6811\u4e0a\u526a\u679d\u53ef\u4ee5\u505a\u5230 $O(\\log_2n)$\u3002\n\n\u6700\u540e\u4ee3\u7801\u52a0 `fread` \u90fd\u6bd4\u80fd\u627e\u5230\u7684\u4f38\u5c55\u6811\u77ed\uff0c\u5e76\u6210\u4e3a\u4e86\u6700\u4f18\u89e3\u3002\n\n1.61KB\uff0c1.24s \u7684 AC \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\nconst int N=2e5+5;\nnamespace fast_io{\n    char buf[N+5],*p1,*p2;\n    int ot,t,c;\n    #define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,N,stdin),p1==p2)?EOF:*p1++)\n    inline int read(){\n        int an=0,f=1;while(!isdigit(c=gc))if(c=='-')f=-f;\n        do an=an*10+(48^c);while(isdigit(c=gc));return an*f;\n    }\n    char ob[N+20],stk[20];\n    inline void fls(){\n        fwrite(ob,1,ot,stdout),ot=0;\n    }\n    inline void write(ll x,char c=' '){\n        if(x<0)ob[ot++]='-',x=-x;\n        while(x>9)stk[++t]=48^(x%10),x/=10;\n        for(ob[ot++]=48^x;t;ob[ot++]=stk[t--]);\n        ob[ot++]=c;if(ot>N)fls();\n    }\n}\nusing fast_io::read;\nusing fast_io::write;\nint n,a[N],mx[N],sz[N],d[N];\nint t[N][2],tp,nw,rt;\n#define ls t[x][0]\n#define rs t[x][1]\ninline void pp(int x){\n    sz[x]=sz[ls]+sz[rs]+1;\n    d[x]=max(d[ls],d[rs])+1;\n    mx[x]=max({mx[ls],mx[rs],a[x]});\n}\ninline void rot(int &x,int k){\n    int y=t[x][k];t[x][k]=t[y][!k];\n    pp(t[y][!k]=x),pp(x=y);\n}\nint qry(int x=rt){\n    if(!x)return 0;\n    if(a[tp]<=a[x])return qry(rs);\n    if(a[tp]>mx[rs])return sz[rs]+1+qry(ls);\n    else return qry(rs);\n}\nvoid Ins(int &x=rt){\n    if(!x){pp(x=tp);return;};\n    int k;\n    if(nw>sz[rs])nw-=sz[rs]+1,k=0;\n    else k=1;\n    int &y=t[x][k];\n    Ins(y);\n    if(d[y]>d[t[x][!k]]+1){\n        if(d[t[y][!k]]>d[t[y][k]])rot(y,!k);rot(x,k);\n    }else pp(x);\n}\nvoid putans(int x=rt){\n    if(x)putans(ls),write(x),putans(rs);\n}\nint main(){\n    n=read();\n    for(tp=1;tp<=n;++tp){\n        a[tp]=read();\n        nw=min(read(),qry());\n        Ins(rt);\n    }putans();\n    fast_io::fls();\n    return 0;\n}\n```",
        "postTime": 1662447451,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u6bd4\u4f38\u5c55\u6811\u53c8\u5feb\u53c8\u597d\u5199\u7684 AVL"
    },
    {
        "content": "\u4e4d\u4e00\u770b\u8fd9\u9898\u6709\u70b9\u96be\uff0c\u5b9e\u9645\u4e0a\u662f\u5f88\u7b80\u5355\u7684\n\n\u9898\u76ee\u7ffb\u8bd1\u6709\u70b9\u95ee\u9898\uff1a\n\n\u8f93\u51fa\u7684\u5e94\u8be5\u662f\u6392\u597d\u961f\u540e**\u6bcf\u4e2a\u4eba\u7684\u7f16\u53f7**\uff0c\u7ffb\u8bd1\u4e2d\u6ca1\u6709\u8bb2\u6e05\u695a\uff08\u5bfc\u81f4\u6211\u9519\u4e864\u904d...\uff09\n\n\u9996\u5148\uff0c\u5047\u8bbe\u6ca1\u6709$c_i$\u7684\u9650\u5236\uff0c\u8fd9\u9898\u5c31\u6210\u4e86\u4e00\u9053\u7b80\u5355\u7684\u6392\u5e8f\u9898\uff0c\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u3001\u8df3\u8868$\\cdots$\u6765\u89e3\u51b3\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528Splay\u3002\n\n\u6709\u4e86$c_i$\u7684\u9650\u5236\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u7b2ci\u4e2a\u4eba\u7684\u4f4d\u7f6e\u53ea\u80fd\u5728$i-c_i,i-c_i+1, \\cdots i$\u8fd9\u4e9b\u4f4d\u7f6e\u3002\u5982\u679c$i>c_i+1$\u7684\u8bdd\uff0c$1,2\\cdots i-c_i-1$\u8fd9\u4e9b\u4f4d\u7f6e\u662f\u4e0d\u80fd\u901a\u8fc7\u4ea4\u6362\u5230\u8fbe\u7684\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u68f5**\u533a\u95f4splay**\uff0c\u8282\u70b9\u95f4\u7684\u5173\u7cfb\u4e0d\u662f\u4f9d\u9760\u503c\u800c\u662f\u4f9d\u9760\u4f4d\u7f6e\uff0c\u5373\u6bcf\u4e2a\u8282\u70b9\u6784\u6210\u7684\u5b50\u6811\u4ee3\u8868\u4e86\u8fd9\u4e9b\u4eba\u6784\u6210\u7684\u4e00\u6bb5\u533a\u95f4\u3002\u540c\u65f6\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u8bb0\u5f55\u533a\u95f4\u5927\u5c0f\u548c\u533a\u95f4\u6700\u5927\u503c\uff0c\u65b9\u4fbf\u6211\u4eec\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u3002\n\n\u6bcf\u6b21\u64cd\u4f5c\u65f6\uff0c\u82e5$i>c_i+1$\uff0c\u628a\u524d$i-c_i-2$\u4e2a\u6570\u62c9\u5230\u6839\u7684\u5de6\u5b50\u6811\u91cc\uff0c\u7b2c$i-c_i-1$\u4e2a\u6570\u4f5c\u4e3a\u6839\uff0c\u5728\u6839\u7684\u53f3\u5b50\u6811\u91cc\u63d2\u5165\u7b2c$i$\u4e2a\u4eba\u3002\u63d2\u5165\u65f6\uff0c\u5224\u65ad\u5f53\u524d\u8fd9\u4e2a\u4eba\u7684$a_i$\u662f\u5426\u5927\u4e8e**\u53f3\u5b50\u6811**\u7684\u6700\u5927\u503c\u4ee5\u53ca\u5f53\u524d\u9012\u5f52\u5230\u7684\u8282\u70b9\uff0c\u5982\u679c\u662f\u5c31\u5f80**\u5de6\u5b50\u6811**\u9012\u5f52\uff08\u8bf4\u660e\u8fd9\u4e2a\u4eba\u53ef\u4ee5\u548c\u53f3\u5b50\u6811**\u5bf9\u5e94\u533a\u95f4**\u7684\u4eba\u5168\u90e8\u4ea4\u6362\u800c\u5230\u8fbe\u5de6\u5b50\u6811\uff09\uff0c\u5426\u5219\u5c31\u5f80**\u53f3\u5b50\u6811**\u9012\u5f52\u3002\n\n\u5982\u679c$i<c_i+1$\uff0c\u5219\u8868\u660e\u5f53\u524d\u8fd9\u4e2a\u4eba\u53ef\u4ee5\u4e0eSplay\u5185\u4efb\u4f55\u4e00\u4e2a\u4eba\u4ea4\u6362\uff0c\u76f4\u63a5\u4ece**\u6839**\u5f00\u59cb\u9012\u5f52\u3002\n\n\u8bb0\u5f97\u6bcf\u6b21\u64cd\u4f5c\u5b8c\u4e4b\u540e\u5c06\u65b0\u63d2\u5165\u7684\u8282\u70b9$splay$\u5230\u6839\uff0c\u4fdd\u8bc1Splay\u7684\u590d\u6742\u5ea6\u3002\u6700\u540e\u8f93\u51fa\u7684\u65f6\u5019\u7528**\u4e2d\u5e8f\u904d\u5386**\uff0c\u4f60\u61c2\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\Theta(N\\log_2 N)$\n\n## $code$:\n```cpp\n#include<algorithm>\n#include<cstdio>\n#define N 100010\nusing namespace std;\nint a[N],c[N],n;\nint val[N],siz[N],maxn[N],fa[N],ch[N][2],len,root;\nint read()\n{\n\tstatic int res;static char op;\n\tdo op=getchar();while(op>'9'||op<'0');\n\tfor(res=0;op>='0'&&op<='9';op=getchar())res=res*10+(op^48);\n\treturn res;\n}\nbool relation(int x){return ch[fa[x]][1]==x;}\nvoid update(int x)\n{\n\tsiz[x]=siz[ch[x][0]]+siz[ch[x][1]]+1;\n\tint p=a[val[x]],ch1=a[maxn[ch[x][0]]],ch2=a[maxn[ch[x][1]]];\n\tif(p>ch1&&p>ch2)maxn[x]=val[x];\n\telse if(ch1>ch2)maxn[x]=maxn[ch[x][0]];\n\telse maxn[x]=maxn[ch[x][1]];\n}\nvoid rotate(int x)\n{\n\tint f=fa[x],ff=fa[f],k=relation(x),y=ch[x][!k];\n\tfa[f]=x;fa[x]=ff;fa[y]=f;\n\tch[x][!k]=f;ch[f][k]=y;ch[ff][ch[ff][1]==f]=x;\n\tupdate(f);update(x);\n}\nvoid _splay(int x,int p)\n{\n\tfor(int f;fa[x]!=p;rotate(x))\n\t\tif(fa[f=fa[x]]!=p)\n\t\t\trotate(relation(x)^relation(f)?x:f);\n\tif(!p)root=x;\n}\nint _find(int rank)\n{\n\tint now=root;\n\twhile(siz[ch[now][0]]+1!=rank)\n\t{\n\t\tif(siz[ch[now][0]]>=rank)\n\t\t\tnow=ch[now][0];\n\t\telse rank-=siz[ch[now][0]]+1,now=ch[now][1];\n\t}\n\treturn now;\n}\nvoid ins(int&x,int f,int v)\n{\n\tif(!x)\n\t{\n\t\tx=++len;\n\t\tfa[x]=f;maxn[x]=val[x]=v;siz[x]=1;\n\t\treturn;\n\t}\n\tif(a[v]>a[maxn[ch[x][1]]]&&a[v]>a[val[x]])\n\t\tins(ch[x][0],x,v);\n\telse ins(ch[x][1],x,v);\n\tupdate(x);\n}\nvoid print(int x)\n{\n\tif(ch[x][0])print(ch[x][0]);\n\tprintf(\"%d \",val[x]);\n\tif(ch[x][1])print(ch[x][1]);\n}\nsigned main(int argc,char **argv)\n{\n\tn=read();\n\tfor(int i=1;i<=n;++i)\n\t\ta[i]=read(),c[i]=read();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(i-c[i]>1)\n\t\t{\n\t\t\t_splay(_find(i-c[i]-1),0);\n\t\t\tins(ch[root][1],root,i);\n\t\t}\n\t\telse ins(root,0,i);\n\t\t_splay(len,0);\n\t}\n\tprint(root);\n\treturn 0;\n}\n```",
        "postTime": 1583046937,
        "uid": 84836,
        "name": "a999999",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF38G\u3010Queue\u3011"
    },
    {
        "content": "\u53d1\u73b0\u5927\u591a\u90fd\u662f Splay \u7684\uff0c\u6765\u6c34\u4e00\u4e2a FHQ \u7684\u3002\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://fat-old-eight.github.io/%E9%A2%98%E8%A7%A3/2023/03/10/solution-cf38g.html)\n\n### \u505a\u6cd5\n\u9996\u5148\u4e3a\u4e86\u65b9\u4fbf\u5b9e\u73b0\uff0c\u6211\u4eec\u5148\u5c06\u6574\u4e2a\u961f\u5217\u53cd\u8f6c\u4e00\u4e0b\uff0c\u539f\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5728\u961f\u5217\u524d $c_i$ \u4e2a\u6570\u4e2d\u63d2\u5165\u4e00\u4e2a\u6570\uff08\u4f4d\u7f6e\u4e3a $k$\uff09\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u7684 $1\\leq j < k \\leq c_i+1$ \u90fd\u6709 $a_j < a_k$\u3002\uff08\u5f88\u597d\u7406\u89e3\u5427\u3002\uff09\n\n\u597d\u4e86\u73b0\u5728\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff0c\u5148\u5efa\u4e00\u4e2a\u4ee5\u4e0b\u6807\u4e3a\u6743\u503c\u7684 $\\text{FHQ}$ \u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u63d2\u5165\uff0c\u5148\u4ee5\u5927\u5c0f\u5206\u88c2\u51fa $x$ \u548c $z$ \u4e24\u68f5\u6811\uff0c\u7136\u540e\u518d\u5728 $x$ \u4e2d\u6839\u636e\u524d\u7f00\u6700\u5927\u503c\u5206\u88c2\u51fa $x$ \u548c $y$ \u4e24\u68f5\u6811\uff0c\u5c06\u65b0\u8282\u70b9\u63d2\u5165 $x$ \u4e0e $y$ \u4e4b\u95f4\u5373\u53ef\u3002\n\n\u8f93\u51fa\u7c7b\u4f3c\u4e2d\u5e8f\u904d\u5386\uff0c\u4f46\u662f\u8981\u5148\u8bbf\u95ee\u53f3\u513f\u5b50\u3002\n\n### \u4ee3\u7801\n\n~~~ cpp\n#include<algorithm>\n#include<iostream>\nusing namespace std;\nstruct FHQ\n{\n    int root,cnt;\n    struct sss\n    {\n        int l,r,s,v,w,mx,id,rmx;\n        #define l(x) tree[x].l\n        #define r(x) tree[x].r\n        #define s(x) tree[x].s\n        #define v(x) tree[x].v\n        #define w(x) tree[x].w\n        #define mx(x) tree[x].mx\n        #define id(x) tree[x].id\n        #define rmx(x) tree[x].rmx\n    }tree[1000005];\n    int New(int x,int id)\n    {\n        w(++cnt)=rand();\n        s(cnt)=1;\n        rmx(cnt)=v(cnt)=mx(cnt)=x;\n        id(cnt)=id;\n        return cnt;\n    }\n    void pushup(int x)\n    {\n        s(x)=s(l(x))+s(r(x))+1;\n        mx(x)=max({mx(l(x)),mx(r(x)),v(x)});\n        rmx(x)=max(mx(l(x)),v(x));\n    }//\u7ef4\u62a4\u524d\u7f00\u6700\u5927\u503c\n    void splits(int root,int s,int &x,int &y)\n    {\n        if(!root)x=y=0;\n        else if(s(l(root))<s)\n        {\n            x=root;\n            splits(r(root),s-s(l(root))-1,r(x),y);\n            pushup(root);\n        }\n        else\n        {\n            y=root;\n            splits(l(root),s,x,l(y));\n            pushup(root);\n        }\n    }\n    void splitv(int root,int key,int &x,int &y)\n    {\n        if(!root)x=y=0;\n        else if(rmx(root)<=key)\n        {\n            x=root;\n            splitv(r(root),key,r(x),y);\n            pushup(root);\n        }\n        else\n        {\n            y=root;\n            splitv(l(root),key,x,l(y));\n            pushup(root);\n        }\n    }\n    int merge(int x,int y)\n    {\n        if(!x||!y)return x^y;\n        else if(w(x)>w(y))\n        {\n            r(x)=merge(r(x),y);\n            pushup(x);\n            return x;\n        }\n        else\n        {\n            l(y)=merge(x,l(y));\n            pushup(y);\n            return y;\n        } \n    }\n    void insert(int key,int c,int id)//\u63d2\u5165\n    {\n        int x,y,z;\n        splits(root,c,x,z);\n        splitv(x,key-1,x,y);\n        root=merge(merge(merge(x,New(key,id)),y),z);\n    }\n    void print(int x)//\u8f93\u51fa\n    {\n        if(r(x))print(r(x));\n        printf(\"%d \",id(x));\n        if(l(x))print(l(x));\n    }\n}T1;\nint T;\nint main()\n{\n    scanf(\"%d\",&T);\n    for(int i=1;i<=T;i++)\n    {\n        int key,c;\n        scanf(\"%d%d\",&key,&c);\n        T1.insert(key,c,i);\n    }\n    T1.print(T1.root);\n}\n~~~",
        "postTime": 1678437820,
        "uid": 329177,
        "name": "FatOldEight",
        "ccfLevel": 0,
        "title": "Queue \u9898\u89e3"
    },
    {
        "content": "# CF38G Queue \u9898\u89e3\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF38G)\n\n\u9898\u89e3\u4e2d\u603b\u5171\u5c31\u4e00\u7bc7\u662f\u8bb2\u89e3\u5173\u4e8e\u5206\u5757\u7684\uff0c\u4f46\u662f\u90a3\u4e00\u7bc7\u5e76\u6ca1\u6709\u8fbe\u5230\u5206\u5757\u53ef\u4ee5\u8fbe\u5230 $O(\\sqrt n)$ \u7684\u8f83\u5feb\u901f\u5ea6\u3002\n\n\u6211\u4eec\u8003\u8651\u628a\u4e00\u4e2a\u5e8f\u5217\u5206\u6210 $O(\\sqrt n)$ \u5757\uff0c\u6bcf\u5757\u6709 $O(\\sqrt n)$ \u4e2a\u6570\u3002\u7136\u540e\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5757\u4e2d\u7684\u6700\u5927\u91cd\u8981\u503c\u3002\n\n\u6211\u4eec\u7684\u4e00\u4e2a\u64cd\u4f5c\u5206\u4e3a $2$ \u90e8\u5206\uff0c\u67e5\u8be2\u4f4d\u7f6e\uff0c\u7136\u540e\u63d2\u5165\u3002\u67e5\u8be2\u4f4d\u7f6e\u53ef\u4ee5\u66b4\u529b\u626b\u5230\u7b2c\u4e00\u4e2a\u826f\u5fc3\u4e0d\u591f\u7528\u6216\u6709\u6700\u5927\u91cd\u8981\u503c\u6bd4\u8981\u63d2\u5165\u7684\u91cd\u8981\u503c\u66f4\u5927\u7684\u5757\uff0c\u7136\u540e\u66b4\u529b\u626b\u8fd9\u4e2a\u5757\u3002\u63d2\u5165\u64cd\u4f5c\u5c31\u662f\u6839\u636e\u67e5\u8be2\u4fe1\u606f $O(\\sqrt n)$ \u66b4\u529b\u63d2\u5165\uff0c\u7136\u540e\u5f53\u67d0\u4e2a\u5757\u5927\u5c0f\u8d85\u8fc7\u4e00\u4e2a\u9608\u503c\u65f6\u66b4\u529b\u91cd\u6784\u5c31\u884c\u4e86\u3002\n\n$\\text{Code:}$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 10, M = 1000;\nint len[M], lzy[M], maxa[N], tot;\nstruct Point {\n    int a, c, id;\n    inline void read() { scanf(\"%d %d\", &a, &c); }\n} a[M][M];\nstruct Node {\n    int col, pos;\n};\nvoid rebuild() {\n    int cur = 0;\n    for (int i = 1; i <= tot; i++) pushdown(i), maxa[i] = 0;\n    for (int i = 1; i <= tot; i++)\n        for (int j = 1; j <= len[i]; j++) vals[++cur] = a[i][j];\n    for (int i = 1; i <= tot; i++) len[i] = 0;\n    int s = sqrt(cur), pos;\n    for (int i = 1; i <= cur; i++) {\n        pos = (i - 1) / s + 1;\n        a[pos][++len[pos]] = vals[i];\n        maxa[pos] = max(maxa[pos], vals[i].a);\n    }\n    tot = (cur - 1) / s + 1;\n}\nvoid insert(Node x, Point v) {\n    ++len[x.col];\n    for (int i = len[x.col]; i > x.pos; i--) a[x.col][i] = a[x.col][i - 1];\n    a[x.col][x.pos] = v, maxa[x.col] = max(maxa[x.col], v.a);\n    if (len[x.col] >= 1000) rebuild();\n}\ninline void pushdown(int x) {\n    if (!lzy[x]) return;\n    for (int i = 1; i <= len[x]; i++) a[x][i].c -= lzy[x];\n    lzy[x] = 0;\n}\nPoint vals[N];\nNode find(Point &v) {\n    for (int i = tot; i; i--) {\n        if (maxa[i] > v.a || len[i] >= v.c)\n            for (int j = len[i]; ~j; j--) {\n                if (!v.c || a[i][j].a > v.a) return {i, j + 1};\n                --v.c;\n            }\n        v.c -= len[i];\n    }\n    return {1, 1};\n}\nint main() {\n    memset(maxa, 0, sizeof(maxa));\n    int n;\n    cin >> n;\n    Point r;\n    for (int i = 1; i <= n; i++) {\n        r.read(), r.id = i;\n        if (!tot)\n            ++tot, a[1][len[1] = 1] = r, rebuild();\n        else\n            insert(find(r), r);\n    }\n    int cur = 0;\n    for (int i = 1; i <= tot; i++) pushdown(i), maxa[i] = 0;\n    for (int i = 1; i <= tot; i++)\n        for (int j = 1; j <= len[i]; j++) vals[++cur] = a[i][j];\n    for (int i = 1; i <= cur; i++) printf(\"%d \", vals[i].id);\n    return 0;\n}\n```",
        "postTime": 1665550139,
        "uid": 615348,
        "name": "zhouershan",
        "ccfLevel": 7,
        "title": "CF38G Queue \u9898\u89e3"
    },
    {
        "content": "\n## \u9898\u610f\n\n\u7ed9\u5b9a $n$ \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u6709\u4e00\u4e2a\u6743\u503c $a$ \u4e0e\u4e00\u4e2a\u7ea6\u675f\u503c  $c$\uff0c\u6211\u4eec\u9700\u8981\u6309\u987a\u5e8f\u63d2\u5165\u8fd9  $n$ \u4e2a\u4eba\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u4eba\u540e\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u6bd4\u4e0a\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u5927\uff0c\u5219\u9700\u8981\u4e0e\u4e0a\u4e00\u4e2a\u70b9\u4ea4\u6362\u4f4d\u7f6e\uff0c\u4e00\u4e2a\u70b9\u6700\u591a\u80fd\u4e0e  $c$ \u4e2a \u70b9\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6c42\u6700\u540e\u7684\u5e8f\u5217\u3002\n\n## \u601d\u8def\n\n\u9996\u5148\u4e0d\u96be\u60f3\u5230\u4f7f\u7528\u6587\u827a\u5e73\u8861\u6811\u7ef4\u62a4\u8fd9\u4e2a\u95ee\u9898\uff0c\u6bcf\u6b21\u65b0\u6765\u4e00\u4e2a\u4eba\uff0c\u4e0d\u65ad\u5f80\u524d\u4ea4\u6362\u5176\u5b9e\u5c31\u662f\u63d2\u5165\u67d0\u4e2a\u4f4d\u7f6e\u7684\u8fc7\u7a0b\uff0c\u8fd9\u65f6\u5019\u5c31\u662f\u6587\u827a\u5e73\u8861\u6811\u7684\u57fa\u7840\u64cd\u4f5c\u4e86\u3002\u7136\u540e\u95ee\u9898\u5c31\u662f\u5982\u4f55\u627e\u51fa\u8fd9\u4e2a\u63d2\u5165\u4f4d\u7f6e\u3002\n\u9996\u5148 $c$ \u9650\u5236\u4e86\u80fd\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u662f $[i-1-c,i-1]$ \u6211\u4eec\u5148\u7528 split \u64cd\u4f5c\u5c06\u8fd9\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u5b50\u6811\u63d0\u53d6\u51fa\u6765\uff0c\u7136\u540e\u5728\u8fd9\u68f5\u6811\u4e0a\u8fdb\u884c\u4e8c\u5206\u3002\u4e8c\u5206\u51fa\u6700\u9760\u53f3\u7684\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d $a $ \u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u4e86\uff0c\u6bcf\u5230\u4e00\u4e2a\u8282\u70b9\u5c31\u770b\u770b\u53f3\u5b50\u6811\u7684\u533a\u95f4\u6700\u5927\u503c\uff0c\u5982\u679c\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u7684 $a$ \u90a3\u5c31\u8bf4\u660e\u53f3\u5b50\u6811\u4e2d\u53ef\u4ee5\u627e\u5230\u67d0\u4e2a\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6\uff0c\u76f4\u63a5\u9012\u5f52\u5373\u53ef\uff0c\u5982\u679c\u6b63\u597d\u662f\u5f53\u524d\u5b50\u6811\u6ee1\u8db3\u8981\u6c42\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u5c31\u9012\u5f52\u5904\u7406\u5de6\u5b50\u6811\u3002\n\n\u627e\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u540e\u5c31\u5bf9\u5e94\u7528 split \u64cd\u4f5c\u88c2\u5f00\u8fd9\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u6309\u987a\u5e8f\u5408\u5e76\u56de\u53bb\u5c31\u884c\u4e86\u3002\n\n\u7136\u540e\u4e2d\u5e8f\u904d\u5386\u8f93\u51fa\u8fd9\u4e2a\u5e8f\u5217\u5c31\u884c\u4e86\u3002\n## \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#include<set>\n#include<map>\n#include<queue>\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate<typename T>\ninline void cmax(T& a,const T& b){a<b?a=b:0;}\ntemplate<typename T>\ninline void cmin(T& a,const T& b){b<a?a=b:0;}\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef unsigned long long ull;\ntypedef unsigned int ui;\ntypedef vector<int> vi;\ntypedef vector<vector<int> > vii;\n#define X first\n#define Y second\nconst int mod=998244353;\nconst int MAXN=2e5+10;\nstruct node\n{\n\tint l,r,pr;\n\tint siz;\n\tint mmax,w,id;\t\n}t[MAXN];\nint tt;\ninline int add(int val,int id)\n{\n\tint x=++tt;\n\tt[x].pr=rand();\n\tt[x].siz=1;\n\tt[x].mmax=t[x].w=val;\n\tt[x].id=id;\n\treturn x;\n}\n#define ls t[u].l\n#define rs t[u].r\ninline void push_up(int u)\n{\n\tt[u].siz=t[ls].siz+t[rs].siz+1;\n\tt[u].mmax=max({t[u].w,t[ls].mmax,t[rs].mmax});\n}\nvoid split(int u,int siz,int &x,int &y)\n{\n\tif(!u)return x=y=0,void();\n\tif(t[t[u].l].siz+1<=siz)\n\t{\n\t\tx=u;split(t[x].r,siz-(t[t[u].l].siz+1),t[x].r,y);\n\t}\n \telse y=u,split(t[y].l,siz,x,t[y].l);\n\tpush_up(u);\n}\nint merge(int x,int y)\n{\n\tif(!x||!y)return x+y;\n\tif(t[x].pr>t[y].pr)\n\t{\n\t\tt[x].r=merge(t[x].r,y);\n\t\tpush_up(x);\n\t\treturn x;\n\t}\n\telse \n\t{\n\t\tt[y].l=merge(x,t[y].l);\n\t\tpush_up(y);\n\t\treturn y;\n\t}\n}\nint ask(int u,int k)\n{\n\tif(!u)return 0;\n\tif(t[rs].mmax>=k)return ask(rs,k)+1+t[ls].siz;\n\telse if(t[u].w>=k)return ask(rs,k)+1+t[ls].siz;\n\telse return ask(ls,k);\n}\nvoid dfs(int u)\n{\n\tif(!u)return;\n\tdfs(ls),cout<<t[u].id<<' ',dfs(rs);\n}\nint main()\n{\n\tios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);\n\tint T;cin>>T;\n\tint rt=0;\n\tfor(int i=1;i<=T;i++)\n\t{\n\t\tint a,c;cin>>a>>c;\n\t\tint x=0,y=0,z=0;\n\t\tsplit(rt,max(0,t[rt].siz-c),x,y);\n\t\tsplit(y,ask(y,a),y,z);\n\t\trt=merge(mergea(x,y),merge(add(a,i),z));\n\t}\n\tdfs(rt);\n\n}\n```\n",
        "postTime": 1661514137,
        "uid": 571229,
        "name": "__stick",
        "ccfLevel": 7,
        "title": "CF38G"
    },
    {
        "content": "\u770b\u5230\u5355\u70b9\u63d2\u5165\uff0c\u679c\u65ad\u9009\u62e9 $\\text{FHQ Treap}$ \u3002\n\n\u4ee5\u4f4d\u7f6e\u4f5c\u4e3a\u6743\u503c\u5efa $\\text{FHQ Treap}$ \uff0c\u8fd9\u6837\u5355\u70b9\u63d2\u5165\u7684\u65f6\u5019\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7 $\\text{split}$ \u64cd\u4f5c\u628a\u90a3\u4e2a\u4f4d\u7f6e\u627e\u51fa\u6765\u4e4b\u540e\u7533\u8bf7\u65b0\u8282\u70b9 $\\text{merge}$ \u5373\u53ef\u3002\n\n\u9996\u5148\u8ba8\u8bba\u4e00\u4e0b\u8fd9\u4e2a $c_i$ \u7684\u9650\u5236\u662f\u5426\u6709\u610f\u4e49\uff0c\u5982\u679c\u65e0\u610f\u4e49\u7684\u8bdd\u76f4\u63a5\u67e5\u8be2\u63d2\u5165\u5230\u7684\u4f4d\u7f6e\uff0c\u6709\u610f\u4e49\u7684\u8bdd\u5c31\u5148\u628a\u90a3\u4e9b\u53ef\u80fd\u88ab\u7b2c $i$ \u4e2a\u4eba\u8d85\u8fc7\u7684\u90a3\u4e9b\u4eba $\\text{split}$ \u51fa\u6765\u540e\u518d\u67e5\u8be2\u3002\n\n\u67e5\u8be2\u7684\u8bdd\u5c31\u662f\u7ef4\u62a4\u4e00\u4e0b\u5b50\u6811\u6700\u5927\u503c\uff0c\u627e\u5230\u4e00\u4e2a\u5c3d\u91cf\u5de6\u7684\u4f4d\u7f6e\u63d2\u5165\u5373\u53ef\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define N 200005\nusing namespace std;\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint n,a[N],c[N];\nstruct FHQTreap\n{\n\tint siz[N],val[N],Mx[N],rnd[N],cnt,ch[N][2],ID[N],rt;\n\tint Get(int x)\n\t{\n\t\tsiz[++cnt]=1;val[cnt]=a[x];Mx[cnt]=a[x];ID[cnt]=x;\n\t\trnd[cnt]=rand();return cnt;\n\t}\n\tvoid pushup(int x)\n\t{\n\t\tsiz[x]=1+siz[ch[x][0]]+siz[ch[x][1]];\n\t\tMx[x]=max(max(Mx[ch[x][0]],Mx[ch[x][1]]),val[x]);\n\t}\n\tint merge(int x,int y)\n\t{\n\t\tif(!x||!y)return x+y;\n\t\tif(rnd[x]<rnd[y]){ch[x][1]=merge(ch[x][1],y);pushup(x);return x;}\n\t\telse{ch[y][0]=merge(x,ch[y][0]);pushup(y);return y;}\n\t}\n\tvoid split(int now,int k,int &x,int &y)\n\t{\n\t\tif(!now){x=y=0;return;}\n\t\tif(siz[ch[now][0]]+1<=k)x=now,split(ch[now][1],k-siz[ch[now][0]]-1,ch[x][1],y);\n\t\telse y=now,split(ch[now][0],k,x,ch[y][0]);\n\t\tpushup(now);\n\t}\n\tint query(int now,int p)\n\t{\n\t\tif(!now)return 0;\n\t\tif((!ch[now][0])&&(!ch[now][1]))return val[now]<a[p];\n\t\tif(Mx[ch[now][1]]>=a[p])return query(ch[now][1],p);\n\t\tif(val[now]>=a[p])return query(ch[now][1],p);\n\t\treturn query(ch[now][0],p)+1+siz[ch[now][1]];\n\t}\n\tvoid insert(int p)\n\t{\n\t\tif(p-c[p]<=1)//the hole treap\n\t\t{\n\t\t\tint pos=query(rt,p);\n\t\t\tint A,B,C,D;\n\t\t\tsplit(rt,p-1-pos,A,B);\n\t\t\trt=merge(merge(A,Get(p)),B);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint A,B,C,D;\n\t\t\tsplit(rt,p-c[p]-1,A,B);\n\t\t\tint pos=c[p]-query(B,p);\n\t\t\tsplit(B,pos,C,D);\n\t\t\trt=merge(merge(merge(A,C),Get(p)),D);\n\t\t}\n\t}\n\tvoid print(int x)\n\t{\n\t\tif(!x)return;\n\t\tprint(ch[x][0]);\n\t\tprintf(\"%d \",x);\n\t\tprint(ch[x][1]);\n\t}\n}T;\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ta[i]=read();c[i]=read();\n\t\tT.insert(i);\n\t}\n\tT.print(T.rt);puts(\"\");\n}\n\n```\n\n",
        "postTime": 1625573785,
        "uid": 179600,
        "name": "shao0320",
        "ccfLevel": 8,
        "title": "CF38G Queue"
    },
    {
        "content": "[CF38G Queue](https://www.luogu.com.cn/problem/CF38G)\u89e3\u9898\u62a5\u544a\uff1a\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://zybuluo.com/xiaoziyao/note/1706260)\n\n\u9898\u610f\uff1a\u7ed9\u5b9a$n$\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c$a_i$\u4e0e\u4e00\u4e2a\u7ea6\u675f\u503c$c_i$\uff0c\u6211\u4eec\u9700\u8981\u6309\u987a\u5e8f\u63d2\u5165\u8fd9$n$\u4e2a\u6570\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u70b9\u540e\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u6bd4\u4e0a\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u5927\uff0c\u5219\u9700\u8981\u4e0e\u4e0a\u4e00\u4e2a\u70b9\u4ea4\u6362\u4f4d\u7f6e\uff0c\u4e00\u4e2a\u70b9\u6700\u591a\u80fd\u4e0e$c_i$\u4e2a\u70b9\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6c42\u6700\u540e\u7684\u5e8f\u5217\u3002\n\n\u521a\u770b\u5230\u8fd9\u9053\u9898\uff0c\u60f3\u7ef4\u62a4\u5c0f\u4e8e\u4e00\u4e2a\u503c\u7684\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f46\u662f\u6ca1\u641e\u51fa\u6765\uff0c\u4e8e\u662f\u5199\u4e86\u4e2aSplay\u3002\n\n\u8fd9\u9053\u9898\u6240\u4f7f\u7528\u7684Splay\u662f\u7c7b\u4f3c[\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3391)\u7684Splay\uff0c\u53eb\u505a\u533a\u95f4Splay\uff0c\u5b83\u5c31\u662f\u4ee5\u4e00\u4e2a\u70b9\u7684\u4f4d\u7f6e\u4e3a\u6743\u503c\u6765\u7ef4\u62a4Splay\u7684\u65b9\u6cd5\u3002\n\n\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4$maxx_i$\uff0c\u4ee3\u8868\u4ee5$i$\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6700\u5927\u503c\u5b58\u5728\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5199\u51fa\u5b83\u7684$pushup$\u65b9\u5f0f\uff1a\n```\nmaxx[now]=val[now];\nif(a[maxx[chd[now][0]]]>a[maxx[now]])\n\tmaxx[now]=maxx[chd[now][0]];\nif(a[maxx[chd[now][1]]]>a[maxx[now]])\n\tmaxx[now]=maxx[chd[now][1]];\n```\n\n\u7136\u540e\u6211\u4eec\u518d\u8003\u8651\u4e00\u4e2a\u70b9\u7684\u63d2\u5165\uff0c\u5f53\u4f4d\u7f6e\u4e3a$v$\uff0c\u6743\u503c\u4e3a$a_v$\u7684\u7ed3\u70b9\u63d2\u5165\u5230$x$\u4f4d\u7f6e\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u679c$a_v$\u5927\u4e8e$x$\u4f4d\u7f6e\u7684\u6743\u503c\u548c$x$\u7684\u53f3\u5b50\u6811\u7684$maxx$\u7684\u6743\u503c\u7684\u8bdd\uff0c\u8fd9\u4e2a\u7ed3\u70b9\u5c31\u53ef\u4ee5\u63d2\u5165\u5230$x$\u7684\u5de6\u5b50\u6811\uff0c\u5426\u5219\u5c31\u53ef\u4ee5\u63d2\u5165\u5230\u53f3\u5b50\u6811\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5f00\u59cb\u5b9e\u73b0\u89e3\u51b3\u95ee\u9898\u7684\u6838\u5fc3\u64cd\u4f5c$work$\u51fd\u6570\uff08$p$\u4ee3\u8868\u4f4d\u7f6e\uff0c$c$\u4ee3\u8868\u7ea6\u675f\u503c\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u4e00\u4e0b\uff1a\n1. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u53ef\u4ee5\u548c\u524d\u9762\u7684\u4efb\u610f\u591a\u4e2a\u8282\u70b9\u6362\uff08\u53ea\u8981\u6ee1\u8db3\u6761\u4ef6\uff09\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u6839\u63d2\u5165\u8fd9\u4e2a\u8282\u70b9\u3002\n2. \u5426\u5219\uff0c\u4f60\u9700\u8981\u7528\u5faa\u73af\uff08\u6216\u9012\u5f52\uff09\u627e\u51fa\u7f16\u53f7$p-c-1$\u7684\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u8bbe\u4e3a\u6839\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u9897\u533a\u95f4Splay\uff0c\u6240\u4ee5\u5f53\u524d\u8282\u70b9\u53ef\u4ee5\u548c\u8fd9\u4e2a$p-c-1$\u7684\u53f3\u5b50\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u4ea4\u6362\uff08\u53ea\u8981\u6ee1\u8db3\u6761\u4ef6\uff09\uff0c\u5c31\u53ef\u4ee5\u4ece\u6839\u7684\u53f3\u513f\u5b50\u8282\u70b9\u63d2\u5165\u3002\n```\nvoid work(int p,int c){\n\tif(p-c>1){\n\t\tsplay(getnum(p-c-1),0);\n\t\tinsert(chd[root][1],root,p);\n\t}\n\telse insert(root,0,p);\n\tsplay(cnt,0);\n}\n```\n\n\u6700\u540e\u8f93\u51fa\u7528\u4e2d\u5e8f\u904d\u5386\uff0c\u5e94\u8be5\u5927\u5bb6\u90fd\u4f1a\u5427\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\log n)$\uff08$n$\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7528\u533a\u95f4Splay\u53ef\u4ee5\u8fbe\u5230$\\log n$\u7684\u590d\u6742\u5ea6\uff08\u53ef\u4ee5\u7528\u52bf\u80fd\u5206\u6790\uff09\uff09\n\n\u4ee3\u7801\uff1a\n```\n#include<stdio.h>\n#define inf 1000000000\nconst int maxn=100005;\nint i,j,k,m,n;\nint a[maxn];\ninline int max(int a,int b){\n\treturn a>b? a:b;\n}\nstruct SPLAY{\n\tint cnt,root;\n\tint val[maxn],chd[maxn][2],f[maxn],size[maxn],maxx[maxn];\n\tinline void init(){\n\t\tcnt=root=0;\n\t}\n\tinline int newnode(int x,int fth){\n\t\tsize[++cnt]=1,chd[cnt][0]=0,chd[cnt][1]=0,val[cnt]=x,f[cnt]=fth;\n\t\treturn cnt;\n\t}\n\tinline void pushup(int now){\n\t\tsize[now]=size[chd[now][0]]+size[chd[now][1]]+1;\n\t\tmaxx[now]=val[now];\n\t\tif(a[maxx[chd[now][0]]]>a[maxx[now]])\n\t\t\tmaxx[now]=maxx[chd[now][0]];\n\t\tif(a[maxx[chd[now][1]]]>a[maxx[now]])\n\t\t\tmaxx[now]=maxx[chd[now][1]];\n\t}\n\tinline int check(int now){\n\t\treturn chd[f[now]][0]==now? 0:1;\n\t}\n\tinline void connect(int now,int son,int dir){\n\t\tf[son]=now,chd[now][dir]=son;\n\t}\n\tinline void rotate(int now){\n\t\tint fth=f[now],gfth=f[fth],frlt=check(now),grlt=check(fth);\n\t\tconnect(gfth,now,grlt),connect(fth,chd[now][frlt^1],frlt),connect(now,fth,frlt^1);\n\t\tpushup(fth),pushup(now);\n\t}\n\tvoid splay(int now,int aim){\n\t\twhile(f[now]!=aim){\n\t\t\tint fth=f[now],gfth=f[fth],frlt=check(now),grlt=check(fth);\n\t\t\tif(gfth!=aim)\n\t\t\t\trotate(frlt^grlt? now:fth);\n\t\t\trotate(now);\n\t\t}\n\t\tif(aim==0)\t\n\t\t\troot=now;\n\t}\n\tint getnum(int x){\n\t\tint now=root;\n\t\twhile(now){\n\t\t\tif(x==size[chd[now][0]]+1)\n\t\t\t\treturn now;\n\t\t\tif(x<=size[chd[now][0]])\n\t\t\t\tnow=chd[now][0];\n\t\t\telse x-=size[chd[now][0]]+1,now=chd[now][1];\n\t\t}\n\t\treturn now;\n\t}\n\tvoid insert(int &x,int lst,int v){\n\t\tif(x==0){\n\t\t\tx=newnode(v,lst);\n\t\t\treturn ;\n\t\t}\n\t\tif(a[v]>a[val[x]]&&a[v]>a[maxx[chd[x][1]]])\n\t\t\tinsert(chd[x][0],x,v);\n\t\telse insert(chd[x][1],x,v);\n\t\tpushup(x);\n\t}\n\tvoid work(int p,int c){\n\t\tif(p-c>1){\n\t\t\tsplay(getnum(p-c-1),0);\n\t\t\tinsert(chd[root][1],root,p);\n\t\t}\n\t\telse insert(root,0,p);\n\t\tsplay(cnt,0);\n\t}\n\tvoid out(int x){\n\t\tif(chd[x][0])\n\t\t\tout(chd[x][0]);\n\t\tprintf(\"%d \",val[x]);\n\t\tif(chd[x][1])\n\t\t\tout(chd[x][1]);\n\t}\n\tvoid write(){\n\t\tout(root);\n\t}\n}Splay;\nint main(){\n\tscanf(\"%d\",&n);\n\tSplay.init();\n\tfor(i=1;i<=n;i++){\n\t\tint c;\n\t\tscanf(\"%d%d\",&a[i],&c);\n\t\tSplay.work(i,c);\n\t}\n\tSplay.write();\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1589901271,
        "uid": 35754,
        "name": "Verdandi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF38G \u3010Queue\u3011"
    }
]