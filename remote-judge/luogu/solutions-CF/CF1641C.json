[
    {
        "content": "## \u9898\u89e3 CF1641C (1642E)\n\n----\n\n### \u7b97\u6cd5\n\n\u300c1\u300d\u578b\u533a\u95f4\u4e3a\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u75c5\u4eba\u7684\u533a\u95f4\uff0c\u300c0\u300d\u578b\u533a\u95f4\u4e3a\u4e0d\u5305\u542b\u75c5\u4eba\u7684\u533a\u95f4\u3002\n\n- \u56de\u7b54 `NO`\uff1a$x$ \u53f7\u75c5\u4eba\u5305\u542b\u5728\u4efb\u610f\u4e00\u4e2a\u300c0\u300d\u533a\u95f4\u4e2d\u3002\n- \u56de\u7b54 `YES`\uff1a$x$ \u53f7\u75c5\u4eba\u5305\u542b\u4e14\u4ec5\u5305\u542b\u5728\u300c1\u300d\u533a\u95f4\u4e2d\uff0c\u4e14**\u5b58\u5728\u4e00\u4e2a\u5305\u542b\u5b83\u7684\u300c1\u300d\u533a\u95f4\uff0c\u4f7f\u5f97\u9664\u4e86\u5b83\u4ee5\u5916\u7684\u6240\u6709\u75c5\u4eba\u90fd\u5728\u300c0\u300d\u533a\u95f4**\u3002\n- \u56de\u7b54 `N/A`\uff1a\u4e0d\u5c5e\u4e8e\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u7528 C \u8868\u793a\u786e\u5b9a\u4e0d\u662f\u75c5\u4eba\uff0cU \u8868\u793a\u4e0d\u786e\u5b9a\u662f\u5426\u662f\u75c5\u4eba\u7684\u4eba\u3002\n\n\u4e00\u5f00\u59cb\u7684\u6570\u5217\u4e00\u5b9a\u662f `UUUU...UUU`\u3002\u5f53\u62a5\u544a\u4e00\u4e2a\u533a\u95f4\u5185\u6ca1\u6709\u75c5\u4eba\u65f6\uff0c\u6570\u5217\u4f1a\u53d8\u6210\u7c7b\u4f3c\u8fd9\u6837\uff1a`UUCC...CCUUUU`\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651 `YES` \u60c5\u51b5\u7684\u7ef4\u62a4\u3002\u901a\u4fd7\u4e00\u70b9\u6765\u8bb2\uff0c\u663e\u7136\u5f53\u4e00\u4e2a U \u5468\u56f4\u4e5f\u662f U \u7684\u65f6\u5019\uff0c\u5c31\u5f88\u96be\u786e\u5b9a\u5b83\uff1b\u5f53\u4e00\u4e2a U \u5de6\u53f3\u90fd\u662f C \u65f6\uff0c\u786e\u5b9a\u5b83\u662f\u5426\u662f\u75c5\u4eba\u5c31\u66f4\u5bb9\u6613\u4e00\u4e9b\u3002\u8fdb\u4e00\u6b65\u601d\u8003\uff0c\u53ef\u4ee5\u53d1\u73b0\uff1a\n\n```\n...UUUCCCCCCUCCCCCUUU....\n      o     ^    o\n```\n\n\u5047\u8bbe\u88ab `^` \u6807\u8bb0\u7684 U \u662f\u6211\u4eec\u7684\u7814\u7a76\u5bf9\u8c61\u3002\u5f53\u4e14\u4ec5\u5f53\u5728**\u5b83\u4ee5\u53ca\u5b83\u5de6\u53f3 C \u7684\u8fde\u7eed\u6bb5\uff08\u4e24\u4e2a `o` \u6807\u8bb0\u4e2d\u95f4\uff09\u4e2d**\uff0c\u5b58\u5728\u4e00\u4e2a\u5305\u542b\u8fd9\u4e2a U \u7684\u300c1\u300d\u533a\u95f4\uff0cU \u624d\u53ef\u4ee5\u88ab\u786e\u5b9a\u4e3a\u75c5\u4eba\u3002\n\n\u5982\u679c\u5c06\u6240\u6709\u7684 U \u7528 `std::set` \u7ef4\u62a4\uff0c\u90a3\u4e48\u8fd9\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u5c31\u627e\u4e2d\u95f4\u90a3\u4e2a U\uff08\u8bbe\u5176\u4e0b\u6807\u4e3a $x$\uff09\u7684\u524d\u9a71\u540e\u7ee7\uff08\u8bbe\u5b83\u4eec\u7684\u4e0b\u6807\u4e3a $l,r$\uff09\u5373\u53ef\u3002\u63a5\u4e0b\u6765\uff0c\u9700\u8981\u5224\u5b9a\u4e0a\u8ff0\u7684\u533a\u95f4\u662f\u5426\u5b58\u5728\u3002\u53ef\u4ee5\u53d1\u73b0\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u4e00\u5b9a\u662f\u5728 U \u5de6\u8fb9\u90a3\u4e2a C \u7684\u8fde\u7eed\u6bb5\uff0c\u56e0\u6b64**\u53ea\u8981\u5b58\u5728\u4e00\u4e2a\u4ee5 $(l,x]$ \u4e3a\u8d77\u70b9\u7684\u300c1\u300d\u533a\u95f4\uff0c\u5176\u53f3\u7aef\u70b9\u5728 $[x, r)$\uff0c\u90a3\u4e48 $x$ \u5c31\u786e\u5b9a\u662f\u75c5\u4eba**\u3002\n\n\u8fd9\u90e8\u5206\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\u6700\u5c0f\u503c\u7684\u7ebf\u6bb5\u6811 $t$ \u6765\u7ef4\u62a4\u3002\u5f53\u8f93\u5165\u4e00\u4e2a\u300c1\u300d\u533a\u95f4\u65f6\uff0c\u5c06 $t_l$ \u5355\u70b9\u8d4b\u503c\u4e3a $\\min\\{t_l, r\\}$ \u5373\u53ef\u3002\u67e5\u8be2\u65f6\u5224\u65ad $\\operatorname{query}(l+1,x)$ \u4e0e $r$ \u7684\u5927\u5c0f\u5173\u7cfb\u5c31\u884c\u4e86\u3002\n\n### \u5b9e\u73b0\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <set>\n\n#define lt(x) ((x) << 1)\n#define rt(x) (lt(x) + 1)\n\nint n, m;\n\nint read() {\n    int ans = 0, neg = 1; char ch = getchar();\n    while (ch < '0' || ch > '9') { if (ch == '-') neg = -1; ch = getchar(); }\n    while (ch >= '0' && ch <= '9') { ans *= 10; ans += (ch - '0'); ch = getchar(); }\n    return ans * neg;\n}\n\nnamespace SegTree {\n    int t[1000001];\n\n    void build(int x = 1, int l = 1, int r = n) {\n        t[x] = n + 1;\n        if (l == r)\n            return;\n        const int mid = (l + r) >> 1;\n        build(lt(x), l, mid);\n        build(rt(x), mid + 1, r);\n    }\n\n    void modify(int p, int a, int x = 1, int _l = 1, int _r = n) {\n        if (_l == _r) {\n            t[x] = std::min(t[x], a);\n            return;\n        }\n        const int mid = (_l + _r) >> 1;\n        if (p <= mid)\n            modify(p, a, lt(x), _l, mid);\n        else\n            modify(p, a, rt(x), mid + 1, _r);\n        t[x] = std::min(t[lt(x)], t[rt(x)]);\n    }\n\n    int query(int l, int r, int x = 1, int _l = 1, int _r = n) {\n        if (l <= _l && _r <= r)\n            return t[x];\n        const int mid = (_l + _r) >> 1;\n        int ans = n + 1;\n        if (l <= mid)\n            ans = std::min(ans, query(l, r, lt(x), _l, mid));\n        if (r > mid)\n            ans = std::min(ans, query(l, r, rt(x), mid + 1, _r));\n        return ans;\n    }\n};\n\nstd::set<int> s;\n\nint main() {\n    n = read(), m = read();\n    SegTree::build();\n    for (int i = 0; i <= n + 1; ++i)\n        s.insert(i);\n    while (m--) {\n        int t = read();\n        if (!t) {\n            int l = read(), r = read(), op = read();\n            if (!op) {\n                while (!s.empty()) {\n                    int pos = *s.lower_bound(l);\n                    if (pos <= r)\n                        s.erase(pos);\n                    else\n                        break;\n                }\n            } else {\n                SegTree::modify(l, r);\n            }\n        } else {\n            int x = read();\n            if (!s.count(x))\n                puts(\"NO\");\n            else {\n                auto i = s.lower_bound(x), j = s.upper_bound(x);\n                --i;\n                if (SegTree::query((*i) + 1, x) < *j)\n                    puts(\"YES\");\n                else\n                    puts(\"N/A\");\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1646326385,
        "uid": 357545,
        "name": "CGDGAD",
        "ccfLevel": 6,
        "title": "CF1641C / 1642E"
    },
    {
        "content": "### \u9898\u610f\n\u6709 $n$ \u4e2a\u4eba\u3002\u73b0\u5728\u4f9d\u6b21\u5904\u7406\u4ee5\u4e0b $q$ \u4e2a\u5185\u5bb9\uff1a\n1. \u5f97\u77e5\u7b2c $l$ \u4e2a\u5230\u7b2c $r$ \u4e2a\u4eba\u90fd\u6ca1\u6709\u60a3\u75c5\u6216\u5176\u4e2d\u6709\u60a3\u75c5\u8005\u3002\n2. \u8be2\u95ee\u7b2c $i$ \u4e2a\u4eba\u662f\u5426\u660e\u786e\u60a3\u75c5/\u4e0d\u60a3\u75c5\u3002\u82e5\u660e\u786e\uff0c\u5219\u5176\u662f\u5426\u60a3\u75c5\u3002\n\n$n,q\\le 2\\cdot 10^5$\u3002\n\n### \u89e3\u6cd5\n\u5982\u679c\u4e00\u4e2a\u4eba\u786e\u8ba4\u662f\u60a3\u75c5\uff0c\u5219\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u5305\u542b\u5b83\u7684\u6709\u60a3\u75c5\u8005\u7684\u533a\u95f4\uff0c\u540c\u65f6\u5176\u4e2d\u9664\u4e86\u4ed6\u4e4b\u5916\u7684\u4eba\u5fc5\u5b9a\u786e\u5b9a\u4e3a\u4e0d\u60a3\u75c5\u3002\u5f88\u591a\u601d\u8def\u5c31\u662f\u8fd9\u4e48\u6765\u7684\u3002\n\n\u8003\u8651\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4fdd\u8bc1\u4e3a\u65e0\u75c5\u7684\u533a\u95f4 $[l,r]$\uff0c\u53ef\u4ee5\u5728\u5e76\u67e5\u96c6\u4e2d\u628a $[l,r+1]$ \u5408\u5e76\uff0c\u540c\u65f6\u5c06 $r+1$ \u4f5c\u96c6\u5408\u4ee3\u8868\u5143\u7d20\uff0c\u628a\u7f16\u53f7\u5c0f\u8005\u5408\u5e76\u5230\u7f16\u53f7\u5927\u8005\u96c6\u5408\u5185\uff1b\u540c\u65f6\u7ef4\u62a4 $\\forall i\\in[l,r+1]$\uff0c\u82e5 $i$ \u4e3a\u4e00\u4e2a\u6709\u75c5\u8005\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u5219\u53f3\u7aef\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u6b64\u503c\u5728\u8fde\u901a\u5757\u6700\u53f3\u7aef\uff08\u96c6\u5408\u4ee3\u8868\u5143\u7d20\uff09\u5904\u66f4\u65b0\u3002\n\n\u7136\u540e\u5bf9 $i$ \u662f\u5426\u6709\u75c5\u8fdb\u884c\u5224\u65ad\uff1a\u82e5\u65e0\u75c5\uff0c\u5219\u5176\u4e00\u5b9a\u975e\u96c6\u5408\u4ee3\u8868\u5143\u7d20\uff1b\u82e5\u6709\u75c5\uff0c\u5219\u5176\u4e00\u5b9a\u662f\u96c6\u5408\u4ee3\u8868\u5143\u7d20\uff0c\u4e14\u5305\u62ec\u4e0e\u5176\u540c\u4e00\u96c6\u5408\u7684\u5143\u7d20\u53f3\u7aef\u70b9\u6700\u5c0f\u503c\u4e00\u5b9a\u5c0f\u4e8e\u5176\u53f3\u8fb9\u8fde\u901a\u5757\u4ee3\u8868\u5143\u7d20\uff08\u4e5f\u5c31\u662f\u6709\u5305\u62ec\u4ed6\u7684\u6709\u75c5\u8005\u6240\u5728\u7684\u533a\u95f4\uff0c\u4e14\u533a\u95f4\u5185\u6b64\u4eba\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u4eba\u5168\u90e8\u6ca1\u6709\u75c5\uff09\u3002\uff08\u82e5\u4e0d\u5c0f\u4e8e\uff0c\u5219\u8bc1\u660e\u6ca1\u6709\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\u7684\u533a\u95f4\uff0c\u6b64\u4eba\u4e0d\u80fd\u660e\u786e\u662f\u5426\u60a3\u75c5\u3002\uff09\n\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\u3002\n\np.s. \u6b64\u601d\u8def\u4e3a [CWOI MJC](https://www.luogu.com.cn/user/177533) \u539f\u521b\uff0c\u611f\u8c22\u5927\u4f6c\u7684\u601d\u8def\uff01 \n\n### \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=200010;\nint n,q,o,l,r,a,b,i;\nint rt[maxn],lt[maxn];\nint Find(const int p){\n\tif(p==rt[p]) return p;\n\treturn rt[p]=Find(rt[p]);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&q);++n;\n\tfor(i=1;i<=n;++i){\n\t\trt[i]=i;\n\t\tlt[i]=1145141919;\n\t}\n\twhile(q--){\n\t\tscanf(\"%d%d\",&o,&l);\n\t\tif(o){\n\t\t\tif(Find(l)!=l) printf(\"NO\\n\");\n\t\t\telse{\n\t\t\t\tif(lt[l]<Find(l+1)) printf(\"YES\\n\");\n\t\t\t\telse printf(\"N/A\\n\");\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d%d\",&r,&o);\n\t\t\tif(o){\n\t\t\t\ta=Find(l);\n\t\t\t\tlt[a]=min(lt[a],r);\n\t\t\t}\n\t\t\telse{\n\t\t\t\twhile(l<=r){\n\t\t\t\t\ta=Find(l);b=Find(l+1);rt[a]=b;\n\t\t\t\t\tlt[b]=min(lt[a],lt[b]);l=b;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1652882819,
        "uid": 546086,
        "name": "Francais_Drake",
        "ccfLevel": 7,
        "title": "CF1641C \u9898\u89e3"
    },
    {
        "content": "\u4e0b\u9762\u7528 $0$ \u533a\u95f4\u548c $1$ \u533a\u95f4\u5206\u522b\u8868\u793a\u9898\u8ff0\u7684\u65e0\u75c5\u4eba\u3001\u6709\u75c5\u4eba\u7684\u533a\u95f4\u3002\u53ef\u4ee5\u77e5\u9053\uff0c\u6211\u4eec\u80fd\u5224\u65ad\u4e00\u4e2a\u4eba\u662f\u5426\u662f\u75c5\u4eba\u7684\u65b9\u6cd5\u4ec5\u9650\u4e8e\uff1a\n\n- \u5982\u679c\u67d0\u4e2a\u4eba\u88ab\u5305\u542b\u5728\u67d0\u4e2a $0$ \u533a\u95f4\u91cc\u90a3\u4e48\u4ed6\u4e00\u5b9a\u4e0d\u662f\u75c5\u4eba\u3002\n- \u5982\u679c\u67d0\u4e2a\u4eba\u88ab\u5305\u542b\u5728\u67d0\u4e2a $1$ \u533a\u95f4\u91cc\u4e14\u8fd9\u4e2a\u533a\u95f4\u91cc\u5176\u4ed6\u4eba\u90fd\u7531\u4e0a\u4e00\u6761\u786e\u5b9a\u4e0d\u662f\u75c5\u4eba\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u75c5\u4eba\u3002\n\n\u8003\u8651\u5c06\u6574\u4e2a\u8f93\u5165\u5e8f\u5217\u79bb\u7ebf\u3002\u6211\u4eec\u53ef\u4ee5\u5148\u4e00\u6b21\u6027\u8ba1\u7b97\u51fa\u5728\u7ed9\u51fa\u6240\u6709\u533a\u95f4\u540e\uff0c\u6bcf\u4e2a\u4eba\u7684\u72b6\u6001\uff08\u6709\u75c5/\u65e0\u75c5/\u672a\u77e5\uff09\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ea\u8981\u5bf9\u6bcf\u4e2a\u6709\u75c5/\u65e0\u75c5\u7684\u4eba\uff0c\u8ba1\u7b97\u51fa\u6700\u65e9\u5728\u4ec0\u4e48\u65f6\u5019\u80fd\u786e\u5b9a\u8fd9\u6761\u4fe1\u606f\u5373\u53ef\u3002\n\n\u65e0\u75c5\u4eba\u7684\u65f6\u95f4\u8ba1\u7b97\u8f83\u4e3a\u7b80\u5355\uff0c\u53d6\u6240\u6709\u8986\u76d6\u5176\u7684 $0$ \u533a\u95f4\u7684\u51fa\u73b0\u65f6\u95f4\u6700\u5c0f\u503c\u5373\u53ef\uff0c\u53ef\u4ee5\u5229\u7528\u6570\u636e\u7ed3\u6784\uff08\u7ebf\u6bb5\u6811/\u5e76\u67e5\u96c6\uff09\u9ad8\u6548\u89e3\u51b3\u3002\u6709\u75c5\u4eba\u7684\u65f6\u95f4\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u8986\u76d6\u5176\u7684 $1$ \u533a\u95f4\u5206\u522b\u8003\u8651\uff0c\u7531\u4e8e\u6bcf\u4e2a\u6709\u6548\u7684 $1$ \u533a\u95f4\u6700\u591a\u8986\u76d6 $1$ \u4e2a\u6709\u75c5\u7684\u4eba\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6709\u4fdd\u8bc1\u7684\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$ \u6216 $O(n\\alpha(n))$\u3002",
        "postTime": 1645703753,
        "uid": 112794,
        "name": "\u5468\u5b50\u8861",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1641C\u3010Anonymity Is Important\u3011"
    },
    {
        "content": "### \u9898\u610f\u7b80\u8ff0\uff1a\n- \u6709\u4e00\u4e2a\u957f $n$ \u7684 $01$ \u6570\u5217\n- \u64cd\u4f5c : \u544a\u8bc9\u4f60\u4e00\u4e2a\u533a\u95f4\u7684 or \u503c  \n- \u8be2\u95ee : \u67e5\u8be2\u4e00\u4e2a\u4f4d\u7f6e\u5fc5\u5b9a\u4e3a $0$ \u3001$1$ \u8fd8\u662f\u65e0\u6cd5\u786e\u5b9a\n\n### \u601d\u8def\uff1a  \n\u5982\u679c\u67e5\u8be2\u4f4d\u7f6e\u672a\u88ab\u4efb\u4f55\u64cd\u4f5c\u533a\u95f4\u5305\u542b\uff0c\u5219\u65e0\u6cd5\u786e\u5b9a\u3002  \n\u5982\u679c\u88ab\u6216\u503c\u4e3a $0$ \u7684\u533a\u95f4\u5305\u542b\uff0c\u5219\u53ea\u80fd\u4e3a $0$\u3002  \n\u56e0\u4e3a\u53ea\u8981\u6216\u503c\u4e3a $1$ \u7684\u533a\u95f4\u4e2d\u6709\u4efb\u4f55\u4e00\u4e2a $1$ \u5269\u4e0b\u7684\u5c31\u65e0\u9700\u786e\u5b9a\u4e86\u3002\u6240\u4ee5\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u533a\u95f4\u53ea\u6709\u4e00\u4e2a\u672a\u786e\u5b9a\u4e3a $0$ \u7684\u4f4d\u7f6e\u65f6\uff0c\u8be5\u4f4d\u7f6e\u786e\u5b9a\u4e3a $1$\u3002  \n\u5373\u5bf9\u4e8e\u4f4d\u7f6e $x$\uff0c\u8bbe\u4e0e\u5176\u76f8\u8fde\u6700\u9760\u5de6\u7684 $0$ \u7684\u4f4d\u7f6e\u4e3a $l_x$\uff0c\u6700\u9760\u53f3\u7684 $0$ \u7684\u4f4d\u7f6e\u4e3a $r_x$\uff0c\u5f53 $[l,r]$ \u5305\u542b\u533a\u95f4 or \u503c\u4e3a $1$ \u65f6\u8be5\u4f4d\u7f6e\u786e\u5b9a\u4e3a $1$\u3002  \n\u53ef\u7528 set\u3001\u5e76\u67e5\u96c6\u4e0e\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n### AC\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<set>\nint n,q;\nint w[4*300009];\nint min(int u,int v)\n{\n\treturn (u<v)?u:v;\n}\nint max(int u,int v)\n{\n\treturn (u>v)?u:v;\n}\nvoid change(int u,int l,int r,int x,int y)\n{\n\tif(l==r)\n\t{\n\t\tw[u]=min(y,w[u]);\n\t\treturn;\n\t}\n\tint mid(l+r>>1);\n\tif(x<=mid)change(u<<1,l,mid,x,y);\n\telse change(u<<1|1,mid+1,r,x,y);\n\tw[u]=min(w[u<<1],w[u<<1|1]);\n}\nstd::set<int>ak;\nint query(int u,int l,int r,int x,int y)\n{\n\tif(x<=l&&r<=y)return w[u];\n\tint mid(l+r>>1),og(0x7f7f7f);\n\tif(x<=mid)og=min(og,query(u<<1,l,mid,x,y));\n\tif(mid<y)og=min(og,query(u<<1|1,mid+1,r,x,y));\n\treturn og;\n}\nbool oo[300009];\nint main()\n{\n\tmemset(w,0x7f,sizeof(w));\n\tscanf(\"%d%d\",&n,&q);\n\tak.insert(0),ak.insert(n+1);\n\tfor(int i(1);i<=n;++i)ak.insert(i);\n\twhile(q--)\n\t{\n\t\tint t;\n\t\tscanf(\"%d\",&t);\n\t\tif(t==0)\n\t\t{\n\t\t\tint l,r,x;\n\t\t\tscanf(\"%d%d%d\",&l,&r,&x);\n\t\t\tif(x==0)\n\t\t\t{\n\t\t\t\tif(!ak.empty())\n\t\t\t\tfor(auto q(ak.lower_bound(l));q!=ak.end()&&*q<=r;q=ak.lower_bound(l))\n\t\t\t\t{\n\t\t\t\t\tl=*q;\n\t\t\t\t\too[l]=1;\n\t\t\t\t\tak.erase(q);\n\t\t\t\t\tif(ak.empty())break;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse change(1,1,n,l,r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint l;\n\t\t\tscanf(\"%d\",&l);\n\t\t\tif(oo[l])puts(\"NO\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto g(ak.find(l)),gg(g);\n\t\t\t\t--g;\n\t\t\t\tint oc(*g+1);\n\t\t\t\t++gg;\n\t\t\t\tint oe(*gg-1);\n\t\t\t\tint qq(query(1,1,n,oc,l));\n\t\t\t\tif(qq<=oe)puts(\"YES\");\n\t\t\t\telse puts(\"N/A\");\n\t\t\t}\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1645842960,
        "uid": 145017,
        "name": "2018ty43",
        "ccfLevel": 7,
        "title": "CF1641C Anonymity Is Important\u9898\u89e3"
    },
    {
        "content": "## CF1641C Anonymity Is Important\n\n### \u5927\u610f\n\n`0 l r 0` \u8868\u793a\u533a\u95f4 $ [l,r] $ \u5185\u6ca1\u6709\u75c5\u4eba\u3002\n\n`0 l r 1` \u8868\u793a\u533a\u95f4 $ [l,r] $ \u5185\u6709\u75c5\u4eba\uff08\u6570\u91cf\u672a\u77e5\uff09\u3002\n\n`1 x` \u8868\u793a\u8baf\u95ee\u7b2c $ x $ \u4e2a\u4eba\u6709\u6ca1\u6709\u75c5\uff0c\u4e0d\u786e\u5b9a\u8f93\u51fa `N/A` \u3002\n\n### \u601d\u8def\n\n\u6211\u4eec\u628a `0 l r 0` \u8bb0\u4e3a $ [l_{0,i},r_{0,i}] $\uff0c\u628a `0 l r 1` \u8bb0\u4e3a $ [l_{1,i},r_{1,i}] $\u3002\n\n\u8003\u8651\u5982\u679c\u8baf\u95ee\u7684\u4eba\u5728\u4efb\u610f $ [l_{0,i},r_{0,i}] $ \u5185\uff0c\u5c31\u786e\u5b9a\u6ca1\u75c5\u3002\n\n\u53ef\u4ee5\u5f00\u4e2a\u652f\u6301\u533a\u95f4\u8d4b\u503c\u6216\u533a\u95f4\u52a0\u7684\u6570\u636e\u7ed3\u6784\uff0c\u770b\u8be5\u4f4d\u7f6e\u662f\u5426\u5927\u4e8e $ 0 $\u3002\n\n\u8003\u8651\u5982\u679c\u8baf\u95ee\u7684\u4eba\u5728\u4efb\u610f\u533a\u95f4 $ [l_{1,i},r_{1,i}] $ \u5185\u4e14\u8be5\u533a\u95f4\u5185\u5176\u4ed6\u75c5\u4eba\u786e\u5b9a\u6ca1\u6709\u75c5\uff0c\u5c31\u786e\u5b9a\u6ca1\u75c5\uff0c\u5426\u5219\u8be5\u4eba\u4e0d\u786e\u5b9a\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u94fe\u8868\u7684\u6570\u636e\u7ed3\u6784\u6765\u5904\u7406\u4e00\u4e2a\u70b9 $ x $ \u6700\u5de6\u3001\u6700\u53f3\u8fde\u7eed\u975e $ 0 $ \u7684\u6bb5\u53ef\u4ee5\u5230\u8fbe\u54ea\u91cc\uff08\u5f53\u7136\u8fd9\u4e2a\u70b9\u4e3a $ 0 $ \uff09\uff0c\u6211\u4eec\u79f0\u5b83\u4e3a $ x $ \u7684\u5ef6\u5c55\u533a\u95f4 $ [le_x,ri_x] $ \u3002\n\n\u6bd4\u5982\u4e00\u4e2a\u5e8f\u5217 $ 011101101 $ \uff08\u4e0b\u6807\u4ece $ 1 $ \u5f00\u59cb\uff09\uff1a\n\n\u5bf9\u4e8e\u7b2c $ 2 $ \u4e2a\u4eba\uff0c\u4e0d\u5b58\u5728\u5ef6\u5c55\u533a\u95f4\u3002\n\n\u5bf9\u4e8e\u7b2c $ 5 $ \u4e2a\u4eba\uff0c\u6211\u4eec\u8bf4\u4ed6\u7684\u5ef6\u5c55\u533a\u95f4 $ [le_5,ri_5] $ \u4e3a $ [2,7] $ \u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u770b\u6709\u6ca1\u6709\u533a\u95f4 $ [l_{1,i},r_{1,i}] $ \u5728\u533a\u95f4 $ [le_x,ri_x] $ \u5185\u5373\u53ef\u3002\n\n\u7531\u4e8e\u662f\u5728\u7ebf\u64cd\u4f5c\uff0c\u5efa\u7acb\u4e00\u68f5\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u6700\u5c0f\u7ebf\u6bb5\u6811\u3002\n\n\u6bcf\u4e2a\u70b9\u8868\u793a\u4ee5\u5176\u4e3a $ l_{1,i} $ \u53ef\u4ee5\u8fbe\u5230\u7684\u6700\u8fd1\u53f3\u7aef\u70b9\uff0c\u5224\u65ad $ [le_x,ri_x] $ \u6709\u6ca1\u6709\u503c\u5c0f\u4e8e\u7b49\u4e8e $ ri_x $ \u5373\u53ef\u3002 \n\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define f(i,j,k) for(register int i=j;i<=k;++i)\n#define g(i,j,k) for(register int i=j;i>=k;--i)\nint n,m,s,l;\nstruct xds{\n    int l,r,c;\n}a[808080];\nint c[202020];\nint le[202020];\nint ri[202020];\nint Min(int x,int y){return x<y?x:y;}\nvoid add(int x,int v){\n    for(register int i=x;i<=n;i+=-i&i)c[i]+=v;\n}\nint sum(int x){\n    int re=0;\n    for(register int i=x;i;i-=-i&i)re+=c[i];\n    return re;\n}\nvoid bt(int id,int l,int r){\n    a[id]={l,r,n+1};\n    if(l<r){\n        int mid=(l+r)>>1;\n        bt(id*2,l,mid);\n        bt(id*2+1,mid+1,r);\n    }\n}\nvoid change(int id,int x,int v){\n    if(a[id].l==a[id].r){\n        a[id].c=Min(a[id].c,v);\n        return;\n    }\n    int mid=(a[id].l+a[id].r)>>1;\n    if(x<=mid)change(id*2,x,v);\n    else change(id*2+1,x,v);\n    a[id].c=Min(a[id*2].c,a[id*2+1].c);\n}\nint ask(int id,int l,int r){\n    if(a[id].l==l && r==a[id].r)return a[id].c;\n    int mid=(a[id].l+a[id].r)>>1;\n    if(r<=mid)return ask(id*2,l,r);\n    else if(mid<l)return ask(id*2+1,l,r);\n    return Min(ask(id*2,l,mid),ask(id*2+1,mid+1,r));\n}\nint file(int x){return x==le[x]?x:le[x]=file(le[x]);}\nint firi(int x){return x==ri[x]?x:ri[x]=firi(ri[x]);}\nint main(){\n    int p,q;\n    cin>>n>>m;\n    bt(1,1,n);\n    f(i,0,n+1)le[i]=ri[i]=i;\n    f(i,1,m){\n        scanf(\"%d\",&p);\n        if(p){\n            scanf(\"%d\",&q);\n            if(sum(q)){\n                printf(\"NO\\n\");\n            }else{\n                s=file(q-1)+1;l=firi(q+1)-1;\n                if(ask(1,s,q)<=l)printf(\"YES\\n\");\n                else printf(\"N/A\\n\");\n            }\n        }else{\n            scanf(\"%d %d %d\",&s,&l,&q);\n            if(q){\n                change(1,s,l);\n            }else{\n                add(s,1);add(l+1,-1);\n                while(s<=l){\n                    le[s]=s-1;\n                    ri[s]=s+1;\n                    s=firi(s);\n                }\n                s=file(s-1);l=firi(l+1);\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1651282504,
        "uid": 218376,
        "name": "IloveSurtr",
        "ccfLevel": 7,
        "title": "CF1641C"
    },
    {
        "content": "### [\u3010\u539f\u9898\u94fe\u63a5\u3011](https://0vu.cn/iwrzjr)\n\n## \u9898\u76ee\u5206\u6790\n\n\u6211\u4eec\u79f0\u4e00\u6b21 $x=1$ \u7684\u4fee\u6539\u7684\u533a\u95f4\u4e3a\u4e00\u4e2a\u201c$1$ \u533a\u95f4\u201d\uff0c\u79f0\u4e00\u6b21 $x=0$ \u7684\u4fee\u6539\u4e3a\u4e00\u6b21\u201c\u8986\u76d6\u201d\u3002\u7136\u540e\u5bf9\u4e00\u4e2a\u4eba\u5355\u72ec\u8003\u8651\uff1a\n\n* \u5982\u679c\u8fd9\u4e2a\u4eba\u88ab\u786e\u8ba4\u6ca1\u75c5\uff0c\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa `NO` \u5373\u53ef\uff1b\n\n* \u5982\u679c\u80fd\u591f\u627e\u5230\u4e00\u4e2a $1$ \u533a\u95f4\u4f7f\u5f97\u8fd9\u4e2a\u533a\u95f4\u5185\u6709\u4e14\u4ec5\u6709\u8fd9\u4e2a\u4eba\u662f\u6ca1\u6709\u88ab\u8986\u76d6\u7684\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f `YES`\uff1b\n\n* \u5176\u5b83\u60c5\u51b5\u7b54\u6848\u90fd\u662f `N/A`\u3002\n\n`NO` \u7684\u60c5\u51b5\u5bb9\u6613\u5224\u65ad\uff0c\u73b0\u5728\u6211\u4eec\u60f3\u60f3\u600e\u4e48\u5224\u65ad `YES`\u3002\n\n\u5047\u8bbe\u6211\u4eec\u8981\u67e5\u8be2\u4f4d\u7f6e $x$\uff0c\u8003\u8651\u627e\u51fa\u5176\u5de6\u8fb9\u79bb\u4ed6\u6700\u8fd1\u7684\u6ca1\u88ab\u8986\u76d6\u7684\u4eba\uff0c\u4ee5\u53ca\u53f3\u8fb9\u79bb\u4ed6\u6700\u8fd1\u7684\u6ca1\u88ab\u8986\u76d6\u7684\u4eba\uff0c\u8bbe\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u4e3a $l',\\ r'$\u3002\u90a3\u4e48 `YES` \u7684\u6761\u4ef6\u7b49\u4ef7\u4e8e\u5b58\u5728\u4e00\u4e2a $1$ \u533a\u95f4 $[l,r]$\uff0c\u4f7f\u5f97 $l\\in(l',x],\\ r\\in[x,r')$\u3002\n\n\u600e\u4e48\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u5462\uff1f\u7528 `set` \u7ef4\u62a4\u6240\u6709\u672a\u88ab\u8986\u76d6\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u5230 $l',\\ r'$\uff0c\u6bcf\u6b21\u8986\u76d6\u65f6\u66b4\u529b\u5220\u9664\u3002\u56e0\u4e3a\u6bcf\u4e2a\u5143\u7d20\u53ea\u4f1a\u88ab\u5220\u4e00\u6b21\uff0c\u590d\u6742\u5ea6\u662f $O(n\\log n)$ \u7684\u3002\n\n\u81f3\u4e8e\u5224\u65ad\u533a\u95f4\u5b58\u5728\u6027\uff0c\u4ee5\u533a\u95f4\u5de6\u7aef\u70b9\u4e3a\u4e0b\u6807\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a `set` \u7ef4\u62a4\u53f3\u7aef\u70b9\u3002\u4fee\u6539\u65f6\u76f4\u63a5\u63d2\u5165\u5373\u53ef\u3002\u67e5\u8be2\u7684\u65f6\u5019\u5bf9\u4e8e\u4e00\u4e2a\u88ab\u5b8c\u5168\u5305\u542b\u7684\u8282\u70b9\uff0c\u6211\u4eec\u5728\u5b83\u7684 `set` \u4e0a\u67e5\u627e $x$ \u7684\u540e\u7ee7\uff0c\u5224\u65ad\u662f\u5426\u5c0f\u4e8e $r'$ \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\u3002\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n\u8fd9\u4efd\u4ee3\u7801\u5728\u6bd4\u8d5b\u521a\u7ed3\u675f\u7b2c\u4e8c\u5929\u7684\u65f6\u5019\u63d0\u4ea4\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\u4f46\u662f\u521a\u521a\u6211\u53c8\u4ea4\u4e86\u4e00\u904d\uff0c\u8c8c\u4f3c\u88ab\u4e00\u7ec4\u65b0\u7684\u6570\u636e\u5361 TLE \u4e86\uff08\uff08\uff08\u76f8\u4fe1\u5927\u5bb6\u90fd\u6709\u66f4\u4f18\u79c0\u7684\u5b9e\u73b0\u3002\n\n**2022.3.7 UPD\uff1a\u88ab\u5361\u7684\u70b9\u662f\u4e00\u4e2a\u5168\u4e3a\u4fee\u6539\u7684\u70b9\uff0c\u91c7\u7528\u5c06\u4fee\u6539\u5b58\u8fdb\u961f\u5217\uff0c\u67e5\u8be2\u65f6\u518d\u6267\u884c\u7684\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u3002**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n//#define OPENIOBUF\n\n/*\n\u7701\u7565100\u591a\u884c\u7684\u5feb\u8bfb\u5feb\u5199\u6a21\u677f\u3002\n\u5373\u4e0b\u6587\u4e2d\u7684qin\u3001qout\u3002\n*/\n\nusing namespace FastIO;\nint n,m;\nset<int> s;\n\nstruct TreeNode{ set<int> s;int lc,rc; }t[400005];\nint rt,cnt;\n#define LC t[i].lc\n#define RC t[i].rc\nvoid build(int l,int r,int &i=rt)\n{\n\ti=++cnt;\n\tif(l!=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tbuild(l,mid,LC),build(mid+1,r,RC);\n\t}\n}\nvoid modify(int px,int py,int &i=rt,int l=1,int r=n)\n{\n\tt[i].s.insert(py);\n\tif(l!=r)\t\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(mid>=px)\tmodify(px,py,LC,l,mid);\n\t\telse\tmodify(px,py,RC,mid+1,r);\n\t}\n}\nbool query(int lq,int rq,int uq,int dq,int &i=rt,int l=1,int r=n)\n{\n\tif(l>=lq && r<=rq)\n\t{\n\t\tauto it=t[i].s.lower_bound(uq);\n\t\treturn it!=t[i].s.end() && (*it)<=dq;\n\t}\n\tint mid=(l+r)>>1,res=0;\n\tif(mid>=lq)\tres|=query(lq,rq,uq,dq,LC,l,mid);\n\tif(mid<rq)\tres|=query(lq,rq,uq,dq,RC,mid+1,r);\n\treturn res;\n}\n\nstruct Oper\n{\n\tint l,r,x;\n\tOper()=default;\n\tOper(int _l,int _r,int _x): l(_l),r(_r),x(_x){}\n\tinline void process()\n\t{\n\t\tif(x)\tmodify(l,r);\n\t\telse\n\t\t{\n\t\t\tauto itl=s.lower_bound(l);\n\t\t\tauto itr=s.upper_bound(r);\n\t\t\tif(itl!=itr)\ts.erase(itl,itr);\n\t\t}\n\t}\n};\nqueue<Oper> q;\nint main()\n{\n\tint opt,l,r,x,ll,rr;\n\tqin>>n>>m;\n\tbuild(1,n);\n\tfor(int i=1;i<=n;i++)\ts.insert(i);\n\twhile(m--)\n\t{\n\t\tqin>>opt;\n\t\tif(opt==0)\n\t\t\tqin>>l>>r>>x,q.push(Oper(l,r,x));\n\t\telse\n\t\t{\n\t\t\tqin>>x;\n\t\t\twhile(!q.empty())\n\t\t\t\tq.front().process(),q.pop();\n\t\t\tauto it=s.find(x);\n\t\t\tif(it==s.end())\tqout.writeln(\"NO\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tll=(it==s.begin())?1:(*prev(it)+1);\n\t\t\t\trr=(it==--s.end())?n:(*next(it)-1);\n\t\t\t\tqout.writeln(query(ll,x,x,rr)?\"YES\":\"N/A\");\n\t\t\t}\n\t\t}\n\t}\n//\treturn qout.flush(),0;\n}\n\n```\n",
        "postTime": 1646038095,
        "uid": 279800,
        "name": "ExplodingKonjac",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011CF1641C Anonymity Is Important"
    },
    {
        "content": "### Preface\n\n\u611f\u8c22\u8fd9\u9053\u9898\u6210\u529f\u963b\u6b62\u4e86\u6211\u7070\u53f7\u4e0a\u5927\u5206\u3002\n\n### Analysis\n\n\u4e3a\u65b9\u4fbf\uff0c\u8bbe\u81f3\u5c11\u6709\u4e00\u4e2a\u75c5\u4eba\u7684\u533a\u95f4\u4e3a A \u533a\u95f4\uff0c\u6ca1\u6709\u75c5\u4eba\u7684\u4e3a B \u533a\u95f4\u3002\n\n\u7ed3\u8bba\uff1a\u53ea\u6709\u5f53\u4e00\u6bb5\u8986\u76d6\u70b9 $a$ \u7684 A \u533a\u95f4\u4e2d\u9664\u4e86 $a$ \u5176\u4ed6\u786e\u5b9a\u4e3a\u6ca1\u75c5\u65f6\uff0c$a$ \u624d\u80fd\u786e\u5b9a\u6709\u75c5\u3002\n\n**Proof**\n\n\u5982\u679c $a$ \u4e0d\u5728\u4efb\u610f\u4e0a\u8ff0\u7c7b\u578b\u7684 A \u533a\u95f4\u5185\uff0c\u90a3\u5bf9\u4e8e\u4efb\u4f55\u8986\u76d6 $a$ \u7684 A \u533a\u95f4\uff0c\u8bbe\u5b9a\u9664\u4e86\u5df2\u786e\u5b9a\u6ca1\u75c5\u7684\u4eba\u548c $a$ \u4e4b\u5916\u7684\u4eba\u5168\u90fd\u5f97\u75c5\uff0c\u8fd9\u6837\u5c31\u6784\u9020\u4e86\u4e00\u4e2a\u6240\u6709\u6761\u4ef6\u90fd\u6ee1\u8db3\u4e14 $a$ \u6ca1\u5f97\u75c5\u7684\u60c5\u51b5\uff08\u53cd\u4f8b\uff09\uff0c\u539f\u547d\u9898\u5f97\u8bc1\u3002$\\blacksquare$\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u82e5\u8be2\u95ee $x$ \u7684\u5f97\u75c5\u72b6\u51b5\uff1a\n\n\u82e5 $x$ \u88ab B \u533a\u95f4\u8986\u76d6\uff08Algorithm 1\uff09\uff0c\u8f93\u51fa NO\u3002\n\n\u5426\u5219\uff0c\u6c42\u51fa\u6700\u5c0f\u7684 $L$ \u4f7f\u5f97 $[L,x-1]$ \u4e4b\u95f4\u6240\u6709\u4eba\u7edd\u5bf9\u6ca1\u6709\u5f97\u75c5\u7684\uff0c\u540c\u7406\u6c42\u51fa $x$ \u53f3\u8fb9\u6700\u5927\u7684 $R$\u3002\uff08Algorithm 1\uff09\n\n\u53ea\u8981\u5224\u65ad\u662f\u5426\u6709 A \u533a\u95f4\u88ab\u5305\u542b\u5728 $[L,R]$ \u5373\u53ef\uff0c\u56e0\u4e3a\u82e5\u6709\uff0cA \u533a\u95f4\u5fc5\u7136\u5305\u542b $x$\u3002\uff08Algorithm 2\uff09\n\n### Algorithm 1\n\n\u53ef\u4ee5 $O(n\\log n)$ \u7528\u7ebf\u6bb5\u6811\u6216 `std::set` \u7ef4\u62a4\uff0c\u4f46\u6211\u7528\u4e86\u7ebf\u6027\u5747\u644a\u505a\u6cd5\u3002\uff08\u8be6\u89c1\u4ee3\u7801\uff0c\u7c7b\u4f3c\u94fe\u8868\u6216\u5e76\u67e5\u96c6\uff09\n\n### Algorithm 2\n\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a A \u533a\u95f4 $[l,r]$\uff0c\u5728 $l$ \u4f4d\u7f6e\u4e0a\u6807\u8bb0 $r$\u3002\uff08\u82e5\u540c\u4e00\u4e2a $l$ \u6709\u591a\u4e2a $r$\uff0c\u53d6\u6700\u5c0f\u7684\uff09\n\n### Code\n\n[Link](https://codeforces.com/contest/1642/submission/147562428)",
        "postTime": 1645867676,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "CF1641C Anonymity Is Important"
    },
    {
        "content": "\n\u4e3b\u5e2d\u6811+\u4e8c\u5206\n\n\n\n------------\n\n\n\u8003\u8651\u5c06\u8be2\u95ee\u79bb\u7ebf\u3002\u7528\u4e3b\u5e2d\u6811\u8bb0\u5f55\u6bcf\u4e2a\u65f6\u523b\u5df2\u77e5\u672a\u611f\u67d3\u8005\u60c5\u51b5\u3002\n\n\u5bf9\u6bcf\u4e2a $t=0,x=0$ \u7684\u64cd\u4f5c\u6211\u4eec\u5728\u4e3b\u5e2d\u6811\u4e0a\u8fdb\u884c\u4fee\u6539\u3002\n\n\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u4e00\u4e2a\u4eba\u80fd\u88ab\u611f\u67d3\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a  $ t=0,x=1$ \u7684\u4fe1\u606f\uff0c\u4f7f\u5f97\u8fd9\u4e00\u6bb5 $l,r$ \u4e2d\u53ea\u6709\u4ed6\u4e00\u4e2a\u4e0d\u662f\u5df2\u7ecf\u786e\u5b9a\u7684\u672a\u88ab\u611f\u67d3\u7684\u4eba\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9 $ t=0,x=1$ \u7684\u4fe1\u606f\u4e8c\u5206\u5176\u6700\u5c0f\u80fd\u786e\u5b9a\u611f\u67d3\u8005\u7684\u65f6\u95f4\uff0c\u5224\u65ad\u7528\u4e3b\u5e2d\u6811\u5373\u53ef\uff0c\u7136\u540e\u5bf9\u90a3\u4e2a\u611f\u67d3\u8005\u8bb0\u5f55\u6700\u65e9\u77e5\u9053\u5176\u611f\u67d3\u7684\u65f6\u95f4\u3002\n\n\u6700\u540e\u5904\u7406\u8be2\u95ee\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff1a\u53ef\u4ee5\u4e0d\u63a8 tag \u4f46\u662f\u8981\u6807\u8bb0\u5df2\u7ecf\u5b8c\u6574\u4e3a 1 \u7684\u4e00\u6bb5\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log^2 n)$\u3002\n\n\n------------\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n//static char buf[1000000],*p1=buf,*p2=buf;\n//#define getchar() p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++\n#define pi pair<int,int>\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define mid (l+r>>1)\n#define lowbit(x) (x&-x)\nconst int maxn=2e5+5,M=34005;\ninline int read()\n{\n\tchar ch=getchar();bool f=0;int x=0;\n\tfor(;!isdigit(ch);ch=getchar())if(ch=='-')f=1;\n\tfor(;isdigit(ch);ch=getchar())x=(x<<1)+(x<<3)+(ch^48);\n\tif(f==1)x=-x;return x;\n}\ninline void print(int x)\n{\n    static int a[55];int top=0;\n    if(x<0) putchar('-'),x=-x;\n    do{a[top++]=x%10,x/=10;}while(x);\n    while(top) putchar(a[--top]+48);\n}\nint n,m,x,u[maxn],v[maxn],w[maxn],op[maxn],c[maxn],sz,rt[maxn],a[maxn];\nint sum[maxn<<5],ls[maxn<<5],rs[maxn<<5];\nset<int>s;\nvoid updata(int &rt,int rt1,int l,int r,int L,int R)\n{\n\tif(l>R||r<L)return;if(sum[rt]==r-l+1)return;\n\trt=++sz;ls[rt]=ls[rt1],rs[rt]=rs[rt1];sum[rt]=sum[rt1];\n\tif(l>=L&&r<=R){sum[rt]=r-l+1;return;}\n\tupdata(ls[rt],ls[rt1],l,mid,L,R),updata(rs[rt],rs[rt1],mid+1,r,L,R);\n\tsum[rt]=sum[ls[rt]]+sum[rs[rt]];\n}\nint query(int rt,int l,int r,int L,int R)\n{\n\tif(l>R||r<L)return 0;if(!rt)return 0;\n\tif(sum[rt]==r-l+1)return min(R,r)-max(L,l)+1;\n\tif(l>=L&&r<=R){return sum[rt];}\n\treturn query(ls[rt],l,mid,L,R)+query(rs[rt],mid+1,r,L,R);\n}\nsigned main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tn=read(),m=read();memset(a,0x3f,sizeof a);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\top[i]=read();\n\t\tif(op[i]==0)u[i]=read(),v[i]=read(),w[i]=read();\n\t\telse w[i]=read();\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\trt[i]=rt[i-1];\n\t\tif(op[i]==0&&w[i]==0)updata(rt[i],rt[i],1,n,u[i],v[i]);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!query(rt[m],1,n,i,i))s.insert(i);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(op[i]==0&&w[i]==1)\n\t\t{\n\t\t\tif(query(rt[m],1,n,u[i],v[i])!=v[i]-u[i])continue;\n\t\t\tint l=i,r=m,ans=m;\n\t\t\twhile(l<=r)\n\t\t\t{\n\t\t\t\tif(query(rt[mid],1,n,u[i],v[i])==v[i]-u[i])ans=mid,r=mid-1;\n\t\t\t\telse l=mid+1;\n\t\t\t}\n\t\t\tint id=*s.lower_bound(u[i]);\n\t\t\ta[id]=min(a[id],ans);\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(op[i]==1)\n\t\t{\n\t\t\tif(query(rt[i],1,n,w[i],w[i]))puts(\"NO\");\n\t\t\telse if(a[w[i]]<i)puts(\"YES\");\n\t\t\telse puts(\"N/A\");\n\t\t}\n\t}\n \treturn 0;\n}\n\n\n/*********************************************************************\n    \u4f5c\u8005:louhao088\n    \u65e5\u671f: 2022-02-23 18:52\n*********************************************************************/\n```\n",
        "postTime": 1645859059,
        "uid": 343748,
        "name": "louhao088",
        "ccfLevel": 9,
        "title": "CF1641C Anonymity Is Important"
    },
    {
        "content": "\u9996\u5148\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\uff1a\n\n- \u5bf9\u4e8e\u533a\u95f4 0 \u7684\u64cd\u4f5c\uff0c\u76f4\u63a5\u5c06\u6574\u4e2a\u533a\u95f4\u90fd\u8d4b\u6210 0 \u5373\u53ef\u3002\n\n- \u5bf9\u4e8e\u533a\u95f4 1 \u7684\u64cd\u4f5c\uff0c\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u53ea\u5269\u4e00\u4e2a\u4e0d\u662f 0 \u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u786e\u5b9a\uff0c\u5b83\u7684\u503c\u5c31\u662f 1\u3002\n\n\u867d\u7136\u4f46\u662f\uff0c\u5b83\u6709\u4e00\u4e2a bug\uff1a\n\n\u6bd4\u5982\u8fd9\u6837\u4e00\u7ec4\u6570\u636e\uff1a\n\n```\nInput\n\n3 3\n0 1 3 1\n0 1 2 0\n1 3\n\nOutput\n\nYES\n```\n\n\u56e0\u4e3a\u4e0a\u8ff0\u505a\u6cd5\u53ea\u4f1a\u5728\u533a\u95f4 1 \u7684\u64cd\u4f5c\u65f6\u786e\u5b9a\u67d0\u4e2a\u6570\u7684\u503c\u4e3a 1\uff0c\u4f46\u5982\u679c\u6761\u4ef6\u4ea4\u6362\u4e00\u4e0b\u987a\u5e8f\uff0c\u5c31\u4e0d\u884c\u4e86\u3002\n\n### \u6df1\u5165\n\n\u4ec0\u4e48\u60c5\u51b5\u53ef\u4ee5\u786e\u5b9a\u67d0\u4e2a\u6570\u7684\u503c\u4e3a 1 \u5462\uff1f\n\n\u6bd4\u5982\u8fd9\u6837\uff1a\n\n```\n1 1 0 0 0 1 0 1\n```\n\n\uff08`0` \u8868\u793a\u5df2\u7ecf\u786e\u5b9a\u4e3a 0\uff0c`1` \u8868\u793a\u5176\u4ed6\uff09\n\n\u64cd\u4f5c:\n\n```\n0 4 7 1\n```\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u80fd\u786e\u5b9a\u7b2c $6$ \u4e2a\u6570\u4e3a 1\u3002\n\n\u53d1\u73b0\uff1a\n\n\u4e00\u4e2a\u533a\u95f4\u5185\u53ea\u6709\u4e00\u4e2a\u672a\u786e\u5b9a\u4e3a 0 \u7684\u6570\uff0c\u4e14\u6709\u4e00\u4e2a\u533a\u95f4 1 \u7684\u64cd\u4f5c\u521a\u597d\u5305\u542b\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u786e\u5b9a\u8fd9\u4e2a\u6570\u4e3a 1\u3002\n\n\u90a3\uff1a\u4ec0\u4e48\u65f6\u5019\u80fd **\u4ea7\u751f** \u201d\u4e00\u4e2a\u533a\u95f4\u5185\u53ea\u6709\u4e00\u4e2a\u672a\u786e\u5b9a\u4e3a 0 \u7684\u6570\u201d \u8fd9\u79cd\u60c5\u51b5\u5462\uff1f\n\n\u4e00\u5b9a\u662f\u539f\u6765\u4e00\u6bb5\u8fde\u7eed\u7684 1\uff0c\u7136\u540e\u6709\u4e00\u4e2a\u533a\u95f4 0 \u7684\u64cd\u4f5c\uff0c\u628a\u8fd9\u6bb5\u8fde\u7eed\u7684 1  **\u622a\u65ad** \u4e86\u3002\n\n\u6ce8\u610f\u5230\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ea\u53ef\u80fd\u51fa\u73b0\u5728\u533a\u95f4 1 \u64cd\u4f5c\u7684\u533a\u95f4\u7d27\u9760\u4e24\u8fb9\u7684\u6570\u3002\n\n### \u505a\u6cd5\n\n\u7528 `std::set` \u7ef4\u62a4\u8fd8\u672a\u786e\u5b9a\u4e3a 0 \u7684\u4f4d\u7f6e\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\uff0c\u9996\u5148\u50cf\u4e0a\u8ff0\u7684 **\u57fa\u7840** \u65b9\u6cd5\u64cd\u4f5c\u3002\n\n\u53e6\u5916\uff1a\n\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff1a\u5de6\u7aef\u70b9\u4e3a $i$ \u7684\u533a\u95f4 1 \u64cd\u4f5c\u4e2d\uff0c\u53f3\u7aef\u70b9\u6700\u5c0f\u662f\u591a\u5c11\u3002\n\n\u5bf9\u4e8e\u533a\u95f4 0 \u64cd\u4f5c\uff0c\u6211\u4eec\u8fd8\u8981\u5904\u7406\u5de6\u53f3\u4e24\u4e2a\u70b9\uff08\u5982\u679c\u5b58\u5728\uff09\uff1a\n\n\u5904\u7406\u51fa\u5b83\u5de6\u53f3\u4e24\u8fb9\u7684 **\u8fde\u7eed 0** \u6709\u591a\u957f\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u67e5\u8be2\u6709\u6ca1\u6709\u533a\u95f4 1 \u64cd\u4f5c\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\uff0c\u5982\u679c\u6709\uff0c\u90a3\u4e48\u628a\u8fd9\u4e2a\u70b9\u786e\u5b9a\u4e3a 1\u3002\n\n\u5177\u4f53\u53ef\u4ee5\u770b\u4e0a\u9762\u90a3\u4e2a\u4f8b\u5b50\u3002\n\n### Code\n\n```cpp\n/*\n * @Description: I want to be the weakest vegetable in the world!\n * @Author: CGBoy\n * @Date: 2022-02-23 19:14:50\n */\n\n#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define forr(i,a,n) for(int i=a;i<=n;i++)\n#define rep(i,n) forr(i,0,n-1)\n#define repp(i,n) forr(i,1,n)\n#define pb push_back\n#define mp make_pair\n#define init(a,i) memset(a,i,sizeof(a))\n#define fi first\n#define se second\n#define mod 1000000007\n#define MOD 998244353\n#define MAXN 0x3f3f3f3f\nint T_, case_;\nint n, q, op, l, r;\nint f;\nset<int>s;\nset<int>::iterator it1, it2;\nbool sick[200005];\nint tree[800005];\nvoid update(int node, int l, int r, int ind, int val) {\n    if (l == r) {\n        tree[node] = min(tree[node], val);\n        return;\n    }\n    int mid = l + r >> 1;\n    if (mid >= ind)update(node * 2 + 1, l, mid, ind, val);\n    else update(node * 2 + 2, mid + 1, r, ind, val);\n    tree[node] = min(tree[node * 2 + 1], tree[node * 2 + 2]);\n}\nint query(int node, int l, int r, int L, int R) {\n    if (L <= l && r <= R) return tree[node];\n    int mid = l + r >> 1, mn = MAXN;\n    if (mid >= L)mn = min(mn, query(node * 2 + 1, l, mid, L, R));\n    if (mid < R) mn = min(mn, query(node * 2 + 2, mid + 1, r, L, R));\n    return mn;\n}\nvoid judge() {\n    int L, R;\n    if (it1 != s.begin()) {\n        it1--;\n        L = *it1;\n        L++;\n        it1++;\n    }\n    else L = 0;\n    it1++;\n    if (it1 != s.end()) {\n        R = *it1;\n        R--;\n    }\n    else R = n - 1;\n    it1--;\n    if (query(0, 0, n - 1, L, R) <= R)sick[*it1] = 1;\n}\nvoid solve() {\n    init(tree, 63);\n    scanf(\"%d%d\", &n, &q);\n    rep(i, n)s.insert(i);\n    rep(i, q) {\n        scanf(\"%d\", &op);\n        if (op == 0) {\n            scanf(\"%d%d%d\", &l, &r, &f);\n            l--, r--;\n            if (!f) {\n                it1 = s.lower_bound(l);\n                it2 = s.upper_bound(r);\n                s.erase(it1, it2);\n                it1 = s.lower_bound(l);\n                if (it1 != s.begin()) {\n                    it1--;\n                    judge();\n                    it1++;\n                }\n                if (it1 != s.end()) judge();\n            }\n            else {\n                it1 = s.lower_bound(l);\n                it2 = s.upper_bound(r);\n                if (it1 != it2) {\n                    int tmp = *it1;\n                    it1++;\n                    if (it1 == it2)sick[tmp] = 1;\n                }\n                update(0, 0, n - 1, l, r);\n            }\n        }\n        else {\n            scanf(\"%d\", &l);\n            l--;\n            if (sick[l])printf(\"YES\\n\");\n            else {\n                it1 = s.lower_bound(l);\n                if (it1 != s.end() && *it1 == l)printf(\"N/A\\n\");\n                else printf(\"NO\\n\");\n            }\n        }\n    }\n}\nint main() {\n    T_ = 1;\n\n    for (case_ = 1;case_ <= T_;case_++)solve();\n    return 0;\n}\n```",
        "postTime": 1645848173,
        "uid": 407564,
        "name": "Rushroom",
        "ccfLevel": 7,
        "title": "CF1641C Anonymity Is Important"
    }
]