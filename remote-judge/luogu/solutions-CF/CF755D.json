[
    {
        "content": "[\u6d1b\u8c37\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF755D)\t[CF\u4f20\u9001\u95e8](http://codeforces.com/problemset/problem/755/D)\n\n### Solution\n\n\u6709\u4e2a\u5f88\u663e\u7136\u7684\u89c4\u5f8b\u662f\uff1a\u6bcf\u6b21 $ans$ \u589e\u52a0\u7684\u662f\u6240\u8fde\u8fd9\u6761\u8fb9\u548c\u522b\u7684\u8fb9\u7684\u4ea4\u70b9\u6570\u91cf+1\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u53ef\u4ee5~~\u6027\u611f~~\u611f\u6027\u7406\u89e3\n\n\u5148\u770b\u521a\u5f00\u59cb\u8fde\u7b2c\u4e00\u6761\u8fb9\u7684\u65f6\u5019\uff0c $ans+=1\\rightarrow ans\\times 2$ \uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u5c06\u591a\u8fb9\u5f62\u5206\u6210\u4e86\u4e24\u534a\uff0c\u56fe\u4e5f\u662f\u8fd9\u4e48\u753b\u7684\n\n\u540e\u9762\u8fde\u7684\u76f4\u7ebf\u6bcf\u548c\u53e6\u4e00\u6761\u76f4\u7ebf $k$ \u8fdb\u884c\u76f8\u4ea4\uff0c\u5c31\u76f8\u5f53\u4e8e\u5c06 $k$ \u524d\u7684\u7a7a\u95f4\u4e00\u5206\u4e3a\u4e8c\n\n\u800c\u548c\u6700\u540e\u4e00\u6761\u76f4\u7ebf\u76f8\u4ea4\u5b8c\uff0c\u8fd8\u6709\u4e00\u7247\u7a7a\u95f4\uff0c\u4e5f\u88ab\u4e00\u5206\u4e8c\u4e3a\u4e8c\n\n~~\u5c31\u662f\u8fd9\u6837\uff0c\u8fd9\u4e2a\u9898\u5c31\u5b8c\u4e86~~\n\n\u95ee\u9898\u6765\u4e86\uff0c\u600e\u4e48\u7ef4\u62a4\u4ea4\u70b9\uff1f\n\n\u53d1\u73b0\u9898\u76ee\u4e2d\u7ed9\u7684\u6761\u4ef6\u662f $\\gcd(k,n)=1$ \uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u51fa\u73b0\u91cd\u8fb9\n\n\u6240\u4ee5\u53ef\u4ee5\u7528\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u4ece\u67d0\u4e2a\u70b9\u51fa\u53d1\u7684\u76f4\u7ebf\u6570\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5f53 $u,v$ \u8fdb\u884c\u8fde\u8fb9\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981 $sum_{u,v}$ \uff0c\u5176\u4e2d $sum$ \u4e3a\u76f4\u7ebf\u6570\u7684\u548c\n\n\u6211\u8fd9\u91cc\u7528\u7684\u662f\u7ebf\u6bb5\u6811\uff08\u56e0\u4e3a\u6015\u6709\u4e0d\u559c\u6b22\u6811\u72b6\u6570\u7ec4\u7684\u540c\u5b66\uff09\n\n\u5c0f\u7ec6\u8282\uff1a\u4f7f $k=\\min(k,n-k)$ \u3002\u5176\u5b9e\u662f\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u7edf\u4e00\u60c5\u51b5\uff0c\u4e0d\u7136\u8fd8\u8981\u5206 $k>\\frac n2,k\\leq \\frac n2$ \n\n### Code\n\n```c++\n#include<bits/stdc++.h>\n#define ls rt<<1\n#define rs rt<<1|1\n#define ll long long\n\nusing namespace std;\nconst int N=100010;\nint n,k,T;\nll ans=1;\nstruct node{\n    ll lz,sum;\n    int l,r;\n}tr[N<<6];\n\nvoid build(int rt,int l,int r){\n    tr[rt].l=l; tr[rt].r=r;\n    if(l==r) return ;\n    int mid=(l+r)>>1;\n    build(ls,l,mid);\n    build(rs,mid+1,r);\n}\n\ninline void pushup(int rt){\n    tr[rt].sum=tr[ls].sum+tr[rs].sum;\n}\n\ninline void pushdown(int rt){\n    if(!tr[rt].lz) return ;\n    tr[ls].lz+=tr[rt].lz;\n    tr[ls].sum+=tr[rt].l*(tr[ls].r-tr[ls].l+1);\n    tr[rs].lz+=tr[rt].lz;\n    tr[rs].sum+=tr[rt].l*(tr[rs].r-tr[rs].l+1);\n    tr[rt].lz=0;\n}\n\nvoid update(int rt,int L,int R,ll val){\n    int l=tr[rt].l,r=tr[rt].r;\n    if(L<=l&&r<=R){\n        tr[rt].lz+=val;\n        tr[rt].sum+=(r-l+1)*val;\n        return ;\n    }\n    if(tr[rt].lz) pushdown(rt);\n    int mid=(l+r)>>1;\n    if(L<=mid) update(ls,L,R,val);\n    if(R>mid) update(rs,L,R,val);\n    pushup(rt);\n}\n\nll query(int rt,int L,int R){\n    int l=tr[rt].l,r=tr[rt].r;\n    if(L<=l&&r<=R) return tr[rt].sum;\n    ll res=0;\n    if(tr[rt].lz) pushdown(rt);\n    int mid=(l+r)>>1;\n    if(L<=mid) res+=query(ls,L,R);\n    if(R>mid) res+=query(rs,L,R);\n    return res;\n}\n\nint main(){\n    int last=1,now;\n    scanf(\"%d%d\",&n,&k);\n    T=n;\n    if(k>n/2) k=n-k;\n    build(1,1,n);\n    while(T--){\n        now=(last+k-1)%n+1;\n        if(now>last) ans+=query(1,last+1,now-1)+1;\n        else ans+=query(1,last+1,n)+query(1,1,now-1)+1;\n        update(1,last,last,1);update(1,now,now,1);\n        last=now;\n        printf(\"%lld \",ans);\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1603684819,
        "uid": 272143,
        "name": "\u662f\u4e2a\u6c49\u5b50",
        "ccfLevel": 4,
        "title": "CF755D PolandBall and Polygon"
    },
    {
        "content": "Codeforces 755D PolandBall and Polygon \u9898\u89e3\n\n\u9898\u610f\uff1a\n\n\u7ed9\u4f60\u4e00\u4e2an\u8fb9\u884c\uff0c\u6bcf\u6b21\u8ba9\u4f60\u5c06x\u4e0e(x+k)%n\u7684\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u6bcf\u6b21\u8be2\u95ee\u8be5\u591a\u8fb9\u5f62\u5185\u9762\u79ef\u88ab\u5212\u5206\u6210\u4e86\u51e0\u5757\n\n\u5206\u6790\uff1a\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u8f93\u51fa\u5f88\u6709\u89c4\u5f8b\uff0c\u4f46\u662f\u89c4\u5f8b\u597d\u50cf\u4e0d\u662f\u5f88\u597d\u627e\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u5176\u4ed6\u65b9\u6cd5\u3002\n\n\u6839\u636e\u6837\u4f8b\u5206\u6790\u7684\u56fe\u753b\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\n\n1.\u524d\u4e24\u5e45\u56fe\u53ea\u5bf9\u7b54\u6848\u505a\u51fa\u4e861\u7684\u8d21\u732e\n\n2.\u7b2c3\u5e45\u56fe\u5bf9\u7b54\u6848\u505a\u51fa\u4e862\u7684\u8d21\u732e\uff0c\u4e14\u4ed6\u8fde\u51fa\u7684\u8fb9\u4e0e\u8fb9\uff081\uff0c3\uff09\u6709\u4ea4\u70b9\uff1b\n\n3.\u56fe4,5\u90fd\u5bf9\u7b54\u6848\u505a\u51fa\u4e863\u7684\u8d21\u732e\uff0c\u4e14\u6709\u4e24\u4e2a\u4ea4\u70b9\uff1b\n\n\u6839\u636e\u8fd9\u4e2a\u53d1\u73b0\uff0c\u6211\u4eec\u5927\u80c6\u7684\u63a8\u65ad\u51fa\u4e86\u7ed3\u8bba\uff1a\u6bcf\u6761\u8fb9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f\u4e0e\u4ed6\u7684\u4ea4\u70b9\u7684\u4e2a\u6570+1\n\n\u90a3\u4e48\u600e\u4e48\u7b97\u4ea4\u70b9\u4e2a\u6570\u5462\uff1f\n\n\u9898\u76ee\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u53f0\u9636\uff0c\u4ed6\u544a\u8bc9\u6211\u4eecn\u4e0ek\u4e92\u8d28\u4e14k\u4e0d\u53d8\uff0c\n\n\u4e8e\u662f\u4e0d\u4f1a\u51fa\u73b0\u91cd\u8fb9\u6216\u8fb9\u5305\u542b\u8fb9\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u6211\u4eec\u7684\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u7ef4\u62a4x\u5230(x+k)%n\u4e2d\u7684\u70b9\u5ef6\u4f38\u51fa\u7684\u8fb9\u7684\u6570\u91cf\uff08\u8fd9\u4e9b\u8fb9\u5fc5\u4e0e\u672c\u8fb9\u76f8\u4ea4\uff09\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4efb\u4f55\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff0clike\u6811\u72b6\u6570\u7ec4\n\n\u6ce8\u610f\u4e24\u4e2a\u7ec6\u8282\uff1a\n\n1.k = min(k, n - k)\n\n2.long long\n\n\u5206\u7c7b\u8ba8\u8bba\u641e\u4e00\u4e0b\u5c31AC\u4e86\u5427\u3002\n\n\u4ee3\u7801\uff1a //\u4e00\u5927\u5806\u5934\u6587\u4ef6\u4e0d\u8981\u7ba1\n\n```cpp\n#include <map>\n#include <set>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <bitset>\n#include <cstdio>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <cassert>\n#include <climits>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std ;\n\n#define rep(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)\n#define Rep(i, a, b) for (int (i) = (a) - 1; (i) < (b); (i)++)\n#define REP(i, a, b) for (int (i) = (a); (i) >= (b); (i)--)\n#define clr(a) memset(a, 0, sizeof(a))\n#define Sort(a, len, cmp) sort(a + 1, a + len + 1, cmp)\n#define ass(a, sum) memset(a, sum, sizeof(a))\n\n#define ls ((rt) << 1)\n#define rs ((rt) << 1 | 1)\n#define lowbit(x) (x & -x)\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define endl '\\n'\n#define ENDL cout << endl\n#define SZ(x) ((int)x.size())\n\ntypedef long long ll ;\ntypedef unsigned long long ull ;\ntypedef vector <int> Vi ;\ntypedef pair <int, int> Pii ;\ntypedef pair <ll, ll> Pll ;\ntypedef map <int, int> mii ;\ntypedef map <string, int> msi ;\ntypedef map <ll, ll> mll ;\n\nconst int N = 1000100 ;\nconst double eps = 1e-8 ;\nconst int iinf = INT_MAX ;\nconst ll linf = 2e18 ;\nconst double dinf = 1e30 ;\nconst int MOD = 1000000007 ;\n\ninline int read(){\n    int X = 0, w = 0 ;\n\tchar ch = 0 ;\n    while (!isdigit(ch)) { w |= ch == '-' ; ch = getchar() ; }\n    while (isdigit(ch)) X = (X << 3) + (X << 1) + (ch ^ 48), ch = getchar() ;\n    return w ? - X : X ;\n}\n\nvoid write(int x){\n     if (x < 0) putchar('-'), x = - x ;\n     if (x > 9) write(x / 10) ;\n     putchar(x % 10 + '0') ;\n}\n\nvoid print(int x) {\n\tcout << x << endl ;\n\texit(0) ;\n}\n\nvoid PRINT(string x) {\n\tcout << x << endl ;\n\texit(0) ;\n}\n\nvoid douout(double x){\n\t printf(\"%lf\\n\", x + 0.0000000001) ;\n}\n\nint n, k, now, to ;\nll ans ;\nint bit[N] ;\n\nvoid add(int a, int x) {\n\tfor (; a <= n; a += lowbit(a)) bit[a] += x ;\n}\n\nint sum(int a) {\n\tint res = 0 ;\n\tfor (; a; a -= lowbit(a)) res += bit[a] ;\n\treturn res ;\n}\n\nsigned main(){\n\tscanf(\"%d%d\", &n, &k) ;\n\tk = min(k, n - k) ;\n\tnow = 1 ;\n\tans = 1 ;\n\tfor (int i = 1; i <= n; i++) {\n\t\tto = now + k ;\n\t\tans++ ;\n\t\tif (to > n) {\n\t\t\tto -= n ;\n\t\t\tans += sum(n) - sum(now) + sum(to - 1) ;\n\t\t}\n\t\telse {\n\t\t\tans += sum(to - 1) - sum(now) ;\n\t\t}\n\t\tadd(now, 1) ;\n\t\tadd(to, 1) ;\n\t\tnow = to ;\n\t\tprintf(\"%lld \", ans) ;\n\t}\n}\n\n/*\n\u5199\u4ee3\u7801\u65f6\u8bf7\u6ce8\u610f\uff1a\n\t1.\u662f\u5426\u8981\u5f00Long Long\uff1f\u6570\u7ec4\u8fb9\u754c\u5904\u7406\u597d\u4e86\u4e48\uff1f\n\t2.\u5b9e\u6570\u7cbe\u5ea6\u6709\u6ca1\u6709\u5904\u7406\uff1f\n\t3.\u7279\u6b8a\u60c5\u51b5\u5904\u7406\u597d\u4e86\u4e48\uff1f\n\t4.\u505a\u4e00\u4e9b\u603b\u6bd4\u4e0d\u505a\u597d\u3002\n\u601d\u8003\u63d0\u9192\uff1a\n\t1.\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u95ee\u9898\u53ef\u4e0d\u53ef\u4ee5\u7528\u4e8c\u5206\u7b54\u6848\uff1f\n\t2.\u6709\u6ca1\u6709\u8d2a\u5fc3\u7b56\u7565\uff1f\u5426\u5219\u80fd\u4e0d\u80fddp\uff1f\n*/\n\n```\n",
        "postTime": 1543155427,
        "uid": 54900,
        "name": "__Hacheylight__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF755D \u3010PolandBall and Polygon\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\uff0cemmm~\n\n\u5176\u5b9e\u63a2\u89c4\u53ef\u80fd\u66f4\u7b80\u5355\u4e00\u4e9b\uff0c\u53ea\u662f\u6211\u61d2\u5f97\u60f3\u4e86\u3002\n\n\u90a3\u4e48\u5c31\u66b4\u529b\u5730\u7528\u6811\u72b6\u6570\u7ec4\u505a\u5457\u3002\n\n\u5bf9\u4e8e\u4e24\u4e2a\u70b9\uff0c\u6211\u4eec\u7b97\u51fa\u5b83\u4eec\u4e4b\u95f4\u7684\u8fde\u7ebf\u4e0e\u5176\u4ed6\u8fde\u7ebf\u7684\u4ea4\u70b9\u4e2a\u6570\u4e3a$x$\n\n\u90a3\u4e48\u8fd9\u4e00\u6b21\u7684\u7b54\u6848$ans=$\u4e0a\u4e00\u6b21\u7684\u7b54\u6848$last\\_ans+1+x$\n\n\u90a3\u4e48\u600e\u4e48\u6c42\u5462\uff1f\u533a\u95f4\u67e5\u8be2\uff0c\u5355\u70b9\u66f4\u6539\uff0c\u5f88\u660e\u663e\u7684\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u554a\u3002\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\n#define ll long long\n#define Maxn 1000000\nll f[Maxn+5];\nint n,k;\nvoid add(int x,int a){\n\tfor(int i=x;i<=n;i+=(i&(-i))){\n\t\tf[i]+=a;\n\t}\n}\nll query(int x){\n\tll ans=0;\n\tfor(int i=x;i>0;i-=(i&(-i))){\n\t\tans+=f[i];\n\t}\n\treturn ans;\n}\nll sum(int left,int right){\n\treturn query(right)-query(left-1);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tif(k>(n>>1)){\n\t\tk=n-k;\n\t}\n\tint start=1,end;\n\tll ans=1;\n\tfor(int i=1;i<=n;i++){\n\t\tend=(start+k-1)%n+1;\n\t\tif(start>end){\n\t\t\tans+=1+sum(start+1,n)+sum(1,end-1);\n\t\t}\n\t\telse{\n\t\t\tans+=1+sum(start+1,end-1);\n\t\t}\n\t\tadd(start,1);\n\t\tadd(end,1);\n\t\tstart=end;\n\t\tcout<<ans<<\" \";\n\t}\n\tputs(\"\");\n\treturn 0;\n}\n```\n",
        "postTime": 1543055085,
        "uid": 33362,
        "name": "Suiseiseki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF755D \u3010PolandBall and Polygon\u3011"
    },
    {
        "content": "\n## \u9898\u76ee\u63cf\u8ff0\n\nPolandBall has such a convex polygon with n*n* veritces that no three of its diagonals intersect at the same point. PolandBall decided to improve it and draw some red segments.\n\nHe chose a number k*k* such that $gcd(n,k)=1$ . Vertices of the polygon are numbered from $1$ to $n$ in a clockwise way. PolandBall repeats the following process $n$ times, starting from the vertex $1$ :\n\nAssume you've ended last operation in vertex $x$ (consider $x=1$ if it is the first operation). Draw a new segment from vertex x$ to k$ -th next vertex in clockwise direction. This is a vertex $x+k$ or $x+k-n$ depending on which of these is a valid index of polygon's vertex.\n\nYour task is to calculate number of polygon's sections after each drawing. A section is a clear area inside the polygon bounded with drawn diagonals or the polygon's sides.\n\n## \u8f93\u5165\u683c\u5f0f\n\nThere are only two numbers in the input: $n,k$( $5<=n<=10^{6}$, $2<=k<=n-2$ , $gcd(n,k)=1$ ).\n\n## \u8f93\u51fa\u683c\u5f0f\n\nYou should print $n$ values separated by spaces. The $i -th$ value should represent number of polygon's sections after drawing first $i$ lines.\n\n## \u9898\u610f\u7ffb\u8bd1\n\n\u7ed9\u51fa\u4e00\u4e2a$n$\u8fb9\u5f62\uff0c\u548c\u8ddd\u79bb$k$\u3002 \u7b2c\u4e00\u6b21\u8fde\u63a5$1$\u548c $k+1$\uff0c\u7b2c\u4e8c\u6b21\u8fde\u63a5$k+1$\u548c$(k+1+k)%n$\uff0c\u4f9d\u6b21\u8fdb\u884c$n$\u6b21\uff0c\u6bcf\u6b21\u7ed3\u675f\u540e\u8f93\u51fa$n$\u8fb9\u5f62\u88ab\u5206\u5272\u6210\u4e86\u51e0\u4e2a\u533a\u57df\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n\u8f93\u5165 #1\n\n```\n5 2\n```\n\n\u8f93\u51fa #1\n\n```\n2 3 5 8 11 \n```\n\n\u8f93\u5165 #2\n\n```\n10 3\n```\n\n\u8f93\u51fa #2\n\n```\n2 3 4 6 9 12 16 21 26 31 \n```\n\n## \u8bf4\u660e/\u63d0\u793a\n\nThe greatest common divisor (gcd) of two integers a*a* and b*b* is the largest positive integer that divides both a*a* and b*b* without a remainder.\n\nFor the first sample testcase, you should output \"$2 \\  3 \\ 5 \\ 8 \\ 11$\". Pictures below correspond to situations after drawing lines.\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubHVvZ3UuY29tLmNuL3VwbG9hZC92anVkZ2VfcGljL0NGNzU1RC80OTkwYmQzYzBjN2RkNTgzNmZkY2M1NzlmOTcwZGNkY2E4ZGJkODcyLnBuZw?x-oss-process=image/format,png)![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubHVvZ3UuY29tLmNuL3VwbG9hZC92anVkZ2VfcGljL0NGNzU1RC82NDUxZWY5NWRiOTY0NmYyNzViYTNlYzc5ZGEyYThkNWIwYjAyOGQwLnBuZw?x-oss-process=image/format,png)\n\n\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubHVvZ3UuY29tLmNuL3VwbG9hZC92anVkZ2VfcGljL0NGNzU1RC9hOGIzYzA3ODBmMjA3MzdmZWQxMmY3NDRmODNjMGYxZWFiM2Q1MzhmLnBuZw?x-oss-process=image/format,png)![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubHVvZ3UuY29tLmNuL3VwbG9hZC92anVkZ2VfcGljL0NGNzU1RC9jMjE0MDEwYTIwNWViNTFlODkxYjIzNzZhYWNlZGNiMDk0NzU0MTBlLnBuZw?x-oss-process=image/format,png)\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubHVvZ3UuY29tLmNuL3VwbG9hZC92anVkZ2VfcGljL0NGNzU1RC9hYzJlMjY4MGRjOTYxMWFmYjMzMTY2M2EwMWM5MThlMGMwMDFlODMyLnBuZw?x-oss-process=image/format,png)\n\n\n\n## \u9898\u89e3\n\n- \u5bf9\u4e8e\u672c\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u591a\u4e00\u6761\u7ebf\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f\u5b83\u4e0e\u5176\u4ed6\u7684\u7ebf\u7684\u4ea4\u70b9$+1$\u3002\n- \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u7edf\u8ba1\u4ea4\u70b9\u5373\u53ef\u3002 \n  \u7ebf\u6bb5\u53ef\u4ee5\u88ab\u770b\u4f5c\u6709\u4e24\u4e2a\u70b9\u7684\u96c6\u5408\uff0c\u5f53\u6211\u4eec\u65b0\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u5bf9\u5e94\u4e24\u4e2a\u7aef\u70b9\u7684\u6743\u503c++\uff0c\u5373\u53ef\u4ee3\u8868\u6211\u4eec\u52a0\u5165\u4e86\u8fd9\u6761\u7ebf\u6bb5\u3002 \n- \u6240\u4ee5\u7edf\u8ba1\u4ea4\u7ebf\u7684\u4e2a\u6570\u4e5f\u5c31\u5f88$easy$\u4e86\u3002\u5047\u8bbe\u6211\u4eec\u8981\u4ece$l$\u8fde\u5411$r$\uff0c\u6211\u4eec\u53ea\u9700\u8ba1\u7b97$sum(r-1)-sum(l)$\uff0c\u5373\u6211\u4eec\u53ea\u9700\u8ba1\u7b97$l,r$\u4e2d\u95f4\u70b9\u7684\u6743\u503c\u548c\u5373\u53ef\u3002 \u4f46\u662f\u5982\u679c$r$\u7684\u7f16\u53f7\u8d85\u8fc7\u4e86$n$\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5bf9$r$\u8fdb\u884c\u53d6\u6a21\uff0c\u8fd9\u65f6r\u6709\u53ef\u80fd\u4f1a\u5c0f\u4e8e$l$\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8ba1\u7b97$sum(n)+sum(r-1)-sum(l)$\u3002\uff08\u5bf9\u7167\u6837\u4f8b\u7684\u56fe\u7406\u89e3\u4e00\u4e0b\u5427\uff09\n- \u6ce8\u610f$k$\u5e94\u8be5\u53d6$min(k,n-k)$\u4ee5\u53ca\u8981\u5f00$long \\ long$\n\n## code\n\n```cpp\n#include <bits/stdc++.h> \nusing namespace std; \nconst int maxn = 1e6 + 1000; \ntypedef long long LL; \n\nint n, k; \nLL c[maxn]; \n\ninline int lowbit(int x) { return x & (-x); }\n\ninline void add(int x, int val ) {\n\tfor (; x <= n; x += lowbit(x)) c[x] += val; \n}\n\ninline LL query(int x) {\n\tLL ret = 0; \n\tfor (; x; x -= lowbit(x)) {\n\t\tret += c[x]; \n\t}\n\treturn ret; \n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &k); \n\tk = min(k, n - k); \n\tLL ans = 1; int now = 1, to; \n\tfor (int i = 1; i <= n; ++i) {\n\t\tto = now + k; ++ans; \n\t\tif (to > n) {\n\t\t\tto -= n; \n\t\t\tans += query(n) + query(to - 1) - query(now); \n\t\t}\n\t\telse {\n\t\t\tans += query(to - 1) - query(now); \n\t\t}\n\t\tadd(now, 1); add(to, 1); \n\t\tnow = to; \n\t\tprintf(\"%lld \", ans); \n\t}\n\treturn 0; \n}\n```",
        "postTime": 1569761590,
        "uid": 145352,
        "name": "MILLOPE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF755D \u3010PolandBall and Polygon\u3011"
    }
]