[
    {
        "content": "\u5f88\u5999\u7684\u9898\u3002\n\n\u8003\u8651\u8bb0\u5f55\u6240\u6709\u51fa\u73b0\u8fc7\u7684\u67d0\u68f5\u5b50\u6811\u7684\u6743\u503c\u548c\u3002\n\n\u6bcf\u6b21\u4fee\u6539 $h$ \u4e2a\u70b9\uff0c$q$ \u6b21\u4e00\u5171\u53ea\u4f1a\u4fee\u6539 $nq$ \u4e2a\u70b9\u3002\u7528 `map` \u7ef4\u62a4\u5373\u53ef\uff0c\u5355\u6b21\u590d\u6742\u5ea6 $\\Theta(h^2)$\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u5c1d\u8bd5\u679a\u4e3e\u6240\u6709\u6700\u5927\u503c\u3002\u8ba1\u7b97\u53d6\u6700\u5927\u503c\u7684\u6982\u7387\u3002\n\n`dfs` \u6574\u68f5\u6811\uff0c\u5230\u8fbe\u4e00\u70b9\u65f6\uff0c\u4ee3\u8868\u4e86\u65ad\u5f00\u5b83\u7684\u6240\u6709\u7956\u5148\u8fde\u8fb9\u7684\u60c5\u51b5\u3002\u6240\u4ee5\u7ef4\u62a4\u7956\u5148\u65ad\u8fb9\u4e4b\u540e\u7684\u8fde\u901a\u5757\u6743\u503c\u6700\u5927\u503c\u4e3a $m$\u3002\n\n\u5982\u679c\u8be5\u70b9\u662f\u53f6\u5b50\uff0c\u76f4\u63a5\u518d\u5bf9 $m$ \u7528\u5b83\u7684\u6743\u503c\u53d6 $\\max$\uff0c\u7136\u540e\u8ba1\u7b97\u6982\u7387\u4e3a $\\frac 1{2^k}$\u3002\n\n\u5982\u679c\u8be5\u70b9\u7684\u5b50\u6811\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8e $m$\uff0c\u90a3\u4e48\u8be5\u5b50\u6811\u4e2d\u65ad\u5f00\u5f97\u5230\u7684\u8fde\u901a\u5757\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u5927\u503c\uff0c\u5373\uff0c\u5b50\u6811\u5185\u7684\u6240\u6709\u53f6\u5b50\u7684\u65b9\u6848\u6743\u503c\u90fd\u662f $m$\uff0c\u8ba1\u7b97\u540e\u8fd4\u56de\u3002\n\n\u5426\u5219\u9012\u5f52\u3002\n\n\u8fd9\u4e2a\u505a\u6cd5\u5355\u6b21\u8be2\u95ee\u590d\u6742\u5ea6\u662f $\\Theta(h)$ \u7684\uff0c\u4e0d\u592a\u663e\u7136\u3002\u8bc1\u660e\u5982\u4e0b\uff1a\n\n\u5047\u5982\u4e00\u4e2a\u70b9\u9012\u5f52\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\uff0c\u5b83\u4eec\u90fd\u6ca1\u6709\u7acb\u5373\u8fd4\u56de\u3002\u8bb0\u8be5\u70b9\u5b50\u6811\u6743\u503c $s$\uff0c\u5de6\u513f\u5b50\u5b50\u6811\u6743\u503c $s_l$\uff0c\u53f3\u513f\u5b50 $s_r$\u3002\n\n\u90a3\u4e48\u6709\n$$\ns - s_l < s_l,s - s_r < s_r\n$$\n\u5f97\u5230\n$$\n2s_l > s, 2s_r > s\n$$\n\u4f46\u662f $s_l + s_r\\le s$\uff0c\u77db\u76fe\u3002\u90a3\u4e48\u4e00\u4e2a\u70b9\u6700\u591a\u9012\u5f52\u4e00\u4e2a\u513f\u5b50\uff0c\u8bc1\u6bd5\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#include <vector>\n#include <map>\n\nconst int H = 30;\nconst int Q = 100001;\n\ninline int read() {\n    int x = 0, f = 1; char ch = getchar();\n    while(ch > '9' || ch < '0') { if(ch == '-') f = -1; ch = getchar(); }\n    while(ch >= '0' && ch <= '9') x = x * 10 + ch - 48, ch = getchar();\n    return x * f;\n}\n\nchar t[5]; int k,q;\nstd::map <int,double> s;\n\ndouble Dfs(int v,int l,double mx) {\n    if(v >= (1 << k)) mx = std::max(mx,s[v]);\n    if(s[v] <= mx) return mx * l / (1 << k);\n    return Dfs(v * 2,l / 2,std::max(mx,s[v] - s[2 * v])) + Dfs(v * 2 + 1,l / 2,std::max(mx,s[v] - s[2 * v + 1]));\n}\n\nint main() {\n    k = read(), q = read();\n    while(q--) {\n        std::scanf(\"%s\",t);\n        if(t[0] == 'a') {\n            int v = read(), e = read();\n            while(v) s[v] += e, v /= 2;\n        } else std::printf(\"%lf\\n\",Dfs(1,1 << k,0));\n    }\n    return 0;\n}\n\n```\n\n",
        "postTime": 1635566487,
        "uid": 219595,
        "name": "Vocalise",
        "ccfLevel": 9,
        "title": "\u66b4\u529b\u679a\u4e3e--\u3010[CF68D]\u534a\u8870\u6811\u3011"
    },
    {
        "content": "\u7ed9\u51fa\u4e00\u68f5\u9ad8\u5ea6\u4e3a $h$ \u7684\u5b8c\u5168\u4e8c\u53c9\u6811 $T$\uff0c\u6b64\u6811\u4e0a\u8282\u70b9\u7f16\u53f7\u9075\u5faa\u7ebf\u6bb5\u6811\u7684\u7f16\u53f7\u65b9\u6cd5\u3002\u521d\u59cb\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u4e3a $0$\u3002  \n\u6709 $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u4e3a\u4e0b\u9762\u7684\u4e24\u79cd\u4e4b\u4e00\uff1a\n+ \u9009\u62e9\u4e00\u4e2a\u70b9 $u$\uff0c\u5c06\u5176\u6743\u503c\u52a0 $v$\u3002\n+ \u8be2\u95ee\u5728 $T$ \u4e2d\u968f\u673a\u65ad\u5f00\u4e00\u6761\u4ece\u6839\u5230\u53f6\u7684\u8def\u5f84\u540e\uff0c\u5b9a\u4e49\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u4ef7\u503c\u4e3a\u5176\u5185\u70b9\u7684\u6743\u503c\u548c\uff0c\u6c42\u4ef7\u503c\u6700\u5927\u7684\u8fde\u901a\u5757\u7684\u4ef7\u503c\u671f\u671b\u3002\n\n\n$1 \\le h \\le 30$\uff0c$q \\le 10^5$\u3002\n\n---\n\n\u8bb0 $V_u$\u200b \u4e3a\u70b9 $u$\u200b \u7684\u6743\u503c\uff0c$S_u$\u200b \u4e3a\u70b9 $u$\u200b \u7684\u5b50\u6811\u7684\u6743\u503c\u548c\uff0c$L_u$\u200b \u4e3a\u8282\u70b9 $u$\u200b \u4e0b\u65b9\u7684\u8282\u70b9\u4e2a\u6570\u3002\u7531\u4e8e\u8282\u70b9\u4e2a\u6570\u8f83\u5927\uff0c\u9700\u8981\u7528 Map \u6765\u5b58\u3002  \n\u6839\u8282\u70b9\u9ad8\u5ea6\u4e3a $0$\u200b\u3002\n\n\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u66b4\u529b\u5f80\u4e0a\u8df3\uff0c\u66f4\u65b0\u6240\u6709 $u$ \u4e0a\u65b9\u8282\u70b9\u7684 $S$ \u5373\u53ef\u3002\n\n\n\u5bf9\u4e8e\u8be2\u95ee\u64cd\u4f5c\uff0c\u8003\u8651\u4e00\u6b21\u5728\u6811\u4e0a\u4ece\u6839\u5f00\u59cb\uff0c\u968f\u673a\u5411\u4e0b\u8d70\u5e76\u65ad\u8fb9\u7684\u8fc7\u7a0b\u3002\u8bb0\u5f55\u4e00\u4e2a\u4e0a\u9762\u5df2\u7ecf\u88ab\u65ad\u51fa\u6765\u7684\u8fde\u901a\u5757\u7684\u4ef7\u503c\u6700\u5927\u503c $Mxv$\u200b\u3002  \n\u5047\u8bbe\u73b0\u5728\u8282\u70b9 $u$\uff0c\u5de6\u513f\u5b50\u4e3a $l$\uff0c\u53f3\u513f\u5b50\u4e3a $r$\u200b\uff1a  \n+ \u82e5 $S_u \\le Mxv$\u200b\u200b\uff0c\u5219\u4ee5 $u$\u200b\u200b \u5b50\u6811\u4e2d\u53f6\u5b50\u4e3a\u7ed3\u675f\u7684\u6839\u53f6\u8def\u5bf9\u5e94\u7684\u4ef7\u503c\u6700\u5927\u8fde\u901a\u5757\u4ef7\u503c\u5373\u4e3a $Mxv$\u200b\u200b\u200b\u3002\u7531\u4e8e\u6240\u6709\u53f6\u5b50\u5bf9\u5e94\u7684\u6839\u53f6\u8def\u6709 $\\frac{L_u}{2^h}$ \u7684\u6982\u7387\u4f1a\u6765\u5230\u8fd9\u91cc\uff0c\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a $Mxv \\times \\frac{L_u}{2^h}$\u200b\u200b\u200b\u3002\u4e0d\u9700\u8981\u518d\u7ee7\u7eed\u5f80\u4e0b\u9012\u5f52\u7b97\u4e86\u3002\n+ \u82e5 $S_u \\ge Mxv$\u200b\u200b\uff0c\u5219\u6b64\u5b50\u6811\u5bf9\u7b54\u6848\u53ef\u80fd\u8fd8\u6709\u8d21\u732e\uff1a\n  + \u82e5\u6b64\u8282\u70b9\u4e3a\u53f6\u5b50\uff0c\u5219\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a $\\frac{\\max(u,Mxv)}{2^h}$\u200b\u3002\u200b\n  + \u82e5\u6b64\u8282\u70b9\u4e0d\u4e3a\u53f6\u5b50\uff0c\u5f80\u5de6\u53f3\u513f\u5b50\u9012\u5f52\u5373\u53ef\u3002\n\n\n\n\u4e3a\u4e86\u4e0d\u6389\u7cbe\u5ea6\uff0c\u5728\u8ba1\u7b97\u65f6\u6240\u6709\u7b54\u6848\u4e58\u4ee5 $2^h$\uff0c\u6700\u540e\u9664\u6389\u5373\u53ef\u3002\n\n\u81f3\u6b64\uff0c\u5f97\u5230\u4e86\u4e00\u4e2a $O(qh \\log n) = O(qh^2)$\u200b \u7684\u505a\u6cd5\uff0c\u8db3\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n---\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint h;\nunordered_map<int,int> V,S;\n\ninline\nint L(int u)\n{\n\treturn (1<<h)/(1<<(int)log2(u));\n}\ninline\nbool isLeaf(int u)\n{\n\treturn ((int)log2(u))==h;\n}\ninline\nvoid update(int p,int v)\n{\n\tV[p]+=v;\n\tfor(int u=p;u;u>>=1)\n\t{\n\t\tS[u]+=v;\n\t}\n}\nunsigned long long query(int u,int Mxv)\n{\n\tint l=(u<<1),r=(u<<1)|1;\n\n\tif(S[u]<=Mxv)\n\t{\n\t\treturn 1ull*L(u)*Mxv;\n\t}\n\tif(isLeaf(u))\n\t{\n\t\treturn max(V[u],Mxv);\n\t}\n\n\tunsigned long long ans=0;\n\tans+=query(l,max(Mxv,V[u]+S[r]));\n\tans+=query(r,max(Mxv,V[u]+S[l]));\n\treturn ans;\n}\n\nint main()\n{\n\tint q;\n\tscanf(\"%d%d\",&h,&q);\n\n\tchar *s=new char[110];\n\tint p,v;\n\twhile(q--)\n\t{\n\t\tscanf(\"%s\",s);\n\t\tif(s[0]=='a')\n\t\t{\n\t\t\tscanf(\"%d%d\",&p,&v);\n\t\t\tupdate(p,v);\n\t\t}\n\t\tif(s[0]=='d')\n\t\t{\n\t\t\tprintf(\"%.6lf\\n\",(double)query(1,0)/(1<<h));\n\t\t}\n\t}\n}\n```\n\n",
        "postTime": 1629174382,
        "uid": 175590,
        "name": "Zxx200611",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF68D Half-decay Tree"
    },
    {
        "content": "\u4f18\u7f8e\u7684\u9898\u3002\n\n\u8003\u8651\u6700\u540e\u4e00\u5b9a\u662f\u5206\u6210\u4e86\u4e00\u6761\u94fe\u4e0a\u7684\u70b9\u548c\u4e00\u4e9b\u5b50\u6811\u4e0a\u7684\u70b9\u7684\u62fc\u5408\u3002\n\n\u5f88\u5957\u8def\u5730\u8ba1\u7b97\u6bcf\u68f5\u5b50\u6811\u7684\u8d21\u732e\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u6211\u4eec\u4ee5\u6839\u8282\u70b9\u5256\u5206\u7684\u65f6\u5019\uff0c\u5f53\u5f53\u524d\u5b50\u6811 $u$ \u7684\u5b50\u6811\u548c\u6bd4\u4efb\u4f55\u4e00\u4e2a\u5176\u4ed6\u5b50\u6811\u7684\u5b50\u6811\u548c\u5c0f\u7684\u65f6\u5019\uff0c\u4ed6\u7684\u6240\u6709\u5b50\u6811\u90fd\u6ca1\u7528\u4e86\u3002\n\n\u90a3\u4e48\u76f4\u63a5\u66b4\u529b dfs \u7684\u65f6\u5019\u7ef4\u62a4\u4e00\u4e2a max \u5c31\u884c\u4e86\u3002\n\n\u4e3a\u4ec0\u4e48\u590d\u6742\u5ea6\u662f\u5bf9\u7684\uff1f\n\n\u8003\u8651\u7ebf\u6bb5\u6811\u7684\u8bc1\u660e\u8fc7\u7a0b\u3002\u8bfb\u8005\u81ea\u8bc1\u4e0d\u96be\u3002\n\n\u4ee3\u7801\u94fe\u63a5\uff1ahttps://www.luogu.com.cn/paste/vylqy0o8",
        "postTime": 1596785359,
        "uid": 55078,
        "name": "YLWang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF68D \u3010Half-decay tree\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u4e0d\u96be\n\u53d1\u73b0\u603b\u5171$q$\u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u6700\u591a\u6d89\u53ca\u5230$h$\u4e2a\u70b9\uff0c\u6240\u4ee5\u603b\u5171\u6700\u591a\u8bbe\u8ba1\u5230$qh$\u4e2a\u70b9\n\n\u53ef\u4ee5\u7528$map$\u628a\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u6743\u503c\u4e4b\u548c\u8bb0\u5f55\u4e0b\u6765\n\n\u4fee\u6539\u64cd\u4f5c\u76f4\u63a5\u628a\u81ea\u5df1\u5230\u6839\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u4fee\u6539\n\n\u67e5\u8be2\u64cd\u4f5c\u4e0d\u59a8\u53cd\u5411\u601d\u8003\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5f80\u4e0b\u65ad\u8fb9\uff0c\u56e0\u4e3a\u662f\u4e8c\u53c9\u6811\u6240\u4ee5\u6bcf\u6b21\u53ea\u6709\u4e24\u79cd\u65ad\u8fb9\u53ef\u80fd\uff0c\u5bf9\u5e94\u6743\u503c\u53ef\u4ee5\u6c42\u51fa\n\n\u7531\u4e8e\u671f\u671b\u7684\u7ebf\u6027\u6027\u76f4\u63a5\u52a0\u8d77\u6765\n\n\u7ec8\u6b62\u6761\u4ef6\u662f\u5f53\u524d\u7684\u6700\u5927\u503c\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u7684map\u503c\n\nCode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint h, q;\nmap <int, int> mp;\n\ninline int read(){\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n\tfor (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n\treturn s * w;\n}\n\n#define ls u << 1\n#define rs u << 1 | 1\n\ndouble dfs(int u, int Max){\n\tif (Max >= mp[u]) return Max;\n\treturn 0.5 * (dfs(ls, max(Max, mp[u] - mp[ls])) + dfs(rs, max(Max, mp[u] - mp[rs])));\n}\n\nint main(){\n\th = read(), q = read();\n\twhile (q--){\n\t\tchar c[10]; scanf(\"%s\", c);\n\t\tif (c[0] == 'a'){\n\t\t\tint u = read(), w = read();\n\t\t\twhile (u) mp[u] += w, u >>= 1;\n\t\t} else printf(\"%.8f\\n\", dfs(1, 0));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1564826576,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF68D \u3010Half-decay tree\u3011"
    }
]