[
    {
        "content": "\u601d\u8def\uff1a\u5bf9\u4e8e\u8fd9\u79cd\u6784\u9020\u53ef\u884c\u89e3\u4f7f\u5f97\u6743\u503c\u548c\u6070\u597d\u4e3a\u67d0\u4e00\u503c\u7684\u9898\uff0c\u4e00\u822c\u90fd\u662f\u5148\u6c42\u51fa\u53ef\u4ee5\u6784\u9020\u51fa\u6765\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c\uff0c\u7136\u540e\u4ece\u67d0\u4e2a\u6781\u503c\u6309\u7167\u4e00\u5b9a\u65b9\u6cd5\u8fdb\u884c\u8fde\u7eed\u4fee\u6539\n\n\u6211\u4eec\u8003\u8651\u6bcf\u4e00\u6761\u8fb9\u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\uff1a\u82e5\u8fb9$E(u,v)$\u628a\u6570\u5206\u6210$U,V$\u4e24\u9897\u5b50\u6811\uff0c\u5219\u8be5\u8fb9\u6700\u5927\u7684\u8d21\u732e\u662f$min(sz[U],sz[V])$\uff0c\u6700\u5c0f\u662f$sz[U]\\mod2$\u3002\n\n$min$\u592a\u96be\u5904\u7406\uff0c\u6240\u4ee5\u60f3\u4e00\u79cd\u529e\u6cd5\u628a$min$\u53bb\u6389\uff0c\u901a\u8fc7\u91cd\u5fc3\u7684\u6027\u8d28\uff08\u6bcf\u4e00\u4e2a\u5b50\u6811\u7684$size$\u5c0f\u4e8e\u7b49\u4e8e$\\frac{n}{2}$\uff09\uff0c\u53d1\u73b0\u76f4\u63a5\u53d6\u91cd\u5fc3\u5c31\u53ef\u4ee5\u628a$min$\u53bb\u6389\u4e86\n\n\u6240\u4ee5\u5c31\u53ef\u4ee5\u5f97\u5230\n\n$$minans=\\sum_{i=1}^{n} [i \\neq root]sz[i]\\mod2$$\n\n$$maxans=\\sum_{i=1}^{n} [i \\neq root]sz[i]$$\n\n\u7136\u540e\u4ed4\u7ec6\u60f3\u60f3\u4f1a\u53d1\u73b0\uff1a\u7b54\u6848\u6709\u89e3\u7684\u5145\u8981\u6761\u4ef6\u662f$minans \\leq k \\leq maxans$\u4e14$(maxans-k)\\mod2=0$\n\n\u5145\u5206\u6027\uff1a\u901a\u8fc7\u6784\u9020\u65b9\u6cd5\u8bc1\u660e\u3002\n\n\u3000\u3000\u6bcf\u6b21\u53d6\u5728$size$\u6700\u5927\u7684\u5b50\u6811\u4e2d\u9009\u53d6\u4e24\u4e2a$lca$\u6df1\u5ea6\u6700\u5927\u7684\u70b9\uff0c\u56e0\u4e3a\u672c\u6765\u4e24\u4e2a\u70b9\u90fd\u662f\u5411\u5b57\u6811\u5916\u8fde\u7684\uff0c\u73b0\u5728\u81ea\u5df1\u76f8\u8fde\uff0c\u6240\u4ee5$\\Delta =2*dep[lca]$\uff0c\u7136\u540e\u5220\u6389\u90a3\u4e24\u4e2a\u70b9\n\n\u3000\u3000\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u6784\u9020\u662f\u5fc5\u5b9a\u53ef\u4ee5\u4ece$maxans$\u53d8\u6210$minans$\u7684\uff0c\u56e0\u4e3a\u5bf9\u4e8e$sz[u]\\mod2=0$\u7684\u8fb9\uff0c\u5b83\u5e95\u4e0b\u80af\u5b9a\u4e24\u4e24\u914d\u5bf9\uff1b\u5bf9\u4e8e$sz[u]\\mod2=0$\uff0c\u8fd9\u6837\u7684\u8d2a\u5fc3\u4f1a\u4f7f\u5f97\u4e0b\u9762\u53ea\u6709\u4e00\u4e2a\u70b9\u5411\u4e0a\u7ecf\u8fc7\u5b83\n\n\u3000\u3000\u56e0\u4e3a\u70b9\u6570\u59cb\u7ec8\u4e3a\u5076\u6570\uff0c\u6240\u4ee5\u4ece\u6700\u5927\u5b50\u6811\u5220\u6389\u4e24\u4e2a\u70b9\u4ee5\u540e\u4e0d\u4f1a\u4f7f\u5f97\u6b21\u5927\u5b50\u6811\u7684$size$\u5927\u4e8e$\\frac{n}{2}$\uff0c\u4e0a\u9762\u6c42$minans,maxans$\u7684\u5f0f\u5b50\u59cb\u7ec8\u6210\u7acb\n\n\u3000\u3000\u5f53\u6700\u540e\u4e00\u6b21$dep[lca]*2>rest$\u65f6\uff0c\u56e0\u4e3a\u6240\u6709\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\u7684\u70b9\u90fd\u53ef\u4ee5\u4f5c$lca$\uff0c\u6240\u4ee5$dep$\u5fc5\u5b9a\u8fde\u7eed\uff0c\u5373\u80af\u5b9a\u80fd\u627e\u5230\u6784\u9020\u51fa\u521a\u597d\u4f7f\u5f97$rest=0$\u7684\u65b9\u6848\u3002\n\n\u3000\u3000\u5269\u4e0b\u7684\u70b9\u6309\u7167$max$\u7684\u65b9\u6848\uff0c\u8de8\u5b50\u6811\u5206\u522b\u8fde\u5c31\u53ef\u4ee5\u4e86\n\n\u5fc5\u8981\u6027\uff1a\u56e0\u4e3a$\\Delta =2*dep[lca]$\uff0c\u6240\u4ee5\u5982\u679c$k,maxans$\u4e0d\u662f\u540c\u5947\u540c\u5076\uff0c\u4e00\u5b9a\u65e0\u89e3\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=120000;\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define mk make_pair\nint n; ll k; vector<int> v[N];\nint sz[N],dep[N],fa[N],root; ll minn=N,maxn=0;\nvoid dfs1(int u,int f)\n{\n    sz[u]=1; int maxsz=0;\n    for(int i=0;i<(int)v[u].size();i++)\n    {\n        int to=v[u][i]; if(to==f) continue;\n        dfs1(to,u); sz[u]+=sz[to];\n        maxsz=max(maxsz,sz[to]);\n    }\n    if(minn>max(maxsz,n-sz[u])) minn=max(maxsz,n-sz[u]),root=u;\n}\n\nint top[N],deg[N];\nset<pii> S[N],R;//S\u7ef4\u62a4\u5b50\u6811\u4e2d\u6240\u6709\u53ef\u80fd\u4f5c\u4e3alca\u7684\u70b9(\u5373\u4e0d\u662f\u53f6\u5b50)\nvoid dfs(int u,int from)\n{\n    sz[u]=1;\n    top[u]=from;\n    if(from&&(int)v[u].size()-1>=1) S[from].insert(mk(dep[u],u)); \n    for(int i=0;i<(int)v[u].size();i++)\n    {\n        int to=v[u][i]; if(to==fa[u]) continue;\n        if(u==root) from=to; deg[u]++;\n        dep[to]=dep[u]+1; fa[to]=u;\n        dfs(to,from); sz[u]+=sz[to];\n    }\n}\n\nvoid del(int x)\n{\n    if(!--deg[fa[x]])\n        S[top[x]].erase(mk(dep[fa[x]],fa[x]));\n}\n\nint vis[N];\nvector<int> rem;\nvoid dfs3(int u)\n{\n    if(!vis[u]) rem.push_back(u);\n    for(int i=0;i<(int)v[u].size();i++)\n    {\n        int to=v[u][i]; if(to==fa[u]) continue;\n        dfs3(to);\n    }\n}\n\nint main()\n{\n    scanf(\"%d%lld\",&n,&k);\n    for(int i=1;i<n;i++) \n    {\n        int x,y; scanf(\"%d%d\",&x,&y);\n        v[x].push_back(y); v[y].push_back(x);\n    }\n    dfs1(1,-1); dep[root]=0; dfs(root,0);\n    minn=0,maxn=0;\n    for(int i=1;i<=n;i++) \n        if(i!=root) maxn+=sz[i], minn+=sz[i]%2;\n    if(k>maxn||k<minn||(maxn-k)&1) {puts(\"NO\"); return 0;}\n    puts(\"YES\");\n    for(int i=0;i<v[root].size();i++)\n    {\n        int to=v[root][i];\n        if(sz[to]>1) R.insert(mk(sz[to],to));\n    }\n    ll rest=maxn-k;\n    while(rest)\n    {\n        int now=R.rbegin()->second; R.erase(--R.end());\n        int pos=S[now].rbegin()->second;\n        if(2*dep[pos]>rest)\n        {\n            rest/=2;\n            pos=S[now].lower_bound(mk(rest,0))->second;\n            vector<int> V; V.clear();\n            for(int i=0;i<(int)v[pos].size();i++) \n            {\n                int to=v[pos][i];\n                if(to==fa[pos]||vis[to]) continue;\n                V.push_back(to);\n            }\n            if((int)V.size()<2) V.push_back(pos);\n            printf(\"%d %d\\n\",V[0],V[1]); vis[V[0]]=1; vis[V[1]]=1;\n            rest-=dep[pos];\n            break;\n        }\n        else\n        {\n            vector<int> V; V.clear();\n            for(int i=0;i<(int)v[pos].size();i++) \n            {\n                int to=v[pos][i];\n                if(to==fa[pos]||vis[to]) continue;\n                V.push_back(to);\n            }\n            if((int)V.size()<2) V.push_back(pos);\n\n            rest-=dep[pos]*2;\n            printf(\"%d %d\\n\",V[0],V[1]); vis[V[0]]=1; vis[V[1]]=1;\n            del(V[0]); del(V[1]);\n        }\n        sz[now]-=2;\n        if(sz[now]>1) R.insert(mk(sz[now],now));\n    }\n    dfs3(root);\n    int T=(int)rem.size()/2;\n    for(int i=0;i<T;i++) printf(\"%d %d\\n\",rem[i],rem[i+T]);\n    return 0;\n}\n```\n",
        "postTime": 1599897889,
        "uid": 69107,
        "name": "_tourist_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1396E \u3010Distance Matching\u3011"
    },
    {
        "content": "[CF1396E Distance Matching](https://www.luogu.com.cn/problem/CF1396E)\u89e3\u9898\u62a5\u544a\uff1a\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/xiaoziyao/p/15382723.html)\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u6c42\u662f\u5426\u80fd\u8ba9\u6811\u4e0a\u7684\u70b9\u4e24\u4e24\u5339\u914d\u4f7f\u5f97\u5339\u914d\u7684\u70b9\u8ddd\u79bb\u548c\u4e3a $k$\uff08$n$ \u4e3a\u5076\u6570\uff09\u3002\n\n$1\\leqslant n\\leqslant 10^5$\u3002\n\n## \u5206\u6790\n\n\u548c\u6700\u8fd1\u6821\u5185\u8003\u8bd5\u7684\u4e00\u9053\u9898\u5f88\u50cf\u3002\n\n\u9996\u5148\uff0c\u6839\u636e\u7ecf\u5178\u7ed3\u8bba\uff0c\u5408\u6cd5\u7684 $k$ \u7684\u4e0b\u754c\u4e3a $mn=\\sum_{i=1}^n(\\text{size}_x\\bmod 2)$\uff0c\u4e0a\u754c\u4e3a $mx=\\sum_{i=1}^n\\min\\{\\text{size}_x,n-\\text{size}_x\\}$\u3002\n\n\u5177\u4f53\u8bc1\u660e\u53ef\u4ee5\u8003\u8651\u53d6\u51fa\u4e00\u4e2a\u70b9\u5bf9\uff0c\u7136\u540e\u518d\u5206\u6cbb\u6784\u9020\u3002\n\n\u5927\u80c6\u731c\u6d4b\u7ed3\u8bba\uff0c$k$ \u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53 $mn\\leqslant k\\leqslant mx$ \u4e14 $mx\\equiv k\\pmod 2$\u3002\n\n\u8bc1\u660e\u5b9e\u9645\u4e0a\u5c31\u662f\u6784\u9020\u8fc7\u7a0b\uff1a\n\n\u6211\u4eec\u53d6\u91cd\u5fc3\u4e3a\u6839\uff0c\u90a3\u4e48\u5bb9\u6613\u53d1\u73b0 $\\text{size}_x\\leqslant n-\\text{size}_x$ \u6052\u6210\u7acb\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53d6\u51fa\u6240\u6709\u7ecf\u8fc7\u6839\u7684\u8def\u5f84\u5373\u53ef\u4ee5\u8ba9\u7b54\u6848\u53d6\u5230\u6700\u5c0f\u503c\u3002\n\n\u7531\u4e8e $\\sum_{x,y} \\text{dis}(x,y)=\\sum_{x,y} dep_x+dep_y-2dep_{\\text{lca}(x,y)}$\u3002\u7531\u4e8e\u524d\u9762\u662f\u5e38\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u8ba9\u4e00\u5bf9\u5339\u914d\u7684\u70b9\u5bf9 $x,y$ \u7684 $\\text{lca}$ \u6df1\u5ea6\u589e\u52a0\u4e00\u5c31\u53ef\u4ee5\u8ba9\u7b54\u6848\u589e\u52a0\u4e8c\u3002\n\n\u63a5\u4e0b\u6765\u662f\u6784\u9020\u8fc7\u7a0b\uff1a\n\n- \u5982\u679c $k=mx$\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u7b54\u6848\u53d6\u5230\u6700\u5927\uff0c\u8fd9\u662f\u7ecf\u5178\u95ee\u9898\uff0c\u6211\u4eec\u6c42\u51fa\u6811\u7684 dfs \u5e8f\u5e76\u9694 $\\frac{n}{2}$ \u5339\u914d\u5373\u53ef\u3002\n- \u5982\u679c $k<mx$\uff0c\u90a3\u4e48\u6211\u4eec\u53d6\u51fa\u6839\u8282\u70b9\u7684\u513f\u5b50\u4e2d\u5b50\u6811\u5927\u5c0f\u6700\u5927\u7684\u5b50\u6811 $x$\uff0c\u5bb9\u6613\u53d1\u73b0\u5176\u5927\u5c0f\u4e00\u5b9a\u4e0d\u5c0f\u4e8e $2$\uff0c\uff0c\u6211\u4eec\u53d6\u51fa\u5176\u4e2d\u5b50\u6811\u5927\u5c0f\u5927\u4e8e $1$ \u4e14\u6700\u6df1\u7684\u8282\u70b9 $y$\u3002\n- - \u5982\u679c $2\\text{dep}_y\\leqslant mx-k$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4e24\u4e2a $\\text{lca}$ \u4e3a $y$ \u7684\u70b9\u8fdb\u884c\u5339\u914d\u5e76\u5220\u9664\u5373\u53ef\uff0c\u6b64\u65f6 $k$ \u4f1a\u589e\u52a0 $2\\text{dep}_{y}$\uff0c\u4f46\u5e76\u4e0d\u4f1a\u8d85\u8fc7 $mx$\uff0c\u6211\u4eec\u56de\u5230\u7b2c\u4e00\u6b65\u5373\u53ef\u3002\n- - \u5982\u679c $2\\text{dep}_y>mx-k$\uff0c\u90a3\u4e48\u7531\u4e8e $k\\equiv mx\\pmod 2$ \u4e14\u6df1\u5ea6\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a $\\text{dep}_z=\\frac{mx-k}{2}$ \u7684\u8282\u70b9 $z$\uff0c\u6211\u4eec\u53d6\u51fa\u4e24\u4e2a $\\text{lca}$ \u4e3a $z$ \u7684\u8282\u70b9\u5373\u53ef\uff0c\u6784\u9020\u7ed3\u675f\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff1a\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u53d6\u51fa\u4e00\u5bf9 $\\text{lca}=y$ \u7684\u8282\u70b9\u5220\u9664\u3002\u6211\u4eec\u53d1\u73b0\u5f53 $y$ \u7684\u513f\u5b50\u6570\u91cf\u5927\u4e8e $1$ \u65f6\u53ef\u4ee5\u4efb\u9009\u4e24\u4e2a\u513f\u5b50\uff0c\u513f\u5b50\u6570\u91cf\u4e3a $1$ \u65f6\u53ef\u4ee5\u76f4\u63a5\u9009\u62e9 $y$ \u548c\u90a3\u4e2a\u513f\u5b50\u3002\uff08\u5bf9 $z$ \u7684\u8ba8\u8bba\u540c\u7406\uff0c\u56e0\u4e3a $z$ \u662f $y$ \u7684\u975e\u8d1f\u7ea7\u7956\u5148\uff09\n\n\uff08\u611f\u89c9\u4e0a\u9762\u8bf4\u4e86\u4e00\u5806\u5e9f\u8bdd\uff09\n\n\u7531\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff08$k<mx$ \u4e14 $2\\text{dep}_y\\leqslant mx-k$\uff09\u4e0d\u4f1a\u8ba9\u91cd\u5fc3\u79fb\u52a8\uff0c\u6240\u4ee5\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u91cd\u65b0\u5bfb\u627e\u91cd\u5fc3\uff0c\u4e8e\u662f\u6211\u4eec\u7528 $\\text{set}$ \u6a21\u62df\u4e0a\u8ff0\u8fc7\u7a0b\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n## \u4ee3\u7801\n\n\u611f\u8c22 [Displace_ ](https://www.luogu.com.cn/user/522373) \u7684 hack \u6570\u636e\u3002\n\n```cpp\n#include<stdio.h>\n#include<set>\n#include<vector>\nusing namespace std;\nconst int maxn=100005;\nint n,cen,mnsz;\nint sz[maxn],bel[maxn],used[maxn],dep[maxn],out[maxn],fa[maxn];\nlong long k,mn,mx,rst;\nvector<int>t,dfn,v[maxn],w[maxn];\nset< pair<int,int> >sons,s[maxn];\nvoid dfs1(int x,int last){\n\tint mxsz=0;\n\tsz[x]=1;\n\tfor(int i=0;i<v[x].size();i++)\n\t\tif(v[x][i]!=last)\n\t\t\tdfs1(v[x][i],x),sz[x]+=sz[v[x][i]],mxsz=max(mxsz,sz[v[x][i]]);\n\tmxsz=max(mxsz,n-sz[x]);\n\tif(mnsz>mxsz)\n\t\tmnsz=mxsz,cen=x;\n\tif(last)\n\t\tmn+=sz[x]%2,mx+=min(sz[x],n-sz[x]);\n}\nvoid dfs2(int x,int last,int b){\n\tsz[x]=1,dep[x]=dep[last]+1,fa[x]=last,bel[x]=b;\n\tfor(int i=0;i<v[x].size();i++)\n\t\tif(v[x][i]!=last)\n\t\t\tout[x]++,dfs2(v[x][i],x,b),sz[x]+=sz[v[x][i]];\n\tif(sz[x]&&out[x]>0)\n\t\ts[b].insert(make_pair(dep[x],x));\n}\nvoid dfs3(int x,int last){\n\tif(used[x]==0)\n\t\tdfn.push_back(x);\n\tfor(int i=0;i<v[x].size();i++)\n\t\tif(v[x][i]!=last)\n\t\t\tdfs3(v[x][i],x);\n}\nvoid del(int x){\n\tused[x]=1,out[fa[x]]--;\n\tif(out[fa[x]]==0)\n\t\ts[bel[x]].erase(make_pair(dep[fa[x]],fa[x]));\n}\nvoid match(int x){\n\tt.clear();\n\twhile(t.size()<2&&w[x].size()){\n\t\tif(w[x].back()!=fa[x]&&used[w[x].back()]==0)\n\t\t\tt.push_back(w[x].back());\n\t\tw[x].pop_back();\n\t}\n\tif(used[x]==0)\n\t\tt.push_back(x);\n\tprintf(\"%d %d\\n\",t[0],t[1]),del(t[0]),del(t[1]);\n}\nint main(){\n\tscanf(\"%d%lld\",&n,&k);\n\tfor(int i=1,x,y;i<n;i++)\n\t\tscanf(\"%d%d\",&x,&y),v[x].push_back(y),v[y].push_back(x),w[x].push_back(y),w[y].push_back(x);\n\tmnsz=n+1,dfs1(1,0);\n\tif(mn>k||mx<k||(mx-k)&1){\n\t\tputs(\"NO\");\n\t\treturn 0;\n\t}\n\tputs(\"YES\");\n\tfor(int i=0;i<v[cen].size();i++){\n\t\tdfs2(v[cen][i],cen,v[cen][i]);\n\t\tif(sz[v[cen][i]]>1)\n\t\t\tsons.insert(make_pair(sz[v[cen][i]],v[cen][i]));\n\t}\n\trst=mx-k;\n\twhile(rst){\n\t\tint x=sons.rbegin()->second,y=s[x].rbegin()->second;\n\t\tsons.erase(make_pair(sz[x],x));\n\t\tif(2*dep[y]>rst){\n\t\t\ty=s[x].lower_bound(make_pair((int)(rst/2),0))->second,rst-=2*dep[y],match(y);\n\t\t\tbreak;\n\t\t}\n\t\trst-=2*dep[y],match(y),sz[x]-=2;\n\t\tif(sz[x]>1)\n\t\t\tsons.insert(make_pair(sz[x],x));\n\t}\n\tdfs3(cen,0);\n\tfor(int i=0;i<dfn.size()/2;i++)\n\t\tprintf(\"%d %d\\n\",dfn[i],dfn[dfn.size()/2+i]);\n\treturn 0;\n}\n```",
        "postTime": 1633697167,
        "uid": 35754,
        "name": "Verdandi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1396E\u3010Distance Matching\u3011"
    },
    {
        "content": "> [CF1396E Distance Matching](https://www.luogu.com.cn/problem/CF1396E)\n\n\u633a\u6709\u8da3\u7684\u9898\u76ee\u3002\n\n\u8bbe\u4e00\u6761\u8fb9\u4e24\u7aef\u5927\u5c0f\u5206\u522b\u4e3a $a, b$\uff0c\u5219\u5b83\u81f3\u591a\u88ab\u8986\u76d6 $\\min(a, b)$ \u6b21\uff0c\u81f3\u5c11\u88ab\u8986\u76d6 $a\\bmod 2$ \u6b21\u3002\n\n- \u4e0b\u754c\uff1a\u76f4\u63a5\u8d2a\u5fc3\u5339\u914d\u5bb9\u6613\u8bc1\u660e\u53ef\u4ee5\u53d6\u5230\u4e0b\u754c $\\sum (a\\bmod 2)$\u3002\n- \u4e0a\u754c\uff1a\u4ee5\u91cd\u5fc3 $R$ \u4e3a\u6839\uff0c\u6bcf\u6761\u8fb9\u7684 $\\min(a, b)$ \u5c31\u662f\u8fd9\u6761\u8fb9\u8f83\u6df1\u7aef\u70b9\u7684\u5b50\u6811\u5927\u5c0f $sz_e$\u3002\u53ea\u8981\u4efb\u610f\u5339\u914d\u70b9\u5bf9\u4e0d\u5c5e\u4e8e $R$ \u7684\u540c\u4e00\u5b50\u6811\uff0c\u90a3\u4e48\u6bcf\u6761\u8fb9\u88ab\u8986\u76d6 $sz_e$ \u6b21\uff0c\u53d6\u5230\u4e0a\u754c $\\sum sz_e$\u3002\u56e0\u4e3a\u91cd\u5fc3\u7684\u6bcf\u4e2a\u513f\u5b50\u5b50\u6811\u5927\u5c0f\u4e0d\u8d85\u8fc7 $\\dfrac n 2$\uff0c\u6839\u636e\u7ecf\u5178\u7ed3\u8bba\uff0c\u4e0d\u65ad\u9009\u5927\u5c0f\u6700\u5927\u7684\u4e24\u4e2a\u5b50\u6811\u4efb\u610f\u8282\u70b9\u5339\u914d\u5e76\u5220\u53bb\uff0c\u603b\u80fd\u6784\u9020\u51fa\u5408\u6cd5\u65b9\u6848\u3002\n\n\u56e0\u4e3a\u6bcf\u6761\u8fb9\u5bf9\u7b54\u6848\u8d21\u732e\u7684\u5947\u5076\u6027\u5df2\u77e5\uff0c\u6240\u4ee5\u5339\u914d\u5927\u5c0f\u7684\u5947\u5076\u6027\u5df2\u77e5\u3002\u663e\u7136\uff0c\u82e5 $k$ \u5c0f\u4e8e\u4e0b\u754c\u6216\u5927\u4e8e\u4e0a\u754c\u6216\u5947\u5076\u6027\u4e0d\u7b26\uff0c\u5219\u65e0\u89e3\u3002\n\n\u8003\u8651\u8c03\u6574\u6cd5\uff0c\u4ece\u4e0a\u754c\u5f00\u59cb\uff0c\u4e0d\u65ad\u7528\u53d6\u5230\u4e0b\u754c\u7684\u5339\u914d\u66ff\u6362\u5176\u4e2d\u7684\u5339\u914d\u3002\u4e00\u4e2a\u70b9\u5728\u6700\u5927\u6743\u5339\u914d\u4e2d\u7684\u8d21\u732e\u4e3a\u5b83\u7684\u6df1\u5ea6\uff0c\u5982\u679c $u$ \u5339\u914d $v$\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u603b\u8d21\u732e\u76f8\u8f83\u4e8e\u5b83\u4eec\u5728\u6700\u5927\u6743\u5339\u914d\u91cd\u7684\u8d21\u732e\u4e4b\u548c\uff0c\u4f1a\u51cf\u5c0f $2dep_{lca(u, v)}$\uff0c\u5176\u4e2d $dep_R = 0$\u3002\u8bbe\u4efb\u610f\u4e00\u7ec4\u53d6\u5230\u4e0b\u754c\u7684\u5339\u914d\u4e3a $M$\uff0c\u6211\u4eec\u5c1d\u8bd5\u4e0d\u65ad\u52a0\u5165 $M$ \u4e2d\u7684\u5339\u914d\uff0c\u51cf\u5c0f\u6bcf\u4e2a\u70b9\u7684\u8d21\u732e\u3002\n\n\u4e3a\u4fdd\u8bc1\u4efb\u610f\u65f6\u523b\u6bcf\u68f5\u5b50\u6811\u7684\u5269\u4f59\u5927\u5c0f\u4e0d\u8d85\u8fc7\u5269\u4f59\u8282\u70b9\u7684\u4e00\u534a\uff0c\u6211\u4eec\u9009\u62e9\u5269\u4f59\u5927\u5c0f\u6700\u5927\u7684\u90a3\u68f5\u5b50\u6811\u8fdb\u884c\u8c03\u6574\u3002\u8c03\u6574\u65b9\u6848\u5f88\u591a\uff0c\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u9009\uff1f\u6211\u4eec\u53d1\u73b0\uff0c\u9009\u62e9\u4e24\u4e2a\u70b9\u5339\u914d\u51cf\u5c0f\u7684\u8d21\u732e\u4e0d\u8d85\u8fc7\u5b83\u4eec\u5404\u81ea\u7684\u6df1\u5ea6\uff0c\u6240\u4ee5\u53ea\u8981\u6211\u4eec\u6bcf\u6b21\u9009\u62e9\u8d21\u732e\u51cf\u5c0f\u503c\u6700\u5927\u7684\u4e00\u7ec4\u5339\u914d\uff0c\u90a3\u4e48\u5230\u6700\u540e\u65f6\u523b\uff0c\u5339\u914d\u6743\u503c\u9700\u8981\u51cf\u5c0f\u7684\u503c $2a$ \u5c0f\u4e8e\u5f53\u524d\u8d21\u732e\u51cf\u5c0f\u503c\u6700\u5927\u7684\u5339\u914d $(u, v)$ \u65f6\uff0c$u$ \u7684\u6df1\u5ea6\u4e3a $a$ \u7684\u7956\u5148 $x$ \u4e00\u5b9a\u6ca1\u6709\u88ab\u5339\u914d\u6389\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 $u$ \u548c $x$ \u5339\u914d\u8fbe\u5230\u76ee\u6807\u3002\n\n\u901a\u8fc7\u4e0a\u8ff0\u6784\u9020\uff0c\u6211\u4eec\u4e00\u5b9a\u80fd\u5728 $k$ \u4e0d\u5c0f\u4e8e\u4e0b\u754c\uff0c\u4e0d\u5927\u4e8e\u4e0a\u754c\u4e14\u5947\u5076\u6027\u7b26\u5408\u7684\u6761\u4ef6\u4e0b\uff0c\u6784\u9020\u51fa\u4e00\u7ec4\u5408\u6cd5\u5339\u914d\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u89c6\u5b9e\u73b0\u7cbe\u7ec6\u7a0b\u5ea6\uff0c\u4ece\u7ebf\u6027\u5230\u7ebf\u6027\u5bf9\u6570\u4e0d\u7b49\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define TIME 1e3 * clock() / CLOCKS_PER_SEC\nusing ll = long long;\nusing uint = unsigned int;\nusing ld = long double;\n// using lll = __int128;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nusing ull = unsigned long long;\ninline ll read() {\n  ll x = 0, sgn = 0;\n  char s = getchar();\n  while(!isdigit(s)) sgn |= s == '-', s = getchar();\n  while(isdigit(s)) x = x * 10 + s - '0', s = getchar();\n  return sgn ? -x : x;\n}\ninline void print(ll x) {\n  if(x < 0) return putchar('-'), print(-x);\n  if(x >= 10) print(x / 10);\n  putchar(x % 10 + '0');\n}\nbool Mbe;\nconstexpr int N = 1e5 + 5;\nint n, R, mch[N];\nll k, sup, inf;\nint dep[N], sz[N], mx[N], fa[N], f[N];\nvector<int> e[N], pt[N];\nvector<pii> ans;\nstruct dat {\n  int u, v, w;\n  bool operator < (const dat &x) const {return w < x.w;}\n};\nvector<dat> buc[N];\nvoid findroot(int id, int ff, int tot) {\n  sz[id] = 1;\n  for(int it : e[id]) {\n    if(it == ff) continue;\n    findroot(it, id, tot), sz[id] += sz[it];\n    mx[id] = max(mx[id], sz[it]);\n  }\n  mx[id] = max(mx[id], tot - sz[id]);\n  if(mx[id] < mx[R]) R = id;\n}\nvoid init(int id, int ff, int anc) {\n  fa[id] = ff, sz[id] = 1;\n  sup += (dep[id] = dep[ff] + 1);\n  f[id] = id;\n  for(int it : e[id]) {\n    if(it == ff) continue;\n    init(it, id, anc), sz[id] += sz[it];\n    if(f[it] && f[id]) buc[anc].push_back({f[id], f[it], dep[id]}), f[id] = 0;\n    else if(f[it]) f[id] = f[it];\n  }\n  inf += sz[id] & 1;\n}\nvoid build(int id, int ff, int anc) {\n  if(!mch[id]) pt[anc].push_back(id);\n  for(int it : e[id]) {\n    if(it == ff) continue;\n    build(it, id, anc);\n  }\n}\nbool Med;\nint main() {\n  fprintf(stderr, \"%.3lf MB\\n\", (&Mbe - &Med) / 1048576.0);\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"1.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"1.out\", \"w\", stdout);\n  #endif\n  cin >> n >> k;\n  for(int i = 1; i < n; i++) {\n    int u = read(), v = read();\n    e[u].push_back(v), e[v].push_back(u);\n  }\n  mx[0] = N, findroot(1, 0, n);\n  set<pii> s;\n  for(int it : e[R]) {\n    init(it, R, it);\n    s.insert({sz[it], it});\n    sort(buc[it].begin(), buc[it].end());\n  }\n  if(k > sup || k - sup & 1 || k < inf) puts(\"NO\"), exit(0);\n  puts(\"YES\");\n  auto append = [&](int u, int v) {\n    mch[u] = mch[v] = 1;\n    ans.push_back({u, v});\n  };\n  k = sup - k;\n  while(k > 0) {\n    pii t = *--s.end();\n    s.erase(--s.end());\n    int id = t.second;\n    dat dec = buc[id].back();\n    buc[id].pop_back();\n    if(k >= 2 * dec.w) {\n      k -= 2 * dec.w;\n      append(dec.u, dec.v);\n      t.first -= 2, s.insert(t);\n    }\n    else {\n      int ind = -1;\n      if(dep[dec.u] == dec.w) ind = dec.u;\n      else if(dep[dec.v] == dec.w) ind = dec.v;\n      else ind = fa[dep[dec.u] < dep[dec.v] ? dec.u : dec.v]; // add check dep[dec.u] < dep[dec.v]\n      while(dec.w * 2 > k) ind = fa[ind], dec.w--;\n      k = 0, append(dec.u, ind);\n    }\n  }\n  s.clear();\n  pt[R].push_back(R), s.insert({1, R});\n  for(int it : e[R]) {\n    build(it, R, it);\n    if(!pt[it].empty()) s.insert({pt[it].size(), it});\n  }\n  while(!s.empty()) {\n    pii x = *--s.end(), y = *----s.end();\n    s.erase(--s.end()), s.erase(--s.end());\n    append(pt[x.second].back(), pt[y.second].back());\n    pt[x.second].pop_back(), pt[y.second].pop_back();\n    if(--x.first) s.insert(x);\n    if(--y.first) s.insert(y);\n  }\n  for(pii it : ans) cout << it.first << \" \" << it.second << \"\\n\";\n  cerr << TIME << \" ms\\n\";\n  return 0;\n}\n/*\n2022/10/12\nauthor: Alex_Wei\nstart coding at 7:52\nfinish debugging at 13:57\n*/\n```",
        "postTime": 1665557067,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1396E Distance Matching"
    },
    {
        "content": "## \u9898\u610f  \n\u6709\u4e00\u68f5\u5927\u5c0f\u4e3a $n$\uff08$n$ \u662f\u5076\u6570\uff09\u7684\u6811\uff0c\u4f60\u9700\u8981\u628a\u8fd9 $n$ \u4e2a\u70b9\u5212\u5206\u6210\u82e5\u5e72\u4e2a\u4e8c\u5143\u7ec4 $(a_1,b_1),(a_2,b_2) \\cdots ,(a_{n/2},b_{n/2})$\uff0c\u4f7f\u5f97 $\\sum_{i=1}^{n/2} \\mathrm{dist}(a_i,b_i)=k$\uff0c\u6216\u8005\u8bf4\u660e\u4e0d\u53ef\u80fd\u3002  \n\n## \u9898\u89e3  \n\n\u597d\u9898\uff0c\u611f\u8c22 [Clovers](https://www.luogu.com.cn/user/69107) \u63a8\u6b64\u9898\u3002  \n\n\u987a\u4fbf\u5410\u69fd\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u8981\u5f00 $n \\le 10^5$\uff0c\u8fd9\u9898\u5173\u952e\u6b65\u9aa4\u5728\u6784\u9020\u5427\uff0c\u7528 stl \u53bb\u7ef4\u62a4\u5c31\u589e\u52a0\u4e86\u4e00\u5927\u5806\u7801\u91cf\uff0c\u800c\u4e14\u8c03\u8bd5\u8d77\u6765\u53ca\u5176\u6076\u5fc3/tuu\u3002  \n\n-------------\n\n\u9996\u5148\u8003\u8651\u8ba1\u7b97\u51fa\u7b54\u6848\u7684\u4e0a\u754c\u548c\u4e0b\u754c $\\mathrm{mx,mn}$\u3002  \n\u6709\u4e2a\u663e\u800c\u6613\u89c1\u7684\u7ed3\u8bba\uff0c$\\mathrm {mn} \\le k \\le \\mathrm {mx} $\uff0c\u4e14 $\\mathrm {mn,mx},k$ \u5947\u5076\u6027\u76f8\u540c\u3002  \n\u524d\u8005\u663e\u7136\uff0c\u540e\u8005\u5c31\u8003\u8651\u968f\u4fbf\u94a6\u5b9a\u4e00\u4e2a\u70b9\u4e3a\u6839\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a $\\sum_{i=1}^n \\mathrm {dep}_i - 2 \\sum _{i=1}^{n/2} \\mathrm {dep}_{\\mathrm{lca}(a_i,b_i)}$\uff0c\u663e\u7136\u65e0\u8bba\u600e\u4e48\u5206\u914d $(a_i,b_i)$ \u5947\u5076\u6027\u90fd\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002  \n\n-----------------\n\n\u63a5\u4e0b\u6765\u8ba1\u7b97 $\\mathrm {mn,mx}$\u3002  \n\u8003\u8651\u8ba1\u7b97\u6bcf\u4e00\u6761\u8fb9\u7684\u8d21\u732e\u3002  \n\u5047\u5982\u4e00\u6761\u8fb9\u628a\u6811\u5206\u6210\u4e86 $\\mathrm{siz},n-\\mathrm{siz}$ \u4e24\u90e8\u5206\u3002  \n\u90a3\u4e48\u6700\u591a\u7ecf\u8fc7\u6b21\u6570\u662f $\\min(\\mathrm{siz},n-\\mathrm{siz})$\uff0c\u6700\u5c11\u7ecf\u8fc7\u6b21\u6570\u662f $\\mathrm{siz} \\bmod 2$\u3002  \n\n$\\min$ \u4e0d\u662f\u5f88\u597d\u5904\u7406\uff0c\u6211\u4eec\u8003\u8651\u4ee5\u91cd\u5fc3 $G$ \u4e3a\u6839\uff0c\u8fd9\u6837\u6240\u6709\u5b50\u6811\u90fd\u6709 $n- \\mathrm{siz}\\ge \\mathrm{siz}$\u3002  \n\n\u8fd9\u6837\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u7c97\u7565\u7684\u4e0a\u754c\u548c\u4e0b\u754c\u4f30\u8ba1 $\\mathrm {mx}= \\sum _{i=1}^n[i \\not = G] \\mathrm{siz}_i,\\mathrm{mn}= \\sum_{i=1}^n [i\\not = G] \\mathrm{siz}_i \\bmod 2$\u3002  \n\n\u663e\u7136\u8fd9\u4e2a\u4e0a\u754c\u548c\u4e0b\u754c\u662f\u53ef\u4ee5\u8fbe\u5230\u7684\u3002  \n\n\u4e0a\u754c\u7684\u8bdd\uff0c\u6211\u4eec\u6bcf\u6b21\u53d6\u51fa $G$ \u7684\u513f\u5b50\u4e2d $\\mathrm{siz}$ \u6700\u5927\u7684\u4e24\u68f5\u5b50\u6811\u4e2d\u7684\u5404 $1$ \u4e2a\u70b9\u8fdb\u884c\u914d\u5bf9\uff0c\u7136\u540e\u5220\u53bb\u4ed6\u4eec\uff0c\u76f4\u5230\u53ea\u5269\u6700\u540e $1$ \u4e2a\u70b9\uff0c\u548c $G$ \u914d\u5bf9\u3002  \n\n\u4e0b\u754c\u7684\u8bdd\uff0c\u6211\u4eec\u6bcf\u6b21\u53d6\u51fa\u4e24\u4e2a $\\mathrm{lca}$ \u6df1\u5ea6\u6700\u6df1\u7684\u70b9\u8fdb\u884c\u914d\u5bf9\uff0c\u7136\u540e\u5220\u53bb\u4ed6\u4eec\u5373\u53ef\u3002\n\n-----------------\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u53ea\u8981\u6ee1\u8db3\uff0c$\\mathrm {mn} \\le k \\le \\mathrm {mx} $\uff0c\u4e14 $\\mathrm {mn,mx},k$ \u5947\u5076\u6027\u76f8\u540c\uff0c\u5c31\u4e00\u5b9a\u5b58\u5728\u7b54\u6848\uff0c\u8bc1\u660e\u8fc7\u7a0b\u5c31\u662f\u6784\u9020\u8fc7\u7a0b\u3002  \n\n\u6784\u9020\u8fc7\u7a0b\uff1a  \n- \u6700\u5f00\u59cb\u8bbe $\\mathrm{now=mx}$\u3002  \n- \u6bcf\u6b21\u5728 $G$ \u7684\u513f\u5b50\u4e2d $\\mathrm{siz}$ \u6700\u5927\u7684\u5b50\u6811\u5185\uff0c\u53d6\u51fa $\\mathrm{lca}$ \u6df1\u5ea6\u6700\u5927\u7684\u4e00\u4e2a\u70b9\u5bf9\u8fdb\u884c\u914d\u5bf9\uff0c\u5e76\u4e14\u5220\u9664\u8fd9\u4e24\u4e2a\u70b9\uff0c\u66f4\u65b0 $G$ \u7684\u513f\u5b50\u7684 $\\mathrm{siz}$\u3002  \n- \u5982\u679c\u8bbe $\\mathrm{dep}_G =0$\uff0c\u90a3\u4e48\u7b54\u6848\u51cf\u5c11\u4e86 $2 \\mathrm{dep_{lca}} $\u3002\u539f\u56e0\uff1a\u672c\u6765\u8fd9\u4e24\u4e2a\u70b9\u4f1a\u8ddf $G$ \u7684\u5176\u4ed6\u513f\u5b50\u7684\u5b50\u6811\u8fdb\u884c\u914d\u5bf9\uff0c\u4f1a\u591a\u7ecf\u8fc7 $2 \\mathrm{dep_{lca}} $ \u7684\u957f\u5ea6\uff0c\u73b0\u5728\u5c31\u51cf\u6389\u4e86\u3002  \n- \u5982\u679c\u67d0\u4e00\u6b21\u51cf\u4e4b\u540e $\\mathrm{now}<=k$ \u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u8fdb\u884c\u4e0a\u4e00\u6b21\u914d\u5bf9\u548c\u5220\u9664\u7684\u64cd\u4f5c\u3002\u4ee4 $\\mathrm{now}$ \u4e3a\u51cf\u4e4b\u524d\u7684 $\\mathrm{now}$\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a $\\mathrm{now-2dep}=k$ \u7684 $\\mathrm{lca}$\u3002\u8fd9\u4e2a\u53ea\u8981\u8ba9\u539f\u6765\u627e\u5230\u7684\u70b9\u4e0d\u505c\u5730\u5f80\u4e0a\u8df3\u7236\u4eb2\u5c31\u884c\u4e86\uff0c\u5e76\u628a\u5b83\u548c\u5b83\u7684\u4e00\u4e2a\u540e\u4ee3\u8fdb\u884c\u914d\u5bf9\u5e76\u5220\u9664\u3002  \n- \u63a5\u4e0b\u6765\u53ea\u9700\u8981\u5c06 $G$ \u7684\u6240\u6709\u513f\u5b50\u7684\u5b50\u6811\u5185\u7684\u70b9\u8fdb\u884c\u4e24\u4e24\u914d\u5bf9\uff0c\u4f7f\u5f97\u6bcf\u5bf9\u70b9\u7684 $\\mathrm{lca}$ \u90fd\u662f $G$\u3002\u90a3\u4e48\u53ea\u9700\u8981\u6bcf\u6b21\u627e\u5230 $\\mathrm{siz}$ \u6700\u5927\u7684\u4e24\u68f5\u5b50\u6811\uff0c\u5404\u53d6\u51fa\u4e00\u4e2a\u70b9\u8fdb\u884c\u914d\u5bf9\u5e76\u5220\u9664\u5373\u53ef\u3002  \n- \u7531\u4e8e\u6211\u4eec\u4e4b\u524d\u6bcf\u6b21\u90fd\u662f\u53d6 $G$ \u7684\u513f\u5b50\u4e2d $\\mathrm{siz}$ \u6700\u5927\u7684\u5b50\u6811\u8fdb\u884c $\\mathrm{siz \\gets siz-2}$ \u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u8fdb\u884c\u8de8\u8d8a $G$ \u7684\u4e24\u4e24\u914d\u5bf9\u65f6\uff0c\u4e0d\u4f1a\u6709\u4e00\u4e2a\u5b50\u6811\u7684 $\\mathrm{siz}$ \u6bd4\u5176\u4ed6\u5b50\u6811\u7684 $\\mathrm{siz}$ \u52a0\u8d77\u6765\u8fd8\u5927\uff0c\u56e0\u6b64\u8fd9\u6837\u4e24\u4e24\u914d\u5bf9\u5fc5\u7136\u80fd\u591f\u6210\u529f\u3002\n\n\u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u5927\u81f4\u4e0a\u505a\u5b8c\u4e86\u3002\n\n--------------\n## \u4ee3\u7801\n\n\u597d\u6076\u5fc3\u554a/tuu\u3002\n\n\u5982\u679c\u5141\u8bb8 $O(n^2)$ \u8fc7\u6211\u5927\u53ef\u4ee5\u6bcf\u6b21\u904d\u5386\u6bcf\u4e00\u68f5\u5b50\u6811\u91cd\u65b0\u6c42\u4e00\u904d\uff0c\u4f46\u662f\u73b0\u5728\u4e0d\u5f97\u4e0d\u641e\u4e00\u4e9b\u5806\u548c `set` \u6765\u5feb\u901f\u5b58\u50a8\u4fe1\u606f\u3002\n\n\u8fd9\u662f\u6211\u7684\u5783\u573e\u5b9e\u73b0\uff0c\u52a0\u4e86\u70b9\u6ce8\u91ca\uff1a  \n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define rd(x) x=read()\n#define wt(x) write(x)\nusing namespace std;\nconst int N=1e5+5;\nconst int M=(1<<22)+5;\nconst int K2=13;\nconst int mod=998244353;\nint read(){int x=0;char ch=getchar();while(ch>'9'||ch<'0'){ch=getchar();}while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}return x;}\nvoid write(int x){if (x<0){putchar('-');x=-x;}if (x>=10)write(x/10);putchar(x%10+'0');}\nset<int> T[N];\nint n,k,tot;\nint dep[N],sz[N],mxsz[N],Fa[N];\nvector<pii> ans;\nint G,mx,mn;\nbool vis[N];\nvoid getG(int u,int fa)//\u6c42\u91cd\u5fc3\u8fc7\u7a0b\n{\n    sz[u]=1,mxsz[u]=0;\n    for (int v:T[u]) if (v!=fa) getG(v,u),sz[u]+=sz[v],mxsz[u]=max(mxsz[u],sz[v]);\n    mxsz[u]=max(mxsz[u],n-sz[u]);\n    if (mxsz[u]<mxsz[G]) G=u;\n}\nvoid DFS(int u,int fa){Fa[u]=fa;sz[u]=1;dep[u]=dep[fa]+1;for (int v:T[u]) if (v!=fa) DFS(v,u),sz[u]+=sz[v];}//\u4ee5\u91cd\u5fc3\u4e3a\u6839\u53bb dfs \u51fa siz \u548c dep\nint now;\nstruct subtree{int id;bool operator<(const subtree &o)const{return sz[id]<sz[o.id];}};//\u5b58\u50a8 G \u7684\u513f\u5b50\uff0c\u4ee5\u5b50\u6811\u5927\u5c0f\u6392\u5e8f\npriority_queue<subtree> Q;\nstruct lca{int x;bool operator<(const lca &o)const{return dep[x]==dep[o.x]?x<o.x:dep[x]<dep[o.x];}};//\u5b58\u50a8\u53ef\u4ee5\u4f5c\u4e3a lca \u7684\u70b9\uff0c\u6309\u7167\u6df1\u5ea6\u6392\u5e8f\uff0c\u6ce8\u610f\u6df1\u5ea6\u76f8\u540c\u7684\u65f6\u5019\u4e5f\u8981\u6709\u533a\u5206\u5927\u5c0f\uff0c\u4e0d\u7136\u7528 set \u4f1a\u628a\u6df1\u5ea6\u76f8\u540c\u7684\u70b9\u53ea\u4fdd\u7559\u4e00\u4e2a\uff0c\u5982\u679c\u7528 multiset erase \u53ef\u80fd\u4f1a\u6bd4\u8f83\u9ebb\u70e6\nset<lca> S[N];\nvoid del(int u,int v){T[u].erase(v);T[v].erase(u);}//\u5220\u9664\u4e00\u6761\u8fb9\nvector<int> A[N];\nint la1,la2;\nvoid getlca(int u,int id)\n{\n    //\u627e\u5230\u6bcf\u68f5\u5b50\u6811\u4e2d\u53ef\u4ee5\u4f5c\u4e3a lca \u7684\u70b9\uff08\u5373\u975e\u53f6\u5b50\u8282\u70b9\uff09  \n    int cnt=0;\n    for (int v:T[u]) if (v!=Fa[u]) getlca(v,id),cnt++;\n    if (cnt) S[id].insert({u});\n}\nvoid dfs(int u,int id)\n{\n    //\u627e\u5230\u6bcf\u68f5\u5b50\u6811\u4e2d\u6709\u54ea\u4e9b\u70b9\u8981\u8fdb\u884c\u914d\u5bf9\n    if (u!=la1 && u!=la2) A[id].push_back(u);\n    for (int v:T[u]) if (v!=Fa[u]) dfs(v,id);\n}\nvoid merge(int i,int j)\n{\n    //\u914d\u5bf9 i \u5b50\u6811\u548c j \u5b50\u6811\u4e2d\u7684\u4e00\u5bf9\u70b9\n    int x=A[i].back(),y=A[j].back();\n    ans.push_back({x,y});\n    A[i].pop_back();A[j].pop_back();\n    sz[i]--;sz[j]--;if (sz[i]) Q.push({i});if (sz[j]) Q.push({j});\n}\nvoid DOIT()\n{\n    //\u6700\u540e\u7684\u8fde\u8fb9\n    //\u6bcf\u6b21\u627e siz \u6700\u5927\u7684\u4e24\u4e2a\u8fde\u8fb9\uff0c\u4e00\u5b9a\u80fd\u8fde\u5b8c\n    for (int v:T[G]) dfs(v,v);\n    while (Q.size()>=2)\n    {\n        int i=Q.top().id;Q.pop();\n        int j=Q.top().id;Q.pop();\n        merge(i,j);\n    }\n    ans.push_back({G,A[Q.top().id].back()});\n    puts(\"YES\");\n    for (pii p:ans) cout<<p.fi<<\" \"<<p.se<<\"\\n\";\n    exit(0);\n}\nvoid solve()\n{\n    int t=Q.top().id;Q.pop();\n    if (sz[t]==1) DOIT();//\u6211\u7684\u4ee3\u7801\u5982\u679c\u4e0d\u52a0\u8fd9\u4e2a\u4f1a\u88ab\u83ca\u82b1\u5361 RE\n    sz[t]-=2;\n    int u=(*S[t].rbegin()).x;\n    if (now-2*dep[u]<=k)\n    {\n        if (now==k) {sz[t]+=2;Q.push({t});DOIT();}\n        int d=(now-k)/2;//\u9700\u8981\u7684\u5b9e\u9645\u6df1\u5ea6\n        vector<int> son;\n        for (int v:T[u]) if (v!=Fa[u]) {son.push_back(v);if (son.size()==1) break;}\n        //\u627e\u5230\u4e00\u4e2a\u540e\u4ee3\n        while (dep[u]>d) u=Fa[u];\n        ans.push_back({u,son[0]});\n        la1=u;la2=son[0];if (sz[t]) Q.push({t});\n        DOIT();\n    } else \n    {\n        now-=2*dep[u];\n        vector<int> son;\n        for (int v:T[u]) if (v!=Fa[u]){son.push_back(v);if (son.size()==2) break;}\n        if (son.size()==1)\n        {\n            //\u5982\u679c\u53ea\u6709 1 \u4e2a\u5b69\u5b50\uff0c\u5c31\u914d\u5bf9\u81ea\u8eab\u548c\u5b69\u5b50\uff0c\u5220\u53bb\u8fd9\u4e24\u4e2a\u70b9\uff0c\u5e76\u4e14\u5224\u65ad\u7236\u4eb2\u662f\u5426\u53d8\u6210\u53f6\u5b50\n            ans.push_back({u,son[0]});\n            del(u,son[0]);del(Fa[u],u);\n            S[t].erase({u});\n            if (T[Fa[u]].size()==1) S[t].erase({Fa[u]});\n        } else \n        {\n            //\u5982\u679c\u6709 2 \u4e2a\u4ee5\u4e0a\u7684\u5b69\u5b50\uff0c\u5c31\u914d\u5bf9 2 \u4e2a\u5b69\u5b50\uff0c\u5220\u53bb\u8fd9\u4e24\u4e2a\u70b9\uff0c\u5224\u65ad\u81ea\u8eab\u662f\u5426\u53d8\u6210\u53f6\u5b50\n            ans.push_back({son[0],son[1]});\n            del(u,son[0]);del(u,son[1]);\n            if (T[u].size()==1) S[t].erase({u});\n        }\n        \n    }\n    if (sz[t]) Q.push({t});//\u8bb0\u5f97\u628a\u5b50\u6811\u91cd\u65b0 push \u8fdb\u53bb\n}\nsigned main()\n{\n    rd(n);rd(k);\n    for (int i=1,x,y;i<n;i++) rd(x),rd(y),T[x].insert(y),T[y].insert(x);\n    mxsz[0]=n;getG(1,0);for (int i=1;i<=n;i++) sz[i]=0;\n    dep[0]=-1;DFS(G,0);\n    for (int i=1;i<=n;i++) if (i!=G) mn+=sz[i]%2,mx+=sz[i];\n    if (k<mn || k>mx || (k+mn)%2==1) {puts(\"NO\");return 0;}\n    for (int v:T[G]) getlca(v,v);for (int v:T[G]) Q.push({v});\n    now=mx;while (1) solve();\n}\n/*\n*/\n```",
        "postTime": 1634264553,
        "uid": 167006,
        "name": "WitheredZeal",
        "ccfLevel": 0,
        "title": "CF1396E"
    },
    {
        "content": "\u9898\u89e3\u533a\u8c8c\u4f3c\u90fd\u662f\u4ece max \u5411 min \u6784\u9020\u7684\uff0c\u7ed9\u4e00\u79cd\u4ece min \u5230 max \u7684\u6784\u9020\u6cd5\u3002\n\n\u4e00\u9053\u5f88\u597d\u7684\u6784\u9020\u9898\u3002\n\n## step1\uff1a\u786e\u5b9a\u4f55\u65f6\u6709\u89e3\n\n\u6839\u636e\u7ecf\u5178\u7ed3\u8bba\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u7684\u4e0a\u4e0b\u754c\uff08\u8bbe $a,b$ \u5206\u522b\u4e3a\u4e00\u6761\u8fb9\u4e24\u4fa7\u7684\u70b9\u4e2a\u6570\uff09\uff1a\n\n- \u6bcf\u6761\u8fb9\u81f3\u5c11\u88ab\u7ecf\u8fc7 $a\\bmod{2}$ \u6b21\uff0c\u5373\u7b54\u6848\u4e0b\u754c\u4e3a $\\sum a\\bmod{2}$\uff1b\n- \u6bcf\u6761\u8fb9\u81f3\u591a\u88ab\u7ecf\u8fc7 $\\min(a,b)$ \u6b21\uff0c\u5373\u7b54\u6848\u4e0a\u754c\u4e3a $\\sum\\min(a,b)$\u3002\n\n\u540c\u65f6\uff0c\u7531\u4e8e $\\mathrm{dis}(x,y)=\\mathrm{dep}_x+\\mathrm{dep}_y-2\\mathrm{dep}_{\\mathrm{lca}(x,y)}$\uff0c\u6240\u4ee5 $k=-2\\sum \\mathrm{dep}_{\\mathrm{lca}(x,y)}+\\sum \\mathrm{dep}_x$\u3002\u6ce8\u610f\u5230\u540e\u534a\u90e8\u5206\u662f\u56fa\u5b9a\u7684\uff0c\u5373\u8981\u6c42 $k$ \u4e0e\u4e0a\u4e0b\u754c\u540c\u5947\u5076\u3002\n\n\u8003\u8651\u6784\u9020\u51fa\u53ef\u884c\u89e3\u4ee5\u8bc1\u660e\u8be5\u7ed3\u8bba\u3002\n\n## step2\uff1a\u8c03\u6574\u4e0b\u754c\u81f3\u9650\u5236\n\n\u8003\u8651\u5148\u8c03\u6574\u8def\u5f84 LCA \u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u521d\u6b65\u786e\u5b9a\u7b54\u6848\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u53d6\u4efb\u610f\u4e00\u4e2a\u91cd\u5fc3\u4e3a\u6839\u3002\u540c\u65f6\u53ef\u4ee5\u9884\u5148\u8ba1\u7b97\u51fa LCA \u7684\u6df1\u5ea6\u4e4b\u548c\u7684\u603b\u51cf\u5c11\u91cf\u3002\n\n\u5148\u628a\u6700\u5c0f\u89e3\u7684\u6240\u6709\u8def\u5f84\u7684 LCA \u6c42\u51fa\u6765\uff0c\u7136\u540e\u5c06\u5176\u5411\u4e0a\u8c03\u6574\uff0c\u540c\u65f6\u4fdd\u8bc1\u65f6\u523b\u6709\u89e3\u3002\u4e00\u79cd\u7b80\u5355\u7684\u60f3\u6cd5\u662f\uff08**\u8fd9\u4e2a\u505a\u6cd5\u662f\u6709\u95ee\u9898\u7684\uff0c\u6211\u4eec\u5c06\u5728\u7a0d\u540e\u8bf4\u660e**\uff09\uff1a\n\n- \u5c06\u6240\u6709 LCA \u6309\u7167\u6df1\u5ea6\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\uff1b\n- \u5bf9\u4e8e\u5f53\u524d\u7684\u70b9\uff0c\u82e5\u53ef\u4ee5\u5c06\u5176\u63d0\u5230\u6839\u90e8\uff0c\u5219\u76f4\u63a5\u63d0\u4e0a\u53bb\uff1b\n- \u5426\u5219\uff0c\u82e5\u51cf\u5c11\u91cf\u8fd8\u6709 $k$ \u7684\u5269\u4f59\uff0c\u5c06\u5176\u63d0\u5230\u5176 $k$ \u7ea7\u7956\u5148\u5904\u3002\n\n\u8be5\u505a\u6cd5\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u82e5\u5411\u4e0a\u63d0\u7684\u70b9\u90fd\u5728\u67d0\u4e2a\u5b50\u6811\u5185\uff0c\u5c06\u65e0\u6cd5\u4fdd\u8bc1\u91cd\u5fc3\u7684\u6027\u8d28\uff0c\u4ece\u800c\u65e0\u6cd5\u5c06\u8be5\u5b50\u6811\u5185\u7684\u70b9\u548c\u5b50\u6811\u5916\u7684\u70b9\u4e24\u4e24\u914d\u5bf9\u3002\u4e00\u4e2a\u7b80\u5355\u7684 hack \u662f\uff1a\n\n```plain\n8 10\n1 2\n1 3\n2 4\n2 5\n2 6\n3 7\n3 8\n```\n\n\u4fee\u6539\u7684\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff1a\u5148\u5c06\u6240\u6709 LCA \u6839\u636e\u6240\u5728\u5b50\u6811\u5206\u7ec4\uff0c\u7ec4\u5185\u6309\u7167\u6df1\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u6bcf\u6b21\u9009\u53ef\u4ee5\u5339\u914d\u7684\u70b9\u6700\u5c11\u7684\u7ec4\u6267\u884c\u4e00\u6b21\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u5230\u51cf\u5c11\u91cf\u6e05\u96f6\u4e3a\u6b62\u3002\n\n\u6b63\u786e\u6027\u53ef\u7531\u91cd\u5fc3\u7684\u6027\u8d28\u8bc1\u660e\u4e0d\u96be\u3002\n\n## step3\uff1a\u6839\u636e LCA \u8fd8\u539f\u8def\u5f84\n\n\u8fd9\u4e00\u90e8\u5206\u5c31\u5f88\u5e73\u51e1\u4e86\u3002dfs \u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u5b50\u6811\u4e2d\u672a\u5339\u914d\u7684\u70b9\u96c6\uff0c\u82e5\u7b2c $i$ \u4e2a\u70b9\u9700\u8981\u5f53 $cnt_i$ \u6b21 LCA\uff0c\u5219\uff1a\n\n- \u5c06 $\\{i\\}$ \u52a0\u5165\u70b9\u96c6\u7684\u96c6\u5408\uff1b\n- \u6267\u884c $cnt_i$ \u6b21\u4ee5\u4e0b\u64cd\u4f5c\uff1a\u4ece\u70b9\u96c6\u7684\u96c6\u5408\u4e2d\u9009\u51fa\u4e24\u4e2a\u5143\u7d20\u6700\u591a\u7684\uff0c\u5404\u53d6\u51fa\u4e00\u4e2a\u5339\u914d\u3002\n\n\u6700\u540e\u5c06\u5269\u4f59\u7684\u70b9\u96c6\u8fdb\u884c\u5408\u5e76\uff0c\u5411\u4e0a\u7ee7\u7eed\u5904\u7406\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log n)$\u3002\n\n```cpp\ntypedef long long ll;\nconst int max_n = 100000;\n\nint hd[max_n], des[max_n * 2], nxt[max_n * 2], e_cnt = 0, ansc = 0;\nint siz[max_n], par[max_n], dep[max_n], cnt[max_n];\npair<int, int> ans[max_n / 2];\nll gsm = 0, lcasm = 0;\n\nvoid add(int s, int t)\n{\n\tdes[e_cnt] = t;\n\tnxt[e_cnt] = hd[s];\n\thd[s] = e_cnt++;\n}\n\nvoid dfs1(int id, int fa)\n{\n\tsiz[id] = 1;\n\tfor (int p = hd[id], dst; p != -1; p = nxt[p])\n\t{\n\t\tdst = des[p];\n\t\tif (dst != fa)\n\t\t{\n\t\t\tdfs1(dst, id);\n\t\t\tsiz[id] += siz[dst];\n\t\t}\n\t}\n}\n\nset<pair<int, int>> gchs;\nmultiset<pair<int, int>> ch[max_n];\nvoid dfs2(int id, int fa, int rt)\n{\n\tint odc = 0;\n\tgsm += dep[id], par[id] = fa;\n\t\n\tfor (int p = hd[id], dst; p != -1; p = nxt[p])\n\t{\n\t\tdst = des[p];\n\t\tif (dst != fa)\n\t\t{\n\t\t\tdep[dst] = dep[id] + 1;\n\t\t\tdfs2(dst, id, rt);\n\t\t\tif (siz[dst] & 1)\n\t\t\t\todc++;\n\t\t}\n\t}\n\twhile (odc > 0)\n\t{\n\t\todc -= 2;\n\t\tch[rt].emplace(dep[id], id);\n\t\tlcasm += dep[id];\n\t}\n}\n\nset<pair<int, int>, greater<pair<int, int>>> curs;\nvector<int> res[max_n];\nvoid dfs3(int id, int fa)\n{\n\tfor (int p = hd[id], dst; p != -1; p = nxt[p])\n\t{\n\t\tdst = des[p];\n\t\tif (dst != fa)\n\t\t\tdfs3(dst, id);\n\t}\n\t\n\tres[id].push_back(id);\n\tcurs.emplace(1, id);\n\tfor (int p = hd[id], dst; p != -1; p = nxt[p])\n\t{\n\t\tdst = des[p];\n\t\tif (dst != fa)\n\t\t\tcurs.emplace(res[dst].size(), dst);\n\t}\n\twhile (cnt[id]--)\n\t{\n\t\tauto [xs, x] = *curs.begin();\n\t\tauto [ys, y] = *curs.erase(curs.begin());\n\t\tcurs.erase(curs.begin());\n\t\t\n\t\tans[ansc++] = make_pair(res[x].back(), res[y].back());\n\t\tres[x].pop_back();\n\t\tres[y].pop_back();\n\t\t\n\t\tif (--xs) curs.emplace(xs, x);\n\t\tif (--ys) curs.emplace(ys, y);\n\t}\n\t\n\tfor (auto [_, x] : curs)\n\t\tif (x != id)\n\t\t{\n\t\t\tif (res[x].size() > res[id].size())\n\t\t\t\tswap(res[id], res[x]);\n\t\t\tres[id].insert(res[id].end(), res[x].begin(), res[x].end());\n\t\t\tres[x].clear(), res[x].shrink_to_fit();\n\t\t}\n\tcurs.clear();\n}\n\ninline void chmax(int& _a, int _b) { if (_a < _b) _a = _b; }\nsigned main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\t\n\tint n;\n\tll k;\n\t\n\tcin >> n >> k;\n\tfill(hd, hd + n, -1);\n\t\n\tfor (int i = 1, x, y; i < n; i++)\n\t{\n\t\tcin >> x >> y, x--, y--;\n\t\tadd(x, y), add(y, x);\n\t}\n\tdfs1(0, -1);\n\t\n\tint mn = n, rt = -1;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint mxs = n - siz[i];\n\t\tfor (int p = hd[i], dst; p != -1; p = nxt[p])\n\t\t{\n\t\t\tdst = des[p];\n\t\t\tif (siz[dst] < siz[i])\n\t\t\t\tchmax(mxs, siz[dst]);\n\t\t}\n\t\tif (mxs < mn)\n\t\t\tmn = mxs, rt = i;\n\t}\n\tdfs1(rt, -1);\n\t\n\tint curc = 0;\n\tpar[rt] = -1;\n\tfor (int p = hd[rt], dst; p != -1; p = nxt[p])\n\t{\n\t\tdst = des[p];\n\t\tdep[dst] = 1;\n\t\tdfs2(dst, rt, dst);\n\t\t\n\t\tif (!ch[dst].empty())\n\t\t{\n\t\t\tcurc += ch[dst].size();\n\t\t\tgchs.emplace(siz[dst] - ch[dst].size() * 2, dst);\n\t\t}\n\t}\n\tcnt[rt] = n / 2 - curc;\n\t\n\tif (k > gsm || k < gsm - lcasm * 2 || ((k ^ gsm) & 1))\n\t{\n\t\tcout << \"NO\\n\";\n\t\treturn 0;\n\t}\n\tgsm = lcasm - (gsm - k) / 2;\n\t\n\twhile (gsm > 0)\n\t{\n\t\tauto [xs, dst] = *gchs.begin();\n\t\tgchs.erase(gchs.begin());\n\t\tauto [d, x] = *ch[dst].begin();\n\t\tch[dst].erase(ch[dst].begin());\n\t\t\n\t\tif (gsm > d)\n\t\t{\n\t\t\tgsm -= d;\n\t\t\tcnt[rt]++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile (gsm--)\n\t\t\t\tx = par[x];\n\t\t\tcnt[x]++;\n\t\t\tbreak;\n\t\t}\n\t\tif (!ch[dst].empty())\n\t\t\tgchs.emplace(xs + 2, dst);\n\t}\n\tfor (int p = hd[rt], dst; p != -1; p = nxt[p])\n\t{\n\t\tdst = des[p];\n\t\tfor (auto [d, x] : ch[dst])\n\t\t\tcnt[x]++;\n\t}\n\tdfs3(rt, -1);\n\t\n\tcout << \"YES\\n\";\n\tfor (int i = 0; i < ansc; i++)\n\t\tcout << ans[i].first + 1 << \" \" << ans[i].second + 1 << \"\\n\";\n\t\n\treturn 0;\n}\n```",
        "postTime": 1677853325,
        "uid": 119491,
        "name": "5ab_juruo",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF1396E Distance Matching"
    }
]