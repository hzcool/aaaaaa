[
    {
        "content": "\u5e76\u4e0d\u56f0\u96be\u7684\u4e00\u9053 *3000\u3002\n\n\u5148\u5224\u65ad\u53ef\u884c\u6027\u3002\u9996\u5148\u6bcf\u4e2a\u53f6\u5b50\u7684\u6df1\u5ea6\u5e94\u5f53\u76f8\u540c\u3002\u5176\u6b21\u8bbe $mx_{x,c}$ \u8868\u793a $x$ \u5b50\u6811\u5185\u6bcf\u4e2a\u53f6\u5b50\u5230 $x$ \u7684\u5b57\u7b26 $c$ \u51fa\u73b0\u6b21\u6570\u7684\u6700\u5927\u503c\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u82e5\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u6709 $\\sum_c mx_{x,c}$ \u4e0d\u8d85\u8fc7 $x$ \u5230\u53f6\u5b50\u7684\u94fe\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u662f\u5408\u6cd5\u7684\u3002\n\n\u5bb9\u6613\u53d1\u73b0 $f(c)=d-\\sum\\limits_{i\\neq c} mx_{1,c}$\u3002\u81f3\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a $O(qn|\\sum|)$ \u7684\u505a\u6cd5\u3002\n\n\u6ce8\u610f\u5230\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u7684\u70b9\uff0c\u82e5\u513f\u5b50\u5408\u6cd5\uff0c\u5219\u5b83\u4e5f\u5408\u6cd5\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u7528\u7ba1\u6709\u4e24\u4e2a\u513f\u5b50\u7684\u70b9\u3002\n\n\u6ce8\u610f\u5230\u7531\u4e8e\u53f6\u5b50\u6df1\u5ea6\u76f8\u540c\uff0c\u6240\u4ee5\u4e00\u4e2a\u70b9\u7684\u7956\u5148\u4e2d\u7684\u4e09\u5ea6\u70b9\u53ea\u6709 $O(\\sqrt n)$ \u4e2a\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u9700\u8981\u652f\u6301 $O(n)$ \u6b21\u5b50\u6811\u52a0/\u51cf\uff0c$O(n\\sqrt n)$ \u6b21\u67e5\u8be2\u5355\u70b9\u503c\uff0c\u4f7f\u7528 $O(\\sqrt n)-O(1)$ \u5206\u5757\u6765\u5e73\u8861\u5373\u53ef\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=2e5+10;\nconst int mod=1e9+7;\n#define inf 1e9\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n\treturn x*f;\n}\nchar c[maxn];int nx[maxn],dfn[maxn],sz[maxn],dep[maxn],ti;\nint n,m,F[maxn],lc[maxn],rc[maxn],L=inf,R;\ninline void dfs(int x,int y){\n\tnx[x]=y;dfn[x]=++ti;dep[x]=dep[F[x]]+1;\n\tif(rc[x])dfs(lc[x],x),dfs(rc[x],x);\n\telse if(lc[x])dfs(lc[x],y);\n\telse L=min(L,dep[x]),R=max(R,dep[x]);\n\tsz[x]=sz[lc[x]]+sz[rc[x]]+1;\n}\nconst int B=400;\nint bel[maxn],lft[maxn],rht[maxn],blo;\nstruct node{\n\tint a[maxn],laz[maxn];\n\tinline void add(int l,int r,int x){\n\t\tif(bel[l]==bel[r]){\n\t\t\tfor(int i=l;i<=r;i++)a[i]+=x;\n\t\t\treturn;\n\t\t}for(int i=l;i<=rht[bel[l]];i++)a[i]+=x;\n\t\tfor(int i=bel[l]+1;i<bel[r];i++)laz[i]+=x;\n\t\tfor(int i=lft[bel[r]];i<=r;i++)a[i]+=x;\n\t}\n\tinline int query(int x){x=dfn[x];return a[x]+laz[bel[x]];}\n}C[30];int cnt,Son[maxn],sum[maxn],LC[maxn][30],RC[maxn][30];\ninline bool chk(int x,int y){return dfn[x]<=dfn[y]&&dfn[x]+sz[x]-1>=dfn[y];}\ninline void add(int ch,int x,int op){\n//\tprintf(\"add %d %d %d\\n\",ch,x,op);\n\tC[ch].add(dfn[x],dfn[x]+sz[x]-1,op);\n\tint val=max(LC[Son[x]][ch],RC[Son[x]][ch])+C[ch].query(Son[x])-C[ch].query(x);\n\twhile(x>1){\n\t\tint fa=nx[x];val+=C[ch].query(x)-C[ch].query(fa);\n//\t\tprintf(\"x=%d fa=%d val=%d\\n\",x,fa,val);\n\t\tcnt-=(sum[fa]>L-dep[fa]);\n\t\tsum[fa]-=max(LC[fa][ch],RC[fa][ch]);\n\t\tif(chk(lc[fa],x))LC[fa][ch]=val;else RC[fa][ch]=val;\n\t\tsum[fa]+=(val=max(LC[fa][ch],RC[fa][ch]));\n\t\tcnt+=(sum[fa]>L-dep[fa]);x=fa;\n\t}\n//\tprintf(\"%d %d %d\\n\",sum[1],LC[1][ch],RC[1][ch]);\n}\ninline int dfs1(int x){\n\tif(!lc[x])return Son[x]=x;\n\telse if(!rc[x])return Son[x]=dfs1(lc[x]);\n\tdfs1(lc[x]),dfs1(rc[x]);\n\treturn Son[x]=x;\n}\nint main(){\n\tn=read(),m=read();\n\tfor(int i=2;i<=n;i++){\n\t\tF[i]=read();c[i]=getchar();\n//\t\tprintf(\"%d %c\\n\",F[i],c[i]);\n\t\tif(lc[F[i]])rc[F[i]]=i;\n\t\telse lc[F[i]]=i;\n\t}dfs(1,1);if(L<R){\n\t\tfor(int i=1;i<=m;i++)puts(\"Fou\");\n\t\treturn 0;\n\t}for(int i=1;;i++){\n\t\tlft[i]=(i-1)*B+1;rht[i]=i*B;\n\t\tfor(int j=lft[i];j<=rht[i]&&j<=n;j++)bel[j]=i;\n\t\tif(rht[i]>=n){rht[i]=n;blo=i;break;}\n\t}dfs1(1);\n\tfor(int i=2;i<=n;i++)\n\t\tif(c[i]!='?')add(c[i]-'a',i,1);\n\tfor(int i=1,x;i<=m;i++){\n\t\tx=read();\n\t\tif(c[x]!='?')add(c[x]-'a',x,-1);\n\t\tc[x]=getchar();\n\t\tif(c[x]!='?')add(c[x]-'a',x,1);\n\t\tif(cnt)puts(\"Fou\");\n\t\telse{\n\t\t\tint Ans=0;\n\t\t\tfor(int j=0;j<26;j++)\n\t\t\t\tAns+=(j+1)*(R-1-sum[1]+max(LC[1][j],RC[1][j]));\n\t\t\tprintf(\"Shi %d\\n\",Ans);\n\t\t}\n//\t\tprintf(\"%d %c\\n\",x,c[x]);\n\t}\n\treturn 0;\n}\n```\n\n\u6df1\u6df1\u5730\u611f\u5230\u81ea\u5df1\u7684\u5f31\u5c0f\u3002",
        "postTime": 1676559922,
        "uid": 140876,
        "name": "syzf2222",
        "ccfLevel": 9,
        "title": "CF1168D Anagram Paths"
    },
    {
        "content": "\u9996\u5148\uff0c\u5f88\u663e\u7136\u5730\uff0c\u53f6\u5b50\u7684\u6df1\u5ea6\u5fc5\u987b\u76f8\u540c\u3002\n\n\u5728\u8fd9\u4e2a\u6761\u4ef6\u4e0b\uff0c\u6709\u89e3\u5f53\u4e14\u4ec5\u5f53\n\n$$\\forall u, \\sum_{i=0}^{c} \\text{maxi}_{u, i}\\leq d-\\text{dep}_u $$\n\n\u5176\u4e2d\uff0c$\\text{maxi}_{u, i}$ \u8868\u793a\u4ee5 $u$ \u53f7\u70b9\u4e3a\u8d77\u70b9\u5411\u4e0b\u7684\u6240\u6709\u94fe\u4e2d\uff0c\u7b2c $i$ \u79cd\u5b57\u7b26\u6700\u591a\u4e3a\u591a\u5c11\u3002$c$ \u4e3a\u5b57\u7b26\u96c6\u5927\u5c0f\uff0c$d$ \u4e3a\u53f6\u5b50\u6df1\u5ea6\uff0c$\\text{dep}_u$ \u4e3a $u$ \u53f7\u70b9\u7684\u6df1\u5ea6\u3002\n\n\u5fc5\u8981\u6027\u662f\u663e\u7136\u7684\u3002\n\n\u5145\u5206\u6027\u53ef\u4ee5\u8003\u8651\uff0c\u6211\u4eec\u5047\u5982\u8ba9\u6bcf\u4e00\u4e2a\u5b50\u6811\u90fd\u5df2\u7ecf\u6ee1\u8db3\u4e86\u6761\u4ef6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u628a\u5b50\u6811\u770b\u4f5c\u4e00\u6761\u94fe\uff08\u56e0\u4e3a\u96c6\u5408\u4e0e\u4e2a\u6570\u90fd\u662f\u4e00\u6837\u7684\uff09\uff0c\u8fd9\u6837\u6211\u4eec\u8003\u8651 $u$ \u5b50\u6811\u7684\u65f6\u5019\uff0c\u53ea\u7528\u8003\u8651\u4e24\u6761\u5728 $u$ \u5206\u53c9\u7684\u94fe\u5982\u4f55\u89e3\u51b3\u3002\u8fd9\u4e2a\u95ee\u9898\u5c31\u975e\u5e38\u7b80\u5355\u4e86\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u5f97\u5230\u4e86\u4e00\u6761\u7ed3\u8bba\uff1a\u6700\u7ec8\u7b54\u6848\u4e2d\u7684\u4e00\u90e8\u5206\u5e94\u8be5\u662f $(d-\\sum \\text{maxi}_{1, i})(1+2+\\ldots +26)$\u3002\n\n\u73b0\u5728\uff0c\u6211\u4eec\u8003\u8651\u4fee\u6539\u8be5\u600e\u4e48\u5904\u7406\u3002\n\n\u6211\u4eec\u601d\u8003\uff0c\u82e5\u4e00\u6761\u8fb9\u4fee\u6539\u4e86\u6743\u503c\uff0c\u90a3\u4e48\u4ed6\u7684\u7956\u5148\u4eec\u7684 $\\text{maxi}$ \u503c\u5e94\u8be5\u4fee\u6539\uff0c\u5176\u4ed6\u70b9\u4e0d\u9700\u8981\u4fee\u6539\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u52a8\u6001 dp \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u5f53\u7136\uff0c\u6709\u66f4\u5bb9\u6613\u7684\u505a\u6cd5\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5047\u5982\u6811\u7684\u4e00\u4e2a\u90e8\u5206\u5f62\u5982\u4e00\u6761\u94fe\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u628a\u94fe\u7f29\u6210\u4e00\u6761\u8fb9\uff0c\u4e4b\u540e\u6bcf\u6b21 $O(c)$ \u8ba1\u7b97\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u73b0\u5728\u628a\u539f\u6811\u53d8\u6210\u4e86\u5305\u542b\u6240\u6709\u53f6\u5b50\u7684\u865a\u6811\u3002\n\n\u6709\u7ed3\u8bba\uff1a\u6b64\u65f6\u7684\u6811\u9ad8\u4e0d\u4f1a\u8d85\u8fc7 $O(\\sqrt n)$\u3002\n\n\u6211\u4eec\u8003\u8651\u5728\u865a\u6811\u4e0a\u4e00\u6761\u957f\u4e3a $l$ \u7684\u94fe\uff0c\u8981\u6ee1\u8db3\u865a\u6811\u7684\u6027\u8d28\uff0c\u5c31\u5fc5\u987b\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u518d\u6df1\u51fa\u4e00\u6761\u679d\u5e72\uff0c\u53c8\u56e0\u4e3a\u8981\u6c42\u6240\u6709\u53f6\u5b50\u7684\u6df1\u5ea6\u76f8\u540c\uff0c\u6240\u4ee5\u679d\u5e72\u957f\u5ea6\u5fc5\u987b\u8db3\u591f\u957f\u3002\u6700\u7ec8\uff0c\u6211\u4eec\u9700\u8981 $O(l^2)$ \u4e2a\u70b9\u624d\u80fd\u4f7f\u8fd9\u6837\u4e00\u6761\u865a\u6811\u4e0a\u7684\u94fe\u5b58\u5728\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5efa\u51fa\u865a\u6811\uff0c\u5728\u8fd9\u4e2a\u865a\u6811\u4e0a\u66b4\u8df3\uff0c\u7ef4\u62a4 $\\text{maxi}$ \u503c\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(cn\\sqrt n)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int Maxn = 300005;\nint n, q, cnt, err, maxi, fa[Maxn], dep[Maxn], opt[Maxn], down[Maxn], head[Maxn], ct[Maxn][29], f[Maxn][29];\nvector <int> Ve, G[Maxn];\nbool vis[Maxn];\nchar ch[Maxn];\nstruct edg\n{\n\tint nxt, to;\n} edge[Maxn];\nvoid add(int x, int y)\n{\n\tedge[++cnt] = (edg){head[x], y};\n\thead[x] = cnt;\n}\nvoid init_dfs(int u)\n{\n\tmaxi = max(maxi, dep[u]);\n\tif (!G[u].size() && dep[u] != maxi)\n\t{\n\t\twhile (q--) puts(\"Fou\");\n\t\texit(0);\n\t}\n\tif (G[u].size() != 1 || u == 1) vis[u] = true;\n\tfor (vector <int> :: iterator it = G[u].begin(); it != G[u].end(); it++)\n\t\tdep[*it] = dep[u] + 1, init_dfs(*it);\n}\nvoid dfs1(int u, int f)\n{\n\tVe.push_back(u);\n\tif (vis[u])\n\t{\n\t\tfor (vector <int> :: iterator it = Ve.begin(); it != Ve.end(); it++)\n\t\t\tdown[*it] = u;\n\t\tVe.clear();\n\t\tif (f) add(f, u);\n\t\tf = u;\n\t}\n\tfor (vector <int> :: iterator it = G[u].begin(); it != G[u].end(); it++)\n\t\tdfs1(*it, f);\n}\nvoid dfs2(int u)\n{\n\tfor (int i = head[u]; i; i = edge[i].nxt)\n\t{\n\t\tint to = edge[i].to;\n\t\tfa[to] = u, dfs2(to);\n\t\tfor (int j = 0; j < 26; j++)\n\t\t\tf[u][j] = max(f[u][j], f[to][j] + ct[to][j]);\n\t}\n\tint sum = 0;\n\tfor (int i = 0; i < 26; i++) sum += f[u][i];\n\tif (sum > maxi - dep[u]) err++;\n}\nvoid work(int u)\n{\n\tif (!u) return ;\n\tint sum = 0;\n\tfor (int i = 0; i < 26; i++)\n\t\tsum += f[u][i];\n\tif (sum > maxi - dep[u]) err--;\n\tmemset(f[u], 0, sizeof(f[u]));\n\tfor (int i = head[u]; i; i = edge[i].nxt)\n\t{\n\t\tint to = edge[i].to;\n\t\tfor (int j = 0; j < 26; j++)\n\t\t\tf[u][j] = max(f[u][j], f[to][j] + ct[to][j]);\n\t}\n\tsum = 0;\n\tfor (int i = 0; i < 26; i++) sum += f[u][i];\n\tif (sum > maxi - dep[u]) err++;\n\twork(fa[u]);\n}\nint main()\n{\n\tscanf(\"%d%d\", &n, &q);\n\tfor (int i = 2; i <= n; i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\tG[x].push_back(i);\n\t\tch[i] = getchar();\n\t\twhile (!isalpha(ch[i]) && ch[i] != '?') ch[i] = getchar();\n\t}\n\tinit_dfs(1);\n\tdfs1(1, 0);\n\tdfs2(1);\n\tfor (int i = 2; i <= n; i++)\n\t\tct[down[i]][ch[i] - 'a']++;\n\twhile (q--)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\tif (ch[x] != '?') ct[down[x]][ch[x] - 'a']--;\n\t\tch[x] = getchar();\n\t\twhile (!isalpha(ch[x]) && ch[x] != '?') ch[x] = getchar();\n\t\tif (ch[x] != '?') ct[down[x]][ch[x] - 'a']++;\n\t\twork(fa[down[x]]);\n\t\tif (err) puts(\"Fou\");\n\t\telse\n\t\t{\n\t\t\tlong long tot = 0;\n\t\t\tint sum = 0;\n\t\t\tfor (int i = 0; i < 26; i++)\n\t\t\t\tsum += f[1][i];\n\t\t\tfor (int i = 0; i < 26; i++)\n\t\t\t\ttot += (maxi - sum + f[1][i]) * (i + 1LL);\n\t\t\tprintf(\"Shi %lld\\n\", tot);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1603117886,
        "uid": 49093,
        "name": "_sys",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1168D \u3010Anagram Paths\u3011"
    },
    {
        "content": "\u9996\u5148\u663e\u7136\u6bcf\u4e2a\u53f6\u5b50\u7684\u6df1\u5ea6\u5e94\u8be5\u76f8\u7b49\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6765\u89c2\u5bdf\u4e24\u6761\u94fe\uff0c\u5b83\u4eec\u5171\u7528\u4e00\u4e2a\u94fe\u9876\uff0c\u6bcf\u6761\u94fe\u6709 $n$ \u6761\u8fb9\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a**\u5b57\u6bcd**\uff0c\u5b83\u5728\u5de6\u8fb9\u51fa\u73b0\u7684\u6b21\u6570\u4e3a $tl_c$\uff0c\u53f3\u8fb9\u51fa\u73b0\u7684\u6b21\u6570\u4e3a $tr_c$\uff0c\u6211\u4eec\u79f0\u4e00\u4e2a**\u5b57\u6bcd**\u5728\u4e00\u4fa7\u662f**\u6709\u6548**\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a**\u5b57\u6bcd**\u5728\u8fd9\u4e00\u4fa7\u7684\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u5728\u53e6\u4e00\u4fa7\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u6216\u8005\u8fd9\u4e00\u4fa7\u662f\u5de6\u4fa7\uff0c\u4e14\u5728\u4e24\u4fa7\u7684\u51fa\u73b0\u6b21\u6570\u662f\u76f8\u7b49\u7684\u3002\n\n\u8bb0\u5de6\u4fa7\u6709\u6548**\u5b57\u6bcd**\u6570\u4e3a $L_{max}$\uff0c\u53f3\u4fa7\u6709\u6548**\u5b57\u6bcd**\u6570\u4e3a $R_{max}$\uff0c\u5de6\u4fa7\u65e0\u6548**\u5b57\u6bcd**\u6570\u4e3a $L_{min}$\uff0c\u53f3\u4fa7\u65e0\u6548**\u5b57\u6bcd**\u6570\u4e3a $R_{min}$\uff0c\u5de6\u4fa7\u95ee\u53f7\u6570\u4e3a $L_?$\uff0c\u53f3\u4fa7\u95ee\u53f7\u6570\u4e3a $R_?$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6709 $L_{max}+R_{max}+L_{min}+R_{min}+L_?+R_?=2n$\u3002\n\n\u53e6\u5916\uff0c\u5982\u679c\u4e24\u6761\u94fe\u662f\u76f8\u5173\u8054\u7684\uff0c\u90a3\u4e48 $L_{max}\\le R_{min}+R_{?}$\uff0c$R_{max}\\le L_{min}+L_{?}$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa $L_{max}+R_{max}\\le n$\uff0c\u76f8\u5f53\u4e8e\u5efa\u7acb\u4e86\u5fc5\u8981\u6027\u3002\n\n\u5982\u4f55\u5efa\u7acb\u5145\u5206\u6027\uff1f\u6211\u4eec\u53d1\u73b0\uff0c\u901a\u8fc7\u76f8\u5173\u8054\u7ed9\u51fa\u7684\u4e24\u4e2a\u4e0d\u7b49\u5f0f\u662f\u540c\u771f\u540c\u5047\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6709$L_{max}+L_{min}+L_?=R_{max}+R_{min}+R_{?}$\u3002\n\n\u6211\u4eec\u8fd8\u53ef\u4ee5\u6c42\u51fa\u5b83\u7684\u91cd\u6392\u5ea6\u3002\u5bf9\u4e8e\u6bcf\u4e2a**\u5b57\u6bcd** $c$\uff0c$f(c)=\\max(tl_c,tr_c)+R_{min}+R_{?}-L_{max}$\uff0c\u8fd9\u662f\u5b83\u672c\u8eab\u7684\u51fa\u73b0\u6b21\u6570\u52a0\u4e0a\u591a\u51fa\u6765\u7684\u95ee\u53f7\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u6307\u51fa\u4e00\u4e2a\u8282\u70b9\u53ea\u5411\u4e0b\u62c9\u4e24\u6761\u5355\u94fe\uff0c\u5982\u679c\u5b83\u5b50\u6811\u5185\u4ee5\u5b83\u4e3a LCA \u7684\u53f6\u5b50\u5bf9\u90fd\u662f\u76f8\u5173\u8054\u7684\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6240\u6709\u5b57\u7b26\u5411\u4e0b\u5ef6\u4f38\u7684\u94fe\u4e2d\u6700\u5927\u7684\u51fa\u73b0\u6b21\u6570\u4e4b\u548c\uff0c\u662f\u4e0d\u8d85\u8fc7\u5b83\u5230\u53f6\u5b50\u7684\u8def\u5f84\u4e0a\u5305\u542b\u7684\u8fb9\u6570\u7684\u3002\n\n\u63a8\u5e7f\u5230\u4e00\u822c\u7684\u4e8c\u53c9\u6811\uff0c\u8bb0\u70b9 $u$ \u5230\u5b83\u5b50\u6811\u5185\u7684\u53f6\u5b50\u6700\u5c11\u9700\u8981\u7ecf\u8fc7 $d_u$ \u6761\u8fb9\uff0c\u5b83\u5411\u4e0b\u7684\u6240\u6709\u94fe\u4e2d $c$ \u6700\u5927\u7684\u51fa\u73b0\u6b21\u6570 $t_{u,c}$\u3002\n\n\u6211\u4eec\u731c\u6d4b\u8282\u70b9 $u$ \u5b50\u6811\u5185\u4ee5 $u$ \u4e3a LCA \u7684\u53f6\u5b50\u5bf9\u90fd\u76f8\u5173\u8054\u5f53\u4e14\u4ec5\u5f53 $\\sum_{c}t_{u,c}\\le d_u$\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u5bf9\u53f6\u5b50\u90fd\u80fd\u770b\u6210\u4e00\u4e2a\u8282\u70b9\u5411\u4e0b\u62c9\u4e24\u6761\u5355\u94fe\u7684\u7ed3\u6784\uff0c\u90a3\u4e48\u6240\u8c13\u7684 $\\sum_c t_{u,c}$  \u5b9e\u9645\u4e0a\u662f\u5bf9\u6240\u6709\u7ed3\u6784\u7684 $L_{max}+R_{max}$ \u53d6 $\\operatorname{max}$\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u6c42\u51fa\u91cd\u6392\u5ea6\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a**\u5b57\u6bcd**\u5355\u72ec\u8003\u8651\uff0c\u8fd9\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f $t_{1,c}$\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u4ece\u95ee\u53f7\u8f6c\u5316\u8fc7\u6765\u7684\uff0c\u5b83\u5c31\u662f $d_1-\\sum_{c}t_{1,c}$\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u600e\u4e48\u652f\u6301\u4fee\u6539\uff0c\u8fd9\u6837\u9700\u8981\u7ef4\u62a4 $t_{u,c}$\uff0c\u66b4\u529b\u8df3\u7236\u4eb2\u4fee\u6539\u7684\u590d\u6742\u5ea6\u662f\u548c\u6811\u7684\u6df1\u5ea6\u76f8\u5173\u7684\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u800c\u4e14\u5bf9\u4e8e\u5355\u94fe\u660e\u663e\u662f\u53ef\u4ee5\u7f29\u7684\uff08\u4e0d\u7b49\u5f0f\u4e24\u8fb9\u540c\u65f6\u52a0\u4e00\uff0c\u663e\u7136\u540c\u771f\u540c\u5047\uff09\uff0c\u6211\u4eec\u53d1\u73b0\u7f29\u5b8c\u4e4b\u540e\u6811\u9ad8\u662f $O(\\sqrt{n})$ \u7ea7\u522b\u7684\u3002\u8fd9\u91cc\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\uff0c\u6211\u4eec\u5047\u8bbe\u65b0\u6811\u4e2d\u6700\u6df1\u7684\u53f6\u5b50\u7684\u6df1\u5ea6\u4e3a $d$\uff0c\u90a3\u4e48\u6211\u4eec\u4e3a\u4e86\u4fdd\u7559\u5b83\u5230\u6839\u4e0a\u7684\u8fb9\uff0c\u80af\u5b9a\u6bcf\u4e2a\u70b9\u90fd\u8981\u53e6\u5916\u62c9\u51fa\u4e00\u6761\u94fe\uff0c\u800c\u4e14\u8981\u4fdd\u8bc1\u62c9\u51fa\u540e\u53f6\u5b50\u5728\u539f\u6811\u4e2d\u6df1\u5ea6\u76f8\u7b49\uff0c\u6240\u4ee5\u8981\u8017\u8d39\u8282\u70b9 $1+2+\\cdots+(d-1)$\uff0c\u8fd9\u662f $O(d^2)$ \u7684\uff0c\u6240\u4ee5 $d$ \u662f $O(\\sqrt{n})$ \u7ea7\u522b\u7684\u3002\n\n\u5728\u865a\u6811\u4e2d\uff0c\u6bcf\u4e00\u6761\u8fb9\u5bf9\u5e94\u4e86\u65b0\u6811\u7684\u4e00\u6761\u5355\u94fe\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6876\u5b58\u5b83\u4e0a\u9762\u7684\u5b57\u6bcd\u3002\n\n\u5b9e\u73b0\u4e0a\u4f7f\u7528 set \u7ef4\u62a4\u4e0d\u5408\u6cd5\u7684 $u$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\Sigma+q\\Sigma\\sqrt{n})$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define pb push_back\n#define mp make_pair\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\nvoid read(int &x){\n    static char c;\n    while(!isdigit(c=getchar())); x=c^48;\n    while(isdigit(c=getchar()))x=(x*10)+(c^48);\n}\nvoid read(ll &x){\n    static char c;\n    while(!isdigit(c=getchar())); x=c^48;\n    while(isdigit(c=getchar()))x=(x*10)+(c^48);\n}\nvoid chkmax(int &x,int y){if(y>x)x=y;}\nvoid chkmin(int &x,int y){if(x<y)x=y;}\nvoid chkmax(ll &x,ll y){if(y>x)x=y;}\nvoid chkmin(ll &x,ll y){if(x<y)x=y;}\n\nconst int N=2e5+10,sig=27;\n\nint ch_to_int(char c){return isalpha(c)/2*(c-'a'+1);}\n\nint n,q;\nint p[N],pc[N];\nvector<pii> Edge[N];\nint dep[N],Mdep;\n\nint fat[N],bel[N],buc[N][sig],t[N][sig];\nvector<int> son[N];\nint ed_buc[sig];\n\nvoid dfs(int now,int fa){\n    if(Edge[now].size()^1&&now^1){\n        for(int i=1;i<sig;++i) buc[now][i]=ed_buc[i],ed_buc[i]=0;\n        fat[now]=fa,son[fa].pb(now),fa=now;\n    }\n    for(auto I:Edge[now]){\n        int v=I.first,c=I.second;\n        ++ed_buc[c],dep[v]=dep[now]+1,chkmax(Mdep,dep[v]),dfs(v,fa);\n    }\n}\n\nvoid Build(int now){\n    for(int v:son[now]) Build(v);\n    for(int v:son[now])\n        for(int i=1;i<sig;++i) chkmax(t[now][i],t[v][i]+buc[v][i]);\n    for(int i=1;i<sig;++i) t[now][0]+=t[now][i];\n}\n\nbool intr(int now){return now==1||Edge[now].size()!=1;}\nvoid EXIT(){for(int i=1;i<=q;++i) puts(\"Fou\");exit(0);}\n\nset<int> S;\n\nvoid Work(){\n    read(n),read(q);\n    for(int i=2;i<=n;++i){\n        char c;\n        read(p[i]),scanf(\"%c\",&c),pc[i]=ch_to_int(c);\n        Edge[p[i]].pb(mp(i,pc[i]));\n    }\n    dfs(1,1),Build(1);\n    for(int i=1;i<=n;++i)\n        if(Edge[i].size()==0&&dep[i]!=Mdep) EXIT();\n    for(int i=1;i<=n;++i){\n        if(!intr(i)) continue;\n        if(t[i][0]>Mdep-dep[i]) S.insert(i);\n    }\n    for(int i=1;i<=n;++i)\n        if(intr(i)){\n            int now=p[i];bel[i]=i;\n            while(!intr(now)) bel[now]=i,now=p[now];\n        }\n    for(int i=1;i<=q;++i){\n        char ch;int x;\n        read(x),scanf(\"%c\",&ch);\n        int c=ch_to_int(ch),u=bel[x];\n        --buc[u][pc[x]],++buc[u][pc[x]=c];\n        u=fat[u];\n        while(u){\n            for(int i=0;i<sig;++i) t[u][i]=0;\n            for(int v:son[u])\n                for(int i=1;i<sig;++i) chkmax(t[u][i],t[v][i]+buc[v][i]);\n            for(int i=1;i<sig;++i) t[u][0]+=t[u][i];\n            if(t[u][0]>Mdep-dep[u]) S.insert(u);\n            else S.erase(u);\n            u=fat[u];\n        }\n        if(S.size()) puts(\"Fou\");\n        else{\n            int sum=0;\n            for(int i=1;i<sig;++i) sum+=i*(Mdep-t[1][0]+t[1][i]);\n            printf(\"Shi %d\\n\",sum);\n        }\n    }\n}\n\nint main(){Work();}\n```",
        "postTime": 1616403364,
        "uid": 83547,
        "name": "LCuter",
        "ccfLevel": 7,
        "title": "CF1168D Anagram Paths"
    },
    {
        "content": "#### CF1168D Anagram Paths\n\n\u9996\u5148\u6bcf\u4e2a\u53f6\u5b50\u7684\u6df1\u5ea6\u5fc5\u987b\u76f8\u540c\uff0c\u8981\u4e0d\u7136\u6ca1\u6cd5\u8ba9\u5b57\u7b26\u4e32\u91cd\u6392\u540e\u76f8\u540c\u3002\n\n\u8003\u8651\u6bcf\u4e2a\u8282\u70b9$u$\uff0c\u8bb0\u5f55$u$\u5b50\u6811\u5185\u51fa\u73b0\u8fc7\u7684\u5230\u53f6\u5b50\u8282\u70b9\u7684\u94fe\uff0c\u6bcf\u4e2a\u5b57\u7b26\u6700\u591a\u51fa\u73b0\u7684\u6b21\u6570\u4e4b\u548c$sum_u$\uff0c\u90a3\u4e48\u5f53\u4e14\u4ec5\u5f53$sum_u\\leq dep_u$\u65f6\u6709\u89e3\u3002\n\n\u5fc5\u8981\u6027\u663e\u7136\u3002\n\n\u5145\u5206\u6027\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u65f6\u65e0\u89e3\uff0c\u90a3\u4e48\u5fc5\u5b9a\u6709\u4e24\u4e2a\u5b57\u7b26\u4e32\u4ed6\u4eec\u7684\u67d0\u4e2a\u5b57\u7b26\u6570\u91cf\u901a\u8fc7\u64cd\u4f5c$?$\u5b57\u7b26\u65e0\u6cd5\u7edf\u4e00\uff0c\u4f46\u662f\u7531\u4e8e\u6761\u4ef6\uff0c\u6211\u4eec\u5fc5\u7136\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c$?$\u5b57\u7b26\u8d4b\u503c\u7ed9\u8ba9\u4ed6\u4eec\u7684\u5b57\u7b26\u7edf\u4e00\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u4fee\u6539\u3002\n\n\u8003\u8651\u6811\u4e0a\u7684\u4e00\u6761\u94fe\uff0c\u8fd9\u6761\u94fe\u4e0a\u6bcf\u4e2a\u70b9\u90fd\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48\u5176\u5b9e\u8fd9\u6761\u94fe\u53ef\u4ee5\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u770b\u6210\u6700\u9ad8\u7684\u90a3\u4e2a\u70b9\u548c\u6700\u4f4e\u7684\u90a3\u4e2a\u70b9\u4e2d\u95f4\u8fde\u4e86\u5f88\u591a\u6761\u8fb9\u3002\n\n\u90a3\u4e48\u8fd9\u6837\u5b50\u7684\u8bdd\u6811\u9ad8\u5c31\u4f1a\u53d8\u6210$O(\\sqrt n)$\uff0c\u56e0\u4e3a\u5982\u679c\u94fe\u5f88\u5c11\u7684\u8bdd\uff0c\u7531\u4e8e\u4e8c\u53c9\u6811\uff0c\u56e0\u6b64\u6811\u9ad8\u5f88\u4f4e\uff0c\u94fe\u5f88\u591a\u7684\u8bdd\u53c8\u88ab\u6211\u4eec\u7f29\u70b9\u4e86\u3002\u8fd9\u4e2a\u9053\u7406\u548c\u865a\u6811\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u628a\u6211\u4eec\u9700\u8981\u7684\u70b9\u6458\u51fa\u6765\u4e71\u641e\u3002\n\n\u7136\u540e\u6bcf\u6b21\u66f4\u65b0\u5728\u8fd9\u68f5\u65b0\u6811\u4e0a\u66b4\u8df3\u5373\u53ef\u3002\n\n\u7b54\u6848\u5c31\u662f$\\sum{(dep-sum+f_c)*id(c)}$(\u8003\u8651\u628a\u9664\u53bb\u4ee4\u6811\u53ef\u91cd\u6392\u7684\u95ee\u53f7\u4e4b\u5916\u7684\u90fd\u6539\u6210\u67d0\u4e2a\u7279\u5b9a\u5b57\u7b26)\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<set>\n#define N 100005\n#define mp make_pair\nusing namespace std;\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint n,v[N*2],w[N*2],head[N*2],nxt[N*2],cnt,f[N],siz[N],p,ffa[N],sum[N];\nlong long ans,dis[N];\nset<int>st;\nset<int>sub[N];\nset<pair<int,int>>tot;\nvoid add(int a,int b,int c)\n{\n\tv[++cnt]=b;\n\tw[cnt]=c;\n\tnxt[cnt]=head[a];\n\thead[a]=cnt;\n}\nvoid dfs1(int x,int fa)\n{\n\tsiz[x]=1;\n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tif(v[i]==fa)continue;\n\t\tdfs1(v[i],x);\n\t\tsiz[x]+=siz[v[i]];\n\t\tf[x]=max(f[x],siz[v[i]]);\n\t}\n\tf[x]=max(f[x],n-siz[x]);\n\tif(f[x]<f[p])p=x;\n}\nvoid dfs2(int x,int fa)\n{\n\tans+=dis[x];\n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tif(v[i]==fa)continue;\n\t\tdis[v[i]]=dis[x]+w[i];\n\t\tdfs2(v[i],x);\n\t}\n}\nvoid doit(int x,int fa,int rt)\n{\n\tffa[x]=rt;sub[rt].insert(x);siz[x]=1;\n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tif(v[i]==fa)continue;\n\t\tdoit(v[i],x,rt);\n\t\tsiz[x]+=siz[v[i]];\n\t}\n}\nint find(int x)\n{\n\tset<pair<int,int> >::iterator it=tot.lower_bound(mp(n-x+1,0));\n\tint ff=0,GG=(*it).second;\n\tif(it!=tot.end()&&(*it).first==n-x+1&&GG!=ffa[x])ff=1;\n\tif(ffa[x])\n\t{\n\t\ttot.erase(mp(sum[ffa[x]],ffa[x]));\n\t\tsum[ffa[x]]--;\n\t\ttot.insert(mp(sum[ffa[x]],ffa[x]));\n\t}\n\tif(ff)\n\t{\n\t\tint res=*sub[GG].begin();\n\t\tst.erase(res);sub[GG].erase(res);\n\t\tif(sub[GG].size())st.insert(*sub[GG].begin());\n\t\ttot.erase(mp(sum[ffa[res]],ffa[res]));\n\t\tsum[ffa[res]]--;\n\t\ttot.insert(mp(sum[ffa[res]],ffa[res]));\n\t\treturn res;\n\t}\n\telse\n\t{\n\t\tset<int>::iterator itt=st.begin();\n\t\tif(ffa[x]==ffa[*itt]&&x!=p)itt++;\n\t\tst.erase(itt);\n\t\tint res=*itt;\n\t\tif(ffa[res])\n\t\t{\n\t\t\tsub[ffa[res]].erase(res);\n\t\t\tif(sub[ffa[res]].size())st.insert(*sub[ffa[res]].begin());\n\t\t\ttot.erase(mp(sum[ffa[res]],ffa[res]));\n\t\t\tsum[ffa[res]]--;\n\t\t\ttot.insert(mp(sum[ffa[res]],ffa[res]));\n\t\t}\n\t\treturn res;\n\t}\n\treturn 0;\n}\nsigned main()\n{\n\tn=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,y,z);add(y,x,z);\n\t}\n\tf[0]=0x3f3f3f3f;\n\tdfs1(1,0);dfs2(p,0);\n\tprintf(\"%lld\\n\",ans*2);st.insert(p);\n\tfor(int i=head[p];i;i=nxt[i])\n\t{\n\t\tdoit(v[i],p,v[i]);\n\t\tsum[v[i]]=siz[v[i]]*2;\n\t\tsiz[p]+=siz[v[i]];\n\t\ttot.insert(mp(sum[v[i]],v[i]));\n\t\tst.insert(*sub[v[i]].begin());\n\t}\n\tfor(int i=1;i<=n;i++)printf(\"%d \",find(i));\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1611498237,
        "uid": 179600,
        "name": "shao0320",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1168D \u3010Anagram Paths\u3011"
    }
]