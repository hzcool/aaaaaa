[
    {
        "content": "\u819c\u4f60\u8d5b\u7684\u65f6\u5019\u5f00\u59cb\u770b\u9519\u9898\u610f\uff0c\u540e\u6765\u79d2\u51fa\u3002\u3002\u3002\n\n---\n\n\u524d\u9762\u6709\u9898\u89e3\u63d0\u5230\u201c\u5f3a\u8fde\u901a\u5206\u91cf\u201d\uff1f\u7136\u800c\u8fd9\u662f\u65e0\u5411\u56feQwQ\n\n\u8003\u8651\u201c\u4e0d\u662f\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\u201d\u5982\u4f55\u6c42\u51fa\u3002\n\n\u6211\u4eec\u77e5\u9053\u540c\u4e00\u4e2a**\u8fb9\u53cc\u8fde\u901a\u5206\u91cf**\u4e2d\uff0c\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u5b58\u5728\u81f3\u5c11\u4e24\u6761\u65e0\u91cd\u8fb9\u7684\u7b80\u5355\u8def\u5f84\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u540c\u4e00\u4e2a\u8fb9\u53cc\u5185\u7684\u70b9\u4e4b\u95f4\u6ca1\u6709\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\u3002\u3002\u3002\n\n\u4e8e\u662f\u5728\u6b64\u9898\u4e2d\uff0c\u540c\u4e00\u8fb9\u53cc\u5185\u7684\u70b9\u53ef\u4ee5\u7f29\u5728\u4e00\u8d77\uff0c\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\u3002\u3002\n\n---\n\n\u7531\u4e8e\u662f\u65e0\u5411\u56fe\uff0c\u56e0\u6b64\u7f29\u5b8c\u8fb9\u53cc\u4e4b\u540e\u5c31\u4e0d\u5b58\u5728\u73af\uff0c\u53d8\u6210\u4e86\u4e00\u68f5\u6811\u3002\n\n\u6b64\u65f6\uff0c\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u90fd\u662f\u552f\u4e00\u7684\u4e86\uff0c\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\u6570\u5c31\u662f\u6811\u4e0a\u8ddd\u79bb\u3002\n\n\u4e8e\u662f\u95ee\u9898\u53d8\u6210\u4e86\u6c42\u6811\u7684\u76f4\u5f84...\n\n\u7b80\u5355\u8bf4\u4e00\u4e0b\u6c42\u6cd5\uff1a\u4efb\u9009\u4e00\u4e2a\u70b9\uff0c\u627e\u5230\u4e0e\u5b83\u6700\u8fdc\u7684\u4e00\u4e2a\u70b9\uff1b\n\n\u518d\u4ece\u627e\u5230\u7684\u70b9\u51fa\u53d1\uff0c\u627e\u5230\u4e0e\u5b83\u6700\u8fdc\u7684\u70b9\uff1b\n\n\u4e24\u70b9\u8ddd\u79bb\u5c31\u662f\u76f4\u5f84\u3002\n\n---\n\n\u4ee3\u7801\u4f9b~~\u6284\u88ad~~\u53c2\u8003\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<stack>\n\nconst int N=300005,M=600005;\n\nint n,m,head[N],dis[N],from[N];\nint cnt,cir_cnt,dfn[N],low[N],cir[N];\nint _head[N],_dis[N];\n\nstruct Edge\n{\n    int from,next,to;\n};\nEdge E[M],_E[M];\nbool vis[M];\n\nvoid add(int u,int v)\n{\n    static int tot=0;\n    E[++tot].next=head[u];\n    E[tot].to=v;\n    head[u]=tot;\n}\nvoid _add(int u,int v)\n{\n    static int tot=0;\n    _E[++tot].next=_head[u];\n    _E[tot].from=u;\n    _E[tot].to=v;\n    _head[u]=tot;\n}\n\nvoid tarjan(int u,int fa)\n{\n    static std::stack<int> s;\n    low[u]=dfn[u]=++cnt;\n    s.push(u);\n    for(int i=head[u];i;i=E[i].next)\n    {\n    \tint v=E[i].to;\n        if(v==fa)continue;\n        if(!dfn[v])\n        {\n            tarjan(v,u);\n            low[u]=std::min(low[u],low[v]);\n        }\n        else\n        {\n            if(cir[v]==0)low[u]=std::min(low[u],dfn[v]);\n        }\n    }\n    if(low[u]!=dfn[u])return;\n    cir_cnt++;\n    while(1)\n    {\n        int x=s.top();\n        s.pop();\n        cir[x]=cir_cnt;\n        if (x==u)break;\n    }\n}\n\nint bfs(int s)\n{\n    int res=s;\n    memset(dis,0x3f,sizeof(dis));\n    std::queue<int> q;\n    q.push(s);\n    dis[s]=0;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];i;i=E[i].next)\n        {\n            int v=E[i].to;\n            if(dis[v]!=0x3f3f3f3f)continue;\n            dis[v]=dis[u]+1;\n            q.push(v);\n            if(dis[v]>dis[res])res=v;\n        }\n    }\n    return res;\n}\n\nint _bfs(int s)\n{\n    int res=s;\n    memset(_dis,0x3f,sizeof(_dis));\n    std::queue<int> q;\n    q.push(s);\n    _dis[s]=0;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for(int i=_head[u];i;i=_E[i].next)\n        {\n            int v=_E[i].to;\n            if(_dis[v]!=0x3f3f3f3f)continue;\n            _dis[v]=_dis[u]+1;\n            q.push(v);\n            if(_dis[v]>_dis[res])res=v;\n        }\n    }\n    return res;\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=0;i<m;++i)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        add(u,v);\n        add(v,u);\n    }\n    tarjan(1,0);\n    for(int u=1;u<=n;++u)\n    {\n        for(int i=head[u];i;i=E[i].next)\n        {\n            int v=E[i].to;\n            if(cir[u]!=cir[v])\n            {\n                _add(cir[u],cir[v]);\n            }\n        }\n    }\n    int s=_bfs(cir[1]);\n    s=_bfs(s);\n    printf(\"%d\",_dis[s]);\n}\n\n```\n\n---\n\n\u4ea4\u8fd9\u9898\u7684\u65f6\u5019\u5927\u6982\u78b0\u4e0a$system\\;test$\uff0c\u65ad\u65ad\u7eed\u7eed\u8dd1\u4e86\u534a\u4e2a\u5c0f\u65f6\u624d\u51fa\u7ed3\u679c\uff0c\u771f\\*\\*\u9178\u723d\u3002\u3002\u3002",
        "postTime": 1561817063,
        "uid": 60489,
        "name": "\u5c0f\u83dc\u9e1f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1000E \u3010We Need More Bosses\u3011"
    },
    {
        "content": "\u4e00\u904d AC \uff0c\u975e\u5e38\u8212\u9002\uff0c\u5199\u7bc7\u9898\u89e3\uff0c\u7eaa\u5ff5\u4e00\u4e0b\n\n\u539f\u9898\u94fe\u63a5[\u3010We Need More Bosses\u3011](https://www.luogu.org/problem/CF1000E)\n\n\u9996\u5148\u8bfb\u9898\uff0c\u91cd\u70b9\u5e94\u8be5\u653e\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u90a3\u5c31\u662f**\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9**\n\n\u4f55\u4e3a\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\uff1f\n\n\uff08~~\u697c\u4e3b\u592a\u61d2\uff0c\u61d2\u5f97\u753b\u56fe~~\uff09\n\n\u4f8b\u5982\n\n1 -- 2, 2 -- 3, 1 -- 3, 3 -- 4\uff0c\u8fd9\u4e2a\u56fe\uff0c\n\n\u5982\u679c\u6211\u4eec\u8981\u4ece 1 \u53f7\u70b9\u8d70\u5230 4 \u53f7\u70b9\uff0c\n\n\u4e00\u5171\u6709\u4e24\u6761\u8def\u5f84\uff0c\u4e00\u6761\u662f 1 -> 2 -> 3 -> 4\n\n\u53e6\u4e00\u6761\u662f 1 -> 3 -> 4\n\n\u8fd9\u5c31\u662f\u975e\u5e38\u660e\u663e\u7684\u89c4\u5f8b\u4e86\uff1a\u56fe\u4e2d\u5728\u201c\u73af\u201d\u4e0a\u7684\u8fb9\u90fd\u4e00\u5b9a\u4e0d\u662f\u201c\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\u201d\n\n\u56e0\u4e3a\u5728\u65e0\u5411\u56fe\u4e0a\u4ece\u73af\u4e0a\u4e00\u70b9\u5230\u73af\u4e0a\u53e6\u5916\u4e00\u70b9\u4e00\u5b9a\u6709\u81f3\u5c11\u4e24\u6761\u8def\u5f84\n\n\u800c\u6240\u8c13\u7684\u73af\u5c31\u662f\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u4e86\n\n\u90a3\u4e48\u5c31\u53ea\u8981\u6c42\u4e00\u4e2a\u8fb9\u53cc\uff0c\u7136\u540e\u7f29\u4e0b\u70b9\uff0c\u6700\u540e\u518d\u6c42\u4e00\u4e2a\u76f4\u5f84\u5c31\u597d\u4e86\n\n\u7b97\u6cd5\u6d41\u7a0b\n\n\t\t1\u3001\u6c42\u8fb9\u53cc\uff1a\u6c42\u51fa\u6765\u6865\uff0c\u7136\u540e\u8fd8\u8fde\u7740\u7684\u5c31\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fb9\u53cc\n\n\t\t2\u3001\u7f29\u70b9\uff1a\u904d\u5386\u4e00\u4e0b\u539f\u56fe\uff0c\u91cd\u5efa\u65b0\u56fe\u5c31\u597d\u4e86\n\n\t\t3\u3001\u6c42\u76f4\u5f84\uff1a\u4efb\u610f\u627e\u4e00\u4e2a\u70b9\uff0c\u627e\u5230\u4e0e\u8fd9\u4e2a\u70b9\u8ddd\u79bb\u6700\u8fdc\u7684\u70b9\uff0c\u518d\u627e\u5230\u4e0e\u8fd9\u4e2a\u70b9\u8ddd\u79bb\u6700\u8fdc\u7684\u70b9\uff0c\u8fd9\u4e2a\u8ddd\u79bb\u5c31\u662f\u76f4\u5f84\n\n\u5927\u5bb6\u5199\u4ee3\u7801\u65f6\u8981~~\u50cf\u6211\u4e00\u6837~~\u6709\u6e05\u6670\u7684\u601d\u8def\n\n\u4ee3\u7801\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\nconst int maxm = 1e6 + 10;\nconst int maxn = 3e5 + 10;\n\ninline int read() {\n    char c = getchar(); int x = 0, f = 1;\n    for (; c > '9' || c < '0'; c = getchar()) if (c == '-') f = -1;\n    for (; c >='0' && c <='9'; c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48);\n    return x * f;\n}\n\nint ver[maxm], nxt[maxm], head[maxn], tot = 1;\nint dfn[maxn], low[maxn], cnt_;\nbool cut[maxm];\n\nvoid add (int u, int v) {\n    ver[++ tot] = v, nxt[tot] = head[u], head[u] = tot;\n    ver[++ tot] = u, nxt[tot] = head[v], head[v] = tot;\n}\n\nvoid tarjan (int x, int in_edge) {\n    dfn[x] = low[x] = ++ cnt_;\n    for (register int i = head[x]; i; i = nxt[i]) {\n        int y = ver[i];\n        if (!dfn[y]) {\n            tarjan (y, i);\n            low[x] = min (low[x], low[y]);\n            if (low[y] > dfn[x])\n                cut[i] = cut[i ^ 1] = 1;\n        }\n        else if (i != (in_edge ^ 1))\n            low[x] = min (low[x], dfn[y]);\n    }\n}\n\nint id[maxn], gg;\nvoid dfs (int x) {\n    id[x] = gg;\n    for (register int i = head[x]; i; i = nxt[i]) {\n        int y = ver[i];\n        if (id[y] || cut[i]) continue;\n        dfs (y);\n    }\n}\n\nvector <int> h[maxn];\nbool vis[maxn];\nint s_, id_;\n\nvoid dfs_ (int x, int s) {\n    vis[x] = 1;\n    if (s > s_)\n        s_ = s, id_ = x;\n    for (register int i = 0; i < h[x].size (); i ++)\n        if (!vis[h[x][i]])\n            dfs_ (h[x][i], s + 1);\n}\n\nvoid djj_lxy () {\n    int n = read(), m = read();\n    for (; m; m --)\n        add (read (), read ());\n    for (register int i = 1; i <= n; i ++)\n        if (!dfn[i]) tarjan (i, 0);\n    for (register int i = 1; i <= n; i ++)\n        if (!id[i]) ++ gg, dfs (i);\n    for (register int i = 1; i <= n; i ++)\n        for (register int j = head[i]; j; j = nxt[j])\n            if (id[i] != id[ver[j]])\n                h[id[i]].push_back (id[ver[j]]);\n    dfs_ (1, 1);\n    memset (vis, 0, sizeof vis);\n    dfs_ (id_, 1);\n    printf (\"%d\\n\", s_ - 1);\n}\n\nint main () {\n    djj_lxy ();\n}\n\n```\n\n\u90a3\u8fd9\u9053\u9898\u5c31\u8fd9\u6837\u5427\uff0c\u5927\u5bb6\u6ce8\u610f\u5728\u65b0 Noip \u524d\u8981\u628a\u77e5\u8bc6\u597d\u597d\u7684\u590d\u4e60\u4e00\u904d\n\n\u795d\u5927\u5bb6\u65b0 Noip rp ++\n\n\u4e5f\u5e0c\u671b\u81ea\u5df1\u80fd\u66f4\u52aa\u529b\u4e00\u4e9b\uff0c\u52a0\u6cb9\u3002",
        "postTime": 1571826299,
        "uid": 162867,
        "name": "shame_djj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1000E \u3010We Need More Bosses\u3011"
    },
    {
        "content": "[We Need More Bosses](https://www.luogu.com.cn/problem/CF1000E)\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u627e\u5230\u4e24\u4e2a\u70b9\uff0c\u4f7f\u5f97\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u8def\u5f84\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\u6700\u591a\u3002\n\n### \u601d\u8def\u5206\u6790\n\n\u6211\u4eec\u5148\u6765\u601d\u8003\u4e00\u4e0b\u5982\u679c\u5df2\u77e5\u4e24\u4e2a\u70b9\uff0c\u600e\u4e48\u6c42\u4e24\u4e2a\u70b9\u4e4b\u95f4\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf\u3002\n\n\u5728\u4e00\u822c\u7684\u65e0\u5411\u8fde\u901a\u56fe\u4e2d\uff0c\u6211\u4eec\u5bb9\u6613\u53d1\u73b0\uff0c\u5176\u5b9e\u7b54\u6848\u5c31\u662f\u4e24\u70b9\u6240\u5728\u7684**\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u5272\u8fb9\u6570\u91cf**\u3002\n\n- \u663e\u7136\u8fd9\u5c31\u662f\u5272\u8fb9\u7684\u5b9a\u4e49\u4e4b\u4e00\u3002\n\n\u800c\u6211\u4eec\u53c8\u77e5\u9053\u53e6\u4e00\u4e2a\u6027\u8d28\uff1a\u5982\u679c\u628a\u56fe\u7f29\u70b9\u6210\u4e00\u9897\u6811\uff0c\u90a3\u4e48\u6811\u4e0a\u7684\u8fb9\u4e0e\u539f\u56fe\u4e2d\u7684\u5272\u8fb9\u4e00\u4e00\u5bf9\u5e94\u3002\n\n- \u8fd8\u662f\u5f88\u663e\u7136\uff0c\u60f3\u60f3\u6211\u4eec\u7f29\u70b9\u662f\u600e\u4e48\u7f29\u7684\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8f7b\u677e\u7684\u5f97\u5230\u505a\u6cd5\uff1a\u5148\u628a\u56fe\u7f29\u70b9\u6210\u4e00\u9897\u6811\uff0c\u518d\u6c42\u6811\u7684\u76f4\u5f84\u3002\n\n\uff08\u8fd9\u4e0d\u5c31\u662f\u677f\u5b50\u5957\u677f\u5b50\u5417\n\n### \u4ee3\u7801\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1200100;//300000*2*2\uff08\u53cc\u5411\u8fb9\uff0c\u4e24\u5f20\u56fe\n\nint n,m,idx=1,cnt,in1,in2,num,p,q;\nint to[N],nxt[N],head[N],rhead[N];\nint dfn[N],low[N],bridge[N],rid[N];\nint dis[N];\n\nvoid add(int h[],int u,int v){idx++;to[idx]=v;nxt[idx]=h[u];h[u]=idx;}\n\nvoid tarjan(int s,int last){\n    dfn[s]=low[s]=++cnt;\n    for(int i=head[s];i;i=nxt[i]){\n        int v=to[i];\n        if(i==(last^1)) continue;\n        if(!dfn[v]){\n            tarjan(v,i);\n            low[s]=min(low[s],low[v]);\n            if(dfn[s]<=low[v]){bridge[i]=bridge[i^1]=1;}//\u627e\u6865\n        }\n        else low[s]=min(low[s],dfn[v]);\n    }\n}\n\nvoid dfs_0(int s){\n    rid[s]=num;//\u8bb0\u5f55\u70b9\u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\n    for(int i=head[s];i;i=nxt[i]){\n        int v=to[i];\n        if(bridge[i]||rid[v]) continue;\n        dfs_0(v);\n    }\n}\n\nvoid dfs_1(int s,int fa,int &u){\n    for(int i=rhead[s];i;i=nxt[i]){\n        int v=to[i];\n        if(v==fa) continue;\n        dis[v]=dis[s]+1;\n        if(dis[0]<dis[v]){dis[0]=dis[v];u=v;}//\u627e\u6811\u7684\u76f4\u5f84\n        dfs_1(v,s,u);\n    }\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&in1,&in2);\n        add(head,in1,in2);\n        add(head,in2,in1);\n    }\n    tarjan(1,-1);\n    for(int i=1;i<=n;i++)\n        if(!rid[i]){num++;dfs_0(i);}\n    for(int s=1;s<=n;s++)\n        for(int i=head[s];i;i=nxt[i])\n            if(rid[s]!=rid[to[i]]){\n                add(rhead,rid[s],rid[to[i]]);//\u53ea\u7528\u52a0\u4e00\u6b21\uff0c\u56e0\u4e3a\u53e6\u4e00\u4e2a\u70b9\u4e5f\u4f1a\u52a0\u4e00\u6b21\n            }\n    dis[1]=0;dfs_1(1,0,p);\n    dis[0]=dis[p]=0;dfs_1(p,0,q);//\u4e24\u904ddfs\u6c42\u6811\u7684\u76f4\u5f84\n    cout<<dis[0]<<'\\n';\n    return 0;\n}\n```",
        "postTime": 1675335353,
        "uid": 767096,
        "name": "TKXZ133",
        "ccfLevel": 4,
        "title": "We Need More Bosses \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7edd\u4e0d\u662f\u7d2b\u9898\u3002\u3002\u3002\n\n------------\n\n\u9898\u76ee\u7684\u610f\u601d\u5176\u5b9e\u662f\u8ba9\u4f60\u6c42\u4e00\u4e2a\u65e0\u5411\u65e0\u91cd\u8fb9\u56fe\u7684\u76f4\u5f84\u3002\n\n\u5bf9\u4e8e\u6c42\u76f4\u5f84\u7684\u95ee\u9898\u6211\u4eec\u4ee5\u524d\u7814\u7a76\u8fc7\u6811\u7684\u76f4\u5f84\uff0c\u53ef\u4ee5\u4e24\u904ddfs\u6216\u8005\u4e24\u8fb9bfs\u89e3\u51b3\u3002\n\n\u5bf9\u4e8e\u56fe\u663e\u7136\u4e0d\u80fd\u8fd9\u6837\u89e3\u51b3\uff0c\u56e0\u4e3a\u56fe\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u7b80\u5355\u8def\u5f84\u4e0d\u552f\u4e00\u3002\n\n\u90a3\u600e\u4e48\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\n\n\u80fd\u4e0d\u80fd\u628a\u73af\u90fd\u641e\u6389\u5462\uff1f\n\n\u4e8e\u662f\u4e4e\uff0c\u6211\u4eec\u60f3\u5230\u4e86\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n\u56e0\u6b64\u5148\u7528tarjan\u7f29\u4e00\u4e0b\u70b9\uff0c\u91cd\u65b0\u5efa\u56fe\u8dd1\u4e00\u4e2a\u76f4\u5f84\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002\n\n------------\n\n\nAC\u4ee3\u7801\u5982\u4e0b\uff1a\n\n`3053ms 23816kb`\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nnamespace StandardIO {\n\n    template<typename T>inline void read (T &x) {\n        x=0;T f=1;char c=getchar();\n        for (; c<'0'||c>'9'; c=getchar()) if (c=='-') f=-1;\n        for (; c>='0'&&c<='9'; c=getchar()) x=x*10+c-'0';\n        x*=f;\n    }\n\n    template<typename T>inline void write (T x) {\n        if (x<0) putchar('-'),x*=-1;\n        if (x>=10) write(x/10);\n        putchar(x%10+'0');\n    }\n\n}\n\nusing namespace StandardIO;\n\nnamespace Solve {\n    \n    const int N=300300;\n    \n    int n,m,bcnt,index;\n    vector<int>graph[N],new_graph[N];\n    int low[N],dfn[N],belong[N],instack[N],dis[N];\n    stack<int>st;\n    \n    inline void tarjan (int now,int father) {\n        low[now]=dfn[now]=++index;\n        st.push(now),instack[now]=1;\n        for (register int i=0; i<graph[now].size(); ++i) {\n            int to=graph[now][i];\n            if (to==father) continue;\n            if (!dfn[to]) {\n                tarjan(to,now);\n                low[now]=min(low[now],low[to]);\n            } else if (instack[to]) {\n                low[now]=min(low[now],dfn[to]);\n            }\n        }\n        if (low[now]==dfn[now]) {\n            int v=-1;++bcnt;\n            while(v!=now){\n                v=st.top(),st.pop();\n                instack[v]=0,belong[v]=bcnt;\n            }\n        }\n    }\n    \n    inline void dfs (int now,int fa) {\n        dis[now]=dis[fa]+1;\n        for (register int i=0; i<new_graph[now].size(); ++i) {\n            int to=new_graph[now][i];\n            if (to!=fa) dfs(to,now);\n        }\n    }\n    \n    inline int diameter () {\n        dfs(1,0);\n        int fur=1;\n        for (register int i=1; i<=bcnt; ++i) {\n            if (dis[i]>dis[fur]) fur=i;\n        }\n        dfs(fur,0);\n        int ans=0;\n        for (register int i=1; i<=bcnt; ++i) {\n            ans=max(ans,dis[i]);\n        }\n        return ans-1;\n    }\n\n    inline void solve () {\n        read(n),read(m);\n        for (register int i=1; i<=m; ++i) {\n            int x,y;\n            read(x),read(y);\n            graph[x].push_back(y);\n            graph[y].push_back(x);\n        }\n        for (register int i=1; i<=n; ++i) {\n            if (!dfn[i]) tarjan(i,0);\n        }\n        for (register int i=1; i<=n; ++i) {\n            for (register int j=0; j<graph[i].size(); ++j) {\n                int to=graph[i][j];\n                if (belong[i]!=belong[to]) {\n                    new_graph[belong[i]].push_back(belong[to]);\n                }\n            }\n        }\n        write(diameter());\n    }\n}\n\nusing namespace Solve;\n\nint main () {\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n    solve();\n}\n\n```",
        "postTime": 1539499919,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1000E \u3010We Need More Bosses\u3011"
    },
    {
        "content": "## \u9898\u610f\u6574\u7406\uff1a\n\n\u7ed9\u5b9a\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6c42\u4efb\u610f\u4e24\u70b9\u95f4 **\u5fc5\u987b\u7ecf\u8fc7** \u7684\u8def\u5f84\u6761\u6570\u6700\u591a\u4e3a\u591a\u5c11\u3002\n\n## \u89e3\u9898\u601d\u8def\uff1a\n\n\u6211\u4eec\u9700\u8981\u6c42\u51fa **\u5fc5\u987b\u7ecf\u8fc7** \u7684\u8fb9\u6570\uff0c\u8003\u8651\u4ec0\u4e48\u60c5\u51b5\u4e0b **\u4e00\u6761\u8fb9\u5bf9\u7b54\u6848\u6ca1\u6709\u8d21\u732e**\uff0c\u5373\u8fd9\u6761\u8fb9\u5728\u8fd9\u4e2a\u8def\u5f84\u4e2d\u53ef\u4ee5\u7528\u522b\u7684\u8fb9\u4ee3\u66ff\u6389\u3002\n\n\u80fd\u4ee3\u66ff\u6389\u4e00\u6761\u8fb9\uff0c\u7b49\u4ef7\u4e8e\uff1a\u5bf9\u4e8e\u4e00\u6761\u8fb9 $(u,v)$\uff0c\u5220\u53bb\u5b83\uff0c\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u522b\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u5b58\u5728\u8def\u5f84 $u\\to x_1\\to\\cdots\\to x_k\\to v$\u3002\n\n\u4ed4\u7ec6\u60f3\u60f3\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f **\u8fb9\u53cc\u8fde\u901a\u5206\u91cf** \u7684\u5b9a\u4e49\u561b\uff0c\u5728\u4e00\u4e2a E-DCC \u4e2d\uff0c\u6240\u6709\u7684\u8fb9\u90fd\u662f\u53ef\u4ee5\u66ff\u6362\u6389\u7684\uff0c\u5269\u4e0b\u7684\u8fb9\uff08\u4e5f\u5c31\u662f\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u7684\u8fb9\uff09\u5fc5\u5b9a\u662f **\u5272\u8fb9**\uff08\u4ed4\u7ec6\u60f3\u60f3\u5b9a\u4e49\u5c31\u53ef\u4ee5\u5f97\u51fa\uff09\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a **\u6781\u5927\u7684\u8fb9\u53cc\u8fde\u901a\u5206\u91cf** \u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u5426\u5b9a\u4e86\u8fd9\u4e2a\u8fb9\u53cc\u4e2d\u7684\u8fb9\u7684\u8d21\u732e\uff0c\u7136\u540e\u4fdd\u7559\u7684\u8fb9\u5c31\u662f **\u5272\u8fb9**\u3002\u53bb\u6389\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u540e\uff0c\u6574\u4e2a\u56fe\u5c31 **\u6ca1\u6709\u4e86\u73af**\uff0c\u6210\u4e3a\u4e00\u9897 **\u6811**\u3002\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u68f5\u6811\u4e0a\uff0c\u4e24\u70b9\u95f4\u8ddd\u79bb\u7684\u6700\u5927\u503c\u3002\u6240\u4ee5\u6211\u4eec\u5c31\u5728\u6811\u4e0a\u6c42 **\u76f4\u5f84** \u4fbf\u662f\u7b54\u6848\u3002\n\n## \u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\nusing namespace std;\n#define MAXN 300005\nint head1[MAXN],nxt1[MAXN<<1],to1[MAXN<<1],tot1=1;\nint head2[MAXN],nxt2[MAXN<<1],to2[MAXN<<1],tot2=1;\nint dfn[MAXN],low[MAXN],tick;\nint s[MAXN],top,bel[MAXN],idx,n,m;\nint ans,f[MAXN];\nvoid add(int x,int y){\n    to1[++tot1]=y,nxt1[tot1]=head1[x],head1[x]=tot1;\n}\nvoid add_(int x,int y){\n    to2[++tot2]=y,nxt2[tot2]=head2[x],head2[x]=tot2;\n}\nvoid dfs(int u,int lst){//tarjan\u6c42\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\n    dfn[u]=low[u]=++tick;\n    s[++top]=u;\n    for(int i=head1[u];i;i=nxt1[i]){\n        int v=to1[i];\n        if((i^1)==lst) continue;\n        if(!dfn[v]){\n            dfs(v,i);\n            low[u]=min(low[u],low[v]);\n        }\n        else if(!bel[v]) low[u]=min(low[u],dfn[v]);\n    }\n    if(low[u]==dfn[u]){\n        int v;\n        idx++;\n        do{\n            v=s[top--];\n            bel[v]=idx;\n        }while(v!=u);\n    }\n}\nvoid DFS(int u,int fa){//\u6811\u5f62dp\u6c42\u6811\u7684\u76f4\u5f84\n    for(int i=head2[u];i;i=nxt2[i]){\n        int v=to2[i];\n        if(v==fa) continue;\n        DFS(v,u);\n        ans=max(ans,f[u]+f[v]+1);\n        f[u]=max(f[u],f[v]+1);\n    }\n}\nint main(){\n    cin>>n>>m;\n    for(int x,y,i=1;i<=m;i++){\n        cin>>x>>y;\n        add(x,y);\n        add(y,x);\n    }\n    for(int i=1;i<=n;i++){\n        if(!dfn[i]) dfs(i,0);\n    }\n    for(int u=1;u<=n;u++){//\u7f29\u70b9\u5efa\u6811\n        for(int i=head1[u];i;i=nxt1[i]){\n            int v=to1[i];\n            if(bel[v]!=bel[u]) add_(bel[u],bel[v]);\n        }\n    }\n    DFS(1,0);\n    cout<<ans;\n    return 0;\n}\n```\n",
        "postTime": 1666317423,
        "uid": 166234,
        "name": "Aiopr_2378",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1000E We Need More Bosses"
    },
    {
        "content": "\u672c\u9898\u5927\u591a\u6570\u9898\u89e3\u5747\u7528\u5230\u8fde\u901a\u5206\u91cf\u3001\u7f29\u70b9\u7b49\u79d1\u6280\uff0c\u4f46\u5176\u5b9e\u672c\u9898\u968f\u4fbf\u5efa\u751f\u6210\u68ee\u6797\u6811\u4e0a\u5dee\u5206\u5904\u7406\u51fa\u8fb9\u6743\u8dd1\u751f\u6210\u68ee\u6797\u76f4\u5f84\u5373\u53ef\u3002\n\n\u5177\u4f53\u5730\uff1a\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u8fb9\u662f\u201c\u5fc5\u7ecf\u8fb9\u201d\u5f53\u4e14\u4ec5\u5f53\u662f\u5728\u8be5\u56fe\u7684\u751f\u6210\u68ee\u6797\u4e2d\u7684\u201c\u6781\u5927\u751f\u6210\u6811\u201d\u8fde\u63a5\u4e24\u4e2a\u751f\u6210\u68ee\u6797\u7684\u552f\u4e00\u8fb9\u3002\n\n\u5176\u5145\u5206\u6027\u6bd4\u8f83\u663e\u7136\uff0c\u5728\u5176\u8fde\u63a5\u7684\u4e24\u68f5\u751f\u6210\u6811\u5185\u5404\u9009\u4e00\u70b9\u5373\u53ef\u786e\u5b9a\u4e00\u6761\u5fc5\u7ecf\u8be5\u8fb9\u7684\u8def\u5f84\u3002\n\n\u5176\u5fc5\u8981\u6027\u4e5f\u6bd4\u8f83\u597d\u8bc1\u660e\uff1a\u5bf9\u4e8e\u4e0d\u5728\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u4e00\u5b9a\u4e0d\u4f1a\u662f\u201c\u5fc5\u7ecf\u8fb9\u201d\uff0c\u5047\u5b9a\u8be5\u8fb9\u4e3a$<u,v>$\uff0c\u90a3\u4e48\u4efb\u4e00\u7ecf\u8fc7$<u,v>$\u7684\u8def\u5f84\u4e00\u5b9a\u53ef\u4ee5\u7528\u6811\u4e0a\u8def\u5f84$(u,v)$\u66ff\u6362$<u,v>$\u56e0\u6b64\u4e00\u5b9a\u4e0d\u662f\u5fc5\u7ecf\u8fb9\u3002 \u4e14\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0**\u4efb\u4e00\u201c\u5fc5\u7ecf\u8fb9\u201d$<x,y>$\u5728\u539f\u56fe\u4e0a\u5220\u9664\u540e\u5176\u70b9$x,y$\u4e00\u5b9a\u5c5e\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u8fde\u901a\u5757**\u3002\u540c\u6837\u53ef\u4ee5\u53cd\u8bc1\u5176\u5145\u5206\u6027\u4e0e\u5fc5\u8981\u6027\u5728\u6b64\u4e0d\u6d6a\u8d39\u7bc7\u7ae0\u5177\u4f53\u4ecb\u7ecd\u3002\u800c\u6ee1\u8db3\u5982\u4e0a\u6761\u4ef6\u5f53\u4e14\u4ec5\u5f53\u5176\u5728\u751f\u6210\u6811\u4e0a\u8fde\u63a5\u7684\u4e24\u68f5\u6811\u95f4\u4e0d\u5b58\u5728\u4efb\u610f\u4e00\u6761\u975e\u6811\u8fb9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vgl3ts4j.png)\n\n\u4f8b\u5982\u8fb9$<3,4>$\uff0c\u5176\u6ee1\u8db3\u82e5\u5c06\u8fb9$<3,4>$\uff0c\u65ad\u5f00\u4e4b\u540e\u4e00\u5b9a\u4f1a\u5206\u88c2\u6210\u4e24\u4e2a\u8fde\u901a\u5757\u3002\n\n\u4e0a\u8ff0\u7ed3\u8bba\u7684\u5fc5\u8981\u6027\u4e0e\u5145\u5206\u6027\u8bc1\u660e\u4e5f\u8f83\u4e3a\u7b80\u5355\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5177\u4f53\u5730\u8981\u600e\u4e48\u5904\u7406\u5462\uff1f\n\n\u6211\u4eec\u53d1\u73b0\u5982\u679c\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u90e8\u5206\u6709\u201c\u975e\u6811\u8fb9\u201d\uff0c\u5047\u5b9a\u8fd9\u6761\u201c\u975e\u6811\u8fb9\u201d\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u662f$u,v$\uff0c\u90a3\u4e48\u6811\u4e0a\u8def\u5f84$(u,v)$\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u3002\n\n\u6211\u4eec\u79f0\u6811\u8fb9$<u,v>$\u88ab\u975e\u6811\u8fb9$<x,y>$\u8986\u76d6\u5f53\u4e14\u4ec5\u5f53\u6811\u8fb9$<u,v>$\u5728\u70b9$x,y$\u7684\u6811\u4e0a\u8def\u5f84$(x,y)$\u4e0a\u3002\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u505a\u6cd5\u5c31\u6bd4\u8f83\u5957\u8def\u4e86\uff1a\n\n$1.$\u5bf9\u4e8e\u56fe\u7684\u6bcf\u4e2a\u8fde\u901a\u5757\u5efa\u4e00\u68f5\u751f\u6210\u6811\u5f62\u6210\u751f\u6210\u68ee\u6797\uff0c\u5206\u79bb\u51fa\u975e\u6811\u8fb9\u3002\n\n$2.$\u7528\u6811\u4e0a\u5dee\u5206\u7ef4\u62a4\u4e00\u6761\u8fb9\u88ab\u201c\u8986\u76d6\u201d\u7684\u6b21\u6570\u3002\n\n$3.$\u5bf9\u4e8e\u88ab\u8986\u76d6\u6b21\u6570\u4e3a$0$\u7684\u8fb9\u4fee\u6539\u70b9\u6743\u4e3a$1$\u3002\n\n$4.$\u5bf9\u4e8e\u751f\u6210\u68ee\u6797\u4e2d\u7684\u6bcf\u68f5\u751f\u6210\u6811\u8dd1\u51fa\u4e00\u6761\u76f4\u5f84\u5c06\u957f\u5ea6\u53d6$\\max$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(M\\ \\log (NM))$\n\n\u8fd9\u65f6\u5019\u53ef\u80fd\u6709\u548c\u7a9d\u4e00\u6837\u7684\u5c0f\u53ef\u7231\u4f1a\u8ff7\u60d1\uff0c\u96be\u9053\u4efb\u610f\u4e00\u68f5\u751f\u6210\u6811\u7684\u89e3\u90fd\u662f\u6700\u4f18\u89e3\u5417qwq\uff1f\n\n\n\u9996\u5148\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u5728\u4e00\u68f5\u751f\u6210\u6811\u4e0a\u662f\u201c\u975e\u6811\u8fb9\u201d\u90a3\u4e48\u4ed6\u4e00\u5b9a\u4e0d\u662f\u201c\u5fc5\u7ecf\u8fb9\u201d\uff0c\u56e0\u4e3a\u5176\u4e00\u5b9a\u53ef\u4ee5\u88ab\u66ff\u6362\u6210\u4e00\u6bb5\u6811\u4e0a\u8def\u5f84\u3002\n\n\u800c\u5bf9\u4e8e\u4efb\u4e00\u201c\u5fc5\u7ecf\u8fb9\u201d\u5728\u4efb\u4e00\u68f5\u751f\u6210\u6811\u4e0a\u4e00\u5b9a\u662f\u201c\u6811\u8fb9\u201d\u3002\u56e0\u4e3a\u5982\u679c\u5176\u4e0d\u662f\u6811\u8fb9\uff0c\u90a3\u4e48\u8be5\u8fde\u901a\u5757\u7684\u751f\u6210\u6811\u4e00\u5b9a\u4e0d\u8fde\u901a\u3002\n\n\u800c\u5bf9\u4e8e\u4efb\u4e00\u8def\u5f84$(u,v)$\u5176\u7ecf\u8fc7\u5fc5\u7ecf\u8fb9\u5fc5\u5b9a\u53ea\u6709\u4e00\u79cd\uff0c\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u627e\u51fa\u4e86\u4e24\u79cd\u4e0d\u540c\u7684\u5fc5\u7ecf\u8fb9\u65b9\u6848\u610f\u5473\u7740\u6211\u4eec\u627e\u5230\u7684\u201c\u5fc5\u7ecf\u8fb9\u201d\u81f3\u5c11\u6709\u4e00\u6761\u53ef\u4ee5\u4e0d\u88ab\u201c\u7ecf\u8fc7\u201d\u4e0e\u201c\u5fc5\u7ecf\u8fb9\u201d\u7684\u5b9a\u4e49\u77db\u76fe\u3002\n\n\n```cpp\n#include <iostream>\n#include <cstring>\n\nnamespace wxy{\n\tconst int N = 3e5 + 5;\n\t#define x first\n\t#define y second\n\ttypedef std::pair<int,int> PII;\n\tint head[N],fail[N << 1],edge[N << 1],fa[N][30],d[N],ff[N],tot;\n\tint n,m,ans,aw[N],w[N],df[N];\n\tbool vis[N],v[N],root[N];\n\tPII edg[N];\n\tinline void add(int x,int y){\n        edge[++tot] = y;\n        fail[tot] = head[x];\n        head[x] = tot;\n    }\n    inline void dfs1(int x){\n        for (int i = 1; (1 << i) <= d[x]; i++)\n            fa[x][i] = fa[fa[x][i - 1]][i - 1];\n        for (int i = head[x];i;i =fail[i]){\n            int v = edge[i];\n            if (d[v] == -1){\n                d[v] = d[x] + 1;\n                fa[v][0] = x;\n                dfs1(v);\n            }\n        }\n    }\n    inline int lca(int x,int y){\n        if (d[x] < d[y]) std::swap(x,y);\n        int i,j;\n        for (i = 0;(1 << i) <= d[x]; i++);\n        for (j = i; j >= 0; j--)\n            if (d[fa[x][j]] >= d[y]) x = fa[x][j];\n        if (x == y) return x;\n        for (j = i; j >= 0; j--){\n            if (fa[x][j] != fa[y][j]){\n                x = fa[x][j];\n                y = fa[y][j];\n            }\n        }\n        return fa[x][0];\n    }\n    inline void dfs2(int x){\n    \tfor (int i = head[x];i;i = fail[i]){\n    \t\tint v = edge[i];\n    \t\tif (v == fa[x][0]) continue;\n    \t\tdfs2(v);\n    \t\taw[x] += aw[v];\n    \t}\n    \tif (aw[x] == 0) w[x] = 1;\n    }\n    inline void dp(int x){\n    \tfor (int i = head[x];i; i = fail[i]){\n    \t\tint v = edge[i];\n    \t\tif (v == fa[x][0]) continue;\n    \t\tdp(v);\n    \t\tans = std::max(ans,df[x] + df[v] + w[v]);\n    \t\tdf[x] = std::max(df[x],df[v] + w[v]);\n    \t}\n    }\n    inline int get(int x){\n    \tif (ff[x] == x) return x;\n    \telse return ff[x] = get(ff[x]);\n    }\n    inline void merge(int x,int y){ff[get(x)] = ff[get(y)];}\n\tinline void main(){\n\t\tmemset(d,-1,sizeof d);ans = tot = 0;\n\t\tstd::cin >> n >> m;\n\t\tfor (int i = 1; i <= n; i++) ff[i] = i;\n\t\tfor (int i = 0; i < m; i++){\n\t\t\tint a,b;std::cin >> a >> b;\n\t\t\tedg[i] = std::make_pair(a,b);\n\t\t\tif (get(a) == get(b)) continue;\n\t\t\tvis[i] = true;merge(a,b);add(a,b);add(b,a);\n\t\t}\n\t\tfor (int i = 1; i <= n; i++){\n\t\t\tif (d[i] == -1){\n\t\t\t\troot[i] = true;\n\t\t\t\td[i] = 0;\n\t\t\t\tdfs1(i);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < m; i++){\n\t\t\tif (!vis[i]){\n\t\t\t\tint a = edg[i].x,b = edg[i].y;\n\t\t\t\taw[a]++;aw[b]++;\n\t\t\t\taw[lca(a,b)] -= 2;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tif (root[i]) dfs2(i);\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tif (root[i]) dp(i);\n\t\tstd::cout << ans;\n\t}\n}signed main(){wxy::main();return 0;}\n```\n",
        "postTime": 1611087166,
        "uid": 317459,
        "name": "RyexAwl",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1000E \u3010We Need More Bosses\u3011\u6811\u4e0a\u5dee\u5206 \u751f\u6210\u6811 \u76f4\u5f84"
    },
    {
        "content": "~~\u7b2c 521 \u4e2a A \u6389\u6b64\u9898\u7684\uff0c\u6765\u5199\u4e00\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e0b~~\n### \u9898\u76ee\u5927\u610f\uff1a\n\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u8981\u6c42\u9009\u62e9\u4e24\u4e2a\u70b9 $s$ \u548c $t$\uff0c\u4f7f\u4ece $s$ \u5230 $t$ \u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\u6570\u6700\u591a\uff0c\u8f93\u51fa\u6700\u591a\u7ecf\u8fc7\u7684\u8fb9\u6570\u3002\n\n------------\n### \u89e3\u6cd5\uff1a\n\ntarjan \u7f29\u70b9\u540e\u6c42\u76f4\u5f84\u3002\n\n------------\n\n### \u601d\u8def\uff1a\n\u5bb9\u6613\u53d1\u73b0\u5728\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u4efb\u610f\u4e24\u4e2a\u70b9\uff0c\u4ed6\u4eec\u95f4\u81f3\u5c11\u6709\u4e24\u6761\u4e0d\u91cd\u590d\u7684\u8def\u7ebf\u3002\n\n\u6240\u4ee5\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u8fb9\u662f\u5bf9\u7b54\u6848\u6ca1\u6709\u8d21\u732e\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u5ffd\u7565\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5229\u7528 tarjan \u7f29\u70b9\uff0c\u628a\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u90fd\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u628a\u56fe\u53d8\u6210\u4e86\u4e00\u68f5\u6811\u3002\n\n\u56e0\u4e3a\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u8def\u7ebf\u552f\u4e00\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u6c42\u6811\u4e0a\u76f8\u8ddd\u8ddd\u79bb\u6700\u957f\u7684\u4e24\u70b9\uff0c\u4e5f\u5c31\u662f\u6811\u7684\u76f4\u5f84\u3002\n\n\u6811\u7684\u76f4\u5f84\u76f8\u4fe1\u5927\u5bb6\u5e94\u8be5\u90fd\u4f1a\u4e86\uff0c\u4e24\u904d dfs \u5c31\u53ef\u4ee5\u4e86\u3002\n\n------------\n\n### AC \u4ee3\u7801\u5982\u4e0b\uff1a\n~~\u7406\u89e3\u4e86\u518d\u6284~~\n```c\n#include<bits/stdc++.h>\nusing namespace std;\n\nstruct edge\n{\n\tint from,to;\n}e[300005];\nvector<int>a[300005],G[300005];\nint n,m,dfn[300005],low[300005],st[300005],bj[300005],bel[300005],top,cnt,Cnt;\nvoid tarjan(int x,int fa)\n{\n\tdfn[x]=low[x]=++cnt;\n\tst[++top]=x;\n\tbj[x]=1;\n\tint l=a[x].size();\n\tfor(int i=0;i<l;i++)\n\t{\n\t\tint v=a[x][i];\n\t\tif(v==fa)\tcontinue;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v,x);\n\t\t\tlow[x]=min(low[x],low[v]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(bj[v])\tlow[x]=min(low[x],low[v]);\n\t\t}\n\t}\n\tif(dfn[x]==low[x])\n\t{\n\t\tCnt++;\n\t\twhile(1)\n\t\t{\n\t\t\tint rnm=st[top];\n\t\t\ttop--;\n\t\t\tbel[rnm]=Cnt;\n\t\t\tbj[rnm]=0;\n\t\t\tif(rnm==x)\tbreak;\n\t\t}\n\t}\n}\nint dep[300005],mx,S;\nvoid dfs(int x,int fa)\n{\n\tdep[x]=dep[fa]+1;\n\tif(dep[x]>mx)\n\t{\n\t\tmx=dep[x];\n\t\tS=x;\n\t}\n\tint l=G[x].size();\n\tfor(int i=0;i<l;i++)\n\t{\n\t\tint v=G[x][i];\n\t\tif(v==fa)\tcontinue;\n\t\tdfs(v,x); \n\t}\n}\nint dep2[300005],ans;\nvoid dfs2(int x,int fa)\n{\n\tdep2[x]=dep2[fa]+1;\n\tans=max(ans,dep2[x]-1);\n\tint l=G[x].size();\n\tfor(int i=0;i<l;i++)\n\t{\n\t\tint v=G[x][i];\n\t\tif(v==fa)\tcontinue;\n\t\tdfs2(v,x); \n\t}\n}\nsigned main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\ta[x].push_back(y);\n\t\ta[y].push_back(x);\n\t\te[i].from=x,e[i].to=y;\n\t}\n\ttarjan(1,0);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint X=bel[e[i].from],Y=bel[e[i].to];\n\t\tif(X==Y)\tcontinue;\n\t\tG[X].push_back(Y);\n\t\tG[Y].push_back(X);\n\t}\n\tdfs(1,0);\n\tdfs2(S,0);\n\tcout<<ans<<endl;\n\treturn 0;\n} \n```\n",
        "postTime": 1675147604,
        "uid": 541164,
        "name": "2021fhm",
        "ccfLevel": 4,
        "title": "\u6d1b\u8c37 CF1000E We Need More Bosses\u9898\u89e3"
    },
    {
        "content": "\u601d\u8def\uff1a\n\n\u5148\u601d\u8003\u5982\u679c\u662f\u4e2a\u6811\u600e\u4e48\u505a,\u5f88\u663e\u7136\u5c31\u662f\u6811\u7684\u76f4\u5f84,\u4f46\u5982\u679c\u662f\u4e2a\u56fe\u5462?\n\n\u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u56fe\u4e2d\u7684\u4e24\u4e2a\u70b9,\u5982\u679c\u4e24\u70b9\u8def\u5f84\u4e0a\u5b58\u5728\u73af,\u90a3\u4e48\u73af\u4e0a\u7684\u8fb9\u4e00\u5b9a\u4e0d\u662f\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9,\u5373\u73af\u4e0a\u7684\u8fb9\u4e0d\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e,\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u73af\u53bb\u6389\u3002\n\n\u628a\u65e0\u5411\u56fe\u4e2d\u7684\u73af\u53bb\u6389,\u8fd9\u4e0d\u5c31\u662f\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u70b9\u5417,\u5728\u7f29\u70b9\u540e\u56fe\u5c31\u53d8\u6210\u4e86\u6811,\u76f4\u63a5\u6c42\u6811\u7684\u76f4\u5f84\u5373\u53ef\u3002\n\n\u6574\u7406\u4e00\u4e0b\uff1a\n\n1. \u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u70b9\n\n1. \u6c42\u6811\u7684\u76f4\u5f84\n\n\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define N 300010\nusing namespace std;\ninline int read(){\n\tchar ch=getchar();int s=0,f=1;\n\twhile((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n\tif(ch=='-') ch=getchar(),f=-1;\n\twhile(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n\treturn f*s;\n}\ninline void write(long long x) {\n\tif(x<0) putchar('-'),x=-x;\n\tchar s[25];\n\tint n=0;\n\twhile(x||!n){\n\t\ts[n++]='0'+x%10,x/=10;\n\t}\n\twhile(n--) putchar(s[n]);\n}\nint n,m,s,scc,w[N],dfn[N],low[N],t,st[N],top,vis[N],belong[N],dp1[N],dp2[N],ans;\nvector<int>e[N],ee[N];\nvoid tarjan(int now,int fa){//tarjan\u6c42\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\n\tdfn[now]=low[now]=++t;st[++top]=now;vis[now]=1;\n\tfor(int i=0;i<e[now].size();i++)\n\t\tif(!dfn[e[now][i]]&&e[now][i]!=fa)\n\t\t\ttarjan(e[now][i],now),low[now]=min(low[now],low[e[now][i]]);\n\t\telse if(vis[e[now][i]]&&e[now][i]!=fa)\n\t\t\tlow[now]=min(low[now],dfn[e[now][i]]);\n\tif(dfn[now]==low[now]){\n\t\tscc++;\n\t\tdo{\n\t\t\tvis[st[top]]=0;\n\t\t\tbelong[st[top]]=scc;\n\t\t}while(st[top--]!=now);\n\t}\n}\nvoid dp(int now,int fa){//\u6811\u5f62dp\u6c42\u6811\u7684\u76f4\u5f84\n\tfor(int i=0;i<ee[now].size();i++)\n\t\tif(ee[now][i]!=fa){\n\t\t\tdp(ee[now][i],now);\n\t\t\tif(dp1[now]<dp1[ee[now][i]]+1)\n\t\t\t\tdp2[now]=dp1[now],dp1[now]=dp1[ee[now][i]]+1;\n\t\t\telse if(dp2[now]<dp1[ee[now][i]]+1)\n\t\t\t\tdp2[now]=dp1[ee[now][i]]+1;\n\t\t\tans=max(ans,dp1[now]+dp2[now]);\n\t\t}\n}\nint main(){\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++){\n\t\tint u=read(),v=read();\n\t\te[u].push_back(v);\n\t\te[v].push_back(u);\n\t}\n\ttarjan(1,0);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=0;j<e[i].size();j++)\n\t\t\tif(belong[i]!=belong[e[i][j]])\n\t\t\t\tee[belong[i]].push_back(belong[e[i][j]]);//\u7f29\u70b9\n\tdp(belong[1],0);\n\twrite(ans);\n\treturn 0;\n}\n```",
        "postTime": 1660365407,
        "uid": 304534,
        "name": "qnqfff",
        "ccfLevel": 6,
        "title": "CF1000E We Need More Bosses \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1000E)\n\n[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://chenyu-w.github.io/2022/04/18/CF1000E%20We%20Need%20More%20Bosses/)\n\n## \u524d\u8a00\n\n\u8fd9\u9898\u672c\u6765\u662f\u5bd2\u5047\u542cfls\u5927\u4f6c\u8bb2\u8bfe\u7684\u65f6\u5019\u8bfe\u4e0a\u8bb2\u7684\u4f8b\u9898\uff0c\u4f46\u662f\u5f53\u65f6\u7531\u4e8e\u592a\u83dc\uff0c\u6ca1\u5199\u51fa\u6765\uff0c\u6700\u8fd1\u628a\u8fd9\u9898\u7ed9\u8865\u4e86\u3002\n\n### \u524d\u7f6e\u829d\u58eb\n\ntarjan \u7b97\u6cd5\uff0ce-DCC \u7684\u7f29\u70b9\uff0c\u6811\u7684\u76f4\u5f84\n\n## \u5206\u6790\n\n\u770b\u5230\u9898\u76ee\u4e2d**\u5fc5\u987b\u7ecf\u8fc7**\u8fd9\u51e0\u4e2a\u5b57\uff0c\u5c31\u60f3\u8d77\u4e86 e-DCC \u7684\u4e00\u4e2a\u91cd\u8981\u6027\u8d28: \u540c\u4e00\u4e2a e-DCC \u4e2d\u7684\u4efb\u610f\u4e24\u70b9\u90fd\u6709\u4e24\u6761\u53ca\u4ee5\u4e0a\u76f8\u79bb\u7684\u8def\u5f84(\u5728[\u5197\u4f59\u8def\u5f84](https://www.luogu.com.cn/problem/P2860)\u8fd9\u4e00\u9898\u4e2d\u4e5f\u6709\u6240\u4f53\u73b0)\uff0c\u6211\u4eec\u6765\u7b80\u5355\u8bc1\u660e\u4e00\u4e0b\u3002\n\n\u5982\u679c\u540c\u4e00\u4e2a e-DCC \u4e2d\u7684\u4e24\u4e2a\u70b9 $u,v$ \u4e0d\u5b58\u5728\u76f8\u79bb\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u5c31\u610f\u5473\u7740\uff0c\u5b83\u4eec\u4e4b\u95f4\u5fc5\u5b9a\u5b58\u5728\u7740\u4e00\u4e9b\u5fc5\u7ecf\u8fb9\uff0c\u5982\u679c\u628a\u8fb9\u5220\u53bb\uff0c\u90a3\u4e48 $u,v$ \u4e24\u70b9\u5c31\u4e0d\u8fde\u901a\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e9b\u8fb9\u662f\u8fd9\u4e2a\u56fe\u4e2d\u7684\u5272\u8fb9\uff0c\u4e0e e-DCC \u7684\u6027\u8d28\u76f8\u77db\u76fe\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651 e-DCC \u7f29\u70b9\uff0c\u7f29\u5b8c\u70b9\u540e\u5efa\u4e00\u5f20\u65b0\u56fe\u3002\u663e\u7136\uff0c\u65b0\u56fe\u662f\u4e00\u4e2a**\u68ee\u6797**\uff0c\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u6bcf\u4e00\u6761\u8fb9\u90fd\u662f\u5fc5\u7ecf\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u76f4\u63a5\u627e\u4e00\u4e0b\u6811\u7684\u76f4\u5f84\u5c31\u53ef\u4ee5\u4e86\u3002\n\n## \u4ee3\u7801\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int N = 3e5 + 10, M = N << 1;\nint h[N], e[M], ne[M], idx;\nint H[N], E[M], NE[M];\nint dfn[N], low[N], id[N], stk[N];\nbool vis[N];\nint res;\nint cnt, tt, t;\nint d1[N], d2[N];\n\ninline void add(int h[], int e[], int ne[], int a, int b)\n{\n    e[idx] = b;\n    ne[idx] = h[a];\n    h[a] = idx++;\n}\n\ninline void tarjan(int u, int p) // e-DCC \u7f29\u70b9\u677f\u5b50\n{\n    dfn[u] = low[u] = ++t;\n    stk[++tt] = u;\n    for (int i = h[u]; ~i; i = ne[i])\n    {\n        int v = e[i];\n        if (!dfn[v])\n        {\n            tarjan(v, i);\n            low[u] = min(low[u], low[v]);\n        }\n        else if (i != (p ^ 1))\n            low[u] = min(low[u], dfn[v]);\n    }\n    if (dfn[u] == low[u])\n    {\n        int v;\n        cnt++;\n        do {\n            v = stk[tt--];\n            id[v] = cnt;\n        } while (u != v);\n    }\n}\n\ninline void dfs(int u, int p) // \u6c42\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u6811\u7684\u76f4\u5f84\n{\n    vis[u] = true;\n    for (int i = H[u]; ~i; i = NE[i])\n    {\n        int v = E[i];\n        if (v == p) continue;\n        dfs(v, u);\n        int d = d1[v] + 1;\n        if (d > d1[u]) d2[u] = d1[u], d1[u] = d;\n        else if (d > d2[u]) d2[u] = d;\n    }\n    res = max(res, d1[u] + d2[u]);\n}\n\nint main()\n{\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    memset(h, -1, sizeof h);\n    memset(H, -1, sizeof H);\n    while (m--)\n    {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        add(h, e, ne, x, y);\n        add(h, e, ne, y, x);\n    }\n    for (int i = 1; i <= n; i++)\n        if (!id[i])\n            tarjan(i, -1);\n    idx = 0;\n    for (int i = 1; i <= n; i++)\n        for (int j = h[i]; ~j; j = ne[j])\n        {\n            int k = e[j];\n            if (id[i] != id[k])\n                add(H, E, NE, id[i], id[k]); // \u5efa\u65b0\u56fe\n        }\n    for (int i = 1; i <= cnt; i++)\n        if (!vis[i]) // \u6ce8\u610f\u539f\u56fe\u4e0d\u4e00\u5b9a\u8fde\u901a\n            dfs(i, -1);\n    printf(\"%d\\n\", res);\n    return 0;\n}\n```\n\n",
        "postTime": 1650281635,
        "uid": 587248,
        "name": "wcywcywcywcy",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF1000E We Need More Bosses"
    },
    {
        "content": "\u6211\u4eec\u9605\u8bfb\u9898\u76ee\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\uff1a\u5f53\u4e24\u4e2a\u70b9\u5904\u4e8e\u540c\u4e00\u4e2a\u8fb9\u53cc\u4e2d\u65f6\uff0c\u8fd9\u4e24\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u5b58\u5728**\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9**\u3002\n\n\u800c\u5f53\u4e24\u4e2a\u70b9\u5904\u4e8e\u4e0d\u540c\u7684\u8fb9\u53cc\u4e2d\u65f6\uff0c**\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9**\u7684\u6570\u91cf\u5c31\u662f\u5b83\u4eec\u8def\u5f84\u4e0a\u7684\u5272\u8fb9\u6570\u91cf\u3002\n\n\u4e8e\u662f\u6211\u4eec\u6c42\u51fa\u8fb9\u53cc\uff0c\u7f29\u70b9\u7136\u540e\u8dd1\u6700\u957f\u94fe\u5373\u53ef\u3002\n\nCode\uff1a\n\n```cpp\n#include <cstdio>\n#include <vector>\nusing namespace std ;\nconst int MAXN = 3e5 + 10 ;\nint n , m , dfn[MAXN] , low[MAXN] , stack[MAXN] , top , cntc , col[MAXN] , cnt ;\nint dis[MAXN] , dis2[MAXN] , maxx = -1 , p , ans = -1 ;\nbool vis[MAXN] ;\nvector <int> G[MAXN] , G2[MAXN] ;\nint min (int a , int b) {\n\treturn a < b ? a : b ;\n}\nvoid tarjan (int x , int fa) {\n\tdfn[x] = low[x] = ++cnt ;\n\tstack[++top] = x ;\n\tvis[x] = 1 ;\n\tfor (int i = 0 ; i < G[x].size () ; i++) {\n\t\tint v = G[x][i] ;\n\t\tif (v == fa) continue ;\n\t\tif (!dfn[v]) {\n\t\t\ttarjan (v , x) ;\n\t\t\tlow[x] = min (low[x] , low[v]) ;\n\t\t}\n\t\telse if (vis[v])\n\t\t\tlow[x] = min (low[x] , dfn[v]) ;\n\t}\n\tif (dfn[x] == low[x]) {\n\t\tcntc++ ;\n\t\twhile (1) {\n\t\t\tcol[stack[top]] = cntc ;\n\t\t\t//printf (\"%d \" , stack[top]) ; \n\t\t\tvis[stack[top]] = 0 ;\n\t\t\tif (stack[top--] == x) break ;\n\t\t}\n\t\t//printf (\"\\n\") ;\n\t}\n} \nvoid dfs (int x , int fa) {\n\tif (dis[x] > maxx) {\n\t\tmaxx = dis[x] ;\n\t\tp = x ;\n\t}\n\tfor (int i = 0 ; i < G2[x].size () ; i++) {\n\t\tint v = G2[x][i] ;\n\t\tif (v == fa) continue ;\n\t\tdis[v] = dis[x] + 1 ;\n\t\tdfs (v , x) ;\n\t}\n}\nvoid dfs2 (int x , int fa) {\n\tif (dis2[x] > ans) ans = dis2[x] ;\n\tfor (int i = 0 ; i < G2[x].size () ; i++) {\n\t\tint v = G2[x][i] ;\n\t\tif (v == fa) continue ;\n\t\tdis2[v] = dis2[x] + 1 ;\n\t\tdfs2 (v , x) ;\n\t}\n}\nint main () {\n\tscanf (\"%d %d\" , &n , &m) ;\n\tfor (int i = 1 ; i <= m ; i++) {\n\t\tint u , v ;\n\t\tscanf (\"%d %d\" , &u , &v) ;\n\t\tG[u].push_back (v) ;\n\t\tG[v].push_back (u) ;  \n\t} \n\ttarjan (1 , 0) ;\n\tfor (int i = 1 ; i <= n ; i++)\n\t\tfor (int j = 0 ; j < G[i].size () ; j++) {\n\t\t\tint v = G[i][j] ;\n\t\t\tif (col[i] != col[v])\n\t\t\t\tG2[col[i]].push_back (col[v]) ; \n\t\t}\n\tdfs (1 , 0) ;\n\tdfs2 (p , 0) ;\n\tprintf (\"%d\" , ans) ;\n\treturn 0 ;\n}\n```",
        "postTime": 1593063823,
        "uid": 122641,
        "name": "GIFBMP",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1000E \u3010We Need More Bosses\u3011"
    },
    {
        "content": "\u7f29\u70b9\u4ee5\u540e \u6c42\u6811\u76f4\u5f84\n\n(\u4ee3\u7801\u53bb\u6389vis\u6570\u7ec4\u540e\u4f1a\u6709\u95ee\u9898\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u3002\u9519\u8bef\u627e\u4e86\u597d\u4e45\u90fd\u6ca1\u627e\u51fa\u6765)\n\n\u4e0d\u53bb\u6389vis\u6570\u7ec4\u662f\u53ef\u4ee5\u8fc7\u7684\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ninline int read(){int x=0,f=1,ch=getchar(); while(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();} while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();} return x*f;}\ninline void write(int x){if (x<0) putchar('-'),x=-x; if (x>=10) write(x/10); putchar(x%10+'0');}\ninline void writeln(int x){write(x); puts(\"\");}\nconst int N=6e5+5;\nstruct edge{\n\tint link,next;\n}e[N<<1],E[N<<1];\nint tot,head[N],n,m,h[N];\ninline void add_edge(int u,int v){\n\te[++tot]=(edge){v,head[u]}; head[u]=tot;\n}\ninline void insert(int u,int v){\n\tadd_edge(u,v); add_edge(v,u);\n}\ninline void init(){\n\tn=read(); m=read();\n\tfor (int i=1;i<=m;i++){\n\t\tinsert(read(),read());\n\t}\n}\nint dfn[N],low[N],scc,belong[N],tim,top,stack[N];\ninline void pop(){\n\tbelong[stack[top--]]=scc;\n}\nvoid tarjan(int u,int fa){\n\tdfn[u]=low[u]=++tim; stack[++top]=u;\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tif (v==fa) {\n\t\t\tfa=0;\n\t\t\tcontinue;\n\t\t}\n\t\tif (!dfn[v]){\n\t\t\ttarjan(v,u);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t\tif (dfn[u]<low[v]){\n\t\t\t\tscc++;\n\t\t\t\twhile (top&&stack[top]!=v) pop();\n\t\t\t\tpop();\n\t\t\t}\n\t\t}else{\n\t\t\tlow[u]=min(low[u],dfn[v]);\n\t\t}\n\t}\n}\ninline void Add_edge(int u,int v){\n\tE[++tot]=(edge){v,h[u]}; h[u]=tot;\n}\ninline void ins(int u,int v){\n\tAdd_edge(u,v); Add_edge(v,u);\n}\nint dis[N];\nbool vis[N];\nvoid dfs(int u,int fa){\n\tdis[u]=dis[fa]+1; vis[u]=1;\n\tfor (int i=h[u];i;i=E[i].next){\n\t\tint v=E[i].link;\n\t\tif (v!=fa&&!vis[v]){\n\t\t\tdfs(v,u);\n\t\t}\n\t}\n}\ninline void solve(){\n\ttot=0;\n\ttarjan(1,0);\n\tif (top) scc++;\n\twhile (top) pop();\n\tfor (int u=1;u<=n;u++){\n\t\tint p=belong[u];\n\t\tfor (int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].link; int q=belong[v];\n\t\t\tif (p!=q){\n\t\t\t\tins(p,q);\n\t\t\t}\n\t\t}\n\t}\n\tdfs(1,0); int mx=1;\n\tfor (int i=2;i<=scc;i++){\n\t\tif (dis[i]>dis[mx]){\n\t\t\tmx=i;\n\t\t}\n\t}\n\tmemset(vis,0,sizeof(vis));\n\tdfs(mx,0); mx=0;\n\tfor (int i=1;i<=scc;i++){\n\t\tmx=max(mx,dis[i]);\n\t}\n\twriteln(mx-1);\n}\nint main(){\n\tinit(); \n\tsolve();\n\treturn 0;\n} \n```",
        "postTime": 1533912832,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1000E \u3010We Need More Bosses\u3011"
    }
]