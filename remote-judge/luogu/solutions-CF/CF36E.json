[
    {
        "content": "\u5982\u679c\u53ea\u9009\u4e00\u6761\u8def\u5f84\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\u4e2a\u6b27\u62c9\u8def / \u6b27\u62c9\u56de\u8def\u95ee\u9898\u3002\n\n\u8003\u8651\u4e24\u6761\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u7ed9\u5b9a\u7684\u56fe\u4e00\u5b9a\u8981\u662f\u4e24\u4e2a\u6b27\u62c9\u56fe\u7684\u5e76\u3002\u4e00\u4e2a\u6b27\u62c9\u56fe\u53ef\u4ee5\u6709 $0/2$ \u4e2a\u5947\u70b9\uff0c\u90a3\u4e48\u4e0d\u96be\u5f97\u5230\u8fd9\u4e2a\u5e76\u53ef\u4ee5\u6709 $0/2/4$ \u4e2a\u5947\u70b9\u3002\u5bf9\u8fde\u901a\u6027\uff0c\uff08\u6ce8\u610f\u4e00\u5b9a\u8981\u4e0d\u8003\u8651\u5b64\u7acb\u70b9\uff09\u4e00\u4e2a\u6b27\u62c9\u56fe\u5fc5\u987b\u8fde\u901a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5e76\u6700\u591a\u6709\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u3002\u63a5\u4e0b\u6765\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n1. \u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u3002\u90a3\u4e48\u4e00\u5b9a\u662f\u4e24\u4e2a\u5404\u662f\u4e00\u4e2a\u6b27\u62c9\u56fe\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u4e2a\u975e\u5e38\u7b80\u5355\uff1b\n\n2. \u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u3002\n\n   1. $0/2$ \u4e2a\u5947\u70b9\u3002\u90a3\u4e48\u76f4\u63a5\u6c42\u6b27\u62c9\u8def\u5c31\u597d\u4e86\uff0c\u4f46\u662f\u6ce8\u610f\u5230 $L_1,L_2>0$ \u8fd9\u4e2a\u9650\u5236\uff0c\u5982\u679c\u8fb9\u6570\u4e3a $1$ \u7684\u8bdd\u5c31\u4e0d\u53ef\u80fd\u4e86\uff0c\u5426\u5219\u53ef\u4ee5\u628a\u6700\u540e\u4e00\u6761\u8fb9\u62c6\u51fa\u6765\uff1b\n\n   2. $4$ \u4e2a\u5947\u70b9\u3002\u8fd9\u4e2a\u662f\u91cd\u5934\u620f\uff08\u5bf9\u6211\u6765\u8bf4\uff09\u3002\u90a3\u4e48\u62c6\u51fa\u6765\u7684\u4e24\u4e2a\u5e76\u5b83\u7684\u6b27\u62c9\u56fe\uff0c\u4e00\u5b9a\u662f\u5404\u53d6\u4e86\u8fd9 $4$ \u4e2a\u4e2d\u7684\u4e24\u4e2a\u3002\u521d\u6b65\u8003\u8651\u679a\u4e3e\u8fd9\u4e2a\u5206\u5e03\uff0c\u5bf9\u5176\u4e2d\u4e00\u5bf9\u5148\u627e\u5230\u5b83\u4eec\u95f4\u4efb\u610f\u4e00\u6761\u8def\u5f84\uff0c\u65b9\u4fbf\u8d77\u89c1\u627e\u7b80\u5355\u8def\uff08\u4e00\u5b9a\u5b58\u5728\uff09\u3002\u90a3\u4e48\u4e0d\u96be\u77e5\u9053\uff0c\u5269\u4e0b\u6765\u7684\u4e00\u5b9a\u53ea\u6709\u90a3\u53e6\u4e24\u4e2a\u70b9\u662f\u5947\u70b9\u3002\u4f46\u662f\uff01\uff01\u8fde\u901a\u6027\u4e0d\u80fd\u4fdd\u8bc1\uff01\uff01\uff01\n\n      \u8fd9\u65f6\u5019\u4e0d\u8981\u81ea\u95ed\u3002\u6211\u4eec\u5047\u8bbe\uff0c\u628a\u8fd9\u6761\u8def\u5f84\u5220\u53bb\u540e\u5269\u4e0b\u6765\u88ab\u62c6\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5206\u91cf\u3002\u5176\u4e2d\u6709\u4e24\u4e2a\u70b9\u662f\u5947\u70b9\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u53ef\u80fd\u662f\u5206\u6563\u5728\u4e0d\u540c\u8fde\u901a\u5206\u91cf\uff0c\u4e5f\u6709\u53ef\u80fd\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u3002\u4f46\u662f\u524d\u8005\u662f\u4e0d\u53ef\u80fd\u7684\uff01\uff01\uff01\u6709\u4e2a\u7ed3\u8bba\uff0c\u4e00\u4e2a\u56fe\u7684\u5947\u4e2a\u6570\u4e00\u5b9a\u662f\u5076\u6570\uff01\u8bc1\u660e\u5f02\u5e38\u7b80\u5355\uff0c\u6bcf\u6761\u8fb9\u4f1a\u8d21\u732e\u4e24\u4e2a\u5ea6\u6570\uff0c\u4e8e\u662f\u603b\u5ea6\u6570\u662f\u5076\u6570\uff0c\u90a3\u4e48\u6240\u6709\u5947\u70b9\u7684\u5ea6\u6570\u548c\u4e5f\u662f\u5076\u6570\uff0c\u90a3\u4e48\u5947\u70b9\u4e00\u5b9a\u662f\u5076\u6570\u4e2a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u62c6\u9664\u6765\u82e5\u5e72\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\u4e00\u5b9a\u6709\u4e00\u4e2a\u662f\u5305\u542b\u4e24\u4e2a\u5947\u70b9\uff0c\u5176\u5b83\u90fd\u6ca1\u6709\u3002\u90a3\u4e48\u4e0d\u96be\u60f3\u5230\uff0c\u5bf9\u8fd9\u4e2a\u8fde\u901a\u5206\u91cf\u6c42\u6b27\u62c9\u8def\uff0c\u7136\u540e\u628a\u5176\u5b83\u8fde\u901a\u5206\u91cf\u7ed9\u5d4c\u5230\u8fd9\u6761\u7b80\u5355\u8def\u4e2d\uff08\u4e00\u5b9a\u53ef\u884c\uff0c\u56e0\u4e3a\u65e0\u5947\u70b9\u7684\u56fe\u7684\u6b27\u62c9\u8def\u8d77\u7ec8\u70b9\uff08\u540c\u4e00\u4e2a\uff09\u4efb\u610f\uff09\u3002\n\n      \u4f46\u662f\u8fd9\u6837\u505a\u592a\u9ebb\u70e6\u4e86\uff0c\u6211\u5199\u5230\u4e00\u534a\u653e\u5f03\u4e86\uff08\u5c0f\u96fe\uff09\u3002\u53d1\u73b0\u6709\u4e00\u79cd\u5f88\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u5728\u4efb\u610f\u4e24\u4e2a\u5947\u70b9\u4e4b\u95f4\u8fde\u865a\u62df\u8fb9\uff0c\u7136\u540e\u8dd1\u6b27\u62c9\u8def\uff0c\u7136\u540e\u518d\u65ad\u5f00\u3002\u8fd9\u79cd\u4ee5\u9000\u4e3a\u8fdb\u7684\u601d\u60f3\uff0c\u662f\u6211\u6240\u60f3\u4e0d\u5230\u7684\u4e86\u3002\n\n\u5b9e\u73b0\u4e5f\u9700\u8981\u6ce8\u610f\u6ce8\u610f\u3002\u4e00\u5f00\u59cb\u4ed7\u7740\u6570\u636e\u8303\u56f4\u6c34\u5c31\u60f3\u7528 `map` \u5b58\u90bb\u63a5\u77e9\u9635\uff0c\u4f46\u7531\u4e8e\u91cd\u8fb9\u7684\u5b58\u5728\uff0c\u53cd\u800c\u6ca1\u6709\u90bb\u63a5\u8868\u597d\u5199\u3002\u3002\u3002\n\n**_[code](https://www.luogu.com.cn/paste/42c11tot)_**",
        "postTime": 1615560091,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "CF36E"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problem/CF36E).\n# \u9898\u89e3\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8fd9\u9053\u9898\u5f88\u8003\u5bdf\u4ee3\u7801\u5b9e\u73b0\u53ca\u8c03\u8bd5\u80fd\u529b$www$...  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6211\u4eec\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u56fe\u5206\u7c7b\u8ba8\u8bba:  \n1. \u56fe\u6709\u4e00\u4e2a\u8fde\u901a\u5757.  \n- \u6ca1\u6709\u5ea6\u4e3a\u5947\u6570\u7684\u70b9  \n\u4efb\u610f\u9009\u70b9\u6c42\u51fa\u4e00\u6761\u6b27\u62c9\u8def\u5f84, \u5e76\u4efb\u610f\u5212\u5206\u4e3a\u4e24\u6bb5\u5373\u53ef.  \n- \u6709\u4e24\u4e2a\u5947\u5ea6\u70b9  \n\u53d6\u4e00\u4e2a\u5947\u5ea6\u70b9\u6c42\u6b27\u62c9\u8def\u5f84, \u5e76\u4efb\u610f\u5212\u5206\u4e3a\u4e24\u6bb5.  \n- \u6709\u56db\u4e2a\u5947\u5ea6\u70b9  \n\u53d6\u4e24\u4e2a\u5947\u5ea6\u70b9\u8fde\u8fb9, \u518d\u53bb\u53e6\u5916\u4e00\u70b9\u6c42\u6b27\u62c9\u8def\u5f84, \u5e76\u6309\u65b0\u8fb9\u5212\u5206\u4e3a\u4e24\u6bb5.  \n- $otherwise$  \n\u65e0\u89e3.  \n\n2. \u56fe\u6709\u4e24\u4e2a\u8fde\u901a\u5757.  \n\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757, \u82e5\u591a\u4e8e\u4e24\u4e2a\u5947\u5ea6\u70b9, \u65e0\u89e3, \u5426\u5219\u6309\u4e0a\u6587\u65b9\u6cd5\u5206\u522b\u6c42\u89e3.  \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6700\u540e, \u8d60\u9001\u4e00\u5927\u5806$hack$\u8fc7\u6211\u7684\u6570\u636e.\n```cpp\n10\n1 2\n2 3\n2 4\n2 5\n5 6\n7 8\n8 9\n9 7\n3 5\n4 5\n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8fd9\u662f\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u60c5\u51b5.\n\n```cpp\n4\n1 5\n2 5\n3 5\n4 5\n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8fd9\u662f\u83ca\u82b1\u56fe\u7684\u60c5\u51b5, \u5229\u4e8e\u68c0\u67e5\u65b0\u5efa\u8fb9\u7684\u6b63\u786e\u6027.\n\n```cpp\n3\n1 2\n2 3\n2 4\n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u56db\u4e2a\u5947\u5ea6\u70b9\u7684\u60c5\u51b5, \u53ef\u4ee5\u68c0\u67e5\u662f\u5426\u8f93\u51fa\u4e86\u65b0\u5efa\u7684\u5e76\u4e0d\u5b58\u5728\u4e8e\u539f\u56fe\u7684\u8fb9.\n\n```cpp\n5\n1 2\n1 3\n2 3\n3 4\n5 6\n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8fd8\u662f\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u60c5\u51b5.  \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$hack$\u4e0d\u6613, \u6240\u4ee5\u7b54\u6848\u81ea\u5df1\u624b\u73a9\u5427. \u5e0c\u671b\u8fd9\u4e9b\u6570\u636e\u5bf9\u60a8\u6709\u5e2e\u52a9. /\u6ed1\u7a3d.  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4ee3\u7801\u6bd4\u8f83\u957f, \u6240\u4ee5\u6709\u5f88\u591a\u7ec6\u8282, \u5df2\u52a0\u4e0a\u4e86\u8be6\u7ec6\u6ce8\u91ca$w$.\n\n```cpp\n#include <cstdio>\n#include <vector>\n\n#define Int register int\n\nusing namespace std;\n\nconst int MAXN = 10000, MAXM = 10000;\nint m, Cnte = 1, Unic, OddCnt, Head[MAXN + 5] = {}, d[MAXN + 5] = {}, UnicOdd[MAXN + 5] = {}, Visnd[MAXN + 5] = {};\nbool IsID[MAXN + 5] = {}, Viseg[MAXM + 5] = {}, Outputed[MAXM + 5] = {};\nvector<int> Ans;\n\n/*\n\u4ee5\u5f80\u6211\u7ecf\u5e38\u770b\u4e0d\u61c2\u5176\u5b83\u9898\u89e3\u7684\u53d8\u91cf\u610f\u4e49, \u5728\u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0b:\nm, Cnte, Unic, OddCnt: \u8f93\u5165\u7684\u8fb9, \u63d2\u5934Hash\u7684\u8ba1\u6570\u5668, \u8fde\u901a\u5757\u6570\u91cf, \u6574\u4e2a\u56fe\u7684\u5947\u5ea6\u70b9\u6570\u91cf.\nHead, d, UnicOdd, Visnd: \u8fb9\u7684\u5934\u6307\u9488\u6570\u7ec4, \u70b9\u7684\u5ea6\u6570, \u8fde\u901a\u5757\u7684\u5947\u5ea6\u70b9\u4e2a\u6570, \u641c\u7d22\u8fde\u901a\u5757\u65f6\u7684\u6807\u8bb0.\nIsID, Viseg: \u662f\u5426\u662f\u4e00\u4e2a\u7ed3\u70b9 ( \u9898\u76ee\u6ca1\u6709\u5bf9\u7f16\u53f7\u7684\u7ea6\u675f ), \u627e\u6b27\u62c9\u8def\u7684\u6807\u8bb0 ( \u66ff\u4ee3\u5220\u8fb9\u64cd\u4f5c ).\nOutputed, Ans: \u5df2\u8f93\u51fa\u7684\u8fb9 ( \u8def\u5f84\u6709\u73af\u7684\u60c5\u51b5 ), \u8def\u5f84\u7684\u9876\u70b9\u5e8f\u5217. \n\n...\u597d\u7d2f \n*/\n\nstruct Edge {\n\tint To, _nxt;\n} Graph[MAXM * 2 + 5] = {};\n\ninline void Link ( const int From, const int To ) {\n\tGraph[++ Cnte] = { To, Head[From] };\n\tHead[From] = Cnte;\n}\n\ninline void MarkUnicom ( const int u ) { // \u6807\u8bb0\u8fde\u901a\u5757, \u5e76\u7edf\u8ba1\u8fde\u901a\u5757\u5947\u5ea6\u70b9, \u5168\u56fe\u5947\u5ea6\u70b9. \n\tVisnd[u] = Unic;\n\tUnicOdd[Unic] += d[u] & 1, OddCnt += d[u] & 1;\n\tfor ( Int i = Head[u], v; i; i = Graph[i]._nxt ) {\n\t\tif ( ! Visnd[v = Graph[i].To] ) {\n\t\t\tMarkUnicom ( v );\n\t\t}\n\t}\n}\n\ninline void FindEuler ( const int u ) { // \u627e\u6b27\u62c9\u8def\u5f84 \n\tif ( ! d[u] ) {\n\t\tAns.push_back ( u );\n\t\treturn ;\n\t}\n\tfor ( Int i = Head[u], v; i; i = Graph[i]._nxt ) {\n\t\tif ( ! Viseg[i >> 1] ) {\n\t\t\tViseg[i >> 1] = true, -- d[v = Graph[i].To], -- d[u];\n\t\t\tFindEuler ( v );\n\t\t}\n\t}\n\tAns.push_back ( u );\n}\n\ninline void Print ( const int l, const int r ) { // \u8f93\u51faAns\u6570\u7ec4\u4e2d\u4e0b\u6807\u5728[l, r)\u95f4\u7684\u7ed3\u70b9\u8fde\u8fb9. \n\tfor ( Int i = l; i ^ r; ++ i ) {\n\t\tfor ( Int j = Head[Ans[i]]; j; j = Graph[j]._nxt ) {\n\t\t\tif ( ! Outputed[j >> 1] && j >> 1 <= m && Ans[i + 1] == Graph[j].To ) { // \u6ce8\u610f\u5224\u65ad\u662f\u5426\u662f\u52a0\u4e0a\u7684\u8fb9\u6216\u8d70\u8fc7\u7684\u8fb9. \n\t\t\t\tif ( i ^ l ) putchar ( ' ' );\n\t\t\t\tOutputed[j >> 1] = true;\n\t\t\t\tprintf ( \"%d\", j >> 1 );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tputs ( \"\" );\n}\n\ninline void Work () {\n\tscanf ( \"%d\", &m );\n\tfor ( Int i = 1, u, v; i <= m; ++ i ) {\n\t\tscanf ( \"%d %d\", &u, &v );\n\t\tIsID[u] = IsID[v] = true;\n\t\tLink ( u, v ), Link ( v, u ); // \u4e0d\u8981\u4e60\u60ef\u6027\u5ffd\u7565\u81ea\u73af. \n\t\t++ d[u], ++ d[v];\n\t}\n\tfor ( Int i = 1; i <= MAXN; ++ i ) {\n\t\tif ( IsID[i] && ! Visnd[i] ) {\n\t\t\t++ Unic;\n\t\t\tMarkUnicom ( i );\n\t\t}\n\t}\n\tif ( OddCnt > 4 || Unic > 2 ) {\n\t\tputs ( \"-1\" );\n\t\treturn ;\n\t}\n\tif ( Unic == 1 ) { // \u53ea\u6709\u4e00\u4e2a\u8054\u901a\u5757. \n\t\tint ond1 = 0, ond2 = 0, st = 0; // \u5bf9\u4e8e\u56db\u4e2a\u5947\u5ea6\u70b9, ond1\u548cond2\u662f\u65b0\u8fb9\u7684\u7aef\u70b9, st\u662f\u6b27\u62c9\u8def\u5f84\u7684\u8d77\u70b9. \n\t\tif ( ! OddCnt ) { // \u65e0\u5947\u5ea6\u70b9. \n\t\t\tfor ( Int i = 1; i <= MAXN; ++ i ) {\n\t\t\t\tif ( IsID[i] ) {\n\t\t\t\t\tFindEuler ( i );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( OddCnt == 2 ) { // \u4e00\u4e2a\u5947\u5ea6\u70b9. \n\t\t\tfor ( Int i = 1; i <= MAXN; ++ i ) {\n\t\t\t\tif ( IsID[i] && d[i] & 1 ) {\n\t\t\t\t\tFindEuler ( i );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else { // \u4e24\u4e2a\u5947\u5ea6\u70b9. \n\t\t\tfor ( Int i = 1; i <= MAXN && ! st; ++ i ) { // \u5148\u627e\u5230\u4e09\u4e2a\u5947\u5ea6\u70b9. \n\t\t\t\tif ( IsID[i] && d[i] & 1 ) {\n\t\t\t\t\tif ( ! ond1 ) {\n\t\t\t\t\t\tond1 = i;\n\t\t\t\t\t} else if ( ! ond2 ) {\n\t\t\t\t\t\tond2 = i;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tst = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tLink ( ond1, ond2 ), Link ( ond2, ond1 );\n\t\t\t++ d[ond1], ++ d[ond2];\n\t\t\tFindEuler ( st ); // \u8fde\u8fb9, \u5e76\u4ece\u53e6\u4e00\u4e2a\u5947\u5ea6\u70b9\u627e\u6b27\u62c9\u8def\u7ecf. \n\t\t}\n\t\tif ( OddCnt ^ 4 ) { \n\t\t\tif ( Ans.size () <= 2 ) {\n\t\t\t\tputs ( \"-1\" );\n\t\t\t\treturn ;\n\t\t\t}\n//\t\t\tprintf ( \"%d\\n%d\\n%u\\n\", 1, Ans[0], Ans.size () - 1 );\n\t\t\tprintf ( \"%d\\n\", 1 ); // \u7b2c\u4e00\u6761\u8fb9\u5355\u72ec\u8f93\u51fa. \n\t\t\tPrint ( 0, 1 );\n\t\t\tprintf ( \"%d\\n\", ( int ) Ans.size () - 2 ); // \u8f93\u51fa\u5176\u4f59\u8fb9. \n\t\t\tPrint ( 1, Ans.size () );\n\t\t} else {\n\t\t\tint _pre = 0;\n//\t\t\tprintf ( \"###%d %d\\n\", ond1, ond2 );\n//\t\t\tfor ( int k: Ans ) { printf ( \"### %d\\n\", k ); }\n\t\t\tfor ( unsigned int i = 0; i ^ Ans.size (); ++ i ) {\n\t\t\t\tif ( ( _pre == ond1 && Ans[i] == ond2 ) || ( _pre == ond2 && Ans[i] == ond1 ) ) { // \u662f\u65b0\u8fb9. \n\t\t\t\t\tprintf ( \"%d\\n\", i - 1 );\n\t\t\t\t\tPrint ( 0, i - 1 );\n\t\t\t\t\tprintf ( \"%d\\n\", m - i + 1 );\n\t\t\t\t\tPrint ( i, Ans.size () );\n\t\t\t\t\tbreak; // \u5982\u679c\u6709\u4e0e\u65b0\u8fb9\u7b49\u4ef7\u7684\u8fb9, \u4f1a\u5728\u8f93\u51fa\u65f6\u5224\u65ad, \u4e0d\u5f71\u54cd\u7b54\u6848. \n\t\t\t\t}\n\t\t\t\t_pre = Ans[i];\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( UnicOdd[1] > 2 || UnicOdd[2] > 2 ) {\n\t\t\tputs ( \"-1\" );\n\t\t\treturn ;\n\t\t}\n\t\tint VisUnic = 0;\n\t\tfor ( Int i = 1; i <= MAXN; ++ i ) {\n\t\t\tif ( IsID[i] && ( ! VisUnic || Visnd[i] ^ VisUnic ) && bool ( UnicOdd[Visnd[i]] ) == ( d[i] & 1 ) ) {\n\t\t\t\t// \u5982\u679c\u8be5\u8fde\u901a\u5757\u5947\u5ea6\u70b9\u4e2a\u6570\u4e0d\u4e3a\u4e00, \u5219\u5fc5\u987b\u4ece\u5947\u5ea6\u70b9\u51fa\u53d1. \n\t\t\t\tFindEuler ( i );\n\t\t\t\tprintf ( \"%d\\n\", ( int ) Ans.size () - 1 );\n\t\t\t\tPrint ( 0, Ans.size () );\n\t\t\t\tAns.clear ();\n\t\t\t\tif ( VisUnic ) break;\n\t\t\t\tVisUnic = Visnd[i];\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main () {\n\tfreopen ( \"input.txt\", \"r\", stdin );\n\tfreopen ( \"output.txt\", \"w\", stdout ); // \u9b3c\u755c\u7684CF\u9700\u8981freopen ??? \n\tWork ();\n\treturn 0;\n}\n```",
        "postTime": 1566882474,
        "uid": 123807,
        "name": "Rainybunny",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF36E \u3010Two Paths\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6c42\u51fa\u7528\u4e24\u6761\u6b27\u62c9\u8def\u8986\u76d6\u6240\u6709\u8fb9\u7684\u65b9\u6848\n\n## \u5b9e\u73b0\n\n![](https://cdn.luogu.com.cn/upload/pic/22683.png)\n\n## \u6ce8\u610f\n\n\u53ef\u80fd\u4e00\u4e2a\u8054\u901a\u5757\u5185\u6ca1\u6709\u5947\u5ea6\u6570\u70b9\uff0c\u9700\u8981\u7279\u5224\uff1b\n\n## \u849f\u84bb\u7684\u4ee3\u7801\n\n\u8bb0\u5f97freopen\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<set>\n#include<list>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<deque>\nusing namespace std;\n#define ll long long\n#define inf 0x3f3f3f3f\n#define ri register int\n#define il inline\n#define fi first\n#define se second\n#define mp make_pair\n#define pi pair<int,int>\n#define mem0(x) memset((x),0,sizeof (x))\n#define mem1(x) memset((x),0x3f,sizeof (x))\n#define gc getchar\n#define pb push_back\ntemplate<class T>void in(T &x)\n{\n    x = 0; bool f = 0; char c = gc();\n    while (c < '0' || c > '9') {if (c == '-') f = 1; c = gc();}\n    while ('0' <= c && c <= '9') {x = (x << 3) + (x << 1) + (c ^ 48); c = gc();}\n    if (f) x = -x;\n}\n#undef gc\n#define N 20010\n#define M N<<1\nint n, m;\nint v[M], u[M], nx[M];\nint cnt = 1, head[N];\nil void add(int uu, int vv) {\n    u[++cnt] = uu, v[cnt] = vv, nx[cnt] = head[uu];\n    head[uu] = cnt;\n}\nint eda[M], edb[M], te, ui[M];\nil int getn(int x) {\n    return lower_bound(ui + 1, ui + 1 + n, x) - ui;\n}\nbool vis[N];\nvector<int>po[3];\nint du[N];\nvoid dfs(int x, int k) {\n    vis[x] = 1;\n    //printf(\"V %d\\n\",x);\n    if (du[x] & 1) {\n        po[k].pb(x);\n    }\n    for (ri i = head[x]; i; i = nx[i]) {\n        if (vis[v[i]]) continue;\n        dfs(v[i], k);\n    }\n}\nint lt;\nil void no() {\n    puts(\"-1\");\n    exit(0);\n}\nint hvf;\nbool us[M];\nint s[M], top;\nint cut; // del\nvoid dfs2(int x) {\n    //vis[x]=1;\n    for (ri i = head[x]; i; i = nx[i]) {\n        //if(vis[x])\n        if (us[i >> 1]) continue;\n        us[i >> 1] = 1;\n        dfs2(v[i]);\n        s[++top] = i >> 1;\n        if (((i >> 1) == (cnt >> 1)) && hvf) cut = top;\n    }\n}\nint lt2s;\nsigned main() {\n    //freopen(\"input.txt\", \"r\", stdin);\n    //freopen(\"output.txt\", \"w\", stdout);\n    in(m);\n    for (ri i = 1, a, b; i <= m; ++i) {\n        in(a), in(b);\n        eda[i] = a;\n        edb[i] = b;\n        ui[++te] = a, ui[++te] = b;\n    }\n    if (m == 1) no();\n    sort(ui + 1, ui + 1 + te);\n    n = unique(ui + 1, ui + 1 + te) - ui - 1; // may bug\n    for (ri i = 1, a, b; i <= m; ++i) {\n        add(a = getn(eda[i]), b = getn(edb[i]));\n        add(b, a);\n        //printf(\"A %d %d\\n\",a,b);\n        du[a]++, du[b]++;\n    }\n    for (ri i = 1; i <= n; ++i) {\n        if (!vis[i]) {\n            lt++;\n            if (lt > 2) {\n                //cout<<\"E\"<<i<<endl;;\n                no();\n            }\n            if (hvf) {\n                //cout<<\"D\";\n                no();\n            }\n            dfs(i, lt);\n            if (po[lt].size() > 4) {\n                //cout<<\"C\";\n                no();\n            }\n            else if (po[lt].size() == 4) {\n                if (lt > 1) {\n                    //cout<<\"B\";\n                    no();\n                }\n                hvf = lt;\n            }\n            if (lt == 2 && po[2].size() == 0) lt2s = i;\n        }\n    }\n    //cout<<lt;\n    mem0(vis);\n    if (hvf) {\n        add(po[1][0], po[1][1]);\n        add(po[1][1], po[1][0]);\n        ++m;\n        dfs2(po[1][2]);\n        if (top != m) no();\n        printf(\"%d\\n\", cut - 1);\n        for (ri i = 1; i < cut; ++i) printf(\"%d \", s[i]);\n        printf(\"\\n%d\\n\", m - cut);\n        for (ri i = cut + 1; i <= top; ++i) printf(\"%d \", s[i]);\n    }\n    else {\n        if (po[1].size()) dfs2(po[1][0]);\n        else dfs2(1);\n        if (lt == 2) {\n            //cout<<\"A\";\n            cut = top;\n            if (po[2].size()) dfs2(po[2][0]);\n            else dfs2(lt2s);\n            if (top != m) no();\n            printf(\"%d\\n\", cut);\n            for (ri i = 1; i <= cut; ++i) printf(\"%d \", s[i]);\n            printf(\"\\n%d\\n\", m - cut);\n            for (ri i = cut + 1; i <= top; ++i) printf(\"%d \", s[i]);\n        }\n        else {\n            if (top != m) no();\n            printf(\"%d\\n\", 1);\n            printf(\"%d \", s[1]);\n            printf(\"\\n%d\\n\", m - 1);\n            for (ri i = 2; i <= top; ++i) printf(\"%d \", s[i]);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1531097581,
        "uid": 58302,
        "name": "i207M",
        "ccfLevel": 0,
        "title": "\u6b27\u62c9\u8def-CF36E-\u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u9996\u5148\uff0c\u8986\u76d6\u6240\u6709\u8fb9\u6070\u4e00\u6b21\uff0c\u59a5\u59a5\u7684\u6b27\u62c9\u8def\u6a21\u578b\u3002\n\n\u7136\u540e\u5c31\u5148\u8003\u8651\u5982\u4f55\u5224\u65e0\u89e3\u4e86\u3002\u600e\u6837\u65e0\u89e3\u5462\uff1f\n\n1. \u6709\u5c11\u4e8e$ 2 $\u6761\u8fb9\u3002\uff08\u5982\u679c\u4e0d\u662f\u6837\u4f8b\u7ed9\u4e86\uff0c\u5927\u6982\u5f88\u96be\u6ce8\u610f\u5230\u2026\u2026\uff09\n\n1. \u6709\u8d85\u8fc7$ 2 $\u4e2a\u8fde\u901a\u5757\u3002\n\n1. \u4ec5\u6709\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u4e14\u8fde\u901a\u5757\u4e2d\u5947\u70b9\u6570\u5927\u4e8e$ 4$\u3002\n\n1. \u6709\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u4e14\u5176\u4e2d\u67d0\u4e00\u4e2a\u5757\u4e2d\u5947\u70b9\u6570\u5927\u4e8e$ 2$\u3002\n\n\u90a3\u4e48\uff0c\u662f\u5426\u6240\u6709\u6761\u4ef6\u90fd\u6ee1\u8db3\uff0c\u5c31\u4e00\u5b9a\u6709\u89e3\u5462\uff1f\n\n\u662f\u7684\u3002\n\n\u5047\u5982\u4ece**\u6b27\u62c9\u8def**\u7684\u65b9\u5411\u8003\u8651\uff0c\u5c31\u4f1a\u975e\u5e38\u9ebb\u70e6\uff0c\u56e0\u4e3a\u4f60\u627e\u51fa\u7684\u6b27\u62c9\u56de\u8def\u5220\u53bb\u540e\u53ef\u80fd\u4f7f\u5f97\u8fd9\u5f20\u56fe\u5206\u6210\u8bb8\u591a\u4e0d\u8fde\u901a\u7684\u56fe\u3002\n\n\u56e0\u6b64\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u601d\u8def\uff1a\u5728\u4e24\u4e2a\u5947\u70b9\u95f4\u8fde\u8fb9\uff0c\u8fd9\u6837\u5c31\u4f1a\u8f6c\u6362\u4e3a**\u6b27\u62c9\u56de\u8def**\uff0c\u7136\u540e\u5728\u6b27\u62c9\u56de\u8def\u4e0a\u65ad\u53bb\u65b0\u52a0\u7684\u8fb9\u5c31\u884c\u4e86\u3002\n\n\u5177\u4f53\u800c\u8a00\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u60c5\u5f62\uff0c\u663e\u7136\u4e0a\u8ff0\u7ed3\u8bba\u6b63\u786e\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8fde\u901a\u5757\u90fd\u5fc5\u7136\u7b26\u5408\u6761\u4ef6\u3002\n\n\u7136\u540e\uff0c\u5bf9\u4e8e\u4ec5\u6709\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u60c5\u5f62\uff0c\u5176\u4e2d\u53ef\u80fd\u6709$ 0 $\u4e2a\uff0c$2$ \u4e2a\u6216\u662f $4$ \u4e2a\u5947\u70b9\u3002\n\n$0$ \u4e2a\u5947\u70b9\u5c31\u641c\u51fa\u56de\u8def\u7136\u540e\u968f\u4fbf\u780d\u4e24\u5200\u65ad\u73af\u6210\u94fe\u5373\u53ef\u3002\n\n$2$ \u4e2a\u5947\u70b9\u5c31\u5728\u989d\u5916\u8fde\u7684\u90a3\u6761\u8fb9\u5904\u780d\u4e00\u5200\uff0c\u7136\u540e\u518d\u968f\u4fbf\u780d\u4e00\u5200\u5c31\u884c\u3002\n\n$4$ \u4e2a\u5947\u70b9\u8fd9\u4e24\u5200\u5fc5\u987b\u780d\u5728\u989d\u5916\u7684\u4e24\u6761\u8fb9\u7684\u4f4d\u7f6e\u3002\u8fd9\u5f62\u6210\u7684\u4e24\u6761\u94fe\u5fc5\u7136\u975e\u7a7a\uff0c\u56e0\u4e3a\u8fd9\u4e24\u6761\u65b0\u8fb9\u5fc5\u7136\u65e0\u516c\u5171\u7aef\u70b9\uff0c\u5373\u5176\u5728\u6b27\u62c9\u73af\u4e0a\u5fc5\u7136\u4e0d\u76f8\u90bb\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m)$\u3002",
        "postTime": 1621506669,
        "uid": 486080,
        "name": "\u26a1\u51cc\u7199\u58a8\u26a1",
        "ccfLevel": 0,
        "title": "CF36E\u9898\u89e3"
    },
    {
        "content": "~~\u611f\u89c9\u697c\u4e0b\u90a3\u4e2a\u8bb2\u5f97\u5341\u5206\u7684\u4e0d\u8be6\u7ec6~~\u3002\u9996\u5148\u8fd9\u4e2a\u56fe\u7684\u5947\u5ea6\u6570\u70b9\u5fc5\u987b\u662f0\u4e2a\u30012\u4e2a\u30014\u4e2a\uff0c\u662f\u522b\u7684\u5219\u65e0\u89e3\u3002\u5982\u679c\u662f\u524d\u4e24\u79cd\u60c5\u51b5\u7684\u8bdd\uff0c\u5c31\u662f\u628a\u6b27\u62c9\u56de\u8def\u6216\u8005\u6b27\u62c9\u8def\u6c42\u51fa\u6765\u7136\u540e\u968f\u4fbf\u62c6\u6210\u4e24\u6bb5\u5c31\u884c\u4e86\u3002\u5982\u679c\u67094\u4e2a\u5947\u5ea6\u6570\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u4e24\u4e2a\u5947\u5ea6\u6570\u70b9\u8fde\u4e0a\u4e00\u6761\u7279\u6b8a\u8fb9\uff0c\u518d\u628a\u65b0\u56fe\u7684\u6b27\u62c9\u8def\u6c42\u51fa\u6765\uff0c\u6309\u7167\u4e0a\u9762\u90a3\u79cd\u65b9\u5f0f\u5904\u7406\u5373\u53ef\u3002\n\n**\u4f46\u662f\uff0c\u8fd9\u8fd8\u53ea\u662f\u5927\u81f4\u601d\u8def\u3002**\n\n\u4e0b\u9762\u6765\u5217\u4e00\u5806\u6bd4\u8f83\u7279\u6b8a\u7684\u56fe\uff0c\u4f60\u9700\u8981\u5bf9\u4ed6\u4eec\u8fdb\u884c\u7279\u6b8a\u5904\u7406\uff1a\n\n1. ![](https://cdn.luogu.com.cn/upload/pic/22844.png )\u8fd9\u4e2a\u5728\u6837\u4f8b\u91cc\u5c31\u6709\uff0c\u8fd9\u4e2a\u867d\u7136\u662f\u4e2a\u6b27\u62c9\u8def\uff0c\u4f46\u662f\u8fd9\u4e2a\u6b27\u62c9\u8def\u53ea\u6709\u4e00\u4e2a\u8fb9\uff0c\u6ca1\u6cd5\u62c6\u62102\u4e2a\uff0c\u65e0\u89e3\u3002\u6240\u4ee5\u8fd9\u4e2a\u9898\u7684\u91cd\u5fc3\u5176\u5b9e\u5e76\u4e0d\u5728\u6b27\u62c9\u8def\u6216\u8005\u6b27\u62c9\u56de\u8def\u4e0a\uff0c\u800c\u662f\u201c\u6c42\u51fa**\u4e24**\u6761\u8def\u5f84\u201d\uff0c\u8fd9\u4e2a\u624d\u662f\u6700\u4e3b\u8981\u7684\u3002\n\n2. ![](https://cdn.luogu.com.cn/upload/pic/22846.png )\u6ca1\u9519\uff0c\u4f60\u54ea\u53ea\u773c\u775b\u770b\u89c1\u4e86\u9898\u4e0a\u8bf4\u8fc7\u201c\u65e0\u5411\u56fe\u4fdd\u8bc1\u8fde\u901a\u201d\uff1f\u8fd9\u4e2a\u56fe\u5e76\u4e0d\u4e00\u5b9a\u8fde\u901a\uff0c\u5bf9\u4e8e\u4e0a\u8ff0\u5947\u5ea6\u6570\u70b9\u60c5\u51b5\u6211\u4eec\u5c31\u8981\u5728\u4e24\u4e2a\u8fde\u901a\u5757\u91cc\u5206\u522b\u628a\u6b27\u62c9\u8def**\u6216**\u6b27\u62c9\u56de\u8def\uff08\u6ce8\u610f\u662f\u6216\uff01\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u60c5\u51b5\u53ef\u80fd\u4f1a\u4e0d\u4e00\u6837\uff09\u3002\n\n3. ![](https://cdn.luogu.com.cn/upload/pic/22847.png)\u4e0a\u9762\u8bf4\u7684\u5176\u5b9e\u53ea\u662f2\u4e2a\u8fde\u901a\u5757\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6709\u591a\u4e2a\u8fde\u901a\u5757\u80af\u5b9a\u5c31\u662f\u65e0\u89e3\u7684\u3002\n\n4. ![](https://cdn.luogu.com.cn/upload/pic/22848.png)\u5176\u5b9e\u5c31\u7b97\u6709\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u56fe\u4e0a\u4e00\u5171\u67094\u4e2a\u5947\u5ea6\u6570\u70b9\uff0c\u8fd9\u4e2a\u4e5f\u4e0d\u4e00\u5b9a\u662f\u6709\u89e3\u7684\uff0c\u5176\u4e2d\u6709\u4e2a\u8fde\u901a\u5757\u53ea\u80fd\u88ab\u62c6\u62102\u6761\u8def\u5f84\uff0c\u5269\u4e0b\u4e00\u4e2a\u5c31\u6ca1\u6cd5\u62c6\u4e86\uff0c\u65e0\u89e3\u3002\n\n\u6240\u4ee5\uff0c\u56fe\u8bba\u4e2d\u7684\u7279\u6b8a\u60c5\u51b5\u8fd8\u662f\u5f97\u597d\u597d\u6ce8\u610f\u7684\uff0c\u7a7a\u60f3\u8fd8\u771f\u7684\u60f3\u4e0d\u51fa\u6765\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\ninline int get(){\n\tint n;char c;while((c=getchar())||1)if(c>='0'&&c<='9')break;\n\tn=c-'0';while((c=getchar())||1){\n\t\tif(c>='0'&&c<='9')n=n*10+c-'0';\n\t\telse return(n);\n\t}\n}\nint deg[1000001];\nint ints[1000001];\nint find(int n){\n\tif(ints[n]==n)return(n);return(ints[n]=find(ints[n]));\n}\nint size[1000001];\nint cnt[1000001];\nint main(){\n\tint n=get(),m=get();\n\tfor(register int i=1;i<=n;i++)ints[i]=i;\n\tfor(register int i=1;i<=m;i++){\n\t\tint s=get(),t=get();deg[s]++;deg[t]++;int aa=find(s),ab=find(t);if(aa!=ab)ints[aa]=ab;\n\t}for(register int i=1;i<=n;i++)if(deg[i]&1)cnt[find(i)]++;\n\tfor(register int i=1;i<=n;i++)size[find(i)]++;\n\tint rest=cnt[find(1)];int ans=0;\n\tfor(register int i=1;i<=n;i++){\n\t\tif(ints[i]==i&&(size[i]!=1||deg[i]!=0)&&i!=find(1)){//printf(\"%d_\\n\",i);\n\t\t\tif(rest==0&&cnt[i]==0){\n\t\t\t\tans++;rest+=2;\n\t\t\t}else{\n\t\t\t\tif(rest==0){\n\t\t\t\t\tans++;rest+=cnt[i];\n\t\t\t\t}else{\n\t\t\t\t\tif(cnt[i]==0){\n\t\t\t\t\t\tans++;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tans++;rest--;rest+=cnt[i]-1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tans+=rest/2;cout<<ans<<endl;\n\treturn(0);\n}\n```",
        "postTime": 1531216301,
        "uid": 56917,
        "name": "\u989c\u4f1f\u4e1a_C_Asm",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF36E \u3010Two Paths\u3011"
    },
    {
        "content": "[in Blog](//milk-lemon.blog.luogu.org/notes-EulerPath) & [Problem](//www.luogu.com.cn/problem/CF36E)\n\n## \u9898\u76ee\u5927\u610f\n\n- \u7ed9\u5b9a\u4e00\u4e2a\u6709 $m$ \u6761\u65e0\u5411\u8fb9\uff0c\u81f3\u591a\u6709 $10^4$ \u4e2a\u70b9\uff0c\u53ef\u80fd\u6709\u91cd\u8fb9\uff0c\u4e0d\u4fdd\u8bc1\u8054\u901a\u7684\u56fe\uff0c\u8bf7\u5728\u8fd9\u4e2a\u56fe\u4e0a\u627e\u51fa\u4e24\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u4e24\u6761\u8def\u5f84\u8986\u76d6\u4e86\u56fe\u4e2d\u6bcf\u4e00\u6761\u8fb9\u4ec5\u4e00\u6b21\u3002\n\n- $1\\leq m\\leq 10^4$\n\n## \u89e3\u9898\u601d\u8def\n\n\u4e24\u6761\u8def\u5f84\u4ea7\u751f\u7684\u5947\u70b9\u6570\u4e3a $0$ \u6216 $2$\uff0c\u5219\u4e24\u6761\u8def\u5f84\u4ea7\u751f\u7684\u5947\u70b9\u6570\u53ea\u80fd\u4e3a $0,\\ 2$ \u6216 $4$\u3002\n\n\u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u80fd\u627e\u5230\u4e00\u6761\u8def\u5f84\u8986\u76d6\u56fe\u4e2d\u6bcf\u4e00\u6761\u8fb9\u4ec5\u4e00\u6b21\uff0c\u90a3\u4e48\u53ea\u9700\u5c06\u8fd9\u6761\u8def\u5f84\u4ece\u4e00\u4e2a\u65ad\u70b9\u5904\u65ad\u5f00\u5373\u53ef\u3002\n\n\u5bf9\u6574\u4e2a\u56fe\u7684\u8fde\u901a\u5757\u6570\u91cf\u4e0e\u5947\u70b9\u6570\u91cf\u5206\u7c7b\u8ba8\u8bba\u3002\n\n- \u82e5\u6574\u4e2a\u56fe\u8fde\u901a\uff0c\n\n  - \u5947\u70b9\u6570\u4e3a $0$ \u6216 $2$\uff0c\u5219\u5fc5\u80fd\u627e\u5230\u4e00\u6761\u8def\u5f84\u8986\u76d6\u56fe\u4e2d\u6bcf\u4e00\u6761\u8fb9\u4ec5\u4e00\u6b21\u3002\u6b64\u65f6\u53ea\u9700\u8def\u5f84\u957f\u5ea6 $\\geq 2$\uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u5206\u4e3a\u4e24\u6761\u8def\u5f84\uff1b\n  \n  - \u5947\u70b9\u6570\u4e3a $4$\uff0c\u6b64\u65f6\u4efb\u53d6\u4e24\u4e2a\u6ca1\u6709\u8fde\u8fb9\u7684\u5947\u70b9\uff0c\u5c06\u5b83\u4eec\u8fde\u4e0a\u4e00\u6761\u4e34\u65f6\u8fb9\u3002\u6b64\u65f6\u6709 $2$ \u4e2a\u5947\u70b9\uff0c\u5fc5\u80fd\u627e\u5230\u4e00\u6761\u8def\u5f84\u8986\u76d6\u56fe\u4e2d\u6bcf\u4e00\u6761\u8fb9\u4ec5\u4e00\u6b21\uff0c\u7531\u4e8e\u4e34\u65f6\u8fb9\u7684\u7aef\u70b9\u90fd\u53d8\u6210\u4e86\u5076\u70b9\uff0c\u6545\u4e0d\u53ef\u80fd\u6210\u4e3a\u8fd9\u6761\u8def\u5f84\u7684\u7b2c\u4e00\u6761\u8fb9\u6216\u6700\u540e\u4e00\u6761\u8fb9\uff0c\u4e5f\u5c31\u53ef\u4ee5\u4ece\u4e34\u65f6\u8fb9\u5904\u65ad\u5f00\u8def\u5f84\uff0c\u5f97\u5230\u7b54\u6848\u3002\n  \n- \u82e5\u6574\u4e2a\u56fe\u5206\u4e3a\u4e86\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u53ea\u8981\u4e24\u4e2a\u8fde\u901a\u5757\u5947\u70b9\u6570\u5747\u4e3a $0$ \u6216 $2$\uff0c\u5c31\u53ef\u4ee5\u5728\u4e24\u4e2a\u8fde\u901a\u5757\u5404\u627e\u5230\u4e00\u6761\u8def\u5f84\uff0c\u5373\u4e3a\u6700\u7ec8\u7b54\u6848\u3002\n\n- \u82e5\u6574\u4e2a\u56fe\u5206\u4e3a\u4e86\u4e09\u4e2a\u6216\u66f4\u591a\u7684\u8fde\u901a\u5757\uff0c\u663e\u7136\u65e0\u89e3\u3002\n\n\u7531\u4e8e\u6700\u540e\u8f93\u51fa\u7684\u662f\u8fb9\u7684\u7f16\u53f7\uff0c\u8f93\u51fa\u65f6\u9700\u8981\u5bf9\u4efb\u610f\u76f8\u90bb\u4e24\u4e2a\u70b9\u627e\u5230\u8fb9\u7684\u7f16\u53f7\u3002\n\n## AC \u4ee3\u7801\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n\nvoid error(){\n    //\u7531\u4e8e\u6b64\u4ee3\u7801\u7528\u5230\u7684\u5730\u65b9\u8f83\u591a\uff0c\u6545\u5c01\u88c5\u6210\u4e00\u4e2a\u51fd\u6570\n\tprintf(\"-1\\n\"); exit(0);\n}\n\nint n=10000,m;\n\nstruct Edge{\n\tint to,nxt;\n}edge[20003];\nint head[10001],cntEdge;\ninline void addEdge(int u,int v){\n\tedge[++cntEdge]={v,head[u]},head[u]=cntEdge;\n}\n\nint deg[10001]; // \u6bcf\u4e2a\u70b9\u7684\u5ea6\n\nint blockid[10001],blockcnt,blockf[10001];\n/* blockid \u8868\u793a\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u7f16\u53f7\n   blockcnt \u8868\u793a\u8fde\u901a\u5757\u6570\u76ee\n   blockf \u8868\u793a\u70b9\u6240\u5728\u8fde\u901a\u5757\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u70b9 */\nvoid dfs_block(int id,int block){\n\tblockid[id]=block;\n\tfor(int i=head[id];i;i=edge[i].nxt)\n\t\tif(blockid[edge[i].to]==0&&deg[edge[i].to])\n\t\t\tdfs_block(edge[i].to,block);\n}\n\nbool used[10001]; // \u8fd9\u4e2a\u8fb9\u8f93\u51fa\u7b54\u6848\u65f6\u662f\u5426\u88ab\u4f7f\u7528\u8fc7\uff0c\u53ef\u4ee5\u907f\u514d\u91cd\u8fb9\u60c5\u51b5\nint findedge(int u,int v){\n    // \u627e\u5230 u \u548c v \u4e4b\u95f4\u7684\u8fb9\n\tfor(int i=head[u];i;i=edge[i].nxt)\n\t\tif(edge[i].to==v&&!used[i+1>>1])return i;\n\treturn -1;\n}\n\nbool vis[10002];\nvoid dfs(int id,vector<int> &tmp){\n    // \u627e\u6b27\u62c9\u8def\u5f84\uff0c\u7b54\u6848\u5b58\u50a8\u5728 tmp \u91cc\n\tif(deg[id]==0){\n        // \u8fd9\u4e2a\u70b9\u5df2\u7ecf\u6ca1\u6709\u51fa\u8fb9\n\t\ttmp.push_back(id); return;\n\t}\n\tfor(int i=head[id];i;i=edge[i].nxt){\n\t\tif(vis[i+1>>1])continue;\n\t\tvis[i+1>>1]=true; // \u6807\u8bb0\u8d70\u8fc7\u7684\u8fb9\n\t\tdeg[edge[i].to]--,deg[id]--;\n\t\tdfs(edge[i].to,tmp);\n\t}\n\ttmp.push_back(id);\n}\n\nvoid print(vector<int> answer,int l,int r){\n\tfor(int i=l;i<=r;i++){\n\t\tint tmp=findedge(answer[i],answer[i+1])+1>>1;\n\t\tprintf(\"%d \",tmp),used[tmp]=true;\n\t}\n\tprintf(\"\\n\");\n}\n\nint main(){\n\tfreopen(\"input.txt\",\"r\",stdin);\n\tfreopen(\"output.txt\",\"w\",stdout);\n\tscanf(\"%d\",&m);\n\tif(m==1)error();\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v; scanf(\"%d%d\",&u,&v);\n\t\tdeg[u]++,deg[v]++;\n\t\taddEdge(u,v); addEdge(v,u);\n\t}\n\tvector<int>oddid;\n\tfor(int i=1;i<=n;i++){\n\t\tif(deg[i]&&blockid[i]==0)\n\t\t\tblockf[blockcnt+1]=i,\n\t\t\tdfs_block(i,++blockcnt);\n\t\tif(deg[i]&1)oddid.push_back(i); // \u627e\u5230\u4e00\u4e2a\u5947\u70b9\n\t}\n\tif(blockcnt>2)error(); // \u8fde\u901a\u5757\u6570\u91cf\u8d85\u8fc7 2\uff0c\u65e0\u89e3\n\tif(blockcnt==1){\n\t\tif(oddid.size()==4){\n\t\t\tbool flag=false; int t1=0,t2=0;\n            // \u627e\u6ca1\u6709\u8fde\u8fb9\u7684\u4e24\u4e2a\u5947\u70b9\n\t\t\tfor(int i=0;i<4&&!flag;i++)\n\t\t\t\tfor(int j=i+1;j<4&&!flag;j++)\n\t\t\t\t\tif(findedge(oddid[i],oddid[j])==-1){\n\t\t\t\t\t\tswap(oddid[0],oddid[i]);\n\t\t\t\t\t\tswap(oddid[1],oddid[j]);\n\t\t\t\t\t\tflag=true;\n\t\t\t\t\t}\n            // \u8fde\u8fb9\n\t\t\taddEdge(oddid[0],oddid[1]);\n\t\t\taddEdge(oddid[1],oddid[0]);\n\t\t\tdeg[oddid[0]]++,deg[oddid[1]]++;\n\t\t\tvector<int>tmp;\n\t\t\tdfs(oddid[2],tmp);\n\t\t\tint t=0;\n            // \u627e\u5230\u4e34\u65f6\u6dfb\u52a0\u7684\u8fb9\n\t\t\twhile((tmp[t]!=oddid[0]||tmp[t+1]!=oddid[1])&&\n\t\t\t\t(tmp[t]!=oddid[1]||tmp[t+1]!=oddid[0]))t++;\n\t\t\tprintf(\"%d\\n\",t);\n\t\t\tprint(tmp,0,t-1);\n\t\t\tprintf(\"%d\\n\",m-t);\n\t\t\tprint(tmp,t+1,tmp.size()-2);\n\t\t}\n\t\telse{\n\t\t\tvector<int>tmp;\n            // \u627e\u4e00\u6761\u8def\u5f84\u904d\u5386\u6574\u4e2a\u56fe\n\t\t\tif(oddid.size()==0)\n\t\t\t\tdfs(blockf[1],tmp);\n\t\t\telse if(oddid.size()==2)\n\t\t\t\tdfs(oddid[0],tmp);\n\t\t\telse error();\n            // \u65ad\u5f00\u7b2c\u4e00\u6761\u8fb9\u8f93\u51fa\n\t\t\tprintf(\"1\\n\");\n\t\t\tprint(tmp,0,0);\n\t\t\tprintf(\"%d\\n\",tmp.size()-2);\n\t\t\tprint(tmp,1,tmp.size()-2);\n\t\t}\n\t}\n\tif(blockcnt==2){\n        // \u6709\u4e24\u4e2a\u8fde\u901a\u5757\u65f6\uff0c\u5206\u522b\u627e\u8def\u5f84\n\t\tvector<int>odd1,odd2;\n\t\tfor(int i:oddid)\n\t\t\tif(blockid[i]==1)odd1.push_back(i);\n\t\t\telse odd2.push_back(i);\n\t\tif(odd1.size()!=0&&odd1.size()!=2)error();\n\t\tif(odd2.size()!=0&&odd2.size()!=2)error();\n\t\tvector<int>ans1,ans2;\n\t\tif(odd1.size()==0){\n\t\t\tint t=1;\n\t\t\twhile(blockid[t]!=1)t++; \n\t\t\tdfs(t,ans1);\n\t\t}\n\t\telse dfs(odd1[0],ans1);\n\t\tprintf(\"%d\\n\",ans1.size()-1);\n\t\tprint(ans1,0,ans1.size()-2);\n\t\tif(odd2.size()==0){\n\t\t\tint t2=1;\n\t\t\twhile(blockid[t2]!=2)t2++; \n\t\t\tdfs(t2,ans2);\n\t\t}\n\t\telse dfs(odd2[0],ans2);\n\t\tprintf(\"%d\\n\",ans2.size()-1);\n\t\tprint(ans2,0,ans2.size()-2);\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1654086776,
        "uid": 234641,
        "name": "Milmon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF36E - Two Paths"
    },
    {
        "content": "## \u4e00\u3001\u9898\u76ee\n\n**\u9898\u76ee**\n\n\u7ed9\u4f60\u4e00\u5f20\u53ef\u80fd\u6709\u91cd\u8fb9\u7684\u4e0d\u4fdd\u8bc1\u8054\u901a\u7684\u65e0\u5411\u56fe\uff0c\u73b0\u5728\u8981\u5728\u8fd9\u4e2a\u56fe\u4e0a\u627e\u51fa\u4e24\u6761\u8def\u5f84\uff0c\u6070\u597d\u80fd\u8986\u76d6\u6240\u6709\u8fb9\u4e00\u6b21\uff0c\u6839\u636e\u8fb9\u7684\u7f16\u53f7\u8f93\u51fa\u65b9\u6848\uff0c\u65e0\u89e3\u8f93\u51fa-1\u3002\n\n**\u6570\u636e\u8303\u56f4**\n\n $1\\leq m\\leq 10000,1\\leq a,b\\leq10000 ,a\\not=b$\n \n## \u4e8c\u3001\u89e3\u6cd5\n\n**\u601d\u8def**\n\n\u7531\u4e8e\u7ec4\u6210\u6b27\u62c9\u8def\u7684\u6761\u4ef6\u8f83\u4e3a\u5355\u4e00\uff0c\u6211\u4eec\u6765\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\u3002\n\n\uff08\u4e0b\u6587\u5c06\u4f1a\u628a\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u79f0\u4e3a\u5947\u70b9\uff09\n\n1\u3001\u6709\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5947\u70b9\u6570\u4e3a$0,2$\uff0c\u90a3\u6211\u4eec\u968f\u4fbf\u9009\u62e9\u4e00\u6761\u8fb9\u7ec4\u6210\u4e00\u4e2a\u8def\u5f84\uff0c\u53e6\u5916\u7684\u8fb9\u7ec4\u6210\u53e6\u4e00\u6761\u8def\u5f84\u3002\n\n2\u3001\u6709\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5947\u70b9\u6570\u4e3a$4$\uff0c\u90a3\u6211\u4eec\u5c06\u4e24\u4e2a\u5947\u6570\u70b9\u8fde\u4e00\u6761\u865a\u8fb9\uff0c\u7b49\u4e8e\u5c06\u56fe\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u4ece\u4e00\u4e2a\u5947\u70b9\u51fa\u53d1\uff0c\u770b\u80fd\u4e0d\u80fd\u5f62\u6210\u4e00\u6761\u8def\u5f84(\u5b9e\u8d28\u4e0a\u662f\u9898\u610f\u4e2d\u7684\u4e24\u6761)\u3002\n3\u3001\u6709\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u5947\u70b9\u6570\u53d6$0,2$\uff0c\u76f4\u63a5\u8dd1\u5373\u53ef\u3002\n\n**\u4ee3\u7801**\n\n\u6709\u5f88\u591a\u7ec6\u8282\u6ca1\u8bb2\u6e05\u695a\uff0c\u4ee3\u7801\u4e2d\u4f1a\u6709\u8be6\u7ec6\u6ce8\u91ca\u3002\n\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <iostream>\nusing namespace std;\n#define INF 0x3f3f3f3f\nconst int MAXN = 10005;\nint read()\n{\n    int num=0,flag=1;\n    char c;\n    while((c=getchar())<'0'||c>'9')if(c=='-')flag=-1;\n    while(c>='0'&&c<='9')num=(num<<3)+(num<<1)+(c^48),c=getchar();\n    return num*flag;\n}\nint n,m,tot,b=INF,f[MAXN],deg[MAXN],exi[MAXN],cnt,cut,tmp1,tmp2,top,s[MAXN];\nvector<int> pr[3];\nbool pr4,vis[MAXN],use[MAXN];\nstruct edge\n{\n\tint v,next,id;\n}e[MAXN*2];\nvoid add(int u,int v,int num)\n{\n    e[++tot]=edge{v,f[u],num},f[u]=tot;\n    e[++tot]=edge{u,f[v],num},f[v]=tot;\n}\nvoid dfs1(int u)\n{\n    vis[u]=1;\n    if(deg[u]&1) pr[cnt].push_back(u);//\u628a\u5947\u6570\u70b9\u538b\u5165vector \n    for(int i=f[u];i;i=e[i].next) \n        if(!vis[e[i].v])\n            dfs1(e[i].v);\n}\nvoid dfs2(int u)\n{\n    for(int i=f[u];i;i=e[i].next)\n        if(!use[e[i].id])\n        {\n            use[e[i].id]=1;\n            dfs2(e[i].v);\n            //\u6ce8\u610f\u8fd9\u91cc\u8981\u5012\u7740\u7f16\u53f7\uff0c\u539f\u56e0\u662f\u8981\u786e\u4fdd\u987a\u5e8f\u662f\u8fde\u7eed\u7684\uff08\u81ea\u5df1\u60f3\u60f3\u5427\uff0c\u4f5c\u8005\u53e3\u80e1\u89e3\u91ca\u4e0d\u592a\u6e05\u695a\uff09 \n            s[++top]=e[i].id;//\u5c06\u7f16\u53f7\u538b\u5165stack \n            if(e[i].id==m && pr4) cut=top;//\u5bfb\u627e\u865a\u8fb9\u5728\u6808\u4e2d\u7684\u4f4d\u7f6e \n        }\n}\nint main()\n{\n    freopen(\"input.txt\",\"r\",stdin);\n    freopen(\"output.txt\",\"w\",stdout);\n    m=read();\n    for(int i=1;i<=m;i++)\n    {\n    \tint u=read(),v=read();\n    \texi[u]=exi[v]=1;\n    \tdeg[u]++;deg[v]++;\n    \tadd(u,v,i);\n    \tb=min(b,min(u,v));//\u7f16\u53f7\u4e0d\u4e00\u5b9a\u662f\u8054\u7eed\u7684\uff0c\u53d6\u6700\u5c0f\u548c\u6700\u5927\u7f16\u53f7 \n    \tn=max(n,max(u,v));\n\t}\n\tif(m==1) {printf(\"-1\\n\");return 0;}//\u7279\u5224\uff0c\u53ea\u6709\u4e00\u6761\u8fb9 \n\tfor(int i=b;i<=n;i++)\n\t\tif(exi[i] && !vis[i])//\u5b58\u5728\u4e14\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7 \n        {\n            cnt++;//\u8fde\u901a\u5757\u6570++ \n            if(cnt>2) {printf(\"-1\\n\");return 0;}//\u6709\u8d85\u8fc7\u4e24\u4e2a\u8fde\u901a\u5757\uff0c-1 \n            if(pr4) {printf(\"-1\\n\");return 0;}//\u4ee5\u524d\u7684\u8fde\u901a\u5757\u51fa\u73b0\u8fc7\u56db\u4e2a\u5947\u70b9\uff0c-1 \n            dfs1(i);//\u76f4\u63a5\u66b4\u641c \n            if(pr[cnt].size()>4) {printf(\"-1\\n\");return 0;}//\u5947\u70b9\u6570\u5927\u4e8e\u56db\u4e2a\uff0c-1 \n            if(pr[cnt].size()==4) \n            {\n                if(cnt>1) {printf(\"-1\\n\");return 0;}//\u5f53\u524d\u5927\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757 \n                pr4=1;//\u5b58\u5728\u56db\u4e2a\u5947\u70b9 \n            }\n            if(cnt==1 && pr[cnt].size()==0) tmp1=i;//\u8bbe\u7f6e\u8fde\u901a\u5757\u8bbf\u95ee\u8d77\u70b9 \n            if(cnt==2 && pr[cnt].size()==0) tmp2=i;\n        }\n    if(pr4)\n    {\n        add(pr[1][0],pr[1][1],++m);//\u5efa\u865a\u8fb9 \n        dfs2(pr[1][2]);\n        if(top^m) {printf(\"-1\\n\");return 0;}\n        printf(\"%d\\n\",cut-1);//\u8f93\u51fa\u65f6\u53bb\u9664\u865a\u8fb9 \n        for(int i=1;i<cut;i++) printf(\"%d \",s[i]);\n        printf(\"\\n%d\\n\",m-cut);\n        for(int i=cut+1;i<=m;i++) printf(\"%d \",s[i]);\n    }\n    else\n    {\n        if(pr[1].size()) dfs2(pr[1][0]);//\u5947\u70b9\u4e3a\u8d77\u70b9 \n        else dfs2(tmp1);//\u6ca1\u6709\u5947\u70b9\uff0c\u968f\u4fbf\u627e\u4e2a\u70b9 \n        if(cnt==2)\n        {\n            cut=top;\n            if(pr[2].size()) dfs2(pr[2][0]);\n            else dfs2(tmp2);\n            if(top^m) {printf(\"-1\\n\");return 0;}\n            printf(\"%d\\n\",cut);\n            for(int i=1;i<=cut;i++) printf(\"%d \",s[i]);\n            printf(\"\\n%d\\n\",m-cut);\n            for(int i=cut+1;i<=m;i++) printf(\"%d \",s[i]);\n        }\n        else\n        {\n            if(top^m) {printf(\"-1\\n\");return 0;}\n            printf(\"1\\n%d\\n%d\\n\",s[1],m-1);\n            for(int i=2;i<=m;i++) printf(\"%d \",s[i]);\n        }\n    }\n}\n```\n",
        "postTime": 1567229908,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF36E \u3010Two Paths\u3011"
    }
]