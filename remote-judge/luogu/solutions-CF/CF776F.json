[
    {
        "content": "> D. [CF776F Sherlock's bet to Moriarty](https://www.luogu.com.cn/problem/CF776F) *2800\n\n> \u5b58\u5728\u4e00\u4e2a $n$ \u4e2a\u70b9\u7684\u591a\u8fb9\u5f62\uff0c\u70b9\u6309\u987a\u5e8f\u4ece $1$ \u5230 $n$ \u6807\u53f7\u3002$m$ \u6761\u4e0d\u5728\u9664\u4e86\u7aef\u70b9\u4ee5\u5916\u7684\u5730\u65b9\u76f8\u4ea4\u7684\u5bf9\u89d2\u7ebf\u5c06\u591a\u8fb9\u5f62\u5212\u5206\u6210 $m + 1$ \u4e2a\u533a\u57df $R_1, R_2, \\cdots, R_{m + 1}$\u3002\n>\n> \u4ee4\u67d0\u4e2a\u533a\u57df\u7684\u7aef\u70b9\u4e3a $a_1, a_2, \\cdots, a_{|R_i|}$\uff0c\u5b9a\u4e49\u4e00\u4e2a\u533a\u57df\u7684\u91cd\u8981\u5ea6\u4e3a $f(R_i) = \\sum\\limits_{j = 1} ^ {|R_i|} 2 ^ {a_j}$\u3002\u5c06\u6240\u6709\u533a\u57df\u6309\u91cd\u8981\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u5e76\u7f16\u53f7\uff0c\u5373 $f(R_1) < f(R_2) < \\cdots < f(R_{m + 1})$\u3002\n>\n> \u73b0\u5728\uff0c\u4f60\u8981\u7ed9\u6bcf\u4e2a\u533a\u57df\u67d3\u4e0a\u4e00\u79cd\u989c\u8272\uff0c\u7528\u4e00\u4e2a $1\\sim 20$ \u4e4b\u95f4\u7684\u6b63\u6574\u6570\u8868\u793a\u3002\n>\n> \u6c42\u51fa\u8fd9\u6837\u4e00\u79cd\u67d3\u8272\u65b9\u6848\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u989c\u8272\u76f8\u540c\u7684\u533a\u57df $R_i$ \u548c $R_j(i\\neq j)$\uff0c\u5747\u6ee1\u8db3\u5b83\u4eec\u4e4b\u95f4\u7684\u4efb\u4f55\u4e00\u6761\u7b80\u5355\u8def\u5f84\u4e0a\u90fd\u5747\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u533a\u57df $R_k$ \u4f7f\u5f97 $R_k$ \u7684\u989c\u8272\u5c0f\u4e8e $R_i$ \u548c $R_j$ \u7684\u989c\u8272\u3002\u7b80\u5355\u8def\u5f84\u5b9a\u4e49\u4e3a\u4e0d\u7ecf\u8fc7\u91cd\u590d\u533a\u57df\uff0c\u4e14\u8def\u5f84\u4e0a\u76f8\u90bb\u4e24\u4e2a\u533a\u57df\u6709\u4e00\u6761\u516c\u5171\u8fb9\u7684\u8def\u5f84\u3002\n>\n> \u6309\u7f16\u53f7\u987a\u5e8f\u8f93\u51fa\u6bcf\u4e2a\u533a\u57df\u7684\u989c\u8272\u3002\n>\n> \u53ef\u4ee5\u8bc1\u660e\u5728\u9898\u76ee\u9650\u5236\u4e0b\u4e00\u5b9a\u5b58\u5728\u89e3\uff0c\u82e5\u6709\u591a\u89e3\u8f93\u51fa\u4efb\u610f\u4e00\u4e2a\u3002\n>\n> $3\\leq n \\leq 10 ^ 5$\uff0c$0\\leq m \\leq n - 3$\u3002\n\n\u9605\u8bfb\u7406\u89e3 + STL \u57fa\u7840\u4f7f\u7528\u7ec3\u4e60\u9898\u3002\n\n\u6211\u4eec\u5c06\u6574\u4e2a\u591a\u8fb9\u5f62\u5256\u5206\u7684\u533a\u57df\u5efa\u51fa\u6811\u6765\uff0c\u4efb\u610f\u4e24\u4e2a\u533a\u57df\u7684\u7b80\u5355\u8def\u5f84\u5c31\u662f\u5b83\u4eec\u5728\u6811\u4e0a\u7684\u7b80\u5355\u8def\u5f84\u3002\u76f8\u5f53\u4e8e\u6211\u4eec\u8981\u7ed9\u6574\u68f5\u6811\u67d3\u8272\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u76f8\u540c\u989c\u8272\u7684\u8282\u70b9\u4e4b\u95f4\u5b58\u5728\u989c\u8272\u5c0f\u4e8e\u5b83\u7684\u8282\u70b9\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u4e00\u662f\u7ed9\u591a\u8fb9\u5f62\u5256\u5206\u5efa\u6811\uff0c\u4e8c\u662f\u6811\u67d3\u8272\u3002\n\n---\n\n\u5148\u89e3\u51b3\u7b2c\u4e00\u90e8\u5206\u5efa\u6811\u3002\n\n\u8bbe\u6240\u6709\u5bf9\u89d2\u7ebf\u8fde\u63a5\u9876\u70b9 $a_i, b_i$\uff0c\u4e14 $a_i < b_i$\u3002\u7531\u4e8e\u4fdd\u8bc1\u5bf9\u89d2\u7ebf\u4e24\u4e24\u4e0d\u4ea4\uff0c\u6240\u4ee5\u6211\u4eec\u7c7b\u4f3c\u62ec\u53f7\u5e8f\u5217\u90a3\u6837\u5904\u7406\u6bcf\u6761\u5bf9\u89d2\u7ebf\u3002\u5c06\u6240\u6709\u4e8c\u5143\u7ec4\u6d89\u53ca\u5230\u7684\u5171 $2m$ \u4e2a\u9876\u70b9\u6309\u6807\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u626b\u63cf\u3002\u6ce8\u610f\u82e5\u4e24\u4e2a\u9876\u70b9\u7f16\u53f7\u76f8\u540c\uff0c\u90a3\u4e48\u6309\u7167\u7c7b\u578b\u4e3a $b$ \u7684\u9876\u70b9\u5728\u524d\uff0c\u7c7b\u578b\u4e3a $a$ \u7684\u9876\u70b9\u5728\u540e\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u4e0d\u4f1a\u9519\u8bef\u5339\u914d\u3002\n\n\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a $x_i$\u3002\u82e5 $x_i$ \u662f\u67d0\u4e2a $a_j$\uff0c\u90a3\u4e48\u5c06\u5176\u5165\u6808\u3002\u5426\u5219 $x_i$ \u662f\u67d0\u4e2a $b_j$\uff0c\u4e14\u5f53\u524d\u6808\u9876\u5373\u4e3a\u5176\u5bf9\u5e94\u7684 $a_j$\u3002\u90a3\u4e48 $[a_j, b_j]$ \u8fd9\u4e2a\u533a\u95f4\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u533a\u57df\u3002\u60f3\u8c61\u7528\u4e00\u628a\u5200\u628a\u5b83\u5207\u6389\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5c06\u6240\u6709\u5728 $(a_j, b_j)$ \u8303\u56f4\u5185\u7684\u9876\u70b9\u5220\u53bb\uff08\u6709\u4e9b\u8282\u70b9\u5728\u4e4b\u524d\u7684\u64cd\u4f5c\u4e2d\u5df2\u7ecf\u88ab\u5220\u53bb\u4e86\uff09\u3002\u672c\u6b21\u64cd\u4f5c\u88ab\u5220\u53bb\u7684\u9876\u70b9\uff0c\u518d\u52a0\u4e0a\u4e24\u4e2a\u7aef\u70b9 $a_j$ \u548c $b_j$\uff0c\u5c31\u662f\u5f53\u524d\u533a\u57df $R_k$ \u7684\u9876\u70b9\u3002\u5220\u70b9\u53ef\u4ee5\u7528\u53cc\u5411\u94fe\u8868\u6216 `set` \u7ef4\u62a4\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u6240\u6709 $m + 1$ \u4e2a\u533a\u57df\u7684\u6240\u6709\u9876\u70b9\u3002\u5c06\u5176\u6309\u7167\u5b57\u5178\u5e8f\uff08\u9898\u76ee\u4e2d\u7684\u89c4\u5219\uff09\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u5f97\u5230\u7f16\u53f7\u3002\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u6761\u5bf9\u89d2\u7ebf\uff0c\u5b83\u662f\u67d0\u4e24\u4e2a\u533a\u57df\u7684\u516c\u5171\u8fb9\uff0c\u627e\u5230\u8fd9\u4e24\u4e2a\u533a\u57df\uff08\u901a\u8fc7 `map` \u6216\u5176\u4ed6\u65b9\u5f0f\u5bb9\u6613\u5b9e\u73b0\uff09\u5e76\u5728\u4ed6\u4eec\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u5373\u53ef\u5f97\u5230\u6700\u7ec8\u7684\u5256\u5206\u6811\u3002\n\n---\n\n\u7b2c\u4e8c\u90e8\u5206\u770b\u8d77\u6765\u6709\u4e9b\u68d8\u624b\uff08\u4f46\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u672c\u4eba\u505a\u8fc7\u4e00\u9053\u975e\u5e38\u7c7b\u4f3c\u7684\u9898\u76ee\u6240\u4ee5\u76f4\u63a5\u79d2\u6389\u4e86\uff0c\u9898\u76ee\u5728\u9898\u89e3\u6700\u540e\uff09\u3002\u5c1d\u8bd5\u5206\u6790\u4e00\u4e9b\u6027\u8d28\u3002\n\n\u5148\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u7b26\u5408\u6761\u4ef6\u7684\u67d3\u8272\u65b9\u6848\u3002**\u5f88\u591a\u95ee\u9898\u90fd\u662f\u5148\u4ece\u4e00\u4e2a\u6ee1\u8db3\u9650\u5236\u7684\u5c40\u9762\u51fa\u53d1\u5206\u6790\u6027\u8d28\uff0c\u4ece\u800c\u63a8\u5f97\u6ee1\u8db3\u9650\u5236\u7684\u5145\u8981\u6761\u4ef6**\u3002\n\n\u5bf9\u4e8e\u67d0\u79cd\u989c\u8272 $c$\uff0c\u627e\u5230\u6811\u4e0a\u6240\u6709\u989c\u8272\u4e3a $c$ \u7684\u8282\u70b9 $S$\u3002\u8003\u8651\u70b9\u96c6 $S$ \u5728\u539f\u6811\u4e0a\u5f20\u6210\u7684\u865a\u6811\uff0c\u5fc5\u7136\u9700\u8981\u6709\u82e5\u5e72\u989c\u8272 $< c$ \u7684\u8282\u70b9\u5c06 $S$ \u5206\u5272\u5f00\u6765\u3002\u4e5f\u5373\u6263\u6389\u989c\u8272 $< c$ \u7684\u70b9\u4e4b\u540e $S$ \u4e0d\u8fde\u901a\u3002\n\n\u8003\u5bdf\u70b9\u5206\u6cbb\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6839\u8282\u70b9\u6263\u6389\u540e\uff0c\u5f62\u6210\u82e5\u5e72\u4e0d\u8fde\u901a\u7684\u5b50\u6811\u3002\u8fd9\u4e0e\u4e0a\u9762\u7684\u89c2\u5bdf\u6709\u76f8\u4f3c\u4e4b\u5904\uff0c\u8003\u8651\u5b9a\u91cf\u63cf\u8ff0\u3002\u56e0\u4e3a\u4e00\u68f5\u6811\u7684\u6df1\u5ea6\u5177\u6709\u5b50\u8282\u70b9\u5927\u4e8e\u7236\u8282\u70b9\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u539f\u56fe\u7684\u4efb\u610f\u4e00\u68f5\u70b9\u5206\u6811\u7684\u6df1\u5ea6\u60c5\u51b5\u5747\u4e3a\u4e00\u79cd\u53ef\u884c\u7684\u67d3\u8272\u65b9\u6848\u3002\n\n\uff08\u6211\u5df2\u7ecf\u5c3d\u529b\u5728\u8bf4\u660e\u5e94\u8be5\u600e\u4e48\u60f3\u5230\u70b9\u5206\u6811\u4e86\uff0c\u53ef\u662f\u770b\u8d77\u6765\u8fd8\u662f\u6709\u4e9b\u4e0d\u81ea\u7136 /ll\uff09\n\n\u56e0\u6b64\uff0c\u53ea\u9700\u5bf9\u539f\u6811\u8fdb\u884c\u70b9\u5206\u6cbb\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5728\u70b9\u5206\u6811\u4e0a\u7684\u6df1\u5ea6\u3002\u6807\u53f7\u5927\u5c0f\u4e3a\u4e25\u683c $\\log_2 n + 1$\uff0c\u7b26\u5408\u9898\u76ee $20$ \u7684\u9650\u5236\u3002\u524d\u63d0\u662f\u5728\u5bfb\u627e\u5b50\u6811\u91cd\u5fc3\u65f6\u6b63\u786e\u4e0b\u4f20\u5b50\u6811\u5927\u5c0f\uff0c\u800c\u975e\u7528\u5f53\u524d\u5206\u6cbb\u91cd\u5fc3\u7684\u7236\u4eb2\u4f5c\u4e3a\u6839\u65f6\u5bf9\u5e94\u5b50\u6811\u5927\u5c0f\u4f5c\u4e3a\u4ee5\u5f53\u524d\u5206\u6cbb\u91cd\u5fc3\u4f5c\u4e3a\u6839\u65f6\u5bf9\u5e94\u5b50\u6811\u5927\u5c0f\uff0c\u5c3d\u7ba1\u540e\u8005\u4e0d\u5f71\u54cd\u65f6\u95f4\u590d\u6742\u5ea6\u4f46\u4f1a\u4f7f\u5f97\u9012\u5f52\u5c42\u6570\u4e0d\u6ee1\u8db3\u4e25\u683c $\\log_2 n$ \u7684\u9650\u5236\uff08\u5e94\u8be5\u81f3\u591a\u4e58\u4e0a\u4e00\u4e2a $2$\uff0c\u90a3\u4e48\u5c31\u5bc4\u4e86\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u5bf9\u6570\u3002\u7c7b\u4f3c\u7684\u95ee\u9898\u89c1 [P5912 [POI2004]JAS](https://www.luogu.com.cn/problem/P5912)\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 5;\nint n, m, stc[N], top;\npair <int, int> p[N << 1];\nmap <pair <int, int>, int> mp;\nset <int> s;\nvector <int> rg[N];\nint R, mx[N], vis[N], sz[N], label[N];\nvector <int> g[N];\nvoid findroot(int id, int fa, int tot) {\n\tmx[id] = 0, sz[id] = 1;\n\tfor(int it : g[id]) {\n\t\tif(it == fa || vis[it]) continue;\n\t\tfindroot(it, id, tot);\n\t\tsz[id] += sz[it], mx[id] = max(mx[id], sz[it]);\n\t}\n\tmx[id] = max(mx[id], tot - sz[id]);\n\tif(mx[R] > mx[id]) R = id;\n}\nvoid findsize(int id, int fa) {\n\tsz[id] = 1;\n\tfor(int it : g[id]) if(it != fa && !vis[it]) findsize(it, id), sz[id] += sz[it];\n}\nvoid divide(int id) {\n\tvis[id] = 1;\n\tfor(int it : g[id]) {\n\t\tif(vis[it]) continue;\n\t\tfindsize(it, id); // ADD THIS LINE\n\t\tR = 0, findroot(it, id, sz[it]);\n\t\tlabel[R] = label[id] + 1, divide(R);\n\t}\n}\nint main() {\n\t// freopen(\"1.in\", \"r\", stdin);\n\tcin >> n >> m;\n\tmx[0] = n;\n\tfor(int i = 1; i <= n; i++) s.insert(i);\n\tfor(int i = 1, x, y, cnt = 0; i <= m; i++) {\n\t\tcin >> x >> y;\n\t\tif(x > y) swap(x, y);\n\t\tp[++cnt] = {x, 1}, p[++cnt] = {y, 0};\n\t}\n\tsort(p + 1, p + m * 2 + 1);\n\tfor(int i = 1, cnt = 0; i <= m * 2; i++) {\n\t\tint id = p[i].first;\n\t\tif(p[i].second) {stc[++top] = id; continue;}\n\t\tint l = stc[top--];\n\t\t// cerr << l << \" \" << id << endl;\n\t\trg[++cnt].push_back(l), rg[cnt].push_back(id);\n\t\twhile(1) {\n\t\t\t// cerr << l << \" \" << r << \" \" << *--s.end() << endl;\n\t\t\tauto it = s.upper_bound(l);\n\t\t\tassert(it != s.end());\n\t\t\tif(*it == id) break;\n\t\t\trg[cnt].push_back(*it), s.erase(it);\n\t\t}\n\t}\n\tm++;\n\twhile(!s.empty()) rg[m].push_back(*--s.end()), s.erase(--s.end());\n\tfor(int i = 1; i <= m; i++) sort(rg[i].begin(), rg[i].end()), reverse(rg[i].begin(), rg[i].end());\n\t// for(int i = 1; i <= m; i++) {\n\t// \tcerr << \"chk \" << i << \" : \";\n\t// \tfor(int it : rg[i]) cerr << it << \" \";\n\t// \tcerr << endl;\n\t// }\n\tsort(rg + 1, rg + m + 1);\n\tfor(int i = 1; i <= m; i++) {\n\t\t// cerr << \"chk \" << i << \" : \";\n\t\t// for(int it : rg[i]) cerr << it << \" \";\n\t\t// cerr << endl;\n\t\tfor(int j = 0; j < rg[i].size(); j++) {\n\t\t\tint x = rg[i][j], y = j ? rg[i][j - 1] : rg[i].back();\n\t\t\tif(x > y) swap(x, y);\n\t\t\tif(x == 1 && y == n || x + 1 == y) continue;\n\t\t\t// cerr << \"chk \" << x << \" \" << y << endl;\n\t\t\tauto it = mp.find(make_pair(x, y));\n\t\t\tif(it == mp.end()) mp[make_pair(x, y)] = i;\n\t\t\telse g[it -> second].push_back(i), g[i].push_back(it -> second);\n\t\t}\n\t}\n\tfindroot(1, 0, m), label[R] = 1, divide(R);\n\tfor(int i = 1; i <= m; i++) cout << label[i] << \" \";\n\treturn 0;\n}\n\n/*\n2022/5/1\nstart thinking at 14:06\n\n\u628a\u6574\u4e2a\u5256\u5206\u5efa\u6210\u6811.\n\u641e\u4e2a\u70b9\u5206\u6811\u5c31\u597d\u4e86.\n\u6c42\u6700\u5c0f\u67d3\u8272\u6570\u91cf\u4e5f\u6709\u539f\u9898 POI2004 JAS\n\n\u5256\u5206\u8fde\u8fb9\u5199\u6302\u4e86 =.= \u76f4\u63a5\u7528\u6808\u641e\u5c31\u597d\u4e86\u554a!!!\n\u76f4\u63a5\u5199\u4e0d\u4e25\u8c28\u7684\u70b9\u5206\u6cbb\u662f\u4e0d\u884c\u7684!!!! \u8981\u4e25\u8c28\u7684\u70b9\u5206\u6cbb.\n\nstart coding at 14:27\nfinish debugging at 15:13\n*/\n```",
        "postTime": 1651580779,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF776F Sherlock's bet to Moriarty"
    },
    {
        "content": "\u9605\u8bfb\u7406\u89e3\u9898\u3002\n\n------\n\n\u7ffb\u8bd1\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6b63 $n$ \u8fb9\u5f62\uff0c\u7528 $m$ \u6761\u5bf9\u89d2\u7ebf\u5c06\u5176\u5206\u5f00\uff0c\u4fdd\u8bc1\u5bf9\u89d2\u7ebf\u4e24\u4e24\u65e0\u4ea4\u3002\n\n\u4f60\u9700\u8981\u4e3a\u5206\u6210\u7684\u6bcf\u4e2a\u90e8\u5206\u67d3\u8272\uff08\u5373\u8d4b\u4e00\u4e2a\u503c\uff09\uff0c\u6ee1\u8db3\u5bf9\u4e8e\u4efb\u4e24\u4e2a\u540c\u8272\u90e8\u5206\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8def\u5f84\uff08\u8def\u5f84\u6307\u82e5\u5e72\u90e8\u5206\u6784\u6210\u7684\u5e8f\u5217\uff0c\u6ee1\u8db3\u5728\u5e8f\u5217\u4e2d\u76f8\u90bb\u7684\u90e8\u5206\u6709\u516c\u5171\u8fb9\uff09\uff0c\u8def\u5f84\u90fd\u4e2d\u5b58\u5728\u4e00\u4e2a\u90e8\u5206\uff0c\u6ee1\u8db3\u5176\u989c\u8272\u5bf9\u5e94\u7684\u503c\u5c0f\u4e8e\u6b64\u4e8c\u540c\u8272\u90e8\u5206\u7684\u989c\u8272\u5bf9\u5e94\u7684\u503c\u3002\u4f60\u53ea\u80fd\u4f7f\u7528\u4e0d\u8d85\u8fc7 $20$ \u79cd\u989c\u8272\u3002\n\n\u8f93\u51fa\u4e00\u79cd\u65b9\u6848\u3002\u4f7f\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u4e3a\u6bcf\u4e2a\u90e8\u5206\u6807\u53f7\uff1a\n\n- \u5b9a\u4e49\u4e00\u4e2a\u90e8\u5206\u7684\u6743\u503c\u4e3a $\\sum 2^{a_i}$\uff0c\u5176\u4e2d $\\{a\\}$ \u662f\u4e0e\u4e4b\u76f8\u90bb\u7684\u9876\u70b9\u96c6\u5408\u3002\n- \u5c06\u6240\u6709\u90e8\u5206\u6309\u7167\u6743\u503c\u9012\u589e\u6392\u5e8f\u3002\n- \u6392\u5e8f\u5b8c\u540e\uff0c\u4e00\u4e2a\u90e8\u5206\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u5373\u4e3a\u5176\u6807\u53f7\u3002\n\n\u6309\u7167\u6807\u53f7\u987a\u5e8f\u8f93\u51fa\u6bcf\u4e2a\u5143\u7d20\u7684\u67d3\u8272\u3002\n\n------\n\n\u9996\u5148\u5148\u8003\u8651\u591a\u8fb9\u5f62\u5206\u5272\u95ee\u9898\u3002\u7136\u540e\u53d1\u73b0\u5b83\u5272\u51fa\u6765\u4e00\u68f5\u6811\u3002\n\n\u90a3\u4e48\u67d3\u8272\u95ee\u9898\u5c31\u5f88\u597d\u529e\u4e86\u3002\u76f4\u63a5\u5927\u529b\u6dc0\u7c89\u8d28\uff0c\u5c06\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u8d4b\u6210\u5176\u5728\u5206\u6cbb\u6811\u4e0a\u7684\u6df1\u5ea6\u5373\u53ef\u3002\u663e\u7136\u8fd9\u6837\u6211\u4eec\u53ea\u9700 $O(\\log m)$ \u79cd\u4e0d\u540c\u989c\u8272\u3002\n\n\u7136\u540e\u5c31\u8981\u5efa\u51fa\u6811\u6765\u4e86\u3002\u5728 $1-n$ \u8fb9\u5904\u65ad\u73af\u6210\u94fe\uff0c\u7136\u540e\u7528\u6808\u968f\u4fbf\u641e\u641e\u5c31\u51fa\u6765\u4e86\u3002\n\n\u7136\u540e\u5c31\u9700\u8981\u5904\u7406\u6807\u53f7\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u6240\u6709\u90e8\u5206\u7684\u6240\u6709\u76f8\u90bb\u9876\u70b9\u96c6\u5408\u7684\u5927\u5c0f\u603b\u548c\u662f $O(n+m)$ \u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u5904\u7406\u51fa\u8282\u70b9\u7684\u5927\u5c0f\u96c6\u5408\uff1b\u7136\u540e\uff0c\u89c2\u5bdf\u53d1\u73b0\u4efb\u4e24\u4e2a\u90e8\u5206\u4e0d\u5b58\u5728\u4e09\u4e2a\u516c\u5171\u9876\u70b9\uff0c\u4e8e\u662f\u6bd4\u8f83\u662f $O(1)$ \u7684\uff0c\u8fdb\u800c\u53ef\u4ee5\u76f4\u63a5\u6392\u5e8f\u3002\n\n\u590d\u6742\u5ea6 $n\\log n$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n/*\nCriteria:\n1.read the problem carefully; WRITE DOWN SPECIAL CONSTRAINTS when the problem is long;\n2.consider special situations/constraints to get observations;\n3.think of everything throughout before coding;\n4.return to the initial list of notifications after coding.\n\nCONSTRAINTS:\n\nOBSERVATIONS:\n\nOTHER NOTIFICATIONS:\n\nTHINK CAREFULLY AND CODE DETERMINEDLY!\n*/\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,stk[100100],tp,fa[100100],ord[100100],RT,SZ,msz[100100],sz[100100],res[100100];\npair<int,int>p[100100];\nvector<int>v[100100],u[100100];\nvector<int>w;\nbool vis[100100];\nvoid getroot(int x,int fa){\n\tmsz[x]=0,sz[x]=1;\n\tfor(auto y:v[x])if(y!=fa&&!vis[y])getroot(y,x),msz[x]=max(msz[x],sz[y]),sz[x]+=sz[y];\n\tmsz[x]=max(msz[x],SZ-sz[x]);\n\tif(msz[x]<msz[RT])RT=x;\n}\nvoid getsz(int x,int fa){sz[x]=1;for(auto y:v[x])if(y!=fa&&!vis[y])getsz(y,x),sz[x]+=sz[y];}\nvoid solve(int x,int dep){\n\tgetsz(x,0),vis[x]=true,res[x]=dep;\n\tfor(auto y:v[x])if(!vis[y])RT=0,SZ=sz[y],getroot(y,0),solve(RT,dep+1);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,x,y;i<=m;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif(x>y)swap(x,y);\n\t\tp[i]=make_pair(x,y);\n\t}\n\tp[++m]=make_pair(1,n);\n\tsort(p+1,p+m+1,[](const pair<int,int>&u,const pair<int,int>&v){return u.first==v.first?u.second<v.second:u.first>v.first;});\n\tfor(int i=1;i<=m;i++){\n\t\tw.push_back(p[i].first);\n\t\twhile(tp&&p[stk[tp]].second<=p[i].second)\n\t\t\tw.push_back(p[stk[tp]].first),w.push_back(p[stk[tp]].second),v[i].push_back(stk[tp]),v[stk[tp]].push_back(i),tp--;\n\t\tw.push_back(p[i].second);\n\t\tfor(int j=0;j+1<w.size();j+=2)for(int k=w[j];k<=w[j+1];k++)if(u[i].empty()||u[i].back()!=k)u[i].push_back(k);\n\t\tw.clear();\n\t\tstk[++tp]=i;\n\t}\n\tfor(int i=1;i<=m;i++)ord[i]=i;\n\tsort(ord+1,ord+m+1,[](int x,int y){\n\t\tfor(auto i=u[x].rbegin(),j=u[y].rbegin();;i++,j++)if(*i!=*j)return *i<*j;\n\t});\n\tSZ=m,msz[RT=0]=m,getroot(1,0),solve(RT,1);\n\tfor(int i=1;i<=m;i++)printf(\"%d \",res[ord[i]]);puts(\"\");\n\treturn 0;\n}\n```\n\n",
        "postTime": 1651326002,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF776F\u3010Sherlock's bet to Moriarty\u3011"
    }
]