[
    {
        "content": "\n\u66f4 $\\mu$ \u68d2\u7684\u9605\u8bfb\u4f53\u9a8c $\\to $ [`George1123`](https://www.cnblogs.com/George1123/p/13749148.html)\n\n---\n## \u9898\u9762\n\n> [CF1418G Three Occurrences](https://www.luogu.com.cn/problem/CF1418G)\n\n> \u7ed9\u4e00\u4e2a $n$ \u4e2a\u6570\u7684\u5e8f\u5217 $a_i$\uff0c\u6c42\u6bcf\u4e2a\u51fa\u73b0\u8fc7\u7684\u6570\u51fa\u73b0\u6b21\u6570\u4e3a $3$ \u7684\u5b50\u5e8f\u5217\u4e2a\u6570\u3002\n\n> \u6570\u636e\u8303\u56f4\uff1a$1\\le n\\le 5\\cdot 10^5$\uff0c$1\\le a_i\\le n$\u3002\n\n---\n## \u849f\u84bb\u8bed\n\n\u505a\u4e86\u534a\u4e2a\u4e0a\u5348\u505a\u51fa\u4e86\u6700\u79bb\u8c31\u7684\u505a\u6cd5\uff1a\u8868\u683c\u6253\u53c9\u53c9\u3002\n\n\u7528\u7ebf\u6bb5\u6811\u6c42\u77e9\u9635\u9762\u79ef\u5e76\u5b9e\u73b0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n\\log n)$\uff0c\u603b\u7528\u65f6 $1.40 min$\u3002\n\n---\n## \u849f\u84bb\u89e3\n\n\u60f3\u8c61\u6709\u4e00\u4e2a $n\\times n$ \u7684\u8868\u683c\uff0c\u884c\u8868\u793a\u53f3\u7aef\u70b9\uff0c\u5217\u8868\u793a\u5de6\u7aef\u70b9\u3002\n\n\u5982\u679c\u8868\u683c\u4e0a\u7684\u6570\u4e3a $1$ \u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u6ca1\u88ab\u53c9\u6389\uff0c\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u5426\u5219\u8fd9\u4e2a\u533a\u95f4\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u53c9\u7684\u90fd\u662f\u4e00\u4e2a\u77e9\u9635\uff0c\u7ebf\u6bb5\u6811\u626b\u63cf\u7ebf\u6c42\u77e9\u9635\u9762\u79ef\u5e76\u5373\u53ef\u3002\n\n**\u8003\u8651\u6570\u636e\uff1a**\n\n```cpp\n8\n1 1 2 1 2 1 2 1\n\nanswer=2\n```\n\n\u73b0\u5728\u7684\u8868\u8868\u662f\uff1a\n\n|||||||||\n|-|-|-|-|-|-|-|-|\n|$1$|$1$|$1$|$1$|$1$|$1$|$1$|$1$|\n|$1$|$1$|$1$|$1$|$1$|$1$|$1$|$1$|\n|$1$|$1$|$1$|$1$|$1$|$1$|$1$|$1$|\n|$1$|$1$|$1$|$1$|$1$|$1$|$1$|$1$|\n|$1$|$1$|$1$|$1$|$1$|$1$|$1$|$1$|\n|$1$|$1$|$1$|$1$|$1$|$1$|$1$|$1$|\n|$1$|$1$|$1$|$1$|$1$|$1$|$1$|$1$|\n|$1$|$1$|$1$|$1$|$1$|$1$|$1$|$1$|\n\n$(1)$ \u628a\u5de6\u7aef\u70b9\u5927\u4e8e\u53f3\u7aef\u70b9\u7684\u7ed9\u53c9\u4e86\uff1a\n\n|||||||||\n|-|-|-|-|-|-|-|-|\n|$1$|$0$|$0$|$0$|$0$|$0$|$0$|$0$|\n|$1$|$1$|$0$|$0$|$0$|$0$|$0$|$0$|\n|$1$|$1$|$1$|$0$|$0$|$0$|$0$|$0$|\n|$1$|$1$|$1$|$1$|$0$|$0$|$0$|$0$|\n|$1$|$1$|$1$|$1$|$1$|$0$|$0$|$0$|\n|$1$|$1$|$1$|$1$|$1$|$1$|$0$|$0$|\n|$1$|$1$|$1$|$1$|$1$|$1$|$1$|$0$|\n|$1$|$1$|$1$|$1$|$1$|$1$|$1$|$1$|\n\n$(2)$ \u628a\u8d85\u8fc7 $3$ \u4e2a\u76f8\u540c\u7684\u6570\u7684\u533a\u95f4\u53c9\u4e86\uff1a\n\n|||||||||\n|-|-|-|-|-|-|-|-|\n|$1$|$0$|$0$|$0$|$0$|$0$|$0$|$0$|\n|$1$|$1$|$0$|$0$|$0$|$0$|$0$|$0$|\n|$1$|$1$|$1$|$0$|$0$|$0$|$0$|$0$|\n|$1$|$1$|$1$|$1$|$0$|$0$|$0$|$0$|\n|$1$|$1$|$1$|$1$|$1$|$0$|$0$|$0$|\n|$0$|$1$|$1$|$1$|$1$|$1$|$0$|$0$|\n|$0$|$1$|$1$|$1$|$1$|$1$|$1$|$0$|\n|$0$|$0$|$1$|$1$|$1$|$1$|$1$|$1$|\n\n$(3)$ \u628a\u5c11\u4e8e $3$ \u4e2a\u76f8\u540c\u7684\u6570\u7684\u533a\u95f4\u53c9\u4e86\uff1a\n\n|||||||||\n|-|-|-|-|-|-|-|-|\n|$0$|$0$|$0$|$0$|$0$|$0$|$0$|$0$|\n|$0$|$0$|$0$|$0$|$0$|$0$|$0$|$0$|\n|$0$|$0$|$0$|$0$|$0$|$0$|$0$|$0$|\n|$0$|$0$|$0$|$0$|$0$|$0$|$0$|$0$|\n|$0$|$0$|$0$|$0$|$0$|$0$|$0$|$0$|\n|$0$|$0$|$0$|$0$|$0$|$0$|$0$|$0$|\n|$0$|$1$|$0$|$0$|$0$|$0$|$0$|$0$|\n|$0$|$0$|$1$|$0$|$0$|$0$|$0$|$0$|\n\n\n\u7136\u540e\u5269\u4e0b\u7684 $2$ \u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n\u624b\u73a9\u4e00\u4e0b\u5c31\u53ef\u4ee5\u53d1\u73b0\u53c9\u7684\u89c4\u5f8b\u4e86\uff0c\u975e\u5e38\u7b80\u5355\u6613\u61c2\uff0c\u849f\u84bb\u5c31\u4e0d\u8d1f\u8d23\u4efb\u5730\u653e\u4ee3\u7801\u91cc\u4e86\u3002\n\n---\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n//Start\ntypedef long long ll;\ntypedef double db;\n#define mp(a,b) make_pair((a),(b))\n#define x first\n#define y second\n#define be(a) (a).begin()\n#define en(a) (a).end()\n#define sz(a) int((a).size())\n#define pb(a) push_back(a)\n#define R(i,a,b) for(int i=(a),I=(b);i<I;i++)\n#define L(i,a,b) for(int i=(b)-1,I=(a)-1;i>I;i--)\nconst int iinf=0x3f3f3f3f;\nconst ll linf=0x3f3f3f3f3f3f3f3f;\n\n//Data\nconst int N=5e5;\nint n,a[N],d[N]; ll ans;\nvector<int> id[N];\nstruct line{\n    int l,r,t; line(){}\n    line(int l,int r,int t):l(l),r(r),t(t){}\n};\nvector<line> p[N+1];\nvoid addmat(int xl,int xr,int yl,int yr){\n    // cout<<\"([\"<<xl<<\",\"<<xr<<\"),[\"<<yl<<\",\"<<yr<<\"))\\n\";\n    p[xl].pb(line(yl,yr,1)),p[xr].pb(line(yl,yr,-1));\n}\n\n//SegmentTree\nconst int tN=N<<2;\n#define mid ((l+r)>>1)\nint mn[tN],mc[tN],mk[tN];\nvoid pushup(int k){\n    if(mn[k*2+1]<mn[k*2+2]) mn[k]=mn[k*2+1],mc[k]=mc[k*2+1];\n    else if(mn[k*2+1]>mn[k*2+2]) mn[k]=mn[k*2+2],mc[k]=mc[k*2+2];\n    else mn[k]=mn[k*2+1],mc[k]=mc[k*2+1]+mc[k*2+2];\n}\nvoid pushadd(int k,int v){mn[k]+=v,mk[k]+=v;}\nvoid pushdown(int k){pushadd(k*2+1,mk[k]),pushadd(k*2+2,mk[k]),mk[k]=0;}\nvoid build(int k=0,int l=0,int r=n){\n    if(r-l==1) return mn[k]=0,mc[k]=1,void();\n    build(k*2+1,l,mid),build(k*2+2,mid,r),pushup(k);\n}\nvoid add(int x,int y,int v,int k=0,int l=0,int r=n){\n    if(r<=x||y<=l) return; if(x<=l&&r<=y) return pushadd(k,v);\n    pushdown(k),add(x,y,v,k*2+1,l,mid),add(x,y,v,k*2+2,mid,r),pushup(k);\n}\n\n//Main\nint main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0),cout.tie(0);\n    cin>>n;\n    R(i,0,n) id[i].pb(-1),id[i].pb(-1),id[i].pb(-1);\n    R(i,0,n) cin>>a[i],--a[i],d[i]=sz(id[a[i]]),id[a[i]].pb(i);\n    R(i,0,n) id[i].pb(n),id[i].pb(n),id[i].pb(n);\n    // cout<<\"ok 60\\n\";\n    R(i,0,n){\n        addmat(i,i+1,i+1,n); // \u628a\u5de6\u7aef\u70b9\u5927\u4e8e\u53f3\u7aef\u70b9\u7684\u7ed9\u53c9\u4e86\n        addmat(i,n,0,id[a[i]][d[i]-3]+1); //\u628a\u8d85\u8fc7 3 \u4e2a\u76f8\u540c\u7684\u6570\u7684\u533a\u95f4\u53c9\u4e86\n        addmat(i,id[a[i]][d[i]+2],id[a[i]][d[i]-1]+1,i+1); //\u628a\u5c11\u4e8e 3 \u4e2a\u76f8\u540c\u7684\u6570\u7684\u533a\u95f4\u53c9\u4e86\n    }\n    // cout<<\"ok 66\\n\";\n    build();\n    R(i,0,n){ //\u6c42\u4e2a\u77e9\u9635\u9762\u79ef\u5e76\n        for(line u:p[i])if(u.r>u.l) add(u.l,u.r,u.t);\n        ans+=mc[0]*(mn[0]==0);\n    }\n    cout<<ans<<'\\n';\n    return 0;\n}\n```\n---\n**\u795d\u5927\u5bb6\u5b66\u4e60\u6109\u5feb\uff01**",
        "postTime": 1601356962,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1418G \u3010Three Occurrences\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u8001\u5389\u5bb3\u4e86\u3002\n\n\u770b\u5230\u8fd9\u4e2a\u9898\u7684\u7b2c\u4e00\u60f3\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\n\n\u8003\u8651\u679a\u4e3e\u53f3\u7aef\u70b9\uff0c\u7ef4\u62a4\u5408\u6cd5\u7684\u5de6\u7aef\u70b9\u4e2a\u6570\u3002\u8fd9\u73a9\u610f\u5c5e\u5b9e\u53ef\u4ee5\u7ebf\u6bb5\u6811\u641e\u3002\u601d\u7ef4\u7b80\u5355\uff0c\u5b9e\u73b0\u4e5f\u4e0d\u96be\u3002\n\n\u4f46\u6709\u4e00\u79cd\u5f88\u725b\u903c\u7684\u53ea\u8981\u5199\u5341\u884c\u7684\u505a\u6cd5\u3002\n\n\u5148\u8003\u8651\u957f\u5ea6\u662f 3 \u7684\u500d\u6570\u600e\u4e48\u505a\u3002\n\n\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u6bcf\u4e2a\u524d\u7f00\u7684\u6bcf\u4e2a\u6570\u7684\u51fa\u73b0\u4e2a\u6570 $cnt_{i, j}$\uff0c\u8868\u793a\u524d $i$ \u4e2a\u6570\u4e2d\u6570 $j$ \u51fa\u73b0\u7684\u6b21\u6570**\u6a21 3 \u7684\u503c**\u3002\n\n\u90a3\u4e48\u4e00\u6bb5\u533a\u95f4 $[l, r]$ \u7b26\u5408\u6761\u4ef6\u5f53\u4e14\u4ec5\u5f53 $cnt_{l-1} = cnt_r$\u3002\u5bb9\u6613\u54c8\u5e0c\u3002\n\n\u81f3\u4e8e\u6070\u597d\u4e3a 3\uff1f\u626b\u63cf\u7ebf\u4e00\u4e0b\u5c31\u6ca1\u4e86\u3002\n\n\u653e\u4e2a\u4ee3\u7801\u94fe\u63a5\u3002https://www.luogu.com.cn/paste/3t04xvxn\u3002\n\n",
        "postTime": 1600154031,
        "uid": 55078,
        "name": "YLWang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1418G \u3010Three Occurrences\u3011"
    },
    {
        "content": "\n~~\u5355\u54c8\u5e0c\u4e0d\u80fd\u8fc7\u5dee\u8bc4\uff0c\u6211\u5361\u4e86\u6574\u657420\u6b21\uff0c\u6700\u540e\u53ea\u80fd\u59a5\u534f\u5199\u53cc\u54c8\u5e0c~~\n\n\u9898\u610f\uff1a\n\n\u95ee\u533a\u95f4\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u4e25\u683c\u51fa\u73b0\u4e09\u6b21\u7684\u533a\u95f4\u4e2a\u6570\u3002 $n\\leq 500000$\n\n\n---\n\u601d\u8def\uff1a\n\n\u6211\u4eec\u5148\u8003\u8651\u533a\u95f4\u91cc\u7684\u5143\u7d20\u51fa\u73b0\u6b21\u6570\u90fd\u662f\u4e09\u7684\u500d\u6570\u5982\u4f55\u505a\u3002\uff08\u90a3\u4e48\u539f\u9898\u53ea\u8981\u5728\u626b\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u524d\u4e09\u4e2a\u70b9\uff0c\u5e76\u4e14\u6bcf\u6b21\u628a\u5df2\u7ecf\u6ca1\u6709\u8d21\u732e\u7684\u5220\u6389\u5c31\u597d\u4e86\uff09\n\n\u90a3\u4e48\u533a\u95f4 $l,r$ \u6709\u8d21\u732e\u7684\u6761\u4ef6\u662f\u5bf9\u4e8e $l$ \u70b9\u548c $r$ \u70b9\uff0c\u6240\u6709\u5143\u7d20\u5728\u8fd9\u4e2a\u70b9\u4e4b\u524d\u51fa\u73b0\u7684\u6b21\u6570\u5bf9 $3$ \u53d6\u6a21\u76f8\u540c\u3002\uff08\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u4e0d\u5173\u5fc3\u5230\u67d0\u4e2a\u70b9\u67d0\u4e2a\u5143\u7d20\u51fa\u73b0\u591a\u5c11\u6b21\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u8fd9\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u5bf9 $3$ \u53d6\u6a21\u7684\u503c\uff0c\u90a3\u4e48\u4e00\u4e2a\u533a\u95f4\u8981\u4ea7\u751f\u8d21\u732e\u53ea\u8981\u4e24\u4e2a\u7aef\u70b9\u7684\u6240\u6709\u5143\u7d20\u7684\u8fd9\u4e2a\u503c\u76f8\u540c\u5c31\u597d\u4e86\u3002\uff09\n\n\u663e\u7136\u6211\u4eec\u4e0d\u80fd\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u5f00\u4e00\u4e2a\u6876\u6765\u5b58\u4e0b\u5230\u8fd9\u4e2a\u70b9\u4f4d\u7f6e\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u641e\u51fa\u4e00\u4e2a\u54c8\u5e0c\u503c\u4ee3\u66ff\u8fd9\u4e2a\u6876\uff0c\u6bcf\u6b21\u4f7f\u7528\u54c8\u5e0c\u503c\u6765\u8ba1\u7b97\u3002\uff08\u7531\u4e8e\u662fcf\u9898\uff0c\u6240\u4ee5\u5355\u54c8\u5e0c\u4f1a\u88abhack\uff09\n\n---\n\n\u5b9e\u73b0\uff1a\n\n\u4e0d\u7528\u5176\u4ed6\u6570\u636e\u7ed3\u6784\uff0c\u76f4\u63a5\u626b\u4e00\u904d\uff0c\u626b\u7684\u540c\u65f6\u5f00\u4e00\u4e2a\u6307\u9488\u8bb0\u5f55\u5220\u9664\u524d\u9762\u6ca1\u6709\u8d21\u732e\u7684\u70b9\uff0c\u5e76\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u4ed6\u524d\u9762\u7684\u70b9\u4e0e\u4ed6\u54c8\u5e0c\u503c\u76f8\u540c\u7684\u5c31\u597d\u4e86\u3002\uff08\u81f3\u4e8e\u54c8\u5e0c\u7684\u65b9\u6cd5\uff0c\u6211\u662f\u628a\u6bcf\u4e2a\u5143\u7d20 $x$ \u7b97\u4f5c $base^x$ \u6765\u641e\uff09\n\n\u628amap\u7684log\u8ba1\u7b97\u8fdb\u53bb\uff0c\u590d\u6742\u5ea6$O(nlogn)$\n\n---\n\n\n\u5c0f\u849f\u84bb\u6bd4\u8f83\u83dc\uff0c\u4e0d\u592a\u4f1a\u5199\u9898\u89e3\uff0c\u4ee3\u7801\u53c8\u4e11\uff0c\u5927\u4f6c\u4eec\u8f7b\u55b7\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int unsigned long long \ninline int min(int a,int b){return a<b?a:b;}\nconst int Maxn=5e5+5;\ninline int R()\n{\n\tint res,sign=1;char c;\n\twhile((c=getchar())>'9'||c<'0') if(c=='-') sign=-1;res=c-'0';\n\twhile((c=getchar())>='0'&&c<='9') res=res*10+c-'0';\n\treturn res*sign;\n}\nconst int Mo=3158565539;\nconst int  P=1526024417;\nconst int base=15260279;\nmap<int,int>q,Q;\nint a[Maxn],n,ans,dp[Maxn],pre[Maxn][3],power[Maxn],num[Maxn],cnt=0;\nint               Dp[Maxn],             Power[Maxn];//\u53cc\u54c8\u5e0c \ninline int H(int x){if(num[x]) return num[x];return num[x]=++cnt;}\nsigned main()\n{\n\tn=R();power[0]=1;Power[0]=1;\n\tfor(int i=1;i<=500000;i++) power[i]=(power[i-1]*base)%Mo;\n\tfor(int i=1;i<=500000;i++) Power[i]=(Power[i-1]*base)% P;\n\tint x,State=0,state=0,p1=1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tq[state]++;\n\t\tQ[State]++;\n\t\tdp[i]=state;\n\t\tDp[i]=State;//dp\u5b58\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u72b6\u6001 \n\t\tx=H(R());a[x]++;\n\t\tif(pre[x][0]){//\u5220\u9664\u6ca1\u8d21\u732e\u7684\u70b9\u7684\u8d21\u732e \n\t\t\tif(pre[x][1]){\n\t\t\t\tif(pre[x][2])\n\t\t\t\t\twhile(p1<=pre[x][2]) \n\t\t\t\t\t{\n\t\t\t\t\t\tq[dp[p1]]--;\n\t\t\t\t\t\tQ[Dp[p1++]]--;\n\t\t\t\t\t}\n\t\t\t\tpre[x][2]=pre[x][1];\n\t\t\t}\n\t\t\tpre[x][1]=pre[x][0];\n\t\t}\n\t\tpre[x][0]=i;\n\t\tif(a[x]!=3) //\u4fee\u6539\u72b6\u6001 \n\t\t{\n\t\t\tstate+=power[x];\n\t\t\tState+=Power[x];\n\t\t}\n\t\telse \n\t\t{\n\t\t\ta[x]=0;\n\t\t\tstate=state-power[x]+Mo;\n\t\t\tstate=state-power[x]+Mo;\n\t\t\tState=State-Power[x]+ P;\n\t\t\tState=State-Power[x]+ P;\n\t\t}\n\t\tstate%=Mo;\n\t\tState%= P;\n\t\tans+=min(Q[State],q[state]);//\u8ba1\u7b97\u8d21\u732e \n\t}\n\tcout<<ans;\n}\n\n```\n\n\n",
        "postTime": 1600249169,
        "uid": 220857,
        "name": "\u7d20\u8d28\u73a9\u5bb6\u5b591\u8d85",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1418G \u3010Three Occurrences\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6211\u7528\u4e86\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684\u65b9\u6cd5\uff1a\n\n### 1.\u5206\u6cbb+$Hash$\n\n\u770b\u5230\u7edf\u8ba1\u533a\u95f4\u4e2a\u6570\u7acb\u9a6c\u60f3\u5230\u5206\u6cbb\uff0c\u8003\u8651\u6bcf\u6b21\u5982\u4f55\u628a\u8de8$mid$\u7684\u4e24\u4e2a\u524d\u540e\u7f00**\u62fc\u63a5**\u8d77\u6765\u3002\u6bd4\u5982\u6211\u5de6\u533a\u95f4\u7684\u540e\u7f00\u91cc\u67092\u4e2a1\uff0c\u90a3\u4e48\u4e3a\u4e86\u4e0e\u4e4b\u4e92\u8865\uff0c\u53f3\u533a\u95f4\u7684\u524d\u7f00\u91cc\u5c31\u5fc5\u987b\u67091\u4e2a1\uff0c\u4e0d\u96be\u60f3\u5230\u628a$cnt$\u6570\u7ec4\u54c8\u5e0c\u8d77\u6765\uff0c\u4e0e\u4e4b\u4e92\u8865\u7684$cnt$\u6570\u7ec4\u7684\u54c8\u5e0c\u503c\u4e5f\u662f\u80fd\u7b97\u7684\uff0c\u5f53\u626b\u63cf\u524d\u6216\u540e\u7f00\u65f6\u67d0\u4e2a\u6570$cnt$\u8d85\u8fc73\uff0c\u90a3\u4e48\u540e\u9762\u7684\u5c31\u90fd\u662f\u975e\u6cd5\u7684\uff0c\u4e0d\u4f5c\u7edf\u8ba1\u3002$cnt=3$\u65f6\u5c31\u628a\u5b83\u5f530\u5904\u7406\u3002\u5f53\u7136\uff0c\u8fd9\u8981\u7279\u6b8a\u8003\u8651\u5de6\u53f3\u90e8\u5206\u5404\u67093\u4e2a\u76f8\u540c\u7684\u6570\u7684\u60c5\u51b5\u3002\n\n\u590d\u6742\u5ea6$O(n\\log n)$\uff08\u7528unordered_map\u5904\u7406Hash\u8868\uff09\uff0c\u7136\u800c\u5355\u6a21\u6570\u65f6\u5c31\u5df2\u7ecf\u8981\u8dd14s\u591a\uff0c\u5e76\u4e14\u4f1a\u88ab\u5361\uff08~~\u6211\u53d6\u4e8617\u4f4d\u7684\u8d85\u5927\u6a21\u6570\u8fd8\u662fWA\u58f0\u4e00\u7247\u2026\u2026~~\uff09\uff0c\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\u2026\u2026\u4ee3\u7801\u5c31\u4e0d\u4e0a\u4e86\u3002\n\n### 2.\u7ebf\u6bb5\u6811\n\n\u6211\u4eec\u6362\u7528\u53e6\u4e00\u79cd\u7edf\u8ba1\u533a\u95f4\u4e2a\u6570\u7684\u601d\u8def\uff0c\u5373\u679a\u4e3e\u533a\u95f4\u53f3\u7aef\u70b9\u627e\u5de6\u7aef\u70b9\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u5bf9\u4e8e\u6570$i$\uff0c\u8bb0$lst_i$\u8868\u793a$i$\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\uff0c\u5982\u679c$i$\u88ab\u5305\u542b\u5728\u4ee5\u5f53\u524d\u626b\u63cf\u7684\u4f4d\u7f6e\u4e3a\u53f3\u7aef\u70b9\u7684\u533a\u95f4\u5185\uff0c\u4e00\u5b9a\u662f$lst_i$\u4ee5\u53ca\u5b83\u7684\u524d\u4e24\u4e2a\u88ab\u6070\u597d\u5305\u542b\u5728\u4e86\u91cc\u9762\uff0c\u518d\u4ee4$pre_i$\u4e3a$lst_i$\u5f80\u524d\u7b2c\u4e8c\u4e2a$i$\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5408\u6cd5\u7684\u5de6\u7aef\u70b9\u5c31\u662f\uff1a\u2460\u5b83\u5230\u5f53\u524d\u53f3\u7aef\u70b9\u8fd9\u6bb5\u533a\u95f4\u91cc\u6ca1\u6709\u6570\u51fa\u73b0\u8d85\u8fc73\u6b21\uff0c\u2461\u8fd9\u6bb5\u533a\u95f4\u91cc\u6bcf\u4e2a\u6570\u7684$pre$\u548c$lst$\u90fd\u88ab\u5305\u542b\u5176\u4e2d\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u9650\u5236\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u53f3\u79fb\u7684\u6307\u9488\u9650\u5236\u67e5\u627e\u8303\u56f4\u5373\u53ef\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u9650\u5236\uff0c\u6211\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u5b83\u5230\u5f53\u524d\u4f4d\u7f6e\u5206\u522b\u6709\u591a\u5c11$pre$\u548c$lst$\uff0c\u6211\u8981\u8ba9\u4ed6\u4fe9\u76f8\u7b49\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u6bcf\u4e2a\u4e3a$lst$\u7684\u4f4d\u7f6e\u7684**\u524d\u7f00**\u6574\u4f53+1\uff0c\u5728\u6bcf\u4e2a\u4e3a$pre$\u7684\u4f4d\u7f6e\u7684\u524d\u7f00\u8fdb\u884c\u6574\u4f53-1\uff0c\u4e3a0\u7684\u4f4d\u7f6e\u5c31\u662f\u5408\u6cd5\u7684\u5de6\u7aef\u70b9\u3002\u800c\u6ce8\u610f\u5230\u5bf9\u524d\u7f00-1\u65f6\u4e00\u5b9a\u4e0d\u4f1a\u51cf\u6210\u8d1f\u7684\uff0c\u6700\u5c0f\u503c\u6700\u5c0f\u5c31\u662f0\uff0c\u90a3\u4e48\u62ff\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u4e2a\u6570\u5373\u53ef\u3002$O(n\\log n)$\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define ll long long\n#define N 500010\n#define ls(_o) (_o << 1)\n#define rs(_o) ((_o << 1) | 1)\n#define did(_o, _x) \\\n    adds[_o] += _x; \\\n    minn[_o] += _x\nusing namespace std;\nnamespace ywy {\ninline int get() {\n    int n = 0;\n    char c;\n    while ((c = getchar()) || 23333)\n        if (c >= '0' && c <= '9')\n            break;\n    n = c - '0';\n    while ((c = getchar()) || 23333) {\n        if (c >= '0' && c <= '9')\n            n = n * 10 + c - '0';\n        else\n            return (n);\n    }\n}\nint minn[N * 4], adds[N * 4], cnt[N * 4], pre[N][4], lst[N], ints[N];\ninline void up(int tree) {\n    minn[tree] = min(minn[ls(tree)], minn[rs(tree)]);\n    cnt[tree] = 0;\n    if (minn[tree] == minn[ls(tree)])\n        cnt[tree] += cnt[ls(tree)];\n    if (minn[tree] == minn[rs(tree)])\n        cnt[tree] += cnt[rs(tree)];\n}\ninline void down(int tree) {\n    did(ls(tree), adds[tree]);\n    did(rs(tree), adds[tree]);\n    adds[tree] = 0;\n}\nvoid build(int l, int r, int tree) {\n    cnt[tree] = r - l + 1;\n    if (l == r)\n        return;\n    int mid = (l + r) >> 1;\n    build(l, mid, ls(tree));\n    build(mid + 1, r, rs(tree));\n}\nvoid add(int rl, int rr, int l, int r, int tree, int x) {\n    if (rl == l && rr == r) {\n        did(tree, x);\n        return;\n    }\n    int mid = (l + r) >> 1;\n    down(tree);\n    if (rl > mid)\n        add(rl, rr, mid + 1, r, rs(tree), x);\n    else {\n        if (rr <= mid)\n            add(rl, rr, l, mid, ls(tree), x);\n        else {\n            add(rl, mid, l, mid, ls(tree), x);\n            add(mid + 1, rr, mid + 1, r, rs(tree), x);\n        }\n    }\n    up(tree);\n}\ntypedef struct _p {\n    int a, b;\n    _p() { a = b = 0; }\n    _p(int i, int j) {\n        a = i;\n        b = j;\n    }\n    friend _p operator+(const _p &a, const _p &b) {\n        _p r;\n        r.a = min(a.a, b.a);\n        r.b = 0;\n        if (r.a == a.a)\n            r.b += a.b;\n        if (r.a == b.a)\n            r.b += b.b;\n        return (r);\n    }\n} pair;\npair query(int rl, int rr, int l, int r, int tree) {\n    if (rl == l && rr == r)\n        return (_p(minn[tree], cnt[tree]));\n    down(tree);\n    int mid = (l + r) >> 1;\n    if (rl > mid)\n        return (query(rl, rr, mid + 1, r, rs(tree)));\n    if (rr <= mid)\n        return (query(rl, rr, l, mid, ls(tree)));\n    return (query(rl, mid, l, mid, ls(tree)) + query(mid + 1, rr, mid + 1, r, rs(tree)));\n}\nvoid ywymain() {\n    int n = get();\n    build(1, n, 1);\n    for (register int i = 1; i <= n; i++) {\n        ints[i] = get();\n        pre[i][0] = i;\n        if (lst[ints[i]]) {\n            for (register int j = 1; j <= 3; j++) pre[i][j] = pre[lst[ints[i]]][j - 1];\n        }\n        lst[ints[i]] = i;\n    }\n    int ptr = 1;\n    ll ans = 0;\n    for (register int i = 1; i <= n; i++) {\n        if (pre[i][1])\n            add(1, pre[i][1], 1, n, 1, -1);\n        add(1, i, 1, n, 1, 1);\n        if (pre[i][2])\n            add(1, pre[i][2], 1, n, 1, -1);\n        if (pre[i][3]) {\n            while (ptr <= pre[i][3]) ptr++;\n        }\n        pair ret = query(ptr, i, 1, n, 1);\n        if (ret.a == 0)\n            ans += ret.b;\n    }\n    cout << ans << endl;\n}\n}  // namespace ywy\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1600316818,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1418G \u3010Three Occurrences\u3011"
    },
    {
        "content": "YY \u4e86\u4e00\u4e2a\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u505a\u6cd5\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e $i$ \uff0c\u6211\u4eec\u8bb0 $pre_i$ \u4e3a\u5b83\u524d\u9762\u7b2c\u4e00\u4e2a\u548c\u5b83\u989c\u8272\u76f8\u540c\u7684\u4f4d\u7f6e\u3002\n\n\u5982\u679c\u6211\u4eec\u6c42\u6bcf\u4e2a\u6570\u6070\u597d\u51fa\u73b0\u4e00\u6b21\u7684\u65b9\u6848\u6570\uff0c\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a $i$ \uff0cban\u6389 $[1,pre_i]$ \u8fd9\u4e2a\u533a\u95f4\u3002\n\n\u6269\u5c55\u5230\u51fa\u73b0\u6070\u597d\u4e09\u6b21\uff0c\u5c31\u662f\u5bf9\u6bcf\u4e2a $i$\uff0cban\u6389 $[1,pre_{pre_{pre_i}}]$ \u548c $[pre_{pre_i}+1,i]$ \u3002\n\n\u540c\u65f6\u6211\u4eec\u8fd8\u8981\u6c42\u6ca1\u6709 ban \u6389\u7684\u4f4d\u7f6e\u6570\u3002\n\n\u666e\u901a\u7ebf\u6bb5\u6811\u975e\u5e38\u4e0d\u597d\u6c42\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5bf9 tag \u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u5b9e\u73b0\u7ec6\u8282\u89c1\u4ee3\u7801\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(N\\log N)$ \uff0c\u5e38\u6570\u5c0f\u4e8e\u4e00\u534a\u7ebf\u6bb5\u6811\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pre(i,a,b) for(int i=a;i>=b;i--)\n#define N 500005\nusing namespace std;\nint n,u[N],pre[N],c[N];\nstruct node{\n\tint l,r,sum,tag;\n}a[N<<2];\n#define L a[x].l\n#define R a[x].r\n#define ls (x<<1)\n#define rs (ls|1)\n#define S a[x].sum\n#define T a[x].tag\nvoid build(int x,int l,int r){\n\tL=l,R=r,T=0,S=r-l+1;\n\tif(l==r)return ;\n\tint mid=(l+r)>>1;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r); \n}\ninline void updata(int x){if(T)S=0;else if(L==R)S=1;else S=a[ls].sum+a[rs].sum;}\nvoid change(int x,int l,int r,int val){\n\tif(L>=l&&R<=r)T+=val,updata(x);\n\telse{\n\t\tint mid = (L + R) >> 1;\n\t\tif(mid >= l)change(ls,l,r,val);\n\t\tif(mid < r)change(rs,l,r,val);\n\t\tupdata(x);\n\t}\n}\nint ask(int x,int l,int r){\n\tif(T)return 0;\n\tif(L>=l&&R<=r)return S;\n\tint mid=(L+R)>>1,cur = 0;\n\tif(mid>=l)cur += ask(ls,l,r);\n\tif(mid<r)cur += ask(rs,l,r);\n\treturn cur;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\trep(i,1,n)scanf(\"%d\",&u[i]),pre[i]=c[u[i]],c[u[i]]=i;\n\tbuild(1,1,n);long long ans = 0;int l = 0;\n\trep(i,1,n){\n\t\tif(!pre[i])change(1,1,i,1);\n\t\telse if(!pre[pre[i]])change(1,1,pre[i],-1),change(1,1,i,1);\n\t\telse if(!pre[pre[pre[i]]])change(1,1,pre[i],-1),change(1,pre[pre[i]] + 1,i,1);\n\t\telse{\n\t\t\tchange(1,pre[pre[pre[i]]] + 1,pre[i],-1);\n\t\t\tchange(1,pre[pre[i]] + 1,i,1);\n\t\t}l = max(l,pre[pre[pre[i]]] + 1);\n\t\tans += ask(1,l,i);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1625277374,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF1418G Three Occurrences"
    },
    {
        "content": "\u76f8\u4fe1\u5927\u5bb6\u90fd\u5b66\u8fc7\u4e00\u79cd\u8bc1\u660e\u65b9\u6cd5\uff0c\u8bc1\u660e $a=b$ \u53ef\u4ee5\u8bc1\u660e $a\\le b$ \u4e14  $a \\ge b$\u3002\n\n\u533a\u95f4\u5185\u51fa\u73b0\u7684\u4e2a\u6570\u90fd\u7b49\u4e8e\u4e09\u4e2a\uff0c\u7b49\u4ef7\u4e8e\u533a\u95f4\u5185\u6240\u6709\u6570\u90fd\u51fa\u73b0\u5927\u4e8e\u7b49\u4e8e\u4e09\u6b21\uff0c\u4e14\u5c0f\u4e8e\u7b49\u4e8e\u4e09\u6b21\u3002\u6211\u4eec\u53ef\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u6ee1\u8db3\u3002\n\n\u5728\u6b64\u4e4b\u524d\u786e\u5b9a\u4e00\u4e2a\u89e3\u9898\u7684\u5927\u65b9\u5411\uff0c\u6c42\u533a\u95f4\u4e2a\u6570\u95ee\u9898\uff0c\u6211\u4eec\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u53f3\u7aef\u70b9\u6765\u5224\u65ad\u5bf9\u5e94\u7684\u5de6\u7aef\u70b9\u4e2a\u6570\u6765\u505a\uff0c\u8fd9\u9053\u9898\u4e5f\u4e0d\u4f8b\u5916\u3002\n\n\u5148\u89e3\u51b3\u5c0f\u4e8e\u7b49\u4e8e\u4e09\u6b21\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u53f3\u7aef\u70b9 R \u6765\u8bf4\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u53cc\u6307\u9488\u627e\u5230\u6700\u9760\u5de6\u7684 l \u6765\u6ee1\u8db3 [l,R] \u4e2d\u7684\u6240\u6709\u6570\u90fd\u51fa\u73b0\u5c0f\u4e8e\u7b49\u4e8e\u4e09\u6b21\uff0c\u8fd9\u4e2a\u5f00\u4e2a\u6876\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u4e0b\u9762\u6765\u89e3\u51b3\u5728\u533a\u95f4\u4e2d\u53ef\u4ee5\u627e\u5230\u591a\u5c11\u4e2a\u5de6\u7aef\u70b9 L \u4f7f\u5f97 [L,R] \u4e2d\u6240\u6709\u6570\u90fd\u5927\u4e8e\u7b49\u4e8e\u4e09\u6b21\u3002 \n\n\u8fd9\u4f1a\u7528\u5230\u7b2c\u4e8c\u4e2a\u8f6c\u5316\uff0c\u6709\u6570\u503c\u51fa\u73b0\u5927\u4e8e\u7b49\u4e8e\u4e09\u6b21\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u8fd9\u4e2a\u6570\u503c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u548c\u5012\u6570\u7b2c\u4e09\u4e2a\u6570\u5747\u51fa\u73b0\u3002\u90a3\u4e48\u6211\u4eec\u6bcf\u9047\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5c31\u524d\u7f00 $+1$\uff0c\u6bcf\u9047\u5230\u5012\u6570\u7b2c\u4e09\u4e2a\u6570\u5c31\u524d\u7f00 $-1$\uff0c\u76ee\u6807\u5c31\u662f\u6709\u591a\u5c11\u4e2a\u4f4d\u7f6e\u6070\u597d\u7b49\u4e8e $0$\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u4e2a\u6570\u80af\u5b9a\u5927\u4e8e\u7b49\u4e8e\u5012\u6570\u7b2c\u4e09\u4e2a\u6570\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u7528\u7ef4\u62a4\u533a\u95f4\u52a0\u548c\u533a\u95f4\u6700\u5c0f\u503c\u4e2a\u6570\u5373\u53ef\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\n#define fi first\n#define se second\n#define endl '\\n'\n// #define int long long\nusing namespace std;\n\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef pair<ll,ll> pll;\ntypedef long double db;\n\nconst int N = 5e5+5;\nconst int inf = 1e9;\n\nstruct seg{\n    int l, r;\n    int mn,cnt,add;\n    #define mn(x) tree[x].mn\n    #define l(x) tree[x].l\n    #define r(x) tree[x].r\n    #define cnt(x) tree[x].cnt\n    #define add(x) tree[x].add\n}tree[N*4];\n\nvoid push_up(seg &x, seg l, seg r){\n    x.mn = min(l.mn,r.mn);\n    x.cnt = 0;\n    if (x.mn == l.mn) x.cnt += l.cnt;\n    if (x.mn == r.mn) x.cnt += r.cnt;\n}\nvoid update(int x, int v){\n    mn(x) += v;\n    add(x) += v;\n}\nvoid push_down(int x){\n    update(x*2,add(x));\n    update(x*2+1,add(x));\n    add(x) = 0;\n}\nvoid build(int x, int l, int r){\n    l(x) = l, r(x) = r;\n    if (l == r){\n        mn(x) = 0; cnt(x) = 1;\n        return;\n    }\n    int mid = l+r>>1;\n    build(x*2,l,mid);\n    build(x*2+1,mid+1,r);\n    push_up(tree[x],tree[x*2],tree[x*2+1]);\n}\nvoid modify(int x, int l, int r, int v){\n    if (l(x) >= l && r(x) <= r){\n        update(x,v);\n        return;\n    }\n    push_down(x);\n    int mid = l(x)+r(x)>>1;\n    if (l <= mid) modify(x*2,l,r,v);\n    if (r > mid) modify(x*2+1,l,r,v);\n    push_up(tree[x],tree[x*2],tree[x*2+1]);\n}\nseg query(int x, int l, int r){\n    if (l(x) >= l && r(x) <= r){\n        return tree[x];\n    }\n    push_down(x);\n    int mid = l(x)+r(x)>>1;\n    seg ans; ans.mn = inf;\n    if (l <= mid && r > mid) push_up(ans, query(x*2,l,r),query(x*2+1,l,r));\n    else if (l <= mid) ans = query(x*2,l,r);\n    else if (r > mid) ans = query(x*2+1,l,r);\n    return ans;\n}\n\nint n,a[N];\nint pos[N], lst[N],cnt[N];\nvoid oper(int p, int v){\n    if (p) modify(1,1,p,v);\n    if (lst[lst[p]]) modify(1,1,lst[lst[p]],-v);\n}\nsigned main(){\n    // freopen(\"a.in\",\"r\",stdin);\n\n    ios::sync_with_stdio(false); cin.tie(0u); cout.tie(0u);\n    cin >> n;\n    for (int i = 1; i <= n; i++){\n        cin >> a[i];\n        lst[i] = pos[a[i]];\n        pos[a[i]] = i;\n    }\n    build(1,1,n);\n\n    ll res = 0;\n    for (int r = 1, l = 1; r <= n; r++){\n        cnt[a[r]]++;\n        if (cnt[a[r]] > 3){\n            while(cnt[a[r]] > 3) cnt[a[l++]]--;\n        }\n        oper(r,1); oper(lst[r],-1);\n        seg qr = query(1,l,r);\n        if (qr.mn == 0){\n            res += qr.cnt;\n        }\n    }\n    cout << res << endl;\n    return 0;\n}\n```\n",
        "postTime": 1670510537,
        "uid": 127682,
        "name": "lg_zhou",
        "ccfLevel": 7,
        "title": "Three Occurrences"
    }
]