[
    {
        "content": "\u62a2\u5230\u7b2c\u4e00\u7bc7\u9898\u89e3\u597d\u6fc0\u52a8~~~\n\n~~\u8fd9\u9898\u6211\u4eec\u53ef\u4ee5\u5148\u770b\u770b\u6807\u7b7e\uff1aDP\u3002\u55ef\u2026\u2026~~\n\n\u4f9d\u7167\u9898\u610f\uff0c\u6bcf\u4e00\u5c42\u90fd\u5fc5\u987b\u8d70\u5b8c\u540e\u624d\u80fd\u5230\u4e0b\u4e00\u5c42\uff0c\u800c\u4e14\u8ddd\u79bb\u662f\u5f88\u826f\u5fc3\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u3002\n\n\u4e8e\u662f\uff0c\u6709\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u8d2a\u5fc3\u7b56\u7565\uff1a\u6bcf\u5c42\u90fd\u7531\u5de6\u4e0a\u65b9\u8d70\u5230\u53f3\u4e0b\u65b9\uff08\u53cd\u8fc7\u6765\u540c\u7406\uff09\uff0c\u671f\u95f4\u7ecf\u8fc7\u8be5\u5c42\u6240\u6709\u70b9\uff0c\u7136\u540e\u8d70\u5230\u4e0b\u4e00\u5c42\u7684\u5de6\u4e0a\u65b9/\u53f3\u4e0b\u65b9\u3002\n\n\u90a3\u4e48\uff0c\u53ef\u4ee5\uff1a\n\n1\u3001\u7528$dp[N][2]$\u8bb0\u5f55\u8d70\u5b8c\u7b2ci\u5c42\u65f6\uff0c\u5728\u5de6\u4e0a/\u53f3\u4e0b\u65f6\u6700\u5c0f\u8ddd\u79bb\n\n2\u3001\u7528$p[N][2]$\u8bb0\u5f55\u6bcf\u4e00\u5c42\u7684\u5de6\u4e0a\u89d2\u70b9\u3001\u53f3\u4e0b\u89d2\u70b9\u7684\u5750\u6807\n\n\u7136\u540e\uff0c\u7528\u4e0a\u4e00\u5c42\u7684\u6570\u636e\u66f4\u65b0\u8fd9\u4e00\u5c42\u3002\u8f6c\u79fb\u65b9\u7a0b\uff1a~~\u592a\u7b80\u5355\u61d2\u5f97\u5199~~\n\n~~\u5176\u5b9e\u8fd8\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\uff0c\u4f46\u8fd9\u9898\u4e0d\u5361\u7a7a\u95f4\uff0c\u6211\u4e5f\u5f88\u61d2\uff0c\u5c31\u6ca1\u5199~~\n\n\u4ee3\u7801\uff1a\uff08\u5f88\u591a\u5947\u602a\u7684\u5355\u4e2a\u53d8\u91cf\u540d\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define sz 200020\n#define mod 998244353ll\nusing namespace std;\ntypedef long long ll;\nstruct FastIO\n{\n    inline FastIO& operator>>(int& x)\n    {\n        x=0;char f=0,ch=getchar();\n        while(ch>'9'||ch<'0') f|=(ch=='-'),ch=getchar();\n        while(ch<='9'&&ch>='0') x=x*10+ch-48,ch=getchar();\n        return x=(f?-x:x),*this;\n    }\n    inline FastIO& operator>>(ll& x)\n    {\n        x=0;char f=0,ch=getchar();\n        while(ch>'9'||ch<'0') f|=(ch=='-'),ch=getchar();\n        while(ch<='9'&&ch>='0') x=x*10+ch-48,ch=getchar();\n        return x=(f?-x:x),*this;\n    }\n    inline FastIO& operator>>(double& x)\n    {\n        x=0;char f=0,ch=getchar();\n        double d=0.1;\n        while(ch>'9'||ch<'0') f|=(ch=='-'),ch=getchar();\n        while(ch<='9'&&ch>='0') x=x*10+ch-48,ch=getchar();\n        if(ch=='.')\n        {\n            ch=getchar();\n            while(ch<='9'&&ch>='0') x+=d*(ch^48),d*=0.1,ch=getchar();\n        }\n        return x=(f?-x:x),*this;\n    }\n}read;\nvoid file()\n{\n    #ifndef ONLINE_JUDGE\n    freopen(\"a.txt\",\"r\",stdin);\n    #endif\n}\nunsigned int log2(int x){unsigned int ret;__asm__ __volatile__ (\"bsrl %1, %%eax\":\"=a\"(ret):\"m\"(x));return ret;}\ninline ll mul(ll a,ll b){ll d=(ll)(a*(double)b/mod+0.5);ll ret=a*b-d*mod;if (ret<0) ret+=mod;return ret;}\n/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\nint n;\nstruct hh{int x,y;}a[sz];\ninline int id(hh x){return max(x.x,x.y);}\ninline bool cmp(const hh &x,const hh &y){return id(x)<id(y);}\nll dp[sz][2];\nhh p[sz][2];\ninline bool cmpx(const hh &x,const hh &y){return x.x==y.x?x.y>y.y:x.x<y.x;}//left\ninline bool cmpy(const hh &x,const hh &y){return x.y==y.y?x.x>y.x:x.y<y.y;}//right\ninline ll dis(const hh &x,const hh &y){return abs(x.x-y.x)+abs(x.y-y.y);}\nint main()\n{\n\tfile();\n\tint i,j,k,x,y,z;\n\tread>>n;\n\tfor (i=1;i<=n;i++) read>>a[i].x>>a[i].y;\n\tsort(a+1,a+n+1,cmp);\n\tmemset(dp,0x3f,sizeof(dp));\n\tdp[0][0]=dp[0][1]=0;\n\tfor (i=j=z=1;i<=n;i=j+1,++z,++j)\n\t{\n\t\twhile (id(a[j+1])==id(a[j])) ++j;\n\t\tp[z][0]=p[z][1]=a[i];\n\t\tfor (k=i+1;k<=j;k++)\n\t\t{\n\t\t\tif (cmpx(a[k],p[z][0])) p[z][0]=a[k];\n\t\t\tif (cmpy(a[k],p[z][1])) p[z][1]=a[k];\n\t\t}\n\t\tfor (x=0;x<2;x++)\n\t\t\tfor (y=0;y<2;y++)\n\t\t\t\tdp[z][x]=min(dp[z][x],dp[z-1][y]+dis(p[z-1][y],p[z][!x])+dis(p[z][!x],p[z][x]));\n\t}\n\tcout<<min(dp[z-1][0],dp[z-1][1]);\n}\n```",
        "postTime": 1539755596,
        "uid": 76481,
        "name": "p_b_p_b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1066F \u3010Yet another 2D Walking\u3011"
    },
    {
        "content": "#### [Codeforces 1066F](<http://codeforces.com/problemset/problem/1066/F>)\n\n#### \u9898\u610f\n\n\u5e73\u9762\u4e0a\u6709 n \u4e2a\u70b9\uff0c\u4e14\u5750\u6807\u5747\u4e3a\u975e\u8d1f\u6574\u6570\u3002\u89c4\u5b9a\u70b9 (i, j) \u7684\u7b49\u7ea7\u4e3a max(i, j) \u4e14\u4fdd\u8bc1\u4e0d\u5b58\u5728\u7b49\u7ea7\u4e3a 0 \u7684\u70b9\u3002\u73b0\u5728\u4ece\u70b9 (0, 0) \u51fa\u53d1\uff0c\u6bcf\u6b21\u53ef\u4ee5\u6c34\u5e73\u6216\u7ad6\u76f4\u79fb\u52a8 1 \u4e2a\u5355\u4f4d\u957f\u5ea6\u3002\u5728\u904d\u5386\u5b8c\u7b49\u7ea7\u4f4e\u4e8e i \u7684\u70b9\u4e4b\u524d\uff0c\u4e0d\u80fd\u5230\u8fbe\u7b49\u7ea7\u4e3a i \u6216\u66f4\u9ad8\u7684\u70b9\u3002\u95ee\u904d\u5386\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002$1 \\leq n \\leq 2 \\times 10^5 , 0 \\leq x,y \\leq 10^9$\n\n#### \u9898\u89e3\n\n\u753b\u56fe\u53ef\u77e5\uff0c\u7b49\u7ea7\u4e3a$i$\u7684\u70b9\u4e00\u5b9a\u7ec4\u62101\u4e2a\u5012L\u5b57\u3002\n\n\u5bf9\u4e8e**\u540c1\u7b49\u7ea7**\uff0c\u6700\u77ed\u8def\u4e3a\u6cbf\u7740L\u5b57\u4ece1\u4e2a\u7aef\u70b9\u8d70\u5411\u53e61\u4e2a\u7aef\u70b9\u3002\uff08\u7aef\u70b9\u4e3aL\u5b57\u4e0a\u6700\u5de6\u4e0a\u70b9\u548c\u6700\u53f3\u4e0b\u70b9\uff09\n\n\u5bf9\u4e8e\u4ece\u7b49\u7ea7$i$\u5230\u7b49\u7ea7$i+1$\u7684**\u8de8\u8d8a**\uff0c\u731c\u6d4b\u6700\u4f18\u89e3\u5e94\u4ece$i$\u7684\u7aef\u70b9\u5230$i + 1$\u7684\u7aef\u70b9\u3002\n\n\u8bc1\u660e\uff1a\u82e5\u5728$i+1$\u7684\u8d77\u59cb\u70b9$x$\u5e76\u975eL\u5b57\u7684\u7aef\u70b9\uff0c\u5b9a\u4f1a\u5bfc\u81f4\u5b8c\u6210$i + 1$\u9014\u4e2d\u8def\u5f84\u91cd\u590d\uff0c\u91cd\u590d\u7684\u8def\u5f84\u6070\u597d\u5c31\u662f\u4ece$i$\u7684\u7aef\u70b9\u5230$x$\u8282\u7701\u4e0b\u7684\u8de8\u7ea7\u8ddd\u79bb\u3002\u540e\u8005\u76f8\u5bf9\u524d\u8005\u7684\u6536\u76ca\u7b49\u4e8e\u82b1\u8d39\uff0c\u6545\u4e24\u8005\u7b49\u4ef7\uff0c\u53ea\u9700\u8003\u8651\u5230\u8fbe\u7aef\u70b9\u7684\u60c5\u51b5\u5373\u53ef\u3002\n\n\u56e0\u6b64\uff0c\u7b56\u7565\u5e94\u4e3a\uff1a\u5bf9\u4e8e\u7b2c$i$\u7b49\u7ea7L\u5b57\u7684\u4e24\u7aef\u70b9$lef,rig$\uff0c\u5b58\u5728$lef \\rightarrow rig$\u548c$rig \\rightarrow lef$\u4e24\u79cd\u65b9\u6848\uff1b\u7b2c$i$\u7b49\u7ea7\u5230\u7b2c$i + 1$\u7b49\u7ea7\uff0c\u5b58\u5728$lef \\rightarrow lef'$ \u3001 $rig \\rightarrow lef'$\u3001$lef \\rightarrow rig'$\u548c$rig \\rightarrow rig'$\u56db\u79cd\u65b9\u6848\u3002\u6c42\u89e3\u9010\u4e00\u5904\u7406\u5404\u7b49\u7ea7\u7684\u6700\u5c0f\u82b1\u8d39\u3002\n\n\u7ecf\u5178\u7684**\u52a8\u6001\u89c4\u5212**\u95ee\u9898\u3002\n\n\u8bbe$f[i][0/1]$\u8868\u793a\u5904\u7406\u5b8c\u7b2c$i$\u7b49\u7ea7\uff0c\u4e14\u505c\u7559\u5728$lef/rig$\u7684\u6700\u77ed\u8def\u3002\u679a\u4e3e\u7b2c$i-1$\u7b49\u7ea7\u7684\u7ed3\u675f\u70b9$0/1$\u5373\u53ef\u8f6c\u79fb\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\uff08\u79bb\u6563\u5316\uff09$O(NlogN)$\u3002\n\n\u4ee3\u7801\u89c1\u6b64\uff1a\n```\n#include<iostream>\n#include<cstdio>\n#include<deque>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\nlong long typedef LL;\nconst int MAXN = 2E5 + 5;\nint cur = -1,n,Ori[MAXN],Head[MAXN];\nint Lef[MAXN],Rig[MAXN];\nLL f[MAXN][2];\nstruct wyy\n{\n\tint x,y,c;\n}A[MAXN];\nstruct gr\n{\n\tint to,next;\n}Group[MAXN];\nvoid Add(int g,int to)\n{\n\tGroup[++ cur].to = to;\n\tGroup[cur].next = Head[g];\n\tHead[g] = cur;\n}\nint read()\n{\n\tchar ch = getchar();int w = 0;\n\twhile(ch < '0' || ch > '9')\tch = getchar();\n\twhile(ch >= '0' && ch <= '9')\n\t{\n\t\tw = w * 10 + (int)(ch - '0');\n\t\tch = getchar();\n\t}\n\treturn w;\n}\nvoid Read()\n{\n\tn = read();\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tA[i].x = read() , A[i].y = read();\n\t\tA[i].c = max(A[i].x,A[i].y);\n\t\tOri[i] = A[i].c;\n\t}\n\tsort(Ori + 1 , Ori + 1 + n);\n\t\n\tmemset(Head,-1,sizeof(Head));\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tint c = A[i].c;\n\t\tAdd(lower_bound(Ori + 1 , Ori + 1 + n , c) - Ori , i);\n\t}\n\t\n\tfor(int i = 1 ; i <= n ; i ++)\tLef[i] = Rig[i] = -1;\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tfor(int h = Head[i] ; h != -1 ; h = Group[h].next)\n\t\t{\n\t\t\tint to = Group[h].to;\n\t\t\tif(Lef[i] == -1)\tLef[i] = to;\n\t\t\telse\tif(A[to].x < A[Lef[i]].x || (A[to].x == A[Lef[i]].x && A[to].y > A[Lef[i]].y))\tLef[i] = to;\n\t\t\tif(Rig[i] == -1)\tRig[i] = to;\n\t\t\telse\tif(A[to].x > A[Rig[i]].x || (A[to].x == A[Rig[i]].x && A[to].y < A[Rig[i]].y))\tRig[i] = to;\n\t\t}\n\t}\n}\nint getDis(int a,int b)\n{\n\tint x = A[a].x , y = A[a].y;\n\tint xx = A[b].x , yy = A[b].y;\n\treturn abs(x - xx) + abs(y - yy);\n}\nvoid Calc()\n{\n\tint last = 0;\n\tfor(int i = 1 ; i <= n ; i ++)\t\n\t{\n\t\tif(Head[i] == -1)\tcontinue;\n\t\tLL dis = getDis(Lef[i],Rig[i]);\n\t\tif(last == 0)\t\n\t\t{\n\t\t\tf[i][0] = dis + A[Rig[i]].x + A[Rig[i]].y;\n\t\t\tf[i][1] = dis + A[Lef[i]].x + A[Lef[i]].y;\n\t\t}\n\t\telse\t\n\t\t{\n\t\t\tf[i][0] = dis + min(f[last][0] + getDis(Lef[last],Rig[i]),f[last][1] + getDis(Rig[last],Rig[i]));\n\t\t\tf[i][1] = dis + min(f[last][0] + getDis(Lef[last],Lef[i]),f[last][1] + getDis(Rig[last],Lef[i]));\n\t\t}\t\t\n\t\tlast = i;\n\t}\n\tprintf(\"%I64d\\n\",min(f[last][0],f[last][1]));\n}\nint main()\n{\n\tRead();\n\tCalc();\n\treturn 0;\n}\n\n```\n#### \u56de\u987e\u4e0e\u601d\u8003\n\n\u901a\u8fc7\u62c6\u5206\uff0c\u590d\u6742\u95ee\u9898\u7b80\u5355\u5316\u3002",
        "postTime": 1559570452,
        "uid": 19153,
        "name": "littlewyy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1066F \u3010Yet another 2D Walking\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1066F)\n\n\u5efa\u8bae\u591a\u7814\u7a76\u4e00\u4e0b**\u6837\u4f8b\u89e3\u91ca**\u4e2d\u7684\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c\u5f88\u6709\u5e2e\u52a9\u3002\n\n\u9898\u610f\u4e2d\u8981\u6c42\u5728\u7ecf\u8fc7\u7ea7\u522b\u4e3a $k$ \u7684\u5173\u952e\u70b9\u4e4b\u524d\u5fc5\u987b\u8981\u901a\u8fc7\u6240\u6709\u7ea7\u522b\u5c0f\u4e8e $k$ \u7684\u5173\u952e\u70b9\uff0c\u6240\u4ee5\u4e00\u6761\u5408\u6cd5\u7684\u7ecf\u8fc7\u6240\u6709\u5173\u952e\u70b9\u7684\u8def\u5f84\u5fc5\u7136\u662f**\u4e00\u7ea7\u4e00\u7ea7**\u6765\u7684\u3002\n\n\u6211\u4eec\u9996\u5148\u7814\u7a76\u5728\u540c\u4e00\u7ea7\u4e2d**\u7b2c\u4e00\u4e2a**\u7ecf\u8fc7\u7684\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u7ecf\u8fc7\u7684\u70b9\u3002\u8981\u60f3\u8ba9\u8def\u5f84\u957f\u5ea6\u6700\u5c0f\uff0c\u8fd9\u4e24\u4e2a\u70b9\u5fc5\u987b\u5728\u6240\u6709\u70b9\u7684**\u4e24\u4fa7**\uff0c\u56e0\u4e3a\u540c\u4e00\u7ea7\u7684\u6240\u6709\u70b9\u5728\u8fde\u63a5\u8d77\u6765\u4f1a\u5f62\u6210\u4e00\u6761**\u6298\u7ebf**\uff0c\u60f3\u8981\u8ba9\u8fd9\u4e00\u7ea7\u7684\u8def\u5f84\u957f\u5ea6\u6700\u77ed\uff0c\u53ea\u80fd\u8ba9\u8fd9\u4e24\u4e2a\u70b9\u5206\u5c45\u4e8e\u4e24\u4fa7\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u540c\u7ea7\u4e2d\u6a2a\u7eb5\u5750\u6807\u4e4b\u5dee\u6700\u5c0f\u7684\u70b9\u4e3a**\u5de6\u4fa7\u70b9**\uff0c\u6a2a\u7eb5\u5750\u6807\u4e4b\u5dee\u6700\u5927\u7684\u70b9\u4e3a**\u53f3\u4fa7\u70b9**\uff0c\u90a3\u4e48\u5728\u4e00\u5c42\u5230\u53e6\u4e00\u5c42\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u53ef\u80fd\u662f\u4ece\u5de6\u4fa7\u70b9\u5230\u53f3\u4fa7\u70b9\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u4ece\u53f3\u4fa7\u70b9\u5230\u5de6\u4fa7\u70b9\uff1b\u6709\u53ef\u80fd\u662f\u4ece\u5de6\u4fa7\u70b9\u5230\u5de6\u4fa7\u70b9\uff0c\u8fd8\u6709\u53ef\u80fd\u662f\u4ece\u53f3\u4fa7\u70b9\u5230\u53f3\u4fa7\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u91c7\u7528**\u52a8\u6001\u89c4\u5212**\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u72b6\u6001\uff1a\n\n\u8bbe $dp_{i,0/1}$ \u8868\u793a\u7b2c 1 \u7ea7\u5230\u7b2c $i$ \u7ea7\uff0c\u5f53\u524d\u4f4d\u4e8e\u7b2c $i$ \u7ea7\u7684\u5de6\u4fa7\u70b9\uff080\uff09\u6216\u53f3\u4fa7\u70b9\uff081\uff09\u7684\u8def\u5f84\u6700\u5c0f\u503c\u3002\n\n\u51b3\u7b56\uff1a\n\n\u5de6\u4fa7\u70b9 $\\Rightarrow$ \u5de6\u4fa7\u70b9\n\n\u5de6\u4fa7\u70b9 $\\Rightarrow$ \u53f3\u4fa7\u70b9\n\n\u53f3\u4fa7\u70b9 $\\Rightarrow$ \u5de6\u4fa7\u70b9\n\n\u53f3\u4fa7\u70b9 $\\Rightarrow$ \u53f3\u4fa7\u70b9\n\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n\u8bbe $lv_{i,0/1}$ \u8868\u793a\u7b2c $i$ \u7ea7\u4e2d\u7684\u5de6\u4fa7\u70b9\uff080\uff09\u548c\u53f3\u4fa7\u70b9\uff081\uff09\uff0c$\\operatorname{DIS}(A,B)$ \u8868\u793a\u70b9 $A,B$ \u4e4b\u95f4\u7684**\u66fc\u54c8\u987f\u8ddd\u79bb**\u3002\n\n$$\ndp_{i,0}=\\min(dp_{i-1,0}+\\operatorname{DIS}(lv_{i-1,0}, lv_{i,1}),\\ dp_{i-1,1}+\\operatorname{DIS}(lv_{i-1,1},lv_{i-1,1}))\n$$\n\n$$\ndp_{i,1}=\\min(dp_{i-1,0}+\\operatorname{DIS}(lv_{i-1,0}, lv_{i,0}),\\ dp_{i-1,1}+\\operatorname{DIS}(lv_{i-1,1},lv_{i-1,0}))\n$$\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nconst int maxn = 200015;\n\ninline int sim_read() {\n    int s = 0;\n    char ch = getchar();\n    while (ch < 48 || ch > 57) {\n        ch = getchar();\n    }\n    while (ch > 47 && ch < 58) {\n        s = (s << 3) + (s << 1) + ch - 48;\n        ch = getchar();\n    }\n    return s;\n}\n\nstruct Point {\n    int x, y;\n    void operator = (const Point &rhs) {\n        x = rhs.x;\n        y = rhs.y;\n        return;\n    }\n    bool operator < (const Point &rhs) const { // \u5c06\u7b49\u7ea7\u4f5c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0cx - y \u4f5c\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\n        if (max(x, y) != max(rhs.x, rhs.y)) {\n            return max(x, y) < max(rhs.x, rhs.y);\n        }\n        return x - y < rhs.x - rhs.y;\n    }\n} point[maxn], lv[maxn][2];\n\ninline int ABS(int n) {\n    return n < 0 ? -n : n;\n}\n\nint dis(Point p1, Point p2) {\n    return ABS(p1.x - p2.x) + ABS(p1.y - p2.y);\n}\n\nint n;\nLL dp[maxn][2];\n\nint main() {\n    n = sim_read();\n    for (register int i = 1; i <= n; i++) {\n        point[i].x = sim_read();\n        point[i].y = sim_read();\n    }\n    sort(point + 1, point + n + 1);\n    lv[0][0].x = lv[0][0].y = lv[0][1].x = lv[0][1].y = 0;\n    int len = 1;\n    lv[len][0] = point[1];\n    for (register int i = 2; i <= n; i++) { // \u8ba1\u7b97\u51fa lv \u6570\u7ec4\u7684\u503c\n        if (max(point[i].x, point[i].y) != max(point[i - 1].x, point[i - 1].y)) {\n            lv[len][1] = point[i - 1];\n            lv[++len][0] = point[i];\n        }\n    }\n    lv[len][1] = point[n];\n    dp[0][0] = dp[0][1] = 0;\n    for (register int i = 1; i <= len; i++) { // DP\n        dp[i][0] = min(dp[i - 1][0] + dis(lv[i - 1][0], lv[i][1]), dp[i - 1][1] + dis(lv[i - 1][1], lv[i][1])) + dis(lv[i][0], lv[i][1]);\n        dp[i][1] = min(dp[i - 1][0] + dis(lv[i - 1][0], lv[i][0]), dp[i - 1][1] + dis(lv[i - 1][1], lv[i][0])) + dis(lv[i][0], lv[i][1]);\n    }\n    printf(\"%lld\", min(dp[len][0], dp[len][1]));\n    return 0;\n}\n\n```\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n",
        "postTime": 1638690104,
        "uid": 280233,
        "name": "Lee666666",
        "ccfLevel": 5,
        "title": "CF1066F \u9898\u89e3"
    }
]