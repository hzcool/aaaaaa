[
    {
        "content": "## \u524d\u8a00\n\n\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u8fd9\u4e2a\u9898\u771f\u7684\u96be\uff0c\u4f46\u662f\u5728\u6211\u7684\u4e0d\u61c8\u575a\u6301\u4e4b\u4e0b\u8fd8\u662f\u88ab\u6211\u7ed9\u8c03\u51fa\u6765\u4e86\u3002\n\n\u8fd9\u5c31\u662f\u4e13\u5c5e\u4e8e\u6211\u4eec\u7684\u5feb\u4e50\u5427\uff0c\u5728\u4f60\u505a\u51fa\u9898\u7684\u90a3\u4e00\u523b\uff0c\u6b23\u559c\u82e5\u72c2\u3002\n\n\u8bf7\u63a5\u53d7\u5c5e\u4e8e\u4f60\u7684\u5feb\u4e50\uff01\uff01\uff01\uff01\n\n## \u89e3\u6cd5\n\n\u7edf\u8ba1\u672c\u8d28\u4e0d\u540c\u7684\u5b57\u4e32\u6570\uff0c\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\u662f\u61f5\u7684\uff0c\u4e0d\u77e5\u9053\u8be5\u4ece\u54ea\u91cc\u4e0b\u624b\uff0c\u751a\u81f3\u60f3\u7528\u5e7f\u4e49 SAM \u3002\n\n\u4f46\u662f\u5176\u5b9e\u4e0d\u7528\u90a3\u4e48\u9ebb\u70e6\u3002\n\n\u6211\u4eec\u5c06\u5b50\u4e32\u5206\u4e3a\u56db\u7c7b\uff0c$ S $\uff0c$*S $\uff0c$ S* $\uff0c$ S*T $\uff0c\u6700\u540e\u7b97\u4e0a\u7a7a\u96c6\u548c*\u3002\n\n\u4f60\u53d1\u73b0\u8fd9\u91cc\u9762\u6700\u96be\u641e\u7684\u5c31\u662f$ S*T $,\u524d\u9762\u7684\u76f4\u63a5\u7528\u6700\u666e\u901a\u7684\u6c42\u6cd5\u6c42\u5c31\u597d\u4e86\u3002\n\n\u5c31\u662f\u7528\u5f53\u524d\u53ca\u8282\u70b9\u7684 $ len $ \u51cf\u53bb parent \u6811\u4e0a\u7684\u7239\u7684 $ len $,\u540e\u7f00\u81ea\u52a8\u673a\u57fa\u64cd\u5427\u3002\n\n\u4f46\u662f\u697c\u4e0b\u597d\u50cf\u5e76\u6ca1\u6709\u8fd9\u6837\u505a\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\uff1f\uff1f\uff1f\uff1f\uff1f\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u76f4\u63a5\u53bb\u7edf\u8ba1 $ S*T $ \u3002\n\n\u4f60\u4f1a\u53d1\u73b0\u8fd9\u91cc\uff0c\u7ed3\u675f\u8282\u70b9\u96c6\u5408\u76f8\u540c\u7684S\u6240\u5bf9\u5e94\u7684T\u662f\u5b8c\u5168\u76f8\u540c\u7684\u3002\n\n\u4f46\u662f\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u627e\u5230\u8fd9\u6837\u7684\u96c6\u5408\uff0c\u4e0d\u8fc7\uff0cparent \u6811\u4e0a\u5168\u90fd\u662f\u8fd9\u6837\u7684\u3002\n\n\u8fd9\u5c31\u542f\u53d1\u6211\u4eec\u5728 parent \u6811\u4e0a\u8fdb\u884c\u5408\u5e76\uff0c\u5177\u4f53\u662f\u6c42\u94fe\u5e76\u7684\u957f\u5ea6\u3002\n\n\u8fd9\u4e2a\u53ef\u4ee5\u81ea\u884c\u767e\u5ea6,\u6240\u8c13\u94fe\u5e76,\u5c31\u662f\u6c42\u4e00\u5806\u70b9\u7684\u5230 lca \u7684\u957f\u5ea6\u7684\u96c6\u5408\u3002\n\n\u94fe\u5e76\u7684\u957f\u5ea6\u5c31\u662f\u5bf9\u4e8e\u5f53\u524d S \u7684 T \u7684\u79cd\u7c7b\u6570\uff0c\u76f4\u63a5\u4e58\u4e0a\u5c31\u884c\u4e86\u3002\n\nLCA \u6211\u662f\u6811\u5256\u5b9e\u73b0\u7684\uff0c\u94fe\u5e76\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register int\n#define int long long\n#define ll long long\nconst int N=2e5+5;\nchar ch[N];\nll ans;\nint to[N],nxt[N],head[N],rp;\nvoid add_edg(int x,int y){\n\tto[++rp]=y;nxt[rp]=head[x];head[x]=rp;\n}\nint fa[N],dep[N],siz[N],son[N],top[N];\nint dfn[N],cnt,idf[N];\nint lon[N];\nint LCA(int x,int y){\n\tx=idf[x];y=idf[y];\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\treturn dep[x]<dep[y]?x:y;\n}\nstruct XDS{\n\tint sum[N*40],ls[N*40],rs[N*40];\n\tint seg,al[N*40],ar[N*40];\n\tvoid pushup(int x){\n\t\tif(ls[x])al[x]=al[ls[x]];\n\t\telse if(rs[x])al[x]=al[rs[x]];\n\t\tif(rs[x])ar[x]=ar[rs[x]];\n\t\telse if(ls[x])ar[x]=ar[ls[x]];\n\t\tif(ls[x]&&rs[x])\n\t\t\tsum[x]=sum[ls[x]]+sum[rs[x]]-lon[LCA(ar[ls[x]],al[rs[x]])];\n\t\telse if(ls[x])sum[x]=sum[ls[x]];\n\t\telse if(rs[x])sum[x]=sum[rs[x]];\n\t\treturn ;\n\t}\n\tvoid ins(int &x,int l,int r,int pos){\n\t\tif(!x)x=++seg;\n\t\tif(l==r){\n\t\t\tal[x]=ar[x]=pos;\n\t\t\tsum[x]=lon[idf[pos]];\n\t\t\t//cout<<sum[x]<<\" \"<<idf[pos]<<\" \"<<pos<<endl;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tif(pos<=mid)ins(ls[x],l,mid,pos);\n\t\telse ins(rs[x],mid+1,r,pos);\n\t\tpushup(x);return ;\n\t}\n\tint merge(int x,int y){\n\t\tif(!x||!y)return x+y;\n\t\tls[x]=merge(ls[x],ls[y]);\n\t\trs[x]=merge(rs[x],rs[y]);\n\t\tpushup(x);\n\t\treturn x;\n\t}\n}xds;\nint rt[N];\nstruct SAM{\n\tstruct node{\n\t\tint fail,son[27];\n\t\tint len;\n\t\tnode(){};\n\t}tr[N];\n\tint pos[N],seg,las;\n\tSAM(){seg=las=1;}\n\tvoid dfs_fi(int x){\n\t\tsiz[x]=1;son[x]=0;\n\t\tlon[x]=tr[x].len;\n\t\tfor(re i=head[x];i;i=nxt[i]){\n\t\t\tint y=to[i];fa[y]=x;dep[y]=dep[x]+1;\n\t\t\tdfs_fi(y);siz[x]+=siz[y];\n\t\t\tif(!son[x]||siz[y]>siz[son[x]])son[x]=y;\n\t\t}\n\t}\n\tvoid dfs_se(int x,int f){\n\t\ttop[x]=f;dfn[x]=++cnt;idf[cnt]=x;\n\t\tif(son[x])dfs_se(son[x],f);\n\t\tfor(re i=head[x];i;i=nxt[i]){\n\t\t\tint y=to[i];\n\t\t\tif(y==son[x])continue;\n\t\t\tdfs_se(y,y);\n\t\t}\n\t}\n\tvoid ins(int c,int id){\n\t\tint p=las,np=++seg;las=np;\n\t\ttr[np].len=tr[p].len+1;pos[id]=seg;\n\t\twhile(p&&!tr[p].son[c])tr[p].son[c]=np,p=tr[p].fail;\n\t\tif(!p)tr[np].fail=1;\n\t\telse {\n\t\t\tint q=tr[p].son[c];\n\t\t\tif(tr[q].len==tr[p].len+1)tr[np].fail=q;\n\t\t\telse {\n\t\t\t\tint nq=++seg;tr[nq]=tr[q];\n\t\t\t\ttr[nq].len=tr[p].len+1;\n\t\t\t\ttr[q].fail=tr[np].fail=nq;\n\t\t\t\twhile(p&&tr[p].son[c]==q)tr[p].son[c]=nq,p=tr[p].fail;\n\t\t\t}\n\t\t}\n\t}\n\tvoid get_slpf(){\n\t\tfor(re i=2;i<=seg;i++)\n\t\t\tadd_edg(tr[i].fail,i);//cout<<tr[i].fail<<\" \"<<i<<endl;\n\t\tdfs_fi(1);dfs_se(1,1);\n\t}\n\tvoid sol(int x){\n\t\tfor(re i=head[x];i;i=nxt[i]){\n\t\t\tint y=to[i];\n\t\t\tsol(y);\n\t\t\trt[x]=xds.merge(rt[x],rt[y]);\n\t\t}\n\t\tif(x!=1){\n\t\t\tans+=1ll*(tr[x].len-tr[tr[x].fail].len)*xds.sum[rt[x]];\n\t\t}\n\t\t//cout<<x<<\" \"<<ans<<endl;\n\t}\n\tvoid get_edg(){\n\t\tmemset(head,0,sizeof(head));rp=0;\n\t\tfor(re i=2;i<=seg;i++)add_edg(tr[i].fail,i);\n\t}\n}be,af;\nsigned main(){\n\tscanf(\"%s\",ch+1);\n\tint len=strlen(ch+1);\n\tfor(re i=1;i<=len;i++)be.ins(ch[i]-'a',i);\n\tfor(re i=len;i>=1;i--)af.ins(ch[i]-'a',i);\n\tfor(re i=2;i<=be.seg;i++){\n\t\tif(be.tr[i].len!=len)ans+=be.tr[i].len-be.tr[be.tr[i].fail].len;\n\t\tans+=be.tr[i].len-be.tr[be.tr[i].fail].len;\n\t//S\u548c*S\n\tfor(re i=2;i<=af.seg;i++)//T\u548c*T\n\t\tif(af.tr[i].len!=len)ans+=af.tr[i].len-af.tr[af.tr[i].fail].len;\n\taf.get_slpf();\n\tfor(re i=1;i<=len-2;i++)\n\t\txds.ins(rt[be.pos[i]],1,cnt,dfn[af.pos[i+2]]);\n\tbe.get_edg();\n\tbe.sol(1);\n\tprintf(\"%lld\",ans+2);\n}\n```",
        "postTime": 1628376786,
        "uid": 233027,
        "name": "fengwu",
        "ccfLevel": 0,
        "title": "<\u9898\u89e3> CF1276F Asterisk Substrings"
    },
    {
        "content": "\u6ce8\u610f\u5230\u7b54\u6848\u662f$s$,$s*$,$*s$,$s*t$,$*$,$\\emptyset$\u4e94\u79cd\u6784\u6210\u7684\u3002\n\n\u800c\u9664\u4e86$s*t$\u4ee5\u5916\u90fd\u53ef\u4ee5\u7b80\u5355\u8ba1\u7b97\u3002\n\n\u5bf9\u4e8e$s*t$\uff0c\u53d1\u73b0\u5bf9\u4e8e$\\texttt{endpos}$\u76f8\u540c\u7684$s$\uff0c\u53ef\u9009\u7684$t$\u90fd\u662f\u4e00\u6837\u7684\u3002\n\n\u6240\u4ee5\u60f3\u5230\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u6bcf\u4e2a\u8282\u70b9\u6c42\u51fa\u5b83\u4f5c\u4e3a$s$\u65f6\u53ef\u9009\u7684$t$\u7684\u4e2a\u6570\u3002\n\n\u5982\u679c$s$\u7684$\\texttt{endpos}$\u662f\u96c6\u5408$t_1,t_2,t_3$\uff0c\u90a3\u4e48\u53ef\u9009\u7684$t$\u7684\u4e2a\u6570\u5c31\u662f\u6240\u6709\u7684$s[t_1+2:],s[t_2+2:],s[t_3+2:]$\u4e5f\u5c31\u662f$\\texttt{endpos}$\u540e\u79fb\u4e24\u4f4d\u540e\u7684\u6240\u6709\u540e\u7f00\u7684\u5b50\u4e32\u7684\u5e76\u7684\u4e0d\u540c\u4e32\u7684\u4e2a\u6570\u3002\n\n\u8ba1\u7b97\u591a\u4e2a\u540e\u7f00\u7684\u5b50\u4e32\u7684\u5e76\u7684\u4e0d\u540c\u4e32\u4e2a\u6570\u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u540e\u7f00\u6570\u7ec4\u89e3\u51b3\u7684\u7ecf\u5178\u95ee\u9898\uff0c\n\n\u5c06\u540e\u7f00\u6392\u5e8f\u540e\u7b54\u6848\u5373\u4e3a\u6240\u6709\u540e\u7f00\u7684\u957f\u5ea6\u51cf\u53bb\u76f8\u90bb\u540e\u7f00\u7684$\\texttt{LCP}$\u3002\n\n\u5728$\\texttt{fail}$\u6811\u4e0a$\\texttt{set}$\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u7b80\u5355\u7ef4\u62a4\u3002\n\n~~\u7a81\u7136\u610f\u8bc6\u5230\u65e2\u7136\u590d\u6742\u5ea6\u662fnlog^2^n\u7684\u90a3\u6211\u4e3a\u4ec0\u4e48\u4e0d\u5168\u7a0b\u54c8\u5e0c\u6c42\u540e\u7f00\u6570\u7ec4\u548cheight\u5462~~\n\n~~\u4e8e\u662f\u6211\u4eec\u5f00\u59cb\u601d\u8003\u80fd\u4e0d\u80fd\u4e0d\u7528\u540e\u7f00\u6570\u7ec4\u3002~~\n\n\u8ba1\u7b97\u591a\u4e2a\u540e\u7f00\u7684\u5b50\u4e32\u7684\u5e76\u7684\u4e0d\u540c\u4e32\u4e2a\u6570\u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u540e\u7f00\u81ea\u52a8\u673a\u89e3\u51b3\u7684\u7ecf\u5178\u95ee\u9898\uff0c\n\n\u5bf9\u53cd\u4e32\u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a\u540e\u5c06\u9700\u8981\u6c42\u5e76\u7684\u540e\u7f00\u5728\u81ea\u52a8\u673a\u4e0a\u7684\u70b9\u5230\u6839\u6c42\u4e2a\u94fe\u5e76\u957f\u5ea6\u5373\u4e3a\u7b54\u6848\n\n\uff08\u6ce8\u610f\u5230\u5728\u53cd\u4e32\u7684\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u4e00\u4e2a\u540e\u7f00\u4e00\u5b9a\u662f\u5b83\u6240\u5728\u70b9\u7684\u6700\u957f\u4e32\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u6263\u4efb\u4f55\u7ec6\u8282\u3002\uff09\uff0c\n\n\u6c42\u94fe\u5e76\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u5177\u4f53\u662f\u56e0\u4e3a\u628a\u6240\u6709\u70b9\u6309$\\texttt{dfs}$\u5e8f\u6392\u5e8f\u540e\uff0c\u94fe\u5e76\u4e3a\u6240\u6709\u70b9\u7684\u6df1\u5ea6\u548c\u51cf\u53bb\u76f8\u90bb\u70b9\u7684$\\texttt{lca}$\u7684\u6df1\u5ea6\u548c\uff0c\n\n\u90a3\u4e48\u6309$\\texttt{dfs}$\u5e8f\u5efa\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u7b54\u6848\uff0c\u5de6\u53f3\u513f\u5b50\u5408\u5e76\u65f6\u53ea\u9700\u8981\u6c42\u5de6\u8fb9\u7684\u7b54\u6848\u52a0\u53f3\u8fb9\u7684\u7b54\u6848\u51cf\u53bb\u5de6\u8fb9\u6700\u9760\u53f3\u8282\u70b9\u548c\u53f3\u8fb9\u6700\u9760\u5de6\u8282\u70b9\u7684$\\texttt{lca}$\u6df1\u5ea6\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u53ea\u7528\u540e\u7f00\u81ea\u52a8\u673a\u7684$O(n\\log n)$\u505a\u6cd5\u3002~~\u600e\u4e48\u611f\u89c9\u540e\u7f00\u81ea\u52a8\u673a\u540a\u6253\u540e\u7f00\u6570\u7ec4\u4e0d\u7559\u4e00\u70b9\u4f59\u5730\u7684\u3002\u5b9e\u9645\u4e0a\u8fd8\u662f\u8dd1\u4e0d\u8fc7\u542f\u53d1\u5f0f\u5408\u5e76~~\n\n$\\mathcal AC \\ Code$\n```cpp\n#include<bits/stdc++.h>\n#define maxn 200005\n#define maxc 26\n#define lim 19\n#define LL long long\n#define rep(i,j,k) for(int i=(j),LIM=(k);i<=LIM;i++)\n#define per(i,j,k) for(int i=(j),LIM=(k);i>=LIM;i--)\nusing namespace std;\n\nint n;\nchar S[maxn];\nLL ans;\n\nint st[maxn],tim,mn[lim][maxn<<1],dep[maxn],lg[maxn<<1];\nint Lca(int u,int v){// u ,v is dfn\n\tif(!u || !v) return 0; \n\tif(u > v) swap(u,v);\n\tint t = lg[v-u+1];\n\treturn dep[mn[t][u]] < dep[mn[t][v-(1<<t)+1]] ? mn[t][u] : mn[t][v-(1<<t)+1];\n}\n\n#define maxp maxn * 30\nint rt[maxn],lc[maxp],rc[maxp],ml[maxp],mr[maxp],tot;\nLL sm[maxp];\nvoid upd(int u){\n\tsm[u] = sm[lc[u]] + sm[rc[u]] - dep[Lca(ml[rc[u]] , mr[lc[u]])];\n\tml[u] = ml[lc[u]] ? ml[lc[u]] : ml[rc[u]];\n\tmr[u] = mr[rc[u]] ? mr[rc[u]] : mr[lc[u]];\n}\nvoid ins(int &u,int l,int r,int p){\n\tif(!u) u = ++tot;\n\tif(l==r) return (void)(ml[u]=mr[u]=p,sm[u]=dep[mn[0][p]]);\n\tint m =l+r>>1;\n\tp <= m ? ins(lc[u],l,m,p) : ins(rc[u],m+1,r,p);\n\tupd(u);\n}\nvoid merge(int &u,int l,int r){\n\tif(!l||!r) return (void)(u=l+r);\n\tu = ++tot;\n\tif(lc[l] || rc[l]){\n\t\tmerge(lc[u],lc[l],lc[r]) , merge(rc[u],rc[l],rc[r]);\n\t\tupd(u);\n\t}\n\telse{\n\t\t// no else!\n\t\tassert(0);\n\t}\n}\n\nstruct SAM{\n\tint tr[maxn][maxc] , fa[maxn] , len[maxn] , pos[maxn] , tot , last;\n\tvector<int>G[maxn];\n\tSAM(){\n\t\tmemset(tr,0,sizeof tr);\n\t\tlen[0] = tot = last = 0;\n\t\tfa[0] = -1; \n\t}\n\tvoid ins(int c){\n\t\tint u = ++tot , p = last , q;\n\t\tlen[last = u] = len[p] + 1;\n\t\tfor(;~p && tr[p][c] == 0;p = fa[p]) tr[p][c] = u;\n\t\tif(p==-1) fa[u]=0;\n\t\telse if(len[q = tr[p][c]] == len[p] + 1) fa[u] = q;\n\t\telse {\n\t\t\tint v = ++tot;\n\t\t\tmemcpy(tr[v],tr[q],sizeof tr[v]);\n\t\t\tfa[v] = fa[q] , len[v] = len[p] + 1;\n\t\t\tfor(;~p && tr[p][c] == q;p=fa[p]) tr[p][c] = v;\n\t\t\tfa[u] = fa[q] = v;\n\t\t}\n\t}\n\tvoid dfs(int u){\n\t\tmn[0][st[u] = ++tim] = u;\n\t\tfor(int v:G[u]){\n\t\t\tdep[v] = dep[u] + len[v] - len[u];\n\t\t\tdfs(v);\n\t\t\tmn[0][++tim] = u;\n\t\t}\n\t}\n\tvoid dfs2(int u){\n\t\tfor(int v:G[u])\n\t\t\tdfs2(v),merge(rt[u],rt[u],rt[v]);\n\t}\n\tvoid BuildR(){\n\t\trep(i,1,tot) G[fa[i]].push_back(i);\n\t\tdfs(0);\n\t\trep(j,1,lim-1) rep(i,1,tim-(1<<j)+1) \n\t\t\tmn[j][i] = dep[mn[j-1][i]] < dep[mn[j-1][i+(1<<j-1)]] ? mn[j-1][i] : mn[j-1][i+(1<<j-1)];\n\t\trep(i,2,tim) lg[i] = lg[i>>1] + 1;\n\t}\n\tvoid BuildS(){\n\t\trep(i,1,tot) G[fa[i]].push_back(i);\n\t\tdfs2(0);\n\t\trep(i,1,tot)\n\t\t\tans += 1ll * (len[i] - len[fa[i]]) * sm[rt[i]];\n\t}\n}SA,RA;\n\nint main(){\n\tscanf(\"%s\",S);\n\tn = strlen(S);\n\trep(i,0,n-1) SA.ins(S[i] - 'a') , SA.pos[i] = SA.last , ans += (i+1) - SA.len[SA.fa[SA.last]],(i == n-2) && (ans *= 2 );\n\tper(i,n-1,0) RA.ins(S[i] - 'a') , RA.pos[i] = RA.last , (i >= 1) && (ans += RA.len[RA.last] - RA.len[RA.fa[RA.last]]);\n\tans += 2;\n\tRA.BuildR();\n\trep(i,0,n-3)\n\t\tins(rt[SA.pos[i]] , 1 , tim , st[RA.pos[i+2]]);\n\tSA.BuildS();\n\tprintf(\"%lld\\n\",ans);\n}\n```",
        "postTime": 1591863639,
        "uid": 30037,
        "name": "Freopen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1276F \u3010Asterisk Substrings\u3011"
    },
    {
        "content": "\u628a\u8981\u7edf\u8ba1\u7684\u4e32\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a`(empty)`, `s`, `s*t`, `s*`, `*s`, `*` \u3002\n\n`s` \u7684\u6570\u91cf\u5c31\u662f\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\uff0c\u505a\u6cd5\u5f88\u7ecf\u5178\u3002\n\n\u800c `s*` \u5c31\u662f\u53bb\u6389\u6700\u540e\u4e00\u4e2a\u70b9\u540e\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\uff0c\u540c\u7406 `*s` \u5c31\u662f\u53bb\u6389\u7b2c\u4e00\u4e2a\u70b9\u3002\n\n`(empty)`, `*` \u7684\u6570\u91cf\u5c31\u662f\u4e00\u3002\n\n\u90a3\u4e48\u8fd9\u9898\u7684\u91cd\u70b9\u5c31\u662f \u7edf\u8ba1 `s*t` \u7684\u6570\u91cf\u3002\n\n---\n\n\u8003\u8651\u679a\u4e3e\u672c\u8d28\u4e0d\u540c\u7684 s \uff0c\u7edf\u8ba1\u5bf9\u5e94\u7684 t \u7684\u6570\u91cf\u3002\n\n\u4e0d\u96be\u53d1\u73b0 **\u5bf9\u4e8e endpos \u96c6\u5408\u76f8\u540c\u7684 s \uff0c\u5176\u5bf9\u5e94\u7684 t \u7684\u6570\u91cf\u662f\u76f8\u540c\u7684** \u3002\u90a3\u4e48\u53ef\u4ee5\u5728 SAM \u4e0a\u679a\u4e3e $O(n)$ \u4e2a\u8282\u70b9\u6765\u8ba1\u7b97 t \u7684\u6570\u91cf\u3002\n\n\u8bbe s \u7684 endpos \u96c6\u5408\u4e3a $X$ \uff0c\u5bf9\u5e94\u5730\u8bbe\u96c6\u5408 $Y = \\{y=x+2|x \\in X\\}$ \u3002\u90a3\u4e48\u628a\u8d77\u70b9\u5728\u96c6\u5408 $Y$ \u7684\u6240\u6709\u540e\u7f00\u62ff\u6765\u5efa Trie \uff0cTrie \u7684\u8282\u70b9\u6570\u91cf\u5c31\u662f\u5408\u6cd5 t \u7684\u6570\u91cf\u3002\n\n\u4f17\u6240\u5468\u77e5\u6c42 Trie \u7684\u8282\u70b9\u6570\u91cf\u53ef\u4ee5\u5b50\u96c6\u5bb9\u65a5\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u592a\u5927\u3002\u53e6\u4e00\u4e2a\u5bb9\u65a5\u65b9\u6cd5\u662f\u6309\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u63d2\u5165\u5b57\u7b26\u4e32\uff0c\u8bbe\u4e0a\u4e00\u4e2a\u63d2\u5165\u7684\u4e32\u4e3a m \uff0c\u65b0\u63d2\u5165\u4e32 n \u540e\uff0c Trie \u6811\u7684\u8282\u70b9\u6570\u91cf\u4f1a\u589e\u52a0 $|n| - |lcp(n, m)|$ \u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u53ea\u8981\u628a\u8d77\u70b9\u5728\u96c6\u5408 $Y$ \u7684\u540e\u7f00\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\u5e76\u4e14\u6c42\u51fa\u76f8\u90bb lcp \u7684\u548c\u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u3002\n\n\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u96c6\u5408 $Y$ \uff0c\u7531\u4e8e SAM \u4e0a\u4e00\u4e2a\u70b9\u7684 endpos \u96c6\u5408\u662f\u5176\u5728 parent \u6811\u4e0a\u7684\u513f\u5b50\u7684 endpos \u96c6\u5408\u7684\u5e76\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u542f\u53d1\u5f0f\u5408\u5e76\u6765\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684 endpos \u96c6\u5408\uff0c\u4e5f\u5c31\u80fd\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u96c6\u5408 $Y$ \u3002\n\n\u4f46\u662f\u4ec5\u8bb0\u5f55\u4f4d\u7f6e\u65e0\u6cd5\u7ef4\u62a4\u7b54\u6848\uff0c\u96c6\u5408 $Y$ \u4e2d\u4e8b\u5b9e\u4e0a\u8981\u8bb0\u5f55\u7684\u662f\u6bcf\u4e2a\u540e\u7f00\u7684 rank \uff0c\u7136\u540e\u7ef4\u62a4 lcp \u7684\u548c\u5c31\u662f\u5728\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65f6\u5019\u67e5\u8be2 height \u6570\u7ec4\u4e0a\u7684\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(nlog^2n)$ \uff0c\u74f6\u9888\u5728\u4e8e set \u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n---\n\n\u53c2\u8003\u5b9e\u73b0\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <set>\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n\ntypedef long long ll;\n\n// SA {{{\nconst int maxn = 100005;\nchar s[maxn];\nint sa[maxn], rank[maxn], hi[maxn];\nint tmp[maxn], sa2[maxn], t[maxn];\n\nvoid build (int n, int max) {\n\tfor (int i = 1; i <= n; i ++)\n\t\trank[i] = s[i], sa2[i] = i;\n\tfor (int i = 1; i <= n; i ++) ++ t[rank[i]];\n\tfor (int i = 1; i <= max; i ++) t[i] += t[i - 1];\n\tfor (int i = n; i; i --) sa[t[rank[sa2[i]]] --] = sa2[i];\n\tstd::fill(t + 1, t + max + 1, 0);\n\tint tot = rank[sa[1]] = 1;\n\tfor (int i = 2; i <= n; i ++)\n\t\trank[sa[i]] = s[sa[i]] == s[sa[i - 1]] ? tot : ++ tot;\n\tfor (int m = 1; tot < n; m <<= 1) {\n\t\tint p = 0;\n\t\tfor (int i = 1; i <= m; i ++) sa2[++ p] = n - m + i;\n\t\tfor (int i = 1; i <= n; i ++) if (sa[i] > m) sa2[++ p] = sa[i] - m;\n\t\tfor (int i = 1; i <= n; i ++) ++ t[rank[i]];\n\t\tfor (int i = 1; i <= tot; i ++) t[i] += t[i - 1];\n\t\tfor (int i = n; i; i --) sa[t[rank[sa2[i]]] --] = sa2[i];\n\t\tstd::fill(t + 1, t + tot + 1, 0);\n\t\tstd::copy(rank, rank + n + 1, tmp);\n\t\trank[sa[1]] = tot = 1;\n\t\tfor (int i = 2; i <= n; i ++)\n\t\t\trank[sa[i]] = (tmp[sa[i]] == tmp[sa[i - 1]] and\n\t\t\t\t\ttmp[sa[i] + m] == tmp[sa[i - 1] + m]) ? tot : ++ tot;\n\t}\n\tfor (int i = 1; i <= n; i ++) {\n\t\tint &k = hi[rank[i]] = std::max(0, hi[rank[i - 1]] - 1);\n\t\twhile (s[i + k] == s[sa[rank[i] - 1] + k]) ++ k;\n\t}\n}\n// }}}\n\n// SAM {{{\nconst int maxk = 26;\nint ch[maxn << 1][maxk], len[maxn << 1], fa[maxn << 1], cp = 1;\nstd::vector<int> G[maxn << 1];\n\nint insert (int pre, int x) {\n\tint now = ++ cp;\n\tlen[now] = len[pre] + 1;\n\twhile (pre and !ch[pre][x]) {\n\t\tch[pre][x] = now;\n\t\tpre = fa[pre];\n\t}\n\tif (pre) {\n\t\tint preto = ch[pre][x];\n\t\tif (len[preto] == len[pre] + 1)\n\t\t\tfa[now] = preto;\n\t\telse {\n\t\t\tint sp = ++ cp;\n\t\t\tlen[sp] = len[pre] + 1;\n\t\t\tfa[sp] = fa[preto];\n\t\t\tfor (int i = 0; i < maxk; i ++)\n\t\t\t\tch[sp][i] = ch[preto][i];\n\t\t\twhile (pre and ch[pre][x] == preto) {\n\t\t\t\tch[pre][x] = sp;\n\t\t\t\tpre = fa[pre];\n\t\t\t}\n\t\t\tfa[now] = fa[preto] = sp;\n\t\t}\n\t} else\n\t\tfa[now] = 1;\n\treturn now;\n}\n// }}}\n\nint st[maxn][20], hb[maxn];\nvoid stinit (int n) {\n\tfor (int i = n; i; i --) {\n\t\tst[i][0] = hi[i];\n\t\tfor (int k = 1; i + (1 << k) - 1 <= n; k ++)\n\t\t\tst[i][k] = std::min(st[i][k - 1], st[i + (1 << k >> 1)][k - 1]);\n\t}\n\tfor (int i = 2; i <= n; i ++)\n\t\thb[i] = hb[i >> 1] + 1;\n}\n\nint stquery (int l, int r) {\n\tint k = hb[r - l + 1];\n\treturn std::min(st[l][k], st[r - (1 << k) + 1][k]);\n}\n\nstruct Set {\n\tstd::set<int> set;\n\tll val;\n\tvoid insert (int k, int n) {\n\t\tif (set.count(k)) return;\n\t\tint l = *(-- set.lower_bound(k));\n\t\tint r = *set.upper_bound(k);\n\t\tval += n - sa[k] + 1;\n\t\tif (l >= 1) val -= stquery(l + 1, k);\n\t\tif (r <= n) val -= stquery(k + 1, r);\n\t\tif (l >= 1 and r <= n) val += stquery(l + 1, r);\n\t\tset.insert(k);\n\t}\n\tvoid init (int n) { set.insert(0), set.insert(n + 1); }\n} set[maxn << 1];\n\nll ans;\nvoid dfs (int u, int n) {\n\tfor (int v : G[u]) {\n\t\tdfs(v, n);\n\t\tif (set[v].set.size() > set[u].set.size())\n\t\t\tstd::swap(set[u], set[v]);\n\t\tfor (int k : set[v].set)\n\t\t\tset[u].insert(k, n);\n\t}\n\tans += 1ll * (len[u] - len[fa[u]]) * set[u].val;\n}\n\nint main () {\n\tscanf(\"%s\", s + 1);\n\tint n = int(strlen(s + 1));\n\n\tint sam = 1;\n\tfor (int i = 1; i <= n; i ++)\n\t\tsam = insert(sam, s[i] - 'a');\n\tbuild(n, 256);\n\n\tfor (int i = 1; i <= cp; i ++)\n\t\tset[i].init(n);\n\tstinit(n);\n\n\tsam = 1;\n\tset[sam].insert(rank[2], n);\n\tfor (int i = 1; i <= n; i ++) {\n\t\tsam = ch[sam][s[i] - 'a'];\n\t\tif(i + 2 <= n) set[sam].insert(rank[i + 2], n);\n\t}\n\n\t// s\n\tfor (int i = 1; i <= cp; i ++)\n\t\tans += len[i] - len[fa[i]];\n\t// s*s\n\tfor (int i = 2; i <= cp; i ++)\n\t\tG[fa[i]].push_back(i);\n\tdfs(1, n);\n\t// s*\n\tfor (int i = 1; i <= cp; i ++)\n\t\tif (i != sam)\n\t\t\tans += len[i] - len[fa[i]];\n\tans += set[1].val; // *s\n\t++ ans; // *\n\t++ ans; // (empty)\n\n\tprintf(\"%lld\\n\", ans);\n}\n```",
        "postTime": 1584774516,
        "uid": 52232,
        "name": "Kewth",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1276F \u3010Asterisk Substrings\u3011"
    },
    {
        "content": "[Codeforces \u9898\u9762\u4f20\u9001\u95e8](https://codeforces.ml/contest/1276/problem/F) & [\u6d1b\u8c37\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1276F)\n\nSAM hot tea %%%%%%%\n\n\u9996\u5148\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u5c06\u6240\u6709\u80fd\u591f\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u5206\u6210\u516d\u7c7b\uff1a$\\varnothing,\\text{*},s,\\text{*}s,s\\text{*},s\\text{*}t$\uff0c\u5176\u4e2d $s,t$ \u5206\u522b\u4ee3\u8868\u67d0\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c$\\text{*}$ \u5219\u4ee3\u8868\u9898\u76ee\u4e2d\u7684\u661f\u53f7\uff0c\u663e\u7136\u524d\u4e24\u79cd\u60c5\u51b5\u7684\u8d21\u732e\u90fd\u662f $1$\uff0c\u7b97\u51fa\u540e\u51e0\u79cd\u60c5\u51b5\u7684\u7b54\u6848\u540e\u76f4\u63a5\u52a0 $2$ \u5373\u53ef\uff0c\u7b2c\u4e09\u79cd\u60c5\u51b5\u4e5f\u5f02\u5e38\u7b80\u5355\uff0c\u76f8\u5f53\u4e8e\u6c42 $s$ \u4e2d\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\uff0cSAM \u57fa\u64cd\uff0c\u76f8\u4fe1\u6765\u6311\u6218\u8fd9\u9053\u9898\u7684\u4eba\u90fd\u4f1a\u3002\u7b2c\u56db\u79cd\u60c5\u51b5\u53ef\u4ee5\u770b\u4f5c\u5728\u67d0\u4e2a $s[1\u2026n-1]$ \u7684\u5b50\u4e32\u540e\u9762\u6dfb\u4e0a\u4e00\u4e2a $\\text{*}$\uff0c\u56e0\u6b64\u7b2c\u56db\u79cd\u60c5\u51b5\u5408\u6cd5\u7684\u5b50\u4e32\u6570\u5c31\u662f $s[1\u2026n-1]$ \u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\uff0c\u8fd9\u4e2a\u4e00\u6ce2 SAM \u5e26\u8d70\u5373\u53ef\uff0c\u540c\u7406\u7b2c\u4e94\u79cd\u60c5\u51b5\u5408\u6cd5\u7684\u5b50\u4e32\u6570\u5c31\u662f $s[2\u2026n]$ \u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\uff0c\u540c\u6837\u4e00\u6ce2 SAM \u5e26\u8d70\uff0c\u6bd4\u8f83\u68d8\u624b\u7684\u662f\u7b2c\u516d\u79cd\u60c5\u51b5\u3002\n\n\u7531\u4e8e\u6211\u4eec\u8981\u6c42\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\uff0c\u56e0\u6b64\u679a\u4e3e\u661f\u53f7\u4ee3\u66ff\u4e86\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u54ea\u4e2a\u5b57\u7b26\u662f\u4e0d\u660e\u667a\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u7b97\u91cd\u3002\u56e0\u6b64\u6211\u4eec\u8003\u8651\u9000\u4e00\u6b65\uff0c\u6211\u4eec\u4e0d\u662f\u521a\u624d\u5bf9 $s[1\u2026n-1]$\u200b \u5efa\u4e86\u4e00\u4e2a SAM \u5417\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8003\u8651\u679a\u4e3e\u661f\u53f7\u5de6\u8fb9\u90a3\u90e8\u5206\u5bf9\u5e94\u7684\u5b50\u4e32\u5728 SAM \u4e0a\u54ea\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u4e2d\uff0c\u5047\u8bbe\u4e3a $x$\u200b\uff0c\u90a3\u4e48\u6839\u636e SAM \u90a3\u4e00\u5957\u7406\u8bba\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6240\u6709\u51fa\u73b0\u4f4d\u7f6e\u7684\u53f3\u7aef\u70b9\u90fd\u5728 $x$\u200b \u5bf9\u5e94\u7684 $\\text{endpos}$\u200b \u4e2d\uff0c\u4e5f\u5c31\u662f $x$\u200b \u5728 parent tree \u4e0a\u5b50\u6811\u5185 $s$\u200b \u6240\u6709\u524d\u7f00\u5bf9\u5e94\u7684\u8282\u70b9\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6240\u6709\u661f\u53f7\u53ef\u4ee5\u66ff\u6362\u7684\u4f4d\u7f6e\u90fd\u5728\u96c6\u5408 $\\{y+1|y\\in\\text{endpos}(x)\\}$\u200b \u4e2d\uff0c\u8003\u8651\u661f\u53f7\u53f3\u8fb9\u7684\u5b57\u7b26\u4e32\u6709\u54ea\u4e9b\u53d6\u503c\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u661f\u53f7\u53f3\u8fb9\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u662f\u8fd9\u4e9b\u661f\u53f7\u53ef\u4ee5\u653e\u7684\u4f4d\u7f6e\u53f3\u8fb9\u7684\u5b57\u7b26\u7ec4\u6210\u7684\u540e\u7f00\u7684\u67d0\u4e2a\u524d\u7f00\uff0c\u4e5f\u5c31\u662f $S=\\{s[y+2\u2026n]|y\\in\\text{endpos}(x)\\}$\u200b \u4e2d\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u67d0\u4e2a\u524d\u7f00\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ea\u9700\u6c42 $S=\\{s[y+2\u2026n]|y\\in\\text{endpos}(x)\\}$\u200b \u6709\u591a\u5c11\u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u524d\u7f00\u5373\u53ef\u3002\u76f4\u63a5\u679a\u4e3e\u524d\u7f00\u663e\u7136\u4e0d\u53ef\u53d6\uff0c\u4e0d\u8fc7\u6ce8\u610f\u5230\u5982\u679c\u6211\u4eec\u5bf9\u53cd\u4e32\u4e5f\u5efa\u4e00\u4e2a SAM\uff0c\u90a3\u4e48\u53cd\u4e32\u7684 SAM \u4e0a\u67d0\u4e2a\u8282\u70b9 $z$\u200b \u8868\u793a\u7684\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a $y\\in\\text{endpos}(x)$\u200b\uff0c\u6ee1\u8db3 $s[y+2\u2026n]$\u200b \u5728\u53cd\u4e32\u7684 SAM \u4e0a\u5bf9\u5e94\u7684\u8282\u70b9\u5728 $z$ \u7684\u5b50\u6811\u5185\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u627e\u51fa\u8fd9\u6837\u7684 $|\\text{endpos}(x)|$\u200b \u4e2a\u540e\u7f00\u5728\u53cd\u4e32 SAM \u4e0a\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u70b9\u7ec4\u6210\u7684\u96c6\u5408\u5c31\u662f\u5b83\u4eec\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u8282\u70b9\u7684\u5e76\uff0c\u800c\u6211\u4eec\u8981\u6c42\u7684\uff0c\u5c31\u662f\u8fd9\u4e2a\u5e76\u4e2d\u6240\u6709\u8282\u70b9\u8868\u793a\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u7684\u5927\u5c0f\u4e4b\u548c\u3002~~\u7136\u540e\u5230\u8fd9\u91cc\u6211\u5c31\u4e0d\u4f1a\u505a\u4e86\uff0c\u4e00\u76f4\u5728\u60f3\u600e\u4e48\u5256~~\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u4e1c\u897f\u957f\u5f97\u4e00\u8138\u865a\u6811\uff0c\u6839\u636e\u865a\u6811\u90a3\u4e00\u5957\u7406\u8bba\uff0c\u8fd9\u4e1c\u897f\u8282\u70b9\u5e76\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u5c31\u662f\u5b83\u4eec**\u6309\u7167 DFS \u5e8f\u6392\u5e8f\u4e4b\u540e\uff0cDFS \u5e8f\u5217\u76f8\u90bb\u4e24\u4e2a\u70b9+\u4e00\u5934\u4e00\u5c3e\u8def\u5f84\u4e0a\u70b9\u7684\u6743\u503c\u4e4b\u548c\u6263\u6389\u5b83\u4eec\u7684 LCA \u7684\u6743\u503c\u7684\u548c\u9664\u4ee5 $2$\uff08\u5728\u672c\u9898\u4e2d\u5c31\u662f\u5b83\u4eec\u5bf9\u5e94\u7684\u7b49\u4ef7\u7c7b\u7684\u5927\u5c0f\uff0c\u5373 $len_x-len_{lnk_x}$\u200b\uff09\uff0c\u5916\u52a0\u5b83\u4eec\u7684 LCA \u5230\u6839\u8282\u70b9\u8fd9\u6bb5\u8def\u5f84\u4e0a\u6743\u503c\u4e4b\u548c**\u3002\u7136\u540e\u6211\u4eec\u8003\u8651\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u8fd9\u8d27\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u4ee5 DFS \u5e8f\u4e3a\u4e0b\u6807\uff0c\u5982\u679c\u4e00\u4e2a\u53f6\u8282\u70b9\u5b58\u5728\u5219\u8868\u793a\u5176\u8868\u793a\u7684\u533a\u95f4\u7684 DFS \u5e8f\u5728\u8be5\u8282\u70b9\u7684\u5b50\u6811\u5185\u5b58\u5728\uff0c\u7136\u540e\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\uff0c\u7ef4\u62a4\u8be5\u533a\u95f4\u4e2d\uff0c\u5728 SAM \u4e0a\u5b58\u5728\u7684 DFS \u5e8f\u7684\u6700\u5c0f\u503c\u3001\u6700\u5927\u503c\uff0c\u4ee5\u53ca\u4e24\u4e24\u4e4b\u95f4\u7684\u8ddd\u79bb\u548c\uff0c\u6bcf\u6b21\u8f6c\u79fb\u65f6\u5c06\u4e00\u4e2a\u70b9\u4e3a\u6839\u7684\u7ebf\u6bb5\u6811\u4e0e\u5176\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u4e00\u6ce2\u5373\u53ef\u7b97\u51fa\u7b54\u6848\u3002\u521d\u59cb\u72b6\u6001\u5927\u6982\u5c31\u5bf9\u4e8e\u6240\u6709 $i\\in[1,n-2]$\uff0c\u6211\u4eec\u627e\u51fa\u957f\u5ea6\u4e3a $i$\u200b \u7684\u524d\u7f00\u5728\u539f\u4e32 SAM \u4e0a\u8868\u793a\u7684\u8282\u70b9\uff0c\u8bbe\u5176\u4e3a $x$\uff0c\u7136\u540e\u5047\u8bbe $s[i+2\u2026n]$ \u5728\u53cd\u4e32\u4e0a\u8868\u793a\u7684\u8282\u70b9\u4e3a $y$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06 $y$ \u5728\u53cd\u4e32\u4e0a\u7684 DFS \u5e8f\u52a0\u5165 $x$ \u8868\u793a\u7684\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\u4f7f\u7528 ST \u8868\u6c42 LCA \u53ef\u4ee5\u5b9e\u73b0 $\\mathcal O(n\\log n)$ \u7684\u590d\u6742\u5ea6\u3002\n\n```cpp\nconst int MAXN=1e5;\nconst int MAXP=2e5;\nconst int MAX_ND=MAXP<<5;\nconst int LOG_N=19;\nchar str[MAXN+5];int n;\nstruct graph{\n\tint hd[MAXP+5],to[MAXP+5],nxt[MAXP+5],ec=0;\n\tvoid adde(int u,int v){to[++ec]=v;nxt[ec]=hd[u];hd[u]=ec;}\n};\nstruct SAM{\n\tstruct node{int ch[27],len,lnk;} s[MAXP+5];\n\tint cur,ncnt,ed[MAXN+5];graph t;\n\tSAM(){cur=ncnt=1;}\n\tvoid extend(char c,int ps){\n\t\tint id=c-'a',nw=++ncnt,p=cur;\n\t\ts[nw].len=s[cur].len+1;ed[ps]=nw;cur=nw;\n\t\twhile(p&&!s[p].ch[id]) s[p].ch[id]=nw,p=s[p].lnk;\n\t\tif(!p) return s[nw].lnk=1,void();\n\t\tint q=s[p].ch[id];\n\t\tif(s[q].len==s[p].len+1) return s[nw].lnk=q,void();\n\t\tint cl=++ncnt;s[cl].len=s[p].len+1;\n\t\ts[cl].lnk=s[q].lnk;s[q].lnk=cl;s[nw].lnk=cl;\n\t\tfor(int i=0;i<26;i++) s[cl].ch[i]=s[q].ch[i];\n\t\twhile(p&&s[p].ch[id]==q) s[p].ch[id]=cl,p=s[p].lnk;\n\t}\n\tvoid build(){for(int i=2;i<=ncnt;i++) t.adde(s[i].lnk,i);}\n\tll calc(){\n\t\tll res=0;\n\t\tfor(int i=1;i<=ncnt;i++) res+=s[i].len-s[s[i].lnk].len;\n\t\treturn res;\n\t}\n} s_tot,fw,bk;//forward backward\n#define g1 fw.t\n#define g2 bk.t\nint dep[MAXP+5];pii st[MAXP*2+5][LOG_N+2];\nint dfn[MAXP+5],rid[MAXP+5],tim=0,eul[MAXP+5],tim_eul=0;\nvoid dfs0(int x,int f){\n\trid[dfn[x]=++tim]=x;\n\tst[eul[x]=++tim_eul][0]=mp(dep[x],x);\n\tfor(int e=g2.hd[x];e;e=g2.nxt[e]){\n\t\tint y=g2.to[e];if(y==f) continue;\n\t\tdep[y]=dep[x]+1;dfs0(y,x);\n\t\tst[eul[x]=++tim_eul][0]=mp(dep[x],x);\n\t}\n}\nint getlca(int x,int y){\n\tx=eul[x];y=eul[y];if(x>y) swap(x,y);\n\tint k=31-__builtin_clz(y-x+1);\n\treturn min(st[x][k],st[y-(1<<k)+1][k]).se;\n}\nint getdis(int x,int y){\n\tint lc=getlca(x,y);\n\treturn bk.s[x].len+bk.s[y].len-(bk.s[lc].len<<1);\n}\nstruct data{\n\tint lc,lft,rit;ll sum;\n\tdata(int _lc=0,int _lft=0,int _rit=0,ll _sum=0):\n\t\tlc(_lc),lft(_lft),rit(_rit),sum(_sum){}\n\tdata operator +(const data &rhs){\n\t\tif(!lc) return rhs;\n\t\tif(!rhs.lc) return data(lc,lft,rit,sum);\n\t\treturn data(getlca(lc,rhs.lc),lft,rhs.rit,\n\t\tsum+rhs.sum+getdis(rid[rit],rid[rhs.lft]));\n\t}\n};\nnamespace segtree{\n\tstruct node{int ch[2];data d;} s[MAX_ND+5];\n\tint ncnt=0;\n\tvoid pushup(int k){s[k].d=s[s[k].ch[0]].d+s[s[k].ch[1]].d;}\n\tvoid insert(int &k,int l,int r,int x){\n\t\tif(!k) k=++ncnt;if(l==r) return s[k].d=data(rid[x],x,x,0),void();\n\t\tint mid=l+r>>1;\n\t\t(x<=mid)?insert(s[k].ch[0],l,mid,x):insert(s[k].ch[1],mid+1,r,x);\n\t\tpushup(k);\n\t}\n\tint merge(int x,int y,int l,int r){\n\t\tif(!x||!y) return x+y;int z=++ncnt;\n\t\tif(l==r) return s[z].d=data(rid[l],l,l,0),z;\n\t\tint mid=l+r>>1;\n\t\ts[z].ch[0]=merge(s[x].ch[0],s[y].ch[0],l,mid);\n\t\ts[z].ch[1]=merge(s[x].ch[1],s[y].ch[1],mid+1,r);\n\t\treturn pushup(z),z;\n\t}\n}\nusing segtree::insert;\nusing segtree::merge;\nint rt[MAXP+5];ll res=0;\nvoid dfs(int x,int f){\n\tfor(int e=g1.hd[x];e;e=g1.nxt[e]){\n\t\tint y=g1.to[e];if(y==f) continue;\n\t\tdfs(y,x);rt[x]=merge(rt[x],rt[y],1,bk.ncnt);\n\t} data d=segtree::s[rt[x]].d;\n\tif(d.lc) res+=1ll*(fw.s[x].len-fw.s[fw.s[x].lnk].len)*\n\t(d.sum+getdis(rid[d.lft],rid[d.rit])+(getdis(d.lc,1)<<1));\n}\nint main(){\n\tscanf(\"%s\",str+1);n=strlen(str+1);\n\tfor(int i=1;i<=n;i++) s_tot.extend(str[i],/*19260817*/i);\n\tfor(int i=1;i<n;i++) fw.extend(str[i],i);\n\tfor(int i=n;i>1;i--) bk.extend(str[i],i);\n\tfw.build();bk.build();\n\tdfs0(1,0);\n\tfor(int i=1;i<=LOG_N;i++) for(int j=1;j+(1<<i)-1<=tim_eul;j++)\n\t\tst[j][i]=min(st[j][i-1],st[j+(1<<i-1)][i-1]);\n\tfor(int i=1;i<n-1;i++) insert(rt[fw.ed[i]],1,bk.ncnt,dfn[bk.ed[i+2]]);\n\tdfs(1,0);res>>=1;res+=2+s_tot.calc()+fw.calc()+bk.calc();\n\tprintf(\"%lld\\n\",res);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1629372510,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1276F Asterisk Substrings"
    }
]