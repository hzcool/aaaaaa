[
    {
        "content": "### \u524d\u8a00\n\n[cnblogs](https://www.cnblogs.com/CM-0728/p/14614757.html)\n\n### Solution\n\n\u8003\u8651 **\u4e8c\u5206** \u3002\n\n\u9996\u5148\u8981\u786e\u5b9a\u4e8c\u5206\u7684\u5bf9\u8c61\uff0c\u663e\u7136\u4e8c\u5206\u5929\u6570\u8f83\u4e3a\u7b80\u5355\u3002\n\n\u6bcf\u6b21\u627e\u5230\u7684 $mid$ \u9700\u8981\u5224\u65ad\u662f\u5426\u80fd\u8ba9\u6574\u961f\u4eba\u5403\u9971\uff0c\u90a3\u5c31\u8c03\u7528\u4e00\u4e2a `check()` \u3002\n\n\u5bf9\u4e8e `check()` \uff0c\u6c42\u51fa\u6bcf\u5305\u98df\u7269\u53ef\u4f9b\u7684\u4eba\u6570\uff0c\u76f8\u52a0\u540e\u4e0e $n$ \u76f8\u6bd4\u8f83\u3002\n\n\u5177\u4f53\u64cd\u4f5c\u89c1\u4e0b\u3002\n\n### Code\n\n```cpp\n#include<iostream>\nusing namespace std;\n#define ll long long\n#define max(x,y) x>y?x:y\nll n,m,l=1,r,a[1005],q[100005],d,o,mid,b;\ninline bool check(int x)//\u5224\u65ad\n{\n\tll t=0;\n\tfor(int i=1;i<=d;++i)\n\t\tt+=q[i]/x;\n\treturn t>=n;//\u80fd\u5426\u4f9b\u5e94\u9700\u6c42\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;++i)\n\t\tcin>>a[i],++q[a[i]],d=max(d,a[i]),b=max(b,q[a[i]]);\n\tr=b;//\u786e\u5b9a\u53f3\u8fb9\u754c\n\twhile(l<=r)//\u4e8c\u5206\n\t{\n\t\tmid=(l+r)/2;\n\t\tif(check(mid))\n\t\t\tl=mid+1,o=mid;\n\t\telse r=mid-1;\n\t}\n\tcout<<o<<\"\\n\";\n\treturn 0;\n}\n```\n",
        "postTime": 1617454113,
        "uid": 186034,
        "name": "Callous_Murder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1011B  Planning The Expedition"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ef\u4ee5\u660e\u663e\u770b\u5f97\u51fa\u4e3b\u8981\u7528\u7684\u662f**\u4e8c\u5206**\n\n\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u4e8c\u5206\u5462?\n\n\u9996\u5148\u6211\u4eec\u4f1a\u53d1\u73b0\u6211\u4eec\u8981**\u4e8c\u5206\u7684\u662f\u6700\u591a\u80fd\u575a\u6301\u7684\u5929\u6570**\n\n\u4e0d\u96be\u53d1\u73b0,\u4e8c\u5206\u7684 $r$\u7684\u521d\u59cb\u503c\u662f\u51fa\u73b0\u6700\u591a\u7684\u98df\u7269\u7684\u51fa\u73b0\u6b21\u6570\n\n\u6211\u4eec**\u53ea\u9700\u8981\u7528\u4e8c\u5206\u679a\u4e3e\u4e00\u4e0b,\u518d\u5224\u65ad\u6bcf\u4e00\u4e2a\u679a\u4e3e\u5230\u7684\u503c\u662f\u5426\u53ef\u884c\u5373\u53ef**\n\n\u6211\u4eec\u53ef\u4ee5\u7a0d\u5fae\u8ba1\u7b97\u4e00\u4e0b\u590d\u6742\u5ea6\uff1a$100*log(100)$\u662f\u6839\u672c\u4e0d\u4f1a\u8d85\u65f6\u7684\n\n\u56e0\u6b64\u6709\u4e86\u5982\u4e0b\u4ee3\u7801:\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint mps[100005], ansn;\nint t[100005];\nint n, k, ans, maxans;\nbool check(int x) {//\u5224\u65ad\u662f\u5426\u53ef\u884c\n\tint l = 0;\n\tfor(int i = 1;i <= maxans;i++) {\n\t\tl += t[i] / x;//\u6bcf\u4e00\u79cd\u98df\u7269\u80fd\u591f\u7ef4\u6301\u591a\u5c11\u4e2a\u4eba\u7684\u751f\u547d\n\t}\n\tif(l < n) {//\u52a0\u8d77\u6765\u6ca1\u5230\u603b\u4eba\u6570\u7684\u8bdd......\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n\tcin >> n >> k;\n\tfor(int i = 1;i <= k;i++) {\n\t\tcin >> mps[i];\n\t\tt[mps[i]] ++;\n\t\tmaxans = max(maxans, mps[i]);//\u6700\u5927\u7684\u98df\u7269\u7f16\u53f7,\u65b9\u4fbfcheck\u51fd\u6570\u679a\u4e3e\n\t\tans = max(ans, t[mps[i]]);//\u627e\u5230\u4e8c\u5206\u4e2d\u7684r,\u89c1\u4e0a\u9762\u89e3\u91ca\n\t}\n\tint l = 1, r = ans;\n\twhile(l <= r) {//\u4e8c\u5206\n\t\tint mid = (l+r) / 2;\n\t\tif(check(mid)) {\n\t\t\tansn = mid;\n\t\t\tl = mid+1;\n\t\t}\n\t\telse {\n\t\t\tr = mid-1;\n\t\t}\n\t}\n\tcout << ansn << endl;\n}\n```\n",
        "postTime": 1612400495,
        "uid": 128221,
        "name": "BYWYR",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF1011B \u3010Planning The Expedition\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u672c\u849f\u84bb\u5148\u7279\u5224\u4e86\u4e00\u4e22\u4e22~\n\n\u8981\u662f\u4eba\u6bd4\u98df\u7269\u591a\uff0c\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa0\uff0c\u5b8c\u5168\u4e0d\u591f\u561b\u3002\n\n\u8981\u662f\u4eba\u548c\u98df\u7269\u4e00\u6837\u591a\uff0c\u90a3\u5c31\u8f93\u51fa1\n\n\u7136\u540e\u5f00\u59cb\u627e\u6b63\u89e3\u4e86\u3002\n\n\u9996\u5148\u53e6\u5f00\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u79cd\u98df\u7269\u51fa\u73b0\u6b21\u6570\n\n\u518d\u6162\u6162\u4ece1\u5f00\u59cb\u5230\u6700\u5927\u5b58\u6d3b\u5929\u6570\uff0c\u679a\u4e3e\u4e0b\u53bb\uff0c\n\u7136\u540e\u5b9a\u4e49sum\u7d2f\u52a0\u6bcf\u4e00\u7c7b\u98df\u7269\u591f\u591a\u5c11\u5929\uff08for i,1~\u6700\u5927\u98df\u7269\u7684\u6570\u5b57\uff09\n\u82e5\u53d1\u73b0\u6b64\u65f6sum\u4ecd\u5927\u4e8en\uff0c\u5373\u4ecd\u53ef\u4ee5\u6d3b\u4e0b\u53bb\uff0c\u5c31\u66f4\u65b0ans\u4e3ai\uff0c\u82e5\u4e0d\u6ee1\u8db3\uff0c\u76f4\u63a5\u9000\u7c97\u8f93\u51fa\u5373\u53ef\n\n\u6700\u540e\uff0c\u9644\u4e0a~~\u5927\u5988~~\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define R register\n#define num ch-'0'\nusing namespace std;\nvoid read(int &res){    //\u8bfb\u5165\u4f18\u5316\u4e0d\u5fc5\u5728\u610f\n    char ch;bool flag=0;\n    while(!isdigit(ch=getchar()))\n        (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getchar());res=res*10+num);\n    (flag)&&(res=-res);\n}\nint Tim[200],x,Max,maxnum=-0x3fffff;\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    if(n>m){\n        putchar('0');\n        return 0;\n    }\n    if(n==m){\n        putchar('1');\n        return 0;\n    }\n    for(R int i=1;i<=m;i++){\n        read(x);\n        maxnum=max(maxnum,x);\n        Tim[x]++;\n    }\n    for(R int i=1;i<=100;i++){\n        int sum=0;\n        for(R int j=1;j<=maxnum;j++) sum+=(Tim[j]/i);\n        if(sum>=n) Max=i;\n        else{\n\t\t    printf(\"%d\",Max);\n\t\t    return 0;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1546656709,
        "uid": 48154,
        "name": "c20191623",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF1011B \u3010Planning The Expedition\u3011"
    },
    {
        "content": "#### \u4e8c\u5206\u7b54\u6848 + \u6a21\u62df\n\n\u5148\u5c06\u6240\u6709\u7684\u98df\u7269\u8bfb\u5165\uff0c\u7528\u7c7b\u4f3c\u4e8e\u6876\u6392\u5e8f\u7684\u65b9\u6cd5\u5b58\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\n\n\u7136\u540e\u4e8c\u5206\u4e00\u4e0b\u5929\u6570\uff0c\u68c0\u67e5\u662f\u5426\u53ef\u884c\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u786e\u5b9a\u7684\u5929\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u8d2a\u5fc3\u7684\u65b9\u6cd5\u6a21\u62df\u68c0\u67e5\uff1a\u9996\u5148\u5c06\u98df\u7269\u6392\u5e8f\uff0c\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u4ee3\u8868\u7740\u8fd9\u79cd\u98df\u7269_\u5269\u4f59\u7684_\u6570\u91cf\u3002\u521b\u5efa\u4e00\u4e2a\u6307\u9488\u6307\u5411\u6570\u7ec4\u76840\u53f7\u5355\u5143\uff0c\u8fd9\u65f6\u5224\u65ad\u6307\u9488\u6307\u5411\u7684\u6570\u662f\u5426\u5927\u4e8e\u8fd9\u4e2a\u5929\u6570\uff0c\u4e5f\u5c31\u662f\u8fd9\u79cd\u7c7b\u578b\u7684\u98df\u7269\u662f\u5426\u8fd8\u591f\u4e00\u4e2a\u4eba\u5403\u4e0a\u8fd9\u4e48\u591a\u5929\uff0c\u5982\u679c\u591f\uff0c\u4eba\u6570\u51cf\u4e00\uff0c\u8fd9\u79cd\u98df\u7269\u5269\u4f59\u91cf\u51cf\u53bb\u5929\u6570\uff0c\u5982\u679c\u4e0d\u591f\uff0c\u6307\u9488\u540e\u79fb\u3002\u7279\u522b\u5730\uff0c\u5982\u679c\u4eba\u6570\u7b49\u4e8e0\u8bf4\u660e\u53ef\u884c\uff0c\u6307\u9488\u8d85\u51fa\u6570\u7ec4\u8303\u56f4\u53cd\u4e4b\u3002\n\n\u4e0a\u4f2a\u4ee3\u7801\uff1a\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace CF1011B\n{\n    class Program\n    {\n        public static int _cmp(int a,int b) {\n            if (a == b) return 0;\n            else if (a > b) return -1;\n            else return 1;\n        }\n\n        public static bool canSolve(int[] food, int days, int totPeo) {\n            int now = 0;\n            while (totPeo > 0) {\n                while (food[now] < days)\n                    if (++now > 100) return false;\n                food[now] -= days;\n                totPeo--;\n            }\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            int totNums, totParticipant;\n\n            string inp = Console.ReadLine(); string[] div;\n            div = inp.Split(' ');\n            totNums = Convert.ToInt32(div[1]);totParticipant = Convert.ToInt32(div[0]);\n\n            int[] num = new int[101];\n            for (int i = 0; i < 101; i++) num[i] = 0;\n            inp = Console.ReadLine();div = inp.Split(' ');\n            for (int i = 0; i < totNums; i++)\n                num[Convert.ToInt32(div[i]) - 1]++;\n\n            Array.Sort(num, _cmp);\n\n            int fr = 0, to = 101, mid;\n            int[] fd = new int[101];\n            while (fr < to) {\n                mid = ((fr + to) >> 1) + 1;\n                for (int i = 0; i < 101; i++) fd[i] = num[i];\n                if (canSolve(fd, mid, totParticipant)) fr = mid;\n                else to = mid - 1;\n            }\n            Console.WriteLine(fr.ToString());\n        }\n    }\n}\n```",
        "postTime": 1533195528,
        "uid": 78371,
        "name": "Mickey_snow",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1011B \u3010Planning The Expedition\u3011"
    },
    {
        "content": "```cpp\n// \u601d\u8def\uff1a\u5148\u9884\u5904\u7406\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u6570\u5171\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u7136\u540e\u679a\u4e3e\u5408\u6cd5\u7684\u5929\u6570\n#include <iostream>\n#include <unordered_map>\n\nint main()\n{\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    std::cout.tie(nullptr);\n\n    int n, m;\n    std::cin >> n >> m;\n\n    if (n > m)  // \u50e7\u591a\u7ca5\u5c11\uff0c\u660e\u663e\u4e00\u5929\u90fd\u8d70\u4e0d\u52a8\n    {\n        std::cout << 0 << std::endl;\n    }\n    else if (n == m)    // \u521a\u597d\u76f8\u7b49\uff0c\u4e00\u4eba\u4e00\u53e3\uff0c\u4e00\u5929\u5403\u5b8c\n    {\n        std::cout << 1 << std::endl;\n    }\n    else\n    {\n        std::unordered_map<int, int> Map;\n        for (int i = 0; i < m; ++i) // \u7edf\u8ba1\u6bcf\u4e2a\u6570\u5404\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\n        {\n            int t;\n            std::cin >> t;\n            ++Map[t];\n        }\n\n        for (int k = m / n; k >= 1; --k)    // \u679a\u4e3e\u5408\u6cd5\u7684\u5929\u6570\uff08k\u4ee3\u8868\u5929\u6570\uff09\uff0c\u6700\u9ad8\u53ea\u80fd\u662f(m / n)\u5929\n        {\n            int Tol = 0;\n            for (const auto &r : Map)\n            {\n                Tol += r.second / k;\n            }\n\n            if (Tol >= n)   // \u4e00\u65e6\u9047\u5230\u4e00\u4e2a\u5408\u6cd5\u7684\u5c31\u9000\u51fa\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4ece\u9ad8\u5411\u4f4e\u679a\u4e3e\u7684\n            {\n                std::cout << k << std::endl;\n\n                break;\n            }\n        }\n    }\n\n    return 0;\n}\n```",
        "postTime": 1532703470,
        "uid": 59062,
        "name": "\u5c0f\u95f8\u87f9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1011B \u3010Planning The Expedition\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ef\u4ee5\u660e\u663e\u770b\u5f97\u51fa\u4e3b\u8981\u7528\u7684\u662f\u4e8c\u5206\n\n\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u4e8c\u5206\u5462?\n\n\u9996\u5148\u6211\u4eec\u4f1a\u53d1\u73b0\u6211\u4eec\u8981\u4e8c\u5206\u7684\u662f\u6700\u591a\u80fd\u575a\u6301\u7684\u5929\u6570\n\n\u4e0d\u96be\u53d1\u73b0,\u4e8c\u5206\u7684 $r$ \u7684\u521d\u59cb\u503c\u662f\u51fa\u73b0\u6700\u591a\u7684\u98df\u7269\u7684\u51fa\u73b0\u6b21\u6570\n\n\u6211\u4eec\u53ea\u9700\u8981\u7528\u4e8c\u5206\u679a\u4e3e\u4e00\u4e0b,\u518d\u5224\u65ad\u6bcf\u4e00\u4e2a\u679a\u4e3e\u5230\u7684\u503c\u662f\u5426\u53ef\u884c\u5373\u53ef\n\n\u6211\u4eec\u53ef\u4ee5\u7a0d\u5fae\u8ba1\u7b97\u4e00\u4e0b\u590d\u6742\u5ea6\uff1a\n\n$ 100 * log(100)$ \u662f\u6839\u672c\u4e0d\u4f1a\u8d85\u65f6\u7684\n\n\u56e0\u6b64\u6709\u4e86\u5982\u4e0b\u4ee3\u7801:\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nint mps[100005], ansn;\nint t[100005];\nint n, k, ans, maxans;\nbool check(int x) {//\u5224\u65ad\u662f\u5426\u53ef\u884c\n\tint l = 0;\n\tfor(int i = 1;i <= maxans;i++) {\n\t\tl += t[i] / x;//\u6bcf\u4e00\u79cd\u98df\u7269\u80fd\u591f\u7ef4\u6301\u591a\u5c11\u4e2a\u4eba\u7684\u751f\u547d\n\t}\n\tif(l < n) {//\u52a0\u8d77\u6765\u6ca1\u5230\u603b\u4eba\u6570\u7684\u8bdd......\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n\tcin >> n >> k;\n\tfor(int i = 1;i <= k;i++) {\n\t\tcin >> mps[i];\n\t\tt[mps[i]] ++;\n\t\tmaxans = max(maxans, mps[i]);//\u6700\u5927\u7684\u98df\u7269\u7f16\u53f7,\u65b9\u4fbfcheck\u51fd\u6570\u679a\u4e3e\n\t\tans = max(ans, t[mps[i]]);//\u627e\u5230\u4e8c\u5206\u4e2d\u7684r,\u89c1\u4e0a\u9762\u89e3\u91ca\n\t}\n\tint l = 1, r = ans;\n\twhile(l <= r) {//\u4e8c\u5206\n\t\tint mid = (l+r) / 2;\n\t\tif(check(mid)) {\n\t\t\tansn = mid;\n\t\t\tl = mid+1;\n\t\t}\n\t\telse {\n\t\t\tr = mid-1;\n\t\t}\n\t}\n\tcout << ansn << endl;\n}\n```\n",
        "postTime": 1604928545,
        "uid": 141599,
        "name": "sinsop90",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1011B \u3010Planning The Expedition\u3011"
    }
]