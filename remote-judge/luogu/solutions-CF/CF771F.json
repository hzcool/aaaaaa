[
    {
        "content": "[portal](https://www.luogu.com.cn/problem/CF771F)\n\n------\n\n\u624b\u73a9\u4e00\u4f1a\u53d1\u73b0\u7ed3\u679c\u53ef\u80fd\u662f\u4e00\u4e2a\u5f88\u590d\u6742\u7684\u591a\u8fb9\u5f62\u3002\u90a3\u4e48\u8fd9\u662f\u663e\u7136\u4e0d\u53ef\u80fd\u7528\u8d2a\u5fc3/\u4e8c\u5206\u4e4b\u7c7b\u5904\u7406\u7684\uff1b\u6211\u4eec\u4e8e\u662f\u9075\u5faa\u6700\u66b4\u529b\u7684\u60f3\u6cd5\uff0c\u76f4\u63a5\u6765\u8003\u8651\u534a\u5e73\u9762\u4ea4\u3002\n\n\u66b4\u529b\u7684\u534a\u5e73\u9762\u4ea4\u662f\u679a\u4e3e\u6bcf\u5bf9 $2\\leq i<j\\leq n$\uff0c\u5224\u5b9a $p_1$ \u5728\u7ecf\u8fc7 $p_i,p_j$ \u7684\u76f4\u7ebf\u7684\u54ea\u4e00\u4fa7\uff0c\u5e76\u4fdd\u7559\u8be5\u4fa7\u7684\u534a\u5e73\u9762\u3002\n\n\u8fd9\u4e48\u66b4\u529b\u7684\u8bdd\uff0c\u6211\u4eec\u53d1\u73b0\u5171\u6709\u5e73\u65b9\u6761\u76f4\u7ebf\u3002\n\n\u4f46\u662f\uff0c\u6211\u4eec\u6709\u4e00\u79cd\u6734\u7d20\u7684\u4f18\u5316\u65b9\u5f0f\uff1a\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $p_i$\uff0c\u4ee5\u5176\u4e3a\u539f\u70b9\u5c06\u6240\u6709\u70b9\u6781\u89d2\u6392\u5e8f\uff0c\u5219\u4ee4\u6392\u5e8f\u540e\u5728 $p_1$ \u5de6\u53f3\u4e24\u4fa7\u7684\u70b9\u4e3a $p_j$\uff0c\u5219\u6bcf\u4e2a\u70b9\u90fd\u4ec5\u4f1a\u8d21\u732e\u4e24\u6761\u76f4\u7ebf\uff0c\u603b\u5171\u7684\u76f4\u7ebf\u6570\u662f $O(n)$ \u7684\u3002\n\n\u8fd9\u6837\u505a\u867d\u7136\u590d\u6742\u5ea6\u8fd8\u662f\u5e73\u65b9\u5f80\u4e0a\u7684\uff0c\u4f46\u662f\u81f3\u5c11\u4e3a\u6211\u4eec\u8bc1\u660e\u4e86\uff0c\u53ea\u6709 $O(n)$ \u6761\u76f4\u7ebf\u4f1a\u6700\u7ec8\u88ab\u7528\u5728\u534a\u5e73\u9762\u4ea4\u7684\u8fb9\u754c\u4e0a\u3002\u8fd9\u4e3a\u6211\u4eec\u51cf\u5c11\u76f4\u7ebf\u6570\u91cf\u7684\u5c1d\u8bd5\u6253\u4e0b\u4e86\u7406\u8bba\u57fa\u7840\u3002\n\n\u6211\u4eec\u8003\u8651\u4ee5 $p_1$ \u4e3a\u539f\u70b9\uff0c\u628a\u6240\u6709\u70b9\u6781\u89d2\u6392\u5e8f\u3002\n\n> Claim: \u6211\u4eec\u53ea\u9700\u4fdd\u7559\u6240\u6709\u5982\u4e0b\u76f4\u7ebf\uff1a\n>\n> - \u8fde\u63a5\u6392\u5e8f\u540e\u76f8\u90bb\u70b9\u95f4\u7684\u76f4\u7ebf\u3002\n> - \u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u8003\u8651\u5176\u4e0e $p_1$ \u7684\u8fde\u7ebf\uff1b\u5219\u8fde\u63a5\u8be5\u70b9\u4e0e **\u4e0a\u8ff0\u8fde\u7ebf\u5de6\u53f3\u9996\u4e2a\u70b9** \u95f4\u7684\u76f4\u7ebf\u90fd\u662f\u9700\u88ab\u8003\u8651\u7684\u3002\uff08\u4e5f\u5373\uff0c\u4e0e\u8be5\u70b9 **\u5173\u4e8e $p_1$ \u51e0\u4e4e\u5bf9\u79f0** \u7684\u70b9\uff09\n\n\u8fd9\u663e\u7136\u4ec5\u4fdd\u7559\u4e86 $O(n)$ \u6761\u76f4\u7ebf\u3002\u52a0\u5165\u56db\u6761 $10^6$ \u5904\u8fb9\u754c\u7ebf\u7136\u540e\u4e00\u8d77\u6c42\u534a\u5e73\u9762\u4ea4\uff0c\u590d\u6742\u5ea6\u7ebf\u6027\u5bf9\u6570\u3002\n\n\u4e0b\u9762\u6211\u4eec\u6765\u8bc1\u660e\u4e00\u4e0b\u8fd9\u4e2a\u505a\u6cd5\u7684\u6b63\u786e\u6027\u3002\n\n> Definition 1.\u79f0\u4e00\u6761\u7ecf\u8fc7\u70b9 $p_i,p_j$ \u7684\u76f4\u7ebf\u201c\u88ab\u8003\u8651\u5230\u201d\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e0b\u5217\u4e24\u4e2a\u6761\u4ef6\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u88ab\u6ee1\u8db3\uff1a\n>\n> - \u5176\u88ab\u4fdd\u7559\u4e86\u3002\n>\n> - \u5b58\u5728\u4e00\u4e2a\u70b9 $P$\uff0c\u6ee1\u8db3 $P$ \u5728 $\\triangle_{p_1,p_i,p_j}$ \u5185\u90e8\uff0c\u4e14\u76f4\u7ebf $p_i,P$ \u4e0e\u76f4\u7ebf $p_j,P$ \u5747\u88ab\u8003\u8651\u5230\u3002\n>\n>     \u6ce8\u610f\u5230\u8fd9\u91cc\u7684 $P$ \u4e0d\u4e00\u5b9a\u662f\u7ed9\u5b9a\u70b9\u96c6\u4e2d\u7684\u67d0\u4e2a\u70b9\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u67d0\u4e24\u6761\u76f4\u7ebf\u7684\u4ea4\u70b9\u3002\u4f46\u53ea\u8981\u4e0a\u8ff0\u4e24\u6761\u76f4\u7ebf\u662f\u771f\u5b9e\u5b58\u5728\u7684\u76f4\u7ebf\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u58f0\u79f0 $p_i,p_j$ \u4e5f\u88ab\u8003\u8651\u5230\u4e86\u3002\n>\n> \u6ce8\u610f\u5230\u8fd9\u4e2a\u201c\u88ab\u8003\u8651\u5230\u201d\u7684\u5b9e\u9645\u610f\u4e49\u662f **\u8981\u4e48\u88ab\u4fdd\u7559\uff0c\u8981\u4e48\u88ab\u4e00\u4e9b\u88ab\u8003\u8651\u5230\u7684\u534a\u5e73\u9762\u4ea4\u8986\u76d6**\u3002\n\n\u5219\u6bcf\u6761\u76f4\u7ebf\u90fd\u88ab\u8003\u8651\u5230\u662f\u4e0a\u8ff0\u7b97\u6cd5\u6b63\u786e\u7684\u5145\u5206\u6761\u4ef6\u3002\n\n\u4e0a\u8ff0\u7b97\u6cd5\u6ee1\u8db3\u8be5\u6761\u4ef6\u5417\uff1f\u6ce8\u610f\u5230\u8fd9\u4e2a\u6761\u4ef6\u662f\u9012\u5f52\u5b9a\u4e49\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u81ea\u7136\u8003\u8651\u5f52\u7eb3\u8bc1\u660e\u3002\n\n\u5f52\u7eb3\u5047\u8bbe\u662f\uff0c\u6240\u6709\u6392\u5e8f\u540e\u6807\u53f7\u5dee\u4e0d\u8d85\u8fc7 $K$ \u7684\u76f4\u7ebf\u90fd\u88ab\u8003\u8651\u5230\u4e86\uff0c\u5219\u7ed3\u8bba\u662f\u6240\u6709\u6807\u53f7\u5dee\u4e0d\u8d85\u8fc7 $K+1$ \u7684\u76f4\u7ebf\u90fd\u88ab\u8003\u8651\u5230\u4e86\u3002\u663e\u7136 $K=1$ \u65f6\u6240\u6709\u76f4\u7ebf\u90fd\u88ab\u8003\u8651\u5230\u4e86\uff0c\u6545\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u5f52\u7eb3\u3002\n\n\u8003\u8651\u4e00\u6761\u76f4\u7ebf $p_i,p_j$\u3002\n\n\u5047\u5982\u5b58\u5728 $k\\in(i,j)$ \u6ee1\u8db3 $p_k$ \u4e0e $p_1$ \u5728\u76f4\u7ebf $p_i,p_j$ \u540c\u4fa7\uff0c\u5219\u56e0\u4e3a\u5df2\u6309\u7167\u6781\u89d2\u6392\u5e8f\uff0c\u6240\u4ee5 $k$ \u5fc5\u5728 $\\triangle_{p_1,p_i,p_j}$ \u5185\u90e8\uff0c\u8fdb\u800c $p_i,p_k$ \u4e0e $p_j,p_k$ \u4f9d\u7167\u5f52\u7eb3\u5047\u8bbe\u90fd\u8003\u8651\u5230\u4e86\uff0c\u8fdb\u800c\u6309\u7167\u201c\u88ab\u8003\u8651\u5230\u201d\u7684\u5b9a\u4e49 $p_i,p_j$ \u4e5f\u88ab\u8003\u8651\u5230\u4e86\u3002\n\n\u5426\u5219\uff0c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684 $k$\uff0c\u4e5f\u5373\u6240\u6709\u7684 $k\\in(i,j)$ \u90fd\u4e0e $p_1$ \u5173\u4e8e $p_i,p_j$ \u5f02\u4fa7\u3002\n\n\u5219\u56e0\u4e3a\u533a\u95f4\u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u70b9\uff0c\u753b\u51fa\u56fe\u6765\u5c31\u4f1a\u53d1\u73b0\uff0c\u6b64\u65f6\u76f4\u7ebf $p_i,p_j$ \u4e2d **\u4ec5\u6709\u7ebf\u6bb5 $p_i,p_j$ \u7684\u90e8\u5206\u672a\u88ab\u8986\u76d6**\u3002\n\n\u800c\u53ea\u9700\u627e\u5230 $p_i$ \u5173\u4e8e $p_1$ \u51e0\u4e4e\u5bf9\u79f0\u7684\u70b9\uff0c\u5c31\u80fd\u53d1\u73b0\uff1a\u8be5\u76f4\u7ebf\u8981\u4e48\u5c31\u662f $p_i,p_j$ \u672c\u8eab\uff0c\u8981\u4e48\u5b8c\u5168\u8986\u76d6\u7ebf\u6bb5 $p_i,p_j$\u3002\n\n\u6545\u8be5\u76f4\u7ebf\u5fc5\u7136\u88ab\u8003\u8651\u4e86\u3002\u5f52\u7eb3\u6210\u7acb\u3002\n\n\u590d\u6742\u5ea6\u7ebf\u6027\u5bf9\u6570\u3002\n\n\u9700\u8981\u7279\u5224\u4e00\u4e0b\u662f\u5426\u5b58\u5728 $p_i,p_j$ \u4e0e $p_1$ \u4e09\u70b9\u5171\u7ebf\u3002\u5047\u5982\u5b58\u5728\u4e09\u70b9\u5171\u7ebf\uff0c\u5219\u7b54\u6848\u663e\u7136\u4e3a $0$\u3002\n\n\u53e6\uff0c\u672c\u9898\u503c\u57df $10^6$ \u7136\u540e\u7cbe\u5ea6 $10^{-6}$\uff0c\u4e0a\u4e0a\u4e0b\u4e0b $12$ \u4f4d\u7cbe\u5ea6\uff0c`double` \u8fc7\u4e0d\u53bb\uff0c\u6240\u4ee5\u8981\u7528 `long double`\u3002\n\n\u4f46\u662f `long double` \u5e38\u6570\u592a\u5927\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a `int` \u7684\u8ba1\u7b97\u51e0\u4f55\u548c\u4e00\u4e2a `long double` \u7684\u8ba1\u7b97\u51e0\u4f55\uff0c\u7528 `int` \u505a $n\\log n$ \u7684\u6392\u5e8f\u4e4b\u7c7b\uff0c`long double` \u53ea\u5728\u534a\u5e73\u9762\u4ea4\u65f6\u7528\uff0c\u5e38\u6570\u5c31\u4e0b\u53bb\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\nconst ld eps=1e-9;\nint cmp(ld x){if(x>eps)return 1;if(x<-eps)return -1;return 0;}\nstruct VI{\n    int x,y;\n    VI(){}\n    VI(int X,int Y){x=X,y=Y;}\n    friend VI operator+(const VI&u,const VI&v){return VI(u.x+v.x,u.y+v.y);}\n    friend VI operator-(const VI&u,const VI&v){return VI(u.x-v.x,u.y-v.y);}\n    void read(){scanf(\"%d%d\",&x,&y);}\n    void print()const{printf(\"(%d,%d)\",x,y);}\n    friend ll operator&(const VI&u,const VI&v){return 1ll*u.x*v.y-1ll*u.y*v.x;}\n    bool operator!()const{return x>0||x==0&&y>=0;}\n    friend bool operator<(const VI&u,const VI&v){if((!u)!=(!v))return(!u)<(!v);return(u&v)>0;}\n}r[200100],O;\nstruct VD{\n\tld x,y;\n    VD(){}\n    VD(ld X,ld Y){x=X,y=Y;}\n    VD(VI P){x=P.x,y=P.y;}\n    void read(){scanf(\"%Lf%Lf\",&x,&y);}\n    void print()const{printf(\"(%Lf,%Lf)\",x,y);}\n    friend VD operator+(const VD&u,const VD&v){return VD(u.x+v.x,u.y+v.y);}\n    friend VD operator-(const VD&u,const VD&v){return VD(u.x-v.x,u.y-v.y);}\n    friend ld operator&(const VD&u,const VD&v){return u.x*v.y-u.y*v.x;}\n    friend VD operator*(const VD&u,const ld&v){return VD(u.x*v,u.y*v);}\n    friend VD operator/(const VD&u,const ld&v){return VD(u.x/v,u.y/v);}\n}p[600100];\ntypedef VI PI;\ntypedef VD PD;\nstruct Line{//the left side of the line indicates the semiplane\n    PI x,y;\n    VI z;\n    Line(){}\n    Line(PI X,PI Y){x=X,y=Y,z=y-x;}\n    friend PD operator&(const Line&u,const Line&v){\n    \tVD UX(u.x),UZ(u.z),VX(v.x),VZ(v.z);\n\t\treturn UX+UZ*(VZ&(UX-VX)/(UZ&VZ));\n\t}\n    friend bool operator&(const Line&u,const PD&v){return cmp((v-u.x)&u.z)!=1;}\n    friend bool operator|(const Line&u,const Line&v){return!(u.z<v.z)&&!(v.z<u.z);}//whether two lines have same slopes\n    friend bool operator<(const Line&u,const Line&v){if(u|v)return (u.z&(v.y-u.x))<0;return u.z<v.z;}\n    friend bool operator/(const Line&u,const Line&v){return !(u.z&v.z);}\n    void print()const{x.print(),y.print(),z.print(),puts(\"\");}\n}l[600100];\nint T,n,m,q[600100],L,R;\nld area(int _){ld ret=0;for(int i=0;i<_;i++)ret+=p[i]&p[(i+1)%_];return fabs(ret)/2;}\nld Semiplane_Intersection(){\n    // printf(\"%d\\n\",n);\n//    for(int i=0;i<n;i++)l[i].print();\n    sort(l,l+n);\n    q[L=R=0]=0;\n    for(int i=1;i<n;i++){\n        if(l[i]|l[i-1])continue;\n        if(L<R&&( (l[q[L]]/l[q[L+1]]) || (l[q[R]]/l[q[R-1]]) ))return 0;\n        while(L<R&&!(l[i]&p[R-1]))R--;\n        while(L<R&&!(l[i]&p[L]))L++;\n        q[++R]=i;\n        if(L!=R)p[R-1]=(l[q[R]]&l[q[R-1]])/*,printf(\"%d,%d:\",q[R-1],q[R]),p[R-1].print(),puts(\"\")*/;\n    }\n    // for(int i=L;i<=R;i++)printf(\"%d \",q[i]);puts(\"\");\n    while(L<R&&!(l[q[L]]&p[R-1]))R--;\n    while(L<R&&!(l[q[R]]&p[L]))L++;\n    if(R-L+1<=2)return 0;\n    int _=0;\n    for(int i=L;i<R;i++)p[_++]=l[q[i]]&l[q[i+1]];\n    p[_++]=l[q[R]]&l[q[L]];\n    return area(_);\n}\nvoid insert(int i,int j){if((r[i]&r[j])>0)l[n++]=Line(r[i]+O,r[j]+O);else l[n++]=Line(r[j]+O,r[i]+O);}\nvoid mina(){\n\tscanf(\"%d\",&m),n=0,O.read(),m--;\n\tfor(int i=0;i<m;i++)r[i].read(),r[i]=r[i]-O;\n//\tfor(int i=0;i<m;i++)r[i].print();puts(\"\");\n\tsort(r,r+m);\n//\tfor(int i=0;i<m;i++)r[i].print();puts(\"\");\n\tfor(int i=0,j=1;i<m;i++){\n\t\tif(!(r[i]&r[(i+1)%m])){puts(\"0\");return;}\n\t\tinsert(i,(i+1)%m);\n\t\twhile((r[i]&r[j])>0)(++j)%=m;\n//\t\tprintf(\"GUGU:%d,%d,%lld\\n\",i,j,(r[i]&r[j]));\n\t\tif(i==j)continue;\n\t\tif(!(r[i]&r[j])){puts(\"0\");return;}\n\t\tinsert(i,j);\n//\t\tif((j+m-1)%m!=i)insert(i,(j+m-1)%m);\n\t}\n\tPI A(1e6,1e6),B(-1e6,1e6),C(-1e6,-1e6),D(1e6,-1e6);\n\tl[n++]=Line(A,B);\n\tl[n++]=Line(B,C);\n\tl[n++]=Line(C,D);\n\tl[n++]=Line(D,A);\n\tprintf(\"%Lf\\n\",Semiplane_Intersection());\n}\nint main(){scanf(\"%d\",&T);while(T--)mina();return 0;}\n```\n\n",
        "postTime": 1651810593,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF771F\u3010Bear and Isomorphic Points\u3011"
    }
]