[
    {
        "content": "**\u5230\u849f\u84bb\u7684\u535a\u5ba2\u56ed\u91cc\u6765\u8d5e\u8d5e\u6587\u7ae0 $\\to $ [$\\tt George1123$](https://www.cnblogs.com/Wendigo/p/13406024.html)**\n\n---\n## \u9898\u9762\n\n> [CF1389F Bicolored Segments](https://www.luogu.com.cn/problem/CF1389F)\n\n> \u7ed9 $n$ \u6761\u7ebf\u6bb5 $[l_i,r_i]$\uff0c\u6bcf\u6761\u6709\u4e2a\u989c\u8272 $t_i\\in\\{0,1\\}$\uff0c\u6c42\u6700\u591a\u9009\u51fa\u591a\u5c11\u6761\u7ebf\u6bb5\uff0c\u4f7f\u6ca1\u6709\u4e0d\u540c\u989c\u8272\u7684\u7ebf\u6bb5\u76f8\u4ea4\u3002\n\n> \u6570\u636e\u8303\u56f4\uff1a$1\\le n\\le 2\\cdot 10^5$\uff0c$1\\le l_i\\le r_i\\le 10^9$\u3002\n\n---\n## \u849f\u84bb\u8bed\n\n\u6628\u5929\u849f\u84bb\u6253 CF\uff0c\u53d1\u6325\u5f97\u4e0d\u9519\uff0c\u8ff7\u60d1\u56de\u6a59\u3002\u4f46\u662f\u849f\u84bb\u6ca1\u505a\u51fa\u8fd9\u9898\uff0c\u8d5b\u540e\u60f3\u4e86\u597d\u4e45\u611f\u89c9\u8fd9\u9898\u5f88\u5947\u5999\uff0c\u4e8e\u662f\u84bb\u84bb\u5730\u6765\u5199\u7bc7\u9898\u89e3\u3002\n\n---\n## \u849f\u84bb\u89e3\u4e00\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4 dp\u3002\n\n\u5148\u5c06\u6bcf\u6761\u7ebf\u6bb5 $l_i,r_i$ \u79bb\u6563\u5316\uff0c\u5750\u6807\u8303\u56f4\u4e3a $[0,cnt]$\u3002\n\n\u8bbe $f(i,j,k)$ \u8868\u793a\u770b\u4e86 $[0,i]$\uff0c$[j+1,i]$ \u7684\u7ebf\u6bb5\u989c\u8272\u90fd\u4e3a $k$ \u7684\u6700\u591a\u7ebf\u6bb5\u6570\u3002\n\n$$j<i:f(i,j,k)=f(i-1,j,k)+\\sum_{x=1}^{n}[l_x>j][r_x=i]$$\n\n$$f(i,i,k)=\\max[\\max_{j=0}^{i-1}f(i,j,!k),\\max_{j=0}^{i-1}f(i,j,k)]$$\n\n\u90a3\u4e48\u7b54\u6848\u662f $\\max_{j=0}^{cnt}f(cnt,j,0/1)$\u3002\n\n\u8bbe $ca_i$ \u8fd9\u4e2a vector \u5b58\u653e $r_x=i$ \u7684 $x$\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4ee3\u66ff $j$ \u7ef4\uff0c\u628a $i$ \u7ef4\u6eda\u6389\uff0c\u5b9e\u73b0\u4e0a\u8ff0dp\u3002\n\n**\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n\\log n)$\u3002**\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n \n//Start\ntypedef long long ll;\ntypedef double db;\n#define mp(a,b) make_pair(a,b)\n#define x first\n#define y second\n#define be(a) a.begin()\n#define en(a) a.end()\n#define sz(a) int((a).size())\n#define pb(a) push_back(a)\nconst int inf=0x3f3f3f3f;\nconst ll INF=0x3f3f3f3f3f3f3f3f;\n \n//Data\nconst int N=2e5,M=(N<<1)+1;\nint n,l[N],r[N],t[N],cnt,b[M],ans;\nvector<int> ca[M];\n \n//Segmenttree\nconst int T=M<<2;\n#define lk k<<1\n#define rk k<<1|1\nstruct Segmenttree{ //\u7ebf\u6bb5\u6811\uff0c\u4e0b\u6807\u4e3a\u5750\u6807\uff0c\u7ef4\u62a4\u533a\u95f4\u52a0\u3001\u5168\u5c40\u6700\u5927\u503c\n    int mx[T],mk[T];\n    void pushup(int k){mx[k]=max(mx[lk],mx[rk]);}\n    void pm(int k,int v){mk[k]+=v,mx[k]+=v;}\n    void pushdown(int k){if(mk[k]) pm(lk,mk[k]),pm(rk,mk[k]),mk[k]=0;}\n    void fix(int x,int y,int v,int k,int l,int r){\n        if(x<=l&&r<=y) return pm(k,v);\n        pushdown(k);\n        int mid=(l+r)>>1;\n        if(mid>=x) fix(x,y,v,lk,l,mid);\n        if(mid<y) fix(x,y,v,rk,mid+1,r);\n        pushup(k);\n    }\n    int Mx(){return mx[1];}\n    void Print(int k,int l,int r){\n        if(l==r){cout<<mx[k]<<' ';return;}\n        pushdown(k);\n        int mid=(l+r)>>1;\n        Print(lk,l,mid),Print(rk,mid+1,r);\n    }\n}g[2];\n \n//Main\nint main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0),cout.tie(0);\n    cin>>n;\n    for(int i=0;i<n;i++){\n        cin>>l[i]>>r[i]>>t[i],--t[i];\n        b[cnt++]=l[i],b[cnt++]=r[i];\n    }\n    b[cnt++]=0,sort(b,b+cnt),cnt=unique(b,b+cnt)-b;\n    for(int i=0;i<n;i++){\n        l[i]=lower_bound(b,b+cnt,l[i])-b;\n        r[i]=lower_bound(b,b+cnt,r[i])-b;\n        ca[r[i]].pb(i);\n    }\n    for(int i=1;i<cnt;i++){\n        for(int x:ca[i]) g[t[x]].fix(0,l[x]-1,1,1,0,cnt);\n        g[0].fix(i,i,g[1].Mx(),1,0,cnt),g[1].fix(i,i,g[0].Mx(),1,0,cnt);//\u8fd9\u4e48\u5199\u4e5f\u662f\u53ef\u4ee5\u7684\n    }\n    cout<<max(g[0].Mx(),g[1].Mx())<<'\\n';\n    return 0;\n}\n```\n---\n## \u849f\u84bb\u89e3\u4e8c\n\n\u840c\u65b0\u521d\u5b66 OI \u7684\u65f6\u5019\uff0c\u6709\u4e00\u4e2a\u8d2a\u5fc3\u95ee\u9898\uff1a\u6c42\u6700\u591a\u7ebf\u6bb5\u4e92\u4e0d\u76f8\u4ea4\u3002\u505a\u6cd5\u662f\u53f3\u7aef\u70b9\u518d\u5de6\u7aef\u70b9\u53cc\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u8d2a\u5fc3\u53d6\u820d\u4e00\u4e0b\u3002\n\n\u8fd9\u9898\u53ef\u4ee5\u540c\u6837\u5730\u9a9a\u64cd\u4f5c\uff1a\n\n\u521d\u59cb\u5316\u7b54\u6848\u4e3a $n$\u3002\u7528\u4e24\u4e2a multiset \u8bb0\u5f55\u4e24\u79cd\u989c\u8272\u5206\u522b\u9009\u4e86\u54ea\u4e9b\u7ebf\u6bb5\u3002\n\n\u987a\u5e8f\u679a\u4e3e\u6392\u5e8f\u4e86\u7684\u7ebf\u6bb5\uff0c\u5982\u679c\u6ca1\u6709**\u9009\u4e86\u7684\u7ebf\u6bb5**\u4e0e\u5f53\u524d\u7ebf\u6bb5\u5f02\u8272\u5e76\u91cd\u5408\uff0c\u90a3\u4e48\u849f\u84bb\u4eec\u53ef\u4ee5\u5f88\u5f00\u5fc3\u5730\u9009\u4e0a\u8fd9\u6761\u7ebf\u6bb5\u3002\n\n\u5426\u5219\u628a**\u53f3\u7aef\u70b9\u5728\u5f53\u524d\u7ebf\u6bb5\u5de6\u7aef\u70b9\u53f3\u8fb9\u5e76\u4e14\u6700\u8fd1\u7684\u5f02\u8272\u7ebf\u6bb5**\u4ece multiset \u4e2d\u5220\u9664\uff0c\u4e0d\u5f80 multiset \u4e2d\u52a0\u5165\u5f53\u524d\u7ebf\u6bb5\uff0c\u628a\u7b54\u6848 $-1$\uff0c\u8868\u793a\u4e00\u4e2a\u5bf9\u6297\u62b5\u6d88\u7684\u8fc7\u7a0b\u3002\n\n\u6bd4\u5982\u52a0\u4e86\u4e00\u6761 $0$ \u7ebf\u6bb5\uff0c\u7136\u540e\u518d\u52a0\u4e00\u6761 $1$ \u7ebf\u6bb5\u4e0e\u5b83\u62b5\u6d88\u3002\u8fd9\u65f6\u5982\u679c\u6765 $2$ \u6761 $1$ \u7ebf\u6bb5\uff0c\u76f8\u5f53\u4e8e\u9009\u4e86 $3$ \u6761 $1$ \u7ebf\u6bb5\uff1b\u5982\u679c\u6765 $2$ \u6761 $0$ \u7ebf\u6bb5\uff0c\u76f8\u5f53\u4e8e\u9009\u4e86 $3$ \u6761 $0$ \u7ebf\u6bb5\u3002\n\n\u8fd9\u79cd\u601d\u60f3\u7c7b\u4f3c\u6c42\u5e8f\u5217\u4f17\u6570\u65f6\u7684\u5bf9\u6297\u62b5\u6d88\u9009\u4e3e\u548c\u6a21\u62df\u7f51\u7edc\u6d41\u53cd\u6094\u63a8\u6d41\u3002\n\n**\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n\\log n)$\u3002**\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n//Start\ntypedef long long ll;\ntypedef double db;\n#define mp(a,b) make_pair(a,b)\n#define x first\n#define y second\n#define be(a) a.begin()\n#define en(a) a.end()\n#define sz(a) int((a).size())\n#define pb(a) push_back(a)\nconst int inf=0x3f3f3f3f;\nconst ll INF=0x3f3f3f3f3f3f3f3f;\n\n//Data\nconst int N=2e5;\nint n,ans;\nstruct S{int l,r,t;}a[N];\nmultiset<int> g[2];\n\n//Main\nint main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0),cout.tie(0);\n    cin>>n,ans=n;\n    for(int i=0;i<n;i++)\n        cin>>a[i].l>>a[i].r>>a[i].t,--a[i].t;\n    sort(a,a+n,[&](const S p,const S q){return p.r==q.r?p.l<q.l:p.r<q.r;});\n    for(int i=0;i<n;i++)\n        if(g[!a[i].t].lower_bound(a[i].l)==en(g[!a[i].t])) g[a[i].t].insert(a[i].r);\n        else ans--,g[!a[i].t].erase(g[!a[i].t].lower_bound(a[i].l));\n    cout<<ans<<'\\n';\n    return 0;\n}\n```\n---\n**\u795d\u5927\u5bb6\u5b66\u4e60\u6109\u5feb\uff01**",
        "postTime": 1596114587,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1389F \u3010Bicolored Segments\u3011"
    },
    {
        "content": "\u62ff\u51fa\u5355\u8bcd\u5c0f\u672c\u672c\uff0c\u6211\u4eec\u6765\u8bb0\u4e00\u4e2a\u5355\u8bcd\uff1a  \n[embed](https://fanyi.baidu.com/?aldtype=85#en/zh/embed)\uff1a\u5d4c\u5165\uff0c\u672c\u9898\u4e2d\u610f\u601d\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u88ab\u53e6\u4e00\u4e2a\u533a\u95f4\u6240\u5305\u542b\u3002\n\n\u56de\u5f52\u6b63\u9898\uff0c\u6211\u5728\u5199\u8fd9\u7bc7\u9898\u89e3\u65f6\u770b\u4e86\u6d1b\u8c37\u4e0a[\u4e00\u7bc7\u548c\u6211\u601d\u8def\u5dee\u4e0d\u591a\u7684\u5927\u4f6c\u5199\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/Wendigo/solution-cf1389f)\uff0c\u4ed6\u7684\u7ebf\u6bb5\u6811\u4f18\u5316DP\u5199\u7684\u4e0d\u9519\u7684\uff0c\u5927\u5bb6\u53ef\u4ee5\u770b\u770b\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u4ed6\u7684\u89e3\u6cd5\u4e8c\u4e0d\u592a\u6e05\u6670\uff0c\u7279\u522b\u662f\u90a3\u4e2a\u201c\u5bf9\u6297\u62b5\u6d88\u201d\u3002\u53ef\u80fd\u849f\u84bb\u4e0d\u592a\u80fd\u7406\u89e3qwq\uff0c\u8fd9\u91cc\u6362\u4e00\u4e2a\u89d2\u5ea6\u5728\u91cd\u65b0\u8bb2\u4e00\u4e0b\u3002\n\n\u6211\u4eec\u8fd9\u6837\u60f3\uff0c\u65e2\u7136\u6709\u4e24\u79cd\u4e0d\u540c\u989c\u8272\u7684\u533a\u95f4\uff0c\u5c31\u4ee3\u8868\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u628a\u5b83\u4eec\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u7684\u8282\u70b9\u3002\u5982\u679c\u4f60\u613f\u610f\uff0c\u6211\u4eec\u518d\u628a\u6240\u6709\u4e92\u4e3a\u201c\u4e0d\u597d\u7684\u201d\u533a\u95f4\u8fde\u8fb9\u3002\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a~~\u770b\u7740\u4e0d\u9519~~\u4e8c\u5206\u56fe\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u9898\u76ee\u4e2d\u7684\u6837\u4f8b\u4e8c\u6784\u56fe\uff1a\n\n**\u6837\u4f8b\u4e8c**\uff1a\n\n```plain\n5\n5 8 1\n1 3 2\n3 4 2\n6 6 1\n2 10 2\n```\n\n**\u6211\u4eec\u6784\u6210\u7684\u4e8c\u5206\u56fe**\uff1a\n\n![F](https://cdn.luogu.com.cn/upload/image_hosting/4qlyx6pm.png?x-oss-process=image/resize,m_lfit,h_1000,w_1000)\n\n\u6211\u4eec\u518d\u770b\u8fd9\u4e2a\u56fe\uff0c\u662f\u4e0d\u662f\u6709\u4e00\u70b9\u611f\u89c9\u4e86\uff0c\u6211\u4eec\u8981\u6c42\u7684\u6b63\u662f\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u70b9\u72ec\u7acb\u96c6\u3002\u6c42\u6700\u5927\u70b9\u72ec\u7acb\u96c6\uff0c\u6211\u4eec\u5c31\u8981\u6c42\u6700\u5927\u5339\u914d\u3002\u8fd9\u4e24\u4e2a\u6982\u5ff5\u4e0d\u77e5\u9053\u7684\u540c\u5b66\u53ef\u4ee5\u4e0a\u7f51\u641c\u3002\u6211\u4eec\u4ee4\u6700\u5927\u70b9\u72ec\u7acb\u96c6\u7684\u7b54\u6848\u4e3a $x$\uff0c\u6700\u5927\u5339\u914d\u7684\u7b54\u6848\u4e3a $y$\u3002\u6211\u4eec\u6709 $x+y=n$\u3002$n$ \u5c31\u662f\u70b9\u7684\u4e2a\u6570\u3002~~\u8bc1\u660e\u7565~~\u6211\u4eec\u7684\u95ee\u9898\u6210\u529f\u8f6c\u5316\u4e3a\u8fd9\u4e2a\u4e8c\u5206\u56fe\u6c42\u6700\u5927\u5339\u914d\u3002\n\n~~\u6211\u76f8\u4fe1\u4e0d\u4f1a\u6709\u4eba\u60f3\u7740\u771f\u7684\u628a\u56fe\u5efa\u51fa\u6765\u7528\u7f51\u7edc\u6d41\u6c42\u89e3\u5427\uff0c\u4e0d\u4f1a\u5427\uff0c\u4e0d\u4f1a\u5427\u3002~~  \n~~\u54b3\u54b3\uff0c\u6211\u4e00\u5f00\u59cb\u5c31\u8fd9\u4e48\u60f3\u7684~~\n\n\u4e0d\u626f\u8fdc\u4e86\uff0c\u4f46\u786e\u5b9e\u6211\u4eec\u7684\u7b2c\u4e00\u53cd\u5e94\u5e94\u8be5\u662f\u7f51\u7edc\u7624\uff0c\u6bd5\u7adf\u662f\u5b83\u7684\u597d\u4f19\u4f34\u4e8c\u5206\u56fe\u561b\u3002\u4f46\u662f\u6211\u4eec\u5efa\u56fe\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(n^2)$\uff0cDinic \u505a\u4e8c\u5206\u56fe\u7684\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\sqrt{n})$\uff0c\u663e\u7136\u7206\u70b8\u3002\u6211\u4eec\u8981\u50cf\u4e00\u79cd\u9ad8\u6548\u7684\u65b9\u6cd5\u624d\u884c\u3002\n\n\u6211\u4eec\u5148\u548c\u4e0a\u9762\u7684\u90a3\u7bc7 blog \u4e00\u6837\uff0c\u6309\u6bcf\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u641e\u4e24\u4e2a multiset \u8bb0\u5f55\u6211\u4eec\u9009\u62e9\u4e86\u54ea\u4e9b\u533a\u95f4\u3002\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u8fd8\u662f\u4e00\u6837\uff0c\u4f46\u662f\u6211\u4eec\u7684\u89e3\u91ca\u4e0d\u592a\u4e00\u6837\u3002\u6211\u4eec\u8981\u6c42\u7684\u662f\u6700\u5927\u5339\u914d\uff0c**\u5982\u679c\u6211\u4eec\u5728\u5f02\u8272\u7684 multiset \u4e2d\uff0c\u5b58\u5728\u4e0e\u6211\u4eec\u73b0\u5728\u8003\u8651\u7684\u8fd9\u4e2a\u533a\u95f4\u5f62\u6210\u201c\u4e0d\u597d\u533a\u95f4\u201d\u7684\u533a\u95f4\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u9009\u62e9\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fd9\u6761\u8fb9\u4f5c\u4e3a\u6700\u5927\u5339\u914d\u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u628a\u90a3\u4e2a muliset \u4e2d\u7684\u70b9\u7ed9\u62b9\u6389\uff0c\u5e76\u4e14\u73b0\u5728\u7684\u8fd9\u4e2a\u533a\u95f4\u4e5f\u4e0d\u52a0\u5165\u5230 multiset \u4e2d\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd9\u4e24\u4e2a\u70b9\u4e0d\u80fd\u518d\u51fa\u73b0\u5728\u6700\u5927\u5339\u914d\u7684\u8fb9\u91cc\u4e86\uff0c\u8fd9\u662f\u6700\u5927\u5339\u914d\u7684\u5b9a\u4e49\u8981\u6c42\u7684**\u3002\u5426\u5219\u8fd9\u4e2a\u533a\u95f4\u6211\u4eec\u53ef\u4ee5\u52a0\u5165\u5230 multiset \u4e2d\u3002\u8fd9\u6837\u89e3\u91ca\u5e94\u8be5\u66f4\u6e05\u695a\u4e00\u4e9b\u5427\uff08\u81ea\u8ba4\u4e3a\uff09\u3002\u4e5f\u5c31\u4e0d\u7528\u53bb\u7406\u89e3\u201c\u5bf9\u6297\u62b5\u6d88\u201d\u4e86\u3002\n\n```cpp\n//Don't act like a loser.\n//You can only use the code for studying or finding mistakes\n//Or,you'll be punished by Sakyamuni!!!\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\n\nint read() {\n\tchar ch=getchar();\n\tint f=1,x=0;\n\twhile(ch<'0'||ch>'9') {\n\t\tif(ch=='-')\n\t\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn f*x;\n}\n\nconst int maxn=2e5+10; \n\nint n=0,ans=0;\nstruct segment {\n\tint l,r,col;\n\t\n\tconst operator < (const segment& y) {\n\t\treturn r<y.r;\n\t}\n}s[maxn];\n\nmultiset<int> sel[2];\n\nsigned main() {\n\tn=read();\n\tfor(int i=1;i<=n;i++) {\n\t\ts[i].l=read();\n\t\ts[i].r=read();\n\t\ts[i].col=read()-1;\n\t}\n\t\n\tsort(s+1,s+n+1);\n\t\n\tans=n;\n\tfor(int i=1;i<=n;i++) {\n\t\tif(sel[1-s[i].col].lower_bound(s[i].l)!=sel[1-s[i].col].end()) {\n\t\t\tans--;\n\t\t\tsel[1-s[i].col].erase(sel[1-s[i].col].lower_bound(s[i].l));\n\t\t}\n\t\telse {\n\t\t\tsel[s[i].col].insert(s[i].r);\n\t\t}\n\t}\n\t\n\tcout<<ans<<endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1596253548,
        "uid": 132976,
        "name": "huayucaiji",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1389F \u3010Bicolored Segments\u3011"
    },
    {
        "content": "#### \u524d\u8a00\uff1a\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u7ebf\u6bb5\u6811(\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u6700\u5927\u503c\uff0c\u5355\u70b9\u8986\u76d6) + $dp$\n\n\u8fd9\u9053\u9898\u76ee\u633a\u6709\u610f\u601d\u7684\uff0c\u5728\u7ecf\u8fc7\u8bb8\u591a\u5220\u6539\u540e\uff0c\u5199\u4e86\u4e00\u4efd\u6bd4\u8f83\u5bb9\u6613\u770b\u61c2\u7684\u4ee3\u7801\u3002\n\n\u8fd9\u7bc7\u9898\u89e3\u6211\u5c06\u63d0\u4f9b\u4e24\u4e2a\u7248\u672c\uff0c\u4e00\u79cd\u662f\u8be6\u7ec6\u7248\uff08\u7ed9\u5b8c\u5168\u6ca1\u6709\u601d\u8def\u7684\u540c\u5b66\u770b\u7684\uff0c\u4f4d\u4e8e\u6587\u672b,\u6709\u601d\u8def\u8bb2\u89e3\uff0c\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u9898\u76ee\uff09\n\n\u53e6\u5916\u4e00\u79cd\u662f\u7cbe\u7b80\u7248\uff0c\u5927\u6982\u7684\u7b80\u8ff0\u505a\u6cd5\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u60c5\u51b5\u9009\u62e9\u770b\u54ea\u4e00\u79cd\u3002\n\n#### \u9898\u610f\u8f6c\u8ff0\uff1a\n\n```plain\n\u6bcf\u6761\u7ebf\u6bb5\u4e3a\u9ed1\u8272\u6216\u767d\u8272\u3002\u6211\u4eec\u79f0\u4e00\u5bf9\u7ebf\u6bb5\u4e0d\u597d\u5f53\u4e14\u4ec5\u5f53\u989c\u8272\u4e0d\u540c\u4e14\u6709\u516c\u5171\u70b9\u3002\n\n\u6c42\u4e00\u4e2a\u6700\u5927\u7684\u5b50\u96c6(\u5305\u542b\u7684\u7ebf\u6bb5\u6700\u591a)\u4f7f\u5f97\u4e0d\u5b58\u5728\u4e0d\u597d\u7684\u7ebf\u6bb5\u5bf9\u3002\n```\n\n### \u7cbe\u7b80\u7248:\n\n\u901a\u8fc7\u5c06\u7ebf\u6bb5\u6309\u7167\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4f9d\u6b21\u52a0\u5165\u53bb\u9664\u540e\u6548\u6027\u3002\u540c\u65f6\u8981\u79bb\u6563\u5316\u3002\n\n+ \u72b6\u6001\u8bbe\u7acb\uff1a$dp[i][j][0/1]$ \n\n+ \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b:(\u5047\u8bbe\u5f53\u524d\u5904\u7406\u5230\u7684\u7ebf\u6bb5\u662f\u7ebf\u6bb5 $i$)\n\n\u5047\u8bbe\u5f53\u524d\u8fd9\u6761\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u662f $l_i$ \u53f3\u7aef\u70b9\u662f $r_i$\u3002\n\n\uff08\u56e0\u4e3a\u8003\u8651\u5230\u9ed1\u767d\u662f\u540c\u6837\u7684\u505a\u6cd5\uff0c\u5c31\u5047\u5b9a\u5f53\u524d\u8fd9\u6761\u7ebf\u6bb5\u662f\u9ed1\u7684\u5427\uff0c\u5bf9\u5e94 $dp[i][r_i][1]$\uff09\n\n+ \u4e0d\u9009\u5f53\u524d\u7ebf\u6bb5:\n\n$dp[i][r_i][1] = dp[i - 1][r_{i-1}][1]$\n\n+ \u9009\u5f53\u524d\u7ebf\u6bb5:\n\n\u5047\u8bbe\u4e0a\u4e00\u6761\u88ab\u9009\u62e9\u7684\u767d\u8272\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u662f $r_j$\n\n\u6839\u636e\u9898\u76ee\u7684\u610f\u601d\uff0c\u5de6\u53f3\u7aef\u70b9\u90fd\u5728 $[r_j + 1$,$r_i]$ \u8fd9\u91cc\u9762\u7684\u6240\u6709\u9ed1\u8272\u7ebf\u6bb5\u663e\u7136\u662f\u90fd\u53ef\u4ee5\u9009\u62e9\u7684\u3002\n\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b:$dp[i][r_i][1] = max(dp[k][r_k][0] + Clac(r_k + 1,r_i))$\n\nps.\u8fd9\u91cc\u7684 $k < i$ \u5e76\u4e14 $r_k < l_i$(\u5176\u53f3\u7aef\u70b9\u4e0d\u80fd\u5728\u8fd9\u6761\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u53ca\u540e\u9762),$Clac(r_k + 1,r_i)$\u8868\u793a\u5de6\u53f3\u7aef\u70b9\u90fd\u5728 $[r_k + 1,r_i]$ \u8fd9\u6bb5\u533a\u95f4\u5185\u7684\u9ed1\u8272\u7ebf\u6bb5\u3002\n\n\u8003\u8651\u5230\u5982\u4f55\u63d0\u524d\u8ba1\u7b97$Clac(r_k + 1,r_i)$,\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u524d\u5c31\u5148\u5c06 $r_k < l_i$ \u7684\u6240\u6709 $dp[k][r_k][0]$ \u90fd\u52a0\u4e0a\u4e00\u4e2a $1$\u3002\n\n\u7136\u540e\u65b9\u7a0b\u5c31\u53d8\u6210\u4e86$dp[i][r_i][1] = max(dp[k][r_k][0])$($k < i$ \u5e76\u4e14 $r_k < l_i$)\n\n\u53d1\u73b0\u8981\u5b9e\u73b0\u533a\u95f4\u52a0\u6cd5\uff0c\u533a\u95f4\u627e\u6700\u5927\u503c\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n#### Code\n\n```cpp\n// Memory Limit: 250 MB\n// Time Limit: 2000 ms\n\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 2e5 + 50;\nint n;\nmap <int,int> mp;\nint N[MAXN * 2];\n\ninline int read() {\n\tint x = 0 , flag = 1;\n\tchar ch = getchar() ;\n\tfor( ; ch > '9' || ch < '0' ; ch = getchar()) ;\n\tfor( ; ch >= '0' && ch <= '9' ; ch = getchar()) x = (x << 3) + (x << 1) + ch - '0';\n\treturn x * flag;\n}\n\nstruct Segment {\n\tint l,r,ty;\n\tvoid init(){l = read() , r = read() , ty = read() ;return ;}\n\tbool operator < (const Segment &P) { return r < P.r; }//\u91cd\u8f7d\u4e86\u8fd0\u7b97\u7b26\n} S[MAXN];\n\nstruct SegmentTree { //\u4e24\u4e2a\u7ebf\u6bb5\u6811\uff0c\u4e00\u4e2a\u662f\u7ef4\u62a4\u9ed1\u8272\u7684\uff0c\u4e3a\u7ebf\u6bb5\u6811B\uff0c\u53e6\u5916\u4e00\u4e2a\u7ef4\u62a4\u767d\u8272\u7684\uff0c\u4e3a\u7ebf\u6bb5\u6811W\n\tint Max[MAXN * 8],laz[MAXN * 8],L[MAXN * 8],R[MAXN * 8];\n\tvoid build(int x,int l,int r) {//\u5efa\u6811\n\t\tL[x] = l , R[x] = r;\n\t\tMax[x] = laz[x] = 0;\n\t\tif(l == r) return ;\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(x << 1 , l , mid);\n\t\tbuild(x << 1 | 1 , mid + 1 , r);\n\t\treturn ;\n\t}\n\tvoid update(int x,int k) {\n\t\tlaz[x] += k , Max[x] += k;\n\t\treturn ;\n\t}\n\tvoid pushdown(int x) {\n\t\tif(laz[x] == 0) return ;\n\t\tupdate(x << 1 , laz[x]);\n\t\tupdate(x << 1 | 1 , laz[x]);\n\t\tlaz[x] = 0;\n\t\treturn ;\n\t}\n\tint GetMax(int x,int l,int r) {//\u533a\u95f4\u6700\u5927\u503c\n\t\tint M = 0;\n\t\tif(L[x] >= l && R[x] <= r) return Max[x];\n\t\tpushdown(x);\n\t\tint mid = (L[x] + R[x]) >> 1;\n\t\tif(l <= mid) M = max(M , GetMax(x << 1 , l , r) );\n\t\tif(r  > mid) M = max(M , GetMax(x << 1 | 1 , l , r) );\n\t\treturn M;\n\t}\n\tvoid add(int x,int l,int r,int k) {//\u533a\u95f4\u52a0\u6cd5\n\t\tif(L[x] >= l && R[x] <= r) {\n\t\t\tupdate(x , k);\n\t\t\treturn ;\n\t\t}\n\t\tpushdown(x);\n\t\tint mid = (L[x] + R[x]) >> 1;\n\t\tif(l <= mid) add(x << 1 , l , r , k);\n\t\tif(r  > mid) add(x << 1 | 1 , l , r , k);\n\t\tMax[x] = max(Max[x << 1] , Max[x << 1 | 1]);\n\t\treturn ;\n\t}\n\tvoid change(int x,int pos,int k) { //\u5355\u70b9\u4fee\u6539\n\t\tif(L[x] == pos && R[x] == pos) {\n\t\t\tMax[x] = k;\n\t\t\treturn ;\n\t\t}\n\t\tpushdown(x);\n\t\tint mid = (L[x] + R[x]) >> 1;\n\t\tif(pos <= mid) change(x << 1 , pos , k);\n\t\telse change(x << 1 | 1 , pos , k);\n\t\tMax[x] = max(Max[x << 1] , Max[x << 1 | 1]);\n\t\treturn;\n\t}\n} B,W;\n\nvoid Discretization() {//\u79bb\u6563\u5316\n\tint len = 0;\n\tfor(int i = 1 ; i <= n ; i ++) \n\tN[++len] = S[i].l , N[++len] = S[i].r;\n\tsort(N + 1 , N + 1 + len);\n\tfor(int i = 1 ; i <= len ; i ++) mp[N[i]] = i + 1;\n   //\u56e0\u4e3aS[i].l\u79bb\u6563\u5316\u540e-1\u53ef\u80fd\u662f0\uff0c\u6240\u4ee5\u6211\u5728\u79bb\u6563\u5316\u7684\u65f6\u5019\u5c31\u5c06\u6bcf\u4e00\u4e2a\n   //S[i].l \u4ee5\u53caS[i].r + 1 \u4e86\uff0c\u5c31\u662f\u4e0a\u9762\u7684mp[N[i]] = i + 1;\n\tfor(int i = 1 ; i <= n ; i ++)\n\tS[i].l = mp[S[i].l] , S[i].r = mp[S[i].r];\n\treturn ;\n}\n\nint main() {\n\tn = read();\n\tfor(int i = 1 ; i <= n ; i ++) S[i].init();//\u8bfb\u5165\u800c\u5df2\uff0c\u4e3a\u4e86\u770b\u8d77\u6765\u7b80\u4fbf\u5c31\u8fd9\u4e48\u5199\u4e86\n\tDiscretization();//\u79bb\u6563\u5316\n\tsort(S + 1 , S + 1 + n);//\u6309\u7167\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u91cd\u8f7d\u4e86\u8fd0\u7b97\u7b26\n\tB.build(1 , 1 , 2 * n + 1);\n\tW.build(1 , 1 , 2 * n + 1);\n\tfor(int i = 1 ; i <= n ; i ++) {\n\t\tif(S[i].ty == 1) {//\u4ee3\u8868\u662f\u767d\u8272\n\t\t\tB.add(1 , 1 , S[i].l - 1 , 1);//\u63d0\u524d\u52a0\u4e0a\n\t\t\tint Max = W.GetMax(1, 1 , S[i].r);//\u5047\u8bbe\u4e0d\u9009\uff0c\u6c42\u4e00\u4e2a\u6700\u5927\u503c\n\t\t\tint op = B.GetMax(1 , 1 , S[i].l - 1);//\u5047\u8bbe\u9009\u62e9\uff0c\u6c42\u4e00\u4e2a\u6700\u5927\u503c\n\t\t\tW.change(1 , S[i].r , max(op,Max));//\u6700\u540e\u5f53\u524d\u70b9\u5c31\u4fee\u6539\u4e3a\u9009\u62e9\u4ee5\u53ca\u4e0d\u9009\u62e9\u7684max\u5c31\u884c\u4e86\n\t\t}\n\t\telse {//\u5426\u5219\u662f\u9ed1\u8272\uff0c\u64cd\u4f5c\u540c\u4e0a\uff0c\u53ea\u4e0d\u8fc7 \"B\"\u6539\u6210\u4e86\"W\"\uff0c\"W\"\u6539\u6210\u4e86\"B\"\n\t\t\tW.add(1 , 1 , S[i].l - 1 , 1);\n\t\t\tint Max = B.GetMax(1, 1 , S[i].r);\n\t\t\tint op = W.GetMax(1 , 1 , S[i].l - 1);\n\t\t\tB.change(1 , S[i].r , max(op,Max));\n\t\t}\n\t}\n\tcout << max(B.GetMax(1 , 1 , n * 2 + 1),W.GetMax(1 , 1 , n * 2 + 1));\n\treturn 0;\n}\n```\n\n### \u8be6\u7ec6\u7248\n\n#### \u5f15\u5165:\n\n\u60f3\u5fc5\u5927\u5bb6\u5728\u521d\u5b66\u8d2a\u5fc3\u7684\u9636\u6bb5\u90fd\u505a\u8fc7\u8fd9\u4e48\u4e00\u9053\u9898\u76ee\uff1a\n```plain\n\u4ece\u82e5\u5e72\u7ebf\u6bb5\u4e2d\u9009\u51fa\u82e5\u5e72\u6761\u4e0d\u76f8\u4ea4\u7684\u7ebf\u6bb5\uff0c\u6c42\u6700\u591a\u9009\u51fa\u7684\u7ebf\u6bb5\u6570\n```\n\u672c\u9898\u5176\u5b9e\u5c31\u662f\u7531\u8fd9\u4e2a\u9898\u76ee\u201c\u8fdb\u5316\u201d\u6765\u7684\u3002\n\n$Ask$\uff1a\u8fd9\u9053\u9898\u8fd8\u80fd\u6309\u7167\u539f\u6765\u7684\u9898\u76ee\u8fdb\u884c\u8d2a\u5fc3\u5417\uff1f\n\n$Answer$: \u4e0d\u80fd\u8bf4\u5b8c\u5168\u4e00\u6837\u5427\uff0c\u4f46\u662f\u7528\u5230\u4e86\u4e00\u90e8\u5206\u8d2a\u5fc3\u601d\u60f3\u3002\n\n#### \u9898\u76ee\u5206\u6790\n\n\u8981\u4fdd\u8bc1\u52a8\u6001\u89c4\u5212\u6ca1\u6709\u540e\u6548\u6027\u3002\n\n\u4e00\u4e2a\u975e\u5e38\u663e\u800c\u6613\u89c1\u7684\u505a\u6cd5\u5c31\u662f\u6211\u4eec\u6309\u7167\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u52a0\u5165\u5c31\u53ef\u4ee5\u53bb\u9664\u6389\u540e\u6548\u6027\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9898\u76ee\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002\n\n+ \u72b6\u6001\u7684\u8bbe\u7f6e:\n\n**\u6211\u7684\u601d\u8003\u8fc7\u7a0b**(\u4e5f\u5c31\u662f\u5982\u4f55\u5f97\u51fa\u72b6\u6001\u8bbe\u7f6e\u7684)\uff1a\n\n\u4e00\u7ef4\u53ef\u4ee5\u5417\uff1f\n\n$dp[i]$ \u8868\u793a\u524d $i$ \u4e2a\u540e\u80fd\u83b7\u5f97\u7684\u6700\u591a\u7ebf\u6bb5\u6570?\n\n\u8fd9\u4e2a\u663e\u7136\u4e0d\u884c\uff0c\u56e0\u4e3a\u4e0d\u80fd\u8fdb\u884c\u8f6c\u79fb\uff0c\u6211\u5e76\u4e0d\u77e5\u9053\u6700\u540e\u4e00\u4e2a\u662f\u653e\u5165\u7684\u662f\u9ed1\u8272\u8fd8\u662f\u767d\u8272\uff0c\u4ee5\u53ca\u5b83\u7684\u53f3\u7aef\u70b9\u5750\u6807\u662f\u54ea\u91cc\u3002\n\n\u4e8c\u7ef4\u53ef\u4ee5\u5417\uff1f\n\n$dp[i][j][0/1]$ \u8868\u793a\u8003\u8651\u524d $i$ \u4e2a\uff0c $j$ \u8868\u793a\u6700\u540e\u4e00\u4e2a\u653e\u5165\u7684\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\uff0c$0/1$ \u5c31\u8868\u793a\u6700\u540e\u653e\u5165\u7684\u7ebf\u6bb5\u7684\u989c\u8272\u3002\n\n\u597d\u50cf\u65f6\u95f4\u4e0a\u8fc7\u4e0d\u53bb\u554a\uff08\u7a7a\u95f4\u4e0a\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u7b2c\u4e00\u7ef4\u53ef\u4ee5\u6eda\u52a8\u6389\uff0c\u7b2c\u4e8c\u7ef4\u53ef\u4ee5\u8fdb\u884c\u79bb\u6563\u5316\uff09\u3002\n\n**\u65f6\u95f4\u4e0a\u7684\u4f18\u5316**\n\n+ \u4ece\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7740\u624b:\n\n\u5047\u8bbe\u5f53\u524d\u8fd9\u6761\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u662f $l_i$ \u53f3\u7aef\u70b9\u662f $r_i$\u3002\n\n+ \u5982\u679c\u4e0d\u9009\u62e9\u5f53\u524d\u7ebf\u6bb5:\n\n$dp[i][r_i][0] = dp[i - 1][r_i][0] , dp[i][r_i][1] = dp[i - 1][r_i][1]$\n\n+ \u5982\u679c\u9009\u62e9\u5f53\u524d\u7ebf\u6bb5:\n\n\n\uff08\u56e0\u4e3a\u8003\u8651\u5230\u9ed1\u767d\u662f\u540c\u6837\u7684\u505a\u6cd5\uff0c\u5c31\u5047\u5b9a\u5f53\u524d\u8fd9\u6761\u7ebf\u6bb5\u662f\u9ed1\u7684\u5427\uff0c\u5bf9\u5e94 $dp[i][r_i][1]$\uff09\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053\u4e0a\u4e00\u6761\u88ab\u9009\u62e9\u7684\u767d\u8272\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u662f\u5728\u54ea\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5047\u8bbe\u662f $r_j$\n\n\u5de6\u53f3\u7aef\u70b9\u90fd\u5728 $[r_j + 1$,$r_i]$ \u8fd9\u91cc\u9762\u7684\u6240\u6709\u9ed1\u8272\u7ebf\u6bb5\u663e\u7136\u662f\u90fd\u53ef\u4ee5\u9009\u62e9\u7684\u3002\u5c31\u5f88\u5bb9\u6613\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b:\n\n$dp[i][r_i][1] = max(dp[k][r_k][0] + Clac(r_k + 1,r_i))$\n\nps.\u8fd9\u91cc\u7684 $k < i$ \u5e76\u4e14 $r_k < l_i$(\u5176\u53f3\u7aef\u70b9\u4e0d\u80fd\u5728\u8fd9\u6761\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u53ca\u540e\u9762)\uff0c$Clac(r_k + 1,r_i)$ \u8868\u793a \u5de6\u53f3\u7aef\u70b9\u90fd\u5728 $[r_k + 1,r_i]$ \u8fd9\u6bb5\u533a\u95f4\u5185\u7684\u9ed1\u8272\u7ebf\u6bb5\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u74f6\u9888\u662f\u5728\u679a\u4e3e\u6240\u6709\u7684 $k < i$ \u6c42 $max(dp[k][r_k][0] + Clac(r_k + 1,r_i))$ \u7684\u8fc7\u7a0b\u3002\n\n\u8fd9\u91cc\u7684 $Clac(r_k + 1 , r_i)$ \u662f\u8ddf $r_k$ \u6709\u5173\u7684\uff0c\u8fd9\u7ed9\u6211\u4eec\u5e26\u6765\u4e86\u5f88\u5927\u7684\u9ebb\u70e6\uff0c\u8003\u8651\u5982\u4f55\u4f7f\u5f97\u5176\u4e0e $r_k + 1$ \u65e0\u5173\u3002\n\n\u53ef\u4ee5\u4e8b\u5148\u5728\u8f6c\u79fb\u4e4b\u524d\u5c06 $dp[k][r_k][0]$ \u63d0\u524d\u52a0\u4e0a $Clac(r_k + 1,r_i))$ \u3002\n\n\u56e0\u4e3a\u679a\u4e3e\u7684\u662f $k < i$ \u5e76\u4e14 $r_k < l_i$ \uff0c\u6240\u4ee5\u6211\u4eec\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5\u7684\u65f6\u5019\u5c31\u5148\u5c06 $r_k < l_i$ \u7684\u6240\u6709 $dp[k][r_k][0]$ \u90fd\u52a0\u4e0a\u4e00\u4e2a $1$ \u3002\n\n\u8fd9\u6837\u5b50 $dp$ \u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u5019\u53ea\u9700\u8981\u627e $max(dp[k][r_k][0])$($r_k < l_i$) \uff0c\u8fd9\u4e2a\u65b9\u7a0b\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u72b6\u6001\u8f6c\u79fb\uff0c\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217/ \u7ebf\u6bb5\u6811\u4f18\u5316\u3002\n\n\u4f46\u662f\u8003\u8651\u5230\u6211\u4eec\u8981\u5c06 $r_k < l_i$ \u7684\u6240\u6709 $dp[k][r_k][0]$ \u90fd\u52a0\u4e0a\u4e00\u4e2a $1$ \uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528\u7ebf\u6bb5\u6811\u3002\n\n\u7136\u540e\u5c06\u6240\u6709**\u505a\u6cd5\u8f6c\u79fb\u5230\u4e24\u68f5\u7ebf\u6bb5\u6811\u4e0a**\uff1a\n\n\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f\u6700\u540e\u9009\u62e9\u767d\u8272\u7ebf\u6bb5\u7684 $dp$\uff0c\u53e6\u5916\u4e00\u68f5\u5c31\u7ef4\u62a4\u6700\u540e\u9009\u62e9\u9ed1\u8272\u7ebf\u6bb5\u7684 $dp$ \u3002\n\n\u7ebf\u6bb5\u6811\u4e2d\u7684\u8282\u70b9 $[j,j]$ \u5c31\u8868\u793a $dp[i][j][0/1]$($i$ \u7684\u90a3\u4e00\u7ef4\u5728\u679a\u4e3e\u7684\u65f6\u5019\u5c31\u6eda\u52a8\u6389\u4e86 )\n\n\u8fd8\u662f\u5047\u8bbe\u5f53\u524d\u662f\u5904\u7406\u9ed1\u8272\u7ebf\u6bb5\u3002\n\n\u9996\u5148\u5c06\u767d\u8272\u7684\u90a3\u68f5\u5bf9\u5e94\u7684\u5bf9\u5e94\u533a\u95f4 $[1,l_i - 1]$ \u5168\u90e8\u52a0\u4e00(\u5bf9\u5e94\u4e0a\u9762\u7684\u505a\u6cd5\u5c31\u662f\u5c06 $dp[k][r_k][0](r_k < l_i)$ \u52a0\u4e00)\u3002\n\n\u5982\u679c\u662f\u4e0d\u9009\u62e9\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u65e0\u9700\u4fee\u6539\u9ed1\u7ebf\u6bb5\u6811\u7684\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u9ed1\u7ebf\u6bb5\u6811\u7684\u5168\u5c40\u6700\u5927\u503c $Max$ \uff0c\u5982\u679c\u9009\u62e9\u7684\u8bdd\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u76ee\u524d\u767d\u7ebf\u6bb5\u6811\u4e2d $[1,l_i - 1]$ \u4e2d\u7684\u6700\u5927\u503c\u3002\n\n\u53d6\u9009\u62e9/\u4e0d\u9009\u62e9\u7684\u6700\u5927\u503c\u5bf9\u4e8e\u5f53\u524d\u9ed1\u7ebf\u6bb5\u6811\u4e0a\u7684\u70b9$[r_i,r_i]$ \u8fdb\u884c\u5355\u70b9\u4fee\u6539\u3002\n\n\u5c06\u6574\u4e2a $dp$ \u5b8c\u5168\u7528\u7ebf\u6bb5\u6811\u6765\u5b9e\u73b0\uff0c\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f\u7ebf\u6bb5\u6811\u4e2d\u7684\u6700\u5927\u503c\u3002\n\n\u5b9e\u73b0\u7684\u64cd\u4f5c\u4e3a\uff1a\u533a\u95f4\u52a0\u6cd5\uff0c\u533a\u95f4\u627e\u6700\u5927\u503c\uff0c\u5355\u70b9\u4fee\u6539\u3002\n",
        "postTime": 1610184591,
        "uid": 67817,
        "name": "MuYC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1389F \u3010Bicolored Segments\u3011"
    },
    {
        "content": "[Link](https://codeforces.com/problemset/problem/1389/F)\uff0c\u592a\u5999\u4e86\u592a\u5999\u4e86\u3002\n\n\u9898\u610f\u5c31\u662f\u9009\u51fa\u4e00\u7ec4\u533a\u95f4\uff0c\u4f7f\u5176\u4e2d\u7684\u5f02\u8272\u533a\u95f4\u4e0d\u80fd\u6709\u4ea4\u3002\n\n\u56e0\u4e3a\u53ea\u6709\u4e24\u79cd\u989c\u8272\uff0c\u90a3\u4e48\u628a\u6709\u4ea4\u7684\u5f02\u8272\u533a\u95f4\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u5c31\u6709\u4e86\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u5176\u4e2d\u7684\u6700\u5927\u72ec\u7acb\u70b9\u96c6\u3002\n\n\u770b\u4e00\u773c\u6570\u636e\u8303\u56f4\uff0c$n\\le 2\\times 10^5$\uff0c\u800c\u6211\u4eec\u8fde\u8fb9\u7684\u590d\u6742\u5ea6\u4e3a $O(n^2)$\uff0c\u63a5\u53d7\u4e0d\u4e86\uff0c\u6240\u4ee5\u4e0d\u53ef\u4ee5\u8fde\u8fb9\u4e4b\u540e\u8dd1\u5308\u7259\u5229\u76f4\u63a5\u6c42\u3002\n\n\u53d1\u73b0\uff0c\u628a\u6240\u6709\u533a\u95f4\u6309\u53f3\u7aef\u70b9\u4f4d\u7f6e\u6392\u5e8f\u540e\uff0c\u6240\u6709\u4e0e\u540c\u4e00\u4e2a\u533a\u95f4\u8fde\u6709\u8fb9\u7684\u533a\u95f4\u662f\u8fde\u7eed\u7684\u540c\u8272\u533a\u95f4\u3002\u53ef\u4ee5\u5206\u522b\u8bb0\u5f55**\u76ee\u524d\u9009\u51fa\u7684\u4e24\u79cd\u989c\u8272\u7684\u533a\u95f4**\uff0c\u5f53\u679a\u4e3e\u5230\u533a\u95f4 $i$ \u65f6\uff0c\u6709\u4e24\u79cd\u53ef\u80fd\uff1a\n\n\u82e5\u5f53\u524d\u533a\u95f4\u4e0e\u4efb\u4f55\u5df2\u9009\u533a\u95f4\u6ca1\u6709\u4ea4\uff0c\u90a3\u4e48\u7b54\u6848\u52a0\u4e00\uff0c\u5c06\u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u63d2\u5165\u96c6\u5408\u3002\n\n\u82e5\u5f53\u524d\u533a\u95f4\u4e0e\u5df2\u9009\u5f02\u8272\u533a\u95f4\u6709\u4ea4\uff0c\u5c31\u5c06**\u4e0e\u5176\u6709\u4ea4\u7684\u5f02\u8272\u533a\u95f4\u4e2d\u6700\u9760\u524d\u7684\u4e00\u4e2a**\u5220\u9664\uff0c\u5f53\u524d\u533a\u95f4\u4e0d\u52a0\u5165\u96c6\u5408\u3002\u56e0\u4e3a\u5b9e\u9645\u4e0a\u8fd9\u8fd8\u662f\u4e00\u4e2a\u6c42\u6700\u5927\u72ec\u7acb\u70b9\u96c6\u7684\u8fc7\u7a0b\uff0c\u5f53\u524d\u533a\u95f4\u4e0e\u5df2\u9009\u533a\u95f4\u6709\u8fde\u8fb9\uff0c\u90a3\u8fd9\u6761\u8fb9\u80af\u5b9a\u662f**\u6700\u5927\u5339\u914d\u4e2d\u7684\u8fb9**\uff0c\u6b64\u65f6\u90a3\u4e2a\u5df2\u9009\u7684\u533a\u95f4\u4e0d\u80fd\u518d\u4e0e\u5176\u4ed6\u7684\u533a\u95f4\u6709\u6700\u5927\u5339\u914d\u4e2d\u7684\u8fb9\uff0c\u8fd9\u662f\u7531\u5b9a\u4e49\u51b3\u5b9a\u7684\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=2e5+5;\nstruct data{\n\tint l,r,t;\n\tbool operator <(const data &x)const{\n\t\treturn x.r>r;\n\t}\n}a[maxn];\nmultiset<int>s[2];\nint n,ans;\nint main(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a[i].l>>a[i].r>>a[i].t;\n\t\ta[i].t--;\n\t}\n\tsort(a+1,a+n+1);\n\tfor(int i=1;i<=n;i++){\n\t\tif(s[!a[i].t].lower_bound(a[i].l)==s[!a[i].t].end()){\n\t\t\tans++;\n\t\t\ts[a[i].t].insert(a[i].r);\n\t\t}\t\t\n\t\telse {\n\t\t\ts[!a[i].t].erase(s[!a[i].t].lower_bound(a[i].l));\n//\t\t\tans--;\n\t\t}\n\t}\n\tcout<<ans;\n}\n```\n",
        "postTime": 1677296449,
        "uid": 477757,
        "name": "dennshokouni",
        "ccfLevel": 0,
        "title": "CF1389F\u505a\u9898\u8bb0\u5f55"
    },
    {
        "content": "## [Bicolored Segments](https://codeforces.com/contest/1389/problem/F)\n\n### \u89e3\u6790\uff1a\n\n#### \u9898\u76ee\u5927\u610f\uff1a\n\u4e24\u4e2a\u989c\u8272\u4e0d\u540c\u5207\u76f8\u4ea4\u7684\u7ebf\u6bb5\u4e0d\u80fd\u540c\u65f6\u9009\uff08\u989c\u8272 $c_i\\in\\{0,1\\}$\uff09\uff0c\u95ee\u6700\u5927\u9009\u62e9\u65b9\u6848\u3002\n\n#### \u601d\u8def\uff1a\n\n\uff08\u4ee5\u4e0b $c_i$ \u4ee3\u8868 $t_i$ \uff09\u3002\n\n\u8003\u8651\u5148\u5bf9\u7ebf\u6bb5\u6309\u7167 $r$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8bbe\u8ba1\u4e00\u4e2a $dp_i$ \u8868\u793a\u524d $i$ \u4e2a\u7ebf\u6bb5\u6700\u591a\u80fd\u9009\u591a\u5c11\u4e2a\u7ebf\u6bb5\u3002\n\n\u90a3\u4e48\u6709 $n^2$ \u8f6c\u79fb\uff1a$dp_{i}=\\max_{j<i,c_j=c_i\\| r_j<l_i}dp_j+1$\u3002\n\n\u8003\u8651\u4f18\u5316\uff0c\u6211\u4eec\u53d1\u73b0\u6392\u5e8f\u540e\u6ee1\u8db3 $c_j\\not=c_i\\land r_j<l_i$ \u7684\u7ebf\u6bb5\u5e94\u8be5\u662f $n$ \u7684\u4e00\u4e2a\u524d\u7f00\uff0c\u56e0\u6b64\u8003\u8651\u7ebf\u6bb5\u6811\u3002\u6211\u4eec\u5f00\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u7b2c $i$ \u4e2a\u4f4d\u7f6e\u7684\u503c\u662f $dp_i$\uff0c\u90a3\u4e48\u8f6c\u79fb\u7b49\u4ef7\u4e8e\u524d\u7f00\u6700\u5927\u503c\u3002\n\n\u8003\u8651\u5982\u679c\u6211\u4eec\u9009\u62e9\u4e86 $dp_j$\uff0c\u90a3\u4e48 $\\forall k,r_j<l_k\\land c_k=c_i$ \u7684 $k$ \u4e5f\u662f\u53ef\u4ee5\u9009\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u66f4\u65b0\u5b8c $dp_i$ \u540e\uff0c\u5148\u627e\u5230\u6ee1\u8db3 $c_j\\not=c_i\\land r_j<l_i$ \u7684\u6700\u5927\u7684 $j$ \uff0c\u5bf9 $c_i \\operatorname{xor} 1$ \u5bf9\u5e94\u7ebf\u6bb5\u6811\u7684\u533a\u95f4 $[1,j]$ \u4e0a\u505a\u4e00\u6b21\u533a\u95f4\u52a0\u3002\n\n~~2600\u6076\u8bc4\uff0c2200\u5dee\u4e0d\u591a~~\n\n----------------------------------------------------\n\n### code\uff1a\n\n```c++\n#include <bits/stdc++.h>\n#define mk make_pair\n#define pb push_back\n#define eb emplace_back\n#define lob lower_bound\n#define fi first\n#define se second\nusing namespace std;\nconst int N = 2e5 + 10;\nconst int INF = INT_MAX;\ntypedef pair <int, int> pii;\ninline int read ( )\n{\n    int x = 0, f = 1;\n    char ch = getchar ( );\n    while (ch < '0' || ch > '9') { if (ch == '-') f = - 1; ch = getchar ( );}\n    while (ch >= '0' && ch <='9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar ( );}\n    return x * f;\n}\nint n;\nint dp[N];\nstruct node {\n\tint l, r, c;\n\tbool operator < (const node &a) const {\n\t\treturn r == a.r ? l < a.l : r < a.r;\n\t}\n} a[N];\nstruct node2 {\n\tint l, r, id;\n\tnode2 () {}\n\tnode2 (int _l, int _r, int _id) { l = _l; r = _r; id = _id; }\n\tbool operator < (const node2 &a) const {\n\t\treturn r == a.r ? (id == a.id ? l < a.l : id < a.id) : r < a.r;\n\t}\n};\nvector <node2> v[2];\nstruct Seg_tree {\n    #define lson rt << 1\n    #define rson rt << 1 | 1\n    struct node {\n        int mx, tag;\n        #define mx(rt) tree[rt].mx\n        #define tag(rt) tree[rt].tag\n    } tree[N << 2];\n    inline void pushup (int rt) { mx(rt) = max (mx(lson), mx(rson)); }\n    void spread (int rt)\n\t{\n\t\tif (tag(rt))\n\t\t{\n\t\t\tmx(lson) += tag(rt); mx(rson) += tag(rt);\n\t\t\ttag(lson) += tag(rt); tag(rson) += tag(rt);\n\t\t\ttag(rt) = 0;\n\t\t}\n\t}\n    void modify (int rt, int l, int r, int L, int R, int val)\n    {\n        if (L <= l && r <= R) { mx(rt) += val; tag(rt) += val; return ; }\n        spread (rt);\n        int mid = (l + r) >> 1;\n        if (L <= mid) modify (lson, l, mid, L, R, val);\n        if (R > mid) modify (rson, mid + 1, r, L, R, val);\n        pushup (rt);\n    }\n    int query (int rt, int l, int r, int L, int R)\n\t{\n\t\tif (L <= l && r <= R) return mx(rt);\n\t\tspread (rt);\n\t\tint mid = (l + r) >> 1, res = 0;\n\t\tif (L <= mid) res = max (res, query (lson, l, mid, L, R));\n\t\tif (R > mid) res = max (res, query (rson, mid + 1, r, L, R));\n\t\treturn res;\n\t}\n} T[2];\nsigned main()\n{\n    n = read ();\n    for (int i = 1; i <= n; i++) a[i].l = read (), a[i].r = read (), a[i].c = read () - 1;\n\tsort (a + 1, a + n + 1);\n\tfor (int i = 1; i <= n; i++) v[a[i].c].eb (a[i].l, a[i].r, i);\n\tfor (int i = 0; i <= 1; i++) sort (v[i].begin (), v[i].end ());\n\tint sum[2] = {0, 0};\n\tfor (int i = 1; i <= n; i++) dp[i] = ++sum[a[i].c];\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tint c = a[i].c ^ 1;\n\t\tint t = lob (v[c].begin(), v[c].end(), node2(0, a[i].l, 0)) - v[c].begin() - 1;\n\t\tif (~t)\n\t\t{\n\t\t\tdp[i] = max (dp[i], T[c].query (1, 1, n, 1, v[c][t].id) + 1);\n\t\t\tT[c].modify (1, 1, n, 1, v[c][t].id, 1);\n\t\t}\n\t\tT[a[i].c].modify (1, 1, n, i, i, dp[i]);\n\t}\n\tint ans = 0;\n\tfor (int i = 1; i <= n; i++) ans = max (ans, dp[i]);\n\tprintf (\"%d\\n\", max (ans, max (sum[0], sum[1])));\n    return 0;\n}\n```",
        "postTime": 1668487278,
        "uid": 177837,
        "name": "violin_wyl",
        "ccfLevel": 6,
        "title": "CF1389F Bicolored Segments"
    },
    {
        "content": "> \u6709 $n$ \u6761\u7ebf\u6bb5\uff0c\u7b2c $i$ \u6761\u7ebf\u6bb5\u4e3a $[l_i, r_i]$\u3002\u6bcf\u6761\u7ebf\u6bb5\u4e3a\u9ed1\u8272\u6216\u767d\u8272\u3002\u6211\u4eec\u79f0\u4e00\u5bf9\u7ebf\u6bb5\u4e0d\u597d\u5f53\u4e14\u4ec5\u5f53\u989c\u8272\u4e0d\u540c\u4e14\u6709\u516c\u5171\u70b9\u3002\u6c42\u4e00\u4e2a\u6700\u5927\u7684\u5b50\u96c6\u4f7f\u5f97\u4e0d\u5b58\u5728\u4e0d\u597d\u7684\u7ebf\u6bb5\u5bf9\u3002\n> \n> $n \\le 2 \\cdot 10 ^ 5$\u3002\n\n\u8001\u5957\u8def\u4e86\uff0c\u6309\u7167 $r_i$ \u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u52a0\u5165\u3002\n\n\u8003\u8651\u8bb0 $black[i][j]$ \u8868\u793a\u7b2c $i$ \u6761\u7ebf\u6bb5\u52a0\u5165\u540e\uff0c\u6700\u540e\u4e00\u6761\u9ed1\u8272\u7ebf\u6bb5\u53f3\u7aef\u70b9\u5728 $j$ \u7684\u6700\u5927\u7b54\u6848\uff1b\u540c\u7406\uff0c\u8bb0 $white[i][j]$ \u4e3a\u767d\u8272\u7ebf\u6bb5\u53f3\u7aef\u70b9\u5728 $j$ \u7684\u6700\u5927\u7b54\u6848\u3002\n\n\u52a0\u5165\u7b2c $i$ \u6761\u7ebf\u6bb5\u65f6\uff0c\u4e0d\u59a8\u8bbe\u5176\u4e3a\u9ed1\u8272\uff0c\u767d\u8272\u540c\u7406\u3002\u90a3\u4e48\u6709\u8f6c\u79fb\u5f0f\uff1a\n\n- \u5982\u679c\u4e0d\u9009\u62e9\u8fd9\u6761\u7ebf\u6bb5\uff0c$black[i][j] \\gets black[i - 1][j]$\uff0c$white[i][j] \\gets white[i - 1][j]$\u3002\n- \u5982\u679c\u9009\u62e9\u8fd9\u6761\u7ebf\u6bb5\uff0c\u5219\u4e0d\u80fd\u9009\u62e9\u53f3\u7aef\u70b9\u5728 $[l_i, r_i]$ \u95f4\u7684\u767d\u8272\u7ebf\u6bb5\uff0c\u800c\u5de6\u7aef\u70b9\u5728 $[l_i, r_i]$ \u95f4\u7684\u9ed1\u8272\u7ebf\u6bb5\u968f\u4fbf\u9009\u3002\u90a3\u4e48\u6709\uff0c$\\displaystyle black[i][r_i] \\xleftarrow{\\max} \\max\\limits_{0 \\le j \\lt l_i}(white[i - 1][j] + count\\_black(j + 1, r_i))$\uff0c\u5176\u4e2d $count\\_black(l, r)$ \u8868\u793a\u5de6\u53f3\u7aef\u70b9\u90fd\u5728 $[l, r]$ \u4e4b\u95f4\u7684\u9ed1\u8272\u7ebf\u6bb5\u6570\u91cf\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a $count\\_black()$ \u7684\u8d21\u732e\u5148\u8d21\u732e\u5230 $white[i][j]$ \u91cc\u9762\uff0c\u7136\u540e\u53d8\u6210\u4e00\u4e2a\u524d\u7f00\u6700\u5927\u503c\u8f6c\u79fb\u3002\u51c6\u786e\u6765\u8bf4\uff0c\u6bcf\u6b21\u8981\u52a0\u5165\u4e00\u6761\u9ed1\u8272\u7ebf\u6bb5 $[l, r]$ \u4e4b\u524d\uff0c\u7ed9\u6240\u6709\u7684 $j \\lt l$ \u7684 $white[i][j]$ \u52a0\u4e0a $1$\uff0c\u8fd9\u662f\u4e2a\u524d\u7f00\u52a0\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u53ea\u8981\u5b9e\u73b0\u5355\u70b9\u4fee\u6539\u3001\u524d\u7f00\u52a0\u3001\u67e5\u524d\u7f00\u6700\u5927\u503c\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n \\log n)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n\nconst int MaxN = 200000, MaxV = 400000;\nconst int MaxNodes = (1 << 20);\n\nint N, V;\nstruct seg_t { int l, r, t; } A[MaxN + 5];\n\nstruct SegTree {\n  int L[MaxNodes + 5], R[MaxNodes + 5];\n  int Max[MaxNodes + 5], Tag[MaxNodes + 5];\n\n  inline void upt(int x, int v) {\n    Max[x] += v;\n    Tag[x] += v;\n  }\n\n  inline void pushdown(int i) {\n    if (Tag[i] != 0) {\n      upt(i << 1, Tag[i]);\n      upt(i << 1 | 1, Tag[i]);\n      Tag[i] = 0;\n    }\n  }\n\n  void buildTree(int left, int right, int i = 1) {\n    L[i] = left, R[i] = right;\n    Max[i] = Tag[i] = 0;\n    if (L[i] == R[i]) return;\n    int mid = (L[i] + R[i]) >> 1;\n    buildTree(left, mid, i << 1);\n    buildTree(mid + 1, right, i << 1 | 1);\n  }\n\n  void updateTree(int left, int right, int val, int i = 1) {\n    if (left > right) return;\n    if (left == L[i] && right == R[i]) {\n      upt(i, val);\n      return;\n    }\n    pushdown(i);\n    int mid = (L[i] + R[i]) >> 1;\n    if (right <= mid) updateTree(left, right, val, i << 1);\n    else if (left > mid) updateTree(left, right, val, i << 1 | 1);\n    else updateTree(left, mid, val, i << 1), updateTree(mid + 1, right, val, i << 1 | 1);\n    Max[i] = std::max(Max[i << 1], Max[i << 1 | 1]);\n  }\n\n  void updatePos(int pos, int val, int i = 1) {\n    if (L[i] == R[i]) {\n      Max[i] = val;\n      return;\n    }\n    pushdown(i);\n    int mid = (L[i] + R[i]) >> 1;\n    if (pos <= mid) updatePos(pos, val, i << 1);\n    else updatePos(pos, val, i << 1 | 1);\n    Max[i] = std::max(Max[i << 1], Max[i << 1 | 1]);\n  }\n\n  int queryTree(int left, int right, int i = 1) {\n    if (left > right) return 0;\n    if (L[i] == left && R[i] == right) return Max[i];\n    pushdown(i);\n    int mid = (L[i] + R[i]) >> 1;\n    if (right <= mid) return queryTree(left, right, i << 1);\n    else if (left > mid) return queryTree(left, right, i << 1 | 1);\n    else return std::max(queryTree(left, mid, i << 1), queryTree(mid + 1, right, i << 1 | 1));\n  }\n};\nSegTree Wh, Bl;\n\ntemplate <typename Int>\ninline void tense(Int &x, Int y) { if (y > x) x = y; }\ntemplate <typename Int>\ninline void relax(Int &x, Int y) { if (y < x) x = y; }\n\nvoid init() {\n  static int d[MaxV + 5];\n  scanf(\"%d\", &N);\n  for (int i = 1; i <= N; ++i) {\n    scanf(\"%d %d %d\", &A[i].l, &A[i].r, &A[i].t);\n    d[++V] = A[i].l, d[++V] = A[i].r;\n  }\n  std::sort(d + 1, d + 1 + V);\n  for (int i = 1; i <= N; ++i) {\n    A[i].l = std::lower_bound(d + 1, d + 1 + V, A[i].l) - d;\n    A[i].r = std::lower_bound(d + 1, d + 1 + V, A[i].r) - d;\n  }\n}\n\ninline bool seg_cmp(const seg_t &x, const seg_t &y) { return x.r < y.r; }\n\nvoid solve() {\n  std::sort(A + 1, A + 1 + N, seg_cmp);\n  Wh.buildTree(0, V), Bl.buildTree(0, V);\n  for (int l = 1, r = 0; l <= N; l = r + 1) {\n    while (r < N && A[r + 1].r == A[l].r) r++;\n    int wh_max = 0, bl_max = 0;\n    for (int i = l; i <= r; ++i) {\n      if (A[i].t == 2) Wh.updateTree(0, A[i].l - 1, 1);\n      else Bl.updateTree(0, A[i].l - 1, 1);\n    }\n    for (int i = l; i <= r; ++i) {\n      // printf(\"(%d, %d, %d)\\n\", A[i].l, A[i].r, A[i].t);\n      if (A[i].t == 1) tense(wh_max, Bl.queryTree(0, A[i].l - 1));\n      else tense(bl_max, Wh.queryTree(0, A[i].l - 1));\n    }\n    // printf(\"wh_max = %d, bl_max = %d\\n\", wh_max, bl_max);\n    Wh.updatePos(A[l].r, wh_max);\n    Bl.updatePos(A[l].r, bl_max);\n  }\n  printf(\"%d\\n\", std::max(Wh.queryTree(0, V), Bl.queryTree(0, V)));\n}\n\nint main() {\n  init();\n  solve();\n  return 0;\n}\n```",
        "postTime": 1596097356,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1389F \u3010Bicolored Segments\u3011"
    }
]