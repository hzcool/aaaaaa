[
    {
        "content": "## \u9898\u610f\uff1a\n\u7ed9\u51fa\u4e00\u4e2a\u6709$n$\u4e2a\u7ed3\u70b9\uff0c$m$\u6761\u5e26\u6743\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u8fb9\u6743\u4e3a\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u6240\u9700\u7684\u65f6\u95f4\u3002\u6709$k$\u4e2a\u70b9\u8bbe\u6709\u4f20\u9001\u95e8\uff0c\u521d\u59cb\u65f6\uff0c\u4f20\u9001\u95e8\u90fd\u5173\u95ed\u3002\u4f60\u4ece$1$\u53f7\u70b9\u51fa\u53d1\uff0c\u6bcf\u5f53\u4f60\u5230\u8fbe\u4e00\u4e2a\u5df2\u5f00\u542f\u4f20\u9001\u95e8\u7684\u70b9\uff0c\u90a3\u4e2a\u4f20\u9001\u95e8\u5c31\u4f1a\u6c38\u4e45\u5f00\u542f\uff0c\u4f60\u53ef\u4ee5\u4ece\u4e00\u4e2a\u5f00\u542f\u7684\u4f20\u9001\u95e8\u82b1\u8d39$0$\u65f6\u95f4\u5230\u8fbe\u53e6\u4e00\u4e2a\u5f00\u542f\u7684\u4f20\u9001\u95e8\u3002\u6c42\u5f00\u542f\u6240\u6709\u4f20\u9001\u95e8\u6240\u9700\u7684\u6700\u5c0f\u65f6\u95f4\u3002\n\n## \u9898\u89e3\n\u4ece\u6709\u4f20\u9001\u95e8\u7684\u70b9$0$\u82b1\u8d39\u4f20\u9001\u5230\u5df2\u8d70\u8fc7\u7684\u6709\u4f20\u9001\u95e8\u7684\u70b9\uff0c\u8fd9\u4e2a\u6027\u8d28\u975e\u5e38\u5999\uff0c\u5176\u5b9e\u5c31\u662f$Prim$\u7b97\u6cd5\u627e\u4e0e\u5f53\u524d\u8fde\u901a\u5757\u6700\u8fd1\u7684\u70b9\u3002\u6240\u4ee5\u9898\u76ee\u5c31\u53d8\u6210\u4e86\u5728\u4e00\u4e2a$n$\u4e2a\u70b9\uff0c$m$\u6761\u8fb9\u7684\u7684\u65e0\u5411\u56fe\u4e2d\u6c42\u6700\u5c0f\u751f\u6210\u6811\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8dd1\u4e00\u904d\u5168\u6e90\u6700\u77ed\u8def\uff0c\u77e5\u9053\u6bcf\u4e2a\u6709\u4f20\u9001\u95e8\u7684\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u76f4\u63a5$Prim$\u6216\u8005$Kruskal$\u3002\u4e0d\u8fc7\u663e\u7136\uff0c\u8fd9\u6837\u8fc7\u4e0d\u53bb\n\n\u4e0a\u9762\u8fd9\u6837\u505a\u74f6\u9888\u5728\u54ea\u5462\uff1f\u662f\u8dd1\u5168\u6e90\u6700\u77ed\u8def\uff0c\u6c42\u4efb\u610f\u4e24\u4e2a\u6709\u4f20\u9001\u95e8\u7684\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n\n\u8003\u8651\u4f18\u5316\u8fd9\u4e00\u6b65\n\n\u6839\u636e$Prim$\u6216\u8005$Kruskal$\u7684\u6027\u8d28\uff0c\u6bcf\u6b21\u6211\u4eec\u90fd\u662f\u627e\u6700\u8fd1\u7684\u90a3\u4e00\u6761\u8fb9\uff0c\u56e0\u4e3a\u6700\u8fd1\u7684\u90a3\u4e00\u6761\u8fb9\u662f\u4e0d\u53ef\u80fd\u88ab\u5176\u4ed6\u7684\u8fb9\u66f4\u65b0\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u6761\u8fb9\u62c6\u89e3\uff0c\u6c42\u51fa\u4e24\u4e2a\u7aef\u70b9\u6700\u8fd1\u7684\u6709\u4f20\u9001\u95e8\u7684\u70b9\n\n\u627e\u6700\u8fd1\u7684\u6709\u4f20\u9001\u95e8\u7684\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u6709\u4f20\u9001\u95e8\u7684\u70b9\u653e\u8fdb\u5806\u91cc\u8dd1\u4e00\u904d\u591a\u6e90\u70b9\u7684$dijkstra$\n\n\u5982\u5bf9\u4e8e\u8fb9$(x \\rightarrow  y)$\uff0c\u6211\u4eec\u6c42\u51fa\u54ea\u4e2a\u6709\u4f20\u9001\u95e8\u7684\u70b9\u5230$x$\u6700\u8fd1\uff0c$y$\u4e5f\u4e00\u6837\uff0c\u7136\u540e\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u52a0\u4e0a$dis_x+dis_y$\uff0c\u8fd9\u6761\u8fb9\u4e5f\u5c31\u53d8\u6210\u4e86\u8fde\u63a5\u4e24\u4e2a\u6709\u4f20\u9001\u95e8\u7684\u70b9\u7684\u8fb9\n\n\u5efa\u56fe\u5efa\u5b8c\u540e\uff0c\u53ea\u6709\u8dd1$Prim$\u6216\u8005$Kruskal$\u5c31\u884c\n\n## code\n```\n#include<bits/stdc++.h>\n#define maxn 1000005\n#define maxe 10000005\n#define ll long long\nusing namespace std;\nconst ll INF=1e16;\nint Id[maxe],n,m,x,y,z,lnk[maxn],Now,nxt[maxn],tot,N,son[maxn],Q[maxn],Nx[maxn],w[maxn],fa[maxn];\nll heap[maxe],dis[maxn],Ans=INF;\nbool vis[maxn];\nstruct lc{\n\tint x,y;ll z;\n\tbool operator <(const lc b)const{return z<b.z;}\n}e[maxn];\ninline int read(){\n\tint ret=0;char ch=getchar();\n\twhile (ch<'0'||ch>'9') ch=getchar();\n\twhile (ch<='9'&&ch>='0') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret;\n}\ninline void Swap(int x,int y){swap(heap[x],heap[y]);swap(Id[x],Id[y]);}\ninline void add(int x,int y,int z){nxt[++tot]=lnk[x];lnk[x]=tot;son[tot]=y;w[tot]=z;}\ninline void Put(int id,ll x){heap[Now=++tot]=x;Id[tot]=id;while (Now>1&&heap[Now]<heap[Now>>1]) Swap(Now,Now>>1),Now>>=1;}\ninline int Get(){\n\tint Mi=Id[1];Id[1]=Id[tot],heap[1]=heap[tot],tot--,Now=1;int Son=2;\n\twhile (Son<=tot){\n\t\tif (Son<tot&&heap[Son+1]<heap[Son]) Son++;\n\t\tif (heap[Now]>heap[Son]) Swap(Now,Son),Now=Son,Son=Now<<1;\n\t    else break;\n\t}\n\treturn Mi;\n}\ninline void Dij(){\n\tfor (int i=1;i<=n;i++) Nx[i]=vis[i]=0,dis[i]=INF;tot=0;\n\tfor (int i=1;i<=N;i++) dis[Q[i]]=0,Nx[Q[i]]=Q[i],Put(Q[i],0);\n\twhile (tot){\n\t\tint Nn=Get();if (vis[Nn]) continue;vis[Nn]=1;\n\t    for (int i=lnk[Nn];i;i=nxt[i])\n\t\t  if (!vis[son[i]]&&dis[Nn]+w[i]<dis[son[i]]) dis[son[i]]=dis[Nn]+w[i],Nx[son[i]]=Nx[Nn],Put(son[i],dis[son[i]]);\n\t}\n}\ninline int Getfa(int x){return fa[x]==x? x:fa[x]=Getfa(fa[x]);}\nint main(){\n\tn=read(),m=read();\n\tfor (int i=1;i<=m;i++) x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z),e[i]=(lc){x,y,z};\n\tQ[++N]=1;tot=0;\n\tDij();N=read();\n\tfor (int i=1;i<=N;i++) Q[i]=read(),Ans=min(Ans,dis[Q[i]]);\n\tDij();\n\tfor (int i=1;i<=n;i++) fa[i]=i;\n\tfor (int i=1;i<=m;i++){\n\t\te[i].z+=dis[e[i].x]+dis[e[i].y];\n\t\te[i].x=Nx[e[i].x],e[i].y=Nx[e[i].y];\n\t}\n\tsort(e+1,e+m+1);\n\tfor (int i=1;i<=m;i++){\n\t\tint fx=Getfa(e[i].x),fy=Getfa(e[i].y);\n\t\tif (fx==fy) continue;\n\t\tAns+=e[i].z;fa[fx]=fy;\n\t}\n\tprintf(\"%lld\",Ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1595462842,
        "uid": 108047,
        "name": "LlLlCc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF196E \u3010Opening Portals\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u7b80\u5316\u4e00\u4e0b\u9898\u76ee\u3002\u5f53\u5230\u8fbe\u7b2c\u4e00\u4e2a\u4f20\u9001\u95e8\u70b9\u540e\uff0c\u56e0\u4e3a\u5df2\u7ecf\u8fc7\u4f20\u9001\u95e8\u53ef\u4ee5\u4e92\u76f8\u4f20\u9001\uff0c\u6240\u4ee5\u5269\u4e0b\u7684\u65f6\u95f4\u5c31\u662f\u6240\u6709\u4f20\u9001\u95e8\u70b9\u4e24\u4e24\u4e4b\u95f4\u8fde\u6743\u503c\u7b49\u4e8e\u6700\u77ed\u8def\u7684\u8fb9\u5efa\u6210\u7684\u5b8c\u5168\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002**\u56e0\u6b64\u7b54\u6848\u5c31\u662f\u90a3\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u518d\u52a0\u4e0a$ 1$ \u53f7\u70b9\u5230\u6700\u8fd1\u7684\u4f20\u9001\u95e8\u7684\u8ddd\u79bb\u3002**\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a $O(n^2\\log n)$ \u7684\u7b97\u6cd5\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5982\u4f55\u5feb\u901f\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\u4e0d\u96be\u60f3\u5230\uff0c\u5982\u679c\u4f20\u9001\u95e8\u70b9 $u$ \u5230 $v$ \u7684\u6700\u77ed\u8def\u4e0a\u6709\u5176\u4ed6\u4f20\u9001\u95e8\u70b9\uff0c\u90a3\u4e48 $(u,v)$ \u4e00\u5b9a\u4e0d\u5728MST\u4e0a\u3002\u9057\u61be\u7684\u662f\uff0c\u5355\u5355\u8fd9\u4e48\u526a\u679d\u662f\u6ca1\u6709\u7528\u7684\uff0c\u8fb9\u6570\u8fd8\u662f\u4f1a\u88ab\u4e0b\u56fe\u6240\u793a\u7684\u83ca\u82b1\u5361\u6210 $O(n^2)$\u3002\n\n![](https://images.cnblogs.com/cnblogs_com/cly-none/1215696/o_tmp.png)\n\n\u4f46\u662f\uff0c\u8fd9\u4e2a\u5931\u8d25\u7684\u5c1d\u8bd5\u542f\u793a\u6211\u4eec\u8981\u526a\u53bb\u4e00\u4e9b\u4e0d\u53ef\u80fd\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u3002\u8003\u8651Kruskal\u7684\u8fc7\u7a0b\uff0c\u4e00\u6761\u8fb9\u53ea\u8981\u5728\u4e00\u4e2a\u5176\u4ed6\u8fb9\u90fd\u201c\u5c0f\u4e8e\u201d\u5b83\u7684\u73af\u4e0a\uff08\u6307\u8fb9\u6743\u5c0f\u4e8e\u6216\u8fb9\u6743\u7b49\u4e8e\u4f46\u679a\u4e3e\u987a\u5e8f\u9760\u524d\uff09\uff0c\u5c31\u4e00\u5b9a\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002\n\n**\u4e0b\u9762\u6211\u4eec\u6765\u8fdb\u884c\u4f18\u5316\uff1a**\n\n\u6211\u4eec\u96be\u4ee5\u76f4\u63a5\u5224\u65ad\u8fd9\u4e2a\u6761\u4ef6\uff0c\u4f46\u662f\uff0c\u5bf9\u4e8e\u4e00\u6761\u6700\u77ed\u8def\u5f84\uff0c\u5982\u679c\u5b83\u4e0a\u9762\u7684\u6bcf\u4e00\u6761\u8fb9\u4e24\u7aef\u6700\u8fd1\u7684\u4f20\u9001\u95e8\u70b9\u90fd\u4e0d\u662f\u8fd9\u6761\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u5c31\u53ef\u4ee5\u6392\u9664\u4e86\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u6784\u5efa\u4e00\u5f20\u65b0\u56fe $G'$\uff0c\u5bf9\u4e8e\u539f\u56fe\u4e0a\u6bcf\u4e00\u6761\u8fb9 $(u,v)$\uff0c\u8bbe\u4e0e $u$ \u6700\u8fd1\u7684\u4efb\u610f\u4e00\u4e2a\u4f20\u9001\u95e8\u70b9\u4e3a $nex_u$\uff0c\u4e0e $v$ \u6700\u8fd1\u7684\u662f$nex_v$\uff0c\u90a3\u4e48\uff0c\u5728\u65b0\u56fe\u4e0a\u5efa\u4e00\u6761 $(nex_u,nex_v)$ \u7684\u8fb9\uff0c\u8fb9\u6743\u662f\u539f\u8fb9\u6743\u52a0\u4e0a $dis(nex_u,u)+dis(nex_v,v)$ \u3002\u8fd9\u76f8\u5f53\u4e8e\u8003\u8651\u6240\u6709\u8fb9\u6240\u5728\u7684\u6700\u77ed\u8def\uff0c\u5e76\u4e14\uff0c\u6240\u6709\u6ca1\u6709\u88ab\u8003\u8651\u5230\u7684 \u6700\u77ed\u8def\u4e00\u5b9a\u662f\u53ef\u4ee5\u5220\u53bb\u7684\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u628a\u8fb9\u6570\u526a\u5230\u4e86 $O(n)$ \u7ea7\u522b\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\u3002",
        "postTime": 1598520054,
        "uid": 316896,
        "name": "Dimly_dust",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF196E \u3010Opening Portals\u3011"
    },
    {
        "content": "\u6211\u4eec\u73b0\u5728\u5728 $1$ \u53f7\u8282\u70b9\u3002\u6211\u4eec\u9700\u8981\u8d70\u5230\u4e00\u4e2a\u4f20\u9001\u95e8\u628a\u4ed6\u5f00\u8d77\u6765\u3002\n\n\u6211\u4eec\u73b0\u5728\u8d70\u5230\u4e86\u4e00\u4e2a\u4f20\u9001\u95e8\u3002\u6211\u4eec\u9700\u8981\u518d\u8d70\u5230\u4e00\u4e2a\u4f20\u9001\u95e8\u3002\n\n\u6211\u4eec\u73b0\u5728\u8d70\u5230\u4e86\u4e24\u4e2a\u4f20\u9001\u95e8\u3002\u6211\u4eec\u60f3\u8d70\u5230\u7b2c\u4e09\u4e2a\u4f20\u9001\u95e8\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4f20\u9001\u5230\u7b2c\u4e00\u4e2a\u4f20\u9001\u95e8\u518d\u8d70\u8fc7\u53bb\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4ece\u7b2c\u4e8c\u4e2a\u4f20\u9001\u95e8\u8d70\u5230\u7b2c\u4e09\u4e2a\u4f20\u9001\u95e8\u3002\n\n\u6211\u4eec\u73b0\u5728\u6709\u4e86\u4e09\u4e2a\u4f20\u9001\u95e8\u3002\n\n\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6211\u4eec\u6bcf\u6b21\u53ea\u8981\u9009\u53d6\u8ddd\u79bb\u4e0b\u4e00\u4e2a\u4f20\u9001\u95e8\u6700\u8fd1\u7684\u4e00\u4e2a\u4f20\u9001\u95e8\uff0c\u7136\u540e\u8d70\u8fc7\u53bb\u5373\u53ef\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6700\u7ec8\u6211\u4eec\u7559\u4e0b\u7684\u8f68\u8ff9\u662f\u8fd9\u4e9b\u4f20\u9001\u95e8\u7684**\u6700\u5c0f\u751f\u6210\u6811**\u3002\n\n\u90a3\u4e48\u6211\u4eec\u4e00\u5f00\u59cb\u4ece $1$ \u53f7\u8282\u70b9\u5f00\u59cb\u5230\u7b2c\u4e00\u4e2a\u4f20\u9001\u95e8\uff0c\u5c31\u53ea\u8981\u9009\u53d6 $1$ \u53f7\u8282\u70b9\u5230\u8fd9\u4e9b\u4f20\u9001\u95e8\u5f53\u4e2d\u7684\u6700\u77ed\u8def\u5f84\u5373\u53ef\u4e86\u3002\n\n\u73b0\u5728\u95ee\u9898\u53d8\u6210\u4e86\u5982\u4f55\u6c42\u8fd9 $k$ \u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u6709\u8da3\u7684\u4e8b\u5b9e\uff1a\u5bf9\u4e8e\u4e24\u4e2a\u7279\u6b8a\u70b9 $u$ \u548c $v$\uff0c\u6211\u4eec\u5e0c\u671b\u4e0d\u5173\u5fc3\u8fd9\u4e24\u4e2a\u70b9\u5f53\u4e2d\u7684\u975e\u7279\u6b8a\u70b9\uff0c\u800c\u53ea\u8003\u8651 $u$ \u548c $v$ \u4e8c\u8005\u7684\u5173\u8054\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\uff1a**\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u540e\u6700\u5feb\u80fd\u600e\u6837\u5230\u7279\u6b8a\u70b9**\uff1f\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u7ed9\u4e00\u4e2a\u65e0\u5411\u56fe\u5b89\u4e00\u4e2a\u8d85\u7ea7\u539f\u70b9\uff0c\u548c\u4e00\u90e8\u5206\u70b9\u8fde\u8fb9\uff0c\u5c31\u80fd\u5b9e\u73b0**\u6240\u6709\u548c\u8d85\u7ea7\u539f\u70b9\u8fde\u8fb9\u7684\u70b9**\u4e0e**\u6bcf\u4e00\u4e2a\u4e0d\u548c\u8d85\u7ea7\u539f\u70b9\u8fde\u8fb9\u7684\u70b9**\u7684\u6700\u77ed\u8def\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u9884\u5904\u7406\u51fa\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5230\u6700\u8fd1\u7684\u7279\u6b8a\u70b9\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u91cd\u65b0\u5efa\u4e00\u6761\u8fb9\uff0c\u4e24\u4e2a\u7aef\u70b9 $u$ \u548c $v$ \u662f\u539f\u56fe\u7684\u4e24\u4e2a\u7aef\u70b9\u80fd\u5230\u8fbe\u7684**\u6700\u8fd1\u7684\u4f20\u9001\u95e8**\uff0c\u800c\u8fb9\u6743\u5c31\u662f $w_{u,v}+d_u+d_v$\uff0c\u5176\u4e2d $d_i$ \u662f $i$ \u5230**\u6700\u8fd1\u7684\u4f20\u9001\u95e8**\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u7136\u540e\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\u3002\n\n\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u6837\u4f8b $2$ \u8fc7\u4e0d\u53bb\u3002\n\n\u56e0\u4e3a\u5728\u6700\u7ec8\u6700\u5c0f\u751f\u6210\u6811\u7684\u56fe\u4e2d\uff0c\u7f16\u53f7\u4e3a $1$ \u7684\u70b9\u88ab\u5b64\u7acb\u4e86\uff0c\u6240\u4ee5**\u5f53\u524d\u88ab\u7eb3\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u70b9 $\\ge n$** \u8fd9\u4e00\u6761\u4ef6\u65e0\u6cd5\u5b9e\u73b0\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6392\u5e8f\u540e\u904d\u5386\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u6240\u6709\u7684\u8fb9\u90fd\u627e\u5b8c\u4e86\u90a3\u5c31\u9000\u51fa\u5373\u53ef\u3002\n\n\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff1a\u5728\u6bcf\u6b21\u627e\u8fb9\u65f6\u5982\u679c\u5f53\u524d\u8fb9\u7684\u7f16\u53f7\u5927\u4e8e $m$ \u4e86\u8981\u53ca\u65f6\u9000\u51fa\uff0c\u5426\u5219\u4f1a\u5728\u7b2c\u516d\u4e2a\u70b9\u51fa\u9519\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define fs(i,x,y,z) for(int i=x;i<=y;i+=z)\n#define ft(i,x,y,z) for(int i=x;i>=y;i+=z)\n#define int long long\n#define ull unsigned long long\n#define db double\n#define ms(a,b) memset(a,b,sizeof(a))\n#define sz(a) sizeof(a)\n#define pii pair<int,int>\nusing namespace std;\nconst int rw[]={-1,0,1,0,-1,1,-1,1},cl[]={0,1,0,-1,-1,1,1,-1};\nconst int N=400001,inf=0x3f3f3f3f;\ninline int read(){\n\tint date=0,w=1;char c=0;\n\twhile(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n\treturn date*w;\n}\nstruct edge{int w,nx,v,u;}e[N<<1],e2[N<<1];//e2\u4f5cMST\nint hd[N],totm,dis[N],hd2[N],totm2,point[N],done[N];//\u5efa\u4e00\u4e2a\u8d85\u7ea7\u539f\u70b9\u8fde\u5411\u6240\u6709\u5145\u7535\u7ad9\uff0c\u8fb9\u6743\u662f0\nint n,m,k,q,dad[N],pts[N],dis0=inf,pt[N];\nvoid add(int u,int v,int w){\n\te[++totm].v=v;e[totm].w=w;e[totm].u=u;\n\te[totm].nx=hd[u];hd[u]=totm;\n}\nbool cmp(edge x,edge y){return x.w<y.w;}\npriority_queue<pii,vector<pii>,greater<pii>> pq;\nvoid dij(int s){\n\tms(dis,0x3f);dis[s]=0;ms(point,0);fs(i,1,k,1) point[pts[i]]=pts[i];\n\tpq.push({0,s});\n\twhile(!pq.empty()){\n\t\tpii now=pq.top();pq.pop();\n\t\tint u=now.second,dist=now.first;\n\t\tif(dist!=dis[u]) continue;\n\t\tfor(int i=hd[u];i;i=e[i].nx){\n\t\t\tint v=e[i].v;\n\t\t\tif(dis[u]+e[i].w<dis[v]){\n\t\t\t\tdis[v]=dis[u]+e[i].w,pq.push({dis[v],v});\n\t\t\t\tif(!pt[v]) point[v]=point[u];\n\t\t\t} \n\t\t}\n\t}\n}\nint find(int x){return dad[x]==x?x:dad[x]=find(dad[x]);}\nvoid mrg(int x,int y){x=find(x),y=find(y);dad[max(x,y)]=min(x,y);}\nint kruskal(){\n\t//cout<<\"motherfucking m is \"<<m<<'\\n';\n\tsort(e2+1,e2+m+1,cmp);\n\tint finding=0,cur=1,res=0;\n\twhile(cur<=m&&finding<n){\n\t\tbool did=0;\n\t//\tcout<<\"cur is \"<<cur<<'\\n'; \n\t\tassert(cur<=m);\n\t\twhile(!did){\n\t\t\tassert(cur<=m);\n\t\t\tif(find(e2[cur].u)!=find(e2[cur].v)){\n\t\t\t\tmrg(e2[cur].u,e2[cur].v);did=1,finding+=((bool(done[e2[cur].u])^1)+(bool(done[e2[cur].v])^1));\n\t\t\t\tdone[e2[cur].u]=done[e2[cur].v]=1;\n\t\t\t\tres+=e2[cur].w;\n\t\t\t\t//printf(\"we choosed %lld now total is %lld\\n\",cur,res);//\u5982\u679c\u4e0d\u52a0\u90a3\u4e2abreak\u7684\u9650\u5236\u7684\u8bdd\uff0c\u8fd9\u91cccur\u4f1a\u8dd1\u5230800007\n\t\t\t}\n\t\t\tcur++;\n\t\t\tif(!did&&cur>m) break;\n\t\t}\n\t}\n\t//fs(i,1,n,1) cout<<find(i)<<' ';\n\t//cout<<'\\n';\n\treturn res;\n}\nsigned main(){\n\tn=read(),m=read();fs(i,1,n,1) dad[i]=i;//\u5e76\u67e5\u96c6 \n\tfs(i,1,m,1){\n\t\tint u=read(),v=read(),w=read();\n\t\tadd(u,v,w);add(v,u,w);\n\t\te2[i]={w,0,v,u};\n\t}\n\tk=read();dij(1);fs(i,1,k,1) pts[i]=read(),dis0=min(dis0,dis[pts[i]]),pt[pts[i]]=1;//1\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \n\tfs(i,1,k,1) add(n+1,pts[i],0),add(pts[i],n+1,0);\n\tdij(n+1);\n\tfs(i,1,m,1) e2[i].w+=dis[e2[i].v]+dis[e2[i].u],e2[i].v=point[e2[i].v],e2[i].u=point[e2[i].u];//\u8dd1\u6bcf\u4e2a\u70b9\u5230\u4ed6\u7684\u6700\u5c0f\u8ddd\u79bb\n\t//fs(i,1,m,1) cout<<e2[i].u<<' '<<e2[i].v<<' '<<e2[i].w<<'\\n'; \n\t//\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u6837\u8f6c\u53d8\u4ee5\u540e \n\t//puts(\"ok\");\n\t//\u7136\u540e\u6211\u4eec\u8981\u505a\u4e00\u4e2a\u65b0\u56fe\uff0c\u8fd9\u91cc\u5c31\u662f\u6700\u5c0f\u7684\u4ee3\u4ef7\n\tint d=kruskal();//assert(d!=-1);\n\tcout<<d+dis0;\n\treturn 0;\n}\n//\u8fd9\u91cc\u6211\u4eec\u8981\u6c42\u51fa\u6765\u6bcf\u4e2a\u70b9\u5230\u4f20\u9001\u95e8\u7684\u6700\u77ed\u8ddd\u79bb\n//\u8003\u8651\u50cf\u4e0a\u4e00\u9898\u4e00\u6837\n//\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u5173\u952e\u70b9\u7684\u6700\u77ed\u8def\n//\u7136\u540e\u5462\uff1f\u5bf9\u4e8e\u4e00\u4e2a\u8fb9\uff0c\u53ef\u4ee5\u628a[\u8ddd\u79bb\u4ed6\u4eec\u6700\u8fd1\u7684\u4f20\u9001\u95e8\u7684\u70b9]\u8fde\u8d77\u6765\uff0c\u6743\u503c\u4e3a[dis[i]+dis[j]+w[i][j]] \n//\u90a3\u4e48\u5177\u4f53\u5730\uff0c\u600e\u4e48\u53bb\u8bb0\u5f55\u5462\n//\u6bd4\u5982\u6211\u4eec\u73b0\u5728\u8d70\u5230\u4e86\u4e00\u4e2a\u5173\u53e3\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8bb0\u5f55\uff0c\u8bb0\u5f55\u5565\u5462\n//\u4ed6\u5230\u5e95\u662f\u8ddf\u7740\u8c01\n//\u56e0\u4e3a\u4f60\u8fd9\u4e2a\n```",
        "postTime": 1664551407,
        "uid": 336603,
        "name": "\u51fa\u8a00\u4e0d\u900a\u738b\u5b50",
        "ccfLevel": 0,
        "title": "CF196E"
    }
]