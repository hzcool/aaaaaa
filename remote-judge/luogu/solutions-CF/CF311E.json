[
    {
        "content": "## \u8fd9\u7bc7\u9898\u89e3\u5199\u7ed9\u50cf\u6211\u8fd9\u6837\u521a\u5b66\u7f51\u7edc\u6d41\u7684\u840c\u65b0\n\u4e3b\u8981\u56e0\u4e3a\u9898\u89e3\u770b\u4e86\u5f88\u4e45\u624d\u61c2\u5c31\u51b3\u5b9a\u81ea\u5df1\u5199\u7bc7\n\n### \u5206\u6790\n\n\u5206\u6790\u9898\u76ee\uff0c\u53d1\u73b0 $0/1 $\u6bd4\u8f83\u9ebb\u70e6\uff0c\u5148\u5047\u8bbe\u6240\u6709\u7684\u70b9\u90fd\u88ab\u6539\u4e3a $1$ .\u5f53\u524d\u7684\u7b54\u6848\u662f\uff1a\u6240\u6709 $1$\u8981\u6c42\u7684 $w$ \u4e4b\u548c $-$ \u6240\u6709 $0$ \u70b9\u7684\u4fee\u6539\u4ee3\u4ef7 $-$ $g$ \u4e58\u4e0a $0$ \u8981\u6c42\u4e2d\u8981\u6c42\u5012\u7ed9\u7684\u4e2a\u6570.\n\n\u73b0\u5728\uff0c\u5982\u679c\u8981\u6ee1\u8db3\u4e00\u4e2a $0$\u8981\u6c42\uff0c\u90a3\u4e48\u8be5\u8981\u6c42\u6240\u6709\u76f8\u5173\u7684\u70b9\u90fd\u5fc5\u987b\u8fdb\u884c\u4fee\u6539\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u90a3\u4e48\u8be5\u70b9\u6240\u6709\u6709\u5173\u7684$1$\u8981\u6c42\u90fd\u4e0d\u6ee1\u8db3.\n\n\u53d1\u73b0\u8fd9\u4e2a\u6027\u8d28\u7b26\u5408[\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe](https://blog.csdn.net/can919/article/details/77603353)\uff0c\u8003\u8651\u5efa\u56fe.\n\n\u5bf9\u4e8e\u539f\u5148\u4e3a $0$ \u7684\u70b9\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u88ab\u4fee\u6539\u8fc7\u4e00\u6b21\uff0c\u5982\u679c\u4fee\u6539\u8be5\u70b9\u5c31\u76f8\u5f53\u4e8e\u53cd\u6094\uff0c\u4f1a\u4ea7\u751f $v$ \u7684\u8d21\u732e.\n\n\u5bf9\u4e8e\u539f\u5148\u4e3a $1$ \u7684\u70b9\uff0c\u5982\u679c\u4fee\u6539\u8be5\u70b9\uff0c\u4f1a\u4ea7\u751f $-v$ \u7684\u8d21\u732e.\n\n\u5bf9\u4e8e\u6bcf\u4e2a $0$\u8981\u6c42\uff0c\u5982\u679c\u5c06\u8be5\u8981\u6c42\u6539\u4e3a\u6ee1\u8db3\uff0c\u90a3\u4e48\u5bf9\u7b54\u6848\u4f1a\u4ea7\u751f $w$ \u8d21\u732e\uff0c\u5982\u679c\u8be5\u8282\u70b9\u8fd8\u8981\u5012\u8d34\uff0c\u4e00\u5171\u4f1a\u4ea7\u751f $w+g$ \u8d21\u732e\uff0c\u5c06\u8d21\u732e\u4f5c\u4e3a\u70b9\u7684\u6743\u503c\uff0c\u800c\u4e14\u6240\u6709\u4e0e\u5b83\u76f8\u5173\u7684\u70b9\u90fd\u5fc5\u987b\u9009\uff0c\u4e8e\u662f\u8fde\u8be5\u8981\u6c42\u5230\u6240\u6709\u6709\u5173\u7684\u70b9\u7684\u8fb9.\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u539f\u5148 $1$ \u8981\u6c42\uff0c\u5982\u679c\u5c06\u8be5\u8981\u6c42\u6539\u4e3a\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48\u5bf9\u7b54\u6848\u4f1a\u4ea7\u751f $-w $\u8d21\u732e\uff0c\u5982\u679c\u8fd8\u8981\u5012\u8d34\uff0c\u4e00\u5171\u4f1a\u4ea7\u751f $-w-g$ \u8d21\u732e\uff0c\u5c06\u8d21\u732e\u4f5c\u4e3a\u70b9\u7684\u6743\u503c\uff0c\u800c\u4e14\u6240\u6709\u4e0e\u5b83\u76f8\u5173\u7684\u70b9\u4e00\u4e2a\u88ab\u4fee\u6539\u8be5\u8981\u6c42\u4e5f\u4f1a\u4e0d\u6ee1\u8db3\uff0c\u6240\u4ee5\u8fde\u6240\u6709\u6709\u5173\u7684\u70b9\u5230\u8be5\u8981\u6c42\u7684\u8fb9\u3002\n\n\u4e8e\u662f\u95ee\u9898\u53d8\u6210\u4e86\u5f53\u524d\u7b54\u6848\u52a0\u4e0a\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff0c\u5269\u4e0b\u95ee\u9898\u5c31\u5f88\u597d\u89e3\u51b3.\n\n### \u9898\u89e3\n\n\u628a\u56fe\u5efa\u6210\u7f51\u7edc\uff0c\u5bf9\u4e8e\u539f\u5148\u4e3a $0$ \u7684\u70b9\uff0c\u5efa\u4e00\u6761\u6e90\u70b9\u5230\u8be5\u70b9\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a $v$ \uff0c\u5bf9\u4e8e\u539f\u5148\u4e3a $1$ \u7684\u70b9\uff0c\u5efa\u4e00\u6761\u8be5\u70b9\u5230\u6c47\u70b9\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a $v$ .\n\n\u5bf9\u4e8e $0$\u8981\u6c42\uff0c\u5efa\u4e00\u6761\u6e90\u70b9\u5230\u8be5\u8981\u6c42\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a $w$ \uff0c\u5982\u679c\u9700\u8981\u5012\u8d34\u8fb9\u6743\u4e3a $w+g$ \uff0c\u518d\u5efa\u8be5\u8981\u6c42\u5230\u6240\u6709\u6709\u5173\u70b9\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a $\\infty$ .\n\n\u5bf9\u4e8e $1$\u8981\u6c42\uff0c\u5efa\u8be5\u8981\u6c42\u5230\u6c47\u70b9\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a $-w$ \uff0c\u5982\u679c\u9700\u8981\u5012\u8d34\u8fb9\u6743\u4e3a $-w-g$ \uff0c\u518d\u5efa\u6240\u6709\u6709\u5173\u70b9\u5230\u8be5\u8981\u6c42\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a $\\infty$.\n\n\u6700\u540e\u7b54\u6848\u52a0\u4e0a\u6240\u6709\u6b63\u8fb9\u6743 $-$ \u6700\u5c0f\u5272\uff0c\u53d1\u73b0\u6b63\u8fb9\u6743\u548c\u4e3a\u6240\u6709 $0$\u8981\u6c42 \u7684$w$\u4e4b\u548c $+$ \u6240\u6709$0$\u70b9\u7684\u4fee\u6539\u4ee3\u4ef7 $+$ $g$ \u4e58\u4e0a$0$\u8981\u6c42\u4e2d\u8981\u6c42\u5012\u7ed9\u7684\u4e2a\u6570\uff0c\u53d1\u73b0\u8fd9\u4e2a\u6570\u4e0e\u6700\u521d\u7b54\u6848\u52a0\u8d77\u6765\u5c31\u662f$\\sum w$.\n\n\u6700\u540e\u7b54\u6848\u5c31\u662f $\\sum w-$ \u6700\u5c0f\u5272.\n\n\u5982\u6709\u4e0d\u7406\u89e3\u7684\u53ef\u4ee5\u753b\u56fe\u6a21\u62df\u5c0f\u6570\u636e\u65b9\u4fbf\u7406\u89e3.\n\n### \u4ee3\u7801\n```cpp\n//limit txdy\n#include <bits/stdc++.h>\n#define rep(x, l, r) for(int x = l; x <= r; x++)\n#define repd(x, r, l) for(int x = r; x >= l; x--)\n#define clr(x, y) memset(x, y, sizeof(x))\n#define all(x) x.begin(), x.end()\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\n#define SZ(x) ((int)x.size())\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\nconst int MAXN = 3e5 + 5;\nconst int INF = 1 << 30;\nconst int mod = 1000000009;\nint lowbit(int x){ return x & (-x);}\nint fast_power(int a, int b){ int x; for(x = 1; b; b >>= 1){ if(b & 1) x = 1ll * x * a % mod; a = 1ll * a * a % mod;} return x % mod;}\n\nqueue<int> que;\nint s, t, cnt;\nint head[MAXN], nxt[MAXN << 1], to[MAXN << 1], value[MAXN << 1];\nint a[MAXN], v[MAXN], dep[MAXN], cur[MAXN];\n\nvoid init(){\n\tcnt = 0;\n\tclr(head, -1);\n}\n\nvoid add(int u, int v, int val){\n\tnxt[cnt] = head[u];\n\thead[u] = cnt;\n\tto[cnt] = v;\n\tvalue[cnt] = val;\n\tcnt++;\n}\n\nvoid addedge(int u, int v, int val){\n\tadd(u, v, val);\n\tadd(v, u, 0);\n}\n\nint bfs(){\n\twhile(!que.empty()) que.pop();\n\tclr(dep, 0);\n\tque.push(s);\n\tdep[s] = 1;\n\twhile(!que.empty()){\n\t\tint u = que.front();\n\t\tque.pop();\n\t\tfor(int e = head[u]; e != -1; e = nxt[e]){\n\t\t\tint v = to[e];\n\t\t\tif(dep[v] || !value[e]) continue;\n\t\t\tdep[v] = dep[u] + 1;\n\t\t\tque.push(v);\n\t\t}\n\t}\n\tif(dep[t]) return 1;\n\treturn 0;\n}\n\nint dfs(int u, int flow){\n\tif(u == t) return flow;\n\tfor(int& e = cur[u]; e != -1; e = nxt[e]){\n\t\tint v = to[e];\n\t\tif(!value[e] || dep[v] != dep[u] + 1) continue;\n\t\tint q = dfs(v, min(flow, value[e]));\n\t\tif(q > 0){\n\t\t\tvalue[e] -= q;\n\t\t\tvalue[e ^ 1] += q;\n\t\t\treturn q;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint dinic(){\n\tint ans = 0;\n\twhile(bfs()){\n\t\trep(i, s, t) cur[i] = head[i];\n\t\twhile(int d = dfs(s, INF)) ans += d;\n\t}\n\treturn ans;\n}\n\nint main(){\n\tinit();\n\tint n, m, g;\n\tscanf(\"%d%d%d\", &n, &m, &g);\n\ts = 0, t = n + m + 1;\n\trep(i, 1, n) scanf(\"%d\", &a[i]);\n\trep(i, 1, n) scanf(\"%d\", &v[i]);\n\trep(i, 1, n){\n\t\tif(!a[i]) addedge(0, i, v[i]);\n\t\telse addedge(i, t, v[i]);\n\t}\n\tint ans = 0;\n\trep(i, 1, m){\n\t\tint b, w, k;\n\t\tscanf(\"%d%d\", &b, &w);\n\t\tans += w;\n\t\tscanf(\"%d\", &k);\n\t\trep(j, 1, k){\n\t\t\tint x;\n\t\t\tscanf(\"%d\", &x);\n\t\t\tif(!b) addedge(n + i, x, INF);\n\t\t\telse addedge(x, n + i, INF);\n\t\t}\n\t\tint p;\n\t\tscanf(\"%d\", &p);\n\t\tif(p) w += g;\n\t\tif(!b) addedge(s, n + i, w);\n\t\telse addedge(n + i, t, w);\n\t}\n\tprintf(\"%d\\n\", ans - dinic());\n    return 0;\n}\n```",
        "postTime": 1602853393,
        "uid": 149312,
        "name": "wze\u63cd\u6241\u4e86nm",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF311E \u3010Biologist\u3011"
    },
    {
        "content": "## \u6700\u5c0f\u5272\n### \u601d\u8def\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u6ee1\u8db3\u4e86\u6240\u6709\u7684\u8981\u6c42\uff0c\u90a3\u4e48\u6700\u5927\u7684\u6536\u76ca\u662f\u6bcf\u4e2a\u8981\u6c42\u6ee1\u8db3\u540e\u7684\u6536\u76ca\u7684\u548c\u90a3\u4e48\u95ee\u9898\u5c31\u7b49\u4ef7\u4e8e\uff0c\u6211\u635f\u5931\u54ea\u4e9b\u8981\u6c42\uff0c\u53ef\u4ee5\u8ba9\u6211\u5f97\u5230\u6700\u5c0f\u7684\u635f\u5931\u3002\u5728\u5efa\u56fe\u7684\u65f6\u5019\u7528\u6700\u5c0f\u5272\u7684\u601d\u7ef4\u8003\u8651\uff0c\u4f7f\u5f97\u6700\u540e\u7684\u6700\u5c0f\u5272\u5c31\u662f\u6700\u5c0f\u7684\u635f\u5931\u3002\n\n$$  ans=\\sum_{i=1}^{m} w_{i} -MinCut $$\n\n\u6240\u4ee5\u8fb9\u5c31\u4e00\u5b9a\u8981\u548c\u4ef7\u503c\u8054\u7cfb\u5230\u4e00\u8d77\u3002\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u8981\u6c42\uff1a\n\n* \u8981\u4e48\u6211\u5272\u65ad\u6240\u6709\u6539\u53d80\u548c1\u7684\u8fb9\u6765\u6ee1\u8db3\u5b83\n* \u8981\u4e48\u6211\u653e\u5f03\u8fd9\u4e2a\u8981\u6c42\uff0c\u5272\u65ad\u5b83\u7684\u4ef7\u503c\u8fb9\n\n### \u5efa\u56fe\n\u90a3\u4e48\u6211\u4eec\u7684\u5efa\u56fe\u5c31\u53ef\u4ee5\u8fd9\u4e48\u8003\u8651\uff1a\n\n* **\u539f\u59cb\u7ed3\u70b9**\n\n\u5982\u679c\u4e00\u4e2a\u70b9\u662f1\uff0c\u90a3\u4e48\u5411t\u8fde\u8fb9\uff0c\u4ef7\u503c\u662f\u8f6c\u6362\u7684\u4ef7\u503c\u3002\u5982\u679c\u4e00\u4e2a\u70b9\u662f0\uff0c\u5c31\u4eces\u5411\u5b83\u8fde\u8fb9\uff0c\u4ef7\u503c\u4e5f\u662f\u5bf9\u5e94\u8f6c\u6362\u7684\u4ef7\u503c\u3002\n\n* **\u8981\u6c42**\n\n\u5982\u679c\u662f\u89810\u7684\u8981\u6c42\uff0c\u90a3\u4e48\u4ece\u8d77\u70b9\u5411\u5b83\u8fde\u8fb9\u6743\u4e3a\u5bf9\u5e94\u6536\u76ca\u7684\u8fb9\uff0c\u7136\u540e\u4ece\u8be5\u8981\u6c42\u70b9\u5411\u6240\u6709\u7684\u6709\u5173\u8282\u70b9\u8fde\u6b63\u65e0\u7a77\u7684\u8fb9\u3002\n\n\u5982\u679c\u662f\u89811\u7684\u8981\u6c42\uff0c\u90a3\u4e48\u4ece\u6240\u6709\u6709\u5173\u8282\u70b9\u5411\u5b83\u8fde\u6b63\u65e0\u7a77\u7684\u8fb9\uff0c\u7136\u540e\u4ece\u8be5\u8981\u6c42\u8282\u70b9\u8fde\u5411\u7ec8\u70b9\uff0c\u4ef7\u503c\u4e3a\u5bf9\u5e94\u7684\u6536\u76ca\u3002\n\n\u5982\u679c\u4e00\u4e2a\u8981\u6c42\u4e0d\u6ee1\u8db3\u4f1a\u6263\u94b1\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ee1\u8db3\u4e86\u662f$w_{i}$\u7684\u6536\u76ca\uff0c\u6ca1\u6709\u6ee1\u8db3\u65f6$-g$ \u7684\u6536\u76ca\u3002\u4e24\u8005\u5dee\u503c\u662f$w_{i}+g$ \uff0c\u6240\u4ee5\u5b83\u6765\u4f5c\u4e3a\u8fb9\u6743\u3002\n\n### \u4e3e\u4f8b\n\n\u4e00\u51713\u4e2a\u8282\u70b9\u5206\u522b\u662f101\uff0c2\u4e2a\u8981\u6c42\uff0c\u7b2c\u4e00\u4e2a\u8981\u6c421\u548c2\u662f0\uff0c\u7b2c\u4e8c\u4e2a\u8981\u6c422\u548c3\u662f1\u5e76\u4e14\u4e0d\u6ee1\u8db3\u8981\u6263\u94b1\uff0c\u90a3\u4e48\u53ef\u4ee5\u753b\u51fa\u4e0b\u9762\u7684\u793a\u610f\u56fe\n![\u793a\u610f\u56fe](https://cdn.luogu.com.cn/upload/image_hosting/39a3l6mo.png)\n\n### \u4ee3\u7801\n``` cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 100010*2;\n\ntypedef long long typec;  // \u4e3a\u4e86\u65b9\u4fbf\u8f6c\u6362\u7c7b\u578b\nconst typec oo = 1e9;\n\nint n, m, s, g, t, head[maxn], nxt[maxn], to[maxn], dep[maxn], cur[maxn], tot = 1;\nint W[maxn], A[maxn];\ntypec w[maxn], sum;\n\nqueue<int> Q; \n\nvoid add(int x, int y, int v) {\n    to[++tot] = y, w[tot] = v, nxt[tot] = head[x], head[x] = tot;\n    to[++tot] = x, w[tot] = 0, nxt[tot] = head[y], head[y] = tot;\n}\n\nbool bfs() {\n    memset(dep, 0, sizeof(dep));\n    Q.push(s); dep[s] = 1;\n    while(!Q.empty()) {\n        int u = Q.front();\n        Q.pop();\n        for (int i = head[u]; i; i = nxt[i]) \n            if (w[i] && !dep[to[i]]) {\n                dep[to[i]] = dep[u] + 1;\n                Q.push(to[i]);\n            }\n    }\n    return dep[t];\n}\n\ntypec dfs(int x, typec flow) {\n    if (x == t) return flow;\n    typec rest = flow;\n    for (int& i = cur[x]; i; i = nxt[i]) \n        if (w[i] && dep[to[i]] == dep[x] + 1) {\n            typec k = dfs(to[i], min(w[i], rest));\n            if (!k) dep[to[i]] = 0;\n            rest -= k; w[i] -= k; w[i ^ 1] += k;\n        }\n    return flow - rest;\n}\n\ntypec dinic() {\n    typec ret = 0, flow;\n    while (bfs()) {\n        memcpy(cur, head, sizeof(cur));\n        while (flow = dfs(s, oo)) ret += flow;\n    } \n    return ret;\n}\n\nint main() {\n    cin >> n >> m >> g;\n    s = 0; t = n + m + 1;\n    for (int i = 1;i <= n; ++i) cin >> A[i];\n    for (int i = 1,x;i <= n; ++i) {\n        cin >> x;\n        if (A[i]) add(s, i, x);\n        else add(i, t, x);\n    }\n\n    for (int i = 1,x,y,z;i <= m; ++i) {\n        int op, k, neg;\n        cin >> op >> W[i] >> k;\n        sum += W[i];\n        for (int j = 1;j <= k; ++j) {\n            cin >> x; \n            if (op) add(n+i, x, oo);\n            else add(x, n+i, oo);\n        }\n        cin >> neg;\n        if (op) add(s, n+i, W[i] + neg*g);\n        else add(n+i, t, W[i] + neg*g);\n    }\n    cout << sum - dinic() << endl;\n    return 0;\n}\n",
        "postTime": 1584822755,
        "uid": 15019,
        "name": "fy1234567ok",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF311E \u3010Biologist\u3011"
    },
    {
        "content": "# \u6700\u5c0f\u5272\n\n~~\u611f\u89c9\u548c[P1646 [\u56fd\u5bb6\u96c6\u8bad\u961f]happiness](https://www.luogu.org/problemnew/show/P1646)\u5dee\u4e0d\u591a~~\n\n\u8bb0 $sum = \\sum_{i = 1}^{m} w_i$\uff0c\u7b54\u6848\u5c31\u662f $sum$ \u51cf\u53bb\u6700\u5c0f\u5272\n\n## \u5efa\u56fe\n\n\u5bf9\u4e8e $v_i = 0$ \u7684\u70b9\uff0c\u6211\u4eec\u628a\u5b83\u548c\u6e90\u70b9\u8fde\u8fb9\uff0c\u6743\u503c\u4e3a\u4fee\u6539\u7684\u4ee3\u4ef7\uff0c\u8868\u793a\u8ba9\u8fd9\u4e2a\u70b9\u4e0d\u4e3a $0$ \u9700\u8981\u7684\u4ee3\u4ef7\uff0c\u5bf9\u4e8e\u5176\u5b83\u7684\u70b9\uff0c\u6211\u4eec\u628a\u5b83\u548c\u6c47\u70b9\u8fde\u8fb9\uff0c\u6743\u503c\u4e3a\u4fee\u6539\u7684\u4ee3\u4ef7\uff0c\u8868\u793a\u8ba9\u8fd9\u4e2a\u70b9\u4e0d\u4e3a $1$ \u9700\u8981\u7684\u4ee3\u4ef7\n\n\u5bf9\u4e8e\u4e00\u4e2a $op = 0$ \u7684\u8981\u6c42\uff0c\u4ece\u5b83\u5411\u6bcf\u4e2a\u5728\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u6743\u503c\u4e3a $inf$ \u7684\u8fb9\uff0c\u5982\u679c\u9700\u8981\u5230\u7ed9\u94b1\uff0c\u5219\u4ece\u6e90\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a $w_i + g$ \u7684\u8fb9\uff0c\u5426\u5219\u8fde\u4e00\u6761\u6743\u503c\u4e3a $w_i$ \u7684\u8fb9\uff0c\u8868\u793a\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u6ca1\u6709\u6ee1\u8db3\uff0c\u9700\u8981\u51cf\u5c11\u8fd9\u4e48\u591a\u7684\u5229\u6da6\n\n\u5bf9\u4e8e\u4e00\u4e2a $op = 1$ \u7684\u8981\u6c42\uff0c\u548c\u4e0a\u9762\u76f8\u53cd\uff08\u8be6\u89c1\u4ee3\u7801\uff09\n\n\u7136\u540e\u76f4\u63a5\u6700\u5927\u6d41\u5c31\u505a\u5b8c\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int gi() {\n\tregister int x, op = 1, c;\n\twhile(c = getchar(), c < '0' || c > '9')if(c == '-')op = -op;\n\tx = c ^ 48;\n\twhile(c = getchar(), c >= '0' && c <= '9')x = (x << 3) + (x << 1) + (c ^ 48);\n\treturn x * op;\n}\n#define MAXV 100001\n#define MAXE 1000001\nint head[MAXV] = {0}, ver[MAXE], val[MAXV], nxt[MAXV], tot = 1;\nvoid add(int x, int y, int v) {\n\tver[++ tot] = y, val[tot] = v, nxt[tot] = head[x], head[x] = tot;\n\tver[++ tot] = x, val[tot] = 0, nxt[tot] = head[y], head[y] = tot;\n}\nint d[MAXV];\nint s, t;\nqueue<int>q;\nbool bfs() {\n\tmemset(d, 0, sizeof(d));\n\tregister int x;\n\tq.push(s);\n\td[s] = 1;\n\twhile(!q.empty()) {\n\t\tx = q.front(), q.pop();\n\t\tfor(int i = head[x]; i; i = nxt[i])\n\t\t\tif(val[i] && ! d[ver[i]]) {\n\t\t\t\td[ver[i]] = d[x] + 1;\n\t\t\t\tq.push(ver[i]);\n\t\t\t}\n\t}\n\treturn d[t];\n}\nint dfs(int x, int flow) {\n\tif(x == t) return flow;\n\tregister int k, rest = flow;\n\tfor(int i = head[x]; i && rest; i = nxt[i])\n\t\tif(val[i] && d[ver[i]] == d[x] + 1) {\n\t\t\tk = dfs(ver[i], min(val[i], rest));\n\t\t\tif(! k) d[ver[i]] = 0;\n\t\t\trest -= k;\n\t\t\tval[i] -= k;\n\t\t\tval[i ^ 1] += k;\n\t\t}\n\treturn flow - rest;\n}\nint dinic() {\n\tint ans = 0, flow;\n\twhile(bfs()) while((flow = dfs(s, 1e9))) ans += flow;\n\treturn ans;\n}\nbool a[10001];\nint main() {\n\tint n = gi(), m = gi(), g = gi();\n\tfor(int i = 1; i <= n; i ++)a[i] = gi();\n\tint sum = 0;\n\ts = 0, t = n + m + 1;\n\tfor(int i = 1, v; i <= n; i ++) {\n\t\tv = gi();\n\t\tif(! a[i]) add(s, i, v);\n\t\telse add(i, t, v);\n\t}\n\tfor(int i = 1; i <= m; i ++) {\n\t\tint op = gi(), w = gi(), k = gi();\n\t\tif(op) {\n\t\t\tfor(int j = 1; j <= k; j ++) add(gi(), n + i, 1e9);\n\t\t\top = gi();\n\t\t\tif(op)add(n + i, t, g + w);\n\t\t\telse add(n + i, t, w);\n\t\t\tsum += w;\n\t\t} else {\n\t\t\tfor(int j = 1; j <= k; j ++) add(n + i, gi(), 1e9);\n\t\t\top = gi();\n\t\t\tif(op) add(s, n + i, g + w);\n\t\t\telse add(s, n + i, w);\n\t\t\tsum += w;\n\t\t}\n\t}\n\tprintf(\"%d\\n\", sum - dinic());\n\treturn 0;\n}\n```\n\n",
        "postTime": 1546507306,
        "uid": 70310,
        "name": "wuzhaoxin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF311E \u3010Biologist\u3011"
    },
    {
        "content": "### \u6700\u5c0f\u5272\n\n[\u53cc\u500d\u7ecf\u9a8c\uff01\uff01](https://www.luogu.com.cn/problem/P4313)\n\n[\u4e09\u500d\u7ecf\u9a8c\uff01\uff01\uff01](https://www.luogu.com.cn/problem/P1361)\n\n\u8fd9\u9053\u9898\u53c8\u662f\u4e00\u9053\u7684\u7ecf\u5178\u7684\u6700\u5c0f\u5272\u6a21\u578b\uff1a**\u96c6\u5408\u5212\u5206**\u3002\n\n\u601d\u8def\u548c\u5efa\u56fe\u5927\u81f4\u90fd\u548c\u6211\u653e\u7684**\u7ecf\u9a8c**\u4e00\u6837\uff1a\u5148\u5c06\u6240\u6709\u5229\u6da6\u52a0\u8d77\u6765\uff0c\u518d\u51cf\u53bb\u6700\u5c0f\u4ee3\u4ef7\uff08\u5373\u6700\u5c0f\u5272\uff09\uff0c\u4fbf\u662f\u6700\u5927\u5229\u6da6\u4e86\u3002\u800c\u5bf9\u4e8e\u6bcf\u4e2a\u8981\u6c42\u65b0\u5efa\u4e24\u4e2a\u8282\u70b9\u8fde\u8fb9\u5373\u53ef\u3002\u8be6\u7ec6\u53ef\u89c1[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P4313)\u7684\u601d\u8def\u548c\u5efa\u56fe\uff0c\u8fd9\u91cc\u987a\u4fbf\u5b89\u5229\u4e00\u6ce2\u6211\u5199\u7684[\u9898\u89e3](https://www.luogu.com.cn/blog/hzxswer/solution-p4313)qwq\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u4e0d\u540c\u7684\u5730\u65b9\u5c31\u5728\u4e8e\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u6539\u53d8\u6570\u5b57\u6709\u4ee3\u4ef7\uff1b\u5bf9\u4e8e\u6bcf\u4e2a\u8981\u6c42\uff0c\u65e0\u6cd5\u6ee1\u8db3\u4e5f\u6709\u4ee3\u4ef7\u3002\u4f46\u662f\u6211\u4eec\u7684\u6700\u5c0f\u5272\u7b97\u7684\u662f\u6536\u76ca\u3002\n\n\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u53d1\u73b0\u5728\u6700\u5c0f\u5272\u4e2d\uff0c\u683c\u5272\u6389\u4e00\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u4ed8\u51fa\u8fd9\u6761\u8fb9\u5bb9\u91cf\u7684\u4ee3\u4ef7\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u6839\u636e\u9898\u610f\u5c06\u4e00\u4e9b\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a\u8fd9\u4e2a\u4ee3\u4ef7\u5373\u53ef\uff08\u5177\u4f53\u54ea\u4e9b\u8fb9\u5efa\u56fe\u91cc\u9762\u8bb2\uff09\u3002\n\n### \u5efa\u56fe\n\n\u4ee5\u4e0b\u6bcf\u4e2a\u4f4d\u7f6e\u5728\u6700\u5c0f\u5272\u540e\uff0c\u82e5\u4e0e $s$ \u8054\u901a\uff0c\u5219\u8868\u660e\u8be5\u4f4d\u7f6e\u6700\u7ec8\u4e3a $0$\uff0c\u82e5\u4e0e $t$ \u8054\u901a\uff0c\u5219\u8868\u660e\u8be5\u4f4d\u7f6e\u6700\u7ec8\u4e3a $1$\u3002\n\n\u6e90\u70b9\u8fde\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u8fde\u6c47\u70b9\uff0c\u5bb9\u91cf\u5747\u4e3a $0$\u3002\u5982\u679c\u8be5\u4f4d\u7f6e\u7684\u521d\u59cb\u6570\u4e3a $1$\uff0c\u5219\u5c06\u8be5\u4f4d\u7f6e\u4e0e $s$ \u8fde\u7684\u8fb9\u5bb9\u91cf\u6539\u4e3a\u4fee\u6539\u4ee3\u4ef7\uff1b\u53cd\u4e4b\u82e5\u4e3a $0$\uff0c\u5219\u5c06\u8be5\u4f4d\u7f6e\u4e0e $t$ \u8fde\u7684\u8fb9\u5bb9\u91cf\u6539\u4e3a\u4fee\u6539\u4ee3\u4ef7\u3002\uff08\u8fd9\u91cc\u6709\u70b9\u7ed5\uff1a\u5982\u679c\u521d\u59cb\u4e3a $0$\uff0c\u90a3\u4e48\u4ee5\u540e\u60f3\u8981\u5c06\u4ed6\u6539\u4e3a $1$\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u5728\u6700\u5c0f\u5272\u4e2d\uff0c\u8ba9\u8fd9\u4e2a\u70b9\u4ece $s$ \u5b50\u96c6\u8f6c\u5230 $t$ \u5b50\u96c6\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5272\u6389\u8fd9\u6761\u4e0e $s$ \u76f8\u8fde\u7684\u8fb9\uff0c\u5e76\u4ed8\u51fa\u4ee3\u4ef7\uff09\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8981\u6c42 $i$\uff0c\u65b0\u5efa\u4e24\u4e2a\u70b9 $x_i,y_i$\uff1a\n\n$s$ \u8fde $x_i$ \u5bb9\u91cf\u4e3a $0$\uff0c$y_i$ \u8fde $t$ \u5bb9\u91cf\u4e3a $0$\u3002\u7136\u540e\u8981\u6c42\u662f\u4ec0\u4e48\u5c31\u628a\u5229\u6da6\u7ed9\u54ea\u6761\u8fb9\uff08$0$ \u5c31\u5c06\u8fde $s$ \u8fb9\u5bb9\u91cf\u6539\u4e3a\u5229\u6da6\uff0c$1$ \u5c31\u6539\u8fde $t$ \u7684\u8fb9\uff09\n\n\u5bf9\u4e8e\u8be5\u8981\u6c42\u7684\u6bcf\u4e2a\u4f4d\u7f6e $j\\in i$\uff1a\n   \n$x_i$ \u8fde $j$ \u5bb9\u91cf\u4e3a $+\\infty$\uff0c$j$ \u8fde $y_i$ \u5bb9\u91cf\u4e3a $+\\infty$\u3002\u8fde $+\\infty$ \u662f\u4e3a\u4e86\u4fdd\u8bc1\u8be5\u8981\u6c42\u5185\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6570\u503c\u7edf\u4e00\u3002\n\n\u5982\u679c\u5b8c\u6210\u4e0d\u4e86\u6709\u4ee3\u4ef7\uff0c\u90a3\u4e48\u5c31\u5c06\u5bb9\u91cf\u4e3a\u5229\u6da6\u7684\u8fb9\u7684\u5bb9\u91cf\u518d\u52a0\u4e0a $g$\uff0c\u4f46\u662f\u8fd9\u4e2a $g$ \u4e0d\u7528\u52a0\u5165\u5230\u5229\u6da6\u4e4b\u548c\u4e2d\u3002\u5982\u679c\u65e0\u6cd5\u5b8c\u6210\u8981\u6c42\uff0c\u81ea\u7136\u5c31\u4f1a\u5272\u6389\u8fd9\u6761\u4ee3\u8868\u5229\u6da6\u7684\u8fb9\uff0c\u8868\u793a\u653e\u5f03\u8fd9\u4efd\u5229\u6da6\uff0c\u540c\u65f6\u4e5f\u4ed8\u51fa\u4e86\u4ee3\u4ef7\uff0c\u6700\u7ec8\u5229\u6da6\u4e5f\u5c31\u51cf\u6389\u4e86\u8fd9\u4efd\u5229\u6da6 $+$ $g$\u3002\n\n\u6700\u540e\u7b54\u6848\u4e3a $\\sum_{i=1}^mW_i-Mincut$\u3002\n\n### Code\n```cpp\n#include<bits/stdc++.h>\n//#define int long long\n#define pair pair<int,int>\nusing namespace std;\ninline void end()\n{\n\tputs(\"\");\n\tsystem(\"pause\");\n}\ninline int read()\n{\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9') {if(c=='-') f=-1;c=getchar();}\n\twhile (c>='0'&&c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\treturn x*f;\n}\nconst int N=3e4+4,M=5e5+5;\nint n,m,g,s,t,ans,Maxflow;\nint first[N],nex[M],to[M],w[M],num=1;\ninline void add(int u,int v,int val)\n{\n\tnex[++num]=first[u];\n\tfirst[u]=num;\n\tto[num]=v;\n\tw[num]=val;\n}\ninline void Add(int u,int v,int val)\n{\n\tadd(u,v,val);\n\tadd(v,u,0);\n}\nnamespace ISAP\n{\n\tint dep[N],gap[N],cur[N];\n\tvoid bfs()\n\t{\n\t\tmemset(dep,-1,sizeof(dep));\n\t\tmemset(gap,0,sizeof(gap));\n\t\tqueue<int> q;\n\t\tq.push(t);\n\t\tdep[t]=0;gap[0]=1;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint u=q.front();q.pop();\n\t\t\tfor(int i=first[u];i;i=nex[i])\n\t\t\t{\n\t\t\t\tint v=to[i];\n\t\t\t\tif(dep[v]!=-1) continue;\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tgap[dep[v]]++;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tinline int dfs(int u,int in)\n\t{\n\t\tif(u==t) return in;\n\t\tint out=0;\n\t\tfor(int i=cur[u];i;i=nex[i])\n\t\t{\n\t\t\tcur[u]=i;\n\t\t\tint v=to[i];\n\t\t\tif(!w[i]||dep[v]!=dep[u]-1) continue;\n\t\t\tint res=dfs(v,min(w[i],in-out));\n\t\t\tw[i]-=res;\n\t\t\tw[i^1]+=res;\n\t\t\tout+=res;\n\t\t\tif(in==out) return out;\n\t\t}\n\t\tgap[dep[u]]--;\n\t\tif(!gap[dep[u]]) dep[s]=n+m+m+3;\n\t\tdep[u]++;\n\t\tgap[dep[u]]++;\n\t\treturn out;\n\t}\n\tvoid work()\n\t{\n\t\tbfs();\n\t\twhile(dep[s]<n+m+m+2)\n\t\t{\n\t\t\tmemcpy(cur,first,sizeof(first));\n\t\t\tMaxflow+=dfs(s,1e9);\n\t\t}\n\t}\n}\nint kind[N];\nint main()\n{//s->0,t->1\n\tn=read(),m=read(),g=read();\n\ts=0,t=n+m+m+1;//n\u4e2a\u4f4d\u7f6e+2m\u4e2a\u56e0\u8981\u6c42\u65b0\u5efa\u7684\u70b9\n\tfor(int i=1;i<=n;++i) kind[i]=read();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tint x=read();//\u8fd9\u91cc\u6ce8\u610f\u522b\u5efa\u53cd\u4e86\n\t\tif(kind[i]) Add(i+m,t,x),Add(s,i+m,0);\n\t\telse Add(i+m,t,0),Add(s,i+m,x);\n\t}\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint kk=read(),val=read(),siz=read();ans+=val;//\u53ea\u52a0\u5229\u6da6\uff0c\u522b\u52a0\u4ee3\u4ef7\n\t\tif(kk) Add(i+n+m,t,val),Add(s,i,0);\n\t\telse Add(s,i,val),Add(i+n+m,t,0);\n\t\twhile(siz--)\n\t\t{\n\t\t\tint x=read();\n\t\t\tAdd(i,x+m,1e9);\n\t\t\tAdd(x+m,i+m+n,1e9);\n\t\t}\n\t\tint kkk=read();\n\t\tif(kkk)\n\t\t{\n\t\t\tif(kk) Add(i+n+m,t,g);\n\t\t\telse Add(s,i,g);\n\t\t}\n\t}\n\tISAP::work();\n\tprintf(\"%d\",ans-Maxflow);\n\tend();\n\treturn 0;\n}\n```\n",
        "postTime": 1614693782,
        "uid": 205541,
        "name": "Aftglw",
        "ccfLevel": 0,
        "title": "Biologist \u9898\u89e3"
    },
    {
        "content": "\u524d\u7f6e\u77e5\u8bc6\uff1a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\n\n\u8fd9\u662f\u4e2a\u4ec0\u4e48\u4e1c\u4e1c\u5462\uff0c\u5b83\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u8d4b\u4e00\u4e2a\u503c\uff0c\u6c42\u4e00\u4e2a\u70b9\u96c6\uff0c\u70b9\u96c6\u5185\u7684\u6240\u6709\u70b9\u90fd\u5fc5\u987b\u5305\u542b\u5b83\u7684\u6240\u6709\u540e\u7ee7\uff0c\u4f7f\u8fd9\u4e2a\u70b9\u96c6\u7684\u548c\u6700\u5927\u3002\n\n\u5982\u4ee5\u4e0b\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/7cccrdgd.png)\n\n\u56fe\u4e2d\u7684\u7f16\u53f7\u4ee3\u8868\u70b9\u6743\u3002\n\n\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u80fd\u9009\u62e9\u7684\u70b9\u96c6\u6709\uff1a$\\left\\{-3\\right\\},\\left\\{-3,4\\right\\},\\left\\{-3,5\\right\\},\\left\\{-3,4,5\\right\\},\\left\\{-3,4,5,-1\\right\\},\\left\\{-3,4,5,-1,2\\right\\},\\emptyset$\u3002\n\n\u6700\u5927\u7684\u660e\u663e\u4e3a $\\left\\{-3,4,5,-1,2\\right\\}$\uff0c\u4e3a $-3+4+5-1+2=7$\u3002\n\n\u8fd9\u79cd\u7c7b\u578b\u7684\u9898\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u5462\uff0c\u9996\u5148\u5bf9\u4e8e\u70b9\u6743\u4e3a\u8d1f\u7684\uff0c\u6211\u4eec\u5bf9\u5176\u4e8e\u6c47\u70b9\u5efa\u8fb9\uff0c\u800c\u4e3a\u6b63\u7684\u70b9\u5219\u7528\u6e90\u70b9\u4e0e\u5176\u5efa\u8fb9\uff0c\u5176\u4ed6\u8fb9\u4e0d\u53d8\uff0c\u539f\u6765\u56fe\u4e0a\u7684\u8fb9\u8bbe\u4e3a\u6b63\u65e0\u7a77\uff0c\u800c\u65b0\u5efa\u7684\u8fb9\u4e3a\u70b9\u6743\u7684\u7edd\u5bf9\u503c\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/zyj0uvs4.png)\n\n\u6ca1\u6709\u8bbe\u8fb9\u6743\u7684\u4ee3\u8868\u8fb9\u6743\u65e0\u9650\u5927\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5728\u8fd9\u4e0a\u9762\u8dd1\u4e00\u6b21\u6700\u5c0f\u5272\uff0c\u7136\u540e\u7528\u6240\u6709\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8fb9\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u5373\u53ef\uff0c\u5982\u56fe\u4e2d\uff0c\u8fb9\u6743\u548c\u4e3a $11$\uff0c\u6700\u5c0f\u5272\u4e3a $4$\uff0c\u90a3\u4e48\u7b54\u6848\u5373\u4e3a $7$\u3002\n\n\u8003\u8651\u8bc1\u660e\uff1a\n\n\u9996\u5148\u5272\u6389\u4e00\u6761\u6e90\u70b9\u4e0a\u7684\u8fb9\u4ee3\u8868\u4f60\u4e0d\u4f1a\u9009\u62e9\u8fd9\u4e2a\u70b9\uff0c\u800c\u5272\u6389\u8fde\u5411\u6c47\u70b9\u4e0a\u7684\u4e00\u6761\u8fb9\u4ee3\u8868\u4f60\u4f1a\u9009\u62e9\u8fd9\u4e2a\u70b9\u3002\n\n\u5f88\u597d\u8bf4\u660e\uff0c\u56e0\u4e3a\u5728\u5272\u53bb\u6c47\u70b9\u4e0a\u7684\u8fb9\u65f6\uff0c\u4ee3\u8868\u4f60\u8981\u9009\u8fd9\u4e2a\u70b9\uff0c\u4e14\u6b63\u70b9\u4e5f\u7528\u6d41\u91cf\u4e0e\u8d1f\u70b9\u8fdb\u884c\u4e86\u62b5\u6d88\u3002\n\n\u5982\u679c\u56fe\u4e0d\u8054\u901a\uff0c\u90a3\u4e48\u9009\u7684\u70b9\u96c6\u4e00\u5b9a\u5408\u6cd5\uff0c\u56e0\u4e3a\u5982\u679c\u8054\u901a\uff0c\u8bf4\u660e\u4f60\u9009\u62e9\u4e86\u6b63\u70b9\uff0c\u800c\u6b63\u70b9\u6709\u8d1f\u70b9\u540e\u7ee7\u6ca1\u6709\u8fdb\u884c\u9009\u62e9\u3002\n\n\u6240\u4ee5\u7efc\u4e0a\u6240\u8a00\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u6700\u5c0f\u5272\u6c42\u51fa\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002\n\n\u90a3\u4e48\u5982\u4f55\u8bc1\u660e\u8fd9\u662f\u6700\u4f18\u89e3\u5462\u3002\n\n\u6211\u4eec\u77e5\u9053\uff1a\u6700\u5c0f\u5272\u4e3a\uff1a$\\text{\u4e0d\u9009\u7684\u6b63\u6743}+\\text{\u8981\u9009\u7684\u8d1f\u6743\u7684\u7edd\u5bf9\u503c}$\u3002\n\n\u800c\u7b54\u6848\u4e3a\uff1a$\\text{\u6b63\u6743\u548c}-\\text{\u4e0d\u9009\u7684\u6b63\u6743\u548c}+\\text{\u9009\u62e9\u7684\u8d1f\u6743\u548c}$\uff0c\u540e\u9762\u90a3\u4e2a\u5373\u662f\u6700\u5c0f\u5272\uff0c\u7531\u4e8e\u6700\u5c0f\u5272\u4fdd\u8bc1\u4e86\u6700\u5c0f\uff0c\u6240\u4ee5\u7b54\u6848\u4e5f\u5c31\u6700\u5927\u3002\n\n---\n\n\u90a3\u4e48\u8fd9\u4e2a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u6709\u4ec0\u4e48\u7528\u5462\uff0c\u90a3\u5c31\u5148\u770b\u5230\u6211\u4eec\u8fd9\u9053\u9898\uff1a[CF311E Biologist](https://www.luogu.com.cn/problem/CF311E)\u3002\n\n\u8fd9\u9898\u4e00\u4e0b\u8c8c\u4f3c\u6ca1\u4ec0\u4e48\u601d\u8def\uff0c\u5148\u8fdb\u884c\u5206\u6790\u3002\n\n\u9996\u5148\u6211\u4eec\u5047\u8bbe\u6240\u6709\u70b9\u521d\u59cb\u4e3a $1$\uff0c\u90a3\u4e48\u6240\u6709\u7684 $1$ \u7684\u8be2\u95ee\u6211\u4eec\u90fd\u662f\u6ee1\u8db3\u7684\u3002\n\n\u73b0\u5728\u6211\u4eec\u60f3\u6ee1\u8db3\u4e00\u4e9b $0$ \u7684\u8be2\u95ee\uff0c\u90a3\u4e48\u5bf9\u4e8e\u672c\u6765\u662f $0$ \u7684\u70b9\uff0c\u7b49\u540c\u4e8e\u6211\u4eec\u9700\u8981\u628a\u70b9\u6743\u52a0\u56de\u6765\uff0c\u800c\u672c\u6765\u662f $1$ \u7684\u70b9\uff0c\u5219\u8981\u6263\u53bb\u5176\u8d39\u7528\u3002\n\n\u5bf9\u4e8e\u672c\u6765\u662f $0$ \u7684\u8be2\u95ee\uff0c\u6ee1\u8db3\u4ee5\u540e\u8981\u52a0\u56de\u672c\u5e94\u6709\u7684\u94b1\uff0c\u5982\u679c\u8981\u5012\u6263\u4e5f\u8981\u52a0\u56de\u6765\u3002\n\n\u800c\u5bf9\u4e8e\u672c\u6765\u662f $1$ \u7684\u8be2\u95ee\uff0c\u7531\u4e8e\u70b9\u53d8\u4e3a $0$ \u5bfc\u81f4\u65e0\u6cd5\u6ee1\u8db3\uff0c\u6240\u4ee5\u5c06\u5176\u5168\u90e8\u6263\u9664\u5e94\u5f97\u7684\u94b1\u3002\n\n\u90a3\u4e48\u53ef\u4ee5\u628a\u52a0\u64cd\u4f5c\u770b\u6210\u70b9\u6743\u4e3a\u6b63\uff0c\u6e90\u70b9\u4e0e\u5176\u76f8\u8fde\uff0c\u800c\u51cf\u64cd\u4f5c\u770b\u6210\u70b9\u6743\u4e3a\u8d1f\uff0c\u4e0e\u6c47\u70b9\u76f8\u8fde\u3002\n\n\u90a3\u4e48\u8fd9\u6b21\u7684\u6700\u540e\u7b54\u6848\u662f\u4ec0\u4e48\u5462\u3002\n\n\u9996\u5148\u6700\u5c0f\u5272\u4e3a\uff1a$\\text{\u6ca1\u52a0\u4e0a\u7684\u70b9}+\\text{\u51cf\u53bb\u7684\u70b9\u7684\u7edd\u5bf9\u503c}$\u3002\n\n\u800c\u7531\u4e8e\u6211\u4eec\u5047\u4f7f\u6240\u6709\u6570\u4e3a $1$\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a $1$ \u8be2\u95ee\u51cf\u53bb\u4fee\u6539 $0->1$ \u518d\u51cf\u53bb $0$ \u7684\u5012\u6263\u94b1\u3002\u800c\u8fd9\u6b21\u4e0e\u6e90\u70b9\u8fde\u63a5\u7684\u6240\u6709\u8fb9\u6743\u548c\u4e3a $0$ \u8be2\u95ee\u52a0\u4e0a\u4fee\u6539 $0->1$ \u52a0\u4e0a $0$ \u7684\u5012\u6263\u94b1\u3002\n\n\u4e24\u8005\u52a0\u8d77\u6765\u5373\u4e3a\u6240\u6709\u8be2\u95ee\u7684\u4ef7\u503c\uff0c\u5373 $\\sum W_i$\u3002\n\n\u6700\u7ec8\u7b54\u6848\u5373\u4e3a $\\sum W_i-\\text{\u6700\u5c0f\u5272}$\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\u603b\u8fc7\u7a0b\uff1a\n\n1\u3001\u5bf9\u539f\u6765\u4e3a $0$ \u7684\u70b9\uff0c\u7528\u6e90\u70b9\u4e0e\u5176\u5efa\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5176\u6539\u53d8\u72b6\u6001\u7684\u4ef7\u503c\u3002\n\n2\u3001\u5bf9\u539f\u6765\u4e3a $1$ \u7684\u8fb9\uff0c\u5bf9\u6c47\u70b9\u5efa\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5176\u6539\u53d8\u72b6\u6001\u7684\u4ef7\u503c\u3002\n\n3\u3001\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $0$ \u8be2\u95ee\uff0c\u5355\u72ec\u91cd\u65b0\u521b\u4e00\u4e2a\u70b9\uff0c\u7528\u6e90\u70b9\u4e0e\u5176\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u5176\u94b1\u6570\uff0c\u5982\u679c\u8981\u5012\u6263\uff0c\u8fb9\u6743\u52a0\u4e0a\u5012\u6263\u7684\u94b1\u5373\u53ef\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u65b0\u70b9\u5bf9\u8be2\u95ee\u7684\u70b9\u5efa\u8fb9\uff0c\u8fb9\u6743\u4e3a\u65e0\u9650\uff08\u5373\u5982\u679c\u9009\u8fd9\u4e2a\u8be2\u95ee\u5b83\u7684\u540e\u7ee7\u90fd\u8981\u9009\u62e9\u6539\u53d8\u72b6\u6001\uff09\u3002\n\n4\u3001\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $1$ \u8be2\u95ee\uff0c\u5355\u72ec\u521b\u4e00\u4e2a\u70b9\uff0c\u5bf9\u6c47\u70b9\u5efa\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5176\u94b1\u6570\uff0c\u5982\u679c\u8981\u5012\u6263\uff0c\u8fb9\u6743\u52a0\u4e0a\u5012\u6263\u7684\u94b1\u5373\u53ef\uff0c\u7136\u540e\u7528\u8be2\u95ee\u7684\u70b9\u5bf9\u8fd9\u4e2a\u65b0\u70b9\u5efa\u8fb9\uff0c\u8fb9\u6743\u4e3a\u65e0\u9650\uff08\u5373\u5982\u679c\u8981\u9009\u62e9\u4e00\u4e2a\u8fde\u5411\u65b0\u70b9\u7684\u70b9\uff0c\u90a3\u5c31\u8981\u6263\u9664\u8fd9\u4e2a\u70b9\uff09\u3002\n\n\u5efa\u4e86\u8fb9\u540e\u8dd1\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int N=1e6+5;\nconst int M=2e6+5;\nint n,m,g,h[M],p[N],s,t,st[N],cnt,vis[N],dep[N];\nstruct node\n{\n\tint to,data,next;\n}a[M];\ninline void addedge(int x,int y,int k)\n{\n\ta[cnt]={y,k,h[x]};\n\th[x]=cnt++;\n\ta[cnt]={x,0,h[y]};\n\th[y]=cnt++;\n}\nqueue<int>q;\nbool bfs()\n{\n\t//cout<<'b';\n\tfor(int i=1;i<=n+m+2;i++)dep[i]=0;\n\tq.push(s);\n\tdep[s]=1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=h[x];i!=-1;i=a[i].next)\n\t\t{\n\t\t\tif(a[i].data==0)continue;\n\t\t\tif(!dep[a[i].to])\n\t\t\t{\n\t\t\t\tdep[a[i].to]=dep[x]+1;\n\t\t\t\tq.push(a[i].to);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t];\n}\nint dfs(int x=s,int num=1e9)\n{\n\tif(x==t)return num;\n\tif(vis[x])return 0;\n\tfor(int i=h[x];i!=-1;i=a[i].next)\n\t{\n\t\tif(a[i].data==0)continue;\n\t\tif(dep[a[i].to]==dep[x]+1)\n\t\t{\n\t\t\tvis[x]=1;\n\t\t\tint sum=dfs(a[i].to,min(num,a[i].data));\n\t\t\tif(sum)\n\t\t\t{\n\t\t\t\ta[i].data-=sum;\n\t\t\t\ta[i^1].data+=sum;\n\t\t\t\treturn sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint main()\n{\n\tmemset(h,-1,sizeof(h));\n\tscanf(\"%d%d%d\",&n,&m,&g);\n\ts=n+m+1;\n\tt=n+m+2;\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&p[i]);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tif(p[i]==0)addedge(s,i,x);\n\t\telse addedge(i,t,x);\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint opt,w,k,ss;\n\t\tscanf(\"%d%d%d\",&opt,&w,&k);\n\t\tans+=w;\n\t\tfor(int j=1;j<=k;j++)scanf(\"%d\",&st[j]);\n\t\tscanf(\"%d\",&ss);\n\t\tfor(int j=1;j<=k;j++)\n\t\t{\n\t\t\tif(opt==0)addedge(i+n,st[j],w+ss*g);\n\t\t\telse addedge(st[j],i+n,w+ss*g);\n\t\t}\n\t\tif(opt==0)addedge(s,i+n,w+ss*g);\n\t\telse addedge(i+n,t,w+ss*g);\n\t}\n\twhile(bfs())\n\t{\n\t\tmemset(vis,0,sizeof(vis));\n\t\tint num=dfs();\n\t\twhile(num)\n\t\t{\n\t\t\tans-=num;\n\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\tnum=dfs();\n\t\t}\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1666685486,
        "uid": 275793,
        "name": "Gmt\u4e36FFF",
        "ccfLevel": 5,
        "title": "\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe"
    },
    {
        "content": "\u6211\u5199\u7684\u7b2c\u4e00\u9053\u6700\u5c0f\u5272\u00bf\u00bf\u00bf\n\n\u4e8c\u9009\u4e00\uff0c\u8003\u8651\u4e00\u4e2a\u9c7c\u523a\u578b\u5efa\u56fe\uff08\u81ea\u5df1\u7f16\u7684\u540d\u5b57\uff09\uff0c\u7136\u540e\u7528\u6700\u5c0f\u5272\u6c42\u6700\u5c0f\u82b1\u8d39\u3002\n\n\u9c7c\u523a\u6027\u5efa\u56fe\u5927\u6982\u5c31\u662f\uff0c\u4e2d\u95f4\u6709\u4e00\u6392\u70b9\uff0c\u7136\u540e\u4f4d\u4e8e\u5de6\u4fa7\u7684 $S$ \u8fde\u5411\u8fd9\u4e00\u6392\u70b9\uff0c\u8fd9\u4e00\u6392\u70b9\u8fde\u5411\u53f3\u4fa7\u7684 $T$\uff0c\u770b\u8d77\u6765\u5c31\u5f88\u50cf\u9c7c\u523a(?)\n\n**trick\uff1a\u6700\u5927\u4ef7\u503c=\u603b\u4ef7\u503c-\u6700\u5c0f\u82b1\u8d39**\n\n\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u662f $0$\uff0c\u90a3\u4e48\u6e90\u70b9 $S$ \u8fde\u5230\u5b83\u4e00\u6761\u6d41\u91cf\u4e3a $v$ \u7684\u8fb9\uff0c\u82e5\u5b58\u5728\u5219\u4ee3\u8868\u9009 $0$\uff0c\u82e5\u5272\u6389\u5219\u4ee3\u8868\u82b1\u8d39\u4e86 $v$ \u7684\u4ee3\u4ef7\u9009\u4e3a $1$\uff1b\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u662f $1$\uff0c\u90a3\u4e48\u5b83\u8fde\u5230\u6c47\u70b9 $T$ \u4e00\u6761\u6d41\u91cf\u4e3a $v$ \u7684\u8fb9\uff0c\u82e5\u5b58\u5728\u5219\u4ee3\u8868\u9009 $1$\uff0c\u82e5\u5272\u6389\u5219\u4ee3\u8868\u82b1\u8d39\u4e86 $v$ \u7684\u4ee3\u4ef7\u9009\u4e3a $0$\uff0e\n\n\u9996\u5148\u8fd9\u4e2a $g$ \u662f\u6ca1\u6709\u7528\u7684\uff0c\u5c31\u5982\u679c\u5f53\u4e8c\u4e94\u4ed4\u8981\u8d54\u94b1\u7684\u8bdd\uff0c\u628a $W$ \u52a0\u4e0a $g$\uff0c\u7136\u540e\u6700\u540e\u603b\u7b54\u6848\u518d\u51cf\u53bb $g$ \u5373\u53ef\u3002\n\n\u73b0\u5728\u8fd9\u4e2a\u9650\u5236\u662f\uff1a\u5982\u679c\u8fd9\u4e9b\u4f4d\u7f6e\u4f60\u90fd\u9009 $0/1$\uff0c\u5c31\u53ef\u4ee5\u559c\u63d0 $W$ \u7684\u4ef7\u503c\u3002\u5bf9\u5e94\u5230\u6700\u5c0f\u5272\u4e0a\uff1a\u5148\u5047\u5b9a\u6ee1\u8db3\u6761\u4ef6\uff0c\u83b7\u5f97 $W$ \u7684\u4ef7\u503c\uff1b\u5982\u679c\u8fd9\u4e9b\u4f4d\u7f6e\u7684 $1/0$ \u70b9\u4e0e $T/S$ \u8fb9\u6709\u4e00\u6761\u6ca1\u88ab\u5272\u6389\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u4ed8\u51fa $W$ \u7684\u4ee3\u4ef7\u3002\n\n\u90a3\u4e48\u5efa\u4e00\u4e2a\u65b0\u70b9 $x$\uff0c\u5982\u679c\u5b83\u9650\u5236\u7684\u4f4d\u7f6e\u90fd\u9009 $0$\uff0c\u5c31\u8fde $(x,\\text{\u9650\u5236\u7684\u4f4d\u7f6e},+\\infty)$\uff0c$(S,x,W)$\uff0c\u4e5f\u5c31\u662f $x$ \u5728\u4e8c\u5206\u56fe\u4e2d\u548c $0$ \u70b9\u4f4d\u4e8e\u4e00\u90e8\u5206\u3002\u5982\u679c\u5b83\u9650\u5236\u7684\u4f4d\u7f6e\u90fd\u9009 $1$ \u4e5f\u540c\u7406\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5728\u4e8c\u5206\u56fe\u4e2d\u548c $1$ \u70b9\u4f4d\u4e8e\u4e00\u90e8\u5206\u3002\n\n\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5b50\u7684\u6700\u5c0f\u5272\u662f\u6700\u5c0f\u82b1\u8d39\uff1a\u5047\u8bbe\u5b83\u9650\u5236\u82e5\u5e72\u4f4d\u7f6e\u90fd\u9009 $0$\uff0c\u5982\u679c\u67d0\u4e9b\u4f4d\u7f6e\u672c\u6765\u586b\u7684\u662f $1$\uff0c\u90a3\u4e48\u5982\u679c\u90a3\u4e2a\u4f4d\u7f6e\u8fde\u5411 $T$ \u7684\u8fb9\u6ca1\u6709\u88ab\u5272\u6389\uff0c\u4e0d\u7b26\u5408\u9650\u5236\uff0c$(S,x,W)$ \u4e00\u5b9a\u8981\u88ab\u5272\u6389\uff0c\u7b26\u5408\u9898\u610f\uff1b\u5982\u679c\u67d0\u4e9b\u4f4d\u7f6e\u672c\u6765\u586b\u7684\u662f $0$\uff0c\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e $p$ \u5bf9\u5e94\u7684\u8fb9\u88ab\u5272\u6389\u4e86\uff0c\u5728\u6700\u5c0f\u5272\u4e2d\uff0c\u90a3\u4e48\u4ece\u5b83\u5f00\u59cb\u4e00\u5b9a\u81f3\u5c11\u53ef\u4ee5\u5230\u8fbe\u4e00\u4e2a\u6ca1\u6709\u88ab\u5272\u6389\u7684\u9650\u5236 $y$\uff0c\u8fd9\u6837\u6d41\u53ef\u4ee5\u4ece $S\\to x\\to p\\to y\\to T$ \u6d41\u8fc7\uff0c\u5728\u8fd9\u4e00\u8def\u4e2d\uff0c\u53ea\u6709 $S\\to x$ \u7684\u8fb9\u662f\u53ef\u4ee5\u5272\u7684\uff08\u82e5\u5272\u6389\u6240\u6709\u7684 $y\\to T$\uff0c\u90a3\u4e48 $S\\to p$ \u4e00\u5b9a\u4e0d\u4f1a\u5272\u6389\uff0c\u56e0\u4e3a\u5272\u6389\u7684\u8bdd\u5c31\u4e0d\u4f18\u4e86\uff09\uff0c\u6240\u4ee5 $(S,x,W)$ \u4e00\u5b9a\u8981\u5272\u6389\uff0c\u7b26\u5408\u9898\u610f\u3002\n\n\u81f3\u4e8e\u53ef\u80fd\u51fa\u73b0 $0$ \u6d41\u91cf\u7684\u8fb9\uff0c\u5176\u5b9e\u662f\u65e0\u5173\u7d27\u8981\u7684(?)\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#define pb emplace_back\n#define mp std::make_pair\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\ntypedef std::pair<int, int> pii;\ntypedef std::vector<int> vi;\nconst ll mod = 998244353;\nll Add(ll x, ll y) { return (x+y>=mod) ? (x+y-mod) : (x+y); }\nll Mul(ll x, ll y) { return x * y % mod; }\nll Mod(ll x) { return x < 0 ? (x + mod) : (x >= mod ? (x-mod) : x); }\nll cadd(ll &x, ll y) { return x = (x+y>=mod) ? (x+y-mod) : (x+y); }\nll cmul(ll &x, ll y) { return x = x * y % mod; }\ntemplate <typename T> T Max(T x, T y) { return x > y ? x : y; }\ntemplate<typename T, typename... T2> T Max(T x, T2 ...y) { return Max(x, y...); }\ntemplate <typename T> T Min(T x, T y) { return x < y ? x : y; }\ntemplate<typename T, typename... T2> T Min(T x, T2 ...y) { return Min(x, y...); }\ntemplate <typename T> T cmax(T &x, T y) { return x = x > y ? x : y; }\ntemplate <typename T> T cmin(T &x, T y) { return x = x < y ? x : y; }\ntemplate <typename T>\nT &read(T &r) {\n\tr = 0; bool w = 0; char ch = getchar();\n\twhile(ch < '0' || ch > '9') w = ch == '-' ? 1 : 0, ch = getchar();\n\twhile(ch >= '0' && ch <= '9') r = r * 10 + (ch ^ 48), ch = getchar();\n\treturn r = w ? -r : r;\n}\ntemplate<typename T1, typename... T2>\nvoid read(T1 &x, T2& ...y) { read(x); read(y...); }\nconst int N = 100010;\nconst int M = 500010;\nconst ll INF = 0x7fffffffffffffff;\nint n, m, g;\nint a[N], v[N];\nint tot, S, T, ent = 1, head[N], cur[N], dis[N];\nstruct Edge {\n\tint to, nxt;\n\tll fl;\n}e[M << 1];\ninline void add(int x, int y, ll z) {\n\t//printf(\"%d %d %d\\n\", x, y, z);\n\te[++ent].to = y; e[ent].fl = z; e[ent].nxt = head[x]; head[x] = ent;\n\te[++ent].to = x; e[ent].fl = 0; e[ent].nxt = head[y]; head[y] = ent;\n}\nbool bfs() {\n\tfor(int i = 1; i <= tot; ++i) dis[i] = -1, cur[i] = head[i];\n\tstd::queue<int>q;\n\tq.push(S); dis[S] = 0;\n\twhile(!q.empty()) {\n\t\tint x = q.front(); q.pop();\n\t\tfor(int i = head[x]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif(dis[v] == -1 && e[i].fl) {\n\t\t\t\tdis[v] = dis[x] + 1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T] != -1;\n}\nll dfs(int x, ll lim) {\n\tif(x == T) return lim;\n\tll flow = 0;\n\tfor(int i = cur[x]; i && flow < lim; i = e[i].nxt) {\n\t\tint v = e[i].to; cur[x] = i;\n\t\tif(dis[v] == dis[x] + 1 && e[i].fl) {\n\t\t\tll f = dfs(v, Min(e[i].fl, lim - flow));\n\t\t\tflow += f; e[i].fl -= f; e[i^1].fl += f;\n\t\t}\n\t}\n\treturn flow;\n}\nll dinic() {\n\tll mxfl = 0;\n\twhile(bfs())\n\t\tmxfl += dfs(S, INF);\n\treturn mxfl;\n}\nsigned main() { //freopen(\"data.in\", \"r\", stdin);\n\tll sum = 0;\n\tread(n, m, g); tot = n; S = ++tot; T = ++tot;\n\tfor(int i = 1; i <= n; ++i) read(a[i]);\n\tfor(int i = 1; i <= n; ++i) read(v[i]);\n\tfor(int i = 1; i <= n; ++i) {\n\t\tif(!a[i]) add(S, i, v[i]);\n\t\telse add(i, T, v[i]);\n\t}\n\tfor(int i = 1; i <= m; ++i) {\n\t\tint p = ++tot, to, W, k, f; read(to, W, k); vi vec;\n\t\tfor(int j = 1, x; j <= k; ++j) {\n\t\t\tread(x);\n\t\t\tif(!to) add(p, x, INF);\n\t\t\telse add(x, p, INF);\n\t\t}\n\t\tread(f);\n\t\tif(f) W += g, sum -= g;\n\t\tsum += W;\n\t\tif(!to) add(S, p, W);\n\t\telse add(p, T, W);\n\t}\n\tprintf(\"%lld\\n\", sum - dinic());\n\treturn 0;\n}\n```",
        "postTime": 1642428686,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300dCodeforces 311E Biologist"
    },
    {
        "content": "## Solution\n\n\u7b54\u6848=\u6240\u6709\u8d5e\u52a9\u8d39-\u53d8\u6027\u8d39\u7528-\u6ca1\u62ff\u5230\u7684\u8d5e\u52a9\u8d39-\u8bf7\u559d\u8336\u7684\u8d39\u7528\u3002\n\n\u6240\u6709\u7684\u8d5e\u52a9\u8d39\u662f\u5df2\u77e5\u7684\uff0c\u8981\u6700\u5927\u5316\u7b54\u6848\uff0c\u5c31\u662f\u8981\u6700\u5c0f\u5316\u540e\u9762\u90a3\u90e8\u5206\u3002\n\n\u56e0\u6b64\u53ef\u4ee5\u60f3\u5230\u6700\u5c0f\u5272\uff0c\u5efa\u6e90\u70b9 $S$ \u8868\u793a\u96c4\u6027\uff0c$T$ \u8868\u793a\u96cc\u6027\u3002\n\n\u7136\u540e $S$ \u5411\u6240\u6709\u96c4\u6027\u725b\u8fde\u8fb9\uff0c\u6d41\u91cf\u662f $v_i$\u3002\u96cc\u6027\u725b\u5411 $T$ \u8fde\u8fb9\uff0c\u4ee3\u4ef7\u540c\u7406\u3002\n\n\u7136\u540e\u8003\u8651\u5c06\u670b\u53cb\u4e5f\u653e\u5230\u56fe\u4e2d\u3002\n\n\u5982\u679c\u670b\u53cb\u8981\u6c42\u96c4\u6027\uff0c\u5c31 $S\\to n+i\\to $ \u725b\u3002\u4ee3\u4ef7\u5206\u522b\u662f $w_i(+g)$ \u548c $inf$\uff08\u56e0\u4e3a\u8981\u4fdd\u8bc1\u8fd9\u6761\u8fb9\u7edd\u5bf9\u4e0d\u88ab\u5272\u6389\uff09\u3002\u53cd\u4e4b\u4ea6\u7136\u3002\n\n\u90a3\u4e48\u6b64\u65f6\u5272\u725b\u8fb9\u76f8\u5f53\u4e8e\u53d8\u6027\uff0c\u7ed9\u4eba\u8fb9\u76f8\u5f53\u4e8e\u4e0d\u8981\u67d0\u4eba\u7684\u8d5e\u52a9\u8d39\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u8dd1\u6700\u5927\u6d41\u4e86\u3002\n\n## Code\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define N 10005\n#define inf 107374180\nusing namespace std;\nstruct node\n{\n    int to,next,head,flow;\n}a[200005];\nqueue<int> q;\nint n,m,g,S,T,tot=1,xxb,gg,k,x,isf,ans,xb[N],v[N],cur[N<<1],dep[N<<1];\nint read()\n{\n    int res=0;char ch=getchar();\n    while (ch<'0'||ch>'9') ch=getchar();\n    while (ch>='0'&&ch<='9') res=(res<<1)+(res<<3)+(ch-'0'),ch=getchar();\n    return res;\n}\nvoid add(int x,int y,int z)\n{\n    a[++tot].to=y;\n    a[tot].flow=z;\n    a[tot].next=a[x].head;\n    a[x].head=tot;\n}\nbool bfs()\n{\n    for (int i=1;i<=n+m+2;++i)\n        dep[i]=0;\n    while (!q.empty()) q.pop();\n    dep[S]=1;q.push(S);\n    while (!q.empty())\n    {\n        int x=q.front();q.pop();\n        for (int i=a[x].head;i;i=a[i].next)\n        {\n            if (a[i].flow>0&&dep[a[i].to]==0)\n            {\n                dep[a[i].to]=dep[x]+1;\n                q.push(a[i].to);\n                if (a[i].to==T) return true;\n            }\n        }\n    }\n    return false;\n}\nint dfs(int x,int ff)\n{\n    if (x==T) return ff;\n    int fw=0;\n    for (int &i=cur[x];i;i=a[i].next)\n    {\n        if (a[i].flow>0&&dep[a[i].to]==dep[x]+1)\n        {\n            int f=dfs(a[i].to,min(a[i].flow,ff));\n            a[i].flow-=f;\n            a[i^1].flow+=f;\n            fw+=f;\n            ff-=f;\n            if (ff<=0) break;\n        }\n    }\n    return fw;\n}\nint dinic()\n{\n    int res=0;\n    while (bfs())\n    {\n        for (int i=1;i<=n+m+2;++i)\n            cur[i]=a[i].head;\n        res+=dfs(S,inf);\n    }\n    return res;\n}\nint main()\n{\n    n=read();m=read();g=read();\n    S=n+m+1;T=n+m+2;\n    for (int i=1;i<=n;++i)\n        xb[i]=read();\n    for (int i=1;i<=n;++i)\n        v[i]=read();\n    for (int i=1;i<=n;++i)\n    {\n        if (xb[i]==1) add(S,i,v[i]),add(i,S,0);\n        else add(i,T,v[i]),add(T,i,0);\n    }\n    for (int i=1;i<=m;++i)\n    {\n        xxb=read();gg=read();\n        ans+=gg;\n        k=read();\n        for (int j=1;j<=k;++j)\n        {\n            x=read();\n            if (xxb==1) add(n+i,x,inf),add(x,n+i,0);\n            else add(x,n+i,inf),add(n+i,x,0);\n        }\n        isf=read();\n        if (isf==1) gg+=g;\n        if (xxb==1) add(S,n+i,gg),add(n+i,S,0);\n        else add(n+i,T,gg),add(T,n+i,0);\n    }\n    printf(\"%d\\n\",ans-dinic());\n    return 0;\n}\n```\n\n",
        "postTime": 1640420073,
        "uid": 166078,
        "name": "Thunder_S",
        "ccfLevel": 6,
        "title": "CF311E Biologist"
    },
    {
        "content": "\u633a\u7ed5\u7684\u4e00\u9053\u9898\u3002\n\n### \u7b97\u6cd5\n\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff08\u7f51\u7edc\u6d41\uff09\n\n### \u601d\u8def\n\n\u5bf9\u4e8e\u8fd9\u7c7b $0/1$ \u7ffb\u8f6c\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u59a8\u5047\u8bbe\u6240\u6709\u7684\u4f4d\u7f6e\u90fd\u53d8\u6210\u4e86 $1$\uff0c\u8fd9\u65f6\u5019\u7684\u5229\u6da6\u4e3a\u8981\u6c42\u4e3a $1$ \u7684\u5229\u6da6\u4e4b\u548c $-$ \u5c06 $0$ \u53d8\u6210 $1$ \u7684\u82b1\u8d39\u4e4b\u548c $-$ \u9700\u8981\u5012\u8d34\u7684\u8981\u6c42\u4e3a $0$ \u7684\u4ee3\u4ef7\u4e4b\u548c\u3002\n\n\u8003\u8651\u5982\u679c\u8981\u6ee1\u8db3\u4e00\u4e2a\u8981\u6c42\u4e3a $0$ \u7684\u8be2\u95ee\uff0c\u6211\u4eec\u8981\u5c06\u4e0e\u5176\u76f8\u5173\u7684\u4f4d\u7f6e\u5168\u90e8\u53d8\u4e3a $0$\uff0c\u5e76\u4e14\u6240\u6709\u4e0e\u8fd9\u4e9b\u4f4d\u7f6e\u76f8\u5173\u7684\u8981\u6c42\u4e3a $1$ \u7684\u8be2\u95ee\u90fd\u65e0\u6cd5\u6ee1\u8db3\u3002\u5982\u679c\u5c06\u8be2\u95ee\u4e0e\u4f4d\u7f6e\u7684\u76f8\u4e92\u9650\u5236\u62bd\u8c61\u6210\u8fb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u6700\u5927\u6743\u6bd4\u5408\u5b50\u56fe\u6a21\u578b\u3002\n\n\u82e5\u4e00\u4e2a $0$ \u7684\u8981\u6c42\u88ab\u6ee1\u8db3\uff0c\u90a3\u4e48\u53ef\u4ee5\u83b7\u5f97 $w_i+g$ \uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u7684\u5229\u6da6\uff0c\u82e5\u4e00\u4e2a $1$ \u7684\u8981\u6c42\u4e0d\u80fd\u6ee1\u8db3\u4e86\uff0c\u90a3\u4e48\u4f1a\u627f\u53d7 $w_i+g$\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u7684\u635f\u5931\uff0c\u4e0d\u59a8\u5c06\u524d\u8005\u89c6\u4e3a\u6b63\u6743\u70b9\uff0c\u5c06\u540e\u8005\u89c6\u4e3a\u8d1f\u6743\u70b9\u3002\u5bf9\u4e8e\u4e00\u4e2a\u539f\u672c\u4e3a $0$ \u7684\u4f4d\u7f6e\uff0c\u5c06\u5176\u91cd\u65b0\u53d8\u4e3a $0$ \u76f8\u5f53\u4e8e\u53cd\u6094\u4e86\uff0c\u53ef\u4ee5\u83b7\u5f97 $v+i$ \u7684\u5229\u6da6\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u539f\u672c\u4e3a $1$ \u7684\u70b9\uff0c\u5c06\u5176\u7f6e\u4e3a $0$ \u5219\u9700\u8981\u82b1\u8d39 $v_i$ \u7684\u4ee3\u4ef7\uff0c\u540c\u6837\uff0c\u524d\u8005\u4e3a\u6b63\u6743\u70b9\uff0c\u540e\u8005\u4e3a\u8d1f\u6743\u70b9\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u539f\u56fe\u7684\u5efa\u6cd5\uff0c\u7136\u540e\u6309\u7167\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u5957\u8def\u6c42\u51fa\u6765\u5c31\u884c\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7b54\u6848\u5c31\u662f $\\sum w-Maxflow$\u3002\n\n### \u53c2\u8003\u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n#define LL long long\n\nusing namespace std;\n\ninline LL read(){\n    LL x = 0, f = 1; char c = getchar();\n    while(c < '0' || c > '9'){if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9'){x = x * 10 + c - '0'; c = getchar();}\n    return x * f;\n}\n\nconst int maxn = 1e5 + 10, inf = 0x3f3f3f3f;\nint n,m,a[maxn],g;\nint head[maxn],num = 1,s,t;\nLL Ans;\nstruct Edge{int then,to,val;}e[maxn << 1];\n\nvoid add(int u, int v, int val){\n    e[++num] = (Edge){head[u], v, val}; head[u] = num;\n    e[++num] = (Edge){head[v], u, 0}; head[v] = num;\n}\n\nint dep[maxn]; bool vis[maxn];\nbool bfs(int st, int en){\n    queue<int> q;\n    memset(vis, 0, sizeof(vis));\n    memset(dep, 0x3f, sizeof(dep));\n    q.push(st), dep[st] = 0, vis[st] = 1;\n    while(!q.empty()){\n        int u = q.front(); q.pop();\n        vis[u] = 0;\n        for(int i = head[u]; i; i = e[i].then){\n            int v = e[i].to;\n            if(e[i].val > 0 && dep[v] == inf){\n                dep[v] = dep[u] + 1;\n                if(!vis[v]) vis[v] = 1, q.push(v);\n            }\n        }\n    }\n    return (dep[en] != inf);\n}\n\nint cur[maxn];\nint dfs(int u, int sum){\n    if(u == t) return sum;\n    int now = 0;\n    for(int &i = cur[u]; i; i = e[i].then){\n        int v = e[i].to;\n        if(e[i].val > 0 && dep[v] == dep[u] + 1){\n            int a = dfs(v, min(sum - now, e[i].val));\n            e[i].val -= a, e[i ^ 1].val += a, now += a;\n            if(now == sum) return now;\n        }\n    }\n    return now;\n}\n\nint Dinic(){\n    int Maxflow = 0;\n    while(bfs(s, t)){\n        memcpy(cur, head, sizeof(head));\n        Maxflow += dfs(s, inf);\n    }\n    return Maxflow;\n}\n\nint main(){\n\n    //freopen(\"a.in\",\"r\",stdin);\n    //freopen(\"a.out\",\"w\",stdout);\n    \n    n = read(), m = read(), g = read();\n    s = n + m + 1, t = n + m + 2;\n    for(int i = 1; i <= n; ++ i) a[i] = read();\n    for(int i = 1; i <= n; ++ i){\n        int val = read();\n        if(a[i]) add(i, t, val);\n        else add(s, i, val);\n    }\n    for(int i = 1; i <= m; ++ i){\n        int op = read(), w = read(), k = read();\n        int now = i + n; Ans += w;\n        while(k--){\n            int pos = read();\n            if(op) add(pos, now, inf);\n            else add(now, pos, inf);\n        }\n        int fg = read(); if(fg) w += g;\n        if(op) add(now, t, w);\n        else add(s, now, w);\n    }\n    Ans -= Dinic();\n    printf(\"%lld\\n\", Ans);\n    return 0;\n}\n```",
        "postTime": 1617021465,
        "uid": 120351,
        "name": "When",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF311E Biologist"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\u5df2\u7ecf\u4e0d\u77e5\u9053\u8fd8\u4f1a\u6709\u51e0\u500d\u7ecf\u9a8c\u4e86\n\n[\u4e00\u500d](https://www.luogu.com.cn/problem/P1361)\n\n[\u4e24\u500d](https://www.luogu.com.cn/problem/P4313)\n\n[\u4e09\u500d](https://www.luogu.com.cn/problem/P1646)\n\n[\u56db\u500d\uff08\u4e5f\u5c31\u662f\u672c\u9898](https://www.luogu.com.cn/problem/CF311E)\n\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684 $01$ \u4e32\uff0c\u5c06\u7b2c $i$ \u4e2a\u4f4d\u7f6e\u53d8\u4e3a\u53e6\u5916\u4e00\u4e2a\u6570\u5b57\u7684\u4ee3\u4ef7\u662f $v_i$ \u3002\n\n\u6709 $m$ \u4e2a\u8981\u6c42\uff0c\u7ed9\u5b9a $k$ \u4e2a\u4f4d\u7f6e\uff0c\u786e\u5b9a\u6761\u4ef6\u662f $0$ \u6216\u8005 $1$ \uff0c\u53ea\u6709\u5168\u90e8\u7ed9\u5b9a\u7684\u4f4d\u7f6e\u90fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u624d\u53ef\u4ee5\u5f97\u5230 $w_k$ \u6536\u76ca\uff0c\u800c\u4e14\u5176\u4e2d\u4e00\u4e9b\u8981\u6c42\u6ca1\u6ee1\u8db3\u8fd8\u8981\u5012\u8d34 $g$ \u6536\u76ca\n\n\u6c42\u6700\u5927\u6536\u76ca\n\n$1\\leq n\\leq 10^4$ \uff0c $1\\leq m\\leq 2\\cdot 10^3$ \uff0c $1\\leq k\\leq 10$ \uff0c $1\\leq g,v_i,w_k\\leq 10^4$\n\n### solution\n\u4e00\u5171\u5c31\u4e24\u79cd\u521d\u59cb\u60c5\u51b5\uff0c\u201c\u4e8c\u5206\u56fe\u201d\u4e0a\u6700\u5c0f\u5272\u65e0\u7591\u4e86\uff0c\u5de6\u8fb9\u4e00\u6e9c\u5c31\u5b9a\u4e3a\u521d\u59cb\u4e3a $0$ \u7684\u4f4d\u7f6e\uff0c\u53f3\u8fb9\u4e00\u6e9c\u5c31\u5b9a\u4e3a\u521d\u59cb\u4e3a $1$ \u7684\u4f4d\u7f6e\u3002\n\n\u8bbe\u4e00\u4e2a\u6e90\u70b9\uff0c\u4e00\u4e2a\u6c47\u70b9\uff0c\u5bf9\u4e8e $v_i$ \uff0c\u76f4\u63a5\u52a0\u8fb9\u5c31\u884c\u4e86\u3002\n\n\u90a3\u4e48\u600e\u4e48\u5904\u7406\u6240\u6709\u8981\u6c42\u5462\uff1f\n\n\u56e0\u4e3a\u4e00\u65e6\u6709\u4e00\u4e2a\u4f4d\u7f6e\u6ca1\u6709\u8fbe\u5230\u4e0e\u5176\u4ed6\u4e3a\u540c\u4e00\u4e2a\u6761\u4ef6\uff0c\u8fd9\u4e2a\u8981\u6c42\u7684\u6536\u76ca\u503c\u5c31\u4f5c\u5e9f\u4e86\uff0c\u90a3\u4e48\u5c31\u610f\u5473\u7740\u8981\u7528\u4e00\u4e2a\u624b\u6bb5\uff0c\u4fc3\u4f7f\u6240\u6709\u4f4d\u7f6e\u4f1a\u88ab\u201c\u7ed1\u5b9a\u201d\u5230\u4e00\u8d77\uff0c\u624d\u80fd\u89e6\u53d1\u8fd9\u4e2a\u6536\u76ca\u3002\n\n\u6240\u4ee5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8981\u6c42\uff0c\u73c2\u4ee5\u65b0\u5efa\u4e00\u4e2a\u70b9\uff0c\u628a\u8981\u6c42\u91cc\u9762\u7684\u4f4d\u7f6e\u4e0e\u65b0\u70b9\u5efa\u7acb\u8054\u7cfb\uff0c\u6743\u503c\u4e3a $\\infty$ \u3002\n\n\u5b8c\u4e86\u5417\uff1f\n\n\u6ca1\u6709\uff0c\n\n\u76f4\u63a5\u7531\u8981\u6c42\u5185\u6240\u6709\u4f4d\u7f6e\u8fde\u5411\u65b0\u70b9\u80af\u5b9a\u662f\u6709\u95ee\u9898\u7684\uff0c\u5927\u6982\u753b\u4e00\u4e0b\u56fe\u5e94\u8be5\u5c31\u80fd\u660e\u767d\uff0c\u5982\u679c\u8981\u8ddf\u7740\u6574\u4e2a\u56fe\u7684\u5927\u6f6e\u6d41\u8d70\uff08\u8dd1\u201c\u4e8c\u5206\u56fe\u201d\uff09\uff0c\u8981\u7531\u521d\u59cb\u4e3a $0$ \u7684\u4f4d\u7f6e\u8fde\u5411\u65b0\u70b9\uff0c\u7531\u65b0\u70b9\u8fde\u5411\u521d\u59cb\u4e3a $1$ \u7684\u4f4d\u7f6e\u3002\n\n\u6700\u5927\u6536\u76ca\u5c31\u662f\u5168\u90e8\u8981\u6c42\u63d0\u4f9b\u7684\u7684\u6536\u76ca\u503c\u603b\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u3002\uff08\u6ce8\uff1a\u5343\u4e07\u4e0d\u8981\u52a0\u4e0a\u5012\u8d34\u7684 $g$ \uff0c\u56e0\u4e3a\u8fd9\u4e0d\u662f\u7b97\u5728\u6536\u76ca\u4e2d\uff0c\u800c\u662f\u7b97\u5728\u4ee3\u4ef7\u4e2d\uff09\u3002\n\n\u5177\u4f53\u770b\u770b\u4ee3\u7801\u5427\uff08\u7801\u98ce\u5f88\u6e05\u5947\uff0c\u8bf7\u614e\u7528\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=2e4+10,M=8e4+10;\nconst int INF=0x3f3f3f3f;\nint n,m,g,s,t,cur[N],gap[N],dep[N],q[N];\n//cur[i]:\u5f53\u524d\u5f27\u4f18\u5316,gap[i]:GAP\u4f18\u5316 \nint fst[N],nxt[M],to[M],val[M],tot=2;\nint ans,a[N];\ninline int read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n\treturn s*w;\n}\ninline void add(int u,int v,int w)\n{\n\tnxt[tot]=fst[u];\n\tto[tot]=v,val[tot]=1ll*w;\n\tfst[u]=tot;++tot;\n\tnxt[tot]=fst[v];\n\tto[tot]=u,val[tot]=0;\n\tfst[v]=tot;++tot;\n}\ninline void bfs()\n{\n\tfor(int i=s;i<=t;++i)\n\tdep[i]=q[i]=gap[i]=0;\n\tint hd=0,tl=1;\n\tdep[t]=1,gap[1]=1;q[tl]=t;\n\t//\u8fd9\u662f\u4ece\u6c47\u70b9\u5f00\u59cb\n\twhile(hd<tl)\n\t{\n\t\tint u=q[++hd];\n\t\tfor(int i=fst[u];i;i=nxt[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tif(!dep[v])\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\t++gap[dep[v]];\n\t\t\t\tq[++tl]=v;\n\t\t\t}\n\t\t}\n\t}\n}\nll dfs(int u,ll lim)\n{\n\tif(u==t)return lim;\n\tint ans=0,tmp;\n\tfor(int i=cur[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tcur[u]=i;\n\t\tif(dep[v]==dep[u]-1&&val[i])\n\t\t{\n\t\t\ttmp=dfs(v,min(lim,1ll*val[i]));\n\t\t\tval[i]-=tmp,lim-=tmp;\n\t\t\tans+=tmp,val[i^1]+=tmp;\n\t\t\tif(!lim)break;\n\t\t}\n\t}\n\tif((!ans)||lim)\n\t{\n\t\tif(--gap[dep[u]]==0)dep[s]=n+m+3;\n\t\t++gap[++dep[u]];\n\t}\n\treturn ans;\n}\ninline ll isap()\n{\n\tll ans=0;\n\tbfs();\n\twhile(dep[s]<=n+m+2)\n\t{\n\t\tmemcpy(cur,fst,sizeof(cur));\n\t\tans+=dfs(s,INF);\n\t}\n\treturn ans;\n}\nint main()\n{\n\tn=read(),m=read(),g=read(),s=0,t=n+m+1;\n\tfor(int i=1;i<=n;++i)a[i]=read();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tint w=read();\n\t\tif(!a[i])add(s,i,w);\n\t\telse add(i,t,w);\n\t}\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint sign=read(),w=read(),k=read();\n\t\tans+=w;\n\t\tfor(int j=1;j<=k;++j)\n\t\t{\n\t\t\tint x=read();\n\t\t\tif(!sign)add(i+n,x,INF);\n\t\t\telse add(x,i+n,INF);\n\t\t}\n\t\tint opt=read();\n\t\tif(opt)w+=g;\n\t\tif(!sign)add(s,i+n,w);\n\t\telse add(i+n,t,w);\n\t}\n\tprintf(\"%d\",ans-isap());\n\treturn 0;\n}\n```\n\u53ea\u6c42\u80fd\u5e2e\u52a9\u5230\u51e0\u4e2a\u4eba\u7f62\u3002\u3002",
        "postTime": 1614944927,
        "uid": 206024,
        "name": "Illusory_dimes",
        "ccfLevel": 7,
        "title": "CF311E Biologist \u9898\u89e3"
    },
    {
        "content": "# \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe  \n1.\u5bf9\u4e8e\u6bcf\u4e2a\u53d6\u503c\u4e3a0\u7684\u4f4d\u7f6e\uff0c  \n\u5411S\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3av[i]\u7684\u8fb9\u8868\u793a\u628a\u8fd9\u4e2a\u70b9\u53d8\u4e3a1\u7684\u4ee3\u4ef7\u3002  \n2.\u53d6\u503c\u4e3a1\u7684\u4f4d\u7f6e\u540c\u7406\u3002  \n3.\u5bf9\u4e8e\u6bcf\u4e2a\u8981\u6c42\uff0c\u5411\u5b83\u6240\u8981\u6c42\u7684\u6240\u6709\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a+\u221e\u7684\u8fb9\uff0c \n\u4ee5\u6b64\u4fdd\u8bc1\u8fd9\u4e9b\u8981\u6c42\u53ea\u4f1a\u88ab\u540c\u65f6\u9009\u6216\u540c\u65f6\u4e0d\u9009\u3002  \n4.\u5bf9\u4e8e\u6bcf\u4e2a\u8981\u6c42\u96c6\u5408\u4e3a0\u7684\uff0c\u5411S\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3aw[i]\u7684\u8fb9\u3002  \n\u82e5\u5931\u8d25\u4e86\u8981\u989d\u5916\u4ed8\u51fa\u4ef7\u503c\uff0c\u5c31\u628a\u8fb9\u7684\u5bb9\u91cf\u6539\u6210w[i]+g\u3002  \n\u8f6c\u5316\u4e3a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002  \n$ans = \\sum_{i = 1}^{m} w_i$  - \u6700\u5c0f\u5272\u3002  \n\u4e8e\u662f\u8dd1\u4e00\u904dDinic\u5373\u53ef\u3002  \n[\u5ba3\u4f20\u4e00\u6ce2\u6211\u7684blog](https://www.luogu.org/blog/MYJ-blog-blog/solution-cf311e)  \nCode\uff1a  \n```\n#include <bits/stdc++.h>\n#define N 2000001\n#define inf 0x3f3f3f3f\nusing namespace std;\n\nint n, m, g, s, t, ans;\nint tot = 1, to[N], val[N], nex[N], dep[N], head[N], cur[N];\nint a[N];\n\ninline int read(){\n\tint x = 0;\n\tint flag = 1;\n\tchar ch = getchar();\n\twhile (!isdigit(ch)){\n\t\tif (ch == '-') flag = -1;\n\t\tch = getchar();\n\t}\n\twhile (isdigit(ch)){\n\t\tx = (x << 3) + (x << 1) + ch - 48;\n\t\tch = getchar();\n\t}\n\treturn x * flag;\n}\n\n\nvoid add(int x, int y, int z) {\n\ttot++;\n\tto[tot] = y;\n\tval[tot] = z;\n\tnex[tot] = head[x];\n\thead[x] = tot;\n\ttot++;\n\tto[tot] = x;\n\tval[tot] = 0;\n\tnex[tot] = head[y];\n\thead[y] = tot;\n}\n\ninline bool bfs() {\n\tmemset(dep, 0, sizeof(dep));\n\tdep[t] = 1;\n\tqueue <int> q;\n\tq.push(t);\n\twhile (!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor (int i = head[u]; i; i = nex[i]) {\n\t\t\tint d = to[i];\n\t\t\tif (dep[d] == 0 && val[i ^ 1]) {\n\t\t\t\tdep[d] = dep[u] + 1;\n\t\t\t\tq.push(d);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[s] > 0;\n}\n\ninline int dfs(int k, int flow) {\n\tint rlow = 0;\n\tif (k == t) return flow;\n\tfor (int &tot = cur[k]; tot; tot = nex[tot]) {\n\t\tint d = to[tot];\n\t\tif (val[tot] && dep[d] + 1 == dep[k]) {\n\t\t\tint delta = dfs(d, min(flow, val[tot]));\n\t\t\trlow += delta;\n\t\t\tflow -= delta;\n\t\t\tval[tot] -= delta;\n\t\t\tval[tot ^ 1] += delta;\n\t\t\tif (flow == 0) break;\n\t\t}\n\t}\n\treturn rlow;\n}\n\nint Dinic() {\n\tint maxflow = 0;\n\twhile (bfs()) {\n\t\tfor (int i = s; i <= t; i++)\n\t\t\tcur[i] = head[i];\n\t\tmaxflow += dfs(s, inf);\n\t}\n\treturn maxflow;\n}\n\nint main() {\n\tn = read(), m = read(), g = read();\n\ts = 0, t = n + m + 1;\n\tfor (int i = 1; i <= n; i++) {\n\t\ta[i] = read();\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tint val = read();\n\t\tif (a[i] == 0) add(s, i, val);\n\t\telse add(i, t, val);\n\t}\n\tfor (int i = 1; i <= m; i++) {\n\t\tint opt = read(), val = read(), k = read();\n\t\tif (opt == 0) {\n\t\t\tfor (int j = 1; j <= k; j++) {\n\t\t\t\tint op = read();\n\t\t\t\tadd(n + i, op, inf);\n\t\t\t}\n\t\t\tint op = read();\n\t\t\tif (op == 0) add(s, n + i, val);\n\t\t\telse add(s, n + i, val + g);\n\t\t}\n\t\tif (opt == 1) {\n\t\t\tfor (int j = 1; j <= k; j++) {\n\t\t\t\tint op = read();\n\t\t\t\tadd(op, n + i, inf);\n\t\t\t}\n\t\t\tint op = read();\n\t\t\tif (op == 0) add(n + i, t, val);\n\t\t\telse add(n + i, t, val + g);\n\t\t}\n\t\tans += val;\n\t}\n\tprintf(\"%d\\n\", ans - Dinic());\n\treturn 0;\n}\n```\n",
        "postTime": 1565089106,
        "uid": 93286,
        "name": "Yuno",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF311E \u3010Biologist\u3011"
    }
]