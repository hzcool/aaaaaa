[
    {
        "content": "# **\u9898\u610f**\n\n**\u4ea4\u6362\u77e9\u9635\u7684\u4e00\u4e9b\u5217\uff0c\u4f7f\u5f97\u6bcf\u4e00\u884c1\u90fd\u76f8\u90bb**\n\n\n------------\n# **\u9898\u89e3**\n\n**\u5f88\u8ba9\u4eba\u5934\u75db\u7684\u7ec6\u8282\u9898 ~~(\u5176\u5b9e\u5177\u4f53\u505a\u6cd5\u81ea\u5df1\u624b\u5b8c\u51e0\u904d\u5c31\u80fd\u5927\u6982\u60f3\u5230)~~\n\u5728 [CF](https://codeforces.com/blog/entry/5895) \u6709\u4e00\u7bc7\u9898\u89e3(\u4f46\u8bb2\u89e3\u7684\u5e76\u4e0d\u8be6\u7ec6)  \n\u6240\u4ee5\u6211\u6765\u8bb2\u89e3\u4ee5\u4e0b\u6211\u7684\u505a\u6cd5\uff1a**\n\n\n------------\n\n\n### **\u9996\u5148\u6211\u4eec\u62ff\u6765\u7b2c\u4e00\u884c\uff1a**  \n\u628a\u4e00\u884c\u628a\u5176\u4e2d\u6240\u6709\u7b49\u4e8e1\u7684\u5217\u5206\u6210\u7b2c\u4e00\u7ec4\uff0c\u628a\u6240\u6709\u5269\u4e0b\u7684\u5217\u653e\u5165\u4e00\u4e2a\u53eb\u505a\u5269\u4f59\u7ec4\u7684\u5730\u65b9\u3002  \n\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5728\u7b2c\u4e00\u7ec4\u4e2d\u6240\u6709\u7684\u5217\u5fc5\u987b\u8fde\u7eed\uff0c\u4f46\u662f\u4ed6\u4eec\u7684\u987a\u5e8f\u5374\u6ca1\u6709\u4efb\u4f55\u8981\u6c42\u3002\n        \n### **\u5176\u6b21\u6211\u4eec\u518d\u62ff\u6765\u4e00\u884c\uff1a** \n\u5047\u8bbe\u8fd9\u4e00\u884c\u4e2d1\u6240\u5728\u7684\u5217\u6709\u5728\u7b2c\u4e00\u7ec4\u4e2d\u7684,\u6211\u4eec\u4e5f\u7ed9\u8fd9\u65b0\u7684\u4e00\u884c\u5206\u7ec4\uff0c\u5206\u4e3a\u7b2c\u4e8c\u7ec4\u548c\u5269\u4f59\u7ec4\uff1a  \n\u73b0\u5728\u6211\u4eec\u627e\u51fa\u8fd9\u56db\u79cd\u5217\uff1a  \n1\uff1a\u5728\u7b2c\u4e00\u7ec4\u4e2d\u4e0d\u5728\u7b2c\u4e8c\u7ec4\u4e2d(\u53ef\u80fd\u4e3a\u7a7a)  \n2\uff1a\u65e2\u7b2c\u4e00\u7ec4\u4e2d\u4e5f\u7b2c\u4e8c\u7ec4\u4e2d  \n3\uff1a\u5728\u7b2c\u4e8c\u7ec4\u4e2d\u4e0d\u518d\u7b2c\u4e00\u7ec4\u4e2d(\u53ef\u80fd\u4e3a\u7a7a)  \n4\uff1a\u4e24\u4e2a\u5269\u4f59\u7ec4\u7684\u4ea4  \n\u663e\u7136\u8fd9\u56db\u7ec4\u5217\u521a\u597d\u662f\u6240\u6709\u7684\u5217\uff0c\u6211\u4eec\u518d\u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff1a\u4e3a\u4e86\u4f7f\u4e00\u884c\u4e2d\u6240\u6709\u76841\u8fde\u7eed\uff0c\u5728\u7b2c\u4e00\u7ec4\u4e2d\u7684\u5217\u5fc5\u987b\u662f\u8fde\u7eed\u7684\uff0c\u5728\u7b2c\u4e8c\u7ec4\u4e2d\u7684\u5217\u4e5f\u5fc5\u987b\u662f\u8fde\u7eed\u7684\u3002  \n\u6240\u4ee5\u5982\u679c\u6211\u4eec\u7ed9\u56db\u79cd\u5217\u4e2d\u76841\u30012\u30013\u4e2d\u6392\u5e8f\u5b83\u4eec\u7684\u987a\u5e8f\u5fc5\u987b\u662f123\u6216\u662f321\uff0c\u7b2c\u56db\u7ec4\u4e2d\u7684\u5217\u53ef\u4ee5\u6446\u5728123\u7ec4\u7684\u5de6\u53f3(\u56e0\u4e3a\u6ca1\u6709\u8981\u6c42\u7b2c\u56db\u7ec4\u4e2d\u7684\u5217\u8fde\u7eed\uff0c\u6240\u4ee5\u53ea\u8981\u4e0d\u63d2\u5728123\u7ec4\u7684\u4e2d\u95f4\u653e\u5728\u54ea\u91cc\u90fd\u53ef\u4ee5)  \n\u73b0\u5728\u6211\u4eec\u518d\u770b\u5982\u679c\u8fd9\u4e00\u884c\u4e2d\u76841\u6240\u5728\u7684\u5217\u53ea\u5728\u5269\u4f59\u7ec4\u4e2d\uff0c\u90a3\u4e48\u7b2c\u4e00\u884c\u548c\u7b2c\u4e8c\u884c\u4e4b\u95f4\u5c06\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u5904\u7406\u7b2c\u4e00\u884c\u7684\u65b9\u6cd5\u5904\u7406\u7b2c\u4e8c\u884c\n\n\n------------\n\n### **\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5b66\u4f1a\u4e86\u5982\u4f55\u5904\u7406\u4e24\u884c\uff0c\u4ee5\u6b64\u7c7b\u63a8\u6211\u4eec\u4fbf\u53ef\u4ee5\u5904\u7406\u5b8c\u6574\u4e2a\u95ee\u9898\uff1a**  \n\u5176\u5b9e\u521a\u624d\u7684\u9898\u89e3\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a  \n\u6dfb\u52a0\u5b8c\u7b2c\u4e00\u884c\u4e4b\u540e\u6211\u4eec\u7684\u5217\u88ab\u5206\u4e3a\u4e86\u7b2c\u4e00\u7ec4\u548c\u5269\u4f59\u7ec4  \n\u6dfb\u52a0\u5b8c\u7b2c\u4e8c\u884c\u6211\u4eec\u7684\u5217\u88ab\u5206\u4e3a\u4e86\u7b2c\u4e00\u7ec4\uff0c\u7b2c\u4e8c\u7ec4\uff0c\u7b2c\u4e09\u7ec4(\u8fd9\u4e09\u7ec4\u5fc5\u987b\u6309\u7167\u987a\u5e8f\u51fa\u73b0)\u548c\u5269\u4f59\u7ec4  \n\u6211\u4eec\u7684\u6bcf\u4e00\u7ec4\u4e2d\u7684\u6bcf\u4e00\u5217\u53ef\u4ee5\u968f\u610f\u4ea4\u6362\uff0c\u4f46\u662f\u5927\u7ec4\u7684\u987a\u5e8f\u5374\u662f\u56fa\u5b9a\u4e0d\u80fd\u53d8\u7684  \n\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u65b0\u589e\u4e00\u884c\u5176\u5b9e\u90fd\u662f\u8981\u5224\u65ad\u5b83\u53ef\u4ee5\u4e0d\u53ef\u4ee5\u5728\u672c\u6765\u7684\u5206\u7ec4\u4e0a\u8fdb\u884c\u66f4\u7ec6\u7684\u5206\u7ec4\u4f7f\u5f97\u65b0\u7684\u4e00\u884c\u4e2d\u6240\u6709\u76841\u4e5f\u53ef\u4ee5\u76f8\u90bb\uff0c\u5982\u679c\u4e0d\u884c\u5c31\u662f\u65e0\u89e3\uff0c\u5426\u5219\u5c31\u7528\u65b0\u5212\u5206\u597d\u7684\u5206\u7ec4\u7ee7\u7eed\u53bb\u6dfb\u52a0\u4e0b\u4e00\u884c\u3002  \n\u800c\u4e14\u6bcf\u6b21\u65b0\u589e\u4e00\u884c\u4e4b\u540e\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u518d\u53bb\u7ba1\u4e4b\u524d\u7684\u884c\u662f0\u548c\u8fd8\u662f1\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u8981\u80fd\u4fdd\u8bc1\u8fd9\u4e9b\u5206\u7ec4\u7684\u987a\u5e8f\u5b83\u4eec\u5c31\u4e00\u5b9a\u80fd\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\n------------\n\n#### \u63a5\u4e0b\u6765\u6211\u4eec\u4e3e\u51e0\u4e2a\u6817\u5b50\uff1a  \n**\u5047\u8bbe\u539f\u672c\u6211\u4eec\u7684\u5206\u7ec4\u4e3a1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\u548c\u5269\u4f59\u7ec4\uff1a** \n##### 1\uff1a\u5982\u679c\u65b0\u589e\u52a0\u7684\u4e00\u884c\u4e2d1\u51fa\u73b0\u5728\u4e862\u548c\u5269\u4f59\u7ec4\uff1a  \n\u4e3a\u4fdd\u6301\u539f\u6765123456\u7684\u987a\u5e8f\uff0c\u6211\u4eec\u4e0d\u7ba1\u600e\u4e48\u6837\u4e5f\u65e0\u6cd5\u8ba9\u57282\u4e2d\u7684\u4e00\u4e9b\u5217\u548c\u5728\u5269\u4f59\u7ec4\u4e2d\u7684\u5217\u53d8\u4e3a\u76f8\u90bb\u7684\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u65e0\u89e3  \n##### 2\uff1a\u5982\u679c\u65b0\u589e\u52a0\u7684\u4e00\u884c\u4e2d1\u51fa\u73b0\u5728\u4e865\u30016\u548c\u5269\u4f59\u7ec4\uff1a  \n\u8fd9\u65f6\u4e3a\u4e86\u4f7f\u65b0\u589e\u52a0\u7684\u4e00\u884c\u4e2d1(\u65b0\u4e32\u4e2d\u7684)\u90fd\u76f8\u90bb\uff0c5\u4e2d\u7684\u5217\u5728\u8fd9\u4e00\u884c\u4e2d\u5fc5\u987b\u5168\u90fd\u662f1(\u5426\u5219\u65e0\u89e3)\uff0c\u6211\u4eec\u8981\u628a5\u4e2d\u76841\u90fd\u79fb\u52305\u7684\u6700\u53f3\u8fb9\uff0c\u628a\u5269\u4f59\u7ec4\u4e2d\u76841\u90fd\u79fb\u5230\u5269\u4f59\u7ec4\u7684\u6700\u5de6\u8fb9\uff0c\u8fd9\u6837\u7b2c5\u7ec4\u53c8\u88ab\u6211\u4eec\u5206\u4e3a\u4e86\u4e24\u7ec4(\u4e5f\u5c31\u662f\u5de6\u8fb9\u90fd\u662f0\uff0c\u53f3\u8fb9\u90fd\u662f1\u8fd9\u4e24\u7ec4\uff0c\u4e14\u4ed6\u4eec\u5fc5\u987b\u4eca\u540e\u65f6\u523b\u4fdd\u6301\u7740\u8fd9\u6837\u7684\u5de6\u53f3\u987a\u5e8f)\uff0c\u5269\u4f59\u7ec4\u4e2d\u7684\u6240\u67091\u4e5f\u5e94\u88ab\u5206\u4e3a\u65b0\u7684\u4e00\u7ec4\uff0c\u6dfb\u52a0\u5728\u7b2c6\u7ec4\u7684\u53f3\u8fb9  \n##### 3\uff1a\u5982\u679c\u65b0\u589e\u52a0\u7684\u4e00\u884c\u4e2d1\u51fa\u73b0\u5728\u4e861\u548c\u5269\u4f59\u7ec4\uff1a  \n\u6211\u4eec\u5e94\u8be5\u628a1\u7ec4\u4e2d\u76841\u90fd\u653e\u5230\u6700\u5de6\u8fb9\uff0c\u8ba91\u7ec4\u5206\u88c2\u4e3a\u4e24\u7ec4\uff0c\u628a\u5269\u4f59\u7ec4\u4e2d\u7684\u6240\u67091\u62ff\u51fa\u6765\u653e\u5728\u7b2c1\u7ec4\u7684\u5de6\u8fb9\u6210\u4e3a\u65b0\u7684\u4e00\u7ec4 \n\n\n\n------------\n\n\u5177\u4f53\u5b9e\u73b0\u4e0a\u6211\u4eec\u53ef\u4ee5\u5148\u9009\u51fa\u4e00\u4e2a\u5305\u542b1\u6700\u591a\u7684\u884c\uff0c\u7136\u540e\u4e0d\u65ad\u7684\u627e\u6dfb\u52a0\u4e4b\u540e\u4f1a\u5f71\u54cd\u5f53\u524d\u5206\u7ec4\u7684\u4e00\u884c\uff0c\u628a\u5b83\u6dfb\u52a0\u8fdb\u53bb\uff0c\u76f4\u5230\u5269\u4e0b\u7684\u6240\u6709\u884c\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230\u73b0\u5728\u7684\u5206\u7ec4\uff0c\u90a3\u6211\u4eec\u5c31\u5728\u627e\u5230\u4e00\u4e2a\u5305\u542b1\u6700\u591a\u7684\u4e00\u884c\uff0c\u7ee7\u7eed\u91cd\u590d\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u76f4\u5230\u6240\u6709\u7684\u884c\u90fd\u88ab\u6211\u4eec\u8003\u8651\u4e86\u3002  \n\u5b9e\u73b0\u7684\u65f6\u5019\u8fd8\u6709\u5de8\u591a\u7684\u7ec6\u8282\u8981\u8003\u8651\n\n\n------------\n\n**\u8fd9\u6837\u8fd9\u5230\u9898\u5c31\u88ab\u6211\u4eec~~\u8f7b\u677e\u6109\u5feb~~\u7684\u89e3\u51b3\u4e86**\n# \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 512;\n\nstruct LR {\n\tint l , r;\n\tLR(int l = 0 , int r = 0) : l(l) , r(r) {}\n};\n\nint n , t1[N];\nchar m[N][N];\nint row[N] , col[N] , mark[N];\nint q[N] , cq;\n\nvoid gg()\n{\n\tprintf(\"NO\\n\");\n\texit(0);\n}\n\nvoid reverseC(int c1 , int c2)\n{\n\twhile(c1 < c2)\n\t\tswap(col[c1++] , col[--c2]);\n}\n\nLR getLR(int row , int c1 , int c2)\n{\n\tint lf = n , rf = 0;\n\tfor(int c = c1; c < c2; c++)\n\t\tif(m[row][col[c]] == '1')\n\t\t{\n\t\t\tlf = min(mark[col[c]] , lf);\n\t\t\trf = max(mark[col[c]] , rf);\n\t\t}\n\treturn LR(lf , rf);\n}\n\nint markRight(int c , int cright)\n{\n\tint cz = c;\n\twhile(cz < cright && mark[col[cz]] == mark[col[c]])\n\t\t++cz;\n\treturn cz;\n}\n\nint sortRow(int row , int c1 , int c2)\n{\n\tcq = 0;\n\tfor(int i = c1; i < c2; i++)\n\t\tif(m[row][col[i]] == '1')\n\t\t\tq[cq++] = col[i];\n\tint ret = cq;\n\tfor(int i = c1; i < c2; i++)\n\t\tif(m[row][col[i]] == '0')\n\t\t\tq[cq++] = col[i];\n\tfor(int i = c1; i < c2; i++)\n\t\tcol[i] = q[i - c1];\n\treturn c1 + ret;\n}\n\nvoid reMarks(int row , int c1 , int c2)\n{\n\tint cur = c1;\n\tq[col[c1]] = cur;\n\tfor(int c = c1 + 1; c < c2; c++)\n\t{\n\t\tif(mark[col[c]] == mark[col[c - 1]] && m[row][col[c]] == m[row][col[c - 1]])\n\t\t\tq[col[c]] = cur;\n\t\telse\n\t\t\tq[col[c]] = cur = c;\n\t}\n\tfor(int c = c1; c < c2; c++)\n\t\tmark[col[c]] = q[col[c]];\n}\n\nvoid solve(int r1 , int r2 , int c1 , int c2)\n{\n\tint sel = -1 , selt = -1;\n\tfor(int r = r1; r < r2; r++)\n\t\tif(t1[row[r]] > selt)\n\t\t\tselt = t1[row[sel = r]];\n\tswap(row[r1] , row[sel]);\n\tint mid = sortRow(row[r1] , c1 , c2);\n\treMarks(row[r1] , c1 , c2);\n\tfor(int cr = r1 + 1; cr < r2; cr++)\n\t{\n\t\tint selRow = -1 , minL = n + 1 , maxR = -1;\n\t\tfor(int r = cr; r < r2; r++)\n\t\t{\n\t\t\tLR lr = getLR(row[r] , c1 , c2);\n\t\t\tif(lr.l < minL || lr.l == minL && lr.r > maxR)\n\t\t\t\tselRow = r , minL = lr.l , maxR = lr.r;\n\t\t}\n\t\tif(minL == maxR)\n\t\t{\n\t\t\tint pp = cr;\n\t\t\tfor(int r = cr; r < r2; r++)\n\t\t\t{\n\t\t\t\tLR lr = getLR(row[r] , c1 , c2);\n\t\t\t\tif(lr.l == minL && lr.r == maxR)\n\t\t\t\t\tswap(row[r] , row[pp++]);\n\t\t\t}\n\t\t\tsolve(cr , pp , minL , markRight(minL , c2));\n\t\t\tcr = pp - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tswap(row[cr] , row[selRow]);\n\t\t\tint Row = row[cr];\n\t\t\tint cx = minL;\n\t\t\twhile(cx < c2)\n\t\t\t{\n\t\t\t\tint cy = markRight(cx , c2);\n\t\t\t\tsortRow(Row , cx , cy);\n\t\t\t\tcx = cy;\n\t\t\t}\n\t\t\tbool already = false;\n\t\t\tcx = c1;\n\t\t\twhile(cx < mid)\n\t\t\t{\n\t\t\t\tint cy = markRight(cx , c2);\n\t\t\t\tif(cy >= mid)\n\t\t\t\t\tbreak;\n\t\t\t\tif(m[Row][col[cx]] == '1' && m[Row][col[cy - 1]] == '0' && m[Row][col[cy]] == '1')\n\t\t\t\t{\n\t\t\t\t\tif(already)\n\t\t\t\t\t\tgg();\n\t\t\t\t\treverseC(cx , cy);\n\t\t\t\t\talready = 1;\n\t\t\t\t}\n\t\t\t\tcx = cy;\n\t\t\t}\n\t\t\treMarks(Row , c1 , c2);\n\t\t\tif(m[Row][col[mid]] == '1')\n\t\t\t{\n\t\t\t\tint nmid = markRight(mid , c2);\n\t\t\t\tif(m[Row][col[mid - 1]] == '0' && already == 0 && (m[Row][col[cx - 1]] == '0'))\n\t\t\t\t\treverseC(cx , mid);\n\t\t\t\tif(m[Row][col[mid - 1]] == '0')\n\t\t\t\t{\n\t\t\t\t\tcq = 0;\n\t\t\t\t\tfor(int i = mid; i < nmid; i++)\n\t\t\t\t\t\tq[cq++] = col[i];\n\t\t\t\t\tfor(int i = c1; i < mid; i++)\n\t\t\t\t\t\tq[cq++] = col[i];\n\t\t\t\t\tfor(int i = c1; i < nmid; i++)\n\t\t\t\t\t\tcol[i] = q[i - c1];\n\t\t\t\t}\n\t\t\t\tmid = nmid;\n\t\t\t\treMarks(Row , c1 , c2);\n\t\t\t}\n\t\t\tint cnt = (m[Row][col[c1]] - '0');\n\t\t\tfor(int c = c1 + 1; c < c2; c++)\n\t\t\t\tif(m[Row][col[c - 1]] == '0' && m[Row][col[c]] == '1')\n\t\t\t\t\tcnt++;\n\t\t\tif(cnt > 1)\n\t\t\t\tgg();\n\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d\" , &n);\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tscanf(\"%s\" , m[i]);\n\t\tfor(int j = 0; j < n; j++)\n\t\t\tt1[i] += m[i][j] - '0';\n\t\trow[i] = col[i] = i;\n\t}\n\tsolve(0 , n , 0 , n);\n\tprintf(\"YES\\n\");\n\tfor(int i = 0; i < n; i++ , printf(\"\\n\"))\n\t\tfor(int j = 0; j < n; j++)\n\t\t\tprintf(\"%c\" , m[i][col[j]]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1609905166,
        "uid": 111892,
        "name": "Cherished",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF243E \u3010Matrix\u3011"
    }
]