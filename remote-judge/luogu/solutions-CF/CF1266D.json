[
    {
        "content": "### \u9898\u610f\n\n\u524d\u9762\u90a3\u7bc7\u9898\u89e3\u8bf4\u8fd9\u4e2a\u4e1c\u897f\u5f88\u795e\u5947\uff0c\u4f46\u662f\u4e5f\u6ca1\u6709\u7ed9\u51fa\u89e3\u91ca\u6216\u8005\u8bc1\u660e\u3002\u5176\u5b9e\u5427\uff0c\u662f\u7ffb\u8bd1\u628a\u539f\u6765\u7b80\u5355\u7684\u4e1c\u897f\u590d\u6742\u4e86\u3002\n\n\u9898\u610f\u662f\u6709\u82e5\u5e72\u4e2a\u4e09\u5143\u7ec4\uff0c$(x,y,z)$ \u8868\u793a $x$ \u6b20 $y$ \u4e00\u5171 $z$ \u5757\u94b1\u3002\n\n\u7136\u540e\u8bd5\u91cd\u65b0\u6574\u7406\u8fd9\u4e9b\u6b20\u503a\u5173\u7cfb\u4f7f\u5f97\u91d1\u94b1\u4ea4\u6613\u91cf\u6700\u5c0f\u3002\n\n### Sol\n\n\uff08\u51b7\u77e5\u8bc6\uff0c\u5176\u5b9e alipay \u4e4b\u7c7b\u7684\u8f6f\u4ef6\u5c31\u662f\u5e72\u8fd9\u4e2a\u7684\uff09\u3002\n\n\u73b0\u5b9e\u4e2d\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u81ea\u5df1\u501f\u51fa\u53bb\u4e86\u591a\u5c11\u94b1\uff0c\u62ff\u56de\u6765\u4e86\u591a\u5c11\u94b1\uff0c\u81f3\u4e8e\u8fd9\u4e9b\u94b1\u662f\u8c01\u7ed9\u7684\uff0c\u5176\u5b9e\u5e76\u4e0d\u91cd\u8981\uff0c\u5728\u8fd9\u9053\u9898\u91cc\u9762\u4e5f\u4e00\u6837\u3002\n\n\u5177\u4f53\u5730\uff0c\u7ed9\u6bcf\u4e2a\u4eba\u4e00\u4e2a\u4f59\u989d $a$\uff0c\u8868\u793a**\u501f\u51fa\u53bb\u4e86\u591a\u5c11\u94b1**\uff0c\u4e5f\u5c31\u662f**\u6700\u7ec8\u5e94\u8be5\u5f97\u5230\u591a\u5c11\u94b1**\uff0c\u521d\u503c\u4e3a $0$\u3002\n\n\u5411\u522b\u4eba\u501f\u94b1\u5219\u4f59\u989d\u51cf\u53bb $z$\uff0c\u501f\u7ed9\u522b\u4eba\u524d\u5219\u4f59\u989d\u52a0\u4e0a $z$\u3002\n\n\u6700\u540e\uff0c\u5982\u679c\u4f59\u989d\u5927\u4e8e $0$ \u968f\u4fbf\u627e\u4e00\u4e2a\u4f59\u989d\u5c0f\u4e8e $0$ \u7684\u8981\u94b1\uff0c\u8fd9\u6837\u4e00\u5b9a\u662f\u4e0d\u52a3\u7684\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u6bcf\u4e2a\u501f\u7ed9\u522b\u4eba\u94b1\u7684\u4eba\u4e0d\u7ba1\u662f\u5206\u6210\u591a\u6b21\uff0c\u8fd8\u662f\u4e00\u6b21\u62ff\u5b8c\uff0c\u81f3\u5c11\u90fd\u4f1a\u5bf9\u4ea4\u6613\u91cf\u9020\u6210 $a$ \u7684\u8d21\u732e\u3002\u56e0\u6b64\u4e0d\u5b58\u5728\u66f4\u4f18\u7684\u89e3\u6cd5\u3002\n\n\u6b64\u5916\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e00\u5b9a\u662f\u5408\u6cd5\u7684\u3002\u4e00\u4e2a\u4eba\u501f\u51fa\u53bb\u4e86 $a$ \u5757\u94b1\uff0c\u62ff\u56de\u6765\u4e86 $a$ \u5757\u94b1\uff0c\u76f8\u5f53\u4e8e\u503a\u52a1\u6e05\u96f6\u3002\n\n### Code\n\n\u6bd4\u8f83\u7b80\u5355\uff0c\u653e\u4e2a\u94fe\u63a5\uff1a[Link](https://codeforc.es/contest/1266/submission/180273671)",
        "postTime": 1668066638,
        "uid": 217300,
        "name": "Error_Eric",
        "ccfLevel": 6,
        "title": "\u9898\u89e3  CF1266D Decreasing Debts"
    },
    {
        "content": "\u60f3\u4e86\u597d\u4e45\u5947\u602a\u7684\u4e1c\u897f\u2026\u2026\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a\u4eba\u7684\u51fa\u8fb9\u4e4b\u548c\u4ee5\u53ca\u5165\u8fb9\u4e4b\u548c\uff0c\u7136\u540e\u4efb\u610f\u5339\u914d\u5373\u53ef\u3002\n\n\u8bc1\u660e\uff1a\u9996\u5148\uff0c\u6bcf\u4e2a\u70b9\u51fa\u8fb9\u4e4b\u548c-\u5165\u8fb9\u4e4b\u548c\u662f\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7b54\u6848\u4e00\u5b9a\u662f\u6211\u4eec\u7684\u4e0b\u754c\u3002\u5176\u6b21\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u4ed6\u4e0d\u53ef\u80fd\u540c\u65f6\u5b58\u5728\u5165\u8fb9\u548c\u51fa\u8fb9\uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u6700\u540e\u7684\u5f62\u6001\u4e00\u5b9a\u662f\u8fde\u51fa\u53bb\u6216\u8005\u8fde\u8fdb\u6765\u603b\u548c\u4e3a$|in_i-out_i|$\u7684\u8fb9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u77e5\u9053\u6bcf\u4e2a\u70b9\u7684\u6700\u7ec8\u8fde\u8fb9\u91cf\uff0c\u8003\u8651\u600e\u4e48\u6784\u9020\u4e00\u5f20\u56fe\u53ef\u4ee5\u88ab\u9898\u76ee\u7684\u64cd\u4f5c\u65b9\u5f0f\u6784\u9020\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e24\u5f20\u90fd\u6ee1\u8db3\u4e0a\u4e00\u6bb5\u7684\u90a3\u4e2a\u6761\u4ef6\u7684\u56fe\uff0c\u4ed6\u4eec\u662f\u53ef\u4ee5\u4e92\u76f8\u8f6c\u5316\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4efb\u610f\u8fde\u4e00\u5f20\u7b26\u5408\u6761\u4ef6\u7684\u56fe\u5373\u53ef\u3002\n### $\\rm Code : $\n```cpp\n/* This code is written by Nemlit */\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define int long long\n#define re register\n#define rep(i, a, b) for(re int i = (a); i <= (b); ++ i)\nil int read() {\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define maxn 600005\nint n, m, in[maxn], u[maxn], v[maxn], w[maxn], a[maxn], out[maxn], b1, c1, b[maxn], c[maxn], cnt;\nil bool cmp(int x, int y) {\n\treturn a[x] > a[y];\n}\nsigned main() {\n\tn = read(), m = read();\n\trep(i, 1, m) {\n\t\tint u = read(), v = read(), w = read();\n\t\tin[v] += w, out[u] += w;\n\t}\n\trep(i, 1, n) a[i] = in[i] - out[i];\n\trep(i, 1, n) if(a[i] < 0) b[++ b1] = i;\n\trep(i, 1, n) if(a[i] > 0) c[++ c1] = i;\n\tsort(b + 1, b + b1 + 1, cmp), sort(c + 1, c + c1 + 1, cmp);\n\tint now = 1;\n\trep(i, 1, b1) {\n\t\twhile(now <= n && a[b[i]] < 0) {\n\t\t\tint t = min(-a[b[i]], a[c[now]]);\n\t\t\ta[b[i]] += t, a[c[now]] -= t;\n\t\t\tu[++ cnt] = b[i], v[cnt] = c[now], w[cnt] = t;\n\t\t\tif(a[c[now]] == 0) ++ now;\n\t\t}\n\t}\n\tcout << cnt << endl;\n\trep(i, 1, cnt) printf(\"%lld %lld %lld\\n\", u[i], v[i], w[i]);\n\treturn 0;\n}\n\n```",
        "postTime": 1603207015,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1266D \u3010Decreasing Debts\u3011"
    }
]