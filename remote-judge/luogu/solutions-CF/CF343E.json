[
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u5e26\u6743\u56fe\uff0c\u5b9a\u4e49\u4e00\u4e2a\u70b9\u7684\u6392\u5217 $P$ \u7684\u6536\u76ca\u4e3a $\\sum\\limits_{i=2}^{n}\\operatorname{mincut}(P_{i-1},P_i)$\uff0c\u6c42\u4e00\u4e2a\u6392\u5217\u4f7f\u5f97\u6536\u76ca\u6700\u5927\u3002\n\n$\\texttt{Data Range:}1\\leq n\\leq 200,1\\leq m\\leq 1000$\n\n### \u9898\u89e3\n\n\u6700\u5c0f\u5272\u6811\u597d\u9898\u3002\n\n\u9996\u5148\u5148\u6709\u4e00\u53e5~~\u5e9f\u8bdd~~\uff1a\u6700\u5c0f\u5272\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u8fb9\u6743\u6700\u5c0f\u503c\u4e3a\u539f\u56fe\u4e2d\u4e24\u70b9\u7684\u6700\u5c0f\u5272\u3002\n\n\u90a3\u4e48\u8003\u8651\u628a\u6700\u5c0f\u5272\u6811\u5efa\u51fa\u6765\uff0c\u62a0\u51fa\u6700\u5c0f\u7684\u90a3\u6761\u8fb9\uff0c\u5047\u8bbe\u8fb9\u6743\u4e3a $d$\uff0c\u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4ee5\u4e0b\u3002\n\n\u8fd9\u6761\u8fb9\u628a\u6811\u5206\u6210\u4e86\u4e24\u4e2a\u8fde\u901a\u5757 $P,Q$\uff0c\u5047\u8bbe $u,u_0\\in P,v,v_0\\in Q$\uff0c\u90a3\u4e48\u8003\u8651\u4e24\u79cd\u6392\u5217\u65b9\u5f0f\uff1a\uff08\u4ee5\u4e0b\u8bbe $\\operatorname{dist}(x,y)$ \u4e3a\u6700\u5c0f\u5272\u6811\u4e0a $x$ \u4e0e $y$ \u95f4\u7684\u6700\u77ed\u8fb9\u6743\uff09\n\n\u9996\u5148\u662f $u,u_0,v,v_0$\uff0c\u8fd9\u4e00\u6bb5\u7684\u8d21\u732e\u4e3a $\\operatorname{dist}(u,u_0)+\\operatorname{dist}(u_0,v)+\\operatorname{dist}(v,v_0)$\n\n\u7136\u540e\u662f $u,v,u_0,v_0$\uff0c\u4e3a $\\operatorname{dist}(u,v)+\\operatorname{dist}(v,u_0)+\\operatorname{dist}(u_0,v_0)$\n\n\u63a5\u4e0b\u6765\uff0c\u7531\u4e8e $d$ \u662f\u6700\u5c0f\u7684\u8fb9\u6743\uff0c\u6211\u4eec\u663e\u7136\u80fd\u770b\u51fa\n\n\n$$\\operatorname{dist}(x,y)(x\\in P,y\\in Q)=d$$\n\n\u548c\n\n$$\\operatorname{dist}(x,y)(x\\in P,y\\in P)\\geq d$$\n\n$$\\operatorname{dist}(x,y)(x\\in Q,y\\in Q)\\geq d$$\n\n\u6240\u4ee5\n\n$$\\operatorname{dist}(u,v)+\\operatorname{dist}(v,u_0)+\\operatorname{dist}(u_0,v_0)=3d$$\n\n$$\\operatorname{dist}(u,u_0)+\\operatorname{dist}(u_0,v)+\\operatorname{dist}(v,v_0)\\geq 3d$$\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8ba9\u5c3d\u91cf\u5c11\u7684\u70b9\u7ecf\u8fc7\u8fd9\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5148\u8d70\u5b8c $P$ \u540e\u8d70\u5b8c $Q$ \u7684\u7b54\u6848\u662f\u6700\u4f18\u7684\u3002\n\n\u4f46\u662f\u6ce8\u610f\u5230 $P$ \u548c $Q$ \u90fd\u662f\u6811\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u9012\u5f52\u4e0b\u53bb\uff0c\u5c31\u5b8c\u4e86\u3002\n\n\u7b54\u6848\u7684\u8bdd\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8fb9\u53ea\u4f1a\u8d70\u4e00\u6b21\uff0c\u6240\u4ee5\u8d21\u732e\u4e3a\u8be5\u8fb9\u7684\u8fb9\u6743\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef int ll;\nconst ll MAXN=251,MAXE=1e3+51,inf=0x7fffffff;\nstruct Edge{\n\tll to,prev,flow;\n};\nEdge ed[MAXE<<2];\nll nc,ec,source,sink,tot=1,from,to,flow,maxFlow,rres,p,q,id,wt,ptr;\nll last[MAXN],depth[MAXN],inQueue[MAXN],curr[MAXN],res[MAXN],vis[MAXN<<1];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline void addEdge(ll from,ll to,ll flow)\n{\n\ted[++tot].prev=last[from];\n\ted[tot].to=to;\n\ted[tot].flow=flow;\n\tlast[from]=tot; \n}\ninline ll Min(ll x,ll y)\n{\n\treturn x<y?x:y;\n}\ninline bool bfs()\n{\n\tqueue<ll>q;\n\tll top,to;\n\tmemset(depth,0x3f,sizeof(depth));\n\tfor(register int i=1;i<=nc;i++)\n\t{\n\t\tcurr[i]=last[i];\n\t}\n\tdepth[source]=0,q.push(source);\n\twhile(!q.empty())\n\t{\n\t\ttop=q.front();\n\t\tq.pop(),inQueue[top]=0;\n\t\tfor(register int i=last[top];i;i=ed[i].prev)\n\t\t{\n\t\t\tto=ed[i].to;\n\t\t\tif(depth[to]>depth[top]+1&&ed[i].flow)\n\t\t\t{\n\t\t\t\tdepth[to]=depth[top]+1;\n\t\t\t\tif(!inQueue[to])\n\t\t\t\t{\n\t\t\t\t\tq.push(to),inQueue[to]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(depth[sink]!=0x3f3f3f3f)\n\t{\n\t\treturn 1;\t\n\t} \n\treturn 0;\n}\ninline ll dfs(ll cur,ll flow)\n{\n\tll curFlow=0,low;\n\tif(cur==sink)\n\t{\n\t\treturn flow;\n\t}\n\tfor(register int i=curr[cur];i;i=ed[i].prev)\n\t{\n\t\tcurr[cur]=i;\n\t\tif(ed[i].flow&&depth[ed[i].to]==depth[cur]+1)\n\t\t{\n\t\t\tlow=dfs(ed[i].to,Min(flow-curFlow,ed[i].flow));\n\t\t\ted[i].flow-=low,ed[i^1].flow+=low,curFlow+=low;\n\t\t\tif(!low)\n\t\t\t{\n\t\t\t\tdepth[ed[i].to]=0;\n\t\t\t}\n\t\t\tif(curFlow==flow)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn curFlow;\n}\ninline ll Dinic()\n{\n\tll flow;\n\twhile(bfs())\n\t{\n\t\twhile(flow=dfs(source,inf))\n\t\t{\n\t\t\tmaxFlow+=flow;\n\t\t}\n\t}\n\treturn maxFlow;\n}\ninline void clearFlow()\n{\n\tmaxFlow=0;\n\tfor(register int i=2;i<=tot;i+=2)\n\t{\n\t\ted[i].flow+=ed[i^1].flow,ed[i^1].flow=0;\n\t}\n}\nnamespace GomoryHuTree{\n\tstruct Edge{\n\t\tll to,prev,dist;\n\t};\n\tEdge ed[MAXN<<1];\n\tll tot;\n\tll last[MAXN],nd[MAXN],tmp[MAXN],tmp2[MAXN];\n\tinline void addEdge(ll from,ll to,ll dist)\n\t{\n\t\ted[++tot].prev=last[from];\n\t\ted[tot].to=to;\n\t\ted[tot].dist=dist;\n\t\tlast[from]=tot; \n\t}\n\tinline void setup()\n\t{\n\t\tfor(register int i=1;i<=nc;i++)\n\t\t{\n\t\t\tnd[i]=i;\n\t\t}\n\t}\n\tinline void create(ll l,ll r)\n\t{\n\t\tll cut,cnt,ccnt;\n\t\tif(l==r)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tsource=nd[l],sink=nd[l+1],cut=Dinic(),clearFlow();\n\t\taddEdge(source,sink,cut),addEdge(sink,source,cut),cnt=ccnt=0;\n\t\tfor(register int i=l;i<=r;i++)\n\t\t{\n\t\t\t::depth[nd[i]]!=0x3f3f3f3f?tmp[++cnt]=nd[i]:tmp2[++ccnt]=nd[i];\n\t\t}\n\t\tfor(register int i=l;i<l+cnt;i++)\n\t\t{\n\t\t\tnd[i]=tmp[i-l+1];\n\t\t}\n\t\tfor(register int i=l+cnt;i<=r;i++)\n\t\t{\n\t\t\tnd[i]=tmp2[i-cnt-l+1];\n\t\t}\n\t\tcreate(l,l+cnt-1),create(l+cnt,r);\n\t}\n\tinline ll dfs(ll node,ll fa)\n\t{\n\t\tll son=0;\n\t\tfor(register int i=last[node];i;i=ed[i].prev)\n\t\t{\n\t\t\tif(ed[i].to!=fa&&!vis[i])\n\t\t\t{\n                if(ed[i].dist<wt)\n\t\t\t\t{\n\t\t\t\t\tp=node,q=ed[i].to,id=i,wt=ed[i].dist;\n\t\t\t\t}\n\t\t\t\tdfs(ed[i].to,node),son=1;\n\t\t\t}\n\t\t}\n\t\treturn son;\n\t}\n}\nusing GomoryHuTree::setup;\nusing GomoryHuTree::create;\ninline void ddfs(ll node)\n{\n\tll x,y;\n\twt=0x3f3f3f3f;\n\tif(!GomoryHuTree::dfs(node,0))\n\t{\n\t\tres[++ptr]=node;\n\t\treturn;\n\t}\n\tvis[id]=vis[((id-1)^1)+1]=1,rres+=wt,x=p,y=q;\n\tddfs(x),ddfs(y);\n}\nint main()\n{\n\tnc=read(),ec=read(),setup();\n\tfor(register int i=0;i<ec;i++)\n\t{\n\t\tfrom=read(),to=read(),flow=read();\n\t\taddEdge(from,to,flow),addEdge(to,from,0);\n\t\taddEdge(to,from,flow),addEdge(from,to,0);\n\t}\n\tcreate(1,nc),ddfs(1),printf(\"%d\\n\",rres);\n\tfor(register int i=1;i<=ptr;i++)\n\t{\n\t\tprintf(\"%d \",res[i]);\n\t}\n}\n```",
        "postTime": 1578879595,
        "uid": 60990,
        "name": "Karry5307",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF343E \u3010Pumping Stations\u3011"
    },
    {
        "content": "> C. [CF343E Pumping Stations](https://www.luogu.com.cn/problem/CF343E) *2900\n\n\u6ce8\u610f\u5230\u95ee\u9898\u4e0e\u4efb\u610f\u4e24\u70b9\u5728\u539f\u56fe\u4e0a\u7684\u6700\u5c0f\u5272\u76f8\u5173\uff0c\u6240\u4ee5\u5efa\u51fa\u6700\u5c0f\u5272\u6811\u3002\n\n\u8bb0 $d(i, j)$ \u8868\u793a\u8282\u70b9 $i, j$ \u5728\u6700\u5c0f\u5272\u6811\u4e0a\u7684\u7b80\u5355\u8def\u5f84\u7ecf\u8fc7\u7684\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u7684\u6700\u5c0f\u503c\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u4e00\u4e2a $n$ \u9636\u6392\u5217 $p_1, p_2, \\cdots, p_n$\uff0c\u6700\u5927\u5316 $f(p) = \\sum\\limits_{i = 1} ^ {n - 1} d(p_i, p_{i - 1})$\u200b\u3002\n\n\u8fd9\u770b\u4e0a\u53bb\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u95ee\u9898\u3002\u5b9e\u9645\u4e0a\u786e\u5b9e\u5f88\u7ecf\u5178\u3002\n\n\u7531\u4e8e $d(i, j)$\u200b \u662f\u8fb9\u6743\u6700\u5c0f\u503c\u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u731c\u6d4b\u7b54\u6848\u4e0a\u754c\u5c31\u662f\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u548c\u3002\u8003\u8651\u6784\u9020\u3002\n\n\u627e\u5230\u6574\u68f5\u6811\u4e0a\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9 $(u, v)$\uff0c\u8bbe\u5b83\u628a\u6811\u5206\u6210 $S, T$ \u4e24\u4e2a\u70b9\u96c6\u3002\n\n\u8003\u8651\u6700\u7ec8\u7684\u6392\u5217\u3002\u5982\u679c $u\\to v$ \u8fd9\u6761\u8fb9\u88ab\u7ecf\u8fc7\u8d85\u8fc7\u4e00\u6b21\uff0c\u901a\u8fc7\u8c03\u6574\u6cd5\u5bb9\u6613\u8bc1\u660e\u4e0d\u4f18\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u65ad\u8a00\u5fc5\u7136\u5b58\u5728\u6700\u4f18\u6392\u5217\u4f7f\u5f97 $u\\to v$ \u53ea\u88ab\u7ecf\u8fc7\u4e00\u6b21\uff0c\u5373\u5fc5\u7136\u662f\u5148\u5b8c\u6574\u5730\u8d70\u5b8c $S$\uff0c\u518d\u4ece $S$ \u4e2d\u7684\u67d0\u4e2a\u70b9\u4ee5 $w(u\\to v)$ \u7684\u8d21\u732e\u8d70\u5230 $T$ \u4e2d\u7684\u67d0\u4e2a\u70b9\uff0c\u518d\u5b8c\u6574\u5730\u8d70\u5b8c $T$\u3002\n\n\u5206\u4e24\u6b65\u8bc1\u660e\u4e0a\u8ff0\u7ed3\u8bba\u3002\n\n- $u\\to v$ \u4e0d\u53ef\u80fd\u88ab\u7ecf\u8fc7\u8d85\u8fc7\u4e24\u6b21\u3002\u8003\u8651 $a, b\\in S$ \u4e14 $c, d\\in T$\uff0c\u56e0\u4e3a $(u, v)$ \u662f\u6743\u503c\u6700\u5c0f\u8fb9\uff0c\u6240\u4ee5 $d(a, b) + d(b, c) + d(c, d) \\geq d(a, c) + d(c, b) + d(b, d)$\u3002\n- $u\\to v$ \u4e0d\u53ef\u80fd\u88ab\u7ecf\u8fc7\u6070\u597d\u4e24\u6b21\u3002\u5426\u5219\uff0c\u4e0d\u59a8\u8bbe $a, b\\in S$ \u4e14 $c, d\\in T$\uff0c\u6211\u4eec\u4ece $a$ \u8d70\u5230 $c$\uff0c\u8d70\u904d\u6574\u4e2a $T$\uff0c\u518d\u4ece $d$ \u8d70\u5230 $b$ \u56de\u5230 $S$\uff08\u6240\u4ee5 $p_1, p_n\\in S$\uff09\u3002\u8003\u8651\u8c03\u6574\u4e3a\u65b0\u7684\u8def\u5f84 $p_1 \\to \\cdots \\to a \\to b \\to \\cdots \\to p_n \\to c\\to \\cdots \\to d$\u3002\u7531\u4e8e $d(p_n, c) = w(u\\to v) = d(d, b)$ \u4e14 $d(a, b) \\geq w(u\\to v) = d(a, c)$\uff08$(u, v)$ \u662f\u6743\u503c\u6700\u5c0f\u8fb9\uff09\uff0c\u6240\u4ee5 $d(a, b) + d(p_n, c) \\geq d(a, c) + d(d, b)$\u3002\n\n\u8de8\u8fc7 $u, v$ \u7684\u8fd9\u6b21\u79fb\u52a8 $p_i\\to p_{i + 1}$ \u6700\u5c0f\u503c\u5df2\u7ecf\u662f $w(u\\to v)$ \u4e86\uff0c\u6240\u4ee5\u65e0\u8bba $p_i$ \u662f $S$ \u5185\u90e8\u7684\u54ea\u4e2a\u70b9\uff0c$p_{i + 1}$ \u662f $T$ \u5185\u90e8\u7684\u54ea\u4e2a\u70b9\uff0c\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230 $d(p_i, p_{i + 1})$\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c06\u95ee\u9898\u5212\u5206\u6210\u4e86\u5728 $S$ \u548c $T$ \u5185\u90e8\u7684\u5b50\u95ee\u9898\uff08\u95ee\u9898\u5f62\u5982 \u201c\u5bf9\u4e8e\u4e00\u68f5\u6811 $T$ \u6c42\u51fa $|T|$ \u9636\u6392\u5217 $p$ \u6700\u5927\u5316 $\\sum\\limits_{i = 1} ^ {|T| - 1} d(p_i, p_{i + 1})$\uff09\u3002\u9012\u5f52\u8fb9\u754c\u5373\u70b9\u96c6\u5185\u90e8\u53ea\u5269\u4e0b\u4e00\u4e2a\u70b9\uff0c\u6b64\u65f6\u76f4\u63a5\u8f93\u51fa\u5b83\u7684\u7f16\u53f7\u5373\u53ef\u3002\n\n\u901a\u8fc7\u4e0a\u8ff0\u6784\u9020\u8fc7\u7a0b\uff0c\u6211\u4eec\u4e5f\u8bc1\u660e\u4e86\u7b54\u6848\u4e0a\u754c\u6070\u4e3a\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u548c\u3002\u56e0\u4e3a\u6211\u4eec\u6784\u9020\u51fa\u6765\u7684\u65b9\u6848\u662f\u6700\u4f18\u89e3\uff0c\u800c\u65b9\u6848\u4e2d\u6bcf\u6761\u8fb9\u6070\u597d\u8d21\u732e\u4e00\u6b21\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6784\u5efa\u6700\u5c0f\u5272\u6811\u7684\u590d\u6742\u5ea6\uff0c\u52a0\u4e0a\u6784\u9020\u7684\u590d\u6742\u5ea6 $\\mathcal{O}(n ^ 2)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 200 + 5;\nconst int M = 1e3 + 5;\nstruct Graph {\n\tint cnt = 1, hd[N], nxt[M << 1], to[M << 1], lim[M << 1];\n\tvoid add(int u, int v, int w) {\n\t\tnxt[++cnt] = hd[u], hd[u] = cnt, to[cnt] = v, lim[cnt] = w;\n\t\tnxt[++cnt] = hd[v], hd[v] = cnt, to[cnt] = u, lim[cnt] = w;\n\t}\n\tint T, cur[N], dis[N];\n\tint dfs(int id, int res) {\n\t\tif(id == T) return res;\n\t\tint flow = 0;\n\t\tfor(int i = cur[id]; i && res; i = nxt[i]) {\n\t\t\tint it = to[i], c = min(res, lim[i]);\n\t\t\tcur[id] = i;\n\t\t\tif(c && dis[id] + 1 == dis[it]) {\n\t\t\t\tint k = dfs(it, c);\n\t\t\t\tres -= k, flow += k, lim[i] -= k, lim[i ^ 1] += k;\n\t\t\t}\n\t\t}\n\t\tif(!flow) dis[id] = -1;\n\t\treturn flow;\n\t}\n\tint maxflow(int s, int t) {\n\t\tT = t;\n\t\tint flow = 0;\n\t\twhile(1) {\n\t\t\tqueue <int> q;\n\t\t\tmemset(dis, -1, sizeof(dis));\n\t\t\tmemcpy(cur, hd, sizeof(cur));\n\t\t\tdis[s] = 0, q.push(s);\n\t\t\twhile(!q.empty()) {\n\t\t\t\tint t = q.front();\n\t\t\t\tq.pop();\n\t\t\t\tfor(int i = hd[t]; i; i = nxt[i])\n\t\t\t\t\tif(dis[to[i]] == -1 && lim[i])\n\t\t\t\t\t\tdis[to[i]] = dis[t] + 1, q.push(to[i]);\n\t\t\t}\n\t\t\tif(dis[t] == -1) return flow;\n\t\t\tflow += dfs(s, 1e5);\n\t\t}\n\t}\n} I, G;\nint n, m, tot;\nvector <pair <int, int>> e[N];\nvoid build(vector <int> node) {\n\tif(node.size() == 1) return;\n\tint u = node[0], v = node[1], w;\n\tG = I, tot += w = G.maxflow(u, v);\n\te[u].push_back(make_pair(v, w));\n\te[v].push_back(make_pair(u, w));\n\tvector <int> x, y;\n\tfor(int it : node)\n\t\tif(G.dis[it] == -1) y.push_back(it);\n\t\telse x.push_back(it);\n\tbuild(x), build(y);\n}\n\nbool tag[N];\nint minv, u, v;\nvoid findmin(int id, int fa) {\n\tfor(auto it : e[id]) {\n\t\tif(!tag[it.first]) continue;\n\t\tif(it.second < minv) minv = it.second, u = id, v = it.first;\n\t\tif(it.first != fa) findmin(it.first, id);\n\t}\n}\nvoid dfs(int id, int fa, vector <int> &node) {\n\tnode.push_back(id);\n\tfor(auto it : e[id]) if(it.first != fa && tag[it.first]) dfs(it.first, id, node);\n}\nvoid solve(vector <int> node) {\n\tif(node.size() == 1) return cout << node[0] << \" \", void();\n\tmemset(tag, 0, sizeof(tag));\n\tfor(int it : node) tag[it] = 1;\n\tminv = 1e9, findmin(node[0], 0);\n\tvector <int> x, y;\n\tdfs(u, v, x), dfs(v, u, y), solve(x), solve(y);\n}\nint main() {\n\t// freopen(\"1.in\", \"r\", stdin);\n\tcin >> n >> m;\n\tfor(int i = 1, u, v, w; i <= m; i++) cin >> u >> v >> w, I.add(u, v, w);\n\tvector <int> U;\n\tfor(int i = 1; i <= n; i++) U.push_back(i);\n\tbuild(U), cout << tot << endl, solve(U);\n\treturn 0;\n}\n\n/*\n2022/5/1\nstart thinking at 13:19\n\n\u6700\u5c0f\u5272\u6811\u677f\u5b50\u9898?\n\u6784\u9020\u65b9\u6848\u6709\u70b9\u70b9\u9ebb\u70e6.\n\nstart coding at 13:20\nfinish debugging at 13:50\n*/\n```",
        "postTime": 1651639210,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF343E Pumping Stations"
    },
    {
        "content": "$\\Large\\natural$ **CF343E Pumping Stations / [\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/CF343E) / [\u66f4\u597d\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/BlankAo/p/14227151.html)** \n\n## \u89e3\u6cd5\n\n\u524d\u7f6e\u77e5\u8bc6\u70b9\uff1a\u6700\u5c0f\u5272\u6811\u3002\u5982\u679c\u6ca1\u6709\u5b66\u8fc7\uff0c\u53ef\u4ee5\u53bb\u770b\u770b\u6a21\u677f\u9898\u3002\n\n\u9996\u5148\u6c42\u51fa\u6700\u5c0f\u5272\u6811\u3002\u7136\u540e\uff0c\u6211\u4eec\u8bbe $c_{i,j}$ \u4ee3\u8868\u70b9 $i$ \u5230\u70b9 $j$ \u7684\u6700\u5c0f\u5272\u3002\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\uff1a\n\n\u4f60\u6709\u4e00\u4e2a\u5b8c\u5168\u56fe\uff0c\u70b9 $i$ \u5230\u70b9 $j$ \u8fb9\u6743\u4e3a $c_{i,j}$\uff0c\u4e14\u8fb9\u6743\u662f\u6b63\u6570\u3002$c_{i,j}=c_{j,i}$ \uff08\u6240\u4ee5\u662f\u65e0\u5411\u5b8c\u5168\u56fe\uff09\u3002\u73b0\u5728\u4f60\u8981\u627e\u5230\u4e00\u6761\u8def\u5f84\uff08\u8d77\u70b9\u3001\u7ec8\u70b9\u4e0d\u9650\uff09\uff0c\u4f7f\u5f97\u6240\u6709\u70b9\u90fd\u521a\u597d\u7ecf\u8fc7\u4e00\u6b21\u3002\u8981\u627e\u51fa\u603b\u8fb9\u6743\u6700\u5927\u7684\u8fd9\u6761\u8def\u5f84\u3002\n\n\u8fd9\u4e2a\u4e8b\u5b9e\u4e0a\u662f\u53ef\u4ee5\u7528\u8d2a\u5fc3\u53bb\u505a\u7684\u3002\u5f53\u5230\u8fbe\u4e00\u4e2a\u70b9\u65f6\uff0c\u5728\u6240\u6709**\u300c\u7ec8\u70b9\u7684\u70b9\u6ca1\u6709\u8d70\u8fc7\u300d**\u7684\u8fb9\u4e2d\uff0c\u627e\u5230\u6743\u503c\u6700\u5927\u7684\u90a3\u4e00\u6761\uff0c\u7136\u540e\u8d70\u3002\n\n\u7136\u540e\u679a\u4e3e\u4e00\u4e0b\u8d77\u70b9\uff0c\u6bcf\u4e2a\u90fd\u6309\u7167\u4e0a\u8ff0\u8d2a\u5fc3\u8d70\u4e00\u904d\uff0c\u627e\u5230\u603b\u8fb9\u6743\u6700\u5927\u7684\u90a3\u6761\u8def\u5f84\u5c31\u597d\u4e86\u3002\n\n\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\u5e94\u8be5\u7531\u5b8c\u5168\u56fe\u7684\u6027\u8d28\u53ef\u5f97\u3002\n\n## \u4ee3\u7801\n\n\u89e3\u6cd5\u4e2d\u7684\u5b8c\u5168\u56fe\u4e0d\u7528\u771f\u7684\u5efa\u51fa\u6765\uff0c\u5faa\u73af\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7801\u98ce\u6bd2\u7624\u89c1\u8c05\u3002\n\n```c++\n#include<bits/stdc++.h>\n#define rep(i,x,y) for(int i=x;i<=y;++i)\n#define per(i,x,y) for(int i=x;i>=y;--i)\n#define mar(o,fst,e) for(int E=fst[o];E;E=e[E].nxt)\n#define v e[E].to\n#define vz ez[E].to\nusing namespace std;\nconst int n7=206,m7=2012,inf=INT_MAX-100;\nstruct dino{int to,nxt,w,w0;}e[m7],ez[m7];\nint n,m,T,fst[n7],fstd[n7],ecnt0,ecnt=1,dep[n7],que[n7],ds,dt,ans;\nint fstz[n7],dept[n7],fc[n7][13],mni[n7][13],dot[n7],dotz[n7];\nint mc[n7][n7],ansx,ansn;bool u[n7];\n\nint rd(){\n\tint shu=0;char ch=getchar();\n\twhile(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch))shu=(shu<<1)+(shu<<3)+ch-'0',ch=getchar();\n\treturn shu;\n}\n\nvoid Dedge(int sta,int edn,int w,dino *eh,int *fsth){\n\tecnt++;\n\teh[ecnt]=(dino){edn,fsth[sta],w,w};\n\tfsth[sta]=ecnt;\n}\n\nvoid edge(int sta,int edn,int w,dino *eh,int *fsth){\n\tDedge(sta,edn,w,eh,fsth),Dedge(edn,sta,w,eh,fsth);\n}\n\nbool bfs(){\n\tmemset(dep,0,sizeof dep);\n\tint head=1,tail=1;que[1]=ds;\n\tdep[ds]=1,fstd[ds]=fst[ds];\n\twhile(head<=tail){\n\t\tint o=que[head];\n\t\tmar(o,fst,e){\n\t\t\tif(dep[v]||e[E].w==0)continue;\n\t\t\tdep[v]=dep[o]+1,fstd[v]=fst[v];\n\t\t\tif(v==dt)return 1;\n\t\t\ttail++,que[tail]=v;\n\t\t}\n\t\thead++;\n\t}\n\treturn 0;\n}\n\nint dfs(int o,int val){\n\tif(o==dt)return val;\n\tint tot=val;\n\tmar(o,fstd,e){\n\t\tfstd[o]=E;\n\t\tif(!tot){dep[o]=inf;break;}\n\t\tif(dep[v]!=dep[o]+1||e[E].w==0)continue;\n\t\tint out=dfs(v,min(tot,e[E].w));\n\t\te[E].w-=out,e[E^1].w+=out;\n\t\ttot-=out;\n\t}\n\treturn val-tot;\n}\n\nint dinic(int p,int q){\n\tds=p,dt=q;\n\trep(E,2,ecnt0)e[E].w=e[E].w0;\n\tint tot=0;\n\twhile(bfs())tot+=dfs(ds,inf);\n\treturn tot;\n}\n\nvoid plant(int l,int r){\n\tif(l==r)return;\n\tedge(dot[l],dot[r],dinic(dot[l],dot[r]),ez,fstz);\n\tint zuo=l-1,you=r+1;\n\trep(i,l,r){\n\t\tif(dep[ dot[i] ])zuo++,dotz[zuo]=dot[i];\n\t\telse you--,dotz[you]=dot[i];\n\t}\n\trep(i,l,r)dot[i]=dotz[i];\n\tplant(l,zuo),plant(you,r);\n}\n\nvoid dfst(int o){\n\trep(i,1,11)fc[o][i]=fc[ fc[o][i-1] ][i-1];\n\trep(i,1,11)mni[o][i]=min(mni[o][i-1],mni[ fc[o][i-1] ][i-1]);\n\tmar(o,fstz,ez){\n\t\tif(dept[vz])continue;\n\t\tdept[vz]=dept[o]+1;\n\t\tfc[vz][0]=o,mni[vz][0]=ez[E].w;\n\t\tdfst(vz);\n\t}\n}\n\nint Dlca(int p,int q){\n\tif(dept[p]<dept[q])p^=q^=p^=q;\n\tint fin=inf;\n\tper(i,11,0){\n\t\tif(dept[ fc[p][i] ]<dept[q])continue;\n\t\tfin=min(fin,mni[p][i]);\n\t\tp=fc[p][i];\n\t}\n\tif(p==q)return fin;\n\tper(i,11,0){\n\t\tif(fc[p][i]==fc[q][i])continue;\n\t\tfin=min(fin,min(mni[p][i],mni[q][i]));\n\t\tp=fc[p][i],q=fc[q][i];\n\t}\n\tfin=min(fin,min(mni[p][0],mni[q][0]));\n\treturn fin;\n}\n\nint solve(int o,bool sys){\n\tmemset(u,0,sizeof u);\n\tint tot=0;u[o]=1;\n\tif(sys)printf(\"%d \",o);\n\trep(i,1,n-1){//\u6709n\u4e2a\u70b9\uff0c\u8d77\u70b9\u5df2\u7ecf\u786e\u5b9a\uff0c\u8fd8\u6709n-1\u4e2a\u70b9\u8981\u8d70\n\t\tint maxx=0,maxn;\n\t\trep(j,1,n){\n\t\t\tif(u[j])continue;//\u7ec8\u70b9\u8d70\u8fc7\u4e86\u7684\u8fb9\u5c31\u8df3\u8fc7\n\t\t\tif(mc[o][j]>maxx)maxx=mc[o][j],maxn=j;//\u627e\u5230\u8fb9\u6743\u6700\u5927\u7684\n\t\t}\n\t\ttot+=maxx,o=maxn,u[maxn]=1;//\u66ff\u6362\u5f53\u524d\u70b9\n\t\tif(sys)printf(\"%d \",o);\n\t}\n\treturn tot;\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,n)dot[i]=i;\n\trep(i,1,m){\n\t\tint sta=rd(),edn=rd(),w=rd();\n\t\tedge(sta,edn,w,e,fst);\n\t}\n\tecnt0=ecnt,ecnt=0;\n\tplant(1,n);\n\tdept[1]=1,dfst(1);\n    //\u524d\u9762\u90fd\u662f\u6700\u5c0f\u5272\u6811\u7684\u677f\u5b50\n\trep(i,1,n)rep(j,i+1,n){\n\t\tmc[i][j]=mc[j][i]=Dlca(i,j);\n\t} \n    //mc[i][j]\u5c31\u662f\u70b9i,j\u7684\u6700\u5c0f\u5272\n\trep(i,1,n){//\u679a\u4e3e\u8d77\u70b9\n\t\tint now=solve(i,0);\n\t\tif(now>ansx)ansx=now,ansn=i;//\u5982\u679c\u66f4\u4f18\uff0c\u5c31\u9009\u5b83\n\t}\n    //\u8f93\u51fa\n\tprintf(\"%d\\n\",ansx);\n\tsolve(ansn,1);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1609682995,
        "uid": 99623,
        "name": "BlankAo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF343E \u3010Pumping Stations\u3011"
    },
    {
        "content": "[$\\tt Link$](/problem/CF343E)\u3002\n\n\u5957\u8def\u5730\uff0c\u5efa\u51fa\u6700\u5c0f\u5272\u6811\uff0c\u7136\u540e\u4e0b\u9762\u662f\u7ed3\u8bba\u548c\u611f\u6027\u8bc1\u660e\u3002\n\n\u7ed3\u8bba\uff1a\u7b2c\u4e00\u95ee\u7684\u7b54\u6848\u662f\u6700\u5c0f\u5272\u6811\u8fb9\u6743\u4e4b\u548c\u3002  \n\u8bc1\u660e\uff1a\n\n> \u6211\u4eec\u77e5\u9053\u539f\u56fe\u4efb\u610f\u4e24\u70b9\u6700\u5c0f\u5272\uff0c\u662f\u539f\u56fe\u6700\u5c0f\u5272\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u6700\u77ed\u8fb9\u6743\u3002  \n> \u4e8e\u662f\u5bf9\u4e8e\u4e00\u70b9\uff0c\u4e0e\u5b83\u4e4b\u95f4\u70b9\u6570\u8d8a\u591a\u7684\u70b9\uff0c\u6700\u540e\u7684\u6700\u5c0f\u5272\u5c31\u66f4\u5c0f\u3002  \n> \u6240\u4ee5\u6211\u4eec\u5c3d\u91cf\u8ba9\u539f\u6811\u4e2d\u76f8\u90bb\u7684\u70b9\u5728\u6392\u5217\u91cc\u4e5f\u76f8\u90bb\u3002  \n> \u4f46\u662f\u5982\u679c\u4e00\u4e2a\u70b9\u6709\u591a\u4e8e\u4e24\u4e2a\u5206\u53c9\uff0c\u90a3\u4e48\u5c31\u505a\u4e0d\u5230\u5168\u90e8\u76f8\u90bb\u3002  \n> \u8fd9\u65f6\u8d2a\u5fc3\u8003\u8651\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5148\u8d70\u5927\u513f\u5b50\u518d\u8d70\u5c0f\u513f\u5b50\u3002  \n> \u56e0\u4e3a\u6700\u5c0f\u5272\u6811\u4e0a\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u6240\u4ee5\u8d70\u5148\u8d70\u5927\u518d\u8d70\u5c0f\u4e00\u5b9a\u4e0d\u4f1a\u66f4\u52a3\u3002  \n> \u800c\u6b64\u65f6\u7684\u7b54\u6848\u5c31\u662f\u6700\u5c0f\u5272\u6811\u8fb9\u6743\u4e4b\u548c\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\u7684\u8def\u5f84\uff0c\u8003\u8651\u5982\u4e0b\u6784\u9020\uff1a\n\n+ \u4ece\u6700\u5c0f\u5272\u6811\u4e2d\u9009\u4e00\u70b9\uff0c\u5f00\u59cb\u4f18\u5148\u961f\u5217 $\\tt bfs$\u3002\u4ee5\u4e0b\u8bb0\u4e00\u4e2a\u70b9\u5728 $\\tt bfs$ \u4e2d\u7684\u7236\u4eb2\u4e3a $fa_i$\u3002\n+ \u6bcf\u6b21\u4ece\u961f\u5217\u91cc\u53d6\u51fa $w(i,fa_i)$ \u6700\u5927\u7684 $i$\uff0c\u8f93\u51fa $i$\uff0c\u7136\u540e\u5c06\u5176\u513f\u5b50\u653e\u8fdb\u961f\u5217\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u9009\u6cd5\u6700\u4f18\u5462\uff1f\n\n> \u56e0\u4e3a\u4f18\u5148\u961f\u5217\u6bcf\u65f6\u6bcf\u523b\u53d6\u51fa\u7684\u90fd\u662f\u6211\u4eec\u8ba4\u4e3a\u6700\u957f\u7684\u8fb9\uff0c\u6240\u4ee5\u6700\u540e\u6784\u9020\u51fa\u6765\u7684\u6392\u5217\uff0c\u53ea\u4f1a\u6709\u957f\u8fb9\u5230\u77ed\u8fb9\u7684\u60c5\u51b5\uff0c\u7b54\u6848\u4e00\u5b9a\u5df2\u7ecf\u6700\u4f18\u3002\n\n\u4ee3\u7801\u5f88\u4e11\uff0c\u5c06\u5c31\u770b\u770b\u5427\u3002\n\n```cpp\nconst int N = 850 + 5;\nconst int inf = 1e7;\n\nint n,m,st,ed;\nlong long qwq = 0;\n\nvector<pair<int,int> > G[N];\n\nstruct edge{ int v,w; bool f; edge *nxt,*inv; };\nedge* from[N];\n\nedge* add(rint u,rint v,rint w,bool f){\n\treturn from[u] = new(edge){v,w,f,from[u],NULL};\n}\n\ninline void adde(rint u,rint v,rint w){\n\tedge *e1 = add(u,v,w,1),*e2 = add(v,u,0,0);\n\te1 -> inv = e2; e2 -> inv = e1;\n}\n\nnamespace dinic{\n\tqueue<int> q;\n\tint dep[N]; edge* now[N];\n\t\n\tinline bool level(){\n\t\tmemset(dep,0,sizeof dep);\n\t\tmemcpy(now,from,sizeof now);\n\t\tdep[st] = 1; q.push(st);\n\t\twhile(!q.empty()){\n\t\t\trint u = q.front(); q.pop();\n\t\t\tfor(edge *e = from[u];e;e = e -> nxt){\n\t\t\t\tint w = e -> w,v = e -> v;\n\t\t\t\tif(w && !dep[v]){\n\t\t\t\t\tdep[v] = dep[u] + 1;\n\t\t\t\t\tif(v == ed){\n\t\t\t\t\t\twhile(q.size()) q.pop();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dep[ed];\n\t}\n\t\n\tinline int dfs(rint u,rint flow){\n\t\tif(u == ed) return flow;\n\t\trint cost = flow;\n\t\tfor(edge *e = now[u];e && cost;e = e -> nxt){\n\t\t\tnow[u] = e;\n\t\t\trint w = e -> w,v = e -> v;\n\t\t\tif(w && dep[v] == dep[u] + 1){\n\t\t\t\trint fl = dfs(v,min(cost,w));\n\t\t\t\te -> w -= fl; e -> inv -> w += fl; cost -= fl;\n\t\t\t}\n\t\t}\n\t\treturn flow - cost;\n\t}\n\t\n\tinline int main(){\n\t\tfor(rint i = 1;i <= n;++i)\n\t\t\tfor(edge *e = from[i];e;e = e->nxt)\n\t\t\t\tif(e->f) e->w += e->inv->w;\n\t\tfor(rint i = 1;i <= n;++i)\n\t\t\tfor(edge *e = from[i];e;e = e->nxt)\n\t\t\t\tif(!e->f) e->w = 0;\n\t\trint res = 0;\n\t\twhile(level())\n\t\t\tres += dfs(st,inf);\n\t\treturn res;\n\t}\n\t\n\tint node[N];\n\tint p1[N],p2[N];\n\tbool __[N];\n\t\n\tinline void tbuild(rint l,rint r){\n\t\tif(l == r) return;\n\t\tst = node[l],ed = node[l + 1];\n\t\trint tot = main(),l1 = 0,l2 = 0;\n\t\tG[st].emplace_back(ed,tot);\n\t\tG[ed].emplace_back(st,tot);\n\t\tqwq += tot;\n\t\tfor(rint i = l;i <= r;++i)\n\t\t\tif(dep[node[i]]) p1[++l1] = node[i];\n\t\t\telse p2[++l2] = node[i];\n\t\tfor(rint i = 1;i <= l1;++i) node[l + i - 1] = p1[i];\n\t\tfor(rint i = 1;i <= l2;++i) node[l + l1 + i - 1] = p2[i];\n\t\ttbuild(l,l + l1 - 1); tbuild(l + l1,r);\n\t}\n\t\n\tinline void solve2(){\n\t\tpriority_queue<pair<int,int> > Q;\n\t\tQ.emplace(0,1);\n\t\twhile(!Q.empty()){\n\t\t\tauto[d,u] = Q.top(); Q.pop();\n\t\t\tprintf(\"%d \",u); __[u] = 1;\n\t\t\tfor(auto[v,w] : G[u]) if(!__[v]) Q.emplace(w,v);\n\t\t}\n\t}\n}\n\nsigned main(){\n\tusing namespace dinic;\n\tn = read(),m = read();\n\trint u,v,w;\n\tfor(rint i = 1;i <= m;++i){\n\t\tu = read(),v = read(),w = read();\n\t\tadde(u,v,w); adde(v,u,w);\n\t}\n\tfor(rint i = 1;i <= n;++i) node[i] = i;\n\ttbuild(1,n);\n\tprintf(\"%lld\\n\",qwq);\n\tsolve2();\n\treturn 0;\n}\n```",
        "postTime": 1657938788,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "CF343E Pumping Stations"
    },
    {
        "content": "\u524d\u7f6e\u77e5\u8bc6\uff1a[\u6700\u5c0f\u5272\u6811](https://www.luogu.com.cn/problem/P4897)\n\n\u5df2\u6709\u9898\u89e3\u90fd\u662f\u4f7f\u7528\u5206\u6cbb\u6765\u6784\u9020\u65b9\u6848\u7684\uff0c\u4f46\u5176\u5b9e\u6709\u4e00\u79cd\u4ee3\u7801\u96be\u5ea6\u66f4\u4f4e\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u4f18\u7684\u8d2a\u5fc3 bfs \u6784\u9020\u65b9\u6cd5\uff0c\u8fd9\u91cc\u7ed9\u51fa\u5176\u6b65\u9aa4\u53ca\u611f\u6027\u8bc1\u660e\u3002\n\n\u7b2c\u4e00\u95ee\u7684\u7b54\u6848\u662f\u6700\u5c0f\u5272\u6811\u7684\u8fb9\u6743\u4e4b\u548c\uff0c\u6211\u4eec\u77e5\u9053\u4e24\u70b9\u7684\u6700\u5c0f\u5272\u662f\u5b83\u4eec\u5728\u6700\u5c0f\u5272\u6811\u4e0a\u8def\u5f84\u4e0a\u8fb9\u6743\u7684\u6700\u5c0f\u503c\uff0c\u53d6\u76f8\u90bb\u70b9\u7684\u8fb9\u6743\u663e\u7136\u6700\u4f18\u3002\n\n\u4f46\u662f\u8fd9\u6837\u5c31\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u7b54\u6848\u8981\u6c42\u662f\u4e00\u4e2a\u6392\u5217\uff0c\u5982\u679c\u6700\u5c0f\u5272\u6811\u4e0a\u6709\u67d0\u4e2a\u70b9\u7684\u5ea6\u6570 $\\ge 3$\uff0c\u90a3\u4e48\u4e0e\u5b83\u76f8\u8fde\u7684\u6bcf\u4e2a\u70b9\u663e\u7136\u65e0\u6cd5\u540c\u65f6\u5728\u6392\u5217\u4e2d\u4e0e\u5b83\u76f8\u90bb\u3002\n\n\u5982\u4f55\u5904\u7406\uff1f\u7b54\u6848\u662f\u663e\u7136\u7684\uff1a\u6211\u4eec\u4f1a\u5148\u653e\u8fb9\u6743\u5927\u7684\u70b9\uff0c\u518d\u653e\u8fb9\u6743\u5c0f\u7684\u70b9\uff0c\u6309\u7167\u6700\u5c0f\u5272\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u6bd4\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u66f4\u5927\u7684\u8fb9\u6743\u90fd\u53ef\u4ee5\u89c6\u4f5c\u4e0e\u5b83\u76f8\u7b49\uff0c\u4e8e\u662f\u8fd9\u6761\u8fb9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f\u5176\u8fb9\u6743\u3002\n\n\u8fd9\u4e2a\u7ed3\u8bba\u53ef\u4ee5\u62d3\u5c55\u5230\u7b2c\u4e8c\u95ee\u7684\u6784\u9020\uff1a\u5728\u4f18\u5148\u961f\u5217\u91cc\u63d2\u5165\u4efb\u610f\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u6bcf\u6b21\u53d6\u51fa\u5806\u9876\u7684\u70b9\u5e76\u8f93\u51fa\uff0c\u5c06\u4e0e\u5176\u76f8\u90bb\u7684\u70b9\u53ca\u8fb9\u6743\u90fd\u52a0\u5165\u4f18\u5148\u961f\u5217\uff0c\u4f18\u5148\u961f\u5217\u4ee5\u8fb9\u6743\u4e3a\u5173\u952e\u5b57\u3002\n\n\u5982\u4f55\u8bc1\u660e\u5b83\u7684\u6b63\u786e\u6027\uff1f\u8003\u8651~~\u611f\u6027~~\u53cd\u8bc1\uff1a\u5b9a\u4e49\u5c06\u67d0\u4e2a\u70b9 $i$ \u52a0\u5165\u4f18\u5148\u961f\u5217\u7684\u8fb9\u4e3a $fa_i$\uff0c\u5982\u679c\u6709\u67d0\u6761\u8fb9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e0d\u662f\u5b83\u7684\u8fb9\u6743\uff0c\u4ee4\u8fd9\u6761\u8fb9\u4e2d\u52a0\u5165\u7684\u70b9\u4e3a $u$\uff0c\u6392\u5217\u4e2d\u5728 $u$ \u524d\u9762\u4e00\u4f4d\u7684\u70b9\u4e3a $v$\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709 $fa_u$ \u7684\u8fb9\u6743 $\\le$ $fa_v$ \u7684\u8fb9\u6743 $\\le$ \u4ece $\\text{lca}(u,v)$ \u5230 $u$ \u4e0a $fa_u$ \u4e4b\u5916\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u7531\u4e8e\u6bd4 $fa_u$ \u7684\u8fb9\u6743\u66f4\u5927\u7684\u8fb9\u6743\u90fd\u53ef\u4ee5\u89c6\u4f5c\u4e0e\u5b83\u76f8\u7b49\uff0c\u6240\u4ee5\u7b54\u6848\u5e76\u4e0d\u4f1a\u51cf\u5c11\uff0c\u77db\u76fe\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^3m+n\\log n)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ri register int\ntypedef long long ll;\nconst int maxm=1010,maxn=210;\nconst ll inf=0x3f3f3f3f3f3f3f3fll;\ntemplate<class T>inline bool ckmin(T &x,const T &y){return x>y?x=y,1:0;}\ntemplate<class T>inline bool ckmax(T &x,const T &y){return x<y?x=y,1:0;}\ntemplate<class T>inline void clear(T *arr,int siz,int val=0){memset(arr,val,sizeof(T)*(siz+1));}\nstruct edge{\n\tint to,nxt,f,f_;\n}e[maxm<<1];\nint hd[maxn],len=1,tmp[maxn];\ninline void addedge(int fr,int to,int f){\n\te[++len]={to,hd[fr],f,f};\n\thd[fr]=len;\n\te[++len]={fr,hd[to],f,f};\n\thd[to]=len;\n}\nint n,s,t;\nll dep[maxn];\ninline bool bfs1(){\n\tclear(dep,n);\n\tdep[s]=1;\n\tqueue<int>q;\n\tq.push(s);\n\twhile(q.size()){\n\t\tri p=q.front();q.pop();\n\t\tfor(ri i=hd[p];i;i=e[i].nxt)\n\t\t\tif(e[i].f>0&&!dep[e[i].to])\n\t\t\t\tdep[e[i].to]=dep[p]+1,q.push(e[i].to);\n\t}\n\treturn dep[t];\n}\nll dfs(int p,ll lim){\n\tif(p==t)return lim;\n\tll sum=0;\n\tfor(ri i=hd[p];i;i=e[i].nxt)\n\t\tif(e[i].f>0&&dep[p]+1==dep[e[i].to]){\n\t\t\tll f=dfs(e[i].to,min(lim-sum,(ll)e[i].f));\n\t\t\tif(f){\n\t\t\t\te[i].f-=f,e[i^1].f+=f;\n\t\t\t\tsum+=f;\n\t\t\t\tif(sum==lim)break;\n\t\t\t}\n\t\t}\n\tif(!sum)dep[p]=0;\n\treturn sum;\n}\ninline ll dinic(){\n\tfor(ri i=2;i<=len;++i)e[i].f=e[i].f_;\n\tll ret=0;\n\twhile(bfs1()){\n\t\tret+=dfs(s,inf);\n\t\tmemcpy(hd,tmp,n+1<<1);\n\t}\n\treturn ret;\n}\nll ans;\ntypedef pair<ll,int> pli;\n#define fi first\n#define se second\nvector<pli>g[maxn];\nvoid build(const vector<int> &v){\n\tif(v.size()<2)return;\n\ts=v.front(),t=v.back();\n\tll f=dinic();\n\tans+=f;\n\tg[s].emplace_back(f,t),g[t].emplace_back(f,s);\n\tvector<int>l,r;\n\tfor(ri i:v)(dep[i]?l:r).push_back(i);\n\tbuild(l),build(r);\n}\nbool vis[maxn];\ninline void bfs2(){\n\tpriority_queue<pli,vector<pli>,less<pli>>q;\n\tq.push({0,1});\n\twhile(q.size()){\n\t\tri p=q.top().se;q.pop();\n\t\tprintf(\"%d \",p);\n\t\tvis[p]=true;\n\t\tfor(auto &i:g[p])\n\t\t\tif(!vis[i.se])\n\t\t\t\tq.push(i);\n\t}\n}\nint m,q,t_case;\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\twhile(m--){\n\t\tri x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\taddedge(x,y,z);\n\t}\n\tmemcpy(tmp,hd,n+1<<1);\n\tvector<int>v;\n\tfor(ri i=1;i<=n;++i)v.push_back(i);\n\tbuild(v);\n\tprintf(\"%lld\\n\",ans);\n\tbfs2();\n\treturn 0;\n}\n```\n",
        "postTime": 1641163040,
        "uid": 67942,
        "name": "meyi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF343E \u3010Pumping Stations\u3011"
    },
    {
        "content": "\u611f\u89c9\u6784\u9020\u7b54\u6848\u7684\u8bdd\u76f4\u63a5\u8d2a\u5fc3\u7ef4\u62a4\u5c31\u80fd\u505a\u554a\u2026\u7ed9\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u505a\u6cd5\u5427\u3002\r\n\r\n\u770b\u5230\u8fd9\u9898\u7b2c\u4e00\u4e2a\u53cd\u5e94\u5c31\u662f\u76f4\u63a5\u4e0a\u6700\u5c0f\u5272\u6811\uff0c\u7136\u540e\u8f6c\u5316\u4e3a\u6c42\u4e00\u4e2a\u6392\u5217\uff0c\u4f7f\u5f97 $\\sum md(p_i,p_{i+1})$ \u6700\u5927\uff0c\u5176\u4e2d $md$ \u8868\u793a\u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u6743\u3002\r\n\r\n\u6a21\u62df\u4e00\u4e9b\u4e1c\u897f\u4e4b\u540e\u53d1\u73b0\u597d\u50cf\u6211\u4eec\u6c38\u8fdc\u662f\u80fd\u5168\u90e8\u53d6\u5230 $\\sum w$ \u7684\u4e0a\u754c\u7684\u3002\u8003\u8651\u5982\u4f55\u6784\u9020\u3002\r\n\r\n\u6211\u4eec\u628a\u8fb9\u6309\u8fb9\u6743\u4ece\u5927\u5f80\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u7ef4\u62a4\u8def\u5f84\uff0c\u7136\u540e\u5bf9\u4e8e\u8fd9\u6761\u8fb9\uff0c\u6211\u4eec\u5c31\u628a\u8fd9\u6761\u8fb9\u4e24\u4e2a\u7aef\u70b9\u4e0a\u7684\u8def\u5f84\u5408\u5e76\u4e86\uff08\u5373\u5176\u4e2d\u4e00\u4e2a\u7684\u8def\u5f84\u5c3e\u540e\u63a5\u4e0a\u53e6\u4e00\u4e2a\u7684\u8def\u5f84\u9996\uff09\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5c31\u662f\u7ef4\u62a4\u4e00\u4e2a\u94fe\uff0c\u7531\u4e8e $n$ \u5f88\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u627e\u8fd9\u4e2a\u94fe\u5c3e\u548c\u94fe\u9996\uff0c\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u8fd9\u4e48\u505a\u7684\u6b63\u786e\u6027\u663e\u7136\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u52a0\u7684\u4e00\u6b21\u8df3\u8dc3\u5fc5\u7136\u4fdd\u8bc1\u4e86\u8fd9\u6b21\u8df3\u8dc3\u4f1a\u7ecf\u8fc7\u7684\u6240\u6709\u8fb9\u7684\u74f6\u9888\u662f\u76ee\u524d\u8003\u8651\u7684\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u3002\uff08\u4e0b\u9762\u8fd9\u91cc\u662f\u6784\u9020\u7684\u4ee3\u7801\uff0c$t$ \u5c31\u662f\u6811\u8fb9\uff09\u3002\r\n\r\n\u5982\u679c\u66f4\u4f18\u4e00\u70b9\u5f00\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4\u94fe\u9996\u548c\u94fe\u5c3e\u4e5f\u662f\u5f88\u5bb9\u6613\u7684\uff0c\u4e0d\u8fc7\u6ca1\u5fc5\u8981\u3002\r\n\r\n```cpp\r\nint pre[N],nxt[N];\r\nstruct ted {int x,y,w;} t[N];\r\nbool cmp(const ted &a,const ted &b) {return a.w>b.w;}\r\nvoid merge(int x,int y) {\r\n\twhile(nxt[x]) x=nxt[x];\r\n\twhile(pre[y]) y=pre[y];\r\n\tnxt[x]=y, pre[y]=x;\r\n}\r\nvoid getans() {\r\n\tsort(t+1,t+n,cmp);\r\n\trep(i,1,n-1) merge(t[i].x,t[i].y);\r\n}\r\n```\r\n\r\n<https://codeforces.com/contest/343/submission/184414556>",
        "postTime": 1670557455,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "CF343E\uff08\u4e00\u4e2a\u66f4\u4e3a\u7b80\u6d01\u7684\u89e3\u6cd5\uff09"
    },
    {
        "content": "\u5bf9\u65e0\u5411\u56fe\u5efa\u51fa\u6765\u6700\u5c0f\u5272\u6811\uff0c\u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u5b9a\u4e49\u6811\u4e0a\u4e24\u70b9\u8def\u5f84\u6743\u503c\u662f\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u6700\u5c0f\u503c\uff0c\u6784\u9020\u4e00\u4e2a\u6392\u5217\uff0c\u4f7f\u5f97\u76f8\u90bb\u4e24\u70b9\u7684\u8def\u5f84\u6743\u503c\u548c\u6700\u5927\u3002\n\n\u6211\u4eec\u8003\u8651\u5bf9\u5f53\u524d\u7684\u4e00\u68f5\u6811\uff0c\u53d6\u51fa\u8fb9\u6743\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u5b9a\u8981\u53ea\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u4e00\u6b21\uff0c\u4e8e\u662f\u53bb\u6389\u8fd9\u6761\u8fb9\u5c31\u53d8\u6210\u4e86\u4e24\u4e2a\u5b50\u95ee\u9898\uff0c\u5206\u6cbb\u4e0b\u53bb\u5c31\u53ef\u4ee5\u6784\u9020\u51fa\u6765\u4e86\u3002\n\n\u6784\u9020\u7b54\u6848\u8fd9\u90e8\u5206\u5b9e\u73b0\u7684\u597d\u662f\u53ef\u4ee5\u505a\u5230 $O(n\\log n\\alpha(n))$ \u7684\uff0c\u800c\u4e14\u6211\u5199\u7684\u4e5f\u662f\u8fd9\u79cd\u3002\n\n**Code**\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nconst int N = 200;\nconst int inf = 1e9;\nusing namespace std;\nstruct edges\n{\n\tint u,v,w;\n}edge[N + 5];\nint n,m,t[N + 5],t1[N + 5],t2[N + 5],e1[N + 5],e2[N + 5],e[N + 5],edge_cnt,fa[N + 5],a[N + 5],ans;\nnamespace F\n{\n    const int N = 3e6;\n    const long long inf = 2e18;\n    struct edges\n    {\n        int to;\n        long long cost;\n    }edge[N * 2 + 5],e[N * 2 + 5];\n    int nxt[N * 2 + 5],head[N + 5],edge_cnt = 1,dis[N + 5],q[N + 5],cur[N + 5],S,T;\n    void add_edge(int u,int v,long long w)\n    {\n        edge[++edge_cnt] = (edges){v,w};\n        nxt[edge_cnt] = head[u];\n        head[u] = edge_cnt;\n    }\n    void add(int u,int v,long long w)\n    {\n        add_edge(u,v,w);\n        add_edge(v,u,w);\n    }\n    int bfs()\n    {\n        for (int i = 1;i <= n;i++)\n            cur[i] = head[i],dis[i] = 0;\n        int l = 1,r = 0;\n        dis[S] = 1;\n        q[++r] = S;\n        while (l <= r)\n        {\n            int u = q[l++];\n            for (int i = head[u];i;i = nxt[i])\n            {\n                int v = edge[i].to,w = edge[i].cost;\n                if (w && !dis[v])\n                {\n                    dis[v] = dis[u] + 1;\n                    q[++r] = v;\n                }\n            }\n        }\n        return dis[T];\n    }\n    long long dfs(int u,long long flow)\n    {\n        if (u == T)\n            return flow;\n        long long sm = 0;\n        for (int &i = cur[u];i;i = nxt[i])\n        {\n            int v = edge[i].to;\n            long long w = edge[i].cost;\n            if (dis[v] == dis[u] + 1 && w)\n            {\n                long long res = dfs(v,min(w,flow));\n                edge[i].cost -= res;\n                edge[i ^ 1].cost += res;\n                sm += res;\n                flow -= res;\n                if (!flow)\n                    break;\n            }\n        }\n        return sm;\n    }\n    void init()\n    {\n    \tfor (int i = 2;i <= edge_cnt;i++)\n    \t\te[i] = edge[i];\n    }\n    void clear()\n    {\n        for (int i = 2;i <= edge_cnt;i++)\n        \tedge[i] = e[i];\n    }\n    long long dinic(int s,int t)\n    {\n        S = s;T = t;\n        clear();\n        long long ans = 0;\n        while (bfs())\n            ans += dfs(S,inf);\n        return ans;\n    }\n}\nint find(int x)\n{\n\tif (fa[x] == x)\n\t\treturn x;\n\treturn fa[x] = find(fa[x]);\n}\nvoid build(int l,int r)\n{\n\tif (l >= r)\n\t\treturn;\n\tint val = F::dinic(t[l],t[r]),cnt1 = 0,cnt2 = 0;\n\tedge[++edge_cnt] = (edges){t[l],t[r],val};\n\tfor (int i = l;i <= r;i++)\n\t\tif (F::dis[t[i]])\n\t\t\tt1[++cnt1] = t[i];\n\t\telse\n\t\t\tt2[++cnt2] = t[i];\n\tfor (int i = 1;i <= cnt1;i++)\n\t\tt[i] = t1[i];\n\tfor (int i = 1;i <= cnt2;i++)\n\t\tt[i + cnt1] = t2[i];\n\tbuild(1,cnt1);\n\tbuild(cnt1 + 1,cnt2 + cnt1);\n}\nvoid solve(int l,int r,int ql,int qr)\n{\n\tif (l > r)\n\t\treturn;\n\tif (l == r)\n\t{\n\t\ta[l] = t[l];\n\t\treturn;\n\t}\n\tfor (int i = l;i <= r;i++)\n\t\tfa[t[i]] = t[i];\n\tint mi = inf,id = 0,cnt1 = 0,cnt2 = 0,q1 = 0,q2 = 0;\n\tfor (int i = ql;i <= qr;i++)\n\t\tif (edge[e[i]].w < mi)\n\t\t\tmi = edge[e[i]].w,id = e[i];\n\tans += mi;\n\tfor (int i = ql;i <= qr;i++)\n\t\tif (e[i] != id)\n\t\t\tfa[find(edge[e[i]].u)] = find(edge[e[i]].v);\n\tint x = find(edge[id].u);\n\tfor (int i = l;i <= r;i++)\n\t{\n\t\tif (find(t[i]) == x)\n\t\t\tt1[++cnt1] = t[i];\n\t\telse\n\t\t\tt2[++cnt2] = t[i];\n\t}\n\tfor (int i = ql;i <= qr;i++)\n\t\tif (e[i] != id)\n\t\t{\n\t\t\tif (find(edge[e[i]].u) == x)\n\t\t\t\te1[++q1] = e[i];\n\t\t\telse\n\t\t\t\te2[++q2] = e[i];\n\t\t}\n\tfor (int i = 1;i <= cnt1;i++)\n\t\tt[i + l - 1] = t1[i];\n\tfor (int i = 1;i <= cnt2;i++)\n\t\tt[l + i + cnt1 - 1] = t2[i];\n\tfor (int i = 1;i <= q1;i++)\n\t\te[i + ql - 1] = e1[i];\n\tfor (int i = 1;i <= q2;i++)\n\t\te[i + q1 + ql - 1] = e2[i];\n\tsolve(l,l + cnt1 - 1,ql,ql + q1 - 1);\n\tsolve(l + cnt1,r,ql + q1,ql + q1 + q2 - 1);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tint u,v,w;\n\tfor (int i = 1;i <= m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tF::add(u,v,w);\n\t}\n\tF::init();\n\tfor (int i = 1;i <= n;i++)\n\t\tt[i] = i;\n\tbuild(1,n);\n\tfor (int i = 1;i <= n;i++)\n\t\tt[i] = i;\n\tfor (int i = 1;i < n;i++)\n\t\te[i] = i;\n\tsolve(1,n,1,n - 1);\n\tcout<<ans<<endl;\n\tfor (int i = 1;i <= n;i++)\n\t\tprintf(\"%d \",a[i]);\n\treturn 0;\n}\n```",
        "postTime": 1617009933,
        "uid": 73231,
        "name": "eee_hoho",
        "ccfLevel": 7,
        "title": "CF343E Pumping Stations"
    }
]