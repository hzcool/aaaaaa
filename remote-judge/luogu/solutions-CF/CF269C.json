[
    {
        "content": "\u5bf9\u4e8e\u975e\u6e90\u975e\u6c47\u7684\u70b9\uff0c\u5176\u5165\u6d41\u4e3a\u5176\u6240\u6709\u8fb9\u7684\u6d41\u91cf\u4e4b\u548c\u7684\u4e00\u534a\u3002\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u751f\u6210\u7684\u56fe\u662f\u4e00\u4e2a DAG\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u5957\u7528\u62d3\u6251\u6392\u5e8f\u7684\u601d\u60f3\uff0c\u628a\u5165\u6d41\u5f53\u505a\u5165\u5ea6\uff0c\u8dd1\u4e00\u904d BFS \u5373\u53ef\u5f97\u5230\u5404\u4e2a\u8fb9\u7684\u65b9\u5411\u3002\n\nAC \u4ee3\u7801 (Golang)\uff1a\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t. \"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tin := bufio.NewReader(os.Stdin)\n\tout := bufio.NewWriter(os.Stdout)\n\tdefer out.Flush()\n\n\tvar n, m, v, w, c int\n\tFscan(in, &n, &m)\n\ttype edge struct{ to, i, d, f int }\n\tg := make([][]edge, n+1)\n\tf := make([]int, n+1)\n\tfor i := 0; i < m; i++ {\n\t\tFscan(in, &v, &w, &c)\n\t\tg[v] = append(g[v], edge{w, i, 0, c})\n\t\tg[w] = append(g[w], edge{v, i, 1, c})\n\t\tf[v] += c\n\t\tf[w] += c\n\t}\n\tfor i := range f {\n\t\tf[i] >>= 1\n\t}\n\n\tans := make([]int, m)\n\tfor i := range ans {\n\t\tans[i] = -1\n\t}\n\tq := []int{1}\n\tfor len(q) > 0 {\n\t\tv := q[0]\n\t\tq = q[1:]\n\t\tfor _, e := range g[v] {\n\t\t\tif ans[e.i] == -1 {\n\t\t\t\tans[e.i] = e.d\n\t\t\t\tw := e.to\n\t\t\t\tf[w] -= e.f\n\t\t\t\tif w != n && f[w] == 0 {\n\t\t\t\t\tq = append(q, w)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor _, d := range ans {\n\t\tFprintln(out, d)\n\t}\n}\n```\n\n",
        "postTime": 1600677313,
        "uid": 266651,
        "name": "\u7075\u8336\u5c71\u827e\u5e9c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF269C \u3010Flawed Flow\u3011"
    }
]