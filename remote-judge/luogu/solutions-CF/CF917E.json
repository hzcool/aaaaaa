[
    {
        "content": "> [CF917E Upside Down](https://www.luogu.com.cn/problem/CF917E)\n\n\u4ee5 $1$ \u4e3a\u6839\uff0c\u5c06\u95ee\u9898\u5206\u6210\u76f4\u94fe\u548c\u8de8\u8fc7 $d_i = lca(u_i, v_i)$ \u5206\u522b\u6c42\u89e3\u3002\u8bbe $str(u, v)$ \u8868\u793a $u\\to v$ \u7684\u8def\u5f84\u6240\u8868\u793a\u5b57\u7b26\u4e32\u3002 \n\n\u5bf9\u4e8e\u76f4\u94fe\uff0c\u76f8\u5f53\u4e8e $s_k$ \u5728 $str(d_i, v_i)$ \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u52a0\u4e0a $s_k ^ R$ \u5728 $str(d_i, u_i)$ \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002\u5dee\u5206\u8f6c\u5316\u4e3a\u4ece\u6839\u5230\u67d0\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a $s_k$ \u6216 $s_k ^ R$ \u7684\u51fa\u73b0\u6b21\u6570\u3002\u5206\u522b\u5efa\u51fa\u6b63\u4e32\u548c\u53cd\u4e32\u7684 AC \u81ea\u52a8\u673a\uff0c\u5219\u95ee\u9898\u5f62\u5982\u4ece\u6839\u5230\u67d0\u70b9\u5728 AC \u81ea\u52a8\u673a\u4e0a\u5f62\u6210\u7684\u8def\u5f84\u4e0a\u6ee1\u8db3\u4ee5 $s_k$ \u4f5c\u4e3a fail \u6811\u4e0a\u7684\u7956\u5148\u7684\u72b6\u6001\u3002dfs \u65f6\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u3002\n\n\u5bf9\u4e8e\u8de8\u8fc7 LCA\uff0c\u6bd4\u8f83\u56f0\u96be\u3002\u8003\u8651\u6c42\u51fa $str(u_i, d_i)$ \u6700\u957f **\u771f\u540e\u7f00** $P_i$ \u4f7f\u5f97\u5b83\u4e3a $s_k$ \u7684\u524d\u7f00\uff0c$str(d_i, v_i)$ \u6700\u957f **\u771f\u524d\u7f00** $Q_i$ \u4f7f\u5f97\u5b83\u4e3a $s_k$ \u7684\u540e\u7f00\uff0c\u5219\u6240\u6709 $P_i$ \u7684 border \u5747\u53ef\u4e0e $str(u_i, d_i)$ \u5bf9\u5e94\u957f\u5ea6\u7684\u540e\u7f00\u5339\u914d\uff0c$Q_i$ \u7684 border \u5747\u53ef\u4e0e $str(d_i, v_i)$ \u5bf9\u5e94\u957f\u5ea6\u7684\u524d\u7f00\u5339\u914d\u3002\u56e0\u6b64\uff0c\u82e5 $x$ \u4e3a $P_i$ \u7684 border \u957f\u4e14 $|s_k| - x$ \u4e3a $S_i$ \u7684 border \u957f\uff0c\u5219\u4ea7\u751f\u4e00\u6b21\u8d21\u732e\u3002\u5efa\u51fa $s_k$ \u548c $s_k ^ R$ \u7684\u5931\u914d\u6811 $F$ \u548c $F ^ R$\uff0c\u5219\u95ee\u9898\u5f62\u5982\u7ed9\u5b9a $p, q$ \u6c42\u6ee1\u8db3 $x$ \u5728 $F$ \u4e0a\u7684 $p$ \u5230\u6839\u7684\u8def\u5f84\u4e0a\u4e14 $|s_k| - x$ \u5728 $F ^ R$ \u4e0a\u7684 $q$ \u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684 $x$ \u7684\u6570\u91cf\u3002\u6811\u4e0a\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898\uff0c\u5bf9 $F$ \u79bb\u7ebf dfs\uff0c\u6bcf\u904d\u5386\u5230\u4e00\u4e2a\u70b9 $x$ \u5c31\u5c06 $|s_k| - x$ \u52a0\u5165\u5f53\u524d\u96c6\u5408 $S$\uff0c\u5e76\u56de\u7b54 $p = x$ \u7684\u8be2\u95ee $(p, q)$\uff0c\u5373\u67e5\u8be2 $S$ \u4e2d $q$ \u7684\u7956\u5148\u7684\u6570\u91cf\u3002\u65f6\u95f4\u6233\u62cd\u5e73 $F ^ R$ \u4e4b\u540e\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u3002\u79bb\u5f00\u65f6\u518d\u5c06 $|s_k| - x$ \u5220\u53bb\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 $P_i$ \u548c $Q_i$ \u7684\u957f\u5ea6\u3002\u5bf9\u4e8e\u5f62\u5982\u7ed9\u5b9a $s, t$\uff0c\u6c42 $t$ \u7684\u6700\u957f\u540e\u7f00\u4f7f\u5f97\u5b83\u662f $s$ \u7684\u524d\u7f00\u7684\u95ee\u9898\uff0c\u6709\u4e24\u4e2a\u7ecf\u5178\u89e3\u6cd5\uff0cZ \u7b97\u6cd5\u548c\u540e\u7f00\u6570\u7ec4\u3002Z \u7b97\u6cd5\u7075\u6d3b\u6027\u8f83\u5dee\uff0c\u672c\u9898\u4e00\u4e2a\u5b57\u7b26\u4e32\u901a\u8fc7\u6811\u4e0a\u8def\u5f84\u786e\u5b9a\uff0c\u4e0d\u53ef\u884c\uff0c\u56e0\u6b64\u8003\u8651\u540e\u7f00\u6570\u7ec4\u3002\u5bf9 $t$ \u5efa\u51fa\u540e\u7f00\u6570\u7ec4\uff0c\u4e8c\u5206\u5f97\u5230 $s$ \u5728\u540e\u7f00\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u6c42\u51fa\u4f7f\u5f97 $lcp(s, t[p, |t|])$ \u6700\u5927\u7684 $p$ \u4ee5\u53ca\u5bf9\u5e94 LCP $L$\uff0c\u5219 $t[p, |t|]$ \u6700\u957f\u7684\u957f\u5ea6 $\\leq L$ \u7684 border \u5373\u4e3a\u6240\u6c42\u3002\n\n\u5bf9\u4e8e\u672c\u9898\u53ef\u4ee5\u5982\u6cd5\u70ae\u5236\u3002\u6c42 $P_i$ \u65f6\uff0c\u6c42 $str(d_i, u_i)$ \u6700\u957f\u771f\u524d\u7f00\u4f7f\u5f97\u5b83\u4e3a $s_k ^ R$ \u7684\u540e\u7f00\u3002\u6c42 $Q_i$ \u65f6\uff0c\u6c42 $str(d_i, v_i)$ \u6700\u957f\u771f\u524d\u7f00\u4f7f\u5f97\u5b83\u4e3a $s_k$ \u7684\u540e\u7f00\u3002\u6bd4\u8f83\u6811\u4e0a\u4e00\u6761\u94fe\u548c $s_k$ \u7684\u5927\u5c0f\u65f6\uff0c\u4e8c\u5206 LCP \u5e76\u6bd4\u8f83\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002\u4f46\u4e8c\u5206 LCP \u4e4b\u540e\u8fd8\u8981\u6c42\u6811\u4e0a $k$ \u7ea7\u7956\u5148\uff0c\u5199\u957f\u5256\u592a\u9ebb\u70e6\u4e86\uff0c\u5c06\u500d\u589e\u548c\u4e8c\u5206\u7ed3\u5408\u5728\u4e00\u8d77\u5373\u53ef\u505a\u5230\u5355\u6b21\u6bd4\u8f83 $\\mathcal{O}(\\log n)$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(q\\log ^ 2 n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define TIME 1e3 * clock() / CLOCKS_PER_SEC\nusing ll = long long;\nusing uint = unsigned int;\n// using lll = __int128;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nusing ull = unsigned long long;\ninline ll read() {\n  ll x = 0, sgn = 0;\n  char s = getchar();\n  while(!isdigit(s)) sgn |= s == '-', s = getchar();\n  while(isdigit(s)) x = x * 10 + s - '0', s = getchar();\n  return sgn ? -x : x;\n}\ninline void print(ll x) {\n  if(x < 0) return putchar('-'), print(-x);\n  if(x >= 10) print(x / 10);\n  putchar(x % 10 + '0');\n}\nbool Mbe;\nconstexpr int K = 18;\nconstexpr int N = 2e5 + 5;\nconstexpr int S = 26;\nconstexpr int mod = 1004535809;\nconstexpr int base = 131;\nstring s[N];\nint n, m, q, pw[N];\nint u[N], v[N], ulcp[N], vlcp[N], uarg[N], varg[N], d[N], k[N], ans[N];\nnamespace tree {\n  vector<pii> e[N];\n  int lg, dep[N], hsh[N], fch[N], anc[K][N];\n  int get(int u, int v) {\n    assert(dep[u] <= dep[v]);\n    return (hsh[v] + mod - 1ll * hsh[u] * pw[dep[v] - dep[u]] % mod) % mod;\n  }\n  void dfs(int id, int ff) {\n    dep[id] = dep[anc[0][id] = ff] + 1;\n    for(pii _ : e[id]) {\n      int it = _.first;\n      if(it == ff) continue;\n      hsh[it] = (1ll * hsh[id] * base + _.second) % mod;\n      fch[it] = _.second, dfs(it, id);\n    }\n  }\n  void build() {\n    lg = 31 - __builtin_clz(n);\n    dfs(1, 0);\n    for(int i = 1; i <= lg; i++)\n      for(int j = 1; j <= n; j++)\n        anc[i][j] = anc[i - 1][anc[i - 1][j]];\n  }\n  int kth(int u, int k) {\n    for(int i = lg; ~i; i--) if(k >> i & 1) u = anc[i][u];\n    return u;\n  }\n  int lca(int u, int v) {\n    if(dep[u] < dep[v]) swap(u, v);\n    u = kth(u, dep[u] - dep[v]);\n    if(u == v) return u;\n    for(int i = lg; ~i; i--) if(anc[i][u] != anc[i][v]) u = anc[i][u], v = anc[i][v];\n    return anc[0][u];\n  }\n}\nstruct BIT {\n  int c[N];\n  void add(int x, int v) {while(x < N) c[x] += v, x += x & -x;}\n  void add(int l, int r, int v) {add(l, v), add(r + 1, -v);}\n  int query(int x) {int s = 0; while(x) s += c[x], x -= x & -x; return s;}\n  int query(int l, int r) {return query(r) - query(l - 1);}\n};\nstruct acam {\n  int node, son[N][S], fa[N], ed[N];\n  void ins(string s, int id) {\n    int p = 0;\n    for(char it : s) {\n      if(!son[p][it - 'a']) son[p][it - 'a'] = ++node;\n      p = son[p][it - 'a'];\n    }\n    ed[id] = p;\n  }\n  int dn, dfn[N], sz[N];\n  vector<int> e[N], buc[N];\n  void dfs(int id) {\n    dfn[id] = ++dn, sz[id] = 1;\n    for(int it : e[id]) dfs(it), sz[id] += sz[it];\n  }\n  void build() {\n    queue<int> q;\n    for(int i = 0; i < S; i++) if(son[0][i]) q.push(son[0][i]);\n    while(!q.empty()) {\n      int t = q.front(); q.pop();\n      e[fa[t]].push_back(t);\n      for(int i = 0; i < S; i++)\n        if(son[t][i]) q.push(son[t][i]), fa[son[t][i]] = son[fa[t]][i];\n        else son[t][i] = son[fa[t]][i];\n    }\n    dfs(0);\n  }\n  BIT tr;\n  void solve(int id, int ff, int cur) {\n    if(cur) tr.add(dfn[cur], 1);\n    for(int it : buc[id]) {\n      int id = abs(it), c = id / it;\n      int x = ed[k[id]], l = dfn[x], r = dfn[x] + sz[x] - 1;\n      ans[id] += tr.query(l, r) * c;\n    }\n    for(pii _ : tree::e[id]) {\n      int it = _.first;\n      if(it != ff) solve(it, id, son[cur][_.second - 'a']);\n    }\n    if(cur) tr.add(dfn[cur], -1);\n  }\n} A, AR;\nstruct border {\n  int lg, dn, dfn[N], sz[N], nxt[N], anc[K][N];\n  vector<int> e[N];\n  void dfs(int id) {\n    dfn[id] = ++dn, sz[id] = 1;\n    for(int it : e[id]) dfs(it), sz[id] += sz[it];\n  }\n  void build(int n, int *s) {\n    dn = 0;\n    for(int i = 0; i <= n; i++) e[i].clear();\n    for(int i = 2, j = 0; i <= n; i++) {\n      while(j && s[j + 1] != s[i]) j = nxt[j];\n      anc[0][i] = nxt[i] = j += s[j + 1] == s[i];\n    }\n    for(int i = 1; i <= n; i++) e[nxt[i]].push_back(i);\n    dfs(0), lg = 31 - __builtin_clz(dn);\n    for(int i = 1; i <= lg; i++)\n      for(int j = 0; j <= dn; j++)\n        anc[i][j] = anc[i - 1][anc[i - 1][j]];\n  }\n  int binary(int x, int lim) {\n    if(x <= lim) return x;\n    for(int i = lg; ~i; i--) if(anc[i][x] > lim) x = anc[i][x];\n    return anc[0][x];\n  }\n} ori, rev;\nnamespace combine {\n  vector<int> buc[N];\n  BIT tr;\n  void dfs(int n, int id) {\n    int l = rev.dfn[n - id], r = l + rev.sz[n - id] - 1;\n    if(id && id < n) tr.add(l, r, 1);\n    for(int it : buc[id]) ans[it] += tr.query(rev.dfn[varg[it]]);\n    for(int it : ori.e[id]) dfs(n, it);\n    if(id && id < n) tr.add(l, r, -1);\n  }\n  void solve(int n, vector<int> &qu) {\n    for(int i = 1; i <= n; i++) buc[i].clear();\n    for(int it : qu) {\n      uarg[it] = ori.binary(uarg[it], ulcp[it]);\n      varg[it] = rev.binary(varg[it], vlcp[it]);\n      if(uarg[it] + varg[it] < n) continue;\n      buc[uarg[it]].push_back(it);\n    }\n    dfs(n, 0);\n  }\n}\nnamespace sa {\n  int n, s[N];\n  vector<int> qu[N];\n  int sa[N], rk[N], ork[N], buc[N], id[N], hsh[N];\n  int get(int l, int r) {return l--, (hsh[r] + mod - 1ll * hsh[l] * pw[r - l] % mod) % mod;}\n  bool cmp(int a, int b, int w) {return ork[a] == ork[b] && ork[a + w] == ork[b + w];}\n  void build() {\n    int m = 1 << 7, p = 0;\n    memset(rk, 0, n + 5 << 2);\n    memset(buc, 0, m + 5 << 2);\n    for(int i = 1; i <= n; i++) buc[rk[i] = s[i]]++;\n    for(int i = 1; i <= m; i++) buc[i] += buc[i - 1];\n    for(int i = n; i; i--) sa[buc[rk[i]]--] = i;\n    for(int w = 1; ; w <<= 1, m = p, p = 0) {\n      for(int i = n - w + 1; i <= n; i++) id[++p] = i;\n      for(int i = 1; i <= n; i++) if(sa[i] > w) id[++p] = sa[i] - w;\n      memset(buc, 0, m + 5 << 2);\n      memcpy(ork, rk, n + 5 << 2);\n      p = 0;\n      for(int i = 1; i <= n; i++) buc[rk[i]]++;\n      for(int i = 1; i <= m; i++) buc[i] += buc[i - 1];\n      for(int i = n; i; i--) sa[buc[rk[id[i]]]--] = id[i];\n      for(int i = 1; i <= n; i++) rk[sa[i]] = cmp(sa[i - 1], sa[i], w) ? p : ++p;\n      if(p == n) break;\n    }\n  }\n  pair<int, pii> lcp(int id, int d, int u) {\n    assert(u != d);\n    auto chk = [&](int p) {\n      int dis = tree::dep[p] - tree::dep[d];\n      if(id + dis - 1 > n) return false; // add this line\n      return tree::get(d, p) == get(id, id + dis - 1);\n    };\n    for(int i = tree::lg; ~i; i--) {\n      int x = tree::anc[i][u];\n      if(tree::dep[x] <= tree::dep[d]) continue;\n      if(!chk(x)) u = x;\n    }\n    int nct = 0;\n    if(!chk(u)) nct = tree::fch[u], u = tree::anc[0][u];\n    int L = tree::dep[u] - tree::dep[d];\n    return {L, {s[id + L], nct}};\n  }\n  void solve() {\n    for(int i = 1; i <= m; i++) {\n      if(qu[i].empty()) continue;\n      n = ::s[i].size(), s[n + 1] = 0;\n      for(int j = 1; j <= n; j++) s[j] = ::s[i][n - j];\n      auto calc = [&](border &T, int *u, int *L, int *arg) {\n        for(int j = 1; j <= n; j++) hsh[j] = (1ll * hsh[j - 1] * base + s[j]) % mod;\n        build(), T.build(n, s);\n        for(int it : qu[i]) {\n          int l = 0, r = n;\n          while(l < r) {\n            int m = l + r + 2 >> 1;\n            pii dat = lcp(sa[m], d[it], u[it]).second;\n            if(dat.first < dat.second) l = m;\n            else r = m - 1;\n          }\n          if(l) {\n            int tmp = lcp(sa[l], d[it], u[it]).first;\n            if(tmp > L[it]) L[it] = tmp, arg[it] = sa[l];\n          }\n          if(l < n) {\n            int tmp = lcp(sa[l + 1], d[it], u[it]).first;\n            if(tmp > L[it]) L[it] = tmp, arg[it] = sa[l + 1];\n          }\n          if(!L[it]) continue; // add this line\n          arg[it] = n - arg[it] + 1; // add this line\n          // cout << \"check \" << d[it] << \" \" << u[it] << \"\\n\";\n          // cout << it << \" \" << L[it] << \" \" << arg[it] << \"\\n\";\n          // cout << l << \" \" << r << \" \" << n << \"\\n\";\n        }\n      };\n      calc(rev, u, ulcp, uarg), reverse(s + 1, s + n + 1);\n      calc(ori, v, vlcp, varg), combine::solve(n, qu[i]);\n    }\n  }\n}\nbool Med;\nint main() {\n  fprintf(stderr, \"%.3lf MB\\n\", (&Mbe - &Med) / 1048576.0);\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"1.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"1.out\", \"w\", stdout);\n  #endif\n  cin >> n >> m >> q;\n  for(int i = pw[0] = 1; i < N; i++) pw[i] = 1ll * pw[i - 1] * base % mod;\n  for(int i = 1; i < n; i++) {\n    int x = read(), y = read();\n    char ch;\n    cin >> ch;\n    tree::e[x].push_back({y, ch});\n    tree::e[y].push_back({x, ch});\n  }\n  tree::build();\n  for(int i = 1; i <= m; i++) {\n    cin >> s[i], A.ins(s[i], i);\n    reverse(s[i].begin(), s[i].end()), AR.ins(s[i], i);\n    reverse(s[i].begin(), s[i].end());\n  }\n  A.build(), AR.build();\n  for(int i = 1; i <= q; i++) {\n    u[i] = read(), v[i] = read(), k[i] = read();\n    int L = s[k[i]].size();\n    if(L > n) continue;\n    d[i] = tree::lca(u[i], v[i]);\n    int du = tree::dep[u[i]] - tree::dep[d[i]];\n    if(du >= L) {\n      int anc = tree::kth(u[i], du - L + 1);\n      AR.buc[anc].push_back(-i);\n      AR.buc[u[i]].push_back(i);\n      u[i] = anc, du = L - 1;\n    }\n    int dv = tree::dep[v[i]] - tree::dep[d[i]];\n    if(dv >= L) {\n      int anc = tree::kth(v[i], dv - L + 1);\n      A.buc[anc].push_back(-i);\n      A.buc[v[i]].push_back(i);\n      v[i] = anc, dv = L - 1;\n    }\n    if(u[i] != d[i] && v[i] != d[i] && du + dv >= L) sa::qu[k[i]].push_back(i);\n  }\n  A.solve(1, 0, 0);\n  AR.solve(1, 0, 0);\n  sa::solve();\n  for(int i = 1; i <= q; i++) print(ans[i]), putchar('\\n');\n  cerr << TIME << \" ms\\n\";\n  return 0;\n}\n/*\n2022/9/30\nauthor: Alex_Wei\nstart coding at 8:01\nfinish debugging at 11:21\n*/\n```",
        "postTime": 1664520232,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF917E Upside Down"
    },
    {
        "content": "\u81f3\u4eca\u5199\u8fc7\u6700\u957f\u7684\u5b57\u7b26\u4e32\u9898\n\n\u770b\u8d77\u6765\u548c$bzoj$\u90a3\u9053\u56de\u5fc6\u6811\u5f88\u50cf\n\n\u4f46\u4e0d\u80fd\u76f4\u63a5\u5728$lca$\u5904$kmp$\u5339\u914d\u4e86\n\n\u8003\u8651\u5206\u6210$u\\rightarrow lca,lca\\rightarrow v$\u548c\u7a7f\u8fc7$lca$\u5206\u522b\u505a\n\n----\n\n\u6ca1\u7a7f\u8fc7$lca$\u7684\u53ef\u4ee5\u7b80\u5355\u5dee\u5206\u8be2\u95ee\n\n\u7136\u540e\u5efa\u51fa\u53cd\u4e32\u7684$Ac$\u81ea\u52a8\u673a\n\n\u5728\u6811\u4e0a\u8d70\u7684\u540c\u65f6\u8d70$Ac$\u81ea\u52a8\u673a\uff0c$fail$\u6811\u4e0a\u5355\u70b9\u52a0\u5b50\u6811\u8be2\u95ee\u5373\u53ef\n\n---\n\n\n\u8003\u8651\u7a7f\u8fc7$lca$\u7684\n\n\u5982\u679c\u6c42\u51fa\u4e86$u\\rightarrow lca$\u4e2d\u6700\u957f\u7684\u540e\u7f00\u6ee1\u8db3\u662f$S$\u7684\u524d\u7f00\u7684\n\n\u4ee5\u53ca$lca\\rightarrow v$\u6700\u957f\u524d\u7f00\u6ee1\u8db3\u4e3a$S$\u7684\u540e\u7f00\n\n\u90a3\u4e48\u7a7f\u8fc7 $lca$ \u53ef\u4ee5\u76f4\u63a5\u5229\u7528 $border$ \u6210 $log$ \u4e2a\u7b49\u5dee\u6570\u5217\u7684\u6027\u8d28\n\n\u5229\u7528 $kmp$ \u627e\u51fa\u6240\u6709\u5408\u6cd5 $border$\n\n\u7528 $exgcd$ \u6c42\u89e3\u62fc\u8d77\u6574\u4e2a\u4e32\u7684\u65b9\u6848\u6570\n\n\u7531\u4e8e\u524d\u540e\u7f00 $border$ \u76f8\u4ea4\u6700\u591a\u53ea\u6709$log$\u6bb5\n\n\u8fd9\u4e2a\u5c31\u80fd$O(qlog^2n)$\u6c42\u89e3\u7684\n\n\n\u73b0\u5728\u53ea\u8003\u8651$u\\rightarrow lca$\u7684\u600e\u4e48\u6c42\uff0c$lca\\rightarrow v$\u7c7b\u4f3c\n\n\n\u8003\u8651\u5bf9 $S$ \u53cd\u4e32 $S^R$ \u5efa\u51fa\u540e\u7f00\u6570\u7ec4\n\n\u90a3\u4e48\u5c31\u662f$lca\\rightarrow u$\u5339\u914d$S^R$\u7684\u4e00\u6bb5\u540e\u7f00\n\n\n\u8003\u8651\u6c42\u51fa\u548c$lca\\rightarrow u$\u7684$lcp$\u6700\u5927\u7684\u540e\u7f00$T$\n\n\n\u90a3\u4e48$T$\u4e2d\u7b2c\u4e00\u4e2a\u6ee1\u8db3$len\\le lcp$\u7684$border\\ T'$\u5373\u4e3a\u6700\u957f\u5339\u914d\n\n\n\u8fd9\u4e2a$T'$\u663e\u7136\u53ef\u4ee5\u548c$lca\\rightarrow u$\u5339\u914d\u6700\u957f\u4e14\u6ee1\u8db3\u6761\u4ef6\n\n\u627e$lcp$\u6700\u5927\u53ef\u4ee5\u76f4\u63a5\u627e\u540e\u7f00\u6570\u7ec4\u4e2d$rk$\u6700\u8fd1\u7684\u6c42\u4e00\u4e0b\u5373\u53ef\n\n\u4e8e\u662f\u4e8c\u5206$rk$\u7136\u540e\u4e8c\u5206\u54c8\u5e0c\u6bd4\u8f83\u4e32\u5927\u5c0f\u5373\u53ef\n\n\u590d\u6742\u5ea6$O(qlog^2n)$\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define cs const\n#define pb push_back\n#define ll long long \n#define pii pair<int,int>\n#define fi first\n#define se second\n#define bg begin\ncs int RLEN=(1<<20)|3;\ninline char gc(){\n\tstatic char ibuf[RLEN],*ib,*ob;\n\t(ib==ob)&&(ob=(ib=ibuf)+fread(ibuf,1,RLEN,stdin));\n\treturn (ib==ob)?EOF:*ib++;\n}\ninline int read(){\n\tchar ch=gc();\n\tint res=0;bool f=1;\n\twhile(!isdigit(ch))f^=ch=='-',ch=gc();\n\twhile(isdigit(ch))res=(res*10)+(ch^48),ch=gc();\n\treturn f?res:-res;\n}\ninline ll readll(){\n\tchar ch=gc();\n\tll res=0;bool f=1;\n\twhile(!isdigit(ch))f^=ch=='-',ch=gc();\n\twhile(isdigit(ch))res=(res*10)+(ch^48),ch=gc();\n\treturn f?res:-res;\t\n}\ninline int readstring(char *s){\n\tchar ch=gc();int l=0;\n\twhile(isspace(ch))ch=gc();\n\twhile(!isspace(ch)&&ch!=EOF)s[++l]=ch,ch=gc();\n\treturn l;\n}\ninline char readchar(){\n\tchar ch=gc();\n\twhile(isspace(ch))ch=gc();return ch;\n}\ntemplate<typename tp>inline void chemx(tp &a,tp b){a<b?a=b:0;}\ntemplate<typename tp>inline void chemn(tp &a,tp b){a<b?a=b:0;}\ncs int N=200005;\nstruct Ac{\n\tint nxt[N][27],fail[N],bel[N],tot;\n\tinline void insert(char *s,int l,int id){\n\t\tint p=0;\n\t\tfor(int i=1;i<=l;i++){\n\t\t\tint c=s[i]-'a'+1;\n\t\t\tif(!nxt[p][c])nxt[p][c]=++tot;\n\t\t\tp=nxt[p][c];\n\t\t}bel[id]=p;\n\t}\n\tvector<int> e[N];\n\tint in[N],out[N],dfn;\n\tvoid dfs(int u){\n\t\tin[u]=++dfn;\n\t\tfor(int v:e[u])dfs(v);\n\t\tout[u]=dfn;\n\t}\n\tinline void build(){\n\t\tqueue<int> q;\n\t\tfor(int i=1;i<=26;i++){\n\t\t\tif(nxt[0][i])q.push(nxt[0][i]);\n\t\t}\n\t\twhile(q.size()){\n\t\t\tint p=q.front();q.pop();\n\t\t\tfor(int c=1;c<=26;c++){\n\t\t\t\tint v=nxt[p][c];\n\t\t\t\tif(!v)nxt[p][c]=nxt[fail[p]][c];\n\t\t\t\telse fail[v]=nxt[fail[p]][c],q.push(v);\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=tot;i++)e[fail[i]].pb(i);\n\t\tdfs(0);\n\t}\n\tint tr[N];\n\t#define lb(x) (x&(-x))\n\tinline int go(int u,int c){return nxt[u][c];} \n\tinline void update(int u,int k){int p=in[u];\n\t\tfor(;p>0;p-=lb(p))tr[p]+=k;\n\t}\n\tinline int ask(int p,int res=0){for(;p<=dfn;p+=lb(p))res+=tr[p];return res;}\n\tinline int query(int i){int p=bel[i];\n\t\treturn ask(in[p])-ask(out[p]+1);\n\t}\n\t#undef lb\n}t[2];\ntypedef unsigned long long ul;\ntypedef pair<ul,ul> node;\ncs node bas=node(31,79);\ninline node operator +(cs node &a,cs node &b){return node(a.fi+b.fi,a.se+b.se);}\ninline node operator -(cs node &a,cs node &b){return node(a.fi-b.fi,a.se-b.se);}\ninline node operator *(cs node &a,cs node &b){return node(a.fi*b.fi,a.se*b.se);}\ninline bool operator ==(cs node &a,cs node &b){return (a.fi==b.fi)&&(a.se==b.se);}\nnode sm[N],pw[N];\nvector<pii> e[N];\nint dep[N],fa[N][19];\nint len[N],vf[N];\ninline node thas(int u,int tp){\n\treturn sm[u]-sm[tp]*pw[dep[u]-dep[tp]];\n}\nvoid dfs1(int u){\n\tfor(int i=1;i<19;i++)fa[u][i]=fa[fa[u][i-1]][i-1];\n\tfor(cs pii &x:e[u])if(x.fi!=fa[u][0]){\n\t\tvf[x.fi]=x.se;\n\t\tsm[x.fi]=sm[u]*bas+node(x.se,x.se);\n\t\tfa[x.fi][0]=u,dep[x.fi]=dep[u]+1,dfs1(x.fi);\n\t}\n}\ninline int Lca(int u,int v){\n\tif(dep[u]<dep[v])swap(u,v);\n\tfor(int i=18;~i;i--)if(dep[fa[u][i]]>=dep[v])u=fa[u][i];\n\tif(u==v)return u;\n\tfor(int i=18;~i;i--)if(fa[u][i]!=fa[v][i])u=fa[u][i],v=fa[v][i];\n\treturn fa[u][0];\n}\ninline int find(int u,int k){\n\tfor(int i=18;~i;i--)if(k&(1<<i))u=fa[u][i];\n\treturn u;\n}\nint ans[N];\nstruct ask{\n\tint p,id,kd,coef;\n};\nvector<ask> q[N];\nvoid dfs2(int u,int nd0,int nd1){\n\tt[0].update(nd0,1),t[1].update(nd1,1);\n\tfor(cs ask &x:q[u]){\n\t\tans[x.id]+=x.coef*t[x.kd].query(x.p);\n\t}\n\tfor(cs pii &x:e[u])if(x.fi!=fa[u][0]){\n\t\tdfs2(x.fi,t[0].go(nd0,x.se),t[1].go(nd1,x.se));\n\t}\n\tt[0].update(nd0,-1),t[1].update(nd1,-1);\n}\nint buc[N];\nstruct arr{\n\tint s,t,del;\n};\nstruct Kmp{\n\tint *del,*nxt,*be,n;\n\tinline void build(char *s,int len){\n\t\tnxt=new int [len+2]();\n\t\tdel=new int [len+2]();\n\t\tbe=new int [len+2]();\n\t\tdel[1]=1,be[1]=1;\n\t\tfor(int i=0,j=2;j<=len;j++){\n\t\t\twhile(i&&s[i+1]!=s[j])i=nxt[i];\n\t\t\tif(s[i+1]==s[j])i++;\n\t\t\tnxt[j]=i,del[j]=j-i;\n\t\t\tbe[j]=(del[j]==del[i])?be[i]:j;\n\t\t}\n\t}\n\tinline void get(int p,int len,arr *ret,int &num)cs{\n\t\tfor(;p>len;p=nxt[p]);\n\t\twhile(p>0){\n\t\t\tint s=be[p],t=p,d=del[p];\n\t\t\tret[++num]=(arr){s,t,d};\n\t\t\tp=nxt[s];\n\t\t}\n\t}\n}p1[N],p2[N];\nstruct Sa{\n\tint n,m,*a,*sa,*rk,*sa2;\n\tnode *h;\n\tinline node has(int l,int r){\n\t\treturn h[r]-h[l-1]*pw[r-l+1];\n\t}\n\tinline void Sort(){\n\t\tfor(int i=1;i<=m;i++)buc[i]=0;\n\t\tfor(int i=1;i<=n;i++)buc[rk[i]]++;\n\t\tfor(int i=1;i<=m;i++)buc[i]+=buc[i-1];\n\t\tfor(int i=n;i>=1;i--)sa[buc[rk[sa2[i]]]--]=sa2[i];\n\t}\n\tinline void build(char *s,int len){\n\t\tn=len,m=26;\n\t\ta=new int[len+2]();\n\t\tsa=new int[len+2]();\n\t\trk=new int[len+2]();\n\t\tsa2=new int[len+2]();\n\t\th=new node[len+2]();\n\t\tfor(int i=1;i<=n;i++)a[i]=s[i]-'a'+1,h[i]=h[i-1]*bas+node(a[i],a[i]);\n\t\tfor(int i=1;i<=n;i++)sa2[i]=i,rk[i]=a[i];\n\t\tSort();\n\t\tfor(int i=1,pos=0;i<=n&&pos<n;i<<=1){\n\t\t\tpos=0;\n\t\t\tfor(int j=n-i+1;j<=n;j++)sa2[++pos]=j;\n\t\t\tfor(int j=1;j<=n;j++)if(sa[j]>i)sa2[++pos]=sa[j]-i;\n\t\t\tSort();\n\t\t\tswap(rk,sa2);\n\t\t\tpos=1,rk[sa[1]]=1;\n\t\t\tfor(int j=2;j<=n;j++)\n\t\t\trk[sa[j]]=(sa2[sa[j]]==sa2[sa[j-1]]&&sa2[sa[j]+i]==sa2[sa[j-1]+i])?pos:++pos;\n\t\t\tm=pos;\n\t\t}\n\t}\n\tinline int lcp(int p,int u,int lca){\n\t\tif(u==lca)return 0;\n\t\tp=sa[p];int len=n-p+1;\n\t\t//if same return else find the lowest dif one\n\t\tif(len>=dep[u]-dep[lca]&&thas(u,lca)==has(p,p+dep[u]-dep[lca]-1))return dep[u]-dep[lca];\n\t\tfor(int i=18;~i;i--)if(dep[u]-dep[lca]>(1<<i)){\n\t\t\tif(len<(dep[fa[u][i]]-dep[lca])||(thas(fa[u][i],lca)!=has(p,p+dep[fa[u][i]]-dep[lca]-1)))\n\t\t\tu=fa[u][i];\n\t\t}u=fa[u][0];\n\t\treturn dep[u]-dep[lca];\n\t}\n\tinline bool check(int mid,int u,int lca){\n\t\tint l=lcp(mid,u,lca);\n\t\tif(l==n-sa[mid]+1)return 1;\n\t\tif(l==dep[u]-dep[lca])return 0;\n\t\treturn vf[find(u,dep[u]-dep[lca]-l-1)]>a[sa[mid]+l];\n\t}\n\tinline void calc(int u,int lca,cs Kmp &kp,arr *ret,int &num){\n\t\tint l=1,r=n,res=0;\n\t\twhile(l<=r){\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(check(mid,u,lca))res=mid,l=mid+1;\n\t\t\telse r=mid-1;\n\t\t}num=0;\n\t\tif(!res)return;\n\t\tint len=lcp(res,u,lca);\n\t\tint p=n-sa[res]+1;\n\t\tkp.get(p,len,ret,num);\n\t}\n}s1[N],s2[N];\nnamespace chain{\n\tarr v1[61],v2[61];\n\tint cnt1,cnt2;\n\tinline int exgcd(int a,int b,int &x,int &y){\n\t\tif(!b){x=1,y=0;return a;}\n\t\tint t=exgcd(b,a%b,y,x);\n\t\ty-=a/b*x;return t;\n\t}\n\tinline int calc(int a,int b,int la,int lb,int k){\n\t\tint x,y;int d=exgcd(a,b,x,y);\n\t\tif(k%d!=0)return 0;\n\t\tx*=k/d,y*=k/d;\n\t\tint db=b/d,da=a/d,mx=x%db;\n\t\tif(mx<0)mx+=db;\n\t\ty+=((x-mx)/db)*da,x=mx;\n\t\tif(y<0)return 0;\n\t\tif(y>lb){\n\t\t\tint ti=(y-lb-1)/da+1;\n\t\t\ty-=ti*da,x+=ti*db;\n\t\t}\n\t\tif(x>la||x<0||y>lb||y<0)return 0;\n\t\treturn min((la-x)/db+1,y/da+1);\n\t}\n\tinline int solve(arr x,arr y,int len){\n\t\treturn calc(x.del,y.del,(x.t-x.s)/x.del,(y.t-y.s)/y.del,len-x.s-y.s);\n\t}\n\tinline void solve(int tt,int id,int u,int v,int lca){\n\t\ts2[id].calc(u,lca,p1[id],v1,cnt1);\n\t\ts1[id].calc(v,lca,p2[id],v2,cnt2);\n\t\tfor(int i=1;i<=cnt1;i++)\n\t\tfor(int j=1;j<=cnt2;j++)\n\t\tif(v1[i].s+v2[j].s<=len[id]&&v1[i].t+v2[j].t>=len[id])\n\t\tans[tt]+=solve(v1[i],v2[j],len[id]);\n\t}\n}\nint n,m,Q;\nchar str[N];\nint main(){\n\t#ifdef Stargazer\n\tfreopen(\"lx.in\",\"r\",stdin);\n\tfreopen(\"my.out\",\"w\",stdout);\n\t#endif\n\tn=read(),m=read(),Q=read();\n\tpw[0]=node(1,1);\n\tfor(int i=1;i<N;i++)pw[i]=pw[i-1]*bas;\n\tfor(int i=1;i<n;i++){\n\t\tint u=read(),v=read(),c=readchar()-'a'+1;\n\t\te[u].pb(pii(v,c)),e[v].pb(pii(u,c));\n\t}dep[1]=1,dfs1(1);\n\tfor(int i=1;i<=m;i++){\n\t\tlen[i]=readstring(str);\n\t\tt[0].insert(str,len[i],i);\n\t\ts1[i].build(str,len[i]);\n\t\tp1[i].build(str,len[i]);\n\t\treverse(str+1,str+len[i]+1);\n\t\tt[1].insert(str,len[i],i);\n\t\ts2[i].build(str,len[i]);\n\t\tp2[i].build(str,len[i]);\n\t}\n\tt[0].build(),t[1].build();\n\tfor(int i=1;i<=Q;i++){\n\t\tint u=read(),v=read(),id=read();\n\t\tint lca=Lca(u,v);\n\t\tif(dep[u]-dep[lca]>=len[id])\n\t\tq[u].pb((ask){id,i,1,1}),\n\t\tq[find(u,dep[u]-dep[lca]-len[id]+1)].pb((ask){id,i,1,-1});\n\t\tif(dep[v]-dep[lca]>=len[id])\n\t\tq[v].pb((ask){id,i,0,1}),\n\t\tq[find(v,dep[v]-dep[lca]-len[id]+1)].pb((ask){id,i,0,-1});\n\t\tchain::solve(i,id,u,v,lca);\n\t}\n\tdfs2(1,0,0);\n\tfor(int i=1;i<=Q;i++)cout<<ans[i]<<'\\n';\n\treturn 0;\n}\n```\n",
        "postTime": 1590036937,
        "uid": 94511,
        "name": "\u4e59\u6d25\u68a6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF917E \u3010Upside Down\u3011"
    },
    {
        "content": "\u4e00\u79cd\u505a\u6cd5\u662f SA + Hash\uff0c\u5176\u4ed6\u9898\u89e3\u5df2\u7ecf\u4ecb\u7ecd\u3002\u53e6\u4e00\u79cd\u662f\u6211\u770b [Itst \u7684\u4ee3\u7801](https://codeforces.com/contest/917/submission/72507193) \u5b66\u7684\uff0c\u5e7f\u4e49 SAM + \u70b9\u5206\u6cbb\u3002\u4e24\u4e2a\u505a\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u4e00\u81f4\u7684\uff0c\u53ea\u662f\u5bf9\u67d0\u4e2a\u5b50\u95ee\u9898\u7684\u5b9e\u73b0\u65b9\u5f0f\u6709\u6240\u4e0d\u540c\u3002\u6211\u91c7\u7528\u7684\u662f\u540e\u8005\uff0c\u6545\u8fd9\u91cc\u8bb2\u540e\u8005\u3002\n\n\u9996\u5148\u70b9\u5206\u6cbb\uff0c\u8003\u8651\u8de8\u8fc7\u5206\u6cbb\u91cd\u5fc3\u7684\u94fe\uff0c\u53ef\u4ee5\u5206\u4e3a\u5de6\u8fb9\u4e00\u6761\u4ece\u4e0b\u5f80\u4e0a\u7684\u94fe\uff0c\u548c\u53f3\u8fb9\u4e00\u6761\u4ece\u4e0a\u5f80\u4e0b\u7684\u94fe\u3002\n\n\u6a21\u677f\u4e32\u5b8c\u5168\u51fa\u73b0\u5728\u5176\u4e2d\u67d0\u4e00\u6761\u94fe\u7684\u60c5\u51b5\u662f\u7b80\u5355\u7684\uff0c\u53ea\u9700\u8981\u5bf9 $n$ \u4e2a\u6a21\u677f\u4e32\uff08\u53ca\u5176\u53cd\u4e32\uff09\u4e8b\u5148\u5efa\u597d ACAM\uff0c\u7136\u540e\u628a\u5f53\u524d\u7684\u5206\u6cbb\u5b50\u6811\u6309 DFS \u5e8f\u904d\u5386\uff0c\u904d\u5386\u65f6\u653e\u5230 ACAM \u4e0a\u8d70\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u8de8\u8fc7\u5206\u6cbb\u91cd\u5fc3\u7684\u5339\u914d\uff0c\u4e00\u5b9a\u662f\u5de6\u8fb9\u5339\u914d\u4e0a\u4e86 $s_k$ \u7684\u4e00\u6bb5\u524d\u7f00\uff0c\u53f3\u8fb9\u5339\u914d\u4e0a\u4e86 $s_k$ \u7684\u4e00\u6bb5\u540e\u7f00\uff0c\u4e14\u4e24\u8005\u957f\u5ea6\u52a0\u8d77\u6765\u7b49\u4e8e $|s_k|$\u3002\u5047\u8bbe\u5df2\u7ecf\u627e\u5230\u4e86 $s_k$ \u7684\u6700\u957f\u524d\u7f00 $P$\uff0c\u4f7f\u5f97\u662f\u5de6\u8fb9\u7684\u4e32\u7684\u540e\u7f00\uff0c\u90a3\u4e48\u5176\u4ed6\u53ef\u884c\u7684\u524d\u7f00\uff0c\u4e00\u5b9a\u662f $P$ \u7684 border\uff0c\u800c $P$ \u7684\u6240\u6709 border \u5c31\u662f $s_k$ \u7684 Fail \u6811\u4e0a $P$ \u7684\u6240\u6709\u7956\u5148\uff1b\u540c\u7406\u53f3\u8fb9\u53ef\u884c\u7684\u540e\u7f00\u4e5f\u662f $s_k$ \u7684\u53cd\u4e32\u7684 Fail \u6811\u4e0a\u67d0\u4e2a $Q$ \u7684\u6240\u6709\u7956\u5148\u3002\u5bf9\u4e8e\u6b63\u4e32\u7684 Fail \u6811\u4e0a\u7684\u67d0\u4e2a\u8282\u70b9\uff0c\u5728\u53cd\u4e32\u7684 Fail \u6811\u4e0a\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u4e0e\u4e4b\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u6ee1\u8db3\u4e24\u8005\u957f\u5ea6\u4e4b\u548c\u7b49\u4e8e $|s_k|$\uff0c\u4e8e\u662f\u8fd9\u5c31\u662f\u4e2a\u4e8c\u7ef4\u6570\u70b9\uff0c\u79bb\u7ebf\u540e\u5728\u4e00\u68f5\u6811\u4e0a DFS \u5e76\u7528 BIT \u7ef4\u62a4\u5373\u53ef\u3002\n\n\u73b0\u5728\u552f\u4e00\u7684\u95ee\u9898\u662f\u627e\u5230 $P$\u3002\u8fd9\u4e2a\u95ee\u9898\u62bd\u8c61\u51fa\u6765\u5c31\u662f\uff1a\u6709\u4e00\u4e2a Trie \u548c\u82e5\u5e72\u4e2a\u4e32 $s_i$\uff0c\u4ee5\u53ca\u82e5\u5e72\u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7ed9\u5b9a Trie \u4e0a\u4efb\u610f\u7684\u67d0\u4e2a\u8282\u70b9\uff0c\u8bbe\u5176\u5bf9\u5e94\u7684\u4e32\u4e3a $t$\uff0c\u627e\u5230 $t$ \u6700\u957f\u7684\u524d\u7f00 $P$\uff0c\u4f7f\u5f97 $P$ \u662f $s_k$ \u7684\u540e\u7f00\u3002\n\n\u81f3\u6b64\uff0c\u4e0e SA \u505a\u6cd5\u6ca1\u6709\u4e0d\u540c\u3002\n\n\u5bf9\u6240\u6709 $s_i$ \u5efa\u7acb\u5e7f\u4e49 SAM\uff0c\u7136\u540e\u5728 Trie \u4e0a DFS\uff0c\u5e76\u7ef4\u62a4\u4e00\u4e2a\u5728 SAM \u4e0a\u8d70\u7684\u6307\u9488\uff0c\u8fd9\u6837\u5c31\u77e5\u9053 Trie \u4e0a\u6bcf\u4e2a\u70b9\u5728 SAM \u4e2d\u5bf9\u5e94\u7684\u70b9\u662f\u8c01\u4e86\u3002\u90a3\u4e48\u5bf9\u4e8e Trie \u4e0a\u7684\u8282\u70b9 $x$\uff0c\u5176\u53ef\u80fd\u7684 $P$ \u4e00\u5b9a\u662f $x$ \u7684\u6700\u6df1\u7684\u7956\u5148 $g$\uff0c\u6ee1\u8db3 $g$ \u80fd**\u5b8c\u6574\u5730**\u88ab SAM \u4e2d\u7684\u67d0\u4e2a\u7b49\u4ef7\u7c7b $y$ \u5305\u542b\uff0c\u4e14 $y$ \u662f $s_i$ \u5728 SAM \u4e2d\u5bf9\u5e94\u7684\u8282\u70b9\u7684 parent \u6811\u4e0a\u7684\u7956\u5148\u3002\u4e8e\u662f\uff0c\u53ef\u4ee5\u5728 DFS \u7684\u8fc7\u7a0b\u4e2d\u5f80 $g$ \u6240\u5728\u7684\u7b49\u4ef7\u7c7b $y$ \u91cc\u9762\u585e\u4e00\u4e2a $dep(g)$\uff0c\u8868\u793a\u8be5\u7b49\u4ef7\u7c7b\u6709\u4e00\u4e2a\u8fd9\u6837\u7684\u5019\u9009\u7b54\u6848\uff0c\u56de\u6eaf\u65f6\u518d\u64a4\u9500\uff0c\u6bcf\u6b21\u5728 $s_i$ \u7684\u7956\u5148\u4e2d\u627e\u5230\u6700\u5927\u7684\u5019\u9009\u7b54\u6848\u3002\u89c2\u5bdf\u5230\u4e00\u4e2a\u6027\u8d28\uff0cparent \u6811\u4e0a\u7684\u70b9\u7531\u6d45\u5230\u6df1\uff0c\u5982\u679c\u6709\u5019\u9009\u7b54\u6848\uff0c\u5219\u5019\u9009\u7b54\u6848\u4f9d\u6b21\u589e\u5927\uff08\u56e0\u4e3a\u5019\u9009\u7b54\u6848\u4e00\u5b9a\u7b49\u4e8e\u7b49\u4ef7\u7c7b\u4e2d\u67d0\u4e2a\u4e32\u7684\u957f\u5ea6\uff0c\u800c\u7b49\u4ef7\u7c7b\u7684\u4e32\u957f\u662f\u9012\u589e\u7684\uff09\u3002\u4e8e\u662f\uff0c\u53ea\u9700\u8981\u627e\u5230 $s_i$ \u7684\u7956\u5148\u4e2d\u6700\u6df1\u7684\u5019\u9009\u7b54\u6848\uff08\u4e14\u6ee1\u8db3 $\\le |s_i|$\uff09\u5373\u53ef\u3002\u53ef\u4ee5\u5bf9 parent \u6811\u91cd\u94fe\u5256\u5206\uff0c\u6bcf\u6761\u91cd\u94fe\u7ef4\u62a4\u5347\u5e8f\u7684\u5019\u9009\u7b54\u6848\uff0c\u5219\u5bf9\u4e8e\u5f53\u524d\u6240\u5728\u91cd\u94fe\u53ef\u4ee5 $O(1)$ check \u662f\u5426\u6709\u53ef\u884c\u7b54\u6848\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e8c\u5206\u627e\u5230\u53ef\u884c\u7684\u7b54\u6848\u3002\u56e0\u6b64\u8fd9\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662f $O(\\log n)$ \u7684\u3002\u800c\u7531\u4e8e\u5728 trie \u4e0a DFS \u65f6 $dep(g)$ \u9012\u589e\uff0c\u6240\u4ee5\u63d2\u5165\u7684\u5019\u9009\u7b54\u6848\u4e00\u5b9a\u4e5f\u662f\u9012\u589e\u7684\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684 DS \u5904\u7406\uff0c\u90a3\u4e48\u76f4\u63a5\u7528 `vector` \u7ef4\u62a4\u5373\u53ef\u3002\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u5bf9\u6570\u3002\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u5904\u7406\u4e86\u6240\u6709\u60c5\u51b5\u3002\u7b97\u4e0a\u6700\u5916\u5c42\u7684\u70b9\u5206\u6cbb\uff0c\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\log^2 n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u5b9e\u9645\u4e0a\u628a SAM \u7a0d\u5fae\u5904\u7406\u4e00\u4e0b\u5c31\u53ef\u4ee5\u5f53\u505a ACAM \u7528\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u989d\u5916\u5199\u4e2a ACAM\u3002\n\n[\u4ee3\u7801](https://codeforces.com/contest/917/submission/193704295)\n\n",
        "postTime": 1676463431,
        "uid": 138041,
        "name": "cyh_toby",
        "ccfLevel": 9,
        "title": "CF917E Upside Down"
    }
]