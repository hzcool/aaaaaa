[
    {
        "content": "## \u9898\u610f\u5206\u6790\n\u76ee\u524d\u8fd9\u9053\u9898\u56e0\u4e3a\u4e00\u4e9b\u9898\u76ee\u6570\u636e\u4e0a\u7684\u9505\u5bfc\u81f4\u90fd\u662fUKE\uff0cCF \u4e0a A \u4e86\u5c31\u884c\u3002\n\u9898\u76ee\u7ffb\u8bd1\u6211\u4ea4\u4e86\u6b63\u5728\u7b49\u5f85\u5ba1\u6838\u3002\n## \u505a\u6cd5\u5206\u6790\n\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u8fd9 $q$ \u4e2a\u64cd\u4f5c\u5982\u4f55\u5f71\u54cd\u4f60\u7684\u751f\u6b7b\u3002\u5047\u8bbe\u7b2c $x$ \u5e74\u5e74\u5e95\u4f1a\u6b7b\u6389 $k$ \u4e2a\u4eba\uff0c\u7ed3\u679c\uff0c\u5de7\u7684\u5f88\uff0c\u7b2c $x-1$ \u5e74\u65b0\u52a0\u5165\u7684\u90a3\u4e9b\u5458\u5de5\u4e2d\u6709\u4e00\u4e2a\u7684\u80fd\u529b\u503c\u88ab\u4fee\u6539\u7684\u7279\u522b\u5927\uff0c\u6392\u5e8f\u540e\u8dd1\u5230\u4f60\u524d\u9762\u53bb\u4e86\uff0c\u597d\u5bb6\u4f19\uff0c\u7136\u540e\u4f60\u5c31\u88ab\u6dd8\u6c70\u4e86\uff08\u7b11\u6b7b\uff09\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 $sum$\uff0c$sum_i$ \u8868\u793a\u7b2c $i$ \u5e74\u4e4b\u540e\u6709\u8fd9\u4e48\u591a\u7684\u4eba\u7684\u80fd\u529b\u503c\u5c0f\u4e8e\u4f60\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u67d0\u4e2a\u65f6\u523b $sum_i<0$\uff0c\u606d\u559c\u4f60\uff0c\u6e38\u620f\u7ed3\u675f\u4e86\uff0c\u53bb\u4e0a\u4e2a\u5395\u6240\u5427\u3002\n\n\u5982\u4f55\u7ef4\u62a4 $sum$\uff1f\u6bcf\u6b21\u64cd\u4f5c\u5bf9 $sum$ \u6709\u4ec0\u4e48\u5f71\u54cd\uff1f\u5148\u56de\u7b54\u7b2c\u4e00\u4e2a\u95ee\u9898\u3002\n\n\u6bcf\u5e74\u65b0\u52a0\u5165\u5458\u5de5\uff0c\u6bd4\u5982\u65b0\u52a0\u5165\u4e86 $r$ \u4e2a\u5458\u5de5\u5176\u4e2d\u6709 $k$ \u4e2a\u7684\u80fd\u529b\u503c\u6bd4\u4f60\u4f4e\uff08\u563f\u563f~\uff01\uff09\uff0c\u4f46\u662f\u4eca\u5e74\u5e74\u5e95\u8981\u6dd8\u6c70 $num$ \u4e2a\u4eba\uff0c\u6240\u4ee5\u663e\u7136 $sum_i=sum_{i-1}+k-num$\u3002\u8fd9\u5c31\u662f\u7b2c\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u3002\n\n\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u60f3\uff0c\u5982\u679c\u88ab\u4fee\u6539\u7684\u90a3\u4e2a\u4eba\uff0c\u4ed6\u88ab\u4fee\u6539\u524d\u6bd4\u4f60\u5f3a\uff0c\u597d\u5bb6\u4f19\uff0c\u6539\u5b8c\u4e4b\u540e\u6bd4\u4f60\u5f31\u4e86\uff0c\u90a3\u4e48\u663e\u7136\u90a3\u4e00\u5e74\u7684 $sum$ \u5c31\u8981\u52a0\u4e00\u3002\u540c\u7406\u53cd\u4e4b\uff0c\u51cf\u4e00\u3002\n\n\u6700\u540e\u7684\u95ee\u9898\u662f\u600e\u4e48\u7edf\u8ba1\u7b54\u6848\uff0c\u663e\u7136\u5982\u679c\u8fd9 $m$ \u4e2a $sum_i$ \u6709\u4efb\u4f55\u4e00\u4e2a\u5c0f\u4e8e $0$ \u5c31\u4e0d\u884c\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u52a8\u6001\u7ef4\u62a4 $sum$ \u6570\u7ec4\u7684\u6700\u5c0f\u503c\uff0c\u54d7\u5566\u5566\uff0c\u7ebf\u6bb5\u6811\u51fa\u573a\u4e86\u3002\u975e\u5e38\u57fa\u672c\u7684\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4 $sum$ \u6570\u7ec4\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u7ec6\u8282\u8be6\u89c1\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+5;\nstruct SegTree\n{\n    int l,r;\n    int minx,tag;\n}t[N<<2];\nint n,m,q,lst;\nint sum[N],a[N];\nvector<int> change[N];\nint read()\n{\n    int x=0,f=1;\n    char c=getchar();\n    while (c<'0'||c>'9')\n    {\n        if(c=='-') f=-1;\n        c=getchar();\n    }\n    while (c>='0'&&c<='9')\n    {\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    return x*f;\n}\nvoid BuildTree(int p,int l,int r)\n{\n    t[p].l=l,t[p].r=r;\n    if(l==r)\n    {\n        t[p].minx=sum[l];\n        return ;\n    }\n    int mid=(l+r)>>1;\n    BuildTree(p<<1,l,mid);\n    BuildTree(p<<1|1,mid+1,r);\n    t[p].minx=min(t[p<<1].minx,t[p<<1|1].minx);\n}\nvoid pushdown(int p)\n{\n    if(t[p].tag)\n    {\n        t[p<<1].tag+=t[p].tag;\n        t[p<<1].minx+=t[p].tag;\n\n        t[p<<1|1].tag+=t[p].tag;\n        t[p<<1|1].minx+=t[p].tag;\n\n        t[p].tag=0;\n    }\n}\nvoid Modify(int p,int l,int r,int d)\n{\n    if(l>r || t[p].r<l || t[p].l>r) return ;\n    if(l<=t[p].l && t[p].r<=r)\n    {\n        t[p].minx+=d;\n        t[p].tag+=d;\n        return ;\n    }\n    int mid=(t[p].l+t[p].r)>>1;\n    pushdown(p);\n    if(l<=mid) Modify(p<<1,l,r,d);\n    if(mid<r) Modify(p<<1|1,l,r,d);\n    t[p].minx=min(t[p<<1].minx,t[p<<1|1].minx);\n}\nint main()\n{\n    n=read(),m=read(),q=read();\n    for(int i=1;i<=n;i++) \n    {\n        a[i]=read();\n        if(a[i]<a[1]) sum[0]++;\n    }\n    lst=0;\n    for(int i=1;i<=m;i++)\n    {\n        int x=read();\n        sum[i]=sum[i-1]+lst-x;\n        lst=0;\n        change[i].push_back(-1);\n        for(int j=1;j<=x;j++) {int y=read();change[i].push_back(y);if(y<a[1]) lst++;}\n    }\n    BuildTree(1,1,m);\n    while (q--)\n    {\n        int x=read(),y=read(),z=read();\n        if(change[x][y]>a[1] && z<a[1]) Modify(1,x+1,m,1);\n        if(change[x][y]<a[1] && z>a[1]) Modify(1,x+1,m,-1);\n        change[x][y]=z;\n        if(t[1].minx<0) cout<<0<<endl;\n        else cout<<1<<endl;\n    }\n    return 0;\n}\n```\n\u601d\u8def\u53c2\u8003\uff1ahttps://blog.csdn.net/qq_45458915/article/details/108416662",
        "postTime": 1620819071,
        "uid": 517444,
        "name": "AladV",
        "ccfLevel": 0,
        "title": "CF1252G"
    }
]