[
    {
        "content": "\u9996\u5148\u975e\u5e38\u660e\u663e\u7684\u4e00\u70b9\u662f\uff0c\u6839\u636e\u6bcf\u4e2a\u70b9\u5230\u5173\u952e\u70b9\u7684\u8ddd\u79bb\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6bcf\u4e2a\u5173\u952e\u70b9\u5177\u4f53\u662f\u4ec0\u4e48\u2014\u2014\u56e0\u4e3a\u5b83\u5c31\u662f\u5230\u8be5\u5173\u952e\u70b9\u8ddd\u79bb\u4e3a $0$ \u7684\u70b9\u3002\u5f53\u7136\u5982\u679c\u8fd9\u6837\u7684\u70b9\u4e0d\u552f\u4e00\u54b1\u5c31\u76f4\u63a5\u8f93\u51fa $-1$ \u5373\u53ef\u3002\u5728\u4e0b\u6587\u4e2d\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\u6211\u4eec\u79f0\u8fd9\u4e9b\u5173\u952e\u70b9\u4e3a $p_1,p_2,\\cdots,p_k$\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u5c06\u6811\u6839\u5b9a\u5728\u4ee5 $p_1$\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u8981\u786e\u5b9a\u4e86\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a\u6574\u68f5\u6811\u3002\u4e0b\u9762\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u662f\u627e\u5230\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2\uff0c\u4e00\u4e2a trivial \u7684 observation \u662f\uff0c\u5bf9\u4e8e $p_1,p_2,\\cdots,p_k$ **\u6784\u6210\u7684\u865a\u6811\u4e0a\u7684\u6240\u6709\u70b9**\uff0c\u5b83\u4eec\u7684\u7236\u4eb2\u662f\u5f88\u5bb9\u6613\u786e\u5b9a\u7684\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a $p_i$\uff0c$p_1\\to p_i$ \u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7ec4\u6210\u7684\u96c6\u5408\u7b49\u4e8e $\\{x|d_{1,x}+d_{i,x}=d_{1,p_i}\\}$\uff0c\u8fd9\u4e2a\u904d\u5386\u4e00\u904d\u5373\u53ef\u6c42\u5f97\uff0c\u53c8\u663e\u7136\u8fd9\u4e9b\u70b9\u7684 $d_{1,x}$ \u4e92\u4e0d\u76f8\u540c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u83b7\u53d6\u8fd9\u4e9b\u8282\u70b9\u7684\u7236\u5b50\u5173\u7cfb\u2014\u2014\u5f53\u7136\uff0c\u5982\u679c\u8fd9\u5176\u4e2d\u7684\u7236\u5b50\u5173\u7cfb\u51fa\u73b0\u51b2\u7a81\uff0c\u6211\u4eec\u9700\u8f93\u51fa $-1$\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u94a6\u5b9a\u5269\u4f59\u7684\u70b9\uff0c\u663e\u7136\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u5728\u865a\u6811\u4e0a\u7684\u70b9 $x$\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u8fd9\u4e2a\u70b9\u5230\u6839\u8def\u5f84\u4e0a\u6df1\u5ea6\u6700\u6df1\u7684\u4e14\u5728\u865a\u6811\u4e0a\u7684\u70b9 $pt_x$\uff0c\u8fd9\u4e2a\u5c31\u679a\u4e3e\u6240\u6709\u5173\u952e\u70b9 $i$\uff0c\u7136\u540e\u6839\u636e $d_{1,x}+d_{1,p_i}-2d_{1,\\text{LCA}(p_i,x)}=d_{i,x}$ \u5f97\u5230\u5b83\u4eec LCA \u7684\u6df1\u5ea6\uff0c\u8fdb\u800c\u77e5\u9053\u5b83\u4eec\u7684 LCA \u662f\u8c01\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684 $pt_x$ \u5c31\u662f\u6240\u6709 LCA \u4e2d\u6df1\u5ea6\u6700\u6df1\u7684\u3002\n\n\u6211\u4eec\u8003\u8651\u628a\u6240\u6709\u4e0d\u5728\u865a\u6811\u4e0a\u7684\u70b9 $x$ \u90fd\u5b58\u5728 $pt_x$ \u7684 `vector` \u91cc\uff0c\u7136\u540e\u904d\u5386\u865a\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5c06\u5176 `vector` \u4e2d\u7684\u70b9\u6309\u6df1\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u8003\u8651\u8fd9\u4e9b\u70b9\u7684\u6df1\u5ea6\u7684\u6bcf\u4e00\u4e2a\u8fde\u7eed\u6bb5\uff0c\u5982\u679c\u76f8\u90bb\u4e24\u4e2a\u8fde\u7eed\u6bb5\u4e2d\u70b9\u7684\u6df1\u5ea6\u76f8\u5dee\u8d85\u8fc7 $1$ \u90a3\u4e48\u7b54\u6848\u662f $-1$\uff0c\u5426\u5219\u6211\u4eec\u628a\u8fd9\u4e00\u8fde\u7eed\u6bb5\u4e2d\u7684\u70b9\u6302\u5728\u4e0a\u4e00\u8fde\u7eed\u6bb5\u4e2d\u4efb\u610f\u4e00\u4e2a\u70b9\u4e0b\u9762\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $nk\\log n$\u3002\n\n~~\u4e0d\u8fc7 u1s1 \u8fd9\u9053\u9898\u7684\u6570\u636e\u597d\u50cf\u9664\u4e86 test2 \u6ca1\u6709 $-1$ \u7684\u70b9\uff0c\u6240\u4ee5 $-1$ \u7684\u60c5\u51b5\u4f60\u60f3\u548b\u5224\u5c31\u548b\u5224\u53cd\u6b63 test2 \u90a3\u4e48\u5f31\u4e5f\u4e0d\u592a\u53ef\u80fd WA\uff08\u5927\u96fe\uff0c/xyx~~\n\n```cpp\nusing namespace fastio;\nconst int MAXK=200;\nconst int MAXN=3e4;\nint n,k,d[MAXK+5][MAXN+5],p[MAXK+5],fa[MAXN+5],anc[MAXK+5][MAXN+5];\nvoid setfa(int x,int f){if(fa[x]&&fa[x]!=f) puts(\"-1\"),exit(0);fa[x]=f;}\nbool vis[MAXN+5];vector<pii> bel[MAXN+5];int f[MAXN+5];\nint find(int x){return (!f[x])?x:f[x]=find(f[x]);}\nbool merge(int x,int y){x=find(x);y=find(y);return (x==y)?0:(f[x]=y,1);}\nint hd[MAXN+5],to[MAXN*2+5],nxt[MAXN*2+5],ec=0;\nvoid adde(int u,int v){to[++ec]=v;nxt[ec]=hd[u];hd[u]=ec;}\nint dep[MAXN+5];\nvoid dfs(int x,int f,int *dep){\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e];if(y==f) continue;\n\t\tdep[y]=dep[x]+1;dfs(y,x,dep);\n\t}\n}\nint main(){\n\tread(n);read(k);\n\tfor(int i=1;i<=k;i++){\n\t\tfor(int j=1;j<=n;j++) read(d[i][j]);\n\t\tvector<int> pt;\n\t\tfor(int j=1;j<=n;j++) if(!d[i][j]) pt.pb(j);\n\t\tif(pt.size()!=1) return puts(\"-1\"),0;\n\t\tp[i]=pt[0];\n\t} anc[1][0]=p[1];\n\tfor(int i=2;i<=k;i++){\n\t\tvector<pii> vec;\n\t\tfor(int j=1;j<=n;j++) if(d[i][j]+d[1][j]==d[1][p[i]])\n\t\t\tvec.pb(mp(d[1][j],j));\n\t\tsort(vec.begin(),vec.end());\n\t\tfor(int j=0;j<vec.size();j++) if(vec[j].fi!=j) return puts(\"-1\"),0;\n\t\tfor(int j=1;j<vec.size();j++) setfa(vec[j].se,vec[j-1].se);\n\t\tfor(int j=0;j<vec.size();j++) anc[i][j]=vec[j].se,vis[vec[j].se]=1;\n\t} vis[p[1]]=1;\n\tfor(int i=1;i<=n;i++) if(!vis[i]){\n\t\tvector<pii> lca_s;\n\t\tfor(int j=1;j<=k;j++){\n\t\t\tint dis=d[1][p[j]]+d[1][i]-d[j][i];\n\t\t\tif(dis&1) return puts(\"-1\"),0;\n\t\t\tdis>>=1;lca_s.pb(mp(dis,anc[j][dis]));\n\t\t} sort(lca_s.begin(),lca_s.end());\n\t\tfor(int j=1;j<lca_s.size();j++){\n\t\t\tif(lca_s[j].fi==lca_s[j-1].fi&&lca_s[j].se!=lca_s[j-1].se)\n\t\t\t\treturn puts(\"-1\"),0;\n\t\t} //printf(\"%d %d\\n\",i,lca_s.back().se);\n\t\tbel[lca_s.back().se].pb(mp(d[1][i],i));\n\t}\n\tfor(int i=1;i<=n;i++) if(!bel[i].empty()){\n\t\tsort(bel[i].begin(),bel[i].end());\n\t\tint pre=d[1][i],prep=i;\n\t\tfor(int l=0,r=0;l<bel[i].size();l=r){\n\t\t\tr=l;while(r<bel[i].size()&&bel[i][r].fi==bel[i][l].fi) ++r;\n\t\t\tif(bel[i][l].fi!=pre+1) return puts(\"-1\"),0;\n\t\t\tfor(int j=l;j<r;j++) setfa(bel[i][j].se,prep);\n\t\t\tpre=bel[i][l].fi;prep=bel[i][l].se;\n\t\t}\n\t}\n//\tfor(int i=1;i<=n;i++) if(i!=p[1]) printf(\"%d %d\\n\",i,fa[i]);\n\tfor(int i=1;i<=n;i++) if(i!=p[1]){\n\t\tif(!merge(i,fa[i])) return puts(\"-1\"),0;\n\t\tadde(i,fa[i]);adde(fa[i],i);\n\t}\n\tfor(int i=1;i<=k;i++){ \n\t\tmemset(dep,0,sizeof(dep));dfs(p[i],0,dep);\n\t\tfor(int j=1;j<=n;j++) if(d[i][j]!=dep[j])\n\t\t\treturn puts(\"-1\"),0;\n\t}\n\tfor(int i=1;i<=n;i++) if(i!=p[1]) printf(\"%d %d\\n\",fa[i],i);\n\treturn 0;\n}\n/*\n10 3\n0 1 1 2 2 2 2 3 3 3\n2 1 3 2 0 4 4 5 5 1\n3 4 2 5 5 3 1 0 2 6\n*/\n```",
        "postTime": 1636730803,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF871E Restore the Tree"
    }
]