[
    {
        "content": "### \u601d\u8def\n\n\u8003\u8651\u7b54\u6848\u7684\u4e24\u79cd\u63cf\u8ff0\uff1a\n* $t_1$ \u7684\u53f6\u5230\u6839\u7684\u8def\u5f84\uff0c\u4e0e $t_2$ \u7684\u7956\u5148\u5f80\u53f6\u7684\u8def\u5f84\u76f8\u7b49\u3002\n* $t_1$ \u7684\u6839\u5230\u53f6\u7684\u8def\u5f84\uff0c\u4e0e $t_2$ \u7684\u53f6\u5f80\u4e0a\u7684\u8def\u5f84\u76f8\u7b49\u3002\n\n\u7b2c\u4e8c\u79cd\u4fe1\u606f\u66f4\u597d\u7ef4\u62a4\uff0c\u8003\u8651\u6309\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u8ba1\u7b97\u7b54\u6848\u3002\n\n\u5148\u5047\u8bbe $t_2$ \u4e00\u5f00\u59cb\u7ed9\u5b9a\uff0c\u4e0d\u4f1a\u4fee\u6539\u3002\n\n\u6211\u4eec\u8003\u8651\u52a0 $t_1$ \u4e2d\u53f6\u5b50\u7684\u64cd\u4f5c\uff0c\u5982\u4f55\u5feb\u901f\u67e5\u8be2\u7b54\u6848\u53d8\u5316\u91cf\u3002\n\n\u5bf9 $t_2$ \u505a[\u6811\u4e0a\u540e\u7f00\u6392\u5e8f](https://www.luogu.com.cn/problem/P5353)\uff0c\u67e5\u8be2\u64cd\u4f5c\u53ef\u4ee5\u63cf\u8ff0\u4e3a\u5728\u540e\u7f00\u6570\u7ec4\u4e0a\u67e5\u627e\u4e00\u6bb5\u5408\u6cd5\u7684\u533a\u95f4\u3002\n\n\u518d\u8003\u8651\u4e0a\u52a0 $t_2$ \u53f6\u5b50\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u628a\u64cd\u4f5c\u79bb\u7ebf\u3002\n\n\u7136\u540e\u6211\u4eec\u628a\u6bcf\u6b21\u7684\u52a0 $t_1$ \u53f6\u5b50\u64cd\u4f5c\u5e26\u6765\u7684\u8d21\u732e\u5206\u4e3a\u4e24\u7c7b\u3002\n1. \u5176\u52a0\u5165\u65f6\u5e26\u6765\u7684\u8d21\u732e\u3002\n2. \u5176\u5bf9\u672a\u6765\u7684\u8d21\u732e\u3002\n\n\u5176\u52a0\u5165\u65f6\u7684\u8d21\u732e\u53ef\u4ee5\u5728\u540e\u7f00\u6570\u7ec4\u4e0a\u4e8c\u5206\u627e\u5230\u5408\u6cd5\u533a\u95f4\uff0c\u67e5\u8be2\u5176\u4e2d\u65f6\u95f4\u6233\u4e0d\u5927\u4e8e\u63d2\u5165\u65f6\u95f4\u7684\u6570\u7684\u4e2a\u6570\uff1b\u540c\u65f6\u7ed9\u533a\u95f4\u6253\u4e0a \u201c\u5f53\u533a\u95f4\u5185\u52a0\u5165\u65b0\u8282\u70b9\u65f6\uff0c\u5bf9\u7b54\u6848\u6574\u4f53\u52a0 $1$\u201d \u7684\u6807\u8bb0\u3002\n\n\u8fd9\u4e2a\u53ef\u4ee5\u7528 BIT \u7ef4\u62a4\u3002\n\n\u4e8e\u662f\u6838\u5fc3\u95ee\u9898\u5728\u4e8e\uff1a\u5982\u4f55\u4e8c\u5206\uff1f\n\n\u6ce8\u610f\u5230\u5176\u4e8c\u5206\u7684\u5de6\u53f3\u7aef\u70b9\u5747\u4e0d\u5927\u4e8e\u7236\u4eb2\uff0c\u6211\u4eec\u53ea\u7528\u8003\u8651\u65b0\u7684\u4e00\u4f4d\u5e26\u6765\u7684\u8d21\u732e\u3002\n\n\u8fd9\u4e2a\u4e1c\u897f\u5c31\u5bb9\u6613\u4e8c\u5206\u4e86\uff1b\u67e5\u627e\u533a\u95f4\u5185\u5411\u4e0a\u4e3a\u67d0\u4f4d\u7684\u65b9\u6848\u6570\uff0c\u53ef\u4ee5\u7528\u6811\u4e0a $k$ \u7ea7\u7956\u5148\u7684\u65b9\u6cd5\u5feb\u901f\u67e5\u8be2\u3002\n\n\u4e0d\u8fc7\u5982\u679c\u7528\u6811\u5256\u5b9e\u73b0 $k$ \u7ea7\u7956\u5148\uff0c\u5e38\u6570\u4f1a\u5f88\u5c0f\uff0c\u6bd4 $O(1)$ \u7684\u957f\u5256\u8fd8\u8981\u5feb\u4e9b\u3002\n\n\u56e0\u6b64\u6838\u5fc3\u95ee\u9898\u5728\u4e8e\u6811\u4e0a\u540e\u7f00\u6392\u5e8f\uff0c\u8fd9\u4e2a\u53ef\u80fd\u4f1a\u6076\u5fc3\u4e00\u70b9\u3002\n\n\u5982\u679c\u7528\u540e\u7f00\u5e73\u8861\u6811\u5b9e\u73b0\u4f1a\u5f88\u96be\u5199\uff08\u8981\u624b\u5199\u66ff\u7f6a\u7f8a\u6811\uff09\uff0c\u800c\u4e14\u4e00\u4e2a\u4e0d\u5de7\u5c31\u7206 `double` \u7cbe\u5ea6\u4e86\u3002\n\n\u76f4\u63a5\u5199\u500d\u589e\u6cd5\uff0c\u5373\u53ef\u5728 $O(n\\log n)$ \u65f6\u95f4\u5185\u79bb\u7ebf\u5efa\u51fa\u6811\u4e0a\u540e\u7f00\u6570\u7ec4\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(n\\log n)$ \u6216 $O(n\\log^2n)$\uff0c\u74f6\u9888\u5728\u4e8c\u5206\u3002\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\uff0c\u4e14\u4e0e\u5b57\u7b26\u96c6\u65e0\u5173\u3002\n\n\uff08\u542c\u8bf4\u6709\u9ad8\u660e\u54c8\u5e0c\u505a\u6cd5\u4e0e\u9ad8\u660e\u5e7f\u4e49 SAM \u505a\u6cd5\uff09\n\n\n### Code\n\n\u8fd9\u4e2a\u80fd\u505a\u5230 $n_1,n_2\\le300000$ \u7684\u60c5\u51b5\u3002\n\n```cpp\nuint FathA[300005],FathB[300005],SA[300005],Rank[300005],tp1,tp2;\nchr C_A[300005],C_B[300005];\nvoi build(){\n    static uint Fath[300005],Fath2[300005];\n    uint n=tp2;for(uint i=0;i<n;i++)Fath[i]=FathB[i],SA[i]=i;\n    std::sort(SA,SA+n,[&](uint a,uint b){return C_B[a]<C_B[b];});\n    for(uint i=0;i<n;i++)Rank[SA[i]]=i&&C_B[SA[i]]==C_B[SA[i-1]]?Rank[SA[i-1]]:i;\n    for(uint len=1;len<n;len<<=1){\n        static std::pair<uint,uint>W[300005];\n        bol ok=true;\n        for(uint i=0;i<n;i++){\n            W[i]={Rank[i],~Fath[i]?Rank[Fath[i]]+1:0u};\n            if(~Fath[i])Fath2[i]=Fath[Fath[i]],ok=false;\n            else Fath2[i]=Fath[i];\n        }\n        for(uint i=0;i<n;i++)Fath[i]=Fath2[i];\n        if(ok)break;\n        static uint Cnt[300005];\n        for(uint i=0;i<=n;i++)Cnt[i]=0;\n        for(uint i=0;i<n;i++)Cnt[W[i].second]++;\n        for(uint i=1;i<=n;i++)Cnt[i]+=Cnt[i-1];\n        for(uint i=n-1;~i;i--)Rank[--Cnt[W[i].second]]=i;\n        for(uint i=0;i<n;i++)Cnt[i]=0;\n        for(uint i=0;i<n;i++)Cnt[W[i].first]++;\n        for(uint i=1;i<n;i++)Cnt[i]+=Cnt[i-1];\n        for(uint i=n-1;~i;i--)SA[--Cnt[W[Rank[i]].first]]=Rank[i];\n        for(uint i=0;i<n;i++)Rank[SA[i]]=i&&W[SA[i]]==W[SA[i-1]]?Rank[SA[i-1]]:i;\n    }\n    for(uint i=0;i<n;i++)SA[i]=i;\n    std::sort(SA,SA+n,[&](uint a,uint b){return Rank[a]<Rank[b];});\n    for(uint i=0;i<n;i++)Rank[SA[i]]=i;\n}\nuint Siz[300005],Heavy[300005],Dep[300005],Rot[300005],Dfn[300005],Back[300005];\nvoi build2(){\n    static std::vector<uint>Son[300005];\n    static uint Fath[300005],Cur[300005];\n    uint n=tp2;\n    for(uint i=0;i<n;i++)Fath[i]=FathB[i],Heavy[i]=Rot[i]=Cur[i]=-1,Siz[i]=1;\n    for(uint i=1;i<n;i++)Dep[i]=Dep[Fath[i]]+1,Son[Fath[i]].push_back(i);\n    for(uint i=n-1;i;i--){\n        if(!~Heavy[Fath[i]]||Siz[Heavy[Fath[i]]]<Siz[i])Heavy[Fath[i]]=i;\n        Siz[Fath[i]]+=Siz[i];\n    }\n    std::vector<uint>P{0};uint cnt=0;\n    while(P.size()){\n        uint p=P.back();\n        if(!~Rot[p])Rot[p]=p;\n        if(!~Cur[p]){\n            Cur[p]=0,Back[Dfn[p]=cnt++]=p;\n            if(~Heavy[p]){Rot[Heavy[p]]=Rot[p],P.push_back(Heavy[p]);continue;}\n        }\n        while(Cur[p]<Son[p].size()&&Son[p][Cur[p]]==Heavy[p])Cur[p]++;\n        if(Cur[p]==Son[p].size()){P.pop_back();continue;}\n        P.push_back(Son[p][Cur[p]++]);\n    }\n}\nchr kthFath(uint p,uint d){\n    if(d>=Dep[p])return'\\0';\n    while(Dfn[p]-Dfn[Rot[p]]<d)d-=Dfn[p]-Dfn[Rot[p]]+1,p=FathB[Rot[p]];\n    return C_B[Back[Dfn[p]-d]];\n}\nuint L[300005],R[300005];\nvoi build3(){\n    static uint Dep[300005];\n    L[0]=0,R[0]=tp2,Dep[0]=-1;\n    for(uint p=1;p<tp1;p++){\n        Dep[p]=Dep[FathA[p]]+1;\n        uint l=L[FathA[p]],r=R[FathA[p]];\n        while(l<r){\n            uint mid=(l+r)>>1;\n            if(kthFath(SA[mid],Dep[p])>=C_A[p])r=mid;else l=mid+1;\n        }\n        L[p]=l;\n        r=R[FathA[p]];\n        while(l<r){\n            uint mid=(l+r)>>1;\n            if(kthFath(SA[mid],Dep[p])>C_A[p])r=mid;else l=mid+1;\n        }\n        R[p]=l;\n    }\n}\nnamespace BIT1{\n    const uint Lim=400000;\n    ullt B[Lim+5];\n    voi add(uint p,ullt v){\n        p++;while(p<=Lim)B[p]+=v,p+=lowbit(p);\n    }\n    ullt find(uint l,uint r){\n        ullt ans=0;\n        while(r)ans+=B[r],r-=lowbit(r);\n        while(l)ans-=B[l],l-=lowbit(l);\n        return ans;\n    }\n}\nnamespace BIT2{\n    const uint Lim=400000;\n    ullt B[Lim+5];\n    voi add(uint l,uint r,ullt v){\n        l++,r++;\n        while(l<=Lim)B[l]+=v,l+=lowbit(l);\n        while(r<=Lim)B[r]-=v,r+=lowbit(r);\n    }\n    ullt find(uint p){\n        p++;\n        ullt ans=0;\n        while(p)ans+=B[p],p-=lowbit(p);\n        return ans;\n    }\n}\nuint Op[600005];ullt Ans[600006];\nint main()\n{\n    uint q;scanf(\"%u\",&q);Op[0]=1,Op[1]=2,tp1=tp2=1,q+=2,FathA[0]=FathB[0]=-1;\n    for(uint i=2;i<q;i++){\n        scanf(\"%u\",Op+i);\n        if(Op[i]==1)scanf(\"%u%s\",FathA+tp1,C_A+tp1),FathA[tp1++]--;\n        else scanf(\"%u%s\",FathB+tp2,C_B+tp2),FathB[tp2++]--;\n    }\n    build();\n    build2();\n    build3();\n    for(uint i=0,p1=0,p2=0;i<q;i++){\n        if(Op[i]==1){\n            Ans[i]=BIT1::find(L[p1],R[p1]);\n            BIT2::add(L[p1],R[p1],1);\n            p1++;\n        }\n        else{\n            Ans[i]=BIT2::find(Rank[p2]);\n            BIT1::add(Rank[p2],1);\n            p2++;\n        }\n    }\n    for(uint i=1;i<q;i++)Ans[i]+=Ans[i-1];\n    for(uint i=2;i<q;i++)printf(\"%llu\\n\",Ans[i]);\n    return 0;\n}\n```\n",
        "postTime": 1676454620,
        "uid": 105050,
        "name": "myee",
        "ccfLevel": 7,
        "title": "207C3"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u3002](https://www.cnblogs.com/DRPLANT/p/CF207C3_solution.html)\n\n\u8111\u5b50\u4e0d\u591f\uff0c\u79d1\u6280\u6765\u51d1\u3002\n\n\u4e0d\u8fc7\u597d\u50cf\u4e5f\u6ca1\u6709\u7528\u591a\u4e48\u9ad8\u7ea7\u7684\u79d1\u6280\u2026\u2026\n\n\u9996\u5148\u8fd9\u4e2a\u9898\u76ee\u5f88\u574f\uff0c\u5b83\u8ba9\u4f60\u7ffb\u8f6c $S_{t_2}$\u3002\u5373\u4ece $t_2$ \u67d0\u4e2a\u8282\u70b9\u5f80\u4e0b\u8d70\u5230\u53e6\u4e00\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u4e2a\u975e\u5e38\u96be\u4ee5\u7ef4\u62a4\u3002\u56e0\u6b64\u6211\u4eec\u4e0d\u7ffb\u8f6c $S_{t_2}$\uff0c\u8f6c\u800c\u7ffb\u8f6c $S_{t_1}$\u3002\u4e24\u8005\u7684\u6548\u679c\u662f\u76f8\u540c\u7684\u3002\u4e8e\u662f\u8be2\u95ee\u5c31\u53d8\u6210\u4e86\u4ece $t_1$ \u7684\u6839\u8d70\u5230\u67d0\u4e2a\u8282\u70b9\u7684\u8def\u5f84\uff0c\u4ee5\u53ca\u4ece $t_2$ \u67d0\u4e2a\u8282\u70b9\u5411\u4e0a\u8d70\u7684\u8def\u5f84\uff0c\u4e24\u8005\u76f8\u7b49\u7684\u60c5\u51b5\u6570\u3002\n\n\u7531\u4e8e\u8282\u70b9\u53ea\u52a0\u4e0d\u5220\uff0c\u8003\u8651\u7b97\u51fa\u52a0\u5165\u6bcf\u4e2a\u8282\u70b9\u4f1a\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u6700\u540e\u518d\u6eda\u4e00\u904d\u524d\u7f00\u548c\u5f97\u5230\u7b54\u6848\u3002\u7531\u4e8e $t_2$ \u8be2\u95ee\u7684\u662f\u4ece\u67d0\u4e2a\u8282\u70b9\u5411\u4e0a\u7684\u8def\u5f84\u3002\u8003\u8651\u79bb\u7ebf\u5efa\u51fa\u4e24\u68f5\u6811\u5e76\u628a\u8fb9\u6743\u4e0b\u653e\u5230\u70b9\uff0c\u5bf9 $t_2$ \u8fdb\u884c\u6811\u4e0a\u540e\u7f00\u6392\u5e8f\u3002\u6309\u6df1\u5ea6\u4ece\u5c0f\u5230\u5927\u5904\u7406\u6bcf\u4e2a $t_1$ \u8282\u70b9 $i$\u3002\u663e\u7136 $i$ \u80fd\u591f\u5339\u914d\u5230\u7684 $t_2$ \u7684 SA \u533a\u95f4\u53ea\u4f1a\u6bd4\u5176\u7236\u4eb2\u66f4\u5c0f\u3002\u5728\u5176\u7236\u4eb2\u80fd\u591f\u5339\u914d\u5230\u7684 SA \u533a\u95f4\u5185\u4e8c\u5206\u3002\u7531\u4e8e $i$ \u6240\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u53ea\u6bd4\u5176\u7236\u4eb2\u591a 1\uff0c\u6240\u4ee5\u5728\u4e8c\u5206\u65f6\u53ea\u9700\u8981\u5224\u65ad $SA_{mid}$ \u7684\u7b2c $k$ \u7ea7\u7956\u5148\u662f\u5426\u4e0e $i$ \u7684\u5b57\u7b26\u76f8\u7b49\u5373\u53ef\uff08$k=dep_i$\uff0c$dep_1=-1$\uff0c$dep_i=dep_{fa_i}+1$\uff09\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a $t_1$ \u8282\u70b9 $i$ \u80fd\u591f\u5339\u914d\u5230\u7684 $t_2$ \u7684 SA \u533a\u95f4\u3002\u8bb0\u4f5c $[L_i, R_i)$\u3002\n\n\u73b0\u5728\u6765\u5177\u4f53\u5206\u6790\u4e00\u4e0b\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\u4f1a\u4ea7\u751f\u7684\u8d21\u732e\u3002\n\n\u5f53\u63d2\u5165\u4e00\u4e2a $t_1$ \u8282\u70b9\u65f6\uff1a\n\n1. \u6bcf\u4e2a\u4e4b\u524d\u63d2\u5165\u7684\u80fd\u4e0e\u5176\u5339\u914d\u7684 $t_2$ \u8282\u70b9\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u3002\u56e0\u6b64\u8981\u8bb0\u5f55 $rec1_i$ \u8868\u793a $SA_i$ \u6709\u65e0\u88ab\u63d2\u5165\u3002\u8fd9\u90e8\u5206\u662f\u5bf9 $rec1$ \u8fdb\u884c\u4e00\u4e2a\u533a\u95f4\u6c42\u548c\u3002\n2. \u8be5\u70b9\u5c06\u4e0e\u672a\u6765\u6bcf\u4e2a\u80fd\u4e0e\u5176\u5339\u914d\u7684 $t_2$ \u8282\u70b9\u4ea7\u751f\u8d21\u732e\u3002\u8003\u8651\u8bb0\u5f55 $rec2_i$ \u8868\u793a\u6bcf\u4e2a $t_2$ \u8282\u70b9 $i$ \u80fd\u4e0e\u591a\u5c11\u4e2a $t_1$ \u8282\u70b9\u5339\u914d\u3002\u8fd9\u90e8\u5206\u662f\u5bf9 $rec2$ \u8fdb\u884c\u4e00\u6b21\u533a\u95f4\u52a0 1\u3002\n\n\u5f53\u63d2\u5165\u4e00\u4e2a $t_2$ \u8282\u70b9\u65f6\uff1a\n\n1. \u6bcf\u4e2a\u4e4b\u524d\u63d2\u5165\u7684\u80fd\u4e0e\u5176\u5339\u914d\u7684 $t_1$ \u8282\u70b9\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u3002\u8fd9\u90e8\u5206\u662f\u5bf9 $rec2$ \u8fdb\u884c\u4e00\u4e2a\u5355\u70b9\u6c42\u503c\u3002\n2. \u8be5\u70b9\u5c06\u4e0e\u672a\u6765\u6bcf\u4e2a\u80fd\u4e0e\u5176\u5339\u914d\u7684 $t_1$ \u8282\u70b9\u4ea7\u751f\u8d21\u732e\u3002\u8fd9\u90e8\u5206\u662f\u5bf9 $rec1$ \u8fdb\u884c\u4e00\u6b21\u5355\u70b9\u52a0 1\u3002\n\n\u4ee5\u4e0a\u64cd\u4f5c\u5747\u80fd\u7528\u6811\u72b6\u6570\u7ec4\u7b80\u5355\u5730\u7ef4\u62a4\u3002\u4e8e\u662f\u95ee\u9898\u53ea\u5269\u4e0b\u5982\u4f55\u8fdb\u884c\u6811\u4e0a\u540e\u7f00\u6392\u5e8f\u4e86\u3002\u56e0\u4e3a\u6211\u6ca1\u6709\u8111\u5b50\uff0c\u6240\u4ee5\u6211\u76f4\u63a5\u7528\u540e\u7f00\u5e73\u8861\u6811\u4e86\u3002\u611f\u89c9\u6ca1\u90a3\u4e48\u96be\u5199\u3002\n\n\u82e5\u4f7f\u7528\u957f\u5256\u6c42\u6811\u4e0a k \u7ea7\u7956\u5148\uff0c\u5219\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\u7136\u800c\u957f\u5256\u5e38\u6570\u592a\u5927\uff0c\u5b9e\u9645\u8dd1\u8d77\u6765\u4e0d\u5982\u91cd\u5256\u3002\u56e0\u6b64\u5b9e\u73b0\u65f6\u4f7f\u7528\u4e86\u6734\u7d20\u7684\u91cd\u5256\u6c42\u6811\u4e0a k \u7ea7\u7956\u5148\u3002\u590d\u6742\u5ea6 $O(n\\log^2 n)$\u3002\u5e38\u6570\u4e0d\u5927\u3002\n\nCode\uff1a\n```cpp\nconstexpr int maxn = 100010;\nint faA[maxn], faB[maxn], SA[maxn], Rank[maxn], *_p = SA, cntA, cntB, op[maxn];\n\ntypedef long long i64;\ntypedef unsigned long long u64;\nconstexpr u64 INF = 1ull << 62;\n#define isNull(x) (x->son[0] == x)\nchar sA[maxn], sB[maxn];\n\nstruct Suffix_n {\n  constexpr static double ALPHA = 0.75;\n  Suffix_n *son[2];\n  int id, size;\n  u64 val;\n\n  inline void pushup() {\n    if (isNull(this))\n      return;\n    size = son[0]->size + son[1]->size + 1;\n  }\n  inline bool need_rebuild() {\n    return ALPHA * size <= max(son[0]->size, son[1]->size);\n  }\n} *rec[maxn];\n\nstruct Suffix_t {\n  constexpr static int SIZE = maxn;\n  Suffix_n MemoryPool[SIZE], *const null = MemoryPool, *root = null, *pointer = null;\n  Suffix_t() {\n    rec[0] = null->son[0] = null->son[1] = null;\n  }\n  inline bool cmp(int a, int b) {\n    return sB[a] ^ sB[b] ? sB[a] < sB[b] : rec[faB[a]]->val < rec[faB[b]]->val;\n  }\n  inline Suffix_n *allocate(int id, u64 num) {\n    return *++pointer = {null, null, id, 1, num}, pointer;\n  }\n  vector<Suffix_n *> _need;\n  void pre_rebuild(Suffix_n *r) {\n    (r->son[0] != null) && (pre_rebuild(r->son[0]), 0), _need.emplace_back(r),\n        (r->son[1] != null) && (pre_rebuild(r->son[1]), 0);\n  }\n  Suffix_n *rebuild_main(int left, int right, u64 L, u64 R) {\n    if (left > right)\n      return null;\n    int mid     = (left + right) >> 1;\n    u64 vmid    = (L + R) >> 1;\n    Suffix_n *r = _need[mid];\n    r->val      = vmid;\n    r->son[0] = rebuild_main(left, mid - 1, L, vmid), r->son[1] = rebuild_main(mid + 1, right, vmid, R);\n    r->pushup();\n    return r;\n  }\n  inline void rebuild(Suffix_n *&r, u64 L, u64 R) {\n    _need.clear(), pre_rebuild(r), r = rebuild_main(0, _need.size() - 1, L, R);\n  }\n  void insert(Suffix_n *&r, int id, u64 L = 0, u64 R = INF) {\n    if (r == null) {\n      rec[id] = r = allocate(id, (L + R) >> 1);\n      return;\n    }\n    cmp(id, r->id) ? insert(r->son[0], id, L, r->val) : insert(r->son[1], id, r->val, R);\n    r->pushup();\n    if (r->need_rebuild())\n      rebuild(r, L, R);\n  }\n  inline void dfs(Suffix_n *r) {\n    (r->son[0] != null) && (dfs(r->son[0]), 0), *++_p = r->id, (r->son[1] != null) && (dfs(r->son[1]), 0);\n  }\n} Suffix;\n\nbasic_string<int> edge[maxn];\nint size[maxn], fa[maxn], dep[maxn], son[maxn], top[maxn], dfn[maxn], MAP[maxn], _id, root;\nvoid dfs1(int u, int _fa) {\n  size[u] = 1, fa[u] = _fa, dep[u] = dep[_fa] + 1;\n  for (const int &v : edge[u])\n    dfs1(v, u), size[u] += size[v], (size[v] > size[son[u]]) && (son[u] = v);\n}\nvoid dfs2(int u, int _top) {\n  dfn[u] = ++_id, MAP[_id] = u, top[u] = _top;\n  if (!son[u])\n    return;\n  dfs2(son[u], _top);\n  for (const int &v : edge[u])\n    (v != son[u]) && (dfs2(v, v), 0);\n}\ninline char kthF(int x, int k) {\n  if (dep[x] <= k)\n    return 0;\n  int tmp;\n  while (k) {\n    tmp = dep[x] - dep[top[x]] + 1;\n    if (tmp <= k)\n      x = fa[top[x]], k -= tmp;\n    else\n      return sB[MAP[dfn[x] - k]];\n  }\n  return sB[x];\n}\n\nint L[maxn], R[maxn];\ninline void build() {\n  for (int i = 1; i <= cntB; i++)\n    Rank[SA[i]] = i;\n  static int _dep[maxn];\n  L[1] = 1, R[1] = cntB + 1, _dep[1] = -1;\n  for (int i = 2; i <= cntA; i++) {\n    _dep[i]  = _dep[faA[i]] + 1;\n    int left = L[faA[i]], right = R[faA[i]], mid;\n    while (left < right)\n      mid = (left + right) >> 1, (kthF(SA[mid], _dep[i]) >= sA[i]) ? right = mid : left = mid + 1;\n    L[i] = left, right = R[faA[i]];\n    while (left < right)\n      mid = (left + right) >> 1, (kthF(SA[mid], _dep[i]) > sA[i]) ? right = mid : left = mid + 1;\n    R[i] = left;\n  }\n}\n\nnamespace BIT1 {\n#define lowbit(x) (x & -x)\ni64 tree[maxn];\ninline void update(int id, int val) {\n  for (int i = id; i <= cntB; i += lowbit(i))\n    tree[i] += val;\n}\ninline i64 query(int l, int r) {\n  l--, r--;\n  i64 res = 0;\n  for (int i = r; i; i -= lowbit(i))\n    res += tree[i];\n  for (int i = l; i; i -= lowbit(i))\n    res -= tree[i];\n  return res;\n}\n}  // namespace BIT1\nnamespace BIT2 {\ni64 tree[maxn];\ninline void update(int l, int r, int val) {\n  for (int i = l; i <= cntB; i += lowbit(i))\n    tree[i] += val;\n  for (int i = r; i <= cntB; i += lowbit(i))\n    tree[i] -= val;\n}\ninline i64 query(int id) {\n  i64 res = 0;\n  for (int i = id; i; i -= lowbit(i))\n    res += tree[i];\n  return res;\n}\n}  // namespace BIT2\ni64 ANS[maxn];\n\nint main() {\n  int q;\n  in(q);\n  op[1] = 1, op[2] = 2, cntA = cntB = 1, q += 2;\n  for (int i = 3; i <= q; i++)\n    in(op[i]), (op[i] == 1) ? (cntA++, in(faA[cntA], sA[cntA])) : (cntB++, in(faB[cntB], sB[cntB]));\n\n  for (int i = 1; i <= cntB; i++)\n    Suffix.insert(Suffix.root, i), edge[faB[i]] += i;\n  Suffix.dfs(Suffix.root), dfs1(1, 0), dfs2(1, 1);\n  build();\n\n  for (int i = 1, p1 = 0, p2 = 0; i <= q; i++)\n    if (op[i] == 1)\n      p1++, ANS[i] = BIT1::query(L[p1], R[p1]), BIT2::update(L[p1], R[p1], 1);\n    else\n      p2++, ANS[i] = BIT2::query(Rank[p2]), BIT1::update(Rank[p2], 1);\n  for (int i = 2; i <= q; i++)\n    ANS[i] += ANS[i - 1];\n  for (int i = 3; i <= q; i++)\n    out(ANS[i]), enter;\n}\n```\n",
        "postTime": 1678280303,
        "uid": 111789,
        "name": "DRPLANT",
        "ccfLevel": 5,
        "title": "CF207C3 Game with Two Trees \u9898\u89e3"
    },
    {
        "content": "\u786e\u5b9a\u4e00\u4e2a\u770b\u4e0a\u53bb\u8f83\u4e3a\u7b80\u5355\u7684\u8ba1\u6570\u65b9\u5f0f\uff1a\u5bf9\u4e8e $t_1$ \u4e0a\u7684\u6bcf\u4e2a\u6839\u5230\u8282\u70b9\u4e0a\u7684\u8def\u5f84\uff0c\u7edf\u8ba1 $t_2$ \u4e0a\u8282\u70b9\u5230\u7956\u5148\u7684\u8def\u5f84\u4e0e\u5176\u76f8\u7b49\u7684\u65b9\u6848\u6570\u3002\n\n\u4e0d\u59a8\u5148\u79bb\u7ebf\uff0c\u5f97\u5230 $t_1,t_2$ \u7684\u5f62\u6001\u3002\u8003\u8651\u5bf9 $t_1$ \u5efa trie\uff0c\u7136\u540e\u4ee5 $t_2$ \u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u4e3a\u8d77\u70b9\u5411\u4e0a\u8df3\uff0c\u770b\u6700\u591a\u80fd\u5728 $t_1$ \u7684 trie \u6811\u4e0a\u5339\u914d\u5230\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u5047\u8bbe $t_2$ \u4e0a\u7684\u8282\u70b9 $u$ \u6700\u7ec8\u5339\u914d\u5230\u4e86 trie \u4e0a\u7684\u8282\u70b9 $v$\uff0c\u90a3\u4e48 trie \u4e0a\u6839\u5230 $v$ \u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u4e0e $u$ \u90fd\u53ef\u4ee5\u4ea7\u751f\u8d21\u732e\u3002\n\n\u8ba1\u7b97\u8d21\u732e\u662f\u7b80\u5355\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u5206\u522b\u7ef4\u62a4 $t_1$ \u4e0a\u4e4b\u524d\u7684\u8282\u70b9\u5bf9 $t_2$ \u4e0a\u65b0\u8282\u70b9\u7684\u8d21\u732e\u4e0e $t_2$ \u4e0a\u4e4b\u524d\u7684\u8282\u70b9\u5bf9 $t_1$ \u4e0a\u65b0\u8282\u70b9\u7684\u8d21\u732e\uff0c\u7528\u4e24\u4e2a\u6811\u72b6\u6811\u7ec4\u5c31\u53ef\u4ee5\u5b8c\u6210\uff08\u5206\u522b\u53ea\u9700\u8981\u5b50\u6811\u52a0\u5355\u70b9\u67e5\u503c\u4e0e\u5355\u70b9\u52a0\u5b50\u6811\u6c42\u548c\uff09\u3002\n\n\u6211\u4eec\u8003\u8651\u600e\u4e48\u7ef4\u62a4\u627e\u5339\u914d\u70b9\u7684\u8fc7\u7a0b\u3002\n\n\u6211\u4eec\u4f7f\u7528\u500d\u589e+\u91cd\u5256\u7ef4\u62a4\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u5177\u4f53\u5730\uff0c\u6211\u4eec\u5bf9 trie \u6811\u91cd\u5256\u4e00\u4e0b\uff0c\u7136\u540e\u4ece $t_2$ \u4e0a\u7684\u8282\u70b9 $u$ \u5411\u4e0a\u8df3\u4f7f\u7528\u500d\u589e\u7ef4\u62a4\u3002\u6bcf\u6b21\u5728 trie \u6811\u4e00\u6761\u91cd\u94fe\u4e0a\u4e0e $t_2$ \u5f53\u524d\u8282\u70b9\u500d\u589e\u5339\u914d\uff0c\u5339\u914d\u5230\u5934\u518d\u8df3\u8f7b\u8fb9\uff0c\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u76f4\u5230\u65e0\u6cd5\u5339\u914d\u5373\u53ef\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u590d\u6742\u5ea6\u662f $O(n\\log^2 n)$ \u7684\u3002\n\n\u53e6\u4e00\u79cd\u505a\u6cd5\uff08\u6765\u81ea [@_\u2022\u0301\u3078\u2022\u0301\u256c_ ](https://www.luogu.com.cn/user/90693) /bx\uff09\u662f\u5c06 trie \u4e0a\u8282\u70b9\u7684\u503c\u5bf9\u5e94\u4f4d\u7f6e\u5b58\u4e0b\u6765\uff0c\u5339\u914d\u7684\u65f6\u5019\u4e8c\u5206\u4e00\u4e0b\u5c31\u597d\u3002\u590d\u6742\u5ea6\u76f8\u540c\u4f46\u662f\u5e38\u6570\u7565\u5927\uff0c\u4e0d\u8fc7\u5e94\u8be5\u4f1a\u597d\u5199\u4e00\u4e9b\u3002\n\n\u56e0\u6b64\u6211\u4eec\u5c31\u5728 $O(n\\log^2 n)$ \u7684\u65f6\u95f4\u5185\u89e3\u51b3\u4e86\u672c\u9898\uff0c\u74f6\u9888\u5373\u627e\u5339\u914d\u70b9\u7684\u8fc7\u7a0b\u3002\n\n\u4ee3\u7801\u6bd4\u9898\u89e3\u6e05\u695a\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200005;\nconst int mod=998244353;\ntypedef long long ll;\nint m,op[N],to[N],u,n1,n2,idx,a[N],b[N]; char ch; ll ans;\nint val[N],siz[N],id[N],top[N],dfn[N],son[N],len[N],dep[N];\nint lg[N],fa[17][N],h[N],pw[N],tr[N][27];\ninline void dfs1(int u){\n\tsiz[u]=1;\n\tfor(int i=0;i<26;i++){\n\t\tint v=tr[u][i];\n\t\tif(!v) continue;\n\t\tval[v]=(131ll*val[u]+i+47)%mod;\n\t\tdfs1(v);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]]) son[u]=v;\n\t}\n}\ninline void dfs2(int u){\n\tdfn[u]=++idx; id[idx]=u;\n\tif(!son[u]) return;\n\tdfs2(son[u]); len[u]=len[son[u]]+1;\n\tfor(int i=0;i<26;i++){\n\t\tint v=tr[u][i];\n\t\tif(!v || v==son[u]) continue;\n\t\tdfs2(v);\n\t}\n}\ninline int find(int u,int v,int s){\n\tfor(int i=lg[min(len[v],dep[u])];~i;i--)\n\tif((h[s]-h[fa[i][u]]+mod)%mod==1ll*val[id[dfn[v]+(1<<i)]]*pw[dep[fa[i][u]]]%mod)\n\tu=fa[i][u],v=id[dfn[v]+(1<<i)];\n\tif(u==1 || !tr[v][to[u]]) return v;\n\treturn find(fa[0][u],tr[v][to[u]],s);\n}\nstruct BIT{\n\tint c[N];\n\t#define lowbit(x) (x&(-x))\n\tinline void update(int x,int y){ while(x<=n1) c[x]+=y,x+=lowbit(x); }\n\tinline int query(int x){ int r=0; while(x) r+=c[x],x-=lowbit(x); return r; }\n}T1,T2;\nint main(){\n\tread(m); n1=n2=1; dep[1]=a[1]=1;\n\tpw[0]=1; for(int i=1;i<=m;i++) pw[i]=131ll*pw[i-1]%mod;\n\tfor(int i=1;i<=m;i++){\n\t\tread(op[i]),read(u),getc(ch);\n\t\tif(op[i]==1){\n\t\t\tint ru=a[u]; n1++;\n\t\t\tif(!tr[ru][ch-'a'])\n\t\t\t\ttr[ru][ch-'a']=n1;\n\t\t\ta[n1]=tr[ru][ch-'a'];\n\t\t}\n\t\telse{\n\t\t\tn2++;\n\t\t\tfa[0][n2]=u;\n\t\t\tto[n2]=ch-'a';\n\t\t\tdep[n2]=dep[u]+1;\n\t\t\th[n2]=(h[u]+(to[n2]+47ll)*pw[dep[u]])%mod;\n\t\t}\n\t}\n\tdfs1(1); dfs2(1);\n\tlg[0]=-1; for(int i=2;i<=m;i++) lg[i]=lg[i>>1]+1;\n\tfor(int j=1;j<=lg[n2];j++)\n\t\tfor(int i=1;i<=n2;i++)\n\t\t\tfa[j][i]=fa[j-1][fa[j-1][i]];\n\tb[1]=1; for(int i=2;i<=n2;i++) b[i]=find(i,1,i);\n\tT1.update(dfn[1],1); T1.update(dfn[1]+siz[1],-1);\n\tT2.update(dfn[b[1]],1); ans=1;\n\tfor(int i=1,x=1,y=1;i<=m;i++){\n\t\tif(op[i]==1){\n\t\t\tint u=a[++x];\n\t\t\tans+=T2.query(dfn[u]+siz[u]-1)-T2.query(dfn[u]-1);\n\t\t\tT1.update(dfn[u],1); T1.update(dfn[u]+siz[u],-1);\n\t\t}\n\t\telse{\n\t\t\tint u=b[++y];\n\t\t\tans+=T1.query(dfn[u]);\n\t\t\tT2.update(dfn[u],1);\n\t\t}\n\t\tprint(ans); putc('\\n');\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1677918287,
        "uid": 236862,
        "name": "DitaMirika",
        "ccfLevel": 7,
        "title": "CF207C3"
    },
    {
        "content": "\u53ea\u7528\u54c8\u5e0c\u5c31\u53ef\u4ee5\u505a\u7684\u4e32\u4e32\u9898\u597d\u8036\uff01\n\n\u8003\u8651\u8fd9\u6837\u7684\u4e00\u4e2a\u66b4\u529b\uff1a\n\n- \u5982\u679c\u8981\u5c06 $n_2$ \u589e\u5927 $1$\uff0c\u5bf9\u4e8e\u76ee\u6807\u8282\u70b9 $x$\uff0c\u63d0\u53d6\u51fa\u5230\u6839\u7684\u4e32 $S_x$\u3002\n- \u4f7f\u7528\u8fd9\u4e2a\u4e32\u63d2\u5165 $T_1$\uff0c\u5bf9\u4e8e\u6240\u6709\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u90fd $+1$\u3002\n- \u5982\u679c\u8981\u5c06 $n_1$ \u589e\u5927 $1$\uff0c\u76f4\u63a5\u67e5\u65b0\u589e\u7684\u70b9\u7684\u6743\u503c\u5373\u53ef\u3002\n\n\u8003\u8651\u600e\u4e48\u5feb\u901f\u7ef4\u62a4\u5339\u914d\u7684\u8fc7\u7a0b\uff0c\u76f4\u63a5\u5c06 $T_1$ \u79bb\u7ebf\u4e4b\u540e\u6811\u5256\uff0c\u5bf9\u4e8e\u6bcf\u6761\u91cd\u94fe\u6c42\u4e00\u4e2a LCP\u3002\n\n\u8fd9\u9700\u8981\u4e00\u4e2a\u6811\u4e0a\u540e\u7f00\u6392\u5e8f\u79d1\u6280\uff0c\u4e0d\u8fc7\u4e0d\u4f1a\u4e5f\u6ca1\u5173\u7cfb\uff0c\u76f4\u63a5\u8df3\u6811\u4e0a $k$ \u7ea7\u7956\u5148\u54c8\u5e0c\u4e5f\u662f $O(n\\log^3 n)$ \u7684\u3002\n\n\u5b9e\u6d4b\u8dd1\u7684\u98de\u5feb\uff0c\u53ea\u9700\u8981 340ms\u3002\n\n```cpp\n//\u4e0d\u56de\u5bb6\u4e86\uff0c\u6211\u4eec\u53bb\u9e1f\u5de2\uff01\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\nusing namespace std;\n#define ll long long\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nconst int _=310000;\nstruct BIT\n{\n\tint tr[310003];\n\tinline void add(int x,int k)\n\t{\n\t\t++x;\n\t\twhile(x<=_) tr[x]+=k,x+=x&(-x);\n\t\treturn ;\n\t}\n\tinline int find(int x)\n\t{\n\t\tint r=0;\n\t\t++x;\n\t\twhile(x) r+=tr[x],x-=x&(-x);\n\t\treturn r;\n\t}\n}T1,T2;\nint t1[300003][26],f1[300003],c1=1;\nchar o[300003];\nint t2[300003][26],f2[300003],c2=1;\nint op[600003];\nint id1[300003],id2[300003];\nint sz[300003],hs[300003],hid[300003];\nvoid dfs1(int x)\n{\n\tsz[x]=1;\n\tfor(int i=0; i<26; ++i)\n\t\tif(t1[x][i])\n\t\t\tdfs1(t1[x][i]),sz[x]+=sz[t1[x][i]],\n\t\t\t(sz[t1[x][i]]>sz[hs[x]])\n\t\t\t&&(hid[x]=i,hs[x]=t1[x][i],0);\n\treturn ;\n}\nconst int p=1019260817;\nint qp(int x,int y)\n{\n\tint res=1;\n\tfor(int t=x; y; y>>=1,t=1ll*t*t%p)\n\t\tif(y&1) res=1ll*res*t%p;\n\treturn res;\n}\nconst int b=131,ib=qp(b,p-2);\nint dfn[300003],to[300003];\nint inv[300003],pw[300003];\nint H[300003],len[300003],cb=1,N;\ninline int H1(int l,int r)\n{return 1ll*(p+H[r]-H[l-1])*inv[l-1]%p;}\nvoid dfs2(int x)\n{\n\tdfn[x]=++N,to[N]=x,\n\tH[N]=(H[N-1]+1ll*cb*hid[x])%p,cb=1ll*cb*131%p;\n\tif(hs[x]) dfs2(hs[x]),len[x]=len[hs[x]]+1;\n\tfor(int i=0; i<26; ++i)\n\t\tif(t1[x][i]&&i!=hid[x])\n\t\t\tdfs2(t1[x][i]);\n}\nint dep[300003],f[300003][19],G[300003];\nvoid dfs3(int x)\n{\n\tG[x]=(G[f[x][0]]+1ll*inv[dep[x]]*(o[x]-'a'))%p;\n\tfor(int i=1; i<19; ++i)\n\t\tf[x][i]=f[f[x][i-1]][i-1];\n\tfor(int i=0; i<26; ++i)\n\t\tif(t2[x][i])\n\t\t\tdep[t2[x][i]]=dep[x]+1,\n\t\t\tf[t2[x][i]][0]=x,\n\t\t\tdfs3(t2[x][i]);\n}\nint kth(int x,int y)\n{\n\tfor(int i=18; i>=0; --i)\n\t\tif((y>>i)&1) x=f[x][i];\n\treturn x;\n}\ninline int G1(int x,int len)\n{return 1ll*(p+G[x]-G[kth(x,len)])*pw[dep[x]]%p;}\nsigned main()\n{\n\tint n1=1,n2=1,T=read();\n\tid1[1]=id2[1]=inv[0]=pw[0]=1;\n\tfor(int i=1; i<=300000; ++i)\n\t\tinv[i]=1ll*inv[i-1]*ib%p;\n\tfor(int i=1; i<=300000; ++i)\n\t\tpw[i]=1ll*pw[i-1]*b%p;\n\tfor(int i=1,fa; i<=T; ++i)\n\t{\n\t\tchar ch;\n\t\top[i]=read(),fa=read(),ch=getchar();\n\t\tif(op[i]==1)\n\t\t{\n\t\t\tfa=id1[fa];\n\t\t\tif(!t1[fa][ch-'a'])\n\t\t\t\tt1[fa][ch-'a']=++c1,\n\t\t\t\tf1[c1]=fa;\n\t\t\tid1[++n1]=t1[fa][ch-'a'];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfa=id2[fa];\n\t\t\tif(!t2[fa][ch-'a'])\n\t\t\t\tt2[fa][ch-'a']=++c2,\n\t\t\t\tf2[c2]=fa,o[c2]=ch;\n\t\t\tid2[++n2]=t2[fa][ch-'a'];\n\t\t}\n\t}\n\tdfs1(1),dfs2(1),dfs3(1),T1.add(dfn[1],1);\n\tll ans=1;\n\tfor(int z1=1,z2=1,i=1; i<=T; ++i)\n\t{\n\t\tif(op[i]==1)\n\t\t\tans+=T2.find(dfn[id1[++z1]]),\n\t\t\tT1.add(dfn[id1[z1]],1);\n\t\telse\n\t\t{\n\t\t\tint t=1;\n\t\t\tfor(int i=id2[++z2]; i>=1; i=f2[i])\n\t\t\t{\n\t\t\t\tint l=1,r=min(len[t],dep[i]),res=0;\n\t\t\t\twhile(l<=r)\n\t\t\t\t{\n\t\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\t\tif(H1(dfn[t],dfn[t]+mid-1)==G1(i,mid))\n\t\t\t\t\t\tres=mid,l=mid+1;\n\t\t\t\t\telse r=mid-1;\n\t\t\t\t}\n\t\t\t\ti=kth(i,res),++res,\n\t\t\t\tans+=T1.find(dfn[t]+res-1)\n\t\t\t\t-T1.find(dfn[t]-1),\n\t\t\t\tT2.add(dfn[t],1),\n\t\t\t\tT2.add(dfn[t]+res,-1),\n\t\t\t\tt=to[dfn[t]+res-1];\n\t\t\t\tif(i>1&&t1[t][o[i]-'a'])\n\t\t\t\t\tt=t1[t][o[i]-'a'];\n\t\t\t\telse break;\n\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1676530453,
        "uid": 427683,
        "name": "\u5411\u665a\u5927\u9b54\u738b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF207C3"
    }
]