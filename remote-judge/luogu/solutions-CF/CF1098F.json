[
    {
        "content": "> [CF1098F \u0416-function](https://www.luogu.com.cn/problem/CF1098F)\n\n\u63d0\u4f9b\u4e00\u4e2a\u6bd4\u8f83\u597d\u60f3\u7684\u601d\u8def\u3002\n\n\u4e00\u53e5\u8bdd\u9898\u89e3\uff1aDAG \u94fe\u5256\u5206 + P4211 + \u5904\u7406\u7b97\u9519\u7684\u8d21\u732e\u3002\n\n\u7ffb\u8f6c $s$ \u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 $s[l, r]$ \u7684\u6bcf\u4e2a\u524d\u7f00\u4e0e $s[l, r]$ \u7684\u6700\u957f\u516c\u5171\u540e\u7f00\u3002\u4f17\u6240\u5468\u77e5\u4e24\u4e32 LCS \u53ef\u4ee5\u7528 SAM \u7684 link \u6811\u7684 LCA \u7684 $len$ \u503c\u5927\u81f4\u63cf\u8ff0\uff0c\u4ec5\u6709\u5f53\u4e24\u4e32\u5b58\u5728\u7956\u5148\u540e\u4ee3\u5173\u7cfb\u65f6\u9700\u8981\u7279\u6b8a\u8003\u8651\u3002\u56e0\u6b64\uff0c\u4e0d\u59a8\u5148\u6c42\n$$\n\\sum\\limits_{p = l} ^ r {len}({lca}(s[l, p], s[l, r]))\n$$\n\u8003\u8651\u4e0a\u5f0f\uff0c\u53d1\u73b0\u5f62\u5f0f\u5f88\u50cf\u7ecf\u5178\u8001\u9898 [P4211 [LNOI2014] LCA](https://www.luogu.com.cn/problem/P4211)\u3002\u95ee\u9898\u5728\u4e8e $s[l, p]$ \u968f\u7740 $p$ \u4ece $l$ \u589e\u5927\u5230 $r$\uff0c\u5176\u53d6\u503c\u548c $l$ \u6709\u5173\uff0c\u6211\u4eec\u4e0d\u80fd\u5bf9\u6bcf\u4e2a $l$ \u90fd\u505a\u4e00\u904d\u79bb\u7ebf\u626b\u63cf\u7ebf\u3002\u6ce8\u610f\u5230\u5b83\u662f DAWG \u7684\u8def\u5f84\uff0c\u56e0\u6b64\u8003\u8651 DAG \u94fe\u5256\u5206\u3002\u5c06\u5176\u5256\u6210 $\\mathcal{O}(\\log n)$ \u6761 DAWG \u4e0a\u65f6\u95f4\u6233\u8fde\u7eed\u7684\u94fe\uff0c\u8fd9\u6837\u53ea\u9700\u6309 DAWG \u65f6\u95f4\u6233\u7684\u987a\u5e8f\u626b\u63cf\u7ebf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86 $\\mathcal{O}(n)$ \u6b21\u52a0\u5165\uff0c$\\mathcal{O}(q\\log n)$ \u6b21\u67e5\u8be2\u7684 P4211\u3002\u5c06 link \u6811\u6811\u5256\uff0c\u7528 BIT \u7ef4\u62a4\u533a\u95f4\u7ed9 $c_i$ \u52a0 $1$\uff0c\u533a\u95f4\u67e5\u8be2 $c_iv_i$ \u4e4b\u548c\uff0c\u5176\u4e2d $v_i$ \u5373\u65f6\u95f4\u6233\u4e3a $i$ \u7684\u8282\u70b9 $u$ \u7684 ${len}$ \u503c\u51cf\u53bb\u5176\u7236\u4eb2\u7684 ${len}$ \u503c\uff0c\u8fd9\u6837 $x$ \u5904\u7684\u4fee\u6539\u5bf9 $y$ \u5904\u7684\u67e5\u8be2\u7684\u8d21\u732e\u5373 ${len}({lca}(x, y))$\u3002\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(q\\log ^ 3 n)$\uff0c\u4f46\u4e09\u4e2a $\\log$ \u5206\u522b\u662f DAG \u94fe\u5256\u5206\uff0c\u6811\u5256\uff0cBIT\uff0c\u800c\u96be\u4ee5\u6784\u9020\u4f7f\u5f97 link \u6811\u5361\u6ee1\u524d\u4e24\u4e2a $\\log$ \u7684\u5b57\u7b26\u4e32 $s$\uff0c\u6240\u4ee5\u5e38\u6570\u975e\u5e38\u5c0f\u3002\n\n\u7136\u540e\u6211\u4eec\u5904\u7406\u7b97\u9519\u7684\u8d21\u732e\u3002\u56e0\u4e3a $s[l, p]$ \u4e0d\u53ef\u80fd\u662f $s[l, r]$ \u7684\u540e\u4ee3\uff0c\u6240\u4ee5\u53ea\u9700\u8003\u8651 $s[l, p]$ \u662f $s[l, r]$ \u7684\u7956\u5148\u7684\u60c5\u51b5\u3002\u6b64\u65f6\u51cf\u53bb ${len}(s[l, p])$\uff0c\u52a0\u4e0a $p - l + 1$\u3002\u6bcf\u4e00\u6761 DAWG \u4e0a\u65f6\u95f4\u6233\u8fde\u7eed\u7684\u94fe $[ql, qr]$ \u76f8\u5f53\u4e8e\u67e5\u8be2 $s[l, r]$ \u5230\u6839\u7684\u8def\u5f84\u4e0a\uff0c\u5728 DAWG \u4e0a\u65f6\u95f4\u6233 $t$ \u843d\u5728 $[ql, qr]$ \u8303\u56f4\u5185\u7684\u8282\u70b9 $x$ \u5bf9\u5e94\u7684 $s[l, p]$ \u7684 $p - l + 1 - {len}(x)$ \u4e4b\u548c\u3002$-{len}(x)$ \u5bb9\u6613\u6811\u4e0a\u7ebf\u6bb5\u6811\u524d\u7f00\u548c\u9884\u5904\u7406\uff0c\u4f46 $p - l + 1$ \u8be5\u600e\u4e48\u529e\uff1f\u6bcf\u4e2a\u8282\u70b9\u53ef\u80fd\u5bf9\u5e94\u591a\u4e2a\u957f\u5ea6 $[{len}({fa}(x)) + 1, {len}(x)]$\uff0c\u4e0d\u80fd\u548c $-{len}(x)$ \u653e\u5728\u4e00\u8d77\u9884\u5904\u7406\u3002\u4f46\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u5bb9\u6613\u6c42\u51fa $[ql, qr]$ \u5bf9\u5e94\u7684 $p$ \u7684\u8303\u56f4 $[pl, pr]$\uff0c\u800c\u65f6\u95f4\u6233\u968f\u7740 $p$ \u589e\u5927\u540c\u6837\u8fde\u7eed\uff0c\u56e0\u6b64\u65f6\u95f4\u6233 $t$ \u5bf9\u5e94\u7684 $p - l + 1$ \u53c8\u53ef\u4ee5\u5199\u4e3a $pl + (t - ql)$\u3002\u8be5\u5f0f $pl, ql$ \u90fd\u662f\u5b9a\u503c\uff0c\u53ea\u6709 $t$ \u548c\u6bcf\u4e2a\u8282\u70b9\u6709\u5173\uff0c\u800c\u663e\u7136\u6bcf\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u56e0\u6b64\u7ebf\u6bb5\u6811\u989d\u5916\u7ef4\u62a4\u843d\u5728\u5f53\u524d\u8303\u56f4\u5185\u7684\u65f6\u95f4\u6233\u4e4b\u548c\u4ee5\u53ca\u4e2a\u6570\u5373\u53ef\u3002\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}((n + q)\\log ^ 2 n)$\u3002\n\n\u6ce8\u610f\u7b2c\u4e00\u90e8\u5206\u56e0\u4e3a\u79bb\u7ebf\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u5fc5\u987b $q\\log n$\u3002\u4e3a\u51cf\u5c0f\u7a7a\u95f4\u5f00\u9500\uff0c\u7b2c\u4e8c\u90e8\u5206\u9700\u8981\u79bb\u7ebf dfs \u89e3\u9664\u7956\u5148\u9650\u5236\u505a\u5230\u7a7a\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}((n + q\\log n) \\log ^ 2 n)$\uff0c\u64e6\u65f6\u9650\u901a\u8fc7\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define TIME 1e3 * clock() / CLOCKS_PER_SEC\nusing ll = long long;\nusing uint = unsigned int;\n// using lll = __int128;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nusing ull = unsigned long long;\ninline ll read() {\n  ll x = 0, sgn = 0;\n  char s = getchar();\n  while(!isdigit(s)) sgn |= s == '-', s = getchar();\n  while(isdigit(s)) x = x * 10 + s - '0', s = getchar();\n  return sgn ? -x : x;\n}\ninline void print(ll x) {\n  if(x < 0) return putchar('-'), print(-x);\n  if(x >= 10) print(x / 10);\n  putchar(x % 10 + '0');\n}\nbool Mbe;\nconstexpr int N = 4e5 + 5;\nconstexpr int S = 26;\nbool DEBUG;\nnamespace SA {\n  int sa[N >> 1], rk[N >> 1], ork[N >> 1], buc[N >> 1], id[N >> 1];\n  int n, lg[N >> 1], mi[19][N >> 1];\n  bool cmp(int a, int b, int w) {\n    return ork[a] == ork[b] && ork[a + w] == ork[b + w];\n  }\n  void build(int _n, char *s) {\n    n = _n;\n    int m = 1 << 7, p = 0;\n    for(int i = 1; i <= n; i++) buc[rk[i] = s[i]]++;\n    for(int i = 1; i <= m; i++) buc[i] += buc[i - 1];\n    for(int i = n; i; i--) sa[buc[rk[i]]--] = i;\n    for(int w = 1; ; w <<= 1, m = p, p = 0) {\n      for(int i = n - w + 1; i <= n; i++) id[++p] = i;\n      for(int i = 1; i <= n; i++) if(sa[i] > w) id[++p] = sa[i] - w;\n      memcpy(ork, rk, sizeof(rk));\n      memset(buc, 0, sizeof(buc));\n      p = 0;\n      for(int i = 1; i <= n; i++) buc[rk[i]]++;\n      for(int i = 1; i <= m; i++) buc[i] += buc[i - 1];\n      for(int i = n; i; i--) sa[buc[rk[id[i]]]--] = id[i];\n      for(int i = 1; i <= n; i++) rk[sa[i]] = cmp(sa[i - 1], sa[i], w) ? p : ++p;\n      if(p == n) break;\n    }\n    for(int i = 1, k = 0; i <= n; i++) {\n      if(k) k--;\n      while(s[i + k] == s[sa[rk[i] - 1] + k]) k++;\n      mi[0][rk[i]] = k;\n    }\n    for(int i = 2; i <= n; i++) lg[i] = lg[i >> 1] + 1;\n    for(int i = 1; i <= lg[n]; i++)\n      for(int j = 1; j + (1 << i) - 1 <= n; j++)\n        mi[i][j] = min(mi[i - 1][j], mi[i - 1][j + (1 << i - 1)]);\n  }\n  int lcp(int i, int j) {\n    if(i == j) return n - i + 1;\n    if((i = rk[i]) > (j = rk[j])) swap(i, j);\n    int d = lg[j - i++];\n    return min(mi[d][i], mi[d][j - (1 << d) + 1]);\n  }\n  int lcp(int a, int b, int c, int d) {\n    return min(lcp(a, c), min(b - a, d - c) + 1);\n  }\n}\nnamespace SAM {\n  int cnt = 1, las = 1, s[N >> 1];\n  int son[N][S], fa[N], len[N], ed[N];\n  int edp[N >> 1], anc[19][N];\n  void ins(int it) {\n    int p = las, cur = ++cnt;\n    ed[cur] = len[cur] = len[p] + 1, edp[len[cur]] = cur, las = cur;\n    while(!son[p][it]) son[p][it] = cur, p = fa[p];\n    if(!p) return fa[cur] = 1, void();\n    int q = son[p][it];\n    if(len[p] + 1 == len[q]) return fa[cur] = q, void();\n    int cl = ++cnt;\n    memcpy(son[cl], son[q], S << 2);\n    len[cl] = len[p] + 1, fa[cl] = fa[q];\n    fa[q] = fa[cur] = cl, ed[cl] = ed[q];\n    while(son[p][it] == q) son[p][it] = cl, p = fa[p];\n  }\n  ll f[N], g[N];\n  vector<int> e[N], re[N];\n  bool vis[N], oc[N];\n  int dn, nxt[N], dfn[N], rev[N], top[N], bot[N];\n  void calcf(int id) {\n    if(vis[id]) return;\n    vis[id] = f[id] = 1;\n    for(int it : e[id]) calcf(it), f[id] += f[it];\n  }\n  void calcg(int id) {\n    if(vis[id]) return;\n    vis[id] = 1;\n    for(int it : re[id]) calcg(it), g[id] += g[it];\n  }\n  void dfs(int id, int tp) {\n    dfn[id] = ++dn, rev[dn] = id, top[id] = tp, bot[id] = id;\n    if(nxt[id]) dfs(nxt[id], tp), bot[id] = bot[nxt[id]];\n    for(int it : e[id]) if(!dfn[it] && !oc[it]) dfs(it, it);\n  }\n  void build(int n, char *s) {\n    for(int i = 1; i <= n; i++) ins(SAM::s[i] = s[i] - 'a');\n    for(int i = 1; i <= cnt; i++)\n      for(int j = 0; j < S; j++)\n        if(son[i][j])\n          e[i].push_back(son[i][j]), re[son[i][j]].push_back(i);\n    calcf(1), memset(vis, 0, sizeof(vis)), g[1] = 1;\n    for(int i = 1; i <= cnt; i++) calcg(i);\n    for(int i = 1; i <= cnt; i++)\n      for(int it : e[i])\n        if(g[i] * 2 > g[it] && f[it] * 2 > f[i])\n          nxt[i] = it, oc[it] = 1;\n    dfs(1, 1);\n    for(int i = 1; i <= cnt; i++) anc[0][i] = fa[i];\n    for(int i = 1; i < 19; i++)\n      for(int j = 1; j <= cnt; j++)\n        anc[i][j] = anc[i - 1][anc[i - 1][j]];\n  }\n  int locate(int l, int r) {\n    int L = r - l + 1, p = edp[r];\n    for(int i = 18; ~i; i--) if(len[anc[i][p]] >= L) p = anc[i][p];\n    return p;\n  }\n  vector<pii> partition(int l, int r) {\n    vector<pii> I;\n    int cur = 1;\n    while(l <= r) {\n      cur = son[cur][s[l++]];\n      int bt = bot[cur], R = ed[bt], L = ed[bt] - (dfn[bt] - dfn[cur]) + 1;\n      int ext = l > r ? 0 : SA::lcp(l, r, L, R);\n      I.push_back({dfn[cur], dfn[cur] + ext});\n      cur = rev[dfn[cur] + ext], l += ext;\n    }\n    return I;\n  }\n}\n\nstruct dat {\n  int cnt;\n  ll sind, slen;\n  dat operator + (const dat &x) const {return {cnt + x.cnt, sind + x.sind, slen + x.slen};}\n} val[N << 2];\nvoid modify(int l, int r, int p, int x, dat v) {\n  val[x] = val[x] + v;\n  if(l == r) return;\n  int m = l + r >> 1;\n  if(p <= m) modify(l, m, p, x << 1, v);\n  else modify(m + 1, r, p, x << 1 | 1, v);\n}\ndat query(int l, int r, int ql, int qr, int x) {\n  if(ql <= l && r <= qr) return val[x];\n  int m = l + r >> 1;\n  dat ans = {0, 0, 0};\n  if(ql <= m) ans = query(l, m, ql, qr, x << 1);\n  if(m < qr) ans = ans + query(m + 1, r, ql, qr, x << 1 | 1);\n  return ans;\n}\n\nint n, dn, q, cnt;\nint fa[N], sz[N], dep[N], son[N];\nint rev[N], dfn[N], top[N];\nvector<int> e[N];\nchar s[N >> 1];\nvoid dfs1(int id) {\n  sz[id] = 1, dep[id] = dep[fa[id]] + 1;\n  for(int it : e[id]) {\n    dfs1(it), sz[id] += sz[it];\n    if(sz[son[id]] < sz[it]) son[id] = it;\n  }\n}\nvoid dfs2(int id, int tp) {\n  top[id] = tp, dfn[id] = ++dn, rev[dn] = id;\n  if(son[id]) dfs2(son[id], tp);\n  for(int it : e[id]) if(it != fa[id] && it != son[id]) dfs2(it, it);\n}\n\nstruct BIT {\n  ll c[N], c2[N], sum[N];\n  void init() {\n    for(int i = 1; i <= dn; i++) {\n      int id = rev[i];\n      sum[i] = sum[i - 1] + SAM::len[id] - SAM::len[fa[id]];\n    }\n  }\n  void add(int x, int v) {\n    ll xv = v * sum[x - 1];\n    while(x <= dn) c[x] += v, c2[x] += xv, x += x & -x;\n  }\n  void add(int l, int r, int v) {add(l, v), add(r + 1, -v);}\n  ll query(int x) {\n    ll s = 0, s2 = 0, v = x;\n    while(x) s += c[x], s2 += c2[x], x -= x & -x;\n    return sum[v] * s - s2;\n  }\n  ll query(int l, int r) {return query(r) - query(l - 1);}\n} tr;\n\nll ans[N >> 1];\npair<int, pii> buc[N * 50];\nvoid modify(int x) {\n  while(x) tr.add(dfn[top[x]], dfn[x], 1), x = fa[top[x]];\n}\nll query(int x) {\n  ll s = 0;\n  while(x) s += tr.query(dfn[top[x]], dfn[x]), x = fa[top[x]];\n  return s;\n}\n\nstruct que {int id, l, r;};\nvector<que> qu[N];\nvoid dfs3(int id) {\n  modify(1, SAM::cnt, SAM::dfn[id], 1, {1, SAM::dfn[id], SAM::len[id]});\n  for(que _ : qu[id]) {\n    int i = _.id, l = _.l, r = _.r, acc = 1;\n    auto I = SAM::partition(l, r);\n    for(pii it : I) {\n      dat res = query(1, dn, it.first, it.second, 1);\n      ans[i] += 1ll * res.cnt * (acc - it.first) + res.sind - res.slen;\n      if(!DEBUG) buc[++cnt] = {it.first - 1, {-i, id}};\n      if(!DEBUG) buc[++cnt] = {it.second, {i, id}};\n      acc += it.second - it.first + 1;\n    }\n  }\n  for(int it : e[id]) dfs3(it);\n  modify(1, SAM::cnt, SAM::dfn[id], 1, {-1, -SAM::dfn[id], -SAM::len[id]});\n}\n\nbool Med;\nint main() {\n  fprintf(stderr, \"%.3lf MB\\n\", (&Mbe - &Med) / 1048576.0);\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"1.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"1.out\", \"w\", stdout);\n  #endif\n  cin >> s + 1 >> q, n = strlen(s + 1);\n  reverse(s + 1, s + n + 1);\n  SA::build(n, s), SAM::build(n, s);\n  for(int i = 2; i <= SAM::cnt; i++) e[fa[i] = SAM::fa[i]].push_back(i);\n  dfs1(1), dfs2(1, 1), tr.init();\n  for(int i = 1; i <= q; i++) {\n    int r = n - read() + 1, l = n - read() + 1;\n    int pos = SAM::locate(l, r);\n    qu[pos].push_back({i, l, r});\n  }\n  dfs3(1), sort(buc + 1, buc + cnt + 1);\n  for(int i = 1, p = 1; i <= dn; i++) {\n    modify(SAM::rev[i]);\n    while(buc[p].first == i) {\n      pii it = buc[p].second;\n      int id = abs(it.first), c = it.first / id;\n      ans[id] += query(it.second) * c, p++;\n    }\n  }\n  for(int i = 1; i <= q; i++) print(ans[i]), putchar('\\n');\n  cerr << TIME << \" ms\\n\";\n  return 0;\n}\n/*\n2022/9/29\nauthor: Alex_Wei\nstart coding at 9:15\nfinish debugging at 13:22\n*/\n```",
        "postTime": 1664449784,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1098F \u0416-function"
    },
    {
        "content": "**\u9898\u610f** \uff1a \u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32 $S$\u3002\n\n\u5b9a\u4e49\u51fd\u6570 $f(l,r)$ \u4e3a $S[l,r]$ \u7684\u6bcf\u4e2a\u540e\u7f00\u4e0e $S[l,r]$ \u7684 $\\mathrm{lcp}$ \u4e4b\u548c\u3002\n\n\u8be2\u95ee $q$ \u6b21\uff0c\u6bcf\u6b21\u7ed9\u51fa $l,r$\uff0c\u8bf7\u8f93\u51fa $f(l,r)$\u3002\n\n$n\\leq 2\\times 10^5$ ,\u65f6\u9650$\\texttt{6s}$\u3002\n\n------------\n\n\u540e\u7f00 $i,j$ \u7684 $\\rm lcp$ \u5373\u4e3a\u540e\u7f00\u6811\u4e0a $i,j$ \u4e24\u70b9 $\\rm lca$ \u7684 $dep$ \u3002\n\n\u90a3\u4e48\uff0c $lcp(S[l,r],S[i,r])=\\min(lcadep(i,l),r-i+1)$\u3002\n\n$f(l,r)=\\sum\\limits_{i=l}^r\\min(lcadep(i,l),r-i+1)$\n\n\u5148\u4e0d\u8003\u8651 $\\min$ \uff0c\u5355\u770b $\\sum\\limits_{i=l}^rlcadep(i,l)$ ,\u8fd9\u5c31\u662f [P4211 [LNOI2014]LCA](https://www.luogu.com.cn/problem/P4211)\u3002\n\n\u8fd9\u5bf9\u672c\u9898\u6709\u542f\u793a\u3002\n\n\u8003\u8651 $l$ \u7684\u4e00\u4e2a\u7956\u5148 $u$ \uff0c\u5176\u8fd4\u7956\u8fb9\u7684\u8d21\u732e\u7cfb\u6570\u3002\n\n\u5728 `P4211` \u4e2d\uff0c\u8d21\u732e\u7cfb\u6570\u662f $u$ \u5b50\u6811\u5185 $[l,r]$ \u5185\u7684\u70b9\u6570\u3002\n\n\u4e5f\u5373 $\\sum\\limits_{i=l}^rlcadep(i,l)=\\sum\\limits_{\\text{u\u662fl\u7684\u7956\u5148}}\\sum\\limits_{\\text{v\u662fu\u7684\u5b50\u5b59}}\\big[v\\in[l,r]\\big]$\n\n\u800c\u5728\u672c\u9898\u4e2d\uff0c$r-i+1\\geq lcadep(i,l)\\Rightarrow i\\leq r-lcadep(i,l)+1$\n\n\u8d21\u732e\u7cfb\u6570\u662f $u$ \u5b50\u6811\u5185 $[l,r-dep[u]+1]$ \u5185\u7684\u70b9\u6570\u3002\n\n\u4e5f\u5373 $\\sum\\limits_{i=l}^r\\min(lcadep(i,l),r-i+1)=\\sum\\limits_{\\text{u\u662fl\u7684\u7956\u5148}}\\sum\\limits_{\\text{v\u662fu\u7684\u5b50\u5b59}}\\big[v\\in[l,r-dep[u]+1]\\big]$\n\n\u6ce8\u610f\u8fd9\u91cc\u8003\u8651\u7684\u662f**\u672a\u538b\u7f29**\u7684\u540e\u7f00\u6811\u3002\n\n\u6ce8\u610f\u5230\u6709 $\\big[x\\in[l,r]\\big]=\\Big(\\big[v\\leq r\\big]-\\big[v<l\\big]\\Big)\\big[l\\leq r\\big]$\n\n${\\rm Ans}=\\sum\\limits_{\\text{u\u662fl\u7684\u7956\u5148}}\\sum\\limits_{\\text{v\u662fu\u7684\u5b50\u5b59}}\\Big(\\big[v\\leq r-dep[u]+1\\big]-\\big[v<l\\big]\\Big)\\big[l\\leq r-dep[u]+1\\big]$\n\n\u53ef\u4ee5\u62c6\u6210 $[1,l),[1,r-dep[u]+1]$ \u5206\u522b\u8ba1\u7b97\u3002\n\n- $\\large [1,l)$\n\n$l\\leq r-dep[u]\\Leftrightarrow dep[u]\\leq r-l+1$\u3002\n\n$\\sum\\limits_{\\text{u\u662fl\u7684\u7956\u5148}}\\big[dep[u]\\leq r-l+1\\big]\\sum\\limits_{\\text{v\u662fu\u7684\u5b50\u5b59}}[v<l\\big]$\n\n\u6a21\u4eff `P4211` \u5c06\u70b9 $[1,l)$ \u5230\u6839\u7684\u94fe\u4e0a\u52a0\u4e00\uff0c\u7136\u540e\u67e5\u8be2 $l$ \u5230\u6839\u7684\u94fe\u4e0a\uff0c\u6df1\u5ea6\u4e0d\u8d85\u8fc7 $r-l+1$ \u7684\u70b9\u6743\u548c\u3002\n\n\u8f6c\u5230\u538b\u7f29\u540e\u7f00\u6811\u4e0a\u8ba1\u7b97\u65f6\u6709\u4e00\u4e9b\u7ec6\u8282\u3002\n\n\u4f7f\u7528\u6811\u94fe\u5256\u5206\uff0c\u590d\u6742\u5ea6\u662f $O(n\\log^2n)$ \u7684\u3002\n\n- $\\large [1,r-dep[u]+1]$\n\n\u540e\u8005\u53ef\u4ee5\u770b\u4f5c\u8ba1\u7b97 $l$ \u5230\u6839\u7684\u94fe\u4e0a\u6df1\u5ea6\u4e0d\u8d85\u8fc7 $r-l+1$ \u7684\u90e8\u5206\u6bcf\u4e2a\u70b9 $u$ \u5b50\u6811\u4e2d $[1,r-dep[u]+1]$ \u5185\u7684\u70b9\u6570\u3002\n\n\u628a\u6811\u91cd\u94fe\u5256\u5206\uff0c\u4e00\u4e2a\u8be2\u95ee\u4e2d\u7b26\u5408\u6761\u4ef6\u7684 $u$ \u4f1a\u88ab\u5206\u5230 $O(\\log)$ \u6761\u91cd\u94fe\u4e0a\u8ba1\u7b97\u3002\n\n\u5bf9\u4e8e\u4e00\u6761\u91cd\u94fe\uff0c\u53c2\u4e0e\u8d21\u732e\u7684 $v$ \u5728\u91cd\u94fe\u9876\u7684\u5b50\u6811\u4e2d\uff0c\u800c\u91cd\u94fe\u9876\u5b50\u6811\u5927\u5c0f\u548c\u662f $O(n\\log n)$ \u7684\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee $[l,r]$ \uff0c\u8003\u8651\u4e00\u5bf9 $u,v$ \u80fd\u8d21\u732e\u7684\u6761\u4ef6\u3002\n\n- \u2460 $dep[u]\\leq r-l+1$\n\n- \u2461 $\\text{u\u662fl\u7684\u7956\u5148}$\n\n   \u8bbe $l$ \u4e0e\u91cd\u94fe\u7684 $\\rm lca$ \u4e3a $t_2$ \uff0c\u7b49\u4ef7\u4e8e $dep[u]\\leq dep[t_2]$\u3002\n\n- \u2462 $\\text{v\u662fu\u7684\u5b50\u5b59}$\n\n   \u8bbe  $v$ \u4e0e\u91cd\u94fe\u7684 $\\rm lca$ \u4e3a $t_1$ \uff0c\u7b49\u4ef7\u4e8e $dep[u]\\leq dep[t_1]$\u3002\n\n- \u2463 $v\\le r-dep[u]+1$\n\n   \u5373 $v+dep[u]\\leq r+1$\n   \n\u6211\u4eec\u628a\u6ee1\u8db3\u6761\u4ef6 \u2460 \u7684\u70b9\u5bf9 $u,v$ \u53d8\u6210\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9 $(dep[u],v+dep[u])$\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee $[l,r]$ ,\u5c31\u662f\u8981\u8ba1\u7b97\u77e9\u9635 $\\big[1,min(dep[t_2],r-l+1)\\big]\\big[1,r+1\\big]$ \u4ee5\u5185\u7684\u70b9\u6570\u3002\u8fd9\u5c31\u662f\u4e8c\u7ef4\u504f\u5e8f\u4e86\u3002\n\n\u7136\u800c\uff0c\u6ee1\u8db3 \u2460 \u7684\u70b9\u5bf9 $u,v$ \u53ef\u80fd\u5f88\u591a\uff0c\u4e0d\u80fd\u66b4\u529b\u52a0\u5165\uff0c\u8003\u8651\u89c2\u5bdf\u8fd9\u4e9b\u70b9\u5bf9\u7684\u6027\u8d28\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a $v$ \uff0c\u6ee1\u8db3\u6761\u4ef6\u7684 $u$ \u662f\u4e00\u4e2a\u524d\u7f00\uff08$dep[u]\\leq dep[t_1]$\uff09 \n\n\u8f6c\u5316\u6210 $(dep[u],v+dep[u])$ \u4e4b\u540e\uff0c\u5219\u662f\u4e00\u6761\u659c\u7ebf\uff08\u4e0a\u8fde\u7eed\u7684\u82e5\u5e72\u6574\u70b9\uff09\u3002\n\n\u800c\u524d\u9762\u8bf4\u4e86\uff0c$v$ \u7684\u603b\u89c4\u6a21\u662f $O(n\\log n)$ \u7684\uff0c\u90a3\u4e48\u9700\u8981\u52a0\u5165\u7684\u659c\u7ebf\u6761\u6570\u4e5f\u662f\u8fd9\u4e2a\u91cf\u7ea7\u3002\n\n\u95ee\u9898\u5b8c\u5168\u8f6c\u5316\u6210\u4e86\u8fd9\u4e9b\u201c\u659c\u7ebf\u201d\u7684\u4e8c\u7ef4\u504f\u5e8f\uff0c\u5982\u56fe\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/fgx0939j.png)\n\n\u628a\u659c\u7ebf\u6bb5\u62c6\u6210\u4e24\u6761\u659c\u5c04\u7ebf\u7684\u5dee\u3002\u6211\u4eec\u53ef\u4ee5\u65ad\u8a00\uff0c\u4e00\u6761\u659c\u5c04\u7ebf\u5fc5\u7136\u7a7f\u8fc7\u9650\u5236\u77e9\u5f62\u7684\u53f3\u4fa7(\u84dd\u8272)\u6216\u8005\u4e0a\u4fa7(\u7eff\u8272)\uff0c\u5982\u56fe\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/pasql4n5.png)\n\n\u5bf9\u4e8e\u7a7f\u8fc7\u53f3\u4fa7\u7684\u659c\u5c04\u7ebf\uff0c\u5176\u5728\u77e9\u5f62\u5185\u7684\u957f\u5ea6\u4e3a\u8d77\u59cb\u70b9 $x$ \u5750\u6807\u4e0e\u53f3\u8fb9\u754c $x$ \u5750\u6807\u7684\u5dee\u3002\n\n\u5bf9\u4e8e\u7a7f\u8fc7\u4e0a\u8fb9\u754c\u7684\uff0c\u5219\u548c $y$ \u5750\u6807\u6709\u5173\u3002\u8003\u8651\u5206\u522b\u7edf\u8ba1\u3002\n\n\u82e5\u77e9\u5f62\u53f3\u4e0a\u89d2\u4e3a $(x_L,y_L)$ \u76f4\u7ebf $y=x+b$ \u4e0e $x=x_L$ \u7684\u4ea4\u70b9\u4f1a\u662f $x_L+b$\u3002\n\n\u82e5 $x_L+b\\leq y_L\\Leftrightarrow b\\leq y_l-x_l$ \u5219\u4e0e\u53f3\u4fa7\u76f8\u4ea4\u3002\u533a\u95f4\u6c42\u548c\u5373\u53ef\u3002\u9700\u8981\u7ef4\u62a4 $x,$ \u5750\u6807\u548c\u4ee5\u53ca\u8d77\u59cb\u70b9\u4e2a\u6570\u3002\n\n\u5bf9\u4e8e\u4e0e\u4e0a\u4fa7\u76f8\u4ea4\u7684\u60c5\u51b5\uff0c\u7ffb\u8f6c\u5750\u6807\u7cfb\u5904\u7406\u5373\u53ef\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(n\\log ^2n)$\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u8f83\u4e3a\u590d\u6742\uff0c\u6211\u5199\u4e86\u6574\u6574\u4e00\u5929\u2026\u2026\n\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#define pb push_back\n#define ll long long\n#define MaxN 200500\nusing namespace std;\nstruct Node{int t[26],f,len,p,tf;}a[MaxN<<1];\nint tn,las;\nvoid ins(int c)\n{\n  int p=las,np=++tn;las=np;\n  a[np].len=a[p].len+1;\n  for (;p&&!a[p].t[c];p=a[p].f)a[p].t[c]=np;\n  if (!p)a[np].f=1;\n  else {\n    int v=a[p].t[c];\n    if (a[v].len==a[p].len+1)a[np].f=v;\n    else {\n      int nv=++tn;a[nv]=a[v];\n      a[nv].len=a[p].len+1;\n      for (;p&&a[p].t[c]==v;p=a[p].f)a[p].t[c]=nv;\n      a[np].f=a[v].f=nv;\n    }\n  }\n}\nvector<int> g[MaxN<<1];\nint ed[MaxN<<1],td[MaxN],\n    in[MaxN<<1],tim,siz[MaxN<<1];\nvoid pfs1(int u)\n{\n  siz[u]=1;\n  for (int i=0,v;i<g[u].size();i++){\n   \tpfs1(v=g[u][i]);\n   \tsiz[u]+=siz[v];\n   \tif (siz[v]>siz[a[u].p])\n   \t  a[u].p=v;\n  }\n}\nvoid pfs2(int u,int tf)\n{\n  a[u].tf=tf;in[u]=++tim;\n  if (a[u].p){\n    pfs2(a[u].p,tf);\n    for (int i=0;i<g[u].size();i++)\n      if (a[u].p!=g[u][i])\n     \t  pfs2(g[u][i],g[u][i]);\n  }\n}\nint wfl,wfr,wfd;\nstruct SGT{\n  struct SGT_Node{\n    ll s,len;int tg;\n    inline void ladd(int t)\n    {tg+=t;s+=len*t;}\n  }a[MaxN<<3];\n  int dl[MaxN<<1],dr[MaxN<<1];\n  void build(int l,int r,int u)\n  {\n    if (l==r){a[u].len=dr[l]-dl[l]+1;return ;}\n    int mid=(l+r)>>1;\n    build(l,mid,u<<1);\n    build(mid+1,r,u<<1|1);\n    a[u].len=a[u<<1].len+a[u<<1|1].len;\n  }\n  inline void ladd(int u){\n    if (a[u].tg){\n      a[u<<1].ladd(a[u].tg);\n      a[u<<1|1].ladd(a[u].tg);\n      a[u].tg=0;\n    }\n  }\n  void add(int l,int r,int u)\n  {\n    if (wfl<=l&&r<=wfr){a[u].ladd(1);return ;}\n    int mid=(l+r)>>1;ladd(u);\n    if (wfl<=mid)add(l,mid,u<<1);\n    if (mid<wfr)add(mid+1,r,u<<1|1);\n    a[u].s=a[u<<1].s+a[u<<1|1].s;\n  }\n  int qryp(int l,int r,int u)\n  {\n    if (l==r)return l;\n    int mid=(l+r)>>1;ladd(u);\n    if (wfr<=mid)return qryp(l,mid,u<<1);\n    if (mid<wfl)return qryp(mid+1,r,u<<1|1);\n    if (wfd>=dl[mid+1])return qryp(mid+1,r,u<<1|1);\n    return qryp(l,mid,u<<1);\n  }\n  ll qrys(int l,int r,int u)\n  {\n    if (wfl<=l&&r<=wfr)return a[u].s;\n    int mid=(l+r)>>1;ll ret=0;ladd(u);\n    if (wfl<=mid)ret=qrys(l,mid,u<<1);\n    if (mid<wfr)ret+=qrys(mid+1,r,u<<1|1);\n    return ret;\n  }\n  void add(int l,int r)\n  {wfl=l;wfr=r;add(1,tn,1);}\n  int qryp(int l,int r)\n  {wfl=l;wfr=r;return qryp(1,tn,1);}\n  ll qrys(int l,int r)\n  {wfl=l;wfr=r;return qrys(1,tn,1);}\n}S;\nvoid padd(int u){\n  while(u){\n    S.add(in[a[u].tf],in[u]);\n    u=a[a[u].tf].f;\n  }\n}\nll pqry(int u)\n{\n  ll ret=0;\n  while(u){\n    if (a[a[a[u].tf].f].len<wfd){\n      if (a[u].len<=wfd)\n        ret+=S.qrys(in[a[u].tf],in[u]);\n      else {\n        int p=S.qryp(in[a[u].tf],in[u]);\n        ll s0=0,s1=0;\n        if (in[a[u].tf]<p)\n          s0=S.qrys(in[a[u].tf],p-1);\n        s1=S.qrys(p,p);\n        ret+=s0+s1/(S.dr[p]-S.dl[p]+1)*max(0,min(S.dr[p],wfd)-S.dl[p]+1);\n      }\n    }u=a[a[u].tf].f;\n  }return ret;\n}\nstruct BIT{\n  #define lbit(x) ((x)&-(x))\n  ll t[MaxN<<2];int l,n;\n  void add(int p,int x){\n    p-=l;\n    while(p<=n){t[p]+=x;p+=lbit(p);}\n  }\n  ll qry(int p){\n    ll ret=0;p-=l;\n    while(p){ret+=t[p];p^=lbit(p);}\n    return ret;\n  }\n}Tc,Tx;\nstruct Data{int x,y,p;}p[MaxN<<1];\nbool cmp(const Data A,const Data B)\n{return A.x<B.x;}\nvector<Data> b[MaxN<<1],b2[MaxN];\nvoid adq(int u,int r,int i,int lim){\n  while(u){\n    b[a[u].tf].pb((Data){min(a[u].len,lim)+1,r+1,i});\n    u=a[a[u].tf].f;\n  }\n}\nint n,tot,fl,fl2;\nvoid dfs(int u)\n{\n  if (ed[u]){\n    p[++tot]=(Data){fl+1,ed[u]+fl+1,-1};\n    p[++tot]=(Data){fl2+1,ed[u]+fl2+1,1};\n  }for (int i=0;i<g[u].size();i++)dfs(g[u][i]);\n}\nll ans[MaxN];\nvoid calc(vector<Data> &b)\n{\n  int tp=1;\n  for (int i=0;i<b.size();i++){\n    Data q=b[i];\n    while(tp<=tot&&p[tp].x<=q.x){\n      int to=p[tp].y-p[tp].x;\n      Tx.add(to,p[tp].p*p[tp].x);\n      Tc.add(to,p[tp].p);tp++;\n    }\n    int l=-n*2,r=q.y-q.x;\n    ans[q.p]+=1ll*(Tc.qry(r)-Tc.qry(l-1))*q.x\n                 -(Tx.qry(r)-Tx.qry(l-1));\n  }\n  for (int i=1;i<tp;i++){\n    int to=p[i].y-p[i].x;\n    Tx.add(to,-p[i].p*p[i].x);\n    Tc.add(to,-p[i].p);\n  }\n}\nvoid solve(int u)\n{\n  int v=u;\n  fl2=a[a[u].f].len;tot=0;\n  while(v){\n    fl=a[v].len;\n    if (ed[v]){\n      p[++tot]=(Data){fl+1,ed[v]+fl+1,-1};\n      p[++tot]=(Data){fl2+1,ed[v]+fl2+1,1};\n    }\n    for (int i=0;i<g[v].size();i++)\n      if (g[v][i]!=a[v].p)\n        dfs(g[v][i]);\n    v=a[v].p;\n  }sort(p+1,p+tot+1,cmp);\n  sort(b[u].begin(),b[u].end(),cmp);\n  calc(b[u]);\n  for (int i=1;i<=tot;i++)swap(p[i].x,p[i].y);\n  for (int i=0;i<b[u].size();i++){\n    swap(b[u][i].x,b[u][i].y);\n    b[u][i].y--;\n  }sort(p+1,p+tot+1,cmp);\n  sort(b[u].begin(),b[u].end(),cmp);\n  calc(b[u]);\n}\nint q,lf[MaxN];\nchar str[MaxN];\nint main()\n{\n  scanf(\"%s\",str+1);\n  n=strlen(str+1);\n  las=tn=1;\n  for (int i=n;i;i--)ins(str[i]-'a');\n  for (int i=n,p=1;i;i--){\n  \tp=a[p].t[str[i]-'a'];\n  \ted[td[i]=p]=i;\n  }\n  for (int i=2;i<=tn;i++)\n    g[a[i].f].pb(i);\n  pfs1(1);pfs2(1,1);\n  scanf(\"%d\",&q);\n  for (int i=1,l,r;i<=q;i++){\n    scanf(\"%d%d\",&l,&r);\n    adq(td[l],r+1,i,r-l+1);\n    b2[l].pb((Data){l,r,i});\n  }\n  Tc.l=Tx.l=-n*2-1;\n  Tc.n=Tx.n=n*4+1;\n  for (int i=1;i<=tn;i++)\n    if (a[i].tf==i)solve(i);\n  for (int i=1;i<=tn;i++){\n    S.dl[in[i]]=a[a[i].f].len+1;\n    S.dr[in[i]]=a[i].len;\n  }S.build(1,tn,1);\n  for (int i=1;i<=n;i++){\n    for (int j=0;j<b2[i].size();j++){\n      wfd=b2[i][j].y-i+1; \n      ans[b2[i][j].p]-=pqry(td[i]);\n    }padd(td[i]);\n  }\n  for (int i=1;i<=q;i++)\n    printf(\"%lld\\n\",ans[i]);\n  return 0;\n}\n```",
        "postTime": 1603112361,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1098F \u3010\u0416-function\u3011"
    },
    {
        "content": "\u9996\u5148\u628a\u539f\u4e32\u7ffb\u8f6c\uff0c\u6240\u6709\u540e\u7f00\u7684 LCP \u53d8\u6210\u6240\u6709\u524d\u7f00\u7684 LCS\u3002\u8003\u8651\u653e\u5230 SAM \u4e0a\u6c42\u89e3\uff0c\u90a3\u4e48\u4e24\u4e2a\u540e\u7f00 $(x,y)$ \u7684 LCS \u5373\u4e3a $len_{LCA(p_x,p_y)}$\uff08$p_i$ \u4e3a\u524d\u7f00 $i$ \u5728 SAM \u4e0a\u7684\u4f4d\u7f6e\uff09\uff0c\u7b54\u6848\u5373\u4e3a $\\sum_{i=l}^r\\min(i-l+1,len_{LCA(p_i,p_r)})$\u3002\n\n\u6211\u4eec\u5e0c\u671b\u5bf9\u4e8e\u6bcf\u4e2a LCA \u90fd\u80fd\u6c42\u51fa\u6765\u5b83\u5bf9\u5e94\u7684\u8d21\u732e\u3002\u6839\u636e [P4482 [BJWC2018]Border \u7684\u56db\u79cd\u6c42\u6cd5](https://www.luogu.com.cn/problem/P4482) \u7684\u5957\u8def\uff0c\u5bf9 parent tree \u8fdb\u884c\u6811\u94fe\u5256\u5206\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u91cd\u94fe\u5206\u522b\u8ba1\u7b97\u8d21\u732e\u3002\n\n\uff08\u56fe\u7247\u6765\u6e90\uff1a[Alex_Wei \u7684\u9898\u89e3](https://www.luogu.com.cn/blog/AlexWei/solution-p4482)\uff09\n\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mxzwmam1.png)\n\n\u5047\u5982\u6709\u4e00\u4e2a\u8be2\u95ee\u533a\u95f4 $[l,r]$\uff0c\u4ee4 $x=p_r$\uff0c\u5e76\u4e14 $x$ \u5728 $x_4$ \u7684\u5b50\u6811\u3002\u90a3\u4e48\uff0c$t\\to x_3$ \u8fd9\u6761\u94fe\u4ee5\u53ca\u94fe\u4e0a\u7ed3\u70b9\u7684\u5b50\u6811\uff08\u9664 $x_4$ \u5916\uff09\u4e2d\u7684\u70b9\u4e0e $x$ \u7684 LCA \u5747\u5728\u8fd9\u6761\u91cd\u94fe\u4e0a\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u7ed3\u70b9 $z$ \u4e0e $x$ \u7684 LCA \u4e3a $t$\uff0c$x_2$ \u4e0e $x$ \u7684 LCA \u4e3a $x_2$\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e9b\u7ed3\u70b9\u4e0e $x$ \u7684 LCA \u4ec5\u4e0e\u5b83\u4eec\u81ea\u5df1\u6709\u5173\uff0c\u662f\u56fa\u5b9a\u7684\u3002\u8003\u8651\u8f6c\u5316\u8d21\u732e\u5f0f\u5b50\uff1a\n\n$$\n\\min(i-l+1,len_{LCA(p_i,x)})=\n\\begin{cases}\ni-l+1 & len_{LCA(x,p_i)}\\ge i-l+1\\\\\nlen_{LCA(x,p_i)} & len_{LCA(x,p_i)}< i-l+1\\\\\n\\end{cases}\n$$\n\n\u5206\u79bb\u53ea\u548c $i$ \u6709\u5173\u7684\uff0c\u4ee5\u53ca\u53ea\u548c $x$ \u6709\u5173\u7684\u9879\uff1a\n\n$$\n\\min(i-l+1,len_{LCA(p_i,x)})=\n\\begin{cases}\ni-(l-1) & i-len_{anc_{p_i}}+1\\le l\\\\\nlen_{anc_{p_i}} & i-len_{anc_{p_i}}+1> l\\\\\n\\end{cases}\n$$\n\n\uff08$anc_{i}$ \u8868\u793a $i$ \u7684\u7956\u5148\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\uff0c\u4e14\u5728\u8fd9\u6761\u91cd\u94fe\u4e0a\u7684\u7ed3\u70b9\uff09\n\n\u6ce8\u610f\u5230 $i\\in [l,r]$\uff0c\u5982\u679c\u6309\u7167 dfs \u7684\u987a\u5e8f\u52a0\u70b9\u548c\u52a0\u8be2\u95ee\uff0c\u90a3\u5c31\u53d8\u6210\u4e86\u4e00\u9053\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\u3002CDQ \u5206\u6cbb + \u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u89e3\u51b3\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f $x_3\\to y$ \u8fd9\u4e00\u90e8\u5206\uff0c\u8fd9\u662f\u5f88\u597d\u89e3\u51b3\u7684\uff0c\u56e0\u4e3a\u6b64\u65f6 $LCA(p_i,x)=anc_x$\uff0c\u662f\u56fa\u5b9a\u7684\u3002\u8fd9\u4e2a\u65f6\u5019\u5206\u7c7b\u7684\u4f9d\u636e\u53ea\u548c $i$ \u6709\u5173\uff0c\u662f\u4e8c\u7ef4\u504f\u5e8f\uff0c\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u89e3\u51b3\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^3 n)$\uff0c\u4f46\u6811\u5256\uff0cCDQ \u548c\u6811\u72b6\u6570\u7ec4\u7684\u5e38\u6570\u90fd\u4e0d\u5927\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int Maxn=4e5;\n\nint n,m,idx[Maxn+5],pos[Maxn+5]; char s[Maxn+5];\nint siz[Maxn+5],son[Maxn+5]; ll ans[Maxn+5];\nint st[Maxn+5],dfn[Maxn+5],vis[Maxn+5],top,cur;\nint fa[Maxn+5],len[Maxn+5],ch[Maxn+5][26],tot=1,lst=1;\nstruct Node{int x,y,id;} f[Maxn*4+5];\nvector<int> v[Maxn+5];\nvector<pair<int,int>> q[Maxn+5];\n\nstruct SegTree\n{\n    ll t[Maxn+5];\n    #define lowbit(x) (x&-x)\n    inline void Add(int x,int y) {while(x<=n) t[x]+=y,x+=lowbit(x);}\n    inline ll Count(int x) {ll res=0; while(x){res+=t[x],x-=lowbit(x);} return res;}\n    inline ll Count(int l,int r)\n    {\n        l=max(l,1),r=min(r,n);\n        return (l<=r?Count(r)-Count(l-1):0ll);\n    }\n} T1,T2,T3;\n\ninline void predfs(int x)\n{\n    siz[x]=1,dfn[x]=++cur;\n    for(auto y:v[x]) predfs(y),siz[x]+=siz[y],son[x]=(siz[y]>siz[son[x]]?y:son[x]);\n}\ninline int Insert(int x)\n{\n    int p=lst,k=++tot; len[k]=len[p]+1,lst=k;\n    while(p && !ch[p][x]) ch[p][x]=k,p=fa[p];\n    if(!p) fa[k]=1;\n    else\n    {\n        int q=ch[p][x];\n        if(len[q]==len[p]+1) fa[k]=q;\n        else\n        {\n            fa[++tot]=fa[q],memcpy(ch[tot],ch[q],sizeof(ch[q]));\n            fa[k]=fa[q]=tot,len[tot]=len[p]+1;\n            while(p && ch[p][x]==q) ch[p][x]=tot,p=fa[p];\n        }\n    }\n    return k;\n}\ninline int cmp1(Node a,Node b) {return a.x<b.x;}\ninline int cmp2(Node a,Node b) {return a.y<b.y;}\ninline void Add(int x,int y,int op) {T1.Add(x,op*x),T2.Add(x,op),T3.Add(x,-op*(x-y+1));}\ninline void cdq(int l,int r)\n{\n    if(l==r) return;\n    int mid=(l+r)>>1,it=l; cdq(l,mid),cdq(mid+1,r);\n    sort(f+l,f+mid+1,cmp2),sort(f+mid+1,f+r+1,cmp1);\n    For(i,l,mid) if(!f[i].id) T3.Add(f[i].x,f[i].x-f[i].y+1);\n    For(i,mid+1,r)\n    {\n        while(it<=mid && f[it].y<=f[i].x)\n        {\n            if(!f[it].id) Add(f[it].x,f[it].y,1);\n            it++;\n        }\n        if(f[i].id)\n        {\n            int l=f[i].x,r=f[i].y;\n            ll a=T1.Count(l,r),b=T2.Count(l,r),c=T3.Count(l,r);\n            ans[f[i].id]+=(a-b*l+b+c);\n        }\n    }\n    For(i,l,it-1) if(!f[i].id) Add(f[i].x,f[i].y,-1);\n    For(i,l,mid) if(!f[i].id) T3.Add(f[i].x,f[i].y-f[i].x-1);\n}\ninline void Query(int x)\n{\n    int r=pos[x];\n    for(auto i:q[x])\n    {\n        int l=i.first,id=i.second;\n        f[++tot]=(Node){l,r,id};\n    }\n    for(auto y:v[x]) if(!vis[y]) Query(y);\n}\ninline void Answer(int l,int r,int k,int id)\n{\n    ll a=T1.Count(l,min(l+k-1,r)),b=T2.Count(l,min(l+k-1,r)),c=T2.Count(l+k,r);\n    ans[id]+=(a-b*l+b+c*k);\n}\ninline void Query2(int x,int k)\n{\n    int r=pos[x];\n    for(auto i:q[x])\n    {\n        int l=i.first,id=i.second;\n        Answer(l,r,k,id);\n    }\n    for(auto y:v[x]) if(!vis[y]) Query2(y,k);\n}\ninline void Update(int x,int l)\n{\n    if(pos[x]) f[++tot]=(Node){pos[x],pos[x]-l+1,0};\n    for(auto y:v[x]) if(!vis[y]) Update(y,l);\n}\ninline void Update2(int x,int op)\n{\n    if(pos[x]) T1.Add(pos[x],op*pos[x]),T2.Add(pos[x],op);\n    for(auto y:v[x]) if(!vis[y]) Update2(y,op);\n}\ninline void dfs(int x)\n{\n    for(int i=x;i;i=son[i]) for(auto y:v[i]) if(y!=son[i]) dfs(y);\n    for(int i=x;i;i=son[i]) st[++top]=i,vis[i]=1;\n    tot=0;\n    for(int i=x;i;i=son[i])\n    {\n        if(pos[i]) f[++tot]=(Node){pos[i],pos[i]-len[i]+1,0};\n        for(auto j:q[i])\n        {\n            int l=j.first,id=j.second,r=pos[i];\n            f[++tot]=(Node){l,r,id};\n        }\n        for(auto y:v[i]) if(y!=son[i]) Query(y),Update(y,len[i]);\n    }\n    cdq(1,tot);\n    Rof(id,top,1)\n    {\n        int i=st[id]; reverse(v[i].begin(),v[i].end());\n        for(auto y:v[i]) if(y!=son[i]) Query2(y,len[i]),Update2(y,1);\n        reverse(v[i].begin(),v[i].end());\n        for(auto j:q[i])\n        {\n            int l=j.first,id=j.second,r=pos[i];\n            Answer(l,r,len[i],id);\n        }\n        if(pos[i]) T1.Add(pos[i],pos[i]),T2.Add(pos[i],1);\n    }\n    for(int i=x;i;i=son[i]) Update2(i,-1),vis[i]=0;\n    top=0;\n}\n\nint main()\n{\n    scanf(\"%s\",s+1),n=strlen(s+1);\n    reverse(s+1,s+n+1);\n    For(i,1,n) pos[idx[i]=Insert(s[i]-'a')]=i;\n    For(i,2,tot) v[fa[i]].push_back(i);\n    scanf(\"%d\",&m);\n    For(i,1,m)\n    {\n        int l,r; scanf(\"%d%d\",&l,&r);\n        l=n+1-l,r=n+1-r,swap(l,r);\n        q[idx[r]].emplace_back(l,i);\n    }\n    predfs(1),dfs(1);\n    For(i,1,m) printf(\"%lld\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1672218475,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1098F\u3010\u0416-function\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u57fa\u4e8e\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u89e3\u6cd5\u3002\n\n\u901a\u8fc7\u7b80\u5355\u7684 SAM \u8f6c\u5316\uff0c\u6211\u4eec\u5f97\u5230\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\n\n\u4e00\u68f5\u6811\uff0c\u70b9\u5e26\u6743 $v$\uff1b\u5b58\u5728\u6620\u5c04\u5173\u7cfb $rk$\uff08\u4ece $id \\in [1,n]$ \u6620\u5c04\u5230\u6811\u4e0a\u7684\u8282\u70b9\uff09\u3002\u6bcf\u6b21\u7ed9 $l,r,u$\uff0c\u6c42\n\n$$\\sum _{i=l}^r \\min (v_{lca(u,rk_i)},r-i+1)$$\n\n\u5982\u679c\u6ca1\u6709 $\\min$ \u5c31\u662f\u7ecf\u5178\u95ee\u9898\u3002\u8003\u8651\u5dee\u5206\u540e\u626b\u63cf\u7ebf\u3002\n\n\u4ece $u$ \u5411\u4e0a\u8df3\u91cd\u94fe\u3002\u8003\u8651\u94fe $(x,top_x)$\u3002\n\n\u5bf9\u4e8e $x$\uff1a\n\n1. $v_x \\le r-i+1$ \u5373 $i \\le r-v_x +1$\u3002\n\n\u5373\u5b50\u6811\u6263\u6389\u4e86\u67d0\u5b50\u6811\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684 $i$ \u7684\u6570\u91cf\u3002\n\n2. $v_x > r-i+1$\n\n\u540c\u7406\u3002\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684 $i$ \u548c\u3002\n\n\u5bf9\u4e8e $p\\in fa_x \\to top_x$\uff1a\n\n$v_p\\le r-i+1$ \u5373 $v_p +i-1 \\le r$\u3002\u5206\u6210 $v_p +i-1 \\le r$ \u548c $v_p +i-1 > r$ \u5373\u53ef\u3002\n\n\u4e0a\u9762\u4e24\u4e2a\u4e1c\u897f\u90fd\u662f\u4e09\u7ef4\u504f\u5e8f\u6a21\u578b\uff08\u56e0\u4e3a\u626b\u63cf\u7ebf\u8981\u52a0\u70b9\uff09\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8f7b\u91cd\u94fe\u5256\u5206\u4f1a\u9020\u6210 $O(n\\log n)$ \u6b21\u67e5\u8be2\u3002\n\n\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log ^3 n)$\u3002\n\n\u8003\u8651\u4f18\u5316\u3002\n\n\u6709\u4e00\u4e2a\u53eb\u201c\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u201d\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u81f3 $O(\\log ^2 n)$\u3002\n\n\u4e0d\u4f1a\u7684\u53ef\u4ee5\u770b\u4e00\u4e0b\uff1a\n\n\u5982\u679c\u6211\u4eec\u5bf9\u6bcf\u6761\u91cd\u94fe\u5efa\u7acb\u5e73\u8861\u4e8c\u53c9\u6811\u7ed3\u6784\uff0c\u90a3\u4e48\u6bcf\u4e2a\u91cd\u94fe\u7684\u524d\u7f00\u5c31\u53ef\u4ee5\u5728\u4e8c\u53c9\u6811\u7ed3\u6784\u4e0a\u641c\u7d22\u51fa\u6765\u3002\n\n\u7136\u800c\u8fd9\u5e76\u6ca1\u6709\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u6240\u4ee5\u8003\u8651\u7ed9\u6bcf\u4e2a\u70b9\u52a0\u6743\u3002\u6743\u4e3a\u5176\u5b50\u6811\u5927\u5c0f\u51cf\u53bb\u91cd\u513f\u5b50\u5b50\u6811\u5927\u5c0f\u3002\n\n\u7136\u540e\u5efa\u7acb\u5e26\u6743\u5e73\u8861\u4e8c\u53c9\u6811\u7ed3\u6784\u3002\u7406\u89e3\u4e00\u4e0b\uff0c\u53d1\u73b0\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u70b9\u6ee1\u8db3\u5c06\u5e8f\u5217\u5212\u5206\u4e3a\u4e24\u534a\uff0c\u4f7f\u5f97\u6bcf\u4e00\u534a\u7684\u548c\u5747\u4e0d\u8d85\u8fc7\u603b\u548c\u7684\u4e00\u534a\u3002\n\n\u90a3\u4e48\u6bcf\u4e2a\u70b9\u5728\u5e26\u6743\u5e73\u8861\u4e8c\u53c9\u6811\u548c\u8f7b\u8fb9\u4e0a\u8df3\u5b50\u6811\u5927\u5c0f\u5747\u7ffb\u500d\u3002\u6240\u4ee5\u8df3 $O(\\log n)$ \u6b21\u3002\n\n\u6211\u4eec\u91cd\u65b0\u8003\u8651\u3002\n\n\u5bf9\u4e8e $x$\uff1a\n\n\u6211\u4eec\u53d1\u73b0\u67e5\u8be2\u7684\u672c\u8d28\u4e0a\u662f\u4ed6\u7684\u5230\u94fe\u5e95\u7684\u70b9\u7684\u8f7b\u5b50\u6811\u548c\u4ed6\u5230\u94fe\u5e95\u4e0a\u7684\u70b9\u51cf\u53bb\u4ed6\u7684\u67d0\u4e2a\u5b50\u6811\u3002\u8fd9\u4e2a\u4e5f\u662f\u53ef\u4ee5\u5728\u5e26\u6743\u5e73\u8861\u4e8c\u53c9\u6811\u4e0a\u641c\u7d22\u51fa\u6765\u7684\u3002\n\n\u90a3\u4e48\u5728\u52a0\u70b9\u7684\u65f6\u5019\u5c31\u5bf9\u6240\u6709\u8f7b\u5b50\u6811\u5305\u542b\u4ed6\u7684 $O(\\log n)$ \u4e2a\u70b9\u52a0\u8d21\u732e\u3002\u5728\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u4e0a\u8df3\uff0c\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u5bf9\u4e8e $fa_x \\to top_x$\uff1a\n\n\u53d8\u6210\u4e86\u524d\u7f00\u800c\u5df2\u3002\u662f\u540c\u7406\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log ^2 n)$\u3002\n\n\u771f\u7684\u5f88\u96be\u5199\u3002\u3002\u8fd8\u8981\u7a0d\u5fae\u5730\u5361\u4e0b\u5e38\u3002\u6211\u7528\u7684\u662f AVL \u52c9\u5f3a\u80fd\u8fc7\u3002AVL \u63d2\u5165\u8f83\u6162\uff08\u5bf9\u4e8e\u7ea2\u9ed1\u6811\u800c\u8a00\uff09\u4f46\u67e5\u8be2\u8f83\u5feb\u3002\u672c\u9898\u7684\u74f6\u9888\u5728\u4e8e\u67e5\u8be2\uff0c\u6240\u4ee5 AVL \u6bd4\u8f83\u5408\u9002\u3002\u6211\u662f\u64e6\u7740\u8fb9\u8fc7\u7684\uff0c\u5176\u4ed6\u5e73\u8861\u6811\u53ef\u80fd\u96be\u4ee5\u901a\u8fc7\u6216\u8005\u8981\u5927\u529b\u5361\u5e38\u3002\n\n[CF \u8bc4\u6d4b\u8bb0\u5f55](https://codeforces.com/contest/1098/submission/152275041)",
        "postTime": 1648792173,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1098F \u0416-function"
    },
    {
        "content": "[\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/CF1098F)\n\n>\u9898\u610f\uff1a  \n\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b9a\u4e49 $S$ \u7684\u6bcf\u4e2a\u540e\u7f00\u4e0e $S$ \u7684 $\\operatorname{lcp}$ \u4e4b\u548c \u4e3a $\\operatorname{\u0416}(S)$\u3002  \n$q$ \u6b21\u8be2\u95ee\u67e5\u8be2 $\\operatorname{\u0416}(S_{l\\dots r})$ \u7684\u503c\u3002  \n$|S|,q\\leq 2\\times 10^5$\n\n\u63d0\u4f9b\u4e00\u79cd $\\text{SAM+dsu on tree}$ \u7684\u89e3\u6cd5\u3002\n\n\u5148\u628a\u539f\u5e8f\u5217\u53cd\u8fc7\u6765\uff0c\u5efa\u51fa\u540e\u7f00\u81ea\u52a8\u673a\u3002\n\n\u8bbe $\\text{parent}$ \u6811\u4e0a\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u539f\u5e8f\u5217\u4f4d\u7f6e\u4e3a $pos_x$\uff0c\u514b\u9686\u8282\u70b9\u4e3a $0$\u3002\u518d\u8bbe\u539f\u5e8f\u5217\u4e2d\u4f4d\u7f6e $i$ \u5bf9\u5e94 $\\text{parent}$ \u6811\u4e0a\u7684\u70b9\u4e3a $rev_i$\u3002\n\n\u5219 $\\operatorname{\u0416}(S_{l\\dots r}) =\\sum\\limits_{pos_x\\in[l,r]}\\min(len_{\\operatorname{lca}(x,rev_r)},pos_x-l+1)$\u3002\n\n\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u6bcf\u4e2a $rev_r$ \u7684\u70b9\u4e0a\u8bb0\u5f55\u5bf9\u5e94\u7684\u67e5\u8be2 $[l,r]$\u3002\u518d\u5bf9\u6bcf\u4e2a\u70b9 $t$ \u8003\u8651 $\\operatorname{lca}(x,rev_r)=t$ \u65f6\u7684\u8d21\u732e\u3002\u63a5\u4e0b\u6765\u4ee5 $\\text{dsu on tree}$ \u7684\u65b9\u5f0f\u8f7b\u91cd\u513f\u5b50\u5206\u5f00\u8ba8\u8bba\u3002\n\n### $\\text{Part 1}$\n\n\u5148\u662f\u6240\u6709\u91cd\u513f\u5b50\u5b50\u6811\u5185\u4e0e\u8f7b\u513f\u5b50\u5b50\u6811\u5185\u7684 $pos_x$ **\u5bf9\u8f7b\u513f\u5b50**\u7684\u8d21\u732e\u3002\n\n\u4eff\u7167 $\\text{dsu in tree}$\uff0c\u5148\u7edf\u8ba1\u51fa $t$ \u7684\u91cd\u513f\u5b50\u7684 $pos_x$\uff0c\u7136\u540e\u65f6\u95f4\u4e0a\u5141\u8bb8\u904d\u5386\u6240\u6709\u8f7b\u513f\u5b50\uff0c\u52a0\u4e0a\u8fd9\u90e8\u5206\u7684 $pos_x$\uff0c\u518d\u8003\u8651\u8f7b\u513f\u5b50\u5b50\u6811\u5185\u7684 $[l,r]$\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u5730\u62c6\u6389 $\\min$\uff0c\u53ef\u4ee5\u5206\u5f00\u8ba8\u8bba\uff1a\n\n$1.\\min=len_t:$  \n\u6b64\u65f6 $pos_x\\geq len_t+l$ \u5e76\u4e14 $pos_x\\in[l,r]$\uff0c\u8fd9\u4ec5\u662f\u4e2a\u4e00\u7ef4\u504f\u5e8f\uff0c\u6811\u72b6\u6570\u7ec4\u6c42\u51fa\u8fd9\u90e8\u5206\u7684\u4e2a\u6570\u5373\u53ef\u3002\n\n$2.\\min=pos_x-l+1:$  \n\u6b64\u65f6 $pos_x\\leq len_t+l-1$ \u4e14 $pos_x\\in[l,r]$\uff0c\u4f9d\u7136\u662f\u4e00\u7ef4\u7684\u504f\u5e8f\u95ee\u9898\uff0c\u6811\u72b6\u6570\u7ec4\u6c42\u51fa\u548c\u4ee5\u53ca\u4e2a\u6570\u5373\u53ef\u3002\n\n\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^2n)$\u3002\n\n### $\\text{Part 2}$\n\n\u63a5\u4e0b\u6765\u662f\u6240\u6709\u8f7b\u513f\u5b50\u5b50\u6811\u5185\u7684 $pos_x$ **\u5bf9\u91cd\u513f**\u5b50\u5b50\u6811\u5185\u67e5\u8be2\u7684\u8d21\u732e\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u4e3a\u4e86\u5f71\u54cd\u5728\u91cd\u513f\u5b50\u5b50\u6811\u5185\u7684\u67e5\u8be2\uff0c\u4f1a\u5929\u7136\u591a\u4e00\u4e2a $dfs$ \u5e8f\u7684\u9650\u5236\u3002\u800c $\\text{dsu on tree}$ \u53c8\u4f1a\u5e26\u6765 $O(n\\log n)$ \u4e2a\u5bf9\u91cd\u513f\u5b50\u7684\u5f71\u54cd\uff0c\u5e76\u4e14 $t$ \u5df2\u7ecf\u4e0d\u80fd\u56fa\u5b9a\u3002\u4f3c\u4e4e\u6ca1\u4e0a\u9762\u597d\u641e,\u4f46\u8fd8\u662f\u786c\u7740\u5934\u76ae\u4e0a\u3002\n\n\u4ecd\u7136\u62c6\u6389 $\\min$\u3002\u7b2c\u4e00\u79cd\u60c5\u51b5\u5bf9 $pos_i\\leq r,l\\leq pos_x-len_t$ \u7684\u67e5\u8be2 $+len_t$\u3002\u7b2c\u4e8c\u79cd\u60c5\u51b5\u5bf9 $pos_i\\leq r,pos_x-len_t+1\\leq l\\leq pos_x$ \u7684\u67e5\u8be2 $+pos_x-l+1$\u3002\u518d\u7b97\u4e0a $dfs$ \u5e8f\u7684\u9650\u5236\u6210\u4e3a\u4e86\u4e09\u7ef4\u504f\u5e8f\uff0c\u4f46\u7ed9\u51fa\u7684 $pos_x$ \u4e0e $len_t$ \u7684\u6570\u91cf\u5df2\u6709 $O(n\\log n)$\uff0c\u6240\u4ee5\u65f6\u95f4\u4f1a\u98de\u5347\u5230 $O(n\\log^3n)$\u3002\n\n\u5176\u4e2d\u7684\u4e09\u7ef4\u504f\u5e8f\u6700\u597d\u662f\u6309 $dfs$ \u5e8f\u6392\u5e8f\u540e\u5199 $\\text{cdq}$ \u52a0\u6811\u72b6\u6570\u7ec4\uff0c\u7531\u4e8e\u4fee\u6539\u504f\u591a\u67e5\u8be2\u504f\u5c11\uff0c\u4ec5\u4ec5\u5bf9\u533a\u95f4\u4e2d\u5b58\u5728\u67e5\u8be2\u7684\u5904\u7406\u4fee\u6539\u5f71\u54cd\u4f1a\u5feb\u5f88\u591a\u3002\n\n\u7136\u540e\u5728\u8f7b\u91cf\u5361\u5e38\u540e\u5c31\u80fd\u8fc7\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4f46\u601d\u7ef4\u96be\u5ea6\u504f\u5c0f\u3002\n\n\u9644\u5e26\uff1a[\u5bf9\u8fd9\u79cd\u5f62\u5f0f\u7684 $\\text{dsu on tree}$ \u7684\u66f4\u591a\u6269\u5c55\u5e94\u7528](https://www.luogu.com.cn/blog/Y-B-X/jing-tai-lian-fen-zhi-jin-jie)\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#pragma GCC optimize(\"Ofast\")\nusing namespace std;\nconst int N=2e5+10,NN=4e5+10,M=5e6+10;\nint n,m,nn,x,y,xx,tmp,last=1,tot=1,l,r,tt;\nint dfnl,dfnr,len_lca,qtot,lim;ll res,cnt;\nint mxlen[NN],link[NN],trans[NN][26];\nint pos[NN],rev[N],sz[NN],son[NN],dfn[NN];\nint h[NN],to[NN],nextn[NN],edg,c[NN];\nchar a[N],aa[N],ch;\ninline void read(int &x){\n\tx=0;ch=getchar();while(ch<47)ch=getchar();\n\twhile(ch>47)x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n}\nvoid write(ll x){if(x>9)write(x/10);putchar(48+x%10);}\ninline void extend(char a){\n\ty=last;tmp=++tot;mxlen[tmp]=mxlen[y]+1;\n\tfor(;y&&!trans[y][a];y=link[y])trans[y][a]=tmp;\n\tif(!y)link[tmp]=1;\n\telse {\n\t\tx=trans[y][a];\n\t\tif(mxlen[x]==mxlen[y]+1)link[tmp]=x;\n\t\telse {\n\t\t\txx=++tot;mxlen[xx]=mxlen[y]+1;link[xx]=link[x];\n\t\t\tmemcpy(trans[xx],trans[x],sizeof(trans[xx]));\n\t\t\tfor(;trans[y][a]==x;y=link[y])trans[y][a]=xx;\n\t\t\tlink[tmp]=link[x]=xx;\n\t\t}\n\t}\n\tlast=tmp;\n}\ninline void add(int x,int y){to[++edg]=y,nextn[edg]=h[x],h[x]=edg;}\nstruct inq_{int l,r;}inq[N];\nint toq[N],nextnq[N],hq[NN],edgq;ll ans[N];\ninline void addq(int x,int y){toq[++edgq]=y,nextnq[edgq]=hq[x],hq[x]=edgq;}\nvoid init(int x){\n\tint i,y;sz[x]=1;dfn[x]=++tt;\n\tfor(i=h[x];y=to[i];i=nextn[i]){\n\t\tinit(y);sz[x]+=sz[y];\n\t\tif(sz[y]>sz[son[x]])son[x]=y;\n\t}\n}\nstruct cdq{\n\tint t,a,b,i;char opt;cdq()=default;\n\tcdq(int _t,int _a,int _b,char _opt,int _i):t(_t),a(_a),b(_b),opt(_opt),i(_i){}\n\tinline bool operator <(const cdq &x)const {return a^x.a?a<x.a:opt;}\n}q[M],q0[M];\nint *t[NN],t__[NN<<1],*t_,_t,_t_,num[NN];\n#define lowbit(i) i&(-i)\nstruct bit{\n\tll t[N],res;inline void clear(){for(int i=1;i<=n;++i)t[i]=0;}\n\tinline void update(int i,int v){for(;i<=n;i+=lowbit(i))t[i]+=v;}\n\tinline void inquiry(int i){res=0;for(;i;i-=lowbit(i))res+=t[i];}\n\tinline void clear(int i){for(;i<=n;i+=lowbit(i))t[i]=0;}\n\t// opt=1/-1 : mdf || opt=0 : inq\n}T,T_,TT;\ninline void T_add(int pos){\n\tq[++qtot]=cdq(dfnl,pos,len_lca,1,0);\n\tq[++qtot]=cdq(dfnr,pos,len_lca,-1,0);\n}\ninline void update(int pos,int v){T.update(pos,v);T_.update(pos,pos*v);}\ninline void clear_(int pos){T.clear(pos);T_.clear(pos);}\ninline void inquiry(int l,int r,int x){\n\tlim=len_lca+l-1;res=0;\n\tif(lim<r){\n\t\tT.inquiry(lim);cnt=T.res;\n\t\tT.inquiry(r);res=(T.res-cnt)*len_lca;\n\t}\n\telse lim=r;\n\tT_.inquiry(l-1);cnt=T_.res;T_.inquiry(lim);res+=T_.res-cnt;\n\tT.inquiry(l-1);cnt=T.res;T.inquiry(lim);res-=(T.res-cnt)*(l-1);\n}\nvoid dfs(int x){\n\tif(pos[x]){\n\t\tif(dfnl)T_add(pos[x]);\n\t\tupdate(pos[x],1),t[_t][++_t_]=x;\n\t}\n\tfor(int i=h[x];i;i=nextn[i])dfs(to[i]);\n}\nvoid clear(int x){\n\tif(pos[x])clear_(pos[x]);\n\tfor(int i=h[x];i;i=nextn[i])clear(to[i]);\n}\nvoid solve(int x){\n\tint i,y;\n\tfor(i=h[x];y=to[i];i=nextn[i])if(y^son[x])solve(y),clear(y);\n\tif(y=son[x])solve(y);\n\tif(len_lca=mxlen[x]){\n\t\tdfnl=dfn[y];dfnr=dfn[y]+sz[y];\n\t\tif(pos[x]){\n\t\t\tif(dfnl)T_add(pos[x]);\n\t\t\tupdate(pos[x],1);\n\t\t}\n\t\tt_=t__;_t=0;\n\t\tfor(i=h[x];y=to[i];i=nextn[i])if(y^son[x]){\n\t\t\tt[++_t]=t_;t_+=sz[y]+1;\n\t\t\t_t_=0;dfs(y);num[_t]=_t_;\n\t\t}\n\t\tint j,qi,qy;\n\t\tfor(i=1;i<=_t;++i){\n\t\t\tfor(j=1;j<=num[i];++j)update(pos[t[i][j]],-1);\n\t\t\tfor(j=1;j<=num[i];++j){\n\t\t\t\ty=t[i][j];\n\t\t\t\tfor(qi=hq[y];qy=toq[qi];qi=nextnq[qi]){\n\t\t\t\t\tinquiry(inq[qy].l,inq[qy].r,y);\n\t\t\t\t\tans[qi]+=res;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(j=1;j<=num[i];++j)update(pos[t[i][j]],1);\n\t\t}\n\t}\n}\nvoid solve(int l,int r){if(l^r){\n\tregister int mid=(l+r)>>1,i,a,b,v=0;\n\tsolve(l,mid);solve(mid+1,r);\n\tmerge(q+l,q+mid+1,q+mid+1,q+r+1,q0+l);\n\tfor(i=l;i<=r;++i)if(q[i]=q0[i],!q[i].opt)v=1;\n\tif(v){\n\t\tfor(i=l;i<=r;++i){\n\t\t\tif(q[i].t<=mid&&q[i].opt){\n\t\t\t\ta=q[i].a;b=q[i].b;v=q[i].opt;\n\t\t\t\tif(a>b)TT.update(a-b,b*v),cnt+=b*v;\n\t\t\t\tT.update(a-b+1,v);T.update(a+1,-v);\n\t\t\t\tT_.update(a-b+1,a*v);T_.update(a+1,-a*v);\n\t\t\t}\n\t\t\telse if(q[i].t>mid&&!q[i].opt){\n\t\t\t\tb=q[i].b;TT.inquiry(b-1);T.inquiry(b);T_.inquiry(b);\n\t\t\t\tans[q[i].i]+=(cnt-TT.res)+T_.res-T.res*(b-1);\n\t\t\t}\n\t\t}\n\t\tfor(i=l;i<=r;++i)if(q[i].t<=mid&&q[i].opt){\n\t\t\ta=q[i].a;b=q[i].b;\n\t\t\tif(a>b)TT.clear(a-b);\n\t\t\tT.clear(a-b+1);T.clear(a+1);\n\t\t\tT_.clear(a-b+1);T_.clear(a+1);\n\t\t}\n\t\tcnt=0;\n\t}\n}}\nvoid work(){\n\tregister int i;\n\tfor(i=1;i<=n;++i)extend(a[i]),pos[tmp]=i,rev[i]=tmp;\n\tfor(i=2;i<=tot;++i)add(link[i],i);\n\tinit(1);\n\tfor(i=1;i<=m;++i){\n\t\tread(l),read(r);\n\t\tinq[i].l=n-r+1;inq[i].r=n-l+1;\n\t\tl=inq[i].l,r=inq[i].r;\n\t\taddq(x=rev[r],i);ans[i]=r-l+1;\n\t\tq[++qtot]=cdq(dfn[x],r,l,0,i);\n\t}\n\tsolve(1);\n\tT.clear();T_.clear();cnt=0;\n\tfor(i=1;i<=qtot;++i)++c[q[i].t];\n\tfor(i=1;i<=tot;++i)c[i]+=c[i-1];\n\tnn=c[tot];\n\tfor(i=1;i<=qtot;++i)if(q[i].t<=tot)q0[c[q[i].t]--]=q[i];\n\tqtot=nn;\n\tfor(i=1;i<=qtot;++i)q[i]=q0[i],q[i].t=i;\n\tsolve(1,qtot);\n}\nmain(){\n\tregister int i;\n\twhile(ch<97)ch=getchar();\n\twhile(ch>96)aa[++n]=ch-'a',ch=getchar();\n\tfor(i=1;i<=n;++i)a[i]=aa[n-i+1];\n\tread(m);work();\n\tfor(i=1;i<=m;++i)write(ans[i]),putchar('\\n');\n}\n```\n",
        "postTime": 1636875445,
        "uid": 334380,
        "name": "Y_B_X",
        "ccfLevel": 7,
        "title": "\u9898\u89e3[CF1098F \u0416-function]"
    },
    {
        "content": "\u8fd9\u771f\u7684\u662f\u4e00\u9053\u795e\u9898\u2026\u2026\n\n\u9996\u5148\u8981\u6c42\u7684\u8fd9\u4e2a\u4e1c\u897f$\\sum_{i=l}^rlcp(s[l,r],s[i,r])$\u8574\u542b\u4e86\u4e00\u4e2a\u4e0d\u80fd\u8d85\u51fa$r$\u7684\u9650\u5236\uff0c\u5c31\u76f8\u5f53\u4e8e$\\sum_{i=l}^r\\min(r-i+1,lcp(suf_l,suf_i))$\uff0c\u5e76\u4e0d\u662f\u5b8c\u5168\u7684\u540e\u7f00\u7684$LCP$\u3002\n\n\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5b8c\u5168\u610f\u4e49\u4e0a\u7684\u5bf9\u540e\u7f00\u7684$LCP$\u6c42\u548c\u600e\u4e48\u505a\uff0c\u5c31\u662f\u628a\u90a3\u4e2a$\\min$\u53bb\u6389\u7b97$\\sum_{i=l}^rlcp(suf_i,suf_l)$\uff0c\u6211\u4eec\u77e5\u9053\u4e24\u4e2a\u540e\u7f00\u7684$LCP$\u7b49\u4e8e\u540e\u7f00\u6811\u4e0a\u4e24\u4e2a\u8282\u70b9\u7684$LCA$\u7684\u6df1\u5ea6\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u6c42$\\sum_{i=l}^rdeep(LCA(i,l))$\uff0c\u5c31\u662f[\u8fd9\u9898](https://www.luogu.org/problemnew/show/P4211)\uff0c\u505a\u6cd5\u5c31\u662f\u8003\u8651$l$\u7684\u6bcf\u4e2a\u7956\u5148\u7684\u8d21\u732e\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u7956\u5148\u6c42\u51fa\u5b50\u6811\u91cc\u6709\u591a\u5c11\u4e2a$[l,r]$\u7684\u70b9\u5c31\u597d\u4e86\u3002\u540c\u6837\u7684\u8fd9\u9898\u4e5f\u9700\u8981\u8fd9\u4e2a\u601d\u8def\u3002\n\n\uff08\u6ce8\u610f\u4ee5\u4e0b\u4e3a\u65b9\u4fbf\u63cf\u8ff0\u6211\u4eec\u76f4\u63a5\u79f0$l$\u8fd9\u4e2a\u540e\u7f00\u5728\u540e\u7f00\u6811\u4e0a\u7684\u8282\u70b9\u4e3a$l$\uff09\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u679a\u4e3e$l$\u5728\u540e\u7f00\u6811\u4e0a\u7684\u6bcf\u4e2a\u6df1\u5ea6\u4e0d\u8d85\u8fc7$r-l+1$\u7684\u7956\u5148$u$\uff08\u56e0\u4e3a$LCP$\u663e\u7136\u4e0d\u80fd\u8d85\u8fc7\u533a\u95f4\u957f\u5ea6\uff09\uff0c\u6211\u4eec\u8981\u7edf\u8ba1\u6709\u591a\u5c11\u4e2a$x\\in[l,r]$\u4f7f\u5f97$lcp(s[x,r],s[l,r])>=deep_u$\uff0c\u90a3\u4e48$r-x+1>=deep[u]$\uff08\u5373$x<=r+1-deep[u]$\uff09\u5fc5\u987b\u8981\u6ee1\u8db3\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u662f\u76f8\u5f53\u4e8e**\u6c42$u$\u7684\u5b50\u6811\u91cc\u6709\u591a\u5c11\u4e2a$x\\in[l,r+1-deep[u]]$**\u3002\n\n\u86e4\uff0c\u8981\u627e\u7684$x$\u662f\u548c$deep_u$\u76f8\u5173\u7684\uff1f\u5b8c\u4e86\u597d\u50cf\u6ca1\u6cd5\u7edf\u8ba1\u8d21\u732e\u4e86\u2026\u2026\n\n\u65e2\u7136\u4e0d\u597d\u641e\uff0c\u90a3\u6211\u4eec\u5e72\u8106\u76f4\u63a5\u628a\u8fd9\u4e2a\u4e1c\u897f\u524d\u7f00\u548c\u76f8\u51cf\u4e00\u4e0b\uff08\u56e0\u4e3a\u6211\u4eec\u7edf\u8ba1\u7684$deep[u]$\u90fd\u662f$<=r-l+1$\u7684\uff0c\u6240\u4ee5$[l,r+1-deep[u]]$\u4e00\u5b9a\u4e0d\u662f\u7a7a\u96c6\uff09\uff0c\u5c31\u5206\u6210\u4e86\u4e24\u4e2a\u6b65\u9aa4\uff1a\n\n\u2460\uff1a\u6c42$u$\u5b50\u6811\u91cc\u6709\u591a\u5c11\u4e2a$x<=l-1$\u3002\n\n\u2461\uff1a\u6c42$u$\u5b50\u6811\u91cc\u6709\u591a\u5c11\u4e2a$x<=r+1-deep[u]$\n\n\u4e0a\u8ff0\u4e24\u4e2a\u90fd\u8981\u5bf9$l$\u7684\u6240\u6709\u6df1\u5ea6$<=r-l+1$\u7684\u7956\u5148\u6c42\u548c\uff0c\u663e\u7136**\u8fd9\u4e5f\u662f\u67d0\u4e2a\u70b9\u5230\u6839\u7684\u4e00\u6761\u94fe**\u3002\u5176\u5b9e\u6211\u4eec\u5e72\u7684\u4e8b\u60c5\u5c31\u662f\u7edf\u8ba1\u8fd9\u6761\u76f4\u94fe\u4e0e\u522b\u7684\u4e0d\u5728\u8fd9\u6761\u94fe\u4e0a\u7684\u70b9\uff08\u53ef\u80fd\u5728\u5176\u7ec6\u679d\u672b\u8282\u7684\u5b50\u6811\u91cc\uff09\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u6216\u8005\u8bf4\uff0c\u4e00\u6761\u76f4\u94fe\u4e0e\u4e00\u4e2a\u70b9$x$\u7684\u8d21\u732e\u4f1a\u5728$x$\u5230\u6839\u7684\u8fd9\u6761\u94fe\u4e0e\u8fd9\u6761\u76f4\u94fe\u7684\u4ea4\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e24\u6761\u94fe**\u6811\u94fe\u5256\u5206**\uff0c\u6211\u4eec\u5bf9\u4e00\u4e2a\u8be2\u95ee$[l,r]$\u628a\u8fd9\u4e2a\u8be2\u95ee\u5b58\u5230$l$\u7684\u6df1\u5ea6$<=r-l+1$\u7684\u94fe\u7684\u6240\u6709\u91cd\u94fe\u4e0a\uff0c\u5e76\u4e14\u5728\u6bcf\u6761\u91cd\u94fe\u4e0a\u8bb0\u5f55\u4e0e\u8fd9\u6761\u91cd\u94fe\u7684\u4ea4\u7684\u957f\u5ea6$LA$\uff08\u56e0\u4e3a\u53ef\u80fd\u53ea\u548c\u91cd\u94fe\u4ea4\u4e00\u90e8\u5206\uff09\u3002\u6211\u4eec\u518d\u628a\u6240\u6709\u540e\u7f00\u8282\u70b9$x$\u5b58\u5230\u5230\u6839\u7684\u6240\u6709\u91cd\u94fe\u4e0a\uff0c\u8bb0\u5f55\u4e0e\u91cd\u94fe\u4ea4\u7684\u957f\u5ea6$len$\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u5728\u6bcf\u4e00\u6761\u91cd\u94fe\u4e0a\u7edf\u8ba1\u6240\u6709\u540e\u7f00\u8282\u70b9\u80fd\u591f\u7ed9\u6240\u6709\u8be2\u95ee\u7684\u8d21\u732e\u3002\n\n\u5148\u8003\u8651\u2460\u600e\u4e48\u505a\u3002\u6211\u4eec\u5176\u5b9e\u8981\u6c42\u8fd9\u4e2a\uff1a$\\sum_{(x,len)\\in u,x<=l-1}\\min(LA,len)$\uff08\u6ce8\u610f$u$\u5728\u8fd9\u91cc\u662f\u91cd\u94fe\u7684\u94fe\u9876\uff09,\u8fd9\u4e2a\u5bf9\u5e94\u5230\u4e8c\u7ef4\u5e73\u9762\u4e0a\u957f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/58329.png)\n\n\u5c31\u662f\u6bcf\u4e2a$(x,len)$\u90fd\u5bf9\u5e94\u4e86\u4e00\u6761\u4e0e\u7eb5\u8f74\u5e73\u884c\u7684\u7ebf\u6bb5\uff0c\u6bcf\u4e2a\u8be2\u95ee\u76f8\u5f53\u4e8e\u6c42\u4e00\u4e2a\u5de6\u4e0b\u89d2\u7684\u77e9\u5f62\u533a\u57df\u5185\u7ebf\u6bb5\u88ab\u6846\u67f1\u90e8\u5206\u7684\u957f\u5ea6\u548c\u3002\u8fd9\u4e2a\u76f4\u63a5\u626b\u63cf\u7ebf\uff0c\u5bf9$(x,len)$\u6309$x$\u6392\u5e8f\uff0c\u8be2\u95ee\u6309$l-1$\u6392\u5e8f\uff0c\u6bcf\u4e2a$(x,len)$\u5728\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u52a0\u7136\u540e\u533a\u95f4\u67e5\u8be2\u5c31\u884c\u4e86\uff0c\u8fd9\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\u3002\n\n\u90a3\u4e2a\u2461\u5c31\u6bd4\u8f83\u6076\u5fc3\u4e86\uff0c\u9996\u5148\u6211\u4eec\u5e94\u8be5\u6709\u8fd9\u6837\u7684\u8f6c\u5316\uff0c\u5bf9\u4e8e\u5b58\u5728\u91cd\u94fe$u$\u4e0a\u7684\u6bcf\u4e2a$(x,len)$\uff0c\u76f8\u5f53\u4e8e\u8fd9\u4e2a$x$\u5728\u8fd9\u6761\u91cd\u94fe\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u5bf9\u5e94\u7740$x+deep_u,x+deep_u+1,\u2026\u2026x+deep_u+len-1$\u8fd9\u4e9b**\u8fde\u7eed\u9012\u589e**\u7684\u6743\u503c\uff08\u8981\u77e5\u9053\u91cd\u94fe\u4e5f\u662f\u76f4\u7684\uff09\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u8981\u6c42$\\sum_{(x,len)\\in u}\\max(0,\\min(LA,len,r+1-x-deep_u))$\u3002\n\n\u86e4\uff1f\u4f60\u5728\u9017\u6211\u5417\uff1f\u8fd9\u4e48\u590d\u6742\u7684\u4e1c\u897f\u80fd\u7b97\u554a\u2026\u2026\n\n\u5176\u5b9e\u6211\u4eec\u628a\u8fd9\u4e2a\u95ee\u9898\u62c6\u5f00\u5206\u6790\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\u5b83\u8fd8\u662f\u80fd\u7b97\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5bf9\u8be2\u95ee\u7684$LA$\u548c\u540e\u7f00\u8282\u70b9\u7684$len$\u6392\u5e8f\u7136\u540e\u5bf9\u8fd9\u4e2a\u626b\u63cf\u7ebf\uff0c\u53ef\u4ee5\u8ba8\u8bba$LA$\u4e0e$len$\u7684\u5927\u5c0f\u5173\u7cfb\uff1a\n\n\u2460\uff1a$len<=LA$\uff0c\u6211\u4eec\u9700\u8981\u5728\u626b\u5230$LA$\u8fd9\u4e2a\u8be2\u95ee\u7684\u65f6\u5019\u5bf9**\u524d\u9762\u5df2\u7ecf\u626b\u8fc7**\u7684$(x,len)$\u6c42\u7b54\u6848\uff0c\u90a3\u4e48\u65e2\u7136$x+deep_u,x+deep_u+1,\u2026\u2026x+deep_u+len-1$\u8fd9\u7ec4\u8fde\u7eed\u7684\u6570\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7$LA$\u7684\u9650\u5236\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u4ed6\u4eec\u4e0d\u8d85\u8fc7$r+1$\u7684\u9650\u5236\u5c31\u884c\u4e86\uff0c\u8fd9\u4e2a\u505a\u6cd5\u5c31\u548c\u4e0a\u9762\u90a3\u4e2a\u2460\u4e00\u6837\u4e86\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u52a0$[x+deep_u,x+deep_u+len-1]$\uff0c\u5728\u8be2\u95ee\u7684\u65f6\u5019\u67e5$<=r+1$\u7684\u90e8\u5206\u5c31\u884c\u4e86\u3002\n\n\u2461\uff1a$len>LA$\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u628a\u90a3\u4e2a$len$\u7684\u9650\u5236\u53bb\u6389\u53d8\u6210\u4e86$\\sum_{(x,len)\\in u,len>LA}\\max(0,\\min(LA,r+2-x-deep_u))$\uff0c\u5373\u8003\u8651\u8fd8\u672a\u626b\u8fc7\u7684\u90e8\u5206\uff0c\u9996\u5148\u6211\u4eec\u5e0c\u671b$r+2-x-deep_u>0$\uff0c\u5373$-x-deep_u>=-r-1$\uff0c\u6211\u4eec\u628a\u5f0f\u5b50\u6539\u4e00\u4e0b\uff1a\n\n$\\max(0,\\min(LA-r-2,-x-deep_u)+r+2)$\n\n\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a$x$\uff0c\u9700\u8981\u7ef4\u62a4\u7684\u4ec5\u4ec5\u662f\u4e0e$-x-deep_u$\u76f8\u5173\u7684\uff0c\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u8fdb\u884c\u5927\u529b\u8ba8\u8bba\uff1a\n\n\u2460\uff1a$-x-deep_u\\in[-r-1,LA-r-2]$\uff0c\u8fd9\u4e2a\u5c31\u7279\u522b\u597d\u56e0\u4e3a$LA>0$\uff0c\u663e\u7136$-r-1<=LA-r-2$\u6240\u4ee5\u8fd9\u4e2a\u533a\u95f4\u4e0d\u4f1a\u662f\u7a7a\u96c6\uff0c\u6211\u4eec\u76f4\u63a5\u53d6\u8fd9\u90e8\u5206\u7684$\\sum-x-deep_u$\u5373\u53ef\u3002\n\n\u2461$-x-deep_u>LA-r-2$\uff0c\u8fd9\u4e2a\u80af\u5b9a\u8981\u548c$LA-r-2$\u53d6$\\min$\uff0c\u6240\u4ee5\u627e\u51fa\u6709\u591a\u5c11\u4e2a\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\u7684$-x-deep_u$\u7136\u540e\u4e58\u4e2a$LA-r-2$\u5373\u53ef\u3002\n\n\u53e6\u5916\u5916\u9762\u52a0\u7684\u90a3\u4e2a$r+2$\u627e\u51fa\u6709\u591a\u5c11\u4e2a$-1-deep_u>=-r-1$\u518d\u4e58\u4e0a$r+2$\u5c31\u884c\u4e86\u3002\n\n\u4e0a\u9762\u7684\u8fd93\u90e8\u5206\u90fd\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u7ef4\u62a4\u7684\u672a\u626b\u8fc7\u7684\u90e8\u5206\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u6240\u6709$x$\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u90fd\u52a0\u4e00\u4e0b\uff0c\u7136\u540e\u6bcf\u626b\u5230\u4e00\u4e2a\u5c31\u51cf\u6389\u5c31\u884c\u4e86\u3002\u53e6\u5916\u7531\u4e8e\u662f\u8d1f\u6570\u4e0b\u6807\u8fd8\u8981\u52a0\u504f\u79fb\u91cf\u4ec0\u4e48\u7684\u2026\u2026\n\n\u54e6\u5bf9\u4e86\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u6211\u4eec\u5b9e\u9645\u4e0a\u7528\u7684\u540e\u7f00\u6811\u628a\u5f88\u591a\u771f\u6b63\u7684\u540e\u7f00\u6811\u4e0a\u7684\u8282\u70b9\u90fd\u7f29\u5230\u4e86\u4e00\u6761\u8fb9\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u7edf\u8ba1\u7684\u65f6\u5019\u6240\u7528\u7684$len$\u5176\u5b9e\u5e76\u4e0d\u662f\u8fd9\u6761\u91cd\u94fe\u4e0a\u4ea4\u70b9\u7684\u4e2a\u6570\u800c\u662f\u540e\u7f00\u6811\u4e0a\u7684\u771f\u6b63\u957f\u5ea6\uff0c\u5e76\u4e14\u94fe\u9876\u7684\u7ba1\u8f96\u8303\u56f4\u4e5f\u8981\u505a\u7b26\u5408\u5b9e\u9645\u7684\u53d8\u5316\uff0c\u53cd\u6b63\u540e\u7f00\u6811\u4e0a\u7684\u95ee\u9898\u90fd\u5f97\u5207\u5408\u5b9e\u9645\u554a\u2026\u2026\u6240\u4ee5\u8fd9\u9898\u7ec6\u8282\u6bd4\u8f83\u591a\u2026\u2026\n\n\u54e6\u53e6\u5916\u6211\u4eec\u6700\u540e\u8981\u628a\u5728$1$\u70b9\u7edf\u8ba1\u7684\u7b54\u6848\u51cf\u6389\u2026\u2026\u56e0\u4e3a$1$\u8868\u793a\u7a7a\u4e32\uff0c\u800c\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u7edf\u8ba1\u7a7a\u4e32\u2026\u2026\n\n\u90a3\u4e48\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\uff0c\u7531\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u548c\u540e\u7f00\u8282\u70b9\u88ab\u5b58\u5230\u4e86$O(\\log n)$\u6761\u91cd\u94fe\u4e0a\uff0c\u5728\u6bcf\u6761\u91cd\u94fe\u4e0a\u505a\u7684\u626b\u63cf\u7ebf\u662f$O(n\\log n)$\u7684\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u5747\u644a$O((n+q)\\log^2n)$\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#define ll long long\n#define offset 500000\n#define K 1000000\n#define N 400000\n#define up(_o) data[_o] = data[ls(_o)] + data[rs(_o)]\n#define ls(_o) (_o << 1)\n#define rs(_o) ((_o << 1) | 1)\nusing namespace std;\nnamespace ywy {\n\tinline int get() {\n\t    int n = 0;\n\t    char c;\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            break;\n\t        if (c == '-')\n\t            goto s;\n\t    }\n\t    n = c - '0';\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\ts:\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 - c + '0';\n\t        else\n\t            return (n);\n\t    }\n\t}\n\tint sam[N][26], mxdfn[N], len[N], fa[N], top[N], zhongson[N], size[N], dfn[N], fan[N], gdfn = 1;\n\ttypedef struct _b {\n\t    int dest;\n\t    int nxt;\n\t} bian;\n\tbian memchi[1000001];\n\tint gn = 1, heads[N], ance[N][20];\n\tinline void add(int s, int t) {\n\t    memchi[gn].dest = t;\n\t    memchi[gn].nxt = heads[s];\n\t    heads[s] = gn;\n\t    gn++;\n\t}\n\tll anss[N];\n\ttypedef struct _n {\n\t    int x;\n\t    int len;\n\t    int lim;\n\t    int pos;\n\t    unsigned char isque;\n\t    _n() { x = len = lim = pos = isque = 0; }\n\t    friend bool operator<(const _n &a, const _n &b) {\n\t        if (a.pos == b.pos)\n\t            return (a.isque < b.isque);\n\t        return (a.pos < b.pos);\n\t    }\n\t} node;\n\tvector<node> leaf[N], quel[N], quer1[N];\n\tvoid dfs(int pt) {\n\t    size[pt] = 1;\n\t    top[pt] = pt;\n\t    int mx = 0, best = 0;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        dfs(memchi[i].dest);\n\t        size[pt] += size[memchi[i].dest];\n\t        ance[memchi[i].dest][0] = pt;\n\t        if (size[memchi[i].dest] > mx)\n\t            mx = size[memchi[i].dest], best = memchi[i].dest;\n\t    }\n\t    zhongson[pt] = best;\n\t}\n\tvoid efs(int pt) {\n\t    dfn[pt] = gdfn;\n\t    fan[gdfn] = pt;\n\t    gdfn++;\n\t    if (zhongson[pt])\n\t        top[zhongson[pt]] = top[pt], efs(zhongson[pt]);\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == zhongson[pt])\n\t            continue;\n\t        efs(memchi[i].dest);\n\t    }\n\t}\n\tint gsam = 2, nd[N];\n\tinline int zhuanyi(int p, int x) {\n\t    int me = gsam;\n\t    gsam++;\n\t    len[me] = len[p] + 1;\n\t    while (p && !sam[p][x]) sam[p][x] = me, p = fa[p];\n\t    if (!p) {\n\t        fa[me] = 1;\n\t        return (me);\n\t    }\n\t    int q = sam[p][x];\n\t    if (len[q] == len[p] + 1) {\n\t        fa[me] = q;\n\t        return (me);\n\t    }\n\t    int nq = gsam;\n\t    gsam++;\n\t    len[nq] = len[p] + 1;\n\t    fa[nq] = fa[q];\n\t    fa[q] = fa[me] = nq;\n\t    for (register int i = 0; i < 26; i++) sam[nq][i] = sam[q][i];\n\t    while (p && sam[p][x] == q) sam[p][x] = nq, p = fa[p];\n\t    return (me);\n\t}\n\tint adds[2000001];\n\tll data[2000001];\n\tinline void down(int tree, int l, int r) {\n\t    if (adds[tree]) {\n\t        int mid = (l + r) >> 1;\n\t        data[ls(tree)] += (ll)adds[tree] * (mid - l + 1);\n\t        data[rs(tree)] += (ll)adds[tree] * (r - mid);\n\t        adds[ls(tree)] += adds[tree];\n\t        adds[rs(tree)] += adds[tree];\n\t        adds[tree] = 0;\n\t    }\n\t}\n\tvoid add(int rl, int rr, int l, int r, int tree) {\n\t    if (rl == l && rr == r) {\n\t        data[tree] += (r - l + 1);\n\t        adds[tree]++;\n\t        return;\n\t    }\n\t    int mid = (l + r) >> 1;\n\t    down(tree, l, r);\n\t    if (rl > mid)\n\t        add(rl, rr, mid + 1, r, rs(tree));\n\t    else {\n\t        if (rr <= mid)\n\t            add(rl, rr, l, mid, ls(tree));\n\t        else {\n\t            add(rl, mid, l, mid, ls(tree));\n\t            add(mid + 1, rr, mid + 1, r, rs(tree));\n\t        }\n\t    }\n\t    up(tree);\n\t}\n\tvoid sub(int rl, int rr, int l, int r, int tree) {\n\t    if (rl == l && rr == r) {\n\t        adds[tree]--;\n\t        data[tree] -= (r - l + 1);\n\t        return;\n\t    }\n\t    int mid = (l + r) >> 1;\n\t    down(tree, l, r);\n\t    if (rl > mid)\n\t        sub(rl, rr, mid + 1, r, rs(tree));\n\t    else {\n\t        if (rr <= mid)\n\t            sub(rl, rr, l, mid, ls(tree));\n\t        else {\n\t            sub(rl, mid, l, mid, ls(tree));\n\t            sub(mid + 1, rr, mid + 1, r, rs(tree));\n\t        }\n\t    }\n\t    up(tree);\n\t}\n\tll query(int rl, int rr, int l, int r, int tree) {\n\t    if (rl == l && rr == r)\n\t        return (data[tree]);\n\t    int mid = (l + r) >> 1;\n\t    down(tree, l, r);\n\t    if (rl > mid)\n\t        return (query(rl, rr, mid + 1, r, rs(tree)));\n\t    if (rr <= mid)\n\t        return (query(rl, rr, l, mid, ls(tree)));\n\t    return (query(rl, mid, l, mid, ls(tree)) + query(mid + 1, rr, mid + 1, r, rs(tree)));\n\t}\n\tnode ints[N + 2];\n\tll c1[K + 1], c2[K + 1];\n\tinline ll query(int l, int r, ll *c) {\n\t    l += offset;\n\t    r += offset;\n\t    if (l > r)\n\t        return (0);\n\t    ll tot = 0;\n\t    for (register int i = r; i > 0; i -= (i & -i)) tot += c[i];\n\t    for (register int i = l - 1; i > 0; i -= (i & -i)) tot -= c[i];\n\t    return (tot);\n\t}\n\tinline void cadd(int pos, ll x, ll *c) {\n\t    pos += offset;\n\t    for (register int i = pos; i <= K; i += (i & -i)) c[i] += x;\n\t}\n\tchar str[222222];\n\tinline int getance(int pt, int mxlen) {  //\u627e\u5230\u7b2c\u4e00\u4e2alen>=mxlen\u7684\u7956\u5148\n\t    for (register int i = 19; i >= 0 && len[pt] > mxlen; i--)\n\t        if (len[ance[pt][i]] >= mxlen)\n\t            pt = ance[pt][i];\n\t    return (pt);\n\t}\n\tvoid print(ll num) {\n\t    if (num < 0)\n\t        putchar('-'), num = -num;\n\t    if (num >= 10)\n\t        print(num / 10);\n\t    putchar(num % 10 + '0');\n\t}\n\tvoid ywymain() {\n\t    scanf(\"%s\", str + 1);\n\t    int n = strlen(str + 1);\n\t    len[0] = -1;\n\t    int p = 1;\n\t    for (register int i = n; i >= 1; i--) {\n\t        p = zhuanyi(p, str[i] - 'a');\n\t        nd[i] = p;\n\t    }\n\t    for (register int i = 2; i < gsam; i++) add(fa[i], i);\n\t    dfs(1);\n\t    efs(1);\n\t    for (register int i = 1; i <= 19; i++) {\n\t        for (register int j = 1; j < gsam; j++) ance[j][i] = ance[ance[j][i - 1]][i - 1];\n\t    }\n\t    for (register int i = 1; i <= n; i++) {\n\t        int cur = top[nd[i]], ppl = len[nd[i]] - len[fa[cur]];\n\t        while (cur) {\n\t            node cjr;\n\t            cjr.len = ppl;\n\t            cjr.x = i;\n\t            leaf[cur].push_back(cjr);\n\t            ppl = len[fa[cur]] - len[fa[top[fa[cur]]]];\n\t            cur = top[fa[cur]];\n\t        }\n\t    }\n\t    int q = get();\n\t    for (register int i = 1; i <= q; i++) {\n\t        int l = get(), r = get();\n\t        int cyh = getance(nd[l], r - l + 1);\n\t        anss[i] = -(min(n, r + 1) - l + 1);\n\t        int cur = top[cyh], ppl = r - l + 1 - len[fa[cur]];\n\t        while (cur) {\n\t            node cjr;\n\t            cjr.len = ppl;\n\t            cjr.x = i;\n\t            cjr.lim = l - 1;\n\t            cjr.isque = 1;\n\t            quel[cur].push_back(cjr);\n\t            cjr = _n();\n\t            cjr.len = ppl;\n\t            cjr.x = i;\n\t            cjr.lim = r + 1;\n\t            cjr.isque = 1;\n\t            quer1[cur].push_back(cjr);\n\t            ppl = len[fa[cur]] - len[fa[top[fa[cur]]]];\n\t            cur = top[fa[cur]];\n\t        }\n\t    }\n\t    for (register int u = 1; u < gsam; u++) {\n\t        if (top[u] != u)\n\t            continue;\n\t        int ptr = 1;\n\t        for (register int i = 0; i < quel[u].size(); i++) {\n\t            node cjr = quel[u][i];\n\t            cjr.pos = cjr.lim;\n\t            ints[ptr] = cjr;\n\t            ptr++;\n\t        }\n\t        for (register int i = 0; i < leaf[u].size(); i++) {\n\t            node cjr = leaf[u][i];\n\t            cjr.pos = cjr.x;\n\t            ints[ptr] = cjr;\n\t            ptr++;\n\t        }\n\t        ptr--;\n\t        sort(ints + 1, ints + 1 + ptr);\n\t        for (register int i = 1; i <= ptr; i++) {\n\t            if (!ints[i].isque)\n\t                add(1, ints[i].len, 1, N, 1);\n\t            else {\n\t                anss[ints[i].x] -= query(1, ints[i].len, 1, N, 1);\n\t            }\n\t        }\n\t        for (register int i = 0; i < leaf[u].size(); i++) sub(1, leaf[u][i].len, 1, N, 1);\n\t        ptr = 1;\n\t        for (register int i = 0; i < quer1[u].size(); i++) {\n\t            node cjr = quer1[u][i];\n\t            cjr.pos = cjr.len;\n\t            ints[ptr] = cjr;\n\t            ptr++;\n\t        }\n\t        for (register int i = 0; i < leaf[u].size(); i++) {\n\t            node cjr = leaf[u][i];\n\t            cjr.pos = cjr.len;\n\t            ints[ptr] = cjr;\n\t            ptr++;\n\t        }\n\t        ptr--;\n\t        sort(ints + 1, ints + 1 + ptr);\n\t        for (register int i = 0; i < leaf[u].size(); i++) {\n\t            cadd(-leaf[u][i].x - (len[fa[u]] + 1), 1, c1);\n\t            cadd(-leaf[u][i].x - (len[fa[u]] + 1), -leaf[u][i].x - (len[fa[u]] + 1), c2);\n\t        }\n\t        for (register int i = 1; i <= ptr; i++) {\n\t            if (!ints[i].isque) {\n\t                cadd(-ints[i].x - (len[fa[u]] + 1), -1, c1);\n\t                cadd(-ints[i].x - (len[fa[u]] + 1), ints[i].x + (len[fa[u]] + 1), c2);\n\t                add(ints[i].x + len[fa[u]] + 1, ints[i].x + len[fa[u]] + ints[i].len, 1, N, 1);\n\t            } else {\n\t                anss[ints[i].x] += query(1, ints[i].lim, 1, N, 1);\n\t                anss[ints[i].x] += (ll)(ints[i].lim + 1) * query(-ints[i].lim, K - offset, c1);\n\t                anss[ints[i].x] +=\n\t                    (ll)(ints[i].len - ints[i].lim - 1) * query(ints[i].len - ints[i].lim, K - offset, c1);\n\t                anss[ints[i].x] += query(-ints[i].lim, ints[i].len - ints[i].lim - 1, c2);\n\t            }\n\t        }\n\t        for (register int i = 0; i < leaf[u].size(); i++) {\n\t            sub(leaf[u][i].x + len[fa[u]] + 1, leaf[u][i].x + len[fa[u]] + leaf[u][i].len, 1, N, 1);\n\t        }\n\t    }\n\t    for (register int i = 1; i <= q; i++) print(anss[i]), putchar('\\n');\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1557401860,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1098F \u3010\u0416-function\u3011"
    },
    {
        "content": "\n\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff0c\u5b9a\u4e49\u51fd\u6570f(l,r)\u4e3as[l,r]\u7684\u6bcf\u4e2a\u540e\u7f00\u4e0es[l,r]\u7684lcp\u4e4b\u548c\u3002\u73b0\u5728\u8be2\u95eeq\u6b21\uff0c\u6bcf\u6b21\u7ed9\u51fal,r\uff0c\u8bf7\u8f93\u51faf(l,r)\n\n\u5176\u5b9e\u5c31\u662f\u7ed9\u51fa\u4e00\u68f5\u6811\uff0c\u6c42$\\sum _{i=l}^{r} \\min(len[lca(i,l)],r-i+1)$\n\n\u9898\u89e3\u7ed9\u51fa\u7684\u505a\u6cd5...\u597d\u50cf\u5f88\u6076\u5fc3...\u7ed9\u4e00\u4e0b\u6211\u81ea\u5df1\u7684\u505a\u6cd5~~\u4e00\u5b9a\u5199\u4e00\u5b9a\u5199~~\n\n\u9996\u5148\uff0c\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba\u4e24\u79cd\u5927\u60c5\u51b5\u3002\n\n## \u82e5$len[lca]>r-l+1$\n\n\u90a3\u4e48$\\min$\u4e00\u5b9a\u53d6\u5230$r-i+1$\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7edf\u8ba1\u7f16\u53f7\u5728\u4e00\u4e2a\u533a\u95f4\u91cc\u7684\u70b9\u7684\u6743\u503c\u548c\u2014\u2014\u968f\u4fbf\u505a\u3002\n\n## \u82e5$len[lca]<r-l+1$\n\n\u5982\u679c\u6211\u4eec\u80fd\u591f\u679a\u4e3e$lca$\uff0c\u90a3\u4e48$\\min$\u53d6\u5230\u524d\u8005\u7684\u9650\u5236\u53d8\u6210\u4e86\n\n$$i\\le r-len[lca]+1$$\n\n\u8fd9\u663e\u7136\u6ee1\u8db3$i\\le r$\u7684\u9650\u5236\uff0c\u4f46\u662f\u4e0d\u4e00\u5b9a\u6ee1\u8db3$i\\ge l$\u7684\u9650\u5236\uff0c\u6211\u4eec\u5148\u53ea\u8003\u8651\u524d\u4e00\u4e2a\u9650\u5236\u3002\u5982\u4f55\u51cf\u53bb\u4e0d\u6ee1\u8db3\u540e\u8005\u9650\u5236\u7684\u5f85\u4f1a\u5728\u8bf4\u3002\n\n\u6811\u5256\uff0c\u79bb\u7ebf\uff0c\u628a\u8be2\u95ee\u6302\u5728\u91cd\u94fe\u4e0a\uff0c\u5bf9\u6bcf\u4e2a\u91cd\u94fe\u5206\u522b\u8003\u8651\u3002\n\n\u6211\u4eec\u5bf9\u91cd\u94fe\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u6240\u6709\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\u3002\n\n\u6211\u4eec\u904d\u5386\u91cd\u94fe\u4e0a\u70b9u\u7684\u8f7b\u5b50\u6811\uff0c\u628a\u70b9v\u53d8\u6210\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9$(rk[u],v)$\uff08rk\u662fu\u5728\u91cd\u94fe\u4ece\u4e0a\u5230\u4e0b\u7b2c\u51e0\u4e2a\uff09\n\n\u6839\u636e\u6811\u5256\u7684\u6027\u8d28\uff0c\u603b\u70b9\u6570\u4e0d\u8d85\u8fc7$O(n\\log n)$\n\n\u6211\u4eec\u628a\u8be2\u95ee\u6309r\u6392\u5e8f\u3002\u8bbe\u5f53\u524d\u8be2\u95ee\u7684r\u4e3a$r$\u3002\n\n\u90a3\u4e48\uff0c\u5bf9\u91cd\u94fe\u4e0a\u6bcf\u4e2a\u70b9u\uff0c\u9650\u5236\u662f\uff1a\n\n$$i\\le r-len[u]+1$$\n\n\u8003\u8651\u6211\u4eec\u7684\u67e5\u8be2\uff0c\u662f\u67e5\u8be2\u91cd\u94fe\u7684\u4e00\u4e2a\u524d\u7f00\uff0c\uff3b\u6ee1\u8db3\u91cd\u94fe\u524d\u7f00\u4e0a\u7684\u70b9u\u7684\u7f16\u53f7\u9650\u5236\uff3d\u7684v\uff0c\u7684\u6743\u503c\uff08$len[u]+v$\uff09\n\n\u5047\u8bbe\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u7ef4\u62a4\u597d\u4e86\uff0c\u73b0\u5728$r\\to r',r<r'$\uff0c\u8003\u8651\u4fe1\u606f\u7684\u53d8\u5316\uff0c\u6bcf\u4e2a\u70b9\u7684\u9650\u5236\u53d8\u6210$i\\le r'-len[u]+1$\uff0c\u9650\u5236\u53d8\u677e\u4e86\uff0c\u6709\u4e00\u4e9b\u5e73\u9762\u4e0a\u7684\u70b9\u4f1a\u6ee1\u8db3\u8981\u6c42\uff0c\u6211\u4eec\u628a\u5b83\u4eec\u52a0\u5165\u5373\u53ef\u3002\u56e0\u4e3a\u4e00\u4e2a\u70b9\u53ea\u4f1a\u88ab\u52a0\u5165\u4e00\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u6709\u4fdd\u8bc1\u3002\n\n\u4f46\u662f\u522b\u5fd8\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u9664\u4e86\u8fd9\u4e2a\u524d\u7f00\uff0c\u5176\u4ed6\u6a2a\u5750\u6807\u7684\u70b9\u4e5f\u662f\u6709\u8d21\u732e\u7684\uff01\u53ea\u4e0d\u8fc7\u5b83\u4eec\u7684lca\u90fd\u4e0d\u662f\u81ea\u5df1\u7684u\u4e86\uff0c\u800c\u662f\u8fd9\u4e2a\u524d\u7f00\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u3002\n\n\u7b80\u5355\u7684\u8bf4\uff0c\u5c31\u662f\u524d\u7f00\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u91cd\u513f\u5b50\u7684\u4fe1\u606f\u90fd\u6ca1\u6709\u88ab\u7edf\u8ba1\u3002\u73b0\u5728\u95ee\u9898\u53d8\u6210\u4e86\uff0c\u6c42\u4e00\u4e2a\u5b50\u6811\u91cc\u7684\uff0c\u6ee1\u8db3$i\\le r-len[lca]+1$\u7684\u70b9\u7684\u6743\u503c\u548c\u3002\u56e0\u4e3a$len[lca]$\u786e\u5b9a\uff0c\u6240\u4ee5\u5f88\u7b80\u5355\u5b9e\u73b0\u3002\n\n\u8fd8\u6709\u8f7b\u513f\u5b50\u53bb\u91cd\u3002\u8fd9\u4e2a\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\u3002\n\n### $i<l$\u7684\u9650\u5236\n\n\u76f8\u5f53\u4e8e\u6c42$\\sum _{i<l} len[lca(l,i)]$\uff0c[LNOI]LCA\u5373\u53ef\u3002\n\n----------\n\n\u5982\u679cmin\u53d6\u5230\u540e\u8005\uff0c\u90a3\u4e48\u4e5f\u5dee\u4e0d\u591a\u3002\n\n\u6240\u4ee5\u8bf4\u6211\u4eec\u4e00\u5171\u8981\u51993,4\u79cd\u7ebf\u6bb5\u6811\u3002\u603b\u590d\u6742\u5ea6$O(n\\log ^2n)$",
        "postTime": 1557558066,
        "uid": 58302,
        "name": "i207M",
        "ccfLevel": 0,
        "title": "SAM+\u4e3b\u5e2d\u6811-CF1098F \u0416-function-\u89e3\u9898\u62a5\u544a"
    }
]