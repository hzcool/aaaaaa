[
    {
        "content": "# \u9898\u76ee\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF743E)\n\n# \u9898\u89e3\n\n\u56e0\u4e3a\u6240\u6709\u6570\u5b57\u7684\u9009\u62e9\u5fc5\u987b\u8fde\u7eed\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u540c\u4e00\u6570\u5b57\u7684\u9009\u62e9\u8d8a\u5c11\uff0c\u5176\u8981\u6c42\u8d8a\u5bb9\u6613\u8fbe\u6210\uff0c\u5e76\u4e14\u9898\u76ee\u8981\u6c42\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570 $c(i),c(j)$ \u90fd\u5fc5\u987b\u4fdd\u8bc1 $\\mid c(i)-c(j)\\mid \\le 1$\uff0c\u6211\u4eec\u4e0d\u59a8\u4e8c\u5206\u6570\u5b57\u51fa\u73b0\u7684\u6700\u5c0f\u6b21\u6570 $k$\uff08\u6709\u5c11\u90e8\u5206\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u4e3a $k+1$\uff09\u7136\u540e\u5bf9\u8fd9\u4e2a $k$  \u8fdb\u884c\u5408\u6cd5\u6027\u68c0\u67e5\uff0c\u663e\u7136\uff0c$k$ \u8d8a\u5927\uff0c\u7b54\u6848\u5e8f\u5217\u8d8a\u5927\u3002\n\n\u73b0\u5728\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u8fdb\u884c\u5408\u6cd5\u6027\u68c0\u67e5\uff0c\u6211\u4eec\u5b9a\u4e49 $f[i][j]$ \u4e3a\u5230\u7b2c $i$ \u4f4d\uff0c\u6570\u5b57\u51fa\u73b0\u7684\u96c6\u5408\u4e3a $j$ \u65f6\u7684\u6700\u5927\u5e8f\u5217\u957f\u5ea6\uff1f\n\n\u5176\u5b9e\u6709\u66f4\u597d\u7684\u5b9a\u4e49\u65b9\u6cd5\uff0c\u5b9a\u4e49 $f[i][j]$ \u4e3a\u5230\u7b2c $i$ \u4f4d\uff0c\u6570\u5b57\u51fa\u73b0\u7684\u96c6\u5408\u4e3a $j$ \u65f6\uff0c\u51fa\u73b0\u6b21\u6570\u4e3a $k+1$ \u7684\u6570\u5b57\u6700\u591a\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u56fa\u5b9a\u6bcf\u4e2a\u6570\u5b57**\u81f3\u5c11**\u51fa\u73b0 $k$ \u6b21\uff0c\u90a3\u4e48\u51fa\u73b0 $k+1$ \u6b21\u7684\u6570\u5b57\u8d8a\u591a\uff0c\u5e8f\u5217\u957f\u5ea6\u5fc5\u7136\u8d8a\u5927\u3002\n\n\u8003\u8651\u5982\u4f55\u8fdb\u884c\u8f6c\u79fb\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u4f4d\u7f6e\u5355\u72ec\u50a8\u5b58\u8d77\u6765\uff0c\u5e76\u7528\u7c7b\u4f3c\u4e8e\u6307\u9488\u7684\u6570\u7ec4\u8bb0\u5f55\u7b2c $i$ \u4f4d\u65f6\uff0c\u6570\u5b57 $num$ \u5e94\u8be5\u4ece\u54ea\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u56e0\u4e3a\u6709\u4e9b\u4f4d\u7f6e\u5728 $i$ \u4e4b\u524d\uff0c\u5df2\u7ecf\u4e0d\u80fd\u9009\u62e9\u4e86\uff0c\u4e3a\u4e86\u5feb\u901f\u5f97\u5230\u8d77\u59cb\u4f4d\u7f6e\uff0c\u6211\u4eec\u624d\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u8bb0\u8fd9\u4e2a\u6570\u7ec4\u4e3a $cur$\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57 $t$\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u8981\u9009\u62e9\u5b83\uff0c\u90a3\u4e48\u663e\u7136\u6211\u4eec\u8981\u9009\u62e9\u5b83\u7684\u8fde\u7eed\u7684 $k$ \u4e2a\u4f4d\u7f6e\uff0c\u5373\u8d77\u59cb\u4f4d\u7f6e\u4e3a $pos_{cur_{t,i}}$\uff0c\u7ec8\u6b62\u4f4d\u7f6e\u4e3a $pos_{cur_{t,i}+k-1}$\uff0c\u7136\u540e\u6211\u4eec\u68c0\u9a8c\u7b2c $i$ \u4f4d\u4e4b\u540e\u662f\u5426\u8fd8\u5b58\u5728 $k$ \u4e2a $t$ \u5373\u53ef\n\n\u7136\u540e\uff0c\u4fbf\u53ef\u5f97\u5230\u72b6\u8f6c\n$$\nf[pos_{cur_{t,i}+k-1}][j']=\\max\\{f[pos_{cur_{t,i}}][j]\\}\n$$\n\u5176\u4e2d\uff0c$j'$ \u662f $j$ \u591a\u51fa $t$ \u8fd9\u4e2a\u6570\u5b57\u7684\u96c6\u5408\n\n\u4f46\u662f\u8fd9\u53ea\u662f\u4e00\u79cd\u60c5\u51b5\uff0c\u6570\u5b57 $t$ \u663e\u7136\u6709\u53ef\u80fd\u51fa\u73b0 $k+1$ \u6b21\uff0c\u6211\u4eec\u53ea\u9700\u518d\u68c0\u9a8c\u7b2c $i$ \u4f4d\u4e4b\u540e\u662f\u5426\u8fd8\u5b58\u5728 $k+1$ \u4e2a $t$ \u4e4b\u540e\uff0c\u518d\u7528\u72b6\u8f6c\n$$\nf[pos_{cur_{t,i}+k}][j']=\\max\\{f[pos_{cur_{t,i}}][j]+1\\}\n$$\n\u6ce8\u610f\u4e24\u4e2a\u5f0f\u5b50\u4e2d\u7684\u7ec6\u5fae\u5dee\u522b\uff0c\u8fd8\u8981\u4e9b\u7ec6\u8282\u53ef\u76f4\u63a5\u89c1\u4ee3\u7801\n\n# \u4ee3\u7801\n\n```cpp\nhttps://www.cnblogs.com/Arextre/p/13442790.html\n```\n\n",
        "postTime": 1596633615,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF743E \u3010Vladik and cards\u3011"
    },
    {
        "content": "```\n\u8d21\u732e\u4e00\u7bc7\u9898\u89e3\uff08\u7531\u4e8e\u8fd9\u9053\u9898\u6211\u6c34\u6302\u4e86\uff0c\u6389\u8fdb\u4e86\u5de8\u5751\uff09\n\u5176\u5b9e\u8fd9\u5c31\u662f\u4e00\u9053\u72b6\u538bdp+\u4e8c\u5206\u7b54\u6848\uff08\u8fd8\u662f\u90a3\u53e5\u8bdd\uff0c\u60f3\u5230\u5c31\u633a\u7b80\u5355\uff09\n\u4f46\u662f\u8fd8\u662f\u8981\u5206\u6790\u5206\u6790\u7684\uff1a\n\u8fd9\u9053\u9898\u9996\u5148\u8981\u60f3\u5230\uff0c\u6211\u4eec\u63d0\u53d6\u51fa\u7684\u5b50\u5e8f\u5217\u4e2d\u4efb\u610f\u4e00\u4e2a\u6570\u90fd\u662f\u8fde\u5728\u4e00\u5757\u7684\n\uff08\u5c31\u662f\u5768\u5728\u4e00\u5757\u513f\u7684\uff09\uff0c\u90a3\u4e48\u8fd9\u4e9b\u6570\u5b57\u4e2d\u5939\u6742\u7684\u5176\u4ed6\u6570\u5b57\u4e5f\u5c31\u662f\u4f5c\u5e9f\u4e86\u3002\n\u5047\u8bbe\u6211\u4eec\u8981\u5728\u201c1,2,3,1,2,1,3,3,1\u201d\u4e2d\u63d0\u53d6\u51fa3\u4e2a1\uff0c\n1. \u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u201c **1** ,2,3, **1** ,2, **1** ,3,3,1\u201d\u8fd9\u4e09\u4e2a\u52a0\u7c97\u76841\uff0c\u90a3\u4e48\u201c2,3,2\u201d\u5c31\u88ab\u4f5c\u5e9f\u4e86\uff0c\u4e0d\u80fd\u7528\u4e86\uff0c\n2. \u6211\u4eec\u4e5f\u53ef\u4ee5\u63d0\u53d6\u201c**1** ,2,3, **1** ,2,1,3, **1** \u201d\u4e2d\u8fd9\u4e09\u4e2a\u4e0d\u8fde\u7eed\u3001\u4e0d\u7d27\u51d1\u76841\u5462\uff1f\n\u90a3\u4e48\u6211\u4eec\u6d6a\u8d39\u7684\u5176\u4ed6\u6570\u5b57\u663e\u7136\u66f4\u591a\u4e86\uff082,3,3,2,3,3\uff09\uff0c\u6240\u4ee5\u660e\u663e\u524d\u8005\u66f4\u4f18\uff0c\u7136\u540e\u6211\u4eec\u53ea\u9700\u8981\u5f00\u4e2a\u5411\u91cf\u5b58\u6bcf\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\uff08\u5f53\u7136\u662f\u5347\u5e8f\u5b58\u7684\uff09\uff0c\n\u8ba1\u7b97\u5f97\u51fa\u5f53\u524d\u70b9\u540e\u9762\u6dfb\u4e0a\u7684\u6570\u5b57\u4e32\u7684\u672b\u5c3e\u6240\u5904\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u540e\u5c31\u53ef\u4ee5\u5b8c\u6210dp\u7684\u63a8\u5bfc\u4e86\u3002\n```\n\n```cpp\n#include<bits/stdc++.h>\n#define M 1010\nusing namespace std;\ninline int read(){\n\tint x=0; char c=getchar();\n\twhile(!isdigit(c)) c=getchar();\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0';\n\treturn x;\n}\nint n,ans;\nint x[M],num[10];\nint f[M][(1<<8)+10];\nvector<int> at[10];\nbool check(int tim){ //check\u51fd\u6570\uff0cans\u5728\u8fd9\u91cc\u66f4\u65b0\n\tmemset(num, 0 ,sizeof(num)); //\u6bcf\u6b21\u6e05\u96f6\n\tmemset(f , 250 , sizeof(f)); //\u6bcf\u6b21\u53d8\u6210-inf\n\tf[0][0]=0; int tot=-0x3f3f3f3f;\n\tfor(int i=0;i<n;++i){ //\u7ebf\u6027\u63a8i\n\t\tfor(int j=0;j<(1<<8);++j) if(f[i][j]>=0) //\u679a\u4e3e\u72b6\u6001\n\t\tfor(int k=0;k<8;++k){ //\u679a\u4e3e\u5f53\u524d\u4f4d\u540e\u63a5\u4e0b\u6765\u8981\u6dfb\u4e0a\u7684tim\u4e2a\u6570\u5b57k\n\t\t\tif(j&(1<<k)) continue;\n\t\t    int now=num[k]+tim-1; //\u8ba1\u7b97\u5f97\u51fak\u6700\u540e\u4e00\u4f4d\u7684\u4f4d\u7f6e\n\t\t    if(now<at[k].size())\n\t\t    \tf[at[k][now]][j|(1<<k)]=max(f[at[k][now]][j|(1<<k)],f[i][j]);\n\t\t    if(++now<at[k].size())\n\t\t    \tf[at[k][now]][j|(1<<k)]=max(f[at[k][now]][j|(1<<k)],f[i][j]+1);\n\t\t}\n\t    ++num[x[i]]; //\u5c06\u5f53\u524d\u4f4d\u5728\u6240\u5904\u7684\u5411\u91cf\u6570\u7ec4\u4e2d\u51cf\u53bb\uff08\u76f8\u5f53\u4e8e\u51cf\u53bb\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u7528\u4e86\uff09\n\t}\n\tfor(int i=0;i<=n;++i)\n\t\ttot=max(tot , f[i][(1<<8)-1]);\n\tif(tot<0) return false; //\u6ca1\u6709dp\u6210\u529f\u76f4\u63a5return false\n\tans=max(ans , 8*tim+tot); //dp\u6210\u529f\u4e86ans\u5c31\u7b49\u4e8e\u516b\u500d\u7684tim\u52a0\u4e0a\u989d\u5916\u7684\u4e2a\u6570\n\treturn true;\n}\n\nint main(){\n\tn=read(); x[0]=9;//\u5de8\u5751\u5728\u8fd9\u91cc\uff0cx0\u8981\u53d8\u62109\uff0c\u4e0d\u7136check\u91cci=0\u7684\u65f6\u5019\u3002\u3002\u3002\u54ce\u3002\u3002\u3002\u683d\u8fd9\u513f\u4e86\n\tfor(int i=1;i<=n;++i)\n\t\tx[i]=read()-1,at[x[i]].push_back(i);\n\tint l=0,r=n/8+1;\n\tfor(int i=0;i<8;++i) //\u5148\u5bf9r\u505a\u4e2a\u4f18\u5316\uff08\u80fd\u8bf4\u662f\u526a\u679d\u4e48\uff1f\uff09\n\t\tr=min(r,(int)at[i].size());\n\tif(!r){  //\u7279\u5224\uff0c\u5982\u679c\u6709\u4efb\u610f\u4e00\u4e2a\u6570\u6ca1\u51fa\u73b0\u8fc7\n\t\tfor(int i=0;i<8;++i)\n\t\t\tif(at[i].size()) ++ans;\n\t\tprintf(\"%d\\n\",ans);\n\t\treturn 0;\n\t}\n\twhile(l<=r){ //\u4e3b\u51fd\u6570\u5f88\u7b80\u77ed\uff0c\u4e3b\u8981\u5c31\u662f\u4e8c\u5206\n\t\tint mid=l+r>>1;\n\t\tif(check(mid)) l=mid+1;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1523793566,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF743E \u3010Vladik and cards\u3011"
    },
    {
        "content": "upd\uff0820200226\uff09:\u5bf9\u5f53\u65f6\u7684\u4e00\u4e9b\u7b14\u8bef\u505a\u4e86\u4fee\u6539\uff0c\u5e76\u6dfb\u52a0\u4e86\u4e00\u4e9b\u5185\u5bb9\n\n\u6b63\u89e3\u5f53\u7136\u662f $\\texttt{DP}$,\u5728\u8fd9\u91cc\u4e0d\u5728\u591a\u8bf4\u3002\n\n\u4f46\u662f\u5982\u679c\u60f3\u4e0d\u5230 $\\texttt{DP}$,\u5728\u8003\u573a\u4e0a\u53c8\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u5207\u5b9e\u53ef\u8fc7\u7684\u601d\u8def\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u6240\u8981\u53d6\u7684\u6570\u7684\u987a\u5e8f\u786e\u5b9a\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u6570\u8981\u53d6\u591a\u5c11\u4e2a\u4e5f\u786e\u5b9a\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u6574\u4e2a\u5e8f\u5217\u7684\u6700\u4f18\u53d6\u6cd5\u5c31\u5df2\u7ecf\u88ab\u786e\u5b9a\u4e86\u3002\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\uff0c\u80af\u5b9a\u662f\u8d8a\u9760\u524d\u8d8a\u597d\u3002\n\n\u6bd4\u59821,2,2,1,1,2,2,\u5982\u679c\u6211\u8981\u53d6 1,2,2\n\n\u663e\u7136\u5e94\u8be5\u53d6\u9760\u524d\u7684\uff0c\u5373 **1,2,2**,1,1,2,2,\u800c\u4e0d\u4f1a\u53bb\u53d6 1,2,2,1,**1,2,2**,\u8fd9\u6837\u663e\u7136\u662f\u4e0d\u591f\u4f18\u79c0\u7684\u3002\n\n\u7531\u4e8e\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u6bcf\u4e2a\u6570\u8981\u53d6\u591a\u5c11\u4e2a\uff0c\u518d\u679a\u4e3e\u6392\u5217\u3002\n\n\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(8! \\cdot \\log_2n)$\n\n\u4f46\u662f\u6211\u4eec\u521a\u521a\u7684\u60f3\u6cd5\u5e76\u6ca1\u6709\u8003\u8651\u95ee\u9898\u4e2d\u7684\u9650\u5236\u4e8c\uff0c\u5373\u4efb\u610f\u4e24\u79cd\u6570\u5b57\u7684\u6570\u91cf\u5dee\u4e0d\u5927\u4e8e\u4e00\u3002\n\n\u8fd9\u4e2a\u4e5f\u597d\u529e\uff0c\u5728\u4e8c\u5206\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u7ecf\u6c42\u51fa\u4e86\u5404\u4e2a\u6570\u5b57\u7684\u6570\u91cf\u5168\u90e8\u4e00\u6837\u65f6\u7684\u6700\u4f18\u89e3\n\n\u8fd9\u4e2a\u65f6\u5019\u53ea\u9700\u8981\u518d\u66b4\u529b\u679a\u4e3e\u4e00\u4e0b\u6bcf\u4e2a\u6570\u7684\u6570\u91cf\u80fd\u4e0d\u80fd\u52a0\u4e00\uff0cdfs\u4e00\u904d\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(8 \\cdot 2^8)$\n\n\u6ce8\u610f\uff0c\u8981\u5b9e\u73b0\u8fd9\u6837\u7684\u590d\u6742\u5ea6\uff0c\u8fd8\u9700\u8981\u63d0\u524d\u9884\u5904\u7406\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u4e4b\u540e\u7684\u6bcf\u4e00\u79cd\u6570\uff0c\u7b2c $i$ \u4e2a\u5728\u4ec0\u4e48\u4f4d\u7f6e\uff0c\u8fd9\u6837\u624d\u80fd\u591f\u505a\u5230 $O(1)$ \u8f6c\u79fb\n\n\u4ee3\u7801\u5341\u5206\u597d\u5b9e\u73b0\uff0c\u5c31\u4e0d\u8d34\u51fa\u6765\u4e86\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(8!\\cdot8\\cdot 2^8\\cdot \\log_2n)$\u3002\u7406\u8bba\u4e0a\u662f\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u7684\u3002\u4e14\u7531\u4e8e\u6570\u636e\u7684\u7279\u6027\uff0c\u5373\u4f7f\u662f\u6700\u5f3a\u7684\u6570\u636e\u8be5\u7b97\u6cd5\u4e5f\u65e0\u6cd5\u8dd1\u6ee1\u3002\u6240\u4ee5\u8bf7\u653e\u5fc3\u4f7f\u7528\u3002\n\n\u6211\u8fd8\u662f\u628a\u5f53\u5e74\u4e11\u5f97\u8981\u6b7b\u4ee3\u7801\u8d34\u51fa\u6765\u5427\uff1a\n\n[\u8fd9\u91cc\u662f\u4ee3\u7801](https://www.luogu.com.cn/paste/g4sqnvfs)",
        "postTime": 1571548852,
        "uid": 43957,
        "name": "HenryHuang",
        "ccfLevel": 9,
        "title": "\u300cCF743E \u300dVladik and cards"
    },
    {
        "content": "### \u3010\u9898\u610f\u3011\n\u6211\u4eec\u8981\u5728\u4e00\u4e2a\u53ea\u5b58\u5728 1 - 8 \u7684\u5e8f\u5217\u4e2d\u5bfb\u627e\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u5b50\u5e8f\u5217\u76f8\u540c\u7684\u5143\u7d20\u51fa\u73b0\u4f4d\u7f6e\u5728\u4e00\u8d77\uff0c\u800c\u4e14 1 - 8 \u8fd9\u51e0\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u76f8\u5dee\u4e0d\u8d85\u8fc7 1\u3002\u6c42\u7b26\u5408\u6761\u4ef6\u7684\u6700\u957f\u7684\u5b50\u5e8f\u5217\u3002\n\n### \u3010\u5206\u6790\u3011\n\u521a\u770b\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u6211 &^&*&%^*&$\n\n\u7136\u540e\uff0c\u6211\u5c31 &*%$^@(@ (\u2604\u25e3\u03c9\u25e2)\u2604\n\n\u5728\u8003\u573a\u4e0a\u7684\u6211\u5c31\u8349\u8349\u6253\u4e86\u4e00\u628a\u66b4\u529b\u6df1\u635c\uff0c\u8fd8\u6574\u6574\u8c03\u4e86\u534a\u4e2a\u5c0f\u65f6\uff0c\u6700\u540e\u4fbf\u6012\u5f97 10 \u5206\u3002\u3002\u3002\u3002\u3002\n\n\u90a3\u4e48\u8fd9\u9053 CF E\u9898\u5230\u5e95\u8be5\u600e\u4e48\u505a\u5462\uff1f\uff1f\uff1f\u50cf\u8fd9\u6837\u7684\u53bb\u6389\u51e0\u4e2a\u6570\u7684\u9898\u76ee\uff0c\u4e00\u822c\u90fd\u662f\u8981~~\u8d2a\u5fc3\u4e00\u628a~~ dp \u4e00\u628a\u3002\u4f46\u662f\u8fd9\u6837\u6709\u975e\u5e38\u591a\u7684\u72b6\u6001\uff0c\u8be5\u600e\u4e48\u89e3\u51b3\u5462\uff1f\n\n\u5728\u8003\u573a\u4e0a\uff0c\u6211\u5c31\u60f3\u5230\u4e86\u7528**\u4e8c\u5206\u679a\u4e3e\u6bcf\u4e2a\u5143\u7d20\u7684\u4e2a\u6570\u6765\u89e3\u51b3**\u3002\u56e0\u4e3a\u6bcf\u4e2a\u6bd4\u7b54\u6848\u5c0f\u7684\u72b6\u6001\u90fd\u662f\u5305\u542b\u5728\u7b54\u6848\u7684\u72b6\u6001\u4e2d\u7684\uff0c\u5373\u8fd9\u6837\u7684\u7b54\u6848\u662f\u6709\u5355\u8c03\u6027\u7684\uff0c\u53ef\u4ee5\u7528\u4e8c\u5206\u89e3\u51b3\u3002\n\n\u7136\u540e\u8003\u8651 dp\uff0c\u6211\u4eec\u53d1\u73b0 n \u7684\u8303\u56f4\u662f\u5c0f\u4e8e 1000 \u7684\uff0c\u90a3\u4e48\u72b6\u538b\u4e00\u4e0b\u5c31\u53ef\u4ee5\u627e\u51fa\u6240\u6709\u7684\u53ef\u884c\u72b6\u6001\u4e86\u3002\n\n### \u3010\u6838\u5fc3\u4ee3\u7801\u3011\n1\u3001dp \u65b9\u7a0b\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u679a\u4e3e\u7684\u7b54\u6848\uff0cdp[ i ][ j ] \u8868\u793a**\u524d i \u4e2a\u6570\u4e2d j \u72b6\u6001\u4e0b\u7684\u51fa\u73b0\u8fc7\u7684\u6570\u7684\u6700\u591a\u7684\u51fa\u73b0\u6b21\u6570\u3002** (j \u8868\u793a\u6b64\u65f6\u7684\u72b6\u6001\uff0c\u5176\u4e2d 1 \u8868\u793a\u6b64\u4f4d\u6570\u5b57\u51fa\u73b0\u4e86)\u3002\n```cpp\ninline int check(int len)\n{\n    memset(cur, 0, sizeof(cur));\n    memset(dp, -1, sizeof(dp));\n    dp[0][0] = 0;\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < (1 << 8); j++)\n        {\n            if(dp[i][j] == -1) continue;\n            for(int k = 1; k <= 8; k++)\n            {\n                if(j & (1 << (k - 1))) continue;\n                int x = cur[k] + len - 1;\n                if(x >= g[k].size()) continue;\n                dp[g[k][x]][j | (1 << (k - 1))] = Max(dp[g[k][x]][j | (1 << (k - 1))], dp[i][j]);\n                if((++x) >= g[k].size()) continue;\n                dp[g[k][x]][j | (1 << (k - 1))] = Max(dp[g[k][x]][j | (1 << (k - 1))], dp[i][j] + 1);\n            }\n        }\n        ++cur[a[i]];\n    }\n    int ans = -1;\n    for(int i = 1; i <= n; i++)\n        ans = Max(ans, dp[i][(1 << 8) - 1]);\n    if(ans == -1) return -1;\n    return ans * (len + 1) + (8 - ans) * len;\n}\n```\n\n2\u3001\u4e8c\u5206\u67e5\u627e\u7b54\u6848\uff1a\n\n\u56e0\u4e3a\u6700\u591a 1000 \u4e2a\u6570\uff0c\u6240\u4ee5\u6bcf\u4e2a\u6570\u6700\u591a\u51fa\u73b0\u6b21\u6570\u4e3a 125 \u6b21\uff0c\u4e8c\u5206\u8fb9\u754c\u5c31\u662f n / 8\u3002\u7136\u540e\u6709\u4e00\u4e2a\u7279\u5224\uff0c**\u5982\u679c\u4e8c\u5206\u65f6\u6ca1\u6709\u627e\u5230\u5c31\u8bf4\u660e\u662f\u4e0d\u5b58\u5728 1 \u4e2a\u53ca\u4ee5\u4e0a\u7684\u5408\u6cd5\u72b6\u6001\uff0c\u90a3\u4e48\u5c31\u7edf\u8ba1\u51fa\u73b0\u4e86\u7684\u6570\u7684\u4e2a\u6570\u5373\u53ef**\u3002\n```cpp\nvoid Solve()\n{\n\tint l = 1, r = n / 8, mid;\n    while(l + 1 < r)\n    {\n        mid = (l + r) >> 1;\n        if(check(mid) != -1) l = mid;\n        else r = mid - 1;\n    }\n    int ans = Max(check(l), check(r));\n    if(ans == -1)\n    {\n        ans = 0;\n        for(int i = 1; i <= 8; i++)\n            if(g[i].size()) ans++;\n    }\n    printf(\"%d\\n\", ans);\n}\n```\n### \u3010\u6b63\u89e3\u3011\n```\n#include <bits/stdc++.h>\n#define N 1010\nusing namespace std;\n\nint n;\nvector<int> g[10];\nint a[N], p[10], cur[10], dp[N][1 << 8];\n\ninline int Max(int a, int b)\n{\n\treturn a > b ? a : b;\n}\n\ninline int check(int len)\n{\n    memset(cur, 0, sizeof(cur));\n    memset(dp, -1, sizeof(dp));\n    dp[0][0] = 0;\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < (1 << 8); j++)\n        {\n            if(dp[i][j] == -1) continue;\n            for(int k = 1; k <= 8; k++)\n            {\n                if(j & (1 << (k - 1))) continue;\n                int x = cur[k] + len - 1;\n                if(x >= g[k].size()) continue;\n                dp[g[k][x]][j | (1 << (k - 1))] = Max(dp[g[k][x]][j | (1 << (k - 1))], dp[i][j]);\n                if((++x) >= g[k].size()) continue;\n                dp[g[k][x]][j | (1 << (k - 1))] = Max(dp[g[k][x]][j | (1 << (k - 1))], dp[i][j] + 1);\n            }\n        }\n        ++cur[a[i]];\n    }\n    int ans = -1;\n    for(int i = 1; i <= n; i++)\n        ans = Max(ans, dp[i][(1 << 8) - 1]);\n    if(ans == -1) return -1;\n    return ans * (len + 1) + (8 - ans) * len;\n}\n\nvoid Solve()\n{\n\tint l = 1, r = n / 8, mid;\n    while(l + 1 < r)\n    {\n        mid = (l + r) >> 1;\n        if(check(mid) != -1) l = mid;\n        else r = mid - 1;\n    }\n    int ans = Max(check(l), check(r));\n    if(ans == -1)\n    {\n        ans = 0;\n        for(int i = 1; i <= 8; i++)\n            if(g[i].size()) ans++;\n    }\n    printf(\"%d\\n\", ans);\n}\n\nint main()\n{\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; i++)\n    {\n        scanf(\"%d\", &a[i]);\n        g[a[i]].push_back(i);\n    }\n    Solve();\n\n    return 0;\n}\n```",
        "postTime": 1534938082,
        "uid": 71084,
        "name": "\u5e05\u5230\u62a5\u8b66",
        "ccfLevel": 0,
        "title": "CF743E  Vladik and cards"
    },
    {
        "content": "\u8003\u8bd5\u65f6\u770b\u5230\u4e24\u4e2a\u6761\u4ef6\u7b2c\u4e00\u4e2a\u60f3\u5230\u7684\u662f\u72b6\u538b dp\uff0c\u72b6\u538b\u5f88\u5bb9\u6613\u60f3\uff0c\u4f46 dp \u5f88\u3002\n\n\u5148\u8003\u8651 zqw \u5927\u4f6c\u7684\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4f46\u662f\u7b97\u7b97\u7a7a\u95f4 $1000\\times1000\\times2^8B$ \u5927\u6982\u662f $400$ \u591a\u5146\u7684\u6837\u5b50\uff0c\u53ea\u597d\u4e0d\u7528\u641c\u7d22\u3002\n\n\u7136\u540e\u60f3\u5230 dp \u53ef\u4ee5\u6eda\u52a8\uff0c\u4f46\u662f\u8fd9\u9898\u9009\u5b50\u5e8f\u5217\u800c\u4e14\u76f8\u540c\u6570\u5b57\u5fc5\u987b\u76f8\u90bb\uff0c\u6240\u4ee5\u65e0\u6cd5\u6eda\u52a8\uff0c\u7136\u540e\u5c31\u662f\u820d\u5f03 dp\u3002\n\n\u5176\u5b9e\u6211\u505a\u5230\u8fd9\u91cc\u5df2\u7ecf\u5feb\u653e\u5f03\u4e86.....\n\n\u7136\u540e\u601d\u8003\u54ea\u4e00\u7ef4\u53ef\u4ee5\u7701\u6389\uff0c\u6eda\u52a8\u4e0d\u884c\u4e86\uff0c\u6ca1\u6709\u987a\u5e8f\uff0c\u6240\u4ee5\u6bcf\u4e2a\u72b6\u6001\u80af\u5b9a\u8981\u679a\u4e3e\u5230\uff0c\u6240\u4ee5\u53ea\u5269\u6570\u91cf\u4e86\uff0c\u8fd9\u91cc\u7684\u6570\u91cf\u603b\u5171\u53ea\u6709\u4e24\u4e2a\uff08$mid,mid+1$\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e8c\u5206\uff0c\u5728 $check()$ \u51fd\u6570\u91cc dp \u5c31\u884c\u4e86\uff0c\u7a7a\u95f4\u65f6\u95f4\u76f8\u5e73\u8861 qwq\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\ninline ll max(const ll &x,const ll &y){return x>y?x:y;}\ninline ll min(const ll &x,const ll &y){return x<y?x:y;}\nvoid qr(ll &x){\n\tbool f=x=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)) f|=c=='-',c=getchar();\n\twhile(isdigit(c)) x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\tx=f?~(x-1):x;\n\treturn ;\n}\nll dp[1005][256],n,lst[1005],a[1005],pos[15];\nll check(ll x){//[x,x+1]\n\tmemset(dp,128,sizeof(dp));\n\tdp[0][0]=0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=0;j<(1<<8);j++) dp[i][j]=dp[i-1][j];\n\t\tint id=i;\n\t\tfor(int j=1;j<x;j++) id=lst[id];\n\t\tif(!id) continue;\n\t\tfor(int j=0;j<(1<<8);j++) if(j&(1<<a[i]-1)) dp[i][j]=max(dp[i][j],max(dp[id-1][j^1<<a[i]-1]+x,lst[id]?dp[lst[id]-1][j^1<<a[i]-1]+x+1:-1919810114514));\n\t}\n\tif(dp[n][(1<<8)-1]<0) return -1;\n\treturn dp[n][(1<<8)-1];\n}\nint main() {\n//\tfreopen(\"subsequence.in\",\"r\",stdin);\n//\tfreopen(\"subsequence.out\",\"w\",stdout);\n\tqr(n);\n\tfor(int i=1;i<=n;i++) {\n\t\tqr(a[i]);\n\t\tlst[i]=pos[a[i]],pos[a[i]]=i;\n\t}\n\tfor(int i=1;i<=8;i++) {\n\t\tif(!pos[i]){\n\t\t\tint tot=0;\n\t\t\tfor(int j=1;j<=8;j++) tot+=!!pos[j];\n\t\t\tprintf(\"%d\",tot);\n\t\t\treturn 0;\n\t\t}\n\t}\n\tll l=0,r=(n+7)/8,mid;\n\twhile(r-l>1){\n\t\tmid=l+r>>1;\n\t\tif(~check(mid)) l=mid;\n\t\telse r=mid-1;\n\t}\n\tif(~check(r)) printf(\"%lld\",check(r));\n\telse printf(\"%lld\",check(l));\n//\tfor(int i=1;i<=n;i++)\n//\t\tfor(int j=0;j<(1<<8);j++) if(dp[i][j]>=0) printf(\"dp[%d][%d]=%lld\\n\",i,j,dp[i][j]);\n\treturn 0;\n}\n```",
        "postTime": 1643349427,
        "uid": 383791,
        "name": "Others",
        "ccfLevel": 7,
        "title": "CF743E \u9898\u89e3"
    },
    {
        "content": "### \u601d\u8def\n\n\u8fd9\u4e2a\u9898\u7528\u72b6\u538b\u663e\u800c\u6613\u89c1\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u80fd\u9700\u8981\u5361\u4e00\u5361\u3002\n\n\u6211\u4eec\u5148\u679a\u4e3e\u6bcf\u79cd\u5143\u7d20\u9009\u62e9\u6570\u91cf\u533a\u95f4 $k\\sim k+1$\u3002\u8fd9\u91cc\u5c31\u6709\u4e00\u4e2a\u5361\u5e38\u7684\u7a7a\u95f4\uff0c\u56e0\u4e3a\u5176\u5b9e $k$ \u679a\u4e3e\u5230 $\\frac{n}{8}$ \u5c31\u53ef\u4ee5\u4e86\uff0c\u518d\u5927\u6ca1\u5fc5\u8981\u4e86\u3002\n\n\u7136\u540e\u5c31\u662f\u6b63\u5e38\u72b6\u538bdp\u4e86\u3002\u5b9a\u4e49 $dp_{i,j}$ \u8868\u793a\u5230\u7b2c $i$ \u4e2a\u5143\u7d20\uff0c$j$ \u4e3a $8$ \u79cd\u5143\u7d20\u7684\u51fa\u73b0\u72b6\u6001\u3002\u90a3\u4e48\u6b64\u65f6\u8f6c\u79fb\u5c31\u5f88\u597d\u8f6c\u79fb\u4e86\u3002\u6211\u4eec\u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u5f80\u524d\u5ef6\u4f38\u7684\u6570\u91cf\uff0c\u5c31\u4e0d\u7528\u5728\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u5019\u66b4\u529b\u4e86\u3002\u4f46\u8981\u6ce8\u610f\u7ec6\u8282\u3002\u8be6\u89c1\u6ce8\u91ca\u3002\n\n\u590d\u6742\u5ea6\uff1a$O(\\frac{n}{8}\\times n\\times 2^8)=O(n^2\\times2^5)$\uff0c\u663e\u7136\u53ef\u8fc7\u3002\n\n### code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1005;\nint n,a[N],lst[N][N],tot,ans;\nint dp[N][1<<8];\nint main() {\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n    for (int i=1;i<=n;i++) {\n        int sum=0;\n        for (int j=i;j>=1;j--) {\n            if (a[i]==a[j]) lst[i][++sum]=j;\n        }\n    }\n    memset(dp[0],192,sizeof dp[0]);//\u6392\u9664\u4e0d\u5408\u6cd5\u7684\u7b54\u6848\n    for (tot=0;tot<=n/8;tot++) {\n        for (int i=0;i<=n;i++) dp[i][0]=0;\n        for (int i=1;i<=n;i++) {\n            for (int j=0;j<1<<8;j++) {\n                dp[i][j]=dp[i-1][j];//\u4e0d\u9009\u8fd9\u4e2a\n                if (!tot) {\n                    if (j&(1<<a[i]-1)) dp[i][j]=dp[i-1][j^(1<<a[i]-1)]+1;\n                    for (int k=1;k<=8;k++) {\n                        if ((j&(1<<k-1))==0) continue;\n                        dp[i][j]=max(max(dp[i][j^(1<<k-1)],dp[i-1][j^(1<<k-1)]),dp[i][j]);\n                    }\n                } else {\n                    int k=a[i];\n                    if ((j&(1<<k-1))==0) continue;\n                    if (!lst[i][tot]) continue;\n                    dp[i][j]=max(dp[i][j],dp[lst[i][tot]-1][j^(1<<k-1)]+tot);\n                    if (!lst[i][tot+1]) continue;\n                    dp[i][j]=max(dp[i][j],dp[lst[i][tot+1]-1][j^(1<<k-1)]+tot+1);\n                }\n            }\n        }\n        for (int i=1;i<=n;i++) {\n            ans=max(ans,dp[i][(1<<8)-1]);\n        }//\u7b54\u6848\u4e0d\u4e00\u5b9a\u662f\u6700\u540e\u4e00\u4e2a\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1643345884,
        "uid": 407223,
        "name": "TulipeNoire",
        "ccfLevel": 7,
        "title": "tl\u672c\u7740\u6b63\u4e49\u4e4b\u540d"
    },
    {
        "content": "### \u524d\u7f6e\u77e5\u8bc6\n\n- \u4e8c\u5206\u7b54\u6848\n\n- \u72b6\u538bDP\n\n### \u601d\u8def\n\n\u4e00\u770b\u8fd9\u79cd\u9898\u76ee\u5e76\u6ca1\u6709\u4ec0\u4e48\u5f88\u5947\u5999\u7684\u601d\u8def\uff0c\u6211\u4eec\u8003\u8651\u7528\u4e8c\u5206\u7b54\u6848\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002\n\n\u9996\u5148\u4e8c\u5206\u7684\u80af\u5b9a\u662f\u6700\u5c0f\u7684\u4e00\u4e2a\u6570\u5b57\u7684\u8fde\u7eed\u6bb5\u7684\u957f\u5ea6\uff0c\u6b64\u65f6\u7684\u4e00\u4e2a\u8fde\u7eed\u6bb5\u8981\u4e48 $len$\uff0c\u8981\u4e48 $len+1$\u3002\n\n\u8bbe $f_{i,j}$ \u8868\u793a\u524d $i$ \u4e2a\u6570\uff0c\u9009\u62e9\u7684\u6570\u5b57\u7684\u8fde\u7eed\u6bb5\u7684\u72b6\u6001\u4e3a $j$ \u7684\u591a\u51fa\u6765\u7684\u957f\u5ea6\u3002\n\n\u6211\u4eec\u8003\u8651\u6bcf\u6b21\u679a\u4e3e\u5b8c\u4e00\u4e2a\u5730\u65b9\u7684\u65f6\u5019\uff0c\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e2a\u6570\u7684\u524d\u9a71\u957f\u5ea6\uff0c\u4ee5\u4fbf\u4e8e\u4e0b\u4e00\u6b21\u8fdb\u884c\u8ba1\u7b97\u3002\n\n\u4e0b\u4e00\u6b21\u7684\u5408\u6cd5\u957f\u5ea6\u7684\u7ec8\u70b9\u4e3a\u7b2c $cur_k+len-1$ \u4e2a $k$ \u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u5f53\u5224\u65ad\u4e00\u4e0b\u6b64\u65f6\u7684\u957f\u5ea6\u5408\u6cd5\u65f6\uff0c\u5c31\u66f4\u65b0\u3002\n\n```cpp\nf[g[k][x]][s|(1<<(k-1))]=max(f[g[k][x]][s|(1<<(k-1))],f[i][s]);\n\t\t\t\t\n```\n\n\u5e76\u4e14\u8003\u8651\u5224\u65ad\u4e0b\u4e00\u4e2a $k$ \u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u8fd8\u662f\u5408\u6cd5\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8003\u8651\u52a0\u4e0a $1$ ,\u56e0\u4e3a\u591a\u51fa\u6765\u4e00\u5757\u4e86 $\\text{qwq}$\u3002\n\n```cpp\nf[g[k][x]][s|(1<<(k-1))]=max(f[g[k][x]][s|(1<<(k-1))],f[i][s]+1); \n\t\t\t\n```\n\u6700\u540e\u5c31\u662f\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u4e86\uff0c\u6ca1\u6709\u51fa\u73b0\u6240\u6709\u7684 $[1,8]$ \u5185\u7684\u6570\uff0c\u90a3\u4e48\u6700\u591a\u6bcf\u4e00\u4e2a\u6570\u9009\u62e9\u4e00\u4e2a\uff0c\u5224\u65ad\u90a3\u4e9b\u6570\u5b58\u5728\uff0c\u8f93\u51fa\u5b58\u5728\u7684\u6570\u7684\u79cd\u7c7b\u5c31\u884c\u4e86\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<map>\nusing namespace std;\nconst int N=1e3+9;\nconst int M=1e3+9;\nconst int K=(1<<8)+9;\nint n,a[N];\nint ans;\nint f[N][K];\nint cur[N];\nint l,r;\nvector<int> g[9];\nint read()\n{\n\tint f=1,x=0;\n\tchar s=getchar();\n\twhile(s<'0'||s>'9'){if(s=='-')f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9'){x=(x<<1)+(x<<3)+(s^'0');s=getchar();}\n\treturn f*x;\n}\nint check(int len)\n{\n\tmemset(f,-1,sizeof(f));\n\tmemset(cur,0,sizeof(cur));\n\tf[0][0]=0;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tfor(int k=1;k<=8;k++)\n\t\t{\n\t\t\tfor(int s=0;s<(1<<8);s++)\n\t\t\t{\n\t\t\t\tint x=cur[k]+len-1;//\u8868\u793a\u5f53\u524d\u51fa\u73b0\u7684\u4f4d\u7f6e\n\t\t\t\tif(s&(1<<(k-1))) continue;\n\t\t\t\tif(f[i][s]==-1) \n\t\t\t\t\tcontinue; \n\t\t\t\tif(x>=g[k].size()) \n\t\t\t\t\tcontinue;//\u529e\u4e0d\u4e86\u4e86\n\t\t\t\tf[g[k][x]][s|(1<<(k-1))]=max(f[g[k][x]][s|(1<<(k-1))],f[i][s]);\n\t\t\t\tx++;\n\t\t\t\tif(x>=g[k].size()) \n\t\t\t\t\tcontinue;\n\t\t\t\tf[g[k][x]][s|(1<<(k-1))]=max(f[g[k][x]][s|(1<<(k-1))],f[i][s]+1); \n\t\t\t}\t\t \n\t\t}\n\t\tcur[a[i]]++;//\u8bb0\u5f55\u4e00\u4e0b\u6240\u6709\u524d\u9a71\u7684\u4f4d\u7f6e \n\t}\n\tint ans=-1;\n\tfor(int i=1;i<=n;i++)\n\t\tans=max(ans,f[i][(1<<8)-1]);\n\tif(ans==-1) return -1;\n\telse return 8*len+ans;\n}\nint Get_ans()\n{\n\tint Fir=check(l);\n\tint Sec=check(r);\n\tint ans=max(Fir,Sec);\n\tif(ans!=-1)\n\t\treturn ans;\n\tans=0;\n\tfor(int i=1;i<=8;i++)\n\t\tif(g[i].size()!=0)\n\t\t\tans++;\n\treturn ans;//\u5982\u679c\u4e0d\u8db3 8 \u4e2a\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u6728\u62c9\u6728\u62c9 \n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ta[i]=read();\n\t\tg[a[i]].push_back(i);//\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u7684\u4f4d\u7f6e \n\t}\n\tl=1; r=n/8;\n\twhile(l<r-1)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid)!=-1)\n\t\t\tl=mid;\n\t\telse r=mid-1;\t\n\t}\t\n\tprintf(\"%d\\n\",Get_ans()); \n\treturn 0;\n}\n\n```\n",
        "postTime": 1630937384,
        "uid": 230804,
        "name": "Durancer",
        "ccfLevel": 4,
        "title": "\u3010\u9898\u89e3\u3011CF743E Vladik and cards"
    },
    {
        "content": "\u9898\u610f\uff1a\u9898\u9762\u63cf\u8ff0\u7684\u5f88\u6e05\u6670\u4e86\u3002\n\n\u9898\u89e3\uff1a\n\n\u4e8c\u5206\u7b54\u6848\u3002\n\n\u56e0\u4e3a\u6bcf\u79cd\u6570\u5b57\u53ea\u80fd\u6709 $k$ \u6216 $k+1$ \u4e2a\uff0c\u6240\u4ee5\u4e8c\u5206\u8fd9\u4e2a $k$ \uff0c\u663e\u7136 $k$ \u8d8a\u5927\uff0c\u7b54\u6848\u8d8a\u5927\u3002\n\n\u8003\u8651\u600e\u4e48\u5224\u65ad\u662f\u5426\u53ef\u884c\u3002\n\n\n\u770b\u5230\u6bcf\u79cd\u6570\u5b57\u5fc5\u987b\u8fde\u7eed\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86\u5165\u624b\u70b9\u3002\n\n\u9996\u5148\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\u5c31\u662f\u6bcf\u79cd\u6570\u5b57\u90fd\u8981\u53d6\u8fde\u7eed\u7684\u4e00\u6bb5\u3002\n\n\u6bd4\u5982 $1,1,2,1,3,4,5,6,7,8$\n\n\u8fd9\u4e2a\u60c5\u51b5\u4e0b\uff0c\u663e\u7136\u53ef\u4ee5\u53d6\u4e24\u4e2a $1$ ,\u5269\u4e0b\u7684\u90fd\u53d6\u4e00\u4e2a\uff0c\u7b54\u6848\u4e3a $9$\u3002\n\n\u4f46\u662f\u5982\u679c\u6211\u4eec\u53d6\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a $1$ \uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a $2$ \u76f8\u5f53\u4e8e\u88ab\u6211\u4eec\u201c\u6d6a\u8d39\u201d\u6389\u4e86\uff0c\u6b64\u65f6\u65b9\u6848\u4e0d\u53ef\u884c\u3002\n\n\u4e8e\u662f\u4e3a\u4e86\u8ba9\u201c\u6d6a\u8d39\u201d\u7684\u6570\u5b57\u6570\u5c3d\u91cf\u5c11\uff0c\u540c\u79cd\u6570\u5b57\u5e94\u8be5\u53d6\u8fde\u7eed\u7684\u4e00\u6bb5\u3002\n\n\u7136\u540e\u56e0\u4e3a\u6bcf\u79cd\u6570\u5b57\u90fd\u5c0f\u4e8e $8$ \uff0c\u5bb9\u6613\u60f3\u5230\u72b6\u538b\u3002\n\n\u8bbe$dp_{i,s}$\u8868\u793a\u5f53\u524d\u5230\u7b2c $i$ \u4e2a\u6570\uff0c\u524d\u9762\u7684\u6570\u5b57\u72b6\u6001\u4e3a $s$ \u7684\u65b9\u6848\u6570\u3002\n\n\u7136\u540e\u679a\u4e3e\u8f6c\u79fb\uff0c\u4e5f\u5c31\u662f\u679a\u4e3e $j$ \uff0c\u5728\u72b6\u6001\u4e2d\u52a0\u5165\u8fd9\u4e2a $j$\u3002\n\n\u5f53\u7136\u5982\u679c\u72b6\u6001\u4e2d\u5df2\u7ecf\u6709 $j$ \u4e86\u5c31\u76f4\u63a5`continue`\u3002\n\n\u8003\u8651\u65b0\u7684\u72b6\u6001\u5e94\u8be5\u5230\u7b2c\u51e0\u4e2a\u6570\u5b57\u3002\n\n\u6211\u4eec\u628a\u6bcf\u79cd\u6570\u5b57\u51fa\u73b0\u7684\u4f4d\u7f6e\u5b58\u5230 $vecter$ \u91cc\u3002\n\n\u8bb0 $now_i$ \u8868\u793a $i$ \u8fd9\u4e2a\u6570\u5b57\u5df2\u7ecf\u5230\u4e86\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\u3002\n\n\u6bcf\u6b21\u679a\u4e3e\u5b8c $i$ \u4e4b\u540e\u5c31 $now_{a_i}++$ \u3002\n\n\u6240\u4ee5\u65b0\u7684\u4f4d\u7f6e\u5c31\u662f $v[j][now[j]+k-1]$ \u3002\n\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n\n\u7136\u540e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u5f88\u597d\u5199\u51fa\u4e86\uff0c\u5728\u4ee3\u7801\u4e2d\u3002\n\n\u5f53\u7136\u8fd8\u6709\u53e6\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u9009$k+1$\u4e2a\u6570\u3002\n\n\u6b64\u65f6\u7684\u4f4d\u7f6e\u5c31\u662f $v[j][now[j]+k]$ \u3002\n\n\u540c\u6837\u7684\u65b9\u6cd5\u6765\u5904\u7406\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define N 2001001\n#define MAX 2001\n#define re register\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nconst ll mod=1000000007; \ninline void read(re ll &ret)\n{\n    ret=0;re char c=getchar();re bool pd=false;\n    while(!isdigit(c)){pd|=c=='-';c=getchar();}\n    while(isdigit(c)){ret=(ret<<1)+(ret<<3)+(c&15);c=getchar();}\n    ret=pd?-ret:ret;\n    return;\n}\nll n,a[N],l,r,mid,tmp,now[10],dp[1200][267];\nvector<ll>v[10];\ninline ll check(re ll k)\n{\n    if(!k)\n        return -1;\n    re ll maxn=(1<<8)-1;\n    memset(now,0,sizeof(now));\n    memset(dp,-1,sizeof(dp));\n    for(re int i=1;i<=n;i++)\n        dp[i][0]=0;\n    for(re int i=1;i<=n;i++)\n    {\n        for(re int s=0;s<=maxn;s++)\n            if(dp[i][s]!=-1)\n            {\n                for(re int j=1;j<=8;j++)\n                {\n               //     cout<<i<<\" \"<<s<<\" \"<<j<<endl;\n                    if((s>>(j-1))&1)\n                        continue;\n                    re ll cur=now[j]+k-1;\n                    if(cur>=v[j].size())\n                        continue;\n                    dp[v[j][cur]][s^(1<<j-1)]=max(dp[v[j][cur]][s^(1<<j-1)],dp[i][s]);\n                    if((++cur)>=v[j].size())\n                        continue;\n                    dp[v[j][cur]][s^(1<<j-1)]=max(dp[v[j][cur]][s^(1<<j-1)],dp[i][s]+1);\n                //    cout<<i<<\" \"<<s<<\" \"<<j<<endl;\n                }\n            }\n        now[a[i]]++;\n    }\n    re ll ret=-1;\n    for(re int i=1;i<=n;i++)\n        ret=max(ret,dp[i][maxn]);\n    if(ret==-1)\n        return -1;\n    return ret*(k+1)+(8-ret)*k;\n}\nsigned main()\n{\n    read(n);\n    for(re int i=1;i<=n;i++)\n        read(a[i]),v[a[i]].push_back(i);\n    l=1,r=n/8;\n    while(l+1<r)\n    {\n        mid=l+r>>1;\n        if(check(mid)!=-1)\n            l=mid;\n        else\n            r=mid-1;\n    }\n    tmp=max(check(l),check(r));\n    if(tmp==-1)\n    {\n        tmp=0;\n        for(re int i=1;i<=8;i++)\n            if(v[i].size())\n                tmp++;\n    }\n        \n    printf(\"%lld\\n\",tmp);\n    #ifdef WIN32\n    system(\"pause\");\n    #endif\n\texit(0);\n}\n\n```\n",
        "postTime": 1599352014,
        "uid": 176990,
        "name": "Celtic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF743E \u3010Vladik and cards\u3011"
    },
    {
        "content": "# [CF743E] Vladik and cards\n\n## \u4e00.\u524d\u8a00\n\n\u200b\t\u628a\u5b50\u5e8f\u5217\u770b\u6210\u5b50\u4e32\u8fd8\u771f\u662f\u5bf9\u4e0d\u8d77\u4e86\u3002[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/CF743E)\n\n## \u4e8c.\u601d\u8def\n\n\u200b\t\u9996\u5148\u7531\u6bcf\u4e24\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u4e4b\u5dee\u4e0d\u8d85\u8fc71\u53ef\u4ee5\u77e5\u9053\uff0c\u4ee5\u4e0b\u51e0\u70b9\u3002\u5bf9\u4e8e\u4e00\u4e2a\u53ef\u4ee5\u8bb0\u5165\u7b54\u6848\u7684\u5e8f\u5217\uff0c\u6709\n\n- \u6240\u6709\u7684\u6570\u5b57\u90fd\u5728\u91cc\u9762\uff08\u9664\u975e\u90e8\u5206\u6570\u5b57\u53ea\u9009\u4e00\u4e2a\uff0c\u5176\u4f59\u4e0d\u9009\uff09\n- \u6240\u6709\u51fa\u73b0\u7684\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\u4e4b\u4e2d\u6709\u4e00\u4e2a\u6700\u5c0f\u503c k\n- \u6709\u90e8\u5206\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\u4e3a k+1\n\n\u7136\u540e\u6211\u4eec\u8bd5\u7740\u770b\u4e00\u770bk\u548c\u7b54\u6848\u7684\u5173\u7cfb\uff0c\u5047\u5982\u8bbe **add \u4e3a\u51fa\u73b0\u6b21\u6570\u4e3a k+1 \u7684\u6570\u5b57\u4e2a\u6570**\uff0c\u90a3\u4e48\u5f88\u663e\u7136\u7684\u6709 $ans=8*k+add$.\u5e76\u4e14\u6709 ans\u548ck\u6210**\u6b63\u76f8\u5173\u7684**\u5173\u7cfb\u3002\n\n\u200b\t\u6709\u4e86\u4ee5\u4e0a\u7684\u7ed3\u8bba\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5**\u4e8c\u5206\u731ck**,\u7136\u540e\u8bd5\u56fe\u8ba1\u7b97\u51fa\u5728\u5b8c\u6210\u6bcf\u4e2a\u6570\u5b57\u81f3\u5c11\u51fa\u73b0k\u4e2a\u7684\u6807\u51c6\u65f6\uff0cadd\u7684\u503c\u3002\u82e5\u662f\u65e0\u6cd5\u8fbe\u5230\u6807\u51c6\uff0c\u90a3\u4e48\u5c31\u5c06k\u4e0b\u8c03\uff0c\u5426\u5219\u4e0a\u5347\u3002\n\n\u200b\t\u73b0\u5728\u53ea\u9700\u8981\u89e3\u51b3\u5982\u4f55\u6c42add\u7684\u95ee\u9898\u3002\u8fd9\u91cc\u4f7f\u7528\u72b6\u538bDP\uff0c**$f[x][j]$\u8868\u793a\u5728x\u7684\u4f4d\u7f6e j \u6240\u4ee3\u8868\u7684\u6570\u5b57\u90fd\u5df2\u7ecf\u51fa\u73b0\u81f3\u5c11 k \u6b21\u7684add\u3002\u7136\u540e\u9700\u8981\u4e00\u4e2a\u8f85\u52a9\u53d8\u91cf\uff0c$pos[x][i]$\u8868\u793a\u5e8f\u5217\u4e2d\u7b2c i \u4e2a x \u7684\u4f4d\u7f6e**\u3002\u8fd9\u91cc\u7528\u4e86\u4e00\u5c0f\u70b9\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u5373\u5982\u679c\u6211\u4eec\u8981\u9009\u4e00\u4e9b\u76f8\u540c\u7684\u6570\u51fa\u6765\uff0c\u90a3\u4e48\u8fd9\u4e9b**\u6570\u80af\u5b9a\u662f\u9760\u7684\u8d8a\u8fd1\u8d8a\u597d**\uff0c\u8fd9\u6837\u624d\u80fd\u4e3a\u540e\u9762\u7684DP\u63d0\u4f9b\u66f4\u591a\u7684\u673a\u4f1a\u3002\n\n\u200b\t\u90a3\u4e48\u8f6c\u79fb\u65b9\u7a0b\u53ef\u4ee5\u6bd4\u8f83\u6e05\u695a\u7684\u63a8\u51fa\uff0c\u8fd9\u91cc\u5199\u4e0d\u6e05\u695a\uff0c\u8fd8\u662f\u770b\u4ee3\u7801\u4f1a\u6bd4\u8f83\u5bb9\u6613\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u6b21\u8fdb\u884c\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u6211\u4eec\u662f\u5148\u9009\u51fa\u72b6\u6001\u4ee5\u5916\u7684\u4e00\u4e2a\u6570 p\uff0c\u7136\u540e\u5f97**\u51fa\u8fd9\u4e2a p \u4e4b\u540e\u7b2c k-1 \u7684 p\u7684\u4f4d\u7f6e**\uff0c\u8f6c\u79fb\u5230\u90a3\u4e0a\u9762\u53bb\u3002\uff08\u8fd9\u6837**\u603b\u5171\u5c31\u6709k\u4e2ap**\uff09\uff0c\u7136\u540e\u5982\u679c\u540e\u9762**\u8fd8\u5269\u7684\u6709 k \u4e2a p\uff08\u5373\u603b\u53ef\u585e\u5165\u7684\u6709k+1\u4e2a\uff09**\u90a3\u4e48\u4e5f\u8f6c\u79fb\u4e00\u4e0b\u3002\n\n\u200b\t\u5982\u4f55\u5f97\u5230\u4e4b\u540e\u7b2c k-1 \u4e2a p \u7684\u4f4d\u7f6e\u662f\u4f9d\u9760\u4e8epos\u6570\u7ec4\uff0c\u4f46\u662f\u6bcf\u6b21**\u4e0d\u53ef\u80fd\u4ece$pos[p][1]$ \u5f00\u59cb\u5f80\u540e\u9762\u7b97**\uff0c\u90a3\u4e48\u518d\u7528\u4e00\u4e2a start \u6570\u7ec4\u8868\u793a\u5e94\u8be5\u662f\u4ece $pos[p][start[p]]$ \u5f00\u59cb\u627e k-1 \u4e2a\uff0c\u5373\u6c42\u51fa $pos[p][start[p]+k-1]$\uff0c**\u6ce8\u610f$start$\u968f\u7740i\u800c\u53d8\u5316**\u3002\n\n\u200b\t\u6700\u540e\u521d\u59cb\u5316$f[0][0]=0$\u5c31\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u6389\u8fd9\u9053\u9898\u5566\uff01\n\n## \u4e09.CODE\n\n```c++\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<fstream>\n#include<cmath>\n#include<cstring>\nusing namespace std;\nint read(){\n\tchar ch=getchar();\n\tint res=0,f=1;\n\tfor(;ch<'0'||ch>'9';ch=getchar())if(ch=='-')f=-1;\n\tfor(;ch>='0'&&ch<='9';ch=getchar())res=res*10+(ch-'0');\n\treturn res*f;\n}\nconst int MAXN=(1<<8)-1;\nint n,a[1005],t[9],pos[9][1005],r=1<<15,l;\nint start[9],f[1005][MAXN+5],ans;\ninline int maxx(int x,int y){\n\treturn x>y?x:y;\n}\nbool check(int x){\n\tfor(int i=1;i<=8;++i)start[i]=1;//\u521d\u59cb\u5316\n\tmemset(f,250,sizeof(f));\n\tf[0][0]=0;\n\tfor(int i=0;i<n;++i){\n\t\tfor(int j=0;j<MAXN;++j)\n\t\tif(f[i][j]>=0)//\u7528\u5b83\u53bb\u66f4\u65b0\n\t\t\tfor(int k=1;k<=8;++k){//\u9009\u4e00\u4e2a\u6570\n\t\t\t\tif(j&(1<<(k-1)))continue;\n\t\t\t\tint u=start[k]+x-1,g=j|(1<<(k-1));\n\t\t\t\tif(u<=t[k])f[pos[k][u]][g]=maxx(f[pos[k][u]][g],f[i][j]);\n\t\t\t\tif(++u<=t[k])f[pos[k][u]][g]=maxx(f[pos[k][u]][g],f[i][j]+1);//\u53ef\u4ee5\u9009\u51fax+1\u4e2a\n\t\t\t}\n\t\t++start[a[i]];//\u66f4\u65b0\uff0c\u6bcf\u6b21\u9009\u7684\u6570\u90fd\u8981\u5728i\u53ca\u5176\u4ee5\u540e\n\t}\n\tint add=-1;\n\tfor(int i=8;i<=n;++i)add=maxx(add,f[i][MAXN]);//\u524d7\u4e2a\u4e0d\u53ef\u80fd\u6709\u7b54\u6848\n\tif(add==-1)return 0;\n\tans=maxx(ans,8*x+add);\n\treturn 1;\n}\nint main(){\n\tn=read();\n\tfor(int i=1;i<=n;++i){\n\t\ta[i]=read();\n\t\tpos[a[i]][++t[a[i]]]=i;//\u8bb0\u5f55\u4f4d\u7f6e\n\t}\n\tfor(int i=1;i<=8;++i)r=min(r,t[i]);\n\tif(r==0){//\u7279\u5224\u662f\u5426\u6709\u6570\u5b57\u6ca1\u6709\uff0c\u90a3\u4e48\u5c31\u662f\u62ec\u53f7\u5185\u7684\u7279\u6b8a\u60c5\u51b5\n\t\tint res=0;\n\t\tfor(int i=1;i<=8;++i)if(t[i])res++;\n\t\tcout<<res;\n\t\treturn 0;\n\t}\n\twhile(l<=r){//\u4e8c\u5206\u731ck\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid))l=mid+1;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1596111071,
        "uid": 68561,
        "name": "clockwhite",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF743E \u3010Vladik and cards\u3011"
    },
    {
        "content": "[\u9898\u89e3\u4f20\u9001\u95e8](https://blog.csdn.net/qq_41034353/article/details/81735458)\n\n\u5177\u4f53\u5c31\u770b\u9898\u89e3\u5427\u3002\n\n\u4e0b\u9762\u76f4\u63a5\u8d34\u4ee3\u7801#_#\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#define INF 0x3f3f3f3f\nusing namespace std;\nint n,L,R,ans;\nint a[1010],ct[1010];\nint f[1010][1<<8];\nvector <int> rec[1010];\nint check(int x)//\u5224\u65adM\u662f\u5426\u5408\u6cd5 \n{\n\tmemset(ct,0,sizeof(ct));\n\tfor(int i=0;i<=n;i++)\n\tfor(int j=1;j<(1<<8);j++) f[i][j]=-INF;\n\tf[0][0]=0;//\u521d\u59cb\u5316 \n\tfor(int i=0;i<n;i++)\n\t{\n\t\tfor(int j=0;j<(1<<8);j++)\n\t\tif (f[i][j]!=-INF)\n\t\tfor(int k=0;k<8;k++)\n\t\tif ((j&(1<<k))==0)\n\t\t{\n\t\t\tint h=x+ct[k]-1;\n\t\t\tif (h>=rec[k].size()) continue;//\u5224\u65adh\u662f\u5426\u5b58\u5728 \n\t\t\tf[rec[k][h]+1][j|(1<<k)]=max(f[rec[k][h]+1][j|(1<<k)],f[i][j]);\n\t\t\th++;\n\t\t\tif (h>=rec[k].size()) continue;\n\t\t\tf[rec[k][h]+1][j|(1<<k)]=max(f[rec[k][h]+1][j|(1<<k)],f[i][j]+1);//DP\uff0c\u8be6\u89c1\u9898\u89e3\t\t\t\t\t\n\t\t}\n\t\tct[a[i+1]-1]++;//\u51fa\u73b0\u6b21\u6570+1 \n\t}\n\tint cnt=-INF;\n\tfor(int i=0;i<=n;i++) cnt=max(cnt,f[i][(1<<8)-1]);\n\treturn cnt==-INF?-1:x*8+cnt;//\u627e\u6700\u4f18\u89e3 \n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=n;i++) rec[a[i]-1].push_back(i-1);//\u5b58\u50a8\u6570\u5b57i\u51fa\u73b0\u7684\u4f4d\u7f6e \n\tL=1;R=n>>3;\n\twhile(L<=R)//\u4e8c\u5206\u7b54\u6848 \n\t{\n\t\tint M=(L+R)>>1;\n\t\tif (check(M)!=-1) ans=max(ans,check(M)),L=M+1;//M\u5408\u6cd5\uff0c\u4fdd\u5b58\u5176\u503c\u5e76\u53bb\u9664\u975e\u6700\u4f18\u89e3 \n\t\telse R=M-1;//M\u4e0d\u5408\u6cd5\uff0c\u53bb\u9664M\u53caM\u4ee5\u4e0a\u7684\u4e0d\u5408\u6cd5\u89e3 \n\t}\n\tif (ans==0) for(int i=0;i<8;i++) if (rec[i].size()) ans++;//\u8ba8\u8bbax=0\u7684\u60c5\u51b5 \n\tprintf(\"%d\",ans);\n\t/*for(int i=1;i<=n;i++)\n\tfor(int j=1;j<(1<<8);j++) printf(\"%d \",f[i][j]);*/\n\treturn 0;\n}\n```",
        "postTime": 1534383074,
        "uid": 32942,
        "name": "kkkk0369",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF743E \u3010Vladik and cards\u3011"
    }
]