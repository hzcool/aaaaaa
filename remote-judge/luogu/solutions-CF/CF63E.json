[
    {
        "content": "### \u9898\u9762\u7ffb\u8bd1\n\u6709\u4e00\u4e2a 19 \u4e2a\u70b9\u7ec4\u6210\u7684\u7684\u516d\u8fb9\u5f62\u5de7\u514b\u529b\u76d2\u5b50\uff0c\u73b0\u5728 Karlsson \u548c Lillebror \u5728\u73a9\u6e38\u620f\uff0c Karlsson \u5148\u624b\uff0c\u6bcf\u6b21\u53ef\u4ee5\u53d6\u8d70\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u8fde\u7eed\u7684\u4efb\u610f\u4e2a\u6570\u7684\u5de7\u514b\u529b\u3002\n\n\u8f93\u5165\u8fd9\u4e2a\u76d2\u5b50\uff0c\u7528 'O' \u8868\u793a\u5de7\u514b\u529b\uff0c '.' \u8868\u793a\u7a7a\u4f4d\uff0c\u6570\u636e\u4fdd\u8bc1\u76d2\u5b50\u91cc\u53ea\u5c11\u6709\u4e00\u9897\u5de7\u514b\u529b\uff1b\u8f93\u51fa\u83b7\u80dc\u8005\u7684\u540d\u5b57\u3002\n### [AC\u8bb0\u5f55\uff08754ms/8.02MB\uff09(\u76ee\u524d\u6d1b\u8c37\u6700\u4f18\u89e3\uff09](https://www.luogu.com.cn/record/70075076)\n\n\n------------\n\n### \u601d\u8def\u70b9\u62e8\n\u9996\u5148\uff0c\u770b\u5230\u8fd9\u9053\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u9898\u9762\u8f6c\u6362\u4e00\u4e0b\uff1a\n\n- \u8f93\u5165\u4e00\u4e2a\u516d\u8fb9\u5f62\u7684\u56fe\uff0c\u5728\u540c\u4e00\u6761\u76f4\u7ebf\u4e0a\u7684 'O' \u662f\u8054\u901a\u7684\n- \u5c0fK\u548c\u5c0fL\u4f9d\u6b21\u5c06\u4e00\u6761\u4efb\u610f\u957f\u5ea6\u7684\u8054\u901a 'O' \u5220\u9664\n- \u5f53\u524d\u73a9\u5bb6\u5982\u679c\u6ca1\u6709 'O' \u53ef\u4ee5\u5220\u9664\uff0c\u90a3\u4ed6\u5c31\u8f93\u4e86\n- \u8be2\u95ee\u5c0fK\u662f\u5426\u6709**\u5fc5\u80dc\u7b56\u7565**\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u8fd9\u9053\u9898\u53ef\u4ee5\u8fd0\u7528**\u9012\u5f52**\u7684\u601d\u60f3\u3002\u6bcf\u6b21\u5f53\u524d\u73a9\u5bb6\u5403\u6389\u4e00\u5b9a\u7684\u5de7\u514b\u529b\u4e4b\u540e\uff0c\u8be2\u95ee**\u53e6\u4e00\u4f4d\u73a9\u5bb6\u5bf9\u4e8e\u5269\u4e0b\u7684\u5de7\u514b\u529b\uff0c\u662f\u5426\u6709\u5fc5\u80dc\u7b56\u7565**\uff0c\u5982\u679c\u65e0\u8bba\u600e\u4e48\u5403\u5de7\u514b\u529b\uff0c\u5bf9\u624b\u90fd\u6709\u5fc5\u80dc\u7b56\u7565\uff0c\u90a3\u4e48\u5f53\u524d\u73a9\u5bb6\u5bf9\u4e8e\u5f53\u524d\u72b6\u6001\u7684\u5de7\u514b\u529b\u662f\u5fc5\u8f93\u7684\uff1b\u5426\u5219\u5982\u679c\u5bf9\u624b\u6709\u4e00\u79cd\u60c5\u51b5\u4e0b\u4e0d\u5b58\u5728\u5fc5\u80dc\u7b56\u7565\uff08\u5373\u5fc5\u8f93\uff09\uff0c\u5219\u5f53\u524d\u73a9\u5bb6\u5bf9\u4e8e\u5f53\u524d\u72b6\u6001\u7684\u5de7\u514b\u529b\u5b58\u5728\u5fc5\u80dc\u7b56\u7565\u3002\n\n\u90a3\u4e48\uff0c\u8fd9\u9053\u9898\u6709\u4e9b\u7ec6\u8282\u5904\u7406\uff1a\n\n- \u6211\u4eec\u5982\u4f55\u6700\u5927\u6548\u7387\u5730\u5b58\u50a8\u5269\u4f59\u5de7\u514b\u529b\u7684\u72b6\u6001\uff1f\u2014\u2014\uff08\u4f7f\u7528\u72b6\u6001\u538b\u7f29\uff09\n- \u6211\u4eec\u5982\u4f55\u6a21\u62df\u659c\u7740\u5403\u7684\u60c5\u51b5\uff1f \u2014\u2014 \uff08\u7528\u6570\u7ec4\u8fdb\u884c\u9884\u5148\u5904\u7406\uff09\n- \u6211\u4eec\u5982\u4f55\u5224\u65ad\u8d8a\u754c\u7684\u95ee\u9898\uff1f\u2014\u2014\uff08\u7528\u6570\u7ec4\u8fdb\u884c\u9884\u5148\u5904\u7406\uff09\n\n\u6700\u540e\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\u6211\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u91cc\u9762\u6ce8\u91ca\u975e\u5e38\u8be6\u7ec6\uff08\u4ece\u7b2c112\u884c\u770b\u8d77\uff09\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u60c5\u51b5\u4e0b\u662f  _O\uff082*(2^19)\uff09_ \n\n### \u4ee3\u7801\u5c55\u793a\n```cpp\n#include<bits/stdc++.h>\n\n#pragma GCC optimize(3)\n\n#define inf 0x7fffffff\n#define INF 4611686018427387904\n#define ll long long\n#define pb push_back\n#define dir4 dx[5]={-1,0,1,0},dy[5]={0,1,0,-1}\n#define dir8 dx[10]={-1,-1,-1,0,1,1,1,0},dy[10]={-1,0,1,-1,-1,0,1,1}\n#define dirh dx[10]={-2,-2,-1,1,2,2,1,-1},dy[10]={-1,1,2,2,1,-1,-2,-2}\n#define rep(i,l,x) for(int i=l;i<x;i++)\n#define repd(i,l,x) for(int i=l;i>=x;i--)\n#define repn(i,l,x) for(int i=l;i<=x;i++)\n#define xend putchar('\\n')\n#define xspace putchar(' ')\n#define read2(a,b) a=read(),b=read()\n#define read3(a,b,c) a=read(),b=read(),c=read()\n#define read4(a,b,c,d) a=read(),b=read(),c=read(),d=read()\n#define Lread2(a,b) a=Lread(),b=Lread()\n#define Lread3(a,b,c) a=Lread(),b=Lread(),c=Lread()\n#define Lread4(a,b,c,d) a=Lread(),b=Lread(),c=Lread(),d=Lread()\n#define write4(a,b,c,d) write(a),xspace,write(b),xspace,write(c),xspace,write(d),xspace\nusing namespace std;\nchar gc(){//Do not read '\\n' ' '\n\tchar _ch=getchar();\n\twhile(_ch=='\\n'||_ch==' ') _ch=getchar();\n\treturn _ch;\n}\ninline void Sread(char _SSS[]){\n\tchar _ch=getchar();\n\trep(i,0,10)\n\tif(_ch=='\\n'||_ch==' ') _ch=getchar();\n\telse break;\n\trep(i,0,inf){\n\t\t_SSS[i]=_ch;\n\t\tif((_ch=getchar())=='\\n'||_ch==' ') return;\n\t}\n}\ninline int read(){\n\tint _res=0,_ch,_flag=0;\n\tif((_ch=getchar())=='\\n') _ch=getchar();\n\tif(_ch=='-') _flag=1;\n\telse if(_ch>='0'&&_ch<='9') _res=_ch-'0';\n\twhile((_ch=getchar())>='0'&&_ch<='9')\n\t\t_res=_res*10+_ch-'0';\n\treturn _flag?-_res:_res;\n}\ninline ll Lread(){\n\tll _res=0,_ch,_flag=0;\n\tif((_ch=getchar())=='\\n') _ch=getchar();\n\tif(_ch=='-') _flag=1;\n\telse if(_ch>='0'&&_ch<='9') _res=_ch-'0';\n\twhile((_ch=getchar())>='0'&&_ch<='9')\n\t\t_res=_res*10+_ch-'0';\n\treturn _flag?-_res:_res;\n}\ninline void write(int _x){\n\tif(_x<0){\n\t\tputchar('-');\n\t\t_x=-_x;\n\t}\n\tif(_x>9) write(_x/10);\n\tputchar(_x%10+'0');\n}\ninline void Lwrite(ll _x){\n\tif(_x<0){\n\t\tputchar('-');\n\t\t_x=-_x;\n\t}\n\tif(_x>9) write(_x/10);\n\tputchar(_x%10+'0');\n}\ninline void Swrite(char _SSS[]){\n\trep(i,0,strlen(_SSS)) putchar(_SSS[i]);\n}\nint gcd(int _fnum,int _snum){\n\tif(_snum!=0) return gcd(_snum,_fnum%_snum);\n\telse return _fnum;\n}\nll Lgcd(ll _fnum,ll _snum){\n\tif(_snum!=0) return Lgcd(_snum,_fnum%_snum);\n\telse return _fnum;\n}\nint lcm(int _fnum,int _snum){\n\treturn _fnum*_snum/gcd(_fnum,_snum);\n}\nll Llcm(ll _fnum,ll _snum){\n\treturn _fnum*_snum/Lgcd(_fnum,_snum);\n}\nfloat getDis(float _sx, float _sy, float _ex, float _ey){\n\t//The distance between two dots in Cartesian coordinates.\n\treturn sqrt((_sx-_ex)*(_sx-_ex)+(_sy-_ey)*(_sy-_ey));\n}\nbool checkOverlap(int sx1,int sy1,int ex1,int ey1,int sx2,int sy2,int ex2,int ey2){\n\t// True for two areas overlapped.\n\t// sx<=ex,sy<=ey\n\tif(!(sx1<=ex1))swap(sx1,ex1);\n\tif(!(sx2<=ex2)) swap(sx2,ex2);\n\tif(!(sy1<=ey1)) swap(sy1,ey1);\n\tif(!(sy2<=ey2)) swap(sy2,ey2);\n\treturn !((sx1>ex2)||(ex1<sx2)||(sy1>ey2)||(ey1<sy2));\n}\nvoid ChessRead(int &fnum, int &snum){\n\tfnum=gc()-'a';\n\tsnum=8-(gc()-'0');\n}\nint cf_t;\n\n\n//\u7a0b\u5e8f\u4ee3\u7801\u4ece\u8fd9\u8fb9\u5f00\u59cb \nconst int maxn=(1<<19)+1;\nint vis[3][maxn]={},ans[maxn]={};//vis\u6570\u7ec4\u7684\u7b2c\u4e8c\u7ef4\u548cans\u6570\u7ec4\u7684\u7b2c\u4e00\u7ef4\u90fd\u7528\u72b6\u6001\u538b\u7f29\u6765\u5b58\u50a8\u5f53\u524d\u5269\u4f59\u7684\u5de7\u514b\u529b \n//row[i]\u8868\u793a\u7b2ci\u5757\u5de7\u514b\u529b\u4f4d\u4e8e\u7684\u884c\u6570(i\u4ece0\u5f00\u59cb)\uff0clen[row[i]]\u8868\u793a\u67d0\u4e00\u884c\u7684\u957f\u5ea6\uff0cpre[row[i]]\u8868\u793a\u67d0\u4e00\u884c\u4e4b\u524d\u6240\u6709\u5de7\u514b\u529b\u7684\u603b\u6570 \nint len[7]={0,3,4,5,4,3},pre[7]={0,0,3,7,12,16},boost[6]={0,4,5,5,4},deboost[5]={0,3,4,4,3},row[20]={1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,5,5,5};\n \nint dfs(int pl,int cur){//pl\u7528\u6765\u8868\u793a\u5f53\u524d\u662f\u54ea\u4e2a\u73a9\u5bb6\u8fdb\u884c\u6e38\u620f\uff0ccur\u72b6\u6001\u538b\u7f29\u5b58\u50a8\u5f53\u524d\u5269\u4f59\u7684\u5de7\u514b\u529b \n\t//\u52a0\u5165\u8bb0\u5fc6\u5316\uff0c\u5982\u679c\u5f53\u524dcur\u72b6\u6001\u4e0b\u6709\u5fc5\u80dc\u7b56\u7565\uff0c\u5219\u8fd4\u56depl(pl\u73a9\u5bb6\u53ef\u4ee5\u83b7\u80dc)\uff1b\u5982\u679c\u662f\u5fc5\u8f93\u7684\uff0c\u5219\u8fd4\u56de1-pl(pl\u73a9\u5bb6\u5fc5\u5b9a\u8f93) \n\tif(ans[cur]==1) return pl;\n\telse if(ans[cur]==-1) return 1-pl;\n\t\n\tint to,res=1-pl;\n\tif(cur==0) return res;//\u5982\u679c\u6ca1\u6709\u5de7\u514b\u529b\u4e86\uff0c\u4f9d\u7167\u9898\u610f\uff0cpl\u73a9\u5bb6\u5c31\u8f93\u4e86 \n\t\n\trep(st,0,19){//\u679a\u4e3e\u5de7\u514b\u529b\u7684\u4f4d\u7f6e\uff0c\u72b6\u6001\u538b\u7f29\u5373\uff081<<st) \n\t\tif((cur & (1<<st))==0) continue;//\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u6ca1\u6709\u5de7\u514b\u529b\u5219continue\n\t\t \n\t\t\tto=cur;//\u6a2a\u7740\u5403\u5de7\u514b\u529b \n\t\t\tfor(int i=st;i<pre[row[st]]+len[row[st]];i++){\n\t\t\t\tif((to & (1<<i))==0) break;//\u4e3a\u4e86\u4fdd\u8bc1\"eat one or several chocolates that lay in the neighboring cells on one line\" \n\t\t\t\tto-=(1<<i);//\u5403\u6389\u5de7\u514b\u529b \n\t\t\t\tif(vis[1-pl][to]==0){\n\t\t\t\t\tvis[1-pl][to]=1;\n\t\t\t\t\tres=dfs(1-pl,to);//\u8be2\u95ee\u5728\u5403\u6389\u8fd9\u4e48\u591a\u5de7\u514b\u529b\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u624b\u662f\u5426\u6709\u5fc5\u80dc\u7b56\u7565 \n\t\t\t\t\tvis[1-pl][to]=0;\n\t\t\t\t\tif(res==pl){ \n\t\t\t\t\t\tans[cur]=1;//\u5982\u679c\u5bf9\u624b\u6ca1\u6709\u5fc5\u80dc\u7b56\u7565\uff0c\u5219\u6211\u65b9\u5fc5\u5b9a\u6709\u5fc5\u80dc\u7b56\u7565\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tto=cur;//\u4ece\u5de6\u4e0a\u5f80\u53f3\u4e0b\u5403 \n\t\t\tfor(int i=st;;){//\u540c\u7406 \n\t\t\t\tif((to & (1<<i))==0) break;\n\t\t\t\tto-=(1<<i);\n\t\t\t\tif(vis[1-pl][to]==0&&i!=st){\n\t\t\t\t\tvis[1-pl][to]=1;\n\t\t\t\t\tres=dfs(1-pl,to);\n\t\t\t\t\tvis[1-pl][to]=0;\n\t\t\t\t\tif(res==pl){\n\t\t\t\t\t\tans[cur]=1;\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif(row[i]==5) break;//\u5982\u679c\u5403\u5230\u4e86\u6700\u540e\u4e00\u884c\u5c31\u4e0d\u53ef\u80fd\u7ee7\u7eed\u5f80\u4e0b\u5403\u4e86 \n\t\t\t\tif(i+boost[row[i]]>=pre[row[i]+1]+len[row[i]+1]) break;//\u5224\u65ad\u8d8a\u754c \n\t\t\t\ti+=boost[row[i]];//boost[row[i]]\u8868\u793a\u4ece\u5f53\u524d\u5f80\u53f3\u4e0b\u659c\u7740\u5403\uff0ci\u7684\u5750\u6807\u9700\u8981\u589e\u52a0\u591a\u5c11 \n\t\t\t}\n\t\t\t\n\t\t\tto=cur;//\u4ece\u53f3\u4e0a\u5f80\u5de6\u4e0b\u5403 \n\t\t\tfor(int i=st;;){//\u540c\u7406 \n\t\t\t\tif((to & (1<<i))==0) break;\n\t\t\t\tto-=(1<<i);\n\t\t\t\tif(vis[1-pl][to]==0&&i!=st){\n\t\t\t\t\tvis[1-pl][to]=1;\n\t\t\t\t\tres=dfs(1-pl,to);\n\t\t\t\t\tvis[1-pl][to]=0;\n\t\t\t\t\tif(res==pl){\n\t\t\t\t\t\tans[cur]=1;\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif(row[i]==5) break;\n\t\t\t\tif(i+deboost[row[i]]<pre[row[i]]+len[row[i]]) break;\n\t\t\t\ti+=deboost[row[i]];//deboost[row[i]]\u8868\u793a\u4ece\u5f53\u524d\u5f80\u5de6\u4e0b\u659c\u7740\u5403\uff0ci\u7684\u5750\u6807\u9700\u8981\u589e\u52a0\u591a\u5c11 \n\t\t\t}\n\t\t}\n\t\tans[cur]=-1;//\u5f53\u524dcur\u4e0d\u5b58\u5728\u5fc5\u80dc\u7b56\u7565\u2014\u2014\u5373\u65e0\u8bba\u600e\u6837\u5403\uff0c\u5bf9\u624b\u90fd\u6709\u5fc5\u80dc\u7b56\u7565\u3002 \n\t\treturn res;//\u8fd4\u56de\u5bf9\u624b\u5b58\u5728\u5fc5\u80dc\u7b56\u7565 \n}\nvoid solve(){\n\tint orgi=0;\n\trep(i,0,19) if(gc()==79) orgi+=(1<<i);//\u72b6\u6001\u538b\u7f29 \n\tvis[0][orgi]=1;\n\tint res=dfs(0,orgi);\n\tprintf((res==0)?\"Karlsson\":\"Lillebror\");\n}\nint main(){\n/*\t //Online_Judge\n\t   freopen(\"input.txt\",\"r\",stdin);\n\t   freopen(\"output.txt\",\"w\",stdout);\n*/\n\n\tcf_t=1;//scanf(\"%d\",&cf_t);\n\twhile(cf_t--) solve();\n\n\treturn 0;\n}\n\n\n\n\n\n```\n\n",
        "postTime": 1645847732,
        "uid": 146492,
        "name": "xuchenhao2008",
        "ccfLevel": 5,
        "title": "\u72b6\u6001\u538b\u7f29+\u9012\u5f52"
    }
]