[
    {
        "content": "## \u672c\u9898\u4e3b\u8981\u7b97\u6cd5\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n[\u535a\u5ba2\u98df\u7528\u66f4\u4f73\u54df\uff01](https://www.luogu.com.cn/blog/374318/solution-cf329b1)\n### \u9898\u610f\u7b80\u8ff0\uff1a\n\u6709\u4e00\u4e2a n\\*m \u7684\u5730\u56fe\uff0c$S$ \u662f\u6211\u7684\u8d77\u70b9\uff0c$T$ \u662f\u6811\u6728\uff0c\u4e5f\u5c31\u662f\u969c\u788d\uff0c$E$ \u662f\u51fa\u53e3,0\u52309\u4e4b\u95f4\u7684\u6570\u5b57\u4ee3\u8868\u8be5\u70b9\u4e0a\u6709\u4eba\uff0c\u5e76\u4e14\u6570\u5b57\u5c31\u662f\u8be5\u70b9\u4e0a\u7684\u4eba\u6570\uff0c\u95ee\u6211\u5230\u7ec8\u70b9\u524d\u6709\u591a\u5c11\u4eba\u4e5f\u80fd\u5230\u7ec8\u70b9\u3002\n### \u601d\u8def\uff1a\n\u4e0d\u96be\u770b\u51fa\uff0c\u5982\u679c\u5176\u4ed6\u4eba\u8981\u5148\u4e8e\u6211\u6216\u4e0e\u6211\u540c\u65f6\u5230\u8fbe\u7ec8\u70b9\uff0c\u90a3\u4e48\u4ed6\u4eec\u79bb\u7ec8\u70b9\u7684\u8ddd\u79bb\u5c31\u5e94\u5c0f\u4e8e\u7b49\u4e8e\u6211\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u5e7f\u641c\uff0c\u4ee5\u51fa\u53e3\u4f5c\u4e3a\u8d77\u70b9\uff08\u8fd9\u6837\u53ef\u4ee5\u63d0\u9ad8\u7b97\u6cd5\u6548\u7387\uff09\uff0c\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u70b9\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\u5e76\u4e14\u8bb0\u5f55\u4e0b\u6211\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\uff0c\u6700\u540e\u7528\u5faa\u73af\u5d4c\u5957\u626b\u4e00\u904d\uff0c\u53d1\u73b0\u6709\u5230\u8fbe\u51fa\u53e3\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e\u6211\u5230\u51fa\u53e3\u8ddd\u79bb\u7684\u5c31\u52a0\u4e0a\u8be5\u70b9\u7684\u4eba\u6570\u3002\n### \u8bf4\u4e00\u4e0b\u6ce8\u610f\u4e8b\u9879\uff1a\n \n- \u6700\u597d\u662f\u4ece\u51fa\u53e3\u5f00\u59cb\u641c\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\u800c\u4e0d\u662f\u4ece\u6bcf\u4e2a\u70b9\u641c\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\uff0c\u8fd9\u6837\u53ef\u4ee5\u63d0\u5347\u641c\u7d22\u6548\u7387\n- \u5176\u4ed6\u4eba\u5230\u8fbe\u51fa\u53e3\u7684\u8ddd\u79bb\u7b49\u4e8e\u6211\u5230\u8fbe\u51fa\u53e3\u7684\u8ddd\u79bb\u7684\u4e5f\u5e94\u7b97\u5728\u5185\n- \u5df2\u641c\u8fc7\u7684\u70b9\u9700\u8981\u6807\u8bb0\uff0c\u9632\u6b62\u518d\u6b21\u641c\u7d22\n- \u8ddd\u79bb\u5e94\u521d\u59cb\u5316\u4e3a\u65e0\u9650\u5927\uff0c\u9632\u6b62\u8bef\u5224\uff0c\u52a0\u4e0a\u4e0d\u8be5\u52a0\u7684\u4eba\u6570\n\n\u77e5\u9053\u8fd9\u4e9b\u4e4b\u540e\uff0c\u672c\u9898\u601d\u8def\u5c31\u5f88\u660e\u786e\u4e86\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u6ce8\u91ca\u6bd4\u8f83\u8be6\u7ec6\uff0c\u8bfb\u61c2\u4ee3\u7801\u5e94\u8be5\u4e0d\u96be\uff0c\u8d34\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node{\n    int x,y,step,sum;//step\u53d8\u91cf\u50a8\u5b58\u8be5\u70b9\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\uff0csum\u53d8\u91cf\u50a8\u5b58\u8be5\u70b9\u7684\u4eba\u6570\n}q[1000001];\nint a[4001][4001],k,n,m,xx,yy;\nvoid Bfs(int X,int Y){\n    int head=0,tail=1,rx,ry,i;\n    int dx[5]={0,0,0,1,-1};\n    int dy[5]={0,1,-1,0,0};//\u5b9a\u4e49\u5411\u56db\u4e2a\u65b9\u5411\u6269\u5c55\u7684\u65b9\u5411\u6570\u7ec4\n    q[1].x=X;\n    q[1].y=Y;\n    q[1].step=0;\n    q[1].sum=a[X][Y];\n    while(head<tail){\n        head++;\n        for(i=1;i<=4;i++){\n            rx=q[head].x+dx[i];\n            ry=q[head].y+dy[i];\n            if(a[rx][ry]<10&&a[rx][ry]>=0&&rx<=n&&rx>=1&&ry<=m&&ry>=1){//\u5982\u679c\u8fd9\u91cc\u6709\u4eba\u5e76\u4e14\u6ca1\u6709\u8d8a\u754c\n                tail++;\n                q[tail].step=q[head].step+1;//\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u70b9\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\n                q[tail].sum=a[rx][ry];//\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u70b9\u7684\u4eba\u6570\n                a[rx][ry]=10;//\u628a\u8fd9\u4e2a\u70b9\u6807\u8bb0\u4e3a\u5df2\u8d70\u8fc7\n                q[tail].x=rx;\n                q[tail].y=ry;\n                if(q[tail].x==xx&&q[tail].y==yy)\n                k=q[tail].step;//\u5982\u679c\u662f\u6211\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u5c31\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u70b9\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\n            }\n        }\n    }\n}\nint main(){ \n    int i,j,xx1,yy1,sum=0;\n    cin>>n>>m;\n    char c;\n    for(i=1;i<=1000000;i++)\n    q[i].step=99999999;//\u5148\u628a\u8ddd\u79bb\u6807\u8bb0\u4e3a\u65e0\u7a77\u5927\uff0c\u4ee5\u514d\u8bef\u52a0\n    for(i=1;i<=n;i++)\n        for(j=1;j<=m;j++){\n            cin>>c;\n            if(c=='S'){\n                xx=i;yy=j;\n                a[i][j]=0;//\u5982\u679c\u662f\u6211\u7684\u51fa\u53d1\u4f4d\u7f6e\uff0c\u5c31\u5c06\u8be5\u70b9\u7684\u5750\u6807\u8bb0\u5f55\u4e0b\u6765\n            }\n            if(c=='E'){\n                xx1=i;yy1=j;\n                a[i][j]=0;//\u5982\u679c\u662f\u51fa\u53e3\uff0c\u8bb0\u5f55\u4e0b\u5750\u6807\uff0c\u4f5c\u4e3a\u8d77\u70b9\u7528bfs\u904d\u5386\n            }\n            if(c>='0'&&c<='9')\n            a[i][j]=c-'0';//\u5982\u679c\u662f\u6709\u4eba\u7684\u683c\u5b50\u8bb0\u5f55\u4e0b\u4eba\u6570\n            if(c=='T')\n            a[i][j]=10;//\u5982\u679c\u662f\u969c\u788d\u6807\u8bb0\u4e3a10\n        } \n    Bfs(xx1,yy1);//\u4ece\u51fa\u53e3\u5750\u6807\u5f00\u59cb\u904d\u5386\n    for(i=1;i<=n*m;i++)\n    if(q[i].step<=k){//\u5982\u679c\u8fd9\u4e2a\u70b9\u79bb\u51fa\u53e3\u7684\u8ddd\u79bb\u5c0f\u4e8e\u6211\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\u5c31\u52a0\u4e0a\u8fd9\u4e2a\u70b9\u7684\u4eba\u6570\n    sum+=q[i].sum;\n    }\n    cout<<sum;\n}\n```\n\u6700\u540e\uff0c\u5982\u679c\u89c9\u5f97\u6211\u7684\u9898\u89e3\u5bf9\u4f60\u4eec\u6709\u5e2e\u52a9\u7684\u8bdd\uff0c\u8bf7\u632a\u52a8\u4f60\u4eec\u7684\u9f20\u6807\u4e3a\u6211\u70b9\u8d5e\uff0c\u4f60\u4eec\u7684\u652f\u6301\u5c31\u662f\u5bf9\u6211\u6700\u5927\u7684\u9f13\u52b1\uff01",
        "postTime": 1611642589,
        "uid": 374318,
        "name": "hswfwkj",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF329B \u3010Biridian Forest\u3011"
    },
    {
        "content": "\u770b\u5230\u5730\u56fe\uff0c\u5e94\u8be5\u80fd\u591f\u5f88\u81ea\u7136\u7684\u60f3\u5230\u52a8\u6001\u89c4\u5212\u6216\u8005\u641c\u7d22\u3002\n\n\u518d\u4ed4\u7ec6\u770b\u4e00\u773c\uff0c\u5c31\u4e0d\u96be\u5f97\u5230\uff0c\u8fd9\u662f\u4e00\u4e2a\u7528**\u5bbd\u641c**\u89e3\u7684\u9898\u76ee\u3002\n\n\u8003\u8651\u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a\n\n- \u4ece\u6bcf\u4e2a\u4e0d\u662f ```T``` \u7684\u70b9\u51fa\u53d1\uff0c\u8bb0\u5f55\u4ece\u8fd9\u4e2a\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb\u3002\u7531\u4e8e\u6700\u52a3\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u80fd\u8fbe\u5230 $O(n^3) \\sim O(n^4)$\uff0c\u663e\u7136\u4f1a\u8d85\u65f6\u3002\n\n- \u4ece\u7ec8\u70b9\u51fa\u53d1\uff0c\u9996\u5148\u8bb0\u5f55\u81ea\u5df1\u7684\u4f4d\u7f6e ```S``` \u5230\u7ec8\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb\uff0c\u518d\u4ece\u7ec8\u70b9\u5904\u5f00\u59cb\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5bf9\u4e8e\u6240\u6709\u7684**\u6709\u4eba\u7684\u683c\u5b50\u3001\u4e14\u5230\u7ec8\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u5230\u7ec8\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb**\u8fdb\u884c\u7b54\u6848\u7d2f\u52a0\u3002\n\n\u7531\u4e8e\u8fd9\u662f\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u6545\u53ef\u4ee5\u4fdd\u8bc1\u9996\u5148\u641c\u5230\u7684\u70b9\u4e00\u5b9a\u662f\u8ddd\u79bb\u6700\u5c0f\u7684\uff0c\u56e0\u6b64\u4ece ```S``` \u51fa\u53d1\u5230\u8fbe\u51fa\u53e3\u7684\u8ddd\u79bb\u53ef\u4ee5\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u4e00\u65e6\u641c\u5230\u4e86 ```S``` \u53ef\u4ee5\u76f4\u63a5\u8bb0\u5f55\u6700\u5927\u8ddd\u79bb $maxn$\uff0c\u5e76\u4e14\u6b64\u540e\u7684\u6240\u6709\u683c\u5b50\u4e00\u65e6\u8ddd\u79bb\u5927\u4e8e\u8fd9\u4e2a\u8ddd\u79bb\u5219\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u3002\n\n~~PS\uff1a\u592a\u4e45\u6ca1\u6709\u5199\u5bbd\u641c\u4e86\uff0c\u4e8e\u662f\u5199\u7206\u4e86~~\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct infor{\n\tint dis;\n\tint x;\n\tint y;\n}from;\nint ans;\nint n,m;\nint maxn=1e9;\nqueue<infor> q;\nchar mp[1009][1009];\nbool vis[1009][1009];\nint dx[5]={0,0,1,0,-1};\nint dy[5]={0,1,0,-1,0};\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tcin>>mp[i][j];\n\t\t\tif(mp[i][j]=='E'){\n\t\t\t\tfrom.x=i;\n\t\t\t\tfrom.y=j;\n\t\t\t}\n\t\t}\n\t}\n\tfrom.dis=0;\n\tq.push(from);\n\twhile(!q.empty()){\n\t\tinfor now=q.front();\n\t\tq.pop();\n\t\tint x=now.x,y=now.y,dis=now.dis;\n\t\t//cout<<x<<\" \"<<y<<endl;\n\t\tif(dis>maxn||vis[x][y]) continue;\n\t\tvis[x][y]=true;\n\t\tif(mp[x][y]=='S'){\n\t\t\tmaxn=dis;\n\t\t\tcontinue;\n\t\t}\n\t\tif(mp[x][y]>='0'&&mp[x][y]<='9') ans=ans+(mp[x][y]-'0');\n\t\tfor(int i=1;i<=4;i++){\n\t\t\tint xx=x+dx[i];\n\t\t\tint yy=y+dy[i];\n\t\t\tif(xx<1||xx>n||yy<1||yy>m||mp[xx][yy]=='T'||vis[xx][yy]) continue;\n\t\t\tinfor to;\n\t\t\tto.x=xx,to.y=yy,to.dis=dis+1;\n\t\t\tq.push(to);\n\t\t}\n\t}\n\tcout<<ans;\n}\n```\n",
        "postTime": 1618895981,
        "uid": 289275,
        "name": "Terraria",
        "ccfLevel": 0,
        "title": "CF329B Biridian Forest"
    },
    {
        "content": "## \u672c\u9898\u6838\u5fc3\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n\n\u8fd9\u9053\u9898\u611f\u89c9\u4e0d\u5e94\u8be5\u4e0a\u7eff\u554a\uff0c\u5e94\u8be5\u662f\u9ec4\u9898\u6216\u4ee5\u4e0b\u5427\u3002\n\n\u9996\u5148\u6839\u636e\u7ecf\u9a8c\u53ef\u5f97\uff0c\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\u7b49\u4e8e\u7ec8\u70b9\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\u3002\n\n\u8fd9\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u6211\u4eec\u77e5\u9053\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u961f\u5217\u961f\u5934\u59cb\u7ec8\u4fdd\u6301\u7740\u5f53\u524d\u6700\u4f18\u89e3\uff08\u6307\u8d70\u7684\u8def\u6700\u77ed\uff09\u3002\u5982\u679c\u6211\u4eec\u7684\u961f\u5217\u4e2d\u51fa\u73b0\u4e86\u8d77\u70b9\uff0c\u8fd9\u5c31\u8bf4\u660e\u4e86\u6bd4\u8d77\u70b9\u5230\u7ec8\u70b9\u8def\u7a0b\u77ed\u4eba\u90fd\u5df2\u7ecf\u5230\u8fbe\u7ec8\u70b9\u4e86\u3002\u8fd9\u4e2a\u65f6\u5019\u8fd8\u6709\u4e00\u4e9b\u4e0e\u8d77\u70b9\u8ddd\u79bb\u76f8\u7b49\u7684\u70b9\u8fd8\u6ca1\u6709\u641c\u5230\uff0c\u8fd9\u53ea\u9700\u8981\u628a `maxn`\u4ece `inf` \u66f4\u65b0\u4e3a\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u961f\u5217\u4e2d\u7684\u70b9\u7684\u8ddd\u79bb\u6bd4 `maxn` \u8981\u5927\uff0c\u76f4\u63a5\u5f39\u51fa\u5373\u53ef\u3002\n\n\u5176\u4ed6\u90e8\u5206\u4eff\u7167\u7684\u666e\u901a `bfs` \u5c31\u884c\u4e86\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff1a\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<string>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nstruct point{\n\tint x,y,s;\n};\nqueue<point>q;\nint maxn=1e9,n,m,sx,sy,ans,book[1001][1001];\nchar a[1001][1001];\nint xx[4]={1,-1,0,0},yy[4]={0,0,1,-1};\nvoid bfs(){\n\tpoint p1={sx,sy,0};\n\tq.push(p1);\n\twhile(!q.empty()){\n\t\tpoint p=q.front();\n\t\tq.pop();\n\t\tif(book[p.x][p.y]||p.s>maxn)\n\t\t\tcontinue;\n\t\tbook[p.x][p.y]=1;\n\t\tif(a[p.x][p.y]=='S'){//\u641c\u5230\u8d77\u70b9\u628amaxn\u8d4b\u503c\uff0c\u4e4b\u524d\u4e3ainf\n\t\t\tmaxn=p.s;\n\t\t\tcontinue;\n\t\t}\n\t\tif(a[p.x][p.y]>='0'&&a[p.x][p.y]<='9')\n\t\t\tans+=a[p.x][p.y]-'0';//\u641c\u5230\u6570\u5b57\u5c31\u5728ans\u4e0a\u52a0\u4eba\u6570\n\t\tfor(int i=0;i<4;i++){\n\t\t\tint tx=p.x+xx[i],ty=p.y+yy[i];\n\t\t\tif(a[tx][ty]=='T'||tx<0||tx>=n||ty<0||ty>=m)\n\t\t\t\tcontinue;\n\t\t\tpoint p2={tx,ty,p.s+1};\n\t\t\tq.push(p2);\n\t\t}\n\t}\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%s\",&a[i]);\n\t\tfor(int j=0;j<m;j++)\n\t\t\tif(a[i][j]=='E')//\u4ece\u7ec8\u70b9\u5f00\u59cb\u641c\n\t\t\t\tsx=i,sy=j;\n\t}\t\n\tbfs();\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n\n```\n\u8c22\u8c22\u5927\u5bb6\uff01",
        "postTime": 1612698126,
        "uid": 253738,
        "name": "\u542c\u53d6MLE\u58f0\u4e00\u7247",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF329B \u3010Biridian Forest\u3011"
    },
    {
        "content": "## \u9898\u89e3\uff1aCF329B\n\n\n[\u9898\u76ee\u4f20\u9001\u95e8\uff1aCF329B](https://www.luogu.com.cn/problem/CF329B)\n\n[\u535a\u5ba2\u98df\u7528\u66f4\u4f73](https://www.luogu.com.cn/blog/Miracle-Marta0512/post-ti-xie-cf329b-biridian-forest)\n#### \u9898\u610f\u7b80\u8ff0\n\u7ed9\u51fa\u4e00\u4e2a $n * m $\u7684\u5730\u56fe\uff0c\u5176\u4e2d$S$\u4e3a\u8d77\u70b9\uff0c$E$\u4e3a\u7ec8\u70b9\uff0c$T$\u4e3a\u969c\u788d\uff0c\u5176\u4f59\u683c\u5b50\u4e0a\u6709\u4e00\u4e2a\u6570\uff0c\u4ee3\u8868\u683c\u5b50\u4e0a\u7684\u4eba\u6570\uff0c\u95ee\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\u524d\u6709\u591a\u5c11\u4eba\u4e5f\u80fd\u8d70\u5230\u7ec8\u70b9\u3002\n\n#### \u9898\u76ee\u5206\u6790\n\uff08\u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0c\u4e0b\u6587\u4e2d\u7684\u201c\u8ddd\u79bb\u201d\u4e00\u5f8b\u6307\u201d\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\u201c\uff09\n\n\u4e0d\u96be\u60f3\u5230\uff0c\u5982\u679c\u4e00\u4e2a\u683c\u5b50\u4e0a\u7684\u4eba\u80fd\u591f\u5728\u6211\u4eec\u5230\u8fbe\u7ec8\u70b9\u524d\u5148\u5230\u8fbe\uff0c\u90a3\u4e48\u8fd9\u4e2a\u683c\u5b50\u7684\u8ddd\u79bb\u5e94\u4e0d\u5927\u4e8e\u8d77\u70b9\u7684\u8ddd\u79bb\u3002\u4f46\u76f4\u63a5\u641c\u7d22\u51fa\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528BFS\u4ece\u7ec8\u70b9\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u6837\u8fd8\u80fd\u526a\u53bb\u4e00\u4e9b\u70b9\uff0c\u6ce8\u610f\u5728\u8d77\u70b9\u524d\u88ab\u641c\u5230\u7684\u683c\u5b50\u90fd\u5e94\u88ab\u7edf\u8ba1\u8fdb\u7b54\u6848\u3002\n\n\u5bf9\u4e8e\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5408\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf$len$\u8868\u793a\u8d77\u70b9\u7684\u8ddd\u79bb\u3002$len$\u5e94\u521d\u59cb\u5316\u4e3a\u65e0\u7a77\u5927\uff08\u56e0\u4e3a\u7531\u4e8e\u961f\u5217\u5148\u8fdb\u5148\u51fa\u7684\u7279\u70b9\uff0c\u5148\u4e8e\u8d77\u70b9\u88ab\u641c\u7d22\u5230\u7684\u70b9\u7684\u8ddd\u79bb\u4e00\u5b9a\u4e0d\u5927\u4e8e\u8d77\u70b9\u8ddd\u79bb\uff09\uff0c\u5f53\u641c\u7d22\u5230\u8d77\u70b9\u65f6\u66f4\u65b0$len$\uff0c\u8fd9\u6837\u53ea\u8981\u5224\u65ad\u70b9\u7684\u8ddd\u79bb\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e$len$\u5c31\u884c\u4e86\u3002\n\n#### \u4e00\u4e9b\u6ce8\u610f\u70b9\n- \u6709\u4eba\u7684\u70b9\u4e5f\u53ef\u4ee5\u901a\u884c\u3002\n- \u9898\u76ee\u4e2d\u6709\u4e00\u53e5\u201c\u5305\u62ec\u4e0e\u4f60\u540c\u65f6\u5230\u8fbe\u7ec8\u70b9\u7684\u4eba\u201d\uff0c\u56e0\u6b64\u8ddd\u79bb\u7b49\u4e8e$len$\u7684\u70b9\u4e5f\u5e94\u88ab\u7b97\u8fdb\u7b54\u6848\u3002\n- \u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u8bfb\u5165\u5b57\u7b26\u7684\u51fd\u6570\u6765\u5b8c\u6210\u5730\u56fe\u7684\u8f93\u5165\uff0c\u8fd9\u6837\u4f1a\u65b9\u4fbf\u8bb8\u591a\u3002\n- \u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a$vis$\u6570\u7ec4\u6807\u8bb0\u5df2\u7ecf\u641c\u8fc7\u7684\u70b9\uff0c\u63d0\u5347\u641c\u7d22\u6548\u7387\uff08\u8bdd\u8bf4\u8fd9\u5e94\u8be5\u662fBFS\u57fa\u64cd\u5427\uff09\u3002\n\n#### \u6700\u540e\u8d34\u4e0aAC\u4ee3\u7801\uff1a\n```\n#include <queue>\n#include <string>\n#include <ctype.h>\nusing namespace std;\nint n, m, len = 0x3f3f3f3f, ans = 0;\nconst int N = 1634;\nint map[N][N];\nint fx[5] = {0, -1, 0, 1, 0};\nint fy[5] = {0, 0, 1, 0, -1};\nbool vis[N][N];\n\nstruct node\n{\n\tint x, y, step;\n};\n\nstd :: queue <node> q; \n\ninline char cread ()  //\u8bfb\u5165\u5b57\u7b26\n{\n\tchar c = getchar ();\n\twhile (c != 'S' && c != 'T' && c != 'E' && ! isdigit (c))  c = getchar ();\n\treturn c;\n}\n\nint main(){\n\tscanf (\"%d%d\", &n, &m);\n\tchar ch;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfor (int j = 1; j <= m; j++)\n\t\t{\n\t\t\tch = cread ();\n\t\t\tif (isdigit (ch))  map[i][j] = ch - '0';\n\t\t\tif (ch == 'T')  map[i][j] = -1;\n\t\t\tif (ch == 'S')  map[i][j] = -2; \n\t\t\tif (ch == 'E')\n\t\t\t{\n\t\t\t\tq.push ((node) {i, j, 0});\n\t\t\t\tvis[i][j] = true;\n\t\t\t}  //\u5206\u522b\u8fdb\u884c\u6807\u8bb0\n\t\t}\n\t}\n\twhile (! q.empty ())\n\t{\n\t\tnode tmp = q.front ();\n\t\tq.pop ();\n\t\tint x = tmp.x, y = tmp.y;\n\t\tif (map[x][y] == -2)  len = tmp.step;  //\u66f4\u65b0len\n\t\tif (tmp.step <= len && map[x][y] != -2)  ans += map[x][y];\n\t\tif (tmp.step >= len)  continue;  //\u540e\u7eed\u7684\u70b9\u4e0d\u6ee1\u8db3\u9898\u610f\uff0c\u5c31\u76f4\u63a5\u526a\u6389\n\t\tfor (int i = 1; i <= 4; i++)  //\u8fdb\u884c\u4e0b\u4e00\u6b65\u641c\u7d22\n\t\t{\n\t\t\tint nx = x + fx[i], ny = y + fy[i];\n\t\t\tif (nx >= 1 && nx <= n && ny >= 1 && ny <= m && map[nx][ny] != -1 && ! vis[nx][ny])\n\t\t\t{\n\t\t\t\tq.push ((node) {nx, ny, tmp.step + 1});\n\t\t\t\tvis[nx][ny] = true; \n\t\t\t}\n\t\t}\n\t}\n\tprintf (\"%d\", ans);\n\treturn 0;\n} \n```\n#### \u5e0c\u671b\u8fd9\u7bc7\u9898\u89e3\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\uff0c\u8c22\u8c22 !",
        "postTime": 1611407300,
        "uid": 257560,
        "name": "Asphy7xia",
        "ccfLevel": 5,
        "title": "\u3010\u9898\u89e3\u3011 CF329B Biridian Forest"
    },
    {
        "content": "\u55ef...\u4e00\u9053\u4f18\u7f8e\u7684BFS\u9898\u76ee\n\n\u4e0d\u96be\u60f3\u5230\uff0c\u82e5\u5c0f\u961fa\u8ddd\u51fa\u53e3\u7684\u6700\u5c0f\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e\u4e3b\u4eba\u516c\u8ddd\u51fa\u53e3\u7684\u6700\u5c0f\u8ddd\u79bb\uff0c\u5c0f\u961fa\u4e00\u5b9a\u53ef\u4e00\u8ffd\u5230\u4e3b\u4eba\u516c\uff0c\u6240\u4ee5\u53ea\u8981\u4ee5\u51fa\u53e3\u4e3a\u8d77\u70b9\uff0c\u505a\u4e00\u4e2abfs\u8bb0\u5f55\u4e0b\u51fa\u53e3\u5230\u5404\u70b9\u7684\u8ddd\u79bb\uff0c\u4e4b\u540e\u7edf\u8ba1\u4eba\u6570\u5373\u53ef\u3002\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\u6709\u4e9b\u533a\u57df\u53ef\u80fd\u4f1a\u88ab\u969c\u788d\u7269\u4e2a\u79bb\u5f00\uff0c\u521d\u59cb\u5316\u7684\u65f6\u5019\u8981\u5c06\u6240\u6709\u533a\u57df\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\u8bbe\u4e3a\u65e0\u7a77\u5927\uff0c\u4e0d\u7136\u5728\u7edf\u8ba1\u65f6\u53ef\u80fd\u4f1a\u628a\u9694\u4e86\u533a\u7684\u5c0f\u961f\u4eba\u6570\u4e5f\u7edf\u8ba1\u8fdb\u53bb\u3002\n\n\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n```\n#include <iostream>\n#include <queue>\n#include <cstring>\n \nusing namespace std;\n \nconst int MAX_N = 1000 + 100;\nconst int fx[5]={0,0,1,0,-1};\nconst int fy[5]={0,1,0,-1,0};\nconst int inf = (1 << 30);\nint dis[MAX_N][MAX_N];\nbool vis[MAX_N][MAX_N];\nchar _map[MAX_N][MAX_N];\nstruct Node\n{\n    int x,y,num;\n};\nstruct Point\n{\n    int x,y,dis;\n};\nNode node[MAX_N * MAX_N];\nNode st,en;//start,end\nint r,c;\n \nvoid BFS()\n{\n    queue<Point> point;\n    Point p_en;\n    p_en.x = en.x;\n    p_en.y = en.y;\n    p_en.dis = 0;\n    point.push(p_en);\n    vis[p_en.x][p_en.y] = true;\n    while(!point.empty())\n    {\n        Point q = point.front();\n        point.pop();\n        Point _new;\n        for(int i = 1;i <= 4;i++)\n        {\n            _new.x = q.x + fx[i];\n            _new.y = q.y + fy[i];\n            if(_new.x <= r && _new.x > 0 && _new.y <= c && _new.y > 0 && _map[_new.x][_new.y] != 'T' && !vis[_new.x][_new.y])\n            {\n                _new.dis = q.dis + 1;\n                vis[_new.x][_new.y] = true;\n                point.push(_new);\n                dis[_new.x][_new.y] = _new.dis;\n            }\n        }\n    }\n}\nint main()\n{\n    memset(vis,0,sizeof(vis));\n    int cnt = 0;\n    cin >> r >> c;\n    for(int i = 1;i <= r;i++)\n    {\n        for(int j = 1;j <= c;j++)\n        {\n            cin >> _map[i][j];\n            dis[i][j] = inf;\n            if(_map[i][j] == 'S')\n            {\n                st.x = i;\n                st.y = j;\n            }\n            else if(_map[i][j] == 'E')\n            {\n                en.x = i;\n                en.y = j;\n            }\n            else if(_map[i][j] >= '0' && _map[i][j] <= '9')\n            {\n                cnt++;\n                node[cnt].x = i;\n                node[cnt].y = j;\n                node[cnt].num = _map[i][j] - '0';\n            }\n        }\n    }\n    BFS();\n    int ans = 0;\n    for(int i = 1;i <= cnt;i++)\n    {\n        if(dis[node[i].x][node[i].y] <= dis[st.x][st.y])\n            ans += node[i].num;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n\u6b22\u8fce\u5927\u4f6c\u524d\u6765\u62cd\u7816",
        "postTime": 1524997166,
        "uid": 43664,
        "name": "Oscar12345",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF329B \u3010Biridian Forest\u3011"
    }
]