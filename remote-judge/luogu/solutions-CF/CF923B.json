[
    {
        "content": "# CF923B Producing Snow \u9898\u89e3\n\n## \u4e00.\u6ce8\u610f\u4e8b\u9879\n\n\u7b2c\u4e09\u884c\u8f93\u5165\u7684\u662f\uff1a\n\n#### \u6bcf\u5929\u6bcf\u5806\u96ea\n\n\u7194\u5316\u7684\u4f53\u79ef\uff01\uff01\n\n## \u4e8c.\u89e3\u9898\u601d\u8def\n\n### 1.\u66b4\u529b\n\n\u66b4\u529b\u679a\u4e3e\u6bcf\u5929\u6709\u54ea\u51e0\u5806\u96ea\u4f1a\u7194\u5316\uff0c\u4f46\u8fd9\u6837\u505a\u4f1a\u8d85\u65f6\u3002\n\n### 2.\u5c0f\u6839\u5806+\u524d\u7f00\u548c\n\n##### \u8ba1\u7b97\u524d $i$ \u5929\u7194\u5316\u96ea\u91cf\u7684\u524d\u7f00\u548c\uff0c\u5c06\u65b0\u589e\u7684\u96ea\u5806\u7684\u96ea\u91cf\u52a0\u5165\u5230\u4f18\u5148\u961f\u5217\u4e2d\n\n\u5f53\u5faa\u73af\u5230\u7b2c $i$ \u5929\u65f6:\uff08\u8bb0 $sum_{i}$ \u4e3a\u524d $i$ \u5929\u7194\u5316\u96ea\u91cf\u7684\u524d\u7f00\u548c\uff0c$ans$ \u4e3a\u7b2c $i$ \u5929\u96ea\u603b\u5171\u7684\u7194\u5316\u91cf\uff09\u3002\n\n\u5f53\u4f18\u5148\u961f\u5217\u4e2d\u7684\u5143\u7d20\u5c0f\u4e8e $sum_{i}$ \u65f6\uff0c\u8bf4\u660e\u8be5\u5143\u7d20\u65e0\u6cd5\u627f\u53d7\u5230\u7b2c $i$ \u5929\u7684\u7194\u5316\u91cf\uff0c\u5426\u5219\u5c31\u53ef\u4ee5\u627f\u53d7\u3002\n\n\u5982\u679c\u4e0d\u80fd\u627f\u53d7\uff0c$ans$ \u52a0\u4e0a\u8be5\u96ea\u5806\u7b2c $i$ \u5929\u65f6\u7684\u4f53\u79ef\uff0c\u5e76\u5c06\u8be5\u96ea\u5806\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u3002\n\n\u5c06\u6240\u6709\u4e0d\u80fd\u627f\u53d7\u7194\u5316\u7684\u96ea\u5806\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u540e\uff0c\uff08$ans$ \u52a0\u4e0a\u4ee5\u627f\u53d7\u7194\u5316\u7684\u96ea\u5806\u7684\u6570\u91cf\uff09$\\times$\uff08\u7b2c $i$ \u5929\u6bcf\u5806\u96ea\u7194\u5316\u7684\u4f53\u79ef\uff09\u3002\n\n$Q:$ \u5982\u4f55\u8ba1\u7b97\u4e00\u4e2a\u96ea\u5806\u7b2c $i$ \u5929\u65f6\u7684\u4f53\u79ef\uff1f\uff08\u5047\u8bbe\u8fd9\u4e2a\u96ea\u5806\u5728\u7b2c $x$ \u5929\u5806\u51fa\u6765\uff09\n\n$A:$ \u53ef\u4ee5\u8003\u8651\u7528\u8be5\u96ea\u5806\u6700\u5f00\u59cb\u7684\u4f53\u79ef\u51cf\u53bb $sum_{i-1}$\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u5c31\u4f1a\u591a\u51cf $sum_{x-1}$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u5806\u96ea\u52a0\u5165\u4f18\u5148\u961f\u5217\u65f6\u5c31\u5c06\u8fd9\u5806\u96ea\u7684\u603b\u91cf\u52a0\u4e0a $sum_{x-1}$\u3002\n\n## \u4e09.\u4ee3\u7801\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nint n,x;\nlong long ans;  //\u6ce8\u610f\u8ba1\u7b97\u524d\u7f00\u548c\u8981\u5f00long long\nint a[100010];\nlong long sum[100010];\npriority_queue<long long,vector<long long>,greater<long long> > q;//\u5c0f\u6839\u5806(\u4f18\u5148\u961f\u5217\uff09\nint main() {\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&x);\n\t\tans=0; //\u8bb0\u5f55\u96ea\u603b\u5171\u7684\u7194\u5316\u91cf\n\t\tsum[i]=sum[i-1]+x;  //\u524di\u5929\u7194\u5316\u96ea\u91cf\u7684\u524d\u7f00\u548c\n\t\tq.push(a[i]+sum[i-1]);  //\u5c06\u8fd9\u5806\u96ea\u7684\u603b\u91cf\u52a0\u4e0asum[x-1]\n\t\twhile(!q.empty()&&q.top()<=sum[i])  //\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u627f\u53d7\u7194\u5316\n\t\t{\n\t\t\tans+=q.top()-sum[i-1];  //\u4e0d\u80fd\u627f\u53d7\u5c31\u7194\u5316\u7b2ci\u5929\u7684\u4f53\u79ef\n\t\t\tq.pop(); //\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\n\t\t}\n\t\tans+=x*q.size();  //\u5f53\u5929\u7684\u7194\u5316\u91cf*\u53ef\u4ee5\u627f\u53d7\u7194\u5316\u7684\u96ea\u5806\u6570\u91cf\n\t\tprintf(\"%lld \",ans);\n\t}\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1684053676,
        "uid": 794871,
        "name": "cherry2010",
        "ccfLevel": 0,
        "title": "CF923B Producing Snow \u9898\u89e3"
    },
    {
        "content": "\u6211\u4eec\u8003\u8651**\u524d\u7f00\u548c**\u4ee5\u53ca**\u4e8c\u5206**\u3002\n\n\u6211\u4eec\u5148\u7ed9 $T_i$ \u505a\u4e00\u5957\u524d\u7f00\u548c\uff0c\u524d\u7f00\u548c\u6570\u7ec4\u4e3a $S_i$\u3002\n\n\u6211\u4eec\u518d\u5047\u8bbe\u6bcf\u4e00\u5806\u96ea\u5728\u7b2c $0$ \u5929\u5c31\u5df2\u5806\u597d\uff0c\u5728\u7b2c $i$ \u5929\u521a\u597d\u878d\u5316\u6210 $V_i$\uff0c\u90a3\u4e48\u8fd9\u5806\u96ea\u7684\u521d\u59cb\u4f53\u79ef\u5f88\u663e\u7136\u5c31\u662f $V_i+S_{i-1}$\u3002\n\n\u6211\u4eec\u518d\u628a\u521d\u59cb\u4f53\u79ef $V_i+S_{i-1}$ \u5728 $S$ \u4e2d\u4e8c\u5206\u51fa\u521a\u597d\u878d\u5316\u5b8c\u7684\u4f4d\u7f6e\uff0c\u8bbe\u4e3a $j(j\\leq i\\leq n)$\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u5929\u90fd\u7ef4\u62a4\u4e24\u4e2a\u503c\uff0c\u8fd9\u521a\u597d\u4e00\u5929\u878d\u5316\u5b8c\u7684\u96ea\u5806\u7684\u6570\u91cf\uff0c\u548c\u521a\u597d\u8fd9\u5929\u878d\u5316\u5b8c\u7684\u96ea\u5806\u6240\u4ea7\u751f\u7684\u8d21\u732e\uff08\u56e0\u4e3a\u53ef\u80fd\u53d6\u4e0d\u6ee1\u5f53\u5929\u878d\u5316\u91cf\uff09\uff0c\u5206\u522b\u8bbe\u4e3a $finish_i$ \u548c $rest_i$\u3002\u53ef\u4ee5\u5bf9 $finish$ \u505a\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8f7b\u677e\u5f97\u5230\u5f53\u5929\u6ca1\u878d\u5316\u5b8c\u7684\u96ea\u5806\u6570\u91cf\uff0c\u5373 $i-finish_i$\u3002\n\n\u90a3\u4e48\u6bcf\u4e00\u5929\u7684\u878d\u5316\u91cf\u5c31\u662f $T_i\\times (i-finish_i)+rest_i$\uff08\u6ca1\u5316\u5b8c\u7684\u8d21\u732e+\u5316\u5b8c\u7684\u8d21\u732e\uff09\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;//\u524d\u7f00\u548c\u4ee5\u53ca\u8ba1\u7b97\u8d21\u732e\u4f1a\u7206int\nint n,V[100010],T[100010],finish,f[100010],rest[100010];\nsigned main(){\n\tscanf(\"%lld\",&n);\n\tfor(int i=1;i<=n;i++)scanf(\"%lld\",&V[i]);\n\tfor(int i=1,x;i<=n;i++)scanf(\"%lld\",&x),T[i]=T[i-1]+x;//\u524d\u7f00\u548c\n\tfor(int i=1;i<=n;i++){\n\t\tint j=lower_bound(T+i,T+n+1,T[i-1]+V[i])-T;//\u4e8c\u5206\n\t\tf[j]++;rest[j]+=V[i]+T[i-1]-T[j-1];finish+=f[i];//\u66f4\u65b0\u878d\u5316\u5b8c\u7684\u90a3\u5929\u7684\u6743\u503c\uff0c\u4ee5\u53ca\u5316\u5b8c\u7684\u6570\u91cf\n\t\tprintf(\"%lld \",(T[i]-T[i-1])*(i-finish)+rest[i]);//\u8ba1\u7b97\u8d21\u732e\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1631793936,
        "uid": 120010,
        "name": "CaiXY06",
        "ccfLevel": 6,
        "title": "solution-cf923b"
    },
    {
        "content": "emmmm fhq treap\u677f\u5b50\uff0c\u53ef\u5e76\u5806\u677f\u5b50\u3002 \u5e76\u4e0d\u600e\u4e48\u60f3\u601d\u8003\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\ninline int read(){int x=0,f=1,ch=getchar(); while(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();} while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();} return x*f;}\ninline void write(int x){if (x<0) putchar('-'),x=-x; if (x>=10) write(x/10); putchar(x%10+'0');}\ninline void writeln(int x){write(x); puts(\"\");}\nconst int N=1e5+5;\nint cnt,n,b[N],c[N];\ninline void init(){\n\tn=read();\n\tfor (int i=1;i<=n;i++) b[i]=read();\n\tfor (int i=1;i<=n;i++) c[i]=read();\n}\nstruct node{\n\tint sz,sum,dec,V,v,son[2];\n}a[N];\ninline void plu(int k,int v) {\n\tif (!k) return;\n\ta[k].v-=v; a[k].dec+=v; a[k].sum-=v*a[k].sz;\n} \ninline void pushup(int k){\n\tif (!k) return;\n\ta[k].sz=a[a[k].son[0]].sz+a[a[k].son[1]].sz+1;\n\ta[k].sum=a[a[k].son[0]].sum+a[a[k].son[1]].sum+a[k].v;\n}\ninline void pushdown(int k){\n\tif (a[k].dec) {\n\t\tplu(a[k].son[0],a[k].dec);\n\t\tplu(a[k].son[1],a[k].dec);\n\t\ta[k].dec=0;\n\t}\n}\nint merge(int x,int y){  \n\tif (!x||!y) return x+y;\n\tpushdown(x); pushdown(y);\n\tif (a[x].V<a[y].V) {\n\t\ta[x].son[1]=merge(a[x].son[1],y);\n\t\tpushup(x);\n\t\treturn x;\n\t}else{\n\t\ta[y].son[0]=merge(x,a[y].son[0]);\n\t\tpushup(y);\n\t\treturn y;\n\t}\n}\nvoid split(int k,int rk,int &x,int &y){\n\tif (!k) x=y=0;\n\t\telse {\n\t\t\tpushdown(k);\n\t\t\tif (a[k].v<=rk) x=k,split(a[k].son[1],rk,a[x].son[1],y); \n\t\t\t\telse y=k,split(a[k].son[0],rk,x,a[y].son[0]);\n\t\t\tpushup(k);\n\t\t}\n}\ninline int newnode(int v){\n\ta[++cnt].v=v; a[cnt].V=rand(); a[cnt].sz=1; a[cnt].sum=v; return cnt;\n}\nint root;\ninline void solve(){\n\tfor (int i=1;i<=n;i++){\n\t\tint A,B; \n\t\tsplit(root,b[i],A,B);\n\t\troot=merge(merge(A,newnode(b[i])),B);\n\t\tsplit(root,c[i],A,B);\n\t\twrite(a[A].sum+c[i]*a[B].sz); putchar(' ');\n\t\tif (B) plu(B,c[i]);\n\t\troot=B;\n\t}\n}\nsigned main(){\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1536581201,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF923B \u3010Producing Snow\u3011"
    },
    {
        "content": "\u542c\u8bf4\u8d5b\u524d\u5199\u9898\u89e3\u53ef\u4ee5 rp++\u3002\n\n\u6211\u4eec\u9700\u8981\u6c42\u6bcf\u5929\u878d\u5316\u603b\u6570\uff0c\u4f46\u76f4\u63a5\u6c42\u5e76\u4e0d\u5bb9\u6613\uff0c\u8003\u8651\u6c42\u6bcf\u4e00\u5806\u7684\u8d77\u59cb\u65f6\u95f4\u5230\u7ed3\u675f\u65f6\u95f4\uff0c\u90a3\u4e48\u8fd9\u4e00\u533a\u95f4\u5185\u6bcf\u4e00\u5929\u90fd\u5e94\u8be5\u8d21\u732e $+1$\uff0c**\u6ce8\u610f\u6bcf\u4e2a\u533a\u95f4\u7684\u6700\u540e\u4e00\u5929\u53ef\u80fd\u878d\u5316\u4e0d\u6ee1**\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u4e8c\u5206\u52a0\u524d\u7f00\u548c\u627e\u5230\u7ec8\u6b62\u5929\u6570\uff0c\u7136\u540e\u4f7f\u7528\u7ebf\u6bb5\u6811\u533a\u95f4 $+1$\uff0c\u7279\u5224\u6700\u540e\u4e00\u4e2a\u6570\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\u3002\n\n\u6ce8\u610f\u8d21\u732e $+1$ \u6307\u8fd9\u4e00\u5929\u7684\u878d\u5316\u548c $+t_i$\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\nusing namespace std;\n\n#define int long long\n\nconst int N = 1e5 + 5;\n\nint n, a[N], b[N], c[N], s[N], f[N], ext[N];\n\nclass SegmentTree\n{\npublic:\n\tstruct Node\n\t{\n\t\tint l, r, sum, add;\n\t}tr[N << 2];\n\tvoid pushup(int u)\n\t{\n\t\ttr[u].sum = tr[u << 1].sum + tr[u << 1 | 1].sum;\n\t}\n\tvoid pushdown(int u)\n\t{\n\t\tNode& rt = tr[u], & lf = tr[u << 1], & rit = tr[u << 1 | 1];\n\t\tif (rt.add)\n\t\t{\n\t\t\tlf.add += rt.add;\n\t\t\tlf.sum += (lf.r - lf.l + 1) * rt.add;\n\t\t\trit.add += rt.add;\n\t\t\trit.sum += (rit.r - rit.l + 1) * rt.add;\n\t\t\trt.add = 0;\n\t\t}\n\t}\n\tvoid build(int u, int l, int r)\n\t{\n\t\ttr[u] = { l, r, 0, 0 };\n\t\tif (l == r) return;\n\t\tint mid = l + r >> 1;\n\t\tbuild(u << 1, l, mid);\n\t\tbuild(u << 1 | 1, mid + 1, r);\n\t}\n\tvoid update(int u, int l, int r, int p)\n\t{\n\t\tif (tr[u].l >= l and tr[u].r <= r)\n\t\t{\n\t\t\ttr[u].add += p;\n\t\t\ttr[u].sum += (tr[u].r - tr[u].l + 1) * p;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(u);\n\t\tint mid = tr[u].l + tr[u].r >> 1;\n\t\tif (l <= mid) update(u << 1, l, r, p);\n\t\tif (r > mid) update(u << 1 | 1, l, r, p);\n\t\tpushup(u);\n\t}\n\tint query(int u, int x)\n\t{\n\t\tif (tr[u].l == tr[u].r) return tr[u].sum;\n\t\tpushdown(u);\n\t\tint mid = tr[u].l + tr[u].r >> 1;\n\t\tif (x <= mid) return query(u << 1, x);\n\t\treturn query(u << 1 | 1, x);\n\t}\n}t;\n\nsigned main()\n{\n\tscanf(\"%lld\", &n);\n\tt.build(1, 1, n);\n\tfor (int i = 1; i <= n; i++) scanf(\"%lld\", &a[i]);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%lld\", &b[i]);\n\t\ts[i] = s[i - 1] + b[i];\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tc[i] = i;\n\t\tif (a[i] <= b[i])\n\t\t{\n\t\t\text[i] += a[i];\n\t\t\tcontinue;\n\t\t}\n\t\tint l = i, r = n + 1;\n\t\twhile (l + 1 < r)\n\t\t{\n\t\t\tint mid = l + r >> 1;\n\t\t\tif (s[mid] - s[i - 1] >= a[i]) r = mid;\n\t\t\telse l = mid;\n\t\t}\n\t\tc[i] = min(r, n);\n\t\tt.update(1, i, c[i], 1);\n\t\tif (s[r] - s[i - 1] >= a[i])\n\t\t{\n\t\t\tf[r] += b[r] - (a[i] - (s[r - 1] - s[i - 1]));\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tprintf(\"%lld \", b[i] * t.query(1, i) - f[i] + ext[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n",
        "postTime": 1663396879,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "CF923B Producing Snow"
    },
    {
        "content": "\u4f7f\u7528\u7684\u7b97\u6cd5\uff1a\u524d\u7f00\u548c\u3001\u5dee\u5206\u3002\u5148\u7ef4\u62a4\u878d\u5316\u91cf\u7684\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u6240\u4ee5\u5728\u8ba1\u7b97\u6bcf\u4e00\u5806\u96ea\u7684\u878d\u5316\u6240\u7528\u7684\u5929\u6570\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4e8c\u5206\u67e5\u627e\u51fa\u5b83\u6700\u540e\u878d\u5316\u7684\u5929\u6570pos,\u76f8\u5f53\u4e8e\u7b2ci\u5929\u5230\u7b2cpos-1\u5929\u90fd\u4f1a\u589e\u52a0\u4e00\u4e2a\u5355\u4f4d\u8be5\u5929\u7684\u878d\u5316\u91cf\uff0c\u6240\u4ee5\u4f7f\u7528\u5dee\u5206\u7ef4\u62a4\uff0c\u800c\u5982\u679c\u67d0\u4e00\u5929\u96ea\u878d\u5316\u5b8c\u800c\u5b9e\u9645\u5269\u4f59\u7684\u96ea\u4e0d\u8db3\u8be5\u5929\u7684\u878d\u5316\u91cf\uff0c\u5c31\u5c06\u5176\u7ef4\u62a4\u5230other\u6570\u7ec4\u4e2d\uff0c\u6700\u540e\u8f93\u51fa\u7b54\u6848\u65f6\u7a0d\u52a0\u8ba1\u7b97\u5373\u53ef\u3002\n```cpp\n#include<cstring>\n#include<cstdio>\n#include<iostream>\n#include<windows.h>\n#include<cmath>\n#include<algorithm>\n#include<utility>\n#include<limits.h>\n#include<map>\n#include<queue>\n#define R register\n#define rint R int\n#define ll long long\n#define I inline\n#define iint I int\n#define ivoid I void\n#define int void\n#define ill I ll\n#define maxn 100500\nusing namespace std;\nll n; \nll vol[maxn],tem[maxn];\nll tem_sum[maxn];\nll cf[maxn],other[maxn];\nll acfind(ll k)\n{\n    ll aim=vol[k];\n    ll l=k,r=n+1;\n    while(l<r)\n    {\n        ll mid=(l+r)/2;\n        if(tem_sum[mid]-tem_sum[k-1]>aim)\n            r=mid;\n        else\n            l=mid+1;\n    }\n    return l;\n}\nint main()\n{\n    scanf(\"%lld\",&n);\n    for(ll i=1;i<=n;i++)\n        scanf(\"%lld\",&vol[i]);\n    for(ll i=1;i<=n;i++)\n    {\n        scanf(\"%lld\",&tem[i]);\n        tem_sum[i]=tem_sum[i-1]+tem[i];\n    }\n    tem_sum[n+1]=9223372036854775807LL;tem[n+1]=9223372036854775807LL;\n    for(ll i=1;i<=n;i++)\n    {\n        ll pos=acfind(i);\n        cf[i]++;\n        cf[pos]--;\n        other[pos]+=vol[i]-(tem_sum[pos-1]-tem_sum[i-1]);\n    }\n    ll res=0;\n    for(ll i=1;i<=n;i++)\n    {\n        res+=cf[i];\n        printf(\"%lld \",res*tem[i]+other[i]);\n    }\n    return 1;\n}\n\n```",
        "postTime": 1544850402,
        "uid": 122451,
        "name": "Sasiyar",
        "ccfLevel": 0,
        "title": "CF923B Producing Snow\u849f\u84bb\u9898\u89e3"
    },
    {
        "content": "~~\u6765\u53d1\u4e2a\u6211\u7684\u5fc3\u9178\u5386\u7a0b....~~\n\n------------\n\n\u770b\u5230\u9898\u76ee\uff0c\u611f\u89c9\u662f\u533a\u95f4\u66f4\u65b0\u4e0e\u533a\u95f4\u67e5\u8be2\uff0c\u5148\u67e5\u8be2\u533a\u95f4\u7684\u548c\uff0c\u518d\u51cf\u6389\uff0c\u518d\u67e5\u8be2\u4e00\u6b21\u548c\uff0c\u4e24\u6b21\u7684\u67e5\u8be2\u548c\u4e4b\u5dee\u5373\u4e3a\u7194\u5316\u91cf\u3002\n\n\u5148\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\nstruct SegmentTree{\n    long long val[kmax_num << 2], maxn[kmax_num << 2];\n\n    #define lson (root << 1)\n    #define rson ((root << 1) | 1)\n\n    inline void PushUp(REG int root)\t{\n        val[root] = val[lson] + val[rson];\n        maxn[root] = std::max(val[lson], val[rson]);\n        return ;\n    }\n\n    inline void Build(REG int root, REG int begin, REG int end)\t{\n        if(begin == end)\t{\n            AIOS::file_input >> val[root];\n            maxn[root] = val[root];\n            return ;\n        }\n        else\t{\n            REG int mid = (begin + end) >> 1;\n            Build(lson, begin, mid);\n            Build(rson, mid + 1, end);\n            PushUp(root);\n            return ;\n        }\n    }\n\n    inline void Update(REG int root, REG int begin, REG int end, REG int udp_begin, REG int udp_end, REG long long num)\t{\n        if(maxn[root] == 0)\t{\t\n            //\u6211\u8fd8\u4ee5\u4e3a\u8fd9\u4e2a\u871c\u6c41\u526a\u679d\u80fd\u5feb\u70b9\u7684\n            return ;\t            \n        }\n        else\tif(begin == end)\t{\n            REG long long change = val[root] - num;\n            if(change < 0)\tchange = 0;\n            maxn[root] = val[root] = change;\n            //\u8981\u662f\u66f4\u65b0\u540e\u7684\u503c\u5c0f\u4e8e0\uff0c\u5c31\u6539\u4e3a0\n            return ;\n        }\n        else\t{\n            REG int mid = (begin + end) >> 1;\n            if(udp_begin <= mid)  Update(lson, begin, mid, udp_begin, udp_end, num);\n            if(udp_end > mid)     Update(rson, mid + 1, end, udp_begin, udp_end, num);\n            PushUp(root);\n            return ;\n        }\n    }\n\n    inline long long Query(REG int root, REG int begin, REG int end, REG int que_begin, REG int que_end)\t{\n        if(begin >= que_begin && end <= que_end)\t{\n            return val[root];\n        }\n        else\t{\n            REG int mid = (begin + end) >> 1;\n            REG long long ans = 0;\n            if(que_begin <= mid)  ans += Query(lson, begin, mid, que_begin, que_end);\n            if(que_end > mid)     ans += Query(rson, mid + 1, end, que_begin, que_end);\n            return ans;\n        }\n    }\n\n    #undef lson\n    #undef rson\n}\tsegment_tree;\n```\n\n------------\n\n\u7136\u540e......\n\n\u7a33\u7a33\u7684T\u4e86\u3002\n\n\u540e\u6765\u624d\u60f3\u5230Update\u64cd\u4f5c\u6700\u5dee\u4f1a\u88ab\u5361\u6210$O(n)$\u3002\n\n------------\n\n\u597d\u4e86\uff0c\u73b0\u5728\u8bb2\u6b63\u89e3\u3002\n\n\u7ef4\u62a4\u524d\u7f00\u548c$pre_{n} = pre_{n-1} + T_{n}$\uff0c\u6211\u4eec\u53ef\u4ee5\u628a$V_{n}$\u770b\u4f5c\u5728\u7b2c\u4e00\u5929\u51fa\u73b0\uff0c\u6b64\u65f6\u5b83\u7684\u503c\u5e94\u6539\u4e3a$V_{n} + pre_{n-1}$\u3002\n\n\u7528$set$\u7ef4\u62a4\uff0c\u56e0\u4e3a$set$\u5185\u90e8\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528$.begin()$\u83b7\u53d6\u6700\u5c0f\u503c\uff0c\u82e5\u6700\u5c0f\u503c\u6bd4$pre_{n}$\u5c0f\uff0c\u7b54\u6848\u5c31\u52a0\u4e0a$.begin() - pre_{n01}$\u5e76\u5220\u9664\u90a3\u4e2a\u503c\uff0c\u6700\u540e\u7b54\u6848\u52a0\u4e0a$set.size() * T_{n}$\u5c31\u884c\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define REG register\n#define IN inline\n#define For(x,y,z) for (REG int (x) = (y); (x) <= (z); ++(x))\n#define FOR(x,y,z) for (REG int (x) = (y); (x) <  (z); ++(x))\nconst int kmax_num = 1e3 + 10, kmax_int = 2147483647, kmod = 1e9+7;\n\nint v[kmax_num], t[kmax_num];\nlong long pre[kmax_num];\n\nstd::multiset<long long>\tmset;\n\nint main() {\n//\tfreopen(\"G:\\\\Data\\\\eclipse-workspace\\\\IO\\\\Input\\\\Input.txt\", \"r\", stdin);\n//\tfreopen(\"G:\\\\Data\\\\eclipse-workspace\\\\IO\\\\Output\\\\Output.txt\", \"w\",stdout);\n    REG int n;\n    std::cin >> n;\n    For(i,1,n)\tstd::cin >> v[i];\n    For(i,1,n)\tstd::cin >> t[i], pre[i] = pre[i-1] + t[i];\n\n    For(i,1,n)\t{\n        REG long long ans = 0;\n        mset.insert(v[i] + pre[i-1]);\n        while(!mset.empty() && *mset.begin() <= pre[i])\n            ans += *mset.begin() - pre[i-1], mset.erase(mset.begin());\n        ans += t[i] * mset.size();\n        printf(\"%I64d\\n\", ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1522234718,
        "uid": 51658,
        "name": "Playnext",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF923B \u3010Producing Snow\u3011"
    },
    {
        "content": "# \u8fd9\u662f\u4e00\u9053\u6c34\u9898\uff01\uff01\uff01\uff01\n### \u5fc3\u9178\u5386\u7a0b\n- \u6211\u770b\u5230\u8fd9\u9053\u9898\u7684\u662f\u65f6\u5019\u7b2c\u4e00\u53cd\u5e94\u662f\u8fd9\u9898\u80fd\u6709\u84dd\u9898\uff1f\uff1f\u4e8e\u662f\u6211\u4fe1\u5fc3\u6ee1\u6ee1\u7684\u60f3\u7528**\u96ea\u7684\u4f53\u79ef**\u7684\u524d\u7f00\u548c\u5207\u6389\u8fd9\u9053\u9898\uff0c\u7136\u540e\u3002\u3002\u3002\u3002\u3002\u3002\u6211\u5fd8\u4e86\u6bcf\u5929\u7684\u96ea\u5269\u7684\u4e0d\u4e00\u6837\u554a\uff0c\u6240\u4ee5\u5341\u5206\u679c\u65ad\u7684WA\u6389\u4e86\u3002\u3002\n\n- \u4f46\u6211\u662f\u4e00\u4e2a~~\u8868\u9762~~\u575a\u6301\u7684\u4eba\uff0c\u6240\u4ee5\u6211\u600e\u4e48\u80fd\u8fd9\u4e48\u8f7b\u6613\u5c31\u653e\u5f03\u5462\uff1f\uff1f~~\u4e0d\u7136\u5462\uff1f~~\n- \u6240\u4ee5\u6211\u51b3\u5b9a\u7ee7\u7eed\u809d\u9898\uff0c\u800c\u4e14\u4e00\u5b9a\u8981\u7528\u524d\u7f00\u548c\u505a\uff01\uff01\uff01\n\n- \u521a\u521a\u8bf4\u4e86\uff0c\u7528**\u96ea\u7684\u4f53\u79ef**\u7684\u524d\u7f00\u548c\u4f1a\u70b8\uff0c\u6240\u4ee5\u8fd8\u5269\u4e0b\u7684\u5c31\u53ea\u6709\u6bcf\u5929\u7684**\u878d\u96ea\u91cf**\u4e86\uff0c\u6240\u4ee5\uff0c\u5f00\u641e\u5427\uff01\uff01\n### \u89e3\u9898\u601d\u8def\n- \u65e2\u7136\u8bf4\u4e86\u8981\u7528\u524d\u7f00\u548c\uff0c\u90a3\u80af\u5b9a\u7684\uff0c\u5148\u628a*Sum*\u6570\u7ec4\u6c42\u51fa\u6765\u554a\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb~~\u6c34\u9898\u4e86~~\u3002\n\n- \u65e2\u7136\u6211\u4eec\u6c42\u7684\u662f**\u878d\u96ea\u91cf**\u7684\u524d\u7f00\u548c\uff0c\u90a3\u4e48\u89e3\u9898\u80af\u5b9a\u662f\u8981\u7528\u5230\u5b83\u7684\uff0c\u81f3\u4e8e\u600e\u4e48\u7528\uff0c\u7ecf\u8fc7\u6211\u4eec\u4e00\u756a\u601d\u8003~~\u4e71\u641e~~\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e00\u5806\u96ea\u81ea\u8eab\u7684\u4f53\u79ef\u52a0\u4e0a\u5b83\u51fa\u73b0\u7684\u524d\u4e00\u5929\u7684\u524d\u7f00\u548c\u76f8\u52a0$$V[i]+Sum[i-1]$$\u56e0\u4e3a\u662f\u7b2c*i*\u5929\u624d\u51fa\u73b0\u7684\u8fd9\u5806\u96ea\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5728\u7b2c*i*\u5929\u624d\u5c06\u5b83\u52a0\u5165\u6211\u4eec\u8ba1\u7b97\u7684\u961f\u5217\u4e2d\u3002\uff08\u5176\u5b9e\u8fd9\u6b65\u64cd\u4f5c\u5c31\u76f8\u5f53\u4e8e\u662f\u628a\u8fd9\u5806\u96ea\u770b\u6210\u662f\u5728\u7b2c\u4e00\u5929\u51fa\u73b0\u7684\uff09\n- \u8fd9\u65f6\u5019\u6709\u4e9b\u5c0f\u4f19\u4f34\u5e94\u8be5\u5df2\u7ecf\u77e5\u9053\u8be5\u600e\u4e48\u641e\u4e86\u5427\uff1f\uff1f\n\n- \u6ca1\u9519\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u6bcf\u4e00\u5929\u7684\u65f6\u5019\u90fd\u505a\u4e00\u4e2a\u6bd4\u8f83\uff0c\u5c06 <= *Sum[i]* \u7684\u53d6\u51fa\uff0c\u7528\u5b83\u51cf\u53bb\u524d\u4e00\u5929\u7684\u878d\u96ea\u91cf\u5f97\u5230\u7684\u5c31\u662f\u8fd9\u5806\u96ea\u5728\u4eca\u5929\u5269\u7684~~\u90a3\u4e48\u53ef\u601c\u5df4\u5df4\u7684~~\u4e00\u70b9\u7684\u91cf\u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e$$ans+=\tV-Sum[i-1]$$\u5f53\u7136\uff0c\u592a\u5c11\u4e86\uff0c~~\u706d\u53e3\u5427~~\u3002\n- \u4f60\u95ee\u90a3\u4e9b\u96ea\u8fd8\u8db3\u591f\u591a\u7684\uff1f\uff1f\u90a3\u5c31\u628a\u5b83\u4eec\u7559\u4e0b\uff0c\u7559\u7ed9\u4ee5\u540e\u7684\u6765\u5904\u7406\u5427\u3002\n\n- \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u5929\u52a0\u5165\u7684\u96ea\uff08\u5904\u7406\u8fc7\u540e\u7684\uff09\uff0c\u52a0\u5165\u5230\u4e00\u4e2a\u5c0f\u6839\u5806\u91cc\u9762\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u7684\u6bcf\u6b21\u7684\u904d\u5386\uff0c\u53ef\u4ee5\u7701\u5f88\u591a\u7684\u4e8b\u3002\n- \u5dee\u4e0d\u591a\u5c31\u8fd9\u6837\u5427\uff0c\u4e0a\u4ee3\u7801\uff0c\u8fd8\u6709\u4ec0\u4e48\u4e0d\u592a\u6e05\u695a\uff0c\u6211\u5728\u4ee3\u7801\u91cc\u9762\u5c3d\u91cf\u5199\u660e\uff1a\n```cpp\n#include<set>\n#include<map>\n#include<queue>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define ll long long\n#define it inline int\n#define rl register ll\n#define il inline void\n#define ri register int\n#define clean(a,i) memset(a,i,sizeof(a))\n#define MAXN 100005\nusing namespace std;\ntemplate<class T>il read(T &x)\n{\n    int f=1;char k=getchar();x=0;\n    for(;k>'9'||k<'0';k=getchar()) if(k=='-') f=-1;\n    for(;k>='0'&&k<='9';k=getchar()) x=x*10+k-'0';\n    x*=f;\n}//\u8bfb\u5165\u4f18\u5316\npriority_queue<ll,vector<ll>,greater<ll> > s;//\u7528\u6765\u7ef4\u62a4\u7b54\u6848\u7684\u90a3\u4e2a\u5c0f\u6839\u5806\uff0c\u4f46\u6ce8\u610f\u8981\u7528long long\u6765\u5b58\uff0c\u4e0d\u7136\u4f1a\u70b8\nint n,tot,v[MAXN],t[MAXN];\nll sum[MAXN];\nint main()\n{\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n    read(n);\n    for(ri i=1;i<=n;i++)\n        read(v[i]);//\u8bfb\u5165\u4f53\u79ef\n    for(ri i=1;i<=n;i++)\n    {\n        read(t[i]);//\u8bfb\u5165\u878d\u96ea\u91cf\n        sum[i]=sum[i-1]+t[i];//\u8ba1\u7b97\u524d\u7f00\u548c\n    }\n    for(ri i=1;i<=n;i++)\n    {\n        ll ans=0;//\u7b54\u6848\u6e05\u96f6\n        s.push(v[i]+sum[i-1]);//\u5c06\u4eca\u5929\u7684\u90a3\u4e00\u5806\u96ea\u653e\u5165\u5c0f\u6839\u5806\u91cc\n        while(!s.empty()&&s.top()<=sum[i])\n            ans+=s.top()-sum[i-1],s.pop();//\u5904\u7406\u6389\u90a3\u4e9b\u4e0d\u591f\u4ea4\u94b1\u7684:)\n        ans+=t[i]*s.size();//\u91cc\u9762\u8fd8\u7559\u4e0b\u7684\u4e2a\u6570\u5c31\u662f\u4ea4\u7684\u8d77\u94b1\u7684\u826f\u6c11\n        printf(\"%lld \",ans);//\u8f93\u51fa\n    }\n    return 0;\n}\n```\n- ps\uff1a\u6700\u4e0b\u9762\u90a3\u4f4d\u5927\u4f6c\u7684\u9898\u89e3\u6709\u70b9\u5c0f\u95ee\u9898\uff0c\u4e0d\u80fd\u7528set\u6765\u5b58\uff0c\u56e0\u4e3aset\u867d\u7136\u4e5f\u80fd\u6392\u5e8f\uff0c\u4f46\u662f\u4f1a\u81ea\u52a8\u53bb\u9664\u6389\u91cd\u590d\u7684\u90e8\u5206\uff0c\u4f1a\u5bfc\u81f4\u7b54\u6848\u6709\u95ee\u9898\u3002\n- \u4f8b\u5982\uff1a\n#### input\uff1a10 5 5 //\u4f53\u79ef 5 7 2//\u878d\u96ea\u91cf\n#### output\uff1a5 10 2\n- \u8fd9\u7ec4\u6570\u636e\u5c31\u4f1a\u51fa\u95ee\u9898\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a10\u5206\u522b\u5728\u7b2c\u4e00\u3001\u7b2c\u4e8c\u6b21\u52a0\u4e86\u8fdb\u6765\u3002\n\n- \u6700\u540e\u9644\u4e0a\u9898\u76ee\u94fe\u63a5\n[\u6233\u8fd9\u91cc](https://www.luogu.org/problemnew/show/CF923B)",
        "postTime": 1545111153,
        "uid": 122273,
        "name": "TheShadow",
        "ccfLevel": 0,
        "title": "CF923B Producing Snow \u6211\u89c1\u8fc7\u7684\u6700\u7eff\u7684\u9898 \u9898\u89e3"
    }
]