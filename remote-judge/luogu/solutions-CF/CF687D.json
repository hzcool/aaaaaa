[
    {
        "content": "\u600e\u4e48\u4f60\u8c37\u6700\u4f18\u89e3\u90fd\u662f\u66b4\u529b\u554a\uff0c\u54ed\u54ed\u3002\n\n\u5927\u6982\u662f\u7b2c\u4e00\u7bc7\u590d\u6742\u5ea6\u6bd4\u8f83\u5bf9\u7684\u9898\u89e3\u3002\n\n\u9996\u5148\u8003\u8651\u66b4\u529b\u600e\u4e48\u505a\uff0c\u4e5f\u5c31\u662f\u4f60\u8981\u628a\u6574\u4e2a\u56fe\u5206\u6210\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u4f7f\u5f97\u4e24\u7aef\u70b9\u5728\u540c\u4e00\u90e8\u5206\u7684\u8fb9\u7684\u6700\u5927\u8fb9\u6743\u6700\u5c0f\u3002\u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u663e\u7136\u53ef\u4ee5\u8d2a\u5fc3\uff0c\u4e5f\u5c31\u662f\u4ece\u5927\u5f80\u5c0f\u679a\u4e3e\u6bcf\u6761\u8fb9\uff0c\u5982\u679c\u53ef\u4ee5\u8ba9\u5b83\u6a2a\u8de8\u4e24\u90e8\uff0c\u5c31\u628a\u4e24\u7aef\u70b9\u5206\u5230\u4e0d\u540c\u7684\u90e8\u5206\uff0c\u53cd\u4e4b\u5219\u7b54\u6848\u5373\u4e3a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u3002\u8fd9\u4e2a\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u662f $O(qm\\cdot\\alpha(n))$\uff0c\u56e0\u4e3a\u662f CF \u7684\u673a\u5b50\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898~~\u5e76\u62ff\u5230\u4f60\u8c37\u6700\u4f18\u89e3~~\u3002\n\n---\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8fb9\u96c6\uff0c\u5982\u679c\u5728\u91cc\u9762\u52a0\u4e0a\u82e5\u5e72\u6761\u8fb9\uff0c\u6210\u4e3a\u65b0\u7684\u7b54\u6848\u7684\u8fb9\u662f\u4ec0\u4e48\u3002\n\n1. \u6bd4\u539f\u7b54\u6848\u8fb9\u6743\u5c0f\u7684\u8fb9\u663e\u7136\u4e0d\u53ef\u80fd\u3002\n2. \u6bd4\u7b54\u6848\u8fb9\u6743\u5927\uff0c\u4f46\u662f\u5728\u539f\u5148\u52a0\u8fb9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u6761\u8fb9\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u5373\uff1a\u52a0\u8fd9\u6761\u8fb9\u65f6\u672a\u6539\u53d8\u5e76\u67e5\u96c6\u4fe1\u606f\u3002\u8fd9\u4e5f\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u5982\u679c\u5b83\u6210\u4e3a\u4e86\u7b54\u6848\uff0c\u90a3\u4e48\u5176\u4e24\u7aef\u70b9\u4e00\u5b9a\u5728\u4e4b\u524d\u7684\u8fb9\u4e2d\u88ab\u5212\u5206\u5230\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u800c\u5b83\u6ca1\u6709\u88ab\u9009\u4e2d\u5219\u8868\u660e\u539f\u8fb9\u96c6\u4e2d\u6743\u503c\u4e25\u683c\u5927\u4e8e\u5b83\u7684\u8fb9\u8ba9\u5176\u4e24\u7aef\u70b9\u5212\u5206\u5230\u4e0d\u540c\u7684\u96c6\u5408\uff0c\u77db\u76fe\u4e00\u5b9a\u5728\u5b83\u4e4b\u524d\u4ea7\u751f\u3002\n\n\u6240\u4ee5\uff0c\u53ea\u6709\u5bf9\u5e76\u67e5\u96c6\u4ea7\u751f\u4fee\u6539\u6216\u4ea7\u751f\u77db\u76fe\u7684\u8fb9\uff0c\u624d\u4f1a\u6210\u4e3a\u65b0\u7684\u7b54\u6848\u3002\n\n\u800c\u5bf9\u5e76\u67e5\u96c6\u4ea7\u751f\u4e00\u6b21\u8d21\u732e\uff0c\u5fc5\u7136\u4f1a\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u6240\u4ee5\uff0c\u5bf9\u4e8e\u4efb\u610f\u5927\u7684\u8fb9\u96c6\uff0c\u5e76\u4e0a\u4e00\u4e2a\u8fb9\u96c6\u4e4b\u540e\uff0c\u53ef\u80fd\u6709\u8d21\u732e\u7684\u8fb9\u662f $O(n)$ \u7ea7\u522b\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8fb9\u96c6\uff0c\u53ea\u4fdd\u7559\u8fd9\u4e9b\u53ef\u80fd\u6709\u8d21\u732e\u7684\u8fb9\uff0c\u5728\u8fb9\u96c6\u8fdb\u884c\u5408\u5e76\u7684\u65f6\u5019\u7b54\u6848\u4e0d\u4f1a\u6539\u53d8\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5408\u5e76\u4e24\u4e2a\u8fb9\u96c6\u65f6\uff0c\u66b4\u529b\u5408\u5e76\u7684\u590d\u6742\u5ea6\u53d8\u6210\u4e86 $O(n\\cdot\\alpha (n))$\u3002\n\n\u8fb9\u96c6\u5177\u6709\u4e86\u53ef\u52a0\u7684\u6027\u8d28\uff0c\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u533a\u95f4\u8fb9\u96c6\u7684\u5e76\u4e86\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e00\u4e2a\u8282\u70b9 $[l,r]$ \u7ef4\u62a4\u7684\u662f\u533a\u95f4 $[l,r]$ \u6240\u5f62\u6210\u7684\u8fb9\u96c6\u4e2d\u53ef\u80fd\u4ea7\u751f\u8d21\u732e\u7684\u8fb9\uff0c\u5efa\u6811\u548c\u67e5\u8be2\u53ea\u9700\u8981\u66b4\u529b\u5408\u5e76\u533a\u95f4\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O((m+qn)\\log m\\cdot \\alpha(n))$\u3002\n\np.s. \u533a\u95f4\u5408\u5e76\u65f6\u53ea\u7528\u5c06\u6240\u6709\u6d89\u53ca\u5230\u7684\u8282\u70b9\u7684\u5e76\u67e5\u96c6\u4fe1\u606f\u8fd8\u539f\u5373\u53ef\uff0c\u5982\u679c\u50cf\u4e0b\u9762\u6709\u7bc7\u9898\u89e3\u4e00\u6837\u5168\u90e8\u8fd8\u539f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u591a\u4e58\u4e00\u4e2a $n$\uff08\uff08\n\n\u7a0d\u5fae\u5361\u5361\u5e38\u53ef\u4ee5\u8dd1\u8fdb 1s\u3002\u5361\u5e38\u524d\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define rgi register int\n#define mid (l+r>>1)\n#define lc k<<1\n#define rc lc|1\nusing namespace std;\nconst int N=1010,M=500010;\n#define set(x) fa[x]=x,fa[x+n]=x+n\n#define ve vector<edge>\n#define vl(x) x.begin(),x.end()\nint n,m,q,fa[N<<1],l,r;\nstruct edge{int u,v,w;}e[M];\nint fi(int x){return x==fa[x]?x:fa[x]=fi(fa[x]);}\nve t[M<<2],res;\nint solve(ve a,int k){\n\tfor(auto e:a)set(e.u),set(e.v);\n\tfor(auto e:a){\n\t\tint fx=fi(e.u),fy=fi(e.v),fY=fi(e.v+n);\n\t\tif(fx!=fY)t[k].push_back(e),fa[fx]=fY,fa[fy]=fi(e.u+n);\n\t\tif(fx==fy)return e.w;\n\t}\n\treturn -1;\n}\nve merge(ve a,ve b){\n\tve r(a.size()+b.size());\n\treturn merge(vl(a),vl(b),r.begin(),[&](edge x,edge y){return x.w>y.w;}),r;\n}\nvoid build(int k,int l,int r){\n\tif(l==r)return t[k].push_back(e[l]);\n\tbuild(lc,l,mid),build(rc,mid+1,r);\n\tsolve(merge(t[lc],t[rc]),k);\n}\nve qry(int x,int y,int k=1,int l=1,int r=m){\n\tif(l>y||r<x)return res;\n\tif(l>=x&&r<=y)return t[k];\n\treturn merge(qry(x,y,lc,l,mid),qry(x,y,rc,mid+1,r));\n}\nsigned main(){\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tfor(rgi i=1;i<=m;++i)scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n\tbuild(1,1,m);\n\twhile(q--)scanf(\"%d%d\",&l,&r),printf(\"%d\\n\",solve(qry(l,r),0));\n\treturn 0;\n}\n```\n",
        "postTime": 1621329004,
        "uid": 78372,
        "name": "M4_SOPMODII_JR",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF687D Dividing Kingdom II"
    },
    {
        "content": "# \u7ffb\u8bd1\u91cd\u7f6e\u7248\n**\u6709N\u4e2a\u70b9\uff0cM\u6761\u65e0\u5411\u8fb9(\u7f16\u53f7\u4e3a1~M)\uff0cQ\u4e2a\u95ee\u9898\u3002\u6bcf\u6761\u8fb9\u6709U,V,W(U,V\u4e3a\u8fb9\u94fe\u63a5\u7684\u4e24\u70b9\uff0c\u4e3a\u8fb9\u6743)\u3002**\n\n**\u5b8c\u6574\u8fb9\uff1a\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u5728\u4e00\u4e2a\u533a\u5757\u4e2d** \n\n**\u4e00\u4e2a\u533a\u5757\u7684\u4ef7\u503c\uff1a\u8be5\u533a\u5757\u4e2d\u5355\u6761\u5b8c\u6574\u8fb9\u7684\u6700\u5927\u6743\u503c\uff08\u5982\u679c\u6ca1\u6709\u5b8c\u6574\u8fb9\u5219\u4e3a-1\uff09**\n\n**\u6bcf\u6b21\u63d0\u95ee\uff1aL\u3001R\uff0c\u53ea\u4fdd\u7559\u7f16\u53f7\u4e3a[L\uff0cR]\u7684\u8fb9\u53ca\u5176\u7aef\u70b9\uff0c\u5c06\u8fd9\u4e9b\u7aef\u70b9\u5206\u5165\u4e24\u4e2a\u4e0d\u540c\u7684\u533a\u5757\uff08\u6bcf\u4e2a\u70b9\u53ea\u80fd\u5c5e\u4e8e\u4e00\u4e2a\u533a\u5757\uff09\u3002\u4f60\u9700\u8981\u8f93\u51fa\u8fd9\u4e24\u4e2a\u533a\u5757\u4e2d\u6700\u5927\u7684\u533a\u5757\u4ef7\u503c\u7684\u6700\u5c0f\u503c**\n\n# \u6b63\u9898\u5f00\u59cb\n**\u6d89\u53ca\u7b97\u6cd5\uff1a\u8d2a\u5fc3\u6392\u5e8f\uff0c\u5e76\u67e5\u96c6**\n\n**\u4e3b\u8981\u601d\u8def\uff1a\u5c06\u6bcf\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u5c3d\u53ef\u80fd\u5206\u5165\u4e0d\u540c\u533a\u5757\uff0c\u9632\u6b62\u5f62\u6210\u5b8c\u6574\u8fb9\u3002\u5c06\u8fb9\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4f18\u5148\u62c6\u6389\u6743\u503c\u5927\u7684\u8fb9**\n## \u4ee3\u7801\u90e8\u5206\n**father[i]\u6570\u7ec4\u5f00\u4e24\u500d\uff0ci\u8868\u793a\u4e0e\u8fd9\u4e2a\u70b9\u5728\u540c\u4e00\u533a\u5757\u4e2d\u7684\u70b9\uff0ci+N\u8868\u793a\u4e0e\u8fd9\u4e2a\u70b9\u5728\u4e0d\u540c\u533a\u5757**\n\n**\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5148\u68c0\u67e5\u4e24\u4e2a\u7aef\u70b9\u662f\u5426\u5728\u540c\u4e00\u533a\u95f4\u4e2d\uff0c\u5982\u679c\u5728\u5c31\u76f4\u63a5\u8f93\u51fa\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u5426\u5219\u5c31\u628a\u4e24\u4e2a\u7aef\u70b9\u8fde\u5165\u4e92\u76f8\u7684\u5bf9\u7acb\u8fb9**\n\n# \u8b66\u544a\uff0c\u524d\u65b9\u6709AC\u4ee3\u7801\u51fa\u6ca1\n```cpp \n#define Tokisaki return\n#define Kurumi  0;\n#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<algorithm>\n#define rint register int\ntypedef long long ll;\nusing namespace std;\nstruct road\n{\n\tint start,end,len,id;\n}rd[500005];\nint fa[2005]; //\u4e24\u500dfather\u6570\u7ec4\ninline bool cmp (road x,road y)\n{\n\treturn x.len>y.len;\n}\ninline int getf (int x)\n{\n\tif(fa[x]==x) return fa[x];\n\treturn fa[x]=getf(fa[x]);\n}\ninline void con (int x,int y)\n{\n\tint f1,f2;\n\tf1=getf(x),f2=getf(y);\n\tif(f1!=f2) fa[f1]=f2;\n}\nll read (){ll ret=0,f=1;char c=getchar();while(!isdigit(c)) f=c=='-'?-1:1,c=getchar();while( isdigit(c)) ret=ret*10+c-'0',c=getchar();return ret*f;}\n\nint main(){\n\trint n,m,q;\n\tn=read(),m=read(),q=read();\n\tfor(rint i=1;i<=m;i++)\n\t{\n\t\trd[i].start=read();\n\t\trd[i].end=read();\n\t\trd[i].len=read();\n\t\trd[i].id=i;\n\t}\n\tsort(rd+1,rd+1+m,cmp);\n\twhile(q--)\n\t{\n\t\trint ans=-1,l,r;\n\t\tl=read(),r=read();\n\t\tfor(rint i=1;i<=n*2;i++)\n\t\t{\n\t\t\tfa[i]=i;\n\t\t}\n\t\tfor(rint i=1;i<=m;i++) //\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\n\t\t{\n\t\t\tif(rd[i].id>=l&&rd[i].id<=r)\n\t\t\t{\n\t\t\t\tif(getf(rd[i].start)==getf(rd[i].end)) //\u4e24\u4e2a\u7aef\u70b9\u5728\u540c\u4e00\u533a\u5757\u4e2d\n\t\t\t\t{\n\t\t\t\t\tans=rd[i].len;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcon(rd[i].start+n,rd[i].end); //\u8fde\u5165\u4e92\u76f8\u7684\u5bf9\u7acb\u70b9\n\t\t\t\t\tcon(rd[i].start,rd[i].end+n);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\tTokisaki Kurumi //\u72c2\u4e09\u5929\u4e0b\u7b2c\u4e00\uff01\uff01\uff01\n}\n```\n\n## \u540e\u8a00\n**\u8fd9\u9053\u9898\u96be\u5ea6\u4e0d\u5927\uff08\u9002\u5408\u5e76\u67e5\u96c6\u521d\u5b66\u8005\uff09**\n\n\u8fd9\u9053\u9898\u82b1\u4e86\u6211\u4e00\u4e2a\u5c0f\u65f6\uff0c\u5176\u4e2d40\u5206\u949f\u5728\u770b\u9898\u76ee\uff08\u82f1\u8bed\u4e0d\u597d\uff09\uff0c20\u5206\u949f\u6572\u5b8c\u4ee3\u7801\n",
        "postTime": 1570409250,
        "uid": 235566,
        "name": "_agKc_",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF687D \u3010Dividing Kingdom II\u3011"
    },
    {
        "content": "\n\n[\u6d1b\u8c37\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF687D)\t[CF\u4f20\u9001\u95e8](http://codeforces.com/problemset/problem/687/D)\n\n### Solution\n\n\u9898\u89e3\u91cc\u90fd\u662f\u66b4\u529b\u7684\u505a\u6cd5\uff0c\u8fd9\u91cc\u4e5f\u4ecb\u7ecd\u4e00\u4e0b\u3002\n\n\u65e2\u7136\u8981\u6c42\u627e\u6700\u5c0f\u7684\u8fb9\uff0c\u90a3\u4e48\u5fc5\u7136\u8981\u5c06 $(l,r)$ \u7684\u8fb9\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u6bcf\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5c3d\u91cf\u5206\u5230\u4e0d\u540c\u7684\u96c6\u5408\uff0c\u76f4\u5230\u5206\u4e0d\u4e86\uff0c\u5c31\u53ef\u4ee5\u8f93\u51fa\u7b54\u6848\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(mq)$ \n\n~~\u8981\u4e0d\u662f\u65f6\u9650 $6$ \u79d2\uff0c\u5c31\u90fd\u5f97\u6ca1\u4e86~~\n\n---\n\n\u4f46\u662f\u60f3\u6cd5\u662f\u597d\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u6cbf\u7740\u8fd9\u4e2a\u60f3\u6cd5\u7ee7\u7eed\u601d\u8003\u3002\n\n\u5c06\u8981\u52a0\u5165\u5e76\u67e5\u96c6\u7684\u8fb9\u5206\u4e3a\u4e09\u79cd\uff1a\n\n1.  $u$ \u548c $v$ \u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\uff0c\u90a3\u4e48\u5c06\u8fde\u901a\u5757\u8054\u901a\uff0c\u5e76\u6807\u8bb0 $u,v$ \u4e0d\u5728\u540c\u4e00\u96c6\u5408\n2.  $u$ \u548c $v$ \u5728\u540c\u4e00\u8fde\u901a\u5757\u4e2d\uff0c\u4f46\u662f\u4e0d\u5728\u540c\u4e00\u96c6\u5408\uff0c\u90a3\u4e48\u8df3\u8fc7\u5373\u53ef\n3.  $u$ \u548c $v$ \u5728\u540c\u4e00\u8fde\u901a\u5757\u4e2d\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u8f93\u51fa\u8fd9\u6761\u8fb9\n\n\u6211\u4eec\u53d1\u73b0\u7b2c $1$ \u79cd\u8fb9\u6700\u591a\u6709 $n-1$ \u6761\uff0c\u7b2c $3$ \u79cd\u8fb9\u6709 $1$ \u6761\uff0c\u5e76\u4e14\u6700\u540e\u7684\u7b54\u6848\u548c\u7b2c $2$ \u79cd\u8fb9\u662f\u6ca1\u6709\u5173\u7cfb\u7684\u3002 \n\n\u4e5f\u5c31\u662f\u8bf4\u7b2c $1$ \u79cd\u7684\u8fd9 $n-1$ \u8fb9\u5c31\u8db3\u4ee5\u786e\u5b9a\u90a3\u4e2a\u5e76\u67e5\u96c6\u4e86\u3002\n\n\u90a3\u4e48\u5c06\u8fd9 $n-1$ \u6761\u8fb9\u548c\u7b2c $3$ \u79cd\u8fb9\uff0c\u5373\u603b\u5171 $n$ \u6761\u8fb9\u5b58\u4e0b\u6765\u6700\u540e\u7528\u6765\u5224\u65ad\u7b54\u6848\uff0c\u5c31\u53ef\u4ee5\u5c06\u590d\u6742\u5ea6 $O(m)\\rightarrow O(n)$ \u3002\n\n\u7528\u4ec0\u4e48\u6765\u5b58\u50a8\u5462\uff1f\n\n\u6211\u4eec\u53d1\u73b0\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\u6ca1\u8bf4\u2014\u2014\u5b83\u662f\u5bf9\u4e8e\u4e00\u4e2a**\u533a\u95f4**\u6765\u8be2\u95ee\u7684\n\n\u54e6\uff0c\u90a3\u5c31\u7528\u7ebf\u6bb5\u6811\u5b58\u5427(\\*^\u25bd^*)\n\n\u4f46\u662f\u95ee\u9898\u662f\u5728\u5efa\u6811\u65f6\u600e\u4e48\u5411\u4e0apushup\u5462\uff1f\n\n\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u6700\u591a\u4e0d\u8d85\u8fc7 $n$ \u6761\u8fb9\u800c\u4e14\u8fb9\u8fd8\u8981\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u6392\u5e8f\u597d\u8bf4\uff0c\u5728\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u7684\u8fb9\u65f6\uff0c\u5f52\u5e76\u6392\u5e8f\u5373\u53ef\uff1b\u90a3\u4e48\u5f53\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u65f6\uff0c\u600e\u4e48\u5224\u65ad\u5269\u4e0b\u7684\u662f\u54ea\u51e0\u6761\u8fb9\u5462\uff1f\u8fd8\u662f\u62ff\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u561b\u256e(\u256f-\u2570)\u256d\n\n\u67e5\u8be2\u7684\u65f6\u5019\u540c\u7406\u3002\n\n\u5efa\u6811\u590d\u6742\u5ea6\u4e3a $O[nm\\alpha(n)]$ \uff0c\u67e5\u8be2\u590d\u6742\u5ea6\u4e3a $O[qn\\alpha(n)\\log m]$ \uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O[\\alpha(n)n(m+q\\log  m)]$ \u3002\n\n### Code\n\n```c++\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define ls rt<<1\n#define rs rt<<1|1\n#define VI vector<int>\n\nusing namespace std;\nconst int N=1010,M=500010;\nint n,m,q,X[M],Y[M],W[M],f[N],g[N],p[M];\nVI tr[M<<2];\nVI::iterator ia,ib;\n\ninline int read(){\n    int x=0,f=1;\n    char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-') f=-1;ch=getchar();}\n    while(isdigit(ch)){x=x*10+(ch^48);ch=getchar();}\n    return x*f;\n}\n\nint find(int x){\n    if(f[x]==x) return x;\n    int t=f[x];\n    f[x]=find(t);\n    g[x]^=g[t];\n    return f[x];\n}\n\ninline VI merge(VI a,VI b){\n    int cnt=0;\n    VI res;\n    for(ia=a.begin();ia!=a.end();ia++)\n        f[X[*ia]]=X[*ia],f[Y[*ia]]=Y[*ia],g[X[*ia]]=g[Y[*ia]]=0;\n    for(ia=b.begin();ia!=b.end();ia++)\n        f[X[*ia]]=X[*ia],f[Y[*ia]]=Y[*ia],g[X[*ia]]=g[Y[*ia]]=0;\n    for(ia=a.begin(),ib=b.begin();ia!=a.end()||ib!=b.end();){\n        if(ia!=a.end()&&(ib==b.end()||W[*ia]>W[*ib]))\n             p[++cnt]=*ia,ia++;\n        else p[++cnt]=*ib,ib++;         //\u5f52\u5e76\u6392\u5e8f\u601d\u60f3\n    }\n    for(int i=1,x,y;i<=cnt;i++){\n        x=X[p[i]],y=Y[p[i]];\n        if(find(x)!=find(y)) g[find(x)]=g[x]^g[y]^1,f[f[x]]=f[y],res.push_back(p[i]);\n        else if(g[x]!=g[y]) continue;\n        else{\n            res.push_back(p[i]);\n            break;\n        }\n    }\n    return res;\n}\n\nvoid build(int rt,int l,int r){\n    if(l==r){\n        tr[rt].push_back(l);\n        return ;\n    }\n    int mid=(l+r)>>1;\n    build(ls,l,mid); build(rs,mid+1,r);\n    tr[rt]=merge(tr[ls],tr[rs]);\n}\n\nVI query(int rt,int l,int r,int L,int R){\n    if(L<=l&&r<=R) return tr[rt];\n    int mid=(l+r)>>1;\n    if(R<=mid) return query(ls,l,mid,L,R);\n    if(L>mid) return query(rs,mid+1,r,L,R);\n    return merge(query(ls,l,mid,L,R),query(rs,mid+1,r,L,R));\n}\n\nint main(){\n    VI t;\n    n=read(); m=read(); q=read();\n    for(int i=1;i<=m;i++)\n        X[i]=read(),Y[i]=read(),W[i]=read();\n    build(1,1,m);\n    for(int i=1,l,r,x,y;i<=q;i++){\n        l=read(),r=read();\n        t=query(1,1,m,l,r);\n        for(ia=t.begin();ia!=t.end();ia++) f[X[*ia]]=X[*ia],f[Y[*ia]]=Y[*ia];\n        for(ia=t.begin();ia!=t.end();ia++){\n            x=X[*ia],y=Y[*ia];\n            if(find(x)==find(y)) break;\n            f[find(x)]=find(y);\n        }\n        if(ia==t.end()) puts(\"-1\");\n        else printf(\"%d\\n\",W[*ia]);\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1605864370,
        "uid": 272143,
        "name": "\u662f\u4e2a\u6c49\u5b50",
        "ccfLevel": 4,
        "title": "CF687D Dividing Kingdom II"
    },
    {
        "content": "\u6709 $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\uff0c\u8981\u6c42\u8fdb\u884c\u4e00\u4e9b\u8be2\u95ee\uff0c\u6bcf\u7ec4\u8be2\u95ee\u4f1a\u7ed9\u51fa\u533a\u95f4 $[l,r]$\uff0c\u8981\u6c42\u4fdd\u7559\u7f16\u53f7\u5728\u8be5\u533a\u95f4\u5185\u7684\u8fb9\uff0c\u4ee5\u53ca\u4ed6\u4eec\u6240\u8fde\u7684\u7aef\u70b9\u3002\u63a5\u4e0b\u6765\u4f60\u8981\u628a\u8fd9\u4e9b\u7aef\u70b9\u5212\u5206\u6210\u4e24\u4e2a\u533a\u57df\uff0c\u533a\u57df\u4e2d\u5b58\u5728\u4e00\u6761\u5b8c\u6574\u7684\u8fb9\uff08\u4e24\u4e2a\u7aef\u70b9\u90fd\u5728\u8fd9\u4e2a\u533a\u57df\u5185\uff09\u7684\u8fb9\u6743\u6700\u5927\u503c\u4e3a\u8fd9\u4e2a\u96c6\u5408\u7684\u5f97\u5206\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u8be2\u95ee\u6c42\u5f97\u5206\u6700\u5c0f\u503c\u3002\n\n\u4e0d\u8fc7\uff0c\u5982\u679c\u5212\u5206\u4f7f\u5f97\u4e0d\u5b58\u5728\u5b8c\u6574\u8fb9\uff0c\u90a3\u5c31\u8f93\u51fa `-1`\u3002\n\n\u7531\u4e8e\u65f6\u9650\u5145\u88d5\uff0c\u8003\u8651\u8d2a\u5fc3\u3002\u4ece\u5927\u5230\u5c0f\u53bb\u679a\u4e3e\u8fb9\uff0c\u8fd9\u4e9b\u8fb9\u5f53\u7136\u8981\u5c3d\u53ef\u80fd\u628a\u4ed6\u4eec\u7684\u70b9\u5206\u5230\u4e24\u4e2a\u4e0d\u540c\u7684\u96c6\u5408\u4e2d\uff0c\u6b63\u786e\u6027\u80fd\u4fdd\u8bc1\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u5b9e\u73b0\u3002\u5148\u8fb9\u6392\u5e8f\u597d\u4e4b\u540e\u8df3\u8fc7\u4e0d\u5728\u533a\u95f4\u5185\u7684\u8fb9\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u8fdb\u884c\u5224\u65ad\u3002\u5982\u679c\u4e24\u4e2a\u7aef\u70b9\u5df2\u7ecf\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u5185\uff0c\u90a3\u5f53\u524d\u503c\u5c31\u662f\u6700\u5927\u503c\uff08\u56e0\u4e3a\u5df2\u7ecf\u6392\u8fc7\u5e8f\u4e86\uff09\u90a3\u4e48\u5c31\u53ef\u4ee5\u7ed3\u675f\u5faa\u73af\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u8003\u8651\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528\u79cd\u7c7b\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u7136\u540e\u5c31\u662f $res$ \u503c\u8bbe\u4e3a $-1$\uff0c\u8bb0\u5f97\u6bcf\u6b21\u8be2\u95ee\u8981\u91cd\u65b0\u521d\u59cb\u5316\u3002\u6700\u540e\u6765\u7b97\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c\u4e00\u5171 $q$ \u6b21\u5faa\u73af\u6bcf\u6b21\u8981\u904d\u5386\u6240\u6709\u7684 $m$ \u6761\u8fb9\uff0c\u7136\u540e\u6709\u4e00\u4e2a $\\log n$ \u7ea7\u522b\u7684\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e1c\u897f\u7684\u590d\u6742\u5ea6\u9ad8\u7684\u79bb\u8c31\u3002\u7136\u800c\u8dd1\u4e0d\u6ee1\uff0c\u800c\u4e14\u6570\u636e\u6c34\uff0c\u6240\u4ee5\u80fd\u8fc7\uff1b\u73b0\u5728\u770b\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define N 1005\nusing namespace std;\nstruct edge{int u,v,w,id;}e[N*N];\nint n,m,q,fa[N<<1];\nbool cmp(edge x,edge y){return x.w>y.w;}\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nvoid merge(int x,int y){\n\tint fx=find(x),fy=find(y);\n\tif(fx!=fy)fa[fx]=fy;\n}void init(){\n\tfor(int i=1;i<=(n<<1);i++)fa[i]=i;\n}signed main(){\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,w;e[i].id=i;\n\t\tscanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n\t}sort(e+1,e+1+m,cmp);\n\tfor(int i=1;i<=q;i++){\n\t\tint res=-1,l,r;init();\n\t\tscanf(\"%d%d\",&l,&r);\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tint u=e[i].u,v=e[i].v,w=e[i].w,id=e[i].id;\n\t\t\tif(id<l||id>r)continue;\n\t\t\tif(find(u)==find(v)){res=w;break;}\n\t\t\telse merge(u,v+n),merge(u+n,v);\n\t\t}printf(\"%d\\n\",res);\n\t}return 0;\n}\n```",
        "postTime": 1636287285,
        "uid": 212283,
        "name": "Aw\u987f\u987f",
        "ccfLevel": 5,
        "title": "\u3010\u9898\u89e3\u3011CF687D Dividing Kingdom II"
    },
    {
        "content": "# $\\mathtt{CF 687D}$\n\n## $\\mathcal{Description}$\n\n[\u535a\u5ba2](https://www.cnblogs.com/wjnclln/p/11748895.html)\n\n\u7ed9\u4f60\u4e00\u4e2a\u56fe\u6709 $n$ \u4e2a\u70b9 $(1 \\leq n \\leq 10^3)$ \u548c $m$ \u6761\u8fb9 $(1  \\leq m \\leq \\dfrac{n*(n-1)}{2})$ \uff0c\u8fb9\u6709\u8fb9\u6743\u3002\u7ed9\u5b9a $q$ \u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a $l$ \u548c $r$\uff0c\u7528\u7f16\u53f7\u4e3a $[l,r]$ \u53bb\u6784\u6210\u56fe\uff0c\u4f7f\u5f97\u4e24\u8fb9\u7aef\u70b9\u5728\u540c\u4e00\u4e2a\u90e8\u5206\u7684\u8fb9\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002\n\n## $\\mathcal{Solution}$\n\n\u770b\u5230\u9898\u7b2c\u4e00\u53cd\u5e94\u662f\u7ebf\u6bb5\u6811\uff0c\u770b\u770b\u6807\u7b7e\u597d\u50cf\u4e0d\u592a\u5bf9\u52b2\u7684\u6837\u5b50\uff0c\u8003\u8651\u7b80\u5355\u70b9\u7684\u505a\u6cd5\u3002\n\n\u8003\u8651\u5982\u679c\u6784\u6210\u7684\u56fe\u662f\u4e8c\u5206\u56fe\u7684\u8bdd\uff0c\u4e0d\u53ef\u80fd\u5b58\u5728\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5728\u540c\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f97\u51fa\u6784\u6210\u7684\u56fe\u4e00\u5b9a\u4e0d\u662f\u4e8c\u5206\u56fe\uff0c\u4e8e\u662f\u9898\u76ee\u53ef\u4ee5\u8f6c\u5316\u6210\u627e\u5947\u73af\u7684\u6700\u5c0f\u53d8\u7684\u6700\u5927\u503c\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u8fb9\u6309\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4ece\u6700\u5927\u7684\u5f00\u59cb\uff0c\u4e0d\u65ad\u52a0\u8fb9\uff0c\u5982\u679c\u5f53\u524d\u6784\u6210\u7684\u56fe\u8fd8\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u5219\u7ee7\u7eed\u52a0\u8fb9\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u662f\u6700\u540e\u6211\u4eec\u8981\u6784\u6210\u7684\u56fe\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u7528\u5e26\u6743\u4e8c\u5206\u56fe\u6765\u505a\u3002\n\n## $\\mathcal{Code}$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N = 5e5 + 10;\n\nint n, m, q;\nint fa[N], fa1[N];\n\nstruct Node {\n\tint u, v, w, id;\n} edge[N << 1];\n\ninline int read() {\n\tint x = 0, k = 1; char c = getchar();\n\tfor (; c < 48 || c > 57; c = getchar()) k ^= (c == '-');\n\tfor (; c >= 48 && c <= 57; c = getchar()) x = x * 10 + (c ^ 48);\n\treturn k ? x : -x;\n}\n\ninline bool cmp(Node x, Node y) {\t\n\treturn x.w > y.w;\n}\n\nint find(int x) {\n\treturn (fa[x] == x) ? x : (fa[x] = find(fa[x]));\n}\n\ninline void match(int x, int y) {\n\tint fx = find(x), fy = find(y);\n\tif (fx == fy)\n\t\treturn;\n\tif (fa1[fx] < fa1[fy]) swap(fx, fy);\n\tfa[fy] = fa[fx];\n\tif (fa1[fx] == fa1[fy])\n\t\tfa1[fx]++;\n\treturn;\n}\n\ninline int query(int l, int r) {\n\tfor (int i = 1; i <= m; i++) {\n\t\tif (edge[i].id < l || edge[i].id > r)\n\t\t\tcontinue;\n\t\tif (find(edge[i].u) != find(edge[i].v)) {\n\t\t\tmatch(edge[i].u, edge[i].v + n);\n\t\t\tmatch(edge[i].u + n, edge[i].v);\n\t\t}\n\t\telse \n\t\t\treturn edge[i].w;\n\t}\n\treturn -1;\n}\n\nint main() {\n    n = read(), m = read(), q = read();\n    for (int i = 1; i <= m; i++)\n\t\tedge[i].u = read(), edge[i].v = read(), edge[i].w = read(), edge[i].id = i;\n\tstd::sort(edge + 1, edge + 1 + m, cmp);\n\tfor (int i = 1; i <= 2 * n; i++)\n\t\tfa[i] = i, fa1[i] = 0;\n\tfor (int l = 0, r = 0, ans = -1; q--; ) {\n\t\tl = read(), r = read();\n\t\tprintf(\"%d\\n\", query(l, r));\n\t\tfor (int i = 1; i <= 2 * n; i++)\n\t\t\tfa[i] = i, fa1[i] = 0;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1572179268,
        "uid": 13746,
        "name": "Trimsteanima",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF687D \u3010Dividing Kingdom II\u3011"
    },
    {
        "content": "\u628a\u8fb9\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u8dd1\u66b4\u529b\uff0c\u8d2a\u5fc3\u5730\u628a\u8fb9\u4ece\u5927\u5230\u5c0f\u8bbf\u95ee\uff0c\u5982\u679c\u5f53\u524d\u8fb9\u6ca1\u6709\u51b2\u7a81\uff0c\u90a3\u4e48\u5c31\u7528\u5e76\u67e5\u96c6\u8fde\u8fb9\uff0c\u5426\u5219\u76f4\u63a5\u8f93\u51fa\u3002\n\n\u5e76\u67e5\u96c6\u8fde\u8fb9\u65f6\u6ce8\u610f\u8981\u8fde\u5230\u5bf9\u79f0\u70b9\u53bb\u3002\uff08a -> b + n\uff09\n\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 10050;\nint pa[maxn];\nstruct Point { int u,v,dis,id; }a[maxn*100];\nbool cmp(Point x,Point y) { return x.dis > y.dis; }\nint find(int x) { if(pa[x]==x) return x; return pa[x] = find(pa[x]); }\nvoid unite(int x,int y) {\n\tx = find(x), y = find(y);\n\tpa[x] = y;\n}\n\nint main() {\n\tint n, m, q;\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tfor(int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d%d\",&a[i].u,&a[i].v,&a[i].dis);\n\t\ta[i].id = i;\n\t}\n\tsort(a+1, a+1+m, cmp);\n\n\twhile(q--) {\n\t\tint l, r; scanf(\"%d%d\",&l,&r);\n\t\tint ans=-1;\n\t\tfor(int i=1;i<=2*n;i++) pa[i]=i;\n\t\tfor(int i=1;i<=m;i++) {\n\t\t\tif(!(a[i].id<=r && a[i].id>=l)) continue;\n\t\t\tif(find(a[i].u)==find(a[i].v)) {\n\t\t\t\tans = a[i].dis;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tunite(a[i].u, a[i].v+n);\n\t\t\t\tunite(a[i].u+n, a[i].v);\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n```",
        "postTime": 1539865465,
        "uid": 36281,
        "name": "noble_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF687D \u3010Dividing Kingdom II\u3011"
    }
]