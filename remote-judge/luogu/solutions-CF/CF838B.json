[
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a\u6709\u5411\u56fe\uff0c$n$\u4e2a\u8282\u70b9\u548c$2n-2$\u4e2a\u8fb9\u3002\u70b9\u7684\u7f16\u53f7\u4e3a$1\\sim n$\uff0c\u8fb9\u7684\u7f16\u53f7\u4e3a$1\\sim2n-2$\uff0c\u4e14\u6bcf\u6761\u8fb9\u90fd\u6709\u6743\u503c\u3002\n\n\u8fd9\u4e2a\u56fe\u7684\u8fb9\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\u3002\n\n$1$\u7c7b\u8fb9(\u7f16\u53f7$1\\sim n-1$)\u5f62\u6210\u4e00\u4e2a\u4ee5$1$\u4e3a\u6839\u7684\u751f\u6210\u6811\uff0c\u8fd9\u4e9b\u8fb9\u7684\u65b9\u5411\u4e3a$1$\u5411\u5916\u5ef6\u4f38\u7684\u65b9\u5411(\u5982$1$->$2$,$1$->$3$,$2$->$4$\u7b49\u7b49)\u3002\n\n$2$\u7c7b\u8fb9(\u7f16\u53f7$n\\sim 2n-2$)\u4ece\u8282\u70b9$i$($i\\in[2,n]$)\u8fde\u5411\u8282\u70b9$1$\u3002\n\n\u6709$Q$\u4e2a\u8be2\u95ee\u3002\u8be2\u95ee\u5206\u4e3a\u4e24\u79cd\uff1a\n\n$1\\ i\\ w:$\u5c06\u7b2c$i$\u6761\u8fb9\u7684\u8fb9\u6743\u6539\u4e3a$w$\n\n$2\\ u\\ v:$\u8f93\u51fa\u70b9$u$\u5230$v$\u4e4b\u95f4\u7684**\u6700\u77ed\u8def**\u5927\u5c0f\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u4e24\u4e2a\u6570$n,Q(2\\leq n,Q\\leq 200000 )$\n\n\u63a5\u4e0b\u6765$2n-2$\u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6570\u8868\u793a\u8d77\u70b9\uff0c\n\n\u524d$n-1$\u4e2a\u6570\u4e3a$1$\u7c7b\u8fb9\u3002\n\n\u540e$n-1$\u4e2a\u6570\u4e3a$2$\u7c7b\u8fb9\u3002\n\n\u6700\u540e$Q$\u884c\u8868\u793a\u8be2\u95ee\u3002\n\n-------------------------------------\n\n\u4e0d\u7b97\u7279\u522b\u96be\u7684\u4e00\u9053\u9898\uff0c\u4f46\u662f\u6ca1\u6709\u7ffb\u8bd1\u770b\u9519\u4e86\u9898\u76ee\u3002\u3002\u3002\n\n\u6c42\u7684\u662f**\u6700\u77ed\u8def**\u957f\u5ea6\uff01\uff01\uff01\u56fe\u8bba\u91cc\u4e24\u70b9\u7684\u6700\u77ed\u8def\uff01\uff01\uff01\n\n\u6211\u4eec\u6765\u5206\u6790\u8fd9\u4e2a\u95ee\u9898\uff1a\n\n\u90a3\u4e48\u5982\u679c$v$\u662f$u$\u7684\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa\u4e24\u70b9\u7684\u6811\u4e0a\u8ddd\u79bb\u3002\n\n\u5426\u5219,\u7b54\u6848\u7b49\u4e8e\n\n$$dis[v]+min\\{b[x]+(dis[x]-dis[u])\\}$$\n\n$dis[i]$\u662f$i$\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\n\n$b[i]$\u662f\u8d77\u70b9\u4e3a$i$\u7684\u4e8c\u7c7b\u8fb9\u7684\u957f\u5ea6 \n\n\u600e\u4e48\u6c42\u8fd9\u4e2a$min$\u5462\uff1f\u6211\u4eec\u8f6c\u5316\u5f0f\u5b50\uff1a\n\n$$=dis[v]+min\\{b[x]+dis[x]\\}-dis[u]$$\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811(+$\\texttt{dfs}$\u5e8f)\u6c42\u5b50\u6811\u6700\u503c\u4e86\u3002\n\n\u5bf9\u4e8e\u8fb9\u6743\u4fee\u6539\uff0c\u8fd9\u5f71\u54cd\u5230\u4e86\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u7684$dis$\u6570\u7ec4\u503c\u3002\u56e0\u6b64\u76f4\u63a5\u5b50\u6811\u52a0\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define int long long\n#define mid ((lb+rb)>>1)\nusing namespace std;\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n\twhile (isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nint n,m,tot,head[1000001],sz[1000001];\nint a[1000001],tcnt;//a\u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e2a\u8282\u70b9\u8fde\u63a5\u7236\u8282\u70b9\u7684\u8fb9\u6743\u3002\nint pre[1000001],b[1000001],dis[1000001],tpos[1000001];\nstruct edge{\n\tint to,nxt,dis;\n}g[1000001];\ninline void made(int from,int to,int dis){\n\tg[++tot].to=to;g[tot].nxt=head[from];head[from]=tot;\n\tg[tot].dis=dis;\n}\nvoid dfs(int u,int faa){\n\tsz[u]=1;tpos[u]=++tcnt;pre[tcnt]=u;\n\tfor (int i=head[u];i;i=g[i].nxt){\n\t\tint v=g[i].to;\n\t\tif (v==faa) continue;\n\t\tdis[v]=dis[u]+g[i].dis;a[v]=g[i].dis;\n\t\tdfs(v,u);sz[u]+=sz[v];\n\t}\n}\nint seg[1000001],tag[1000001];\ninline void pushup(int rt){\n\tseg[rt]=min(seg[rt<<1],seg[rt<<1|1]);\n}\nvoid build(int rt,int lb,int rb){\n\tif (lb==rb) return (void)(seg[rt]=b[pre[lb]]+dis[pre[lb]]);\n\tbuild(rt<<1|1,mid+1,rb);build(rt<<1,lb,mid);\n\tpushup(rt);\n}\ninline void pushdown(int rt,int lb,int rb){\n\tif (tag[rt]){\n\t\tint ls=rt<<1,rs=rt<<1|1;\n\t\ttag[ls]+=tag[rt];tag[rs]+=tag[rt];\n\t\tseg[ls]+=tag[rt];seg[rs]+=tag[rt];\n\t\ttag[rt]=0;\n\t}\n}\nint querymin(int rt,int lb,int rb,int l,int r){\n\tif (lb>r||rb<l) return 999999999;\n\tif (lb>=l&&rb<=r) return seg[rt];\n\tpushdown(rt,lb,rb);\n\treturn min(querymin(rt<<1,lb,mid,l,r),querymin(rt<<1|1,mid+1,rb,l,r));\n}\nvoid update(int rt,int lb,int rb,int l,int r,int w){\n\tif (lb>r||rb<l) return;\n\tif (lb>=l&&rb<=r) return (void)(seg[rt]+=w,tag[rt]+=w);\n\tpushdown(rt,lb,rb);\n\tupdate(rt<<1,lb,mid,l,r,w);update(rt<<1|1,mid+1,rb,l,r,w);\n\tpushup(rt);\n}\ninline int Get(int x){//\u5355\u70b9\u6c42\u503c\uff0c\u6ce8\u610f\u8fd9\u4e2a\u662fdis[x]+b[x]\n\treturn querymin(1,1,n,tpos[x],tpos[x]);\n}\nint e[1000001];\nsigned main(){\n\tn=read(),m=read();\n\tfor (int i=1;i<n;i++){\n\t\tint x=read(),y=read(),w=read();\n\t\tmade(x,y,w);\n\t}\n\tfor (int i=n;i<=2*n-2;i++){\n\t\tint x=read(),y=read(),w=read();\n\t\tb[x]=w;e[i]=x;\n\t}\n\tdfs(1,0);build(1,1,n);\n\twhile (m--){\n\t\tint opt=read();\n\t\tif (opt==1){\n\t\t\tint i=read(),w=read();\n\t\t\tif (i>=n){\n\t\t\t\tint v=e[i];\n\t\t\t\tupdate(1,1,n,tpos[v],tpos[v],w-b[v]);\n\t\t\t\tb[v]=w;\n\t\t\t}else{\n\t\t\t\tint v=g[i].to;\n\t\t\t\tupdate(1,1,n,tpos[v],tpos[v]+sz[v]-1,w-a[v]);\n\t\t\t\ta[v]=w;\n\t\t\t}\n\t\t}else{\n\t\t\tint u=read(),v=read();\n\t\t\tif (tpos[u]<=tpos[v]&&tpos[v]<=tpos[u]+sz[u]-1){\n\t\t\t\tprintf(\"%lld\\n\",Get(v)-b[v]-Get(u)+b[u]);continue;\n\t\t\t}\n\t\t\tint Ans=0;\n\t\t\tAns=querymin(1,1,n,tpos[u],tpos[u]+sz[u]-1)-(Get(u)-b[u]);\n\t\t\tAns+=Get(v)-b[v];\t\t\n\t\t\tprintf(\"%lld\\n\",Ans);\t\n\t\t}\n\t}\n\treturn 0;\n} \n//\u4e0b\u9762\u5949\u4e0a\u4e00\u7ec4hack\u6570\u636e\n/*\n4 7\n1 2 2\n2 3 2\n3 4 1\n2 1 1\n3 1 1\n4 1 2\n\n1 1 10\n2 2 1\n2 1 2\n2 1 3\n2 3 1\n2 2 3\n2 3 2\n*/\n```\n",
        "postTime": 1561467454,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF838B \u3010Diverging Directions\u3011"
    },
    {
        "content": "### CF838B \u9898\u89e3\n\n\u6211\u4eec\u5c06\u56fe\u4e2d\u7684**\u6709\u5411\u8fb9**\u5206\u4e3a\u5982\u4e0b\u4e24\u79cd\uff1a\n\n1. \u6811\u8fb9\uff1a$ (u,v) $ \u5728\u56fe\u4e2d\u7684\u4e00\u68f5\u4ee5\u4e00\u53f7\u8282\u70b9\u4e3a\u6839\u7684\u751f\u6210\u6811\u4e0a\uff0c\u4e14 $v$ \u4e00\u5b9a\u5728 $u$ \u7684\u5b50\u6811\u5185\u3002\u8fd9\u4e9b\u8fb9\u7684\u7f16\u53f7\u4e3a $ 1 $ \u81f3 $ n-1 $\n2. \u56fe\u8fb9\uff1a\u5f62\u5982 $ (u,1) $ \u7684\u8fb9\u3002\u7f16\u53f7\u4e3a $n$ \u81f3 $2n-2$\n\n\u5904\u7406\u8be2\u95ee\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u56de\u7b54\u4ece $u$ \u5230 $v$ \u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u7531\u4e8e\u56fe\u4e2d\u7684\u662f\u6709\u5411\u8fb9\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8ddd\u79bb\u5e76\u4e0d\u4e0e $v$ \u5230 $u$ \u7684\u8ddd\u79bb\u76f8\u540c\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u70b9 $x$\uff0c\u6211\u4eec\u8bbe $dtree_x$ \u4e3a\u8d70\u6811\u8fb9\u4ece $x$ \u5230 $1$ \u7684**\u552f\u4e00\u8ddd\u79bb**\uff1b\u8bbe $dgraph_x$ \u4e3a\u8d70\u56fe\u8fb9\u4ece $x$ \u5230 $1$ \u7684**\u552f\u4e00\u8ddd\u79bb**\u3002\n\n\u73b0\u5728\u6211\u4eec\u5206\u522b\u8003\u8651\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n0. **\u82e5 $ u=v $\uff1a**\n\n   \u6700\u77ed\u8ddd\u79bb\u663e\u7136\u4e3a $0$\u3002\n\n1. **\u82e5 $v$ \u5728 $u$ \u7684\u5b50\u6811\u5185**\uff1a\n\n   \u663e\u7136\uff0c\u8fd9\u4e2a\u6700\u77ed\u8ddd\u79bb\u662f\u6811\u8fb9\u4e0a $u$ \u8d70\u5230 $v$ \u7684\u8ddd\u79bb\u3002\n\n2. **\u82e5 $v$ \u4e0d\u5728 $u$ \u7684\u5b50\u6811\u5185**\uff1a\n\n   \u6211\u4eec\u5e94\u8be5\u660e\u767d\uff0c\u7531\u4e8e\u56fe\u4e2d\u7684\u8fb9\u662f\u6709\u5411\u8fb9\uff0c\u56e0\u6b64\u4ece $u$ \u8d70\u5230 $v$ \u662f\u4e00\u5b9a\u8981\u5148\u4ece $u$ \u8d70\u56de\u5230 $1$\uff0c\u518d\u4ece $1$ \u8d70\u6811\u8fb9\u5230\u8fbe $v$\u3002\n\n   \u9996\u5148\u6211\u4eec\u80fd\u5f88\u5bb9\u6613\u5730\u5f97\u51fa\uff0c\u901a\u8fc7\u56fe\u8fb9 $ (u,1) $ \u8d70\u5230 $1$\uff0c\u518d\u4ece $1$ \u8d70\u6811\u8fb9\u5230\u8fbe $v$ \u662f\u4e00\u6761\u5408\u6cd5\u8def\u5f84\u3002\n\n   \u90a3\u4e48\u5b83\u662f\u4e0d\u662f\u6700\u77ed\u8def\u5f84\u5462\uff1f\u5176\u5b9e\u4e0d\u4e00\u5b9a\u3002\n\n   \u5bf9\u4e8e\u4ee5 $u$ \u4e3a\u6839\u7684\u5b57\u6570\u5185\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9 $k$\uff0c\u5b58\u5728\u8fd9\u6837\u7684\u8def\u5f84\uff1a\u5148\u8d70\u6811\u8fb9\u4ece $u$ \u5230\u8fbe $k$\uff0c\u518d\u4ece $k$ \u8d70\u56fe\u8fb9\u5230\u8fbe $1$\u3002\u8fd9\u4e2a\u8ddd\u79bb\u53ef\u80fd\u662f\u6bd4\u6211\u4eec\u4e0a\u9762\u8ba8\u8bba\u7684\u8ddd\u79bb\u77ed\u7684\u3002\u9898\u76ee\u4e2d\u4fdd\u8bc1\u4e86\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u6761\u56fe\u8fb9\uff0c\u56e0\u6b64\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u79cd\u8def\u5f84\u4e00\u5b9a\u5408\u6cd5\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u5982\u4f55\u6c42\u5f97\u6700\u77ed\u8def\u5f84\u3002\n\n**\u7b2c 0 \u79cd\u60c5\u51b5**\uff0c\u663e\u7136\u3002\n\n**\u7b2c 1 \u79cd\u60c5\u51b5**\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8bfb\u5b8c\u524d $n-1$ \u6761\u8fb9\u540e\u9a6c\u4e0a\u5bf9\u8fd9\u68f5\u6811\u8fdb\u884c $\\text{dfs}$\uff0c\u8ba1\u7b97\u51fa\u6bcf\u4e00\u7684\u8282\u70b9\u76f8\u5bf9\u4e8e\u6839\u8282\u70b9 $1$ \u7684\u6df1\u5ea6\u3001\u8ddd\u79bb\u3001\u4ece\u5c5e\u5173\u7cfb\u7b49\u4fe1\u606f\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 $\\text{LCA}(u,v)=u$ \u6765\u5224\u65ad $v$ \u662f\u5426\u5728 $u$ \u7684\u5b50\u6811\u4e2d\u3002\u6700\u77ed\u8def\u5f84 $dmin=dtree_v-dtree_u$\u3002\n\n**\u7b2c 2 \u79cd\u60c5\u51b5**\uff0c\u5bf9\u4e8e\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a**\u6700\u5c0f\u503c**\uff0c\u4e3a $ \\{dtree_x+dgrap_x\\}_{min}, x\\in subtree_u $\u3002\u8fd9\u4e2a\u6700\u5c0f\u503c\u51cf\u53bb $dtree_u$ \u518d\u52a0\u4e0a $dgraph_v$ \u5373\u4e3a\u6240\u6c42\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u5982\u4f55\u5bf9\u8fb9\u8fdb\u884c\u4fee\u6539\u3002\n\n\u5f53\u4e00\u6761\u8fb9 $ (u,v) $ \u7684\u6743\u503c\u88ab\u4fee\u6539\u65f6\uff0c\u82e5 $v\\neq 1$\uff0c\u5219 $ v $ \u53ca $ v $ \u7684\u5b50\u6811\u5185\u7684\u8282\u70b9\u8d70\u6811\u8fb9\u5230\u8fbe $1$ \u7684\u8ddd\u79bb\u90fd\u8981\u6539\u53d8\uff1b\u82e5 $ v=1 $\uff0c\u5219\u53ea\u6709\u8282\u70b9 $u$ \u8d70\u56fe\u8fb9\u5230\u8fbe $1$ \u7684\u8ddd\u79bb\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u4f46\u662f\uff0c\u5bf9\u6570\u636e\u7ed3\u6784\u5f15\u5165 \u201d\u5b50\u6811\u4fee\u6539\u201c \u8f83\u4e3a\u9ebb\u70e6\u3002\n\n\u6211\u4eec\u6ce8\u610f\u5230\u4e00\u79cd\u6027\u8d28\uff1a\u5728\u4e00\u68f5\u6811\u7684\u4efb\u610f\u4e00\u68f5\u5b50\u6811\u4e2d\uff0c\u5b50\u6811\u5185\u8282\u70b9\u7684 $\\text{dfs}$ \u5e8f\u662f\u8fde\u7eed\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4fbf\u5c06 \u201c\u5b50\u6811\u4fee\u6539\u201d \u8f6c\u5316\u4e3a\u4e86 \u201c\u533a\u95f4\u4fee\u6539\u201d\u3002\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u8bbe $ dfn_x $ \u4e3a\u8282\u70b9 $x$ \u7684 $\\text{dfs}$ \u5e8f\uff1b$ mx_x $ \u4e3a\u8282\u70b9 $x$ \u7684\u5b50\u6811\u7684\u6700\u5927 $\\text{dfs}$ \u5e8f\u3002\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u6811\u5f62 $\\text{DP}$\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5728\u56de\u6eaf\u65f6\u8bb0\u5f55\u5f53\u524d\u7684 $idx\\_dfn$\u3002\u8bbe\u7b2c $i$ \u6761\u8fb9\u8d77\u70b9\u4e3a $a_i$\uff0c\u7ec8\u70b9\u4e3a $b_i$\uff0c\u8fb9\u6743\u4e3a $c_i$\u3002\n\n\u4f9d\u7136\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n1. \u82e5\u88ab\u4fee\u6539\u7684\u662f\u56fe\u8fb9\uff0c\u53ea\u9700\u8981\u5bf9\u8282\u70b9 $x$\uff0c\u5373\u533a\u95f4 $[\\text{dfn}_x, \\text{dfn}_x]$ \u8fdb\u884c\u4fee\u6539\u3002\n2. \u82e5\u88ab\u4fee\u6539\u7684\u662f\u6811\u8fb9\uff0c\u5219\u9700\u8981\u5bf9\u533a\u95f4 $[\\text{dfn}_x, \\text{mx}_x]$ \u8fdb\u884c\u4fee\u6539\u3002\n\n\u6211\u4eec\u5c06\u4fee\u6539\u8fb9\u6743\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u533a\u95f4\u52a0\uff0c\u5219\u6bcf\u6b21\u589e\u52a0\u7684\u503c\u4e3a\u4fee\u6539\u540e\u7684\u8fb9\u6743 $w'$ \u51cf\u53bb\u8be5\u8fb9\u7684\u539f\u8fb9\u6743 $w$\uff0c\u5373 $w'-w$\u3002\u5728\u4fee\u6539\u90a3\u6761\u8fb9\u8fc7\u540e\uff0c\u6211\u4eec\u66f4\u65b0\u8fd9\u6761\u8fb9\u7684\u6743\u503c\uff0c\u65b9\u4fbf\u4e0b\u4e00\u6b21\u7684\u66f4\u65b0\u64cd\u4f5c\u3002\n\n\u5f53\u7136\uff0c\u6709\u4e86 $\\text{dfs}$ \u5e8f\uff0c\u5c31\u6ca1\u5fc5\u8981\u7528 $\\text{LCA}$ \u5224\u65ad $v$ \u662f\u5426\u5728 $u$ \u7684\u5b50\u6811\u4e2d\u4e86\u3002\u53ea\u9700\u8981\u5224\u65ad $ \\text{dfn}_v\\in [\\text{dfn}_u, \\text{mx}_u] $ \u5373\u53ef\u3002\n\n**\u5b8c\u6574\u4ee3\u7801\uff1a**\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#define ll long long\nusing namespace std;\n\nconst int N=2e5+1;\nconst ll INF=1e18;\nint n,Q;\nint idx,dfn[N],mx[N],to[N];\nint a[N<<1],b[N<<1];\nll c[N<<1],dtree[N],dgraph[N];\nvector < pair <int,ll> > E[N];\nstruct lwh\n{\n\tint ls,rs;\n\tll w,tag;\n}sgt[N<<2];\n\ninline int rint()\n{\n\tint x=0,f=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48); ch=getchar();}\n\treturn x*f;\n}\ninline ll rll()\n{\n\tll x=0,f=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48); ch=getchar();}\n\treturn x*f;\n}\n\ninline void dfs(int x,int fa)\n{\n\tdfn[x]=++idx;\n\tto[dfn[x]]=x;\n\tint lim=E[x].size();\n\tfor(int i=0;i<lim;i++)\n\t{\n\t\tint y=E[x][i].first;\n\t\tif(y==fa) continue;\n\t\tll z=E[x][i].second;\n\t\tdtree[y]=dtree[x]+z;\n\t\tdfs(y,x);\n\t}\n\tmx[x]=idx;\n}\n\ninline void pushup(int p){sgt[p].w=min(sgt[p<<1].w,sgt[p<<1|1].w);}\ninline void pushdown(int p)\n{\n\tif(!sgt[p].tag) return;\n\tsgt[p<<1].w+=sgt[p].tag,sgt[p<<1].tag+=sgt[p].tag;\n\tsgt[p<<1|1].w+=sgt[p].tag,sgt[p<<1|1].tag+=sgt[p].tag;\n\tsgt[p].tag=0;\n}\n\ninline void Build(int p,int l,int r)\n{\n\tsgt[p].ls=l,sgt[p].rs=r;\n\tif(l==r)\n\t{\n\t\tint pos=to[l];\n\t\tsgt[p].w=dtree[pos]+dgraph[pos];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild(p<<1,l,mid);\n\tBuild(p<<1|1,mid+1,r);\n\tpushup(p);\n}\n\ninline void update(int p,int l,int r,ll k)\n{\n\tif(l>sgt[p].rs||r<sgt[p].ls)\n\t\treturn;\n\tif(l<=sgt[p].ls&&r>=sgt[p].rs)\n\t{\n\t\tsgt[p].w+=k;\n\t\tsgt[p].tag+=k;\n\t\treturn;\n\t}\n\tpushdown(p);\n\tupdate(p<<1,l,r,k);\n\tupdate(p<<1|1,l,r,k);\n\tpushup(p);\n}\n\ninline ll query(int p,int l,int r)\n{\n\tif(l>sgt[p].rs||r<sgt[p].ls)\n\t\treturn INF;\n\tif(l<=sgt[p].ls&&r>=sgt[p].rs)\n\t\treturn sgt[p].w;\n\tpushdown(p);\n\tll lw=query(p<<1,l,r),rw=query(p<<1|1,l,r);\n\tpushup(p);\n\treturn min(lw,rw);\n}\n\ninline void prework_on_tree()\n{\n\tfor(int j=0,i=1;i<n;i++)\n\t{\n\t\tj++;\n\t\tint x=rint(),y=rint();\n\t\tll z=rll();\n\t\tE[x].push_back(make_pair(y,z));\n\t\ta[j]=x,b[j]=y,c[j]=z;\n\t}\n\tdfs(1,0);\n}\n\ninline void prework_on_graph()\n{\n\tfor(int j=n-1,i=1;i<n;i++)\n\t{\n\t\tj++;\n\t\tint x=rint(),y=rint();\n\t\tll z=rll();\n\t\ta[j]=x,b[j]=y,c[j]=z;\n\t\tdgraph[x]=z;\n\t}\n\tBuild(1,1,n);\n}\n\nint main()\n{\n\tn=rint(),Q=rint();\n\t\n\tprework_on_tree();\n\tprework_on_graph();\n\t\n\twhile(Q--)\n\t{\n\t\tint tmp=rint();\n\t\tif(tmp==1)\n\t\t{\n\t\t\tint id=rint();\n\t\t\tll k=rint();\n\t\t\tif(id<n)\n\t\t\t{\n\t\t\t\tupdate(1,dfn[b[id]],mx[b[id]],k-c[id]);\n\t\t\t\tc[id]=k;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tupdate(1,dfn[a[id]],dfn[a[id]],k-c[id]);\n\t\t\t\tc[id]=k;\n\t\t\t\tdgraph[a[id]]=k;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint u=rint(),v=rint();\n\t\t\tif(dfn[v]>=dfn[u]&&dfn[v]<=mx[u])\n\t\t\t{\n\t\t\t\tll du=query(1,dfn[u],dfn[u])-dgraph[u],dv=query(1,dfn[v],dfn[v])-dgraph[v];\n\t\t\t\tprintf(\"%lld\\n\",dv-du);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tll ans=query(1,dfn[u],mx[u]);\n\t\t\t\tll du=query(1,dfn[u],dfn[u])-dgraph[u],dv=query(1,dfn[v],dfn[v])-dgraph[v];\n\t\t\t\tans-=du,ans+=dv;\n\t\t\t\tprintf(\"%lld\\n\",ans);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```\n\n------------\n\n\u5224\u8bcd\uff1a\u6b64\u9898\u601d\u8def\u7b80\u5355\uff0c\u7d2b\u5c31\u7d2b\u5728\u8fd9\u7801\u91cf\uff01",
        "postTime": 1608339773,
        "uid": 177531,
        "name": "ZolaWatle",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF838B \u3010Diverging Directions\u3011"
    },
    {
        "content": "## \u9898\u89e3\uff1a\n\n### \u9898\u610f\uff1a\n\n\u7ed9\u51fa\u4e00\u4e2a  $n$ \u4e2a\u70b9\uff0c $2n-2$ \u6761\u8fb9\u7684\u5e26\u6743**\u6709\u5411**\u56fe\u3002\u8fb9\u5206\u4e3a\u4e24\u7c7b\uff1a\n\n1.\u524d $n-1$ \u6761\u8fb9\u6784\u6210\u4e00\u9897\u751f\u6210\u6811\uff0c\u4ee5 $1$ \u53f7\u70b9\u4e3a\u6839\uff0c\u7531\u7236\u4eb2\u8fde\u5411\u513f\u5b50\u3002\n\n2.\u540e $n-1$ \u6761\u8fb9\u7b2c$i$\u6761\u8fb9\u7531 $i+1$ \u53f7\u8282\u70b9\u8fde\u5411\u6839\u3002\n\n\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e3a\u5c06\u7b2c $i$ \u6761\u8fb9\u7684\u8fb9\u6743\u6539\u4e3a $w$ \u6216\u67e5\u8be2 $ u$ \u5230 $v$ \u7684\u6700\u77ed\u8def\u3002\n\n$1\u2264n,m\u22642\u00d710^5$\uff0c\u4efb\u610f\u65f6\u523b\u8fb9\u6743 $1\\leq w_i\u226410^6$\u3002\n\n### \u5206\u6790\uff1a\n\n\u4e0b\u6587\u7684\u76f4\u63a5\u8d70\u5230\u6307\u8d70\u6811\u4e0a\u6700\u77ed\u8def\u5f84\u3002\n\n\u6211\u4eec\u9996\u5148\u53d1\u73b0\u8fb9\u6743\u662f\u6b63\u7684\uff0c\u6240\u4ee5\u5982\u679c\u7ec8\u70b9\u5728\u8d77\u70b9\u7684\u5b50\u6811\u5185\uff0c\u5219\u5e94\u8be5**\u76f4\u63a5**\u8d70\u5230\u7ec8\u70b9\u3002\n\n\u7531\u4e8e\u6811\u8fb9\u662f\u5f80\u4e0b\u7684\uff0c\u6240\u4ee5\u5982\u679c\u4e0d\u76f4\u63a5\u8d70\u5230\u7ec8\u70b9\uff0c\u8981\u5f80\u6839\u7684\u65b9\u5411\u8d70\uff0c\u5c31\u5fc5\u5b9a\u4f1a\u7531\u4e00\u6761\u8fde\u5411\u6839\u7684\u8fb9\u56de\u5230\u6839\uff0c\u56de\u5230\u6839\u4e4b\u540e\u4e5f\u53ea\u80fd\u5411\u4e0b\u8d70\u5230\u7ec8\u70b9\uff0c\u663e\u7136\u8fd9\u6837\u4f1a\u518d\u6b21\u8d70\u5230\u8d77\u70b9\uff0c\u4e0d\u5982\u76f4\u63a5\u7531\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\u3002\n\n\u5982\u679c\u7ec8\u70b9\u4e0d\u5728\u8d77\u70b9\u7684\u5b50\u6811\u5185\uff0c\u5219\u9700\u8981\u5148\u56de\u5230\u6839\u518d**\u76f4\u63a5**\u8d70\u5230\u7ec8\u70b9\uff0c\u539f\u56e0\u540c\u4e0a\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u8d70\u6cd5\u662f\u56fa\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u5148\u5230\u6839\u5728\u8d70\u8fc7\u53bb\uff0c\u4f46\u56de\u5230\u6839\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u9009\u62e9\u8d77\u70b9\u5b50\u6811\u4e0b\u7684\u4efb\u610f\u4e00\u8282\u70b9\u56de\u5230\u6839\u3002\n\n\u6211\u4eec\u8003\u8651\u5e94\u8be5\u5982\u4f55\u8ba1\u7b97\u8fd9\u6837\u8d70\u7684\u4ee3\u4ef7\u3002\n\n### \u601d\u8def\uff1a\n\n\u8003\u8651\u6811\u4e0a\u6700\u77ed\u8def\u5f84\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u5148\u5904\u7406\u51fa\u6839\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u8ddd\u79bb $dep$ \uff0c$dis(u,v)=dep[u]+dep[v]-2 * dep[lca(u,v)]$\n\n\u7ef4\u62a4\u4e00\u4e2a$dep$\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6211\u4eec\u53d1\u73b0\u4e00\u6761\u6811\u8fb9\u7684\u4fee\u6539\u53ea\u4f1a\u5f71\u54cd\u5230\u5176\u7ec8\u70b9\u8282\u70b9\u7684\u6240\u6709\u5b50\u6811\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u539f\u5148\u6bcf\u6761\u6811\u8fb9\u7684\u6743\u503c\uff0c\u7528\u7ebf\u6bb5\u6811\u5b9e\u73b0\u533a\u95f4\u52a0\u64cd\u4f5c\u5373\u53ef\uff08\u4e00\u9897\u5b50\u6811\u7684 $dfs$ \u5e8f\u662f\u8fde\u7eed\u7684\uff0c\u7528\u4e00\u4e2a\u8282\u70b9\u7684 $dfs$ \u5e8f\u4ee3\u8868\u8be5\u8282\u70b9\u5373\u53ef\uff09\u3002\n\n\u4e3a\u4f55\u8981\u8bb0\u5f55\u539f\u5148\u7684\u6743\u503c\uff0c\u56e0\u4e3a\u5728\u7ebf\u6bb5\u6811\u91cc\u6211\u4eec\u5e76\u672a\u7ef4\u62a4\u539f\u5148\u7684\u503c\uff0c\u5e76\u4e14\u5176\u7ef4\u62a4\u7684\u503c\u4e0d\u4ec5\u4ec5\u7531\u8fd9\u4e2a\u5143\u7d20\u51b3\u5b9a\uff0c\u6240\u4ee5\u6211\u4eec\u5b9e\u73b0\u4e0d\u4e86\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\uff0c\u9700\u8981\u5c06\u533a\u95f4\u8d4b\u503c\u8f6c\u5316\u4e3a\u533a\u95f4\u52a0\u51cf\u3002\n\n\u6211\u4eec\u6210\u529f\u5b9e\u73b0\u4e86\u7ec8\u70b9\u5728\u8d77\u70b9\u7684\u5b50\u6811\u5185\u60c5\u51b5\u7684\u67e5\u8be2\uff0c\u65e0\u9700 $lca$\uff0c\u8d77\u70b9\u5c31\u662f$lca$  \u3002\n\n\u8003\u8651\u5982\u4f55\u8fdb\u884c\u7ec8\u70b9\u4e0d\u5728\u8d77\u70b9\u7684\u5b50\u6811\u5185\u60c5\u51b5\u7684\u67e5\u8be2\u3002\n\n\u7531\u4e0a\u9762\u7684\u5206\u6790\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u5206\u4e3a\u4e24\u6b65\uff0c\u4e00\u662f\u5230\u6839\uff0c\u4e8c\u662f\u7531\u6839\u5230\u5230\u7ec8\u70b9\u3002\n\n\u7531\u6839\u5230\u7ec8\u70b9\u7684\u8fc7\u7a0b\u548c\u7ec8\u70b9\u5728\u8d77\u70b9\u7684\u5b50\u6811\u5185\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u5230\u6839\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u6211\u4eec\u8bb0\u4e00\u4e2a\u8282\u70b9 $u$ \u76f4\u63a5\u56de\u5230\u6839\u7684\u4ee3\u4ef7\u662f $val[u]$\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8981\u5230\u6839\u5fc5\u7136\u4f1a\u5728\u8d77\u70b9 $u$ \u7684\u5b50\u6811\u4e2d\u627e\u4e00\u4e2a\u70b9\u56de\u5230\u6839\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u67e5\u8be2\u5b50\u6811\u5185\u6240\u6709 $v$ \u7684\u6700\u5c0f\u7684 $dis(u,v)+val[v]$\uff0c\u5316\u7b80\u4e00\u4e0b\u5c31\u662f$dep[u]-dep[v]+val[v]$\uff0c\u7531\u4e8e $u$ \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u67e5\u8be2\u5b50\u6811\u5185 $dep[v]+val[v]$ \u7684\u6700\u5c0f\u503c\uff0c\u540c\u6837\u7684\u65b9\u6cd5\u7ef4\u62a4\u3002\n\n\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u53e6\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u5185\uff1a\n\n`if(dfn[y]<dfn[x]+size[x]&&dfn[y]>=dfn[x])`\n\n$size$ \u662f\u5b50\u6811\u5927\u5c0f\uff0c$dfn$  \u662f$dfs$ \u5e8f\u3002\n\n### \u5b9e\u73b0\uff1a\n\n\u6570\u636e\u7ed3\u6784\u9898\u5f80\u5f80\u9700\u8981\u4e00\u4e2a\u4f18\u79c0\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u6211\u4eec\u9009\u62e9\u76f4\u63a5\u7ef4\u62a4 $dep[v]+val[v]$ ,\u53c8\u56e0\u4e3a$val[v]$\u662f\u76f4\u63a5\u53ef\u4ee5\u67e5\u8be2\u5230\u7684\uff0c\u8fd9\u6837\u7684\u5e38\u6570\u4f1a\u76f8\u5bf9\u8f83\u5c0f\u3002\n\n\u8fb9\u7684\u4fee\u6539\u662f\u76f4\u63a5\u544a\u8bc9\u7f16\u53f7\uff0c\u6240\u4ee5\u6709\u5fc5\u8981\u7528\u4e00\u4e2a\u6620\u5c04\u6570\u7ec4\u544a\u8bc9\u6211\u4eec\u4e00\u4e2a\u7f16\u53f7\u5bf9\u5e94\u7684\u8fb9\u662f\u4ec0\u4e48\u3002\n\n\u4fee\u6539\u5b8c\u4e4b\u540e\u4e00\u5b9a\u8981\u8bb0\u5f97\u6539\u53d8\u8bb0\u5f55\u7684\u8fb9\u6743\u3002\n\n\u4f1a\u7206 $int$ \u8bb0\u5f97 $long long$ \u3002\n\n### \u4ee3\u7801\uff1a\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<queue>\n#include<cmath>\n#include<string>\n#include<cstring>\n#include<ctime>\n#include<stack>\n#define next nxt\n#define itn int\n#define y1 y3647\n#define int long long\nusing namespace std;\ninline void read(int &x)\n{\n\tx=0;\n\tint f=1;\n\tchar ch=getchar();\n\twhile((ch<'0'||ch>'9')&&ch!='-')\n\tch=getchar();\n\tif(ch=='-')\n\t{\n\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\tx*=f;\n}\n//\nint i,j,k,m,n,s,t;\nconst int N=2e5+10;\nint dfn[N],rak[N],head[N],size[N];\nint a[N<<2],lazy[N<<2],val[N<<1],sum[N],rk[N<<1];//\u7b2c\u4e00\u53d1wa\u662f\u6570\u7ec4\u5f00\u5c0f\u4e86\u3002 \n//\u7ebf\u6bb5\u6811\u7684\u6570\u7ec4\u8bb0\u5f97\u5f004\u500d\u3002 \nstruct fu{\n\tint u,v,next,val;\n}edge[N<<1];\nvoid work(int aa,int bb,int cc)\n{\n\tedge[++k].next=head[aa];\n\thead[aa]=k;\n\tedge[k].v=bb;\n\tedge[k].u=aa;\n\tedge[k].val=cc;\n}\nvoid push_up(int rt)\n{\n\ta[rt]=min(a[rt<<1],a[rt<<1|1]);\n}\nvoid push_down(int rt)\n{\n\ta[rt<<1]+=lazy[rt];\n\ta[rt<<1|1]+=lazy[rt];\n\tlazy[rt<<1]+=lazy[rt];\n\tlazy[rt<<1|1]+=lazy[rt];\n\tlazy[rt]=0;\n}\nvoid updata(int l,int r,int rt,int x,int y,int c)\n{\n\tif(x<=l&&y>=r)\n\t{\n\t\ta[rt]+=c;\n\t\tlazy[rt]+=c;\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tpush_down(rt);\n\tif(x<=mid)\n\tupdata(l,mid,rt<<1,x,y,c);\n\tif(y>mid)\n\tupdata(mid+1,r,rt<<1|1,x,y,c);\n\tpush_up(rt);\n}\nint quert(int l,int r,int rt,int x,int y)\n{\n\tif(x<=l&&y>=r)\n\treturn a[rt];\n\tint mid=(l+r)/2;\n\tint ret=1e17;\n\tpush_down(rt);\n\tif(x<=mid)\n\tret=min(ret,quert(l,mid,rt<<1,x,y));\n\tif(y>mid)\n\tret=min(ret,quert(mid+1,r,rt<<1|1,x,y));\n\treturn ret;\n}\nvoid build(int l,int r,int rt)\n{\n\tif(l==r)\n\t{\n\t\ta[rt]=sum[rak[l]];\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tbuild(l,mid,rt<<1);\n\tbuild(mid+1,r,rt<<1|1);\n\tpush_up(rt);\n}\nvoid dfs(int u)\n{\n\tdfn[u]=++t;\n\trak[dfn[u]]=u;\n\tfor(int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].v;\n\t\tif(v==1)\n\t\tcontinue;\n\t\tsum[v]=sum[u]+edge[i].val;\n\t\tdfs(v);\n\t\tsize[u]+=size[v];\n\t}\n\tsum[u]+=val[u+n];\n\tsize[u]++;\n}\nsigned main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\t//freopen(\".ans\",\"w\",stdout);\n\tread(n),read(m);\n\tfor(i=1;i<=n-1;i++)\n\t{\n\t\tint x,y,z;\n\t\tread(x),read(y),read(z);\n\t\trk[i]=y;\n\t\tval[y]=z;\n\t\twork(x,y,z);\n\t}\n\tfor(i=1;i<=n-1;i++)\n\t{\n\t\tint x,y,z;\n\t\tread(x),read(y),read(z);\n\t\trk[i+n-1]=x;\n\t\tval[x+n]=z;\n\t}\n\tdfs(1);\n\tbuild(1,n,1);\n\t//val[i]\uff1a\u6811\u8fb9\u7ec8\u70b9\u4e3ai\u7684\u6743\u503c\n\t//val[i+n]\uff1ai\u7684\u6839\u8fb9\u7684\u6743\u503c \n\t//rk[x]\uff1ax\u53f7\u8fb9\u8fde\u5411\u7684\u513f\u5b50 (x<=n-1) \n\t//rk[x]\uff1ax\u53f7\u8fb9\u8d77\u70b9\u7684\u7f16\u53f7(n<=x<=2*n-2)\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tint op,x,y;\n\t\tread(op),read(x),read(y);\n\t\tif(op==1)\n\t\t{\n\t\t\tif(x<=n-1)\n\t\t\t{\n\t\t\t\tupdata(1,n,1,dfn[rk[x]],dfn[rk[x]]+size[rk[x]]-1,y-val[rk[x]]);\n\t\t\t\tval[rk[x]]=y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tupdata(1,n,1,dfn[rk[x]],dfn[rk[x]],y-val[rk[x]+n]);\n\t\t\t\tval[rk[x]+n]=y;\t\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(dfn[y]<dfn[x]+size[x]&&dfn[y]>=dfn[x])//\u6ce8\u610f\u5224\u65ad\u662f\u5426\u5728\u5b50\u6811\u5185 \n\t\t\tprintf(\"%lld\\n\",(quert(1,n,1,dfn[y],dfn[y])-val[y+n])-(quert(1,n,1,dfn[x],dfn[x])-val[x+n]));\n\t\t\telse\n\t\t\tprintf(\"%lld\\n\",quert(1,n,1,dfn[x],dfn[x]+size[x]-1)-(quert(1,n,1,dfn[x],dfn[x])-val[x+n])+(quert(1,n,1,dfn[y],dfn[y])-val[y+n]));\n\t\t}\n\t}\n\treturn 0;\n}```\n\n### \u601d\u8003\uff1a\n\n\u5982\u679c\u8fb9\u662f\u65e0\u5411\u8fb9\uff0c\u8fd9\u9053\u9898\u53c8\u5e94\u8be5\u600e\u4e48\u505a\u3002  \n\n\n\n\n\n",
        "postTime": 1608363030,
        "uid": 177535,
        "name": "CDFLS_mao_zx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF838B \u3010Diverging Directions\u3011"
    },
    {
        "content": "\u597d\u50cf\u633a\u795e\u5947\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u6211\u83dc\u3002\n\n\u4ee5\u4e0b\u79f0\u524d $n-1$ \u6761\u8fb9\u4e3a\u300c\u6811\u8fb9\u300d\uff0c\u56e0\u4e3a\u5b83\u4eec\u7ec4\u6210\u4e00\u68f5\u6811\uff1b\u540e $n-1$ \u6761\u8fb9\u4e3a\u300c\u56de\u8fb9\u300d\uff0c\u56e0\u4e3a\u5b83\u4eec\u7531\u6811\u8282\u70b9\u56de\u5230\u6839\u3002\n\n\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\uff0c\u5982\u679c $v$ \u5728 $u$ \u7684\u5b50\u6811\u5185\uff0c\u53d1\u73b0\u65e0\u8bba\u5982\u4f55\u7b54\u6848\u90fd\u8981\u5305\u62ec $u\\to v$ \u7684\u53ea\u7ecf\u8fc7\u6811\u8fb9\u7684\u8def\u5f84\u3002\u90a3\u4e48\u53ea\u8d70\u8fd9\u6761\u8def\u5f84\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u76f4\u63a5\u7ef4\u62a4 $u$ \u5230\u6839\u4ec5\u7ecf\u8fc7\u6811\u8fb9\u7684\u8ddd\u79bb $d_{u}$\uff0c\u7b54\u6848\u5c31\u662f $d_v-d_u$\u3002\n\n\u5426\u5219\u5fc5\u7136\u662f $u$ \u6cbf\u7740\u6811\u8fb9\u5230\u5b50\u6811\u5185\u7684\u70b9 $t$\uff0c\u7136\u540e\u4ece $t$ \u6cbf\u56de\u8fb9\u5230\u8fbe $1$ \u8282\u70b9\uff0c\u518d\u76f4\u63a5\u6cbf\u6811\u8fb9\u8d70\u5411 $v$\u3002\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u7684\u957f\u5ea6\u5c31\u662f $(d_t-d_u)+a_t+d_v$\uff0c$a_u$ \u8868\u793a $u$ \u5230 $1$ \u7684\u56de\u8fb9\u957f\u5ea6\u3002\n\n$d_u+d_v$ \u662f\u5b9a\u503c\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4 $\\min\\limits_{t\\in \\text{sub(u)}}\\{a_t+d_t\\}$ \u5373\u53ef\u3002\u4fee\u6539\u8fb9\u6743\u76f8\u5f53\u4e8e\u5355\u70b9\u6539\u6216\u5b50\u6811\u52a0\uff0c\u4e5f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u4ee3\u7801\u5f88\u597d\u5199\uff0c\u8dd1\u5f97\u8fd8\u633a\u5feb\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\n\nnamespace vbzIO {\n\tchar ibuf[(1 << 20) + 1], *iS, *iT;\n\t#if ONLINE_JUDGE\n\t#define gh() (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, (1 << 20) + 1, stdin), (iS == iT ? EOF : *iS++) : *iS++)\n\t#else\n\t#define gh() getchar()\n\t#endif\n\t#define pc putchar\n\t#define pi pair<int, int>\n\t#define tu3 tuple<int, int, int>\n\t#define tu4 tuple<int, int, int, int>\n\t#define mp make_pair\n\t#define mt make_tuple\n\t#define fi first\n\t#define se second\n\t#define pb push_back\n\t#define ins insert\n\t#define era erase\n\t#define clr clear\n\tinline int read () {\n\t\tchar ch = gh();\n\t\tint x = 0;\n\t\tbool t = 0;\n\t\twhile (ch < '0' || ch > '9') t |= ch == '-', ch = gh();\n\t\twhile (ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gh();\n\t\treturn t ? ~(x - 1) : x;\n\t}\n\tinline void write(int x) {\n\t\tif (x < 0) {\n\t\t\tx = ~(x - 1);\n\t\t\tputchar('-');\n\t\t}\n\t\tif (x > 9)\n\t\t\twrite(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nusing vbzIO::read;\nusing vbzIO::write;\n\nconst int maxn = 4e5 + 200;\nconst int inf = 1e18;\nstruct seg { int tg, vl; } tr[maxn << 2];\nint n, m, dfc, d[maxn], b[maxn], id[maxn], sz[maxn];\nvector<pi> t[maxn];\npi ed[maxn];\n\nvoid dfs(int u, int fa) {\n    id[u] = ++dfc, sz[u] = 1;\n    for (auto p : t[u]) {\n        int v = p.fi, w = p.se;\n        d[v] = d[u] + w - b[u] + b[v];\n        dfs(v, u), sz[u] += sz[v];\n    }\n}\n\n#define ls x << 1\n#define rs x << 1 | 1\n#define mid ((l + r) >> 1)\nvoid pushup(int x) { tr[x].vl = min(tr[ls].vl, tr[rs].vl); }\nvoid pushtg(int x, int c) { tr[x].vl += c, tr[x].tg += c; }\nvoid pushdown(int x) {\n    if (!tr[x].tg) return;\n    pushtg(ls, tr[x].tg), pushtg(rs, tr[x].tg);\n    tr[x].tg = 0;\n}\nvoid update(int l, int r, int s, int t, int c, int x) {\n    if (s <= l && r <= t) return pushtg(x, c);\n    pushdown(x);\n    if (s <= mid) update(l, mid, s, t, c, ls);\n    if (t > mid) update(mid + 1, r, s, t, c, rs);\n    pushup(x);\n}\n\nint query(int l, int r, int s, int t, int x) {\n    if (s <= l && r <= t) return tr[x].vl;\n    pushdown(x);\n    int res = inf;\n    if (s <= mid) res = min(res, query(l, mid, s, t, ls));\n    if (t > mid) res = min(res, query(mid + 1, r, s, t, rs));\n    return res;\n}\n\nsigned main() {\n\tn = read(), m = read();\n    for (int i = 1, u, v, w; i <= n - 1; i++) {\n        u = read(), v = read(), w = read();\n        t[u].pb(mp(v, w)), ed[i] = mp(v, w);\n    }\n    for (int i = 1, u, v, w; i <= n - 1; i++) {\n        u = read(), v = read(), w = read();\n        ed[i + n - 1] = mp(u, w), b[u] = w;\n    }\n    dfs(1, 0);\n    for (int i = 2; i <= n; i++) update(1, n, id[i], id[i], d[i], 1);\n    while (m--) { \n        int op = read();\n        if (op == 2) {\n            int u = read(), v = read();\n            int duv = (query(1, n, id[v], id[v], 1) - b[v]) - (query(1, n, id[u], id[u], 1) - b[u]);\n            if (id[v] >= id[u] && id[v] <= id[u] + sz[u] - 1) write(duv), puts(\"\");\n            else write(duv + query(1, n, id[u], id[u] + sz[u] - 1, 1)), puts(\"\");\n        } else {\n            int p = read(), w = read();\n            if (p <= n - 1) update(1, n, id[ed[p].fi], id[ed[p].fi] + sz[ed[p].fi] - 1, w - ed[p].se, 1), ed[p].se = w;\n            else update(1, n, id[ed[p].fi], id[ed[p].fi], w - b[ed[p].fi], 1), b[ed[p].fi] = w;\n        }\n    }\n\treturn 0;\n}\n```",
        "postTime": 1676887862,
        "uid": 306573,
        "name": "Ender32k",
        "ccfLevel": 0,
        "title": "CF838B Diverging Directions"
    }
]