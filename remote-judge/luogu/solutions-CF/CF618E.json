[
    {
        "content": "## \u5206\u6790 + \u9898\u89e3\n\n\u9898\u76ee\u4e2d\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1. \u7b2c $i$ \u6761\u7ebf\u6bb5\u5ef6\u957f $l$ \u4e2a\u5355\u4f4d\uff0c\u5176\u4ed6\u7ebf\u6bb5\u957f\u5ea6\u3001\u65b9\u5411\u5747\u4e0d\u53d8\uff1b\n\n2. \u7b2c $i$ \u81f3 $n$ \u6761\u7ebf\u6bb5\u7ed5\u7b2c $i$ \u6761\u7ebf\u6bb5\u5de6\u7aef\u70b9\u987a\u65f6\u9488\u65cb\u8f6c $\\alpha^{\\circ}$\u3002\n\n**\u7b2c\u4e00\u79cd\u64cd\u4f5c**\u5f88\u597d\u7ef4\u62a4\uff0c\u53ea\u9700\u5c06\u7b2c $i$ \u6761\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u53ca\u4ee5\u540e\u7684\u70b9**\u6574\u4f53\u5e73\u79fb**\u5373\u53ef\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u8bbe\u7b2c $i$ \u6761\u7ebf\u6bb5\u5de6\u7aef\u70b9\u5750\u6807\u4e3a $(x_1,y_1)$\uff0c\u53f3\u7aef\u70b9\u5750\u6807\u4e3a $(x_2,y_2)$\uff0c\u957f\u5ea6\u4e3a $d=\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$\uff0c\u5219\u53ea\u9700\u5c06\u7b2c $i$ \u6761\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u53ca\u4ee5\u540e\u7684\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u52a0\u4e0a\u4e0b\u5217\u6570\u503c\uff1a\n\n$$\\Delta x=\\frac{x_2-x_1}{d} l$$\n\n$$\\Delta y=\\frac{y_2-y_1}{d} l$$\n\n\uff08\u8fd9\u5e94\u8be5\u4e0d\u9700\u8981\u8bc1\u660e\u5427\uff0c\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u76f8\u4f3c\uff0c\u6216\u8005\u7528\u4e09\u89d2\u51fd\u6570\u6765\u7406\u89e3\uff09\n\n------------\n\n\u4f46\u662f**\u7b2c\u4e8c\u79cd\u64cd\u4f5c**\u5c31\u6ca1\u90a3\u4e48\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u53d1\u73b0\u5750\u6807\u7684\u53d8\u5316\u91cf\u4e0d\u80fd\u7b80\u5355\u5730\u7528\u4e00\u4e2a\u5f0f\u5b50\u8868\u793a\u51fa\u6765\u3002\u6b64\u65f6\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u672c\u9898\u67e5\u8be2\u7684\u4ec5\u4ec5\u662f\u7b2c $n$ \u6761\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u5750\u6807\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6539\u53d8\u7ef4\u62a4\u5bf9\u8c61\u2014\u2014\u4ece\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u5230**\u7ef4\u62a4\u6bcf\u6761\u7ebf\u6bb5**\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981**\u7ef4\u62a4\u6bcf\u6761\u7ebf\u6bb5\u53f3\u7aef\u70b9\u76f8\u5bf9\u4e8e\u5176\u5de6\u7aef\u70b9\u7684\u5750\u6807**\u3002\u7531\u4e8e\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u4e0d\u6539\u53d8\u5404\u7ebf\u6bb5\u7684\u957f\u5ea6\uff0c\u5b83\u76f8\u5f53\u4e8e\u6bcf\u6761\u7ebf\u6bb5\u5bf9\u5e94\u7684\u5411\u91cf**\u987a\u65f6\u9488**\u65cb\u8f6c $\\alpha^{\\circ}$\uff0c\u7ed9\u51fa\u4e00\u4e2a\u5750\u6807\u53d8\u6362\u516c\u5f0f\uff1a\n\n$$x'=x \\cdot \\cos \\alpha^{\\circ}+y \\cdot \\sin \\alpha^{\\circ}$$\n\n$$y'=y \\cdot \\cos \\alpha^{\\circ}-x \\cdot \\sin \\alpha^{\\circ}$$\n\n\uff08\u5176\u4e2d $(x,y)$ \u662f\u539f\u5750\u6807\uff0c$(x',y')$ \u662f\u65cb\u8f6c\u540e\u5750\u6807\uff09\n\n**\u8bc1\u660e**\uff1a\u5e73\u79fb\u7ebf\u6bb5\u4f7f\u5f97\u5176\u5de6\u7aef\u70b9\u4e0e\u539f\u70b9\u91cd\u5408\uff0c\u8bbe\u7ebf\u6bb5\u957f\u5ea6\u4e3a $l$\uff0c\u5176\u65b9\u5411\u4e3a\u4ece $x$ \u8f74\u6b63\u534a\u8f74\u8d77**\u9006\u65f6\u9488**\u65cb\u8f6c $\\alpha$\uff0c\u5219\u5176\u53f3\u7aef\u70b9\u5750\u6807\u4e3a $(l \\cos \\alpha,l \\sin \\alpha)$\uff08\u8bb0\u4e3a $(x,y)$\uff09\uff0c\u5c06\u5176**\u9006\u65f6\u9488**\u65cb\u8f6c $\\theta$\uff0c\u5219\u65cb\u8f6c\u540e\u7684\u5750\u6807 $(x',y')$ \u5982\u4e0b\uff1a\n\n$$x'=l \\cos (\\alpha+\\theta)=l(\\cos \\alpha \\cos \\theta - \\sin \\alpha \\sin \\theta)=x \\cdot \\cos \\theta-y \\cdot \\sin \\theta$$\n\n$$y'=l \\sin (\\alpha+\\theta)=l(\\sin \\alpha \\cos \\theta + \\cos \\alpha \\sin \\theta)=y \\cdot \\cos \\theta+x \\cdot \\sin \\theta$$\n\n\u800c\u4e0a\u8ff0\u516c\u5f0f\u7531\u4e8e\u662f**\u987a\u65f6\u9488**\u65cb\u8f6c\uff0c\u76f8\u5f53\u4e8e\u7528 $-\\theta$ \u66ff\u6362 $\\theta$\uff0c\u56e0\u6b64\u540e\u4e00\u9879\u7684\u7b26\u53f7\u53d8\u53cd\u3002\n\n------------\n\n\u540c\u65f6\uff0c\u591a\u6b21\u65cb\u8f6c\u53ef\u4ee5\u770b\u4f5c\u4e00\u6b21\u65cb\u8f6c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528**\u7ebf\u6bb5\u6811**\u7ef4\u62a4\u6bcf\u6761\u7ebf\u6bb5\u53f3\u7aef\u70b9\u76f8\u5bf9\u4e8e\u5176\u5de6\u7aef\u70b9\u7684\u5750\u6807\uff0c\u5e76\u4f7f\u7528 `lazy` \u6807\u8bb0\u8bb0\u5f55\u9700\u8981\u4e0b\u653e\u7684\u65cb\u8f6c\u5ea6\u6570\uff0c\u5373\u53ef\u8fdb\u884c\u666e\u901a\u7684**\u533a\u95f4\u4fee\u6539**\u3002\n\n\u5bf9\u4e8e**\u7b2c\u4e00\u79cd\u64cd\u4f5c**\uff0c\u8fdb\u884c**\u5355\u70b9\u4fee\u6539**\u5373\u53ef\u3002\n\n\u6bcf\u6b21\u7b54\u6848\u5373\u4e3a\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\u7684\u503c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n \\log n)$\uff08\u5b9e\u9645\u4e0a\u5e94\u8be5\u7b97\u4e0a `sin` `cos` \u51fd\u6570\u7684\u590d\u6742\u5ea6\uff09\n\n## \u4ee3\u7801\n\n\u5982\u679c\u8fd8\u6709\u4e0d\u6e05\u695a\u7684\u5c31\u770b\u6ce8\u91ca\u5427\u3002\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst double Pi=3.1415926535897932384626433832795;\nconst int max_n=3e5+5;\nstruct Node\n{\n\tdouble sx,sy,lazy;\n\tinline void merge(const Node &a,const Node &b)//\u7ebf\u6bb5\u6811\u7684\u5411\u4e0a\u5408\u5e76\u64cd\u4f5c \n\t{\n\t\tsx=a.sx+b.sx,sy=a.sy+b.sy; \n\t}\n\tinline void update(double ang)//\u65cb\u8f6c ang \u5e76\u66f4\u65b0 lazy\uff08ang \u4f7f\u7528\u5f27\u5ea6\u5236\uff09 \n\t{\n\t\tlazy+=ang;\n\t\tdouble Cos=cos(ang),Sin=sin(ang);//sin,cos \u8fd9\u4e9b\u6570\u5b66\u51fd\u6570\u5f88\u6162\uff0c\u5c3d\u91cf\u5c11\u8c03\u7528 \n\t\tdouble x=sx*Cos+sy*Sin,y=sy*Cos-sx*Sin;//\u540c\u4e0a\u8ff0\u516c\u5f0f \n\t\tsx=x,sy=y;\n\t}\n}tree[max_n<<2];\ninline void push_down(int p)\n{\n\ttree[p<<1].update(tree[p].lazy);\n\ttree[p<<1|1].update(tree[p].lazy);\n\ttree[p].lazy=0;\n}\nvoid build(int p,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\ttree[p].sx=1;//\u6ce8\u610f\u521d\u59cb\u5316 \n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n\ttree[p].merge(tree[p<<1],tree[p<<1|1]);\n}\ndouble res_x,res_y;//\u8bb0\u5f55\u5355\u70b9\u67e5\u8be2\u7684\u7b54\u6848 \nvoid query(int p,int l,int r,int k)\n{\n\tif(l==r)\n\t{\n\t\tres_x=tree[p].sx,res_y=tree[p].sy;\n\t\treturn;\n\t}\n\tif(tree[p].lazy)\n\t\tpush_down(p);\n\tint mid=(l+r)>>1;\n\tif(k<=mid)\n\t\tquery(p<<1,l,mid,k);\n\telse\n\t\tquery(p<<1|1,mid+1,r,k);\n}\nvoid modify(int p,int l,int r,int k,double dx,double dy)//\u5e73\u79fb\u7684\u5355\u70b9\u4fee\u6539 \n{\n\ttree[p].sx+=dx,tree[p].sy+=dy;\n\tif(l<r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(k<=mid)\n\t\t\tmodify(p<<1,l,mid,k,dx,dy);\n\t\telse\n\t\t\tmodify(p<<1|1,mid+1,r,k,dx,dy);\n\t}\n}\nvoid rotate(int p,int l,int r,int a,int b,double ang)//\u65cb\u8f6c\u7684\u533a\u95f4\u4fee\u6539 \n{\n\tif(a<=l&&r<=b)\n\t{\n\t\ttree[p].update(ang);\n\t\treturn;\n\t}\n\tif(tree[p].lazy)\n\t\tpush_down(p);\n\tint mid=(l+r)>>1;\n\tif(a<=mid)\n\t\trotate(p<<1,l,mid,a,b,ang);\n\tif(b>mid)\n\t\trotate(p<<1|1,mid+1,r,a,b,ang);\n\ttree[p].merge(tree[p<<1],tree[p<<1|1]);\n}\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tif(x==1)\n\t\t{\n\t\t\tquery(1,1,n,y);\n\t\t\tdouble d=sqrt(res_x*res_x+res_y*res_y);//\u7ebf\u6bb5\u957f\u5ea6 \n\t\t\tmodify(1,1,n,y,z*res_x/d,z*res_y/d);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdouble ang=z*Pi/180;//\u89d2\u5ea6\u5236\u8f6c\u5f27\u5ea6\u5236 \n\t\t\trotate(1,1,n,y,n,ang);\n\t\t}\n\t\tprintf(\"%.10lf %.10lf\\n\",tree[1].sx,tree[1].sy);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1610607239,
        "uid": 145355,
        "name": "wsyhb",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF618E Robot Arm"
    },
    {
        "content": "### \u770b\u5230\u65cb\u8f6c\u64cd\u4f5c\uff0c\u8003\u8651\u865a\u6570\n\u52a0\u957f\u64cd\u4f5c\uff1a\u5982\u679c\u8fd9\u6761\u8fb9\u5934\u662f $A$ \uff0c\u5c3e\u662f $B$ \uff0c\u52a0\u957f\u957f\u5ea6$len$\uff0c\u5219\u4ee4 $t=(B-A)$ , $B$ \u53ca\u4ee5\u540e\u7684\u5168\u52a0\u4e0a $\\frac{t\\times len}{|B-A|}$\n\n\u65cb\u8f6c\u64cd\u4f5c\uff1a\u5982\u679c\u8fd9\u6761\u8fb9\u5934\u662f $A$ \uff0c\u5c3e\u662f $B$ \uff0c\u5219\u8ba9 $B$ \u53ca\u4ee5\u540e\u7684\u6240\u6709\u70b9\uff08\u8bb0\u4e3a $P$ \uff09\uff0c\u53d8\u4e3a $(P-A)*e^{i\\alpha}+A $ \u4e5f\u5c31\u662f $P*e^{i\\alpha}+(1-e^{i\\alpha})*A$\n\n\u5148\u4e58\u518d\u52a0\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\uff0c\u6211\u76f4\u63a5\u62c9\u7684\u7ebf\u6bb5\u6811 $2$ \u677f\u5b50\uff0c\u5176\u5b9e\u53ea\u8981\u505a\u533a\u95f4 ~~\u60e9\u7f5a~~ \u4e58\u6cd5\u533a\u95f4\u52a0\u6cd5\u5355\u70b9\u8be2\u95ee\u7ebf\u6bb5\u6811\u5373\u53ef\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define debug(x) cerr<<#x<<' '<<x<<endl\n#ifndef ONLINE_JUDGE\n\t#define pia getchar\n#else\n\t#define pia nc\n#endif\nchar nc(){\n  \tstatic char buf[1<<25],*p=buf,*q=buf;\n  \tif(p==q&&(q=(p=buf)+fread(buf,1,1<<25,stdin),p==q))return EOF;\n  \treturn *p++;\n}\ntemplate<class T>void rd(T&x){\n\tshort f=1;x=0;\n\tchar ch=pia();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-')f=-1;\n\t\tch=pia();\n\t}while(isdigit(ch)){\n\t\tx=(x<<1)+(x<<3)+(ch^48);\n\t\tch=pia();\n\t}x*=f;\n}\ntemplate<class T>void wr(T x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>=10)wr(x/10);\n\tputchar(x%10+48);\n}\n\n#define maxn 300010\nint n,m;\nint x,y,z;\nstruct Cp{\n\tdouble a,b;\n\tCp(double aa=0,double bb=0):a(aa),b(bb){}\n\tCp operator+(Cp x)const{return Cp(a+x.a,b+x.b);}\n\tCp operator-(Cp x)const{return Cp(a-x.a,b-x.b);}\n\tCp operator*(Cp x)const{return Cp(a*x.a-b*x.b,a*x.b+x.a*b);}\n\tCp operator*(int x)const{return Cp(a*x,b*x);}\n\tdouble len(){return sqrt(a*a+b*b);}\n\tvoid print(){\n\t\tprintf(\"%.12lf %.12lf\\n\",a,b);\n\t}\n};\nCp e(int a){\n\tdouble r=a*3.14159265358979323846/180;\n\treturn Cp(cos(r),-sin(r));\n}\nstruct{\n\tint l,r;\n\tCp sum,mul,add;\n}tree[maxn<<2];\nvoid pushup(int x){\n\ttree[x].sum=tree[x<<1].sum+tree[x<<1|1].sum;\n}\nvoid pushdown(int x){\n\tif(tree[x].mul.a!=1||tree[x].mul.b){\n\t\ttree[x<<1].add=tree[x<<1].add*tree[x].mul;\n\t\ttree[x<<1|1].add=tree[x<<1|1].add*tree[x].mul;\n\t\ttree[x<<1].sum=tree[x<<1].sum*tree[x].mul;\n\t\ttree[x<<1|1].sum=tree[x<<1|1].sum*tree[x].mul;\n\t\ttree[x<<1].mul=tree[x<<1].mul*tree[x].mul;\n\t\ttree[x<<1|1].mul=tree[x<<1|1].mul*tree[x].mul;\n\t\ttree[x].mul=Cp(1,0);\n\t}\n\tif(tree[x].add.a||tree[x].add.b){\n\t\ttree[x<<1].add=tree[x<<1].add+tree[x].add;\n\t\ttree[x<<1|1].add=tree[x<<1|1].add+tree[x].add;\n\t\ttree[x<<1].sum=tree[x<<1].sum+tree[x].add*(tree[x<<1].r-tree[x<<1].l+1);\n\t\ttree[x<<1|1].sum=tree[x<<1|1].sum+tree[x].add*(tree[x<<1|1].r-tree[x<<1|1].l+1);\n\t\ttree[x].add=Cp(0,0);\n\t}\n}\nvoid build(int x,int l,int r){\n\ttree[x].l=l,tree[x].r=r;\n\ttree[x].mul=Cp(1,0);\n\tif(l==r){\n\t\ttree[x].sum=Cp(l-1,0);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(x<<1,l,mid),build(x<<1|1,mid+1,r);\n\tpushup(x);\n}\nvoid add(int x,int l,int r,Cp k){\n\tif(tree[x].l>=l&&tree[x].r<=r){\n\t\ttree[x].add=tree[x].add+k;\n\t\ttree[x].sum=tree[x].sum+Cp(tree[x].r-tree[x].l+1)*k;\n\t\treturn;\n\t}\n\tpushdown(x);\n\tint mid=(tree[x].l+tree[x].r)>>1;\n\tif(l<=mid)add(x<<1,l,r,k);\n\tif(r>mid)add(x<<1|1,l,r,k);\n\tpushup(x);\n}\nvoid mul(int x,int l,int r,Cp k){\n\tif(tree[x].l>=l&&tree[x].r<=r){\n\t\ttree[x].add=tree[x].add*k;\n\t\ttree[x].mul=tree[x].mul*k;\n\t\ttree[x].sum=tree[x].sum*k;\n\t\treturn;\n\t}\n\tpushdown(x);\n\tint mid=(tree[x].l+tree[x].r)>>1;\n\tif(l<=mid)mul(x<<1,l,r,k);\n\tif(r>mid)mul(x<<1|1,l,r,k);\n\tpushup(x);\n}\nCp get(int x,int pos){\n\tif(tree[x].l==tree[x].r)return tree[x].sum;\n\tpushdown(x);\n\tint mid=(tree[x].l+tree[x].r)>>1;\n\tif(pos<=mid)return get(x<<1,pos);\n\telse return get(x<<1|1,pos);\n}\nsigned main(){\n#ifndef ONLINE_JUDGE\n\tfreopen(\"testdata.in\",\"r\",stdin);\n#endif\n\trd(n),rd(m);\n\tbuild(1,1,n+1);\n\twhile(m--){\n\t\trd(z),rd(x),rd(y);\n\t\tCp A=get(1,x),B=get(1,x+1);\n\t\tif(z==1){\n\t\t\tCp t=B-A;\n\t\t\tdouble ll=t.len();\n\t\t\tt=Cp(y*t.a/ll,y*t.b/ll);\n\t\t\tadd(1,x+1,n+1,t);\n\t\t}else{\n\t\t\tCp E=e(y);\n\t\t\tmul(1,x+1,n+1,E);\n\t\t\tadd(1,x+1,n+1,(Cp(1,0)-E)*A);\n\t\t}\n\t\tCp g=get(1,n+1);\n\t\tg.print();\n\t}\n\n#ifndef ONLINE_JUDGE\n\tcerr<<endl<<(double)clock()/CLOCKS_PER_SEC;\n#endif\n}\n\n```\n",
        "postTime": 1625809422,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "CF618E Robot Arm \u9898\u89e3"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a\n\n- [\u4e09\u89d2\u51fd\u6570](https://baike.baidu.com/item/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/1652457?fr=aladdin)\n\n- [\u7ebf\u6bb5\u6811](https://www.luogu.com.cn/problem/P3372)\n\n~~\u4e0d\u4f1a\u5427\u4e0d\u4f1a\u5427\uff0c\u4e0d\u4f1a\u771f\u7684\u6709\u4eba\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u5207\u9ed1\u9898\u5427~~\n\n___\n\n\u533a\u95f4\u64cd\u4f5c\uff0cnlogn \u590d\u6742\u5ea6\u2014\u2014**\u7ebf\u6bb5\u6811**\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u9700\u8981\u7ef4\u62a4\u4ec0\u4e48\u3002\n\n### \u65b9\u54111\uff1a\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u771f\u5b9e\u5750\u6807\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e00\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u53d6\u51fa\u90a3\u6761\u7ebf\u6bb5\u7684\u8d77\u7ec8\u70b9\u3002\n\n\u82e5\u76f8\u5bf9\u4e8e\u8d77\u70b9\uff08\u5219\u4ee5\u8d77\u70b9\u4e3a\u539f\u70b9\uff09\u7ec8\u70b9\u7684\u5750\u6807\u4e3a$(x,y)$\uff0c\u5219\u6269\u5c55 $l$ \u4e2a\u5355\u4f4d\u5728 $x,y$ \u65b9\u5411\u4e0a\u7684\u5206\u91cf\u53ef\u4ee5\u6c42\u51fa\uff1a\n$$\\Delta x = lx/\\sqrt{x^2+y^2}$$ \n$$\\Delta y = ly/\\sqrt{x^2+y^2}$$\n\n\u5176\u5b9e\u5c31\u662f\u4e09\u89d2\u51fd\u6570\u7684\u5b9a\u4e49\u3002\n\n\u7136\u540e\u533a\u95f4\u52a0\u8fd9\u4e2a\u5206\u91cf\u4e8e\u6240\u6709\u5728\u64cd\u4f5c\u8fb9\u4ee5\u540e\u7684\u70b9\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e8c\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u64cd\u4f5c\u770b\u505a\u6240\u6709\u5728\u64cd\u4f5c\u8fb9\u4ee5\u540e\u7684\u70b9\u7ed5\u64cd\u4f5c\u8fb9\u7684\u8d77\u70b9\u65cb\u8f6c$\\alpha$\u00b0\u3002\n\n\u7ecf\u5178\u7684\u6280\u5de7\uff1a\u7ed5\u539f\u70b9\u65cb\u8f6c\u540e\u7684\u5750\u6807\u53ef\u4ee5\u7528\u539f\u5148\u7684\u5750\u6807 $x,y$ \u4e0e\u65cb\u8f6c\u89d2 $\\theta$ \u8868\u793a\u3002\n\n(\u5f53\u7136\uff0c\u8fd9\u91cc\u7684 $x,y$ \u6307\u7684\u662f\u70b9\u76f8\u5bf9\u4e8e\u64cd\u4f5c\u8fb9\u7684\u8d77\u70b9\u7684\u5750\u6807\uff0c\u6c42\u51fa\u6765\u540e\u8fd8\u8981\u6253\u8865\u4e01)\u3002\n\n\u5728\u8fd9\u4e2a\u9898\u4e2d\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u4e3a\uff1a\n\n$$x' = x\\cos\\theta+y\\sin\\theta$$\n\n$$y' = y\\cos\\theta-x\\sin\\theta$$\n\n\u8fd9\u662f\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u77e9\u9635\u7ef4\u62a4\u3002\n\n\u53d1\u73b0\u73b0\u5728\u64cd\u4f5c\u4e00\u65e0\u6cd5\u901a\u8fc7\u6253tag\u7684\u65b9\u5f0f\u7ef4\u62a4\uff0c\u8003\u8651\u628a\u64cd\u4f5c\u4e00\u5199\u6210\u77e9\u9635\u5f62\u5f0f\u3002\n\n\u4e5f\u662f\u4e2a\u7ecf\u5178\u6280\u5de7\uff1a\u56e0\u4e3a\u5e38\u6570\u65e0\u6cd5\u76f4\u63a5\u57282*2\u7684\u77e9\u9635\u4e2d\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u5f80\u77e9\u9635\u4e2d\u52a0\u4e00\u7ef4 $1$, \u7136\u540e\u5c31\u53ef\u4ee5\u5566\u3002\n\n\u56e0\u4e3a\u8fd9\u4e0d\u662f\u672c\u7bc7\u9898\u89e3\u7684\u91cd\u5934\u620f\uff0c\u6240\u4ee5\u672c\u65b9\u6cd5\u7684\u77e9\u9635\u8f6c\u79fb\uff0c\u4ee3\u7801\u5747\u7565\u53bb\u4e0d\u5199\uff08\u5c31\u662f\u56e0\u4e3a\u592a\u9ebb\u70e6\u4e86\u624d\u7528\u4e86\u7b2c\u4e8c\u79cd\uff09\u3002\n\n### \u65b9\u54112\uff1a\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u76f8\u5bf9\u4e8e\u4e0a\u4e00\u4e2a\u70b9\u7684\u5750\u6807\u3002\n\n\u5176\u5b9e\u65b9\u6cd5\u4e00\u4e2d\u5df2\u7ecf\u6697\u793a\u4e86\u8fd9\u79cd\u505a\u6cd5\u3002\n\n\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u662f\u4e24\u4e2a\u5206\u91cf\u7684\u533a\u95f4\u548c\uff08\u67e5\u8be2\u5c31\u662f\u5168\u5c40\u548c\uff09\u3002\n\n\u8003\u8651\u64cd\u4f5c\u4e8c\u5bf9\u7ef4\u62a4\u7684\u4e1c\u897f\u9020\u6210\u7684\u5f71\u54cd\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u64cd\u4f5c\u4e8c\u4e0d\u4ec5\u53ef\u4ee5\u770b\u4f5c\u7ed5\u64cd\u4f5c\u8fb9\u7684\u8d77\u70b9\u65cb\u8f6c\uff0c\u4e5f\u53ef\u4ee5\u770b\u505a\u64cd\u4f5c\u8fb9\u4e4b\u540e\u7684**\u6bcf\u4e00\u6761\u8fb9\u4e00\u8d77\u65cb\u8f6c**\u3002\n\n\u65cb\u8f6c\u8fb9\u53ef\u4ee5\u76f4\u63a5\u7528\u4e0a\u9762\u7684\u5f0f\u5b50\u3002\uff08\u7ef4\u62a4\u7684\u5c31\u662f\u76f8\u5bf9\u4e8e\u65cb\u8f6c\u4e2d\u5fc3\u7684\u5750\u6807\uff01\uff09\n\n\u6bcf\u4e00\u6761\u8fb9\u90fd\u8fdb\u884c\u7684\u5982\u4e0a\u7684\u53d8\u6362\uff0c\u90a3\u4e48 $\\sum x$ \u4e0e $\\sum y$ \u7684\u53d8\u5316\u662f\u4ec0\u4e48\u5462\n\uff1f\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u7ed9\u51fa\u4e86 $\\theta$\uff0c\u90a3\u4e48\u548c\u7684\u53d8\u6362\u4e0e\u5355\u4e2a\u5750\u6807\u7684\u53d8\u6362\u662f\u4e00\u6837\u7684\uff01\n\n\u90a3\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u65cb\u8f6c tag \u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e00\uff0c\u76f4\u63a5\u6c42\u51fa\u5206\u91cf\u540e\u5355\u70b9\u6539\u5373\u53ef\u3002\n\n___\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\nconst int maxn = 3e5+5;\nint n,m;\ndouble xsum[maxn<<2],ysum[maxn<<2],tag[maxn<<2];\ninline void pushup(int k){xsum[k] = xsum[k<<1] + xsum[k<<1|1],ysum[k] = ysum[k<<1] + ysum[k<<1|1];}\nvoid build(int k,int l,int r){\n\tif(l == r)return xsum[k] = 1,ysum[k] = 0,void();\n\tint mid = l+r>>1;\n\tbuild(k<<1,l,mid),build(k<<1|1,mid+1,r);\n\tpushup(k);\n}\nvoid gettag(int k,double ang){\n\tdouble prex = xsum[k],prey = ysum[k];\n\ttag[k] += ang;\n\txsum[k] = prex*std::cos(ang)+prey*std::sin(ang);\n\tysum[k] = prey*std::cos(ang)-prex*std::sin(ang);\n}\nvoid pushdown(int k){\n\tif(std::abs(tag[k]) > 1e-10)\n\t\tgettag(k<<1,tag[k]),gettag(k<<1|1,tag[k]),tag[k] = 0;\n}\nvoid update(int k,int l,int r,int pos,double xdlt,double ydlt){\n\tif(l == r)return xsum[k] += xdlt,ysum[k] += ydlt,void();\n\tint mid = l+r>>1;\n\tpushdown(k);\n\tif(pos <= mid)update(k<<1,l,mid,pos,xdlt,ydlt);\n\telse update(k<<1|1,mid+1,r,pos,xdlt,ydlt);\n\tpushup(k);\n}\nvoid cover(int k,int l,int r,int x,int y,double ang){\n\tif(l>y||r<x)return ;\n\tif(l>=x&&r<=y)return gettag(k,ang);\n\tint mid = l+r>>1;\n\tpushdown(k);\n\tcover(k<<1,l,mid,x,y,ang),cover(k<<1|1,mid+1,r,x,y,ang);\n\tpushup(k);\n}\nvoid query(int k,int l,int r,int pos,double &x,double &y){\n\tif(l == r)return x = xsum[k],y = ysum[k],void();\n\tint mid = l+r>>1;\n\tpushdown(k);\n\tif(pos <= mid)query(k<<1,l,mid,pos,x,y);\n\telse query(k<<1|1,mid+1,r,pos,x,y);\n}\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tbuild(1,1,n);\n\tfor(int i=1,ty,a,b;i<=m;++i){\n\t\tscanf(\"%d %d %d\",&ty,&a,&b);\n\t\tif(ty == 1){\n\t\t\tdouble x,y;\n\t\t\tquery(1,1,n,a,x,y);\n\t\t\tupdate(1,1,n,a,1.*b*x/std::sqrt(x*x+y*y),1.*b*y/std::sqrt(x*x+y*y));\n\t\t}\n\t\tif(ty == 2)\n\t\t\tcover(1,1,n,a,n,b*3.141592653589793/180);\n\t\tprintf(\"%.8lf %.8lf\\n\",xsum[1],ysum[1]);\n\t}\n\treturn 0;\n}\n```\n\u5b8c\u7ed3\u6492\u82b1\u3002",
        "postTime": 1608538070,
        "uid": 114153,
        "name": "Sali\u0435ri",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF618E \u3010Robot Arm\u3011"
    },
    {
        "content": "## \u9898\u76ee\n\n[luogu CF618E](https://www.luogu.org/problem/CF618E)\n\n\u6709 $n$ \u6761\u7ebf\u6bb5\uff0c\u7b2c $i$ \u6761\u7ebf\u6bb5\u7684\u4e24\u7aef\u5206\u522b\u5728 $(i - 1, 0)$ \u548c $(i, 0)$\n\n\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u5206\u4e3a\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n$1.$ \u628a\u7b2c $i$ \u6761\u7ebf\u6bb5\u4f38\u957f $l$\uff0c\u540e\u9762\u7684\u7ebf\u6bb5\u8ddf\u7740\u5b83\u79fb\u52a8\u3002\n\n$2.$ \u628a\u7b2c $i$ \u6761\u7ebf\u6bb5\u6cbf\u7740\u5b83\u7684\u8d77\u70b9**\u987a\u65f6\u9488**\u65cb\u8f6c $a$\uff08\u89d2\u5ea6\u5236\uff09\uff0c\u540e\u9762\u7684\u7ebf\u6bb5\u8ddf\u7740\u5b83\u65cb\u8f6c\u3002\n\n\u6bcf\u6b21\u64cd\u4f5c\u540e\uff0c\u8f93\u51fa\u7b2c $n$ \u6761\u7ebf\u6bb5\u7ec8\u70b9\u7684\u5750\u6807\u3002\n\n---\n\n## \u505a\u6cd5\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u8ba1\u7b97\u51e0\u4f55\uff08\u5411\u91cf\uff09\uff0c\u7ebf\u6bb5\u6811\u3002\n\n\u63a8\u8350\u4e00\u4e2a $dalao$ \u5199\u7684\u975e\u5e38\u597d\u7684\u8ba1\u7b97\u51e0\u4f55\u521d\u6b65\u7684\u535a\u5ba2\uff1a\n\n[\u8ba1\u7b97\u51e0\u4f55\u521d\u6b65](https://www.luogu.org/blog/wjyyy/geometry1)\n\n---\n\n### \u76f4\u63a5\u6a21\u62df\n\n\u9996\u5148\uff0c\u770b\u5230\u9898\u76ee\uff0c~~\u4f5c\u4e3a\u4e00\u4e2a\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u849f\u84bb~~\uff0c\u7b2c\u4e00\u53cd\u5e94\u662f\u6a21\u62df\u3002\n\n\u7ef4\u62a4\u6bcf\u4e2a\u7ebf\u6bb5\u7684\u7aef\u70b9\u5750\u6807\uff0c\u8fdb\u884c $1$ \u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5~~\u663e\u7136\u7684~~\u53d1\u73b0\uff0c\u6bcf\u4e2a\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u589e\u52a0\u91cf\u76f8\u540c\uff0c\n\n\u6c42\u51fa\u8fd9\u4e2a\u589e\u52a0\u91cf\uff0c\u8ba9 $i$ \u7684\u53f3\u7aef\u70b9\u4ee5\u53ca $i + 1$ \u81f3 $n$ \u7684\u5de6\u53f3\u7aef\u70b9\u90fd\u52a0\u4e0a\u8fd9\u4e2a\u503c\u3002\n\n\u4f38\u957f\u65f6\uff0c\u6c42\u51fa\u5148\u7ebf\u6bb5\u7684\u503e\u659c\u89d2 $\\theta$\uff0c\u4f38\u957f\u91cf\u7528 $len$ \u6765\u8868\u793a\uff0c\u90a3\u4e48\n\n$x$ \u65b9\u5411\u7684\u4f38\u957f\u91cf\u4e3a $len \\cdot cos \\; \\theta$\uff0c\n\n$y$ \u65b9\u5411\u7684\u4f38\u957f\u91cf\u4e3a $len \\cdot sin \\; \\theta$\uff0c\n\n---\n\n\u8fdb\u884c $2$ \u64cd\u4f5c\u65f6\uff0c\u5176\u5b9e\u5c31\u662f\u6bcf\u4e2a\u70b9\u7ed5 $i$ \u7684\u5de6\u7aef\u70b9\u65cb\u8f6c $a$\uff08\u89d2\u5ea6\u5236\uff09\u3002\n\n\u5982\u679c\u4e00\u4e2a\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u4e3a $(x1, y1)$\uff0c\u53f3\u7aef\u70b9\u4e3a $(x2, y2)$\uff0c\u90a3\u8be5\u7ebf\u6bb5\u6240\u4ee3\u8868\u7684\u5411\u91cf\u4e3a $(x2 - x1, y2 - y1)$\uff0c\n\n\u65cb\u8f6c\u65f6\uff0c\u6ce8\u610f\u9898\u76ee\u7ed9\u7684\u662f\u89d2\u5ea6\u5236\uff0c\u8ba1\u7b97\u65f6\u8981\u8f6c\u6210\u5f27\u5ea6\u5236\uff0c\u5373\u4e58\u4ee5 $\\frac{\\pi}{180}$\n\n\u5bf9\u4e8e\u5411\u91cf**\u9006\u65f6\u9488**\u65cb\u8f6c $\\theta$\uff08\u5f27\u5ea6\u5236\uff09\u7684\u516c\u5f0f\u4e3a\uff1a\n\n\uff08\u6ce8\u610f\u9898\u5e72\u4e0a\u662f**\u987a\u65f6\u9488**\u65cb\u8f6c\uff09\n\n$x' = x \\cdot cos \\; \\theta - y \\cdot sin \\; \\theta$\n\n$y' = x \\cdot sin \\; \\theta + y \\cdot cos \\; \\theta$\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\nint v, c;\ntemplate <class T> T read(T& x) {\n    x = 0; v = 1; c = getchar();\n    for (; c < '0' || c > '9'; c = getchar()) if (c == '-') v = -1;\n    for (; c >= '0' && c <= '9'; c = getchar()) x = (x << 3) + (x << 1) + (c ^ 48);\n    return x *= v;\n}\n//\u4ee5\u4e0a\u662f\u5feb\u8bfb\nconst int N = 300010;\nconst double PI = acos(-1);\n//\u7528\u8fd9\u79cd\u65b9\u5f0f\u6c42PI\u7cbe\u5ea6\u635f\u5931\u8f83\u5c0f\nint Q, n, opt, x, val;\nstruct Edge {\n    double x1, y1; //\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\n    double x2, y2; //\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\n} e[N];\nvoid add(int x, double y) {\n    double xx = e[x].x2 - e[x].x1;\n    double yy = e[x].y2 - e[x].y1;\n    //(xx,yy)\u4e3ae[x]\u6240\u8868\u793a\u7684\u5411\u91cf\n    double len = sqrt(xx * xx + yy * yy);\n    //\u5411\u91cf\u7684\u957f\u5ea6\n    double dx = y * xx / len;\n    //xx/len\u8868\u793acos(theta)\n    double dy = y * yy / len;\n    //yy/len\u8868\u793asin(theta)\n    e[x].x2 += dx;\n    e[x].y2 += dy;\n    //dx,dy\u5206\u522b\u8868\u793ax,y\u65b9\u5411\u4e0a\u7684\u4f38\u957f\u91cf\n    for (register int i = x + 1; i <= n; ++i) {\n        e[i].x1 += dx;\n        e[i].x2 += dx;\n        e[i].y1 += dy;\n        e[i].y2 += dy;\n        //\u76f4\u63a5\u66b4\u529b\u52a0\u4e0a\n    }\n}\nvoid rot(double x1, double y1, double& x2, double& y2, double theta) {\n    //(x2,y2)\u7ed5(x1,y1)\u65cb\u8f6ctheta\n    //\u6ce8\u610f\u5982\u679c\u8981\u5199\u51fd\u6570\u7684\u8bdd,x2,y2\u4e00\u5b9a\u8981\u52a0\u53d6\u5730\u5740\u7b26\u53f7,\u5426\u5219\u5728\u51fd\u6570\u5916,\u4ed6\u4eec\u7684\u503c\u6ca1\u6709\u6539\u53d8\n    double xx = x2 - x1;\n    double yy = y2 - y1;\n    double dx = xx * cos(theta) - yy * sin(theta);\n    double dy = xx * sin(theta) + yy * cos(theta);\n    x2 = x1 + dx;\n    y2 = y1 + dy;\n}\nvoid rotate(int x, double theta) {\n    rot(e[x].x1, e[x].y1, e[x].x2, e[x].y2, theta);\n    for (register int i = x + 1; i <= n; ++i) {\n        rot(e[x].x1, e[x].y1, e[i].x1, e[i].y1, theta);\n        rot(e[x].x1, e[x].y1, e[i].x2, e[i].y2, theta);\n        //\u56e0\u4e3a\u65cb\u8f6c\u65f6,\u6bcf\u4e2a\u70b9\u7684\u589e\u52a0\u91cf\u90fd\u4e0d\u540c,\u6240\u4ee5\u5fc5\u987b\u5206\u5f00\u8ba1\u7b97\n        //\u56e0\u4e3a\u849f\u84bb\u592a\u61d2\u4e86,\u6240\u4ee5\u5199\u4e86\u51fd\u6570\n    }\n}\nint main() {\n    read(n); read(Q);\n    for (register int i = 1; i <= n; ++i) {\n        e[i].x1 = double(i) - 1.0;\n        e[i].x2 = double(i);\n        //\u521d\u59cb\u5316\u5750\u6807\n    }\n    for (; Q; --Q) {\n        read(opt);\n        read(x); read(val);\n        if (opt & 1) {\n            add(x, val); //\u4f38\u957f\n        } else {\n            val = 360 - val % 360;\n            //\u56e0\u4e3a\u9898\u5e72\u4e0a\u8bf4\u987a\u65f6\u9488\u65cb\u8f6c,\u800c\u516c\u5f0f\u9002\u7528\u4e8e\u9006\u65f6\u9488\u65cb\u8f6c\n\t        double theta = double(val) / 180.0 * PI;\n            //\u89d2\u5ea6\u5236\u8f6c\u5f27\u5ea6\u5236\n            rotate(x, theta); //\u65cb\u8f6c\n        }\n        printf(\"%.10lf %.10lf\\n\", e[n].x2, e[n].y2);\n        //\u8f93\u51fa\u6700\u540e\u4e00\u6761\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\n    }\n    return 0;\n}\n```\n\n---\n\n### \u6b63\u89e3\n\n\u63d0\u4ea4\u4e0a\u53bb\u540e\uff0c\u5c31\u4f1a\u53d1\u73b0\u81ea\u5df1 $T$ \u98de\u4e86\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\n\u4ed4\u7ec6\u770b\u4e00\u4e0b\u66b4\u529b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u6d88\u8017\u5230\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u70b9\u8fdb\u884c\u4fee\u6539\uff0c\n\n\u800c\u6211\u4eec\u7684\u4fee\u6539\u533a\u95f4\u6bcf\u6b21\u90fd\u4e3a $i + 1$ \u81f3 $n$\uff0c\n\n\u67e5\u8be2\u65f6\u6bcf\u6b21\u53ea\u8be2\u95ee\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u5750\u6807\uff0c\n\n\u90a3\u6709\u6ca1\u6709\u53ef\u4ee5\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\u4e0e\u5355\u70b9\u67e5\u8be2\u7684 $nlog(n)$ \u7ea7\u522b\u6570\u636e\u7ed3\u6784\u5462\uff1f\n\n\u6709\uff0c\u7ebf\u6bb5\u6811\uff01~~\uff08\u849f\u84bb\u4e5f\u53ea\u4f1a\u8fd9\u4e2a\u4e86\uff09~~\n\n---\n\n\u5bf9\u4e8e\u4f38\u957f\uff0c\u7ebf\u6bb5\u6811\u57fa\u672c\u64cd\u4f5c\uff0c\n\n\u4f46\u662f\u7ebf\u6bb5\u6811\u4e0d\u597d\u7ef4\u62a4\u70b9\u7684\u65cb\u8f6c\uff0c\u4f46\u6839\u636e\u4e0a\u9762\u7684\u516c\u5f0f\u53ef\u4ee5\u53d1\u73b0\uff0c\u7ef4\u62a4\u7ebf\u6bb5\u7684\u65cb\u8f6c\u8fd8\u662f\u5f88\u5bb9\u6613\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u7ebf\u6bb5\u6240\u4ee3\u8868\u7684\u5411\u91cf\uff0c\u521d\u59cb\u5411\u91cf\u5747\u4e3a $(1, 0)$\u3002\n\n\u4f38\u957f\u65f6\u76f4\u63a5\u627e\u5230\u6240\u9700\u4f38\u957f\u7684\u7ebf\u6bb5\uff0c\u76f4\u63a5\u4f38\u957f\uff0c\n\n---\n\n\u65cb\u8f6c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7ef4\u62a4\u4e00\u4e2a\u503e\u659c\u89d2\uff0c\u8bb0\u5f55\u65cb\u8f6c\u540e\u7684\u89d2\u5ea6\uff0c\n\n\u7531\u5de6\u53f3\u513f\u5b50\u5411\u4e0a\u7ef4\u62a4\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u5411\u91cf\u7684\u548c\uff0c\n\n\u5411\u91cf\u7684\u548c\u9075\u5faa\u4e09\u89d2\u5f62\u6cd5\u5219\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8ba1\u7b97\u51fa\u5176\u4e2d\u4e00\u4e2a\u5411\u91cf\u5728\u53e6\u4e00\u4e2a\u5411\u91cf\u4e0a\u7684\u589e\u52a0\u91cf\uff0c\n\n\u7136\u540e\u76f4\u63a5\u76f8\u52a0\uff0c\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u3002\n\n---\n\n\u90a3\u7b54\u6848\u600e\u4e48\u6c42\u5462\uff1f\n\n\u56e0\u4e3a\u6bcf\u6b21\u8be2\u95ee\u6700\u540e\u4e00\u6761\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u7684\u5750\u6807\uff0c\u800c\u6211\u4eec\u7ef4\u62a4\u7684\u662f\u5411\u91cf\u7684\u52a0\u548c\uff0c\n\n\u5e76\u4e14\u7b2c\u4e00\u4e2a\u70b9\u7684\u5de6\u7aef\u70b9\u5750\u6807\u59cb\u7ec8\u4e3a $(0, 0)$\uff0c\u6240\u4ee5\u6240\u6709\u5411\u91cf\u52a0\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002\n\n\u6211\u4eec\u76f4\u63a5\u8f93\u51fa\u4e0b\u6807\u4e3a $1$ \u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u5373\u53ef\u3002\n\n\u6ce8\u610f\u4ee3\u7801\u4e2d $double$ \u4e0d\u8981\u5199\u6210 $int$\uff0c~~\u849f\u84bb\u56e0\u6b64\u8c03\u4e86\u4e00\u4e2a\u5c0f\u65f6~~\n\n```cpp\n#include <cmath>\n#include <cstdio>\nint v, c;\ntemplate <class T> T read(T& x) {\n    x = 0; v = 1; c = getchar();\n    for (; c < '0' || c > '9'; c = getchar()) if (c == '-') v = -1;\n    for (; c >= '0' && c <= '9'; c = getchar()) x = (x << 3) + (x << 1) + (c ^ 48);\n    return x *= v;\n}\n//\u4f9d\u65e7\u662f\u5feb\u8bfb\nconst int N = 600010;\nconst double PI = acos(-1);\nint n, Q, opt, x, val;\nstruct Vector {\n    double x, y; //\u5411\u91cf\u7684\u6a2a\u7eb5\u5750\u6807\n    double theta; //\u503e\u659c\u89d2(\u5f27\u5ea6\u5236)\n    Vector() {x = y = theta = 0.0;}\n    //\u521d\u59cb\u5316\u90fd\u4e3a0\n    Vector(double _x, double _y, double _sita) {\n    //\u6784\u9020\u51fd\u6570\n        x = _x; y = _y; theta = _sita;\n    }\n};\nint L[N << 2], R[N << 2];\nVector p[N << 1];\n//\u6ce8\u610f\u7ebf\u6bb5\u6811\u5f004\u500d\u7a7a\u95f4\n#define ls (u << 1)\n#define rs (u << 1 | 1)\n//ls,rs\u5206\u522b\u8868\u793au\u7684\u5de6\u53f3\u513f\u5b50\nvoid update(int u) {\n    //\u52a0\u548c\u5411\u91cf\u65f6,\u6211\u4eec\u4ee5\u5de6\u513f\u5b50\u4e3a\u57fa\u51c6,\u6c42\u51fa\u53f3\u513f\u5b50\u5728\u5de6\u513f\u5b50\u4e0a\u7684\u589e\u52a0\u91cf\n    double len = sqrt(p[rs].x * p[rs].x + p[rs].y * p[rs].y);\n    //\u53f3\u513f\u5b50\u7684\u957f\u5ea6\n    double theta = atan2(p[rs].y, p[rs].x);\n    //\u7528atan2\u6c42\u53cd\u6b63\u5207\u4e0d\u7528\u8003\u8651\u9664\u6570\u4e3a0\n    p[u].x = p[ls].x + len * cos(p[ls].theta + theta);\n    p[u].y = p[ls].y + len * sin(p[ls].theta + theta);\n    //\u8be6\u89c1\u4e4b\u524d\u7684\u516c\u5f0f\n    p[u].theta = p[ls].theta + p[rs].theta;\n    //\u503e\u659c\u89d2\u76f4\u63a5\u76f8\u52a0\n}\nvoid build(int u, int l, int r) {\n    L[u] = l; R[u] = r;\n    //L,R\u8bb0\u5f55\u8be5\u5411\u91cf\u5de6\u53f3\u7aef\u70b9\u7684\u6807\u53f7\n    if (L[u] + 1 == R[u]) {\n    //\u5982\u679c\u8be5\u5411\u91cf\u7684\u5de6\u53f3\u7aef\u70b9\u76f8\u90bb,\u5c31\u8fd4\u56de\n        p[u] = Vector(1.0, 0.0, 0.0);\n        //\u521d\u59cb\u5747\u4e3a(1,0),\u503e\u659c\u89d2\u4e3a0\n        return; \n    }\n    int mid = (l + r) >> 1;\n    build(ls, l, mid);\n    build(rs, mid, r);\n    //\u6709\u53ef\u80fd\u8be5\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u5c31\u662f\u4e0b\u4e00\u4e2a\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9,\u6240\u4ee5\u4e0d\u80fd\u5199\u4e3a(mid+1,r)\n    update(u);\n}\n\nvoid modify(int u, int pos, double vLen, double vTheta) {\n    if (L[u] + 1 == R[u]) {\n        double len = sqrt(p[u].x * p[u].x + p[u].y * p[u].y);\n        //p[u]\u7684\u957f\u5ea6\n        double theta = atan2(p[u].y, p[u].x);\n        //p[u]\u7684\u503e\u659c\u89d2\n        len += vLen;\n        theta += vTheta;\n        //\u76f4\u63a5\u52a0\u4e0a\n        p[u].x = len * cos(theta);\n        p[u].y = len * sin(theta);\n        //\u7ef4\u62a4\u5411\u91cf\u7684\u5750\u6807\n        p[u].theta = theta;\n        return;\n    }\n    if (pos <= R[ls]) modify(ls, pos, vLen, vTheta);\n    //\u5982\u679c\u6211\u4eec\u5f53\u524d\u8981\u4fee\u6539\u7684\u7ebf\u6bb5\u5728\u4ed6\u5de6\u513f\u5b50\u7684\u8303\u56f4\u5185,\u6cbf\u5de6\u513f\u5b50\u5411\u4e0b\u4fee\u6539\n    else modify(rs, pos, vLen, vTheta);\n    //\u5426\u5219\u5411\u53f3\u513f\u5b50\u4fee\u6539\n    update(u);\n    //\u65f6\u523b\u66f4\u65b0\n}\nint main() {\n    read(n); read(Q);\n    build(1, 0, n);\n    //\u521d\u59cb\u5316\u5efa\u6811\n    for (; Q; --Q) {\n        read(opt);\n        read(x); read(val);\n        if (opt & 1) {\n            modify(1, x, double(val), 0.0); //\u4f38\u957f\n        } else {\n            val = 360 - val % 360;\n            double theta = double(val) / 180.0 * PI;\n            //\u89d2\u5ea6\u5236\u8f6c\u5f27\u5ea6\u5236\n            modify(1, x, 0.0, theta); //\u65cb\u8f6c\n        }\n        printf(\"%.10lf %.10lf\\n\", p[1].x, p[1].y);\n        //p[1]\u6240\u7684\u5750\u6807\u5373\u4e3a\u6700\u540e\u4e00\u6761\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\n    }\n    return 0;\n}\n```\n\n\u6700\u540e\u8bf4\u4e00\u4e0b\uff0c\u5982\u679c\u6ca1\u6709\u505a\u8fc7\u7c7b\u4f3c\u7684\u9898\uff0c\u4e00\u822c\u4e0d\u4f1a\u5f80\u7ebf\u6bb5\u6811\u65b9\u9762\u53bb\u60f3\uff0c\n\n\u4f46\u662f\u5373\u4f7f\u60f3\u5230\u4e86\u4e4b\u540e\u7684\uff0c~~\u5bf9\u4e8e\u6211\u8fd9\u6837\u7684\u849f\u84bb\u800c\u8a00~~\uff0c\u4ee3\u7801\u5b9e\u73b0\u4e5f\u662f\u633a\u9ebb\u70e6\u7684\uff0c\n\n\u5982\u679c\u662f\u8003\u573a\u4e0a\u9047\u5230\u8fd9\u9053\u9898\uff0c~~\u50cf\u6211\u8fd9\u79cd\u849f\u84bb~~\uff0c\u8fd8\u662f\u5148\u770b\u522b\u7684\u9898\uff0c\u6700\u540e\u6709\u65f6\u95f4\u518d\u6765\u770b\u8fd9\u9898\u5427\u3002",
        "postTime": 1572779459,
        "uid": 172714,
        "name": "_liujiaqi_",
        "ccfLevel": 0,
        "title": "[CF618E] Robot Arm"
    },
    {
        "content": "> \u7ed9\u5b9a $n$ \u6761\u7ebf\u6bb5\uff0c\u9996\u5c3e\u76f8\u63a5\uff0c\u521d\u59cb\u7b2c $i$ \u6761\u7ebf\u6bb5\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u5750\u6807\u4e3a $(i-1,0)$ \u548c $(i,0)$\uff0c\u6709 $m$ \u4e2a\u64cd\u4f5c\uff1a\n\n> $1:$ \u4f7f\u7b2c $i$ \u6761\u7ebf\u6bb5\u5ef6\u957f $l$ \u5355\u4f4d\u957f\u5ea6\u3002\n\n> $2:$ \u4f7f\u7b2c $i$ \u6761\u7ebf\u6bb5\u4ee5\u8d77\u70b9\u4e3a\u4e2d\u5fc3\u987a\u65f6\u9488\u65cb\u8f6c $\\alpha^{\\circ}$\u3002\n\n> \u4e24\u79cd\u64cd\u4f5c\u90fd\u8981\u4fdd\u8bc1\u5269\u4e0b\u7684\u7ebf\u6bb5\u4e0e\u4e4b\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002\n\n> \u6c42\u6bcf\u6b21\u64cd\u4f5c\u540e\u7b2c $n$ \u6761\u7ebf\u6bb5\u7684\u7ec8\u70b9\u5750\u6807\u3002\n\n\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u6761\u7ebf\u6bb5\u6240\u5bf9\u5e94\u7684 **\u5411\u91cf**\uff08\u5373\u7ec8\u70b9\u548c\u8d77\u70b9\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff09\u3002\n\n\u7531\u4e8e\u5411\u91cf\u53ef\u4ee5\u5e73\u79fb\uff0c\u90a3\u4e48\u5c31\u5148\u5c06\u6240\u6709\u7ebf\u6bb5\u7684\u8d77\u70b9\u5e73\u79fb\u5230\u539f\u70b9\uff0c\u8bbe\u5e73\u79fb\u540e\u7ec8\u70b9\u5750\u6807\u4e3a $(x,y)$\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $1$\uff0c\u7531\u76f8\u4f3c\uff0c\u6709\uff1a\n\n$$\\begin{cases}\\frac{l}{\\sqrt{x^2+y^2}}=\\frac{\\Delta x}{x} \\\\ \\frac{l}{\\sqrt{x^2+y^2}}=\\frac{\\Delta y}{y}\\end{cases}\\Rightarrow \\begin{cases}\\Delta x=\\frac{lx}{\\sqrt{x^2+y^2}} \\\\ \\Delta y=\\frac{ly}{\\sqrt{x^2+y^2}}\\end{cases}$$\n\n\u6240\u4ee5\u76f4\u63a5\u5c06\u7b2c $i$ \u6761\u7ebf\u6bb5\u7684\u5411\u91cf\u5206\u522b\u52a0\u4e0a $\\Delta x,\\Delta y$ \u5373\u53ef\uff0c\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u5355\u70b9\u4fee\u6539\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $2$\uff0c\u5148\u5c06\u7ed9\u51fa\u7684\u89d2\u5ea6\u5236\u8f6c\u5316\u4e3a\u5f27\u5ea6\u5236\uff0c\u8bbe\u7b2c $i$ \u6761\u7ebf\u6bb5\u539f\u6765\u76f8\u5bf9\u4e8e\u5750\u6807\u8f74\u7684\u89d2\u5ea6\u4e3a $\\theta$\uff0c\u7531\u4e09\u89d2\u6052\u7b49\u53d8\u6362\uff0c\u6709\uff1a\n\n$$\\begin{cases}x'=\\sqrt{x^2+y^2}\\cos(\\theta-\\alpha) \\\\ y'=\\sqrt{x^2+y^2}\\sin(\\theta-\\alpha)\\end{cases}\\Rightarrow \\begin{cases}x'=x\\cos\\alpha+y\\sin\\alpha \\\\ y'=y\\cos\\alpha-x\\sin\\alpha\\end{cases}$$\n\n\u5728\u7ebf\u6bb5\u6811\u4e0a\u6253\u4e00\u4e2a\u65cb\u8f6c\u89d2\u7684 $\\text{lazy tag}$\uff0c\u5bf9\u4e8e\u7b2c $i\\sim n$ \u6761\u7ebf\u6bb5\u533a\u95f4\u4fee\u6539\u5373\u53ef\u3002\n\n\u7531\u4e8e\u5411\u91cf\u53ef\u4ee5\u5e73\u79fb\uff0c\u90a3\u4e48\u5c06\u6bcf\u6b21\u64cd\u4f5c\u540e\u5f97\u5230\u7684\u7ebf\u6bb5\u91cd\u65b0\u6536\u5c3e\u76f8\u63a5\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u4e14\u6700\u540e\u4e00\u6761\u7ebf\u6bb5\u7ec8\u70b9\u5750\u6807\u4e3a\u6240\u6709\u5411\u91cf\u76f8\u52a0\u3002\n\n\u6bcf\u6b21\u7b54\u6848\u5373\u4e3a\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\u7684\u503c\u3002\n\n$\\texttt{Code:}$\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define ull unsigned long long\n#define uint unsigned int\n#define rint register int\nusing namespace std;\nnamespace IO{\n\t#define File(x,y) freopen(#x,\"r\",stdin),freopen(#y,\"w\",stdout)\n\t#define fill(a,b,c,d) memset(a,b,sizeof(c)*(d+1))\n\t#define debug puts(\"debug\")\n\t#define breakpoint exit(0)\n\t#define out(x) cout<<#x<<\" : \"<<x<<\"\\n\"\n\tinline int read(){\n\t\tint w=0,f=1; char ch=getchar();\n\t\twhile(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();}\n\t\twhile(ch>='0'&&ch<='9'){w=(w<<3)+(w<<1)+(ch^48); ch=getchar();}\n\t\treturn w*f;\n\t}\n\tinline void write(int x,char ch='\\n'){\n\t\tstatic int sta[35]; int top=0;\n\t\tif(x<0) putchar('-'),x=-x;\n\t\tdo{sta[++top]=x%10,x/=10;}while(x);\n\t\twhile(top) putchar(sta[top--]+48); putchar(ch);\n\t}\n}\nusing namespace IO;\nnamespace CL{ \n\n\tconst int maxn=3e5+5;\n\tconst double pi=acos(-1);\n\n\tint n,m;\n\tnamespace SegmentTree{\n\t\t#define lson p<<1\n\t\t#define rson p<<1|1\n\t\tstruct node{\n\t\t\tdouble sumx,sumy,tag;\n\t\t\tnode(){}\n\t\t\tnode(double _sumx,double _sumy,double _tag){\n\t\t\t\tsumx=_sumx,sumy=_sumy,tag=_tag;\n\t\t\t}\n\t\t}t[maxn<<2];\n\t\tinline void pushup(int p){\n\t\t\tt[p].sumx=t[lson].sumx+t[rson].sumx;\n\t\t\tt[p].sumy=t[lson].sumy+t[rson].sumy;\n\t\t}\n\t\tinline void pushtag(int p,double k){\n\t\t\tdouble sumx=t[p].sumx,sumy=t[p].sumy;\n\t\t\tt[p].sumx=sumx*cos(k)+sumy*sin(k);\n\t\t\tt[p].sumy=sumy*cos(k)-sumx*sin(k);\n\t\t\tt[p].tag+=k;\n\t\t}\n\t\tinline void pushdown(int p){\n\t\t\tif(t[p].tag){\n\t\t\t\tpushtag(lson,t[p].tag),pushtag(rson,t[p].tag);\n\t\t\t\tt[p].tag=0;\n\t\t\t}\n\t\t}\n\t\tvoid build(int p,int l,int r){\n\t\t\tif(l==r) return t[p]=node(1,0,0),void();\n\t\t\tint mid=(l+r)>>1;\n\t\t\tbuild(lson,l,mid),build(rson,mid+1,r);\n\t\t\tpushup(p);\n\t\t}\n\t\tvoid modify(int p,int l,int r,int pos,double x,double y){\n\t\t\tif(l==r) return t[p].sumx+=x,t[p].sumy+=y,void();\n\t\t\tint mid=(l+r)>>1;\n\t\t\tpushdown(p);\n\t\t\tif(pos<=mid) modify(lson,l,mid,pos,x,y);\n\t\t\telse modify(rson,mid+1,r,pos,x,y);\n\t\t\tpushup(p);\n\t\t}\n\t\tvoid update(int p,int l,int r,int tl,int tr,double k){\n\t\t\tif(tl<=l && r<=tr) return pushtag(p,k),void();\n\t\t\tint mid=(l+r)>>1;\n\t\t\tpushdown(p);\n\t\t\tif(tl<=mid) update(lson,l,mid,tl,tr,k);\n\t\t\tif(tr>mid) update(rson,mid+1,r,tl,tr,k);\n\t\t\tpushup(p);\n\t\t}\n\t\tnode query(int p,int l,int r,int pos){\n\t\t\tif(l==r) return t[p];\n\t\t\tint mid=(l+r)>>1;\n\t\t\tpushdown(p);\n\t\t\tif(pos<=mid) return query(lson,l,mid,pos);\n\t\t\telse return query(rson,mid+1,r,pos);\n\t\t}\n\t}using namespace SegmentTree;\n\n\tinline int main(){\n\t\tn=read(),m=read();\n\t\tbuild(1,1,n);\n\t\twhile(m--){\n\t\t\tint op=read(),a=read(),b=read();\n\t\t\tif(op==1){\n\t\t\t\tnode now=query(1,1,n,a);\n\t\t\t\tdouble len=sqrt(now.sumx*now.sumx+now.sumy*now.sumy);\n\t\t\t\tmodify(1,1,n,a,now.sumx*1.0*b/len,now.sumy*1.0*b/len);\n\t\t\t}\n\t\t\tif(op==2) update(1,1,n,a,n,1.0*b*pi/180.0);\n\t\t\tprintf(\"%.10lf %.10lf\\n\",t[1].sumx,t[1].sumy);\n\t\t}\n\t\treturn 0;\n\t}\n}\nsigned main(){return CL::main();}\n```",
        "postTime": 1634353162,
        "uid": 226113,
        "name": "\u706b\u7fbd\u767d\u65e5\u751f",
        "ccfLevel": 0,
        "title": "\u300c\u9898\u89e3\u300dCF618E Robot Arm"
    },
    {
        "content": "~~\u8fd9\u4e2a\u9898\u662f\u7ebf\u6bb5\u6811\u6a21\u677f\u9898\u5427~~\n\n\u53ef\u4ee5\u8003\u8651\u628a\u95ee\u9898\u5f62\u5f0f\u5316\u4e00\u4e0b\uff1a\n - \u6c42\u4ece\u539f\u70b9\u51fa\u53d1\uff0c\u6cbf\u7740\u6bcf\u4e00\u6761\u624b\u81c2\u79fb\u52a8\uff0c\u79fb\u52a8\u5230\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u5750\u6807\u3002\n - \u652f\u6301\u4fee\u6539\n\n\u5411\u91cf\u662f\u53ef\u4ee5\u7528\u6765\u63cf\u8ff0\u4e00\u79cd\u79fb\u52a8\u7684\uff0c\u8fd9\u5c31\u548c\u9898\u76ee\u4e2d\u8981\u6c42\u505a\u7684\u5bf9\u5e94\u8d77\u6765\u4e86\u3002\n\n\u628a\u6bcf\u4e00\u6761\u624b\u81c2\u770b\u6210\u4e00\u4e2a\u5411\u91cf\uff0c\u90a3\u4e48\u6700\u540e\u8981\u6c42\u7684\u5c31\u662f\u8fd9\u4e9b\u5411\u91cf\u7684\u548c\u3002\n\n\u90a3\u4e48\u5bf9\u624b\u81c2\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5bf9\u624b\u81c2\u5bf9\u5e94\u5411\u91cf\u505a\u4fee\u6539\u3002\n\n\u8003\u8651\u4e24\u79cd\u4fee\u6539\uff1a\n\n - \u5bf9\u4e8e\u4f38\u957f\u64cd\u4f5c\uff0c\u663e\u7136\u5c31\u662f\u628a\u5bf9\u5e94\u5411\u91cf\u4f38\u957f\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\n - \u5bf9\u4e8e\u65cb\u8f6c\u64cd\u4f5c\uff0c\u4e0d\u96be\u53d1\u73b0\u5176\u5b9e\u662f\u628a\u8fd9\u4e2a\u5411\u91cf\u53ca\u5176\u540e\u9762\u7684\u6240\u6709\u5411\u91cf\u90fd\u65cb\u8f6c\u76f8\u540c\u7684\u4e00\u4e2a\u89d2\u5ea6\u3002\n \n\u4f17\u6240\u5468\u77e5\uff0c\u53ef\u4ee5\u7528\u77e9\u9635\u6765\u63cf\u8ff0\u5bf9\u5411\u91cf\u7684\u65cb\u8f6c\u64cd\u4f5c\uff0c\u800c\u4e14\u77e9\u9635\u6ee1\u8db3\u7ed3\u5408\u5f8b\u548c\u5206\u914d\u5f8b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e86\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u5411\u91cf\u548c\uff0clazy \u6807\u8bb0\uff08\u5bf9\u5411\u91cf\u7684\u4fee\u6539\uff09\u5c31\u53ef\u4ee5\u4f7f\u7528\u77e9\u9635\u8868\u793a\u3002\n\n\u8003\u8651\u65cb\u8f6c\u4e00\u4e2a\u5411\u91cf\u7684\u77e9\u9635\uff0c\u82e5\u65cb\u8f6c $\\alpha$ \u5ea6\uff0c\u53ef\u4ee5\u6784\u9020\u4e3a\uff1a\n$$\n\\begin{bmatrix}\n\\cos\\alpha &-\\sin\\alpha\\\\\n\\sin\\alpha &\\cos\\alpha\n\\end{bmatrix}\n$$\n\n\u63a8\u6cd5\u53ef\u4ee5\u53c2\u8003[\u8fd9\u91cc](https://oi-wiki.org/math/vector/#_24) \u5176\u5b9e\u53ef\u4ee5\u8003\u8651\u628a\u5411\u91cf\u653e\u5230\u590d\u5e73\u9762\u91cc\u9762\uff0c\u7136\u540e\u8fd9\u4e2a\u5f0f\u5b50\u5c31\u5f88\u663e\u7136\u4e86\uff0c\u4e2a\u4eba\u611f\u89c9\u6bd4\u4e09\u89d2\u6052\u7b49\u53d8\u6362\u7684\u63a8\u6cd5\u8981\u4f18\u7f8e\u3002\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5411\u91cf\u548c\u5373\u53ef\u3002\n\n\u597d\u50cf\u6709\u5f88\u591a\u4eba\u61d2\u6807\u8bb0\u662f\u65cb\u8f6c\u89d2\u5ea6\uff0c\u5176\u5b9e\u5982\u679c\u64cd\u4f5c\u53ea\u6709\u65cb\u8f6c\u7684\u8bdd\uff0c\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u6211\u53ea\u662f\u89c9\u5f97\u8fd9\u6837\u60f3\u8d77\u6765\u66f4\u81ea\u7136\u3002\u5982\u679c\u7ef4\u62a4\u65cb\u8f6c\u89d2\u5ea6\uff0c\u6bcf\u6b21\u4e0b\u653e\u6807\u8bb0\u90fd\u8981\u4e09\u89d2\u51fd\u6570\u7b97\u4e00\u7b97\uff0c\u4f1a\u6bd4\u7ef4\u62a4\u77e9\u9635\u6162\u5f88\u591a\uff0c\u5199\u51fa\u6765\u4e5f\u6ca1\u6709\u5361\u5e38\u6570\u2026~~\u7136\u540e\u5c31\u6700\u4f18\u89e3\u4e86~~\u3002 /CY\n\n```cpp\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\n#define db double \n\nconst db PI = acos(-1.);\n\nnamespace SegmentTree{\n\tint n;\n\tconst int _ = 2e6 + 100; \n\tdb squ(db x) { return x * x; }\n\tstruct Vector{\n\t\tdb x, y; \n\t\tVector(){} \n\t\tVector(db a, db b) { x = a; y = b; }\n\t\tdb Length() { return sqrt(squ(x) + squ(y)); }\n\t\tvoid pull(db len) {\n\t\t\tdb tmp = this->Length();\n\t\t\tx *= (len + tmp) / tmp;\n\t\t\ty *= (len + tmp) / tmp;\n\t\t}\n\t};\n\tVector operator + (const Vector & A, const Vector & B) { return Vector(A.x + B.x, A.y + B.y); }\n\t/**\n\t | a b |\n\t | c d |\n\t*/\n\tstruct Matrix{\n\t\tdb a, b, c, d;\n\t\tMatrix() { a = d = 1; c = b = 0; }\n\t\tMatrix(db $1, db $2, db $3, db $4) {\n\t\t\ta = $1; b = $2;\n\t\t\tc = $3; d = $4;\n\t\t}\n\t\tMatrix(db alpha){ // \u9006\u65f6\u9488 alpha \u5ea6\u3002\n\t\t\tdb $1 = cos(alpha), $2 = sin(alpha);\n\t\t\ta = $1; b = -$2;\n\t\t\tc = $2; d = $1;\n\t\t}\n\t};\n\t#define EPS (1e-9)\n\tinline int sign(db x) { return x < -EPS ? -1 : (x > EPS); }\n\tinline int cmp(db x, db y) { return sign(x - y); }\n\tinline bool operator == (const Matrix & A, const Matrix & B) { return cmp(A.a, B.a) == 0 && cmp(A.b, B.b) == 0 && cmp(A.c, B.c) == 0 && cmp(A.d, B.d) == 0; }\n\tMatrix operator * (const Matrix & A, const Matrix & B) {\n\t\tMatrix ret;\n\t\tret.a = A.a * B.a + A.b * B.c;\n\t\tret.b = A.a * B.b + A.b * B.d;\n\t\tret.c = A.c * B.a + A.d * B.c;\n\t\tret.d = A.c * B.b + A.d * B.d;\n\t\treturn ret;\n\t}\n\tVector operator * (const Matrix & A, const Vector & B) { return Vector(A.a * B.x + A.b * B.y, A.c * B.x + A.d * B.y); }\n\tVector v[_]; Matrix tag[_];\n\t#define ls(o) (o << 1)\t\n\t#define rs(o) ((o << 1) | 1)\n\t#define maintain(o) (v[o] = v[ls(o)] + v[rs(o)])\n\tvoid tar(int o, Matrix V){\n\t\ttag[o] = V * tag[o];\n\t\tv[o]   = V * v[o];\n\t}\n\tvoid push(int o) {\n\t\tif(tag[o] == tag[0]) return ;\n\t\ttar(ls(o), tag[o]);\n\t\ttar(rs(o), tag[o]);\n\t\ttag[o] = tag[0];\n\t}\n\tvoid build(int o, int L, int R) {\n\t\tif(L == R) return v[o] = Vector(1, 0), void();\n\t\tint mid = (L + R) >> 1;\n\t\tbuild(ls(o), L, mid); build(rs(o), mid + 1, R);\n\t\tmaintain(o);\n\t}\n\tvoid build(int __) { n = __; return build(1, 1, n); }\n\tvoid update_pull(int o, int nowl, int nowr, int p, db L){\n\t\tif(nowl == nowr) return v[o].pull(L), void();\n\t\tint mid = (nowl + nowr) >> 1; push(o); \n\t\tif(p <= mid) update_pull(ls(o), nowl, mid, p, L);\n\t\tif(p  > mid) update_pull(rs(o), mid + 1, nowr, p, L);\n\t\tmaintain(o);\n\t}\n\tvoid update_pull(int p, db L) { return update_pull(1, 1, n, p, L); }\n\tvoid update_rotate(int o, int nowl, int nowr, int L, int R, Matrix x) {\n\t\tif(L <= nowl && nowr <= R) return tar(o, x);\n\t\tint mid = (nowl + nowr) >> 1; push(o);\n\t\tif(L <= mid) update_rotate(ls(o), nowl, mid, L, R, x);\n\t\tif(R  > mid) update_rotate(rs(o), mid + 1, nowr, L, R, x);\n\t\tmaintain(o);\n\t}\n\tvoid update_rotate(int p, db alpha){\n\t\talpha = 360 - alpha; alpha = (alpha / 180.) * PI;\n\t\tupdate_rotate(1, 1, n, p, n, Matrix(alpha));\n\t}\n\tVector query() { push(1); return v[1]; }\n}\nusing SegmentTree::update_pull;\nusing SegmentTree::update_rotate;\nusing SegmentTree::query;\nusing SegmentTree::build;\nusing SegmentTree::Vector;\nint n, m;\nint main(){\n\tscanf(\"%d%d\", &n, &m);\n\tbuild(n);\n\twhile(m--){\n\t\tint opt, x; scanf(\"%d%d\", &opt, &x);\n\t\tif(opt == 1){\n\t\t\tdb L; scanf(\"%lf\", &L);\n\t\t\tupdate_pull(x, L);\n\t\t} else {\n\t\t\tdb alpha; scanf(\"%lf\", &alpha);\n\t\t\tupdate_rotate(x, alpha);\n\t\t}\n\t\tVector ret = query();\n\t\tprintf(\"%.5lf %.5lf\\n\", ret.x, ret.y);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1616580909,
        "uid": 44615,
        "name": "ShuYuMo",
        "ccfLevel": 8,
        "title": "CF618E \u9898\u89e3"
    }
]