[
    {
        "content": "# \u9898\u89e3 $\\mathrm{CF1398E}$\n\n## \u9898\u76ee\u610f\u601d\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1398E)\n\n## $\\mathrm{Sol}$\n\n\u611f\u89c9\u8fd9\u662f\u6700\u8fd1\u6211\u505a\u8fc7\u6bd4\u8f83\u96be\u7684 $E$ \u5566\uff0c\u7ec6\u8282\u771f\u7684\u8349\u9e21\u591a\n\n\u6211\u4eec\u5728\u8fd9\u91cc\u5047\u5b9a $A$ \u4e3a\u80fd\u7ffb\u500d\u7684\u6cd5\u672f\uff0c$B$ \u76f8\u53cd\n\n\n\u6211\u4eec\u9996\u5148\u6709\u4e2a\u8d2a\u5fc3\u601d\u8def\u5c31\u662f\u6bcf\u4e2a $A$ \u5c3d\u91cf\u914d\u5bf9\u5927\u7684 \u6743\u503c\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u4f7f\u7528 $A$ \u7684\u672c\u8eab\u6743\u503c\u5c3d\u53ef\u80fd\u5c0f\uff0c\u56e0\u4e3a\u5176\u4e0d\u80fd\u4ea7\u751f\u7ffb\u500d\u8d21\u732e\u3002\n\n\u6211\u4eec\u8003\u8651\u7528 set \u7ef4\u62a4 $A$ \u6743\u503c\u7684\u96c6\u5408\uff08\u65e2\u4fdd\u8bc1\u4e0d\u91cd\u590d\u4e5f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4fbf\u4e8e\u64cd\u4f5c\uff09\u3002\u5e76\u4e14\u5047\u8bbe\u73b0\u5728\u6709 $s$ \u4e2a $A$ \u90a3\u4e48\u6211\u4eec\u8ba1 $s1$ \u8868\u793a\u524d $s$ \u5927\u7684\u6743\u503c\u548c\uff0c$s2$ \u8868\u793a\u524d $s+1$ \u5927\u7684\u6743\u503c\u548c\uff0c\u4ee5\u53ca $S$ \u4e3a\u5f53\u524d\u6240\u6709\u6743\u503c\u7684\u603b\u548c\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n* \u5047\u8bbe\u5f53\u524d $A$ \u7684\u6700\u5c0f\u503c $mi$ \u5728\u6240\u6709\u6743\u503c\u7684\u6392\u540d $\\leq s$ \u90a3\u4e48\u8d21\u732e\u5373\u4e3a $(S+pre2-mi)$\u3002\u5177\u4f53\u5730\u5c31\u662f\u628a\u8fd9\u4e2a\u6700\u5c0f\u7684\u4f5c\u4e3a $A$ \u7684\u5f00\u5934\u7136\u540e $s$ \u4e2a $A$ \u672c\u8eab\u8fde\u63a5\u4f7f\u7528\uff0c\u6700\u540e\u5e26\u4e00\u4e2a $B$\u3002\n\n* \u5bf9\u4e8e\u5176\u4ed6\u60c5\u51b5\u7684\u8d21\u732e\u5373\u4e3a $(S+pre1)$ \u5373\u4e00\u4e2a\u914d\u4e00\u4e2a\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6743\u503c\u7684\u6392\u540d\u6211\u4eec\u76f4\u63a5\u5e73\u8861\u6811\u7ef4\u62a4\u4e00\u4e0b\u5c31\u597d\u4e86\uff08div2E \u5c31\u8981\u7528\u5e73\u8861\u6811/fad\uff0c\u76f4\u63a5\u8d3a\u4e86\u4e2afhq\u5c31\u597d\u4e86\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\log  n)$\n\n## $\\mathrm{Code}$\n\n```cpp\nconst int N=1e6+5;\n\nint n,m,noden,tot,cnt,pre1,pre2;\nint ans,sum;\nset<int> S;\n \nstruct node\n{\n\tint lc,rc,rnd,val,sz;\n}a[N];\n \nstruct fhq{\n\t#define new NEW\n\tint rt;\n\tvoid pushup(int x){\n\t\ta[x].sz=a[a[x].lc].sz+a[a[x].rc].sz+1;\n\t}\n\t\n\tint new(int val){\n\t\ta[++noden]=(node){0,0,rand(),val,1};\n\t\treturn noden;\n\t}\n\tvoid split(int now,int val,int &x,int &y){\n\t\tif(!now){\n\t\t\tx=y=0;\n\t\t\treturn ;\n\t\t}\n\t\tif(a[now].val>=val){\n\t\t\tx=now;\n\t\t\tsplit(a[now].rc,val,a[now].rc,y);\n\t\t}\n\t\telse{\n\t\t\ty=now;\n\t\t\tsplit(a[now].lc,val,x,a[now].lc);\n\t\t}\n\t\tpushup(now);\n\t}\n\tint merge(int x,int y){\n\t\tif(!x||!y) return x|y;\n\t\tif(a[x].rnd<a[y].rnd){\n\t\t\ta[x].rc=merge(a[x].rc,y);\n\t\t\tpushup(x);\n\t\t\treturn x;\n\t\t}\n\t\telse{\n\t\t\ta[y].lc=merge(x,a[y].lc);\n\t\t\tpushup(y);\n\t\t\treturn y;\n\t\t}\n\t}\n\tint getk(int x,int k){\n\t\tif(!k||k>a[rt].sz) return 0;\n\t\tfor(;;){\n\t\t\tif(k<=a[a[x].lc].sz) x=a[x].lc;\n\t\t\telse if(k==a[a[x].lc].sz+1) return x;\n\t\t\telse{\n\t\t\t\tk-=a[a[x].lc].sz+1;\n\t\t\t\tx=a[x].rc;\n\t\t\t}\n\t\t}\n\t}\n\tvoid insert(int val){\n\t\tint x,y;\n\t\tsplit(rt,val,x,y);\n\t\trt=merge(merge(x,new(val)),y);\n\t}\n\tvoid Del(int val){\n\t\tint x,y,z;\n\t\tsplit(rt,val,x,z);\n\t\tsplit(x,val+1,x,y);\n\t\ty=merge(a[y].lc,a[y].rc);\n\t\trt=merge(merge(x,y),z); \n\t}\n\tint Find(int val){\n\t\tint res,x,y;\n\t\tsplit(rt,val+1,x,y);\n\t\tres=a[x].sz+1;\n\t\trt=merge(x,y);\n\t\treturn res;\n\t}\n\tint Kth(int rank){\n\t\treturn a[getk(rt,rank)].val;\n\t}\n}T;\n\nsigned main()\n{\n\tio.read(n);\n\tfor (;n--;)\n\t{\n\t\tint op,x;\n\t\tio.read(op),io.read(x);\n\t\tint y=abs(x);\n\t\tsum+=x;\n\t\tint rk=T.Find(y);\n\t\tif(x>0) \n\t\t{\n\t\t\tif(rk<=cnt) pre1+=(y-T.Kth(cnt));\n\t\t\tif(rk<=cnt+1) pre2+=(y-T.Kth(cnt+1));\n\t\t\tT.insert(y);\n\t\t\tif(op==1)\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t\tpre1+=T.Kth(cnt);\n\t\t\t\tpre2+=T.Kth(cnt+1);\n\t\t\t\tS.insert(y);\n\t\t\t}\n\t\t\tif(T.Find(*S.begin())==cnt) ans=sum+pre2-*S.begin();\n\t\t\telse ans=sum+pre1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(rk<=cnt) pre1-=(y-T.Kth(cnt+1));\n\t\t\tif(rk<=cnt+1) pre2-=(y-T.Kth(cnt+2));\n\t\t\tT.Del(y);\n\t\t\tif(op==1)\n\t\t\t{\n\t\t\t\tpre1-=T.Kth(cnt);\n\t\t\t\tpre2-=T.Kth(cnt+1);\n\t\t\t\tcnt--;\n\t\t\t\tS.erase(y);\n\t\t\t}\n\t\t\tif(cnt&&T.Find(*S.begin())==cnt) ans=sum+pre2-*S.begin();\n\t\t\telse ans=sum+pre1;\n\t\t}\n\t\tio.write(ans);\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n\t\t\t\n\t\t\t\n\t\t\t\n\n```\n",
        "postTime": 1597458546,
        "uid": 308464,
        "name": "\u5947\u7c73",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1398E \u3010Two Types of Spells\u3011"
    },
    {
        "content": "~~\u6bd4\u8d5b\u7684\u65f6\u5019\u8111\u5b50\u62bd\u4e86\uff0c\u7adf\u7136\u9009\u62e9\u7528\u4e86\u5806\uff0c\u7b80\u76f4\u662fzz~~\n## SET\u2014\u2014\u6c38\u8fdc\u6ef4\u795e\uff08\u5f53\u524d\u6700\u4f18\u89e3\uff0c\u65f6\u95f44.22s\uff09\n\n\u770b\u5230\u9898\u89e3\u4e2d\u5404\u8def\u795e\u4ed9\u8f88\u51fa\uff0c\u5e73\u8861\u6811\u7ebf\u6bb5\u6811\u5404\u79cd\u5927\u6cd5\u90fd\u6709\uff0c\u4f46\u90fd\u6ca1\u6709\u7528set\u7684\u4eba\uff0c\u90a3\u4e48\u6211\u5c31\u6765\u5199\u4e00\u53d1set\u7684\u9898\u89e3\u3002\n\n### 1.\u9898\u610f\n\n\u6709\u706b\u5492\u548c\u95ea\u5492\u4e24\u79cd\u5492\u8bed\uff0c\u5176\u4e2d\u95ea\u5492\u6709\u7ed9\u4e0b\u4e00\u4e2a\u5492\u8bed2\u500d\u4f24\u5bb3\u7684\u52a0\u6210\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u8981\u6c42\u6700\u5927\u4f24\u5bb3\uff0c\u81ea\u7136\u5e94\u5f53\u628a\u524d $k$ \u5927\u7684\u5492\u8bed\u653e\u5728 $k$ \u4e2a\u95ea\u5492\u7684\u540e\u9762\uff0c\u8fd9\u6837\u80fd\u4f7f\u4f24\u5bb3\u589e\u52a0\u7684\u6700\u591a\u3002\u4f46\u6709\u4e24\u79cd\u60c5\u51b5\u8981\u7279\u6b8a\u5224\u65ad\uff0c\n\n**A.\u6700\u5c0f\u7684\u95ea\u5492\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u7ffb\u500d\uff0c\u8fd0\u7528\u53cd\u8bc1\u6cd5\uff0c\u5982\u679c\u5b83\u88ab\u7ffb\u500d\uff0c\u8bf4\u660e\u5728\u5b83\u4e4b\u524d\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6ca1\u6709\u88ab\u7ffb\u500d\u7684\u95ea\u5492\uff0c\u5219\u4ea4\u6362\u4e24\u8005\u987a\u5e8f\u80fd\u83b7\u5f97\u66f4\u4f18\u89e3** \n\n**B.\u5373\u5168\u90e8\u90fd\u662f\u95ea\u5492\uff0c\u8fd9\u65f6\u6700\u540e\u4e00\u4e2a\u4e5f\u662f\u6700\u5927\u7684\u95ea\u5492\u540e\u9762\u662f\u7a7a\u7684\uff0c\u6700\u5c0f\u7684\u95ea\u5492\u6ca1\u6709\u529e\u6cd5\u7ffb\u500d**\n\n**\u603b\u7ed3\uff1a\u6700\u5c0f\u7684\u95ea\u5492\u4e0d\u80fd\u7ffb\u500d** \n\n\u4f8b\u5982 $1 3 4 5 7$\uff0c\u90a3\u4e48 $7$ \u540e\u9762\u6ca1\u6709\u5492\u8bed\uff0c\u65e0\u9700\u7ffb\u500d\uff0c1\u524d\u9762\u6ca1\u6709\u95ea\u5492\uff0c\u4e0d\u80fd\u7ffb\u500d\n\n### 2.\u601d\u8def\n\n\u5927\u81f4\u641e\u5b9a\u9898\u610f\u8981\u6c42\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u5728\u6bcf\u4e00\u6b21\u4fee\u6539\u540e\u76f4\u63a5\u5f97\u5230\u7b54\u6848\u5462\uff1f\u6211\u5f53\u65f6\u60f3\u5230\u7684\u5bf9\u9876\u5806\u7684\u65b9\u6cd5\uff0c\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u662f\u53ef\u884c\u7684\uff0c\u53ea\u4e0d\u8fc7\u7528\u7684\u662fset\uff08qwq\uff09\u3002\u6211\u4eec\u7528 $q$ \u8868\u793a\u5b58\u524dlen\u5927\u4f24\u5bb3\u7684\u5492\u8bed\u7684\u96c6\u5408\uff08len\u8868\u793a\u95ea\u5492\u7684\u4e2a\u6570\uff09\uff0c$p$ \u8868\u793a\u5b58\u5269\u4f59\u7684 **\u4e0d\u662f\u6700\u5c0f\u95ea\u5492\u7684** \u5492\u8bed\u96c6\u5408\uff0c $s$ \u8868\u793a\u5b58**\u6240\u6709**\u95ea\u5492\u7684\u96c6\u5408\u3002\n\n\u4e0b\u9762\u662f\u5f88\u5173\u952e\u7684\u4e00\u6b65\uff1a**\u8c03\u6574**\n\n\u5982\u679c\u8bf4 $q$ \u4e2d\u653e\u7684\u4e0d\u662f\u6700\u4f18\u89e3\u6216\u8005\u4e0d\u5408\u6cd5\u600e\u4e48\u529e\uff1f\n\n1.$q$ \u4e2d\u5143\u7d20\u4e2a\u6570\u8d85\u8fc7\u95ea\u5492\u4e2a\u6570\uff0c\u90a3\u4e48\u628a $q$ \u4e2d\u6700\u5c0f\u503c\u53bb\u6389\u5e76\u653e\u5230 $p$ \u4e2d\n\n2.$q$ \u4e2d\u5143\u7d20\u4e2a\u6570\u5c11\u4e8e\u95ea\u5492\u4e2a\u6570\uff0c\u90a3\u4e48 **\u5982\u679c $p$ \u4e2d\u5143\u7d20\u4e2a\u6570\u4e3a0\uff0c\u8bf4\u660e\u5f53\u524d\u5168\u90e8\u662f\u95ea\u5492\uff0c\u5c31\u4e0d\u9700\u8981\u64cd\u4f5c\uff0c\u5426\u5219\u5c06 $p$ \u4e2d\u6700\u5927\u503c\u53bb\u6389\u5e76\u653e\u8fdb $q$**\n\n3.\u5982\u679c $q$ \u4e2d\u5143\u7d20\u4e2a\u6570\u7b49\u4e8e\u95ea\u5492\u7684\u4e2a\u6570\u4f46\u653e\u7684\u4e0d\u662f\u6700\u4f18\u89e3\uff0c\u5373 $p$ \u4e2d\u5b58\u5728\u6700\u5927\u503c $A$ \u6bd4 $q$ \u4e2d\u6700\u5c0f\u503c $B$ \u5927\uff0c\u90a3\u4e48\u4ea4\u6362 $A$ \u548c $B$\uff0c\u91cd\u590d\u6267\u884c\u8be5\u64cd\u4f5c\u76f4\u81f3 $q$ \u4e2d\u653e\u7740\u6700\u4f18\u89e3\u4e3a\u6b62\u3002\n\nps:\u5728\u8c03\u6574\u4e2d\uff0c\u53ef\u4ee5\u8bb0 $ans$ \u4e3a $q$ \u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c\uff0c\u6bcf\u4e00\u6b21\u5bf9 $q$ \u64cd\u4f5c\u65f6\uff0cans\u4e5f\u76f8\u5bf9\u5e94\u64cd\u4f5c\uff0c\u5c31\u80fd\u5728\u5355\u4f4d\u65f6\u95f4\u5185\u8bb0\u5f55\u4e0b\u603b\u548c\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\u5206\u6210\u4ee5\u4e0b\u56db\u7c7b\uff1a\n\n1.\u52a0\u4e00\u4e2a\u706b $X$\uff0c\u76f4\u63a5\u5f80 $p$ \u91cc\u9762\u4e22\uff0c\u8c03\u6574\u89c1\u4e0a\u3002\n\n2.\u52a0\u4e00\u4e2a\u95ea $X$\uff0c\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u4efb\u4f55\u95ea\u5492\uff0c\u5219\u4e0d\u52a0\u5165 $p$\uff0c\u5426\u5219\u4e0e\u5f53\u524d\u95ea\u5492\u96c6\u5408 $s$ \u4e2d\u6700\u5c0f\u503c $Y$ \u8fdb\u884c\u6bd4\u8f83\uff0c**\u5982\u679c \u5f53\u524d\u95ea\u5492\u6bd4 $Y$ \u8fd8\u8981\u5c0f\uff0c\u8bf4\u660e $X$ \u662f\u6240\u6709\u95ea\u5492\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6b64\u65f6\u5e94\u5f53\u628a $Y$ \u52a0\u5165 $P$ \u4e2d\uff08\u5b83\u4e0d\u662f\u6700\u5c0f\u503c\uff0c\u53ef\u80fd\u6709\u88ab\u7ffb\u500d\u7684\u6982\u7387\uff09,\u800c\u4e0d\u662f\u52a0\u5165 $X$\u3002**\n\u64cd\u4f5c\u5b8c\u540e\uff0c\u628a $X$ \u52a0\u5165 $s$\uff0c\u8c03\u6574\u89c1\u4e0a\n\n3.\u5220\u4e00\u4e2a\u706b $X$, \u5728 $p$ \u548c $q$ \u4e2d\u627e\u4e00\u4e0b\uff0c\u5220\u6389\u5b83\u5c31\u884c\u4e86\uff0c\u8c03\u6574\u89c1\u4e0a\u3002\n\n4.\u5220\u4e00\u4e2a\u95ea $X$, \u7c7b\u6bd42\uff0c\u5148\u5728 $s$ \u4e2d\u5220\u53bb $X$, \u5982\u679c\u5220\u5b8c\u540e\u6ca1\u6709\u95ea\u5492\u4e86\uff0c\u5219\u6ca1\u6709\u4efb\u4f55\u5176\u4f59\u64cd\u4f5c\uff0c\u5426\u5219\u5e94\u5f53\u6bd4\u8f83\u5f53\u524d\u95ea\u5492\u96c6\u5408 $s$ \u4e2d\u7684\u6700\u5c0f\u503c $Y$ \u4e0e $X$ \u7684\u5927\u5c0f\uff1a\n\n**A\uff1a\u5982\u679c $Y$ \u5927\u4e8e $X$, \u8bf4\u660e\u5220\u53bb\u7684 $X$ \u672c\u6765\u662f\u6700\u5c0f\u503c\uff0c\u90a3\u4e48 $Y$ \u672c\u6765\u662f\u5728 $p$ \u6216 $q$ \u4e2d\u5019\u9009\u7684\uff0c\u73b0\u5728\u8981\u628a $Y$ \u4ece $p$ \u6216 $q$ \u4e2d\u5220\u9664**\n\n**B:\u5982\u679c $Y$ \u5c0f\u4e8e $X$, \u8bf4\u660e\u539f\u6765\u7684\u6700\u5c0f\u503c\u4e0d\u662f $X$\uff0c \u5219 $X$ \u672c\u6765\u662f\u5728 $p$ \u6216 $q$ \u4e2d\u5019\u9009\u7684\uff0c\u73b0\u5728\u8981\u628a $X$ \u4ece $p$ \u6216 $q$ \u5220\u9664**\n\u64cd\u4f5c\u5b8c\u540e\uff0c\u8c03\u6574\u89c1\u4e0a\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u5f53\u524d\u5229\u7528\u95ea\u5492\u7ffb\u500d\u80fd\u589e\u52a0\u7684\u6700\u591a\u7684\u4f24\u5bb3 $ans$ \u3002\u52a0\u4e0a\u672c\u6765\u6240\u6709\u5492\u8bed\u7684\u4f24\u5bb3 $sum$ \u5c31\u662f\u5f53\u524d\u7684\u7b54\u6848\u3002\n\n**\u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\uff1a\u5806\u4e0d\u80fd\u5220\u9664\uff01\u5806\u4e0d\u80fd\u5220\u9664\uff01\u5806\u4e0d\u80fd\u5220\u9664\uff01**\n\n### 3.\u4ee3\u7801\u5b9e\u73b0\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\ninline void readin(T &x) {\n    x = 0;\n    T fh = 1;\n    char ch = getchar();\n    for (; !isdigit(ch); ch = getchar()) if (ch == '-') fh = -1;\n    for (; isdigit(ch); ch = getchar()) x = (x << 1) + (x << 3) + (ch ^ 48);\n    x *= fh;\n}\ntemplate <typename T>\ninline void wt(T x) {\n    if (x > 9) wt(x / 10);\n    putchar(x % 10 + 48);\n}\ntemplate <typename T>\ninline void writeln(T x, char c) {\n    if (x < 0) {\n        putchar('-');\n        x = -x;\n    }\n    wt(x);\n    putchar(c);\n}\nconst int N = 2e5 + 5;\nset <int> s, q, p;\nint len;\nlong long ans = 0;\ninline void check() { // \u8c03\u6574\n    int cnt = q.size();\n    set <int> :: iterator ip, iq;\n    while(cnt < len && !p.empty()) {\n        ip = p.end();\n        ip --;\n        ans += *ip;\n        q.insert(*ip);\n        p.erase(ip);\n        cnt ++;\n    }\n    while(cnt > len) {\n        iq = q.begin();\n        ans -= *iq;\n        p.insert(*iq);\n        q.erase(iq);\n        cnt --;\n    }\n    while(!q.empty() && !p.empty()) {\n        ip = p.end();\n        ip --;\n        iq = q.begin();\n        if (*ip > *iq) {\n            int tmp = *ip;\n            ans += *ip - *iq;\n            p.erase(ip);\n            p.insert(*iq);\n            q.insert(tmp);\n            q.erase(iq);\n        }\n        else break;\n    }\n\n}\nint main() {\n    int n, opt, num;\n    readin(n);\n    len = 0;\n    long long sum = 0;\n    while(n --) {\n        readin(opt); readin(num);\n        sum += num;\n        if (opt == 0) {\n            if (num > 0) {\n                p.insert(num);\n            }\n            else {\n                num = -num;\n                if (p.find(num) != p.end()) p.erase(num);\n                else {\n                    q.erase(num); \n                    ans -= num;\n                }\n            }\n        }\n        else{\n            if (num > 0) {\n                len ++;\n                if (s.size() && num < *s.begin()) {\n                    p.insert(*s.begin());\n                }\n                else if (s.size() && num > *s.begin()){\n                    p.insert(num);\n                }\n                s.insert(num);\n            }\n            else {\n                num = -num;\n                len --;\n                s.erase(num);\n                if (s.size() && *s.begin() > num) {\n                    if (p.find(*s.begin()) != p.end()) p.erase(*s.begin());\n                    else {\n                        ans -= *s.begin();\n                        q.erase(*s.begin());\n                    }\n                }\n                else if (s.size()) {\n                    if (p.find(num) != p.end()) p.erase(num);\n                    else {\n                        ans -= num;\n                        q.erase(num);\n                    } \n                }\n            }\n        }\n        check();\n        writeln(ans + sum, '\\n');\n    }\n    return 0;\n}\n```",
        "postTime": 1597549385,
        "uid": 46820,
        "name": "Wall_breaker",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1398E \u3010Two Types of Spells\u3011"
    },
    {
        "content": "## \u9898\u89e3\u7b80\u8ff0\n\n\u6709\u4e24\u79cd\u7b26\u5492\uff0c\u5f53 $tp_i = 0$ \u65f6\uff0c\u7b2c $i$ \u4e2a\u7b26\u5492\u80fd\u4ea7\u751f $d_i$ \u70b9\u653b\u51fb\u529b\uff0c\u5f53 $tp_i = 1$ \u65f6\uff0c\u7b2c $i$ \u4e2a\u80fd\u4ea7\u751f $d_i$ \u70b9\u653b\u51fb\u529b\uff0c\u5e76\u4f7f\u4e0b\u4e00\u4e2a\u4f7f\u7528\u7684\u7b26\u5492\u4ea7\u751f\u7684\u653b\u51fb\u529b\u7ffb\u500d\u3002\n\n\u6bcf\u6b21\u6218\u6597\uff0c\u6bcf\u4e2a\u7b26\u5492\u53ef\u4ee5\u4f7f\u7528\u4e00\u6b21\uff0c\u800c\u4f7f\u7528\u987a\u5e8f\u662f\u4efb\u610f\u7684\u3002\n\n\u6709 $n$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4f60\u4f1a\u5f97\u5230\u4e00\u79cd\u7b26\u5492\uff0c\u6216\u5931\u53bb\u4e00\u79cd\u7b26\u5492\u3002\u95ee\u7b2c $i$ \u6b21\u64cd\u4f5c\u540e\uff0c\u6218\u6597\u80fd\u4ea7\u751f\u7684\u653b\u51fb\u529b\u7684\u6700\u5927\u503c\u3002\n\n## \u601d\u8def\n\n\u53c2\u8003\u4e86 Codeforces \u4e0a\u4ee3\u7801\u6700\u77ed\u7684\u4eba\u7684\u4ee3\u7801\u3002\uff08\u8fd8\u4e0d\u662f\u56e0\u4e3a\u6ca1\u9898\u89e3/baojin\uff09\n\n\u9996\u5148\uff0c\u4e0d\u8003\u8651\u7ffb\u500d\u7684\u6548\u679c\uff0c\u5f53\u524d\u80fd\u4ea7\u751f\u7684\u653b\u51fb\u529b\u5c31\u662f\u5f53\u524d\u62e5\u6709\u7b26\u5492\u7684 $d$ \u7684\u548c\u3002\n\n\u90a3\u4e48\u5269\u4e0b\u7684\u5c31\u662f\u8003\u8651\u5982\u4f55\u4f7f\u7528\u7ffb\u500d\uff0c\u4f7f\u653b\u51fb\u529b\u6700\u5927\u5316\u4e86\u3002\n\n\u8bbe $tot$ \u4e3a $tp=1$ \u7684\u7b26\u5492\u7684\u6570\u91cf\u3002\u7ffb\u500d\u7684\u80af\u5b9a\u662f\u524d $tot$ \u4e2a\u5f53\u524d\u62e5\u6709\u7684\u7b26\u5492\u7684 $d$ \u6700\u5927\u7684\u7b26\u5492\u3002\u56e0\u4e3a\u53ef\u80fd\u4f1a\u5931\u53bb\u7b26\u5492\uff0c\u6240\u4ee5\u8981\u7ef4\u62a4\u5f53\u524d\u62e5\u6709\u7b26\u5492\u7684 $d$ \u4ece\u5927\u5230\u5c0f\u7684\u524d $tot$ \u4e2a\u3002\n\n\u5bf9\u4e8e\u8fd9\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528 set\uff0cset \u4e2d\u7684\u5143\u7d20\u662f\u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\uff0c\u800c\u63d2\u5165\u548c\u5220\u9664\u7684\u64cd\u4f5c\u90fd\u662f $O(\\log n)$\u3002\n\n\u5f00\u4e09\u4e2a set\uff0c$\\text{fire}$ \u5b58 $tp=0$ \u7684\u7b26\u5492\u7684 $d$\uff0c$\\text{lightning}$ \u5f53\u524d\u7ffb\u500d\u7684\u7b26\u5492\u7684 $d$\uff0c$\\text{remaining}$ \u5b58\u5f53\u524d\u62e5\u6709\u7684\u7b26\u5492\u6ca1\u7ffb\u500d\u7684\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c$\\text{remaining}$ \u4e2d\u4efb\u610f\u4e00\u4e2a\u503c\u4e00\u5b9a\u6bd4 $\\text{lightning}$ \u4e2d\u4efb\u610f\u4e00\u4e2a\u503c\u5c0f\u6216\u7b49\u4e8e\u3002\n\n$tot$ \u7684\u503c\u662f $tp=1$ \u7684\u7b26\u5492\u7684\u6570\u91cf\uff0c$ans$ \u7684\u503c\u662f\u5f53\u524d\u80fd\u9020\u6210\u7684\u4f24\u5bb3\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u7b26\u5492\uff0c\u5148\u76f4\u63a5\u7d2f\u8ba1 $d$ \u5230 $ans$\u3002\n\n\u5bf9\u4e8e $tp=0$ \u7684\u7b26\u5492\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u76f4\u63a5\u5bf9 $\\text{fire}$ \u8fdb\u884c $insert$ \u548c $erase$\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u7684\u7b26\u5492\u7684\u64cd\u4f5c\uff0c\n\n- \u5f53 $d > 0$ \u65f6\uff0c\u5982\u679c\u6bd4 $\\text{remaining}$ \u6700\u5927\u7684\u503c\u5c0f\uff0c\u90a3\u4e48\u76f4\u63a5\u63d2\u5165\u5230 $\\text{remaining}$ \u4e2d\uff0c\u5426\u5219\u63d2\u5165\u5230 $\\text{lightning}$ \u4e2d\u3002\n\n- \u5f53 $d < 0$ \u65f6\uff0c\u5982\u679c\u6bd4 $\\text{remaining}$ \u6700\u5927\u7684\u503c\u5c0f\uff0c\u90a3\u4e48\u5728 $\\text{remaining}$ \u4e2d\u5220\u9664\uff0c\u5426\u5219\u5728 $\\text{lightning}$ \u4e2d\u5220\u9664\u3002\n\n- \u63d2\u5165\u6216\u5220\u9664\u9700\u8981\u66f4\u65b0 $ans$ \u7684\u503c\u3002\u5f53 $tp=1$ \u65f6\uff0c\u9700\u8981\u66f4\u65b0 $tot$ \u7684\u503c\u3002\n\n- \u4e4b\u540e\u9700\u8981\u5bf9 $\\text{lightning}$ \u8fdb\u884c\u7ef4\u62a4\uff0c\u56e0\u4e3a $\\text{lightning}$ \u7684\u5927\u5c0f $size$ \u8981\u4e0e $tot$ \u76f8\u7b49\u3002\n\n  - \u82e5 $\\text{lightning}$ \u7684 $size$ \u5927\u4e8e $tot$\uff0c\u90a3\u4e48\u9700\u8981\u4ece $\\text{lightning}$ \u4e2d $erase$ \u6389\u524d $size - tot$ \u4e2a\u6700\u5c0f\u7684\u503c\uff0c\u5e76\u628a\u8fd9\u4e9b\u503c\u63d2\u5165\u5230 $\\text{remaining}$\u3002\n  - \u82e5 $\\text{lightning}$ \u7684 $size$ \u5c0f\u4e8e $tot$\uff0c\u90a3\u4e48\u8981\u4ece $\\text{remaining}$ \u4e2d $erase$ \u524d $tot - size$ \u4e2a\u6700\u5927\u7684\u503c\uff0c\u5e76\u628a\u8fd9\u4e9b\u503c\u63d2\u5165\u5230 $\\text{lightning}$ \u4e2d\u3002\u7ef4\u62a4\u7684\u540c\u65f6\u66f4\u65b0 ans\u3002\n\n\u90a3\u4e48\u5f53\u524d\u8981\u8f93\u51fa\u7684\u503c\u5c31\u662f $ans$ \u4e86\u3002\u4f46\u6ce8\u610f\u5230\u6700\u540e\u4e00\u4e2a\u7ffb\u500d\u7684\u7b26\u5492\u4e00\u5b9a $tp=0$\uff0c\u6240\u4ee5\u8f93\u51fa\u65f6\u8981\u5bf9 $ans$ \u8fdb\u884c\u5c0f\u4fee\u6539\uff0c\u5373 $ans$ \u4e5f\u52a0\u4e0a `min((lightning.size() ? (fire.size() ? *fire.rbegin() : 0) - *lightning.begin() : 0), 0)`\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\n#define ll long long\n#define y1 caibictq\n#define P pair<int, int>\n#define fi first\n#define se second\n\nusing namespace std;\n\nconst int MAXN = 200010;\nconst int MAXM = 100010;\nconst int mod = 1e9 + 7;\nconst int INF = 0x3f3f3f3f;\n\nint n, m, k;\nll tot, cnt, ans;\n\nset<int> fire, lightning, all;\n\nint main() {\n\tint T;\n\tscanf(\"%d\", &n);\n\tfor (int i = 1, tp, d; i <= n; i++) {\n\t\tscanf(\"%d%d\", &tp, &d);\n\t\tif (d > 0) {\n\t\t\tans += d;\n\t\t\tif (tp) ++tot;\n\t\t\telse fire.insert(d);\n\t\t\tif (all.size() && d < *all.rbegin()) all.insert(d);\n\t\t\telse {\n\t\t\t\tlightning.insert(d);\n\t\t\t\tans += d;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tans += d;\n\t\t\tif (tp) --tot;\n\t\t\telse fire.erase(-d);\n\t\t\tif (all.size() && -d <= *all.rbegin()) all.erase(-d);\n\t\t\telse {\n\t\t\t\tlightning.erase(-d);\n\t\t\t\tans += d;\n\t\t\t}\n\t\t}\n\t\twhile (lightning.size() < tot) {\n\t\t\tans += *all.rbegin();\n\t\t\tlightning.insert(*all.rbegin());\n\t\t\tall.erase(--all.end());\n\t\t}\n\t\twhile (lightning.size() > tot) {\n\t\t\tans -= *lightning.begin();\n\t\t\tall.insert(*lightning.begin());\n\t\t\tlightning.erase(lightning.begin());\n\t\t}\n\t\tprintf(\"%lld\\n\", ans + min((lightning.size() ? (fire.size() ? *fire.rbegin() : 0) - *lightning.begin() : 0), 0));  \n\t}\n\treturn 0;\n}\n/*\n6\n1 5\n0 10\n1 -5\n0 5\n1 11\n0 -10\n*/\n```\n\n\u8fd9\u65f6\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u5927\u5bb6\u60f3\u7528\u5c31\u7528\u5427\u3002\n\n```cpp\n\t\tif (fire.size()) printf(\"set fire: \");\n        for (set<int>::iterator it = fire.begin(); it != fire.end(); ++it) {\n        \tprintf(\"%d \", *it);\n\t\t}\n\t\tif (fire.size()) printf(\"\\n\");\n        if (all.size()) printf(\"set all: \");\n        for (set<int>::iterator it = all.begin(); it != all.end(); ++it) {\n        \tprintf(\"%d \", *it);\n\t\t}\n\t\tif (all.size()) printf(\"\\n\");\n        if (lightning.size()) printf(\"set lightning: \");\n        for (set<int>::iterator it = lightning.begin(); it != lightning.end(); ++it) {\n        \tprintf(\"%d \", *it);\n\t\t} \n\t\tif (lightning.size()) printf(\"\\n\");\n```",
        "postTime": 1597492164,
        "uid": 18673,
        "name": "ctq1999",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1398E Two Types of Spells"
    },
    {
        "content": "fhq Treap \u89e3\u6cd5\n\n\u9898\u76ee\u8981\u6c42\u6211\u4eec\u652f\u6301\u63d2\u5165\u548c\u5220\u9664\u4e24\u79cd\u5492\u8bed\uff0c\u5176\u4e2d\u653e\u5728\u7535\u4e4b\u5492\u540e\u4e00\u4e2a\u7684\u5492\u8bed\u6548\u679c\u4f1a\u7ffb\u500d\u3002\n\n\u8bbe $cnt_{0/1}$ \u8868\u793a\u5f53\u524d \u706b\u4e4b\u5492/\u7535\u4e4b\u5492 \u7684\u4e2a\u6570\u3002\n\n\u8003\u8651\u5982\u4f55\u6c42\u8fd9\u4e2a\u6700\u5927\u503c\u3002\u9996\u5148\u7535\u4e4b\u5492\u7684\u7ffb\u500d\u6548\u679c\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u5728\u653b\u51fb\u529b\u6700\u5927\u7684\u5492\u8bed\u4e0a\u3002\u6240\u4ee5\u6bcf\u6b21\u6c42\u51fa\u6700\u5927\u7684 $cnt_1$ \u4e2a\u6570\uff0c\u5c06\u5b83\u4eec\u7684\u653b\u51fb\u529b $\\times 2$ \u7b97\u5165\u7b54\u6848\u3002\n\n\u663e\u7136\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u6700\u5927\u7684 $cnt_1$ \u4e2a\u5492\u8bed\u90fd\u662f\u7535\u4e4b\u5492\u3002\u6b64\u65f6\u5c06\u653b\u51fb\u529b\u7b2c $cnt_1$ \u5927\u7684\u7535\u4e4b\u5492\u7684\u6548\u679c\u53d8\u6210\u4e00\u500d\uff0c\u7136\u540e\u5728\u5269\u4f59\u7684\u5492\u8bed\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u4e2d\u53d6\u6700\u5927\u7684\u7ffb\u500d\u3002\n\n\u5e73\u8861\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n$\\text{Code}$\uff1a\n\n```cpp\ndef(N, int, 2e5 + 5);\n\nstruct fhq {\n    int ls, rs, sze, rnd;\n    int x, tp, c[2];\n    ll sum;\n} t[N];\n\nint q;\nint root;\nint cnt[2], sz;\nll sum;\n\nint New(int op, int x) {\n    static int r = 0;\n    ++r;\n\n    t[r].ls = t[r].rs = 0;\n    t[r].sze = 1;\n    t[r].rnd = rand();\n    t[r].x = t[r].sum = x;\n    t[r].tp = op;\n    ++t[r].c[op];\n\n    return r;\n}\n\nvoid pushup(int x) {\n    t[x].sze = t[t[x].ls].sze + t[t[x].rs].sze + 1;\n    t[x].sum = t[t[x].ls].sum + t[t[x].rs].sum + t[x].x;\n    t[x].c[0] = t[t[x].ls].c[0] + t[t[x].rs].c[0] + (t[x].tp == 0);\n    t[x].c[1] = t[t[x].ls].c[1] + t[t[x].rs].c[1] + (t[x].tp == 1);\n}\n\nint merge(int x, int y) {\n    if(!x || !y) return x + y;\n    if(t[x].rnd < t[y].rnd) {\n        t[x].rs = merge(t[x].rs, y);\n        pushup(x);\n        return x;\n    }\n    else {\n        t[y].ls = merge(x, t[y].ls);\n        pushup(y);\n        return y;\n    }\n}\n\nvoid split(int rt, int &x, int &y, int k) {\n    if(!rt) return x = y = 0, void();\n    if(t[rt].x <= k) {\n        x = rt;\n        split(t[x].rs, t[x].rs, y, k);\n    }\n    else {\n        y = rt;\n        split(t[y].ls, x, t[y].ls, k);\n    }\n    pushup(rt);\n}\n\nvoid insert(int op, int x) {\n    int l, r;\n    split(root, l, r, x - 1);\n    root = merge(l, merge(New(op, x), r));  \n}\n\nvoid del(int x) {\n    int l, mid, r;\n    split(root, l, r, x - 1);\n    split(r, mid, r, x);\n    root = merge(l, r);\n}\n\nint kth(int rt, int k) {\n    while(1) {\n        if(t[t[rt].ls].sze + 1 == k) return t[rt].x;\n        if(t[t[rt].ls].sze + 1 < k) k -= t[t[rt].ls].sze + 1, rt = t[rt].rs;\n        else rt = t[rt].ls;\n    }\n}\n\nll calc() {\n    ll ret = sum;\n    if(!cnt[1]) return ret;\n    int nw = kth(root, t[root].sze - cnt[1] + 1);\n    int l, r;\n    split(root, l, r, nw - 1);\n    if(t[r].c[1] == cnt[1]) {\n        ret += t[r].sum;\n        ret -= kth(r, 1);\n        if(t[l].sze) ret += kth(l, t[l].sze);\n    }\n    else ret += t[r].sum;\n    root = merge(l, r);\n    return ret;\n}\n\nint main() {\n    srand(19260817);\n    qread(q);\n    W(q) {\n        int op, x;\n        qread(op, x);\n        sum += x;\n        if(x < 0) {\n            --sz;\n            --cnt[op];\n            del(-x);\n        }\n        else {\n            ++sz;\n            ++cnt[op];\n            insert(op, x);\n        }\n        printf(\"%lld\\n\", calc());\n    }\n\treturn 0;\n}\n```\n",
        "postTime": 1635933826,
        "uid": 242543,
        "name": "BreezeEnder",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1398E Two Types of Spells"
    },
    {
        "content": "\u8d5b\u573a\u4e0a\u8fd9\u9053\u9898\u6ca1\u6765\u5f97\u53ca\u4ea4\uff0c\u8d5b\u540e\u6765\u9610\u8ff0\u4e00\u4e0b\u601d\u8def\u3002\n\n\u8981\u60f3\u7ed3\u679c\u6700\u4f18\uff0c\u5c31\u8981\u4fdd\u8bc1\u96f7\u7535\u8981\u7528\u5728\u5927\u7684power\u6cd5\u672f\u4e4b\u524d\u3002\n\n\u6211\u4eec\u8003\u8651\u6709k\u4e2a\u96f7\u7535\u6cd5\u672f\uff0c\u5219\u6709k\u4e2a\u6cd5\u672f\u5a01\u529b\u53ef\u4ee5\u7ffb\u500d\u3002\u90a3\u4e48\u9009\u524dk\u5927\u4e2a\u80af\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u7b2c\u4e00\u6b21\u7684\u96f7\u7535\u6cd5\u672f\u662f\u4e0d\u80fd\u5f3a\u5316\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u96f7\u7535\u6cd5\u672f\u81ea\u8eab\u4e0d\u80fd\u5168\u90e8\u4e58\u4e8c\uff0c\u7b2c\u4e00\u4e2a\u4f7f\u7528\u7684\u6cd5\u672f\u5e94\u8be5\u662fpower\u6700\u5c0f\u7684\u90a3\u4e2a\u96f7\u7535\u6cd5\u672f\u3002\n\n\u6211\u4f7f\u7528\u4e86FHQTreap\u6765\u7ef4\u62a4k\u5927\u67e5\u8be2\uff0cBinaryIndexedTree\u6765\u7ef4\u62a4\u5e8f\u5217\u548c\uff0cset\u6765\u7ef4\u62a4\u96f7\u7535\u6cd5\u672f\u3002\n\n\u4f46\u5728\u64cd\u4f5c\u4e4b\u524d\uff0c\u8981\u5148\u628a\u6cd5\u672f\u79bb\u6563\u5316\uff0c\u79bb\u7ebf\u6765\u505a\u3002\n\n\u6ce8\u610f\u7ec6\u8282\uff0c\u5c31\u80fdAC\u3002\u8981\u5f00long long\u3002\n\ncode\uff1a\n\n```cpp\nconst int Maxn = 2e5 + 5;\nint n, typ[Maxn], d[Maxn], b[Maxn], t[Maxn], tot = 0, k = 0;\n\nstruct FHQTreap {\n\tint lson[Maxn], rson[Maxn], data[Maxn];\n\tint sze[Maxn], rnd[Maxn], tot, seed, root;\n\t\n\tFHQTreap(void) {\n\t\tMs(lson, 0), Ms(data, 0);\n\t\tMs(sze, 0), Ms(rnd, 0), root = 0;\n\t\tMs(rson, 0), tot = 0, seed = 1;\n\t}\n\t\n\tinline int _rand(void) { return seed *= 482711; }\n\tinline void pushup(int pos) { sze[pos] = sze[lson[pos]] + sze[rson[pos]] + 1; }\n\tinline void split(int pos, int val, int &x, int &y) {\n\t\tif (!pos) { x = y = 0; return; }\n\t\tif (data[pos] <= val) x = pos, split(rson[pos], val, rson[pos], y);\n\t\telse y = pos, split(lson[pos], val, x, lson[pos]); pushup(pos);\n\t}\n\t\n\tinline int merge(int x, int y) {\n\t\tif (!x || !y) return x + y;\n\t\tif (rnd[x] < rnd[y]) return rson[x] = merge(rson[x], y), pushup(x), x;\n\t\telse return lson[y] = merge(x, lson[y]), pushup(y), y;\n\t}\n\t\n\tinline void insert(int val) {\n\t\tint x, y, pos = ++tot; sze[pos] = 1;\n\t\tdata[pos] = val, rnd[pos] = _rand();\n\t\tsplit(root, val, x, y);\n\t\troot = merge(merge(x, pos), y);\n\t}\n\t\n\tinline void remove(int val) {\n\t\tint x, y, z;\n\t\tsplit(root, val - 1, x, y);\n\t\tsplit(y, val, y, z);\n\t\tif (y) y = merge(lson[y], rson[y]);\n\t\troot = merge(x, merge(y, z));\n\t}\n\t\n\tinline int query_rank(int val) {\n\t\tint x, y, ret;\n\t\tsplit(root, val - 1, x, y);\n\t\tret = sze[x] + 1, root = merge(x, y);\n\t\treturn ret;\n\t}\n\t\n\tinline int select(int kth) {\n\t\tint pos = root; chkmin(kth, sze[root]);\n\t\tif (kth == 0) return 0;\n\t\twhile (kth != sze[lson[pos]] + 1)\n\t\t\tif (kth <= sze[lson[pos]]) pos = lson[pos];\n\t\t\telse kth -= sze[lson[pos]] + 1, pos = rson[pos];\n\t\treturn data[pos];\n\t}\n\t\n\tinline int pred(int val) { return select(query_rank(val) - 1); }\n\tinline int succ(int val) { return select(query_rank(val + 1)); }\n} treap;\n\nstruct BinaryIndexedTree {\n\tll c[Maxn];\n\tinline void update(int pos, int val) { for (; pos <= tot; pos += lowbit(pos)) c[pos] += val; }\n//\tinline void clear(int pos) { for (; pos <= tot; pos += lowbiot(pos)) c[pos] }\n\tinline ll query(int pos) { ll ret = 0; for (; pos; pos -= lowbit(pos)) ret += c[pos]; return ret; }\n} T;\n\nset <int> sss;\n\nsigned main(void) {\n//\tfile(\"\");\n\tread(n);\n\tfor (int i = 1; i <= n; i++) {\n\t\tread(typ[i]), read(d[i]);\n\t\tif (d[i] > 0) b[++tot] = d[i], t[i] = 1;\n\t\telse t[i] = -1, d[i] = -d[i];\n\t} sort(b + 1, b + tot + 1); tot = unique(b + 1, b + tot + 1) - (b + 1);\n\t\n\tint lmn = 1 << 29;\n\tfor (int i = 1; i <= n; i++) {\n\t\td[i] = lower_bound(b + 1, b + tot + 1, d[i]) - b;\n\t\tif (typ[i] == 1) k += t[i];\n\t\tif (t[i] == 1) treap.insert(-d[i]), T.update(d[i], b[d[i]]);\n\t\telse treap.remove(-d[i]), T.update(d[i], -b[d[i]]);\n\n\t\tif (typ[i] == 1) {\n\t\t\tif (t[i] == 1) {\n\t\t\t\tif (sss.size() && d[i] < *sss.begin()) {\n\t\t\t\t\ttreap.insert(-(*sss.begin()));\n\t\t\t\t\tT.update(*sss.begin(), b[*sss.begin()]);\n\t\t\t\t}\n\t\t\t\tsss.insert(d[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (d[i] == *sss.begin()) T.update(d[i], b[d[i]]);\n\t\t\t\tsss.erase(d[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (sss.size()) {\n\t\t\ttreap.remove(-(*sss.begin()));\n\t\t\tll x = T.query(*sss.begin()) - T.query((*sss.begin()) - 1);\n\t\t\tT.update(*sss.begin(), -x);\n\t\t} else {\n\t\t\twriteln(T.query(tot)); continue;\n\t\t}\n\t\t\n\t\tint tmp = -treap.select(k); if (tmp == 0) { writeln(b[*sss.begin()] + T.query(tot)); continue; }\n\t\tll ret = T.query(tmp - 1) + (T.query(tot) - T.query(tmp - 1)) * 2 + (ll)b[*sss.begin()];\n\t\twriteln(ret);\n\t}\n//\tfwrite(pf, 1, o1 - pf, stdout);\n\treturn 0;\n}\n```\n",
        "postTime": 1597478934,
        "uid": 50925,
        "name": "EternalEpic",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1398E \u3010Two Types of Spells\u3011"
    },
    {
        "content": "\u9898\u76ee\u4e2d\u7684\u64cd\u4f5c\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u56db\u79cd\uff1a\n\n1. \u5b66\u4f1a\u4e00\u4e2a\u4f24\u5bb3\u4e3a $d$ \u7684\u706b\u7130\u6cd5\u672f\n2. \u5b66\u4f1a\u4e00\u4e2a\u4f24\u5bb3\u4e3a $d$ \u7684\u95ea\u7535\u6cd5\u672f\n3. \u5fd8\u8bb0\u4e00\u4e2a\u4f24\u5bb3\u4e3a $d$ \u7684\u706b\u7130\u6cd5\u672f\n4. \u5fd8\u8bb0\u4e00\u4e2a\u4f24\u5bb3\u4e3a $d$ \u7684\u95ea\u7535\u6cd5\u672f\n\n\u65bd\u653e\u95ea\u7535\u6cd5\u672f\u540e\u7684\u4e0b\u4e00\u4e2a\u6cd5\u672f\u4f24\u5bb3\u52a0\u500d\uff0c\u9700\u8981\u6c42\u51fa\u6bcf\u6b21\u64cd\u4f5c\u540e\u80fd\u591f\u6253\u51fa\u7684\u6700\u5927\u4f24\u5bb3\u3002\n\n\u663e\u7136\uff0c\u6211\u4eec\u8981\u5c3d\u91cf\u628a\u4f24\u5bb3\u9ad8\u7684\u6cd5\u672f\u653e\u5728\u95ea\u7535\u6cd5\u672f\u540e\u9762\u6253\u51fa\u3002\u5047\u8bbe\u6211\u4eec\u5f53\u524d\u62e5\u6709 $k$ \u4e2a\u95ea\u7535\u6cd5\u672f\uff0c\u5982\u679c\u4f24\u5bb3\u6700\u9ad8\u7684 $k$ \u4e2a\u6cd5\u672f\u5168\u90e8\u90fd\u662f\u95ea\u7535\u6cd5\u672f\uff0c\u90a3\u4e48\u8fd9 $k$ \u4e2a\u6cd5\u672f\u4e2d\u5c31\u6709\u4e00\u4e2a\u4e0d\u80fd\u88ab\u7ffb\u500d\uff0c\u800c\u5269\u4e0b\u7684\u706b\u7130\u6cd5\u672f\u4e2d\u6709\u4e00\u4e2a\u53ef\u4ee5\u88ab\u7ffb\u500d\uff0c\u4e3a\u4e86\u4f7f\u4f24\u5bb3\u6700\u5927\u5316\u5c31\u9009\u62e9\u7ffb\u500d\u4f24\u5bb3\u6700\u9ad8\u7684\u706b\u7130\u6cd5\u672f\u6765\u4ee3\u66ff\u4f24\u5bb3\u6700\u4f4e\u7684\u95ea\u7535\u6cd5\u672f\uff1b\u5982\u679c\u4f24\u5bb3\u6700\u9ad8\u7684 $k$ \u4e2a\u6cd5\u672f\u4e0d\u5b8c\u5168\u662f\u95ea\u7535\u6cd5\u672f\uff0c\u90a3\u4e48\u8fd9 $k$ \u4e2a\u6cd5\u672f\u7684\u4f24\u5bb3\u90fd\u53ef\u4ee5\u88ab\u7ffb\u500d\u3002\n\n\u7b56\u7565\u60f3\u8d77\u6765\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0b\u9762\u8003\u8651\u5982\u4f55\u5b9e\u73b0\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u95ea\u7535\u6cd5\u672f\u7684\u4e2a\u6570 $k$\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a\u652f\u6301\u63d2\u5165\u5220\u9664\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u6240\u6709\u6cd5\u672f\u4e2d\u4f24\u5bb3\u6700\u9ad8\u7684 $k$ \u4e2a\u6cd5\u672f\uff0c\u8fd8\u9700\u8981\u5224\u65ad\u8fd9 $k$ \u4e2a\u6cd5\u672f\u662f\u5426\u90fd\u662f\u95ea\u7535\u6cd5\u672f\u3002\u4e00\u4e2a\u975e\u5e38\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u4f7f\u7528\u56db\u9897\u5e73\u8861\u6811\uff0c\u5206\u522b\u7ef4\u62a4\u6240\u6709\u706b\u7130\u6cd5\u672f\u3001\u6240\u6709\u95ea\u7535\u6cd5\u672f\uff1b\u4f24\u5bb3\u6700\u9ad8\u7684 $k$ \u4e2a\u6cd5\u672f\u4ee5\u53ca\u5269\u4e0b\u7684\u4f24\u5bb3\u8f83\u4f4e\u7684\u6cd5\u672f\uff0c\u7528\u56db\u4e2a `set` \u5373\u53ef\u3002\n\n\u6bcf\u6b21\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u6839\u636e\u64cd\u4f5c\u7c7b\u578b\u4f7f\u7ef4\u62a4\u4f24\u5bb3\u6700\u9ad8\u7684 $k$ \u4e2a\u6cd5\u672f\u7684 `set` \u5927\u5c0f\u59cb\u7ec8\u7b49\u4e8e\u95ea\u7535\u6cd5\u672f\u7684\u4e2a\u6570\u3002\u540c\u65f6\u66f4\u65b0\u6240\u6709\u6cd5\u672f\u4f24\u5bb3\u4e4b\u548c $sum$ \u4e0e\u4f24\u5bb3\u6700\u9ad8\u7684 $k$ \u4e2a\u6cd5\u672f\u4f24\u5bb3\u4e4b\u548c $suml$\u3002\u901a\u8fc7\u6bd4\u8f83\u4f24\u5bb3\u6700\u4f4e\u7684\u95ea\u7535\u6cd5\u672f\u4e0e\u4f24\u5bb3\u6700\u9ad8\u7684\u706b\u7130\u6cd5\u672f\u7684\u503c\uff0c\u5224\u65ad\u4f24\u5bb3\u6700\u9ad8\u7684 $k$ \u4e2a\u6cd5\u672f\u662f\u5426\u90fd\u662f\u95ea\u7535\u6cd5\u672f\uff0c\u8ba1\u7b97\u5f53\u524d\u80fd\u6253\u51fa\u7684\u6700\u9ad8\u4f24\u5bb3\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntemplate <typename T>\ninline void read(T &x)\n{\n    T data = 0, f = 1;\n    char ch = getchar();\n    while (!isdigit(ch))\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (isdigit(ch))\n    {\n        data = (data << 3) + (data << 1) + ch - '0';\n        ch = getchar();\n    }\n    x = f * data;\n}\n\ninline int get_last(const set<int> &s)\n{\n    if (s.empty())\n        return 0;\n    auto it = s.end();\n    --it;\n    return *it;\n}\n\nset<int> big, small, fire, lightning;\n\nsigned main()\n{\n    int t;\n    read(t);\n    ll sum = 0, suml = 0;\n    while (t--)\n    {\n        int op, d;\n        read(op), read(d);\n        sum += d;\n        if (op)\n        {\n            if (d > 0)\n            {\n                lightning.insert(d);\n                if (small.empty())\n                {\n                    big.insert(d);\n                    suml += d;\n                }\n                else\n                {\n                    int p = get_last(small);\n                    if (d > p)\n                    {\n                        big.insert(d);\n                        suml += d;\n                    }\n                    else\n                    {\n                        small.erase(p);\n                        big.insert(p);\n                        small.insert(d);\n                        suml += p;\n                    }\n                }\n            }\n            else\n            {\n                d = -d;\n                lightning.erase(d);\n                int p = *big.begin();\n                if (d >= p)\n                {\n                    big.erase(d);\n                    suml -= d;\n                }\n                else\n                {\n                    small.erase(d);\n                    big.erase(p);\n                    small.insert(p);\n                    suml -= p;\n                }\n            }\n        }\n        else\n        {\n            if (d > 0)\n            {\n                fire.insert(d);\n                if (big.empty())\n                    small.insert(d);\n                else\n                {\n                    int p = *big.begin();\n                    if (d > p)\n                    {\n                        big.erase(p);\n                        small.insert(p);\n                        big.insert(d);\n                        suml += d - p;\n                    }\n                    else\n                        small.insert(d);\n                }\n            }\n            else\n            {\n                d = -d;\n                fire.erase(d);\n                if (big.empty())\n                    small.erase(d);\n                else\n                {\n                    int p = *big.begin();\n                    if (d >= p)\n                    {\n                        int q = get_last(small);\n                        big.erase(d);\n                        small.erase(q);\n                        big.insert(q);\n                        suml += q - d;\n                    }\n                    else\n                        small.erase(d);\n                }\n            }\n        }\n        if (fire.empty() || (!lightning.empty() && get_last(fire) < *lightning.begin()))\n            cout << sum + suml - *big.begin() + get_last(small) << '\\n';\n        else\n            cout << sum + suml << '\\n';\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1597476760,
        "uid": 256465,
        "name": "Theophania",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1398E \u3010Two Types of Spells\u3011"
    }
]