[
    {
        "content": "\u602a\u7684\u602a\u7684\uff0c\u4e3a\u5565\u6ca1\u9898\u89e3\u554a\u3002\n\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u662f\u5177\u6709\u8d2a\u5fc3\u6027\u8d28\u7684\u3002\u5fc5\u7136\u662f\u4ece $x$ \u5206\u51fa\u7684\u6700\u5927 size \u8fde\u901a\u5757\u91cc\u627e\u51fa\u4e00\u68f5\u5b50\u6811\u8fde\u63a5\u5230\u6700\u5c0f\u7684 size \u7684\u8fde\u901a\u5757\u91cc\u3002\u90a3\u4e48\u6700\u540e\u7b54\u6848\u5c31\u662f\n$$\n\\max\\{size_p-\\zeta,size_q+\\zeta,size_o\\}\n$$\n\u5176\u4e2d $p$ \u662f\u6700\u5927\u7684\u8fde\u901a\u5757\uff0c $q$ \u662f\u6700\u5c0f\u7684\u8fde\u901a\u5757\uff0c$o$ \u662f\u6b21\u5927\u8fde\u901a\u5757\uff0c$\\zeta$ \u662f\u6458\u4e0b\u6765\u7684\u5b50\u6811\u3002\u90a3\u4e48\u4e0d\u96be\u77e5\u9053\u8fd9\u4e2a\u4e1c\u897f\u662f\u51f8\u7684\u3002\u90a3\u4e48\u5c31\u8003\u8651\u53bb\u4e8c\u5206\u8fd9\u4e2a $ans$ \uff0c$check$ \u7684\u65f6\u5019\u81ea\u7136\u9700\u8981\u6ee1\u8db3\n$$\n\\begin{aligned}\nsize_p-\\zeta&\\leq ans\\\\\nsize_q+\\zeta&\\leq ans\\\\\nsize_o&\\leq ans\n\\end{aligned}\n$$\n\u8003\u8651\u6700\u540e\u4e00\u4e2a\u662f\u4e00\u4e2a\u5b9a\u503c\uff0c\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5\u8bbe\u6210\u4e8c\u5206\u7684\u4e0b\u754c\u3002\u89c2\u5bdf\u524d\u9762\u4e24\u4e2a\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u5728\u67e5\u5468\u56f4\u5206\u51fa\u53bb\u7684\u8fde\u901a\u5757\u91cc\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5927\u5c0f\u5408\u9002\u7684\u5b50\u6811 $\\zeta$\u3002\u4e8e\u662f\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u62ff `mulity-set` \u7ef4\u62a4 dsu on tree \u7684\u76f4\u89c2\u9898\u76ee\u3002\n\n\uff08\u5982\u679c\u4f60\u4f1a dsu on tree \u4e0b\u9762\u4e00\u6bb5\u53ef\u4ee5\u4e0d\u770b\uff09\n\n\u7ef4\u62a4\u8d77\u6765\u6709\u4e9b\u9ebb\u70e6\u3002\u8003\u8651\u6309\u7167 dfs \u5e8f\u5206\u522b\u7ef4\u62a4\u81ea\u5df1\u5b50\u6811\u5185\u7684\u3001\u7956\u5148\u94fe\u4e0a\u7684\u3001\u7956\u5148\u9664\u4e86\u81ea\u5df1\u4ee5\u5916\u7684\u90a3\u4e9b\u5b50\u5b59\u3002\u540e\u9762\u4e24\u4e2a\u53ef\u4ee5\u4e0d\u65ad\u8fb9\u63d2\u8fb9\u5220\u6765\u505a\uff0c\u800c\u81ea\u5df1\u5b50\u6811\u5185\u7684\u5219\u53ef\u4ee5\u8003\u8651\u7531\u4e8e\u4fe1\u606f\u91cd\u590d\u7387\u5927\uff0c\u6240\u4ee5\u91c7\u7528\u542f\u53d1\u5f0f\u5206\u6cbb(\u542f\u53d1\u5f0f\u5408\u5e76)\u7b56\u7565\u2014\u2014\u7ed3\u5408\u8f7b\u91cd\u94fe\u5256\u5206\u7684\u7406\u8bba\uff0c\u56e0\u4e3a\u4ece\u6839\u5230\u6bcf\u4e2a\u70b9\u81f3\u591a\u7ecf\u8fc7 $\\log n$ \u6761\u8f7b\u8fb9\uff0c\u6240\u4ee5\u8003\u8651\u6bcf\u4e2a\u70b9\u90fd\u53ea\u5411\u81ea\u5df1\u7684\u8f7b\u7956\u5148\u8d21\u732e\u3002\u90a3\u4e48\u8fc7\u7a0b\u5c31\u662f\u5148\u5206\u6cbb\u8f7b\u513f\u5b50\u5e76\u4e14\u6e05\u7a7a\u8d21\u732e\uff0c\u7136\u540e\u66b4\u529b\u91cd\u513f\u5b50\uff0c\u518d\u5c06\u8f7b\u513f\u5b50\u5408\u5e76\u5230\u91cd\u513f\u5b50\u7684\u4fe1\u606f\u91cc\u3002\u901a\u8fc7\u805a\u5408\u5206\u6790\u4e0d\u96be\u77e5\u9053\u8fd9\u6837\u662f $O(n\\log n)$ \u7684\u3002\u8fd9\u4e5f\u5c31\u662f dsu on tree \u7684\u8fc7\u7a0b\u3002\n\n\u6700\u540e\u6709\u70b9\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff0c\u5927\u6982\u5c31\u662f\u4ec0\u4e48\u7279\u5224 $p=q$ \u4e4b\u7c7b\u7684\u3002\n\n```cpp\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\nsint other ;\nsint dads ;\nsint s[N] ;\nvint E[N] ;\n\nint n ;\nint rt ;\nint sz[N] ;\nint fa[N] ;\nint mx[N] ;\nint mn[N] ;\nint smx[N] ;\nint son[N] ;\nint ans[N] ;\n\nvoid dfs(int x, int dad){\n    fa[x] = dad ; sz[x] = 1 ;\n    for (auto k : E[x])\n        if (k != dad){\n            dfs(k, x) ;\n            sz[x] += sz[k] ;\n            if (!son[x]) son[x] = k ;\n            if (sz[son[x]] < sz[k]) son[x] = k ;\n        }\n    if (x != rt)\n        other.ins(sz[x]) ;\n}\nbool isrt(int x){\n    return (bool)(x == rt) ;\n}\nbool chk(int v, int x){\n//    cout << v << \" \" << x << \" \" << mx[x] << \" \" << mn[x] << \" \" << sz[x] << \" \" << son[x] << \" \" << s[x].size() << '\\n' ;\n    if (mx[x] == sz[son[x]]){\n        auto t = s[x].lwb(mx[x] - v) ;\n        if (t != s[x].js() && *t <= v - mn[x]) return 1 ;\n        return 0 ;\n    }\n    else {\n        auto t = other.lwb(mx[x] - v) ;\n        if (t != other.js() && (*t) <= v - mn[x]) return 1 ;\n        auto pq = dads.lwb(mx[x] - v + sz[x]) ;\n        if (pq != dads.js() && (*pq) <= v - mn[x] + sz[x]) return 1 ;\n        return 0 ;\n    }\n}//mn[x] + x <= ans -> x <= ans - mn[x]\nvoid solve(int x){\n//    debug(x, ' ') ;\n//    debug(other.size(), ' ') ;\n//    debug(s[x].size(), ' ') ;\n//    debug(dads.size()) ;\n    if (!isrt(x)){\n        other.era(other.fd(sz[x])) ;\n        if (!isrt(fa[x])) dads.ins(sz[fa[x]]) ;\n    }\n    mn[x] = n - sz[x] ;\n    mx[x] = max(n - sz[x], sz[son[x]]) ;\n    smx[x] = min(n - sz[x], sz[son[x]]) ;\n//    debug(x, '*') ;\n//    debug(mn[x], '*') ;\n//    debug(mx[x], '*') ;\n//    debug(smx[x], '\\n') ;// puts(\"\")\n    for (auto k : E[x]){\n        if (k == fa[x]) continue ;\n        if (k == son[x]) continue ;\n        solve(k) ;\n        for (auto t : s[k]) other.ins(t) ;\n    }\n    if (son[x]){\n        solve(son[x]) ;\n        swap(s[x], s[son[x]]) ;\n        chkmin(mn[x], sz[son[x]]) ;\n        if (!mn[x]) mn[x] = sz[son[x]] ;\n    }\n    for (auto k : E[x]){\n        if (k == fa[x]) continue ;\n        if (k == son[x]) continue ;\n        chkmin(mn[x], sz[k]) ;\n        chkmax(smx[x], sz[k]) ;\n        for (auto t : s[k])\n            other.era(other.find(t)) ;\n    }\n    int l = smx[x], r = mx[x], mid ;\n    if (smx[x] == mx[x]) goto ycy ;\n    while (l <= r){\n        mid = (l + r) >> 1 ;\n        if (!chk(mid, x)) l = mid + 1 ;\n        else ans[x] = mid, r = mid - 1 ;\n    }\n    ycy : if (!ans[x]) ans[x] = mx[x] ;\n    for (auto k : E[x]){\n        if (k == fa[x]) continue ;\n        if (k == son[x]) continue ;\n        for (auto t : s[k]) s[x].ins(t) ;\n    }\n    if (!isrt(x) && !isrt(fa[x]))\n        dads.era(dads.fd(sz[fa[x]])) ;\n    s[x].ins(sz[x]) ;\n//    debug(x, ' ') ;\n//    debug(other.size(), ' ') ;\n//    debug(s[x].size(), ' ') ;\n//    debug(dads.size()) ;\n}\nvoid output(){\n    for (int k = 1 ; k <= n ; ++ k)\n        printf(\"%d\\n\", ans[k]) ; return ;\n}\nint main(){\n    cin >> n ; int x, y ;\n    for (int i = 1 ; i <= n ; ++ i){\n        x = qr(), y = qr() ;\n        if (!x || !y) rt = x + y ;\n        else E[x].p_b(y), E[y].p_b(x) ;\n    }\n    dfs(rt, 0) ;\n//    debug(son, 1, n) ;\n//    debug(sz, 1, n) ;\n    solve(rt) ;\n    output() ;\n    return 0 ;\n}\n\n```\n\n",
        "postTime": 1590669111,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u300c\u7b80\u5355\u9898\u300dCF768G The Winds of Winter"
    },
    {
        "content": "# \u9898\u610f\uff1a\n\u7ed9\u5b9a\u4e00\u9897`\u6709\u6839\u6811`\uff0c\u5728\u5220\u53bb\u4e00\u4e2a\u70b9\u540e\u5f97\u5230\u4e00\u4e2a\u68ee\u6797\uff0c\u800c\u4f60\u53ef\u4ee5\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u5c06\u67d0\u4e2a\u70b9\u4e0e\u5176`\u7236\u4eb2`\u7684\u8fde\u8fb9\u65ad\u5f00\u5e76\u8fde\u5230\u53e6\u4e00\u68f5\u6811\u4e0a\uff0c\u6c42\u5220\u53bb\u6bcf\u4e00\u4e2a\u70b9\u540e\u64cd\u4f5c\u5f97\u5230\u7684\u68ee\u6797\u4e2d\u6700\u5927\u7684\u6811\u6700\u5c11\u6709\u591a\u5c11\u4e2a\u70b9\u3002\n# \u5206\u6790\uff1a\n\u8003\u8651\u5220\u53bb\u4e00\u4e2a\u70b9\u540e\u7684\u68ee\u6797\uff0c\u64cd\u4f5c\u7684\u70b9\u663e\u7136\u8981\u5728\u6700\u5927\u7684\u6811\u4e2d\uff0c\u4e14\u8fde\u5230\u6700\u5c0f\u7684\u6811\u4e0a\u3002\n> \u82e5\u6709\u4e24\u68f5\u6700\u5927\u7684\u6811\u5219\u7b54\u6848\u663e\u7136\u4e3a\u5176\u5927\u5c0f\uff0c\u4e0d\u4f1a\u6539\u53d8\u3002\n\n\u90a3\u4e48\u7b54\u6848\u5373\u4e3a$\\max\\{MAXsize-size_x,MINsize+size_x,SECsize\\}$\uff0c\u5176\u4e2d$MAXsize$\u8868\u793a\u6700\u5927\u7684\u6811\u7684\u5927\u5c0f\uff0c$MINsize$\u8868\u793a\u6700\u5c0f\u7684\u6811\u7684\u5927\u5c0f\uff0c$SECsize$\u8868\u793a\u6b21\u5927\u7684\u6811\u7684\u5927\u5c0f\uff0c$size_x$\u8868\u793a\u64cd\u4f5c\u7684\u70b9\u5728`\u68ee\u6797`\u4e2d\u7684\u5b50\u6811\u5927\u5c0f\u3002\n\n$SECsize$\u4e3a\u56fa\u6709\u53d6\u503c\uff0c\u5219\u6211\u4eec\u53ea\u9700\u4f7f$\\max\\{MAXsize-size_x,MINsize+size_x\\}$\u6700\u5c0f\u3002\n\n\u5206\u7c7b\u8ba8\u8bba\u77e5$size_x$\u4e3a\u6240\u6709$size$\u4e2d$\\frac{MAXsize-MINsize}2$\u7684\u524d\u9a71\u6216\u540e\u7ee7\u65f6\u6700\u4f18\u3002\n\n\u5219\u8003\u8651\u7ef4\u62a4\u6240\u6709$size$\u3002\n\n![](https://i.loli.net/2020/10/22/H6mRGjsU3N5zk4g.png)\n\n\u5982\u56fe\uff0c\u5f53\u5220\u53bb\u7ea2\u70b9\u65f6\uff0c\u7ea2\u70b9\u5b50\u6811\u7684$size$\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u5176\u7956\u5148\u7684\u5176\u4ed6\u5b50\u6811\u7684$size$\u4e5f\u4e0d\u4f1a\u6539\u53d8\uff0c\u53ea\u6709\u5176\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u4e5f\u5c31\u662f\u84dd\u70b9\u7684$size$\u51cf\u5c0f\u4e86\u3002\n\n\u73b0\u5728\u8003\u8651\u7ef4\u62a4\u4e09\u4e2a$multiset$\uff1a$anc$\u7ef4\u62a4\u5230\u6839\u8def\u5f84\u4e0a\u7684\u70b9\u7684$size$\uff0c$Q_i$\u7ef4\u62a4$i$\u53f7\u70b9\u5b50\u6811\u7684\u6240\u6709$size$\uff0c$oth$\u7ef4\u62a4\u7956\u5148\u7684\u5176\u4ed6\u5b50\u6811\u7684\u6240\u6709$size$\u3002\n\n$anc$\u6700\u597d\u7ef4\u62a4\uff0cDFS\u65f6\u63d2\u5165\uff0c\u9000\u51fa\u65f6\u5220\u9664\uff0c\u67e5\u8be2$i$\u53f7\u70b9\u7684\u65f6\u5019\u5e26\u4e00\u4e2a$\\Delta=size_i$\u5373\u53ef\u3002\n\n$Q_i$\u7684\u7ef4\u62a4\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002\n\n\u7136\u540e\u662f$oth$\uff0c\u7531\u4e8e\u67e5\u8be2\u6bcf\u4e2a\u70b9\u7684\u65f6\u5019\u9700\u8981\u4fdd\u8bc1\u5b83\u7684\u5b50\u6811\u7684$size$\u90fd\u4e0d\u5728$oth$\u4e2d\uff0c\u6240\u4ee5\u9000\u51fa\u4e00\u4e2a\u5b50\u8282\u70b9\u540e\u8981\u5c06\u5b83\u7684\u5b50\u6811\u7684$size$\u518d\u6b21\u52a0\u5165\uff0c\u800c\u56e0\u6b64\u53c8\u8981\u5728\u67e5\u8be2\u5f53\u524d\u70b9\u524d\u628a\u8fd9\u4e9b\u5b50\u6811\u7684$size$\u518d\u66b4\u529b\u5220\u6389\uff0c\u53ea\u6709\u6700\u540e\u4e00\u68f5DFS\u7684\u5b50\u6811\u7684$size$\u4e0d\u9700\u8981\u52a0\u5165\u548c\u5220\u9664\uff0c\u56e0\u6b64\u8003\u8651\u91cd\u94fe\u5256\u5206\uff0c\u66b4\u529b\u52a0\u5165\u548c\u5220\u9664\u8f7b\u513f\u5b50\uff0c\u6700\u540e\u5904\u7406\u91cd\u513f\u5b50\uff0c\u4e5f\u5c31\u662fdsu on tree\u7684\u601d\u8def\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\log n)$\n# \u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<iomanip>\n#include<cstring>\n#include<algorithm>\n#include<ctime>\n#include<set>\nusing namespace std;\ninline int read()\n{\n\tint kkk=0,x=1;\n\tchar c=getchar();\n\twhile((c<'0' || c>'9') && c!='-')\n\t\tc=getchar();\n\tif(c=='-')\n\t\tc=getchar(),x=-1;\n\twhile(c>='0' && c<='9')\n\t\tkkk=(kkk<<3)+(kkk<<1)+(c-'0'),c=getchar();\n\treturn kkk*x;\n}\nint n,root,head[100001],tot,maxn[100001],sec[100001],minn[100001],size[100001],son[100001],ans[100001],id[100001],cnt,deg[100001];\nmultiset<int> Q[100001],anc,oth;\nstruct sb\n{\n\tint to,nextn;\n}a[200001];\nvoid ADD(int from,int to)\n{\n\ta[++tot].to=to,a[tot].nextn=head[from];\n\thead[from]=tot;\n}\nvoid format(int u,int fa)\n{\n\tsize[u]=1;\n\tminn[u]=ans[u]=n;\n\tfor(int i=head[u];i!=0;i=a[i].nextn)\n\t{\n\t\tint v=a[i].to;\n\t\tif(v==fa)\n\t\t\tcontinue;\n\t\tformat(v,u);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>size[son[u]])\n\t\t\tson[u]=v;\n\t\tminn[u]=min(minn[u],size[v]);\n\t\tif(size[v]>size[maxn[u]])\n\t\t\tsec[u]=maxn[u],maxn[u]=v;\n\t\telse\n\t\t\tif(size[v]>size[sec[u]])\n\t\t\t\tsec[u]=v;\n\t}\n\tif(u!=root)\n\t{\n\t\tminn[u]=min(minn[u],n-size[u]);\n\t\tif(n-size[u]>size[maxn[u]])\n\t\t\tsec[u]=maxn[u],maxn[u]=0;\n\t\telse\n\t\t\tif(n-size[u]>size[sec[u]])\n\t\t\t\tsec[u]=0;\n\t}\n\toth.insert(2*size[u]);\n}\nvoid check(multiset<int> &T,int maxx,int minx,int &v,int redu)\n{\n\tmultiset<int> :: iterator ID=T.lower_bound(maxx-minx+redu);\n\tif(ID==T.end())\n\t{\n\t\t--ID;\n\t\tv=min(v,maxx-((*ID)-redu)/2);\n\t}\n\telse\n\t{\n\t\tv=min(v,minx+((*ID)-redu)/2);\n\t\tif(ID!=T.begin())\n\t\t{\n\t\t\t--ID;\n\t\t\tv=min(v,maxx-((*ID)-redu)/2);\n\t\t}\n\t}\n}\nvoid del(multiset<int> &T,int v){T.erase(T.lower_bound(v));}\nint calc(int u,int bj){return bj?size[bj]:n-size[u];}\nvoid dsu(int u,int fa)\n{\n\tdel(oth,2*size[u]);\n\tif(u!=root)\n\t\tanc.insert(2*size[fa]);\n\tif(!son[u])\n\t{\n\t\tans[u]=n-1;\n\t\tid[u]=++cnt;\n\t\tQ[cnt].insert(2);\n\t\treturn;\n\t}\n\tfor(int i=head[u];i!=0;i=a[i].nextn)\n\t{\n\t\tint v=a[i].to;\n\t\tif(v==fa || v==son[u])\n\t\t\tcontinue;\n\t\tdsu(v,u);\n\t\tfor(multiset<int> :: iterator j=Q[id[v]].begin();j!=Q[id[v]].end();++j)\n\t\t\toth.insert((*j));\n\t}\n\tdsu(son[u],u);\n\tid[u]=id[son[u]];\n\tfor(int i=head[u];i!=0;i=a[i].nextn)\n\t{\n\t\tint v=a[i].to;\n\t\tif(v==fa || v==son[u])\n\t\t\tcontinue;\n\t\tfor(multiset<int> :: iterator j=Q[id[v]].begin();j!=Q[id[v]].end();++j)\n\t\t\tdel(oth,(*j));\n\t}\n\tint MAX=calc(u,maxn[u]),SEC=calc(u,sec[u]);\n\tif(MAX==SEC)\n\t\tans[u]=MAX;\n\telse\n\t{\n\t\tif(maxn[u])\n\t\t\tcheck(Q[id[maxn[u]]],MAX,minn[u],ans[u],0);\n\t\telse\n\t\t{\n\t\t\tcheck(anc,MAX,minn[u],ans[u],2*size[u]);\n\t\t\tcheck(oth,MAX,minn[u],ans[u],0);\n\t\t}\n\t\tans[u]=max(ans[u],SEC);\n\t}\n\tfor(int i=head[u];i!=0;i=a[i].nextn)\n\t{\n\t\tint v=a[i].to;\n\t\tif(v==fa || v==son[u])\n\t\t\tcontinue;\n\t\tint NOW=id[v];\n\t\tif(Q[NOW].size()>Q[id[u]].size())\n\t\t\tswap(id[u],NOW);\n\t\tfor(multiset<int> :: iterator j=Q[NOW].begin();j!=Q[NOW].end();++j)\n\t\t\tQ[id[u]].insert((*j));\n\t\tQ[NOW].clear();\n\t}\n\tif(u!=root)\n\t\tdel(anc,2*size[fa]);\n\tQ[id[u]].insert(2*size[u]);\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tint u=read(),v=read();\n\t\tif(!u || !v)\n\t\t\troot=u+v;\n\t\telse\n\t\t{\n\t\t\tADD(u,v);\n\t\t\tADD(v,u);\n            ++deg[u];\n            ++deg[v];\n\t\t}\n\t}\n\tformat(root,0);\n\tdsu(root,0);\n    if(deg[root]==1)\n        ans[root]=n-1;\n\tfor(int i=1;i<=n;++i)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1603371879,
        "uid": 36933,
        "name": "zhy12138",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF768G \u3010The Winds of Winter\u3011"
    }
]