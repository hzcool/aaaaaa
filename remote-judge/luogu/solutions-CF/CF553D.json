[
    {
        "content": "\u672c\u9898\u8981\u6c42\u6211\u4eec\u6c42\u4e00\u4e2a\u6700\u5c0f\u503c\u6700\u5927\uff0c\u8fd9\u79cd\u95ee\u6cd5\u5f88\u660e\u663e\u662f\u4e8c\u5206\u7684\u95ee\u6cd5\u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4e8c\u5206\u3002\n\n\u4e8c\u5206\u6700\u5173\u952e\u7684\u662f check \u51fd\u6570\uff0c\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u5df2\u7ecf\u6709\u4e86\u5b89\u5168\u503c $mid$ \u540e\u5982\u4f55\u9a8c\u8bc1\u8be5\u5b89\u5168\u503c\u662f\u5426\u6210\u7acb\u3002\n\n\u7b80\u5355\u7684\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6bcf\u4e2a\u70b9\uff0c\u5982\u679c\u67d0\u4e2a\u70b9\u5c31\u7b97\u5468\u56f4\u7684\u597d\u70b9\u5168\u90e8\u9009\u4e0a\u90fd\u4e0d\u80fd\u8fbe\u5230\u5b89\u5168\u503c $mid$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u4e0d\u80fd\u88ab\u9009\u4e0a\u3002\u800c\u4e0d\u9009\u8fd9\u4e2a\u70b9\u9020\u6210\u7684\u540e\u679c\u5c31\u662f\u5b83\u5468\u56f4\u7684\u70b9\u53ef\u80fd\u6709\u7684\u4e5f\u4f1a\u8fbe\u4e0d\u5230 $mid$\u3002\u4e0d\u65ad\u91cd\u590d\u8fd9\u4e2a\u5220\u70b9\u7684\u8fc7\u7a0b\uff0c\u76f4\u5230\u6ca1\u6709\u70b9\u4f1a\u88ab\u5220\u53bb\u3002\u8fd9\u65f6\u6211\u4eec\u518d\u89c2\u5bdf\u662f\u5426\u6709\u70b9\u6ca1\u6709\u88ab\u5220\u53bb\uff0c\u5982\u679c\u6709\u70b9\u5b58\u7559\uff0c\u90a3\u4e48\u8fd9\u4e2a $mid$ \u5c31\u662f\u5408\u6cd5\u7684\u3002\n\n## \u7b97\u6cd5\u6d41\u7a0b\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u62d3\u6251\u6392\u5e8f\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u5220\u70b9\u7684\u8fc7\u7a0b\u3002\n\n1. \u5c06\u6240\u6709\u597d\u70b9\u5168\u90e8\u9009\u4e2d\u3002\n2. \u5148\u5c06\u574f\u70b9\u7684\u5468\u56f4\u70b9\u7684\u5165\u5ea6\u51cf\u5c11\u3002\n3. \u770b\u6709\u6ca1\u6709\u5b89\u5168\u503c\u5c0f\u4e8e $mid$ \u7684\u70b9\uff0c\u6709\u7684\u8bdd\u5c06\u5176\u5165\u961f\uff0c\u5e76\u5c06\u5176\u9009\u4e2d\u7684\u6807\u8bb0\u53d6\u6d88\u3002\n4. \u4e0d\u65ad\u53d6\u51fa\u961f\u5934\uff0c\u5c06\u961f\u5934\u5468\u56f4\u70b9\u7684\u5165\u5ea6\u51cf\u5c11\uff0c\u5982\u679c\u4ea7\u751f\u65b0\u7684\u5b89\u5168\u503c\u5c0f\u4e8e $mid$ \u7684\u70b9\uff0c\u5219\u5c06\u8fd9\u4e2a\u65b0\u70b9\u5165\u961f\u5e76\u5c06\u5176\u9009\u4e2d\u7684\u6807\u8bb0\u53d6\u6d88\u3002\n5. \u4e0d\u65ad\u5faa\u73af\u4e0a\u9762\u7684\u6d41\u7a0b\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u3002\n6. \u770b\u6709\u6ca1\u6709\u70b9\u8fd8\u5904\u4e8e\u88ab\u9009\u4e2d\u7684\u72b6\u6001\uff0c\u5982\u679c\u6709\u7684\u8bdd\u8be5 $mid$ \u5373\u4e3a\u5408\u6cd5\u3002\n\n## \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\nint h[N], e[N], ne[N], idx;\nint d[N], dd[N];\nint c[N], tt;\nbitset<N> bad, in;\nqueue<int> q;\nint n, m, k;\n\ninline void add(int a, int b)\n{\n    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;\n}\n\nbool check(double mid)\n{\n    in.reset(); // in \u5373\u4e3a\u662f\u5426\u88ab\u9009\u4e2d\u7684\u6807\u8bb0\n    for(int i = 1; i <= n; i ++ ) dd[i] = d[i];\n    while(q.size()) q.pop();\n    for(int i = 1; i <= n; i ++ )\n    {\n        if(bad[i])\n        {\n            for(int j = h[i]; j != -1; j = ne[j])\n            {\n                int v = e[j];\n                dd[v] --;\n            }\n        }\n        else in[i] = true;\n    }\n    for(int i = 1; i <= tt; i ++ )\n        if((double)dd[c[i]] < (double)d[c[i]] * mid) // c[i] \u4e3a\u597d\u70b9\n        {\n            q.push(c[i]);\n            in[c[i]] = false;\n        }\n    \n    while(q.size())\n    {\n        int u = q.front();\n        q.pop();\n        for(int i = h[u]; i != -1; i = ne[i])\n        {\n            int v = e[i];\n            if(bad[v]) continue;\n            dd[v] --;\n            if((double)dd[v] < d[v] * mid && in[v]) \n            {\n                q.push(v);\n                in[v] = false;\n            }\n        }\n    }\n\n    for(int i = 1; i <= n; i ++ )\n    {\n        if(bad[i]) continue;\n        if(in[i]) return true;\n    }\n    return false;\n}\n\nint main()\n{\n    memset(h, -1, sizeof h);\n\n    n = read(), m = read(), k = read();\n    for(int i = 1; i <= k; i ++ )\n    {\n        int x = read();\n        bad[x] = true;\n    }\n\n    for(int i = 1; i <= n; i ++ )\n        if(!bad[i])\n            c[++ tt] = i;\n\n    for(int i = 1; i <= m; i ++ )\n    {\n        int a = read(), b = read();\n        add(a, b), add(b, a);\n        d[a] ++, d[b] ++;\n        dd[a] ++, dd[b] ++;\n    }\n\n    double l = 0, r = 1;\n    while(r - l >= 1e-8)\n    {\n        double mid = (l + r) / 2;\n        if(check(mid)) l = mid;\n        else r = mid;\n    }\n\n    check(l); // \u8fd9\u91cc\u518d check \u4e00\u904d\u662f\u4e3a\u4e86\u628a\u5408\u6cd5\u65b9\u6848\uff08in \u6570\u7ec4\uff09\u641e\u51fa\u6765\n\n    int cnt = 0;\n    for(int i = 1; i <= n; i ++ ) \n        if(in[i]) cnt ++;\n\n    printf(\"%d\\n\", cnt);\n\n    for(int i = 1; i <= n; i ++ )\n        if(in[i])\n            printf(\"%d \", i);\n\n    return 0;\n}\n```",
        "postTime": 1685016013,
        "uid": 755337,
        "name": "crimson000",
        "ccfLevel": 4,
        "title": "CF553D\u9898\u89e3"
    },
    {
        "content": "\u6b64\u9898\u4e0e\u5206\u6570\u89c4\u5212\u7684\u601d\u60f3\u6709\u4e9b\u7c7b\u4f3c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u6700\u5c0f\u5b89\u5168\u5ea6\uff0c\u5224\u65ad\u8fd9\u4e2a\u5b89\u5168\u5ea6\u80fd\u5426\u5230\u8fbe\u3002\n\n\u4f46\u600e\u4e48\u5224\u65ad\u5e76\u8bb0\u5f55\u65b9\u6848\u5462\uff1f\u9009\u62e9\u5360\u9886\u7684\u57ce\u5e02\u5417\uff0c\u8fd9\u6837\u96be\u5199\uff0c\u800c\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u7279\u9ad8\u3002\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u8fd9\u6837\u60f3\uff1a\u5148\u5360\u9886\u6240\u6709\u80fd\u5360\u9886\u7684\u57ce\u5e02\uff0c\u8fd9\u6837\u53ea\u6709\u65e0\u6cd5\u5360\u9886\u7684\u57ce\u5e02\u7684\u90bb\u5c45\u7684\u5b89\u5168\u5ea6\u5c0f\u4e8e 1 \uff0c\u5224\u65ad\u8fd9\u4e9b\u57ce\u5e02\uff0c\u5982\u679c\u5b89\u5168\u5ea6\u4f4e\uff0c\u5219\u6807\u8bb0\u4e3a\u6ca1\u6709\u5360\u9886\uff0c\u5e76\u4e14\u6b64\u65f6\u5b83\u5468\u8fb9\u7684\u57ce\u5e02\u5b89\u5168\u5ea6\u51cf\u5c0f\u4e86\uff0c\u9700\u8981\u5224\u65ad\u3002\u7531\u6b64\u6211\u4eec\u5f97\u51fa\u4e00\u79cd\u65b9\u6cd5\uff0c\u628a\u6ca1\u6709\u5360\u9886\u7684\u57ce\u5e02\u5165\u961f\uff0c\u6bcf\u6b21\u53d6\u961f\u9996\u5224\u65ad\u88ab\u5360\u9886\u7684\u90bb\u5c45\uff0c\u5b89\u5168\u5ea6\u5c0f\u5c31\u6807\u8bb0\u6ca1\u6709\u5360\u9886\u5e76\u5165\u961f\u3002\u6700\u540e\u5982\u679c\u8fd8\u6709\u5360\u9886\u7684\u57ce\u5e02\u5c31\u662f\u53ef\u4ee5\u7684\uff0c\u8bb0\u5f55\u65b9\u6848\uff0c\u5426\u5219\u4e0d\u884c\u3002\u7531\u4e8e\u6bcf\u4e2a\u57ce\u5e02\u6700\u591a\u5165\u961f\u51fa\u961f\u4e00\u6b21\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u662f\u8282\u70b9\u4e2a\u6570\u7ea7\u522b\u7684\u3002\n\n\u4e5f\u8bb8\u6709\u4eba\u4f1a\u95ee\uff1a\u5f00\u59cb\u5360\u9886\u90e8\u5206\u80fd\u5360\u9886\u7684\u57ce\u5e02\u4f1a\u4e0d\u4f1a\u66f4\u4f18\uff0c\u7b54\u6848\u5f53\u7136\u662f\u4e0d\u4f1a\u7684\u3002\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba\uff1a\u5982\u679c\u5f00\u59cb\u9009\u62e9\u4e0d\u5360\u9886\u7684\u57ce\u5e02\u5728\u5148\u5360\u9886\u6240\u6709\u80fd\u5360\u9886\u7684\u57ce\u5e02\u7684\u65b9\u6848\u4e2d\u88ab\u820d\u5f03\uff0c\u5219\u65e0\u5f71\u54cd\uff0c\u4e0d\u7136\u9009\u62e9\u4e0d\u5360\u9886\u5b83\u4f1a\u8ba9\u90bb\u5c45\u5b89\u5168\u5ea6\u53d8\u4f4e\uff0c\u7ed3\u679c\u53ea\u4f1a\u53d8\u574f\u3002\n\n\u6ce8\u610f\u9898\u76ee\u7ed9\u51fa\u7684\u56fe\u4e0d\u4e00\u5b9a\u662f\u8054\u901a\u56fe\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u8981\u8bb0\u5f55\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u6700\u5927\u5b89\u5168\u5ea6\uff0c\u53d6\u6700\u4f18\u3002\n\n\u6b64\u5916\u8fd8\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\uff0c\u8be6\u89c1\u4ee3\u7801\u6ce8\u91ca\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,k,sum[100005],nm,ct[100005],nex[400005],wen[400005],hea[100005],len,boo[100005],bo[100005],booo[100005],l,r,lr[200005],maxp;\ndouble b[100005],c[100005],maxx;\nvoid add(int x,int y)\n{\n\t++len;\n\tnex[len]=hea[x];\n\twen[len]=y;\n\thea[x]=len;\n}\nvoid dfs(int x)\n{\n\t++sum[nm];\n\tboo[x]=nm;\n\tct[nm]+=bo[x];\n\tfor(int j=hea[x];j>0;j=nex[j])\n\t\tif(boo[wen[j]]==0) dfs(wen[j]);\n}\nvoid writeln1(int x)\n{\n\tboo[x]=0;\n\tprintf(\"%d \",x);\n\tfor(int j=hea[x];j>0;j=nex[j])\n\t\tif(boo[wen[j]]) writeln1(wen[j]);\n}\nbool check(int x,double y)\n{\n\tl=r=0;\n\tfor(int i=1;i<=n;i++)\n\t\tif(boo[i]==x)\n\t\t{\n\t\t\tc[i]=b[i];\n\t\t\tbooo[i]=bo[i];\n\t\t\tif(bo[i]) lr[++r]=i;\n\t\t}\n\tdo\n\t{\n\t\t++l;\n\t\tint u=lr[l];\n\t\tfor(int i=hea[u];i>0;i=nex[i])\n\t\t{\n\t\t\tint v=wen[i];\n\t\t\t--c[v];\n\t\t\tif(c[v]<y*b[v]&&booo[v]==0)\n\t\t\t{\n\t\t\t\tlr[++r]=v;\n\t\t\t\tbooo[v]=1;\n\t\t\t}\n\t\t}\n\t}while(l<r);\n\treturn l!=sum[x];\n}\nvoid writeln2(int x,double y)\n{\n\tl=r=0;\n\tfor(int i=1;i<=n;i++)\n\t\tif(boo[i]==x)\n\t\t{\n\t\t\tc[i]=b[i];\n\t\t\tbooo[i]=bo[i];\n\t\t\tif(bo[i]) lr[++r]=i,--sum[x];\n\t\t}\n\tdo\n\t{\n\t\t++l;\n\t\tint u=lr[l];\n\t\tfor(int i=hea[u];i>0;i=nex[i])\n\t\t{\n\t\t\tint v=wen[i];\n\t\t\t--c[v];\n\t\t\tif(c[v]<y*b[v]&&booo[v]==0)\n\t\t\t{\n\t\t\t\t--sum[x];\n\t\t\t\tlr[++r]=v;\n\t\t\t\tbooo[v]=1;\n\t\t\t}\n\t\t}\n\t}while(l<r);\n\tprintf(\"%d\\n\",sum[x]);\n\tfor(int i=1;i<=n;i++) if(boo[i]==x&&booo[i]==0) printf(\"%d \",i);\t\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tbo[x]=1;\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);add(y,x);\n\t\tb[x]+=1;b[y]+=1;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!boo[i])\n\t\t{\n\t\t\t++nm;\n\t\t\tdfs(i);\n\t\t\tif(ct[nm]==0)//\u5982\u679c\u5757\u91cc\u6ca1\u6709\u65e0\u6cd5\u5360\u9886\u57ce\u5e02\uff0c\u5b89\u5168\u5ea6\u4e3a 1 \uff0c\u76f4\u63a5\u8f93\u51fa\n\t\t\t{\n\t\t\t\tprintf(\"%d\\n\",sum[nm]);\n\t\t\t\twriteln1(i);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\tfor(int i=1;i<=nm;i++)\n\t{\n\t\tdouble l=0.0,r=1.0,mid=0.5;\n\t\tdo\n\t\t{\n\t\t\tif(check(i,mid)) l=mid; else r=mid;\n\t\t\tmid=(l+r)/2.0;\n\t\t}while(r-l>0.000000001);//\u7cbe\u5ea6\u81ea\u9009\uff0c\u4fdd\u9669\u8d77\u89c1\uff0c\u6211\u5f00\u7684\u5927\u3002\n\t\tif(maxx<l)\n\t\t{\n\t\t\tmaxx=l;\n\t\t\tmaxp=i;\n\t\t}\n\t}\n\tif(maxx==0)//\u65e0\u8bba\u600e\u4e48\u5360\u9886\uff0c\u6ca1\u6709\u57ce\u5e02\u7684\u5b89\u5168\u5ea6\u5927\u4e8e\u96f6\uff0c\u968f\u4fbf\u8f93\u51fa\u4e00\u4e2a\u53ef\u5360\u9886\u57ce\u5e02\n\t{\n\t\tint i=1;\n\t\tfor(;i<=n;i++) if(!bo[i]) break;\n\t\tprintf(\"1\\n%d\",i);\n\t\treturn 0;\n\t}\n\telse writeln2(maxp,maxx);\n}\n```",
        "postTime": 1600156358,
        "uid": 112921,
        "name": "zhimao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF553D \u3010Nudist Beach\u3011"
    },
    {
        "content": "\u770b\u5230\u6709\u201c\u6700\u5c0f\u7684\u2026\u2026\u5c3d\u53ef\u80fd\u5927\u201d\u6216\u8005\u201c\u6700\u5927\u7684\u5b89\u5168\u5ea6\u5c3d\u53ef\u80fd\u5c0f\u201d\u8fd9\u7c7b\u5b57\u773c\uff0c\u5341\u6709\u516b\u4e5d\u662f\u4e8c\u5206\u3002\n\n\u8003\u8651\u4e8c\u5206\u6700\u5c0f\u5b89\u5168\u5ea6\u3002\n\n\u5047\u8bbe\u4e8c\u5206\u5230\u7684\u6700\u5c0f\u5b89\u5168\u5ea6\u4e3a $mid$ \uff08\u6ce8\u610f $mid$ \u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u6240\u4ee5\u8981\u8fdb\u884c\u6d6e\u70b9\u6570\u4e8c\u5206\uff09\uff0c\u521d\u59cb\u5148**\u5047\u8bbe**\uff08\u6ce8\u610f\uff0c\u53ea\u662f\u5047\u8bbe\uff09\u80fd\u5360\u9886\u7684\u70b9\u5168\u90e8\u90fd\u88ab\u5360\u9886\uff0c\u7136\u540e\u628a\u5b89\u5168\u5ea6\u5c0f\u4e8e $mid$ \u7684\u70b9\u5220\u53bb\uff0c\u6ce8\u610f\u5220\u53bb\u4e00\u4e2a\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u7684\u540c\u65f6\uff0c\u53ef\u80fd\u4f1a\u4f7f\u5f97\u5176\u4ed6\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u53d8\u5f97\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u800c\u8fd9\u4e9b\u70b9\u53ea\u53ef\u80fd\u5728\u8fd9\u4e2a\u88ab\u5220\u6389\u7684\u70b9\u7684\u5468\u56f4\uff0c\u6240\u4ee5\u5728\u5220\u6389\u4e00\u4e2a\u70b9\u7684\u540c\u65f6\uff0c\u4e5f\u8981\u5224\u65ad\u548c\u5b83\u76f8\u90bb\u7684\u70b9\u662f\u5426\u7b26\u5408\u6761\u4ef6\u3002\n\n\u8003\u8651\u7528\u961f\u5217\u6765\u5b8c\u6210\u5220\u70b9\u7684\u8fc7\u7a0b\u3002\n\n\u521d\u59cb\u5148\u628a\u6240\u6709\u70b9\u653e\u5165\u961f\u5217\u4e2d\uff0c\u6bcf\u6b21\u53d6\u51fa\u961f\u9996\u7684\u70b9\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u5b89\u5168\u5ea6\u5c0f\u4e8e $mid$ \uff0c\u5219\u628a\u8fd9\u4e2a\u70b9\u5220\u6389\uff0c\u5e76\u628a\u548c\u8fd9\u4e2a\u70b9\u76f8\u90bb\u7684\u70b9\u5168\u90e8\u653e\u5165\u961f\u5217\u4e2d\u3002\n\n\u6ce8\u610f\uff0c\u672c\u9898\u4f7f\u7528\u6d6e\u70b9\u6570\u4e8c\u5206\uff0c\u6240\u4ee5\u8981\u5b9a\u4e49\u5e38\u6570 $eps$ \uff0c\u8fd9\u91cc\u6211\u8bbe $eps=10^{-8}$ \u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\nconst double eps = 1e-8;//eps\nconst int MAXN = 1e5;\nvector<int>graph[MAXN + 5];//\u56fe\nint a[MAXN + 5];//\u8868\u793aa[i]\u65e0\u6cd5\u88ab\u9009\u62e9\nbool vis[MAXN + 5];//vis[i]\u8868\u793a\u70b9i\u662f\u5426\u88ab\u9009\u62e9\nint n,m,k;\nbool check(double x)//x\u662f\u6211\u4eec\u4e8c\u5206\u51fa\u6765\u7684\u6700\u5c0f\u5b89\u5168\u5ea6\n{\n\tfor(int i = 1;i <= n;i++)//\u5047\u8bbe\u9009\u5168\u90e8\u80fd\u9009\u7684\u70b9\n\t{\n\t\tvis[i] = true;\n\t}\n\tfor(int i = 1;i <= k;i++)//\u9664\u4e86\u4e0d\u80fd\u9009\u7684\u70b9\u4ee5\u5916\n\t{\n\t\tvis[a[i]] = false;\n\t}\n\tqueue<int>q;\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tif(vis[i])\n\t\t{\n\t\t\tq.push(i);\n\t\t}\n\t}\n\twhile(!q.empty())\n\t{\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tint cnt = 0;\n\t\tfor(int i = 0;i < graph[u].size();i++)\n\t\t{\n\t\t\tint v = graph[u][i];\n\t\t\tif(vis[v])//\u5982\u679c\u70b9v\u88ab\u5360\u9886\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\tif(cnt * 1.0 / graph[u].size() + eps < x)//\u82e5\u5b89\u5168\u5ea6\u8fbe\u4e0d\u5230\u6700\u4f4e\u8981\u6c42\n\t\t{//\u6ce8\u610f\u6d6e\u70b9\u6570\u6bd4\u8f83\u8981\u52a0eps\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u7cbe\u5ea6\u8bef\u5dee\n\t\t\tvis[u] = false;//\u9009\u4e0d\u4e0a\n\t\t\tfor(int i = 0;i < graph[u].size();i++)\n\t\t\t{\n\t\t\t\tint v = graph[u][i];\n\t\t\t\tif(vis[v])\n\t\t\t\t{\n\t\t\t\t\tq.push(v);//\u4e0e\u4e4b\u76f8\u90bb\u7684\u70b9\u8981\u518d\u8fdb\u884c\u68c0\u6d4b\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tif(vis[i])//\u53ea\u8981\u8fd8\u6709\u4e00\u4e2a\u70b9\u88ab\u9009\u4e2d\u5c31\u884c\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main()\n{\n\tcin >> n >> m >> k;\n\tfor(int i = 1;i <= k;i++)\n\t{\n\t\tcin >> a[i];\n\t}\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tint u,v;\n\t\tcin >> u >> v;\n\t\tgraph[u].push_back(v);\n\t\tgraph[v].push_back(u);\n\t}\n\tdouble l = 0,r = 1;\n\twhile(l + eps < r)//\u6ce8\u610f\u8981\u52a0eps\uff0c\u5426\u5219\u4e8c\u5206\u4f1a\u6b7b\u5faa\u73af\n\t{\n\t\tdouble mid = (l + r) / 2;\n\t\tif(check(mid))\n\t\t{\n\t\t\tl = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = mid;\n\t\t}\n\t}\n\tcheck(l);//\u76ee\u7684\u662f\u8dd1\u51favis\uff0c\u6ce8\u610fl\u53ef\u80fd\u4e0d\u662f\u6700\u540e\u4e00\u4e2acheck\u7684\uff0c\u6240\u4ee5\u8981\u518d\u8dd1\u4e00\u6b21\n\tint cnt = 0;\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tif(vis[i])\n\t\t{\n\t\t\tcnt++;\n\t\t}\n\t}\n\tcout << cnt << endl;\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tif(vis[i])\n\t\t{\n\t\t\tcout << i << \" \";\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1627907207,
        "uid": 299432,
        "name": "lsw1",
        "ccfLevel": 0,
        "title": "solution-cf553d"
    },
    {
        "content": "[\u535a\u5ba2\u56ed](https://www.cnblogs.com/kjd123456/)\n\n# \u9898\u76ee\u5730\u5740\n\n[\u8fd9\u91cc](https://www.luogu.com.cn/problem/CF553D)\n\n# Solution\n\n\u4e00\u9053\u6bd4\u8f83\u597d\u60f3\u7684\u4e8c\u5206\uff0c\u4f46\u662f\u8c03\u4ee3\u7801\u82b1\u4e86\u6211\u51e0\u4e2a\u5c0f\u65f6:(\n\n\u5148\u5206\u6790\u4e00\u4e0b\u9898\u76ee\u6027\u8d28\uff1a\u4efb\u610f\u57ce\u5e02\u88ab\u654c\u519b\u5360\u9886\uff0c\u5176\u5468\u56f4\u57ce\u5e02\u7684\u5b89\u5168\u5ea6\u90fd\u4f1a\u964d\u4f4e $\\implies$ \n\u6211\u4eec\u5728\u9009\u53d6\u57ce\u5e02\u65f6\uff0c\u5e94\u9075\u5faa\u8fd9\u6837\u4e00\u4e2a\u539f\u5219\uff1a **\u6240\u6709\u80fd\u591f\u88ab\u5df1\u65b9\u63a7\u5236\u7684\u57ce\u5e02\u90fd\u5e94\u5f53\u8ba9\u5df1\u65b9\u63a7\u5236\u3002** \n\n\u8fd9\u91cc\u7684\u201c\u80fd\u591f\u201d\u5f53\u7136\u53ea\u5728\u4e8c\u5206\u7b54\u6848\u7684\u9650\u5236\u4e0b\u624d\u6709\u610f\u4e49\u3002\n\n\u90a3\u4e48\uff0c\u89e3\u51b3\u65b9\u6cd5\u5c31\u5f88\u7b80\u5355\u4e86\u3002\n\u5229\u7528\u961f\u5217\uff0c\u5148\u5c06\u5fc5\u987b\u88ab\u654c\u519b\u5360\u9886\uff08\u6709\u5821\u5792\uff09\u7684\u57ce\u5e02\u5165\u961f\uff0c\u5c06\u961f\u5217\u4e2d\u7684\u57ce\u5e02\u4e00\u4e2a\u4e2a\u62ff\u51fa\u6765\u66f4\u65b0\u5176\u5468\u56f4\u57ce\u5e02\u7684\u5b89\u5168\u5ea6\uff0c\u5982\u679c\u66f4\u65b0\u540e\u5b89\u5168\u5ea6\u5c0f\u4e8emid\u5c31\u5c06\u8fd9\u4e2a\u57ce\u5e02\u5165\u961f\u3002\n\n\u5982\u679c\u6700\u540e\u8fd8\u6709\u57ce\u5e02\u672a\u88ab\u654c\u519b\u5360\u9886\uff0cl = mid\u5426\u5219\uff0cr = mid\uff0c\u6700\u7ec8l\u4e3a\u6700\u5927\u5b89\u5168\u5ea6\u3002\n\n\u53e6\u5916\uff0c\u8fd9\u9053\u9898\u5bf9\u7cbe\u5ea6\u7684\u8981\u6c42\u6bd4\u8f83\u9ad8\uff0c\u6211\u8bbe\u7f6e\u7684\u7cbe\u5ea6\u662f $10^{-9}$ \u3002 $10^{-8}$ \u4ee5\u4e0a\u5927\u6982\u5c31\u8fc7\u4e0d\u4e86\u4e86\u3002\n\n# Code\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 1e5 + 10;\nconst double eps = 1e-9;\n\nint n,m,k,siz[MAXN];\nint num[MAXN],d[MAXN];//d\uff1a\u67d0\u57ce\u5e02\u5468\u56f4\u88ab\u654c\u519b\u5360\u9886\u7684\u57ce\u5e02\u6570\u91cf\u3002\nbool vis[MAXN];\nvector<int> e[MAXN];\nqueue<int> q;\n\nbool judge(double mid) {\n    memset(vis,false,sizeof(vis));\n    memset(d,false,sizeof(d));\n    for (int i = 1; i <= k; i++) {\n        q.push(num[i]);vis[num[i]] = true;\n        for (int j = 0; j < siz[num[i]]; j++) {\n            d[e[num[i]][j]]++;\n        }\n    }\n    while (!q.empty()) {\n        int u = q.front();q.pop();\n        int len = e[u].size();\n        for (int i = 0; i < len; i++) {\n            int v = e[u][i];\n            if (vis[v]) continue;\n            double nu = ((siz[v] - d[v]) * 1.0 / siz[v]);\n            if (nu < mid) {\n                vis[v] = true;\n                for (int j = 0; j < siz[v]; j++) {\n                    d[e[v][j]]++;\n                }\n                q.push(v);\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) if (!vis[i]) return true;\n    return false;\n}\n\nint main() {\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for (int i = 1; i <= k; i++) {\n        scanf(\"%d\",&num[i]);\n    }\n    for (int i = 1; i <= m; i++) {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        e[u].push_back(v);\n        e[v].push_back(u);\n    }\n    for (int i = 1; i <= n; i++) siz[i] = e[i].size();\n    double l = 0,r = 1.0;\n    while (r - l > eps) {\n        double mid = (l + r) / 2;\n        if (judge(mid)) l = mid;\n        else r = mid;\n    }\n    memset(vis,false,sizeof(vis));\n    judge(l);\n    int cnt = 0;\n    for (int i = 1; i <= n; i++) {\n        if (!vis[i]) {\n            cnt++;\n        }\n    }\n    cout << cnt << endl;\n    for (int i = 1; i <= n; i++) {\n        if (!vis[i]) printf(\"%d \",i);\n    }\n    return 0;\n}\n```",
        "postTime": 1613633104,
        "uid": 48342,
        "name": "\u8f68\u9053\u63a7\u5236\u57fa\u5730",
        "ccfLevel": 0,
        "title": "CF553D Nudist Beach"
    }
]