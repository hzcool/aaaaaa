[
    {
        "content": "## \u9898\u610f\n\u4e00\u68f5\u4ee51\u4e3a\u6839\u7684\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u90fd\u67091\u4e2a\u5b57\u6bcd\uff0c\u6709m\u4e2a\u8be2\u95ee\u3002\u6bcf\u6b21\u8be2\u95eev\u5bf9\u5e94\u7684\u5b50\u6811\u4e2d\uff0c\u6df1\u5ea6\u4e3ah\u7684\u8fd9\u5c42\u8282\u70b9\u7684\u5b57\u6bcd\uff0c\u80fd\u5426\u6253\u4e71\u91cd\u6392\u7ec4\u6210\u56de\u6587\u4e32\u3002\u6839\u7684\u6df1\u5ea6\u4e3a1\uff0c\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u4e3a\u5230\u6839\u7684\u8ddd\u79bb\u3002\n## \u601d\u8def\n\u4e00\u5c42\u7ed3\u70b9\u7684\u5b57\u6bcd\u662f\u5426\u80fd\u7ec4\u6210\u56de\u6587\u4e32\uff0c\u53ea\u9700\u89c2\u5bdf\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u6b21\u6570\u8981\u4e48\u90fd\u662f\u5076\u6570\uff0c\u8981\u4e48\u53ea\u6709\u4e00\u4e2a\u5b57\u6bcd\u5947\u6570\u6b21\u51fa\u73b0\u3002\n### \u89e3\u6cd5\u4e00\n> DSU\n\n\u4e8c\u8fdb\u5236\u4f18\u5316\uff0c\u6bcf\u6b21\u90fd\u5f02\u6216\u4e0a\u5b57\u6bcd\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d\uff0c\u53ea\u9700\u8bb0\u5f55\u7b54\u68481\u4f4d\u662f\u5426<2\u5373\u53ef\u3002\n### \u4ee3\u78011\n```c++\n#include<bits/stdc++.h>\n#define M 500005\nusing namespace std;\nstruct query {\n\tint de,id;\n};\nint n,m;\nvector<int>G[M];\nvector<query>Q[M];\nint L[M],R[M],ID[M],T;\nint dep[M],son[M],sz[M];\nint check[M],ans[M];\nchar A[M];\nvoid dfs(int v,int d) {\n\tL[v]=++T;\n\tID[T]=v;\n\tdep[v]=d,son[v]=0,sz[v]=1;\n\tfor(int i=0; i<G[v].size(); i++) {\n\t\tint u=G[v][i];\n\t\tdfs(u,d+1);\n\t\tif(sz[u]>sz[son[v]])son[v]=u;\n\t\tsz[v]+=sz[u];\n\t}\n\tR[v]=T;\n}\nvoid Add_point(int x,int a) {\n\tint r=A[x]-'a',d=dep[x];\n\tcheck[d]^=(1<<r);//\u4e8c\u8fdb\u5236\u4f18\u5316\n}\nvoid Add_tree(int x,int a) {\n\tfor(int i=L[x]; i<=R[x]; i++)Add_point(ID[i],a);\n}\nvoid Solve(int v) {\n\tfor(int i=0; i<G[v].size(); i++) {\n\t\tint u=G[v][i];\n\t\tif(u==son[v])continue;\n\t\tSolve(u);\n\t\tAdd_tree(u,-1);\n\t}\n\tif(son[v])Solve(son[v]);\n\tfor(int i=0; i<G[v].size(); i++) {\n\t\tint u=G[v][i];\n\t\tif(u==son[v])continue;\n\t\tAdd_tree(u,1);\n\t}\n\tAdd_point(v,1);\n\tfor(int i=0; i<Q[v].size(); i++){\n\t\tint d=Q[v][i].de,r=check[d],id=Q[v][i].id;\n\t\tans[id]=(r==(r&-r));\n\t}\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=2,f; i<=n; i++) {\n\t\tscanf(\"%d\",&f);\n\t\tG[f].push_back(i);\n\t}\n\tdfs(1,1);\n\tscanf(\"%s\",A+1);\n\tfor(int i=1; i<=m; i++) {\n\t\tint x,d;\n\t\tscanf(\"%d%d\",&x,&d);\n\t\tQ[x].push_back((query) {d,i});\n\t}\n\tSolve(1);\n\tfor(int i=1; i<=m; i++)\n\t\tif(ans[i])puts(\"Yes\");\n\t\telse puts(\"No\");\n\treturn 0;\n}\n\n```\n### \u89e3\u6cd5\u4e8c\n> dfs\u4f5c\u5dee\n\n\u540c\u6837\u662f\u4e8c\u8fdb\u5236\uff0c\u6bcf\u6b21\u8fdb\u7ed3\u70b9\u65f6\u8bb0\u5f55\u539f\u5148\u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u51fa\u7ed3\u70b9\u65f6\u518d\u7528\u66f4\u65b0\u8fc7\u7684\u6570\u636e\u5f02\u6216\u4e0a\u539f\u6765\u7684\u5373\u4e3a\u7b54\u6848\u3002\n### \u4ee3\u7801\u4e8c\n```c++\n#include<bits/stdc++.h>\n#define M 500005\nusing namespace std;\nstruct query{\n\tint de,id;\n};\nint n,m;\nvector<int>G[M],tmp[M];\nvector<query>Q[M];\nint cnt[M],ans[M];\nchar A[M];\nvoid dfs(int v,int d){\n\tcnt[d]^=1<<A[v]-'a';\n\tfor(int i=0;i<Q[v].size();i++)\n\t\ttmp[v].push_back(cnt[Q[v][i].de]);\n\tfor(int i=0;i<G[v].size();i++)\n\t\tdfs(G[v][i],d+1);\n\tfor(int i=0;i<Q[v].size();i++)\n\t\tans[Q[v][i].id]=(tmp[v][i]^cnt[Q[v][i].de]);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=2,f;i<=n;i++){\n\t\tscanf(\"%d\",&f);\n\t\tG[f].push_back(i);\n\t}\n\tscanf(\"%s\",A+1);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,d;\n\t\tscanf(\"%d%d\",&x,&d);\n\t\tQ[x].push_back((query){\n\t\t\td,i\n\t\t});\n\t}\n\tdfs(1,1);\n\tfor(int i=1;i<=m;i++)\n\t\tputs(ans[i]==(ans[i]&-ans[i])?\"Yes\":\"No\");\n\treturn 0;\n}\n```\n### \u89e3\u6cd5\u4e09\n> \u5728\u7ebf \u5f02\u6216\u524d\u7f00\u548c\n\n\u53ea\u9700\u5c06\u6bcf\u4e2a\u6df1\u5ea6\u7684\u7ed3\u70b9\u6309\u7167dfs\u5e8f\u6392\u5230\u4e00\u4e2avector\u91cc\uff0c\u540c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u5bf9\u5e94\u7684\u5f02\u6216\u524d\u7f00\u548c\uff0c\u5219\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95eex\uff0c\u53ea\u9700\u5728\u7ed9\u5b9a\u6df1\u5ea6\u91cc\u627e\u6bd4L[x]\u5927\u7684\u548c\u6bd4R[x]\u5c0f\u7684\u4e24\u4e2a\u7aef\u70b9\u5373\u53ef\uff0c\u518d\u5f02\u6216\u4e00\u4e0b\u524d\u7f00\u548c\u5373\u53ef\u3002\n### \u4ee3\u7801\u4e09\n```c++\n#include<bits/stdc++.h>\n#define M 500005\nusing namespace std;\nint n,m;\nvector<int>G[M],deep[M],Xor[M];\nint L[M],R[M],ID[M],T,mxdep;\nint dep[M];\nchar A[M];\nvoid dfs(int v,int d) {\n\tL[v]=++T;\n\tID[T]=v,dep[v]=d;\n\tmxdep=max(mxdep,d);\n\tdeep[d].push_back(L[v]);\n\tfor(int i=0; i<G[v].size(); i++) {\n\t\tint u=G[v][i];\n\t\tdfs(u,d+1);\n\t}\n\tR[v]=T;\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=2,f; i<=n; i++) {\n\t\tscanf(\"%d\",&f);\n\t\tG[f].push_back(i);\n\t}\n\tscanf(\"%s\",A+1);\n\tdfs(1,1);\n\tfor(int i=1;i<=mxdep;i++){\n\t\tXor[i].push_back(1<<(A[ID[deep[i][0]]]-'a'));\n\t\tfor(int j=1;j<deep[i].size();j++)//\u5f02\u6216\u524d\u7f00\u548c\n\t\t\tXor[i].push_back(Xor[i][j-1]^(1<<(A[ID[deep[i][j]]]-'a')));\n\t}\n\twhile(m--){\n\t\tint x,d,ans=0;\n\t\tscanf(\"%d%d\",&x,&d);\n\t\tint l=lower_bound(deep[d].begin(),deep[d].end(),L[x])-deep[d].begin();\n\t\tint r=upper_bound(deep[d].begin(),deep[d].end(),R[x])-deep[d].begin()-1;\n\t\t//\u5728\u5f53\u524d\u6df1\u5ea6\u627exdfs\u5e8f\u4e4b\u5185\u7684\u70b9\n\t\tif(r<0)puts(\"Yes\");\n\t\telse {\n\t\t\tif(l==0)ans=Xor[d][r];//\u5904\u7406\u524d\u7f00\u548c\n\t\t\telse ans=Xor[d][r]^Xor[d][l-1];\n\t\t\tif(ans==(ans&-ans))puts(\"Yes\");\n\t\t\telse puts(\"No\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1533301833,
        "uid": 98922,
        "name": "\u757f\u738b",
        "ccfLevel": 0,
        "title": "CodeForces - 570D Tree Requests"
    },
    {
        "content": "\u65e2\u7136\u662fdsu\u7684\u677f\u5b50\uff0c\u90a3\u5c31\u6765\u4e00\u4e2a\u8be6\u7ec6\u7684dsu\u8bb2\u89e3\n\n\u524d\u7f6e\u829d\u58eb\uff1a\n+ \u66b4\u529b\n+ \u6ca1\u4e86\n+ \u771f\u7684\u6ca1\u4e86\n\n\u5982\u679c\u60a8\u4e0d\u4f1a\u66b4\u529b\uff0c\u90a3\u2026\u2026\u8fd8\u662f\u63d0\u4e00\u4e0b\u5427\uff08\n\n\u66b4\u529b\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u7edf\u8ba1\u5b83\u7684\u5b50\u6811\u4e2d\u6240\u6709\u6df1\u5ea6\u7684\u8282\u70b9\u7684\u989c\u8272\u60c5\u51b5\uff0c\u8be2\u95ee\u7684\u65f6\u5019\u53ea\u8981\u68c0\u67e5\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6307\u5b9a\u6df1\u5ea6\u7684\u8282\u70b9\u989c\u8272\u51fa\u73b0\u6b21\u6570\u662f\u5426\u6709 $\\le 1$ \u4e2a\u5947\u6570\u5373\u53ef\n\n\u7136\u540e\u53d1\u73b0\u7a7a\u95f4\u590d\u6742\u5ea6\u8fbe\u5230\u4e86 $\\Theta(n^2)$\uff0c\u663e\u7136\u4e0d\u53ef\u4ee5\u63a5\u53d7\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u6839\u636e\u8282\u70b9\u7f16\u53f7\u5206\u7c7b\uff08\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u628a\u4e00\u4e2a\u5173\u4e8e $u$ \u8282\u70b9\u7684\u8be2\u95ee\u6302\u5230 $u $ \u4e0a\uff0cdfs\u7684\u65f6\u5019\u4e00\u8d77\u5904\u7406\uff09\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6bcf\u5904\u7406\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u53ea\u9700\u8981\u628a\u524d\u9762\u7edf\u8ba1\u7684\u4e1c\u897f\u6e05\u7a7a\uff0c\u5168\u90e8\u66b4\u529b\u7edf\u8ba1\u4e00\u904d\n\n\u7136\u540e\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u8fbe\u5230\u4e86 $\\Theta(n^2)$\uff0c\u8fd8\u662f\u4e0d\u53ef\u4ee5\u63a5\u53d7\n\n\u6211\u4eec\u53d1\u73b0\u5728\u6e05\u7a7a\u4e4b\u524d\u7684\u7edf\u8ba1\u6570\u636e\u7684\u65f6\u5019\u9020\u6210\u4e86\u5f88\u5927\u7684\u6d6a\u8d39\uff0c\u4e8e\u662f\u60f3\u5230\u5982\u4f55\u6700\u5c0f\u5316\u8fd9\u4e2a\u6d6a\u8d39\n\n\u6709\u4e00\u4e2a\u89e3\u51b3\u8fd9\u79cd\u66b4\u529b\u95ee\u9898\u7684\u65b9\u6cd5\u53eb\u505a\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5373\u4fdd\u7559\u8f83\u591a\u7684\u4fe1\u606f\uff0c\u628a\u5176\u4ed6\u96f6\u6563\u7684\u4fe1\u606f\u66b4\u529b\u5730\u5f80\u4e0a\u9762\u5408\u5e76\n\n\u8fd9\u91cc\u4e5f\u91c7\u7528\u8fd9\u79cd\u601d\u8def\uff0c\u6211\u4eec\u6bcf\u6b21\u5904\u7406\u7684\u65f6\u5019\u628a\u91cd\u513f\u5b50\u7684\u4fe1\u606f\u7559\u7740\uff0c\u628a\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\u5220\u53bb\uff0c\u6700\u540e\u518d\u66b4\u529b\u5730\u628a\u8f7b\u513f\u5b50\u5408\u5e76\u5230\u7559\u4e0b\u7684\u4fe1\u606f\u91cc\u9762\n\n\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u8f7b\u91cd\u513f\u5b50\u662f\u5565\uff0c\u53ef\u4ee5\u53bb[\u8fd9\u91cc](https://www.luogu.com.cn/problem/P3384)\u5b66\u4e00\u4e9b\u6982\u5ff5\n\n\u7531\u4e8e\u6bcf\u4e2a\u8f7b\u513f\u5b50\u6700\u591a\u4f1a\u88ab\u5408\u5e76 $\\log n$ \u6b21\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(n\\log n)$\n\n\u4e00\u4e9b\u4ee3\u7801\u5b9e\u73b0\u7684\u7ec6\u8282\uff1a\n1. \u4f7f\u7528 dfn \u5e8f\u4ee3\u66ff dfs \u8fdb\u884c\u5408\u5e76\uff08\u5927\u6982\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\u5e38\u6570\uff09\n2. \u6e05\u7a7a\u4fe1\u606f\u7684\u65f6\u5019\u4e0d\u8981 memset\uff0c\u4e0d\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u98d9\u5347\u5230 $\\Theta(n^2)$\n3. \u9898\u610f\u4e2d\u6df1\u5ea6\u662f\u6307\u4ee5 1 \u4e3a\u6839\u65f6\u7684\u6df1\u5ea6\uff0c\u522b\u88ab\u9898\u610f\u6740\u4e86\uff08\u6211\u88ab\u6740\u4e86\u4e24\u6b21\uff0c\u7136\u540e\u68c0\u67e5\u4e8615min\uff09\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 500010\n#define uint unsigned int\nusing namespace std;\nint n,m,son[MAXN],bro[MAXN];//\u6709\u6839\u6811\uff0c\u5144\u5f1f\u513f\u5b50\u8868\u793a\u6cd5\u4f1a\u6bd4\u8f83\u65b9\u4fbf\nstruct qnode{int id,d;};\nvector<qnode>que[MAXN];//\u79bb\u7ebf\u8be2\u95ee\nint cnt[MAXN][30],ans[MAXN];\nchar col[MAXN];\n//cnt[dep][col]\u6307\u6df1\u5ea6\u4e3adep\u7684\u8282\u70b9\u4e2dcol\u51fa\u73b0\u7684\u6b21\u6570\nbool check(int d)\n{\n\tint ret=0;\n\tfor(int i=1;i<=26;i++)\n\t\tret+=(cnt[d][i]&1);\n\treturn ret<=1;\n}//\u68c0\u67e5\u7b2c d \u5c42\u662f\u5426\u73c2\u4ee5\u6784\u6210\u56de\u6587\nint in[MAXN],out[MAXN],tot,id[MAXN];\nint sz[MAXN],dep[MAXN],hev[MAXN];\n//in,out\u6307\u8fdbdfs\u5e8f\u548c\u51fadfs\u5e8f\nvoid dfs1(int u)\n{\n\tin[u]=++tot;id[tot]=u;sz[u]=1;int heavy=-1926;\n\tfor(int v=son[u];v;v=bro[v])\n\t{\n\t\tdep[v]=dep[u]+1;dfs1(v);sz[u]+=sz[v];\n\t\tif(sz[v]>heavy)heavy=sz[v],hev[u]=v;\n\t}out[u]=tot;\n}\nvoid add(int u){cnt[dep[u]][col[u]-'a'+1]++;}//\u52a0\u4e00\u4e2a\u8282\u70b9\nvoid update(int u){for(int i=in[u];i<=out[u];i++)add(id[i]);}//\u52a0\u4e00\u68f5\u5b50\u6811\nvoid del(int u){cnt[dep[u]][col[u]-'a'+1]=0;}//\u5220\u4e00\u4e2a\u8282\u70b9\nvoid erase(int u){for(int i=in[u];i<=out[u];i++)del(id[i]);}//\u5220\u4e00\u68f5\u5b50\u6811\nvoid dfs2(int u,int tag)//tag\u6307\u662f\u8f7b\u513f\u5b50\u8fd8\u662f\u91cd\u513f\u5b50\n{\n\tfor(int v=son[u];v;v=bro[v])\n\t{\n\t\tif(v==hev[u])continue;\n\t\tdfs2(v,0);//\u8f7b\u513f\u5b50\n\t}if(hev[u])dfs2(hev[u],1);//\u91cd\u513f\u5b50\n\tfor(int v=son[u];v;v=bro[v])\n\t{\n\t\tif(v==hev[u])continue;\n\t\tupdate(v);//\u52a0\u8f7b\u513f\u5b50\u7684\u5b50\u6811\n\t}add(u);//\u52a0\u81ea\u8eab\u8282\u70b9\n\tfor(uint i=0;i<que[u].size();i++)\n\t\tans[que[u][i].id]=check(que[u][i].d);//\u7edf\u8ba1\u7b54\u6848\n\tif(tag)return;erase(u);//\u5982\u679c\u662f\u8f7b\u513f\u5b50\u5c31\u5220\u9664\u4fe1\u606f\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint fa;scanf(\"%d\",&fa);\n\t\tbro[i]=son[fa];son[fa]=i;\n\t}scanf(\"%s\",col+1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,x;scanf(\"%d%d\",&u,&x);\n\t\tque[u].push_back((qnode){i,x});\n\t}dep[1]=1;dfs1(1);dfs2(1,0);\n\tfor(int i=1;i<=m;i++)printf(\"%s\\n\",ans[i]?\"Yes\":\"No\");\n\treturn 0;\n}\n```",
        "postTime": 1591538982,
        "uid": 65681,
        "name": "UltiMadow",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF570D \u3010Tree Requests\u3011"
    },
    {
        "content": "#### dsu on tree \u7ec3\u4e60\u9898\n\n\u9996\u5148\uff0c\u56e0\u4e3a\u662f\u4ee5a\u4e3a\u6839\u7684\u5b50\u6811\u5185\u6df1\u5ea6\u4e3ab\u7684\u8282\u70b9\u4e0a\u7684\u5b57\u6bcd\u91cd\u65b0\u6392\u5217\u4e4b\u540e\u662f\u5426\u80fd\u6784\u6210\u56de\u6587\u4e32\uff0c\u8981\u6392\u5217\u540e\u6210\u4e3a\u56de\u6587\u4e32\uff0c\u6240\u4ee5\u5728\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u5b57\u6bcd\u4e4b\u4e2d\u5fc5\u987b\u81f3\u591a\u53ea\u6709\u4e00\u79cd\u5b57\u6bcd\u7684\u6570\u91cf\u4e3a\u5947\u6570\u79cd\u3002\n\n\u7136\u540e\uff0c\u5c31\u662f\u57fa\u672c\u7684 dsu on tree  \u7684\u64cd\u4f5c\u4e86\uff0c\u5148\u5c06\u6240\u6709\u7684\u8be2\u95ee\u4ee5\u79bb\u7ebf\u7684\u65b9\u5f0f\u5b58\u50a8\u4e0b\u6765\uff0c\u8fd9\u6837\u5b50\u505a\u53ef\u4ee5\u8ba9\u6211\u4eec\u4e00\u8fb9dfs\uff0c\u4e00\u8fb9\u89e3\u51b3\u6240\u6709\u7684\u8be2\u95ee\uff0c\u4e4b\u540e\u7edf\u8ba1\u6240\u6709\u6df1\u5ea6\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\u4ee5\u4fbf\u6211\u4eec\u7684 check \uff0c\u518d\u5c06\u8f7b\u8fb9\u5b50\u6811\u7684\u4fe1\u606f\u4fdd\u7559\u5230\u91cd\u94fe\u4e4b\u4e0a\u8fdb\u884c\u4e00\u4e2a\u7b54\u6848\u7684\u7edf\u8ba1\u3002\n\n#### code\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#define N 500070\n\nstruct Tree{\n\tint to,nxt;\n}e[N<<1];\nstruct Rec{\n\tint k,id;\n};\nint n,m,cnt;\nint head[N],sz[N],sum[N],son[N],dep[N],ans[N],tot[N][26];\nbool vis[N];\nstd::vector<Rec>q[N];\nchar s[N];\n\nvoid add(int from,int to){e[++cnt].to=to,e[cnt].nxt=head[from],head[from]=cnt;}\nvoid dfs(int x,int fa){\n\tsz[x]=1,dep[x]=dep[fa]+1;\n\tfor(int i=head[x],v;i;i=e[i].nxt){\n\t\tv=e[i].to;if(v==fa) continue;\n\t\tdfs(v,x),sz[x]+=sz[v];\n\t\tif(!son[x]||sz[v]>sz[son[x]]) son[x]=v;\n\t}\n}\nvoid calc(int x,int fa,int val){\n\ttot[dep[x]][s[x]-'a']+=val;\n\tfor(int i=head[x],v;i;i=e[i].nxt){\n\t\tv=e[i].to;if(v==fa||vis[v]) continue;\n\t\tcalc(v,x,val);\n\t}\n}\nbool check(int s[]){\n\tint r=0;\n\tfor(int i=0;i<26;++i){\n\t\tif(s[i]&1) ++r;\n\t\tif(r>1) return 0;\n\t}\n\tif(r>1) return 0;\n\treturn 1;\n}\nvoid dfs2(int x,int fa,int keep){\n\tfor(int i=head[x],v;i;i=e[i].nxt){\n\t\tv=e[i].to;if(v==fa||v==son[x]) continue;\n\t\tdfs2(v,x,0);\n\t}\n\tif(son[x]) dfs2(son[x],x,1),vis[son[x]]=1;\n\tcalc(x,fa,1),vis[son[x]]=0;\n\tfor(int i=0;i<q[x].size();++i) ans[q[x][i].id]=check(tot[q[x][i].k]);\n\tif(!keep) calc(x,fa,-1);\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=2,u;i<=n;++i){\n\t\tscanf(\"%d\",&u);\n\t\tadd(u,i),add(i,u);\n\t}\n\tscanf(\"%s\",s+1);\n\tdfs(1,0);\n\tfor(int i=1,a,b;i<=m;++i){\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tq[a].push_back((Rec){b,i});\n\t}\n\tdfs2(1,0,0);\n\tfor(int i=1;i<=m;++i)\n\t\tputs(ans[i]?\"Yes\":\"No\");\n}\n```\n\n",
        "postTime": 1604209804,
        "uid": 224831,
        "name": "\u725b\u86d9\u4e36\u4e36",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF570D \u3010Tree Requests\u3011"
    },
    {
        "content": "### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF570D)\n\n### \u9898\u610f\uff1a\n\n\u7ed9\u51fa\u4e00\u4e2a\u6709\u7740 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u4ee5 $1$ \u53f7\u70b9\u4e3a\u6839\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u6709\u4e00\u4e2a\u5b57\u6bcd\u3002\u518d\u7ed9\u51fa $q$ \u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4ee5 $a$ \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6df1\u5ea6\u4e3a $b$ \u7684\u8282\u70b9\u4e0a\u7684\u5b57\u6bcd\u662f\u5426\u80fd\u7ec4\u6210\u56de\u6587\u4e32\u3002\n\n$\\texttt{Range}$\uff1a$n,q \\leq 5\\times10^5$\u3002\n\n------------------------------------------------\n\n### \u89e3\u6cd5\n\n~~\u849f\u84bb\u6765\u5199\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u9898\u89e3\u4e86\u3002~~\n\n\u9996\u5148\u89c2\u5bdf\u5230\u56de\u6587\u4e32\u6709\u4e00\u79cd\u5bf9\u79f0\u7684\u6027\u8d28\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981\u4f7f\u5f97\u6240\u6709\u5b57\u6bcd\u4e2d\u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\u6570\u91cf $\\leq 1$ \u5373\u53ef\uff0c\u7531\u6b64 **\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u5b58\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u51fa\u73b0\u6b21\u6570\u7684\u5947\u5076\u6027\u5c31\u884c\u4e86**\u3002**\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u5f02\u6216 ($\\oplus$) \u6765\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u51fa\u73b0\u6b21\u6570\u5947\u5076\u6027**\u3002\n\n\u89e3\u51b3\u4e86\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u73b0\u5728\u662f\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\u600e\u4e48\u5feb\u901f\u56de\u7b54\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff1f\n\n\u56e0\u4e3a\u9898\u76ee\u5e76\u6ca1\u6709\u5f3a\u5236\u5728\u7ebf\uff0c\u6240\u4ee5\u53ef\u4ee5 **\u5148\u628a\u8be2\u95ee\u79bb\u7ebf**\uff0c\u7528\u94fe\u8868\u5b58\u50a8\u5728\u5bf9\u5e94\u7684\u70b9\u4e0a\uff0c\u4ee3\u7801\u5b9e\u73b0\u5927\u6982\u957f\u8fd9\u6837\uff1a\n\n```cpp\nvoid addQ(int a, int b){\n     ++cnt;//\u5f53\u524d\u5904\u7406\u5230\u7b2c cnt \u4e2a\u8be2\u95ee\u3002\n     Qask[cnt]=b;//\u8bb0\u5f55\u8be2\u95ee\u7684\u6df1\u5ea6\u3002\n     next_[cnt]=head[a];//\u94fe\u8868\u5904\u7406\u3002\n     head[a]=cnt;//\u94fe\u8868\u5904\u7406\u3002\n     id[cnt]=cnt;//\u8bb0\u5f55\u5f53\u524d\u5904\u7406\u7684\u8be2\u95ee\u7f16\u53f7\uff0c\u4e0d\u8fc7\u4f3c\u4e4e\u8fd9\u4e00\u4e2a\u6ca1\u4ec0\u4e48\u7528\u3002\n     return ;\n}\n```\n\n\u63a5\u4e0b\u6765\uff0c\u8003\u8651\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u4ece $1$ \u53f7\u70b9\u5f00\u59cb $\\text{dfs}$\uff0c\u4e0d\u65ad\u5c06\u4e00\u4e2a\u70b9\u7684\u5b50\u8282\u70b9\u5e76\u5165\u81ea\u5df1\uff0c\u518d\u5904\u7406\u548c\u81ea\u5df1\u8fd9\u4e00\u4e2a\u8282\u70b9\u7684\u76f8\u5173\u8be2\u95ee\u3002\n\n\u4ee3\u7801\u5927\u6982\u957f\u8fd9\u6837\uff1a\n\n```cpp\nde[x]=de[fath]+1;\nbuildtree(1,n,de[x],rt[x],ch[x-1]-'a'+1);\nfor(RI i=headl[x];i;i=ne[i]){\n\tif(to[i]==fath) continue;\n\tdfs(to[i],x);\n\trt[x]=merge(rt[x],rt[to[i]],1,n);\n}//\u5957\u8def\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\nRI cntp;//\u7528\u4e86register int(RI)\uff0ccntp\u8868\u793a\u5f53\u524d\u5f97\u5230\u7b54\u6848\u7684\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570\u3002\nfor(RI i=head[x];i;i=next_[i]){// \u904d\u5386\u548cx\u8282\u70b9\u76f8\u5173\u7684\u8be2\u95ee\u3002\n\tcntp=0;\n\tans[id[i]]=ask(rt[x],1,n,Qask[i]);//ask\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u627e\u5230\u6df1\u5ea6\u4e3aQask[i]\u7684\u70b9\u4ee3\u8868\u7684\u6570\u5b57\u3002\n\twhile(ans[id[i]]){\n\t\tif(ans[id[i]]&1) cntp++;//\u7edf\u8ba1\u3002\n\t\tans[id[i]]>>=1;\n\t}\n\tans[id[i]]=cntp;//\u4fdd\u5b58\u7b54\u6848\uff0c\u5982\u679ccntp<=1\uff0c\u76f4\u63a5\u8f93\u51fa Yes\uff0c\u5426\u5219\u8f93\u51fa No\u3002\n}\n```\n\n\u7136\u540e\u518d\u5957\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u677f\u5b50\uff0c\u5c31\u53ef\u4ee5 $\\color{green}\\texttt{AC}$ \u8fd9\u4e00\u9053\u9898\u76ee\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O((n+q)\\log n)$\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>//\u7231\u7528\u4e07\u80fd\u5934\u3002\n#define RI register int\nusing namespace std;\nconst int MAXN = 5e5+50;\nint n, q;\nint de[MAXN];\nchar ch[MAXN];\nint par, head[MAXN], ne[MAXN<<1], to[MAXN<<1], cnt;\nint headl[MAXN], nel[MAXN<<1], tol[MAXN<<1], weight[MAXN<<1];\nint newnode;\nint lc[MAXN*20], rc[MAXN*20], tree[MAXN*20];\nint tot;\nint rt[MAXN];\nint ans[MAXN];\ninline void add(int x, int y){\n\t++cnt;\n\tto[cnt]=y;\n\tne[cnt]=head[x];\n\thead[x]=cnt;\n\treturn ;\n}//\u52a0\u8fb9\u3002\ninline void addQ(int x, int y){\n\t++tot;\n\ttol[tot]=y;\n\tnel[tot]=headl[x];\n\theadl[x]=tot;\n\tweight[tot]=tot;\n\treturn ;\n}//\u52a0\u8be2\u95ee\u3002\ninline void buildtree(int l, int r, int pos, int &root, int val){\n\troot=++newnode;\n\tif(l==r){\n\t\ttree[root]=(1<<val);\n\t\treturn ;\n\t}\n\tRI mid=(l+r)>>1;\n\tif(pos<=mid) buildtree(l,mid,pos,lc[root],val);\n\telse buildtree(mid+1,r,pos,rc[root],val);\n\ttree[root]=tree[lc[root]]^tree[rc[root]];\n\treturn ;\n}\ninline int merge(int x, int y, int l, int r){\n\tif(!x || !y) return x^y;\n\tif(l==r){//\u53ef\u80fd\u51fa\u73b0\u6df1\u5ea6\u76f8\u540c\u7684\u70b9\uff0c\u5408\u5e76\u8fd9\u4e24\u4e2a\u70b9\u3002\n\t\ttree[x]^=tree[y];\n\t\treturn x;\n\t}\n\tRI mid=(l+r)>>1;\n\tlc[x]=merge(lc[x],lc[y],l,mid);//\u5408\u5e76\u5de6\u5b50\u6811\u3002\n\trc[x]=merge(rc[x],rc[y],mid+1,r);//\u5408\u5e76\u53f3\u5b50\u6811\u3002\n\ttree[x]=tree[lc[x]]^tree[rc[x]];//\u66f4\u65b0\u3002\n\treturn x;\n}\ninline int ask(int root, int l, int r, int rk){\n\tif(l==r) return tree[root];\n\tRI mid=(l+r)>>1;\n\tif(rk<=mid) return ask(lc[root],l,mid,rk);\n\telse return ask(rc[root],mid+1,r,rk);\n   //\u8fd9\u4e2a\u5c31\u76f8\u5f53\u4e8e\u7ebf\u6bb5\u6811\u7684\u5355\u70b9\u67e5\u8be2\u3002\n}\ninline void dfs(int x, int fath){\n\tde[x]=de[fath]+1;//\u8bb0\u5f55\u6df1\u5ea6\u3002\n\tbuildtree(1,n,de[x],rt[x],ch[x-1]-'a'+1);//\u5efa\u6811\u3002\n\tfor(RI i=head[x];i;i=ne[i]){\n\t\tif(to[i]==fath) continue;\n\t\tdfs(to[i],x);//\u904d\u5386\u5b50\u8282\u70b9\n\t\trt[x]=merge(rt[x],rt[to[i]],1,n);//\u5408\u5e76\u3002\n\t}\n\tRI cntp;\n\tfor(RI i=headl[x];i;i=nel[i]){\n\t\tcntp=0;\n\t\tans[weight[i]]=ask(rt[x],1,n,tol[i]);\n\t\twhile(ans[weight[i]]){\n\t\t\tif(ans[weight[i]]&1) cntp++;\n\t\t\tans[weight[i]]>>=1;\n\t\t}\n\t\tans[weight[i]]=cntp;\n\t}\n}\nint x, y;\nint main(){\n\tscanf(\"%d%d\",&n,&q);\n\tfor(RI i=2;i<=n;++i){\n\t\tscanf(\"%d\",&par);\n\t\tadd(par,i);\n\t}\n\tscanf(\"%s\",&ch);\n\tfor(RI i=1;i<=q;++i){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\taddQ(x,y);\n\t}\n\tdfs(1,0);\n\tfor(RI i=1;i<=q;++i){\n\t\tif(ans[i]<=1) printf(\"Yes\\n\");\n\t\telse printf(\"No\\n\");\n\t}\n\treturn 0;\n}\n```\n\n\u5b8c\u7ed3\uff0c\u671b\u70b9\u5b8c\u8d5e\u518d\u8d70\u3002",
        "postTime": 1615775120,
        "uid": 261914,
        "name": "Emy_Ycc",
        "ccfLevel": 6,
        "title": "CF570D Tree Requests\u9898\u89e3"
    },
    {
        "content": "### [CF570D Tree Requests](https://www.luogu.com.cn/problem/CF570D)\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u672c\u9898\u6c42\u7684\u662f\u5728\u4e00\u4e2a\u5b50\u6811\u4e2d\u540c\u4e00\u6df1\u5ea6\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7528 dfs \u5e8f\u6765\u7ef4\u62a4\u3002\n\n\u4e4b\u540e\u6211\u4eec\u8003\u8651\u5230\u4e00\u4e2a\u4e32\u662f\u56de\u6587\u7684\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n> $Case\\ 1:$ \u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u4e86\u4e00\u6b21\u3002\n\n> $Case \\ 2:$ \u6ca1\u6709\u5b57\u7b26\u51fa\u73b0\u4e00\u6b21\u3002\n\n\u53d1\u73b0\u53ea\u6709 26 \u4e2a\u5b57\u7b26\uff0c\u5b8c\u5168\u53ef\u4ee5\u72b6\u538b\u3002\n\n\u5bf9\u4e8e\u6df1\u5ea6\u4e0d\u597d\u5904\u7406\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u5bf9\u6bcf\u4e00\u4e2a\u6df1\u5ea6\u90fd\u5efa\u7acb\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5176\u4e0b\u6807\u7ef4\u62a4\u7684\u662f dfs \u5e8f\u3002\u6bcf\u4e00\u4e2a\u8282\u70b9\u4fdd\u5b58\u7684\u503c\u5c31\u662f\u72b6\u538b\u6709\u51e0\u4e2a\u5b57\u7b26\u3002\n\n\u5177\u4f53\u6765\u8bf4\u5982\u679c\u8981\u589e\u52a0\u4e00\u4e2a\u8282\u70b9 x\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728 $l = r = dfn[x]$ \u7684\u533a\u95f4\u4e0a\u7684\u8282\u70b9 $t[p]$\uff0c\u5f02\u6216\u4e0a\u5f53\u524d\u5f53\u524d\u8282\u70b9\u7684\u72b6\u6001 $t[p] xor \\ sta[hdfn[x]]$\uff0c \u5176\u4e2d $hdfn[x]$ \u8868\u793a dfs \u5e8f\u4e3a x \u7684\u8282\u70b9\u539f\u6765\u7684\u503c\u3002\n\n\n----\n$Code:$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\nvoid r1(T &x) {\n\tx = 0;\n\tchar c(getchar());\n\tint f(1);\n\tfor(; !isdigit(c); c = getchar()) if(c == '-') f = -1;\n\tfor(; isdigit(c); c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48);\n\tx *= f;\n}\n\nconst int maxn = 5e5 + 5;\nconst int maxm = maxn << 1;\nint n, m;\ntypedef int room[maxn];\nroom a, dep, siz, dfn, hdfn;\nstruct Edge{\n\tint to, next;\n}edg[maxn << 1];\nint head[maxn], cnt;\nvoid add(int u,int v) {\n\tedg[++ cnt] = (Edge) {v, head[u]}, head[u] = cnt;\n}\nint num(0);\nvector<int> vc[maxn];\nint mx(0);\nvoid dfs(int p,int f) {\n\tdep[p] = dep[f] + 1;\n\tsiz[p] = 1;\n\tdfn[p] = ++ num;\n\thdfn[num] = p;\n\tif(mx < dep[p]) mx = dep[p];\n\tvc[dep[p]].push_back(p);\n\tfor(int i = head[p];i;i = edg[i].next) {\n\t\tint to = edg[i].to;\n\t\tif(to == f) continue;\n\t\tdfs(to, p);\n\t\tsiz[p] += siz[to];\n\t}\n}\nint rt[maxn];\nstruct Seg {\n\tint num;\n\tstruct Node {\n\t\tint val, l, r;\n\t}t[maxn * 40];\n\tSeg(void) : num(0) {}\n\t#define mid ((l + r) >> 1)\n\tvoid pushup(int p) {\n\t\tt[p].val = t[t[p].l].val ^ t[t[p].r].val;\n\t}\n\tvoid Insert(int &p,int l,int r,int pos) {\n\t\tif(!p) p = ++ num;\n\t\tif(l == r) return t[p].val ^= a[hdfn[pos]], void();\n\t\tif(pos <= mid) Insert(t[p].l, l, mid, pos);\n\t\telse Insert(t[p].r, mid + 1, r, pos);\n\t\tpushup(p);\n\t}\n\tint ask(int p,int l,int r,int ll,int rr) {\n\t\tif(!p) return 0;\n\t\tif(ll <= l && r <= rr) return t[p].val;\n\t\tint res(0);\n\t\tif(ll <= mid) res ^= ask(t[p].l, l, mid, ll, rr);\n\t\tif(mid < rr) res ^= ask(t[p].r, mid + 1, r, ll, rr); \n\t\treturn res;\n\t}\n}T;\nsigned main() {\n\tint i, j;\n\tr1(n), r1(m);\n\tfor(i = 2;i <= n; ++ i) {\n\t\tint x;\n\t\tr1(x);\n\t\tadd(i, x), add(x, i);\n\t} \n\tfor(i = 1;i <= n; ++ i) {\n\t\tchar c;\n\t\tcin >> c;\n\t\ta[i] = (1 << (c - 'a'));\n\t}\n\tdfs(1, 0);\n\tfor(i = 1;i <= n; ++ i) {\n\t\tfor(int j = 0; j < vc[i].size(); ++ j) {\n\t\t\tint to = vc[i][j];\n\t\t\tT.Insert(rt[i], 1, n, dfn[to]);\n\t\t}\n\t}\n\twhile(m --) {\n\t\tint u, b;\n\t\tr1(u), r1(b);\n\t\tint ans = T.ask(rt[b], 1, n, dfn[u], dfn[u] + siz[u] - 1);\n\t\tans -= (ans & (-ans));\n\t\tif(!ans) printf(\"Yes\\n\");\n\t\telse printf(\"No\\n\");\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1614931161,
        "uid": 151723,
        "name": "legendgod",
        "ccfLevel": 7,
        "title": "CF570D Tree Requests \u9898\u89e3"
    },
    {
        "content": "\u72b6\u538b+\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002\n\n\u8fd8\u662f\u5f88\u88f8\u7684\u4e00\u9898\u554a\u4e3a\u4ec0\u4e48\u5927\u5bb6\u90fd\u7528\u4ec0\u4e48 dsu on a tree\u3002\u3002\u3002\n\n\u5148\u662f\u628a\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u72b6\u538b\u6389\n\n\u7136\u540e\u7b49\u4ef7\u4e8e\u5224\u65ad\u6df1\u5ea6\u7b49\u4e8e$K$\u4e14\u5728\u5b50\u6811\u5185\u7684\u70b9\u7684\u72b6\u6001\u5f02\u6216\u548c\u662f\u5426\u53ea\u5b58\u5728\u4e00\u4e2a$1$\u6216\u4e0d\u5b58\u5728$1$\n\n\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u6df1\u5ea6\u90fd\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u4ee5 dfs \u5e8f\u4e3a\u4e0b\u6807\uff0c\u7ef4\u62a4\u533a\u95f4\u5f02\u6216\u503c\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\u76f4\u63a5\u5728\u5b50\u6811\u7684 dfs \u5e8f\u533a\u95f4\u5185\u6c42\u5f02\u6216\u548c\u5c31\u597d\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct SEG{\n    int l,r,mn;\n}seg[10000001];\nstruct edge{\n    int to,next;\n}g[1200001];\nint n,secnt,tcnt,m,head[520001],root[520001],tot,a[520001],mxdep,tpos[520001],pre[520001],size[520001],dep[520001],las;\nvector <int> Dep[520001]; \ninline void made(int from,int to){\n    g[++tot].to=to;g[tot].next=head[from];head[from]=tot;\n}\nvoid dfs(int u,int fa){\n    tpos[u]=++tcnt;pre[tcnt]=u;size[u]=1;dep[u]=dep[fa]+1;\n    for (int i=head[u];i;i=g[i].next){\n        int v=g[i].to;\n        if (v==fa) continue;\n        dfs(v,u);\n        size[u]+=size[v];\n    }\n    mxdep=max(mxdep,dep[u]);\n    Dep[dep[u]].push_back(u);\n}\n#define mid ((lb+rb)>>1)\nvoid update(int &rt,int lb,int rb,int pos){\n    seg[++secnt]=seg[rt];rt=secnt;seg[rt].mn=seg[rt].mn^a[pre[pos]];\n    if (lb==rb) return;\n    if (pos<=mid) update(seg[rt].l,lb,mid,pos);\n    else update(seg[rt].r,mid+1,rb,pos);\n}\nint query(int rt,int l,int r,int lb,int rb){\n    if (lb>r||rb<l||!rt) return 0;\n    if (lb>=l&&rb<=r) return seg[rt].mn;\n    return query(seg[rt].l,l,r,lb,mid)^query(seg[rt].r,l,r,mid+1,rb);\n}\ninline int read(){\n    register int x=0,f=1;char ch=getchar();\n    while (!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while (isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n    return x*f;\n}\nint main(){\n    n=read(),m=read();\n    for (int i=1;i<n;i++){\n        int x=read();\n        made(i+1,x);made(x,i+1);\n    }\n    for (int i=1;i<=n;i++){\n        char ch=getchar();\n        while (!isalpha(ch)) ch=getchar();\n        a[i]=(ch-'a');\n        a[i]=(1<<a[i]);\n    }\n    dfs(1,0);secnt=1;\n    for (int i=1;i<=mxdep;i++){\n        int X=Dep[i].size();\n        for (int j=0;j<X;j++){\n            int y=Dep[i][j];\n            update(root[i],1,n,tpos[y]);\n        }\n    }\n    while (m--){\n        int x=read(),K=read();\n        int fff=0,fk=query(root[K],tpos[x],tpos[x]+size[x]-1,1,n);\n        if (!fk){printf(\"Yes\\n\");continue;}\n        while (fk){\n        \tif (fk&1) fff++;\n        \tfk>>=1;\n        }\n        if (fff<=1) printf(\"Yes\\n\");\n        else printf(\"No\\n\");\n    }\n}\n```",
        "postTime": 1560339204,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF570D \u3010Tree Requests\u3011"
    },
    {
        "content": "\u4e00\u79cd\u6781\u4e3a\u66b4\u529b\u7684\u529e\u6cd5\u3002\n\n\u5f53\u6211\u4eec\u5728\u5904\u7406\u9759\u6001\u6811\u4e0a\u95ee\u9898\u65f6\uff0c\u6211\u4eec\u6709\u65f6\u4f1a\u9047\u89c1\u5c06\u5b50\u6811\u4fe1\u606f\u5408\u5e76\u5230\u7236\u8282\u70b9\u4e0a\u3002\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6811\u4e0a\u8282\u70b9\u90fd\u5f00\u4e00\u4e2a\u6876\u6765\u7ef4\u62a4\u3002\u4f46\u662f\u53ef\u80fd\u7a7a\u95f4\u4f1a\u5f00\u4e0d\u4e0b\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u5f00\u4e00\u4e2a\u5168\u5c40\u6876\uff0c\u6bcf\u6b21\u90fd\u8981\u628a\u6876\u6e05\u7a7a\uff0c\u7136\u540e\u66b4\u529b\u7edf\u8ba1\u5b50\u6811\u91cc\u9762\u6240\u6709\u4fe1\u606f\u3002\n\n\u8fd9\u6837\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u90fd\u9700\u8981\u5c06\u5176\u6240\u6709\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u5168\u90e8\u904d\u5386\uff0c\u53ef\u80fd\u4f1a\u6709\u8d85\u65f6\u98ce\u9669\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u7528$dfs$\u8fdb\u884c\u904d\u5386\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f18\u5148\u8ba1\u7b97\u5b50\u8282\u70b9\u518d\u8ba1\u7b97\u7236\u8282\u70b9\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9$x$,\u6211\u4eec\u90fd\u53ef\u4ee5\u4fdd\u7559\u4e00\u4e2a\u5b50\u6811$y$\u7684\u4fe1\u606f\uff0c\u8ba9\u5176\u76f4\u63a5\u7ee7\u627f\u5230$x$\u7684\u4fe1\u606f\uff0c\u8fd9\u6837\uff0c\u9009\u90a3\u4e00\u4e2a\u5b50\u6811\u5c31\u6210\u4e3a\u4e86\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\n\n\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u8d2a\u5fc3\u662f\uff0c\u6211\u4eec\u9009\u8282\u70b9\u6570\u6700\u591a\u7684\u90a3\u4e2a\uff0c\u8fd9\u6837\u7ee7\u627f\u5230\u7684\u4fe1\u606f\u66f4\u591a\uff0c\u8282\u7701\u7684\u65f6\u95f4\u4e5f\u5c31\u8d8a\u591a\u3002\n\n\u90a3\u4e48\u5c31\u6709\u4e00\u4e2a\u7c7b\u4f3c\u91cd\u94fe\u5256\u5206\u7684\u64cd\u4f5c\u3002\u904d\u5386\u6574\u68f5\u6811\uff0c\u5e76\u8bb0\u5f55\u4e0b\u4ed6\u7684\u91cd\u513f\u5b50\u3002\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u662f\u66b4\u529b\u7684\u601d\u8def\u4e86\uff0c\u5177\u4f53\u5b9e\u73b0\u770b\u4e00\u4e2a\u4f8b\u9898\u3002\n\n\u4e00\u68f5\u6709\u6839\u6811\uff0c\u4ee51\u4e3a\u6839\u3002\u6bcf\u4e2a\u70b9\u53ea\u6709\u4e00\u4e2a\u989c\u8272\uff0c\u8bf7\u4f60\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u7684\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\u3002\n\u6709\u591a\u4e2a\u989c\u8272\u51fa\u73b0\u6b21\u6570\u76f8\u540c\u65f6\uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u89e3\u3002\n\n\u6765\u6e90\uff1absoj6750\n\n\u672c\u9898\u6211\u4eec\u76f4\u63a5\u5f00\u4e00\u4e2a\u6876$t[x]$\u8868\u793a\u5b50\u6811\u4e2d\u989c\u8272\u4e3a$x$\u7684\u4e2a\u6570\uff0c\u7136\u540e\u5728\u627e\u5230\u91cd\u513f\u5b50\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u6211\u4eec\u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa4\u3002\n\n1. \u4f18\u5148\u9012\u5f52\u8ba1\u7b97\u975e\u91cd\u5b50\u8282\u70b9\u4fe1\u606f\n\n2. \u8ba1\u7b97\u91cd\u5b50\u8282\u70b9\u4fe1\u606f\n\n3. \u518d\u6b21\u9012\u5f52\u8ba1\u7b97\u975e\u91cd\u5b50\u8282\u70b9\u4fe1\u606f\uff0c\u5e76\u5c06\u4fe1\u606f\u5408\u5e76\u5230\u91cd\u5b50\u8282\u70b9\u7684\u4fe1\u606f\n\n4. \u52a0\u5165\u5f53\u524d\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u66f4\u65b0\u7b54\u6848\n\n5. \u52a0\u5165\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u7236\u8282\u70b9\u91cd\u5b50\u8282\u70b9\uff0c\u6e05\u7a7a\u6876\n\n```\n#include<bits/stdc++.h>\n#define N 300005\nusing namespace std;\nint n,w[N],size[N],tmp[N],son[N];\nint head[N],idx,t[N],seg[N],rev[N],cnt,fs[N],MAXN;\nint ans[N];\nstruct edge{\n\tint v,next;\n}e[2*N];\nvoid add(int u,int v){\n\te[++idx].v=v;\n\te[idx].next=head[u];\n\thead[u]=idx;\n}\nvoid dfs1(int x,int f){\n\tsize[x]=1;\n\tseg[x]=++cnt;//\u7c7b\u4f3c\u6811\u94fe\u5256\u5206\u7684\u64cd\u4f5c \n\trev[cnt]=x;\n\tfor(int i=head[x];i;i=e[i].next){\n\t\tint y=e[i].v;\n\t\tif(y==f) continue;\n\t\tdfs1(y,x);\n\t\tsize[x]+=size[y];\n\t\tif(size[y]>size[son[x]]) son[x]=y;\n\t}\n}\nvoid dfs2(int x,int f,int type){//type\u8868\u793ax\u662f\u4e0d\u662f\u91cd\u513f\u5b50 \n\tfor(int i=head[x];i;i=e[i].next){\n\t\tint y=e[i].v;\n\t\tif(y==son[x]||y==f) continue;\n\t\tdfs2(y,x,1);\n\t}\n\tif(son[x]) dfs2(son[x],x,0);\n\tfor(int i=head[x];i;i=e[i].next){\n\t\tint y=e[i].v;\n\t\tif(y==f||y==son[x]) continue;\n\t\tfor(int j=seg[y];j<=seg[y]+size[y]-1;j++) t[w[rev[j]]]++;//\u904d\u5386\u5b50\u6811 \n\t}\n\tt[w[x]]++;\n//\tcout<<x<<\": \";\n//\tfor(int i=1;i<=MAXN;i++) cout<<t[i]<<' ';\n//\tcout<<endl;\n\tint mx=0;\n\tfor(int i=1;i<=MAXN;i++){\n\t\tif(t[i]>mx){\n\t\t\tmx=t[i];\n\t\t\tans[x]=i;\n\t\t}\n\t}\n\tif(type) for(int i=1;i<=MAXN;i++) t[i]=0;//\u6e05\u96f6\u8ba1\u6570\u6570\u7ec4 \n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&w[i]);\n\t\ttmp[i]=w[i];\n\t}\n\tsort(tmp+1,tmp+n+1);\n\tint len=unique(tmp+1,tmp+n+1)-tmp-1;\n\tfor(int i=1;i<=n;i++){\n\t\tint tmpp=lower_bound(tmp+1,tmp+len+1,w[i])-tmp;\n\t\tfs[tmpp]=w[i];\n\t\tw[i]=tmpp;\n\t\tMAXN=max(tmpp,MAXN);\n\t\t//cout<<w[i]<<' ';\n\t}\n\t//cout<<endl;\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,0,1);\n\tfor(int i=1;i<=n;i++) printf(\"%d\\n\",fs[ans[i]]);\n\treturn 0;\n}\n```\n[CF375D](https://www.luogu.com.cn/problem/CF375D)\n\n\u672c\u9898\u540c\u6837\u4e5f\u662f\u7c7b\u4f3c\u4e0a\u9898\u7684\u95ee\u9898\u3002\n\n\u53ea\u9700\u989d\u5916\u8ba1\u7b97$d[k]$\u8868\u793a\u5b50\u6811\u4e2d\u51fa\u73b0\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e$k$\u7684\u989c\u8272\u7684\u4e2a\u6570\u3002\n\n\u4f46\u662f\u8fd9\u6837\u6765\u60f3\u4f3c\u4e4e\u5c31\u9700\u8981\u8ba1\u7b97\u524d\u7f00\u548c\u4e86\uff1f\n\n\u5b9e\u9645\u4e0a\u4e0d\u7528\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u51fa\u73b0$k$\u6b21\u7684\u989c\u8272\uff0c\u4ed6\u53ea\u5bf9\u4e8e$d[i],i<=k$\u7684\u7b54\u6848\u6709\u8d21\u732e\uff0c\u800c\u6211\u4eec\u5f97\u5230$k$\u8fd9\u4e2a\u7b54\u6848\u65f6\uff0c\u662f\u4ece$0$\u4f9d\u6b21\u52a0\u4e0a\u6765\u7684\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u6bcf\u52a0\u4e00\u6b21\u5c31\u5c06\u7b54\u6848$+1$\u5373\u53ef\u3002\n\n```\n#include<bits/stdc++.h>\n#define N 100005\nusing namespace std;\nint n,m;\nint head[N],idx,c[N];\nint t[N],size[N],son[N];\nbool vis[N];\nstruct query{\n\tint k,id; \n};\nint ans[N],d[N];\nstruct edge{\n\tint v,next;\n}e[N<<1];\nvector<query> q[N];\nvoid add(int u,int v){\n\te[++idx].v=v;\n\te[idx].next=head[u];\n\thead[u]=idx;\n}\nvoid dfs1(int x,int f){\n\tsize[x]=1;\n\tfor(int i=head[x];i;i=e[i].next){\n\t\tint y=e[i].v;\n\t\tif(y==f) continue;\n\t\tdfs1(y,x);\n\t\tsize[x]+=size[y];\n\t\tif(size[y]>size[son[x]]) son[x]=y;\n\t}\n}\nvoid solve(int x,int f,int p){\n\tif(p==-1)\n        d[t[c[x]]]+=p;\n    t[c[x]]+=p;\n    if(p==1)\n        d[t[c[x]]]+=p;\n    for(int i=head[x];i;i=e[i].next){\n    \tint y=e[i].v;\n        if(y==f||vis[y])\n            continue;\n        solve(y,x,p);\n    }\n}\nvoid dfs2(int x,int f,int type){\n\tfor(int i=head[x];i;i=e[i].next){\n\t\tint y=e[i].v;\n\t\tif(y==f||y==son[x]) continue;\n\t\tdfs2(y,x,1);\n\t}\n\tif(son[x]){\n\t\tdfs2(son[x],x,0);\n\t\tvis[son[x]]=1;\n\t}\n\tsolve(x,f,1);\n\t//for(int i=1;i<=10;i++) cout<<d[i]<<' ';\n\t//cout<<endl;\n\tfor(int i=0;i<q[x].size();i++)\n\t\tans[q[x][i].id]=d[q[x][i].k];\n\tif(son[x]) vis[son[x]]=0;\n\tif(type) solve(x,f,-1);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&c[i]);\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint u;\n\t\tquery x;\n\t\tscanf(\"%d%d\",&u,&x.k);\n\t\tx.id=i;\n\t\tq[u].push_back(x);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,0,1);\n\tfor(int i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n\u6ce8\u610f\u672c\u9898\u6211\u4eec\u7528\u5230\u4e86\u79bb\u7ebf\u7b97\u6cd5\uff0c\u53e6\u5916\u8fd9\u91cc\u6211\u662f\u7528\u9012\u5f52\u5b9e\u73b0\u7684\u8ba1\u6570\u4e0e\u6e05\u7a7a\n\n\n[CF570D](https://www.luogu.com.cn/problem/CF570D#submit)\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\u5047\u5982\u8bf4\u4e00\u4e32\u5b57\u7b26\u91cd\u62cd\u540e\u80fd\u591f\u6210\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u5176\u81f3\u591a\u6709\u4e00\u4e2a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u7b26\u3002\n\n\u518d\u52a0\u4e0a\u4f53\u9762\u8bf4\u7684\u6df1\u5ea6$k$\u662f\u5bf9\u4e8e\u7edf\u4e00\u7684\u6839\u8282\u70b9$1$\u6765\u8bb2\u7684\uff0c\u90a3\u4e48\u5f88\u5bb9\u6613\u60f3\u5230\u7684$t[x]$\u6765\u8fdb\u884c\u72b6\u6001\u538b\u7f29\uff0c$t[x]$\u7684\u4e8c\u8fdb\u5236\u4e0b\u7684$i$\u4f4d\u4e3a$0$\u8868\u793a\u5b57\u6bcd$i$\u51fa\u73b0\u5076\u6570\u6b21\uff0c\u5426\u5219\u51fa\u73b0\u5947\u6570\u6b21\u3002\n\n\u7136\u540e\u7528$check()$\u6765\u8ba1\u7b97\u51fa\u73b0\u4e86\u51e0\u4e2a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\u3002\n\n```\n#include<bits/stdc++.h>\n#define N 500005\nusing namespace std;\nint n,m;\nint head[N],idx,w[N];\nint size[N],son[N],dep[N];\nint t[N];\nbool vis[N],ans[N];\nstruct query{\n\tint k,id; \n};\nstruct edge{\n\tint v,next;\n}e[N<<1];\nvector<query> q[N];\nvoid add(int u,int v){\n\te[++idx].v=v;\n\te[idx].next=head[u];\n\thead[u]=idx;\n}\nvoid dfs1(int x,int f){\n\tsize[x]=1;\n\tdep[x]=dep[f]+1;\n\tfor(int i=head[x];i;i=e[i].next){\n\t\tint y=e[i].v;\n\t\tdfs1(y,x);\n\t\tsize[x]+=size[y];\n\t\tif(size[y]>size[son[x]]) son[x]=y;\n\t}\n}\nbool check(int x){\n\tbool f=0;\n\twhile(x){\n\t\tif(x&1){\n\t\t\tif(f==1) return false;\n\t\t\tf=1;\n\t\t}\n\t\tx>>=1;\n\t}\n\treturn true;\n}\nvoid solve(int x){\n\tt[dep[x]]^=(1<<w[x]);\n\tfor(int i=head[x];i;i=e[i].next){\n\t\tint y=e[i].v;\n\t\tif(vis[y]) continue;\n\t\tsolve(y);\n\t}\n}\nvoid dfs2(int x,int type){\n\tfor(int i=head[x];i;i=e[i].next){\n\t\tint y=e[i].v;\n\t\tif(y==son[x]) continue;\n\t\tdfs2(y,1);\n\t}\n\tif(son[x]){\n\t\tdfs2(son[x],0);\n\t\tvis[son[x]]=1;\n\t}\n\tsolve(x);\n\tfor(int i=0;i<q[x].size();i++) ans[q[x][i].id]=check(t[q[x][i].k]);\n\tif(son[x]) vis[son[x]]=0;\n\tif(type) solve(x);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=2;i<=n;i++){\n\t\tint f;\n\t\tscanf(\"%d\",&f);\n\t\tadd(f,i); \n\t}\n\tstring s;\n\tcin>>s;\n\tfor(int i=0;i<s.size();i++)\n\t\tw[i+1]=s[i]-'a';\n\tfor(int i=1;i<=m;i++){\n\t\tint u;\n\t\tquery x;\n\t\tscanf(\"%d%d\",&u,&x.k);\n\t\tx.id=i;\n\t\tq[u].push_back(x);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tfor(int i=1;i<=m;i++){\n\t\tif(ans[i]==1) puts(\"Yes\");\n\t\telse puts(\"No\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1613999258,
        "uid": 128870,
        "name": "chen_qian",
        "ccfLevel": 7,
        "title": "Dsu on Tree\u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "### \u601d\u8def\uff1a\n\n$\\quad$ $Dsu$ $on$ $Tree$\u6a21\u677f\u9898\uff0c\u6ca1\u6709\u505a\u8fc7\u7684\u53ef\u4ee5\u505a\u505a[CF600E Lomsat gelral](https://www.luogu.com.cn/problem/CF600E)\uff0c\u4e5f\u662f\u4e00\u9053\u6a21\u677f\u9898\uff0c\u4e0b\u9762\u5c31\u7b80\u5355\u8bb2\u8bb2\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 ($DSU$ $on$ $Tree$)\u7b97\u6cd5\uff0c\u5982\u679c\u6709\u4e0d\u61c2\u7684\u53ef\u4ee5\u63d0\u51fa\u6765\u3002\n\n$$\\text{\u524d\u7f6e\u77e5\u8bc6}$$\n\n$\\quad$\u5b66\u8fd9\u4e2a\u4e4b\u524d\u9700\u8981\u5bf9\u6811\u4e0a\u64cd\u4f5c\u3001 $dfs$ \u5e8f\u548c\u8f7b\u91cd\u94fe\u5256\u5206\u7b49\u77e5\u8bc6\u6709\u4e00\u5b9a\u4e86\u89e3\uff0c\u6700\u597d\u5df2\u7ecf\u638c\u63e1\u4e86\u6811\u94fe\u5256\u5206\u3002\n\n$$\\text{\u7b97\u6cd5\u601d\u60f3}$$\n\n$\\quad$\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 ($DSU$ $on$ $Tree$)\uff0c\u662f\u4e00\u4e2a\u5728 $O(nlogn)$ \u65f6\u95f4\u5185\u89e3\u51b3\u8bb8\u591a\u6811\u4e0a\u95ee\u9898\u7684\u6709\u529b\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u6811\u4e0a\u79bb\u7ebf\u95ee\u9898\u53ef\u4ee5\u901f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u5927\u90e8\u5206\u7b97\u6cd5\u4e14\u66f4\u6613\u4e8e\u7406\u89e3\u548c\u5b9e\u73b0\u3002\n\n$\\quad$\u5148\u60f3\u4e00\u4e0b\u66b4\u529b\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\u90fd\u904d\u5386\u6574\u68f5\u5b50\u6811\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\uff0c\u6700\u540e\u518d\u6e05\u7a7acnt\u6570\u7ec4\uff0c\u6700\u574f\u60c5\u51b5\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2)$ \uff0c\u5bf9\u4e8e $10^5$ \u7684\u6570\u636e\u80af\u5b9a\u662f\u8fc7\u4e0d\u53bb\u7684\u3002\n\n$\\quad$\u73b0\u5728\u8003\u8651\u4f18\u5316\u7b97\u6cd5\uff0c\u66b4\u529b\u7b97\u6cd5\u8dd1\u5f97\u6162\u7684\u539f\u56e0\u5c31\u662f\u591a\u6b21\u904d\u5386\uff0c\u591a\u6b21\u6e05\u7a7a\u6570\u7ec4\uff0c\u4e00\u4e2a\u663e\u7136\u7684\u4f18\u5316\u5c31\u662f\u5c06\u8be2\u95ee\u540c\u4e00\u4e2a\u5b50\u6811\u7684\u8be2\u95ee\u653e\u5728\u4e00\u8d77\u5904\u7406\uff0c\u4f46\u8fd9\u6837\u8fd8\u662f\u6ca1\u6709\u5904\u7406\u5230\u5173\u952e\uff0c\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f $O(n^2)$ \uff0c\u8003\u8651\u5230\u8be2\u95ee $x$ \u8282\u70b9\u65f6\uff0c $x$ \u7684\u5b50\u6811\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u6e05\u7a7a\u6570\u7ec4\uff0c\u5148\u7edf\u8ba1 $x$ \u7684\u5b50\u6811\u4e2d\u7684\u7b54\u6848\uff0c\u518d\u7edf\u8ba1 $x$ \u7684\u7b54\u6848\uff0c\u8fd9\u6837\u5c31\u9700\u8981\u63d0\u524d\u5904\u7406\u597d $dfs$ \u5e8f\u3002\n\n$\\quad$\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u4f18\u5316\uff0c\u904d\u5386\u5230\u6700\u540e\u4e00\u4e2a\u5b50\u6811\u65f6\u662f\u4e0d\u7528\u6e05\u7a7a\u7684\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u4ea7\u751f\u5bf9\u5176\u4ed6\u8282\u70b9\u5f71\u54cd\u4e86\uff0c\u6839\u636e\u8d2a\u5fc3\u7684\u601d\u60f3\u6211\u4eec\u5f53\u7136\u8981\u628a\u8282\u70b9\u6570\u6700\u591a\u7684\u5b50\u6811\uff08\u5373\u91cd\u513f\u5b50\u5f62\u6210\u7684\u5b50\u6811\uff09\u653e\u5728\u6700\u540e\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u770b\u4f3c\u6bd4\u8f83\u5feb\u7684\u7b97\u6cd5\uff0c\u5148\u904d\u5386\u6240\u6709\u7684\u8f7b\u513f\u5b50\u8282\u70b9\u5f62\u6210\u7684\u5b50\u6811\uff0c\u7edf\u8ba1\u7b54\u6848\u4f46\u662f\u4e0d\u4fdd\u7559\u6570\u636e\uff0c\u7136\u540e\u904d\u5386\u91cd\u513f\u5b50\uff0c\u7edf\u8ba1\u7b54\u6848\u5e76\u4e14\u4fdd\u7559\u6570\u636e\uff0c\u6700\u540e\u518d\u904d\u5386\u8f7b\u513f\u5b50\u4ee5\u53ca\u7236\u8282\u70b9\uff0c\u5408\u5e76\u91cd\u513f\u5b50\u7edf\u8ba1\u8fc7\u7684\u7b54\u6848\u3002\n\n$\\quad$\u5176\u5b9e\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u57fa\u672c\u601d\u8def\u5c31\u662f\u8fd9\u6837\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\u4ee3\u7801\u7406\u89e3\u3002\n\n```\nil int check(int x)//\u7edf\u8ba1\u7b54\u6848\n{\n  int num=0,ret=0;\n  for(re i=1;i<=n;i++)\n    {\n      if(cnt[i]==num){ret+=i;}\n      else if(cnt[i]>num){num=cnt[i],ret=i;}\n    }\n  return ret;\n}\nil void add(int x){cnt[col[x]]++;}//\u5355\u70b9\u589e\u52a0\nil void del(int x){cnt[col[x]]--;}//\u5355\u70b9\u51cf\u5c11\nil void raise(int x){for(re i=seg[x];i<=seg[x]+size[x]-1;i++)add(rev[i]);}//\u589e\u52a0x\u5b50\u6811\u7684\u8d21\u732e\nil void clear(int x){for(re i=seg[x];i<=seg[x]+size[x]-1;i++)del(rev[i]);}//\u6e05\u7a7ax\u5b50\u6811\u7684\u8d21\u732e\nil void dfs1(int x,int fa)\n{\n  dep[x]=dep[fa]+1;father[x]=fa;//\u5904\u7406\u6df1\u5ea6\uff0c\u7236\u4eb2\n  seg[x]=++seg[0];rev[seg[x]]=x;size[x]=1;//\u5b50\u6811\u5927\u5c0f\uff0cdfs\u5e8f\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==fa)continue;dfs1(y,x);\n      size[x]+=size[y];\n      if(size[y]>size[son[x]])son[x]=y;//\u91cd\u513f\u5b50\n    }\n}\nil void dfs2(int x,int flag)//flag\u8868\u793a\u662f\u5426\u4e3a\u91cd\u513f\u5b50\uff0c1\u8868\u793a\u91cd\u513f\u5b50\uff0c0\u8868\u793a\u8f7b\u513f\u5b50\n{\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==son[x]||y==father[x])continue;\n      dfs2(y,0);//\u5148\u904d\u5386\u8f7b\u513f\u5b50\n    }\n  if(son[x])dfs2(son[x],1);//\u518d\u904d\u5386\u91cd\u513f\u5b50\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==son[x]||y==father[x])continue;\n      raise(y);//\u66f4\u65b0\u8f7b\u513f\u5b50\u7684\u8d21\u732e\n    }add(x);//\u52a0\u4e0ax\u7ed3\u70b9\u672c\u8eab\u7684\u8d21\u732e\n  ans[x]=check(x);//\u66f4\u65b0\u7b54\u6848\n  if(!flag)clear(x);//\u5982\u679c\u662f\u8f7b\u513f\u5b50\uff0c\u5c31\u6e05\u7a7a\n}\n```\n$\\quad$\u4e0a\u9762\u7684\u53ea\u662f\u6a21\u677f\u7684\u4ee3\u7801\uff0c\u6b64\u9898\u7684\u5b8c\u6574\u4ee3\u7801\u5728\u4e0b\u9762\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n#define re register int\n#define LL long long\n#define il inline\n#define pc putchar('\\n')\n#define next nee\n#define inf 1e18\nil int read()\n{\n  int x=0,f=1;char ch=getchar();\n  while(!isdigit(ch)&&ch!='-')ch=getchar();\n  if(ch=='-')f=-1,ch=getchar();\n  while(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n  return x*f;\n}\nil void print(int x)\n{\n  if(x<0)putchar('-'),x=-x;\n  if(x/10)print(x/10);\n  putchar(x%10+'0');\n}\nconst int N=5e5+5;\nint n,m,next[N],head[N],go[N],tot,s[N],father[N],cnt[N][28];\nint dep[N],size[N],son[N],seg[N],rev[N];\nbool ans[N];\nstruct node{\n  int x,y;};\nvector<node>q[N];\nil void Add(int x,int y)\n{\n  next[++tot]=head[x];\n  head[x]=tot;go[tot]=y;\n}\nil void dfs1(int x,int fa)\n{\n  dep[x]=dep[fa]+1;size[x]=1;seg[x]=++seg[0];rev[seg[x]]=x;\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      dfs1(y,x);size[x]+=size[y];\n      if(size[y]>size[son[x]])son[x]=y;//\u91cd\u513f\u5b50\n    }\n}\nil bool check(int x)//\u7edf\u8ba1\u7b54\u6848\n{\n  int ret=0;\n  for(re i=1;i<=26;i++)if(cnt[x][i]&1)ret++;\n  return ret<=1;\n}\nil void add(int x){cnt[dep[x]][s[x]]++;}//\u5355\u70b9\u589e\u52a0\nil void update(int x){for(re i=seg[x];i<=seg[x]+size[x]-1;i++)add(rev[i]);}//\u589e\u52a0x\u5b50\u6811\u7684\u8d21\u732e\nil void del(int x){cnt[dep[x]][s[x]]=0;}//\u5355\u70b9\u51cf\u5c11\nil void out(int x){for(re i=seg[x];i<=seg[x]+size[x]-1;i++)del(rev[i]);}//\u6e05\u7a7ax\u5b50\u6811\u7684\u8d21\u732e\nil void dfs2(int x,int flag)//flag\u8868\u793a\u662f\u5426\u4e3a\u91cd\u513f\u5b50\uff0c1\u8868\u793a\u91cd\u513f\u5b50\uff0c0\u8868\u793a\u8f7b\u513f\u5b50\n{\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==son[x])continue;\n      dfs2(y,0);//\u5148\u904d\u5386\u8f7b\u513f\u5b50\n    }\n  if(son[x])dfs2(son[x],1);//\u518d\u904d\u5386\u91cd\u513f\u5b50\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==son[x])continue;\n      update(y);//\u66f4\u65b0\u8f7b\u513f\u5b50\u7684\u8d21\u732e\n    }add(x);//\u52a0\u4e0ax\u7ed3\u70b9\u672c\u8eab\u7684\u8d21\u732e\n  for(re i=0;i<q[x].size();i++)\n    ans[q[x][i].y]=check(q[x][i].x);//\u66f4\u65b0\u7b54\u6848\n  if(!flag)out(x);//\u5982\u679c\u662f\u8f7b\u513f\u5b50\uff0c\u5c31\u6e05\u7a7a\n}\nsigned main()\n{\n  n=read();m=read();\n  for(re i=2;i<=n;i++){re x=read();father[i]=x,Add(x,i);}\n  string ss;cin>>ss;\n  for(re i=1;i<=n;i++)s[i]=ss[i-1]-'a'+1;\n  for(re i=1,x,y;i<=m;i++)x=read(),y=read(),q[x].push_back((node){y,i});//vector\u5b58\u50a8\u8be2\u95ee\uff0c\u5c06\u8be2\u95ee\u540c\u4e00\u9897\u5b50\u6811\u7684\u653e\u4e00\u8d77\n  dfs1(1,0);dfs2(1,0);\n  for(re i=1;i<=m;i++)ans[i]?puts(\"Yes\"):puts(\"No\");\n  return 0;\n}\n```",
        "postTime": 1605702061,
        "uid": 109220,
        "name": "Farkas_W",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF570D \u3010Tree Requests\u3011"
    },
    {
        "content": "## \u9898\u89e3 $\\text{CF570D\\ Tree Requests}$\n\n#### \u672c\u9898\u601d\u8def:dfs\u5e8f+\u4e8c\u5206\n\n\u4e00\u53e5\u8bdd\u9898\u610f:\u4e00\u68f5\u6709\u6839\u6811\u4e0a\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u5b57\u6bcd\uff0c\u6bcf\u6b21\u67e5\u8be2\u70b9$x$\u7684\u6240\u6709$\\text{K-son}$\u4e0a\u7684\u5b57\u6bcd\u80fd\u5426\u91cd\u7ec4\u6210\u56de\u6587\u4e32\u3002\n\n\u5982\u679c\u6ca1\u6709\u505a\u8fc7[CF208E](https://www.luogu.com.cn/problem/CF208E)\u7684\u53ef\u4ee5\u5148\u53bb\u505a\u4e00\u4e0b\uff0c\u662f\u672c\u9898\u7684\u7b80\u5316\u7248\u3002[\u8fd9](https://www.luogu.com.cn/blog/Guess00/solution-CF208E)\u662f\u6211\u7684\u505a\u6cd5\u3002\n\nCF208E\u662f\u6c42$\\text{K-son}$\u7684\u4e2a\u6570\uff0c\u800c\u672c\u9898\u662f\u662f\u6c42$\\text{K-son}$\u7684\u5b57\u6bcd\u80fd\u5426\u91cd\u7ec4\u6210\u56de\u6587\u4e32\u3002\u4e0b\u9762\u8003\u8651\u5982\u4f55\u5224\u65ad\u80fd\u5426\u91cd\u7ec4\u6210\u56de\u6587\u4e32\u3002\u8003\u8651\u56de\u6587\u4e32\u7684\u6027\u8d28:\u81f3\u591a\u6709\u4e00\u4e2a\u5b57\u6bcd\u51fa\u73b0\u5947\u6570\u6b21\u3002\u540cCF208E,\u53ef\u4ee5\u4e8c\u5206\u51fa$\\text{K-son}$\u7684\u6700\u5de6\u8fb9$l$\u548c\u6700\u53f3\u8fb9$r$\u3002\u660e\u663e\uff0c\u5f97\u5230$l$\u548c$r$\u540e\uff0c\u9700\u8981\u5feb\u901f\u5730\u5224\u65ad\u51fa\u6709\u51e0\u4e2a\u5b57\u6bcd\u51fa\u73b0\u4e86\u5947\u6570\u6b21\u3002\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u5148\u5dee\u5206\uff0c\u5206\u6210$0$~$r$**\u51cf**$0$~$l$(\u8fd9\u4e2a**\u51cf**\u8bf7\u81ea\u884c\u611f\u6027\u7406\u89e3)\u3002\u4e0d\u96be\u53d1\u73b0\u5b57\u6bcd\u4e00\u5171\u53ea\u670926\u4e2a\uff0c\u4e8e\u662f\u8003\u8651\u72b6\u6001\u538b\u7f29\u3002\u518d\u5bf9\u6bcf\u5c42\u5f00\u4e00\u4e2a$\\text{vector},$\u7ef4\u62a4\u524d\u7f00\u72b6\u6001(\u7ec6\u8282\u8be6\u89c1\u4ee3\u7801)\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6:$\\Theta(n\\log n)$\n\n$\\mathbb{CODE:}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=500005;\nvector<int> G[MAXN],a[MAXN],b[MAXN],inn[MAXN];\n//G\u662f\u90bb\u63a5\u5411\u91cf,a\u7ef4\u62a4\u6bcf\u5c42\u7684\u70b9,b\u7ef4\u62a4\u6bcf\u5c42\u524d\u7f00\u72b6\u6001,inn\u7ef4\u62a4\u6bcf\u5c42dfs\u5e8f \nint n,m,i,j,x,y,z,cnt,maxd,f[MAXN],dep[MAXN],in[MAXN],out[MAXN];\nchar ch[MAXN];\ninline void read(int &x)   //\u5feb\u8bfb \n{\n\tshort negative=1;\n    x=0;\n    char c=getchar();\n    while(c<'0' || c>'9')\n    {\n    \tif(c=='-')\n\t\t\tnegative=-1;\n\t\tc=getchar();\n\t}\n    while(c>='0' && c<='9')\n        x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    x*=negative;\n}\ninline void print(int x)   //\u5feb\u8f93 \n{\n    if (x<0)\n        putchar('-'),x=-x;\n    if (x>9)\n        print(x/10);\n    putchar(x%10+'0');\n}\ninline int lowbit(int x){return x&(-x);}\ninline void dfs(int u)\n{\n\tdep[u]=dep[f[u]]+1; \n\tin[u]=++cnt;\n\tmaxd=max(maxd,dep[u]);\n\ta[dep[u]].push_back(u);\n\tinn[dep[u]].push_back(in[u]);\n\tfor (int i=0;i<G[u].size();i++)\n\t\tdfs(G[u][i]);\n\tout[u]=cnt;\n}\nsigned main(void)\n{\n\tread(n),read(m);\n\tfor (i=2;i<=n;i++)\n\t{\n\t\tread(f[i]);\n\t\tG[f[i]].push_back(i);\n\t}\n\tfor (i=1;i<=n;i++)\n\t{\n\t\tch[i]=getchar();\n\t\twhile (!('a'<=ch[i] && ch[i]<='z'))  //\u4e2a\u4eba\u4e60\u60ef \n\t\t\tch[i]=getchar();\n\t}\n\tdfs(1);\n\tfor (i=1;i<=maxd;i++)  //\u679a\u4e3e\u6bcf\u5c42,\u8ba1\u7b97\u524d\u7f00\u72b6\u6001 \n\t\tfor (y=j=0;j<a[i].size();j++)\n\t\t{\n\t\t\tx=ch[a[i][j]]-'a';  //\u5c06\u5b57\u6bcd\u8f6c\u62100-25\u4e2d\u4e00\u4e2a\u6570 \n\t\t\ty^=(1<<x);   //\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u6bcd0\u8868\u793a\u5076\u6570,1\u8868\u793a\u5947\u6570,\u5f02\u6216\u8fdb\u884c\u7ffb\u8f6c \n\t\t\tb[i].push_back(y);  //\u6254\u8fdbvector\u4e2d \n\t\t}\n\twhile (m--)\n\t{\n\t\tread(x),read(y);\n\t\tint l,r;\n\t\tl=lower_bound(inn[y].begin(),inn[y].end(),in[x])-inn[y].begin();\n\t\tr=upper_bound(inn[y].begin(),inn[y].end(),out[x])-inn[y].begin()-1;\n\t\t//\u4e8c\u5206\u51fa\u6700\u5de6\u8fb9\u548c\u6700\u53f3\u8fb9 \n\t\tif (r<0)  //\u7279\u5224\u4e00\u4e0b(\u8fd9\u4e2a\u70b9\u662f\u53f6\u5b50\u8282\u70b9) \n\t\t{\n\t\t\tprintf(\"Yes\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tz=l<1?b[y][r]:b[y][r]^b[y][l-1];\n\t\t//l\u5982\u679c\u7b49\u4e8e0,-1\u540e\u4e0b\u6807\u8d8a\u754c,\u8981\u5224\u65ad\u4e00\u4e0b(\u5173\u4e8e\u4e3a\u4ec0\u4e48-1\u4f1a\u5dee\u5206\u57fa\u672c\u90fd\u77e5\u9053\u5427) \n\t\tz-=lowbit(z);//lowbit\u90fd\u4f1a\u5427 \n\t\t//\u81f3\u591a\u4e00\u4e2a\u5947\u6570,\u5c31\u662f\u72b6\u6001\u4e2d\u81f3\u591a\u4e00\u4e2a1,\u5c06\u8fd9\u4e2a1\u51cf\u6389,\u5982\u679c\u4e3a\u5168\u4e3a0\u8bf4\u660e\u53ef\u4ee5\n\t\tprintf(!z?\"Yes\\n\":\"No\\n\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1598169216,
        "uid": 38455,
        "name": "Guess00",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF570D [Tree Requests]"
    },
    {
        "content": "~~\u901b\u4e86\u4e00\u5708\u9898\u89e3\u533a\u90fd\u6ca1\u6709\u957f\u94fe\u5256\u5206\u7684\u9898\u89e3\u554a\u3002~~\r\n\r\n\u9898\u76ee\u8be2\u95ee\u662f\u4e00\u4e2a\u5b57\u7b26\u7684\u96c6\u5408\u80fd\u5426\u7ecf\u8fc7\u91cd\u65b0\u6392\u5217\u5f62\u6210\u56de\u6587\u4e32\u3002\u53ef\u4ee5\u77e5\u9053\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u5b57\u7b26\u96c6\u5408\u91cc\u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u7b26\u81f3\u591a\u4e3a\u4e00\u7684\u65f6\u5019\u53ef\u4ee5\u91cd\u6392\u4e3a\u56de\u6587\u4e32\u3002\r\n\r\n\u8003\u8651\u5f02\u6216\u64cd\u4f5c\uff0c\u53ef\u4ee5\u628a\u5df2\u7ecf\u6210\u53cc\u7684\u6d88\u6389\uff0c\u6b63\u597d\u5bf9\u5e94\u5f02\u6216\u64cd\u4f5c\u91cc  `1^1=0` \u3002\u5b57\u7b26\u96c6\u5927\u5c0f\u53ea\u6709 $26$ \u53ef\u4ee5\u8003\u8651\u72b6\u6001\u538b\u7f29\u3002\r\n\r\n\u6839\u636e\u4e0a\u9762\u53ef\u4ee5\u77e5\u9053\u4e00\u4e2a\u72b6\u6001 $x$ \u53ef\u4ee5\u6392\u5217\u6210\u56de\u6587\u4e32\u5f53\u4e14\u4ec5\u5f53 `x == (x&-x)` \u3002\r\n\r\n\u6211\u4eec\u5b9a\u4e49 dp \u6570\u7ec4 $g[i][j]$ \u8868\u793a\u5bf9\u4e8e\u70b9 $i$ \uff0c\u5f80\u4e0b\u8d70 $j$ \u4e2a\u70b9\u7684\u70b9\u96c6\u7684\u72b6\u6001\u3002\u5bb9\u6613\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b `dp[u][i+1] ^= dp[v][i]` \uff0c\u8fd9\u91cc $v$ \u662f $u$ \u7684\u513f\u5b50\u3002\r\n\r\n\u663e\u7136\u8fd9\u4e2a\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u662f $n^2$ \u7684\uff0c\u89c2\u5bdf\u5230\u8fd9\u4e2a\u72b6\u6001\u4ee5\u6df1\u5ea6\u4e3a\u4e0b\u6807\uff0c\u53ef\u4ee5\u4f7f\u7528\u957f\u94fe\u5256\u5206\u8fdb\u884c\u4f18\u5316\u3002\r\n\r\n\u7ed9\u51fa\u957f\u94fe\u5256\u5206\u7684\u4ee3\u7801\uff1a\r\n\r\n```cpp\r\n#include <cstdio>\r\n#include <cstring>\r\n#include <algorithm>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nint read()\r\n{\r\n\tint a = 0,x = 1;char ch = getchar();\r\n\twhile(ch > '9' || ch < '0') {if(ch == '-') x = -1;ch = getchar();}\r\n\twhile(ch >= '0' && ch <= '9') {a = a*10 + ch-'0';ch = getchar();}\r\n\treturn a*x;\r\n}\r\nconst int N=1e6+7;\r\nint n,m,head[N],nxt[N],go[N],cnt,d[N],dep[N],fa[N],son[N];\r\nint *g[N],o[N<<2],*p,q1[N],q2[N],ans[N];\r\nchar s[N];\r\nvector<int>vec[N];\r\nvoid add(int u,int v)\r\n{\r\n\tgo[++cnt] = v;\r\n\tnxt[cnt] = head[u];\r\n\thead[u] = cnt;\r\n}\r\n\r\nvoid dfs1(int u)\r\n{\r\n\tdep[u] = dep[fa[u]] + 1;\r\n\tfor(int e = head[u];e;e = nxt[e]) {\r\n\t\tint v = go[e];dfs1(v);\r\n\t\tif(d[v] > d[son[u]]) son[u] = v;\r\n\t}\r\n\td[u] = d[son[u]] + 1;\r\n}\r\n\r\nvoid dp(int u)\r\n{\r\n\tif(son[u]) {\r\n\t\tg[son[u]] = g[u] + 1;\r\n\t\tdp(son[u]);\r\n\t}\r\n\tfor(int e = head[u];e;e = nxt[e]) {\r\n\t\tint v = go[e];if(v == son[u]) continue;\r\n\t\tg[v] = p,p += d[v] << 1;dp(v);\r\n\t\tfor(int i = 0;i < d[v];i ++) g[u][i+1] ^= g[v][i];\r\n\t}\r\n\tg[u][0] ^= 1<<(s[u]-'a');\r\n\tfor(int i = 0;i < vec[u].size();i ++) {\r\n\t\tans[vec[u][i]] = (dep[u] > q2[vec[u][i]] || q2[vec[u][i]] >= dep[u]+d[u]) || (g[u][q2[vec[u][i]]-dep[u]] == (g[u][q2[vec[u][i]]-dep[u]]&-g[u][q2[vec[u][i]]-dep[u]]));\r\n\t}\r\n}\r\n\r\nint main()\r\n{\r\n\tn = read(), m = read();\r\n\tfor(int i = 2;i <= n;i ++) {\r\n\t\tfa[i] = read();add(fa[i],i);\r\n\t}\r\n\tscanf(\"%s\",s+1);\r\n\tfor(int i = 1;i <= m;i ++) {\r\n\t\tq1[i] = read(),q2[i] = read();\r\n\t\tvec[q1[i]].push_back(i);\r\n\t}\r\n\tdfs1(1);g[1] = p = o;p += d[1]<<1;\r\n\tdp(1);for(int i = 1;i <= m;i ++) puts(ans[i]?\"Yes\":\"No\");\r\n\treturn 0;\r\n}\r\n```",
        "postTime": 1620606925,
        "uid": 305911,
        "name": "\u5fd8\u6000\u661f",
        "ccfLevel": 0,
        "title": "CF570D \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u6ca1\u6709dsu on tree\u7684\u505a\u6cd5\uff0c\u800c\u4e14\u8dd1\u7684\u6bd4$dsu\\ on\\ tree$\u5feb\u3002\n\n\u770b\u5b50\u6811\u4e2d\u67d0\u4e2a\u6df1\u5ea6\u7684\u70b9\u80fd\u4e0d\u80fd\u91cd\u62cd\u6210\u56de\u6587\uff0c\u5c31\u662f\u770b\u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u7b26\u7684\u4e2a\u6570\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u4e00\uff0c\u9996\u5148\u8fd9\u4e2a\u624d26\u4e2a\u5b57\u6bcd\uff0c\u53ef\u4ee5\u72b6\u538b\u4e00\u4e0b\u3002\n\n\u7136\u540e\u5c31\u662f\u60f3\u529e\u6cd5\u628a\u6811\u4e0a\u95ee\u9898\u8f6c\u5230\u5e8f\u5217\u7684\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4\u4e0a\uff0cdfs\u5e8f\u4e0a\u5b50\u6811\u5185\u8282\u70b9\u8fde\u7eed\uff0cbfs\u5e8f\u4e0a\u6df1\u5ea6\u9012\u589e\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u6709\u6240\u53d6\u820d\u3002\u7136\u800cbfs\u5e8f\u7684\u53e6\u4e00\u4e2a\u6027\u8d28\u5c31\u662f\u6df1\u5ea6\u76f8\u540c\u7684\u8fde\u7eed\u4e00\u6bb5\u8282\u70b9\u7684dfs\u5e8f\u4e5f\u662f\u9012\u589e\u7684\uff08\u663e\u7136\uff0c\u4e14\u4e0d\u4f1a\u8bc1\uff09\u3002\n\n\u6240\u4ee5\u5c31\u6709\u4e00\u4e2a\u5728bfs\u5e8f\u4e0a\u627e\u5230x\u7684\u5b50\u6811\u5185\u6df1\u5ea6\u4e3ay\u7684\u8282\u70b9\u7684\u505a\u6cd5\u3002\u5148\u9884\u5904\u7406\u597d\u6df1\u5ea6\u4e3ay\u7684\u4e00\u4e2a\u533a\u95f4\uff0c\u4e4b\u540e\u4e8c\u5206\u51fa\u8fd9\u4e2a\u533a\u95f4\u91ccdfs\u5e8f\u5728$[dfn[x],dfn[x]+size[x]-1]$\u4e2d\u7684\u533a\u95f4\u3002\u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u70b9\u5c31\u662f\u6211\u4eec\u6240\u8981\u5904\u7406\u7684\u70b9\u3002\n\n\u5bf9\u4e8e\u8fd9\u9898\uff0c\u72b6\u538b\u4e00\u4e0b\u6bcf\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u5947\u5076\u6027\uff0c\u5c31\u53ef\u4ee5\u968f\u4fbf\u5224\u4ec0\u4e48\u56de\u6587\u4e86\u3002\n\n```c++\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nstruct node{\n\tint next,to;\n}w[500001];\nint head[500001],tail,bfn[500001],val[500001],p[500001],n,num;\nint deep[500001],heap,idx[500001],ed[500001],rf[500001],m,cnt;\nchar ch[500001];\ninline void add(int x,int y){\n\tw[++cnt].next=head[x];\n\tw[cnt].to=y; head[x]=cnt;\n}\nvoid bfs(){\n\theap=tail=1; bfn[tail]=1; deep[1]=1;\n\twhile (heap<=tail){\n\t\tint x=bfn[heap]; p[heap]=idx[x]; rf[deep[x]]=heap;\n\t\tfor (int i=head[x]; i; i=w[i].next){\n\t\t\tdeep[w[i].to]=deep[x]+1;\n\t\t\tbfn[++tail]=w[i].to;\n\t\t}\n\t\theap++;\n\t}\n}\nvoid dfs(int x){\n\tidx[x]=++num;\n\tfor (int i=head[x]; i; i=w[i].next)\n\t\tdfs(w[i].to);\n\ted[x]=num;\n}\nint main(){\n\tint x,y;\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=2; i<=n; i++)\n\t\tscanf(\"%d\",&x),add(x,i);\n\tdfs(1); bfs(); rf[deep[bfn[n]]+1]=n+1;\n\t// for (int i=1; i<=n; i++) printf(\"%d \",bfn[i]); puts(\"\");\n\t// for (int i=1; i<=deep[bfn[n]]; i++) printf(\"%d \",rf[i]); puts(\"\");\n\tscanf(\"%s\",ch+1);\n\tfor (int i=1; i<=n; i++){\n\t\tval[i]=(1<<(ch[bfn[i]]-'a'));\n\t\tval[i]^=val[i-1];\n\t}\n\t// for (int i=1; i<=n; i++) printf(\"%d \",val[i]); puts(\"\");\n\tint l,r,u;\n\tfor (int i=1; i<=m; i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif (y<deep[x]||y>deep[bfn[n]]){puts(\"Yes\"); continue;}\n\t\tl=lower_bound(p+rf[y-1]+1,p+rf[y]+1,idx[x])-p;\n\t\tr=lower_bound(p+rf[y-1]+1,p+rf[y]+1,ed[x]+1)-p-1;\n\t\t// printf(\"%d %d %d %d\\n\",rf[y-1]+1,rf[y],idx[x],ed[x]+1);\n\t\t// printf(\"%d %d\\n\",l,r);\n\t\tif (l>r){puts(\"Yes\"); continue;}\n\t\tu=val[r]^val[l-1];\n\t\tif ((u&(u-1))==0) puts(\"Yes\");\n\t\telse puts(\"No\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1557581864,
        "uid": 63661,
        "name": "Taduro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF570D \u3010Tree Requests\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.org/problemnew/show/CF570D)\n\ndsu on tree.\n\n\u5f00\u4e2a\u6876\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u6df1\u5ea6\u7684\u5b57\u7b26\uff0c\u5224\u65ad\u56de\u6587\u5c31\u662f\u4e0d\u80fd\u51fa\u73b0\u4e24\u4e2a\u5947\u6570\uff0c\u590d\u6742\u5ea6\u662f$O(nlogn*26)$\uff0c\u66b4\u529b$dsu$ $on$ $tree$\u7edf\u8ba1\u5c31\u597d\u4e86\u3002\n\ncode:\n```\n//2018.10.24 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline int read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y){\n    x^=y^=x^=y;\n}\ninline int _abs(const res &x){\n    return x>0?x:-x;\n}\ninline int _max(const res &x,const res &y){\n    return x>y?x:y;\n}\ninline int _min(const res &x,const res &y){\n    return x<y?x:y;\n}\nconst int N=5e5+10;\nnamespace MAIN{\n    int n,m;\n    struct E{\n        int next,to;\n        E() {}\n        E(res next,res to):next(next),to(to) {}\n    }edge[N];\n    int head[N],cnt;\n    inline void addedge(const res &u,const res &v){\n        edge[++cnt]=E(head[u],v),head[u]=cnt;\n    }\n    int dep[N],son[N],siz[N],fa[N];\n    void Dfs(const res &x,const res &depx){\n        dep[x]=depx,siz[x]=1;\n        for(res i=head[x];~i;i=edge[i].next){\n            res tox=edge[i].to;\n            Dfs(tox,depx+1);\n            siz[x]+=siz[tox];\n            if(siz[tox]>siz[son[x]])son[x]=tox;\n        }\n    }\n    char p[N];\n    typedef pair<int,int> Pair;\n    vector<Pair> vec[N];\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\n    bool vis[N],ans[N];\n    int tot[N][26];\n    inline bool check(res *a){\n        bool flag=0;\n        for(res i=0;i<26;i++)\n            if(a[i]&1){\n                if(flag)return 1;\n                flag=1;\n            }\n        return 0;\n    }\n    void update(const res &x,const res &va){\n        tot[dep[x]][p[x]-'a']+=va;\n        for(res i=head[x];~i;i=edge[i].next){\n            res tox=edge[i].to;\n            if(!vis[tox])update(tox,va);\n        }\n    }\n    void dfs(const res &x,const res &flag){\n        for(res i=head[x];~i;i=edge[i].next){\n            res tox=edge[i].to;\n            if(tox!=son[x])dfs(tox,0);\n        }\n        if(son[x])dfs(son[x],1),vis[son[x]]=1;\n        update(x,1);\n        for(res i=0,siz=vec[x].size();i<siz;i++)ans[vec[x][i].fi]=check(tot[vec[x][i].se]);\n        vis[son[x]]=0;\n        if(!flag)update(x,-1);\n    }\n    inline void MAIN(){\n        memset(head,-1,sizeof(head));\n        n=read(),m=read();\n        for(res i=2;i<=n;i++)fa[i]=read(),addedge(fa[i],i);\n        Dfs(1,1);\n        scanf(\"%s\",p+1);\n        for(res i=1;i<=m;i++){\n            res a=read(),b=read();\n            vec[a].pb(mp(i,b));\n        }\n        dfs(1,0);\n        for(res i=1;i<=m;i++)puts(ans[i]?\"No\":\"Yes\");\n    }\n}\nint main(){\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1540511456,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010CF570D\u3011Tree Requests"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a\u4e0d\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u9898\u89e3  \n## Description\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF570D)  \n\u7ed9\u5b9a\u4e00\u4e2a\u4ee5 1 \u4e3a\u6839\u7684 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u4e0a\u6709\u4e00\u4e2a\u5b57\u6bcd $(a-z)$ \uff0c\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u5b9a\u4e49\u4e3a\u8be5\u8282\u70b9\u5230 1 \u53f7\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u70b9\u6570.\u6bcf\u6b21\u8be2\u95ee $(a,b)$ \u67e5\u8be2\u4ee5 $a$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\u6df1\u5ea6\u4e3a $b$ \u7684\u8282\u70b9\u4e0a\u7684\u5b57\u6bcd\u91cd\u65b0\u6392\u5217\u4e4b\u540e\u662f\u5426\u80fd\u6784\u6210\u56de\u6587\u4e32.\n\n## Solution\u2014\u2014dfs+\u4f5c\u5dee\n\u4e00\u5806\u5b57\u7b26\u80fd\u62fc\u6210\u56de\u6587\u4e32\u5f53\u4e14\u4ec5\u5f53\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u8fc7\u5947\u6570\u6b21\u3002  \n\u8003\u8651\u5982\u4f55\u6d88\u9664\u4e00\u68f5\u5b50\u6811\u5bf9\u53e6\u4e00\u68f5\u5b50\u6811\u7684\u5f71\u54cd\u3002  \n\u628a 26 \u4e2a\u5b57\u6bcd\u538b\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4e32\uff0c\u5982\u679c\u67d0\u4e00\u4f4d\u6709 1 \u8bf4\u660e\u8fd9\u4e2a\u5b57\u7b26\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u8fd9\u6837\u5c31\u80fd\u5f88\u65b9\u4fbf\u5904\u7406\u591a\u4e2a\u5b50\u6811\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a\u7528\u904d\u5386\u5b50\u6811\u4e4b\u540e\u7684\u72b6\u6001\u51cf\u53bb\u904d\u5386\u5b50\u6811\u4e4b\u524d\u7684\u72b6\u6001 **\uff08\u8fd9\u91cc\u7684\u51cf\u53bb\u7684\u610f\u601d\u4e0d\u662f\u2018-\u2019\uff0c\u800c\u662f\u5229\u7528\u5f02\u6216\u7684\u6027\u8d28\u5f97\u5230\u5f53\u524d\u72b6\u6001\uff09**\u3002  \n\u90a3\u7528 vector \u5b58\u4e0b\u904d\u5386\u67d0\u4e00\u9897\u5b50\u6811\u65f6\u9700\u8981\u67e5\u8be2\u7684\u7b54\u6848\uff0c\u5c31\u80fd\u65b9\u4fbf\u5730\u5f97\u51fa\u7b54\u6848\u4e86\u3002\n\n## Code\n```\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<utility>\n#define sz(x) (int)x.size()//\u8fd9\u6837\u5b9a\u4e49\u5728Ubuntu\u4e0b\u5c31\u4e0d\u4f1awarning\n#define fi first\n#define se second\n#define mk make_pair\nusing namespace std;\nconst int N=5e5+5;\nint n,m,dep[N],t[N];\nvector<int> e[N],ans[N];\nvector<pair<int,int> > ask[N];\npriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >res;\nchar tmp[N];\n\ninline void dfs (int x) {\n\tt[dep[x]]^=(1<<(tmp[x]-'a'));\n\tfor (int i=0;i<sz(ask[x]);i++) ans[x][i]=t[ask[x][i].fi];//\u5b58\u4e0b\u904d\u5386\u4e4b\u524d\u7684\u7b54\u6848\n\tfor (int i=0;i<sz(e[x]);i++) {\n\t\tint v=e[x][i];\n\t\tdep[v]=dep[x]+1;\n\t\tdfs(v);\n\t}\n\tfor (int i=0;i<sz(ask[x]);i++) {\n\t\tint bef=ans[x][i];\n\t\tint now=t[ask[x][i].fi];\n\t\tnow^=bef;//\u518d\u7528\u540e\u6765\u7684\u7b54\u6848\u5f02\u6216\u4e4b\u524d\u7684\u5c31\u80fd\u5f97\u51fa\u7b54\u6848\n\t\tnow^=now&(-now);//lowbie\uff0c\u80fd\u5f02\u6216\u6389now\u7684\u5b58\u5728\u7684\u6700\u4f4e\u4f4d\u76841\n\t\tif (now) res.push(mk(ask[x][i].se,0));\n\t\telse res.push(mk(ask[x][i].se,1));\n\t}\n}\n\ninline int read () {\n\tint res=0,fl=1;\n\tchar ch;\n\twhile ((ch=getchar())&&(ch<'0'||ch>'9'))\tif (ch=='-') fl=-1;\n\tres=ch^48;\n\twhile ((ch=getchar())&&ch>='0'&&ch<='9') res=(res<<1)+(res<<3)+(ch^48);\n\treturn res*fl;\n}\n\nint main () {\n\tn=read();m=read();\n\tfor (int i=2,x;i<=n;i++) {\n\t\tx=read();\n\t\te[x].push_back(i);\n\t}\n\tscanf(\"%s\",tmp+1);\n\tfor (int i=1,v,h;i<=m;i++) {\n\t\tv=read();h=read();\n\t\task[v].push_back(mk(h,i));//\u8981\u628aid\u5b58\u4e0b\u4ee5\u5b58\u50a8\u7b54\u6848\n\t\tans[v].push_back(0);//\u8981\u63d0\u524d\u653e\u5165\uff0c\u4e0d\u80fd\u5728\u7528\u7684\u65f6\u5019\u76f4\u63a5\u7528\u6570\u7ec4\u65b9\u5f0f\u5b9a\u4e49\uff0c\u5426\u5219\u4f1a\u51fa\u9519\n\t}\n\tdep[1]=1;\n\tdfs(1);\n\twhile (!res.empty()) {\n\t\tint ty=res.top().se;res.pop();\n\t\tif (ty) puts(\"Yes\");\n\t\telse puts(\"No\");\n\t}\n\treturn 0;\n}",
        "postTime": 1606293486,
        "uid": 230740,
        "name": "zyx10",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF570D \u3010Tree Requests\u3011"
    },
    {
        "content": "\u5751\u554a\uff0c\u6ca1\u8fd9\u4e2a\u8282\u70b9\u4e5f\u7b97\u56de\u6587\u4e5f\u8981\u8f93\u51fa `Yes`\n\n\u8c8c\u4f3c\u6ca1\u89c1\u7740\u7528\u91cd\u94fe\u5256\u5206\u7684\u5199\u7684\uff0c\u4e8e\u662f\u5c31\u6765\u5199\u4e00\u6ce2\n\n\u6309\u7167\u5957\u8def\u8bbe $f[i][j][k]$ \u8868\u793a $i$ \u7684\u5b50\u6811\u5185\u6df1\u5ea6\u4e3a $j$ \u7684\u5b57\u6bcd $k$ \u7684\u4e2a\u6570\n\n\u7136\u540e\u5224\u65ad\u80fd\u5426\u6709\u56de\u6587\u53ea\u9700\u770b\u662f\u5426\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u5b57\u6bcd\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\u6b21\u5373\u53ef\n\n\u53e6\u5916\u50cf\u4e0a\u9762\u90a3\u6837\u5f00\u6570\u7ec4\u7684\u8bdd\u7528\u6307\u9488\u4f30\u8ba1\u6709\u70b9\u96be\u53d7\uff0c\u5efa\u8bae $j,k$ \u538b\u6210\u4e00\u7ef4\n\n~~\u4e00\u5b9a\u4e0d\u8981\u60f3\u6211\u4f5c\u6b7b\u5148\u5224\u65ad\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5~~\n\n\n```cpp\n#include<touwenjian.h>\n\nusing namespace std;\n\nconst int maxn=500500;\n\nint *f[maxn],tmp[maxn*30],*st=tmp;\nint n,m,head[maxn],vnum[maxn];\nint size,son[maxn],dis[maxn],ans[maxn];\nint ls[maxn];\n\nvector <pair<int,int> > q[maxn];\n\nstruct edge{\n\tint next,to;\n}e[maxn]; \n\ninline void addedge(int next,int to)\n{\n\te[++size].to=to;\n\te[size].next=head[next];\n\thead[next]=size;\n}\n\nvoid dfs1(int t,int fat)\n{\n\tint i,j;\n\tfor(i=head[t];i;i=e[i].next)\n\t{\n\t\tj=e[i].to;\n\t\tls[j]=ls[t]+1;\n\t\tdfs1(j,t);\n\t\tif(dis[j]>dis[son[t]]) son[t]=j;\n\t}\n\tdis[t]=dis[son[t]]+1;\n}\n\n\nvoid dfs2(int t,int fat)\n{\n\tf[t][vnum[t]]=1;\n\tif(son[t])\n\t{\n\t\tf[son[t]]=f[t]+27;\n\t\tdfs2(son[t],t);\n\t} \n\tint i,j;\n\tint k,l;\n\tfor(i=head[t];i;i=e[i].next)\n\t{\n\t\tj=e[i].to;\n\t\tif(j==son[t]) continue;\n\t\tf[j]=st; \n\t\tst+=dis[j]*27; \n\t\tdfs2(j,t);\n\t\tfor(k=1;k<=dis[j];k++)\n\t\tfor(l=1;l<=26;l++)\n\t\tf[t][k*27+l]+=f[j][(k-1)*27+l];\n\t}\n\tfor(i=0;i<q[t].size();i++)\n\t{\t\n\t\tint looker=0;\n\t\tint tmph=q[t][i].first-ls[t];\t\n\t\tint tbh=q[t][i].second;\n\t\tif(tmph>=dis[t]||tmph<0)\n\t\t{\n\t\t\tans[tbh]=1;\n\t\t\tcontinue;\n\t\t}\n\t\tfor(j=1;j<=26;j++)\n\t\t{\n\t\t\tif(f[t][tmph*27+j]&1) looker++;\n\t\t}\n\t\tif(looker==1||!looker) ans[tbh]=1;\n\t}\n}\n\nint main()\n{\n\t//ios::sync_with_stdio(false);\n\tregister int i,j;\n\tscanf(\"%d %d\",&n,&m);\n\tint t1,t2;\n\tfor(i=2;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&t1);\n\t\taddedge(t1,i); \n\t}\n\tchar t;\n\tscanf(\"\\n\");\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%c\",&t);\n\t\tvnum[i]=(t-'a'+1);\n\t}\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d %d\",&t1,&t2);\n\t\tq[t1].push_back(make_pair(t2,i));\n\t}\n\tls[1]=1;\n\tdfs1(1,1);\n\tf[1]=st; st+=dis[1]*27;\n\tdfs2(1,1);\n\tfor(i=1;i<=m;i++) \n\t{\n\t\tif(ans[i]) printf(\"Yes\\n\");\n\t\telse printf(\"No\\n\");\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1602593968,
        "uid": 38636,
        "name": "\u5bd2\u51b0\u5927\u5927",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF570D \u3010Tree Requests\u3011"
    },
    {
        "content": "# \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5\u4ee5$1$\u4e3a\u6839\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\u3002\u6bcf\u6b21\u8be2\u95ee\u4ee5\u4e00\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5185\u6df1\u5ea6\u4e3a$d$\u7684\u6240\u6709\u70b9\u6784\u6210\u7684\u5b57\u6bcd\u96c6\u80fd\u4e0d\u80fd\u91cd\u6392\u4e3a\u4e00\u4e2a\u56de\u6587\u4e32\u3002\n\n# \u89e3\u6cd5\n\n\u5bb9\u6613\u53d1\u73b0\u4e00\u4e2a\u5b57\u6bcd\u96c6\u53ef\u4ee5\u91cd\u6392\u4e3a\u56de\u6587\u4e32\uff0c\u5f53\u4e14\u4ec5\u5f53\u5c0f\u4e8e\u7b49\u4e8e\u4e00\u4e2a\u5b57\u6bcd\u51fa\u73b0\u5947\u6570\u6b21\u3002\u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u4e3a\u4ee5\u4e00\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5185\u6df1\u5ea6\u4e3a$d$\u7684\u6240\u6709\u70b9\u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\u6709\u51e0\u4e2a\u3002\n\n\u8003\u8651\u4e8c\u8fdb\u5236\u6570$x$\uff0c\u5176\u7b2c$i$\u4f4d\u8868\u793a\u5b57\u6bcd`char('a' + i)`\u662f\u5426\u51fa\u73b0\u5947\u6570\u6b21\u3002\u5982\u679c$popcount(x) \\le 1$\u5219\u5b83\u53ef\u4ee5\u91cd\u6392\u4e3a\u56de\u6587\u4e32\u3002\u5bf9\u4e8e\u6bcf\u68f5\u5b50\u6811\u7ef4\u62a4\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u5176\u4e0b\u6807\u4e3a\u6df1\u5ea6\uff0c\u8282\u70b9\u6743\u503c\u4e3a\u6df1\u5ea6\u533a\u95f4\u5b57\u6bcd\u96c6\u7684\u4e8c\u8fdb\u5236\u6570\u3002`pushup`\u65f6\u5c06\u5de6\u53f3\u513f\u5b50\u5f02\u6216\u8d77\u6765\u5373\u53ef\u3002\n\n\u8003\u8651\u5982\u4f55\u4f18\u5316\u65f6\u7a7a\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\u6bcf\u4e2a\u8282\u70b9\u7ee7\u627f\u5b83\u5b50\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e$u$\u8282\u70b9\u7684\u8be2\u95ee\u5728dfs\u5230\u5b83\u65f6\u79bb\u7ebf\u56de\u7b54\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u4f7f\u7528\u4e86\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u5728\u7ebf\u65b9\u6cd5\u3002\u5f53\u4e24\u9897\u7ebf\u6bb5\u6811\u5408\u5e76\u65f6\uff0c\u65b0\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811\u7ee7\u627f\u8fd9\u4e24\u9897\u7ebf\u6bb5\u6811\u5408\u5e76\u540e\u7684\u4fe1\u606f\uff0c\u5e76\u4fdd\u7559\u539f\u7ebf\u6bb5\u6811\u3002\u8fd9\u6837dfs\u5b8c\u4ee5\u540e\u4e5f\u4fdd\u7559\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e`u`\u7684\u8be2\u95ee\u53ef\u4ee5\u76f4\u63a5\u5728\u5b83\u7684\u7ebf\u6bb5\u6811\u4e0a\u67e5\u3002\u8fd9\u4e2a\u5927\u6982\u53ef\u4ee5\u770b\u4f5c\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u53ef\u6301\u4e45\u5316\u3002\n\n\u6ce8\u610f\u4ebf\u4e9b\u7ec6\u8282\uff0c\u6bd4\u5982$h\\le n$\uff0c\u5728dfs\u662f\u8981\u5148\u5408\u5e76\u518d\u4fee\u6539\uff0c\u5426\u5219\u7a7a\u95f4\u5e38\u6570\u5c06\u589e\u5927\u4e00\u500d\u3002\n\n\u65f6\u7a7a\u590d\u6742\u5ea6$\\mathcal{O}(nlogn)$\u3002\n\n# \u4ee3\u7801\n\n```cpp\nconst int maxn(5e5+10);\nint n,m;\nchar s[maxn];\n\nstruct Edge {\n\tint v,next;\n\tEdge(const int &v,const int &next) :v(v),next(next) {}\n\tEdge() {}\n}e[maxn];\nint head[maxn],cnt;\ninline void AddEdge(const int &u,const int &v) {\n\te[++cnt]=Edge(v,head[u]);\n\thead[u]=cnt;\n}\n\nint MaxDepth;\nnamespace SegmentTree {\n\tint val[maxn<<5],lc[maxn<<5],rc[maxn<<5],Node_Cnt;\n\tinline void pushup(const int &a) {\n\t\tval[a]=val[lc[a]]^val[rc[a]];\n\t}\n\tvoid Modify(const int &p,const int &k,int &a,const int &l=1,const int &r=MaxDepth) {\n\t\tif(!a) a=++Node_Cnt;\n\t\tif(l==r) return void(val[a]^=k);\n\t\tint mid((l+r)>>1);\n\t\tif(p<=mid) Modify(p,k,lc[a],l,mid);\n\t\telse Modify(p,k,rc[a],mid+1,r);\n\t\tpushup(a);\n\t}\n\tint Query(const int &p,const int &a,const int &l=1,const int &r=MaxDepth) {\n\t\tif(!a) return 0;\n\t\tif(l==r) return val[a];\n\t\tint mid((l+r)>>1);\n\t\tif(p<=mid) return Query(p,lc[a],l,mid);\n\t\telse return Query(p,rc[a],mid+1,r);\n\t}\n\tint Merge(const int &a,const int &b,const int &l=1,const int &r=MaxDepth) {\n\t\tif(!a||!b) return a|b;\n\t\tint now(++Node_Cnt);\n\t\tif(l==r) val[now]=val[a]^val[b];\n\t\telse {\n\t\t\tint mid((l+r)>>1);\n\t\t\tlc[now]=Merge(lc[a],lc[b],l,mid);\n\t\t\trc[now]=Merge(rc[a],rc[b],mid+1,r);\n\t\t\tpushup(now);\n\t\t}\n\t\treturn now;\n\t}\n}\nint root[maxn],depth[maxn];\nvoid Dfs1(const int &u=1,const int &fa=0) {\n\tdepth[u]=depth[fa]+1;MaxDepth=max(MaxDepth,depth[u]);\n\tfor(int i(head[u]);i;i=e[i].next) {\n\t\tconst int &v(e[i].v);\n\t\tDfs1(v,u);\n\t}\n}\nvoid Dfs2(const int &u=1) {\n\tfor(int i(head[u]);i;i=e[i].next) {\n\t\tconst int &v(e[i].v);\n\t\tDfs2(v);\n\t\troot[u]=SegmentTree::Merge(root[u],root[v]);\n\t}\n\tSegmentTree::Modify(depth[u],1<<(s[u]-'a'),root[u]);\n}\n\nint main(void) {\n\tcin>>n>>m;\n\tfor(int i(2);i<=n;i++) {\n\t\tint x;cin>>x;\n\t\tAddEdge(x,i);\n\t}\n\tcin>>(s+1);\n\tDfs1();Dfs2();\n\tfor(int i(1);i<=m;i++) {\n\t\tint v,h;\n\t\tcin>>v>>h;\n\t\tif(h>MaxDepth) {\n\t\t\tcout<<\"Yes\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tint res(SegmentTree::Query(h,root[v]));\n\t\tif(res==(res&-res)) cout<<\"Yes\\n\";\n\t\telse cout<<\"No\\n\";\n\t}\n\treturn 114514191810;\n}\n```\n\n",
        "postTime": 1602500021,
        "uid": 226485,
        "name": "\u67f3\u82cf\u660e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF570D \u3010Tree Requests\u3011"
    }
]