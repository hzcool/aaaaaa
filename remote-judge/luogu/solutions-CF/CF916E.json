[
    {
        "content": "> \u9898\u76ee\u94fe\u63a5\uff1a[Codeforces 916E](https://codeforces.com/contest/916/problem/E)\n\n\u7ed9\u4f60\u4e00\u68f5\u6709\u6839\u6811\u6807\u53f7\u4e3a $1\\sim n$\uff0c\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e00\u4e2a\u6743\u503c $a_i$\u3002\u521d\u59cb\u65f6\u6839\u4e3a $1$\uff0c\u63a5\u4e0b\u6765\u6709 $q$ \u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5206\u4e3a\u4ee5\u4e0b $3$ \u79cd\uff1a\n\n- `1 x`\uff1a\u5c06\u6574\u68f5\u6811\u7684\u6839\u53d8\u4e3a\u8282\u70b9 $x$\u3002\n- `2 x y k`\uff1a\u628a $x,y$ \u7684 $\\texttt{LCA}$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u70b9\u7684\u6743\u503c\u589e\u52a0 $k$\u3002\n- `3 x`\uff1a\u67e5\u8be2\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u7684\u6743\u503c\u548c\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\le n,q\\le 10^5$\uff0c$-10^8\\le a_i,k\\le 10^8$\n\n------\n\n## Solution\n\n\u5982\u679c\u6ca1\u6709\u6362\u6839\u64cd\u4f5c\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u8fd9\u68f5\u6811\u7684 $\\texttt{DFS}$ \u5e8f\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u652f\u6301\u533a\u95f4\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u6362\u6839\u64cd\u4f5c\u3002\u6b64\u65f6\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u771f\u7684\u628a\u6839\u6362\u6389\uff0c\u6839\u53ea\u80fd\u4e00\u76f4\u4e3a $1$ \u8282\u70b9\uff0c\u800c\u662f\u8981\u5bf9**\u6839**\u548c**\u64cd\u4f5c\u7684\u8282\u70b9**\u7684\u5173\u7cfb\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff01\n\n\u7531\u4e8e\u64cd\u4f5c $2$ \u548c\u64cd\u4f5c $3$ \u5728\u4f4d\u7f6e\u5173\u7cfb\u5206\u6790\u4e0a\u7684\u672c\u8d28\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651**\u4f4d\u7f6e\u5173\u7cfb**\u548c**\u5982\u4f55\u6c42 LCA** \u5373\u53ef\u3002\n\n### \u4f4d\u7f6e\u5173\u7cfb\n\n\u8bbe\u5f53\u524d\u6574\u68f5\u6811\u7684\u6839\u8282\u70b9\u4e3a $R$\uff0c\u8be2\u95ee\u7684\u5b50\u6811\u6839\u8282\u70b9\u4e3a $X$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u8005\u5b58\u5728\u4ee5\u4e0b $3$ \u79cd\u5173\u7cfb\u3002\n\n\u5bf9\u4e8e\u6bcf\u79cd\u4f4d\u7f6e\u5173\u7cfb\u7684\u56fe\u793a\uff0c$R$ \u548c $X$ \u5747\u6807\u8bb0\u5728\u8282\u70b9\u4e0a\uff0c\u84dd\u8272\u7684\u8282\u70b9\u8868\u793a**\u9700\u8981\u88ab\u64cd\u4f5c\u7684\u8282\u70b9**\u3002\n\n1. \u5982\u679c $R$ \u5c31\u662f $X$\uff1a\n\n   \u6b64\u65f6\u6574\u68f5\u6811\u7684\u6240\u6709\u8282\u70b9\u90fd\u9700\u8981\u88ab\u64cd\u4f5c\u3002\n\n   ![](https://old.orzsiyuan.com/images/Codeforces-916E_1.png)\n\n2. \u5982\u679c $R$ \u4e0d\u5728 $X$ \u7684\u5b50\u6811\u5185\uff1a\n\n   \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 $X$ \u8fd9\u68f5\u5b50\u6811\u7684\u5f62\u6001\u4e0e\u539f\u56fe\u7684\u5f62\u6001\u4e00\u81f4\uff0c\u6240\u4ee5\u53ea\u8981\u5bf9\u4ee5 $1$ \u4e3a\u6839\u8282\u70b9\u65f6\u7684\u5b50\u6811 $X$ \u8fdb\u884c\u64cd\u4f5c\u5373\u53ef\u3002\n\n   ![](https://old.orzsiyuan.com/images/Codeforces-916E_2.png)\n\n3. \u5982\u679c $R$ \u4f4d\u4e8e $X$ \u7684\u5b50\u6811\u5185\uff1a\n\n   \u6b64\u65f6\u60c5\u51b5\u6bd4\u8f83\u590d\u6742\uff0c\u9700\u8981\u88ab\u64cd\u4f5c\u7684\u8282\u70b9\u4e3a\uff1a \u6240\u6709\u8282\u70b9\u9664\u53bb\u4ee5 $X$ \u5230 $R$ \u7684\u8def\u5f84\u4e0a\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff08\u8fd9\u4e2a\u70b9\u6ee1\u8db3\u65e2\u662f $R$ \u7684\u7956\u5148\uff0c\u53c8\u662f $X$ \u7684\u513f\u5b50\uff09\u4e3a\u6839\u7684\u5b50\u6811\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5bb9\u65a5\u539f\u7406\uff0c\u5148\u5bf9\u6574\u68f5\u6811\u8fdb\u884c\u64cd\u4f5c\uff0c\u518d\u5bf9\u90a3\u4e2a\u5b50\u6811\u8fdb\u884c**\u76f8\u53cd\u7684\u64cd\u4f5c**\uff08\u5982\u679c\u662f\u67e5\u8be2\u5219\u51cf\u53bb\u8d21\u732e\uff0c\u5982\u679c\u662f\u4fee\u6539\u5219\u51cf\u53bb\uff09\u3002\n\n   \u90a3\u4e48\u600e\u4e48\u6c42\u8fd9\u4e2a\u70b9\u5462\uff1f\u6211\u4eec\u8bb0 $deep_i$ \u8868\u793a $i$ \u5728\u539f\u56fe\u4e2d\u7684\u6df1\u5ea6\uff0c\u8ba9 $R$ \u5f80\u4e0a\u79fb\u52a8 $deep_R-deep_X-1$ \u4e2a\u70b9\u5373\u53ef\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u663e\u7136\u53ef\u4ee5\u7528\u500d\u589e\u5b9e\u73b0\u3002\n\n   ![](https://old.orzsiyuan.com/images/Codeforces-916E_3.png)\n\n### \u5982\u4f55\u6c42 LCA\n\n\u5176\u5b9e\u4e5f\u662f\u4e4b\u524d\u7684\u5206\u7c7b\u8ba8\u8bba\u7684\u5957\u8def\u5566\uff01QAQ\n\n\u8bbe\u5f53\u524d\u6574\u68f5\u6811\u7684\u6839\u8282\u70b9\u4e3a $r$\uff0c\u4fee\u6539\u7684\u8282\u70b9\u4e3a $x,y$\u3002\u5728\u4ee5 $1$ \u4e3a\u6839\u8282\u70b9\u7684\u524d\u63d0\u4e0b\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff01\uff08\u4ee5\u4e0b\u5185\u5bb9\u53c2\u8003 $\\texttt{Codeforces}$ [\u5b98\u65b9\u9898\u89e3](https://codeforces.com/blog/entry/57223)\uff09\n\n1. \u5982\u679c $x,y$ \u90fd\u5728 $r$ \u7684\u5b50\u6811\u5185\uff0c\u90a3\u4e48 $\\texttt{LCA}$ \u663e\u7136\u4e3a $\\texttt{LCA}(x,y)$\u3002\n2. \u5982\u679c $x,y$ \u53ea\u6709\u4e00\u4e2a\u5728 $r$ \u7684\u5b50\u6811\u5185\uff0c\u90a3\u4e48 $\\texttt{LCA}$ \u80af\u5b9a\u4e3a $r$\u3002\n3. \u5982\u679c $x,y$ \u90fd\u4e0d\u5728 $r$ \u7684\u5b50\u6811\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u627e\u5230 $p=\\texttt{LCA}(x,r)$\uff0c$q=\\texttt{LCA}(y,r)$\u3002\u5982\u679c $p$ \u548c $q$ \u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u9009\u62e9\u5176\u4e2d\u8f83\u6df1\u7684\u4e00\u4e2a\uff1b\u5982\u679c $p$ \u548c $q$ \u76f8\u540c\uff0c\u90a3\u4e48 $\\texttt{LCA}$ \u5c31\u662f $p$ \u6216 $q$\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8981\u6c42\u7684 $\\texttt{LCA}$ \u5c31\u662f $\\texttt{LCA}(x,y)$\uff0c$\\texttt{LCA}(x,r)$\uff0c$\\texttt{LCA}(y,r)$ \u8fd9\u4e09\u8005\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\uff01\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\uff1a$O(n\\log n)$\uff08\u5f53\u7136\u5e26\u7740\u5de8\u5927\u5e38\u6570\uff09\n\n------\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define lson rt<<1\n#define rson rt<<1|1\n\nconst int N=1e5+5,M=2e5+5,logN=17+1;\nint n,m,root,idx,a[N],f[N][logN],dfn[N],seq[N],sz[N],dep[N];\nint tot,lnk[N],ter[M],nxt[M];\nlong long seg[N<<2],tag[N<<2];\n\nvoid pushup(int rt) {\n    seg[rt]=seg[lson]+seg[rson];\n}\nvoid build(int rt,int l,int r) {\n    if(l==r) {\n        seg[rt]=a[seq[l]];\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(lson,l,mid);\n    build(rson,mid+1,r);\n    pushup(rt);\n}\nvoid update(int rt,int l,int r,long long k) {\n    seg[rt]+=1LL*(r-l+1)*k;\n    tag[rt]+=k;\n}\nvoid pushdown(int rt,int l,int r) {\n    if(!tag[rt]) return;\n    int mid=(l+r)>>1;\n    update(lson,l,mid,tag[rt]);\n    update(rson,mid+1,r,tag[rt]);\n    tag[rt]=0;\n}\nvoid modify(int x,int y,int rt,int l,int r,int k) {\n    if(x<=l&&r<=y) {\n        update(rt,l,r,k);\n        return;\n    }\n    pushdown(rt,l,r);\n    int mid=(l+r)>>1;\n    if(x<=mid) modify(x,y,lson,l,mid,k);\n    if(mid<y) modify(x,y,rson,mid+1,r,k);\n    pushup(rt);\n}\nlong long query(int x,int y,int rt,int l,int r) {\n    if(x<=l&&r<=y) return seg[rt];\n    pushdown(rt,l,r);\n    int mid=(l+r)>>1;\n    long long ret=0;\n    if(x<=mid) ret+=query(x,y,lson,l,mid);\n    if(mid<y) ret+=query(x,y,rson,mid+1,r);\n    return ret;\n}\nvoid add(int u,int v) {\n    ter[++tot]=v,nxt[tot]=lnk[u],lnk[u]=tot;\n}\nvoid dfs(int u,int fa) {\n    dep[u]=dep[fa]+1,f[u][0]=fa,dfn[u]=++idx,seq[idx]=u,sz[u]=1;\n    for(int i=1;(1<<i)<=dep[u];++i) f[u][i]=f[f[u][i-1]][i-1];\n    for(int i=lnk[u];i;i=nxt[i]) {\n        int v=ter[i];\n        if(v==fa) continue;\n        dfs(v,u),sz[u]+=sz[v];\n    }\n}\nint lca(int u,int v) {\n    if(dep[u]>dep[v]) u^=v^=u^=v;\n    for(int i=17;~i;--i) if(dep[f[v][i]]>=dep[u]) v=f[v][i];\n    if(u==v) return u;\n    for(int i=17;~i;--i) if(f[u][i]^f[v][i]) u=f[u][i],v=f[v][i];\n    return f[u][0];\n}\nint getlca(int u,int v,int p) {\n    int x=lca(u,v),y=lca(u,p),z=lca(v,p);\n    if(dep[y]>dep[x]) x=y;\n    if(dep[z]>dep[x]) x=z;\n    return x;\n}\nint jump(int u,int d) {\n    for(int i=17;~i;--i) if(d&(1<<i)) u=f[u][i];\n    return u;\n}\nvoid treeModify(int u,int k) {\n    int l=dfn[u],r=dfn[u]+sz[u]-1;\n    if(u==root) modify(1,n,1,1,n,k);\n    else if(dfn[root]<l||dfn[root]>r) modify(l,r,1,1,n,k);\n    else {\n        int son=jump(root,dep[root]-dep[u]-1);\n        modify(1,n,1,1,n,k),modify(dfn[son],dfn[son]+sz[son]-1,1,1,n,-k);\n    }\n}\nlong long treeQuery(int u) {\n    int l=dfn[u],r=dfn[u]+sz[u]-1;\n    if(u==root) return query(1,n,1,1,n);\n    else if(dfn[root]<l||dfn[root]>r) return query(l,r,1,1,n);\n    else {\n        int son=jump(root,dep[root]-dep[u]-1);\n        return query(1,n,1,1,n)-query(dfn[son],dfn[son]+sz[son]-1,1,1,n);\n    }\n}\nint main() {\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i) scanf(\"%d\",&a[i]);\n    for(int i=1;i<n;++i) {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        add(u,v),add(v,u);\n    }\n    dfs(1,0);\n    build(1,1,n);\n    root=1;\n    while(m--) {\n        int opt;\n        scanf(\"%d\",&opt);\n        if(opt==1) {\n            scanf(\"%d\",&root);\n        } else if(opt==2) {\n            int u,v,x;\n            scanf(\"%d%d%d\",&u,&v,&x);\n            treeModify(getlca(u,v,root),x);\n        } else {\n            int x;\n            scanf(\"%d\",&x);\n            printf(\"%lld\\n\",treeQuery(x));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1543850846,
        "uid": 49725,
        "name": "Siyuan",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF916E \u3010Jamie and Tree\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u5206\u6790\u5f97\u5230\u8fd9\u662f\u4e00\u4e2a\u6811\u5256\n\n## \u9898\u610f\uff1a\n\n\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n$1.$\t\u6362\u6839\n\n$2.$\t\u5b50\u6811\u4fee\u6539\n\n$3.$\t$LCA$\n\n$4.$\t\u5b50\u6811\u67e5\u8be2\n\n\u6211\u4eec\u6328\u4e2a\u5206\u6790\n\n## $100$\u5206\n\n\u5148\u4ee5$1$\u4e3a\u6839\u5c06\u6574\u68f5\u6811\u5256\u4e00\u904d\n\n\u63a5\u7740\u5904\u7406\u6bcf\u4e2a\u64cd\u4f5c\uff1a\n\n$1.$\t\u76f4\u63a5\u6362\n\n$2.$\t\u6211\u4eec\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u4e3a\u4e86\u53d9\u8ff0\u65b9\u4fbf\uff0c\u8bb0$x,y$\u5728\u539f\u6811\u4e2d\u7684$LCA$\u4e3a$lca(x,y)$\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u70b9$x$\uff0c\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n$(1)$\t$x=root$\uff0c\u4fee\u6539\u6574\u68f5\u6811\n\n$(2)$\t$lca(x,root)!=x$\uff0c\u90a3\u4e48\u6362\u6839\u4e0d\u5f71\u54cd\u5b50\u6811\uff0c\u76f4\u63a5\u4fee\u6539\n\n$(3)$\t$lca(x,root)=x$\uff0c\u53ef\u4ee5\u753b\u56fe\u8bc1\u660e$x$\u7684\u5b50\u6811\u5c31\u662f$x$\u539f\u6709\u7684\u5b50\u6811\u51cf\u53bb$x$\u7684$root$\u6240\u5728\u7684\u4e00\u4e2a\u201c\u6811\u679d\u201d\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u4fee\u6539\u6574\u68f5\u6811\uff0c\u5728\u5c06$root$\u6240\u5728\u7684\u6811\u679d\u8fd8\u539f\n\n$3.$\t\u6211\u4eec\u4f9d\u7136\u8981\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n\u6211\u4eec\u4e0d\u59a8\u9ed8\u8ba4$dep[x]\\leq dep[y]$\n\n\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n$(1)$ $lca(x,y)=x$\n\n$1)$ $root$\u5728$y$\u7684\u5b50\u6811\u4e2d\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a$y$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/a3we2g8g.png)\n \n$2)$ $root$\u5728$x$\u4e0e$y$\u4e4b\u95f4\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a$root$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/84im59ga.png)\n \n$3)$ $root$\u5728\u5176\u4ed6\u4f4d\u7f6e\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a$x$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/6616kv75.png)\n \n$(2)$ $lca(x,y)!=x$\n\n$1)$ $root$\u5728$x$\u7684\u5b50\u6811\u4e2d\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a$x$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jtq36r9c.png)\n \n$2)$ $root$\u5728$y$\u7684\u5b50\u6811\u4e2d\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a$y$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vyzsy2ec.png)\n \n$3)$ $root$\u5728$x$\u5230$y$\u7684\u8def\u5f84\u4e0a\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a$root$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7ria46gd.png)\n \n$4)$ \u82e5$lca(x,root)=lca(y,root)$\uff0c\u5373$root$\u5728\u4e0b\u56fe\u6240\u793a\u4f4d\u7f6e\uff0c\u7b54\u6848\u4e3a$lca(x,y)$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/722z9yfq.png)\n \n$5)$ \u82e5$lca(x,y)!=lca(x,root)$\uff0c\u5373$root$\u5728\u4e0b\u56fe\u4f4d\u7f6e\uff0c\u7b54\u6848\u4e3a$lca(x,root)$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/nwhqgzsw.png)\n \n$6)$ \u82e5$lca(x,y)!=lca(y,root)$\uff0c\u5373$root$\u5728\u4e0b\u56fe\u4f4d\u7f6e\uff0c\u7b54\u6848\u4e3a$lca(y,root)$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/24dgtl1a.png)\n\n$4.$\t\u540c$2$\uff0c\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u67e5\u8be2\n\n$code:$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n#define int long long\nstruct edge\n{\n\tint nxt,to;\n}e[300001<<1];\nint root,n,m,r,tot,cnt,h[300001],a[300001],dep[300001],fa[300001],s[300001],son[300001],id[300001],w[300001],top[300001],ans[300001<<2],tag[300001<<2],;\ninline int read()\n{\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')\n\t\t\tf=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x*f;\n}\ninline void add(int x,int y)\n{\n\te[++tot].nxt=h[x];\n\th[x]=tot;\n\te[tot].to=y;\n}\ninline int ls(int k)\n{\n\treturn k<<1;\n}\ninline int rs(int k)\n{\n\treturn k<<1|1;\n}\ninline void push_up(int k)\n{\n\tans[k]=ans[ls(k)]+ans[rs(k)];\n}\ninline void f(int k,int l,int r,int p)\n{\n\tans[k]+=p*(r-l+1);\n\ttag[k]+=p;\n}\ninline void push_down(int k,int l,int r)\n{\n\tint mid=(l+r)>>1;\n\tf(ls(k),l,mid,tag[k]);\n\tf(rs(k),mid+1,r,tag[k]);\n\ttag[k]=0;\n}\nvoid build(int k,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tans[k]=w[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(ls(k),l,mid);\n\tbuild(rs(k),mid+1,r);\n\tpush_up(k);\n}\nvoid update(int nl,int nr,int l,int r,int k,int p)\n{\n\tif(l>=nl&&r<=nr)\n\t{\n\t\tans[k]+=p*(r-l+1);\n\t\ttag[k]+=p;\n\t\treturn;\n\t}\n\tpush_down(k,l,r);\n\tint mid=(l+r)>>1;\n\tif(nl<=mid)\n\t\tupdate(nl,nr,l,mid,ls(k),p);\n\tif(nr>mid)\n\t\tupdate(nl,nr,mid+1,r,rs(k),p);\n\tpush_up(k);\n}\nint query(int nl,int nr,int l,int r,int k)\n{\n\tif(l>=nl&&r<=nr)\n\t\treturn ans[k];\n\tpush_down(k,l,r);\n\tint mid=(l+r)>>1,res=0;\n\tif(nl<=mid)\n\t\tres+=query(nl,nr,l,mid,ls(k));\n\tif(nr>mid)\n\t\tres+=query(nl,nr,mid+1,r,rs(k));\n\treturn res;\n}\nvoid dfs1(int k,int f,int deep)\n{\n\tdep[k]=deep;\n\tfa[k]=f;\n\ts[k]=1;\n\tint maxson=-1;\n\tfor(register int i=h[k];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to==f)\n\t\t\tcontinue;\n\t\tdfs1(e[i].to,k,deep+1);\n\t\ts[k]+=s[e[i].to];\n\t\tif(s[e[i].to]>maxson)\n\t\t{\n\t\t\tmaxson=s[e[i].to];\n\t\t\tson[k]=e[i].to;\n\t\t}\n\t}\n}\nvoid dfs2(int k,int t)\n{\n\tid[k]=++cnt;\n\tw[cnt]=a[k];\n\ttop[k]=t;\n\tif(!son[k])\n\t\treturn;\n\tdfs2(son[k],t);\n\tfor(register int i=h[k];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to==fa[k]||e[i].to==son[k])\n\t\t\tcontinue;\n\t\tdfs2(e[i].to,e[i].to);\n\t}\n}\ninline int lca(int x,int y)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t\tx^=y^=x^=y;\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])\n\t\tx^=y^=x^=y;\n\treturn x;\n}\ninline int find(int x,int y)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t\tx^=y^=x^=y;\n\t\tif(fa[top[x]]==y)\n\t\t\treturn top[x];\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])\n\t\tx^=y^=x^=y;\n\treturn son[x];\n}\ninline int LCA(int x,int y)\n{\n\tif(dep[x]>dep[y])\n\t\tx^=y^=x^=y;\n\tif(lca(x,y)==x)\n\t{\n\t\tif(id[root]>=id[y]&&id[root]<=id[y]+s[y]-1)\n\t\t\treturn y;\n\t\tif(lca(x,root)==x)\n\t\t\treturn lca(y,root);\n\t\treturn x;\n\t}\n\tif(id[root]>=id[x]&&id[root]<=id[x]+s[x]-1)\n\t\treturn x;\n\tif(id[root]>=id[y]&&id[root]<=id[y]+s[y]-1)\n\t\treturn y;\n\tif((lca(x,root)==root&&lca(x,y)==lca(y,root))||(lca(y,root)==root&&lca(x,y)==lca(x,root)))\n\t\treturn root;\n\tif(lca(x,root)==lca(y,root))\n\t\treturn lca(x,y);\n\tif(lca(x,y)!=lca(x,root))\n\t\treturn lca(x,root);\n\treturn lca(y,root);\n}\ninline void up2(int x,int p)\n{\n\tif(root==x)\n\t{\n\t\tupdate(1,n,1,n,1,p);\n\t\treturn;\n\t}\n\tint qwq=lca(root,x);\n\tif(qwq!=x)\n\t\tupdate(id[x],id[x]+s[x]-1,1,n,1,p);\n\telse\n\t{\n\t\tint node=find(root,x);\n\t\tupdate(1,n,1,n,1,p);\n\t\tupdate(id[node],id[node]+s[node]-1,1,n,1,-p);\n\t}\n}\ninline int q2(int x)\n{\n\tif(x==root)\n\t\treturn query(1,n,1,n,1);\n\tint qwq=lca(root,x);\n\tif(qwq!=x)\n\t\treturn query(id[x],id[x]+s[x]-1,1,n,1);\n\tint node=find(root,x);\n\treturn query(1,n,1,n,1)-query(id[node],id[node]+s[node]-1,1,n,1);\n}\nsigned main(signed argc,char **argv)\n{\n\tn=read(),m=read(),root=1;\n\tfor(register int i=1;i<=n;++i)\n\t\ta[i]=read();\n\tfor(register int i=1;i<n;++i)\n\t{\n\t    int x=read(),y=read();\n\t    add(x,y);\n\t    add(y,x);\n\t}\n\tdfs1(1,0,1);\n\tdfs2(1,1);\n\tbuild(1,1,n);\n\twhile(m--)\n\t{\n\t\tint opt=read();\n\t\tif(opt==1)\n\t\t\troot=read();\n\t\tif(opt==2)\n\t\t{\n\t\t    int x=read(),y=read(),p=read();\n\t\t    up2(LCA(x,y),p);\n\t\t}\n\t\tif(opt==3)\n\t\t{\n\t\t    int k=read();\n\t\t    printf(\"%lld\\n\",q2(k));\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1580948458,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF916E \u3010Jamie and Tree\u3011"
    },
    {
        "content": "> LCT \u80fd\u628a\u4efb\u4f55\u4f18\u96c5\u7684\u9898\u76ee\u53d8\u6210\u66b4\u529b\u3002 \u2014\u2014\u67d0\u9898\u89e3\u533a\n\n> \u6240\u6709\u80fd\u7528\u6811\u5256\u505a\u7684\u9898 LCT \u90fd\u80fd\u505a\u3002 \u2014\u2014\u5fd8\u4e86\u662f\u8c01\u8bf4\u7684\u4e86\n\n### \u9898\u76ee\n\u7ed9\u51fa\u4e00\u68f5 $n$ \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u6709\u6743\u503c\u3002\u5171 $q$ \u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6709\u4ee5\u4e0b\u4e09\u79cd\uff1a\n- \u628a\u6839\u6362\u4e3a $u$\u3002\n- \u7ed9\u51fa $u,v,x$\uff0c\u628a $\\mathrm{lca}(x,y)$ \u7684\u5b50\u6811\u5185\u6240\u6709\u7ed3\u70b9\u6743\u503c\u52a0\u4e0a $x$\u3002\n- \u7ed9\u51fa $v$\uff0c\u8be2\u95ee $v$ \u7684\u5b50\u6811\u5185\u6240\u6709\u70b9\u6743\u503c\u548c\u3002\n\n($1\\le n,q\\le10^5,|x|\\le 10^8$)\n### \u9898\u89e3\n~~\u770b\u5230 tag \u91cc\u9762\u6709\u6811\u5256\u679c\u65ad\u9009\u62e9\u5199 LCT\u3002~~\n\n\u5728\u8bf4\u672c\u9898\u7684\u6838\u5fc3\u64cd\u4f5c\u2014\u2014\u5b50\u6811\u52a0\u2014\u2014\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684 trick\uff0c\u7528 LCT \u6c42\u4e24\u70b9\u7684 $\\rm lca$\u3002\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u4e24\u6b21 `access` \u64cd\u4f5c\u5c31\u597d\uff0c\u5982\u4e0b\uff1a\n```cpp\ninline int access(int x)\n{\n    int y = 0;\n    while (x) { splay(x); Rs(x) = y; pushup(x); x = Fa(y = x); }\n    return y;\n}\nint lca = (access(u), access(v));\n```\n\u539f\u56e0\u4e5f\u5f88\u663e\u7136\uff0c\u6211\u4eec\u62c9\u5b8c $u$ \u5230\u6839\u7684\u5b9e\u94fe\u540e\u518d\u62c9 $v$ \u7684\u3002\u5219\u6700\u540e\u4e00\u4e2a\u9700\u8981\u8c03\u6574\u7684\u5b9e\u94fe\u9876\u5bf9\u5e94\u7684\u7ed3\u70b9\u81ea\u7136\u662f $\\mathrm{lca}(u,v)$\u3002\n\n\u597d\u4e86\uff0c\u63a5\u4e0b\u6765\u8fdb\u5165\u91cd\u5934\u620f\uff0c\u5982\u4f55\u7528 LCT \u53bb\u7ef4\u62a4\u5b50\u6811\u52a0\u3002\u56e0\u4e3a\u7ef4\u62a4\u5b50\u6811\u548c\u6211\u4eec\u8981\u5355\u72ec\u7ef4\u62a4\u4e00\u4e0b\u7ed3\u70b9\u5bf9\u5e94\u865a\u5b50\u6811\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u7ef4\u62a4\u5b50\u6811\u52a0\u5176\u5b9e\u4e5f\u662f\u8981\u5bf9\u5e94\u53bb\u4fee\u6539\u8fd9\u4e2a\u865a\u5b50\u6811\u7684\u4fe1\u606f\u3002\u4f46\u4e0d\u53ef\u80fd\u76f4\u63a5\u5bf9\u865a\u5b50\u6811\u5185\u7684\u6bcf\u4e2a\u7ed3\u70b9\u4e00\u4e00\u4fee\u6539\u4fe1\u606f\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7\u4e0b\u4f20\u6807\u8bb0\u7684\u65b9\u6cd5\uff08\u56e0\u4e3a\u5b83\u4eec\u6839\u672c\u5c31\u4e0d\u5728\u4e00\u4e2a $\\rm splay$ \u91cc\uff09\u53bb\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8003\u8651\u65b0\u7684\u65b9\u6cd5\u3002\n\n\u6ce8\u610f\u5230\u865a\u5b50\u6811\u7684\u4e00\u6b21\u4fee\u6539\u5bf9\u91cc\u9762\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u662f\u76f8\u540c\u7684\u4e14\u53ef\u4ee5\u4fdd\u5b58\u5728\u6839\u8282\u70b9\u91cc\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u5f00\u4e00\u4e2a `dlt` \u8868\u793a\u5f53\u524d\u7ed3\u70b9\u865a\u5b50\u6811\u5df2\u7ecf\u52a0\u4e86\u591a\u5c11\u503c\u4e86\u3002\u8fd9\u6837\u5f53\u7ed3\u70b9\u7684\u865a\u5b9e\u53d1\u751f\u6539\u53d8\u65f6\u518d\u6839\u636e `dlt` \u8fdb\u884c\u4fee\u6539\u5c31\u597d\u4e86\uff0c\u5176\u5b9e\u8ddf\u4e0b\u4f20\u6807\u8bb0\u7684\u601d\u60f3\u662f\u7c7b\u4f3c\u7684\u3002\n\n\u6765\u770b\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\uff0c\u9996\u5148\u662f\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4ec0\u4e48\u3002\u6ce8\u610f\u5230\u4e0b\u653e `dlt` \u5176\u5b9e\u662f\u9488\u5bf9\u5bf9\u5e94\u7ed3\u70b9\u7684\u6240\u6709\u5b50\u6811\u7684\uff08\u5305\u62ec\u865a\u5b50\u6811\u548c\u5b9e\u5b50\u6811\uff09\uff0c\u6240\u4ee5\u8981\u7ef4\u62a4\u4e00\u4e2a `dtag` \u8868\u793a\u865a\u5b50\u6811\u7684\u4e0b\u4f20\u6807\u8bb0\uff0c`stag` \u8868\u793a\u5b9e\u5b50\u6811\u7684\u4e0b\u4f20\u6807\u8bb0\uff0c\u7136\u540e\u6bcf\u6b21\u865a\u5b9e\u53d8\u5316\u7684\u65f6\u5019\u5bf9\u5e94\u4fee\u6539\u5c31\u597d\u3002\u4e3a\u4e86\u7ef4\u62a4 `dtag` \u548c `stag` \u4e0b\u4f20\u65f6\u5bf9\u7ed3\u70b9\u603b\u548c `sum` \u9020\u6210\u7684\u5f71\u54cd\uff0c\u6211\u4eec\u9700\u8981\u865a\u5b50\u6811\u5927\u5c0f\u4e4b\u548c `szt` \u548c\u5b9e\u5b50\u6811\u5927\u5c0f\u4e4b\u548c `szc`\uff0c\u800c\u4e3a\u4e86\u7ef4\u62a4\u5b83\u4eec\uff0c\u6211\u4eec\u53c8\u9700\u8981\u6bcf\u4e2a\u70b9\u7684\u865a\u5b50\u6811\u5927\u5c0f `szl` \u548c\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\uff08\u539f\u6811\u4e0a\u7684\uff09\u5927\u5c0f `sz`\u3002\u5176\u4f59\u8981\u7ef4\u62a4\u7684\u5c31\u6ca1\u6709\u4ec0\u4e48\u597d\u8bf4\u7684\u4e86\uff0c\u90fd\u662f\u4e00\u4e9b\u6bd4\u8f83\u5e38\u89c4\u7684\u64cd\u4f5c\u3002\n\n\u7136\u540e\u662f\u4e00\u4e9b\u6bd4\u8f83\u5173\u952e\u7684\u51fd\u6570\uff0c\u9996\u5148\u662f\u4e0b\u4f20 `dtag` \u548c `stag` \u7684 `addD`\uff0c`addS`\u3002\n```cpp\nvoid addS(int x, ll v) \n{  \n    if (!x) return ;\n    node[x].stag += v; node[x].w += v;\n    node[x].sum += v * node[x].szc;\n}\nvoid addD(int x, ll v)\n{\n    if (!x) return ;\n    node[x].dtag += v; node[x].dlt += v;\n    node[x].sum += v * node[x].szt;\n}\n```\n\u9700\u8981\u6ce8\u610f\u7684\u70b9\u662f\uff0c\u5bf9\u4e8e\u5b9e\u5b50\u6811\u7684\u4e0b\u653e\uff0c\u8981\u7b97\u4e0a\u5f53\u524d\u7ed3\u70b9\uff0c\u5bf9\u4e8e\u865a\u5b50\u6811\u7684\u4e0b\u653e\u4e0d\u8981\u7b97\u4e0a\u5f53\u524d\u7ed3\u70b9\u3002\u4ee5\u53ca\u5bf9\u4e8e `sum` \u7684\u66f4\u65b0\u7528\u7684 `sz` \u503c\u5230\u5e95\u662f\u54ea\u4e2a\u3002\n\n\u7136\u540e\u662f\u7ef4\u62a4\u865a\u5b9e\u53d8\u5316\u7684 `ins`\uff0c`del`\u3002\n```cpp\nvoid ins(int x, int y) \n{ \n    if (!y) return ;\n    addS(y, -node[x].dlt); addD(y, -node[x].dlt);\n    node[x].szl += node[y].sz; node[x].suml += node[y].sum;\n}\nvoid del(int x, int y)\n{\n    if (!y) return ;\n    node[x].szl -= node[y].sz; node[x].suml -= node[y].sum;\n    addS(y, node[x].dlt); addD(y, node[x].dlt);\n}\n```\n\u9700\u8981\u6ce8\u610f\u7684\u70b9\u662f\uff0c\u52a0\u5165\u865a\u5b50\u6811\u65f6\u5e94\u8be5\u5148\u53bb\u6389 `dlt` \u518d\u52a0\u5165\uff0c\u800c\u4ece\u865a\u5b50\u6811\u5220\u53bb\u65f6\u5e94\u8be5\u5148\u5220\u53bb\u518d\u64a4\u9500 `dlt` \u7684\u5f71\u54cd\u3002\n\n\u8fd8\u6709\u4e00\u70b9\uff0c\u672c\u9898\u4e2d\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4e0d\u518d\u7ef4\u62a4\u5b9e\u5b50\u6811\u4e0a\u7684\u4fe1\u606f\uff0c\u5904\u7406\u8be2\u95ee\u65f6\u8fd9\u6837\u5904\u7406\uff1a\n```cpp\nll ask(int rt, int x) { return split(rt, x), (node[x].w + node[x].suml + node[x].szl * node[x].dlt); }\n```\n\u76f4\u63a5\u628a `x` \u548c `rt` \u62c9\u5230\u4e00\u4e2a\u5b9e\u94fe\u91cc\uff0c\u8fd9\u6837 `x` \u7684\u5b50\u6811\u5c31\u5168\u662f\u865a\u5b50\u6811\u4e86\uff0c\u76f4\u63a5\u56de\u7b54\u865a\u5b50\u6811\u7684\u4fe1\u606f\u5c31\u597d\u3002\n### \u5b8c\u6574\u4ee3\u7801\u53ca\u540e\u7eed\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define Ls(x) (node[x].ch[0])\n#define Rs(x) (node[x].ch[1])\n#define Fa(x) (node[x].fa)\nconst int N = 1e5 + 10; typedef long long ll;\nint st[N], tp;\nstruct LCT\n{\n    struct Splay\n    {\n        //sz \u8868\u793a\u8fd9\u4e2a\u70b9\u5728\u6811\u4e0a\u7684\u5b50\u6811\u5927\u5c0f\uff0cszl \u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u865a\u5b50\u6811\u5927\u5c0f\n        //szc\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u6240\u5728\u5b9e\u5b50\u6811\u5927\u5c0f\uff0cszt \u8868\u793a\u8fd9\u4e2a\u70b9\u6240\u5728\u5b9e\u5b50\u6811\u5185\u6240\u6709\u70b9\u7684\u865a\u5b50\u6811\u5927\u5c0f\u4e4b\u548c\n        //sum \u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u6811\u4e0a\u7684\u5b50\u6811\u6743\u503c\u548c\uff0csuml \u8868\u793a\u8fd9\u4e2a\u70b9\u865a\u5b50\u6811\u5b50\u6811\u6743\u503c\u548c\n        //dlt \u8868\u793a\u8fd9\u4e2a\u70b9\u5b50\u6811\u5df2\u7ecf\u52a0\u4e86\u591a\u5c11\u503c\u4e86\n        //dtag \u8868\u793a\u8981\u4e0b\u653e\u5230\u865a\u5b50\u6811\u7684\u6807\u8bb0\uff0cstag \u8868\u793a\u8981\u4e0b\u653e\u5230\u5b9e\u5b50\u6811\u7684\u6807\u8bb0\n        int fa, ch[2], revFlag; ll w;\n        int sz, szl, szc, szt; ll suml, sum, dlt, dtag, stag;\n    }node[N]; \n    void pushup(int x) \n    {  \n        node[x].sz = node[Ls(x)].sz + node[Rs(x)].sz + node[x].szl + 1;\n        node[x].szc = node[Ls(x)].szc + node[Rs(x)].szc + 1;\n        node[x].szt = node[Ls(x)].szt + node[Rs(x)].szt + node[x].szl;\n        node[x].sum = node[Ls(x)].sum + node[Rs(x)].sum + node[x].w + node[x].suml + node[x].szl * node[x].dlt;\n    }\n    void reverse(int x) { if (!x) return ; std::swap(Ls(x), Rs(x)); node[x].revFlag ^= 1; }\n    void addS(int x, ll v) \n    {  \n        if (!x) return ;\n        node[x].stag += v; node[x].w += v;\n        node[x].sum += v * node[x].szc;\n    }\n    void addD(int x, ll v)\n    {\n        if (!x) return ;\n        node[x].dtag += v; node[x].dlt += v;\n        node[x].sum += v * node[x].szt;\n    }\n    void pushdown(int x)\n    {\n        if (node[x].revFlag)\n        {\n            reverse(Ls(x)); reverse(Rs(x));\n            node[x].revFlag = 0;\n        }\n        if (node[x].stag)\n        {\n            addS(Ls(x), node[x].stag); addS(Rs(x), node[x].stag);\n            node[x].stag = 0;\n        }\n        if (node[x].dtag)\n        {\n            addD(Ls(x), node[x].dtag); addD(Rs(x), node[x].dtag);\n            node[x].dtag = 0;\n        }\n    }\n    int get(int x) { return Rs(Fa(x)) == x; }\n    int nRoot(int x) { return Rs(Fa(x)) == x || Ls(Fa(x)) == x; }\n    void rotate(int x)\n    {\n        int fa = Fa(x), gf = Fa(fa), d = get(x), dd = get(fa);\n        if (nRoot(fa)) node[gf].ch[dd] = x;\n        node[fa].ch[d] = node[x].ch[d ^ 1]; Fa(node[x].ch[d ^ 1]) = fa;\n        node[x].ch[d ^ 1] = fa; Fa(fa) = x; Fa(x) = gf;\n        pushup(fa); pushup(x);\n    }\n    void splay(int x)\n    {\n        int y = st[tp = 1] = x;\n        while (nRoot(y)) st[++tp] = y = Fa(y);\n        while (tp) pushdown(st[tp--]);\n        for (; nRoot(x); rotate(x))\n            if (nRoot(Fa(x))) rotate(get(x) == get(Fa(x)) ? Fa(x) : x);\n        pushup(x);\n    }\n    void ins(int x, int y) \n    { \n        if (!y) return ;\n        addS(y, -node[x].dlt); addD(y, -node[x].dlt);\n        node[x].szl += node[y].sz; node[x].suml += node[y].sum;\n    }\n    void del(int x, int y)\n    {\n        if (!y) return ;\n        node[x].szl -= node[y].sz; node[x].suml -= node[y].sum;\n        addS(y, node[x].dlt); addD(y, node[x].dlt);\n    }\n    int access(int x)\n    {\n        int y = 0;\n        while (x)\n        {\n            splay(x); ins(x, Rs(x)); del(x, y);\n            Rs(x) = y; pushup(x); x = Fa(y = x);\n        }\n        return y;\n    }\n    void makeroot(int x) { access(x); splay(x); reverse(x); }\n    void split(int x, int y) { makeroot(x); access(y); splay(y); }\n    void link(int x, int y) { makeroot(x); makeroot(y); access(y); Fa(x) = y; Rs(y) = x; pushup(y); }\n    void add(int rt, int x, ll v)\n    {   \n        split(rt, x); node[x].dlt += v; node[x].w += v;\n        node[x].sum += (node[x].szl + 1) * v;\n    }   \n    ll ask(int rt, int x) { return split(rt, x), (node[x].w + node[x].suml + node[x].szl * node[x].dlt); }\n}lct;\nint main()\n{\n    int n, q, rt = 1; scanf(\"%d%d\", &n, &q);\n    for (int i = 1; i <= n; ++i) scanf(\"%lld\", &lct.node[i].w), lct.pushup(i);\n    for (int i = 1, x, y; i < n; ++i) scanf(\"%d%d\", &x, &y), lct.link(x, y);\n    for (int i = 1, opt, u, v, x, lca; i <= q; ++i)\n    {\n        scanf(\"%d\", &opt);\n        switch (opt)\n        {\n            case 1:\n                scanf(\"%d\", &v); rt = v;\n                break;\n            case 2:\n                scanf(\"%d%d%d\", &u, &v, &x); lct.makeroot(rt);\n                lca = (lct.access(u), lct.access(v)); lct.add(rt, lca, x);\n                break;\n            case 3:\n                scanf(\"%d\", &v); \n                printf(\"%lld\\n\", lct.ask(rt, v));\n        }\n    }\n    return 0;\n}\n```\n\u611f\u8c22 $\\tt \\color{black}j\\color{red}erry3128$ \u5bf9\u6211 LCT \u7684\u8010\u5fc3\u6307\u5bfc\u548c\u4ee3\u7801\u53c2\u8003\u3002\n\n\u672c\u9898\u4e2d\u9700\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u662f\u6ee1\u8db3\u53ef\u52a0\u6027\u7684\uff0c\u4f46\u5982\u679c\u4e0d\u6ee1\u8db3\u5462\uff1f\u6211\u4eec\u5c31\u9700\u8981\u5bf9\u865a\u5b50\u6811\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\u7ef4\u62a4\u4e86\uff0c\u5177\u4f53\u89c1\uff1a[P3979 \u9065\u8fdc\u7684\u56fd\u5ea6](https://www.luogu.com.cn/problem/P3979)\u3002\n\n\u840c\u65b0\u521d\u5b66 LCT \u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\uff0c\u5982\u679c\u6709\u7406\u89e3\u504f\u9887\u6216\u8005\u6ca1\u7406\u89e3\u5230\u7684\u5730\u65b9\u8bf7\u8f7b\u55b7\u5e76\u6307\u51faqwq",
        "postTime": 1639654366,
        "uid": 137603,
        "name": "zhiyangfan",
        "ccfLevel": 9,
        "title": "CF916E Jamie and Tree \u9898\u89e3"
    },
    {
        "content": "## Euler Tour Tree\n\n- \u8fd9\u4e2a\u80fd\u6362\u6839\uff0c\u5e76\u4e0d\u662f splay \u7ef4\u62a4\u62ec\u53f7\u5e8f\u90a3\u4e2a\u7b80\u5316\u7248\u3002\n- \u56e0\u4e3a\u53ea\u6709\u5b50\u6811\u64cd\u4f5c\uff0c\u5e76\u4e14\u7ef4\u62a4\u7684\u4fe1\u606f\u4e3a\u548c\uff0c\u5177\u6709\u4ea4\u6362\u5f8b\uff0c\u90a3\u4e48 ETT \u4e5f\u5c31\u591f\u5bf9\u672c\u9898\u8fdb\u884c\u7ef4\u62a4\u3002\n- \u8003\u8651\u4f7f\u7528 ETT \u5bf9\u672c\u9898\u7684\u6811\u8fdb\u884c\u7ef4\u62a4\uff0c\u56e0\u4e3a ETT \u81ea\u8eab\u662f\u5c06\u4e00\u68f5\u6811\u62cd\u5e73\u6210\u6b27\u62c9\u73af\u6e38\u5e8f\uff0c\u5bf9\u4e8e\u6811\u4e0a\u4e00\u4e9b\u6811\u5f62\u7ed3\u6784\u7684\u4fe1\u606f\u6709\u635f\u5931\u3002\u6240\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u9897 LCT \u5bf9 ETT \u7684\u7ed3\u6784\u8fdb\u884c\u8f85\u52a9\u7ef4\u62a4\u3002\n- \u6211\u4eec\u53ea\u5728\u4ee3\u8868\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\uff0c\u56e0\u4e3a\u6ca1\u6709 link \u548c cut \u64cd\u4f5c\uff0c\u6240\u4ee5\u4e0d\u6d89\u53ca ETT \u4e0a\u70b9\u7684\u5220\u9664\uff0c\u6545\u4e5f\u4e0d\u9700\u8981\u6570\u636e\u7684\u8f6c\u8fd0\uff0c\u4ee3\u7801\u91cf\u5927\u5927\u51cf\u5c0f\u3002\n- \u6362\u6839\u5c31\u662f\u533a\u95f4\u5e73\u79fb\uff0c\u65b0\u6839\u524d\u9762\u7684\u6b27\u62c9\u5e8f\u653e\u5728\u540e\u9762\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u6b27\u62c9\u5e8f\u5c31\u50cf\u4e00\u4e2a\u5708\u628a\u6811\u5708\u8d77\u6765\uff0c\u4ece\u54ea\u91cc\u5f00\u59cb\u5176\u5b9e\u65e0\u4f24\u5927\u96c5\u3002\n- \u5b50\u6811\u4fee\u6539\u548c\u67e5\u8be2\u76f4\u63a5\u5b9a\u4f4d\u5b50\u6811\u533a\u95f4\u4fe1\u606f\u5c31\u884c\u4e86\u3002\n- \u540c\u65f6\u672c\u9898\u5728 LCT \u4e0e ETT \u4e0a\uff0cLCT \u53ea\u5bf9\u7ed3\u6784\u8fdb\u884c\u8f85\u52a9\uff0c\u4e8c\u8005\u4e4b\u95f4\u7684\u64cd\u4f5c\u5e76\u6ca1\u6709\u4e92\u76f8\u6620\u5c04\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4ecd\u7136\u53ea\u6709 $O(\\log n)$ \u5355\u6b21\u64cd\u4f5c\u3002\n\n```\n//ayame\u4fdd\u4f51\uff0c\u5938\u54e5\u4fdd\u4f51\uff0c\u72d7\u5988\u4fdd\u4f51\uff0cMDR\u4fdd\u4f51\uff0c\u9509\u5200\u602a\u4fdd\u4f51\uff0cM99\u4fdd\u4f51\uff0c\u514b\u7239\u4fdd\u4f51\n#include<bits/stdc++.h>\nusing namespace std;\nint p1=1000000,p2=0;\nchar buf[1000005],wb[1000005];\nint gc() {\n\tif(p1>=1000000)fread(buf,1,1000000,stdin),p1=0;\n\treturn buf[p1++];\n}\n#define gc getchar\n#define Loli true\n#define Kon xor true\nlong long getint() {\n\tlong long ret=0,flag=1;\n\tchar c=gc();\n\twhile(c<'0'||c>'9') {\n\t\tif(c=='-')flag=-1;\n\t\tc=gc();\n\t}\n\twhile(c<='9'&&c>='0') {\n\t\tret=(ret<<3)+(ret<<1)+c-'0';\n\t\tc=gc();\n\t}\n\treturn ret*flag;\n}\nvoid pc(char x) {\n\tif(p2>=1000000)fwrite(wb,1,1000000,stdout),p2=0;\n\twb[p2++]=x;\n}\nvoid wrt(long long x) {\n\tif(x<0)pc('-'),x=-x;\n\tint c[24]= {0};\n\tif(!x)return pc('0'),void();\n\twhile(x)c[++c[0]]=x%10,x/=10;\n\twhile(c[0])pc(c[c[0]--]+'0');\n}\nint n,m;\nvector<int> vec[100005];\nint ind[200005],sign,vst[200005],rep[200005];\nvoid dfs(int x,int prt){\n\tind[++sign]=x;\n\tfor(int y:vec[x])if(y^prt)dfs(y,x),ind[++sign]=x;\n}\nnamespace LCT{\n\tstruct node {\n\t\tint ch[2],fa,rev,pre,suf;\n\t} v[100005];\n\tbool isroot(int x){\n\t\treturn v[v[x].fa].ch[0]!=x&&v[v[x].fa].ch[1]!=x;\n\t}\n\tvoid tag_rev(int x) {\n\t\tswap(v[x].ch[0],v[x].ch[1]);\n\t\tswap(v[x].pre,v[x].suf);\n\t\tv[x].rev^=1;\n\t}\n\tvoid push_down(int rt) {\n\t\tif(v[rt].rev) {\n\t\t\ttag_rev(v[rt].ch[0]);\n\t\t\ttag_rev(v[rt].ch[1]);\n\t\t\tv[rt].rev=0;\n\t\t}\n\t}\n\tvoid push_up(int x){\n\t\tv[x].pre=v[x].ch[0]?v[v[x].ch[0]].pre:x;\n\t\tv[x].suf=v[x].ch[1]?v[v[x].ch[1]].suf:x;\n\t}\n\tvoid rot(int x) {\n\t\tint p=v[x].fa,g=v[p].fa;\n\t\tbool d=v[p].ch[1]==x;\n\t\tif(!isroot(p))v[g].ch[v[g].ch[1]==p]=x;\n\t\tv[p].ch[d]=v[x].ch[d^1];\n\t\tv[v[x].ch[d^1]].fa=p;\n\t\tv[x].ch[d^1]=p;\n\t\tv[x].fa=g,v[p].fa=x;\n\t\tpush_up(p),push_up(x);\n\t}\n\tvoid pre_push_down(int x) {\n\t\tif(!isroot(x))pre_push_down(v[x].fa);\n\t\tpush_down(x);\n\t}\n\tvoid splay(int x) {\n\t\tpre_push_down(x);\n\t\twhile(!isroot(x)) {\n\t\t\tint p=v[x].fa,g=v[p].fa;\n\t\t\tif(!isroot(p))rot(v[g].ch[0]==p^v[p].ch[0]==x?x:p);\n\t\t\trot(x);\n\t\t}\n\t}\n\tint access(int x) {\n\t\tint ret=0;\n\t\tfor(int y=0;x;y=x,x=v[x].fa)\n\t\t\tsplay(x),v[x].ch[1]=y,push_up(ret=x);\n\t\treturn ret;\n\t}\n\tvoid makeroot(int x) {\n\t\taccess(x),splay(x),tag_rev(x);\n\t}\n\tvoid link(int x,int y) {\n\t\tmakeroot(y),v[y].fa=x;\n\t}\n\tvoid cut(int x){\n\t\taccess(x),splay(x),v[v[x].ch[0]].fa=0,v[x].ch[0]=0,push_up(x);\n\t}\n\tint ask(int x){\n\t\treturn access(x),splay(x),v[v[x].ch[0]].suf;\n\t}\n}\nnamespace ETT{\n\tint root,tot;\n\tmap<int,int> e[100005];\n\tstruct node{\n\t\tint ch[2],fa,id,sz,rep,pre,suf;\n\t\tlong long sum,val,stag;\n\t}v[200005];\n\tbool isroot(int x){\n\t\treturn v[v[x].fa].ch[0]!=x&&v[v[x].fa].ch[1]!=x;\n\t}\n\tvoid push_up(int x){\n\t\tif(!x)return;\n\t\tv[x].pre=v[x].ch[0]?v[v[x].ch[0]].pre:x;\n\t\tv[x].suf=v[x].ch[1]?v[v[x].ch[1]].suf:x;\n\t\tv[x].sz=v[v[x].ch[0]].sz+v[v[x].ch[1]].sz+v[x].rep;\n\t\tv[x].sum=v[v[x].ch[0]].sum+v[v[x].ch[1]].sum+v[x].val;\n\t}\n\tvoid push_stag(int x,long long val){\n\t\tif(!x)return;\n\t\tv[x].sum=v[x].sum+v[x].sz*val,v[x].val=v[x].val+v[x].rep*val;\n\t\tv[x].stag=v[x].stag+val;\n\t}\n\tvoid push_down(int x){\n\t\tif(v[x].stag){\n\t\t\tpush_stag(v[x].ch[0],v[x].stag);\n\t\t\tpush_stag(v[x].ch[1],v[x].stag);\n\t\t\tv[x].stag=0;\n\t\t}\n\t}\n\tvoid pre_push_down(int rt){\n\t\tif(v[rt].fa)pre_push_down(v[rt].fa);\n\t\tpush_down(rt);\n\t}\n\tint getpoint(int x,int lim=-1){\n\t\tif(e[e[x].begin()->first][x]!=lim)return e[e[x].begin()->first][x];\n\t\treturn e[e[x].rbegin()->first][x];\n\t}\n\tint build(int l,int r){\n\t\tint mid=(l+r)>>1,x=++tot;v[x].id=ind[mid];v[x].stag=0,push_up(x);\n\t\tif(!vst[v[x].id])vst[v[x].id]=1,v[x].rep=1,rep[v[x].id]=x;\n\t\tif(l<mid)v[x].ch[0]=build(l,mid-1),v[v[x].ch[0]].fa=x,e[v[v[v[x].ch[0]].suf].id][v[x].id]=x;\n\t\tif(mid<r)v[x].ch[1]=build(mid+1,r),v[v[x].ch[1]].fa=x,e[v[x].id][v[v[v[x].ch[1]].pre].id]=v[v[x].ch[1]].pre;\n\t\treturn push_up(x),x;\n\t}\n\tvoid rot(int x){\n\t\tint p=v[x].fa,g=v[p].fa;\n\t\tbool d=v[p].ch[1]==x;\n\t\tif(!isroot(p))v[g].ch[v[g].ch[1]==p]=x;\n\t\tv[p].ch[d]=v[x].ch[d^1];\n\t\tv[v[x].ch[d^1]].fa=p;\n\t\tv[x].ch[d^1]=p;\n\t\tv[p].fa=x,v[x].fa=g;\n\t\tpush_up(p),push_up(x);\n\t}\n\tvoid splay(int x,int f=0){\n\t\tpre_push_down(x);\n\t\twhile(v[x].fa!=f){\n\t\t\tint p=v[x].fa,g=v[p].fa;\n\t\t\tif(g!=f)rot(v[g].ch[0]==p^v[p].ch[0]==x?x:p);\n\t\t\trot(x);\n\t\t}\n\t}\n\tvoid makeroot(int x){\n\t\tif(root==x)return;\n\t\tLCT::makeroot(x),root=x,x=getpoint(x);\n\t\tsplay(x),splay(x=v[v[x].ch[1]].pre);\n\t\tint y=v[x].ch[0];\n\t\tv[y].fa=0,v[x].ch[0]=0,push_up(x);\n\t\tsplay(x=v[x].suf),v[x].ch[1]=y,v[y].fa=x,push_up(x);\n\t}\n\tvoid add(int x,long long val){\n\t\tif(x==root)return splay(1),push_stag(1,val);\n\t\tint prt=LCT::ask(x),l=e[prt][x],r=e[x][prt];\n\t\tsplay(l),splay(r,l);\n\t\tv[l].val=v[l].val+v[l].rep*val,push_stag(v[r].ch[0],val);\n\t\tpush_up(r),push_up(l);\n\t}\n\tlong long ask(int x){\n\t\tif(x==root)return splay(1),v[1].sum;\n\t\tint prt=LCT::ask(x),l=e[prt][x],r=e[x][prt];\n\t\tsplay(l),splay(r,l);\n\t\treturn (v[l].val+v[v[r].ch[0]].sum);\n\t}\n}\nint main() {\n//\tfreopen(\"lct.in\",\"r\",stdin);\n//\tfreopen(\"lct.out\",\"w\",stdout);\n\tn=getint(),m=getint(),ETT::root=1;\n\tstatic int a[100005];\n\tfor(int i=1;i<=n;i++)a[i]=getint();\n\tfor(int i=1;i<n;i++){\n\t\tint u=getint(),v=getint();\n\t\tvec[u].push_back(v),vec[v].push_back(u);\n\t\tLCT::link(u,v);\n\t}\n\tdfs(1,0),ETT::build(2,sign),LCT::makeroot(1);\n\tETT::splay(1),ETT::e[1][ETT::v[ETT::v[1].pre].id]=ETT::v[1].pre;\n\tfor(int i=1;i<=n;i++){\n\t\tint x=ETT::getpoint(i);\n\t\tETT::splay(x),ETT::v[x].val=a[i],ETT::push_up(x);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint opt=getint();\n\t\tif(opt==1)ETT::makeroot(getint());\n\t\tif(opt==2){int x=getint(),y=getint();ETT::add((LCT::access(x),LCT::access(y)),getint());}\n\t\tif(opt==3)wrt(ETT::ask(getint())),pc('\\n');\n\t}\n\tfwrite(wb,1,p2,stdout);\n\treturn Loli Kon;\n}\n```",
        "postTime": 1640351983,
        "uid": 27338,
        "name": "jerry3128",
        "ccfLevel": 9,
        "title": "\u9898\u89e3\u3010CF916E Jamie and Tree\u3011\u5f88\u666e\u901a\u7684 ETT"
    },
    {
        "content": "$$\\text{\u524d\u8a00}$$\n\n$\\quad$\u53ef\u4ee5\u770b\u770b\u6211\u7684\u4e00\u7bc7blog[\u5173\u4e8e\u6811\u94fe\u5256\u5206\"\u6362\u6839\u64cd\u4f5c\"\u7b14\u8bb0](https://www.luogu.com.cn/blog/Farkas/guan-yu-shu-lian-pou-fen-huan-gen-cao-zuo-bi-ji)(\u5185\u5bb9\u90fd\u5dee\u4e0d\u591a)\n\n$\\quad$\u53e6\u5916\u6d1b\u8c37\u4e0a\u8fd8\u6709\u4e00\u9053\u5173\u4e8e\u6362\u6839\u64cd\u4f5c\u7684\u9898\u76ee\uff1a[P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011](https://www.luogu.com.cn/problem/P3979)([\u6211\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/Farkas/solution-p3979))\n\n$$\\text{\u5173\u4e8e\u9898\u76ee\u8981\u6c42\u7684\u64cd\u4f5c}$$\n\n$\\quad$\u5176\u5b9e\u53ef\u4ee5\u53d1\u73b0\u5728\u4e00\u68f5\u6811\u4e2d\uff0c\u53ea\u6709\u7236\u4eb2(\u7956\u5148)\uff0c\u513f\u5b50(\u5b50\u6811)\uff0c\u6df1\u5ea6\u7b49\u4fe1\u606f\u4f1a\u56e0\u4e3a\u6839\u8282\u70b9\u7684\u53d8\u5316\u800c\u53d8\u5316\uff0c\u6240\u4ee5\u9898\u76ee\u4e00\u822c\u9700\u8981\u4f60\u6709\u6362\u6839\u64cd\u4f5c\uff0c\u5b50\u6811\u4fee\u6539\u64cd\u4f5c\uff0c\u6c42 $LCA$ (\u6700\u8fd1\u516c\u5171\u7956\u5148)\uff0c\u6211\u4eec\u5206\u522b\u6765\u8003\u8651\u4e00\u4e0b\u3002(\u53ef\u4ee5\u770b\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\u6765\u7406\u89e3\uff0c\u9898\u76ee\u4e2d\u7684\u56fe)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gmu2iblr.png))\n\n$$\\text{\u6362\u6839}$$\n\n$\\quad$\u56e0\u4e3a\u6bcf\u6362\u4e00\u6b21\u6839\uff0c\u6811\u4e2d\u7684\u5f88\u591a\u4fe1\u606f\u90fd\u4f1a\u6539\u53d8\uff0c\u4e0d\u53ef\u80fd\u6bcf\u6b21\u6362\u6839\u90fd\u8dd1\u4e24\u4fbf $dfs$ \u9884\u5904\u7406\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5176\u4ed6\u65b9\u6cd5\uff0c\u5bf9\u4e8e\u5355\u7eaf\u7684\u6362\u6839\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf $root$ \u6765\u5b58\u50a8\u6839\u7684\u7f16\u53f7( $root$ \u521d\u59cb\u5316\u4e3a $1$ \uff0c\u9ed8\u8ba4\u4ee5 $1$ \u4e3a\u6839)\uff0c\u5bf9\u4e8e\u5176\u4ed6\u64cd\u4f5c\uff0c\u518d\u901a\u8fc7\u5206\u7c7b\u8ba8\u8bba $root$ \u7684\u4f4d\u7f6e\u6765\u8fdb\u884c\u64cd\u4f5c\u3002\n\n$$\\text{LCA(\u6700\u8fd1\u516c\u5171\u7956\u5148)}$$\n\n$\\quad$\u56e0\u4e3a\u8fd9\u9898\u6211\u4eec\u80af\u5b9a\u7528\u6811\u94fe\u5256\u5206\u89e3\u9898\uff0c\u6240\u4ee5\u5bf9\u4e8e\u539f\u56fe( $root==1$ )\u7684\u60c5\u51b5\u4e0b $LCA$ \u7684\u6c42\u6cd5\u80af\u5b9a\u662f\u4f7f\u7528\u6811\u94fe\u5256\u5206\u7684(~~\u5f53\u7136\u5982\u679c\u8bfb\u8005\u613f\u610f\u4e13\u95e8\u6253\u4e2a\u500d\u589e\uff0c\u90a3\u4e48\u4f60\u4eec\u968f\u610f~~)\n\n$\\quad$**\u6ce8\u610f\uff1a(\u5c0f\u5199) $lca(x,y)$ \u8868\u793a\u5728\u4ee51\u4e3a\u6839\u7684\u6811\u4e2d $x$ \u548c $y$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c(\u5927\u5199) $LCA(x,y)$ \u8868\u793a\u5728\u4ee5 $root$ \u4e3a\u6839\u7684\u6811\u4e2d $x$ \u548c $y$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002**\n\n```cpp\nil int lca(int x,int y) //\u6a21\u677f\u6811\u94fe\u5256\u5206\u6c42LCA\n{\n  int fx=top[x],fy=top[y];\n  while(fx!=fy)\n    {\n      if(dep[fx]<dep[fy])swap(x,y),swap(fx,fy);\n      x=father[fx];fx=top[x];\n    }\n  if(dep[x]>dep[y])swap(x,y);\n  return x;\n}\n```\n\n$\\quad$\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u5bf9 $root$ \u7684\u4f4d\u7f6e\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u4e86\uff0c\u4ee3\u7801\u5148\u8d34\u51fa\u6765\u7ed9\u4f60\u4eec\u770b\u770b\u3002\n\n```cpp\nil int LCA(int x,int y)\n{\n  if(dep[x]>dep[y])swap(x,y);\n  int xr=lca(x,root),yr=lca(y,root),xy=lca(x,y);\n  if(xy==x)\n  {\n  \tif(xr==x){if(yr==y)return y;return yr;}\n  \treturn x;\n  }\n  if(xr==x)return x;if(yr==y)return y;\n  if((xr==root&&xy==yr)||(yr==root&&xy==xr))return root;\n  if(xr==yr)return xy;\n  if(xy!=xr)return xr;return yr;\n}\n```\n\n$\\quad$\u53e6\u5916\u6211\u4eec\u53ef\u4ee5\u518d\u753b\u51e0\u5f20\u56fe\u6765\u65b9\u4fbf\u7406\u89e3\u3002\n\n \u4e00.\u5f53 $lca(x,y)==x$ (\u53ef\u4ee5\u5148\u6309\u6df1\u5ea6\u8c03\u5e8f\uff0c $dep[x]<=dep[y]$)\n \n   ![](https://cdn.luogu.com.cn/upload/image_hosting/hk78elxs.png)\n$\\quad$ $1$. \u60c5\u51b5 $1$ \uff1a$root$ \u5728 $x$ \u7684\u5b50\u6811\u4e2d\uff0c\u4e5f\u5728 $y$ \u7684\u5b50\u6811\u4e2d\uff0c\u5373 $lca(x,root)==x$ && $lca(y,root)==y$ \uff0c\u6b64\u65f6 $LCA(x,y)$ \u662f $y$ \uff0c\u56e0\u4e3a\u56fe\u8981\u53cd\u8fc7\u6765\u770b(\u4ee5 $root$ \u4e3a\u6839)\n\n$\\quad$ $2$. \u60c5\u51b5 $2$ \uff1a $root$ \u5728 $x$ \u7684\u5b50\u6811\u4e2d\uff0c\u4f46\u4e0d\u5728 $y$ \u7684\u5b50\u6811\u4e2d\uff0c\u5373 $lca(x,root)$ \uff0c\u6b64\u65f6 $LCA(x,y)$ \u662f $lca(y,root)$\u3002\n\n$\\quad$ $3$. \u60c5\u51b5 $3$ \uff1a\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c $LCA(x,y)$ \u5c31\u662f $x$ \u3002\n\n\u4e8c.\u5f53 $lca(x,y)!=x$ (\u56e0\u4e3a $dep[x]<=dep[y]$\uff0c\u6240\u4ee5 $lca(x,y)!=y$ \uff0c $x$ , $y$ \u5728\u4e0d\u540c\u5b50\u6811\u4e0a)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jg4eo3ji.png)\n\n$\\quad$ 1. \u60c5\u51b51\uff1a( $lca(x,root)==x$ )||( $lca(x,root)==x$ ),root\u5728x(\u6216y)\u7684\u5b50\u6811\u4e2d\u65f6\uff0c $LCA(x,y)$ \u4e3a $x$ (\u6216 $y$ )\uff0c\u663e\u7136\u3002\n\n$\\quad$ 2. \u60c5\u51b52\uff1a( $lca(x,root)==root$ && $lca(x,y)==lca(y,root)$ )||( $lca(y,root)==root$ && $lca(x,y)==lca(x,root)$)\uff0c\u5373 $root$ \u5728 $x$ \u5230 $y$ \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u65f6\uff0c\u7b54\u6848\u4e3a $root$ \u3002(\u4e5f\u53ef\u4ee5\u7528\u6df1\u5ea6\u5224\u65ad\uff0c ( $lca(x,root)===root$ && $dep[root]>=dep[lca(x,y)]$ )||( $lca(y,root)==root$ && $dep[root]>=dep[lca(x,y)]$ ))\n\n$\\quad$ 3. \u60c5\u51b53\uff1a $lca(x,root)==lca(y,root)$ \uff0c\u5373 $root$ \u5728\u4e0a\u65b9\u65f6\uff0c$LCA(x,y)$ \u4e3a $lca(x,y)$ \u3002\n\n$\\quad$ 4. \u60c5\u51b54\uff1a\u5f53 $root$ \u5728$x$\uff0c$y$ \u7684\u94fe\u4e0a\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u65f6\uff0c $LCA(x,y)$ \u4e3a\u90a3\u4e2a\u94fe\u4e0a\u8282\u70b9\u3002\n\n$\\quad$\u8fd9\u6837\u5c31\u628a\u6811\u4e0a\u6240\u6709 $root$ \u4f4d\u7f6e\u7684\u60c5\u51b5\u90fd\u8003\u8651\u5230\u4e86\uff0c\u4e0d\u91cd\u4e0d\u6f0f\u3002\n\n$$\\text{\u5b50\u6811\u4fee\u6539(\u67e5\u8be2)}$$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4ar4m3w5.png)\n\n$\\quad$ \u60c5\u51b5 $1$ \uff1a\u5f53 $x=root$ \u65f6\uff0c $x$ \u5c31\u662f\u6b64\u65f6\u6574\u68f5\u6811\u7684\u6839\uff0c\u90a3\u4e48\u5c31\u662f\u5168\u5c40\u4fee\u6539(\u67e5\u8be2)\u3002\n\n$\\quad$ \u60c5\u51b5 $2$ \uff1a\u5f53 $root$ \u5728x\u5b50\u6811\u4e2d\u65f6\uff0c\u5c31\u9700\u8981\u7279\u522b\u5224\u65ad\u4e86\uff0c\u6839\u636e\u56fe\u50cf\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6b64\u65f6x\u7684\u771f\u6b63\u5b50\u6811\u662f\u5305\u62ec\u9664\u4e86 $root$ \u65b9\u5411\u4e0a\u7684\u5b50\u6811\u4e4b\u5916\u5176\u4ed6\u6240\u6709\u8282\u70b9\u3002\n\n$\\quad$ \u60c5\u51b5 $3$ \uff1a\u5176\u4ed6\u60c5\u51b5\u4e0b $x$ \u7684\u5b50\u6811\u4ee5 $root$ \u4e3a\u6839\u548c\u4ee5 $1$ \u4e3a\u6839\u662f\u4e00\u6837\u7684\u3002\n\n```cpp\nil int find(int x,int y)//\u5bfb\u627ex\u4e2droot\u6240\u5728\u7684\u513f\u5b50\u8282\u70b9\n{\n  int fx=top[x],fy=top[y];\n  while(fx!=fy)\n    {\n      if(dep[fx]<dep[fy])swap(x,y),swap(fx,fy);\n      if(father[fx]==y)return top[x];\n      x=father[fx];fx=top[x];\n    }\n  if(dep[x]>dep[y])swap(x,y);\n  return son[x];\n}\nil int query1(int x)\n{\n  int res=0;\n  if(x==root){return query(1,1,n,1,n);}\n  if(seg[root]>=seg[x]&&seg[root]<=seg[x]+size[x]-1){//\u5224\u65adroot\u5728x\u7684\u5b50\u6811\u4e2d\n    res+=query(1,1,n,1,n);int y=find(x,root);\n    res-=query(1,1,n,seg[y],seg[y]+size[y]-1);\n    return res;\n  }\n  return query(1,1,n,seg[x],seg[x]+size[x]-1);\n}\n```\n\n$$\\text{\u5b8c\u6574\u4ee3\u7801}$$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<stack>\nusing namespace std;\n#define int long long\n#define next neee\n#define re register int\n#define il inline\n#define inf 1e18\nil int read(){\n\tint x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n    return x*f;}\nil void print(int x)\n{\n\tif(x<0)putchar('-'),x=-x;\n    if(x/10)print(x/10);\n    putchar(x%10+'0');}\nconst int N=2e5+5;\nint n,m,next[N<<1],go[N<<1],head[N],tot,a[N],top[N],root;\nint sum[N<<2],seg[N],rev[N],son[N],size[N],dep[N],father[N],c[N<<2];\nil void Add(int x,int y)\n{next[++tot]=head[x];head[x]=tot;go[tot]=y;}\nil void dfs1(int x,int fa)\n{\n  father[x]=fa;dep[x]=dep[fa]+1;size[x]=1;\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==fa)continue;\n      dfs1(y,x);\n      size[x]+=size[y];\n      if(size[y]>size[son[x]])son[x]=y;\n    }\n}\nil void dfs2(int x,int topf)\n{\n  top[x]=topf;seg[x]=++seg[0];rev[seg[x]]=x;\n  if(!son[x])return;\n  dfs2(son[x],topf);\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(top[y])continue;\n      dfs2(y,y);\n    }\n}\nil void build(int k,int l,int r)\n{\n  if(l==r){sum[k]=a[rev[l]];return;}\n  int mid=l+r>>1;\n  build(k<<1,l,mid);build(k<<1|1,mid+1,r);\n  sum[k]=sum[k<<1]+sum[k<<1|1];\n}\nil void ADD(int k,int l,int r,int v)\n{sum[k]+=(r-l+1)*v;c[k]+=v;}\nil void pushdown(int k,int l,int r,int mid)\n{\n  if(l==r){c[k]=0;return;}\n  ADD(k<<1,l,mid,c[k]);ADD(k<<1|1,mid+1,r,c[k]);\n  c[k]=0;}\nil void change1(int k,int l,int r,int x,int y,int z)\n{\n  if(x<=l&&y>=r){ADD(k,l,r,z);return;}\n  int mid=l+r>>1;\n  if(c[k])pushdown(k,l,r,mid);\n  if(x<=mid)change1(k<<1,l,mid,x,y,z);\n  if(y>mid)change1(k<<1|1,mid+1,r,x,y,z);\n  sum[k]=sum[k<<1]+sum[k<<1|1];\n}\nil int query(int k,int l,int r,int x,int y)\n{\n  if(x<=l&&y>=r)return sum[k];\n  int mid=l+r>>1,res=0;\n  if(c[k])pushdown(k,l,r,mid);\n  if(x<=mid)res+=query(k<<1,l,mid,x,y);\n  if(y>mid)res+=query(k<<1|1,mid+1,r,x,y);\n  return res;\n}\nil int lca(int x,int y)\n{\n  int fx=top[x],fy=top[y];\n  while(fx!=fy)\n    {\n      if(dep[fx]<dep[fy])swap(x,y),swap(fx,fy);\n      x=father[fx];fx=top[x];\n    }\n  if(dep[x]>dep[y])swap(x,y);\n  return x;\n}\nil int LCA(int x,int y)\n{\n  if(dep[x]>dep[y])swap(x,y);\n  int xr=lca(x,root),yr=lca(y,root),xy=lca(x,y);\n  if(xy==x){if(xr==x){if(yr==y)return y;return yr;}return x;}\n  if(xr==x)return x;if(yr==y)return y;\n  if((xr==root&&xy==yr)||(yr==root&&xy==xr))return root;if(xr==yr)return xy;\n  if(xy!=xr)return xr;return yr;\n}\nil int find(int x,int y)//\u5bfb\u627ex\u4e2droot\u6240\u5728\u7684\u513f\u5b50\u8282\u70b9\n{\n  int fx=top[x],fy=top[y];\n  while(fx!=fy)\n    {\n      if(dep[fx]<dep[fy])swap(x,y),swap(fx,fy);\n      if(father[fx]==y)return top[x];\n      x=father[fx];fx=top[x];\n    }\n  if(dep[x]>dep[y])swap(x,y);\n  return son[x];\n}\nil void change2(int x,int z)\n{\n  if(x==root){change1(1,1,n,1,n,z);return;}\n  if(seg[root]>=seg[x]&&seg[root]<=seg[x]+size[x]-1){//\u5224\u65adroot\u5728x\u7684\u5b50\u6811\u4e2d\n    change1(1,1,n,1,n,z);int y=find(x,root);\n    change1(1,1,n,seg[y],seg[y]+size[y]-1,-z);\n  }\n  else change1(1,1,n,seg[x],seg[x]+size[x]-1,z);\n}\nil int query1(int x)\n{\n  int res=0;\n  if(x==root){return query(1,1,n,1,n);}\n  if(seg[root]>=seg[x]&&seg[root]<=seg[x]+size[x]-1){//\u5224\u65adroot\u5728x\u7684\u5b50\u6811\u4e2d\n    res+=query(1,1,n,1,n);int y=find(x,root);\n    res-=query(1,1,n,seg[y],seg[y]+size[y]-1);\n    return res;\n  }\n  return query(1,1,n,seg[x],seg[x]+size[x]-1);\n}\nsigned main()\n{\n  n=read();m=read();\n  for(re i=1;i<=n;i++)a[i]=read();\n  for(re i=1;i<n;i++){re x=read(),y=read();Add(x,y);Add(y,x);}\n  root=1;dfs1(1,0);dfs2(1,1);build(1,1,n);\n  while(m--)\n    {\n      re k=read();\n      if(k==1)root=read();\n      if(k==2){re x=read(),y=read(),z=read();change2(LCA(x,y),z);}\n      if(k==3){re x=read();print(query1(x));putchar('\\n');}\n    }\n  return 0;\n}\n```\n$\\quad$\u7801\u9898\u89e3\u4e0d\u6613\uff0c\u5982\u679c\u89c9\u5f97\u4e0d\u9519\uff0c\u4e0d\u59a8\u70b9\u4e2a\u8d5e\u5457\uff01",
        "postTime": 1604496965,
        "uid": 109220,
        "name": "Farkas_W",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF916E \u3010Jamie and Tree\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u5982\u679c\u6ca1\u6709\u7b2c\u4e00\u4e2a\u64cd\u4f5c\uff0c\u90a3\u8fd9\u5c31\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811+LCA\u3002\u5176\u5b9e\u7b2c\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5e76\u4e0d\u9700\u8981\u771f\u7684\u53bb\u65cb\u8f6c\u6839(\u4e00\u76f4\u90fd\u4ee51\u4e3a\u6839)\uff0c\u53ea\u9700\u8981\u5728\u4fee\u6539\u548c\u67e5\u8be2\u7684\u65f6\u5019\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\u5373\u53ef\u3002\u5982\u679c\u65b0\u7684\u6811\u6839\u6ca1\u6709\u5728\u5f53\u524d\u64cd\u4f5c\u7684\u5b50\u6811\u4e2d\u5c31\u4e0d\u7528\u7ba1\u5b83\uff0c\u5982\u679c\u65b0\u7684\u6811\u6839\u6b63\u597d\u5c31\u662f\u5f53\u524d\u5b50\u6811\uff0c\u5c31\u76f4\u63a5\u64cd\u4f5c\u6574\u68f5\u6811\u3002\u5982\u679c\u65b0\u7684\u6811\u6839\u5728\u5b50\u6811\u91cc\uff0c\u5c31\u5229\u7528\u5bb9\u65a5\u539f\u7406\uff0c\u5148\u64cd\u4f5c\u6574\u68f5\u6811\uff0c\u518d\u628a\u591a\u4f59\u7684\u90e8\u5206\u6392\u9664\u6389\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u6ce8\u91ca\u3002\n\n~~150\u884c\u5de5\u4e1a\u4ee3\u7801~~\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<vector>\n#define maxn 100010\nusing namespace std;\ntypedef long long LL;\nvector<int> g[maxn];\nstruct node{\n\tLL w,tag;\n}A[maxn*4];\nint n,q,root=1,dfn=0;\nint w[maxn],d[maxn],fa[maxn][22],to[maxn],rk[maxn],L[maxn],R[maxn];\n//\u7ebf\u6bb5\u6811\u677f\u5b50\n#define ls (rt<<1)\n#define rs (rt<<1|1)\nvoid push_up(int rt){\n\tA[rt].w=A[ls].w+A[rs].w;\n}\nvoid push_down(int rt,int l,int r){\n\tA[ls].tag+=A[rt].tag;\n\tA[rs].tag+=A[rt].tag;\n\tA[rt].w+=A[rt].tag*(LL)(r-l+1);\n\tA[rt].tag=0;\n}\nvoid build(int rt,int l,int r){\n\tif (l==r){\n\t\tA[rt].w=w[rk[l]];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\tpush_up(rt);\n}\n//dfs\u4e00\u904d\u9884\u5904\u7406\nvoid dfs(int now,int f){\n\t//to[]:\u6811->\u7ebf\u6bb5\u6811 rk[]:\u7ebf\u6bb5\u6811->\u6811\n\tto[now]=++dfn; rk[dfn]=now;\n\td[now]=d[f]+1; fa[now][0]=f;\n\tfor (int i=1;i<=20;i++)\n\t\tfa[now][i]=fa[fa[now][i-1]][i-1];\n\tL[now]=R[now]=to[now];\n\tfor (int i=0;i<g[now].size();i++){\n\t\tint son=g[now][i];\n\t\tif (son!=f){\n\t\t\tdfs(son,now);\n\t\t\tL[now]=min(L[now],L[son]);\n\t\t\tR[now]=max(R[now],R[son]);\n\t\t}\n\t}\n}\n//LCA\u677f\u5b50\nvoid jump(int &x,int c){\t//x\u70b9\u5728\u6811\u4e0a\u5411\u4e0a\u8df3c\u5c42\n\tfor (int i=0;i<=20;i++){\n\t\tif (c&1) x=fa[x][i];\n\t\tc>>=1;\n\t}\n}\nint lca(int x,int y){\n\tif (d[x]<d[y]) swap(x,y);\n\tjump(x,d[x]-d[y]);\n\tif (x==y) return x;\n\tfor (int i=20;i>=0;i--)\n\t\tif (fa[x][i]!=fa[y][i]){\n\t\t\tx=fa[x][i];\n\t\t\ty=fa[y][i];\n\t\t}\n\treturn fa[x][0];\n}\nint check_son(int u,int v){\n\tif (lca(u,v)==u) return 1;\n\treturn 0;\n}\n//\u7ebf\u6bb5\u6811\u677f\u5b50\nvoid change(int rt,int l,int r,int L,int R,int x){\n\tif (l>=L && r<=R){\n\t\tA[rt].tag+=x;\n\t\tLL tmp=x*(LL)(r-l+1);\n\t\twhile (rt){\n\t\t\trt>>=1;\n\t\t\tA[rt].w+=tmp;\n\t\t}\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif (L<=mid) change(ls,l,mid,L,R,x);\n\tif (R>mid) change(rs,mid+1,r,L,R,x);\n}\nLL query(int rt,int l,int r,int L,int R){\n\tif (l>=L && r<=R) return A[rt].w+A[rt].tag*(LL)(r-l+1);\n\tint mid=(l+r)>>1;\n\tLL sum=0;\n\tpush_down(rt,l,r);\n\tif (L<=mid) sum+=query(ls,l,mid,L,R);\n\tif (R>mid) sum+=query(rs,mid+1,r,L,R);\n\treturn sum;\n}\n//3\u4e2a\u64cd\u4f5c\nvoid Change_root(int v){\n\troot=v;\n}\nvoid Change(int u,int v,int x){\n\tint now=lca(u,v);\n\tif (!check_son(now,root)){\n\t\tchange(1,1,n,L[now],R[now],x);\n\t\treturn;\n\t}\n\tchange(1,1,n,1,n,x);\n\tint a=lca(root,u),b=lca(root,v);\n\tif (d[a]>d[b]) u=a;\n\telse u=b;\n\tv=root;\n\tif (u==v) return;\n\tjump(v,d[v]-d[u]-1);\n\tchange(1,1,n,L[v],R[v],-x);\n}\nLL Query(int v){\n\tif (!check_son(v,root)) return query(1,1,n,L[v],R[v]);\n\tint u=root;\n\tif (u==v) return query(1,1,n,1,n);\n\tjump(u,d[u]-d[v]-1);\n\treturn query(1,1,n,1,n)-query(1,1,n,L[u],R[u]);\n}\nint main(){\n#ifdef xunzhen\n\tfreopen(\"E.in\",\"r\",stdin);\n\tfreopen(\"E.out\",\"w\",stdout);\n#endif\n\tcin>>n>>q;\n\tfor (int i=1;i<=n;i++) scanf(\"%d\",&w[i]);\n\tfor (int i=1;i<n;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tg[x].push_back(y);\n\t\tg[y].push_back(x);\n\t}\n\tdfs(1,0);\n\tbuild(1,1,n);\n\tfor (int i=1;i<=q;i++){\n\t\tint k,u,v,x;\n\t\tscanf(\"%d\",&k);\n\t\tif (k==1){\n\t\t\tscanf(\"%d\",&v);\n\t\t\tChange_root(v);\n\t\t}\n\t\tif (k==2){\n\t\t\tscanf(\"%d%d%d\",&u,&v,&x);\n\t\t\tChange(u,v,x);\n\t\t}\n\t\tif (k==3){\n\t\t\tscanf(\"%d\",&v);\n\t\t\tprintf(\"%I64d\\n\",Query(v));\t//CF\u4e0a\u8981\u7528I64d\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1517630343,
        "uid": 9612,
        "name": "xunzhen",
        "ccfLevel": 0,
        "title": "CF916E Jamie and Tree"
    },
    {
        "content": "\u5982\u679c\u6ca1\u6709\u6362\u6839\u64cd\u4f5c\uff0c\u8fd9\u9053\u9898\u5c31\u662f\u4e00\u9053\u88f8\u7684dfs\u5e8f+\u7ebf\u6bb5\u6811\n\n\u4f46\u662f\uff0c\u51fa\u9898\u4eba\u7ed9\u6211\u4eec\u52a0\u4e86\u4e00\u4e2a\u6362\u6839\u64cd\u4f5c\n\n\u597d\u4e86\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u6bcf\u6b21\u90fd\u91cd\u6784\u6811\uff0c\u592a\u6d6a\u8d39\u65f6\u95f4\u4e86\n\n\u6211\u4eec\u5c31\u4ee51\u4e3a\u6839\uff0c\u6765\u5206\u7c7b\u8ba8\u8bba\n\n\u7b2c\u4e00\uff0cR\u5728u\u7684\u5b50\u6811\u5185\uff0c\u5982\u56fe\uff1a\n\n![\u65e0\u6807\u9898.png](https://i.loli.net/2019/08/20/FEaTvWsjX4mbSgH.png)\n\n\u6b64\u65f6\u8981\u4fee\u6539\uff08\u67e5\u8be2\uff09\u7684\u70b9\u5c31\u662f\u7ea2\u8272\u7684\u70b9\u548cU\uff08\u6240\u6709\u70b9\u9664\u53bbR\u6240\u5728\u7684\u5b50\u6811\uff09\n\n\u7b2c\u4e8c\uff0cu\u5728R\u7684\u5b50\u6811\u5185\uff0c\u5982\u56fe\uff1a\n\n![\u65e0\u6807\u98982.png](https://i.loli.net/2019/08/20/lrQIjMYaqWZ7oR1.png)\n \n\u6b64\u65f6\u8981\u4fee\u6539\uff08\u67e5\u8be2\uff09\u7684\u70b9\u5c31\u662f\u84dd\u8272\u7684\u70b9\u548cU\uff08U\u6240\u5728\u7684\u5b50\u6811\uff09\n\n\u7b2c\u4e09\uff0c\u5982\u679cu\u5c31\u662fR\uff0c\u6613\u5f97\u51fa\u8981\u4fee\u6539\uff08\u67e5\u8be2\uff09\u7684\u5c31\u662f\u6574\u9897\u6811\n\n\u91cd\u70b9\u662f\u5982\u4f55\u901a\u8fc7u\uff0cv\u6c42U\uff1f\n\n\u4f9d\u7136\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n\u5982\u679cu\uff0cv\u5206\u5c45R\u7684\u4e0a\u4e0b\u4e24\u4fa7\uff0c\u5219U\u5c31\u662fR\n\n\u5982\u679c\u540c\u5c45\u4e0b\u4fa7\u6216\u4e0a\u4fa7\uff0c\u5219U\u4e3alca(u,v)\n\n\u603b\u7ed3\u5f97\u5230\uff1aU\u4e3alca(u,v)\uff0clca(u,R)\uff0clca(v,R)\u4e2d\u6700\u6df1\u7684\u4e00\u4e2a\n\ncode\uff1a\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#define N 100010\n#define ll long long\n#define lson id<<1,l,m\n#define rson id<<1|1,m+1,r\nusing namespace std;\nll root=1,n,L[N],R[N],q,dep[N];\nll head[N],tot,cnt,p[N][25],dfn[N];\nll s[N<<2],lzy[N<<2],len[N<<2],f[N];\nstruct node{\n\tll v;\n\tll nxt;\n}e[N<<1];\nvoid add(ll u,ll v)\n{\n\te[++cnt].v=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nvoid dfs(ll u,ll fa)\n{\n\tL[u]=++tot;\n\tdfn[tot]=u;\n\tdep[u]=dep[fa]+1;\n\tp[u][0]=fa;\n\tfor(ll i=1;i<=20;i++)\n\tp[u][i]=p[p[u][i-1]][i-1];\n\tfor(ll i=head[u];i;i=e[i].nxt)\n\t{\n\t\tll v=e[i].v;\n\t\tif(v==fa)\n\t\tcontinue;\n\t\tdfs(v,u);\n\t}\n\tR[u]=tot;\n}\nll lca(ll u,ll v)\n{\n\tif(dep[u]>dep[v])\n\tswap(u,v);\n\tfor(ll i=20;i>=0;i--)\n\tif(dep[u]<=dep[v]-(1<<i))\n\tv=p[v][i];\n\tif(u==v)\n\treturn u;\n\tfor(ll i=20;i>=0;i--)\n\t{\n\t\tif(p[u][i]==p[v][i])\n\t\tcontinue;\n\t\tu=p[u][i];\n\t\tv=p[v][i];\n\t}\n\treturn p[u][0];\n}\nll jumping(ll u,ll step)\n{\n\tfor(ll i=0;i<=20;i++)\n\tif(step&(1<<i))\n\tu=p[u][i];\n\treturn u;\n}\nll lcaa(ll a,ll b,ll c)\n{\n\tll p1=lca(a,b),p2=lca(b,c),p3=lca(a,c);\n\tif(dep[p1]<dep[p2])\n\tp1=p2;\n\tif(dep[p1]<dep[p3])\n\tp1=p3;\n\treturn p1;\n}\nvoid pushup(ll id)\n{\n\ts[id]=s[id<<1]+s[id<<1|1];\n}\nvoid pushdown(ll id)\n{\n\tif(lzy[id])\n\t{\n\t\tlzy[id<<1]+=lzy[id];\n\t\tlzy[id<<1|1]+=lzy[id];\n\t\ts[id<<1]+=lzy[id]*len[id<<1];\n\t\ts[id<<1|1]+=lzy[id]*len[id<<1|1];\n\t\tlzy[id]=0;\n\t}\n}\nvoid build(ll id,ll l,ll r)\n{\n\tlen[id]=r-l+1;\n\tif(l==r)\n\t{\n\t\ts[id]=f[dfn[l]];\n\t\treturn;\n\t}\n\tll m=(l+r)>>1;\n\tbuild(lson);\n\tbuild(rson);\n\tpushup(id);\n}\nvoid update(ll id,ll l,ll r,ll x,ll y,ll z)\n{\n\tif(x<=l&&r<=y)\n\t{\n\t\ts[id]+=len[id]*z;\n\t\tlzy[id]+=z;\n\t\treturn;\n\t}\n\tpushdown(id);\n\tll m=(l+r)>>1;\n\tif(x<=m)\n\tupdate(lson,x,y,z);\n\tif(y>m)\n\tupdate(rson,x,y,z);\n\tpushup(id);\n}\nll query(ll id,ll l,ll r,ll x,ll y)\n{\n\tif(x<=l&&r<=y)\n\treturn s[id];\n\tpushdown(id);\n\tll m=(l+r)>>1;\n\tll ans=0;\n\tif(x<=m)\n\tans+=query(lson,x,y);\n\tif(y>m)\n\tans+=query(rson,x,y);\n\treturn ans;\n}\nint main()\n{\n\tscanf(\"%lld%lld\",&n,&q);\n\tfor(ll i=1;i<=n;i++)\n\tscanf(\"%lld\",&f[i]);\n\tfor(ll i=1;i<n;i++)\n\t{\n\t\tll u,v;\n\t\tscanf(\"%lld%lld\",&u,&v);\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\tdfs(1,0);\n\tbuild(1,1,n);\n\twhile(q--)\n\t{\n\t\tll op,v,u,x;\n\t\tscanf(\"%lld\",&op);\n\t\tif(op==1)\n\t\tscanf(\"%lld\",&root);\n\t\tif(op==2)\n\t\t{\n\t\t\tscanf(\"%lld%lld%lld\",&u,&v,&x);\n\t\t\tll k=lcaa(u,v,root);\n\t\t\tif(k==root)\n\t\t\tupdate(1,1,n,1,n,x);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(L[root]<L[k]||L[root]>R[k])\n\t\t\t\tupdate(1,1,n,L[k],R[k],x);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tll t=jumping(root,dep[root]-dep[k]-1);\n\t\t\t\t\tupdate(1,1,n,1,n,x);\n\t\t\t\t\tupdate(1,1,n,L[t],R[t],-x);\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t\tif(op==3)\n\t\t{\n\t\t\tll ans=0;\n\t\t\tscanf(\"%lld\",&v);\n\t\t\tif(v==root)\n\t\t\tans=query(1,1,n,1,n);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(L[root]<L[v]||L[root]>R[v])\n\t\t\t\tans=query(1,1,n,L[v],R[v]);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tll t=jumping(root,dep[root]-dep[v]-1);\n\t\t\t\t\tans+=query(1,1,n,1,n);\n\t\t\t\t\tans-=query(1,1,n,L[t],R[t]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1566288776,
        "uid": 103029,
        "name": "James_Brady",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF916E \u3010Jamie and Tree\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n\u6709\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6709\u6839\u6811\uff0c\u6807\u53f7\u4e3a $1-n$\uff0c\u4f60\u9700\u8981\u7ef4\u62a4\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\n\n1. \u7ed9\u4e00\u4e2a\u70b9 $v$ \uff0c\u5c06\u6574\u9897\u6811\u7684\u6839\u53d8\u4e3a $v$\u3002\n  \n2. \u7ed9\u4e24\u4e2a\u70b9 $u,v$\uff0c\u5c06 $lca(u,v)$ \u6240\u5728\u7684\u5b50\u6811\u90fd\u52a0\u4e0a $x$\u3002\n  \n3. \u7ed9\u4e00\u4e2a\u70b9 $v$\uff0c\u95ee\u4ee5 $v$ \u6240\u5728\u7684\u5b50\u6811\u7684\u6743\u503c\u548c\u3002\n  \n\n### \u5206\u6790\n\n\u6362\u6839\u6811\u5256\u677f\u5b50\u9898\u3002\u8bbe\u5f53\u524d\u6839\u4e3a $rt$ \uff0c\u6709\u51e0\u79cd\u7b80\u5355\u64cd\u4f5c\uff1a\n\n#### \u6362\u6839\u540e LCA\n\n\u76f4\u63a5\u5206\u8ba8\u5373\u53ef\u3002\n\n```cpp\nint LCA(int x,int y)\n{\n    if(dep[x]>dep[y]) swap(x,y);\n    int xr=lca(x,rt),yr=lca(y,rt),xy=lca(x,y);\n    if(xy==x) \n    {\n        if(xr==x){if(yr==y) return y;return yr;}\n        return x;\n    }\n    if(xr==x) return x;if(yr==y) return y;\n    if((xr==rt&&xy==yr)||(yr==rt&&xy==xr)) return rt;\n    if(xr==yr) return xy;\n    if(xy!=xr) return xr;return yr;\n}\n```\n\n#### \u6362\u6839\u540e\u5b50\u6811\u4fee\u6539\n\n\u5206\u51e0\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n1. $u$ \u662f $rt$\n  \n  \u6b64\u65f6\u76f4\u63a5\u628a\u6240\u6709\u70b9\u6743\u90fd\u52a0\u4e0a $x$ \u3002\n  \n2. $u$ \u4e0d\u662f $rt$ \u7684\u7956\u5148\n  \n  ![](https://cdn.luogu.com.cn/upload/image_hosting/0mlianm4.png)\n  \n  \u6b64\u65f6\u60c5\u51b5\u5982\u56fe\u6240\u793a\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u65e0\u8bba $u$ \u5728\u54ea\uff0c$u$ \u7684\u5b50\u6811\u90fd\u4e0d\u53d8\u3002\n  \n3. $u$ \u662f $rt$ \u7684\u7956\u5148\n  \n  ![](https://cdn.luogu.com.cn/upload/image_hosting/a4ojf8qr.png)\n  \n  \u6b64\u65f6\u60c5\u51b5\u5982\u56fe\u6240\u793a\uff0c\u8bbe $v$ \u4e3a\u662f $rt$ \u7956\u5148\u7684 $u$ \u7684\u5b50\u8282\u70b9\uff0c\u8981\u60f3\u5f97\u5230 $v$ \uff0c\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u628a $rt$ \u5411\u4e0a\u8df3\u91cd\u94fe\uff0c\u76f4\u5230\u8df3\u5230 $u$ \u7684\u5b50\u8282\u70b9\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u52a0\u7684\u90e8\u5206\u76f8\u5f53\u4e8e\u6574\u68f5\u6811\u5228\u6389 $v$ \u7684\u5b50\u6811\uff0c\u7531\u4e8e\u6811\u5256\u4e4b\u540e\u5b50\u6811\u5185\u8282\u70b9\u7f16\u53f7\u8fde\u7eed\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\uff0c\u6bcf\u6b21\u4fee\u6539 $[1,id_v) \\bigcup (id_v,n]$\u3002\n  \n\n\u6b64\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nint get(int x,int y)\n{\n    int fx=top[x],fy=top[y];\n    while(top[x]!=top[y])\n    {\n        if(dep[fx]<dep[fy]) swap(fx,fy),swap(x,y); //\u8df3\u91cd\u94fe\u9876\u6df1\u5ea6\u66f4\u6df1\u7684\n        if(fa[fx]==y) return fx; //\u5df2\u7ecf\u627e\u5230\u4e86\n        x=fa[fx],fx=top[x];\n    }\n    if(dep[x]>dep[y]) swap(x,y);\n    return hson[x];\n}\nvoid update_subtree(int u,int k)\n{\n    if(u==rt) update(1,1,n,1,n,k); //\u5bf9\u5e94\u60c5\u51b51\n    else if(lca(u,rt)!=u) update(1,1,n,id[u],id[u]+cnt[u]-1,k); //\u60c5\u51b52\n    else //\u60c5\u51b53\n    {\n        int v=get(u,rt);\n        if(id[v]-1>=1) update(1,1,n,1,id[v]-1,k);\n        if(id[v]+cnt[v]<=n) update(1,1,n,id[v]+cnt[v],n,k);\n    }\n}\n```\n\n#### \u6362\u6839\u540e\u5b50\u6811\u6c42\u548c\n\n\u539f\u7406\u548c\u5b50\u6811\u4fee\u6539\u76f8\u540c\u3002\n\n```cpp\nint query_subtree(int u)\n{\n    int res=0;\n    if(u==rt) res=query(1,1,n,1,n);\n    else if(lca(u,rt)!=u) res=query(1,1,n,id[u],id[u]+cnt[u]-1);\n    else\n    {\n        int v=get(u,rt);\n        if(id[v]-1>=1) res+=query(1,1,n,1,id[v]-1);\n        if(id[v]+cnt[v]<=n) res+=query(1,1,n,id[v]+cnt[v],n);\n    }\n    return res;\n}\n```\n\n### \u5b8c\u6574\u4ee3\u7801\n\n[Submission #153363241 - Codeforces](https://codeforces.com/problemset/submission/916/153363241)",
        "postTime": 1649673277,
        "uid": 225991,
        "name": "_lxy_",
        "ccfLevel": 6,
        "title": "CF916E Jamie and Tree \u9898\u89e3"
    },
    {
        "content": "#### update:satt\u627elca\u7684non-local search\u505a\u6cd5\u672c\u4eba\u5df2\u5b9e\u73b0\uff0c\u8bb2\u89e3\u5728\u4e0b\u9762\n\u9898\u610f:\n\n1.\u6362\u6839\n\n2.\u627elca\u5e76\u5c06\u5176\u5b50\u6811\u52a0\n\n3.\u5b50\u6811\u6c42\u548c\n\n\u663e\u7136\u4f60\u53ef\u4ee5\u53bbdfs\u5e8f\u7ebf\u6bb5\u6811\u4ec0\u4e48\u7684\u968f\u4fbf\u641e\uff0c\u4f46\u662f\u592a\u4f4e\u7ea7\u4e86\n\n\u6362\u6839\u4f7f\u4eba\u60f3\u5230\u4e86lct\uff0c\u7136\u540e\u770b\u5230\u5b50\u6811\u52a0\u4f7f\u4eba\u653e\u5f03\n\n\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230\u4e00\u4e2a\u52a8\u6001\u6811\u6570\u636e\u7ed3\u6784:toptree\n\n\u5e76\u4e0d\u662f\u9b54\u6539lca(aaa\u6811)\uff0c\u662f\u771f\u6b63\u7684toptree\n\n\u91c7\u7528tarjan\u7684self-adjusting\u5b9e\u73b0\n\n\u53ef\u4ee5\u53bb[negiizhao\u535a\u5ba2](http://negiizhao.blog.uoj.ac/blog/4912)\u91cc\u5b66\n\n\u52a8\u6001\u627elca\u9700\u8981\u7528non-local search\n\n\u7531\u4e8e\u672c\u4eba\u6bd4\u8f83\u83dc\u8fd8\u4e0d\u4f1a\u5b9e\u73b0non-local search\n\n\u4e8e\u662f\u6211\u5c31\u53e6\u5916\u5199\u4e86\u4e00\u4e2alct\u5b9e\u73b0\u52a8\u6001kca\n\n\u5177\u4f53\u5982\u4f55\u5b9e\u73b0\u6709[\u9898](https://www.luogu.com.cn/problem/SP8791)\u53bb\u770b\u5c31\u597d\u4e86\n\n\u505a\u8fc7sone1\u7684\u90fd\u77e5\u9053\uff0csatt\u53bb\u7ef4\u62a4\n\n\u7c07\u8def\u5f84\u548c\u9664\u7c07\u8def\u5f84\u4ee5\u5916\u90e8\u5206\u7684\u70b9\u6743\u548c\n\n\u7531\u4e8e\u53ea\u6709\u70b9\u6743\uff0c\u6240\u4ee5\u53ef\u4ee5\u7701\u53bbbase cluster\n\n\u4e00\u4e2a\u6811\u7684\u5b50\u6811\u5728satt\u4e0a\u7684\u8868\u73b0\u5c31\u662faccess\u4e4b\u540e\u7684\u4e2d\u513f\u5b50(\u65e0\u9700\u7ef4\u62a4\u8fb9\u987a\u5e8f\uff0ccompress node\u7684\u56db\u4e2a\u513f\u5b50\u538b\u6210\u4e09\u4e2a \u4e24\u4e2arake\u513f\u5b50\u5408\u6210\u4e2d\u513f\u5b50\u8868\u793arake tree)\n\nsatt\u8fd9\u4e2a\u79d1\u6280\u6211\u5e76\u4e0d\u60f3\u5c06\u4ee3\u7801\u516c\u5f00\uff0c\u5176\u5b9e\u603b\u5171\u5199\u4e86315\u884c\u4ee3\u7801~~(\u8ddf\u6211\u5199\u7684sone1\u4e00\u6837\u957f\uff0c\u5982\u679c\u4f1anon-local search\u53ef\u4ee5\u76f4\u63a5\u7701\u6389lct\u7684\u5c06\u8fd1100\u884c)~~\n\n```cpp\n#include<cstdio>\n#include<cstddef>\ntemplate<class type>inline const void swap(type &a,type &b)\n{\n\tconst type c(a);a=b;b=c;\n}\ntemplate<class type>inline const type max(const type &a,const type &b)\n{\n\treturn a>b?a:b;\n}\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch(getchar());bool f(0);\n\twhile (ch<48||ch>57){if (ch=='-')f=1;ch=getchar();}\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n\tif (f)in=-in;\n}\ntypedef long long ll;\nconst int N(1e5+10);\nnamespace Self_Adjusting_Top_Trees\n{\n}\n#define satt Self_Adjusting_Top_Trees\nnamespace Link_Cut_Trees\n{\n\tstruct tree\n\t{\n\t\tbool rev;\n\t\ttree *son[2],*fa;\n\t\tstatic tree *null;\n\t\tvoid *operator new(size_t size);\n\t\tvoid *operator new[](size_t size);\n\t\tinline tree():rev(0)\n\t\t{\n\t\t\tstatic bool init(0);\n\t\t\tif (!init)\n\t\t\t\tinit=1,\n\t\t\t\tnull=new tree,\n\t\t\t\tnull->son[0]=null->son[1]=null->fa=null;\n\t\t\tson[0]=son[1]=fa=null;\n\t\t}\n\t\tinline const void reverse()\n\t\t{\n\t\t\tif (this!=null)swap(son[0],son[1]),rev^=1;\n\t\t}\n\t\tinline const void pushdown()\n\t\t{\n\t\t\tif (rev)\n\t\t\t\tson[0]->reverse(),\n\t\t\t\tson[1]->reverse(),\n\t\t\t\trev=0;\n\t\t}\n\t\tinline const bool identity()\n\t\t{\n\t\t\treturn fa->son[1]==this;\n\t\t}\n\t\tinline const bool isroot()\n\t\t{\n\t\t\treturn fa->son[0]!=this&&fa->son[1]!=this;\n\t\t}\n\t\tinline const void rotate()\n\t\t{\n\t\t\tconst bool f(identity());\n\t\t\ttree *fa(this->fa),*gfa(fa->fa),*q(son[f^1]);\n\t\t\tif (!fa->isroot())gfa->son[fa->identity()]=this;\n\t\t\t(son[f^1]=fa)->son[f]=q;\n\t\t\t((q->fa=fa)->fa=this)->fa=gfa;\n\t\t}\n\t\tinline const void relieve()\n\t\t{\n\t\t\tif (!isroot())fa->relieve();\n\t\t\tpushdown();\n\t\t}\n\t\tinline const void splay()\n\t\t{\n\t\t\tfor (relieve();!isroot();rotate())\n\t\t\t\tif (!fa->isroot())\n\t\t\t\t\t(fa->identity()^identity()?this:fa)->rotate();\n\t\t}\n\t}*tree::null,*node0;\n\t#define null tree::null\n\tchar memory_pool[N*sizeof(tree)],*tail(memory_pool+sizeof(memory_pool));\n\tinline void *tree::operator new(size_t size){return tail-=size;}\n\tinline void *tree::operator new[](size_t size){return tail-=size;}\n\tinline tree *node(const int &x){return node0+x;}\n\tinline tree *access(tree *x)\n\t{\n\t\ttree *y(null);\n\t\tfor (;x!=null;x=(y=x)->fa)x->splay(),x->son[1]=y;\n\t\treturn y;\n\t}\n\tinline const void evert(tree *x)\n\t{\n\t\taccess(x);x->splay();x->reverse();\n\t}\n\tinline const void link(tree *x,tree *y)\n\t{\n\t\tevert(x);x->fa=y;\n\t}\n\tinline tree *lca(tree *x,tree *y)\n\t{\n\t\taccess(x);return access(y);\n\t}\n\t#undef null\n}\n#define lct Link_Cut_Trees\nint n,m;\nint main()\n{\n\tread(n);read(m);\n\tsatt::node0=new satt::tree[n+1];\n\tlct::node0=new lct::tree[n+1];\n\tfor (int i(1);i<=n;i++)read(satt::node(i)->val);\n\tfor (int u,v,i(1);i<n;i++)\n\t\tread(u),read(v),\n\t\tsatt::link(satt::node(u),satt::node(v)),\n\t\tlct::link(lct::node(u),lct::node(v));\n\tsatt::evert(satt::node(1));lct::evert(lct::node(1));\n\tfor (int opt,u,v,w;m--;)\n\t\tswitch (read(opt),read(u),opt)\n\t\t{\n\t\t\tcase 1:satt::evert(satt::node(u));lct::evert(lct::node(u));break;\n\t\t\tcase 2:\n\t\t\t{\n\t\t\t\tread(v);read(w);\n\t\t\t\tconst int lca(lct::lca(lct::node(u),lct::node(v))-lct::node0);\n\t\t\t\tsatt::add(satt::node(lca),w);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3:printf(\"%lld\\n\",satt::query(satt::node(u)));break;\n\t\t}\n\treturn 0;\n}\n```\n\nnon-local searching for lca:\n\n\u8bb0$rt$\u4e3a\u6839 $lca$\u4e3a$Lca(u,v)$\uff0c$dis(x,y)$\u8868\u793a$x,y$\u8def\u5f84\u4e0a\u70b9\u6570\uff0c\u5219\u6709\n$$dis(u,v)=dis(rt,u)+dis(rt,v)-2dis(rt,lca)+1$$\n\u79fb\u9879\u5f97\n$$dis(rt,lca)=\\frac {dis(rt,u)+dis(rt,v)-dis(u,v)+1}{2}$$\n\n\u663e\u7136\u5206\u5b50\u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u77e5\u9053\u4e86$lca$\u5230\u6839\u7684\u8ddd\u79bb\u8bb0\u4f5c$k$\uff0c\u90a3\u6211\u4eec\u53ea\u9700\u8981\u4ece\u6839\u5f80\u4e0b\u5230$u$\u6216$v$\u8df3$k$\u4e2a\u70b9\u5373\u53ef\n\n\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63d0\u53d6\u6839\u5230$u$\u6216$v$\u7684\u8def\u5f84\uff0c\u56e0\u4e3aroot path\u5f62\u6001\u662f\u4e2aSplay\uff0c\u7136\u540e\u5728\u4e0a\u9762\u627ekth\u5373\u53ef\n\nnon-local search\u7684\u672c\u8d28\u662f\u4e8c\u5206\uff0c\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\n\n\u800ctoptree\u7684\u7c07\u7ed3\u6784\u6784\u6210\u5c31\u7c7b\u4f3c\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u539f\u7406\u4e0d\u96be\u7406\u89e3\n\n\u5e73\u8861\u6811kth\u7684\u672c\u8d28\u4e5f\u662f\u901a\u8fc7\u5de6\u513f\u5b50\u5927\u5c0f\u8fd9\u4e00\u4fe1\u606f\u5b9e\u73b0\u5bf9\u4e8c\u5206\u7684check\n\n\u4ee3\u7801\u4ecd\u7136\u4e0d\u63d0\u4f9bsatt\n```cpp\n#include<cstdio>\n#include<cstddef>\ntemplate<class type>inline const void swap(type &a,type &b)\n{\n\tconst type c(a);a=b;b=c;\n}\ntemplate<class type>inline const type max(const type &a,const type &b)\n{\n\treturn a>b?a:b;\n}\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch(getchar());bool f(0);\n\twhile (ch<48||ch>57){if (ch=='-')f=1;ch=getchar();}\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n\tif (f)in=-in;\n}\ntypedef long long ll;\nconst int N(1e5+10);\nnamespace Self_Adjusting_Top_Trees\n{\n}using namespace Self_Adjusting_Top_Trees;\nint n,m;\nint main()\n{\n\tread(n);read(m);\n\tnode0=new tree[n+1];\n\tfor (int i(1);i<=n;i++)read(node(i)->val);\n\tfor (int u,v,i(1);i<n;i++)\n\t\tread(u),read(v),link(node(u),node(v)),\n\tevert(root=node(1));\n\tfor (int opt,u,v,w;m--;)\n\t\tswitch (read(opt),read(u),opt)\n\t\t{\n\t\t\tcase 1:evert(root=node(u));break;\n\t\t\tcase 2:read(v);read(w);add(lca(node(u),node(v)),w);break;\n\t\t\tcase 3:printf(\"%lld\\n\",query(node(u)));break;\n\t\t}\n\treturn 0;\n}\n```",
        "postTime": 1576920728,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF916E \u3010Jamie and Tree\u3011"
    },
    {
        "content": "\u5176\u5b9etop tree\u5bf9\u4e8e\u8fd9\u4e9b\u7b80\u5355\u7684\u64cd\u4f5c\u633a\u597d\u5199\u7684 ~~\u4f46\u8fd8\u662f\u592a\u6bd2\u7624\u4e86~~\n\n- \u64cd\u4f5c1\u663e\u7136\u76f4\u63a5makeroot\u5c31\u884c\u4e86\n- \u64cd\u4f5c2\u9700\u8981\u627elca\uff0ctop tree\u627elca\u548clct\u627elca\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u5148Access(x),\u7136\u540eAccess(y)\u627e\u5230\u6700\u540e\u505c\u4e0b\u7684\u8282\u70b9\u5373\u4e3alca\uff0c\u7136\u540eAccess(lca)\u6253\u4e2atag\u5c31\u884c\u4e86\n- \u64cd\u4f5c3\u5c31\u76f4\u63a5Access(x)\u540e\u7edf\u8ba1\u4e00\u4e0b\u865a\u94fe\u7684\u8d21\u732e\u5c31\u597d\u4e86\n\n~~\u677f\u5b50\u5c31\u5f88\u6bd2\u7624~~\n### code\n\n```cpp\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\",\"inline\",\"-ffast-math\")\n#pragma GCC target(\"avx,sse4,mmx\")\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n#define int long long\n#define R register\nconst int N=2e5+5;\nint n,m;\nstruct ccf\n{\n    int ma,mi,sum,siz;\n    ccf(){}\n    ccf(int a,int b,int c,int d):ma(a),mi(b),sum(c),siz(d){}\n};\nstruct tag\n{\n    int mul,add;\n    tag(){mul=1;add=0;};\n    tag(int a,int b):mul(a),add(b){}\n    inline bool empty(){return mul==1&&add==0;} \n};\nccf operator+(const ccf&a,const ccf&b)\n{\n    return ccf(max(a.ma,b.ma),min(a.mi,b.mi),a.sum+b.sum,a.siz+b.siz);\n}\nccf operator+(const ccf&a,const tag&b)\n{\n    if(!a.siz)return a;\n    return ccf(a.ma*b.mul+b.add,a.mi*b.mul+b.add,a.sum*b.mul+b.add*a.siz,a.siz);\n}\ntag operator+(const tag&a,const tag&b)\n{\n    return tag(a.mul*b.mul,a.add*b.mul+b.add);\n}\nstruct lct\n{\n    lct *ch[4],*par;\n    tag CHAIN,ALL;\n    ccf cha,sub,all;\n    int rev,inr,val;\n    inline void filp(){rev^=1;swap(ch[0],ch[1]);}\n    inline void pushshi(const tag&a)\n    {\n        cha=cha+a;\n        CHAIN=CHAIN+a;\n        val=val*a.mul+a.add;\n        all=cha+sub;\n    }\n    inline void pushxu(const tag&a,bool fff=1)\n    {\n        ALL=ALL+a;\n        all=all+a;\n        sub=sub+a;\n        if(fff)pushshi(a);\n    }\n    inline void rz()\n    {\n        cha=all=sub=ccf(-(1<<30),1<<30,0,0);\n        if(!inr)all=cha=ccf(val,val,val,1);\n        for(int i=0;i<2;i++)if(ch[i])cha=cha+ch[i]->cha,sub=sub+ch[i]->sub;\n        for(int i=2;i<4;i++)if(ch[i])sub=sub+ch[i]->all;\n        for(int i=0;i<4;i++)if(ch[i])all=all+ch[i]->all;\n    }\n    inline void pushdown()\n    {\n        if(rev)\n        {\n            if(ch[0])ch[0]->filp();\n            if(ch[1])ch[1]->filp();\n            rev=0;\n        }\n        if(!ALL.empty())\n        {\n            for(int i=0;i<4;i++)\n                if(ch[i])ch[i]->pushxu(ALL,i>=2);\n            ALL=tag(1,0);\n        }\n        if(!CHAIN.empty())\n        {\n            for(int i=0;i<2;i++)\n                if(ch[i])ch[i]->pushshi(CHAIN);\n            CHAIN=tag(1,0);\n        }\n    }\n    inline lct *CH(int now){if(ch[now])ch[now]->pushdown();return ch[now];}\n    inline bool CHK(int now){return par->ch[now+1]==this;}\n    inline int chk(){for(int i=0;i<4;i++)if(par->ch[i]==this)return i;return 0;}\n    inline void sets(lct *now,int d){if(now)now->par=this;ch[d]=now;}\n    inline bool get(int ty)\n    {\n        if(!ty)return !par||(par->ch[0]!=this&&par->ch[1]!=this);\n        return !par||!par->inr||!inr;\n    }\n}tr[N<<1],*cur=tr+N,*pool[N],**CUR=pool;\nint totcnt=0;\ninline lct *newlct()\n{\n    ++totcnt;\n    lct *now=(CUR==pool)?cur++:*(--CUR);\n    for(int i=0;i<4;i++)now->ch[i]=0;\n    now->par=0;\n    now->ALL=now->CHAIN=tag(1,0);\n    now->all=now->cha=ccf(-(1<<30),1<<30,0,0);\n    now->inr=1;now->rev=0;now->val=0;\n    return now;\n}\ninline void deld(lct *now){*(CUR++)=now;}\ninline void zhuan(lct *now,int ty)\n{\n    lct *p=now->par;int d=now->CHK(ty);\n    if(!p->par)now->par=0;\n    else p->par->sets(now,p->chk());\n    p->sets(now->ch[!d+ty],d+ty);\n    now->sets(p,!d+ty);\n    p->rz();\n}\ninline void splay(lct *now,int ty=0)\n{\n    while(!now->get(ty))\n    {\n        if(now->par->get(ty))zhuan(now,ty);\n        else if(now->CHK(ty)==now->par->CHK(ty))zhuan(now->par,ty),zhuan(now,ty);\n        else zhuan(now,ty),zhuan(now,ty);   \n    }\n    now->rz();\n}\ninline void add(lct *a,lct *b)\n{\n    b->pushdown();\n    for(int i=2;i<4;i++)\n        if(!b->ch[i]){b->sets(a,i);return;}\n    lct *x=newlct(),*v;\n    for(v=b;v->ch[2]->inr;v=v->CH(2));\n    x->sets(v->ch[2],2);x->sets(a,3);\n    v->sets(x,2);splay(x,2);\n}\ninline void del(lct *now)\n{\n    if(now->par->inr)\n    {\n        now->par->par->sets(now->par->ch[5-now->chk()],now->par->chk());\n        deld(now->par);\n        splay(now->par->par,2);\n    }\n    else now->par->sets(0,now->chk());\n    now->par=0;\n}\nlct *sta[N];\ninline lct* Access(lct *now)\n{\n    int top=0;\n    lct *v=now,*u;\n    for(u=now;u;u=u->par)sta[++top]=u;\n    while(top)sta[top--]->pushdown();\n    splay(now);\n    if(now->ch[1])\n    {\n        u=now->ch[1];\n        now->ch[1]=0;\n        add(u,now);\n        now->rz();\n    }\n    while(now->par)\n    {\n        //cout<<\"f=\"<<now->par->val<<endl;\n        for(u=now->par;u->inr;u=u->par);\n        splay(u);\n        if(u->ch[1])\n        {\n            now->par->sets(u->ch[1],now->chk());\n            splay(now->par,2);\n        }\n        else del(now);\n        u->sets(now,1);\n        (now=u)->rz();\n    }\n    splay(v);\n    return now;\n}\ninline void makeroot(lct *now)\n{\n    Access(now);\n    now->filp();\n}\ninline lct *findpar(lct *now)\n{\n    Access(now);\n    now=now->CH(0);\n    while(now&&now->ch[1])now=now->CH(1);\n    return now;\n}\ninline lct *findrt(lct *now)\n{\n    for(;now->par;now=now->par);\n    return now;\n}\ninline lct *cut(lct *now)\n{\n    lct *v=findpar(now);\n    if(v)\n    {\n        Access(v);\n        del(now);\n        v->rz();\n    }\n    return v;\n}\ninline void link(lct *a,lct *b)\n{\n    lct *now=cut(a);\n    if(findrt(a)!=findrt(b))now=b;\n    if(now)\n    {\n        //cout<<now->val<<endl;\n        Access(now);\n        //cout<<666<<endl;\n        add(a,now);\n        now->rz();\n    }\n}\ninline void split(lct *a,lct *b)\n{\n    makeroot(a);\n    Access(b);\n    splay(a);\n}\nint U[N],V[N],root;\ninline int rd()\n{\n    char p=getchar();int x=0,f=1;\n    while(p>'9'||p<'0')\n    {\n        if(p=='-')f=-1;\n        p=getchar();\n    }\n    while(p<='9'&&p>='0')x=(x<<1)+(x<<3)+(p^48),p=getchar();\n    return x*f;\n}\nsigned main()\n{\n    n=rd();m=rd();\n\tfor(int i=1;i<=n;i++)\n    {\n        tr[i].val=rd();\n        tr[i].rz();\n    }\n\tfor(int i=1;i<n;i++)\n    \tU[i]=rd(),V[i]=rd();\n    for(int i=1;i<n;i++)\n    {\n        makeroot(tr+U[i]);\n        //cout<<U[i]<<\" \"<<V[i]<<endl; \n        link(tr+U[i],tr+V[i]);\n    }\n    root=1;\n    makeroot(tr+root);\n    int x,op,z;\n    lct *u,*lca,*v;\n    while(m--)\n\t{\n\t\top=rd();x=rd();\n\t\tmakeroot(tr+root);\n\t\tif(op==1)root=x;\n\t\telse if(op==2)\n\t\t{\n\t\t\tu=tr+x;v=tr+rd();\n\t\t\tAccess(u);\n\t\t\tlca=Access(v);\n\t\t\tAccess(lca);\n\t\t\tz=rd();\n\t\t\ttag fg(1,z);\n\t\t\tlca->val=lca->val*fg.mul+fg.add;\n\t\t\tfor(int i=2;i<4;i++)\n\t\t\t\tif(lca->ch[i])lca->ch[i]->pushxu(fg);\n            lca->rz();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tu=tr+x;\n\t\t\tAccess(u);\n            int ans=u->val;\n            for(int i=2;i<4;i++)if(u->ch[i])\n            {\n                ccf res=u->ch[i]->all;                    \n                ans+=res.sum;\n            }\n            printf(\"%I64d\\n\",ans);//cf\u4e0a\u8981\u7528I64d\n\t\t}\n\t}\n    return 0;\n}\n```\n",
        "postTime": 1572493596,
        "uid": 132952,
        "name": "Goldia",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF916E \u3010Jamie and Tree\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/CF916E)  \n\u5bf9\u8fd9\u79cd\u65b9\u6cd5\u66f4\u52a0\u8be6\u7ec6\u7684\u4ecb\u7ecd\u4e0e\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790: [cnblog](https://www.cnblogs.com/Y-B-X/p/14939291.html) [\u6d1b\u8c37blog](https://www.luogu.com.cn/blog/Y-B-X/zhi-chi-zi-shu-cao-zuo-di-dong-tai-shu-mo-gai-lct)  \n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u80fd\u591f\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u9b54\u6539 $LCT$ \u7684\u505a\u6cd5\uff0c\u5e76\u975e $AAAT$  \n\u56de\u60f3 $LCT$ \u7684\u5c40\u9650\u6027\u5c31\u662f\u4e0d\u80fd\u7ef4\u62a4\u5b50\u6811\u6807\u8bb0  \n\u90a3\u5c31\u53ef\u4ee5\u60f3\u5230\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u4e13\u95e8\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u865a\u513f\u5b50  \n\u5e73\u8861\u6811\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u8868\u73b0\u4f18\u79c0\uff0c\u90a3\u5c31\u53ef\u4ee5\u60f3\u5230\u76f4\u63a5\u7528\u4e00\u4e2a $splay$ \u6765\u7ef4\u62a4\u865a\u513f\u5b50  \n\u4f46\u4e8b\u5b9e\u4e0a\u5982\u679c\u5355\u7eaf\u5730\u8ba9\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u4e00\u4e2a\u865a\u62df\u8282\u70b9\u5728\u5bf9\u5e94\u7684\u7ef4\u62a4\u865a\u513f\u5b50\u7684 $splay$ \u4e2d\uff0c  \n\u50cf $AAAT$ \u4e00\u6837\u5730\u5199\uff0c\u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u4fdd\u8bc1\u5355\u6b21 $access$ \u65f6\u95f4\u590d\u6742\u5ea6\u5747\u644a\u4e3a $O(log n)$  \n\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u5220\u9664\u8282\u70b9\u65f6\u9700\u5c06\u524d\u9a71\uff08\u540e\u7ee7\uff09\u627e\u51fa\u6765\u518d\u5220  \n\u501f\u9274\u4e00\u4e0b $Tarjan$ \u7684 $Top$ $Tree$ \u8bba\u6587\uff0c\u4e0d\u96be\u53d1\u73b0\u53e6\u4e00\u79cd\u65b9\u6cd5  \n\u5c31\u662f\u628a\u865a\u513f\u5b50 $splay$ \u4e2d\u7684\u771f\u6b63\u4ee3\u8868\u539f\u5148 $LCT$ \u4e2d\u4fe1\u606f\u7684\u70b9\u53ea\u8ba9\u5b83\u4eec\u5728\u53f6\u5b50\u7ed3\u70b9\u4e0a  \n\u7136\u540e\u7528\u4e00\u4e9b\u8f85\u52a9\u8282\u70b9\u4e32\u8d77\u6765\uff0c\u6784\u6210\u4e00\u4e2a\u7c7b\u4f3c $leafytree$ \u7684\u7ed3\u6784    \n\u82e5\u5728\u5220\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u7531\u4e8e\u5176\u6ca1\u6709\u5de6\u53f3\u513f\u5b50\uff0c\u76f4\u63a5\u8fde\u5e26\u4ed6\u7684\u7236\u8282\u70b9\u4ece\u6574\u4e2a $splay$ \u4e2d\u79fb\u9664\uff0c  \n\u518d\u5c06\u5176\u539f\u5148\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\u65cb\u5230\u6839\uff0c\u66f4\u65b0\u4e00\u4e0b\u5373\u53ef\u3002  \n\u540c\u65f6\u82e5\u662f\u6362\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u540c\u6837\u76f4\u63a5\u6539\u7136\u540e\u65cb\u5230\u6839\u66f4\u65b0\u4fe1\u606f\uff0c\u5341\u5206\u65b9\u4fbf\u3002  \n\u800c\u8fd9\u6837\u662f\u53ef\u4ee5\u4fdd\u8bc1\u5355\u6b21 $access$ \u662f\u5747\u644a\u65f6\u95f4\u4e3a\u4e00\u4e2a $log$ \u7684\uff0c\u5177\u4f53\u8bc1\u660e\u53c2\u89c1\u4e0a\u9762\u7684\u94fe\u63a5\u3002  \n\u800c\u8fd9\u4e00\u9898\u4e2d\uff1a\u6362\u6839\u3001\u6c42 $LCA$ \u3001\u5b50\u6811\u52a0\u3001\u5b50\u6811\u67e5\u8be2\u6b63\u662f\u8fd9\u79cd\u9b54\u6539 $LCT$ \u9002\u7528\u7684\u3002  \n\u5728\u865a\u513f\u5b50\u7684 $splay$ \u4e2d\u4e0b\u4f20\u7684\u6807\u8bb0\u65f6\u8981\u5bf9\u539f\u5148 $LCT$ \u7684\u8282\u70b9\u4fe1\u606f\u505a\u4fee\u6539\uff0c  \n\u539f\u5148 $LCT$ \u7684\u5b50\u6811\u6807\u8bb0\u540c\u6837\u8981\u5bf9\u5176\u865a\u513f\u5b50\u7684 $splay$ \u6253\u4e0a\u6807\u8bb0\uff0c  \n\u4e3a\u4e86\u907f\u514d\u4e00\u6b21\u8fd9\u6837\u8fde\u7eed\u6253\u6807\u8bb0\u4e0d\u505c\uff0c\u53ef\u4ee5\u5728\u6bcf\u4e2a\u70b9\u7684\u865a $splay$ \u4e2d\u52a0\u4e00\u4e2a\u4e0d\u52a8\u7684\u6839\u8282\u70b9\u3002   \n\u4f46\u4e0d\u8fc7\u867d\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u80fd\u4fdd\u8bc1\uff0c\u5e38\u6570\u8fd8\u662f\u6bd4 $Top$ $Tree$ \u8981\u7a0d\u5fae\u5927\u4e9b\u3002  \n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int N=1e5+10;\nint n,m,x,y,opt,root=1;ll v,ans;\nint son[N][2],anc[N],sz[N],rt[N],rev[N];ll sum[N],w[N],tag[N];\nvoid tag_(int x,ll v);\nstruct leafy_Splay{\n\tint son[N<<2][2],anc[N<<2],sz[N<<2],wsz[N<<2],tot;ll sum[N<<2],wsum[N<<2],tag[N<<2];\n\tqueue<int> q;\n\tvoid tag_1(int x,ll v){\n\t\tsum[x]+=sz[x]*v;\n\t\twsum[x]+=wsz[x]*v;\n\t\ttag[x]+=v;\n\t\tif(x<=n)tag_(x,v);\n\t}\n\tvoid fix(int x){if(!x)return;sum[x]=sum[son[x][0]]+sum[son[x][1]]+wsum[x];\n\t\tsz[x]=sz[son[x][0]]+sz[son[x][1]]+wsz[x];}\n\tbool p(int x){return son[anc[x]][1]==x;}\n\tint newnode(){if(!q.empty()){int x=q.front();return q.pop(),x;}return ++tot;}\n\tvoid pushdown(int x){\n\t\tif(tag[x]){\n\t\t\tif(son[x][0])tag_1(son[x][0],tag[x]);\n\t\t\tif(son[x][1])tag_1(son[x][1],tag[x]);\n\t\t\ttag[x]=0;\n\t\t}\n\t}\n\tvoid pushall(int x){\n\t\tif(anc[x])pushall(anc[x]);\n\t\tpushdown(x);\n\t}\n\tvoid rotate(int x){int y=anc[x],xx=anc[y];bool b=p(x),bb=p(y);\n\t\tanc[x]=xx;if(xx)son[xx][bb]=x;son[y][b]=son[x][b^1];\n\t\tanc[son[x][b^1]]=y;son[x][b^1]=y;anc[y]=x;fix(y);fix(x);fix(xx);\n\t}\n\tvoid splay(int x,int y){pushall(x);\n\t\tfor(int i=anc[x];i=anc[x],i!=y;rotate(x))\n\t\t\tif(anc[i]!=y){if(p(x)==p(i))rotate(i);else rotate(x);}\n\t}\n\tvoid ins(int x,int y,ll sum_,int sz_){\n\t\twsum[x]=sum_;wsz[x]=sz_;fix(x);int tmp=rt[y],f=0;pushdown(tmp);\n\t\tif(!son[rt[y]][0])return anc[son[rt[y]][0]=x]=rt[y],fix(rt[y]);\n\t\twhile(1){\n\t\t\tif(!tmp){\n\t\t\t\ttmp=newnode();anc[son[anc[f]][p(f)]=tmp]=anc[f];\n\t\t\t\tson[tmp][x>f]=x;anc[x]=tmp;\n\t\t\t\tson[tmp][x<f]=f;anc[f]=tmp;\n\t\t\t\tfix(f);fix(tmp);fix(anc[tmp]);\n\t\t\t\treturn splay(tmp,rt[y]);\n\t\t\t}\n\t\t\tpushdown(tmp);\n\t\t\tf=tmp;tmp=son[tmp][x>tmp];\n\t\t}\n\t}\n\tvoid clear(int x){wsz[x]=sz[x]=wsum[x]=sum[x]=son[x][0]=son[x][1]=anc[x]=0;if(x>(n<<1))q.push(x);}\n\tvoid del(int x,int y){\n\t\tif(anc[x]==rt[y])return son[rt[y]][0]=0,fix(rt[y]),clear(x);\n\t\tint yy=anc[x],xx=anc[yy];bool b=p(x),bb=p(yy);\n\t\tif(xx==rt[y]){\n\t\t\tanc[son[rt[y]][0]=son[yy][b^1]]=rt[y];\n\t\t\tclear(x),clear(yy),fix(rt[y]);\n\t\t\treturn;\n\t\t}\n\t\tanc[son[xx][p(yy)]=son[yy][b^1]]=xx;\n\t\tclear(x);clear(yy);fix(xx);splay(xx,rt[y]);fix(rt[y]);\n\t}\n\tvoid display(int x,int xx,ll sum_,int sz_,int y){\n\t\twsum[xx]=sum_;wsz[xx]=sz_;fix(xx);int yy=anc[x];\n\t\tanc[son[yy][p(x)]=xx]=yy;clear(x);fix(yy);if(yy!=rt[y])splay(yy,rt[y]);fix(rt[y]);\n\t}\n}S;\nvoid rev_(int x){rev[x]^=1;son[x][0]^=son[x][1]^=son[x][0]^=son[x][1];}\nvoid tag_(int x,ll v){sum[x]+=v*sz[x];w[x]+=v;tag[x]+=v;S.tag_1(rt[x],v);}\nbool p(int x){return son[anc[x]][1]==x;}\nbool isroot(int x){return son[anc[x]][0]!=x&&son[anc[x]][1]!=x;}\nvoid fix(int x){\n\tif(!x)return;\n\tsum[x]=sum[son[x][0]]+sum[son[x][1]]+w[x]+S.sum[rt[x]];\n\tsz[x]=sz[son[x][0]]+sz[son[x][1]]+1+S.sz[rt[x]];\n}\nvoid pushdown(int x){\n\tif(rev[x]){if(son[x][0])rev_(son[x][0]);\n\tif(son[x][1])rev_(son[x][1]);rev[x]=0;}\n\tif(tag[x]){if(son[x][0])tag_(son[x][0],tag[x]);\n\tif(son[x][1])tag_(son[x][1],tag[x]);tag[x]=0;}\n}\nvoid pushall(int x){\n\tif(!isroot(x))pushall(anc[x]);\n\tpushdown(x);\n}\nvoid pushall_(int x){\n\tif(!isroot(x))pushall_(anc[x]);\n\telse if(anc[x]){\n\t\tpushall_(anc[x]);\n\t\tS.pushall(x);\n\t}\n\tpushdown(x);\n}\nvoid rotate(int x){int y=anc[x],xx=anc[y];bool b=p(x),bb=p(y);\n\tanc[x]=xx;if(!isroot(y))son[xx][bb]=x;son[y][b]=son[x][b^1];\n\tanc[son[x][b^1]]=y;son[x][b^1]=y;anc[y]=x;fix(y);fix(x);fix(xx);\n}\nint findrt(int x){if(isroot(x))return x;return findrt(anc[x]);}\nvoid splay(int x){pushall(x);int y=findrt(x);\n\tif(anc[y]&&x!=y)S.display(y,x,sum[y],sz[y],anc[y]);\n\tfor(int i=anc[x];i=anc[x],!isroot(x);rotate(x)){\n\t\tif(!isroot(i)){if(p(i)==p(x))rotate(i);else rotate(x);}\n\t}\n}\nint access(int x){\n\tint y=0;pushall_(x);\n\tfor(;x;y=x,x=anc[x]){\n\t\tsplay(x);\n\t\tif(y&&son[x][1])S.display(y,son[x][1],sum[son[x][1]],sz[son[x][1]],x);\n\t\telse if(!y&&son[x][1])S.ins(son[x][1],x,sum[son[x][1]],sz[son[x][1]]);\n\t\telse if(y&&!son[x][1])S.del(y,x);\n\t\tson[x][1]=y;fix(x);\n\t}\n\treturn y;\n}\nvoid makeroot(int x){access(x);splay(x),rev_(x);}\nvoid split(int x,int y){makeroot(x),access(y),splay(y);}\nvoid link(int x,int y){split(x,y);anc[x]=y;S.ins(x,y,sum[x],sz[x]);fix(y);}\nvoid subtree_add(int x,ll v){\n\tsplit(root,x);\n\tsum[x]+=v*(S.sz[rt[x]]+1);w[x]+=v;\n\tS.tag_1(rt[x],v);\n}\nint lca(int x,int y){\n\tmakeroot(root);access(x);return access(y);\n}\nmain(){\n\tscanf(\"%d%d\",&n,&m);S.tot=n<<1;\n\tfor(int i=1;i<=n;i++)scanf(\"%lld\",&w[i]),fix(i),rt[i]=i+n,S.fix(i);\n\tfor(int i=1;i<n;i++)scanf(\"%d%d\",&x,&y),link(x,y);\n\twhile(m--){\n\t\tscanf(\"%d%d\",&opt,&x);\n\t\tif(opt==1)root=x;\n\t\tif(opt==2)scanf(\"%d%lld\",&y,&v),subtree_add(lca(x,y),v);\n\t\tif(opt==3){\n\t\t\tsplit(root,x);\n\t\t\tans=sum[son[x][1]]+S.sum[rt[x]]+w[x];\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t}\n}\n```",
        "postTime": 1626145189,
        "uid": 334380,
        "name": "Y_B_X",
        "ccfLevel": 7,
        "title": "\u9898\u89e3[CF916E]"
    },
    {
        "content": "#  [\u9898\u89e3] CF916E Jamie and Tree\n\n## \u601d\u8def\n\n\u6211\u4eec\u53d1\u73b0\u9664\u53bb\u6362 $root$  \u64cd\u4f5c\u5c31\u662f\u4e2a\u88f8\u7684\u6811\u5256  +  \u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u4ee5 $1$ \u4e3a $root$ \u8dd1\u4e00\u6b21\u6811\u5256\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u8981\u5c06\u6362   $root$   \u64cd\u4f5c\u5e26\u6765\u7684\u5f71\u54cd\u89e3\u51b3\u6389\u6b64\u9898\u5c31\u5b8c\u6210\u4e86\n\n* \u6211\u4eec\u53d1\u73b0\u6362\u5b8c\u540e\u7684  $root$ \u4e0e $LCA/v$ \u5b58\u5728\u4e09\u79cd\u4f4d\u7f6e\u5173\u7cfb\uff1a1. \u662f  $LCA / v$ \u672c\u8eab \u30022. \u5728  $LCA/ v$ \u5b50\u6811\u5185 3.\u5728 $LCA/v$ \u5b50\u6811\u5916 \n\n* \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u53ea\u8981\u5bf9\u6574\u68f5\u6811\u8fdb\u884c\u64cd\u4f5c\u5373\u53ef\uff1b\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u901a\u8fc7\u624b\u6a21\u53ef\u4ee5\u53d1\u73b0\u5bf9 $LCA/v$ \u7684\u5b50\u6811\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff1b\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u6362\u5b8c\u540e\u7684  $root$  \u5728 $LCA/v$ \u7684\u5b50\u6811\u4e2d\u5c5e\u4e8e\u90a3\u68f5\u5b50\u6811\uff0c\u5148\u5bf9\u5168\u5c40\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e4b\u540e\u629b\u53bb\u591a\u51fa\u6765\u7684   $ root$  \u7684\u8fd9\u90e8\u5206\u5f71\u54cd\u5373\u53ef\n\n* \u5bf9\u4e8e\u5982\u4f55\u5224\u65ad\u5176\u662f\u5426\u5728\u5b50\u6811\u5185\u6211\u662f\u901a\u8fc7\u5224\u65ad $dfn$ \u6765\u5224\u65ad\u7684\uff0c\u5982\u679c\u4e0d\u5728 $LCA /v$ \u7684\u5b50\u6811\u5185\uff0c\u90a3\u4e48 $root$ \u7684 $dfn$ \u5e8f\u5e94 $dfn [root]\\lt dfn[LCA/v] $  \u6216 $dfn[root] \\gt dfn[LCA/v] + size[LCA/v] - 1$  \uff08\u5176\u4e2d $size[LCA/v]$ \u4e3a $LCA/v$ \u7684\u5b50\u6811\u5927\u5c0f \uff09\n\n* \u5982\u679c\u5728 $LCA/v$ \u5b50\u6811\u5185\u53ef\u4ee5\u4eff\u7167\u627e $LCA$ \u4e00\u6837\u8df3\n\n* \u5bf9\u4e8e\u64cd\u4f5c\u4e8c\u6211\u4eec\u8fd8\u9700\u8981\u627e\u5230\u6362\u6839\u4ee5\u540e\u7684 $LCA$ \uff0c\u56e0\u4e3a\u6362\u5b8c\u6839\u540e $x,y$ \u7684$LCA$ \u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\u6211\u4eec\u8bbe $lca1 = LCA(x,root),lca2=LCA(y,root),lca =LCA(x,y)$ \uff0c\u5982\u679c $lca1$  \u548c  $lca2$  \u7684 $LCA$ \u76f8\u540c \uff0c\u5219\u5728\u6362\u6839\u610f\u4e49\u4e0b $LCA$ \u5373\u4e3a $lca$ \uff0c\u5426\u5219\u4e3a $lca1$ \u548c $lca2$ \u4e2d\u6df1\u5ea6\u8f83\u6df1\u7684\u90a3\u4e2a\n\n* \u8fd9\u6837\u6211\u4eec\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86\n\n  ```c++\n  //\u597d\u9898\n  #include <bits/stdc++.h>\n  \n  #define re register\n  #define ls p << 1\n  #define rs p << 1 | 1\n  \n  typedef long long ll;\n  \n  namespace TNT\n  {\n      const int MAXN = 1e5 + 10;\n  \n      inline int read()\n      {\n          int x = 0, f = 1;\n          char ch = getchar();\n  \n          while (ch < '0' || ch > '9')\n          {\n              if (ch == '-')\n                  f = -1;\n  \n              ch = getchar();\n          }\n  \n          while (ch >= '0' && ch <= '9')\n          {\n              x = (x << 3) + (x << 1) + (ch ^ 48);\n              ch = getchar();\n          }\n  \n          return x * f;\n      }\n  \n      inline void write(ll x)\n      {\n          if (x < 0)\n              putchar('-'), x = -x;\n          if (x > 9)\n              write(x / 10);\n  \n          putchar(x % 10 + '0');\n      }\n  \n      int id[MAXN], rk[MAXN], w[MAXN];\n  \n      struct Tree\n      {\n          struct tree\n          {\n              int l;\n              int r;\n              int size;\n              ll w;\n              ll lazy;\n          } t[MAXN << 2];\n  \n          inline void pushup(int p)\n          {\n              t[p].w = t[ls].w + t[rs].w;\n          }\n  \n          inline void pushdown(int p)\n          {\n              if (t[p].lazy)\n              {\n                  t[ls].w += t[p].lazy * t[ls].size, t[rs].w += t[p].lazy * t[rs].size;\n                  t[ls].lazy += t[p].lazy, t[rs].lazy += t[p].lazy;\n  \n                  t[p].lazy = 0;\n              }\n          }\n  \n          void build(int p, int l, int r)\n          {\n              t[p].l = l, t[p].r = r, t[p].size = r - l + 1;\n  \n              if (l == r)\n              {\n                  t[p].w = w[rk[l]];\n                  return;\n              }\n  \n              int mid = (l + r) >> 1;\n  \n              build(ls, l, mid);\n              build(rs, mid + 1, r);\n  \n              pushup(p);\n          }\n  \n          void update(int p, int l, int r, int val)\n          {\n              if (l <= t[p].l && r >= t[p].r)\n              {\n                  t[p].w += 1ll * val * t[p].size;\n                  t[p].lazy += val;\n                  return;\n              }\n  \n              pushdown(p);\n  \n              int mid = (t[p].l + t[p].r) >> 1;\n  \n              if (l <= mid)\n                  update(ls, l, r, val);\n              if (r > mid)\n                  update(rs, l, r, val);\n  \n              pushup(p);\n          }\n  \n          ll query(int p, int l, int r)\n          {\n              if (l <= t[p].l && r >= t[p].r)\n                  return t[p].w;\n  \n              pushdown(p);\n  \n              int mid = (t[p].l + t[p].r) >> 1;\n              ll ans = 0;\n  \n              if (l <= mid)\n                  ans += query(ls, l, r);\n              if (r > mid)\n                  ans += query(rs, l, r);\n  \n              return ans;\n          }\n  \n      } T;\n  \n      struct edge\n      {\n          int nex;\n          int v;\n      } e[MAXN << 1];\n  \n      int head[MAXN], tot;\n      inline void add(int x, int y) { e[++tot] = (edge){head[x], y}, head[x] = tot; }\n  \n      int dep[MAXN], size[MAXN], heavy[MAXN], f[MAXN];\n      void dfs1(int lca, int fa)\n      {\n          f[lca] = fa;\n          size[lca] = 1;\n          dep[lca] = dep[fa] + 1;\n  \n          for (re int i = head[lca], v; i; i = e[i].nex)\n          {\n              v = e[i].v;\n  \n              if (v == fa)\n                  continue;\n  \n              dfs1(v, lca);\n              size[lca] += size[v];\n  \n              if (size[v] > size[heavy[lca]])\n                  heavy[lca] = v;\n          }\n      }\n  \n      int top[MAXN], cnt;\n      void dfs2(int lca, int tp)\n      {\n          top[lca] = tp;\n          id[lca] = ++cnt;\n          rk[cnt] = lca;\n  \n          if (!heavy[lca])\n              return;\n  \n          dfs2(heavy[lca], tp);\n  \n          for (re int i = head[lca], v; i; i = e[i].nex)\n          {\n              v = e[i].v;\n  \n              if (v == f[lca] || v == heavy[lca])\n                  continue;\n  \n              dfs2(v, v);\n          }\n      }\n  \n      inline int LCA(int x, int y)\n      {\n          while (top[x] != top[y])\n          {\n              if (dep[top[x]] < dep[top[y]])\n                  std::swap(x, y);\n  \n              x = f[top[x]];\n          }\n  \n          return dep[x] <= dep[y] ? x : y;\n      }\n  \n      inline void main()\n      {\n          int n = read(), m = read();\n  \n          for (re int i = 1; i <= n; i++)\n              w[i] = read();\n  \n          for (re int i = 1, x, y; i < n; i++)\n          {\n              x = read(), y = read();\n              add(x, y), add(y, x);\n          }\n  \n          dfs1(1, 0), dfs2(1, 1), T.build(1, 1, n);\n  \n          int root = 1;\n          bool flag = 0;\n          for (re int i = 1, opt, x, y, z, lca, lca1, lca2, now; i <= m; i++)\n          {\n              opt = read(), flag = 0;\n  \n              if (opt == 1)\n                  root = read();\n              else if (opt == 2)\n              {\n                  x = read(), y = read(), z = read(), lca = LCA(x, y), lca1 = LCA(x, root), lca2 = LCA(y, root);\n  \n                  if (dep[lca] < dep[lca1])\n                      lca = lca1;\n                  if (dep[lca] < dep[lca2])\n                      lca = lca2;\n  \n                  if (root == lca)\n                      T.update(1, 1, n, z);\n                  else if ((id[root] < id[lca]) || (id[root] > id[lca] + size[lca] - 1))\n                      T.update(1, id[lca], id[lca] + size[lca] - 1, z);\n                  else\n                  {\n                      T.update(1, 1, n, z);\n  \n                      now = root;\n  \n                      while (top[now] != top[lca])\n                      {\n                          if (f[top[now]] == lca)\n                          {\n                              flag = 1;\n                              now = top[now];\n                              break;\n                          }\n  \n                          now = f[top[now]];\n                      }\n  \n                      if (!flag)\n                          now = heavy[lca];\n  \n                      T.update(1, id[now], id[now] + size[now] - 1, -z);\n                  }\n              }\n              else\n              {\n                  x = read();\n                  if (root == x)\n                      write(T.t[1].w), putchar('\\n');\n                  else if ((id[root] < id[x]) || (id[root] > id[x] + size[x] - 1))\n                      write(T.query(1, id[x], id[x] + size[x] - 1)), putchar('\\n');\n                  else\n                  {\n                      now = root;\n  \n                      while (top[now] != top[x])\n                      {\n                          if (f[top[now]] == x)\n                          {\n                              flag = 1;\n                              now = top[now];\n                              break;\n                          }\n  \n                          now = f[top[now]];\n                      }\n  \n                      if (!flag)\n                          now = heavy[x];\n  \n                      write(T.query(1, 1, n) - T.query(1, id[now], id[now] + size[now] - 1)), \t\t\t\t\tputchar('\\n');\n                  }\n              }\n          }\n  \n          return;\n      }\n  } // namespace TNT\n  \n  int main()\n  {\n      TNT::main();\n      return 0;\n  }\n  ```\n\n  \u53cc\u500d\u7ecf\u9a8c\uff1a\u9065\u8fdc\u7684\u56fd\u5ea6\n\n\n\n\n\n",
        "postTime": 1604492222,
        "uid": 283889,
        "name": "SuperTNT",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF916E \u3010Jamie and Tree\u3011"
    },
    {
        "content": "\u9898\u76ee\u94fe\u63a5\uff1a[Codeforces 916E](https://www.luogu.com.cn/problem/CF916E)\n\n### \u9898\u610f:\n\n\u7ed9\u4f60\u4e00\u68f5\u6709\u6839\u6811\uff0c\u70b9\u5e26\u6743\uff0c\u9ed8\u8ba4\u6839\u4e3a $1$ \u53f7\u8282\u70b9\uff0c\u8981\u6c42\u652f\u6301\uff1a\n\n$1$  $v$ \uff1a\u6539\u53d8\u6811\u6839\u4e3a $v$\u3002\n\n$2$ $u$ $v$ $x$ : \u5728\u6362\u6839\u610f\u4e49\u4e0b\uff0c\u628a $LCA(u,v)$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u7684\u6bcf\u4e2a\u70b9\u52a0\u4e0a $x$\u3002\n\n$3$ $v$ : \u6c42\u6362\u6839\u610f\u4e49\u4e0b\uff0c\u4ee5 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u6743\u503c\u548c\u3002\n\n\n\n------------\n### Solution:\n\u5f88\u6734\u7d20\u7684\u60f3\u6cd5\uff0c\u5c31\u662f\u4f7f\u7528\u91cd\u94fe\u5256\u5206\uff0c\u6bcf\u6b21\u6362\u6839\u5c31\u91cd\u65b0\u7f16\u53f7\uff0c\u5bf9\u4e8e $2$ $3$ \u64cd\u4f5c\u5c31\u662f\u6811\u5256\u57fa\u672c\u64cd\u4f5c\u4e86\u3002\u4f46\u662f\u8fd9\u79cd\u60f3\u6cd5\u5f88\u5bb9\u6613\u88ab\u5361\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4f18\u5316\u7b97\u6cd5\u3002\n\n\u601d\u8003\u5728\u6362\u6839\u610f\u4e49\u4e0b\uff0c\u7a76\u7adf\u53d8\u5316\u4e86\u4ec0\u4e48 $?$\n\n\u5047\u8bbe\u73b0\u5728\u9884\u5904\u7406\u51fa\u4e86\u4ee5 $1$ \u4e3a\u6839\u7684\u4fe1\u606f\uff0c\u5bb9\u6613\u77e5\u9053\u4fee\u6539\u548c\u67e5\u8be2\u672c\u8d28\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u4ee5\u4e0b\u4e0d\u4f5c\u5206\u7c7b\u3002\u8bbe\u73b0\u5728\u7684\u6839\u4e3a $root$\u3002\n\n\u5148\u601d\u8003\u5982\u4f55\u6c42 $LCA$ :\n\n\u5982\u679c\u8981\u5728\u6362\u6839\u610f\u4e49\u4e0b\u6c42 $u$, $v$ \u7684 $LCA$ \uff0c\u53ef\u4ee5\u5148\u6c42\u51fa $root$ \u548c $u$ \u7684 $LCA$,\u8bbe\u4e3a $t$,\u518d\u6c42\u51fa $root$ \u548c $v$ \u7684 $LCA$ \uff0c\u8bbe\u4e3a $s$\u3002\n\n\u5982\u679c $t$ = $s$\uff0c\u90a3\u4e48\u6362\u6839\u610f\u4e49\u4e0b\u7684 $LCA$ \u5373\u4e3a $lca$ ( $u$, $v$)\uff1b\u5426\u5219\u4e3a $t$ \u548c $s$ \u4e2d\u8f83\u6df1\u7684\u90a3\u4e2a.\n\n\n------------\n\n\u518d\u8003\u8651\u5b50\u6811\u64cd\u4f5c\u5047\u8bbe\u8981\u5bf9\u4ee5 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u8fdb\u884c\u64cd\u4f5c\uff0c\u5206\u4e09\n\u79cd\u60c5\u51b5 $:$\n\n\u5982\u679c $v$ $=$ $root$\uff0c\u5bf9\u6574\u68f5\u6811\u64cd\u4f5c\u3002\n\n\u5982\u679c $root$ \u5728 $v$ \u7684\u5b50\u6811\u5185\uff0c\u5148\u5bf9\u6574\u68f5\u6811\u64cd\u4f5c\uff0c\u518d\u5bf9 $v$ \u5305\u542b $root$ \u7684\n\u513f\u5b50\u7684\u5b50\u6811\u9006\u64cd\u4f5c $($ \u4f8b\u5982\uff0c\u533a\u95f4\u52a0\u7684\u9006\u64cd\u4f5c\u5c31\u662f\u533a\u95f4\u51cf\uff0c\u533a\u95f4\u548c\u7684\u9006\u64cd\u4f5c\u5c31\u662f\u51cf\u53bb\u533a\u95f4\u548c $)$;\n\n\u5426\u5219\uff0c\u76f4\u63a5\u5bf9\u4ee5 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u8fdb\u884c\u64cd\u4f5c\u3002\n\n------------\n\u6211\u4eec\u987a\u4fbf\u601d\u8003\u4e00\u4e0b\u94fe\u64cd\u4f5c\uff0c\u6613\u5f97\u6362\u6839\u5bf9\u94fe\u64cd\u4f5c\u65e0\u5f71\u54cd\uff0c\u6240\u4ee5\u76f4\u63a5\u4e00\u822c\u6811\u5256\u5c31\u884c\u3002\n\n### Code:\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#define maxn 100010\nusing namespace std;\nint n,q,t;\nint root=1;\nint a[maxn];\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0',ch=getchar();}\n    return x*f;\n}\nvector<int>G[maxn];\nint fa[maxn],son[maxn],siz[maxn],top[maxn],depth[maxn];\nint cnt,id[maxn],rk[maxn];\nstruct SegmentTree{\n\tint l,r;\n\tlong long sum,add;\n\t#define l(x) tree[x].l\n\t#define r(x) tree[x].r\n\t#define sum(x) tree[x].sum\n\t#define add(x) tree[x].add\n}tree[maxn<<2];\ninline void pushup(int p){sum(p)=sum(p<<1)+sum(p<<1|1);}\ninline void pushdown(int p){\n\tsum(p<<1)+=add(p)*(r(p<<1)-l(p<<1)+1);add(p<<1)+=add(p);\n\tsum(p<<1|1)+=add(p)*(r(p<<1|1)-l(p<<1|1)+1);add(p<<1|1)+=add(p);\n\tadd(p)=0;\n}\nvoid build(int p,int l,int r){\n\tl(p)=l,r(p)=r;\n\tif(l==r){sum(p)=a[rk[l]];return;}\n\tint mid=(l+r)>>1;\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n\tpushup(p);\n}\nvoid change(int p,int l,int r,long long d){\n    if(l<=l(p)&&r>=r(p)){\n        sum(p)+=(r(p)-l(p)+1)*d;\n        add(p)+=d;\n        return;\n\t}\n\tpushdown(p);\n\tint mid=(l(p)+r(p))>>1;\n\tif(l<=mid)change(p<<1,l,r,d);\n\tif(mid<r)change(p<<1|1,l,r,d);\n\tpushup(p);\n}\nlong long ask(int p,int l,int r){\n\tif(l<=l(p)&&r>=r(p))return sum(p);\n\tpushdown(p);\n\tlong long ans=0;\n\tint mid=(l(p)+r(p))>>1;\n\tif(l<=mid)ans+=ask(p<<1,l,r);\n\tif(mid<r)ans+=ask(p<<1|1,l,r);\n\treturn ans;\n}\nvoid dfs1(int x){\n    siz[x]=1;\n    depth[x]=depth[fa[x]]+1;\n    \n    for(unsigned int i=0;i<G[x].size();++i){\n        int y=G[x][i];\n        if(y==fa[x])continue;\n        fa[y]=x;\n        dfs1(y);\n        siz[x]+=siz[y];\n        if(siz[y]>siz[son[x]])son[x]=y;\n    }\n}\nvoid dfs2(int x,int topf){\n    top[x]=topf;id[x]=++cnt;rk[cnt]=x;\n    if(!son[x])return;\n    dfs2(son[x],topf);\n    for(unsigned int i=0;i<G[x].size();++i){\n        int y=G[x][i];\n        if(y==fa[x]||y==son[x])continue;\n        dfs2(y,y);\n    }\n}\ninline int lca(int x,int y){\n    while(top[x]!=top[y]){\n        if(depth[top[x]]<depth[top[y]])swap(x,y);\n        x=fa[top[x]];\n    }\n    return depth[x]>depth[y]?y:x;\n}\ninline int la(int x,int y){\n\tint k=depth[x]-depth[y]-1;\n\twhile(depth[x]-depth[fa[top[x]]]<=k){\n    \tk-=depth[x]-depth[fa[top[x]]];\n\t\tx=fa[top[x]];\n\t}\n\treturn rk[id[x]-k];\n}\nint main(){\n    n=read(),q=read();\n    for(int i=1;i<=n;++i)a[i]=read();\n    int u,v,x,type;\n    for(int i=1;i<n;++i){\n        u=read(),v=read();\n        G[u].push_back(v),G[v].push_back(u);\n    }\n    dfs1(1);\n\tdfs2(1,1);\n\tbuild(1,1,n);\n    int t1,t2;\n    while(q--){\n        type=read();\n        if(type==1)root=read();\n        if(type==2){\n            u=read(),v=read(),x=read();\n            t1=lca(u,root),t2=lca(v,root);\n            if(t1==t2)t1=lca(u,v);\n            else if(depth[t2]>depth[t1])swap(t1,t2);\n            if(t1==root)change(1,1,n,x);\n            else if(lca(root,t1)==t1){\n                t2=la(root,t1);\n                change(1,1,n,x);\n                change(1,id[t2],id[t2]+siz[t2]-1,-x);\n\t\t\t}\n\t\t\telse change(1,id[t1],id[t1]+siz[t1]-1,x);\n\t\t}\n        if(type==3){\n            t1=read();\n            if(t1==root)printf(\"%lld\\n\",ask(1,1,n));\n            else if(lca(t1,root)==t1){\n            \tt2=la(root,t1);\n                printf(\"%lld\\n\",ask(1,1,n)-ask(1,id[t2],id[t2]+siz[t2]-1));\n            }\n            else printf(\"%lld\\n\",ask(1,id[t1],id[t1]+siz[t1]-1));\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1582600066,
        "uid": 104006,
        "name": "\u968f\u60c5\u82f1",
        "ccfLevel": 6,
        "title": "CF916E Jamie and Tree"
    },
    {
        "content": "\u8003\u8651\u5230\u8fd9\u9898\u8981\u6362\u6839\uff0c\n\n\u6709\u4e00\u79cd\u5f88\u7b80\u5355\u7684\u60f3\u6cd5\u5c31\u662f\u76f4\u63a5\u62ff\u9ad8\u7ea7\u52a8\u6001\u6811\u7b49\u6570\u636e\u7ed3\u6784\u8fc7\u53bb\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u505a\u6cd5\n\n---\n\n\u6211\u4eec\u5148\u968f\u4fbf\u4ee5 $1$ \u4e3a\u6839\uff0c\u500d\u589e\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 $2^k$ \u7ea7\u7236\u4eb2\n\n\u7136\u540e\u6bcf\u6b21\u662f\u8981\u8be2\u95ee\u5b50\u6811\u5185\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u628a\u5b83\u6620\u5c04\u5230 $\\text{DFS}$ \u5e8f\u4e0a\u3002\n\n\u8003\u8651\u5230\u64cd\u4f5c $2$ \u9700\u8981\u8be2\u95ee $\\text{LCA}$\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5\n\n\u7b2c\u4e00\u79cd\u662f\u5728\u8be2\u95ee\u7684\u65f6\u5019\u5904\u7406\uff0c\u7b2c\u4e8c\u79cd\u662f\u5728\u4fee\u6539\u7684\u65f6\u5019\u5904\u7406\n\n\u8fd9\u91cc\u8bb2\u7684\u662f\u4fee\u6539\u65f6\u5019\u5904\u7406\u7684\u65b9\u6cd5\u3002\n\n\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba $u,v$ \u7684\u60c5\u51b5\uff0c\n\n\u6211\u4eec\u8003\u8651\u5148\u6c42\u51fa $u,v$ \u5728\u65b0\u7684\u6811\u4e2d\u7684 $\\text{LCA}$\n\n\u8fd9\u4e2a $\\text{LCA} = lca(u,v),lca(u,root),lca(v,root)$ \u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u70b9\u3002\n\n\u6211\u4eec\u53d1\u73b0 $\\text{DFS}$ \u5e8f\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u6709\u70b9\u96be\u5904\u7406\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u6362\u4e2a\u89d2\u5ea6\u601d\u8003\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u5728\u539f\u6811\u4e0a\u6211\u4eec\u9700\u8981\u4fee\u6539\u7684\u4e1c\u897f\u3002\n\n\u5982\u679c\u6c42\u51fa\u7684 $\\text{LCA}$ \u5728\u539f\u6811\u4e2d\u662f $root$ \u7684\u7956\u5148\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u4fee\u6539\u7684\u533a\u95f4\u76f8\u5f53\u4e8e $[1,n] +x$ \uff0c\u4ee5\u53ca\u5c06\u591a\u4f59\u90e8\u5206 $-x$\n\n\u591a\u4f59\u90e8\u5206\u5728\u5b57\u5178\u5e8f\u4e0a\u662f\u8fde\u7eed\u7684\uff0c\u8bfb\u8005\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\n\n\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u5c31\u76f4\u63a5\u4fee\u6539 $\\texttt{LCA}$ \u7684\u5b50\u6811\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(nlogn)$ \u5c31\u62ff\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b $\\text{DFS}$ \u5373\u53ef",
        "postTime": 1574737844,
        "uid": 53807,
        "name": "Erusel",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF916E \u3010Jamie and Tree\u3011"
    },
    {
        "content": "**\u6211\u70ed\u7231\u6811\u94fe\u5256\u5206\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u8fd8\u662f\u7528\u6811\u94fe\u5256\u5206\u5199\u4e86\uff0c\u5c3d\u7ba1\u6709\u70b9\u6740\u9e21\u7528\u725b\u5200**\n\n**\u8fd9\u9053\u9898\u5927\u6982\u6709\u4ee5\u4e0b\u51e0\u4e2a\u96be\u70b9**\n\n****\n**\u9996\u5148\u662f\u6362\u6839\u60c5\u51b5\u4e0b\u7684\u5b50\u6811\u6743\u503c\u548c\u67e5\u8be2\uff0c\u4f46\u5982\u679c\u4f60\u505a\u8fc7\u6d1b\u8c37P3979\u9065\u8fdc\u7684\u56fd\u5ea6\u8fd9\u9053\u9898\uff0c\u800c\u4e14\u4f60\u8fd8\u662f\u7528\u6811\u94fe\u5256\u5206\u5199\u7684\uff0c\u4f60\u5927\u81f4\u5c31\u4f1a\u505a\u8fd9\u4e2a\u4e1c\u897f\u4e86\u3002**\n\n**\u7ef4\u62a4\u4e00\u4e2aLCA\uff0c\u7136\u540e\u4ece\u6839\u8282\u70b9\u8df3\u5230\u5f53\u524d\u8fd9\u4e2a\u5b50\u6811\u6839\u8282\u70b9\u7684\u513f\u5b50\u6240\u5904\u7684\u6df1\u5ea6\uff0c\u8bb0\u8fd9\u4e2a\u70b9\u4e3aA\uff0c\u5982\u679cA\u70b9\u7684\u7236\u4eb2\u662f\u6211\u4eec\u8be2\u95ee\u7684\u5b50\u6811\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u6839\u8282\u70b9\u5728\u5b50\u6811\u4e2d\uff0c\u6b64\u65f6\u5f53\u524d\u7684\u65b0\u5b50\u6811\u5c31\u662f\u9664\u4e86A\u70b9\u548cA\u70b9\u7684\u539f\u5b50\u6811\u4ee5\u5916\u7684\u6240\u6709\u70b9\uff0c\u5426\u5219\u7684\u8bdd\u5c31\u662f\u5b50\u6811\u6839\u8282\u70b9\u7684\u539f\u5b50\u6811\uff0c\u5f53\u7136\u4e5f\u8981\u7279\u5224\u4e00\u4e0b\uff0c\u5982\u679c\u6839\u8282\u70b9\u521a\u597d\u662f\u8981\u67e5\u8be2\u7684\u5b50\u6811\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u67e5\u8be2\u8303\u56f4\u5c31\u662f\u5168\u90e8\u8282\u70b9**\n\n**\u4fee\u6539\u4e5f\u662f\u540c\u7406\u7684**\n****\n**\u7136\u540e\u662f\u5305\u62ecu\u548cv\u7684\u6700\u5c0f\u5b50\u6811\uff0c\u753b\u4e00\u4e0b\u56fe\u5c31\u53ef\u4ee5\u77e5\u9053\u5b50\u6811\u7684\u6839\u8282\u70b9\u5e94\u8be5\u662fu\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0ev\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u7684\u7b2c\u4e00\u4e2a\u4ea4\u70b9**\n\n![](https://cdn.luogu.com.cn/upload/pic/17233.png)\n\n**\u8fd9\u4e2a\u4ea4\u70b9\u53ef\u4ee5\u901a\u8fc7\u5bf9\u6839\u548cu\uff0c\u6839\u548cv\uff0cv\u548cu\u4e24\u4e24\u53d6LCA\u540e\u53d6\u6df1\u5ea6\u6700\u5927\u7684\u70b9\u83b7\u5f97\uff0c\u633a\u7b80\u5355\u7684\u60f3\u6cd5\uff0c\u53ef\u4ee5\u81ea\u884c\u6a21\u62df\u4f53\u4f1a\u4e00\u4e0b**\n\n**\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u8fd9\u4e2a\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u4e4b\u540e\u7684\u64cd\u4f5c\u5c31\u662f\u6362\u6839\u60c5\u51b5\u4e0b\u5b50\u6811\u7684\u6743\u503c\u4fee\u6539\u4e86\uff0c\u8fd9\u5728\u4e0a\u9762\u5df2\u7ecf\u63d0\u5230\u8fc7\u4e86\uff0c\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002**\n****\n\n**\u4ee3\u7801\u5982\u4e0b\uff1a**\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define lson root<<1\n#define rson root<<1|1\nusing namespace std;\n\nstruct node\n{\n\tlong long l,r,sum,lazy;\n} tr[400040];\nlong long fa[100010][20],son[100010],size[100010],deep[100010],id[100010],c[100010],w[1000010],top[100010],cnt,rt,n,q;\nvector<long long> g[100010];\n\nvoid push_up(long long root)\n{\n\ttr[root].sum=tr[lson].sum+tr[rson].sum;\n}\n\nvoid push_down(long long root)\n{\n\tlong long mid=(tr[root].l+tr[root].r)>>1;\n\ttr[lson].sum+=tr[root].lazy*(mid-tr[root].l+1);\n\ttr[lson].lazy+=tr[root].lazy;\n\ttr[rson].sum+=tr[root].lazy*(tr[root].r-mid);\n\ttr[rson].lazy+=tr[root].lazy;\n\ttr[root].lazy=0;\n}\n\nvoid build(long long root,long long l,long long r)\n{\n\tif(l==r)\n\t{\n\t\ttr[root].l=l;\n\t\ttr[root].r=r;\n\t\ttr[root].sum=w[l];\n\t\treturn ;\n\t}\n\ttr[root].l=l;\n\ttr[root].r=r;\n\tlong long mid=(l+r)>>1;\n\tbuild(lson,l,mid);\n\tbuild(rson,mid+1,r);\n\tpush_up(root);\n}\n\nvoid update(long long root,long long l,long long r,long long val)\n{\n\tif(l>r)\n\t{\n\t\treturn;\n\t}\n\tif(l==tr[root].l&&r==tr[root].r)\n\t{\n\t\ttr[root].sum+=val*(tr[root].r-tr[root].l+1);\n\t\ttr[root].lazy+=val;\n\t\treturn ;\n\t}\n\tif(tr[root].lazy)\n\t{\n\t\tpush_down(root);\n\t}\n\tlong long mid=(tr[root].l+tr[root].r)>>1;\n\tif(l>mid)\n\t{\n\t\tupdate(rson,l,r,val);\n\t}\n\telse\n\t{\n\t\tif(r<=mid)\n\t\t{\n\t\t\tupdate(lson,l,r,val);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tupdate(lson,l,mid,val);\n\t\t\tupdate(rson,mid+1,r,val);\n\t\t}\n\t}\n\tpush_up(root);\n}\n\nlong long query(long long root,long long l,long long r)\n{\n\tif(l>r)\n\t{\n\t\treturn 0;\n\t}\n\tif(l==tr[root].l&&r==tr[root].r)\n\t{\n\t\treturn tr[root].sum;\n\t}\n\tlong long mid=(tr[root].l+tr[root].r)>>1;\n\tif(tr[root].lazy)\n\t{\n\t\tpush_down(root);\n\t}\n\tif(l>mid)\n\t{\n\t\treturn query(rson,l,r);\n\t}\n\telse\n\t{\n\t\tif(r<=mid)\n\t\t{\n\t\t\treturn query(lson,l,r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn query(lson,l,mid)+query(rson,mid+1,r);\n\t\t}\n\t}\n}\n\nvoid dfs1(long long now,long long f,long long dep)\n{\n\tdeep[now]=dep;\n\tfa[now][0]=f;\n\tsize[now]=1;\n\tlong long maxson=-1;\n\tfor(long long i=0; i<g[now].size(); i++)\n\t{\n\t\tif(g[now][i]==f)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tdfs1(g[now][i],now,dep+1);\n\t\tsize[now]+=size[g[now][i]];\n\t\tif(size[g[now][i]]>maxson)\n\t\t{\n\t\t\tmaxson=size[g[now][i]];\n\t\t\tson[now]=g[now][i];\n\t\t}\n\t}\n}\n\nvoid dfs2(long long now,long long topf)\n{\n\tid[now]=++cnt;\n\tw[cnt]=c[now];\n\ttop[now]=topf;\n\tif(!son[now])\n\t{\n\t\treturn ;\n\t}\n\tdfs2(son[now],topf);\n\tfor(long long i=0; i<g[now].size(); i++)\n\t{\n\t\tif(g[now][i]==fa[now][0]||g[now][i]==son[now])\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tdfs2(g[now][i],g[now][i]);\n\t}\n}\n\nlong long lca(long long u,long long v)\n{\n\tif(deep[u]<deep[v])\n\t{\n\t\tswap(u,v);\n\t}\n\tfor(long long i=17; i>=0; i--)\n\t{\n\t\tif(deep[fa[u][i]]>=deep[v])\n\t\t{\n\t\t\tu=fa[u][i];\n\t\t}\n\t}\n\tif(u==v)\n\t{\n\t\treturn u;\n\t}\n\tfor(long long i=17; i>=0; i--)\n\t{\n\t\tif(fa[u][i]!=fa[v][i])\n\t\t{\n\t\t\tu=fa[u][i];\n\t\t\tv=fa[v][i];\n\t\t}\n\t}\n\treturn fa[u][0];\n}\n\nlong long get_point(long long u,long long v)\n{\n\tlong long tmp=rt;\n\tlong long lca1=lca(tmp,u);\n\tlong long lca2=lca(tmp,v);\n\tlong long lca3=lca(u,v);\n\tif(deep[lca1]>=deep[lca2]&&deep[lca1]>=deep[lca3])\n\t{\n\t\treturn lca1;\n\t}\n\tif(deep[lca2]>=deep[lca1]&&deep[lca2]>=deep[lca3])\n\t{\n\t\treturn lca2;\n\t}\n\tif(deep[lca3]>=deep[lca1]&&deep[lca3]>=deep[lca2])\n\t{\n\t\treturn lca3;\n\t}\n}\n\nvoid sub_update(long long u,long long v,long long val)\n{\n\tlong long p=get_point(u,v);\n\tif(p==rt)\n\t{\n\t\tupdate(1,1,n,val);\n\t\treturn ;\n\t}\n\tlong long tmp=rt;\n\tfor(long long i=17; i>=0; i--)\n\t{\n\t\tif(deep[fa[tmp][i]]>deep[p])\n\t\t{\n\t\t\ttmp=fa[tmp][i];\n\t\t}\n\t}\n\tif(fa[tmp][0]!=p)\n\t{\n\t\tupdate(1,id[p],id[p]+size[p]-1,val);\n\t}\n\telse\n\t{\n\t\tupdate(1,1,id[tmp]-1,val);\n\t\tupdate(1,id[tmp]+size[tmp],n,val);\n\t}\n}\n\nlong long sub_query(long long x)\n{\n\tif(x==rt)\n\t{\n\t\treturn query(1,1,n);\n\t}\n\tlong long tmp=rt;\n\tfor(long long i=17; i>=0; i--)\n\t{\n\t\tif(deep[fa[tmp][i]]>deep[x])\n\t\t{\n\t\t\ttmp=fa[tmp][i];\n\t\t}\n\t}\n\tif(fa[tmp][0]!=x)\n\t{\n\t\treturn query(1,id[x],id[x]+size[x]-1);\n\t}\n\telse\n\t{\n\t\treturn query(1,1,id[tmp]-1)+query(1,id[tmp]+size[tmp],n);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%lld%lld\",&n,&q);\n\tfor(long long i=1; i<=n; i++)\n\t{\n\t\tscanf(\"%lld\",&c[i]);\n\t}\n\tfor(long long i=1; i<=n-1; i++)\n\t{\n\t\tlong long from,to;\n\t\tscanf(\"%lld%lld\",&from,&to);\n\t\tg[from].push_back(to);\n\t\tg[to].push_back(from);\n\t}\n\trt=1;\n\tdfs1(1,0,1);\n\tdfs2(1,1);\n\tbuild(1,1,n);\n\tfor(long long j=1; j<=17; j++)\n\t{\n\t\tfor(long long i=1; i<=n; i++)\n\t\t{\n\t\t\tfa[i][j]=fa[fa[i][j-1]][j-1];\n\t\t}\n\t}\n\twhile(q--)\n\t{\n\t\tlong long kd;\n\t\tscanf(\"%lld\",&kd);\n\t\tif(kd==1)\n\t\t{\n\t\t\tscanf(\"%lld\",&rt);\n\t\t}\n\t\tif(kd==2)\n\t\t{\n\t\t\tlong long u,v,val;\n\t\t\tscanf(\"%lld%lld%lld\",&u,&v,&val);\n\t\t\tsub_update(u,v,val);\n\t\t}\n\t\tif(kd==3)\n\t\t{\n\t\t\tlong long v;\n\t\t\tscanf(\"%lld\",&v);\n\t\t\tprintf(\"%lld\\n\",sub_query(v));\n\t\t}\n\t}\n}\n```",
        "postTime": 1523428298,
        "uid": 48740,
        "name": "Styx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF916E \u3010Jamie and Tree\u3011"
    }
]