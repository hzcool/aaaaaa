[
    {
        "content": "\u8bf4\u4e00\u4e2a\u8fc7\u5f97\u53bb\u7684 $O(n\\sqrt n)$ \u505a\u6cd5.  \n\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u7b54\u6848\u6700\u5927\u53ea\u6709 $\\sqrt{2n}$ ,\u800c\u4e14\u4e32\u7684\u957f\u5ea6\u4e00\u5b9a\u662f $ans,ans-1,ans-2,...,3,2,1$ .  \n\n\u679a\u4e3e\u7b54\u6848 $ans$ ,\u8bbe $f_i$ \u4e3a\u5f53\u524d\u7b54\u6848\u4e0b\u4ee5 $i$ \u5f00\u5934\u7684\u540e\u7f00\u662f\u5426\u53ef\u884c.  \n\n\u4ece\u540e\u5f80\u524d\u679a\u4e3e,\u5e76\u4e0d\u65ad\u5411\u54c8\u5e0c\u8868\u4e2d\u52a0\u5165\u957f\u5ea6\u4e3a $ans-1$ \u7684\u4e0d\u4e0e $[i,i+ans-1]$ \u91cd\u53e0\u7684\u4e32,\u8f6c\u79fb\u65f6\u67e5\u8be2 $[i,i+ans-2]$ \u6216 $[i+1,i+ans-1]$ \u662f\u5426\u51fa\u73b0\u8fc7\u5373\u53ef.  \n\n\u56e0\u4e3a\u6bcf\u6b21\u7528\u5230\u7684\u54c8\u5e0c\u503c\u957f\u5ea6\u90fd\u4e3a $ans-1$ ,\u6240\u4ee5\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4\u67d0\u4e2a\u56fa\u5b9a\u957f\u5ea6\u7684\u54c8\u5e0c\u503c.  \n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int N=500010;\nconst int P=7000007,B=37;\nint del(int x) { return x>=P?x-P:x; }\nint h[N];\nchar s[N];\nbitset <P+10> b;\nbitset <N> f[1001];\nint main ()\n{\n    int n; scanf (\"%d%s\",&n,s+1);\n    for (int i=1; i<=n; i++)\n        h[i]=s[i]-'a'+1;\n    int sq=sqrt (n<<1)+1,sum=1; f[1].set ();\n    for (int ans=2; ans<=sq; ans++)\n    {\n        sum+=ans;\n        for (int i=n-sum+1; i>=1; i--)\n        {\n            int p=i+ans;\n            if (f[ans-1][p]) b[h[p]]=1;\n            if (b[h[i]]||b[h[i+1]]) f[ans][i]=1;\n        }\n        if (f[ans].none ()) return printf (\"%d\\n\",ans-1),0;\n        b.reset ();\n        for (int i=1; i<=n-sum+1; i++)\n            h[i]=del((LL)h[i]*B%P+s[i+ans-1]-'a'+1);\n    }\n    printf (\"%d\\n\",sq);\n\n    return 0;\n}\n\n```",
        "postTime": 1581426195,
        "uid": 109716,
        "name": "ILoLy",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1063F \u3010String Journey\u3011"
    },
    {
        "content": "### \u6027\u8d28 1\n\n\u4e00\u5b9a\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u7684\u6709\u5e8f\u4e32\u7ec4\uff0c\u4f7f\u5f97\u7b2c $i$ \u4e2a\u4e32\u7684\u957f\u5ea6\u662f\u7b2c $i+1$ \u4e2a\u4e32\u7684\u957f\u5ea6 $+1$\u3002\n\n### \u8bc1\u660e\n\n\u82e5\u5bf9\u4e8e\u5b57\u7b26\u4e32 $i$ \u4e0d\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u5219\u53ef\u4ee5\u5220\u6389\u5b57\u7b26\u4e32 $i$ \u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u4e00\u4e9b\u5b57\u7b26\u4f7f\u5f97\u7b2c $i$ \u4e2a\u4e32\u7684\u957f\u5ea6\u53d8\u4e3a\u7b2c $i+1$ \u4e2a\u4e32\u7684\u957f\u5ea6 $+1$\uff0c\u4e14\u539f\u6709\u5e8f\u4e32\u7ec4\u4ecd\u7136\u6ee1\u8db3\u4e0a\u8ff0\u6027\u8d28\uff08\u56e0\u4e3a\u5220\u9664\u5b57\u7b26\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u5b57\u7b26\u4e32 $i$ \u4e0d\u518d\u662f\u5b57\u7b26\u4e32 $i-1$ \u7684\u5b50\u4e32\uff09\u3002\n\n### \u6027\u8d28 2\n\n\u82e5\u5bf9\u4e8e\u4e00\u4e2a\u4f4d\u7f6e $i$\uff0c\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a $t$ \u7684\u6709\u5e8f\u4e32\u7ec4\uff0c\u4f7f\u5f97\u8be5\u4e32\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ece\u4f4d\u7f6e $i$ \u5f00\u59cb\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a $t-1$ \u7684\u6709\u5e8f\u4e32\u7ec4\uff0c\u4f7f\u5f97\u8be5\u4e32\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e5f\u4ece\u4f4d\u7f6e $i$ \u5f00\u59cb\u3002\n\n### \u8bc1\u660e\n\n\u7531\u4e0a\u4e00\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u77e5\u9053\u8fd9\u4e2a\u6709\u5e8f\u4e32\u7ec4\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4f9d\u6b21\u4e3a $t,t-1,\\cdots,1$\u3002\n\n\u6211\u4eec\u5148\u5220\u6389\u539f\u957f\u5ea6\u4e3a $t$ \u7684\u6709\u5e8f\u4e32\u7ec4\u4e2d\u7684\u957f\u5ea6\u4e3a $1$ \u7684\u5b57\u7b26\u4e32\uff0c\u518d\u5220\u6389\u6709\u5e8f\u4e32\u7ec4\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5c31\u80fd\u6784\u9020\u4e00\u4e2a\u5408\u6cd5\u7684\u957f\u5ea6\u4e3a $t-1$ \u7684\u6709\u5e8f\u4e32\u7ec4\u3002\n\n\u7531\u6027\u8d28 2\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u5fc3\u4ece\u6bcf\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u957f\u5ea6**\u6700\u957f**\u7684\u6709\u5e8f\u4e32\u7ec4\uff0c\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a $dp$\u3002\n\n\u8bbe $dp[i]$ \u8868\u793a\u4ece $i$ \u4f4d\u7f6e\u5f00\u59cb\u957f\u5ea6\u6700\u957f\u7684\u6709\u5e8f\u4e32\u7ec4\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u8003\u8651\u600e\u4e48\u8f6c\u79fb\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n\u6211\u4eec\u679a\u4e3e $j (j>i)$\uff0c\u6c42\u51fa $\\min\\{j-i+1,\\max\\{LCP(i,j),LCP(i+1,j)\\},dp[j]+1\\}$\uff0c\u5176\u4e2d $LCP(i,j)$ \u8868\u793a\u4e32 $s$ \u4e2d $i$ \u4f4d\u7f6e\u548c $j$ \u4f4d\u7f6e\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\uff0c\u7136\u540e\u8bd5\u56fe\u7528\u8fd9\u4e2a\u4e1c\u897f\u6765\u66f4\u65b0 $dp[i]$ \u5373\u53ef\u3002\n\n\u8fd9\u6837\u8f6c\u79fb\u662f $n^2$ \u7684\uff0c\u4e0d\u80fd\u901a\u8fc7\uff0c\u8003\u8651\u5982\u4f55\u4f18\u5316\u3002\n\n### \u6027\u8d28 3\n\n$dp[i+1]\\geq dp[i]-1$\n\n### \u8bc1\u660e\n\n\u540c\u6027\u8d28 2\uff0c\u6211\u4eec\u7ed9\u4ece $i$ \u4f4d\u7f6e\u5f00\u59cb\u7684\u6700\u957f\u6709\u5e8f\u4e32\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5220\u9664\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5373\u53ef\u6784\u9020\u4e00\u79cd\u4ece $i+1$ \u5f00\u59cb\u7684\uff0c\u957f\u5ea6\u4e3a $dp[i]-1$ \u7684\u6709\u5e8f\u4e32\u7ec4\u7684\u65b9\u6848\u3002\n\n\n\u79fb\u4e00\u4e0b\u9879\u53ef\u4ee5\u5f97\u5230 $dp[i]\\leq dp[i+1]+1$\uff0c\u4e8e\u662f\u8003\u8651\u8bbe $dp[i]=dp[i+1]+1$\u3002\n\n\u7531\u6027\u8d28 $2$\uff0c\u6211\u4eec\u53ef\u4ee5\u9010\u4e2a\u5224\u65ad $dp[i]$ \u662f\u5426\u5408\u6cd5\uff0c\u82e5\u4e0d\u5408\u6cd5\u5219\u4ee4 $dp[i]$ \u51cf\u5c11 $1$\uff0c\u4e4b\u540e\u518d\u6b21\u5224\u65ad\u3002\n\n\u7531\u4e8e $i$ \u6bcf\u51cf\u5c11 $1$\uff0c$dp[i]$ \u6700\u591a\u589e\u52a0 $1$\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\times chk)$ \u7684\uff08$chk$ \u662f\u4e00\u6b21\u5224\u65ad\u5408\u6cd5\u6240\u6d88\u8017\u7684\u65f6\u95f4\uff09\u3002\n\n\u8003\u8651 $dp[i]$ \u5408\u6cd5\u7684\u6761\u4ef6\uff0c\u5c31\u662f\u5b58\u5728\u4e00\u4e2a\u4f4d\u7f6e $j$\uff0c\u4f7f\u5f97 $s[j...j+dp[i]-2]$ \u662f $s[i...i+dp[i]-1]$ \u7684\u5b50\u4e32\uff0c\u4e14 $dp[j]\\geq dp[i]-1$\u3002\n\n\u4ee4 $suffix[i]$ \u8868\u793a $s$ \u4ece $i$ \u5f00\u59cb\u7684\u540e\u7f00\u3002\n\n\u7531\u6027\u8d28 1\uff0c\u5b50\u4e32\u4e00\u5b9a\u662f\u5220\u53bb\u5f00\u5934\u5b57\u7b26\u6216\u7ed3\u5c3e\u5b57\u7b26\uff0c\u4e0d\u96be\u53d1\u73b0\u6ee1\u8db3 $s[j...j+dp[i]-2]$ \u662f $s[i...i+dp[i]-1]$ \u7684\u5b50\u4e32\u7684 $j$ \u53ea\u6709\u4e24\u79cd\uff1a\n\n1. $s[i...i+dp[i]-2]$ \u662f $suffix[j]$ \u7684\u524d\u7f00\n\n2. $s[i+1...i+dp[i]-1]$ \u662f $suffix[j]$ \u7684\u524d\u7f00\n\n\n\u770b\u5230\u524d\u7f00\uff0c\u8fd9\u8ba9\u6211\u4eec\u60f3\u8d77\u4e86\u540e\u7f00\u6811\u3002\u540e\u7f00\u6811\u6ee1\u8db3\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u8282\u70b9 $u$\uff0c\u82e5 $v$ \u662f $u$ \u5728\u540e\u7f00\u6811\u4e2d\u7684\u540e\u4ee3\uff0c\u5219 $u$ \u8282\u70b9\u4ee3\u8868\u7684\u4efb\u610f\u4e32\u90fd\u662f $v$ \u8282\u70b9\u4ee3\u8868\u4e32\u7684\u524d\u7f00\u3002\n\n\u95ee\u9898\u53d8\u6210\u4e86\u67e5\u8be2\u540e\u7f00\u6811\u7684\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32 $str$\uff0c\u8bbe $str$ \u5f00\u5934\u7684\u4f4d\u7f6e\u662f $j$\uff0c\u6ee1\u8db3 $j\\geq i+dp[i]$ \u4e14 $dp[j]\\geq dp[i]-1$\u3002\n\n\u540e\u7f00\u6811\u53ef\u4ee5\u4f7f\u7528\u5bf9\u53cd\u4e32\u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a\u6c42\u5f97\u3002\n\n\u5c06\u540e\u7f00\u6811\u7684 $dfs$ \u5e8f\u9884\u5904\u7406\u51fa\u6765\u540e\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e24\u79cd\u64cd\u4f5c\uff0c\u7b2c\u4e00\u79cd\uff0c\u5728\u4e00\u4e2a\u4f4d\u7f6e\u63d2\u5165 $(dp[j],j)$\uff0c\u7b2c\u4e8c\u79cd\uff0c\u533a\u95f4\u67e5\u8be2\u662f\u5426\u5b58\u5728\u4e8c\u5143\u7ec4 $(x,y)$ \u6ee1\u8db3 $x\\geq a$ \u4e14 $y\\geq b$\uff0c\u8fd9\u662f\u7ecf\u5178\u7684\u4e8c\u7ef4\u504f\u5e8f\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n\u4e0d\u8fc7\uff0c\u7531\u4e8e\u6bcf\u6b21\u8981\u4e48\u8ba9 $dp[i]$ \u51cf\u5c11 $1$\uff0c\u8981\u4e48\u8ba9 $i$ \u51cf\u5c11 $1$ \u540c\u65f6\u8ba9 $dp[i]$ \u589e\u52a0 $1$\uff0c\u6240\u4ee5 $i+dp[i]$ \u662f\u5355\u8c03\u4e0d\u589e\u7684\uff0c\u4e8e\u662f\u4e8c\u7ef4\u504f\u5e8f\u7684\u7b2c\u4e8c\u7ef4\u5c31\u6ca1\u6389\u4e86\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint son[1000050][26],fail[1000050],len[1000050];\nint pcnt,lst;\nint pos[500050];\n\nint new_node()\n{\n\treturn ++ pcnt;\n}\n\nvoid init()\n{\n\tlen[0] = -1;\n\tpcnt = lst = 1;\n}\n\nvoid append(char c)\n{\n\tc -= 'a';\n\tint cur = new_node();\n\tint p = lst;\n\tlen[cur] = len[p] + 1;\n\twhile(p && !son[p][c])\n\t\tson[p][c] = cur,p = fail[p];\n\tif(!p) fail[cur] = 1;\n\telse\n\t{\n\t\tint q = son[p][c];\n\t\tif(len[q] == len[p] + 1)\n\t\t\tfail[cur] = q;\n\t\telse\n\t\t{\n\t\t\tint clone = new_node();\n\t\t\tlen[clone] = len[p] + 1; fail[clone] = fail[q];\n\t\t\tmemcpy(son[clone],son[q],sizeof(son[q]));\n\t\t\tfail[q] = fail[cur] = clone;\n\t\t\twhile(p && son[p][c] == q)\n\t\t\t\tson[p][c] = clone,p = fail[p];\n\t\t}\n\t}\n\tlst = cur;\n}\n\nvector<int> sn[1000050];\nchar str[500050];\n\nvoid Build()\n{\n\tfor(int i = pcnt;i > 1; -- i)\n\t\tsn[fail[i]].push_back(i);\n}\n\nint dfn[1000050],ed[1000050],dcnt;\nint fa[1000050][20];\n\nvoid dfs(int pos)\n{\n\tfor(int i = 1;i <= 19; ++ i)\n\t\tfa[pos][i] = fa[fa[pos][i - 1]][i - 1];\n\tdfn[pos] = ++ dcnt;\n\tfor(auto v : sn[pos])\n\t\tfa[v][0] = pos,dfs(v);\n\ted[pos] = dcnt;\n}\n\nstruct Segment_Tree\n{\n\tint val[4000050];\n\tvoid Push_Up(int rt)\n\t{\n\t\tval[rt] = max(val[rt << 1],val[rt << 1 | 1]);\n\t}\n\tvoid Update(int rt,int l,int r,int po,int vl)\n\t{\n\t\tif(l == r)\n\t\t{\n\t\t\tval[rt] = vl;\n\t\t\treturn ;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tif(mid >= po) Update(rt << 1,l,mid,po,vl);\n\t\telse Update(rt << 1 | 1,mid + 1,r,po,vl);\n\t\tPush_Up(rt);\n\t}\n\tint Query(int rt,int l,int r,int ll,int rr)\n\t{\n\t\tif(ll <= l && r <= rr) return val[rt];\n\t\tint mid = (l + r) >> 1;\n\t\tif(mid >= rr) return Query(rt << 1,l,mid,ll,rr);\n\t\tif(mid < ll) return Query(rt << 1 | 1,mid + 1,r,ll,rr);\n\t\treturn max(Query(rt << 1,l,mid,ll,rr),Query(rt << 1 | 1,mid + 1,r,ll,rr));\n\t}\n}tree;\n\nint dp[500050];\n\nint locate(int u,int k)\n{\n\tif(!u) return 0;\n\tfor(int i = 19;i >= 0; -- i)\n\t\tif(len[fa[u][i]] >= k)\n\t\t\tu = fa[u][i];\n\treturn u;\n}\n\nbool chk(int po)\n{\n\tint p1 = locate(pos[po],dp[po] - 1);\n\tint p2 = locate(pos[po - 1],dp[po] - 1);\n\tif(p1 && tree.Query(1,1,dcnt,dfn[p1],ed[p1]) >= dp[po] - 1) return true;\n\tif(p2 && tree.Query(1,1,dcnt,dfn[p2],ed[p2]) >= dp[po] - 1) return true;\n\treturn false;\n}\n\nint main()\n{\n\tint n; scanf(\"%d\",&n);\n\tscanf(\"%s\",str + 1);\n\treverse(str + 1,str + 1 + n); init();\n\tfor(int i = 1;i <= n; ++ i)\n\t\tappend(str[i]),pos[i] = lst;\n\tBuild(); dfs(1);\n\tint cur = 0,as = 0;\n\tfor(int i = 1;i <= n; ++ i)\n\t{\n\t\tdp[i] = dp[i - 1] + 1;\n\t\twhile(!chk(i))\n\t\t{\n\t\t\tdp[i] --;\n\t\t\tcur ++;\n\t\t\ttree.Update(1,1,dcnt,dfn[pos[cur]],dp[cur]);\n\t\t}\n\t\tas = max(as,dp[i]);\n\t}\n\tprintf(\"%d\\n\",as);\n}\n```",
        "postTime": 1591877531,
        "uid": 25308,
        "name": "Wen_kr",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1063F \u3010String Journey\u3011"
    },
    {
        "content": "- Update on 2022.10.27\uff1a\u4fee\u6539 typo\u3002\n\n> [CF1063F String Journey](https://www.luogu.com.cn/problem/CF1063F)\n\n\u63d0\u4f9b\u4e00\u4e2a\u7ebf\u6027\u4e14 DP \u90e8\u5206\u975e\u5e38\u597d\u7406\u89e3\uff0c\u975e\u5e38\u597d\u5199\u7684\u505a\u6cd5\u3002\n\n\u5c06\u5b57\u7b26\u4e32\u7ffb\u8f6c\uff0c$t$ \u7684\u9650\u5236\u66f4\u65b0\u4e3a $t_i$ \u4e3a $t_{i + 1}$ \u7684\u5b50\u4e32\uff0c\u663e\u7136\u8fd9\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\n\n\u6211\u4eec\u6709\u4ee5\u4e0b\u4e24\u6761\u7ed3\u8bba\uff0c\u5176\u5b83\u9898\u89e3\u5df2\u7ecf\u89e3\u91ca\u5f97\u5f88\u6e05\u695a\u4e86\uff1a\n\n- $|t_i| = i$\u3002\u627e\u5230\u7b2c\u4e00\u4e2a\u4f7f\u5f97 $|t_i| > i$ \u7684\u4f4d\u7f6e\uff0c\u4e00\u5b9a\u53ef\u4ee5\u5220\u53bb\u5f00\u5934\u6216\u672b\u5c3e\u4e14\u4e0d\u5f71\u54cd\u5408\u6cd5\u6027\u3002\n- \u8bbe $f_i$ \u8868\u793a\u4f7f\u5f97\u5b58\u5728 $t_k$ \u6ee1\u8db3 $t_k$ \u4ee5 $s_i$ \u7ed3\u5c3e\u7684\u6700\u5927\u7684 $k$\uff0c\u5373\u5bf9 $s[1, i]$ \u6c42\u89e3\u539f\u95ee\u9898\u4e14 $|t_k| = k$ \u4e14\u5f3a\u5236 $t_k$ \u53d6\u5230 $s_i$\uff0c\u90a3\u4e48 $(i - 1) - f_{i - 1} + 1 \\leq i - f_i + 1$\u3002\u53cd\u8bc1\u6cd5\uff0c\u6613\u8bc1\u82e5 $f_i$ \u53ef\u4ee5\u66f4\u5927\uff0c\u82e5 $f_{i - 1}$ \u603b\u53ef\u4ee5\u66f4\u5927\u3002\n\n\u65e2\u7136 $i - f_i + 1$ \u968f\u7740 $i$ \u589e\u5927\u5177\u6709\u5355\u8c03\u6027\uff0c\u4e0d\u96be\u60f3\u5230\u53cc\u6307\u9488\u3002\u6211\u4eec\u5b9e\u65f6\u7ef4\u62a4 $l, r$ \u8868\u793a $l = r - f_r + 1$\uff0c\u5219 $l, r$ \u5355\u8c03\u4e0d\u964d\u3002\u5efa\u51fa SAM\uff0c\u7ef4\u62a4 $p$ \u8868\u793a $s[l, r]$ \u5728 SAM \u4e0a\u7684\u72b6\u6001\u3002\n\n\u5f53 $r\\to r + 1$ \u65f6\uff0c\u6211\u4eec\u68c0\u67e5\u5f53\u524d $s[l, r]$ \u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a $t_k$\uff0c\u79f0\u4e3a\u5408\u6cd5\u3002\u82e5\u4e0d\u5408\u6cd5\uff0c\u5219\u4e0d\u65ad\u5c06 $l$ \u589e\u5927\uff0c\u76f4\u5230 $l = r$\u3002\u5224\u5b9a\u5408\u6cd5\u7684\u6761\u4ef6\u5bb9\u6613\u901a\u8fc7\u5b9e\u9645\u610f\u4e49\u63a8\u5bfc\u5f97\u51fa\uff1a\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728 $s[l', r']$ \u4f7f\u5f97 $r' < l$ \u4e14 $s[l', r']$ \u4e3a $s[l, r]$ \u53bb\u6389\u5f00\u5934\u6216\u7ed3\u5c3e\u4e14 $s[l', r']$ \u5408\u6cd5\u3002\u6b64\u5916\uff0c\u82e5 $s[l, r]$ \u5408\u6cd5\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f $i\\in [l, r]$\uff0c$s[i, r]$ \u5408\u6cd5\u3002\n\n\u7efc\u5408\u4e0a\u8ff0\u5206\u6790\uff0c\u7ed3\u5408 $l$ \u4e0d\u964d\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7b97\u6cd5\uff1a\n\n- \u7ef4\u62a4 $g_p$ \u8868\u793a SAM \u4e0a\u72b6\u6001 $p$ \u5bf9\u5e94\u7684\u6700\u957f\u5408\u6cd5\u5b50\u4e32\u957f\u5ea6\u3002\n\n- \u5728\u6307\u9488\u72b6\u6001\u4e3a $l, r$ \u65f6\uff0c$g$ \u53ea\u8003\u8651\u6240\u6709\u53f3\u7aef\u70b9\u5c0f\u4e8e $l$ \u7684\u5408\u6cd5\u4e32\u3002\n- \u68c0\u67e5 $s[l, r]$ \u662f\u5426\u5408\u6cd5\uff0c\u53ea\u9700\u68c0\u67e5 $s[l, r - 1]$ \u5bf9\u5e94\u7684 $g$ \u548c $s[l + 1, r]$ \u5bf9\u5e94\u7684 $g$ \u7684\u8f83\u5927\u503c\u662f\u5426 $\\geq r - l$\u3002\u82e5\u5408\u6cd5\u5219\u9000\u51fa\u3002\n- \u82e5\u4e0d\u5408\u6cd5\uff0c\u5219\u5c06\u6240\u6709\u4ee5 $l$ \u4e3a\u53f3\u7aef\u70b9\u7684\u5408\u6cd5\u4e32 $s[i, l](l - f_l + 1\\leq i \\leq l)$ \u6807\u8bb0\u4e3a\u5408\u6cd5\u3002\u5177\u4f53\u5730\uff0c\u8003\u8651 $p$ \u8868\u793a $s[l - f_l + 1, l]$ \u5bf9\u5e94\u7684\u72b6\u6001\uff0c\u5c06 $g_p$ \u548c $f_l$ \u53d6 $\\max$\u3002\u7136\u540e\u4e0d\u65ad\u8df3 $p$ \u7684\u7956\u5148\uff0c\u82e5 $g_p = \\mathrm{len}(p)$\uff0c\u8bf4\u660e\u5f53\u524d $p$ \u7684\u6240\u6709\u7956\u5148 $a$ \u5747\u6ee1\u8db3 $g_a = \\mathrm{len}(a)$\uff0c\u4e0d\u9700\u8981\u518d\u5411\u4e0a\u8df3\u4e86\uff1b\u5426\u5219\u4ee4 $g_p$ \u66f4\u65b0\u4e3a $\\mathrm{len}(p)$\u3002\u6700\u540e $l\\to l + 1$\u3002\n\n\u5c0f\u7ec6\u8282\uff1a\u5f53\u524d $s[l, r]$ \u7684\u72b6\u6001 $p$ \u5bb9\u6613\u7ef4\u62a4\uff0c\u800c $s[l, r - 1]$ \u7684\u72b6\u6001\u53ef\u4ee5\u5728 $r\\to r + 1$ \u4e4b\u95f4\u8bb0\u5f55 $q = p$ \u5feb\u901f\u6c42\u5f97\u3002\n\n$\\max f_i$ \u5373\u4e3a\u6240\u6c42\u3002\u89c6\u5b57\u7b26\u96c6\u4e3a\u5e38\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u644a $\\mathcal{O}(n)$\u3002[\u4ee3\u7801](https://codeforces.com/contest/1063/submission/177820601)\u3002",
        "postTime": 1666670932,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1063F String Journey"
    },
    {
        "content": "\u9996\u5148\u5c06\u5b57\u7b26\u4e32\u7ffb\u8f6c\uff0c\u76f8\u5e94\u5730\uff0c\u6709\u5e8f\u4e32\u7ec4\u4e5f\u5c31\u7ffb\u8f6c\u4e86\uff0c\u5373\u4e3a\u6c42\u6700\u957f\u7684\u957f\u5ea6\u9012\u589e\u7684\u6709\u5e8f\u4e32\u7ec4\uff0c\u6ee1\u8db3\u7b2c $i$ \u4e2a\u4e32\u662f\u7b2c $i+1$ \u4e2a\u4e32\u7684\u5b50\u4e32\u3002\u8fdb\u884c\u8d2a\u5fc3\uff0c\u53d1\u73b0\u6700\u4f18\u79c0\u60c5\u51b5\u4e0b\u6709\u5e8f\u4e32\u7ec4\u4e2d\u7684\u4e32\u957f\u4e00\u5b9a\u662f\u9010\u6e10\u52a0 $1$ \u7684\uff0c\u5373\u957f\u5ea6\u4e3a $1,2,3,\\dots$\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5bf9\u4e0d\u662f\u9010\u6e10\u52a0 $1$ \u7684\u4f4d\u7f6e\u5220\u53bb\u4e00\u4e9b\u5b57\u7b26\uff0c\u6765\u4f7f\u4e4b\u540e\u80fd\u5339\u914d\u66f4\u591a\uff0c\u6240\u4ee5\u8fd9\u6837\u662f\u6700\u4f18\u7684\u3002\n\n\u8003\u8651 $DP$\uff0c\u8bbe $dp_i$ \u4e3a\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728 $i$ \u4f4d\u7f6e\u7ed3\u675f\u7684\u6700\u957f\u6709\u5e8f\u4e32\u7ec4\u7684\u957f\u5ea6\u3002\u6709\u5e8f\u4e32\u7ec4\u7684\u957f\u5ea6\u662f\u5177\u6709\u5355\u8c03\u6027\u7684\uff0c\u53ef\u4ee5\u4e8c\u5206\u3002\u4e8c\u5206\u957f\u5ea6 $lenth$\uff0c\u56e0\u4e3a\u4e32\u957f\u662f\u9010\u6e10\u52a0 $1$ \u7684\uff0c\u6240\u4ee5\u4e0a\u4e00\u4e2a\u4e32\u4e00\u5b9a\u662f\u5f53\u524d\u4e32\u5220\u53bb\u5f00\u5934\u5b57\u7b26\u6216\u5220\u53bb\u7ed3\u5c3e\u5b57\u7b26\u5f62\u6210\u7684\uff0c\u90a3\u4e48\u5c31\u662f\u627e $s[i-lenth+1,i]$ \u548c $s[i-lenth,i-1]$ \u5728\u4e4b\u524d\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u6839\u636e\u7ed3\u5c3e\u4f4d\u7f6e\u7684 $dp$ \u503c\u662f\u5426\u5927\u4e8e\u7b49\u4e8e $dp_{i}-1$ \u5224\u5b9a\u5373\u53ef\u3002\u51fa\u73b0\u4f4d\u7f6e\u53ef\u4ee5\u901a\u8fc7\u5728 $SAM$ \u7684 $Parent$ \u6811\u4e0a\u67e5\u8be2\u5b50\u6811\uff0c\u7528\u7ebf\u6bb5\u6811\u6765\u8fdb\u884c\u7ef4\u62a4\u6700\u5927\u503c\u3002\n\n\u53d1\u73b0\u6709 $dp_i -1 \\leqslant dp_{i-1}$\uff0c\u56e0\u4e3a\u4e00\u5b9a\u5b58\u5728\u4e00\u79cd $dp_{i-1}$ \u7684\u65b9\u6848\u53ef\u4ee5\u7528 $dp_i$ \u7684\u65b9\u6848\u91cc\u6bcf\u4e2a\u4e32\u5220\u53bb\u4e00\u4e2a\u5b57\u7b26\u6765\u8868\u793a\u51fa\u6765\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u4e8c\u5206\uff0c\u76f4\u63a5\u679a\u4e3e\u5373\u53ef\uff0c$dp_i$ \u6bcf\u6b21\u6700\u591a\u52a0 $1$\uff0c\u5f97\u679a\u4e3e\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002\u53d1\u73b0 $i-lenth$ \u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e00\u4e2a\u6307\u9488\u6765\u7ef4\u62a4\u5224\u5b9a\u7684\u8303\u56f4\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 1000010\n#define maxm 4000010\n#define ls (cur<<1)\n#define rs (cur<<1|1)\n#define mid ((l+r)>>1)\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,ans,tot=1,las=1,root=1,cnt,pos;\nint fa[maxn],len[maxn],ch[maxn][26],bel[maxn],dp[maxn];\nint in[maxn],out[maxn],f[maxn][22],mx[maxm];\nchar s[maxn];\nstruct edge\n{\n    int to,nxt;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to)\n{\n    e[++edge_cnt]={to,head[from]},head[from]=edge_cnt;\n}\nvoid modify(int l,int r,int pos,int v,int cur)\n{\n    if(l==r)\n    {\n        mx[cur]=v;\n        return;\n    }\n    if(pos<=mid) modify(l,mid,pos,v,ls);\n    else modify(mid+1,r,pos,v,rs);\n    mx[cur]=max(mx[ls],mx[rs]);\n}\nint query(int L,int R,int l,int r,int cur)\n{\n    if(!L||!R) return 0;\n    if(L<=l&&R>=r) return mx[cur];\n    int v=0;\n    if(L<=mid) v=max(v,query(L,R,l,mid,ls));\n    if(R>mid) v=max(v,query(L,R,mid+1,r,rs));\n    return v;\n}\nvoid insert(int c,int id)\n{\n    int p=las,np=las=++tot;\n    len[np]=len[p]+1,bel[id]=np;\n    while(p&&!ch[p][c]) ch[p][c]=np,p=fa[p];\n    if(!p) fa[np]=root;\n    else\n    {\n        int q=ch[p][c];\n        if(len[q]==len[p]+1) fa[np]=q;\n        else\n        {\n            int nq=++tot;\n            memcpy(ch[nq],ch[q],sizeof(ch[q]));\n            len[nq]=len[p]+1,fa[nq]=fa[q],fa[np]=fa[q]=nq;\n            while(ch[p][c]==q) ch[p][c]=nq,p=fa[p];\n        }\n    }\n}\nvoid dfs(int x)\n{\n    in[x]=++cnt,f[x][0]=fa[x];\n    for(int i=1;i<=20;++i) f[x][i]=f[f[x][i-1]][i-1];\n    for(int i=head[x];i;i=e[i].nxt) dfs(e[i].to);\n    out[x]=cnt;\n}\nint get(int x,int lenth)\n{\n    x=bel[x];\n    for(int i=20;i>=0;--i)\n        if(f[x][i]&&len[f[x][i]]>=lenth)\n            x=f[x][i];\n    return x;\n}\nbool check(int p)\n{\n    int x=get(p,dp[p]-1),y=get(p-1,dp[p]-1);\n    return max(query(in[x],out[x],1,tot,root),query(in[y],out[y],1,tot,root))>=dp[p]-1;\n}\nint main()\n{\n    read(n),scanf(\"%s\",s+1),reverse(s+1,s+n+1);\n    for(int i=1;i<=n;++i) insert(s[i]-'a',i);\n    for(int i=2;i<=tot;++i) add(fa[i],i);\n    dfs(root);\n    for(int i=1;i<=n;++i)\n    {\n        dp[i]=dp[i-1]+1;\n        while(!check(i))\n            dp[i]--,pos++,modify(1,tot,in[bel[pos]],dp[pos],root);\n        ans=max(ans,dp[i]);\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1597889535,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1063F \u3010String Journey\u3011"
    },
    {
        "content": "## \u58f0\u660e\n\n\u535a\u5ba2\u7f16\u8f91\u9875\u548c\u7ba1\u7406\u5458\u9898\u89e3\u5ba1\u6838\u9875\u4f7f\u7528\u7684 $\\KaTeX$ \u7248\u672c\u8f83\u4f4e\uff0c\u4e0d\u652f\u6301 `\\def` \u6307\u4ee4\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u672c\u9898\u89e3\u4e2d\u7684\u90e8\u5206\u516c\u5f0f\u6e32\u67d3\u5f02\u5e38\uff0e\u800c\u5728\u9898\u76ee\u5bf9\u5e94\u7684\u9898\u89e3\u5c55\u793a\u9875\u9762\u548c\u4e2a\u4eba\u535a\u5ba2\u6e32\u67d3\u9875\u9762\u4f7f\u7528\u7684 $\\KaTeX$ \u4e3a\u9ad8\u7248\u672c\uff0c\u5219\u65e0\u6b64\u95ee\u9898\uff0e\n\n## \u505a\u6cd5 1\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32 $s$ \u524d\u540e\u7ffb\u8f6c\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u4ee4\u6bcf\u4e2a $t_i$ \u662f $t_{i+1}$ \u7684\u771f\u5b50\u4e32\uff0e\u53ef\u4ee5\u53d1\u73b0\u8f6c\u5316\u540e\u7684\u95ee\u9898\u4e0e\u539f\u95ee\u9898\u7b54\u6848\u76f8\u540c\uff0e\n\n**\u6027\u8d28 1.** \u4e00\u5b9a\u81f3\u5c11\u5b58\u5728\u4e00\u79cd $k$ \u6700\u5927\u7684\u65b9\u6848 $t_1, t_2, \\cdots, t_k$\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6574\u6570 $i \\in [1,k-1]$\uff0c\u5747\u6709 $t_{i+1} \\in \\{\\mathtt{c} + t_i,  t_i + \\mathtt{c}\\}$\uff0c\u5176\u4e2d $\\mathtt c$ \u4e3a\u4efb\u610f\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c$+$ \u8868\u793a\u5b57\u7b26\u4e32\u62fc\u63a5\uff0e\n\n> **\u8bc1\u660e.** \u5047\u8bbe\u6709\u4e00\u7ec4 $k$ \u6700\u5927\u7684\u65b9\u6848 $t_1, t_2, \\cdots, t_k$\uff0c\u4e0d\u6ee1\u8db3\u4e0a\u8ff0\u6027\u8d28\uff0e\u6211\u4eec\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u6ee1\u8db3\u4e0a\u8ff0\u6027\u8d28\u7684\u5b57\u7b26\u4e32 $t_i$\uff0c\u5219 $t_{i+1}$ \u4e00\u5b9a\u80fd\u8868\u793a\u6210 $a + t_i + b$ \u7684\u5f62\u5f0f\uff0c\u4e14\u5b57\u7b26\u4e32 $a,b$ \u6709\u81f3\u5c11\u4e00\u4e2a\u975e\u7a7a\uff0e\u5047\u8bbe $a$ \u975e\u7a7a\uff0c\u6211\u4eec\u4ee4 $a'$ \u4e3a $a$ \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u4ee4 $t_{i+1} = a' + t_i$\uff1b\u5047\u8bbe $b$ \u975e\u7a7a\uff0c\u6211\u4eec\u4ee4 $b'$ \u4e3a $b$ \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u4ee4 $t_{i+1} = t_i + b'$\uff0e\u663e\u7136\u4fee\u6539\u540e\u7684 $t_{i+1}$ \u4e3a\u4e3a\u539f $t_{i+1}$ \u7684\u5b50\u4e32\uff0c\u4e14 $t_i$ \u4f9d\u7136\u6ee1\u8db3\u4e3a $t_{i+1}$ \u7684\u771f\u5b50\u4e32\uff0e\u53c8\u7531\u4e8e\u300c\u771f\u5b50\u4e32\u7684\u5b50\u4e32\u4e5f\u662f\u771f\u5b50\u4e32\u300d\uff0c\u6240\u4ee5\u4fee\u6539\u540e\u7684 $t_{i+1}$ \u662f $t_{i+2}$ \u7684\u771f\u5b50\u4e32\uff0e\u6211\u4eec\u5bf9\u8fd9\u7ec4\u65b9\u6848\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u7ec4\u7b26\u5408\u6027\u8d28\u7684\u65b9\u6848\uff0e$\\square$\n\n\u8003\u8651\u8bbe $\\operatorname{dp}(i)$ \u4e3a\u94a6\u5b9a $t_k$ \u4ee5 $s$ \u4e2d\u7684\u4e0b\u6807 $i$ \u7ed3\u5c3e\uff0c\u6b64\u65f6 $k$ \u7684\u6700\u5927\u503c\uff0e\u8f6c\u79fb $\\operatorname{dp}(i) \\gets k+1$ \u6210\u7acb\u7684\u5145\u8981\u6761\u4ef6\u662f\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a $j$ \u6ee1\u8db3\uff1a\n\n1. $k \\le \\operatorname{dp}(j)$\uff0e\n2. $j+k \\le i$\uff0e\uff08\u4e3a\u4e86\u9632\u6b62 $t_k$ \u548c $t_{k-1}$ \u91cd\u53e0\uff09\n3. $s_{[j-k+1,j]} \\in \\{s_{[i-k+1,i]}, s_{[i-k,i-1]}\\}$\uff0e\uff08\u6839\u636e\u6027\u8d28 1\uff09\n\n\u76f4\u63a5\u8f6c\u79fb\u56f0\u96be\uff0e\u8003\u8651\u53ef\u4ee5\u4e8c\u5206 $k$ \u7684\u503c\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u5b58\u5728\u5408\u6cd5\u7684 $j$\uff0e\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u7ef4\u62a4\u4e00\u4e2a\u96c6\u5408\uff0c\u652f\u6301\u5411\u96c6\u5408\u4e2d\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u540e\u7f00\uff0c\u67e5\u8be2\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5728\u96c6\u5408\u4e2d\u5b58\u5728\uff0e\u6211\u4eec\u53ef\u4ee5\u5bf9 $s$ \u5efa\u7acb SAM\uff0c\u5728\u540e\u7f00\u6811\u4e0a\u7ef4\u62a4\u5355\u70b9\u6807\u8bb0\uff0c\u67e5\u8be2\u5b50\u6811\u4e2d\u662f\u5426\u5b58\u5728\u6807\u8bb0\u6765\u505a\u5230\u8fd9\u4e00\u70b9\uff0e\u4f46\u662f\u6ce8\u610f\u5230\u53ef\u80fd\u4f1a\u51fa\u73b0\u591a\u4e2a\u957f\u5ea6\u4e0d\u540c\u4e0d\u540c\u7684 $s$ \u7684\u5b50\u4e32\u5171\u7528\u4e00\u4e2a\u540e\u7f00\u6811\u7ed3\u70b9\uff0c\u9700\u8981\u6539\u4e3a\u7ef4\u62a4\u5b50\u6811\u6807\u8bb0\u7684 $\\mathit{len}$ \u7684\u6700\u5927\u503c\u6765\u89e3\u51b3\uff0e\u53c8\u7531\u4e8e\u5b58\u5728 $j+k \\le i$ \u7684\u9650\u5236\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u7ebf\u6bb5\u6811\u8fdb\u884c\u53ef\u6301\u4e45\u5316\uff0c\u5e76\u5728\u5bf9\u5e94\u7248\u672c\u4e0a\u67e5\u8be2\uff0e\n\n\u8be5\u505a\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n |\\Sigma| + n (\\log n)^2)$\uff0e\u5176\u4e2d\u7684\u4e24\u4e2a $\\log$ \u5206\u522b\u662f\u300c\u4e8c\u5206\u300d\u548c\u300c\u500d\u589e\u627e\u5230\u540e\u7f00\u6811\u5bf9\u5e94\u7ed3\u70b9\u548c\u7ebf\u6bb5\u6811\u64cd\u4f5c\u300d\uff0e\u7531\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u8be5\u505a\u6cd5\u65e0\u6cd5\u901a\u8fc7\u6b64\u9898\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u4f18\u5316\uff0e\n\n## \u505a\u6cd5 2\n\n**\u6027\u8d28 2.** \u5bf9\u4e8e\u6574\u6570 $i \\in [2,k]$\uff0c\u6709 $\\operatorname{dp}(i) \\le \\operatorname{dp}(i-1) + 1$\uff0e\n\n> **\u8bc1\u660e.** \u8003\u8651\u53cd\u8bc1\uff0c\u5047\u8bbe\u5b58\u5728 $i$ \u4e0d\u6ee1\u8db3\u4ee5\u4e0a\u6027\u8d28\uff0c\u8bbe $\\operatorname{dp}(i)=k$\uff0c\u5e76\u8bb0\u5f55\u8fd9\u4e2a DP \u503c\u5bf9\u5e94\u7684\u65b9\u6848\u4e3a $t_1, t_2, \\cdots, t_k$\uff0e\u6839\u636e\u6027\u8d28 1\uff0c$t_k$ \u4e00\u5b9a\u662f $t_{k-1}$ \u5728\u9996\u6216\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u5f97\u5230\u7684\uff0e\u5206\u7c7b\u8ba8\u8bba\uff1a\n>\n> - \u82e5\u662f\u5728\u9996\u6dfb\u52a0\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230 $t_k$ \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u4ece $t$ \u5e8f\u5217\u7684\u7b2c\u51e0\u4e2a\u5b57\u7b26\u4e32\u5f00\u59cb\u88ab\u6dfb\u52a0\u8fdb\u6765\u7684\uff0c\u8bb0\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5728 $t$ \u4e2d\u7684\u4e0b\u6807\u4e3a $p$\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5c06 $t_p$ \u4ece\u5e8f\u5217\u4e2d\u5220\u9664\uff0c\u5e76\u5c06 $t_{p+1}, t_{p+2}, \\cdots, t_{k}$ \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5220\u6389\uff0e\n> - \u82e5\u662f\u5728\u5c3e\u6dfb\u52a0\uff0c\u6211\u4eec\u53ef\u4ee5\u5220\u6389 $t_k$ \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5e76\u5c06 $t_{k-1}$ \u4ece\u5e8f\u5217\u4e2d\u5220\u9664\uff0e\n>\n> \u7ecf\u8fc7\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ee5\u4e0b\u6807 $(i-1)$ \u7ed3\u5c3e\u4e14\u957f\u5ea6\u4e3a $(k-1)$ \u7684\u65b9\u6848\uff0e\u7531\u6b64\u53ef\u77e5 $\\operatorname{dp}(i-1) \\ge k - 1$\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\uff0e$\\square$\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u4e8c\u5206 DP \u503c $k$ \u6539\u4e3a\u4ece $(\\operatorname{dp}(i-1)+1)$ \u5230 $1$ \u4f9d\u6b21\u679a\u4e3e\u5c1d\u8bd5\uff0e\u6839\u636e\u6027\u8d28 2\uff0cDP \u503c\u53d8\u5316\u91cf\u662f $O(n)$ \u7684\uff0e\u540c\u65f6\u7531\u4e8e\u679a\u4e3e\u7684\u8fc7\u7a0b\u4e2d $i-k$ \u5355\u8c03\u4e0d\u964d\uff0c\u6545\u6211\u4eec\u53ef\u4ee5\u5c06\u7ebf\u6bb5\u6811\u7684\u53ef\u6301\u4e45\u5316\u5220\u9664\uff0c\u6539\u4e3a\u626b\u63cf\u7ebf\uff0c\u56e0\u6b64\u8fdb\u4e00\u6b65\u7f29\u5c0f\u5e38\u6570\uff0e\n\n\u8be5\u505a\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n |\\Sigma| + n \\log n)$\uff0e\u76f8\u8f83\u505a\u6cd5 1 \u53bb\u9664\u4e86\u4e8c\u5206\u7684 $\\log$\uff0e\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\uff0e\n\n### \u4ee3\u7801\u53c2\u8003\n\n```cpp\ninline int Jump(int x, int len) {\n  per (i, 20, 0)\n    if (sam.d[fa[x][i]].len >= len) x = fa[x][i];\n  return x;\n}\n\ninline bool Ck(int i, int k) {\n  int j = Jump(i, k), res = seg.Ask(dfn[j], dfn[j] + sz[j] - 1, 1, 1, sam.tot);\n  return res >= k;\n}\n\nsigned main() {\n  ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> (s + 1);\n  reverse(s + 1, s + n + 1);\n  re (i, n) ed[i] = sam.Add(s[i] - 'a');\n  rep (i, 2, sam.tot) e[sam.d[i].lk].push_back(i);\n  Dfs1(1);\n  int p = 1;\n  dp[1] = 1;\n  int ans = 1;\n  rep (i, 2, n)\n    for (dp[i] = dp[i - 1] + 1; dp[i] > 1; --dp[i]) {\n      while (p <= i - dp[i]) seg.Cha(dfn[Jump(ed[p], dp[p])], dp[p], 1, 1, sam.tot), ++p;\n      if (Ck(ed[i], dp[i] - 1) || Ck(ed[i - 1], dp[i] - 1)) {\n        up(ans, dp[i]);\n        break;\n      }\n    }\n  cout << ans << '\\n';\n  return 0;\n}\n```\n",
        "postTime": 1675910330,
        "uid": 207996,
        "name": "yzy1",
        "ccfLevel": 9,
        "title": "CF1063F \u9898\u89e3"
    },
    {
        "content": "\u6765\u4e00\u7bc7\u7ebf\u6027\u7684\u9898\u89e3\uff0c~~\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u5168\u7f51\u9996\u53d1~~\n\n## $O(n\\sqrt n)$\n\n\u7b2c\u4e00\u4e2a observation \u662f\u6211\u4eec\u603b\u53ef\u4ee5\u8c03\u6574\u4e00\u4e2a\u957f\u4e3a $k$ \u7684\u7b54\u6848\u5e8f\u5217\u4f7f\u5f97\u9009\u51fa\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u4f9d\u6b21\u4e3a $k,k-1,\\cdots,1$\u3002\u5b9a\u4e49\u7b54\u6848\u5e8f\u5217\u4e3a\u4e00\u4e2a\u5b50\u4e32\u5e8f\u5217 $t_0,t_1,\\cdots,t_{k-1}$ \u6ee1\u8db3 $t_i$ \u957f\u5ea6\u4e3a $k-i$ \u5e76\u4e14\u662f $s$ \u7684\u5b50\u4e32\uff0c\u540c\u65f6 $t$ \u4e92\u4e0d\u76f8\u4ea4\u4e14 $t_i$ \u7684\u4f4d\u7f6e\u5728 $t_{i+1}$ \u4e4b\u524d\u3002\u6240\u4ee5\u7b54\u6848\u5e8f\u5217\u7684\u957f\u5ea6 $k\\le \\sqrt n$ \uff0c\u8003\u8651\u600e\u4e48\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u3002\u4ee4 $f(i,j)$ \u8868\u793a\u4ece $[i,n]$ \u8fd9\u6bb5\u540e\u7f00\u91cc\u9009\u51fa\u957f\u5ea6\u4e3a $j$ \u7684\u5b50\u4e32\u5e8f\u5217\u4e14 $s_i$ \u662f\u7b2c\u4e00\u4e2a\u4e32\u7684\u5f00\u5934\u5b57\u7b26\u662f\u5426\u53ef\u884c\u3002\u8f6c\u79fb\u5c31\u627e\u51fa $s[i,i+j-1]$ \u7684\u957f\u4e3a $j-1$ \u7684\u5b50\u4e32\uff08\u5176\u5b9e\u5c31\u662f\u53bb\u6389\u9996\u6216\u5c3e\u540e\u5f97\u5230\u7684\u5b50\u4e32\uff09\uff0c\u4e0d\u59a8\u8bbe\u5176\u4e2d\u4e00\u4e2a\u662f $a$\uff0c\u6211\u4eec\u9700\u8981\u68c0\u9a8c $[i+j,n]$ \u8fd9\u6bb5\u533a\u95f4\u91cc\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u4f4d\u7f6e $k$ \u6ee1\u8db3 $s[k,k+j-2]=a$ \u4e14 $f(k,j-1)=1$\u3002\n\n\u8fd9\u4e2a\u770b\u4e0a\u53bb\u662f\u4e0d\u662f\u5c31\u5f88\u597d\u505a\u554a\uff0c\u5148\u679a\u4e3e $j$ \u518d\u679a\u4e3e $i$\uff0c\u7136\u540e\u54c8\u5e0c\uff0c\u5728\u6c42 $f(i,j)$ \u65f6\u5982\u679c $f(i+j,j-1)=1$ \u5c31\u628a $[i+j,i+2j-2]$ \u8fd9\u6bb5\u5b50\u4e32\u7684\u54c8\u5e0c\u503c\u6254\u8fdb\u4e00\u4e2a\u6620\u5c04\u8868\u91cc\u3002\u95ee\u9898\u53d8\u4e3a\u52a0\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u67e5\u8be2\u4e00\u4e2a\u6574\u6570\u662f\u5426\u5b58\u5728\uff0c\u641e\u4e2a\u54c8\u5e0c\u8868\uff0c\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt n)$\u3002\u4f46\u662f\u54c8\u5e0c\u8868\u5e38\u6570\u6781\u5176\u4e0d\u53cb\u597d\uff0c\u5728 CF \u4e0a T \u98de\u4e86\u3002\u89e3\u51b3\u529e\u6cd5\u4e00\u662f\u4f7f\u7528\u57fa\u6392+\u53cc\u6307\u9488\u4ee3\u66ff\u54c8\u5e0c\u8868\uff0c\u56e0\u4e3a\u8be2\u95ee\u7684\u5f62\u5f0f\u5176\u5b9e\u662f\u79bb\u7ebf\u7684\uff0c\u53ea\u9700\u8981\u7531\u4e4b\u524d\u5df2\u786e\u5b9a\u7684 $f(i,j-1)$ \u63a8 $f(i,j)$\u3002 \u8fd9\u4e2a\u6211\u6ca1\u5199\uff0c\u4e0d\u77e5\u9053\u6548\u7387\u5982\u4f55\u3002\u89e3\u51b3\u529e\u6cd5\u4e8c\u6709\u70b9\u90aa\u95e8\uff0c\u628a\u6a21\u6570\u5f00\u5c0f\uff0c\u52c7\u6562\u5355\u6a21\uff0c\u7136\u540e\u76f4\u63a5\u4e0a\u6876\uff0c\u8fd8\u662f\u4f1a T\u3002\u4f46\u5982\u679c\u7075\u673a\u4e00\u52a8\uff0c\u628a\u6876\u6539\u6210 bitset\uff0c\u7136\u540e\u7528 CF \u4e0a\u7684 GNU C++20 (64) \u8dd1\uff0c\u7adf\u7136\u5c31\u8fc7\u4e86/jy\u3002\u5f88\u79bb\u5947\uff0c\u6211\u628a\u54c8\u5e0c\u7684 base \u8bbe\u6210 23 \u751a\u81f3\u90fd\u80fd\u8fc7\u3002\u611f\u89c9\u4e0d\u592a\u53ef\u80fd\u662f\u6570\u636e\u9020\u6c34\u4e86\uff0c\u800c\u662f\u8fd9\u9898\u7684\u67d0\u4e9b\u5947\u602a\u6027\u8d28\u4fdd\u8bc1\u4e86\u78b0\u649e\u6982\u7387\uff0c\u4f46\u6211\u5b8c\u5168\u662f\u4e0d\u61c2\u554a\uff0c\u5982\u679c\u6709\u64c5\u957f\u8fd9\u65b9\u9762\u7684\u795e\u4ed9\u4f1a\u5206\u6790\u8fd8\u8bf7\u6307\u6559QAQ\n\n## $O(n|\\sum|)$\n\n\u63a5\u7740\u6316\u6398\u6027\u8d28\u3002\u9996\u5148\u4e0d\u96be\u770b\u51fa\u5bf9\u4e8e $i$\uff0c$f_{i,j}$ \u7684\u53d6\u503c\u662f\u5355\u8c03\u7684\uff0c\u4e5f\u5c31\u662f\u5b58\u5728\u4e00\u4e2a\u5206\u754c\u7ebf $j'$ \u4f7f\u5f97 $f_{i,j\\le j'}=1,f_{i,j>j'}=0$\u3002\u8bc1\u660e\u8003\u8651\u6700\u5927\u7684\u6ee1\u8db3 $f_{i,j}=1$ \u7684 $j$ \u5bf9\u5e94\u7684\u7b54\u6848\u5e8f\u5217 $t_0,t_1,\\cdots,t_{j-1}$\uff0c\u5b50\u4e32\u957f\u5ea6\u4f9d\u6b21\u51cf\u4e00\uff0c\u76f8\u5f53\u4e8e\u6bcf\u6b21\u5220\u9664\u524d\u4e00\u4e2a\u4e32\u7684\u5f00\u5934\u6216\u7ed3\u5c3e\u7684\u5b57\u7b26\u6765\u5f97\u5230\u4e0b\u4e00\u4e2a\u4e32\uff0c\u90a3\u628a\u6240\u6709 $t_i$ \u7684\u672b\u5c3e\u5b57\u7b26\u90fd\u5e72\u6389\uff0c\u5f97\u5230\u7684\u65b0\u5e8f\u5217\u4e00\u5b9a\u5408\u6cd5\u3002\u7531\u4e8e $s_{j-1}$ \u88ab\u5f39\u7a7a\u4e86\uff0c\u6240\u4ee5\u8fd9\u4e00\u5e8f\u5217\u5b9e\u9645\u5305\u542b $j-1$ \u4e2a\u4e32\uff0c\u4e8e\u662f\u6211\u4eec\u7531\u957f\u5ea6\u4e3a $j$ \u7684\u7b54\u6848\u5e8f\u5217\u63a8\u51fa\u4e86\u957f\u5ea6\u4e3a $j-1$ \u7684\u7b54\u6848\u5e8f\u5217\uff0c\u4e00\u76f4\u63a8\u4e0b\u53bb\uff0c\u6613\u77e5 $f_{i,[0,j]}=1$\uff0c\u8bc1\u6bd5\u3002\n\n\u521a\u624d\u662f\u628a\u4e00\u4e2a\u7b54\u6848\u5e8f\u5217\u6240\u6709\u4e32\u7684\u7ed3\u5c3e\u5b57\u7b26\u5e72\u6389\uff0c\u5982\u679c\u6211\u4eec\u6539\u6210\u5220\u5f00\u5934\u7684\u5b57\u7b26\u5462\uff1f\u663e\u7136\u4e5f\u80fd\u5f97\u5230\u4e00\u4e2a\u5408\u6cd5\u7684\u957f\u4e3a $j-1$ \u7684\u7b54\u6848\u5e8f\u5217\uff0c\u4e0d\u8fc7\u5b83\u662f\u4ee5 $s_{i+1}$ \u4e3a\u5f00\u5934\u7684\uff0c\u5219 $f(i,j)=1\\Rightarrow f(i+1,j-1)=1$\u3002\u7ed3\u5408\u524d\u6587\u6240\u8ff0\uff0c\u4fee\u6539\u4e00\u4e0b\u72b6\u6001\u5b9a\u4e49\uff0c\u76f4\u63a5\u8bb0\u5206\u754c\u7ebf\uff1a$f(i)$ \u8868\u793a\u4ee5 $i$ \u4e3a\u8d77\u70b9\u7684\u7b54\u6848\u5e8f\u5217\u7684\u6700\u957f\u957f\u5ea6\u3002\u90a3\u4e48\u6709 $f(i)-1\\le f(i+1)\\iff f(i)\\le f(i+1)+1$\u3002\u56de\u987e\u4e00\u4e0b\u5148\u524d\u7684\u6839\u53f7\u505a\u6cd5\uff0c\u5982\u679c\u5728\u6c42 $f(i)$ \u65f6\u4ece $j=f(i+1)+1$ \u5f00\u59cb\u68c0\u9a8c\u76f4\u5230 $j=1$ \u7684\u8bdd\u68c0\u9a8c\u6b21\u6570\u662f\u5747\u644a $O(n)$ \u7684\uff01\u540c\u65f6\u8fd9\u4e2a\u6027\u8d28\u4fdd\u8bc1\u4e86 $i+j$ \u4e0d\u589e\uff0c\u6240\u4ee5\u67e5\u8be2\u7684\u8303\u56f4 $[i+j,n]$ \u53ea\u53ef\u80fd\u6269\u5927\u4e0d\u53ef\u80fd\u7f29\u5c0f\u3002\u8bb0 $L=i+j$\uff0c\u5f53 $L$ \u5de6\u79fb\u4e00\u4f4d\u5230 $L-1$ \u65f6 $s[L-1,L-1+j],j<f(L-1)$ \u90fd\u662f\u5408\u6cd5\u7684\uff0c\u5982\u679c\u7ee7\u7eed\u6cbf\u7528\u54c8\u5e0c\u7684\u601d\u8def\u6bcf\u6b21\u4f1a\u52a0 $O(\\sqrt n)$ \u4e2a\u6570\u8fdb\u53bb\uff0c\u884c\u4e0d\u901a\u3002\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u8981\u7ef4\u62a4\u4e00\u4e2a\u5b50\u4e32\u7684\u96c6\u5408 $S$\uff0c\u652f\u6301\uff1a\u5411\u96c6\u5408\u5185\u52a0\u4e00\u4e2a\u5b50\u4e32\uff1b\u67e5\u8be2\u5bf9\u4e8e\u67d0\u4e2a\u5b50\u4e32 $t$\uff0c$S$ \u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u4e32 $t'$ \u6ee1\u8db3 $t$ \u662f $t'$ \u7684\u524d\u7f00\u3002\u4e00\u4e2a\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u518d\u641e\u4e00\u4e2a\u96c6\u5408 $S'$\uff0c\u5f53\u65b0\u52a0\u5165\u5b50\u4e32 $t$ \u65f6\u5c31\u628a $t$ \u7684\u6240\u6709\u524d\u7f00\u4e22\u8fdb $S'$ \u91cc\uff0c\u6211\u4eec\u79f0\u4e00\u4e2a\u4e32\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\u5b83\u5728 $S'$ \u91cc\uff0c\u67e5\u8be2\u7684\u8bdd\u5c31\u76f4\u63a5\u770b\u770b $t$ \u662f\u5426\u5408\u6cd5\u3002\u4e00\u773c trie\uff0c\u7136\u800c\u8fd9\u91cc\u4e32\u7684\u603b\u957f\u7684\u7ea7\u522b\u4e3a $O(n\\sqrt n)$\uff0ctrie \u4f1a\u7206\u3002\u4e0d\u8fc7\u65e2\u7136\u52a0\u7684\u90fd\u662f\u5b50\u4e32\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u7528 SAM \u5462\uff1f\n\n\u4e3a\u4e86\u65b9\u4fbf\u4e0d\u59a8\u5148\u628a\u539f\u4e32 reverse \u4e00\u4e0b\uff0c\u663e\u7136\u8fd9\u6837\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u7136\u540e\u5efa\u4e00\u68f5 SAM\u3002\u5bf9\u4e8e\u52a0\u8fdb\u6765\u7684\u5b50\u4e32 $s[l,r]$\uff0c$s[l,i],i\\in[l,r]$ \u90fd\u662f\u5408\u6cd5\u7684\u3002\u627e\u5230\u5b83\u5728 SAM \u4e0a\u5bf9\u5e94\u7684\u7ed3\u70b9 $x$\uff0c\u76f8\u5f53\u4e8e\u628a $x$ \u5230 fail \u6811\u6839\u7ed3\u70b9\u7684\u94fe\u4e0a\u6240\u6709\u957f\u5ea6 $\\le r-l+1$ \u7684\u4e32\u6807\u4e3a\u5408\u6cd5\u3002\u9996\u5148\u5b83\u5728 fail \u6811\u4e0a\u7684\u7956\u5148\u7ed3\u70b9\u91cc\u7684\u6240\u6709\u4e32\u90fd\u4f1a\u53d8\u5f97\u5408\u6cd5\uff0c\u66b4\u529b\u8df3 fail \u7ed9\u8fd9\u4e9b\u7ed3\u70b9\u6253\u4e0a\u6807\u8bb0\uff0c\u9047\u5230\u5df2\u6807\u8bb0\u7ed3\u70b9\u5c31\u505c\uff0c\u8fd9\u662f\u5355\u6b21\u5747\u644a $O(1)$ \u7684\u3002\u8fd8\u6709\u4e00\u90e8\u5206\u4e32\u4f4d\u4e8e $x$ \u7ed3\u70b9\u672c\u8eab\uff0c$x$ \u7ed3\u70b9\u4e2d\u53ef\u80fd\u4f1a\u5305\u542b\u53e6\u5916\u7684\u4e00\u4e9b\u957f\u5ea6\u5927\u4e8e $r-l+1$ \u7684\u5b50\u4e32\uff0c\u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff0cSAM \u4e2d\u7684\u7ed3\u70b9\u5bf9\u5e94\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u518d\u989d\u5916\u8bb0\u4e00\u4e2a\u53d8\u91cf $\\mathit{mx}$ \u8868\u793a\u5f53\u524d\u7ed3\u70b9\u5bf9\u5e94\u7684\u4e32\u4e2d\u6240\u6709\u957f\u5ea6 $\\le \\mathit{mx}$ \u7684\u70b9\u90fd\u5df2\u88ab\u6807\u8bb0\u4e3a\u5408\u6cd5\uff0c\u4fee\u6539\u65f6\u53ea\u9700\u8981\u4fee\u6539 $x$ \u7684 $\\mathit{mx}$\uff0c\u5355\u6b21 $O(1)$\u3002\u67e5\u8be2\u67d0\u4e2a\u5b50\u4e32\u662f\u5426\u5408\u6cd5\u5c31\u627e\u5230\u5b83\u5728 SAM \u4e0a\u5bf9\u5e94\u7684\u7ed3\u70b9 $x$ \uff0c\u5982\u679c $x$ \u5df2\u88ab\u6807\u8bb0\u6216\u8be5\u5b50\u4e32\u7684\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $\\mathit{mx}(x)$ \u5c31\u662f\u5408\u6cd5\u7684\uff0c\u5426\u5219\u4e0d\u5408\u6cd5\u3002\u81f3\u6b64\u9664\u4e86\u5b9a\u4f4d\u5b50\u4e32\u5176\u4f59\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u90fd\u662f $O(n)$\u3002\u5982\u4f55\u5feb\u901f\u5b9a\u4f4d\u5b50\u4e32\uff1f\u7531\u4e8e\u672c\u9898\u5f62\u5f0f\u8f83\u4e3a\u7279\u6b8a\uff0c\u6bcf\u6b21\u8be2\u95ee\u7684\u5b50\u4e32\u662f $s[i,i+j-2],s[i+1,i+j-1]$\uff0c\u800c\u63d2\u5165\u7684\u5b50\u4e32\u662f $s[i-f(i)+1,i]$ \uff0c\u76f8\u5f53\u4e8e\u4e09\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u90a3\u4e48\u76f4\u63a5\u5728 SAM \u4e0a\u8f6c\u79fb\uff0c\u505a\u5b8c\u4e86\u3002\n\n## $O(n)$\n\n\u806a\u660e\u7684\u4f60\u4e00\u5b9a\u53d1\u73b0\u4e86\u6211\u4eec\u73b0\u5728\u7684\u74f6\u9888\u5728\u4e8e\u5efa SAM\uff0c\u5b83\u7684\u590d\u6742\u5ea6\u662f $O(n|\\sum|)$\u3002\u6362\u8a00\u4e4b\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7ebf\u6027\u7684 SAM\uff0c\u628a SAM \u7684\u540e\u7ee7\u8f6c\u79fb\u8fb9\u6539\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\uff0c\u7ed3\u675f\u4e86\u3002\u4e0d\u8fc7\u5b9e\u6d4b\u7528\u666e\u901a\u6570\u7ec4\u4f1a\u5feb\u5f88\u591a\uff0c\u6bd5\u7adf\u54c8\u5e0c\u8868\u592a\u62c9\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u7801\u5b57\u4e0d\u6613\uff0c\u70b9\u4e2a\u8d5e\u518d\u8d70\u5457QAQ\uff09\uff1a\n\n```cpp\n//author:\u671b\u8fdc\u661f\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/hash_policy.hpp>\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\n#define eb emplace_back\n#define mk make_pair\n#define sml(x,y) (x=min(x,y))\n#define big(x,y) (x=max(x,y))\n#define ll long long\n#define uint unsigned int\n#define ull unsigned long long\n#define umap unordered_map\n#define db double\n#define fo(i,x,y) for(int i=x;i<=y;++i)\n#define go(i,x,y) for(int i=x;i>=y;--i)\n#define ptc putchar\n#define emp emplace\nusing namespace std;\nusing namespace __gnu_pbds;\nll seed=chrono::system_clock::now().time_since_epoch().count();\nmt19937 rnd(seed);\ninline int rm(int x,int y){return (int)(rnd()%(y-x+1ll)+x);}\ninline int read(){int ch=getchar(),x=0,f=1;while(!isdigit(ch)){if(ch==(int)('-'))f=-1;ch=getchar();}while(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}return x*f;}\ninline void out(int *a,int l,int r){fo(i,l,r) cout<<*(a+i)<<' ';puts(\"\");}\n\nconst int N=1e6+5;\nnamespace SAM{\nstruct Node{\n\tint ch[26];\n\tint len,fail,siz,ok,mx;\n}tr[N];\nint num=1,lst=1;\nstring s;\n\nvoid extend(int c){\n\tint p=lst,np=++num;lst=num;\n\ttr[np].siz=1;tr[np].len=tr[p].len+1;\n\twhile(1){\n\t\tif(!tr[p].ch[c]){\n\t\t\ttr[p].ch[c]=np;\n\t\t\tif(p==1){\n\t\t\t\ttr[np].fail=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tp=tr[p].fail;\n\t\t\tcontinue;\n\t\t}\n\t\tint q=tr[p].ch[c];\n\t\tif(tr[q].len==tr[p].len+1) tr[np].fail=q;\n\t\telse{\n\t\t\tint nq=++num;tr[nq]=tr[q];\n\t\t\ttr[nq].siz=0;tr[nq].len=tr[p].len+1;\n\t\t\ttr[q].fail=tr[np].fail=nq;\n\t\t\twhile(tr[p].ch[c]==q) tr[p].ch[c]=nq,p=tr[p].fail;\n\t\t}\n\t\tbreak;\n\t}\n}\n}\nusing namespace SAM;\nint n,f[N];\npii a1,a2,a3,a[N];\n\nvoid jump(pii &x){\n\tx.se--;\n\tif(x.se==tr[tr[x.fi].fail].len) x.fi=tr[x.fi].fail; \n}\n\nvoid trans(pii &x,int c){\n\tif(x.se<0){\n\t\tx.se++;\n\t\treturn;\n\t}\n\tint X=x.fi;\n\tif(!tr[X].ch[c]) puts(\"what?\"),exit(0);\n\tx.fi=tr[X].ch[c];x.se++;\n}\n\nvoid upd(const pii &X){\n\tint x=X.fi;\n\tbig(tr[x].mx,X.se);\n\tif(tr[x].mx==tr[x].len) tr[x].ok=1;\n\twhile(!tr[tr[x].fail].ok){\n\t\tx=tr[x].fail;\n\t\ttr[x].ok=1;\n\t}\n}\n\nbool check(const pii &x){\n\tint X=x.fi;\n\tif(tr[X].ok||tr[X].mx>=x.se) return 1;\n\treturn 0;\n}\n\nsigned main(){\n\t//freopen(\"gen.txt\",\"r\",stdin);\n\tcin>>n>>s;reverse(s.begin(),s.end());s=\" \"+s;\n\tfor(ull i=1;s[i]!='\\0';++i) extend(s[i]-'a');\n\tint id=1,Lb=0,ans=1;\n\ta1.fi=a2.fi=a3.fi=1;\n\ttrans(a1,s[1]-'a');\n\tf[1]=1;tr[1].ok=1;a[1]=a1;\n\tfor(ull i=2;i<=n;i++){\n\t\tid++;\n\t\tint c=s[i]-'a'+1;\n\t\ttrans(a1,c),trans(a2,c);trans(a3,s[i-1]-'a');\n\t\twhile(!check(a2)&&!check(a3)){\n\t\t\tid--;\n\t\t\tupd(a[++Lb]);\n\t\t\tjump(a1);jump(a2);jump(a3);\n\t\t}\n\t\ta[i]=a1;\n\t\tf[i]=id;\n\t\tbig(ans,id);\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n/*\n-------------------------------------------------\n*/\n```",
        "postTime": 1662773845,
        "uid": 238408,
        "name": "vectorwyx",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1063F String Journey"
    },
    {
        "content": "~~\u4e3a\u4ec0\u4e48\u9898\u89e3\u7684\u590d\u6742\u5ea6\u90fd\u5e26\u6839\u53f7\u554a\u2026\u8ff7\u60d1~~\n\n## \u9898\u610f: \n\n~~\u9898\u76ee\u7684\u7ffb\u8bd1\u5f88\u6e05\u695a\u3002~~\n\n\u5148\u628a\u5b57\u7b26\u4e32\u7ffb\u8f6c\uff0c\u5bb9\u6613\u8bc1\u660e\u7b54\u6848\u4e0d\u53d8\u3002\n\n\u6211\u4eec\u8003\u8651\u6700\u4f18\u7684\u529e\u6cd5\uff0c\u5bb9\u6613\u8bc1\u660e\uff0c\u6700\u4f18\u89e3\u4e2d\uff0c\u5982\u679c\u662f\u975e\u771f\u5b50\u96c6\uff0c\u90a3\u4e48\u5f88\u663e\u7136\u957f\u5ea6\u662f\n\n~~\uff08\u7b97\u4e86\u7a0d\u5fae\u89e3\u91ca\u4e00\u4e0b\uff0c\u5c31\u662f\u5982\u679c\u4f60\u591a\u51fa\u6765\u7684\u5c31\u5220\u6389\uff0c\u4fdd\u7559\u4e00\u4e2a\u8fd9\u79cd\u9012\u589e\u5e8f\u5217\uff0c\u8fd9\u6837\u4e00\u5b9a\u6700\u4f18\uff09~~\n\n${1,2,3,4,5,6\u2026}$\n\n\u7136\u540e\u7684\u8bdd\u8003\u8651\u600e\u4e48\u5224\u5b9a\uff0c\u5047\u8bbe\u5f53\u524d\u7684 $dp_i = x$\u3002\n\n\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a $x$ \u7684\u5e8f\u5217\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u5b83\u662f\u957f\u5ea6\u4e3a $x-1$ \u7684\u5b57\u7b26\u4e32\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u5230\u524d\u9762\u8fd8\u662f\u6dfb\u52a0\u5230\u540e\u9762\n~~\uff08\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5c31\u662f\u4f60\u5e76\u4e0d\u77e5\u9053 a \u540e\u9762\u90a3\u4e2a\u5b57\u7b26\u4e32\u662f ba \u8fd8\u662f ab\uff09~~\n\n\u7136\u540e\u53d8\u6210\u4e00\u4e2a\u5224\u5b9a\u6027\u95ee\u9898\uff0c\u53ea\u9700\u8981\u6ee1\u8db3 $s_{1,i-f_i}$ \u5b58\u5728\u4e00\u4e2a $s_{j-f_j+1,j}$ \u6ee1\u8db3\u8be5\u4e32\u7684\u7ed3\u5c3e $f_j \\geq f_i-1$ \u3002\u7136\u540e\u6211\u4eec\u6ce8\u610f\u5230\uff0c$i-f_i$ \u662f\u5355\u8c03\u4e0d\u964d\u7684\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u6307\u9488\u626b\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u641e\u4e2a SAM + \u5b50\u6811\u6700\u503c\u3002\n\u590d\u6742\u5ea6 $O(n\\log n)$\n\n```cpp\n// by Isaunoya\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 1e6 + 61;\nstruct sam {\n\tint ch[maxn][26], fa[maxn], len[maxn];\n\tint las, cnt;\n\tsam() { las = cnt = 1; }\n\t\n\tvoid ins(int c) {\n\t\tint p = las, np = las = ++ cnt;\n\t\tlen[np] = len[p] + 1;\n\t\tfor(; p && !ch[p][c]; p = fa[p]) ch[p][c] = np;\n\t\tif(!p) { fa[np] = 1; }\n\t\telse {\n\t\t\tint q = ch[p][c];\n\t\t\tif(len[q] == len[p] + 1) { fa[np] = q; }\n\t\t\telse {\n\t\t\t\tint nq = ++ cnt;\n\t\t\t\tmemcpy(ch[nq], ch[q], sizeof(ch[q])), len[nq] = len[p] + 1;\n\t\t\t\tfa[nq] = fa[q], fa[q] = fa[np] = nq;\n\t\t\t\tfor(; p && ch[p][c] == q; p = fa[p]) ch[p][c] = nq;\n\t\t\t}\n\t\t}\n\t}\n} sam;\n\nint rt[maxn];\nstruct smt {\n\tint mx[maxn << 2];\n\tvoid chg(int l, int r, int p, int x, int v) {\n\t\tif(l == r) { mx[p] = max(mx[p], v); return; }\n\t\tint mid = l + r >> 1;\n\t\tif(x <= mid) chg(l, mid, p << 1, x, v);\n\t\telse chg(mid + 1, r, p << 1 | 1, x, v);\n\t\tmx[p] = max(mx[p << 1], mx[p << 1 | 1]);\n\t}\n\tint qry(int a, int b, int l, int r, int p) {\n\t\tif(a <= l && r <= b) { return mx[p]; }\n\t\tint mid = l + r >> 1, ans = 0;\n\t\tif(a <= mid) ans = max(ans, qry(a, b, l, mid, p << 1));\n\t\tif(b > mid) ans = max(ans, qry(a, b, mid + 1, r, p << 1 | 1));\n\t\treturn ans;\n\t}\n} smt;\n\nint n;\nchar s[maxn];\nvector <int> g[maxn];\nint pos[maxn], f[maxn][22];\n\nint kth(int x, int k) {\n\tfor(int i = 20; ~i; i --)\n\t\tif(f[x][i] && sam.len[f[x][i]] >= k) x = f[x][i];\n\treturn x;\n}\n\nint dfn[maxn], dfo[maxn], idx = 0;\nvoid dfs(int u) {\n\tdfn[u] = ++ idx;\n\tfor(int v: g[u]) { f[v][0] = u; dfs(v); }\n\tdfo[u] = idx;\n}\n\nint dp[maxn];\n\nint chk(int id) {\n\tint x = kth(pos[id], dp[id] - 1);\n\tint y = kth(pos[id - 1], dp[id] - 1);\n\tif(smt.qry(dfn[x], dfo[x], 1, idx, 1) >= dp[id] - 1)\n\t\treturn 1;\n\tif(smt.qry(dfn[y], dfo[y], 1, idx, 1) >= dp[id] - 1)\n\t\treturn 1;\n\treturn 0;\n}\n\nsigned main() {\n#ifdef LOCAL\n\tfreopen(\"testdata.in\", \"r\", stdin);\n#endif\n\tios :: sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n\tcin >> n;\n\tfor(int i = 1 ; i <= n ; i ++) cin >> s[i];\n\treverse(s + 1, s + n + 1);\n\tfor(int i = 1 ; i <= n ; i ++) sam.ins(s[i] - 'a'), pos[i] = sam.las;\n\tfor(int i = 2 ; i <= sam.cnt ; i ++) g[sam.fa[i]].push_back(i);\n\tdfs(1); for(int j = 1 ; j <= 20 ; j ++) for(int i = 1 ; i <= idx ; i ++) f[i][j] = f[f[i][j - 1]][j - 1];\n\tfor(int i = 1, j = 0; i <= n ; i ++) {\n\t\tdp[i] = dp[i - 1] + 1;\n\t\twhile(!chk(i)) {\n\t\t\t--dp[i], ++j;\n\t\t\tsmt.chg(1, idx, 1, dfn[pos[j]], dp[j]);\n\t\t}\n\t}\n\tint ans = 0;\n\tfor(int i = 1 ; i <= n ; i ++) ans = max(ans, dp[i]);\n\tcout << ans << '\\n';\n\treturn 0;\n}\n```",
        "postTime": 1588077560,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1063F \u3010String Journey\u3011"
    },
    {
        "content": "- [CF](https://codeforces.com/problemset/problem/1063/F)\n\n- [\u53ef\u80fd\u66f4\u597d\u7684\u4f53\u9a8c](https://www.cnblogs.com/tqxboomzero/p/14686852.html)\n\n## Description\n\n\u7ed9\u5b9a\u5b57\u7b26\u4e32 $S$\uff0c\u6784\u9020\u6709\u5e8f\u975e\u7a7a\u5b57\u7b26\u4e32 $t_1,t_2,\\dots t_k$\u548c\u53ef\u4ee5\u4e3a\u7a7a\u7684\u5b57\u7b26\u4e32 $u_1,u_2,\\dots u_{k+1}$\uff0c\u4f7f $S=u_1t_1u_2t_2\\dots t_ku_{k+1}$\uff0c\u4e14 $k$ \u6700\u5927\u3002\u6c42\u6700\u5927\u7684 $k$\u3002$|S|\\le 5\\times 10^5$\u3002\n\n## Solution\n\n\u8fd9\u9898\u6b63\u89e3\u590d\u6742\u5ea6\u662f $\\mathcal O(nlog(n))$\uff0c\u4f46\u8fd9\u91cc\u6211\u4ecb\u7ecd\u4e00\u79cd $\\mathcal O(n\\sqrt{n})$ \u4e14\u5b9e\u9645\u901f\u5ea6\u5feb\u4e8e\u524d\u8005\u7684\u7b97\u6cd5\u3002\n\n\u9996\u5148\u7b54\u6848\u4e00\u5b9a\u4e0d\u8d85\u8fc7 $\\mathcal O(\\sqrt{n})$\uff0c\u8003\u8651\u6c42\u51fa $f_i$ \u8868\u793a\u5f53\u524d\u7b54\u6848\u7684 $t_1$ \u4ee5 $i$ \u4f5c\u4e3a\u5f00\u5934\u65f6\u7684\u6700\u5927\u7b54\u6848\u3002\n\n\u4ece\u540e\u5f80\u524d\u679a\u4e3e\uff0c\u6ce8\u610f\u5230 $f_i\\le f_{i+1}+1$\uff0c\u56e0\u6b64\u4ece $f_{i+1}+1$ \u5f00\u59cb\u4ece\u5927\u5230\u5c0f\u679a\u4e3e $len$ \u8fdb\u884c\u5224\u65ad\uff0c\u5f53\u524d\u957f\u5ea6 $len$ \u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53 $s[i,i+len-2]$\u6216\u8005 $s[i+1,i+len-1]$ \u5728 $i+len-1$ \u540e\u51fa\u73b0\u8fc7\u4e14\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u5f00\u59cb\u4e32\uff0c\u56e0\u6b64\u6211\u4eec\u7528\u54c8\u5e0c\u8868\u52a8\u6001\u7ef4\u62a4\u6240\u6709\u5408\u6cd5\u5f00\u59cb\u4e32\u5373\u53ef\uff0c\u5bf9\u4e8e\u5728 $i+len-1$ \u540e\u51fa\u73b0\u8fd9\u4e2a\u9650\u5236\uff0c\u56e0\u4e3a $i+len-1$ \u662f\u5355\u8c03\u4e0d\u589e\u7684\uff0c\u6240\u4ee5\u5728\u6bcf\u6b21 $len$ \u51cf\u5c11\u65f6\u52a0\u5165\u539f $i+len-1$ \u5f00\u5934\u7684\u5408\u6cd5\u5b50\u4e32\u3002\n\n## Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef unsigned long long ull;\n#define mp make_pair\nconst ull base=233;\nconst int N=2e6+10;\nint n,ans[N];\nchar s[N];\nunordered_map<ull,int> pd;\null hsh[N],pw[N];\ninline void insert(int l,int r){pd[hsh[r]-hsh[l-1]*pw[r-l+1]]=1;}\ninline bool query(int l,int len){int r=l+len-1;return pd.count(hsh[r]-hsh[l-1]*pw[r-l+1]);}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tscanf(\"%s\",s+1);\n\thsh[0]=0;pw[0]=1;\n\tfor(int i=1;i<=n;++i) pw[i]=pw[i-1]*base;\n\tfor(int i=1;i<=n;++i) hsh[i]=(hsh[i-1]*base)+s[i]-'a'+1;\n\tinsert(n,n-1);\n\tint ret=0;\n\tfor(int l=n,len=0;l;--l){\n\t\tlen++;\n\t\twhile(!query(l,len-1)&&!query(l+1,len-1)){\n\t\t\tlen--;int r=l+len;\n\t\t\tfor(int i=ans[r];i;--i){\n\t\t\t\tull hs=hsh[r+i-1]-hsh[r-1]*pw[i];\n\t\t\t\tif(pd.count(hs)) break;pd[hs]=1;\n\t\t\t}\n\t\t}\n\t\tans[l]=len;\n\t\tret=max(ret,ans[l]);\n\t}\n\tprintf(\"%d\\n\",ret);\n\treturn 0;\n}\n```",
        "postTime": 1619144973,
        "uid": 66831,
        "name": "T_Q_X",
        "ccfLevel": 10,
        "title": "CF1063F String Journey"
    },
    {
        "content": "\u8fd9\u91cc\u5199\u4e00\u7bc7\u540e\u7f00\u6570\u7ec4\u7684\u9898\u89e3\u3002\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u6211\u4eec\u4e0d\u65ad\u5212\u5206\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u4f18\u60c5\u51b5\u4e00\u5b9a\u662f\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\uff0c\u540c\u7406\u90a3\u4e48\u6211\u4eec\u7684\u7b2c$i$\u4e2a\u533a\u95f4\u7684\u5b57\u7b26\u4e2a\u6570\u4e00\u5b9a\u6bd4\u7b2c$i+1$\u4e2a\u533a\u95f4\u7684\u5b57\u7b26\u4e2a\u6570\u591a$1$\u3002\n\n\u6211\u4eec\u5148\u8003\u8651\u4e00\u4e2a$\\Theta(n^2)$\u7684$dp$\uff0c\u5b9a\u4e49$dp_i$\u8868\u793a\u5c06$[i,i+dp_i-1]$\u5212\u5206\u4e00\u4e2a\u533a\u95f4\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u4e00\u4e2a$j$\uff0c\u6ee1\u8db3$j>i$\u3002\n\n\u4ee4$k = \\min(j - i , dp_j+1)$\u540c\u65f6$\\texttt{hash}(i , i+k-2)  = \\texttt{hash}(j , j + k-2)$\u6216$\\texttt{hash}(i+1 , i+k-1)=\\texttt{hash}(j , j + k-2)$\n\u5219$dp_i=\\max(dp_i,k)$\n\n\u6211\u4eec\u6210\u529f\u5b9e\u73b0\u4e86$n^2$\u7684\u505a\u6cd5\u3002\n\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u6253\u8868\u627e\u89c4\u5f8b\uff0c\u53d1\u73b0\u4e00\u4e2a\u6709\u7528\u7684\u6027\u8d28\uff1a\n\n$dp_i \\leq dp_{i+1}+1$\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8bb0\u5f55\u4e00\u4e2a$cur$\uff0c\u8868\u793a\u6211\u4eec\u5728\u5bf9$i$\u8f6c\u79fb\u65f6\uff0c$i$\u6240\u80fd\u591f\u8fbe\u5230\u7684\u6700\u5927\u7684\u4f4d\u7f6e\u3002\u73b0\u5728\u8003\u8651\u5982\u679c$i$\u80fd\u591f\u8fbe\u5230\u8fd9\u4e2a\u503c\u9700\u8981\u6ee1\u8db3\u54ea\u4e9b\u6761\u4ef6\uff0c\u5373\u5b58\u5728\u4e00\u4e2a$j > cur$\uff0c\u540c\u65f6$cur-i \\leq dp_j$\uff0c\u540c\u65f6$\\texttt{hash}(i , cur-1)=\\texttt{hash}(j,j+cur-i-1)$\u6216\u8005$\\texttt{hash}(i+1 , cur)=\\texttt{hash}(j,j+cur-i-1)$\u3002\u5982\u679c\u65e0\u6cd5\u8fbe\u5230\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u9000\u800c\u6c42\u5176\u6b21\uff0c$cur-1$\uff0c\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5224\u65ad\u3002\n\n\u6211\u4eec\u8003\u8651\u6c42\u4e00\u4e2a\u540e\u7f00\u6570\u7ec4\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e8c\u5206\u5728$height$\u6570\u7ec4\u4e0a\u627e\u5230\u4e00\u4e2a\u533a\u95f4\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0e$i$\u7684$LCP$\u90fd\u5927\u4e8e\u7b49\u4e8e$cur-i$\uff0c\u73b0\u5728\u6211\u4eec\u60f3\u8981\u77e5\u9053\u8fd9\u4e2a\u533a\u95f4\u5185\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5143\u7d20$j>cur$\u7684$dp$\u503c\u5927\u4e8e\u7b49\u4e8e$cur-i$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u6700\u5927\u503c\uff0c\u6bcf\u6b21$cur-1$\u65f6\uff0c\u628a$dp$\u503c\u52a0\u5165\u5373\u53ef\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 5e5 + 5;\nint sa[MAXN] , rk[MAXN] , x[MAXN] , y[MAXN] , t[MAXN] , cnt[MAXN] , n , height[MAXN];\nchar s[MAXN];\nvoid make_suffix() {\n\tint m = 256;\n\tfor (int i = 1; i <= n; ++i) cnt[x[i] = s[i]] ++;\n\tfor (int i = 1; i <= m; ++i) cnt[i] += cnt[i - 1];\n\tfor (int i = 1; i <= n; ++i) sa[cnt[x[i]] --] = i;\n\tfor (int k = 1; k <= n; k <<= 1) {\n\t\tint tot = 0;\n\t\tfor (int i = n - k + 1; i <= n; ++i) y[++tot] = i;\n\t\tfor (int i = 1; i <= n; ++i) if(sa[i] > k) y[++tot] = sa[i] - k;\n\t\tfor (int i = 1; i <= m; ++i) cnt[i] = 0;\n\t\tfor (int i = 1; i <= n; ++i) cnt[x[y[i]]] ++;\n\t\tfor (int i = 1; i <= m; ++i) cnt[i] += cnt[i - 1];\n\t\tfor (int i = n; i >= 1; --i) sa[cnt[x[y[i]]] --] = y[i];\n\t\ttot = 1;\n\t\tt[sa[1]] = 1;\n\t\tfor (int i = 2; i <= n; ++i) {\n\t\t\tif(x[sa[i]] == x[sa[i - 1]] && x[sa[i] + k] == x[sa[i - 1] + k]) t[sa[i]] = tot;\n\t\t\telse t[sa[i]] = ++tot; \n\t\t}\n\t\tif(tot >= n) break;\n\t\tfor (int i = 1; i <= n; ++i) x[i] = t[i];\n\t\tm = tot + 1;\n\t}\n\tfor (int i = 1; i <= n; ++i) rk[sa[i]] = i;\n}\nvoid make_height() {\n\tint k = 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif(k) k --;\n\t\tint j = sa[rk[i] - 1];\n\t\twhile(s[i + k] == s[j + k]) k ++;\n\t\theight[rk[i]] = k;\n\t}\n}\nint st[MAXN][22] , dp[MAXN] , tr[MAXN << 2];\nvoid update(int l , int r , int now , int x , int y) {\n\tif(l == r) {\n\t\ttr[now] = y;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(x <= mid) update(l , mid , now << 1 , x , y);\n\telse update(mid + 1 , r , now << 1 | 1 , x , y);\n\ttr[now] = max(tr[now << 1] , tr[now << 1 | 1]);\n}\nint get_min(int l , int r) {\n\tif(l > r) return n;\n\tint x = log(r - l + 1) / log(2);\n\treturn min(st[l][x] , st[r - (1 << x) + 1][x]);\n}\nint get_l(int x , int y) {\n\tint l = 1 , r = x , ans = 0;\n\twhile(l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif(get_min(mid + 1 , x) >= y) r = mid - 1 , ans = mid;\n\t\telse l = mid + 1;\n\t}\n\treturn ans;\n} \nint get_r(int x , int y) {\n\tint l = x , r = n , ans = 0;\n\twhile(l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif(get_min(x + 1 , mid) >= y) l = mid + 1 , ans = mid;\n\t\telse r = mid - 1;\n\t}\n\treturn ans;\n}\nint find(int l , int r , int now , int x , int y) {\n\tif(l >= x && r <= y) {\n\t\treturn tr[now];\n\t}\n\tint mid = (l + r) >> 1 , res = 0;\n\tif(x <= mid) res = max(res , find(l , mid , now << 1 , x , y));\n\tif(y > mid) res = max(res , find(mid + 1 , r , now << 1 | 1 , x , y));\n\treturn res;\n}\nbool check(int x , int y) {\n\tint l = get_l(x , y) , r = get_r(x , y);\n\tif(find(1 , n , 1 , l , r) >= y) return false;\n\treturn true;\n}\nint main() {\n\tscanf(\"%d\" , &n);\n\tif(n == 1) {\n\t\tprintf(\"1\\n\");\n\t\treturn 0;\n\t}\n\tscanf(\"%s\" , s + 1);\n\tmake_suffix();make_height();\n\tfor (int i = 1; i <= n; ++i) st[i][0] = height[i];\n\tfor (int j = 1; (1 << j) <= n; ++j) {\n\t\tfor (int i = 1; i + (1 << j) - 1 <= n; ++i) {\n\t\t\tst[i][j] = min(st[i][j - 1] , st[i + (1 << (j - 1))][j - 1]);\n\t\t}\n\t}\n\tint cur = n;dp[n] = 1;\n//\tupdate(1 , n , 1 , rk[n] , dp[n]);\n\tint ans = 0;\n\tfor (int i = n - 1; i >= 1; --i) {\n\t\twhile(check(rk[i] , cur - i) && check(rk[i + 1] , cur - i) && i < cur) cur -- , update(1 , n , 1 , rk[cur + 1] , dp[cur + 1]);\n\t\tdp[i] = cur - i + 1;ans = max(ans , dp[i]);\n\t}\n\tprintf(\"%d\" , ans);\n\treturn 0;\n}\n```",
        "postTime": 1596438242,
        "uid": 171554,
        "name": "Reanap",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1063F \u3010String Journey\u3011"
    },
    {
        "content": "[Codeforces \u9898\u9762\u4f20\u9001\u95e8](https://codeforces.ml/contest/1063/problem/F) & [\u6d1b\u8c37\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1063F)\n\n~~\u795e\u4ed9\u9898\uff0c\u505a\u4e86\u6211\u6574\u6574 2.5h\uff0c\u5199\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e0b\u901d\u53bb\u7684\u4e2d\u5348~~\n\n~~\u540e\u6392\u819c\u62dc 1 \u5e74\u524d\u5c31\u72ec\u7acb\u5207\u6389\u6b64\u9898\u7684 ymx\uff0c\u6211\u5728 2021 \u5e74\u7684\u7b2c 5270 \u4e2a\u5c0f\u65f6 A \u6389\u6b64\u9898\uff0c\u800c ymx \u5728 2020 \u5e74\u7684\u7b2c 5270 \u5c31\u5df2\u7ecf A \u6389\u4e86\u6b64\u9898 %%%%%%~~\n\n\u9996\u5148\u6ce8\u610f\u5230\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5c31\u662f\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a $k$ \u7684 Journey\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a $k$ \u7684 Journey\uff0c\u6ee1\u8db3\u76f8\u90bb\u4e24\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u5dee\u521a\u597d\u4e3a $1$\uff08\u65b9\u4fbf\u8d77\u89c1\uff0c\u5728\u540e\u6587\u4e2d\u6211\u4eec\u53ca\u5176\u4e3a **Condition**\uff09\uff0c\u5177\u4f53\u6784\u9020\u5c31\u662f\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32 $s_k$ \u6ee1\u8db3 $|s_{k}|-|s_{k+1}|\\ge 2$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u627e\u5230 $s_{k+1}$ \u5728 $s_k$ \u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5c06 $s_{k}$ \u9664\u4e86 $s_{k+1}$ \u4e4b\u5916\u7684\u5176\u4ed6\u5b57\u7b26\u5168\u90e8\u53bb\u6389\uff0c\u5982\u679c $s_{k+1}$ \u5728 $s_k$ \u51fa\u73b0\u7684\u4f4d\u7f6e\u5de6\u8fb9\u8fd8\u6709\u5b57\u7b26\u5c31\u4ee4 $s_k$ \u5f80\u5de6\u5ef6\u4f38\u4e00\u683c\uff0c\u5426\u5219 $s_k$ \u5f80\u53f3\u5ef6\u4f38\u4e00\u683c\uff0c\u5982\u6b64\u8fdb\u884c\u4e0b\u53bb\u76f4\u5230\u4e0d\u5b58\u5728\u8fd9\u6837\u7684 $k$ \u5373\u53ef\uff0c\u4e0d\u96be\u8bc1\u660e\u8fd9\u6837\u5f97\u5230\u7684\u8fd8\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a $k$ \u7684 Journey\u3002\n\n\u4eff\u7167 CF700E Cool Slogans \u7684\u5957\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u4e00\u4e2a $dp$\uff1a$dp_{i}$ \u8868\u793a $s[i...n]$ \u7684\u540e\u7f00\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u4f4d\u7f6e\u4e3a $i$\uff0c\u5e76\u4e14\u957f\u5ea6\u6700\u957f\u7684\u6ee1\u8db3 **Condition** \u7684 Journey \u7684\u957f\u5ea6\u662f\u591a\u5c11\u3002\u663e\u7136\uff0c\u6839\u636e\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u6ee1\u8db3 $|s_k|-|s_{k+1}|=1$ \u7684 Journey\uff0c\u56e0\u6b64\u6ee1\u8db3\u6761\u4ef6\u7684 Journey \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5fc5\u7136\u662f $s[i...i+dp_i-1]$\u3002\u800c\u4e14\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u6ee1\u8db3 **Condition** \u7684 Journey \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f $s[l...r](r-l\\ge 1)$\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u6ee1\u8db3 **Condition** \u7684 Journey \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f $s[l...r-1]$\uff0c\u5177\u4f53\u8bc1\u660e\u5927\u6982\u4e5f\u662f\u6390\u5934\u53bb\u5c3e\uff0c\u8bfb\u8005\u6709\u5174\u8da3\u81ea\u5df1\u4e0d\u59a8\u53bb\u8bc1\u8bc1\uff08\uff1f\uff09\u3002\u56e0\u6b64\u8f6c\u79fb\u5927\u6982\u5c31\u679a\u4e3e\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5f00\u5934 $j<i$\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n- \u4e0b\u4e00\u4e2a\u5b57\u7b26\u52a0\u5728\u7ed3\u5c3e\uff0c\u6211\u4eec\u5047\u8bbe\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e3a $s[j...r]$\uff0c\u90a3\u4e48 $s[j+1...r]$ \u5e94\u4e0e\u4e0a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e5f\u5c31\u662f\u4ee5 $i$ \u5f00\u5934\u7684\u67d0\u6bb5\u957f\u5ea6 $\\le dp_i$ \u7684\u5b50\u4e32\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u524d\u9762\u4e00\u6bb5\u663e\u7136\u6700\u957f\u957f\u4e0d\u8fc7 $\\min(\\text{LCP}(s[i...n],s[j...n]),dp_i)$\uff0c\u7528\u8fd9\u79cd\u60c5\u51b5\u8f6c\u79fb\u5f97\u5230\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e5f\u4e0d\u80fd\u8d85\u8fc7 $\\min(\\text{LCP}(s[i...n],s[j...n]),dp_i)+1$\uff0c\u53c8\u56e0\u4e3a\u5b50\u4e32\u4e0d\u80fd\u76f8\u4ea4\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\u5fc5\u987b $<i$\uff0c\u5373\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7 $i-j$\uff0c\u56e0\u6b64\u6211\u4eec\u6709 $dp_j\\leftarrow\\min(\\min(\\text{LCP}(s[i...n],s[j...n]),dp_i)+1,i-j)$\n- \u4e0b\u4e00\u4e2a\u5b57\u7b26\u52a0\u5728\u5f00\u5934\uff0c\u7c7b\u4f3c\u5730\uff0c\u540e\u9762\u4e00\u6bb5\u5e94\u4e0e\u4e0a\u4e00\u4e2a\u5b57\u7b26\u4e32\u76f8\u540c\uff0c\u4eff\u7167\u4e0a\u9762\u7684\u63a8\u7406\u8fc7\u7a0b\u6211\u4eec\u4e5f\u53ef\u4ee5\u5f97\u5230 $dp_j\\leftarrow\\min(\\min(\\text{LCP}(s[i...n],s[j+1...n]),dp_i)+1,i-j)$\n\n$\\text{LCP}$ \u53ef\u4ee5\u540e\u7f00\u6570\u7ec4\u9884\u5904\u7406\uff0c\u66b4\u529b\u8f6c\u79fb\u662f $\\mathcal O(n)$ \u7684\uff0c\u56e0\u6b64\u8fd9\u4e2a\u505a\u6cd5\u590d\u6742\u5ea6 $\\mathcal O(n^2)$\u3002\n\n\u9644\uff1a$\\mathcal O(n^2)$ $\\text{TLE}$ \u7684\u4ee3\u7801\uff1a\n\n```cpp\nconst int MAXN=5e5;\nconst int LOG_N=19;\nint n;char s[MAXN+5];pii x[MAXN+5];\nint sa[MAXN+5],rk[MAXN+5],ht[MAXN+5],seq[MAXN+5],buc[MAXN+5];\nvoid getsa(){\n\tint vmax=122,gr=0;\n\tfor(int i=1;i<=n;i++) buc[s[i]]++;\n\tfor(int i=1;i<=vmax;i++) buc[i]+=buc[i-1];\n\tfor(int i=n;i;i--) sa[buc[s[i]]--]=i;\n\tfor(int i=1;i<=n;i++){\n\t\tif(s[sa[i]]!=s[sa[i-1]]) ++gr;\n\t\trk[sa[i]]=gr;\n\t} vmax=gr;\n\tfor(int k=1;k<=n;k<<=1){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(i+k<=n) x[i]=mp(rk[i],rk[i+k]);\n\t\t\telse x[i]=mp(rk[i],0);\n\t\t} memset(buc,0,sizeof(buc));int num=0;gr=0;\n\t\tfor(int i=n-k+1;i<=n;i++) seq[++num]=i;\n\t\tfor(int i=1;i<=n;i++) if(sa[i]>k) seq[++num]=sa[i]-k;\n\t\tfor(int i=1;i<=n;i++) buc[x[i].fi]++;\n\t\tfor(int i=1;i<=vmax;i++) buc[i]+=buc[i-1];\n\t\tfor(int i=n;i;i--) sa[buc[x[seq[i]].fi]--]=seq[i];\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(x[sa[i]]!=x[sa[i-1]]) ++gr;\n\t\t\trk[sa[i]]=gr;\n\t\t} vmax=gr;if(vmax==n) break;\n\t}\n}\nvoid getht(){\n\tint k=0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(rk[i]==1) continue;if(k) --k;int j=sa[rk[i]-1];\n\t\twhile(i+k<=n&&j+k<=n&&s[i+k]==s[j+k]) ++k;\n\t\tht[rk[i]]=k;\n\t}\n}\nint st[MAXN+5][LOG_N+2];\nvoid buildst(){\n\tfor(int i=1;i<=n;i++) st[i][0]=ht[i];\n\tfor(int i=1;i<=LOG_N;i++) for(int j=1;j+(1<<i)-1<=n;j++)\n\t\tst[j][i]=min(st[j][i-1],st[j+(1<<i-1)][i-1]);\n}\nint queryst(int l,int r){\n\tint k=31-__builtin_clz(r-l+1);\n\treturn min(st[l][k],st[r-(1<<k)+1][k]);\n}\nint getlcp(int x,int y){\n\tif(x==y) return n-x+1;\n\tx=rk[x];y=rk[y];if(x>y) swap(x,y);\n\treturn queryst(x+1,y);\n}\nint dp[MAXN+5];\nint main(){\n\tscanf(\"%d%s\",&n,s+1);getsa();getht();buildst();int res=0;\n\tfor(int i=1;i<=n;i++) dp[i]=1;\n\tfor(int i=n;i;i--){\n\t\tfor(int j=1;j<i;j++){\n\t\t\tchkmax(dp[j],min(getlcp(i,j)+1,min(i-j,dp[i]+1)));\n\t\t\tif(j+1!=i) chkmax(dp[j],min(min(getlcp(i,j+1),dp[i])+1,i-j));\n\t\t} chkmax(res,dp[i]);\n//\t\tprintf(\"%d %d\\n\",i,dp[i]);\n\t} printf(\"%d\\n\",res);\n\treturn 0;\n}\n```\n\n\u63a5\u4e0b\u6765\u8003\u8651\u4f18\u5316\uff0c\u9996\u5148\u770b\u5230\u8fd9\u6837\u7684\u9650\u5236\u4f60\u53ef\u4ee5\u60f3\u5230\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u65b9\u5f0f\u8fdb\u884c\u4f18\u5316\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u7b1b\u5361\u5c14\u6811\u3001\u5355\u8c03\u6808\u3001\u6811\u5957\u6811\u7b49\uff0c~~\u4f46\u90fd\u6ca1\u6709\u7528~~\uff08bushi\uff0cymx \u53bb\u5e74\u7b1b\u5361\u5c14\u6811\u5207\u6389\u4e86\u8fd9\u9053\u9898\uff09\u3002\u56e0\u6b64\u6211\u4eec\u4e0d\u59a8\u6362\u4e2a\u89d2\u5ea6\uff0c**\u4ece $dp$ \u7684\u5355\u8c03\u6027**\u5165\u624b\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff0c\u5c31\u662f $dp_{i}\\le dp_{i+1}+1$\uff0c\u5177\u4f53\u8bc1\u660e\u5927\u6982\u5c31\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u6ee1\u8db3 **Condition** \u7684 Journey\uff0c\u5176\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f $s[l...r](r-l\\ge 1)$\uff0c\u90a3\u4e48\u5fc5\u7136\u4e5f\u5b58\u5728\u4e00\u4e2a\u6ee1\u8db3 **Condition** \u7684 Journey \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f $s[l...r-1]$\uff0c\u8fd9\u4e2a\u4eff\u7167\u524d\u9762 $s[l+1...r]$ \u7684\u8bc1\u660e\u6765\u5c31\u884c\u4e86\uff0c\u56e0\u6b64\u5982\u679c $dp_i\\ge dp_{i+1}+2$\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u6ee1\u8db3 **Condition** \u7684 Journey\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f $s[i...i+dp_{i+1}+1]$\uff0c\u4e5f\u5b58\u5728\u6ee1\u8db3 **Condition** \u4e14\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f $s[i+1...i+dp_{i+1}+1]$ \u7684 Journey\uff0c\u800c\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a $dp_{i+1}+1$\uff0c\u4e0e\u6211\u4eec $dp$ \u7684\u5b9a\u4e49\u4e0d\u7b26\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff08\u5f53\u7136\u4f60\u5982\u679c\u53ea\u770b\u4e0a\u9762 $dp$ \u8f6c\u79fb\u65b9\u7a0b\u4e5f\u53ef\u4ee5\u770b\u51fa\u8fd9\u6761\u6027\u8d28\uff09\n\n\u6ce8\u610f\u5230\u8fd9\u4e2a\u67ff\u5b50\u957f\u5f97\u6709\u70b9\u50cf\u54b1\u4eec\u6c42 $ht$ \u65f6\u7528\u5230\u7684\u6027\u8d28\uff0c\u56e0\u6b64\u8003\u8651\u4eff\u7167\u6c42 $ht$ \u7684\u65b9\u6cd5\u2014\u2014\u53cc\u9488+\u5408\u6cd5\u6027\u5224\u5b9a\u6c42\u89e3 $dp$ \u6570\u7ec4\u3002\u6211\u4eec\u8003\u8651\u5148\u4ee4 $dp_i=dp_{i+1}+1$\uff0c\u7136\u540e\u4e0d\u65ad\u5c06 $dp_i$ \u51cf\u4e00\u76f4\u5230\u5b58\u5728\u4e00\u4e2a\u6ee1\u8db3 **Condition** \u7684 Journey\uff0c\u5176\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f $s[i...i+dp_i-1]$\uff0c\u8fd9\u6837\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5224\u5b9a\u6027\u95ee\u9898\u3002\u90a3\u4e48\u600e\u4e48\u5224\u5b9a\u4e00\u4e2a $dp_i$ \u662f\u5426\u53ef\u884c\u5462\uff1f\u663e\u7136\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u662f\u5426\u6709\u4e00\u4e2a $j$ \u6ee1\u8db3 $\\min(\\min(\\text{LCP}(s[i...n],s[j...n]),dp_j)+1,j-i)\\ge dp_i$ \u6216 $\\min(\\min(\\text{LCP}(s[i+1...n],s[j...n]),dp_j)+1,j-i)\\ge dp_i$ \u5373\u53ef\uff0c\u663e\u7136\u4e24\u90e8\u5206\u662f\u5bf9\u79f0\u7684\uff0c\u8fd9\u91cc\u8003\u8651\u7b2c\u4e00\u90e8\u5206\uff0c\u7531\u4e8e\u6211\u4eec\u53d6\u7684\u662f\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u4e09\u4e2a\u62ec\u53f7\u91cc\u7684\u4e1c\u897f\u90fd\u8981 $\\ge dp_i$\uff0c$j-i\\ge dp_i$ \u610f\u5473\u7740 $j\\ge i+dp_i$\uff0c$\\text{LCP}(s[i...n],s[j...n])+1\\ge dp_i$ \u610f\u5473\u7740 $j$ \u5728\u5b57\u5178\u5e8f\u6570\u7ec4\u4e0a\u662f\u4e00\u6bb5\u533a\u95f4\uff0c\u8fd9\u6bb5\u533a\u95f4\u663e\u7136\u53ef\u4ee5\u4e8c\u5206+ST \u8868\u6c42\u51fa\uff0c$dp_j+1\\ge dp_i$ \u8fd9\u4e2a\u6761\u4ef6\u65e0\u6cd5\u76f4\u63a5\u5904\u7406\uff0c\u4e0d\u8fc7\u65e2\u7136\u662f\u5224\u5b9a\u6027\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u6c42\u4e00\u4e0b\u6ee1\u8db3\u524d\u4e24\u4e2a\u6761\u4ef6\u7684 $j$ \u4e2d $dp_j$ \u7684\u6700\u5927\u503c\u5373\u53ef\u3002\u8fd9\u4e2a\u6700\u5927\u503c\u4e4d\u4e00\u770b\uff0c\u4e24\u4e2a\u6761\u4ef6\uff0c\u9700\u8981\u6c42 $\\max$ \u7684\u4e3b\u5e2d\u6811\uff0c\u867d\u7136\u590d\u6742\u5ea6\u4f9d\u65e7\u662f 1log\uff0c\u4f46\u7a7a\u95f4\u8fc7\u5927\uff0c\u8003\u8651\u66f4\u7b80\u4fbf\u7684\u5b9e\u73b0\uff0c\u4e0d\u96be\u53d1\u73b0\u5728\u6211\u4eec\u4ece\u53f3\u5f80\u5de6 DP \u7684\u8fc7\u7a0b\u4e2d\uff0c$i+dp_i-1$ \u59cb\u7ec8\u662f\u4e0d\u964d\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u80af\u5b9a\u53ea\u6709\u63d2\u5165\u65b0\u5143\u7d20\uff0c\u6ca1\u6709\u5220\u9664\u64cd\u4f5c\uff0c\u56e0\u6b64\u5982\u679c\u6211\u4eec\u5728 $i+dp_i-1$ \u4e0e $i+dp_i$ \u4e4b\u95f4\u753b\u4e00\u6761 dividing line\uff0c\u90a3\u4e48\u8fd9\u4e2a dividing line \u80af\u5b9a\u662f\u4e0d\u65ad\u5de6\u79fb\u7684\uff0c\u56e0\u6b64\u6211\u4eec**\u4ee5\u5b57\u5178\u5e8f\u6570\u7ec4\u4e0a\u7684\u4e0b\u6807\u4e3a\u4e0b\u6807**\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4 dividing line \u53f3\u8fb9\u7684\u5143\u7d20\uff0c\u6bcf\u6b21 dividing line \u5f80\u5de6\u79fb\u4e00\u683c\u5c31\u5c06\u65b0\u52a0\u5165\u7684\u5143\u7d20\u52a0\u5165\u7ebf\u6bb5\u6811\uff0c\u67e5\u8be2\u5c31\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u5bf9\u5e94\u533a\u95f4\u67e5\u8be2\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e25\u683c $\\mathcal O(n\\log n)$\n\n```cpp\nconst int MAXN=5e5;\nconst int LOG_N=19;\nint n;char str[MAXN+5];pii x[MAXN+5];\nint sa[MAXN+5],rk[MAXN+5],ht[MAXN+5],seq[MAXN+5],buc[MAXN+5];\nvoid getsa(){\n\tint vmax=122,gr=0;\n\tfor(int i=1;i<=n;i++) buc[str[i]]++;\n\tfor(int i=1;i<=vmax;i++) buc[i]+=buc[i-1];\n\tfor(int i=n;i;i--) sa[buc[str[i]]--]=i;\n\tfor(int i=1;i<=n;i++){\n\t\tif(str[sa[i]]!=str[sa[i-1]]) ++gr;\n\t\trk[sa[i]]=gr;\n\t} vmax=gr;\n\tfor(int k=1;k<=n;k<<=1){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(i+k<=n) x[i]=mp(rk[i],rk[i+k]);\n\t\t\telse x[i]=mp(rk[i],0);\n\t\t} memset(buc,0,sizeof(buc));int num=0;gr=0;\n\t\tfor(int i=n-k+1;i<=n;i++) seq[++num]=i;\n\t\tfor(int i=1;i<=n;i++) if(sa[i]>k) seq[++num]=sa[i]-k;\n\t\tfor(int i=1;i<=n;i++) buc[x[i].fi]++;\n\t\tfor(int i=1;i<=vmax;i++) buc[i]+=buc[i-1];\n\t\tfor(int i=n;i;i--) sa[buc[x[seq[i]].fi]--]=seq[i];\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(x[sa[i]]!=x[sa[i-1]]) ++gr;\n\t\t\trk[sa[i]]=gr;\n\t\t} vmax=gr;if(vmax==n) break;\n\t}\n}\nvoid getht(){\n\tint k=0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(rk[i]==1) continue;if(k) --k;int j=sa[rk[i]-1];\n\t\twhile(i+k<=n&&j+k<=n&&str[i+k]==str[j+k]) ++k;\n\t\tht[rk[i]]=k;\n\t}\n}\nint st[MAXN+5][LOG_N+2];\nvoid buildst(){\n\tfor(int i=1;i<=n;i++) st[i][0]=ht[i];\n\tfor(int i=1;i<=LOG_N;i++) for(int j=1;j+(1<<i)-1<=n;j++)\n\t\tst[j][i]=min(st[j][i-1],st[j+(1<<i-1)][i-1]);\n}\nint queryst(int l,int r){\n\tint k=31-__builtin_clz(r-l+1);\n\treturn min(st[l][k],st[r-(1<<k)+1][k]);\n}\nint getlcp(int x,int y){\n\tif(x==y) return n-x+1;\n\tx=rk[x];y=rk[y];if(x>y) swap(x,y);\n\treturn queryst(x+1,y);\n}\nint dp[MAXN+5];\nstruct node{int l,r,mx;} s[MAXN*4+5];\nvoid build(int k,int l,int r){\n\ts[k].l=l;s[k].r=r;if(l==r) return;int mid=l+r>>1;\n\tbuild(k<<1,l,mid);build(k<<1|1,mid+1,r);\n}\nvoid modify(int k,int x,int v){\n\tif(s[k].l==s[k].r) return s[k].mx=v,void();\n\tint mid=s[k].l+s[k].r>>1;\n\tif(x<=mid) modify(k<<1,x,v);\n\telse modify(k<<1|1,x,v);\n\ts[k].mx=max(s[k<<1].mx,s[k<<1|1].mx);\n}\nint query(int k,int l,int r){\n\tif(l<=s[k].l&&s[k].r<=r) return s[k].mx;\n\tint mid=s[k].l+s[k].r>>1;\n\tif(r<=mid) return query(k<<1,l,r);\n\telse if(l>mid) return query(k<<1|1,l,r);\n\telse return max(query(k<<1,l,mid),query(k<<1|1,mid+1,r));\n}\npii get_itvl(int x,int len){\n\tx=rk[x];int L=1,R=x-1,l=x,r=x;\n\twhile(L<=R){\n\t\tint mid=L+R>>1;\n\t\tif(queryst(mid+1,x)>=len) l=mid,R=mid-1;\n\t\telse L=mid+1;\n\t} L=x+1,R=n;\n\twhile(L<=R){\n\t\tint mid=L+R>>1;\n\t\tif(queryst(x+1,mid)>=len) r=mid,L=mid+1;\n\t\telse R=mid-1;\n\t} return mp(l,r);\n}\nbool check(int x,int v){\n\tif(v==1) return 1;\n\tpii p=get_itvl(x,v-1);\n//\tprintf(\"itvl %d %d\\n\",p.fi,p.se);\n\tif(query(1,p.fi,p.se)+1>=v) return 1;\n\tp=get_itvl(x+1,v-1);\n//\tprintf(\"itvl %d %d\\n\",p.fi,p.se);\n//\tprintf(\"%d\\n\",query(1,p.fi,p.se));\n\tif(query(1,p.fi,p.se)+1>=v) return 1;\n\treturn 0;\n}\nint main(){\n\tscanf(\"%d%s\",&n,str+1);getsa();getht();buildst();\n//\tfor(int i=1;i<=n;i++) printf(\"%d%c\",sa[i],\" \\n\"[i==n]);\n\tint res=0;build(1,1,n);\n\tfor(int i=n;i;i--){\n//\t\tfor(int j=1;j<i;j++){\n//\t\t\tchkmax(dp[j],min(min(getlcp(i,j),dp[i])+1,i-j));\n//\t\t\tif(j+1!=i) chkmax(dp[j],min(min(getlcp(i,j+1),dp[i])+1,i-j));\n//\t\t}\n\t\tdp[i]=dp[i+1]+1;\n\t\twhile(!check(i,dp[i])){\n\t\t\tmodify(1,rk[i+dp[i]-1],dp[i+dp[i]-1]);\n\t\t\tdp[i]--;\n\t\t}\n\t\tchkmax(res,dp[i]);\n//\t\tprintf(\"%d %d\\n\",i,dp[i]);\n\t} printf(\"%d\\n\",res);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1628404812,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1063F String Journey"
    },
    {
        "content": "$t_i$ \u4e00\u5b9a\u6bd4 $t_{i-1}$ \u77ed\u4e00\u4f4d\uff0c\u5426\u5219\u53ef\u4ee5\u628a $t_{i-1}$ \u548c\u524d\u9762\u7684\u90fd\u62ff\u6389\u4e00\u4e9b\u4f4d\u4f7f\u7b54\u6848\u4e0d\u4f1a\u53d8\u52a3\u3002\u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0 $t_k$ \u7684\u957f\u5ea6\u4e00\u5b9a\u4e3a $1$\u3002\n\n\u8003\u8651 dp\u3002\u5982\u679c\u4ece\u524d\u5f80\u540e dp \u8fd8\u9700\u8981\u8003\u8651\u8981\u52a0\u4e0a\u4ec0\u4e48\u5b57\u6bcd\uff0c\u6240\u4ee5\u8bbe $dp_i$ \u4e3a\u67d0\u4e00\u4e2a $t_j$ \u4ee5\u7b2c $i$ \u4f4d\u5f00\u5934\uff0c\u8fd9\u4e2a $t_j$ \u957f\u5ea6\u7684\u6700\u5927\u503c\u3002~~\u53ef\u4ee5\u53d1\u73b0\u8fd9\u73a9\u610f\u662f $O(\\sqrt n)$ \u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u80fd\u53ef\u4ee5\u968f\u4fbf\u778e\u641e\u3002~~\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a dp \u503c\u6709\u53ef\u4e8c\u5206\u6027\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u503c\u662f\u5426\u5408\u6cd5\u3002\u8bbe\u5f53\u524d\u4e8c\u5206\u7684\u503c\u4e3a $l$\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\uff1a\u540e\u9762\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $l-1$ \u7684\u5f53\u524d\u4e32\u7684\u524d\u7f00\u6216\u540e\u7f00\uff0c\u5e76\u4e14\u90a3\u4e2a\u4e32\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u7684 dp \u503c\u5927\u4e8e\u7b49\u4e8e $l-1$\u3002\n\n\u5efa\u51fa SAM\uff0c\u90a3\u4e48\u8fd9\u4e2a\u524d\u7f00\u6216\u540e\u7f00\u662f\u53ef\u4ee5\u5728 SAM \u4e0a\u500d\u589e\u6216\u8005\u6811\u5256\u5b9a\u4f4d\u51fa\u6765\u7684\uff0c\u90a3\u4e48\u73b0\u5728\u76f8\u5f53\u4e8e\u6709\u4e24\u4e2a\u9650\u5236\uff1a$j$ \u5927\u4e8e\u7b49\u4e8e $i+l$\uff0c\u5e76\u4e14\u8fd9\u4e2a\u524d\u7f00\u6216\u540e\u7f00\u5728\u67d0\u4e2a\u4ee5 $j$ \u5f00\u5934\u7684\u4f4d\u7f6e\u51fa\u73b0\u8fc7\u3002\u540e\u9762\u8fd9\u4e2a\u9650\u5236\u5728 SAM \u4e0a\u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a\u5b50\u6811\u7684\u9650\u5236\uff0c\u4e8e\u662f\u8fd9\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898\uff0c\u603b\u590d\u6742\u5ea6 2log\u3002\n\n\u4f46\u662f\u8fd9\u73a9\u610f\u8fc7\u4e0d\u4e86\uff0c\u8003\u8651\u5229\u7528\u4e00\u4e9b\u5355\u8c03\u6027\u641e\u6389\u4e8c\u5206\u7684 log\u3002\n\n\u4e0d\u96be\u53d1\u73b0 $dp_i\\le dp_{i+1}+1$\uff0c\u5426\u5219\u53ef\u4ee5\u901a\u8fc7\u628a\u540e\u9762\u7684\u4e32\u780d\u6389\u4e00\u90e8\u5206\u8ba9 $dp_{i+1}$ \u53d8\u5f97\u66f4\u5927\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u5355\u8c03\u6027\u53bb\u505a\u4e86\uff0c\u6bcf\u6b21\u53ea\u4f1a\u8ba9 dp \u503c\u589e\u5927\u4e00\uff0c\u6240\u4ee5\u51cf\u5c0f\u7684\u6b21\u6570\u4e5f\u4e0d\u8d85\u8fc7 $O(n)$\u3002\u540c\u65f6\u6211\u4eec\u53d1\u73b0\u6709\u4e86\u8fd9\u4e2a\u6027\u8d28\uff0c$i+dp_i$ \u4e5f\u4ece\u540e\u5f80\u524d\u4e0d\u589e\u4e86\uff0c\u76f8\u5f53\u4e8e\u4e8c\u7ef4\u6570\u70b9\u88ab\u6d88\u6389\u4e86\u4e00\u7ef4\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\u53e6\u5916\u6211\u5efa\u7684\u662f\u53cd\u4e32 SAM\uff0c\u5176\u5b9e\u5efa\u6b63\u4e32\u7684\u4e5f\u884c\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=5e5+5;\nint n;\nchar s[maxn];\nint sz=1,last=0,len[maxn*2],link[maxn*2],nxt[maxn*2][26];\nvector<int> ch[maxn*2];\nvoid extend(int c){\n\tint cur=sz++;\n\tlen[cur]=len[last]+1;\n\tint p=last;\n\twhile(p>=0&&!nxt[p][c]){\n\t\tnxt[p][c]=cur;\n\t\tp=link[p];\n\t}\n\tif(p>=0){\n\t\tint q=nxt[p][c];\n\t\tif(len[p]+1==len[q]) link[cur]=q;\n\t\telse{\n\t\t\tint clone=sz++;\n\t\t\tlink[clone]=link[q];\n\t\t\tmemcpy(nxt[clone],nxt[q],sizeof(nxt[0]));\n\t\t\tlen[clone]=len[p]+1;\n\t\t\twhile(p>=0&&nxt[p][c]==q){\n\t\t\t\tnxt[p][c]=clone;\n\t\t\t\tp=link[p];\n\t\t\t}\n\t\t\tlink[cur]=link[q]=clone;\n\t\t}\n\t}\n\tlast=cur;\n}\nint cur[maxn];\nint size[maxn*2],hson[maxn*2];\nvoid dfs1(int u){\n\tsize[u]=1;\n\thson[u]=-1;\n\tfor(int v:ch[u]){\n\t\tdfs1(v);\n\t\tsize[u]+=size[v];\n\t\tif(hson[u]<0||size[v]>size[hson[u]]) hson[u]=v;\n\t}\n}\nint top[maxn*2],pos[maxn*2];\nvector<int> f;\nvoid dfs2(int u){\n\tpos[u]=f.size();\n\tf.push_back(u);\n\tif(hson[u]<0) return;\n\ttop[hson[u]]=top[u];\n\tdfs2(hson[u]);\n\tfor(int v:ch[u]){\n\t\tif(v==hson[u]) continue;\n\t\ttop[v]=v;\n\t\tdfs2(v);\n\t}\n}\nint get(int u,int l){\n\twhile(top[u]&&len[link[top[u]]]>=l) u=link[top[u]];\n\tint lb=pos[top[u]],rb=pos[u];\n\twhile(lb<rb){\n\t\tint mid=lb+(rb-lb)/2;\n\t\tif(len[f[mid]]>=l) rb=mid;\n\t\telse lb=mid+1;\n\t}\n\treturn f[rb];\n}\nstruct node{\n\tint l,r;\n\tnode* ch[2];\n\tint mx;\n\tnode(int l,int r):l(l),r(r),mx(0){\n\t\tif(l==r) return;\n\t\tint mid=l+(r-l)/2;\n\t\tch[0]=new node(l,mid);\n\t\tch[1]=new node(mid+1,r);\n\t}\n\tvoid modify(int x,int k){\n\t\tmx=max(mx,k);\n\t\tif(l==r) return;\n\t\tif(x<=ch[0]->r) ch[0]->modify(x,k);\n\t\telse ch[1]->modify(x,k);\n\t}\n\tint query(int ql,int qr){\n\t\tif(ql<=l&&qr>=r) return mx;\n\t\tint ans=0;\n\t\tif(ql<=ch[0]->r) ans=max(ans,ch[0]->query(ql,qr));\n\t\tif(qr>=ch[1]->l) ans=max(ans,ch[1]->query(ql,qr));\n\t\treturn ans;\n\t}\n}*rt;\nint dp[maxn];\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tn=readint();\n\tscanf(\"%s\",s+1);\n\tlink[0]=-1;\n\tfor(int i=n;i>0;i--){\n\t\textend(s[i]-'a');\n\t\tcur[i]=last;\n\t}\n\tfor(int i=1;i<sz;i++) ch[link[i]].push_back(i);\n\tdfs1(0);\n\tdfs2(0);\n\trt=new node(0,sz-1);\n\tdp[n+1]=0;\n\tfor(int i=n;i>0;i--) for(dp[i]=dp[i+1]+1;;dp[i]--){\n\t\trt->modify(pos[cur[i+dp[i]]],dp[i+dp[i]]);\n\t\tint u=get(cur[i],dp[i]-1);\n\t\tif(rt->query(pos[u],pos[u]+size[u]-1)>=dp[i]-1) break;\n\t\tu=get(cur[i+1],dp[i]-1);\n\t\tif(rt->query(pos[u],pos[u]+size[u]-1)>=dp[i]-1) break;\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=n;i++) ans=max(ans,dp[i]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1625815075,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1063F \u3010CF1063F String Journey\u3011"
    },
    {
        "content": "\u521a\u5b66 SAM\uff0c\u5199\u9053\u9898\u7ec3\u7ec3\u624b\uff08\r\n\r\n\u5148\u628a\u6574\u4e2a\u4e32\u7ffb\u8f6c\u4e00\u4e0b\u65b9\u4fbf\u8003\u8651\u3002\r\n\r\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u4e00\u5b9a\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u7b56\u7565\uff0c\u6ee1\u8db3\u7b2c $i$ \u4e2a\u9009\u51fa\u7684\u4e32\u957f\u5ea6\u4e3a $i$\u3002\r\n\r\n\u8bbe $dp_i$ \u8868\u793a\u6700\u540e\u4e00\u4e2a\u4e32\u4ee5 $i$ \u4e3a\u7ed3\u5c3e\u7684\u6700\u5927\u7b54\u6848\u3002\r\n\r\n\u6b64\u65f6\u6709\u4e00\u4e2a\u91cd\u8981\u7684 observation\uff1a$dp_i\\le dp_{i-1}+1$\u3002\u8bc1\u660e\u663e\u7136\u3002\r\n\r\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u8bbe\u4e00\u4e2a\u503c $t$ \u4ece $dp_{i-1}+1$ \u5f00\u59cb\u4e0d\u65ad\u51cf\u5c0f\uff0c\u76f4\u5230\u5f53\u524d $dp_i=t$ \u5b58\u5728\u4e00\u4e2a\u5408\u6cd5\u8f6c\u79fb\u5c31\u505c\u4e0b\u3002\r\n\r\n\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837 $t$ \u7684\u603b\u53d8\u5316\u91cf\u662f $O(n)$ \u7684\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5224\u65ad $dp_i=t$ \u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5408\u6cd5\u8f6c\u79fb\u3002\r\n\r\n$dp_i=t$ \u610f\u5473\u7740\u5f53\u524d\u6700\u540e\u4e00\u4e2a\u9009\u51fa\u7684\u4e32\u4e3a $a_{[i-t+1,i]}$\uff0c\u90a3\u4e48\u4e0a\u4e00\u4e2a\u9009\u51fa\u7684\u4e32 $b$ \u4e00\u5b9a\u4e3a $a_{[i-t+2,i]}$ \u6216\u8005 $a_{[i-t+1,i-1]}$ \u4e4b\u4e00\u3002\r\n\r\n\u6b64\u65f6\u6211\u4eec\u9700\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u4e2a $j\\le i-t$ \u6ee1\u8db3 $b$ \u4e3a $a_{[j-dp_j+1,j]}$ \u7684\u5b50\u4e32\u3002\u8fd9\u5e76\u4e0d\u597d\u505a\u3002\u4f46\u53ef\u4ee5\u53d1\u73b0\u6ee1\u8db3\u6761\u4ef6\u65f6\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a $j\\le i-t$ \u6ee1\u8db3 $b$ \u4e3a $a_{[j-dp_j+1,j]}$ \u7684\u540e\u7f00\uff0c\u8fd9\u662f\u4e00\u4e2a\u5145\u8981\u6761\u4ef6\u3002\u6211\u4eec\u5148\u5efa\u51fa SAM \u7684 parent tree\uff0c\u5e76\u9700\u8981\u5728\u8fd9\u68f5\u6811\u4e0a\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u5b50\u6811\u6700\u5927\u503c\u3002\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\u3002\r\n\r\n\u6b64\u65f6\u8fd8\u9700\u8981\u8003\u8651 $j\\le i-t$ \u7684\u9650\u5236\u3002\u4f46\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 $i-t$ \u662f\u5355\u8c03\u4e0d\u964d\u7684\uff0c\u56e0\u6b64\u5e76\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u7684\u8fc7\u7a0b\u3002\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define N 1000005\r\n#define mid ((l+r)/2)\r\n#define pb push_back\r\nint n,ans,a[N],ps[N],L[N],R[N],z[N],dp[N];char a1[N];\r\nvector<int> e[N];struct Point {int len,link,ch[26];};\r\nstruct SuffixAutomaton\r\n{\r\n\tint nw,cntP;Point pt[N];SuffixAutomaton() {nw=cntP=1;}\r\n\tvoid ext(int vl)\r\n\t{\r\n\t\tint p=nw,p1,t;nw=++cntP;pt[nw].len=pt[p].len+1;ps[pt[nw].len]=nw;\r\n\t\twhile(p && !pt[p].ch[vl]) pt[p].ch[vl]=nw,p=pt[p].link;\r\n\t\tif(!p) {pt[nw].link=1;return;}p1=pt[p].ch[vl];\r\n\t\tif(pt[p1].len==pt[p].len+1) {pt[nw].link=p1;return;}\r\n\t\tpt[t=++cntP]=pt[p1];pt[t].len=pt[p].len+1;pt[nw].link=pt[p1].link=t;\r\n\t\twhile(p && pt[p].ch[vl]==p1) pt[p].ch[vl]=t,p=pt[p].link;\r\n\t}\r\n}SAM;\r\nstruct SegmentTree\r\n{\r\n\tint sg[N*4];void pu(int p) {sg[p]=max(sg[p*2],sg[p*2+1]);}\r\n\tvoid upd(int p,int l,int r,int x,int vl)\r\n\t{\r\n\t\tif(l==r) {sg[p]=max(sg[p],vl);return;}\r\n\t\tif(x<=mid) upd(p*2,l,mid,x,vl);else upd(p*2+1,mid+1,r,x,vl);pu(p);\r\n\t}\r\n\tint qMx(int p,int l,int r,int qL,int qR)\r\n\t{\r\n\t\tif(l>=qL && r<=qR) return sg[p];int res=0;\r\n\t\tif(qL<=mid) res=qMx(p*2,l,mid,qL,qR);\r\n\t\tif(qR>mid) res=max(res,qMx(p*2+1,mid+1,r,qL,qR));return res;\r\n\t}\r\n}SGT;\r\nvoid dfs(int u) {L[u]=++L[0];for(auto v:e[u]) dfs(v);R[u]=L[0];}\r\nint main()\r\n{\r\n\tscanf(\"%d %s\",&n,a1+1);reverse(a1+1,a1+n+1);\r\n\tfor(int i=1;i<=n;++i) SAM.ext(a[i]=a1[i]-'a');\r\n\tfor(int i=2;i<=SAM.cntP;++i) e[SAM.pt[i].link].pb(i);dfs(1);\r\n\tfor(int i=1,t=0,len=0,p=1,p1=1,p2=1;i<=n;++i)\r\n\t{\r\n\t\t++len;++t;p=SAM.pt[p].ch[a[i]];\r\n\t\tif(i>1) p1=SAM.pt[p1].ch[a[i]],p2=SAM.pt[p2].ch[a[i-1]];\r\n\t\twhile(1)\r\n\t\t{\r\n\t\t\tif(SGT.qMx(1,1,SAM.cntP,L[p1],R[p1])>=t-1) break;\r\n\t\t\tif(SGT.qMx(1,1,SAM.cntP,L[p2],R[p2])>=t-1) break;--len;--t;\r\n\t\t\tif(len<=SAM.pt[SAM.pt[p].link].len) p=SAM.pt[p].link;\r\n\t\t\tif(len-1<=SAM.pt[SAM.pt[p1].link].len) p1=SAM.pt[p1].link;\r\n\t\t\tif(len-1<=SAM.pt[SAM.pt[p2].link].len) p2=SAM.pt[p2].link;\r\n\t\t\tSGT.upd(1,1,SAM.cntP,L[z[i-t]],dp[i-t]);\r\n\t\t}z[i]=p;dp[i]=t;ans=max(ans,t);\r\n\t}printf(\"%d\\n\",ans);return 0;\r\n}\r\n```",
        "postTime": 1652458541,
        "uid": 119621,
        "name": "Kubic",
        "ccfLevel": 10,
        "title": "CF1063F String Journey"
    },
    {
        "content": "\n\u9996\u5148\u968f\u4fbf\u5c31\u80fd\u770b\u51fa\u6765\u90a3\u4e2a\u6837\u4f8b\u662f\u6765\u9a97\u4eba\u7684\u3002\u6211\u4eec\u8981\u7b54\u6848\u6700\u4f18\uff0c\u663e\u7136 $|t_k|+1=|t_{k-1}|$\u3002\n\n\u8bc1\u660e\uff1a\u5982\u679c $|t_{k-1}|\\neq |t_k|+1$\uff0c\u90a3\u4e48\u6839\u636e $\\operatorname{Journey}$ \u7684\u5b9a\u4e49\uff0c$|t_{k-1}| >|t_k|+1$\u3002\u8fd9\u6837\u53ef\u80fd\u4f1a\u5360\u7528 $|t_{k-2}|$ \u7684\u67d0\u4e00\u4e2a\u5b57\u7b26\uff0c\u663e\u7136\u4e0d\u4f18\u3002\n\n\u5b9a\u4e49 $dp_i$ \u4e3a\u4ee5 $i$ \u4e3a\u540e\u7f00\u7684\u8d77\u6b65\uff0c\u6700\u957f\u7684 $\\operatorname{Journey}$ \u7684\u957f\u5ea6\u3002\u679a\u4e3e\u8f6c\u79fb\u70b9 $j$\uff0c\u663e\u7136\u5982\u679c $j$ \u5408\u6cd5\uff0c\u4ee4 $k=\\min(j-i,dp_j+1)$\uff0c$dp_i = k$\u3002\u6839\u636e $\\operatorname{Journey}$ \u7684\u5b9a\u4e49\uff0c\u5e94\u8be5\u6ee1\u8db3\uff1a\n\n$$S[i \\dots i+k-2]=S[j\\dots j+k-2] \\ \u2228\\ S[i+1 \\dots i+k-1]=S[j\\dots j+k-2]$$\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4f7f\u7528 `hash` \u5b8c\u6210\u3002\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u4e00\u4e2a\u5f88\u641e\u7b11\u7684\u7b97\u6cd5\u4e86\u3002\n\n\u54e6\u4e0d\u53ef\u662f\u8fd9\u4e2a\u6bd2\u7624\u51fa\u9898\u4eba\u8981\u6c42\u6211\u4eec\u7528\u66f4\u9ad8\u6548\u7684\u7b97\u6cd5\u53bb\u505a\u624d\u80fd\u591f\u5bf9\u5f97\u8d77\u8fd9\u4e2a $3200$ \u7684\u8bc4\u5206\u3002\u5206\u6790\u4e00\u4e0b\u6027\u8d28\uff0c\u901a\u8fc7\u6253\u8868\u6211\u4eec\u4e5f\u80fd\u5f97\u5230\uff1a\n\n$$dp_i \\leq dp_{i+1}+1$$\n\n\u753b\u56fe\u53ef\u4ee5\u7406\u89e3\uff1a$dp_i$ \u6700\u7ec8\u6307\u5411\u7684\u4f4d\u7f6e\u4e00\u5b9a\u4e0d\u4f1a\u8d85\u8fc7 $dp_{i+1}$ \u6307\u5411\u7684\u4f4d\u7f6e\u3002\n\n\u8fd9\u4e2a\u610f\u601d\u662f\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6307\u9488 $p$\uff0c\u8868\u793a\u6700\u8fdc\u80fd\u591f\u8f6c\u79fb\u7684\u8fb9\u754c\u3002\u6839\u636e\u4e0a\u9762\u7684\u6027\u8d28\u53ef\u4ee5\u5f97\u5230 $p$ **\u5355\u8c03\u4e0d\u589e**\u3002\n\n\u770b\u4f3c\u9ebb\u70e6\u4e86\uff0c\u56e0\u4e3a\u73b0\u5728\u6211\u4eec\u8981\u8f6c\u79fb dp \u5fc5\u987b\u8981\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n- $S[i \\dots p-1]=S[j\\dots j+p-i-1] \\ \u2228\\ S[i+1 \\dots p]=S[j \\dots j+p-i-1]$\uff1b   \n- $dp_j \\geq dp_i+1$\u3002\n\n\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u6761\u4ef6\u5373\u53ef\u8f6c\u79fb\u3002\u5982\u679c\u65e0\u6cd5\u8fbe\u5230\u5c31 $p \u2190 p-1$\uff0c\u518d\u6b21\u8fdb\u884c\u5224\u65ad\u3002\n\n\u9053\u7406\u6211\u90fd\u61c2\uff0c\u5982\u4f55\u5224\u65ad\u5462\uff1f\u8003\u8651\u7528\u540e\u7f00\u6570\u7ec4\u7ef4\u62a4\uff0c\u6c42\u51fa `height` \u6570\u7ec4\uff0c\u6839\u636e\u5b9a\u4e49\u53ef\u4ee5\u7528\u4e8c\u5206\u5728\u8fd9\u4e2a\u6570\u7ec4\u4e0a\u9762\u627e\u5230\u4e00\u4e2a\u6ee1\u8db3\u8fd9\u4e2a\u533a\u95f4\u5185\u6240\u6709\u5143\u7d20 $k$ \u4e0e $i$ \u7684 $\\operatorname{LCP}$ \u957f\u5ea6\u90fd\u5927\u4e8e\u7b49\u4e8e $p-i$ \u7684\u533a\u95f4\u3002\u73b0\u5728\u6211\u4eec\u8981\u6c42\u662f\u5426 $\\exists j>p:dp_j \\geq p-i$\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u8fd9\u4e2a\u6700\u5927\u503c\u3002\u6bcf\u6b21\u632a\u52a8\u6307\u9488 $p$ \u7684\u65f6\u5019\u5c31\u5c06 $dp$ \u503c\u52a0\u5165\uff0c\u7ee7\u7eed\u4e0b\u4e00\u8f6e\u5224\u65ad\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define lc(x) (x<<1)\n#define rc(x) ((x<<1)|1)\n#define Mm int mid=(l+r)>>1\nusing namespace std;\nchar a[500005];\nint sa[500005],height[500005],cnt[500005],x[500005],tmp1[500005],Rank[500005],st[500005][21],lg[500005],maxn[2000005],dp[500005],n,m;\nvoid MakeSuffixArray()\n{\n\tm=127;\n\tfor(int i=1;i<=n;++i)\t++cnt[x[i]=a[i]];\n\tfor(int i=2;i<=m;++i)\tcnt[i]+=cnt[i-1];\n\tfor(int i=n;i;--i)\tsa[cnt[x[i]]--]=i;\n\tfor(int k=1;k<=n;k<<=1)\n\t{\n\t\tint tmp=0;\n\t\tfor(int i=n-k+1;i<=n;++i)\ttmp1[++tmp]=i;\n\t\tfor(int i=1;i<=n;++i)\tif(sa[i]>k)\ttmp1[++tmp]=sa[i]-k;\n\t\tfor(int i=1;i<=m;++i)\tcnt[i]=0;\n\t\tfor(int i=1;i<=n;++i)\t++cnt[x[i]];\n\t\tfor(int i=2;i<=m;++i)\tcnt[i]+=cnt[i-1];\n\t\tfor(int i=n;i;--i)\tsa[cnt[x[tmp1[i]]]--]=tmp1[i],tmp1[i]=0;\n\t\tswap(x,tmp1);\n\t\ttmp=1;\n\t\tx[sa[1]]=1;\n\t\tfor(int i=2;i<=n;++i)\tx[sa[i]]=(tmp1[sa[i]]==tmp1[sa[i-1]] && tmp1[sa[i]+k]==tmp1[sa[i-1]+k])?tmp:++tmp;\n\t\tif(tmp==n)\tbreak;\n\t\tm=tmp; \n\t}\n}\nvoid MakeHeightArray()\n{\n\tint k=0;\n\tfor(int i=1;i<=n;++i)\tRank[sa[i]]=i;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(Rank[i]==1)\tcontinue;\n\t\tif(k)\t--k;\n\t\tint j=sa[Rank[i]-1];\n\t\twhile(j+k<=n && i+k<=n && a[i+k]==a[j+k])\t++k;\n\t\theight[Rank[i]]=k;\n\t}\n}\nint query_st(int l,int r)\n{\n\tif(l>r)\treturn n;\n\tint lgs=lg[r-l+1];\n\treturn min(st[l][lgs],st[r-(1<<lgs)+1][lgs]);\n}\nint query_l(int p,int q)\n{\n\tint l=1,r=p,ans=0;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(query_st(mid+1,p)>=q)\tans=mid,r=mid-1;\n\t\telse\tl=mid+1;\n\t}\n\treturn ans;\n}\nint query_r(int p,int q)\n{\n\tint l=p,r=n,ans=0;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(query_st(p+1,mid)>=q)\tans=mid,l=mid+1;\n\t\telse\tr=mid-1;\n\t}\n\treturn ans;\n}\nvoid modify(int l,int r,int x,int now,int val)\n{\n\tif(l==r)\n\t{\n\t\tmaxn[now]=val;\n\t\treturn ;\n\t}\n\tMm;\n\tif(x<=mid)\tmodify(l,mid,x,lc(now),val);\n\telse\tmodify(mid+1,r,x,rc(now),val);\n\tmaxn[now]=max(maxn[lc(now)],maxn[rc(now)]);\n}\nint query(int l,int r,int x,int y,int now)\n{\n\tif(l>=x && r<=y)\treturn maxn[now];\n\tMm;\n\tint ans=-10086001;\n\tif(x<=mid)\tans=max(ans,query(l,mid,x,y,lc(now)));\n\tif(mid+1<=y)\tans=max(ans,query(mid+1,r,x,y,rc(now)));\n\treturn ans;\n}\nbool check(int x,int y)\n{\n\tint l=query_l(x,y),r=query_r(x,y);\n//\tif(query(1,n,l,r,1)>=y)\n\treturn query(1,n,l,r,1)<y;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tif(n==1)\treturn puts(\"1\")&0;\n\tscanf(\"%s\",a+1);\n\tMakeSuffixArray();\n\tMakeHeightArray();\n\tfor(int i=1;i<=n;++i)\tst[i][0]=height[i];\n\tfor(int j=1;j<=20;++j)\tfor(int i=1;i+(1<<j)-1<=n;++i)\tst[i][j]=min(st[i][j-1],st[i+(1<<(j-1))][j-1]);\n\tlg[1]=0;\n\tfor(int i=2;i<=n;++i)\tlg[i]=lg[i>>1]+1;\n\tdp[n]=1;\n\tint pointer=n,ans=0;\n\tfor(int i=n-1;i;--i)\n\t{\n\t\twhile(check(Rank[i],pointer-i) && check(Rank[i+1],pointer-i) && i<pointer)\t--pointer,modify(1,n,Rank[pointer+1],1,dp[pointer+1]);\n\t\tans=max(ans,dp[i]=pointer-i+1);\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1596866533,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1063F \u3010String Journey\u3011"
    },
    {
        "content": "&emsp;&emsp;**\u53bb\u5f80[\u539f\u535a\u5ba2](https://www.cnblogs.com/crashed/p/13431158.html)\u98df\u7528\u66f4\u4f73\u3002**\n# \u9898\u76ee\n[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/CF1063F)\u770b\u9898\u76ee\u3002   \n# \u5206\u6790    \n&emsp;&emsp;\u4ee5\u4e0b\u6807\u8bb0\u5b50\u4e32\u7684\u65b9\u6cd5\u4e3a\uff1a    \n&emsp;&emsp;$S[l,r]$ \u8868\u793a $S$ \u4e2d\u4ece $l$ \u5230 $r$ \u7684\u5b57\u7b26\u7ec4\u6210\u7684\u5b50\u4e32\u3002\u7528 ```(``` \u8868\u793a\u5f00\u533a\u95f4\uff0c ```[``` \u8868\u793a\u95ed\u533a\u95f4\u3002      \n&emsp;&emsp;\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a DP :    \n&emsp;&emsp;$f(i,k)$\uff1a\u4ee5 $i$ \u5f00\u59cb\u7684\u540e\u7f00\uff0c\u7ed3\u5c3e\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a $k$ \u65f6\u7684\u6700\u957f\u7684 $\\mathcal{Journey}$ \u3002  \n&emsp;&emsp;\u7136\u540e\u89c2\u5bdf\u5e76\u4e14\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\uff0c\u4e00\u4e2a\u6700\u4f18 $\\mathcal{Journey}$ \u91cc\u9762\uff0c\u4e00\u5b9a**\u6709 $t_i$ \u4ec5\u4ec5\u6bd4 $t_{i+1}$ \u591a\u4e00\u4e2a\u5b57\u7b26**\u3002         \n&emsp;&emsp;\u663e\u7136\u6211\u4eec\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u5408\u6cd5\u7684 $\\mathcal{Journey}$ \u90fd\u53ef\u4ee5\u7ecf\u8fc7\u8c03\u6574\u6ee1\u8db3\u8fd9\u4e2a\u6027\u8d28\uff0c\u800c\u6ee1\u8db3\u8fd9\u4e2a\u6027\u8d28\u5c31\u4f1a\u8ba9 $\\mathcal{Journey}$ \u66f4\u77ed\uff0c\u56e0\u800c\u4f1a\u66f4\u6709\u673a\u4f1a\u53d8\u957f\u3002     \n&emsp;&emsp;~~\u4f60\u5c31\u611f\u6027\u4e00\u4e0b\u5c31\u597d~~     \n&emsp;&emsp;\u4e8e\u662f\u91cd\u65b0\u5b9a\u4e49\u72b6\u6001\u6709\uff1a   \n&emsp;&emsp;$f(i)$\uff1a\u4ee5 $i$ \u5f00\u59cb\u7684\u540e\u7f00\u4e2d\u6700\u957f\u7684 $\\mathcal{Journey}$ \u3002    \n&emsp;&emsp;\u8003\u8651\u600e\u4e48\u8f6c\u79fb\u3002\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u4e00\u4e2a $j$ \u3002\u5982\u679c\u8bf4\u53ef\u4ee5\u8f6c\u79fb\uff0c\u90a3\u4e48\u6b64\u65f6 $f(i)=f(j)+1$ \uff0c\u4e14\u5e94\u8be5\u6709\uff1a  \n$$\nS[i,i+f(i)-1)=S[j,j+f(j))\\ \\lor\\ S[i+1,i+f(i))=S[j,j+f(j))\n$$\n&emsp;&emsp;\u4e5f\u5c31\u662f\u8bf4\uff0c $S[j,j+f(j))$ \u662f $S[i,i+f(i))$ \u7684\u5b50\u4e32\u3002   \n&emsp;&emsp;\u8fd9\u6837\u505a\u53ef\u4ee5\u7528 Hash \u65b9\u6cd5\u4f18\u5316\u5230 $O(n^2)$ \u3002    \n&emsp;&emsp;\u8fdb\u4e00\u6b65\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\u3002\u6ce8\u610f\u4e00\u4e0b $f(i)$ \u548c $f(i+1)$ \u7684\u5173\u7cfb\uff1a     \n![StringJourney.png](https://i.loli.net/2020/08/04/nQljrCKqOLwg8o9.png)    \n&emsp;&emsp;**\u53ef\u4ee5\u53d1\u73b0 $f(i)\\le f(i+1)+1$** \uff0c\u5426\u5219 $f(i+1)$ \u5c31\u5e94\u8be5\u66f4\u5927\u3002    \n&emsp;&emsp;\u5047\u5982\u6211\u4eec\u7528\u4e00\u4e2a\u6307\u9488 $cur$ \u6765\u6807\u8bb0\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u8f6c\u79fb\u7684\u8fb9\u754c\u3002\u90a3\u4e48 $cur$ \u5c31\u5e94\u8be5\u662f**\u5355\u8c03\u4e0d\u589e**\u7684\u3002    \n&emsp;&emsp;\u5982\u679c\u8bf4\u5f53\u524d\u4f4d\u7f6e\u4e3a $f(i)$ \uff0c\u800c\u6211\u4eec\u53d1\u73b0 $f(i)=cur-i+1$ \u7684\u65f6\u5019\u6ca1\u6709\u529e\u6cd5\u8f6c\u79fb\uff0c\u6211\u4eec\u5c31\u9700\u8981 ```cur --``` \u3002    \n&emsp;&emsp;\u5982\u4f55\u5224\u65ad\u8fd9\u4e2a\u4e1c\u897f\u5462\uff1f\u8f6c\u79fb\u4f4d\u7f6e $j$ \u5408\u6cd5\u9700\u8981\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a   \n&emsp;&emsp;1. $s[i,i+f(i)-1)=s[j,j+f(i)-1)\\ \\lor\\ s[i+1,i+f(i))=s[j,j+f(i)-1)$\u3002   \n&emsp;&emsp;2. $f(j)\\ge f(i)-1$ \u3002   \n&emsp;&emsp;\u8003\u8651\u7b2c\u4e00\u4e2a\u6761\u4ef6\u53ef\u4ee5\u62c6\u6210\u4e24\u4e2a\u4e32\u5206\u522b\u5224\u65ad\u3002\u6b64\u65f6\u5e94\u8be5\u6709 $s[i,i+f(i)-1)$ \u662f $s[j,n]$ \u7684\u524d\u7f00\u3002\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u5bf9\u539f\u4e32\u6784\u5efa**\u540e\u7f00\u81ea\u52a8\u673a**\u4e4b\u540e\uff0c\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u6761\u4ef6\u7684\u6240\u6709 $j$ \uff0c**\u5176\u540e\u7f00 $s[j,n]$ \u5fc5\u7136\u5728 $s[i,i+f(i)-1)$ \u7684 fail \u5b50\u6811\u91cc\u9762\u3002**     \n&emsp;&emsp;\u8003\u8651\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u3002\u7ed3\u5408\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 $f(j)$ \u7684\u503c\u6302\u5230 $s[j,j+f(j))$ \u5bf9\u5e94\u7684\u72b6\u6001\u4e0a\uff0c\u5e76\u4e14\u53ea\u9700\u8981**\u67e5\u8be2 $s[i,i+f(i)-1)$ \u5728 fail \u6811\u5185\u7684\u5b50\u6811\u6700\u5927\u503c\u8fdb\u884c\u5224\u65ad\u4fbf\u53ef**\u3002     \n&emsp;&emsp;\u7efc\u5408\u6765\u8bf4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log_2n)$ \u3002    \n# \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 1e6 + 5, MAXLOG = 21;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\nstruct edges\n{\n\tint to, nxt;\n}Graph[MAXN];\n\nint seg[MAXN << 2];\n\nint f[MAXN];\n\nint fath[MAXN][MAXLOG];\nint head[MAXN], DFN[MAXN], siz[MAXN];\n\nint ch[MAXN][26], fa[MAXN], mx[MAXN], ed[MAXN];\n\nint N, rt, tot, lst, ID, lg2, cnt;\nchar S[MAXN];\n\nvoid copy( int a, int b ) { fa[a] = fa[b], mx[a] = mx[b], memcpy( ch[a], ch[b], sizeof ch[b] ); }\n\nvoid addEdge( const int from, const int to )\n{\n\tGraph[++ cnt].to = to, Graph[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nvoid insert( const char c )\n{\n\tint x = c - 'a', cur = ++ tot, p = lst;\n\tmx[cur] = mx[lst] + 1, lst = cur;\n\twhile( p && ! ch[p][x] ) ch[p][x] = cur, p = fa[p];\n\tif( ! p ) { fa[cur] = rt; return ; }\n\tint q = ch[p][x];\n\tif( mx[q] == mx[p] + 1 ) { fa[cur] = q; return ; }\n\tint nq = ++ tot; copy( nq, q );\n\tmx[nq] = mx[p] + 1, fa[cur] = fa[q] = nq;\n\twhile( p && ch[p][x] == q ) ch[p][x] = nq, p = fa[p];\n}\n\nvoid DFS( const int u )\n{\n\tsiz[u] = 1, DFN[u] = ++ ID;\n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt )\n\t\tDFS( v = Graph[i].to ), fath[v][0] = u, siz[u] += siz[v];\n}\n\nvoid upt( const int x ) { seg[x] = MAX( seg[x << 1], seg[x << 1 | 1] ); }\n\nvoid build( const int x, const int l, const int r )\n{\n\tif( l > r ) return ; seg[x] = -INF;\n\tif( l == r ) return ;\n\tint mid = l + r >> 1;\n\tbuild( x << 1, l, mid );\n\tbuild( x << 1 | 1, mid + 1, r );\n}\n\nvoid update( const int x, const int l, const int r, const int pos, const int v )\n{\n\tif( l == r ) { seg[x] = MAX( seg[x], v ); return ; }\n\tint mid = l + r >> 1;\n\tif( pos <= mid ) update( x << 1, l, mid, pos, v );\n\telse update( x << 1 | 1, mid + 1, r, pos, v );\n\tupt( x ); \n}\n\nint query( const int x, const int l, const int r, const int segL, const int segR )\n{\n\tif( segL <= l && r <= segR ) return seg[x];\n\tint mid = l + r >> 1, ret = -INF;\n\tif( segL <= mid ) ret = MAX( ret, query( x << 1, l, mid, segL, segR ) );\n\tif( mid < segR ) ret = MAX( ret, query( x << 1 | 1, mid + 1, r, segL, segR ) );\n\treturn ret;\n}\n\nvoid init()\n{\n\tfor( int i = 2 ; i <= tot ; i ++ ) addEdge( fa[i], i );\n\tDFS( 1 ), build( 1, 1, tot );\n\tlg2 = log2( tot );\n\tfor( int j = 1 ; j <= lg2 ; j ++ )\n\t\tfor( int i = 1 ; i <= tot ; i ++ )\n\t\t\tfath[i][j] = fath[fath[i][j - 1]][j - 1];\n}\n\nint locate( const int st, const int len )\n{\n\tint p = ed[st];\n\tif( mx[p] < len ) return -1;\n\tfor( int i = lg2 ; ~ i ; i -- )\n\t\tif( fath[p][i] && mx[fath[p][i]] >= len )\n\t\t\tp = fath[p][i];\n\treturn p;\n}\n\nbool chk( const int st, const int len )\n{\n\tint p, val;\n\tif( len == 1 ) return true;\n\tif( ~ ( p = locate( st, len - 1 ) ) )\n\t{\n\t\tval = query( 1, 1, tot, DFN[p], DFN[p] + siz[p] - 1 );\n\t\tif( val >= len - 1 ) return true;\n\t}\n\tif( ~ ( p = locate( st + 1, len - 1 ) ) )\n\t{\n\t\tval = query( 1, 1, tot, DFN[p], DFN[p] + siz[p] - 1 );\n\t\tif( val >= len - 1 ) return true;\n\t}\n\treturn false;\n}\n\nint main()\n{\n\tread( N ), scanf( \"%s\", S + 1 );\n\trt = lst = ++ tot;\n\tfor( int i = N ; i ; i -- ) insert( S[i] ), ed[i] = lst;\n\tinit();\n\t\n\tf[N] = 1; int rig = N, ans = 1;\n\tfor( int i = N - 1 ; i ; i -- )\n\t{\n\t\twhile( ! chk( i, rig - i + 1 ) )\n\t\t{\n\t\t\tupdate( 1, 1, tot, DFN[locate( rig, f[rig] )], f[rig] );\n\t\t\trig --;\n\t\t}\n\t\tf[i] = rig - i + 1;\n\t\tans = MAX( ans, f[i] );\n\t}\n\twrite( ans ), putchar( '\\n' );\n\treturn 0;\n}\n```\n",
        "postTime": 1596513925,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[CF1063F]String Journey"
    },
    {
        "content": "# [CF1063F String Journey](https://www.luogu.com.cn/problem/CF1063F)\n\n\u8fd9\u91cc\u662f\u4e00\u79cd\u5947\u602a\u7684SA+\u7b1b\u5361\u5c14\u6811+\u7ebf\u6bb5\u6811\u7684\u89e3\u6cd5\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u6761 $\\text{Journey}$\uff0c\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u628a\u5b83\u6390\u5934\u53bb\u5c3e\uff0c\u505a\u5230 $\\text{Journey}$ \u4e2d\u7b2c $i$ \u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f $k-i+1$\u3002\u8fd9\u5f88\u663e\u7136\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1\u540e\u4e00\u4e2a\u4e32\u662f\u524d\u4e00\u4e2a\u4e32\u7684\u771f\u5b50\u4e32\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1\u524d\u4e00\u4e2a\u4e32\u7684\u957f\u5ea6\u6bd4\u540e\u4e00\u4e2a\u957f $1$ \u5373\u53ef\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f88\u81ea\u7136\u7684\u60f3\u5230DP\u3002\u8bbe $f_i$ \u8868\u793a\u4ee5 $i$ \u5f00\u5934\u7684\u90a3\u6761\u540e\u7f00\uff0c\u4ee5\u5b83\u5f00\u59cb\u7684 $\\text{Journey}$ \u6700\u591a\u80fd\u6709\u591a\u957f\u3002\u663e\u7136\u8fd9\u4e2aDP\u987a\u5e8f\u5e94\u8be5\u662f\u4ece\u540e\u5f80\u524dDP\u7684\u3002\n\n\u5219 $f_j$ \u80fd\u8f6c\u79fb\u5230 $f_i$\uff0c\u5f53\u4e14\u4ec5\u5f53 $i<j-f_j$\uff0c\u5e76\u4e14 $\\operatorname{LCP}(suf_i,suf_j)\\geq f_j$ \u6216 $\\operatorname{LCP}(suf_{i+1},suf_j)\\geq f_j$ \u4e8c\u8005\u4e2d\u6709\u81f3\u5c11\u4e00\u6761\u6210\u7acb\u3002$i<j-f_j$ \u662f\u4e3a\u4e86\u4fdd\u8bc1 $\\text{Journey}$ \u4e2d\u4efb\u610f\u4e24\u4e2a\u4e32\u90fd\u4e0d\u4f1a\u91cd\u53e0\u3002\n\n\u8003\u8651\u5230 $(suf_i,suf_j)\\geq f_j$ \u6210\u7acb\u7684\u4f4d\u7f6e\uff0c\u5b9e\u9645\u4e0a\u662f**\u540e\u7f00\u6570\u7ec4\u4e2d\u7684\u4e00\u6bb5\u533a\u95f4**\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u540e\u7f00\u6570\u7ec4\u4e2d\u4e8c\u5206\u51fa\u6765\u6210\u7acb\u7684\u533a\u95f4\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u533a\u95f4\u53d6 $\\max$ \u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u6709\u4e00\u4e2a\u5730\u65b9\u5047\u6389\u4e86\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u770b[\u8fd9\u4efd\u8bb0\u5f55](https://www.luogu.com.cn/record/36525222)\u3002\u800c\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u8bb2\u89e3\u5b83\u5230\u5e95\u662f\u600e\u4e48\u5047\u6389\u7684\u4ee5\u53ca\u5982\u4f55\u8ba9\u5b83\u4e0d\u5047\u3002\n\n\u5728\u7ecf\u8fc7\u65e0\u6570\u5bf9\u62cd\u540e\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4ef6\u60e8\u75db\u7684\u4e8b\u5b9e\uff1a\u80fd\u8f6c\u79fb\u7684\u4e0d\u4ec5\u4ec5\u662f $f_j$\uff0c\u6240\u6709\u7684 $k\\in[1,f_j]$\uff0c\u5168\u90e8\u90fd\u80fd\u8f6c\u79fb\u5230 $i$ \u6765\u3002\u6211\u4eec\u4e0d\u5f97\u4e0d\u679a\u4e3e\u6240\u6709\u8fd9\u6837\u7684 $k$ \u8fdb\u884c\u8f6c\u79fb\u3002\u56e0\u4e3a $f_i$ \u6700\u5927\u53ea\u4f1a\u5230 $O(\\sqrt{n})$ \u7684\u7ea7\u522b\uff0c\u8fd9\u79cd\u505a\u6cd5\u662f $O(n\\sqrt{n}\\log n)$\u7684\uff0c\u6240\u4ee5\u6700\u7ec8T\u4e86\u3002\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u770b[\u8fd9\u4efd\u8bb0\u5f55](https://codeforces.com/contest/1063/submission/89171170)\u3002\n\n\u90a3\u8fd9\u79cd\u65b9\u6cd5\u5982\u4f55\u4f18\u5316\u5462\uff1f\n\n\u5982\u679c\u5237\u9898\u591f\u591a\uff0c\u6216\u8005\u6253\u4e86\u5f88\u591a\u8868\u7684\u8bdd\uff0c\u5e94\u8be5\u53ef\u4ee5\u654f\u9510\u5730\u53d1\u73b0\uff0c\u6211\u4eec\u5728\u540e\u7f00\u6570\u7ec4\u4e2d\u4e8c\u5206\u51fa\u6765\u7684\u533a\u95f4\uff0c\u867d\u7136\u4e00\u5171\u8981\u679a\u4e3e $O(n\\sqrt{n})$ \u6b21\u533a\u95f4\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u8fd9 $n\\sqrt{n}$ \u4e2a\u533a\u95f4\u4e2d\u53ea\u6709 $n$ \u4e2a\u4e0d\u540c\u7684\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u8fd9\u5c31\u662f\u4f60\u5728 $ht$ \u6570\u7ec4\u4e0a\u5efa\u51fa**\u7b1b\u5361\u5c14\u6811**\u540e\uff0c\u7b1b\u5361\u5c14\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u3002\n\n\uff08\u8fd9\u91cc\u7684\u7b1b\u5361\u5c14\u6811\u7684\u5f62\u6001\u53ef\u80fd\u6bd4\u8f83\u5947\u602a\uff0c\u8be6\u7ec6\u7684\u4ecb\u7ecd\u53ef\u4ee5\u53c2\u7167[\u53e6\u4e00\u9053\u9898\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/Troverld/solution-p3975)\uff09\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5efa\u51fa\u7b1b\u5361\u5c14\u6811\u51fa\u6765\u3002\u7136\u540e\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u66f4\u65b0\u6240\u6709\u7684 $k\\in[1,f_j]$\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u901a\u8fc7**\u6811\u4e0a\u500d\u589e**\u627e\u5230 $j$ \u8282\u70b9\u7684\u7956\u5148\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u4f7f\u5f97 $ht_x\\geq f_j$ \u6210\u7acb\u7684\u8282\u70b9 $x$\u3002\u5219 $j$ \u53ef\u4ee5\u66f4\u65b0\u5230\u7684\u533a\u95f4\uff0c\u4fbf\u662f $x$ \u4ee5\u53ca\u5b83\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u3002\n\n\u6211\u4eec\u521d\u59cb\u4ee4 $k=ht_j$\uff0c\u8868\u793a\u5f53\u524d\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u66f4\u65b0\u503c\u3002\u63a5\u7740\uff0c\u6211\u4eec\u4e0d\u65ad\u5f80\u4e0a\u8df3\u7236\u4eb2\u8fdb\u884c\u66f4\u65b0\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u8282\u70b9\u8bbe\u4e00\u4e2a $mx_x$\uff0c\u8868\u793a\u6240\u6709\u6765\u66f4\u65b0\u8fc7 $x$ \u7684 $k$ \u4e2d\uff0c\u6700\u5927\u7684\u90a3\u4e2a $k$ \u662f\u4ec0\u4e48\u3002\u5047\u5982\u5230\u4e86\u4e00\u4e2a\u8282\u70b9\u540e\uff0c\u53d1\u73b0\u5df2\u6709 $k\\leq mx_x$\uff0c\u4fbf\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\u4e86\uff0c\u56e0\u4e3a\u6240\u6709 $x$ \u7684\u7956\u5148\u90fd\u5df2\u7ecf\u88ab\u4ea7\u751f $mx_x$ \u7684\u90a3\u4e00\u6b21\u66f4\u65b0\u7ed9\u76f4\u63a5\u66f4\u65b0\u5230\u5934\u4e86\u3002\n\n\u5426\u5219\uff0c\u5148\u5c06 $k$ \u4e0e $ht_x$ \u53d6 $\\min$\uff08\u56e0\u4e3a\u53ea\u6709 $k\\leq ht_x$\uff0c$k$\u624d\u6709\u53ef\u80fd\u66f4\u65b0\u5230 $x$\u6240\u4ee3\u8868\u7684\u6574\u4e2a\u533a\u95f4\uff09\uff0c\u7136\u540e\u7528 $k$ \u6765\u4e0e $mx_k$ \u8fdb\u884c\u53d6 $\\max$\uff0c\u7136\u540e\u7ee7\u7eed\u66f4\u65b0\u3002\n\n\u5b83\u7528\u4ee3\u7801\u5b9e\u73b0\u4e0b\u6765\uff0c\u5c31\u662f\u8fd9\u6837\u7684\uff1a\n\n```cpp\nvoid func(int u){\n\tint x=pos[rk[u]];\n\tfor(int i=19;i>=0;i--)if(ht[anc[x][i]]>=f[u])x=anc[x][i];\n\tint y=f[u];\n\twhile(x){\n\t\ty=min(y,ht[x]);\n\t\tif(mx[x]>=y)break;\n\t\tmx[x]=y;\n\t\tif(u-y-1>=0)v[u-y-1].push_back(make_pair(x,y));\n\t\tx=anc[x][0];\n\t}\n}\n```\n\u7a0d\u5fae\u8bf4\u660e\u4e00\u4e0b\u3002\u4ee3\u7801\u4e2d\u7684 $u$ \u5bf9\u5e94\u7740\u8bb2\u89e3\u4e2d\u7684 $j$\uff0c\u800c $y$ \u5bf9\u5e94\u7740\u8bb2\u89e3\u4e2d\u7684 $k$\u3002```pos[rk[u]]``` \u662f $u$ \u5728\u7b1b\u5361\u5c14\u6811\u4e2d\u5bf9\u5e94\u7684\u8282\u70b9\u3002\u7136\u540e\u90a3\u4e00\u53e5 ```push_back```\uff0c\u8868\u793a\u6211\u4eec\u5728 $u-y-1$ \u7684\u4f4d\u7f6e\u50a8\u5b58\u4e00\u6b21\u66f4\u65b0\uff0c\u56e0\u4e3a\u6211\u4eec\u521d\u59cb\u7684\u8f6c\u79fb\u5f0f\u6709 $i<j-f_j$ \u4e00\u53e5\u9650\u5236\uff0c\u6240\u4ee5\u5fc5\u987b\u8fd9\u6837\u5904\u7406\u3002\n\n\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\u3002\u5f88\u660e\u663e\uff0c\u8fd9\u6837\u5199\u51fa\u6765\u540e\uff0c\u6bcf\u4e00\u6b21\u66f4\u65b0\uff0c\u9664\u4e86\u6811\u4e0a\u500d\u589e\u51fa\u6765\u7684\u90a3\u4e2a\u8282\u70b9\uff08\u5373\u4e00\u5f00\u59cb\u7684 $x$\uff09\u4ee5\u540e\u8fd8\u6709\u53ef\u80fd\u518d\u88ab\u66f4\u65b0\u4ee5\u5916\uff0c\u5176\u5b83\u7956\u5148\u8282\u70b9\u90fd\u4e0d\u53ef\u80fd\u518d\u88ab\u66f4\u65b0\u4e86\uff08\u90fd\u5df2\u7ecf\u88ab\u66f4\u65b0\u5230\u5934\u4e86\uff09\u3002\u5219\u66f4\u65b0\u7684\u603b\u6b21\u6570\u5e94\u662f $O(n)$ \u7ea7\u522b\u7684\u3002\u6bcf\u6b21\u66f4\u65b0\u90fd\u662f $O(\\log n)$ \u7684\uff08\u9700\u8981\u4f7f\u7528\u7ebf\u6bb5\u6811\uff09\uff0c\u56e0\u6b64\u66f4\u65b0\u7684\u590d\u6742\u5ea6\u4fbf\u662f $O(n\\log n)$ \u7684\u3002\u53e6\u5916\u8fd8\u6709 $O(n\\log n)$ \u7684\u6811\u4e0a\u500d\u589e\u548c\u9884\u5904\u7406\u500d\u589e\u6570\u7ec4\uff0c$O(n)$\u7684\u7b1b\u5361\u5c14\u6811\u5efa\u6811\uff0c\u4ee5\u53ca $O(n\\log n)$\u7684\u540e\u7f00\u6392\u5e8f\u3002\u56e0\u6b64\u7efc\u5408\u4e0b\u6765\uff0c\u603b\u590d\u6742\u5ea6\u4fbf\u662f $O(n\\log n)$ \u7684\uff0c\u5b9e\u9645\u8dd1\u8d77\u6765\u4e5f\u5f88\u5feb\uff0c\u56e0\u4e3a\u6811\u4e0a\u500d\u589e\u548c\u7ebf\u6bb5\u6811\u7684 $\\log n$ \u90fd\u662f\u5e38\u6570\u5f88\u5c0f\u7684\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=500100;\nint f[N],res;\nnamespace Suffix_Array{\n\tint x[N],y[N],buc[N],sa[N],ht[N],rk[N],n,m,mn[N][20],LG[N];\n\tchar s[N];\n\tbool mat(int a,int b,int k){\n\t\tif(y[a]!=y[b])return false;\n\t\tif((a+k<n)^(b+k<n))return false;\n\t\tif((a+k<n)&&(b+k<n))return y[a+k]==y[b+k];\n\t\treturn true;\n\t}\n\tvoid SA(){\n\t\tfor(int i=0;i<n;i++)buc[x[i]=s[i]]++;\n\t\tfor(int i=1;i<=m;i++)buc[i]+=buc[i-1];\n\t\tfor(int i=n-1;i>=0;i--)sa[--buc[x[i]]]=i;\n\t\tfor(int k=1;k<n;k<<=1){\n\t\t\tint num=0;\n\t\t\tfor(int i=n-k;i<n;i++)y[num++]=i;\n\t\t\tfor(int i=0;i<n;i++)if(sa[i]>=k)y[num++]=sa[i]-k;\n\t\t\tfor(int i=0;i<=m;i++)buc[i]=0;\n\t\t\tfor(int i=0;i<n;i++)buc[x[y[i]]]++;\n\t\t\tfor(int i=1;i<=m;i++)buc[i]+=buc[i-1];\n\t\t\tfor(int i=n-1;i>=0;i--)sa[--buc[x[y[i]]]]=y[i];\n\t\t\tswap(x,y);\n\t\t\tx[sa[0]]=num=0;\n\t\t\tfor(int i=1;i<n;i++)x[sa[i]]=mat(sa[i],sa[i-1],k)?num:++num;\n\t\t\tif(num>=n-1)break;\n\t\t\tm=num;\n\t\t}\n\t\tfor(int i=0;i<n;i++)rk[sa[i]]=i;\n\t\tfor(int i=0,k=0;i<n;i++){\n\t\t\tif(!rk[i])continue;\n\t\t\tif(k)k--;\n\t\t\tint j=sa[rk[i]-1];\n\t\t\twhile(i+k<n&&j+k<n&&s[i+k]==s[j+k])k++;\n\t\t\tht[rk[i]]=k;\n\t\t}\n\t}\n}\nusing namespace Suffix_Array;\n//-------------------SegMentTree Below-----------------\n#define lson x<<1\n#define rson x<<1|1\n#define mid ((l+r)>>1)\n#define pushdown(x) tag[lson]=max(tag[lson],tag[x]),tag[rson]=max(tag[rson],tag[x]),tag[x]=0\nint tag[N<<2];\nvoid modify(int x,int l,int r,int L,int R,int val){\n\tif(l>R||r<L)return;\n\tif(L<=l&&r<=R){tag[x]=max(tag[x],val);return;}\n\tpushdown(x),modify(lson,l,mid,L,R,val),modify(rson,mid+1,r,L,R,val);\n}\nint query(int x,int l,int r,int P){\n\tif(l==r)return tag[x];\n\tpushdown(x);\n\treturn P<=mid?query(lson,l,mid,P):query(rson,mid+1,r,P); \n}\nvector<pair<int,int> >v[N];\n#undef lson\n#undef rson\n#undef mid\nint L[N],R[N],lson[N],rson[N],anc[N][20],stk[N],tp,pos[N],mx[N];\nvoid dfs(int x,int fa){\n\tanc[x][0]=fa;\n\tif(lson[x])dfs(lson[x],x);\n\telse pos[L[x]]=x;\n\tif(rson[x])dfs(rson[x],x);\n\telse pos[R[x]-1]=x;\n}\nvoid func(int u){\n\tint x=pos[rk[u]];\n//\tprintf(\"FUNC:%d:%d\\n\",x,f[u]);\n\tfor(int i=19;i>=0;i--)if(ht[anc[x][i]]>=f[u])x=anc[x][i];\n\tint y=f[u];\n\twhile(x){\n\t\ty=min(y,ht[x]);\n\t\tif(mx[x]>=y)break;\n//\t\tprintf(\"%d,%d\\n\",x,y);\n\t\tmx[x]=y;\n\t\tif(u-y-1>=0)v[u-y-1].push_back(make_pair(x,y));\n\t\tx=anc[x][0];\n\t}\n}\nint main(){\n\tscanf(\"%d%s\",&n,s),m='z';\n\tSA();\n//\tfor(int i=0;i<n;i++)printf(\"%d \",rk[i]);puts(\"\");\n//\tfor(int i=0;i<n;i++)printf(\"%d \",sa[i]);puts(\"\");\n\n\tfor(int i=1;i<n;i++){\n\t\twhile(tp&&ht[stk[tp]]>ht[i])lson[i]=stk[tp],R[stk[tp]]=i,tp--;\n\t\tif(tp)rson[stk[tp]]=i;\n\t\tL[i]=stk[tp];\n\t\tstk[++tp]=i;\n\t}\n\twhile(tp)R[stk[tp--]]=n;\n\t\n\tdfs(stk[1],0);\n\tfor(int j=1;j<=19;j++)for(int i=1;i<n;i++)anc[i][j]=anc[anc[i][j-1]][j-1];\n\tfor(int i=n-1;i>=0;i--){\n\t\tfor(auto j:v[i])modify(1,0,n-1,L[j.first],R[j.first]-1,j.second);\n\t\tf[i]=query(1,0,n-1,rk[i]);\n\t\tif(i+1<n)f[i]=max(f[i],query(1,0,n-1,rk[i+1]));\n\t\tf[i]++;\n\t\tres=max(res,f[i]);\n\t\tfunc(i);\n\t}\n\tprintf(\"%d\\n\",res);\n\treturn 0;\n}\n```\n",
        "postTime": 1596782633,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1063F \u3010String Journey\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u505a\u6cd5\u611f\u89c9\u590d\u6742\u5ea6\u4e0d\u592a\u5bf9\uff0c\u7136\u800c\u5b83\u5feb\u7684\u4e00\u6279\u2026\u2026\n\n\u5148\u8bf4\u4e00\u4e2a\u8fc7\u4e0d\u53bb\u7684$O(n\\sqrt n)$\u505a\u6cd5\uff1a\n\n\u6ce8\u610f\u5230\u6700\u4f18\u60c5\u51b5\u4e00\u5b9a\u80fd\u591f\u8f6c\u5316\u4e3a\u7b2c\u4e00\u4e2a\u4e32\u957f\u5ea6\u4e3a$k$\u3001\u7b2c\u4e8c\u4e2a\u4e32\u957f\u5ea6\u4e3a$k-1$\u3001\u2026\u2026\u7b2c$k$\u4e2a\u4e32\u957f\u5ea6\u4e3a1\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3\u6700\u591a\u80fd\u5212\u51fa\u591a\u5c11\u4e2a\u4e32\uff0c\u7136\u540e\u8fd9\u4e9b\u4e32\u7684\u603b\u548c\u662f$<=n$\u7684\uff0c\u7136\u540e\u8fd9\u76f8\u5f53\u4e8e\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\u6c42\u548c\uff0c\u6240\u4ee5$k$\u662f$O(\\sqrt n)$\u7684\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u53d1\u73b0\u957f\u5ea6$<=\\sqrt n$\u7684\u5b50\u4e32\u603b\u6570\u662f$O(n\\sqrt n)$\u7684\uff0c\u6211\u4eec\u8003\u8651\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u5b50\u4e32\u505a\u7c7b\u4f3c$dp$\u4e00\u6837\u7684\u4e1c\u897f\uff0c\u6ce8\u610f\u5230\u957f\u4e3a$i$\u7684\u5b50\u4e32$dp$\u503c\u4e00\u5b9a\u4e3a$i$\uff0c\u90a3\u4e48\u6211\u4eec\u8d2a\u5fc3\u7684\u641e\u51fa\u6bcf\u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u957f\u5ea6\u4e3a$i$\u7684\u4e32\u5982\u679c\u8ba9\u5b83$dp=i$\u90a3\u4e48\u5b83\u6700\u665a\u7684\u51fa\u73b0\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u7528$map+Hash$\u6bcf\u6b21\u62a0\u6389\u8fd9\u4e2a\u5b50\u4e32\u7684\u7b2c\u4e00\u4e2a\u6216\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u8f6c\u79fb\u5373\u53ef\u3002~~\u53cd\u6b63\u8fc7\u4e0d\u53bb\u2026\u2026~~\n\n\u7136\u540e\u6839\u636e\u4e0a\u9762\u7684\u542f\u53d1\u6211\u4eec\u53d1\u73b0**\u524d\u4e00\u4e2a\u4e32\u8981\u4e48\u662f\u540e\u4e00\u4e2a\u4e32\u62a0\u6389\u4e00\u4e2a\u5b57\u7b26\u7684\u524d\u7f00\uff0c\u8981\u4e48\u662f\u62a0\u6389\u4e00\u4e2a\u5b57\u7b26\u7684\u540e\u7f00**\uff0c\u800c\u524d\u8005\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u7f00\u5904\u7406\uff0c\u90a3\u4e48\u6211\u4eec\u5f88\u81ea\u7136\u7684\u5c31\u60f3\u5230\u4e86$parent$\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u5728$parent$\u6811\u94fe\u4e0a\u5bf9\u4e8e\u6bcf\u4e2a$len$\u90fd\u6807\u8bb0\u4e00\u4e0b\u8ba9\u8fd9\u4e2a\u4e32\u7684$dp=len$\u7684\u6700\u665a\u51fa\u73b0\u4f4d\u7f6e\uff0c\u7136\u540e\u5bf9\u4e8e\u5f53\u524d\u4f4d\u7f6e\u6211\u4eec\u53ef\u4ee5\u627e\u51fa\u5f53\u524d\u8fd9\u6761\u94fe\u4e0a\u6807\u8bb0\u8fc7\u7684\u6700\u5927\u7684$len$\uff0c\u7136\u540e\u6211\u4eec\u5c1d\u8bd5\u5c06$len+1$\u6807\u8bb0\u4e3a$i$\uff0c\u8fd9\u4e2a\u8003\u8651$len$\u7684\u51fa\u73b0\u4f4d\u7f6e\u5373\u53ef\uff0c\u6216\u8005\u9700\u8981\u62a0\u6389\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4ece\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684$parent$\u94fe\u4e0a\u8f6c\u79fb\u8fc7\u6765\uff0c\u8fd9\u4e2a\u6811\u4e0a\u500d\u589e\u5373\u53ef\u3002\u6216\u8005\u6211\u4eec\u8fd8\u6709\u4e00\u79cd\u9009\u62e9\u5c31\u662f\u5728\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684$parent$\u94fe\u4e0a\u500d\u589e\u627e\u51fa\u4e00\u4e2a\u6700\u957f\u7684$l$\u4f7f\u5f97$l$\u80fd\u591f\u62a0\u6389\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u8f6c\u79fb\u8fc7\u6765\uff0c\u7136\u540e\u66b4\u529b\u7684\u628a\u5f53\u524d$parent$\u94fe\u4e0a$[len+1,l]$\u5168\u90fd\u6807\u8bb0\u4e3a$i$\u5373\u53ef\u3002\u53cd\u6b63\u53ea\u8981\u6811\u4e0a\u500d\u589e\u5c31\u884c\u4e86\uff0c\u6ce8\u610f\u4e00\u4e0b\u7ec6\u8282\u3002\n\n\u81f3\u4e8e\u540e\u8005\u7684\u66b4\u529b\u6807\u8bb0\u7684\u590d\u6742\u5ea6\u6700\u574f\u5927\u6982\u662f$O(n\\sqrt n\\log n)$\u7684\uff0c\u4f46\u662f\u5404\u79cd\u6781\u9650\u6570\u636e\u90fd\u4f3c\u4e4e\u6839\u672c\u65e0\u6cd5\u5361\u5230\u6ee1\u2026\u2026\u5982\u679c\u60a8\u80fd$Hack$\u6389\u8fd9\u4e2a\u505a\u6cd5\u6216\u8005\u8bc1\u660e\u5b83\u7684\u590d\u6742\u5ea6\u662f\u5bf9\u7684\u6b22\u8fce\u627e\u6211\u79c1\u804a~\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\nusing namespace std;\nnamespace ywy {\n\tint gsam = 2, fa[1000001], len[1000001], sam[1000001][26], ance[1000001][20];\n\tvector<int> vec[1000001];\n\tinline int zhuanyi(int p, int x) {\n\t    int me = gsam;\n\t    gsam++;\n\t    len[me] = len[p] + 1;\n\t    while (p && !sam[p][x]) sam[p][x] = me, p = fa[p];\n\t    if (!p) {\n\t        fa[me] = 1;\n\t        return (me);\n\t    }\n\t    int q = sam[p][x];\n\t    if (len[q] == len[p] + 1) {\n\t        fa[me] = q;\n\t        return (me);\n\t    }\n\t    int nq = gsam;\n\t    gsam++;\n\t    len[nq] = len[p] + 1;\n\t    fa[nq] = fa[q];\n\t    fa[q] = fa[me] = nq;\n\t    for (register int i = 0; i < 26; i++) sam[nq][i] = sam[q][i];\n\t    while (p && sam[p][x] == q) sam[p][x] = nq, p = fa[p];\n\t    return (me);\n\t}\n\tint pos[500001];\n\tchar str[555555];\n\tinline void setlen(int pt, int l, int x) {\n\t    int cur = pt;\n\t    for (register int i = 19; i >= 0; i--) {\n\t        if (len[ance[cur][i]] >= l)\n\t            cur = ance[cur][i];\n\t    }\n\t    vec[cur].push_back(x);\n\t}\n\tvoid ywymain() {\n\t    int n;\n\t    cin >> n;\n\t    scanf(\"%s\", str + 1);\n\t    pos[0] = 1;\n\t    for (register int i = 1; i <= n; i++) {\n\t        pos[i] = zhuanyi(pos[i - 1], str[i] - 'a');\n\t    }\n\t    for (register int i = 1; i < gsam; i++) ance[i][0] = fa[i];\n\t    for (register int i = 1; i <= 19; i++) {\n\t        for (register int j = 1; j < gsam; j++) ance[j][i] = ance[ance[j][i - 1]][i - 1];\n\t    }\n\t    int mx = 1;\n\t    for (register int i = n; i >= 2; i--) {\n\t        if (vec[pos[i]].size() != len[pos[i]] - len[fa[pos[i]]]) {\n\t            int cur = pos[i];\n\t            for (register int j = 19; j >= 0; j--) {\n\t                if (!ance[cur][j])\n\t                    continue;\n\t                if (vec[ance[cur][j]].size() == len[ance[cur][j]] - len[fa[ance[cur][j]]])\n\t                    continue;\n\t                cur = ance[cur][j];\n\t            }\n\t            if (!vec[cur].size())\n\t                cur = fa[cur];\n\t            int nxt = len[fa[cur]] + vec[cur].size() + 1;\n\t            if (len[pos[i - 1]] >= nxt && len[pos[i]] > nxt) {\n\t                int tp = cur;\n\t                int dmax = -1;\n\t                cur = pos[i - 1];\n\t                if (vec[cur].size()) {\n\t                    int dp = vec[cur][0];\n\t                    if (dp - len[fa[cur]] - 1 < i) {\n\t                    } else {\n\t                        dp = vec[cur][vec[cur].size() - 1];\n\t                        if (dp - len[fa[cur]] - vec[cur].size() >= i) {\n\t                            dmax = max(dmax, len[fa[cur]] + (int)vec[cur].size() + 1);\n\t                        } else {\n\t                            int ans = 1, l = 1, r = vec[cur].size();\n\t                            while (l <= r) {\n\t                                int mid = (l + r) >> 1;\n\t                                dp = vec[cur][mid - 1];\n\t                                if (dp - len[fa[cur]] - mid >= i) {\n\t                                    ans = mid;\n\t                                    l = mid + 1;\n\t                                } else\n\t                                    r = mid - 1;\n\t                            }\n\t                            dmax = max(dmax, len[fa[cur]] + ans + 1);\n\t                        }\n\t                    }\n\t                }\n\t                for (register int j = 19; j >= 0; j--) {\n\t                    if (ance[cur][j] <= 1)\n\t                        continue;\n\t                    if (!vec[ance[cur][j]].size())\n\t                        cur = ance[cur][j];\n\t                    else {\n\t                        int dp = vec[ance[cur][j]][0];\n\t                        if (dp - len[fa[ance[cur][j]]] - 1 < i) {\n\t                            cur = ance[cur][j];\n\t                        } else {\n\t                            dp = vec[ance[cur][j]][vec[ance[cur][j]].size() - 1];\n\t                            if (dp - len[fa[ance[cur][j]]] - vec[ance[cur][j]].size() >= i) {\n\t                                dmax = max(dmax, len[fa[ance[cur][j]]] + (int)vec[ance[cur][j]].size() + 1);\n\t                            } else {\n\t                                int ans = 1, l = 1, r = vec[ance[cur][j]].size();\n\t                                while (l <= r) {\n\t                                    int mid = (l + r) >> 1;\n\t                                    dp = vec[ance[cur][j]][mid - 1];\n\t                                    if (dp - len[fa[ance[cur][j]]] - mid >= i) {\n\t                                        ans = mid;\n\t                                        l = mid + 1;\n\t                                    } else\n\t                                        r = mid - 1;\n\t                                }\n\t                                dmax = max(dmax, len[fa[ance[cur][j]]] + ans + 1);\n\t                                break;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t                if (dmax >= nxt) {\n\t                    for (register int j = nxt; j <= dmax; j++) setlen(pos[i], j, i);\n\t                    mx = max(mx, dmax);\n\t                    continue;\n\t                }\n\t                cur = tp;\n\t            }\n\t            if (nxt == 1) {\n\t                setlen(pos[i], 1, i);\n\t                continue;\n\t            }\n\t            int dp = vec[cur][vec[cur].size() - 1];\n\t            if (dp - nxt + 1 >= i) {\n\t                setlen(pos[i], nxt, i);\n\t                mx = max(mx, nxt);\n\t                continue;\n\t            }\n\t            if (len[pos[i - 1]] >= nxt - 1) {\n\t                cur = pos[i - 1];\n\t                for (register int i = 19; i >= 0; i--) {\n\t                    if (len[ance[cur][i]] >= nxt - 1)\n\t                        cur = ance[cur][i];\n\t                }\n\t                if (len[fa[cur]] + vec[cur].size() >= nxt - 1) {\n\t                    dp = vec[cur][nxt - 1 - len[fa[cur]] - 1];\n\t                    if (dp - nxt + 1 >= i) {\n\t                        setlen(pos[i], nxt, i);\n\t                        mx = max(mx, nxt);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t    cout << mx << endl;\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1558787735,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1063F \u3010String Journey\u3011"
    }
]