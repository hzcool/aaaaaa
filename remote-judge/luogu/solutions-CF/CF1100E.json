[
    {
        "content": "\u9996\u5148\u6211\u4eec\u53d1\u73b0\uff0c\u672c\u9898\u5177\u6709\u53ef\u4e8c\u5206\u6027\u3002\u82e5\u82b1\u8d39$x$\u53ef\u4ee5\u5b8c\u6210\uff0c$x+1$\u4e5f\u4e00\u5b9a\u53ef\u4ee5\u5b8c\u6210\u3002\n\u90a3\u4e48\u5224\u65ad\u662f\u5426\u53ef\u884c\uff0c\u53ef\u4ee5\u628a\u4e8c\u5206\u5f97\u5230\u7684$mid$\u4f5c\u4e3a\u4e0b\u9650\uff0c\u4ec5\u8fde\u63a5\u8fb9\u6743\u5927\u4e8e\u7b49\u4e8e$mid$\u7684\u8fb9\uff0c\u5982\u679c\u8fd9\u6837\u7684\u56fe\u6709\u73af\uff0c\u90a3\u4e48\u5411\u4e0a\u4e8c\u5206\uff0c\u5426\u5219\u5411\u4e0b\u3002\u8fd9\u6837\u7684\u6b63\u786e\u6027\u663e\u7136\uff0c\u56e0\u4e3a\u5982\u679c\u56fe\u662f\u4e00\u4e2a$DAG$\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u8fb9\u59cb\u7ec8\u4ece\u62d3\u6251\u5e8f\u5c0f\u7684\u5411\u5927\u7684\u8fde\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u51fa\u73b0\u73af\u3002\n\u53ef\u4ee5\u53d1\u73b0\u8f93\u51fa\u65b9\u6848\u7684\u601d\u8def\u4e5f\u662f\u5982\u6b64\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log Maxi)$\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int Maxn=100005;\nint n,m,head[Maxn],cnt,maxi,ct[Maxn],dfn[Maxn],ans[Maxn],tot,vis[Maxn];\nstruct edg\n{\n\tint nxt,to,w;\n}edge[Maxn];\nvoid add(int x,int y,int w)\n{\n\tedge[++cnt]=(edg){head[x],y,w};\n\thead[x]=cnt;\n}\nint lim; \nbool dfs(int u,int id)\n{\n\tvis[u]=-1;\n\tfor(int i=head[u];i;i=edge[i].nxt)\n\t{\n\t\tint to=edge[i].to;\n\t\tif(edge[i].w<=lim) continue;\n\t\tif(vis[to]!=-1&&vis[to]) continue;\n\t\tif(vis[to]==-1||dfs(to,id)) return true;\n\t}\n\tvis[u]=id;\n\treturn false;\n}\nbool in[Maxn];\nvoid work(int x)\n{\n\tqueue <int> Qu;\n\tint c=0;\n\tfor(int i=1;i<=m;i++)\n\t\tif(edge[i].w>lim)\n\t\t\tct[edge[i].to]++;\n\tfor(int i=1;i<=n;i++)\n\t\tif(!ct[i]) Qu.push(i),in[i]=true;\n\twhile(!Qu.empty())\n\t{\n\t\tint u=Qu.front();\n\t\tQu.pop();\n\t\tdfn[u]=++c;\n\t\tfor(int i=head[u];i;i=edge[i].nxt)\n\t\t{\n\t\t\tint to=edge[i].to;\n\t\t\tif(edge[i].w>lim)\n\t\t\t{\n\t\t\t\tct[to]--;\n\t\t\t\tif(!ct[to]&&!dfn[to]&&!in[to]) in[to]=true,Qu.push(to);\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,w;\n\t\tscanf(\"%d%d%d\",&x,&y,&w);\n\t\tadd(x,y,w);\n\t\tmaxi=max(maxi,w);\n\t}\n\tint lt=0,rt=maxi;\n\twhile(lt+1<=rt)\n\t{\n\t\tint mid=(lt+rt)/2;\n\t\tlim=mid;\n\t\tmemset(vis,0,sizeof(vis));\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(!vis[i]&&dfs(i,i))\n\t\t\t{\n\t\t\t\tlt=mid+1;\n\t\t\t\tgoto A;\n\t\t\t}\n\t\trt=mid;\n\t\tA:;\n\t}\n\tlim=lt;\n\twork(lt);\n\tfor(int u=1;u<=n;u++)\n\t\tfor(int i=head[u];i;i=edge[i].nxt)\n\t\t{\n\t\t\tint to=edge[i].to;\n\t\t\tif(edge[i].w<=lt)\n\t\t\t\tif(dfn[to]<dfn[u]) ans[++tot]=i;\n\t\t}\n\tprintf(\"%d %d\\n\",lt,tot);\n\tfor(int i=1;i<=tot;i++) printf(\"%d \",ans[i]); \n\treturn 0;\n}\n\t\t\n```",
        "postTime": 1547455155,
        "uid": 49093,
        "name": "_sys",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1100E \u3010Andrew and Taxi\u3011"
    },
    {
        "content": "## \u9898\u76ee\u610f\u601d\n\u7ed9\u4f60\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u6bcf\u4e00\u4e2a\u8fb9\u6709\u4e00\u4e2a\u6743\u503c\u3002\u73b0\u5728\u4f60\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u6761\u8fb9\u7684\u65b9\u5411\uff0c\u4f7f\u5f97\u539f\u56fe\u53d8\u4e3a\u6709\u5411\u65e0\u73af\u56fe\u3002\u6c42\u4fee\u6539\u7684\u8fb9\u7684\u6700\u5927\u503c\u6700\u5c0f\u65f6\u7684\u65b9\u6848\u3002\n## \u601d\u8def\n\u770b\u5230\u6700\u5927\u503c\u6700\u5c0f\u4fbf\u5f88\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u7b54\u6848\uff08\u5373\u4fee\u6539\u7684\u8fb9\u4e2d\u7684\u6700\u5927\u503c\uff09\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u4e8c\u5206\u7684\u6570\u8bbe\u4e3a $mid$\u3002\u90a3\u4e48\u5f88\u660e\u663e\uff0c\u56fe\u4e2d\u7684\u8fb9\u4f1a\u88ab\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a\n1. **\u6743\u503c\u5927\u4e8e $mid$ \u7684\u8fb9**\u3002\n2. **\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8e $mid$ \u7684\u8fb9**\u3002\n\n### \u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff1a\n**prob1**:\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u8fb9\u6211\u4eec\u663e\u7136\u662f\u65e0\u6cd5\u4fee\u6539\u65b9\u5411\u7684\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u73af\u4e14\u6362\u4e0a\u5168\u662f\u4e00\u7c7b\u8fb9\u3002\u5219\u8fd9\u4e2a $mid$ \u663e\u7136\u65e0\u6cd5\u8ba9\u539f\u56fe\u53d8\u6210\u6709\u5411\u65e0\u73af\u56fe\u3002\n\n**prob2**:\u5bf9\u4e8e\u7b2c\u4e8c\u7c7b\u8fb9\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u5176\u65b9\u5411\uff0c\u76f4\u63a5\u7edf\u8ba1\u6709\u54ea\u4e9b\u9700\u8981\u6539\u53d8\u65b9\u5411\u7684\u8fb9\u5373\u53ef\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5341\u5206\u6b23\u559c\u7684\u53d1\u73b0\uff0c\u8fd9\u4e24\u4e2a\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u62d3\u6251\u6392\u5e8f\u6765\u89e3\u51b3\u3002\u5bf9\u4e8eprob1\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u539f\u56fe\u7684\u4e8c\u7c7b\u8fb9\u53bb\u6389\uff0c\u7136\u540e\u8dd1\u62d3\u6251\u6392\u5e8f\u5224\u73af\u3002\u5bf9\u4e8eprob2\uff0c\u6211\u4eec\u5728prob1\u7684\u62d3\u6251\u6392\u5e8f\u4e2d\u987a\u4fbf\u8bb0\u5f55\u62d3\u6251\u5e8f\uff0c\u5982\u679c\u51fa\u73b0\u4e00\u4e2a\u4e8c\u7c7b\u8fb9\u662f\u7531\u62d3\u6251\u5e8f\u5728\u540e\u9762\u7684\u70b9\u6307\u5411\u62d3\u6251\u5e8f\u5728\u524d\u9762\u7684\u70b9\uff0c\u5c31\u8bf4\u660e\u8fd9\u6761\u8fb9\u6784\u6210\u4e86\u73af\uff0c\u5c06\u8fd9\u6761\u8fb9\u8bb0\u5f55\u4e0b\u6765\u5373\u53ef\u3002\n\n## AT LAST \u4e0a\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5+10;\nvector<int>g[maxn];//\u90bb\u63a5\u8868\nvector<int>ans;//\u8bb0\u5f55\u65b9\u6848\nint n,m,rd[maxn],f[maxn],u[maxn],v[maxn],dist[maxn];\n//u\u8868\u793a\u4e00\u6761\u8fb9\u7684\u8d77\u70b9\uff0cv\u8868\u793a\u4e00\u6761\u8fb9\u7684\u7ec8\u70b9,dist\u8868\u793a\u4e00\u6761\u8fb9\u7684\u6743\u503c\n//rd\u8868\u793a\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\uff0cf\u8868\u793a\u4e00\u4e2a\u70b9\u5728\u65b0\u56fe\u4e2d\u7684\u62d3\u6251\u5e8f\nbool check(int x){\n\tfor(int i=1;i<=n;i++){rd[i]=0;g[i].clear();}\n\tfor(int i=1;i<=m;i++){//\u5efa\u56fe(\u5373\u53ea\u4fdd\u7559\u4e00\u7c7b\u8fb9) \n\t\tif(dist[i]<=x)continue;//\u628a\u8fb9\u6743\u5927\u4e8e\u4e8c\u5206\u7b54\u6848\u7684\u8fb9\u5efa\u56fe \n\t\tg[u[i]].push_back(v[i]);\n\t\trd[v[i]]++;\n\t} \n\tqueue<int>q;int cnt=0;\n\tfor(int i=1;i<=n;i++){if(rd[i]==0)q.push(i);} \n\twhile(!q.empty()){//\u62d3\u6251\u6392\u5e8f\n\t\tint p=q.front();f[p]=++cnt;q.pop(); \n\t\tfor(int i=0;i<g[p].size();i++){\n\t\t\tint y=g[p][i];\n\t\t\tif(--rd[y]==0)q.push(y); \n\t\t}\t\n\t}\n\tif(cnt!=n)return 0;//\u5224\u65ad\u662f\u6709\u73af \n\tans.clear();//\u8bb0\u5f55\u65b9\u6848\uff08\u5373\u9700\u8981\u6362\u65b9\u5411\u7684\u4e8c\u7c7b\u8fb9\uff09\n\tfor(int i=1;i<=m;i++){\n\t\tif(dist[i]<=x&&f[u[i]]>f[v[i]])ans.push_back(i);\n\t}//                            \u5982\u679c\u4ecetopo\u5e8f\u5927\u7684\u70b9\n\t//\t\t\t\t\t     \t   \u6307\u5411topo\u5e8f\u5c0f\u7684\u70b9\u5219\u4f1a\u4ea7\u751f\u73af \n\t//                             \u9700\u8981\u98a0\u5012\u8fc7\u6765\n\treturn 1;\n} \nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&u[i],&v[i],&dist[i]);//\u5c06\u8fb9\u7684\u4fe1\u606f\u7528\u4e09\u5143\u7ec4\u5b58\u4e0b\u6765 \n\t} \n\tint l=0,k,r=1e9+10,mid=(l+r)>>1;\n\twhile(l<=r){          //\u4e8c\u5206\u98a0\u5012\u8fc7\u6765\u7684\u8def\u5f84\u7684\u6700\u5927\u503c \n\t\tmid=(l+r)>>1; \t\n\t\tif(check(mid)){  //\u5408\u6cd5\uff0c\u8bb0\u5f55\u7b54\u6848 \n\t\t\tk=mid;//\u5373\u6700\u5c0f\u7684\u6700\u5927\u503c\n\t\t\tr=mid-1;//\u8fd9\u91cc\u4e0dbreak\u662f\u56e0\u4e3a\u8981\u627e\u5230\u8ddf\u5c0f\u7684k\t\n\t\t}else l=mid+1;\n\t} \n\tprintf(\"%d %d\\n\",k,ans.size());\n\tfor(int i=0;i<ans.size();i++){\n\t\tprintf(\"%d \",ans[i]);\n\t}\t \n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n",
        "postTime": 1666100958,
        "uid": 507534,
        "name": "YBaggio",
        "ccfLevel": 4,
        "title": "CF1100E Andrew and Taxi \u9898\u89e3"
    },
    {
        "content": "~~\u7b2c\u4e00\u7bc7\u7d2b\u9898\u9898\u89e3~~\n\n\u9898\u610f\u5341\u5206\u7b80\u6d01\uff0c\u5927\u6982\u5c31\u662f\u53eb\u4f60\u6539\u53d8\u8fb9\u7684\u65b9\u5411\u4f7f\u6709\u5411\u56fe\u4e2d\u6ca1\u6709\u73af\u3002\n\n\n\n------------\n\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5e26\u6709\u201c\u6700\u5927\u503c\u4e2d\u6c42\u6700\u5c0f\u7684\u201d\u6216\u8005\u201c\u6700\u5c0f\u503c\u4e2d\u6c42\u6700\u5927\u7684\u201d\uff0c\u8fd9\u4e00\u7c7b\u9898\u76ee\uff0c\u5f80\u5f80\u90fd\u662f\u7528\u4e8c\u5206\u6765\u679a\u4e3e\u7b54\u6848\u7684\u3002\u8fd9\u9898\u4e5f\u662f\u4e00\u6837\u3002\n\n\n------------\n\n\u5148\u60f3\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u6240\u6709\u8fb9\u6743\u5c0f\u4e8e\u7b49\u4e8eX\u7684\u8fb9\uff0c\u4f7f\u6709\u5411\u56fe\u65e0\u73af\u3002\u90a3\u4e48\u6539\u53d8\u6240\u6709\u8fb9\u6743\u5c0f\u4e8e\u7b49\u4e8eX+1\u7684\u8fb9\uff0c\u80fd\u4e0d\u80fd\u4f7f\u6709\u5411\u56fe\u65e0\u73af\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u56e0\u4e3a\u5c0f\u4e8e\u7b49\u4e8eX\u7684\u6240\u6709\u8fb9\u80af\u5b9a\u4e5f\u662f\u5c0f\u4e8e\u7b49\u4e8eX+1\u7684\u3002\n\n\u60f3\u901a\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u518d\u5f80\u4e8c\u5206\u4e0a\u60f3\uff08\u4e8c\u5206\u5c31\u4e0d\u7528\u89e3\u91ca\u4e86\u5427\uff0c~~\u6211\u5c31\u4e0d\u4fe1\u5237\u7d2b\u9898\u7684\u6709\u4eba\u4e0d\u4f1a\u4e8c\u5206~~\uff09\n\n\n\n------------\n\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u679a\u4e3e\u4e86\u6700\u5927\u503c\uff0c\u90a3\u6211\u4eec\u8981\u600e\u4e48\u53bbcheck\u8fd9\u4e2a\u503c\u662f\u5426\u80fd\u662f\u65e0\u5411\u56fe\u65e0\u73af\u5462\uff1f\n\n\u5224\u65ad\u6709\u6ca1\u6709\u73af\uff0c\u6211\u4eec\u9996\u9009\u7684\u5c31\u662f\u62d3\u6251\u4e86\uff08~~\u6211\u4e0d\u4f1a\u8bf4\u6211\u53ea\u4f1a\u62d3\u6251\u7684~~\uff09\n\n[\u4e0d\u4f1a\u62d3\u6251\u7684\u770b\u8fd9](https://blog.csdn.net/qq_41713256/article/details/80805338)\n\n\u56e0\u4e3a\u6211\u4eec\u679a\u4e3e\u7684\u662f\u6539\u53d8\u7684\u8fb9\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u8fb9\u6743\u5c0f\u4e8e\u6211\u4eec\u6240\u679a\u4e3e\u7684\u503c\u7684\u8fb9\u76f4\u63a5\u8df3\u8fc7\u3002\u770b\u770b\u6240\u6709\u8fb9\u6743\u5927\u4e8e\u7b49\u4e8e\u6211\u4eec\u679a\u4e3e\u7684\u503c\u7684\u8fb9\u80fd\u4e0d\u80fd\u7ec3\u6210\u4e00\u4e2a\u73af\u5c31\u884c\u4e86\u3002\n\n\u62d3\u6251\u7684\u6838\u5fc3\u4ee3\u7801\uff1a\n\n```\nfor (int i=1;i<=n;i++)\n\tfor (int j=lnk[i];j;j=nxt[j]){\n\t\tif (w[j]<=mid) continue;\n\t\tT_in[son[j]]++;       //\u8bb0\u5f55\u5165\u5ea6\n\t}\n\tfor (int i=1;i<=n;i++) if (!T_in[i]) Q[++til]=i;  //\u8bb0\u5f55\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n\twhile (hed<til){\n\t\thed++;Id[Q[hed]]=++tot;vis[Q[hed]]=1;\n\t\tfor (int i=lnk[Q[hed]];i;i=nxt[i]){\n\t\t\tif (w[i]<=mid) continue;\n\t\t\tT_in[son[i]]--;if (!T_in[son[i]]) Q[++til]=son[i];\n\t\t}\n\t}\n\tfor (int i=1;i<=n;i++) if (!vis[i]) return 0;\n```\n\n\n\n------------\n\n\u73b0\u5728\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6240\u8be5\u8fb9\u7684\u6700\u5927\u503c\u4e86\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u8981\u6c42\uff0c\u8981\u6539\u54ea\u4e9b\u8fb9\u5462\uff1f\n\n\u8fd9\u4e2a\u95ee\u9898\u5462\uff0c\u6211\u4eec\u53ea\u8981\u641e\u61c2\u62d3\u6251\u6392\u5e8f\u7684\u539f\u7406\u5373\u53ef\u3002\n\n\u62d3\u6251\u662f\u8bb0\u5f55\u8282\u70b9\u7684\u987a\u5e8f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u7ed9\u6bcf\u4e2a\u8282\u70b9\u6807\u8bb0\u4e00\u4e0b\u4ed6\u51fa\u73b0\u7684\u65f6\u95f4\u6233\uff0c\u518d\u770b\u770b\u4ed6\u6240\u6709\u7684\u513f\u5b50\u8282\u70b9\u6709\u6ca1\u6709\u6bd4\u4ed6\u66f4\u65e9\u51fa\u73b0\u7684\uff0c\u5982\u679c\u6709\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fb9\u5c31\u662f\u8981\u6539\u7684\uff0c\u7eaa\u5f55\u4e00\u4e0b\u5c31\u597d\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\n#define maxn 1000005\nusing namespace std;\nint n,m,x,y,z,lnk[maxn],id[maxn],Id[maxn],nxt[maxn],L,R,mid,Q[maxn],tot,top,T_in[maxn],w[maxn],ans,son[maxn],cnt,Ans[maxn];\nbool vis[maxn];\ninline int read(){\n\tint ret=0,f=1;char ch=getchar();\n\twhile (ch<'0'||ch>'9'){if (ch=='-') f=-f;ch=getchar();}\n\twhile (ch<='9'&&ch>='0') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret*f;\n}\ninline void add(int x,int y,int z,int k){nxt[++tot]=lnk[x];lnk[x]=tot;w[tot]=z;son[tot]=y;id[tot]=k;}\ninline bool check(int x){\n\tmemset(T_in,0,sizeof T_in);\n\tmemset(vis,0,sizeof vis);\n\ttot=0;int hed=0,til=0;\n\tfor (int i=1;i<=n;i++)\n\tfor (int j=lnk[i];j;j=nxt[j]){\n\t\tif (w[j]<=mid) continue;\n\t\tT_in[son[j]]++;\n\t}\n\tfor (int i=1;i<=n;i++) if (!T_in[i]) Q[++til]=i;\n\twhile (hed<til){\n\t\thed++;Id[Q[hed]]=++tot;vis[Q[hed]]=1;\n\t\tfor (int i=lnk[Q[hed]];i;i=nxt[i]){\n\t\t\tif (w[i]<=mid) continue;\n\t\t\tT_in[son[i]]--;if (!T_in[son[i]]) Q[++til]=son[i];\n\t\t}\n\t}\n\tfor (int i=1;i<=n;i++) if (!vis[i]) return 0;\n\tcnt=0;\n\tfor (int i=1;i<=n;++i)\n    for (int j=lnk[i];j;j=nxt[j]) if (Id[son[j]]<Id[i]&&w[j]<=mid) Ans[++cnt]=id[j];\n\treturn 1;\n}\nint main(){\n\tn=read(),m=read();\n\tfor (int i=1;i<=m;i++){\n\t\tx=read(),y=read(),z=read();\n\t\tadd(x,y,z,i);R=max(R,z);\n\t}\n\twhile (L<=R){\n\t\tmid=L+R>>1;\n\t\tif (check(mid)) ans=mid,R=mid-1;\n\t\telse L=mid+1;\n\t}\n\tprintf(\"%d %d\\n\",ans,cnt);\n\tsort(Ans+1,Ans+cnt+1);\n\tfor (int i=1;i<=cnt;i++) printf(\"%d \",Ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1563848929,
        "uid": 108047,
        "name": "LlLlCc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1100E \u3010Andrew and Taxi\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u66f4\u4f73](https://www.cnblogs.com/xixike/p/15496715.html)\n\n# Description\n\n> [\u6d1b\u8c37\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1100E)\n\n# Solution\n\n\u770b\u5230**\u6700\u5927\u503c\u6700\u5c0f**\u8fd9\u6837\u7684\u5b57\u773c\uff0c\u81ea\u7136\u60f3\u5230**\u4e8c\u5206\u7b54\u6848**\u3002\n\n\u6211\u4eec\u4e8c\u5206\u6240\u9009\u8fb9\u6743\u7684\u6700\u5927\u6743\u503c\uff0c\u90a3\u4e48\u6bd4\u8fd9\u4e2a\u503c\u5927\u7684\u8fb9\u90fd\u4e0d\u80fd\u53cd\u5411\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u8fb9\u90fd\u53ef\u4ee5\u9009\u62e9\u53cd\u5411\u3002\n\n\u8bbe\u5f53\u524d\u4e8c\u5206\u5230\u7684\u6743\u503c\u4e3a $mid$\uff0c\u6211\u4eec\u4e0d\u7528\u53bb\u7ba1**\u5c0f\u4e8e\u7b49\u4e8e** $mid$ \u7684\u8fb9\uff08\u603b\u6709\u65b9\u6cd5\u8ba9\u5b83\u5f62\u6210\u4e0d\u4e86\u73af\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u628a**\u5927\u4e8e** $mid$ \u7684\u8fb9\u5168\u90fd\u52a0\u8fdb\u53bb\uff0c\u5229\u7528\u62d3\u6251\u6392\u5e8f\u6765\u5224\u65ad\u662f\u5426\u6709\u8d1f\u73af\u3002\n\n\u5177\u4f53\u65b9\u6cd5\uff1a\u628a\u8fdb\u961f\u7684\u70b9\u7684\u4e2a\u6570\u7edf\u8ba1\u51fa\u6765\u4e3a $sum$\uff0c\u5224\u65ad\u662f\u5426\u7b49\u4e8e $n$\u3002\n\n- \u82e5 $sum < n$\uff0c\u6709\u73af\u3002\n\n- \u82e5 $sum = n$\uff0c\u65e0\u73af\u3002\n\n\u7b26\u5408\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u5c31\u8be5\u627e\u54ea\u4e9b\u8fb9\u9700\u8981\u53cd\u5411\u4e86\u3002\n\n\u7531\u4e8e\u9898\u76ee\u4e2d\u5e76\u6ca1\u6709\u6700\u5c0f\u5316\u53cd\u5411\u8fb9\u7684\u6570\u91cf\u4e4b\u7c7b\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u4f1a\u9020\u6210\u73af\u7684\u8fb9\u5168\u90e8\u53cd\u5411\u3002\n\n\u90a3\u4e48\u6709\u54ea\u4e9b\u8fb9\u4f1a\u5f62\u6210\u73af\u5462\uff1f\n\n\u8fd8\u662f\u62d3\u6251\u6392\u5e8f\uff0c\u5f53\u6211\u4eec\u5bf9\u5927\u4e8e $mid$ \u7684\u8fb9\u6240\u5f62\u6210\u7684\u56fe\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u65f6\uff0c\u8bb0\u5f55\u4e00\u4e0b\u5b83\u5728\u62d3\u6251\u5e8f\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5373\u62d3\u6251\u5e8f\u3002\n\n\u5047\u8bbe\u6709 $x$\uff0c$y$ \u4e24\u70b9\uff0c\u4e14\u62d3\u6251\u5e8f $dfn_y < dfn_x$\uff0c\u6b64\u65f6\u5982\u679c\u6709\u4e00\u6761\u4ece $x$ \u8fde\u5230 $y$ \u7684\u8fb9\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u4f1a\u5f62\u6210\u8d1f\u73af\uff0c\u5c31\u8981\u7ed9\u5b83\u53cd\u5411\u3002\n\n\u6240\u4ee5\u5728\u5408\u6cd5\u7684 $mid$ \u4e0b\u904d\u5386\u4e00\u904d\u6240\u6709\u7684\u8fb9\uff0c\u5224\u4e00\u4e0b\u62d3\u6251\u5e8f\u5373\u53ef\uff0c\u6ce8\u610f\u8fb9\u6743\u8981\u5c0f\u4e8e\u7b49\u4e8e $mid$\u3002\n\n# Code\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <cstring>\n#include <queue>\n\nusing namespace std;\n\nconst int N = 1e5 + 10;\nstruct node{\n    int u, v, w, nxt;\n}edge[N];\nint head[N], tot;\nint n, m, tim;\nbool vis[N], t[N];\nint in[N], dfn[N];\nint ans[N], cnt;\n\ninline void add(int x, int y, int z){\n    edge[++tot] = (node){x, y, z, head[x]};\n    head[x] = tot;\n}\n\ninline int topo(int now){\n    int sum = 0;\n    queue <int> q;\n    for(int i = 1; i <= n; ++i)\n        if(!in[i]) q.push(i);\n    while(!q.empty()){\n        int x = q.front();\n        q.pop();\n        sum++, dfn[x] = ++tim;\n        for(int i = head[x]; i; i = edge[i].nxt){\n            int y = edge[i].v;\n            if(edge[i].w <= now) continue;\n            if(!(--in[y])) q.push(y);\n        }\n    }\n    return sum >= n;\n}\n\ninline bool check(int now){\n    memset(in, 0, sizeof(in));\n    memset(dfn, 0, sizeof(dfn));\n    tim = 0;\n    for(int i = 1; i <= m; ++i)\n        if(edge[i].w > now) in[edge[i].v]++;\n    if(!topo(now)) return 0;\n    cnt = 0;\n    for(int i = 1; i <= n; ++i)\n        if(!dfn[i]) dfn[i] = ++tim;\n    for(int i = 1; i <= m; ++i){\n        int u = edge[i].u, v = edge[i].v;\n        if(edge[i].w <= now && dfn[u] > dfn[v])\n            ans[++cnt] = i;\n    }\n    return 1;\n}\n\nint main(){\n    int l = 0, r = 0, maxs = 0;\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 1, u, v, w; i <= m; ++i){\n        scanf(\"%d%d%d\", &u, &v, &w);\n        add(u, v, w);\n        r = max(r, w);\n    }\n    while(l <= r){\n        int mid = (l + r) >> 1;\n        if(check(mid)) maxs = mid, r = mid - 1;\n        else l = mid + 1;\n    }\n    printf(\"%d %d\\n\", maxs, cnt);\n    sort(ans + 1, ans + 1 + cnt);\n    for(int i = 1; i <= cnt; ++i)\n        printf(\"%d \", ans[i]);\n    puts(\"\");\n    return 0;\n}\n```\n\n\n\n# End",
        "postTime": 1635780181,
        "uid": 158846,
        "name": "xixike",
        "ccfLevel": 0,
        "title": "CF1100E Andrew and Taxi \u9898\u89e3"
    },
    {
        "content": "\u770b\u5230\u4e86\u6700\u5927\u503c\u6700\u5c0f\uff0c\u8003\u8651\u4e8c\u5206\u6700\u5927\u7684\u8fb9\u6743\u3002\n\n\u5982\u679c\u6700\u5927\u7684\u8fb9\u6743 $k$ \u4f7f\u5f97\u56fe\u4e2d\u4e0d\u5b58\u5728\u73af\uff0c\u5219 $x(x \\ge k)$ \u4e5f\u4e00\u5b9a\u53ef\u4ee5\u4f7f\u5f97\u56fe\u4e2d\u4e0d\u5b58\u5728\u73af\u3002\n\n\u5373\u6ee1\u8db3\u4e8c\u5206\u7684\u6027\u8d28\u3002\u4e0b\u9762\u8003\u8651\u5982\u4f55 $\\text{check}$ \u8fb9\u6743\u4e3a $k$ \u662f\u5426\u5408\u6cd5\u3002\n\n\u9996\u5148\u7ed9\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a\n\n> \u5bf9\u4e8e\u4e00\u6761\u8fb9\uff0c\u628a\u4ed6\u5220\u6389\u548c\u5c06\u4ed6\u53cd\u5411\u662f\u7b49\u4ef7\u7684\u3002\n\n\u8bc1\u660e\uff1a\n\n1. \u5982\u679c\u51fa\u73b0\u4e86\u4e00\u6761\u8fb9\u51fa\u73b0\u5728\u4e24\u4e2a\u4e0d\u540c\u5411\u7684\u73af\u4e2d\uff08\u5373\u4e0d\u7ba1\u5982\u4f55\u6807\u5411\u90fd\u4f1a\u51fa\u73b0\u73af\uff0c\u4f8b\u5982\u4e0b\u56fe\u4e2d\u7684\u6700\u7c97\u8fb9\uff09\uff0c\u53ef\u4ee5\u53d1\u73b0\u53bb\u6389\u8fd9\u6761\u8fb9\u4f9d\u7136\u5b58\u5728\u4e00\u4e2a\u73af\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/pupgfxo9.png)\n\n2. \u82e5\u4e0d\u5b58\u5728 $1$ \u4e2d\u7684\u60c5\u51b5\uff0c\u5219\u4e00\u5b9a\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u65b9\u5411\u4f7f\u5f97\u6240\u5728\u73af\u6d88\u5931\u3002\n\n\u8fd9\u6837\uff0c\u53ea\u9700\u8981\u518d\u6743\u503c\u5927\u4e8e $k$ \u7684\u8fb9\u4e0a\u67e5\u8be2\u662f\u5426\u6709\u73af\u5373\u53ef\u3002\n\n\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u89e3\u51b3\u3002\u5982\u679c\u62d3\u6251\u5e8f\u4e2d\u5b58\u5728\u6240\u6709\u70b9\uff0c\u5219\u4e00\u5b9a\u4e0d\u5b58\u5728\u73af\u3002\u5426\u5219\u4e00\u5b9a\u5b58\u5728\u73af\u3002\n\n\u8f93\u51fa\u65b9\u6848\u65f6\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9 $x,y$\uff0c\u82e5\u5b58\u5728\u4e00\u6761\u8fb9 $(x,y)$\uff0c\u5f53 $\\text{dfn}_y<\\text{dfn}_x$ \u65f6\uff0c\u610f\u5473\u7740 $y$ \u5148\u88ab\u904d\u5386\u3002\u82e5\u6b64\u65f6\u52a0\u4e0a\u8fb9 $(x,y)$\uff0c\u5219\u53ef\u80fd\u51fa\u73b0\u73af\u3002\u6545\u6b64\u65f6\u5e94\u5c06\u8fb9 $(x,y)$ \u53cd\u5411\u3002\n\n\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\nnamespace IO{\n    template<typename T>inline void read(T &x){\n        x=0;\n        char ch=getchar();\n        bool flag=0;\n        while(ch<'0'||ch>'9') flag=flag||(ch=='-'),ch=getchar();\n        while(ch>='0'&&ch<='9') x=x*10+(ch^'0'),ch=getchar();\n        if(ch!='.'){\n            x=flag?-x:x;\n            return;\n        }\n        double Base=0.1;\n        while(ch<'0'||ch>'9') ch=getchar();\n        while(ch>='0'&&ch<='9') x=x+Base*(ch^'0'),Base/=10.0,ch=getchar();\n        x=flag?-x:x;\n    }\n    template<typename T>void prt(T x){\n        if(x>9) prt(x/10);\n        putchar(x%10+'0');\n    }\n    template<typename T>inline void put(char ch,T x){\n        if(x<0) putchar('-'),x=-x;\n        prt(x);\n        putchar(ch);\n    }\n    const int DM[10]={1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000};\n    inline void putd(char ch,double x,int w){\n        if(x<0) putchar('-'),x=-x;\n        if(!w){\n            put(ch,(int)(x+0.5));\n            return;\n        }\n        int prex=(int)x;\n        x-=(int)x;\n        x*=DM[w];\n        x+=0.5;\n        int nowx=(int)x,now=0;\n        if(nowx>=DM[w]) nowx=0,prex++;\n        put('.',prex);\n        int xx=nowx;\n        if(!xx) now=1;\n        else while(xx) xx/=10,now++;\n        now=w-now;\n        while(now--) putchar('0');\n        put(ch,nowx);\n    }\n    inline void putstr(string s){\n        for(int i=0;i<s.length();i++) putchar(s[i]);\n    }\n}\nusing namespace IO;\n#define N 100005\nint n,m,head[N],cnt,l=0,r,ans,deg[N],st[N],tp,dfn[N];\nstruct edge{\n\tint v,nxt,val;\n}e[N<<1];\ninline void add(int u,int v,int w){\n\te[++cnt]=(edge){v,head[u],w},head[u]=cnt,r=max(r,w);\n}\nint q[N];\ninline bool check(int k){\n\tmemset(deg,0,sizeof(deg));\n\tint hh=1,tt=0,idx=0;\n\tfor(int i=1;i<=cnt;i++)\n\t\tif(e[i].val>k) deg[e[i].v]++;\n\tfor(int i=1;i<=n;i++)\n\t\tif(!deg[i]) q[++tt]=i;\n\twhile(hh<=tt){\n\t\tint x=q[hh++];\n\t\tdfn[x]=++idx;\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tint v=e[i].v;\n\t\t\tif(e[i].val<=k) continue;\n\t\t\tif(!--deg[v]) q[++tt]=v;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(deg[i]) return 0;\n\ttp=0;\n\tfor(int x=1;x<=n;x++)\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tint v=e[i].v;\n\t\t\tif(e[i].val>k) continue;\n\t\t\tif(dfn[x]>dfn[v]) st[++tp]=i;\n\t\t}\n\treturn 1; \n}\nint main(){\n\tread(n),read(m);\n\tfor(int i=1,u,v,w;i<=m;i++) read(u),read(v),read(w),add(u,v,w); \n\twhile(l<=r){\n\t\tint mid=l+r>>1;\n\t\tif(check(mid)) ans=mid,r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tput(' ',ans),put('\\n',tp);\n\tsort(st+1,st+tp+1);\n\tfor(int i=1;i<=tp;i++) put(' ',st[i]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1636532075,
        "uid": 172370,
        "name": "fzj2007",
        "ccfLevel": 0,
        "title": "CF1100E Andrew and Taxi"
    },
    {
        "content": "**\u9898\u610f**\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6539\u53d8\u5176\u4e2d\u67d0\u4e9b\u8fb9\u7684\u65b9\u5411\uff0c\u5b83\u5c06\u6210\u4e3a\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002\u73b0\u5728\u6c42\u4e00\u4e2a\u6539\u53d8\u8fb9\u65b9\u5411\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u6240\u9009\u8fb9\u8fb9\u6743\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002\n\n\n\n------------\n\n\n**\u8f93\u51fa**\uff1a\u8fb9\u6743\u7684\u6700\u5c0f\u503c\uff0c\u88ab\u53cd\u5411\u7684\u8fb9\u7684\u4e2a\u6570\u53ca\u7f16\u53f7\u3002\n\n\n------------\n\n\n**Solution**\uff1a\u53ea\u8981\u4e8c\u5206\u628a\u6bcf\u4e00\u6761\u8fb9\u548c\u9884\u671f\u7684 $val$ \u4e2acontrollers \u4f5c\u6bd4\u8f83\uff0c\u53ea\u8ba9\u5927\u4e8e\u5b83\u7684\u8fb9\u8054\u901a\uff0c\u5224\u65ad\u6709\u65e0\u73af\u5373\u53ef\uff08\u8be5\u90e8\u5206\u7684\u6b63\u786e\u6027\u5176\u4ed6\u9898\u89e3\u5df2\u7ecf\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u6b64\u4e0d\u518d\u8d58\u8ff0\uff09\u3002\u6700\u540e\u7528\u62d3\u6251\u5224\u65ad\u662f\u5426\u4f7f\u8fd9\u4e9b\u8fb9\u53cd\u5411\u5373\u53ef\u3002\u4f46\u662f\u5173\u4e8e\u6bcf\u6b21\u5224\u65ad\u8fb9\u662f\u5426\u904d\u5386\u8fc7\uff0c\u6211\u53d1\u73b0\u6bcf\u4e00\u7bc7\u9898\u89e3\u90fd\u7528 memset \u6765\u5f52\u96f6\uff0c\u8fd9\u6837\u5982\u679c\u8303\u56f4\u8fc7\u5927\u4e0d\u514d\u5bfc\u81f4\u88ab\u5361\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528 $tot$ \u4f5c\u4e3a\u7b2c $tot$ \u6b21\u4e8c\u5206\u65f6\u7684\u6807\u8bb0\uff0c\u5982\u679c $pre_{p} \\not= tot$ ,\u5c31\u4ee3\u8868\u8fd9\u4e00\u6b21\u6ca1\u6709\u7ecf\u5386\u8fc7\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 $vis_{to}$ \u7684\u975e 0 \u6765\u5224\u65ad\u5176\u6709\u65e0\u73af\u3002\uff08\u522b\u5fd8\u4e86\u6e05\u96f6\u54e6\uff01\uff09\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u7701\u53bb\u4e86\u6bcf\u6b21 memset \u7684\u635f\u8017\u4e86\u3002\n\n\n\n------------\n**more**\uff1a\u5982\u679c\u60f3\u8981\u8ffd\u6c42\u6781\u81f4\u7684\u8bdd\u53ef\u4ee5\u5c1d\u8bd5\u79bb\u6563\u5316\u53d6\u503c\u3002\uff08~~\u6211\u56e0\u4e3a\u592a\u61d2\u5c31\u61d2\u5f97\u5f04\u4e86~~\uff09\n\ncode-->\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#include <cctype>\n#include <cstring>\n#define PT 520\n\nusing namespace std;\n\nstruct node{\n\tint to, nxt, v;\n}e[1000005];\n\nqueue <int> que;\n\nint n, m, head[1000005], cnt, l, r, vis[1000005], pre[1000005], tot;\nint sum, ans[1000005], ppp, minn = 1023456789, dfn[1000005], id[1000005];\n\ninline void add(int from, int to, int v){\n\te[++cnt].nxt = head[from];\n\thead[from] = cnt;\n\te[cnt].to = to;\n\te[cnt].v = v;\n}\n\ninline int dfs(int p, int val){\n\tpre[p] = tot;\n\tvis[p] = 1;\n\tfor(int i = head[p]; i; i = e[i].nxt ){\n\t\tif(e[i].v > val){\n\t\t\tif(pre[e[i].to] == tot && !vis[e[i].to ]){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif((pre[e[i].to ] == tot && vis[e[i].to ]) || dfs(e[i].to , val)) return 1;\n\t\t}\n\t}\n\tvis[p] = 0;\n\treturn 0;\n}\n\ninline void work(int val){\n\tfor(int i = 1; i <= m; i++)\n\tif(e[i].v > val) dfn[e[i].to ]++;\n\tfor(int i = 1; i <= n; i++)\n\tif(!dfn[i]) que.push(i);\n\twhile(!que.empty()){\n\t\tint u = que.front();\n\t\tque.pop();\n\t\tid[u] = ++sum;\n\t\tfor(int i = head[u]; i; i = e[i].nxt ){\n\t\t\tif(e[i].v > val){\n\t\t\t\tdfn[e[i].to ]--;\n\t\t\t\tif(!dfn[e[i].to ]) que.push(e[i].to );\n\t\t\t}\n\t\t}\n\t}\n}\n\nint read()        \n{        \n    int s = 0, f = 1;        \n    char ch = getchar();        \n    while(!isdigit(ch)) {        \n        if(ch == '-') f = -1;        \n        ch = getchar();        \n    }        \n    while(isdigit(ch)) {        \n        s = s * 10 + ch - '0';        \n        ch = getchar();        \n    }        \n    return s * f;        \n}        \n\nint main(){\n\tn = read(), m = read();\n\tfor(int i = 1; i <= m; i++){\n\t\tint x = read(), y = read(), z = read();\n\t\tadd(x, y, z);\n\t\tr = max(r, z);\n\t}\n\tl = 0;\n\tint fl;\n\twhile(l < r){\n\t\tfl = 0;\n\t\ttot++;\n\t\tsum = 0;\n\t\tint mid = (l + r) >> 1;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(pre[i] != tot && dfs(i, mid)){\n\t\t\t\t\tfl = 1;\n\t\t\t\t\tbreak; \n\t\t\t}\n\t\t}\n\t\tif(!fl){\n\t\t\tr = mid;\n\t\t}\n\t\telse {\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\tprintf(\"%d \",r);\n\tsum = 0;\n\twork(r);\n\tfor(int i = 1; i <= n; i++){\n\t\tfor(int j = head[i]; j; j = e[j].nxt ){\n\t\t\tif(e[j].v <= r){\n\t\t\t\tif(id[e[j].to ] < id[i]){\n\t\t\t\t\tans[++ppp] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ppp);\n\tsort(ans + 1, ans + ppp + 1);\n\tfor(int i = 1; i <= ppp; i++)\n\tprintf(\"%d \",ans[i]);\n\treturn 0;\n} \n```\n\n\u5b8c\u7ed3\u6492 f\u0101 \u273f\u273f\u30fd(\u00b0\u25bd\u00b0)\u30ce\u273f\n",
        "postTime": 1592567940,
        "uid": 209604,
        "name": "pikabi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1100E \u3010Andrew and Taxi\u3011"
    },
    {
        "content": "### **\u9898\u76ee\u63cf\u8ff0**\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6539\u53d8\u5176\u4e2d\u67d0\u4e9b\u8fb9\u7684\u65b9\u5411\uff0c\u5b83\u5c06\u6210\u4e3a\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002\n\n\u73b0\u5728\u6c42\u4e00\u4e2a\u6539\u53d8\u8fb9\u65b9\u5411\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u6240\u9009\u8fb9\u8fb9\u6743\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002\n\n##  \u8f93\u5165\u683c\u5f0f\n\n\u70b9\u6570n\uff0c\u8fb9\u6570m\uff0c\u63a5\u4e0b\u6765\u662fm\u6761\u6709\u5411\u8fb9\n\n##  **\u8f93\u51fa\u683c\u5f0f**\n\n\u7b2c\u4e00\u884c\u8f93\u51fa\u4e24\u4e2a\u503c\uff0c\u4e00\u4e2a\u6240\u9009\u8fb9\u6743\u6700\u5c0f\u503c\u548c\u8fb9\u6570k\n\n\u63a5\u4e0b\u6765\u4e00\u884ck\u4e2a\u7f16\u53f7\uff0c\u8868\u793a\u90a3\u4e9b\u8fb9\u9700\u8981\u53cd\u5411\n\n**\u8f93\u5165\u6837\u4f8b**\n\n```\n5 6\n2 1 1\n5 2 6\n2 3 2\n3 4 3\n4 5 5\n1 5 4\n\n\n5 7\n2 1 5\n3 2 3\n1 3 3\n2 4 1\n4 3 5\n5 4 1\n1 5 3\n```\n\n**\u8f93\u51fa\u6837\u4f8b**\n\n```\n2 2\n1 3 \n\n3 3\n3 4 7 \n```\n\n**\u9898\u89e3\uff1a**\n\n\u6bcf\u6b21\u53d6\u5230\u4e00\u4e2a mid \uff0c\u53ea\u4fdd\u7559\u957f\u5ea6\u5927\u4e8e mid \u7684\u8fb9\n\u2460\u5bf9\u4e8e\u6bd4mid\u5927\u7684\u8fb9\uff0c\u4e0d\u80fd\u6539\u53d8\u65b9\u5411\uff0c\u4e8e\u662f\u76f4\u63a5\u52a0\u5165\u56fe\u4e2d\n\u2461\u7136\u540e\u53ea\u9700\u770b\u770b\u6709\u6ca1\u6709\u73af\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u6bd4mid\u5c0f\u7684\u8fb9\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u66f4\u6539\n\ndfs\u5224\u73af\uff0c\u82e5\u6709\u73af\uff0c\u8bf4\u660e ans>mid \uff0c\u5426\u5219 ans\u2264mid\n\u53ef\u4ee5\u7528\u62d3\u6251\u6392\u5e8f\u505a\n\u56e0\u4e3a\u5b83\u53ea\u8ba9\u6700\u5927\u503c\u6700\u5c0f\uff0c\u5e76\u6ca1\u6709\u8bf4\u6539\u53d8\u8fb9\u7684\u6570\u91cf\u6700\u5c0f\uff0c\u6240\u4ee5\u5c0f\u7684\u8fb9\u968f\u4fbf\u6539\n\u8003\u8651\u8f93\u51fa\u65b9\u6848\n\u6211\u4eec\u5728\u62d3\u6251\u6392\u5e8f\u7684\u65f6\u5019\u8bb0\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u7684\u62d3\u6251\u5e8f\n\u8003\u8651\u4e00\u6761\u8fb9x\u5230y\uff0c\u5982\u679cx\u7684\u62d3\u6251\u5e8f\u5927\u4e8ey\uff0c\u663e\u7136\u53ef\u80fd\u6210\u73af\uff08\u4e0d\u662f\u4e00\u5b9a\u6210\u73af\uff09\n\u4f46\u662f\u5982\u679cx\u7684\u62d3\u6251\u5e8f\u5c0f\u4e8ey\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u6210\u73af\n\u9898\u76ee\u6709\u4e0d\u9650\u5236\u6539\u8fb9\u6570\u91cf\uff0c\u6211\u4eec\u5c31\u5c06\u5176\u53cd\u5411\u5373\u53ef\n\n \n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <cstring>\nusing namespace std;\nconst int N = 1e5 + 5;\nint n, m, maxl = 0, indeg[N], b[N], t;\nint head[N], edge[N], leng[N], nxt[N], from[N];\nvector<int> ans;\nbool v[N], w[N];\nqueue<int> q;\nvoid add(int x, int y, int z, int i) {\n    edge[i] = y;\n    leng[i] = z;\n    nxt[i] = head[x];\n    head[x] = i;\n    from[i] = x;\n}\nbool dfs(int x, int now) {\n    v[x] = 1; w[x] = 1;\n    for (int i = head[x]; i; i = nxt[i]) {\n        int y = edge[i], z = leng[i];\n        if (z <= now) continue;\n        if (w[y] || !dfs(y, now)) return 0;\n    }\n    w[x] = 0;\n    return 1;\n}\n\ninline bool check(int now) {\n    memset(v, 0, sizeof(v));\n    memset(w, 0, sizeof(w));\n    for (int i = 1; i <= n; i++)\n        if (!v[i] && !dfs(i, now)) return 0;\n    return 1;\n}\nvoid topsort(int now) {\n    for (int i = 1; i <= n; i++)\n        if (!indeg[i]) q.push(i);\n    while (q.size()) {\n        int x = q.front();\n        q.pop();\n        b[x] = ++t;\n        for (int i = head[x]; i; i = nxt[i]) {\n            int y = edge[i], z = leng[i];\n            if (z > now && !--indeg[y]) q.push(y);\n        }\n    }\n}\n\nint work(int now) {\n    for (int i = 1; i <= m; i++) {\n        int y = edge[i], z = leng[i];\n        if (z > now) ++indeg[y];\n    }\n    topsort(now);\n    for (int i = 1; i <= n; i++)\n        if (!b[i]) b[i] = ++t;\n    for (int i = 1; i <= m; i++) {\n        int x = from[i], y = edge[i], z = leng[i];\n        if (z <= now && b[x] > b[y]) ans.push_back(i);\n    }\n    return ans.size();\n}\nint main() {\n    cin >> n >> m;\n    for (int i = 1, x, y, z; i <= m; i++) {\n        scanf(\"%d%d%d\", &x, &y, &z);\n        add(x, y, z, i); maxl = max(maxl, z);\n    }\n    int l = 0, r = maxl;\n    while (l < r) {\n        int mid = (l + r) >> 1;\n        if (check(mid)) r = mid;\n        else l = mid + 1;\n    }\n    cout << l << \" \" << work(l) << endl;\n    for (int i = 0; i < ans.size(); i++) printf(\"%d \", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1565571876,
        "uid": 151852,
        "name": "Paranoid\u4e36\u79bb\u6b87",
        "ccfLevel": 6,
        "title": "CF1100E Andrew and Taxi \u4e8c\u5206\u7b54\u6848 + \u62d3\u6251\u6392\u5e8f"
    },
    {
        "content": "\u6765\u81ea\u5c0f\u849f\u84bb\u7684\u4e00\u7bc7\u9898\u89e3QwQ\n\n\u5176\u5b9e\u8fd9\u9898\u53ef\u4ee5\u4ece\u5934\u5230\u5c3e\u90fd\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u3002\n\n\u9996\u5148\u662f\u8981\u6c42\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\uff0c\u660e\u663e\u662f\u4e8c\u5206\u627e\u7b54\u6848\u3002\u63a5\u7740\u5bf9\u4e8e\u5927\u4e8emid\u7684\u8fb9\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u5982\u679c\u62d3\u6251\u6392\u5e8f\u5931\u8d25\uff0c\u8bc1\u660e\u6709\u73af\uff0c\u4fbfl=mid+1\u3002\u5982\u679c\u6210\u529f\uff0c\u5c31\u66f4\u65b0\u7b54\u6848\u3002\n\n\u6700\u540e\u8f93\u51fa\u7684\u65f6\u5019\u4e0d\u8981\u5fd8\u8bb0\u7a7a\u683c ~~\uff08\u6211\u767dWA\u4e86\u597d\u51e0\u6b21\uff09~~\n\n\u8fd9\u4e2a\u7a0b\u5e8f\u6765\u81ea@whql\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint vis[100005],head[100005],nxt[200005],pnt[200005],weight[200005],steins[200005];\nint in[100005],E=0,id[100005];\nint cg[100005],k=0,ansk,anscg[100005];\nint n,m,maxn=0;\nqueue<int>q;\nvoid add_edge(int a,int b,int c,int kkk)\n{\n\tpnt[E]=b;\n\tnxt[E]=head[a];\n\tweight[E]=c;\n\tsteins[E]=kkk;\n\thead[a]=E++;\n}\nbool check(int mid)\n{\n\tint kc=0;\n\tmemset(in,0,sizeof(in));\n\tmemset(vis,0,sizeof(vis));\n\tmemset(id,0,sizeof(id));\n\tk=0;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tfor(int j=head[i];j!=-1;j=nxt[j])\n\t\t{\n\t\t\tif(weight[j]<=mid)continue;\n\t\t\tint v=pnt[j];\n\t\t\t++in[v];\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(!in[i])\n\t\t{\n\t\t\tq.push(i);\n\t\t}\n\t}\n\twhile(!q.empty())\n\t{\n\t\tint now=q.front();\n\t\tvis[now]=1;\n\t\tid[now]=++kc;\n\t\tq.pop();\n\t\tfor(int i=head[now];i!=-1;i=nxt[i])\n\t\t{\n\t\t\tif(weight[i]<=mid)continue;\n\t\t\tint v=pnt[i];\n\t\t\t--in[v];\n\t\t\tif(!in[v])\n\t\t\t{\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(vis[i]==0)return 0;\n\t}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tfor(int j=head[i];j!=-1;j=nxt[j])\n\t\t{\n\t\t\tif(weight[j]>mid)continue;\n\t\t\tint v=pnt[j];\n\t\t\tif(id[v]<id[i])\n\t\t\t{\n\t\t\t\tcg[++k]=steins[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tadd_edge(a,b,c,i);\n\t\tmaxn=max(maxn,c);\n\t}\n\tint l=0,r=maxn,ans=0;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid))\n\t\t{\n\t\t\tr=mid-1;\n\t\t\tans=mid;\n\t\t\tansk=k;\n\t\t\tfor(int i=1;i<=ansk;++i)anscg[i]=cg[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl=mid+1;\n\t\t}\n\t}\n\tsort(anscg+1,anscg+ansk+1);\n\tprintf(\"%d %d\\n\",ans,ansk);\n\tfor(int i=1;i<=ansk;++i)printf(\"%d \",anscg[i]);\n\treturn 0;\n}\n```\n\u7ecf\u8fc7\u7cbe\u7b80\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint head[100005],nxt[200005],pnt[200005],weight[200005],steins[200005];\nint in[100005],E=0,id[100005];\nint cg[100005],k=0;\nint n,m;\nqueue<int>q;\nvoid add_edge(int a,int b,int c,int kkk)\n{\n    pnt[E]=b;\n    nxt[E]=head[a];\n    weight[E]=c;\n    steins[E]=kkk;\n    head[a]=E++;\n}\nbool check(int mid)\n{\n    int kc=0;\n    memset(in,0,sizeof(in));\n    memset(id,0,sizeof(id));\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=head[i];j!=-1;j=nxt[j])\n        {\n            if(weight[j]<=mid)continue;\n            int v=pnt[j];\n            ++in[v];\n        }\n    }\n    for(int i=1;i<=n;++i)\n    {\n        if(!in[i])\n        {\n            q.push(i);\n        }\n    }\n    int cnt = 0;\n    while(!q.empty())\n    {\n        int now=q.front();\n        id[now]=++kc;\n        cnt++\n        q.pop();\n        for(int i=head[now];i!=-1;i=nxt[i])\n        {\n            if(weight[i]<=mid)continue;\n            int v=pnt[i];\n            --in[v];\n            if(!in[v])\n            {\n                q.push(v);\n            }\n        }\n    }\n    if (cnt != n) return 0;\n    k = 0;\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=head[i];j!=-1;j=nxt[j])\n        {\n            if(weight[j]>mid)continue;\n            int v=pnt[j];\n            if(id[v]<id[i])\n            {\n                cg[++k]=steins[j];\n            }\n        }\n    }\n    return 1;\n}\nint main()\n{\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d\",&n,&m);\n    int r = 0;\n    for(int i=1;i<=m;++i)\n    {\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add_edge(a,b,c,i);\n        r=max(r,c);\n    }\n    int l=0,ans=0;\n    while(l<=r)\n    {\n        int mid=(l+r)>>1;\n        if(check(mid))\n        {\n            r=mid-1;\n            ans=mid;\n        }\n        else\n        {\n            l=mid+1;\n        }\n    }\n    sort(cg+1,cg+k+1);\n    printf(\"%d %d\\n\",ans,k);\n    for(int i=1;i<=k;++i)printf(\"%d \",cg[i]);\n    return 0;\n}\n```",
        "postTime": 1563770928,
        "uid": 68030,
        "name": "serverkiller",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1100E \u3010Andrew and Taxi\u3011"
    },
    {
        "content": "## \u9898\u89e3\u601d\u8def\uff1a\n\u6837\u4f8b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/b1c2sunk.png)\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\n\n>\u56fe\u4e2d\u65e0\u73af\u7684\u6761\u4ef6\u662f\u4ec0\u4e48\uff1f\n\n>\u5c31\u662f\u4e00\u4e2a\u70b9\u65e0\u6cd5\u8d70\u4e00\u5708\u56de\u5230\u81ea\u5df1\uff0c\u4ed6\u5c31\u65e0\u73af\u3002\n\n>\u90a3\u4e48\u6709\u4e00\u4e2a\u7b97\u6cd5\uff1atopsort\uff08\u62d3\u6251\u6392\u5e8f\uff09\n\n>topsort \u5c31\u4f1a\u7ed9\u6bcf\u4e2a\u8282\u70b9\u4e00\u4e2a\u62d3\u6251\u503c\n\n>\u56fe\u4f8b\uff1a\n\n>![](https://cdn.luogu.com.cn/upload/image_hosting/jp7ph9rm.png)\n\n>\u82e5\u4e00\u4e2a\u56fe\u6709\u73af\uff0c\u90a3\u4e48\u4ed6\u5c31\u6ca1\u6709\u62d3\u6251\u5e8f\uff0c\u56e0\u4e3a\u4ed6\u6240\u6709\u7684\u70b9\u7684\u5165\u5ea6\u90fd $\\ne 0$\u3002\n\n>\u82e5\u4e00\u4e2a\u70b9\u6709\u4e00\u4e2a\u8d77\u70b9\u7ec8\u70b9 $\\langle u , v\\rangle$\uff0c\u82e5 $top_{u} < top_{v}$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u5c31\u662f\u65e0\u73af\u7684\u3002\n\n>\u6216\u62d3\u6251\u6392\u5e8f\u4e0d\u80fd\u8ba9\u4ed6\u7684\u5165\u5ea6\u4e3a $0$\uff0c\u90a3\u4e48\u4ed6\u5c31\u662f\u6709\u73af\u7684\u3002\n\n### \u7136\u540e\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u9898\u600e\u4e48\u505a\uff1a\n\n\u9996\u5148\u4ed6\u8ba9\u6211\u4eec\u6c42\u6700\u5927\u503c\u6700\u5c0f\uff0c\u90a3\u4e48\u6839\u636e\u7ecf\u9a8c\u5e94\u8be5\u662f\u4e8c\u5206\u7b54\u6848\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u4e0a\u90a3\u65b9\u9762\u4e0a\u60f3\u3002\n\n\u628a\u4ed6\u5f97\u5230\u7684\u6743\u503c\u8bbe\u6210 $mid \\longrightarrow$ \u56fe\u4e2d\u6539\u53d8\u65b9\u5411\u7684\u8fb9\u7684\u6743\u503c\u6700\u5927\u503c\u3002\n\n\u6211\u4eec\u8bbe $w$ \u4e3a\u67d0\u4e2a\u70b9\u7684\u6743\u503c\u3002\n\n\u6211\u4eec\u5c31\u5148\u4e8c\u5206\u7b54\u6848\uff1a\n>$w\\le mid$ \u4e0d\u52a0\u8fdb\u56fe\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a\u4ed6\u5220\u6389\u3002\n\n>$w > mid$ \u6309\u539f\u6837\u52a0\u8fdb\u56fe\u3002\n\n\u5224\u5b9a\uff1a\n\n>\u82e5\u6211\u4eec\u628a $\\le mid$ \u7684\u8fb9\u90fd\u5220\u6389\uff0c\u4ed6\u8fd8\u662f\u6709\u73af\uff0c\u90a3\u4e48\u5c31\u662f\u5220\u7684\u8fb9\u6570\u592a\u5c11\u4e86\uff0c\u90a3\u4e48\u628a\u5220\u8fb9\u6570\u7684\u591a\u4e00\u70b9\u3002\n\n>\u82e5\u6ca1\u6709\u73af\u4e86\uff0c\u5c31\u8ba9\u7b54\u6848\u7684\u6743\u503c\u5c0f\u4e00\u70b9\u3002\n\n\u82e5\u6211\u4eec\u6c42\u51fa\u6765\u4e86\u4e00\u4e2a $mid \\longrightarrow$ \u4fdd\u8bc1\u56fe\u4e2d\u65e0\u73af\n\n$w \\le mid$ \u6211\u4eec\u5c31\u628a\u4ed6\u770b\u4f5c\u65e0\u5411\u8fb9\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8981\u53cd\u8f6c\u90a3\u4e9b\u8fb9\u5462\uff1f\uff1f\n\n\u62d3\u6251\u6392\u5e8f\u51fa\u6765\u7684\u6570\u7ec4 $top$\uff0c\u82e5 $top_{u} > top_{v}$ \u90a3\u4e48\u6211\u4eec\u5c31\u53cd\u8f6c\u8fd9\u6761\u8fb9\u3002\n\n\n[AC CODE](https://codeforces.com/contest/1100/submission/155561184)\n\n\u7801\u5b57\u4e0d\u6613\uff0c\u6c42\u8d5e\uff01",
        "postTime": 1651473848,
        "uid": 528430,
        "name": "FiraCode",
        "ccfLevel": 0,
        "title": "CF1100E\u9898\u89e3"
    },
    {
        "content": "2020.11.3\n\n[Link](https://www.luogu.com.cn/problem/CF1100E)\n----------\n\n### \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6539\u53d8\u5176\u4e2d\u67d0\u4e9b\u8fb9\u7684\u65b9\u5411\uff0c\u5b83\u5c06\u6210\u4e3a\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002\u73b0\u5728\u6c42\u4e00\u4e2a\u6539\u53d8\u8fb9\u65b9\u5411\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u6240\u9009\u8fb9\u8fb9\u6743\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002\n\n### \u89e3\u6cd5\n\u5bb9\u6613\u53d1\u73b0\u5bf9\u4e8e\u4e00\u6761\u8fb9\uff0c\u628a\u5176\u5220\u53bb\u548c\u628a\u5176\u53cd\u5411\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\u3002\u82e5\u4e0d\u7ffb\u8f6c\u4e4b\u524d\uff0c\u8fd9\u6761\u8fb9\u4ec5\u5904\u4e8e\u4e00\u4e2a\u7b80\u5355\u73af\u91cc\uff0c\u90a3\u4e48\u53cd\u8fc7\u6765\u4e4b\u540e\u4e00\u5b9a\u4e0d\u4f1a\u7ec4\u6210\u65b0\u73af\u3002\u82e5\u53cd\u8fc7\u6765\u4e4b\u540e\u7ec4\u6210\u4e86\u4e00\u4e2a\u65b0\u7684\u73af\uff0c\u90a3\u4e48\u4e0d\u770b\u8fd9\u6761\u8fb9\u539f\u56fe\u91cc\u4e00\u5b9a\u6784\u6210\u4e86\u53e6\u4e00\u4e2a\u73af\uff08\u753b\u56fe\uff09\u3002\u6240\u4ee5\u5bf9\u4e8e\u53cd\u5411\u64cd\u4f5c\u76f4\u63a5\u4e0d\u8d70\u5b83\u5373\u53ef\u3002\n\n\u82e5\u9009\u5b9a\u4e86\u4e00\u6761\u8fb9\u5176\u6743\u503c\u4e3a $v_i$\uff0c\u90a3\u4e48\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8e $v_i$ \u7684\u8fb9\u90fd\u53ef\u5220\u53ef\u4e0d\u5220\uff0c\u5c31\u6ca1\u6709\u7ea6\u675f\u6761\u4ef6\u3002\u82e5\u9009\u6700\u5927\u7684\u8fb9\uff0c\u90a3\u4e48\u6240\u6709\u8fb9\u90fd\u53ef\u5220\u53ef\u4e0d\u5220\uff0c\u4e00\u5b9a\u53ef\u4ee5\u6ee1\u8db3\u8981\u6c42\u3002\u800c\u82e5\u9009\u62e9\u6700\u5c0f\u7684\u8fb9\uff0c\u53ea\u6709\u6700\u5c0f\u7684\u8fb9\u80fd\u5220\uff0c\u7ea6\u675f\u6761\u4ef6\u5f88\u5f3a\u3002\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u7531\u5355\u8c03\u6027\u7684\uff0c\u800c\u8fb9\u6743\u9650\u5236\u5728 $10^9$ \u5185\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4e8c\u5206\u4e86\u3002\u800c\u5bf9\u4e8e\u6bcf\u6b21\u4e8c\u5206\uff0c\u4e0d\u8d70\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8e $mid$ \u7684\u8fb9\uff0c\u5224\u65ad\u662f\u5426\u6709\u73af\u5373\u53ef\uff0c\u53ef\u7528 $tarjan$ \u6216\u62d3\u6251\u6392\u5e8f\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u9700\u8981\u6c42\u4e00\u79cd\u5177\u4f53\u65b9\u6848\uff0c\u53ea\u80fd\u7528\u62d3\u6251\u3002\u5148 $check$ \u4e00\u4e0b $ans$\uff0c\u628a\u6700\u540e\u7684\u56fe\u5efa\u51fa\u6765\uff0c\u6b64\u65f6\u4e00\u5b9a\u662f\u6ca1\u6709\u73af\u7684\uff0c\u90a3\u4e48\u8fd9\u4e00\u5b9a\u662f\u4e00\u4e2a $DAG$\u3002\u5bf9\u5b83\u8fdb\u884c\u4e00\u904d\u62d3\u6251\uff0c\u6c42\u51fa\u62d3\u6251\u5e8f\u3002\u679a\u4e3e\u539f\u56fe\u4e2d\u6bcf\u6761\u6709\u5411\u8fb9 $u\\to v$\uff0c\u82e5 $u$ \u7684\u62d3\u6251\u5e8f\u6bd4 $v$ \u7684\u5927\uff0c\u8bf4\u660e $v$ \u8981\u6bd4 $u$ \u5148\u88ab\u66f4\u65b0\uff0c\u6240\u4ee5\u8fd9\u6761\u8fb9\u4e00\u5b9a\u8981\u53cd\u8fc7\u6765\u3002\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#define N 200007\n#define M 300007\n\ninline int read(){\n    int x=0; bool flag=1; char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')flag=0;c=getchar();}\n    while(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-48;c=getchar();}\n    return flag? x:-x;\n}\n\nstruct E{\n    int next,to;\n}e[M];\nint head[N],cnt=0;\n\ninline void add(int id,int to){\n    e[++cnt]=(E){head[id],to};\n    head[id]=cnt;\n}\n\nint X[M],Y[M],D[M];\nint n,m,dep[N],in[N],sta[N],top=0;\nbool check(int lim){\n    memset(in,0,sizeof(in));\n    memset(head,0,sizeof(head));\n    cnt=0,top=0;\n    int timer=0;\n    for(int i=1;i<=m;i++)\n        if(D[i]>lim) add(X[i],Y[i]),in[Y[i]]++;\n    for(int i=1;i<=n;i++)\n        if(!in[i]) sta[++top]=i,dep[i]=++timer;\n    while(top){\n        int u=sta[top--];\n        for(int i=head[u];i;i=e[i].next){\n            int v=e[i].to;\n            if(--in[v]) continue;\n            sta[++top]=v,dep[v]=++timer;\n        }\n    }\n    for(int i=1;i<=n;i++)\n        if(in[i]) return 0;\n    return 1;\n}\n\nint main(){\n//    freopen(\"pestc.in\",\"r\",stdin);\n//    freopen(\"pestc.out\",\"w\",stdout);\n    n=read(),m=read();\n    int l=0,r=0,ans;\n    for(int i=1;i<=m;i++){\n        X[i]=read(),Y[i]=read(),D[i]=read();\n        if(D[i]>r) r=D[i];\n    }\n    while(l<=r){\n        int mid=(l+r)>>1;\n        if(check(mid)) ans=mid,r=mid-1;\n        else l=mid+1;\n    }\n    printf(\"%d\",ans);\n    check(ans);\n    int ret=0;\n    for(int i=1;i<=m;i++)\n        if(D[i]<=ans&&dep[X[i]]>dep[Y[i]]) ret++;\n    printf(\" %d\\n\",ret);\n    for(int i=1;i<=m;i++)\n        if(D[i]<=ans&&dep[X[i]]>dep[Y[i]])\n            printf(\"%d \",i);\n} \n```",
        "postTime": 1604454875,
        "uid": 83337,
        "name": "wwlw",
        "ccfLevel": 7,
        "title": "CF1100E Andrew and Taxi"
    },
    {
        "content": "\u86ee\u6709\u8da3\u7684\u4e00\u9053\u4e8c\u5206\u7b54\u6848\u3002\n\n\u9996\u5148\u9898\u76ee\u5df2\u7ecf\u628a\u5355\u8c03\u6027\u5f88\u660e\u663e\u7684\u5199\u51fa\u6765\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u7684\u91cd\u70b9\u653e\u5728\u4e86\u5982\u4f55`check`\u7b54\u6848\u4e0a\u9762\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u4e8c\u5206\u8fd9\u4e2a\u6700\u5927\u8fb9\u6743\u65f6\u4e0d\u7528\u8d28\u7591\u7684\uff0c\u4f46\u662f\u53cd\u8f6c\u8fb9\u771f\u7684\u662f\u592a\u68d8\u624b\u4e86\u3002\u5982\u4f55\u89e3\u51b3\uff1f\n\n\u6211\u4eec\u9996\u5148\u8003\u8651\u65e0\u6cd5\u8fbe\u6210\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u56fe\u4e2d\u4e00\u5b9a\u4f1a\u5b58\u5728\u4e00\u6761\u5c0f\u4e8e\u7b49\u4e8e$mid$\u8fb9\uff0c\u65e0\u8bba\u5982\u4f55\u53cd\u8f6c\uff0c\u6c38\u8fdc\u90fd\u4f1a\u51fa\u73b0\u73af\u3002\n\n\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff1f\uff08\u7ed5\u53e3\u4ee4hhh\n\n\u663e\u7136\u5c31\u662f\u5220\u53bb\u8fd9\u6761\u8fb9\u540e\u7684\u539f\u56fe\u4e2d\u672c\u6765\u5c31\u6709\u73af\uff01\u5373\u4f7f\u8fd9\u6761\u8fb9\u5728\u73af\u4e2d\u4e5f\u4e0d\u4f1a\u5bf9\u73af\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\uff01\n\n\u4e8e\u662f\u601d\u8def\u5c31\u6e05\u6670\u4e86\uff0c\u6211\u4eec\u6bcf\u6b21\u4e8c\u5206\u7b54\u6848\u540e\u5220\u53bb\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8emid\u7684\u8fb9\uff0c\u7136\u540e\u7528dfs\u627e\u73af\u5373\u53ef\u3002\n\n\u8f93\u51fa\u7b54\u6848\u5462\uff1f\u6211\u4eec\u4e8c\u5206\u5b8c\u7b54\u6848\u4e4b\u540e\uff0c\u5bf9\u65b0\u56fe\u8fdb\u884c\u4e00\u6b21\u62d3\u6251\u6392\u5e8f\uff08\u5c31\u662f\u628a\u5c0f\u4e8e\u7b49\u4e8e\u7b54\u6848\u7684\u8fb9\u5220\u53bb\uff09\uff0c\u4e8e\u662f\u6211\u4eec\u518d\u5bf9\u5c0f\u4e8e\u7b49\u4e8e\u7b54\u6848\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u68c0\u67e5\uff0c\u5982\u679c\u67d0\u4e00\u6761\u8fb9\u7684\u8d77\u70b9\u7684\u62d3\u6251\u5e8f\u5927\u4e8e\u7ec8\u70b9\u7684\u62d3\u6251\u5e8f\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u4e00\u5b9a\u8981\u88ab\u53cd\u8f6c\uff0c\u5426\u5219\u5c31\u4f1a\u6210\u73af\u3002\n\n\u7136\u540e\u8fd9\u9053\u9898\u5c31\u53c8\u88ab\u5207\u6389\u4e86\uff0c\u7686\u5927\u6b22\u559c\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define il inline \nusing namespace std;\n\nconst int N = 1e5 + 10;\n\nint head[N] , cnt;\nstruct Edge {\n\tint w ,  from, to , nxt;\n}e[N << 1];\n\nil void add(int u , int v , int w) {\n\te[++ cnt].to = v;\n\te[cnt].from = u;\n\te[cnt].w = w;\n\te[cnt].nxt = head[u];\n\thead[u] = cnt;\n} \n\nint l = 0 , r , ans , flag , n , m;\nbool vis[N];\n\nvoid dfs(int now , int lim) {\n\tif(flag) return;\n\tvis[now] = 1;\n\tfor(int i = head[now] ; i ; i = e[i].nxt) {\n\t\tint v = e[i].to , w = e[i].w;\n\t\tif(w <= lim) continue;\n\t\tif(vis[v] == 1) {flag = 1; return;}\n\t\tdfs(v , lim); \n\t}\n\tvis[now] = 0;\n}\n\nbool check(int x) {\n\tmemset(vis , 0 , sizeof(vis));\n\tflag = 0;\n\tfor(int i = 1 ; i <= n ; i++) if(!vis[i]) {\n\t\tdfs(i , x); if(flag) return false;\n\t}\n\treturn true;\n}\n\nint tot , edge[N] , ind[N] , dep[N];\nvoid toposort() {\n\tfor(int i = 1 ; i <= n ; i ++) {\n\t\tfor(int j = head[i] ; j ; j = e[j].nxt) {\n\t\t\tint v = e[j].to , w = e[j].w;\n\t\t\tif(w <= ans) continue;\n\t\t\tind[v] ++;\n\t\t}\n\t}\n\tqueue <int> q;\n\tint p = 0;\n\tfor(int i = 1 ; i <= n ;i ++) if(!ind[i]) q.push(i);\n\twhile(! q.empty()) {\n\t\tint now = q.front(); q.pop();\n\t\tdep[now] = ++ p;\n\t\tfor(int i = head[now] ; i ; i = e[i].nxt) {\n\t\t\tint v = e[i].to , w = e[i].w;\n\t\t\tif(w <= ans) continue;\n\t\t\tif(!--ind[v]) q.push(v) ;\n\t\t} \n\t}\n\tfor(int i = 1 ; i <= n ; i ++ ) if(!dep[i]) dep[i] = p + 1;\n\tfor(int i = 1 ; i <= cnt ;i ++) {\n\t\tif(e[i].w <= ans) {\n\t\t\tif(dep[e[i].from] > dep[e[i].to]) edge[++ tot] = i;\n\t\t}\n\t}\n}\n\nint main () {\n\tscanf(\"%d %d\" , &n, &m);\n\twhile(m --) {\n\t\tint u , v , w;\n\t\tscanf(\"%d %d %d\" , &u,&v,&w);\n\t\tadd(u,v,w); r = max(r ,  w);\n\t}\n\twhile(l <= r) {\n\t\tint mid = (l + r) >> 1;\n \t\tif(check(mid)) ans = mid , r = mid - 1;\n\t\telse l = mid + 1;\n\t}\n\ttoposort();\n\tprintf(\"%d %d\\n\" , ans , tot);\n\tfor(int i = 1 ; i <= tot ; i ++) printf(\"%d \" , edge[i]);\n \treturn 0;\n}\n\n```",
        "postTime": 1573528477,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF1100E \u3010Andrew and Taxi\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n\u2f00\u4e2a\u6709\u5411\u56fe\uff0c\u6539\u53d8\u2f00\u4e9b\u8fb9\u7684\u2f45\u5411\uff0c\u4f7f\u5f97\u56fe\u4e2d\u6ca1\u6709\u73af\uff0c\u6c42\u4f7f\u5f97\u6240\u9009\u8fb9\u8fb9\u6743\u6700\u5927\u503c\u6700\u2f29\u7684\u2f45\u6848\u3002\n\n### \u5206\u6790\n\n\u5982\u679c\u8fb9\u6743\u6700\u5927\u503c\u5c0f\u7684\u53ef\u884c\uff0c\u90a3\u6700\u5927\u503c\u66f4\u5927\u7684\u4e5f\u4e00\u5b9a\u53ef\u884c\u3002\u56e0\u6b64\u53ef\u4ee5\u4e8c\u5206\u8fb9\u6743\u6700\u5927\u503c\uff0c\u6bcf\u6b21\u628a\u8fb9\u6743\u6bd4\u6700\u5927\u503c\u5927\u7684\u52a0\u5165\u56fe\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u73af\uff0c\u90a3\u628a\u6240\u6709\u6ca1\u52a0\u7684\u8fb9\u7684\u65b9\u5411\u90fd\u6539\u6210\u62d3\u6251\u5e8f\u7684\u65b9\u5411\u5c31\u4e00\u5b9a\u53ef\u4ee5\u6ee1\u8db3\uff0c\u5982\u679c\u6709\u73af\u8bf4\u660e\u4e0d\u53ef\u884c\u3002\u4e8c\u5206\u51fa\u6765\u6700\u5c0f\u7684\u6700\u5927\u503c\u540e\uff0c\u91cd\u65b0\u5efa\u56fe\uff0c\u628a\u6240\u6709\u4e0e\u62d3\u6251\u5e8f\u76f8\u53cd\u7684\u8fb9\u53cd\u8f6c\u65b9\u5411\u5373\u53ef\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define mem(a,b) memset(a,b,sizeof(a))\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ninline void qread(){}template<class T1,class ...T2>\ninline void qread(T1 &a,T2&... b)\n{\n    register T1 x=0;register bool f=false;char ch=getchar();\n    while(ch<'0') f|=(ch=='-'),ch=getchar();\n    while(ch>='0') x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n    x=(f?-x:x);a=x;qread(b...);\n}\ntemplate<class T1,class T2>inline T1 qmax(const T1 &x,const T2 &y){return x>y?x:y;}\ntemplate<class T1,class T2>inline T1 qmin(const T1 &x,const T2 &y){return x<y?x:y;}\nconst int MAXN=1e5+7;\nint n,m,head[MAXN];\nstruct Edge\n{\n    int to,nxt,dis,id;\n    Edge(){;}Edge(int _to,int _dis,int _nxt,int _id):to(_to),dis(_dis),nxt(_nxt),id(_id){}\n};vector<Edge>edge;\nvoid add_edge(int u,int v,int w,int id){edge.push_back(Edge(v,w,head[u],id));head[u]=edge.size()-1;}\nint in[MAXN],ans=2139062143;\nvector<int>topo;\nint topo_sort()\n{\n    topo.clear();int i;queue<int>q;\n    for(i=1;i<=n;i++) if(!in[i]) q.push(i);\n    while(!q.empty())\n    {\n        int u=q.front();q.pop();topo.push_back(u);\n        for(i=head[u];i!=-1;i=edge[i].nxt) if(!(--in[edge[i].to])) q.push(edge[i].to);\n    }\n    return topo.size();\n}\nint x[MAXN],y[MAXN],z[MAXN];\nvoid make(int mid) // \u5efa\u56fe\n{\n    edge.clear();mem(head,-1);mem(in,0);\n    for(int i=0;i<m;i++)\n        if(z[i]>mid) add_edge(x[i],y[i],z[i],i+1),in[y[i]]++;\n}\nbool check(int mid)\n{\n    make(mid);\n    return topo_sort()==n; // \u5982\u679ctopo\u6570\u7ec4\u4e2d\u5305\u542b\u6240\u6709\u70b9\uff0c\u8bf4\u660e\u6ca1\u6709\u73af\n}\nint mp[MAXN];set<int>ans1;\nint main()\n{\n    qread(n,m);int i,j;\n    int l=0,r=0;\n    for(i=0;i<m;i++) qread(x[i],y[i],z[i]),r=qmax(r,z[i]); // \u8f93\u5165\u65f6\u5c06\u4e8c\u5206\u7684\u4e0a\u9650\u5b9a\u4e3a\u6700\u5927\u8fb9\u6743\n    while(l<=r)\n    {\n        int mid=(l+r)>>1;\n        if(check(mid)) r=mid-1,ans=qmin(ans,mid);\n        else l=mid+1;\n    }\n    check(ans);\n    for(int i=0;i<topo.size();i++) mp[topo[i]]=i; // \u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5728\u62d3\u6251\u5e8f\u4e2d\u7684\u4f4d\u7f6e\n    make(0); // \u91cd\u5efa\u56fe\uff0c\u52a0\u5165\u6bcf\u6761\u8fb9\n    for(i=1;i<=n;i++)\n        for(j=head[i];j!=-1;j=edge[j].nxt)\n            if(mp[i]>mp[edge[j].to]) ans1.insert(edge[j].id); // \u8be5\u8fb9\u65b9\u5411\u4e0e\u62d3\u6251\u5e8f\u76f8\u53cd\n    printf(\"%d %d\\n\",ans,ans1.size());\n    for(auto i:ans1) printf(\"%d \",i);\n    return 0;\n}\n```\n\n\n",
        "postTime": 1644997060,
        "uid": 225991,
        "name": "_lxy_",
        "ccfLevel": 6,
        "title": "CF1100E Andrew and Taxi \u9898\u89e3"
    }
]