[
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u653e\u4e24\u4e2a\u5f62\u72b6\u7684\u955c\u5b50\u5b9e\u9645\u4e0a\u662f\u5728\u4e00\u4e2a$(n+1)\\times(m+1)$\u7684\u70b9\u9635\u4e0a\u8fde\u8fb9\u3002\n\n\u8003\u8651\u628a\u8fd9$(n+1)\\times(m+1)$\u4e2a\u70b9\u9ed1\u767d\u76f8\u95f4\u5730\u67d3\u8272\uff0c\u7136\u540e\u8fde\u8fb9\u663e\u7136\u53ea\u4f1a\u5728\u540c\u4e00\u79cd\u989c\u8272\u7684\u70b9\u4e4b\u95f4\u8fde\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u9898\u76ee\u5408\u6cd5\u7684\u8981\u6c42\u5b9e\u9645\u4e0a\u5c31\u662f\u8ba9\u9ed1\u70b9\u8fde\u6210\u4e00\u9897\u751f\u6210\u6811\u6216\u662f\u8ba9\u767d\u70b9\u8fde\u6210\u4e00\u9897\u751f\u6210\u6811\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u770b\u9898\u76ee\u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u663e\u7136\u662f\u4e0d\u80fd\u6709\u73af\uff0c\u800c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u5c31\u662f\u8981\u5c06\u8fb9\u754c\u4e0a\u7684\u8fb9\u4e24\u4e24\u5206\u6210\u4e00\u7ec4\uff0c\u6bcf\u4e00\u7ec4\u7528\u4e00\u6761\u5c01\u95ed\u7684\u6298\u6298\u7ebf\u7ed9\u56f4\u4f4f\u3002\n\n\u663e\u7136\uff0c\u5047\u8bbe\u4e00\u79cd\u989c\u8272\u7684\u70b9\u8fde\u6210\u4e86\u4e00\u9897\u751f\u6210\u6811\uff0c\u53e6\u4e00\u79cd\u989c\u8272\u7684\u70b9\u53ea\u6709\u4e00\u79cd\u8fde\u53d1\uff08\u8fd9\u4e2a\u753b\u753b\u56fe\u5c31\u77e5\u9053\u4e86\uff09\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u4e24\u79cd\u989c\u8272\u7684\u751f\u6210\u6811\u4e2a\u6570\uff0c\u628a\u5b83\u4eec\u76f8\u52a0\u5373\u53ef\u3002\n\n\u751f\u6210\u6811\u7684\u8bdd\uff0c\u7531\u4e8e$k\\leq 200$\uff0c\u5148\u628a\u6709\u7684\u8fb9\u52a0\u8fdb\u53bb\u7528\u5e76\u67e5\u96c6\u7f29\u70b9\u4e4b\u540e\u8dd1\u77e9\u9635\u6811\u5b9a\u7406\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6$O(nm\\alpha (nm)+k^3)$\u3002\n\ncode\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\n#include<set>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<bitset>\n#define eps 1e-15\n#define maxn 105\n#define maxm 200010\n#define inf 1000000007\n//#define mod 1000000007\n#define mp(x,y) make_pair(x,y)\n#define fi first\n#define se second\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned int uint;\ntypedef pair<int,int>pii;\nint read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch-'0'<0||ch-'0'>9){if(ch=='-') f=-1;ch=getchar();}\n    while(ch-'0'>=0&&ch-'0'<=9){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint n,m,mod;\nchar s[maxn][maxn];\nint fa[maxn*maxn];\nint id(int i,int j)\n{\n    return (i-1)*(m+1)+j;\n}\nint find(int x)\n{\n    return fa[x]==x?x:fa[x]=find(fa[x]);\n}\nvoid merge(int x,int y)\n{\n    int u=find(x),v=find(y);\n    fa[u]=v;\n}\nint quick_pow(int x,int p)\n{\n    int an=1,po=x;\n    while(p)\n    {\n        if(p&1)  an=1ll*an*po%mod;\n        po=1ll*po*po%mod;\n        p>>=1;\n    }\n    return an;\n}\nint idx[maxn*maxn];\nstruct Matrix{\n    int a[maxn*5][maxn*5],N;\n    void add(int x,int y)\n    {\n        if(x==y)  return;\n        a[x][x]++;a[y][y]++;\n        a[x][y]--;a[y][x]--;\n    }\n    int solve()\n    {\n        for(int i=1;i<=N;i++)\n          for(int j=1;j<=N;j++)  a[i][j]=(a[i][j]+mod)%mod;\n        int res=1;\n        for(int i=1;i<N;i++)\n        {\n            int pos=i;\n            while(pos<N&&!a[pos][i])  pos++;\n            if(pos>=N)  continue;\n            if(pos!=i)  res=mod-res,swap(a[pos],a[i]);\n            int inv=quick_pow(a[i][i],mod-2);\n            for(int j=i+1;j<N;j++)\n            {\n                int tmp=1ll*inv*a[j][i]%mod;\n                for(int k=i;k<N;k++)  a[j][k]=(a[j][k]-1ll*a[i][k]*tmp%mod+mod)%mod;\n            }\n        }\n        for(int i=1;i<N;i++)  res=1ll*res*a[i][i]%mod;\n        return res;\n    }\n}G[2];\nint main()\n{\n    n=read();m=read();mod=read();\n    for(int i=1;i<=n;i++)  scanf(\"%s\",s[i]+1);   \n    for(int i=1;i<=(n+1)*(m+1);i++)  fa[i]=i;\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            if(s[i][j]=='/')  merge(id(i+1,j),id(i,j+1));\n            else if(s[i][j]!='*')  merge(id(i,j),id(i+1,j+1));\n        }\n    }\n    for(int i=1;i<=n+1;i++)\n    {\n        for(int j=1;j<=m+1;j++)\n        {\n            if(find(id(i,j))==id(i,j))  G[(i+j)&1].N++,idx[id(i,j)]=G[(i+j)&1].N;\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            if(s[i][j]=='*')\n            {\n                G[(i+j)&1].add(idx[find(id(i,j))],idx[find(id(i+1,j+1))]);\n                G[(i+j+1)&1].add(idx[find(id(i+1,j))],idx[find(id(i,j+1))]);\n            }\n        }\n    }\n    int ans=(G[0].solve()+G[1].solve())%mod;\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1581385898,
        "uid": 46396,
        "name": "justin_cao",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF578F \u3010Mirror Box\u3011"
    },
    {
        "content": "\u5c06\u653e\u955c\u5b50\u8f6c\u5316\u4e3a\u5728 $(n+1)\\times(m+1)$ \u7684\u70b9\u9635\u4e2d\u8fde\u8fb9\uff0c\u5c06\u70b9\u9635\u9ed1\u767d\u67d3\u8272\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5408\u6cd5\u7684\u65b9\u6848\u5bf9\u5e94\u4e8e\u9ed1/\u767d\u683c\u5b50\u7684\u751f\u6210\u6811\n\n![](https://img-blog.csdnimg.cn/20191026152456715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FsYW5fY3R5,size_16,color_FFFFFF,t_70)\n\n\uff08\u56fe\u7247\u6765\u6e90\u4e8e\uff1ahttps://blog.csdn.net/alan_cty/article/details/102757110\uff09\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u4f9d\u6b21\u8003\u8651\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n1. \u5149\u7ebf\u8981\u4ece\u90bb\u8fb9\u5c04\u51fa\uff1a\u8bf4\u660e\u6211\u4eec\u9700\u8981\u5c06\u6bcf\u4e24\u4e2a\u8fb9\u7f18\u7528\u7ebf\u5c01\u95ed\u8d77\u6765\uff0c\u8fd9\u8bf4\u660e\u56fe\u9700\u8981\u662f\u8fde\u901a\u7684\uff0c\u753b\u56fe\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0d\u8fde\u901a\u7684\u753b\u5149\u7ebf\u4e00\u5b9a\u4f1a\u8dd1\u51fa\u53bb\u7684\n\n2. \u6bcf\u4e00\u6761\u7f51\u683c\u7ebf\u90fd\u5b58\u57281\u4e2d\u7684\u4e00\u6761\u5149\u7ebf\uff0c\u6ee1\u8db3\u8fd9\u6761\u5149\u7ebf\u7ecf\u8fc7\u8fd9\u4e2a\u7f51\u683c\u7ebf\uff1a\u8bf4\u660e\u4e0d\u80fd\u5b58\u5728\u73af\uff0c\u5982\u679c\u6709\u73af\u7684\u8bdd\uff0c\u56e0\u4e3a\u73af\u662f\u5c01\u95ed\u7684\uff0c\u5149\u7ebf\u4e0d\u53ef\u80fd\u8fdb\u5165\n\n\u5982\u679c\u6211\u4eec\u786e\u5b9a\u4e86\u9ed1\u70b9\u7684\u751f\u6210\u6811\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u767d\u70b9\u5df2\u7ecf\u88ab\u5206\u6210\u4e86\u82e5\u5e72\u68f5\u6811\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5c01\u95ed\u533a\uff0c\u91cc\u9762\u4e0d\u53ef\u80fd\u6709\u9ed1\u70b9\uff0c\u7531\u4e8e\u662f\u9ed1\u767d\u67d3\u8272\uff0c\u767d\u70b9\u4e00\u5b9a\u88ab\u9694\u6210\u4e86\u4e00\u68f5\u6811\n\n\u7136\u540e\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u628a\u5df2\u77e5\u7684\u8fb9\u8fde\u4e0a\u5e76\u67e5\u96c6\u7f29\u70b9\uff0c\u7136\u540e\u8dd1\u4e24\u904d\u77e9\u9635\u6811\u5b9a\u7406\uff0c\u52a0\u8d77\u6765\u5c31\u662f\u7b54\u6848\n\n\u6ce8\u610f\u77e9\u9635\u884c\u5217\u5f0f\u6c42\u6cd5\u4e66\u5199\u8981\u4e25\u8c28\u4e00\u4e9b\u3002\u3002\n\n```cpp\n//timeuse:30min\nconst int N = 510;\nint n,m;char s[N][N];\nint id[N][N],cnt,pos[N * N];\n\nint fa[N * N];\nint getf(int u) { return fa[u] == u ? u : fa[u] = getf(fa[u]); }\nvoid merge(int u,int v) { fa[getf(u)] = getf(v); }\n\nstruct Matrix\n{\n\tint n;ll a[N][N];\n\tvoid add(int x,int y) { a[x][x]++,a[y][y]++,a[x][y]--,a[y][x]--; }\n\tll calc()\n\t{\n\t\tfor(int i = 1;i < n;i++) for(int j = 1;j < n;j++)\n\t\t\ta[i][j] = Mod(a[i][j] % mod + mod);\n\t\tll ans = 1;\n\t\tfor(int i = 1;i < n;i++)\n\t\t{\n\t\t\tint pos = i;\n\t\t\twhile(!a[pos][i] && pos < n) pos++;\n\t\t\tif(pos != i) swap(a[pos],a[i]),ans = mod - ans;\n\t\t\tfor(int j = i + 1;j < n;j++)\n\t\t\t{\n\t\t\t\tll res = a[j][i] * qpow(a[i][i],mod - 2) % mod;\n\t\t\t\tfor(int k = i;k < n;k++)\n\t\t\t\t\ta[j][k] -= a[i][k] * res % mod,a[j][k] = Mod(a[j][k] + mod);\n\t\t\t}\n\t\t}for(int i = 1;i < n;i++) ans = ans * a[i][i] % mod;\n\t\treturn (ans % mod + mod) % mod;\n\t}\n}G[2];\n\nint main()\n{\n\tn = read(),m = read(),mod = read();\n\tfor(int i = 1;i <= n;i++) scanf(\"%s\",s[i] + 1);\n\tfor(int i = 1;i <= n + 1;i++) for(int j = 1;j <= m + 1;j++)\n\t\tid[i][j] = ++cnt,fa[cnt] = cnt;\n\tfor(int i = 1;i <= n;i++) for(int j = 1;j <= m;j++)\n\t\tif(s[i][j] == '/') merge(id[i + 1][j],id[i][j + 1]);\n\t\telse if(s[i][j] == '\\\\') merge(id[i][j],id[i + 1][j + 1]);\n\tfor(int i = 1;i <= n + 1;i++) for(int j = 1;j <= m + 1;j++)\n\t\tif(getf(id[i][j]) == id[i][j]) pos[id[i][j]] = ++G[i + j & 1].n;\n\tfor(int i = 1;i <= n;i++) for(int j = 1;j <= m;j++) if(s[i][j] == '*')\n\t{\n\t\tG[i + j & 1].add(pos[getf(id[i][j])],pos[getf(id[i + 1][j + 1])]),\n\t\tG[i + j + 1 & 1].add(pos[getf(id[i + 1][j])],pos[getf(id[i][j + 1])]);\n\t}\n\tfprint((G[0].calc() + G[1].calc()) % mod);\n}\n```",
        "postTime": 1593229007,
        "uid": 53994,
        "name": "81179332_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF578F \u3010Mirror Box\u3011"
    },
    {
        "content": "u1s1 \u8fd9\u9898\u6570\u636e\u5f88\u6c34\uff0c\u4e0d\u5c11 AC \u4ee3\u7801\u90fd\u53ef\u4ee5\u88ab\u4e0b\u9762\u8fd9\u7ec4\u6570\u636e\u5361\u6389\uff1a\n\n```\n2 2 5\n/\\\n\\/\n```\n\n\u6b63\u786e\u7b54\u6848\uff0c\u5305\u62ec dreamoon \u7684\u6807\u7b97\u8f93\u51fa\u7684\u90fd\u662f $0$\uff0c\u4e0d\u8fc7\u4e0d\u5c11 AC \u4ee3\u7801\u90fd\u8f93\u51fa $1$\uff0c\u6240\u4ee5~~\u5f3a\u70c8\u8c34\u8d23\u51fa\u9898\u4eba\u7528\u811a\u9020\u6570\u636e\u7684\u884c\u4e3a~~\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u5efa\u7acb\u4e00\u4e2a $(n+1)\\times(m+1)$ \u7684\u70b9\u9635\uff0c\u5982\u679c\u7b2c $i$ \u884c\u7b2c $j$ \u5217\u653e\u4e86\u4e00\u4e2a'/'\u578b\u7684\u955c\u5b50\u90a3\u4e48\u6211\u4eec\u5c31\u5728\u7b2c $i$ \u884c\u7b2c $j+1$ \u5217\u8868\u793a\u7684\u70b9\u4e0e\u7b2c $i+1$ \u884c\u7b2c $j$ \u5217\u8868\u793a\u7684\u70b9\u4e4b\u95f4\u8fde\u65e0\u5411\u8fb9\uff0c\u5426\u5219\u6211\u4eec\u5c31\u5728\u7b2c $i$ \u884c\u4e0e\u7b2c $j$ \u5217\u8868\u793a\u7684\u70b9\u4e0e\u7b2c $i+1$ \u884c $j+1$ \u5217\u8868\u793a\u7684\u70b9\u4e4b\u95f4\u8fde\u65e0\u5411\u8fb9\uff0c\u90a3\u4e48\u663e\u7136\u8fde\u51fa\u7684\u56fe\u662f\u4e00\u4e2a $(n+1)(m+1)$ \u4e2a\u70b9 $nm$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u5176\u4e2d\u53ef\u80fd\u4f1a\u5b58\u5728\u5b64\u7acb\u70b9\u4e0e\u73af\u3002\n\n\u90a3\u4e48\u8fd9\u91cc\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u5c31\u662f\u8fd9\u4e9b\u70b9\u7b26\u5408\u8981\u6c42\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u9ed1\u767d\u67d3\u8272\u540e\u7684\u56fe\uff0c\u767d\u70b9\u6784\u6210\u4e00\u68f5\u751f\u6210\u6811\u6216\u8005\u9ed1\u70b9\u6784\u6210\u4e00\u68f5\u751f\u6210\u6811\u3002\n\n\u8bc1\u660e\u7684\u8bdd\u6211\u7ffb\u4e86 $2147483647$\uff08bushi\uff09\u7bc7\u9898\u89e3\u90fd\u6ca1\u80fd\u7ed9\u51fa\u8ba9\u6211\u6ee1\u610f\u8bc1\u660e\uff0c\u5305\u62ec\u5b98\u65b9\u9898\u89e3\u8fd9\u4e00\u6b65\u90fd\u5199\u5f97\u5f02\u5e38\u7b80\u7565\uff0c\u56e0\u6b64\u8fd9\u91cc\u5c31\u7ed9\u51fa\u6211\u7684\u611f\u6027\u8bc1\u660e\uff1a\u5927\u6982\u5c31\u662f\uff0c\u5982\u679c\u67d0\u79cd\u989c\u8272\u7684\u70b9\u6784\u6210\u7684\u5bfc\u51fa\u5b50\u56fe\u5b58\u5728\u73af\uff0c\u90a3\u4e48\u5bf9\u4e8e\u73af\u4e2d\u7684\u8fb9\u663e\u7136\u4e0d\u53ef\u80fd\u88ab\u81f3\u5c11\u4e00\u6761\u5149\u7ebf\u7167\u5230\uff0c\u800c\u663e\u7136\u8fd9\u4e9b\u70b9\u80af\u5b9a\u4f1a\u628a\u4e00\u4e2a\u53e6\u4e00\u79cd\u989c\u8272\u7684\u70b9\u5305\u56f4\uff0c\u56e0\u6b64\u53e6\u4e00\u79cd\u989c\u8272\u7684\u8fb9\u4e5f\u5f62\u6210\u4e0d\u4e86\u751f\u6210\u6811\uff0c\u4e0d\u7b26\u5408\u6761\u4ef6\uff1b\u800c\u5982\u679c\u4e24\u79cd\u989c\u8272\u7684\u70b9\u7684\u5bfc\u51fa\u5b50\u56fe\u90fd\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u5c31\u5b58\u5728\u4e00\u4e2a\u8fb9\u754c\u6bb5\u6ee1\u8db3\u5149\u4ece\u8be5\u8fb9\u754c\u6bb5\u5c04\u5165\u540e\u4e0d\u80fd\u4ece\u76f8\u90bb\u8fb9\u754c\u6bb5\u5c04\u51fa\u4e86\uff0c\u56e0\u6b64\u4e00\u79cd\u6392\u5217\u65b9\u5f0f\u7b26\u5408\u6761\u4ef6\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u79cd\u989c\u8272\u7684\u70b9\u6784\u6210\u4e00\u68f5\u751f\u6210\u6811\u3002\n\n~~yysy \u4ee5\u4e0a\u4e00\u6bb5\u5185\u5bb9\u5168\u5728\u778e\u626f\uff0c\u5927\u6982\u770b\u770b\u5c31\u597d\u4e86~~\n\n\u63a5\u4e0b\u6765\u8003\u8651\u600e\u6837\u6ce8\u610f\uff0c\u6ce8\u610f\u5230\u8fd9\u9898\u6d89\u53ca\u751f\u6210\u6811\u8ba1\u6570\uff0c\u800c $k\\le 200$\uff0c\u56e0\u6b64\u60f3\u5230\u77e9\u9635\u6811\u5b9a\u7406\uff0c\u6ce8\u610f\u5230\u4e00\u4e2a\u6027\u8d28\uff0c\u5c31\u662f\u5982\u679c\u4e00\u79cd\u989c\u8272\u7684\u70b9\u8fde\u6210\u4e86\u4e00\u68f5\u751f\u6210\u6811\uff0c\u90a3\u4e48\u663e\u7136\u539f\u56fe\u4e2d\u7684\u70b9\u96c6\u4f1a\u88ab\u5176\u9694\u6210\u82e5\u5e72\u5757\uff0c\u53e6\u4e00\u79cd\u989c\u8272\u7684\u70b9\u4e5f\u5c31\u4e0d\u4f1a\u5f62\u6210\u8fde\u901a\u5757\u4e86\uff0c\u56e0\u6b64\u53ea\u7528\u5bf9\u9ed1\u70b9\u767d\u70b9\u5206\u522b\u8003\u8651\u5176\u5f62\u6210\u751f\u6210\u6811\u7684\u60c5\u51b5\u628a\u5b83\u4eec\u52a0\u8d77\u6765\u5373\u53ef\uff0c\u8fd9\u4e2a\u5c31\u76f4\u63a5\u7f29\u70b9+Matrix-tree \u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $k^3$\n\n\u7136\u540e\u5c31\u662f\u6211\u8981\u5f3a\u8c03\u7684\u5730\u65b9\u4e86\uff0c\u5982\u679c**\u4e00\u79cd\u989c\u8272\u7684\u8fb9\u5df2\u7ecf\u5f62\u6210\u4e86\u73af\uff0c\u90a3\u4e48\u5c31\u4e0d\u53ef\u80fd\u518d\u6784\u6210\u751f\u6210\u6811\u4e86**\uff0c\u4e0d\u5c11\u89e3\u6cd5\u6ca1\u6709\u7279\u5224\u8fd9\u4e00\u70b9\uff0c\u5177\u4f53 hack \u89c1\u4e0a\u65b9\u3002\n\n\u5927\u6982\u8fd9\u5c31\u662f\u6211\u628a\u8fd9\u7bc7\u9898\u89e3\u4f20\u5230 LG \u4e0a\u7684\u539f\u56e0\u7f62\u2026\u2026\n\n```cpp\nconst int MAXN=100;\nconst int MAXK=400;\nconst int MAX_ID=10201;\nint n,m,mod,fa[MAX_ID+5];char s[MAXN+5][MAXN+5];\nint qpow(int x,int e){\n\tint ret=1;\n\tfor(;e;e>>=1,x=1ll*x*x%mod) if(e&1) ret=1ll*ret*x%mod;\n\treturn ret;\n}\npii rid[MAX_ID+5];bool flg[2];\nint get(int x,int y){return (x-1)*(m+1)+y;}\npii getpos(int x){x--;return mp(x/(m+1)+1,x%(m+1)+1);}\nint find(int x){return (!fa[x])?x:fa[x]=find(fa[x]);}\nvoid merge(int x,int y){\n\tx=find(x);y=find(y);if(x^y) fa[x]=y;\n\telse flg[(getpos(x).fi+getpos(x).se)&1]=0;\n}\nint id[MAX_ID+5],a[MAXK+5][MAXK+5],idn=0,ans=0;\nvoid add(int x,int y){\n\tif(x==y) return;x--;y--;\n\ta[x][y]=(a[x][y]+mod-1)%mod;\n\ta[y][x]=(a[y][x]+mod-1)%mod;\n\ta[x][x]=(a[x][x]+1)%mod;\n\ta[y][y]=(a[y][y]+1)%mod;\n}\nint getdet(){\n\tint sgn=1;\n\tfor(int i=1;i<idn;i++){\n\t\tint t=i;\n\t\tfor(int j=i+1;j<idn;j++) if(a[j][i]) t=j;\n\t\tif(t^i) sgn=-sgn;\n\t\tfor(int j=i;j<idn;j++) swap(a[i][j],a[t][j]);\n\t\tint iv=qpow(a[i][i],mod-2);\n\t\tfor(int j=i+1;j<idn;j++){\n\t\t\tint mul=1ll*(mod-a[j][i])*iv%mod;\n\t\t\tfor(int k=i;k<idn;k++) a[j][k]=(a[j][k]+1ll*mul*a[i][k])%mod;\n\t\t}\n\t} int res=(sgn+mod)%mod;\n\tfor(int i=1;i<idn;i++) res=1ll*res*a[i][i]%mod;\n\treturn res;\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&mod);flg[0]=flg[1]=1;\n\tfor(int i=1;i<=n;i++) scanf(\"%s\",s[i]+1);\n\tfor(int i=1;i<=n;i++) for(int j=1;j<=m;j++){\n\t\tif(s[i][j]=='/') merge(get(i+1,j),get(i,j+1));\n\t\tif(s[i][j]=='\\\\') merge(get(i,j),get(i+1,j+1));\n\t}\n\tif(flg[1]){\n\t\tfor(int i=1;i<=n+1;i++) for(int j=1;j<=m+1;j++)\n\t\t\tif(find(get(i,j))==get(i,j)&&((i+j)&1))\n\t\t\t\tid[get(i,j)]=++idn;\n\t\tfor(int i=1;i<=n;i++) for(int j=1;j<=m;j++) if(s[i][j]=='*'){\n\t\t\tif((i+j)&1) add(id[find(get(i,j))],id[find(get(i+1,j+1))]);\n\t\t\telse add(id[find(get(i+1,j))],id[find(get(i,j+1))]);\n\t\t} ans=(ans+getdet())%mod;\n\t} memset(a,0,sizeof(a));idn=0;\n\tif(flg[0]){\n\t\tfor(int i=1;i<=n+1;i++) for(int j=1;j<=m+1;j++)\n\t\t\tif(find(get(i,j))==get(i,j)&&(~(i+j)&1))\n\t\t\t\tid[get(i,j)]=++idn;\n\t\tfor(int i=1;i<=n;i++) for(int j=1;j<=m;j++) if(s[i][j]=='*'){\n\t\t\tif(~(i+j)&1) add(id[find(get(i,j))],id[find(get(i+1,j+1))]);\n\t\t\telse add(id[find(get(i+1,j))],id[find(get(i,j+1))]);\n\t\t} ans=(ans+getdet())%mod;\n\t} printf(\"%d\\n\",ans);\n\treturn 0;\n}\n/*\n2 2 5\n/\\\n\\/\n*/\n\n```",
        "postTime": 1620734263,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF578F Mirror Box"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u4f60\u4e00\u4e2a $n\\times m$ \u7684\u76d2\u5b50\uff0c\u91cc\u9762\u5168\u662f $45\\degree$ \u7684\u53cc\u9762\u955c\u5b50\uff0c\u5171 $n\\times m$ \u4e2a\uff0c\u8981\u6c42\u4ece\u6bcf\u4e00\u4e2a\u8fb9\u754c\u7ebf\u5904\u5c04\u5165\u5c04\u7ebf\uff0c\u5c06\u4ece\u5176\u76f8\u90bb\u7684\u8fb9\u754c\u7ebf\u5c04\u51fa\uff0c\u5e76\u4e14\u76d2\u5b50\u4e2d\u6240\u6709\u7684\u5206\u754c\u7ebf\u5fc5\u987b\u81f3\u5c11\u4e00\u6761\u5c04\u7ebf\u7ecf\u8fc7\uff0c\u955c\u5b50\u6b8b\u7f3a\u6c42\u65b9\u6848\u6570\u3002\n\n## \u8bc1\u660e\n\n\u7ed3\u8bba\u662f\u5bf9\u76d2\u5b50\u4e2d $(n+1)\\times(m+1)$ \u4e2a\u4ea4\u53c9\u70b9\u9ed1\u767d\u67d3\u8272\uff0c\u5c06\u6bcf\u4e00\u4e2a\u955c\u5b50\u89c6\u4f5c\u4e00\u6761\u94fe\u63a5\u7aef\u70b9\u7684\u8fb9\uff0c\u5219\u9898\u76ee\u6761\u4ef6\u6210\u7acb\u7b49\u4ef7\u4e8e\u9ed1\u8272\u8282\u70b9\u6216\u767d\u8272\u8282\u70b9\u7684\u5bfc\u51fa\u5b50\u56fe\u5fc5\u5b9a\u662f\u4e00\u68f5\u6811\u3002\n\n\u4e3a\u65b9\u4fbf\uff0c\u5c06\u4e24\u7aef\u70b9\u4e3a\u9ed1\u8272\u7684\u8fb9\u79f0\u4e3a\u9ed1\u8272\u8fb9\uff0c\u767d\u8272\u540c\u7406\u3002\n\n\u8bc1\u660e\uff1a\n\n1.  \u5b50\u56fe\u5f62\u6210\u73af\u4e0d\u53ef\u80fd\u7b26\u5408\u6761\u4ef6\uff1a\u5982\u679c\u9ed1\u8272\u6216\u767d\u8272\u8fb9\u6784\u6210\u4e86\u4e00\u4e2a\u73af\uff0c\u5219\u73af\u7684\u5185\u90e8\u4e00\u5b9a\u81f3\u5c11\u5305\u542b\u56db\u4e2a\u5206\u754c\u7ebf\uff0c\u800c\u5206\u754c\u7ebf\u662f\u4e0d\u53ef\u80fd\u6709\u4efb\u610f\u5c04\u7ebf\u7ecf\u8fc7\uff0c\u4e0d\u7b26\u5408\u9898\u610f\u3002\n\n2.  \u5b50\u56fe\u4e3a\u6811\u4e00\u5b9a\u7b26\u5408\u6761\u4ef6\uff1a\u611f\u6027\u7406\u89e3\uff0c\u4e0d\u59a8\u8bbe\u7b2c\u4e00\u6b21\u53cd\u5c04\u4e3a\u9ed1\u8fb9\uff0c\u7531\u4e8e\u76d2\u5b50\u5185\u5168\u662f\u955c\u5b50\uff0c\u56e0\u6b64\u4e00\u6761\u5c04\u7ebf\uff0c\u88ab\u9ed1\u8272\u8fb9\u53cd\u5c04\u540e\u4e00\u5b9a\u4f1a\u9047\u5230\u4e00\u4e2a\u767d\u8272\u7684\u8fb9\uff0c\u4e14\u767d\u8272\u8fb9\u4e0e\u9ed1\u8272\u8fb9\u5e73\u884c\uff1a\n    ```\n       \u767d\u2193\u9ed1\n      /\u2190 /\n    \u767d\u2193\u9ed1\n    ```\n    \u4e4b\u540e\u6709\u4e09\u79cd\u53ef\u80fd\uff1a\n    ```\n    1:\n       \u767d\u2193\u9ed1\n      /\u2190 /\n    \u767d\u2193\u9ed1\n    \u2190 /\n    \u9ed1\n    2:\n       \u767d\u2193\u9ed1\n      /\u2190 /\n    \u767d\u2193\u9ed1\n      \\ \u2192\\\n       \u767d\u2193\u9ed1\n    3:\n       \u767d\u2193\u9ed1\n      /\u2190 / \u2192\n    \u767d\u2193\u9ed1\u2191\u767d\n      \\ \u2192/\n       \u767d\n    ```\n    \u6211\u4eec\u53d1\u73b0\uff0c\u6240\u6709\u7684\u60c5\u51b5\u90fd\u53ef\u4ee5\u5f52\u7eb3\u4e3a\u8fd9\u4e09\u79cd\u60c5\u51b5\uff0c\u800c\u9ed1\u767d\u4e24\u6761\u94fe\u5219\u968f\u7740\u5c04\u7ebf\u800c\u5c06\u5176\u4e0d\u505c\u53cd\u5c04\uff0c\u5e76\u4e0d\u5b58\u5728\u53d1\u6563\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u6bcf\u4e00\u4e2a\u9ed1\u767d\u94fe\u4e4b\u95f4\u7684\u7f1d\u9699\u4ee3\u8868\u4e86\u4e00\u6761\uff08\u6216\u8005\u6b63\u53cd\u4e24\u6761\uff09\u5c04\u7ebf\u3002\n   \n    \u4f46\u662f\u53c8\u6709\u4e00\u79cd\u989d\u5916\u7684\u60c5\u51b5\uff0c\u5373\u4e3a\u5c04\u7ebf\u5e76\u4e0d\u662f\u4ece\u8fdb\u5165\u8fb9\u754c\u7684\u76f8\u90bb\u8fb9\u754c\u51fa\u6765\uff0c\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\uff0c\u5916\u5c42\u7684\u955c\u5b50\u662f\u963b\u65ad\u4e86\u5185\u90e8\u7684\u955c\u5b50\u4e0e\u5916\u90e8\u7684\u8054\u901a\uff0c\u800c\u5185\u90e8\u7684\u955c\u5b50\u6709\u963b\u65ad\u4e86\u5916\u90e8\u7684\u955c\u5b50\u4e0e\u5185\u90e8\u955c\u5b50\u4e4b\u5185\u7684\u8054\u901a\uff0c\u6700\u540e\u7684\u7ed3\u679c\u662f\u53cc\u65b9\u90fd\u4e0d\u8054\u901a\uff0c\u6b64\u60c5\u51b5\u4e0d\u5b58\u5728\u3002\n   \n3.  \u5b50\u56fe\u90fd\u4e0d\u8fde\u901a\u4e0d\u53ef\u80fd\u7b26\u5408\u6761\u4ef6\uff1a\u663e\u7136\u6bcf\u4e2a\u955c\u5b50\u4f1a\u53d7\u5230\u56db\u6761\u5c04\u7ebf\u7684\u53cd\u5c04\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u89c6\u4f5c\u5728\u5b50\u56fe\u8054\u901a\u7684\u60c5\u51b5\u4e0b\u5c06\u5176\u65ad\u5f00\uff0c\u5219\u4f1a\u5c06\u56db\u6761\u5c04\u7ebf\u7684\u987a\u5e8f\u6df7\u4e71\uff0c\u4f7f\u5f97\u5c04\u7ebf\u53d1\u6563\uff0c\u56e0\u6b64\u4e0d\u7b26\u5408\u5165\u5c04\u8fb9\u754c\u4e0e\u5c04\u51fa\u8fb9\u754c\u76f8\u90bb\u7684\u6761\u4ef6\uff0c\u5f53\u7136\u6709\u7279\u4f8b\u5c31\u662f\u53e6\u4e00\u4e2a\u5b50\u56fe\u521a\u597d\u53c8\u8054\u901a\u4e86\uff0c\u4f46\u5c04\u51fa\u7684\u8fb9\u754c\u662f\u53e6\u4e00\u4e2a\u8fb9\u754c\u3002\n\n\u663e\u7136\uff0c\u4e24\u4e2a\u5bfc\u51fa\u5b50\u56fe\u4e0d\u53ef\u80fd\u540c\u65f6\u6210\u4e3a\u6811\uff0c\u56e0\u6b64\u4ec5\u4ec5\u9700\u8981\u7edf\u8ba1\u9ed1\u70b9\u5bfc\u51fa\u5b50\u56fe\u6784\u6210\u6811\u7684\u60c5\u51b5\u52a0\u4e0a\u767d\u70b9\u5bfc\u51fa\u5b50\u56fe\u6784\u6210\u6811\u7684\u60c5\u51b5\uff0c\u4f7f\u7528 Matrix-Tree \u5b9a\u7406\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 305;\nint n, m, p;\n#define mod p\nstruct Dsu {\n\tint fa[MAXN * MAXN], err;\n\tvoid init(int n) {for (int i = 1; i <= n; i++) fa[i] = i; err = 0;}\n\tint findfa(int a) {return fa[a] == a ? a : fa[a] = findfa(fa[a]);}\n\tvoid merge(int u, int v) {u = findfa(u), v = findfa(v); if (u == v) err = 1; fa[u] = v;}\n} dsu[2];\nint qkpow(int a, int b = p - 2) {\n\tint ans = 1; for (; b; b >>= 1, a = 1ll * a * a % p) if (b & 1) ans = 1ll * ans * a % p; return ans;\n}\nint gid(int x, int y) {return (x - 1) * (m + 1) + y;}\nchar mp[MAXN][MAXN]; int id[MAXN * MAXN], mat[MAXN][MAXN];\nint main() {\n\tscanf(\"%d %d %d\", &n, &m, &p);\n\tdsu[0].init((n + 1) * (m + 1)); dsu[1].init((n + 1) * (m + 1));\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= m; j++) {\n\t\t\tchar ch; while ((ch = getchar()) != '/' && ch != '\\\\' && ch != '*');\n\t\t\tif (ch == '/') dsu[(i & 1) ^ (j & 1) ^ 1].merge(gid(i + 1, j), gid(i, j + 1));\n\t\t\tif (ch == '\\\\') dsu[(i & 1) ^ (j & 1)].merge(gid(i, j), gid(i + 1, j + 1));\n\t\t\tmp[i][j] = ch;\n\t\t}\n\t}\n\tif (dsu[0].err || dsu[1].err) return puts(\"0\"), 0;\n\tint tots = 0;\n\tfor (int i = 1; i <= n + 1; i++) {\n\t\tfor (int j = 1; j <= m + 1; j++) {\n\t\t\tif (((i & 1) ^ (j & 1)) == 0 && dsu[0].findfa(gid(i, j)) == gid(i, j)) id[gid(i, j)] = ++tots;\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= m; j++) {\n\t\t\tint x = gid(i, j), y = gid(i + 1, j + 1);\n\t\t\tif ((i & 1) ^ (j & 1)) x = gid(i, j + 1), y = gid(i + 1, j);\n\t\t\tif (mp[i][j] == '*' && dsu[0].findfa(x) != dsu[0].findfa(y)) {\n\t\t\t\tmat[id[dsu[0].findfa(x)]][id[dsu[0].findfa(x)]]++;\n\t\t\t\tmat[id[dsu[0].findfa(y)]][id[dsu[0].findfa(y)]]++;\n\t\t\t\tmat[id[dsu[0].findfa(x)]][id[dsu[0].findfa(y)]]--;\n\t\t\t\tmat[id[dsu[0].findfa(y)]][id[dsu[0].findfa(x)]]--;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= tots; i++) {\n\t\tfor (int j = 1; j <= tots; j++) mat[i][j] = (mat[i][j] + mod) % mod;\n\t}\n\tbool tag = 0;\n\tfor (int i = 1; i < tots; i++) {\n\t\tfor (int j = i + 1; j < tots; j++) {\n\t\t\tif (mat[j][i]) {\n\t\t\t\ttag ^= 1;\n\t\t\t\tfor (int k = i; k < tots; k++) swap(mat[j][k], mat[i][k]);\n\t\t\t\tint P = 1ll * mat[j][i] * qkpow(mat[i][i], mod - 2) % mod;\n\t\t\t\tfor (int k = 1; k < tots; k++) mat[j][k] = (mat[j][k] + mod - 1ll * mat[i][k] * P % mod) % mod;\n\t\t\t}\n\t\t}\n\t}\n\tint res = 1; for (int i = 1; i < tots; i++) res = 1ll * res * mat[i][i] % mod;\n\tif (tag) res = (mod - res) % mod;\n\tfor (int i = 1; i <= tots; i++) {\n\t\tfor (int j = 1; j <= tots; j++) mat[i][j] = 0;\n\t}\n\ttots = 0; tag = 0;\n\tfor (int i = 1; i <= n + 1; i++) {\n\t\tfor (int j = 1; j <= m + 1; j++) {\n\t\t\tif (((i & 1) ^ (j & 1)) && dsu[1].findfa(gid(i, j)) == gid(i, j)) id[gid(i, j)] = ++tots;\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= m; j++) {\n\t\t\tint x = gid(i, j + 1), y = gid(i + 1, j);\n\t\t\tif ((i & 1) ^ (j & 1)) x = gid(i + 1, j + 1), y = gid(i, j);\n\t\t\tif (mp[i][j] == '*' && dsu[1].findfa(x) != dsu[1].findfa(y)) {\n\t\t\t\tmat[id[dsu[1].findfa(x)]][id[dsu[1].findfa(x)]]++;\n\t\t\t\tmat[id[dsu[1].findfa(y)]][id[dsu[1].findfa(y)]]++;\n\t\t\t\tmat[id[dsu[1].findfa(x)]][id[dsu[1].findfa(y)]]--;\n\t\t\t\tmat[id[dsu[1].findfa(y)]][id[dsu[1].findfa(x)]]--;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= tots; i++) {\n\t\tfor (int j = 1; j <= tots; j++) mat[i][j] = (mat[i][j] + mod) % mod;\n\t}\n\tfor (int i = 1; i < tots; i++) {\n\t\tfor (int j = i + 1; j < tots; j++) {\n\t\t\tif (mat[j][i]) {\n\t\t\t\ttag ^= 1;\n\t\t\t\tfor (int k = i; k < tots; k++) swap(mat[j][k], mat[i][k]);\n\t\t\t\tint P = 1ll * mat[j][i] * qkpow(mat[i][i], mod - 2) % mod;\n\t\t\t\tfor (int k = 1; k < tots; k++) mat[j][k] = (mat[j][k] + mod - 1ll * mat[i][k] * P % mod) % mod;\n\t\t\t}\n\t\t}\n\t}\n\tint ans = 1; for (int i = 1; i < tots; i++) ans = 1ll * ans * mat[i][i] % mod;\n\tif (tag) ans = (mod - ans) % mod; res = (res + ans) % mod; printf(\"%d\\n\", res); return 0;\n}\n```",
        "postTime": 1674994132,
        "uid": 109114,
        "name": "_l_l_",
        "ccfLevel": 8,
        "title": "\u3010\u9898\u89e3\u3011CF578F Mirror Box"
    },
    {
        "content": "#### Solution\n\u9996\u5148\u628a\u6240\u6709\u7684\u683c\u70b9\u9ed1\u767d\u67d3\u8272\uff0c\u90a3\u4e48\u955c\u5b50\u8fde\u63a5\u7684\u70b9\u989c\u8272\u4e00\u5b9a\u76f8\u540c\uff0c\u5c06**\u4e00\u5757\u955c\u5b50\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9**\uff0c\u90a3\u4e48\u6700\u7ec8**\u9ed1\u70b9\u548c\u767d\u70b9\u5404\u6784\u6210\u4e86\u4e00\u9897\u6811**\uff0c\u786e\u5207\u5730\u8bf4\uff0c**\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u6848\u4e00\u5b9a\u552f\u4e00\u5bf9\u5e94\u4e00\u68f5\u9ed1\u70b9\u6216\u767d\u70b9\u7684\u751f\u6210\u6811**\u3002\n\n\u8bc1\u660e\uff1a\u9996\u5148\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u7b49\u4ef7\u4e8e\u65e0\u73af\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6761\u5149\u7ebf\u90fd\u6709\u552f\u4e00\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u5047\u8bbe\u4e0d\u5b58\u5728\u4ece\u8fb9\u754c\u5165\u5c04\u7684\u5149\u7ebf\u53ef\u4ee5\u7a7f\u8fc7\u8fd9\u6761\u8fb9\uff0c\u90a3\u4e48\u4e00\u5b9a\u5f62\u6210\u4e86\u4e00\u4e2a\u5149\u7ebf\u6784\u6210\u7684\u73af\u3002\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u6761\u4ef6\uff0c\u8003\u8651\u8fb9\u754c\u4e0a**\u76f8\u90bb\u7684\u4e24\u4e2a\u540c\u8272\u70b9**\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u95f4\u5bf9\u5e94\u7684\u4e24\u6761\u8fb9\u7684\u5149\u7ebf\u4e00\u5b9a\u662f\u6309\u7167\u4e24\u4e2a\u70b9\u5728\u6811\u4e0a\u7684\u8def\u5f84\u8d70\u7684\uff0c\u4e14\u8fd9\u4e24\u6761\u8fb9\u4e92\u76f8\u5230\u8fbe\u3002\n\n\u8003\u8651\u5982\u4f55\u6c42\u7b54\u6848\uff0c\u5bf9\u4e8e\u6240\u6709\u5df2\u77e5\u7684\u8fb9\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u7f29\u8d77\u6765\uff0c\u7136\u540e\u679a\u4e3e\u9ed1\u70b9\u8fd8\u662f\u767d\u70b9\u6784\u6210\u6811\uff0c\u4f7f\u7528\u77e9\u9635\u6811\u5b9a\u7406\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O(nm\\cdot \\alpha(nm)+k^3)$\n#### Code\n```cpp\nint n,m,MOD;\nint f[MAXM],a[MAXN][MAXN],id[MAXN][MAXN],tag[MAXM];\nchar s[MAXN][MAXN];\n\nint Find(int x){\n    if(x == f[x]) return x;\n    return f[x] = Find(f[x]);\n}\n\nvoid Union(int x,int y){\n    x = Find(x); y = Find(y);\n    if(x == y) return;\n    f[x] = y;\n}\n\nint power(int x,int y){\n    int res = 1;\n    while(y){\n        if(y & 1) res = 1ll * res * x % MOD;\n        x = 1ll * x * x % MOD;\n        y >>= 1;\n    }\n    return res;\n}\n\nvoid add_edge(int u,int v){\n    addmod(a[u][u],1); addmod(a[v][v],1);\n    submod(a[u][v],1); submod(a[v][u],1);\n}\n\nint Gauss(int n){\n    int res = 1;\n    for(int k = 1;k <= n;k++){\n        int pos = k;\n        for(int i = k + 1;i <= n;i++){\n            if(abs(a[pos][k]) < abs(a[i][k]))\n                pos = i;\n        }\n        if(pos != k) res = sub(0,res), swap(a[pos],a[k]);\n        res = 1ll * res * a[k][k] % MOD;\n        ll inv = power(a[k][k],MOD - 2);\n        for(int i = k;i <= n;i++)\n            a[k][i] = 1ll * a[k][i] * inv % MOD;\n        for(int i = k + 1;i <= n;i++){\n            for(int j = k + 1;j <= n;j++)\n                submod(a[i][j],1ll * a[i][k] * a[k][j] % MOD);\n        }\n    }\n    return res;\n}\n\nint Solve(int t){\n    int tot = 0;\n    for(int i = 0;i <= n;i++){\n        for(int j = 0;j <= m;j++){\n            if(((i + j) & 1) == t)\n                id[i][j] = ++tot;\n        }\n    }\n    for(int i = 1;i <= tot;i++) f[i] = i;\n    for(int i = 1;i <= n;i++){\n        for(int j = 1;j <= m;j++){\n            if(s[i][j] == '/' && ((i + j - 1) & 1) == t)\n                Union(id[i - 1][j],id[i][j - 1]);\n            if(s[i][j] == '\\\\' && ((i + j) & 1) == t)\n                Union(id[i - 1][j - 1],id[i][j]);\n        }\n    }\n    int cnt = 0;\n    for(int i = 1;i <= tot;i++){\n        if(Find(i) == i)\n            tag[i] = ++cnt;\n    }\n    memset(a,0,sizeof(a));    \n    for(int i = 1;i <= n;i++){\n        for(int j = 1;j <= m;j++){\n            if(s[i][j] == '*' && ((i + j - 1) & 1) == t)\n                add_edge(tag[Find(id[i - 1][j])],tag[Find(id[i][j - 1])]);\n            if(s[i][j] == '*' && ((i + j) & 1) == t)\n                add_edge(tag[Find(id[i - 1][j - 1])],tag[Find(id[i][j])]);\n        }\n    }\n    return Gauss(cnt - 1);\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&MOD);\n    for(int i = 1;i <= n;i++) scanf(\"%s\",s[i] + 1);\n    printf(\"%d\\n\",add(Solve(0),Solve(1)));\n    return 0;\n}\n```",
        "postTime": 1608706753,
        "uid": 108894,
        "name": "\u5173\u6000\u4ed6\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF578F \u3010Mirror Box\u3011"
    }
]