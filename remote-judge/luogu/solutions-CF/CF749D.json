[
    {
        "content": "# 0.\u524d\u8a00\n\u9898\u76ee\u94fe\u63a5\uff1a[http://codeforces.com/contest/749/problem/D](http://codeforces.com/contest/749/problem/D)\n \n\u9898\u76ee\u5927\u610f\uff1a\n$n$ \u4e2a\u4eba\u5728\u7ade\u6807\u7269\u54c1\uff0c\u8f6e\u6d41\u51fa\u4ef7\uff0c\u6700\u7ec8\u4ef7\u9ad8\u8005\u5f97\u3002\n\u73b0\u5728\u5df2\u77e5\u6574\u4e2a\u7ade\u6807\u8fc7\u7a0b\u603b\u5171\u6709 $n$ \u6b21\u51fa\u4ef7\uff0c\u7528 $(a[i],b[i])$ \u6765\u8868\u793a\u7b2c $i$ \u6b21\u7ade\u6807\u4e2d\uff0c\u7b2c $a[i]$ \u4e2a\u4eba\uff0c\u51fa\u4ef7\u4e3a $b[i]$\u3002\n \n$q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u9996\u5148\u662f $k$\uff0c\u8868\u793a\u5047\u5982 $k$ \u4e2a\u4eba\u6ca1\u6765\uff0c\u63a5\u4e0b\u6765\u662f $k$ \u4e2a\u6574\u6570\uff0c\u8868\u793a $k$ \u4e2a\u6ca1\u6765\u4eba\u7684\u5e8f\u53f7\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa\u6700\u7ec8\u7684\u7ade\u6807\u7ed3\u679c\u3002\n\n# 1.\u5173\u4e8e\u6837\u4f8b\n```\n **input**\n 6\n 1 10\n 2 100\n 3 1000\n 1 10000\n 2 100000\n 3 1000000\n 3\n 1 3\n 2 2 3\n 2 1 2\n **output**\n 2 100000\n 1 10\n 3 1000\n```\n\u6837\u4f8b\u89e3\u91ca\uff1a\n\n\u5f53 3 \u53f7\u6ca1\u6765\u53c2\u52a0\u65f6\uff0c\u7ade\u6807\u8fc7\u7a0b\u662f\uff1a\n\n```\n1 10\n2 100\n1 10\u2009000\n2 100\u2009000\n```\n\n2 \u53f7\u51fa\u4ef7 $100000$ \u7ade\u6807\u6210\u529f\uff1b\n\n---\n\u5f53 2,3 \u53f7\u6ca1\u6765\u53c2\u52a0\u65f6\uff0c\u7ade\u6807\u8fc7\u7a0b\u662f\n```\n1 10\n1 10\u2009000\n```\n\n1 \u53f7\u7ade\u6807\u6210\u529f\uff0c\u4f46\u662f\u56e0\u4e3a 1 \u53f7\u4e0d\u4f1a\u51fa\u4ef7\u8d85\u8fc7\u81ea\u5df1\uff0c\u6240\u4ee5\u6700\u7ec8\u662f\u51fa\u4ef7 $10$ \u7ade\u6807\u6210\u529f\uff1b\n\n---\n\u5f53 1,2 \u53f7\u6ca1\u6765\u53c2\u52a0\u65f6\uff0c\u6700\u7ec8 $1000$ \u7ade\u6807\u6210\u529f\u3002\n\n---\n\n# 2.\u89e3\u6790\n\n - \u6574\u4f53\u601d\u7ef4\n \n\u4e3b\u8981\u95ee\u9898\uff1a\u5982\u4f55\u5feb\u901f\u6c42\u51fa\u7ade\u6807\u7684\u7ed3\u679c\u3002\n\n$q$ \u7684\u6570\u91cf\u8f83\u5927\uff0c\u80fd\u591f\u63a5\u53d7\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5728 $O(\\log N)$\u3002\n\n\u4ece\u9898\u76ee\u4e2d\u663e\u7136\u770b\u51fa\uff0c\u8d8a\u5f80\u540e\uff0c\u51fa\u4ef7\u4f1a\u8d8a\u9ad8\uff0c\u901a\u8fc7\u6700\u540e\u9762\u5c31\u53ef\u4ee5\u77e5\u9053\u6700\u9ad8\u4ef7\u3002\n\n - \u8be2\u95ee\u7684\u5f71\u54cd&\u89e3\u51b3\u65b9\u6cd5\uff1a\n\n**\u5f71\u54cd\uff1a**\n\n1. \u67d0\u4e9b\u4eba\u4e0d\u6765\uff0c\u5176\u7ade\u6807\u7684\u4ef7\u683c\u65e0\u6548\uff0c\u672c\u6765\u53ef\u80fd\u662f\u4ed6\u7684\u6700\u9ad8\u4ef7\uff0c\u4f1a\u987a\u5ef6\u4e0b\u4e00\u4e2a\u4eba\uff1b\n2. \u5047\u8bbe\u67d0\u4e2a\u4eba\u51fa\u4e86\u6700\u9ad8\u4ef7\uff0c\u4f46\u662f\u56e0\u4e3a\u67d0\u4e9b\u4eba\u6ca1\u6765\uff0c\u5bfc\u81f4\u4ed6\u7684\u6b21\u9ad8\u4ef7\u4e5f\u662f\u6700\u9ad8\u7684\uff0c\u8fd9\u65f6\u5019\u4f1a\u9009\u62e9\u6b21\u9ad8\u4ef7\u3002\n\n**\u529e\u6cd5\uff1a**\n\n\u6839\u636e\u7ade\u6807\u7ed3\u679c\uff0c\u6309\u5927\u5c0f\u653e\u5230\u4e00\u4e2a\u6876\u4e2d\u3002\u5176\u4e2d\u6bcf\u4e2a\u6876\u4f9d\u7167\u6700\u9ad8\u4ef7\u4f5c\u4e3a\u6743\u503c\u8fdb\u884c sort\uff08\u6392\u5e8f\uff09\uff1b\n\n\u6bcf\u6b21\u627e\u6709\u6548\u7684\u548c\u6743\u503c\u6700\u9ad8\u7684\u6876\uff0c\u5c31\u4e2d\u6807\uff1b\n\n\u518d\u627e\u6b21\u9ad8\u7684\u6876\uff0c\u5728\u6700\u9ad8\u7684\u6876\u91cc\u9762\u9009\u62e9\u4e00\u4e2a\u6bd4\u6b21\u9ad8\u6876\u7684\u6743\u503c\u66f4\u9ad8\u7684\u7ade\u6807\u4f5c\u4e3a\u4f4e\u4ef7\u3002\n\n - \u590d\u6742\u5ea6\u5206\u6790\uff1a\n\n\u82e5 $N$ \u4e3a\u7ade\u6807\u6570\u91cf\uff0c\u7136\u540e\u5c06\u6bcf\u4eba\u7684\u7ade\u6807\u7ed3\u679c\u5206\u7c7b\uff0c\u590d\u6742\u5ea6\u4e3a $O(N)$\u3002\n\n\u82e5 $M$ \u4e3a\u6876\u7684\u6570\u91cf\uff0c\u6bcf\u4e2a\u6876\u7684\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u4e3a $O(M\\log M)$\u3002        \n\u7528\u904d\u5386\u64cd\u4f5c\u627e\u5230\u6743\u503c\u6700\u9ad8\u7684\u6876\u3002\n\n\u7ee7\u7eed\u7528\u904d\u5386\u64cd\u4f5c\uff0c\u627e\u6743\u503c\u6700\u9ad8\u7684\u6876\u548c\u627e\u6743\u503c\u6b21\u9ad8\u7684\u6876\u3002\n\n\u5728\u6743\u503c\u6700\u9ad8\u7684\u6876\u91cc\u9762\u627e\u4e00\u4e2a\u7ade\u6807\uff0c\u6bd4\u6b21\u9ad8\u6876\u7684\u6743\u503c\u66f4\u9ad8\u7684\uff0c\u7528\u4e8c\u5206\u7684\u590d\u6742\u5ea6\u662f $O(\\log N)$\uff0c\u6b21\u6570\u6709 $O(N)$ \u6b21\uff0c\u603b\u590d\u6742\u5ea6\u662f $O(N\\log N)$\u3002\n \n# 3.code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long lld;\nconst int N = 201000; \nstruct Node {\n    int value, pos;\n    bool operator<(const Node &tmp) const{\n        if (value != tmp.value) return value > tmp.value;\n        else return pos > tmp.pos;\n    };\n    Node(int x, int y):value(x), pos(y){};\n    Node(){};\n}node[N];\nvector<int> bucket[N];\nvector<Node> people(N);\nint main() {\n    int n, q;\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n        int pid, bid;\n        scanf(\"%d%d\", &pid, &bid);\n        people[pid] = Node(bid, pid); // bigger bid\n        bucket[pid].push_back(bid);\n    }  \n    sort(people.begin(), people.begin() + n + 1);\n    cin >> q;\n    while (q--) {\n        int k;\n        scanf(\"%d\", &k);\n        map<int, int> h;\n        for (int i = 0; i < k; ++i) {\n            int tmp;\n            scanf(\"%d\", &tmp);\n            h[tmp] = 1;\n        }\n        int ok = 0;\n        for (int i = 0; i < n; ++i) {\n            if (people[i].pos == 0) break;\n            if (h.find(people[i].pos) == h.end()) { // find top\n                int topId = people[i].pos;\n                int secondId = 0;\n                for (int j = i + 1; j < n; ++j) {\n                    if (h.find(people[j].pos) == h.end()) { // find second top\n                        secondId = people[j].pos;\n                        break;\n                    }\n                }\n                if (secondId == 0) cout << topId << \" \" << bucket[topId].front() << endl;// not find second top\n                else cout << topId << \" \" << *upper_bound(bucket[topId].begin(), bucket[topId].end(), bucket[secondId].back()) << endl;\n                ok = 1;\n                break;\n            }\n        }\n        if (!ok) cout << \"0 0\" << endl;\n    }   \n\treturn 0;\n}\n//by guyugeng2007\n```\n\u53ea\u5199\u4e86 ~~\u975e\u5e38\u7b80\u5355~~ \u7684\u82f1\u6587\u6ce8\u91ca\uff0c\u5e94\u8be5\u80fd\u770b\u61c2\u5427\u3002\n\n# 4.\u53d1\u70b9\u7262\u9a9a\n\u5173\u6ce8\u5173\u6ce8\u518d\u5173\u6ce8\uff01[\u6211\u7684\u4e3b\u9875qwq](https://www.luogu.com.cn/user/554872)\n\n\u6ca1\u8bb0\u9519\u7684\u8bdd\u8fd9\u662f\u6211\u7684\u7b2c\u516b\u7bc7\u9898\u89e3\uff0c\u9884\u795d\u5404\u4f4d\u5b66\u751f\u4eec\u5728\u65b0\u5b66\u671f\u62ff\u5230\u597d\u6210\u7ee9\uff0c\u8003 CSP \u548c NOIP \u7684\u90fd\u62ff\u4e00\u7b49\u5956\uff01",
        "postTime": 1630330241,
        "uid": 554872,
        "name": "Deirdre",
        "ccfLevel": 0,
        "title": "[CF749D]\u9898\u89e3"
    },
    {
        "content": "\u4e00\u5b9a\u662f\u6ca1\u6709\u53bb\u6389\u7684\u7b2c\u4e8c\u5927\u7684\u3002  \n\u90a3\u4e48\u5c31set+\u4e8c\u5206\u5c31\u597d\u4e86  \n```cpp\n#include <bits/stdc++.h>\n#define rep(i, s, t) for (int i = (s); i <= (t); i ++) \nusing namespace std;\ntemplate <typename T> inline void read(T &x) {\n\tx = 0; T fl = 1; char ch = 0; \n\tfor (; ch < '0' || ch > '9'; ch = getchar()) if (ch == '-') fl = -1; \n\tfor (; ch >= '0' && ch <= '9'; ch = getchar()) x = (x << 1) + (x << 3) + (ch ^ 48);\n\tx *= fl; \n}\ntemplate <typename T, typename... Args> inline void read(T& x, Args&... args) {\n    read(x); read(args...); \n}\nconst int N = 2e6 + 5; \nvector<int> a[N];\nint b[N], d[N], vis[N]; \nset<pair<int, int> > s; \nint n, q, k; \nint main() {\n\tread(n); rep(i, 1, n) { int x, y; read(x, y); a[x].push_back(y); vis[x] = 1; b[x] = y; } \n\trep(i, 1, n) if (vis[i]) s.insert(make_pair(b[i], i));\n\tread(q); \n\trep (_t, 1, q) {\n\t\tread(k); rep(i, 1, k) { read(d[i]); if (vis[d[i]]) s.erase(make_pair(b[d[i]], d[i])); }\n\t\tif (s.size() == 0) printf(\"0 0\\n\"); \n\t\telse if (s.size() == 1) printf(\"%d %d\\n\", s.begin()->second, *a[s.begin()->second].begin());\n\t\telse {\n\t\t\tauto i1 = s.end(), i2 = s.end(); i1 --; i1 --; i2 --; \n\t\t\tint num1 = i1->first, num2 = i2->second; \n\t\t\tauto it = upper_bound(a[num2].begin(), a[num2].end(), num1);\n\t\t\tprintf(\"%d %d\\n\", num2, *it);\n\t\t}\n\t\trep(i, 1, k) if (vis[d[i]]) s.insert(make_pair(b[d[i]], d[i]));\n\t}\n\treturn \n```",
        "postTime": 1557294959,
        "uid": 35567,
        "name": "Ayers",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF749D \u3010Leaving Auction\u3011"
    },
    {
        "content": "# T4-Leaving Auction\n\u4e00\u573a\u62cd\u5356\u4f1a\uff0c\u5171n\u4e2a\u4e70\u5bb6\u3002\u8fd9\u4e9b\u4e70\u5bb6\u5171\u51fa\u4ef7n\u6b21\uff0c\u6709\u7684\u4e70\u5bb6\u53ef\u80fd\u4e00\u6b21\u90fd\u6ca1\u6709\u51fa\u4ef7\u3002\n\n\u6bcf\u6b21\u51fa\u4ef7\u7528\uff08ai,bi\uff09\u8868\u793a\uff0cai\u4e3a\u6b64\u6b21\u51fa\u4ef7\u4eba\u7684\u7f16\u53f7\uff0cbi\u4e3a\u4ef7\u683c\u3002\n\n\u51fa\u4ef7\u4e25\u683c\u9012\u589e\uff08bi<bi+1\uff09\u5e76\u4e14\u6ca1\u6709\u73a9\u5bb6\u5728\u4e00\u8f6e\u7ade\u62cd\u4e2d\u5728\u6ca1\u6709\u5176\u4ed6\u7ade\u4e89\u5bf9\u624b\u7684\u60c5\u51b5\u4e0b\u81ea\u52a8\u589e\u52a0\u81ea\u5df1\u7684\u51fa\u4ef7\uff08ai!=ai+1\uff09\u3002\n\n\u73b0\u5728\u7ed9\u5b9aq\u6b21\u67e5\u8be2\uff0c\u6bcf\u6b21\u53bb\u6389\u4e00\u4e9b\u51fa\u4ef7\u8005\u53ca\u5176\u6240\u6709\u51fa\u4ef7\uff0c\u95ee\u6700\u540e\u8c01\u662f\u8d62\u5bb6\u5e76\u4e14\u4ed6\u4ee5\u4ec0\u4e48\u4ef7\u683c\u8d62\u5f97\u62cd\u5356\u54c1\u3002\n## \u5e7f\u544a\u63d2\u5165\n\u5728\u6211\u7684\u535a\u5ba2\u91cc\u770b\u9898\u89e3\u4f7f\u7528\u6548\u679c\u66f4\u4f73\u54e6QwQ\n\n[\u6155\u5bb9\u7433\u7684\u540e\u82b1\u56ed](https://muronglin.top/hgoi-20190508/)\n## \u89e3\u6cd5\n\u9996\u5148\u7b2c\u4e00\u5c0f\u95ee\uff0c\u6c42\u8c01\u662f\u8d62\u5bb6\uff0c\u53ef\u4ee5\u5148\u6392\u5e8f\uff0c\u7531\u4e8ek\u7684\u548c\u9650\u5b9a\u572820w\uff0c\u6240\u4ee5\u6bcf\u6b21\u4ece\u6392\u540d\u4e0a\u626b\u6765\u627e\u5230\u8d62\u5bb6\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u5c0f\u95ee\uff0c\u6c42\u8d62\u5bb6\u51fa\u7684\u4ef7\u683c\uff0c\u53ef\u4ee5\u6362\u4e00\u79cd\u601d\u8def\uff0c\u627e\u5230\u6bd4\u7b2c\u4e8c\u540d\u7684\u6700\u9ad8\u51fa\u4ef7\u9ad8\u7684\u7b2c\u4e00\u4e2a\u51fa\u4ef7\uff0c\u5c31\u662f\u7b54\u6848\n\n\u8fd9\u4e2a\u5c31\u5f88\u597d\u7ef4\u62a4\u4e86\uff0c\u627e\u5230\u7b2c\u4e8c\u540d\u7684\u590d\u6742\u5ea6\u4e5f\u662fk\u7684\u548c\uff0c\u7136\u540e\u4e8c\u5206\u627e\u5230\u6bd4\u4ed6\u5927\u7684\u7b2c\u4e00\u4e2a\u51fa\u4ef7\u5c31\u53ef\u4ee5\u4e86\n\n\u603b\u590d\u6742\u5ea6nlogn\uff0ctips\uff1amemset\u7684\u590d\u6742\u5ea6\u662fn\uff08emmmm\uff09\uff0c\u6240\u4ee5\u4e0d\u8981\u5728\u5faa\u73af\u91cc\u52a0\u4e0amemset\uff0c~~\u600e\u4e48\u6b7b\u7684\u90fd\u4e0d\u77e5\u9053~~\n## ac\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node{int num;}b[200010];\nvector<int>a[200010];\nint n,m,q,x,y,lim[200010],ll[200010];\nint cmp(node xx,node yy){return a[xx.num][a[xx.num].size()-1]<a[yy.num][a[yy.num].size()-1];}\nint find(int k)\n{\n    for(int i=k;i>=1;i--)if(!lim[b[i].num])return i;\n    return 0;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=0;i<=n;i++)a[i].push_back(0);\n    for(int i=1;i<=n;i++)scanf(\"%d%d\",&x,&y),a[x].push_back(y),b[i].num=i;\n    sort(b+1,b+1+n,cmp),scanf(\"%d\",&m);\n    while(m--)\n    {\n        scanf(\"%d\",&q);\n        for(int i=1;i<=q;i++)scanf(\"%d\",&ll[i]),lim[ll[i]]=1;\n        x=find(n),lim[b[x].num]=1,y=find(x-1),lim[b[x].num]=0;\n        if(!a[b[x].num][a[b[x].num].size()-1])puts(\"0 0\");\n        else printf(\"%d %d\\n\",b[x].num,*upper_bound(a[b[x].num].begin(),a[b[x].num].end(),a[b[y].num][a[b[y].num].size()-1]));\n        for(int i=1;i<=q;i++)lim[ll[i]]=0;\n    }\n    return 0;\n}\n```",
        "postTime": 1557284970,
        "uid": 24663,
        "name": "\u6ce0\u5c0f\u6bd2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF749D \u3010Leaving Auction\u3011"
    },
    {
        "content": "\u9898\u76ee\u94fe\u63a5\uff1a\n\nhttp://codeforces.com/problemset/problem/749/D\n\n\u9898\u76ee\u5927\u610f\uff1a\n\n\u4e00\u573a\u62cd\u5356\u4f1a\uff0c\u5171n\u4e2a\u4e70\u5bb6\u3002\u8fd9\u4e9b\u4e70\u5bb6\u5171\u51fa\u4ef7n\u6b21\uff0c\u6709\u7684\u4e70\u5bb6\u53ef\u80fd\u4e00\u6b21\u90fd\u6ca1\u6709\u51fa\u4ef7\u3002\u6bcf\u6b21\u51fa\u4ef7\u7528\uff08ai,bi\uff09\u8868\u793a\uff0cai\u4e3a\u6b64\u6b21\u51fa\u4ef7\u4eba\u7684\u7f16\u53f7\uff0cbi\u4e3a\u4ef7\u683c\u3002\u51fa\u4ef7\u4e25\u683c\u9012\u589e\uff08bi<bi+1\uff09\u5e76\u4e14\u6ca1\u6709\u73a9\u5bb6\u5728\u4e00\u8f6e\u7ade\u62cd\u4e2d\u5728\u6ca1\u6709\u5176\u4ed6\u7ade\u4e89\u5bf9\u624b\u7684\u60c5\u51b5\u4e0b\u81ea\u52a8\u589e\u52a0\u81ea\u5df1\u7684\u51fa\u4ef7\uff08ai!=ai+1\uff09\u3002\u73b0\u5728\u7ed9\u5b9aq\u6b21\u67e5\u8be2\uff0c\u6bcf\u6b21\u53bb\u6389\u4e00\u4e9b\u51fa\u4ef7\u8005\u53ca\u5176\u6240\u6709\u51fa\u4ef7\uff0c\u95ee\u6700\u540e\u8c01\u662f\u8d62\u5bb6\u5e76\u4e14\u4ed6\u4ee5\u4ec0\u4e48\u4ef7\u683c\u8d62\u5f97\u62cd\u5356\u54c1\u3002\n\n\u89e3\u9898\u601d\u8def\uff1a\n\n\u9996\u5148\u9884\u5904\u7406\u6240\u6709\u7684\u51fa\u4ef7\uff0c\u4fdd\u5b58\u6bcf\u4e2a\u4e70\u5bb6\u7684\u51fa\u4ef7\u5e8f\u5217\uff0c\u6700\u9ad8\u51fa\u4ef7\u548c\u6700\u4f4e\u51fa\u4ef7\u3002\u7136\u540e\u7ef4\u62a4\u4e00\u4e2aset\u3002\u5176\u4e2d\u4fdd\u5b58\u51fa\u4ef7\u8005id\u548c\u4ed6\u7684\u51fa\u4ef7\u5e8f\u5217\u4e2d\u7684\u6700\u9ad8\u51fa\u4ef7maxn\uff0c\u6574\u4e2aset\u6309\u7167maxn\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\uff0c\u4eceset\u4e2d\u5220\u6389\u51fa\u5c40\u7684\u4eba\uff0c\u5982\u679c\u6b64\u65f6set\u5927\u5c0f\u4e3a0\uff0c\u8f93\u51fa\u201c0 0\u201d\uff1b\u5927\u5c0f\u4e3a1\uff0c\u5219\u53ea\u6709\u4e00\u4e2a\u4e70\u5bb6\uff0c\u4ed6\u8d62\u5f97\u4e86\u62cd\u5356\u54c1\u4e14\u4ef7\u683c\u4e3a\u4ed6\u7684\u6240\u6709\u51fa\u4ef7\u4e2d\u7684\u6700\u5c0f\u503c\uff1b\u5426\u5219\u627emaxn\u6700\u9ad8\u7684\u4eba\u548c\u7b2c\u4e8c\u9ad8\u7684\u4eba\u3002\u6700\u7ec8\u7684\u4ef7\u683c\u5e94\u8be5\u662f\u5728maxn\u6700\u9ad8\u7684\u4eba\u7684\u51fa\u4ef7\u5e8f\u5217\u4e2d\u6bd4maxn\u7b2c\u4e8c\u9ad8\u7684\u4eba\u7684\u6700\u9ad8\u51fa\u4ef7\u9ad8\u4e00\u70b9\u70b9\u7684\u503c\u3002\u8003\u8651\u5230\u662f\u6709\u5e8f\u7684\uff0c\u4e8c\u5206\u5373\u53ef\u3002\u4e4b\u540e\u4e0d\u8981\u5fd8\u4e86\u628a\u4e4b\u524d\u5254\u9664\u6389\u7684\u4eba\u518dinsert\u56de\u6765\u3002\n\u5f00\u59cb\u65f6\u6211\u5728set\u7684\u6bcf\u4e2a\u8282\u70b9\u4e2d\u4fdd\u5b58\u4e86\u76f8\u5e94\u4e70\u5bb6\u7684\u51fa\u4ef7\u5e8f\u5217\uff0c\u7ed3\u679cT\u4e86\u5f88\u591a\u6b21\uff0c\u771f\u662f\u88ab\u81ea\u5df1\u8822\u54ed\u4e86......\n\nCode\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <set>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\nvector<int> G[200005];\nint n, a, b;\nint maxn[200005];\nint minn[200005];\nint d[200005];\nint max(int a, int b)\n{\n    return a > b ? a : b;\n}\nint min(int a, int b)\n{\n    return a < b ? a : b;\n}\nstruct node\n{\n    int index;\n    int maxn;\n};\nstruct cmp\n{\n    bool operator ()(const node & a, const node & b)const\n    {\n        return a.maxn > b.maxn;\n    }\n};\nint main()\n{\n    cin >> n;\n    memset(minn, 0x3f, sizeof(minn));\n    for (int i = 0; i < n; i++)\n    {\n        scanf(\"%d %d\", &a, &b);\n        G[a].push_back(b);\n        maxn[a] = max(maxn[a], b);\n        minn[a] = min(minn[a], b);\n    }\n    set<node, cmp> s;\n    for (int i = 1; i <= n; i++)\n    {\n        if (G[i].size())\n        {\n            node tmp;\n            tmp.index = i;\n            tmp.maxn = maxn[i];\n            s.insert(tmp);\n        }\n    }\n    int T, x;\n    cin >> T;\n    for (int i = 0; i < T; i++)\n    {\n        scanf(\"%d\", &x);\n        for (int j = 0; j < x; j++)\n        {\n            scanf(\"%d\", &d[j]);\n            node t;\n            t.index = d[j];\n            t.maxn = maxn[d[j]];\n            s.erase(t);\n        }\n        if (s.size() == 0)\n        {\n            puts(\"0 0\");\n        }\n        else if (s.size() == 1)\n        {\n            printf(\"%d %d\\n\", s.begin()->index, minn[s.begin()->index]);\n        }\n        else\n        {\n            set<node, cmp>::iterator t = s.begin();\n            node y;\n            y.index = t->index;\n            y.maxn = t->maxn;\n            s.erase(s.begin());\n            set<node, cmp>::iterator t2 = s.begin();\n            vector<int>::iterator it;\n            it = upper_bound(G[t->index].begin(), G[t->index].end(), t2->maxn);\n            if (it != G[t->index].end())\n            {\n                printf(\"%d %d\\n\", y.index, *it);\n            }\n            else\n            {\n                puts(\"0 0\");\n            }\n            s.insert(y);\n        }\n        for (int j = 0; j < x; j++)\n        {\n            node t;\n            t.index = d[j];\n            t.maxn = maxn[d[j]];\n            if (G[t.index].size())\n                s.insert(t);\n        }\n    }\n    return 0;\n}",
        "postTime": 1583725048,
        "uid": 225990,
        "name": "\u67e0\u6aac\u8349\u82cf\u6253\u6c34",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF749D \u3010Leaving Auction\u3011"
    }
]