[
    {
        "content": "# Shifting Dominoes\n\n[\u4f20\u9001\u95e8](https://www.cnblogs.com/Defoliation-ldlh/p/15182766.html)\n\n## \u9898\u76ee\u5927\u610f\n\n\u6709\u4e00\u4e2a $n\\times m$ \u7684\u68cb\u76d8\uff0c\u88ab $1\\times 2$ \u7684\u9aa8\u724c\u8986\u76d6\uff0c\u4fdd\u8bc1 $2|n\\times m$ \u3002\n\n\u4f60\u53ef\u4ee5\u6267\u884c\u4e00\u4e0b\u64cd\u4f5c\uff1a\n\n- \u79fb\u53bb\u4e00\u4e2a\u9aa8\u724c\u3002\n\n- \u5c06\u5176\u4ed6\u9aa8\u724c\u6cbf\u7740\u5176\u957f\u8fb9\u8fdb\u884c\u79fb\u52a8\u3002\n\n- \u4f60\u9700\u8981\u4fdd\u8bc1\u6bcf\u5f20\u9aa8\u724c\u7684\u6700\u7ec8\u4f4d\u7f6e\u4e0e\u521d\u59cb\u4f4d\u7f6e\u81f3\u5c11\u6709\u4e00\u4e2a\u4ea4\u70b9\u3002\n\n\u53ea\u5173\u5fc3\u4e24\u4e2a\u7a7a\u4f4d\u7684\u4f4d\u7f6e\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5c40\u9762\u3002\n\n## \u5206\u6790\n\n### \u67d3\u8272\n\n\u5148\u89c2\u5bdf\u4e00\u4e0b\u8fd9\u9053\u9898\u7ed9\u6211\u4eec\u7684\u68cb\u76d8\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u79fb\u52a8\u4e00\u4e2a\u9aa8\u724c\uff0c\u5219\u5fc5\u987b\u6ee1\u8db3\u9aa8\u724c\u957f\u8fb9\u65b9\u5411\u4e0a\u6709\u7a7a\u4f4d\uff0c\u4e14\u79fb\u52a8\u8fc7\u540e\uff0c\u8fd9\u4e2a\u7a7a\u4f4d\u5c06\u4f1a\u8f6c\u79fb\uff0c\u8f6c\u79fb\u5230\u7684\u4f4d\u7f6e\u662f\u9aa8\u724c\u79fb\u52a8\u540e\u7a7a\u51fa\u7684\u90a3\u4e2a\u4f4d\u7f6e\u3002\n\n\u5982\u4e0b\u56fe\uff1a\n\n![](https://www.helloimg.com/images/2021/08/24/CSxtFv.png)\n\n\u5982\u56fe\u6240\u793a\uff0c\u6211\u4eec\u80fd\u591f\u975e\u5e38\u76f4\u89c2\u7684\u53d1\u73b0\uff0c\u5bf9\u4e8e\u9aa8\u724c\u7684\u79fb\u52a8\uff0c\u6211\u4eec\u80fd\u591f\u5f88\u81ea\u7136\u7684\u5c06\u5176**\u8f6c\u5316\u4e3a\u7a7a\u4f4d\u7684\u79fb\u52a8**\u3002\n\n\u89c2\u5bdf\u7a7a\u4f4d\u79fb\u52a8\u7684\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u79fb\u52a8\u65e0\u975e\u662f\u6a2a\u7eb5\u5750\u6807\u7684\u5176\u4e2d\u4e00\u4e2a\u52a0\u51cf $2$ \uff0c\u5982\u679c\u6211\u4eec\u628a\u6574\u4e2a\u68cb\u76d8\u9ed1\u767d\u95f4\u9694\u67d3\u8272\uff0c\u5b9e\u9645\u4e0a\u7a7a\u4f4d**\u53ea\u80fd\u5728\u540c\u8272\u7684\u683c\u5b50\u4e0a\u79fb\u52a8**\u3002\n\n**\u5bf9\u4e8e\u4e00\u5757\u9aa8\u724c\uff0c\u5b83\u6240\u5728\u7684\u4e24\u4e2a\u683c\u5b50\u5fc5\u5b9a\u4e3a\u4e0d\u540c\u989c\u8272**\u3002\n\n### \u5efa\u56fe\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u5411\u5b83\u80fd\u591f\u5230\u8fbe\u7684\u4f4d\u7f6e\u5efa\u8fb9\u3002\n\n```\nif(i+2<=n&&mtx[i+1][j]=='U'&&mtx[i+2][j]=='D') Add(HASH(i,j),HASH(i+2,j));\nif(i-2>=1&&mtx[i-1][j]=='D'&&mtx[i-2][j]=='U') Add(HASH(i,j),HASH(i-2,j));\nif(j+2<=m&&mtx[i][j+1]=='L'&&mtx[i][j+2]=='R') Add(HASH(i,j),HASH(i,j+2));\nif(j-2>=1&&mtx[i][j-1]=='R'&&mtx[i][j-2]=='L') Add(HASH(i,j),HASH(i,j-2));\n```\n\n\u6bd4\u8f83\u76f4\u89c2\u7684\u7406\u89e3\u8fd9\u4e2a\u4ee3\u7801\uff0c\u5176\u5b9e\u5c31\u662f\u6839\u636e\u65c1\u8fb9\u9aa8\u724c\u7684\u6446\u653e\u65b9\u5f0f\u8fdb\u884c\u8fde\u8fb9\u9009\u62e9\u3002\n\n\u4ee5\u7b2c\u4e00\u884c\u4e3a\u4f8b\uff1a\n\n\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e3a\u7a7a\u4f4d\uff0c\u60f3\u5411\u4e0b\u79fb\u52a8\u4e24\u683c\uff0c\u5219\u5fc5\u987b\u8981\u6c42\u4e0b\u65b9\u7684\u9aa8\u724c\u662f\u7ad6\u76f4\u62dc\u8bbf\u7684\uff0c\u5176\u5b83\u540c\u7406\u3002\n\n### \u662f\u5426\u5b58\u5728\u73af\n\n\u4ed4\u7ec6\u60f3\u4e00\u60f3\u6211\u4eec\u5efa\u51fa\u6765\u7684\u8fd9\u4e2a\u56fe\uff0c\u4e8b\u5b9e\u4e0a\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u6700\u591a\u4e3a $1$ \uff0c\u8fd9\u4e0d\u96be\u60f3\u8c61\uff0c\u5f53\u6709\u4e00\u4e2a\u70b9\u5411\u5b83\u8fde\u8fb9\u540e\uff0c\u5176\u4ed6\u70b9\u90fd\u662f\u4e0d\u53ef\u80fd\u8c61\u5176\u8fde\u8fb9\u7684\u3002\n\n\u90a3\u4ed6\u662f\u5426\u5b58\u5728\u73af\u5462\uff1f\n\n\u5148\u753b\u4e00\u4e2a $3\\times 3$ \u7684\u56fe\u8bd5\u4e00\u4e0b\uff1a\n\n![](https://www.helloimg.com/images/2021/08/24/CSxwwm.png)\n\n\u8fd9\u662f\u6700\u7b80\u5355\u7684\u73af\uff0c\u800c\u4e14\u6211\u4eec\u80fd\u591f\u8fc5\u901f\u53d1\u73b0\u5176\u4e0d\u5408\u6cd5\uff0c\u4e2d\u95f4\u88ab\u56f4\u8d77\u6765\u7684\u90e8\u5206\u662f\u4e2a\u5947\u6570\u5927\u5c0f\u7684\u5757\uff0c\u663e\u7136\u6211\u4eec\u662f\u4e0d\u80fd\u5bf9\u5176\u8fdb\u884c\u8986\u76d6\u7684\u3002\n\n\u8fd9\u7ed9\u4e86\u6211\u4eec\u4e00\u5b9a\u7684\u542f\u53d1\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u73af\uff0c\u90a3**\u6240\u6709\u73af\u56f4\u8d77\u6765\u7684\u591a\u8fb9\u5f62\u5927\u5c0f\u4e00\u5b9a\u662f\u5947\u6570**\uff0c\u8003\u8651\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002\n\n![](https://www.helloimg.com/images/2021/08/24/CSx0fh.png)\n\n\u5165\u56fe\u53c8\u662f\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u636e\u6b64\u8ba8\u8bba\u66f4\u4e00\u822c\u7684\u60c5\u51b5\u3002\n\n\u5bf9\u4e8e\u8fd9\u6837\u7684\u591a\u8fb9\u5f62\uff0c\u6211\u4eec\u6709\u4e00\u79cd\u53eb\u505a $Pick$ \u516c\u5f0f\u7684\u4e1c\u897f\u53ef\u4ee5\u6c42\u5b83\u7684\u9762\u79ef\uff1a\n\n$$S=I+\\frac{B}{2}-1$$ \n\n\u5176\u4e2d\uff0c$I$ \u548c $B$ \u5206\u522b\u8868\u793a\u8fb9\u754c\u5185\u683c\u5b50\u7684\u6570\u91cf\u548c\u8fb9\u754c\u5916\u683c\u5b50\u7684\u6570\u91cf\u3002\n\n\u6211\u4eec\u80fd\u591f\u5f88\u5bb9\u6613\u7684\u53d1\u73b0\uff0c $B$ \u4e00\u5b9a\u662f\u4e2a\u5076\u6570\uff0c\u56e0\u4e3a\u5b83\u56f4\u6210\u4e86\u4e00\u4e2a\u591a\u8fb9\u5f62\uff0c\u6240\u4ee5\u4e0a\u4e0b\u3001\u5de6\u53f3\u7684\u683c\u5b50\u80af\u5b9a\u53ef\u4ee5\u4e24\u4e24\u76f8\u5bf9\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u4ee5\u6b64\u53d1\u73b0 $B$ \u662f\u56db\u7684\u500d\u6570\uff0c\u56e0\u6b64 $\\frac{B}{2}$ \u540c\u6837\u4e3a\u4e00\u4e2a\u5076\u6570\u3002\n\n\u53c8\u56e0\u4e3a\uff1a\n\n$$I=S-\\frac{B}{2}+1$$ \n\n\u6240\u4ee5 $I$ \u5fc5\u5b9a\u662f\u4e00\u4e2a\u5947\u6570\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u8bc1\u5f97\u4e86\u8fd9\u9053\u9898**\u4e0d\u5b58\u5728\u73af**\u3002\n\n### \u626b\u63cf\u7ebf\u6c42\u7b54\u6848\n\n\u636e\u4e0a\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u4e0d\u540c\u989c\u8272\u7684\u683c\u5b50\u662f**\u4e92\u4e0d\u5e72\u9884**\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5206\u6210\u4e86\u4e24\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u90e8\u5206\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u4e0d\u540c\u989c\u8272\u7684\u683c\u5b50\u5206\u5f00\u8003\u8651\uff0c\u5e76\u5206\u522b\u6c42\u51fa $dfn$ \u5e8f\u3002\n\n\u4e14\u6211\u4eec\u76ee\u524d\u83b7\u5f97\u4e86\u4e24\u68f5\u6811\uff0c\u5206\u522b\u4ee3\u8868\u4e24\u79cd\u4e0d\u540c\u989c\u8272\u7684\u683c\u5b50\u3002\n\n\u5219\u5bf9\u4e8e\u4e24\u9897\u6811\u91cc\u9762\u7684\u67d0\u4e24\u9897\u5b50\u6811\uff0c\u5176\u51fa\u73b0\u4e0d\u540c\u60c5\u51b5\u7684\u6982\u7387\uff0c\u5373\u4e3a\u4e24\u4e2a\u5b50\u6811\u5927\u5c0f\u7684\u4e58\u79ef\u3002\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u8f6c\u5316\u5230\u4e8c\u7ef4\u4e0a\u9762\u53bb\u5373\u662f\u4e00\u4e2a\u77e9\u5f62\u7684\u9762\u79ef\u3002\n\n\u540c\u65f6\uff0c\u7531\u4e8e\u5b50\u6811\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u91cd\u590d\u7684\u8ba1\u7b97\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5230\u8fd9\u4e9b\u60c5\u51b5\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981 $dfn$ \u5e8f\u3002\n\n\u6784\u9020\u51fa\u7684\u4e3e\u8bc1\u5de6\u4e0b\u65b9\u7684\u70b9\u4e3a $(dfn[u],dfn[v])$ \uff0c\u53f3\u4e0a\u89d2\u7684\u70b9\u4e3a $(dfn[u]+size[u],dfn[v]+size[v])$  \u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528**\u626b\u63cf\u7ebf**\u6c42\u51fa\u6700\u7ec8\u7684\u7b54\u6848\u4e86\u3002\n\n\u5b8c\u3002\n\n## CODE\n\n```\n#include <bits/stdc++.h>\n#define int long long\n#define mp make_pair\n#define ls (rt<<1)\n#define rs (rt<<1|1)\nusing namespace std;\nconst int N=6e5+10;\ninline int read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9') { if(ch=='-') w*=-1; ch=getchar(); }\n\twhile(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n\treturn s*w;\n}\nint n,m,cnt,tot,num,yl,yr,ans,io;\nint yy[4*N],length[4*N],cover[4*N];\nint vis[N],in[N],id[N],siz[N],dfn[N];\nchar s[N];\nvector<char> mtx[N];\nvector<pair<int,int> > P[N];\nvector<int> ver[N];\nstruct ScanLine{\n\tint x; //x\u5750\u6807\n\tint uy,dy; //\u4e0a\u8fb9\u7684y\u5750\u6807\u4e0e\u4e0b\u8fb9\u7684y\u5750\u6807\n\tint flag; //\u51fa\u5165\u8fb9\n\tScanLine(){}\n\tScanLine(int xx,int yy,int yyy,int c):x(xx),uy(yy),dy(yyy),flag(c){}\n}line[N];\ninline int HASH(int x,int y) { return (x-1)*m+y; }\ninline bool cmp(ScanLine &a,ScanLine &b) { return a.x<b.x; }\ninline void Add(int x,int y)\n{\n\tver[x].push_back(y);\n\tin[y]=1;\n}\ninline void DFS(int u)\n{\n\tsiz[u]=1,dfn[u]=++tot;\n\tfor(register int i=0;i<ver[u].size();i++)\n\t\tDFS(ver[u][i]),siz[u]+=siz[ver[u][i]]; \n}\ninline void pushup(int l,int r,int rt)\n{\n    if(cover[rt]) length[rt]=yy[r]-yy[l];\n    else if(l+1==r) length[rt]=0;\n    else length[rt]=length[ls]+length[rs];\n}\ninline void update(int yl,int yr,int io,int l,int r,int rt)\n{\n    if(yl>r||yr<l) return ;\n    if(yl<=l&&yr>=r){\n        cover[rt] += io,pushup(l,r,rt);\n        return ;\n    }\n    if(l+1==r)return ;\n    int m=(l+r)>>1;\n    if(yl<=m) update(yl,yr,io,l,m,ls);\n    if(yr>m) update(yl,yr,io,m,r,rs);\n    pushup(l,r,rt);\n}\nsigned main()\n{\n\tn=read(),m=read();\n\tfor(register int i=0;i<=n+1;i++) mtx[i].resize(m+1);\n\tfor(register int i=1;i<=n;i++){\n\t\tscanf(\"%s\",s+1);\n\t\tfor(register int j=1;j<=m;j++) mtx[i][j]=s[j];\n\t}\n\tfor(register int i=1;i<=n;i++){\n\t\tfor(register int j=1;j<=m;j++){\n\t\t\tif(i+2<=n&&mtx[i+1][j]=='U'&&mtx[i+2][j]=='D') Add(HASH(i,j),HASH(i+2,j));\n\t\t\tif(i-2>=1&&mtx[i-1][j]=='D'&&mtx[i-2][j]=='U') Add(HASH(i,j),HASH(i-2,j));\n\t\t\tif(j+2<=m&&mtx[i][j+1]=='L'&&mtx[i][j+2]=='R') Add(HASH(i,j),HASH(i,j+2));\n\t\t\tif(j-2>=1&&mtx[i][j-1]=='R'&&mtx[i][j-2]=='L') Add(HASH(i,j),HASH(i,j-2));\n\t\t\tif(!id[HASH(i,j)]){ //\u8bb0\u5f55\u9aa8\u724c\u7f16\u53f7 \n\t\t\t\tid[HASH(i,j)]=++cnt;\n\t\t\t\tif(mtx[i][j]=='L') id[HASH(i,j+1)]=cnt;\n\t\t\t\tif(mtx[i][j]=='U') id[HASH(i+1,j)]=cnt; \n\t\t\t}\n\t\t\tP[id[HASH(i,j)]].push_back(mp(i,j));\n\t\t}\n\t}\n\tfor(register int i=1;i<=n;i++)\n\t\tfor(register int j=1;j<=m;j++) \n\t\t\tif(!in[HASH(i,j)]) DFS(HASH(i,j));\n\tfor(register int i=1;i<=cnt;i++){\n\t\tint a=P[i][0].first,b=P[i][0].second,c=P[i][1].first,d=P[i][1].second;\n\t\tint u=HASH(a,b),v=(HASH(c,d));\n\t\tint L1L=dfn[u],R1R=dfn[u]+siz[u]-1;\n\t\tint L2L=dfn[v],R2R=dfn[v]+siz[v]-1;\n\t\tif((a+b)&1) swap(L1L,L2L),swap(R1R,R2R); //\u4e25\u683c\u5206\u6210\u4e24\u79cd\u989c\u8272 \n\t\t//cout<<L1L<<\" \"<<L2L<<\" \"<<R1R+1<<\" \"<<R2R+1<<endl;\t\n\t\tline[++num]=ScanLine(L1L,R2R+1,L2L,1);\n\t\tyy[num]=L2L;\n\t\tline[++num]=ScanLine(R1R+1,R2R+1,L2L,-1);\n\t\tyy[num]=R2R+1;\n\t}\n\tsort(yy+1,yy+num+1);\n\tsort(line+1,line+num+1,cmp);\n\tmemset(cover,0,sizeof(cover));\n    memset(length,0,sizeof(length));\n\tint len=unique(yy+1,yy+num+1)-(yy+1); \n\tfor(register int i=1;i<=num;i++){\n\t\tans+=length[1]*(line[i].x-line[i-1].x);\n\t\t//cout<<length[1]<<\" \"<<ans<<endl;\n\t\tyl=lower_bound(yy+1,yy+len+1,line[i].dy)-yy;\n\t\tyr=lower_bound(yy+1,yy+len+1,line[i].uy)-yy;\n\t\tio=line[i].flag;\n\t\t//cout<<yl<<\" \"<<yr<<\" \"<<io<<endl;\n\t  \tupdate(yl,yr,io,1,len,1);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1629813920,
        "uid": 258460,
        "name": "Booksnow",
        "ccfLevel": 0,
        "title": "CF1368G Shifting Dominoes"
    },
    {
        "content": "\u5c06\u79fb\u52a8\u4e00\u5757\u9aa8\u724c\u89c6\u4e3a\u5c06\u7a7a\u683c\u5b50\u6cbf\u7740\u5bf9\u5e94\u65b9\u5411\u79fb\u52a8\u3002\n\n\u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u4e00\u4e2a\u7a7a\u683c\u5b50\u5728\u79fb\u52a8\u8fc7\u7a0b\u4e2d\u7684\u5750\u6807 $(i,j)$ \u6ee1\u8db3 $i + j \\mod 2$ \u4e0d\u53d8\uff0c\u5373\u5c06\u68cb\u76d8\u9ed1\u767d\u67d3\u8272\u4e4b\u540e\uff0c\u7a7a\u683c\u5b50\u6240\u5728\u683c\u5b50\u7684\u989c\u8272\u662f\u786e\u5b9a\u7684\u3002\u540c\u65f6\uff0c\u79fb\u9664\u4e00\u5757\u9aa8\u724c\u4ea7\u751f\u7684\u4e24\u4e2a\u7a7a\u683c\u5b50\u6240\u5728\u7684\u989c\u8272\u662f\u4e0d\u540c\u7684\u3002\u8fd9\u610f\u5473\u7740\u4e24\u4e2a\u7a7a\u683c\u5b50\u7684\u79fb\u52a8\u4e0d\u4f1a\u4e92\u76f8\u5f71\u54cd\u3002\n\n\u8003\u8651\u5c06\u683c\u5b50\u89c6\u4e3a\u70b9\uff0c\u4e00\u5f20\u9aa8\u724c\u89c6\u4e3a\u4e00\u6761\u8fb9\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e2a\u7a7a\u683c\u5b50\u4ece\u8fb9\u7684\u4e00\u4fa7\u79fb\u52a8\u5230\u53e6\u4e00\u4fa7\u3002\u9996\u5148\u6ce8\u610f\u5230\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u6700\u591a\u4e3a $1$\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\uff08\u5f31\uff09\u8054\u901a\u5757\u4e00\u5b9a\u662f\u4e00\u68f5\u57fa\u73af\uff08\u5916\u5411\uff09\u6811\u3002\u540c\u65f6\u6ce8\u610f\u5230\uff0c\u8fd9\u5f20\u56fe\u4e0d\u5b58\u5728\u73af\uff0c\u56e0\u4e3a\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u73af\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u79fb\u52a8\u4e00\u5708\u4f7f\u7a7a\u683c\u5b50\u56de\u5230\u539f\u70b9\uff0c\u4f46\u662f\u539f\u70b9\u5df2\u7ecf\u88ab\u4e00\u5f20\u9aa8\u724c\u8986\u76d6\u4e86\u3002\n\n\u90a3\u4e48\u8fd9\u5f20\u56fe\u4e8b\u5b9e\u4e0a\u662f\u4e00\u4e2a\u5916\u5411\u6811\u68ee\u6797\uff0c\u8fd9\u5c31\u975e\u5e38\u5bb9\u6613\u5904\u7406\u4e86\u3002\u4e00\u4e2a\u7a7a\u683c\u5b50\u7684\u79fb\u52a8\u53ea\u80fd\u6cbf\u7740\u6709\u5411\u8fb9\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u79fb\u52a8\u5230\u68ee\u6797\u4e2d\u67d0\u68f5\u6811\u7684\u4e00\u4e2a\u5b50\u6811\uff08\u53ef\u4ee5\u6620\u5c04\u5230 dfs \u5e8f\u4e0a\u7684\u4e00\u4e2a\u533a\u95f4\uff09\uff0c\u800c\u4e24\u4e2a\u7a7a\u683c\u5b50\u7684\u79fb\u52a8\u662f\u72ec\u7acb\u7684\u3002\u8fd9\u542f\u53d1\u6211\u4eec\u5c06\u4e24\u4e2a\u7a7a\u683c\u5b50\u7684\u4f4d\u7f6e\u89c6\u4e3a\u4e24\u4e2a\u7ef4\u5ea6\uff0c\u90a3\u4e48\u6240\u6709\u5408\u6cd5\u7684\u4f4d\u7f6e\u5c31\u662f\u82e5\u5e72\u4e2a\u77e9\u5f62\u7684\u5e76\u3002\u4f7f\u7528\u626b\u63cf\u7ebf\u7b97\u6cd5\u7ef4\u62a4\u77e9\u5f62\u5e76\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define pii std::pair<int,int>\n#define mp std::make_pair\nconst int maxn = 6e5+7;\nint n,m,vis[maxn],tl,notrt[maxn],dfn[maxn],idx,size[maxn],LM;\nstd::vector<pii>P[maxn];\nchar s[maxn];\nlong long ans = 0;\nstd::vector<char>G[maxn];\nstd::vector<int>ch[maxn];\n\nint hash(int i,int j) {\n\treturn (i-1)*m+j;\n}\n\nvoid link(int i,int j,int k,int l) {\n\t//printf(\"(%d %d) -> %d %d\\n\",i,j,k,l);\n\tch[hash(i,j)].push_back(hash(k,l));\n\tnotrt[hash(k,l)] = 1;\n}\n\nvoid dfs(int u) {\n\tsize[u] = 1; dfn[u] = ++idx;\n\tfor (int v:ch[u]) { dfs(v); size[u] += size[v]; }\n}\n\nstruct data {\n\tint cnt,min;\n};\ndata NULLDAT () {\n\tdata d;d.min=1e9;d.cnt=0;return d;\n}\ndata merge(data a,data b) {\n\tdata c;\n\tif(a.min<b.min){ c.cnt=a.cnt; }\n\telse if(a.min>b.min){c.cnt=b.cnt;}\n\telse c.cnt=a.cnt+b.cnt;\n\tc.min=std::min(a.min,b.min);\n\treturn c;\n}\n \n\nstruct ZhouLiMingDiaoDaJiXunDui {\n\tdata sum[maxn<<2];\n\tint tag[maxn<<2];\n\tvoid give_tag(int x,int v) { tag[x]+=v; sum[x].min+=v; }\n\tvoid pushdown(int x) {\n\t\ttag[x<<1]+=tag[x];\n\t\tsum[x<<1].min+=tag[x];\n\t\ttag[x<<1|1]+=tag[x];\n\t\tsum[x<<1|1].min+=tag[x];\n\t\ttag[x] = 0;\n\t}\n\tvoid update(int x) {\n\t\tsum[x] = merge(sum[x<<1],sum[x<<1|1]);\n\t} \n\tvoid build(int l,int r,int rt) {\n\t\tif(l==r) { sum[rt].cnt = 1; sum[rt].min = 0; return; }\n\t\tbuild(l,(l+r)>>1,rt<<1);\n\t\tbuild(((l+r)>>1)+1,r,rt<<1|1);\n\t\tupdate(rt);\n\t}\n\tvoid add(int l,int r,int L,int R,int v,int rt) {\n\t\tif(l>R||r<L)return;\n\t\tif(l<=L&&R<=r) { give_tag(rt,v); return; }\n\t\tpushdown(rt);\n\t\tadd(l,r,L,(L+R)>>1,v,rt<<1);\n\t\tadd(l,r,((L+R)>>1)+1,R,v,rt<<1|1);\n\t\tupdate(rt);\n\t}\n}sgt;\n\nnamespace scanner {\n\tint cnt = 0;\n\tstruct event {\n\t\tint p,l,r,d;\n\t}arr[maxn<<1]; \n\tevent New(int p,int l,int r,int d) {\n\t\tevent E; E.p=p; E.l=l; E.r=r; E.d=d; return E;\n\t}\n\tint cmp(event a,event b) {\n\t\treturn a.p < b.p;\n\t}\n\tvoid add(int l1,int r1,int l2,int r2) {\n\t\tarr[++cnt] = New(l1,l2,r2,1);\n\t\tarr[++cnt] = New(r1+1,l2,r2,-1);\n\t//\tprintf(\"%d %d %d %d\\n\",l1,r1,l2,r2);\n\t}\n\tvoid work() {\n\t\tsgt.build(1,LM,1);\n\t\tstd::sort(arr+1,arr+cnt+1,cmp);\n\t\tint p = 0;\n\t\tfor (int i = 1; i <= LM; ++ i) {\n\t\t//\tprintf(\"%d\\n\",i);\n\t\t\twhile (p < cnt && arr[p+1].p <= i) {\n\t\t\t\tp++;\n\t\t\t\tsgt.add(arr[p].l,arr[p].r,1,LM,arr[p].d,1);\n\t\t\t\t//printf(\"[%d %d] + %d\\n\",arr[p].l,arr[p].r,arr[p].d);\n\t\t\t} \n\t\t\tint zero = 0;\n\t\t\tdata d = sgt.sum[1];\n\t\t\tif (d.min > 0) zero = 0;\n\t\t\telse zero = d.cnt;\n\t\t\tans += LM - zero;\n\t\t}\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tLM = n*m;\n\tfor (int i = 0; i <= n+1; ++ i) G[i].resize(m+3);\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tscanf(\"%s\",s+1);\n\t\tfor (int j = 1; j <= m; ++ j) G[i][j] = s[j];\n\t}\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tfor (int j = 1; j <= m; ++ j) {\n\t\t\tif (G[i+1][j] == 'U' && i+2 <= n && G[i+2][j] == 'D') link(i,j,i+2,j);\n\t\t\tif (G[i-1][j] == 'D' && i-2 >= 1 && G[i-2][j] == 'U') link(i,j,i-2,j);\n\t\t\tif (G[i][j+1] == 'L' && j+2 <= m && G[i][j+2] == 'R') link(i,j,i,j+2);\n\t\t\tif (G[i][j-1] == 'R' && j-2 >= 1 && G[i][j-2] == 'L') link(i,j,i,j-2);\n\t\t\tif (!vis[hash(i,j)]) {\n\t\t\t\tvis[hash(i,j)] = ++tl;\n\t\t\t\tif(G[i][j]=='L')vis[hash(i,j+1)]=tl;\n\t\t\t\tif(G[i][j]=='U')vis[hash(i+1,j)]=tl;\n\t\t\t}\n\t\t\tP[vis[hash(i,j)]].push_back(mp(i,j));\n\t\t} \n\t} \n\tfor (int i = 1; i <= n; ++ i) \n\t\tfor (int j = 1; j <= m; ++ j) \n\t\t\tif (!notrt[hash(i,j)]) { assert(!dfn[hash(i,j)]); dfs(hash(i,j)); }\n\t//printf(\">%d\\n\",size[hash(1,1)]);\n\tfor (int i = 1; i <= tl; ++ i) {\n\t\tint x1 = P[i][0].first, y1 = P[i][0].second, x2 = P[i][1].first, y2 = P[i][1].second;\n\t\tint u = hash(x1,y1), v = hash(x2,y2);\n\t\tint l1 = dfn[u], r1 = dfn[u] + size[u] - 1;\n\t\tint l2 = dfn[v], r2 = dfn[v] + size[v] - 1;\n\t\tif ((x1+y1)&1) { std::swap(l1,l2); std::swap(r1,r2); }\n\t\t//printf(\"%d %d %d %d\\n\",l1,r1,l2,r2);\n\t\tscanner::add(l1,r1,l2,r2);\n\t}\n\tscanner::work();\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n\n\u00a0\n```\n\n\n",
        "postTime": 1608560594,
        "uid": 48355,
        "name": "EternalAlexander",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1368G \u3010Shifting Dominoes\u3011"
    }
]