[
    {
        "content": "\u867d\u7136\u662f\u6734\u7d20\u7684\u7b5b\u6cd5\uff0c\u4f46\u662f\u8dd1\u7684\u6bd4\u5e0c\u513f\u7684 Pollard-rho \u5feb\u3002  \n$\\mathcal O(n\\sqrt n)$ \u7684\u8d28\u56e0\u6570\u5206\u89e3\u662f\u4e0d\u884c\u7684\uff0cPollard-rho \u7684\u7801\u91cf\u4e5f\u8fc7\u4e8e\u9ebb\u70e6\uff0c\u76f4\u63a5\u5728\u7ebf\u6027\u7b5b\u91cc\u7b5b\u51fa\u6bcf\u4e2a\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u600e\u4e48\u7b5b\uff1f\u7ebf\u6027\u7b5b\u7684\u672c\u8d28\u662f\u6bcf\u4e2a\u6570\u53ea\u4f1a\u88ab\u81ea\u5df1\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u7b5b\u5230\uff0c\u8bb0\u5f55\u5373\u53ef\u3002  \n\u5bf9\u5206\u6bcd\u5206\u5b50\u6bcf\u4e2a\u6570\u7b5b\u51fa\u6765\u7684\u8d28\u56e0\u5b50\u653e\u5165\u6876\u91cc\uff0c\u5bf9\u4e24\u4e2a\u6876\u53d6 `min` \u5c31\u662f\u8981\u9664\u6389\u7684\u90e8\u5206\u3002  \n\u518d\u5bf9\u5206\u6bcd\u5206\u5b50\u8fdb\u884c\u7b5b\uff0c\u5982\u679c\u7b5b\u51fa\u6765\u7684\u8d28\u56e0\u5b50\u5728\u6876\u91cc\u6709\uff0c\u628a\u6876\u91cc\u7684\u8ba1\u6570\u51cf\u53bb `1`\uff0c\u5426\u5219\u5c31\u4e0d\u53bb\u9664\u8fd9\u4e2a\u6570\u3002  \n\u4ee3\u7801\uff08\u7565\u6709\u538b\u884c\uff09\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cassert>\n#define siz(x) int((x).size())\n#define cauto const auto\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\nusing std::cin;using std::cout;\nusing loli=long long;\nusing uloli=unsigned long long;\nusing lodb=long double;\nusing venti=__int128_t;\nusing pii=std::pair<int,int>;\nusing inlsi=const std::initializer_list<int>&;\nconstexpr venti operator\"\"_vt(uloli x){return venti(x);}\nconstexpr int N=1e7+1;\nint n,m,mif[N];\nstd::basic_string<int>pt,ans1,ans2;\nbool pr[N];\npii cnt[N];\nsigned main(){\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tstd::ios::sync_with_stdio(false);cin.tie(nullptr);\n\tfor(int i=2;i<N;i++){if(!pr[i])pt+=i,mif[i]=i;for(int j:pt){if(i*j>=N)break;pr[i*j]=true;mif[i*j]=j;if(i%j==0)break;}}\n\tcin>>n>>m;\n\tfor(int i=1,x;i<=n;i++)for(int p=mif[cin>>x,ans1+=x,x];x!=1;p=mif[x/=p])cnt[p].fi++;\n\tfor(int i=1,x;i<=m;i++)for(int p=mif[cin>>x,ans2+=x,x];x!=1;p=mif[x/=p])cnt[p].se++;\n\tfor(int i=1,x;i<N;i++)if(cnt[i].fi<cnt[i].se)cnt[i].se=cnt[i].fi;else cnt[i].fi=cnt[i].se;\n\tcout<<n<<' '<<m<<'\\n';\n\tfor(int y;int x:ans1){for(int p=mif[y=1,x];x!=1;p=mif[x/=p])if(cnt[p].fi>0)cnt[p].fi--;else y*=p;cout<<y<<' ';}\n\tcout<<'\\n';\n\tfor(int y;int x:ans2){for(int p=mif[y=1,x];x!=1;p=mif[x/=p])if(cnt[p].se>0)cnt[p].se--;else y*=p;cout<<y<<' ';}\n\treturn 0;\n}\n```",
        "postTime": 1662469468,
        "uid": 310818,
        "name": "\u849f\u9171",
        "ccfLevel": 7,
        "title": "CF222C Reducing Fractions \u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\u8003\u8651\u5982\u4f55\u5b9e\u73b0\u7ea6\u5206\u8fc7\u7a0b\u3002\n\n\u5206\u522b\u5206\u89e3\u5206\u5b50\u548c\u5206\u6bcd\uff0c\u628a\u6bcf\u4e2a\u8d28\u56e0\u5b50\u7684\u6570\u91cf\u76f8\u52a0\u540e\u53d6\u8f83\u5c0f\u7684\u90a3\u4e2a\u5373\u53ef\uff0c\u5728\u6784\u9020\u7b54\u6848\u65f6\u65f6\u5982\u679c\u8fd8\u6709\u5269\u4f59\u7684\u8d28\u56e0\u5b50\u6ca1\u6709\u7ea6\u5206\u5219\u8865\u4e0a $ 1 $\uff0c\u540c\u65f6\u5c06\u8d28\u56e0\u5b50\u7684\u6570\u91cf $ -1 $\uff0c\u5426\u5219\u4e58\u4e0a\u8fd9\u4e2a\u8d28\u56e0\u5b50\u5373\u53ef\u3002\n\n\u4f46\u662f\u9898\u76ee\u6570\u636e\u8303\u56f4\u662f $ n,m \\leq 10^5 $\uff0c$ a_i \\leq 10^7 $\uff0c\u6734\u7d20\u7684\u8d28\u56e0\u6570\u5206\u89e3\u662f $ \\mathcal{O}(n \\sqrt{a_i}) $ \u7684\uff0c\u96be\u4ee5\u901a\u8fc7\u3002\n\n\u4e8e\u662f\u8003\u8651\u4f7f\u7528\u66f4\u5feb\u7684\u8d28\u56e0\u6570\u5206\u89e3\u65b9\u6cd5\uff1aPollard-rho \u7b97\u6cd5\uff0c\u5728 $ \\mathcal{O}(n \\times a_i^{\\frac{1}{4}}) $ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u4e86\u672c\u9898\u3002\n\n\u540c\u65f6\u4e5f\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u4e4b\u540e\u518d\u5206\u89e3\uff0c\u5b9e\u9645\u8fd0\u884c\u6548\u7387\u66f4\u5feb\u3002\n\n\u5b9e\u73b0\u7684\u65f6\u5019\u8981\u6ce8\u610f\u4e0d\u80fd\u7528 long long\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8d85\u65f6\uff0c\u5206\u89e3\u65f6\u5148\u9884\u5904\u7406\u51fa\u6240\u6709\u8d28\u6570\uff0c\u5982\u679c\u662f\u8d28\u6570\u5219\u76f4\u63a5\u8fd4\u56de\u4ee5\u52a0\u901f\uff0c\u9047\u5230\u5df2\u7ecf\u5206\u89e3\u8fc7\u7684\u6570\u65f6\u6700\u597d\u5f00\u4e00\u4e2a\u54c8\u5e0c\u8868\u8bb0\u5f55\uff0c\u5c3d\u91cf\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002~~\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u4e71\u641e\u3002~~\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u5e38\u6570\u8f83\u5927\uff0c\u6700\u6162\u70b9\u8dd1\u4e86\u63a5\u8fd1 2 \u79d2\uff0c\u60ca\u9669\u901a\u8fc7\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define gc c=getchar()\n#define r(x) read(x)\n#define ll long long\n#define int long long\ntemplate<typename T>\ninline void read(T&x)\n{\n    x=0;T k=1;char gc;\n    while(!isdigit(c)){if(c=='-')k=-1;gc;}\n    while(isdigit(c)){x=x*10+c-'0';gc;}x*=k;\n}\n#define li inline\n#define re register\ninline int add(int a,int b,int p)\n{\n\ta+=b;\n\tif(a>=p)\n        a-=p;\n\treturn a;\n}\ninline int mul(int a,int b,int mod)\n{\n    return a*b%mod;\n}\nll pow(ll a, ll b, ll m) \n{\n  ll ans = 1;\n  for (a %= m; b; b >>= 1, a = mul(a, a, m))\n    if (b & 1) \n        ans = mul(ans, a, m);\n  return ans;\n}\nconst int maxn=1e7+10;\nsigned prime[maxn];\nbool vis[maxn];\nint tot=0;\nvoid pre(int n)\n{\nfor(int i=2;i<n;i++)\n{\n    if(!vis[i])\n        prime[tot++]=i;\n    for(int j=0;j<tot;++j)\n    {\n    if(i*prime[j]>n)\n        break;\n    vis[i*prime[j]]=1;\n    if(i%prime[j]==0)\n        break;\n    }\n}\n}\ninline bool MR_check(ll a, ll p, ll s, int d) \n{\n  ll k = pow(a, s, p);\n  if (k == 1) \n      return true;\n  for (; d; --d, k = mul(k, k, p)) \n  {\n    if (k == p - 1) \n        return true;\n    if (k == 1) \n        return false;\n  }\n  return k == 1;\n}\ninline bool MR(signed x) \n{\n  static const signed cnt = 12;\n  static const signed p[cnt] = { 2, 3, 5, 7, 11, 13, 17, 19, 61, 2333, 4567, 24251 };\n  if (x == 1) \n      return false;\n  ll s = x - 1; \n  int d = 0;\n  while (!(s & 1)) \n  ++d, s >>= 1;\n  for (int i = 0; i < cnt; ++i) \n  {\n    if (x % p[i] == 0) \n        return x == p[i];\n    if (!MR_check(p[i], x, s, d)) \n        return false;\n  }\n  return true;\n}\nnamespace Pollard_Rho \n{\nsigned PR_check(signed c, signed p) \n{\n  signed y = rand() % p, z = y;\n  signed k = 1, j = 0;\n  while(1145141919810) \n  {\n    z = (mul(z, z, p) + c) % p;\n    int t = __gcd(p, std::abs(z - y));\n    if (t > 1) \n        return t;\n    if (++j == k) \n        y = z, k <<= 1;\n  }\n}\nvoid factor_(signed x, std::vector<ll> &v) \n{\n  if (x == 1) \n      return;\n  if (!vis[x]) \n  { \n      v.push_back(x); \n      return; \n  }\n  ll y = x;\n  while (y == x) \n      y = PR_check(rand() % x, x);\n  factor_(y, v);\n  factor_(x / y, v);\n}\nvoid factor(signed x, std::vector<ll> &v) \n{\n  v.clear();\n  factor_(x, v);\n  std::sort(v.begin(), v.end());\n}\n}\nusing Pollard_Rho::factor;\nconst int maxm=1e7+10;\nsigned cnt[2][maxm],a[100020],b[100020];\nbool vis2[maxm];\nunordered_map<signed,vector<signed> >p;\nsigned main()\n{\n    int T=1;\n    pre(1e7);\n    for(;T;--T)\n    {\n    \tint n,m;\n        r(n),r(m);\n        for(int i=1;i<=n;i++)\n        {\n            r(a[i]);\n            vector<int>d;\n            if(vis2[a[i]])\n                for(auto x:p[a[i]])\n                d.push_back(x);\n            else\n            {\n            vis2[a[i]]=1;\n    \t    Pollard_Rho::factor(a[i],d);\n            for(auto x:d)\n            p[a[i]].push_back(x);\n            }\n            for(auto x:d)\n            cnt[0][x]++;\n        }\n        for(int i=1;i<=m;i++)\n        {\n            r(b[i]);\n            vector<int>d;\n            if(vis2[b[i]])\n            for(auto x:p[b[i]])\n            d.push_back(x);\n            else\n            {\n            vis2[b[i]]=1;\n    \t    Pollard_Rho::factor(b[i],d);\n            for(auto x:d)\n                p[b[i]].push_back(x);\n            }\n            for(auto x:d)\n                cnt[1][x]++;\n        }\n        for(int i=1;i<=1e7;i++)\n            cnt[0][i]=min(cnt[1][i],cnt[0][i]),cnt[1][i]=cnt[0][i];\n        cout<<n<<' '<<m<<'\\n';\n        for(int i=1;i<=n;i++)\n        {\n            vector<int>d;\n        if(vis2[a[i]])\n            for(auto x:p[a[i]])\n                d.push_back(x);\n        else\n        {\n        vis2[a[i]]=1;\n    \tPollard_Rho::factor(a[i],d);\n        for(auto x:d)\n            p[a[i]].push_back(x);\n        }\n        int ans=1;\n        for(auto x:d)\n            if(cnt[0][x])\n                cnt[0][x]--;\n            else\n            ans*=x;\n        cout<<ans<<' ';\n        }\n        cout<<'\\n';\n        for(int i=1;i<=m;i++)\n        {\n            vector<int>d;\n            if(vis2[b[i]])\n                for(auto x:p[b[i]])\n                d.push_back(x);\n        else\n        {\n            vis2[b[i]]=1;\n    \t    Pollard_Rho::factor(b[i],d);\n            for(auto x:d)\n            p[b[i]].push_back(x);\n        }\n            int ans=1;\n            for(auto x:d)\n            if(cnt[1][x])\n                cnt[1][x]--;\n            else\n                ans*=x;\n            cout<<ans<<' ';\n        }\n    }\n}\n```\n",
        "postTime": 1661494981,
        "uid": 714821,
        "name": "loser_seele",
        "ccfLevel": 4,
        "title": "CF222C\u9898\u89e3"
    },
    {
        "content": " ### \u9898\u76ee\u5927\u610f\uff1a\n >\u7ed9\u51fa\u4e24\u4e2a\u96c6\u5408\uff0c\u7b2c\u4e00\u4e2a\u96c6\u5408\u6570\u7684\u4e58\u79ef\u662f\u5206\u5b50\uff0c\u7b2c\u4e8c\u4e2a\u96c6\u5408\u7684\u6570\u7684\u4e58\u79ef\u662f\u5206\u6bcd\uff0c\u8981\u6c42\u591f\u9020\u4e00\u4e2a\u540c\u6837\u7684\u96c6\u5408\uff0c\u4f46\u662f\u5f97\u5230\u7684\u5206\u6570\u662f\u6700\u7b80\u5206\u6570\u3002\n \n ### \u5206\u6790\uff1a\n \u5bfb\u627e\u601d\u8def\u5e76\u4e0d\u590d\u6742\uff0c\u5bf9\u4e24\u4e2a\u96c6\u5408\u7684\u6bcf\u4e2a\u6570\u8fdb\u884c\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u7136\u540e\u7edf\u8ba1\u6574\u4e2a\u96c6\u5408\u7684\u8d28\u56e0\u6570\u5206\u89e3\u60c5\u51b5\uff0c\u518d\u5c06\u4e24\u4e2a\u96c6\u5408\u7684\u8d28\u56e0\u6570\u7684\u6b21\u6570\u5927\u51cf\u5c0f\u5373\u53ef\u3002\u6784\u9020\u65f6\u4f7f\u4e24\u4e2a\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u4e0d\u53d8\uff0c\u5c3d\u53ef\u80fd\u5730\u6784\u9020\u6210\u539f\u5148\u96c6\u5408\u7684\u6570\uff0c\u5982\u679c\u4e0d\u884c\u5c31\u586b\u4e00\u4e2a $1$\u3002\u4f46\u8d28\u56e0\u6570\u5206\u89e3\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u91c7\u7528 $O(\\sqrt n)$ \u7684\u590d\u6742\u5ea6\uff0c\u4f1a\u8d85\u65f6\uff0c\u63a5\u4e0b\u6765\u4ecb\u7ecd\u672c\u9898\u4e2d\u8fdb\u884c\u8d28\u56e0\u6570\u5206\u89e3\u7684\u65b9\u6cd5\u3002\n \u5176\u5b9e\u4e5f\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u88ab\u5206\u89e3\u7684\u6570\uff0c\u4f18\u5148\u9664\u4ee5\u5b83\u6700\u5927\u7684\u8d28\u56e0\u6570\u5373\u53ef\u3002\u5f53\u7136\uff0c\u9700\u8981\u63d0\u524d\u5904\u7406\u4e00\u4e0b\u6bcf\u4e2a\u6570\u6700\u5927\u7684\u8d28\u56e0\u6570\u3002\n ### AC\u4ee3\u7801\uff1a\n ```\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int M = 1e7;\nconst int MAXN = 1e4;\nint n,m;\nmap<int,int> cnt1,cnt2;\nset<int> s;\nint prime[M + 5],up[M + 5],down[M + 5],a[M + 5],bb[M + 5];\n\n\nsigned main(){\n\t//freopen(\"B.out\",\"r\",stdin);\n\t//prime.push_back(9999991);\n    for(int i = 2; i <= M; i++){//\u9884\u5904\u7406\u6bcf\u4e2a\u6570\u7684\u6700\u5927\u8d28\u56e0\u6570 \n        if(prime[i] == 0){\n        \tprime[i] = i;\n        \tfor(int j = i + i; j <= M + 3; j+=i){\n        \t\tprime[j] = i;\n\t\t\t}\n\t\t}\n    }\n    cin >> n >> m;\n    for(int i = 1; i <= n; i++){\n        cin >> a[i];\n        int j;\n    \tfor(j = a[i]; j > 1; j /= prime[j]){//\u8d28\u56e0\u6570\u5206\u89e3 \n   \t\t\ts.insert(prime[j]);\n    \t\tup[prime[j]]++;//\u5b58\u50a8\u5206\u5b50\u7684\u8d28\u56e0\u6570\u5206\u89e3\u60c5\u51b5 \n\t\t}\n    }\n    for(int i = 1; i <= m; i++){\n        cin >> bb[i];\n        int j;\n    \tfor(j = bb[i]; j > 1; j /= prime[j]){//\u8d28\u56e0\u6570\u5206\u89e3 \n   \t\t\ts.insert(prime[j]);\n    \t\tdown[prime[j]]++;//\u5b58\u50a8\u5206\u6bcd\u7684\u8d28\u56e0\u6570\u5206\u89e3\u60c5\u51b5 \n\t\t}\n    }\n    int b;\n    int now = 1;\n    cout << n << \" \" << m << \"\\n\";\n    for(int i = 1; i <= n; i++){\n    \tint j;\n    \tint tmp  =1;\n    \tfor(j = a[i]; j > 1; j /= prime[j]){\n    \t\tif(down[prime[j]] > 0){\n    \t\t\tdown[prime[j]]--;//\u5982\u679c\u5f53\u524d\u8be5\u6570\u7684\u8d28\u56e0\u6570\u80fd\u5728\u5206\u6bcd\u91cc\u4e5f\u542b\u6cb91\uff0c\u90a3\u4e48\u5c31\u5c06\u5b83\u7ea6\u53bb\uff0c\u5426\u5219\u5c06\u5b83\u4e58\u5230\u7b54\u6848\u91cc\u9762\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttmp *= prime[j];\n\t\t\t}\n\t\t}\n\t\tcout << tmp << \" \";\n\t}\n\tputs(\"\");\n\tfor(int i = 1; i <= m; i++){\n    \tint j;\n    \tint tmp = 1;\n    \tfor(j = bb[i]; j > 1; j /= prime[j]){\n    \t\tif(up[prime[j]] > 0){\n    \t\t\tup[prime[j]]--;//\u540c\u4e0a\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttmp *= prime[j];\n\t\t\t}\n\t\t}\n\t\tcout << tmp << \" \";\n\t}\n    return 0;\n}\n```",
        "postTime": 1658388932,
        "uid": 225941,
        "name": "\u51b0\u51bb\u7f57\u975e\u9c7c",
        "ccfLevel": 0,
        "title": "CF222C Reducing Fractions"
    }
]