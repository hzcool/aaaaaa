[
    {
        "content": "\u770b\u8fd9\u9053\u9898\u8fd8\u6ca1\u6709\u9898\u89e3\uff0c\u6b63\u597d\u505a\u5230\uff0c\u81ea\u5df1\u53d1\u4e00\u7bc7\n\n\u8fd9\u9053\u9898\u8fd8\u662f\u6bd4\u8f83\u5957\u8def\u7684\uff0c\u611f\u89c9\u6d1b\u8c37\u8bc4\u84dd\u5408\u7406\uff0c$CF$\u7684$3000$\u771f\u7684\u6709\u4e9b\u79bb\u8c31\n \n$1.$\u9996\u5148\uff0c\u9898\u76ee\u8981\u6c42\u6700\u5c0f\u503c\u6700\u5927\uff0c\u672c\u80fd\u5730\u60f3\u5230**\u4e8c\u5206\u7b54\u6848**\n\n$2.$\u63a5\u4e0b\u6765\u5c31\u8be5\u8003\u8651\u5982\u4f55\u5bf9\u4e00\u4e2a\u786e\u5b9a\u7684\u6700\u5c0f\u9762\u79ef$w$\u8fdb\u884c\u53ef\u884c\u6027\u5224\u5b9a\u4e86\n\n$3.$\u7531\u4e8e\u662f\u4e0d\u89c4\u5219\u56fe\u5f62\uff0c\u4e14\u6709\u53ea\u80fd\u7528\u9876\u70b9\u8fde\u7ebf\u5c06\u8fdb\u884c\u5206\u5272\u7684\u6761\u4ef6\u9650\u5236\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff1a**\u8d2a\u5fc3\u4e0d\u53ef\u884c**\n\n$4.$\u8003\u8651\u5230\u662f\u5728\u4e00\u4e2a\u53ef\u4ee5\u89c6\u4f5c\u5706\u73af\u7684\u51f8\u591a\u8fb9\u5f62\u4e0a\u505a\u64cd\u4f5c\uff0c\u4e14\u4efb\u610f\u4e24\u6761\u7ebf\u4e0d\u80fd\u76f8\u4ea4\uff0c\u6ca1\u6709\u540e\u6548\u6027\uff0c\u6709\u6ca1\u6709\u611f\u89c9\u6709\u4e9b\u719f\u6089\uff0c\u8fd9\u5c31\u662f**\u533a\u95f4DP**\u7684\u6a21\u677f\u5440\n\n$5.$\u786e\u5b9a\u4e86\u7b97\u6cd5\u65b9\u5411\uff0c\u8003\u8651\u5982\u4f55\u8bbe\u8ba1\u72b6\u6001\n\n$6.$\u6211\u4eec\u5e0c\u671b\u8ba9\u5206\u7684\u5757\u6570$\\ge k+1$\uff0c\u9000\u4e00\u6b65\u8bf4\uff0c\u6211\u4eec\u60f3\u8ba9\u5206\u7684\u5757\u6570\u5c3d\u91cf\u591a\uff0c\u5728\u5f53\u524d\u5206\u5b8c\u5757\u540e\uff0c\u6211\u4eec\u5f53\u7136\u5e0c\u671b\u8ba9\u624b\u91cc\u7684\u5206\u5757\u65b9\u6848\u7ee7\u7eed\u5206\u5757\u7684\u6f5c\u529b\u5c3d\u53ef\u80fd\u66f4\u5927\uff0c\u90a3\u4e5f\u5c31\u662f\u5360\u7528\u4f4d\u7f6e\u5c3d\u91cf\u5c0f\n\n$7.$\u4e8e\u662f\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u8bbe\u51fa**DP\u65b9\u7a0b**\u4e86\uff0c\u8bbe$dp_{i,j}=(n,m)$\u8868\u793a\u7b2c$i$\u81f3\u7b2c$j$\u53f7\u70b9\u7ec4\u6210\u7684\u591a\u8fb9\u5f62\u4e2d\uff0c\u6700\u591a\u53ef\u4ee5\u5206\u51fa$n$\u5757\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u6700\u5c11\u5360\u7528$m$\u7684\u9762\u79ef\n\n$8.$\u8fdb\u884c\u8f6c\u79fb\uff0c\u6bcf\u6b21\u679a\u4e3e\u4e2d\u95f4\u70b9\u4e3a\u672a\u88ab\u5206\u5272\u7684\u70b9\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u524d\u540e\u4e24\u7aef\u533a\u95f4\u7684\u672a\u5360\u7528\u533a\u57df\u5fc5\u5b9a\u8054\u901a\uff0c\u4e14\u603b\u9762\u79ef\u6ee1\u8db3$S_1<w,S_2<w\\to S<2w$\uff08\u5269\u4f59\u9762\u79ef\u5fc5\u5b9a\u5c0f\u4e8e$w$\uff0c\u8981\u4e0d\u7136\u5c31\u76f4\u63a5\u591a\u5206\u4e00\u5757\u4e86\uff09\u56e0\u6b64\uff0c\u8f6c\u79fb\u65f6\u53ea\u9700\u8ba8\u8bba\u662f\u5426\u80fd\u591f\u591a\u5206\u4e00\u5757\u7684\u95ee\u9898\n\n$9.$\u5982\u679c\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a$w$\uff0c$dp_{1,n}\\ge k+1$\uff0c\u90a3\u4e48\u7b54\u6848\u5408\u6cd5\n\n$10.$**\u7b97\u591a\u8fb9\u5f62\u9762\u79ef\u7684\u516c\u5f0f\uff08\u978b\u5e26\u5b9a\u7406\uff09\uff1a**\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5df2\u77e5\u6bcf\u4e00\u4e2a\u70b9\u5750\u6807$(x_i,y_i)$\u7684\u591a\u8fb9\u5f62\uff0c\u6709\n\n$2S=\\sum_{i=1}^n x_iy_{i+1}-x_{i+1}y_i$\n\n\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u5df1\u5b66\u5b66\u600e\u4e48\u63a8\u5bfc\uff0c\u8fd9\u91cc\u76f4\u63a5\u5f53\u4e00\u4e2a\u5b9a\u7406\u7528\u4e86",
        "postTime": 1642930616,
        "uid": 158058,
        "name": "JQ6561",
        "ccfLevel": 7,
        "title": "CF1572E Polygon\u9898\u89e3"
    },
    {
        "content": "~~\u7b97\u9762\u79ef\u6ca1\u52a0\u7edd\u5bf9\u503c\u2026\u2026~~\n\n- \u9898\u610f\n\n\u7ed9\u5b9a\u51f8 $n$ \u8fb9\u5f62 $\\{a_1,a_2\\dots a_n\\}$\uff0c\u6c42\u5c06\u5207\u6210 $k + 1$ \u4e2a\u65e0\u4ea4\u7684\u90e8\u5206\u4e2d\u9762\u79ef\u7684\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\u3002\n\n- \u5206\u6790\n\n\u9996\u5148\u8003\u8651\u4e8c\u5206\u7b54\u6848\uff0c\u5c06\u95ee\u9898\u8f6c\u5316\u6210\u80fd\u5426\u5c06\u539f\u591a\u8fb9\u5f62\u5207\u6210 $k+1$ \u4e2a\u90e8\u5206\u4f7f\u5f97\u6bcf\u4e2a\u90e8\u5206\u9762\u79ef\u5747\u5927\u4e8e\u7b49\u4e8e $w$\u3002\n\n\u56e0\u4e3a\u4efb\u610f\u4e24\u4e2a\u90e8\u5206\u65e0\u4ea4\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u533a\u95f4 dp\uff0c\u8bbe $f_{i,j}$ \u8868\u793a\u533a\u95f4 $[i,j]$ \u6700\u591a\u5206\u6210\u591a\u5c11\u90e8\u5206\uff0c$g_{i,j}$ \u4e3a\u5728\u90e8\u5206\u6700\u591a\u7684\u524d\u63d0\u4e0b\u51f8\u591a\u8fb9\u5f62 $\\{a_i,\\dots,a_j\\}$ \u5269\u4f59\u7684\u9762\u79ef\u3002\n\n\u8003\u8651\u8f6c\u79fb\u5373\u679a\u4e3e\u4e00\u4e2a $k \\in (i,j)$\uff0c\u76f4\u63a5\u8f6c\u79fb\u5c31\u884c\u4e86\uff0c$f_{i,j}=\\max\\limits_{k} f_{i,k}+f_{k,j}+[w\\le g_{i,k}+g_{k,j}+\\text{area}(a_i,a_j,a_k)]$\u3002\n\n$\\text{area}(a,b,c)$ \u8868\u793a\u6709\u70b9 $a,b,c$ \u7ec4\u6210\u7684\u4e09\u89d2\u5f62\u7684\u9762\u79ef\uff0c\u7531\u4e8e\u6bcf\u6b21\u6700\u591a\u589e\u52a0\u4e00\u5757\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u662f\u6b63\u786e\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n^3\\log w)$\u3002\n\n- code\n\n```cpp\n#include <bits/stdc++.h>\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2\")\n#define int long long\nusing namespace std;\n\nnamespace IO{\n\tchar ibuf[(1 << 20) + 1], *iS, *iT;\n\t#if ONLINE_JUDGE\n\t#define gh() (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, (1 << 20) + 1, stdin), (iS == iT ? EOF : *iS++) : *iS++)\n\t#else\n\t#define gh() getchar()\n\t#endif\n\t#define reg register\n\tinline long long read () {\n\t\treg char ch = gh();\n\t\treg long long x = 0;\n\t\treg char t = 0;\n\t\twhile (ch < '0' || ch > '9') t |= ch == '-', ch = gh();\n\t\twhile (ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gh();\n\t\treturn t ? -x : x;\n\t}\n\tinline void write(long long x) {\n\t\tif (x < 0) {\n\t\t\tx = ~(x - 1);\n\t\t\tputchar('-');\n\t\t}\n\t\tif (x > 9)\n\t\t\twrite(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\n\nusing IO::read;\nusing IO::write;\n\nconst int maxn(205);\nint n, lim, f[maxn][maxn], g[maxn][maxn];\n\nstruct Point {\n\tint x, y;\n\tinline Point operator + (const Point &rhs) const {\n\t\treturn {x + rhs.x, y + rhs.y};\n\t}\n\tinline Point operator - (const Point &rhs) const {\n\t\treturn {x - rhs.x, y - rhs.y};\n\t}\n\tinline int operator * (const Point &rhs) const {\n\t\treturn x * rhs.y - y * rhs.x;\n\t}\n} a[maxn];\n\ninline int calc (Point a, Point b, Point c) {\n\treturn abs((b - a) * (c - a));\n}\n\ninline bool check (int w) {\n\tmemset(f, 0, sizeof(f));\n\tmemset(g, 0, sizeof(g));\n\tfor (int len = 3; len <= n; ++len) {\n\t\tfor (int i = 1, j = i + len - 1; i <= n; ++i, ++j) {\n\t\t\tfor (int k = i + 1; k < j; ++k) {\n\t\t\t\tint s = g[i][k] + g[k][j] + calc(a[i], a[j], a[k]);\n\t\t\t\tif (f[i][j] < f[i][k] + f[k][j] + (s >= w)) f[i][j] = f[i][k] + f[k][j] + (s >= w), g[i][j] = s >= w ? 0 : s;\n\t\t\t\telse if (f[i][j] == f[i][k] + f[k][j] && s < w) g[i][j] = max(g[i][j], s);\n\t\t\t}\n\t\t}\n\t}\n\treturn f[1][n] >= lim + 1;\n}\n\nsigned main () {\n\tn = read(), lim = read();\n\tfor (int i = 1; i <= n; i++) a[i] = {read(), read()};\n\tint l = 0, r = 1e18, mid, res = -1;\n\twhile (l <= r) {\n\t\tmid = (l + r) >> 1;\n\t\tif (check(mid)) l = mid + 1, res = mid;\n\t\telse r = mid - 1;\n\t}\n\twrite(res);\n    return 0;\n}\n```",
        "postTime": 1675263093,
        "uid": 317495,
        "name": "JWRuixi",
        "ccfLevel": 7,
        "title": "CF1572E Polygon"
    }
]