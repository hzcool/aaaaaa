[
    {
        "content": "\u5efa\u7acb\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c\u5982\u679c\u5c06 y \u5750\u6807\u770b\u6210\u4f4d\u7f6e\uff0cx \u5750\u6807\u770b\u6210\u65f6\u95f4\uff0c\u90a3\u4e48\u4e00\u5835 $(L,R,t)$ \u7684\u5899\u5728\u5750\u6807\u7cfb\u4e0a\u5c31\u662f $x \\in [t,+\\infty), y\\in [L,R]$ \u7684\u53f3\u8fb9\u65e0\u9650\u5ef6\u957f\u7684\u77e9\u5f62\uff0c\u4e00\u5bf9\u4ece\u65f6\u95f4 $t$ \u5f00\u59cb\u8d70\u7684\u4eba\u56fe\u50cf\u5e94\u8be5\u4e3a $y=x-t$\u3002\n\n\u8ba1\u7b97\u76ee\u6807\u8f6c\u5316\u4e3a\u6c42 $y=x-q_i$ \u4e0e\u6240\u6709\u5899\u70b9\u7684\u4ea4\u96c6\u7684\u5e76\u96c6\u6295\u5f71\u5230 x \u8f74\u4e0a\u7684\u957f\u5ea6\u3002\n\n\u5982\u679c\u62ff\u6837\u4f8b 2 \u6765\u753b\u56fe\u7684\u5c31\u662f\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2s6immhe.png)\n\n\u53d1\u73b0\u5899\u4e0e\u5899\u4e4b\u95f4\u4e5f\u53ef\u80fd\u6709\u4ea4\u96c6\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u5899\u7684 y \u5750\u6807\u90fd\u79bb\u6563\u5316\uff0c\u8bbe\u79bb\u6563\u5316\u6570\u7ec4\u4e3a $d_i$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $[d_i,d_{i+1}]$\uff0c\u627e\u5230\u6240\u6709 $[L,R]$ \u8986\u76d6\u5b83\u7684\u5899\u4e2d $t$ \u6700\u5c0f\u7684\uff0c\u8f6c\u6362\u6210 $(d_i,d_{i+1},t_{min})$ \u7684\u5899\u3002\u8fd9\u6837\u79bb\u6563\u5316\u51fa\u7684\u6700\u591a $2m-1$ \u5835\u5899\u4e0d\u4f1a\u6709\u91cd\u53e0\u90e8\u5206\u3002\n\n\u53d1\u73b0\u67e5\u8be2\u7684\u76f4\u7ebf\u5e26\u6709\u659c\u7387\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u5750\u6807\u7cfb\u4e0a\u7684\u6bcf\u4e2a\u70b9 $(x,y) \\to (x-y,y)$\uff0c\u8fd9\u6837\u6837\u4f8b\u7684\u56fe\u53c8\u53d8\u6210\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/pv0nvu7i.png)\n\n\u73b0\u5728\u8981\u8ba1\u7b97\u7684\u4e1c\u897f\u53d8\u6210\u4e00\u6761 $x=q_i$ \u7684\u76f4\u7ebf\u8ddf\u6240\u6709\u68af\u5f62\u76f8\u4ea4\u7684\u7ebf\u6bb5\u957f\u5ea6\u4e4b\u548c\u3002\n\n\u4e00\u4e2a\u68af\u5f62\u53ef\u4ee5\u62c6\u6210\u4e00\u4e2a\u7b49\u8170\u76f4\u89d2\u4e09\u89d2\u5f62\u548c\u4e00\u4e2a\u77e9\u5f62\u3002\u8003\u8651\u4ece\u5de6\u5230\u53f3\u626b\u63cf\u7ebf\uff0c\u5bf9\u4e8e\u4e00\u4e2a $q$\uff0c\u5b83\u6709\u53ef\u80fd\u8ddf\u4e09\u89d2\u5f62\u76f8\u4ea4\uff0c\u6709\u53ef\u80fd\u8ddf\u77e9\u5f62\u76f8\u4ea4\u3002\u8ddf\u77e9\u5f62\u76f8\u4ea4\u7684\u957f\u5ea6\u4e4b\u540e\u5c31\u4e0d\u4f1a\u53d8\u4e86\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u8bbe\u5de6\u8fb9\u7684\u9876\u70b9\uff08\u6bd4\u5982\u56fe\u4e2d\u7684\u70b9 $I,B,E$\uff09\u5750\u6807\u4e3a $(a,b)$\uff0c\u90a3\u4e48\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a $q-a$\uff0c\u800c\u968f\u7740 $q$ \u7684\u589e\u5927\uff0c\u4f1a\u8d85\u51fa\u539f\u5148\u7684\u4e09\u89d2\u5f62\u533a\u57df\uff0c\u8fdb\u5165\u77e9\u5f62\u533a\u57df\u3002\n\n\u5f00\u4e2a\u5806\uff0c\u7ef4\u62a4\u6709\u4ea4\u96c6\u7684\u4e09\u89d2\u7684\u4e2a\u6570 $p$ \u548c $ s=\\sum_{i=1}^{p} a_{i}$\uff0c\u4ee5\u53ca\u77e9\u5f62\u957f\u5ea6\u4e4b\u548c $l$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a $q$\uff0c\u7b54\u6848\u5c31\u4e3a $pq-s+l$\u3002\n\n\u8bb0\u5f97\u5f00 long long\uff0c\u65f6\u95f4 $O(n \\log n+ m \\log m)$ \u7a7a\u95f4 $O(n+m)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN=1e5,MAXV=1e9;\n\nstruct Segment\n{\n\tint L,R,t;\n\tvoid Scan() {scanf(\"%d %d %d\",&L,&R,&t);}\n}wall[MAXN+5];\n\nint n,m;\nint discre[2*MAXN+5],Tail;\nvector<int> Ins[2*MAXN+5],Del[2*MAXN+5];\nbool mapn[MAXN+5];\npriority_queue< pair<int,int> > Q;\nll ans[MAXN+5];\n\nint Search(int x)\n{\n\tfor(int L=1,R=Tail,mid;1;)\n\t{\n\t\tmid=(L+R)>>1;\n\t\tif(discre[mid]==x) return mid;\n\t\tif(discre[mid]<x) L=mid+1;\n\t\telse R=mid-1;\n\t}\n\treturn 0;\n}\n\nstruct Operation\n{int x,t,l,d;\n}ope[4*MAXN+5];int tot;\n\nbool cmpO(Operation a,Operation b) {return a.x<b.x;}\n\nstruct Query {int q,ID;}Ask[MAXN+5];\n\nbool cmpQ(Query a,Query b) {return a.q<b.q;}\n\nll trian,tnum,len;\n\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\twall[i].Scan();\n\t\tdiscre[++Tail]=wall[i].L;\n\t\tdiscre[++Tail]=wall[i].R;\n\t}\n\tsort(discre+1,discre+Tail+1);\n\tTail=unique(discre+1,discre+Tail+1)-discre-1;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tIns[Search(wall[i].L)].push_back(i);\n\t\tDel[Search(wall[i].R)].push_back(i);\n\t}\n\tfor(int i=1;i<Tail;i++)\n\t{\n\t\tfor(int j=0;j<Ins[i].size();j++)\n\t\t{\n\t\t\tmapn[Ins[i][j]]=1;\n\t\t\tQ.push(make_pair(-wall[Ins[i][j]].t,Ins[i][j]));\n\t\t}\n\t\tfor(int j=0;j<Del[i].size();j++) mapn[Del[i][j]]=0;\n\t\twhile(!Q.empty())\n\t\t\tif(!mapn[Q.top().second]) Q.pop();\n\t\t\telse break;\n\t\t//x=a -> y=-x+a\n\t\tif(!Q.empty()) //y=-x-Q.top().first\n\t\t{\n\t\t\tint a=-Q.top().first;\n\t\t\t/*\n\t\t\t\t-x+a=discre[i]\n\t\t\t\t-x+a=discre[i+1]\n\t\t\t\t\n\t\t\t\t[a-discre[i+1],a-discre[i]]\n\t\t\t*/\n\t\t\tope[++tot]=Operation{a-discre[i+1],a-discre[i+1],0                    , 1};\n\t\t\tope[++tot]=Operation{a-discre[i  ],discre[i+1]-a,discre[i+1]-discre[i],-1};\n\t\t}\n\t}\n\tsort(ope+1,ope+tot+1,cmpO);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&Ask[i].q);\n\t\tAsk[i].ID=i;\n\t}\n\tsort(Ask+1,Ask+n+1,cmpQ);\n\tfor(int i=1,j=0;i<=n;i++)\n\t{\n\t\twhile(j<tot)\n\t\t\tif(ope[j+1].x<=Ask[i].q)\n\t\t\t{\n\t\t\t\t++j;\n\t\t\t\ttrian+=ope[j].t;\n\t\t\t\ttnum+=ope[j].d;\n\t\t\t\tlen+=ope[j].l;\n\t\t\t}\n\t\t\telse break;\n\t\tans[Ask[i].ID]=tnum*Ask[i].q-trian+len;\n\t}\n\tfor(int i=1;i<=n;i++) printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1633838252,
        "uid": 54591,
        "name": "Seauy",
        "ccfLevel": 9,
        "title": "CF286D Tourists \u7684\u9898\u89e3"
    }
]