[
    {
        "content": "\u6570\u636e\u7ed3\u6784\u6709\u98ce\u9669\uff0c\u5012\u5e8f\u5f00\u9898\u9700\u8c28\u614e\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/l1g25h7n.png)\n\n-----\n\n\u9996\u5148\u4e00\u5b9a\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e00\u6b21\u8be2\u95ee\u7684\u8fde\u901a\u5757\u4e00\u5b9a\u662f\u7531\u8fb9\u6743\u5927\u4e8e\u8be2\u95ee\u7ed9\u5b9a\u9650\u5b9a\u503c\u7684\u8fb9\u96c6\u7ec4\u6210\u3002\u6240\u4ee5\u76f4\u63a5\u60f3\u5230\u5c06\u6240\u6709\u8be2\u95ee\u79bb\u7ebf\uff0c\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u6bcf\u6b21\u76f4\u63a5\u67e5\u8be2\u8fde\u901a\u5757\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\uff0c\u6211\u4eec\u8981\u627e\u5230\n- \u8fde\u901a\u5757\u7684\u6700\u5927\u503c\u3002\n- \u5f53\u524d\u8282\u70b9\u5230\u591a\u4e2a\u6700\u5927\u503c\u8282\u70b9\u4e2d\uff0c\u8def\u5f84\u4e0a\u8fb9\u7684\u82b1\u8d39\u6700\u5927\u503c\u6700\u5927\u7684\u4e00\u6761\u8def\u5f84\u3002\n\n\u8fd9\u9700\u8981\u6211\u4eec\u5199\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u652f\u6301\u7ef4\u62a4\u8fde\u8fb9\uff0c\u4e0e\u7ef4\u62a4\u8fde\u901a\u5757\u5185\u7684\u6700\u5927\u8282\u70b9\u4e0e\u6700\u5927\u8282\u70b9\u4e0a\u7684\u6743\u503c\u3002\n\n\u8003\u8651\u4f7f\u7528 LCT\uff0c\u8fde\u901a\u5757\u7684\u6700\u5927\u503c\u53ef\u4ee5\u901a\u8fc7 LCT \u7684\u5e38\u89c1\u5b50\u6811\u7ef4\u62a4\u65b9\u5f0f\u5f97\u5230\uff0c\u90a3\u4e48\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\uff1a\n- \u6211\u4eec\u4ee4\u4e00\u4e2a pair \u5b58\u50a8\uff0c\u7b2c\u4e00\u4f4d\u4e3a \u6700\u5927\u8282\u70b9\uff0c\u7b2c\u4e8c\u4f4d\u4e3a\u6700\u5927\u8fb9\u82b1\u8d39\u3002\n- \u8003\u8651\u5728 pushup \u7684\u65f6\u5019\u8fdb\u884c\u5bf9\u8def\u5f84\u6700\u5927\u503c\u7684\u8ba8\u8bba\u3002\n\t- \u5982\u679c pair \u7b2c\u4e00\u4f4d\u7531 splay \u4e0a\u5de6\u513f\u5b50\u7ee7\u627f\uff0c\u5219\u5c06\u5176\u8def\u5f84\u6700\u5927\u503c\u76f4\u63a5\u7f6e\u4e8e\u5f53\u524d\u7b2c\u4e8c\u4f4d\u3002\n   - \u5982\u679c pair \u7b2c\u4e00\u4f4d\u63a5\u53d7\u4e86\u6765\u81ea\u865a\u513f\u5b50\u6216\u8005\u53f3\u513f\u5b50\u7684\u4fe1\u606f\uff0c\u5219\u7b2c\u4e8c\u4f4d\u9700\u8981\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u82b1\u8d39\u53d6 max\u3002\uff08\u62c6\u8fb9\u4e3a\u70b9\uff0c\u539f\u6811\u70b9\u201c\u82b1\u8d39\u201d\u4e3a\u7a7a\uff09\n- \u540c\u65f6\u7528 set \u8fdb\u884c\u5bf9\u4e8e\u5b50\u6811\u7684\u7ef4\u62a4\u3002\u90a3\u4e48\u5c31\u80fd\u591f\u5f97\u5230\u4e00\u4e2a $\\mathcal O(n\\log^{2} n)$ \u7684\u5927\u5e38\u6570\u7b97\u6cd5\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/vf7bs9qx.png)\n\n\u591a\u6b21\u5361\u5e38\u4e5f\u4e0d\u884c\uff0c\u6211\u4eec\u9700\u8981\u4ece\u590d\u6742\u5ea6\u7684\u6839\u672c\u4e0a\u5bf9\u8fdb\u884c\u4f18\u5316\u3002\u6211\u4eec\u8003\u8651\u74f6\u9888\u5728\u4e8e\u865a\u513f\u5b50\u8f6c\u79fb\u8fb9\u7684 set \u4e2d\u5b58\u50a8\u4e86\u865a\u513f\u5b50\u7684\u6240\u6709\u4fe1\u606f\uff0c\u63d2\u5165\u4e0e\u5220\u9664\u7684\u65f6\u95f4\u3002\n\n\u7531\u4e8e\u6211\u4eec\u53ea\u53d6\u5b50\u6811\u4e2d\u6700\u5927\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u8fd9\u6837\u7684\u865a\u513f\u5b50\u4e00\u5b9a\u53ea\u6709\u4e00\u4e2a\u3002\u53d1\u73b0\u5728\u5b9e\u94fe splay \u4e0a\uff0c\u5de6\u53f3\u513f\u5b50\u4e5f\u53ef\u80fd\u6210\u4e3a\u6700\u5927\u503c\u3002\u6700\u91cd\u8981\u7684\uff0c\u672c\u9898\u5728\u8be2\u95ee\u79bb\u7ebf\u540e\u53ea\u6709\u8fde\u8fb9\u64cd\u4f5c\u3002\u90a3\u4e48\u5f53 set \u7684\u5927\u5c0f\u5927\u4e8e 3 \u65f6\uff0c\u76f4\u63a5\u5f39\u51fa\u6700\u5c0f\u5143\u7d20\u3002\u8fd9\u6837\uff0cset \u7ef4\u62a4\u865a\u513f\u5b50\u4fe1\u606f\u7684\u65f6\u95f4\u53ef\u89c6\u4e3a\u5e38\u6570\u3002\u5f97\u5230\u4e00\u4e2a $\\mathcal O(n\\log n)$ \u7684\u7b97\u6cd5\u3002\n\n[code](https://codeforces.ml/contest/1583/submission/132588024)",
        "postTime": 1634803231,
        "uid": 27338,
        "name": "jerry3128",
        "ccfLevel": 9,
        "title": "\u9898\u89e3\u3010CF1583H Omkar and Tours\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u95ee\u7684\u505a\u6cd5\u6bd4\u8f83\u7b80\u5355\u3002\n\n\u6211\u4eec\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u6309\u7167\u9650\u5236\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u968f\u65f6\u52a0\u5165\u53d8\u4e3a\u5408\u6cd5\u7684\u8fb9\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u96be\u70b9\u5728\u4e8e\u7b2c\u4e8c\u95ee\u3002\n\n\u6ce8\u610f\u5230\u4e24\u70b9\u95f4\u8d39\u7528\u4e3a\u8fb9\u6743\u7684\u6700\u5927\u503c\u3002\u6211\u4eec\u8003\u8651\u5efa\u7acb\u539f\u6811\u7684 $\\texttt{Kruscal}$ \u91cd\u6784\u6811\uff0c\u5c31\u5c06\u6c42\u8def\u5f84\u4e0a\u6700\u5927\u503c\u8f6c\u5316\u4e3a\u4e86\u6c42 lca \u7684\u70b9\u6743\u3002\u7531\u4e8e $\\texttt{Kruscal}$ \u91cd\u6784\u6811\u4e3a\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u56e0\u6b64\u6df1\u5ea6\u6700\u5c0f\u7684 lca \u5373\u4e3a\u7b2c\u4e8c\u95ee\u7684\u7b54\u6848\u3002\n\n\u6211\u4eec\u6709\u5f15\u7406\uff0c\u8981\u4f7f\u4e24\u70b9\u4e4b\u95f4 lca \u7684\u6df1\u5ea6\u6700\u5c0f\uff0c\u5e94\u5f53\u5c3d\u91cf\u8ba9\u4e24\u70b9\u7684 dfs \u5e8f\u5dee\u5f02\u5c3d\u91cf\u5927\u3002\u8fd9\u4e00\u70b9\u753b\u56fe\u5f88\u597d\u7406\u89e3\uff0c\u7f51\u4e0a\u4e5f\u6709\u5f88\u591a\u8bc1\u660e\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u4e00\u4e2a\u70b9\u5230\u4e00\u4e2a\u8054\u901a\u70b9\u96c6\u4e4b\u95f4\u6700\u5c0f\u6df1\u5ea6\u7684 lca \u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u4ece\u8fd9\u4e2a\u70b9\u5230\u70b9\u96c6\u4e2d dfs \u5e8f\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u6216\u8005\u5230\u70b9\u96c6\u4e2d dfs \u5e8f\u6700\u5927\u7684\u8282\u70b9\u3002\u540c\u6837\u53ef\u4ee5\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O((n+q)\\ logn)$\uff0c\u53d6\u51b3\u4e8e lca \u7684\u6c42\u6cd5\u3002\n\n[AC\u4ee3\u7801](https://codeforces.com/contest/1586/submission/132305080)",
        "postTime": 1634866067,
        "uid": 59015,
        "name": "qkm66666",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1583H Omkar and Tours"
    },
    {
        "content": "\u9996\u5148\u5b58\u5728\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\u7684\u505a\u6cd5\uff1a\u5bf9\u4e8e\u8be2\u95ee $1$ \u968f\u4fbf\u505a\uff0c\u5bf9\u4e8e\u8be2\u95ee $2$ \u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u539f\u56fe\u6309\u7167**\u8fb9\u7684\u8d39\u7528\u6743**\u5efa\u7acb Kruscal \u91cd\u6784\u6811\u5e76\u786e\u5b9a\u6bcf\u4e2a\u70b9\u7684 dfs \u5e8f\uff0c\u6309\u7167**\u8fb9\u7684\u5bb9\u91cf\u6743**\u79bb\u7ebf\u4e0b\u6765\u5957\u8def\u52a8\u6001\u8fde\u56fe\u7684\u540c\u65f6\uff0c\u7ef4\u62a4\u8fde\u901a\u5757\u5185\u70b9\u6743\u6700\u5927\u7684\u70b9\u4e2d dfs \u5e8f\u6700\u5927\u4e0e dfs \u5e8f\u6700\u5c0f\u7684\u4f4d\u7f6e\uff0c\u6700\u540e\u7684\u7b54\u6848\u53ea\u6709\u53ef\u80fd\u662f\u8fd9\u4e24\u4e2a\u70b9\u3002\n\n\u7136\u540e\u663e\u7136\u7ef4\u62a4\u7684\u4e1c\u897f\u5177\u6709\u7ed3\u5408\u5f8b\uff0c\u53ef\u4ee5\u7ef4\u62a4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u6392\u5e8f\u3002\n\n\u8fd9\u91cc\u63d0\u51fa\u4e00\u79cd\u6709\u5173\u52a8\u6001\u6811\u7ef4\u62a4\u7684\u65b9\u6cd5\u3002\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u4e8b\u5b9e\uff1a\u5c06 $x$ \u63d0\u4e3a\u539f\u8fde\u901a\u5757\u7684\u6839\uff0c\u8bb0 $1$ \u7c7b\u67e5\u8be2\u7684\u7b54\u6848\u4e3a $as_1$\uff0c\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u67e5\u8be2\u6240\u6709\u5b50\u6811\u5185 $\\max_{v_i = as_1} W(i , x)$\uff0c\u5176\u4e2d $W(i,x)$ \u4e3a $i \\sim x$ \u8def\u5f84\u4e0a\u8fb9\u6743\u7684\u6700\u5927\u503c\u3002\n\n\u89c2\u5bdf\u8fb9\u6743\u4e0d\u597d\u5904\u7406\uff0c\u7528 kruscal \u91cd\u6784\u6811\u8fb9\u6743\u8f6c\u70b9\u6743\u7684\u65b9\u6cd5\u5c06\u4e00\u6761\u8fb9\u53d8\u6210\u4e00\u4e2a\u70b9\uff0c\u8fde\u63a5 $x,y$ \u5e76\u5c06\u8fb9\u6743\u8f6c\u79fb\u5230\u70b9\u6743\u4e0a\uff0c\u65b9\u4fbf\u7ef4\u62a4\u3002\n\n\u518d\u6b21\u8003\u8651\u5230\u6211\u4eec\u7684\u67e5\u8be2\u90fd\u662f\u4ee5 $x$ \u4e3a\u6839\u67e5\u8be2\u7684\uff0c\u542f\u53d1\u6211\u4eec\u5728\u4ee5 $x$ \u4e3a\u6839\u5efa\u7acb\u7684 LCT \u7684\u5b9e\u94fe\u4e2d\uff0c**\u4efb\u610f\u4e00\u6761\u7956\u5148-\u5b50\u5b59\u94fe**\u90fd\u53ef\u4ee5\u53d8\u6210 $x$ \u5230\u4e00\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u7684\u4e00\u90e8\u5206\u3002\n\n\u8003\u8651\u8fd9\u6837\u7ef4\u62a4\uff1a\u5728\u5b9e\u94fe Splay \u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u4e8c\u5143\u7ec4 $(x,y)$\uff0c\u5176\u4e2d $x$ \u8868\u793a\u70b9\u6743\u6700\u5927\u8282\u70b9\u7684\u70b9\u6743\uff0c$y$ \u8868\u793a\u5f53\u524d Splay \u5b50\u6811\u4e2d\u4e00\u6761 $\\max(c)$ \u6700\u5927\u7684\u8def\u5f84\u3002\n\n\u5206\u4e3a Splay \u4e2d\u7684\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\uff0c\u4ee5\u53ca $x$ \u7684\u865a\u5b50\u6811\u5206\u5f00\u8d21\u732e\uff1a\n\n- \u5bf9\u4e8e\u5de6\u53f3\u865a\u5b50\u6811\u7684\u7b54\u6848\u63d0\u53d6\u4e0a\u6765\u66f4\u65b0\uff1b\n\n- \u5bf9\u4e8e\u53f3\u5b50\u6811\u548c\u865a\u5b50\u6811\uff0c\u5c06\u7b54\u6848\u4e8c\u5143\u7ec4\u7684 $x$ \u4e0e\u5de6\u5b50\u6811\u5185**\u7ef4\u62a4\u51fa\u6765\u6700\u5927\u7684\u4e00\u6761\u8fb9\u6743 $y$ \u8fdb\u884c\u7ec4\u5408\u8d21\u732e\u7b54\u6848**\uff1b\n\n- \u6d89\u53ca makeroot \u64cd\u4f5c\uff0c\u7ef4\u62a4\u4e00\u4e2a\u53cd\u5411\u7b54\u6848\u3002\n\n\u8003\u8651\u8fd9\u4e48\u505a\u663e\u7136\u80fd\u7ef4\u62a4\u6bcf\u4e00\u6761\u5b9e\u94fe\u5411\u4efb\u610f\u865a\u5b50\u6811\u884c\u8d70\u7684\u8def\u5f84\uff0c\u7ef4\u62a4\u662f\u6b63\u786e\u7684\u3002\n\n\u7136\u540e\u7167\u6284\u4e86\u4e00\u4e2a @[jerry3128](https://www.luogu.com.cn/user/27338) \u9898\u89e3\u4e2d\u57fa\u4e8e set \u7684\u5c0f\u4f18\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u6210 $O((n + q) \\log n)$\u3002\n\n```cpp\n/*\n\u6ce8\u610f\u5230\u6700\u540e\u67e5\u8be2\u662f\u5728\u4e00\u4e2a\u70b9\u4e3a\u6839\u65f6\u67e5\u8be2\uff0c\u6240\u4ee5\u5c31\u5728 LCT \u4e0a\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\u7ef4\u62a4 \n*/\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 4e5 + 5;\nchar buf[1<<23],*p1=buf,*p2=buf,obuf[1<<23],*O=obuf;\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\ninline int read() {\n\tint x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-') f=-1;ch=getchar();}\n\twhile(isdigit(ch)) x=x*10+(ch^48),ch=getchar();\n\treturn x*f;\n}\nvoid print(long long x) {\n    if(x>9) print(x/10);\n    *O++=x%10+'0';\n}\n\n#define Pair pair<int,int> \n#define pr make_pair\nint n,m;\nstruct node\n{\n\tint ch[2],f,rev,val,mxcst,cst;\n\tPair L,R;//\u6b63\u5411\u4fe1\u606f\u548c reverse \u540e\u7684\u4fe1\u606f \n\tnode(){ch[0] = ch[1] = f = rev = val = mxcst = cst = L.first = L.second = R.first = R.second = 0;}\n\tmultiset<Pair> smdd;\n};\nstruct LCT\n{\n\tnode t[Len];\n\t#define ls t[x].ch[0]\n\t#define rs t[x].ch[1]\n\tPair get(int x){return t[x].smdd.size() ? *t[x].smdd.rbegin() : pr(-1 , -1);}\n\tvoid ins(int x,int y)\n\t{\n\t\tif(!y) return;\n\t\tt[x].smdd.insert(t[y].L);\n\t\twhile(t[x].smdd.size() > 3) t[x].smdd.erase(t[x].smdd.find(*t[x].smdd.begin()));\n\t}\n\tvoid del(int x,int y)\n\t{\n\t\tif(!y) return;\n\t\tif(t[x].smdd.find(t[y].L) != t[x].smdd.end()) t[x].smdd.erase(t[x].smdd.find(t[y].L));\n\t}\n\tvoid push_up(int x)\n\t{\n\t\tt[x].mxcst = max(t[x].cst , max(t[ls].mxcst , t[rs].mxcst));\n\t\tPair fk = get(x);\n\t\tt[x].L = t[ls].L;\n\t\tint ls1 = t[ls].mxcst;\n\t\tif(x <= n) t[x].L = max(t[x].L , pr(t[x].val , ls1));\n\t\telse ls1 = max(ls1 , t[x].cst);\n\t\tt[x].L = max(t[x].L , pr(fk.first , max(fk.second , ls1)));\n\t\tt[x].L = max(t[x].L , pr(t[rs].L.first , max(t[rs].L.second , ls1)));\n\t\t//\u5b9e\u94fe\u53cd\u8f6c\u4fe1\u606f\n\t\tt[x].R = t[rs].R;\n\t\tint ls2 = t[rs].mxcst;\n\t\tif(x <= n) t[x].R = max(t[x].R , pr(t[x].val , ls2));\n\t\telse ls2 = max(ls2 , t[x].cst);\n\t\tt[x].R = max(t[x].R , pr(fk.first , max(fk.second , ls2)));\n\t\tt[x].R = max(t[x].R , pr(t[ls].R.first , max(t[ls].R.second , ls2)));\n\t\t//printf(\"%d %d %d %d %d\\n\",x,t[x].L.first,t[x].L.second,t[x].R.first,t[x].R.second);\n\t}\n\tvoid push_rev(int x)\n\t{\n\t\tif(!x) return;\n\t\tt[x].rev ^= 1;\n\t\tswap(t[x].ch[0] , t[x].ch[1]);\n\t\tswap(t[x].L , t[x].R);\n\t}\n\tvoid push_down(int x)\n\t{\n\t\tif(t[x].rev)\n\t\t{\n\t\t\tpush_rev(t[x].ch[0]);\n\t\t\tpush_rev(t[x].ch[1]);\n\t\t\tt[x].rev = 0;\n\t\t}\n\t}\n\tint idf(int x)\n\t{\n\t\tif(!t[x].f) return -1;\n\t\tif(t[t[x].f].ch[0] == x) return 0;\n\t\tif(t[t[x].f].ch[1] == x) return 1;\n\t\treturn -1;\n\t}\n\tvoid llcon(int son,int fa,int opt)\n\t{\n\t\tif(opt != -1) t[fa].ch[opt] = son;\n\t\tt[son].f = fa;\n\t}\n\tvoid push_all(int x)\n\t{\n\t\tif(idf(x) != -1) push_all(t[x].f);\n\t\tpush_down(x);\n\t}\n\tvoid rotate(int x)\n\t{\n\t\tint y = t[x].f , z = t[y].f , opx = idf(x) , opy = idf(y) , u = t[x].ch[opx ^ 1];\n\t\tllcon(u , y , opx);\n\t\tllcon(y , x , opx ^ 1);\n\t\tllcon(x , z , opy);\n\t\tpush_up(y) , push_up(x);\n\t}\n\tvoid Splay(int x)\n\t{\n\t\t//printf(\"###%d %d\\n\",x,t[x].f);\n\t\tpush_all(x);\n\t\twhile(idf(x) != -1)\n\t\t{\n\t\t\tint ff = t[x].f;\n\t\t\tif(idf(ff) == -1) rotate(x);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(idf(ff) == idf(x)) rotate(ff) , rotate(x);\n\t\t\t\telse rotate(x) , rotate(x);\n\t\t\t}\n\t\t}\n\t}\n\tvoid access(int x)\n\t{\n\t\t//printf(\"###%d\\n\",x);\n\t\tint lst = 0;\n\t\twhile(x)\n\t\t{\n\t\t\tSplay(x);\n\t\t\tins(x , t[x].ch[1]);\n\t\t\tdel(x , lst);\n\t\t\tt[x].ch[1] = lst;\n\t\t\tpush_up(x);\n\t\t\tlst = x;\n\t\t\tx = t[x].f;\n\t\t}\n\t}\n\tvoid makeroot(int x)\n\t{\n\t\t//printf(\"((((%d\\n\",x);\n\t\taccess(x);\n\t\tSplay(x);\n\t\tpush_rev(x);\n\t\t//printf(\"))))%d\\n\",x);\n\t}\n\tvoid link(int x,int y)\n\t{\n\t\t//printf(\"???%d %d\\n\",x,y);\n\t\tmakeroot(y);\n\t\taccess(x);\n\t\tSplay(x);\n\t\tt[x].ch[1] = y , t[y].f = x;\n\t\tpush_up(x);\n\t}\n}LLCT;\nstruct Node\n{\n\tint x,y,id,w1,w2;\n\tNode(){x = y = id = w1 = w2 = 0;}\n\tNode(int X,int Y,int ID,int W1,int W2){x = X , y = Y , id = ID , w1 = W1 , w2 = W2;}\n}Edge[Len],Q[Len];\nint Print[Len][2];\nbool cmp(Node x,Node y){return x.w1 > y.w1;}\nint main()\n{\n\tn = read() , m = read();\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tint x;x = read();\n\t\tLLCT.t[i].val = x;LLCT.push_up(i);\n\t}\n\tfor(int i = 1 ; i < n ; i ++)\n\t{\n\t\tint u,v,c,t;u = read() , v = read() , c = read() , t = read();\n\t\tEdge[i] = Node(u , v , i , c , t);\n\t\tLLCT.t[i + n].cst = t;LLCT.push_up(i + n);\n\t}\n\t//puts(\"\");\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tint x,y;y = read() , x = read();\n\t\tQ[i] = Node(x , 0 , i , y , 0);\n\t}\n\tsort(Edge + 1 , Edge + n , cmp);\n\tsort(Q + 1 , Q + 1 + m , cmp);\n\tint now = 1;\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\twhile(now < n && Q[i].w1 <= Edge[now].w1) \n\t\t{\n\t\t\tLLCT.link(Edge[now].x , Edge[now].id + n);\n\t\t\tLLCT.link(Edge[now].y , Edge[now].id + n);\n\t\t\tnow ++;\n\t\t}\n\t\tLLCT.makeroot(Q[i].x);\n\t\tPrint[Q[i].id][0] = LLCT.t[Q[i].x].L.first;\n\t\tPrint[Q[i].id][1] = LLCT.t[Q[i].x].L.second;\n\t} \n\tfor(int i = 1 ; i <= m ; i ++) \n\t{\n\t\tprint(Print[i][0]);\n\t\t*O ++ = ' ';\n\t\tprint(Print[i][1]);\n\t\t*O ++ = '\\n';\n\t}\n\tfwrite(obuf,O-obuf,1,stdout);\n\treturn 0;\t\n} \n```",
        "postTime": 1649062314,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1583H Omkar and Tours"
    },
    {
        "content": "**2021.10.27 Update:** \u4fee\u6b63\u4e86[I_am_Accepted](https://www.luogu.com.cn/user/101868)\u63d0\u51fa\u7684\u8be2\u95ee\u3002\n\n\u4e00\u7bc7\u6765\u81ea\u849f\u84bb\u7684\u9898\u89e3\uff0c\u4e0d\u559c\u8bef\u55b7\uff0c\u6709\u8bef\u8bf7\u79c1\u4fe1\u3002\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u4e00\u5e45 $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e24\u4e2a\u503c\uff1a$c$ \u4e0e $t$\uff0c\u5176\u4e2d $c$ \u8868\u793a\u8fd9\u6761\u8fb9\u80fd\u627f\u8f7d\u7684\u6700\u5927\u7684\u91cd\u91cf\uff0c$t$ \u8868\u793a\u901a\u8fc7\u8fd9\u6761\u8fb9\u6240\u9700\u8981\u7684\u82b1\u8d39\u3002\u6bcf\u4e2a\u70b9\u4e5f\u6709\u4e00\u4e2a\u70b9\u6743 $e$\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u6709\u8da3\u7a0b\u5ea6\u3002\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8def\u5f84\u7684\u8d39\u7528\u662f\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u7684\u6240\u6709\u82b1\u8d39\u4e2d\u6700\u5927\u7684\u503c\u3002\u73b0\u5728\u6709 $q$ \u7ec4\u8be2\u95ee\uff0c\u6bcf\u7ec4\u8be2\u95ee\u7ed9\u51fa\u4e24\u4e2a\u503c $v$ \u4e0e $x$\uff0c\u8868\u793a\u6709\u4e00\u8f86\u91cd\u91cf\u4e3a $v$ \u8f66\u4ece $x$ \u70b9\u51fa\u53d1\uff0c\u95ee\u4f60\u8fd9\u8f86\u8f66\u80fd\u5230\u8fbe\u7684\u6240\u6709\u70b9\u4e2d\u6709\u8da3\u7a0b\u5ea6\u6700\u5927\u7684\u90a3\u4e2a\u70b9\u7684\u6709\u8da3\u7a0b\u5ea6\uff0c\u4ee5\u53ca\u5230\u8fbe\u8fd9\u4e9b\u70b9\u7684\u6240\u6709\u8def\u5f84\u4e2d\u7684\u82b1\u8d39\u7684\u6700\u5927\u503c\u3002\n\n## \u9898\u76ee\u5206\u6790\n\n> \u60f3A\u6389\u4e00\u9053\u590d\u6742\u7684\u9898\uff0c\u5148\u4ece\u5979\u7684\u7b80\u5316\u7248\u5f00\u59cb\u5206\u6790\u3002\n\n\u5047\u8bbe\u6240\u6709\u7684\u70b9\u7684\u6709\u8da3\u7a0b\u5ea6\u5404\u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u79bb\u7ebf\u7684\u505a\u6cd5\u3002\u5904\u7406\u8be2\u95ee\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6240\u6709\u7684\u8be2\u95ee\u6309\u7167 $v$ \u503c\u6392\u5e8f\uff0c**\u4ece\u5927\u5230\u5c0f**\u8fd8\u662f**\u4ece\u5c0f\u5230\u5927**\u5462\uff1f\n\n\u5982\u679c\u6211\u4eec\u8981\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u8981\u8fdb\u884c\u5220\u8fb9\u64cd\u4f5c\uff0c\u6709\u6ca1\u6709\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u652f\u6301\u5220\u8fb9\u7ef4\u62a4\u8fde\u901a\u5757\u7684\u5462\uff1f\u4f3c\u4e4e\u6ca1\u6709\uff0c\u6709\u4e5f\u5f88\u96be\u64cd\u4f5c\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u9009\u62e9\u6309\u7167 $v$ \u503c\u4ece\u5927\u5230\u5c0f\u6765\u6392\u5e8f\u8be2\u95ee\u3002\u52a0\u8fb9\u64cd\u4f5c\u53ea\u8981\u7528\u4e00\u4e2a\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u8fde\u901a\u5757\u5373\u53ef\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u8fd9\u68f5\u6811\u8dd1\u4e00\u8fb9dfs\uff0c\u7136\u540e\u7528\u500d\u589e\u7b97\u51fa $fa$ \u4e0e $mxval$ \u4e24\u4e2a\u6570\u7ec4\u3002\u5176\u4e2d $fa[u][i]$ \u8868\u793a $u$ \u7684\u7b2c $2^i$ \u8f88\u7956\u5148\u662f\u8c01\uff0c$mxval[u][i]$ \u8868\u793a\u70b9 $u$ \u5411\u4e0a\u7684 $2^i$ \u6761\u8fb9\u4e2d $t$ \u503c\u7684\u6700\u5927\u503c\u3002\u7136\u540e\u5c31\u53ef\u4ee5 $\\log_n$ \u6c42\u51fa\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\u4e86\uff08\u8fd9\u4e0d\u662f\u6a21\u677f\u5417\uff09\u3002\n\n\u7136\u540e\u5c06\u6240\u6709\u8fb9\u6309\u7167 $c$ \u503c\u6392\u5e8f\uff0c\u4e00\u6761\u6761\u52a0\u8fb9\uff0c\u5f53\u52a0\u5230\u7684\u8fb9\u7684 $c$ \u503c\u5230\u67d0\u4e00\u7ec4\u8be2\u95ee\u7684 $v$ \u503c\u65f6\uff0c\u67e5\u8be2\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u52a0\u8fb9\u7684\u65f6\u5019\u5408\u5e76\u5e76\u67e5\u96c6\uff0c\u6bcf\u4e2a\u5e76\u67e5\u96c6\u5185\u8bb0\u5f55\u6709\u8da3\u7a0b\u5ea6\u6700\u5927\u7684\u503c\u7684\u7f16\u53f7\uff0c\u8f93\u51fa\u7684\u65f6\u5019\u5c31\u5f88\u65b9\u4fbf\u4e86\uff0c\u6700\u5927\u503c\u662f $e[u]$ \uff0c\u8ddd\u79bb\u5c31\u662f $x$ \u4e0e $u$ \u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\n\n> \u60f3\u5b8c\u4e86\u7b80\u5316\u7248\u7684\u9898\u76ee\uff0c\u60f3\u60f3\u7b80\u5316\u7248\u7684\u4e0e\u6807\u51c6\u7248\u7684\u6709\u4ec0\u4e48\u533a\u522b\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4e00\u4e2a\u5e76\u67e5\u96c6\u5185\u53ef\u80fd\u6709\u591a\u4e2a $e$ \u503c\u6700\u5927\u7684\u70b9\u3002\n\n\u505a\u6cd5\u662f\u5728\u6bcf\u4e2a\u5e76\u67e5\u96c6\u4e2d\u8bb0\u5f55\u4e24\u4e2a\u503c\uff1a$mxi$ \u4e0e $mx$\uff0c\u5176\u4e2d $mxi$ \u8868\u793a\u8fd9\u4e2a\u5e76\u67e5\u96c6\u4e2d $e$ \u503c\u6700\u5927\u7684\u70b9\u7684\u7f16\u53f7\uff0c$mx$ \u8868\u793a\u8bb0\u5f55\u7f16\u53f7\u7684\u90a3\u4e2a\u70b9\u5230\u5e76\u67e5\u96c6\u4e2d\u5176\u4ed6 $e$ \u503c\u6700\u5927\u7684\u70b9\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5408\u5e76\u7684\u65f6\u5019\u6bd4\u8f83\u4e00\u4e0b\u4e24\u4e2a\u5e76\u67e5\u96c6\u4e2d $e[mxi]$ \u7684\u5927\u5c0f\u3002\n\n\u5047\u8bbe\u6211\u4eec\u8981\u5408\u5e76\u4e24\u4e2a\u5e76\u67e5\u96c6\u7684\u6839\u4e3a $u$ \u4e0e $v$\uff0c\u5e76\u4e14\u5408\u5e76\u540e\u4ee5 $u$ \u4f5c\u4e3a\u6839\u3002\u90a3\u4e48\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n- $mxi[u]=mxi[u],mx[u]=mx[u]$\uff0c\u5f53\u6ee1\u8db3 $e[mxi[u]]>e[mxi[v]]$\n\n- $mxi[u]=mxi[v],mx[u]=mx[v]$\uff0c\u5f53\u6ee1\u8db3 $e[mxi[u]]<e[mxi[v]]$\n\n- $mxi[u]=mxi[u],mx[u]=\\max(mx[u],mx[v],getmx(mxi[u],mxi[v]))$\uff0c\u5f53\u6ee1\u8db3 $e[mxi[u]]=e[mxi[v]]$\n\n\u5176\u4e2d $getmx(u,v)$ \u8868\u793a\u4ece $u$ \u70b9\u5230 $v$ \u70b9\u7684\u8def\u5f84\u7684\u82b1\u8d39\u3002\n\n\u524d\u4e24\u4e2a\u90fd\u5f88\u597d\u7406\u89e3\uff0c\u53ea\u6709 $mx[u]=\\max(mx[u],mx[v],getmx(mxi[u],mxi[v]))$ \u53ef\u80fd\u8981\u7a0d\u5fae\u60f3\u4e00\u4e0b\u3002\u56e0\u4e3a\u4ed6\u4eec\u7684\u6700\u5927\u503c\u8981\u4e48\u662f\u5728 $u$ \u7684\u5757\u4e2d\uff0c\u8981\u4e48\u662f\u5728 $v$ \u7684\u5757\u4e2d\uff0c\u8981\u4e48\u5c31\u662f\u7ecf\u8fc7\u65b0\u52a0\u7684\u8fb9\u7684\u4e00\u6761\u8def\u7ecf\uff0c\u800c\u8fd9\u6761\u8def\u5f84\u7684\u82b1\u8d39\u5c31\u662f $getmx(mxi[u],mxi[v])$\uff0c\u6240\u4ee5\u53d6\u4e2amax\u5c31\u597d\u4e86\u3002\n\n\u95ee\u9898\u5c31\u8fd9\u6837\u88ab\u89e3\u51b3\u4e86\u2026\u2026\n\n\u4ee3\u7801\u7ec6\u8282\u5e94\u8be5\u8fd8\u597d\uff0c\u867d\u7136\u6211\u4ea4\u4e86\u51e0\u53d1\u624dA\uff0c\u4e00\u5b9a\u662fwtcl\u3002\n\n### Talk is cheap, show me the code!\n\n[Codeforces Status](https://codeforces.com/contest/1583/submission/132659594)\n\n```cpp\nint n,q;\nint fun[200010];\nstruct Edge{\n    int u,v,c,t;\n    bool operator<(const Edge &p)const{\n        return c>p.c;\n    }\n}rec[200010];\nstruct Qry{\n    int v,x,ans,ansi,id;\n    bool operator<(const Qry &p)const{\n        return v>p.v;\n    }\n}qry[200010];\nbool reorder(Qry x,Qry y){\n    return x.id<y.id;\n}\nvector<Edge> e[200010];\nvoid add(int u,int v,int c,int t){e[u].pb((Edge){u,v,c,t});}\nint dep[200010],fa[200010][25],mxval[200010][25];\nint father[200010],sz[200010],mxi[200010],mx[200010];\nint getmx(int u,int v){\n    int ans=0;\n    if(dep[u]<dep[v]) swap(u,v);\n    int dc=dep[u]-dep[v];\n    Ror(i,0,20) if(dc&(1<<i)){\n        dc^=(1<<i);\n        ckmx(ans,mxval[u][i]);\n        u=fa[u][i];\n    }\n    if(u==v) return ans;\n    Ror(i,0,20){\n        if(fa[u][i]!=fa[v][i]){\n            ckmx(ans,max(mxval[u][i],mxval[v][i]));\n            u=fa[u][i];\n            v=fa[v][i];\n        }\n    }\n    ckmx(ans,max(mxval[u][0],mxval[v][0]));\n    return ans;\n}\nint find(int x){\n    return father[x]==x?x:father[x]=find(father[x]);\n}\nvoid merge(int u,int v){\n    int fu=find(u),fv=find(v);\n    if(fu==fv) return;\n    if(sz[fu]<sz[fv]) swap(fu,fv);  \n    sz[fu]+=sz[fv];\n    if(fun[mxi[fu]]>fun[mxi[fv]]);\n    else if(fun[mxi[fu]]<fun[mxi[fv]]) mxi[fu]=mxi[fv],mx[fu]=mx[fv];\n    else if(fun[mxi[fu]]==fun[mxi[fv]]) mx[fu]=max(max(mx[fu],mx[fv]),getmx(mxi[fu],mxi[fv]));\n    father[fv]=fu;\n}\nvoid dfs(int u,int f,int val){\n    dep[u]=dep[f]+1;\n    fa[u][0]=f;\n    mxval[u][0]=val;\n    For(i,1,20){\n        fa[u][i]=fa[fa[u][i-1]][i-1];\n        mxval[u][i]=max(mxval[u][i-1],mxval[fa[u][i-1]][i-1]);\n    }\n    for(auto p:e[u]){\n        int v=p.v;\n        if(v==f) continue;\n        dfs(v,u,p.t);\n    }\n}\nsigned main(){\n    n=read(),q=read();\n    For(i,1,n) fun[i]=read();\n    For(i,1,n-1){\n        rec[i].u=read();\n        rec[i].v=read();\n        rec[i].c=read();\n        rec[i].t=read();\n        add(rec[i].u,rec[i].v,rec[i].c,rec[i].t);\n        add(rec[i].v,rec[i].u,rec[i].c,rec[i].t);\n    }\n    For(i,1,q){\n        qry[i].v=read();\n        qry[i].x=read();\n        qry[i].id=i;\n    }\n    sort(rec+1,rec+n);\n    sort(qry+1,qry+q+1);\n    dfs(1,0,0);\n    For(i,1,n){\n        sz[i]=1;\n        father[i]=i;\n        mxi[i]=i;\n        mx[i]=0;\n    }\n    int pos=1;\n    For(i,1,q){\n        while(pos+1<=n&&rec[pos].c>=qry[i].v){\n            merge(rec[pos].u,rec[pos].v);\n            pos++;\n        }\n        int fx=find(qry[i].x);\n        qry[i].ansi=fun[mxi[fx]];\n        qry[i].ans=max(getmx(qry[i].x,mxi[fx]),mx[fx]);\n    }\n    sort(qry+1,qry+q+1,reorder);\n    For(i,1,q){\n        printf(\"%lld %lld\\n\",qry[i].ansi,qry[i].ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1634869739,
        "uid": 169574,
        "name": "Enucai",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1583H \u3010Defender of Childhood Dreams\u3011"
    },
    {
        "content": "**CF1583H**\n\n\u6b64\u9898\u770b\u8d77\u6765\u5f62\u5f0f\u975e\u5e38\u50cf kruskal \u91cd\u6784\u6811\uff0c\u6240\u4ee5\u76f4\u63a5\u8003\u8651\u4f7f\u7528 kruskal \u91cd\u6784\u6811\u89e3\u51b3\u7b2c\u4e00\u95ee\u3002\u5177\u4f53\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fb9\u6309\u7167 $c$ \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5efa\u7acb\u91cd\u6784\u6811\uff0c\u70b9\u6743\u4e3a $c$\u3002\u4ee4 $p$ \u4e3a\u6ee1\u8db3\u70b9\u6743\u5927\u4e8e\u7b49\u4e8e $v$ \u7684 $x$ \u7684\u6700\u6d45\u7956\u5148\uff0c\u90a3\u4e48\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6240\u6709\u80fd\u5230\u8fbe\u7684\u70b9\u5c31\u662f\uff0c\u4ee5 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u6240\u6709\u53f6\u8282\u70b9\u6240\u8868\u793a\u7684\u70b9\u3002\n\n\u7b2c\u4e8c\u5982\u4f55\u5904\u7406\u5462\uff1f\u7ee7\u7eed\u8003\u8651 kruskal \u91cd\u6784\u6811\u3002\u4ee5 $t$ \u4ece\u5c0f\u5230\u5927\u518d\u5efa\u4e00\u9897\u91cd\u6784\u6811\uff0c\u70b9\u6743\u4e3a $t$\u3002\u90a3\u4e48\uff0c\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u5c31\u662f\u91cd\u6784\u6811\u4e0a\u7684 $\\text{lca}$ \u7684\u70b9\u6743\u3002\u5047\u5982\u5728\u7b2c\u4e00\u95ee\u4e2d\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u6709 $k$ \u4e2a\u3002\u6211\u4eec\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u6bcf\u4e00\u4e2a\u6765\u4e0e $x$ \u6c42\u65b0\u91cd\u6784\u6811\u4e0a\u7684 $\\text{lca}$\u3002\u8fd9\u6837\u505a\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u8f83\u9ad8\u7684\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u6027\u8d28\uff1a\u5728\u8fd9 $k$ \u4e2a\u70b9\u4e2d\uff0c\u53ea\u9700\u8981\u6c42\u4e24\u4e2a\u5c31\u597d\u4e86\uff0c\u5206\u522b\u662f\u5728\u7b2c\u4e8c\u68f5\u91cd\u6784\u6811\u4e2d $\\text{DFS}$ \u5e8f\u6700\u5927\u548c\u6700\u5c0f\u7684\u3002\u8fd9\u4e2a\u8f83\u4e3a\u6613\u8bc1\uff0c\u4e5f\u53ef\u4ee5\u611f\u6027\u7406\u89e3\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5728\u5efa\u7b2c\u4e00\u68f5\u91cd\u6784\u6811\u65f6\uff0c\u518d\u7ef4\u62a4\u4e00\u4e0b\u5b50\u6811\u7684\u53f6\u7ed3\u70b9\u4e2d\u518d\u5728\u7b2c\u4e8c\u68f5\u91cd\u6784\u6811\u4e2d $\\text{DFS}$ \u5e8f\u6700\u5927\u548c\u6700\u5c0f\u7684\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+q)\\log n)$\uff0c\u7406\u8bba\u4e0a\u53ef\u8fbe\u5230\u7ebf\u6027\u7a7a\u95f4\u3002\n\n**code**\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200005;\nint n,q,e[N],fa[2][N<<1],to[2][N<<1],cnt0,cnt1,tmp;\nstruct edge {\n    int u,v,c,t;\n}a[N];\nstruct P {\n    int fa[20],dat,dfn,minn,maxn,val,dep;//val\u662f\u5b50\u6811\u4e2d\u53f6\u5b50\u70b9\u6743\u6700\u5927\u503c\uff0c\u53ea\u5bf9\u7b2c\u4e00\u9897\u7ebf\u6bb5\u6811\u6709\u7528\n    vector<int>G;\n}tr[2][N<<1];//0\u8868\u793a\u7b2c\u4e00\u9897\u91cd\u6784\u6811\uff0c1\u8868\u793a\u7b2c\u4e8c\u68f5\ninline bool cmp1(edge x,edge y) {\n    return x.c>y.c;\n}\ninline bool cmp2(edge x,edge y) {\n    return x.t<y.t;\n}\nint get(int t,int x) {\n    if (fa[t][x]==x) return x;\n    return fa[t][x]=get(t,fa[t][x]);\n}\ninline void merge(int t,int x,int y) {\n    fa[t][get(t,x)]=get(t,y);\n    return;\n}\nvoid dfs(int t,int p,int lst) {\n    tr[t][p].dfn=++tmp;\n    to[t][tmp]=p;\n    tr[t][p].dep=tr[t][lst].dep+1;\n    tr[t][p].fa[0]=lst;\n    for (int i=1;i<20;i++) tr[t][p].fa[i]=tr[t][tr[t][p].fa[i-1]].fa[i-1];\n    for (int i=0;i<tr[t][p].G.size();i++) dfs(t,tr[t][p].G[i],p);\n    return;\n}\ninline int lca(int x,int y) {//\u500d\u589e\u6c42lca\n    if (tr[0][x].dep<tr[0][y].dep) swap(x,y);\n    for (int i=19;i>=0;i--) {\n        if (tr[0][tr[0][x].fa[i]].dep>=tr[0][y].dep) x=tr[0][x].fa[i];\n    }\n    if (x==y) return x;\n    for (int i=19;i>=0;i--) {\n        if (tr[0][x].fa[i]!=tr[0][y].fa[i]) x=tr[0][x].fa[i],y=tr[0][y].fa[i];\n    }\n    return tr[0][x].fa[0];\n}\nint main() {\n    scanf(\"%d %d\",&n,&q);\n    for (int i=1;i<=n;i++) scanf(\"%d\",&e[i]),fa[0][i]=fa[1][i]=i;\n    for (int i=1;i<n;i++) scanf(\"%d %d %d %d\",&a[i].u,&a[i].v,&a[i].c,&a[i].t);\n    sort(a+1,a+n,cmp2);\n    cnt0=cnt1=n;\n    for (int i=1;i<n;i++) {//\u5efa\u7acbkruskal\u91cd\u6784\u6811\n        ++cnt0;\n        fa[0][cnt0]=cnt0;\n        tr[0][cnt0].dat=a[i].t;\n        tr[0][cnt0].G.push_back(get(0,a[i].u));\n        tr[0][cnt0].G.push_back(get(0,a[i].v));\n        merge(0,a[i].u,cnt0);\n        merge(0,a[i].v,cnt0);\n    }\n    dfs(0,cnt0,0);\n    sort(a+1,a+n,cmp1);\n    for (int i=1;i<=n;i++) tr[1][i].val=e[i],tr[1][i].minn=tr[1][i].maxn=tr[0][i].dfn;\n    for (int i=1;i<n;i++) {\n        ++cnt1;\n        fa[1][cnt1]=cnt1;\n        tr[1][cnt1].dat=a[i].c;\n        int getu=get(1,a[i].u),getv=get(1,a[i].v);\n        tr[1][cnt1].G.push_back(getu);\n        tr[1][cnt1].G.push_back(getv);\n        tr[1][cnt1].val=max(tr[1][getu].val,tr[1][getv].val);\n        if (tr[1][getu].val==tr[1][getv].val) {\n            tr[1][cnt1].minn=min(tr[1][getu].minn,tr[1][getv].minn);\n            tr[1][cnt1].maxn=max(tr[1][getu].maxn,tr[1][getv].maxn);\n        } else if (tr[1][getu].val>tr[1][getv].val) {\n            tr[1][cnt1].minn=tr[1][getu].minn;\n            tr[1][cnt1].maxn=tr[1][getu].maxn;\n        } else {\n            tr[1][cnt1].minn=tr[1][getv].minn;\n            tr[1][cnt1].maxn=tr[1][getv].maxn;\n        }\n        merge(1,a[i].u,cnt1);\n        merge(1,a[i].v,cnt1);\n    }\n    dfs(1,cnt1,0);\n    for (int i=1;i<=q;i++) {\n        int v,x;\n        scanf(\"%d %d\",&v,&x);\n        int cur=x;\n        for (int j=19;j>=0;j--) {\n            if (tr[1][tr[1][cur].fa[j]].dat>=v) cur=tr[1][cur].fa[j];\n        }//\u627e\u5230\u9898\u89e3\u4e2d\u7684p\n        printf(\"%d \",tr[1][cur].val);\n        int l=to[0][tr[1][cur].minn],r=to[0][tr[1][cur].maxn];\n        printf(\"%d\\n\",max(tr[0][lca(x,l)].dat,tr[0][lca(x,r)].dat));\n    }\n    return 0;\n}\n```",
        "postTime": 1678692138,
        "uid": 407223,
        "name": "TulipeNoire",
        "ccfLevel": 7,
        "title": "D.M."
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[Kruskal \u91cd\u6784\u6811](https://oi-wiki.org/graph/mst/#kruskal-\u91cd\u6784\u6811)\n\n\u770b\u5230\u4e24\u7ef4 $c, t$ \u7684\u9650\u5236\uff0c\u679c\u65ad\u5148\u5bf9 $c$ \u90a3\u7ef4\u79bb\u7ebf\uff0c\u6309 $c$ \u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u52a0\u5165\u5e76\u56de\u7b54\u8be2\u95ee\u3002\n\n\u6b64\u65f6\u6211\u4eec\u4e0d\u96be\u89e3\u51b3\u7b2c\u4e00\u95ee\uff1a\u79bb\u7ebf\u52a0\u8fb9\u65f6\u5728\u5e76\u67e5\u96c6\u91cc\u7ef4\u62a4 $e_i$ \u7684\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u73b0\u5728\u8003\u8651\u52a0\u4e0a\u7b2c\u4e8c\u95ee\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u77e5\u9053**\u4ece $x$ \u51fa\u53d1\uff0c\u5230\u6240\u6709 $e_i$ \u6700\u5927\u7684\u70b9\u7ecf\u8fc7\u7684\u6700\u5927\u8fb9\u6743\u7684\u6700\u5927\u503c**\u3002\n\n\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u5148\u5efa\u51fa\u4ee5 $t$ \u4e3a\u6743\u503c\u7684 Kruskal \u91cd\u6784\u6811\uff0c\u7136\u540e\u5728\u5e76\u67e5\u96c6\u91cc\u7ef4\u62a4\u5f53\u524d\u96c6\u5408\u5185\u6240\u6709 $e_i$ \u6700\u5927\u7684\u70b9\u5728\u91cd\u6784\u6811\u4e0a\u7684 LCA\uff0c\u67e5\u8be2\u65f6\u8f93\u51fa $x$ \u4e0e $x$ \u6240\u5728\u96c6\u5408\u7ef4\u62a4\u7684 LCA \u5904\u7684\u70b9\u503c\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n + q(\\log n + \\log q))$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\n\ntypedef struct {\n\tint nxt;\n\tint start;\n\tint end;\n\tint dis;\n\tint cost;\n} Edge;\n\ntypedef struct {\n\tint id;\n\tint v;\n\tint x;\n} Query;\n\nint cnt = 0;\nint root[400007], happy[400007], cur_lca[400007], e[200007], fa[400007][27], head[400007], val[400007], depth[400007], ansa[200007], ansb[200007];\nEdge edge1[200007], edge2[400007];\nQuery query[200007];\n\nbool operator <(const Query a, const Query b){\n\treturn a.v > b.v;\n}\n\ninline void init(int n){\n\tfor (register int i = 1; i <= n; i++){\n\t\troot[i] = happy[i] = cur_lca[i] = i;\n\t}\n}\n\ninline int read(){\n\tint ans = 0;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9'){\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9'){\n\t\tans = ans * 10 + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn ans;\n}\n\nbool cmp1(const Edge a, const Edge b){\n\treturn a.cost < b.cost;\n}\n\nint get_root(int x){\n\tif (root[x] == x) return x;\n\treturn root[x] = get_root(root[x]);\n}\n\ninline void add_edge(int start, int end){\n\tcnt++;\n\tedge2[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge2[cnt].end = end;\n}\n\nvoid dfs(int u){\n\tint t;\n\tdepth[u] = depth[fa[u][0]] + 1;\n\tt = log2(depth[u]);\n\tfor (register int i = 1; i <= t; i++){\n\t\tfa[u][i] = fa[fa[u][i - 1]][i - 1];\n\t}\n\tfor (register int i = head[u]; i != 0; i = edge2[i].nxt){\n\t\tdfs(edge2[i].end);\n\t}\n}\n\nbool cmp2(const Edge a, const Edge b){\n\treturn a.dis > b.dis;\n}\n\ninline int lca(int u, int v){\n\tif (u == 0) return v;\n\tif (v == 0) return u;\n\tif (depth[u] < depth[v]) swap(u, v);\n\twhile (depth[u] > depth[v]) u = fa[u][(int)log2(depth[u] - depth[v])];\n\tif (u == v) return u;\n\tfor (register int i = log2(depth[u]); i >= 0; i--){\n\t\tif (fa[u][i] != fa[v][i]){\n\t\t\tu = fa[u][i];\n\t\t\tv = fa[v][i];\n\t\t}\n\t}\n\treturn fa[u][0];\n}\n\ninline void merge(int x, int y){\n\tint x_root = get_root(x), y_root = get_root(y);\n\tif (x_root != y_root){\n\t\troot[y_root] = x_root;\n\t\tif (e[happy[x_root]] < e[happy[y_root]]){\n\t\t\te[happy[x_root]] = e[happy[y_root]];\n\t\t\tcur_lca[x_root] = cur_lca[y_root];\n\t\t} else if (e[happy[x_root]] == e[happy[y_root]]){\n\t\t\tcur_lca[x_root] = lca(cur_lca[x_root], cur_lca[y_root]);\n\t\t}\n\t}\n}\n\nint main(){\n\tint n = read(), q = read(), m = n;\n\tinit(n * 2 - 1);\n\tfor (register int i = 1; i <= n; i++){\n\t\te[i] = read();\n\t}\n\tfor (register int i = 1; i < n; i++){\n\t\tedge1[i].start = read();\n\t\tedge1[i].end = read();\n\t\tedge1[i].dis = read();\n\t\tedge1[i].cost = read();\n\t}\n\tsort(edge1 + 1, edge1 + n, cmp1);\n\tfor (register int i = 1; i < n; i++){\n\t\tint u = get_root(edge1[i].start), v = get_root(edge1[i].end);\n\t\tm++;\n\t\troot[u] = root[v] = fa[u][0] = fa[v][0] = m;\n\t\tval[m] = edge1[i].cost;\n\t\tadd_edge(m, u);\n\t\tadd_edge(m, v);\n\t}\n\tdfs(m);\n\tfor (int i = 1; i <= q; i++){\n\t\tquery[i].id = i;\n\t\tquery[i].v = read();\n\t\tquery[i].x = read();\n\t}\n\tinit(n);\n\tsort(edge1 + 1, edge1 + n, cmp2);\n\tsort(query + 1, query + q + 1);\n\tfor (register int i = 1, j = 1; i <= q; i++){\n\t\tint x_root;\n\t\twhile (j < n && edge1[j].dis >= query[i].v){\n\t\t\tmerge(edge1[j].start, edge1[j].end);\n\t\t\tj++;\n\t\t}\n\t\tx_root = get_root(query[i].x);\n\t\tansa[query[i].id] = e[happy[x_root]];\n\t\tansb[query[i].id] = val[lca(query[i].x, cur_lca[x_root])];\n\t}\n\tfor (register int i = 1; i <= q; i++){\n\t\tcout << ansa[i] << \" \" << ansb[i] << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1665710264,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1583H \u3010Omkar and Tours\u3011"
    },
    {
        "content": "\u8003\u573a\u4e00\u773c\u53e3\u80e1\u51fa\u6765\u7684 $O((n+q)\\log n)$ \u7684\u5e76\u67e5\u96c6+**\u6811\u5256**+\u865a\u6811\u7684\u505a\u6cd5\uff0c~~\u56e0\u4e3a\u5728\u8003\u573a\u4e0a\u4e0d\u60f3\u6253 LCT \u4e8e\u662f\u8fd9\u4e2a\u505a\u6cd5\u6ca1\u6709 LCT~~\u3002\n\n\u7531\u4e8e\u662f\u53e3\u80e1\u7684\u53ef\u80fd\u6709\u5f88\u591a\u5730\u65b9\u5b9e\u73b0\u8d39\u62c9\u4e0d\u582a\uff0c\u8fd8\u8bf7\u53ca\u65f6\u6307\u51fa\u3002\n\n------------\n\n\u4ee5\u4e0b\u7528\u8fb9\u91cd\u548c\u8fb9\u6743\u6765\u533a\u5206\u9650\u91cd\u5927\u5c0f\u548c\u8fb9\u6743\u5927\u5c0f\u3002\n\n\u9996\u5148\u5c06\u8fb9\u6309\u8fb9\u91cd\u4ece\u5927\u5230\u5c0f\u52a0\u5165\uff0c\u5e76\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u5185\u7684\u70b9\u6743\u6700\u5927\u503c\uff0c\u800c\u8fd9\u4e2a\u6700\u5927\u503c\u53ef\u80fd\u6709\u5f88\u591a\u4e2a\u70b9\uff0c\u6211\u4eec\u53ea\u8bb0\u5f55\u4e00\u4e2a\u70b9\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u6211\u4eec\u53ef\u4ee5\u5728\u5bf9\u5e94\u7684\u65f6\u523b\u627e\u5230\u5176\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u5927\u70b9\u6743\uff0c\u540c\u65f6\u8bb0\u5f55\u5176\u4e2d\u4e00\u4e2a\u70b9\u4ee5\u5907\u540e\u7528\u3002\n\n\u8fd9\u91cc\u663e\u7136\u662f $O(n\\log n+(n+q)\\alpha(n))$ \u7684\u3002\n\n------------\n\n\u5c06\u6bcf\u4e2a\u8be2\u95ee\u6302\u5728\u5176\u5bf9\u5e94\u7684\u6700\u5927\u70b9\u6743\u4e0a\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u79cd\u6743\u503c\u7684\u6240\u6709\u70b9\uff0c\u6211\u4eec\u5728\u6b64\u79f0\u5176\u4e3a\u5173\u952e\u70b9\uff0c\u5efa\u865a\u6811\uff0c\u7528\u4e8e\u5904\u7406\u8be2\u95ee\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u6c42\u51fa\u865a\u6811\u4e0a\u76f8\u90bb\u70b9\u4e4b\u95f4\u7684\u8fb9\u91cd\u548c\u8fb9\u6743\uff0c\u5bf9\u5e94\u5230\u6811\u4e0a\u5c31\u662f\u4e00\u6bb5\u6c42\u5230\u7956\u5148\u7684\u8def\u5f84\u6700\u5927\u503c\uff0c\u7cbe\u7ec6\u5b9e\u73b0\u4e00\u4e0b\u53ef\u4ee5\u505a\u5230\u5355\u6b21 $O(\\log n)$\u3002\n\n\u7531\u4e8e\u865a\u6811\u603b\u5927\u5c0f\u662f $O(n)$ \u7684\uff0c\u800c\u6c42\u4e00\u6761\u8fb9\u53c8\u662f $O(\\log n)$\uff0c\u6545\u6b64\u5904\u590d\u6742\u5ea6\u5e76\u4e0d\u8d85\u8fc7 $O(n\\log n)$\u3002\n\n------------\n\n\u8fd9\u91cc\u63d0\u4e00\u5634\u600e\u4e48\u6811\u5256\u7cbe\u7ec6\u5b9e\u73b0\u5355 $\\log$\uff0c\u77e5\u9053\u7684\u8bf7\u8df3\u8fc7\uff0c\u7b97\u662f\u4e2a\u5c0f trick\u3002\n\n\u4e00\u6761\u5230\u7956\u5148\u7684\u94fe\u4f1a\u88ab\u62c6\u6210 $O(\\log n)$ \u6761\u91cd\u94fe\u4e0a\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u66f4\u5177\u4f53\u7684\uff0c\u662f $O(\\log n)$ \u4e2a\u91cd\u94fe\u524d\u7f00\u8be2\u95ee\u548c $1$ \u4e2a\u91cd\u94fe\u533a\u95f4\u8be2\u95ee\uff0c\u800c\u524d\u7f00\u8be2\u95ee\u53ef\u4ee5\u9884\u5904\u7406\u540e $O(1)$ \u5f97\u5230\uff0c\u6545\u53ef\u4ee5\u5728\u5355\u6b21 $O(\\log n)$ \u5f97\u5230\u6700\u5927\u503c\u3002\n\n------------\n\n\u7136\u540e\u6211\u4eec\u8fd8\u662f\u6309\u8fb9\u91cd\u4ece\u5927\u5230\u5c0f\u5c06\u865a\u6811\u8fb9\u52a0\u5165\u5230\u865a\u6811\u4e2d\uff0c\u5e76\u518d\u6b21\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u7684\u6700\u5927\u8fb9\u6743\u3002\n\n**\u6ce8\u610f**\uff1a\u8fd9\u91cc\u5408\u5e76\u8fb9\u6743\u7684\u65f6\u5019\u8981\u6ce8\u610f\u7ec6\u8282\uff0c\u5982\u679c\u53ea\u662f\u67d0\u4e2a LCA \u800c\u6ca1\u6709\u63a5\u5230\u5173\u952e\u70b9\u4e0a\u5e94\u8be5\u8ba9 LCA \u5148\u6302\u5728\u5173\u952e\u70b9\u5e76\u67e5\u96c6\u7684\u4e0b\u9762\uff0c\u540e\u9762\u6709\u5173\u952e\u70b9\u901a\u8fc7\u8fd9\u4e2a LCA \u5e76\u8fdb\u6765\u7684\u65f6\u5019\u518d\u628a\u8fb9\u6743\u4fe1\u606f\u5408\u5e76\u3002\n\n\u7136\u540e\u5728\u5bf9\u5e94\u65f6\u523b\u5904\u7406\u8be2\u95ee\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u8be2\u95ee\u7684\u6700\u5927\u8fb9\u6743\u5c31\u662f\u8fde\u901a\u5757\u5185\u7684\u6700\u5927\u8fb9\u6743\u548c**\u8be2\u95ee\u70b9\u63a5\u5230\u8fde\u901a\u5757\u7684\u90a3\u6bb5\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743**\u53d6 $\\max$\u3002\n\n\u8fde\u901a\u5757\u7684\u6700\u5927\u8fb9\u6743\u5df2\u7ecf\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u51fa\u6765\u4e86\uff0c\u4e8e\u662f\u8003\u8651\u53e6\u4e00\u4e2a\u6700\u5927\u8fb9\u6743\u3002\n\n\u6211\u4eec\u7684\u76ee\u6807\u8f6c\u5316\u4e3a\u627e\u5230\u8be2\u95ee\u70b9\u5230\u67d0\u65f6\u523b\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u8def\u5f84\u6700\u5927\u8fb9\u6743\uff0c\u53d1\u73b0**\u8be2\u95ee\u70b9\u5230\u4efb\u610f\u4e00\u4e2a\u5173\u952e\u70b9\u7684\u8def\u5f84\u5fc5\u5b9a\u5305\u542b\u4e86\u6240\u9700\u7684\u8fd9\u6761\u8def\u5f84**\uff08\u5176\u5b9e\u662f\u4e2a\u5e38\u7528 trick \u6765\u7740\uff09\u3002\n\n\uff08\u9644\uff1a\u6709\u4e00\u79cd\u518d\u5efa\u4e00\u68f5\u865a\u6811\u5e76\u5bf9\u5176\u6811\u5256\u7136\u540e\u4ecd\u7136\u662f $O(\\log)$ \u80fd\u591f\u7cbe\u786e\u5730\u627e\u5230\u8fd9\u6bb5\u8def\u5f84\u7684\u529e\u6cd5\uff0c\u7531\u4e8e\u5199\u4e86\u53ef\u80fd\u5c31\u4e0a 7k \u4e86\uff0c\u4e0d\u518d\u8d58\u8ff0\uff09\n\n\u4e8e\u662f\u6211\u4eec\u968f\u4fbf $O(\\log)$ \u8be2\u95ee\u5230\u67d0\u4e2a\u5173\u952e\u70b9\u7684\u8def\u5f84\u53d6\u4e2a $\\max$ \u5373\u53ef\uff0c\u8fd9\u91cc\u53ef\u4ee5\u7528\u6211\u4eec\u4e00\u5f00\u59cb\u5c31\u7528\u5e76\u67e5\u96c6\u627e\u5230\u7684\u67d0\u4e00\u4e2a\u70b9\u3002\n\n\u81f3\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u5b8c\u5b8c\u5168\u5168\u5728 $O((n+q)(\\log(n+q)+\\alpha(n)))$ \u7684\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u9053\u9898\u3002\n\n\u8fd9\u79cd\u79bb\u5947\u7684\u5b9e\u73b0\u65b9\u6cd5\u5e38\u6570\u5e94\u8be5\u4e0d\u5927\uff08\u552f\u4e00\u7684\u5919\u613f\u5c31\u662f\u8dd1\u5f97\u6bd4 LCT \u5feb\uff09\u3002",
        "postTime": 1634519921,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "CF1583H Omkar and Tours"
    }
]