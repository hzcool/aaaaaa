[
    {
        "content": "\u611f\u89c9\u8fd9\u9053\u7f51\u7edc\u6d41\u7684\u5efa\u56fe\u662f\u86ee\u96be\u5199\u7684\uff0c\u9664\u6b64\u4e4b\u5916\u96be\u5ea6\u4e0d\u5927\u3002\n\n\u9898\u610f\u7b80\u5355\u6765\u8bb2\u662f\uff0c\u6709\u4e00\u4e2a $n \\times n$ \u7684\u7f51\u683c\uff0c\u4e0a\u6709\u4e00\u4e9b\u4eba\uff08\u5728\u7b2c\u4e00\u4e2a\u77e9\u9635\u4e2d\u7528 $\\texttt{0}$ ~ $\\texttt{9}$\u8868\u793a\uff09\uff0c\u4e00\u4e9b\u5899\uff08\u7528 $\\texttt{Y}$ \u8868\u793a\uff09\uff0c\u4e00\u4e2a\u521d\u59cb\u7684\u6bd2\u6c14\u70b9\uff08\u7528 $\\texttt{Z}$ \u8868\u793a\uff09\uff0c\u4e00\u4e9b\u6551\u63f4\u4ed3\uff08\u5728\u7b2c\u4e8c\u4e2a\u77e9\u9635\u4e2d\u7528 $\\texttt{0}$ ~ $\\texttt{9}$\u8868\u793a\uff09\u3002\u8fd9\u662f\u65f6\u95f4\u4e3a $0$ \u65f6\u7684\u72b6\u51b5\uff0c\u5728\u4e4b\u540e\u7684\u65f6\u95f4\u4e2d\uff0c\u6bcf\u4e2a\u4eba\u53ef\u4ee5\u9009\u62e9\u4e0d\u52a8\u6216\u662f\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\uff0c\u79fb\u52a8\u540e\u6bd2\u6c14\u4e0a\u4e0b\u5de6\u53f3\u8513\u5ef6\u4e00\u683c\uff0c\u4f1a\u88ab\u5899\u6321\u4f4f\u3002\u5728\u6709\u6551\u63f4\u4ed3\u7684\u683c\u5b50\u4e2d\uff0c\u4eba\u53ef\u4ee5\u8eb2\u8fdb\u7a7a\u7684\u6551\u63f4\u4ed3\u4e2d\uff08\u6bcf\u4e2a\u6551\u63f4\u4ed3\u6700\u591a\u4e00\u4e2a\u4eba\uff09\uff0c\u6551\u63f4\u4ed3\u53ef\u4ee5\u4f7f\u4eba\u514d\u53d7\u6bd2\u6c14\u3002\u5728\u65f6\u95f4 $t$ \u540e\u6574\u4e2a\u7f51\u683c\u4f1a\u7206\u70b8\uff0c\u4e0d\u5728\u6551\u63f4\u4ed3\u5185\u7684\u90fd\u4f1a\u6b7b\u3002\u6c42\u6700\u591a\u53ef\u4ee5\u6d3b\u4e0b\u591a\u5c11\u4eba\u3002\n\n\u56e0\u4e3a\u6709\u590d\u6742\u7684\u5206\u914d\u4e0e\u9009\u62e9\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u81ea\u7136\u60f3\u5230\u7f51\u7edc\u6d41\u3002\u628a\u4eba\u770b\u4f5c\u6d41\u91cf\u540e\uff0c\u5c31\u53d8\u6210\u4e86\u6700\u5927\u6d41\u95ee\u9898\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u95f4\u5efa\u4e00\u5c42\u3002\n\n\u9996\u5148\u521d\u59cb\u7684\u60c5\u51b5\uff0c\u8981\u5c06\u6240\u6709\u6709\u4eba\u7684\u70b9\u4ece\u6e90\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u4eba\u6570\u7684\u8fb9\u3002\n\n\u7136\u540e\u5c31\u662f\u5c42\u4e0e\u5c42\u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u8fd9\u91cc\u9700\u8981\u4ed4\u7ec6\u8003\u8651\uff0c\u679a\u4e3e\u56fe\u4e2d\u4e24\u4e2a\u76f8\u90bb\u7684\u70b9\uff0c\u6839\u636e\u9898\u610f\uff0c\u5982\u679c\u4e24\u8005\u4e2d\u6709\u4e00\u4e2a\u662f\u5899\u6216\u662f\u73b0\u5728\u6709\u6bd2\u7684\u8bdd\uff0c\u4e0d\u80fd\u8fde\u8fb9\uff08\u4e5f\u5c31\u662f\u4eba\u6b7b\u4e86\uff0c\u65e0\u6cd5\u5728\u8fd9\u5176\u4e2d\u79fb\u52a8\uff09\uff0c\u5426\u5219\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u65e0\u7a77\u7684\u8fb9\u3002\u4e3a\u4e86\u4fdd\u5b58\u6551\u63f4\u4ed3\u5185\u7684\u4eba\uff0c\u8bb0\u5f97\u65e0\u8bba\u662f\u5426\u6709\u6bd2\uff0c\u90fd\u8981\u5c06\u4e0a\u4e00\u4e2a\u65f6\u95f4\u7684\u81ea\u5df1\u5411\u81ea\u5df1\u8fde\u8fb9\u3002\u5bf9\u4e8e\u6709\u6bd2\u7684\u70b9\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981\u7528\u5f88\u806a\u660e\u7684\u529e\u6cd5\u5904\u7406\uff0c\u6211\u7528\u4e86```set```\u53bb\u5904\u7406\u8fd9\u4e9b\u70b9\uff0c\u6bcf\u6b21\u5411\u4e0a\u4e0b\u5de6\u53f3\u52a0\u5165\u65b0\u6709\u6bd2\u7684\u70b9\u7684\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6700\u7ec8\u7edf\u8ba1\uff0c\u7206\u70b8\u5176\u5b9e\u5c31\u662f\u53ea\u4fdd\u7559\u6551\u63f4\u4ed3\u5185\u7684\uff0c\u6240\u4ee5\u5c06\u6240\u6709\u6551\u63f4\u4ed3\u5185\u7684\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u6551\u63f4\u4ed3\u5bb9\u91cf\u7684\u8fb9\u5373\u53ef\uff0c\u4e5f\u5c31\u662f\u8d85\u51fa\u5bb9\u91cf\u7684\u4eba\u90fd\u4f1a\u6b7b\u3002\n\n\u5efa\u56fe\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u7b54\u6848\u5c31\u51fa\u6765\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n#define sz(x) ((int)x.size())\n#define all(x) x.begin(),x.end()\n#define rall(x) x.rbegin(),x.rend()\n#define odd(x) ((x)&1)\n#define even(x) (!odd(x))\n\ntemplate<class T>bool chkmax(T &a,T b){return b>a?a=b,true:false;}\ntemplate<class T>bool chkmin(T &a,T b){return b<a?a=b,true:false;}\n\nconstexpr int inf=2e18;\n\nstruct MaxFlow{\n\tstruct edge{\n\t\tint v,c;\n\t\tedge(int v,int c):v(v),c(c){}\n\t};\n\tvector<edge>e;\n\tvector<vector<int>>adj;\n\tvector<int>dis;\n\tvector<int>cur;\n\tint S,T;\n\tMaxFlow(int n):adj(n),dis(n),cur(n){}\n\tvoid add_edge(int u,int v,int c){\n\t\tadj[u].push_back(sz(e));\n\t\te.emplace_back(v,c);\n\t\tadj[v].push_back(sz(e));\n\t\te.emplace_back(u,0);\n\t}\n\tvoid bfs(){\n\t\tfill(all(dis),inf);\n\t\tdis[S]=0;\n\t\tqueue<int>q;\n\t\tq.push(S);\n\t\twhile(!q.empty()){\n\t\t\tint u=q.front();\n\t\t\tq.pop();\n\t\t\tfor(int i=0;i<sz(adj[u]);i++){\n\t\t\t\tauto[v,c]=e[adj[u][i]];\n\t\t\t\tif(c>0&&chkmin(dis[v],dis[u]+1)){\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint dfs(int u,int f){\n\t\tif(u==T){\n\t\t\treturn f;\n\t\t}\n\t\tfor(int &i=cur[u];i<sz(adj[u]);i++){\n\t\t\tauto&[v,c]=e[adj[u][i]];\n\t\t\tif(c&&dis[u]+1==dis[v]){\n\t\t\t\tint t=dfs(v,min(f,c));\n\t\t\t\tif(t){\n\t\t\t\t\tc-=t;\n\t\t\t\t\te[adj[u][i]^1].c+=t;\n\t\t\t\t\treturn t;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdis[v]=inf;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tint max_flow(int s,int t){\n\t\tthis->S=s,this->T=t;\n\t\tint flow=0;\n\t\twhile(true){\n\t\t\tbfs();\n\t\t\tif(dis[t]==inf){\n\t\t\t\treturn flow;\n\t\t\t}\n\t\t\tfill(all(cur),0);\n\t\t\tint f;\n\t\t\twhile(f=dfs(s,inf)){\n\t\t\t\tflow+=f;\n\t\t\t}\n\t\t}\n\t}\n};\n\nvoid solve(){\n\tint n,m; // \u4e0e\u6c47\u70b9\u533a\u5206\n\tcin>>n>>m;\n\tvector<string>a(n);\n\tfor(int i=0;i<n;i++){\n\t\tcin>>a[i];\n\t}\n\tvector<string>b(n);\n\tfor(int i=0;i<n;i++){\n\t\tcin>>b[i];\n\t}\n\tMaxFlow G(n*n*(m+1)+2);\n\tint s=n*n*(m+1),t=s+1;\n\tauto id=[&](int i,int j){\n\t\treturn i*n+j;\n\t};\n\tfor(int i=0;i<n;i++){\n\t\tfor(int j=0;j<n;j++){\n\t\t\tif(isdigit(a[i][j])){\n\t\t\t\tG.add_edge(s,id(i,j),a[i][j]-'0');\n\t\t\t}\n\t\t}\n\t}\n\tset<pair<int,int>>poison;\n\tfor(int i=0;i<n;i++){\n\t\tfor(int j=0;j<n;j++){\n\t\t\tif(a[i][j]=='Z'){\n\t\t\t\tpoison.emplace(i,j);\n\t\t\t}\n\t\t}\n\t}\n\tauto valid=[&](int x,int y){\n\t\treturn x>=0&&x<n&&y>=0&&y<n;\n\t};\n\tvector<int>dx={1,-1,0,0},dy={0,0,1,-1};\n\tfor(int time=1;time<=m;time++){\n\t\tfor(int x=0;x<n;x++){\n\t\t\tfor(int y=0;y<n;y++){\n\t\t\t\tG.add_edge((time-1)*n*n+id(x,y),time*n*n+id(x,y),inf);\n\t\t\t\tif(poison.count({x,y})||a[x][y]=='Y'){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor(int i=0;i<4;i++){\n\t\t\t\t\tint vx=x+dx[i],vy=y+dy[i];\n\t\t\t\t\tif(!valid(vx,vy)){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(poison.count({vx,vy})||a[vx][vy]=='Y'){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tG.add_edge((time-1)*n*n+id(vx,vy),time*n*n+id(x,y),inf);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tset<pair<int,int>>nxt;\n\t\tfor(auto[x,y]:poison){\n\t\t\tnxt.emplace(x,y);\n\t\t\tfor(int i=0;i<4;i++){\n\t\t\t\tint vx=x+dx[i],vy=y+dy[i];\n\t\t\t\tif(!valid(vx,vy)){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(a[vx][vy]!='Y'){\n\t\t\t\t\tnxt.emplace(vx,vy);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tswap(poison,nxt);\n\t}\n\tfor(int i=0;i<n;i++){\n\t\tfor(int j=0;j<n;j++){\n\t\t\tif(isdigit(b[i][j])){\n\t\t\t\tG.add_edge(m*n*n+id(i,j),t,b[i][j]-'0');\n\t\t\t}\n\t\t}\n\t}\n\tcout<<G.max_flow(s,t)<<\"\\n\";\n}\n\nsigned main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\tcout.tie(nullptr);\n\tsolve();\n\treturn 0;\n}\n```\n",
        "postTime": 1678106685,
        "uid": 206052,
        "name": "Faccirx",
        "ccfLevel": 5,
        "title": "CF78E-Evacuation\u9898\u89e3"
    },
    {
        "content": "\u4e00\u5f00\u59cb\u6211\u60f3\u5230\u4e86\u4e00\u4e2a\u66b4\u529b\u5efa\u56fe+\u7f51\u7edc\u6d41\u65b9\u6cd5\uff0c\uff0c\u7136\u540e\u770b\u5230\u4e86\u90a3\u6781\u5c0f\u6570\u636e\u8303\u56f4\uff0c\uff0c\uff0c\u7136\u540e\u5c31\u4fe1\u5fc3\u6ee1\u6ee1\u7684\u6253\uff0c\uff0c\uff0c\u7136\u540e\u5c31\u8fc7\u4e86\u3002\u3002\u6211\u8fd9\u4e48\u5f31\u7684\u4eba\u90fd\u80fd\u8fd9\u4e48\u6c34\u8fc7\u8fd9\u9053\u9898\uff0c\u8bf4\u660e\u8fd9\u9898\u771f\u7684\u4e0d\u96be\u3002\u3002\u3002\n\n---\n\n\u5207\u5165\u6b63\u9898\u3002\n\n1. \u5206\u6790\u6570\u636e\n\t\n    \u6211\u4eec\u53ef\u4ee5\u5c06```\u4e00\u4e2a\u79d1\u5b66\u5bb6\u53ef\u4ee5\u5728t\u5206\u949f\u4e4b\u5185\u4ece(x0,y0)\u79fb\u52a8\u5230(x1,y1)```\u4f5c\u4e3a```(x0,y0)\u5728t\u65f6\u523b\u8054\u901a```\u3002\n    \n2. \u5efa\u56fe\n\n\t\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u7f51\u683c\u56fe\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u5c06\u5176\u8f6c\u5316\u4e00\u4e0b\u3002\u6211\u4eec\u6784\u9020\u6709\u4e00\u4e2a\u6e90\u70b9\uff0c\u4e00\u4e2a\u6c47\u70b9\uff0c\u4e2d\u95f4\u6709\u4e24\u4e2a\u5c42\uff0c\u6bcf\u5c42$n^2$\u4e2a\u8282\u70b9\u7684\u56fe\u3002\u5c06\u6bcf\u4e2a\u70b9\u5728\u5f00\u59cb\u65f6\u7684\u79d1\u5b66\u5bb6\u6570\u91cf\u4f5c\u4e3a\u6e90\u70b9\u5230\u8fd9\u4e2a\u70b9\u5728\u7b2c\u4e00\u5c42\u76f8\u5e94\u8282\u70b9\u7684\u8fb9\u7684\u6d41\u91cf\u3002\u5c06\u6bcf\u4e2a\u70b9\u5f00\u59cb\u65f6\u7684\u80f6\u56ca\u6570\u91cf\u4f5c\u4e3a\u8fd9\u4e2a\u70b9\u5728\u7b2c\u4e8c\u5c42\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u5230\u6c47\u70b9\u7684\u8fb9\u7684\u6d41\u91cf\u3002\u82e5(x0,y0)\u548c(x1,y1)\u5728\u67d0\u4e00\u65f6\u523b\u662f\u8054\u901a\u7684\uff0c\u5219\u5c06(x0,y0)\u5728\u7b2c\u4e00\u5c42\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u548c(x1,y1)\u5728\u7b2c\u4e8c\u5c42\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u6b63\u65e0\u7a77\u7684\u8fb9\u3002\n    \n3. \u6c42\u89e3\n\n\temmm...\u5728\u6211\u4eec\u6784\u5efa\u7684\u65b0\u56fe\u4e0a\u8dd1\u4e00\u904d\u7f51\u7edc\u6700\u5927\u6d41\uff0c\u6700\u5927\u6d41\u5373\u4e3a\u7b54\u6848\u3002\u7136\u800c\uff0c\u6839\u636e\u76f8\u5173\u6cd5\u5f8b\u6cd5\u89c4\uff0c\u7f51\u7edc\u6d41\u9898\u4e0d\u5141\u8bb8\u5361Dinic/ISAP/HLPP\uff0c\u4f46\u53ef\u4ee5\u5361EK\uff0c\u6240\u4ee5\u8fd8\u662f\u522b\u7528EK\u597d\u3002\n    \n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 210;\n\nchar a[maxn][maxn],ss[maxn][maxn],can[maxn][maxn][2];\nint och[200][2],was[maxn][maxn],n,q[maxn][maxn];\n\nvoid bfs(int x, int y, int t) {\n    int b,e;\n    b=e=1;\n    och[b][0] = x;\n    och[b][1] = y;\n    int dx[4]={0,1,0,-1};\n    int dy[4]={1,0,-1,0};\n    int tx,ty,i,j;\n    for (i=0;i<n;++i)\n        for( j=0;j<n;++j)\n            was[i][j] = -1;\n    was[x][y]=0;\n    while (b<=e) {\n        x= och[b][0];\n        y= och[b][1];\n        if (was[x][y]==t) {\n            ++b;\n            continue;\n        }\n        for (i=0;i<4;++i) {\n            tx = x + dx[i];\n            ty = y + dy[i];\n            if (tx <0 || tx >=n || ty <0 || ty >= n || a[tx][ty]=='Y')\n                continue;\n            if (was[tx][ty]==-1) {\n                was[tx][ty] = was[x][y] + 1;\n                och[++e][0] = tx;\n                och[e][1] = ty;\n            }\n        }\n        ++b;\n    }\n}\n\nstruct edge{\n    int to;\n    int cap;\n};\n\nvector <edge> e;\nvector <int> v[maxn];\nint flag[maxn]={0},pos[maxn]={0};\n\nvoid addE(int from, int to, int d){\n    edge ee;\n    ee.to=to;\n    ee.cap=d;\n    e.push_back(ee);\n    v[from].push_back(e.size()-1);\n    ee.to=from;\n    ee.cap=0;\n    e.push_back(ee);\n    v[to].push_back(e.size()-1);\n}\n\nint s,t,mn;\n\nbool dfs(int w){\n    int i,reb,u,tmp;\n    flag[w]=1;\n    if (w==t)\n        return true;\n    for (i=pos[w];i<v[w].size();i++){\n        reb=v[w][i];\n        u=e[reb].to;\n        tmp=mn;\n        if (e[reb].cap>0 && e[reb].cap<mn)\n            mn=e[reb].cap;\n        if (e[reb].cap>0 && (flag[u]==0 && dfs(u))){\n            e[reb].cap-=mn;\n            e[reb^1].cap+=mn;\n            pos[w]=i+1;\n            return true;\n        }\n        mn=tmp;\n    }\n    for (i=0;i<pos[w];i++){\n        reb=v[w][i];\n        u=e[reb].to;\n        if (e[reb].cap>0 && (flag[u]==0 && dfs(u))){\n            e[reb].cap-=mn;\n            e[reb^1].cap+=mn;\n            pos[w]=i+1;\n            return true;\n        }\n    }\n    return false;\n}\n\nconst int inf = 0x3f3f3f3f;\n\nint flow(){\n    int i,fl=1,res=0;\n    while (fl){\n        fl=0;\n        for (i=0;i<=t;i++){\n            flag[i]=0;\n            pos[i]=0;\n        }\n        while (1){\n            mn=inf;\n            if (!dfs(s))\n                break;\n            fl=1;\n            flag[s]=flag[t]=0;\n            res+=mn;\n        }\n    }\n    return res;\n}\n\nvoid bfs2(int x, int y, int t) {\n    int fx,fy;\n    fx = x;\n    fy = y;\n    int cap = a[x][y] - '0';\n    int b,e;\n    b=e=1;\n    och[b][0] = x;\n    och[b][1] = y;\n    int dx[4]={0,1,0,-1};\n    int dy[4]={1,0,-1,0};\n    int tx,ty,i,j;\n    for (i=0;i<n;++i)\n        for( j=0;j<n;++j)\n            q[i][j] = -1;\n    q[x][y]=0;\n    addE(fx*n+fy,fx*n+fy+n*n,cap);\n    while (b<=e) {\n        x= och[b][0];\n        y= och[b][1];\n        if (q[x][y]==t || q[x][y]==was[x][y]) {\n            ++b;\n            continue;\n        }\n        for (i=0;i<4;++i) {\n            tx = x + dx[i];\n            ty = y + dy[i];\n            if (tx <0 || tx >=n || ty <0 || ty >= n || a[tx][ty]=='Z' || a[tx][ty]=='Y')\n                continue;\n            if (q[tx][ty]==-1 && (q[x][y]+1 <= was[tx][ty] || was[tx][ty]==-1)) {\n                q[tx][ty] = q[x][y] + 1;\n                addE(fx*n+fy,tx*n+ty+n*n,cap);\n                och[++e][0] = tx;\n                och[e][1] = ty;\n            }\n        }\n        ++b;\n    }\n}\n\nint main(){\n    int T,i,j,x,y;\n    cin >> n >> T;\n    for (i=0;i<n;++i) {\n        for (j=0;j<n;++j) {\n            cin >> a[i][j];\n            if (a[i][j]=='Z') {\n                x = i;\n                y = j;\n            }\n        }\n    }\n    for (i=0;i<n;++i) {\n        for (j=0;j<n;++j)\n            cin >> ss[i][j];\n    }\n    bfs(x,y,T);\n    for (i=0;i<n;++i){\n        for (j=0;j<n;++j){\n            if (a[i][j] >='0' && a[i][j] <='9') {\n                bfs2(i,j,T);\n            }\n        }\n    }\n    s = n * n * 2 + 1;\n    t = n * n * 2 + 2;\n    for (i=0;i<n;++i) {\n        for (j=0;j<n;++j) {\n            if (a[i][j]>='0' && a[i][j] <='9')\n                addE(s,i*n+j,a[i][j]-'0');\n            if (ss[i][j] >='1' && ss[i][j] <='9')\n                addE(i*n+j+n*n,t,ss[i][j]-'0');\n        }\n    }\n    int res = flow();\n    cout << res;\n    return 0;\n}\n```\n\n\u8fd9\u4e48\u6c34\u7684\u9898\u5c31\u4e0d\u8981\u6284\u9898\u89e3\u4e86\u5427 QAQ",
        "postTime": 1544449789,
        "uid": 119553,
        "name": "rEdWhitE_uMbrElla",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF78E \u3010Evacuation\u3011"
    }
]