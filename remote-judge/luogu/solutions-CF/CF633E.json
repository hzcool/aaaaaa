[
    {
        "content": "# \u8d85\u7ea7~~\u6c34~~(nan)\u9898\n\n## \u7b80\u7565\u601d\u8def\uff1a\n\n>**\u7b2c\u4e00\u6b65\uff1a\u6c42\u51fa\u4e0a\u9762\u5b9a\u4e49\u7684Q[L]\u6570\u7ec4**\n\n>**\u7b2c\u4e8c\u6b65\uff1a\u5c06Q\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002**\n\n>**\u7b2c\u4e09\u6b65\uff1a\u8ba1\u7b97\u6982\u7387\uff0c\u5229\u7528\u4e0b\u9762\u7684\u516c\u5f0f\uff1a**\n\n\u516c\u5f0f\u7684\u89e3\u91ca\uff0c\u5bf9\u4e8eQ[t]\uff0c\u5728Q[t]\u53f3\u8fb9\u7684\u6570\u6709n-t\u4e2a\uff0c\u5047\u8bbeQ[t]\u8981\u4f5c\u4e3ak\u4e2a\u6570\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u5176\u4f59\u7684k-1\u4e2a\u6570\u90fd\u5fc5\u987b\u5728\u5b83\u53f3\u8fb9\uff0c\n\n\u6240\u4ee5\u5728n-t\u4e2a\u6570\u4e2d\u53d6k-1\u4e2a\u6570\u7684\u6bcf\u79cd\u65b9\u6848\u4e2d\uff0c\u90fd\u8981\u8ba1\u7b97\u4e00\u6b21Q[t],\u6700\u540e\u518d\u9664\u4ee5\u603b\u7684\u65b9\u6848\u6570n\u4e2d\u9009k\u3002\n\n\n\n## \u7b2c\u4e00\u6b65\uff1a\u6c42Q\u6570\u7ec4\n\n\u4e3a\u4e86\u7701\u4e8b\uff0c\u76f4\u63a5\u8ba9\u6240\u6709\u7684V\u90fd\u4e58\u4e0a\u4e86100\uff0c\u6240\u4ee5\u516c\u5f0f\u53d8\u4e3a\uff1ap(L,R)=min(max(\u533a\u95f4\u5185\u7684V),min(\u533a\u95f4\u5185\u7684C))\u3002\n\n\u5bb9\u6613\u770b\u5230\uff0c\u5bf9\u4e8e\u6bcf\u4e2aL\uff0c\u5728R\u6162\u6162\u589e\u52a0\u7684\u60c5\u51b5\u4e0b\uff0cp(L,R)\u5148\u589e\u540e\u51cf\uff08\u4e5f\u6709\u53ef\u80fd\u53ea\u589e\u6216\u53ea\u51cf\uff09\uff0c\u6240\u4ee5\u4e8c\u5206\u6cd5\u53ef\u4ee5\u6c42\u51fa\u6700\u5927p\u503c\u3002\n\n\u4f46\u8981\u6ce8\u610f\uff0c\u4e0d\u80fd\u7528p\u503c\u7684\u5927\u5c0f\u4f5c\u4e3a\u4e8c\u5206\u6cd5\u7684\u5224\u65ad\u91cf\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u5f88\u591a\u4e2aR\uff0cp(L,R)\u7684\u503c\u662f\u4e00\u6837\u7684\uff0c\u800c\u5f53\u4e00\u6837\u65f6\uff0c\u6ca1\u6cd5\u5224\u65ad\u662f\u5728\u4e0a\u5347\u9636\u6bb5\u8fd8\u662f\u5728\u4e0b\u964d\u9636\u6bb5\u3002\n\n\u6240\u4ee5\u4e8c\u5206\u6cd5\u5176\u5b9e\u662f\u5728\u5224\u65admax(\u533a\u95f4\u5185V)\u548cmin(\u533a\u95f4\u5185C)\u8fd9\u4e24\u4e2a\u503c\u54ea\u4e2a\u5c0f\uff0c\u5982\u679cmax(\u533a\u95f4\u5185V)\u5c0f\uff0c\u90a3\u4e48\u5904\u4e8e\u4e0a\u5347\u8d8b\u52bf\uff0c\u5982\u679cmin(\u533a\u95f4\u5185C\uff09\u5c0f\uff0c\u90a3\u4e48\u5904\u4e8e\u4e0b\u964d\u8d8b\u52bf\u3002\n\n\u7528\u4e8c\u5206\u6cd5\u53ef\u4ee5\u627e\u5230\u4e0a\u5347\u8d8b\u52bf\u5230\u4e0b\u964d\u8d8b\u52bf\u7684\u5206\u754c\u7ebf\uff0c\u6211\u7684\u4ee3\u7801\u4e2d\uff0c\u7528\u4e8c\u5206\u6cd5\u627e\u5230\u4e0a\u5347\u90e8\u5206\u7684\u6700\u540e\u4e00\u4e2a\u503c\uff0c\u4f46\u662f\u6b64\u65f6\u4e0b\u964d\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u503c\u4ecd\u7136\u53ef\u80fd\u5927\u4e8e\u4e0a\u5347\u90e8\u5206\u7684\u6700\u540e\u4e00\u4e2a\u503c\uff0c\n\n\u6240\u4ee5\u4e8c\u5206\u6cd5\u6c42\u51fa\u4e0a\u5347\u90e8\u5206\u7684\u6700\u540e\u4e00\u4e2a\u503c\u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u518d\u5f80\u524d\u770b\u4e00\u4e2a\u6570\uff0c\u770b\u4e00\u4e0b\u503c\u662f\u5426\u66f4\u5927\u3002\n\n\n\n\u4e8c\u5206\u6cd5\u7684\u5224\u65ad\u4e2d\uff0c\u9700\u8981\u6c42\u51famax(\u533a\u95f4\u5185V)\u548cmin(\u533a\u95f4\u5185C)\u8fd9\u4e24\u4e2a\u503c\uff0c\u4e8e\u662f\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u8fd9\u4e2a\u503c\u3002\n\n\u65b9\u6cd5\u6709\u4e8c\uff1a\u00a0\n\n> 1.\u975e\u9012\u5f52\u7ebf\u6bb5\u6811 \u00a0\uff08 \u00a043100KB \u00a0\uff0c2.9\u79d2\uff09\u00a0\u00a0\n\n> 2.Sparse Table\u00a0\uff08176100KB \uff0c2.4\u79d2\uff09\n\n\u8865\u5145\uff1aSparse Table\u7684\u67e5\u8be2\u4e2d\u4f1a\u7528\u5230log2\u8fd9\u4e2a\u51fd\u6570\uff0c\u5c06log2\u8fdb\u884c\u9884\u5904\u7406\u4e4b\u540e\uff0c\u67e5\u8be2\u5c31\u662f\u771f\u6b63\u7684O(1)\u4e86\uff0c\u8fd9\u79cd\u505a\u6cd5\u662f\uff1a(180000KB , 1.5\u79d2)\u3002\n\n**\u9898\u76ee\u65f6\u9650\u662f3\u79d2\u3002**\n\n\u975e\u9012\u5f52\u7ebf\u6bb5\u6811O(n)\u5efa\u6811\uff0cO(logn)\u67e5\u8be2\uff0c\u52a0\u4e0a\u4e8c\u5206\u6cd5\u7684O(logn)\uff0c\u6240\u4ee5\u8ba1\u7b97Q\u503c\u7684\u590d\u6742\u5ea6\u662fO(n(logn)^2) \uff0c\u7528\u65f62.9\u79d2\u3002\n\nSparse Table O(nlogn)\u5efa\u8868\uff0c\u7528\u65f62.4\u79d2\uff0c\u9884\u5904\u7406log2\u51fd\u6570\u4e4b\u540e\u67e5\u8be2\u590d\u6742\u5ea6O(1)\uff0c\u7528\u65f61.5\u79d2\u3002\n\nSparse Table\u82b1\u7684\u7a7a\u95f4\u662f\u975e\u9012\u5f52\u7ebf\u6bb5\u6811\u76845\u500d\uff0c\u4e0d\u8fc7\u5feb\u4e86\u5f88\u591a\u3002\n\nSparse Table\u662f\u521a\u521a\u53d1\u73b0\u7684\u5f88\u795e\u5947\u7684\u7b97\u6cd5\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(nlogn),\u67e5\u8be2\u590d\u6742\u5ea6O(1)\uff0c\u7f3a\u70b9\u5c31\u662f\u4e0d\u652f\u6301\u5bf9\u6570\u7ec4\u7684\u5feb\u901f\u4fee\u6539\u3002\n\n\u6240\u4ee5\u4e0d\u9700\u8981\u4fee\u6539\u7684\u533a\u95f4\u6700\u503c\u95ee\u9898\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528Sparse Table\u6765\u89e3\u51b3\u3002\n\n\n\nSparse Table\u7684\u601d\u8def\uff08\u52a8\u6001\u89c4\u5212\uff09\u4ee5\u6700\u5927\u503c\u4e3a\u4f8b\uff1a\n\n\u5efa\u8868\uff1aMax[ i ] [ j ] \u8868\u793a\u533a\u95f4\u00a0[ i , i + 2^j )\u7684\u6700\u503c\u3002\n\n\u9012\u63a8\u5f0f\uff1aMax[ i ][ j ] = max(Max[ i ][ j - 1 ] , Max [i + (1<<(j-1)][ j ] )\u3002\n\n\u6240\u4ee5\u6309\u7167\u9012\u63a8\u5f0f\uff0c\u628a\u6240\u6709\u53ef\u80fd\u7528\u5230\u7684\u533a\u95f4\u7684Max\u8868\u90fd\u5efa\u597d\u3002\n\n\u8fd9\u91cc\u8bf4\u7684\u662f\u6240\u6709\u53ef\u80fd\u7528\u5230\u7684\u533a\u95f4\uff0cMax[ i ][ j ] \u5bf9\u5e94\u7684\u533a\u95f4\u662f[ i , i + 2^j )\uff0c\u6240\u4ee5\u6240\u6709[ i , i + 2^j )\u5728[1,n]\u4ee5\u5185\u7684 i \u548c j \u7684Max\u503c\u90fd\u9700\u8981\u8ba1\u7b97\uff0c\u800c\u5176\u4f59\u7684\u90fd\u4e0d\u9700\u8981\u8ba1\u7b97\u3002\n\n\u4ee3\u7801\u4e2d\u53ea\u8ba1\u7b97\u4e86\u9700\u8981\u7684\u90e8\u5206\uff0c\u5404\u79cd\u6761\u4ef6\u5c31\u662f\u5728\u4fdd\u8bc1\u5bf9\u5e94\u7684\u533a\u95f4\u4e0d\u51fa\u754c\uff08\u51fa\u754c\u7684\u540e\u9762\u4e00\u5b9a\u4e0d\u4f1a\u7528\u5230\uff0c\u6240\u4ee5\u503c\u4e0d\u9700\u8981\u7ba1\uff09\u3002\n\n## \u67e5\u8be2\uff1a\n\n\u67e5\u8be2\u65f6\uff0c\u5047\u8bbe\u67e5\u8be2\u533a\u95f4[s,t],\u90a3\u4e48\u5148\u6c42k\u4f7f\u5f97 (t-s+1)/2 < 2^k <= t-s+1 \u00a0 \u8fd9\u65f6 t = floor(log2(t-s+1))\uff0c\u6b63\u7684double\u8f6c\u6210int\u65f6\u81ea\u52a8\u53d6floor\u6240\u4ee5\u76f4\u63a5\u5f3a\u5236\u8f6c\u6362\u6210int\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6709\u4e86k\u4e4b\u540e\uff0c\u5df2\u7ecf\u77e5\u9053\u4e86\u4eces\u5f00\u59cb2^k\u4e2a\u6570\u7684\u6700\u5927\u503c\uff08\u5373Max[s][k]\uff09\uff0c\u4e5f\u77e5\u9053\u4e86\u4ecet\u5f80\u524d2^k\u4e2a\u6570\u7684\u503c\uff08\u5373Max[t - (1<<k)+1][k]\uff09\u3002\n\n\u53d6\u8fd9\u4e24\u4e2a\u503c\u7684\u6700\u5927\u503c\u5c31\u662f\u533a\u95f4s\u5230t\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u5dee\u4e0d\u591a\u53ef\u4ee5\u7b97\u662fO(1)\u67e5\u8be2\u3002\n\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n//Sparse Table \nint Max[maxn][21];\nint Min[maxn][21];\nvoid BuildSparseTable(){\n\t//\u586b\u597dj=0\u7684\u503c \n\tfor(int i=1;i<=n;++i) Max[i][0]=V[i],Min[i][0]=C[i];\n\t//\u8ba1\u7b97Sparse Table \n\tfor(int j=1;(1<<j) <= n;++j){\n\t\tfor(int i=1;i+(1<<j)-1<=n;++i){\n\t\t\tMax[i][j]=max(Max[i][j-1],Max[i+(1<<(j-1))][j-1]);\n\t\t\tMin[i][j]=min(Min[i][j-1],Min[i+(1<<(j-1))][j-1]);\n\t\t}\n\t}\n}\nvoid Query(int L,int R,int &MaxV,int &MinC){\n\tint k = int(log2(R-L+1.0));\n\tMaxV=max(Max[L][k],Max[R-(1<<k)+1][k]);\n\tMinC=min(Min[L][k],Min[R-(1<<k)+1][k]);\n}\n```\n# \u7b2c\u4e8c\u6b65\uff1a\u5bf9Q\u6392\u5e8f\n\u4e0d\u7528\u591a\u8bf4\uff0c\u76f4\u63a5sort\u51fd\u6570\n# \u7b2c\u4e09\u6b65\uff1a\u8ba1\u7b97\u7b54\u6848\n\u5728\u8ba1\u7b97\u4e2d\u8981\u6ce8\u610f\u4e0d\u80fd\u6bcf\u6b21\u90fd\u91cd\u65b0\u6c42C\uff0c\u90a3\u6837\u4f1a\u8d85\u65f6\uff0c\u6ce8\u610f\u5230C\u6bcf\u6b21\u53ea\u53d8\u4e86\u4e0b\u6807\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u7ec4\u5408\u6570\u7684\u9012\u63a8\u5173\u7cfb\uff0c\u6765\u9012\u63a8\u6bcf\u4e00\u4e2aC\uff0c\u51cf\u5c11\u4e86\u5f88\u591a\u8ba1\u7b97\u91cf\u3002\n\n\u7136\u540e\u9644\u4e0a3\u4efd\u4ee3\u7801\uff1a\n\n## \u975e\u9012\u5f52\u7ebf\u6bb5\u6811\uff0843100KB\uff0c2.9\u79d2\uff09\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <set>\n#include<iomanip>\n#include <cstring>\n#include <algorithm>\n#define out(i) <<#i<<\"=\"<<(i)<<\"  \"\n#define OUT1(a1) cout out(a1) <<endl\n#define OUT2(a1,a2) cout out(a1) out(a2) <<endl\n#define OUT3(a1,a2,a3) cout out(a1) out(a2) out(a3)<<endl\n#define LD long double\n#define maxn 1000007\nusing namespace std;\n//\u975e\u9012\u5f52\u7ebf\u6bb5\u6811 \nint Max[maxn<<2],Min[maxn<<2],N;\nvoid Init(int n){//\u521d\u59cb\u5316 \n\tN = 1; while(N < n + 2) N <<= 1;\n\tfor(int i = 2*N;--i;) Max[i]=0,Min[i]=10000000;\n}\nvoid UpdateMax(int X,int V){//\u70b9\u66f4\u65b0\n\tfor(int s = N + X;s;s >>= 1) \n\t\tif(V > Max[s]) Max[s] = V;\n\t\telse break;\n}\nvoid UpdateMin(int X,int V){//\u70b9\u66f4\u65b0\n\tfor(int s = N + X;s;s >>= 1) \n\t\tif(V < Min[s]) Min[s] = V;\n\t\telse break;\n}\nvoid Query(int L,int R,int &MaxV,int &MinC){//\u83b7\u53d6\u533a\u95f4\u6700\u5927\u503c\u6700\u5c0f\u503c \n\tMaxV=0;MinC=10000000;\n\tfor(int s=N+L-1,t=N+R+1;s^t^1;s>>=1,t>>=1){\n\t\tif(~s&1) MaxV=max(MaxV,Max[s^1]),MinC=min(MinC,Min[s^1]);\n\t\tif( t&1) MaxV=max(MaxV,Max[t^1]),MinC=min(MinC,Min[t^1]);\n\t}\n}\nint n,k,x;\nint V[maxn];//\u9898\u76ee\u6570\u636eV \nint C[maxn];//\u9898\u76ee\u6570\u636eC \nint Q[maxn];//\u6392\u5e8f\u524d\uff1a\u6bcf\u4e2aL\u5bf9\u5e94\u7684\u6700\u4f18R\u503c\u5bf9\u5e94\u7684\u7b54\u6848\n//\u4e8c\u5206\u67e5\u627e \nvoid BinarySearch(int X){\n\tint L=X,R=n+1,M,MaxV,MinC;//[L,R) last Max <= Min\n\twhile((L+1)^R){\n\t\tM = (L+R)>>1;\n\t\tQuery(X,M,MaxV,MinC);\n\t\tif(MaxV <= MinC) L = M;\n\t\telse R = M;\n\t}\n\tQuery(X,L,MaxV,MinC);\n\tQ[X]=min(MaxV,MinC);\n\tif(L < n) Q[X]=max(Q[X],min(max(MaxV,V[L+1]),min(MinC,C[L+1])));\n}\nint main(void)\n{\n\twhile(~scanf(\"%d%d\",&n,&k)){\n\t\tInit(n);\n\t\tfor(int i=1;i<=n;++i)\tscanf(\"%d\",&V[i]),UpdateMax(i,V[i]*=100);\n\t\tfor(int i=1;i<=n;++i)   scanf(\"%d\",&C[i]),UpdateMin(i,C[i]);\n\t\t//\u4e8c\u5206\u6cd5\u8ba1\u7b97\u4ece\u6bcf\u4e2aL\u5f00\u59cb\u7684\u6700\u4f18\u503c\n\t\tfor(int i=1;i<=n;++i) BinarySearch(i);\n\t\t//\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n\t\tsort(Q+1,Q+n+1);\n\t\t//\u8ba1\u7b97\u7ed3\u679c \n\t\tLD ANS=(LD)(0);\n\t\tLD CF=(LD)k/n;\n\t\tfor(int t=1;t <= n-k+1;++t){\n\t\t\tANS+=CF*Q[t];\n\t\t\tCF*=(LD)(n-k-t+1)/(n-t);\n\t\t}\n\t\tcout<<fixed<<setprecision(7)<<ANS<<endl;\n\t}\nreturn 0;\n}\n```\n## Sparse Table\u4ee3\u7801\uff08176100KB,2.4\u79d2\uff09\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <set>\n#include<iomanip>\n#include <cstring>\n#include <algorithm>\n#define out(i) <<#i<<\"=\"<<(i)<<\"  \"\n#define OUT1(a1) cout out(a1) <<endl\n#define OUT2(a1,a2) cout out(a1) out(a2) <<endl\n#define OUT3(a1,a2,a3) cout out(a1) out(a2) out(a3)<<endl\n#define LD long double\n#define maxn 1000007\nusing namespace std;\nint n,k,x;\nint V[maxn];//\u9898\u76ee\u6570\u636eV \nint C[maxn];//\u9898\u76ee\u6570\u636eC \nint Q[maxn];//\u6392\u5e8f\u524d\uff1a\u6bcf\u4e2aL\u5bf9\u5e94\u7684\u6700\u4f18R\u503c\u5bf9\u5e94\u7684\u7b54\u6848\n \n//Sparse Table \nint Max[maxn][21];\nint Min[maxn][21];\nvoid BuildSparseTable(){\n\t//\u586b\u597dj=0\u7684\u503c \n\tfor(int i=1;i<=n;++i) Max[i][0]=V[i],Min[i][0]=C[i];\n\t//\u8ba1\u7b97Sparse Table \n\tfor(int j=1;(1<<j) <= n;++j){\n\t\tfor(int i=1;i+(1<<j)-1<=n;++i){\n\t\t\tMax[i][j]=max(Max[i][j-1],Max[i+(1<<(j-1))][j-1]);\n\t\t\tMin[i][j]=min(Min[i][j-1],Min[i+(1<<(j-1))][j-1]);\n\t\t}\n\t}\n}\nvoid Query(int L,int R,int &MaxV,int &MinC){\n\tint k = int(log2(R-L+1.0));\n\tMaxV=max(Max[L][k],Max[R-(1<<k)+1][k]);\n\tMinC=min(Min[L][k],Min[R-(1<<k)+1][k]);\n}\n//\u4e8c\u5206\u67e5\u627e \nvoid BinarySearch(int X){\n\tint L=X,R=n+1,M,MaxV,MinC;//[L,R) last Max <= Min\n\twhile((L+1)^R){\n\t\tM = (L+R)>>1;\n\t\tQuery(X,M,MaxV,MinC);\n\t\tif(MaxV <= MinC) L = M;\n\t\telse R = M;\n\t}\n\tQuery(X,L,MaxV,MinC);\n\tQ[X]=min(MaxV,MinC);\n\tif(L < n) Q[X]=max(Q[X],min(max(MaxV,V[L+1]),min(MinC,C[L+1])));\n}\nint main(void)\n{\n\twhile(~scanf(\"%d%d\",&n,&k)){\n\t\tfor(int i=1;i<=n;++i)\tscanf(\"%d\",&V[i]),V[i]*=100;\n\t\tfor(int i=1;i<=n;++i)   scanf(\"%d\",&C[i]);\n\t\tBuildSparseTable();\n\t\t//\u4e8c\u5206\u6cd5\u8ba1\u7b97\u4ece\u6bcf\u4e2aL\u5f00\u59cb\u7684\u6700\u4f18\u503c\n\t\tfor(int i=1;i<=n;++i) BinarySearch(i);\n\t\t//\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n\t\tsort(Q+1,Q+n+1);\n\t\t//\u8ba1\u7b97\u7ed3\u679c \n\t\tLD ANS=(LD)(0);\n\t\tLD CF=(LD)k/n;\n\t\tfor(int t=1;t <= n-k+1;++t){\n\t\t\tANS+=CF*Q[t];\n\t\t\tCF*=(LD)(n-k-t+1)/(n-t);\n\t\t}\n\t\tcout<<fixed<<setprecision(7)<<ANS<<endl;\n\t}\nreturn 0;\n}\n```\n# Sparse Table + \u9884\u5904\u7406log2\u51fd\u6570  (180000KB , 1.5\u79d2)\uff1a\n```\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <set>\n#include<iomanip>\n#include <cstring>\n#include <algorithm>\n#define out(i) <<#i<<\"=\"<<(i)<<\"  \"\n#define OUT1(a1) cout out(a1) <<endl\n#define OUT2(a1,a2) cout out(a1) out(a2) <<endl\n#define OUT3(a1,a2,a3) cout out(a1) out(a2) out(a3)<<endl\n#define LD long double\n#define maxn 1000007\nusing namespace std;\nint n,k,x;\nint V[maxn];//\u9898\u76ee\u6570\u636eV \nint C[maxn];//\u9898\u76ee\u6570\u636eC \nint Q[maxn];//\u6392\u5e8f\u524d\uff1a\u6bcf\u4e2aL\u5bf9\u5e94\u7684\u6700\u4f18R\u503c\u5bf9\u5e94\u7684\u7b54\u6848\n \n//Sparse Table \nint Max[maxn][21];\nint Min[maxn][21];\nint Log2[maxn];//Log2[x] = floor(log2(x))  \u9884\u5904\u7406\uff0c\u4e3a\u4e86\u52a0\u901f \nvoid BuildSparseTable(){\n\t//\u586b\u597dj=0\u7684\u503c \n\tfor(int i=1;i<=n;++i) Max[i][0]=V[i],Min[i][0]=C[i];\n\t//\u8ba1\u7b97Sparse Table \u548cLog2[] \n\tint j,D,H;\n\tfor(j=1,D=2,H=1;D <= n;++j,D <<= 1,H <<= 1){\n\t\tfor(int i=1;i+ D - 1<=n;++i){\n\t\t\tMax[i][j]=max(Max[i][j-1],Max[i+H][j-1]);\n\t\t\tMin[i][j]=min(Min[i][j-1],Min[i+H][j-1]);\n\t\t}\n\t\tfor(int i=H;i<D;++i) Log2[i]=j-1;\n\t}\n\tfor(int i=H;i<=n;++i) Log2[i]=j-1;\n}\nvoid Query(int L,int R,int &MaxV,int &MinC){\n\tint k = Log2[R-L+1];\n\tMaxV=max(Max[L][k],Max[R-(1<<k)+1][k]);\n\tMinC=min(Min[L][k],Min[R-(1<<k)+1][k]);\n}\n//\u4e8c\u5206\u67e5\u627e \nvoid BinarySearch(int X){\n\tint L=X,R=n+1,M,MaxV,MinC;//[L,R) last Max <= Min\n\twhile((L+1)^R){\n\t\tM = (L+R)>>1;\n\t\tQuery(X,M,MaxV,MinC);\n\t\tif(MaxV <= MinC) L = M;\n\t\telse R = M;\n\t}\n\tQuery(X,L,MaxV,MinC);\n\tQ[X]=min(MaxV,MinC);\n\tif(L < n) Q[X]=max(Q[X],min(max(MaxV,V[L+1]),min(MinC,C[L+1])));\n}\nint main(void)\n{\n\twhile(~scanf(\"%d%d\",&n,&k)){\n\t\tfor(int i=1;i<=n;++i)\tscanf(\"%d\",&V[i]),V[i]*=100;\n\t\tfor(int i=1;i<=n;++i)   scanf(\"%d\",&C[i]);\n\t\tBuildSparseTable();\n\t\t//\u4e8c\u5206\u6cd5\u8ba1\u7b97\u4ece\u6bcf\u4e2aL\u5f00\u59cb\u7684\u6700\u4f18\u503c\n\t\tfor(int i=1;i<=n;++i) BinarySearch(i);\n\t\t//\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n\t\tsort(Q+1,Q+n+1);\n\t\t//\u8ba1\u7b97\u7ed3\u679c \n\t\tLD ANS=(LD)(0);\n\t\tLD CF=(LD)k/n;\n\t\tfor(int t=1;t <= n-k+1;++t){\n\t\t\tANS+=CF*Q[t];\n\t\t\tCF*=(LD)(n-k-t+1)/(n-t);\n\t\t}\n\t\tcout<<fixed<<setprecision(7)<<ANS<<endl;\n\t}\nreturn 0;\n}\n```\n# \u52ff\u6284\u88ad\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\n>[\u539f\u6587](https://blog.csdn.net/zearot/article/details/50825559)\n",
        "postTime": 1556978100,
        "uid": 131288,
        "name": "\u6d77\u4e4b\u7737\u604b8",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF633E \u3010Startup Funding\u3011"
    }
]