[
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u5b9a $n$ \u4e2a\u70b9\u7684\u65e0\u5411\u5e26\u6743\u5b8c\u5168\u56fe\uff0c\u8fb9\u6743\u4e3a $1\\sim\\frac{n(n-1)}{2}$\u3002\u5bf9\u4e8e\u6ee1\u8db3 $1\\leq k\\leq n$ \u7684\u6bcf\u4e2a $k$ \u6c42\u51fa\u5c06\u539f\u56fe\u5212\u5206\u6210 $k$ \u4e2a\u7ec4\u7684\u65b9\u6848\u6570\uff0c\u6ee1\u8db3\u7ec4\u95f4\u8fb9\u7684\u6743\u5927\u4e8e\u7ec4\u5185\u8fb9\u7684\u6743\u503c\uff0c\u7b54\u6848\u5bf9 $998244353$ \u53d6\u6a21\u3002\n\n$\\texttt{Data Range:}1\\leq n\\leq 1500$\n\n### \u9898\u89e3\n\n[\u4e0d\u4e00\u5b9a\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Karry5307/p/13769995.html)\n\n\u8fd9\u4e2a\u9898\u86ee\u597d\u7684\uff0c\u53ea\u662f\u6211\u8d5b\u65f6\u6ca1\u6709\u60f3\u51fa\u6765\uff08\u751a\u81f3\u5dee\u70b9\u6ca1\u6709\u770b\u61c2\u9898\u76ee\uff09\uff0c\u679c\u7136\u8fd8\u662f\u6211\u592a\u83dc\u4e86/kk\n\n\u9996\u5148\u4ece\u5c0f\u5230\u5927\u628a\u8fb9\u52a0\u8fdb\u6765\uff0c\u7136\u540e\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff1a\u4e00\u4e2a\u8fde\u901a\u5757\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\u5f53\u4e14\u4ec5\u5f53\u5728\u52a0\u5b8c\u67d0\u6761\u8fb9\u4e4b\u540e\u8fd9\u4e2a\u8fde\u901a\u5757\u662f\u4e00\u4e2a\u56e2\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u7528\u7c7b\u4f3c\u4e8e Kruskal \u7684\u65b9\u6cd5\uff1a\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0f\u548c\u8fb9\u6570\uff0c\u5f53\u52a0\u5b8c\u67d0\u6761\u8fb9\u65f6\u5019\u53ef\u4ee5\u6ee1\u8db3\u8fd9\u4e2a\u8fde\u901a\u5757\u662f\u4e00\u4e2a\u56e2\u7684\u8bdd\u5c31\u6807\u8bb0\u4e00\u4e0b\u8fd9\u4e2a\u8fde\u901a\u5757\u662f\u53ef\u4ee5\u7684\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u597d\u50cf\u662f\u53ef\u4ee5 DP \u4e86\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\u3002\n\n\u8003\u8651\u4f18\u5316\u4e00\u4e0b\uff0c\u5728\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\u7684\u8fc7\u7a0b\u4e2d\u8003\u8651 Kruskal \u91cd\u6784\u6811\u3002\u7531\u4e8e**\u91cd\u6784\u6811\u65b0\u52a0\u7684\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5176\u53f6\u5b50\u8282\u70b9\u662f\u8fde\u901a\u5757\u4e2d\u6240\u6709\u7684\u8282\u70b9**\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u91cd\u6784\u6811\u8fdb\u884c dfs\uff0c\u7528\u4e00\u6bb5\u533a\u95f4\u8868\u793a\u4e00\u4e2a\u8fde\u901a\u5757\u3002\n\n\u4e8e\u662f\u73b0\u5728\u53d8\u6210\u4e86\u6709\u4e00\u4e9b\u533a\u95f4\uff0c\u8981\u4ece\u4e2d\u9009\u51fa $k$ \u4e2a\u8986\u76d6 $1\\sim n$ \u7684\u6240\u6709\u4f4d\u7f6e\u3002\u628a\u6240\u6709\u533a\u95f4\u6302\u5230\u53f3\u7aef\u70b9\u4e0a\uff0c\u8bbe $f_{i,j}$ \u8868\u793a\u5f53\u524d\u4f4d\u7f6e\u4e3a $i$ \u5e76\u4e14\u94a6\u5b9a\u5f53\u524d\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u53f3\u7aef\u70b9\u4e3a $i$\uff0c\u9009\u51fa\u4e86 $j$ \u4e2a\u533a\u95f4\u7684\u7b54\u6848\uff0c\u8f6c\u79fb\u7684\u65f6\u5019\u679a\u4e3e\u4e00\u4e0b\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u662f\u4ec0\u4e48\u5c31\u6ca1\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2\\log n)$\uff0c\u4e3b\u8981\u74f6\u9888\u5728\u6392\u5e8f\u4e0a\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef int ll;\ntypedef long long int li;\nconst ll MAXN=3e3+51,MOD=998244353;\nstruct EdgeForKruskal{\n\tll from,to,dist;\n\tinline bool operator <(const EdgeForKruskal &rhs)const\n\t{\n\t\treturn this->dist<rhs.dist;\n\t}\n};\nEdgeForKruskal ed[MAXN*MAXN];\nll n,m,idx,u,v,itvc;\nll x[MAXN][MAXN],f[MAXN][MAXN],ffa[MAXN],sz[MAXN],edc[MAXN];\nll l[MAXN],r[MAXN],flg[MAXN];\nvector<ll>g[MAXN],itv[MAXN];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline ll find(ll x)\n{\n\treturn ffa[x]==x?x:ffa[x]=find(ffa[x]);\n}\ninline void add(ll x)\n{\n\tif((++edc[x])==sz[x]*(sz[x]-1)/2)\n\t{\n\t\tflg[x]=1;\n\t}\n}\ninline void dfs(ll x)\n{\n\tif(x<=n)\n\t{\n\t\treturn (void)(l[x]=r[x]=++itvc);\n\t}\n\tl[x]=n+1;\n\tfor(register int to:g[x])\n\t{\n\t\tdfs(to),l[x]=min(l[x],l[to]);\n\t}\n\tr[x]=itvc,flg[x]?itv[r[x]].push_back(l[x]):(void)1;\n}\nint main()\n{\n\tn=read(),f[0][0]=1;\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tfor(register int j=1;j<=n;j++)\n\t\t{\n\t\t\tx[i][j]=read();\n\t\t\tj>i?(void)(ed[++m]=(EdgeForKruskal){i,j,x[i][j]}):(void)1;\n\t\t}\n\t}\n\tidx=n,sort(ed+1,ed+m+1);\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tflg[i]=1,itv[i].push_back(i),ffa[i]=i,sz[i]=1,edc[i]=0;\n\t}\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tu=find(ed[i].from),v=find(ed[i].to);\n\t\tif(u==v)\n\t\t{\n\t\t\tadd(u);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg[++idx].push_back(u),g[idx].push_back(v);\n\t\t\tffa[u]=ffa[v]=ffa[idx]=idx;\n\t\t\tsz[idx]=sz[u]+sz[v],edc[idx]=edc[u]+edc[v],add(idx);\n\t\t}\n\t}\n\tdfs(idx);\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tfor(register int j=1;j<=n;j++)\n\t\t{\n\t\t\tfor(register int k:itv[i])\n\t\t\t{\n\t\t\t\tf[i][j]=(f[i][j]+f[k-1][j-1])%MOD;\n\t\t\t}\n\t\t}\n\t}\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tprintf(\"%d \",f[n][i]);\n\t}\n}\n```",
        "postTime": 1601868664,
        "uid": 60990,
        "name": "Karry5307",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1408G \u3010Clusterization Counting\u3011"
    },
    {
        "content": "\u8bf7\u6ce8\u610f\uff0c**\u9898\u9762\u4fdd\u8bc1\u4e86 $a_{i,j}$ \u4e92\u4e0d\u76f8\u540c...**\uff08\u5982\u679c\u4f60\u6ca1\u770b\u5230\u53ef\u80fd\u4f1a\u50cf\u6211\u4e00\u6837\u88ab\u5361\u5f88\u4e45...\uff09\n\n\u6211\u4eec\u53d1\u73b0\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u7b49\u4ef7\u4e8e\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u5185\u90e8\u7684\u8fb9\u603b\u662f\u5c0f\u4e8e\u8fde\u901a\u5757\u5916\u90e8\u7684\u8fb9\u3002\n\n\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u5c06\u8fb9\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u52a0\u8fb9\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u4e00\u4e2a\u8fde\u901a\u5757\u662f\u6ee1\u8db3\u6761\u4ef6 $2$ \u7684\u5f53\u4e14\u4ec5\u5f53\u6309\u6b64\u52a0\u8fb9\u65b9\u6cd5\u5176\u5185\u90e8\u6784\u6210\u4e86\u4e00\u4e2a\u56e2\u3002\n\n\u8003\u8651\u9884\u5904\u7406\u90a3\u4e9b\u8fde\u901a\u5757\u662f\u5408\u6cd5\uff0c\u6211\u4eec\u8003\u8651\u7c7b\u4f3c\u4e8e\u751f\u6210\u6811\u4e00\u6837\uff0c\u501f\u52a9\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\uff0c\u7136\u540e\u52a0\u8fb9\u91cf\u5230\u8fbe $\\frac{sz\\times (sz-1)}{2}$ \u65f6\u5c31\u6807\u8bb0\u8fd9\u4e2a\u8fde\u901a\u5757\u5408\u6cd5\u3002\n\n\u8fd9\u6837\u5df2\u7ecf\u53ef\u4ee5 dp \u4e86\uff0c\u4f46\u590d\u6742\u5ea6\u662f\u6307\u6570\u7684\u3002\n\n\u8003\u8651\u4f18\u5316\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u5c06\u8fd9\u4e2a\u6d41\u7a0b\u5bf9\u5e94\u7684 Kruskal \u91cd\u6784\u6811\u5efa\u51fa\u6765\uff0c\u6bcf\u4e2a\u5408\u6cd5\u7684\u8fde\u901a\u5757\u90fd\u5bf9\u5e94\u4e00\u4e2a\u533a\u95f4\uff0c\u95ee\u9898\u7b49\u4ef7\u4e8e\u6709 $n+m$ \uff08$m<n$\uff09\u4e2a\u533a\u95f4\u662f\u5408\u6cd5\u7684\uff0c\u9009 $k$ \u4e2a\u533a\u95f4\u4e0d\u91cd\u590d\u7684\u8986\u76d6\u6240\u6709\u4f4d\u7f6e\u7684\u65b9\u6848\u6570\u3002\n\n\u5c06\u533a\u95f4\u6302\u5728 $r$ \u7aef\u70b9\u4e0a\uff0c\u7136\u540e\u76f4\u63a5 dp \u5373\u53ef\uff0c\u590d\u6742\u5ea6\u74f6\u9888\u5728\u6392\u5e8f\u4e0a\uff0c\u4e3a $\\mathcal O(n^2\\log n)$\n\n$Code:$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std ;\n#define Next( i, x ) for( register int i = head[x]; i; i = e[i].next )\n#define rep( i, s, t ) for( register int i = (s); i <= (t); ++ i )\n#define drep( i, s, t ) for( register int i = (t); i >= (s); -- i )\n#define re register\n#define pb push_back\n#define int long long\nint gi() {\n\tchar cc = getchar() ; int cn = 0, flus = 1 ;\n\twhile( cc < '0' || cc > '9' ) {  if( cc == '-' ) flus = - flus ; cc = getchar() ; }\n\twhile( cc >= '0' && cc <= '9' )  cn = cn * 10 + cc - '0', cc = getchar() ;\n\treturn cn * flus ;\n}\nconst int P = 998244353 ; \nconst int N = 3000 + 5 ; \nint n, cnt, a[1505][1505], ans[N], fa[N], sz[N], eg[N], L[N], R[N], fl[N] ; \nint num, dp[1505][1505], Id[N] ; \nstruct E {\n\tint fr, to, w ; \n} e[N * N] ;\nvector<int> G[N] ; \nvector<int> rr[N] ; \nbool cmp( E x, E y ) {\n\treturn x.w < y.w ; \n}\nint fd(int x) {\n\treturn (x == fa[x]) ? x : fa[x] = fd(fa[x]) ; \n}\nvoid inc(int x) {\n\t++ eg[x] ; \n\tif( eg[x] == sz[x] * (sz[x] - 1) / 2 ) fl[x] = 1 ; \n}\nvoid Dfs(int x){\n\tif( x <= n ) {\n\t\tL[x] = R[x] = ++ num ; return ; \n\t}\n\tL[x] = n + 1 ; \n\tfor(int v : G[x]) {\n\t\tDfs(v) ; \n\t\tL[x] = min( L[x], L[v] ) ;\n\t}\n\tR[x] = num ;\n\tif( fl[x] ) rr[R[x]].pb(L[x]) ; \n}\nsigned main()\n{\n\tn = gi() ; \n\trep( i, 1, n ) rep( j, 1, n ) a[i][j] = gi() ; \n\trep( i, 1, n ) for(int j = i + 1; j <= n; ++ j)\n\te[++ cnt] = (E){ i, j, a[i][j] } ;\n\tsort(e + 1, e + cnt + 1, cmp) ; \n\trep( i, 1, n ) fl[i] = 1, rr[i].pb(i) ; \n\trep( i, 1, n ) fa[i] = i, sz[i] = 1, eg[i] = 0 ; \n\tint idx = n ; \n\trep( i, 1, cnt ) {\n\t\tint x = e[i].fr, y = e[i].to ; \n\t\tint u = fd(x), v = fd(y) ;\n\t\tif( u == v ) inc(u) ; \n\t\telse {\n\t\t\t++ idx ; G[idx].pb(u), G[idx].pb(v) ; \n\t\t\tfa[u] = idx, fa[v] = idx, fa[idx] = idx ; \n\t\t\tsz[idx] = sz[u] + sz[v], \n\t\t\teg[idx] = eg[v] + eg[u], \n\t\t\tinc(idx) ; \n\t\t}\n\t}\n\tDfs(idx) ;\n\tdp[0][0] = 1 ; \n\tfor(re int i = 1; i <= n; ++ i) {\n\t\tfor(re int k = 1; k <= n; ++ k) {\n\t\t\tfor(int v : rr[i])\n\t\t\tdp[i][k] = (dp[i][k] + dp[v - 1][k - 1]) % P ; \n\t\t}\n\t}\n\trep( i, 1, n ) printf(\"%lld \", dp[n][i] ) ; puts(\"\") ; \n\treturn 0 ;\n}\n```",
        "postTime": 1601514715,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1408G \u3010Clusterization Counting\u3011"
    },
    {
        "content": "\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u52a0\u5165\u67d0\u6761\u8fb9\u6210\u4e86\u4e00\u4e2a\u56e2\u8bf4\u660e\u8fd9\u4e2a\u56e2\u662f\u53ef\u884c\u7684\u3002\n\n\u8003\u8651\u53ef\u884c\u56e2\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u53d1\u73b0\u8981\u4e48\u5305\u542b\u8981\u4e48\u4e0d\u4ea4\uff0c**\u4e8e\u662f\u6309\u5305\u542b\u5173\u7cfb\u5efa\u6210\u4e00\u68f5\u6811**\uff0c\u7c7b\u4f3c\u6811\u4e0a\u80cc\u5305\u505a\u5b50\u6811\u5f62\u6210\u4e86\u591a\u5c11\u4e2a\u56e2\u5373\u53ef\uff0c\u590d\u6742\u5ea6\u540c\u6811\u4e0a\u80cc\u5305\uff0c$n^2$\u3002",
        "postTime": 1647661099,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "CF1408G Clusterization Counting"
    },
    {
        "content": "**\u53bb\u5f80[\u539f\u535a\u5ba2](https://www.cnblogs.com/crashed/p/13805657.html)\u98df\u7528\u66f4\u4f73\u3002**\n   \n# \u9898\u76ee\n\n[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/CF1408G)\u770b\u9898\u76ee\u3002\n\n# \u5206\u6790\n\n\u4e0d\u96be\u60f3\u5230\uff0c\u9898\u76ee\u7684\u8981\u6c42\uff0c\u5c31\u662f\u8981**\u7ec4\u5185\u8fb9\u603b\u662f\u6bd4\u76f8\u90bb\u7684\u7ec4\u95f4\u8fb9\u5c0f**\u3002\n\n\u4e5f\u5c31\u662f\u8981**\u7ec4\u5185\u8fb9\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7ec4\u95f4\u8fb9\u7684\u6700\u5c0f\u503c**\u3002   \n\n\u4e8e\u662f\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\u3002\u5982\u679c\u4e00\u4e2a\u8fde\u901a\u5757\u5728\u52a0\u8fb9\u7684\u65f6\u5019\uff0c\u53d8\u6210\u4e86\u4e00\u4e2a**\u56e2**\uff0c\u8fd9\u5c31\u610f\u5473\u7740**\u73b0\u5728\u8fd9\u4e2a\u8fde\u901a\u5757\u53ef\u4ee5\u5355\u5206\u4e3a\u4e00\u7ec4**\uff08\u5269\u4f59\u7684\u8fb9\u53ea\u6709\u53ef\u80fd\u6210\u4e3a\u7ec4\u95f4\u8fb9\uff0c\u7ec4\u95f4\u8fb9\u90fd\u6bd4\u7ec4\u5185\u8fb9\u5927\uff09\u3002\u4e4b\u540e\u6211\u4eec\u5c31\u7528 $G(G\\subset V)$ \u8868\u793a\u4e00\u4e2a\u7ec4\u3002     \n\n-------\n\n\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff0c\u80fd\u5206\u7684\u7ec4\u7684\u6570\u91cf\u662f $O(n)$ \u7684\uff0c\u4e14**\u4efb\u610f\u4e24\u7ec4\u8981\u4e48\u5305\u542b\uff0c\u8981\u4e48\u4e0d\u4ea4**\u3002   \n\n\u5173\u4e8e\u6570\u91cf\u7684\u8bc1\u660e\uff1a\n\n\u8003\u8651\u7528\u7ec4\u5185\u8fb9\u7684**\u6743\u6700\u5927**\u7684\u4e00\u6761\u6765\u4ee3\u66ff\u8fd9\u4e2a\u7ec4\uff0c\u6211\u4eec\u79f0\u8fd9\u79cd\u8fb9\u4e3a \" \u6807\u51c6\u8fb9 \" \u3002\n\n\u5bf9\u4e8e\u6807\u51c6\u8fb9 $e$\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u65ad\u5730\u6269\u5c55\u8fb9\u6743\u5c0f\u4e8e $e$ \u7684\u8fb9\uff0c\u6700\u7ec8\u627e\u5230\u8fd9\u6761\u6807\u51c6\u8fb9\u5bf9\u5e94\u7684\u7ec4\u7684\u70b9\u96c6\u3002\n\n\u5982\u679c\u4ec5\u7531\u6807\u51c6\u8fb9\u5f62\u6210\u7684\u5b50\u56fe\u6709\u73af\uff0c\u90a3\u4e48\u8003\u8651\u4e00\u4e2a\u73af\u4e0a\u7684\u6700\u5927\u8fb9 $e$ \u548c\u6b21\u5927\u8fb9 $e'$\u3002\u6b64\u65f6 $e'$ \u5bf9\u5e94\u7684\u7ec4\u5305\u542b\u8fd9\u4e2a\u73af\uff0c\u4f46\u662f\u73af\u4e0a\u70b9\u96c6\u5bf9\u5e94\u7684\u56e2\u5305\u542b\u4e86 $e$\uff0c$e$ \u7684\u6743\u5927\u4e8e $e'$\uff0c\u51fa\u73b0\u4e86\u77db\u76fe\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u77e5\u9053\uff0c\u6807\u51c6\u8fb9\u6700\u7ec8\u4f1a\u5f62\u6210**\u68ee\u6797**\u7684\u6837\u5b50\uff0c\u56e0\u6b64\u6570\u91cf\u662f $O(n)$ \u7684\u3002   \n\n\u5173\u4e8e\u7ec4\u7684\u5173\u7cfb\u7684\u8bc1\u660e\uff1a\n\n\u76f4\u63a5\u8003\u8651**\u4e24\u4e2a\u76f8\u4ea4\u4f46\u5374\u4e0d\u5305\u542b\u7684\u7ec4** $G_1,G_2$\u3002\u6211\u4eec\u63d0\u51fa\u5b83\u4eec\u7684\u4e24\u4e2a\u6807\u51c6\u8fb9\uff0c\u8bb0\u4e3a $e_1,e_2$\u3002  \n\n\u7531\u4e8e\u8fb9\u6743\u5f7c\u6b64\u4e0d\u7b49\uff0c\u56e0\u6b64\u4e0d\u59a8\u8ba4\u4e3a $e_1$ \u7684\u6743\u5927\u4e8e $e_2$\u3002\u90a3\u4e48\u663e\u7136 $G_2\\subset G_1$\uff0c\u77db\u76fe\u3002   \n\n--------------\n\n\u7efc\u5408\u4ee5\u4e0a\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u6700\u7ec8\u53ef\u4ee5\u5355\u72ec\u5212\u5206\u7684\u7ec4**\u6570\u91cf\u662f $O(n)$ \u7684\uff0c\u4e14\u53ef\u4ee5\u6309\u7167\u5305\u542b\u5173\u7cfb\u5212\u5206\u6210\u6811\u7684\u5f62\u72b6**\u3002   \n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\uff0c\u5efa\u7acb Kruskal \u91cd\u6784\u6811\u3002\u6b64\u65f6\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u5bf9\u5e94\u4e86\u4e00\u4e2a\u8fde\u901a\u5757\u3002\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u5efa\u6811\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e2a\u8fde\u901a\u5757\u662f\u5426\u53ef\u4ee5\u88ab\u5355\u72ec\u5212\u5206\u3002  \n\n\u63a5\u7740\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u6811\u4e0a\u5bf9\u53ef\u884c\u7684\u5757\u8fdb\u884c**\u80cc\u5305 DP** \u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2)$ \u7684\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <utility>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> Edge;\n\nconst int mod = 998244353;\nconst int MAXN = 3e3 + 5;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0; char s = getchar(); int f = 1;\n\twhile( s < '0' || '9' < s ) { f = 1; if( s == '-' ) f = -1; s = getchar(); }\n\twhile( '0' <= s && s <= '9' ) { x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ); s = getchar(); }\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ) putchar( '-' ), x = -x;\n\tif( 9 < x ) write( x / 10 );\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nint f[MAXN][MAXN];\nint lch[MAXN], rch[MAXN], tot[MAXN];\nbool able[MAXN];\n\nint fa[MAXN], siz[MAXN], Etot[MAXN];\n\nEdge E[MAXN * MAXN];\nint Graph[MAXN][MAXN];\nint N, ID;\n\nint Edg( const int n ) { return n * ( n - 1 ) >> 1; }\nint Sub( int x, int v ) { return x < v ? x + mod - v : x - v; }\nint Mul( LL x, int v ) { x *= v; if( x >= mod ) x %= mod; return x; }\nint Add( int x, int v ) { return x + v >= mod ? x + v - mod : x + v; }\nint FindSet( const int u ) { return fa[u] = ( fa[u] == u ? u : FindSet( fa[u] ) ); }\n\nvoid DFS( const int u )\n{\n\tif( u <= N ) { tot[u] = f[u][1] = 1; return; }\n\tint l = lch[u], r = rch[u]; DFS( l ), DFS( r );\n\tfor( int j = 1 ; j <= tot[r] ; j ++ )\n\t\tfor( int k = 1 ; k <= tot[l] ; k ++ )\n\t\t\tf[u][j + k] = Add( f[u][j + k], Mul( f[l][k], f[r][j] ) );\n\ttot[u] = tot[l] + tot[r];\n\tif( able[u] ) f[u][1] = Add( f[u][1], 1 );\n}\n\nint main()\n{\n\tread( N );\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t\tfor( int j = 1 ; j <= N ; j ++ )\n\t\t{\n\t\t\tread( Graph[i][j] );\n\t\t\tif( i < j ) E[Graph[i][j]] = Edge( i, j );\n\t\t}\n\tfor( int i = 1 ; i <= N << 1 ; i ++ )\n\t\tfa[i] = i, siz[i] = i <= N;\n\tint cnt = N, rt = N;\n\tfor( int i = 1 ; i <= N ; i ++ ) f[i][1] = 1;\n\tfor( int i = 1, u, v ; i <= Edg( N ) ; i ++ )\n\t{\n\t\tu = FindSet( E[i].first ), \n\t\tv = FindSet( E[i].second );\n\t\tif( u != v )\n\t\t{\n\t\t\tfa[u] = fa[v] = ++ cnt;\n\t\t\tlch[cnt] = u, rch[cnt] = v, rt = cnt;\n\t\t\tEtot[cnt] = Etot[u] + Etot[v] + 1, siz[cnt] = siz[u] + siz[v];\n\t\t\tif( Etot[cnt] == Edg( siz[cnt] ) ) able[cnt] = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif( ( ++ Etot[u] ) == Edg( siz[u] ) )\n\t\t\t\table[u] = true;\n\t\t}\n\t}\n\tDFS( rt );\n\tfor( int k = 1 ; k <= N ; k ++ ) write( f[rt][k] ), putchar( k == N ? '\\n' : ' ' );\n\treturn 0;\n}\n```",
        "postTime": 1602511160,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[CF1408G]Clusterization Counting"
    },
    {
        "content": "\u4e00\u4e9b\u6028\u5ff5\uff1a\u8d5b\u65f6\u5dee 2min \u6ca1\u51b2\u5b8c\u8fd9\u4e2a\u9898\u2026\u2026\n\n\u5efa\u51fa $Kruskal$ \u91cd\u6784\u6811. \u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u53d6\u7684\u8054\u901a\u5757\u5fc5\u7136\u662f $Kruskal$ \u91cd\u6784\u6811\u4e0a\u7684\u4e00\u4e2a\u5b50\u6811\u3002\n\n\u90a3\u4e48 $check$ \u6bcf\u4e2a\u5b50\u6811\u80fd\u5426\u6210\u4e3a\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u7136\u540e\u505a\u4e00\u4e2a\u6811\u4e0a\u80cc\u5305\u5373\u53ef\u3002\n\n$\\Theta(n^2)$ , \u5982\u679c\u76f4\u63a5\u5bf9\u8fb9\u6392\u5e8f\u4e86\u5c31\u662f $\\Theta(n^2\\log n)$ \u7684\uff0c\u4e5f\u80fd\u8fc7\u3002\n\ncode : \n```cpp\n#include <bits/stdc++.h>\n#define LL long long\nusing namespace std;\ntemplate <typename T> void read(T &x){\n\tstatic char ch; x = 0,ch = getchar();\n\twhile (!isdigit(ch)) ch = getchar();\n\twhile (isdigit(ch)) x = x * 10 + ch - '0',ch = getchar();\n}\ninline void write(int x){if (x > 9) write(x/10); putchar(x%10+'0'); }\nconst int N = 3005,P = 998244353;\ninline void upd(int &x,int v){ x = (x+v>=P)?(x+v-P):(x+v); }\nint n,G[N][N],cntv;\nstruct Union_Find_Set{\n\tint fa[N<<1];\n\tinline void init(){ for (int i = 1; i <= n<<1; ++i) fa[i] = i; }\n\tinline int Find(int x){ return x == fa[x] ? x : (fa[x] = Find(fa[x])); }\n\tinline void Merge(int x,int y){ fa[Find(x)] = Find(y); }\n}S;\nstruct Edge{\n\tint x,y;\n\tbool operator < (const Edge w) const{ return G[x][y] < G[w.x][w.y]; }\n}e[N*N/2]; int le;\nint Rt,fa[N<<1],ch[N<<1][2];\nint F[N<<1][N],siz[N],tl[N],tr[N],Time,pos[N];\nint mx[N<<1],pre[N][N],suf[N][N];\ninline void dfs0(int x){\n\tif (x <= n){ tl[x] = tr[x] = ++Time; pos[Time] = x; siz[x] = 1; return; }\n\tdfs0(ch[x][0]); dfs0(ch[x][1]); tl[x] = tl[ch[x][0]],tr[x] = tr[ch[x][1]]; siz[x] = siz[ch[x][0]] + siz[ch[x][1]];\n}\ninline void dfs(int x){\n\tif (x <= n){ F[x][1] = 1;  return; }\n\tdfs(ch[x][0]); dfs(ch[x][1]);\n\tfor (int i = 1; i <= siz[ch[x][0]]; ++i)\n\tfor (int j = 1; j <= siz[ch[x][1]]; ++j){\n\t\tupd(F[x][i+j],(LL)F[ch[x][0]][i] * F[ch[x][1]][j] % P);\n\t}\n\tmx[x] = max(mx[ch[x][0]],mx[ch[x][1]]);\n\tfor (int i = tl[ch[x][0]]; i <= tr[ch[x][0]]; ++i)\n\tfor (int j = tl[ch[x][1]]; j <= tr[ch[x][1]]; ++j) mx[x] = max(mx[x],G[pos[i]][pos[j]]);\n\tfor (int i = tl[x]; i <= tr[x]; ++i){\n\t\tint val = 1000000000;\n\t\tif (tl[x] > 1) val = min(val,pre[pos[i]][tl[x]-1]);\n\t\tif (tr[x] < n) val = min(val,suf[pos[i]][tr[x]+1]);\n\t\tif (val < mx[x]){ F[x][1] = (F[x][1] + P-1) % P; break; }\n\t}\n\tF[x][1] = (F[x][1] + 1) % P;\n}\nint main(){\n\tint i,j,u,v;\n\tread(n); cntv = n; S.init();\n\tfor (i = 1; i <= n; ++i) for (j = 1; j <= n; ++j) read(G[i][j]);\n\tfor (i = 1; i <= n; ++i) for (j = i+1; j <= n; ++j) ++le,e[le].x = i,e[le].y = j;\n\tfor (i = 1; i <= n; ++i) G[i][i] = 100000000;\n\tsort(e+1,e+le+1);\n\tfor (i = 1; i <= le; ++i){\n\t\tu = S.Find(e[i].x),v = S.Find(e[i].y);\n\t\tif (u == v) continue;\n\t\t++cntv; S.Merge(u,cntv); S.Merge(v,cntv);\n\t\tch[cntv][0] = u,ch[cntv][1] = v; fa[u] = fa[v] = cntv; Rt = cntv;\n\t}\n\tdfs0(Rt);\n\tfor (i = 1; i <= n; ++i){\n\t\tfor (j = 1; j <= n; ++j) pre[i][j] = suf[i][j] = G[i][pos[j]];\n\t\tfor (j = 2; j <= n; ++j) pre[i][j] = min(pre[i][j],pre[i][j-1]);\n\t\tfor (j = n-1; j ; --j) suf[i][j] = min(suf[i][j],suf[i][j+1]);\n\t}\n\tdfs(Rt);\n\tfor (i = 1; i <= n; ++i) write(F[Rt][i]),putchar(i<n?' ':'\\n');\n\treturn 0;\n}\n```",
        "postTime": 1601643447,
        "uid": 52518,
        "name": "s_r_f",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1408G \u3010Clusterization Counting\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n- \u7ed9\u5b9a $n$ \u4e2a\u70b9\u7684\u5e26\u6743\u65e0\u5411\u5b8c\u5168\u56fe\uff0c\u70b9 $i, j$ \u4e4b\u95f4\u7684\u6743\u503c\u4e3a $a_{i, j}$\uff0c\u6743\u503c\u662f\u4e00\u4e2a $1 \\sim \\frac{n(n-1)}{2}$ \u7684\u6392\u5217\u3002\n- \u8ba1\u6570\u628a\u539f\u56fe\u5212\u5206\u6210 $k$ \u4e2a\u7ec4\u7684\u65b9\u6848\u6570\uff0c\u6ee1\u8db3\uff1a\n  - \u5bf9\u4e8e\u4efb\u610f\u7684 $(s, f), (x, y)$\uff0c\u5176\u4e2d $s, f, x$ **\u540c\u7ec4**\uff0c$y$ \u4e0e $x$ **\u4e0d\u540c\u7ec4** \uff08$s \\ne f, x \\ne y$\uff09\uff0c$a_{s, f} < a_{x, y}$\uff0c\u5373\uff08\u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\uff09\u7ec4\u95f4\u8fb9\u5927\u4e8e\u7ec4\u5185\u8fb9\u3002\n- \u8f93\u51fa\u4e00\u884c $n$ \u4e2a\u6570\uff0c\u5bf9\u4e8e $k \\in [1, n]$ \u6c42\u51fa\u7b54\u6848\uff0c\u5bf9 $998244353$ \u53d6\u6a21\u3002\n- $n \\le 1500$\n\n## \u9898\u89e3\n\n\u8003\u8651\u4ece\u5c0f\u5230\u5927\u5904\u7406\u8fb9\u3002\u5c06\u8fb9\u6392\u5e8f\uff0c\u4f9d\u6b21\u5728\u5e76\u67e5\u96c6\u4e0a\u8fde\u63a5\u3002\n\n\u8bbe $f_i$ \u4e3a\u67d0\u4e2a\u8fde\u901a\u5757\u5212\u5206\u6210 $i$ \u4e2a\u7ec4\u7684\u65b9\u6848\u6570\u3002\n\n\u5982\u679c\u4e00\u4e2a\u8fde\u901a\u5757\u8fd8\u4e0d\u662f\u56e2\u65f6\u5c31\u5df2\u7ecf\u548c\u53e6\u4e00\u4e2a\u8fde\u901a\u5757\u76f8\u8fde\u63a5\uff0c\u90a3\u4e48\u5b83\u4e0d\u80fd\u5355\u72ec\u6210\u7ec4\uff0c\u56e0\u4e3a\u7ec4\u5185\u6709\u6bd4\u7ec4\u95f4\u66f4\u5927\u7684\u8fb9\uff08\u8fd8\u672a\u52a0\u5165\uff09\u3002\n\n\u521d\u59cb\u65f6\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u5355\u72ec\u6210\u7ec4\uff0c\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $f_1 = 1$\u3002\u8fde\u63a5\u4e24\u4e2a\u8fde\u901a\u5757\u65f6\u76f4\u63a5\u505a\u591a\u9879\u5f0f\u5377\u79ef\u5373\u53ef\uff08\u4e0d\u53ef\u80fd\u53d1\u751f\u5408\u5e76\uff09\uff0c\u52a0\u5165\u6240\u6709\u8fb9\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002\n\n\u5f53\u4e00\u4e2a\u8fde\u901a\u5757\u5f62\u6210\u4e00\u4e2a\u56e2\u65f6\uff0c\u53ef\u4ee5\u5355\u72ec\u6210\u7ec4\uff0c\u56e0\u6b64\u4ee4 $f_1$ \u589e $1$\u3002\n\n\u590d\u6742\u5ea6 $\\mathcal O(n^2)$\uff0c\u7c7b\u4f3c\u6811\u5f62 DP\u3002\n\n[\u53c2\u8003\u5b9e\u73b0](https://www.cnblogs.com/RiverHamster/p/sol-cf1408g.html)",
        "postTime": 1601526402,
        "uid": 31756,
        "name": "RiverHamster",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1408G \u3010Clusterization Counting\u3011"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u8003\u8651\u4ec0\u4e48\u6837\u7684\u8054\u901a\u5757\u4e00\u5b9a\u6ee1\u8db3\u9898\u76ee\u7ed9\u5b9a\u7684\u6027\u8d28\u3002\u8003\u8651\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\uff0c\u5f53\u52a0\u5230\u67d0\u4e00\u6761\u8fb9\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e00\u4e2a\u8fde\u901a\u5757\u5f62\u6210\u4e86\u56e2\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fde\u901a\u5757\u4e00\u5b9a\u662f\u5408\u6cd5\u7684\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651 DP\uff0c\u4f46\u662f\u8fd9\u6837\u662f $\\Theta(2^n\\times n)$ \u7684\uff0c\u663e\u7136\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\u3002\n\n\u8003\u8651\u5bf9\u52a0\u8fb9\u7684\u8fc7\u7a0b\u5efa\u7acb Kruskal \u91cd\u6784\u6811\u3002\u6211\u4eec\u53d1\u73b0\u6bcf\u4e00\u4e2a\u5408\u6cd5\u7684\u8fde\u901a\u5757\u90fd\u5bf9\u5e94\u4e86 Kruskal \u91cd\u6784\u6811\u4e0a\u7684\u4e00\u68f5\u5b50\u6811\uff0c\u8fd9\u6837\u5408\u6cd5\u7684\u8fde\u901a\u5757\u6570\u6700\u591a\u6709 $2\\times n-1$ \u4e2a\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5 dfs \u4e00\u904d\u6c42\u51fa\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u7684 dfs \u5e8f\u4ee5\u53ca\u6bcf\u68f5\u5b50\u6811\u4ee3\u8868\u7684\u533a\u95f4\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\uff1a\u7ed9\u5b9a\u82e5\u5e72\u4e2a\u533a\u95f4\uff0c\u6c42\u4ece\u4e2d\u9009\u51fa $k$ \u4e2a\u4e0d\u4ea4\u7684\u533a\u95f4\uff0c\u4f7f\u5f97\u5b83\u4eec\u53ef\u4ee5\u8986\u76d6 $[1,n]$ \u7684\u65b9\u6848\u6570\u3002\u8bbe $f_{i,j}$ \u8868\u793a\u5f53\u524d\u8986\u76d6\u4e86 $[1,i]$\uff0c\u7528\u4e86 $j$ \u4e2a\u533a\u95f4\u7684\u65b9\u6848\u6570\u3002\u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n^2\\log n)$\u3002\n\nCode:\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm> \n#include <vector>\nusing namespace std ;\nconst int MAXN = 2e3 + 10 , MAXM = 4e6 + 10 , mod = 998244353 ;\nint n , a[MAXN][MAXN] , px[MAXM] , py[MAXM] ;\nint fa[MAXN * 2] , sz[MAXN * 2] , c[MAXN * 2] , cnt , vis[MAXN * 2] ;\nint find (int x) {return fa[x] == x ? x : fa[x] = find (fa[x]) ;}\nint fir[MAXN * 2] , tot , L[MAXN * 2] , R[MAXN * 2] , cc ;\nstruct edge {int to , nxt ;} e[MAXN * 4] ;\nvoid add (int u , int v) {\n\te[++tot].to = v ; e[tot].nxt = fir[u] ; fir[u] = tot ;\n}\nvoid merge (int x , int y) {\n\tx = find (x) , y = find (y) ;\n\tif (x == y) {\n\t\tif ((++c[x]) == sz[x] * (sz[x] - 1) / 2) vis[x] = 1 ;\n\t\treturn ;\n\t}\n\tfa[x] = fa[y] = ++cnt , sz[cnt] = sz[x] + sz[y] , c[cnt] = c[x] + c[y] + 1 ;\n\tadd (cnt , x) , add (cnt , y) ;\n\tif (c[cnt] == (sz[cnt]) * (sz[cnt] - 1) / 2) vis[cnt] = 1 ;\n}\nint f[MAXN][MAXN] ;\nvector <int> G[MAXN * 2] ;\nvoid dfs (int x) {\n\tif (x <= n) {L[x] = R[x] = ++cc , G[cc].push_back (cc) ; return ;}\n\tL[x] = n + 1 , R[x] = 0 ;\n\tfor (int i = fir[x] ; i ; i = e[i].nxt)\n\t\tdfs (e[i].to) , L[x] = min (L[x] , L[e[i].to]) ;\n\tif (vis[x]) G[(R[x] = cc)].push_back (L[x]) ;\n}\nint main () {\n\tscanf (\"%d\" , &n) ; cnt = n ;\n\tfor (int i = 1 ; i <= n ; i++)\n\t\tfor (int j = 1 ; j <= n ; j++)\n\t\t\tscanf (\"%d\" , &a[i][j]) , px[a[i][j]] = i , py[a[i][j]] = j ;\n\tfor (int i = 1 ; i <= n ; i++) sz[i] = 1 , c[i] = 0 , vis[i] = 1 ;\n\tfor (int i = 1 ; i < 2 * n ; i++) fa[i] = i ;\n\tfor (int i = 1 ; i <= n * (n - 1) / 2 ; i++) merge (px[i] , py[i]) ;\n\tf[0][0] = 1 ; dfs (cnt) ;\n\tfor (int i = 1 ; i <= n ; i++) {\n\t\tfor (int j = 1 ; j <= n ; j++) {\n\t\t\tfor (int k = 0 ; k < G[i].size () ; k++)\n\t\t\t\tf[i][j] = (f[i][j] + f[G[i][k] - 1][j - 1]) % mod ;\n\t\t}\n\t}\n\tfor (int i = 1 ; i <= n ; i++) printf (\"%d \" , f[n][i]) ;\n\treturn 0 ;\n} \n```",
        "postTime": 1660470731,
        "uid": 122641,
        "name": "GIFBMP",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1408G\u3010Clusterization Counting\u3011"
    },
    {
        "content": "## 0.\u9898\u610f\n\u7ed9\u51fa\u4e00\u4e2a\u65e0\u5411\u5b8c\u5168\u56fe\uff0c\u8fb9\u7684\u6743\u503c\u662f $1\\sim n(n-1)/2$ \u7684\u6392\u5217\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $k\\in[1,n]$\uff0c\u6c42\u51fa\u5c06\u5176\u5206\u4e3a $k$ \u7ec4\u4e14\u7ec4\u5185\u7684\u8fb9\u6743\u5168\u90e8\u5c0f\u4e8e\u7ec4\u95f4\u7684\u8fb9\u6743\u3002\n## 1.\u89e3\u6cd5\n\u5176\u5b9e\u9898\u610f\u6982\u62ec\u5b8c\u4e86\u8fd9\u9898\u5c31\u5feb\u505a\u51fa\u6765\u4e86\u3002\n\n\u7531\u4e8e\u6bcf\u4e00\u7ec4\u5185\u90e8\u90fd\u662f\u4e00\u4e2a\u56e2\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u52a0\u5165\u8fb9\uff0c\u4e00\u65e6\u8fb9\u6570\u8fbe\u5230\u5f53\u524d\u8fde\u901a\u5757\u6240\u80fd\u5305\u542b\u7684\u8fb9\u6570\u4e0a\u9650\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8fde\u901a\u5757\u5212\u4e3a\u4e00\u7ec4\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u663e\u7136\u662f\u4e0d\u80fd\u76f4\u63a5\u66b4\u529b\u6307\u6570 dp \u7684\uff0c\u6211\u4eec\u8003\u8651\u8ddf\u8fde\u901a\u6027\u6709\u5173\u7684\u5176\u4ed6\u6027\u8d28\u3002\u8fd9\u65f6\u6211\u4eec\u60ca\u5947\u5730\u53d1\u73b0\uff0c**Kruskal \u91cd\u6784\u6811**\u4e0a\u7684\u70b9\u5c31\u5bf9\u5e94\u4e86\u52a0\u8fb9\u8fc7\u7a0b\u4e2d\u5f62\u6210\u7684\u8fde\u901a\u5757\uff0c\u6b64\u65f6\u53ea\u9700\u8981\u8003\u8651\u6811\u4e0a\u7684 dp\u3002\n\n\u800c\u8fd9\u4e2a\u6811\u4e0a dp \u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u80cc\u5305\uff0c\u6211\u4eec\u770b\u5b50\u6811\u5185\u5212\u5206\u6210\u4e86\u51e0\u7ec4\uff08\u5176\u5b9e\u5212\u5206\u7684\u662f\u5b50\u6811\u5185\u7684\u53f6\u5b50\uff09\uff0c\u7136\u540e\u5bf9\u4e8e\u53ef\u4ee5\u81ea\u6210\u4e00\u7ec4\u7684\u8fde\u901a\u5757 $+1$ \u5373\u53ef\u3002\n## 2.\u4ee3\u7801\n\u74f6\u9888\u5728\u4e8e\u6392\u5e8f\u8fb9\u7684 $O(n^2\\log n)$\uff0c\u4e0d\u8fc7\u7531\u4e8e\u8fb9\u6743\u662f\u4e00\u4e2a\u6392\u5217\u5b83\u663e\u7136\u53ef\u4ee5\u4f18\u5316\u6210 $O(n^2)$\u3002\n\n\u6838\u5fc3\u4ee3\u7801\uff1a\n```cpp\nconst int N=3010,p=998244353;\nint n,a[N][N];\nstruct Edge {\n  int u,v,w;\n  Edge(int _u=0,int _v=0,int _w=0){\n    u=_u,v=_v,w=_w;\n  }\n  bool operator < (const Edge &rhs)const{\n    return w<rhs.w;\n  }\n}e[N*N];int cnt;\n//Kruskal\nint tot,l[N],r[N],siz[N],ec[N],fa[N],f[N][N];\nbool ok[N];//can be a group\nint F(int k){\n  return fa[k]==k?k:fa[k]=F(fa[k]);\n}\nvoid DFS(int u){\n  if(u<=n)return (void)(f[u][1]=1);\n  DFS(l[u]),DFS(r[u]);\n  for(rg int i=1;i<=siz[l[u]];i++){\n    for(rg int j=1;j<=siz[r[u]];j++){\n      (f[u][i+j]+=(LL)f[l[u]][i]*f[r[u]][j]%p)%=p;\n    }\n  }\n  if(ok[u])(f[u][1]+=1)%=p;\n}\nint main(){\n  Read(n);\n  for(rg int i=1;i<n+n;i++)fa[i]=i,siz[i]=i<=n;\n  for(rg int i=1;i<=n;i++){\n    for(rg int j=1;j<=n;j++){\n      Read(a[i][j]);\n      if(i<j)e[++cnt]=Edge(i,j,a[i][j]);\n    }\n  }\n  sort(e+1,e+1+cnt);\n  for(rg int i=1,tot=n;i<=cnt;i++){\n    int u=F(e[i].u),v=F(e[i].v);\n    if(u!=v){\n      tot++,l[tot]=u,r[tot]=v,fa[u]=fa[v]=tot;\n      ec[tot]=ec[u]+ec[v]+1,siz[tot]=siz[u]+siz[v];\n      if(ec[tot]==siz[tot]*(siz[tot]-1)/2)ok[tot]=1;\n    }else {\n      if(++ec[u]==siz[u]*(siz[u]-1)/2)ok[u]=1;\n    }\n  }\n  int rt=n+n-1;DFS(rt);\n  for(rg int i=1;i<=n;i++)printf(\"%d \",f[rt][i]);\n  KafuuChino HotoKokoa\n}\n",
        "postTime": 1632746869,
        "uid": 220524,
        "name": "_ajthreac_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1408G"
    },
    {
        "content": "\u8fd9\u4e2a\u4e2d\u6587\u7ffb\u8bd1\u5b83\u5c31\u975e\u5e38\u7684\u9b54\u6027\uff0c\u76f4\u63a5\u544a\u8bc9\u4e86\u4f60\u8fd9\u9053\u9898\u4e00\u534a\u7684\u505a\u6cd5\u3002\n\n> \uff08\u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\uff09\u7ec4\u5185\u8fb9 $<$ \u7ec4\u5916\u8fb9\n\n\u8fd9\u6837\u5f88\u5bb9\u6613\u53ef\u4ee5\u60f3\u5230\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\uff0c\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\uff0c\u4e00\u65e6\u5f53\u524d\u7684\u8fde\u901a\u5757\u5f62\u6210\u4e86\u4e00\u4e2a\u56e2\u5c31\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e2a\u56e2\u3002\u7136\u540e\u53ef\u4ee5 $\\text{DP}$ \uff0c\u4f46\u662f\u590d\u6742\u5ea6\u662f\u6307\u6570\u7ea7\u522b\u7684\u65e0\u6cd5\u627f\u53d7\u3002\n\n\u4ed4\u7ec6\u60f3\u4e00\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5e76\u67e5\u96c6 $\\text{merge}$ \u8fc7\u7a0b\u4e2d\uff0c\u6839\u636e\u5148\u540e\u6b21\u5e8f\u5f97\u5230\u4e00\u4e2a\u70b9\u7f16\u53f7\u7684\u5e8f\u5217 $b$\uff0c\u6bcf\u4e2a\u56e2\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e0a\u5bf9\u5e94\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u90a3\u4e48\u9898\u76ee\u6240\u6c42\u5c31\u53d8\u4e3a\u7ed9\u5b9a\u4e00\u4e9b\u533a\u95f4\uff0c\u7528\u8fd9\u4e9b\u533a\u95f4\u4e2d\u7684 $k$ \u4e2a\u8986\u76d6\u6574\u4e2a\u5e8f\u5217 $b$ \u7684\u65b9\u6848\u6570\uff0c\u53ef\u4ee5 $\\text{DP}$ \u6c42\u89e3\u3002\u8bbe $f_{i,j}$ \u4e3a\u5e8f\u5217\u4e2d\u524d $i$ \u4e2a\u6570\u4f7f\u7528 $j$ \u4e2a\u533a\u95f4\u8986\u76d6\u7684\u65b9\u6848\u6570\u3002\n\n\u4e3a\u4e86\u4fbf\u4e8e\u8f6c\u79fb\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $l$ \u8bb0\u5f55\u5176\u5bf9\u5e94\u7684 $r$\uff0c\u8fd9\u663e\u7136\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u5237\u8868\u8f6c\u79fb\u5373\u53ef\u3002\u6216\u8005\u5bf9\u4e8e\u6bcf\u4e2a $r$ \u8bb0\u5f55\u5176\u5bf9\u5e94\u7684 $l$\uff0c\u586b\u8868\u8f6c\u79fb\u3002\n\n\u4ee3\u7801\u975e\u5e38\u597d\u5199\uff0c\u5c31\u4e0d\u8d34\u4e86\u3002\n",
        "postTime": 1602760748,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1408G \u3010Clusterization Counting\u3011"
    },
    {
        "content": "\u5982\u679c\u4e00\u4e2a\u70b9\u96c6\u6ee1\u8db3\u70b9\u96c6\u5185\u4e24\u4e24\u8fde\u8fb9\u7684\u6743\u503c\u5c0f\u4e8e\u5176\u4ed6\u70b9\u4e0e\u8fd9\u4e2a\u70b9\u96c6\u8fde\u7684\u8fb9\uff0c\u8fd9\u4e2a\u70b9\u96c6\u5c31\u53ef\u4ee5\u88ab\u5355\u72ec\u5212\u5206\u51fa\u6765\u3002\n\n\u5c06\u6240\u6709\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u52a0\u5165\uff0c\u5982\u679c\u67d0\u4e2a\u65f6\u523b\u5f62\u6210\u4e86\u4e00\u4e2a\u56e2\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56e2\u5c31\u662f\u53ef\u4ee5\u5355\u72ec\u5212\u5206\u51fa\u6765\u7684\u5408\u6cd5\u70b9\u96c6\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u8fdb\u884c\u7ef4\u62a4\u3002\u5982\u679c\u5047\u5982\u4e00\u6761\u8fb9\u5408\u5e76\u4e86\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u5c31\u5c06\u5176\u4e2d\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u70b9\u653e\u5728\u53e6\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u5de6\u8fb9\u3002\u8fd9\u6837\u5728\u6240\u6709\u8fb9\u90fd\u5904\u7406\u5b8c\u540e\uff0c\u627e\u5230\u7684\u6240\u6709\u5408\u6cd5\u56e2\u90fd\u662f\u70b9\u5e8f\u5217\u4e0a\u7684\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u8bbe $f_{i,j}$ \u8868\u793a\u5c06\u70b9\u5e8f\u5217\u4e0a\u524d $i$ \u4e2a\u70b9\u5206\u6210 $j$ \u6bb5\u7684\u65b9\u6848\u6570\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u8f6c\u79fb\u4e86\u3002\n\n\u6ce8\u610f\u5230\u5408\u6cd5\u56e2\u4e4b\u95f4\u8981\u4e48\u662f\u4e0d\u4ea4\uff0c\u8981\u4e48\u662f\u771f\u5305\u542b\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u8fd9\u4e9b\u56e2\u7684\u6570\u91cf\u4e0d\u8d85\u8fc7 $2n-1$ \u4e2a\u3002\n\n\u90a3\u4e48\u603b\u590d\u6742\u5ea6\u5c31\u4e3a $O(n^2)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define I inline int\n#define V inline void\n#define P pair<int,int>\n#define isnum(ch) ('0'<=ch&&ch<='9')\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define gc (_op==_ed&&(_ed=(_op=_buf)+fread(_buf,1,100000,stdin),_op==_ed)?EOF:*_op++)\nchar _buf[100000],*_op(_buf),*_ed(_buf);\nI getint(){\n\tint _s=0,_f=1;char _ch=gc;\n\twhile(!isnum(_ch))(_ch=='-')&&(_f=-1),_ch=gc;\n\twhile(isnum(_ch))_s=_s*10+_ch-48,_ch=gc;\n\treturn _s*_f;\n}\nconst int N=2e3+1,mod=998244353;\nP pos[N*N];\nint n,m,tot;\nvector<int>e[N];\nint f[N][N],fa[N],id[N],tag[N];\nint a[N][N],nxt[N],l[N],r[N],siz[N],cnt[N];\nV check(int&x){x-=mod,x+=x>>31&mod;}\nV input(){\n\tn=getint();\n\tFOR(i,1,n)FOR(j,1,n)a[i][j]=getint();\n}\nI find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\nV merge(int x,int y){\n\tif((x=find(x))!=(y=find(y)))\n\t\tfa[y]=x,nxt[r[x]]=l[y],r[x]=r[y];\n}\nI C2(int x){return x*(x-1)/2;}\nV init(){\n\ttot=C2(n),**f=1;\n\tFOR(i,1,n)FOR(j,i+1,n)pos[a[i][j]]=P(i,j);\n\tFOR(i,1,n)l[i]=i,r[i]=i,fa[i]=i;\n\tFOR(i,1,tot)merge(pos[i].first,pos[i].second);\n\tFOR(i,1,n)tag[nxt[i]]=1;\n\tFOR(i,1,n)if(!tag[i])id[m=1]=i;\n\twhile(m<n)id[m+1]=nxt[id[m]],m++;\n}\nV link(int x,int y){\n\tif((x=find(x))!=(y=find(y)))\n\t\tfa[y]=x,r[x]=r[y],siz[x]+=siz[y],cnt[x]+=cnt[y];\n\tif(++cnt[x]==C2(siz[x]))e[l[x]].push_back(r[x]);\n}\nV work(){\n\tFOR(i,1,n)fa[i]=i,l[id[i]]=r[id[i]]=i;\n\tFOR(i,1,n)siz[i]=1,e[i].push_back(i);\n\tFOR(i,1,tot)link(pos[i].first,pos[i].second);\n\tFOR(u,1,n)FOR(i,0,n-1)if(f[u-1][i])for(int v:e[u])\n\t\tcheck(f[v][i+1]+=f[u-1][i]);\n\tFOR(i,1,n)cout<<f[n][i]<<' ';\n\t\t\n}\nint main(){\n\tinput();\n\tinit();\n\twork();\n\treturn 0;\n}\n\n```",
        "postTime": 1601556168,
        "uid": 109236,
        "name": "Fuyuki",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1408G \u3010Clusterization Counting\u3011"
    }
]