[
    {
        "content": "# \u3010\u9898\u89e3\u3011CF1029D Concatenated Multiples\n\n[\u539f\u9898\u4f20\u9001\u95e8](<https://www.luogu.org/problemnew/show/CF1029D>)\n\n## Solution\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u7684\"\u628aa\u63a5\u5230b\u524d\u9762\"\u5b9e\u9645\u4e0a\u7b49\u4e8e$a*10^{log_{10}b}+b$\u3002\u4e8e\u662f\u6211\u4eec\u81ea\u7136\u60f3\u5230\u9884\u5904\u7406\u51fa$a_i*10^x \\mod k$\uff0c\u663e\u7136$x$\u4e0d\u4f1a\u8d85\u8fc710\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a$a_i$\uff0c\u67e5\u8be2\u6709\u591a\u5c11\u6570\u63a5\u5230\u81ea\u5df1\u524d\u9762\u53ef\u4ee5\u88ab$k$\u6574\u9664\u3002\n\n\u9884\u5904\u7406\u548c\u679a\u4e3e$a_i$\u7684$O(n)$\u590d\u6742\u5ea6\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8003\u8651\u5982\u4f55\u52a0\u5feb\u8be2\u95ee\u901f\u5ea6\u3002\n\n\u6700\u5bb9\u6613\u60f3\u5230\u7684\u662f\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a$x$\uff0c\u628a$a_i^{x}\\mod k$\u63d2\u5165\u5230\u4e00\u4e2a``map\u200b``\u4e2d\u3002\u8fd9\u6837\u6700\u591a\u5f0010\u4e2a``map``\uff0c\u5e76\u4e14\u6bcf\u6b21\u67e5\u8be2\u53ea\u9700$log_2n$\u7684\u65f6\u95f4\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n\u7136\u800c\u5230\u8fd9\u4e00\u6b65\u7684\u65f6\u5019\uff0c\u6211\u5c31\u770b\u89c1\u540c\u673a\u623f\u5de8\u4f6c\u7684$map$\u88ab\u5361\u5230\u4e86\u81ea\u95ed\uff0c\u6700\u540e\u7528\u4e86``unordered_map``\u624d\u52c9\u5f3a\u5361\u8fc7\uff08\u8bdd\u8bf4``unordered_map``\u662f\u4e0d\u662f\u9700\u8981c++11\u554a\uff0c\u54ea\u4f4d\u5927\u4f6c\u79d1\u666e\u4e00\u4e0b\uff09\u3002\u7136\u540e\u624d\u60f3\u8d77\u6765$map$\u6709\u5de8\u5927\u7684\u5e38\u6570\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u8fdb\u4e00\u6b65\u4f18\u5316\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u91cc\u7684$map$\u5b9e\u9645\u4e0a\u5927\u6750\u5c0f\u7528\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7b80\u5355\u7684\u63d2\u5165\u548c\u67e5\u8be2\uff0c\u5e76\u4e0d\u9700\u8981\u5bb9\u5668\u6709\u5e8f\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u81ea\u7136\u7684\u60f3\u5230\u7528~~unordered_map~~\u54c8\u5e0c\u8868\u8fdb\u884c\u4f18\u5316\u3002\u867d\u7136\u54c8\u5e0c\u8868\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u7384\u5b66\uff0c\u4f46\u518d\u600e\u4e48\u6837\u4e5f\u4e0d\u4f1a\u6bd4\u4e00\u53ea$log$\u518d\u52a0\u5927\u5e38\u6570\u7684``map``\u6162\u3002\u800c\u4e14\u54c8\u5e0c\u8868\u590d\u6742\u5ea6\u51e0\u4e4e\u53ef\u4ee5\u770b\u505a\u5e38\u6570\u7ea7\u522b\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u6c34\u6389\u4e00\u9053\u7d2b\u9898\u5566\uff01\uff01\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define MAX 200005\n#define P 10007\nusing namespace std;\n\nll n, k;\nll a[MAX], p[20], lg[MAX];\nstruct hash_map {\n    int head[MAX], Next[MAX], cnt;\n    ll val[MAX], tot[MAX];\n    \n    hash_map(){\n        cnt = 0;\n        memset(head, 0, sizeof(head));\n        memset(Next, 0, sizeof(Next));\n        memset(val, 0, sizeof(val));\n        memset(tot, 0, sizeof(tot));\n    }\n    \n    void insert(ll x) {\n        ll k = x%P;\n        for(int i = head[k]; i; i = Next[i]) {\n            if(val[i] == x) {\n                tot[i]++;\n                return;\n            }\n        }\n        cnt++;\n        Next[cnt] = head[k];\n        head[k] = cnt;\n        val[cnt] = x;\n        tot[cnt] = 1;\n    }\n\n    ll find(ll x) {\n        ll k = x%P;\n        for(int i = head[k]; i; i = Next[i]) {\n            if(val[i] == x) {\n                return tot[i];\n            }\n        }\n        return 0;\n    }\n}mp[15];\n\nint main() {\n    cin >> n >> k;\n    p[0] = 1;\n    for(int i = 1; i <= 10; i++) {\n        p[i] = p[i-1]*10%k;\n    }\n    for(int i = 1; i <= n; i++) {\n        scanf(\"%d\", &a[i]);\n        ll tmp = a[i];\n        while(tmp) {\n            lg[i]++;\n            tmp /= 10;\n        }\n    }\n    for(int i = 1; i <= 10; i++){\n        for(int j = 1; j <= n; j++){\n            mp[i].insert(a[j]%k*p[i]%k);\n        }\n    }\n    \n    ll t, ans = 0;\n    for(int i = 1; i <= n; i++){\n        t = ((k-a[i])%k+k)%k;\n        ans += mp[lg[i]].find(t);\n        if((a[i]%k*p[lg[i]]%k+a[i]%k)%k == 0){\n            ans--;\n        }\n    }\n    cout << ans << endl;\n\n    return 0;\n}\n```\n\n",
        "postTime": 1555333522,
        "uid": 22991,
        "name": "fighter",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1029D \u3010Concatenated Multiples\u3011"
    },
    {
        "content": "$qwq$\u6628\u5929\u665a\u4e0a$Div.3$\u8fc7\u4e86\u8fd9\u9053\u9898...\u65e9\u4e0a\u4ea4\u4e86$1A$...\u770b\u5728$CF$\u4e0a$hack$\u7684\u60c5\u51b5\u5e76\u4e0d\u4e50\u89c2\u800c\u4e14\u4e5f\u6ca1\u4eba\u6765\u4ea4\u8fd9\u9898\u7684\u4efd\u4e0a...\u6211\u51b3\u5b9a\u53d1\u4e00\u7bc7\u9898\u89e3\u5e2e$(zhuang)$\u52a9$(yi)$\u5927$(bo)$\u5bb6$(x)$  \n\u9898\u76ee\u5927\u610f:\u7ed9\u51fa$n$\u4e2a\u6570$a_1,a_2,\\dots,a_n$\u548c$k$,\u6c42\u5bf9\u4e8e\u4efb\u610f\u7684\u4e24\u4e2a\u6570$a_i,a_j(i\\neq j)$,\u4f7f\u5f97\u4e24\u6570\u8fde\u63a5\u8d77\u6765\u7ec4\u6210\u7684\u65b0\u6570(\u5982$12$\u4e0e$3456$\u8fde\u63a5\u7ec4\u6210$123456$)\u662f$k$\u7684\u500d\u6570\u7684\u9009\u5b9a\u65b9\u5f0f\u5171\u6709\u591a\u5c11\u79cd.  \n\u5f88\u663e\u7136\u68c0\u9a8c\u6240\u6709\u7684\u7ec4\u5408\u5e76\u4e0d\u73b0\u5b9e,\u4e00\u5171\u6709$n\\times (n-1)$\u4e2a\u65b0\u6570\u7ec4\u6210\u65b9\u6cd5(~~n\u65b9\u4e71\u641e\u7edd\u5bf9T\u98de~~),\u6240\u4ee5\u663e\u7136\u9700\u8981\u7528\u4e00\u4e9b\u7279$(qi)$\u6b8a$(ji)$\u65b9$(yin)$\u6cd5$(qiao)$\u6765\u641e\u5b9a\u8fd9\u9053\u9898.  \n\u5229\u7528\u8fd9\u662f\u4e00\u9053\u6570\u8bba\u9898\u7684\u6027\u8d28,\u663e\u7136\u6d89\u53ca\u5230\u6574\u9664\u53ef\u4ee5\u4ece\u4f59\u6570\u7684\u89d2\u5ea6\u8003\u8651~~(\u8fd9\u8fd8\u7528\u60f3\u5417)~~,\u8003\u8651\u5230\u9898\u76ee\u4e0a\u62fc\u63a5\u7684\u64cd\u4f5c\u5bf9\u4f59\u6570\u7684\u5f71\u54cd,\u6211\u4eec\u53ef\u4ee5\u5bf9\u6240\u6709\u7684$a_1,a_2,\\dots,a_n$\u8fdb\u884c\u9884\u5904\u7406,\u53ea\u9700\u8981\u627e\u5230\u5408\u9002\u7684$i,j(i\\neq j)$\u4f7f\u5f97$a_i\\times (\\lfloor log_{10}a_j\\rfloor+1)+a_j=0(mod\\ k)$\u5373\u53ef.  \n\u6240\u4ee5\u53ea\u9700\u627e\u51fa\u80fd\u4e0e$a_i$\u7ec4\u6210$k$\u7684\u500d\u6570\u7684$a_j$\u4e2a\u6570\u5e76\u7d2f\u52a0\u5373\u53ef,\u4e2a\u6570\u7531\u9884\u5904\u7406\u5f97\u5230.  \n\u9884\u5904\u7406\u5728\u672c\u9898\u4e2d\u663e\u5f97\u5c24\u4e3a\u91cd\u8981,\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570$a_i$\u90fd\u53ef\u4ee5\u524d\u63a5$a_j$,\u7531\u4e8e\u8fde\u63a5\u64cd\u4f5c\u5bf9\u524d\u6570\u7684\u4f59\u6570\u5f71\u54cd\u53d6\u51b3\u4e8e\u540e\u6570\u7684\u4f4d\u6570,\u6545\u6211\u4eec\u9700\u8981\u5224\u65ad$a_i$\u7684\u4f4d\u6570\u4e0b\u5bf9\u5e94\u80fd\u4e0e$a_i$\u4f59\u6570\u52a0\u548c\u6210\u4e3a$k$\u7684\u500d\u6570\u7684\u6570\u7684\u4e2a\u6570,\u6240\u4ee5\u9884\u5904\u7406\u7684\u5185\u5bb9\u5c31\u662f\u540e\u63a5$m(m\\in [1,10])$\u4f4d\u6570\u540e\u5404\u4f59\u6570\u5bf9\u5e94\u6570\u5b57\u7684\u4e2a\u6570~~(\u8868\u8fbe\u80fd\u529b\u6389\u7ebf...\u611f\u6027\u7406\u89e3\u4e00\u4e0b)~~  \n\u68b3\u7406\u4e00\u4e0b\u601d\u8def:\u5148\u5bf9\u6240\u6709\u7684$a_1,a_2,\\dots,a_n$,\u5904\u7406\u6bcf\u4e2a\u6570\u540e\u63a5$m(m\\in [1,10])$\u4f4d\u6570\u540e\u7684\u4f59\u6570\u60c5\u51b5(\u5728\u6b64\u9009\u7528$map$\u5b58\u50a8...\u6bd5\u7adf\u4f59\u6570\u503c\u57df\u662f$[0,10^9-1]$...\u5904\u7406\u5bf9\u5e94$map$\u4e2d\u540e\u63a5$m$\u4f4d\u65f6\u7684\u4f59\u6570\u4f5c\u4e3a\u4e0b\u6807\u7684\u503c$+1$\u5373\u53ef\u7edf\u8ba1\u4e2a\u6570),\u540c\u65f6\u8003\u8651\u5230\u8fd9\u6837\u505a\u6709\u53ef\u80fd\u628a$a_i$\u540e\u63a5$a_i$\u7684\u60c5\u51b5\u8bb0\u5165\u7b54\u6848,\u6240\u4ee5\u5728\u7d2f\u52a0\u540e\u7279\u5224\u4e00\u4e0b$a_i$\u540e\u63a5$a_i$\u7684\u60c5\u51b5\u662f\u5426\u5408\u6cd5,\u5408\u6cd5\u65f6\u5c06$ans--$\u53bb\u91cd.  \n\u4e0b\u9762\u653e\u4ee3\u7801$\\downarrow \\downarrow \\downarrow$...\u5982\u679c\u5b9e\u5728\u7406\u89e3\u4e0d\u4e86\u7684\u8bdd...\u6211\u4e5f\u6ca1\u4ec0\u4e48\u529e\u6cd5\u60f9~~(\u9003)~~\n```cpp\n#include<cstdio>//CF1029D\n#include<iostream>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<map> \n\nusing namespace std;\n\nmap<int,int>mp[11];\n\nconst int N=2e5+5;\n\nconst long long shi[11]={1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000,10000000000};\n\nint ws(int u){\n\treturn (int)log10(u)+1;\n}\n\nint n,k,a[N],mo[N];\n\nlong long ans;\n\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&a[i]);\n\t\tmo[i]=a[i]%k;\n\t} \n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=10;j++){\n\t\t\tmp[j][(int)(((shi[j]%k)*mo[i])%k)]++;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint w=ws(a[i]);\n\t\tans+=mp[w][(k-mo[i])%k];\n\t\tif((int)((((shi[w]%k)*mo[i])%k)+mo[i])%k==0){\n\t\t\tans--;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\u5c0f\u5c0f\u5361\u4e86\u4e00\u4e0b\u5e38\u6570\u521a\u597d\u8dd1\u8fc7$qwq$...\u751f\u6b7b\u901f\u5ea6\u5c31\u5dee$35ms$~~(\u9003)~~\n\n$update1:(20180828)$  \n\u7531\u4e8e\u672c\u9898\u6bd2\u7624\u5361\u5e38\u5361\u7684\u5389\u5bb3...\u4e0a\u9762\u4ee3\u7801\u8fd8\u662f\u6709\u53ef\u80fd\u4f1aT~~(\u90fd\u602aCF\u8bc4\u6d4b\u673a...\u8138\u9ed1\u5c31\u662f\u8fc7\u4e0d\u4e86(\u9003))~~...\u6240\u4ee5\u518d\u653e\u4e00\u4e2a\u5361\u4e86\u5e38\u6570\u7684\u4ee3\u7801...\u4eb2\u6d4b$1887ms$\u8dd1\u8fc7...\u5e94\u8be5\u7b97\u662f\u6bd4\u8f83\u4fdd\u9669\u4e86...\n```cpp\n#include<cstdio>//CF1029D\n#include<iostream>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<map> \n\nusing namespace std;\n\nmap<int,int>mp[11];\n\nconst int N=2e5+5;\n\nint ws(int u){\n\treturn (int)log10(u)+1;\n}\n\nint n,k,a[N],mo[11][N];\n\nlong long ans;\n\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&a[i]);\n\t\tmo[0][i]=a[i]%k;\n\t\tfor(int j=1;j<=10;j++){\n\t\t\tmo[j][i]=(int)(((long long)mo[j-1][i]*10)%k);\n\t\t}\n\t} \n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=10;j++){\n\t\t\tif(mo[j][i]){\n\t\t\t\tmp[j][mo[j][i]]++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmp[j][0]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint w=ws(a[i]);\n\t\tif(mo[0][i]){\n\t\t\tans+=mp[w][k-mo[0][i]];\n\t\t}\n\t\telse{\n\t\t\tans+=mp[w][0];\n\t\t}\n\t\tif((mo[w][i]+mo[0][i])%k==0){\n\t\t\tans--;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1535169305,
        "uid": 88006,
        "name": "BLUESKY007",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1029D \u3010Concatenated Multiples\u3011"
    },
    {
        "content": "\u82b1\u5f0f\u9884\u5904\u7406\u7136\u540e\u5408\u7406\u7684\u66b4\u529b\uff0c\u4eb2\u6d4b\u4ee3\u7801\u8dd1\u7684\u98de\u5feb\uff0c\u6210\u529f\u8dd1\u51fa\u6d1b\u8c37\u6700\u5feb\uff0c\u55ef....\u5199\u7684\u65f6\u5019\u5148\u88ab\u7206\u4e86int\uff0c\u7136\u540e\u518d\u88ab\u7206\u4e86ll\uff0c\u6700\u540e\u7528ull\u624d\u8fc7\u7684\uff0c\u53ef\u4ee5\u8bf4\u662f\u975e\u5e38\u7684\u667a\u969c\u4e86\u3002\n\n![\u88ab\u65e5\u54ed\u4e86,jpg](https://cdn.luogu.com.cn/upload/pic/31767.png)\n\n```cpp\n//author Eterna\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<map>\n#include<set>\n#include<queue>\n#include<stack>\n#include<utility>\n#include<cmath>\n#include<climits>\n#include<deque>\n#include<functional>\n#include<complex>\n#include<numeric>\n#define max(x,y) ((x)>(y)?(x):(y))\n#define min(x,y) ((x)<(y)?(x):(y))\n#define INF 0x7fffffff\n#define Pi acos(-1.0)\n#define maxn 200000\n#define eps 1e-15\n#define MOD 1000000007\n#define ABS(x) ((x)>=0?(x):(-(x)))\n#define pb(x) push_back(x)\n#define lowbit(x) (x&-x)\n#define mid (L+R)/2\n#define Lson (index*2)\n#define Rson (index*2+1)\n#define root arr[0].child[1]\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ninline int read_int() {\n\tchar c;\n\tint ret = 0, sgn = 1;\n\tdo { c = getchar(); } while ((c < '0' || c > '9') && c != '-');\n\tif (c == '-') sgn = -1; else ret = c - '0';\n\twhile ((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + (c - '0');\n\treturn sgn * ret;\n}\ninline ll read_ll() {\n\tchar c;\n\tll ret = 0, sgn = 1;\n\tdo { c = getchar(); } while ((c < '0' || c > '9') && c != '-');\n\tif (c == '-') sgn = -1; else ret = c - '0';\n\twhile ((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + (c - '0');\n\treturn sgn * ret;\n}\ninline bool Get_Line(string& s) {\n\ts.clear();\n\tchar ch;\n\twhile ((ch = getchar()) && ch != '\\n'&&ch != '\\r') {\n\t\tif (ch == EOF)return false;\n\t\ts.push_back(ch);\n\t}\n\treturn true;\n}\ninline int Count_Len(int x) {\n\tint ret = 0;\n\twhile (x) {\n\t\tret++;\n\t\tx /= 10;\n\t}\n\treturn ret;\n}\nconst int Up = 1e9;\nint arr[maxn + 5], len[maxn + 5], n, length, max_len;\nll ans;\null now, p;\nmap<int, int> mp[11];\nint main(void)\n{\n\t//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n\tn = read_int(), p = read_ll();\n\tfor (int i = 1; i <= n; i++) {\n\t\tarr[i] = read_int();\n\t\tlen[i] = Count_Len(arr[i]);\n\t\tmax_len = max(max_len, len[i]);\n\t\tmp[len[i]][arr[i] % p]++;\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tnow = arr[i]; length = len[i];\n\t\twhile (length - len[i] < max_len) {\n\t\t\tnow *= 10; length++;\n\t\t\tll a = now%p;\n\t\t\tll b = p - a; b %= p;\n\t\t\tif (mp[length - len[i]].find(b) != mp[length - len[i]].end()) {\n\t\t\t\tans += mp[length - len[i]][b];\n\t\t\t\tif (len[i] == length - len[i] && arr[i] % p == b)ans--;\n\t\t\t}\n\t\t}\n\t}\n\tcout << ans << endl;\n\t//system(\"pause\");\n\treturn 0;\n}\n```",
        "postTime": 1535869804,
        "uid": 106178,
        "name": "Forsaken2020",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1029D \u3010Concatenated Multiples\u3011"
    }
]