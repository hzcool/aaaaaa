[
    {
        "content": "\u5728\u535a\u5ba2\u56ed\u98df\u7528\u66f4\u4f73\uff1a[https://www.cnblogs.com/PinkRabbit/p/CF1340F.html](https://www.cnblogs.com/PinkRabbit/p/CF1340F.html)\u3002\n\n### \u9898\u610f\u7b80\u8ff0\n\n\u4f60\u9700\u8981\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u591a\u79cd\u62ec\u53f7\u7ec4\u6210\u7684\u62ec\u53f7\u5e8f\u5217\u3002\u9700\u8981\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1. \u4fee\u6539\u5355\u4e00\u4f4d\u7f6e\u7684\u62ec\u53f7\u3002\n2. \u67e5\u8be2\u4e00\u6bb5\u533a\u95f4\u662f\u5426\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u5e8f\u5217\u957f\u5ea6\u4e3a $n$\uff0c\u4e0d\u540c\u7684\u62ec\u53f7\u79cd\u7c7b\u6570\u4e3a $k$\uff0c\u64cd\u4f5c\u6b21\u6570\u4e3a $q$\u3002\n\n\u4e00\u4e2a\u591a\u79cd\u62ec\u53f7\u7ec4\u6210\u7684\u62ec\u53f7\u5e8f\u5217 $S$ \u662f\u5408\u6cd5\u7684\u5f53\u4e14\u4ec5\u5f53\uff1a\n\n1. $S$ \u4e3a\u7a7a\u3002\n2. $S$ \u53ef\u4ee5\u8868\u793a\u4e3a $A + B$ \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d $A, B$ \u90fd\u662f\u5408\u6cd5\u7684\u3002\n3. $S$ \u53ef\u4ee5\u8868\u793a\u4e3a $\\texttt{(}^\\ast + A + \\texttt{)}^\\ast$ \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d $A$ \u662f\u5408\u6cd5\u7684\u5e76\u4e14 $\\texttt{(}^\\ast$ \u4e0e $\\texttt{)}^\\ast$ \u662f\u4e00\u5bf9**\u76f8\u540c\u79cd\u7c7b\u7684\u5de6\u53f3\u62ec\u53f7**\u3002\n\n\u4f8b\u5982 `()[{}()]` \u548c `{([{}])}` \u662f\u5408\u6cd5\u7684\uff0c\u800c `][][` \u548c `([{)]}` \u4e0d\u662f\u3002\n\n### \u9898\u89e3\n\n\u90e8\u5206\u601d\u8def\u6765\u81ea\u4e8e EntropyIncreaser\u3002\n\n\u6211\u4eec\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u9047\u5230\u7684\u95ee\u9898\u6709\u4e8c\uff1a\n\n1. \u7ebf\u6bb5\u6811\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5e94\u8be5\u5b58\u50a8\u4ec0\u4e48\u4fe1\u606f\uff1f\n2. \u5982\u4f55\u5408\u5e76\u4fe1\u606f\uff1f\n\n\u8003\u8651\u4e00\u6bb5\u62ec\u53f7\u5e8f\u5217\uff0c\u5728\u4e0d\u65ad\u5220\u53bb\u76f8\u90bb\u7684\u5339\u914d\u62ec\u53f7\u4e4b\u540e\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u3002\u5982\u679c\u5176\u4e2d\u4ecd\u7136\u5305\u542b\u4e86**\u76f8\u5411\u7684\u62ec\u53f7**\uff08\u6b64\u65f6\u5fc5\u7136\u4e0d\u5339\u914d\uff0c\u56e0\u4e3a\u5982\u679c\u5339\u914d\u5c31\u4f1a\u88ab\u5220\u53bb\uff09\uff0c\u4f8b\u5982 `(]`\uff0c\u5219\u5728\u5b83\u4e24\u8fb9\u518d\u62fc\u63a5\u4e0a\u4efb\u4f55\u62ec\u53f7\u5e8f\u5217\uff0c\u6700\u7ec8\u90fd\u4e00\u5b9a\u4e0d\u4f1a\u53d8\u6210\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u5982\u679c\u5df2\u7ecf\u53ef\u4ee5\u786e\u4fdd\u533a\u95f4\u5185\u4e0d\u53ef\u80fd\u53d8\u6210\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\uff08\u4e5f\u5c31\u662f\u4e0a\u8ff0\u60c5\u51b5\u53d1\u751f\u4e86\uff09\uff0c\u5c31\u53ef\u4ee5\u6253\u4e00\u4e2a\u4e0d\u53ef\u884c\u7684\u6807\u8bb0\u3002\n\n\u5426\u5219\u5f97\u5230\u7684\u7ed3\u679c\u4e00\u5b9a\u662f\u82e5\u5e72\u4e2a\u53f3\u62ec\u53f7\uff0c\u52a0\u4e0a\u82e5\u5e72\u4e2a\u5de6\u62ec\u53f7\uff08\u90fd\u53ef\u4ee5\u4e3a $0$ \u4e2a\uff09\uff0c\u4f8b\u5982 `)]}[((`\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u53ea\u8981\u5728\u4e24\u8fb9\u52a0\u4e0a\u5408\u9002\u7684\u62ec\u53f7\uff0c\u5c31\u53ef\u4ee5\u628a\u62ec\u53f7\u5168\u90e8\u6d88\u9664\uff0c\u53d8\u6210\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u6240\u4ee5\u8981\u8bb0\u5f55\u7684\u4fe1\u606f\u5c31\u662f\u5b83\uff0c\u5c31\u662f\u6d88\u5230\u4e0d\u80fd\u6d88\u4e4b\u540e\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u5206\u4e3a\u300c\u5728\u5de6\u4fa7\u7684\u53f3\u62ec\u53f7\u300d\u548c\u300c\u5728\u53f3\u4fa7\u7684\u5de6\u62ec\u53f7\u300d\u4e24\u90e8\u5206\u3002\n\n\u5148\u4e0d\u8003\u8651\u5982\u4f55\u5b58\u50a8\u7684\u95ee\u9898\uff0c\u7740\u773c\u4e8e\u533a\u95f4\u4fe1\u606f\u7684\u5408\u5e76\u4e0a\uff0c\u5982\u4f55\u5408\u5e76\u4e24\u4e2a\u5b50\u533a\u95f4\u7684\u4fe1\u606f\u5462\uff1f\n\n\u6211\u4eec\u4ee4\u5de6\u5b50\u533a\u95f4\u7684\u5de6\u4fa7\u90e8\u5206\uff08\u53f3\u62ec\u53f7\uff09\u4e3a $ll$\uff0c\u5de6\u5b50\u533a\u95f4\u7684\u53f3\u4fa7\u90e8\u5206\uff08\u5de6\u62ec\u53f7\uff09\u4e3a $lr$\uff0c  \n\u3000\u518d\u4ee4\u53f3\u5b50\u533a\u95f4\u7684\u5de6\u4fa7\u90e8\u5206\uff08\u53f3\u62ec\u53f7\uff09\u4e3a $rl$\uff0c\u53f3\u5b50\u533a\u95f4\u7684\u53f3\u4fa7\u90e8\u5206\uff08\u5de6\u62ec\u53f7\uff09\u4e3a $rr$\uff0c\u63a5\u4e0b\u6765\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. \u5982\u679c $lr$ \u6bd4 $rl$ \u77ed\u3002  \n  \u4f8b\u5982 `)[(` + `)]}{(` \u8fd9\u79cd\u60c5\u51b5\uff0c\u5408\u5e76\u540e\u53d8\u6210 `)}{(`\u3002  \n  \u53ef\u4ee5\u53d1\u73b0\u5fc5\u987b\u6709\uff1a\u6574\u4e2a $lr$ \u8981\u5339\u914d\u5f97\u4e0a $rl$ \u7684\u957f\u5ea6\u4e3a $|lr|$ \u7684\u524d\u7f00\u3002  \n  \u5339\u914d\u4e0a\u4e4b\u540e\uff0c\u518d\u628a $rl$ \u7684\u53bb\u6389\u8fd9\u4e2a\u524d\u7f00\u7684\u90e8\u5206\u8fde\u63a5\u5728 $ll$ \u7684\u540e\u9762\uff0c\u4f5c\u4e3a\u65b0\u7684\u5de6\u4fa7\u90e8\u5206\uff0c\u800c\u53f3\u4fa7\u90e8\u5206\u5c31\u662f $rr$\u3002  \n  \u5982\u679c\u5339\u914d\u4e0d\u4e0a\uff0c\u90a3\u5c31\u6253\u4e0a\u65e0\u89e3\u7684\u6807\u8bb0\u3002\n2. \u5982\u679c $lr$ \u6bd4 $rl$ \u957f\u3002  \n  \u4f8b\u5982 `)[(` + `){(` \u8fd9\u79cd\u60c5\u51b5\uff0c\u5408\u5e76\u540e\u53d8\u6210 `)[{(`\u3002  \n  \u53ef\u4ee5\u53d1\u73b0\u5fc5\u987b\u6709\uff1a\u6574\u4e2a $rl$ \u8981\u5339\u914d\u5f97\u4e0a $lr$ \u7684\u957f\u5ea6\u4e3a $|rl|$ \u7684\u540e\u7f00\u3002  \n  \u5339\u914d\u4e0a\u4e4b\u540e\uff0c\u518d\u628a $lr$ \u7684\u53bb\u6389\u8fd9\u4e2a\u540e\u7f00\u7684\u90e8\u5206\u8fde\u63a5\u5728 $rr$ \u7684\u524d\u9762\uff0c\u4f5c\u4e3a\u65b0\u7684\u53f3\u4fa7\u90e8\u5206\uff0c\u800c\u5de6\u4fa7\u90e8\u5206\u5c31\u662f $ll$\u3002  \n  \u5982\u679c\u5339\u914d\u4e0d\u4e0a\uff0c\u90a3\u5c31\u6253\u4e0a\u65e0\u89e3\u7684\u6807\u8bb0\u3002\n\n\u5b98\u65b9\u9898\u89e3\u4e2d\u4f7f\u7528\u4e86\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811 + \u54c8\u5e0c\u6765\u7ef4\u62a4\u4fe1\u606f\uff0c\u663e\u7136\u662f\u53ef\u884c\u7684\uff0c\u800c\u4e14\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u662f $\\mathcal O (n \\log^2 n)$ \u7684\u3002\n\n\u5b9e\u9645\u4e0a\u5b58\u5728\u4e00\u79cd\u4e0d\u90a3\u4e48\u9ebb\u70e6\uff0c\u800c\u4e14\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\u7684\u505a\u6cd5\uff1a\n\n\u76f4\u63a5\u4ec5\u5b58\u50a8\u4e24\u90e8\u5206\u7684\u957f\u5ea6\u548c\u5b57\u7b26\u4e32\u54c8\u5e0c\u503c\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u5e73\u8861\u6811\u3002\n\n\u5f53\u5408\u5e76\u7684\u65f6\u5019\uff0c\u9700\u8981\u67e5\u8be2\u67d0\u4e2a\u8282\u70b9\u5de6/\u53f3\u4fa7\u90e8\u5206\u7684\u67d0\u4e2a\u957f\u5ea6\u7684\u524d/\u540e\u7f00\u7684\u54c8\u5e0c\u503c\uff0c\u548c\u5c06\u8981\u5339\u914d\u7684\u4e32\u8fdb\u884c\u6bd4\u5bf9\u3002\n\n\u4f46\u662f\u5df2\u77e5\u6574\u4e2a\u4e32\u7684\u54c8\u5e0c\u503c\u662f\u65e0\u6cd5\u6c42\u51fa\u524d/\u540e\u7f00\u7684\u54c8\u5e0c\u503c\u7684\uff0c\u6211\u4eec\u8003\u8651\u9012\u5f52\uff01\n\n\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\u6765\u6c42\u67d0\u4e2a\u8282\u70b9\u5de6/\u53f3\u4fa7\u90e8\u5206\u7684\u524d/\u540e\u7f00\u54c8\u5e0c\u503c\uff08\u8be6\u89c1\u4ee3\u7801\u4e2d\u7684 `gValL` \u548c `gValR` \u51fd\u6570\uff09\u3002\n\n\u4ee5\u6c42\u5de6\u4fa7\u90e8\u5206\u7684\u524d\u7f00\u54c8\u5e0c\u503c\u4e3a\u4f8b\uff0c\u5982\u679c\u8981\u6c42\u957f\u5ea6\u4e3a $0$ \u6216\u603b\u957f\u5ea6\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u5df2\u77e5\u7ed3\u679c\u3002  \n\u5426\u5219\u8003\u8651\u8981\u6c42\u7684\u957f\u5ea6\u662f\u5426\u5168\u90e8\u843d\u5728\u5de6\u5b50\u6811\u7684\u5de6\u4fa7\u90e8\u5206\u5185\uff0c\u5982\u679c\u662f\u5219\u76f4\u63a5\u9012\u5f52\u5de6\u5b50\u6811\u3002  \n\u5426\u5219\u5c31\u662f\u6709\u4e00\u90e8\u5206\u5728\u5de6\u5b50\u6811\u7684\u5de6\u4fa7\u90e8\u5206\u5185\uff0c\u53e6\u4e00\u90e8\u5206\u5728\u53f3\u5b50\u6811\u7684\u5de6\u4fa7\u90e8\u5206\u5185\uff0c\u4f46\u662f\u5408\u5e76\u7684\u65f6\u5019\u4f1a\u88ab\u5de6\u5b50\u6811\u7684\u53f3\u4fa7\u90e8\u5206\u62b5\u6d88\u6389\u4e00\u4e2a\u524d\u7f00\u7684\u6570\u503c\uff0c\u6240\u4ee5\u9012\u5f52\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u957f\u5ea6\u8981\u51cf\u53bb\u5de6\u5b50\u6811\u7684\u5de6\u4fa7\u90e8\u5206\u957f\u5ea6\uff0c\u4f46\u53c8\u8981\u52a0\u4e0a\u5de6\u5b50\u6811\u7684\u53f3\u4fa7\u90e8\u5206\u957f\u5ea6\uff0c\u6c42\u51fa\u540e\u518d\u62b5\u6d88\u6389\u5de6\u5b50\u6811\u7684\u53f3\u4fa7\u90e8\u5206\u7684\u4e00\u4e2a\u524d\u7f00\uff0c\u518d\u5728\u524d\u9762\u62fc\u4e0a\u5de6\u5b50\u6811\u7684\u5de6\u4fa7\u90e8\u5206\u3002\n\n\u53f3\u4fa7\u90e8\u5206\u7684\u540e\u7f00\u54c8\u5e0c\u503c\u662f\u5bf9\u79f0\u7684\u3002\u867d\u7136\u63cf\u8ff0\u8d77\u6765\u6709\u4e9b\u56f0\u96be\uff0c\u4f46\u662f\u5982\u679c\u5c01\u88c5\u4e86\u5b57\u7b26\u4e32\u54c8\u5e0c\u7684\u4e00\u4e9b\u64cd\u4f5c\uff0c\u5199\u8d77\u6765\u4f1a\u5341\u5206\u7684\u7b80\u4fbf\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u82e5\u8981\u67e5\u8be2\u6b64\u4fe1\u606f\uff0c\u6bcf\u6b21\u53ea\u4f1a\u9012\u5f52\u5230\u4e00\u4e2a\u5b50\u6811\u5185\uff0c\u6240\u4ee5\u6bcf\u6b21\u5408\u5e76\u4fe1\u606f\u7684\u590d\u6742\u5ea6\u662f $\\mathcal O (\\log n)$ \u7684\u3002\n\n\u6bcf\u6b21\u4fee\u6539\u603b\u5171\u8981\u5408\u5e76 $\\mathcal O (\\log n)$ \u6b21\u4fe1\u606f\uff0c\u603b\u590d\u6742\u5ea6\u4e3a $\\mathcal O (\\log^2 n)$\u3002**\u8fd9\u4e0e\u674e\u8d85\u7ebf\u6bb5\u6811\u6216\u7c7b\u697c\u623f\u91cd\u5efa\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\u6709\u4e9b\u76f8\u4f3c**\u3002\n\n\u8fd9\u90e8\u5206\u5c31\u662f\u4fee\u6539\u65f6\u7ebf\u6bb5\u6811\u5185\u7684\u7ef4\u62a4\u4e86\u3002\u8fd8\u9700\u8981\u8003\u8651\u8be2\u95ee\u65f6\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u8be2\u95ee\u65f6\uff0c\u4fe1\u606f\u5408\u5e76\u4e4b\u540e\u4e0d\u518d\u662f\u4e00\u4e2a\u539f\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u4e86\uff0c\u800c\u53ef\u4ee5\u770b\u4f5c\u662f\u300c\u8be2\u95ee\u65f6\u5efa\u7acb\u7684\u865a\u8282\u70b9\u300d\u3002\n\n\u56e0\u4e3a\u4fe1\u606f\u5408\u5e76\u65f6\u540c\u6837\u9700\u8981\u8fdb\u884c\u5b50\u6811\u9012\u5f52\uff0c\u5728\u4f20\u7edf\u7684\u9012\u5f52\u7ed3\u6784\u4e2d\u8fd9\u662f\u6bd4\u8f83\u96be\u4ee5\u7ef4\u62a4\u7684\u3002\n\n\u6211\u5b9e\u73b0\u65f6\u5148\u628a\u5728\u7ebf\u6bb5\u6811\u4e0a\u5b9a\u4f4d\u5230\u7684\u533a\u95f4\u62bd\u79bb\u51fa\u6765\uff0c\u4ece\u5de6\u5230\u53f3\u585e\u8fdb\u4e00\u4e2a\u6808\u4e2d\uff08\u8be6\u89c1\u4ee3\u7801\u4e2d\u7684 `Extract` \u51fd\u6570\uff09\u3002\n\n\u7136\u540e\u5229\u7528\u8be2\u95ee\u65f6\u7684\u7279\u6027\uff08\u5728\u4efb\u610f\u65f6\u523b\u524d\u7f00\u4e0d\u80fd\u542b\u6709\u5de6\u4fa7\u7684\u53f3\u62ec\u53f7\uff09\uff0c\u7ef4\u62a4\u4e00\u4e2a `seq` \u6570\u7ec4\u8fdb\u884c\u66f4\u7b80\u6613\u7684\u6a21\u62df\u3002\n\n\u6ce8\u610f\u7c7b\u4f3c `gValR` \u7684\u51fd\u6570\u8fd8\u9700\u8981\u9488\u5bf9 `seq` \u5b9e\u73b0\u4e00\u4e2a\uff0c\u5c31\u662f\u4ee3\u7801\u4e2d\u7684 `gVal` \u51fd\u6570\u3002\n\n\u5177\u4f53\u7ec6\u8282\u8be6\u89c1\u4ee3\u7801\u3002\n\n[\u8bc4\u6d4b\u8bb0\u5f55](https://codeforces.com/contest/1340/submission/78521485)\uff0c\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O (n \\log^2 n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O (n)$\uff1a\n\n```cpp\n#include <cstdio>\n\nconst int MN = 100005, MS = 1 << 18 | 7;\n\nnamespace Hashing {\n\ttypedef long long LL;\n\tconst int Mod = 998244353, B = 114514, iB = 137043501;\n\tint _w[MN * 2], *w = _w + MN;\n\tvoid Init(int N) {\n\t\tw[0] = 1;\n\t\tfor (int i = 1; i <= N; ++i)\n\t\t\tw[i] = (LL)w[i - 1] * B % Mod,\n\t\t\tw[-i] = (LL)w[-i + 1] * iB % Mod;\n\t}\n\tstruct str {\n\t\tint x, m;\n\t\tstr() { x = m = 0; }\n\t\tstr(int v) { x = v, m = 1; }\n\t\tstr(int _x, int _m) : x(_x), m(_m) {}\n\t\tfriend bool operator == (str a, str b) { return a.m == b.m && a.x == b.x; }\n\t\tfriend str operator + (str a, str b) { return str((a.x + (LL)b.x * w[a.m]) % Mod, a.m + b.m); }\n\t\tfriend str operator - (str a, str b) { return str((LL)(a.x - b.x + Mod) * w[-b.m] % Mod, a.m - b.m); }\n\t};\n}\nusing Hashing::str;\n\nint N, Q;\n\n#define li (i << 1)\n#define ri (li | 1)\n#define mid ((l + r) >> 1)\n#define ls li, l, mid\n#define rs ri, mid + 1, r\nstruct dat {\n\tbool err;\n\tstr vl, vr;\n\tdat() { err = 0; }\n\tdat(int x) { err = 0; x > 0 ? vr = str(x) : vl = str(-x); }\n} tr[MS];\nstr gValL(int i, int k) {\n\tif (!k) return str();\n\tif (k == tr[i].vl.m) return tr[i].vl;\n\tif (k <= tr[li].vl.m) return gValL(li, k);\n\treturn tr[li].vl + (gValL(ri, k - tr[li].vl.m + tr[li].vr.m) - tr[li].vr);\n}\nstr gValR(int i, int k) {\n\tif (!k) return str();\n\tif (k == tr[i].vr.m) return tr[i].vr;\n\tif (k <= tr[ri].vr.m) return gValR(ri, k);\n\treturn tr[ri].vr + (gValR(li, k - tr[ri].vr.m + tr[ri].vl.m) - tr[ri].vl);\n}\nvoid Upd(int i) {\n\tif (tr[li].err || tr[ri].err) return tr[i].err = 1, void();\n\ttr[i].err = 0;\n\ttr[i].vl = tr[li].vl;\n\ttr[i].vr = tr[ri].vr;\n\tif (tr[li].vr.m <= tr[ri].vl.m) {\n\t\tif (tr[li].vr == gValL(ri, tr[li].vr.m))\n\t\t\ttr[i].vl = tr[i].vl + (tr[ri].vl - tr[li].vr);\n\t\telse tr[i].err = 1;\n\t} else {\n\t\tif (tr[ri].vl == gValR(li, tr[ri].vl.m))\n\t\t\ttr[i].vr = tr[i].vr + (tr[li].vr - tr[ri].vl);\n\t\telse tr[i].err = 1;\n\t}\n}\nvoid Build(int i, int l, int r) {\n\tif (l == r) {\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\ttr[i] = x;\n\t\treturn ;\n\t}\n\tBuild(ls), Build(rs);\n\tUpd(i);\n}\nvoid Mdf(int i, int l, int r, int p, int x) {\n\tif (l == r) return tr[i] = x, void();\n\tp <= mid ? Mdf(ls, p, x) : Mdf(rs, p, x);\n\tUpd(i);\n}\n\nint stk[45], tp;\nvoid Extract(int i, int l, int r, int a, int b) {\n\tif (r < a || b < l) return ;\n\tif (a <= l && r <= b) return stk[++tp] = i, void();\n\tExtract(ls, a, b), Extract(rs, a, b);\n}\nstr seq[45];\nstr gVal(int i, int k) {\n\tif (!k) return str();\n\tif (k == seq[i].m) return seq[i];\n\tif (k <= tr[stk[i]].vr.m) return gValR(stk[i], k);\n\treturn tr[stk[i]].vr + (gVal(i - 1, k - tr[stk[i]].vr.m + tr[stk[i]].vl.m) - tr[stk[i]].vl);\n}\nbool Qur(int l, int r) {\n\ttp = 0, Extract(1, 1, N, l, r);\n\tfor (int i = 1; i <= tp; ++i) {\n\t\tif (tr[stk[i]].err) return 0;\n\t\tif (seq[i - 1].m < tr[stk[i]].vl.m) return 0;\n\t\tif (tr[stk[i]].vl == gVal(i - 1, tr[stk[i]].vl.m))\n\t\t\tseq[i] = tr[stk[i]].vr + (seq[i - 1] - tr[stk[i]].vl);\n\t\telse return 0;\n\t}\n\treturn !seq[tp].m;\n}\n\nint main() {\n\tscanf(\"%d%*d\", &N);\n\tHashing::Init(N);\n\tBuild(1, 1, N);\n\tscanf(\"%d\", &Q);\n\twhile (Q--) {\n\t\tint t, x, y;\n\t\tscanf(\"%d%d%d\", &t, &x, &y);\n\t\tif (t == 1) Mdf(1, 1, N, x, y);\n\t\telse puts(Qur(x, y) ? \"Yes\" : \"No\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1588203628,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1340F \u3010Nastya and CBS\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$ \u548c\u4e00\u4e2a\u5e38\u6570 $k$\uff0c\u8fdb\u884c $q$ \u6b21\u64cd\u4f5c\uff1a\n\n1. \u5c06 $a_x$ \u4fee\u6539\u4e3a $y$\u3002\n2. \u8be2\u95ee\u5e8f\u5217 $a_l,a_{l+1},\\dots,a_r$ \u662f\u5426\u662f\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u5728\u672c\u9898\u4e2d\uff0c\u5b9a\u4e49\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u5982\u4e0b\uff1a\n\n1. \u7a7a\u5e8f\u5217\u662f\u5408\u6cd5\u7684\u3002\n2. \u5982\u679c $A,B$ \u90fd\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48 $AB$ \u4e5f\u662f\u5408\u6cd5\u7684\u3002\n3. \u5982\u679c $A$ \u662f\u5408\u6cd5\u7684\u5e76\u4e14\u6709 $x>0$\uff0c\u90a3\u4e48 $x\\ A\\ -x$ \u4e5f\u662f\u5408\u6cd5\u7684\u3002\n\n$1\\leq k\\leq n\\leq 10^5,1\\leq q\\leq 10^5,a_i\\in[-k,-1]\\cup[1,k]$\u3002\n\n---\n\n\u901a\u8fc7\u7ef4\u62a4\u4e00\u4e2a\u6808\u7684\u5f39\u51fa\u548c\u63d2\u5165\uff0c\u53ef\u4ee5\u5224\u65ad\u4e00\u4e2a\u5e8f\u5217\u662f\u4e0d\u662f\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u5c06\u5e8f\u5217\u5206\u5757\u540e\u7528\u6808\u5728\u5757\u5185\u8fdb\u884c\u62ec\u53f7\u5339\u914d\u3002\u5982\u679c\u5728\u5339\u914d\u62ec\u53f7\u65f6\u51fa\u73b0\u5931\u914d\uff0c\u5219\u5305\u542b\u8fd9\u4e2a\u5757\u7684\u533a\u95f4\u4e00\u5b9a\u975e\u6cd5\uff0c\u5426\u5219\u4f1a\u5f97\u5230\u82e5\u5e72\u672a\u5339\u914d\u4e0a\u7684\u53f3\u62ec\u53f7\u548c\u5de6\u62ec\u53f7\uff1a$))))(((($\n\n\u5728\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u4ece\u5de6\u5f80\u53f3\u6a21\u62df\u63d2\u5165\u6808\u7684\u8fc7\u7a0b\u3002\u5bf9\u4e8e\u63d2\u5165\u6574\u5757\uff0c\u5c31\u76f8\u5f53\u4e8e\u5339\u914d\u4e00\u6bb5\u53f3\u62ec\u53f7\u518d\u63d2\u5165\u4e00\u6bb5\u5de6\u62ec\u53f7\u3002\u4e3a\u4e86\u5feb\u901f\u5224\u65ad\u4e00\u6bb5\u53f3\u62ec\u53f7\u548c\u4e00\u6bb5\u5de6\u62ec\u53f7\u662f\u5426\u80fd\u5339\u914d\uff0c\u53ef\u4ee5\u4f7f\u7528 hash\uff0c\u590d\u6742\u5ea6\u4e3a $O(\\sqrt{n})$\u3002\n\n\u4fee\u6539\u7684\u65f6\u5019\u66b4\u529b\u91cd\u6784\u6c42\u51fa\u8fd9\u4e2a\u5757\u5339\u914d\u5b8c\u540e\u5269\u4e0b\u7684\u4e24\u6bb5\u62ec\u53f7\uff0c\u590d\u6742\u5ea6\u4e3a $O(\\sqrt{n})$\u3002\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u5728 $O((n+q)\\sqrt{n})$ \u7684\u65f6\u95f4\u5185\u89e3\u51b3\u672c\u9898\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define I inline int\n#define V inline void\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define ROF(i,a,b) for(int i=a;i<=b;i++)\nconst int N=1e5+1,K=500,mod=998244353;\nconst char ans[2][5]={\"No\\n\",\"Yes\\n\"};\nint n,m,q,tot;\nint a[N],pw[N],inv[N];\nstruct node{\n\tint*s,len;\n\tnode(){s=NULL,len=0;}\n\tI val(){return s[len];}\n\tI calc(int x){return 1ll*(s[len]-s[len-x]+mod)*inv[len-x]%mod;}\n\tI del(int v,int x){return calc(x)==v&&(len-=x,1);}\n\tI ins(int x){\n\t\tif(x>0)return s[len+1]=(1ll*x*pw[len]+s[len])%mod,++len;\n\t\telse return!len||calc(1)==-x&&len--;\n\t}\n}sta[N];\nI get(int l,int r,int d,node&out){\n\tstatic int p,tmp[4][K+1];\n\tif(out.s==NULL)out.s=tmp[p],p=p+1&3;\n\tfor(out.len=0;l!=r+d;l+=d)if(!out.ins(a[l]*d))return 0;\n\treturn 1;\n}\nI pop(node x){\n\tfor(int len;tot&&x.len;x.len-=len){\n\t\tlen=min(x.len,sta[tot].len);\n\t\tif(!sta[tot].del(x.calc(len),len))return 0;\n\t\ttot-=!sta[tot].len;\n\t}\n\treturn!x.len;\n}\nV push(node x){if(x.len)sta[++tot]=x;}\nstruct block{\n\tint L,R,need,tag,f[K+1],g[K+1];\n\tnode pre,nxt;\n\tV init(int l,int r){L=l,R=r,need=1,pre.s=f,nxt.s=g;}\n\tV build(){if(need)need=0,tag=get(R,L,-1,pre)&&get(L,R,1,nxt);}\n\tI solve(int l,int r){\n\t\tif(R<l||L>r)return 1;\n\t\tint out;node x,y;\n\t\tl=max(L,l),r=min(R,r);\n\t\tif(L==l&&r==R)build(),x=pre,y=nxt,out=tag;\n\t\telse out=get(r,l,-1,x)&&get(l,r,1,y);\n\t\treturn out&&pop(x)&&(push(y),1);\n\t}\n}t[N/K+1];\nV input(){\n\tscanf(\"%d%d\",&n,&m);\n\tFOR(i,1,n)scanf(\"%d\",a+i);\n}\nV init(){\n\tpw[0]=inv[0]=1,pw[1]=19260817,inv[1]=494863259,m=0;\n\tFOR(i,2,n)pw[i]=1ll*pw[i-1]*pw[1]%mod,inv[i]=1ll*inv[i-1]*inv[1]%mod;\n\tfor(int l=1,r;l<=n;l=r+1)r=min(n,l+K-1),t[++m].init(l,r);\n}\nI ask(int l,int r){\n\tif(tot=0,r-l+1&1)return 0;\n\tFOR(i,1,m)if(!t[i].solve(l,r))return 0;\n\treturn!tot;\n}\nV work(){\n\tscanf(\"%d\",&q);\n\tfor(int opt,x,y;q--;){\n\t\tscanf(\"%d%d%d\",&opt,&x,&y);\n\t\tif(opt==1)a[x]=y,t[(x-1)/K+1].need=1;\n\t\telse cout<<ans[ask(x,y)];\n\t}\n}\nint main(){\n\tinput();\n\tinit();\n\twork();\n\treturn 0;\n}\n```\n\n~~\u8fd9\u53ef\u80fd\u662f\u6211\u505a\u8fc7\u6700\u7b80\u5355\u7684 F \u4e86~~\n\n\n\n",
        "postTime": 1588056772,
        "uid": 109236,
        "name": "Fuyuki",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1340F \u3010Nastya and CBS\u3011"
    },
    {
        "content": "\u9996\u5148\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u4e00\u6bb5\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u6839\u636e\u89c2\u5bdf\u53ef\u77e5\uff0c\u5bf9\u4e00\u4e2a\u62ec\u53f7\u5e8f\u5217\u6765\u8bf4\uff0c\u82e5\u5b58\u5728\u8fd9\u79cd\u5f62\u5f0f '{ )' \u5219\u5305\u542b\u8be5\u533a\u6bb5\u7684\u8be2\u95ee\u5747\u4e0d\u5408\u6cd5\uff0c\u53cd\u4e4b\u4e0d\u5b58\u5728\u5219\u8bf4\u660e\u53ef\u80fd\u6784\u6210\u5408\u6cd5\u7684\u89e3\u3002\u8fd9\u542f\u53d1\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u6bb5\u90fd\u8fdb\u884c\u8fd9\u6837\u7684\u7f29\u533a\u95f4\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\u5c06\u5176\u5168\u90e8\u62fc\u5728\u4e00\u8d77\uff0c\u5728\u62fc\u7684\u65f6\u5019\u8003\u8651\u4e00\u4e0b\u662f\u5426\u6ee1\u8db3\u4e0a\u8ff0\u60c5\u51b5\u3002\n\n\u5bf9\u4e8e\u7684\u5224\u65ad\u4e24\u4e2a\u62ec\u53f7\u5e8f\u5217\u662f\u5426\u76f8\u540c\u65f6\u91c7\u7528 Hash \u7ef4\u62a4\uff0c\u5177\u4f53\u6765\u8bf4\u7ef4\u62a4\u4e00\u4e2a\u5de6\u5411\u5f00\u59cb\u7684 Hash \u548c\u53f3\u5411\u5f00\u59cb\u7684 Hash\uff0c\u540c\u79cd\u62ec\u53f7\u4e0d\u540c\u65b9\u5411\u7528\u7edd\u5bf9\u503c\u5373\u53ef\n\n\u9488\u5bf9\u4e0a\u8ff0\u89e3\u6cd5\uff0c\u5206\u5757\u65e0\u7591\u662f\u6700\u597d\u5199\u7684\uff0c\u8fd9\u4e5f\u662f\u5927\u591a\u6570\u9898\u89e3\u91c7\u7528\u7684\u65b9\u6cd5\uff0c\uff0c\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt n)$ \uff08\u8fd9\u91cc\u9ed8\u8ba4 $n$ \u4e0e $q$ \u540c\u9636\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u5b98\u65b9\u9898\u89e3\u505a\u6cd5\uff1a\u7ebf\u6bb5\u6811\u5957\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\n\\log^2n)$,\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n + q\\log n)$\u3002\u5e76\u4e14\u56e0\u4e3a\u6211\u592a\u83dc\u4e86\uff0c\u4e0d\u4f1a\u968f\u65f6\u56de\u6536\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u662f\u6bcf $10^4$ \u6b21\u626b\u4e00\u904d\u7ebf\u6bb5\u6811\u627e\u51fa\u6240\u6709\u5e9f\u5f03\u8282\u70b9\uff0c\u56de\u6536\u518d\u5229\u7528\u3002\uff08\u7528\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u5b9e\u73b0\u7ec6\u8282\u8fd8\u633a\u591a\u7684\uff0c\u8fd8\u662f\u5206\u5757\u597d\u5199\n\n\u867d\u7136\u770b\u8d77\u6765\u662f\u8fd9\u73a9\u610f\u590d\u6742\u5ea6\u66f4\u4f18\uff0c\u4f46\u5b83\u5e38\u6570\u5b9e\u5728\u662f\u592a\u5927\u4e86\u2026\u2026\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define INF 1ll<<30\n#define ill unsigned int\n\ntemplate<typename _T>\ninline void read(_T &x)\n{\n\tx=0;char s=getchar();int f=1;\n\twhile(s<'0'||s>'9') {f=1;if(s=='-')f=-1;s=getchar();}\n\twhile('0'<=s&&s<='9'){x=(x<<3)+(x<<1)+s-'0';s=getchar();}\n\tx*=f;\n}\nconst int np = 1e5 + 5;\ntemplate<typename _T>\ninline _T Abs(_T &x)\n{\n\treturn x < 0?-x:x;\n}\nint pare[np];\nconst int qt = 90;\nint ch[2][qt * np],pri[np * qt],val[np * qt];\nill Hashl[np * qt],Hashr[np * qt];\nconst ill base = 29;\nbitset<np * 90> use;\nill p_[np];\nint siz[np * qt],tail = 1;//,cnt;//,tail;//,rot[23333]cnt;\n#define ls(x) (ch[0][x])\n#define rs(x) (ch[1][x])\n\ninline int Rub()\n{\n\twhile(use[tail]) tail++;\n\treturn tail++;\n}\n\ninline int New(int a)\n{\n//\t++cnt;\n\tint cnt;\n\tcnt = Rub();\n\tval[cnt] = a;\n\tHashl[cnt] = Hashr[cnt] = Abs(a);\n\tls(cnt) =rs(cnt) = 0;\n\tpri[cnt] = rand();\n\tsiz[cnt] = 1;\n\treturn cnt;\n}\n\ninline void cop(int x,int y)\n{\n\tls(x) = ls(y),rs(x) = rs(y);\n\tpri[x] = pri[y],val[x] = val[y];\n\tHashl[x] = Hashl[y],Hashr[x] = Hashr[y];\n\tsiz[x] = siz[y];\n}\n\ninline void pushup(int x)\n{\n\tsiz[x] = siz[ls(x)] + siz[rs(x)] + 1;\n\tHashl[x] = Hashl[rs(x)] + p_[siz[rs(x)]] * Abs(val[x]) + p_[(siz[rs(x)] + 1)] * Hashl[ls(x)]; // \u5de6\u8fb9\u6bd4\u8f83\u9ad8\u7684\u54c8\u5e0c \n\tHashr[x] = Hashr[ls(x)] + p_[siz[ls(x)]] * Abs(val[x]) + p_[(siz[ls(x)] + 1)] * Hashr[rs(x)]; // \u53f3\u8fb9\u6bd4\u8f83\u9ad8\u7684\u54c8\u5e0c \n}\n//int flag = 0;\n//inline void Debug(){int op;return;}\ninline void split(int now,int k,int &x,int &y)\n{\n//\tif(flag == 2333) Debug();\n\tif(!now) return (void)(x = y = 0);\n\tif(siz[ls(now)] + 1 <= k)\n\t{\n\t\tx = now;\n\t\tsplit(rs(now),k - siz[ls(now)] - 1,rs(x),y);\n\t}\n\telse\n\t{\n\t\ty = now;\n\t\tsplit(ls(now),k,x,ls(y));\n\t}\n\tpushup(now);\n}\n\ninline int Merge(int x,int y)\n{\n\tif(!x || !y) return x | y;\n\tif(pri[x] < pri[y])\n\t{\n\t\trs(x) = Merge(rs(x),y);\n\t\tpushup(x);\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tls(y) = Merge(x,ls(y));\n\t\tpushup(y);\n\t\treturn y;\n\t}\n}\n\ninline void split_(int now,int k,int &x,int &y)\n{\n//\tif(flag == 23) Debug(); \n\tif(!now) return (void)(x = y = 0);\n\tif(siz[ls(now)] + 1 <= k)\n\t{\n\t\tx = Rub();//++cnt;\n\t\tcop(x,now);\n\t\tsplit_(rs(x),k - siz[ls(now)] - 1,rs(x),y);\n\t\tpushup(x);\n\t}\n\telse\n\t{\n\t\ty = Rub();//++cnt;\n\t\tcop(y,now);\n\t\tsplit_(ls(y),k,x,ls(y));\n\t\tpushup(y);\n\t}\n}\n\n#define Merge_ Merge\n\ninline ill lHash(int p,int l,int r)\n{\n\tif(l > r) return 0;\n\tint x,y,z;\n\till Ans(0);\n\tsplit(p,r,x,y);\n\tsplit(x,l-1,x,z);\n\tAns = Hashl[z];\n\tp = Merge(Merge(x,z),y);\n\treturn Ans;\n}\n\n//int flag = 0;\ninline ill rHash(int p,int l,int r)//\u5408\u5e76\u5206\u88c2\u4e4b\u540e\u6811\u7684\u5f62\u6001\u662f\u4e0d\u53d8\u7684\u6240\u4ee5\u4e0d\u7528\u65b0\u5efa\u8282\u70b9\n{\n//\tif(flag && l == 2 && r == 3) Debug();//flag = 2333,cerr<<siz[x]<<'\\n',\n\tif(l > r) return 0;\n\tint x,y,z;\n\till Ans(0);\n\tsplit(p,r,x,y);\n//\tflag = 1;\n\tsplit(x,l-1,x,z);\n\tAns = Hashr[z];\n\tp = Merge(Merge(x,z),y);\n\treturn Ans;\n}\n\ninline void FHQ_rec(int x)\n{\n\tif(ls(x)) FHQ_rec(ls(x));\n\tuse[x] = 1;\n\tif(rs(x)) FHQ_rec(rs(x));\n}\n\nstruct trans{\n\tint id,l_,r_;\n};\n\nstruct Node{//\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u5e73\u8861\u6811\u4e2d\u7ef4\u62a4\u6240\u6709\u5b57\u7b26\u4e32\n//\u540c\u65f6\u7ef4\u62a4\u5de6\u5411\u54c8\u5e0c\u548c\u53f3\u5411\u54c8\u5e0c \n//\tint l,r;\n\tint rt;\n\tshort typ;\n\tint sl,sr;\n\tNode *ls,*rs;\n//\tint ls,rs;\n\t\n\tinline void rec()\n\t{\n\t\tif(ls) ls->rec();\n\t\tFHQ_rec(rt);\n\t\tif(rs) rs->rec();\n\t } \n//\t#define LS(x) \n\tinline void cl(){rt = typ = sl = sr = 0;}\n\tinline bool inrange(int l,int r,int L,int R){return L <= l && r <= R;}\n\tinline bool outofrange(int l,int r,int L,int R){return r < L || R < l;}\n\tinline int debug(){int op =1;return op;}\n\tinline void pushup() // pushup -> O()\n\t{\n//\t\tif(flag && l == 1 && r == 5) debug(),flag = 23;\n\t\ttyp = ls->typ & rs->typ;\n\t\tif(!typ) return;\n\t\tint ql , qr , q;\n\t\tql = ls->sr,qr = rs->sl;\n\t\tq = min(ql,qr);\n\t\till a1 = lHash(rs->rt,1,q);\n\t\till a2 = rHash(ls->rt,siz[ls->rt] - q + 1,siz[ls->rt]);\n\t\tif(a1 == a2)\n\t\t{\n\t\t\tint x,y,a,b;\n\t\t\tsplit_(ls->rt,siz[ls->rt] - q,x,y);\n\t\t\tsplit_(rs->rt,q,a,b);\n\t\t\trt = Merge_(x,b);\n//\t\t\tprintf(\"ls->sl = %d ls->sr = %d q = %d\\n\",ls->sl,ls->sr,q);\n//\t\t\tprintf(\"rs->sl = %d rs->sr = %d q = %d\\n\",rs->sl,rs->sr,q);\n\t\t\tsl =ls->sl + qr - q;\n\t\t\tsr =rs->sr + ql - q;\n//\t\t\tprintf(\"rt = %d sl = %d sr = %d l = %d r = %d typ = %d\\n\",rt,sl,sr,l,r,typ);\n\t\t}\n\t\telse typ = 0;\n\t}\n\t\n\tinline trans query(int l,int r,int L,int R)\n\t{\n\t\tif(inrange(l,r,L,R))\n\t\t{\n\t\t\treturn typ?(trans){rt,sl,sr}:(trans){-2,0,0};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!outofrange(l,r,L,R))\n\t\t\t{\n\t\t\t\tint mid = l + r >> 1;\n\t\t\t\ttrans op1 = ls->query(l,mid,L,R),op2 = rs->query(mid+1,r,L,R);\n\t\t\t\tint r1 = op1.id;\n\t\t\t\tint r2 = op2.id;\n\t\t\t\tint x,y,a,b;\n\t\t\t\tif(r1 == -2 || r2 == -2) return (trans){-2,0,0};\n\t\t\t\tif(r1 != -1 && r2 != -1) \n\t\t\t\t{\n\t\t\t\t\tint ql,qr,q;\n\t\t\t\t\tql = op1.r_;\n\t\t\t\t\tqr = op2.l_;\n\t\t\t\t\tq = min(ql,qr);\n\t\t\t\t\till a1,a2;\n\t\t\t\t\ta1 = lHash(r2,1,q);\n\t\t\t\t\ta2 = rHash(r1,siz[r1] - q + 1,siz[r1]);\n\t\t\t\t\tif(a1 == a2)\n\t\t\t\t\t{\n\t\t\t\t\t\tsplit_(r1,siz[r1] - q,x,y);\n\t\t\t\t\t\tsplit_(r2,q,a,b);\n\t\t\t\t\t\treturn (trans){Merge_(x,b),op1.l_ + qr - q,op2.r_ + ql - q};\n\t\t\t\t\t}\n\t\t\t\t\telse return (trans){-2,0,0};\n\t\t\t\t}\n\t\t\t\telse if(r1 != -1) return op1;\n\t\t\t\telse if(r2 != -1) return op2;\n\t\t\t\t\n\t\t\t}\n\t\t\telse return (trans){-1,0,0};\n\t\t}\n\t}\n\t\n\tinline void upd(int l,int r,int pos,int vl)\n\t{\n\t\tif(inrange(l,r,pos,pos))\n\t\t{\n\t\t\tcl();\n\t\t\trt = New(vl);\n//\t\t\tsl = sr = 0;\n\t\t\tif(vl > 0) typ = sr = 1;\n\t\t\telse typ = sl = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!outofrange(l,r,pos,pos))\n\t\t\t{\n\t\t\t\tint mid = l + r >> 1;\n\t\t\t\tls->upd(l,mid,pos,vl);\n\t\t\t\trs->upd(mid+1,r,pos,vl);\n\t\t\t\tcl();\n\t\t\t\tpushup();\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n}mem[np * 2],*pool = mem,*rot;\ninline Node *New(){return ++pool;}\ninline Node *build(int L,int R)\n{\n\tNode *u = New();\n//\tu->l = L,u->r = R;\n\tif(L == R)\n\t{\n\t\tu->ls = u->rs = NULL;\n\t\tu->rt = New(pare[L]);\n\t\tif(pare[L] > 0) u->typ = u->sr = 1;\n\t\telse u->typ=u->sl = 1;\n\t}\n\telse\n\t{\n\t\tint mid = L + R >> 1;\n\t\tu->ls = build(L,mid);\n\t\tu->rs = build(mid + 1,R);\n\t\tu->pushup();\n\t}\n\treturn u;\n}\n\nsigned  main()\n{\n\tint n,k,q;\n\tp_[0] = 1;\n//\tcout<<\"*\";\n//\tcerr<<n<<\" \";\n\tfor(int i=1;i<=1e5;i++) p_[i] = p_[i - 1] * base;//cerr<<\"*\";\n\tread(n);\n\tread(k);//cerr<<\"*\";\n//\tcerr<<n<<'\\n';\n\tfor(int i=1;i<=n;i++) read(pare[i]);//,cerr<<i<<\" \";\n//\tcerr<<\"*\";//scanf(\"%d\",&pare[i]);cerr<<\"*\";//read(pare[i]),cerr<<\"*\";\n//\tcout<<\"*\";\n\trot = build(1,n);\n\tread(q);\n\t\n//\tq = 30746;\n\tfor(int i=1,opt,pos,vl,l,r;i <= q;i++)\n\t{\n//\t\tif(i == 30742) flag = 1;\n//\t\telse flag = 0;\n\t\tread(opt);\n\t\tswitch(opt)\n\t\t{\n\t\t\tcase 1:{\n\t\t\t\tread(pos);\n\t\t\t\tread(vl);\n//\t\t\t\tif(flag) rot->upd_(pos,vl);\n//\t\t\t\telse \n\t\t\t\trot->upd(1,n,pos,vl);\n//\t\t\t\tpare[pos] = vl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:{\n//\t\t\t\tcout<<i<<\" \";\n\t\t\t\tread(l);\n\t\t\t\tread(r);\n\t\t\t\ttrans ans = rot->query(1,n,l,r);\n\t\t\t\tif(ans.id == -2) printf(\"No\\n\");\n\t\t\t\telse if(ans.l_ || ans.r_) printf(\"No\\n\");\n\t\t\t\t\n\t\t\t\telse printf(\"Yes\\n\");\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(i % 10000 == 0) \n\t\t{\n\t\t\tuse.reset();\n\t\t\trot->rec();\n\t\t\ttail = 1;\n\t\t}\n\n//\t\tprintf(\"rt = %d sl = %d sr = %d typ = %d\\n\",rot->rt,rot->sl,rot->sr,rot->typ);\n\t\t\t\t\n\t}\n\treturn 0;\n }\n```\n\n\u6572\u4e86 400+ \u884c\uff0c\u771f\u662f\u5410\u4e86\uff08\u5176\u5b9e\u8fd8\u662f\u4ee3\u7801\u80fd\u529b\u4e0d\u884c\n\n\n",
        "postTime": 1627826154,
        "uid": 307042,
        "name": "\u4e00Iris\u4e00",
        "ccfLevel": 7,
        "title": "CF1340F Nastya and CBS"
    },
    {
        "content": "[Codeforces \u9898\u9762\u4f20\u9001\u95e8](https://codeforces.ml/contest/1340/problem/F) & [\u6d1b\u8c37\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1340F)\n\n\u9996\u5148\u770b\u5230\u8fd9\u6837\u7684\u6570\u636e\u8303\u56f4\u6211\u4eec\u53ef\u4ee5\u8003\u8651**\u5206\u5757**\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5757\u6211\u4eec\u8bb0\u5f55\u5176\u4e2d\u7684\u62ec\u53f7\u662f\u5426\u80fd\u5b8c\u5168\u6d88\u6389\uff0c\u4ee5\u53ca\u5bf9\u5176\u8fdb\u884c\u62ec\u53f7\u76f8\u6d88\u4e4b\u540e\u7684\u62ec\u53f7\u5e8f\u5217\uff08\u663e\u7136\u662f\u4e00\u6bb5\u53f3\u62ec\u53f7\u63a5\u4e0a\u4e00\u6bb5\u5de6\u62ec\u53f7\uff09\u957f\u4ec0\u4e48\u6837\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u5757\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u5728 $\\mathcal O(\\sqrt{n})$ \u7684\u65f6\u95f4\u5185\u5bf9\u5176\u6c42\u51fa\u5176\u8fdb\u884c\u91cd\u6784\uff0c\u56e0\u6b64\u6bcf\u6b21\u4fee\u6539\u5b8c\u90fd\u91cd\u6784\u4e00\u904d\u590d\u6742\u5ea6\u662f\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898\u7684\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u600e\u6837\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u662f\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u5bf9\u4e8e\u6b64\u9898\u800c\u8a00\u6bd4\u8f83\u6076\u5fc3\u7684\u4e00\u70b9\u662f\uff0c\u5f53\u6211\u4eec\u5408\u5e76\u4e24\u4e2a\u5757 $x,y$ \u65f6\uff0c\u8981\u5bf9\u4e24\u4e2a\u5757\u4e2d\u95f4\u7684\u90e8\u5206\u8fdb\u884c\u62ec\u53f7\u76f8\u6d88\u65f6\u66b4\u529b\u8dd1\u590d\u6742\u5ea6\u662f $\\sqrt{n}$ \u5730\uff0c\u518d\u52a0\u4e0a\u603b\u5171\u67e5\u8be2\u53ef\u80fd\u4f1a\u8fbe\u5230 $\\sqrt{n}$ \u4e2a\u5757\uff0c\u5355\u6b21\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u53c8\u9000\u5316\u5230\u4e86 $\\mathcal O(n)$\uff0c\u7a33\u7a33\u5730 T \u6389\u3002\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u662f\u6307\u9488\uff0c\u53ef\u4f5c\u4e3a\u4e00\u540d\u4ece\u521a\u5b66 OI \u5f00\u59cb\u5c31\u4e0d\u559c\u6b22\u6307\u9488\u7684\u9009\u624b\u81ea\u7136\u662f\u4e0d\u4f1a\u9009\u62e9\u8fd9\u6837\u7684\u5199\u6cd5\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u4e0d\u7528\u6307\u9488\u7684\u5199\u6cd5\u3002\u8003\u8651\u6211\u4eec\u66b4\u529b\u5408\u5e76\u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5757\u800c\u8a00\u6211\u4eec\u80af\u5b9a\u662f\u5148\u7528\u8fd9\u4e00\u5757\u7684\u4e00\u6bb5\u53f3\u62ec\u53f7\u53bb\u6d88\u524d\u9762\u7684\u4e00\u6bb5\u5de6\u62ec\u53f7\uff0c\u518d\u52a0\u5165\u4e00\u6bb5\u53f3\u62ec\u53f7\uff0c\u800c\u5982\u679c\u6211\u4eec\u628a\u6bcf\u6b21\u52a0\u5165\u7684\u4e00\u6bb5\u53f3\u62ec\u53f7\u89c6\u4e3a\u4e00\u4e2a\u8fde\u7eed\u6bb5\u7684\u8bdd\uff0c\u90a3\u4e48\u6bcf\u6b21\u6d88\u9664\u5de6\u62ec\u53f7\u65f6\u6700\u591a\u5c06\u4e00\u4e2a\u5de6\u62ec\u53f7\u7684\u8fde\u7eed\u6bb5\u5288\u6210\u4e24\u6bb5\u3002\u8fd9\u6837\u601d\u8def\u4e0d\u5c31\u51fa\u6765\u4e86\u5417\uff0c\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u5757\uff0c\u5c06\u8fd9\u4e00\u5757\u6d88\u9664\u540e\u5269\u4f59\u7684\u5de6\u62ec\u53f7\u538b\u5165\u4e00\u4e2a `vector`\uff0c\u5e76\u7528\u4e00\u4e2a\u4e09\u5143\u7ec4 $(x,l,r)$ \u63cf\u8ff0\u4e00\u4e2a\u8fde\u7eed\u6bb5\uff0c\u8868\u793a\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u662f\u7b2c $x$ \u5757\u6d88\u9664\u540e\u5269\u4f59\u7684\u5de6\u62ec\u53f7\u5e8f\u5217\u7684\u7b2c $l$ \u81f3\u7b2c $r$ \u4e2a\u5143\u7d20\uff0c\u7136\u540e\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u6808\u5b58\u50a8\u8fd9\u4e9b\u4e09\u5143\u7ec4\u5b58\u50a8\u8fd9\u4e9b\u672a\u6d88\u5b8c\u7684\u62ec\u53f7\u7ec4\u6210\u7684\u8fde\u7eed\u6bb5\uff0c\u8fd9\u6837\u6bcf\u6b21\u4e0e\u4e00\u6bb5\u957f\u5ea6\u4e3a $L$ \u7684\u53f3\u62ec\u53f7\u5e8f\u5217\u8fdb\u884c\u6d88\u9664\u65f6\u53ea\u9700\u53d6\u51fa\u6808\u9876\u7684 $L$ \u4e2a\u5143\u7d20\uff0c\u54c8\u5e0c\u5224\u65ad\u62ec\u53f7\u5e8f\u5217\u662f\u5426\u76f8\u7b49\u5373\u53ef\uff0c\u5982\u679c\u6700\u540e\u4e00\u6bb5\u6d88\u5b8c\u540e\u8fd8\u6709\u5269\u4f59\u5c31\u5c06\u5269\u4f59\u90e8\u5206\u538b\u5165\u6808\u4e2d\u3002\u6839\u636e\u4e4b\u524d\u7684\u63a8\u8bba\uff0c\u6bcf\u4e2a\u4e09\u5143\u7ec4\u6070\u597d\u8fdb\u51fa\u6808\u5404\u4e00\u6b21\uff0c\u800c\u6bcf\u6b21\u6d88\u9664\u6700\u591a\u589e\u52a0\u4e00\u4e2a\u4e09\u5143\u7ec4\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u662f\u4e25\u683c $\\mathcal O(m\\sqrt{n})$ \u7684\u3002\n\n\u7ec6\u8282\u6709\u4e00\u70b9\u70b9\u591a\uff0c\u4e0d\u8fc7\u76f8\u4fe1\u806a\u660e\u7684\u8bfb\u8005\u4eec\u5b9a\u80fd\u591f\u5c06\u6bcf\u79cd\u60c5\u51b5\u90fd\u5206\u6790\u6e05\u695a\uff08\n\n```cpp\nconst int MAXN=1e5;\nconst int BLK=316;\nconst u64 B=191;\nu64 pw[MAXN+5];\nint n,k,qu,a[MAXN+5],blk_cnt,blk_sz;\nint bel[MAXN+5],L[BLK+5],R[BLK+5];\nbool ok[BLK+5];\nvector<int> lft[BLK+5],rit[BLK+5];\nvector<u64> lft_hs[BLK+5];u64 rit_hs[BLK+5];\nstruct node{int x,l,r;u64 hs;};\nu64 gethash(int x,int l,int r){\n\treturn (lft_hs[x][l]-((r+1==lft[x].size())?0:lft_hs[x][r+1]*pw[r-l+1]));\n}\nvoid redone(int x){\n\tstack<int> stk;ok[x]=1;lft[x].clear();rit[x].clear();\n\tfor(int i=L[x];i<=R[x];i++){\n\t\tif(a[i]<0){\n\t\t\tif(!stk.empty()&&stk.top()^(-a[i])) return ok[x]=0,void();\n\t\t\telse if(stk.empty()) rit[x].pb(-a[i]);else stk.pop();\n\t\t} else stk.push(a[i]);\n\t} while(!stk.empty()) lft[x].pb(stk.top()),stk.pop();\n\tlft_hs[x].resize(lft[x].size(),0);rit_hs[x]=0;\n\tfor(int i=(int)(lft[x].size())-1;~i;i--) lft_hs[x][i]=((i+1==lft[x].size())?0:lft_hs[x][i+1])*B+lft[x][i];\n\tfor(int i=0;i<rit[x].size();i++) rit_hs[x]+=rit[x][i]*pw[i];\n//\tprintf(\"Block %d:\\n\",x);\n//\tfor(int i=0;i<lft[x].size();i++) printf(\"%d \",lft[x][i]);printf(\"\\n\");\n//\tfor(int i=0;i<rit[x].size();i++) printf(\"%d \",rit[x][i]);printf(\"\\n\");\n}\nbool query(int l,int r){\n\tif(bel[l]==bel[r]){\n\t\tstack<int> stk;\n\t\tfor(int i=l;i<=r;i++){\n\t\t\tif(a[i]<0){\n\t\t\t\tif(stk.empty()||stk.top()^(-a[i])) return 0;\n\t\t\t\tstk.pop();\n\t\t\t} else stk.push(a[i]);\n\t\t} return stk.empty();\n\t} for(int i=bel[l]+1;i<bel[r];i++) if(!ok[i]) return 0;\n\tstack<node> stk;\n\tfor(int i=l;i<=R[bel[l]];i++){\n\t\tif(a[i]<0){\n\t\t\tif(stk.empty()) return 0;node t=stk.top();stk.pop();\n\t\t\tu64 hs=(!~t.l)?t.hs:gethash(t.x,t.l,t.l);if(hs+a[i]) return 0;\n\t\t\tif(t.l^t.r) stk.push({t.x,t.l+1,t.r,gethash(t.x,t.l+1,t.r)});\n\t\t} else stk.push({bel[l],-1,-1,a[i]});\n\t}\n\tfor(int i=bel[l]+1;i<bel[r];i++){\n\t\tint need=rit[i].size(),clen=0;u64 cur_hs=0;\n\t\twhile(!stk.empty()&&need){\n\t\t\tnode t=stk.top();stk.pop();int len=t.r-t.l+1;\n\t\t\tif(need<=len){\n\t\t\t\tif(!~t.l) cur_hs+=t.hs*pw[clen];\n\t\t\t\telse cur_hs+=gethash(t.x,t.l,t.l+need-1)*pw[clen];\n\t\t\t\tif(need^len) stk.push({t.x,t.l+need,t.r,gethash(t.x,t.l+need,t.r)});\n\t\t\t\tneed=0;break;\n\t\t\t} else {\n\t\t\t\tcur_hs+=t.hs*pw[clen];\n\t\t\t\tneed-=len;clen+=len;\n\t\t\t}\n\t\t} if(need) return 0;if(cur_hs^rit_hs[i]) return 0;\n\t\tif(!lft[i].empty()) stk.push({i,0,lft[i].size()-1,lft_hs[i][0]});\n\t}\n\tfor(int i=L[bel[r]];i<=r;i++){\n\t\tif(a[i]<0){\n\t\t\tif(stk.empty()) return 0;node t=stk.top();stk.pop();\n\t\t\tu64 hs=(!~t.l)?t.hs:gethash(t.x,t.l,t.l);if(hs+a[i]) return 0;\n\t\t\tif(t.l^t.r) stk.push({t.x,t.l+1,t.r,gethash(t.x,t.l+1,t.r)});\n\t\t} else stk.push({bel[l],-1,-1,a[i]});\n\t} return stk.empty();\n}\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=(pw[0]=1);i<=n;i++) pw[i]=pw[i-1]*B;\n\tblk_cnt=(int)pow(n,0.5);blk_sz=(n-1)/blk_cnt+1;\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=blk_cnt;i++){\n\t\tL[i]=(i-1)*blk_sz+1;R[i]=min(i*blk_sz,n);\n//\t\tprintf(\"%d %d\\n\",L[i],R[i]);\n\t\tfor(int j=L[i];j<=R[i];j++) bel[j]=i;\n\t}\n\tfor(int i=1;i<=blk_cnt;i++) redone(i);\n\tscanf(\"%d\",&qu);\n\twhile(qu--){\n\t\tint opt;scanf(\"%d\",&opt);\n\t\tif(opt==1){\n\t\t\tint p,x;scanf(\"%d%d\",&p,&x);a[p]=x;\n\t\t\tredone(bel[p]);\n\t\t} else {\n\t\t\tint l,r;scanf(\"%d%d\",&l,&r);\n\t\t\tprintf(\"%s\\n\",query(l,r)?\"Yes\":\"No\");\n\t\t}\n\t}\n\treturn 0;\n}\n/*\n10 10\n4 4 4 -4 1 -1 -4 8 -8 -4\n1\n2 2 9\n\n10 1\n9 3 7 -7 4 -4 -3 1 -1 -9\n1\n2 1 10\n*/ \n```\n\n",
        "postTime": 1627805532,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1340F Nastya and CBS"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/CF1340F)\n\n[\u82f1\u6587\u9898\u9762](https://codeforces.com/problemset/problem/1340/F)\n\n\u9898\u610f\uff1a\n\n![\u9898\u610f](https://img2020.cnblogs.com/blog/1564093/202007/1564093-20200714202709266-248702221.png)\n\n$n,k,q \\leq 10^5$\u3002\n\n\u9898\u89e3\uff1a\u8003\u8651\u5230\u66b4\u529b\u7684\u505a\u6cd5\u662f\u7528\u6808\u6a21\u62df\u62ec\u53f7\u5e8f\u5217\u5339\u914d\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u5206\u5757\uff0c\u5c06\u5143\u7d20\u4e2a\u6570\u51cf\u5c0f\u81f3$O(\\sqrt n)$\u7ea7\u522b\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5757\uff0c\u6211\u4eec\u7528\u6808\u6765\u6a21\u62df\u66b4\u529b\u5339\u914d\u7684\u8fc7\u7a0b\u3002\u5982\u679c\u4e24\u4e2a\u76f8\u90bb\u7684\u5de6\u53f3\u62ec\u53f7\u51fa\u73b0\u9002\u914d\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2a\u5757\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u90a3\u4e48\u6240\u6709\u5b8c\u5168\u5305\u542b\u8fd9\u4e2a\u533a\u95f4\u7684\u8be2\u95ee\u4e5f\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u53ef\u4ee5\u60f3\u8c61\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5408\u6cd5\u7684\u5757\uff0c\u5b83\u5339\u914d\u5269\u4e0b\u7684\u4e00\u5b9a\u662f$x$\u4e2a\u53f3\u62ec\u53f7\u548c$y$\u4e2a\u5de6\u62ec\u53f7\u3002\n\n\u90a3\u4e48\u5728\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u5c31\u80fd\u4ee5\u4e00\u5806\u5de6/\u53f3\u62ec\u53f7\u4e3a\u5355\u4f4d\u8fdb\u884c\u5339\u914d\u4e86\u3002\u4ee4$pre_{i,j}$\u8868\u793a\u7b2c$i$\u4e2a\u5757\u7684\u540e$j$\u4e2a\u53f3\u62ec\u53f7\u7684\u7edd\u5bf9\u503c\u7684\u54c8\u5e0c\u503c\uff0c$suf_{i,j}$\u8868\u793a\u7b2c$i$\u4e2a\u5757\u7684\u524d$j$\u4e2a\u5de6\u62ec\u53f7\u7684\u54c8\u5e0c\u503c\uff0c\u7136\u540e\u7528\u6808\u6a21\u62df\u5339\u914d\u5c31\u884c\u4e86\u3002\n\n\u7531\u4e8e\u9700\u8981\u8fdb\u884c\u7ed3\u6784\u4f53\u7684\u8d4b\u503c\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528\u6307\u9488\u4ee3\u66ffvector\u6216\u666e\u901a\u6570\u7ec4\u505a\u5230$O(1)$\u8d4b\u503c\u3002\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n\u4fee\u6539\u65f6\u5c31\u91cd\u6784\u4e00\u4e0b\u5757\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O((n+q)\\sqrt n)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register int\n#define F(x,y,z) for(re x=y;x<=z;x++)\n#define FOR(x,y,z) for(re x=y;x>=z;x--)\ntypedef long long ll;\n#define I inline void\n#define IN inline int\n#define C(x,y) memset(x,y,sizeof(x))\n#define STS system(\"pause\")\ntemplate<class D>I read(D &res){\n\tres=0;register D g=1;register char ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-')g=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tres=(res<<3)+(res<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\tres*=g;\n}\nconst int Mod=1e9+7,P=19260817,invp=494863259;\nint n,m,q,a[101000],sit,X,Y;\nint len,b[101000],S,ned[330],sn[330];\nint p[101000],inv[101000];\nint s[101000],R;vector<int>vec;\nIN Pow(int x,int y=Mod-2){\n\tre res=1;\n\twhile(y){\n\t\tif(y&1)res=(ll)res*x%Mod;\n\t\tx=(ll)x*x%Mod;\n\t\ty>>=1;\n\t}\n\treturn res;\n}\nIN Plus(int x,int y){(x+=y)>=Mod?x-=Mod:0;return x;}\nstruct Hash{\n\tint *has;int len;\n\tI init(int x){len=0;has=new int[x+1];has[0]=0;}\n\tI insert(int x){++len;has[len]=Plus((ll)has[len-1]*P%Mod,x);}\n\tIN calc(int x){if(x>len)return -1;return Plus(has[len],Mod-(ll)has[len-x]*p[x]%Mod);}\n\tI delet(int x){len-=x;}\n}pre[320],suf[320],tmp;\nstack<Hash>st;\nIN gethas(){\n\tre res=0;\n\tfor(auto d:vec)res=Plus((ll)res*P%Mod,d);\n\treturn res;\n}\nI get(int x){\n\tif(!ned[x])return;\n\tned[x]=0;\n\tstatic int l,r;l=(x-1)*len+1;r=min(n,x*len);\n\tR=0;sn[x]=0;\n\tF(i,l,r){\n\t\tif(a[i]>0||(a[i]<0&&(!R||s[R]<0))){s[++R]=a[i];continue;}\n\t\tif((a[i]+s[R]))return sn[x]=1,void();\n\t\tR--;\n\t}\n\tvec.clear();while(R&&s[R]>0)vec.emplace_back(s[R]),R--;reverse(vec.begin(),vec.end());\n\tsuf[x].init(vec.size());for(auto w:vec)suf[x].insert(w);\n\tpre[x].init(R);while(R&&s[R]<0)pre[x].insert(-s[R]),R--;\n}\nIN ques(int x,int y){\n\tif(!((y-x)&1))return 0;\n\tstatic int l,r;l=b[x];r=b[y];\n\tif(r-l<2){\n\t\twhile(R)R--;\n\t\tF(i,x,y){\n\t\t\tif(a[i]>0){s[++R]=a[i];continue;}\n\t\t\tif(!R||(a[i]+s[R]))return 0;\n\t\t\tR--;\n\t\t}\n\t\tif(!R)return 1;\n\t\treturn 0;\n\t}\n\tF(i,l+1,r-1){\n\t\tget(i);\n\t\tif(sn[i])return 0;\n\t}\n\twhile(R)R--;\n\tF(i,x,min(n,len*l)){\n\t\tif(a[i]>0){s[++R]=a[i];continue;}\n\t\tif(!R||(a[i]+s[R]))return 0;\n\t\tR--;\n\t}\n\tsuf[0].init(R);\n\tvec.clear();while(R)vec.emplace_back(s[R]),R--;reverse(vec.begin(),vec.end());\n\tfor(auto w:vec)suf[0].insert(w);\n\twhile(R)R--;\n\tF(i,(r-1)*len+1,y){\n\t\tif(a[i]>0||(a[i]<0&&(!R||s[R]<0))){s[++R]=a[i];continue;}\n\t\tif((a[i]+s[R]))return 0;\n\t\tR--;\n\t}\n\tif(R&&s[R]>0)return 0;\n\tpre[0].init(R);while(R)pre[0].insert(-s[R]),R--;\n\twhile(!st.empty())st.pop();st.emplace(suf[0]);\n\tF(i,l+1,r){\n\t\tif(i<r)tmp=pre[i];else tmp=pre[0];\n\t\twhile(tmp.len&&!st.empty()){\n\t\t\tif(st.top().len>=tmp.len){\n\t\t\t\tif(st.top().calc(tmp.len)^tmp.calc(tmp.len))return 0;\n\t\t\t\tst.top().delet(tmp.len);\n\t\t\t\tif(!st.top().len)st.pop();\n\t\t\t\ttmp.len=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(st.top().calc(st.top().len)^tmp.calc(st.top().len))return 0;\n\t\t\ttmp.delet(st.top().len);st.pop();\n\t\t}\n\t\tif(tmp.len)return 0;\n\t\tif(i==r){\n\t\t\twhile(!st.empty()&&!st.top().len)st.pop();\n\t\t\tif(st.empty())return 1;\n\t\t\treturn 0;\n\t\t}\n\t\tst.emplace(suf[i]);\n\t}\n\treturn 0;\n}\nint main(){\n\tread(n);read(m);p[0]=1;F(i,1,n)p[i]=(ll)p[i-1]*P%Mod;inv[0]=1;F(i,1,n)inv[i]=(ll)inv[i-1]*invp%Mod;\n\tF(i,1,n)read(a[i]);\n\tlen=ceil(sqrt(n)+0.5);F(i,1,n)b[i]=((i-1)/len)+1;S=b[n];\n\tF(i,1,S)ned[i]=1;\n\tread(q);\n\twhile(q--){\n\t\tread(sit);read(X);read(Y);\n\t\tif(sit==1)a[X]=Y,ned[b[X]]=1;\n\t\telse{\n\t\t\tif(ques(X,Y))cout<<\"Yes\"<<endl;\n\t\t\telse cout<<\"No\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n/*\n10 10\n10 4 2 -2 1 -1 -4 8 -8 -10\n100\n1 1 4\n1 10 -4\n2 6 9\n1 3 4\n1 4 -4\n2 2 8\n2 3 4\n2 2 9\n2 3 7\n2 8 9\n2 2 4\n2 1 7\n2 3 8\n1 5 6\n1 6 -6\n2 5 6\n1 8 5\n1 9 -5\n1 3 7\n1 4 -7\n1 8 10\n1 9 -10\n1 2 8\n1 7 -8\n2 3 4\n2 4 6\n2 1 3\n1 8 1\n1 9 -1\n2 2 5\n1 1 9\n1 10 -9\n1 5 4\n1 6 -4\n1 5 4\n1 6 -4\n2 2 7\n2 8 9\n2 2 7\n2 2 7\n1 2 3\n1 7 -3\n1 3 7\n1 4 -7\n2 1 10\n*/\n```\n",
        "postTime": 1594823015,
        "uid": 93453,
        "name": "Purple_wzy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1340F \u3010Nastya and CBS\u3011"
    },
    {
        "content": "\u7a81\u7136\u53d1\u73b0\u8fd9\u9898\u6ca1\u6709\u697c\u623f\u91cd\u5efa\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\u554a\uff0c\u6211\u6765\u6c34\u4e00\u6c34\u3002\n\n\u6839\u636e\u7ecf\u5178\u7ed3\u8bba\uff0c\u5408\u6cd5\u62ec\u53f7\u4e32\u7684\u6bcf\u4e2a\u5b50\u4e32\u6d88\u9664\u76f8\u90bb\u76f8\u7b49\u62ec\u53f7\u540e\u4f1a\u662f\u4e00\u6bb5\u53f3\u62ec\u53f7\u63a5\u4e0a\u4e00\u6bb5\u5de6\u62ec\u53f7\u3002\n\n\u66b4\u529b\u662f\u76f4\u63a5\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u800c\u6211\u4eec\u53d1\u73b0\u6808\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u4e5f\u53ef\u4ee5\u662f\u4e00\u6bb5\u62ec\u53f7\u4e32\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5206\u5757\uff0c\u7ef4\u62a4\u6574\u5757\u6240\u6709\u524d\u7f00\u540e\u7f00\u7684\u62ec\u53f7\u4e32\u54c8\u5e0c\u503c\u3002\u8be2\u95ee\u4ece\u524d\u5f80\u540e\u626b\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5de6\u62ec\u53f7\u524d\u7f00\uff0c\u6bcf\u6b21\u76f4\u63a5\u770b\u80fd\u4e0d\u80fd\u6d88\u6389\u6240\u6709\u65b0\u589e\u53f3\u62ec\u53f7\u5c31\u597d\u4e86\u3002\n\n\u8fd9\u4e2a\u505a\u6cd5\u57fa\u672c\u53ef\u4ee5\u76f4\u63a5\u7167\u642c\u5230\u7ebf\u6bb5\u6811\u7ed3\u6784\u4e0a\uff0c\u4f46\u662f pushup \u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u7ebf\u6bb5\u6811\u7ed3\u70b9\u67d0\u4e2a\u524d\u7f00/\u540e\u7f00\u7684\u54c8\u5e0c\u503c\u3002\u7c7b\u4f3c\u697c\u623f\u91cd\u5efa\uff0c\u6211\u4eec\u518d\u5199\u4e00\u4e2a\u5355\u4fa7\u9012\u5f52\u7684 query \u6765\u8ba1\u7b97\u7ebf\u6bb5\u6811\u7ed3\u70b9\u524d\u540e\u7f00\u54c8\u5e0c\u503c\u5373\u53ef\u3002\n\n\u8fd9\u9898\u7684\u5355\u4fa7\u9012\u5f52\u5f88\u57fa\u7840\uff0c\u4ee5\u7ebf\u6bb5\u6811\u7ed3\u70b9\u524d\u7f00\u67e5\u8be2\u4e3a\u4f8b\u3002\u82e5\u5de6\u513f\u5b50\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u6211\u4eec\u8981\u7684\u524d\u7f00\uff0c\u6211\u4eec\u5c31\u53ea\u9012\u5f52\u5de6\u513f\u5b50\u8ba1\u7b97\uff0c\u5426\u5219\u9012\u5f52\u53f3\u513f\u5b50\uff0c\u628a\u5de6\u513f\u5b50\u54c8\u5e0c\u503c\u62fc\u63a5\u4e0a\u53bb\u5373\u53ef\u3002\u7ba1\u7406\u5458\u600e\u4e48\u89c9\u5f97\u8fd9\u8fd8\u8981\u8bb2\uff01\n\n\u590d\u6742\u5ea6 $O(n\\log^2 n)$\u3002\n\n\u4ee3\u7801\uff1a\uff08\u7801\u98ce\u6bd4\u8f83\u4e45\u8fdc\uff0c\u53ef\u80fd\u4e0d\u662f\u5f88\u597d\u770b\uff09\n```cpp\n#include<stdio.h>\nconst int maxn=100005,maxk=maxn<<2,N=100000,maxl=55;\nconst int mod=18153427,Base=83,invB=218716;\nint n,k,q,top;\nint a[maxn],lc[maxk],rc[maxk],flg[maxk],stk[maxl],mul[maxn*2];\nstruct hash {\n\tint v,len;\n\tbool operator == (hash t) {\n\t\treturn v==t.v&&len==t.len;\n\t}\n\tbool operator != (hash t) {\n\t\treturn v!=t.v||len!=t.len;\n\t}\n\thash operator + (hash t) {\n\t\treturn hash {(v+1ll*t.v*mul[N+len]%mod)%mod,len+t.len};\n\t}\n\thash operator - (hash t) {\n\t\treturn hash {1ll*(v-t.v+mod)%mod*mul[N-t.len]%mod,len-t.len};\n\t}\n} sl[maxk],sr[maxk],s[maxl]; // )]}{[(\nhash getsl(int now,int p) {\n\tif(p==0)\n\t\treturn hash {0,0};\n\tif(p==sl[now].len)\n\t\treturn sl[now];\n\tif(p<=sl[lc[now]].len)\n\t\treturn getsl(lc[now],p);\n\treturn sl[lc[now]]+(getsl(rc[now],p-sl[lc[now]].len+sr[lc[now]].len)-sr[lc[now]]);\n}\nhash getsr(int now,int p) {\n\tif(p==0)\n\t\treturn hash {0,0};\n\tif(p==sr[now].len)\n\t\treturn sr[now];\n\tif(p<=sr[rc[now]].len)\n\t\treturn getsr(rc[now],p);\n\treturn sr[rc[now]]+(getsr(lc[now],p-sr[rc[now]].len+sl[rc[now]].len)-sl[rc[now]]);\n}\nhash getS(int now,int p) {\n\tif(now<0||p==0)\n\t\treturn hash {0,0};\n\tif(p==s[now].len)\n\t\treturn s[now];\n\tif(p<=sr[stk[now]].len)\n\t\treturn getsr(stk[now],p);\n\treturn sr[stk[now]]+(getS(now-1,p-sr[stk[now]].len+sl[stk[now]].len)-sl[stk[now]]);\n}\ninline void getv(int now,int v) {\n\tflg[now]=0;\n\tif(v<0)\n\t\tsl[now].v=-v,sl[now].len=1,sr[now].v=sr[now].len=0;\n\telse sr[now].v=v,sr[now].len=1,sl[now].v=sl[now].len=0;\n}\ninline void pushup(int now) {\n\tflg[now]=flg[lc[now]]|flg[rc[now]];\n\tif(flg[now]) {\n\t\tsl[now]=sr[now]= {0,0};\n\t\treturn ;\n\t}\n\tif(sr[lc[now]].len<=sl[rc[now]].len) {\n\t\tif(sr[lc[now]]==getsl(rc[now],sr[lc[now]].len))\n\t\t\tsl[now]=sl[lc[now]]+(sl[rc[now]]-sr[lc[now]]),sr[now]=sr[rc[now]];\n\t\telse flg[now]=1;\n\t} else {\n\t\tif(sl[rc[now]]==getsr(lc[now],sl[rc[now]].len))\n\t\t\tsl[now]=sl[lc[now]],sr[now]=sr[rc[now]]+(sr[lc[now]]-sl[rc[now]]);\n\t\telse flg[now]=1;\n\t}\n}\nint split(int l,int r,int now,int L,int R) {\n\tif(r<L||R<l)\n\t\treturn 0;\n\tif(L<=l&&r<=R) {\n\t\tstk[++top]=now;\n\t\treturn flg[now];\n\t}\n\tint mid=(l+r)>>1,res=0;\n\tif(L<=mid)\n\t\tres|=split(l,mid,lc[now],L,R);\n\tif(mid<R)\n\t\tres|=split(mid+1,r,rc[now],L,R);\n\treturn res;\n}\nvoid build(int l,int r,int now) {\n\tsl[now]=sr[now]=hash {0,0};\n\tif(l==r) {\n\t\tgetv(now,a[l]);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tlc[now]=now<<1,rc[now]=now<<1|1;\n\tbuild(l,mid,lc[now]),build(mid+1,r,rc[now]);\n\tpushup(now);\n}\nvoid update(int l,int r,int now,int pos,int v) {\n\tif(l==r) {\n\t\tgetv(now,v);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)\n\t\tupdate(l,mid,lc[now],pos,v);\n\telse update(mid+1,r,rc[now],pos,v);\n\tpushup(now);\n}\nvoid dfs(int l,int r,int now) {\n\tif(l==r) {\n\t\tprintf(\"%d \",sl[now].len? -sl[now].v:sr[now].v);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tdfs(l,mid,lc[now]),dfs(mid+1,r,rc[now]);\n}\nint query(int l,int r) {\n\ttop=0;\n\tif(split(1,n,1,l,r))\n\t\treturn 0;\n\ts[0]= {0,0};\n\tfor(int i=1; i<=top; i++) {\n\t\tif(s[i-1].len<sl[stk[i]].len||sl[stk[i]]!=getS(i-1,sl[stk[i]].len))\n\t\t\treturn 0;\n\t\ts[i]=sr[stk[i]]+(s[i-1]-sl[stk[i]]);\n\t}\n\treturn s[top].len==0;\n}\nint main() {\n\tscanf(\"%d%d\",&n,&k);\n\tmul[N]=1;\n\tfor(int i=1; i<=n; i++)\n\t\tmul[N-i]=1ll*mul[N-i+1]*invB%mod,mul[N+i]=1ll*mul[N+i-1]*Base%mod;\n\tfor(int i=1; i<=n; i++)\n\t\tscanf(\"%d\",&a[i]);\n\tbuild(1,n,1);\n\t//printf(\"! \"),dfs(1,n,1),puts(\"\");\n\tscanf(\"%d\",&q);\n\twhile(q--) {\n\t\tint opt,x,y;\n\t\tscanf(\"%d%d%d\",&opt,&x,&y);\n\t\tif(opt==1)\n\t\t\tupdate(1,n,1,x,y);//,printf(\"! \"),dfs(1,n,1),puts(\"\");\n\t\tif(opt==2)\n\t\t\tputs(query(x,y)==0? \"No\":\"Yes\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1676284085,
        "uid": 105611,
        "name": "IdnadRev",
        "ccfLevel": 0,
        "title": "\u3010DS \u8bb0\u5f55\u3011CF1340F Nastya and CBS"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n(n \\le 10 ^ 5)$ \u7684\u62ec\u53f7\u5e8f\u5217\u3002\u8981\u6c42\u652f\u6301\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u4fee\u6539\u67d0\u4e2a\u4f4d\u7f6e\u7684\u62ec\u53f7\u3002\n\n2. \u8be2\u95ee $[l, r]$ \u533a\u95f4\u5185\u7684\u62ec\u53f7\u5e8f\u5217\u662f\u5426\u5408\u6cd5\u3002\n\n### \u9898\u76ee\u5206\u6790\n\n\u663e\u7136\uff0c\u8fd9\u9053\u9898\u662f\u4e00\u9053\u6570\u636e\u7ed3\u6784\u9898\u3002\u5e76\u4e14\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u53ea\u5141\u8bb8\u81f3\u591a\u4e24\u4e2a $\\log$ \u6216\u8005\u4e00\u4e2a\u6839\u53f7\u3002\n\n\u8003\u8651\u5206\u5757\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u533a\u95f4\u5185\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u62ec\u53f7\uff0c\u5f00\u53e3\u65b9\u5411\u76f8\u53cd\uff0c\u800c\u4e14\u7c7b\u578b\u4e5f\u4e0d\u540c\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u5408\u6cd5\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u4e00\u5b9a\u662f\u524d\u9762\u4e00\u6bb5\u53f3\u62ec\u53f7\u62ec\u53f7\uff0c\u540e\u9762\u4e00\u6bb5\u5de6\u62ec\u53f7\uff0c\u5f62\u5982 $\\texttt{))][[(}$ \u3002\n\n\u5728\u6bcf\u4e2a\u5757\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u5757\u662f\u5426\u5408\u6cd5\uff08\u5408\u6cd5\u6761\u4ef6\u89c1\u4e0a\u6587\uff09\uff0c\u5982\u679c\u5408\u6cd5\uff0c\u8fd8\u53ef\u4ee5\u5904\u7406\u51fa\u4e24\u6bb5\u62ec\u53f7\u7684\u54c8\u5e0c\u503c\u3002\n\n\u4fee\u6539\u64cd\u4f5c\u66b4\u529b\u91cd\u6784\u6240\u5728\u5757\uff0c\u67e5\u8be2\u64cd\u4f5c\u5427 $\\sqrt{n}$ \u4e2a\u5757\u91cc\u7684\u54c8\u5e0c\u66b4\u529b\u5165\u6808\u5373\u53ef\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(m \\sqrt{n})$ \u3002\n\n### \u4ee3\u7801\n\n\u4e0d\u653e\u4e86\u5427\uff0c\u5927\u5bb6\u5e94\u8be5\u90fd\u4f1a\u3002",
        "postTime": 1665134278,
        "uid": 519384,
        "name": "Link_Cut_Y",
        "ccfLevel": 0,
        "title": "CF1340F Nastya and CBS \u9898\u89e3"
    },
    {
        "content": "[\u6211\u7684\u535a\u5ba2](https://2745518585.github.io/post/CF1340F-solution/)\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u6709 $k$ \u79cd\u62ec\u53f7\u7684\u62ec\u53f7\u5e8f\u5217\uff0c$q$ \u4e2a\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4fee\u6539\u4e00\u4e2a\u4f4d\u7f6e\u7684\u5b57\u7b26\u6216\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u4e3a\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\u3002\n\n## \u601d\u8def\n\n\u663e\u7136\u6734\u7d20\u7684\u505a\u6cd5\u662f\u7ef4\u62a4\u4e00\u4e2a\u6808\u6765\u5224\u65ad\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5206\u5757\uff0c\u6bcf\u4e00\u5757\u7ef4\u62a4\u8fd9\u4e00\u5757\u7684\u6808\u7136\u540e\u5408\u5e76\u4e4b\u7c7b\u7684\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u5757\uff0c\u7531\u4e8e\u5b83\u524d\u9762\u53ef\u80fd\u8fd8\u6709\u4e1c\u897f\uff0c\u6240\u4ee5\u6700\u524d\u9762\u7684\u53f3\u62ec\u53f7\u88ab\u8ba4\u4e3a\u662f\u5408\u6cd5\u7684\u3002\u540c\u7406\u6700\u540e\u7684\u5de6\u62ec\u53f7\u4e5f\u662f\u5408\u6cd5\u7684\uff0c\u5269\u4e0b\u7684\u5c31\u5e94\u8be5\u88ab\u6d88\u5b8c\u3002\u4e5f\u5c31\u662f\u4e00\u4e2a\u5e8f\u5217\u662f\u5408\u6cd5\u7684\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u5e8f\u5217\u6d88\u9664\u5b8c\u4e4b\u540e\u662f\u7531\u4e00\u6bb5\u53f3\u62ec\u53f7\u63a5\u4e0a\u4e00\u6bb5\u5de6\u62ec\u53f7\u7ec4\u6210\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u5373\u53ef\u3002\n\n\u4f46\u662f\u6211\u4eec\u5728\u5408\u5e76\u4e24\u4e2a\u5757\u7684\u65f6\u5019\uff0c\u663e\u7136\u9700\u8981\u5224\u65ad\u4e00\u6bb5\u5de6\u62ec\u53f7\u4e0e\u4e00\u6bb5\u53f3\u62ec\u53f7\u80fd\u4e0d\u80fd\u5339\u914d\uff0c\u66b4\u529b\u590d\u6742\u5ea6\u53ef\u80fd\u8fbe\u5230 $O(\\text{\u5757\u957f})$\uff0c\u65e0\u6cd5\u63a5\u53d7\u3002\u8003\u8651\u4f7f\u7528\u54c8\u5e0c\u5224\u65ad\uff0c\u7ef4\u62a4\u5de6\u53f3\u62ec\u53f7\u5e8f\u5217\u7684\u524d\u7f00\u54c8\u5e0c\uff0c\u5177\u4f53\u7684\u7ef4\u62a4\u4ece\u5916\u5c42\u5230\u5185\u5c42\u7684\u54c8\u5e0c\uff0c\u65b9\u4fbf\u6dfb\u52a0\u4e1c\u897f\u3002\n\n\u5982\u679c\u5408\u5e76\u65f6\u6211\u4eec\u4f9d\u7136\u7528\u6808\u6765\u7ef4\u62a4\u5de6\u62ec\u53f7\uff0c\u590d\u6742\u5ea6\u8fd8\u662f $O(n)$ \u7684\uff0c\u4f46\u662f\u5de6\u62ec\u53f7\u5e8f\u5217\u53ef\u4ee5\u5212\u5206\u6210\u5f88\u591a\u6bb5\uff0c\u6bcf\u4e00\u6bb5\u6765\u81ea\u540c\u4e00\u5757\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528 vector \u6765\u7ef4\u62a4\u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u548c\u524d\u7f00\u54c8\u5e0c\uff0c\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u7b97\u597d\u7684\u54c8\u5e0c\u6570\u7ec4\u3002\u800c\u6700\u5de6\u8fb9\u548c\u6700\u53f3\u8fb9\u7684\u6563\u5757\u66b4\u529b\u5904\u7406\u3002\n\n\u4fee\u6539\u65f6\u6211\u4eec\u53ea\u9700\u8981\u66b4\u529b\u91cd\u6784\u67d0\u4e00\u4e2a\u5757\u5373\u53ef\u3002\n\n## code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long ll;\nconst ll P=1e9+7;\nconst int N=200001,M=500,K=3;\nint n,m,q,a[N],b1[N],b2[N],g1[N],g2[N],T,S1[N],T1,S2[N],T2;\nbool h[M];\nll f1[M][M],f2[M][M],f3[M],f4[M],powb[N];\nstruct str\n{\n    int g;\n    ll *f;\n    str(){}\n    str(int g,ll *f):g(g),f(f){}\n}S[N];\nbool solve(int l,int r)\n{\n    T1=T2=0;\n    for(int i=l;i<=r;++i)\n    {\n        if(a[i]>0) S2[++T2]=a[i];\n        else\n        {\n            if(T2==0) S1[++T1]=-a[i];\n            else if(S2[T2]!=-a[i]) return false;\n            else --T2;\n        }\n    }\n    return true;\n}\nvoid build(int x)\n{\n    h[x]=true;\n    if(solve(b1[x-1]+1,b1[x])==false)\n    {\n        h[x]=false;\n        return;\n    }\n    g1[x]=T1,g2[x]=T2;\n    for(int i=1;i<=T1;++i)\n    {\n        f1[x][i]=(f1[x][i-1]*K+S1[T1-i+1])%P;\n    }\n    for(int i=1;i<=T2;++i)\n    {\n        f2[x][i]=(f2[x][i-1]*K+S2[i])%P;\n    }\n}\nbool check(int x,ll *f)\n{\n    while(x>0&&T>0)\n    {\n        int z=min(S[T].g,x);\n        if(((S[T].f[S[T].g]-S[T].f[S[T].g-z]*powb[z]%P)%P+P)%P!=((f[x]-f[x-z]*powb[z]%P)%P+P)%P) return false;\n        S[T].g-=z;\n        x-=z;\n        if(S[T].g==0) --T;\n    }\n    if(T==0&&x!=0) return false;\n    return true;\n}\nbool query(int l,int r)\n{\n    if(b2[l]==b2[r])\n    {\n        if(solve(l,r)==false) return false;\n        if(T1!=0||T2!=0) return false;\n        return true;\n    }\n    T=0;\n    if(solve(l,b1[b2[l]])==false) return false;\n    if(T1!=0) return false;\n    for(int i=1;i<=T2;++i) f3[i]=(f3[i-1]*K+S2[i])%P;\n    if(T2!=0) S[++T]=str(T2,f3);\n    for(int i=b2[l]+1;i<=b2[r]-1;++i)\n    {\n        if(h[i]==false) return false;\n        if(check(g1[i],f1[i])==false) return false;\n        if(g2[i]!=0) S[++T]=str(g2[i],f2[i]);\n    }\n    if(solve(b1[b2[r]-1]+1,r)==false) return false;\n    for(int i=1;i<=T1;++i) f4[i]=(f4[i-1]*K+S1[T1-i+1])%P;\n    if(check(T1,f4)==false) return false;\n    while(T>=1&&S[T].g==0) --T;\n    if(T2!=0||T!=0) return false;\n    return true;\n}\nint main()\n{\n    scanf(\"%d%*d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    powb[0]=1;\n    for(int i=1;i<=n;++i) powb[i]=powb[i-1]*K%P;\n    q=sqrt(n);\n    for(int i=1;i<=q;++i) b1[i]=(n/q)*i;\n    b1[q]=n;\n    for(int i=1;i<=q;++i)\n    {\n        for(int j=b1[i-1]+1;j<=b1[i];++j) b2[j]=i;\n    }\n    for(int i=1;i<=q;++i) build(i);\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int z;\n        scanf(\"%d\",&z);\n        if(z==1)\n        {\n            int x,k;\n            scanf(\"%d%d\",&x,&k);\n            a[x]=k;\n            build(b2[x]);\n        }\n        else if(z==2)\n        {\n            int l,r;\n            scanf(\"%d%d\",&l,&r);\n            if(query(l,r)) printf(\"Yes\\n\");\n            else printf(\"No\\n\");\n        }\n    }\n    return 0;\n}\n```\n\n\n\n",
        "postTime": 1677236411,
        "uid": 291248,
        "name": "\u8d75\u60a6\u5c91",
        "ccfLevel": 7,
        "title": "CF1340F \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u4f3c\u4e4e\u662f\u4e00\u7247\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5047\u7684\u7684\u9898\u89e3\uff1f\u6b22\u8fce hack\u3002\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ef4\u62a4\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u62ec\u53f7\u5171\u6709 $k$ \u79cd\uff0c\u8fdb\u884c $m$ \u6b21\u64cd\u4f5c\u3002\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u8be2\u95ee\u62ec\u53f7\u662f\u5426\u5339\u914d\u3002$n,q\\le 10^5$\u3002\n\n## \u505a\u6cd5\u4ecb\u7ecd\n\n\u8003\u8651\u5206\u5757\uff0c\u6bcf $\\sqrt n$ \u4e2a\u5143\u7d20\u5206\u6210\u4e00\u5757\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5757\u5185\uff0c\u7528\u6808\u9884\u5904\u7406\u51fa\u5f53\u524d\u5757\u8fdb\u884c\u5339\u914d\u7684\u7ed3\u679c\uff0c\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u5c06\u8fd9\u4e2a\u5757\u4e2d\u7684\u62ec\u53f7\u5e8f\u5217\u8fdb\u884c\u300c\u5316\u7b80\u300d\u3002\u5982\u679c\u8fd9\u4e2a\u5757\u672c\u8eab\u5c31\u5931\u914d\uff0c\u90a3\u8be2\u95ee\u533a\u95f4\u4e2d\u5982\u679c\u5305\u542b\u8fd9\u4e2a\u6574\u5757\u7b54\u6848\u5c31\u4e00\u5b9a\u662f `NO`\u3002\u5426\u5219\uff0c\u8fd9\u4e2a\u5757\u8fdb\u884c\u5339\u914d\u540e\u4e00\u5b9a\u662f\u4e00\u6bb5\u53f3\u62ec\u53f7\u7d27\u8ddf\u4e0a\u4e00\u6bb5\u5de6\u62ec\u53f7\u3002\u628a\u8fd9\u4e24\u90e8\u5206\u8bb0\u5f55\u4e0b\u6765\u3002\n\n- \u5bf9\u4e8e\u5355\u70b9\u4fee\u6539\u64cd\u4f5c\uff0c\u76f4\u63a5\u66b4\u529b\u91cd\u6784\u6574\u4e2a\u5757\u5373\u53ef\u3002\n\n- \u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u4ece\u5de6\u5230\u53f3\u7528\u6808\u6a21\u62df\u62ec\u53f7\u5339\u914d\u7684\u8fc7\u7a0b\u3002\u8fd9\u91cc\u6211\u548c\u5176\u4ed6\u4eba\u7684\u9898\u89e3\u6709\u4e2a\u4e0d\u4e00\u6837\u7684\u5730\u65b9\uff0c\u5728\u5408\u5e76\u6574\u5757\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u7528 hash \u7b49\u65b9\u5f0f $O(1)$ \u5224\u65ad\uff0c\u800c\u662f\u76f4\u63a5\u7528 `memcpy` \u628a\u62ec\u53f7\u590d\u5236\u8fc7\u6765\u66b4\u529b $O(\\sqrt n)$ \u5408\u5e76\u3002\u6309\u7406\u6765\u8bf4\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u6700\u5dee $O(nm)$\uff0c\u5728\u5168\u662f\u5de6\u62ec\u53f7\u7684\u6570\u636e\u4e0a\u8868\u73b0\u6700\u5dee\u3002\u4f46\u662f\u53ef\u80fd\u662f\u56e0\u4e3a `memcpy` \u5e38\u6570\u8f83\u5c0f\uff0c\u672c\u5730\u81ea\u9020\u6570\u636e\u90fd\u6ca1\u6709\u6210\u529f hack \u6389\uff0c\u6240\u4ee5\u6b22\u8fce\u6765\u63d0\u4f9b hack \u6570\u636e\u3002\n\n## \u4ee3\u7801\n\n```cpp\nconst int N=1e5+9;\nconst int SQRTN=320;\n\nint sz,bl[N],n,m,lbl[N],rbl[N],a[N],k,L[SQRTN][N],R[SQRTN][N],sta[N],tp;\nbool ok[N];\n\nvoid Up(int x){\n  int b=bl[x];\n  ok[b]=1,L[b][0]=R[b][0]=0;\n  tp=0;\n  rep(i,lbl[x],rbl[x]){\n    if(a[i]>0)sta[++tp]=a[i];\n    else if(tp){\n      if(sta[tp--]!=-a[i]){ok[b]=0;return;}\n    }else L[b][++L[b][0]]=a[i];\n  }\n  memcpy(R[b]+1,sta+1,tp*sizeof(int)),R[b][0]=tp;\n}\n\ninline void Init() {\n  sz = sqrt(n);\n  rep (i, 1, n) {\n    bl[i] = (i - 1) / sz + 1;\n    lbl[i] = (bl[i] - 1) * sz + 1;\n    rbl[i] = min(bl[i] * sz, n);\n  }\n  ste(i, 1, n, sz) Up(i);\n}\n\nvoid Add(int p,int x){a[p]=x;Up(p);}\n\nbool Ask(int l,int r){\n  tp=0;\n  if(bl[l]==bl[r]){\n    rep(i,l,r){\n      if(a[i]>0)sta[++tp]=a[i];\n      else if(!tp||sta[tp--]!=-a[i])return 0;\n    }\n    return !tp;\n  }\n  rep(i,l,rbl[l]){\n    if(a[i]>0)sta[++tp]=a[i];\n    else if(!tp||sta[tp--]!=-a[i])return 0;\n  }\n  rep(b,bl[l]+1,bl[r]-1)if(!ok[b])return 0;\n  rep(b,bl[l]+1,bl[r]-1){\n    if(tp<L[b][0])return 0;\n    re(i,L[b][0])if(sta[tp--]!=-L[b][i])return 0;\n    memcpy(sta+1+tp,R[b]+1,R[b][0]*sizeof(int)),tp+=R[b][0]; // \u8fd9\u91cc\u590d\u6742\u5ea6\u662f\u5047\u7684\n  }\n  rep(i,lbl[r],r){\n    if(a[i]>0)sta[++tp]=a[i];\n    else if(!tp||sta[tp--]!=-a[i])return 0;\n  }\n  return !tp;\n}\n\nsigned main(){\n  ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);\n  cout<<setiosflags(ios::fixed)<<setprecision(4);\n  cin>>n>>k;\n  re(i,n)cin>>a[i];\n  Init();\n  cin>>m;\n  while(m--){\n    int op,x,y;cin>>op>>x>>y;\n    if(op==1){\n      Add(x,y);\n    }else{\n      bool b=Ask(x,y);\n      cout<<(b?\"Yes\\n\":\"No\\n\");\n    }\n  }\n  return 0;\n}\n```\n\n",
        "postTime": 1640845678,
        "uid": 207996,
        "name": "yzy1",
        "ccfLevel": 9,
        "title": "CF1340F \u9898\u89e3"
    }
]