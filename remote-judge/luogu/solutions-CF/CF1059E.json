[
    {
        "content": "\u5bf9\u6bcf\u4e2a\u70b9\u9884\u5904\u7406\u51fa\u5b83\u5728\u4e0d\u8d85\u8fc7S\u548cL\u7684\u9650\u5236\u7684\u60c5\u51b5\u4e0b\u6700\u591a\u80fd\u591f\u5411\u4e0a\u4f38\u5c55\u51e0\u4e2a\u70b9\uff0c\u8bb0\u4e3a$len[i]$,\u53ef\u4ee5\u7528\u500d\u589e\u5728$O(nlogn)$\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u3002\n\n\u8003\u8651dp\uff0c$dp[i]$\u8868\u793a\u7b2ci\u4e2a\u70b9\u7684\u5b50\u6811\u7528\u6700\u5c11\u7684\u8def\u5f84\u8986\u76d6\u7684\u60c5\u51b5\u4e0b\u7b2ci\u4e2a\u70b9\u6700\u591a\u80fd\u5411\u4e0a\u4f38\u5c55\u7684\u70b9\u6570,ans[i]\u8868\u793a\u6b64\u65f6\u7b2ci\u4e2a\u70b9\u7684\u5b50\u6811\u6240\u9700\u7684\u8def\u5f84\u8986\u76d6\u6570\u3002\n\n\u90a3\u4e48$dp[i]=max(dp[j])-1,ans[i]=\\sum ans[j](fa[j]=i)$,\u7279\u522b\u5730\uff0c\u5982\u679cdp[i]=-1,\u90a3\u4e48$dp[i]=len[i],ans[i]+=1$\n\n\u7b54\u6848\u662f$ans[1]$\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#define maxn 100005\nint anc[100005][20],depth[100005]={0}, fa[maxn],head[maxn]={0}, tail=0, vis[maxn]={0};\nint len[100005], dp[100005], ans[100005];\nint n, l; long long s;\nlong long depth2[100005]={0};\nlong long val[100005];\nstruct edge {\n    int v, next;\n}edges[maxn*2];\ninline void add_edge(int u, int v) {\n    edges[++tail].v=v;\n    edges[tail].next=head[u];\n    head[u]=tail;\n}\nint cmp(int a, int b) {return depth[a]>depth[b];}\nvoid dfs(int u, int f) {\n    depth2[u]=depth2[f]+val[u];\n    depth[u]=depth[f]+1; anc[u][0]=f;\n    for (int i=1;(1<<i)<=depth[u];i++) {\n        anc[u][i]=anc[anc[u][i-1]][i-1];\n    }\n    for (int i=head[u];i;i=edges[i].next) {\n        if (edges[i].v!=f) {\n            dfs(edges[i].v, u);\n        }\n    } fa[u]=f;\n}\n\nint dfs2(int u) {\n    dp[u]=-1; ans[u]=0;int flag=0;\n    for (int i=head[u];i;i=edges[i].next) {\n        flag=1;\n        if (edges[i].v!=fa[u]) {\n            dfs2(edges[i].v);\n            ans[u]+=ans[edges[i].v];\n            dp[u]=std::max(dp[u], dp[edges[i].v]-1);\n        }\n    }if (flag==0) {dp[u]=len[u]-1; ans[u]=1; return 0;}\n    if (dp[u]==-1) {\n        dp[u]=len[u]-1;\n        ans[u]++;\n    }\n    return 0;\n}\n    \n\nint main() {\n    std::cin >> n >> l >> s;\n    if (l==0) {\n        printf(\"-1\"); return 0;\n    }\n    for (int i=1;i<=n;++i) {\n        std::cin >> val[i];\n        if (val[i]>s) {printf(\"-1\"); return 0;}\n    }\n    for (int i=2;i<=n;++i) {\n        int u; scanf(\"%d\", &u);\n        add_edge(i, u); add_edge(u, i);\n    }dfs(1, 0);\n    for (int i=1;i<=n;++i) {\n        int u=i;\n        for (int j=20;j>=0;--j) {\n            if (anc[u][j]!=0&&depth2[i]-depth2[fa[anc[u][j]]]<=s&&depth[i]-depth[fa[anc[u][j]]]<=l) \n                u=anc[u][j];\n        } //printf(\"%d->%d\\n\", i, u);\n        len[i]=depth[i]-depth[u]+1;\n        //printf(\"%d \", len[i]);\n    }dfs2(1);\n    printf(\"%d\", ans[1]);/*\n    for (int i=1;i<=n;++i) {\n        printf(\"%d %d\\n\", ans[i], dp[i]);\n    }*/\n    return 0;\n}\n```",
        "postTime": 1538785734,
        "uid": 48355,
        "name": "EternalAlexander",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1059E \u3010Split the Tree\u3011"
    },
    {
        "content": "\u4ece\u53f6\u8282\u70b9\u5411\u4e0a\u8003\u8651\uff0c\u6bcf\u4e2a\u53f6\u8282\u70b9\u4e00\u5b9a\u662f\u4e00\u6761\u8def\u5f84\u7684\u7aef\u70b9\uff0c\u7136\u540e\u628a\u8fd9\u6761\u8def\u5f84\u80fd\u8986\u76d6\u7684\u70b9\u90fd\u8986\u76d6\u6389\u3002\n\n\u7136\u540e\u628a\u88ab\u8986\u76d6\u8fc7\u7684\u70b9\u5220\u6389\uff0c\u5728\u5269\u4e0b\u7684\u4e00\u68f5\u6811\u4e2d\u63a5\u7740\u64cd\u4f5c\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u6574\u68f5\u6811\u88ab\u5220\u7a7a\u4e3a\u6b62\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u663e\u7136\u7684\u8d2a\u5fc3\uff0c\u4f7f\u7528\u6811\u5f62 $\\text{DP}$ \u7684\u5199\u6cd5\u53ef\u4ee5\u505a\u5230 $O(n \\log n)$ \uff08\u8986\u76d6\u5199\u6cd5\u8c8c\u4f3c\u65e0\u6cd5\u5904\u7406\u6839\u8282\u70b9\u88ab\u5220\u6389\u7684\u60c5\u51b5\uff09\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NR=1e5+10;\n#define int long long\nint n,len,lim,a[NR];\nint fa[NR][20],sum[NR][20],lg[NR],depth[NR];\nint f[NR],dp[NR],ans[NR];\nvector<int>g[NR];\n#define pb push_back\n\nvoid dfs(int id,int fath){\n\tdepth[id]=depth[fath]+1;\n\tfa[id][0]=fath;sum[id][0]=a[id];\n\tfor(int i=1;i<=lg[depth[id]];i++)\n\t\tfa[id][i]=fa[fa[id][i-1]][i-1],sum[id][i]=sum[id][i-1]+sum[fa[id][i-1]][i-1];\n\tif(a[id]>lim){\n\t\tputs(\"-1\");\n\t\texit(0);\n\t}\n\tint now=id,cnt=lim;\n\tfor(int k=lg[depth[id]];k>=0;k--)\n\t\tif(depth[now]>=(1<<k)&&f[id]+(1<<k)<=len&&cnt>=sum[now][k])\n\t\t\tf[id]+=(1<<k),cnt-=sum[now][k],now=fa[now][k];\n\tfor(int x:g[id])\n\t\tif(x!=fath)dfs(x,id);\n}\nint jump(int id,int x){\n\tfor(int k=lg[x];k>=0;k--)\n\t\tif(x>=(1<<k))x-=(1<<k),id=fa[id][k];\n\treturn id;\n}\nvoid solve(int id,int fath){\n\tfor(int x:g[id])\n\t\tif(x!=fath)solve(x,id),dp[id]=max(dp[id],dp[x]),ans[id]+=ans[x];\n\tdp[id]--;\n\tif(dp[id]==-1)dp[id]=f[id]-1,ans[id]++;\n}\n\nsigned main(){\n\tcin>>n>>len>>lim;\n\tfor(int i=1;i<=n;i++)scanf(\" %lld\",&a[i]),lg[i]=lg[i>>1]+1;\n\tfor(int i=2,x;i<=n;i++)\n\t\tscanf(\" %lld\",&x),g[x].pb(i),g[i].pb(x);\n\tdfs(1,0);solve(1,0);\n\tcout<<ans[1]<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1655646322,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "CF1059E \u9898\u89e3"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u8bf7\u70b9\u8fd9\u91cc](https://www.cnblogs.com/BrianPeng/p/12340976.html)\n\n## \u7ed9\u51fa\u4e00\u4e2a\u5806\u8d2a\u5fc3\u89e3\u6cd5\n\n\u8bb0\u70b9$u$\u7684\u6df1\u5ea6\u4e3a$d_u(d_1=0)$\uff0c\u7236\u4eb2\u4e3a$f_u$\uff0c\u62e5\u6709\u513f\u5b50\u6570\u91cf$es_u$\u3002\n\n\u9996\u5148\u627e\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u8fdc\u5ef6\u4f38\u70b9\uff08\u70b9$u$\u7684\u6700\u8fdc\u5ef6\u4f38\u70b9\u8bb0\u4e3a$v_u$\uff09\uff0c\u501f\u52a9\u6811\u4e0a\u500d\u589e\u5373\u53ef\u3002\n\n### \u63a5\u4e0b\u6765\u662f\u8d2a\u5fc3\u65b9\u6cd5\n\n\u5728\u6bcf\u6b21\u94fe\u8fde\u63a5\u5b8c\u540e\u5220\u6389\u8fd9\u4e9b\u70b9\uff0c\u90a3\u4e48\u6bcf\u6761\u94fe\u7684\u5c3e\u7aef\u4e00\u5b9a\u662f\u4e00\u4e2a\u53f6\u5b50\u3002\n\n\u90a3\u4e48\u5c31\u60f3\u529e\u6cd5\u627e\u51fa\u76ee\u524d\u8d2a\u5fc3\u6700\u4f18\u7684\u53f6\u5b50\uff0c\u7136\u540e\u5f80\u4e0a\u8fde\u63a5\u3002\n\n\u4ee5\u4e0b\u7684\u8d2a\u5fc3\u672c\u849f\u84bb\u5e76\u6ca1\u6709\u60f3\u51fa\u4e25\u683c\u8bc1\u660e\u65b9\u6cd5\uff0c\u53ea\u80fd\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u4e86QAQ\u3002\n\n#### \u8d2a\u5fc3 1\uff1a\u76ee\u524d$d_{v_u}$\u6700\u5c0f\u7684\u53f6\u5b50$u$\u662f\u6700\u4f18\u53f6\u5b50\n\n\u4e3e\u4e2a\u6817\u5b50\uff1a$n=5,f_{2..n}=[1,1,2,2],v_{1..n}=[1,1,3,1,2]$\uff08\u8bf7\u81ea\u884c\u8111\u8865\u8fd9\u68f5\u6811\uff09\n\n\u73b0\u5728\u7684\u53f6\u5b50\u6709$3,4,5$\u3002\n\n\u56e0\u4e3a$3$\u4e0e\u5176\u4ed6\u53f6\u5b50\u4e0d\u51b2\u7a81\uff0c\u6240\u4ee5\u76f4\u63a5\u8003\u8651$4,5$\u5373\u53ef\u3002\n\n\u5982\u679c\u9009\u62e9$4$\uff0c\u90a3\u4e48\u6700\u591a\u53ef\u4ee5\u5ef6\u4f38\u51fa$\\{1,2,4\\}$\uff0c\u5269\u4e0b$\\{3\\},\\{5\\}$\uff0c\u4e00\u5171$3$\u6761\u3002\n\n\u5982\u679c\u9009\u62e9$5$\uff0c\u90a3\u4e48\u6700\u591a\u53ea\u80fd\u5ef6\u4f38\u51fa$\\{2,5\\}$\uff0c\u5269\u4e0b\u7684$3,4$\u4e0d\u80fd\u5e2e\u5fd9\u5e26\u8d70$1$\uff0c\u6240\u4ee5\u5c31$4$\u6761\u4e86QAQ\u3002\n\n$\\therefore$ \u5e94\u8be5\u9009\u62e9$d_{v_u}$\u6700\u5c0f\u7684\u53f6\u5b50$u$\u4ee5\u6c42\u5e26\u8d70\u66f4\u591a\u7684\u70b9\u3002\n\n#### \u8d2a\u5fc3 2\uff1a\u5bf9\u4e8e\u6700\u4f18\u53f6\u5b50$u$\uff0c\u80fd\u5f80\u4e0a\u8fde\u5c31\u5f80\u4e0a\u8fde\n\n\u56e0\u4e3a\u662f\u76ee\u524d\u6700\u4f18\u7684\u53f6\u5b50\uff0c\u6ca1\u6709\u5176\u4ed6\u53f6\u5b50\u53ef\u4ee5\u5230\u8fbe$v_u$\uff0c\u76f8\u6bd4\u4e8e\u8ba9$v_u$\u91cd\u65b0\u5f00\u4e00\u6761\u94fe\uff0c\u8fd8\u662f\u7528$u$\u5e26\u8d70\u6bd4\u8f83\u5408\u7b97\u3002\n\n### \u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\n\n\u6784\u5efa\u4e00\u4e2a\u5b58\u50a8\u70b9$u$\uff0c\u4ee5$d_{v_u}$\u4e3a\u5173\u952e\u5b57\u7684\u5c0f\u6839\u5806\u3002\n\n\u4f7f\u7528 dfs \u6c42\u51fa$v_u,es_u$\uff0c\u7136\u540e\u628a\u53f6\u5b50\u4e22\u8fdb\u5806\u91cc\u3002\n\n\u6bcf\u6b21\u5f39\u51fa\u4e00\u4e2a\u70b9$u$\uff0c\u7b54\u6848\u8ba1\u6570$+1$\uff0c\u5e76\u4e14\u5f80\u4e0a\u8fde\u63a5\uff0c\u5c06\u8def\u8fc7\u7684\u70b9\u7528$vs_u$\u6807\u8bb0\u6389\u3002\n\n\u76f4\u5230\u5230\u8fbe$v_u$\u6216\u8005\u8be5\u70b9\u5df2\u88ab\u6807\u8bb0\uff0c\u505c\u6b62\u8fde\u63a5\u3002\n\n**Particularly,** \u5982\u679c\u5230\u8fbe\u4e86$v_u$\u4e14\u6ca1\u6709\u88ab\u6807\u8bb0\uff0c\u90a3\u4e48$f_{v_u}$\u5c31\u5931\u53bb\u4e86\u4e00\u4e2a\u513f\u5b50\uff0c\u6240\u4ee5\u8981\u5904\u7406$es_{f_{v_u}}$\u5e76\u5224\u65ad\u5165\u5806\u3002\n\n**Time complexity:** $O(n\\log n)$\n\n**Memory complexity:** $O(n\\log n)$\n\n\u5177\u4f53\u89c1\u4ee3\u7801\uff08$823$ms / $49.40$MB\uff09\n\n```cpp\n//This program is written by Brian Peng.\n#pragma GCC optimize(\"Ofast\",\"inline\",\"no-stack-protector\")\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define Rd(a) (a=read())\n#define Gc(a) (a=getchar())\n#define Pc(a) putchar(a)\nint read(){\n\tint x;char c(getchar());bool k;\n\twhile(!isdigit(c)&&c^'-')if(Gc(c)==EOF)exit(0);\n\tif(c^'-')k=1,x=c&15;else k=x=0;\n\twhile(isdigit(Gc(c)))x=(x<<1)+(x<<3)+(c&15);\n\treturn k?x:-x;\n}\nvoid wr(int a){\n\tif(a<0)Pc('-'),a=-a;\n\tif(a<=9)Pc(a|'0');\n\telse wr(a/10),Pc((a%10)|'0');\n}\nsigned const INF(0x3f3f3f3f),NINF(0xc3c3c3c3);\nlong long const LINF(0x3f3f3f3f3f3f3f3fLL),LNINF(0xc3c3c3c3c3c3c3c3LL);\n#define Ps Pc(' ')\n#define Pe Pc('\\n')\n#define Frn0(i,a,b) for(int i(a);i<(b);++i)\n#define Frn1(i,a,b) for(int i(a);i<=(b);++i)\n#define Frn_(i,a,b) for(int i(a);i>=(b);--i)\n#define Mst(a,b) memset(a,b,sizeof(a))\n#define File(a) freopen(a\".in\",\"r\",stdin),freopen(a\".out\",\"w\",stdout)\n#define N (100010)\nint n,l,s,w[N],f[N][20],g[N][20],ans,d[N],es[N],lg[N]{-1},u,v[N];\nbool vs[N];\nvector<int>e[N];\nstruct Cmp{bool operator()(int a,int b)const{return d[v[a]]>d[v[b]];}};\npriority_queue<int,vector<int>,Cmp>q;\nvoid dfs(int u);\nsigned main(){\n\tRd(n),Rd(l),Rd(s);\n\tFrn1(i,1,n)if(Rd(w[i])>s)wr(-1),exit(0);\n\tFrn1(i,2,n)e[Rd(*f[i])].push_back(i),lg[i]=lg[i>>1]+1;\n\tdfs(1);\n\twhile(!q.empty()){\n\t\tu=q.top(),q.pop(),++ans;\n\t\tfor(int p(u);!vs[p];p=*f[p]){\n\t\t\tvs[p]=1;\n\t\t\tif(p==v[u]){if(!--es[*f[v[u]]])q.push(*f[v[u]]);break;}\n\t\t}\n\t}\n\twr(ans),exit(0);\n}\nvoid dfs(int u){\n\tFrn1(i,1,lg[d[u]])f[u][i]=f[f[u][i-1]][i-1],\n\t\tg[u][i]=g[u][i-1]+g[f[u][i-1]][i-1];\n\tint rs(s-w[v[u]=u]);\n\tFrn_(i,lg[d[u]],0)if(d[u]-d[v[u]]+(1<<i)<l&&g[v[u]][i]<=rs)\n\t\trs-=g[v[u]][i],i=min(i,d[v[u]=f[v[u]][i]]);\n\tfor(int i:e[u])*f[i]=u,*g[i]=w[u],d[i]=d[u]+1,dfs(i);\n\tif(!(es[u]=e[u].size()))q.push(u);\n}\n```\n",
        "postTime": 1582260668,
        "uid": 66199,
        "name": "Bring",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF1059E \u3010Split the Tree\u3011"
    },
    {
        "content": "\u500d\u589e\u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u6700\u591a\u53ef\u4ee5\u5411\u4e0a\u5ef6\u4f38\u591a\u5c11\n\n\u8d2a\u5fc3\u5730\u586b\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define int long long\nusing namespace std;\ninline int read(){int x=0,f=1,ch=getchar(); while(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();} while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();} return x*f;}\ninline void write(int x){if (x<0) putchar('-'),x=-x; if (x>=10) write(x/10); putchar(x%10+'0');}\ninline void writeln(int x){write(x); puts(\"\");}\nconst int N=1e5+5;\nstruct edge{\n\tint link,next;\n}e[N<<1];\nint f[N],g[N],reach[N],fa[N][20],sum[N][20],w[N],n,L,S,tot,head[N];\ninline void add_edge(int u,int v){\n\te[++tot]=(edge){v,head[u]}; head[u]=tot;\n}\ninline void insert(int u,int v){\n\tadd_edge(u,v); add_edge(v,u);\n}\ninline void init(){\n\tn=read(); L=read(); S=read();\n\tfor (int i=1;i<=n;i++){\n\t\tw[i]=read();\n\t}\n\tfor (int i=2;i<=n;i++){\n\t\tinsert(i,read());\n\t}\n}\nvoid dfs(int u,int Fa){\n\tfa[u][0]=Fa; sum[u][0]=w[u];\n\tfor (int i=1;i<20;i++) fa[u][i]=fa[fa[u][i-1]][i-1],sum[u][i]=sum[fa[u][i-1]][i-1]+sum[u][i-1];\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tif (v!=Fa) dfs(v,u);\n\t}\n}\nvoid Dfs(int u,int Fa){\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tif (v!=Fa){\n\t\t\tDfs(v,u);\n\t\t\tf[u]=max(f[u],f[v]);\n\t\t\tg[u]+=g[v];\n\t\t}\n\t}\n\tif (!f[u]){\n\t\tf[u]=reach[u]-1; g[u]++;\n\t}else f[u]--;\n}\ninline void solve(){\n\tdfs(1,0);\n\tfor (int i=1;i<=n;i++){\n\t\tint l=L,s=S,u=i;\n\t\tfor (int j=19;j>=0;j--){\n\t\t\tif (l>=(1<<j)&&s>=sum[u][j]){\n\t\t\t\ts-=sum[u][j]; u=fa[u][j]; l-=(1<<j); \n\t\t\t}\n\t\t}\n\t\treach[i]=L-l;\n\t\tif (!reach[i]) {\n\t\t\twriteln(-1);\n\t\t\treturn;\n\t\t}\n\t}\n\tDfs(1,0);\n\twriteln(g[1]);\n}\nsigned main(){\n\tinit(); solve();\n\treturn 0;\n}\n```",
        "postTime": 1544412349,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1059E \u3010Split the Tree\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](http://zrzring.cn/index.php/archives/225)\n\n\u8c03\u4e86\u597d\u4e45\u7684\u9898\uff0c\u8fd8\u662f\u81ea\u5df1\u7801\u529b\u592a\u5dee\u4e86\n\n\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u4ece\u53f6\u5b50\u8d2a\u5fc3\uff0c\u80fd\u4e0d\u5207\u5c31\u4e0d\u5207\uff0c\u8fd9\u6837\u4fdd\u8bc1\u662f\u6700\u4f18\u7684\u3002\u7136\u540e\u8003\u8651\u8ba1\u7b97\u7b54\u6848\uff0c\u56e0\u4e3a\u9650\u5236\u6709\u4e24\u4e2a\uff0c\u4e0d\u80fd\u76f4\u63a5\u6811\u5f62dp\uff0c\u4e8e\u662f\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u80fd\u5f80\u4e0a\u722c\u591a\u5c11\u4e2a\u70b9\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u505a\u5230\u6811\u5f62dp\u4e86\n\n\u9884\u5904\u7406\u7684\u8fc7\u7a0b\u53ef\u4ee5\u7528\u500d\u589e\u4f18\u5316\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nvoid file() {\n    freopen(\"std.in\", \"r\", stdin);\n    freopen(\"wa.out\", \"w\", stdout);\n}\nconst int N = 2e5 + 10, inf = 1e9;\ninline int read() {\n    int sym = 0, res = 0; char ch = getchar();\n    while (!isdigit(ch)) sym |= (ch == '-'), ch = getchar();\n    while (isdigit(ch)) res = (res << 3) + (res << 1) + (ch ^ 48), ch = getchar();\n    return sym ? -res : res;\n}\ninline long long lread() {\n    long long sym = 0, res = 0; char ch = getchar();\n    while (!isdigit(ch)) sym |= (ch == '-'), ch = getchar();\n    while (isdigit(ch)) res = (res << 3) + (res << 1) + (ch ^ 48), ch = getchar();\n    return sym ? -res : res;\n}\nstruct EDGE {\n    int u, v, nxt;\n} edge[N];\nint n, L, head[N], cnt, fa[N][30], son[N], depth[N], jp[N], f[N];\nlong long S, val[N], sum[N][30];\nvoid add(int u, int v) {edge[++cnt] = (EDGE){u, v, head[u]}; head[u] = cnt;}\nvoid dfs(int u, int last) {\n    fa[u][0] = last; depth[u] = depth[last] + 1; sum[u][0] = val[last];\n    for (int i = 1; (1 << i) <= depth[u]; i++) {\n        fa[u][i] = fa[fa[u][i - 1]][i - 1];\n        sum[u][i] = sum[u][i - 1] + sum[fa[u][i - 1]][i - 1];\n    }\n    for (int e = head[u]; e; e = edge[e].nxt) {\n        int v = edge[e].v; son[u]++; dfs(v, u);\n    }\n}\nvoid dfs(int u) {\n    int mx = 0;\n    for (int e = head[u]; e; e = edge[e].nxt) {\n        int v = edge[e].v; dfs(v); mx = max(mx, jp[v]); f[u] += f[v];\n    }\n    if (!mx) f[u]++; else jp[u] = mx - 1;\n}\nint main() {\n    n = read(); L = read(); S = lread();\n    for (int i = 1; i <= n; i++) {\n        val[i] = lread(); if (val[i] > S) {printf(\"-1\"); return 0;}\n    }\n    for (int v = 2; v <= n; v++) {\n        int u = read(); add(u, v);\n    }\n    dfs(1, 0);\n    for (int i = 1; i <= n; i++) {\n        int u = i, s = val[u], l = 1;\n        for (int j = 20; j >= 0; j--) {\n            if (l + (1 << j) <= L && s + sum[u][j] <= S && fa[u][j]) {\n                s += sum[u][j]; l += 1 << j; u = fa[u][j];\n            }\n        }\n        jp[i] = l - 1;\n    }\n    dfs(1); printf(\"%d\", f[1]);\n    return 0;\n}\n```\n\n",
        "postTime": 1598263194,
        "uid": 28392,
        "name": "zrzring",
        "ccfLevel": 5,
        "title": "CF1059E \u3010Split the Tree\u3011"
    }
]