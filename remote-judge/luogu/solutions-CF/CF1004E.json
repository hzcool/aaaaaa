[
    {
        "content": "\u4ee5\u4e0b\u8bb2\u89e3$O(n)$\u505a\u6cd5    \n\u5982\u679c\u6211\u4eec\u9996\u5148\u627e\u5230\u4e86\u8fd9\u68f5\u6811\u7684\u76f4\u5f84\u4e0a\u7684\u70b9\uff0c\u90a3\u4e48\u9009\u62e9\u7684\u8def\u5f84\u5176\u4e2d\u4e00\u70b9\u80af\u5b9a\u5728\u6811\u7684\u76f4\u5f84\u4e0a   \n\u90a3\u7b2c\u4e8c\u4e2a\u70b9\u5728\u54ea\u91cc\u5462\uff1f\u63a5\u4e0b\u6765\u4fbf\u9700\u8981\u5f00\u59cb\u8bba\u8bc1   \n![](https://cdn.luogu.com.cn/upload/image_hosting/gg7hx01d.png)\n\u7efc\u4e0a\u6240\u5f97\uff0c\u9009\u62e9\u7684\u4e24\u70b9\u90fd\u5728\u6811\u7684\u76f4\u5f84\u4e0a\uff0c\u800c\u7b54\u6848\u5c31\u662f$max(d(b, f), d(a, e))$\uff0c\u76f4\u63a5\u626b\u4e00\u904d\u6ed1\u52a8\u7a97\u53e3\u6c42\u6700\u5c0f\u503c\uff0c \u65f6\u95f4\u590d\u6742\u5ea6$O(n)$",
        "postTime": 1605244606,
        "uid": 105922,
        "name": "Stay_Hungry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1004E \u3010Sonya and Ice Cream\u3011"
    },
    {
        "content": "### \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u5b9a\u4e00\u4e2a $N$ \u4e2a\u70b9\u7684\u6811\uff0c\u8981\u9009\u51fa\u4e00\u6761\u6240\u542b\u70b9\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc7 $K$ \u7684\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u5916\u7684\u70b9\u5230\u8fd9\u6761\u8def\u5f84\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002  \n\u6570\u636e\u8303\u56f4\uff1a$1\\le K \\le N \\le 10^5$  \n\n### \u89e3\u9898\u601d\u8def\n\u8fd9\u9053\u9898\u6211\u6709\u4e24\u79cd\u65b9\u6cd5\u3002\n\n#### \u65b9\u6cd5\u4e00\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u6027\u8d28\uff1a**\u9009\u51fa\u6765\u7684\u94fe\u4e00\u5b9a\u4f1a\u662f\u76f4\u5f84\u7684\u4e00\u90e8\u5206**\u3002  \n\u4e0d\u7136\u5c31\u80af\u5b9a\u4f1a\u5b58\u5728\u53ef\u80fd\u66f4\u65b0\u6700\u5927\u503c\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u800c\u4e14\u8fd9\u4e2a\u5206\u652f\u7684\u5927\u5c0f\u4e00\u5b9a\u4f1a\u4e0d\u6bd4\u8def\u5f84\u5305\u542b\u5728\u76f4\u5f84\u4e0a\u65f6\u5c0f\u3002  \n\u540c\u6837\u7684\u9053\u7406\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u6761\u8def\u5f84\u5728\u76f4\u5f84\u4e0a\u8d8a\u957f\u8d8a\u597d\u3002  \n\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u5148\u628a\u76f4\u5f84\u62a0\u51fa\u6765\uff0c\u8bb0\u4f5c\u4e00\u4e2a\u5e8f\u5217\uff0c\u90a3\u4e48\u8fd9\u9897\u6811\u5c31\u53ef\u4ee5\u60f3\u8c61\u6210\u4e00\u6761\u94fe\u6302\u4e86\u5f88\u591a\u5b50\u6811\u3002  \n\u6211\u4eecdfs\u51fa\u6bcf\u4e00\u4e2a\u76f4\u5f84\u4e0a\u7684\u70b9\uff0c\u5b83\u4e0b\u9762\u7684\u5b50\u6811\u7684\u4ee5\u6839\u4e3a\u6e90\u70b9\u7684\u6700\u957f\u8def\uff0c\u7136\u540e\u7528 $\\text{ST}$ \u8868\u7ef4\u62a4\u4e00\u4e0b\u5b83\u7684\u533a\u95f4\u6700\u5927\u503c\uff0c\u518d\u52a0\u4e0a\u4e00\u70b9\u524d\u7f00\u548c\uff0c\u7136\u540e\u5728\u76f4\u5f84\u4e0a\u79fb\u52a8\u8fd9\u4e2a\u5e8f\u5217\uff0c\u66f4\u65b0\u7b54\u6848\u5c31\u597d\u4e86\u3002  \n\u590d\u6742\u5ea6\u662f $O(n \\log n)$ \u7684\u3002  \n\n#### \u65b9\u6cd5\u4e8c\n\u8003\u8651\u4e00\u79cd\u8d2a\u5fc3\u7684\u601d\u60f3\u3002  \n\u6211\u4eec\u8003\u8651\u4e0d\u65ad\u5220\u6389\u53f6\u5b50\uff0c\u6bcf\u6b21\u9009\u62e9\u8ddd\u79bb\u76ee\u6807\u5f62\u6001\u6700\u8fd1\u7684\u53f6\u5b50\u5220\u6389\uff0c\u5e76\u4e14\u5224\u65ad\u4e00\u4e0b\u4ed6\u7684\u7236\u4eb2\u662f\u4e0d\u662f\u6210\u4e86\u65b0\u7684\u53f6\u5b50\uff0c\u5e76\u5c06\u4ed6\u7684\u7b54\u6848\u5411\u7236\u4eb2\u5408\u5e76\u3002  \n\u5173\u4e8e\u6b63\u786e\u6027\uff1a  \n1. \u5220\u6210\u94fe\u4e4b\u540e\u5c31\u4f1a\u7ee7\u7eed\u5220\u94fe\u7684\u7aef\u70b9\uff0c\u8fd9\u80af\u5b9a\u6ca1\u95ee\u9898\u3002  \n2. \u8fd9\u91cc\u7684\u6700\u8fd1\u7c7b\u4f3c\u4e0e\u4e0a\u6587\u4e2d\u7684\u201c\u76f4\u5f84\u4e0a\u7684\u70b9\u7684\u5b50\u6811\u7684\u4ee5\u6839\u4e3a\u6e90\u70b9\u7684\u6700\u957f\u8def\u201d\uff0c\u6240\u4ee5\u662f\u5bf9\u7684\u3002  \n3. \u7531\u4e8e\u9009\u62e9\u987a\u5e8f\u7684\u89c4\u5b9a\uff0c\u6240\u4ee5\u66f4\u65b0\u7236\u4eb2\u7684\u4e00\u5b9a\u662f\u6700\u540e\u88ab\u9009\u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u56e0\u4e3a\u5b83\u7684\u5173\u952e\u5b57\u6700\u5927\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5728\u7236\u4eb2\u53d8\u53f6\u5b50\u65f6\u66f4\u65b0\u3002  \n\n\u77e5\u9053\u4e86\u539f\u7406\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 `set` \u5b58\u8fb9\uff0c\u65b9\u4fbf\u8fdb\u884c\u5220\u8fb9\u64cd\u4f5c\uff0c\u7528 `priority_queue` \u6765\u7ef4\u62a4\u6240\u6709\u7684\u53f6\u5b50\uff0c\u7136\u540e\u76f4\u63a5\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u597d\u4e86\u3002  \n\n### \u7ec6\u8282\u6ce8\u610f\u4e8b\u9879\n+ \u7528\u7b2c\u4e00\u79cd\u65b9\u6cd5\u4f1a\u7a0d\u5fae\u6709\u4e00\u70b9\u96be\u8c03\u3002  \n+ \u7528\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0 `STL` \u7684\u4f7f\u7528\u51fa\u9519\u7b49\u95ee\u9898\u3002  \n\n### \u53c2\u8003\u4ee3\u7801\n\u8fd9\u662f\u65b9\u6cd5\u4e00\u7684\u4ee3\u7801\uff0c\u7531\u4e8e\u6211\u81ea\u5df1\u6ca1(lan)\u6709(de)\u6253\uff0c\u6240\u4ee5\u8fd9\u91cc\u653e\u7684\u662f $\\text{\\color{black}{M}\\color{red}{\\_sea}}$ \u795e\u4ed9\u7684\u4ee3\u7801  \n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstdlib>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#define re register\nusing namespace std;\n\ninline int read() {\n    int X=0,w=1; char c=getchar();\n    while (c<'0'||c>'9') { if (c=='-') w=-1; c=getchar(); }\n    while (c>='0'&&c<='9') X=X*10+c-'0',c=getchar();\n    return X*w;\n}\n\nconst int N=100000+10;\n\nint n,k;\n\nstruct edge { int v,w,nxt; } e[N<<1];\nint head[N];\ninline void addEdge(int u,int v,int w) {\n    static int cnt=0;\n    e[++cnt]=(edge){v,w,head[u]},head[u]=cnt;\n}\n\nint rt1,rt2;\nint dis[N],fa[N];\ninline void dfs1(int u,int f) {\n    if (dis[u]>dis[rt1]) rt1=u;\n    for (re int i=head[u];i;i=e[i].nxt)\n        if (e[i].v!=f) dis[e[i].v]=dis[u]+e[i].w,dfs1(e[i].v,u);\n}\ninline void dfs2(int u,int f) {\n    fa[u]=f;\n    if (dis[u]>dis[rt2]) rt2=u;\n    for (re int i=head[u];i;i=e[i].nxt)\n        if (e[i].v!=f) dis[e[i].v]=dis[u]+e[i].w,dfs2(e[i].v,u);\n}\n\nint cnt=0,lend=0;\nint in[N],maxdis[N],w[N];\nint lg[N],st[17][N],sum[N];\ninline void dfs3(int u,int f) {\n    for (re int i=head[u];i;i=e[i].nxt) {\n        int v=e[i].v; if (v==f) continue;\n        w[v]=e[i].w,dfs3(v,u);\n        if (!in[v]) maxdis[u]=max(maxdis[u],maxdis[v]+e[i].w);\n    }\n}\ninline void init_diameter() {\n    for (re int i=rt2;i;i=fa[i]) in[i]=1,++cnt;\n    dfs3(rt1,0);\n    for (re int i=2;i<=n;++i) lg[i]=lg[i>>1]+1;\n    for (re int i=rt2,j=1;i;i=fa[i],++j) st[0][j]=maxdis[i];\n    for (re int i=1;i<17;++i)\n        for (re int j=1;j+(1<<i)-1<=cnt;++j)\n            st[i][j]=max(st[i-1][j],st[i-1][j+(1<<(i-1))]);\n    for (re int i=rt2,j=1;i;i=fa[i],++j) sum[j]=w[i],lend+=w[i];\n    for (re int i=1;i<=cnt;++i) sum[i]+=sum[i-1];\n}\ninline int query(int l,int r) {\n    int t=lg[r-l+1];\n    return max(st[t][l],st[t][r-(1<<t)+1]);\n}\n\nint main() {\n    n=read(),k=read();\n    if (n==1) { puts(\"0\"); return 0; }\n    for (re int i=1;i<n;++i) {\n        int u=read(),v=read(),w=read();\n        addEdge(u,v,w),addEdge(v,u,w);\n    }\n    dfs1(1,0),dfs2(rt1,0);\n    init_diameter();\n    if (k>cnt) printf(\"%d\\n\",query(1,cnt));\n    else {\n        int ans=2e9;\n        for (re int i=1;i+k-1<=cnt;++i) {\n            int tmp=max(sum[i-1],lend-sum[i+k-2]);\n            ans=min(ans,max(tmp,query(i,i+k-1)));\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```  \n\n\u4e0b\u9762\u662f\u65b9\u6cd5\u4e8c\u7684\u4ee3\u7801\uff0c\u6211\u81ea\u5df1\u6572\u7684\u3002  \n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#define rg register\nusing namespace std;\ntemplate < typename T > inline void read(T& s) {\n \ts = 0; int f = 0; char c = getchar();\n \twhile (!isdigit(c)) f |= (c == '-'), c = getchar();\n \twhile (isdigit(c)) s = s * 10 + (c ^ 48), c = getchar();\n \ts = f ? -s : s;\n}\n\nconst int _ = 100000 + 10;\n\nint n, k, ans;\nstruct node{ int u, w; };\ninline bool operator < (const node& x, const node& y) { return x.w > y.w; }\npriority_queue < node > Q;\nset < pair < int, int > > s[_];\n\nint main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.in\", \"r\", stdin);\n#endif\n\tread(n), read(k);\n\tfor (rg int u, v, d, i = 1; i < n; ++i) {\n\t\tread(u), read(v), read(d);\n\t\ts[u].insert(make_pair(v, d));\n\t\ts[v].insert(make_pair(u, d));\n\t}\n\tfor (rg int i = 1; i <= n; ++i)\n\t\tif (s[i].size() == 1) Q.push((node) { i, (*s[i].begin()).second });\n\twhile (Q.size() > 2 || k < n) {\n\t\tnode x = Q.top(); Q.pop(), --n, ans = x.w;\n\t\tint u = x.u, v = (*s[u].begin()).first;\n\t\ts[v].erase(s[v].lower_bound(make_pair(u, 0)));\n\t\tif (s[v].size() == 1) Q.push((node) { v, ans + (*s[v].begin()).second });\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n\n```  \n\n**\u5b8c\u7ed3\u6492\u82b1 $qwq$**",
        "postTime": 1571877752,
        "uid": 87839,
        "name": "Sangber",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1004E \u3010Sonya and Ice Cream\u3011"
    },
    {
        "content": "\u663e\u7136\u6700\u4f18\u89e3\u4e00\u5b9a\u5728\u76f4\u5f84\u4e0a\uff0c\u4e14\u5c3d\u91cf\u957f\u3002\n\n#### \u8bc1\u660e\uff1a\n\n\u82e5\u5b58\u5728\u4e00\u4e2a\u6700\u5927\u503c\u66f4\u5c0f\u7684\u5206\u652f\uff0c\u8fd9\u4e2a\u5206\u652f\u7684\u5927\u5c0f\u4e00\u5b9a\u4e0d\u6bd4\u89e3\u5728\u76f4\u5f84\u4e0a\u65f6\u5c0f\u3002\u540c\u7406\uff0c\u6211\u4eec\u60f3\u8ba9\u8fd9\u6761\u8def\u5f84\u5c3d\u91cf\u957f\u3002\n\n\u4e8e\u662f\u5c3a\u53d6\u76f4\u5f84\u4e0a\u7684\u4e00\u6761\u94fe\uff0c\u5176\u5230\u76f4\u5f84\u4e0a\u6240\u6709\u70b9\u7684\u6700\u957f\u8ddd\u79bb\u4e00\u5b9a\u4e3a\u5176\u5230\u76f4\u5f84\u4e24\u7aef\u70b9\u7684\u8ddd\u79bb\u7684\u8f83\u5927\u503c\u3002\u5bf9\u4e8e\u4e0d\u5728\u8fd9\u6761\u76f4\u5f84\u4e0a\u7684\u70b9\u53ef\u4ee5\u76f4\u63a5\u641c\u7d22\uff0c\u5b83\u53ea\u4f1a\u88ab\u5b83\u7684\u7956\u5148\u4e2d\u79bb\u5b83\u6700\u8fd1\u7684\u3001\u5728\u76f4\u5f84\u4e0a\u7684\u70b9\u641c\u7d22\uff0c\u4e8e\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct node {\n    int x, w;\n};\nbool vis[100005];\nvector<node> v[100005];\nint n, s, p, ans = 1e9, fa[100005], dis[100005], dep[100005];\nvoid dfs(int x, int fa) {\n    ::fa[x] = fa, dep[x] = dep[fa] + 1;\n    if(dis[x] > dis[p])\n        p = x;\n    for(auto i : v[x])\n        if(i.x != fa && !vis[i.x])\n            dis[i.x] = dis[x] + i.w, dfs(i.x, x);\n    return;\n}\nint main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    cin >> n >> s;\n    for(int i = 1, x, y, w; i < n; i++)\n        cin >> x >> y >> w, v[x].push_back((node){y, w}), v[y].push_back((node){x, w});\n    dfs(dis[1] = 1, 0), dis[p] = 0, dfs(p, 0);\n    for(int i = p, j = p, x; i; i = fa[i]) {\n        while(dep[j] - dep[i] >= s)\n            j = fa[j];\n        x = max(dis[p] - dis[j], dis[i]), ans = min(ans, x);\n    }\n    for(int i = p; i; i = fa[i])\n        vis[i] = 1;\n    for(int i = p; i; i = fa[i])\n        dis[p = i] = 0, dfs(i, fa[i]);\n    for(int i = 1; i <= n; i++)\n        ans = max(ans, dis[i]);\n    cout << ans;\n    return 0;\n}\n```\n",
        "postTime": 1674954351,
        "uid": 374330,
        "name": "ACACACACACACACACACAC",
        "ccfLevel": 6,
        "title": "CF1004E\u9898\u89e3"
    },
    {
        "content": "\u6ca1\u4eba\u53d1\u73b0\u8fd9\u4e2a\u5c31\u662f**\u6811\u7f51\u7684\u6838**\u5417\u3002\u3002\u3002~~\u666e\u53ca\u7ec4\u96be\u5ea6\u7684\u9898~~\n\n\u5148\u627e\u51fa\u76f4\u5f84\uff0c\u5728\u76f4\u5f84\u4e0a\u6bcf\u6b21\u90fd\u53d6k\u4e2a\u70b9\uff08\u663e\u7136\u70b9\u66f4\u591a\u7b54\u6848\u4e0d\u4f1a\u66f4\u5dee\uff09\n\n\u6211\u4eec\u627e\u7684\u6700\u5c0f\u503c\u80af\u5b9a\u8981\u4e48\u662f**\u4e24\u7aef\u70b9\u5230\u76f4\u5f84\u7aef\u70b9\u7684\u8d21\u732e**\uff0c\u8981\u4e48\u662f**\u76f4\u5f84\u4e0a\u7684\u70b9\u7684\u8d21\u732e**\uff0c\u524d\u8005\u663e\u7136\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u3002\n\n\u800c\u540e\u8005\u5c31\u662f\u76f4\u5f84\u4e0a\u4e00\u4e2a\u70b9\u5728\u4e0d\u7ecf\u8fc7\u76f4\u5f84\u4e0a\u5176\u4ed6\u7684\u70b9\u7684\u60c5\u51b5\u4e0b\u6240\u80fd\u5230\u8fbe\u7684\u6700\u8fdc\u7684\u70b9\uff08\u5176\u5b9e\u5c31\u662f\u5b83\u7684\u5b50\u6811\u91cc\u6700\u8fdc\u7684\u70b9\uff09\u3002\n\n# \u4e3a\u4ec0\u4e48\uff1f\n\u5047\u5982\u8fd9\u4e2a\u70b9A\u7ecf\u8fc7\u5176\u4ed6\u5728\u76f4\u5f84\u4e0a\u7684\u70b9B\u5230\u8fbe\u4e86\u66f4\u8fdc\u7684\u70b9C\uff0c\u90a3\u4e48\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8fdb\u884c\u8ba8\u8bba\u3002\n\n## 1\n\n\u5982\u679cB\u5728\u6211\u4eec\u6240\u9009\u7684\u8def\u5f84\u4e0a\uff0c\u90a3\u4e48\u663e\u7136\u7531B\u51fa\u53d1\u5230\u8fbeC\u7684\u8ddd\u79bb\u66f4\u5c0f\u3002\n\n## 2\n\n\u5982\u679cB\u4e0d\u5728\u6211\u4eec\u6240\u9009\u7684\u8def\u5f84\u4e0a\uff0c\u90a3\u4e48C\u5230B\u7684\u8ddd\u79bb\u4e00\u5b9a\u4e0d\u5927\u4e8eB\u5230\u76f4\u5f84\u67d0\u7aef\u70b9\u7684\u8ddd\u79bb\uff08\u76f4\u5f84\u7684\u5b9a\u4e49\uff09\u3002\n\n## \u7efc\u4e0a\uff0c\u8fd9\u4e24\u79cd\u9519\u8bef\u7684\u60c5\u51b5\u5c31\u4f1a\u88ab\u6211\u4eec\u8fc7\u6ee4\u6389\u3002\n\n\u5177\u4f53\u8bf7\u770b\u4ee3\u7801\uff0c\u4e0d\u8981\u76f4\u63a5Ctrl+C\u54e6o(>\ufe4f<)o\n\n### By 520Enterprise\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=500010;\nint n,k,cnt,head[maxn],dis[maxn],fa[maxn],ans=1e9,zhijing[maxn];\nstruct edge\n{\n    int to,next,quan;\n}e[maxn<<1];\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')\n    {\n\tif(ch=='-')\n\t    f=-1;\n\tch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n\tx=(x<<1)+(x<<3)+(ch^48);\n\tch=getchar();\n    }\n    return x*f;\n}\ninline void write(int a)\n{\n    if(a<0)\n    {\n\tchar a='-',b='1';\n\tputchar(a);\n\tputchar(b);\n    }\n    else\n    {\n\tif(a>=10)\n\t    write(a/10);\n\tputchar(a%10+'0');\n    \tputs(\"520Enterprise\");\n    }\n}\nvoid add(int from,int to,int quan)\n{\n    e[++cnt]=(edge){to,head[from],quan};\n    head[from]=cnt;\n}\nvoid dfs(int now,int father)\n{\n    for(int i=head[now];i;i=e[i].next)\n    {\n\tint to=e[i].to;\n\tif(to==father||zhijing[to])\n\t    continue;\n\tdis[to]=dis[now]+e[i].quan;\n\tfa[to]=now;\n\tdfs(to,now);\n    }\n}\nint main()\n{\n    n=read(),k=read();\n    for(int i=1;i<n;i++)\n    {\n\tint u=read(),v=read(),w=read();\n\tadd(u,v,w),add(v,u,w);\n    }\n    int qidian=1,zhongdian=1;\n    dis[qidian]=0;\n    dfs(qidian,0);\n    for(int i=1;i<=n;i++)\n\tif(dis[i]>dis[qidian])\n\t    qidian=i;\n    dis[qidian]=0,fa[qidian]=0;\n    dfs(qidian,0);\n    for(int i=1;i<=n;i++)\n\tif(dis[i]>dis[zhongdian])\n\t    zhongdian=i;\n    int j=zhongdian;\n    for(int i=1;i<k&&fa[j];i++)\n\tj=fa[j];\n    for(int i=zhongdian;i&&j;i=fa[i])\n    {\n\tans=min(ans,max(dis[j],dis[zhongdian]-dis[i]));\n\tj=fa[j];\n    }\n    for(int i=zhongdian;i;i=fa[i])\n\tzhijing[i]=1;\n    for(int i=zhongdian;i;i=fa[i])\n\tdis[i]=0,dfs(i,0);\n    for(int i=1;i<=n;i++)\n\tans=max(ans,dis[i]);\n    write(ans);\n    return 0;\n}\n```",
        "postTime": 1571802424,
        "uid": 217454,
        "name": "520Enterprise",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF1004E \u3010Sonya and Ice Cream\u3011"
    },
    {
        "content": "## Sonya and Ice Cream\u9898\u89e3\n\u8fd9\u9053\u9898\u662f\u4e00\u4f4d\u4e00\u904dA\u4e86\u5feb\u9910\u5e97\u7684\u5de8\u4f6c\u63a8\u8350\u7ed9\u6211\u7684\uff0c\u8bf4\u5feb\u9910\u5e97\u5de8\u7b80\u5355\uff0c\u4e0d\u8fc7\u8fd8\u662f\u5148\u505a\u4e00\u4e0b\u7b80\u5316\u7248\uff0c\u5c31\u662f\u8fd9\u9053\u9898\uff08~~\u7167\u987e\u6211\u592a\u5f31\u4e86~~\uff09\n\n\u597d\u4e86\u56de\u5230\u8fd9\u4e00\u9898\uff0c\n\n\u9996\u5148\uff0c\u8fd9\u6761\u8def\u5f84\u4e00\u5b9a\u5728\u76f4\u5f84\u4e0a(\u82e5\u6709\u4e00\u6bb5\u4e0d\u662f\u76f4\u5f84\uff0c\u4e00\u5b9a\u6bd4\u76f4\u5f84\u7684\u957f)\n\n\n~~\u5de8\u4f6c\u8bf4\u968f\u4fbf\u753b\u56fe\u7406\u89e3\u4e00\u4e0b\u5c31\u884c\u4e86~~\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848x(\u6700\u5c0f\u7684\u6700\u5927\u503c)\uff0c\n\n\u8d2a\u5fc3\u627e\u5230\u79bb\u76f4\u5f84\u4e00\u7aef\u8ddd\u79bb<=x\u7684\u6700\u8fdc\u70b9(\u500d\u589e)\uff0c\n\n\u60c5\u51b5\u5927\u6982\u5982\u4e0b\u56fe\uff1a\n![](https://images.cnblogs.com/cnblogs_com/ljk123-de-bo-ke/1441553/o_2019-10-16%2017-15-41%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png)\n\n\u5176\u4e2d\u5b50\u6811\u6302\u5760\uff0c\u5c06\u76f4\u5f84\u770b\u4e3a\u5e8f\u5217\u7528ST\u8868\u9884\u5904\u7406\n\n\u5de6\u7aef\u7684\u76f4\u5f84\uff0c\u56e0\u4e3a\u4ece\u5de6\u7aef\u8dd1\u8d77\uff0c\u6240\u4ee5\u4e00\u5b9a\u5c0f\u4e8ex\uff0c\n\n\u53f3\u7aef\u7684\u76f4\u5f84\uff0c\u7528\u524d\u7f00\u548c\u7ef4\u62a4\u5e8f\u5217\u8ddd\u79bb\uff0c\n\n\u6700\u540e\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u5728\u4ee3\u7801\u91cc\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+6;\nint n,k,t1,t2,t3,fr,cnt=0,head[N],v[N],f[N][21],g[N][21];\nint maxp=0,maxt=0,maxdis[N],a[N],sum[N],len,deep,w[N],h[N][21];\nstruct edge{int nxt,to,w;}e[N<<1];\ninline void add(int u,int v,int w){e[++cnt].nxt=head[u],e[cnt].to=v,e[cnt].w=w,head[u]=cnt;}\ninline int read(){\n   int T=0,F=1; char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-') F=-1; ch=getchar();}\n   while(ch>='0'&&ch<='9') T=(T<<3)+(T<<1)+(ch-48),ch=getchar();\n   return F*T; \n}\nvoid dfs(int x,int fa,int w){\n    sum[x]=w;\n    for(int i=head[x];i;i=e[i].nxt) if(e[i].to!=fa) dfs(e[i].to,x,w+e[i].w);\n    if(maxp<w) maxp=w,maxt=x;\n}\nvoid dfs2(int x,int fa,int d){\n    maxdis[x]=0,f[x][0]=fa;\n    for(int i=1;i<=20;++i) f[x][i]=f[f[x][i-1]][i-1],g[x][i]=g[x][i-1]+g[f[x][i-1]][i-1];\n    for(int i=head[x];i;i=e[i].nxt) if(e[i].to!=fa) g[e[i].to][0]=e[i].w,dfs2(e[i].to,x,d+1),v[x]|=v[e[i].to],maxdis[x]=(!v[e[i].to]?max(maxdis[x],maxdis[e[i].to]+e[i].w):maxdis[x]);\n    if(v[x]) a[d]=x,deep=max(deep,d);\n}\nbool check(int x){\n    t1=maxt,t2=x,cnt=0;\n    for(int i=20;i>=0;--i) if(t2>=g[t1][i]) t2-=g[t1][i],t1=f[t1][i],cnt+=(1<<i);\n    //\u8d2a\u5fc3\u6c42\u51fa\u79bb\u76f4\u5f84\u6df1\u5ea6\u4e3adeep\u7684\u70b9\u8ddd\u79bb<=x\u7684\u6700\u8fdc\u70b9\uff0c\u770b\u4e00\u770b\u5b83\u5230\u540e\u9762\u7684k-1\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a\u6302\u5760\u5b50\u6811\u7684\u6700\u5927\u8ddd\u79bb\uff0c\u548c\u8def\u5f84\u4e0a\u6700\u540e\u4e00\u4e2a\u70b9\u5230\u76f4\u5f84\u53e6\u4e00\u7aef(\u6df1\u5ea6\u4e3a1)\u7684\u8ddd\u79bb\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8ex\n    t3=max(deep-cnt-k+1,1);//t3\u4e3a\u8def\u5f84\u4e0a\u7b2ck\u4e2a\u70b9\n    return max(sum[a[t3]],w[t3])<=x;\n}\nint ef(int l,int r){\n    if(l==r) return l;\n    int mid=l+r>>1;\n    if(check(mid)) return ef(l,mid);\n    return ef(mid+1,r);\n}\nint main(){\n   n=read(),k=read();\n   for(int i=1;i<n;++i) t1=read(),t2=read(),t3=read(),add(t1,t2,t3),add(t2,t1,t3);\n   dfs(1,0,0);\n   maxp=0,fr=maxt,maxt=0,dfs(fr,0,0);\n   //\u6c42\u76f4\u5f84\uff0c\u4ecefr\u5230maxt\uff0c\u957f\u5ea6\u4e3amaxp,\u6c42\u51fasum\u6570\u7ec4\u4ee3\u8868\u76f4\u5f84\u4e0a\u6df1\u5ea6\u4e3ai\u7684\u70b9\u5230\u6df1\u5ea6\u4e3a1\u7684\u70b9(\u76f4\u5f84\u7aef\u70b9)\u7684\u8ddd\u79bb\n   v[maxt]=1,deep=0,dfs2(fr,0,1);\n   //\u7b2c\u4e8c\u904d\u641c\u76f4\u5f84\u4e0a\u7684\u70b9\uff0c\u770b\u6210\u5e8f\u5217\u5b58\u5728a\u91cc\uff0c\u7f16\u53f7\u5373\u4e3a\u6df1\u5ea6\uff0c\u9884\u5904\u7406\u500d\u589e\u6570\u7ec4\n   for(int i=deep;i>=1;--i) h[i][0]=maxdis[a[i]];\n   for(int i=1;i<=20;++i) for(int j=1;j+(1<<i)-1<=deep;++j) h[j][i]=max(h[j][i-1],h[j+(1<<(i-1))][i-1]);\n   for(int i=1;i<=deep;++i) len=(int)log2(min(deep-i+1,k)),w[i]=max(h[i][len],h[i+k-(1<<len)][len]);\n   //ST\u8868\u6c42\u76f4\u5f84\u4e0a\u6302\u5760\u7684\u5b50\u6811\u7684\u6700\u5927\u8ddd\u79bb\n   printf(\"%d\\n\",ef(0,1e9));\n   //\u4e8c\u5206\u6c42\u89e3\n   return 0;\n}\n```\n\u6700\u540e\u6211\u53d1\u73b0\u4f3c\u4e4e\u53ef\u4ee5\u5728\u4e8c\u5206\u91cc\u76f4\u63a5$O(n)$\u626b\u4e00\u904d\u4e0d\u8981\u9884\u5904\u7406(\u67d0\u4f4d\u5de8\u4f6c\u5751\u6211),\n\n\u6211\u82e6\u5fc3\u8ffd\u6c42\u7684$O((log n)^{2})$\u7684\u590d\u6742\u5ea6\u4e5f\u56e0\u4e3a\u9884\u5904\u7406\u53d8\u6210$O(n log n)$\u4e86\n\nWuWuWu~~\n\n~~\u8fd9\u4e2a\u6545\u4e8b\u544a\u8bc9\u6211\u4eec\uff0c\u5343\u4e07\u4e0d\u8981\u8ffd\u6c42\u4f18\u79c0\u65f6\u95f4\u590d\u6742\u5ea6\u554a~~\n\n\u9644\u7b80\u5355\u4ee3\u7801:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+6;\nint n,k,t1,t2,t3,fr,cnt=0,head[N],v[N];\nint maxp=0,maxt=0,maxdis[N],a[N],sum[N],deep;\nstruct edge{int nxt,to,w;}e[N<<1];\ninline void add(int u,int v,int w){e[++cnt].nxt=head[u],e[cnt].to=v,e[cnt].w=w,head[u]=cnt;}\ninline int read(){\n   int T=0,F=1; char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-') F=-1; ch=getchar();}\n   while(ch>='0'&&ch<='9') T=(T<<3)+(T<<1)+(ch-48),ch=getchar();\n   return F*T; \n}\nvoid dfs(int x,int fa,int w){\n    sum[x]=w;\n    for(int i=head[x];i;i=e[i].nxt) if(e[i].to!=fa) dfs(e[i].to,x,w+e[i].w);\n    if(maxp<w) maxp=w,maxt=x;\n}\nvoid dfs2(int x,int fa,int d){\n    maxdis[x]=0;\n    for(int i=head[x];i;i=e[i].nxt) if(e[i].to!=fa) dfs2(e[i].to,x,d+1),v[x]|=v[e[i].to],maxdis[x]=(!v[e[i].to]?max(maxdis[x],maxdis[e[i].to]+e[i].w):maxdis[x]);\n    if(v[x]) a[d]=x,deep=max(deep,d);\n}\nbool check(int x){\n    t1=1,t3=0,t2=a[1];\n    for(int i=deep;i>=1;--i) if(sum[a[deep]]-sum[a[i]]>x){t1=i+1; break;}\n    for(int i=t1;i>=max(t1-k+1,1);--i) t3=max(maxdis[a[i]],t3),t2=a[i];\n    return max(sum[t2],t3)<=x;\n}\nint ef(int l,int r){\n    if(l==r) return l;\n    int mid=l+r>>1;\n    if(check(mid)) return ef(l,mid);\n    return ef(mid+1,r);\n}\nint main(){\n   n=read(),k=read();\n   for(int i=1;i<n;++i) t1=read(),t2=read(),t3=read(),add(t1,t2,t3),add(t2,t1,t3);\n   dfs(1,0,0);\n   maxp=0,fr=maxt,maxt=0,dfs(fr,0,0);\n   v[maxt]=1,deep=0,dfs2(fr,0,1);\n   printf(\"%d\\n\",ef(0,1e9));\n   return 0;\n}\n```",
        "postTime": 1571221118,
        "uid": 44180,
        "name": "ljk123",
        "ccfLevel": 0,
        "title": "Sonya and Ice Cream\u9898\u89e3"
    }
]