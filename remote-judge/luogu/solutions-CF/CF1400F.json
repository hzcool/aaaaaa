[
    {
        "content": "\u672c\u6587\u540c\u6b65\u53d1\u8868\u4e8e[\u6211\u7684cnblog](https://www.cnblogs.com/ZigZagKmp/p/13563143.html)\n\n\u672c\u573a\u9898\u89e3\u53ef\u89c1[\u6b64](https://www.luogu.com.cn/blog/ZigZagKmp/codeforces-1400-edu-94-solution)\n## \u9898\u610f\u7b80\u8ff0\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32$s$\uff0c\u5b9a\u4e49$f(l,r)$\u4e3a$s_l,s_{l+1},\\cdots,s_{r}$\u7684\u6570\u5b57\u548c\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u533a\u95f4$[l,r]$\u662f$x-prime$\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff1a\n\n- $f(l,r)=x$\n- \u4e0d\u5b58\u5728$[l,r]$\u7684\u5b50\u533a\u95f4$[l_2,r_2]$\uff0c\u4f7f\u5f97$f(l_2,r_2)$\u662f$x$\u7684\u771f\u56e0\u6570\u3002\n\n\u6c42\u6700\u5c11\u8981\u5220\u9664$s$\u4e2d\u7684\u5b57\u7b26\u4e2a\u6570\uff0c\u4f7f\u5f97\u5220\u9664\u540e\u7684$s$\u4e0d\u5b58\u5728$x-prime$\u533a\u95f4\u3002\n\n$1\\le |s|\\le 1000$\uff0c$1\\le x\\le 20$\u3002\n### \u7b97\u6cd5\u8003\u5bdf\n\u7279\u6b8a\u6027\u8d28\u89c2\u5bdf\uff0cAC\u81ea\u52a8\u673a\u4e0aDP\n## \u7b97\u6cd5\u5206\u6790\n\u901a\u8fc7\u67d0\u79cd\u65b9\u6cd5\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0$x\\le 20$\u7684\u8303\u56f4\u5185$x-prime$\u7684\u5b57\u7b26\u4e32\u5f88\u5c11\uff0c\u6700\u591a\u7684\u662f$x=19$\u65f6\uff0c\u5171\u67092399\u4e2a\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u7684$x-prime$\u751f\u6210\u51fa\u6765\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u5bf9\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32$s$\uff0c\u6c42\u5176\u6700\u957f\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u5b50\u5e8f\u5217\u4e0d\u5b58\u5728\u6700\u591a$2399$\u4e2a\u975e\u6cd5\u5b57\u7b26\u4e32\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u6211\u4eec\u8003\u8651AC\u81ea\u52a8\u673a\u4e0aDP\u3002\n\n\u8bbe\u8ba1\u72b6\u6001dp[i][j]\u8868\u793a\u8003\u8651\u524d$i$\u4e2a\u5b57\u7b26\u7684\u5b50\u5e8f\u5217\uff0c\u5176\u4e2d\u5982\u679c\u653e\u5728AC\u81ea\u52a8\u673a\u4e0a\u5339\u914d\uff0c\u5f53\u524d\u72b6\u6001\u5904\u4e8e$j$\u7684\u6700\u957f\u5b50\u5e8f\u5217\u957f\u5ea6\u3002\n\n\u8003\u8651\u4e0b\u4e00\u6b65\u7684\u8f6c\u79fb\uff0c\u4e0d\u96be\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n$$dp(i,j)=\\min{\\{dp(i-1,j),dp(i-1,k)+1\\}}$$\n\n\u5176\u4e2dch[k][s[i]]=j\uff0c\u4e14$j$\u4e0d\u662f\u67d0\u4e00\u4e2a\u975e\u6cd5\u5b57\u7b26\u4e32\u7684\u7ec8\u672b\u72b6\u6001\u3002\n\n\u53ef\u4ee5\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u7a7a\u95f4\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nm)$\uff0c\u5176\u4e2d$m$\u4e3a\u5efa\u51fa\u7684AC\u81ea\u52a8\u673a\u603b\u72b6\u6001\u6570\u3002\n## \u4ee3\u7801\u5b9e\u73b0\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 1005\n#define maxm 2505\n#define inf 0x3f3f3f3f\n#define LL long long\n#define mod 1000000007\n#define local\ntemplate <typename Tp> void read(Tp &x){\n\tint fh=1;char c=getchar();x=0;\n\twhile(c>'9'||c<'0'){if(c=='-'){fh=-1;}c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+(c&15);c=getchar();}x*=fh;\n}\nint n,m,X;\nstring s0;\nint ch[maxm*10][10],fail[maxm*10],edp[maxm*20],tot;\nvoid ins(string ss){\n\tint p=0;\n\tfor(unsigned i=0;i<ss.size();i++){\n\t\tint dir=ss[i]-'0';\n\t\tif(!ch[p][dir])ch[p][dir]=++tot;\n\t\tp=ch[p][dir];\n\t}\n\tedp[p]++;\n}\nvoid build(){//AC\u81ea\u52a8\u673a\u521d\u59cb\u5316\n\tqueue<int>q;int p=0;\n\tfor(int i=1;i<10;i++)\n\t\tif(ch[0][i])q.push(ch[0][i]),fail[ch[0][i]]=0;\n\twhile(!q.empty()){\n\t\tp=q.front();q.pop();\n\t\tfor(int i=1;i<10;i++){\n\t\t\tif(ch[p][i])fail[ch[p][i]]=ch[fail[p]][i],q.push(ch[p][i]);\n\t\t\telse ch[p][i]=ch[fail[p]][i];\n\t\t}\n\t}\n}\nint dp[2][maxm*10];\nint check(string ss){//\u66b4\u529b\u68c0\u9a8c\uff0c\u53ef\u4ee5\u901a\u8fc7\n\tint sm=0;\n\tfor(int l=0;l<ss.size();l++){\n\t\tsm=0;\n\t\tfor(int r=l;r<ss.size();r++){\n\t\t\tsm+=ss[r]-'0';\n\t\t\tif(sm!=X&&X%sm==0)return 0;\n\t\t}\n\t}\n\treturn 1;\n}\nvoid generate(string st,int sm){\n\tif(sm>X)return;\n\tif(sm==X){\n\t\tif(check(st))ins(st);\n\t\treturn;\n\t}\n\tfor(int i=1;i<10;i++){\n\t\tgenerate(st+(char)(i+'0'),sm+i);\n\t}\n}\nsigned main(){\n\tcin>>s0;\n\tn=s0.size();\n\tread(X);\n\tgenerate(\"\",0);//\u751f\u6210\u6240\u6709x-prime\n\tbuild();\n\tmemset(dp,0x3f,sizeof(dp));\n\tdp[0][0]=0;\n\tint p=1,q=0;\n\tfor(int i=0;i<n;i++){\n\t\tswap(p,q);\n\t\tfor(int j=0;j<=tot;j++)dp[q][j]=inf;\n\t\tfor(int j=0;j<=tot;j++){\n\t\t\tdp[q][j]=min(dp[q][j],dp[p][j]+1);//\u8f6c\u79fb1\n\t\t\tif(!edp[ch[j][s0[i]-'0']])dp[q][ch[j][s0[i]-'0']]=min(dp[q][ch[j][s0[i]-'0']],dp[p][j]);//\u8f6c\u79fb2\n\t\t}\n\t}\n\tint ans=inf;\n\tfor(int i=0;i<=tot;i++)ans=min(ans,dp[q][i]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1598419245,
        "uid": 35871,
        "name": "ZigZagKmp",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1400F\u3010x-prime Substrings\u3011"
    },
    {
        "content": "- Update on 2022.11.7\uff1a\u91cd\u5199\u9898\u89e3\u3002\n\n*[CF1400F x-prime Substrings](https://www.luogu.com.cn/problem/CF1400F)\n\n\u4e0d\u9519\u7684\u9898\u76ee\u3002\n\n\u9898\u76ee\u9650\u5236\u51fa\u73b0 \u201c\u4e0d\u80fd\u51fa\u73b0\u67d0\u5b57\u7b26\u4e32\u201d\uff0c\u9996\u5148\u8003\u8651\u5c06\u6240\u6709\u975e\u6cd5\u5b57\u7b26\u4e32\u62ce\u51fa\u6765\u5efa ACAM\u3002\u56e0\u4e3a $x$ \u7684\u771f\u56e0\u6570\u5747\u4e0d\u80fd\u4f5c\u4e3a\u6570\u7801\uff0c\u6240\u4ee5 $1$ \u4e0d\u53ef\u4ee5\u4f5c\u4e3a\u6570\u7801\uff0c\u8fd9\u6837\u4e00\u6765\u975e\u6cd5\u5b57\u7b26\u4e32\u7684\u6570\u91cf\u5c31\u5f88\u5c11\u4e86\u3002\u7206\u641c\u53d1\u73b0\u5bf9\u4e8e $x = 19$\uff0c\u5efa\u51fa\u7684\u5b57\u5178\u6811\u603b\u5927\u5c0f\u4e3a $S = 4852$\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u56e0\u6b64\uff0c\u8bbe $f_{i, j}$ \u8868\u793a\u5c06 $s[1, i]$ \u5220\u53bb\u82e5\u5e72\u5b57\u7b26\u540e\u5408\u6cd5\uff0c\u4e14\u5728 ACAM \u4e0a\u5339\u914d\u5230\u72b6\u6001 $j$ \u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u679a\u4e3e\u662f\u5426\u5220\u53bb\u5f53\u524d\u5b57\u7b26\u8f6c\u79fb\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(|s|S)$\u3002[\u4ee3\u7801](https://codeforces.com/contest/1400/submission/179830052)\u3002",
        "postTime": 1615603693,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1400F x-prime Substrings"
    },
    {
        "content": "\u5b98\u65b9\u9898\u89e3\u770b\u61c2\u4e86\uff0c\u4f46\u662f\u60f3\u4e0d\u5230\u4e00\u4e2a\u9ad8\u6548\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u6240\u4ee5\u653e\u5f03\u3002\uff08\u8fd8\u662f\u83dc\uff0c~~\u867d\u7136\u540e\u6765\u53d1\u73b0\u66b4\u529b\u5c31\u80fd\u8fc7~~\n\n\u7ffb\u4e86\u4e00\u4e0b\u63d0\u4ea4\u8bb0\u5f55\u5b66\u5230\u4e86\u53e6\u4e00\u4e2a\u505a\u6cd5\u3002\n\n\u6211\u4eec\u8003\u8651 DP\uff0c\u8bbe$f[i][mask]$\u8868\u793a\u5f53\u524d\u5df2\u7ecf\u5230\u4e86\u7b2c$i$\u4e2a\u4f4d\u7f6e\uff0c\u524d\u7f00\u548c\u8868\u793a\u4e3a$mask$\u65f6\u5411\u540e\u7684\u6700\u5c0f\u5220\u9664\u4e2a\u6570\u3002\n\n\u8fd9\u6837\u7684\u8f6c\u79fb\u65b9\u6cd5\u5c31\u662f\u679a\u4e3e\u5f53\u524d\u4f4d\u7f6e\u9009\u6216\u4e0d\u9009\uff0c\u7136\u540e\u5f80\u628a\u4e00\u4e2a\u4f4d\u7f6e\u7684 DP \u503c\u62ff\u8fc7\u6765\u5373\u53ef\u3002\n\n\u7136\u540e\u5224\u65ad\u524d\u7f00\u548c\u662f\u5426\u5408\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u5148\u5224\u65ad\u524d\u7f00\u548c\u4e2d\u6709\u6ca1\u6709$x$\uff08\u5927\u4e8e$x$\u7684\u524d\u7f00\u548c\u5df2\u7ecf\u5168\u90e8\u53ef\u4ee5\u5220\u6389\u4e86\uff09\uff0c\u5982\u679c\u6709\u518d\u5224\u65ad\u6709\u6ca1\u6709\u524d\u7f00\u548c\u662f$x$\u7684\u7ea6\u6570\u7684\u3002\n\n\u4f46\u662f\u5f88\u660e\u663e\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u6709\u53cd\u4f8b\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u5982\u679c\u51fa\u73b0$x$\u7684\u7ea6\u6570\u7684\u8bdd\uff0c\u90a3\u4e48\u524d\u7f00\u548c\u4e2d\u6bd4\u8fd9\u4e2a\u7ea6\u6570\u5927\u7684\uff08\u4e5f\u5c31\u662f\u5728\u524d\u7f00\u548c\u4e2d\u6784\u6210\u8fd9\u4e2a\u7ea6\u6570\u4e4b\u524d\u7684\u6570\uff09\u53ef\u4ee5\u5168\u90e8\u5220\u6389\u4e86\uff0c\u8fd9\u6837\u7684\u8bdd\u6b63\u786e\u6027\u5f97\u5230\u4e86\u4fdd\u8bc1\uff0c\u8fd8\u51cf\u5c11\u4e86\u72b6\u6001\u6570\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u7c97\u7565\u4e0a\u754c\u662f$O(n\\cdot d)$\uff08\u5176\u4e2d$d$\u4e3a\u6709\u6548\u7684\u72b6\u6001\u6570\uff09\u7684\uff0c\u770b\u8d77\u6765\u5f88\u4e0d\u80fd\u8fc7\u7684\u6837\u5b50\u3002\n\n\u4f46\u662f\u672c\u9898\u7684\u6027\u8d28\u4fdd\u8bc1$d$\u4e0d\u4f1a\u5f88\u5927\uff08\u66f4\u52a0\u51c6\u786e\u4e00\u4e9b\u7684\u8bf4\uff0c\u662f\u4e0d\u4f1a\u8d85\u8fc7$5000$\uff09\uff0c\u6240\u4ee5\u8fd9\u79cd\u505a\u6cd5\u80fd\u591f\u901a\u8fc7\u3002\n\n\u5b58\u50a8\u72b6\u6001\u7684\u8bdd\u76f4\u63a5\u7528 unordered_map \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\uff1a[My Blog](https://www.cnblogs.com/withhope/p/13574978.html)",
        "postTime": 1598546049,
        "uid": 33362,
        "name": "Suiseiseki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1400F \u3010x-prime Substrings\u3011"
    },
    {
        "content": "## $\\text{Foreword}$\n\u867d\u7136\u505a\u6cd5\u540c\u6837\u662f\u81ea\u52a8\u673a\u4e0a dp\uff0c\u4f46\u5207\u5165\u70b9\u4f3c\u4e4e\u4e0d\u592a\u4e00\u6837\uff1f  \n\u6700\u5dee\u60c5\u51b5\u4e0b\uff08$n=19$\uff09\u7684\u72b6\u6001\u6570\u662f 3946\uff0c\u6bd4 AC \u81ea\u52a8\u673a\u7684\u505a\u6cd5\u5c11\u5c06\u8fd1\u4e00\u534a\u3002  \n## $\\text{Solution}$\n\u9996\u5148\uff0c\u663e\u7136\u672c\u9898\u5e94\u8be5\u662f dp\u3002  \n\u65e2\u7136\u662f dp\uff0c\u6211\u4eec\u5c31\u8981\u60f3\u60f3\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u4ec0\u4e48\u3002  \n\u4e00\u4e2a\u6bd4\u8f83\u76f4\u89c2\u7684\u60f3\u6cd5\u662f\uff1a\u8bb0\u5f55\u4e00\u4e0b\u6700\u540e\u586b\u7684\u51e0\u4f4d\u6570\u3002\u90a3\u4e48\u6211\u4eec\u8981\u786e\u5b9a\u9700\u8981\u8bb0\u5f55\u5230\u54ea\u51e0\u4f4d\u3002  \n\u8bbe\u5f53\u524d\u586b\u7684\u662f\u7b2c $i$ \u4f4d\u3002\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488 $j$ \u5f80\u524d\u626b\uff0c\u8bb0\u5f55 $now=\\sum_{p=j}^ia_p$\u3002  \n\u5206\u51e0\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a  \n1. $now> x$\u3002\u90a3\u4e48\u663e\u7136 $j$ \u548c\u4e4b\u524d\u7684\u4f4d\u90fd\u4e0d\u53ef\u80fd\u6210\u4e3a\u8981\u6c42\u4e32\u7684\u5de6\u7aef\u70b9\u4e86\uff0c\u628a\u8fd9\u4e9b\u524d\u7f00\u53bb\u6389\u5373\u53ef\u3002\n2. $now<x\\&\\&now|x$\u3002\u6b64\u65f6\u5982\u679c\u5de6\u7aef\u70b9\u5728 $j$ \u6216\u8005\u66f4\u5de6\uff0c\u90a3\u4e48\u5f97\u5230\u7684\u4e32\u5fc5\u7136\u542b\u6709\u4e00\u4e2a\u52a0\u548c\u4e3a $now$ \u7684\u5b50\u4e32\uff0c\u4e5f\u5c31\u5fc5\u7136\u4e0d\u5408\u6cd5\uff0c\u6240\u6709\u4e5f\u53ef\u4ee5\u628a $j$ \u53ca\u5176\u524d\u9762\u7684\u524d\u7f00\u53bb\u6389\u3002\n3. $now=x$\u3002\u7531\u4e8e\u6ca1\u6709\u88ab\u7b2c 2 \u6761\u5224\u6389\uff0c\u6b64\u65f6\u7684\u4e32 $(j,i)$ \u5fc5\u7136\u4e0d\u542b\u6709\u52a0\u548c\u4e3a $x$ \u771f\u56e0\u5b50\u7684\u5b50\u4e32\uff0c\u6240\u4ee5\u6b64\u65f6\u5fc5\u7136\u662f\u8d70\u5230\u4e86\u4e00\u4e2a\u975e\u6cd5\u72b6\u6001\u3002\n4. \u524d\u4e09\u79cd\u60c5\u51b5\u90fd\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48\u5c31\u4fdd\u7559\u7b2c $j$ \u4f4d\uff0c\u7ee7\u7eed\u5de6\u79fb $j$ \u6307\u9488\u8003\u8651\u524d\u4e00\u4f4d\u5373\u53ef\u3002\n\n\u901a\u8fc7\u8fd9\u6837\u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u5c31\u5efa\u51fa\u4e86\u4e00\u4e2a\u81ea\u52a8\u673a\u3002\u7531\u4e8e\u4e0d\u80fd\u586b 1 \uff0c\u5b83\u7684\u7ed3\u70b9\u4e0d\u4f1a\u592a\u591a\uff0c\u5199\u4e2a\u7b80\u5355\u7684\u66b4\u641c\u5c31\u53ef\u4ee5\u53d1\u73b0\u53ea\u6709\u51e0\u5343\uff0c\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u3002  \n\u6700\u540e\u8dd1\u4e00\u4e2a\u7b80\u5355\u7684\u81ea\u52a8\u673a dp \u5c31\u884c\u4e86\u3002\n## $\\text{Code}$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n#define debug(...) fprintf(stderr,__VA_ARGS__)\n#define ok debug(\"OK\\n\")\nusing namespace std;\n\nconst int N=1e4+100;\nconst int mod=1e9+7;\ninline ll read(){\n  ll x(0),f(1);char c=getchar();\n  while(!isdigit(c)) {if(c=='-')f=-1;c=getchar();}\n  while(isdigit(c)) {x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n  return x*f;\n}\n\ninline ll ksm(ll x,ll k){\n  ll res(1);\n  while(k){\n    if(k&1) res=res*x%mod;\n    x=x*x%mod;\n    k>>=1;\n  }\n  return res;\n}\nint n,k;\n\nint key=10;\ninline ull Hash(int *x,int num){\n  ull res(0);\n  for(int i=num;i>=1;i--) res=res*key+x[i];\n  return res;\n}\ninline int dcode(int *x,ull h){\n  int cnt=0;\n  while(h){\n    x[++cnt]=h%key;\n    h/=key;\n  }\n  return cnt;\n}\nmap<ull,int>mp;\nint trans[N][10];\null transh[N][10];\nint tot;\nint s[20],t[20];\nbool vis[N];\nvoid dfs(int x,ull h){\n  if(vis[x]) return;\n  vis[x]=1;\n  int num=dcode(s,h);\n  for(int i=1;i<=9;i++){\n    s[num+1]=i;\n    int pl=num+1,now=0;\n    bool flag=1;\n    while(pl>=1){\n      now+=s[pl];\n      if(now==k){\n\tflag=0;break;\n      }\n      if(k%now==0||now>k) break;\n      pl--;\n    }\n    \n    int cnt=0;\n    for(int j=pl+1;j<=num+1;j++) t[++cnt]=s[j];\n    \n    if(!flag){\n      trans[x][i]=0;continue;\n    }\n\n    ull nh=Hash(t,cnt);\n    if(!mp.count(nh)) mp[nh]=++tot;\n    trans[x][i]=mp[nh];\n    transh[x][i]=nh;\n  }\n  for(int i=1;i<=9;i++){\n    if(trans[x][i]) dfs(trans[x][i],transh[x][i]);\n  }\n  return;\n}\nvoid init(){\n  mp[0]=++tot;\n  dfs(1,0);\n}\n\nint dp[1050][N];\nchar a[N];\nsigned main(){\n  #ifndef ONLINE_JUDGE\n  freopen(\"a.in\",\"r\",stdin);\n  freopen(\"a.out\",\"w\",stdout);\n  #endif\n  memset(dp,0x3f,sizeof(dp));\n  scanf(\" %s\",a+1);\n  n=strlen(a+1);\n  k=read();\n  init();\n  debug(\"tot=%d\\n\",tot);\n  dp[0][1]=0;\n  for(int i=0;i<n;i++){\n    int c=a[i+1]-'0';\n    for(int j=1;j<=tot;j++){      \n      if(trans[j][c]){\n\tdp[i+1][trans[j][c]]=min(dp[i+1][trans[j][c]],dp[i][j]);\n      }\n      dp[i+1][j]=min(dp[i+1][j],dp[i][j]+1);\n    }\n  }\n  int ans=1e9;\n  for(int i=1;i<=tot;i++) ans=min(ans,dp[n][i]);\n  printf(\"%d\\n\",ans);\n  return 0;\n}\n\n```\n",
        "postTime": 1649690721,
        "uid": 449265,
        "name": "wind_whisper",
        "ccfLevel": 10,
        "title": "CF1400F x-prime Substrings"
    },
    {
        "content": "\u849f\u84bb\u53c8\u6765\u5199\u9898\u89e3\u4e86awa\n\n\n### \u601d\u8def\n\n\u6211\u4eec\u53d1\u73b0$s$\u975e\u5e38\u5c0f\uff0c\u6240\u4ee5\u4e0d\u5408\u6cd5\u7684\u4e32\u662f\u975e\u5e38\u5c11\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u66b4\u529b\u627e\u51fa\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u4e32\uff0c\u7136\u540e\u5c31\u53ef\u4ee5$DP$$+$ $\u679a\u4e3e$$+$$ac\u81ea\u52a8\u673a$\n\n\u653e\u4e0a\u4ee3\u7801\uff1a\n\n\n```cpp\n#include <algorithm>\n\n#include <array>\n\n#include <cassert>\n\n#include <iostream>\n\n#include <vector>\n\nusing namespace std;\n\n\n\ntemplate<typename T> ostream& operator<<(ostream &os, const vector<T> &v) { os << '{'; string sep; for (const auto &x : v) os << sep << x, sep = \", \"; return os << '}'; }\n\ntemplate<typename T, size_t size> ostream& operator<<(ostream &os, const array<T, size> &arr) { os << '{'; string sep; for (const auto &x : arr) os << sep << x, sep = \", \"; return os << '}'; }\n\ntemplate<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }\n\n\n\nvoid dbg_out() { cerr << endl; }\n\ntemplate<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }\n\n\n\n#ifdef NEAL_DEBUG\n\n#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)\n\n#else\n\n#define dbg(...)\n\n#endif\n\n\n\n// This version of aho_corasick uses more memory and depends on a small alphabet, but it provides O(1) suffix links.\n\ntemplate<char MIN_CHAR = 'a', int ALPHABET = 26>\n\nstruct aho_corasick {\n\n    struct node {\n\n        // suff = the index of the node of the longest strict suffix of the current node that's also in the tree.\n\n        //   Also see \"blue arcs\" on Wikipedia: https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm\n\n        // dict = the index of the node of the longest strict suffix of the current node that's in the word list.\n\n        //   Also see \"green arcs\" on Wikipedia.\n\n        // depth = normal trie depth (root is 0). Can be removed to save memory.\n\n        // word_index = the index of the *first* word ending at this node. -1 if none.\n\n        // word_count = the total number of words ending at this node. Used in count_total_matches().\n\n        // link = the trie connections and/or suffix connections from this node.\n\n        int suff = -1, dict = -1, depth = 0;\n\n        int word_index = -1, word_count = 0;\n\n        int link[ALPHABET];\n\n\n\n        node() {\n\n            fill(link, link + ALPHABET, -1);\n\n        }\n\n\n\n        int& operator[](char c) {\n\n            return link[c - MIN_CHAR];\n\n        }\n\n    };\n\n\n\n    vector<node> nodes;\n\n    int W;\n\n    vector<int> word_location;\n\n    vector<int> word_indices_by_depth;\n\n    vector<int> defer;\n\n\n\n    aho_corasick(const vector<string> &words = {}) {\n\n        if (!words.empty())\n\n            build(words);\n\n    }\n\n\n\n    // Builds the adj list based on suffix parents. Often we want to perform DP and/or queries on this tree.\n\n    vector<vector<int>> build_suffix_adj() const {\n\n        vector<vector<int>> adj(nodes.size());\n\n\n\n        for (int i = 1; i < int(nodes.size()); i++)\n\n            adj[nodes[i].suff].push_back(i);\n\n\n\n        return adj;\n\n    }\n\n\n\n    int get_or_add_child(int current, char c) {\n\n        if (nodes[current][c] >= 0)\n\n            return nodes[current][c];\n\n\n\n        int index = int(nodes.size());\n\n        nodes[current][c] = index;\n\n        nodes.emplace_back();\n\n        nodes.back().depth = nodes[current].depth + 1;\n\n        return index;\n\n    }\n\n\n\n    int add_word(const string &word, int word_index) {\n\n        assert(!nodes.empty());\n\n        int current = 0;\n\n\n\n        for (char c : word)\n\n            current = get_or_add_child(current, c);\n\n\n\n        if (nodes[current].word_index < 0)\n\n            nodes[current].word_index = word_index;\n\n\n\n        nodes[current].word_count++;\n\n        return current;\n\n    }\n\n\n\n    // Returns where in the trie we should end up after starting at `location` and adding char `c`. Runs in O(1).\n\n    int get_suffix_link(int location, char c) const {\n\n        if (location >= 0)\n\n            location = nodes[location].link[c - MIN_CHAR];\n\n\n\n        return max(location, 0);\n\n    }\n\n\n\n    void build(const vector<string> &words) {\n\n        nodes = {node()};\n\n        W = int(words.size());\n\n        word_location.resize(W);\n\n        defer.resize(W);\n\n        int max_depth = 0;\n\n\n\n        for (int i = 0; i < W; i++) {\n\n            word_location[i] = add_word(words[i], i);\n\n            max_depth = max(max_depth, int(words[i].size()));\n\n            defer[i] = nodes[word_location[i]].word_index;\n\n        }\n\n\n\n        // Create a list of word indices in decreasing order of depth, in linear time via counting sort.\n\n        word_indices_by_depth.resize(W);\n\n        vector<int> depth_freq(max_depth + 1, 0);\n\n\n\n        for (int i = 0; i < W; i++)\n\n            depth_freq[words[i].size()]++;\n\n\n\n        for (int i = max_depth - 1; i >= 0; i--)\n\n            depth_freq[i] += depth_freq[i + 1];\n\n\n\n        for (int i = 0; i < W; i++)\n\n            word_indices_by_depth[--depth_freq[words[i].size()]] = i;\n\n\n\n        // Solve suffix parents by traversing in order of depth (BFS order).\n\n        vector<int> q = {0};\n\n\n\n        for (int i = 0; i < int(q.size()); i++) {\n\n            int current = q[i];\n\n\n\n            for (char c = MIN_CHAR; c < MIN_CHAR + ALPHABET; c++) {\n\n                int &index = nodes[current][c];\n\n\n\n                if (index >= 0) {\n\n                    // Find index's suffix parent by traversing suffix parents of current until one of them has a child c.\n\n                    int suffix_parent = get_suffix_link(nodes[current].suff, c);\n\n                    nodes[index].suff = suffix_parent;\n\n                    nodes[index].word_count += nodes[suffix_parent].word_count;\n\n                    nodes[index].dict = nodes[suffix_parent].word_index < 0 ? nodes[suffix_parent].dict : suffix_parent;\n\n                    q.push_back(index);\n\n                } else {\n\n                    index = get_suffix_link(nodes[current].suff, c);\n\n                }\n\n            }\n\n        }\n\n    }\n\n\n\n    // Counts the number of matches of each word in O(text length + num words).\n\n    vector<int> count_matches(const string &text) const {\n\n        vector<int> matches(W, 0);\n\n        int current = 0;\n\n\n\n        for (char c : text) {\n\n            current = get_suffix_link(current, c);\n\n            int dict_node = nodes[current].word_index < 0 ? nodes[current].dict : current;\n\n\n\n            if (dict_node >= 0)\n\n                matches[nodes[dict_node].word_index]++;\n\n        }\n\n\n\n        // Iterate in decreasing order of depth.\n\n        for (int word_index : word_indices_by_depth) {\n\n            int location = word_location[word_index];\n\n            int dict_node = nodes[location].dict;\n\n\n\n            if (dict_node >= 0)\n\n                matches[nodes[dict_node].word_index] += matches[word_index];\n\n        }\n\n\n\n        for (int i = 0; i < W; i++)\n\n            matches[i] = matches[defer[i]];\n\n\n\n        return matches;\n\n    }\n\n\n\n    // Counts the number of matches over all words at each ending position in `text` in O(text length).\n\n    vector<int> count_matches_by_position(const string &text) const {\n\n        vector<int> matches(text.size());\n\n        int current = 0;\n\n\n\n        for (int i = 0; i < int(text.size()); i++) {\n\n            current = get_suffix_link(current, text[i]);\n\n            matches[i] = nodes[current].word_count;\n\n        }\n\n\n\n        return matches;\n\n    }\n\n\n\n    // Counts the total number of matches of all words within `text` in O(text length).\n\n    int64_t count_total_matches(const string &text) const {\n\n        int64_t matches = 0;\n\n        int current = 0;\n\n\n\n        for (char c : text) {\n\n            current = get_suffix_link(current, c);\n\n            matches += nodes[current].word_count;\n\n        }\n\n\n\n        return matches;\n\n    }\n\n};\n\n\n\n\n\nconst int INF = 1e9 + 5;\n\n\n\nint N, X;\n\nstring S;\n\nvector<string> prime;\n\naho_corasick<'1', 9> AC;\n\n\n\nbool check(string str) {\n\n    int n = int(str.size());\n\n\n\n    for (int i = 0; i < n; i++) {\n\n        int sum = 0;\n\n\n\n        for (int j = i; j < n; j++) {\n\n            sum += str[j] - '0';\n\n\n\n            if (sum < X && X % sum == 0)\n\n                return false;\n\n        }\n\n    }\n\n\n\n    return true;\n\n}\n\n\n\nvoid generate(string str, int sum) {\n\n    if (sum > X)\n\n        return;\n\n\n\n    if (sum == X) {\n\n        if (check(str))\n\n            prime.push_back(str);\n\n\n\n        return;\n\n    }\n\n\n\n    for (int d = 1; d <= 9 && sum + d <= X; d++)\n\n        generate(str + char(d + '0'), sum + d);\n\n}\n\n\n\nint main() {\n\n    ios::sync_with_stdio(false);\n\n#ifndef NEAL_DEBUG\n\n    cin.tie(nullptr);\n\n#endif\n\n\n\n    cin >> S >> X;\n\n    N = int(S.size());\n\n    generate(\"\", 0);\n\n    dbg(prime);\n\n    AC.build(prime);\n\n    int ST = int(AC.nodes.size());\n\n    vector<int> dp(ST, INF);\n\n    dp[0] = 0;\n\n\n\n    for (auto &ch : S) {\n\n        vector<int> next_dp(ST, INF);\n\n\n\n        for (int state = 0; state < ST; state++)\n\n            if (dp[state] < INF) {\n\n                next_dp[state] = min(next_dp[state], dp[state] + 1);\n\n                int transition = AC.get_suffix_link(state, ch);\n\n\n\n                if (AC.nodes[transition].word_index < 0)\n\n                    next_dp[transition] = min(next_dp[transition], dp[state]);\n\n            }\n\n\n\n        swap(dp, next_dp);\n\n    }\n\n\n\n    cout << *min_element(dp.begin(), dp.end()) << '\\n';\n\n}\n\n\n```\n",
        "postTime": 1598538379,
        "uid": 224960,
        "name": "yzyjh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1400F \u3010x-prime Substrings\u3011"
    }
]