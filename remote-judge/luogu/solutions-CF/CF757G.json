[
    {
        "content": "[\u535a\u5ba2\u56ed\u5185\u9605\u8bfb\u66f4\u9999](https://www.cnblogs.com/Hs-black/p/13366263.html)\n\n\u725b\u903c\u9898\n\n\u663e\u7136\u8fd9\u662f\u4e00\u9053\u8001\u7ecf\u5178\u9898\u4e86\uff0c\u60f3\u5230\u5f00\u5e97\u90a3\u9898\uff0c\u76f4\u63a5\u52a8\u6001\u70b9\u5206\u6cbb\u4e0a\u6574\u4e2a\u524d\u7f00\u548c\uff0c\u4e8c\u5206\u67e5\u627e\u5373\u53ef\n\n\u4f46\u662f\u6709\u4fee\u6539\uff0c\u6bcf\u4e2a\u70b9\u6574\u4e2a\u5e73\u8861\u6811\u6216\u8005\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5373\u53ef\uff0c\u90fd\u662f $\\Theta(n\\log^2n)$ \u7684\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u505a\u6cd5\u5e38\u6570\u5927\uff0c\u7b2c\u4e8c\u4e2a\u505a\u6cd5\u7a7a\u95f4\u5927\uff0c\u90fd\u8fc7\u4e0d\u53bb\n\n\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u601d\u8def\uff0c\u8003\u8651\u6240\u6709\u8ddd\u79bb\u548c\u7b49\u4e8e $\\sum (dep_x+dep_y)-2*\\sum dep_{lca(x,y)}$\n\n\u524d\u9762\u90a3\u4e2a\u5f88\u597d\u6c42\uff0c\u540e\u9762\u90a3\u4e2a\u8003\u8651\u6811\u94fe\u5256\u5206\uff0c\u53ef\u4ee5\u60f3\u8c61\u4e3a\u5148\u628a y \u5230\u6839\u7684\u94fe\u6253\u4e0a\u6807\u8bb0\uff0c\u7136\u540e\u4ece x \u8df3\u5230\u6839\u8def\u5f84\u4e0a\u7684\u6807\u8bb0\u957f\u5ea6\u5c31\u662f $dep_{lca(x,y)}$\uff0c\u5177\u4f53\u6765\u8bf4\u6253\u6807\u8bb0\u7684\u65b9\u5f0f\u53ef\u4ee5\u7ef4\u62a4\u6bcf\u4e00\u6761\u8fb9\u88ab\u8986\u76d6\u7684\u6b21\u6570\uff0c\u7136\u540e\u4e58\u4e0a\u6574\u4f53\u7684\u533a\u95f4\u957f\u5ea6\u5373\u53ef\uff0c\u628a\u7ebf\u6bb5\u6811\u6362\u6210\u4e3b\u5e2d\u6811\u6807\u8bb0\u6c38\u4e45\u5316\u5373\u53ef\u5b9e\u73b0\u9759\u6001\uff0c\u8003\u8651\u5982\u4f55\u4ea4\u6362\u76f8\u90bb\u4e24\u9879\uff0c\u7531\u4e8e\u662f\u548c\u7684\u5f62\u5f0f\uff0c\u5bb9\u6613\u53d1\u73b0\u540e\u9762\u4e00\u9879\u4e00\u76f4\u5230\u6700\u540e\u4e00\u9879\u7684\u4e3b\u5e2d\u6811\u6ca1\u6709\u53d8\u5316\uff0c\u53ea\u9700\u8981\u628a\u7b2c x \u4e2a\u4e3b\u5e2d\u6811\u91cd\u6784\u4e00\u4e0b\u5373\u53ef\uff0c\u4f46\u663e\u7136\u8fd9\u4e2a\u505a\u6cd5\u867d\u7136\u5e38\u6570\u5c0f\u4e86\u4e00\u70b9\uff0c\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\u7206\u70b8\u7684\n\n\u8003\u8651\u8fb9\u5206\u6cbb\u8fd9\u79cd\u795e\u4ed9\u505a\u6cd5\uff0c\u8fb9\u5206\u6cbb\u53ef\u4ee5\u53ef\u6301\u4e45\u5316\uff01\u5f53\u7136\u70b9\u5206\u6cbb\u4e5f\u53ef\u4ee5\u4f46\u662f\u6bd4\u8fb9\u5206\u6cbb\u8981\u9ebb\u70e6\u4e00\u4e9b\u5427\n\n\u53ef\u4ee5\u770b\u770b\u66b4\u529b\u5199\u6302\u90a3\u9898\uff0c\u8fb9\u5206\u6811\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u90a3\u4e48\u4e5f\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u652f\u6301\u53ef\u6301\u4e45\u5316\uff0c\u5c31\u50cf\u7ebf\u6bb5\u6811\u4e00\u6837\n\n\u6bcf\u4e2a\u70b9\u5f53\u53f6\u5b50\u90fd\u53ef\u4ee5\u53d6\u51fa\u4e00\u6761\u4ece\u6839\uff08\u8fb9\u5206\u6cbb\u7684\u6839\uff09\u5230\u5b83\u7684\u94fe\uff0c\u6211\u4eec\u53d6\u51fa\u5f85\u7528\uff0c\u53d6\u539f\u9898\u6392\u5217\u4e00\u4e2a\uff0c\u6309\u987a\u5e8f\u5c06\u6240\u6709\u94fe\u8f7b\u8f7b\u5408\u5e76\uff0c\u67e5\u8be2\u65f6\u7528\u7b2c r \u68f5\u8fb9\u5206\u6811\u51cf\u53bb\u7b2c l - 1 \u8fb9\u5206\u6811\u7684\u7b54\u6848\u5373\u53ef\uff0c\u4ea4\u6362\u76f8\u90bb\u4e24\u9879\u65f6\u76f4\u63a5\u91cd\u6784\u524d\u4e00\u68f5\u4e3b\u5e2d\u8fb9\u5206\u6811\u5373\u53ef\n\n\u6211\u4eec\u8fb9\u5206\u6811\u771f\u7684\u662f\u592a\u5389\u5bb3\u4e86\n\n\u7ecf\u68c0\u9a8c\uff0c\u4ee3\u7801\u53ef\u8bfb\n\n```cpp\nconst int N = 500500;\nstruct Tree {\n\tint ls, rs;\n\tll vl, vr, sl, sr;\n\t#define sl(p) tree[p].sl\n\t#define sr(p) tree[p].sr\n\t#define ls(p) tree[p].ls\n\t#define rs(p) tree[p].rs\n\t#define vl(p) tree[p].vl\n\t#define vr(p) tree[p].vr\n}tree[N * 32];\n\nint rt[N], nodecnt, cnt, n, q;\nnamespace Conquer {\n\tconst int N = 1500050;\n\tint h[N], ne[N<<1], to[N<<1], w[N<<1], tot = 1;\n\tinline void add(int x, int y, int z) {\n\t\tne[++tot] = h[x], to[h[x] = tot] = y, w[tot] = z;\n\t}\n\tint Siz, siz[N], vis[N], las[N], lim, ed;\n\tinline void adde(int x, int y, int z) { \n\t\tadd(x, y, z), add(y, x, z); \n//\t\twrite(x, ' '), write(y, ' '), write(z); \n\t}\n\t\n\tvoid get(int x, int fa) {\n\t\tsiz[x] = 1;\n\t\tfor (int i = h[x], y; i; i = ne[i]) {\n\t\t\tif ((y = to[i]) == fa || vis[i]) continue;\n\t\t\tget(y, x), siz[x] += siz[y];\n\t\t\tint tp = max(siz[y], Siz - siz[y]);\n\t\t\tif (tp < lim) lim = tp, ed = i;\n\t\t}\n\t}\n\t\n\tvoid dfs(int x, int fa, ll Dis, int ty) {\n\t\tif (x <= n) {\n\t\t\t++nodecnt, !rt[x] && (rt[x] = nodecnt);\n\t\t\tif (ls(las[x]) == -1) ls(las[x]) = nodecnt;\n\t\t\telse rs(las[x]) = nodecnt;\n\t\t\tif (!ty) ls(nodecnt) = -1, vl(nodecnt) = Dis, sl(nodecnt)++;\n\t\t\telse rs(nodecnt) = -1, vr(nodecnt) = Dis, sr(nodecnt)++;\n\t\t\tlas[x] = nodecnt;\n\t\t}\n\t\tfor (int i = h[x], y; i; i = ne[i])\n\t\t\tif ((y = to[i]) != fa && !vis[i])\n\t\t\t\tdfs(y, x, Dis + w[i], ty);\n\t}\n\t\n\tvoid conquer(int x, int S) {\n\t\tif (S <= 1) return;\n\t\tSiz = lim = S, get(x, 0), vis[ed] = vis[ed ^ 1] = 1;\n\t\tint tx = to[ed], ty = to[ed ^ 1];\n//\t\twrite(tx, ' '), write(ty);\n\t\tdfs(tx, 0, 0, 0), dfs(ty, 0, w[ed], 1);\n\t\tconquer(ty, S - siz[tx]), conquer(tx, siz[tx]);\n\t}\n}\n\nint h[N], ne[N<<1], to[N<<1], w[N<<1], las[N], tot;\ninline void add(int x, int y, int z) {\n\tne[++tot] = h[x], to[h[x] = tot] = y, w[tot] = z;\n}\n\nvoid dfs(int x, int fa) {\n\tfor (int i = h[x], y; i; i = ne[i]) {\n\t\tif ((y = to[i]) == fa) continue; dfs(y, x);\n\t\tif (!las[x]) Conquer::adde(las[x] = x, y, w[i]);\n\t\telse {\n\t\t\tConquer::adde(las[x], ++cnt, 0);\n\t\t\tConquer::adde(las[x] = cnt, y, w[i]);\n\t\t}\n\t}\n}\n\nint update(int pre, int nw) {\n\tint rt = ++nodecnt; tree[rt] = tree[pre];\n\tvl(rt) += vl(nw), vr(rt) += vr(nw), sl(rt) += sl(nw), sr(rt) += sr(nw);\n\tif (sl(nw) > 0) ls(rt) = update(ls(rt), ls(nw));\n\tif (sr(nw) > 0) rs(rt) = update(rs(rt), rs(nw));\n\treturn rt;\n}\n\nll query(int nw, int p1, int p2) {\n\tif (sl(nw) > 0) \n\t\treturn query(ls(nw), ls(p1), ls(p2)) + vr(p2) - vr(p1) + (sr(p2) - sr(p1)) * vl(nw);\n\tif (sr(nw) > 0) \n\t\treturn query(rs(nw), rs(p1), rs(p2)) + vl(p2) - vl(p1) + (sl(p2) - sl(p1)) * vr(nw);\n\treturn 0;\n}\n\nconst int B = (1 << 30) - 1;\nll ans, T[N], p[N];\nint main() {\n\tread(n), read(q), cnt = n;\n\tfor (int i = 1;i <= n; i++) read(p[i]);\n\tfor (int i = 1, x, y, z;i < n; i++)\n\t\tread(x), read(y), read(z), add(x, y, z), add(y, x, z);\n\tdfs(1, 0), Conquer::conquer(1, cnt), tree[0] = tree[nodecnt+10];\n\tfor (int i = 1;i <= nodecnt; i++) Mx(ls(i), 0), Mx(rs(i), 0);\n\tfor (int i = 1;i <= n; i++) T[i] = update(T[i-1], rt[p[i]]);\n\twhile (q--) {\n\t\tll op, x, y, z; read(op);\n\t\tif (op == 1) {\n\t\t\tread(x), read(y), read(z);\n\t\t\tx = ans ^ x, y ^= ans, z ^= ans;\n\t\t\twrite(ans = query(rt[z], T[x - 1], T[y]));\n\t\t\tans &= B;\n\t\t}\n\t\telse {\n\t\t\tread(x), x ^= ans, swap(p[x], p[x+1]);\n\t\t\tT[x] = update(T[x-1], rt[p[x]]);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1595487078,
        "uid": 122144,
        "name": "hs_black",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF757G \u3010Can Bash Save the Day?\u3011"
    },
    {
        "content": "```\n\u73b0\u6709\u7684\u9898\u89e3\u91cc\u4e00\u7bc7\u662f\u52a8\u6001\u70b9\u5206\u6cbb\u7684\u9898\u89e3\uff0c\u53e6\u4e00\u7bc7\u4ecb\u7ecd\u4e86\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u4f46\u4e0d\u751a\u8be6\u5c3d\u3002\u672c\u6587\u5c06\u8be6\u7ec6\u5206\u6790\u540e\u4e00\u79cd\u505a\u6cd5\u3002\n```\n\n\u9996\u5148\u6211\u4eec\u89c2\u5bdf\u4e00\u4e0b\u8be2\u95ee\u7684\u7279\u70b9\u3002\n\n\u4e0d\u59a8\u94a6\u5b9a$1$\u4e3a\u6839\u8282\u70b9\u3002\u5047\u8bbe\u6211\u4eec\u9884\u5904\u7406\u51fa\u4e86\u6811\u4e0a\u6bcf\u4e2a\u70b9$i$\u7684\u6df1\u5ea6\uff08\u4e5f\u5c31\u662f$i$\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff09$dep_i$\uff0c\u8bb0\u8282\u70b9$i,j$\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3a$\\text{LCA}(i,j)$\uff0c\u8bb0$i,j$\u8def\u5f84\u957f\u5ea6\u4e3a$\\text{DIST}(i,j)$\uff0c\u90a3\u4e48\u5f88\u660e\u663e\u6709\uff1a\n\n$\\text{DIST}(i,j)=dep_i+dep_j-2dep_{\\text{LCA}(i,j)}$\n\n\u90a3\u4e48\u5206\u6790\u9898\u4e2d\u8be2\u95ee\u5f0f\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u62c6\u6210\u4e24\u4e2a\u524d\u7f00\u7684\u5dee\u503c\uff0c\u6362\u8a00\u4e4b\uff0c\u53ea\u8981\u5bf9\u4e8e\u7ed9\u5b9a\u7684$u,v$\uff0c\u6211\u4eec\u80fd\u6c42\u51fa$\\sum_{i=1}^u\\text{DIST}(p_i,v)$\uff0c\u5c31\u53ef\u4ee5\u8f7b\u6613\u89e3\u51b3\u539f\u95ee\u9898\u3002\n\n\u800c\n\n$\\sum_{i=1}^u\\text{DIST}(p_i,v)$\n\n$=\\sum_{i=1}^u(dep_{p_i}+dep_v-2dep_{\\text{LCA}(p_i,v)})$\n\n$=u\\times dep_v +(\\sum_{i=1}^udep_{p_i})-2(\\sum_{i=1}^udep_{\\text{LCA}(p_i,v)})$\n\n\u5728\u4fee\u6539\u7684\u65f6\u5019\uff0c\u5f0f\u5b50\u7684\u7b2c\u4e00\u90e8\u5206\u503c$u\\times dep_v$\u4e3a\u4e00\u4e2a\u5e38\u91cf\uff0c\u7b2c\u4e8c\u90e8\u5206$\\sum_{i=1}^udep_{p_i}$\u5f00\u4e00\u4e2a\u6570\u7ec4$sumdep_u$\u7ef4\u62a4\uff0c\u5f53\u4ea4\u6362$p_x,p_{x+1}$\u4fee\u6539\u65f6\u53ea\u9700\u4fee\u6539$sumdep_x$\u5373\u53ef\uff0c\u8fd9\u4e24\u90e8\u5206\u7684\u7ef4\u62a4\u90fd\u975e\u5e38\u7b80\u5355\u3002\u6211\u4eec\u91cd\u70b9\u5206\u6790\u7b2c\u4e09\u90e8\u5206$\\sum_{i=1}^udep_{\\text{LCA}(p_i,v)}$\u7684\u7ef4\u62a4\u8fc7\u7a0b\u3002\n\n\u5173\u952e\u95ee\u9898\u662f\uff1a\u5982\u4f55\u8f6c\u6362$dep_{\\text{LCA}(p,v)}$\uff1f\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u6a21\u578b\uff1a\u6811\u4e0a\u6bcf\u6761\u8fb9$e$\u6709\u4e00\u4e2a\u9644\u52a0\u6743\u503c$cnt_e$\u4ee3\u8868\u8bbf\u95ee\u6b21\u6570\uff0c\u6211\u4eec\u628a$p$\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684$cnt_e$\u7f6e\u4e3a$1$\uff0c\u518d\u8bbf\u95ee$v$\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6bcf\u6761\u8fb9$e$\uff0c\u8ba1\u7b97$\\sum cnt_e\\times w_e$\u5373\u4e3a\u7b54\u6848\uff08\u5176\u4e2d$w_e$\u4ee3\u8868\u8fb9$e$\u7684\u957f\u5ea6\uff09\u3002\n\n\u8fd9\u4e2a\u6a21\u578b\u660e\u663e\u5177\u6709\u53ef\u52a0\u6027\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3a\u4e86\u8ba1\u7b97$\\sum_{i=1}^udep_{\\text{LCA}(p_i,v)}$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a$1\\leq i\\leq u$\uff0c\u6211\u4eec\u628a\u4f4d\u4e8e$p_i$\u548c\u6839\u8def\u5f84\u8282\u70b9\u4e0a\u7684\u8fb9\u7684$cnt$\u90fd\u52a0$1$\uff0c\u7136\u540e\u6309\u4e0a\u8ff0\u65b9\u6cd5\u8ba1\u7b97\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230$\\sum_{i=1}^udep_{\\text{LCA}(p_i,v)}$\u7684\u503c\u4e86\u3002\n\n\u95ee\u9898\u53c8\u8f6c\u53d8\u6210\u4e86\uff1a\u5982\u4f55\u5feb\u901f\u5728\u6811\u4e0a\u6267\u884c\u8def\u5f84\u52a0\u3001\u8def\u5f84\u6c42\u548c\u64cd\u4f5c\uff1f\u53c8\u5982\u4f55\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9$u$\u90fd\u7ef4\u62a4\u597d$cnt_e$\uff1f\n\n\u524d\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u662f[\u6811\u94fe\u5256\u5206](https://www.luogu.com.cn/problem/P3384)\uff0c\u540e\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u662f[\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811](https://www.luogu.com.cn/problem/P3834)\u3002\n\n\u7531\u4e8e\u8fb9\u5728\u7a0b\u5e8f\u4e2d\u4e0d\u597d\u8868\u793a\uff0c\u6211\u4eec\u628a\u8fb9\u4e0a\u7684\u95ee\u9898\u8f6c\u79fb\u5230\u70b9\u4e0a\uff1a\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u6211\u4eec\u8f6c\u79fb\u5230\u8be5\u8fb9\u7684\u4e0b\u65b9\u8282\u70b9\u4e0a\u7ef4\u62a4\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9$i$\uff0c\u6211\u4eec\u9884\u5904\u7406\u51fa\u5b83\u548c\u7236\u4eb2\u4e4b\u95f4\u7684\u8fb9\u7684\u8fb9\u6743$val_i$\uff0c\u7279\u522b\u5730\uff0c\u4ee4$val_1=0$\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u7ef4\u62a4\u8fb9\u6743\u3002\n\n\u68b3\u7406\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u70b9\u7684\u52a0\u5165\uff0c\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n- \u627e\u5230\u5728\u6811\u94fe\u5256\u5206\u610f\u4e49\u4e0b\uff0c\u8be5\u70b9\u5230\u6839\u7684\u8def\u5f84\u88ab\u5212\u5206\u6210\u7684\u533a\u95f4\uff1b\n\n- \u6240\u6709\u533a\u95f4\u5bf9$cnt$\u6267\u884c\u533a\u95f4\u52a0\u4e00\u64cd\u4f5c\u3002\n\n\u4f46\u666e\u901a\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0d\u652f\u6301\u533a\u95f4\u52a0\u64cd\u4f5c\uff0c\u5bf9\u6b64\u6709\u4e0b\u5217\u4e24\u79cd\u65b9\u6cd5\uff1a\n\n**\u65b9\u6cd5\u4e00\uff1a\u5dee\u5206**\n\n\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u6240\u6709$dif_i=cnt_i-cnt_{i-1}$\u7684\u503c\uff0c\u5219\u539f\u6765\u7684\u533a\u95f4\u4fee\u6539\u53d8\u6210\u4e86\u5355\u70b9\u4fee\u6539\uff0c\u53ef\u4ee5\u53ef\u6301\u4e45\u5316\u3002\n\n\u800c\u6b64\u65f6$cnt_i=\\sum_{j=1}^idif_j$\uff0c\u5219\u8981\u7ef4\u62a4\u7684$\\sum_{i=1}^tcnt_ival_i=\\sum_{i=1}^tval_i\\sum_{j=1}^idif_j=\\sum_{j=1}^tdif_j\\sum_{i=j}^jval_j$\uff0c\u9884\u5904\u7406\u51fa$s_i=\\sum_{j=1}^ival_j$\uff0c\u5219\u539f\u5f0f\u5316\u4e3a$\\sum_{j=1}^tdif_j(s_t-s_{j-1})$\uff0c\u5176\u4e2d$s_t$\u662f\u5e38\u91cf\uff0c\u6545\u5206\u5f00\u7ef4\u62a4$\\sum dif_j$\u548c$\\sum s_{j-1}dif_j$\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u65b9\u6cd5\u6548\u7387\u4e0d\u4f73\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u76ee\u524d\u4e0d\u80fd\u901a\u8fc7\u672c\u9898\u7684\u6570\u636e\u3002\u5404\u4f4d\u5927\u4f6c\u53ef\u4ee5\u5e2e\u5fd9\u8c03\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\n \nusing namespace std;\n \nint n=0,q=0;\n \nint p[250000];\nstruct e\n{\n\tint to,val;e(int t=0,int v=0):to(t),val(v){} \n};\nvector<e> ed[250000];\n \nint fa[250000],sz[250000],son[250000];long long dep[250000],val[250000];\nvoid dfs_bas(int u,int f)\n{\n\tfa[u]=f,sz[u]=1,son[u]=0;\n\tfor(int i=0;i<ed[u].size();i++)\n\t{\n\t\tint v=ed[u][i].to;\n\t\tif(v!=f)\n\t\t{\n\t\t\tdep[v]=dep[u]+ed[u][i].val,val[v]=ed[u][i].val;\n\t\t\tdfs_bas(v,u);\n\t\t\tsz[u]+=sz[v];\n\t\t\tif(sz[v]>sz[son[u]])son[u]=v;\n\t\t}\n\t}\n}\n \nint seg[250000],rev[250000],top[250000];\nvoid dfs_sec(int pos=1,int f=0)\n{\n    if(son[pos])\n    {\n        seg[0]++;seg[son[pos]]=seg[0];\n        top[son[pos]]=top[pos];\n        rev[seg[0]]=son[pos];\n        dfs_sec(son[pos],pos);\n    }\n    for(int i=0,v=0;i<ed[pos].size();i++)\n    {\n        v=ed[pos][i].to;\n        if(v!=son[pos]&&v!=f)\n        {\n            seg[0]++;seg[v]=seg[0];\n            rev[seg[0]]=v;\n            top[v]=v;\n            dfs_sec(v,pos);\n        }\n    }\n}\nlong long s[250000];\n \nstruct nd\n{\n    int lch,rch;int sum;long long sum_s;\n};\nnd t[32000001];\n \nint used=0;\nvoid build(int l,int r,int &k)\n{\n    if(!k)k=++used;\n    t[k].lch=t[k].rch=0;\n    if(l==r)\n    {\n        t[k].sum=t[k].sum_s=0;return;\n    }\n    int mid=(l+r)>>1;\n    build(l,mid,t[k].lch),build(mid+1,r,t[k].rch);\n    t[k].sum=t[t[k].lch].sum+t[t[k].rch].sum,t[k].sum_s=t[t[k].lch].sum_s+t[t[k].rch].sum;\n}\n \nint change(int now,int l,int r,int pos,int val,int old)\n{\n    if(pos<1||pos>n)return now;\n\t\n\tint p;\n\tif(now==old)\n\t{\n\t\tp=++used;t[p]=t[now];\n\t}\n\telse\n\t{\n\t\tp=now;\n\t}\n    if(l==r)\n    {\n        t[p].sum+=val,t[p].sum_s+=s[pos-1]*val;return p;\n    }\n    int mid=(l+r)>>1;\n    if(pos<=mid)\n    {\n        t[p].lch=change(t[now].lch,l,mid,pos,val,t[old].lch);\n        t[p].sum=t[t[p].lch].sum+t[t[p].rch].sum,t[p].sum_s=t[t[p].lch].sum_s+t[t[p].rch].sum_s;\n    }\n    else\n    {\n        t[p].rch=change(t[now].rch,mid+1,r,pos,val,t[old].rch);\n        t[p].sum=t[t[p].lch].sum+t[t[p].rch].sum,t[p].sum_s=t[t[p].lch].sum_s+t[t[p].rch].sum_s;\n    }\n    return p;\n}\nlong long query_sum(int now,int l,int r,int x,int y)\n{\n    if(l>y||r<x)return 0;\n    if(x<=l&&r<=y)return t[now].sum;\n    int mid=(l+r)/2;\n    return query_sum(t[now].lch,l,mid,x,y)+query_sum(t[now].rch,mid+1,r,x,y);\n}\nlong long query_sum_s(int now,int l,int r,int x,int y)\n{\n    if(l>y||r<x)return 0;\n    if(x<=l&&r<=y)return t[now].sum_s;\n    int mid=(l+r)/2;\n    return query_sum_s(t[now].lch,l,mid,x,y)+query_sum_s(t[now].rch,mid+1,r,x,y);\n}\n \nint rt[250000];\nint add_road(int tree_id,int pos,int val)\n{\n\tint fpos=0;int k=rt[tree_id];\n\twhile(pos)\n\t{\n\t\tfpos=top[pos];\n\t\tk=change(k,1,n,seg[fpos],val,rt[tree_id]);\n\t\tk=change(k,1,n,seg[pos]+1,-val,rt[tree_id]);\n\t\tpos=fa[fpos];\n\t}\n\treturn k;\n}\n \nlong long query_single(int tree_id,int k)\n{\n\tlong long sum=query_sum(rt[tree_id],1,n,1,k),sum_s=query_sum_s(rt[tree_id],1,n,1,k);\n\treturn sum*s[k]-sum_s;\n}\nlong long query_point(int tree_id,int pos)\n{\n\tint fpos=0;long long sum=0;\n\twhile(pos)\n\t{\n\t\tfpos=top[pos];\n\t\tsum+=query_single(tree_id,seg[pos])-query_single(tree_id,seg[fpos]-1);\n\t\tpos=fa[fpos];\n\t}\n\treturn sum;\n}\n \nlong long sum_dep[250000];\n \nlong long sum_dist(int tree_id,int v)\n{\n\treturn sum_dep[tree_id]+dep[v]*tree_id-2*query_point(tree_id,v);\n}\n \nint main()\n{\n\tscanf(\"%d%d\",&n,&q);for(int i=1;i<=n;i++)scanf(\"%d\",&p[i]);\n\tfor(int i=1,x=0,y=0,w=0;i<n;i++){scanf(\"%d%d%d\",&x,&y,&w);ed[x].push_back(e(y,w)),ed[y].push_back(e(x,w));}\n\t\n\tdfs_bas(1,0);\n\tseg[0]=seg[1]=top[1]=rev[1]=1;dfs_sec(1);\n\tfor(int i=1;i<=n;i++)s[i]=s[i-1]+val[rev[i]];\n\t\n\tbuild(1,n,rt[0]);\n\tfor(int i=1;i<=n;i++)rt[i]=add_road(i-1,p[i],1);\n\tfor(int i=1;i<=n;i++)sum_dep[i]=sum_dep[i-1]+dep[p[i]];\n\tint type=0,l=0,r=0,v=0,x=0;\n\tlong long last_ans=0;\n\tint cnt=0;\n\twhile(q--)\n\t{\n\t\tscanf(\"%d\",&type);\n\t\tif(type==1)\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&l,&r,&v);\n\t\t\tl=last_ans^l,r=last_ans^r,v=last_ans^v;\n\t\t\tlast_ans=sum_dist(r,v)-sum_dist(l-1,v);\n\t\t\t\n\t\t\tprintf(\"%lld\\n\",last_ans);\n\t\t\tlast_ans%=1<<30;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcnt++;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tx=last_ans^x;\n\t\t\tsum_dep[x]=sum_dep[x-1]+dep[p[x+1]];\n\t\t\tif(used>3e7)\n\t\t\t{\n\t\t\t\tswap(p[x],p[x+1]);\n\t\t\t\tused=0;\n\t\t\t\tmemset(rt,0,sizeof(rt));build(1,n,rt[0]);\n\t\t\t\tfor(int i=1;i<=n;i++)rt[i]=add_road(i-1,p[i],1);\n\t\t\t\tcnt=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trt[x]=add_road(x-1,p[x+1],1);\n\t\t\t\tswap(p[x],p[x+1]);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n**\u65b9\u6cd5\u4e8c\uff1a\u6807\u8bb0\u6c38\u4e45\u5316**\n\n\u5176\u5b9e\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\u95ee\u9898\u66f4\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u6807\u8bb0\u6c38\u4e45\u5316\u3002\u4e0d\u4f1a\u7684\u53ef\u4ee5\u81ea\u884c\u641c\u7d22[\u8fd9\u9898](http://acm.hdu.edu.cn/showproblem.php?pid=4348)\u7684\u9898\u89e3\u3002\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint n=0,q=0;\n\nint p[250000];\nstruct e\n{\n\tint to,val;e(int t=0,int v=0):to(t),val(v){} \n};\nvector<e> ed[250000];\n\nint fa[250000],sz[250000],son[250000];long long dep[250000],val[250000];\nvoid dfs_bas(int u,int f)\n{\n\tfa[u]=f,sz[u]=1,son[u]=0;\n\tfor(int i=0;i<ed[u].size();i++)\n\t{\n\t\tint v=ed[u][i].to;\n\t\tif(v!=f)\n\t\t{\n\t\t\tdep[v]=dep[u]+ed[u][i].val,val[v]=ed[u][i].val;\n\t\t\tdfs_bas(v,u);\n\t\t\tsz[u]+=sz[v];\n\t\t\tif(sz[v]>sz[son[u]])son[u]=v;\n\t\t}\n\t}\n}\n\nint seg[250000],rev[250000],top[250000];\nvoid dfs_sec(int pos=1,int f=0)\n{\n    if(son[pos])\n    {\n        seg[0]++;seg[son[pos]]=seg[0];\n        top[son[pos]]=top[pos];\n        rev[seg[0]]=son[pos];\n        dfs_sec(son[pos],pos);\n    }\n    for(int i=0,v=0;i<ed[pos].size();i++)\n    {\n        v=ed[pos][i].to;\n        if(v!=son[pos]&&v!=f)\n        {\n            seg[0]++;seg[v]=seg[0];\n            rev[seg[0]]=v;\n            top[v]=v;\n            dfs_sec(v,pos);\n        }\n    }\n}\nlong long s[250000];\n\nstruct nd\n{\n    int lch,rch;int sum;long long sum_s;\n};\nnd t[30000001];\n\nint used=0,lim=0;\nvoid change(int &now,int l,int r,int x,int y)\n{\n\tif(now<=lim)\n\t{\n\t\t++used;t[used]=t[now];now=used;\n\t}\n    int mid=(l+r)>>1;\n    if(x<=l&&r<=y)\n    {\n    \tt[now].sum++;t[now].sum_s+=s[r]-s[l-1];return;\n\t}\n\tif(x<=mid)change(t[now].lch,l,mid,x,y);\n\tif(y>mid)change(t[now].rch,mid+1,r,x,y);\n    t[now].sum_s=t[t[now].lch].sum_s+t[t[now].rch].sum_s+(s[r]-s[l-1])*t[now].sum;\n}\nlong long query(int now,int l,int r,int x,int y,int cnt)\n{\n    if(now==0)return cnt*(s[min(r,y)]-s[max(l,x)-1]);\n    if(x<=l&&r<=y)return t[now].sum_s+cnt*(s[r]-s[l-1]);\n    int mid=(l+r)>>1;\n    long long ans=0;\n    if(x<=mid)ans+=query(t[now].lch,l,mid,x,y,cnt+t[now].sum);\n    if(y>mid)ans+=query(t[now].rch,mid+1,r,x,y,cnt+t[now].sum);\n    return ans;\n}\n\nint rt[250000];\nvoid add_road(int tree_id,int pos)\n{\n\tlim=used;\n\tint fpos=0;\n\twhile(pos)\n\t{\n\t\tfpos=top[pos];\n\t\tchange(rt[tree_id],1,n,seg[fpos],seg[pos]);\n\t\tpos=fa[fpos];\n\t}\n}\n\n\nlong long sum_dep[250000];\n\nlong long sum_dist(int tree_id,int v)\n{\n\tint pos=v,fpos=0;long long sum=0;\n\twhile(pos)\n\t{\n\t\tfpos=top[pos];\n\t\tsum+=query(rt[tree_id],1,n,seg[fpos],seg[pos],0);\n\t\tpos=fa[fpos];\n\t}\n\treturn sum_dep[tree_id]+dep[v]*tree_id-2*sum;\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);for(int i=1;i<=n;i++)scanf(\"%d\",&p[i]);\n\tfor(int i=1,x=0,y=0,w=0;i<n;i++){scanf(\"%d%d%d\",&x,&y,&w);ed[x].push_back(e(y,w)),ed[y].push_back(e(x,w));}\n\t\n\tdfs_bas(1,0);\n\tseg[0]=seg[1]=top[1]=rev[1]=1;dfs_sec(1);\n\tfor(int i=1;i<=n;i++)s[i]=s[i-1]+val[rev[i]];\n\tfor(int i=1;i<=n;i++)rt[i]=rt[i-1],add_road(i,p[i]);\n\tfor(int i=1;i<=n;i++)sum_dep[i]=sum_dep[i-1]+dep[p[i]];\n\t\n\tint type=0,l=0,r=0,v=0,x=0;\n\tlong long last_ans=0;\n\tint cnt=0;\n\twhile(q--)\n\t{\n\t\tscanf(\"%d\",&type);\n\t\tif(type==1)\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&l,&r,&v);\n\t\t\tl=last_ans^l,r=last_ans^r,v=last_ans^v;\n\t\t\tlast_ans=sum_dist(r,v)-sum_dist(l-1,v);\n\t\t\t\n\t\t\tprintf(\"%lld\\n\",last_ans);\n\t\t\tlast_ans%=1<<30;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcnt++;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tx=last_ans^x;\n\t\t\tsum_dep[x]=sum_dep[x-1]+dep[p[x+1]];\n\t\t\tif(used>2.99e7)\n\t\t\t{\n\t\t\t\tswap(p[x],p[x+1]);\n\t\t\t\tused=0;\n\t\t\t\tfor(int i=1;i<=n;i++)rt[i]=rt[i-1],add_road(i,p[i]);\n\t\t\t\tcnt=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trt[x]=rt[x-1];add_road(x,p[x+1]);\n\t\t\t\tswap(p[x],p[x+1]);\n\t\t\t}\n\t\t}\n\t}\n}\n```",
        "postTime": 1580209192,
        "uid": 112794,
        "name": "\u5468\u5b50\u8861",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF757G \u3010Can Bash Save the Day?\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u79cd\u9898\u8003\u8651\u7ecf\u5178\u5957\u8def\u3002\n\n$dis(u,v)=dep_u+dep_v-2dep_{lca(u,v)}$\n\n\u5c06$lca$\u7684\u6df1\u5ea6\u8f6c\u5316\u4e3a\u94fe\u5e76\uff08$1-u$\u7684\u94fe\u4e0e$1-v$\u7684\u94fe\uff09\u7684\u957f\u5ea6\u3002\n\n\u6bcf\u6b21\u628a$1-p_i$\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u6743\u503c\u52a0$1$\uff0c\u4e3b\u5e2d\u6811+\u94fe\u5256\u5206\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u5bf9\u4e8e$2$\u64cd\u4f5c\uff0c\u53ef\u4ee5\u53d1\u73b0\u53ea\u4f1a\u6539\u53d8\u7b2c$i$\u68f5\u4e3b\u5e2d\u6811\u7684\u503c\uff0c\u6240\u4ee5\u66b4\u529b\u91cd\u5efa\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528\u8fd9\u79cd\u505a\u6cd5\u9700\u8981\u5361\u7a7a\u95f4\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n \ninline int gi()\n{\n\tchar c = getchar();\n\twhile(c < '0' || c > '9') c = getchar();\n\tint sum = 0;\n\twhile('0' <= c && c <= '9') sum = sum * 10 + c - 48, c = getchar();\n\treturn sum;\n}\n \ntypedef long long ll;\nconst int maxn = 200005, mod = (1 << 30) - 1;\n \nint n, m, p[maxn];\n \nstruct edge\n{\n\tint to, next, w;\n} e[maxn * 2];\nint h[maxn], etot;\n \nint Time, fa[maxn], fw[maxn], top[maxn], siz[maxn], son[maxn], ord[maxn], dfn[maxn];\nll dis[maxn], sum[maxn], pre[maxn];\n \ninline void add(int w, int u, int v)\n{\n\te[++etot] = (edge) {v, h[u], w}; h[u] = etot;\n\te[++etot] = (edge) {u, h[v], w}; h[v] = etot;\n}\n \nvoid dfs1(int u)\n{\n\tsiz[u] = 1;\n\tfor (int i = h[u], v; v = e[i].to, i; i = e[i].next)\n\t\tif (v != fa[u]) {\n\t\t\tfa[v] = u; fw[v] = e[i].w; dis[v] = dis[u] + e[i].w;\n\t\t\tdfs1(v);\n\t\t\tsiz[u] += siz[v];\n\t\t\tif (siz[v] > siz[son[u]]) son[u] = v;\n\t\t}\n}\n \nvoid dfs2(int u)\n{\n\tord[dfn[u] = ++Time] = u;\n\tif (son[u]) top[son[u]] = top[u], dfs2(son[u]);\n\telse return ;\n\tfor (int i = h[u], v; v = e[i].to, i; i = e[i].next)\n\t\tif (v != fa[u] && v != son[u]) top[v] = v, dfs2(v);\n}\n \n#define mid ((l + r) >> 1)\n\nconst int maxs = 3.81e7;\n\nll sum2[maxs];\nint rt[maxn], lch[maxs], rch[maxs], sum1[maxs], tot, lim;\n \nvoid insert(int &s, int l, int r, int ql, int qr)\n{\n\tif (s <= lim) {\n\t\t++tot;\n\t\tlch[tot] = lch[s]; rch[tot] = rch[s]; sum1[tot] = sum1[s]; sum2[tot] = sum2[s];\n\t\ts = tot;\n\t}\n\tif (ql <= l && r <= qr) return ++sum1[s], sum2[s] += pre[r] - pre[l - 1], void();\n\tif (ql <= mid) insert(lch[s], l, mid, ql, qr);\n\tif (qr >= mid + 1) insert(rch[s], mid + 1, r, ql, qr);\n\tsum2[s] = sum2[lch[s]] + sum2[rch[s]] + (pre[r] - pre[l - 1]) * sum1[s];\n}\n \nll query(int s, int l, int r, int ql, int qr, int cnt)\n{\n\tif (!s) return (pre[min(r, qr)] - pre[max(l - 1, ql - 1)]) * cnt;\n\tif (ql <= l && r <= qr) return (pre[r] - pre[l - 1]) * cnt + sum2[s];\n\tll res = 0; cnt += sum1[s];\n\tif (ql <= mid) res += query(lch[s], l, mid, ql, qr, cnt);\n\tif (qr >= mid + 1) res += query(rch[s], mid + 1, r, ql, qr, cnt);\n\treturn res;\n}\n \nvoid insert(int u, int v)\n{\n\tlim = tot;\n\twhile (v) {\n\t\tinsert(rt[u], 1, n, dfn[top[v]], dfn[v]);\n\t\tv = fa[top[v]];\n\t}\n}\n \nll query(int u, int v)\n{\n\tll ans = dis[v] * u + sum[u];\n\twhile (v) {\n\t\tans -= query(rt[u], 1, n, dfn[top[v]], dfn[v], 0) * 2;\n\t\tv = fa[top[v]];\n\t}\n\treturn ans;\n}\n \nint main()\n{\n\tfreopen(\"g.in\", \"r\", stdin);\n\tfreopen(\"g.out\", \"w\", stdout);\n\t\n\tn = gi(); m = gi();\n\tfor (int i = 1; i <= n; ++i) p[i] = gi();\n\t\n\tfor (int i = 1; i < n; ++i) add(gi(), gi(), gi());\n\t\n\tdfs1(1);\n\ttop[1] = 1; dfs2(1);\n \n\tfor (int i = 1; i <= n; ++i) sum[i] = sum[i - 1] + dis[p[i]], pre[i] = pre[i - 1] + fw[ord[i]];\n\tfor (int i = 1; i <= n; ++i)\n\t\trt[i] = rt[i - 1], insert(i, p[i]);\n\n\t//if (n >= 10000) printf(\"%d\\n\", tot), exit(0);\n\t\n\tll ans = 0; int _cnt = 0;\n\tfor (int t, a, b, c, i = 1; i <= m; ++i) {\n\t\tt = gi();\n\t\tif (t == 1) {\n\t\t\ta = ans ^ gi(); b = ans ^ gi(); c = ans ^ gi();\n\t\t\tprintf(\"%lld\\n\", ans = (query(b, c) - query(a - 1, c)));\n\t\t\tans &= mod;\n\t\t\t//ans = 0;\n\t\t} else {\n\t\t\ta = ans ^ gi();\n\t\t\t//printf(\"%d\\n\", a);\n\t\t\tswap(p[a], p[a + 1]); sum[a] = sum[a - 1] + dis[p[a]];\n\t\t\tif (++_cnt == 160000) {\n\t\t\t\t_cnt = 0; tot = 0;\n\t\t\t\tfor (int i = 1; i <= n; ++i)\n\t\t\t\t\trt[i] = rt[i - 1], insert(i, p[i]);\n\t\t\t} else rt[a] = rt[a - 1], insert(a, p[a]);\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1564324356,
        "uid": 119899,
        "name": "dsidsi",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF757G \u3010Can Bash Save the Day?\u3011"
    },
    {
        "content": "\n$log^2$\u7684\u505a\u6cd5\u6709\u5f88\u591a\uff0c\u8fd9\u91cc\u8bf4\u4e0b\u5b98\u65b9\u9898\u89e3\u7684$log$\u505a\u6cd5\uff08\u53ef\u6301\u4e45\u5316\u8fb9\u5206\u6811\uff09\u3002\n\n\u8003\u8651\u5148\u628a\u6574\u68f5\u6811\u7684\u8fb9\u5206\u6811\u5efa\u51fa\u6765\uff0c\u6ce8\u610f\u5230\u8fb9\u5206\u6811\u53ea\u6709\u53f6\u5b50\u8282\u70b9\u6709\u539f\u6811\u4e0a\u7684\u70b9\uff0c\u5176\u4ed6\u7684\u70b9\u90fd\u662f\u539f\u6811\u4e0a\u7684\u8fb9\u3002\u7136\u540e\u53ef\u6301\u4e45\u5316\u8fb9\u5206\u6811\uff0c\u6309\u7167$p$\u5c06\u6240\u6709\u70b9\u4f9d\u6b21\u63d2\u5165\u5230\u5bf9\u5e94\u7248\u672c\u7684\u8fb9\u5206\u6811\u3002\u8fd9\u6837\u6211\u4eec\u628a\u4e24\u4e2a\u7248\u672c\u5dee\u5206\u4e00\u4e0b\u5c31\u662f\u4e00\u68f5\u53ea\u5305\u542b\u4e86\u70b9\u96c6${\\{P_i\\}}_{i\\in[l,r]}$\u7684\u8fb9\u5206\u6811\u3002\n\n\u8003\u8651\u5982\u4f55\u67e5\u8be2\u3002\u56e0\u4e3a\u8fb9\u5206\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\u5c31\u4ee3\u8868\u4e86\u8fb9\u5206\u6811\u4e0a\u5bf9\u5e94\u8282\u70b9\u7684\u5b50\u6811\u7684\u4fe1\u606f\uff0c\u8fd9\u91cc\u6211\u4eec\u7ef4\u62a4\u5b50\u6811\u5230\u8fd9\u6761\u8fb9\u7684\u8ddd\u79bb\u3002\u90a3\u4e48\u5f53\u6211\u4eec\u67e5\u8be2$\\sum_{i=l}^{r} \\operatorname{dis}\\left(p_{i}, x\\right)$\u5c31\u5728\u904d\u5386\u5dee\u5206\u540e\u7684\u8fb9\u5206\u6811\u4e0a$x$\u7684\u6240\u6709\u7956\u5148\uff0c\u7136\u540e\u7528\u6ca1\u6709$x$\u7684\u90a3\u4e2a\u5b50\u6811\u7684$sum$\uff08\u5c31\u662f\u90a3\u4e2a\u5b50\u6811\u7684\u6df1\u5ea6\u548c\uff09\uff0c\u7136\u540e\u52a0\u4e0a$(dis(x,\u8fd9\u6761\u8fb9)+\u8fb9\u5206\u6811\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u7684\u8fb9\u7684\u6743\u503c)\\times\u5b50\u6811\u5927\u5c0f$\u5373\u53ef\u8ba1\u7b97\u51fa\u8def\u5f84\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u8d21\u732e\u3002\n\n\u8003\u8651\u5982\u4f55\u4fee\u6539\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a\u53ea\u4f1a\u4ea4\u6362\u6392\u5217\u76f8\u90bb\u7684\u4e24\u9879\u3002\u56e0\u4e3a\u4ea4\u6362\u6392\u5217\u7684$x,x+1$\u9879\u53ea\u4f1a\u4f7f\u7b2c$x$\u4e2a\u7248\u672c\u7684\u8fb9\u5206\u6811\u591a\u5305\u542b\u4e86\u4fee\u6539\u540e\u7684\u7684$P_{x+1}$\uff0c\u5c11\u5305\u542b\u4e86\u4fee\u6539\u540e\u7684$P_x$\uff08\u7b2c$k$\u4e2a\u7248\u672c\u7684\u8fb9\u5206\u6811\u662f\u53ea\u5305\u542b${\\{P_i\\}}_{i\\in[1,k]}$\u8fd9\u4e9b\u70b9\u7684\u8fb9\u5206\u6811\uff09\u3002\u6240\u4ee5\u6211\u4eec\u5bf9\u7b2c$x$\u4e2a\u7248\u672c\u7684\u8fb9\u5206\u6811\u8fdb\u884c\u4fee\u6539\uff0c\u5220\u9664\u65b0\u7684$P_{x+1}$\uff0c\u63d2\u5165\u65b0\u7684$P_x$\u5373\u53ef\u3002\n\n\u5206\u6790\u4e00\u6ce2\u590d\u6742\u5ea6\u3002\u56e0\u4e3a\u6bcf\u6b21\u8fb9\u5206\uff0c\u8054\u901a\u5757\u5927\u5c0f\u81f3\u5c11\u53d8\u6210\u539f\u6765\u7684$\\frac{2}{3}$\uff0c\u6240\u4ee5\u6811\u9ad8\u81f3\u591a\u4e3a$\\log_{1.5}$\uff0c\u56e0\u4e3a\u8fb9\u5206\u6811\u4e0a\u6bcf\u4e2a\u70b9\u81f3\u591a\u88ab\u6811\u9ad8\u4e2a\u7956\u5148\u8ba1\u7b97\u5230\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u65f6\u95f4\u590d\u6742\u5ea6$n\\log_{1.5}n$\u3002\u53c8\u56e0\u4e3a\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u7684\u63d2\u5165\u548c\u67e5\u8be2\u590d\u6742\u5ea6\u5747\u4e3a$O(max_{\u6811\u9ad8})$\u3002\u6240\u4ee5\u63d2\u5165\u548c\u67e5\u8be2\u7684\u603b\u590d\u6742\u5ea6\u5c31\u662f$q\\log_{1.5}n$\u3002\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u662f$n\\log_{1.5}n$\u8fd8\u6709\u4e2a\u5e38\u6570\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u521d\u59cb\u5316\u7684\u9636\u6bb5\u662f$O(n)$\u7684\uff0c\u53ef\u6301\u4e45\u5316\u7684\u90e8\u5206\u548c\u63d2\u5165\u590d\u6742\u5ea6\u76f8\u5f53\uff0c\u4e3a$q\\log_{1.5}n$\u3002$\\log_{1.5}n$\u5927\u6982\u5728`31`\u5de6\u53f3\uff0c\u5f00\u5230`33`\u5c31\u5f88\u7a33\u4e86\u3002\n\n```cpp\n/*\n\n  _|_|                              _|  _|    _|\n_|    _|  _|  _|_|  _|_|_|_|        _|  _|  _|\n_|    _|  _|_|          _|          _|  _|_|\n_|    _|  _|          _|      _|    _|  _|  _|\n  _|_|    _|        _|_|_|_|    _|_|    _|    _|\n\n*/\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<set>\n//#define ls (rt<<1)\n//#define rs (rt<<1|1)\n#define vi vector<int>\n#define pb push_back\n#define mk make_pair\n#define pii pair<int,int>\n#define rep(i,a,b) for(int i=(a),i##end=(b);i<=i##end;i++)\n#define fi first\n#define se second\ntypedef long long ll;\nconst int maxn=2*2e5+3;\nconst int inf=1e9+1000;\nconst int lim=33;\nusing namespace std;\nvi edge[maxn],edgew[maxn];\nint p[maxn],head[maxn];\nint n,q,cnt=1,bk;\nstruct gg{\n    int u,v,w,next;\n}side[maxn*2];\nvoid ins(int u,int v,int w){\n    //cout<<u<<' '<<v<<' '<<w<<endl;\n    side[++cnt]=(gg){u,v,w,head[u]};head[u]=cnt;\n    side[++cnt]=(gg){v,u,w,head[v]};head[v]=cnt;\n}\nvoid rebuild(int u,int fa){\n    int last=-1;\n    for(int i=0;i<edge[u].size();i++){\n        int v=edge[u][i];if(v==fa)continue;\n        if(last==-1)ins(u,v,edgew[u][i]),last=u;\n        else ins(last,++n,0),ins(n,v,edgew[u][i]),last=n;\n        rebuild(v,u);\n    }\n}\nint ls[lim*maxn],rs[lim*maxn],rt[maxn],idx_cnt,si,mysize[maxn],mi;\nbool vis[maxn*2];\nvoid get_size(int u,int fa){\n    mysize[u]=1;\n    for(int i=head[u];i;i=side[i].next){\n        int v=side[i].v;if(v==fa||vis[i])continue;\n        get_size(v,u);mysize[u]+=mysize[v];\n    }\n}\nvoid find_cen(int u,int fa,int n){\n    for(int i=head[u];i;i=side[i].next){\n        int v=side[i].v;if(v==fa||vis[i])continue;\n        find_cen(v,u,n);\n        if(abs((n-mysize[v])-mysize[v])<mi)\n            mi=abs((n-mysize[v])-mysize[v]),si=i;\n    }\n}\nint cen(int x){\n    get_size(x,0);\n    mi=inf;find_cen(x,0,mysize[x]);\n    if(mi==inf)return -1;\n    return si;\n}\nvi route[maxn];\nvector<ll> fadis[maxn];\nll lsum[lim*maxn],rsum[lim*maxn];\nint lsz[lim*maxn],rsz[lim*maxn],eval[lim*maxn];\nvoid dfs(int u,int fa,int dir,ll dis,int floor){\n    route[u].pb(dir);fadis[u].pb(dis);\n    for(int i=head[u];i;i=side[i].next){\n        int v=side[i].v;if(v==fa||vis[i])continue;\n        dfs(v,u,dir,dis+side[i].w,floor);\n    }\n}\nvoid divide(int &u,int idx,int floor){\n    vis[idx]=1; vis[idx^1]=1;\n    if(!u)u=++idx_cnt;eval[u]=side[idx].w;\n    int v1=side[idx].u,v2=side[idx].v;\n    dfs(v1,0,0,0,floor);\n    dfs(v2,0,1,0,floor);\n    int l=cen(v1);\n    int r=cen(v2);\n    if(l!=-1)divide(ls[u],l,floor+1);\n    if(r!=-1)divide(rs[u],r,floor+1);\n}\nvoid insert(int &now,int last,int floor,int tar){\n    now=++idx_cnt;\n    ls[now]=ls[last],rs[now]=rs[last],lsz[now]=lsz[last],rsz[now]=rsz[last],lsum[now]=lsum[last],rsum[now]=rsum[last],eval[now]=eval[last];\n    if(route[tar].size()<floor)return;\n    int dir=route[tar][floor-1];\n    if(!dir)insert(ls[now],ls[last],floor+1,tar),\n    lsum[now]+=fadis[tar][floor-1],lsz[now]++;\n    else insert(rs[now],rs[last],floor+1,tar),rsum[now]+=fadis[tar][floor-1],rsz[now]++;\n}\nvoid init(){\n    rebuild(1,0);\n    divide(rt[0],cen(1),1);\n    rep(i,1,bk){\n        insert(rt[i],rt[i-1],1,p[i]);\n    }\n}\nint mod(ll x){\n    return x%(1<<30);\n}\nll query(int now,int last,int tar,int floor){\n    if(route[tar].size()<floor)return 0;\n    int dir=route[tar][floor-1];\n    ll ans=0;\n    if(!dir)ans+=rsum[now]-rsum[last]+(1ll*(fadis[tar][floor-1]+eval[now])*(rsz[now]-rsz[last])),ans+=query(ls[now],ls[last],tar,floor+1);\n    else ans+=lsum[now]-lsum[last]+(1ll*(fadis[tar][floor-1]+eval[now])*(lsz[now]-lsz[last])),ans+=query(rs[now],rs[last],tar,floor+1);\n    return ans;\n}\nint main(){\n  //  freopen(\"in\",\"r\",stdin);\n    scanf(\"%d%d\",&n,&q);bk=n;\n    ll last_ans=0;\n    rep(i,1,n)scanf(\"%d\",&p[i]);\n    rep(i,1,n-1){\n        int u,v,w;scanf(\"%d%d%d\",&u,&v,&w);\n        edge[u].pb(v);edge[v].pb(u);edgew[u].pb(w);edgew[v].pb(w);\n    }\n    init();\n    rep(i,1,q){\n        int ty;scanf(\"%d\",&ty);\n        if(ty==1){\n            int a,b,c;scanf(\"%d%d%d\",&a,&b,&c);\n            int l=mod(last_ans)^a,r=mod(last_ans)^b,v=mod(last_ans)^c;\n            last_ans=query(rt[r],rt[l-1],v,1);\n            printf(\"%lld\\n\",last_ans);\n        }\n        else{\n            int a;scanf(\"%d\",&a);\n            int x=mod(last_ans)^a;\n            swap(p[x],p[x+1]);\n            insert(rt[x],rt[x-1],1,p[x]);\n        }\n    }\n    return 0;\n}\n```\n\n\n",
        "postTime": 1592874007,
        "uid": 43420,
        "name": "GavinZheng",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF757G \u3010Can Bash Save the Day?\u3011"
    },
    {
        "content": "\u6211\u5bfb\u601d\u6211\u52a0\u524d\u9762\u7684\u4e5f\u5c31\u53ea\u6709\u5b8f\u5b9a\u4e49\u548c\u5934\u6587\u4ef6\u554a\uff0c\u800c\u4e14\u4e5f\u5c3120\u591a\u884c\u3002\u3002\u8fd9\u4e48\u8bf4\u5c82\u4e0d\u662f\u4e0d\u7528\u4e07\u80fd\u5934\uff0c\u628a\u5e38\u7528\u51fd\u6570 `define` \u4e00\u4e0b\u90fd\u7b97\u8d85\u957f\u9884\u7f16\u8bd1\u6307\u4ee4\u4e86\uff08\uff1f\uff09 \n\n[\u8bf7\u81ea\u884c\u5728\u4ee3\u7801\u524d\u6dfb\u52a0](https://yijan.co/template/)\n\n\u597d\u9898\u554a\uff01\n\n\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\u53ef\u80fd\u4f1a\u89c9\u5f97\u5f88\u677f\u3002\u53ef\u4ee5\u76f4\u63a5\u628a\u70b9\u5206\u6811\u5efa\u51fa\u6765\uff0c\u5bf9\u70b9\u5206\u6811\u4e0a\u6bcf\u4e2a\u70b9\u4e0a\u4e00\u68f5\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u5185\u7684\u70b9\u7684\u4e2a\u6570\u548c\u6240\u6709\u70b9\u5230\u8fbe\u8fd9\u4e2a\u70b9\u5206\u4e2d\u5fc3\u7684\u8ddd\u79bb\u548c\u3002\u8003\u8651\u4e00\u6b21\u8be2\u95ee\uff0c\u5bf9\u4e8e\u8be2\u95ee\u70b9\u5411\u4e0a\u8df3\uff0c\u7528\u9664\u5f00\u8fd9\u4e2a\u5b50\u6811\u7684\u8ddd\u79bb\u548c\u52a0\u4e0a\u8fd9\u4e2a\u70b9\u5230\u70b9\u5206\u4e2d\u5fc3\u7684\u8ddd\u79bb\u4e58\u4e0a\u9664\u5f00\u8fd9\u4e2a\u5b50\u6811\u7684\u70b9\u7684\u4e2a\u6570\u5373\u53ef\u3002\n\n\u8003\u8651\u8fd9\u6837\u6574\u7684\u590d\u6742\u5ea6\uff0c\u65f6\u95f4 $O(n\\log^2 n)$ \u7a7a\u95f4 $O(n\\log^2 n)$\u3002\u5148\u4e0d\u8bf4\u65f6\u95f4\uff0c\u52a8\u6001\u5f00\u70b9\u5fc5\u987b\u5bf9\u6240\u6709\u70b9\u5b58\u5de6\u53f3\u513f\u5b50\uff0c\u540c\u65f6\u5f97\u5b58\u533a\u95f4\u5185\u70b9\u4e2a\u6570\u548c\u8ddd\u79bb\u7684\u548c\uff0c\u9700\u8981 `200000 * 4 * 20 * 20` \u4e2a\u53d8\u91cf\uff08\u5176\u4e2d\u8fd8\u6709\u4e24\u4e2a\u5f97\u5f00 `long long`\uff09\u76f4\u63a5\u5c31\u7206\u70b8\u4e86\u3002\n\n\u53ef\u4ee5\u628a\u8fd9\u4e2a\u4e1c\u897f\u62ff\u5230 `splay` \u4e0a\u6574\u3002\u7a7a\u95f4~~\u5927\u6982~~\u80fd\u5f00\u4e0b\u4e86\uff0c\u5e38\u6570\u5f88\u5927\uff08\u611f\u89c9\u4e0a\u90fd\u8fc7\u4e0d\u53bb\uff09\uff0c\u6bd5\u7adf $O(n\\log n)$ \u90fd\u5f97\u8dd1\u4e00\u70b9\u51e0\u79d2\u3002\n\n\u600e\u4e48\u4f18\u5316\uff1f\u6ce8\u610f\u5230\u8fd9\u4e2a\u4fee\u6539\u64cd\u4f5c\u5f88\u7279\u6b8a\uff0c\u662f\u4ea4\u6362\u4e24\u4e2a\u4f4d\u7f6e\u7684\u503c\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u5efa\u51fa\u70b9\u5206\u6811\u7684\u5f62\u6001\uff0c\u7136\u540e\u4ece $1$ \u5230 $n$ \u52a0\u5165 $p_i$ \u8fd9\u4e2a\u6570\uff0c\u5bf9\u8fb9\u5206\u6811\u4e0a\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u5b50\u6811\u5185\u7684\u70b9\u6570\u548c\u5230\u8fd9\u4e2a\u70b9\u5206\u4e2d\u5fc3\u7684\u8ddd\u79bb\u548c\uff0c\u52a0\u5165\u7684\u65f6\u5019\u53ef\u6301\u4e45\u5316\u4e00\u4e0b\u3002\u4e8e\u662f\u8be2\u95ee\u5c31\u662f\u8be2\u95ee\u4e00\u4e0b $r$ \u8fd9\u4e2a\u6811\u4e0a $x$ \u7684\u8d21\u732e\u51cf\u53bb $l-1$ \u8fd9\u4e2a\u6811\u4e0a $x$ \u7684\u8d21\u732e\u3002\u8fd9\u6837\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\uff0c\u663e\u7136\u4ece $x$ \u5230 $n$ \u4ee5\u53ca $1$ \u5230 $x-1$ \u7684\u8fb9\u5206\u6811\u5728\u4fee\u6539\u524d\u540e\u6ca1\u6709\u533a\u522b\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ea\u9700\u8981\u4fee\u6539 $x$ \u8fd9\u4e2a\u4f4d\u7f6e\u7684\u8fb9\u5206\u6811\uff0c\u53ea\u9700\u8981\u628a $x$ \u7684\u8fb9\u5206\u6811\u53d8\u6210 $x-1$ \u7684\u8fb9\u5206\u6811\u63d2\u5165 $p_{x+1}$ \u5373\u53ef\u3002\n\n\u8003\u8651\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O((n + q)\\log n)$ \u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f $O((n + q)\\log n)$ \u3002\n\n\u4ee3\u7801\u5f88\u597d\u5199\u3002\u3002\n\n```cpp\n#define P 998244353\nint N , n , m;\nint p[MAXN];\n\nvector<pii> G[MAXN];\nint head[MAXN] , to[MAXN << 1] , nex[MAXN << 1] , wto[MAXN << 1] , ecn = -1;\nvoid ade( int u , int v , int w ) {\n//\tprintf(\"%d %d %d\\n\",u,v,w);\n\tto[++ ecn] = v , nex[ecn] = head[u] , head[u] = ecn , wto[ecn] = w;\n\tto[++ ecn] = u , nex[ecn] = head[v] , head[v] = ecn , wto[ecn] = w;\n}\nvoid rebuild( int u , int f ) {\n\tint las = -1;\n\tfor( auto& t : G[u] ) if( t.fi != f ) {\n\t\tif( las == -1 ) ade( u , t.fi , t.se ) , las = u;\n\t\telse {\n\t\t\t++ n;\n\t\t\tade( las , n , 0 ) , ade( n , t.fi , t.se );\n\t\t\tlas = n;\n\t\t}\n\t\trebuild( t.fi , u );\n\t}\n}\n\nint siz[MAXN] , vis[MAXN] , mx , E , rt;\nvoid getsz( int u , int f ) {\n\tsiz[u] = 1;\n\tfor( int i = head[u] ; ~i ; i = nex[i] ) {\n\t\tint v = to[i];\n\t\tif( v == f || vis[i >> 1] ) continue;\n\t\tgetsz( v , u );\n\t\tsiz[u] += siz[v];\n\t}\n}\nvoid getedge( int u , int f ) {\n\tfor( int i = head[u] ; ~i ; i = nex[i] ) {\n\t\tint v = to[i];\n\t\tif( v == f || vis[i >> 1] ) continue;\n\t\tif( E == -1 || max( siz[v] , siz[rt] - siz[v] ) < mx ) mx = max( siz[v] , siz[rt] - siz[v] ) , E = i >> 1;\n\t\tgetedge( v , u );\n\t}\n}\nint getit( int u ) {\n\tE = mx = -1 , rt = u;\n\tgetsz( u , u );\n\tgetedge( u , u );\n\treturn E;\n}\n\nint aw , fk , dd;\nint ch[MAXN * 26][2] , cn[MAXN * 26] , idx;\nll val[MAXN * 26];\nint wi[MAXN][22] , mxd[MAXN];\nll dis[MAXN][22];\n\nvoid dfs( int u , int f , ll ds ) {\n\tif( u <= N )\n\t\twi[u][dd] = aw , dis[u][dd] = ds , mxd[u] = max( dd , mxd[u] );\n\tfor( int i = head[u] ; ~i ; i = nex[i] ) {\n\t\tif( to[i] == f || vis[i >> 1] ) continue;\n\t\tdfs( to[i] , u , ds + wto[i] );\n\t}\n}\n\nvoid divide( int e , int &r ) {\n\t++ dd;\n\tr = ++ idx;\n\tvis[e] = 1;\n\tint u = to[e << 1] , v = to[e << 1 | 1];\n\tfk = e;\n\taw = 0 , dfs( u , 0 , 0 );\n\taw = 1 , dfs( v , 0 , wto[e << 1] );\n\tu = getit( u ) , v = getit( v );\n\tif( ~u ) divide( u , ch[r][0] );\n\tif( ~v ) divide( v , ch[r][1] );\n\t-- dd;\n}\n\nint Rt[MAXN];\nvoid ins( int &r , int old , int x , int dep ) {\n\tr = ++ idx;\n\tch[r][0] = ch[old][0] , ch[r][1] = ch[old][1];\n\tval[r] = val[old] + dis[x][dep - 1] , cn[r] = cn[old] + ( dep > 1 );\n\tif( dep == mxd[x] + 1 ) return;\n\tins( ch[r][wi[x][dep]] , ch[old][wi[x][dep]] , x , dep + 1 );\n}\nll que( int r , int x , int dep ) {\n\tif( !r || dep == mxd[x] + 1 ) return 0;\n\tint w = wi[x][dep];\n\treturn dis[x][dep] * cn[ch[r][w ^ 1]] + val[ch[r][w ^ 1]] + que( ch[r][w] , x , dep + 1 );\n}\n\nll lastans = 0;\nvoid lsj( int& x ) {\n\tx = ( lastans % ( 1 << 30 ) ) ^ x;\n}\n\nvoid solve() {\n\tcin >> n >> m; N = n;\n\trep( i , 1 , n ) scanf(\"%d\",p + i);\n\trep( i , 2 , n ) {\n\t\tstatic int u , v , w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tG[u].eb( mp( v , w ) ) , G[v].eb( mp( u , w ) );\n\t}\n\tmemset( head , -1 , sizeof head );\n\trebuild( 1 , 1 );\n\tdivide( getit( 1 ) , Rt[0] );\n\trep( i , 1 , n ) ins( Rt[i] , Rt[i - 1] , p[i] , 1 );\n\trep( i , 1 , m ) {\n\t\tstatic int op , l , r , x;\n\t\tscanf(\"%d\",&op);\n\t\tif( op == 1 ) {\n\t\t\tscanf(\"%d%d%d\",&l,&r,&x);\n\t\t\tlsj( l ) , lsj( r ) , lsj( x );\n\t\t\tprintf(\"%lld\\n\",lastans = que( Rt[r] , x , 1 ) - que( Rt[l - 1] , x , 1 ) );\n\t\t} else {\n\t\t\tscanf(\"%d\",&x);\n\t\t\tlsj( x );\n\t\t\tswap( p[x] , p[x + 1] );\n\t\t\tins( Rt[x] , Rt[x - 1] , p[x] , 1 );\n\t\t}\n\t}\n}\n\nsigned main() {\n//\tfreopen(\"input\",\"r\",stdin);\n//    freopen(\"input\",\"r\",stdin);\n//    freopen(\"fuckout\",\"w\",stdout);\n//    int T;cin >> T;while( T-- ) solve();\n\tsolve();\n}\n\n```\n\n\n\n",
        "postTime": 1592818187,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF757G \u3010Can Bash Save the Day?\u3011"
    },
    {
        "content": "\u6309\u7167\u60ef\u4f8b\uff1a\n[\u6b22\u8fce\u6765\u6211\u7684blog\u901b\u901b~](https://blog.csdn.net/Dream_Lolita/article/details/86684244)\n\n\u9996\u5148\u8003\u8651\u6ca1\u6709\u4fee\u6539\u600e\u4e48\u505a\u3002\n\n\u8fd9\u5c31\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u52a8\u6001\u70b9\u5206\u6cbb\u9898\uff08HNOI2015\u5f00\u5e97\uff09\uff0c\u6211\u4eec\u5c06\u6bcf\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u5185\u5b58\u7684\u4fe1\u606f\u6309\u6392\u5217\u6392\u5e8f\uff0c\u90a3\u4e48\u6bcf\u6b21\u8be2\u95ee\u5c31\u662f\u4e00\u4e2a\u524d\u7f00\u7684\u5dee\u5206\u3002\n\n\u73b0\u5728\u6709\u4fee\u6539\uff0c\u89c2\u5bdf\u5230\u4fee\u6539\u4f1a\u5f71\u54cd\u5230\u70b9\u5206\u6811\u4e00\u6761\u94fe\u4e0a\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5$\\text{YY}$\u4e00\u4e2a\u53ef\u6301\u4e45\u5316\u70b9\u5206\u6811\u51fa\u6765\uff1a\u5373\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u524d\u7f00\u7ef4\u62a4\u4e00\u68f5\u70b9\u5206\u6811\u3002\n\n\u4e8e\u662f\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fee\u6539\u7b2c$x$\u68f5\u70b9\u5206\u6811\u7684\u4fe1\u606f\u5373\u53ef\u3002\n\n\u4f46\u662f\u70b9\u5206\u6811\u7684\u53ef\u6301\u4e45\u5316\u6709\u4e00\u4e2a\u5f88\u4e0d\u597d\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u6301\u4e45\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u9700\u8981\u4fdd\u5b58\u8fd9\u4e2a\u70b9\u6240\u6709\u513f\u5b50\u7684\u4fe1\u606f\uff0c\u663e\u7136\u8fd9\u4e2a\u53ef\u80fd\u662f$O(n)$\u7ea7\u522b\u7684\u3002\u600e\u4e48\u529e\uff1f\u91cd\u6784\u5457\uff01\n\n\u6211\u4eec\u76f4\u63a5\u6309\u8fb9\u5206\u6cbb\u91cd\u6784\u6811\u7684\u65b9\u6cd5\uff0c\u5c06\u539f\u6811\u91cd\u6784\u6210\u4e00\u68f5\u4e8c\u53c9\u6811\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u6ce8\u610f\u7684\u662f\u70b9\u5206\u6811\u4ecd\u6709\u53ef\u80fd\u6709\u4e09\u4e2a\u513f\u5b50\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u80fd\u9700\u8981$O(1)\\text{LCA}$\u4e4b\u7c7b\u7684\u4e1c\u897f\u4e86\u3002\n\n~~\u611f\u89c9\u4e0d\u592a\u53ef\u80fd\u628a\u70b9\u5206\u6811\u91cd\u6784\u4e86\u5427\uff1f~~\n\n\u8fd9\u6837\u65f6\u7a7a\u590d\u6742\u5ea6\u662f$O(n\\log n)$\u7684\u3002\t\n\n\u3010\u53c2\u8003\u4ee3\u7801\u3011\n```cpp\n#include<bits/stdc++.h>\n#define pb push_back\nusing namespace std;\n\ntypedef long long ll;\nconst int N=4e5+10,msk=(1<<30)-1;\nint n,m,cnt;\n\nnamespace IO\n{\n\tint read()\n\t{\n\t\tint ret=0;char c=getchar();\n\t\twhile(!isdigit(c)) c=getchar();\n\t\twhile(isdigit(c)) ret=ret*10+(c^48),c=getchar();\n\t\treturn ret;\n\t}\n\tvoid write(ll x){if(x>9)write(x/10);putchar(x%10^48);}\n\tvoid writeln(ll x){write(x);putchar('\\n');}\n}\nusing namespace IO;\n\nnamespace Graph\n{\n\tint dtsz,ind,sum,root;\n\tint mx[N],siz[N];\n\tint du[N],dp[N],vis[N],pos[N],rt[N],Log[N<<1],fc[22];\n\tll mi[20][N<<1],dis[N];\n\tvector<int>st[N];\n\tstruct Tway\n\t{\n\t\tint v,w,nex;\n\t\tTway(int _v=0,int _w=0,int _nex=0):v(_v),w(_w),nex(_nex){}\t\n\t};\n\tstruct Tree\n\t{\n\t\tTway e[N<<1];int tot,head[N];\n\t\tvoid add(int u,int v,int w)\n\t\t{\n\t\t\te[++tot]=Tway(v,w,head[u]);head[u]=tot;\n\t\t\te[++tot]=Tway(u,w,head[v]);head[v]=tot;\n\t\t}\n\t}T1,T2;\n\tstruct DT\n\t{\n\t\tll s1,s2;\n\t\tint ch[3],sz,id;\n\t}tr[N*30];\n\n\tvoid dfs1(int x,int f)\n\t{\n\t\tint tmp=0,las=0;\n\t\tfor(int i=T1.head[x];i;i=T1.e[i].nex)\n\t\t{\n\t\t\tint v=T1.e[i].v,w=T1.e[i].w;\n\t\t\tif(v==f) continue; ++tmp;\n\t\t\tif(tmp==1) T2.add(x,v,w),las=x;\n\t\t\telse if(tmp==du[x]-(x!=1)) T2.add(las,v,w);\n\t\t\telse ++cnt,T2.add(las,cnt,0),T2.add(cnt,v,w),las=cnt;\n\t\t}\n\t\tfor(int i=T1.head[x];i;i=T1.e[i].nex) \n\t\t{\n\t\t\tint v=T1.e[i].v;\n\t\t\tif(v!=f) dfs1(v,x);\n\t\t}\n\t}\n\tvoid dfs2(int x,int f)\n\t{\n\t\tpos[x]=++ind;mi[0][ind]=dis[x];\n\t\tfor(int i=T2.head[x];i;i=T2.e[i].nex)\n\t\t{\n\t\t\tint v=T2.e[i].v,w=T2.e[i].w;\n\t\t\tif(v==f) continue;\n\t\t\tdis[v]=dis[x]+w;dfs2(v,x);mi[0][++ind]=dis[x];\n\t\t}\n\t}\n\tll lca(int x,int y)\n\t{\n\t\tx=pos[x];y=pos[y];\n\t\tif(x>y) swap(x,y);\n\t\tint t=Log[y-x+1];\n\t\treturn min(mi[t][x],mi[t][y-fc[t]+1]);\n\t}\n\tll getdis(int x,int y){return dis[x]+dis[y]-lca(x,y)*2;}\n\tvoid initlca()\n\t{\n\t\tfor(int i=2;i<N*2;++i) Log[i]=Log[i>>1]+1;\n\t\tfc[0]=1;for(int i=1;i<20;++i) fc[i]=fc[i-1]<<1;\n\t\tfor(int j=1;j<20;++j) for(int i=1;i+fc[j]-1<=ind;++i)\n\t\t\tmi[j][i]=min(mi[j-1][i],mi[j-1][i+fc[j-1]]);\n\t}\n\tvoid getroot(int x,int f)\n\t{\n\t\tsiz[x]=1;mx[x]=0;\n\t\tfor(int i=T2.head[x];i;i=T2.e[i].nex)\n\t\t{\n\t\t\tint v=T2.e[i].v;\n\t\t\tif(vis[v] || v==f) continue;\n\t\t\tgetroot(v,x);siz[x]+=siz[v];mx[x]=max(mx[x],siz[v]);\n\t\t}\n\t\tmx[x]=max(mx[x],sum-siz[x]);\n\t\tif(mx[x]<mx[root]) root=x;\n\t}\n\tvoid solve(int x)\n\t{\n\t\tvis[x]=1;tr[x].id=x;\n\t\tfor(int i=T2.head[x];i;i=T2.e[i].nex)\n\t\t{\n\t\t\tint v=T2.e[i].v;\n\t\t\tif(vis[v]) continue;\n\t\t\tsum=siz[v];root=0;getroot(v,x);dp[root]=dp[x]+1;\n\t\t\tfor(int j=0;j<dp[x];++j) st[root].pb(st[x][j]);\n\t\t\tfor(int j=0;j<3;++j) if(!tr[x].ch[j])\n\t\t\t{\n\t\t\t\ttr[x].ch[j]=root;st[root].pb(j);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsolve(root);\n\t\t}\n\t}\n\tvoid insert(int x,int &y,int a,int b,int f)\n\t{\n\t\ty=++dtsz;int z=tr[x].id;\n\t\t//printf(\"%d %d %d %d %d %d\\n\",x,y,z,a,b,f);\n\t\tmemcpy(tr[y].ch,tr[x].ch,sizeof(tr[x].ch));tr[y].id=z;\n\t\ttr[y].sz=tr[x].sz+b;tr[y].s1=tr[x].s1+getdis(z,a)*b;tr[y].s2=tr[x].s2;\n\t\tif(f) tr[y].s2+=getdis(tr[f].id,a)*b;\n\t\tif(tr[y].id==a) return;\n\t\tinsert(tr[x].ch[st[a][dp[z]]],tr[y].ch[st[a][dp[z]]],a,b,y);\n\t}\n\tll query(int x,int y)\n\t{\n\t\tll res=0;\n\t\tfor(int i=0;i<dp[y];++i)\n\t\t{\n\t\t\tint u=tr[x].ch[st[y][i]];\n\t\t\tres+=(tr[x].sz-tr[u].sz)*getdis(tr[x].id,y)+(tr[x].s1-tr[u].s2);\n\t\t\tx=u;\n\t\t}\n\t\treturn res+tr[x].s1;\n\t}\n}\nusing namespace Graph;\n\nnamespace DreamLolita\n{\n\tint p[N];\n\tll ans;\n\tvoid solve()\n\t{\n\t\tcnt=n=read();m=read();\n\t\tfor(int i=1;i<=n;++i) p[i]=read();\n\t\tfor(int i=1;i<n;++i) \n\t\t{\n\t\t\tint u=read(),v=read(),w=read();\n\t\t\t++du[u];++du[v];T1.add(u,v,w);\n\t\t}\n\t\tdfs1(1,0);dfs2(1,0);initlca();\n\t\tmx[0]=sum=cnt;getroot(1,0);rt[0]=root;Graph::solve(root);\n\t\tdtsz=cnt;for(int i=1;i<=n;++i) insert(rt[i-1],rt[i],p[i],1,0);\n\n\t\twhile(m--)\n\t\t{\n\t\t\tif(read()&1)\n\t\t\t{\n\t\t\t\tint l=read()^ans,r=read()^ans,v=read()^ans;\n\t\t\t\tans=query(rt[r],v)-query(rt[l-1],v);\n\t\t\t\twriteln(ans);ans&=msk;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint x=read()^ans;\n\t\t\t\tinsert(rt[x-1],rt[x],p[x],0,0);swap(p[x],p[x+1]);insert(rt[x],rt[x],p[x],1,0);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"CF757G.in\",\"r\",stdin);\n\tfreopen(\"CF757G.out\",\"w\",stdout);\n#endif\n\tDreamLolita::solve();\n\treturn 0;\n}\n```",
        "postTime": 1548690018,
        "uid": 15438,
        "name": "Durant_Lee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF757G \u3010Can Bash Save the Day?\u3011"
    },
    {
        "content": "## \u52a8\u6001\u70b9\u5206\u6cbb+vector+\u4e8c\u5206\n#### \u6216\u8bb8\u5e38\u6570\u6bd4\u8f83\u5927\uff0c\u4f46\u5e94\u8be5\u6bd4\u8f83\u597d\u5199\n\u770b\u5230\u5927\u5bb6\u90fd\u7528\u4e3b\u5e2d\u6811\uff0c\u53ef\u662f\u6211\u5e76\u4e0d\u60f3\u5199\uff0c\u4e8e\u662fyy\u4e86\u4e00\u4e2a\u5e38\u6570\u6781\u5927\u7684\u505a\u6cd5\uff0c\u6ca1\u60f3\u5230\u8fc7\u4e86~~\u76ee\u524d\u5168\u8c37\u5012\u6570\u7b2c\u4e00~~\uff0c\u4e8e\u662f\u5206\u4eab\u51fa\u6765\n\n------------\n#### \u8003\u8651\u6ca1\u6709$[l,r]$\u4e14\u65e0\u4fee\u6539\u600e\u4e48\u529e\n\n\u9996\u5148\u770b\u5230\u8fd9\u79cd\u67e5\u8be2\u70b9\u4e4b\u95f4\u8ddd\u79bb\u7684\u9898\u8003\u8651\u70b9\u5206\u6cbb\n\n\u70b9\u5206\u6cbb\u7ef4\u62a4\u6bcf\u4e2a\u70b9$x$\u6240\u5728\u7684\u70b9\u5206\u6811\u91cc\u6240\u6709\u70b9\u5230\u5b83\u7684\u8ddd\u79bb\u4e4b\u548c$tot1[x]$,\u5230\u5b83\u7236\u4eb2\u7684\u8ddd\u79bb\u4e4b\u548c$tot2[x]$\u4ee5\u53ca\u70b9\u7684\u6570\u91cf$size[x]$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2$x$\uff0c\u8bbe$dis(x,y)$\u4e3ax\u4e0ey\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c$f[x][i]$\u4e3a$x$\u5728\u70b9\u5206\u6811\u4e0a\u7684\u7b2c$k$\u7ea7\u7956\u5148\uff0c\u7b54\u6848\u5c31\u662f$tot1[x]+\\sum_{i=1} tot1[f[x][i]]-tot2[f[x][i-1]]+(size[f[x][i]]-size[f[x][i-1]])*dis(x,f[x][i])$\n\n$f[x][i]$\u53ef\u4ee5\u5728\u70b9\u5206\u6cbb\u4e2ddfs\u9884\u5904\u7406\uff0c\u8fd9\u91cc\u8bf4\u4e00\u70b9\u4e0d\u77e5\u9053\u7b97\u4e0d\u7b97\u4f18\u5316\u4f46\u80af\u5b9a\u597d\u5199\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u5728\u9884\u5904\u7406$f[x][i]$\u7684\u65f6\u5019\u540c\u65f6\u628a$x$\u5230$f[x][i]$\u7684\u8ddd\u79bb$d[x][i]$\u5904\u7406\u51fa\u6765\uff0c\u5c31\u4e0d\u9700\u8981$O(1)$\u6c42$dis(x,y)$\u4e86\u3002\n\n------------\n#### \u8003\u8651\u52a0\u5165\u4e86$[l,r]$\u7684\u9650\u5236\u4f46\u4ecd\u65e0\u4fee\u6539\u600e\u4e48\u529e\n\n\u8ba9\u4e0a\u6587\u7684$tot1,tot2,size$\u90fd\u53ef\u4ee5\u5bf9\u4e8e\u70b9\u6743\u533a\u95f4\u6c42\u548c\u5c31\u53ef\u4ee5\u4e86\uff0c\u5176\u4ed6\u9898\u89e3\u8bf4\u5e73\u8861\u6811\u5e38\u6570\u5927\uff0c\u4e3b\u5e2d\u6811\u7a7a\u95f4\u5927\uff0c\u90fd\u8fc7\u4e0d\u53bb\uff0c\u8fd9\u8bdd\u6ca1\u9519~~\u867d\u7136\u6211\u6ca1\u8bd5~~\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\n\n## \u6211\u4eec\u7528\u522b\u7684STL\u4e0d\u5c31\u597d\u4e86\u5417\n\n\u8003\u8651\u4f7f\u7528\u5bf9\u6bcf\u4e2a\u70b9\u4f7f\u7528$vector$\u7ef4\u62a4\u5b83\u5b50\u6811\u4e2d\u6bcf\u4e2a\u70b9\u7684\u4e09\u4e2a$pair$\uff0c$first$\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7\uff0c$second$\u5728$tot1,tot2$\u4e2d\u8868\u793a\u8fd9\u4e2a\u70b9\u5230\u5b83\u7684\u8ddd\u79bb\uff0c\u5728$size$\u4e2d\u76f4\u63a5\u8bbe$1$\u5c31\u53ef\u4ee5\u4e86\uff0c\u7136\u540e\u5bf9\u4e09\u4e2a$vector$\u8fdb\u884c$sort$\u6392\u5e8f\uff0c\u7136\u540e\u5728$second$\u6c42\u524d\u7f00\u548c\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u67e5\u8be2\u65f6\u7528\u4e8c\u5206\u8fbe\u5230\u533a\u95f4\u6c42\u548c\u7684\u6548\u679c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n#### \u4e8c\u5206\uff1a\n```cpp\ninline int erfen(const vector<pair<int,long long> > &x,int k)\n{\n\tif(x[x.size()-1].first<=k)return x.size();\n\tint l=0,r=x.size()-1,mid;\n\twhile(l<r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif(x[mid].first>k)r=mid;\n\t\telse l=mid+1;\n\t}\n\treturn l;\n}\n```\n#### \u533a\u95f4\u6c42\u548c\n```cpp\ninline long long ask(const vector<pair<int,long long> >&x,int l,int r)\n{\n\tint fr=erfen(x,r),fl=erfen(x,l-1);\n\tif(!fr)return 0;\n\tfr--;\n\tif(!fl)return x[fr].second;\n\tfl--;\n\treturn x[fr].second-x[fl].second;\n}\n```\n\n------------\n\u73b0\u5728\u6211\u4eec\u5230\u4e86\u6700\u540e\u7684\u96be\u5173\uff08\u5176\u5b9e\u5f53\u4f60\u4f7f\u7528$vector$\u7684\u65f6\u5019\u5b83\u5c31\u5df2\u7ecf\u4e0d\u662f\u96be\u5173\u4e86\uff09\n\n#### \u52a0\u5165\u4fee\u6539\n\n\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u4fee\u6539\u53ea\u4f1a\u5c06\u6392\u5217\u4e2d\u4e24\u4e2a\u76f8\u90bb\u7684\u6570\uff08\u5047\u8bbe\u662f$(x,y)$\uff09\u4e92\u6362\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fee\u6539\u8fd9\u4e24\u4e2a\u70b9\u5728\u70b9\u5206\u6811\u4e0a\u7684\u7956\u5148\uff0c\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u5904\u7406\uff0c\u5206\u522b\u662f\u540c\u65f6\u662f$x$\u548c$y$\u7684\u7956\u5148\u548c\u53ea\u662f\u4e00\u4e2a\u7684\u7956\u5148\u3002\n\n\u5148\u8003\u8651\u6bd4\u8f83\u7b80\u5355\u7684\u53ea\u662f\u4e00\u4e2a\u70b9\u7684\u7956\u5148\u7684\u60c5\u51b5(\u5047\u8bbe\u4e3a$x$)\uff0c\u90a3\u4e48\u6211\u4eec\u4e8c\u5206\u627e\u5230\u8fd9\u4e2a\u70b9\u5728\u5b83\u7684\u7956\u5148\u7684$vector$\u4e2d\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u53d1\u73b0$tot1,tot2,size$\u8fd9\u4e09\u4e2a\u503c\u90fd\u4e0d\u9700\u8981\u53d8\uff0c\u53ea\u9700\u8981\u5c06\u8fd9\u4e9b$pair$\u7684$first$\u52a0\u4e0a1\u5c31\u53ef\u4ee5\u4e86\uff08\u5bf9\u4e8e$y$\u662f\u51cf$1$),\u601d\u8003\u8fd9\u6837\u505a\u7684\u6b63\u786e\u6027\uff0c\u6211\u4eec\u662f\u628a$x$\u53d8\u6210$y$\uff08\u6216\u76f8\u53cd\uff09\uff0c\u90a3\u4e48\u5b83\u7684\u524d\u7f00\u548c\u5e94\u8be5\u6bd4\u539f\u6765\u5927$(x,y]$(\u6216$(y,x]$)\u5bf9\u5e94\u7684\u6570\uff0c\u4f46\u662f\u5b83\u4eec\u4e0d\u5b58\u5728\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u6539\u7f16\u53f7\uff0c$y$\u4e5f\u540c\u7406\u3002\n\n\u63a5\u4e0b\u6765\u5bf9\u4e8e$(x,y)$\u540c\u65f6\u5b58\u5728\u7684\u7956\u5148\uff0c\u6211\u4eec\u53d1\u73b0$y$\u5bf9\u5e94\u7684\u70b9\u662f\u4e0d\u7528\u53d8\u7684\uff08\u5c31\u4e0d\u8bc1\u4e86\uff09\uff0c\u5bf9\u4e8e$x$\u7684$first$\u53ca$size$\u4e5f\u4e0d\u7528\u53d8\uff0c\u5b83\u7684$tot1,tot2$\u5219\u53d8\u4e3a$y$\u7684$tot1,tot2$\u51cf\u53bb$y$\u5230\u8fd9\u4e2a\u7956\u5148\u7684\u8ddd\u79bb\uff0c\u5373$f[y][i]$\u548c$f[y][i+1]$\uff08\u6ce8\u610f\u8fd9\u4e24\u4e2a\u4e0d\u4e00\u6837\uff09\n\n### \u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u8fd9\u9053\u9898\uff0c\u6492\u82b1\n\n#### \u7b49\u7b49\uff0c\u8fd8\u6709\u4e00\u4e9b\u5361\u5e38\u7684\u7ec6\u8282\u3002\n\n\u6bd4\u5982\u6211\u4eec\u6b63\u5e38\u6c42$f[x][i]$\u987a\u5e8f\u662f\u53cd\u7684\uff0c\u4e00\u822c\u4f1a$reverse$\u4e00\u6ce2\uff0c\u4f46\u662f\u53ef\u4ee5\u4e0d$reverse$\uff0c\u5faa\u73af\u5012\u7740\u679a\u4e3e\u3002\n\n\u6bd4\u5982\u6211\u4eec\u53d1\u73b0$size$\u548c$tot1$\u5bf9\u5e94\u7684\u70b9\u662f\u76f8\u540c\u7684\uff0c\u6211\u4eec\u8c03\u6574\u4e00\u4e0b\u8ba9\u641c\u7d22\u7684\u987a\u5e8f\u4e5f\u76f8\u540c\uff0c\u8fd9\u6837$size$\u5bf9\u5e94\u7684\u70b9\u7f16\u53f7\u5927\u5c0f\u987a\u5e8f\u5c31\u53ef\u4ee5\u76f4\u63a5\u5957\u7528\u5728$tot1$\u4e0a\u4e86\uff08\u540c\u7406\uff0c\u4e8c\u5206\u67e5\u627e\u65f6\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u505a\uff09\uff0c\u5177\u4f53\u770b\u6211\u4ee3\u7801\u5427\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<vector>\n#include<cstdlib>\n#include<ctime>\n#include<queue>\n#define mp make_pair\nusing namespace std;\nint A,n,m,p,h[200001],rt,now,maxsz[200001],sz[200001],vis[200001],id[200001],c[200001];\nlong long ans;\nstruct line\n{\n\tint to,ne,v;\n}a[400001];\ninline void add(int x,int y,int z)\n{\n\ta[++p].to=y;\n\ta[p].ne=h[x];\n\ta[p].v=z;\n\th[x]=p;\n}\nvoid findrt(int x,int fa,int tot)\n{\n\tsz[x]=1;\n\tmaxsz[x]=0;\n\tfor(int i=h[x];i;i=a[i].ne)\n\t{\n\t\tif(vis[a[i].to]||a[i].to==fa)continue;\n\t\tfindrt(a[i].to,x,tot);\n\t\tsz[x]+=sz[a[i].to];\n\t\tmaxsz[x]=max(maxsz[x],sz[a[i].to]);\n\t}\n\tmaxsz[x]=max(maxsz[x],tot-sz[x]);\n\tif(maxsz[x]<maxsz[now])now=x;\n}\nvector<int>f[200001];\nvector<long long>d[200001];\nvector<pair<int,long long> >tot1[200001],tot2[200001];\nvector<pair<int,int> >Size[200001];\npair<int,long long>g[200001];\npair<int,int>gg[200001];\nvoid work(int x,int fa,int rt)\n{\n\tSize[rt].push_back(mp(id[x],1));\n\tsz[x]=1;\n\tfor(int i=h[x];i;i=a[i].ne)\n\t{\n\t\tif(vis[a[i].to]||a[i].to==fa)continue;\n\t\twork(a[i].to,x,rt);\n\t\tsz[x]+=sz[a[i].to];\n\t}\n}\nvoid gx(int x,int fa,int now,int rt,long long dep)\n{\n\td[x].push_back(dep);\n\tf[x].push_back(rt);\n\ttot2[now].push_back(mp(id[x],dep));\n\ttot1[rt].push_back(mp(id[x],dep));\n\tfor(int i=h[x];i;i=a[i].ne)\n\t{\n\t\tif(vis[a[i].to]||a[i].to==fa)continue;\n\t\tgx(a[i].to,x,now,rt,dep+a[i].v);\n\t}\n}\nbool cmp(int a,int b)\n{\n\treturn Size[now][a].first<Size[now][b].first;\n}\nvoid dfs(int x)\n{\n\tvis[x]=1;\n\twork(x,0,x);\n\tf[x].push_back(x);\n\td[x].push_back(0);\n\tint z[Size[x].size()];\n\tfor(int i=0;i<Size[x].size();i++)z[i]=i;\n\tmemcpy (gg, &Size[x][0], sizeof (Size[x][0]) * Size[x].size());\n\tsort(z,z+Size[x].size(),cmp);\n\tfor(int i=0;i<Size[x].size();i++)Size[x][i]=gg[z[i]];\n\tfor(int i=1;i<Size[x].size();i++)Size[x][i].second+=Size[x][i-1].second;\n\ttot1[x].push_back(mp(id[x],0));\n\tfor(int i=h[x];i;i=a[i].ne)\n\t{\n\t\tif(vis[a[i].to])continue;\n\t\tnow=0;\n\t\tfindrt(a[i].to,x,sz[a[i].to]);\n\t\tgx(a[i].to,x,now,x,a[i].v);\n\t\tsort(tot2[now].begin(),tot2[now].end());\n\t\tfor(int j=1;j<tot2[now].size();j++)tot2[now][j].second+=tot2[now][j-1].second;\n\t\tdfs(now);\n\t}\n\tmemcpy (g, &tot1[x][0], sizeof (tot1[x][0]) * tot1[x].size());\n\tfor(int i=0;i<Size[x].size();i++)tot1[x][i]=g[z[i]];\n\tfor(int i=1;i<tot1[x].size();i++)tot1[x][i].second+=tot1[x][i-1].second;\n}\ninline int erfen(const vector<pair<int,long long> > &x,int k)\n{\n\tif(x[x.size()-1].first<=k)return x.size();\n\tint l=0,r=x.size()-1,mid;\n\twhile(l<r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif(x[mid].first>k)r=mid;\n\t\telse l=mid+1;\n\t}\n\treturn l;\n}\ninline long long ask(const vector<pair<int,long long> >&x,int l,int r)\n{\n\tint fr=erfen(x,r),fl=erfen(x,l-1);\n\tif(!fr)return 0;\n\tfr--;\n\tif(!fl)return x[fr].second;\n\tfl--;\n\treturn x[fr].second-x[fl].second;\n}\ninline long long ask(const vector<pair<int,long long> >&x,const vector<pair<int,int> >&y,int l,int r,long long k)\n{\n\tint fr=erfen(x,r),fl=erfen(x,l-1);\n\tif(!fr)return 0;\n\tfr--;\n\tif(!fl)return x[fr].second+k*y[fr].second;\n\tfl--;\n\treturn x[fr].second-x[fl].second+k*(y[fr].second-y[fl].second);\n}\ninline long long ask(int x,int l,int r)\n{\n\tlong long ans=ask(tot1[x],l,r);\n\tfor(int i=f[x].size()-2;~i;i--)\n\t{\n\t\tans+=ask(tot1[f[x][i]],Size[f[x][i]],l,r,d[x][i]);\n\t\tans-=ask(tot2[f[x][i+1]],Size[f[x][i+1]],l,r,d[x][i]);\n\t}\n\treturn ans;\n}\ninline int read()\n{\n\tint x=0;char c=getchar();\n\twhile (c<'0'||c>'9') c=getchar();\n\twhile (c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n\treturn x;\n}\nvoid update(int x,int y)\n{\n\tint fx,fy;\n\tfor(int i=f[y].size()-1;~i;i--)\n\t{\n\t\tfy=erfen(tot1[f[y][i]],id[y]);\n\t\tfy-=2;\n\t\tif((~fy)&&tot1[f[y][i]][fy].first==id[x])break;\n\t\tfy++;\n\t\ttot1[f[y][i]][fy].first--,Size[f[y][i]][fy].first--;\n\t}\n\tfor(int i=f[y].size()-1;i;i--)\n\t{\n\t\tfy=erfen(tot2[f[y][i]],id[y]);\n\t\tfy-=2;\n\t\tif((~fy)&&tot2[f[y][i]][fy].first==id[x])break;\n\t\tfy++;\n\t\ttot2[f[y][i]][fy].first--;\n\t}\n\tfor(int i=f[x].size()-1;~i;i--)\n\t{\n\t\tfx=erfen(tot1[f[x][i]],id[x]);\n\t\tif((fx^tot1[f[x][i]].size())&&tot1[f[x][i]][fx].first==id[y])\n\t\t{\n\t\t\ttot1[f[x][i]][fx-1].second=tot1[f[x][i]][fx].second-d[x][i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfx--;\n\t\t\ttot1[f[x][i]][fx].first++,Size[f[x][i]][fx].first++;\n\t\t}\n\t}\n\tfor(int i=f[x].size()-1;i;i--)\n\t{\n\t\tfx=erfen(tot2[f[x][i]],id[x]);\n\t\tif((fx^tot1[f[x][i]].size())&&tot2[f[x][i]][fx].first==id[y])\n\t\t{\n\t\t\ttot2[f[x][i]][fx-1].second=tot2[f[x][i]][fx].second-d[x][i-1];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfx--;\n\t\t\ttot2[f[x][i]][fx].first++;\n\t\t}\n\t}\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++)c[i]=read(),id[c[i]]=i;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tmaxsz[0]=1e9+10;\n\tfindrt(1,0,n);\n\trt=now;\n\tdfs(now);\n\twhile(m--)\n\t{\n\t\tint mode,x,y,z;\n\t\tscanf(\"%d\",&mode);\n\t\tif(mode==1)\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\t\tx^=ans;\n\t\t\ty^=ans;\n\t\t\tz^=ans;\n\t\t\tans=ask(z,x,y);\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t\tans&=(1<<30)-1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\",&x);\n\t\t\tx^=ans;\n\t\t\tupdate(c[x],c[x+1]);\n\t\t\tid[c[x]]++;\n\t\t\tid[c[x+1]]--;\n\t\t\tswap(c[x],c[x+1]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1619870618,
        "uid": 104963,
        "name": "Gary88",
        "ccfLevel": 9,
        "title": "CF757G Can Bash Save the Day\uff1f\u9898\u89e3"
    },
    {
        "content": "\u770b\u5b8c\u5404\u8def\u795e\u4ed9\u7684\u9898\u89e3\uff0c\u770b\u5230\u4e86\u5f88\u591a\u53ef\u6301\u4e45\u5316\u70b9\u5206\u6811\u7684\u505a\u6cd5\uff0c\u6211\u7a81\u7136\u53d1\u73b0\uff0c\u65e2\u7136\u70b9\u5206\u6811\u8981\u53ef\u6301\u4e45\u5316\u5c31\u5f97\u50cf\u8fb9\u5206\u6cbb\u4e00\u6837\u4e8c\u53c9\u5316\uff0c\u90a3\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5bf9\u8fb9\u5206\u6811\u53ef\u6301\u4e45\u5316\u5462\uff1f\u8fb9\u5206\u6811\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u4e8c\u53c9\u6811\u554a\uff01\n\n\u8fb9\u5206\u6811\u7684\u539f\u7406\u53c2\u89c1\u3010CTSC2018 \u66b4\u529b\u5199\u6302\u3011\u90a3\u9898\u3002\n\n\u8fd9\u4e2a\u505a\u6cd5\u76ee\u524d\u662fCF\u4e0a\u7684\u6b21\u4f18\u89e3\uff08\u6700\u4f18\u89e3\u5f00\u4e86\u4e00\u5806pragma\u4f18\u5316\uff09\n\n```cpp\n#include <bits/stdc++.h>\n#define mset(a, b) memset(a, b, sizeof(a))\n#define mcpy(a, b) memcpy(a, b, sizeof(a))\nusing namespace std;\ntypedef long long LL;\nconst int N = 200005;\nconst int MAXN = 400005;\nconst int MAXM = MAXN * 25;\nconst int MOD = (1 << 30) - 1;\n\ntemplate <typename T> inline void read(T &AKNOI) {\n\tT x = 0, flag = 1;\n\tchar ch = getchar();\n\twhile (!isdigit(ch)) {\n\t\tif (ch == '-') flag = -1;\n\t\tch = getchar();\n\t}\n\twhile (isdigit(ch)) {\n\t\tx = x * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\tAKNOI = flag * x;\n}\n\nint n, m, n2, p[N];\n\nstruct Edge {\n\tint v, w, nxt;\n} e[MAXN << 2];\nint first1[MAXN], first2[MAXN], eCnt;\n\ninline void AddEdge(int *first, int u, int v, int w) {\n\te[++eCnt].v = v;\n\te[eCnt].w = w;\n\te[eCnt].nxt = first[u];\n\tfirst[u] = eCnt;\n}\n\ninline void Add(int *first, int u, int v, int w) {\n\tAddEdge(first, u, v, w);\n\tAddEdge(first, v, u, w);\n}\n\nint vis[MAXN << 1], siz[MAXN], mx, root;\nint dir[N][21], mxd[N];\nLL dis1[N][21], dis2[N][21];\n\nvoid Rebuild(int u, int fa) {\n\tint lst = 0;\n\tfor (int i = first1[u]; i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (v == fa) continue;\n\t\tRebuild(v, u);\n\t\tif (!lst) {\n\t\t\tAdd(first2, u, v, e[i].w);\n\t\t\tlst = u;\n\t\t} else {\n\t\t\tAdd(first2, lst, ++n2, 0);\n\t\t\tAdd(first2, n2, v, e[i].w);\n\t\t\tlst = n2;\n\t\t}\n\t}\n}\n\nvoid GetRoot(int u, int fa, int tsiz) {\n\tsiz[u] = 1;\n\tfor (int i = first2[u]; i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (v == fa || vis[i >> 1]) continue;\n\t\tGetRoot(v, u, tsiz);\n\t\tsiz[u] += siz[v];\n\t\tint cur = max(siz[v], tsiz - siz[v]);\n\t\tif (cur < mx) {\n\t\t\tmx = cur; root = i;\n\t\t}\n\t}\n}\n\nvoid GetDis(int u, int fa, LL d, int dep, int t) {\n\tif (u <= n) {\n\t\tdir[u][dep] = t;\n\t\tdis1[u][dep] = d;\n\t\tdis2[u][dep] = d + e[root].w;\n\t}\n\tfor (int i = first2[u]; i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (v == fa || vis[i >> 1]) continue;\n\t\tGetDis(v, u, d + e[i].w, dep, t);\n\t}\n}\n\nvoid EdgeDC(int u, int tsiz, int dep) {\n\tif (tsiz == 1) {\n\t\tif (u <= n) mxd[u] = dep;\n\t\treturn;\n\t}\n\tmx = n2 + 1;\n\tGetRoot(u, 0, tsiz);\n\tvis[root >> 1] = 1;\n\tint ru = e[root].v, rv = e[root ^ 1].v, tmp = siz[ru];\n\tGetDis(ru, 0, 0, dep, 0);\n\tGetDis(rv, 0, 0, dep, 1);\n\tEdgeDC(ru, tmp, dep + 1);\n\tEdgeDC(rv, tsiz - tmp, dep + 1);\n}\n\nint tot, Root[N], lc[MAXM], rc[MAXM], cnt[MAXM];\nLL sum[MAXM], ans;\n\nvoid Insert(int &rt, int pre, int u, int dep) {\n\trt = ++tot;\n\tcnt[rt] = cnt[pre] + (dep > 0);\n\tsum[rt] = sum[pre] + ((dep > 0)? dis1[u][dep - 1] : 0);\n\tlc[rt] = lc[pre]; rc[rt] = rc[pre];\n\tif (dep == mxd[u]) return;\n\tif (dir[u][dep] == 0) {\n\t\tInsert(lc[rt], lc[pre], u, dep + 1);\n\t} else {\n\t\tInsert(rc[rt], rc[pre], u, dep + 1);\n\t}\n}\n\nLL Query(int rt, int u, int dep) {\n\tif (!rt || dep == mxd[u]) return 0;\n\tif (dir[u][dep] == 0) {\n\t\tLL ret = dis2[u][dep] * cnt[rc[rt]] + sum[rc[rt]];\n\t\treturn ret + Query(lc[rt], u, dep + 1);\n\t} else {\n\t\tLL ret = dis2[u][dep] * cnt[lc[rt]] + sum[lc[rt]];\n\t\treturn ret + Query(rc[rt], u, dep + 1);\n\t}\n}\n\nvoid init() {\n\tread(n); read(m);\n\tfor (int i = 1; i <= n; ++i) {\n\t\tread(p[i]);\n\t}\n\teCnt = 1;\n\tfor (int i = 1, u, v, w; i < n; ++i) {\n\t\tread(u); read(v); read(w);\n\t\tAdd(first1, u, v, w);\n\t}\n}\n\nvoid solve() {\n\tn2 = n;\n\tRebuild(1, 0);\n\tEdgeDC(1, n2, 0);\n\tfor (int i = 1; i <= n; ++i) {\n\t\tInsert(Root[i], Root[i - 1], p[i], 0);\n\t}\n\tint op, l, r, x;\n\twhile (m--) {\n\t\tread(op);\n\t\tif (op == 1) {\n\t\t\tread(l); read(r); read(x);\n\t\t\tl ^= ans; r ^= ans; x ^= ans;\n\t\t\tans = Query(Root[r], x, 0) - Query(Root[l - 1], x, 0);\n\t\t\tprintf(\"%lld\\n\", ans);\n\t\t\tans &= MOD;\n\t\t} else {\n\t\t\tread(x); x ^= ans;\n\t\t\tswap(p[x], p[x + 1]);\n\t\t\tInsert(Root[x], Root[x - 1], p[x], 0);\n\t\t}\n\t}\n}\n\nint main() {\n\tinit();\n\tsolve();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1589241433,
        "uid": 62088,
        "name": "tyler178",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF757G \u3010Can Bash Save the Day?\u3011"
    }
]