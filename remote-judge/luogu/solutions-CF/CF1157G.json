[
    {
        "content": "\u4e00\u9053\u5f88\u6709\u610f\u601d\u7684\u9898\uff0c\u601d\u8def\u6e05\u5947\u53e4\u602a\u3002\n\n\u6211\u7684\u505a\u6cd5\u662f $O(n\\times m)$ \u7684 , \u6bd4\u697c\u4e0a\uff08\u6216\u697c\u4e0b\uff09\u4f18\u79c0 \u3002\n\n\u9996\u5148\u6211\u4eec\u505a\u5b8c\u7684\u77e9\u9635\u4e00\u5b9a\u662f\u8fd9\u6837\u7684\uff1a\n\n```\n0000...000\n0000...000\n.\n.\n.\n0...01...1    0...01...1    0000...000\n1111...111    1111...111    0000...000\n.             .             .\n.             .             .\n.             .             .\n1111...111 \u6216 1111...111 \u6216 0...01...1\n```\n\u8fd9\u662f\u5347\u5e8f\uff0c\u6bcf\u4e00\u884c\u90fd\u53cd\u4e00\u4e0b\u5c31\u662f\u964d\u5e8f \u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u9996\u5c3e\u4e24\u884c\u5fc5\u6709\u4e00\u884c\u5168\u4e3a 1 \u6216 0 \uff0c\u800c\u4e3a\u96f6\u6216\u4e3a\u4e00\u90fd\u65e0\u6240\u8c13\uff0c\u56e0\u4e3a\u884c\u6362\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u4e3a 0\uff0c\u90a3\u4e48\u6211\u4eec\u6c42\u51fa\u5217\u7684\u64cd\u4f5c\u540e\uff0c\u64cd\u4f5c\u4e00\u4e0b\uff0c\u6b64\u65f6\u6bcf\u4e00\u884c\u53ea\u80fd\u4e00\u8d77\u53d8\u6362 \uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5224\u65ad\u4e00\u4e0b\uff1a\u540c\u65f6\u6709 0 \u548c 1 \u7684\u884c\u53ea\u80fd\u6709\u4e00\u884c\uff0c\u5e76\u4e14\u8fd9\u4e00\u884c\u53ea\u80fd\u957f\u8fd9\u6837\uff1a\n\n```\n0...01...1 \u6216 1...10...0\n```\n \u8fd9\u65f6\u5019\u6211\u4eec\u53ea\u8981\u628a\u524d\u9762\u90fd\u4e3a\u4e86 1 \u7684\u64cd\u4f5c\u6210 0\uff0c\u540e\u9762\u4e3a 0 \u7684\u64cd\u4f5c\u6210 1 \u3002\u8fd9\u4e00\u884c\u662f\u7b2c\u4e8c\u79cd\u7684\u53cd\u4e00\u4e0b\u5c31\u597d\u4e86\uff08\u60f3\u964d\u5e8f\u7684\u4e5f\u884c\uff09\u3002\n \n \u4e8e\u662f\u672c\u9898\u5f97\u5230\u4e86\u89e3\u51b3\u3002\n \n \u4ee3\u7801\n \n ```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,a[1000][1000],b[1000][1000],c[1000],bb[1000][1000],cc[1000];\nvoid check1()\n{\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tbb[i][j]^=a[n][j];\n\tint bo=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint t=0;\n\t\tfor(int j=1;j<=m;j++) t+=bb[i][j];\n\t\tif(t!=0&&t!=m) ++bo;\n\t\tcc[i]=t;\n\t}\n\tif(bo>1) return;\n\tif(bo==0)\n\t{\n\t\tputs(\"YES\");\n\t\tfor(int i=1;i<=n;i++) printf(\"%d\",int(cc[i]==m));\n\t\tprintf(\"\\n\");\n\t\tfor(int i=1;i<=m;i++) printf(\"%d\",a[n][i]);\n\t\texit(0);\n\t}\n\tint i,j;\n\tfor(i=1;i<=n;i++) if(cc[i]!=0&&cc[i]!=m) break;\n\tfor(j=2;j<=m;j++) if(bb[i][j]!=bb[i][j-1]) break;\n\tfor(int k=j+1;k<=m;k++)\n\t\tif(bb[i][k]!=bb[i][k-1]) return;\n\tputs(\"YES\");\n\tfor(int k=1;k<i;k++) printf(\"%d\",int(cc[k]==m));\n\tprintf(\"%d\",bb[i][1]);\n\tfor(int k=i+1;k<=n;k++) printf(\"%d\",int(cc[k]==0));\n\tprintf(\"\\n\");\n\tfor(int ii=1;ii<=m;ii++) printf(\"%d\",a[n][ii]);\n\texit(0);\n}\nvoid check2()\n{\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tb[i][j]^=a[1][j];\n\tint bo=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint t=0;\n\t\tfor(int j=1;j<=m;j++) t+=b[i][j];\n\t\tif(t!=0&&t!=m) ++bo;\n\t\tc[i]=t;\n\t}\n\tif(bo>1) return;\n\tif(bo==0)\n\t{\n\t\tputs(\"YES\");\n\t\tfor(int i=1;i<=n;i++) printf(\"%d\",int(c[i]==m));\n\t\tprintf(\"\\n\");\n\t\tfor(int i=1;i<=m;i++) printf(\"%d\",a[1][i]);\n\t\texit(0);\n\t}\n\tint i,j;\n\tfor(i=1;i<=n;i++) if(c[i]!=0&&c[i]!=m) break;\n\tfor(j=2;j<=m;j++) if(b[i][j]!=b[i][j-1]) break;\n\tfor(int k=j+1;k<=m;k++)\n\t\tif(b[i][k]!=b[i][k-1]) return;\n\tputs(\"YES\");\n\tfor(int k=1;k<i;k++) printf(\"%d\",int(c[k]==m));\n\tprintf(\"%d\",b[i][1]);\n\tfor(int k=i+1;k<=n;k++) printf(\"%d\",int(c[k]==0));\n\tprintf(\"\\n\");\n\tfor(int ii=1;ii<=m;ii++) printf(\"%d\",a[1][ii]);\n\texit(0);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++) scanf(\"%d\",&a[i][j]),b[i][j]=bb[i][j]=a[i][j];\n\tcheck1();\n\tcheck2();\n\tputs(\"NO\");\n}\n```\n",
        "postTime": 1600840644,
        "uid": 112921,
        "name": "zhimao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1157G \u3010Inverse of Rows and Columns\u3011"
    },
    {
        "content": "\u8003\u8651\uff1a\u5982\u679c\u7b2c\u4e00\u884c\u5b58\u5728$1$\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u4e00\u6bb5\u540e\u7f00\u5b58\u5728$1$\u3002\u90a3\u4e48\u5408\u6cd5\u7684\u7b2c\u4e00\u884c\u72b6\u6001\u53ea\u6709$M+1$\u79cd\u3002\n\n\u800c\u5982\u679c\u6211\u4eec\u786e\u5b9a\u4e86\u7b2c\u4e00\u884c\u6700\u7ec8\u7684\u72b6\u6001\u548c\u7b2c\u4e00\u884c\u662f\u5426\u7ffb\u8f6c\uff0c\u90a3\u4e48\u4e3a\u4e86\u6ee1\u8db3\u7b2c\u4e00\u884c\u7684\u8981\u6c42\uff0c\u6240\u6709\u5217\u662f\u5426\u7ffb\u8f6c\u5c31\u786e\u5b9a\u4e86\u3002\n\n\u90a3\u4e48\u5728\u5217\u7ffb\u8f6c\u4e4b\u540e\uff0c\u5982\u679c\u7b2c\u4e00\u884c\u5b58\u5728$1$\uff0c\u610f\u5473\u7740$2$\u5230$N$\u884c\u6bcf\u4e00\u884c\u90fd\u662f\u5168$0$\u6216\u5168$1$\uff1b\u5982\u679c\u7b2c\u4e00\u884c\u6ca1\u6709$1$\uff0c\u5219\u81f3\u591a\u5b58\u5728\u4e00\u884c\u7531\u4e00\u6bb5$0$\u548c\u4e00\u6bb5$1$\u6784\u6210\uff0c\u5176\u4f59\u884c\u5168$0$\u6216\u5168$1$\u3002\n\n\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u6a21\u62df\uff0c\u5e76\u5728\u5224\u65ad\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e00\u884c\u3001\u6bcf\u4e00\u5217\u662f\u5426\u7ffb\u8f6c\u5373\u53ef\u3002\u590d\u6742\u5ea6$O(M^2N)$\n\n\u6240\u4ee5\u8fd9\u9053\u9898\u771f\u7684\u67092800 Difficulty\u4e48\uff0c\u8fd8\u662f\u6211\u7684\u7b97\u6cd5\u6709\u8bef\u2026\u2026\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\n\ninline int read(){\n    int a = 0;\n    char c = getchar();\n    while(!isdigit(c)) c = getchar();\n    while(isdigit(c)){\n        a = a * 10 + c - 48;\n        c = getchar();\n    }\n    return a;\n}\n\nint arr[203][203] , rot[203][203] , N , M;\nbool h[203] , l[203];\n\nsigned main(){\n    N = read(); M = read();\n    for(int i = 1 ; i <= N ; ++i)\n        for(int j = 1 ; j <= M ; ++j)\n            arr[i][j] = read();\n    for(int i = 1 ; i <= M ; ++i)\n        for(int j = 0 ; j <= 1 ; ++j){\n            memset(h , 0 , sizeof(h)); memset(l , 0 , sizeof(l));\n            memcpy(rot , arr , sizeof(arr));\n            if(h[1] = j)\n                for(int k = 1 ; k <= M ; ++k)\n                    rot[1][k] ^= 1;\n            for(int k = 1 ; k <= M ; ++k)\n                if((k < M - i + 1 && rot[1][k]) || (k >= M - i + 1 && !rot[1][k])){\n                    l[k] = 1;\n                    for(int j = 1 ; j <= N ; ++j)\n                        rot[j][k] ^= 1;\n                }\n            bool flg = 1;\n            for(int k = 2 ; flg && k <= N ; ++k){\n                h[k] = 1 ^ rot[k][1];\n                for(int l = 2 ; flg && l <= M ; ++l)\n                    flg = rot[k][1] == rot[k][l];\n            }\n            if(flg){\n                puts(\"YES\");\n                for(int i = 1 ; i <= N ; ++i)\n                    putchar('0' + h[i]);\n                putchar('\\n');\n                for(int i = 1 ; i <= M ; ++i)\n                    putchar('0' + l[i]);\n                return 0;\n            }\n        }\n    for(int j = 0 ; j <= 1 ; ++j){\n        memset(h , 0 , sizeof(h)); memset(l , 0 , sizeof(l));\n        memcpy(rot , arr , sizeof(arr));\n        if(h[1] = j)\n            for(int k = 1 ; k <= M ; ++k)\n                rot[1][k] ^= 1;\n        for(int k = 1 ; k <= M ; ++k)\n            if(rot[1][k]){\n                l[k] = 1;\n                for(int j = 1 ; j <= N ; ++j)\n                    rot[j][k] ^= 1;\n            }\n        bool flg = 1 , have = 0;\n        for(int k = 2 ; flg && k <= N ; ++k){\n            bool f = rot[k][1] == rot[k][M];\n            if(!f)\n                if(have) flg = 0;\n                else{\n                    have = 1; h[k] = rot[k][1];\n                    bool cng = 0;\n                    for(int l = 2 ; flg && l < M ; ++l)\n                        if(rot[k][l] != rot[k][cng ? M : 1])\n                            if(cng) flg = 0;\n                            else cng = 1;\n                }\n            else{\n                h[k] = have ^ rot[k][1];\n                for(int j = 2 ; flg && j <= M ; ++j)\n                    if(rot[k][1] != rot[k][j]) flg = 0;\n            }\n        }\n        if(flg){\n            puts(\"YES\");\n            for(int i = 1 ; i <= N ; ++i)\n                putchar('0' + h[i]);\n            putchar('\\n');\n            for(int i = 1 ; i <= M ; ++i)\n                putchar('0' + l[i]);\n            return 0;\n        }\n    }\n    puts(\"NO\");\n    return 0;\n}\n\n```",
        "postTime": 1556362437,
        "uid": 96296,
        "name": "Itst",
        "ccfLevel": 0,
        "title": "CF1157G Inverse of Rows and Columns"
    }
]