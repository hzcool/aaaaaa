[
    {
        "content": "> \u7ed9\u5b9a\u4e00\u4e2a 01 \u6743\u56fe $G$\uff0c\u6c42\u5176\u6700\u5c0f\u5916\u5411\u6811\u5f62\u56fe\u3002\n\n\u8fd9\u9898\u5b8c\u5168\u4e0d\u9700\u8981\u5176\u4ed6\u590d\u6742\u7684\u7b97\u6cd5\u3002\n\n\u8003\u8651\u4e00\u79cd\u751f\u6210\u6811\u7684\u65b9\u6cd5\uff1a\u4ece\u7b2c\u4e00\u4e2a\u70b9\u5f00\u59cb BFS\uff0c\u7136\u540e\u5411\u5916\u627e\u51fa\u8fb9\u3002\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u80fd\u5f97\u5230\u4e00\u4e2a\u6700\u5c0f\u6811\u5f62\u56fe\u3002\u7531\u4e8e\u8fd9\u9898\u7684\u7279\u6b8a 01 \u6743\u6027\u8d28\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u65e6\u4e00\u4e2a\u70b9\u88ab 0 \u6743\u8fb9\u5360\u9886\u4e86\u5165\u5ea6\uff0c\u90a3\u4e48\u5b83\u6c38\u8fdc\u90fd\u4e0d\u9700\u8981\u518d\u66f4\u65b0\u4e86\u3002\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fdb\u884c\u666e\u901a\u7684 BFS\uff0c\u4fbf\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6700\u5c0f\u6811\u5f62\u56fe\u3002\n\n\u8fd9\u6837\u5f97\u5230\u7684\u6700\u5c0f\u6811\u5f62\u56fe\u662f\u6ee1\u8db3\u8fd9\u6837\u7684 01 \u6700\u5c0f\u6811\u5f62\u56fe\u7684\u8d2a\u5fc3\u6027\u8d28\u7684\uff0c\u5373\u4e0d\u5b58\u5728\u4efb\u4f55 0 \u6743\u8fb9\u7684\u7ec4\u5408\u53ef\u4ee5\u66ff\u4ee3 1 \u6743\u8fb9\u3002\n\n```cpp\nconst int N=1e5+9;\nvi e0[N],ans;\nvp e1[N];\nint n,m,in[N];\n\nint main() {\n\tn=read(), m=read();\n\trep(i,1,m) {\n\t\tint u=read(), v=read(), w=read();\n\t\tif(w==0) e0[u].emplace_back(v);\n\t\telse e1[u].emplace_back(pii(v,i));\n\t}\n    \n\tqueue<int>q; q.push(1); in[1]=-1;\n\twhile(!q.empty()) {\n\t\tint u=q.front(); q.pop();\n\t\tfor(auto v:e0[u]) if(in[v]!=-1) in[v]=-1, q.push(v);\n\t\tfor(auto ed:e1[u]) if(in[ed.fi]==0) in[ed.fi]=ed.se, q.push(ed.fi);\n\t}\n    \n\trep(i,1,n) {\n\t\tif(!in[i]) return puts(\"-1\"), 0;\n\t\telse if(in[i]!=-1) ans.emplace_back(in[i]);\n\t}\n\tprintf(\"%d\\n\",(int)ans.size());\n\tfor(auto x:ans) printf(\"%d \",x);\n    if(ans.size()) puts(\"\");\n\treturn 0;\n}\n```",
        "postTime": 1644065808,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "CF240E Road Repairs"
    },
    {
        "content": "[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.luogu.com.cn/blog/wangrx/solution-CF240E)\n# \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a\u4e00 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u8fb9\u6743\u4e3a $0$ \u6216 $1$\u3002  \n\u6c42\u8be5\u56fe\u4ee5 $1$ \u4e3a\u6839\u7684\u6700\u5c0f\u6811\u5f62\u56fe\uff0c\u5e76\u8f93\u51fa\u6700\u5c0f\u6811\u5f62\u56fe\u4e2d\u6240\u6709\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\u3002  \n\u65e0\u89e3\u8f93\u51fa `-1`\u3002\u4fdd\u8bc1\u6ca1\u6709\u91cd\u8fb9\u3002\n\n$\\texttt{Data Range:} 1\\le n,m\\le 10^5$ \u3002\n\n\u6ce8\u610f\u4e3a\u6587\u4ef6\u8f93\u5165\u8f93\u51fa\uff08\u8f93\u5165\u5230 `input.txt`\uff0c\u8f93\u51fa\u5230 `output.txt`\uff09\u3002\n\n# \u9898\u89e3\n\n\u524d\u7f6e\u829d\u58eb\uff1a[\u6700\u5c0f\u6811\u5f62\u56fe](https://www.luogu.com.cn/problem/P4716)\n\n\u6b63\u89e3\u4e3a tarjan \u4f18\u5316\u6731\u5218\u7b97\u6cd5 + \u8f93\u51fa\u65b9\u6848 \u3002\n\n\u672c\u6587\u5c06\u4f9d\u6b21\u8bb2\u89e3 tarjan \u4f18\u5316\u6731\u5218\u7b97\u6cd5\u3001\u53ca\u6700\u5c0f\u6811\u5f62\u56fe\u7684\u65b9\u6848\u8f93\u51fa\u3002\n\n\u7ea6\u5b9a\u4ee5\u4e0b\u8bb0\u53f7\uff1a\n\n- $u\\rightarrow v$\uff1a\u4ece\u70b9 $u$ \u5230\u70b9 $v$ \u7684\u8fb9\u3002\n- $\\mathrm{val}_{u\\rightarrow v}$\uff1a\u8fb9 $u\\rightarrow v$ \u7684\u6743\u503c\u3002\n- $\\circlearrowright$\uff1a\u73af\u3002\n- $\\circlearrowright_u$\uff1a\u70b9 $u$ \u6240\u5728\u7684\u73af\u3002\n- $\\mathrm{lca}_{u,v}$\uff1a\u6811\u4e0a $u,v$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n- $u\\Rightarrow v$\uff1a\u70b9 $u$ \u5230\u70b9 $v$ \u7684\u8def\u5f84\uff08\u4e0d\u5305\u542b $v$\uff09\n\n\n## tarjan \u4f18\u5316\u6731\u5218\u7b97\u6cd5\u6c42\u6700\u5c0f\u6811\u5f62\u56fe\n\n\u6c42\u89e3\u6700\u5c0f\u6811\u5f62\u56fe\u7684\u6731\u5218\u7b97\u6cd5\u662f\u4e00\u4e2a\u5178\u578b\u7684\u53cd\u6094\u8d2a\u5fc3\uff1a\n\n\u5148\u9009\u5b9a\u6bcf\u4e2a\u975e\u6839\u7ed3\u70b9\u7684\u6700\u5c0f\u5165\u8fb9\uff08\u53bb\u6389\u81ea\u73af\uff09\uff0c\u82e5\u4e0d\u5f62\u6210\u73af\u663e\u7136\u662f\u6700\u4f18\u89e3\u3002  \n\u5426\u5219\uff0c\u663e\u7136\u5f62\u6210\u7684\u662f \u4e00\u68f5\u6811 + \u82e5\u5e72\u57fa\u73af\u6811\u68ee\u6797\u3002  \n\u8003\u8651\u53cd\u6094\uff1a\u5bf9\u4e8e\u67d0\u4e2a\u73af $\\circlearrowright$\uff0c\n\u8003\u8651\u65ad\u73af\u4e3a\u94fe\uff0c\u4e5f\u5c31\u662f\u5c06\u73af\u4e0a\u7684\u67d0\u6761\u8fb9 $u\\rightarrow v$ \u66ff\u6362\u4e3a $u'\\rightarrow v\\ (u'\\notin\\circlearrowright)$\u3002 \n\n![](https://cdn.luogu.com.cn/upload/image_hosting/q2y4hb6n.png)\n![](https://cdn.luogu.com.cn/upload/image_hosting/xmbr34s2.png)\n\n\u4e8e\u662f\u5bf9\u4e8e\u6240\u6709\u7684 $u'\\rightarrow v,\\mathrm{val}_{u'\\rightarrow v}\\leftarrow\\mathrm{val}_{u'\\rightarrow v}-\\mathrm{val}_{u\\rightarrow v}$ \uff0c\u4e4b\u540e\u7f29\u70b9\u5e76\u91cd\u590d\u6700\u5f00\u59cb\u7684\u6b65\u9aa4\u5373\u53ef\u3002\n\n-----------------------------\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u53ef\u4ee5\u7528\u53ef\u5e76\u5806\u4f18\u5316\u7684\uff1a  \n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u7528\u4e00\u4e2a\u5806\u5b58\u50a8\u5176\u6240\u6709\u5165\u8fb9\u3002\n- \u9009\u5b9a\u6700\u5c0f\u5165\u8fb9\u5373\u53d6\u51fa\u5806\u4e2d\u6700\u5c0f\u5143\u7d20\u3002\n- $\\mathrm{val}_{u'\\rightarrow v}\\leftarrow\\mathrm{val}_{u'\\rightarrow v}-\\mathrm{val}_{u\\rightarrow v}$ \u5373\u5806\u7684\u6574\u4f53\u52a0\u51cf\uff08\u6253\u6807\u8bb0\u5b9e\u73b0\uff09\u3002\n- \u7f29\u70b9\u65f6\u5408\u5e76\u5165\u8fb9\u5373\u5408\u5e76\u591a\u4e2a\u5806\u3002\n\ntarjan \u8001\u7237\u5b50\u6307\u51fa\uff0c\u53cd\u6094\u53ef\u5728\u8d2a\u5fc3\u9009\u62e9\u65b9\u6848\u65f6\u5b9e\u65f6\u8fdb\u884c\u3002  \n\u5177\u4f53\u5730\uff0c\u4f9d\u6b21\u9009\u62e9\u6bcf\u4e2a\u975e\u6839\u7ed3\u70b9\u7684\u6700\u5c0f\u5165\u8fb9\uff08\u53bb\u6389\u81ea\u73af\uff09\u65f6\uff0c  \n\u4e00\u65e6\u51fa\u73b0\u4e86\u73af\uff0c\u5c31\u53ef\u4ee5\u7acb\u5373\u53cd\u6094\u7f29\u70b9\u3002  \n\u7f29\u70b9\u4ec5\u6d89\u53ca\u4e4b\u524d\u9009\u8fc7\u5165\u8fb9\u7684\u70b9\uff0c\u56e0\u6b64\u63a5\u4e0b\u6765\u5c1d\u8bd5\u5bf9\u65b0\u7f29\u5f97\u7684\u70b9\u548c\u5269\u4e0b\u7684\u70b9\u9009\u62e9\u6700\u5c0f\u5165\u8fb9\u5373\u53ef\u3002  \n\u5224\u73af\u548c\u7f29\u70b9\u53ef\u5206\u522b\u7528\u4e00\u4e2a\u5e76\u67e5\u96c6\u5224\u5b9a\u3002\n\n```cpp\ntypedef long long ll;\ntypedef unsigned int word;\ntypedef unsigned char byte;\n#define floor floor_\nword from[100010],to[100010];\nbyte value[100010];\nstruct heap{//\u53ef\u5e76\u5806\n    heap *l,*r;\n    word floor;\n    int value,tag;\n    inline void operator+=(int num){\n        value+=num,tag+=num;}\n    inline void pushdown(){\n        if(l) *l+=tag;\n        if(r) *r+=tag;\n        tag=0;\n    }\n    inline void pushup(){\n        if(l==0) l=r,r=0;\n        else if(r&&l->floor<r->floor){\n            register heap* swap=l;\n            l=r,r=swap;\n        }\n        floor=r? r->floor+1:1;\n    }\n}p[100010],*rt[200010];\ninline heap* merge(heap *l,heap *r){//\u5408\u5e76\u5806\n    if(l==0) return r;\n    if(r==0) return l;\n    if(l->value>r->value){\n        register heap* swap=l;\n        l=r,r=swap;\n    }\n    l->pushdown(),l->r=merge(l->r,r);\n    return l->pushup(),l;\n}\nword n,m,psiz,root,fa[200010];\nstruct union_{//\u5e76\u67e5\u96c6\n    word fa[200010];\n    inline union_(){\n        for(register word i=1;i<=200000;++i) fa[i]=i;}\n    inline word find(word id){\n        if(fa[id]==id) return id;\n        return fa[id]=find(fa[id]);\n    }\n    inline bool merge(word rt,word ch){\n        rt=find(rt),ch=find(ch);\n        if(rt!=ch) return fa[ch]=rt,1;\n        return 0;\n    }\n}ring,tree;\nword stack[100010],stacksiz,belong[200010];\ninline ll DMST(){\n    ll ans=0;psiz=n;\n    for(word i=1,u,id;i<=n;++i)\n        if(belong[id=i]=root,i!=root) for(heap *get;;){\t\t\t//\u9009\u5b9a\u6700\u5c0f\u5165\u8fb9\n            if((get=rt[id])==0) return -1;\t\t\t\t\t\t//\u9009\u8fb9\u5931\u8d25\n            get->pushdown(),rt[id]=merge(get->l,get->r);\t\t//\u53d6\u51fa\u6700\u5c0f\u5165\u8fb9\n            if((u=ring.find(from[get-p]))==id) continue;\t\t//\u5ffd\u7565\u81ea\u73af\n            if(ans+=get->value,rt[id]) *(rt[id])+=-get->value;\t//\u53cd\u6094\n\t\t\tstack[++stacksiz]=get-p;\t\t\t\t\t\t\t//\u8bb0\u5f55\u9009\u8fb9\n            if(u==root){ring.merge(root,id);break;}\t\t\t\t//\u4e0e\u6839\u8fde\u901a\uff0c\u4e0d\u53ef\u80fd\u6210\u73af\n            if(tree.merge(u,id)){fa[id]=u;break;}\t\t\t\t//\u5e76\u67e5\u96c6\u5224\u73af\n\n            tree.merge(++psiz,id),rt[psiz]=rt[id];\t\t\t\t//\u7f29\u70b9\uff08\u65b0\u5f00\u4e00\u4e2a\u70b9\uff09\n            while(u!=id){\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tbelong[u]=psiz,ring.merge(psiz,u);\t\t\t\t\n                rt[psiz]=merge(rt[psiz],rt[u]);\t\t\t\t\t//\u5408\u5e76\u5165\u8fb9\n                u=(fa[u]=ring.find(fa[u]));\n            }\n            ring.merge(psiz,id);\n\t\t\tbelong[id]=psiz,belong[id=psiz]=root;\n        }\n   return ans;\n}\n```\n\u6ce8\u610f\u7f29\u70b9\u7684\u65f6\u5019\u65b0\u5f00\u4e00\u4e2a\u70b9\uff0c\u8fd9\u6837\u4fbf\u4e8e\u4e4b\u540e\u8bb0\u5f55\u65b9\u6848\u3002\n## \u6700\u5c0f\u6811\u5f62\u56fe\u7684\u65b9\u6848\u8bb0\u5f55\n\n\u6731\u5218\u7b97\u6cd5\u53ea\u80fd\u7ed9\u51fa\u52a0\u5165\u7684\u8fb9\u53ca\u5176\u52a0\u5165\u6b21\u5e8f\uff0c\u5e76\u4e0d\u80fd\u76f4\u63a5\u6307\u51fa\u54ea\u4e9b\u8fb9\u88ab\u66ff\u6362\u4e86\u3002\n\n\u539f\u56e0\u662f \u201c\u73af\u5957\u73af\u201d \u7684\u60c5\u51b5\u4e0b\u4e00\u6761\u8fb9\u53ef\u80fd\u66ff\u6362\u591a\u6761\u8fb9\u3002\n\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/e498qlwj.png?x-oss-process=image/resize,m_lfit,h_350,w_350)\n![](https://cdn.luogu.com.cn/upload/image_hosting/8knlvv5r.png?x-oss-process=image/resize,m_lfit,h_350,w_350)\n\n\u4f46\u6731\u5218\u7b97\u6cd5\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u4e0e\u5176\u6240\u5c5e\u5f3a\u8fde\u901a\u5206\u91cf\u5f62\u6210\u4e86\u6811\u7ed3\u6784\uff0c\u79f0\u4e3a\u6536\u7f29\u6811\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5sefikx9.png?x-oss-process=image/resize,m_lfit,h_700,w_500)\n\n\u6536\u7f29\u6811\u53cd\u6620\u4e86\u7f29\u70b9\u524d\u540e\u539f\u56fe\u7684\u72b6\u6001\u3002  \n\u56e0\u6b64\uff0c\u539f\u56fe\u4e0a\u6bcf\u6761\u8fb9 $u\\rightarrow v$ \u4f1a\u4f5c\u4e3a\u6536\u7f29\u6811\u4e0a $v\\Rightarrow \\mathrm{lca}_{u,v}$ \u4e0a\u70b9\u7684\u5165\u8fb9\u3002\n\n\u56e0\u6b64\u53ef\u6309\u52a0\u5165\u6b21\u5e8f\u53cd\u5411\u68c0\u67e5\u51b2\u7a81\uff1a  \n\u5bf9\u4e8e\u8fb9 $u\\rightarrow v$\uff0c\u82e5\u6536\u7f29\u6811\u4e0a $v\\Rightarrow \\mathrm{lca}_{u,v}$ \u4e0a\u67d0\u4e2a\u70b9\u5df2\u7ecf\u6709\u5165\u8fb9\u4e86\uff0c\u90a3\u5c31\u4e0d\u52a0\u5165\u8fd9\u6761\u8fb9\u3002\n\n```cpp\ntypedef unsigned int word;\ntypedef unsigned char byte;\nword head[200010],next[200010];\nword size[200010],floor[200010];\nword son[200010],newid[200010],step;\ntemplate<word size>\nstruct segment_tree{//\u7ebf\u6bb5\u6811\n\tsegment_tree<(size>>1)> l,r;\n\tbyte tag,sum;\n\tinline byte operator()(word f,word t){\n\t\tif(tag) return 1;\n\t\tif(f==0&&t==(size<<1)-1) return sum;\n\t\tif(f&size) return r(f&~size,t&~size);\n\t\telse if((t&size)^size) return l(f,t);\n\t\treturn l(f,size-1)||r(0,t&~size);\n\t}\n\tinline void operator()(word f,word t,byte num){\n\t\tif(tag) return;\n\t\tif(f==0&&t==(size<<1)-1)\n\t\t\treturn sum|=num,void(tag|=num);\n\t\tif(f&size) r(f&~size,t&~size,num);\n\t\telse if((t&size)^size) l(f,t,num);\n\t\telse l(f,size-1,num),r(0,t&~size,num);\n\t\tsum=l.sum|r.sum;\n\t}\n};\ntemplate<>\nstruct segment_tree<0>{\n\tbyte sum;\n\tinline void operator()(word f,word t,byte num){sum|=num;}\n\tinline byte operator()(word f,word t){return sum;}\n};\nsegment_tree<(1u<<17)> segtree;\ninline void dfs1(word id){\n\tsize[id]=1;\n\tfor(register word i=head[id];i;i=next[i]){\n\t\tfloor[i]=floor[id]+1;\n\t\tdfs1(i),size[id]+=size[i];\n\t\tif(size[son[id]]<size[i]) son[id]=i;\n\t}\n}\ninline void dfs2(word id){\n\tnewid[id]=++step;\n\tif(son[id]) size[son[id]]=size[id],dfs2(son[id]);\n\tfor(register word i=head[id];i;i=next[i])\n\t\tif(i!=son[id]) size[i]=i,dfs2(i);\n}\ninline void getMST(){\n\tfor(register word i=1;i<=psiz;++i)\n\t\tif(i!=root) next[i]=head[belong[i]],head[belong[i]]=i;\n\tdfs1(root),size[root]=root,dfs2(root);//\u6811\u5256\u9884\u5904\u7406\n\tfor(word u,v,id,get;stacksiz;--stacksiz){\n\t\tget=0,id=stack[stacksiz];\n\t\tfor(u=from[id],v=to[id];size[u]!=size[v];)\n\t\t\tif(floor[size[u]]>floor[size[v]]) u=belong[size[u]];\n\t\t\telse{\n\t\t\t\tget|=segtree(newid[size[v]],newid[v]);\n\t\t\t\tv=belong[size[v]];\n\t\t\t}\n\t\tif(floor[u]<floor[v]) get|=segtree(newid[u]+1,newid[v]);\n\t\t//\u68c0\u67e5 v => lca(u,v) \u4e0a\u662f\u5426\u6709\u5165\u8fb9\n\t\tif(get) continue;\n\t\tif(value[id]) printf(\"%u\\n\",id);\n\t\tfor(u=from[id],v=to[id];size[u]!=size[v];)\n\t\t\tif(floor[size[u]]>floor[size[v]]) u=belong[size[u]];\n\t\t\telse{\n\t\t\t\tsegtree(newid[size[v]],newid[v],1);\n\t\t\t\tv=belong[size[v]];\n\t\t\t}\n\t\tif(floor[u]<floor[v]) segtree(newid[u]+1,newid[v],1);\n\t\t//\u5c06 u->v \u4f5c\u4e3a v => lca(u,v) \u4e0a\u70b9\u7684\u5165\u8fb9\n\t}\n}\n```\n\u5c31\u6b64\uff0c\u6211\u4eec\u4ee5\u6bd4\u539f\u7b97\u6cd5\u591a\u51fa\u4e00\u500d\u7684\u7801\u91cf\uff0c\u5b8c\u6210\u4e86\u6700\u5c0f\u6811\u5f62\u56fe\u7684\u65b9\u6848\u8bb0\u5f55\u3002",
        "postTime": 1631279987,
        "uid": 104726,
        "name": "wangrx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF240E / \u6700\u5c0f\u6811\u5f62\u56fe\u53ca\u65b9\u6848\u8f93\u51fa"
    }
]