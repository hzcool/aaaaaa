[
    {
        "content": "\u8003\u8651\u53ea\u6709\u8def\u5f84\u957f\u5ea6\u7684\u9650\u5236\u600e\u4e48\u505a\u3002\n\n~~P4178~~\u3002\n\n```\nsort(sth+1,sth+Cnt+1);\nwhile(l<r){\n\tif(sth[l]+sth[r]<=k){\n    \tret+=r-l;\n\t\tl++;\n\t}else{\n\t\tr--;\n\t}\n}\nreturn ret;\n```\n\n\u52a0\u4e0a\u8def\u5f84\u8fb9\u6570\u7684\u9650\u5236\u5462\uff1f\n\n~~\u5f88\u81ea\u7136\u5730~~\u60f3\u5230\u8981\u5728``ret+=r-l``\u8fd9\u4e2a\u5730\u65b9**\u518d\u7b5b\u9009**\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\u3002\n\n\u4e8e\u662f\u7528**\u6811\u72b6\u6570\u7ec4**\u6765\u505a\u3002\n\n\u5c06dis\u6392\u5e8f\uff0c``if``\u91cc\u9762\u662f``dis``\u7684\u9650\u5236\uff0c\u7136\u540e``ret``\u52a0\u4e0a ``\u2264 l-len[l]``\u7684\u7b54\u6848\u5373\u53ef\u3002\n\n\u6b63\u786e\u6027\u663e\u7136\u3002\n\n\u8fd9\u4e00\u6bb5\u4fee\u6539\u540e\u7684\u4ee3\u7801\n```\n//k\u662f\u9650\u5236\u7684\u957f\u5ea6\uff0cm\u662f\u9650\u5236\u7684\u8fb9\u6570\nsort(sth+1,sth+Cnt+1,mmp);//\u6309dis\u6392\u5e8f\nfor(int i=1;i<=Cnt;i++)s.insert(sth[i].dep+1);\n//\u63d2\u5165dep\nint l=1,r=Cnt;LL res=0;\nwhile(l<r){\n\tif(sth[l].dis+sth[r].dis<=k){//\u9650\u5236\u957f\u5ea6\n\t\ts.erase(sth[l].dep+1);//\u53bb\u6389\u81ea\u5df1\n\t\tres+=s.Ans(m-sth[l].dep+1);//\u7d2f\u52a0\u7b54\u6848\n\t\tl++;\n\t}else{\n\t\ts.erase(sth[r].dep+1);\n\t\tr--;\n\t}\n}\ns.erase(sth[l].dep+1);//\u6ce8\u610f\u6700\u540e\u53bb\u6389l=r\u7684dep\nreturn res;\n```\n\n\u90a3\u4e3a\u4ec0\u4e48\u9700\u8981+1\u5462\uff1f\n\n~~\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u64cd\u4f5c\u8d77\u6765\u65b9\u4fbf\uff0c~~\u56e0\u4e3a\u63d2\u5165\u5220\u9664\u65f6\u53ef\u80fd\u9047\u52300\u7684\u60c5\u51b5\uff0c\u4f1aTLE\u3002\u800c\u67e5\u8be2\u7684\u65f6\u5019 \u4e24\u6761\u8def\u5f84\u8fb9\u6570\u4e4b\u548c\u7b49\u4e8em\u4e5f\u662f\u8981\u7b97\u8fdb\u7b54\u6848\u7684\uff0c\u82e5\u9047\u52300\u7684\u60c5\u51b5\uff0c\u8bf4\u660e\u4e24\u6761\u8def\u5f84\u8fb9\u6570\u4e4b\u548c\u4e3am+1\uff0c\u6b64\u65f6\u4e0d\u7528\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n```\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=1e5+50;\ntypedef long long LL;\nint to[N<<1],las[N<<1],fir[N],ds[N<<1],cnt;\ninline void add_edge(int u,int v,int a){\n\tto[++cnt]=v;las[cnt]=fir[u];fir[u]=cnt;ds[cnt]=a;\n\tto[++cnt]=u;las[cnt]=fir[v];fir[v]=cnt;ds[cnt]=a;\n}\ninline int max(int u,int v){return u>v?u:v;}\ninline int min(int u,int v){return u<v?u:v;}\nint n,m,k,x,y;\nint f[N],dis[N],dep[N],siz[N],vis[N];\nint Cnt,rot,sum;\nLL ans;\nstruct node{\n\tint dis,dep;\n}sth[N];\nstruct Tree{\n\tint f[N];\n\tvoid insert(int u){\n\t\tif(u==0)return;\n\t\tfor(int i=u;i<=n+1;i+=i&-i)f[i]++;\n\t}\n\tvoid erase(int u){\n\t\tif(u==0)return;\n\t\tfor(int i=u;i<=n+1;i+=i&-i)f[i]--;\n\t}\n\tint Ans(int u){\n\t\tif(u<=0)return 0;\n\t\tint ret=0;\n\t\tfor(int i=u;i;i&=i-1)ret+=f[i];\n\t\treturn ret;\n\t}\n}s;\nbool mmp(const node &u,const node &v){\n\treturn u.dis<v.dis;\n}\nvoid grot(int u,int v){\n\tsiz[u]=1;f[u]=0;\n\tfor(int i=fir[u];i;i=las[i])\n\tif(to[i]!=v&&!vis[to[i]]){\n\t\tgrot(to[i],u);\n\t\tsiz[u]+=siz[to[i]];\n\t\tf[u]=max(f[u],siz[to[i]]);\n\t}\n\tf[u]=max(f[u],sum-siz[u]);\n\tif(f[u]<f[rot])rot=u;\n}\nvoid gsth(int u,int v){\n\tsth[++Cnt]=(node){dis[u],dep[u]};\n\tfor(int i=fir[u];i;i=las[i])\n\tif(to[i]!=v&&!vis[to[i]]){\n\t\tdis[to[i]]=dis[u]+ds[i];\n\t\tdep[to[i]]=dep[u]+1;\n\t\tgsth(to[i],u);\n\t}\n}\nLL calc(int u,int Dis,int Dep){\n\tCnt=0;\n\tdis[u]=Dis;dep[u]=Dep;\n\tgsth(u,0);\n\tsort(sth+1,sth+Cnt+1,mmp);\n\tfor(int i=1;i<=Cnt;i++)s.insert(sth[i].dep+1);\n\tint l=1,r=Cnt;LL res=0;\n\twhile(l<r){\n\t\tif(sth[l].dis+sth[r].dis<=k){\n\t\t\ts.erase(sth[l].dep+1);\n\t\t\tres+=s.Ans(m-sth[l].dep+1);\n\t\t\tl++;\n\t\t}else{\n\t\t\ts.erase(sth[r].dep+1);\n\t\t\tr--;\n\t\t}\n\t}\n\ts.erase(sth[l].dep+1);\n\treturn res;\n}\nvoid solve(int u){\n\tans+=calc(u,0,0);vis[u]=1;\n\tfor(int i=fir[u];i;i=las[i])\n\tif(!vis[to[i]]){\n\t\tans-=calc(to[i],ds[i],1);\n\t\trot=0;sum=siz[to[i]];\n\t\tgrot(to[i],0);\n\t\tsolve(rot);\n\t}\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=2;i<=n;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd_edge(x,i,y);\n\t}\n\tf[0]=sum=n;\n\tgrot(1,0);\n\tsolve(rot);\n\tprintf(\"%I64d\\n\",ans);\n}\n```",
        "postTime": 1544445711,
        "uid": 50092,
        "name": "da32s1da",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF293E \u3010Close Vertices\u3011"
    },
    {
        "content": "\u9898\u76ee\u5728\u8fd9\uff1a[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF293E)\u3002\n\n~~CF \u9898\u7684\u9898\u89e3\u771f\u7684\u90a3\u4e48\u5c11\u5417\uff1f~~\n\n\u8bf4\u5b9e\u8bdd\u8fd9\u9898\u53ef\u80fd\u53ea\u6709\u7d2b\u9898\u96be\u5ea6\u3002\n\n\u8fd9\u4e00\u9898\u548c [P4178](https://www.luogu.com.cn/problem/P4178) \u5f88\u50cf\u3002\u4f46\u662f P4178 \u7684\u9650\u5236\u53ea\u662f\u4e00\u7ef4\u7684\uff0c\u800c\u8fd9\u4e00\u9898\u5374\u6709 $l$ \u548c $w$ \u4e24\u7ef4\u7684\u9650\u5236\u3002\n\n\u9898\u89e3\u533a\u5404\u4f4d\u5927\u4f6c\u4eec\u7684\u4ee3\u7801\u90fd\u662f\u5148\u6392\u5e8f\u518d\u7528\u6811\u72b6\u6570\u7ec4\u6765\u89e3\u51b3\u7684\u3002\n\n\u4f46\u662f\u6211\u597d\u83dc\u554a QAQ\uff0c\u6123\u662f\u6ca1\u6709\u60f3\u901a\u600e\u4e48\u6837\u6392\u5e8f\u89e3\u51b3\uff0c\u5c31\u8fde P4178 \u90fd\u662f\u7528 \u70b9\u5206\u6cbb+\u5e73\u8861\u6811 \u7684\u65b9\u6cd5\u89e3\u51b3\u7684\u3002\n\n\u80bf\u4e48\u529e\u5462\uff1f\n\n\u89e3\u51b3\u4e8c\u7ef4\u504f\u5e8f\u5176\u5b9e\u8fd8\u6709\u4e00\u4e2a\u597d\u4e1c\u897f\uff1a**\u6811\u5957\u6811**\u3002\n\n~~\u5c31\u662f\u4f1a\u591a\u4e00\u53ea log \u800c\u5df2\u2026~~\n\n\u70b9\u5206\u6cbb\u53ef\u4ee5\u5957\u4e0a\u5404\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528 \u70b9\u5206\u6cbb+\u6811\u5957\u6811 \u6765\u5199\u8fd9\u4e00\u9898\u3002\n\n\u6211\u7528\u7684\u6811\u5957\u6811\u662f **\u6811\u72b6\u6570\u7ec4+FHQ_Treap**\u3002\u6811\u72b6\u6570\u7ec4 \u662f\u5b58\u957f\u5ea6\u90a3\u4e00\u7ef4\uff0cFHQ_Treap \u662f\u5b58\u8fb9\u6743\u90a3\u4e00\u7ef4\u3002\u7801\u91cf\u5f88\u5c0f\uff0c\u53ef\u4ee5\u653e\u5fc3\u98df\u7528\u3002\n\n\u540c\u6837\u56e0\u4e3a\u4f1a\u9047\u5230 0 \u7684\u60c5\u51b5\uff0c\u957f\u5ea6\u8981\u7edf\u4e00\u8fdb\u884c +1\u3002\n\n\u521d\u59cb\u65f6\u8981\u5728 $(1,0)$ \u7684\u4f4d\u7f6e\u4e0a\u52a0\u5165\u4e00\u4e2a\u6570\uff0c\u56e0\u4e3a\u957f\u5ea6\u4e3a 0\uff0c\u8fb9\u6743\u4e3a 0 \u7684\u70b9\u6709\u4e00\u4e2a\uff08\u6839\uff09\u3002\n\n\u5173\u4e8e\u5220\u9664\uff0c\u6211\u7528\u4e86**\u60f0\u6027\u5220\u9664**\uff0c\u5373\u4e3a $root$ \u6807\u4e3a 0 \u89c6\u4e3a\u5220\u9664\u3002\u5982\u679c\u4e0d\u60f3\u7528\u60f0\u6027\u5220\u9664\u7684\u53ef\u4ee5\u7528**\u5783\u573e\u56de\u6536**\u3002\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u662f\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\u7684\u3002\n\n\u56e0\u4e3a\u53d8\u91cf\u6709\u8bb8\u591a\u91cd\u540d\u3002\u6240\u4ee5\u6211\u7528\u7ed3\u6784\u4f53\u5c01\u88c5\u4e86\u4e00\u4e0b\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\nusing namespace std;\nconst int N=1e5+10;\ninline int read(){\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-')\n\t\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx=x*10+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\nint n,l,w;\nstruct fhq_in_bit{\n\tstruct fhq_treap{\n\t\tlong long size;\n\t\tint lson,rson;\n\t\tint val,key;\n\t};\n\tfhq_treap fhq[40*N];\n\tint root[N];\n\tint cnt;\n\tinline void pushup(int pos){\n\t\tfhq[pos].size=fhq[fhq[pos].lson].size+fhq[fhq[pos].rson].size+1;\n\t}\n\tinline int newnode(int val){\n\t\t++cnt;\n\t\tfhq[cnt].lson=fhq[cnt].rson=0;//\u56e0\u4e3a\u662f\u60f0\u6027\u5220\u9664\uff0c\u6240\u4ee5\u539f\u6765\u7684\u8282\u70b9\u53ef\u80fd\u8fd8\u6709\u4ee5\u524d\u6240\u5b58\u7684lson\u548crson\uff0c\u8981\u6807\u4e3a0\n\t\tfhq[cnt].key=rand();\n\t\tfhq[cnt].val=val;\n\t\tfhq[cnt].size=1;\n\t\treturn cnt;\n\t}\n\tvoid split(int pos,int val,int &x,int &y){\n\t\tif(!pos){\n\t\t\tx=y=0;\n\t\t\treturn ;\n\t\t}\n\t\tif(fhq[pos].val<=val){\n\t\t\tx=pos;\n\t\t\tsplit(fhq[x].rson,val,fhq[x].rson,y);\n\t\t}\n\t\telse{\n\t\t\ty=pos;\n\t\t\tsplit(fhq[y].lson,val,x,fhq[y].lson);\n\t\t}\n\t\tpushup(pos);\n\t}\n\tint merge(int x,int y){\n\t\tif(!x||!y)\n\t\t\treturn x|y;\n\t\tif(fhq[x].key>fhq[y].key){\n\t\t\tfhq[x].rson=merge(fhq[x].rson,y);\n\t\t\tpushup(x);\n\t\t\treturn x;\n\t\t}\n\t\telse{\n\t\t\tfhq[y].lson=merge(x,fhq[y].lson);\n\t\t\tpushup(y);\n\t\t\treturn y;\n\t\t}\n\t}\n\tinline void fhq_ins(int &rt,int val){\n\t\tint x,y;\n\t\tsplit(rt,val,x,y);\n\t\trt=merge(merge(x,newnode(val)),y);\n\t}\n\tinline long long fhq_query(int &rt,int val){\n\t\tint x,y;\n\t\tsplit(rt,val,x,y);\n\t\tlong long ans=fhq[x].size;\n\t\trt=merge(x,y);\n\t\treturn ans;\n\t}\n/*-----------\u4ee5\u4e0a\u4e3a\u5e73\u8861\u6811\u90e8\u5206------------*/\n\tinline int lowbit(int x){\n\t\treturn x&-x;\n\t}\n\tinline void bit_ins(int pos,int val){\n\t\tfor(int i=pos;i<=n+1;i+=lowbit(i))\n\t\t\tfhq_ins(root[i],val);\n\t}\n\tinline long long bit_query(int r,int val){\n\t\tlong long ans=0;\n\t\tfor(int i=r;i;i-=lowbit(i))\n\t\t\tans+=fhq_query(root[i],val);\n\t\treturn ans;\n\t}\n/*-----------\u4ee5\u4e0a\u4e3a\u6811\u72b6\u6570\u7ec4\u90e8\u5206------------*/\n\tinline void clear(int pos){\n\t\tfor(int i=pos;i<=n+1;i+=lowbit(i))\n\t\t\troot[i]=0;//\u60f0\u6027\u5220\u9664\uff0croot\u6807\u4e3a0\u5373\u4e3a\u5220\u9664\n\t}\n};\nstruct edge{\n\tint from,to;\n\tint val;\n\tint nxt;\n};\nfhq_in_bit tr;\nedge e[2*N];\nint last[N],son[N],size[N],a[N],b[N],dis1[N],dis2[N],sta[N];\nbool vis[N];\nint tot,cnt,top,sum,root;\nlong long ans;\ninline void add(int from,int to,int val){\n\t++tot;\n\te[tot].from=from;\n\te[tot].to=to;\n\te[tot].val=val;\n\te[tot].nxt=last[from];\n\tlast[from]=tot;\n}\nvoid get_root(int u,int fa){\n\tson[u]=0;\n\tsize[u]=1;\n\tfor(int i=last[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(!vis[v]&&v!=fa){\n\t\t\tget_root(v,u);\n\t\t\tsize[u]+=size[v];\n\t\t\tson[u]=max(size[v],son[u]);\n\t\t}\n\t}\n\tson[u]=max(sum-size[u],son[u]);\n\tif(son[u]<son[root])\n\t\troot=u;\n}\nvoid get_dis(int u,int fa){\n\t++cnt;\n\ta[cnt]=dis1[u];//dis1\u4e3a\u957f\u5ea6\n\tb[cnt]=dis2[u];//dis2\u4e3a\u8fb9\u6743\n\tfor(int i=last[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(!vis[v]&&v!=fa){\n\t\t\tdis1[v]=dis1[u]+1;\n\t\t\tdis2[v]=dis2[u]+e[i].val;\n\t\t\tget_dis(v,u);\n\t\t}\n\t}\n}\nvoid calc(int u){\n\ttr.bit_ins(1,0);//\u63d2\u5165(1,0)\n\tfor(int i=last[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(!vis[v]){\n\t\t\tcnt=0;\n\t\t\tdis1[v]=1;\n\t\t\tdis2[v]=e[i].val;\n\t\t\tget_dis(v,u);\n\t\t\tfor(int j=1;j<=cnt;++j)\n\t\t\t\tif(a[j]<=l&&b[j]<=w)//\u9632\u6b62\u8d8a\u754c\n\t\t\t\t\tans+=tr.bit_query(l-a[j]+1,w-b[j]);\n\t\t\tfor(int j=1;j<=cnt;++j)\n\t\t\t\tif(a[j]<=l&&b[j]<=w){\n\t\t\t\t\tsta[++top]=a[j];//\u8fd9\u4e2a\u6570\u8981\u5728\u4e4b\u540e\u6e05\u7a7a\n\t\t\t\t\ttr.bit_ins(a[j]+1,b[j]);\n\t\t\t\t}\n\t\t}\n\t}\n\twhile(top){\n\t\ttr.clear(sta[top]+1);//\u6e05\u7a7a\n\t\ttop--;\n\t}\n\ttr.clear(1);//\u522b\u5fd8\u4e86\u8fd8\u6709\u6700\u5f00\u59cb\u7684(1,0)\n\ttr.cnt=0;//cnt\u6e05\u7a7a\n}\nvoid solve(int u){\n\tvis[u]=true;\n\tcalc(u);\n\tfor(int i=last[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(!vis[v]){\n\t\t\tson[0]=sum=size[v];\n\t\t\troot=0;\n\t\t\tget_root(v,0);\n\t\t\tget_root(root,0);\n\t\t\tsolve(root);\n\t\t}\n\t}\n}\nint main(){\n\tn=read();\n\tl=read();\n\tw=read();\n\tint x,y;\n\tfor(int i=2;i<=n;++i){\n\t\tx=read();\n\t\ty=read();\n\t\tadd(i,x,y);\n\t\tadd(x,i,y);\n\t}\n\tson[0]=sum=n;\n\troot=0;\n\tget_root(1,0);\n\tget_root(root,0);\n\tsolve(root);\n\tcout<<ans;\n}\n```\n\n\u5f88\u7b80\u5355\u5bf9\u4e0d\u5bf9\u554a\u3002\n\n\u4f46\u662f\u628a\u8fd9\u4e2a\u4ee3\u7801\u4e00\u4ea4\u2026\n\nTime limit exceeded on test 9...\n\n\u6bd5\u7adf\u8fd9\u4e2a\u7b97\u6cd5\u662f $O(nlog^3n)$ \u7684\u554a\u3002\n\n\u770b\u6765\u53ea\u80fd\u7528 \u6392\u5e8f+\u6811\u72b6\u6570\u7ec4 \u4e86\u2026\n\n\u5417\uff1f\n\n\u6ca1\u4e8b\uff0c\u6211\u4eec\u53ef\u4ee5**\u526a\u679d\u4f18\u5316**\u3002\n\n\u7b2c 9 \u4e2a\u6d4b\u8bd5\u70b9\u957f\u751a\u4e48\u6837\u5b50\u5462\uff1f\n\n```cpp\n100000 600 81222411\n1 8667\n1 6347\n2 49\n2 3228\n3 4875\n3 1357\n4 6006\n4 9739\n5 1526\n5 6802\n6 8956\n6 6143\n7 9356\n7 1380\n8 9923\n8 3856\n9 9794\n9 3636\n10 4148\n10 7029\n11 1780\n11 9202\n12 9838\n12 3566\n13 6108\n13 3875\n14 290\n14 6097\n15 4106\n15 3903\n16 9713\n16 273\n17 4341\n17 2190\n18 2938\n18 6515\n19 7831\n19 4060\n20 5958\n20 3859\n21 9452\n21 1340\n22 6722\n22 6109\n23 5574\n23 8964\n24 3026\n24 2326\n25 9617\n25 5930\n26 4374\n26 7381\n27 4889\n27 3913\n28 9482\n28 4997\n29 1236\n...\n```\n\n\u4e00\u80a1\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6c14\u606f\u6251\u9762\u800c\u6765\u3002\n\n~~\u5176\u5b9e\u6211\u5230\u73b0\u5728\u8fd8\u6ca1\u60f3\u660e\u767d\u4e3a\u4ec0\u4e48\u5361\u94fe\u6570\u636e\u90fd\u8fc7\u4e86\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u8fd8\u6ca1\u8fc7\u2026~~\n\n\u6211\u4eec\u53ef\u4ee5\u624b\u753b\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\n\n\u6211\u901a\u8fc7**\u5927\u773c\u89c2\u5bdf\u6cd5**\uff0c\u53d1\u73b0\u6709\u8bb8\u591a\u5173\u4e8e\u957f\u5ea6\u7684\u9650\u5236\u5176\u5b9e\u662f\u6ca1\u7528\u7684\u3002\u90a3\u4e48\u662f\u5426\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u526a\u679d\u5462\uff1f\n\n**\u53ef\u4ee5\u3002**\n\n\u6211\u4eec\u8bb0 $maxn$ \u4e3a\u4e4b\u524d\u904d\u5386\u8fc7\u7684\u5b50\u6811\u7684\u6700\u6df1\u7684\u6df1\u5ea6\uff08\u521d\u59cb\u4e3a 1\uff09\uff0c\u90a3\u4e48\u5982\u679c $l-a_j+1$ \u8981\u5927\u4e8e $maxn$\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u76f4\u63a5\u641c\u5bfb $(maxn,w-b_j)$ \u800c\u4e0d\u641c\u5bfb $(l-a_j+1,w-b_j)$ \u5462\uff1f\n\n\u6240\u4ee5\u5408\u5e76\u4e00\u4e0b\u5c31\u662f\u5982\u4e0b\u4ee3\u7801\uff1a\n\n```cpp\nif(a[j]<=l&&b[j]<=w)//\u8fb9\u754c\u6761\u4ef6\u8fd8\u662f\u8981\u5224\u65ad\u7684\n\tans+=tr.bit_query(min(maxn,l-a[j]+1),w-b[j]);\n```\n\n\u8fd9\u662f\u67e5\u8be2\u7684\u4f18\u5316\uff0c\u90a3\u4e48\u63d2\u5165\u662f\u5426\u4e5f\u53ef\u4ee5\u4f18\u5316\u5462\uff1f\n\n**\u4e5f\u53ef\u4ee5\u3002**\n\n\u6211\u4eec\u53ef\u4ee5\u8bb0\u4e00\u4e2a\u6570\u7ec4 $son2$\u3002$son2_u$ \u8868\u793a\u4ee5 $u$ \u4e3a\u6839\u662f\u6700\u6df1\u7684\u957f\u5ea6\u4e3a\u591a\u5c11\u3002\n\n$son2$ \u53ef\u4ee5\u5728\u627e\u91cd\u5fc3\u65f6\u6c42\u51fa\u3002\u4f46\u662f\u8fd9\u6837\u5c31\u5fc5\u987b\u5148\u4ee5 $v$ \u4e3a\u6839\u627e\u4e00\u904d\uff0c\u518d\u4ee5 $root$ \u4e3a\u6839\u627e\u4e00\u904d\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6bcf\u4e00\u6b21\u63d2\u5165\u90fd\u53ea\u8981\u627e\u5230 $son2_u+1$ \u800c\u975e $n+1$ \u4e86\u3002\n\n~~\u8fd9\u662f\u4ec0\u4e48\uff1f\u8fd9\u662f\u8d28\u7684\u98de\u8dc3\u554a\uff01~~\n\n\u8fd9\u6837\u5c31\u7ec8\u4e8e\u53ef\u4ee5\u5feb\u843d\u7684 AC \u8fd9\u4e00\u9898\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\nusing namespace std;\nconst int N=1e5+10;\ninline int read(){\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-')\n\t\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx=x*10+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\nstruct fhq_in_bit{\n\tstruct fhq_treap{\n\t\tlong long size;\n\t\tint lson,rson;\n\t\tint val,key;\n\t};\n\tfhq_treap fhq[40*N];\n\tint root[N];\n\tint cnt;\n\tinline void pushup(int pos){\n\t\tfhq[pos].size=fhq[fhq[pos].lson].size+fhq[fhq[pos].rson].size+1;\n\t}\n\tinline int newnode(int val){\n\t\t++cnt;\n\t\tfhq[cnt].lson=fhq[cnt].rson=0;\n\t\tfhq[cnt].key=rand();\n\t\tfhq[cnt].val=val;\n\t\tfhq[cnt].size=1;\n\t\treturn cnt;\n\t}\n\tvoid split(int pos,int val,int &x,int &y){\n\t\tif(!pos){\n\t\t\tx=y=0;\n\t\t\treturn ;\n\t\t}\n\t\tif(fhq[pos].val<=val){\n\t\t\tx=pos;\n\t\t\tsplit(fhq[x].rson,val,fhq[x].rson,y);\n\t\t}\n\t\telse{\n\t\t\ty=pos;\n\t\t\tsplit(fhq[y].lson,val,x,fhq[y].lson);\n\t\t}\n\t\tpushup(pos);\n\t}\n\tint merge(int x,int y){\n\t\tif(!x||!y)\n\t\t\treturn x|y;\n\t\tif(fhq[x].key>fhq[y].key){\n\t\t\tfhq[x].rson=merge(fhq[x].rson,y);\n\t\t\tpushup(x);\n\t\t\treturn x;\n\t\t}\n\t\telse{\n\t\t\tfhq[y].lson=merge(x,fhq[y].lson);\n\t\t\tpushup(y);\n\t\t\treturn y;\n\t\t}\n\t}\n\tinline void fhq_ins(int &rt,int val){\n\t\tint x,y;\n\t\tsplit(rt,val,x,y);\n\t\trt=merge(merge(x,newnode(val)),y);\n\t}\n\tinline long long fhq_query(int &rt,int val){\n\t\tint x,y;\n\t\tsplit(rt,val,x,y);\n\t\tlong long ans=fhq[x].size;\n\t\trt=merge(x,y);\n\t\treturn ans;\n\t}\n\tinline int lowbit(int x){\n\t\treturn x&-x;\n\t}\n\tinline void bit_ins(int pos,int n,int val){\n\t\tfor(int i=pos;i<=n+1;i+=lowbit(i))//\u56e0\u4e3a\u5230\u54ea\u662f\u7531son2\u51b3\u5b9a\uff0c\u6240\u4ee5n\u5c31\u53d8\u6210\u4f20\u8fdb\u6765\u7684\u53c2\u6570\n\t\t\tfhq_ins(root[i],val);\n\t}\n\tinline long long bit_query(int r,int val){\n\t\tlong long ans=0;\n\t\tfor(int i=r;i;i-=lowbit(i))\n\t\t\tans+=fhq_query(root[i],val);\n\t\treturn ans;\n\t}\n\tinline void clear(int pos,int n){\n\t\tfor(int i=pos;i<=n+1;i+=lowbit(i))//\u540c\u7406\n\t\t\troot[i]=0;\n\t}\n};\nstruct edge{\n\tint from,to;\n\tint val;\n\tint nxt;\n};\nfhq_in_bit tr;\nedge e[2*N];\nint last[N],son1[N],son2[N],size[N],dep[N],a[N],b[N],dis1[N],dis2[N],sta[N];\nbool vis[N];\nint tot,cnt,top,sum,root;\nlong long ans;\nint n,l,w;\ninline void add(int from,int to,int val){\n\t++tot;\n\te[tot].from=from;\n\te[tot].to=to;\n\te[tot].val=val;\n\te[tot].nxt=last[from];\n\tlast[from]=tot;\n}\nvoid get_root(int u,int fa){\n\tson1[u]=0;\n\tsize[u]=1;\n\tson2[u]=dep[u]=dep[fa]+1;//son2\u521d\u59cb\u503c\n\tfor(int i=last[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(!vis[v]&&v!=fa){\n\t\t\tget_root(v,u);\n\t\t\tsize[u]+=size[v];\n\t\t\tson1[u]=max(size[v],son1[u]);\n\t\t\tson2[u]=max(son2[v],son2[u]);//\u66f4\u65b0son2\u503c\n\t\t}\n\t}\n\tson1[u]=max(sum-size[u],son1[u]);\n\tif(son1[u]<son1[root])\n\t\troot=u;\n}\nvoid get_dis(int u,int fa){\n\t++cnt;\n\ta[cnt]=dis1[u];\n\tb[cnt]=dis2[u];\n\tfor(int i=last[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(!vis[v]&&v!=fa){\n\t\t\tdis1[v]=dis1[u]+1;\n\t\t\tdis2[v]=dis2[u]+e[i].val;\n\t\t\tget_dis(v,u);\n\t\t}\n\t}\n}\nvoid calc(int u){\n\ttr.bit_ins(1,son2[u],0);\n\tint maxn=1;//\u8d4b\u503c\u4e3a1\n\tfor(int i=last[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(!vis[v]){\n\t\t\tcnt=0;\n\t\t\tdis1[v]=1;\n\t\t\tdis2[v]=e[i].val;\n\t\t\tget_dis(v,u);\n\t\t\tfor(int j=1;j<=cnt;++j)\n\t\t\t\tif(a[j]<=l&&b[j]<=w)\n\t\t\t\t\tans+=tr.bit_query(min(maxn,l-a[j]+1),w-b[j]);\n\t\t\tfor(int j=1;j<=cnt;++j)\n\t\t\t\tif(a[j]<=l&&b[j]<=w){\n\t\t\t\t\tsta[++top]=a[j];\n\t\t\t\t\ttr.bit_ins(a[j]+1,son2[u],b[j]);\n\t\t\t\t}\n\t\t\tmaxn=max(maxn,son2[v]);//\u4e0d\u5fd8\u8ddf\u65b0maxn\n\t\t}\n\t}\n\twhile(top){\n\t\ttr.clear(sta[top]+1,son2[u]);\n\t\ttop--;\n\t}\n\ttr.clear(1,son2[u]);\n\ttr.cnt=0;\n}\nvoid solve(int u){\n\tvis[u]=true;\n\tcalc(u);\n\tfor(int i=last[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(!vis[v]){\n\t\t\tson1[0]=sum=size[v];\n\t\t\troot=0;\n\t\t\tget_root(v,0);\n\t\t\tget_root(root,0);\n\t\t\tsolve(root);\n\t\t}\n\t}\n}\nint main(){\n\tn=read();\n\tl=read();\n\tw=read();\n\tint x,y;\n\tfor(int i=2;i<=n;++i){\n\t\tx=read();\n\t\ty=read();\n\t\tadd(i,x,y);\n\t\tadd(x,i,y);\n\t}\n\tson1[0]=sum=n;\n\troot=0;\n\tget_root(1,0);\n\tget_root(root,0);\n\tsolve(root);\n\tcout<<ans;\n}\n```",
        "postTime": 1609999133,
        "uid": 204705,
        "name": "KiDDOwithTopTree",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF293E \u3010Close Vertices\u3011"
    },
    {
        "content": "\u8003\u8651\u4e00\u4e2a\u975e\u5e38\u81ea\u7136\u7684\u60f3\u6cd5\uff1a\u70b9\u5206\u6cbb\u3002\n\n\u5bf9\u4e8e\u5206\u6cbb\u70b9 $u$\uff0c\u5bf9\u4e8e\u5728\u5b50\u6811 $u$ \u4e2d\u7684\u70b9 $i$\uff0c\u7ed9\u5b83\u5bc4\u4e00\u4e2a\u4e8c\u5143\u7ec4 $(a_i,b_i)$\uff0c\u8868\u793a $i$ \u8ddd\u79bb $u$ \u7684\u8fb9\u6743\u4e0e\u957f\u5ea6\u3002\n\n\u663e\u7136\u73b0\u5728\u6c42\u7684\u662f\u4e8c\u5143\u7ec4\u7684\u4e8c\u7ef4\u504f\u5e8f\uff0c\u4e0d\u4f1a\u6811\u5957\u6811\u600e\u4e48\u529e\uff0c\u76f4\u63a5 $\\text{CDQ}$ \u5206\u6cbb\u554a\uff01\n\n\u7b2c\u4e00\u7ef4\u7684\u503c\u57df\u5927\uff0c\u5c06\u5b83\u6392\u5e8f\uff0c\u7b2c\u4e8c\u7ef4\u76f4\u63a5\u6811\u72b6\u6570\u7ec4+\u53cc\u6307\u9488\u7ef4\u62a4\u3002\n\n\u4f46\u8fd9\u6837\u4f1a\u5bc4\uff0c\u56e0\u4e3a\u4f1a\u7b97\u91cd\uff0c$u$ \u7684\u5b50\u6811\u5185\u67d0\u4e24\u4e2a\u70b9\u53ef\u80fd\u4f1a\u540c\u65f6\u9009\uff0c\u90a3\u4e48\u76f4\u63a5\u8dd1\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u5b50\u6811\u5bb9\u65a5\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u7b97\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c\u70b9\u5206\u6cbb\u4e00\u4e2a\u8001\u54e5\uff0c$\\text{CDQ}$ \u4e00\u4e2a\u8001\u54e5\uff0c\u6811\u72b6\u6570\u7ec4\u4e00\u4e2a\u8001\u54e5\uff0c\u6700\u540e\u4e09\u4e2a\u8001\u54e5\uff0c\u590d\u6742\u5ea6 $\\Theta(n\\log^3 n)$\uff0c\u975e\u5e38\u7684\u5f3a\u5927\u554a\uff01\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#define rep(i,a,b) for(register int i=a;i<=b;++i)\n#define rev(i,a,b) for(register int i=a;i>=b;--i)\n#define gra(i,u) for(register int i=head[u];i;i=edge[i].nxt)\nusing namespace std;\ntypedef long long ll;\ninline int read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')s=s*10+(ch-'0'),ch=getchar();\n\treturn s*w;\n}\n\nconst int MAXN(2e5+10);\n\nint n,L,W;\n\nstruct E{int to,nxt,cost;};\nE edge[MAXN<<1];\n\nint head[MAXN],tot;\n\ninline void add_edge(int u,int v,int w)\n{\n\tedge[++tot].nxt=head[u];\n\thead[u]=tot;\n\tedge[tot].to=v;\n\tedge[tot].cost=w;\n\treturn;\n}\n\nint root,siz[MAXN],dp[MAXN],S;\nbool vis[MAXN];\n\ninline void findroot(int u,int fa)\n{\n\tsiz[u]=1,dp[u]=0;\n\tgra(i,u)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v==fa||vis[v]) continue;\n\t\tfindroot(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tdp[u]=Max(dp[u],siz[v]);\n\t}\n\tdp[u]=Max(dp[u],S-siz[u]);\n\tif(dp[u]<dp[root]||(!root)) root=u;\n\treturn;  \n}\n\nstruct BIT\n{\n\tint tree[MAXN];\n\t\n\tinline int lowbit(int x){return x&(-x);}\n\t\n\tinline void update(int x,int k)\n\t{\n\t\tfor(register int i=x;i<=n+1;i+=lowbit(i)) tree[i]+=k;\n\t\treturn;\n\t}\n\t\n\tinline int query(int x)\n\t{\n\t\tint res(0);\n\t\tfor(register int i=x;i;i-=lowbit(i)) res+=tree[i];\n\t\treturn res;\n\t}\n};\n\nBIT bit;\n\nint dep[MAXN],dis[MAXN],cnt;\n\ntypedef pair<int,int> P;\n\nP a[MAXN];\n\ninline void getdis(int u,int fa)\n{\n\ta[++cnt]=make_pair(dis[u],dep[u]);\n\tgra(i,u)\n\t{\n\t\tE e=edge[i];\n\t\tif(vis[e.to]||e.to==fa) continue;\n\t\tdep[e.to]=dep[u]+1,dis[e.to]=dis[u]+e.cost;\n\t\tgetdis(e.to,u);\n\t}\n\treturn;\n}\n\nll ans;\n\ninline ll CDQ(int l,int r)\n{\n\tif(l==r) return 0;\n\tint mid=(l+r)>>1;\n\tll res=CDQ(l,mid)+CDQ(mid+1,r);\n\tint j(mid+1);\n\trev(i,mid,l)\n\t{\n\t\twhile(j<=r&&a[i].first+a[j].first<=W) bit.update(a[j++].second+1,1);\n\t\tif(L-a[i].second+1>0)res+=bit.query(L-a[i].second+1);\n\t}\n\trep(i,mid+1,j-1) bit.update(a[i].second+1,-1);\n\treturn res;\n}\n\ninline ll solve(int u,int DEP,int DIS)\n{\n\tll res(0);\n\tcnt=0;\n\tdep[u]=DEP,dis[u]=DIS;\n\tgetdis(u,0);\n\tsort(a+1,a+1+cnt); \n\tres=CDQ(1,cnt);\n\treturn res;\n}\n\ninline void dfs(int u)\n{\n\tans+=solve(u,0,0);\n\tvis[u]=true;\n\tgra(i,u)\n\t{\n\t\tE e=edge[i];\n\t\tif(vis[e.to]) continue;\n\t\tS=siz[e.to],root=0;\n\t\tans=ans-solve(e.to,dep[e.to],dis[e.to]);\n\t\tfindroot(e.to,u);\n\t\tdfs(root);\n\t}\n\treturn;\n}\n\nint main()\n{\n\tn=read(),L=read(),W=read();\n\trep(i,1,n-1)\n\t{\n\t\tint p=read(),w=read();\n\t\tadd_edge(i+1,p,w),add_edge(p,i+1,w);\n\t}\n\tS=n;\n\tfindroot(1,0);\n\tdfs(root);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n/*\nDate : 2022/8/30 \nAuthor : UperFicial \nStart coding at : 18:25\nfinish debugging at :\n*/\n```",
        "postTime": 1661864189,
        "uid": 360511,
        "name": "UperFicial",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u3010CF293E Close Vertices\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\n\u7ed9\u4f60\u4e00\u68f5\u6709$n(n<=10^5)$\u4e2a\u70b9\u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u6709\u8fb9\u6743$w_i(0<=w_i<=10^4)$\uff0c\u5b9a\u4e49\u4e24\u4e2a\u70b9$(x,y)$\u7684\u8ddd\u79bb\u4e3a\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u8fb9\u6570\uff0c\u6743\u91cd\u4e3a\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u6743\u503c\u548c\u3002\u6c42\u6709\u591a\u5c11\u5bf9$(x,y)$\uff0c\u5176\u4e2d$x\u2260y$\uff0c\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e$l(l<=n)$\uff0c\u6743\u91cd\u5c0f\u4e8e\u7b49\u4e8e$w(0<=w<=10^9)$\u3002\n\n\u5206\u6790\uff1a\n\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u548c\u6743\u91cd\u663e\u7136\u53ef\u4ee5\u60f3\u5230\u70b9\u5206\u6cbb\u4e86\u3002\u8003\u8651\u4e00\u68f5\u5b50\u6811\u5bf9\u4e8e\u524d\u9762\u7684\u5b50\u6811\u7684\u8d21\u732e\u3002\u5148\u53ea\u8003\u8651\u4e00\u7ef4\u8ddd\u79bb\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5f53\u524d\u5b50\u6811\u8282\u70b9\u7684\u5230\u5f53\u524d\u6839\u7684\u8ddd\u79bb\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u628a\u524d\u9762\u7684\u5b50\u6811\u7684\u8282\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8fd9\u65f6\u5019\u53ea\u9700\u8981\u5206\u522b\u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u5c31\u53ef\u4ee5\u4e86\u3002\u5f53\u4e00\u4e2a\u6307\u9488\u53f3\u79fb\u4f7f\u8ddd\u79bb\u53d8\u5c0f\u65f6\uff0c\u53e6\u4e00\u4e2a\u6307\u9488\u53f3\u79fb\u589e\u5927\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\u590d\u6742\u5ea6\u662f\u4e0e\u8282\u70b9\u6570\u7ebf\u6027\u76f8\u5173\u7684\u3002\n\n\u5bf9\u4e8e\u4e24\u7ef4\u7684\u8bdd\uff0c\u7b2c\u4e00\u7ef4\u8fd8\u662f\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u800c\u7b2c\u4e8c\u4e2a\u6307\u9488\u53f3\u79fb\u65f6\uff0c\u628a\u8fd9\u4e9b\u8282\u70b9\u7684\u7b2c\u4e8c\u7ef4\u4e22\u5230\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u91cc\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u7edf\u8ba1\u7b54\u6848\u4e86\u3002\u7531\u4e8e\u8ddd\u79bb\u6700\u5927\u53ea\u6709$n-1$\uff0c\u800c\u6743\u503c\u80fd\u8fbe\u5230$10^9$\uff0c\u6240\u4ee5\u7b2c\u4e00\u7ef4\u5e94\u8be5\u8bbe\u4e3a\u6743\u503c\uff0c\u7b2c\u4e8c\u7ef4\u5e94\u8be5\u8bbe\u4e3a\u8ddd\u79bb\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#define LL long long\n\nconst int maxn=1e5+7;\n\nusing namespace std;\n\nint n,l,d,x,w,cnt,root,sum,head,tail;\nint t[maxn];\nLL ans;\nint size[maxn],vis[maxn],dis[maxn],len[maxn],f[maxn];\nint ls[maxn];\n\nstruct edge{\n    int y,w,next;\n}g[maxn*2];\n\nstruct rec{\n    int l,d;\n}h[maxn];\n\nqueue <int> q;\n\nvoid add(int x,int y,int w)\n{\n    g[++cnt]=(edge){y,w,ls[x]};\n    ls[x]=cnt;\n}\n\nbool cmp1(rec x,rec y)\n{\n    return x.d<y.d;\n}\n\nbool cmp2(rec x,rec y)\n{\n    return x.d>y.d;\n}\n\nvoid findroot(int x,int fa)\n{\n    size[x]=1;\n    f[x]=0;\n    for (int i=ls[x];i>0;i=g[i].next)\n    {\n        int y=g[i].y;\n        if ((y==fa) || (vis[y])) continue;\n        findroot(y,x);\n        size[x]+=size[y];\n        f[x]=max(f[x],size[y]);\n    }\n    f[x]=max(f[x],sum-size[x]);\n    if ((f[x]<f[root]) || (!root)) root=x;\n}\n\nint lowbit(int x)\n{\n    return x&(-x);\n}\n\nvoid updata(int x,int k)\n{\n    while (x<=n)\n    {\n        t[x]+=k;\n        x+=lowbit(x);\n    }\n}\n\nint getsum(int x)\n{\n    int sum=0;\n    while (x>0)\n    {\n        sum+=t[x];\n        x-=lowbit(x);\n    }\n    return sum;\n}\n\nvoid dfs(int x,int fa)\n{\n    size[x]=1;\n    for (int i=ls[x];i>0;i=g[i].next)\n    {\n        int y=g[i].y;\n        if ((y==fa) || (vis[y])) continue;\n        len[y]=len[x]+1;\n        dis[y]=dis[x]+g[i].w;\n        h[++tail]=(rec){len[y],dis[y]};\n        dfs(y,x);\n        size[x]+=size[y];\n        if (x==root)\n        {\n            sort(h+1,h+head+1,cmp1);\n            sort(h+head+1,h+tail+1,cmp2);\n            int k=1;\n            for (int j=head+1;j<=tail;j++)\n            {\n                while ((h[k].d+h[j].d<=d) && (k<=head))\n                {\n                    updata(h[k].l+1,1);\n                    k++;\n                }\n                ans+=(LL)getsum(l-h[j].l+1);\n            }\n            for (int g=1;g<k;g++) updata(h[g].l+1,-1);\n            head=tail;\n            q.push(y);\n        }\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d%d\",&n,&l,&d);\t\n    for (int i=2;i<=n;i++)\n    {\n        scanf(\"%d%d\",&x,&w);\n        add(i,x,w);\n        add(x,i,w);\n    }\t\n    q.push(1);\n    size[1]=n;\t\n    while (!q.empty())\n    {\n        int x=q.front();\n        q.pop();\n        sum=size[x];\n        root=0;\n        findroot(x,0);\n        len[root]=dis[root]=0;\n        head=1; tail=1;\n        h[1]=(rec){0,0};\n        dfs(root,0);\n        vis[root]=1;\n    }\n    printf(\"%lld\",ans);\n}\n```",
        "postTime": 1533206019,
        "uid": 18895,
        "name": "liangzihao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF293E \u3010Close Vertices\u3011"
    },
    {
        "content": "\u53d1\u73b0\u9898\u89e3\u533a\u7684\u5199\u6cd5\u8ddf\u6211\u7684\u90fd\u4e0d\u592a\u4e00\u6837\u5462..\n\n\u5982\u679c\u53ea\u8003\u8651 $i$ \u5230 $j$ \u7684\u8fb9\u6743\u4e0d\u8d85\u8fc7 $w$\uff0c\u90a3\u5c31\u662f\u4e00\u4e2a\u70b9\u5206\u6cbb\u6a21\u677f\uff08P4178\uff09\u3002\n\n\u90a3\u4e48\u52a0\u4e0a\u957f\u5ea6\u4e0d\u8d85\u8fc7 $l$ \u7684\u9650\u5236\u4ee5\u540e\uff0c\u8be5\u600e\u4e48\u89e3\u51b3\uff1f\n\n\u8003\u8651\u5728\u8ba1\u7b97\u6bcf\u4e2a\u91cd\u5fc3\uff08\u5373\u5b50\u95ee\u9898\u7684\u6839\u8282\u70b9\uff09\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u65f6\uff0c\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u6765\u6765\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u957f\u5ea6\uff0c\u518d\u6765\u8fdb\u884c\u7edf\u8ba1\u3002\n\n\u4e0d\u8fc7 \u6a21\u677f $+$ \u6811\u72b6\u6570\u7ec4 \u7684\u505a\u6cd5\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u4f1a\u7b97\u91cd\uff0c\u5177\u4f53\u6307\u7684\u662f\u540c\u5b50\u6811\u5185\u7684\u4e24\u4e2a\u8282\u70b9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u53ef\u80fd\u4f1a\u88ab\u591a\u7b97\u3002\u89e3\u51b3\u65b9\u6cd5\u4e5f\u4e0d\u96be\u60f3\uff0c\u679a\u4e3e\u91cd\u5fc3\u7684\u6bcf\u4e2a\u513f\u5b50\u5c31\u884c\u4e86\u3002\u8fd9\u6837\u4e00\u6765\u590d\u6742\u5ea6\u4ecd\u662f\u6b63\u786e\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O(n \\log^2 n)}$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n)$\u3002\n\n[AC Code](https://codeforces.com/contest/293/submission/188824912)",
        "postTime": 1674039553,
        "uid": 486484,
        "name": "Gaode_Sean",
        "ccfLevel": 6,
        "title": "CF293E \u9898\u89e3"
    },
    {
        "content": "### [\u3010\u539f\u9898\u94fe\u63a5\u3011](https://www.luogu.com.cn/problem/CF293E)\n\n\u770b\u4e86\u9898\u89e3\u533a\u7684 dalao \u4eec\u5f88\u591a\u7528\u4e86\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u7b54\u6848\uff0c\u4f46\u6211\u5e76\u4e0d\u662f\u5f88\u61c2\uff0c\u6240\u4ee5\u5199\u4e00\u4e86\u4e2a\uff08\u8c8c\u4f3c\uff09\u6613\u61c2\u4e00\u4e9b\u7684\u9898\u89e3\u3002\n\n## \u9898\u76ee\u5206\u6790\n\n\u770b\u5230\u8def\u5f84\u7edf\u8ba1\uff0c\u57fa\u672c\u4e0a\u5c31\u662f\u70b9\u5206\u6cbb\u7684\u9898\u4e86\u3002\u800c\u8fd9\u9898\u786e\u5b9e\u5c31\u662f\u70b9\u5206\u6cbb\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u67d0\u4e2a\u91cd\u5fc3\u5bf9\u5e94\u7684\u5b50\u6811\uff0c\u66b4\u529b\u6c42\u51fa\u5176\u4e2d\u6bcf\u4e2a\u70b9\u5230\u6839\u7684 $dis_1$\uff08\u7ecf\u8fc7\u8fb9\u7684\u957f\u5ea6\uff09\u548c $dis_2$\uff08\u7ecf\u8fc7\u8fb9\u7684\u6743\u503c\uff09\n\n\u7136\u540e\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u7ec4 $dis_{1,u},\\ dis_{2,u}$ \u6c42\u51fa\u6709\u591a\u5c11\u4e2a\u70b9\u80fd\u591f\u4e0e\u5176\u5339\u914d\u4e14\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u627e\u5230\u6ee1\u8db3 $\\displaystyle{\\begin{cases}dis_{1,u}+dis_{1,v}\\le l\\\\dis_{2,u}+dis_{2,v}\\le w\\end{cases}}$ \u7684 $v$ \u7684\u6570\u91cf\u3002\n\n\u8f6c\u6362\u4e00\u4e0b\uff0c\u5c31\u662f $\\displaystyle{\\begin{cases}dis_{1,v}\\le l-dis_{1,u}\\\\dis_{2,v}\\le w-dis_{2,u}\\end{cases}}$\uff0c\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4e8c\u7ef4\u504f\u5e8f\u3002\n\n\u4f46\u662f\u672c\u849f\u84bb\u5e76\u6ca1\u6709\u641e\u61c2\u6811\u72b6\u6570\u7ec4\u662f\u600e\u4e48\u505a\u7684\uff0c\u6240\u4ee5\u8fd8\u662f\u9009\u62e9\u5c06\u6240\u6709\u70b9\u6309\u7167 $dis_2$ \u6392\u5e8f\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u4e3b\u5e2d\u6811\u6765\u7ef4\u62a4\u504f\u5e8f\u3002\u5176\u4e2d\uff0c\u4e3b\u5e2d\u6811\u7684\u4e0b\u6807\u4ee3\u8868 $dis_1$\uff0c\u800c\u6839\u7684\u7f16\u53f7\u4ee3\u8868 $dis_2$\u3002\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a $u$ \u67e5\u51fa\u6765\u7b26\u5408\u6761\u4ef6\u7684 $v$ \u7684\u6570\u91cf\uff0c\u8bb0\u4f5c $cnt_u$\uff0c\u7b54\u6848\u8c8c\u4f3c\u5c31\u662f $\\displaystyle\\frac{\\sum cnt_u}{2}$\uff0c\u4e0d\u662f\u5417\uff1f\n\n\u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff1a\u5982\u679c $2dis_{1,u}\\le l$ \u4e14 $2dis_{2,u}\\le w$\uff0c\u90a3\u4e48 $u$ \u662f\u53ef\u4ee5\u81ea\u5df1\u548c\u81ea\u5df1\u914d\u5bf9\u7684\u3002\u4f46\u662f\u89c2\u5bdf\u4e00\u4e0b\u6c42 $cnt_u$ \u7684\u8fc7\u7a0b\u4f1a\u53d1\u73b0\u8fd9\u91cc $(u,u)$ \u53ea\u4f1a\u88ab\u7b97\u4e00\u6b21\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u65f6\u5c06 $cnt_u$ \u518d $+1$ \u5c31\u884c\u4e86\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^2n)$\uff0c\u5e38\u6570\u7a0d\u5927\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n/*\n\u7701\u7565\u5feb\u8bfb\u5feb\u5199\u6a21\u677f\uff0c\u5373\u4e0b\u9762\u7684 qin\u3001qout\u3002\n*/\n\ntypedef long long LL;\nconst int INF=0x7fffffff;\nint n,k1,k2;\nLL ans;\nstruct Edge{ int to,w,nxt; }e[200005];\nint cnt,head[100005];\ninline void addEdge(int u,int v,int w)\n\t{ e[++cnt]=(Edge){v,w,head[u]},head[u]=cnt; }\nint siz[100005],mxs[100005];\nbool vis[100005];\nvoid getRoot(int u,int &rt,int whole,int fa=0)\n{\n\tsiz[u]=1,mxs[u]=0;\n\tfor(int i=head[u],v;v=e[i].to;i=e[i].nxt)\n\t\tif(v!=fa && !vis[v])\n\t\t{\n\t\t\tgetRoot(v,rt,whole,u),siz[u]+=siz[v];\n\t\t\tmxs[u]=max(mxs[u],siz[v]);\n\t\t}\n\tmxs[u]=max(mxs[u],whole-siz[u]);\n\tif(mxs[u]<mxs[rt])\trt=u;\n}\nstruct Dist\n{\n\tLL d1,d2;\n\tDist(LL _d1=0,LL _d2=0): d1(_d1),d2(_d2){}\n\tinline bool operator <(const Dist &b)const\n\t\t{ return d2<b.d2; }\n}dis[100005];\nint tot;\nvoid dfs2(int u,LL d1,LL d2,int fa=0)\n{\n\tif(d1>k1 || d2>k2)\treturn;\n\tdis[++tot]=Dist(d1,d2);\n\tfor(int i=head[u],v;v=e[i].to;i=e[i].nxt)\n\t\tif(v!=fa && !vis[v])\n\t\t\tdfs2(v,d1+1,d2+e[i].w,u);\n}\nstruct TreeNode{ int sum,lc,rc; }t[2000005];\nint rt[100005];\n#define LC t[i].lc\n#define RC t[i].rc\nvoid modify(int p,int &i,int l=0,int r=n)\n{\n\tt[++cnt]=t[i],t[i=cnt].sum++;\n\tif(l!=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(mid>=p)\tmodify(p,LC,l,mid);\n\t\telse\tmodify(p,RC,mid+1,r);\n\t}\n}\nint query(int lq,int rq,int i,int l=0,int r=n)\n{\n\tif(!i)\treturn 0;\n\tif(l>=lq && r<=rq)\treturn t[i].sum;\n\tint mid=(l+r)>>1,res=0;\n\tif(mid>=lq)\tres+=query(lq,rq,LC,l,mid);\n\tif(mid<rq)\tres+=query(lq,rq,RC,mid+1,r);\n\treturn res;\n}\nLL calc(int u,LL d1,LL d2)\n{\n\ttot=cnt=0,dfs2(u,d1,d2),sort(dis+1,dis+tot+1);\n\tLL res=0;\n\tfor(int i=1;i<=tot;i++)\tmodify(dis[i].d1,rt[i]=rt[i-1]);\n\tfor(int i=1;i<=tot;i++)\n\t{\n\t\tint v=upper_bound(dis+1,dis+tot+1,Dist(0,k2-dis[i].d2))-dis-1;\n\t\tres+=query(0,k1-dis[i].d1,rt[v]);\n\t\tif(2*dis[i].d1<=k1 && 2*dis[i].d2<=k2)\tres++;\n\t}\n\treturn res/2;\n}\nvoid dfs1(int u)\n{\n\tans+=calc(u,0,0),vis[u]=true;\n\tint rt;\n\tfor(int i=head[u],v;v=e[i].to;i=e[i].nxt)\n\t\tif(!vis[v])\n\t\t{\n\t\t\tans-=calc(v,1,e[i].w);\n\t\t\trt=0,getRoot(v,rt,siz[v]);\n\t\t\tdfs1(rt);\n\t\t}\n}\nint main()\n{\n\tqin>>n>>k1>>k2;\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint v,w;qin>>v>>w;\n\t\taddEdge(i,v,w),addEdge(v,i,w);\n\t}\n\tint rt=0;\n\tmxs[0]=INF,getRoot(1,rt,n),dfs1(rt);\n\tqout<<ans-n;\n//\treturn qout.flush(),0;\n}\n```\n",
        "postTime": 1636207847,
        "uid": 279800,
        "name": "ExplodingKonjac",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011CF293E Close Vertices"
    },
    {
        "content": "[Close Vertices](https://www.luogu.com.cn/problem/CF293E)\n\n\u70b9\u5206\u6cbb\u3002\n\n\u9996\u5148\u8003\u8651\u5982\u679c\u53ea\u6709 $w$ \u4e00\u7ef4\u7684\u9650\u5236\u8be5\u600e\u4e48\u505a\uff0c\u5c31\u662f\u70b9\u5206\u6cbb\u7684\u677f\u5b50\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5206\u6cbb\u91cd\u5fc3\uff0c\u5904\u7406\u51fa\u5f53\u524d\u5206\u6cbb\u533a\u57df\u5185\u7684\u70b9\u5230\u5206\u6cbb\u91cd\u5fc3\u7684 $w$ \u503c\u548c $l$ \u503c\u7684\u548c\uff0c\u6392\u5e8f\u4e4b\u540e\u7528\u53cc\u6307\u9488\u626b\u63cf\u4e00\u904d\u5c31\u884c\u3002\n\n\u5c06 $w$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e4b\u540e\u7528\u4e00\u4e2a\u5de6\u6307\u9488\u5355\u8c03\u5411\u53f3\u626b\u63cf\uff0c\u53f3\u6307\u9488\u6307\u5411\u5f53\u524d\u5e8f\u5217\u4e2d\u7684\u6700\u5927\u7684\u80fd\u4e0e $w_l$ \u76f8\u52a0\u4e4b\u540e\u5c0f\u4e8e\u7b49\u4e8e\u9650\u5236\u7684\u503c\u7684\u4f4d\u7f6e\uff0c\u5f62\u8c61\u5730\u8bf4\u5c31\u662f\uff1a\n\n$$ w_l + w_r \\leq w_{\\lim}\\ ,\\ w_l + w_{r+1} > w_{\\lim} $$\n\n\u7531\u4e8e $w$ \u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u6240\u4ee5\u53f3\u6307\u9488\u5355\u8c03\u5411\u53f3\u79fb\uff0c\u5f53\u6ca1\u6709 $l_{\\lim}$ \u7684\u9650\u5236\u65f6\uff0c\u533a\u95f4 $w_{l+1 \\sim r}$ \u4e2d\u7684\u70b9\u90fd\u80fd\u4e0e $w_l$ \u5339\u914d\u5f62\u6210\u4e00\u6761\u7ecf\u8fc7\u5206\u6cbb\u91cd\u5fc3\u4e14 $\\sum w \\leq w_{\\lim}$ \u7684\u8def\u5f84\u3002\n\n\u63a5\u4e0b\u6765\u5728 $w_{\\lim}$ \u7684\u9650\u5236\u4e0b\u8003\u8651 $l_{\\lim}$ \u7684\u9650\u5236\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u77e5\u9053\u5728 $w_{l+1 \\sim r}$ \u8fd9\u4e9b\u503c\u5bf9\u5e94\u7684\u70b9\u4e2d\u6709\u54ea\u4e9b\u70b9\u80fd\u4e0e\u5de6\u6307\u9488\u7684\u70b9\u5339\u914d\u5f62\u6210\u4e00\u6761 $\\sum l \\leq l_{\\lim}$  \u7684\u8def\u5f84\u3002\n\n\u7531\u4e8e $l$ \u503c\u7684\u4e0a\u9650\u662f $10^5$ \uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06 $l$ \u6620\u5c04\u5230\u6811\u72b6\u6570\u7ec4\u4e0a\uff0c\u53ef\u4ee5\u5c06 $l$ \u503c\u4f5c\u4e3a\u6811\u72b6\u6570\u7ec4\u4e0b\u6807\uff0c\u4e00\u5f00\u59cb\u5c06\u5e8f\u5217\u4e0a\u7684\u70b9\u7684 $l$ \u503c\u90fd\u52a0\u5165\u5230\u6811\u72b6\u6570\u7ec4\u4e2d\uff0c\u5f53\u5de6\u53f3\u6307\u9488\u5411\u4e2d\u79fb\u52a8\u65f6\u5c31\u4e00\u4e2a\u4e00\u4e2a\u5730\u5c06\u70b9\u5bf9\u5e94\u7684\u4fe1\u606f\u4ece\u6811\u72b6\u6570\u7ec4\u4e0a\u5220\u53bb\u3002\n\n\u5339\u914d\u65f6\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u4fe1\u606f\u5c31\u662f\u5de6\u53f3\u6307\u9488\u5bf9\u5e94\u5730\u533a\u95f4\u4e2d\u7684\u70b9\u7684\u4fe1\u606f\uff0c\u4e8e\u662f\u76f4\u63a5\u67e5\u8be2\u6709\u591a\u5c11\u70b9\u80fd\u4e0e\u5de6\u6307\u9488\u6307\u5411\u7684\u70b9\u5339\u914d\u5373\u53ef\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O(n\\log^2 n)}$ \u3002\n\n\u65e2\u7136\u4f60\u80fd\u627e\u5230\u8fd9\u9898\uff0c\u6211\u76f8\u4fe1\u4f60\u80fd\u77ac\u95f4\u505a\u51fa\u6765\u7684\u3002\n\n```Code:```\n\n```cpp\n#include<bits/stdc++.h>\n#define fi first\n#define se second\ntypedef long long LL;\ntypedef long double LD;\nusing namespace std;\nconst LL N=100010,M=1000010,INF=0x3f3f3f3f;\ninline LL max(LL x,LL y){return x>y?x:y;}\ninline LL min(LL x,LL y){return x<y?x:y;}\ninline void swap(LL &x,LL &y){x^=y^=x^=y;}\nLL head[N],ver[M],edge[M],Next[M],tot;\nLL n,L,W,rt,ans,c[N],d[N],vis[N],size[N];\nvector<pair<LL, LL> > v;// fi -> W se -> L\nvoid add(LL x,LL y){\n\tfor(++x;x<N;x+=x&-x)c[x]+=y;\n}\nLL ask(LL x){\n\tLL res=0;x=max(x,0)+1;\n\tfor(;x;x-=x&-x)res+=c[x];\n\treturn res;\n}\nvoid add(LL x,LL y,LL z){\n\tver[++tot]=y,edge[tot]=z,Next[tot]=head[x],head[x]=tot;\n}\nvoid get_size(LL x,LL fa){\n\tsize[x]=1;\n\tfor(LL i=head[x];i;i=Next[i]){\n\t\tLL y=ver[i];\n\t\tif(y==fa||vis[y])continue;\n\t\tget_size(y,x);\n\t\tsize[x]+=size[y];\n\t}\n}\nvoid get_rt(LL x,LL fa,LL sum){\n\tsize[x]=1;\n\tLL flag=1;\n\tfor(LL i=head[x];i;i=Next[i]){\n\t\tLL y=ver[i];\n\t\tif(y==fa||vis[y])continue;\n\t\tget_rt(y,x,sum);\n\t\tsize[x]+=size[y];\n\t\tif(size[y]>sum/2)flag=0;\n\t}\n\tif(flag&&sum-size[x]<=sum/2)rt=x;\n}\nvoid get_dis(LL x,LL fa,LL val,LL dis){\n\tv.push_back(make_pair(val,dis));\n\tif(val>=W||dis>=L)return;\n\tfor(LL i=head[x];i;i=Next[i]){\n\t\tLL y=ver[i],z=edge[i];\n\t\tif(y==fa||vis[y])continue;\n\t\tget_dis(y,x,val+z,dis+1);\n\t}\n}\nvoid calc(LL x){\n\tfor(LL i=head[x];i;i=Next[i]){\n\t\tLL y=ver[i],z=edge[i];\n\t\tif(vis[y])continue;\n\t\tv.clear();\n\t\tget_dis(y,x,z,1);\n\t\tsort(v.begin(),v.end());\n\t\tfor(pair<LL, LL> z:v)add(z.se,1);\n\t\tfor(LL l=0,r=v.size()-1;l<(LL)v.size();l++){\n\t\t\tadd(v[l].se,-1);\n\t\t\twhile(l<r&&v[l].fi+v[r].fi>W)add(v[r--].se,-1);\n\t\t\tif(l>=r)break;\n\t\t\tans-=ask(L-v[l].se);\n\t\t}\n\t}\n\tv.clear();\n\tget_dis(x,0,0,0);\n\tsort(v.begin(),v.end());\n\tfor(pair<LL, LL> z:v)add(z.se,1);\n\tfor(LL l=0,r=v.size()-1;l<(LL)v.size();l++){\n\t\tadd(v[l].se,-1);\n\t\twhile(l<r&&v[l].fi+v[r].fi>W)add(v[r--].se,-1);\n\t\tif(l>=r)break;\n\t\tans+=ask(L-v[l].se);\n\t}\n}\nvoid solve(LL x){\n\tvis[x]=1;\n\tcalc(x);\n\tfor(LL i=head[x];i;i=Next[i]){\n\t\tLL y=ver[i];\n\t\tif(vis[y])continue;\n\t\tget_size(y,x);\n\t\tget_rt(y,x,size[y]);\n\t\tsolve(rt);\n\t}\n}\nint main(){\n\tscanf(\"%lld%lld%lld\",&n,&L,&W);\n\tfor(LL i=1;i<n;i++){\n\t\tLL p,w;\n\t\tscanf(\"%lld%lld\",&p,&w);\n\t\tadd(i+1,p,w),add(p,i+1,w);\n\t}\n\tget_size(1,0);\n\tget_rt(1,0,n);\n\tsolve(rt);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1616928741,
        "uid": 137242,
        "name": "Dia\u043esi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF293E \u3010Close Vertices\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u6c42\u6811\u4e0a\u6ee1\u8db3 $i$ \u5230 $j$ \u7684**\u8def\u5f84\u957f\u5ea6**\u4e0d\u8d85\u8fc7 $kk$ \uff0c\u4e14**\u70b9\u6743\u548c**\u4e0d\u8d85\u8fc7 $k$ \u7684\u70b9\u5bf9 $(i,j)$ \u7684\u4e2a\u6570   \n###$Solution$  \n\u9996\u5148\uff0c\u8fd9\u9053\u9898\u660e\u663e\u662f\u70b9\u5206\u6cbb\uff0c\u4e14\u4e0e[\u8fd9\u9898](https://www.luogu.com.cn/problem/P4178)\u5341\u5206\u76f8\u50cf\uff0c\u53ea\u4e0d\u8fc7\u591a\u4e86**\u8def\u5f84\u957f\u5ea6**\u8fd9\u4e00\u7ef4\u7684\u9650\u5236  \n\u50cf\u90a3\u9898\u4e00\u6837\uff0c\u5728\u70b9\u5206\u6cbb\u6bcf\u5c42\u5904\u7406\u5f53\u524d $root$ \u65f6\uff0c\u8003\u8651\u679a\u4e3e\u6bcf\u6761\u4ece $root$ \u51fa\u53d1\u7684**\u5404\u4e2a\u5b50\u6811**\u76f8\u4e92\u95f4\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u53ef\u907f\u514d\u5bb9\u65a5   \n\u82e5\u67d0\u5b50\u6811\u4e2d\u7684\u70b9\u81ea\u8eab\u4ee5\u6ee1\u8db3\u957f\u5ea6 $\\leq kk$ \uff0c\u4e14\u70b9\u6743\u548c $\\leq k$ \uff0c\u76f4\u63a5\u8ba1\u5165\u7b54\u6848  \n\u7136\u540e\u5bf9\u6bcf\u4e2a\u5b50\u6811\u518d\u5c06\u5b50\u6811\u4e2d\u7684\u70b9\u5230\u6839\u7684**\u70b9\u6743\u548c**\u6392\u5e8f\uff0c\u518d\u7edf\u8ba1\u4e0e\u5728\u5b83\u4e4b\u524d\u88ab\u904d\u5386\u8fc7\u7684\u5b50\u6811\u95f4\u7684\u7b54\u6848\uff0c\u4fbf\u53ef\u5199\u51fa\u4e00\u4e2a\u6734\u7d20\u7b97\u6cd5\uff1a\n```cpp\n//\u4ee5\u4e0b\u4e2dd\u4e3a\u70b9\u5230\u6839\u7684\u70b9\u6743\u548c\uff0cdd\u4e3a\u70b9\u5230\u6839\u7684\u8def\u5f84\u957f\uff0cq\u4e3a\u76ee\u524d\u7edf\u8ba1\u5230\u7684d\u4e0edd\nvoid work(int x){\n\tcnt=0;\n\tfor(int i=h[x];i;i=nextn[i]){\n\t\tint y=to[i];\n\t\tif(b[y])continue;\n\t\ttot=0,dfs(y,x,w[i],1);//\u5904\u7406\u51fa\u5b50\u6811\u4e2d\u7684tmp[].d\u3001tmp[].dd\n\t\tsort(tmp+1,tmp+tot+1);//\u5bf9.d\u6392\u5e8f\n\t\tfor(int j=1;j<=tot;j++){\n\t\t\tfor(int i=1;i<=cnt&&q[i].d<=k-tmp[j].d;i++)if(q[i].dd<=kk-tmp[j].dd)ans++;//\u66b4\u529b\n\t\t\tif(tmp[j].d<=k&&tmp[j].dd<=kk)ans++;\n\t\t}\n\t\tmerge(tmp+1,tmp+tot+1,q+1,q+cnt+1,q0+1);//\u5408\u5e76\u4e24\u6bb5\u6709\u5e8f\u6570\u7ec4\uff0c\u4e0d\u7528sort\n\t\tcnt+=tot;\n\t\tfor(int i=1;i<=cnt;i++)q[i]=q0[i];//\u4fdd\u8bc1q\u4e2d.d\u6709\u5e8f\n\t}\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6\u660e\u663e\u4e0d\u5bf9\uff0c\u8003\u8651\u4f18\u5316\u4ee3\u7801\u4e2d\u66b4\u529b\u7684\u90a3\u4e00\u6bb5\u3002  \n\u7136\u800c\u6211\u4eec\u89c2\u5bdf\u5230\u7531\u4e8e $q$ \u4e2d $d$ \u7684\u9012\u589e\uff0c $k-tmp[j].d$ \u662f\u53ef\u4ee5\u7528  $\\operatorname{lowerbound}$ \u6c42\u51fa\u5728 $q$ \u4e2d\u7684\u4f4d\u7f6e\uff0c\u8bb0\u4e3a $pos$ \u3002  \n\u90a3\u4e48\uff0c\u5269\u4e0b\u7684\u4fbf\u662f\u7edf\u8ba1 $q[1\u00b7\u00b7\u00b7pos]$ \u4e2d $q[l].dd\\leq kk-tmp[j].dd$ \u7684 $l$ \u7684\u4e2a\u6570\u3002  \n\u800c\u540e\uff0c\u6211\u4eec\u53c8\u80fd\u53d1\u73b0\u57fa\u4e8e $tmp[j].d$ \u7684\u9012\u589e\uff0c $pos$ \u5e94\u8be5\u662f\u9012\u51cf\u7684\u3002  \n\u4e8e\u662f\uff0c\u6211\u4eec\u5c06 $tmp$ \u53cd\u8fc7\u6765\u6c42\uff0c $pos$ \u4fbf\u53ef\u9012\u589e\uff0c\u4e8e\u662f\u5728\u67e5\u8be2 $\\leq kk-tmp[j].dd$ \u7684\u4e2a\u6570\u65f6\u5c31\u53ef\u4ee5\u7528**\u6811\u72b6\u6570\u7ec4**\uff0c**\u4e00\u8fb9\u63d2\u5165\uff0c\u4e00\u8fb9\u67e5\u8be2**\u3002  \n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a $O(n\\log^2 n)$  \n\u603b\u4ee3\u7801\uff1a( \u5f53\u524d\u5728\u6d1b\u8c37 $rank2$ )\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10;\nint n,m,nn,cnt,tot,kk,x,y,rt;\nll k,ww,ans;\nint to[N],nextn[N],h[N];\nint mxsize[N],size[N];\nll w[N];\nstruct dis{\n\tll d;\n\tint dd;\n\tbool operator <(const dis &x)const{return x.d>d;}\n}tmp[N],q[N],q0[N];\nint t[N];\nbool b[N];\nint lowbit(int x){return x&(-x);}\nvoid update(int x,int v){\n\tfor(int i=x;i<=n;i+=lowbit(i))t[i]+=v;\n}\nll inquiry(int x){\n\tll res=0;\n\tfor(int i=x;i;i-=lowbit(i))res+=t[i];\n\treturn res;\n}\nvoid add(int x,int y,ll ww){\n\tcnt++;\n\tto[cnt]=y;\n\tnextn[cnt]=h[x];\n\th[x]=cnt;\n\tw[cnt]=ww;\n}\nvoid findrt(int x,int anc){\n\tmxsize[x]=0;\n\tsize[x]=1;\n\tfor(int i=h[x];i;i=nextn[i]){\n\t\tint y=to[i];\n\t\tif(y==anc||b[y])continue;\n\t\tfindrt(y,x);\n\t\tsize[x]+=size[y];\n\t\tmxsize[x]=max(mxsize[x],size[y]);\n\t}\n\tmxsize[x]=max(mxsize[x],nn-size[x]);\n\tif(mxsize[x]<mxsize[rt])rt=x;\n}\nvoid dfs(int x,int anc,ll dis1,int dis_){\n\ttmp[++tot]=(dis){dis1,dis_};\n\tif(dis1<=k&&dis_<=kk)ans++;//\u76f4\u63a5\u8ba1\u5165\u7b54\u6848\n\tfor(int i=h[x];i;i=nextn[i]){\n\t\tint y=to[i];\n\t\tif(y==anc||b[y])continue;\n\t\tdfs(y,x,dis1+w[i],dis_+1);\n\t}\n}\nvoid work(int x){\n\tcnt=0;\n\tfor(int i=h[x];i;i=nextn[i]){\n\t\tint y=to[i];\n\t\tif(b[y])continue;\n\t\ttot=0;\n\t\tdfs(y,x,w[i],1);\n\t\tsort(tmp+1,tmp+tot+1);\n\t\tint last=0;\n\t\tfor(int j=tot;j>=1;j--)if(tmp[j].d<k&&tmp[j].dd<kk){//\u526a\u679d\n\t\t\tint pos=lower_bound(q+1,q+cnt+1,dis{k-tmp[j].d+1,0})-q;//\u5e94\u662f\u5c0f\u4e8e\u7b49\u4e8ek-tmp[j].d\u7684\u6700\u5927\u4f4d\u7f6e\n\t\t\twhile(q[pos].d>k-tmp[j].d)pos--;\n\t\t\tfor(int l=last+1;l<=pos&&l<=cnt;l++)update(q[l].dd,1);\n\t\t\tans+=inquiry(kk-tmp[j].dd);\n\t\t\tlast=pos;\n\t\t}\n\t\tfor(int l=1;l<=last&&l<=cnt;l++)update(q[l].dd,-1);\n\t\tmerge(tmp+1,tmp+tot+1,q+1,q+cnt+1,q0+1);\n\t\tcnt+=tot;\n\t\tfor(int i=1;i<=cnt;i++)q[i]=q0[i];\n\t}\n}\nvoid solve(int x){\n\tb[x]=1;\n\twork(x);\n\tfor(int i=h[x];i;i=nextn[i]){\n\t\tint y=to[i];\n\t\tif(b[y])continue;\n\t\trt=0,mxsize[0]=n;\n\t\tnn=size[y];\n\t\tfindrt(y,x);\n\t\tsolve(rt);\n\t}\n}\nmain(){\n\tscanf(\"%d%d%lld\",&n,&kk,&k);\n\tfor(int i=1;i<n;i++){\n\t\tscanf(\"%d%lld\",&y,&ww);\n\t\tadd(i+1,y,ww),add(y,i+1,ww);\n\t}\n\trt=0,nn=n;\n\tmxsize[0]=n;\n\tfindrt(1,0);\n\tsolve(rt);\n\tprintf(\"%lld\",ans);\n}\n```",
        "postTime": 1615095362,
        "uid": 334380,
        "name": "Y_B_X",
        "ccfLevel": 7,
        "title": "CF293E[Close Vertices]"
    }
]