[
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF295B)\n\n## \u9898\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a\u5305\u542b $n$ \u4e2a\u70b9\u7684**\u6709\u5411\u5e26\u6743\u56fe**\uff0c\u7b2c $i$ \u6b21\u6c42\u51fa\u56fe\u4e2d\u4e24\u4e24\u76f8\u8fde\u7684\u70b9\u7684**\u6700\u77ed\u8def\u5f84**\u548c\uff0c\u5e76\u5220\u9664\u70b9 $x_i$\u3002\n\n## \u601d\u8def\n\n\u6b64\u9898\u63a8\u8350\u7528 Floyd\uff0c\u5faa\u73af $n$ \u6b21\u7684 Dijkstra \u548c SPFA \u80af\u5b9a\u4f1a\u8d85\u65f6\u3002\n\n\u6b63\u5411\u601d\u8def\u662f\u6309\u7167\u9898\u610f\u6bcf\u6b21\u5220\u9664\u70b9 $x_i$\uff0c\u4f46 Floyd \u4e0d\u652f\u6301\u5220\u9664\u70b9\uff0c\u5e76\u4e14\u8fd9\u6837\u505a\u4f1a\u5f88\u9ebb\u70e6\uff1a\u6bcf\u5230\u4e00\u4e2a\u70b9 $x_i$\u5c31\u8981\u505a\u4e00\u6b21\u590d\u6742\u5ea6\u4e3a $O(n^3)$ \u7684 Floyd\uff0c\u6574\u4f53\u590d\u6742\u5ea6\u4e3a $O(n^4)$\uff0c\u4e5f\u4f1a\u8d85\u65f6\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9006\u5411\u601d\u8003\uff0c\u770b\u6210\u6bcf\u6b21\u6dfb\u52a0\u4e00\u4e2a\u70b9 $x_i$\uff0c\u5e76\u8bb0\u5f55\u8be5\u70b9\u51fa\u73b0\u8fc7\u3002\u5728\u8ba1\u7b97\u603b\u548c\u65f6\u7279\u5224\u8fd9\u4e9b\u70b9\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u8bb0\u5f55\u7b54\u6848\u3002\u6700\u540e\u5012\u5e8f\u8f93\u51fa\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^3)$\u3002\n\n## \u4ee3\u7801\n\n\u4ee5\u4e0b\u4e3a\u6838\u5fc3\u4ee3\u7801\uff0c\u5176\u4f59\u90e8\u5206\u7528\u6ce8\u91ca\u7565\u8fc7\u3002\n\n```cpp\n//\u8f93\u5165n\n//\u8f93\u5165\u6709\u5411\u5e26\u6743\u56fe\n//\u8f93\u5165\u6570\u7ec4x\nfor(int l=n;l>=1;l--){//\u5faa\u73af\u6bcf\u4e00\u4e2a\u70b9\n\tint k=x[l];vis[k]=1;//\u6807\u8bb0\u5e76\u8bb0\u5f55\u6dfb\u52a0\u7684\u70b9\n\t\t\n\tfor(int i=1;i<=n;i++)//\u8fdb\u884c\u4e00\u6b21Floyd\t\n\t\tfor(int j=1;j<=n;j++)\n\t\t\td[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n\t   \n\tsum=0;\n\tfor(int i=1;i<=n;i++)//\u7edf\u8ba1\u6700\u77ed\u8def\u7684\u548c\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(vis[i]&&vis[j])\n\t\t\t\tsum+=d[i][j];\n\tans[l]=sum;//\u8bb0\u5f55\u7b54\u6848\n}\n//\u5012\u5e8f\u8f93\u51fa\u7b54\u6848\n```",
        "postTime": 1646824763,
        "uid": 572482,
        "name": "__Interstellar__",
        "ccfLevel": 4,
        "title": "CF295B \u9898\u89e3"
    },
    {
        "content": "### \u9996\u5148\u6765\u5398\u6e05\u4e00\u4e0b\u9898\u610f  \n- \u5728\u7b2ci\u6b65Greg\u5c06\u5220\u9664\u4e00\u4e2a\u70b9\u3002  \n- \u5728 _**\u5220\u9664\u4e4b\u524d**_ \u6211\u4eec\u8981\u6c42\u51fa\u5f53\u524d\u56fe\u4e2d\u6240\u6709\u6700\u77ed\u8def\u5f84\u7684\u548c\u3002  \n\n### \u5206\u6790  \n\u65e2\u7136\u662f\u6c42\u56fe\u4e2d\u6240\u6709\u6700\u77ed\u8def\u7684\u548c\uff0c\u6211\u4eec\u9996\u5148\u60f3\u5230\u7684\u662f\u7528Floyd\u7b97\u6cd5\uff0c\u5c06\u56fe\u4e2d\u6240\u6709\u7684\u6700\u77ed\u8def\u90fd\u7b97\u51fa\u6765\u5e76\u6c42\u548c\u3002  \n\u4e0d\u8fc7\uff0c\u9898\u76ee\u6709\u4e00\u4e2a\u8981\u6c42\uff1a\u6bcf\u4e00\u6b21\u8981\u5220\u9664\u4e00\u4e2a\u70b9\uff0c\u5728\u5220\u9664\u4e4b\u524d\u6c42\u548c\u3002  \n\u5220\u9664\u70b9\u770b\u8d77\u6765\u5341\u5206\u7684\u56f0\u96be~~\u6211\u592a\u5f31\u4e86\u4e0d\u77e5\u9053\u600e\u4e48\u505a~~\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u9006\u5411\u601d\u7ef4\uff1a\u5012\u7740\u6765\u770b\u8981\u5220\u9664\u7684\u70b9\uff0c\u5c31\u662f\u4f9d\u6b21\u8981\u6dfb\u52a0\u7684\u70b9\u4e86\u3002  \n\u6362\u4e00\u79cd\u8bf4\u6cd5\uff1a\u5047\u8bbe\u8981\u5220\u9664\u7684\u70b9\u5df2\u7ecf\u5168\u90e8\u5220\u9664\u4e86\uff01\u8fd9\u65f6\uff0c\u628a\u6700\u540e\u4e00\u4e2a\u8981\u5220\u9664\u7684\u70b9\u52a0\u8fdb\u56fe\uff08\u5b83\u4e4b\u524d\u7684\u70b9\u5df2\u7ecf\u5168\u90e8\u88ab\u5220\u9664\u4e86\uff09\uff0c\u7136\u540e\u5728\u6309\u9898\u76ee\u8981\u6c42\u6c42\u548c\uff08\u5bf9\u5e94\u4e8e\u5148\u6c42\u548c\u518d\u5220\u9664\uff0c\u8fd9\u65f6\u5148\u52a0\u70b9\u518d\u6c42\u548c\uff09\u3002\u4ee5\u6b64\u7c7b\u63a8\u3002  \n\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u4f9d\u6b21\u6c42\u51fa\u7b54\u6848\u3002\n\u5177\u4f53\u5b9e\u73b0\u8be6\u89c1\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\nusing namespace std;\nconst int N=501;\nint del[N]/*\u8981\u5220\u9664\u7684\u70b9*/,dist[N][N],n;\nlong long ans[N];\nbool avi[N]/*(available)\u5f53\u524d\u8be5\u70b9\u662f\u5426\u5728\u56fe\u4e2d*/;\ninline int read()\n{\n    int sum=0;\n    char ch=getchar();\n    while(!(ch>='0' && ch<='9'))\n        ch=getchar();\n    while(ch>='0' && ch<='9')\n        sum=sum*10+ch-'0',ch=getchar();\n    return sum;\n}\nint main()\n{\n    n=read();\n    for(int i=1; i<=n; ++i)\n        for(int j=1; j<=n; ++j)\n            dist[i][j]=read();\n    for(int i=1; i<=n; ++i)\n        del[i]=read();\n    for(int cur=n; cur; --cur) {\n        int k=del[cur];\n        avi[k]=true;//\u5c06\u5f53\u524d\u70b9\u52a0\u5165\u56fe\n        //Floyd\n        for(int i=1; i<=n; ++i)\n            for(int j=1; j<=n; ++j)\n                if(i!=j) {\n                    dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);\n                    if(avi[i] && avi[j])//\u53ea\u6709i\u4e0ej\u90fd\u5728\u56fe\u4e2d\u6700\u77ed\u8def\u624d\u6709\u610f\u4e49\n                        ans[cur]+=dist[i][j];//\u5f53\u524d\u5220\u9664\u8fc7\u7a0b\u6240\u6c42\u7684\u7b54\u6848\n                }\n    }\n    for(int i=1; i<=n; ++i)\n        printf(\"%I64d \",ans[i]);//\u6309\u7167\u8981\u6c42\u8f93\u51fa\n    return 0;\n}\n```\n\n#### **Thanks for watching.**",
        "postTime": 1558840126,
        "uid": 118402,
        "name": "Gerald_Chen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF295B \u3010Greg and Graph\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $N$ \u4e2a\u70b9\u7684\u5b8c\u5168\u56fe\uff0c\u6bcf\u6b21\u5220\u6389\u4e00\u4e2a\u70b9\uff0c\u8be2\u95ee\u5269\u4e0b\u6bcf\u4e00\u5bf9\u70b9\u7684\u6700\u77ed\u8def\u6743\u503c\u4e4b\u548c\u3002\n### \u89e3\u9898\u62a5\u544a\n\u4e3b\u8981\u662f Floyd + \u79bb\u7ebf\n\n\u770b\u5230\u8981\u6c42\u70b9\u5bf9\u6700\u77ed\u8def\u5f84\u548c\uff0c\u81ea\u7136\u60f3\u5230\u4e86 Floyd\u3002\u4f46\u662f Floyd \u4e0d\u652f\u6301\u5220\u9664\u3002\u3002\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53cd\u8fc7\u6765\u60f3\uff1a\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u70b9\uff0c\u6c42\u51fa\u52a0\u5165\u540e\u6bcf\u4e00\u5bf9\u70b9\u6700\u77ed\u8def\u6743\u503c\u7684\u548c\u3001\n\n\u662f\u4e0d\u662f\u5341\u5206\u7b80\u5355\u4e86\uff1f\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5012\u7740\u679a\u4e3e\u5220\u9664\u7684\u70b9\uff0c\u7528\u8fd9\u4e2a\u70b9\u6765\u677e\u5f1b\u5176\u4ed6\u7684\u70b9\uff0c\u7136\u540e\u7edf\u8ba1\u76ee\u524d\u5b58\u5728\u7684\u70b9\u7684\u7b54\u6848\u3002\n\n\u4e3a\u4ec0\u4e48\u662f\u6b63\u786e\u7684\u5462\uff1f\u56e0\u4e3a Floyd \u5bf9\u677e\u5f1b\u70b9\u7684\u987a\u5e8f\u6ca1\u6709\u8981\u6c42\u3002\n\n\u76f4\u63a5\u6309\u7167\u53cd\u8fc7\u6765\u7684\u987a\u5e8f\u8fdb\u884c Floyd \u5373\u53ef\u3002\n### \u4ee3\u7801\n```c++\n// Luogu \u4ea4\u4e0d\u4e0a\u53bb\u53ea\u80fd\u53bb Vjudge\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <climits>\n#include <cstdio>\n#include <vector>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n\n#define R register\n#define LL long long\n#define U unsigned\n#define FOR(i,a,b) for(R int i = a;i <= b;++i)\n#define RFOR(i,a,b) for(R int i = a;i >= b;--i)\n#define CLR(i,a) memset(i,a,sizeof(i))\n#define BR printf(\"--------------------\\n\")\n#define DEBUG(x) std::cerr << #x << '=' << x << std::endl\n\nnamespace fastIO{\n    #define BUF_SIZE 100000\n    #define OUT_SIZE 100000\n    #define ll long long\n    bool IOerror=0;\n    inline char nc(){\n        static char buf[BUF_SIZE],*p1=buf+BUF_SIZE,*pend=buf+BUF_SIZE;\n        if (p1==pend){\n            p1=buf; pend=buf+fread(buf,1,BUF_SIZE,stdin);\n            if (pend==p1){IOerror=1;return -1;}\n        }\n        return *p1++;\n    }\n    inline bool blank(char ch){return ch==' '||ch=='\\n'||ch=='\\r'||ch=='\\t';}\n    inline void read(int &x){\n        bool sign=0; char ch=nc(); x=0;\n        for (;blank(ch);ch=nc());\n        if (IOerror)return;\n        if (ch=='-')sign=1,ch=nc();\n        for (;ch>='0'&&ch<='9';ch=nc())x=x*10+ch-'0';\n        if (sign)x=-x;\n    }\n    inline void read(ll &x){\n        bool sign=0; char ch=nc(); x=0;\n        for (;blank(ch);ch=nc());\n        if (IOerror)return;\n        if (ch=='-')sign=1,ch=nc();\n        for (;ch>='0'&&ch<='9';ch=nc())x=x*10+ch-'0';\n        if (sign)x=-x;\n    }\n    #undef ll\n    #undef OUT_SIZE\n    #undef BUF_SIZE\n};\nusing namespace fastIO;\n// fread \u677f\u5feb\u8bfb\n\nconst int MAXN = 500 + 5;\nint f[MAXN][MAXN],N;\nint del[MAXN];\nbool tag[MAXN];\nLL ans[MAXN];\n// ans[i] \u8868\u793a\u540e i \u4e2a\u70b9\u7ec4\u6210\u7684\u56fe\u7684\u7b54\u6848\uff0ctag[i] \u8bb0\u5f55\u7b2c i \u4e2a\u70b9\u76ee\u524d\u662f\u5426\u5728\u56fe\u91cc\uff0cdel[i] \u662f\u5220\u9664\u70b9\u7684\u987a\u5e8f\n\nint main(){\n    read(N);\n    FOR(i,1,N)\n        FOR(j,1,N)\n        read(f[i][j]);\n    FOR(i,1,N) read(del[i]);\n    RFOR(p,N,1){\n        int k = del[p];\n        tag[k] = true;\n        FOR(i,1,N){\n            FOR(j,1,N){\n                f[i][j] = std::min(f[i][j],f[i][k] + f[k][j]);\n                if(tag[i] && tag[j]) ans[p] += f[i][j];\n            }\n        }\n    }\n    FOR(i,1,N) printf(\"%I64d \",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1536151823,
        "uid": 50075,
        "name": "RainAir",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF295B \u3010Greg and Graph\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u6b63\u5411\u6765\u89e3\u80af\u5b9a\u4f1a\u8d85\u65f6\uff0c\u6240\u4ee5\u6211\u4eec\u9006\u5411\u8003\u8651\uff0c\u76f8\u5f53\u4e8e\u6bcf\u6b21\u90fd\u6dfb\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u4ece\u540e\u5f80\u524d\u679a\u4e3e\u6bcf\u4e00\u6761\u5220\u9664\u7684\u70b9\uff0c\u8dd1\u4e00\u904dfloyed\u5c31\u884c\u4e86\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define long long ll;\nconst int maxn = 501;\nll mp[maxn][maxn], ans[maxn]\uff0cask[maxn];\nbool vis[maxn];\n\nint main()\n{\n    int n;\n    while(scanf(\"%d\", &n) != EOF)\n    {\n        memset(vis, false, sizeof(vis));\n        for(int i = 1; i <= n; i++)\n            for(int j = 1; j <= n; j++)\n                scanf(\"%I64d\", &mp[i][j]);\n        for(int i = 1; i <= n; i++)\n            scanf(\"%d\", &ask[i]);\n        int cont = 0;\n        for(int i = n; i >= 1; i--)\n        {\n            int now = ask[i];\n            vis[now] = true;\n            for(int j = 1; j <= n; j++)\n                for(int k = 1; k <= n; k++)\n                    mp[j][k] = min(mp[j][k], mp[j][now] + mp[now][k]);\n            ll sum = 0;\n            for(int j = 1; j <= n; j++)\n                for(int k = 1; k <= n; k++)\n                {\n                    if(vis[j] == false || vis[k] == false) continue;\n                    sum += mp[j][k];\n                }\n            ans[cont++] = sum;\n        }\n        for(int i = cont-1; i >= 0; i--)\n            printf(\"%I64d%c\", ans[i], i == 0 ? '\\n': ' ');\n    }\n    return 0;\n}\n\n```",
        "postTime": 1538697779,
        "uid": 105604,
        "name": "\u9189\u91cc\u6311\u706f\u770b\u5251",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF295B \u3010Greg and Graph\u3011"
    },
    {
        "content": "## \u9898\u610f\n- #### \u7ed9\u4f60\u4e00\u4e2a\u6709 $n$ \u4e2a\u70b9\u7684\u5355\u5411\u6709\u6743\u56fe\u548c $n$ \u6b21\u64cd\u4f5c\u3002\u6bcf\u6b21\u64cd\u4f5c\u90fd\u662f\u5220\u9664\u67d0\u4e00\u4e2a\u70b9\uff0c\u548c\u8fd9\u4e2a\u70b9\u8fde\u63a5\u7684\u6240\u6709\u8fb9\u4e5f\u4f1a\u88ab\u5220\u9664\u3002\n- #### \u5bf9\u4e8e\u6bcf\u4e00\u6b21\u64cd\u4f5c\uff0c\u8f93\u51fa\u64cd\u4f5c\u4e4b\u524d\u56fe\u4e2d\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84\u7684\u548c\u3002\n\n## \u505a\u6cd5\nFloyd \u7b97\u6cd5\u3002\n\n\u53ef\u4ee5\u628a\u5220\u70b9\u770b\u4f5c\u662f\u52a0\u70b9\u3002\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u6b21\u52a0\u70b9\u64cd\u4f5c\uff0c\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84\u90fd\u53ea\u53ef\u80fd\u901a\u8fc7\u52a0\u7684\u8fd9\u4e2a\u70b9\u6765\u66f4\u65b0\u3002\u53ea\u8981\u628a\u6bcf\u6b21\u52a0\u70b9\u540e\u7684\u6700\u77ed\u8def\u5f84\u548c\u5b58\u5728\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u6700\u540e\u5012\u5e8f\u8f93\u51fa\u5c31\u884c\u4e86\u3002\n\n## AC \u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint n,dis[505][505],delque[505]; // \u6700\u77ed\u8ddd\u79bb\uff0c\u5220\u70b9\u987a\u5e8f \nlong long ans[505]; // \u5b58\u7b54\u6848\u7684\u6570\u7ec4 \nbool hasdel[505]; // \u8be5\u70b9\u662f\u5426\u88ab\u5220\u9664 \n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tscanf(\"%d\",&dis[i][j]);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&delque[i]);\n\t\thasdel[delque[i]]=true; // \u5220\u6389\u4e86 \n\t}\n\tfor(int tail=n;tail>=1;tail--) // \u5012\u5e8f\u904d\u5386\uff0c\u52a0\u70b9 \n\t{\n\t\tint k=delque[tail]; // \u52a0\u7684\u662f\u54ea\u4e00\u4e2a\u70b9 \n\t\thasdel[k]=false;    // \u52a0\u56de\u6765\u4e86 \n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t{\n\t\t\t\tif(j==i)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(dis[i][k]+dis[k][j]<dis[i][j])\n\t\t\t\t{\n\t\t\t\t\tdis[i][j]=dis[i][k]+dis[k][j]; // \u677e\u5f1b \n\t\t\t\t}\n\t\t\t\tif(!hasdel[i]&&!hasdel[j]) // \u4e24\u4e2a\u70b9\u90fd\u6ca1\u6709\u88ab\u5220\u6389\u65f6\u6700\u77ed\u8def\u5f84\u624d\u6709\u610f\u4e49 \n\t\t\t\t{\n\t\t\t\t\tans[tail]+=dis[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tprintf(\"%I64d \",ans[i]); // \u6ce8\u610f\u4e00\u4e0b %I64d \n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n",
        "postTime": 1620041204,
        "uid": 251130,
        "name": "lovely_ckj",
        "ccfLevel": 0,
        "title": "CF295B Greg and Graph \u9898\u89e3"
    },
    {
        "content": "## \u55ef\uff0c\u8fd9\u662f\u4e00\u9053Floyd\u7684\u6a21\u677f\u9898\u3002\n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u52a0\u6df1\u5bf9Floyd\u7684\u7406\u89e3\uff0c\u662f\u4e2a\u597d\u9898\n\n\u8fd9\u9053\u9898\u5c31\u662f\u8bf4\u5efa\u597d\u8fb9\u4e4b\u540e\u628a\u70b9\u4e00\u4e2a\u4e00\u4e2a\u5220\u9664\uff0c\u7136\u540e\u7b97\u4e00\u4e0b\u56fe\u4e0a\u6700\u77ed\u8def\u7684\u548c\u3002\u55ef\uff1f\u90a3\u5012\u7740\u52a0\u70b9\u4e0d\u5c31\u662fFloyd\u7684\u6a21\u677f\u4e86\u5417\uff1f\u4ee3\u7801\u5f88\u7ec6\u8282\uff0c\u89c1\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=505;//n\u7684\u6700\u5927\u503c\nint n;\nint adj[MAXN][MAXN];//\u7528\u90bb\u63a5\u77e9\u9635\u5efa\u8fb9\nint x[MAXN];//\u5220\u70b9\u7684\u6570\u7ec4\nbool vis[MAXN];//vis\u6570\u7ec4\u662f\u770b\u73b0\u5728\u7684\u70b9\u6709\u6ca1\u6709\u5728\u56fe\u4e2d\nlong long ans[MAXN]; \nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tscanf(\"%d\",&adj[i][j]);//\u8bfb\u5165\u4e0d\u89e3\u91ca\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&x[i]);//\u628a\u5220\u9664\u7684\u70b9\u8bfb\u5165\n\t}\n\tfor(int k=n;k>=1;k--){//\u4e00\u5b9a\u662f\u53cd\u7740\u52a0\u70b9\n\t\tint flag=x[k];//flag\u5c31\u662f\u8fd9\u6b21\u52a0\u7684\u70b9\n\t\tvis[flag]=1;//\u628a\u8fd9\u4e2a\u70b9\u52a0\u5165\u56fe\u4e2d\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tadj[i][j]=min(adj[i][j],adj[i][flag]+adj[flag][j]);//Floyd\u6a21\u677f\uff0c\u4e0d\u89e3\u91ca\n\t\t\t}\n\t\t}\n\t\tlong long sum=0;//\u7b97\u4e00\u4e0b\u6700\u77ed\u8def\u4e4b\u548c\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tif(vis[i]&&vis[j]){//\u5982\u679c\u70b9\u90fd\u5728\u56fe\u4e2d\n\t\t\t\t\tsum+=adj[i][j];//\u90a3\u5c31\u52a0\u4e0a\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tans[k]=sum;//\u7ed9ans\u6570\u7ec4\n\t}\n\tfor(int i=1;i<=n;i++){//\u8fd9\u662f\u6b63\u7740\u8f93\u51fa\u54e6\n\t\tprintf(\"%I64d \",ans[i]);\n\t}\n\tprintf(\"\\n\");//\u6362\u884c\u662f\u4e2a\u4fe1\u4ef0\n\treturn 0;//\u5b8c\u7ed3\u6492\u82b1\n}\n```\n",
        "postTime": 1591409118,
        "uid": 219668,
        "name": "zhanghzqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF295B \u3010Greg and Graph\u3011"
    },
    {
        "content": "**1.\u9898\u610f\u5206\u6790**\n\n- \u7531\u4e8e\u9898\u76ee\u4e2d\u51fa\u73b0\u4e86\u6700\u77ed\u8def\u4e4b\u548c\uff0c\u8003\u8651\u4f7f\u7528 Floyd \u89e3\u51b3\u3002\n\n- \u53c8\u56e0\u4e3a\u9898\u76ee\u4e2d\u8981\u6c42\u4e0d\u505c\u5730\u201c\u5220\u70b9\u201d\uff0c\u5f88\u9ebb\u70e6\uff0c\u53ef\u4ee5\u8003\u8651\u53cd\u65b9\u5411\u52a0\u70b9\u3002\n\n- \u6211\u4eec\u53ef\u4ee5\u4ece\u5927\u5230\u5c0f\u5faa\u73af\u679a\u4e3e $x_i$ \uff0c\u5bf9\u4e8e\u6bcf\u6b21\u679a\u4e3e\uff0c\u5bf9 $x_i$ \u8fdb\u884c\u6807\u8bb0\uff0c\u5728 Floyd \u4e2d\u8fdb\u884c\u7279\u5224\u5373\u53ef\u3002\n\n**2.\u4e00\u4e9b\u5751\u70b9**\n\n- \u672c\u9898\u8981\u5f00 `long long` \uff0c \u5426\u5219\u4f1a\u70b8 `int` \u3002\n\n- \u5728 Floyd \u5185\u4e0d\u80fd\u8fd9\u4e48\u5199\uff1a\n\n```cpp\nif(!canUse[i] || !canUse[j])\n\tcontinue;\n\ndis[i][j]=min(dis[i][j],dis[i][x[l]]+dis[x[l]][j]);\n```\n\n\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5728\u540e\u7eed\u8f6c\u79fb\u65f6\u51fa\u73b0\u95ee\u9898\uff0c\u539f\u56e0\u662f\u6ca1\u6709\u8003\u8651\u9014\u4e2d\u7ecf\u8fc7 $x_l$ \u7684\u60c5\u51b5\uff0c\u6b63\u786e\u7684\u5199\u6cd5\u662f\uff1a\n\n```cpp\ndis[i][j]=min(dis[i][j],dis[i][x[l]]+dis[x[l]][j]);\n```\n\n\u800c\u5728\u540e\u7eed\u8fdb\u884c\u7279\u5224\u3002\n\n**AC Code:**\n\n```cpp\n//By: Luogu@\u26a1\u70ad\u6cbb\u90ce\u26a1(308854)\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nlong long dis[1000][1000];\nlong long x[1000];\nbool canUse[1000];\nlong long Sum[1000];\n\nint main()\n{\n\tint n;\n\n\tcin>>n;\n\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tcin>>dis[i][j];\n\n\tfor(int i=1;i<=n;i++)\n\t\tcin>>x[i];\n\n\tfor(int l=n;l>=1;l--)\n\t{\n\t\tcanUse[x[l]]=1;\n\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t{\n\t\t\t\tdis[i][j]=min(dis[i][j],dis[i][x[l]]+dis[x[l]][j]);\n\t\t\t}\n\n\t\tlong long sum=0;\n\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tif(canUse[i] && canUse[j])\n\t\t\t\t\tsum+=dis[i][j];\n\n\t\tSum[l]=sum;\n\t}\n\n\tfor(int i=1;i<=n;i++)\n\t\tcout<<Sum[i]<<\" \";\n}\n\n```\n",
        "postTime": 1637417963,
        "uid": 308854,
        "name": "tzl_Dedicatus545",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF295B \u3010Greg and Graph\u3011"
    },
    {
        "content": "#### \u524d\u8a00(feihua)\n\n\u505a\u5b8c\u633a\u4e45\u4e86\uff0c\u56de\u6765\u8865\u4e00\u7bc7\u9898\u89e3\uff0c\u4e3b\u8981\u662f\u8fd9\u4e2a\u9898\u76ee\u7684\u60f3\u6cd5\u601d\u8def\u8fd8\u662f\u5f88\u5999\u7684\u3002\n\n#### \u601d\u8def\uff1a\n\n\u505a\u6cd5\uff1a$Floyd$\u5373\u53ef\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u7b97\u6cd5\u80fd\u591f\u5141\u8bb8\u901a\u8fc7\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3aO($n^3$)\uff0c\u540c\u65f6\u53c8\u8ddf\u5168\u6e90\u6700\u77ed\u8def\uff08\u56e0\u4e3a\u662f\u8981\u6c42$\\sum_{u != v}{dis(u,v)}$\uff09\u6709\u5173\uff0c\u90a3\u4e48$Floyd$\u5f53\u7136\u662f\u9996\u9009\u4e86\u3002\n\n\u6bcf\u6b21\u5220\u8fb9\u540e\uff0c\u8dd1$Floyd$\uff0c\u8fd9\u6837\u5b50\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO($n^4$)\u7684\uff0c\u663e\u7136\u8fc7\u4e0d\u4e86\u8fd9\u4e00\u9898\u3002\n\n\u5982\u4f55\u4f18\u5316\uff1f\n\n\u6211\u4eec\u89c2\u5bdf\u5230$Floyd$\u7b97\u6cd5\u7684\uff08\u4f2a\uff09\u4ee3\u7801\uff1a\n```cpp\n\tfor(int i = 1 ; i <= n ; i ++)\n\t\tfor(int j = i ; j <= n ; j ++)\n        \t\tfor(int k = 1 ; k <= n ; k ++)\n        \t\t\tif(i != j)\n   \t   \t\t\t\tdis[i][j] = min(dis[i][k] + dis[k][j],dis[i][j]);\n```\nemmm....\u8fd9\u4e2a\u6709\u4ec0\u4e48\u89c4\u5f8b\u5462\uff1f\n\n\u4e0d\u59a8\u8bbe$n$\u8868\u793a\u7684\u662f\u73b0\u6709\u7684\u70b9\u6570\uff0c\u6bcf\u6b21\u6211\u4eec\u4f1a\u5220\u9664\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u7531\u8fd9\u4e00\u4e2a\u88ab\u5220\u9664\u7684\u70b9\u66f4\u65b0\u6765\u7684$dis(i,j)$\u5c31\u4f1a\u88ab\u4fee\u6539\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u8c8c\u4f3c\u627e\u4e0d\u51fa\u8fd9\u4e9b$dis(i,j)$\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u6839\u672c\u4e0d\u77e5\u9053\u54ea\u4e00\u4e9b$dis(i,j)$\u662f\u88ab\u5f53\u524d\u8fd9\u4e2a\u88ab\u5220\u9664\u7684\u70b9\u66f4\u65b0\u6765\u7684\u3002\n\n##### \u6b63\u96be\u5219\u53cd!\n\n\u6211\u4eec\u4e0d\u96be\u53d1\u73b0:\u5f53\u6211\u4eec\u52a0\u5165\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u524d\u9762\u6240\u6709\u70b9\u5df2\u7ecf\u8dd1\u5b8c$Floyd$\u4e86\uff0c\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u8fd9\u4e2a\u70b9\u4f5c\u4e3a$Floyd$\u7b97\u6cd5\u4e2d\u7b2c\u4e09\u5c42\u5faa\u73af\u7684$k$(\u4e5f\u5c31\u662f\u4e2d\u8f6c\u70b9)\u5373\u53ef\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u77e5\u9053\u662f\u54ea\u4e00\u4e9b$dis(i,j)$\u88ab\u66f4\u65b0\u4e86\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5bf9\u5b83\u8fdb\u884c\u4fee\u6539\uff01\n\n\u8fd9\u6837\u5b50$Floyd$\u7b97\u6cd5\u4e2d\u7684\u7b2c\u4e09\u5c42\u5faa\u73af\u5c31\u53ef\u4ee5\u53bb\u6389\u4e86\uff0c\u76f4\u63a5\u8bbe\u7f6e\u4e3a\u5f53\u524d\u52a0\u5165\u7684\u70b9\u5373\u53ef!\n\n\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u964d\u4e3a\u4e86O($n^3$)\n\n\u8fd9\u9053\u9898\u7684\u6838\u5fc3\u5c31\u8bb2\u5b8c\u4e86\u3002\u7ec6\u8282\u4e5f\u4e0d\u591a\uff0c\u653e\u4ee3\u7801\u3002\n\n#### Code:\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long \nint n;\nint dis[505][505];\nint d[505];\nint ansline[505],book[505];\nsigned main(){\n\tcin >> n;\n\tfor(int i = 1 ; i <= n ; i ++)\n\t\tfor(int j = 1 ; j <= n ; j ++)\n\t\tcin >> dis[i][j];\n\tfor(int i = 1 ; i <= n ; i ++)cin >> d[i];\n\tfor(int v = n ; v >= 1 ; v --){\n\t\tint x = d[v];\n\t\tbook[x] = 1;\n\t\tfor (int i = 1 ; i <= n ; i ++)\n\t\t\tfor (int j = 1 ; j <= n ; j ++)\n\t\t\tif(i != j){\n            //\u56e0\u4e3a\u628a\u5f53\u524d\u52a0\u5165\u7684\u70b9x\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53bb\u6389\u4e86\u4e00\u91cd\u5faa\u73af\n\t\t\t\tdis[i][j] = min(dis[i][x] + dis[x][j],dis[i][j]);//x\u5373\u662f\u5f53\u524d\u52a0\u5165\u7684\u70b9\n\t\t\t\tif(book[i] != 0 && book[j] != 0)ansline[v] += dis[i][j];\n\t\t\t}\n\t}\n\tfor(int i = 1 ; i <= n ; i ++)cout << ansline[i] <<\" \";\n\treturn 0;\n}\n```",
        "postTime": 1605519211,
        "uid": 67817,
        "name": "MuYC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF295B \u3010Greg and Graph\u3011"
    },
    {
        "content": "# CF295B \u9898\u89e3\n\n\u524d\u6392\u63d0\u793a\uff1a\u6b64\u9898\u8981\u5f00 `long long`\u3002\n\nFloyd + \u53cd\u5411\u52a0\u70b9\u3002\n\n\u6bcf\u6b21\u53d6\u51fa\u8981\u5220\u9664\u7684\u70b9\u5f53\u505a Floyd \u7684\u4e2d\u8f6c\u70b9\u3002\u5269\u4e0b\u7684\u5c31\u76f4\u63a5\u6572\u677f\u5b50\u5c31\u5b8c\u4e8b\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\n\nll n,mp[510][510],d[510],ans[510];\nll sum;\nbool on[510];\n\nvoid floyd(){\n    for(int t=n;t>=1;t--){\n        int node = d[t]; // \u8981\u5173\u7684\u70b9\n        on[node] = true;\n        sum = 0;\n        //floyd \u677f\u5b50\n        for(int i=1;i<=n;i++){\n            for(int j=1;j<=n;j++){\n                if(i != j){\n                    mp[i][j] = min(mp[i][j], mp[i][node]+mp[node][j]);\n                }\n                if(on[i]&&on[j]){\n                    sum += mp[i][j];\n                }\n            }\n        }\n        ans[t] = sum;\n    }\n}\n\nint main()\n{\n    memset(mp,0x3f,sizeof(mp));\n    cin >> n;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            cin>>mp[i][j];\n        }\n    }\n    for(int i=1;i<=n;i++){\n        cin >> d[i];\n    }\n    floyd();\n    for(int i=1;i<=n;i++){\n        cout<<ans[i]<<\" \";\n    }\n   return 0;\n}\n```\n",
        "postTime": 1644813547,
        "uid": 355276,
        "name": "\u6e05\u5c0f\u79cbovo",
        "ccfLevel": 0,
        "title": "CF295B"
    },
    {
        "content": "\u9898\u76ee\u4f20\u9001\u95e8\uff1a[CF295B](https://www.luogu.com.cn/problem/CF295B)\n\n\u8fd9\u9053\u9898\u662f\u7ec3\u4e60 $floyd$ \u7684\u597d\u9898\u3002\n\n\u9996\u5148\u6211\u4eec\u6765\u601d\u8003\u4e00\u4e0b\uff0c\u5220\u9664 $n$ \u6b21\u70b9\uff0c\u6bcf\u6b21\u5220\u70b9\u6c42\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u7528 $floyd$ \u505a\u5219\u662f $\\text O(n^3 \\times n)$ \u4e5f\u5c31\u662f $\\text O(n^4)$ \u7684\u590d\u6742\u5ea6\uff0c\u4f1a $T$ \u98de\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4ece\u540e\u5f80\u524d\uff0c\u6bcf\u6b21\u5220\u70b9\u5f53\u4f5c\u52a0\u70b9\u5373\u53ef\u3002\u4f18\u5316\u540e\u590d\u6742\u5ea6 $O(n^3)$\uff0c\u53ef\u4ee5\u8fc7\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\n#define int long long\nconst int N = 505;\nint n;\nint dis[N][N], del[N], ans[N];\nbool f[N];\n\nvoid floyd()\n{\n\tfor (int p = n; p >= 1; p--) \n    {\n\t\tint k = del[p];\n\t\tf[k] = true;\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t{\n\t\t\tfor (int j = 1; j <= n; j++)\n\t\t\t{\n\t\t\t\tif (i != j)\n\t\t\t\t{\n\t\t\t\t\tdis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);\n\t\t\t\t\tif (f[i] && f[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tsum += dis[i][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tans[p] = sum;\n\t}\n}\n\nvoid print()\n{\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tcout << ans[i] << \" \";\n\t}\n\tcout << \"\\n\";\n}\n\nvoid input()\n{\n\tcin >> n;\n\tmemset(dis, 0x3f, sizeof(dis));\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfor (int j = 1; j <= n; j++)\n\t\t{\n\t\t\tint w;\n\t\t\tcin >> w;\n\t\t\tdis[i][j] = w;\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tcin >> del[i];\n\t}\n}\n\nsigned main()\n{\n\tinput();\n\tfloyd();\n\tprint();\n\treturn 0;\n}\n```\n",
        "postTime": 1640262427,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "CF295B Greg and Graph"
    }
]