[
    {
        "content": "## **\u73cd\u7231\u751f\u547d\uff0c\u8fdc\u79bbunordered_map\u2026\u2026**\n\n~~\u6211\u5199\u8fd9\u9898\u7684\u65f6\u5019\u89c9\u5f97\u8fd9\u6570\u636e\u8fd9\u4e48\u7279\u6b8a\u5e94\u8be5\u4e0d\u4f1a\u5361\u7136\u540e\u5c31T\u4e86\u4e00\u9875\u2026\u2026~~\n\n\u800c\u4e14\u6211\u8fd8\u89c9\u5f97\u4e00\u4e2a\u70b9\u5bf9\u7684\u54c8\u5e0c\u51fd\u6570\u8bbe\u4e3a$(x<<32)|y$\u5e94\u8be5\u4e0d\u4f1a\u88ab\u5361\uff0c\u4f46\u662fx\u548cy\u8981\u662f\u90fd\u662f\u6a21\u6570\u7684\u500d\u6570\u8fd8\u662f\u4e0d\u884c\u2026\u2026\n\n----\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u90a3\u4e2a\u201c\u8865\u56fe\u4e5f\u662f\u8fde\u901a\u7684\u201d\u662f\u5565\u610f\u601d\uff0c\u5c31\u662f\u4e0d\u5b58\u5728\u4e2d\u95f4\u5305\u56f4\u7684\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u7f51\u683c\u56fe\u505a\u4e00\u4e2a\u975e\u5e38\u5de7\u5999\u7684\u8f6c\u5316\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/60620.png)\n\n\u6211\u4eec\u628a\u6bcf\u5217\u7684\u8fde\u901a\u5757\uff08\u5c31\u662f\u4e00\u5217\u4e0a\u8fde\u7eed\u7684\u4e00\u6bb5\uff09\u770b\u505a\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u5411\u5de6\u53f3\u4e0e\u4e4b\u6709\u516c\u5171\u884c\u7684\u8fde\u901a\u5757\u8fde\u8fb9\uff0c\u5c31\u5f97\u5230\u4e86\u4e00\u68f5\u6811\uff01\n\n\u7136\u540e\u6211\u4eec\u518d\u60f3\uff0c\u8be2\u95ee\u8ddd\u79bb\u4e00\u4e2a\u70b9\u6700\u8fd1\u7684\u5173\u952e\u70b9\uff0c\u8fd9\u662f\u4e2a\u7ecf\u5178\u7684\u52a8\u6001\u70b9\u5206\u6cbb\uff0c\u4f46\u662f\u8fd9\u4e2a\u662f\u683c\u5b50\u4e0e\u683c\u5b50\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u7528\u6811\u4e0a\u8def\u5f84\u8868\u793a\u51fa\u6765\u3002\n\n\u65e2\u7136\u6211\u4eec\u662f\u5728\u70b9\u5206\u6cbb\uff0c\u6211\u4eec\u5f53\u7136\u662f\u8981\u8003\u8651\u8def\u5f84\u4e2d\u95f4\u7684\u4e00\u4e2a\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u51fa\u5f53\u524d\u8fd9\u4e2a\u5927\u5757\u91cc\u6bcf\u4e2a**\u683c\u5b50**\u5230\u8fd9\u4e2a\u4e2d\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u4ee5\u53ca\u5728\u4e2d\u70b9\u4e0a\u79bb\u5b83\u6700\u8fd1\u7684\u4e00\u4e2a\u683c\u5b50\uff0c\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u8def\u5f84\u5448\u73b0\u51fa\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/60621.png)\n\n\u90a3\u4e48$dis(s,t)=deep_s+deep_t+|A-B|$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6211\u4eec\u5728\u4e2d\u70b9\u5904\u5f00\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u5206\u522b\u7ef4\u62a4\u524d\u7f00\u548c\u540e\u7f00\u7684\u6700\u5c0f\u503c\uff0c\u5c31\u53ef\u4ee5\u5728\u70b9\u5206\u6811\u4e0a\u7ef4\u62a4\u6700\u5c0f\u8ddd\u79bb\u4e86\u3002\u56e0\u4e3a\u8fd9\u4e2a\u662f\u6700\u5c0f\u8ddd\u79bb\u6240\u4ee5\u8d70\u91cd\u4e86\u4e5f\u6ca1\u4e8b\u3002\n\n\u4e8e\u662f\u5c31\u662f$O(q\\log^2 n)$\u7684\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <cstdlib>\n#define ll long long\n#define inf 0x3f3f3f3f\n#define int unsigned int\nusing namespace std;\nnamespace ywy {\n\tinline int get() {\n\t    int n = 0;\n\t    char c;\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            break;\n\t        if (c == '-')\n\t            goto s;\n\t    }\n\t    n = c - '0';\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\ts:\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 - c + '0';\n\t        else\n\t            return (n);\n\t    }\n\t}\n\ttypedef struct _pt {\n\t    int x;\n\t    int y;\n\t    _pt() { x = y = 0; }\n\t    _pt(int i, int j) {\n\t        x = i;\n\t        y = j;\n\t    }\n\t    friend bool operator==(const _pt &a, const _pt &b) { return (a.x == b.x && a.y == b.y); }\n\t    friend bool operator<(const _pt &a, const _pt &b) {\n\t        if (a.x == b.x)\n\t            return (a.y < b.y);\n\t        return (a.x < b.x);\n\t    }\n\t} pt;\n\tmap<pt, int> mp;\n\tvector<int> vec[400001];\n\tint id[300001];\n\tvector<int> blo[300001];\n\tunsigned char bv[300001];\n\tsigned *cpre[300001], *csuf[300001];\n\ttypedef struct _b {\n\t    int dest;\n\t    int nxt;\n\t} bian;\n\tbian memchi[1000001];\n\tint gn = 1, heads[300001], fa[300001], zx, tot, ch[300001][2];\n\tinline void add(int s, int t) {\n\t    memchi[gn].dest = t;\n\t    memchi[gn].nxt = heads[s];\n\t    heads[s] = gn;\n\t    gn++;\n\t}\n\tint deep[25][300001], size[300001];\n\tvoid afs(int pt, int baba) {\n\t    tot++;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba || bv[memchi[i].dest])\n\t            continue;\n\t        afs(memchi[i].dest, pt);\n\t    }\n\t}\n\tvoid bfs(int pt, int baba) {\n\t    size[pt] = 1;\n\t    int mx = 0;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba || bv[memchi[i].dest])\n\t            continue;\n\t        bfs(memchi[i].dest, pt);\n\t        size[pt] += size[memchi[i].dest];\n\t        mx = max(mx, size[memchi[i].dest]);\n\t    }\n\t    if (max(mx, tot - size[pt]) <= tot / 2)\n\t        zx = pt;\n\t}\n\tpt pts[400001];\n\tinline int cmp(const int &a, const int &b) { return (pts[a].y < pts[b].y); }\n\tint dst[25][300001];\n\tint dk;\n\tvoid cfs(int pt, int baba) {\n\t    for (register int i = (int)blo[pt].size() - 2; i >= 1; i--) {\n\t        if (dst[dk][blo[pt][i]] == 0x7f7f7f7f) {\n\t            dst[dk][blo[pt][i]] = dst[dk][blo[pt][i + 1]];\n\t            deep[dk][blo[pt][i]] = deep[dk][blo[pt][i + 1]] + 1;\n\t        }\n\t    }\n\t    for (register int i = 1; i < blo[pt].size(); i++) {\n\t        int me = blo[pt][i];\n\t        if (dst[dk][me] == 0x7f7f7f7f) {\n\t            dst[dk][me] = dst[dk][blo[pt][i - 1]];\n\t            deep[dk][me] = deep[dk][blo[pt][i - 1]] + 1;\n\t        }\n\t        for (register int j = 0; j <= 1; j++) {\n\t            if (!ch[me][j] || bv[id[ch[me][j]]] || id[ch[me][j]] == baba)\n\t                continue;\n\t            dst[dk][ch[me][j]] = dst[dk][me];\n\t            deep[dk][ch[me][j]] = deep[dk][me] + 1;\n\t        }\n\t    }\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (bv[memchi[i].dest] || memchi[i].dest == baba)\n\t            continue;\n\t        cfs(memchi[i].dest, pt);\n\t    }\n\t}\n\tint rdeep[300001];\n\tvoid digui(int pt, int baba, int dp) {\n\t    dk = dp;\n\t    tot = 0;\n\t    afs(pt, 0);\n\t    bfs(pt, 0);\n\t    int me = zx;\n\t    fa[me] = baba;\n\t    for (register int i = 1; i < blo[me].size(); i++) dst[dp][blo[me][i]] = blo[me][i];\n\t    cfs(me, 0);\n\t    bv[me] = 1;\n\t    rdeep[me] = dp;\n\t    for (register int i = heads[me]; i; i = memchi[i].nxt) {\n\t        if (bv[memchi[i].dest])\n\t            continue;\n\t        digui(memchi[i].dest, me, dp + 1);\n\t    }\n\t}\n\tint fan[300001];\n\tvoid ywymain() {\n\t    int n = get();\n\t    for (register int i = 1; i <= n; i++) {\n\t        int x = get(), y = get();\n\t        pts[i].x = x;\n\t        pts[i].y = y;\n\t        mp[pts[i]] = i;\n\t        vec[x].push_back(i);\n\t    }\n\t    int gpt = 1;\n\t    for (register int i = 1; i <= 300000; i++) {\n\t        sort(vec[i].begin(), vec[i].end(), cmp);\n\t        int lsty = 13327734, lst = 0;\n\t        for (register int j = 0; j < vec[i].size(); j++) {\n\t            if (pts[vec[i][j]].y != lsty + 1)\n\t                lst = gpt, gpt++, blo[lst].push_back(0);\n\t            id[vec[i][j]] = lst;\n\t            blo[lst].push_back(vec[i][j]);\n\t            lsty = pts[vec[i][j]].y;\n\t        }\n\t    }\n\t    for (register int i = 1; i <= n; i++) {\n\t        ch[i][0] = mp[_pt(pts[i].x - 1, pts[i].y)];\n\t        ch[i][1] = mp[_pt(pts[i].x + 1, pts[i].y)];\n\t    }\n\t    for (register int i = 1; i < gpt; i++) {\n\t        cpre[i] = new signed[blo[i].size() + 1];\n\t        csuf[i] = new signed[blo[i].size() + 1];\n\t        for (register int j = 1; j < blo[i].size(); j++) {\n\t            fan[blo[i][j]] = j;\n\t            cpre[i][j] = inf;\n\t            csuf[i][j] = inf;\n\t            if (ch[blo[i][j]][0] && !bv[id[ch[blo[i][j]][0]]]) {\n\t                add(i, id[ch[blo[i][j]][0]]);\n\t                add(id[ch[blo[i][j]][0]], i);\n\t                bv[id[ch[blo[i][j]][0]]] = 1;\n\t            }\n\t        }\n\t        for (register int j = 1; j < blo[i].size(); j++) bv[id[ch[blo[i][j]][0]]] = 0;\n\t    }\n\t    memset(dst, 0x7f, sizeof(dst));\n\t    digui(1, 0, 0);\n\t    int q = get();\n\t    while (q) {\n\t        q--;\n\t        int op = get(), x = get(), y = get(), pos = mp[_pt(x, y)];\n\t        if (op == 1) {\n\t            int cur = id[pos];\n\t            while (cur) {\n\t                int me = dst[rdeep[cur]][pos];\n\t                for (register int i = fan[me]; i < blo[cur].size(); i += (i & -i)) {\n\t                    cpre[cur][i] = min(cpre[cur][i], (signed)deep[rdeep[cur]][pos] - (signed)fan[me]);\n\t                }\n\t                for (register int i = fan[me]; i > 0; i -= (i & -i)) {\n\t                    csuf[cur][i] = min(csuf[cur][i], (signed)deep[rdeep[cur]][pos] + (signed)fan[me]);\n\t                }\n\t                cur = fa[cur];\n\t            }\n\t        } else {\n\t            int minn = inf, cur = id[pos];\n\t            while (cur) {\n\t                int me = dst[rdeep[cur]][pos];\n\t                for (register int i = fan[me]; i > 0; i -= (i & -i)) {\n\t                    minn = min(minn, fan[me] + cpre[cur][i] + deep[rdeep[cur]][pos]);\n\t                }\n\t                for (register int i = fan[me]; i < blo[cur].size(); i += (i & -i)) {\n\t                    minn = min(minn, csuf[cur][i] - fan[me] + deep[rdeep[cur]][pos]);\n\t                }\n\t                cur = fa[cur];\n\t            }\n\t            if (minn > 10000000)\n\t                printf(\"-1\\n\");\n\t            else\n\t                printf(\"%d\\n\", minn);\n\t        }\n\t    }\n\t}\n}\nsigned main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1560237735,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF936E \u3010Iqea\u3011"
    },
    {
        "content": "> G. [CF936E Iqea](https://www.luogu.com.cn/problem/CF936E) *3400\n\n\u9898\u76ee\u9650\u5236\u76f8\u5f53\u4e8e\u6574\u5f20\u56fe\u662f\u4e00\u4e2a\u6811\u72b6\u7ed3\u6784\uff0c\u4e0d\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7a7a\u5730\u88ab\u82e5\u5e72\u57ce\u5e02\u5305\u56f4\u7684\u60c5\u51b5\u3002\u4f46\u5176\u5b9e\u4e5f\u4e0d\u5b8c\u5168\u5bf9\uff0c\u56e0\u4e3a\u56fe\u4e0a\u53ef\u80fd\u51fa\u73b0\u77e9\u5f62\u57ce\u5e02\u5757\uff0c\u4e0d\u592a\u597d\u5904\u7406\u3002\n\n\u6211\u4eec\u5e0c\u671b\u5c06\u6574\u5f20\u56fe\u62bd\u8c61\u6210\u6811\u72b6\u7ed3\u6784\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6811\u4e0a\u5f62\u5982 \u201c\u70b9\u4eae\u4e00\u4e2a\u70b9\u6216\u67e5\u8be2\u8ddd\u79bb\u67d0\u4e2a\u70b9\u6700\u8fd1\u7684\u88ab\u70b9\u4eae\u7684\u70b9\u201d \u7684\u95ee\u9898\uff0c\u5b83\u662f\u4e00\u7c7b\u4e0e\u6811\u4e0a\u90bb\u57df\u76f8\u5173\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u7528\u52a8\u6001\u70b9\u5206\u6cbb\uff08\u70b9\u5206\u6811\uff09\u89e3\u51b3\u3002\u7ecf\u5178\u4f8b\u9898\u5982 Qtree 5\u3002\n\n\u76f4\u63a5\u628a\u6bcf\u4e2a\u57ce\u5e02\u770b\u6210\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u56e0\u4e3a\u77e9\u5f62\u57ce\u5e02\u5757\u4f1a\u4f7f\u5f97\u6574\u5f20\u56fe\u51fa\u73b0\u73af\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u672c\u9898\u6700\u5de7\u5999\u7684\u5730\u65b9\u4e86\u3002\u65e2\u7136\u4e00\u4e2a\u5355\u72ec\u7684\u57ce\u5e02\u65e0\u6cd5\u89c6\u4f5c\u4e00\u4e2a\u8282\u70b9\uff0c\u4e0d\u59a8\u5c06 **\u4e00\u5217\u6216\u4e00\u884c\u6781\u957f\u7684\u57ce\u5e02\u6bb5** \u89c6\u4f5c\u4e00\u4e2a\u8282\u70b9\u3002\u4e24\u4e2a\u8282\u70b9\u76f8\u90bb\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u5185\u90e8\u5b58\u5728\u4e24\u4e2a\u57ce\u5e02\u76f8\u90bb\u3002\n\n\u4e0b\u6587\u5c06\u4e00\u5217\uff08\u6a2a\u5750\u6807 $x$ \u76f8\u540c\uff09\u6781\u957f\u57ce\u5e02\u6bb5\u89c6\u4f5c\u4e00\u4e2a\u8282\u70b9\u3002\n\n\u6211\u4eec\u5efa\u51fa\u6811 $T$ \u4ee5\u53ca\u5176\u70b9\u5206\u6811 $T'$\u3002\u5728\u5c1d\u8bd5\u89e3\u51b3\u67e5\u8be2\u8ddd\u79bb\u67d0\u4e2a\u57ce\u5e02\u6700\u8fd1\u7684\u5546\u5e97\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8981\u601d\u8003\u5982\u4f55\u8ba1\u7b97\u4e24\u4e2a\u57ce\u5e02 $x, y$ \u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u8bbe\u5176\u5bf9\u5e94\u8282\u70b9\u5206\u522b\u4e3a $u, v$\uff0c\u683c\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u4f53\u73b0\u5728\u8282\u70b9\u4e0a\u5fc5\u7136\u5f62\u5982 $u\\to v$\u3002\u6c42\u51fa $u, v$ \u5728 $T$ \u4e0a\u7684 LCA $d$\uff0c$x, y$ \u4e4b\u95f4\u7684\u8ddd\u79bb\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a **\u57ce\u5e02** $x$ \u5230 **\u8282\u70b9** $d$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0c\u52a0\u4e0a $y$ \u5230 $d$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\u7b49\u7b49\uff0c\u8fd8\u6709\u4e9b\u95ee\u9898\uff0c$x$ \u8d70\u5230 $d$ \u4e4b\u540e\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u7acb\u523b\u79bb\u5f00 $d$ \u8d70\u5411 $y$\uff0c\u800c\u662f\u4f1a\u5148\u8d70\u5230 $y$ \u5230 $d$ \u7684\u6700\u77ed\u8def\u5728 $d$ \u4e0a\u7684\u5bf9\u5e94 **\u57ce\u5e02** $p(d, y)$ \u518d\u79bb\u5f00 $d$\u3002\u56e0\u6b64\u8fd8\u8981\u52a0\u4e0a $p(d, x)$ \u4e0e $p(d, y)$ \u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u53ef\u4ee5\u8bc1\u660e\u5bf9\u4e8e\u4efb\u610f\u57ce\u5e02 \n$x$\uff0c$p(d, x)$ \u90fd\u662f\u552f\u4e00\u7684\uff08\u5426\u5219\u53ef\u8bc1\u5b58\u5728\u73af\uff09\uff0c\u4f46\u8bc1\u660e\u4f3c\u4e4e\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5427\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u67e5\u8be2\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u7684\u6700\u77ed\u8def\u4e86\uff0c\u8fd9\u6bd4\u666e\u901a\u7684\u6811\u4e0a\u6c42\u8ddd\u79bb\u8981\u9ebb\u70e6\u4e00\u4e9b\u3002\u5bf9\u6bcf\u4e2a\u5206\u6cbb\u91cd\u5fc3 $u$ \u6c42\u51fa\u5176\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9 $v$ \u6240\u4ee3\u8868\u7684\u6240\u6709\u57ce\u5e02 $x$ \u4e0e $u$ \u7684\u6700\u77ed\u8ddd\u79bb $d(u, x)$ \u4ee5\u53ca\u6700\u77ed\u8def\u5728 $u$ \u4e0a\u7684\u5bf9\u5e94\u57ce\u5e02 $p(u, x)$\u3002\u67e5\u8be2 $x, y$ \u7684\u6700\u77ed\u8def\u65f6\uff0c\u5148\u6c42\u51fa\u5b83\u4eec\u5bf9\u5e94\u8282\u70b9\u5728 $T'$ \u4e0a\u7684 LCA $d$\uff0c\u90a3\u4e48 $D(d, x, y) = d(d, x) + d(d, y) + |p_y(d, x) - p_y(d, y)|$ \u5373\u4e3a\u6240\u6c42\uff08$D(d, x, y)$ \u8868\u793a\u4ece $x$ \u5230\u8282\u70b9 $d$ \u518d\u5230 $y$ \u7684\u6700\u77ed\u8ddd\u79bb\uff09\uff0c\u5176\u4e2d $p_y(d, x)$ \u5373 $p(d, x)$ \u7684\u7eb5\u5750\u6807\u3002\n\n\u6709\u4e86\u8fd9\u4e2a\u5de5\u5177\uff0c\u6211\u4eec\u5c1d\u8bd5\u89e3\u51b3\u539f\u95ee\u9898\u3002\n\n\u8003\u8651\u8be2\u95ee\u57ce\u5e02 $x$\uff0c\u6211\u4eec\u627e\u5230 $x$ \u7684\u5bf9\u5e94\u8282\u70b9 $u$ \u5728 $T'$ \u4e0a\u7684\u6240\u6709\u7956\u5148 $a$\uff08\u5305\u62ec $u$ \u672c\u8eab\uff09\uff0c\u6839\u636e\u8ba1\u7b97\u5f0f\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u6c42 $\\min D(a, x, y)$ \u5373 $\\min d(a, x) + d(a, y) + |p_y(a, x) - p_y(a, y)|$\u3002\u5982\u679c $a$ \u4e0d\u662f $x$ \u548c $y$ \u7684 LCA\uff0c\u5f0f\u5b50\u7684\u503c\u53ea\u4f1a\u53d8\u5927\uff0c\u4e0d\u5f71\u54cd\u6700\u7ec8\u7b54\u6848\uff0c\u800c\u6bcf\u4e2a $y$ \u90fd\u4f1a\u5728\u4e0e $x$ \u7684 LCA \u5904\u6b63\u786e\u8ba1\u7b97 $x, y$ \u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u8fd9\u5c31\u8bc1\u660e\u4e86\u6b63\u786e\u6027\u3002\n\n\u8003\u8651\u5c06 $D(a, x, y)$ \u62c6\u6210\u4ec5\u4e0e $x$ \u6709\u5173\u7684\u90e8\u5206\u548c\u4ec5\u4e0e $y$ \u6709\u5173\u7684\u90e8\u5206\u3002\u8fd9\u4e2a\u7edd\u5bf9\u503c\u5f88\u8ba8\u538c\uff0c\u5206\u7c7b\u8ba8\u8bba\u628a\u5b83\u62c6\u6389\u3002\u5f53 $p_y(a, y) \\leq p_y(a, x)$ \u65f6\uff0c\n$$\nD(a, x, y) = (d(a, x) + p_y(a, x)) + (d(a, y) - p_y(a, y))\n$$\n\u5426\u5219 $p_y(a, y) > p_y(a, x)$\uff0c\n$$\nD(a, x, y) = (d(a, x) - p_y(a, x)) + (d(a, y) + p_y(a, y))\n$$\n\u56e0\u6b64\uff0c\u70b9\u4eae\u4e00\u4e2a\u57ce\u5e02 $y$ \u65f6\uff0c\u679a\u4e3e\u5176\u5bf9\u5e94\u8282\u70b9\u5728 $T'$ \u4e0a\u7684\u6240\u6709\u7956\u5148 $a$\uff0c\u5e76\u5c06 $d(a, y) - p_y(a, y)$ \u6302\u5230\u5e8f\u5217 $A_a$ \u7684\u4e0b\u6807 $p_y(a, y)$ \u5904\uff0c$d(a, y) + p_y(a, y)$ \u6302\u5230\u5e8f\u5217 $B_a$ \u7684\u4e0b\u6807 $p_y(a, y)$ \u5904\uff0c\u67e5\u8be2 $x$ \u8df3\u5230\u7956\u5148 $a$ \u65f6\u53ea\u9700\u67e5\u8be2 $A_a$ \u5728 $p_y(a, x)$ \u5904\u7684\u524d\u7f00\u6700\u5c0f\u503c\u548c $B_a$ \u5728 $p_y(a, x)$ \u5904\u7684\u540e\u7f00\u6700\u5c0f\u503c\u5373\u53ef\u3002\u505a\u8fd9\u4e00\u6b65\u662f\u56e0\u4e3a\u62c6\u6210\u4ec5\u4e0e $x$ \u6709\u5173\u548c\u4ec5\u4e0e $y$ \u6709\u5173\u7684\u90e8\u5206\u7684\u524d\u63d0\u6761\u4ef6\u662f\u5bf9 $y$ \u5230 $a$ \u7684\u6700\u77ed\u8def\u5728 $a$ \u5904\u7684\u5bf9\u5e94\u57ce\u5e02 $p(a, y)$ \u7684\u7eb5\u5750\u6807 $p_y(a, y)$ \u8fdb\u884c\u4e86\u9650\u5236\u3002\n\n\u5355\u70b9\u53d6 $\\min$\uff0c\u524d\u7f00\uff08\u540e\u7f00\uff09\u67e5\u8be2\u6700\u5c0f\u503c\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u5206\u522b\u7ef4\u62a4 $A_a$ \u548c $B_a$ \u5373\u53ef\u3002\u6ce8\u610f\u8981\u5bf9\u6bcf\u4e2a\u8282\u70b9\u52a8\u6001\u5f00 BIT \u5927\u5c0f\uff08`vector` \u5b9e\u73b0\uff09\uff0c\u5e76\u5c06\u5750\u6807\u9650\u5236\u5728\u4e00\u5b9a\u8303\u56f4\u5185\uff08\u5bb9\u6613\u9650\u5236\u5728\u8fde\u7eed\u6bb5\u957f\u5ea6\u8303\u56f4\u5185\uff09\u624d\u80fd\u4fdd\u8bc1 $\\mathcal{O}(n\\log n)$ \u7684\u590d\u6742\u5ea6\u3002\n\n\u663e\u7136\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n\\log ^ 2 n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n\\log n)$\u3002\n\n\u63a5\u4e0b\u6765\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\uff0c\u56e0\u4e3a $n = 3 \\times 10 ^ 5$ \u4f46\u65f6\u9650\u53ea\u6709 3s \u6240\u4ee5\u8fd8\u662f\u5f88\u5361\u7684\uff0c\u9700\u8981\u7cbe\u7ec6\u5b9e\u73b0\u4ee5\u51cf\u5c0f\u5e38\u6570\u3002\n\n- \u9996\u5148 **\u5728\u4e00\u5f00\u59cb** \u5c06\u6240\u6709\u70b9\u7528 `map` \u6620\u5c04\u5230 $1\\sim n$ \u7684\u6574\u6570\uff0c\u63a5\u4e0b\u6765\u5904\u7406\u6240\u6709\u5750\u6807\u5fc5\u987b\u7528\u6620\u5c04\u503c\uff0c\u5426\u5219\u5728\u5185\u5c42\u5904\u7406\u7684\u65f6\u5019\u5982\u679c\u8fd8\u8981\u6620\u5c04 $\\mathbb N_+ ^ 2 \\to \\mathbb N_+$\uff0c\u90a3\u4e48\u5e38\u6570\u4f1a\u76f8\u5f53\u5927\u3002\n\n- \u6211\u4eec\u9700\u8981\u591a\u6b21\u5224\u65ad\u4e00\u4e2a\u683c\u5b50\u662f\u5426\u5728\u4ee5\u67d0\u4e2a\u8282\u70b9 $x$ \u4e3a\u5206\u6cbb\u91cd\u5fc3\u7684\u5b50\u6811\u5185\uff0c\u4e3a\u6b64\u6211\u4eec\u4e0d\u80fd\u4e3a\u8282\u70b9\u5f00\u4e00\u4e2a `map` \u6216\u8005\u54c8\u5e0c\u8868\u4e4b\u7c7b\u7684\u73a9\u610f\uff0c\u8fd9\u6837\u4e5f\u76f4\u63a5\u70b8\u6389\u4e86\u3002\u89e3\u51b3\u65b9\u6848\u662f\u6ce8\u610f\u5230\u70b9\u5206\u6811\u7684\u6df1\u5ea6\u5f88\u5c0f\uff0c\u6240\u4ee5\u76f4\u63a5\u8bb0\u5f55\u6bcf\u4e2a\u683c\u5b50\u5c5e\u4e8e\u54ea\u4e2a\u8282\u70b9\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u8282\u70b9\u5728 $T'$ \u4e0a\u6df1\u5ea6\u4e3a $d$ \u7684\u7956\u5148\u7f16\u53f7\u3002\n\n- BFS \u9884\u5904\u7406 $d(a, x)$ \u548c $p(a, x)$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u591a\u6b21\u5224\u65ad\u683c\u5b50 $x$ \u7684\u56db\u5468\u662f\u5426\u5c5e\u4e8e\u5f53\u524d\u5206\u6cbb\u91cd\u5fc3\u7684\u5b50\u6811\u3002\u4e0d\u80fd\u6bcf\u6b21 BFS \u5230 $x$ \u518d\u7528 `map` \u4e4b\u7c7b\u7684\u4e1c\u897f\u5224\u65ad\uff0c\u56e0\u4e3a BFS \u603b\u590d\u6742\u5ea6\u662f $n\\log n$\u3002\u53ef\u4ee5\u5728\u4e00\u5f00\u59cb\u9884\u5904\u7406\u6bcf\u4e2a\u683c\u5b50\u56db\u5468\u662f\u5426\u6709\u683c\u5b50\u4ee5\u53ca\u5bf9\u5e94\u7f16\u53f7\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u53ea\u80fd\u5728\u5e38\u6570\u6781\u5c0f\u7684\u6811\u72b6\u6570\u7ec4\u5904\u6709 $\\log ^ 2$\uff0c\u5176\u5b83\u5730\u65b9\u80fd\u5361\u5c31\u5361\uff0c\u5343\u4e07\u4e0d\u8981\u628a\u522b\u7684\u5730\u65b9\u4e5f\u5199\u6210 $\\log ^ 2$ \u6216\u8005\u5e38\u6570\u6781\u5927\u7684 $\\log n$ \u4e86\uff0c\u8fd9\u6837\u94c1\u5b9a\u8fc7\u4e0d\u53bb\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\nchar buf[1 << 22], *p1 = buf, *p2 = buf, obuf[1 << 22], *O = obuf;\n#define gc (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 22, stdin), p1 == p2) ? EOF : *p1++)\n#define pc(x) (*O++ = x)\n#define flush() fwrite(obuf, 1, O - obuf, stdout)\ninline int read() {\n\tint x = 0;\n\tchar s = gc;\n\twhile(!isdigit(s)) s = gc;\n\twhile(isdigit(s)) x = x * 10 + s - '0', s = gc;\n\treturn x;\n}\ninline void print(int x) {\n\tif(x < 0) return pc('-'), print(-x);\n\tif(x >= 10) print(x / 10);\n\tpc(x % 10 + '0');\n}\n\nconst int N = 3e5 + 5;\nconst int inf = 1e9 + 7;\nconst int dx[4] = {0, -1, 1, 0};\nconst int dy[4] = {-1, 0, 0, 1};\n\n// general variables\nint l[N], r[N], bel[N];\npair <int, int> p[N];\nvector <int> e[N], g[N];\nmap <pair <int, int>, int> mp;\nint pn, n, q;\n\n// centroid decomposition tree\nint vis[N], mx[N], sz[N], R;\nvoid findroot(int id, int fa, int tot) {\n\tsz[id] = 1, mx[id] = 0;\n\tfor(int it : e[id]) {\n\t\tif(it == fa || vis[it]) continue;\n\t\tfindroot(it, id, tot), sz[id] += sz[it];\n\t\tmx[id] = max(mx[id], sz[it]);\n\t}\n\tmx[id] = max(mx[id], tot - sz[id]);\n\tif(mx[id] < mx[R]) R = id;\n}\n\nint dep[N], f[N], cover[N], cnt;\nint ind[30][N], bfs_vis[N];\nvector <int> pre[N], suf[N];\nvector <pair <int, int>> dat[N]; // dat : {from which position, distance}\nqueue <pair <int, pair <int, int>>> que;\nvoid findpoint(int id, int fa) {\n\tfor(int j = l[id]; j <= r[id]; j++) cover[++cnt] = j;\n\tfor(int it : e[id]) if(it != fa && !vis[it]) findpoint(it, id);\n}\nvoid divide(int id, int fa) {\n\tdep[id] = dep[fa] + 1;\n\tf[id] = fa, vis[id] = 1;\n\tcnt = 0, findpoint(id, 0);\n\tdat[id].resize(cnt + 1);\n\tpre[id].resize(cnt + 1, inf);\n\tsuf[id].resize(cnt + 1, inf);\n\tfor(int i = 1; i <= cnt; i++) ind[dep[id]][cover[i]] = i, bfs_vis[cover[i]] = 0; // i -> cover[i]\n\tfor(int j = l[id]; j <= r[id]; j++) que.push({j, {j - l[id] + 1, 0}}), bfs_vis[j] = 1;\n\twhile(!que.empty()) {\n\t\tauto t = que.front(); que.pop();\n\t\tpair <int, int> dt = t.second;\n\t\tint pid = t.first;\n\t\tdat[id][ind[dep[id]][pid]] = dt, dt.second++;\n\t\t// cerr << \"inside \" << id << \" \" << pid << \" \" << ind[dep[id]][pid] << \" \" << dt.first << \" \" << dt.second << endl;\n\t\tfor(int it : g[pid]) if(!bfs_vis[it]) que.push({it, dt}), bfs_vis[it] = 1;\n\t}\n\t// cerr << ind[1][5] << \" \" << dat[3][1].first << endl;\n\tfor(int it : e[id]) {\n\t\tif(vis[it]) continue;\n\t\tR = 0, findroot(it, id, sz[it]), divide(R, id);\n\t}\n}\n\n// BIT\nvoid add_pre(vector <int> &c, int p, int v) {while(p < c.size()) c[p] = min(c[p], v), p += p & -p;}\nint query_pre(vector <int> &c, int p) {\n\tint ans = inf;\n\twhile(p) ans = min(ans, c[p]), p -= p & -p;\n\treturn ans;\n}\nvoid add_suf(vector <int> &c, int p, int v) {while(p) c[p] = min(c[p], v), p -= p & -p;}\nint query_suf(vector <int> &c, int p) {\n\tint ans = inf;\n\twhile(p < c.size()) ans = min(ans, c[p]), p += p & -p;\n\treturn ans;\n}\nvoid add_point(int x, int y) {\n\t// cerr << ind[1][5] << \" \" << dat[3][1].first << \" \" << dat[3][1].second << endl;\n\tint pid = mp[{x, y}], id = bel[pid];\n\twhile(id) {\n\t\tpair <int, int> dt = dat[id][ind[dep[id]][pid]];\n\t\t// cerr << \"dep \" << dep[id] << \" \" << id << \" \" << pid << \" \" << ind[dep[id]][pid] << \" \" << dt.first << \" \" << dt.second << endl;\n\t\t// assert(dt.first);\n\t\tadd_pre(pre[id], dt.first, dt.second - dt.first);\n\t\tadd_suf(suf[id], dt.first, dt.second + dt.first);\n\t\tid = f[id];\n\t}\n}\nint query_point(int x, int y) {\n\tint ans = inf, pid = mp[{x, y}], id = bel[pid];\n\twhile(id) {\n\t\tpair <int, int> dt = dat[id][ind[dep[id]][pid]];\n\t\t// cerr << \"dep \" << dep[id] << \" \" << id << \" \" << pid << \" \" << ind[dep[id]][pid] << \" \" << dt.first << \" \" << dt.second << endl;\n\t\t// assert(dt.first);\n\t\tans = min(ans, query_pre(pre[id], dt.first) + dt.second + dt.first);\n\t\tans = min(ans, query_suf(suf[id], dt.first) + dt.second - dt.first);\n\t\tid = f[id];\n\t}\n\treturn ans > N ? -1 : ans;\n}\n\nint main() {\n\t// freopen(\"1.in\", \"r\", stdin);\n\tmemset(bfs_vis, 0x3f, sizeof(bfs_vis));\n\tcin >> pn, mx[0] = N;\n\tfor(int i = 1, x, y; i <= pn; i++) p[i] = {x = read(), y = read()};\n\tsort(p + 1, p + pn + 1);\n\tfor(int i = 1; i <= pn; ) {\n\t\tl[++n] = i, r[n] = i;\n\t\twhile(r[n] < pn && p[r[n] + 1].second == p[r[n]].second + 1) r[n]++;\n\t\t// cerr << i << \" \" << r[n] << endl;\n\t\tfor(int j = i; j < r[n]; j++) g[j].push_back(j + 1), g[j + 1].push_back(j);\n\t\tfor(int j = i, lst = 0; j <= r[n]; j++) {\n\t\t\tmp[p[j]] = j, bel[j] = n;\n\t\t\tauto it = mp.find({p[j].first - 1, p[j].second});\n\t\t\tif(it == mp.end()) continue;\n\t\t\tg[j].push_back(it -> second), g[it -> second].push_back(j);\n\t\t\tif(bel[it -> second] == lst) continue;\n\t\t\te[n].push_back(lst = bel[it -> second]), e[lst].push_back(n);\n\t\t\t// cerr << \"add \" << n << \" \" << lst << endl;\n\t\t}\n\t\ti = r[n] + 1;\n\t}\n\tfindroot(1, 0, n), divide(R, 0);\n\t// if(pn >= 1e5) assert(0);\n\t// if(pn > 1e5) exit(0);\n\tq = read();\n\tfor(int i = 1, op, x, y; i <= q; i++) {\n\t\top = read(), x = read(), y = read();\n\t\tif(op == 1) add_point(x, y);\n\t\telse print(query_point(x, y)), pc('\\n');\n\t}\n\treturn flush(), 0;\n}\n\n/*\n2022/5/2\nstart thinking at 17:43\n\n\u770b\u8d77\u6765\u662f\u4e00\u9053\u5927\u6570\u636e\u7ed3\u6784.\n\u7531\u4e8e city \u8fde\u901a\u4e14 city \u7684\u8865\u96c6\u8fde\u901a, \u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0\u73af.\n\u8981\u51fa\u73b0\u73af\u4e5f\u4e00\u5b9a\u662f\u77e9\u5f62\u7684\u5f62\u5f0f.\n\n\u8003\u8651\u5bf9\u4e8e\u77e9\u5f62\u7f51\u683c\u6c42\u89e3\u7b54\u6848.\nabs(x - x_i) + abs(y - y_i)\n\u5f53 x_i, y_i \u4e0e x \u7684\u5927\u5c0f\u5173\u7cfb\u786e\u5b9a\u65f6, \u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898.\n\u600e\u4e48\u4f1a\u662f\u6811\u5957\u6811\u5462?\n\u5e94\u8be5\u4e0d\u4f1a\u662f\u6811\u5957\u6811\u5427.\n\u53ef\u662f\u8fd9\u4e2a\u95ee\u9898\u7684\u786e\u4e0d\u5f31\u4e8e\u6811\u5957\u6811\u5427.\n\u770b\u4e0b\u6807\u7b97\u590d\u6742\u5ea6.\n\u5bc4, \u6ca1\u6709\u9898\u89e3.\n\u90a3\u5fc5\u987b\u5f97\u5199\u4e09\u7ef4\u504f\u5e8f\u4e86\u554a\u54c8\u54c8\u54c8.\n\u90a3\u5c31\u5199\u5457, \u95ee\u9898\u4e0d\u5927.\n\n\u8003\u8651\u89e3\u51b3\u539f\u95ee\u9898.\n\n\u4e0d\u4f1a, \u770b\u9898\u89e3.\n\u5367\u69fd? \u52a8\u6001\u70b9\u5206\u6cbb?\n\u5367\u69fd, \u725b\u903c\u554a\u8001\u54e5.\n\u5367\u69fd, \u5de8\u8e0f\u9a6c\u96be\u5199.\n\u5f00\u641e. \u4e89\u53d6\u4e00\u4e2a\u5c0f\u65f6\u641e\u5b9a.\n\nstart coding at 18:51\n\n\u5e38\u6570\u6709\u70b9\u5927\u54c8\u54c8\u54c8.\n\u4e0d\u7ba1, T \u4e86\u518d\u4f18\u5316.\n\u5403\u53e3\u665a\u996d\u51b7\u9759\u4e00\u4e0b.\n19:37 \u5199\u5b8c\u4e86.\n\u76f4\u63a5\u8fc7\u4e86\u6837\u4f8b????\n\u76f4\u63a5\u4ea4, \u4e0d\u614c\u7684.\nCF \u5bc4\u4e86.\n\n\u8349, \u6b63\u786e\u6027\u76f4\u63a5\u8fc7\u4e86, \u4f46\u662f MLE \u4e86.\n\u9ad8\u5174.\n\u8349, TLE \u4e86.\n\u8349, \u6211\u77e5\u9053\u4e86, \u4e00\u4e2a\u8282\u70b9\u7684\u5927\u5c0f\u4e0d\u662f 1.\n\u4e0d\u554a\u4e0d\u4f1a\u554a? \u76f4\u63a5\u70b9\u5206\u6cbb\u4e00\u5b9a\u4e5f\u662f\u53ef\u4ee5\u7684\u554a?\n\u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u7684\u51fa\u8fb9, \u628a gp_hash_table \u6362\u6389.\n\n\u8349, \u7ec8\u4e8e\u5361\u8fc7\u53bb\u4e86.\n\nfinish debugging at 21:01\n*/\n```",
        "postTime": 1651663868,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF936E Iqea"
    }
]