[
    {
        "content": "## \u9898\u610f\n\n\u200b\t\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u53ef\u4ee5\u628a\u6811\u4e0a\u7236\u4eb2\u76f8\u540c\u7684\u4e24\u6761\u957f\u5ea6\u76f8\u540c\u7684\u94fe\u5408\u5e76\u3002\uff08\u5982\u56fe\uff09\u95ee\u4f60\u6700\u540e\u80fd\u4e0d\u80fd\u53d8\u6210\u4e00\u6761\u94fe\uff0c\u80fd\u7684\u8bdd\u6c42\u94fe\u7684\u6700\u77ed\u957f\u5ea6\u3002\uff08n<2*10^5\uff09\n\n## \u89e3\u9898\u601d\u8def\n\n\u200b\t\u7531\u4e8e\u6211\u4eec\u4e0d\u77e5\u9053\u6700\u540e\u7684\u6839\u662f\u54ea\u4e2a\u8282\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u5148\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9dfs\u4e00\u6b21\uff0c\u5e76\u7528\u4e00\u4e2aset\u6765\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6240\u6709\u94fe\u7684\u957f\u5ea6\u3002\u7531\u4e8eset\u81ea\u52a8\u53bb\u91cd\uff0c\u90a3\u4e48set\u4e2d\u7684\u5143\u7d20\u4e2a\u6570$num$\u5c31\u53ea\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n1. $num = 0$\uff0c\u6b64\u65f6\u8bf4\u660e\u5df2\u7ecf\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de0\n2. $num=1$\uff0c\u6b64\u65f6\u8bf4\u660e\u5b50\u6811\u4e2d\u6240\u6709\u94fe\u90fd\u53ef\u4ee5\u5408\u5e76\u6210\u4e3a\u4e00\u6761\u94fe\uff0c\u8fd4\u56de\u94fe\u957f```*s.begin()```\u3002\n3. $num=2$\uff0c\u8fd9\u79cd\u60c5\u51b5\u7a0d\u7a0d\u590d\u6742\u4e00\u4e9b\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u663e\u7136\u662f\u7b26\u5408\u9898\u610f\u7684\uff0c\u4e14\u6839\u8282\u70b9\u5c31\u662f\u94fe\u4e2d\u95f4\u7684\u4e00\u90e8\u5206\uff0c\u8fd4\u56de\u94fe\u957f``` *s.begin()+*--s.end()```\u3002\u82e5\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u5219\u5b83\u5934\u4e0a\u4f1a\u6709\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u4e1c\u897f\uff0c\u663e\u7136\u4e0d\u7b26\u5408\u9898\u610f\uff0c\u8fd4\u56de-1\u3002\n4. $num>2$\uff0c\u4e0d\u7b26\u5408\u9898\u610f\uff0c\u8fd4\u56de-1\u3002\n\n\u5982\u679c\u5728\u5f53\u524d\u8282\u70b9\u5931\u8d25\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u7b2c\u4e8c\u6b21\u641c\u7d22\u7684root\u8d4b\u503c\u4e3a\u5f53\u524d\u8282\u70b9\u3002\u518d\u7528\u4e0a\u8ff0\u65b9\u6cd5dfs\u4e00\u904d\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```cpp\n//\u53c2\u8003 http://www.cnblogs.com/RUSH-D-CAT/p/6404742.html\n#include <bits/stdc++.h>\n#define MAX 200005\nusing namespace std;\n\nint cnt, n, root;\nint head[MAX], vet[MAX*2], Next[MAX*2], d[MAX];\n\nvoid add(int x, int y){\n    cnt++;\n    Next[cnt] = head[x];\n    head[x] = cnt;\n    vet[cnt] = y;\n}\n\nint dfs(int x, int fa){\n    set<int> s;\n    d[x] = d[fa]+1;\n    for(int i = head[x]; i; i = Next[i]){\n        int v = vet[i];\n        if(v == fa)\tcontinue;\n        int t = dfs(v, x);\n        if(t == -1){\n            return -1;\n        }\n        s.insert(t+1);\n    }\n    if(s.size() == 0){\n        return 0;\n    }\n    else if(s.size() == 1){\n        return *s.begin();\n    }\n    else if(s.size() == 2 && !fa){\n        return *s.begin()+*--s.end();\n    }\n    root = x;\n    return -1;\n}\n\nint main()\n{\n    cin >> n;\n    int x, y;\n    for(int i = 1; i < n; i++){\n        scanf(\"%d%d\", &x, &y);\n        add(x, y);\n        add(y, x);\n    }\n    int ans = dfs(1, 0);\n    if(ans == -1 && root){\n        ans = dfs(root, 0);\n    }\n    while(!(ans&1)){\n        ans >>= 1;\n    }\n    cout << ans << endl;\n    \n    return 0;\n}\n```\n\n",
        "postTime": 1550717484,
        "uid": 22991,
        "name": "fighter",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF765E \u3010Tree Folding\u3011"
    }
]