[
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://spadea261.blog.luogu.org/codeforces-round-801-div-2-post)\n\n> [E. Ambiguous Dominoes](https://codeforces.com/contest/1695/problem/E)\n> \n> \u7ed9\u5b9a $n$ \u5f20\u5199\u6709\u4e24\u4e2a\u6570\u5b57 $x_i$ \u4e0e $y_i$ \u7684 $1\\times 2$ \u9aa8\u724c\uff0c\u8981\u6c42\u6784\u9020\u4e00\u4e2a\u9762\u79ef\u4e3a $2n$ \u7684\u6709\u6743\u503c\u7684\u77e9\u5f62\u7f51\u683c\uff0c\u4f7f\u5f97\u80fd\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u653e\u7f6e\u65b9\u6848\uff0c\u4f7f\u5f97\u9aa8\u724c\u4e0d\u91cd\u53e0\u4e0d\u9057\u6f0f\u5730\u94fa\u6ee1\u7f51\u683c\uff0c\u5e76\u4e14\u6570\u5b57\u4e0e\u7f51\u683c\u4e0a\u7684\u6570\u5b57\u76f8\u540c\u3002\u6c42\u4e00\u79cd\u6ee1\u8db3\u6761\u4ef6\u7684\u77e9\u5f62\u7f51\u683c\u4e0e\u4e24\u79cd\u4e0d\u540c\u7684\u653e\u7f6e\u65b9\u6848\u3002\n> \n> \u4e24\u79cd\u65b9\u6cd5\u4e0d\u540c\uff0c\u5f53\u4e14\u4ec5\u5f53\u5728\u4e00\u79cd\u65b9\u6848\u4e2d\u88ab\u4e00\u5f20\u9aa8\u724c\u8986\u76d6\u7684\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u5728\u53e6\u4e00\u79cd\u65b9\u6848\u4e2d\u88ab\u4e24\u5f20\u9aa8\u724c\u8986\u76d6\u3002\n> \n> $1\\le n\\le 3\\times 10^5$\uff0c$1\\le x_i,y_i\\le 2n$\u3002\n\n\u9996\u5148\u9898\u76ee\u5e76\u6ca1\u6709\u89c4\u5b9a\u77e9\u5f62\u7684\u957f\u5bbd\uff0c\u53ea\u89c4\u5b9a\u4e86\u5b83\u7684\u9762\u79ef\u4e3a $2n$\uff0c\u56e0\u6b64\u4fbf\u53ef\u4ee5\u731c\u6d4b\uff0c\u5f53\u957f\u4e3a $n$\uff0c\u5bbd\u4e3a $2$ \u65f6\u662f\u5426\u6709\u89e3\u53ef\u4ee5\u4ee3\u8868\u6574\u4e2a\u7684\u60c5\u51b5\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651 $2\\times k$ \u7684\u68cb\u76d8\u7684\u4e24\u79cd\u653e\u7f6e\u65b9\u5f0f\u3002\n\n\u5bf9\u4e8e $k$ \u4e3a\u5947\u6570\uff0c\u8003\u8651\u5982\u4e0b\u4e24\u79cd\u65b9\u5f0f\u3002\n\n```\nLRLR...LRU   ULRLR...LR\nLRLR...LRD   DLRLR...LR\n```\n\n\u5bf9\u4e8e $k$ \u4e3a\u5076\u6570\uff0c\u8003\u8651\u5982\u4e0b\u4e24\u79cd\u65b9\u5f0f\u3002\n\n```\nLRLR...LR   ULRLR...LRU\nLRLR...LR   DLRLR...LRD\n```\n\u53d1\u73b0\u8fd9\u4e24\u79cd\u65b9\u6848\u90fd\u80fd\u88ab $k$ \u5f20\u9aa8\u724c\u8986\u76d6\uff0c\u56e0\u6b64\u8981\u4f7f\u5f97\u5728\u8fd9\u4e24\u79cd\u65b9\u6848\u4e2d\uff0c\u90fd\u88ab\u540c\u6837\u7684 $k$ \u5f20\u9aa8\u724c\u6240\u8986\u76d6\u3002\u7531\u4e8e\u9aa8\u724c\u9996\u5c3e\u76f8\u63a5\uff0c\u56e0\u6b64\u4e0d\u96be\u60f3\u5230\u5c06\u6bcf\u5f20\u9aa8\u724c\u4e0a\u7684\u6570\u5b57\u8fde\u8fb9\uff0c\u8fd9\u6837\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u6709\u91cd\u8fb9\u6709\u81ea\u73af\u7684\u65e0\u5411\u56fe\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5982\u679c\u5b83\u53ea\u6709\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u6b64\u65f6\u5fc5\u7136\u4e0d\u5408\u6cd5\u3002\uff08\u56e0\u4e3a\u4e24\u6b21\u53ea\u80fd\u653e\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff09\u5426\u5219\u6c42\u51fa\u5b83\u7684\u6b27\u62c9\u5e8f\uff0c\u6309\u6b27\u62c9\u5e8f\u7684\u987a\u5e8f\u5c06\u9664\u53bb\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684 $2k$ \u4e2a\u6570\u6309\u987a\u65f6\u9488\u7684\u65b9\u5411\u586b\u5230\u68cb\u76d8\u5f53\u4e2d\uff0c\u5219\u6b64\u65f6\u6ee1\u8db3\u4e0a\u9762\u4e24\u79cd\u653e\u7f6e\u65b9\u5f0f\u3002\n\n\u8bc1\u660e\uff1a\u5728\u6b27\u62c9\u5e8f\u4e0a\uff0c\u76f8\u90bb\u7684\u4e24\u9879\u5fc5\u4e3a\u56fe\u4e0a\u7684\u4e00\u6761\u8fb9\uff0c\u4e14\u6839\u636e\u5b9a\u4e49\uff0c\u8fd9\u6761\u8fb9\u4f1a\u4ee5 $u-v$ \u548c $v-u$ \u7684\u5f62\u5f0f\u5404\u51fa\u73b0\u4e00\u6b21\uff0c\u8003\u8651\u8fd9\u4e24\u6761\u8fb9\u4e4b\u95f4\u5939\u7684\u8fb9\uff0c\u4e00\u5b9a\u4f1a\u662f\u5076\u6570\u6761\u8fb9\uff08\u6bcf\u6761\u8fb9\u8981\u8d70\u4e24\u6b21\uff09\uff0c\u56e0\u6b64 $u-v$ \u4e0e $v-u$ \u51fa\u73b0\u7f16\u53f7\u7684\u5947\u5076\u6027\u4e0d\u540c\uff0c\u5373\u8fd9\u4e24\u6761\u8fb9\u7684\u6570\u5b57\u4e0d\u4f1a\u5728\u540c\u4e00\u79cd\u65b9\u6848\u4e2d\u90fd\u88ab\u8986\u76d6\uff0c\u56e0\u6b64\u5728\u8fd9\u4e2a $2\\times k$ \u7684\u77e9\u9635\u4e2d\u5408\u6cd5\u3002\u5c06\u5176\u5b83\u8fde\u901a\u5757\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u6784\u9020\uff0c\u5728\u6a2a\u5411\u62fc\u63a5\u5230\u4e00\u8d77\uff0c\u5373\u4e3a\u4e00\u79cd\u53ef\u884c\u7684\u6784\u9020\u65b9\u6848\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=3e5+5;\nint n,a[N*2],p,lst,ans[N][5];\nchar ans1[N][5],ans2[N][5];\nint head[N*2],cnt=1;\nbool vis[N*2],vise[N*2];\nstruct Node\n{\n    int to,nxt;\n}e[N*2];\nvoid add(int u,int v)\n{\n    e[++cnt].to=v;\n    e[cnt].nxt=head[u];\n    head[u]=cnt;\n}\nvoid dfs(int u)\n{\n    a[++p]=u;\n    if(vis[u]) return;\n    vis[u]=1;\n    for(int i=head[u];i;i=e[i].nxt)\n    {\n        int v=e[i].to;\n        if(vise[i]) continue;\n        vise[i]=vise[i^1]=1;\n        dfs(v);\n        a[++p]=u;\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        add(u,v);\n        add(v,u);\n    }\n    for(int i=1;i<=2*n;i++)\n    {\n        if(!vis[i])\n        {\n            p=0;\n            dfs(i);\n            p--;\n            p/=2;\n            if(p==1)\n            {\n                printf(\"-1\\n\");\n                return 0;\n            }\n            for(int j=1;j<=p;j++) ans[lst+j][1]=a[j];\n            for(int j=1;j<=p;j++) ans[lst+p-j+1][2]=a[j+p];\n            if(p%2==1)\n            {\n                for(int j=1;j<=p;j++)\n                {\n                    if(j==p) ans1[lst+j][1]='U',ans1[lst+j][2]='D';\n                    else if(j%2==1) ans1[lst+j][1]=ans1[lst+j][2]='L';\n                    else ans1[lst+j][1]=ans1[lst+j][2]='R';\n                    if(j==1) ans2[lst+j][1]='U',ans2[lst+j][2]='D';\n                    else if(j%2==1) ans2[lst+j][1]=ans2[lst+j][2]='R';\n                    else ans2[lst+j][1]=ans2[lst+j][2]='L';\n                }\n            }\n            else\n            {\n                for(int j=1;j<=p;j++)\n                {\n                    if(j%2==1) ans1[lst+j][1]=ans1[lst+j][2]='L';\n                    else ans1[lst+j][1]=ans1[lst+j][2]='R';\n                    if(j==1||j==p) ans2[lst+j][1]='U',ans2[lst+j][2]='D';\n                    else if(j%2==1) ans2[lst+j][1]=ans2[lst+j][2]='R';\n                    else ans2[lst+j][1]=ans2[lst+j][2]='L';\n                }\n            }\n            lst+=p;\n        }\n    }\n    printf(\"2 %d\\n\",n);\n    printf(\"\\n\");\n    for(int i=1;i<=n;i++) printf(\"%d \",ans[i][1]);printf(\"\\n\");\n    for(int i=1;i<=n;i++) printf(\"%d \",ans[i][2]);printf(\"\\n\");\n    printf(\"\\n\");\n    for(int i=1;i<=n;i++) printf(\"%c\",ans1[i][1]);printf(\"\\n\");\n    for(int i=1;i<=n;i++) printf(\"%c\",ans1[i][2]);printf(\"\\n\");\n    printf(\"\\n\");\n    for(int i=1;i<=n;i++) printf(\"%c\",ans2[i][1]);printf(\"\\n\");\n    for(int i=1;i<=n;i++) printf(\"%c\",ans2[i][2]);printf(\"\\n\");\n    printf(\"\\n\");\n    return 0;\n}\n```",
        "postTime": 1655870645,
        "uid": 124218,
        "name": "SpadeA261",
        "ccfLevel": 6,
        "title": "CF1695E Ambiguous Dominoes \u9898\u89e3"
    },
    {
        "content": "\u9898\u610f\uff1a\u6709 $n$ \u4e2a\u591a\u7c73\u8bfa\u9aa8\u724c\uff0c\u6bcf\u5f20\u9aa8\u724c\u4e0a\u6709\u4e24\u4e2a\u6570\u5b57\uff0c\u8981\u6c42\u6784\u9020\u4e24\u4e2a\u5c06\u8fd9 $n$ \u4e2a\u9aa8\u724c\u4e0d\u91cd\u53e0\u653e\u5165 $m\\times k = 2n$ \u7684\u68cb\u76d8 $a_{m\\times k}$ \u4e2d\u7684\u65b9\u6848\uff0c\u6ee1\u8db3\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\u4e00\u6837\uff0c\u4e14\u8981\u6c42\u4e24\u79cd\u65b9\u6848\u4e2d\u9aa8\u724c\u7684\u4f4d\u7f6e\u5168\u90e8\u4e0d\u4e00\u6837\uff0c\u6216\u62a5\u544a\u65e0\u89e3\u3002$n\\le 3\\times 10^5$\u3002\n\n\u6709\u70b9\u6d41\u6c13\u4e86\u54c8\uff0c\u725b\u903c\u6784\u9020\u3002\n\n\u5bf9\u4e8e\u6bcf\u5f20\u591a\u7c73\u8bfa\u9aa8\u724c $(x_i, y_i)$\uff0c\u8fde\u4e00\u6761\u65e0\u5411\u8fb9 $x_i\\to y_i$\u3002\u7136\u540e\u4f1a\u53d1\u73b0\uff0c\u82e5\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u91cc\u9762\u6070\u597d\u53ea\u6709 $1$ \u6761\u8fb9\uff0c\u8bf4\u660e\u8fd9\u6761\u8fb9\u4ee3\u8868\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u53ea\u6709\u4e00\u79cd\u6446\u6cd5\uff0c\u56e0\u6b64\u65e0\u89e3\u3002\n\n\u5426\u5219\u603b\u80fd\u6784\u9020\u51fa\u4e00\u4e2a $2\\times k$ \u7684\u68cb\u76d8\uff08$k$ \u4e3a\u8fde\u901a\u5206\u91cf\u5185\u8fb9\u6570\uff09\uff0c\u89c1\u4e0b\u3002\n\n\u6211\u4eec\u968f\u4fbf\u5bf9\u8fd9\u5f20\u56fe\u8fdb\u884c\u6b27\u62c9\u904d\u5386\uff08\u5c31\u662f dfs \u904d\u5386\u6ca1\u6709\u904d\u5386\u7684\u8fb9\uff0c\u7136\u540e\u5c06\u7ecf\u8fc7\u7684\u8fb9\u5b58\u4e0b\u6765\uff09\uff0c\u7136\u540e\u4f1a\u53d1\u73b0\u6bcf\u6761\u8fb9\u90fd\u6070\u597d\u5728\u8fd9\u4e2a\u6b27\u62c9\u5e8f\u4e2d\u51fa\u73b0\u4e24\u6b21\uff08\u8003\u8651\u6b27\u62c9\u5e8f\u7684\u6027\u8d28\uff09\uff0c\u5e76\u4e14**\u4e24\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u7684\u5947\u5076\u6027\u4e0d\u4e00\u6837**\u3002\n\n\u5982\u4f55\u8bc1\u660e\uff1f\u8003\u8651\u8fb9 $e=u\\to v$\uff0c\u82e5\u6211\u4eec\u7684 dfs \u76f4\u63a5\u8fd4\u56de\uff0c\u5219\u6b27\u62c9\u5e8f\u5217\u4e2d\u4f1a\u5f62\u6210 $e,e$\uff0c\u4e24\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u5947\u5076\u6027\u663e\u7136\u4e0d\u540c\u3002\u5982\u679c\u8fd8\u8981\u7ee7\u7eed\u904d\u5386\uff0c\u7531\u4e8e\u6211\u4eec\u4e4b\u540e\u904d\u5386\u7684\u8fb9\u4e00\u5b9a\u7ecf\u5386\u4e86\u56de\u6eaf\u8fc7\u7a0b\uff0c\u6240\u4ee5\u4e24\u4e2a $e$ \u4e2d\u95f4\u5939\u7740\u5076\u6570\u6761\u8fb9\uff0c$e$ \u51fa\u73b0\u4f4d\u7f6e\u7684\u5947\u5076\u6027\u4ecd\u7136\u4e0d\u540c\u3002\n\n\u5982\u679c\u8003\u8651\u70b9\u7684\u904d\u5386\u5e8f\uff0c\u5219\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a $2k + 1$ \u7684\u9996\u5c3e\u76f8\u63a5\u7684\u5e8f\u5217\uff08\u8fd8\u662f\u8003\u8651\u6b27\u62c9\u5e8f\u7684\u6027\u8d28\uff09\uff0c\u7136\u540e\u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u53bb\u6389\u5e76\u5c06\u5176\u4f9d\u6b21\u987a\u65f6\u9488\u653e\u5165 $2\\times k$ \u7684\u68cb\u76d8\u4e2d\uff0c\u73b0\u5728\u9aa8\u724c\u4eec\u5bf9\u5e94\u7684 $k$ \u6761\u8fb9\u5c31\u5f62\u6210\u4e86\u957f $2n$ \u7684\u73af\u3002\u56e0\u4e3a\u6bcf\u5f20\u9aa8\u724c**\u51fa\u73b0\u4f4d\u7f6e\u7684\u5947\u5076\u6027\u4e0d\u4e00\u6837**\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u4e24\u79cd\u6784\u9020\u603b\u4f1a\u662f\u5408\u6cd5\u7684\uff08\u56fe\u6e90\u5b98\u65b9\u9898\u89e3\uff09\uff1a\n\n![](https://espresso.codeforces.com/8d975bc11693b0864bbc0b6e19423e4954b1b282.png)\n\n\u4e8e\u662f\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\u6211\u4eec\u5c31\u641e\u5b9a\u4e86\u3002\u5bf9\u4e8e\u591a\u4e2a\u8fde\u901a\u5757\u7684\u60c5\u51b5\uff0c\u628a\u5f97\u5230\u7684 $2\\times k$ \u68cb\u76d8\u4eec\u62fc\u4e00\u8d77\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n![](https://espresso.codeforces.com/211398dfdf9487ee70a6b189aa834b35c0dd601f.png)\n\n\uff08\u53ef\u80fd\u6709\u4e0a\u9762\u7684\u56fe\u66f4\u597d\u7406\u89e3\u4e9b\uff09\n\n```cpp\n#include <bits/stdc++.h>\n#define il inline\n#define FOR(i, a, b) for (int i = (a); i <= (b); ++i)\n#define DEC(i, a, b) for (int i = (a); i >= (b); --i)\n\nusing namespace std;\nconst int maxn = 3e5 + 5;\nint head[maxn << 1], to[maxn << 2], nxt[maxn << 2], cnte = 1;\nint n, vis[maxn << 1], vise[maxn << 2];\n\nil void add(int u, int v) {\n    to[++cnte] = v;\n    nxt[cnte] = head[u];\n    head[u] = cnte;\n    return;\n}\n\nvector<int> path;\n\nvoid dfs(int u, int pre) {\n    path.push_back(u);\n    if (vis[u]) return;\n    vis[u] = 1;\n    for (int i = head[u]; i; i = nxt[i]) if (!vise[i]) {\n        vise[i] = vise[i ^ 1] = 1;\n        dfs(to[i], i);\n        path.push_back(u);\n    }\n    return;\n}\n\nint ans[2][maxn];\nchar sol1[2][maxn], sol2[2][maxn];\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin >> n;\n    FOR(i, 1, n) {\n        int x, y; cin >> x >> y;\n        add(x, y), add(y, x);\n    }\n    int col = 0;\n    FOR(i, 1, n << 1) if (!vis[i]) {\n        vector<int>().swap(path);\n        dfs(i, 0);\n        if (path.size() == 3) return puts(\"-1\"), 0;\n        else if (path.size() < 3) continue;\n        path.pop_back();\n        int k = path.size() >> 1;\n        auto it = path.begin();\n        FOR(i, 1, k) ans[0][i + col] = *it++;\n        DEC(i, k, 1) ans[1][i + col] = *it++;\n        for (int i = 2; i <= k; i += 2) sol1[0][col + i] = sol1[1][col + i] = 'R', sol1[0][col + i - 1] = sol1[1][col + i - 1] = 'L';\n        for (int i = 3; i <= k; i += 2) sol2[0][col + i] = sol2[1][col + i] = 'R', sol2[0][col + i - 1] = sol2[1][col + i - 1] = 'L';\n        if (k & 1) sol1[0][col + k] = 'U', sol1[1][col + k] = 'D';\n        else sol2[0][col + k] = 'U', sol2[1][col + k] = 'D';\n        sol2[0][col + 1] = 'U', sol2[1][col + 1] = 'D';\n        col += k;\n    }\n    cout << 2 << ' ' << col << '\\n';\n    FOR(i, 0, 1) {\n        FOR(j, 1, col) cout << ans[i][j] << ' ';\n        cout << '\\n';\n    }\n    FOR(i, 0, 1) {\n        FOR(j, 1, col) cout << sol1[i][j];\n        cout << '\\n';\n    }\n    FOR(i, 0, 1) {\n        FOR(j, 1, col) cout << sol2[i][j];\n        cout << '\\n';\n    }\n    return 0;\n}\n```",
        "postTime": 1655810179,
        "uid": 212488,
        "name": "\u6e05\u70db",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1695E"
    },
    {
        "content": "# [CF1695E Ambiguous Dominoes](https://codeforces.com/problemset/problem/1695/E)\r\n\r\n>\u5982\u4e0b\u56fe\uff0c\u7ed9\u5b9a $n$ \u4e2a $1\\times 2$ \u7684\u591a\u7c73\u8bfa\u9aa8\u724c\uff0c\u6bcf\u4e2a\u9aa8\u724c\u4e24\u8fb9\u5747\u5199\u6709\u6570\u5b57\uff0c\u6c42\u4e00\u79cd\u77e9\u5f62\u7684\u6784\u9020\u65b9\u6848\uff0c\u4f7f\u5f97\u5b58\u5728 $2$ \u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u5c06\u591a\u7c73\u8bfa\u653e\u8fdb\u77e9\u5f62\u4e2d\uff0c\u4f7f\u5f97\u4e0d\u5b58\u5728 $(x_1,y_1)$ \u548c $(x_2,y_2)$ \u6ee1\u8db3\uff1a\u5728 $2$ \u79cd\u65b9\u6848\u4e2d\u5b83\u4eec\u5747\u5728\u540c\u4e00\u4e2a\u591a\u7c73\u8bfa\u4e2d\u3002 $n\\leq 3\\times 10^5$ \u3002\r\n>\r\n>![39690878422192de705ee07065488f6ef6a452c4.png (1855\u00d7425) (codeforces.com)](https://espresso.codeforces.com/39690878422192de705ee07065488f6ef6a452c4.png)\r\n\r\n\u9996\u5148\u8003\u8651\u5efa\u56fe\uff0c\u5c06\u6bcf\u4e2a $x_i,y_i$ \u8fde\u53cc\u5411\u8fb9\uff0c\u90a3\u4e48\u5c31\u5c06 $n$ \u4e2a\u591a\u7c73\u8bfa\u62bd\u8c61\u6210\u4e86 $n$ \u6761\u8fb9\u3002\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u5f53\u5b58\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u4f7f\u5f97\u8be5\u8fde\u901a\u5757\u4e2d\u6709\u4e14\u4ec5\u6709 $1$ \u6761\u8fb9\uff0c\u90a3\u4e48\u8be5\u60c5\u51b5\u5c06\u65e0\u89e3\u3002\r\n\r\n\u8003\u8651\u5982\u4f55\u6784\u9020\u51fa\u4e00\u4e2a\u65b9\u6848\uff0c\u9996\u5148\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u8fdb\u884c\u4e00\u6b21 dfs \uff0c\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u8282\u70b9\u51fa\u73b0\u7684\u5730\u65b9\uff0c\u4f46\u662f\u7ec6\u8282\u5374\u4e0d\u592a\u4e00\u6837\uff1a\r\n\r\n\u5bf9\u4e8e\u6bcf\u4e2a\u7b2c\u4e00\u6b21\u8bbf\u95ee\u7684\u8282\u70b9\u904d\u5386\u6bcf\u6761\u8fb9\uff0c\u82e5\u8fd9\u6761\u8fb9\u88ab\u7ecf\u8fc7\u5219\u4e0d\u53bb\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u5426\u5219\u53bb\u5411\uff0c\u5e76\u5728\u8fd4\u56de\u540e\u91cd\u65b0\u5c06\u8be5\u8282\u70b9\u653e\u5165\u7b54\u6848\u3002\r\n\r\n\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u662f\u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u8282\u70b9\uff0c\u76f4\u63a5\u8bb0\u5f55\u4e00\u6b21\u5e76\u8fd4\u56de\u3002\r\n\r\n\u8fd9\u91cc\u653e\u4e2a\u4ee3\u7801\uff0c\u5176\u4e2d qwq \u662f\u7528\u4e00\u4e2a `vector` \u6765\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\uff0c `ncnt` \u7528\u6765\u8bb0\u5f55\u5f53\u524d\u8fde\u901a\u5757\u7684\u7f16\u53f7\u3002\r\n\r\n```cpp\r\nvoid dfs(int x){\r\n\tqwq[ncnt].push_back(x);\r\n\tif(vis[x])\r\n\t\treturn;\r\n\tvis[x]=1;\r\n\tfor(int i=head[x];i;i=e[i].nxt){\r\n\t\tif(book[i>>1])\r\n\t\t\tcontinue;\r\n\t\tbook[i>>1]=1;\r\n\t\tdfs(e[i].to);\r\n\t\tqwq[ncnt].push_back(x);\r\n\t}\r\n}\r\n```\r\n\r\n\u7136\u540e\u5c31\u4f1a\u53d1\u73b0\u4e00\u4e2a\u5f88\u6709\u8da3\u7684\u4e8b\u5b9e\uff0c\u5c31\u662f\u8fd9\u4e2a\u5e8f\u5217\u957f\u5ea6\u4e3a $2\\times k+1$ \uff0c\u5176\u4e2d $k$ \u8868\u793a\u8fde\u901a\u5757\u4e2d\u8fb9\u7684\u4e2a\u6570\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u4e0a\u8ff0 dfs \u7684\u8fc7\u7a0b\u4e2d dfs \u6811\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u88ab\u7ecf\u8fc7\u4e86\u4e00\u6b21\uff0c\u4ea7\u751f\u7684 $2$ \u7684\u8d21\u732e\uff0c\u800c\u4e00\u5f00\u59cb\u65f6\u8fd8\u7ecf\u8fc7\u4e86 dfs \u6811\u7684\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u662f $2\\times k+1$ \u3002\r\n\r\n\u66f4\u6709\u610f\u601d\u7684\u662f\uff0c\u7b2c\u4e00\u4e2a\u8282\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e00\u5b9a\u76f8\u540c\uff0c\u90fd\u662f\u6839\uff0c\u5f53\u5bf9 `qwq[ncnt].pop_back()` \u4e4b\u540e\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a $2\\times k$ \u7684\u5e8f\u5217\u3002\u5c06\u5e8f\u5217\u8fde\u6210\u73af\u5219\u53ef\u4ee5\u53d1\u73b0\u73af\u4e0a\u7684\u6bcf\u4e2a $(i,i+1)$ \u90fd\u6784\u6210\u4e86\u539f\u56fe\u4e0a\u7684\u4e00\u6761\u8fb9\uff08\u56e0\u4e3a\u8fd9\u662f\u5728 dfs \u6811\u4e0a\uff09\uff0c\u5e76\u4e14\u6bcf\u6761\u8fb9\u90fd\u51fa\u73b0\u4e86 $2$ \u6b21\uff08\u56e0\u4e3a\u5728\u8fdb dfs \u6811\u548c\u51fa dfs \u6811\u65f6\u90fd\u4f1a\u51fa\u73b0\u4e00\u6b21\uff09\u3002\u6700\u540e\u6709\u4e00\u4e2a\u6211\u4e0d\u592a\u4f1a\u8bc1\u7684\u7ed3\u8bba\uff0c\u5373\u6bcf\u6761\u8fb9\u51fa\u73b0\u7684\u5730\u65b9\u5947\u5076\u6027\u4e0d\u540c\u3002\uff08\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u9898\u89e3\uff09\r\n\r\n\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u7ed3\u8bba\u4e86\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u5c06 dfs \u5f97\u5230\u7684 `qwq` \u6570\u7ec4\u6309\u7167\u987a\u65f6\u9488\uff08\u9006\u65f6\u9488\u4e5f\u884c\uff09\u7ed5\u6210\u4e00\u4e2a\u73af\uff08\u653e\u5230\u7f51\u683c\u4e0a\u662f $2\\times k$ \u7684\u4e00\u6bb5\uff09\uff0c\u90a3\u4e48\u53d6\u73af\u4e0a\u5947\u5076\u6027\u4e0d\u540c\u7684 $2$ \u4e2a\u70b9\u5f97\u5230\u7684 $2$ \u79cd\u65b9\u6848\u5373\u4e3a\u7b54\u6848\uff08\u53ef\u4ee5\u53c2\u8003\u4e0b\u56fe\u8fdb\u884c\u7406\u89e3\uff09\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u5c06\u6240\u6709\u8fde\u901a\u5757\u7684\u7f51\u683c\u90fd\u5408\u5e76\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\r\n\r\n![211398dfdf9487ee70a6b189aa834b35c0dd601f.png (1722\u00d7740) (codeforces.com)](https://espresso.codeforces.com/211398dfdf9487ee70a6b189aa834b35c0dd601f.png)\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint n;\r\nint head[600005],ecnt=1;\r\nstruct edge{\r\n\tint to,nxt;\r\n}e[1200005];\r\nvoid adde(int u,int v){\r\n\te[++ecnt].to=v;\r\n\te[ecnt].nxt=head[u];\r\n\thead[u]=ecnt;\r\n}\r\nvector<int> qwq[600005];\r\nint ncnt;\r\nint m[2][600005],qnq[600005];\r\nchar M1[2][600005],M2[2][600005];\r\nbool vis[600005],book[600005];\r\n\r\nvoid dfs(int x){\r\n\tqwq[ncnt].push_back(x);\r\n\tif(vis[x])\r\n\t\treturn;\r\n\tvis[x]=1;\r\n\tfor(int i=head[x];i;i=e[i].nxt){\r\n\t\tif(book[i>>1])\r\n\t\t\tcontinue;\r\n\t\tbook[i>>1]=1;\r\n\t\tdfs(e[i].to);\r\n\t\tqwq[ncnt].push_back(x);\r\n\t}\r\n}\r\n\r\nint main(){\r\n\tscanf(\"%d\",&n);\r\n\tfor(int i=1,ui,vi;i<=n;++i){\r\n\t\tscanf(\"%d %d\",&ui,&vi);\r\n\t\tadde(ui,vi);\r\n\t\tadde(vi,ui);\r\n\t\tqnq[ui]++;\r\n\t\tqnq[vi]++;\r\n\t}\r\n\tfor(int i=1;i<=2*n;++i){\r\n\t\tif(qnq[i]>2)\r\n\t\t\tcontinue;\r\n\t\tif(qnq[i]==2 && e[head[i]].to==i && e[e[head[i]].nxt].to==i){\r\n\t\t\tprintf(\"-1\");\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif(qnq[i]!=1)\r\n\t\t\tcontinue;\r\n\t\tfor(int j=head[i];j;j=e[j].nxt){\r\n\t\t\tif(qnq[e[j].to]==1){\r\n\t\t\t\tprintf(\"-1\");\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=2*n;++i){\r\n\t\tif(vis[i]==0){\r\n\t\t\tncnt++;\r\n\t\t\tdfs(i);\r\n\t\t\tqwq[ncnt].pop_back();\r\n\t\t}\r\n\t}\r\n\tfor(int i=1,qaq=1;i<=ncnt;++i){\r\n\t\tif(qwq[i].size()==0)\r\n\t\t\tcontinue;\r\n\t\tfor(int j=0;j<(int)qwq[i].size();++j){\r\n\t\t\tif(j<(int)qwq[i].size()/2){\r\n\t\t\t\tm[0][qaq+j]=qwq[i][j];\r\n\t\t\t}\r\n\t\t\tif(j>=(int)qwq[i].size()/2){\r\n\t\t\t\tm[1][(int)qwq[i].size()-j-1+qaq]=qwq[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif((qwq[i].size()/2)%2==0){\r\n\t\t\tfor(int j=0;j<qwq[i].size()/4;++j){\r\n\t\t\t\tM1[0][qaq+2*j]='L';\r\n\t\t\t\tM1[0][qaq+2*j+1]='R';\r\n\t\t\t}\r\n\t\t\tfor(int j=0;j<qwq[i].size()/4;++j){\r\n\t\t\t\tM1[1][qaq+2*j]='L';\r\n\t\t\t\tM1[1][qaq+2*j+1]='R';\r\n\t\t\t}\r\n\t\t\tfor(int j=1;j<qwq[i].size()/4;++j){\r\n\t\t\t\tM2[0][qaq+2*j-1]='L';\r\n\t\t\t\tM2[0][qaq+2*j]='R';\r\n\t\t\t}\r\n\t\t\tfor(int j=1;j<qwq[i].size()/4;++j){\r\n\t\t\t\tM2[1][qaq+2*j-1]='L';\r\n\t\t\t\tM2[1][qaq+2*j]='R';\r\n\t\t\t}\r\n\t\t\tM2[0][qaq]='U';\r\n\t\t\tM2[1][qaq]='D';\r\n\t\t\tM2[0][qaq+qwq[i].size()/2-1]='U';\r\n\t\t\tM2[1][qaq+qwq[i].size()/2-1]='D';\r\n\t\t\t\r\n\t\t}\r\n\t\telse{\r\n\t\t\tfor(int j=0;j<qwq[i].size()/4;++j){\r\n\t\t\t\tM1[0][qaq+2*j]='L';\r\n\t\t\t\tM1[0][qaq+2*j+1]='R';\r\n\t\t\t}\r\n\t\t\tfor(int j=0;j<qwq[i].size()/4;++j){\r\n\t\t\t\tM1[1][qaq+2*j]='L';\r\n\t\t\t\tM1[1][qaq+2*j+1]='R';\r\n\t\t\t}\r\n\t\t\tfor(int j=1;j<qwq[i].size()/4+1;++j){\r\n\t\t\t\tM2[0][qaq+2*j-1]='L';\r\n\t\t\t\tM2[0][qaq+2*j]='R';\r\n\t\t\t}\r\n\t\t\tfor(int j=1;j<qwq[i].size()/4+1;++j){\r\n\t\t\t\tM2[1][qaq+2*j-1]='L';\r\n\t\t\t\tM2[1][qaq+2*j]='R';\r\n\t\t\t}\r\n\t\t\tM2[0][qaq]='U';\r\n\t\t\tM2[1][qaq]='D';\r\n\t\t\tM1[0][qaq+qwq[i].size()/2-1]='U';\r\n\t\t\tM1[1][qaq+qwq[i].size()/2-1]='D';\r\n\t\t}\r\n\t\tqaq+=qwq[i].size()/2;\r\n\t}\r\n\tprintf(\"%d %d\\n\",2,n);\r\n\tfor(int i=0;i<=1;++i){\r\n\t\tfor(int j=1;j<=n;++j)\r\n\t\t\tprintf(\"%d \",m[i][j]);\r\n\t\tprintf(\"\\n\");\r\n\t}\r\n\tprintf(\"%s\\n%s\\n\",M1[0]+1,M1[1]+1);\r\n\tprintf(\"%s\\n%s\\n\",M2[0]+1,M2[1]+1);\r\n\treturn 0;\r\n}\r\n```",
        "postTime": 1668946845,
        "uid": 342989,
        "name": "HBWH_zzz",
        "ccfLevel": 7,
        "title": "CF1695E Ambiguous Dominoes"
    }
]