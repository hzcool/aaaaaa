[
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://spadea261.blog.luogu.org/codeforces-round-801-div-2-post)\n\n> [D1. Tree Queries (Easy Version)\n](https://codeforces.com/contest/1695/problem/D1)\n> \n> $t$ \u7ec4\u6570\u636e\uff0c\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u65e0\u6839\u6811\uff0c\u8981\u6c42\u6784\u9020 $k$ \u4e0e\u957f\u5ea6\u4e3a $k$ \u7684\u7ed3\u70b9\u5e8f\u5217 $v_i$\u3002\u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9 $x$\uff0c\u901a\u8fc7 $k$ \u4e2a $\\mathrm{dis}(v_i,x)$ \u7684\u503c\u4fbf\u80fd\u786e\u5b9a $x$ \u7684\u7f16\u53f7\uff0c\u5176\u4e2d $\\mathrm{dis}(u,v)$ \u8868\u793a $u$ \u5230 $v$ \u7684\u8ddd\u79bb\u3002\u6c42 $k$ \u7684\u6700\u5c0f\u503c\u3002\n> \n> $1\\le t\\le 100$\uff0c$\\color{red}{1\\le\\sum n\\le 2000}$\u3002\n\n\u8003\u8651\u6811\u5f62 $\\mathrm{dp}$\uff0c\u5728\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u8bbe $f_u$ \u8868\u793a\u5728\u8be2\u95ee\u8fc7 $u$ \u6216 $u$ \u7684\u7956\u5148\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u786e\u5b9a\u5b50\u6811\u5185\u4efb\u610f\u4e00\u70b9\u7f16\u53f7\u7684\u6700\u5c11\u6b21\u6570\u3002\n\n\u8003\u8651\u8f6c\u79fb\uff0c\u6211\u4eec\u5148\u94a6\u5b9a\u8be2\u95ee\u6839\u7ed3\u70b9\uff0c\u5bb9\u6613\u53d1\u73b0\uff0c\u7531\u4e8e\u6b64\u65f6 $x$ \u4e3a $u$ \u5b50\u6811\u5185\u4efb\u610f\u4e00\u70b9\uff0c\u56e0\u6b64\u8981\u628a\u6bcf\u4e2a\u5b50\u6811\u5185\u7684\u60c5\u51b5\u90fd\u8981\u8003\u8651\u5230\uff0c\u5373 $f_u\\ge\\sum_{v\\in son_u}f_v$\u3002**\u540c\u65f6\u4e0d\u96be\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u4e2a $u$\uff0c\u6700\u591a\u6709\u4e00\u4e2a\u513f\u5b50 $v$ \u7684\u5b50\u6811\u4e2d\u6ca1\u6709\u8be2\u95ee\u70b9\uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u786e\u5b9a\u672a\u77e5\u70b9 $x$**\u3002\u7279\u522b\u5730\uff0c\u82e5 $u$ \u4e3a\u53f6\u7ed3\u70b9\uff0c\u5219 $f_u=0$\u3002\n\n\u5176\u6b21\uff0c\u4e3a\u786e\u4fdd\u628a $x$ \u7684\u6bcf\u4e00\u79cd\u60c5\u51b5\u8003\u8651\u5230\uff0c\u56e0\u6b64\u8bbe $u$ \u6709 $cnt_u$ \u4e2a $f_v=0$ \u7684\u513f\u5b50\uff0c\u90a3\u4e48\u663e\u7136\u9700\u8981\u518d\u8be2\u95ee $cnt_u-1$ \u6b21\u3002\uff08\u56e0\u4e3a\u82e5\u4e0d\u5728\u524d $cnt_u-1$ \u4e2a\u513f\u5b50\u7684\u5b50\u6811\u4e2d\uff0c\u5c31\u552f\u4e00\u786e\u5b9a\u4e86\uff09\u5f53\u7ecf\u8fc7\u8fd9\u4e9b\u64cd\u4f5c\u540e\uff0c\u4fbf\u53ef\u4ee5\u786e\u5b9a $x$ \u5904\u5728\u54ea\u9897\u5b50\u6811\u4e2d\u3002\n\n\u8bc1\u660e\uff1a\u7531\u4e8e\u6b64\u65f6\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u5185\u6ca1\u6709\u8be2\u95ee\u70b9\uff0c\u5bf9\u4e8e $u$ \u7684\u4e00\u4e2a\u5b50\u8282\u70b9 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\u7684\u8be2\u95ee\u70b9 $w$\uff0c\u5f53 $x$ \u4e0d\u5728 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\u65f6\uff0c$dis(u,w)+dis(u,x)=dis(w,x)$\uff1b\u5f53 $x$ \u5728 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\u65f6\uff0c$dis(u,w)+dis(u,x)>dis(w,x)$\uff0c\u7531\u4e8e\u94a6\u5b9a\u8be2\u95ee\u6839\u7ed3\u70b9\uff0c$dis(u,x)$ \u662f\u5df2\u77e5\u7684\uff0c$dis(w,x)$ \u548c $dis(u,w)$ \u5747\u4e3a\u5df2\u77e5\uff0c\u56e0\u6b64\u53ea\u9700\u5224\u65ad\u6bcf\u4e2a\u8be2\u95ee\u70b9 $w$ \u662f\u5426\u90fd\u6ee1\u8db3 $dis(u,w)+dis(u,x)=dis(w,x)$\uff0c\u82e5\u5176\u4e2d\u4e00\u4e2a\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48 $x$ \u4fbf\u5728\u90a3\u4e2a $v$ \u4e3a\u6839\u5b50\u6811\u5185\uff0c\u5426\u5219\uff0c$x$ \u5728\u672a\u8be2\u95ee\u7684\u90a3\u4e2a $v$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\u3002\n\n\u56e0\u6b64\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a$f_u=\\sum_{v\\in son_u}f_v+\\max(0,cnt_u-1)$\u3002\u6700\u7ec8\u7b54\u6848\u4e3a $f_{root}+1$\u3002\uff08\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\uff0c\u8fd8\u8981\u52a0\u4e0a\u8be2\u95ee $root$ \u7684\u4e00\u6b21\uff09\n\n\u7531\u4e8e\u6574\u68f5\u6811\u7684\u6839\u4f1a\u5bf9\u7ed3\u679c\u4ea7\u751f\u5f71\u54cd\uff0c\u56e0\u6b64\u8fd8\u8981\u679a\u4e3e\u6839\uff0c\u518d\u5bf9\u7ed3\u679c\u53d6 $\\min$\u3002\n\n\u6ce8\u610f\u7279\u5224 $n=1$ \u7684\u60c5\u51b5\uff0c\u7b54\u6848\u4e3a $0$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(\\sum n^2)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2005;\nint t,n,ans;\nint f[N];\nvector<int> e[N];\nvoid dfs(int u,int fa)\n{\n    f[u]=0;\n    int cnt=0;\n    for(int i=0;i<e[u].size();i++)\n    {\n        int v=e[u][i];\n        if(v==fa) continue;\n        dfs(v,u);\n        if(!f[v]) cnt++;\n        f[u]+=f[v];\n    }\n    f[u]+=max(0,cnt-1);\n    return;\n}\nint main()\n{\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        scanf(\"%d\",&n);\n        if(n==1) ans=0;\n        else ans=n;\n        for(int i=1;i<=n;i++) e[i].clear();\n        for(int i=1;i<=n-1;i++)\n        {\n            int u,v;\n            scanf(\"%d%d\",&u,&v);\n            e[u].push_back(v);\n            e[v].push_back(u);\n        }\n        for(int i=1;i<=n;i++)\n        {\n            dfs(i,0);\n            ans=min(ans,f[i]+1);\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```\n\n> [D2. Tree Queries (Hard Version)\n](https://codeforces.com/contest/1695/problem/D2)\n> \n> $t$ \u7ec4\u6570\u636e\uff0c\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u65e0\u6839\u6811\uff0c\u8981\u6c42\u6784\u9020 $k$ \u4e0e\u957f\u5ea6\u4e3a $k$ \u7684\u7ed3\u70b9\u5e8f\u5217 $v_i$\u3002\u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9 $x$\uff0c\u901a\u8fc7 $k$ \u4e2a $\\mathrm{dis}(v_i,x)$ \u7684\u503c\u4fbf\u80fd\u786e\u5b9a $x$ \u7684\u7f16\u53f7\uff0c\u5176\u4e2d $\\mathrm{dis}(u,v)$ \u8868\u793a $u$ \u5230 $v$ \u7684\u8ddd\u79bb\u3002\u6c42 $k$ \u7684\u6700\u5c0f\u503c\u3002\n> \n> $1\\le t\\le 100$\uff0c$\\color{red}{1\\le\\sum n\\le 2\\times 10^5}$\u3002\n\n\u53d1\u73b0\u4e0a\u4e00\u9898\u4e2d\uff0c\u679a\u4e3e\u6839\u7ed3\u70b9\u4e3a\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\u7684\u74f6\u9888\uff0c\u56e0\u6b64\u8bd5\u56fe\u538b\u6389\u8fd9\u4e00\u7ef4\u7684\u679a\u4e3e\u3002\n\n\u5c06 $dis(u,w)+dis(u,x)=dis(w,x)$ \u53d8\u5f62\u5f97\uff1a$dis(w,x)-dis(u,w)=dis(u,x)$\uff0c\u800c $dis(u,x)$ \u5fc5\u7136\u56fa\u5b9a\uff0c\u800c\u5bf9\u4e8e $x$ \u6240\u5728\u7684\u5b50\u6811\u7684\u6839 $v$\uff0c\u6709 $dis(w,x)-dis(u,w)<dis(u,x)$\u3002\n\n\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e9b\u60c5\u51b5\uff0c\u53ef\u4ee5\u4e0d\u7528\u8be2\u95ee\u6839\u7ed3\u70b9\u6765\u786e\u5b9a $dis(u,x)$ \u7684\u503c\uff0c\u800c\u9664\u4e86\u6839\u662f\u5426\u9700\u8981\u8be2\u95ee\uff0c\u5176\u4f59\u8be2\u95ee\u7684\u603b\u6b21\u6570\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u786e\u5b9a\u4e00\u4e2a\u4e0d\u9700\u8981\u8be2\u95ee\u7684\u6839\uff0c\u518d $\\mathrm{dfs}$ \u8ba1\u7b97\u4e00\u904d\u5373\u53ef\u3002\n\n\u8bbe\u6839\u7ed3\u70b9 $root$ \u7684\u5ea6\u6570\u4e3a $deg$\u3002\n\n\u63a5\u4e0b\u6765\u8bc1\u660e\uff1a\u82e5 $deg>2$\uff0c\u5219\u8fd9\u4e2a\u6839\u7ed3\u70b9\u4e0d\u9700\u8981\u8be2\u95ee\u3002\n\n\u9996\u5148\uff0c\u7531\u4e8e $deg>2$\uff0c\u56e0\u6b64\u81f3\u5c11\u4f1a\u5728\u5176 $2$ \u4e2a\u513f\u5b50\u7684\u5b50\u6811\u4e2d\u6709\u8be2\u95ee\u3002\u4ece\u4e2d\u5404\u9009\u51fa $1$ \u6b21\u8be2\u95ee\uff0c\u901a\u8fc7\u8fd9 $2$ \u6b21\u8be2\u95ee\uff0c\u5c31\u80fd\u6c42\u51fa $u$ \u7684\u4efb\u610f\u4e00\u4e2a\u513f\u5b50 $v$ \u7684 $dis(v,x)$ \u7684\u503c\u3002\u56e0\u6b64\u4e0d\u8be2\u95ee\u6839\u5bf9\u5176\u513f\u5b50\u6ca1\u6709\u5f71\u54cd\u3002\n\n\u5176\u6b21\uff0c\u7531\u4e8e\u6bcf\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u5185\u81f3\u5c11\u6709 $1$ \u6b21\u8be2\u95ee\uff08\u9664\u6389\u53ef\u80fd\u4f1a\u672a\u8be2\u95ee\u7684\u4e00\u4e2a\u513f\u5b50\u7ed3\u70b9\uff09\uff0c\u5219\u901a\u8fc7\u8fd9\u81f3\u5c11 $deg-1$ \u6b21\u8be2\u95ee\uff0c\u80fd\u5f97\u5230\u8fd9\u4e9b\u8be2\u95ee\u7684\u70b9\u4e0e $x$ \u7684\u8ddd\u79bb\uff0c\u6839\u636e\u524d\u9762\u7684\u63a8\u65ad\uff0c\u5f53\u8fd9\u4e9b\u8ddd\u79bb\u90fd\u76f8\u7b49\u65f6\uff0c$x$ \u5fc5\u5728\u672a\u8be2\u95ee\u7684 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\uff0c\u82e5\u4e0d\u5168\u76f8\u7b49\uff0c\u5219 $x$ \u5728\u8ddd\u79bb\u6700\u5c0f\u7684 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\u3002\n\n\u56e0\u6b64\u4e0d\u8be2\u95ee\u6839\u7ed3\u70b9\u5c31\u8fbe\u5230\u4e86\u76f8\u540c\u7684\u6548\u679c\uff0c\u6b64\u65f6 $\\mathrm{dfs}$ \u7684\u7b54\u6848\u5373\u4e3a\u6700\u5c0f\u3002 \n\n\u82e5\u6240\u6709\u7ed3\u70b9\u7684\u5ea6\u6570\u7684\u6700\u5927\u503c\u4e3a $2$\uff0c\u5219\u6b64\u65f6\u4e3a\u4e00\u6761\u94fe\uff0c\u7b54\u6848\u4e3a $1$\u3002\n\n\u540c\u6837\u6ce8\u610f\u7279\u5224 $n=1$ \u7684\u60c5\u51b5\uff0c\u7b54\u6848\u4e3a $0$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(\\sum n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+5;\nint t,n,root;\nint f[N];\nvector<int> e[N];\nvoid dfs(int u,int fa)\n{\n    f[u]=0;\n    int cnt=0;\n    for(int i=0;i<e[u].size();i++)\n    {\n        int v=e[u][i];\n        if(v==fa) continue;\n        dfs(v,u);\n        if(!f[v]) cnt++;\n        f[u]+=f[v];\n    }\n    f[u]+=max(0,cnt-1);\n    return;\n}\nint main()\n{\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        scanf(\"%d\",&n);\n        root=0;\n        for(int i=1;i<=n;i++) e[i].clear();\n        for(int i=1;i<=n-1;i++)\n        {\n            int u,v;\n            scanf(\"%d%d\",&u,&v);\n            e[u].push_back(v);\n            e[v].push_back(u);\n        }\n        for(int i=1;i<=n;i++)\n        {\n            if(e[i].size()>=3)\n            {\n                root=i;\n                break;\n            }\n        }\n        if(n==1) f[root]=0;\n        else if(!root) f[root]=1;\n        else dfs(root,0);\n        printf(\"%d\\n\",f[root]);\n    }\n    return 0;\n}\n```",
        "postTime": 1655825775,
        "uid": 124218,
        "name": "SpadeA261",
        "ccfLevel": 6,
        "title": "CF1695D2 Tree Queries \u9898\u89e3"
    },
    {
        "content": "- \u9996\u5148\uff0c\u5c06\u539f\u95ee\u9898\u62bd\u8c61\u4e3a\u53e6\u4e00\u4e2a\u7b49\u4ef7\u547d\u9898\uff1a\n\t\n\t\u5728\u4e00\u9897\u65e0\u6839\u6811\u4e0a\u9009\u62e9 $k$ \u4e2a\u70b9\u3002\u6811\u4e0a\u6bcf\u4e2a\u70b9\u5230\u8fd9 $k$ \u4e2a\u70b9\u7684\u8ddd\u79bb\u6784\u6210\u4e00\u4e2a $k$ \u7ef4\u5411\u91cf\u3002\u6c42\u5f97\u6700\u5c0f\u7684 $k$ \u4f7f\u5f97\u6bcf\u4e2a\u5411\u91cf\u90fd\u4e0d\u76f8\u540c\u3002\n    \n- \u4e8e\u662f\u8003\u8651\u5750\u6807\u4f1a\u76f8\u540c\u7684\u7684\u60c5\u51b5\uff0c\u4ee5\u67d0\u70b9\u4e3a\u6839\uff0c\u6709\u4e24\u68f5\u5b50\u6811\u6ca1\u6709\u9009\u62e9\u7684\u70b9\u7684\u65f6\u5019\u5411\u91cf\u4f1a\u76f8\u540c\u3002\u4e8e\u662f\u4ece\u539f\u6811\u4e2d\u7684\u6240\u6709\u5ea6\u4e3a $1$ \u7684\u70b9\u5f80\u4e0a\u8d70\uff0c\u7ed9\u5ea6\u6570 $2$ \u5927\u7684\u70b9\u6253\u6807\u8bb0\u3002\u53c8\u56e0\u4e3a\u6709\u4e00\u9897\u5b50\u6811\u53ef\u4ee5\u4e0d\u9009\u62e9\uff0c\u6240\u4ee5\u628a\u53f6\u5b50\u6570\u51cf\u53bb\u6709\u6807\u8bb0\u7684\u70b9\u5c31\u662f\u7b54\u6848\u4e86\u3002\u7ebf\u6027\u590d\u6742\u5ea6\u3002\n\n- \u8bb0\u5f97\u628a\u94fe\u5224\u6389\u3002\n\n- \u4ee3\u7801\uff1a\n\n```cpp\n//#pragma once\n//#pragma GCC optimize(2)\n//#pragma GCC optimize(3)\n#include <bits/stdc++.h>\n//#include <bits/extc++.h>\n#define ll long long\nusing namespace std;\n//using namespace __gnu_pbds;\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-f;ch=getchar();}\n    while(isdigit(ch)){ret=ret*10+ch-'0';ch=getchar();}\n    return ret*f; //x=(x<<1)+(x<<3)+(ch^48);\n}\nconst int maxn=1e5+10;\nint n,ans;\nvector<int> vec[maxn<<1];\nbool vis[maxn];\n \nint dfs(int u,int fa){\n    if(vec[u].size()>2) return u;\n    for(auto v:vec[u]) if(v!=fa) return dfs(v,u);\n    return u;\n}\n \ninline void solve(){\n    n=read();ans=0;\n    for(int i=1;i<=n;i++) vec[i].clear(),vis[i]=0;\n    if(n==1) {\n    \tputs(\"0\");return;\n\t}\n    for(int i=1,u,v;i<n;i++)\n        u=read(),v=read(),vec[u].push_back(v),vec[v].push_back(u);\n    for(int i=1;i<=n;i++)\n        if(vec[i].size()==1) vis[dfs(i,0)]=true,ans++;\n    for(int i=1;i<=n;i++) if(vis[i]) ans--;\n    if(ans==0) puts(\"1\");\n\telse printf(\"%d\\n\",ans);\n}\nint main(){\n\tint t=read();\n\twhile(t--){\n\t\tsolve();\n\t}\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1656856227,
        "uid": 567739,
        "name": "Sellaris",
        "ccfLevel": 4,
        "title": "CF1695D2"
    },
    {
        "content": "\u5206\u4eab\u4e00\u4e2a\u505a\u6cd5\u3002\n\n\n------------\n\n\u9898\u610f\uff1a\n\n\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u4f60\u53ef\u4ee5\u8be2\u95ee\u4e00\u4e9b\u70b9 $v_1,\\dots,v_k$\uff08\u4ec5\u4e00\u6b21\uff09\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97\u5b83\u4eec\u5230\u4e00\u4e2a\u795e\u79d8\u8282\u70b9\u7684\u8ddd\u79bb $d_1,\\dots,d_k$\u3002\n\n\u95ee\u81f3\u5c11\u8be2\u95ee\u591a\u5c11\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u5728\u795e\u79d8\u8282\u70b9\u662f\u4efb\u610f\u8282\u70b9\u65f6\uff0c\u5c06\u5176\u63a8\u65ad\u51fa\u6765\u3002\n\n\n------------\n\n\u4ee5\u4e0b $d_i$ \u8868\u793a\u795e\u79d8\u8282\u70b9\u5230 $i$ \u7684\u8ddd\u79bb\u3002\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u9009\u4e86\u4e24\u4e2a\u70b9\u53ef\u4ee5\u77e5\u9053\u90a3\u4e9b\u4fe1\u606f\uff1a\n\n[![XXaj54.png](https://s1.ax1x.com/2022/06/19/XXaj54.png)](https://imgtu.com/i/XXaj54)\n\n\u5047\u8bbe\u6211\u4eec\u5f53\u524d\u9009\u4e86 $7,9$ \u4e24\u4e2a\u70b9\uff0c\u5982\u679c $d_7+d_9=dis(7,9)$\uff08$dis(x,y)$ \u8868\u793a $x,y$ \u95f4\u7684\u6700\u77ed\u8ddd\u79bb\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u88ab\u552f\u4e00\u786e\u5b9a\uff08\u5982\u4e0a\u56fe\u82e5 $d_7=3,d_9=2$\uff0c\u90a3\u4e48\u795e\u79d8\u8282\u70b9\u4e00\u5b9a\u662f $1$\uff09\u3002\n\n\u90a3\u4e48\u5982\u679c $d_7+d_9>dis(7,9)$\uff08\u663e\u7136 $d_7+d_9\\ge dis(7,9)$\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e24\u70b9\u8def\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u9644\u5e26\u90e8\u5206\u5206\u6210\u4e00\u7ec4\uff08\u770b\u56fe\uff0c\u84dd\u5708\u4ee3\u8868\u4e00\u7ec4\uff09\uff0c\u82e5\u795e\u79d8\u70b9\u5728\u67d0\u4e2a\u7ec4\u5185\uff0c\u90a3\u4e48 $7,9$ \u90fd\u662f\u5148\u8d70\u5230\u8be5\u7ec4\u5185\u7684\u7ea2\u8272\u8282\u70b9\uff08$7,9$ \u8def\u5f84\u4e0a\u7684\u70b9\uff09\uff0c\u518d\u4ece\u7ea2\u8272\u70b9\u5f80\u4e0b\u8d70\u3002\u53ef\u4ee5\u53d1\u73b0 $7,9$ \u5728\u795e\u79d8\u70b9\u6240\u5728\u7ec4\u5185\u8d70\u7684\u8def\u5f84\u90fd\u662f\u76f8\u540c\u7684\uff0c\u5373\u7ea2\u8272\u70b9\u5230\u795e\u79d8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u6240\u4ee5\uff0c\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u5c06 $d_7,d_9$ \u5206\u522b\u51cf $1$\uff0c\u76f4\u5230 $d_7+d_9=dis(7,9)$ \u6765\u786e\u5b9a\u7ea2\u8272\u70b9\uff1b\n\n\u518d\u901a\u8fc7\u51cf\u4e86\u51e0\u6b21 $1$ \u6765\u786e\u5b9a\uff1a\u8fd9\u7ec4\u5185\u4ee5\u7ea2\u8272\u8282\u70b9\u4e3a\u6839\u7684\u6811\uff0c\u795e\u79d8\u8282\u70b9\u7684\u6df1\u5ea6\u3002\n\n\u5982\u4e0a\u56fe\u82e5 $d_7=5,d_9=4$\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u5316\u4e3a $d_7=3+2,d_9=2+2$\uff0c\u786e\u5b9a\u7ea2\u8272\u70b9\u662f $1$\uff0c\u5e76\u4e14\u795e\u79d8\u70b9\u7684\u6df1\u5ea6\u4e3a $2$\uff0c\u56e0\u4e3a\u5728 $\\{1,3,10\\}$ \u5185\uff0c\u6df1\u5ea6\u4e3a $2$ \u7684\u8282\u70b9\u53ea\u6709 $10$\uff0c\u6240\u4ee5\u795e\u79d8\u70b9\u662f $10$\u3002\n\n\u82e5\u6211\u4eec\u5df2\u7ecf\u9009\u4e86\u4e24\u4e2a\u70b9\uff0c\u90a3\u4e48\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e0d\u80fd\u95ee\u51fa\u5168\u90e8\u795e\u79d8\u8282\u70b9\uff1f\n\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e24\u4e2a\u70b9\u786e\u5b9a\u4e86\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u770b\u505a\u201c\u865a\u5316\u201d\u4e86\uff0c\u4e00\u6761\u8fb9\u865a\u5316\u540e\uff0c\u4e0d\u8ba1\u5165\u5ea6\u6570\u3002\u82e5\u6b64\u65f6\u6709\u4e00\u4e2a\u70b9\u5ea6\u6570 $\\ge3$\uff0c\u795e\u79d8\u8282\u70b9\u82e5\u5728\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u5185\uff0c\u5219\u6709\u53ef\u80fd\u65e0\u6cd5\u552f\u4e00\u786e\u5b9a\u3002\n\n[![XXL3v9.png](https://s1.ax1x.com/2022/06/19/XXL3v9.png)](https://imgtu.com/i/XXL3v9)\n\n\n\u5982\u56fe\uff0c\u5982\u679c\u6211\u4eec\u4ec5\u4ec5\u662f\u77e5\u9053\u4e86\u8d70\u5230\u7ea2\u8272\u8282\u70b9 $1$ \u5e76\u4e14\u6df1\u5ea6\u4e3a $2$\uff0c\u90a3\u4e48\u6709\u53ef\u80fd\u662f $8,9$ \u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u3002\n\n\u5229\u7528\u865a\u5316\u7684\u601d\u60f3\u62d3\u5e7f\uff1a\u4e09\u4e2a\u70b9\u65f6\u4f1a\u600e\u4e48\u6837\uff0c\u4ed4\u7ec6\u601d\u8003\u540e\u5c31\u4f1a\u53d1\u73b0\uff0c\u865a\u5316\u7684\u8fb9\u96c6\u5373\u4e3a\u4e09\u4e2a\u70b9\u4e24\u4e24\u95f4\u8def\u5f84\u8fb9\u96c6\u7684\u5e76\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u4e09\u4e2a\u70b9\u4e24\u4e24\u95f4\u8def\u5f84\u4e0a\u7684\u8fb9\u5168\u90e8\u865a\u5316\u3002\n\n\u5728\u865a\u5316\u8fc7\u7a0b\u4e2d\uff0c\u9009\u62e9\u5ea6\u4e3a $2$ \u7684\u70b9\uff0c\u4e00\u5b9a\u4e0d\u5982\u9009\u62e9\u5176\u8fde\u63a5\u81f3\u7684\u5ea6\u4e3a\u975e $2$ \u7684\u8282\u70b9\u3002\u5426\u5219\u4e0d\u662f\u9009\u4e86\u6ca1\u7528\uff0c\u5c31\u662f\u4e24\u8fb9\u90fd\u5f97\u9009\u522b\u7684\u70b9\uff0c\u4f46\u662f\u4e24\u8fb9\u90fd\u5f97\u9009\uff0c\u4e0d\u5c31\u8986\u76d6\u5176\u672c\u8eab\u4e86\u5417\uff1f**\u6240\u4ee5\u5ea6\u4e3a $2$ \u7684\u70b9\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\uff0c\u5e76\u4e0d\u5f71\u54cd\u7ed3\u679c**\uff08\u4e0d\u5f71\u54cd\u522b\u7684\u70b9\u7684\u5ea6\u6570\uff09\u3002\n\n\u5177\u4f53\u7684\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5ea6\u4e3a $2$ \u7684\u70b9\uff0c\u6211\u4eec\u76f4\u63a5\u5c06\u5176\u8fde\u5230\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9\uff0c\u5e76\u5220\u9664\u5176\u3002\n\n\u5220\u5b8c\u5ea6\u4e3a $2$ \u7684\u70b9\u540e\uff0c\u573a\u4e0a\u8fd8\u5269\u4e0b\u8fd9\u4e9b\u4e1c\u897f\uff1a\u4e00\u4e9b\u5ea6 $\\ge3$ \u7684\u8282\u70b9\uff0c\u6784\u6210\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\uff08\u79f0\u4e4b\u4e3a\u65b0\u6811\uff09\uff0c\u6bcf\u4e2a\u70b9\u4e0a\u5e26\u4e86\u4e00\u4e9b\u5ea6\u4e3a\u4e00\u7684\u70b9\uff08\u79f0\u4e3a\u9644\u5c5e\u70b9\uff09\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u9009\u70b9\uff0c\u4f7f\u5f97\u6240\u6709\u5ea6 $\\ge3$ \u7684\u70b9\u53d8\u5c0f\u3002\n\n\u8d2a\u5fc3\u9009\u62e9\uff0c\u9009\u62e9\u65b0\u6811\u4e0a\u6240\u6709\u5ea6\u4e3a $1$ \u7684\u70b9\u4e2d\u7684\u4e00\u4e2a\u9644\u5c5e\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u6574\u4e2a\u65b0\u6811\u8fb9\u5168\u90e8\u865a\u5316\u5e76\u4e14\u82b1\u8d39\u6700\u5c0f\u3002\u82e5\u8fde\u975e\u9644\u5c5e\u70b9\uff0c\u5219\u6bd4\u8fde\u9644\u5c5e\u70b9\u5c11\u865a\u5316\u4e00\u6761\u8fb9\u3002\u82e5\u8fde\u5ea6\u975e $1$ \u7684\u8282\u70b9\uff0c\u5219\u5ea6\u4e3a $1$ \u7684\u8fd8\u8981\u5355\u72ec\u5904\u7406\uff0c\u81f3\u5c11\u4e0d\u52a3\u3002\n\n\u81f3\u4e8e\u6700\u540e\u5269\u4e0b\u7684\u9644\u5c5e\u70b9\uff0c\u90a3\u53ea\u80fd\u66b4\u529b\u9009\u4e86\uff0c\u6ce8\u610f\u53ef\u4ee5\u7559\u4e00\u4e2a\u4e0d\u9009\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log n)$\n\n\u4ee3\u7801\uff1a\n\n```cpp\n//\u8d5b\u65f6\u7684\uff0c\u7531\u4e8e\u4e00\u4e9b\u539f\u56e0\u53ef\u80fd\u6709\u4e00\u4e9b\u795e\u79d8\u64cd\u4f5c\n//\u5176\u5b9e\u4e0d\u662f\u8d5b\u65f6\u7684\uff0c\u8d5b\u65f6\u7684\u4ee3\u7801\u7531\u4e8e\u4e24\u4e2a\u5c0f\u95ee\u9898 wa on 2\u4e86\nint n,m,d[200005],vis[200005];\nset<int>E[200005]; \ninline void work(){\n\tfor(int i=1;i<=n;i++){\n\t\tE[i]=set<int>();\n\t\td[i]=vis[i]=0;\n\t}\n\tn=read();\n\tif(n==1)return pus(\"0\"); \n\tfor(int i=1;i<n;i++){\n\t\tint x=read(),y=read();\n\t\tE[x].insert(y);E[y].insert(x);\n\t}\n\tif(n==2)return pus(\"1\");\n\tfor(int i=1;i<=n;i++){\n\t\tif(E[i].size()==2){//\u5220\u5ea6\u4e3a 2 \u7684\u70b9\n\t\t\tint u=*E[i].begin(),v=*--E[i].end();\n\t\t\tvis[i]=1;\n\t\t\tE[u].erase(i);E[v].erase(i);\n\t\t\tE[u].insert(v);E[v].insert(u);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)d[i]=E[i].size();\n\tint cnt=0;\n\tfor(int i=1;i<=n;i++){\n\t\tcnt+=(E[i].size()==1);\n\t\tif(E[i].size()==1)vis[i]=2;\n\t}\n\tif(cnt==2)return pus(\"1\");\n\tfor(int i=1;i<=n;i++){\n\t\tif(vis[i]==2){//\u627e\u65b0\u6811\n\t\t\tvis[i]=1;\n\t\t\tint u=*E[i].begin();\n\t\t\tE[u].erase(i);E[i].erase(u);\n\t\t}\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(E[i].size()==1){d[i]-=2;ans++;}\n\t\telse d[i]-=(int)E[i].size();\n\t\t//\u5982\u679c\u5728\u65b0\u6811\u4e0a\u5ea6\u4e3a 1\uff0c\u90a3\u5c31\u662f\u5176\u4e2d\u4e00\u6761\u4e0a\u51fa\u8fb9\uff0c\u4e0e\u4e00\u6761\u8fde\u5230\u9644\u5c5e\u70b9\u7684\u8fb9\u865a\u5316\n\t\t//\u5426\u5219\u51cf\u65b0\u6811\u4e0a\u6240\u6709\u51fa\u8fb9\n\t\tif(!vis[i])ans+=max(d[i]-1,0);//\u8fd8\u6709\u5269\u4e0b\u7684\u9644\u5c5e\u70b9\n\t}\n\twrite(ans,'\\n');\n}\n```",
        "postTime": 1655793050,
        "uid": 185864,
        "name": "TOBapNw",
        "ccfLevel": 7,
        "title": "\u9898\u89e3\u3010CF1695D2 Tree Queries (Hard Version)\u3011"
    },
    {
        "content": "\u76f4\u63a5 Easy Hard \u4e00\u8d77\u8bb2\u4e86\u3002\n\n\u7279\u5224\u6389 $n=1$ \u548c\u94fe\u3002\n\n\u5148\u65e0\u6839\u6811\u5f62\u6001\u601d\u8003\u3002\n\n$deg$ \u8868\u793a\u5ea6\u6570\u3002\n\n\u8bbe $Y$ \u4e3a\u53f6\u5b50\uff08$deg=1$\uff09\u96c6\u5408\u3002\n\n* * *\n\n**\u7ed3\u8bba\uff1a** \u67e5\u8be2 $Y$ \u5fc5\u7136\u53ef\u884c\u3002\n\n**\u8bc1\u660e\uff1a**\n\n\u5c06\u6bcf\u4e2a\u53f6\u5b50\u5411\u5916\u67d3\u8272\uff0c$deg\\ge 3$ \u7684\u8282\u70b9\u505c\u4e0b\uff08\u8be5 $deg\\ge3$ \u4e0d\u67d3\u8272\uff09\u3002\n\n\u82e5\u6700\u7ec8\u8981\u627e\u7684\u8282\u70b9\uff08\u8bbe\u4e3a $X$\uff09\u88ab\u67d3\u8272\u4e86\uff0c\u5979\u4e00\u5b9a\u80fd\u88ab\u627e\u5230\u3002\n\n\u5426\u5219\u6211\u4eec\u5c06\u67d3\u8272\u7684\u70b9\u5220\u9664\uff0c\u6b64\u65f6\u76f8\u5f53\u4e8e\u8fd8\u662f\u67e5\u8be2\u4e86\u6240\u6709\u53f6\u5b50\uff0c\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u5373\u53ef\u5f97\u8bc1\u3002\n\n* * *\n\n\u6240\u4ee5\u6211\u4eec\u76ee\u524d\u7684\u7b54\u6848\u4e3a $|Y|$\u3002\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4f18\u5316\u8fd9\u4e2a\u7b54\u6848\u3002\n\n\u8bb0\u6bcf\u4e2a\u53f6\u5b50 $x$ \u67d3\u8272\u78b0\u5230\u7684 $deg\\ge3$ \u7684\u70b9\u4e3a $up_x$\uff0c\u5bf9\u5076\u5730\uff0c\u8bb0 $S_u=\\{x\\ |\\ deg_x=1\\ \\land\\ up_x=u\\}$\u3002\n\n\u6211\u4eec\u8003\u5bdf\u4e00\u4e2a $S$ \u975e\u7a7a\u7684\u8282\u70b9 $u$\uff0c\u6211\u4eec\u8bc1\u660e\u5728 $S$ \u4e2d\u53ef\u4ee5\u5c11\u67e5\u8be2\u4e00\u4e2a\u53f6\u5b50\u3002\n\n* * *\n\n**\u8bc1\u660e\uff1a**\n\n\u4efb\u53d6 $S_u$ \u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 $d$\u3002\u6211\u4eec\u67e5\u8be2 $Y-d$\u3002\n\n\u5c06\u6574\u68f5\u6811\u4ee5 $u$ \u5b9a\u6839\uff0c\u8bbe $d$ \u7684\u7956\u5148 $y$ \u4f7f\u5f97 $y$ \u7684\u7236\u4eb2\u4e3a $u$\u3002\n\n\u82e5 $X$ \u4e0d\u5728 $y$ \u6240\u5728\u5b50\u6811\u91cc\uff0c\u90a3\u6ca1\u5173\u7cfb\u3002\n\n\u5426\u5219\uff0c\u4efb\u53d6\u4e24\u4e2a\u67e5\u8be2\u70b9 $o,p$ \u4e0d\u5728 $u$ \u7684\u540c\u4e00\u4e2a\u5b50\u6811\u4e2d\uff0c\u5f97\u5230 $dis(X,o)-dis(X,p)=dis(u,o)-dis(u,p)$\uff0c\u8bf4\u660e $X$ \u4e0d\u5728 $o$ \u6216 $p$ \u6240\u5728\u7684\u5b50\u6811\u4e2d\u3002\n\n\u7531\u4e8e $X,y$ \u4e4b\u95f4\u5fc5\u7136\u662f\u94fe\uff0c\u6700\u540e\u518d\u901a\u8fc7\u4efb\u610f\u67e5\u8be2\u70b9 $o$ \u5f97\u5230 $dis(o,X)$ \u786e\u5b9a $X$ \u7684\u6df1\u5ea6\u5373\u53ef\u3002\n\n* * *\n\n\u6240\u4ee5\u6700\u7ec8\u7b54\u6848\u5c31\u662f\uff1a\n\n**\u53f6\u5b50\u6570 $-\\ S$ \u96c6\u5408\u975e\u7a7a\u8282\u70b9\u6570**\n\n\u5f62\u5f0f\u5316\uff1a\n$$\\large{\nAns=|\\{x\\ |\\ deg_x=1\\}|-|\\{x\\ |\\ S_x\\ne\\varnothing\\}|\n}$$\n\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u505a\u5230 $O(n)$\u3002\n\n```cpp\n//We'll be counting stars.\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\n#define For(i,j,k) for(int i=(j);i<=(k);i++)\n#define N 200010\nint n,up[N];\nbool bc[N];//branch\nvector<int> e[N];\nvoid dfs(int rt,int fa){\n\tif(e[rt].size()>=3) up[rt]=rt;\n\telse up[rt]=up[fa];\n\tfor(int i:e[rt]) if(i!=fa) dfs(i,rt);\n}\nvoid work(){\n\tscanf(\"%d\",&n);\n\tFor(i,1,n) e[i].clear();\n\tint x,y;\n\tFor(i,1,n-1){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\te[x].push_back(y);\n\t\te[y].push_back(x);\n\t}\n\tif(n==1){ puts(\"0\"); return ; }\n\tint root=0; For(i,1,n) if(e[i].size()>=3) root=i;\n\tif(!root){ puts(\"1\"); return ; }\n\tdfs(root,0);\n\tfill(bc+1,bc+1+n,false);\n\tint ans=0;\n\tFor(i,1,n) if(e[i].size()==1) ans++,bc[up[i]]=true;\n\tFor(i,1,n) if(bc[i]) ans--;\n\tprintf(\"%d\\n\",ans);\n}\nint main(){\n\tint T;scanf(\"%d\",&T);\n\twhile(T--)work(); \nreturn 0;}\n```",
        "postTime": 1657721196,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "CF1695D2 Tree Queries (Hard Version)"
    },
    {
        "content": "### [ CF1695D2 Tree Queries (Hard Version)](https://www.luogu.com.cn/problem/CF1695D2)\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u5b83\u6709\u8d85\u8fc7\u4e24\u4e2a\u5b50\u6811\u4e2d\u6ca1\u6709\u67e5\u8be2\u70b9\uff0c\u90a3\u4e48\u5bf9\u4e8e\u90a3\u51e0\u4e2a\u5b50\u8282\u70b9\u662f\u65e0\u6cd5\u552f\u4e00\u786e\u5b9a\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5b83\u53ea\u80fd\u6709\u81f3\u591a\u4e00\u4e2a\u5b50\u6811\u4e2d\u6ca1\u6709\u67e5\u8be2\u70b9\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u54ea\u4e00\u4e2a\u5b50\u6811\u4e2d\u4e0d\u9009\u62e9\u67e5\u8be2\u70b9\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5b50\u6811\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u5b50\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5982\u679c\u6211\u4eec\u9009\u62e9\u8fd9\u9897\u5b50\u6811\u4e0a\u7684\u70b9\u4f5c\u4e3a\u67e5\u8be2\u70b9\uff0c\u8fd9\u4e2a\u67e5\u8be2\u70b9\u53ea\u80fd\u4f7f\u5f97\u8fd9\u9897\u5b50\u6811\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u66f4\u52a0\u7cbe\u786e\uff0c\u56e0\u4e3a\u8fd9\u9897\u5b50\u6811\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4e0d\u662f\u53f6\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u6211\u4eec\u5728\u5b83\u7684\u5b50\u6811\u4e2d\u9009\u62e9\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u67e5\u8be2\u70b9\uff0c\u5bf9\u4e8e\u8fd9\u6574\u9897\u5b50\u6811\u7684\u8282\u70b9\u7684\u7cbe\u786e\u5ea6\u90fd\u6709\u8d21\u732e\u3002\u56e0\u6b64\uff0c\u5b50\u6811\u5927\u5c0f\u4e3a $1$ \u7684\u5b50\u6811\u4e2d\u4e0d\u9009\u62e9\u67e5\u8be2\u70b9\u3002\n\ncode\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=200010;\nint T,n;\nvector<int> to[N];\nint dfs(int u,int fa)\n{\n    int sum=0,son=0;\n    for (auto v:to[u])\n    {\n        if (v==fa) continue;\n        int x=dfs(v,u);\n        sum+=x;\n        if (x==0) son++;\n    }\n    return sum+max(0,son-1);\n}\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"zsr.in\",\"r\",stdin);\n    freopen(\"zsr.out\",\"w\",stdout);\n#endif\n    scanf(\"%d\",&T);\n    while (T--)\n    {\n        scanf(\"%d\",&n);\n        for (int i=1;i<n;++i)\n        {\n            int u,v;\n            scanf(\"%d%d\",&u,&v);\n            to[u].push_back(v);\n            to[v].push_back(u);\n        }\n        int maxdeg=0;\n        for (int i=1;i<=n;++i) maxdeg=max(maxdeg,(int)to[i].size());\n        if (maxdeg==0) puts(\"0\");\n        else if (maxdeg<3) puts(\"1\");\n        else\n        {\n            for (int i=1;i<=n;++i)\n            {\n                if (to[i].size()>=3)\n                {\n                    printf(\"%d\\n\",dfs(i,0));\n                    break;\n                }\n            }\n        }\n        for (int i=1;i<=n;++i) to[i].clear();\n    }\n    return 0;\n}\n```\n",
        "postTime": 1683730296,
        "uid": 767793,
        "name": "_ZSR_",
        "ccfLevel": 0,
        "title": "CF1695D2 Tree Queries (Hard Version)"
    }
]