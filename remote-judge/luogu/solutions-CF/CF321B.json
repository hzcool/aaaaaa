[
    {
        "content": "[\u9898\u76ee\u5927\u610f](https://www.luogu.org/problem/CF321B)\n\n\u8fd9\u9053\u9898\u76ee\u96be\u5904\u7406\u7684\u662f\u6211\u65b9\u7684\u724c\u53ef\u4ee5\u6253\u5b8c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u6253\u5b8c\uff0c\u5e76\u4e14\u7531\u6837\u4f8b\u4e8c\u53ef\u4ee5\u53d1\u73b0\u5e76\u4e0d\u662f\u51fa\u6570\u503c\u76f8\u8fd1\u7684\u724c\u5c31\u80fd\u8d62\uff0c\u5f88\u50cf\u662f dp \uff08\u4e8b\u5b9e\u4e0a\u4e5f\u662f\uff09\n\n\u90a3\u5230\u5e95\u5982\u4f55\u51fa\u724c\u624d\u80fd\u6536\u76ca\u6700\u5927\u5462\uff1f\u8003\u8651\u5168\u4e24\u79cd\u60c5\u51b5\uff1a\u6253\u5b8c\u81ea\u5df1\u7684\u724c\u3001\u4e0d\u6253\u5b8c\u81ea\u5df1\u7684\u724c\u3002\n\n---\n\n_\u7b56\u7565\u4e00\uff1a\u6253\u7206\u5bf9\u65b9\u6240\u6709\u724c_\n\n\u90a3\u4e48\u5f88\u660e\u663e\u6b64\u65f6\u5148\u653b\u51fb DEF \u66f4\u4f18\u3002\u56e0\u4e3a\u6211\u4eec\u671f\u671b\u7684\u662f\u6253\u5b8c\u6240\u6709\u724c\uff0c\u5982\u679c\u81ea\u5df1\u8fd8\u6709\u5269\u4f59\u76f4\u63a5\u6784\u6210\u771f\u4f24\u3002\n\n\u5982\u679c\u5148\u653b\u51fb ATK \u5f88\u53ef\u80fd\u51fa\u73b0\u6253\u4e0d\u52a8 DEF \u7684\u5c34\u5c2c\u5c40\u9762\u3002\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u627e\u4e0e\u5bf9\u65b9 DEF \u6700\u63a5\u8fd1\u7684\u724c\u6253\u51fa\uff0c\u7136\u540e\u518d\u627e\u548c\u5bf9\u65b9 ATK \u6700\u76f8\u8fd1\u7684\u724c\u6253\u3002\u6700\u540e\uff0c\u5982\u679c\u8fd8\u6709\u5269\u4f59\u76f4\u63a5\u7d2f\u52a0\u7b54\u6848\u5c31\u597d\u4e86\u3002\n\n\u4e3a\u4ec0\u4e48\u627e\u548c\u5bf9\u65b9 ATK \u6700\u63a5\u8fd1\u7684\u724c\u6253\u5462\uff1f\u8c8c\u4f3c\u62ff\u81ea\u5df1\u6700\u5927\u7684\u6253\u522b\u4eba\u6700\u5c0f\u7684\u66f4\u5212\u7b97\u554a \u5176\u5b9e\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u7684\u53e6\u4e00\u79cd\u7b56\u7565\u4e86\u3002\u56e0\u4e3a\u4e0d\u6253\u5b8c\u81ea\u5df1\u7684\u6240\u6709\u724c\uff0c\u90a3\u5c31\u5fc5\u987b\u8ba9\u6253\u51fa\u7684\u724c\u9020\u6210\u7684\u4f24\u5bb3\u6700\u5927\u561b\n\n_\u7b56\u7565\u4e8c\uff1a\u4e2d\u9014\u9000\u51fa_\n\n\u8fd9\u79cd\u7b56\u7565\u4e0b\u6211\u4eec\u4e0d\u6253 DEF\uff0c\u56e0\u4e3a\u8981\u628a\u724c\u90fd\u7559\u7740\u6253 ATK\u3002\u800c\u4e14\u5982\u679c\u60f3\u7740\u9020\u6210 ATK \u4f24\u5bb3\u6700\u5927\u4e0b\u540c\u65f6\u8bd5\u7740\u6253\u5b8c DEF \u518d\u9020\u6210\u771f\u4f24\uff0c\u5c31\u662f\u7b56\u7565\u4e00\u7b56\u7565\u4e8c\u4e24\u5934\u90fd\u6ca1\u987e\u7740\u4e86\uff0c\u5f88\u5bb9\u6613\u88ab hack\n\n---\n\n\u901a\u8fc7\u7b80\u8ff0\u4e24\u79cd\u60c5\u51b5\u4e0b\u7684\u7b56\u7565\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\u5b83\u4eec\u90fd\u80fd\u88ab hack\u3002\n\n\u72b9\u8c6b\u4e0d\u5b9a\uff0c\u60f3\u6253\u5b8c\u6240\u6709\u724c\u53ef\u89c1\u6837\u4f8b\u4e8c\n\n\u6bcf\u6b21\u9009\u6700\u5927\u6253\u6700\u5c0f\uff0c\u5bb9\u6613\u6784\u9020\uff1a\n\n```\n3 4\nATK 1\nATK 2\nATK 3\n4 3 2 2\n```\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u8003\u8651\u5168\u4e24\u79cd\u60c5\u51b5\uff0c\u628a\u4e24\u79cd\u8d2a\u5fc3\u7b56\u7565\u4e2d\u62e9\u4f18\u554a\n\n\u5f53\u7136\uff0cdp \u548c \u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u90fd\u53ef\u505a\uff0c\u53ef\u4ee5\u53c2\u8003 CF \u7684\u5b98\u65b9\u9898\u89e3\u3002\n\n\u672c\u9898\u8fd8\u6709\u7684\u5751\u70b9\u662f\u529b\u91cf\u503c\u662f\u975e\u8d1f\u7684\uff0c\u521d\u503c\u8981\u8bbe\u4e3a `-1`\n\n\ncode :\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\nconst int N = 100003;\n\nint n, m;\n\nint totAtk, totDef;\nint xAtk[N];\nint yAtk[N], yDef[N];\n\n//totAtk totDef\u4e3a\u5bf9\u65b9\u624b\u4e2dATK\u4e0eDEF\u7684\u6570\u76ee\uff0c\u4fbf\u4e8e\u6392\u5e8f\n//xAtk[]\u662f\u6211\u65b9\u5361\u724c\u6570\u7ec4\n//yAtk[] yDef[]\u662f\u5bf9\u65b9\u5361\u724c\u6570\u7ec4\n\nint copy_xAtk[N];\nint copy_yAtk[N], copy_yDef[N];\n\n//\u8fd9\u91cc\u6709\u4e0a\u8ff0\u4e09\u4e2a\u6570\u7ec4\u7684\u5907\u4efd\n//\u4e3a\u4e86\u9632\u6b62\u505a\u5b8c\u4e00\u79cd\u7b56\u7565\u5bf9\u540e\u9762\u7b56\u7565\u4e2d\u6570\u7ec4\u7684\u5f71\u54cd\n\n//rush\u4fbf\u662f\u6253\u5b8c\u6240\u6709\u724c\u7684\u7b56\u7565\ninline LL rush(int *xAtk, int *yAtk, int *yDef)\n{\n    LL ret = 0;\n    sort(xAtk + 1, xAtk + m + 1);\n    sort(yDef + 1, yDef + totDef + 1);\n    sort(yAtk + 1, yAtk + totAtk + 1);\n    //\u5148\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u627e\u51fa\u4e0eDEF\u76f8\u8fd1\u7684\u724c\u6253\n    \n    for(register int i = 1; i <= totDef; ++i)\n    {\n        int P = upper_bound(xAtk + 1, xAtk + m + 1, yDef[i]) - xAtk;\n        if(xAtk[P] < yDef[i]) return 0;\n        //\u5982\u679c\u8fdeDEF\u90fd\u8fd8\u4e0d\u80fd\u6253\u5b8c\uff0c\u90a3\u4e48\u8fd9\u79cd\u7b56\u7565\u6536\u76ca\u4e3a0\n        \n        xAtk[P] = -1; yDef[i] = -1;\n    }\n    sort(xAtk + 1, xAtk + m + 1);\n    //\u6ce8\u610f\u8fd9\u91cc\u8981\u91cd\u65b0\u6392\u5e8f!\u6570\u7ec4\u7684\u503c\u53d1\u751f\u4e86\u53d8\u5316\n    \n    for(register int i = 1; i <= totAtk; ++i)\n    {\n        int P = lower_bound(xAtk + 1, xAtk + m + 1, yAtk[i]) - xAtk;\n        if(xAtk[P] < yAtk[i] || xAtk[P] == -1 || yAtk[i] == -1) return ret;\n        //\u5982\u679c\u6253\u4e0d\u52a8ATK\u4e86\uff0c\u53ea\u80fd\u5220\u5e93\u5e26\u7740\u6536\u76ca\u8dd1\u8def\u4e86\n        \n        ret += xAtk[P] - yAtk[i];\n        xAtk[P] = -1; yAtk[i] = -1;\n    }\n\n    for(register int i = 1; i <= m; ++i) if(xAtk[i] != -1) ret += xAtk[i];\n    //\u5eb7\u5eb7\u8fd8\u6709\u6ca1\u6709\u771f\u4f24qwq\n    \n    return ret;\n}\n\n//\u7b56\u7565\u4e8c\uff0c\u628a\u5927\u724c\u76f4\u63a5\u70b8\u51fa\u53bb\ninline LL blow(int *xAtk, int *yAtk, int *yDef)\n{\n    LL ret = 0;\n    sort(xAtk + 1, xAtk + m + 1);\n    sort(yAtk + 1, yAtk + totAtk + 1);\n    \n    //\u8fd9\u91cc\u7684\u53d8\u91cf\u6761\u4ef6\u7684\u610f\u601d\u662f\n    //\u5982\u679c\u6211\u7684\u724c\u8fd8\u6ca1\u6253\u5b8c\uff0c\u5c31\u7ee7\u7eed\u5faa\u73af\n    //\u56e0\u4e3a\u53ef\u80fd\u8fd8\u6709DEF\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u7d2f\u8ba1\u771f\u4f24\n    //\u5bf9\u65b9\u724c\u503c-1\u5c31\u662f\u6ca1ATK\u724c\u4e86\n    for(register int i = m, j = 1; i >= 1; --i, ++j)\n        if(xAtk[i] >= yAtk[j])\n        {\n            if(yAtk[j] != -1)\n            {\n                ret += xAtk[i] - yAtk[j];\n                xAtk[i] = -1; yAtk[j] = -1;\n            }\n        }\n    return ret;\n}\n\nsigned main()\n{\n    scanf(\"%d%d\", &n, &m);\n    char str[7];\n    //\u8bbe\u521d\u503c\n    \n    memset(xAtk, -1, sizeof(xAtk));\n    memset(yAtk, -1, sizeof(yAtk));\n    memset(yDef, -1, sizeof(yDef));\n    memset(copy_xAtk, -1, sizeof(copy_xAtk));\n\tmemset(copy_yAtk, -1, sizeof(copy_yAtk));\n\tmemset(copy_yDef, -1, sizeof(copy_yDef));\n\n    for(register int i = 1; i <= n; ++i)\n    {\n        scanf(\"%s\", str);\n        if(str[0] == 'A')\n        {\n        \t++totAtk;\n            scanf(\"%d\", &yAtk[totAtk]);\n        }\n        else\n        {\n        \t++totDef;\n            scanf(\"%d\", &yDef[totDef]);\n        }\n    }\n    for(register int i = 1; i <= m; ++i) scanf(\"%d\", &xAtk[i]), copy_xAtk[i] = xAtk[i];\n    for(register int i = 1; i <= totAtk; ++i) copy_yAtk[i] = yAtk[i];\n    for(register int i = 1; i <= totDef; ++i) copy_yDef[i] = yDef[i];\n    printf(\"%lld\", max( rush(xAtk, yAtk, yDef), blow(copy_xAtk, copy_yAtk, copy_yDef) ));\n    //\u4e24\u79cd\u7b56\u7565\u62e9\u4f18\u8f93\u51fa\u3002\n    return 0;\n}\n\n```",
        "postTime": 1565011533,
        "uid": 80358,
        "name": "Rbu_nas",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF321B \u3010Ciel and Duel\u3011"
    },
    {
        "content": "> \u6bcf\u5f20\u5361\u724c\u6709\u7c7b\u578b\uff08\u653b\u51fb\u6216\u9632\u5fa1\uff09\u548c\u529b\u91cf\u503c\u4e24\u4e2a\u4fe1\u606f\u3002$\\texttt J$ \u6709 $n$ \u5f20\u5361\u724c\uff0c$\\texttt C$ \u6709 $m$ \u5f20\u5361\u724c\u3002\u5df2\u77e5 $\\texttt C$ \u7684\u5361\u724c\u5168\u662f\u653b\u51fb\u578b\u7684\u3002\n\n>\u6e38\u620f\u7684\u6bcf\u4e00\u8f6e\u90fd\u7531 $C$ \u8fdb\u884c\u64cd\u4f5c\uff0c\u9996\u5148\u4ece\u81ea\u5df1\u624b\u4e0a\u9009\u62e9\u4e00\u5f20\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\u5361\u724c $X$\u3002\n\n>\u5982\u679c $\\texttt J$ \u624b\u4e0a\u6ca1\u6709\u5361\u724c\uff0c\u53d7\u5230\u7684\u4f24\u5bb3\u4e3a $X$ \u7684\u529b\u91cf\u503c\uff0c\u5426\u5219 $\\texttt C$ \u8981\u4ece $\\texttt J$ \u7684\u624b\u4e0a\u9009\u62e9\u4e00\u5f20\u5361\u724c $Y$ \u3002\n\n>\u82e5 $Y$ \u662f\u653b\u51fb\u578b\uff08\u5f53 $X$ \u7684\u529b\u91cf\u503c\u4e0d\u5c0f\u4e8e $Y$ \u7684\u529b\u91cf\u503c\u65f6\u624d\u53ef\u9009\u62e9\uff09\uff0c\u6b64\u8f6e\u7ed3\u675f\u540e $Y$ \u6d88\u5931\uff0c$\\texttt J$ \u53d7\u5230\u7684\u4f24\u5bb3\u4e3a $X$ \u7684\u529b\u91cf\u503c\u4e0e $Y$ \u7684\u529b\u91cf\u503c\u7684\u5dee\uff1b\u82e5 $Y$ \u662f\u9632\u5fa1\u578b\uff08\u5f53 $X$ \u7684\u529b\u91cf\u503c\u5927\u4e8e $Y$ \u7684\u529b\u91cf\u503c\u65f6\u624d\u53ef\u9009\u62e9\uff09\uff0c\u6b64\u8f6e\u7ed3\u675f\u540e $Y$ \u6d88\u5931\uff0c$\\texttt J$ \u4e0d\u53d7\u5230\u4f24\u5bb3\u3002\n\n>$\\texttt C$ \u53ef\u4ee5\u968f\u65f6\u7ed3\u675f\u81ea\u5df1\u7684\u64cd\u4f5c\uff08\u5361\u724c\u4e0d\u4e00\u5b9a\u8981\u7528\u5b8c\uff09\u3002\u5979\u60f3\u4f7f\u5f97 $\\texttt J$ \u53d7\u5230\u7684\u603b\u4f24\u5bb3\u6700\u5927\u3002\n\n\u8003\u8651\u8d2a\u5fc3\uff0c\u4e0d\u96be\u60f3\u5230\u6709\u4e24\u79cd\u6253\u6cd5\uff1a\n\n* $\\texttt C$ \u5c3d\u91cf\u7528\u529b\u91cf\u503c\u5927\u7684\u724c\u53bb\u6253 $\\texttt J$ \u529b\u91cf\u503c\u5c0f\u7684\u724c\uff0c\u7136\u540e\u7ed3\u675f\u6e38\u620f\u3002\n\n* $\\texttt C$ \u7528\u6700\u5c0f\u7684\u4ee3\u4ef7\u5c06 $\\texttt J$ \u9632\u5fa1\u578b\u724c\u5168\u90fd\u6253\u5b8c\u540e\uff0c\u518d\u7528\u6700\u5c0f\u4ee3\u4ef7\u5c06 $\\texttt J$ \u653b\u51fb\u578b\u724c\u5168\u90e8\u6253\u5b8c\uff0c\u6700\u540e\u76f4\u63a5\u8d34\u8138\u6253 $\\texttt J$\u3002\n\n\u4f46\u662f\u4e24\u79cd\u6253\u6cd5\u90fd\u80fd\u6784\u9020\u51fa\u6570\u636e Hack \u6389\uff0c\u90a3\u4e48\u5c31\u628a\u4e24\u79cd\u6253\u6cd5\u90fd\u8dd1\u4e00\u904d\u7136\u540e\u53d6\u6700\u5927\u503c\uff08\u7b80\u5355\u7c97\u66b4\uff09\u3002\n\n$\\texttt{Code}:$\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define ull unsigned long long\n#define rint register int\nusing namespace std;\nnamespace IO{\n\t#define File(x,y) freopen(#x,\"r\",stdin),freopen(#y,\"w\",stdout);\n\tinline int read(){\n\t\tint w=0,f=1; char ch=getchar();\n\t\twhile(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();}\n\t\twhile(ch>='0'&&ch<='9'){w=(w<<3)+(w<<1)+(ch^48); ch=getchar();}\n\t\treturn w*f;\n\t}\n\tinline void write(int x){\n  \t\tstatic int sta[35]; int top=0;\n  \t\tdo{sta[++top]=x%10,x/=10;}while(x);\n  \t\twhile(top) putchar(sta[top--]+48); puts(\"\");\n\t}\n}\nusing namespace IO;\nnamespace CL{\n\t#define fill(x,y) memset(x,y,sizeof(x))\n\t#define copy(x,y) memcpy(y,x,sizeof(x))\n\t\n\tconst int maxn=105;\n\t\n\tint n,m,totatk,totdef;\n\tint Jatk[maxn],Jdef[maxn],atk[maxn];\n\tbool used[maxn];\n\tinline int work1(){\n\t\tint res=0,p=1;\n\t\tsort(atk+1,atk+1+m,greater<int>());\n\t\tfor(int i=1;i<=m;i++)\n\t\t\tif(atk[i]>=Jatk[p] && Jatk[p]!=-1)\n\t\t\t\tres+=atk[i]-Jatk[p],p++;\n\t\treturn res;\n\t}// all in atk\n\tinline int work2(){\n\t\tint res=0,p1=1; bool check=1;\n\t\tsort(atk+1,atk+1+m);\n\t\tfor(int p2=1;p2<=totdef;p2++){\n\t\t\twhile((atk[p1]<=Jdef[p2] || used[p1]) && p1<=m) p1++;\n\t\t\tif(p1==m+1){\n\t\t\t\tfill(used,0); check=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tused[p1]=1;\n\t\t}\n\t\tp1=1;\n\t\tfor(int p2=1;p2<=totatk;p2++){\n\t\t\twhile((atk[p1]<Jatk[p2] || used[p1]) && p1<=m) p1++;\n\t\t\tif(p1==m+1) return res;\n\t\t\tres+=atk[p1]-Jatk[p2];\n\t\t\tused[p1]=1;\n\t\t}\n\t\tif(check) \n\t\t\tfor(int i=1;i<=m;i++)\n\t\t\t\tif(!used[i]) res+=atk[i];\n\t\treturn res;\n\t}// atack def first then all in atk & real_atk\n\t\n\tinline int main(){\n\t\tn=read(); m=read();\n\t\tfill(Jatk,-1); fill(Jdef,-1); fill(atk,-1);\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tchar op; cin>>op;\n\t\t\tif(op=='A') Jatk[++totatk]=read();\n\t\t\tif(op=='D') Jdef[++totdef]=read();\n\t\t}\n\t\tfor(int i=1;i<=m;i++) atk[i]=read();\n\t\tsort(Jatk+1,Jatk+1+totatk);\n\t\tsort(Jdef+1,Jdef+1+totdef);\n\t\tint ans1=work1(),ans2=work2();\n\t\tprintf(\"%d\\n\",max(ans1,ans2));\t\n\t\treturn 0;\n\t}\n}\nsigned main(){return CL::main();}\n```",
        "postTime": 1625835897,
        "uid": 226113,
        "name": "\u706b\u7fbd\u767d\u65e5\u751f",
        "ccfLevel": 0,
        "title": "\u300c\u9898\u89e3\u300dCF321B Ciel and Duel"
    },
    {
        "content": "\u597d\u591a\u505a\u6cd5\u554a\uff0c\u6765\u4e00\u53d1\u8d39\u7528\u6d41\u5427QAQ\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u9898\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u51e0\u4e2a\u6bd4\u8f83\u7279\u6b8a\u7684\u70b9\uff1a\n\n1. $Ciel$\u53ef\u4ee5\u9009\u62e9\u968f\u65f6\u7ed3\u675f\u64cd\u4f5c\u3002\n\n2. \u5f53$Juro$\u6ca1\u6709\u724c\u4e4b\u540e\uff0c$Ciel$\u53ef\u4ee5\u628a\u81ea\u5df1\u5269\u4e0b\u7684\u724c\u5168\u6253\u4e0a\u53bb\u3002\n\n\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u8003\u8651\u76f4\u63a5\u679a\u4e3e\u6253\u4e86\u51e0\u5f20\u724c\uff0c\u591a\u5efa\u4e00\u4e2a\u70b9\u8fde\u5411\u6e90\u70b9\u9650\u5236\u6d41\u91cf\u5c31\u53ef\u4ee5\u3002\n\n\u91cd\u70b9\u662f\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8003\u8651\u628a$Juro$\u7684\u724c\u62c6\u6210\u4e24\u4e2a\u70b9$i,i'$\u3002\n\n- $i\\to i'$\u6d41\u91cf$1$\uff0c\u8d39\u7528$-2inf$\uff1b\n\n- $i\\to T'$\uff0c\u6d41\u91cf$1$\uff0c\u8d39\u7528$0$\uff1b\n\n\u7528$j$\u8868\u793a$Ciel$\u7684\u724c\u3002\n\n- $S\\to j$\uff0c\u6d41\u91cf$1$\uff0c\u8d39\u7528$0$\uff1b\n\n- $j\\to i(k_i=ATK,X_j\\le Y_i)$\uff0c\u6d41\u91cf$1$\uff0c\u8d39\u7528$inf-(X_j-Y_i)$\uff1b\n\n- $j\\to i(k_i=DEF,X_j>Y_i)$\uff0c\u6d41\u91cf$1$\uff0c\u8d39\u7528$inf$\uff1b\n\n- $j\\to T$\uff0c\u6d41\u91cf$1$\uff0c\u8d39\u7528$inf-X_j$\u3002\n\n\u8fd9\u6837\u5b50\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\uff1f\n\n\u6ce8\u610f\u90a3\u6761\u8d39\u7528\u4e3a$-2inf$\u7684\u8fb9\uff0c\u56e0\u4e3a\u6211\u4eec\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u6240\u4ee5\u6211\u4eec\u80af\u5b9a\u4f1a\u4f18\u5148\u6d41\u5b8c\u90a3\u4e9b\u8fb9\uff0c\u624d\u4f1a\u6d41$inf-X_j$\u7684\u8fb9\uff0c\u8fd9\u6837\u5b50\u4fdd\u8bc1\u4e86\u5148\u628a$Juro$\u7684\u724c\u6253\u5b8c\u624d\u80fd\u6253\u5269\u4e0b\u7684\u724c\u3002\n\n\u800c\u6211\u4eec\u4e4b\u524d\u591a\u679a\u4e3e\u4e86\u6253\u51e0\u5f20\u724c$x$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u901a\u8fc7\u6700\u5c0f\u8d39\u7528\u8fd8\u539f\u4f24\u5bb3\uff0c\u6700\u540e\u5efa\u4e2a\u8fd9\u6837\u7684\u8fb9\uff1a\n\n- $SS\\to S$\uff0c\u6d41\u91cf$x$\uff0c\u8d39\u7528$0$\u3002\n\n\u753b\u51fa\u56fe\u6765\u5c31\u662f\u8fd9\u6837\u5b50\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vq1b3t62.png)\n\n**Code**\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nconst int N = 100;\nconst int M = 1e6;\nconst int inf = 1e7;\nconst int INF = 2e9;\nusing namespace std;\nstruct card\n{\n    int typ,v;\n}a[N + 5];\nint n,m,b[N + 5],s,ss,t,nxt[M * 2 + 5],head[M + 5],edge_cnt = 1,chi,cost,ans,ress,cur[M + 5],dis[M + 5],vis[M + 5],p[M + 5],q[M + 5];\nstruct edges\n{\n    int v,w,f;\n}edge[M * 2 + 5],e[M * 2 + 5];\nchar ch[10];\nvoid add_edge(int u,int v,int w,int f)\n{\n    edge[++edge_cnt] = (edges){v,w,f};\n    nxt[edge_cnt] = head[u];\n    head[u] = edge_cnt;\n}\nbool spfa(int s,int t)\n{\n    for (int i = 1;i <= t;i++)\n    {\n        cur[i] = head[i];\n        dis[i] = INF;\n        p[i] = 0;\n        vis[i] = 0;\n    }\n    int l = 1,r = 0;\n    dis[s] = 0;\n    q[++r] = s;\n    vis[s] = 1;\n    while (l <= r)\n    {\n        int u = q[l++];\n        vis[u] = 0;\n        for (int i = head[u];i;i = nxt[i])\n        {\n            int v = edge[i].v,w = edge[i].w,f = edge[i].f;\n            if (dis[u] + f < dis[v] && w)\n            {\n                dis[v] = dis[u] + f;\n                if (!vis[v])\n                {\n                    vis[v] = 1;\n                    q[++r] = v;\n                }\n            }\n        }\n    }\n    return dis[t] != INF;\n}\nint dfs(int u,int flow)\n{\n    if (u == t)\n        return flow;\n    int sm = 0;\n    p[u] = 1;\n    for (int &i = cur[u];i;i = nxt[i])\n    {\n        int v = edge[i].v,&w = edge[i].w,f = edge[i].f;\n        if (dis[u] + f == dis[v] && w && !p[v])\n        {\n            int res = dfs(v,min(w,flow));\n            w -= res;\n            sm += res;\n            flow -= res;\n            edge[i ^ 1].w += res;\n            cost += f * res;\n            if (!flow)\n                break;\n        }\n    }\n    return sm;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i = 1;i <= n;i++)\n    {\n        scanf(\"%s\",ch + 1);\n        scanf(\"%d\",&a[i].v);\n        if (ch[1] == 'A')\n            a[i].typ = 1;\n        else\n            a[i].typ = 2;\n    }\n    for (int i = 1;i <= m;i++)\n        scanf(\"%d\",&b[i]);\n    s = n * 2 + m + 1,ss = n * 2 + m + 2,t = n * 2 + m + 3;\n    for (int i = 1;i <= m;i++)\n    {\n        add_edge(ss,n * 2 + i,1,0);\n        add_edge(n * 2 + i,ss,0,0);\n        add_edge(n * 2 + i,t,1,inf - b[i]);\n        add_edge(t,n * 2 + i,0,b[i] - inf);\n    }\n    for (int i = 1;i <= n;i++)\n    {\n        add_edge(i,i + n,1,-2 * inf);\n        add_edge(i + n,i,0,2 * inf);\n        add_edge(i + n,t,1,0);\n        add_edge(t,i + n,0,0);\n        for (int j = 1;j <= m;j++)\n        {\n            if (a[i].typ == 1 && b[j] >= a[i].v)\n            {\n                add_edge(n * 2 + j,i,1,inf - (b[j] - a[i].v));\n                add_edge(i,n * 2 + j,0,b[j] - a[i].v - inf);\n            }\n            if (a[i].typ == 2 && b[j] > a[i].v)\n            {\n                add_edge(n * 2 + j,i,1,inf);\n                add_edge(i,n * 2 + j,0,-inf);\n            }\n        }\n    }\n    add_edge(s,ss,0,0);\n    chi = edge_cnt;\n    add_edge(ss,s,0,0);\n    for (int i = 2;i <= edge_cnt;i++)\n        e[i] = edge[i];\n    for (int i = 1;i <= m;i++)\n    {\n        e[chi].w = i;\n        for (int j = 2;j <= edge_cnt;j++)\n            edge[j] = e[j];\n        cost = 0;\n        while (spfa(s,t))\n            ress += dfs(s,inf);\n        //cout<<i<<\" \"<<cost<<\" \"<<-(inf * min(n,i) - inf * max(i - n,0) + cost)<<endl;\n        ans = max(ans,-(inf * min(n,i) - inf * max(i - n,0) + cost));\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1606134933,
        "uid": 73231,
        "name": "eee_hoho",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF321B \u3010Ciel and Duel\u3011"
    },
    {
        "content": "\u8d2a\u5fc3\u3002\u8003\u8651\u4e24\u79cd\u51b3\u7b56\u65b9\u5f0f\uff1a  \n1. \u4e0d\u5c06\u5bf9\u65b9\u624b\u724c\u6253\u5b8c\uff0c\u4e5f\u5c31\u662f\u5c3d\u91cf\u7528\u81ea\u5df1\u5927\u7684\u724c\u653b\u51fb\u5bf9\u65b9\u5c0f\u7684ATK\uff0c\u4e0d\u52a8\u5bf9\u65b9\u7684DEF\uff08\u663e\u7136\u653b\u51fbDEF\u4e0d\u4f18\uff09\uff0c\u76f4\u5230\u81ea\u5df1\u65e0\u6cd5\u653b\u51fb\u5bf9\u65b9   \n2. \u6d88\u8017\u5b8c\u5bf9\u65b9\u624b\u724c\uff0c\u7136\u540e\u5269\u4e0b\u7684\u76f4\u63a5\u9a91\u8138\u9020\u6210\u771f\u4f24\uff0c\u4e5f\u5c31\u662f\u7528\u81ea\u5df1\u7684\u5c3d\u91cf\u5c0f\u7684\u724c\u6362\u6389\u5bf9\u65b9\u7684DEF\uff0c\u7136\u540e\u7528\u6570\u503c\u76f8\u8fd1\u7684\u724c\u653b\u51fb\u5bf9\u65b9\u7684ATK\uff0c\u6700\u540e\u5269\u4e0b\u7684\u9a91\u8138 \n\n\u5982\u679c\u5355\u72ec\u4f7f\u7528\u5176\u4e2d\u4efb\u610f\u4e00\u79cd\uff0c\u90fd\u53ef\u80fd\u65e0\u6cd5\u5f97\u5230\u6700\u4f18\u89e3\uff0c\u4f46\u5f53\u6211\u4eec\u628a\u4e24\u79cd\u65b9\u6848\u7efc\u5408\u8d77\u6765\uff0c\u5404\u8dd1\u4e00\u904d\u7136\u540e\u53d6\u66f4\u4f18\u7684\u89e3\u6cd5\u5c31\u53ef\u4ee5\u6c34\u8fc7\u53bb\u4e86\u3002\n\n\u6700\u540e\uff0c\u8981\u6ce8\u610f\u6570\u636e\u8303\u56f4\uff0c\u5f00\u4e0a$long\\ long$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define LL long long\nconst int maxn = 100000 + 10;\nint n, m, ca, cd;\n//ca\u4e3aatk\u724c\u6570\uff0ccd\u4e3adef\u724c\u6570\nLL a[maxn], atk[maxn], def[maxn];\n//a\u4e3a\u5c0fX\u624b\u724c\uff0c\u5176\u4f59\u5982\u9898\nbool used[maxn];\n//\u65b9\u68482\u4e2d\u7528\u4e8e\u8bb0\u5f55\u5c0fX\u7684\u624b\u724c\u662f\u5426\u4f7f\u7528\nchar t[10];\nLL solve1() {//\u65b9\u68481 \n\tLL sum = 0;\n\tint p1 = m, p2 = 1;//\u6ce8\u610f\u679a\u4e3e\u987a\u5e8f\n\twhile (a[p1] >= atk[p2] && p1 > 0 && p2 <= ca) {\n\t\tsum += a[p1] - atk[p2];\n\t\t--p1, ++p2;\n\t}\n\treturn sum;\n}\nLL solve2() {//\u65b9\u68482 \n\tLL sum = 0;\n\tint p1 = 1;\n\tbool b = true;//\u8bb0\u5f55\u662f\u5426\u80fd\u6d88\u8017\u5b8c\u5bf9\u65b9\u624b\u724c\n\tfor (int p2 = 1; p2 <= cd; ++p2) {\n\t\twhile ((a[p1] <= def[p2] || used[p1]) && p1 <= m) {\n\t\t\t++p1;\n\t\t}\n\t\tif (p1 == m + 1) {\n\t\t\tb = false;\n\t\t\tmemset(used, false, sizeof(used));\n            \t\t//\u6d88\u8017\u4e0d\u5b8c\u5bf9\u65b9\u7684DEF\uff0c\u53ef\u4ee5\u5c06\u81ea\u5df1\u7684\u724c\u7559\u7740\n\t\t\tbreak;\n\t\t}\n\t\tused[p1] = true;\n\t}\n\tp1 = 1;\n\tfor (int p2 = 1; p2 <= ca; ++p2) {\n\t\twhile ((a[p1] < atk[p2] || used[p1]) && p1 <= m) {\n\t\t\t++p1;\n\t\t}\n\t\tif (p1 == m + 1) {\n\t\t\treturn sum;\n\t\t}\n\t\tsum += a[p1] - atk[p2];\n\t\tused[p1] = true;\n\t}\n\tif (b)\n\tfor (int i = 1; i <= m; ++i) {\n\t\tif (!used[i]) {\n\t\t\tsum += a[i];\n            \t\t//\u591a\u4f59\u7684\u724c\u9a91\u8138\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tLL x;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tscanf(\"%s%lld\", t, &x);\n\t\tif (t[0] == 'A') {\n\t\t\tatk[++ca] = x;\n\t\t} else {\n\t\t\tdef[++cd] = x;\n\t\t}\n\t}\n\tfor (int i = 1; i <= m; ++i) {\n\t\tscanf(\"%lld\", &a[i]);\n\t}\n    \t//\u5148\u6392\u5e8f\u65b9\u4fbf\u540e\u9762\u505a\n\tsort(a + 1, a + m + 1);\n\tsort(atk + 1, atk + ca + 1);\n\tsort(def + 1, def + cd + 1);\n\tcout << max(solve1(), solve2()) << endl;\n\treturn 0;\n}\n```",
        "postTime": 1564924892,
        "uid": 37539,
        "name": "_Qer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF321B \u3010Ciel and Duel\u3011"
    }
]