[
    {
        "content": "# CF1530G What a Reversal \u9898\u89e3\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u6709\u4e24\u4e2a\u957f\u4e3a $n$ \u7684 $01$ \u4e32 $S$ \u548c $T$\uff0c\u4f60\u53ef\u4ee5\u8fdb\u884c\u81f3\u591a $4n$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u7ffb\u8f6c\uff08\u6ce8\u610f\u4e0d\u662f\u53cd\u8f6c\uff09$S$ \u7684\u4e00\u4e2a\u6070\u6709 $k$ \u4e2a $1$ \u7684\u5b50\u4e32\uff0c\u76ee\u6807\u4e32\u662f $T$\u3002\u5224\u65ad\u65e0\u89e3\u6216\u8005\u6784\u9020\u65b9\u6848\u3002$\\sum n \\leq 2000$\n\n## \u9898\u89e3\n\n\u8fd9\u4e2a\u9898\u592a\u795e\u4e86\u554a\u2026\u2026\u60f3\u4e86\u597d\u591a\u5929\u624d\u60f3\u51fa\u6765\u3002\uff08\u4e3a\u5565\u5c0f t \u7684\u6784\u9020\u9898\u90fd\u8fd9\u4e48\u96be\n\n\u9996\u5148 $k=0$ \u6216\u8005 $k \\geq n$ \u7684\u60c5\u51b5\u662f trivial \u7684\uff0c\u7279\u5224\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\u63a5\u4e0b\u6765\u8bf4 $1 \\leq k < n$ \u7684\u60c5\u51b5\u3002\n\n\u5982\u679c $S$ \u548c $T$ \u4e2d $1$ \u7684\u4e2a\u6570\u4e0d\u4e00\u6837\u6211\u4eec\u4e5f\u60f3\u90fd\u4e0d\u7528\u60f3\u3002\n\n> \u7ed3\u8bba\uff1a\u64cd\u4f5c\u662f\u53ef\u9006\u7684\u3002\n\n\u8fd9\u4e2a\u7ed3\u8bba\u7684\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ea\u8981\u628a $S$\u200b \u548c $T$\u200b \u90fd\u901a\u8fc7\u67d0\u4e00\u64cd\u4f5c\u53d8\u6210\u540c\u4e00\u4e2a\u4e32\u5c31\u597d\u4e86\u3002\u63a5\u4e0b\u6765\u505a\u7684\u4e8b\u60c5\u76ee\u6807\u90fd\u662f\u628a $S,T$ \u5728 $2n$ \u6b65\u4e4b\u5185\u53d8\u6210\u540c\u4e00\u4e2a\u4e32\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651 $S$ \u4f5c\u4e3a $01$ \u4e32\u7684\u5f62\u5f0f\u4e0d\u662f\u5f88\u5bb9\u6613\u64cd\u4f5c\uff0c\u8fdb\u884c\u4e00\u6b65\u8f6c\u5316\uff1a\n\n\u4ee4 $p_i$ \u8868\u793a $S$ \u4e2d\u7b2c $i$ \u4e2a $1$ \u4e4b\u540e\u6709\u51e0\u4e2a\u8fde\u7eed\u7684 $0$\u3002\u6bd4\u5982 $S = 1001100011$ \u53ef\u4ee5\u8868\u793a\u6210 $p = [0, 2, 0, 3, 0, 0]$\u3002\n\n\u4ee4 $m$ \u8868\u793a $S$ \u4e2d\u6709\u51e0\u4e2a $1$\uff0c$a_i$ \u8868\u793a\u7b2c $i$ \u4e2a $1$ \u5728 $S$ \u4e2d\u7684\u4f4d\u7f6e\u3002\u4ee4 $a_0 = 0$\uff0c$a_{m + 1} = n + 1$\u3002\n\n> \u7ed3\u8bba\uff1a\u7ffb\u8f6c $S$ \u7684\u4e00\u4e2a\u5305\u542b\u7b2c $l$ \u4e2a\u5230\u7b2c $r$ \u4e2a $1$ \u7684\u5408\u6cd5\u5b50\u4e32\uff0c\u76f8\u5f53\u4e8e\u628a $p_{l..r-1}$ \u7ffb\u8f6c\uff0c\u5e76\u4e14\u628a $p_{l-1}$ \u548c $p_r$ \u53d8\u6210 $p_{l-1}'$ \u548c $p_r'$ \u6ee1\u8db3 $p_{l-1}' + p_r' = p_{l-1}+p_{r}$\u3002\n\n\u8fd9\u4e2a\u7ed3\u8bba\u7684\u6b63\u786e\u6027\u4e5f\u662f\u663e\u7136\u7684\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $i > k$ \u5e76\u4e14 $p_i > 0$ \u7684 $i$ \u8fdb\u884c\u64cd\u4f5c\uff1a\u7ffb\u8f6c $[a_{i - k + 1},a_{i + 1} - 1]$ \u8fd9\u4e2a\u533a\u95f4\u3002\u8fd9\u4e2a\u64cd\u4f5c\u505a\u4e86\u4ec0\u4e48\uff1f\n\n\u76f4\u89c2\u4e0a\u8003\u8651\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u4f7f\u5f97\u6700\u540e\u82e5\u5e72\u4f4d\u90fd\u662f $1$\uff0c\u628a\u539f\u672c\u5728\u540e\u9762\u7684\u4e00\u6bb5 $0$ \u653e\u5230\u524d\u9762\u53bb\u4e86\u3002\n\n\u4ece\u5bf9 $p$ \u7684\u8d21\u732e\u8003\u8651\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7ffb\u8f6c\u4e86 $p_{i - k + 1 .. i}$\uff0c\u5e76\u4e14\u628a $p_{i + 1}$ \u53d8\u6210 $0$\uff0c$p_{i - k}$ \u53d8\u6210 $p_{i - k} + p_{i + 1}$\u3002\u76f8\u5f53\u4e8e\u628a\u540e\u9762\u7684 $p$ \u52a0\u5230\u524d\u9762\u53bb\u4e86\u3002\n\n\u6211\u4eec\u53cd\u590d\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u5c31\u80fd\u4f7f\u5f97\u6240\u6709\u7684 $0$\u200b \u90fd\u5728\u7b2c $k$\u200b \u4e2a $1$\u200b \u4e4b\u524d\uff0c\u5373 $\\forall i > k, p_i = 0$\u200b\u3002\n\n\u8fd9\u4e2a\u81f3\u591a\u4f1a\u4f7f\u7528 $m-k$ \u4e2a\u64cd\u4f5c\u3002\n\n\u7136\u540e\u8003\u8651\u5904\u7406\u63a5\u4e0b\u6765\u7684\u60c5\u51b5\u3002\u5982\u679c\u6211\u4eec\u7ffb\u8f6c $p_{1..k-1}$\u200b\u200b\u200b \u548c $p_{2..k}$\u200b\u200b\u200b\uff0c\u5219\u663e\u7136 $p_1, p_2, p_3, \\ldots, p_{k-2},p_{k-1}, p_k$\u200b\u200b\u200b \u5c31\u4f1a\u53d8\u6210 $p_{k-1}, p_k, p_1, p_2, \\ldots, p_{k-2}$\u200b\u200b\u200b\u3002\n\n\u6211\u4eec\u8003\u8651\u5728\u7ffb\u8f6c $p_{1..k-1}$ \u7684\u65f6\u5019\u628a $p_k$ \u5168\u90e8\u52a0\u5230 $p_0$ \u4e0a\u9762\u53bb\uff0c\u5373\u7ffb\u8f6c\u533a\u95f4 $[a_1, a_{k+1}-1]$\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u628a $p_k$ \u53d8\u6210 $0$\u3002\n\n\u5bb9\u6613\u53d1\u73b0 $p_{1..k}$ \u53d1\u751f\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a $2$\u200b \u7684\u5faa\u73af\u79fb\u4f4d\u3002\n\n**Case 1**\n\n\u5982\u679c $k$ \u662f\u5947\u6570\uff0c\u90a3\u4e48\u5728 $k$ \u6b21\u79fb\u4f4d\u4e4b\u5185 $p_1, p_2, \\ldots, p_k$ \u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u90fd\u80af\u5b9a\u5230\u8fbe\u8fc7\u4e00\u6b21 $p_k$\u200b \u7684\u4f4d\u7f6e\u3002\uff08\u5728\u6bcf\u6b21\u64cd\u4f5c\u65f6 $p_k$ \u4f4d\u7f6e\u4e0a\u9762\u7684\u6570\u5206\u522b\u662f\uff1a$p_k, p_{k-2}, p_{k-4}, p_{k-6}, \\ldots, p_1, p_{k-1}, p_{k-3}, \\ldots, p_2$\u3002\uff09\n\n\u56e0\u4e3a\u6bcf\u6b21\u79fb\u4f4d\u628a $p_k$ \u4f4d\u7f6e\u4e0a\u7684\u6570\u6e05\u96f6\u4e86\uff0c\u6240\u4ee5 $k$ \u6b21\u79fb\u4f4d\u4e00\u5b9a\u80fd\u591f\u4f7f $p_{1..k}$ \u7684\u6570\u90fd\u662f $0$\uff0c$p_0$ \u7684\u503c\u4e3a $\\sum _{i=1} ^k p_i$\u200b \u5373 $m$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u81f3\u591a $2k + m - k = m + k \\leq 2n$ \u6b21\u64cd\u4f5c\u5185\u628a $S$ \u53d8\u6210 $0000..0011111$ \u8fd9\u79cd\u5f62\u5f0f\u3002\uff08$0$ \u5168\u90e8\u5728 $1$ \u7684\u524d\u9762\uff09\u6211\u4eec\u5bf9\u4e8e $T$ \u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c\u518d\u628a\u987a\u5e8f\u5012\u8fc7\u6765\u5c31\u884c\u4e86\u3002\n\n**Case 2**\n\n\u5982\u679c $k$ \u662f\u5076\u6570\u7684\u8bdd\uff0c\u6211\u4eec\u660e\u663e\u5e76\u4e0d\u80fd\u628a\u6240\u6709\u7684 $p_i$  \u90fd\u52a0\u5230 $p_0$ \u4e0a\u9762\u3002\u56e0\u4e3a\u6211\u4eec\u65e0\u8bba\u5982\u4f55\u64cd\u4f5c\uff0c\u5faa\u73af\u79fb\u4f4d\u7684\u8bdd\u603b\u662f\u6709\u4e00\u534a\u7684\u4f4d\u7f6e\u4e0d\u80fd\u5230\u8fbe $p_k$\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u56e0\u4e3a\u5947\u6570\u603b\u662f\u7ba1\u5947\u6570\uff0c\u5076\u6570\u603b\u662f\u7ba1\u5076\u6570\u3002\n\n\u90a3\u4f60\u4e0d\u662f\u628a\u5947\u6570\u90fd\u653e\u5230\u4e00\u4e2a\u6570\uff0c\u628a\u5076\u6570\u653e\u5230\u4e00\u4e2a\u6570\u5c31\u597d\u4e86\u5417\uff1f\n\n\u6709\u9053\u7406\u554a/qd/qd/qd/qd/qd\n\n> \u7ed3\u8bba\uff1a\u5982\u679c $k$\u200b \u662f\u5076\u6570\uff0c\u5219 $\\sum_{x\\text{ is even}} p_x$\u200b \u548c $\\sum _{x \\text{ is odd}} p_x$ \u662f\u4e00\u4e2a\u5b9a\u503c\u3002\n\n\u56e0\u4e3a\u5947\u6570\u603b\u662f\u7ba1\u5947\u6570\uff0c\u5076\u6570\u603b\u662f\u7ba1\u5076\u6570\u3002\n\n\u90a3\u4f60\u5c31\u628a\u5947\u6570\u90fd\u653e\u5230\u4e00\u4e2a\u6570\uff0c\u628a\u5076\u6570\u653e\u5230\u4e00\u4e2a\u6570\u5c31\u597d\u4e86\u3002\n\n\u5177\u4f53\u7684\uff0c\u6211\u4eec\u5728\u8fdb\u884c\u7ffb\u8f6c $p_{1..k}$ \u7684\u65f6\u5019\u628a $p_k$ \u52a0\u5230 $p_0$ \u4e0a\u9762\uff0c\u5728\u7ffb\u8f6c $p_{2..k+1}$ \u7684\u65f6\u5019\u628a $p_1$ \u52a0\u5230 $p_{k+1}$ \u4e0a\u3002\u8fd9\u6837\uff0c\u5728 $k$ \u6b21\u5faa\u73af\u79fb\u4f4d\u4e4b\u540e\uff0c\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u628a\u5947\u6570\u4f4d\u7684\u90fd\u52a0\u5230 $p_{k+1}$\uff0c\u5076\u6570\u4f4d\u7684\u90fd\u52a0\u5230 $p_0$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u81f3\u591a $m - k + 2k = m + k \\leq 2n$ \u6b21\u64cd\u4f5c\u5185\u628a $S$ \u53d8\u6210 $000..00111111111100..01111111$ \u8fd9\u79cd\u5f62\u5f0f\uff08\u91cc\u9762\u7b2c\u4e00\u4e2a\u8fde\u7eed $1$ \u6bb5\u4e00\u5b9a\u662f $k$ \u4e2a $1$\uff09\u3002\n\n\u5b9e\u73b0\u6709\u70b9\u7ec6\u8282\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6709\u4e9b\u4eba\u5199\u7684\u5f88\u7b80\u5355\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nconst int N = 2005;\n\nint n, k, m, p[N], q[N];\nchar s[N], t[N];\nstd::vector<std::pair<int, int>> r1, r2;\n// p[] & q[] describes the p array of string s & t.\n// r1, r2 describes the steps that can make s & t the same intended string.\n\nint s_eq_t() { for (int i = 1; i <= n; ++i) if (s[i] != t[i]) return 0; return 1; }\n// s_eq_t() checks if s & t is the same string.\n\nint get_k_eq_m() {\n\tfor (int i = 1 - n; i < n; ++i) {\n\t\tint flg = 1;\n\t\tfor (int j = 1; j <= n; ++j)\n\t\t\tif (s[j] != ((i + j > 0 && i + j <= n) ? t[i + j] : 0)) { flg = 0; break; }\n\t\tif (flg) return i;\n\t}\n\treturn n;\n}\n// get_k_eq_m() checks if s is a cyclic shift of t, and returns the steps if it is.\n\nvoid sol_k_eq_m() {\n\tint st, ed;\n\tfor (int i = 1; i <= n; ++i) if (s[i]) { st = i; break; }\n\tfor (int i = n; i; --i) if (s[i]) { ed = i; break; }\n\tint k = get_k_eq_m(); // checks if s is a cyclic shift of t.\n\tif (k < n) {\n\t\tputs(\"2\");\n\t\tprintf(\"%d %d\\n\", std::min(st, st + k), std::max(ed, ed + k));\n\t\tprintf(\"%d %d\\n\", st + k, ed + k);\n\t\treturn;\n\t}\n\tstd::reverse(t + 1, t + n + 1);\n\tk = get_k_eq_m(); // checks if s is a cyclic shift of t's reverse.\n\tif (k < n) {\n\t\tputs(\"3\");\n\t\tprintf(\"%d %d\\n\", std::min(st, st + k), std::max(ed, ed + k));\n\t\tprintf(\"%d %d\\n\", st + k, ed + k);\n\t\tprintf(\"1 %d\\n\", n);\n\t\treturn;\n\t}\n\tputs(\"-1\"); // if not, no solution\n}\n// sol_k_eq_m() solves the case of k equals m.\n\nvoid get_p(char *s, int *p) {\n\tint lst = 0, cnt = 0;\n\tfor (int i = 1; i <= n; ++i)\n\t\tif (s[i]) p[cnt++] = i - lst - 1, lst = i;\n\tp[cnt] = n - lst;\n}\n// get_p() calculates the array p according to s.\n\nvoid sol(int *p, std::vector<std::pair<int, int>> &r) {\n\tauto get_pos = [&](int x)->int {\n\t\tif (x == 0) return 0;\n\t\tif (x == m + 1) return n + 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < x; ++i) res += p[i];\n\t\treturn res + x;\n\t}; // get the position of the xth 1 according to p[].\n\tfor (int i = m; i > k; --i)\n\t\tif (p[i]) {\n\t\t\tint st = get_pos(i - k + 1);\n\t\t\tint ed = get_pos(i + 1) - 1;\n\t\t\tif (st != ed) r.emplace_back(st, ed);\n\t\t\tp[i - k] += p[i], p[i] = 0;\n\t\t\tstd::reverse(p + i - k + 1, p + i);\n\t\t} // if i > k and p[i] has a value, add p[i] to p[i - k]. \n\t// This operation makes p[i] = 0 for all i > k.\n\tfor (int t = 0; t < k; ++t) {\n\t\tint st = get_pos(1);\n\t\tint ed = get_pos(k + 1);\n\t\tif (st != ed - 1) r.emplace_back(st, ed - 1);\n\t\tp[0] += p[k], p[k] = 0;\n\t\tstd::reverse(p + 1, p + k);\n\t\tst = get_pos(2);\n\t\ted = get_pos(k + 1);\n\t\tif (st != ed) r.emplace_back(st, ed);\n\t\tstd::reverse(p + 2, p + k + 1);\n\t} // do k cyclic shifts of [1..k] such that all numbers has reached the position p[k] once. add p[k] to p[0].\n\t// This operation makes p[i] = 0 for all i in [1, k].\n\t// After this, p[i] = 0 stands for all i > 0.\n\t// Therefore, applying sol() to both s and t makes them the same string with all 0s at the front of the string. \n}\n// sol() solves the case k is odd.\n\nvoid sol2(int *p, std::vector<std::pair<int, int>> &r) {\n\tauto get_pos = [&](int x) {\n\t\tif (x == 0) return 0;\n\t\tif (x == m + 1) return n + 1;\n\t\tint res = 0;\n\t\tfor (int i = 0; i < x; ++i) res += p[i];\n\t\treturn res + x;\n\t}; // get the position of the xth 1 according to p[].\n\tfor (int i = m; i > k; --i)\n\t\tif (p[i]) {\n\t\t\tint st = get_pos(i - k + 1);\n\t\t\tint ed = get_pos(i + 1) - 1;\n\t\t\tif (st != ed) r.emplace_back(st, ed);\n\t\t\tp[i - k] += p[i], p[i] = 0;\n\t\t\tstd::reverse(p + i - k + 1, p + i);\n\t\t} // if i > k and p[i] has a value, add p[i] to p[i - k]. \n\t// This operation makes p[i] = 0 for all i > k. (same as the one in sol())\n\tfor (int t = 0; t < k; ++t) {\n\t\tint st = get_pos(1);\n\t\tint ed = get_pos(k + 1);\n\t\tif (st != ed - 1) r.emplace_back(st, ed - 1);\n\t\tp[0] += p[k], p[k] = 0;\n\t\tstd::reverse(p + 1, p + k);\n\t\tst = get_pos(1);\n\t\ted = get_pos(k + 1);\n\t\tp[k + 1] += p[1], p[1] = 0;\n\t\tif (st + 1 != ed) r.emplace_back(st + 1, ed);\n\t\tstd::reverse(p + 2, p + k + 1);\n\t} // do k cyclic shifts of [1..k] such that all numbers has reached the position p[k] or p[1] once.\n\t// This operation makes p[i] = 0 for all i in [1, k].\n\t// After this, p[i] = 0 stands for all i in [1, k] \\cup [k + 2, m]\n\t// Therefore, applying sol() to both s and t makes them the same string 000..0001111..11(k 1s)000.0000111.11\n}\n// sol2() solves the case k is even.\n\nint main() {\n\tint T; scanf(\"%d\", &T);\n\twhile (T--) {\n\t\tscanf(\"%d%d%s%s\", &n, &k, s + 1, t + 1);\n\t\tint cnts = 0, cntt = 0;\n\t\tfor (int i = 1; i <= n; ++i) s[i] -= '0', t[i] -= '0';\n\t\tfor (int i = 1; i <= n; ++i) cnts += s[i], cntt += t[i];\n\t\tif (cnts != cntt) { puts(\"-1\"); continue; } else m = cnts;\n\t\tif (s_eq_t()) { puts(\"0\"); continue; }\n\t\tif (k == 0 || k > m) { puts(\"-1\"); continue; }\n\t\tif (k == m) { sol_k_eq_m(); continue; }\n\t\tget_p(s, p);\n\t\tget_p(t, q);\n\t\tr1.clear(), r2.clear();\n\t\tif (k & 1) {\n\t\t\tsol(p, r1);\n\t\t\tsol(q, r2);\n\t\t} else {\n\t\t\tint tmp[2][2]; \n\t\t\tmemset(tmp, 0, sizeof(tmp));\n\t\t\tfor (int i = 0; i <= m; ++i) tmp[0][i & 1] += p[i];\n\t\t\tfor (int i = 0; i <= m; ++i) tmp[1][i & 1] += q[i];\n\t\t\tif (tmp[0][0] != tmp[1][0] || tmp[0][1] != tmp[1][1]) { puts(\"-1\"); continue; }\n\t\t\tsol2(p, r1);\n\t\t\tsol2(q, r2);\n\t\t}\n\t\tprintf(\"%d\\n\", (int)r1.size() + (int)r2.size());\n\t\tfor (unsigned i = 0; i < r1.size(); ++i) printf(\"%d %d\\n\", r1[i].first, r1[i].second);\n\t\tfor (unsigned i = r2.size() - 1; ~i; --i) printf(\"%d %d\\n\", r2[i].first, r2[i].second); // output in reverse order\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1635080068,
        "uid": 302509,
        "name": "zghtyarecrenj",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011CF1530G What a Reversal"
    },
    {
        "content": "~~What a Problem\uff01~~\n\n\u9996\u5148\u8003\u8651\u5728\u53d8\u6362\u524d\u540e\u6709\u6ca1\u6709\u4ec0\u4e48\u91cf\u662f\u4e0d\u53d8\u7684\u3002\u663e\u7136 $1$ \u7684\u4e2a\u6570\u80af\u5b9a\u4e0d\u4f1a\u53d8\u5bf9\u5427\uff0c\u5982\u679c $s,t$ \u4e2d $1$ \u7684\u4e2a\u6570\u4e0d\u540c\u90a3\u5c31\u76f4\u63a5 GG \u4e86\u3002\u8fd9\u4e2a\u76f4\u63a5\u7279\u5224\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u6211\u4eec\u8bb0 $s,t$ \u4e2d $1$ \u7684\u4e2a\u6570\u4e3a $m$\uff0c\u5bf9\u4e8e $k=0$ \u6216 $k>m$ \u7684\u60c5\u51b5\uff0c\u663e\u7136\u53ea\u6709 $s,t$ \u5b8c\u5168\u76f8\u540c\u624d\u6709\u53ef\u80fd\u6709\u89e3\uff0c\u8fd9\u4e2a\u7279\u5224\u4e00\u4e0b\u5373\u53ef\u3002\u5bf9\u4e8e $k=m$ \u7684\u60c5\u51b5\u6211\u4eec\u4e5f\u9700\u7279\u5224\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u5927\u6982\u5c31\u5206\u7ffb\u4e00\u6b21\u3001\u7ffb\u4e24\u6b21\u3001\u7ffb\u4e09\u6b21\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u53ef\u80fd\u7ec6\u8282\u7565\u6709\u70b9\u7e41\u7410\u3002\n\n\u4e0b\u9762\u91cd\u70b9\u8ba8\u8bba $k<m$\u200b \u7684\u60c5\u51b5\uff0c\u9996\u5148\u53d1\u73b0\u64cd\u4f5c\u53ef\u9006\uff0c\u56e0\u6b64\u6211\u4eec\u6309\u7167\u5957\u8def\u5c06 $s,t$ \u5168\u53d8\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u6b63\u5e8f\u8f93\u51fa $s$ \u7684\u64cd\u4f5c\u5e8f\u5217\u5e76\u5012\u5e8f\u8f93\u51fa $t$ \u7684\u64cd\u4f5c\u5e8f\u5217\u3002\u8003\u8651\u4e00\u6b21\u64cd\u4f5c\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u5047\u8bbe $s$ \u7684 $1$ \u7684\u4f4d\u7f6e\u5206\u522b\u662f $p_1,p_2,\\cdots,p_m$\uff0c\u65b9\u4fbf\u8d77\u89c1\u5047\u8bbe $p_0=0,p_{m+1}=n+1$\uff0c\u6211\u4eec\u518d\u8bbe $d_i=p_{i+1}-p_i-1$\u200b\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\u4e00\u6b21\u64cd\u4f5c\u7b49\u4ef7\u4e8e\uff1a\n\n- \u9009\u62e9\u4e00\u4e2a $i\\in[0,m-k]$\u200b\u200b\uff0creverse \u5b50\u6bb5 $d_{i+1},d_{i+2},\\cdots,d_{i+k-1}$\u200b\u200b\uff0c\u540c\u65f6\u9009\u62e9\u4e00\u4e2a $j\\in[-d_i,d_{i+k}]$\u200b\u200b\uff0c\u5e76\u4ee4 $d_i$\u200b\u200b \u52a0\u4e0a $j$\u200b\u200b\uff0c$d_{i+k}$\u200b\u200b \u51cf\u53bb $j$\u200b\u200b\u3002\n\n\u4e0b\u9762\u8003\u8651\u600e\u6837\u6784\u9020\uff0c\u9996\u5148\u662f $k$\u200b\u200b\u200b\u200b \u662f\u5947\u6570\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u8003\u8651\u5c06\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u8c03\u6574\u81f3 $d_0=n-m,d_i=0(i\\in[1,m])$\u200b\u200b\u200b\u200b \u7684\u72b6\u6001\u3002\u6211\u4eec\u9996\u5148\u5148\u5c06 $d_{k+1},d_{k+2},\\cdots,d_m$\u200b\u200b\u200b\u200b \u5f52\u96f6\uff0c\u8fd9\u4e2a\u5c31\u6bcf\u6b21\u9009\u62e9 $j=d_{i+k}$\u200b\u200b\u200b\u200b \u5373\u53ef\u6e05\u7a7a $d_{i+k}$\u200b\u200b\u200b\u200b\u3002\u7136\u540e\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u5947\u6570\u6b65\uff0c\u6211\u4eec\u4ee4 $i=0,j=d_k$\u200b\u200b\u200b\u200b\uff0c\u8fd9\u6837\u76f8\u5f53\u4e8e\u7ffb\u8f6c $d_1\\sim d_{k-1}$\u200b\u200b\u200b\u200b \u5e76\u5c06 $d_k$\u200b\u200b\u200b\u200b \u6e05\u7a7a\u5168\u90e8\u9001\u7ed9 $d_0$\u200b\u200b\u200b\u200b\uff1b\u5bf9\u4e8e\u5076\u6570\u6b65\uff0c\u6211\u4eec\u9009\u62e9 $i=1,j=d_{k+1}=0$\u200b\u200b\u200b\u200b\uff0c\u8fd9\u6837\u76f8\u5f53\u4e8e\u7ffb\u8f6c $d_2\\sim d_k$\u200b\u200b\u200b\u200b\u200b\u200b\u200b\uff0c\u4e0d\u96be\u53d1\u73b0\u8fd9\u6837\u64cd\u4f5c\u4e0b\u53bb\uff0c$d$\u200b\u200b\u200b\u200b \u6570\u7ec4\u4f1a\u4f9d\u6b21\u53d1\u751f\u4ee5\u4e0b\u53d8\u5316\uff08\u5176\u4e2d\u7ea2\u8272\u4ee3\u8868\u5bf9\u5e94\u7684 $d$\u200b\u200b\u200b\u200b \u503c\u5df2\u7ecf\u53d8\u4e3a $0$\u200b\u200b\u200b\u200b\uff1a\n\n- $d_0,d_{k-1},d_{k-2},\\cdots,d_1,\\color{red}{d_k}$\u200b\u200b\n- $d_0,d_{k-1},\\color{red}{d_k}\\color{black}{,d_{1},d_2,\\cdots,d_{k-2}}$\u200b\u200b\n- $d_0,d_{k-3},d_{k-4},\\cdots,d_1,\\color{red}d_k\\color{black},d_{k-1},\\color{red}d_{k-2}$\u200b\n- $d_0,d_{k-3},\\color{red}{d_{k-2}}\\color{black}{,d_{k-1},}\\color{red}{d_k}\\color{black}{,d_1,d_2,\\cdots,d_{k-4}}$\u200b\n\n\u4e0d\u96be\u53d1\u73b0\u5728\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e2d\uff0c\u54b1\u4eec\u91c7\u7528\u6bcf\u4e00\u8f6e\u9694\u4e00\u4e2a\u6e05\u4e00\u4e2a\u7684\u7b56\u7565\uff0c\u5373\u5728\u5947\u6570\u6b21\u64cd\u4f5c\u4f9d\u6b21\u5c06 $d_k,d_{k-2},d_{k-4}\\cdots,d_1,d_{k-1},d_{k-3},\\cdots d_2$ \u6e05\u7a7a\uff0c\u7531\u4e8e $k$ \u662f\u5947\u6570\uff0c\u6545\u6bcf\u4e2a $d_i$ \u90fd\u4f1a\u88ab\u6e05\u5230\uff0c\u56e0\u6b64\u8fdb\u884c $2k$ \u6b21\u64cd\u4f5c\u5373\u53ef\u6e05\u7a7a $d_1\\sim d_k$\uff0c\u603b\u64cd\u4f5c\u6570 $2k+(m-k)=m+k\\le 2n$\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5076\u6570\u7684\u6e05\u7a7a\uff0c\u624b\u73a9\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0 $k$ \u4e3a\u5076\u6570\u65f6\u4e0d\u4e00\u5b9a\u6709\u89e3\uff0c\u56e0\u4e3a\u4e0d\u8bba\u4f60\u600e\u4e48 reverse\uff0c\u90fd\u6709\u5947\u6570\u4f4d\u4e0a\u7684 $d_i$\u200b \u4e4b\u548c\u4e0d\u53d8\uff0c\u5076\u6570\u4f4d\u4e0a\u4e5f\u662f\u5982\u6b64\uff0c\u56e0\u6b64\u5982\u679c $s,t$ \u5947\u6570\u4f4d\u4e0a\u7684 $d$ \u4e4b\u548c\u4e0d\u540c\u90a3\u5c31\u76f4\u63a5 GG \u4e86\uff0c\u5426\u5219\u6211\u4eec\u8003\u8651\u5982\u4e0b\u6784\u9020\u65b9\u5f0f\uff1a\n\n> - \u9996\u5148\u8fd8\u662f\u5c06 $d_{k+1}\\sim d_n$ \u5168\u90e8\u6e05\u7a7a\uff0c\u6784\u9020\u65b9\u5f0f\u540c $k$ \u4e3a\u5947\u6570\u7684\u6e05\u7a7a\u3002\n> - \u7136\u540e\u5728\u5947\u6570\u8f6e\u6211\u4eec\u8fd8\u662f\u9009\u62e9 $i=0,j=d_k$\uff0c\u5728\u5076\u6570\u8f6e\u6211\u4eec\u5219\u9009\u62e9 $i=1,j=-d_1$\u3002\n\n\u6211\u4eec\u8fd8\u662f\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u4e0a\u9762\u7684\u8fc7\u7a0b\uff1a\n\n- $d_0,d_{k-1},d_{k-2},\\cdots,d_1,\\color{red}{d_k}\\color{black},d_{k+1}=0$\u200b\n- $d_0,\\color{red}{d_{k-1},d_k}\\color{black},d_{k-2},\\cdots,d_1,d_{k+1}$\n- $d_0,d_2,d_3,\\cdots,d_{k-2},\\color{red}{d_{k},d_{k-1},d_1}\\color{black},d_{k+1}$\n- $d_0,\\color{red}{d_2,d_1,d_{k-1},d_k}\\color{black},d_{k-2},d_{k-3},\\cdots,d_4,d_3,d_{k+1}$\u200b\n\n\u4e0d\u96be\u53d1\u73b0\u5728\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e0d\u65ad\u628a\u5947\u6570\u4f4d\u4e0a\u7684 $d$ \u4e22\u7ed9 $d_{k+1}$\uff0c\u628a\u5076\u6570\u4f4d\u4e0a\u7684 $d$ \u4e22\u7ed9 $d_0$\uff0c\u56e0\u6b64\u6700\u540e\u5f97\u5230\u7684\u4e00\u5b9a\u662f $x,0,0,0,\\cdots,0,y,0,0,\\cdots$\u200b \u7684\u5f62\u5f0f\u3002\u7b26\u5408\u8981\u6c42\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $n^2$\uff0c\u74f6\u9888\u5728\u4e8e\u6bcf\u6b21\u64cd\u4f5c\u540e\u90fd\u8981 reverse \u91cd\u65b0\u7b97 $p,d$\u3002\n\n```cpp\nconst int MAXN = 2000;\nint n, k; char s[MAXN + 5], t[MAXN + 5];\nstruct solver {\n\tchar str[MAXN + 5];\n\tint pos[MAXN + 5], pos_cnt = 0;\n\tvector<pii> res;\n\tvoid init() {\n\t\tmemset(pos, 0, sizeof(pos)); \n\t\tpos_cnt = 0;\n\t\tfor (int i = 1; i <= n; i++) if (str[i] == '1')\n\t\t\tpos[++pos_cnt] = i;\n\t\tpos[pos_cnt + 1] = n + 1;\n\t}\n\tvoid perf(int l, int r) {\n\t\tif (l > r) return;\n\t\treverse(str + l, str + r + 1);\n\t\tres.pb(mp(l, r)); init();\n\t}\n\tvoid work() {\n\t\tres.clear();\n\t\tfor (int i = pos_cnt; i > k; i--) perf(pos[i - k + 1], pos[i + 1] - 1);\n\t\tif (~k & 1) {\n\t\t\tfor (int i = 1; i <= k; i++) {\n\t\t\t\tif (i & 1) perf(pos[1], pos[k + 1] - 1);\n\t\t\t\telse perf(pos[1] + 1, pos[k + 1]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (int i = 1; i <= k * 2; i++) {\n\t\t\t\tif (i & 1) perf(pos[1], pos[k + 1] - 1);\n\t\t\t\telse perf(pos[2], pos[k + 2] - 1);\n\t\t\t}\n\t\t}\n//\t\tprintf(\"%s\\n\", str + 1);\n\t}\n} A, B;\nvoid solve() {\n\tfill0(s); fill0(t);\n\tscanf(\"%d%d%s%s\", &n, &k, s + 1, t + 1);\n\tint cs = 0, ct = 0;\n\tfor (int i = 1; i <= n; i++) cs += (s[i] == '1'), ct += (t[i] == '1');\n\tif (cs != ct) return puts(\"-1\"), void();\n\tif (k == 0 || k > cs) {\n\t\tfor (int i = 1; i <= n; i++) if (s[i] != t[i])\n\t\t\treturn puts(\"-1\"), void();\n\t\tputs(\"0\"); return;\n\t}\n\tmemcpy(A.str, s, sizeof(s));\n\tmemcpy(B.str, t, sizeof(t));\n\tA.init(); B.init();\n\tif (k == cs) {\n\t\tbool flg = 1;\n\t\tfor (int i = 1; i <= n; i++) flg &= (s[i] == t[i]);\n\t\tif (flg) return puts(\"0\"), void();\n\t\tfunction<bool(int)> check = [&](int rev) {\n\t\t\tbool flg = 1;\n\t\t\tfor (int i = 1; i < cs; i++) {\n\t\t\t\tif (A.pos[i + 1] - A.pos[i] != B.pos[i + 1] - B.pos[i]) {\n\t\t\t\t\tflg = 0; break;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flg) {\n\t\t\t\tif (rev) printf(\"3\\n%d %d\\n%d %d\\n%d %d\\n\", 1, n, A.pos[1], n, B.pos[1], n);\n\t\t\t\telse printf(\"2\\n%d %d\\n%d %d\\n\", A.pos[1], n, B.pos[1], n);\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\t\tif (check(0)) return;\n\t\treverse(A.str + 1, A.str + n + 1);\n\t\treverse(s + 1, s + n + 1);\n\t\tflg = 1;\n\t\tfor (int i = 1; i <= n; i++) flg &= (s[i] == t[i]);\n\t\tif (flg) return printf(\"1\\n%d %d\\n\", 1, n), void();\n\t\tA.init();\n\t\tif (check(1)) return;\n\t\tputs(\"-1\");\n\t\treturn;\n\t}\n\tif (~k & 1) {\n\t\tint sA = 0, sB = 0;\n\t\tfor (int i = 1; i <= cs; i += 2) sA += A.pos[i + 1] - A.pos[i];\n\t\tfor (int i = 1; i <= cs; i += 2) sB += B.pos[i + 1] - B.pos[i];\n\t\tif (sA != sB) return puts(\"-1\"), void();\n\t}\n\tA.work(); B.work();\n\tprintf(\"%d\\n\", A.res.size() + B.res.size());\n\tfor (int i = 0; i < A.res.size(); i++) printf(\"%d %d\\n\", A.res[i].fi, A.res[i].se);\n\tfor (int i = (int)(B.res.size()) - 1; ~i; i--) printf(\"%d %d\\n\", B.res[i].fi, B.res[i].se);\n}\nint main() {\n\tint qu; scanf(\"%d\", &qu);\n\twhile (qu--) solve();\n\treturn 0;\n}\n/*\n1\n11 3\n11001011010\n01111000110\n\n1\n10 8\n1101111110\n0110111111\n*/\n```",
        "postTime": 1639132322,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1530G What a Reversal"
    }
]