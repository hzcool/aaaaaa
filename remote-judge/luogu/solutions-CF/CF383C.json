[
    {
        "content": "#### \u672c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3 ~~~\u745f\u745f\u53d1\u6296~~~\n\u9996\u5148\u6765\u770b\u9898\u76ee\uff0c\u4e00\u68f5\u795e\u6a61\u6811\uff0c\u55ef\uff0c\u5728\u6811\u4e0a\u8fdb\u884c\u7684\u533a\u95f4\u64cd\u4f5c\uff0c\u4e14\u6bcf\u4e00\u6b21\u7684\u64cd\u4f5c\u90fd\u662f\u9488\u5bf9\u4ee5\u4e00\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u6765\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u5f88\u660e\u663e~~\u5f88\u88f8~~\u7684dfs\u5e8f\u4e86\u3002\n```cpp\nvoid dfs(int u,int fa)\n{\n\tL[u]=++cnt;//\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7b2c\u4e00\u6b21\u8bbf\u95ee\u65f6\u7684\u7f16\u53f7\n    for(int i=head[u];i!=-1;i=e[i].next)\n    { \n        int v=e[i].v;\n        if(v==fa)continue;\n        dep[v]=dep[u]+1;\n        dfs(v,u);\n    }\n    R[u]=cnt;//\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7b2c\u4e8c\u6b21\u8bbf\u95ee\u65f6\u7684\u7f16\u53f7\n}\n```\n\n\u7edd\u5927\u591a\u6570\u7684dfs\u5e8f\u90fd\u662f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\u7684\uff0c\u4f46\u662f\u6bd5\u7adf\u4ee3\u7801\u592a\u957f\uff0c\u5e38\u6570\u4e5f\u6bd4\u8f83\u5927\uff0c\u6b64\u9898\u7ec6\u8282\u53c8\u5f88\u591a\u3002\u3002\u3002\n\n\u4ed4\u7ec6\u4e00\u770b\u8be2\u95ee\uff0c\u5355\u70b9\u67e5\u8be2\uff01\uff01\uff01\u559c\u51fa\u671b\u5916\uff0c\n\n\u4e8e\u662f\u5c31\u81ea\u7136\u7684\u9009\u62e9\u4e86 **\u6811\u72b6\u6570\u7ec4** \u8fd9\u79cd\u795e\u5947\u7684\u65b9\u6cd5\u3002\n\n\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u9898\u662f\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u9700\u8981\u7528\u5230\u5dee\u5206\uff08\u8fd9\u662f\u4e00\u4e2a\u5f88\u6709\u7528\u7684\u7b97\u6cd5\uff09\n\n```cpp\nint lowbit(int x)\n{\n\treturn x&(-x);\n}//\u8fd4\u56de\u4e8c\u8fdb\u5236\u6700\u4f4e\u4f4d\u76841\ninline void add(int x,int z)\n{\n\twhile(x<=n) \n\ttr[x]+=z\uff0cx+=x&(-x);\n}//\u4fee\u6539\u70b9\u6743\nint query(int l)\n{\n\tint ans=0;\n\twhile(l) ans+=tr[l],l^=lowbit(l);\n\treturn ans;\n}//\u67e5\u8be2\u4ece1\u5230\u67d0\u4e2a\u70b9\u7684\u6743\u503c\u4e4b\u548c\n```\n\u7ee7\u7eed\u63a5\u7740\u5f80\u4e0b\u770b\u9898\n\u5f53\u67d0\u4e2a\u8282\u70b9\u7684\u6743\u503c\u589e\u52a0val\uff0c\u5b83\u7684\u5b50\u8282\u70b9\u6743\u503c\u90fd\u589e\u52a0-val\uff0c\u5b83\u5b50\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6743\u503c\u589e\u52a0-(-val)\uff0c\u8fd9\u5c31\u6709\u70b9\u4e0d\u592a\u597d\u5904\u7406\u4e86\n\n\u770b\u6709\u7684\u9898\u89e3\u662f\u7528\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\u6765\u505a\u7684\uff0c\u5c31\u5728\u60f3\u600e\u4e48\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u6765\u89e3\u51b3\n\n\u4e8e\u662f\u53c8\u60f3\u5230\u4e86\u4e00\u4e2a\u5341\u5206\u5de7\u5999\u7684\u505a\u6cd5\n\n\u56e0\u4e3a\u8fd9\u4e2a\u70b9\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u53ea\u4f1a\u4e0e\u5176\u6df1\u5ea6\u7684\u5947\u5076\u6027\u6709\u5173\uff0c\u53ea\u9700\u5224\u65ad\u4e00\u4e0b\u6df1\u5ea6\uff0c\u51b3\u5b9a\u4fee\u6539\u7684\u503c\u7684\u6b63\u8d1f\u5c31\u597d\uff0c\u4f46\u521d\u503c\u4e0d\u53d7\u5f71\u54cd\uff0c\u6545\u8fd8\u9700\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u50a8\u521d\u503c\n\n\u6b64\u9898\u6570\u636e\u8303\u56f4\u6709\u70b9\u5751\uff0c\u6ce8\u610f\u662f200005\u800c\u4e0d\u662f100005\n\n\u4e0a\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#define N 200005\nusing namespace std;\ninline int read()\n{\n\tint e=0,m=1;char z=getchar();\n\twhile(z<48||z>57){ if(z=='-') m=-1; z=getchar(); }\n\twhile(z>=48&&z<=57) { e=e*10+z-'0',z=getchar(); }\n\treturn e*m;\n}\nstruct qwe\n{\n    int v,w,next;\n}e[2*N];\nint tot,cnt=0,L[N],R[N],tr[N];\nint n,m,p,head[N],dep[N];\nvoid adde(int x,int y) \n{\n    e[++tot].v=y;\n    e[tot].next=head[x];\n    head[x]=tot;\n}\nvoid dfs(int u,int fa)\n{\n\tL[u]=++cnt;\n    for(int i=head[u];i!=-1;i=e[i].next)\n    { \n        int v=e[i].v;\n        if(v==fa) continue;\n        dep[v]=dep[u]+1;\n        dfs(v,u);\n    }\n    R[u]=cnt;\n}\nint lowbit(int x)\n{\n\treturn x&(-x);\n}\ninline void add(int x,int z)\n{\n    while(x<=n) \n\t{\n\ttr[x]+=z;x+=x&(-x);\n\t}\n}\nint query(int l)\n{\nint ans=0;\nwhile(l) ans+=tr[l],l^=lowbit(l);\nreturn ans;\n}\nint u,v,b;\nint val[N];\nint main()\n{\n\tn=read(),m=read();\n\tmemset(head,-1,sizeof(head));\n\tfor(register int q1=1;q1<=n;q1++) val[q1]=read();\n\tfor(register int q1=1;q1<n;q1++)\n\t{\n\t\tu=read(),v=read();\n\t\tadde(u,v),adde(v,u);\n\t}//\u52a0\u8fb9\n\tdfs(1,0);\n\tfor(register int q1=1;q1<=m;q1++)\n\t{\n\tu=read(),v=read();\n\tif(u==1)\n\t\t{\n\t\tb=read();\n\t\tif(dep[v]&1) add(L[v],b),add(R[v]+1,-b);\n\t\telse add(L[v],-b),add(R[v]+1,b);\n\t}//\u4fee\u6539\u65f6\u8981\u4f4f\u610fR[v]+1\n\telse\n\t{\n\t\tint z1=query(L[v]);\n\t\tif (dep[v]&1) printf(\"%d\\n\",val[v]+z1);\n\t\telse printf(\"%d\\n\",val[v]-z1);\n\t}//\u6700\u540e\u67e5\u8be2\u65f6\u8fd8\u9700\u6309\u6df1\u5ea6\u5224\u65ad\u4e00\u4e0b\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1564148776,
        "uid": 71178,
        "name": "lzjsy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF383C \u3010Propagating tree\u3011"
    },
    {
        "content": "### \u601d\u8def\n\u7b2c\u4e00\u773c\u770b\u8fd9\u4e2a\u9898\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u6811\u5256\u52a0\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u6211\u4eec\u601d\u8003\u5982\u4f55\u533a\u95f4\u4fee\u6539\u3002\n\n\u6700\u6734\u7d20\u7684\u60f3\u6cd5\u5c31\u662f\u8ba9\u4fee\u6539\u7684\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u6df1\u5ea6\u5947\u5076\u6027\u76f8\u540c\u7684\u52a0 val\uff0c\u4e0d\u540c\u7684\u51cf\u53bb val\u3002\u6211\u4eec\u53d1\u73b0\u8fd9\u79cd\u65b9\u6cd5\u6211\u4eec\u7684\u61d2\u6807\u8bb0\u4e0d\u80fd\u5408\u5e76\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u5c31\u53ea\u80fd\u662f $\\operatorname {O}(n^2 \\log n)$\u3002\n\n\u6211\u4eec\u8003\u8651\u8ba9\u6df1\u5ea6\u4e3a\u5947\u6570\u7684\u6839\u7684\u5b50\u6811\u4fee\u6539\u7684\u65f6\u5019\u76f4\u63a5\u52a0 val\uff0c\u5076\u6570\u7684\u76f4\u63a5\u51cf\u53bb val\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u6d88\u9664\u4e86\u6240\u52a0\u7684\u5b50\u6811\u6839\u7ed3\u70b9\u6df1\u5ea6\u4e0d\u540c\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u61d2\u6807\u8bb0\u5c31\u53ef\u4ee5\u5408\u5e76\u4e86\u3002\n\n\u56e0\u4e3a\u5148\u524d\u6211\u4eec\u5bf9\u6df1\u5ea6\u4e0d\u540c\u7684\u7ed3\u70b9\u505a\u51fa\u7684\u8c03\u6574\uff0c\u6240\u4ee5\u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u5728\u8bbf\u95ee\u5230\u6bcf\u4e2a\u70b9\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\u6df1\u5ea6\u7684\u5947\u5076\u6027\uff0c\u5bf9\u5e94\u7684\u52a0\u51cf\u5c31\u884c\u4e86\u3002\u590d\u6742\u5ea6\u5c31\u4e3a $\\operatorname O(n \\log n)$\u3002 \n\n### code\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define ll long long\n#define N 200010\n#define M 1010\n\nusing namespace std;\nint n, m, sy;\nint dep[N], top[N], siz[N], dfn[N], fath[N], son[N], w[N], pre[N];\n\nint read() {\n\tint s = 0, f = 0; char ch = getchar();\n\twhile (!isdigit(ch)) f |= (ch == '-'), ch = getchar();\n\twhile (isdigit(ch)) s = s * 10 + (ch ^ 48), ch = getchar();\n\treturn f ? -s : s;\n}\n\nnamespace Seg {\n\t#define lson rt << 1\n\t#define rson rt << 1 | 1\n\tstruct node {\n\t\tint sum, lazy, len, dep;\n\t}tree[N << 2];\n\tvoid build(int rt, int l, int r) {\n\t\ttree[rt].len = r - l + 1, tree[rt].dep = tree[rt].lazy = 0;\n\t\tif (l == r) {\n\t\t\ttree[rt].sum = w[pre[l]];\n\t\t\ttree[rt].dep = dep[pre[l]];\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(lson, l, mid);\n\t\tbuild(rson, mid + 1, r);\n\t}\n\tvoid push_down(int rt) {\n\t\tif (!tree[rt].lazy) return;\n\t\tif (tree[lson].dep != 0)\n\t\t\tif (tree[lson].dep % 2 == 1) tree[lson].sum += tree[rt].lazy;\n\t\t\telse tree[lson].sum -= tree[rt].lazy;\n\t\tif (tree[rson].dep != 0)\n\t\t\tif (tree[rson].dep % 2 == 1) tree[rson].sum += tree[rt].lazy;\n\t\t\telse tree[rson].sum -= tree[rt].lazy;\n\t\ttree[lson].lazy += tree[rt].lazy;\n\t\ttree[rson].lazy += tree[rt].lazy;\n\t\ttree[rt].lazy = 0;\n\t}\n\tvoid update(int rt, int c, int l, int r, int L, int R) {\n\t\tif (L <= l && r <= R) {\n\t\t\ttree[rt].lazy += c;\n\t\t\tif (tree[rt].dep)\n\t\t\t\tif (tree[rt].dep % 2 == 1) tree[rt].sum += c;\n\t\t\t\telse tree[rt].sum -=c;\n\t\t\treturn;\n\t\t}\n\t\tpush_down(rt);\n\t\tint mid = (l + r) >> 1;\n\t\tif (L <= mid) update(lson, c, l, mid, L, R);\n\t\tif (R > mid) update(rson, c, mid + 1, r, L, R);\n\t}\n\tint query(int rt, int l, int r, int pos) {\n\t\tif (l == r) return tree[rt].sum;\n\t\tpush_down(rt);\n\t\tint mid = (l + r) >> 1;\n\t\tif (pos <= mid) return query(lson, l, mid, pos);\n\t\telse return query(rson, mid + 1, r, pos);\n\t}\n}\n\nnamespace Cut {\n\tint cnt, add_edge, head[N << 1];\n\tstruct node {\n\t\tint next, to;\n\t}edge[N << 1];\n\tvoid add(int from, int to) {\n\t\tedge[++add_edge].next = head[from];\n\t\tedge[add_edge].to = to;\n\t\thead[from] = add_edge;\n\t}\n\tvoid dfs(int x, int fa) {\n\t\tsiz[x] = 1, fath[x] = fa, dep[x] = dep[fa] + 1;\n\t\tfor (int i = head[x]; i; i = edge[i].next) {\n\t\t\tint to = edge[i].to;\n\t\t\tif (to == fa) continue;\n\t\t\tdfs(to, x), siz[x] += siz[to];\n\t\t\tif (siz[son[x]] < siz[to]) son[x] = to;\n\t\t}\n\t}\n\tvoid dfs2(int x, int tp) {\n\t\tdfn[x] = ++cnt, pre[cnt] = x, top[x] = tp;\n\t\tif (son[x]) dfs2(son[x], tp);\n\t\tfor (int i = head[x]; i; i = edge[i].next) {\n\t\t\tint to = edge[i].to;\n\t\t\tif (to == fath[x] || to == son[x]) continue;\n\t\t\tdfs2(to, to);\n\t\t}\n\t}\n}\n\nint main() {\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; i++) w[i] = read();\n\tfor (int i = 1, x, y; i < n; i++) {\n\t\tx = read(), y = read();\n\t\tCut::add(x, y), Cut::add(y, x);\n\t}\n\tCut::dfs(1, 0), Cut::dfs2(1, 1), Seg::build(1, 1, n);\n\tfor (int i = 1, opt, x, y; i <= m; i++) {\n\t\topt = read();\n\t\tif (opt == 1) {\n\t\t\tx = read(), y = read();\n\t\t\tif (dep[x] % 2 == 1) Seg::update(1, y, 1, n, dfn[x], dfn[x] + siz[x] - 1);\n\t\t\telse Seg::update(1, -y, 1, n, dfn[x], dfn[x] + siz[x] - 1);\n\t\t}\n\t\tif (opt == 2) {\n\t\t\tx = read();\n\t\t\tprintf(\"%d\\n\", Seg::query(1, 1, n, dfn[x]));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1598708760,
        "uid": 188155,
        "name": "K2sen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF383C \u3010Propagating tree\u3011"
    },
    {
        "content": "[CF383C Propagating tree](https://www.luogu.com.cn/problem/CF383C)\u89e3\u9898\u62a5\u544a\uff1a\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://zybuluo.com/xiaoziyao/note/1730516)\n\n## \u9898\u610f\n\u9898\u610f\uff1a\u7ed9\u4f60\u4e00\u9897$n$\u4e2a\u7ed3\u70b9\u5e26\u70b9\u6743\u7684\u6811\uff0c\u652f\u6301\u4e24\u4e2a\u64cd\u4f5c\uff1a\u2460\u628a\u67d0\u4e2a\u70b9\u6743\u503c\u52a0$x$\uff0c\u5b83\u7684\u6240\u6709\u513f\u5b50\u6743\u503c\u52a0$-x$\uff0c\u5b83\u6240\u6709\u513f\u5b50\u7684\u513f\u5b50\u6743\u503c\u52a0$-(-x)$\u2026\u2026\u2461\u6c42\u67d0\u70b9\u6743\u503c\n\u6570\u636e\u8303\u56f4\uff1a$1\\leqslant n\\leqslant 2\\cdot 10^5$\u3002\n\n## \u5206\u6790\n\u8fd9\u662f\u4e00\u9053\u6bd4\u8f83\u597d\u7684dfn\u5e8f\u7ec3\u4e60\u9898\u3002\n\ndfn\u5e8f\uff0c\u5373\u67d0\u4e2a\u70b9\u5728dfs\u65f6\u7b2c\u4e00\u6b21\u904d\u5386\u7684\u65f6\u95f4\u6233\uff0c\u6709\u4e00\u4e2a\u5f88\u4f18\u79c0\u7684\u6027\u8d28\uff1a\u67d0\u4e2a\u70b9\u7684\u5b50\u6811\uff08\u5305\u62ec\u5b83\u81ea\u5df1\uff09\u4e2d\u6240\u6709\u70b9\u7684dfn\u5e8f\u6070\u597d\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u5e8f\u5217\u3002\u8fd9\u4e2a\u6027\u8d28\u5f88\u663e\u7136\uff0c\u7528dfs\u7684\u641c\u7d22\u987a\u5e8f\u60f3\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\u3002\n\n\u770b\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53d1\u73b0\u5b83\u7684\u4fee\u6539\u90fd\u662f\u5173\u4e8e\u5b50\u6811\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u7528dfn\u5e8f\u628a\u6811\u62cd\u5e73\u6210\u5e8f\u5217\u6765\u7ef4\u62a4\u3002\n\n\u4f46\u662f\u5b83\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u8ba9\u5b83\u7684\u5b50\u6811\u95f4\u65ad\u5730\u52a0\u51cf\u6743\u503c\u5462\uff1f\u5176\u5b9e\u8fd9\u4e5f\u5f88\u7b80\u5355\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7b49\u4ef7\u4e8e\u8fd9\u4e2a\u70b9\u6240\u6709$0$\u7ea7\u513f\u5b50\u52a0\uff0c\u6240\u6709$1$\u7ea7\u513f\u5b50\u51cf\uff0c\u6240\u6709$2$\u7ea7\u513f\u5b50\u52a0\u2026\u2026\u56e0\u4e3adfs\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u77e5\u9053dfn\u5e8f\u7684\u53e6\u4e00\u4e2a\u6027\u8d28\u2014\u2014\u82e5\u4e24\u4e2a\u70b9\u5c42\u6570\u5947\u5076\u6027\u4e0d\u540c\uff0c\u90a3\u4e48\u5b83\u4eec\u7684dfn\u5e8f\u5947\u5076\u6027\u4e5f\u4e0d\u540c\u3002\n\n\u8fd9\u6837\u5c31\u597d\u529e\u4e86\uff0c\u7531\u4e8e\u662f\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u6240\u4ee5\u53ef\u4ee5\u5efa\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u4e00\u4e2a\u7ef4\u62a4\u5947\u6570\u5c42\u6b21\uff0c\u4e00\u4e2a\u7ef4\u62a4\u5076\u6570\u5c42\u6b21\uff0c\u7136\u540e\u4fee\u6539\u5dee\u5206\u4e00\u4e0b\uff0c\u67e5\u8be2\u76f4\u63a5\u6c42\u5c31\u53ef\u4ee5\u4e86\u3002\n\n## \u4ee3\u7801\n```\n#include<stdio.h>\n#define lowbit(x) x&-x\nconst int maxn=200005,maxm=400005,maxt=400005;\nint i,j,k,m,n,e,cnt;\nint start[maxn],to[maxm],then[maxm],sum[maxt][2],dfn[maxn],end[maxn],tp[maxn],a[maxn];\ninline void add(int x,int y){\n\tthen[++e]=start[x],start[x]=e,to[e]=y;\n}\nvoid update(int x,int v,int t){\n\tfor(int i=x;i<maxt;i+=lowbit(i))\n\t\tsum[i][t]+=v;\n}\nint query(int x,int t){\n\tint res=0;\n\tfor(int i=x;i;i-=lowbit(i))\n\t\tres+=sum[i][t];\n\treturn res;\n}\nvoid dfs(int x,int last,int t){\n\tdfn[x]=++cnt,tp[x]=t;\n\tfor(int i=start[x];i;i=then[i]){\n\t\tint y=to[i];\n\t\tif(y==last)\n\t\t\tcontinue;\n\t\tdfs(y,x,t^1);\n\t}\n\tend[x]=cnt;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(i=1;i<=n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tfor(i=1;i<n;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y),add(y,x);\n\t}\n\tdfs(1,0,0);\n\tfor(i=1;i<=m;i++){\n\t\tint opt,x,v;\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt==1){\n\t\t\tscanf(\"%d%d\",&x,&v);\n\t\t\tupdate(dfn[x],v,tp[x]);\n\t\t\tupdate(end[x]+1,-v,tp[x]);\n\t\t}\n\t\tif(opt==2){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tprintf(\"%d\\n\",a[x]+query(dfn[x],tp[x])-query(dfn[x],tp[x]^1));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1596528812,
        "uid": 35754,
        "name": "Verdandi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF383C \u3010Propagating tree\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u4f60\u4e00\u9897\u6811\uff0c\u8ba9\u4f60\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff0c\u4e00\u79cd\u5b50\u6811\u4fee\u6539\uff0c\u6309\u6df1\u5ea6\u5206\u6b63\u8d1f\u3002\u4e00\u79cd\u5355\u70b9\u67e5\u8be2\u8282\u70b9\u3002\n\n## \u9898\u89e3\n\n\u9996\u5148\u8003\u8651\u628a\u6574\u68f5\u6811\u7684DFS\u5e8f\u6574\u51fa\u6765\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u9012\u5f52\u7ed3\u675f\u540e\u518d\u8bb0\u5f55\u4e00\u4e2a\u5f53\u524d\u7684DFS\u5e8f\u7684\u503c\u3002\n\n\u5373\u5904\u7406\u51fa\u4e00\u68f5\u6811\u7684\u5b50\u6811\u4e2d\u7684DFS\u5e8f\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u7531\u4e8e\u4e00\u9897\u5b50\u6811\u91cc\u7684DFS\u5e8f\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u8fd9\u68f5\u6811\u7528DFS\u5e8f\u62cd\u5e73\u5230\u4e86\u5e8f\u5217\u4e0a\u3002\n\n\u8003\u8651\u4fee\u6539\u64cd\u4f5c\u6ca1\u6709\u9650\u5236\uff0c\u5c31\u662f\u76f4\u63a5\u66f4\u65b0\u5b50\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u6765\u5b9e\u73b0\u533a\u95f4\u66f4\u65b0\u3002\n\n\u7531\u4e8e\u8fd9\u4e2a\u4fee\u6539\u64cd\u4f5c\u6709\u9650\u5236\uff0c\u8981\u6839\u636e\u4fee\u6539\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u5206\u7c7b\u4e3a\u52a0\u6216\u8005\u51cf\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e24\u9897\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\uff0c\u4e00\u9897\u52a0\uff0c\u4e00\u9897\u51cf\u3002\n\n\u67e5\u8be2\u7684\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5148\u67e5\u8be2\u7ef4\u62a4\u52a0\u7684\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\u7136\u540e\u51cf\u3002\n\n\u7ebf\u6bb5\u6811\u592a\u957f\uff0c\u7531\u4e8e\u67e5\u8be2\u662f\u5355\u70b9\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5e8f\u5217\u5dee\u5206\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u4e24\u6b21\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u5c31\u4e24\u6b21\u524d\u7f00\u548c\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n\nusing namespace std;\n\nconst int Maxn = 2e5 + 5;\nint n, m, tot, val [ Maxn ], fwt [ 2 ][ Maxn * 2 + 5 ], dfn [ Maxn ], fywf [ Maxn ], Lp [ Maxn ], Rp [ Maxn ];\nvector < int > Graph [ Maxn ];\n\nvoid dfs ( int x, int fa, int k )\n{\n\tLp [ x ] = ++ tot;\n\tfywf [ x ] = k;\n\tfor ( unsigned i = 0; i < Graph [ x ].size ( ); ++ i )\n\t{\n\t\tint y = Graph [ x ][ i ];\n\t\tif ( y == fa )\tcontinue;\n\t\tdfs ( y, x, k ^ 1 );\n\t}\n\tRp [ x ] = tot;\n}\n\nvoid Modify ( int x, int v, int p )\n{\n\tfor ( ; x <= n * 2; x += x & -x )\n\t\tfwt [ p ][ x ] += v;\n}\n\nint Query ( int x, int p )\n{\n\tint res = 0;\n\tfor ( ; x; x -= x & -x )\n\t\tres += fwt [ p ][ x ];\n\treturn res;\n}\n\nsigned main()\n{\n\tscanf ( \"%d %d\", &n, &m );\n\tfor ( int i = 1; i <= n; ++ i )\tscanf ( \"%d\", &val [ i ] );\n\tfor (int i = 1, x, y; i < n; ++ i) {\n\t\tscanf ( \"%d %d\", &x, &y );\n\t\tGraph [ x ].push_back ( y );\n\t\tGraph [ y ].push_back ( x );\n\t}\n\tdfs ( 1, 0, 0 );\n\tfor ( int i = 0, t, x, v; i < m; ++ i )\n\t{\n\t\tscanf ( \"%d %d\", &t, &x );\n\t\tif ( t == 1 )\n\t\t{\n\t\t\tscanf ( \"%d\", &v );\n\t\t\tModify ( Lp [ x ], v, fywf [ x ] );\n\t\t\tModify ( Rp [ x ] + 1, -v, fywf [ x ] );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf ( \"%d\\n\", val [ x ] + Query ( Lp [ x ], fywf [ x ] ) - Query ( Lp [ x ], fywf [ x ] ^ 1 ) );\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1593497976,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF383C \u3010Propagating tree\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u8981\u7528\u7ebf\u6bb5\u6811\u8fd9\u79cd\u5927\u5e38\u6570\u7684\u5462...\u6ca1\u6709\u533a\u95f4\u8be2\u95ee\uff0c\u6811\u72b6\u6570\u7ec4\u5c31\u597d\u4e86\u554a\n\n\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4$f[n]$\uff0c\u8868\u793a\u7b2cn\u53f7\u8282\u70b9\u7684\u4fee\u6539\u60c5\u51b5\uff0c\u5176\u4e2d\u5982\u679c$dep[n]$\u662f\u5947\u6570\u5219\u8bb0\u5f55\u589e\u52a0\u91cf\uff0c\u5426\u5219\u8bb0\u5f55\u51cf\u5c11\u91cf\u3002\u5219\u9898\u4e2d\u4fee\u6539\u5c31\u7b49\u540c\u4e8e\u5728dfs\u5e8f\u4e0a\u4fee\u6539\u4e00\u6bb5\u533a\u95f4\uff08\u56e0\u4e3a\u8fd9\u65f6\u5019\u589e\u51cf\u5df2\u7ecf\u4e0d\u5f71\u54cd\u4e86\uff09\uff0c\u5dee\u5206\u6811\u72b6\u6570\u7ec4\u5373\u53ef\u3002\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\nusing namespace std;\nconst int N=2e5+2,M=4e5+2;\nint a[N],lj[M],nxt[M],fir[N],f[N],dfn[N],siz[N],v[N],dep[N];\nint n,m,i,j,x,y,c,bs,z;\ninline void read(int &x)\n{\n\tc=getchar();\n\twhile ((c<48)||(c>57)) c=getchar();\n\tx=c^48;c=getchar();\n\twhile ((c>=48)&&(c<=57))\n\t{\n\t\tx=x*10+(c^48);\n\t\tc=getchar();\n\t}\n}\nvoid dfs(int x)\n{\n\tsiz[x]=1;dfn[x]=++bs;\n\tfor (int i=fir[x];i;i=nxt[i]) if (lj[i]!=f[x])\n\t{\n\t\tdep[lj[i]]=dep[f[lj[i]]=x]+1;dfs(lj[i]);siz[x]+=siz[lj[i]];\n\t}\n}\ninline void add(register int x,register int y,register int z)\n{\n\twhile (x<=n) {a[x]+=z;x+=x&(-x);}++y;\n\twhile (y<=n) {a[y]-=z;y+=y&(-y);}\n}\ninline int sum(register int x)\n{\n\tregister int r=0;\n\twhile (x) {r+=a[x];x^=x&(-x);}\n\treturn r;\n}\nint main()\n{\n\tread(n);read(m);\n\tfor (i=1;i<=n;i++) read(v[i]);\n\tfor (i=1;i<n;i++)\n\t{\n\t\tread(x);read(y);\n\t\tlj[++bs]=y;\n\t\tnxt[bs]=fir[x];\n\t\tfir[x]=bs;\n\t\tlj[++bs]=x;\n\t\tnxt[bs]=fir[y];\n\t\tfir[y]=bs;\n\t}bs=0;\n\tdfs(1);\n\twhile (m--)\n\t{\n\t\tread(y);read(x);\n\t\tif (y==1)\n\t\t{\n\t\t\tread(z);\n\t\t\tif (dep[x]&1) add(dfn[x],dfn[x]+siz[x]-1,z); else add(dfn[x],dfn[x]+siz[x]-1,-z);\n\t\t}\n\t\telse {z=sum(dfn[x]);if (dep[x]&1) printf(\"%d\\n\",v[x]+z); else printf(\"%d\\n\",v[x]-z);}\n\t}\n}\n```\n",
        "postTime": 1555667473,
        "uid": 29826,
        "name": "SSerxhs",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF383C \u3010Propagating tree\u3011"
    },
    {
        "content": "[$\\texttt{Link}$](https://www.luogu.com.cn/problem/CF383C)  \n\n\u63d0\u4f9b\u4e00\u79cd\u4e0d\u540c\u7684 dfs \u5e8f\u505a\u6cd5\u3002  \n\n\u770b\u5230\u9898\u9762\u662f\u5728\u6811\u4e0a\u7ef4\u62a4\u5404\u8282\u70b9\u7684\u503c\uff0c$n\\le2\\times10^5$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u662f $O(n\\log n)$\uff0c\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u5b8c\u6210\u8fd9\u4e2a\u7ef4\u62a4\u3002  \n\n\u7c7b\u4f3c\u6811\u5256\u5904\u7406\u5b50\u6811\u4fee\u6539\u7684\u65b9\u5f0f\uff0c\u628a\u4fee\u6539\u76f8\u540c\u503c\u7684\u8282\u70b9\u653e\u5230\u540c\u4e00\u4e2a\u533a\u95f4\uff0c\u672c\u9898\u662f\u6309\u8282\u70b9\u6df1\u5ea6\u5947\u5076\u51b3\u5b9a\u4fee\u6539\u7684\u503c\u3002\u5bf9\u4e8e\u8282\u70b9 $u$\uff0c\u7528 $dfn_u$ \u5b58 dfs \u5e8f\uff0c\u8bb0\u5f55 $son_u$\uff0c\u8868\u793a $dfn$ \u503c\u6700\u5c0f\u7684\u5b50\u8282\u70b9\uff0c\u518d\u5b58 $siz_{0,u}$ \u548c $siz_{1,u}$\uff0c\u8868\u793a\u6df1\u5ea6\u5206\u522b\u4e3a\u5947\u6570\u4e0e\u5076\u6570\u7684\u5b50\u8282\u70b9\u603b\u6570\u3002  \n\n\u5728\u6807\u8bb0 dfs \u5e8f\u65f6\uff0c\u5206\u4e24\u6b21\u641c\u7d22\uff0c\u4e00\u6b21\u6807\u8bb0\u5f53 $1$ \u4e3a\u6839\u65f6\uff0c\u6df1\u5ea6\u662f\u5947\u6570\u7684\u8282\u70b9\uff0c\u53e6\u4e00\u6b21\u6807\u8bb0\u5f53 $1$ \u4e3a\u6839\u65f6\uff0c\u6df1\u5ea6\u662f\u5076\u6570\u7684\u8282\u70b9\uff0c\u8fd9\u6837\u4fbf\u4fdd\u8bc1\u4e86\u6df1\u5ea6\u5947\u5076\u76f8\u540c\u7684\u8282\u70b9\u5728\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4\u5185\u3002  \n\n\u82e5\u4fee\u6539\u4ee5 $u$ \u4e3a\u6839\u7684\u6240\u6709\u5b50\u6811\uff0c\u5bf9\u4e8e\u4e0e $u$ \u6df1\u5ea6\u5947\u5076\u76f8\u540c\u7684\u4fee\u6539\uff0c\u5373\u4e3a\u4fee\u6539\u533a\u95f4 $\\left[dfn_u,dfn_u+siz_{0,u}-1\\right]$\uff1b\u5bf9\u4e8e\u4e0e $u$ \u6df1\u5ea6\u5947\u5076\u4e0d\u540c\u7684\u4fee\u6539\uff0c\u56e0\u4e3a $son_u$ \u5fc5\u5b9a\u662f $u$ \u7684\u76f4\u7cfb\u5b50\u8282\u70b9\uff0c\u4e0e $u$ \u6df1\u5ea6\u5947\u5076\u4e00\u5b9a\u4e0d\u540c\uff0c\u6240\u4ee5\u4fee\u6539\u533a\u95f4 $\\left[dfn_{son_u},dfn_{son_u}+siz_{1,u}-1\\right]$ \u5373\u53ef\u3002  \n\n\u67e5\u8be2\u5c31\u662f\u5355\u70b9\u67e5\u8be2\u3002  \n\n\u56e0\u4e3a\u672c\u9898\u662f\u533a\u95f4\u4fee\u6539\u5355\u70b9\u67e5\u8be2\uff0c\u76f4\u63a5\u4e0a\u5e38\u6570\u5c0f\u8fd8\u597d\u5199\u7684\u6811\u72b6\u6570\u7ec4\u5dee\u5206\u7ef4\u62a4\u5c31\u597d\u3002  \n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002  \n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 10;\nint n, m;\nint a[N];\nstruct edge {\n\tint to, nxt;\n} e[N << 1];\nint head[N], cnt;\nvoid addedge(int u, int v) {\n\te[++cnt] = (edge){v, head[u]};\n\thead[u] = cnt;\n}\nint dfn[N], son[N], siz[2][N], dep[N], id[N], tot;//id[i]\u8868\u793adfn\u503c\u4e3ai\u7684\u8282\u70b9\nvoid dfs1(int u, int f) {\n\tdep[u] = dep[f] + 1;\n\tif(dep[u] & 1) {\n\t\tdfn[u] = ++tot; id[tot] = u; siz[0][u] = 1;\n\t\tfor(int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif(v == f) continue;\n\t\t\tdfs1(v, u);\n\t\t\tsiz[0][u] += siz[1][v];\n\t\t}\n\t}\n\telse\n\t\tfor(int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif(v == f) continue;\n\t\t\tdfs1(v, u);\n\t\t\tif(!son[u]) son[u] = v;\n\t\t\tsiz[1][u] += siz[0][v];\n\t\t}\n}\nvoid dfs2(int u, int f) {\n\tdep[u] = dep[f] + 1;\n\tif(!(dep[u] & 1)) {\n\t\tdfn[u] = ++tot; id[tot] = u; siz[0][u] = 1;\n\t\tfor(int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif(v == f) continue;\n\t\t\tdfs2(v, u);\n\t\t\tsiz[0][u] += siz[1][v];\n\t\t}\n\t}\n\telse\n\t\tfor(int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif(v == f) continue;\n\t\t\tdfs2(v, u);\n\t\t\tif(!son[u]) son[u] = v;\n\t\t\tsiz[1][u] += siz[0][v];\n\t\t}\n}\nint t[N];\nvoid add(int x, int v) {\n\tfor(int i = x; i <= n; i += i & -i) t[i] += v;\n}\nint query(int x) {\n\tint res = 0;\n\tfor(int i = x; i; i -= i & -i) res += t[i];\n\treturn res;\n}\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= n; i++)\n\t\tscanf(\"%d\", &a[i]);\n\tfor(int i = 1; i < n; i++) {\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\taddedge(u, v), addedge(v, u);\n\t}\n\tdfs1(1, 0);\n\tdfs2(1, 0);\n\tfor(int i = 1; i <= n; i++) add(dfn[i], a[i] - a[id[dfn[i] - 1]]);//\u6ce8\u610fdfn\u4e0eid\u7684\u53cc\u5c04\n\tint op, x, y;\n\twhile(m--) {\n\t\tscanf(\"%d\", &op);\n\t\tif(op == 1) {\n\t\t\tscanf(\"%d%d\", &x, &y);\n\t\t\tadd(dfn[x], y), add(dfn[x] + siz[0][x], -y);\n\t\t\tif(son[x]) add(dfn[son[x]], -y), add(dfn[son[x]] + siz[1][x], y);\n\t\t}\n\t\telse {\n\t\t\tscanf(\"%d\", &x);\n\t\t\tprintf(\"%d\\n\", query(dfn[x]));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1621922006,
        "uid": 365107,
        "name": "Terac",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF383C Propagating tree"
    },
    {
        "content": "[CF383C Propagating tree](https://www.luogu.com.cn/problem/CF383C)\n\n\u8fd9\u9898\u5f04\u6e05\u9898\u610f\uff0c\u660e\u786e\u601d\u8def\uff0c\u5176\u5b9e\u5f88\u7b80\u5355.\n\n\u6b64\u9898\u9700\u652f\u6301\u4e24\u79cd\u64cd\u4f5c$:$\u533a\u95f4\u4fee\u6539\u548c\u5355\u70b9\u67e5\u8be2\uff0c\u5176\u4e2d\u533a\u95f4\u4fee\u6539\u7684\u6743\u503c\u6309\u6df1\u5ea6\u5947\u5076\u6027\u4ea4\u66ff\u53d8\u6362.\n\n\u9996\u5148\u5957\u8def\u6027\u5730\u8dd1\u51fa$dfs$\u5e8f\u548c\u6bcf\u4e2a\u70b9\u7684$siz$\u503c.\u7531\u4e8e\u6b64\u9898\u53ea\u9700\u5355\u70b9\u67e5\u8be2\uff0c\u6240\u4ee5\u7ed9\u4e86\u6211\u4eec\u5f88\u5927\u7684\u53d1\u6325\u7a7a\u95f4.\u53c8\u56e0\u4e3a\u533a\u95f4\u4fee\u6539\u7684\u6743\u503c\u6309\u6df1\u5ea6\u5947\u5076\u53d8\u6362\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u6253\u4e0a$lazy$\uff0c\u5bf9\u4e8e\u6df1\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u67e5\u8be2\u7684\u65f6\u5019\u52a0\u4e0a$lazy$,\u6df1\u5ea6\u4e3a\u5076\u6570\u7684\u70b9\u51cf\u53bb$lazy$\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u6c42\u51fa\u7b54\u6848.\u6ce8\u610f\u6bcf\u6b21\u67e5\u8be2\u7684\u65f6\u5019\u52a0\u4e0a\u521d\u59cb\u503c$v$.\n\n\u4fee\u6539\u64cd\u4f5c\u4ee5\u67e5\u8be2\u64cd\u4f5c\u4e3a\u57fa\u7840\uff0c\u5bf9\u4e8e\u4e00\u7ec4\u4fee\u6539$(u, val)$\uff0c\u82e5\u5176\u6df1\u5ea6\u4e3a\u5947\u6570\uff0c\u5219\u76f4\u63a5\u5728\u5bf9\u5e94\u7684$dfs$\u5e8f$[dfn[x], dfn[x]+siz[x]-1]$\u4e0a\u52a0\u4e0a$val$,\u5426\u5219\u5c31\u628a$val$\u53d6\u53cd\u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c.\n\n\u8fd9\u91cc\u6211\u7528\u4e86\u6c38\u4e45\u5316\u6807\u8bb0\uff0c\u5f88\u597d\u5199\uff0c\u4ee3\u7801\u4e5f\u5f88\u77ed\uff0c\u7ebf\u6bb5\u6811\u53ea\u6709\u4e00\u4e2a\u6570\u7ec4$lazy$.\n\n\u7ebf\u6bb5\u6811\u5355\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6$O(\\log n)$,\u603b\u590d\u6742\u5ea6$O(m\\log n)$\n\n```cpp\nconst ll N=2e5+5;\n\nll head[N], to[N<<1], next[N<<1], tot;\ninline void add(ll x, ll y){\n\tto[++tot]=y; next[tot]=head[x]; head[x]=tot;\n}\ninline void Link(ll x, ll y){\n\tadd(x, y); add(y, x);\n}\n\nll n, m, v[N];\nll dfn[N], siz[N], dep[N], cnt;\n\ninline void dfs(ll x, ll fa){\n\tdep[x]=dep[fa]+1; siz[x]=1;\n\tdfn[x]=++cnt;\n\tfor (R ll i=head[x], ver; i; i=next[i]){\n\t\tver=to[i];\n\t\tif (ver==fa) continue;\n\t\tdfs(ver, x);\n\t\tsiz[x]+=siz[ver];\n\t}\n}\n\nnamespace seg{\n\tll lazy[N<<2];\n\t\n\tinline void update(ll p, ll l, ll r, ll u, ll v, ll val){\n\t\tif (u<=l && r<=v) return (void)(lazy[p]+=val);\n\t\tll mid=l+r>>1;\n\t\tif (u<=mid) update(p<<1, l, mid, u, v, val);\n\t\tif (v>mid) update(p<<1|1, mid+1, r, u, v, val);\n\t}\n\t\n\tinline ll ask(ll p, ll l, ll r, ll k, ll type){\n\t\tif (l==r) return lazy[p]*type;\n\t\tll mid=l+r>>1;\n\t\tif (k<=mid) return lazy[p]*type+ask(p<<1, l, mid, k, type);\n\t\telse return lazy[p]*type+ask(p<<1|1, mid+1, r, k, type);\n\t}\n}\n\nint main(){\n\tread(n); read(m);\n\tfor (R ll i=1; i<=n; i++) read(v[i]);\n\tfor (R ll i=1, x, y; i<n; i++){\n\t\tread(x); read(y); Link(x, y);\n\t}\n\tdfs(1, 0);\n\tll op, u, val, type;\n\twhile(m--){\n\t\tread(op); read(u);\n\t\tif (op==1){\n\t\t\tread(val);\n\t\t\tif (!(dep[u]&1)) val=-val;\n\t\t\tseg::update(1, 1, n, dfn[u], dfn[u]+siz[u]-1, val);\n\t\t}else{\n\t\t\tif (!(dep[u]&1)) type=-1;\n\t\t\telse type=1;\n\t\t\twriteln(v[u]+seg::ask(1, 1, n, dfn[u], type));\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1605569517,
        "uid": 220285,
        "name": "Saber_Master",
        "ccfLevel": 7,
        "title": "CF383C Propagating tree"
    },
    {
        "content": "\u5176\u5b9e\u6ca1\u6709\u90a3\u4e48\u9ebb\u70e6\n\n\u663e\u7136\u5148\u8dd1dfs\u5f97\u51fa\u6811\u4e0a\u7684\u5e8f\u5217\u8f6c\u6362\u4e3a\u7ebf\u6bb5\u6811\n\n\u55ef\uff0c\u7136\u540e\u600e\u4e48\u7ef4\u62a4\u5462\n\n\u8fd9\u9053\u9898\u6211\u4eec\u4e0d\u9700\u8981\u8dd1\u6811\u4e0a\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(nlog_2n)$\u7684\n\n\u5bf9\u4e8e2\u64cd\u4f5c\uff0c\u6211\u4eec\u7ebf\u6bb5\u6811$O(log_2n)$\u67e5\u8be2\u5373\u53ef\n\n\u5bf9\u4e8e1\u64cd\u4f5c\uff0c\u6211\u4eec\u76f4\u63a5\u5728$x$\u5b50\u6811\u8fd9\u4e00\u6bb5\u7684\u7ebf\u6bb5\u6811\u6807\u8bb0\u4e0a\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7ef4\u62a4\u6211\u4eec\u5206\u60c5\u51b5\u6807\u8bb0\n\n\u5982\u679c\u5f53\u524d$x$\u8282\u70b9\u6df1\u5ea6\u4e3a\u5947\u6570\uff0c\u6211\u4eec\u5c31\u52a0\u4e0a$val$\uff0c\u4e3a\u5076\u6570\u5c31\u52a0\u4e0a$-val$\uff0c\u5bf9\u4e8e\u67e5\u8be2\u7684\u8282\u70b9\u5c31\u662f\u6df1\u5ea6\u4e3a\u5947\u6570\u7684\u52a0\u4e0a\u61d2\u60f0\u6807\u8bb0\uff0c\u6df1\u5ea6\u4e3a\u5076\u6570\u7684\u51cf\u53bb\u61d2\u60f0\u6807\u8bb0\n\n\u5f53$tree[o]$\u7ef4\u62a4\u7684\u662f$[l, r]$\u4e14$l == r$\u65f6\uff0c\u90a3\u4e48\u8fd9\u4e2a$tree[o]$\u5c31\u662f\u4e00\u4e2a\u5177\u4f53\u70b9\u7684\u6743\u503c\uff0c\u5176\u4ed6\u7684$tree[o]$\u5c31\u76f8\u5f53\u4e8e\u61d2\u60f0\u6807\u8bb0\uff0c\u5411\u4e0b\u63a8\u5373\u53ef\u3002\n\n```cpp\n#define mid ((l+r)>>1)\n#define lson (o<<1)\n#define rson (o<<1|1)\n#define R register\n\n#define size abcdefg\nconst int N = 2e5 + 10;\n\nint n, m, a[N];\n\nint cut, head[N], ver[N << 1], next[N << 1];\ninline void add(int x, int y)\n{\n\tver[++cut] = y; next[cut] = head[x]; head[x] = cut;\n}\n\nint deep[N], f[N], size[N], son[N], id[N], tot, dede[N];\ninline void dfs1(int x, int fa)\n{\n\tdeep[x] = deep[fa] + 1;\n\tf[x] = fa;\n\tsize[x] = 1;\n\tfor(R int i = head[x]; i; i = next[i])\n\t{\n\t\tint y = ver[i];\n\t\tif(y == fa) continue;\n\t\tdfs1(y, x);\n\t\tsize[x] += size[y];\n\t\tif(size[y] > size[son[x]]) son[x] = y;\n\t}\n}\n\ninline void dfs2(int x, int top)\n{\n\tid[x] = ++tot;\n\tdede[tot] = x;\n\tif(!son[x]) return;\n\tdfs2(son[x], top);\n\tfor(R int i = head[x]; i; i = next[i])\n\t{\n\t\tint y = ver[i];\n\t\tif(y == f[x] || y == son[x]) continue;\n\t\tdfs2(y, y);\n\t}\n}\n\nint tree[N << 2];\ninline void build(int o, int l, int r)\n{\n\tif(l == r)\n\t{\n\t\ttree[o] = a[dede[l]];\n\t\treturn;\n\t}\n\tbuild(lson, l, mid);\n\tbuild(rson, mid + 1, r);\n}\n\ninline void pushdown(int o, int l1, int r1, int l2, int r2)\n{\n\tif(!tree[o]) return;\n\tif(l1 == r1) tree[lson] += ((deep[dede[l1]] & 1) ? 1 : -1) * tree[o];\n\telse tree[lson] += tree[o];\n\tif(l2 == r2) tree[rson] += ((deep[dede[l2]] & 1) ? 1 : -1) * tree[o];\n\telse tree[rson] += tree[o];\n\ttree[o] = 0;\n}\n\ninline void update(int o, int l, int r, int ql, int qr, int val)\n{\n\tif(ql <= l && r <= qr)\n\t{\n\t\tif(l == r) tree[o] += ((deep[dede[l]] & 1) ? 1 : -1) * val;\n\t\telse tree[o] += val;\n\t\treturn;\n\t}\n\tpushdown(o, l, mid, mid + 1, r);\n\tif(ql <= mid) update(lson, l, mid, ql, qr, val);\n\tif(qr > mid) update(rson, mid + 1, r, ql, qr, val);\n}\n\ninline int query(int o, int l, int r, int pos)\n{\n\tif(l == r) return tree[o];\n\tpushdown(o, l, mid, mid + 1, r);\n\tif(pos <= mid) return query(lson, l, mid, pos);\n\telse return query(rson, mid + 1, r, pos);\n}\n\nsigned main()\n{\n\tread(n); read(m);\n\tfor(R int i = 1; i <= n; i++) read(a[i]);\n\tfor(R int i = 1, x, y; i < n; i++) read(x), read(y), add(x, y), add(y, x);\n\tdfs1(1, 0);\n\tdfs2(1, 1);\n\tbuild(1, 1, n);\n\twhile(m--)\n\t{\n\t\tint opt, x, y;\n\t\tread(opt);\n\t\tif(opt == 1)\n\t\t{\n\t\t\tread(x); read(y);\n\t\t\tif(deep[x] & 1) update(1, 1, n, id[x], id[x] + size[x] - 1, y);\n\t\t\telse update(1, 1, n, id[x], id[x] + size[x] - 1, -y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tread(x);\n\t\t\twriteln(query(1, 1, n, id[x]));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1605566347,
        "uid": 103023,
        "name": "AvA_sleeper",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF383C \u3010Propagating tree\u3011"
    },
    {
        "content": "\u8fd9\u5e94\u8be5\u5c5e\u4e8e\u4e00\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u6570\u636e\u7ed3\u6784\u5904\u7406\u6811\u4e0a\u95ee\u9898.\n\n# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u9897\u6839\u8282\u70b9\u7f16\u53f7\u4e3a $1$ \u7684\u6811,\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u4fee\u6539\u65f6\u5728\u5b83\u7684\u5b50\u6811\u4e2d\u5bf9\u4e8e\u6df1\u5ea6\u5947\u5076\u6027\u76f8\u540c\u7684\u8282\u70b9\u52a0\u4e0a\u8fd9\u4e2a\u6743\u503c,\u4e0d\u540c\u5219\u51cf\u53bb\u8fd9\u4e2a\u503c,\u5355\u70b9\u67e5\u8be2.\n\n# \u5206\u6790\n\n\u5148\u7ed9\u51fa\u8fd9\u4e2a\u95ee\u9898\u7684\u5f31\u5316\u7248:\n\n\u7ed9\u51fa\u4e00\u9897\u6839\u8282\u70b9\u7f16\u53f7\u4e3a $1$ \u7684\u6811,\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u4fee\u6539\u65f6\u5728\u5b83\u7684\u5b50\u6811\u4e2d\u8282\u70b9\u4e5f\u52a0\u4e0a\u8fd9\u4e2a\u6743\u503c,\u5355\u70b9\u67e5\u8be2.\n\n\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u4e2a\u95ee\u9898\u5c31\u597d\u5904\u7406\u5f88\u591a\u4e86,[DFS\u5e8f](https://www.baidu.com/s?wd=DFS\u5e8f&ie=UTF-8)\u6709\u4e00\u4e2a\u6027\u8d28,\u53c8\u79f0[\u62ec\u53f7\u5b9a\u7406](https://baike.baidu.com/item/\u62ec\u53f7\u5b9a\u7406/8985762?fr=aladdin),\u5728\u6811\u4e2d\u8fd9\u4e2a\u5c31\u4f1a\u4f53\u73b0\u5728\u518dDFS\u5e8f\u4e2d\u4ee5 $a$ \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u5728 $a$ \u7684\u540e\u9762,\u4e14\u8fde\u7eed,\u4e8e\u662f\u5bf9\u4e8e\u4e00\u68f5\u6811\u7684\u4fee\u6539\u5728DFS\u5e8f\u4e2d\u7684\u5c31\u53d8\u6210\u4e86\u533a\u95f4\u4fee\u6539,\u90a3\u4e48\u4e45\u53ef\u4ee5\u62ff\u51fa\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f.(\u4f8b\u5982[\u7ebf\u6bb5\u6811](https://baike.baidu.com/item/\u7ebf\u6bb5\u6811/10983506?fr=aladdin),[\u6811\u72b6\u6570\u7ec4](https://baike.baidu.com/item/\u6811\u72b6\u6570\u7ec4/313739?fr=aladdin),[\u5e73\u8861\u6811](https://baike.baidu.com/item/\u5e73\u8861\u6811/7641279?fr=aladdin)...)\n\n\u4e0b\u9762\u56de\u5230\u8fd9\u4e2a\u95ee\u9898,\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u6df1\u5ea6\u4e0d\u540c\u7684\u70b9\u7684\u4fee\u6539\u53ef\u80fd\u662f\u4e0d\u540c\u7684,\u53ea\u6709\u4e24\u79cd\u4fee\u6539($+val$ \u548c $-val$)\u800c\u4e14\u8fd9\u4e24\u4e2a\u4fee\u6539\u4e8e\u8fd9\u4e2a\u70b9\u5947\u5076\u6027\u6709\u5173,\u90a3\u5c31\u6709\u4e00\u4e2a\u9f3b\u5c16\u66b4\u529b\u7684\u60f3\u6cd5,\u65e2\u7136\u548c\u5947\u5076\u6027\u6709\u5173,\u90a3\u4e48\u4e45\u7ef4\u62a4\u4e24\u9897\u7ebf\u6bb5\u6811,\u5206\u522b\u7ef4\u62a4\u6df1\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u548c\u6df1\u5ea6\u4e3a\u5076\u6570\u7684\u70b9\u7684\u503c,\u90a3\u5c31\u53d8\u4f1a\u4e86\u7b2c\u4e00\u4e2a\u95ee\u9898.\n\n# \u7ec6\u8282\u5904\u7406\n0. \u8bb0\u5f97\u6e05\u7a7a $Lazy$ \u6807\u8bb0\u548c\u4e0b\u4f20 $Lazy$ \u6807\u8bb0.\n1. \u5728\u8fde\u8fb9\u7684\u65f6\u5019\u9700\u8981\u8fde\u53cc\u5411\u8fb9,\u5e76\u4e14\u9700\u8981\u6ce8\u610f\u8fb9\u7684\u6570\u7ec4\u9700\u8981\u5f00\u4e24\u500d(\u8fd9\u5e94\u8be5\u7b97\u662f\u5e38\u8bc6\u5427).\n2. \u9700\u8981\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u6811\u4e2d\u6df1\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u7684\u4e2a\u6570\u548c\u6df1\u5ea6\u4e3a\u5076\u6570\u7684\u70b9\u7684\u4e2a\u6570,\u9700\u8981\u7528\u6765\u8ba1\u7b97\u4fee\u6539\u7684\u533a\u95f4\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e.\n3. \u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u4fee\u6539\u5728\u4e24\u9897\u6811\u90fd\u9700\u8981\u4fee\u6539,\u5bf9\u4e8e\u52a0\u4e0a $val$ \u7684\u90e8\u5206\u5f88\u597d\u8ba1\u7b97,\u4f46\u662f\u5bf9\u4e8e\u548c\u5b83\u6df1\u5ea6\u7684\u5947\u5076\u6027\u4e0d\u540c\u7684\u8282\u70b9\u7684\u4fee\u6539\u5c31\u6bd4\u8f83\u9ebb\u70e6\u4e86,\u6240\u4ee5\u5728DFS\u7684\u65f6\u5019\u6700\u597d\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u8282\u70b9\u7684\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9\u662f\u8c01,\u5373\u8c01\u662f\u5728DFS\u5e8f(\u4e0d\u6309\u5947\u5076\u5206\u5f00)\u4e2d\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9,\u5728\u4fee\u6539\u7684\u65f6\u5019\u53ea\u8981\u5728\u53e6\u4e00\u9897\u7ebf\u6bb5\u6811\u4e2d\u4ee5\u5b83\u4e3a\u5de6\u7aef\u70b9,\u957f\u5ea6\u4e3a\u8fd9\u6574\u9897\u5b50\u6811\u4e2d\u7684\u6240\u6709\u6df1\u5ea6\u7684\u5947\u5076\u6027\u4e0e\u6839\u8282\u70b9\u4e0d\u540c\u7684\u8282\u70b9\u4e2a\u6570\u6765\u4fee\u6539.\n4. \u8bb0\u5f97\u9700\u8981\u7279\u5224\u4e00\u4e0b\u8fd9\u9897\u6811\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u60c5\u51b5,\u8fd9\u6837\u4f1a\u6709\u4e00\u9897\u7ebf\u6bb5\u6811\u4e2d\u7684\u5927\u5c0f\u4e3a $0$,\u4f46\u662f\u5982\u679c\u5728\u5efa\u6811\u7684\u65f6\u5019\u5de6\u7aef\u70b9\u4ece $1$ \u5f00\u59cb,\u53f3\u7aef\u70b9\u4e3a $0$,\u4f1a\u65e0\u9650\u9012\u5f52,\u7136\u540eMLE.(\u4eb2\u8eab\u7ecf\u5386)\n\n# \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\nconst int maxN=3e5+7;\nint N,M;\nint val[maxN];\n//\u94fe\u5f0f\u524d\u5411\u661f,\u57fa\u7840\u77e5\u8bc6,\u4e0d\u89e3\u91ca\nstruct Edge\n{\n\tint to,next;\n}edge[maxN*2];\nint edge_head[maxN];\nint edge_cnt=0;\n#define FOR(now) for(int i_edge=edge_head[now];i_edge;i_edge=edge[i_edge].next)\n#define TO edge[i_edge].to\nvoid AddEdge(int form,int to)//\u52a0\u8fb9\n{\n\tedge[++edge_cnt].to=to;\n\tedge[edge_cnt].next=edge_head[form];\n\tedge_head[form]=edge_cnt;\n}\n//\u4e0b\u6587\u4e2d0\u8868\u793a\u5076\u6570,1\u8868\u793a\u5947\u6570,\u6839\u8282\u70b9\u4e3a\u7684\u6df1\u5ea6\u4e3a1\nint deep[maxN];//\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\nint first_son[maxN];//\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9\nint place[maxN];//\u8bb0\u5f55\u6bcf\u683c\u8282\u70b9\u5728\u6309\u5947\u5076\u5206\u5f00\u540e\u7684\u4f4d\u7f6e,\u56e0\u4e3a\u4e4b\u540e\u5b58\u5728\u5947\u5076\u4e2d\u7684\u4e00\u4e2a,\u6240\u4ee5\u53ea\u8981\u4e0d\u9700\u8981\u5206\u522b\nint dfs[2][maxN];//\u8bb0\u5f55\u5947\u5076\u7684\u4e24\u4e2aDFS\u5e8f\nint dfs_cnt[2]={0,0};//\u8bb0\u5f55DFS\u5e8f\u957f\u5ea6\nint size[2][maxN];//\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6df1\u5ea6\u4e3a\u5947\u6570\u7684\u8282\u70b9\u4e2a\u6570\u548c\u6df1\u5ea6\u4e3a\u5076\u6570\u7684\u8282\u70b9\u4e2a\u6570\nbool visit[maxN];//\u5224\u65ad\u8fd9\u4e2a\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\n#define TEAM (deep[now]&1)//\u65b9\u4fbf\u4f7f\u7528\nvoid DFS(int now=1)\n{\n\tvisit[now]=1;//\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u8fd9\u4e2a\u8282\u70b9\n\tdfs[TEAM][++dfs_cnt[TEAM]]=now;//\u5c06\u8fd9\u4e2a\u70b9\u653e\u5165\u5b83\u6539\u8fdb\u5165\u7684DFS\u5e8f\u4e2d\n\tplace[now]=dfs_cnt[TEAM];//\u8bb0\u5f55\u51fa\u73b0\u7684\u4f4d\u7f6e\n\tsize[TEAM][now]=1;//\u81ea\u5df1\u548c\u81ea\u5df1\u7684\u6df1\u5ea6\u7684\u5947\u5076\u6027\u81ea\u7136\u76f8\u540c\n\tFOR(now)\n\t{\n\t\tif(!visit[TO])//\u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7\u624d\u8bbf\u95ee\n\t\t{\n\t\t\tif(!first_son[now])//\u5982\u679c\u8fd9\u4e2a\u662f\u4ed6\u7684\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9\n\t\t\t{\n\t\t\t\tfirst_son[now]=TO;\n\t\t\t}\n\t\t\tdeep[TO]=deep[now]+1;//\u5b50\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a\u7236\u8282\u70b9\u7684\u6df1\u5ea6+1\n\t\t\tDFS(TO);//\u7ee7\u7eedDFS\n\t\t\t//\u4e00\u4e0b\u4e3a\u8bb0\u5f55\u4ee5\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6df1\u5ea6\u4e3a\u5947\u548c\u5076\u7684\u8282\u70b9\u5404\u81ea\u7684\u51fa\u73b0\u6b21\u6570\n\t\t\tsize[TEAM^1][now]+=size[TEAM^1][TO];\n\t\t\tsize[TEAM][now]+=size[TEAM][TO];\n\t\t}\n\t}\n}\n#undef TEAM\n#undef FOR\n#undef TO\nstruct LazyTag//Lazy\u6807\u8bb0\n{\n\tint add;\n\tvoid CleanLazyTag()//\u6e05\u7a7a\u6807\u8bb0\n\t{\n\t\tadd=0;\n\t}\n}ForMake;\nLazyTag MakeLazyTag(int add)//\u5236\u4f5c\u4e00\u4e2a\u6807\u8bb0\n{\n\tForMake.add=add;\n\treturn ForMake;\n}\n//\u7ebf\u6bb5\u6811\u4e0d\u662f\u672c\u6587\u7ec8\u4e8e\u5185\u5bb9,\u4e0d\u7ec6\u8bb2\nstruct SegmentTree//\u7ebf\u6bb5\u6811\n{\n\tint num;\n\tLazyTag tag;\n}sgt[2][maxN*4];//\u5947\u5076\u4e24\u9897\u7ebf\u6bb5\u6811\n#define LSON (now<<1)\n#define RSON (now<<1|1)\n#define MIDDLE ((left+right)>>1)\n#define LEFT LSON,left,MIDDLE\n#define RIGHT RSON,MIDDLE+1,right\n#define NOW team,now_left,now_right,add\n//\u60f3\u6bcf\u4e2a\u51fd\u6570\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570team\u8868\u793a\u4fee\u6539\u7684\u662f\u54ea\u4e00\u9897\u7ebf\u6bb5\u6811\nvoid Build(int team,int now,int left,int right)//\u5efa\u6811\n{\n\tif(left==right)\n\t{\n\t\tsgt[team][now].num=val[dfs[team][left]];\n\t\treturn;\n\t}\n\tBuild(team,LEFT);\n\tBuild(team,RIGHT);\n}\nvoid Down(int team,LazyTag tag,int now,int left,int right)//\u4fee\u6539\u90e8\u5206\n{\n\tsgt[team][now].tag.add+=tag.add;\n\tif(left==right)//\u53ea\u6709\u53f6\u8282\u70b9\u9700\u8981\u4fee\u6539\u503c\n\t{\n\t\tsgt[team][now].num+=tag.add;\n\t}\n}\nvoid PushDown(int team,int now,int left,int right)//\u4e0b\u4f20\u61d2\u6807\u8bb0\n{\n\tif(sgt[team][now].tag.add)\n\t{\n\t\tDown(team,sgt[team][now].tag,LEFT);\n\t\tDown(team,sgt[team][now].tag,RIGHT);\n\t\tsgt[team][now].tag.CleanLazyTag();\n\t}\n}\nvoid Updata(int team,int now_left,int now_right,int add,int now,int left,int right)//\u4fee\u6539\u90e8\u5206\n{\n\tif(now_right<left||right<now_left)\n\t{\n\t\treturn;\n\t}\n\tif(now_left<=left&&right<=now_right)\n\t{\n\t\tDown(team,MakeLazyTag(add),now,left,right);\n\t\treturn;\n\t}\n\tPushDown(team,now,left,right);\n\tUpdata(NOW,LEFT);\n\tUpdata(NOW,RIGHT);\n}\nint Query(int team,int place,int now,int left,int right)//\u67e5\u8be2\n{\n\tif(right<place||place<left)\n\t{\n\t\treturn 0;\n\t}\n\tif(left==right)\n\t{\n\t\treturn sgt[team][now].num;\n\t}\n\tPushDown(team,now,left,right);\n\treturn Query(team,place,LEFT)+Query(team,place,RIGHT);\n}\n#undef LSON\n#undef RSON\n#undef MIDDLE\n#undef LEFT\n#undef RIGHT\n#undef NOW\n#define TEAM (deep[u]&1)\nint main()\n{\n\tscanf(\"%d%d\",&N,&M);\n\tREP(i,1,N)\n\t{\n\t\tscanf(\"%d\",&val[i]);\n\t}\n\tint father,son;\n\tREP(i,1,N-1)\n\t{\n\t\tscanf(\"%d%d\",&father,&son);\n\t\tAddEdge(father,son);//\u8fde\u8fb9\n\t\tAddEdge(son,father);\n\t}\n\tdeep[1]=1;\n\tDFS();//BFS\n\t//\u6ce8\u610f\u5efa\u6811\u524d\u9700\u8981\u5224\u65ad\u6811\u4e2d\u662f\u5426\u6709\u8282\u70b9\n\tif(dfs_cnt[0])\n\t{\n\t\tBuild(0,1,1,dfs_cnt[0]);\n\t}\n\tif(dfs_cnt[1])\n\t{\n\t\tBuild(1,1,1,dfs_cnt[1]);\n\t}\n\tint opt,u,add_val;\n\tREP(i,1,M)\n\t{\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt==1)\n\t\t{\n\t\t\tscanf(\"%d%d\",&u,&add_val);\n\t\t\tUpdata(TEAM,place[u],place[u]+size[TEAM][u]-1,add_val,1,1,dfs_cnt[TEAM]);//\u4fee\u6539\u5947\u5076\u6027\u548c\u8fd9\u4e2a\u70b9\u4e00\u6837\u7684\u90e8\u5206\n\t\t\tif(first_son[u])\n\t\t\t{\n\t\t\t\tUpdata(TEAM^1,place[first_son[u]/*\u8bb0\u5f55\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u5de6\u53f3*/],place[first_son[u]]+size[TEAM^1][u]-1,-add_val,1,1,dfs_cnt[TEAM^1]);//\u5947\u5076\u6027\u4e0d\u540c\u7684\u90e8\u5206\n\t\t\t}\n\t\t}\n\t\tif(opt==2)//\u67e5\u8be2\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u5dee\u4e0d\u591a\n\t\t{\n\t\t\tscanf(\"%d\",&u);\n\t\t\tprintf(\"%d\\n\",Query(TEAM,place[u],1,1,dfs_cnt[TEAM]));\n\t\t}\n\t}\n\treturn 0;\n}\n#undef TEAM\n```",
        "postTime": 1582096923,
        "uid": 86625,
        "name": "Limit",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF383C \u3010Propagating tree\u3011"
    },
    {
        "content": "\u9996\u5148\u7528 $\\text{DFS}$ \u5e8f\u628a\u8fd9\u4e2a\u95ee\u9898\u641e\u5230\u5e8f\u5217\u4e0a\n\n\u5176\u6b21\u6211\u4eec\u53d1\u73b0\uff0c\u6bcf\u6b21\u5728\u5947\u6570\u5c42\u4e0a ```add val```, \u6bcf\u6b21\u5c31\u5728\u5076\u6570\u5c42\u4e0a ```add -val```\n\n\u6bcf\u6b21\u5728\u5076\u6570\u5c42\u4e0a ```add val```, \u6bcf\u6b21\u5c31\u5728\u5947\u6570\u5c42\u4e0a ```add -val```\n\n\u6211\u4eec\u53ea\u8981\u7ef4\u62a4\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e00\u68f5\u7ef4\u62a4\u5947\u6570\u5c42\uff0c\u4e00\u68f5\u7ef4\u62a4\u5076\u6570\u5c42\n\n\u5728\u5efa\u6811\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u8282\u70b9\u662f\u5947\u6570\u5c42\u8fd8\u662f\u5076\u6570\u5c42\u5373\u53ef\n\n\u6bcf\u6b21\u5728\u4fee\u6539\u7684\u65f6\u5019\uff0c\u4e0b\u4f20\u4e00\u4e0b\u4e00\u4e2a ```flag``` , \u4ee3\u8868\u5f53\u524d\u662f\u5947\u6570\u5c42 ```add val```\uff0c\u8fd8\u662f ```add -val```\n\n\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u53ea\u8981\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u8282\u70b9\u662f\u5947\u6570\u5c42\u8fd8\u662f\u5076\u6570\u5c42\uff0c\u786e\u8ba4\u8fd4\u56de\u54ea\u68f5\u7ebf\u6bb5\u6811\u7684\u503c\u5373\u53ef",
        "postTime": 1578209518,
        "uid": 53807,
        "name": "Erusel",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF383C \u3010Propagating tree\u3011"
    },
    {
        "content": "**\u6587\u7ae0\u603b\u657080\u796d+CF383C Propagating tree**        \n\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u68f5n\u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6709m\u4e2a\u64cd\u4f5c\uff0c\u4e00\u4e2a\u662f\u7ed9x\u7ed3\u70b9\u52a0\u4e0aval\uff0c\u5e76\u4e14\u7ed9x\u7684\u5b50\u8282\u70b9\u52a0\u4e0a-val\uff08\u8fd9\u91cc\u6709\u4f20\u9012\u6027\uff0c\u5b50\u8282\u70b9\u8fd8\u8981\u7ed9\u5176\u5b50\u8282\u70b9\u52a0\u4e0a-(-val)\uff09\u3002\u53e6\u4e00\u4e2a\u64cd\u4f5c\u662f\u67e5\u8be2\u67d0\u4e2a\u7ed3\u70b9\u7684\u503c\u3002      \n\u8fd8\u6709\uff0c\u6839\u662f1       \n????       \nDFS\u5e8f      \n\u628a\u6811\u62cd\u6241\u62cd\u6210\u4e00\u4e2a\u94fe     \n\u7136\u540e\u5728\u4e0a\u9762\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4      \n\u7ef4\u62a4\u5565\uff1f    \nLZT(Lazy Tag)      \n\u5565\uff1f\u6ca1\u9519\uff0c~~\u8fd9\u9898\u5c31\u662f\u8fd9\u4e48\u6c34~~\uff0c\u53ea\u7528\u7ef4\u62a4LZT\u5373\u53ef    \n\u5355\u70b9\u67e5\u8be2+\u533a\u95f4\u4fee\u6539\u3002     \n\u5355\u70b9\u67e5\u8be2so easy\uff0c\u4f46\u662f\u533a\u95f4\u4fee\u6539......     \n\u5b9a\u4e49\u4e24\u4e2aLZT\uff0cLZT1\u548cLZT2     \n\u8bb0\u5f55\u94fe\u4e0a\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u7684\u5947\u5076\u6027     \nLZT1[i]\u8868\u793a\u7b2ci\u4e2a\u72b6\u6001\u7684\u7ed9\u6df1\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u8981\u52a0\u7684\u503c     \nLZT2[i]\u4e5f\u540c\u7406    \n\u7136\u540e\u5c31\u597d\u5199\u4e86     \nstd:    \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=500005;\nint n,m;\nint col[N];\nint hed[N*2],tal[N*2],nxt[N*2],cnt=0;\nint k[N];\nint c[N];\nint ll[N];\nint rr[N];\nint opt=0;\nint t[N*10];\nint dis[N];\nint LZT1[N*10]={0};//LZT=0:\u4e0d\u52a0\u4e0d\u51cf LZT>0 \u52a0 LZT<0 \u51cf  \nint LZT2[N*10]={0};\nint sec[N*10]={0};//sec=0:\u5076\u6570\u5c42\u7684  sec=1\uff1a\u5947\u6570\u5c42\u7684 sec=2:\u5373\u6709\u5947\u6570\u5c42\u7684\u4e5f\u6709\u5076\u6570\u5c42\u7684\n//root=1\nvoid push_up(int num){\n    t[num]=t[num<<1]+t[num<<1|1];\n}\nvoid push_down(int l,int r,int num){\n    LZT1[num<<1]+=LZT1[num];\n    LZT1[num<<1|1]+=LZT1[num];\n    LZT1[num]=0;\n    LZT2[num<<1]+=LZT2[num];\n    LZT2[num<<1|1]+=LZT2[num];\n    LZT2[num]=0;\n}\nvoid addege(int x,int y){\n    cnt++;\n    tal[cnt]=y;\n    nxt[cnt]=hed[x];\n    hed[x]=cnt;\n}\nvoid dfs(int x,int father,int deep){\n    k[++opt]=x;\n    c[opt]=col[x];\n    ll[x]=opt;\n    dis[opt]=deep;\n    for(int i=hed[x];i;i=nxt[i]){\n        int v=tal[i];\n        if(v==father) continue;\n        dfs(v,x,deep+1);\n    }\n    k[++opt]=x;\n    c[opt]=col[x];\n    rr[x]=opt;\n    dis[opt]=deep;\n}\nvoid build(int l,int r,int num){\n    if(l==r){\n        LZT1[num]=0;\n        LZT2[num]=0;\n        t[num]=c[l];\n        sec[num]=dis[l]%2; \n        if(sec[num]==0) LZT2[num]=c[l];\n        else LZT1[num]=c[l];\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(l,mid,num<<1);\n    build(mid+1,r,num<<1|1);\n    t[num]=t[num<<1]+t[num<<1|1];\n    if(sec[num<<1]==sec[num<<1|1]) sec[num]=sec[num<<1];\n    else sec[num]=2;\n    LZT1[num]=0;\n    LZT2[num]=0;\n}\nvoid add(int l,int r,int num,int L,int R,int v,int u){\n    if(l>R||r<L) return;\n    if(l>=L&&r<=R){\n        if(u==1) LZT1[num]+=v,LZT2[num]-=v;\n        else LZT1[num]-=v,LZT2[num]+=v;\n        return;\n    }\n    int mid=(l+r)>>1;\n    push_down(l,r,num);\n    add(l,mid,num<<1,L,R,v,u);\n    add(mid+1,r,num<<1|1,L,R,v,u);\n} \nint ask(int l,int r,int num,int X){\n// printf(\"** (%d-%d):%d %d**\\n\",l,r,num,X);\n    if(l>X||r<X) return 0;\n    if(l==r&&r==X){\n    // for(int i=1;i<=50;i++) printf(\"%d %d **\\n\",LZT1[i],LZT2[i]);\n        if(dis[X]%2==0) return LZT2[num];\n        else return LZT1[num];\n    }\n    push_down(l,r,num);\n    int mid=(l+r)>>1;\n    if(mid>=X) return ask(l,mid,num<<1,X);\n    else return ask(mid+1,r,num<<1|1,X);\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&col[i]);\n    }\n    for(int i=1;i<n;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        addege(a,b);\n        addege(b,a);\n    } \n    dfs(1,0,1);\n    build(1,2*n,1);\n    for(int i=1;i<=m;i++){\n        int opt,a,b;\n        scanf(\"%d\",&opt);\n        if(opt==1){\n            scanf(\"%d%d\",&a,&b);\n            int L=ll[a],R=rr[a];\n            add(1,2*n,1,L,R,b,dis[L]%2);\n        }\n        else{\n            //for(int i=1;i<=50;i++) printf(\"%d %d\\n\",LZT1[i],LZT2[i]);\n            scanf(\"%d\",&a);\n            int X=ll[a];\n            printf(\"%d\\n\",ask(1,2*n,1,X));\n        }\n    }\n    return 0;\n}\n```  \n\n",
        "postTime": 1549097952,
        "uid": 61757,
        "name": "Seanq",
        "ccfLevel": 0,
        "title": "\u6587\u7ae0\u603b\u657080\u796d+CF383C Propagating tree"
    },
    {
        "content": "~~~\t\n   \u8fd9\u9053\u9898\u663e\u7136\u8981\u7528\u7ebf\u6bb5\u6811\u505a\u3002\n   \u9996\u5148\u7ebf\u6bb5\u6811\u53ea\u80fd\u5bf9\u4e00\u4e2a\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u4e00\u68f5\u6811\u662f\u65e0\u80fd\u4e3a\u529b\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6839\u636e\u8fd9\u68f5\u6811\u7684DFS\u5e8f\u5efa\u6811\u3002\u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\u662f\u5bf9\u6839\u4e3ax\u7684\u5b50\u6811\u8fdb\u884c\u4fee\u6539\uff0c\u5b83\u5728DFS\u5e8f\u4e2d\u7684\u4f4d\u7f6e\u53ef\u4ee5\u5728DFS\u65f6\u8bb0\u5f55\u4e0b\u6765\uff0c\u5de6\u7aef\u70b9\u7684\u4f4d\u7f6e\u5373x\u7684\u4f4d\u7f6e\uff0c\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\u7b49\u4e8e\u5b83\u6700\u9760\u53f3\u7684\u5b50\u6811\u7684\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\uff0c\u56de\u6eaf\u5373\u53ef\u3002\n   \u6ce8\u610f\u5230\uff0c\u8981\u662f\u4e00\u4e2a\u8282\u70b9\u4e0ex\u7684\u6df1\u5ea6\u6a212\u540c\u4f59\uff0c\u4fee\u6539\u8fd9\u4e2a\u8282\u70b9\u65f6\u8981\u52a0\u4e0aval\uff0c\u5426\u5219\u8981\u51cf\u53bbval\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u6bb5\u533a\u95f4\u5185\u7684[\u6df1\u5ea6\u6a212\u4f591-\u6df1\u5ea6\u6a212\u4f590]\u7684\u8282\u70b9\u4e2a\u6570\u3002\u8fd9\u6837\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u4fee\u6539\uff0c\u4e00\u4e2a\u533a\u95f4\u7684\u6539\u53d8\u91cf\u5c31\u662f[\u6df1\u5ea6\u6a212\u4f591-\u6df1\u5ea6\u6a212\u4f590]\u7684\u8282\u70b9\u4e2a\u6570\u00d7val(\u5982\u679cx\u7684\u6df1\u5ea6\u6a212\u4f590\uff0c\u5e94\u662f[\u6df1\u5ea6\u6a212\u4f590-\u6df1\u5ea6\u6a212\u4f591]\u7684\u8282\u70b9\u4e2a\u6570\u00d7val\uff0c\u8fd9\u65f6\u5c06val\u53d6\u76f8\u53cd\u6570\u5373\u53ef)\u3002\n~~~\n~~~\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#define S 200005\n#define LL long long\nusing namespace std;\nstruct node{\n    LL l,r,mid,v1,cnt,det;\n}tree[4*S+5];\nLL n,m,typ,x,y,u,v,val,f,len,ans,b[S+5],k[S+5],p[S+5],d[S+5],o[S+5];\nvector<LL> adj[S];\ninline void dfs(int cur)\n{\n    if(cur==1){\n        d[cur]=1;//\u8282\u70b91\u6df1\u5ea6\u4e3a1\n    }\n    b[cur]=++len;//\u8282\u70b9cur\u5728d\u6570\u7ec4\u4e2d\u4e0b\u6807\u4e3alen\n    if(!adj[cur].size()){\n        p[cur]=cur;//\u4ee5cur\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811(\u53f6\u5b50\u8282\u70b9)\u5728d\u6570\u7ec4\u4e2d\u53f3\u7aef\u70b9\u5373cur\n        return;\n    }\n    for(int i=0;i<adj[cur].size();i++)\n    {\n        d[adj[cur][i]]=d[cur]+1;//\u8282\u70b9cur\u7684\u5b50\u8282\u70b9\u6df1\u5ea6\u7b49\u4e8e\u8282\u70b9cur\u7684\u6df1\u5ea6+1\n        dfs(adj[cur][i]);\n    }\n    p[cur]=p[adj[cur][adj[cur].size()-1]];//\u4ee5cur\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5728d\u6570\u7ec4\u4e2d\u53f3\u7aef\u70b9\u7b49\u4e8e\u5b83\u7684\u6700\u53f3\u5b50\u6811\u5728\u7684\u6570\u7ec4\u4e2d\u7684\u53f3\u7aef\u70b9\n}\ninline void build_segtree(LL left,LL right,LL pos)\n{\n    tree[pos].l=left;\n    tree[pos].r=right;\n    tree[pos].mid=(left+right)/2;\n    if(tree[pos].l==tree[pos].r){\n        if(d[o[tree[pos].l]]%2){\n            tree[pos].cnt=1;//\u5982\u679c\u6df1\u5ea6\u6a212\u4f591\u5219\u52a01\n        }\n        else{\n            tree[pos].cnt=-1;//\u5982\u679c\u6df1\u5ea6\u6a212\u4f590\u5219\u51cf1\n        }\n        return;\n    }\n    build_segtree(tree[pos].l,tree[pos].mid,pos*2);\n    build_segtree(tree[pos].mid+1,tree[pos].r,pos*2+1);\n    tree[pos].cnt=tree[pos*2].cnt+tree[pos*2+1].cnt;//\u56de\u6eaf\n}\ninline void push_down(LL pos)\n{\n\t\n    tree[pos*2].v1+=tree[pos].det*tree[pos*2].cnt;\n    tree[pos*2+1].v1+=tree[pos].det*tree[pos*2+1].cnt;//\u52a0\u4e0adet*[\u6df1\u5ea6\u6a212\u4f591-\u6df1\u5ea6\u6a212\u4f590]\u7684\u8282\u70b9\u4e2a\u6570\n    tree[pos*2].det+=tree[pos].det;\n    tree[pos*2+1].det+=tree[pos].det;//\u52a0\u4e0adet\n    tree[pos].det=0;//\u6e05\u96f6\n}\ninline void ask_section(LL pos)\n{\n    if(x<=tree[pos].l&&tree[pos].r<=y){\n        ans=tree[pos].v1;\n        return;\n    }\n    if(tree[pos].det){\n        push_down(pos);//\u4e0b\u53d1\u61d2\u6807\u8bb0\n    }\n    if(x<=tree[pos].mid){\n        ask_section(pos*2);\n    }\n    if(tree[pos].mid+1<=y){\n        ask_section(pos*2+1);\n    }\n}\ninline void add_section(LL pos)\n{\n    if(x<=tree[pos].l&&tree[pos].r<=y){\n        tree[pos].v1+=val*tree[pos].cnt;//\u52a0\u4e0aval*[\u6df1\u5ea6\u6a212\u4f591-\u6df1\u5ea6\u6a212\u4f590]\u7684\u8282\u70b9\u4e2a\u6570\n        tree[pos].det+=val;\n        return;\n    }\n    if(tree[pos].det){\n        push_down(pos);//\u4e0b\u53d1\u61d2\u6807\u8bb0\n    }\n    if(x<=tree[pos].mid){\n        add_section(pos*2);\n    }\n    if(tree[pos].mid+1<=y){\n        add_section(pos*2+1);\n    }\n    tree[pos].v1=tree[pos*2].v1+tree[pos*2+1].v1;//\u56de\u6eaf\n}\nint main(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%lld\",&k[i]);//\u8f93\u5165\u8282\u70b9\u521d\u503c\n    }\n    for(int i=1;i<=n-1;i++)\n    {\n        scanf(\"%lld%lld\",&u,&v);\n        adj[u].push_back(v);//\u8fde\u8fb9\n    }\n    dfs(1);//DFS\u5f97\u5230\u6bcf\u68f5\u5b50\u6811\u5728d\u6570\u7ec4\u4e2d\u7684\u5de6\uff0c\u53f3\u7aef\u70b9\u4f4d\u7f6e\n\tfor(int i=1;i<=n;i++)\n    {\n        o[b[i]]=i;//\u5c06d\u6570\u7ec4\u4e2d\u4e0b\u6807\u4e0e\u8282\u70b9\u7f16\u53f7\u5bf9\u5e94 \n    }\n    build_segtree(1,n,1);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%lld%lld\",&typ,&f);\n        if(typ==1){\n            x=b[f];//\u4ee5f\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u5de6\u7aef\u70b9\u4f4d\u7f6e\n            y=b[p[f]];//\u4ee5f\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u53f3\u7aef\u70b9\u4f4d\u7f6e\n            scanf(\"%lld\",&val);\n            val*=(d[f]%2*2-1);//\u5224\u65ad\u6839\u8282\u70b9\u6df1\u5ea6\u6a212\u7ed3\u679c\uff0c\u6539\u53d8val\u6b63\u8d1f\n            add_section(1);//\u4fee\u6539\u5b50\u6811\n        }\n        else{\n            ans=0;\n            x=b[f];//\u8282\u70b9f\u7684\u5de6\u7aef\u70b9\u4f4d\u7f6e\n            y=b[f];//\u8282\u70b9f\u7684\u53f3\u7aef\u70b9\u4f4d\u7f6e\n            ask_section(1);//\u533a\u95f4\u67e5\u8be2\u548c(\u61d2\u5f97\u5199\u5355\u70b9\u67e5\u8be2)\n            ans+=k[f];//ans\u52a0\u4e0a\u8be5\u8282\u70b9\u521d\u503c\n            printf(\"%lld\\n\",ans);//\u8f93\u51fa\n        }\n    }\n    return 0;\n}\n~~~",
        "postTime": 1543058253,
        "uid": 54633,
        "name": "Allons\u2014y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF383C \u3010Propagating tree\u3011"
    }
]