[
    {
        "content": "\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53u\u5230v\u7684\u8fb9\u5b58\u5728\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u76f4\u53cd \u590d \u6a2a \u8df3\uff0c\u90a3\u4e48\u5947\u5076\u6027\u662f\u4e0d\u4f1a\u6539\u53d8\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u5947\u70b9\u548c\u5076\u70b9\uff0c\u8fb9\u4e5f\u62c6\u6210\u5de6\u53f3\u7aef\u70b9\u5947\u5076\u6027\u76f8\u540c\u7684\u4e24\u6761\u8fb9\u3002\n\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u5982\u4f55\u5904\u7406\u8fb9\u4f1a\u6d88\u5931\u8fd9\u4e2a\u95ee\u9898\u3002\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49$f_{x,0/1}$\u4e3a\u80fd\u591f\u5230\u8fbe$x$\u70b9\u7684\u6700\u665a\u65f6\u95f4\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u4fdd\u8bc1\u4e00\u6761\u8fb9\u51fa\u73b0\u7684\u65f6\u95f4\u6bd4$f_{x,0/1}$\u65e9\u5373\u53ef\u3002\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u4fdd\u8bc1\u5728\u8fd9\u6761\u8fb9\u51fa\u73b0\u7684\u65f6\u5019\u6211\u4eec\u80fd\u8d70\u8fd9\u6761\u8fb9\u5462\uff1f\u53ef\u4ee5\u76f4\u63a5\u6309\u7167\u51fa\u73b0\u7684\u65f6\u95f4\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u6837$f_{x,0/1}$\u80af\u5b9a\u662f\u7531\u51fa\u73b0\u65f6\u95f4\u6bd4\u5f53\u524d\u8fb9\u5c0f\u7684\u8fb9\u62d3\u5c55\u5f97\u5230\u7684\uff0c\u4e5f\u5c31\u662f\u5f53\u8fd9\u6761\u8fb9\u51fa\u73b0\u65f6\uff0c\u80af\u5b9a\u662f\u53ef\u4ee5\u8d70\u7684\u3002\n\n\u800c\u5bf9\u4e8e\u5f53\u524d\u8fd8\u4e0d\u80fd\u8d70\u8fb9\uff08\u5373$f_{x,0/1}<l$\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u6761\u8fb9\u6302\u4e0a\u5728\u8fd9\u4e2a\u70b9\u4e0a\uff0c\u76f4\u5230$f_{x,0/1}\\ge l$\u540e\u518d\u628a\u5b83\u52a0\u5230\u8fb9\u96c6\u4e2d\u3002\u8fd9\u6837\u6211\u4eec\u53d1\u73b0\u4e00\u6761\u8fb9\u6700\u591a\u88ab\u52a0\u51652\u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n\\log n)$\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528```set```,\u5e38\u6570\u662f```priority_queue```\u7684\u4e09\u500d\u4ee5\u4e0a\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define MN 1000005\n#define LL long long\n#define mp make_pair\n#define fir first\n#define sec second\n#define pii pair<int,int>\ninline bool chkmax(int &a,int b){if(a<b)return a=b,1;return 0;}\ninline void chkmin(int &a,int b){if(a>b)a=b;}\ninline int read(){\n\t   int a=0,fh=1;char c=getchar();\n\t   while(c>'9'||c<'0'){if(c=='-')fh=-1;c=getchar();}\n\t   while('0'<=c&&c<='9'){\n\t\t   a=a*10+c-48;\n\t\t   c=getchar();\n\t   }\n\t   return a*fh;\n}\nstruct data{\n\tint u,v,l,r,t;\n\tdata(int U=0,int V=0,int L=0,int R=0,int T=0){\n\t\tu=U;v=V;l=L;r=R;t=T;\n\t}\t\n\tbool friend operator<(data a,data b){\n\t\treturn a.l>b.l;\n\t}\n};\npriority_queue<data>EDG;\nvector<data>edge[MN][2];\nint n,m,f[MN][2];\nvoid solve(int u,int v,int l,int r){\n\tbool op=l&1;\n\tif(f[u][op]>=l){\n\t\tif(v==n){printf(\"%d\\n\",l+1);exit(0);}\n\t\tif(chkmax(f[v][!op],r+1)){\n\t\t\tfor(int i=0;i<edge[v][!op].size();++i){\n\t\t\t\tdata tmp=edge[v][!op][i];\n\t\t\t\tEDG.push(data(tmp.u,tmp.v,l+1,tmp.r));\n\t\t\t}\n\t\t\tedge[v][!op].clear();\n\t\t}\n\t}\n\telse edge[u][op].push_back(data(u,v,l,r));\n}\nint main(){\n\tn=read();m=read();\n\tif(n==1){puts(\"0\");return 0;}\n\tfor(int i=1;i<=m;++i){\n\t\tint u=read(),v=read(),l=read(),r=read()-1;\n\t\tint op=(r-l)&1;\n\t\tEDG.push(data(u,v,l,r-op,1));\n\t\tEDG.push(data(u,v,l+1,r-(!op),1));\n\t}\n\tmemset(f,-0x3f,sizeof(f));f[1][0]=0;\n\twhile(!EDG.empty()){\n\t\tdata w=EDG.top();EDG.pop();\n\t\tif(w.l>w.r)continue;\n\t\tsolve(w.u,w.v,w.l,w.r);\n\t\tif(w.t==1)solve(w.v,w.u,w.l,w.r);\n\t}\n\tputs(\"-1\");\n\treturn 0;\n}\n\n\n```",
        "postTime": 1584415290,
        "uid": 7480,
        "name": "skydogli",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF827F \u3010Dirty Arkady's Kitchen\u3011"
    },
    {
        "content": "\u8003\u8651\u5982\u4f55\u5904\u7406\u4e0d\u80fd\u505c\u7559\u7684\u9650\u5236\u3002\u56e0\u4e3a\u4e0d\u80fd\u505c\u7559\uff0c\u6240\u4ee5\u8981\u4e48\u5728\u4e00\u6761\u8fb9\u4e0a\u6765\u56de\u8f6c\uff0c\u8981\u4e48\u6da6\u53bb\u5176\u4ed6\u8fb9\u3002\n\n\u8fd9\u65f6\u53d1\u73b0\u4e0d\u597d\u7ef4\u62a4\u6bcf\u4e2a\u70b9\uff0c\u4f46\u662f\u6bcf\u6761\u8fb9\u662f\u53ef\u4ee5\u7ef4\u62a4\u7684\uff0c\u53ea\u9700\u8981\u5206\u5947\u5076\u6027\u8bb0\u5f55\u7b2c\u4e00\u6b21\u5230\u8fbe\u7684\u65f6\u95f4\u5373\u53ef\uff0c\u5269\u4e0b\u5947\u5076\u6027\u76f8\u540c\u7684\u65f6\u95f4\u90fd\u80fd\u5230\u8fbe\u3002\u5e76\u4e14\u6bcf\u6761\u8fb9\u80fd\u5230\u8fbe\u7684\u65f6\u95f4\u70b9\u5e76\u5728\u4e00\u8d77\u6b63\u597d\u5c31\u662f\u8be5\u70b9\u80fd\u591f\u88ab\u5230\u8fbe\u7684\u65f6\u95f4\u70b9\uff0c\u56e0\u800c\u4e0d\u4f1a\u6f0f\u6389\u4ec0\u4e48\u60c5\u51b5\u3002\n\n\u8003\u8651\u8f6c\u79fb\uff0c\u5c1d\u8bd5\u6a21\u4eff dij \uff0c\u6309\u7b2c\u4e00\u6b21\u80fd\u8d70\u7684\u65f6\u95f4\u4f18\u5148\u961f\u5217\uff0c\u7136\u540e\u6bcf\u6761\u8fb9\u53bb\u66f4\u65b0\u76ee\u6807\u70b9\u540e\u9762\u7684\u8fb9\u3002\n\n\u56e0\u6b64\u5c06\u70b9\u62c6\u6210\u5947\u5076\u4e24\u4e2a\u70b9\uff0c\u6bcf\u6761\u8fb9\u5206\u522b\u4ece\u5947\u5230\u5076\u3001\u5076\u5230\u5947\u8fde\u4e24\u6761\u5355\u5411\u8fb9\uff0c\u5171\u56db\u6761\u8fb9\u3002\u6bcf\u4e2a\u70b9\u628a\u8fb9\u6309\u8d77\u59cb\u65f6\u95f4\u6392\u5e8f\uff0c\u52a0\u5165\u4e00\u4e2a\u8fb9\u5c31\u5c06\u6240\u6709\u8d77\u59cb\u65f6\u95f4\u5c0f\u4e8e\u5b83\u7ed3\u675f\u65f6\u95f4\u7684\u8fb9\u90fd\u6254\u5230\u961f\u5217\u91cc\u3002\u663e\u7136\u4e4b\u540e\u7684\u8fb9\u4e0d\u4f1a\u8ba9\u8fd9\u4e9b\u8fb9\u7684\u5f00\u59cb\u65f6\u95f4\u66f4\u4f18\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u5217\u8868\u4e2d\u76f4\u63a5\u5220\u9664\u5df2\u7ecf\u52a0\u5165\u8fc7\u7684\u8fb9\u3002\n\n\u56e0\u4e3a\u4e00\u6761\u8fb9\u4e0d\u4f1a\u88ab\u66f4\u65b0\u4e24\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e5f\u662f\u5bf9\u7684\u3002\u4f18\u5148\u961f\u5217\uff0c\u590d\u6742\u5ea6\u4e3a $O(m\\log m)$\n\nCode\uff1a\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#include<queue>\nusing namespace std;\nstruct node{\n\tint s,l,r;\n\tbool operator<(const node&y)const{\n\t\treturn l>y.l;\n\t}\n};\nint n,m;\nvector<node>::iterator head[1000001];//\nvector<node>a[1000001];\nbool cmp(node x,node y){return x.l<y.l;}\nvoid add(int x,int y,int l,int r)\n{\n\tif(l<=r)a[x].emplace_back((node){y,l,r});\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,x,y,l,r;i<=m;++i)\n\t{\n\t\tscanf(\"%d%d%d%d\",&x,&y,&l,&r);--r;\n\t\tadd(x,y+n,l+(l&1),r-(r&1));\n\t\tadd(x+n,y,l+!(l&1),r-!(r&1));\n\t\tadd(y+n,x,l+!(l&1),r-!(r&1));\n\t\tadd(y,x+n,l+(l&1),r-(r&1));//start time//\n\t}\n\tfor(int i=1;i<=n+n;++i)//\n\t{\n\t\tsort(a[i].begin(),a[i].end(),cmp);\n\t\thead[i]=a[i].begin();\n\t}\n\tpriority_queue<node>q;//\n\tq.push((node){1,0,0});//end time\n\twhile(!q.empty())\n\t{\n\t\tnode x=q.top();q.pop();\n\t\tif(x.s==n||x.s==n+n){printf(\"%d\",x.l);return 0;}\n\t\twhile(head[x.s]!=a[x.s].end()&&head[x.s]->l<=x.r)\n\t\t{\n\t\t\tnode p=*head[x.s];\n\t\t\tif(p.r>=x.l)\n\t\t\t{\n\t\t\t\tif(x.l>p.l)p.l=x.l;\n\t\t\t\t++p.l;++p.r;\n\t\t\t\tq.push(p);\n\t\t\t}\n\t\t\t++head[x.s];\n\t\t}\n\t}\n\tputs(\"-1\");\n}\n```\n",
        "postTime": 1647870472,
        "uid": 146070,
        "name": "Pekemetier",
        "ccfLevel": 8,
        "title": "CF827F Dirty Arkady's Kitchen \u9898\u89e3"
    },
    {
        "content": "\u4ee5\u4e0b\u4e3a\u5199\u5b8c\u9898\u540e\u7684\u4e00\u4e9b\u60f3\u6cd5\u3002\uff08\u8be5\u9898\u60f3\u6cd5\u601d\u8def\u4e0e\u4ee3\u7801\u5b9e\u8df5\u6709\u501f\u9274\u4e8e\u7f51\u7edc\u9898\u89e3\uff09\n\n## Part 0\uff1a\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\u7ed9\u5b9a\u4e00\u5f20\u6709 $n$ \u4e2a\u70b9\u548c $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u7ed9\u5b9a\u7684\u65f6\u95f4\u533a\u95f4\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9\u4f1a\u7ed9\u51fa\u6b64\u533a\u95f4\u7684\u4e24\u7aef\u70b9 $l_i$ \u548c $r_i$ \uff0c\u4ee3\u8868\u7740\u5bf9\u4e8e\u7b2c $i$ \u6761\u8fb9\uff0c\u53ea\u6709\u5728 $[l_i,r_i)$ \u7684\u65f6\u95f4\u5185\u624d\u80fd\u591f\u901a\u8fc7\u3002\u901a\u8fc7\u6bcf\u6761\u8fb9\u9700\u8981 $1$ \u7684\u65f6\u95f4\u3002\u4f60\u5728\u6bcf\u4e00\u4e2a\u65f6\u523b\u90fd **\u5fc5\u987b\u79fb\u52a8** \u3002\n\n## Part 1\uff1a\n\n\u601d\u8def\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u65e0\u975e\u6709\u4e24\u79cd\u72b6\u6001\uff1a\u53ef\u8fc7\u548c\u4e0d\u53ef\u8fc7\u3002\u5bf9\u4e8e\u4e00\u6761\u201c\u4e0d\u53ef\u8fc7\u201d\u7684\u8fb9\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u5904\u7406\u624d\u80fd\u628a\u5b83\u53d8\u6210\u4e00\u6761\u201c\u53ef\u8fc7\u201d\u7684\u8fb9\uff0c\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\u5982\u679c\u6211\u4eec\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u5c31\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u7b80\u5355\u7684\u6700\u77ed\u8def\u95ee\u9898\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u201c\u65a1\u65cb\u201d\u7684\u4e00\u79cd\u65b9\u6848\uff0c\u5728\u4e00\u6761\u8fb9\u4e0d\u53ef\u8fc7\u7684\u65f6\u5019\uff0c\u5728\u5f53\u524d\u8282\u70b9\u4e0a\u9009\u4e00\u6761\u201c\u53ef\u8fc7\u201d\u7684\u8fb9\u201c\u53cd\u590d\u6a2a\u8df3\u201d\u4e00\u6b21\uff0c\u56de\u5230\u539f\u8282\u70b9\u540e\u518d\u6b21\u5224\u5b9a\u53ef\u8fc7\u4e0e\u5426\u3002\n\n## Part 2\uff1a\n\n\u7136\u800c\u8fd9\u4e5f\u5e26\u6765\u4e86\u51e0\u4e2a\u95ee\u9898\u3002\n\n\u9996\u5148\uff0c\u5982\u679c\u53cd\u590d\u6a2a\u8df3\u65f6\uff0c\u7528\u4f5c\u5de5\u5177\u7684\u90a3\u6761\u8fb9\u7a81\u7136\u4e0d\u53ef\u7528\u4e86\u600e\u4e48\u529e\uff1f\n\n\u5176\u6b21\uff0c\u5982\u679c\u4f60\u5728\u5230\u8fbe\u4e00\u4e2a\u70b9\u540e\u9677\u5165\u7edd\u5883\uff08\u5373\u65e0\u8fb9\u53ef\u7528\uff09\u4e86\u600e\u4e48\u529e\uff1f\uff08\u56e0\u4e3a\u4f60\u4e0d\u80fd\u505c\u6ede\u4e0d\u52a8\uff09\n\n\u518d\u8005\uff0c\u8003\u8651\u4e00\u79cd\u6781\u7aef\u7684\u60c5\u51b5\u3002\u5bf9\u4e8e\u4f60\u60f3\u8981\u4f7f\u7528\u7684\u90a3\u4e00\u6761\u8fb9\uff0c\u53ea\u80fd\u5728\u4e00\u4e2a\u201c\u6070\u597d\u7684\u65f6\u523b\u201d\u4f7f\u7528\u3002\u5373\u4e0d\u201c\u65a1\u65cb\u201d\u5c31\u672a\u5230\u53ef\u4f7f\u7528\u7684\u65f6\u95f4\uff0c\u65a1\u65cb\u4e86\u5374\u53c8\u8fc7\u4e86\u53ef\u4ee5\u4f7f\u7528\u7684\u65f6\u95f4\u3002\u600e\u4e48\u529e\uff1f \n\n## Part 3\uff1a\n\n\u5bf9\u70b9\u8003\u8651\uff0c\u4f7f\u7528\u5947\u5076\u6027\u6765\u89e3\u51b3\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u9017\u7559\u5230\u4ec0\u4e48\u65f6\u5019\uff1f\n\n\u7531\u4e8e\u65f6\u95f4\u533a\u95f4\u4e3a $[l_i,r_i)$ \uff0c\u6240\u4ee5\u6211\u4eec\u8f6c\u5316\u4e00\u4e0b\uff0c\u76f4\u63a5\u89c6\u4f5c $[l_i,r_i-1]$ \u5373\u53ef\u3002 \n\n\u90a3\u4e48\u7531\u4e8e\u4e00\u6b21\u201c\u65a1\u65cb\u201d\u64cd\u4f5c\u6240\u9700\u7684\u65f6\u95f4\u662f $2$ \u521a\u597d\u4e0d\u4f1a\u6539\u53d8\u65f6\u95f4\u7684\u5947\u5076\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5c06\u8fb9\u548c\u70b9\u90fd\u62c6\u5206\uff0c\u5c06\u4e00\u4e2a\u539f\u672c\u7684\u70b9\u5206\u6210\u201c\u5947\u70b9\u201d\u548c\u201c\u5076\u70b9\u201d\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4   `Stay[Point][Odevity]` \u6765\u5b58\u50a8\u8868\u793a\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u5728\u5947\u5076\u6027\u4e3a `Odevity` \u65f6\u5728\u6b64\u70b9\u6240\u80fd\u9017\u7559\u5230\u7684\u6700\u665a\u65f6\u95f4\u3002\n\n\u5982\u679c\u80fd\u505a\u5230\u7ef4\u62a4 `Stay` \u6570\u7ec4\uff0c\u8fd9\u5176\u5b9e\u5c31\u89e3\u51b3\u4e86\u4e0a\u8ff0\u4e2d\u7684\u95ee\u9898\u4e8c\uff08\u8fd9\u6837\u4f60\u5c31\u4e0d\u4f1a\u9677\u5165\u7edd\u5883\u4e86\uff09\n\n\u90a3\u4e48\u6309\u7167\u8fd9\u6837\u6765\u5904\u7406\uff0c\u8fd8\u6709\u4ec0\u4e48\u597d\u5904\uff1f\n\n\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u6570\u5b83\u4e0d\u662f\u5076\u6570\u5c31\u662f\u5947\u6570 ~~\uff08\u5e9f\u8bdd\uff09~~ \uff0c\u90a3\u4e48\u901a\u8fc7\u5bf9\u4e00\u4e2a\u70b9\u5b58\u50a8\u8fd9\u4e24\u79cd\u6027\u8d28\u7684\u201c\u53ef\u8fbe\u65f6\u95f4\u201d\u517c\u201c\u6700\u665a\u9017\u7559\u65f6\u95f4\u201d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4ee5\u6b64\u4e3a\u6807\u51c6\u5bf9\u8fb9\u8fdb\u884c\u5206\u7c7b\u3002\u201c\u53ef\u901a\u8fb9\u201d\u4e0e\u201c\u4e0d\u53ef\u901a\u8fb9\u201d\u3002\n\n\u6613\u53d1\u73b0\u7684\uff0c\u53ea\u8981\u6211\u7684\u505c\u7559\u65f6\u95f4\u5927\u4e8e\u4f60\u7684\u51fa\u73b0\u65f6\u95f4\uff0c\u4f60\u5c31\u662f\u4e00\u6761\u201c\u53ef\u7528\u8fb9\u201d\u3002\n\n## Part 4\uff1a\n\n\u5bf9\u8fb9\u8003\u8651\u3002\n\n\u5728\u521a\u624d\u5bf9\u4e8e\u70b9\u7684\u62c6\u5206\u4e2d\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u53ef\u4ee5\u505c\u7559\u7684\u6700\u665a\u65f6\u95f4\u5927\u4e8e\u7b49\u4e8e\u4e00\u6761\u8fb9\u7684\u51fa\u73b0\u65f6\u95f4\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u6761\u53ef\u7528\u8fb9\u3002\u53cd\u4e4b\u5219\u4e3a\u201c\u4e0d\u53ef\u7528\u8fb9\u201d\u3002\n\n## Part 5\uff1a\n\n\u201c\u6302\u56de\u201d\uff1a\n\n\u5982\u679c\u4e00\u6761\u8fb9\u201c\u53ef\u7528\u201d\uff0c\u90a3\u4e48\u66f4\u65b0\u7ec8\u70b9\u7684\u6570\u636e\uff0c\u5982\u679c\u4e0d\u53ef\u7528\uff0c\u8003\u8651\u201c\u6302\u56de\u201d\u64cd\u4f5c\u3002\n\n\u5b57\u9762\u610f\u601d\uff0c\u5c06\u8fd9\u6761\u8fb9\u6302\u56de\u5728\u5b83\u7684\u8d77\u70b9\u4e0a\uff0c\u5f53\u8be5\u70b9\u518d\u6b21\u88ab\u8bbf\u95ee\uff08\u8fd9\u79cd\u60c5\u51b5\u662f\u6709\u53ef\u80fd\u51fa\u73b0\u7684\uff01\u201c\u65a1\u65cb\u201d\u6216\u662f\u901a\u8fc7\u8d70\u4e00\u6761\u73af\u6765\u6539\u53d8\u65f6\u95f4\u65f6\u5c31\u4f1a\u53d1\u751f\uff09\u65f6\u518d\u4f7f\u7528\u3002\n\n\u4f46\u662f\u7531\u4e8e\u662f\u65e0\u5411\u8fb9\uff0c\u5b83\u7684\u7ec8\u70b9\u540c\u65f6\u4e5f\u53ef\u80fd\u662f\u5b83\u7684\u8d77\u70b9\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u5c06\u4e00\u6761\u65e0\u5411\u8fb9\u62c6\u5206\u6210\u4e24\u6761\u6709\u5411\u8fb9\uff08\u7136\u800c\u5bf9\u4e8e\u4e00\u6761\u65e0\u5411\u8fb9\u6211\u4eec\u8fd8\u8981\u5c06\u5176\u5206\u89e3\u4e3a\u201c\u5947\u8fb9\u201d\u4e0e\u201c\u5076\u8fb9\u201d\uff09\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u7684\u56de\u6302\u3002\n\n\u201c\u6269\u5c55\u201d\uff1a\n\n\u7531\u4e8e\u4f7f\u7528\u4e86\u5c0f\u6839\u5806\u8fdb\u884c\u7ef4\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u80af\u5b9a\u5f53\u4e00\u6761\u8fb9\u51fa\u73b0\u65f6\uff0c\u5b83\u53ef\u4ee5\u88ab\u4f7f\u7528\u3002\u4e14\u6240\u6709\u5728\u67d0\u6761\u8fb9\u540e\u5bf9\u67d0\u70b9\u8fdb\u884c\u66f4\u65b0\u65f6\u4e00\u5b9a\u4e0d\u4f1a\u4f7f\u5f00\u59cb\u65f6\u95f4\u66f4\u4f18\u3002\n\n\u5f53\u4e00\u6761\u8fb9\u7528\u81ea\u5df1\u7684\u6d88\u5931\u65f6\u95f4\uff08\u65e0\u8bba\u5947\u5076\uff09\u66f4\u65b0\u4e86\u4e00\u4e2a\u70b9\u7684\u9017\u7559\u65f6\u95f4\uff08\u65e0\u8bba\u5947\u5076\uff0c\u4f46\u662f\u8981\u4e0e\u5bf9\u5e94\u8fb9\u5947\u5076\u6027\u5bf9\u5e94\uff09\u540e\uff0c\u5bf9\u8be5\u70b9\u8fdb\u884c\u6269\u5c55\uff0c\u5373\u4e3a\u52a0\u5165\u6240\u6709\u53ef\u52a0\u5165\u7684\u8fb9\u3002\u5c06\u6240\u6709\u6ee1\u8db3\u6269\u5c55\u6761\u4ef6\uff08\u51fa\u73b0\u65f6\u95f4\u5c0f\u4e8e\u67d0\u70b9\u505c\u7559\u65f6\u95f4\uff09\u7684\u8fb9\u653e\u5165\u5c0f\u6839\u5806\u91cc\u8fdb\u884c\u7ef4\u62a4\u3002\n\n## Part 6\uff1a\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a $O(m\\ \\log\\ m)$\n\n\u7531\u4e8e\u6bcf\u4e2a\u8fb9\u6700\u591a\u4f1a\u88ab\u52a0\u4e24\u6b21\uff08\u5947\u5076\u4e24\u70b9\u5404\u4e00\u6b21\uff09\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u5c31\u662f\u8fd9\u6837\u3002\uff08\u4e5f\u8bb8\u8fd8\u56e0\u4e3a\u4e00\u6761\u65e0\u5411\u8fb9\u8981\u88ab\u6269\u6210\u56db\u6761\uff1f\uff09\n\n## Part 7\uff1a\n\n### Code:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 500001\nint Lated_time[maxn][2],cnt=0;\nint head[maxn][2];\nint n,m;\nstruct edge{\n\tint u,v,begin,end,nxt;\n\tfriend bool operator < (const edge &a,const edge &b){\n\t\treturn a.begin>b.begin;\n\t}\n}f[maxn<<2],tmp;\npriority_queue <edge> Q;\ninline void Extend_this_point(int point,int ctd_time,int end){//\u5bf9\u8be5\u70b9\u7684\u6269\u5c55\n\tLated_time[point][ctd_time&1]=max(Lated_time[point][ctd_time&1],end);\n\tfor(int i=head[point][ctd_time&1];i;i=f[i].nxt){\n\t\ttmp=f[i];tmp.begin=ctd_time;\n\t\tQ.push(tmp);\n\t}\n\thead[point][ctd_time&1]=0;\n}\ninline void Hang_back(int u,int v,int begin,int end){\n\t//\u5176\u5b9e\u5c31\u662fadd_edge\uff0c\u52a0\u8fb9\n\tf[++cnt].u=u;f[cnt].v=v;\n\tf[cnt].begin=begin;f[cnt].end=end;\n\tf[cnt].nxt=head[u][begin&1];\n\thead[u][begin&1]=cnt;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tif(n==1) return puts(\"0\"),0;\n\tfor(int i=1,a,b,l,r;i<=m;i++){\n\t\tscanf(\"%d%d%d%d\",&a,&b,&l,&r);r-=1;\n\t\ttmp.u=a,tmp.v=b;\n\t\ttmp.begin=l,tmp.end=r-((r^l)&1);Q.push(tmp);//u->v \u539f\u672c\u5947\u5076\u6027\n\t\ttmp.begin++;tmp.end=r-((r^l^1)&1);Q.push(tmp);//u->v \u6539\u53d8\u5947\u5076\u6027\n\t\tswap(tmp.u,tmp.v);//\u5f00\u59cb\u5efa\u53e6\u4e00\u6761\u6709\u5411\u8fb9\n\t\ttmp.begin=l,tmp.end=r-((r^l)&1);Q.push(tmp);//v->u \u539f\u672c\u5947\u5076\u6027\n\t\ttmp.begin++;tmp.end=r-((r^l^1)&1);Q.push(tmp);//v->u \u6539\u53d8\u5947\u5076\u6027\n\t}\n\tmemset(Lated_time,225,sizeof(Lated_time));//\u5176\u4ed6\u70b9\u521d\u59cb\u5316\u65e0\u9650\u5927\n\tLated_time[1][0]=0;//\u8d77\u70b9\u521d\u59cb\u7684\u6700\u665a\u65f6\u95f4\u662f0\n\twhile(Q.size()){\n\t\ttmp=Q.top();Q.pop();\n\t\tif(tmp.begin>tmp.end) continue ;//\u65e0\u6cd5\u4f7f\u7528\n\t\tif(Lated_time[tmp.u][tmp.begin&1]>=tmp.begin){\n\t\t\tif(tmp.v==n) return printf(\"%d\\n\",tmp.begin+1),0;//\u7ec8\u70b9\n\t\t\tExtend_this_point(tmp.v,tmp.begin+1,tmp.end+1);//\u6269\u5c55\u6b64\u70b9\uff0c\u65f6\u95f4\u52a0\u4e00\n\t\t}\n\t\telse Hang_back(tmp.u,tmp.v,tmp.begin,tmp.end);//\u56de\u6302\n\t}\n\tputs(\"-1\");\n\treturn 0;\n}\n```\n\nEnd",
        "postTime": 1664103678,
        "uid": 469310,
        "name": "Rosemary_dream",
        "ccfLevel": 5,
        "title": "CF827F Dirty Arkady's Kitchen"
    },
    {
        "content": "[\u6211\u7684\u535a\u5ba2](https://2745518585.github.io/post/CF827F-solution/)\n\n## \u9898\u610f\n\n\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u8fb9\u6743\u4e3a $1$\uff0c\u7b2c $i$ \u6761\u8fb9\u4ec5\u80fd\u5728 $[l_i,r_i]$ \u7684\u65f6\u95f4\u901a\u8fc7\uff0c\u6c42 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u3002\n\n## \u63d0\u793a\n\n\u6ce8\u610f\u8fd9\u4e2a\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u53ea\u8981\u5728\u8fd9\u6761\u8fb9\u7684\u65f6\u95f4\u8303\u56f4\u5185\uff0c\u5c31\u53ef\u4ee5\u53cd\u590d\u8d70\u540c\u4e00\u6761\u8fb9\u3002\n\n## \u601d\u8def\n\n\u6ce8\u610f\uff0c\u63a5\u4e0b\u6765\u5b9a\u4e49\u7b2c $i$ \u6761\u8fb9\u53ef\u4ee5\u8d70\u7684\u65f6\u95f4\u8303\u56f4\u662f $[l_i,r_i]$\uff0c\u4e5f\u5c31\u662f $r_i$ \u7b49\u4e8e\u9898\u76ee\u4e2d\u7684 $r_i-1$\u3002\n\n\u9996\u5148\u8fd9\u662f\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6211\u4eec\u8003\u8651\u5982\u679c\u5728\u5230\u8fbe\u4e00\u4e2a\u70b9\u4f46\u662f\u8fd8\u8981\u7b49\u4e00\u4f1a\u624d\u80fd\u8d70\u51fa\u53bb\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u590d\u8d70\u4e00\u6761\u8fb9\u6765\u62d6\u65f6\u95f4\u3002\u7531\u4e8e\u9700\u8981 $2$ \u7684\u65f6\u95f4\u5f80\u8fd4\u4e00\u6b21\uff0c\u6240\u4ee5\u9700\u8981\u628a\u65f6\u95f4\u5206\u5947\u5076\u8ba8\u8bba\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u80fd\u5728 $t \\in [l_i,r_i]$ \u7684\u65f6\u95f4\u5230\u8fbe\u8fb9 $i$ \u7684\u8d77\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728 $[t+1,r_i+1]$ \u4e2d\u5947\u5076\u6027\u76f8\u540c\u7684\u4efb\u610f\u65f6\u95f4\u5230\u8fbe\u7ec8\u70b9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6bcf\u4e00\u4e2a\u70b9\u62c6\u6210\u5947\u6570\u70b9\u548c\u5076\u6570\u70b9\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u6761\u8fb9\uff0c\u4e00\u4e2a\u70b9\u7684\u5947\u6570\u70b9\u5411\u53e6\u4e00\u4e2a\u70b9\u7684\u5076\u6570\u70b9\u8fde\u8fb9\uff0c\u5076\u6570\u70b9\u5411\u5947\u6570\u70b9\u8fde\u8fb9\uff0c\u5e76\u8c03\u6574\u65f6\u95f4\u8fb9\u754c\u7684\u5947\u5076\u6027\u3002\u63a5\u4e0b\u6765\u7684\u8ba8\u8bba\u5df2\u7ecf\u6ca1\u6709\u5947\u5076\u9650\u5236\u3002\n\n\u5047\u5982\u4ece\u8fb9 $i$ \u5230\u8fbe\u4e86 $x$\uff0c\u63a5\u4e0b\u6765\u8981\u8d70\u8fb9 $j$\uff0c\u5982\u679c $i$ \u5df2\u7ecf\u65e0\u6cd5\u8d70\u4e86 $j$ \u8fd8\u6ca1\u5230\u65f6\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u53cd\u590d\u8d70 $x$ \u8fde\u51fa\u53bb\u7684\u5176\u4ed6\u8fb9 $k$\u3002\u8fd9\u79cd\u60c5\u51b5\u5176\u5b9e\u4e0d\u7528\u5355\u72ec\u8003\u8651\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u628a\u4ece $i$ \u5230 $j$\uff08\u91cd\u590d\u8d70 $i$ \u548c $k$\uff09\u8f6c\u6362\u4e3a\u5148\u4ece $i$ \u5230 $k$\uff08\u91cd\u590d\u8d70 $k$\uff09\uff0c\u7136\u540e\u518d\u4ece $k$ \u8d70\u5230 $j$\uff08\u91cd\u590d\u8d70 $k$\uff09\u3002\n\n\u6211\u4eec\u7528\u4e00\u4e2a\u4e09\u5143\u7ec4 $(x,l,r)$ \u8868\u793a\u6211\u4eec\u53ef\u4ee5\u5728 $[l,r]$ \u7684\u65f6\u95f4\u5185\u90fd\u53ef\u4ee5\u4ece\u70b9 $x$ \u51fa\u53d1\uff0c\u679a\u4e3e\u51fa\u8fb9 $i$\u3002\u5982\u679c $l_i>r$ \u663e\u7136\u6ca1\u6cd5\u8d70\u3002\u663e\u7136\u5230\u8fbe\u7ec8\u70b9\u7684\u65f6\u95f4\u6700\u65e9\u662f $l+1$ \u548c $l_i+1$ \u53d6\u6700\u5927\u503c\uff0c\u6700\u665a\u662f $r_i+1$\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u91cd\u590d\u8d70\u8fd9\u6761\u8fb9\u3002\u7136\u540e\u6211\u4eec\u7528\u4e00\u4e2a\u7c7b\u4f3c $\\text{Dijkstra}$ \u7684\u4e1c\u897f\u7ef4\u62a4\uff1a\u6bcf\u4e00\u6b21\u53d6\u6240\u6709\u4e09\u5143\u7ec4\u4e2d $l$ \u6700\u5c0f\u7684\uff0c\u66f4\u65b0\u7b54\u6848\uff0c\u4e00\u4e2a\u70b9\u53ef\u4ee5\u91cd\u590d\u66f4\u65b0\u3002\u4f46\u662f\u6bcf\u6b21\u904d\u5386\u8fb9\u663e\u7136\u8981\u5bc4\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e00\u6b21\u66f4\u65b0\u7684 $l$ \u662f\u4e0d\u964d\u7684\uff0c\u6240\u4ee5\u80fd\u66f4\u65b0\u7684\u8fb9\u7684\u5de6\u7aef\u70b9\u4e5f\u662f\u4e0d\u964d\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u8fb9\u6392\u5e8f\uff0c\u6bcf\u4e00\u6b21\u4ece\u4e0a\u4e00\u6b21\u7ed3\u675f\u7684\u5730\u65b9\u5f00\u59cb\u3002\n\n## code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\nconst int N=1000001;\nint n,m,t[N];\nstruct str\n{\n    int x,l,r;\n    str(){}\n    str(int x,int l,int r):x(x),l(l),r(r){}\n    friend bool operator <(str a,str b)\n    {\n        return a.l>b.l;\n    }\n};\nvector<str> a[N];\nbool cmp(str a,str b)\n{\n    return a.l<b.l;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,l,r;\n        scanf(\"%d%d%d%d\",&x,&y,&l,&r);\n        --r;\n        int l1=l,l2=l,r1=r,r2=r;\n        if(l%2==1) ++l1;\n        else ++l2;\n        if(r%2==1) --r1;\n        else --r2;\n        if(l1<=r1)\n        {\n            a[x].push_back(str(y+n,l1,r1));\n            a[y].push_back(str(x+n,l1,r1));\n        }\n        if(l2<=r2)\n        {\n            a[x+n].push_back(str(y,l2,r2));\n            a[y+n].push_back(str(x,l2,r2));\n        }\n    }\n    for(int i=1;i<=n*2;++i)\n    {\n        sort(a[i].begin(),a[i].end(),cmp);\n    }\n    priority_queue<str> Q;\n    Q.push(str(1,0,0));\n    while(!Q.empty())\n    {\n        str k=Q.top();\n        Q.pop();\n        if(k.x==n||k.x==n*2)\n        {\n            printf(\"%d\",k.l);\n            return 0;\n        }\n        for(int i=t[k.x];i<a[k.x].size();++i)\n        {\n            if(a[k.x][i].l>k.r) break;\n            t[k.x]=i+1;\n            if(k.l<=a[k.x][i].r) Q.push(str(a[k.x][i].x,max(k.l,a[k.x][i].l)+1,a[k.x][i].r+1));\n        }\n    }\n    printf(\"-1\");\n    return 0;\n}\n```\n\n",
        "postTime": 1677598977,
        "uid": 291248,
        "name": "\u8d75\u60a6\u5c91",
        "ccfLevel": 7,
        "title": "CF827F \u9898\u89e3"
    }
]