[
    {
        "content": "[Codeforces \u9898\u76ee\u4f20\u9001\u95e8](https://codeforces.com/contest/1299/problem/D) & [\u6d1b\u8c37\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1299D)\n\n\u4e00\u9053\u7ebf\u6027\u57fa\u7684\u7efc\u5408\u9898 %%%%%%\n\n\u9996\u5148\u6ce8\u610f\u5230\u201c\u975e\u7b80\u5355\u8def\u5f84\u201d\u201c\u5f02\u6216\u548c\u201d\u7b49\u5b57\u773c\uff0c\u53ef\u4ee5\u672c\u80fd\u5730\u60f3\u5230\u7ebf\u6027\u57fa\u3002\u6839\u636e\u7ebf\u6027\u57fa\u90a3\u4e00\u5957\u7406\u8bba\uff0c\u4e00\u4e2a\u503c $v$ \u53ef\u4ee5\u8868\u793a\u4e3a\u67d0\u4e2a $1\\to 1$ \u7684\u975e\u7b80\u5355\u56de\u8def\u4e0a\u8fb9\u6743\u7684\u5f02\u6216\u548c\u5f53\u524d\u8282\u70b9\u5b83\u53ef\u4ee5\u8868\u793a\u4e3a **$1$ \u6240\u5728\u8fde\u901a\u5757**\u7684\u82e5\u5e72\u4e2a $\\ge 1$ \u7b80\u5355\u73af\u4e0a\u6743\u503c\u7684\u5f02\u6216\u548c\u3002\u5176\u6b21\u6211\u4eec\u8fd8\u53ef\u4ee5\u6ce8\u610f\u5230\u672c\u9898\u81f3\u4e8e\u5f88\u5c0f\uff0c\u6700\u9ad8\u4e0d\u8fc7 $2^5-1=31$\uff0c\u800c\u7a0d\u5fae\u6253\u4e2a\u8868\u5373\u53ef\u53d1\u73b0\u5927\u5c0f\u4e3a $5$ \u7684\u672c\u8d28\u4e0d\u540c\u7684\u7ebf\u6027\u57fa\u4e2a\u6570\u53ea\u6709 $374$ \u4e2a\uff0c\u56e0\u6b64\u53ef\u4ee5\u66b4\u641c\u6c42\u51fa\u6240\u6709\u672c\u8d28\u4e0d\u540c\u7684\u7ebf\u6027\u57fa\uff0c\u5177\u4f53\u6765\u8bf4\u6211\u4eec\u6bcf\u6b21\u679a\u4e3e $i=1,2,3,\\cdots,31$\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u6027\u57fa\u91cc\u80fd\u591f\u63d2\u5165 $i$ \u5c31\u63d2\u5165 $i$ \u5e76\u7ee7\u7eed DFS \u4e0b\u53bb\uff0c\u590d\u6742\u5ea6 $374\\times 31\\times 5$\uff0c\u4e0d\u4f1a\u51fa\u95ee\u9898\u3002\n\n\u7136\u540e\u8003\u8651\u4ee5**\u7ebf\u6027\u57fa\u4e3a\u72b6\u6001\u7684 DP**\uff0c\u6211\u4eec\u5047\u8bbe\u53bb\u6389 $1$ \u53f7\u70b9\u4e4b\u540e\u539f\u56fe\u6709 $m$ \u4e2a\u8fde\u901a\u5757\uff0c\u6ce8\u610f\u5230\u6211\u4eec\u53ea\u80fd\u5220\u9664\u4e0e $1$ \u76f8\u8fde\u7684\u8fb9\uff0c\u6545\u6bcf\u4e2a\u8fde\u901a\u5757\u5185\u90e8\u73af\u7684\u60c5\u51b5\u662f\u4e0d\u53d7\u5f71\u54cd\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5148\u6309\u7167 P4151 [WC2011]\u6700\u5927XOR\u548c\u8def\u5f84 \u7684\u5957\u8def\u6c42\u51fa\u6bcf\u4e2a\u8fde\u901a\u5757\u4e2d\u6240\u6709\u73af\u7684\u5f02\u6216\u548c\u7ec4\u6210\u7684\u7ebf\u6027\u57fa\uff0c\u5f53\u7136\u5982\u679c\u8fd9\u4e2a\u7ebf\u6027\u57fa\u662f\u7ebf\u6027\u6709\u5173\u96c6\u90a3\u8bf4\u660e\u5982\u679c\u8fd9\u4e2a\u8fde\u901a\u5757\u5982\u679c\u4e0e $1$ \u76f8\u8fde\u5c31\u4f1a\u5b58\u5728\u4e0d\u5408\u6cd5\u7684\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u8fde\u901a\u5757\u5fc5\u987b\u4e0e $1$ \u65ad\u5f00\uff0c\u8fd9\u4e2a\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 $ok_i$ \u8868\u793a\u7f16\u53f7\u4e3a $i$ \u7684\u8fde\u901a\u5757\u662f\u5426\u5408\u6cd5\u5373\u53ef\u3002\u4e0d\u96be\u53d1\u73b0\u6bcf\u4e2a\u8fde\u901a\u5757\u53ea\u53ef\u80fd\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u4e00\u662f\u8fde\u901a\u5757\u5185\u90e8\u5b58\u5728\u4e00\u4e2a\u4e0e $1$ \u76f8\u8fde\u7684\u70b9\uff0c\u4e8c\u662f\u8fde\u901a\u5757\u5185\u90e8\u5b58\u5728\u4e24\u4e2a\u4e0e $1$ \u76f8\u8fde\u7684\u70b9\uff0c\u4e0d\u53ef\u80fd\u51fa\u73b0\u4e09\u4e2a\u53ca\u4ee5\u4e0a\u4e0e $1$ \u76f8\u8fde\u7684\u70b9\uff0c\u5426\u5219\u5c31\u4f1a\u51fa\u73b0\u957f\u5ea6 $>3$ \u7684\u7ecf\u8fc7 $1$ \u7684\u73af\u4e86\uff0c\u8bb0 $dp_{i,j}$ \u4e3a\u8003\u8651\u524d $i$ \u4e2a\u8fde\u901a\u5757\uff0c\u5f53\u524d\u7ebf\u6027\u57fa\u4e3a $j$\uff08\u6211\u4eec\u5c06\u5927\u5c0f\u4e3a $5$ \u7684\u672c\u8d28\u4e0d\u540c\u7684\u7ebf\u6027\u57fa\u7f16\u53f7 $1,2,3,\\cdots,374$\uff09\u7684\u65b9\u6848\u6570\uff0c\u8003\u8651\u6309\u7167\u4e0a\u9762\u7684\u5206\u6790\u8fc7\u7a0b\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n- \u82e5 $ok_i=0$\uff0c\u90a3\u4e48 $1$ \u4e0e\u5f53\u524d\u8fde\u901a\u5757\u4e4b\u95f4\u7684\u8fb9\u5fc5\u987b\u65ad\u5f00\uff0c\u5373 $dp_{i,j}=dp_{i-1,j}$\n- \u82e5 $ok_i=1$\uff0c\u7ee7\u7eed\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n  - \u8fde\u901a\u5757\u5185\u90e8\u5b58\u5728\u4e00\u4e2a\u4e0e $1$ \u76f8\u8fde\u7684\u70b9\uff0c\u8bb0 $b_i$ \u4e3a\u8fde\u901a\u5757 $i$ \u7684\u7ebf\u6027\u57fa\uff0c\u90a3\u4e48\u5982\u679c\u65ad\u5f00\u4e0e $1$ \u76f8\u8fde\u7684\u8fb9\u7ebf\u6027\u57fa\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5373 $dp_{i,j}\\leftarrow dp_{i-1,j}$\uff0c\u5426\u5219\u76f8\u5f53\u4e8e\u5c06\u7ebf\u6027\u57fa $j$ \u4e0e $b_i$ \u8fdb\u884c\u5408\u5e76\uff0c\u5373 $dp_{i,j\\cup b_i}\\leftarrow dp_{i-1,j}$\n  - \u8fde\u901a\u5757\u5185\u90e8\u5b58\u5728\u4e24\u4e2a\u4e0e $1$ \u76f8\u8fde\u7684\u70b9\uff0c\u5982\u679c\u65ad\u5f00\u4e24\u6761\u4e0e $1$ \u76f8\u8fde\u7684\u8fb9\uff0c\u7ebf\u6027\u57fa\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5373 $dp_{i,j}\\leftarrow dp_{i-1,j}$\uff0c\u5982\u679c\u65ad\u5f00\u4e00\u6761\u4e0e $1$ \u76f8\u8fde\u7684\u8fb9\uff0c\u76f8\u5f53\u4e8e\u5c06\u7ebf\u6027\u57fa $j$ \u4e0e $b_i$ \u8fdb\u884c\u5408\u5e76\uff0c\u5373 $dp_{i,j\\cup b_i}\\leftarrow 2\u00b7dp_{i-1,j}$\uff0c\u5982\u679c\u4e0e $1$ \u76f8\u8fde\u7684\u8fb9\u90fd\u4e0d\u65ad\u5f00\uff0c\u90a3\u4e48\u8fd9\u90e8\u5206\u4f1a\u591a\u51fa\u4e00\u4e2a\u73af\u6ca1\u6709\u52a0\u5165\u7ebf\u6027\u57fa\uff0c\u8fd9\u4e2a\u73af\u5c31\u662f\u7ecf\u8fc7 $1$ \u7684\u4e09\u5143\u73af\uff0c\u8bb0 $w$ \u4e3a\u8be5\u4e09\u5143\u73af\u7684\u6743\u503c\u5f02\u6216\u548c\uff0c\u90a3\u4e48 $dp_{i,j\\cup b_i\\cup w}\\leftarrow dp_{i-1,j}$\n\n\u9884\u5904\u7406\u7ebf\u6027\u57fa\u7684\u5408\u5e76\u5173\u7cfb\u5373\u53ef\u5728\u5e38\u6570\u65f6\u95f4\u5185\u5b9e\u73b0\u8f6c\u79fb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $155\\times 374+374^2+374n$\n\n```cpp\nconst int MAXN=1e5;\nconst int MAXB=380;\nconst int MOD=1e9+7;\nint n,m;\nstruct lbase{\n\tint a[5];\n\tlbase(){memset(a,0,sizeof(a));}\n\tbool insert(int x){\n\t\tfor(int i=4;~i;i--) if(x>>i&1){\n\t\t\tif(a[i]) x^=a[i];\n\t\t\telse{\n\t\t\t\ta[i]=x;\n\t\t\t\tfor(int j=0;j<i;j++) if(a[i]>>j&1) a[i]^=a[j];\n\t\t\t\tfor(int j=i+1;j<=4;j++) if(a[j]>>i&1) a[j]^=a[i];\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t} return 0;\n\t}\n\tint hash(){return (a[4]<<10)|(a[3]<<6)|(a[2]<<3)|(a[1]<<1)|a[0];}\n} b[MAXB+5],c[MAXN+5];\nint rid[MAXN+5],num=0;\nvoid dfsfind(lbase cur){\n\tint hs=cur.hash();if(rid[hs]) return;\n\telse rid[hs]=++num,b[num]=cur;\n\tfor(int i=1;i<=31;i++){\n\t\tlbase nxt=cur;\n\t\tif(nxt.insert(i)) dfsfind(nxt);\n\t}\n}\nint trs[MAXB+5][MAXB+5];\nvoid init_trs(){\n\tfor(int i=1;i<=num;i++) for(int j=1;j<=num;j++){\n\t\tlbase tmp=b[i];bool ok=1;\n\t\tfor(int k=0;k<=4;k++) if(b[j].a[k]) ok&=tmp.insert(b[j].a[k]);\n\t\tif(ok) trs[i][j]=rid[tmp.hash()];\n\t}\n}\nint hd[MAXN+5],to[MAXN*2+5],val[MAXN*2+5],nxt[MAXN*2+5],ec=0;\nvoid adde(int u,int v,int w){to[++ec]=v;val[ec]=w;nxt[ec]=hd[u];hd[u]=ec;}\nint bel[MAXN+5],dis[MAXN+5],ok[MAXN+5],cmp=0,con[MAXN+5],fst[MAXN+5];\nbool is[MAXN+5];int dfn[MAXN+5],tim=0;\nvoid dfs(int x,int f){\n\tbel[x]=cmp;dfn[x]=++tim;\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e],z=val[e];if(y==1) continue;\n\t\tif(!bel[y]) dis[y]=dis[x]^z,dfs(y,x);\n\t\telse if(y!=f&&dfn[x]>dfn[y]) ok[cmp]&=c[cmp].insert(dis[x]^dis[y]^z);\n\t}\n}\nint dp[MAXN+5][MAXB+5];\nint main(){\n\tscanf(\"%d%d\",&n,&m);dfsfind(*new(lbase));init_trs();\n\tfor(int i=1,u,v,w;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadde(u,v,w);adde(v,u,w);\n\t} //printf(\"%d\\n\",num);\n\tfor(int e=hd[1];e;e=nxt[e]){\n\t\tint y=to[e],z=val[e];\n\t\tif(!bel[y]){\n\t\t\tcmp++;ok[cmp]=1;con[cmp]=z;\n\t\t\tfst[cmp]=y;dfs(y,-1);\n\t\t} else {\n\t\t\tfor(int ee=hd[y];ee;ee=nxt[ee]){\n\t\t\t\tint v=to[ee],w=val[ee];\n\t\t\t\tif(v==fst[bel[y]]){\n\t\t\t\t\tis[bel[y]]=1;con[bel[y]]^=w^z;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tdp[0][rid[0]]=1;\n\tfor(int i=1;i<=cmp;i++){\n\t\tfor(int j=1;j<=num;j++) dp[i][j]=dp[i-1][j];\n\t\tif(!ok[i]) continue;\n\t\tif(!is[i]){\n\t\t\tint id=rid[c[i].hash()];\n\t\t\tfor(int j=1;j<=num;j++) if(trs[j][id]){\n\t\t\t\tdp[i][trs[j][id]]=(dp[i][trs[j][id]]+dp[i-1][j])%MOD;\n\t\t\t}\n\t\t} else {\n\t\t\tint id1=rid[c[i].hash()];\n\t\t\tbool ok=c[i].insert(con[i]);\n\t\t\tint id2=rid[c[i].hash()];\n\t\t\tfor(int j=1;j<=num;j++){\n\t\t\t\tif(trs[j][id1]) dp[i][trs[j][id1]]=(dp[i][trs[j][id1]]+2*dp[i-1][j]%MOD)%MOD;\n\t\t\t\tif(ok&&trs[j][id2]) dp[i][trs[j][id2]]=(dp[i][trs[j][id2]]+dp[i-1][j]%MOD)%MOD;\n\t\t\t}\n\t\t}\n\t} int ans=0;\n\tfor(int i=1;i<=num;i++) ans=(ans+dp[cmp][i])%MOD;\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1618733775,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1299D Around the World"
    },
    {
        "content": "> E. [CF1299D Around the World](https://www.luogu.com.cn/problem/CF1299D) *3000\n\n\u5b9e\u9645\u4e0a\u9898\u76ee\u4e0d\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6 $> 3$ \u7684\u7b80\u5355\u73af\u7ecf\u8fc7\u4e86 $1$ \u53f7\u70b9\u7684\u9650\u5236\u6839\u672c\u4e0d\u5fc5\u8981\u3002\n\n\u81ea\u7136\uff0c\u6211\u4eec\u9996\u5148\u5c1d\u8bd5\u5224\u65ad\u5982\u4f55\u5224\u5b9a\u4e00\u5f20\u56fe\u5b58\u5728\u6ee1\u8db3\u9898\u76ee\u7684\u4e09\u4e2a\u6761\u4ef6\u7684\u8def\u5f84\u3002\u8003\u5bdf\u6240\u6709\u88ab\u7ecf\u8fc7\u5947\u6570\u6b21\u7684\u8fb9\uff0c\u5b83\u4eec\u4e00\u5b9a\u80fd\u88ab\u62c6\u5206\u6210\u82e5\u5e72\u4e2a\u7b80\u5355\u73af\uff0c\u56e0\u4e3a\u4e0e\u4e00\u4e2a\u70b9\u76f8\u8fde\u7684\u5947\u8fb9\u6761\u6570\u4e00\u5b9a\u662f\u5076\u6570\uff08\u4ece $1$ \u5f00\u59cb\u56de\u5230 $1$ \u610f\u5473\u7740\u6574\u6761\u8def\u5f84\u662f\u56de\u8def\uff09\u3002\n\n\u56e0\u6b64\uff0c\u7c7b\u4f3c\u6700\u5927 XOR \u548c\u8def\u5f84\u90a3\u9898\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u5bb9\u6613\u901a\u8fc7\u4e00\u6b21 dfs \u6c42\u51fa\u6574\u5f20\u56fe\u4e0a\u6240\u6709\u7b80\u5355\u73af\u7684\u8fb9\u6743\u5f02\u6216\u548c\uff08\u79f0\u4e3a\u73af\u7684\u6743\u503c\uff09\uff0c\u53ea\u9700\u68c0\u67e5\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u975e\u7a7a\u5b50\u96c6\u4f7f\u5176\u5f02\u6216\u8d77\u6765\u7b49\u4e8e $0$\uff0c\u8fd9\u662f\u7ebf\u6027\u57fa\u7684\u62ff\u624b\u597d\u620f\u3002\n\n\u4ece\u56fe\u4e2d\u5220\u53bb\u70b9 $1$ \u540e\uff0c\u9898\u76ee\u7684\u6027\u8d28\u5b9e\u9645\u4e0a\u4fdd\u8bc1\u4e86\u4efb\u4f55\u4e00\u4e2a\u8fde\u901a\u5757\u5f53\u4e2d\u4e0e $1$ \u5728\u539f\u56fe\u4e0a\u76f8\u8fde\u7684\u70b9\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc7 $2$\u3002\n\n\u4e00\u4e2a\u8fde\u901a\u5757\u4e00\u4e2a\u8fde\u901a\u5757\u5730\u8003\u8651\uff0c\u8bbe\u8003\u8651\u5230\u7b2c $i$ \u4e2a\u8fde\u901a\u5757\u4e14\u6240\u6709\u7b80\u5355\u73af\u6743\u503c\u52a0\u5165\u7ebf\u6027\u57fa\u540e\u5176\u5f62\u6001\u4e3a $j$ \u7684\u65b9\u6848\u6570\u4e3a $f_{i, j}$\u3002\n\n\u8f6c\u79fb\u5373\u8003\u8651\u5f53\u524d\u8fde\u901a\u5757\uff0c\u82e5\u4e0e $1$ \u76f8\u8fde\u7684\u70b9\u7684\u4e2a\u6570\u7b49\u4e8e $1$\uff0c\u90a3\u4e48\u53ef\u4ee5\u9009\u62e9\u65ad\u6389\u8fd9\u6761\u8fb9\u4e0d\u52a0\u5165\u4efb\u4f55\u7b80\u5355\u73af\uff0c\u6216\u8005\u4e0d\u70b9\u6389\u8fd9\u6761\u8fb9\uff0c\u52a0\u5165\u5f53\u524d\u8fde\u901a\u5757\u7684\u6240\u6709\u7b80\u5355\u73af\u3002\u5426\u5219\u4e0e $1$ \u76f8\u8fde\u7684\u70b9\u7684\u4e2a\u6570\u7b49\u4e8e $2$\uff0c\u53ef\u4ee5\u9009\u62e9\u65ad\u6389\u6240\u6709\u8fb9\u4e0d\u52a0\u5165\u4efb\u4f55\u7b80\u5355\u73af\uff0c\u65ad\u6389\u4efb\u4f55\u4e00\u6761\u8fb9\u52a0\u5165\u5f53\u524d\u8fde\u901a\u5757\u7684\u6240\u6709\u7b80\u5355\u73af\uff0c\u6216\u8005\u4fdd\u7559\u6240\u6709\u8fb9\u52a0\u5165\u5f53\u524d\u8fde\u901a\u5757\u7684\u6240\u6709\u7b80\u5355\u73af\u4ee5\u53ca **$1$ \u548c\u4e0e $1$ \u76f8\u8fde\u7684\u4e24\u4e2a\u70b9\u5f62\u6210\u7684\u7b80\u5355\u73af**\u3002\n\n\u52a0\u5165\u7b80\u5355\u73af\u662f\u4ee5\u7ebf\u6027\u57fa\u7684\u5f62\u5f0f\u52a0\u5165\u7684\uff0c\u6ce8\u610f\uff0c\u82e5\u8981\u52a0\u5165\u7684\u7ebf\u6027\u57fa\u5df2\u7ecf\u4e0d\u6ee1\u79e9\uff08\u5373\u884c\u5411\u91cf\u4e2a\u6570\u4e0d\u7b49\u4e8e\u52a0\u5165\u7684\u7b80\u5355\u73af\u4e2a\u6570\uff09\uff0c\u8bf4\u660e\u8fd9\u4e9b\u7b80\u5355\u73af\u5df2\u7ecf\u5f62\u6210\u4e86\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\uff0c\u4e0d\u7b26\u5408\u9898\u610f\uff0c\u4e0d\u80fd\u52a0\u5165\u3002\n\n\u73b0\u5728\u552f\u4e00\u7684\u95ee\u9898\u662f\u5982\u4f55\u8868\u793a\u4e00\u4e2a\u7ebf\u6027\u57fa\u3002\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u4e3a\u7ebf\u6027\u57fa\u7f16\u53f7\uff0c\u7136\u540e\u9884\u5904\u7406\u6240\u6709\u7ebf\u6027\u57fa\u7684\u5408\u5e76\u5173\u7cfb\uff08\u540c\u65f6\u5224\u65ad\u54ea\u4e9b\u7ebf\u6027\u57fa\u65e0\u6cd5\u5408\u5e76\uff09\u3002\n\n\u6253\u8868\u53d1\u73b0\u672c\u8d28\u4e0d\u540c\u7684\u7ebf\u6027\u57fa\u4e2a\u6570\u53ea\u6709 $374$ \u79cd\u3002\u5177\u4f53\u5730\uff0c\u679a\u4e3e\u4e94\u4f4d\u5206\u522b\u653e $0\\sim 2 ^ i(0\\leq i\\leq 4)$\uff0c\u7136\u540e\u5c06\u672c\u8d28\u76f8\u540c\uff08\u7b80\u5316\u9636\u68af\u578b\u76f8\u7b49\uff09\u7684\u7ebf\u6027\u57fa\u7ed9\u53bb\u6389\uff0c\u53ef\u4ee5\u66b4\u529b\u5224\u65ad\u76f8\u7b49\u6216\u7ed9\u7ebf\u6027\u57fa\u4e00\u4e2a\u54c8\u5e0c\u503c\u5e76\u5f00\u6876\u5224\u65ad\uff08\u4e00\u5171 $25$ \u4e2a bit\uff0c\u5bb9\u6613\u538b\u7f29\u81f3 $[0, 2 ^ {25})$\uff09\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u6ce8\u610f\u70b9\u662f\uff0c\u4e0d\u540c\u4e8e\u6700\u5927 XOR \u548c\u8def\u5f84\uff0c\u6211\u4eec\u4e0d\u80fd\u52a0\u5165\u76f8\u540c\u7b80\u5355\u73af\uff08\u5426\u5219\u4f1a\u5bfc\u81f4\u9519\u8bef\u5224\u65ad\u5b58\u5728\u53ef\u4ee5\u751f\u6210 $0$ \u7684\u975e\u7a7a\u5b50\u96c6\uff09\uff0c\u6240\u4ee5 dfs \u627e\u73af\u5e76\u52a0\u5165\u7684\u8fc7\u7a0b\u9700\u8981\u683c\u5916\u6ce8\u610f\u7ec6\u8282\u3002\n\n\u7efc\u4e0a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(W_wnw)$\uff0c\u5176\u4e2d $w = 5$ \u8868\u793a\u4f4d\u6570\uff0c$W_w$ \u8868\u793a\u4f4d\u6570\u4e3a $w$ \u7684\u672c\u8d28\u4e0d\u540c\u7ebf\u6027\u57fa\u4e2a\u6570\u3002\n\n\u81f3\u4e8e\u9650\u5236\u4e0d\u5fc5\u8981\u7684\u95ee\u9898\uff0c\u5f53\u4e00\u4e2a\u8fde\u901a\u5757\u5b58\u5728 $6$ \u4e2a\u53ca\u4ee5\u4e0a\u4e0e $1$ \u76f8\u8fde\u7684\u8fb9\u65f6\uff0c\u81f3\u5c11\u5b58\u5728 $6$ \u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u7b80\u5355\u73af\uff0c\u6240\u4ee5\u53ea\u9700\u679a\u4e3e $2 ^ 5$ \u79cd\u60c5\u51b5\u5373\u53ef\u3002\u6709 $\\dfrac 1 5$ \u7684\u5e38\u6570\u6bd5\u7adf\u6bcf\u6b21\u4f1a\u81f3\u5c11\u8003\u8651\u5230 $5$ \u4e2a\u70b9\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int K = 374;\nconst int N = 1e5 + 5;\nconst int mod = 1e9 + 7;\nvoid add(int &x, int y) {x += y, x >= mod && (x -= mod);}\nstruct lb {\n\tint w[5];\n\tlb() {memset(w, 0, sizeof(w));}\n\tbool chk(int v) {\n\t\tfor(int i = 4; ~i; i--)\n\t\t\tif(v >> i & 1) {\n\t\t\t\tif(w[i]) v ^= w[i];\n\t\t\t\telse return 1; // won't form 0\n\t\t\t}\n\t\treturn 0;\n\t}\n\tvoid insert(int v) {\n\t\tfor(int i = 4; ~i; i--)\n\t\t\tif(v >> i & 1) {\n\t\t\t\tif(w[i]) v ^= w[i];\n\t\t\t\telse {\n\t\t\t\t\tfor(int j = i - 1; ~j; j--) if(v >> j & 1) v ^= w[j];\n\t\t\t\t\tfor(int j = 4; j > i; j--) if(w[j] >> i & 1) w[j] ^= v;\n\t\t\t\t\treturn w[i] = v, void();\n\t\t\t\t}\n\t\t\t}\n\t}\n\tfriend bool operator == (const lb &x, const lb &y) {\n\t\tfor(int i = 0; i < 5; i++) if(x.w[i] ^ y.w[i]) return 0;\n\t\treturn 1;\n\t}\n\tint get() {\n\t\tint hsh = 0;\n\t\tfor(int i = 0; i < 5; i++) hsh = (hsh << 5) | w[i];\n\t\treturn hsh;\n\t}\n} LB[K], cur;\nint n, m, tot, hsh[1 << 25];\nint f[K], g[K], E, ban;\nint val[N], comb[N];\nint mer[K][K], vis[N];\nvector <pair <int, int>> e[N];\nvoid dfs(int id, int fa) { // \u8981\u8bb0\u7236\u4eb2!!!!\n\tvis[id] = 1;\n\tfor(auto it : e[id]) {\n\t\tint to = it.first, v = it.second ^ val[id] ^ val[to];\n\t\t// cerr << id << \" \" << to << \" \" << v << endl;\n\t\tif(to == fa) continue;\n\t\tif(!vis[to]) val[to] = v, dfs(to, id);\n\t\telse if(to == comb[id]) E = v;\n\t\telse if(id > to) ban |= !cur.chk(v), cur.insert(v);\n\t\t// \u65e0\u5411\u8fb9\u91cd\u8fb9!!!!! \u8981\u5224 id > to!!!!\n\t}\n}\nint main() {\n\t// freopen(\"1.in\", \"r\", stdin);\n\tcin >> n >> m, f[0] = 1;\n\tfor(int i = 1, u, v, w; i <= m; i++) {\n\t\tcin >> u >> v >> w;\n\t\te[u].push_back(make_pair(v, w));\n\t\te[v].push_back(make_pair(u, w));\n\t}\n\tfor(int i = 0; i < 2; i++)\n\t\tfor(int j = 0; j < 4; j++)\n\t\t\tfor(int k = 0; k < 8; k++)\n\t\t\t\tfor(int l = 0; l < 16; l++)\n\t\t\t\t\tfor(int m = 0; m < 32; m++) {\n\t\t\t\t\t\tlb cur;\n\t\t\t\t\t\tcur.insert(i), cur.insert(j), cur.insert(k), cur.insert(l), cur.insert(m);\n\t\t\t\t\t\tbool same = 0;\n\t\t\t\t\t\tfor(int p = 0; p < tot && !same; p++) same |= cur == LB[p];\n\t\t\t\t\t\tif(!same) LB[tot++] = cur;\n\t\t\t\t\t}\n\tfor(int i = 0; i < tot; i++) hsh[LB[i].get()] = i;\n\tfor(int i = 0; i < tot; i++)\n\t\tfor(int j = 0; j < tot; j++) {\n\t\t\tmer[i][j] = 0, cur = LB[i];\n\t\t\tfor(int k = 0; k < 5; k++)\n\t\t\t\tif(LB[j].w[k]) {\n\t\t\t\t\tif(!cur.chk(LB[j].w[k])) mer[i][j] = -1; // LB[i] -> cur\n\t\t\t\t\tcur.insert(LB[j].w[k]);\n\t\t\t\t}\n\t\t\tif(!mer[i][j]) mer[i][j] = hsh[cur.get()];\n\t\t}\n\tfor(auto it : e[1]) vis[it.first] = 1, val[it.first] = it.second;\n\tfor(auto id : e[1]) for(auto it : e[id.first]) if(vis[it.first]) comb[id.first] = it.first;\n\tvis[1] = 1; // \u8981\u5728\u8fd9\u4e4b\u540e\u624d\u8bbe\u7f6e vis[1] = 1 \u5426\u5219 comb \u4f1a\u6c42\u9519\n\tfor(auto it : e[1]) {\n\t\tint id = it.first;\n\t\tif(comb[id] && id > comb[id]) continue;\n\t\tmemset(cur.w, ban = 0, sizeof(cur.w));\n\t\tdfs(id, 1);\n\t\tif(comb[id]) dfs(comb[id], 1); // add this line\n\t\tif(ban) continue; // remember to ban\n\t\tstatic int g[374];\n\t\tint idcur = hsh[cur.get()];\n\t\tmemcpy(g, f, sizeof(f));\n\t\t// cerr << id << \" \" << idcur << endl;\n\t\tif(!comb[id]) {\n\t\t\tfor(int i = 0; i < 374; i++) {\n\t\t\t\tif(!f[i]) continue;\n\t\t\t\tint res = mer[i][idcur];\n\t\t\t\tif(res != -1) add(g[res], f[i]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tint ban2 = !cur.chk(E);\n\t\t\tcur.insert(E);\n\t\t\tint idcur2 = hsh[cur.get()];\n\t\t\t// cerr << \"chk \" << idcur2 << \" \" << E << endl;\n\t\t\tfor(int i = 0; i < 374; i++) {\n\t\t\t\tif(!f[i]) continue;\n\t\t\t\tint res = mer[i][idcur];\n\t\t\t\tif(res != -1) add(g[res], f[i]), add(g[res], f[i]);\n\t\t\t\tif(ban2) continue; // remember to ban\n\t\t\t\tres = mer[i][idcur2];\n\t\t\t\tif(res != -1) add(g[res], f[i]);\n\t\t\t}\n\t\t}\n\t\tswap(f, g);\n\t}\n\tint ans = 0;\n\tfor(int i = 0; i < tot; i++) add(ans, f[i]);\n\tcout << ans << endl;\n\treturn 0;\n}\n\n/*\n2022/4/28\nstart thinking at 15:00\n\n\u4e0d\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6 > 3 \u7684\u7b80\u5355\u73af\u7ecf\u8fc7\u4e86 1 \u53f7\u70b9\u8fd9\u4e2a\u6027\u8d28\u5e94\u8be5\u5f88\u6709\u7528.\n\u8fd9\u8bf4\u660e 1 \u7684\u51fa\u8fb9\u4e24\u4e24\u72ec\u7acb, \u9664\u4e86\u76f8\u8fde\u4e14\u540c\u65f6\u4e0e 1 \u76f8\u8fde\u7684\u4e09\u5143\u73af\u90e8\u5206.\n\u672c\u8d28\u4e0d\u540c\u7684\u7ebf\u6027\u57fa\u4e2a\u6570\u53ea\u6709 374 \u4e2a, \u76f4\u63a5 DP \u505a\u5c31\u884c\u4e86.\n\n\u7801\u519c\u5c51\u9898.\n\nstart coding at 16:00\nfinish debugging at 17:56\n*/\n```",
        "postTime": 1651543685,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1299D Around the World"
    },
    {
        "content": "## Descreption\n\n\u6709\u4e00\u5f20 $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u4fdd\u8bc1\u4e0d\u5305\u542b\u5927\u5c0f\u5927\u4e8e $3$ \u7684\u7b80\u5355\u73af\u5305\u542b\u8282\u70b9 $1$\u3002\n\n\u6c42\u6709\u591a\u5c11\u79cd\u65b9\u6848\u5220\u9664\u4e00\u4e2a\u4e0e $1$ \u76f8\u8fde\u7684\u8fb9\u7684\u96c6\u5408\uff0c\u4f7f\u5f97\u4e0d\u5b58\u5728\u4e00\u4e2a\u5305\u542b\u8282\u70b9 $1$ \u7684\u56de\u8def\uff08\u4e0d\u4e00\u5b9a\u7b80\u5355\uff09\u6ee1\u8db3\uff1a\n\n$1$\u3001\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u5f02\u6216\u548c\u4e3a $0$\u3002\n\n$2$\u3001\u7ecf\u8fc7\u81f3\u5c11\u4e00\u6761\u8fb9\u5947\u6570\u6b21\u3002\n\n\u7b54\u6848\u4e3a $10^9+7$ \u53d6\u6a21\u3002\n\n$n,m\\leq 10^5$\uff0c\u8fb9\u6743 $w\\in[0,31]$\u3002\n\n## Solution\n\n\u4e00\u4e2a\u56de\u8def\u7684\u5f02\u6216\u548c\u53ef\u4ee5\u8868\u793a\u6210\u82e5\u5e72\u4e2a\u4e0d\u76f8\u4ea4\u7684\u73af\u7684\u5f02\u6216\u548c\u7684\u5f02\u6216\u548c\uff0c\u5c06\u4e00\u4e2a\u8fde\u901a\u5757\u5185\u7684\u6240\u6709\u73af\u90fd\u52a0\u5165\u5230\u4e00\u4e2a\u7ebf\u6027\u57fa\u4e2d\u5c31\u53ef\u4ee5\u8868\u793a\u51fa\u8fd9\u4e2a\u8fde\u901a\u5757\u5185\u7684\u56de\u8def\u7684\u53ef\u80fd\u5f02\u6216\u548c\u3002\n\n\u76f4\u63a5\u627e\u51fa\u6240\u6709\u73af\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4f46\u662f\u5b58\u5728\u4e00\u4e2a\u7b80\u5355\u7684\u7b49\u4ef7\u63cf\u8ff0\uff1a\u6c42\u51fa\u8be5\u8fde\u901a\u5757\u7684\u4efb\u610f\u4e00\u68f5\u751f\u6210\u6811\uff0c\u53ea\u4fdd\u7559\u53ea\u542b\u4e00\u6761\u975e\u6811\u8fb9\u7684\u73af\u3002\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u53ef\u80fd\u7684\u73af\uff0c\u90fd\u53ef\u4ee5\u8868\u793a\u6210\u8fd9\u4e2a\u73af\u4e0a\u6240\u6709\u975e\u6811\u8fb9\u6240\u5728\u73af\u7684\u5f02\u6216\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6811\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u51e0\u4e2a\u53ef\u80fd\u7684\u7ebf\u6027\u57fa\uff08\u4e0d\u540c\u7684\u65ad\u8fb9\u65b9\u6848\uff09\u3002\u6ce8\u610f\uff0c\u56e0\u4e3a\u8981\u6c42\u4e0d\u80fd\u5f02\u6216\u51fa $0$\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u4fdd\u7559\u90a3\u4e9b\u6bcf\u6b21\u63d2\u5165\u90fd\u6210\u529f\u7684\u7ebf\u6027\u57fa\u3002\n\n\u7b54\u6848\u5c31\u7b49\u4e8e\u5728\u6bcf\u4e2a\u5b50\u6811\u5185\u9009\u62e9\u4e00\u4e2a\u53ef\u80fd\u7684\u7ebf\u6027\u57fa\uff0c\u5e76\u4e14\u8fd9\u4e9b\u7ebf\u6027\u57fa\u5408\u5e76\u7684\u65f6\u5019\u6bcf\u6b21\u63d2\u5165\u90fd\u6210\u529f\u7684\u65b9\u6848\u6570\u3002\n\n\u53ef\u4ee5\u60f3\u5230\u505a\u4e00\u4e2a\u4ee5\u7ebf\u6027\u57fa\u4e3a\u72b6\u6001\u7684\u52a8\u6001\u89c4\u5212\u3002\n\n\u95ee\u9898\u662f\u5927\u5c0f\u4e3a $5(log_232)$ \u7684\u672c\u8d28\u4e0d\u540c\u7ebf\u6027\u57fa\u6709\u591a\u5c11\u4e2a\uff1f\u7206\u641c\u53ef\u4ee5\u641c\u51fa\u6765\u662f $374$\uff0c\u4f46\u662f\u8fd9\u4e2a\u7ed3\u679c\u663e\u7136\u4e0d\u5c3d\u5982\u4eba\u610f\u3002\n\n\u91cd\u65b0\u8003\u8651\u4e00\u4e0b\u7ebf\u6027\u57fa\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1a\n\n\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u4e8c\u8fdb\u5236\u6570\u53ef\u4ee5\u770b\u505a\u662f $\\mod 2$ \u7684\u57df\u4e0a\u7684\u4e00\u4e2a $n$ \u7ef4\u5411\u91cf\uff0c\u5176\u4e2d\u4e00\u4e2a\u5927\u5c0f\u4e3a $k$ \u7684\u7ebf\u6027\u57fa\u4e0e\u4e00\u4e2a $k$ \u7ef4\u7684\u5b50\u7a7a\u95f4\u5bf9\u5e94\u3002\u5982\u679c\u4e24\u4e2a\u7ebf\u6027\u57fa\u672c\u8d28\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u7ebf\u6027\u57fa\u80fd\u5f02\u6216\u51fa\u7684\u96c6\u5408\u76f8\u540c\uff0c\u5373\u5bf9\u5e94\u76f8\u540c\u7684 $k$ \u7ef4\u5b50\u7a7a\u95f4\u3002\n\n\u6362\u8a00\u4e4b\uff0c\u7edf\u8ba1\u672c\u8d28\u4e0d\u540c\u7684\u7ebf\u6027\u57fa\uff0c\u5c31\u662f\u5728\u679a\u4e3e\u4e86\u5176\u5927\u5c0f $k$ \u4e4b\u540e\uff0c\u7edf\u8ba1\u4e00\u4e2a\u5927\u5c0f\u4e3a $2$ \u7684\u57df\u4e0a $n$ \u7ef4\u5411\u91cf\u7a7a\u95f4\u4e2d\u6709\u591a\u5c11\u4e2a $k$ \u7ef4\u5b50\u7a7a\u95f4\u3002\n\n\u4efb\u610f $k$ \u4e2a\u7ebf\u6027\u65e0\u5173\u7684\u5411\u91cf\u90fd\u4e0e\u4e00\u4e2a$k$ \u7ef4\u5b50\u7a7a\u95f4\u4e00\u4e00\u5bf9\u5e94\uff0c\u90a3\u4e48\u8003\u8651\u5728 $n$ \u7ef4\u5411\u91cf\u4e2d\u6709\u5e8f\u9009\u53d6 $k$ \u4e2a\u7ebf\u6027\u65e0\u5173\u7684\u5411\u91cf\uff0c\u8fd9\u4e9b\u5411\u91cf\u5bf9\u5e94\u7684 $k$ \u7ef4\u5b50\u7a7a\u95f4\u4f1a\u88ab\u91cd\u590d\u8ba1\u7b97\u7684\u6b21\u6570\u5c31\u662f $k$ \u7ef4\u7a7a\u95f4\u5185\u6709\u5e8f\u9009\u53d6 $k$ \u4e2a\u7ebf\u6027\u65e0\u5173\u5411\u91cf\u7684\u65b9\u6848\u6570\u3002\n\n\u5047\u8bbe\u5f53\u524d\u662f $n$ \u7ef4\u7a7a\u95f4\uff0c\u7b2c\u4e00\u4e2a\u5411\u91cf\u53ef\u4ee5\u9009\u62e9\u9664\u4e86\u96f6\u5411\u91cf\u4e4b\u5916\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u65b9\u6848\u6570\u4e3a $2^n-1$\uff0c\u7b2c\u4e8c\u4e2a\u5411\u91cf\u4e0d\u80fd\u9009\u53d6\u7b2c\u4e00\u4e2a\u5411\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u6240\u4ee5\u65b9\u6848\u6570\u4e3a $2^n-2$\uff0c\u7b2c\u4e09\u4e2a\u5411\u91cf\u7684\u65b9\u6848\u6570\u5c31\u662f $2^n-4$ .......\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u603b\u65b9\u6848\u6570\u4e3a\uff1a\n\n$$\\frac{\\prod_{i=n-k+1}^n(2^n-2^i)}{\\prod_{i=1}^k(2^k-2^i)}=\\frac{\\prod_{i=n-k+1}^n(2^i-1)}{\\prod_{i=1}^k(2^i-1)}=\\begin{bmatrix}n\\\\k\\end{bmatrix}_2$$\n\n\u8fd9\u6b63\u662f\u9ad8\u65af\u4e8c\u9879\u5f0f\u7cfb\u6570\uff0c\u5e76\u4e14\u6211\u4eec\u5f97\u5230\u4e86 $\\begin{bmatrix}n\\\\k\\end{bmatrix}_q$ \u7684\u7ec4\u5408\u610f\u4e49\u5c31\u662f\u5728\u5927\u5c0f\u4e3a $q$ \u7684\u57df\u4e0a\u7684 $n$ \u7ef4\u7a7a\u95f4\u4e2d\u9009\u53d6 $k$ \u7ef4\u5b50\u7a7a\u95f4\u7684\u65b9\u6848\u6570\u3002\n\n\u90a3\u4e48\u5927\u5c0f\u4e3a $5$ \u7684\u7ebf\u6027\u57fa\u4e2a\u6570\u5373\u4e3a $\\sum_{i=0}^{5}\\begin{bmatrix}2\\\\i\\end{bmatrix}_2=374$ \u3002\n\n\uff08\u5bf9\u9ad8\u65af\u4e8c\u9879\u5f0f\u7cfb\u6570\u7684\u884c\u6c42\u548c\u6709\u5feb\u901f\u7b97\u6cd5\uff0c\u4f46\u662f\u4e0e\u672c\u9898\u65e0\u5173\u5c31\u4e0d\u8d58\u8ff0\u4e86\uff09\n\n\u90a3\u4e48\u5c31\u8bbe $f_{i,j}$ \u8868\u793a\u5904\u7406\u4e86\u524d $i$ \u68f5\u5b50\u6811\uff0c\u5408\u5e76\u7684\u7ebf\u6027\u57fa\u4e3a $j$ \u7684\u65b9\u6848\u6570\uff0c\u9884\u5904\u7406\u51fa $374$ \u5bf9\u7ebf\u6027\u57fa\u4e92\u76f8\u5408\u5e76\u7684\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u8f6c\u79fb\u4e86\u3002\n\n\u590d\u6742\u5ea6\u4e3a $O(cn)$\uff0c\u5176\u4e2d $c$ \u5728\u6b64\u5904\u4e3a $374$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define I inline int\n#define V inline void\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define ROF(i,a,b) for(int i=a;i>=b;i--)\n#define REP(u) for(int i=h[u],v;v=e[i].t,i;i=e[i].n)\nconst int N=1e5+1,M=400,mod=1e9+7,bit[]={1,3,7,15,31};\nV check(int&x){x-=mod,x+=x>>31&mod;}\nint n,m,tot,qwq,txt[N],dfn[N];\nint h[N],fa[N],dep[N],dis[N],tag[N];\nint to[M][M],dp[N][M],pre[N],id[1<<15];\nstruct edge{int t,n,w;}e[N<<1];\nstruct bas{\n\tint a[5],flag;\n\tI ins(int x){\n\t\tROF(i,4,0)if(x>>i&1){\n\t\t\tif(a[i])x^=a[i];\n\t\t\telse return a[i]=x,1;\n\t\t}\n\t\treturn flag=1,0;\n\t}\n\tI comp(){return a[0]|a[1]<<1|a[2]<<3|a[3]<<6|a[4]<<10;}\n\tV assign(int x){a[0]=x&1,a[1]=x>>1&3,a[2]=x>>3&7,a[3]=x>>6&15,a[4]=x>>10;}\n\tI hash(){\n\t\tFOR(i,0,4)if(a[i]&&!(a[i]>>i&1))return -1;\n\t\tFOR(i,0,4)FOR(j,i+1,4)if(a[j]>>i&1)a[j]^=a[i];\n\t\treturn comp();\n\t}\n}t[N][2],tmp;\nI merge(int x,int y){\n\tstatic bas tx,ty;tx.assign(x),ty.assign(y);\n\tFOR(i,0,4)if(ty.a[i]&&!tx.ins(ty.a[i]))return 2;\n\treturn tx.hash();\n}\nV add_edge(int x,int y,int w){\n\tif(y-1)e[++tot]=(edge){y,h[x],w},h[x]=tot;\n\tif(x-1)e[++tot]=(edge){x,h[y],w},h[y]=tot;\n}\nI find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nV con(int x,int y){if(x-1&&y-1)fa[find(x)]=find(y);}\nV input(){\n\tscanf(\"%d%d\",&n,&m);\n\tFOR(i,1,n)fa[i]=i;int x,y,w;\n\twhile(m--)scanf(\"%d%d%d\",&x,&y,&w),con(x,y),add_edge(x,y,w);\n}\nqueue<int>q;\nV bfs(){\n\tfor(q.push(1);!q.empty();q.pop()){\n\t\tint u=q.front(),p=dfn[find(u)];\n\t\tREP(u)\n\t\t\tif(!dep[v])\n\t\t\t\tdep[v]=dep[u]+1,pre[v]=u,dis[v]=dis[u]^e[i].w,q.push(v);\n\t\t\telse if(u>v&&pre[u]!=v){\n\t\t\t\tif(dep[u]==dep[v]&&dep[u]==1)tag[p]=dis[u]^dis[v]^e[i].w;\n\t\t\t\telse t[p][0].ins(dis[u]^dis[v]^e[i].w);\n\t\t\t}\n\t}\n}\nV init(){\n\tFOR(i,2,n)if(!dfn[find(i)])dfn[find(i)]=++qwq;\n\ttot=0,memset(tag,-1,sizeof(tag)),bfs(),dp[0][1]=1;\n\tint p,x=0;\n\tFOR(i,0,(1<<15)-1){\n\t\ttmp.assign(i),p=tmp.hash();\n\t\tif(~p&&!id[p])txt[id[p]=++tot]=p;\n\t}\n\tFOR(i,1,qwq)if(~tag[i])t[i][1]=t[i][0],t[i][1].ins(tag[i]);\n\tFOR(i,1,tot)FOR(j,1,tot)to[i][j]=id[merge(txt[i],txt[j])];\n}\nV work(){\n\tint p,ans=0;\n\tFOR(i,1,qwq){\n\t\tif(!t[i][0].flag){\n\t\t\tp=id[t[i][0].hash()];\n\t\t\tFOR(j,1,tot)check(dp[i][to[j][p]]+=(dp[i-1][j]<<!!~tag[i])%mod);\n\t\t}\n\t\tif(~tag[i]&&!t[i][1].flag){\n\t\t\tp=id[t[i][1].hash()];\n\t\t\tFOR(j,1,tot)check(dp[i][to[j][p]]+=dp[i-1][j]);\n\t\t}\n\t\tFOR(j,1,tot)check(dp[i][j]+=dp[i-1][j]);\n\t}\n\tFOR(i,1,tot)check(ans+=dp[qwq][i]);\n\tcout<<ans<<'\\n';\n}\nint main(){\n\tinput();\n\tinit();\n\twork();\n\treturn 0;\n}\n```\n",
        "postTime": 1581509353,
        "uid": 109236,
        "name": "Fuyuki",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1299D \u3010Around the World\u3011"
    },
    {
        "content": "\u5927\u5c0f\u4e3a $5$ (\u5373 $\\log_2w$) \u7684\u672c\u8d28\u4e0d\u540c\u7684\u7ebf\u6027\u57fa\u4ec5\u6709 $374$ \u79cd\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u66b4\u529b\u7a0b\u5e8f\u5f97\u5230\u6240\u6709\u672c\u8d28\u4e0d\u540c\u7684\u7ebf\u6027\u57fa\u3002\n\n```cpp\n\nconst int Maxk = 405, Maxn = 100005;\nstruct Basis\n{\n\tint val[5];\n\tBasis(void)\n\t{\n\t\tmemset(val, 0, sizeof(val));\n\t}\n\tbool insert(int x)\n\t{\n\t\tfor (int i = 4; i >= 0; i--)\n\t\t\tif (x & (1 << i))\n\t\t\t{\n\t\t\t\tif (val[i]) x ^= val[i];\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tval[i] = x;\n\t\t\t\t\tfor (int j = 0; j < i; j++)\n\t\t\t\t\t\tif (val[j] && val[i] & (1 << j))\n\t\t\t\t\t\t\tval[i] ^= val[j];\n\t\t\t\t\tfor (int j = i + 1; j <= 4; j++)\n\t\t\t\t\t\tif (val[j] & (1 << i))\n\t\t\t\t\t\t\tval[j] ^= val[i];\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\treturn false;\n\t}\n\tint Hash(void)\n\t{\n\t\treturn val[0] | val[1] << 1 | val[2] << 3 | val[3] << 6 | val[4] << 10;\n\t}\n};\n\n\n\nint cnt, id[Maxn], rk[Maxk];\n\nvoid Dfs(Basis x)\n{\n\tint now = x.Hash();\n\tif (!id[now]) id[now] = ++cnt, rk[cnt] = now;\n\telse return ;\n\tfor (int i = 1; i <= 31; i++)\n\t{\n\t\tBasis tmp = x;\n\t\tif (tmp.insert(i)) Dfs(tmp);\n\t}\n}\n```\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u4e0e $1$ \u76f8\u8fde\u7684\u8fb9\u65ad\u5f00\u540e\uff0c\u56fe\u53d8\u6210\u4e86\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u4e4b\u95f4\u53ef\u4ee5\u5206\u5f00\u5904\u7406\u3002\n\n\u6211\u4eec\u5047\u8bbe\u6709\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u8fde\u901a\u5757\u5185\u90e8\u5f97\u5230\u7684\u7ebf\u6027\u57fa\u4e3a $A$ \u548c $B$\uff0c\u90a3\u4e48\u7ecf\u8fc7\u8fd9\u4e24\u4e2a\u8fde\u901a\u5757\u80fd\u591f\u5f97\u5230\u7684\u503c\u4e3a $merge(A, B)$\u3002$merge$ \u8868\u793a\u7ebf\u6027\u57fa\u7684\u5408\u5e76\u3002\n\n\u5bf9\u4e8e\u7ecf\u8fc7 $1$ \u7684\u4e09\u5143\u73af\uff0c\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff0c\u5982\u679c\u53ea\u9009\u4e00\u6761\u8fb9\u5219\u7ebf\u6027\u57fa\u91cc\u4e0d\u5305\u542b\u4e09\u5143\u73af\uff0c\u5982\u679c\u90fd\u9009\u5219\u5305\u542b\u3002\n\n\u6211\u4eec\u4ee4 $f_i$ \u8868\u793a\u5f53\u524d\u7684\u7ebf\u6027\u57fa\u662f\u7b2c $i$ \u79cd\u7684\u65b9\u6848\u6570\u3002\u8f6c\u79fb\u53ea\u7528\u8003\u8651\u662f\u5426\u6709\u5143\u7d20\u7ebf\u6027\u76f8\u5173\u3002\u56e0\u4e3a\u7ebf\u6027\u76f8\u5173\u610f\u5473\u7740\u80fd\u51d1\u51fa $0$\u3002\n\n\u9884\u5904\u7406\u4e00\u4e0b\u7ebf\u6027\u57fa\u4e4b\u95f4\u7684\u8f6c\u79fb\u5173\u7cfb\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(c\\times n)$\u3002\u5176\u4e2d $c=374$ \u4e3a\u672c\u8d28\u4e0d\u540c\u7ebf\u6027\u57fa\u4e2a\u6570\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int Maxk = 405, Maxn = 100005, p = 1e9 + 7;\nstruct Basis\n{\n\tint val[5];\n\tBasis(void)\n\t{\n\t\tmemset(val, 0, sizeof(val));\n\t}\n\tbool insert(int x)\n\t{\n\t\tfor (int i = 4; i >= 0; i--)\n\t\t\tif (x & (1 << i))\n\t\t\t{\n\t\t\t\tif (val[i]) x ^= val[i];\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tval[i] = x;\n\t\t\t\t\tfor (int j = 0; j < i; j++)\n\t\t\t\t\t\tif (val[j] && val[i] & (1 << j))\n\t\t\t\t\t\t\tval[i] ^= val[j];\n\t\t\t\t\tfor (int j = i + 1; j <= 4; j++)\n\t\t\t\t\t\tif (val[j] & (1 << i))\n\t\t\t\t\t\t\tval[j] ^= val[i];\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\treturn false;\n\t}\n\tint Hash(void)\n\t{\n\t\treturn val[0] | val[1] << 1 | val[2] << 3 | val[3] << 6 | val[4] << 10;\n\t}\n\tvoid init(int x)\n\t{\n\t\tval[0] = x & 1;\n\t\tval[1] = x >> 1 & 3;\n\t\tval[2] = x >> 3 & 7;\n\t\tval[3] = x >> 6 & 15;\n\t\tval[4] = x >> 10 & 31;\n\t}\n}B[Maxn];\nint n, m, cnt, block_ct, edge_cnt, dfn_cnt, dfn[Maxn], root[Maxn], dis[Maxn], cyc[Maxn], bel[Maxn], head[Maxn], trans[Maxk][Maxk], id[Maxn], rk[Maxk];\nbool vis_cyc[Maxn], done[Maxn];\nstruct edg\n{\n\tint nxt, to, w;\n} edge[2 * Maxn];\nvoid add(int x, int y, int w)\n{\n\tedge[++edge_cnt] = (edg){head[x], y, w};\n\thead[x] = edge_cnt;\n}\n\nvoid Dfs(Basis x)\n{\n\tint now = x.Hash();\n\tif (!id[now]) id[now] = ++cnt, rk[cnt] = now;\n\telse return ;\n\tfor (int i = 1; i <= 31; i++)\n\t{\n\t\tBasis tmp = x;\n\t\tif (tmp.insert(i)) Dfs(tmp);\n\t}\n}\nvoid get_trans(void)\n{\n\tfor (int i = 1; i <= cnt; i++)\n\t{\n\t\tBasis tmp_i;\n\t\ttmp_i.init(rk[i]);\n\t\tfor (int j = 1; j <= cnt; j++)\n\t\t{\n\t\t\tBasis tmp_j;\n\t\t\ttmp_j.init(rk[j]);\n\t\t\tbool Done = false;\n\t\t\tfor (int k = 0; k <= 4; k++)\n\t\t\t\tif (tmp_i.val[k])\n\t\t\t\t\tDone |= !tmp_j.insert(tmp_i.val[k]);\n\t\t\tif (!Done) trans[i][j] = id[tmp_j.Hash()];\n\t\t}\n\t}\n}\nvoid dfs(int u, int fa, int now)\n{\n\tbel[u] = now;\n\tdfn[u] = ++dfn_cnt;\n\tfor (int i = head[u]; i; i = edge[i].nxt)\n\t{\n\t\tint to = edge[i].to;\n\t\tif (!bel[to]) dis[to] = dis[u] ^ edge[i].w, dfs(to, u, now);\n\t\telse if (to != 1 && to != fa && dfn[to] < dfn[u])\n\t\t\tdone[now] |= !B[now].insert(dis[to] ^ dis[u] ^ edge[i].w);\n\t}\n}\nlong long f[Maxk], g[Maxk], ans;\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tDfs(*new(Basis));\n\tget_trans();\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tint x, y, w;\n\t\tscanf(\"%d%d%d\", &x, &y, &w);\n\t\tadd(x, y, w);\n\t\tadd(y, x, w);\n\t}\n\tbel[1] = -1;\n\tfor (int i = head[1]; i; i = edge[i].nxt)\n\t{\n\t\tint to = edge[i].to;\n\t\tif (!bel[to]) root[++block_ct] = to, cyc[block_ct] = edge[i].w, dfs(to, 1, block_ct);\n\t\telse\n\t\t{\n\t\t\tint rt = root[bel[to]];\n\t\t\tfor (int j = head[to]; j; j = edge[j].nxt)\n\t\t\t\tif (edge[j].to == rt)\n\t\t\t\t{\n\t\t\t\t\tcyc[bel[to]] = cyc[bel[to]] ^ edge[i].w ^ edge[j].w;\n\t\t\t\t\tvis_cyc[bel[to]] = true;\n\t\t\t\t}\n\t\t}\n\t}\n\tf[1] = 1;\n\tfor (int i = 1; i <= block_ct; i++)\n\t{\n\t\tif (done[i]) continue;\n\t\tmemcpy(g, f, sizeof(long long[cnt + 1]));\n\t\tif (!vis_cyc[i])\n\t\t{\n\t\t\tint now = id[B[i].Hash()];\n\t\t\tfor (int j = 1; j <= cnt; j++)\n\t\t\t\tif (trans[j][now]) (f[trans[j][now]] += g[j]) %= p;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint now1 = id[B[i].Hash()];\n\t\t\tBasis tmp = B[i];\n\t\t\tbool Done = tmp.insert(cyc[i]);\n\t\t\tint now2 = id[tmp.Hash()];\n\t\t\tfor (int j = 1; j <= cnt; j++)\n\t\t\t{\n\t\t\t\tif (trans[j][now1]) (f[trans[j][now1]] += 2 * g[j]) %= p;\n\t\t\t\tif (Done && trans[j][now2]) (f[trans[j][now2]] += g[j]) %= p;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= cnt; i++)\n\t\t(ans += f[i]) %= p;\n\tprintf(\"%lld\", ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1581313405,
        "uid": 49093,
        "name": "_sys",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1299D \u3010Around the World\u3011"
    },
    {
        "content": "\u9996\u5148\u5206\u6790\u9898\u76ee\u6240\u7ed9\u7684\u9650\u5236\uff1a\u6211\u4eec\u5047\u8bbe 1 \u53ea\u5411\u5176\u5b83\u70b9\u8fde\u4e86\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u9650\u5236\u5c31\u76f8\u5f53\u4e8e\u82e5\u5e72\u4e2a\u7b80\u5355\u73af\u7684\u5f02\u6216\u548c\u7b49\u4e8e\u96f6\u3002\u5982\u679c 1 \u5728\u4e00\u4e2a\u4e09\u5143\u73af\u4e2d\uff0c\u90a3\u4e48\u7b80\u5355\u73af\u8fd8\u8981\u52a0\u4e0a 1 \u6240\u5728\u7684\u90a3\u4e2a\u4e09\u5143\u73af\u3002\u4e0d\u96be\u60f3\u5230\u7528 **\u7ebf\u6027\u57fa** \u6765\u7ef4\u62a4\u8fd9\u4e9b\u4fe1\u606f\u3002\n\n\u53e6\u5916\u9898\u76ee\u7ed9\u7684\u6027\u8d28\u975e\u5e38\u5f3a\u3002\u5982\u679c\u628a\u4ece 1 \u8fde\u51fa\u53bb\u7684\u8fb9\u5168\u90fd\u65ad\u5f00\uff0c\u90a3\u4e48\u5c31\u4f1a\u5206\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\uff0c\u800c\u4e14\u6bcf\u4e2a\u8fde\u901a\u5757\u81f3\u591a\u5305\u542b\u4e00\u4e2a\u539f\u6765 1 \u6240\u5728\u7684\u4e09\u8fde\u73af\u3002\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u5f00\u5904\u7406\u3002\n\n\u7ebf\u6027\u57fa\u7ecf\u8fc7\u7ea6\u65e6\u6d88\u5143\u4e4b\u540e\u53ef\u4ee5\u88ab\u552f\u4e00\u8868\u793a\u3002\u901a\u8fc7\u6253\u8868\uff0c\u4e5f\u5c31\u662f\u66b4\u529b\u9009\u62e9 5 \u4e2a\u6570\u5b57\u7ec4\u6210\u7ebf\u6027\u57fa\u53ef\u4ee5\u77e5\u9053\uff0c**\u503c\u57df\u5728 $[0,2^5)$ \u7684\u672c\u8d28\u4e0d\u540c\u7684\u7ebf\u6027\u57fa\u53ea\u6709 374 \u79cd**\u3002\n\n\u8003\u8651 DP\uff0c\u7ed9\u6bcf\u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u7ebf\u6027\u57fa\u8fdb\u884c\u6807\u53f7\uff0c\u518d\u9884\u5904\u7406\u4e24\u4e2a\u7ebf\u6027\u57fa $(x,y)$ \u5408\u5e76\u5728\u4e00\u8d77\u4e4b\u540e\u7684\u7ebf\u6027\u57fa\u7f16\u53f7 $g(x,y)$\u3002\u8bbe $f_{i,j}$ \u4e3a\u5904\u7406\u5230\u7b2c $i$ \u4e2a\u8fde\u901a\u5757\uff0c\u4e14\u5f53\u524d\u6240\u6709\u7b80\u5355\u73af\u7684\u7ebf\u6027\u57fa\u7f16\u53f7\u4e3a $j$ \u7684\u65b9\u6848\u6570\u3002\u6211\u4eec\u6309\u7167\u8fde\u901a\u5757\u5185\u4e0e 1 \u8fde\u63a5\u7684\u8fb9\u6570 $k$ \u6765\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n\u8bbe\u53bb\u6389\u4e0e 1 \u8fde\u63a5\u7684\u8fb9\u540e\uff0c\u7b2c $i$ \u4e2a\u7b80\u5355\u73af\u7684\u7ebf\u6027\u57fa\u4e3a $s_i$\uff0c\u52a0\u4e0a\u540e\u4e3a $t_i$\u3002\n\n- \u5220\u6389\u6240\u6709\u8fb9\uff0c$f_{i,x}\\gets f_{i-1,x}$\n\n- $k=1$ \u65f6\uff0c\u4fdd\u7559\u4e00\u6761\u5408\u6cd5\u8fb9\uff1a$f_{i,g(x,s_i)}\\gets f_{i-1,x}$\n\n- $k=2$ \u65f6\uff0c\u4fdd\u7559\u4e00\u6761\u5408\u6cd5\u8fb9\uff1a$f_{i,g(x,s_i)}\\gets f_{i-1,x}$\n\n- $k=2$ \u65f6\uff0c\u4fdd\u7559\u4e24\u6761\u5408\u6cd5\u8fb9\uff1a$f_{i,g(x,t_i)}\\gets f_{i-1,x}$\n\n\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\u6765\u4f18\u5316\u7a7a\u95f4\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\u867d\u7136\u6709\u4e2a 374 \u7684\u5e38\u6570\uff0c\u4f46\u7531\u4e8e\u5408\u6cd5\u72b6\u6001\u6570\u5f88\u5c11\u6240\u4ee5\u5b9e\u9645\u6548\u7387\u5f88\u9ad8\u3002\n\n[Code](https://www.luogu.com.cn/paste/c83yka5v)",
        "postTime": 1675254806,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1299D\u3010Around the World\u3011"
    },
    {
        "content": "\u6ca1\u5565\u5b9e\u529b\u6765\u7ed9\u5176\u4ed6\u9898\u89e3\uff08\u4ee3\u7801\uff09\u505a\u6ce8\u8fd8\u662f\u53ef\u4ee5\u7684\u3002\n\n\u8003\u8651\u6700\u540e\u4e00\u7bc7\u8be6\u7ec6\u9610\u8ff0\u4e86\u672c\u8d28\u4e0d\u540c\u7ebf\u6027\u57fa\u4e2a\u6570\u4f46\u6ca1\u600e\u4e48\u8bb2 DP \u7684\u9898\u89e3\u3002\n\n\u9996\u5148\u9898\u76ee\u8981\u6c42\u53ea\u80fd\u65ad $1$ \u76f8\u8fde\u7684\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u628a $1$ \u7684\u8fb9\u65ad\u4e86\u518d\u8003\u8651\u54ea\u4e9b\u52a0\u56de\u6765\u3002\n\n\u8003\u8651\u52a0\u4e00\u6761\u8fb9\u5e26\u6765\u7684\u5f71\u54cd\uff0c\u663e\u7136\u4f1a\u5e76\u8fdb\u6765\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u4e5f\u5c31\u4f1a\u5e26\u6765\u4e00\u4e9b\u73af\u3002\n\n\u4e4b\u524d\u5df2\u7ecf\u6709\u4e00\u4e9b\u73af\u6784\u6210\u4e86\u4e2a\u7ebf\u6027\u57fa\uff0c\u5c06\u8fd9\u4e2a\u8fde\u901a\u5757\u5e76\u8fdb\u6765\u663e\u7136\u5c31\u662f\u5c06\u8fd9\u4e24\u4e2a\u7ebf\u6027\u57fa\u5408\u5e76\u3002\n\n\u901a\u8fc7\u8fd9\u7bc7\u5389\u5bb3\u7684\u9898\u89e3\u4f60\u53ef\u4ee5\u51c6\u786e\u7684\u77e5\u9053\u672c\u8d28\u4e0d\u540c\u7ebf\u6027\u57fa\u4e2a\u6570\u4e3a\u9ad8\u65af\u4e8c\u9879\u5f0f\u7cfb\u6570\uff0c\u7b97\u51fa\u6765\u662f $374$\u3002\n\n\u4e8e\u662f\u8003\u8651\u4ee5\u6b64\u4e3a DP \u72b6\u6001\uff0c\u5982\u679c\u8fd9\u9053\u9898\u6bcf\u4e2a\u8fde\u901a\u5757\u548c $1$ \u53ea\u6709\u4e00\u6761\u8fb9\u662f\u7b80\u5355\u7684\uff0c\u5c31\u8003\u8651\u9009\u4e0d\u9009\u8fd9\u6761\u8fb9\u8f6c\u79fb\u5373\u53ef\u3002\n\n\u8865\u4e00\u53e5\uff1a\u9898\u76ee\u8981\u6c42\u5f02\u6216\u548c\u4e0d\u4e3a $0$\uff0c\u4e8e\u662f\u8f6c\u79fb\u7684\u6761\u4ef6\u5c31\u662f\u7ebf\u6027\u57fa\u672c\u8eab\u6ca1\u6709 $0$ \u8fd9\u4e2a\u5143\u7d20\u540c\u65f6\u5408\u5e76\u540e\u4e5f\u4e0d\u4f1a\u4ea7\u751f $0$\uff0c\u8fd9\u662f\u5bb9\u6613\u5224\u65ad\u7684\uff0c\u770b\u63d2\u5165\u662f\u5426\u6210\u529f\u5373\u53ef\u3002\n\n\u4f46\u9898\u76ee\u7ed9\u7684\u6761\u4ef6\u662f\u81f3\u591a\u4e3a\u4e09\u5143\u73af\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u8fde\u901a\u5757\u6700\u591a\u8fde\u4e24\u6761\u8fb9\uff0c\u8fd9\u4e5f\u8fd8\u662f\u80fd\u5904\u7406\u3002\n\n\u73b0\u5728\u53ea\u8003\u8651\u6709\u4e24\u6761\u8fb9\u7684\u8fde\u901a\u5757\uff0c\u6ca1\u6709\u8fb9\u4e0d\u7528\u7ba1\uff0c\u4e00\u6761\u8fb9\u4e4b\u524d\u8bf4\u4e86\u3002\n\n\u90a3\u4e48\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\n\n- \u90fd\u4e0d\u9009\uff0c\u4e0e\u4e00\u6761\u8fb9\u7684\u8fde\u901a\u5757\u4e0d\u9009\u662f\u4e00\u4e2a\u6982\u7387\uff0c\u65b9\u6848\u8d21\u732e\u4e3a $1$\u3002\n- \u9009\u4e00\u4e2a\uff0c\u5c31\u662f\u8fd9\u4e2a\u8fde\u901a\u5757\u4e0d\u8003\u8651\u9876\u5934\u7684\u4e09\u5143\u73af\u7684\u7ebf\u6027\u57fa\uff0c\u65b9\u6848\u8d21\u732e\u4e3a $2$\uff0c\u5bb9\u6613\u53d1\u73b0\u4efb\u52a0\u67d0\u4e00\u6761\u8fb9\u90fd\u7b26\u5408\u6b64\u60c5\u51b5\u3002\n- \u9009\u4e24\u4e2a\uff0c\u76f8\u5f53\u4e8e\u8fd9\u4e2a\u8fde\u901a\u5757\u5168\u90e8\uff0c\u52a0\u4e0a\u4e86\u5934\u9876\u4e09\u5143\u73af\u7684\u7ebf\u6027\u57fa\uff0c\u65b9\u6848\u8d21\u732e\u4e3a $1$\u3002\n\n\u7136\u540e\u5c31\u8f6c\u79fb\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u662f\u5b9e\u73b0\u7ec6\u8282\uff0c\u5efa\u8bae\u5bf9\u7167\u9898\u89e3\u4ee3\u7801\u7406\u89e3\u3002\n\n\u9996\u5148\u662f `input`\uff0c\u6ce8\u610f\u7684\u7ec6\u8282\u662f $1$ \u8fde\u7684\u8fb9\u8981\u65ad\u6389\u4f46\u4e0d\u80fd\u5b8c\u5168\u65ad\uff0c\u4e0d\u7136\u5c31\u5206\u4e0d\u6e05\u54ea\u4e9b\u8fde\u901a\u4e86\u3002\n\n\u4e8e\u662f\u53ea\u7531 $1$ \u5411\u5916\u8fde\u8fb9\u800c\u4ece\u4e0d\u8fde\u5411 $1$\uff0c\u5728\u540e\u9762\u4e0d\u521d\u59cb\u52a0\u5165 $1$ \u5c31\u4f7f\u5176\u4e0d\u4f1a\u88ab\u8003\u8651\u5230\u4e86\u3002\n\n\u7136\u540e\u662f `init`\uff0c\u4e00\u4e2a\u7ebf\u6027\u57fa\u7684\u6240\u6709\u72b6\u6001\u662f\u4e2a\u4e0a\u4e09\u89d2\uff0c\u4f60\u7528\u624b\u6570\u4e00\u4e0b\u5c31\u77e5\u9053\u6709\u5341\u4e94\u4e2a\u5143\u7d20\uff0c\u679a\u4e3e\u540e\u8003\u8651\u53bb\u91cd\u3002\n\n\u6bd4\u8f83\u57fa\u7840\u7684\u65b9\u6cd5\u662f\u7528\u4f4e\u4f4d\u7684\u628a\u9ad8\u4f4d\u6709\u7684\u90fd\u6d88\u6389\uff0c\u5373\u53ea\u8003\u8651\u9664\u5176\u4e2d\u5143\u7d20\u4ee5\u5916\u7684\u5f71\u54cd\u3002\n\n\u53d1\u73b0\u5341\u4e94\u4e2a\u5143\u7d20\u7684\u72b6\u6001\u7528\u4e00\u4e2a `int` \u5c31\u538b\u4e0b\u6765\u4e86\uff0c\u5f88\u65b9\u4fbf\uff0c\u76f4\u63a5\u7528\u8fd9\u4e2a `int ` \u53bb\u91cd\u5373\u53ef\u3002\n\n\u8fd8\u5305\u542b\u4e00\u4e2a\u90e8\u5206\u662f\u5904\u7406\u8fde\u901a\u5757\uff0c\u5224\u65ad\u4e09\u5143\u73af\u5c31\u662f\u4ece $1$ \u51fa\u6765\u7684\u957f\u5ea6\u4e3a $1$ \u4e14\u4e92\u76f8\u6709\u8fb9\uff0c\u9898\u76ee\u4fdd\u8bc1\u4e0d\u7528\u8003\u8651\u5176\u4ed6\u60c5\u51b5\u3002\n\n\u6ce8\u610f\u5224\u73af\u8981\u7ed9\u8fb9\u5b9a\u5411\uff0c\u5426\u5219\u65e0\u5411\u8fb9\u4e24\u8fb9\u90fd\u4e22\u8fdb\u53bb\u5fc5\u5b9a\u4f7f\u5f97\u7ebf\u6027\u57fa\u63d2\u51fa\u6765 $0$\u3002\n\n\u5224\u65ad\u4e24\u7ebf\u6027\u57fa\u80fd\u5426\u5408\u5e76\u662f\u5bb9\u6613\u7684\uff0c\u76f4\u63a5\u4e00\u4e2a\u63d2\u53e6\u4e00\u4e2a\u5373\u53ef\u3002\n\n\u6700\u540e `work` \u5c31\u662f\u8f6c\u79fb\u4e86\uff0c\u76f8\u4fe1\u4e0a\u9762\u7684\u9610\u8ff0\u5df2\u7ecf\u8db3\u591f\u6e05\u695a\uff0c\u770b\u4e00\u4e0b[\u4ee3\u7801](https://www.luogu.com.cn/paste/4d6nmb6a)\u5c31\u80fd\u61c2\u3002\n\n\u4ee5\u4e0a\u3002",
        "postTime": 1646665158,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "CF1299D Around the World"
    }
]