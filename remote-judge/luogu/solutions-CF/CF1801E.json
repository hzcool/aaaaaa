[
    {
        "content": "## \u9898\u610f\n\n\u6709\u4e00\u68f5\u6811\uff0c\u6811\u4e0a\u6709 $n$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u4e0a\u6709\u4e00\u4e2a\u6574\u6570\uff0c\u7b2c $i$ \u4e2a\u70b9\u4e0a\u6570\u5b57\u8303\u56f4\u662f $l_i$ \u5230 $r_i$\u3002\n\n$q$ \u6b21\u8be2\u95ee\u6bcf\u6b21\u4f1a**\u65b0\u589e**\u4e00\u4e2a\u9650\u5236\uff0c\u6bcf\u6b21\u7ed9\u51fa $a,b,c,d$\uff0c\u4fdd\u8bc1 $a\\to b$ \u7684\u957f\u5ea6\u4e0e $c\\to d$ \u7684\u957f\u5ea6\u76f8\u540c\uff0c\u8981\u6c42 $a\\to b$ \u8def\u5f84\u4e0a\u7684\u7b2c $i$ \u4e2a\u70b9\u548c $c\\to d$ \u7b2c $i$ \u4e2a\u70b9\u4e0a\u7684\u6570\u5b57\u76f8\u540c\u3002\n\n\u6bcf\u6b21\u8be2\u95ee\u540e\u8f93\u51fa\u5199\u6570\u5b57\u7684\u65b9\u6848\u6570\u5bf9 $10^9+7$ \u53d6\u6a21\u3002\n\n## \u9898\u89e3\n\n\u6211\u4eec\u628a\u4e24\u4e2a\u9700\u8981\u76f8\u540c\u7684\u70b9\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u3002\u7136\u540e\u5e76\u67e5\u96c6\u6bcf\u4e00\u4e2a\u96c6\u5408\u7684\u8d21\u732e\u5c31\u662f $\\max(0,\\min_{i\\in S}r_i-\\max_{i\\in S}l_i+1)$\uff0c\u7136\u540e\u7b54\u6848\u5c31\u662f\u6240\u6709\u96c6\u5408\u7684\u8d21\u732e\u4e58\u8d77\u6765\u3002\n\n\u7136\u540e\u53ea\u6709 $\\mathcal O(n)$ \u6b21\u6709\u6548\u7684\u5408\u5e76\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ea\u8981\u6bcf\u4e00\u6b21\u5408\u5e76\u7684\u4e24\u4e2a\u70b9\u539f\u6765\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u8fd9\u90e8\u5206\u7684\u590d\u6742\u5ea6\u5c31\u662f\u6b63\u786e\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u8981\u627e\u5230 $a\\to b$ \u8def\u5f84\u4e0a\u548c $c\\to d$ \u8def\u5f84\u4e0a\u7b2c\u4e00\u4e2a\u4e0d\u662f\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u3002\u521a\u624d\u7684\u5e76\u67e5\u96c6\u7528\u6309\u79e9\u5408\u5e76\uff0c\u5c31\u80fd\u77e5\u9053\u6bcf\u4e00\u4e2a\u70b9\u73b0\u5728\u662f\u54ea\u4e00\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u76f4\u63a5\u4e8c\u5206+\u54c8\u5e0c\u5373\u53ef\u3002\n\n\u7136\u540e\u83b7\u53d6 Hash \u7684\u65f6\u5019\u8981\u4e00\u6761\u94fe\u6c42\u548c\uff0c\u94fe\u6c42\u548c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5728 $\\mathcal O(\\log n)$ \u65f6\u95f4\u5185\u5355\u6b21\u8be2\u95ee\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f $\\mathcal O(n\\log^2n)$\u3002\n\n\u6700\u540e\u5c31\u662f\u5728 CF \u4e0a\u7528\u54c8\u5e0c\u4f1a\u4e0d\u4f1a\u88ab\u53c9\u7684\u95ee\u9898\uff0c\u4e8b\u5b9e\u4e0a\u4f60\u4e0d\u8981\u50cfT\u5b9d\u90a3\u6837 hash base \u9009 $10$\uff0c\u968f\u673a\u9009\u4e00\u4e2a\u6570\u5c31\u4e0d\u592a\u4f1a\u88ab\u53c9\u4e86\u3002\n\n## \u4ee3\u7801\n```cpp\nconst int N=2e5+10;\nint n,q,fa[N];vector<int>e[N];\nint sz[N],dfn[N],idfn[N],cnt,top[N],dep[N];\nmint ans=1;int pa[N],l[N],r[N];set<int>ids[N];\nint find(int x){return x==pa[x]?x:pa[x]=find(pa[x]);}\nvoid dfs1(int u){\n\tsz[u]=1;dep[u]=dep[fa[u]]+1;\n\tfor(auto v:e[u])dfs1(v),sz[u]+=sz[v];\n}\nvoid dfs2(int u){\n\tdfn[u]=++cnt,idfn[cnt]=u;\n\tif(!top[u])top[u]=u;\n\tif(!e[u].size())return;\n\tpair<int,int>mx(0,0);for(auto v:e[u])chkmx(mx,mp(sz[v],v));\n\ttop[mx.se]=top[u];dfs2(mx.se);\n\tfor(auto v:e[u])if(v!=mx.se)dfs2(v);\n}\nint lca(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\treturn dep[x]>=dep[y]?y:x;\n}\nint getdep(int x,int d){\n\tassert(dep[x]>=d);\n\twhile(dep[top[x]]>d)x=fa[top[x]];\n\treturn idfn[dfn[top[x]]+d-dep[top[x]]];\n}\nstruct mytree{\n\tstruct BIT{\n\t\tmint t[N];\n\t\tvoid add(int x,mint v){for(;x<=n;x+=lowbit(x))t[x]+=v;}\n\t\tvoid add(int l,int r,mint v){add(l,v);add(r+1,-v);}\n\t\tmint qry(int x){mint res=0;for(;x;x-=lowbit(x))res+=t[x];return res;}\n\t}T;\n\tmint val[N];\n\tvoid mdf(int x,mint v){\n\t\tT.add(dfn[x],dfn[x]+sz[x]-1,v-val[x]);\n\t\tval[x]=v;\n\t}\n\tmint get(int x,int y){\n\t\tassert(dfn[y]<=dfn[x]&&dfn[x]<dfn[y]+sz[y]);\n\t\treturn T.qry(dfn[x])-T.qry(dfn[fa[y]]);\n\t}\n}A,B;mint pw[N],ipw[N];\nint getkth(int u,int v,int l,int k){\n\tint len=dep[u]+dep[v]-2*dep[l]+1;\n\tif(k<=dep[u]-dep[l]+1)return getdep(u,dep[u]-k+1);\n\telse return getdep(v,dep[v]-len+k);\n}\nmint get(int u,int v,int l,int k){\n\tif(k<=dep[u]-dep[l]+1){\n\t\tint up=getdep(u,dep[u]-k+1);\n\t\treturn B.get(u,up)*pw[dep[u]];\n\t}else{\n\t\tint len=dep[u]+dep[v]-2*dep[l]+1;\n\t\tint up=getdep(v,dep[v]-len+k);\n\t\treturn (B.get(u,l)-B.val[l])*pw[dep[u]]+A.get(up,l)*ipw[dep[l]]*pw[dep[u]-dep[l]];\n\t\t// dep[l] -> dep[u]-dep[l]\n\t}\n}\nvoid merge(int x,int y){\n\tx=find(x),y=find(y);\n\tassert(x!=y);\n\tif(ids[x].size()<ids[y].size())swap(x,y);\n\t//insert y -> x\n\tpa[y]=x;\n\tans/=r[y]-l[y]+1;\n\tans/=r[x]-l[x]+1;\n\tchkmx(l[x],l[y]);chkmn(r[x],r[y]);\n\tans*=max(0,r[x]-l[x]+1);\n\tfor(auto u:ids[y])ids[x].insert(u),A.mdf(u,x*pw[dep[u]]),B.mdf(u,x*ipw[dep[u]]);\n}\nsigned main(){\n\tpw[0]=1,pw[1]=rint(N,2*N);for(int i=2;i<N;i++)pw[i]=pw[i-1]*pw[1];\n\tipw[0]=1,ipw[1]=1/pw[1];for(int i=2;i<N;i++)ipw[i]=ipw[i-1]*ipw[1];\n\tread(n);for(int i=2;i<=n;i++)read(fa[i]),e[fa[i]].pb(i);\n\tdfs1(1);dfs2(1);\n\tfor(int i=1;i<=n;i++)read(l[i],r[i]),ans*=r[i]-l[i]+1,pa[i]=i,ids[i].insert(i);\n\tfor(int i=1;i<=n;i++)A.mdf(i,i*pw[dep[i]]),B.mdf(i,i*ipw[dep[i]]);\n\tread(q);while(q--){\n\t\tint a,b,c,d;read(a,b,c,d);\n\t\tint l1=lca(a,b),l2=lca(c,d);\n\t\tint len=dep[a]+dep[b]-2*dep[l1]+1;\n\t\twhile(get(a,b,l1,len)!=get(c,d,l2,len)){\n\t\t\tint l=1,r=len,ans=0;\n\t\t\twhile(l<=r){\n\t\t\t\tif(get(a,b,l1,mid)!=get(c,d,l2,mid))ans=mid,r=mid-1;\n\t\t\t\telse l=mid+1;\n\t\t\t}\n\t\t\tmerge(getkth(a,b,l1,ans),getkth(c,d,l2,ans));\n\t\t}\n\t\twriteln(ans.x);\n\t}\n}\n```",
        "postTime": 1678868691,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "qwq"
    },
    {
        "content": "\n### \u601d\u8def\n\n\u8bbe $x_i$ \u4e3a\u4ece $a$ \u5230 $b$ \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u8282\u70b9\uff0c $y_i$ \u4ece $c$ \u5230 $d$ \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u3002\n\n\u90a3\u4e48\u6bcf\u6b21\u64cd\u4f5c\u5c31\u662f\u4f7f $x_i$ \u7684\u6c7d\u6cb9\u4ef7\u683c\u548c $y_i$ \u4e00\u81f4\uff0c\u8fd9\u4e2a\u4e1c\u897f\u662f\u5177\u6709\u4f20\u9012\u6027\u7684\uff0c\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u76f4\u63a5\u66b4\u529b\u505a\u7684\u590d\u6742\u5ea6\u662f\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\u7684\u3002~~\u592a\u5bf9\u4e0d\u8d771024MB\u7684\u5185\u5b58\u4e86~~\u3002\n\n\u8003\u8651\u7ef4\u62a4\u66f4\u591a\u7684\u4fe1\u606f\u3002\u4e0d\u660e\u663e\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u957f\u5ea6\u4e3a $2^i$ \u7684\u6bb5\u3002\n\n\u5177\u4f53\u5730\uff0c\u8bbe $f2[i][x]$ \u8868\u793a\u4ee5 $x$ \u4e3a\u7aef\u70b9\u7684\u5411\u4e0a\u957f\u5ea6\u4e3a $2^i$ \u7684\u7684\u6bb5\u6240\u5728\u7684\u96c6\u5408\uff08\u65b9\u5411\u5411\u4e0a\uff09\uff0c $f2[i][x+n]$ \u8868\u793a\u4ee5 $x$ \u4e3a\u7aef\u70b9\u7684\u5411\u4e0a\u957f\u5ea6\u4e3a $2^i$ \u7684\u7684\u6bb5\uff08\u65b9\u5411\u5411\u4e0b\uff09\u6240\u5728\u7684\u96c6\u5408\u3002\n\n\u4ecd\u7136\u8003\u8651\u66b4\u529b\u5408\u5e76\u4e24\u4e2a\u957f\u5ea6\u4e3a $2^i$ \u7684\u6bb5\uff1a\n\n1. \u82e5 $i=0$ \u5219\u76f4\u63a5\u5408\u5e76\u4e24\u4e2a\u70b9\u3002\n\n2. \u82e5 $f2[i][x]$ \u548c $f2[i][y]$ \u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u76f4\u63a5\u9000\u51fa\u3002\n\n3. \u5426\u5219\u9012\u5f52\u5206\u522b\u5408\u5e76\u4e24\u4e2a\u957f\u5ea6 $2^{i-1}$ \u7684\u6bb5\uff0c\u5e76\u5408\u5e76 $f2[i][x]$ \u548c $f2[i][y]$ \u6240\u5728\u7684\u96c6\u5408\u3002\n\n\u5728\u5b9e\u9645\u4e2d\u5408\u5e76\u4e24\u4e2a\u9006\u5411\u7684\u6bb5\u548c\u5408\u5e76\u4e24\u4e2a\u540c\u5411\u7684\u6bb5\u7565\u6709\u4e0d\u540c\uff0c\u8bf7\u8bfb\u8005\u6ce8\u610f\u3002\n\n\u66b4\u529b\u5408\u5e76\u4e24\u4e2a\u70b9\uff1a\n\n```cpp\n// \u5408\u5e76\u4e24\u4e2a\u70b9\nvoid merge(int x,int y){\n    x=find(x,f1),y=find(y,f1);\n    if(x==y)return;\n    ans=1ll*ans*1ll*ksm(max(0ll,1ll*(R[x]-L[x]+1)),mod-2)%mod;\n    ans=1ll*ans*1ll*ksm(max(0ll,1ll*(R[y]-L[y]+1)),mod-2)%mod; // \u64a4\u9500\u8d21\u732e\n    f1[x]=y;\n    L[y]=max(L[x],L[y]);\n    R[y]=min(R[x],R[y]);\n    ans=1ll*ans*1ll*1ll*max(0ll,1ll*(R[y]-L[y]+1))%mod; // \u52a0\u4e0a\u65b0\u8d21\u732e\n}\n```\n\n\u66b4\u529b\u5408\u5e76\u4e24\u4e2a\u957f\u5ea6\u4e3a $2^i$ \u7684\u540c\u5411\u6bb5\uff1a\n\n```cpp\n// \u5408\u5e76\u540c\u5411\u7b49\u957f\u6bb5\nvoid merge1(int x,int y,int ith){\n    if(find(x,f2[ith])==find(y,f2[ith]))return; // \u526a\u679d\n    if(ith==0)return merge(x,y),void(); // \u76f4\u63a5\u5408\u5e76\n    f2[ith][find(x,f2[ith])]=find(y,f2[ith]); // \u5e76\u67e5\u96c6\u5408\u5e76\n    merge1(x,y,ith-1);\n    merge1(ST[x][ith-1],ST[y][ith-1],ith-1); // \u66b4\u529b\u5408\u5e76\u4e24\u4e2a\u5b50\u6bb5\n}\n```\n\n\u66b4\u529b\u5408\u5e76\u4e24\u4e2a\u957f\u5ea6\u4e3a $2^i$ \u7684\u9006\u5411\u6bb5\uff1a\n\n```cpp\n// \u5408\u5e76\u9006\u5411\u7b49\u957f\u6bb5\nvoid merge2(int x,int y,int ith){\n    if(find(x,f2[ith])==find(y+n,f2[ith]))return; // \u526a\u679d\n    if(ith==0)return merge(x,y),void();\n    f2[ith][find(x+n,f2[ith])]=find(y,f2[ith]);// \u5e76\u67e5\u96c6\u5408\u5e76\n    f2[ith][find(x,f2[ith])]=find(y+n,f2[ith]);\n    merge2(x,ST[y][ith-1],ith-1); // \u4e0e\u5408\u5e76\u540c\u5411\u7b49\u957f\u6bb5\u4e0d\u540c\n    merge2(ST[x][ith-1],y,ith-1); // \u66b4\u529b\u5408\u5e76\u4e24\u4e2a\u5b50\u6bb5\n}\n```\n\n### \u603b\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN=2e5+11,mod=1e9+7;\n\nint ST[MAXN][18],depth[MAXN];\n\nint h[MAXN],nt[MAXN<<1],to[MAXN<<1],linkcnt;\n\nint L[MAXN],R[MAXN],n,ans=1;\n\nint f1[MAXN],f2[18][MAXN<<1];\n\nint ksm(int x,int y){\n    int cur=1;\n    for(;y;y>>=1,x=1ll*x*x%mod)if(y&1)cur=1ll*cur*x%mod;\n    return cur;\n}\n\n// UNION_FIND_SETS\nint find(int u,int *UNION_FIND_SETS){\n    return UNION_FIND_SETS[u]==u?u:UNION_FIND_SETS[u]=find(UNION_FIND_SETS[u],UNION_FIND_SETS);\n}\n\nvoid link(int u,int v){\n    nt[++linkcnt]=h[u],h[u]=linkcnt,to[linkcnt]=v;\n}\n\nvoid dfs_init(int u,int father){\n    depth[u]=depth[father]+1;\n\n    f1[u]=u;\n    for(int i=0; i<=17; i++)\n        f2[i][u]=u,f2[i][u+n]=u+n;\n\n    ST[u][0]=father;\n    for(int i=1; i<=17; i++)\n        ST[u][i]=ST[ST[u][i-1]][i-1];\n\n    for(int i=h[u]; i; i=nt[i]){\n        if(to[i]==father)continue;\n        dfs_init(to[i],u);\n    }\n}\n\nint LCA(int u,int v){\n    if(depth[u]<=depth[v])swap(u,v);\n    for(int i=17; i>=0; i--)if(depth[ST[u][i]]>=depth[v])u=ST[u][i];\n    if(u==v)return u;\n    for(int i=17; i>=0; i--)if(ST[u][i]!=ST[v][i])u=ST[u][i],v=ST[v][i];\n    return ST[u][0];\n}\n\nint kth_fa(int u,int dist){\n    for(int i=0; i<=17; i++)\n        if(((1<<i)&dist))u=ST[u][i];\n    return u;\n}\n\n// \u5408\u5e76\u4e24\u4e2a\u70b9\nvoid merge(int x,int y){\n    x=find(x,f1),y=find(y,f1);\n    if(x==y)return;\n    ans=1ll*ans*1ll*ksm(max(0ll,1ll*(R[x]-L[x]+1)),mod-2)%mod;\n    ans=1ll*ans*1ll*ksm(max(0ll,1ll*(R[y]-L[y]+1)),mod-2)%mod;\n    f1[x]=y;\n    L[y]=max(L[x],L[y]);\n    R[y]=min(R[x],R[y]);\n    ans=1ll*ans*1ll*1ll*max(0ll,1ll*(R[y]-L[y]+1))%mod;\n}\n\n// \u5408\u5e76\u540c\u5411\u7b49\u957f\u6bb5\nvoid merge1(int x,int y,int ith){\n    if(find(x,f2[ith])==find(y,f2[ith]))return;\n    if(ith==0)return merge(x,y),void();\n    f2[ith][find(x,f2[ith])]=find(y,f2[ith]);\n    merge1(x,y,ith-1);\n    merge1(ST[x][ith-1],ST[y][ith-1],ith-1);\n}\n\n// \u5408\u5e76\u9006\u5411\u7b49\u957f\u6bb5\nvoid merge2(int x,int y,int ith){\n    if(find(x,f2[ith])==find(y+n,f2[ith]))return;\n    if(ith==0)return merge(x,y),void();\n    f2[ith][find(x+n,f2[ith])]=find(y,f2[ith]);\n    f2[ith][find(x,f2[ith])]=find(y+n,f2[ith]);\n    merge2(x,ST[y][ith-1],ith-1);\n    merge2(ST[x][ith-1],y,ith-1);\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=2; i<=n; i++){\n        static int f;\n        scanf(\"%d\",&f);\n        link(f,i);\n    }\n    dfs_init(1,0);\n    for(int i=1; i<=n; i++){\n        scanf(\"%d %d\",&L[i],&R[i]);\n        ans=1ll*1ll*ans*max(0ll,1ll*(R[i]-L[i]+1))%mod;\n    }\n    int Q_sum;\n    scanf(\"%d\",&Q_sum);\n    for(int Text=1; Text<=Q_sum; Text++){\n        int a,b,c,d,lca_of_a_b,lca_of_c_d,T;\n        scanf(\"%d %d %d %d\",&a,&b,&c,&d);\n        \n        lca_of_a_b=LCA(a,b);\n        lca_of_c_d=LCA(c,d);\n        \n        // \u5408\u5e76\u540c\u5411\u7b49\u957f\u6bb5\n        T=min(depth[a]-depth[lca_of_a_b],depth[c]-depth[lca_of_c_d]);\n        for(int i=17; i>=0; i--)if((T&(1<<i)))merge1(a,c,i),a=ST[a][i],c=ST[c][i];\n\n        T=min(depth[b]-depth[lca_of_a_b],depth[d]-depth[lca_of_c_d]);\n        for(int i=17; i>=0; i--)if((T&(1<<i)))merge1(b,d,i),b=ST[b][i],d=ST[d][i];\n\n        // \u5408\u5e76\u9006\u5411\u7b49\u957f\u6bb5\n        if(a==lca_of_a_b){\n            T=depth[b]-depth[lca_of_a_b]+1;\n            for(int i=17; i>=0; i--){\n                if((T&(1<<i))){\n                    T^=(1<<i);\n                    merge2(b,kth_fa(c,T),i);\n                    b=ST[b][i];\n                }\n            }\n        }\n        else{\n            T=depth[a]-depth[lca_of_a_b]+1;\n            for(int i=17; i>=0; i--){\n                if((T&(1<<i))){\n                    T^=(1<<i);\n                    merge2(a,kth_fa(d,T),i);\n                    a=ST[a][i];\n                }\n            }\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1678843841,
        "uid": 740607,
        "name": "__ODT__",
        "ccfLevel": 0,
        "title": "CF1801E/CF1802G"
    },
    {
        "content": "\u9996\u5148\u6709\u4e00\u4e2a\u5de8 tm \u6076\u5fc3\u7684\u6811\u5256\u540e\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6b63\u53cd\u533a\u95f4\u54c8\u5e0c\u518d\u52a0\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u505a\u6cd5\uff0c\u8d5b\u65f6\u4e00\u773c\u770b\u4e86\u51fa\u6765\u4f46\u662f\u8fd9\u548b\u5199\u554a\u2026\u2026\n\n\u8003\u8651\u628a dfs \u5e8f reverse \u4e00\u4e0b\u62fc\u5728\u540e\u9762\uff0c\u5219\u6211\u4eec\u73b0\u5728\u53ea\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u533a\u95f4\u7684\u5bf9\u5e94\u9879\u5728\u533a\u95f4\u4e2d\u7684\u5408\u5e76\u3002\n\n\u4eba\u7c7b\u667a\u6167\u5730\uff0c\u8003\u8651\u5c06\u533a\u95f4 $[l, r]$ \u7c7b\u4f3c ST \u8868\u5730\u62c6\u6210\u4e24\u4e2a\u957f\u4e3a $2^t$ \u7684\u533a\u95f4\uff0c\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u957f\u4e3a $2$ \u7684\u5e42\u7684\u533a\u95f4\u5408\u5e76\u3002\n\n\u8003\u8651\u5206\u6cbb\u4e0b\u53bb\u3002\u5bf9\u4e8e $[x, x + 2^t - 1], [y, y + 2^t - 1]$ \u7684\u5408\u5e76\uff0c\u5f53 $t = 0$\uff0c\u6211\u4eec\u5728\u6700\u5e95\u5c42\u5e76\u67e5\u96c6\u4e0a\u8fdb\u884c\u64cd\u4f5c\u5373\u53ef\uff1b\u5426\u5219\u5728 $t$ \u8fd9\u5c42\u5e76\u67e5\u96c6\u4e0a\u8fdb\u884c\u5408\u5e76\uff0c\u82e5\u6210\u529f\u5730\u8fdb\u884c\u4e00\u6b21\u5408\u5e76\u64cd\u4f5c\u5219\u5c06\u5176\u4e0b\u4f20\u5230 $(x, y, t - 1), (x + 2^{t - 1}, y + 2^{t - 1}, t - 1)$ \u7ee7\u7eed\u5408\u5e76\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((n + m) \\log^2 n)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <vector>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long ll;\n\ntypedef struct {\n\tint nxt;\n\tint end;\n} Edge;\n\nconst int mod = 1e9 + 7;\nint cnt = 0;\nll ans = 1;\nint root[27][400007], fa[200007], head[200007], depth[200007], size[200007], hs[200007], dfn[200007], top[200007], l[200007], r[200007], L[400007], R[400007];\nEdge edge[200007];\n\ninline void init(int n){\n\tint m = log2(n);\n\tfor (register int i = 0; i <= m; i++){\n\t\tfor (register int j = 1; j <= n; j++){\n\t\t\troot[i][j] = j;\n\t\t}\n\t}\n}\n\ninline int read(){\n\tint ans = 0;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9'){\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9'){\n\t\tans = ans * 10 + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn ans;\n}\n\ninline void add_edge(int start, int end){\n\tcnt++;\n\tedge[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge[cnt].end = end;\n}\n\nvoid dfs1(int u){\n\tdepth[u] = depth[fa[u]] + 1;\n\tsize[u] = 1;\n\tfor (register int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tdfs1(x);\n\t\tsize[u] += size[x];\n\t\tif (hs[u] == 0 || size[hs[u]] < size[x]) hs[u] = x;\n\t}\n}\n\nvoid dfs2(int u, int cur_top, int &id){\n\tdfn[u] = ++id;\n\ttop[u] = cur_top;\n\tif (hs[u] != 0){\n\t\tdfs2(hs[u], cur_top, id);\n\t\tfor (register int i = head[u]; i != 0; i = edge[i].nxt){\n\t\t\tint x = edge[i].end;\n\t\t\tif (x != hs[u]) dfs2(x, x, id);\n\t\t}\n\t}\n}\n\ninline ll sqr(int n){\n\treturn (ll)n * n % mod;\n}\n\nint get_root(int x, int y){\n\tif (root[x][y] == y) return y;\n\treturn root[x][y] = get_root(x, root[x][y]);\n}\n\ninline ll quick_pow(ll x, ll p, ll mod){\n\tll ans = 1;\n\twhile (p){\n\t\tif (p & 1) ans = ans * x % mod;\n\t\tx = x * x % mod;\n\t\tp >>= 1;\n\t}\n\treturn ans;\n}\n\ninline void merge1(int k, int x, int y){\n\tint x_root = get_root(k, x), y_root = get_root(k, y);\n\tif (x_root != y_root){\n\t\troot[k][x_root] = y_root;\n\t\tif (k == 0){\n\t\t\tans = ans * quick_pow((ll)max(R[x_root] - L[x_root] + 1, 0) * max(R[y_root] - L[y_root] + 1, 0) % mod, mod - 2, mod) % mod;\n\t\t\tL[y_root] = max(L[y_root], L[x_root]);\n\t\t\tR[y_root] = min(R[y_root], R[x_root]);\n\t\t\tans = ans * max(R[y_root] - L[y_root] + 1, 0) % mod;\n\t\t} else {\n\t\t\tk--;\n\t\t\tmerge1(k, x, y);\n\t\t\tmerge1(k, x + (1 << k), y + (1 << k));\n\t\t}\n\t}\n}\n\ninline vector<pair<int, int> > get_segment(int u, int v, int n){\n\tint op = 0, size;\n\tvector<pair<int, int> > ans, vec[7];\n\twhile (top[u] != top[v]){\n\t\tif (depth[top[u]] < depth[top[v]]){\n\t\t\tswap(u, v);\n\t\t\top ^= 1;\n\t\t}\n\t\tvec[op].push_back(make_pair(dfn[top[u]], dfn[u]));\n\t\tu = fa[top[u]];\n\t}\n\tif (depth[u] < depth[v]){\n\t\tswap(u, v);\n\t\top ^= 1;\n\t}\n\tvec[op].push_back(make_pair(dfn[v], dfn[u]));\n\tsize = vec[0].size();\n\tfor (register int i = 0; i < size; i++){\n\t\tans.push_back(make_pair(n - vec[0][i].second + 1, n - vec[0][i].first + 1));\n\t}\n\tfor (register int i = (int)vec[1].size() - 1; i >= 0; i--){\n\t\tans.push_back(vec[1][i]);\n\t}\n\treturn ans;\n}\n\ninline void merge2(int l1, int l2, int k){\n\tint t = log2(k);\n\tmerge1(t, l1, l2);\n\tmerge1(t, l1 + k - (1 << t), l2 + k - (1 << t));\n}\n\nint main(){\n\tint n = read(), k = n * 2, id = 0, m;\n\tinit(k);\n\tfor (register int i = 2; i <= n; i++){\n\t\tfa[i] = read();\n\t\tadd_edge(fa[i], i);\n\t}\n\tdfs1(1);\n\tdfs2(1, 1, id);\n\tfor (register int i = 1; i <= n; i++){\n\t\tl[i] = read();\n\t\tr[i] = read();\n\t\tans = ans * sqr(r[i] - l[i] + 1) % mod;\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tint t = k - dfn[i] + 1;\n\t\tL[dfn[i]] = L[t] = l[i];\n\t\tR[dfn[i]] = R[t] = r[i];\n\t\tmerge1(0, dfn[i], t);\n\t}\n\tm = read();\n\tfor (register int i = 1; i <= m; i++){\n\t\tint a = read(), b = read(), c = read(), d = read();\n\t\tvector<pair<int, int> > v1 = get_segment(a, b, k), v2 = get_segment(c, d, k);\n\t\twhile (!v1.empty() && !v2.empty()){\n\t\t\tint len1, len2, len3;\n\t\t\tpair<int, int> &pr1 = v1.back(), &pr2 = v2.back();\n\t\t\tlen1 = pr1.second - pr1.first + 1;\n\t\t\tlen2 = pr2.second - pr2.first + 1;\n\t\t\tlen3 = min(len1, len2);\n\t\t\tmerge2(pr1.second - len3 + 1, pr2.second - len3 + 1, len3);\n\t\t\tif (len1 == len3){\n\t\t\t\tv1.pop_back();\n\t\t\t} else {\n\t\t\t\tpr1.second -= len3;\n\t\t\t}\n\t\t\tif (len2 == len3){\n\t\t\t\tv2.pop_back();\n\t\t\t} else {\n\t\t\t\tpr2.second -= len3;\n\t\t\t}\n\t\t}\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1678431765,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1801E \u3010Gasoline prices\u3011"
    },
    {
        "content": "~~cf \u6700\u4f18\u89e3\uff0c\u563f\u563f~~\n\n~~\u4e0d\u662f\u4e3a\u4ec0\u4e48\u6211 $\\text{base}=251$ \u6ca1\u88ab\u53c9~~\n\n\u672c\u505a\u6cd5\u4e3a\u7ecf\u5178\u7684\u6811\u94fe\u5256\u5206 $+$ \u54c8\u5e0c\uff0c\u4f46\u662f\u662f\u4e00\u79cd\u6bd4\u9898\u89e3\u533a\u73b0\u6709\u9898\u89e3\u5e38\u6570\u66f4\u5c0f\u7684\u89e3\u6cd5\u3002\n\n---\n\n\u9996\u5148\u6211\u4eec\u628a\u8fd9\u4e2a\u95ee\u9898\u53d8\u6210\u5e8f\u5217\u4e0a\u7684\u95ee\u9898\u3002\n\n\u6211\u4eec\u628a\u539f\u5e8f\u5217 $\\text{reverse}$ \u4e00\u4e0b\u63a5\u5230\u539f\u5e8f\u5217\u7684\u672b\u5c3e\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5982\u679c\u628a $1$ \u5f53\u4f5c\u6839\uff0c\u90a3\u4e48\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u5c31\u662f\u4ece\u4e0b\u81f3\u4e0a\u7684\u4e00\u6761\u8def\u5f84\u548c\u4ece\u4e0a\u81f3\u4e0b\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u6811\u5256\uff0c\u4ece\u4e0b\u81f3\u4e0a\u7684 $O(\\log n)$ \u6bb5 $\\text{dfs}$ \u5e8f\u9012\u51cf\u4e0d\u597d\u7ef4\u62a4\uff0c\u6211\u4eec\u628a\u4ed6\u5bf9\u5e94\u4e3a $\\text{reverse}$ \u540e\u7684\u4e00\u6bb5\uff0c\u4ece\u4e0a\u5230\u4e0b\u7684 $O(\\log n)$ \u6bb5 $\\text{dfs}$ \u5e8f\u9012\u589e\uff0c\u81ea\u7136\u53ef\u4ee5\u5f62\u6210 $O(\\log n)$ \u4e2a\u533a\u95f4\u3002\n\n\u6700\u540e\u5c31\u53d8\u6210\u4e86\u533a\u95f4\u4e0a\u7684\u95ee\u9898\uff0c\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ninline int ano(int x) { return (n << 1) - x + 1; }\ninline vector<pair<int, int>> geta(int u, int g) { //\u4ece\u4e0b\u81f3\u4e0a\u7684\u8def\u5f84\u62c6\u5206\n    vector<pair<int, int>> ans;\n    while (top[u] != top[g])\n        ans.push_back({ano(dfn[u]), ano(dfn[top[u]])}), u = fat[top[u]];\n    return ans.push_back({ano(dfn[u]), ano(dfn[g])}), ans;\n}\ninline vector<pair<int, int>> getb(int u, int g) { //\u4ece\u4e0a\u81f3\u4e0b\u7684\u8def\u5f84\u62c6\u5206\n    vector<pair<int, int>> ans2;\n    while (top[u] != top[g])\n        ans2.push_back({dfn[top[u]], dfn[u]}), u = fat[top[u]];\n    if (u != g) ans2.push_back({dfn[g] + 1, dfn[u]});\n    reverse(ans2.begin(), ans2.end());\n    return ans2;\n}\n```\n---\n\n\u63a5\u7740\u8003\u8651\u5e8f\u5217\u4e0a\u7684\u95ee\u9898\uff0c~~\u7136\u800c\u8d5b\u65f6 cmk \u544a\u8bc9\u4e86\u6211\u5047\u9898\u9762\uff0c\u574f~~\uff0c\u6211\u4eec\u53d1\u73b0\u603b\u7684\u6709\u6548\u5408\u5e76\u6b21\u6570\u662f $O(n)$ \u6b21\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u8981\u5feb\u901f\u5b9a\u4f4d\u5230\u8fd9 $O(n)$ \u6b21\u5408\u5e76\u3002\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u6211\u4eec\u4f7f\u7528\u54c8\u5e0c\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06 $\\text{hash}_{l,r}= \\sum_{x=l}^rf(\\text{id}_x)\\times \\text{base}^x$\uff0c$\\text{id}$ \u8868\u793a $x$ \u6240\u5728\u96c6\u5408\u7f16\u53f7\uff0c$f$ \u662f\u968f\u673a\u6620\u5c04\u51fd\u6570\uff0c\u8fd9\u4e2a\u4e1c\u897f\u662f\u597d\u7528\u6811\u72b6\u6570\u7ec4 $+$ \u542f\u53d1\u5f0f\u5408\u5e76\u6765\u7ef4\u62a4\u7684\u3002\n\n\u5047\u5982\u6211\u4eec\u8981\u5408\u5e76 $[l_1,r_1]$ \u4e0e $[l_2,r_2]$ \u4e14\u4ed6\u4eec\u7684\u54c8\u5e0c\u4e0d\u540c\uff0c\u90a3\u4e48\u6211\u4eec\uff1a\n\n1. $l_1 = r_1$ \u65f6\u5408\u5e76 $l_1,l_2$ \u5373\u53ef;\n2. \u5426\u5219\u4ee4 $mid_1 = \\lfloor\\dfrac{l_1+r_1}2\\rfloor,mid_2 = \\lfloor\\dfrac{l_2+r_2}2\\rfloor$ \u9012\u5f52\u5224\u5b9a $[l_1, mid_1] \\& [l_2,mid_2]$ \u4e0e $(mid_1,r_1] \\& (mid_2,r_2]$ \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2n)$\uff0c\u4f46\u662f\u74f6\u9888\u5904\u7684 $\\log$ \u6765\u81ea\u4e8e $\\text{dsu}$\uff0c\u6811\u94fe\u5256\u5206\u548c\u6811\u72b6\u6570\u7ec4\uff0c\u8dd1\u5f97\u98de\u5feb\u3002",
        "postTime": 1681992552,
        "uid": 615348,
        "name": "zhouershan",
        "ccfLevel": 7,
        "title": "CF1801E"
    }
]