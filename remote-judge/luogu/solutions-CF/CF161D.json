[
    {
        "content": "# \u6109\u5feb\u7684\u4e00\u9898\u591a\u89e3\n\n### \u6811\u5f62$dp$\n\n\u7531\u4e8e$k$\u9650\u5236\u5728\u4e86$500$\u7684\u8303\u56f4\u4e4b\u5185\uff0c\u6240\u4ee5\u513f\u5b50\u8282\u70b9\u72b6\u6001\u7684\u66b4\u529b\u5408\u5e76\u5b9e\u9645\u4e0a\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u8fd9\u5c31\u662f\u6811\u5f62$dp$\u7684\u505a\u6cd5\u4e86\u3002\n\n\u590d\u6742\u5ea6$O(nk)$\n\n\u90e8\u5206\u4ee3\u7801\uff1a\n\n```cpp\n//LINK(i,g,pos)\u6307\u5728\u56feg\u4e2d\u7528\u53d8\u91cfi\u904d\u5386\u70b9pos\u6240\u8fde\u8fb9\n//RPT(i,st,en)\u6307for (int i=st;i<en;++i)\u8ba1\u6570\u5faa\u73af\n//\u4e0b\u540c\nvoid dfs(int pos,int f)\n{\n\tdp[pos][0]=1;\n\tLINK(i,g,pos)\n\t\tif (g.to[i]!=f)\n\t\t{\n\t\t\tdfs(g.to[i],pos);\n\t\t\tRPT(j,0,k)\n\t\t\t\tans+=dp[g.to[i]][j]*dp[pos][k-j-1];\n\t\t\tRPT(j,0,k)\n\t\t\t\tdp[pos][j+1]+=dp[g.to[i]][j];\n\t\t}\n}\n```\n\n\n### \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\n\n\u5982\u679c\u4e0d\u9650\u5236$k$\u5462\uff1f\u90a3\u4e48\u5b50\u6811\u66b4\u529b\u5408\u5e76\u7684\u65f6\u95f4\u4ee3\u4ef7\u5c31\u96be\u4ee5\u627f\u53d7\u3002\u4e0d\u8fc7\uff0c\u4fdd\u7559\u91cd\u513f\u5b50\u72b6\u6001\u7684$dsu~on~tree$\u505a\u6cd5\u80fd\u505a\u5230$O(nlogn)$\u7684\u4f18\u79c0\u590d\u6742\u5ea6\u3002\n\n\u90e8\u5206\u4ee3\u7801\uff1a\n\n```cpp\n//son\u6570\u7ec4\u4e3a\u91cd\u513f\u5b50\uff0c\u5728dfs1\u4e2d\u5df2\u9884\u5904\u7406\nvoid calc(int pos,int top)\n{\n\tans+=buc[k-depth[pos]+2*depth[top]];\n\tLINK(i,g,pos)\n\t\tif (g.to[i]!=pa[pos])\n\t\t\tcalc(g.to[i],top);\n}\n\nvoid add(int pos)\n{\n\tbuc[depth[pos]]++;\n\tLINK(i,g,pos)\n\t\tif (g.to[i]!=pa[pos])\n\t\t\tadd(g.to[i]);\n}\n\nvoid del(int pos)\n{\n\tbuc[depth[pos]]=0;\n\tLINK(i,g,pos)\n\t\tif (g.to[i]!=pa[pos])\n\t\t\tdel(g.to[i]);\n}\n\nvoid dfs2(int pos,int topf)\n{\n\tLINK(i,g,pos)\n\t\tif (g.to[i]!=son[pos] && g.to[i]!=pa[pos])\n\t\t\tdfs2(g.to[i],g.to[i]);\n\tif (son[pos])\n\t\tdfs2(son[pos],topf);\n\tans+=buc[depth[pos]+k];\n\tbuc[depth[pos]]++;\n\tLINK(i,g,pos)\n\t\tif (g.to[i]!=son[pos] && g.to[i]!=pa[pos])\n\t\t{\n\t\t\tcalc(g.to[i],pos);\n\t\t\tadd(g.to[i]);\n\t\t}\n\tif (pos==topf)\n\t\tdel(pos);\n}\n```\n\n### \u957f\u94fe\u5256\u5206\n\n\u9274\u4e8e\u72b6\u6001\u662f\u548c\u6df1\u5ea6\u76f8\u5173\u7684\uff0c\u90a3\u4e48\u81ea\u7136\u800c\u7136\u5730\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u957f\u94fe\u5256\u5206\u53bb\u505a\u8fd9\u9898\u3002\u601d\u60f3\u548c\u6811\u5f62$dp$\u7c7b\u4f3c\uff0c\u4f46\u901a\u8fc7\u6307\u9488\u7684\u7075\u6d3b\u8fd0\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u518d\u505a\u7e41\u7410\u7684\u8f6c\u79fb\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u4f18\u79c0$O(n)$\n\n\u90e8\u5206\u4ee3\u7801\uff1a\n\n```cpp\n//son\u4e3a\u957f\u513f\u5b50\u6570\u7ec4\n//len\u4e3a\u5b50\u6811\u6df1\u5ea6\u6570\u7ec4\uff08\u53f6\u5b50\u8282\u70b9\u4e3a1\uff09\n//ptr\u4e3a\u6307\u9488\u6570\u7ec4\nvoid add(int pos,int to)\n{\n\tRPT(i,max(0,k-len[pos]),min(len[to],k))\n\t\tans+=ptr[to][i]*ptr[pos][k-i-1];\n\tRPT(i,0,len[to])\n\t\tptr[pos][i+1]+=ptr[to][i];\n}\n\nvoid dfs2(int pos,int topf)\n{\n\tif (pos==topf)\n\t{\n\t\tptr[pos]=pool+cnt;\n\t\tcnt+=len[pos];\n\t}\n\telse\n\t\tptr[pos]=ptr[pa[pos]]+1;\n\tLINK(i,g,pos)\n\t\tif (g.to[i]!=son[pos] && g.to[i]!=pa[pos])\n\t\t\tdfs2(g.to[i],g.to[i]);\n\tif (son[pos])\n\t\tdfs2(son[pos],topf);\n\tif (k<len[pos])\n\t\tans+=ptr[pos][k];\n\tptr[pos][0]++;\n\tLINK(i,g,pos)\n\t\tif (g.to[i]!=son[pos] && g.to[i]!=pa[pos])\n\t\t\tadd(pos,g.to[i]);\n}\n```\n\n### \u70b9\u5206\u6cbb\n\n\u662f\u65f6\u5019\u796d\u51fa\u70b9\u5206\u6cbb\u4e86\u3002\n\n\u90e8\u5206\u4ee3\u7801\uff1a\n\n```cpp\nvoid getdis(int pos,int f,int len)\n{\n\tif (len>k)\n\t\treturn;\n\tdis[cnt++]=len;\n\tLINK(i,g,pos)\n\t\tif (g.to[i]!=f && !visit[g.to[i]])\n\t\t\tgetdis(g.to[i],pos,len+1);\n}\n\nvoid conquer(int pos)\n{\n\tLINK(i,g,pos)\n\t\tif (!visit[g.to[i]])\n\t\t{\n\t\t\tint tmp=cnt;\n\t\t\tgetdis(g.to[i],pos,1);\n\t\t\tRPT(j,tmp,cnt)\n\t\t\t\tans+=buc[k-dis[j]];\n\t\t\tRPT(j,tmp,cnt)\n\t\t\t\tbuc[dis[j]]++;\n\t\t}\n\tRPT(j,0,cnt)\n\t\tbuc[dis[j]]--;\n\tcnt=0;\n}\n\nvoid divide(int pos)\n{\n\tbuc[0]=1;\n\tconquer(pos);\n\tvisit[pos]=true;\n\tLINK(i,g,pos)\n\t\tif (!visit[g.to[i]])\n\t\t{\n\t\t\tcore=0;\n\t\t\tsumsize=size[pos];\n\t\t\tmx[0]=INF; \n\t\t\tgetcore(g.to[i],pos);\n\t\t\tdivide(core);\n\t\t}\n}\n```\n\n\n\n### update 2021/2/14: \u4fee\u6b63\u9519\u8bef\n",
        "postTime": 1565320406,
        "uid": 56267,
        "name": "Rhodoks",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF161D \u3010Distance in Tree\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\n\n\u8f93\u5165\u70b9\u6570\u4e3aN\u7684\u4e00\u68f5\u6811\uff0c\u6c42\u6811\u4e0a\u957f\u5ea6\u6070\u597d\u4e3aK\u7684\u8def\u5f84\u4e2a\u6570\n\n---\n\n```\n    A\n   / \\\n  B   C\n     / \\\n    D   E\n```\n\n\u6211\u4eec\u5148dp\u51fa $u$ \u8282\u70b9\u5230 $u$ \u5b50\u6811\u5185\u7684\u53f6\u5b50\u7684\u90a3\u79cd\u94fe\uff08\u6bd4\u5982$A\\leftrightarrow B$ , $A \\leftrightarrow C \\leftrightarrow D$ \uff09\u7684\u957f\u5ea6 $i$ \u4ee5\u53ca\u5176\u4e2a\u6570\uff0c\u8bb0\u4e3a $f_{u,i}$\n\n\u663e\u7136\uff0c\u8f6c\u79fb\u65b9\u7a0b\u4e3a $f_{u,i}=\\sum f_{v,i-1}$\uff0c$v$ \u662f $u$ \u7684\u513f\u5b50 \n\n\u90a3\u4e48\u6211\u4eec\u5206\u4e24\u7c7b\u8ba8\u8bba\n\n\u4e00\u7c7b\u5c31\u662f  $u$ \u8282\u70b9\u5230 $u$ \u5b50\u6811\u5185\u7684\u53f6\u5b50\u94fe\u7684\u957f\u5ea6\u4e3a $k$ \uff0c\u6bd4\u5982 $A\\leftrightarrow B$ , $A \\leftrightarrow C \\leftrightarrow D$ \u90a3\u4e48\u8fd9\u91cc $u$ \u8282\u70b9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u4e3a $ans_1=f_{u,k}$\n\n\u6211\u4eec\u8fd8\u53ef\u4ee5\u628a\u4e24\u6761\u8fd9\u79cd\u5f62\u72b6\u7684\u94fe\u62fc\u5728\u4e00\u8d77\uff0c\u6bd4\u5982\u628a $A\\leftrightarrow B$ , $A \\leftrightarrow C \\leftrightarrow D$ \u62fc\u5728\u4e00\u8d77\u53d8\u6210 $B \\leftrightarrow A \\leftrightarrow C \\leftrightarrow D$ \uff0c\u4e5f\u5c31\u662f\u8981\u4ece $u$ \u7684\u6bcf\u4e24\u4e2a\u5b50\u8282\u70b9\u4e2d\u7b97\u7b54\u6848\uff0c\u8fd9\u91cc\u4e0d\u7528\u66b4\u529b\u679a\u4e3e\uff0c\u6709\u4e00\u79cd\u5de7\u5999\u5730\u505a\u6cd5\n$$\nans_2=\\sum \\{(f_{u,k-i}-f_{v,k-i-1})\\times f_{v,i-1}\\}\n$$\n\u4e24\u4e2a $-1$ \u90fd\u662f\u56e0\u4e3a $u \\leftrightarrow v$ \u6709\u4e00\u6761\u8fb9\n\n\u8fd9\u4e2a\u67ff\u5b50\u7684\u610f\u601d\u5c31\u662f\u8bf4\uff0c\u5728 $v$ \u5b50\u6811\u4e2d\u9009\u957f\u5ea6\u4e3a $i-1$ \u7684\u94fe\uff0c\u7136\u540e\u548c $u$ \u5b50\u6811\u4e2d\u957f\u5ea6\u4e3a $k-i$ \u7684\u94fe\u5339\u914d\uff0c\u56e0\u4e3a $f_{u,0}$ \u5b50\u6811\u4e4b\u524d\u5df2\u7ecf\u628a $v$ \u5b50\u6811\u7684\u94fe\u7edf\u8ba1\u8fc7\u4e86\uff0c\u6240\u4ee5\u8981\u5148\u51cf\u53bb\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u7b97\u91cd\n\n```cpp\n// This code wrote by chtholly_micromaker(MicroMaker)\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <algorithm>\n#define reg register\n#define int long long\nusing namespace std;\nconst int MaxN=50005;\nconst int MaxK=505;\nstruct Edge\n{\n\tint nxt,to;\n}E[MaxN<<1];\ntemplate <class t> inline void rd(t &s)\n{\n\ts=0;\n\treg char c=getchar();\n\twhile(!isdigit(c))\n\t\tc=getchar();\n\twhile(isdigit(c))\n\t\ts=(s<<3)+(s<<1)+(c^48),c=getchar();\n\treturn;\n}\nint n,k,en,ans;\nint hd[MaxN];\nint f[MaxN][MaxK];\ninline void adde(int u,int v)\n{\n\t++en;\n\tE[en].nxt=hd[u];\n\tE[en].to=v;\n\thd[u]=en;\n\treturn;\n}\ninline void dfs(int u,int fa)\n{\n\tf[u][0]=1;\n\tfor(int i=hd[u];~i;i=E[i].nxt)\n\t{\n\t\treg int v=E[i].to;\n\t\tif(v==fa)\n\t\t\tcontinue;\n\t\tdfs(v,u);\n\t\tfor(int j=1;j<=k;++j)\n\t\t\tf[u][j]+=f[v][j-1];\n\t}\n\tans+=f[u][k];\n\treg int res=0;\n\tfor(int i=hd[u];~i;i=E[i].nxt)\n\t{\n\t\treg int v=E[i].to;\n\t\tif(v==fa)\n\t\t\tcontinue;\n\t\tfor(int j=1;j<k;++j)\n\t\t\tres+=(f[v][j-1]*(f[u][k-j]-f[v][k-j-1]));\n\t}\n\tans+=res>>1;\n\treturn;\n}\nsigned main(void)\n{\n\tmemset(hd,-1,sizeof hd);\n\treg int u,v;\n\trd(n);rd(k);\n\tfor(int i=1;i<n;++i)\n\t{\n\t\trd(u);rd(v);\n\t\tadde(u,v);\n\t\tadde(v,u);\n\t}\n\tdfs(1,0);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1583226051,
        "uid": 51376,
        "name": "MyukiyoMekya",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF161D \u3010Distance in Tree\u3011"
    },
    {
        "content": "\u9898\u610f\u7b80\u8ff0\uff08copy \u9898\u9762\uff09  \n\u8f93\u5165\u70b9\u6570\u4e3aN\u4e00\u68f5\u6811  \n\u6c42\u6811\u4e0a\u957f\u5ea6\u6070\u597d\u4e3aK\u7684\u8def\u5f84\u4e2a\u6570  \n\n\u770b\u89c1julao\u4eec\u7684\u9898\u89e3\u90fd\u8fd9\u4e48\u957f\uff0c\u849f\u84bb\u745f\u745f\u53d1\u6296\u3002  \n  \n\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5f62DP\u505a  \ndfs\u4fbf\u4e3a\u6811\u5f62DP\u8fc7\u7a0b  \n\u7b14\u8005\u5728\u8fd9\u91cc\u7528\u4e86\u52a8\u6001\u6570\u7ec4\uff08\u9632\u6b62\u7206\u7a7a\u95f4\uff09\uff0c\u6765\u5b58\u50a8\u90bb\u63a5\u94fe\u8868\u3002 \n\n\u8bbef[i][j]\u4e3a\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u8ddd\u79bb\u6839\u8ddd\u79bb\u4e3aj\u7684\u70b9\u6709\u591a\u5c11\u4e2a\u3002    \n\u5bf9\u4e8e\u6211\u4eec\u73b0\u5728\u6240\u5904\u7684\u70b9now\uff0c\u6211\u4eec\u679a\u4e3e\u5b83\u7684\u5b50\u8282\u70b9v\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u7ecf\u8fc7\u4ee5now-v\u4e3a\u9876\u70b9\u7684\u8fd9\u6761\u8fb9\u7684\u7b54\u6848  \n\u6211\u4eec\u4ece1\u5230k\u8fdb\u884c\u679a\u4e3e\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u63a8\u51faans+=(dp[now][j]*dp[to][k-j-1])  \n\u679a\u4e3e\u5b8c\u4ee5\u540e\uff0c\u6211\u4eec\u5c06\u8fd9\u4e00\u68f5\u5b50\u6811\u5408\u5e76\u5230now\u8282\u70b9\u53bb\uff0cdp[now]j+1]+=dp[to][j];    \n\u518d\u7edf\u8ba1now\u7684\u5176\u5b83\u5b50\u6811\u3002  \n\u4e8e\u662f\u6211\u4eec\u5c31\u6109\u5feb\u5730dfs\u3002  \n\u4e0d\u8981\u5fd8\u8bb0\u8bbe\u8ba1\u521d\u503c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9now\uff0cf[now][0]=1\u3002 \n\u7136\u540e\u4e0d\u65ad\u5411\u4e0a\u56de\u6eaf\u8fdb\u884c\u5982\u4e0a\u8ba1\u7b97\uff0c\u6700\u540e\u5373\u53ef\u7b97\u51fa\u6b63\u786e\u7b54\u6848\u3002  \n\u5176\u5b9e\u5c31\u662f\u66b4\u529b\u5566\uff08\u9003  \n\u8fd9\u9053\u9898\u7528\u70b9\u5206\u6cbb\u505a\u662f\u5f88\u7b80\u5355\u7684\uff08~~\u53ef\u60dc\u6211\u4e0d\u4f1a~~\uff09  \n\n\n\u4ee3\u7801\u5982\u4e0b\u6240\u793a\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint dp[50050][505],n,k,m,c;\nlong long ans=0;\nvector <int> v[50050];\nvoid dfs(int now,int p)\n{\n    dp[now][0]=1;\n    for (int i=0;i<v[now].size();i++)\n    {\n        int to=v[now][i];\n        if (to!=p)\n        {\n            dfs(to,now);\n            for (int j=0;j<k;j++) ans+=(dp[now][j]*dp[to][k-j-1]);\n            for (int j=0;j<k;j++) dp[now][j+1]+=dp[to][j];\n        }\n    }\n}\nint main()\n{\n    cin>>n>>k;\n    for (int i=1;i<n;i++)\n    {\n        int x,y;\n        cin>>x>>y;\n        v[x].push_back(y);\n        v[y].push_back(x);\n    }\n    dfs(1,0);\n    cout<<ans;\n    return 0;\n}\n```\n",
        "postTime": 1563852590,
        "uid": 87189,
        "name": "vacation",
        "ccfLevel": 0,
        "title": "CF161D Distance in Tree\u9898\u89e3"
    },
    {
        "content": "\u00a0\u4e3a\u5565\u53c8\u5728Itst\u53d1\u9898\u89e3\u7684\u5730\u65b9\u53d1\u9898\u89e3\u554apwq  \n \u800c\u4e14\u53c8\u662f\u4ed6\u70b9\u5206\u6cbb\u7a9ddp\n \n \u70b9\u5206\u592a\u96be\u4e86\u4e0d\u4f1a\u554a\uff5e\n \n \u5c31\u662f\u7edf\u8ba1\u6811\u4e0a\u957f\u5ea6\u4e3ak\u7684\u8def\u5f84\u6811\u3002\u3002\n \n \u786e\u5b9e\u662f\u70b9\u5206\u6cbb\u88f8\u9898\uff08\u7136\u800c\u6211\u4e0d\u4f1a\uff08\uff08\n \n \u8003\u8651dp\n \n $dp[u][k]$ \u8868\u793a\u5f53\u524d\u5728u\u8fd9\u4e2a\u70b9\u8d70k\u7684\u957f\u5ea6\u53ef\u4ee5\u8fbe\u5230\u7684\u70b9\u7684\u4e2a\u6570\u3002\u3002\n \n \u76f4\u63a5\u8003\u8651\u8f6c\u79fb\uff0c\u7531\u4e8e\u53ef\u4ee5\u5411\u4e0a\u8d70\u6240\u4ee5\u663e\u5f97\u4e0d\u65b9\u4fbf\u3002\u3002\n \n \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5148\u7528$dp[u][k]$\u6765\u8dd1dfs\u8dd1\u51fa\u5411\u4e0b\u8d70k\u540e\u7684\u70b9\u7684\u4f4d\u7f6e\u7684\u4e2a\u6570\u3002\u3002  \n \u7136\u540e\u81ea\u5e95\u5411\u4e0a\u66f4\u65b0 \u66f4\u65b0\u51fa \u7ed3\u679c\u3002\u3002\n \n \u5177\u4f53\u66f4\u65b0\u65b9\u6cd5\uff0c\u5bf9\u4e8e\u5f53\u524d\u70b9i\uff0c\u5176\u5411\u4e0a\u8d70d\u7136\u540e\u518d\u4ece\u5411\u4e0a\u8d70d\u540e\u7684\u4f4d\u7f6e\u5411\u4e0b\u8d70(k-d)\u5c31\u597d\u4e86\uff0c\u4f46\u662f\u6ce8\u610f\u5411\u4e0b\u8d70k-d\u4e0d\u80fd\u8d70\u4e0a\u53bb\u7684\u65f6\u5019\u7edf\u8ba1\u8fc7\u4e86\u7684\u3002\u3002\u76f4\u63a5\u51cf\u53bb\u5c31\u884c\u4e86\u554aQAQ \u7136\u540e\u6211\u5bf9\u4e8e \u5411\u4e0a\u8d70\u4e86k\u6b21\u7684\u65f6\u5019\u7279\u5224\u4e86\u4e00\u4e0b\u4f46\u662f\u8c8c\u4f3c\u4e0d\u52a0\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u8fc7\u7684pwq\n \n ACCODE\n ```cpp\n /*Heroes Never Die!*/\n#include \"iostream\"\n#include \"algorithm\"\n#include \"cstring\"\n#include \"cstdio\"\nusing namespace std;\ntypedef long long ll;\n#define MAXN 50006\n#define MAXK 506\nll dp[MAXN][MAXK];\nstruct edge{\n    ll u;edge* next;\n    edge(ll u=0,edge*next=NULL):u(u),next(next){}\n    void insert(ll u){\n        if(this->next == NULL) this->next = new edge(u,NULL);\n        else this->next = new edge(u,this->next);\n    }\n}e[MAXN];\nll yn,yk;\nll pre[MAXN];\nvoid dfs(ll u,ll fa){\n    dp[u][0] = 1;\n    for(edge* n=e[u].next;n!=NULL;n=n->next){\n        ll v = n->u;\n        if(v == fa) continue;\n        pre[v] = u;\n        dfs(v,u);\n        for(ll k=1;k<=yk;++k)\n            dp[u][k] += dp[v][k-1];\n    }\n}\nll res;\nint main(){\n    cin >> yn >> yk;\n    for(ll i=0;i<yn-1;++i){\n        static ll u,v;scanf(\"%I64d%I64d\",&u,&v);\n        e[u].insert(v),e[v].insert(u);\n    }\n    dfs(1,1);\n    for(ll i=1;i<=yn;++i){\n        ll cur = i,las = i;\n        for(ll d = 1;d <= yk;++d){\n            cur = pre[cur];\n            if(!cur) break;\n            dp[i][yk] += dp[cur][yk - d] - (yk==d?0:dp[las][yk-d-1]);\n            las = cur;\n        }\n        res += dp[i][yk];\n    }\n    cout << res/2;\n}\n ```",
        "postTime": 1539349402,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF161D \u3010Distance in Tree\u3011"
    },
    {
        "content": "# \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u4e00\u4e2a $n$ \u4e2a\u70b9\u7684\u6811\uff08\u8fb9\u6743\u90fd\u4e3a $1$\uff09\uff0c\u6c42\u6811\u4e0a\u957f\u5ea6\u6070\u597d\u4e3a $k$ \u7684\u8def\u5f84\u6761\u6570\u3002\n\n\u6570\u636e\u89c4\u6a21\uff1a$1 <= n <= 50000$,$1 <= k <= 500$\u3002\n\n# \u601d\u8def\n\n\u8fd9\u91cc\u8fd0\u7528\u70b9\u5206\u6cbb\u89e3\u51b3\u6b64\u95ee\u9898\u3002\n\n\u70b9\u5206\u6cbb\u53ef\u4ee5\u89e3\u51b3\u4e00\u4e9b\u6709\u5173\u6811\u4e0a\u8def\u5f84\u7684\u95ee\u9898\u3002\u70b9\u5206\u6cbb\u5176\u5b9e\u8fd8\u53ef\u4ee5\u641e\u6709\u8fb9\u6743\u7684\u95ee\u9898\uff0c\u7528\u5230\u8fd9\u9053\u9898\u6709\u70b9\u5927\u6750\u5c0f\u7528\u4e86\uff0c\u4f46\u4e5f\u53ef\u4ee5\u7528\u6765\u7ec3\u624b\u3002\n\n\u5982\u679c\u4e0d\u4f1a\u70b9\u5206\u6cbb\u53ef\u4ee5\u505a\u4e00\u505a\u8fd9\u9053\u9898\uff1a[P3806 \u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1](https://www.luogu.com.cn/problem/P3806)\n\n\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u7528\u5bb9\u65a5\uff0c\u5148\u7b97\u51fa\u7ecf\u8fc7\u67d0\u70b9\u7684\u6240\u6709\u8def\u5f84\uff08\u627e\u4e24\u4e2a\u70b9\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u76f4\u63a5\u52a0\uff09\uff0c\u7136\u540e\u9012\u5f52\u5230\u5b50\u6811\u65f6\u51cf\u53bb\u591a\u4f59\u7684\u8d21\u732e\u3002\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\n\n## \u5177\u4f53\u5b9e\u73b0\u53ca\u4f18\u5316\n\n\u57fa\u672c\u4e0a\u5957\u7528\u6a21\u677f\uff0c\u628a $dis$ \u6570\u7ec4\uff08\u5b58 \u5230 $root$ \u8282\u70b9\u7684\u8ddd\u79bb \u7684\u6570\u7ec4\uff09\u641e\u51fa\u6765\u540e\u628a $dis$ \u5b58\u5230\u6876\u91cc\uff0c\u7136\u540e\u5c31\u5f88\u597d\u505a\u4e86\u3002\n\n\u7531\u4e8e $k$ \u5f88\u5c0f\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4f1a\u5feb\u5f88\u591a\u3002\n\n\u8fd8\u6709\u4e2a\u5c0f\u5c0f\u7684\u4f18\u5316\uff1a\u627e $dis$ \u65f6\u5982\u679c\u5f53\u524d\u7684 $dis$ \u5df2\u7ecf\u8d85\u8fc7 $k$\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\uff0c\u56e0\u4e3a\u518d\u5411\u4e0b\u9012\u5f52\u5df2\u7ecf\u4e0d\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u4e86\u3002\n\n\u66f4\u5177\u4f53\u7684\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n$Code:$\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#define N 50010\n#define NN 100010\ntypedef long long ll;\ntemplate<typename T> inline void read(T &x) {\n\tx = 0; char c = getchar(); bool flag = false;\n\twhile (!isdigit(c)) {if (c == '-') flag = true; c = getchar(); }\n\twhile (isdigit(c)) {x = (x << 1) + (x << 3) + (c ^ 48); c = getchar(); }\n\tif (flag)\tx = -x;\n}\nusing namespace std;\nint n, k;\nll ans;\nstruct edge{\n\tint nxt;\n\tint to;\n}e[NN];\nint head[N], ecnt;\ninline void addedge(int from, int to) {\n\te[++ecnt] = (edge){head[from], to};\n\thead[from] = ecnt;\n}\nint root, h[N], Siz, siz[N];\n//\u8fd9\u91cc\u7684Siz\u6307\u7684\u662f\u5f53\u524d\u8303\u56f4\u5185\u5b50\u6811\u7684\u5927\u5c0f\uff0ch[i]\u6307i\u70b9\u7684\u6700\u5927\u5b50\u6811\u5927\u5c0f\uff0c\u627e\u91cd\u5fc3\u65f6\u7528 \nbool vis[N];\nvoid find_root(int cur, int faa) {//\u627e\u91cd\u5fc3 \n\tint to;\n\tsiz[cur] = 1, h[cur] = 0;\n\tfor (register int i = head[cur]; i; i = e[i].nxt) {\n\t\tto = e[i].to;\n\t\tif (to == faa || vis[to])\tcontinue;\n\t\tfind_root(to, cur);\n\t\tsiz[cur] += siz[to];\n\t\th[cur] = max(h[cur], siz[to]);\n\t}\n\th[cur] = max(h[cur], Siz - siz[cur]);\n\tif (h[cur] < h[root])\troot = cur;\n}\nll known_dis[510];//\u6876\uff1aknown_dis[i]\u4e3a\u8ddd\u79bb\u4e3ai\u7684\u8def\u5f84\u6761\u6570 \nint dis[N];\nvoid get_dis(int cur, int faa) {//\u9012\u5f52\u627e\u51fadis\u6570\u7ec4 \n\tint to;\n\tif (dis[cur] > k)\treturn ;\n\t//\u4e00\u4e2a\u5c0f\u5c0f\u7684\u4f18\u5316\uff1a\u5982\u679cdis>k\uff0c\u90a3\u4e48\u8fd9\u4ee5\u540e\u66f4\u65b0\u7684dis\u90fd\u5bf9\u7b54\u6848\u6ca1\u6709\u8d21\u732e\u3002 \n\tknown_dis[dis[cur]]++;\n\tfor (register int i = head[cur]; i; i = e[i].nxt) {\n\t\tto = e[i].to;\n\t\tif (to == faa || vis[to])\tcontinue;\n\t\tdis[to] = dis[cur] + 1;\n\t\tget_dis(to, cur);\n\t}\n}\ninline void sol(int cur, int len, int flag) {//\u627e\u51fadis\u5e76\u7edf\u8ba1\u7b54\u6848 \n\tmemset(known_dis, 0, sizeof(known_dis));\n\tdis[cur] = len;\n\tget_dis(cur, 0);\n\tll res = 0;\n\tint tmp;\n\tfor (register int i = 0; i <= k; ++i) {\n\t\ttmp = k - i;\n\t\tif (tmp <= i)\tbreak;//\u9632\u6b62\u7b97\u91cd \n\t\tres += known_dis[i] * known_dis[tmp];\n\t}\n\tif (!(k & 1)) {//k\u4e3a\u5076\u6570\u65f6\uff0ck/2\u5c06\u7edf\u8ba1\u4e0d\u5230\uff0c\u6240\u4ee5\u52a0\u4e86\u4e2a\u7279\u5224 \n\t\ttmp = k >> 1;\n\t\tres += (known_dis[tmp] * (known_dis[tmp] - 1)) >> 1;\n\t}\n\tans += res * flag;\n}\nvoid work(int cur) {\n\tvis[cur] = true;\n\tsol(cur, 0, 1);\n\tint to;\n\tfor (register int i = head[cur]; i; i = e[i].nxt) {\n\t\tto = e[i].to;\n\t\tif (vis[to])\tcontinue;\n\t\tsol(to, 1, -1);\n\t\troot = 0, h[root] = n, Siz = siz[to];\n\t\tfind_root(to, cur);\n\t\twork(root);\n\t}\n}\nint main() {\n\tread(n); read(k);\n\tregister int aa, bb;\n\tfor (register int i = 1; i < n; ++i) {\n\t\tread(aa); read(bb);\n\t\taddedge(aa, bb);\n\t\taddedge(bb, aa);\n\t}\n\troot = 0; h[root] = n, Siz = n;\n\tfind_root(1, 0);\n\twork(root);\n\tcout << ans << endl;\n\treturn 0;\n}\n```",
        "postTime": 1577446388,
        "uid": 221897,
        "name": "jiazhaopeng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF161D \u3010Distance in Tree\u3011"
    },
    {
        "content": "\u5728\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\uff0c\u6211\u548c\u5404\u4f4d\u5927\u4f6c\u7684\u65b9\u6cd5\u53ef\u80fd\u7565\u6709\u4e0d\u540c\u3002\n\n\u6211\u4eec\u5148\u7edf\u8ba1**\u5c0f\u4e8e\u7b49\u4e8ek**\u7684\u6570\u91cf\uff0c\u518d\u51cf\u53bb**\u5c0f\u4e8ek**\u7684\u6570\u91cf\u3002\n\n\u4e8e\u662f\u7c7b\u4f3c[P4178](https://www.luogu.org/problemnew/show/P4178)\u5373\u53ef\u3002\n\n```\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=5e4+50;\ntypedef long long LL;\nint to[N<<1],las[N<<1],fir[N],ds[N<<1],cnt;\ninline void add_edge(int u,int v,int a){\n\tto[++cnt]=v;las[cnt]=fir[u];fir[u]=cnt;ds[cnt]=a;\n\tto[++cnt]=u;las[cnt]=fir[v];fir[v]=cnt;ds[cnt]=a;\n}\ninline int max(int u,int v){return u>v?u:v;}\ninline int min(int u,int v){return u<v?u:v;}\nint n,k,x,y;\nint f[N],dep[N],siz[N],vis[N],sth[N];\nint Cnt,rot,sum;\nLL ans;\nvoid grot(int u,int v){\n\tsiz[u]=1;f[u]=0;\n\tfor(int i=fir[u];i;i=las[i])\n\tif(to[i]!=v&&!vis[to[i]]){\n\t\tgrot(to[i],u);\n\t\tsiz[u]+=siz[to[i]];\n\t\tf[u]=max(f[u],siz[to[i]]);\n\t}\n\tf[u]=max(f[u],sum-siz[u]);\n\tif(f[u]<f[rot])rot=u;\n}\nvoid gsth(int u,int v){\n\tsth[++Cnt]=dep[u];\n\tfor(int i=fir[u];i;i=las[i])\n\tif(to[i]!=v&&!vis[to[i]]){\n\t\tdep[to[i]]=dep[u]+ds[i];\n\t\tgsth(to[i],u);\n\t}\n}\nint calc(int u,int dis){\n\tdep[u]=dis;Cnt=0;\n\tgsth(u,0);\n\tsort(sth+1,sth+Cnt+1);\n\t\n\tint l=1,r=Cnt,res=0;\n\twhile(l<r)\n\tif(sth[l]+sth[r]<=k)res+=r-l,l++;\n\telse r--;\n    //\u52a0\u4e0a \u957f\u5ea6 \u5c0f\u4e8e\u7b49\u4e8ek \u7684\n\t\n\tl=1,r=Cnt;\n\twhile(l<r)\n\tif(sth[l]+sth[r]<k)res-=r-l,l++;\n\telse r--;\n    //\u51cf\u53bb \u957f\u5ea6 \u5c0f\u4e8ek \u7684\n\t\n\treturn res;\n}\nvoid solve(int u){\n\tans+=calc(u,0);vis[u]=1;\n\tfor(int i=fir[u];i;i=las[i])\n\tif(!vis[to[i]]){\n\t\tans-=calc(to[i],ds[i]);\n\t\trot=0;sum=siz[to[i]];\n\t\tgrot(to[i],0);\n\t\tsolve(rot);\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<n;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd_edge(x,y,1);\n\t}\n\tf[0]=sum=n;\n\tgrot(1,0);\n\tsolve(rot);\n\tprintf(\"%I64d\\n\",ans);\n}\n```",
        "postTime": 1544411302,
        "uid": 50092,
        "name": "da32s1da",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF161D \u3010Distance in Tree\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ef\u4ee5\u4f7f\u7528**\u70b9\u5206\u6cbb**\u7684\u65b9\u6cd5\u6765\u505a\u3002\n\n\u4e0d\u4f1a\u70b9\u5206\u6cbb\u7684\u53ef\u4ee5\u6765\u770b\u770b\u8fd9\u4e2a\u535a\u5ba2\uff1a[there](https://www.luogu.com.cn/blog/148913/qian-tan-dian-fen-zhi)\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\u5c06\u6807\u8bb0\u8ddd\u79bb\u7684\u6570\u7ec4\uff08\u8fd9\u91cc\u5b9a\u4e49\u7684\u662f alive \u6570\u7ec4\uff09\u6539\u4e3a int \u7c7b\u578b\uff0c\u628a\u5b83\u91cd\u65b0\u5b9a\u4e49\u4e3a**\u4e4b\u524d\u5b50\u6811\u5230\u6839\u8ddd\u79bb\u7684\u4e2a\u6570**\uff0c\u65b0\u589e\u4e00\u4e2a Right \u53d8\u91cf\u8868\u793a\u6b63\u786e\u7b54\u6848\u4e2a\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd9\u6837\u5b50\u505a\u4e86\uff1a\n\n```cpp\n\t\tfor(register int j=1;j<=nowdis;++j)\n\t\t\tif(q>=now[j])\n\t\t\t\tRight+=alive[q-now[j]];\n```\n\u7edf\u4e00\u5904\u7406\u8ddd\u79bb\u7684\u65f6\u5019\uff0c\u53ea\u8981\u628a\u6a21\u677f\u9898\u91cc\u9762\u7684 true, false \u6539\u4e3a ++ \u548c - - \u64cd\u4f5c\u5373\u53ef\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define Maxn int(5e4)\n#define Maxk int(5e4)\nusing namespace std;\n\n//===============\u90bb\u63a5\u8868=================\n\nstruct Node\n{\n\tint to,nxt,w;\n} Edge[(Maxn<<1)+5];\nint tot,Head[Maxn+5];\n\ninline void Addedge(int u,int v,int w)//\u52a0\u8fb9\u64cd\u4f5c \n{\n\tEdge[++tot].to=v;\n\tEdge[tot].nxt=Head[u];\n\tEdge[tot].w=w;\n\tHead[u]=tot;\n}\n\n//===========\u627e\u91cd\u5fc3 & \u66f4\u65b0\u8ddd\u79bb==========\n\nint n,q,root;\nint siz[Maxn+5],maxs[Maxn+5];//siz:\u5b50\u6811\u5927\u5c0f maxs:\u6700\u5927\u513f\u5b50\u7684\u5927\u5c0f\nint vis[Maxn+5];//vis:\u4ee3\u8868\u662f\u5426\u5220\u53bb \nint sum;//sum:\u8bb0\u5f55\u5f53\u524d\u5b50\u6811\u5927\u5c0f \n\nvoid getroot(int x,int f)//\u627e\u91cd\u5fc3 \n{\n\tsiz[x]=1;\n\tmaxs[x]=0;\n\tfor(register int i=Head[x];i;i=Edge[i].nxt)\n\t{\n\t\tint v=Edge[i].to;\n\t\tif(vis[v] || v==f) continue;\n\t\tgetroot(v,x);\n\t\tsiz[x]+=siz[v];\n\t\tmaxs[x]=max(maxs[x],siz[v]);\n\t}\n\tmaxs[x]=max(maxs[x],sum-siz[x]);\n\troot=maxs[x]<maxs[root]?x:root;\n}\n\nint dis[Maxn+5],now[Maxn+5],nowdis;\n//dis:\u5404\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u8ddd\u79bb now:\u5b58\u653e\u8fd9\u4e9b\u8ddd\u79bb nowdis:\u8ba1\u6570\u5668 \n\nvoid getdis(int x,int f)\n{\n\tnow[++nowdis]=dis[x];\n\tfor(register int i=Head[x];i;i=Edge[i].nxt)\n\t{\n\t\tint v=Edge[i].to;\n\t\tif(vis[v] || v==f) continue;\n\t\tdis[v]=dis[x]+Edge[i].w;\n\t\tgetdis(v,x);\n\t}\n} \n\n//================\u70b9\u5206\u6cbb==================\n\nint Right;\nint alive[Maxk+5];//alive:\u8868\u793a\u4e4b\u524d\u5b50\u6811\u8ddd\u79bb\u7684\u4e2a\u6570 \nstack<int> s;//\u4f7f\u7528\u6808\u7edf\u4e00\u5904\u7406 \n\nvoid count(int x)//\u8ba1\u7b97\u8ddd\u79bb \n{\n\tfor(register int i=Head[x];i;i=Edge[i].nxt)\n\t{\n\t\tint v=Edge[i].to;\n\t\tif(vis[v]) continue;\n\t\tnowdis=0;\n\t\tdis[v]=Edge[i].w;\n\t\tgetdis(v,x);\n\t\t\n\t\tfor(register int j=1;j<=nowdis;++j)\n\t\t\tif(q>=now[j])\n\t\t\t\tRight+=alive[q-now[j]];\n\t\t\t\t\t\n\t\tfor(register int j=1;j<=nowdis;++j)//\u5b58\u653e\u8ddd\u79bb \n\t\t{\n\t\t\ts.push(now[j]);\n\t\t\talive[now[j]]++;\n\t\t}\n\t}\n\twhile(!s.empty())//\u6e05\u7a7a \n\t{\n\t\talive[s.top()]--;\n\t\ts.pop();\n\t}\n}\n\nvoid devide(int x)//\u70b9\u5206\u6cbb\n{\n\tvis[x]=true;\n\talive[0]=true;\n\tcount(x);\n\tfor(register int i=Head[x];i;i=Edge[i].nxt)\n\t{\n\t\tint v=Edge[i].to;\n\t\tif(vis[v]) continue;\n\t\troot=0;\n\t\tmaxs[0]=sum=siz[v];\n\t\tgetroot(v,0);\n\t\tgetroot(root,0);\n\t\tdevide(root);\n\t}\n} \n\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);\n\tfor(register int i=1;i<n;++i)//\u8fde\u8fb9 \n\t{\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tAddedge(a,b,1);\n\t\tAddedge(b,a,1);\n\t}\n\n\tmaxs[0]=sum=n;\n\tgetroot(1,0);\n\tgetroot(root,0);//\u627e\u91cd\u5fc3\u5e76\u66f4\u65b0\u5b50\u6811\u5927\u5c0f \n\tdevide(root);\n\t\n\tprintf(\"%d\",Right);\n    return 0;\n}\n\n```\n",
        "postTime": 1586175557,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF161D \u3010Distance in Tree\u3011"
    },
    {
        "content": "# CF161D Distance in Tree\n\n\u957f\u94fe\u5256\u5206\u677f\u5b50\u9898\u3002  \n\n\u957f\u94fe\u5256\u5206\u90a3\u4e48\u597d\u5199\uff0c\u8dd1\u5f97\u53c8\u5feb\uff0c\u4e3a\u4ec0\u4e48\u8981\u5199\u70b9\u5206\u6cbb\u5462\uff1f~~\u5b8c\u4e86\u6211\u73b0\u5728\u770b\u4e00\u9053\u70b9\u5206\u6cbb\u9898\u5c31\u60f3\u5199\u957f\u94fe\u5256\u5206\uff0c\u867d\u7136\u53ea\u8981\u5e26\u8fb9\u6743\u5c31\u5495\u5495\u5495\u4e86~~  \n\n\u5982\u679c\u8fd8\u4e0d\u4f1a\u957f\u94fe\u5256\u5206\u8bf7\u770b[\u6211\u535a\u5ba2](https://www.cnblogs.com/cj-chd/p/10076199.html)\u3002  \n\n\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u65f6\u7a7a\u590d\u6742\u5ea6$O(n)$\u76f4\u63a5\u6d1b\u8c37rank1\u3002  \n\n```cpp\n#include<cstdio>\n#include<cctype>\n#define R register\n#define I inline\nusing namespace std;\nconst int S=50003,N=100003;\nchar buf[1000000],*p1,*p2;\nI char gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,S,stdin),p1==p2)?EOF:*p1++;}\nI int rd(){\n\tR int f=0; R char c=gc();\n\twhile(c<48||c>57) c=gc();\n\twhile(c>47&&c<58) f=f*10+(c^48),c=gc();\n\treturn f;\n}\nint h[S],s[N],g[N],p[S],q[S],d[S],t[S],*f[S],u[S],c,K,*e=u+1; long long o;\nI int max(int x,int y){return x>y?x:y;}\nI int min(int x,int y){return x<y?x:y;}\nI void add(int x,int y){s[++c]=h[x],h[x]=c,g[c]=y;}\nvoid dfs1(int x,int f){p[x]=f,d[x]=t[x]=d[f]+1;\n\tfor(R int i=h[x],y;i;i=s[i])\n\t\tif((y=g[i])^f){dfs1(y,x);\n\t\t\tif(t[y]>t[x]) t[x]=t[y],q[x]=y;\n\t\t}\n}\nvoid dfs2(int x){f[x][0]=1;\n\tR int i,j,y,m,n=t[x]-d[x],k;\n\tif(q[x]) f[q[x]]=f[x]+1,dfs2(q[x]);\n\tfor(i=h[x];i;i=s[i])\n\t\tif((y=g[i])^p[x]&&y^q[x]){f[y]=e,m=t[y]-d[y],e+=m+1,dfs2(y);\n\t\t\tfor(j=max(K-n,0),k=min(m,K-1);j<=k;++j) o+=f[x][K-j]*f[y][j];\n\t\t\tfor(j=0;j<=m;++j) f[x][j+1]+=f[y][j];\n\t\t}\n\tif(n>K) o+=f[x][K+1];\n}\nint main(){\n\tR int n=rd(),i,x,y;\n\tfor(K=rd()-1,i=1;i<n;++i) x=rd(),y=rd(),add(x,y),add(y,x);\n\tdfs1(1,0),f[1]=e,e+=t[1],dfs2(1),printf(\"%lld\",o);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1544363059,
        "uid": 91933,
        "name": "newbiechd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF161D \u3010Distance in Tree\u3011"
    },
    {
        "content": "\u9898\u89e3\u540c\u6b65\u53d1\u5728[\u535a\u5ba2](https://foreverlasting1202.github.io/)\n\n\u70b9\u5206\u6cbb\u3002\n\n\u611f\u89c9\u8fd9\u91cc\u7684\u70b9\u5206\u6cbb\u9898\u89e3\u597d\u9ebb\u70e6\u554a\uff0c\u8fd9\u4e0d\u662f\u8bb0\u4e2a\u6876\u518d\u8ba8\u8bba\u4e00\u4e0b$dis$\u662f\u5426\u76f8\u7b49\u5c31\u6ca1\u4e86\uff0c\u4e3a\u4ec0\u4e48\u8981\u4e24\u8fb9\u626b\u63cf\u554a\u3002\n\ncode:\n```cpp\n//2018.11.30 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline int read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y){\n    x^=y^=x^=y;\n}\ninline int _abs(const res &x){\n    return x>0?x:-x;\n}\ninline int _max(const res &x,const res &y){\n    return x>y?x:y;\n}\ninline int _min(const res &x,const res &y){\n    return x<y?x:y;\n}\nconst int N=5e4+10;\nnamespace MAIN{\n    struct E{\n        int next,to,val;\n        E() {}\n        E(res next,res to,res val):next(next),to(to),val(val) {}\n    }edge[N<<1];\n    int head[N],cnt;\n    inline void addedge(const res &u,const res &v,const res &w){\n        edge[++cnt]=E(head[u],v,w),head[u]=cnt;\n        edge[++cnt]=E(head[v],u,w),head[v]=cnt;\n    }\n    int n,k;\n    int siz[N],rt,w[N];\n    bool vis[N];\n    void dfs_siz(const res &x,const res &fax,res sum){\n        siz[x]=1,w[x]=0;\n        for(res i=head[x];~i;i=edge[i].next){\n            res tox=edge[i].to;\n            if(tox==fax||vis[tox])continue;\n            dfs_siz(tox,x,sum);\n            siz[x]+=siz[tox],w[x]=_max(w[x],siz[tox]);\n        }\n        w[x]=_max(w[x],sum-siz[x]);\n        if(w[x]<w[rt])rt=x;\n    }\n    int vec[N],tot;\n    int pos[N];\n    LL ans;\n    int dis[N];\n    inline void dfs_dis(const res &x,const res &fax){\n        vec[++tot]=dis[x],pos[dis[x]]++;\n        for(res i=head[x];~i;i=edge[i].next){\n            res tox=edge[i].to;\n            if(tox==fax||vis[tox])continue;\n            dis[tox]=dis[x]+edge[i].val;\n            dfs_dis(tox,x);\n        }\n    }\n    inline void calc(const res &x,const res &d0,const res &flag){\n        tot=0,dis[x]=d0;\n        dfs_dis(x,0);\n        for(res i=1;i<=tot;i++){\n            if(k>=vec[i])ans+=(vec[i]*2!=k)?1LL*flag*pos[vec[i]]*pos[k-vec[i]]:1LL*flag*pos[vec[i]]*(pos[vec[i]]-1)/2;\n            pos[vec[i]]=pos[k-vec[i]]=0;\n        }\n    }\n    void solve(const res &x){\n        calc(x,0,1),vis[x]=1;\n        for(res i=head[x];~i;i=edge[i].next){\n            res tox=edge[i].to;\n            if(vis[tox])continue;\n            calc(tox,edge[i].val,-1);\n            rt=0,dfs_siz(tox,0,siz[tox]),solve(rt);\n        }\n    }\n    inline void MAIN(){\n        memset(head,-1,sizeof(head)),w[0]=inf;\n        n=read(),k=read();\n        for(res i=1;i<n;i++){\n            res u=read(),v=read(),w=1;\n            addedge(u,v,w);\n        }\n        dfs_siz(1,0,n),solve(rt);\n        printf(\"%lld\\n\",ans);\n    }\n}\nint main(){\n    MAIN::MAIN();\n    return 0;\n}\n```\n",
        "postTime": 1543627944,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010CF161D\u3011Distance in Tree"
    },
    {
        "content": "### \u6bd4\u8f83\u57fa\u7840\u7684\u9759\u6001\u70b9\u5206\u6cbb\uff0c\u521d\u5b66\u8005~~\uff08\u6bd4\u5982\u6211\uff09~~\u62ff\u6765\u7ec3\u624b\u662f\u4e0d\u9519\u7684\u9009\u62e9\n### \u5bf9\u70b9\u5206\u6cbb\u4e86\u89e3\u4e0d\u6df1\u7684\u8bf7\u53f3\u8f6c\u6a21\u677f\uff0c\u8fd9\u91cc\u4e3b\u8981\u63d0\u53ca\u4e00\u4e0b\u5728\u4e0d\u540c\u5b50\u6811\u4e0a\u7684\u8def\u5f84\u7684\u5904\u7406\u65b9\u6cd5\uff08\u8fd9\u4e5f\u57fa\u672c\u4e0a\u662f\u9759\u6001\u70b9\u5206\u6cbb\u9898\u76ee\u4e4b\u95f4\u7684\u4e3b\u8981\u4e0d\u540c\u70b9\u4e86\uff09\n### \u81ea\u5df1\u539f\u672c\u5199\u4e86\u4e00\u4e2a$O(n^2)$\u7684\u8def\u5f84\u5904\u7406\uff08\u56e0\u4e3a\u5728\u5f88\u591a\u65f6\u5019\u8dd1\u4e0d\u6ee1\uff09\u7ed3\u679c\u88ab\u4e00\u4e2a\u83ca\u82b1\u56fe\u5361\u5230TLE qwq\u6240\u4ee5\u5f97\u4f7f\u7528\u4e00\u4e2a$O(n)$\u7684\u8def\u5f84\u5904\u7406\u65b9\u5f0f\n### \u6bd4\u8f83\u5feb\u7684$O(n)$\u8def\u5f84\u5904\u7406\u65b9\u6cd5\u662f\u5728\u626b\u7684\u8fc7\u7a0b\u4e2d\u628a\u540c\u4e00\u8def\u5f84\u957f\u5ea6\u8def\u5f84\u7684\u6570\u91cf\u4e0e\u5b50\u6811\u5206\u5e03\u8bb0\u5f55\u4e0b\u6765\uff0c\u5728\u4e4b\u540e\u7684\u8be2\u95ee\u8fc7\u7a0b\u4e2d\u5c31\u53ef\u4ee5\u76f4\u63a5\u83b7\u5f97\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84\u6570\u91cf\n### \u63cf\u8ff0\u6bd4\u8f83\u62bd\u8c61\uff0c\u4ee3\u7801\u4f53\u73b0\u5b9e\u8d28qwq\uff08\u6700\u5feb1310ms\u6682\u65f6Rk2\uff09\n```\n#include<bits/stdc++.h>\n#define MAXN 50001\nusing namespace std;\ninline int read(){\n    int a = 0;\n    bool f = 0;\n    char c = getchar();\n    while(!isdigit(c)){\n        if(c == '-')    f = 1;\n        c = getchar();\n    }\n    while(isdigit(c))\ta += (a << 3) + a + (c ^ '0') , c = getchar();\n    return f ? -a : a;\n}\nstruct Edge{\n    int end , upEd;\n}Ed[MAXN << 1];\nstruct node{//\u8bb0\u5f55\u5b50\u6811\u4e0a\u6839\u5230\u5404\u4e2a\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u4e0e\u5b50\u6811\u5206\u5e03\n    int in , wei;\n    bool operator <(node a){return wei < a.wei;}\n}Node[MAXN];\nint head[MAXN] , size[MAXN] , cnt[MAXN];\nint nowSize , N , K , minN , pos , cntEd , cntNode;\nlong long ans;\nbool vis[MAXN];\ninline int max(int a , int b){return a > b ? a : b;}\n\ninline void addEd(int a , int b){//\u52a0\u8fb9\n    Ed[++cntEd].end = b;\n    Ed[cntEd].upEd = head[a];\n    head[a] = cntEd;\n}\n\ninline void addNode(int a , int b){//\u52a0\u70b9\n    Node[++cntNode].in = a;\n    Node[cntNode].wei = b;\n}\n\nvoid getSize(int k){//\u83b7\u5f97\u5b50\u6811\u5927\u5c0f\n    nowSize++;\n    vis[k] = 1;\n    for(int i = head[k] ; i ; i = Ed[i].upEd)\n        if(!vis[Ed[i].end])\n            getSize(Ed[i].end);\n    vis[k] = 0;\n}\n\nvoid getZX(int k){//\u5f97\u5230\u5b50\u6811\u7684\u91cd\u5fc3\n    int maxSize = 0; \n    size[k] = vis[k] = 1;\n    for(int i = head[k] ; i ; i = Ed[i].upEd)\n        if(!vis[Ed[i].end]){\n            getZX(Ed[i].end);\n            maxSize = max(maxSize , size[Ed[i].end]);\n            size[k] += size[Ed[i].end];\n        }\n    if(minN > (maxSize = max(maxSize , nowSize - size[k]))){\n        minN = maxSize;\n        pos = k;\n    }\n    vis[k] = 0;\n}\n\nvoid dfs(int k , int in , int len){//\u83b7\u5f97\u6839\u5230\u5404\u8282\u70b9\u7684\u8def\u5f84\u957f\u5ea6\n    if(len > K)\treturn;\n    addNode(in , len);\n    vis[k] = 1;\n    for(int i = head[k] ; i ; i = Ed[i].upEd)\n        if(!vis[Ed[i].end])\n            dfs(Ed[i].end , in , len + 1);\n    vis[k] = 0;\n}\n\nvoid solve(int dir){\n    nowSize = cntNode = 0;\n    addNode(0 , 0);//\u6839\u81ea\u5df1\u4e5f\u7b97\u5728\u8ba1\u7b97\u5185\u5bb9\u4e2d\n    minN = N + 1;\n    getSize(dir);\n    getZX(dir);\n    vis[pos] = 1;//\u5206\u5272\u5b50\u6811+\u907f\u514d\u6b7b\u5faa\u73af\n    int in = 0;\n    for(int i = head[pos] ; i ; i = Ed[i].upEd)\n        if(!vis[Ed[i].end])\n            dfs(Ed[i].end , ++in , 1);\n    sort(Node + 1 , Node + cntNode + 1);//\u6392\u5e8f\u65b9\u4fbfO(n)\u8ba1\u7b97\u7b54\u6848\n    int l = 1 , r = cntNode , p = cntNode , count = 0;\n    bool f = 0;\n    while(l < r){\n    \tif(l == 1 || Node[l].wei != Node[l - 1].wei){//\u8ba1\u7b97\u957f\u5ea6\u4e3a\u76f8\u540c\u503c\u7684\u4e2a\u6570\u4e0e\u5b50\u6811\u5206\u5e03\n        \twhile(r > p)\n\t\t\t\tcnt[Node[r--].in]--;//\u628a\u4e0a\u4e00\u6b21\u7684\u8bb0\u5f55\u6e05\u9664(\u4e0d\u63a8\u8350\u4f7f\u7528memset\uff0c\u4f1a\u6709\u8f83\u591a\u5197\u4f59\uff0c\u524d\u9762\u7684\u4ee3\u7801\u4e2d\u7684vis\u6570\u7ec4\u540c\u7406)\n        \tcount = 0;\n\t\t\twhile(l < r && Node[l].wei + Node[r].wei > K)//\u7f29\u5c0fr\u7684\u8303\u56f4\n            \tr--;\n            if(l >= r)\tbreak;//\u5230\u8fbe\u8ba1\u7b97\u8fb9\u754c\n        \tp = r;\n        \twhile(l < p && Node[l].wei + Node[p].wei == K){//\u627e\u8ddd\u79bb\u76f8\u540c\u7684\u8282\u70b9\n        \t    cnt[Node[p].in]++;\n        \t    count++;\n        \t    f = 1;\n            \tp--;\n        \t}\n        }\n        ans += count - cnt[Node[l].in];\n        if(p == l){//\u6ce8\u610f\u8fd9\u4e2a\u7ec6\u8282\uff01\n\t\t\tcnt[Node[++p].in]--;\n\t\t\tcount--;\n\t\t}\n        l++;\n    }\n    for(int i = head[pos] ; i ; i = Ed[i].upEd)//\u9012\u5f52\u8c03\u7528\u5b50\u6811\n        if(!vis[Ed[i].end])\n            solve(Ed[i].end);\n}\nint main(){\n    N = read();\n    K = read();\n    for(int i = 1 ; i < N ; i++){\n        int a = read() , b = read();\n        addEd(a , b);\n        addEd(b , a);\n    }\n    solve(1);\n    cout << ans;\n    return 0;\n}\n```\n### \u9898\u76ee\u7ec6\u8282\u4e0d\u5c11\u4e00\u5b9a\u8981\u591a\u52a0\u5c0f\u5fc3\uff01",
        "postTime": 1534001791,
        "uid": 96296,
        "name": "Itst",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF161D \u3010Distance in Tree\u3011"
    }
]