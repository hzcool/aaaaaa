[
    {
        "content": "\u7f51\u4e0a\u7684\u9898\u89e3\u4e00\u4e2a\u90fd\u770b\u4e0d\u61c2\uff0c\u53ef\u80fd\u662f\u6211\u8fc7\u4e8e\u50bb\u903c\u3002\n\n\u9996\u5148\u6709\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff1a\u4e00\u4e2a\u4e32\u7684\u5b50\u4e32\u7684\u64cd\u4f5c\u6b21\u6570\u4e0d\u5927\u4e8e\u8fd9\u4e2a\u4e32\u81ea\u5df1\u3002\u8003\u8651\u5982\u679c\u5df2\u77e5 $s$ \u5982\u4f55\u6c42\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002\u5efa\u51fa $t$ \u7684 SAM\uff0c\u628a $s$ \u4e22\u5230\u4e0a\u9762\u8d2a\u5fc3\u5339\u914d\uff0c\u4e0d\u80fd\u8d70\u4e86\u5219\u56de\u5230\u8d77\u70b9\u7136\u540e\u7b54\u6848\u52a0\u4e00\u3002\u7531\u4e0a\u9762\u7684\u7ed3\u8bba\u6613\u8bc1\u8fd9\u6837\u505a\u7684\u6b63\u786e\u6027\u3002\n\n\u4e0a\u9762\u90a3\u4e2a\u7ed3\u8bba\u7684\u63a8\u8bba\u662f\uff0c\u82e5\u957f\u5ea6\u4e3a $n$ \u7684\u6240\u6709\u4e32\u90fd\u80fd $k$ \u6b65\u4ee5\u5185\u6784\u9020\uff0c\u5219\u957f\u5ea6\u4e0d\u5927\u4e8e $n$ \u7684\u6240\u6709\u4e32\u90fd\u80fd $k$ \u6b65\u4ee5\u5185\u6784\u9020\u3002\u90a3\u4e48\u6211\u4eec\u8003\u8651\u4e8c\u5206\u8f6c\u5316\u4e3a\u5224\u5b9a\u95ee\u9898\uff0c\u6c42\u51fa\u6700\u5927\u7684 $l$ \u4f7f\u5f97\u957f\u5ea6\u4e0d\u5927\u4e8e $l$ \u7684\u4e32\u90fd\u53ef\u4ee5 $k$ \u6b65\u4ee5\u5185\u6784\u9020\u3002\n\n\u8003\u8651\u77e9\u9635\u4e58\u6cd5\uff0c\u4f46\u662f\u5728\u77e9\u9635\u4e58\u6cd5\u4e4b\u524d\u5148\u8981\u8bbe\u8ba1\u4e00\u4e2a\u6709\u7406\u6709\u636e\u7684 dp\u3002\u4ee4 $f_{i,c}$ \u8868\u793a $i$ \u6b65\u4e0d\u80fd\u6784\u9020\u51fa\u7684\u4ee5 $c$ \u5f00\u5934\u7684\u6700\u77ed\u7684\u4e32\u957f\u5ea6\u4e3a $f_{i,c}+1$\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u4ece $f_{i-1}$ \u8f6c\u79fb\u5230 $f_i$\u3002\u8003\u8651\u4e00\u4e2a $c$ \u5f00\u5934\u7684\u4e32\u5728 SAM \u4e0a\u8d70\uff0c\u8d70\u5230\u67d0\u4e2a\u5730\u65b9\u8d70\u4e0d\u52a8\u4e86\uff0c\u5047\u8bbe\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f $d$\uff0c\u90a3\u4e48\u540e\u9762\u63a5\u4efb\u610f\u4e00\u4e2a $d$ \u5f00\u5934\u7684\u53ef\u4ee5\u4ee5 $i-1$ \u6b65\u6784\u9020\u51fa\u7684\u5b57\u7b26\u4e32\uff0c\u5219\u6574\u4e2a\u4e32\u90fd\u53ef\u4ee5 $i$ \u6b65\u6784\u9020\u51fa\u3002\n\n\u90a3\u4e48\u8bbe $g_{c,d}$ \u4e3a\u6700\u77ed\u7684\u4ee5 $c$ \u5f00\u5934\u7684\u5b50\u4e32\uff0c\u5e76\u4e14\u5728\u540e\u9762\u52a0\u4e00\u4e2a $d$ \u5b83\u5c31\u4e0d\u662f\u5b50\u4e32\uff0c\u8fd9\u53ef\u4ee5\u5728 SAM \u4e0a dp \u51fa\u6765\u3002\u6839\u636e\u4e0a\u9762\u90a3\u4e2a\u8fc7\u7a0b\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a$f_{i,c}=\\min\\limits_{d\\in\\Sigma}g_{c,d}+f_{i-1,d}$\u3002\u5982\u679c\u8fd8\u9700\u8981\u66f4\u52a0\u4e25\u8c28\u7684\u8bc1\u660e\uff0c\u90a3\u4e48\u8003\u8651\u4e24\u6b65\uff1a\n- \u8bc1\u660e\u4e0d\u5927\u4e8e\u8fd9\u4e2a\u503c\u7684 $c$ \u5f00\u5934\u7684\u4e32\u5fc5\u7136\u53ef\u4ee5 $i$ \u6b65\u6784\u9020\u3002\u8fd9\u4e2a\u4e32\u5728 SAM \u4e0a\u8d70\u4e0d\u4e0b\u53bb\u7684\u65f6\u5019\u82e5\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f $d$\uff0c\u5219\u5df2\u5339\u914d\u957f\u5ea6\u5fc5\u7136\u4e0d\u5c0f\u4e8e $g_{c,d}$\uff0c\u90a3\u4e48\u540e\u9762\u7684\u4e32\u7684\u957f\u5ea6\u5fc5\u7136\u4e0d\u5927\u4e8e $f_{i-1,d}$\uff0c\u6545\u540e\u9762\u53ef\u4ee5 $i-1$ \u6b65\u6784\u9020\uff0c\u6574\u4e2a\u4e32\u53ef\u4ee5 $i$ \u6b65\u6784\u9020\u3002\n- \u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a\u8fd9\u4e2a\u503c\u52a0\u4e00\u7684 $c$ \u5f00\u5934\u7684\u4e32\u65e0\u6cd5 $i$ \u6b65\u6784\u9020\u3002\u5047\u8bbe\u8fd9\u4e2a\u6700\u5c0f\u503c\u5728 $d$ \u5904\u53d6\u5230\uff0c\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u4e32\uff0c\u524d\u9762 $g_{c,d}$ \u4e2a\u5b57\u7b26\u662f\u6ee1\u8db3 $g_{c,d}$ \u5b9a\u4e49\u7684\u4e00\u4e2a\u4e32\uff0c\u540e\u9762\u63a5\u4e00\u4e2a $d$ \u5f00\u5934\u7684\u957f\u5ea6\u4e3a $f_{i-1,d}+1$ \u7684\u65e0\u6cd5\u88ab $i-1$ \u6b65\u6784\u9020\u7684\u4e00\u4e2a\u4e32\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e32\u5c31\u65e0\u6cd5 $i$ \u6b65\u6784\u9020\u3002\n\n\u8fd9\u4e2a dp \u6709\u53e6\u4e00\u79cd\u7406\u89e3\u65b9\u5f0f\uff1a\u4e24\u4e2a\u5b50\u4e32\u62fc\u5728\u4e00\u8d77\u5982\u679c\u8fd8\u662f\u5b50\u4e32\uff0c\u90a3\u4e48\u5fc5\u5b9a\u4e0d\u4f18\u3002\u4ece\u8fd9\u4e2a\u610f\u4e49\u51fa\u53d1\u7684\u63a8\u5bfc\u4e0e\u4e0a\u9762\u8fd9\u4e2a\u662f\u672c\u8d28\u76f8\u540c\u7684\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u73b0\u5728\u7684 dp \u5df2\u7ecf\u662f $\\{\\min,+\\}$ \u7684\u77e9\u4e58\u5f62\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u77e9\u9635\u5feb\u901f\u5e42\u4f18\u5316\uff0c\u5916\u5c42\u5957\u4e00\u4e2a\u4e8c\u5206\u5373\u53ef\u3002\u4f60\u751a\u81f3\u53ef\u4ee5\u628a\u4e8c\u5206\u548c\u5feb\u901f\u5e42\u5408\u6210\u4e00\u4e2a\u500d\u589e\u3002\u6211\u7684\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(|t||\\Sigma|^2+|\\Sigma|^3\\log n)$\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ninline ll readint(){\n\tll x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxm=1e5+5;\nll n;\nint m;\nchar t[maxm];\nint sz=1,last=0,len[maxm*2],link[maxm*2],nxt[maxm*2][4];\nvoid extend(int c){\n\tint cur=sz++;\n\tlen[cur]=len[last]+1;\n\tint p=last;\n\twhile(p>=0&&!nxt[p][c]){\n\t\tnxt[p][c]=cur;\n\t\tp=link[p];\n\t}\n\tif(p>=0){\n\t\tint q=nxt[p][c];\n\t\tif(len[q]==len[p]+1) link[cur]=q;\n\t\telse{\n\t\t\tint clone=sz++;\n\t\t\tlink[clone]=link[q];\n\t\t\tmemcpy(nxt[clone],nxt[q],sizeof(nxt[0]));\n\t\t\tlen[clone]=len[p]+1;\n\t\t\twhile(p>=0&&nxt[p][c]==q){\n\t\t\t\tnxt[p][c]=clone;\n\t\t\t\tp=link[p];\n\t\t\t}\n\t\t\tlink[cur]=link[q]=clone;\n\t\t}\n\t}\n\tlast=cur;\n}\nint f[4][maxm*2];\nvoid dfs(int u){\n\tif(f[0][u]>=0) return;\n\tfor(int i=0;i<4;i++) if(nxt[u][i]) dfs(nxt[u][i]);\n\tfor(int i=0;i<4;i++){\n\t\tf[i][u]=nxt[u][i]?2e9:0;\n\t\tfor(int j=0;j<4;j++) if(nxt[u][j])\n\t\t\tf[i][u]=min(f[i][u],f[i][nxt[u][j]]+1);\n\t}\n}\nstruct matrix{\n\tll a[4][4];\n\tmatrix operator *(matrix B){\n\t\tmatrix C;\n\t\tfor(int i=0;i<4;i++) for(int j=0;j<4;j++){\n\t\t\tC.a[i][j]=n;\n\t\t\tfor(int k=0;k<4;k++)\n\t\t\t\tC.a[i][j]=min(C.a[i][j],a[i][k]+B.a[k][j]);\n\t\t}\n\t\treturn C;\n\t}\n};\nmatrix ksm(matrix A,ll b){\n\tmatrix ans;\n\tfor(int i=0;i<4;i++)\n\t\tfor(int j=0;j<4;j++) ans.a[i][j]=i==j?0:n;\n\twhile(b){\n\t\tif(b%2==1) ans=ans*A;\n\t\tA=A*A;\n\t\tb/=2;\n\t}\n\treturn ans;\n}\nmatrix A[60];\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tn=readint();\n\tscanf(\"%s\",t+1);\n\tm=strlen(t+1);\n\tlink[0]=-1;\n\tfor(int i=1;i<=m;i++) extend(t[i]-'A');\n\tmemset(f,-1,sizeof(f));\n\tdfs(0);\n\tfor(int i=0;i<4;i++)\n\t\tfor(int j=0;j<4;j++) A[0].a[i][j]=f[i][nxt[0][j]]+1;\n\tfor(int i=1;i<60;i++) A[i]=A[i-1]*A[i-1];\n\tll ans=0;\n\tmatrix B;\n\tfor(int i=0;i<4;i++)\n\t\tfor(int j=0;j<4;j++) B.a[i][j]=i==j?0:n;\n\tfor(int i=59;i>=0;i--){\n\t\tmatrix C=A[i]*B;\n\t\tll res=n+1;\n\t\tfor(int j=0;j<4;j++)\n\t\t\tfor(int k=0;k<4;k++) res=min(res,C.a[j][k]);\n\t\tif(res<n){\n\t\t\tans+=1ll<<i;\n\t\t\tB=C;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans+1);\n\t#ifdef LOCAL\n\tfprintf(stderr,\"%d\\n\",(int)clock());\n\t#endif\n\treturn 0;\n}\n```",
        "postTime": 1631667508,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF461E \u3010Appleman and a Game\u3011"
    },
    {
        "content": "orz\u539f\u9898\u89e3\uff0c\u770b\u4e86\u5f88\u4e45\u624d\u770b\u61c2\u3002\u3002\u3002\u5176\u5b9e\u539f\u9898\u89e3\u7684\u6b65\u9aa4\u5f88\u6e05\u6670\uff0c\u53ea\u662f\u5bf9\u4e8e\u6211\u8fd9\u79cd\u5f31\u83dc\u800c\u8a00\u8fd8\u662f\u6709\u4e9b\u5730\u65b9\u8981\u60f3\u5f88\u4e45\u624d\u80fd\u60f3\u660e\u767d\u4e3a\u4ec0\u4e48\u3002\u3002\u3002\u4e8e\u662f\u5199\u4e86\u4e2a\uff08\u4f3c\u4e4e\uff09\u6bd4\u8f83\u8be6\u7ec6\u7684\u9898\u89e3\u3002\n\n\u8003\u8651Appleman\u6240\u91c7\u53d6\u7684\u6700\u4f18\u7b56\u7565\u662f\u4ec0\u4e48\u6837\u7684\u3002\n\n\u5047\u8bbe\u5f53\u524d\u5df2\u7ecf\u586b\u4e86i-1\u4e2a\u5b57\u7b26\uff0c\u627e\u5230t\u4e2d\u6700\u957f\u7684\u6ee1\u8db3s[i,i+len-1]=t[pos,pos+len-1]\u7684\u5b50\u4e32\u586b\u8fdb\u53bb\uff0c\u5176\u4e2dpos\u662f\u5b50\u4e32\u7684\u5de6\u7aef\u70b9\uff0clen\u662f\u5b50\u4e32\u7684\u957f\u5ea6\u3002\n\n\u8fd9\u662f\u56e0\u4e3a\uff0c\u5982\u679c\u4e00\u76f4\u586b\u77ed\u4e32\uff0c\u76f8\u5f53\u4e8e\u5230\u4e86\u6700\u540e\u8fd8\u8981\u6bd4\u586b\u957f\u4e32\u7684\u591a\u586b\u51e0\u4e2a\u624d\u80fd\u586b\u5230n\u3002\n\u5982\u679c\u5148\u586b\u77ed\u4e32\uff0c\u7136\u540e\u5728\u67d0\u4e00\u6b65\u586b\u957f\u4e32\uff0c\u6700\u591a\u4e5f\u53ea\u80fd\u548c\u4e4b\u524d\u7684\u53d8\u6210\u4e00\u6837\u7684\u957f\u5ea6\uff0c\u4e0d\u53ef\u80fd\u6bd4\u4e00\u76f4\u586b\u957f\u4e32\u7684\u957f\u3002\uff08\u53ef\u4ee5\u753b\u56fe\u7406\u89e3\u4e00\u4e0b\uff09\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6765\u505a\u9898\u4e86\u3002\n\n\u9898\u76ee\u8981\u6c42\u6700\u5c0f\u503c\u6700\u5927\uff0c\u53d1\u73b0\u5f53\u53ef\u4ee5\u7528\u8f83\u5c0f\u6b65\u6570\u586b\u65f6\u663e\u7136\u6bd4\u5b83\u5927\u7684\u6b65\u6570\u4e5f\u90fd\u53ef\u4ee5\uff0c\u6ee1\u8db3\u4e8c\u5206\u6027\u8d28\uff0c\u4e8e\u662f\u53ef\u4ee5**\u4e8c\u5206\u7b54\u6848**\u3002\n\n\u8bbedp[x][i][j]\u8868\u793a\u586bx\u6b21\uff0c\u7b2cx\u6b21\u586b\u8fdb\u53bb\u7684\u5b50\u4e32\u5f00\u5934\u7684\u5b57\u6bcd\u662fi\uff0c\u7b2cx+1\u6b21\u586b\u8fdb\u53bb\u7684\u5b50\u4e32\u5f00\u5934\u7684\u5b57\u6bcd\u662fj\uff0c\u6240\u80fd\u586b\u51fa\u7684\u6700\u5c0f\u957f\u5ea6\u3002\uff08j\u4e0d\u88ab\u8ba1\u7b97\u5728\u957f\u5ea6\u4e2d\uff09\n\n\u5f53dp[x][i][j]<n\u65f6\uff0c\u5373\u91c7\u7528\u8fd9\u79cdt\uff0c\u5373\u4f7fAppleman\u7528\u4e86\u6700\u4f18\u586b\u6cd5\u4e5f\u53ea\u80fd\u5728\u8fd8\u6ca1\u5230n\u7684\u65f6\u5019\u5c31\u7528\u5b8c\u4e86x\u6b21\uff0c\u5269\u4e0b\u7684\u957f\u5ea6\u9700\u8981\u7684\u6b65\u6570\u4e3a\u6b63\uff0c\u5373\u7b54\u6848>x\uff1b\u53cd\u4e4b\uff0c\u7b54\u6848\u5c0f\u4e8e\u7b49\u4e8ex\u3002\n\n**\u521d\u59cb**\uff1adp[1][i][j]\u76f8\u5f53\u4e8e\u627e\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3aL\u7684\u5b50\u4e32\uff0c\u4f7f\u5f97\u5b83\u5728t\u4e2d\u51fa\u73b0\u7684\u957f\u5ea6\u662fL-1\uff0c\u90a3\u4e48\u6700\u5c0f\u7684L-1\u5c31\u662fdp[1][i][j]\u3002\n\n\u7136\u800c\u8fd9\u5e76\u4e0d\u597d\u627e\uff0c\u4e8e\u662f\u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c\u53d1\u73b0\u663e\u7136\u5730\uff0cdp[1][i][j]\u5176\u5b9e\u5c31\u662f**\u6700\u5c0f\u7684\u4ee5i\u5f00\u5934\uff0cj\u7ed3\u5c3e\u4e14\u4e0d\u662ft\u7684\u5b50\u4e32\u7684\u6700\u77ed\u5b57\u7b26\u4e32**\u7684\u957f\u5ea6\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u957f\u5ea6L\uff0c\u627e\u51fat\u4e2d\u6709\u591a\u5c11\u79cd**\uff08\u6ce8\u610f\u4e0d\u662f\u201c\u4e2a\u201d\uff09**\u4e0d\u540c\u7684\u4ee5i\u5f00\u5934\uff0cj\u7ed3\u5c3e\u4e14\u957f\u5ea6\u4e3aL\u7684\u5b50\u4e32\uff08\u6570\u91cf\u8bb0\u4e3acalc[i][j][L]\uff09\uff0c\n\u5047\u8bbe\u5b57\u7b26\u96c6\u5927\u5c0f\u662fC\uff0c\u5982\u679ccalc[i][j][L]=C^(L-2)\uff0c\u5c31\u7ee7\u7eed\u5f80\u4e0b\u679a\u4e3e\uff0c\u4e0d\u7136\u5c31\u8ba9dp[1][i][j]=L-1\u5e76break\u3002\u56e0\u4e3a\u8981\u6c42\u5b50\u4e32\u672c\u8d28\u4e0d\u540c\uff0c\u90a3\u5c31\u7528**\u5b57\u5178\u6811**\u7edf\u8ba1\u3002\n\n\u7136\u800c\u8fd9\u6837\u8fd8\u662f\u4e0d\u884c\uff0c\u56e0\u4e3aL<=|t|<=1e5\uff0c\u8fd9\u6837\u4f1aT\u98de\u3002\n\n\u4e8e\u662f\u518d\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\uff0c\u663e\u7136\u6211\u4eec\u53ea\u6709\u5f53calc[i][j][L]>=pw(C,L-2)\u65f6\u624d\u4e0d\u5408\u6cd5\uff0c\u800ccalc[i][j][L]\u6052<=|t|\uff0c\u5373|t|>=calc[i][j][L]>=pw(C,L-2)\uff0c\u5373L<=logC_|t|+2\u65f6\u624d\u4e0d\u5408\u6cd5\u3002\n\n\u6362\u800c\u8a00\u4e4b\uff0c**L\u6700\u5927\u4e0d\u8d85\u8fc7logC_|t|+3**\u3002\n\u8fd9\u6837\u4e00\u6765\uff0c\u76f4\u63a5\u6309\u7167\u4e4b\u524d\u8bf4\u7684\u65b9\u6cd5\u505a\u5c31\u53ef\u4ee5\u4e86\u3002\n\n**\u8f6c\u79fb**\uff1adp[x+1][i][j]=min(dp[x][i][k]+dp[1][k][j]) (0<=k<=C-1)\n\n\u7531\u4e8e1<=x<=n\u800cn<=1e18\uff0c\u53ef\u4ee5**\u77e9\u9635\u4e58\u6cd5+\u5feb\u901f\u5e42**\u3002\n\n\u95ee\u9898\u89e3\u51b3\u8fa3\uff0c\u590d\u6742\u5ea6\u662fO(|t|*logC_|t|+((C^3)*(log^2 n)))\u7684\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(x,y,z) for(register int x=y; x<=z; x++)\n#define downrep(x,y,z) for(register int x=y; x>=z; x--)\n#define LL long long\n#define repedge(x,y) for(register int x=hed[y]; ~x; x=edge[x].nex)\n#define ms(x,y,z) memset(x,y,sizeof(z))\ninline int read(){\n    int x=0; int w=0; char ch=0;\n    while(ch<'0' || ch>'9') w|=ch=='-',ch=getchar();\n    while(ch>='0' && ch<='9') x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n    return w? (-x):x;\n}\nconst int N=100005;\nconst int C=4;\nconst int L=15;\nLL n;\nint m,calc[C][C][L],DEP,tr[N*L][C],nw[N*L],cnt;\nchar s[N];\nstruct mat{ LL num[C][C]; }B;\nLL PW(LL a,LL b){\n    LL res=1;\n    while(b){ if (b&1) res=res*a; a=a*a; b>>=1; }\n    return res;\n}\nvoid insert(int x){\n    int k=0; int u=s[x]-'A';\n    rep(i,x,min(m-1,x+DEP-1)){\n       int p=s[i]-'A';\n       tr[k][p]=tr[k][p]? tr[k][p]:(tr[k][p]=++cnt);\n       k=tr[k][p];\n       if (!nw[k]){ nw[k]=1; ++calc[u][p][i-x+1]; }\n    }\n}\nmat operator * (mat a,mat b){\n    mat c; rep(i,0,C-1) rep(j,0,C-1) c.num[i][j]=n+1ll;\n    rep(k,0,C-1) rep(i,0,C-1) rep(j,0,C-1)\n    c.num[i][j]=min(c.num[i][j],a.num[i][k]+b.num[k][j]);\n    return c;\n}\nmat pw(mat a,LL b){\n    mat res=a; b-=1ll;\n    while(b){ if (b&1) res=res*a; a=a*a; b>>=1; }\n    return res;\n}\nint check(LL x){\n    mat res=pw(B,x); int pd=0;\n    rep(i,0,C-1) rep(j,0,C-1)\n    pd|=(res.num[i][j]<n);\n    return pd;\n}\nLL solve(){\n    LL l=1; LL r=n;\n    while(l<r){\n       LL mid=((l+r)/2ll);\n       if (check(mid)) l=mid+1;\n       else r=mid;\n    }\n    return l;\n}\nint main(){\n    scanf(\"%lld\",&n); scanf(\"%s\",&s);\n    m=strlen(s); DEP=min(11,m+1);\n    rep(i,0,m-1) insert(i);\n    rep(i,0,C-1) rep(j,0,C-1) downrep(k,DEP,2)\n    if (calc[i][j][k]!=PW(C,k-2)) B.num[i][j]=k-1;\n    printf(\"%lld\\n\",solve());\n    return 0;\n}\n```\n\n    ",
        "postTime": 1546838424,
        "uid": 47611,
        "name": "\u4e0a\u5929\u53f0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF461E \u3010Appleman and a Game\u3011"
    },
    {
        "content": "\u5f88\u4e45\u6ca1\u6709\u5199CF\u9898\u7684\u9898\u89e3\u4e86...\u770b\u5728\u9898\u89e3\u6570\u91cf\u4e0d\u591a\u7684\u60c5\u51b5\u4e0b\u6765\u5199\u4e00\u4e0b\u5427\n\n\u9996\u5148\u6709\u4e00\u79cd\u76f4\u89c2\u7684\u601d\u8def\u5c31\u662f\u6211\u4eec\u8003\u8651\u6c42\u51fa\u6700\u77ed\u7684\u6ca1\u6709\u5728\u539f\u4e32\u4e2d\u51fa\u73b0\u7684\u4e32\u7136\u540e\u5c06\u5b83\u53cd\u590d\u91cd\u590d\u6784\u9020\u4e00\u7ec4\u89e3\uff01\n\n\u5f88\u663e\u7136\u8fd9\u6709\u8bf8\u591a\u7684\u8fb9\u754c\u6761\u4ef6\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1\u5176\u6b63\u786e\u6027\uff0c\u56e0\u4e3a\u6700\u77ed\u7684\u5b9e\u9645\u4e0a\u6709\u5f88\u591a\u79cd\u60c5\u51b5\uff0c\u4f46\u662f\u9488\u5bf9\u8fd9\u4e00\u4e2a\u4e32\u7684\u7ed3\u5c3e\uff08\u60f3\u60f3\u770b\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u4e0b\u4e00\u4e2a\u4e32\u7684\u5f00\u5934\uff09\u4e5f\u5c31\u6709\u5f88\u591a\u9009\u62e9\uff0c\u7136\u540e\u6709\u4e9b\u9009\u62e9\u4f1a\u66f4\u4f18\uff0c\u53ef\u662f\u6709\u4e9b\u9009\u62e9\u4e0d\u4f18\uff0c\u7136\u540e\u6211\u4eec\u6c42\u51fa\u6765\u7684\u4e0d\u4e00\u5b9a\u80fd\u6700\u4f18\uff01\n\u800c\u4e14\u5b9e\u9645\u4e0a\u6211\u4eec\u6700\u77ed\u7684\u4e32\u662f\u53ef\u4ee5\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u914d\u5bf9\u6765\u5b8c\u6210\u6784\u9020\u51fa\u6700\u4f18\u89e3\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u5b57\u6bcd\u548c\u6700\u540e\u51fa\u73b0\u7684\u5b57\u6bcd\u6765\u5b8c\u6210DP\u5373\u53ef\uff01\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u8fd9\u6837\u6700\u77ed\u7684\u4e32\u4e0d\u5728\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u957f\u5ea6\u662f\u4e0d\u4f1a\u8d85\u8fc710\u7684\uff0c\u53ef\u4ee5\u6839\u636e\u751f\u65e5\u6096\u8bba\uff0c\u7136\u540e\u6211\u4eec\u53ea\u9700\u8981\u628a\u4e0d\u8d85\u8fc710\u7684\u5b57\u7b26\u4e32\u8fde\u7eed\u5730\u5efa\u7acb\u5728Trie\u4e0a\u9762\uff0c\u7136\u540e\u6c42\u51fa\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u6700\u77ed\u7684\u4e0d\u5728\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u4e32\u7684\u957f\u5ea6\u5373\u53ef\uff01\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5DP\u4e86\uff0c\u4f46\u662f\u7531\u4e8e\u89c4\u6a21\u8fbe\u52301e18\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u4e8c\u5206\u7528\u65f6\uff0c\u7136\u540e\u6c42\u51fa\u5728\u8fd9\u6837\u7684\u7528\u65f6\u60c5\u51b5\u4e0b\u80fd\u6784\u9020\u51fa\u6700\u77ed\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u7136\u540echeck\u5c31\u884c\u4e86\uff0c\u7531\u4e8e\u5b57\u7b26\u96c6\u5f88\u5c0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u77e9\u4e58\u7ef4\u62a4DP\uff08\u8fd9\u4e2a\u77e9\u4e58\u4e0d\u5e94\u8be5\u5b8c\u5168\u53eb\u505a\u77e9\u4e58\uff0c\u662f\u500d\u589eFloyd\uff0c\u6709\u4e24\u79cd\u5199\u7684\u59ff\u52bf\u4e00\u79cd\u662f\u76f4\u63a5\u7c7b\u4f3c\u77e9\u4e58\u7ef4\u62a4\uff0c\u8fd8\u53ef\u4ee5\u7528\u500d\u589e\u7ef4\u62a4\uff0c\u8c8c\u4f3c\u591a\u4e00\u7ef4\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0bP1613\u8dd1\u8def\u90a3\u4e00\u9898\uff09\n\n\u7531\u4e8e\u5efaTrie\u7684\u5e38\u6570\u548c\u77e9\u4e58\u7684\u590d\u6742\u5ea6\u90fd\u5f88\u5c0f\uff0c\u56e0\u6b64\u7a0b\u5e8f\u80fd\u98de\u5feb\u901a\u8fc7\u6240\u6709\u6d4b\u8bd5\u70b9\uff01\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\ninline ll read() {\n\tchar c = getchar(); ll x = 0, f = 1;\n\twhile (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * f;\n}\n\nconst int N = 100005;\n\nll n; char str[N]; int l; bool usd[N << 4];\nint ch[N << 4][4], buc[4][4][15], tot;\n\nstruct matrix {\n\tll a[4][4];\n\tvoid init(ll v) {\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j < 4; j++) a[i][j] = v;\n\t}\n} bse;\nmatrix operator * (matrix a, matrix b) {\n\tmatrix c; c.init(n + 1);\n\tfor (int i = 0; i < 4; i++)\n\t\tfor (int j = 0; j < 4; j++)\n\t\t\tfor (int k = 0; k < 4; k++) c.a[i][j] = min(c.a[i][j], a.a[i][k] + b.a[k][j]);\n\treturn c; \n}\n\nint fpow(int x, int y) {\n\tint ret = 1; if (y < 1) return 1;\n\tfor (; y; y >>= 1, x = x * x) if (y & 1) ret = ret * x;\n\treturn ret;\n}\nbool check(ll mid) {\n\tif (!mid) return false; mid--;\n\tmatrix res = bse, cp = bse;\n\tfor (; mid; mid >>= 1, cp = cp * cp) if (mid & 1) res = res * cp;\n\tfor (int i = 0; i < 4; i++)\n\t\tfor (int j = 0; j < 4; j++) if (res.a[i][j] < n) return true;\n\treturn false;\n}\n\nint main() {\n\tn = read(); scanf(\"%s\", str + 1); l = strlen(str + 1); \n\tint lim = min(l, 10) + 1;\n\tfor (int i = 1; i <= l; i++) {\n\t\tint now = 0, fir = str[i] - 'A';\n\t\tfor (int j = i; j <= min(i + lim - 1, l); j++) {\n\t\t\tint c = str[j] - 'A';\n\t\t\tif (!ch[now][c]) ch[now][c] = ++tot;\n\t\t\tnow = ch[now][c];\n\t\t\tif (!usd[now]) usd[now] = true, buc[fir][c][j - i + 1]++; \n\t\t}\n\t}\n\tfor (int i = 0; i < 4; i++)\n\t\tfor (int j = 0; j < 4; j++)\n\t\t\tfor (int k = lim; k >= 2; k--) if (buc[i][j][k] != fpow(4, k - 2)) bse.a[i][j] = k - 1;\n\tll l = 0, r = n + 1;\n\twhile (l + 1 < r) {\n\t\tll mid = (l + r) >> 1;\n\t\tif (check(mid)) l = mid; else r = mid;\n\t}\n\tprintf(\"%lld\\n\", r); \n\treturn 0;\n}\n\n```\n",
        "postTime": 1595596419,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF461E \u3010Appleman and a Game\u3011"
    }
]