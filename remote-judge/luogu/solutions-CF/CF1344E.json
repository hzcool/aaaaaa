[
    {
        "content": "\u8003\u8651\u4e00\u8f86\u706b\u8f66\u7684\u8def\u5f84\uff0c\u5bf9\u4e8e\u6240\u6709\u8282\u70b9 $u$ \uff0c\u5982\u679c\u706b\u8f66\u8981\u4ece $u$ \u8d70\u5411\u4e0b\u4e00\u4e2a\u70b9 $v$ \u4e14\u4e0a\u4e00\u6b21\u7ecf\u8fc7 $u$ \u7684\u706b\u8f66\u8d70\u7684\u8fb9\u4e0d\u662f $u->v$\uff0c\u8bbe\u4e0a\u4e00\u8f86\u706b\u8f66\u7ecf\u8fc7\u8fd9\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u4e3a $L$\uff0c\u5f53\u524d\u706b\u8f66\u8d70\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u4e3a $R$\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u5728\u65f6\u95f4\u533a\u95f4 $(L,R]$ \u5185\u5bf9\u8fd9\u4e2a\u8282\u70b9\u64cd\u4f5c\u4e00\u6b21\u3002\n\n\u5148\u89e3\u51b3\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u6709 $k$ \u4e2a\u533a\u95f4 $(L_i,R_i]$\uff0c\u5bf9\u4e8e\u533a\u95f4 $i$ \u6211\u4eec\u9700\u8981\u5728 $(L_i,R_i]$ \u7684\u65f6\u95f4\u533a\u95f4\u5185\u64cd\u4f5c\u4e00\u6b21\u8fd9\u4e2a\u533a\u95f4\uff0c\u6bcf\u4e2a\u65f6\u523b\u53ef\u4ee5\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u3002\u5982\u679c\u65f6\u95f4\u8d85\u8fc7\u67d0\u4e2a\u533a\u95f4\u7684 $R_i$ \u4e14\u8fd9\u4e2a\u533a\u95f4\u6ca1\u6709\u88ab\u64cd\u4f5c\u8fc7\u6211\u4eec\u5c31\u5728\u65f6\u523b $R_i$ \u5931\u8d25\u4e86\uff0c\u6c42\u6700\u665a\u5931\u8d25\u7684\u65f6\u95f4\u3002\n\n\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u662f\u5bb9\u6613\u7684\uff0c\u7ef4\u62a4\u4e00\u6761\u626b\u63cf\u7ebf\uff0c\u6bcf\u6b21\u53d6\u626b\u63cf\u7ebf\u524d\u672a\u88ab\u5904\u7406\u7684 $R_i$ \u6700\u5c0f\u7684\u533a\u95f4\u64cd\u4f5c\u3002\u6ce8\u610f\u9700\u8981\u5904\u7406\u4e00\u4e0b\u8f83\u5927\u7684\u503c\u57df\u3002\n\n\u8003\u8651\u5982\u4f55\u8f6c\u5316\u4e3a\u4e0a\u8ff0\u95ee\u9898\u3002\u4e00\u4e2a\u76f4\u63a5\u7684\u65b9\u6cd5\u5373\u4e3a\u5bf9\u706b\u8f66\u6309\u7167 $t_i$ \u5347\u5e8f\u4f9d\u6b21\u6cbf\u8def\u5f84\u8ba1\u7b97\u4ea7\u751f\u7684\u533a\u95f4\u3002\u8003\u8651\u5206\u6790\u4e00\u4e0b\u4ea7\u751f\u7684\u533a\u95f4\u7684\u4e0a\u754c\uff1a\u8bbe\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u7684\u8fb9\u4e3a\u5b83\u7684\u504f\u597d\u8fb9\uff0c\u91cd\u8fb9\u4e3a\u5176\u6307\u5411\u5b50\u6811\u5927\u5c0f\u6700\u5927\u7684\u5b50\u8282\u70b9\u7684\u8fb9\u3002\u8bb0\u52bf\u80fd $\\Phi$ \u4e3a\u4e0d\u662f\u504f\u597d\u8fb9\u7684\u91cd\u8fb9\u6570\u91cf\u3002\n\n\u8003\u8651\u4ece\u53f6\u5b50\u5411\u4e0a\u8ba1\u7b97\u4e00\u6b21\u64cd\u4f5c\u7684\u5f71\u54cd\uff0c\u663e\u7136\u53ea\u6709\u8d70\u8fc7\u975e\u504f\u597d\u8fb9\u4f1a\u4ea7\u751f\u533a\u95f4\u3002\u6839\u636e\u6811\u94fe\u5256\u5206\u76f8\u5173\u77e5\u8bc6\u6211\u4eec\u77e5\u9053\u5411\u4e0a\u8d70\u8fc7\u7684\u975e\u91cd\u8fb9\u6570\u91cf\u4e3a $O(\\log n)$\uff0c\u4ea7\u751f $1$ \u4e2a\u533a\u95f4\u4e14\u4f7f $\\Phi$ \u4e0a\u5347 $1$\uff0c\u800c\u6bcf\u8d70\u4e00\u6761\u91cd\u8fb9\uff0c\u4ea7\u751f $1$ \u4e2a\u533a\u95f4\uff0c$\\Phi$ \u4e0b\u964d $1$\uff0c\u663e\u7136\u6709 $\\Phi \\geq 0$\uff0c\u5219\u603b\u533a\u95f4\u6570\u91cf\u4e3a $O(m \\log n + n)$\u3002\n\n\u63a5\u4e0b\u6765\u53ea\u9700\u8981\u5feb\u901f\u627e\u51fa\u8fd9\u4e9b\u4ea7\u751f\u7684\u533a\u95f4\uff0c\u6ce8\u610f\u5230\u4e0a\u9762\u64cd\u4f5c\u7684\u5f62\u5f0f\u548c LCT \u7684 access \u975e\u5e38\u76f8\u4f3c\uff08\u4e8b\u5b9e\u4e0a\u4e0a\u9762\u7684\u52bf\u80fd\u5206\u6790\u5373\u4e3a LCT access \u7684\u5206\u6790\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 LCT \u7ef4\u62a4\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(m \\log^2 n + n \\log n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nconst int maxn = 100005;\nstd::unordered_map<ll,ll>nxt;\nll l[maxn*40],r[maxn*40],last[maxn],d[maxn];\nint n,m,rk[maxn*40],ch[maxn][2],fa[maxn],hd[maxn],tl,cnt,s[maxn],t[maxn],tag[maxn];\nstruct edge {\n\tint v,w,nxt;\n}E[maxn<<1];\nvoid add_edge(int u,int v,int w){E[++tl].v=v;E[tl].w=w;E[tl].nxt=hd[u];hd[u]=tl;}\nint cmp(int a,int b) { return l[a] < l[b]; }\n\nll find_next(ll x){\n\tll d = nxt[x];\n\tif(!d)return x;\n\treturn nxt[x] = find_next(d);\n}\n\nint not_root(int x) {return (fa[x] && (ch[fa[x]][0]==x||ch[fa[x]][1]==x));}\n\nvoid give_tag(int x,int y) { if (!x) return; tag[x] = last[x] = y; }\n\nvoid pushdown(int x) {\n\tif (!tag[x]) return;\n\tgive_tag(ch[x][0],tag[x]);\n\tgive_tag(ch[x][1],tag[x]);\n\ttag[x] = 0;\n}\n\nvoid rotate(int x) {\n\t\n    int f=fa[x],g=fa[f],l=ch[f][1]==x,c=ch[x][l^1];\n    if (not_root(f)) ch[g][ch[g][1]==f]=x;\n    ch[x][l^1]=f;ch[f][l]=c;\n    if (c) fa[c]=f;\n    fa[f]=x; fa[x]=g;\n}\n\nstd::stack<int>stk;\n\nvoid splay(int x) {\n\tint u=x; stk.push(u);\n    while (not_root(u)) {stk.push(u=fa[u]);}\n    while (!stk.empty()) {u=stk.top();stk.pop();pushdown(u);}\n\twhile(not_root(x)){\n    \trotate(x);\n    \tif (not_root(fa[x])&&not_root(x)) rotate((ch[fa[x]][1]==x)==(ch[fa[fa[x]]][1]==fa[x])?fa[x]:x);\n    }\n}\n\nvoid access(int x,int t) {\n\tint u = x;\n\tfor (int y = 0; x; x = fa[y = x] ) {\n\t\tsplay(x);\n\t\tif (y) {\n\t\t\tch[x][1] = y;\n\t\t\tl[++cnt] = last[x]+d[x]+1;\n\t\t\tr[cnt] = t + d[x];\n\t\t//\tprintf(\"change %d %d [%lld %lld]\\n\",x,y,l[cnt],r[cnt]); \n\t\t}\n\t} splay(u);\n\tgive_tag(ch[u][0],t);\n//\tlast[u] = t;\n}\t\t\t\n\nvoid dfs1(int u,int f) {\n\tfa[u] = f;\n\tlast[u]=-d[u];\n\tfor (int i = hd[u]; i; i = E[i].nxt) {\n\t\tint v =E[i].v, w = E[i].w;\n\t\tif (v == f) continue;\n\t\tif (!ch[u][1]) { ch[u][1] = v;  }\n\t\td[v] = d[u] + w;\n\t\tdfs1(v,u);\n\t}\n}\nint p = 0;\nstd::priority_queue<std::pair<ll,int>>pq;\nvoid add(ll x) {\n\twhile (p < cnt && l[rk[p+1]] <= x) { \n\t\tpq.push(std::make_pair(-r[rk[p+1]],rk[p+1]));\n\t\tp++;\n\t}\n}\n\n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i = 1; i < n; ++ i) {\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd_edge(u,v,w);\n\t\tadd_edge(v,u,w);\n\t}\n\tfor (int i = 1; i <= m; ++ i) \n\t\tscanf(\"%d%d\",&s[i],&t[i]);\n\tdfs1(1,0); cnt = 0;\n\tfor (int i = 1; i <= m; ++ i) \n\t\taccess(s[i],t[i]);\n\tfor (int i = 1; i <= cnt; ++ i) rk[i] = i;\n\tstd::sort(rk+1,rk+cnt+1,cmp);\n\tll day = 1;\n\tint ans2=0;\n\tstd::map<ll,int>cwt;\n\tll last = 0;\n\tadd(1);\n\twhile (1) {\n\t\twhile (!pq.empty()) {\n\t\t\tauto P = pq.top(); pq.pop();\n\t\t\tint u = P.second;\n\t\t\tif (r[u] > last) { last = r[u];  }\n\t\t\tif (day > r[u]) { \n\t\t\t\n\t\t\t\tfor (auto x:cwt) { if (x.first < r[u]) ans2 += x.second; }\n\t\t\t\tprintf(\"%lld %d\\n\",r[u],ans2); \n\t\t\t\treturn 0; \n\t\t\t}\n\t\t\tday ++; add(day);\n\t\t\tcwt[r[u]]++;\n\t\t} if (p == cnt) break;\n\t\tday = std::max(day, l[rk[p+1]]);\n\t\tadd(day);\n\t} printf(\"-1 %d\\n\",cnt);\n\treturn 0; //\n}\n\n\n\u00a0\n```\n",
        "postTime": 1608608754,
        "uid": 48355,
        "name": "EternalAlexander",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1344E \u3010Train Tracks\u3011"
    },
    {
        "content": "> [CF1344E Train Tracks](https://www.luogu.com.cn/problem/CF1344E)\n\n\u82e5\u8282\u70b9 $i$ \u5728 $t_1$ \u65f6\u523b\u5fc5\u987b\u6307\u5411 $x$\uff0c\u63a5\u4e0b\u6765\u7b2c\u4e00\u6b21\u5207\u6362\u513f\u5b50\u7684\u65f6\u523b\u4e3a $t_2$\uff0c\u5219\u5fc5\u987b\u5b58\u5728\u65f6\u523b $t\\in [t_1 + 1, t_2]$ \u4f7f\u5f97 $i$ \u4ece\u6307\u5411 $x$ \u53d8\u6210\u6307\u5411 $y$\u3002\n\n\u627e\u51fa\u6240\u6709\u8fd9\u6837\u7684\u65f6\u523b\u533a\u95f4 $I_1, I_2, \\cdots, I_k$\uff0c\u5219\u95ee\u9898\u76f8\u5f53\u4e8e\u7ed9\u6bcf\u4e2a $I_i$ \u5206\u914d\u65f6\u523b $t_i$\uff0c\u4f7f\u5f97 $t_i$ \u4e92\u4e0d\u76f8\u540c\u4e14 $t_i\\in I_i$\u3002\u8fd9\u662f\u7ecf\u5178\u95ee\u9898\u3002\u5c06 $I$ \u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u8003\u8651\u6bcf\u4e2a\u65f6\u523b $t$\uff0c\u5c06\u6240\u6709\u5de6\u7aef\u70b9\u4e3a $t$ \u7684\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u52a0\u5165\u96c6\u5408 $S$\uff0c\u5e76\u53d6\u51fa $S$ \u4e2d\u6700\u5c0f\u7684\u5143\u7d20 $v$\u3002\u82e5 $v < t$\uff0c\u8bf4\u660e\u4e0d\u5b58\u5728\u4e00\u79cd\u65b9\u6848\u4f7f\u5f97\u53f3\u7aef\u70b9\u5728 $v$ \u65f6\u523b\u53ca\u4e4b\u524d\u7684\u533a\u95f4\u6ee1\u8db3\u6761\u4ef6\uff0c\u5373 $v$ \u4e3a\u6700\u665a\u7206\u70b8\u65f6\u95f4\u3002\u5f97\u5230 $v$ \u540e\u5bb9\u6613\u6c42\u51fa\u6700\u5c11\u5207\u6362\u6b21\u6570\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u5982\u4f55\u6c42\u5f97\u8fd9\u6837\u7684 $I_k$\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 $i$\uff0c\u8bbe\u5176\u513f\u5b50\u5206\u522b\u4e3a $x_1\\sim x_u$\u3002\u8bbe $S(i)$ \u8868\u793a\u76ee\u7684\u5730\u5728 $i$ \u5b50\u6811\u5185\u7684\u706b\u8f66\u7684\u51fa\u53d1\u65f6\u95f4\u96c6\u5408\uff0c\u5219 $S(i) = \\bigcup\\limits_{i = 1} ^ u S(x_i)$\uff0c\u800c\u6bcf\u4e2a $S(x_i)$ \u5185\u7684\u5143\u7d20 $t$ \u8868\u793a $t$ \u65f6\u523b $i$ \u5fc5\u987b\u6307\u5411 $x_i$\u3002\u6ce8\u610f\u5230\u5408\u5e76\u4e24\u4e2a\u96c6\u5408 $S, T$ \u65f6\uff0c\u4ec5\u4ea7\u751f $\\mathcal{O}(\\min(|S|, |T|))$ \u4e2a\u65b0\u65f6\u523b\u533a\u95f4\u3002\u6362\u8a00\u4e4b\uff0c\u5c06\u5143\u7d20 $t\\in S$ \u63d2\u5165\u96c6\u5408 $T$ \u65f6\uff0c\u81f3\u591a\u4ea7\u751f $1$ \u4e2a\u65b0\u533a\u95f4\u3002\u6839\u636e\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u590d\u6742\u5ea6\u8bc1\u660e\uff0c\u65f6\u523b\u533a\u95f4\u603b\u6570 $k = \\mathcal{O}(m\\log n)$\u3002\n\n\u56e0\u6b64\uff0c\u53ef\u4ee5\u76f4\u63a5 LCT \u6c42\u51fa\u6240\u6709 $I_i$\uff0c\u4e5f\u53ef\u7ebf\u6bb5\u6811\u5408\u5e76\u6216\u542f\u53d1\u5f0f\u5408\u5e76\u7ef4\u62a4\u3002\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7ef4\u62a4\u65b9\u5f0f\uff1a\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u4e0b\u6807\u8868\u793a\u4e00\u4e2a\u65f6\u523b\uff0c\u5b58\u50a8\u7684\u503c\u4e3a\u5176\u6240\u5c5e\u513f\u5b50\u8282\u70b9\u7f16\u53f7\uff0c\u79f0\u4e3a\u989c\u8272\u3002\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u533a\u95f4\u7ef4\u62a4\u8be5\u533a\u95f4\u7b2c\u4e00\u4e2a\u6709\u503c\u7684\u4f4d\u7f6e\u7684\u7b2c\u4e00\u4e2a\u4e0e\u5176\u4e0d\u540c\u8272\u7684\u540e\u7ee7\uff0c\u8fd9\u6837\u53ef\u4ee5\u66b4\u529b\u8df3\u540e\u7ee7\u6c42\u5f97\u6bcf\u4e2a $I_i$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(k\\log k + n\\log t)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n#define fi first\n#define se second\n#define TIME 1e3 * clock() / CLOCKS_PER_SEC\nusing ll = long long;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\ninline int read() {\n  int x = 0;\n  char s = getchar();\n  while(!isdigit(s)) s = getchar();\n  while(isdigit(s)) x = x * 10 + s - '0', s = getchar();\n  return x;\n}\ninline void print(int x) {\n  if(x < 0) return putchar('-'), print(-x);\n  if(x >= 10) print(x / 10);\n  putchar(x % 10 + '0');\n}\nbool Mbe;\nconstexpr int N = 1e5 + 5;\nconstexpr int K = N << 5;\nconstexpr int inf = 0x3f3f3f3f;\nll dep[N];\nint n, m, node, lst[N], R[N];\nvector<int> buc[N];\nvector<pii> e[N];\nvector<pll> I;\nint ls[K], rs[K], laz[K];\nstruct dat {\n  int fst, nxt, col;\n  dat operator + (const dat &x) const {\n    if(!col) return x;\n    if(!x.col) return *this;\n    if(nxt != inf) return *this;\n    return (dat) {fst, col == x.col ? x.nxt : x.fst, col};\n  }\n} val[K];\nvoid tag(int x, int v) {\n  if(!x) return;\n  laz[x] = v;\n  val[x] = {val[x].fst, inf, v};\n}\nvoid down(int x) {\n  if(laz[x]) {\n    tag(ls[x], laz[x]);\n    tag(rs[x], laz[x]);\n    laz[x] = 0;\n  }\n}\nvoid modify(int l, int r, int p, int &x, int v) {\n  if(!x) x = ++node;\n  if(l == r) return val[x] = (dat) {p, inf, v}, void();\n  down(x);\n  int m = l + r >> 1;\n  if(p <= m) modify(l, m, p, ls[x], v);\n  else modify(m + 1, r, p, rs[x], v);\n  val[x] = val[ls[x]] + val[rs[x]];\n}\ndat query(int l, int r, int ql, int qr, int x) {\n  if(ql <= l && r <= qr) return val[x];\n  int m = l + r >> 1;\n  dat ans = {0, 0, 0};\n  down(x);\n  if(ql <= m) ans = query(l, m, ql, qr, ls[x]);\n  if(m < qr) ans = ans + query(m + 1, r, ql, qr, rs[x]);\n  return ans;\n}\nint pre(int l, int r, int p, int x) {\n  if(!x) return -1;\n  if(l == r) return l;\n  int m = l + r >> 1;\n  down(x);\n  if(m < p) {\n    int res = pre(m + 1, r, p, rs[x]);\n    if(res != -1) return res;\n  }\n  return pre(l, m, p, ls[x]);\n}\nint merge(int x, int y) {\n  if(!x || !y) return x | y;\n  down(x), down(y);\n  ls[x] = merge(ls[x], ls[y]);\n  rs[x] = merge(rs[x], rs[y]);\n  return val[x] = val[ls[x]] + val[rs[x]], x;\n}\nvoid dfs(int id) {\n  for(pii _ : e[id]) {\n    int it = _.first;\n    dep[it] = dep[id] + _.second, dfs(it);\n    for(int t : buc[it]) modify(1, inf, t, R[it], it);\n    tag(R[it], it), R[id] = merge(R[id], R[it]);\n  }\n  if(!R[id]) return;\n  auto add = [&](ll l, ll r) {\n    I.push_back({l + dep[id], r + dep[id]});\n  };\n  int curpos = val[R[id]].fst;\n  if(lst[id] != val[R[id]].col) add(1 - dep[id], curpos); // add -dep[id]\n  while(1) {\n    dat res = query(1, inf, curpos, inf, R[id]);\n    if(res.nxt == inf) break;\n    int prev = pre(1, inf, res.nxt - 1, R[id]);\n    add(prev + 1, curpos = res.nxt);\n  }\n}\nbool Med;\nint main() {\n  fprintf(stderr, \"%.3lf MB\\n\", (&Mbe - &Med) / 1048576.0);\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"1.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"1.out\", \"w\", stdout);\n  #endif\n  ios::sync_with_stdio(0);\n  cin >> n >> m;\n  for(int i = 1; i < n; i++) {\n    int u, v, w;\n    cin >> u >> v >> w;\n    e[u].push_back({v, w});\n    lst[u] = v;\n  }\n  for(int i = 1; i <= m; i++) {\n    int dest, t;\n    cin >> dest >> t;\n    buc[dest].push_back(t);\n  }\n  dfs(1);\n  sort(I.begin(), I.end());\n  I.push_back({LLONG_MAX, LLONG_MAX});\n  priority_queue<ll, vector<ll>, greater<ll>> q;\n  ll explode = -1;\n  for(int i = 0; i < I.size() && explode == -1; i++) {\n    ll lst = i ? I[i - 1].first : 1, cur = I[i].first;\n    while(lst < cur && !q.empty()) {\n      ll t = q.top();\n      if(t < lst) {\n        explode = t;\n        break;\n      }\n      q.pop(), lst++;\n    }\n    q.push(I[i].second);\n  }\n  cout << explode << \" \";\n  if(explode == -1) explode = LLONG_MAX;\n  int cnt = 0;\n  for(pll it : I) cnt += it.second < explode;\n  cout << cnt << \"\\n\";\n  return 0;\n}\n/*\n2022/9/6\nauthor: Alex_Wei\nstart coding at 11:24\nfinish debugging at 13:29\n*/\n```",
        "postTime": 1662444353,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1344E Train Tracks"
    },
    {
        "content": "\u9996\u5148\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\uff0c\u5c31\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u4e4b\u540e\u5c31\u6709\u82e5\u5e72\u4e2a\u6761\u4ef6\u5f62\u5982\u5728\u4e00\u4e2a\u65f6\u95f4\u6bb5\u5185\u8981\u6c42\u4fee\u6539\u4e00\u6b21\u3002\u5177\u4f53\u5730\uff0c\u8003\u8651\u6709 $O(n^2)$ \u4e2a\u6761\u4ef6\u5f62\u5982\u5728\u65f6\u95f4 $t_i$ \u65f6\u8981\u6c42 $x$ \u7684\u6307\u5411\u4e3a $y$\u3002\u6211\u4eec\u4e0d\u59a8\u5c06\u5176\u6392\u5e8f\uff0c\u7136\u540e\u7b80\u5355\u5224\u65ad\u5373\u53ef\u3002\u6211\u4eec\u53d1\u73b0\u4e8c\u5206\u7b54\u6848\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u81f3\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a $O(n^2\\log n)$ \u7684\u89e3\u6cd5\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6709\u5f88\u591a\u6761\u4ef6\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u5177\u4f53\u5730\uff0c\u82e5\u4e24\u4e2a\u6761\u4ef6 $x,y$ \u76f8\u540c\uff0c\u4e14\u5728\u6240\u6709 $x$ \u7684\u6761\u4ef6\u6392\u5e8f\u540e\u76f8\u90bb\uff0c\u5219\u7b2c\u4e8c\u4e2a\u4e0d\u5fc5\u8981\u3002\u6211\u4eec\u4e0d\u59a8\u731c\u6d4b\u8fd9\u6837\u5904\u7406\u540e\u6761\u4ef6\u4e2a\u6570\u964d\u4e3a\u4e86 $O(n\\log n)$\uff0c\u4e8b\u5b9e\u4e5f\u6b63\u662f\u5982\u6b64\u3002\n\n\u6211\u4eec\u628a\u706b\u8f66\u6302\u5728\u7ec8\u70b9\u4e0a\uff0c\u8bb0 $S_x$ \u4e3a $x$ \u5b50\u6811\u5185\u706b\u8f66 $(t,s)$ \u7684\u96c6\u5408\uff0c\u5219\u6211\u4eec\u6309 $t$ \u6392\u5e8f\u540e\u82e5\u76f8\u90bb\u7684\u5b50\u6811\u4e0d\u540c\u5219\u662f\u6709\u6548\u6761\u4ef6\u3002\u6211\u4eec\u8bb0 $son$ \u4e3a\u91cd\u513f\u5b50\uff0c\u6b64\u5904\u5b9a\u4e49\u4e3a $S$ \u6700\u5927\u7684\u513f\u5b50\u3002\u6211\u4eec\u6b63\u5e38\u5904\u7406\u6bcf\u4e2a\u8f7b\u513f\u5b50\uff0c\u91cd\u513f\u5b50\u7684\u8bdd\u76f4\u63a5\u679a\u4e3e\u8f7b\u513f\u5b50\u7684\u540e\u7ee7\u662f\u5426\u4e3a\u91cd\u513f\u5b50\u5373\u53ef\u3002\u4e0d\u96be\u770b\u51fa\u8fd9\u6837\u505a\u7684\u6761\u4ef6\u4e2a\u6570\u548c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\u6b63\u786e\u7684\u3002\n\n\u81f3\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a $O(n\\log^2 n)$ \u7684\u505a\u6cd5\uff0c\u4ee3\u7801\u501f\u9274\u4e86 $\\text{h\\color{red}{ellomath}}$\uff0c\u5728\u6b64\u9e23\u8c22\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define inf 1e9\n#define INF LLONG_MAX\nconst int maxn=1e5+10;\nconst int mod=1e9+7;\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n\treturn x*f;\n}\n#define ll long long\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define mkp make_pair\n#define pb push_back\nint n,m,dfn[maxn],siz[maxn],ti;\nvector<pii>G[maxn];vector<pair<ll,ll> >P;\nvector<int>V[maxn];set<pii>S[maxn];\npriority_queue<ll,vector<ll>,greater<ll>>Q;\ninline bool chk(int x,int y){return dfn[x]<=dfn[y]&&dfn[x]+siz[x]-1>=dfn[y];}\ninline void dfs(int x,ll d){\n\tdfn[x]=++ti;siz[x]=1;\n\tint Mn=inf,pos,son=0;\n\tfor(auto e:G[x]){\n\t\tdfs(e.fi,d+e.se);siz[x]+=siz[e.fi];\n\t\tint tmp=S[e.fi].empty()?inf:S[e.fi].begin()->fi;\n\t\tif(tmp<Mn)Mn=tmp,pos=e.fi;\n\t\tif(S[e.fi].size()>S[son].size())son=e.fi;\n\t}\n\tif(Mn<inf&&G[x].back().fi!=pos)P.pb(mkp(1,Mn+d));\n\tswap(S[x],S[son]);\n\tfor(auto e:G[x])if(e.fi^son)\n\t\tfor(auto p:S[e.fi])S[x].insert(p);\n\tfor(auto e:G[x])if(e.fi^son)\n\t\tfor(auto p:S[e.fi]){\n\t\t\tauto it=S[x].lower_bound(p),o=it;\n\t\t\tif(it!=S[x].begin()&&!chk(e.fi,(--it)->se))\n\t\t\t\tP.pb(mkp(it->fi+d+1,p.fi+d));\n\t\t\tif(++o!=S[x].end()&&chk(son,o->se))\n\t\t\t\tP.pb(mkp(p.fi+d+1,o->fi+d));\n\t\t}\n\tfor(auto t:V[x])S[x].insert(mkp(t,x));\n}\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1,u,v,d;i<n;i++)\n\t\tu=read(),v=read(),d=read(),G[u].pb(mkp(v,d));\n\tfor(int i=1,s,t;i<=m;i++)\n\t\ts=read(),t=read(),V[s].pb(t);\n\tdfs(1,0);sort(P.begin(),P.end());\n\tll ans=-1;int cnt=0;\n\tfor(int i=0,j;i<P.size()&&ans==-1;i=j){\n\t\tfor(j=i;j<P.size()&&P[i].fi==P[j].fi;j++);\n\t\tll nex=j==P.size()?INF:P[j].fi;\n\t\tfor(int k=i;k<j;k++)Q.push(P[k].se);\n\t\tfor(ll k=P[i].fi;k<nex;k++){\n\t\t\tif(Q.empty())break;\n\t\t\tif(Q.top()<k){ans=Q.top();break;}\n\t\t\tQ.pop();\n\t\t}\n\t}\n\tfor(auto x:P)if(ans==-1||x.se<ans)++cnt;\n\tprintf(\"%lld %d\\n\",ans,cnt);\n    return 0;\n}\n```\n\n\u6df1\u6df1\u5730\u611f\u5230\u81ea\u5df1\u7684\u5f31\u5c0f\u3002",
        "postTime": 1649124444,
        "uid": 140876,
        "name": "syzf2222",
        "ccfLevel": 9,
        "title": "CF1344E"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u5bb9\u6613\u5f97\u51fa\u4e00\u4e2a $O(n^2\\log n)$ \u7684\u66b4\u529b\uff0c\u53ea\u9700\u8981\u904d\u5386\u8981\u6c42\u7684\u70b9\u7136\u540e\u8bb0\u5f55\u4e0b\u67d0\u4e2a\u65f6\u95f4\u533a\u95f4\u5fc5\u987b\u64cd\u4f5c\u5f53\u524d\u70b9\u4e00\u6b21\uff0c\u7136\u540e\u6392\u4e2a\u5e8f\u7528\u5806\u7ef4\u62a4\uff0c\u6bcf\u9ad8\u4f4d\u7f6e\u8d2a\u5fc3\u53d6\u51fa\u5f53\u524d\u53f3\u7aef\u70b9\u6700\u5c0f\u7684\u9650\u5236\u6d88\u9664\u3002\u8fd9\u4e2a\u4e4d\u4e00\u770b\u4f3c\u4e4e\u6ca1\u6709\u4f18\u5316\u7a7a\u95f4\u3002\n\n\u4f46\u662f\u4e0d\u59a8\u60f3\u60f3\u5b9e\u73b0\uff0c\u5b83\u8981\u904d\u5386\u4e00\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u3002\u5f88\u5bb9\u6613\u60f3\u5230\u6811\u94fe\u5256\u5206\uff0c\u4f60\u53d1\u73b0\u8f7b\u8fb9\u5f88\u5c11\uff0c\u5982\u679c\u4e00\u5f00\u59cb\u5927\u5bb6\u90fd\u6307\u5411\u91cd\u513f\u5b50\uff0c\u90a3\u4e48\u9650\u5236\u5c31\u4f1a\u53d8\u6210 $O(n\\log n)$ \u4e2a\u4e86\uff01(\u6539\u53d8\u4e3a\u8f7b\u8fb9\u4e00\u6b21\uff0c\u6539\u53d8\u56de\u91cd\u8fb9\u4e00\u6b21)\u5373\u4f7f\u4e00\u5f00\u59cb\u4e0d\u662f\u91cd\u8fb9\uff0c\u4e5f\u53ea\u4f1a\u589e\u52a0 $O(n)$ \u7684\u590d\u6742\u5ea6\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u62ff\u4e00\u9897\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\u5bf9\u4e8e\u8981\u6c42\u4e00\u4e2a\u533a\u95f4\u5185\u5168\u662f\u91cd\u8fb9\u7684\uff0c\u6211\u4eec\u66b4\u529b\u904d\u5386\u533a\u95f4\u5185\u6307\u5411\u8f7b\u8fb9\u7684\uff1b\u5bf9\u4e8e\u8981\u6c42\u67d0\u4e2a\u70b9\u8981\u6307\u5411\u8f7b\u8fb9\u7684\uff0c\u6211\u4eec\u770b\u770b\u5f53\u524d\u4e0a\u4e00\u6b21\u8bb0\u5f55\u4e0b\u5b83\u6307\u5411\u7684\u70b9\u548c\u6211\u4eec\u76f8\u4e0d\u76f8\u540c\u3002\u6ce8\u610f\u6211\u4eec\u4e0d\u53ef\u80fd\u4e00\u6b21\u904d\u5386\u5230\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\uff0c\u6240\u4ee5\u8981\u533a\u95f4\u6253\u4e00\u4e2a\u5f53\u524d\u65f6\u95f4\u7684 tag\uff0cpushdown \u7684\u65f6\u5019\u513f\u5b50\u53d6\u4e2a $\\max$ \u5373\u53ef\u3002\u6700\u540e\u62ff\u66b4\u529b\u6700\u540e\u90e8\u5206\u8dd1\u4e00\u4e0b\u5373\u53ef\u3002\n\nCode($O(n\\log^2n)$) :\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n#include <unordered_map>\nusing namespace std;\n#define fi first\n#define sc second\n#define mkp make_pair\n#define pii pair<int,int>\ntypedef long long ll;\n#define pll pair<ll,ll>\nconst int N=1e5+5,M=5e6+5,oo=1e9+5,mod=998244353;\ninline int read() {\n    int x=0,flag=0;char ch=getchar();\n    while(ch<'0'||ch>'9') {flag|=(ch=='-');ch=getchar();}\n    while('0'<=ch&&ch<='9') {x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n    return flag?-x:x;\n}\ninline int mx(int x,int y) {return x>y?x:y;}\ninline int mn(int x,int y) {return x<y?x:y;}\ninline void swp(int &x,int &y) {x^=y^=x^=y;}\ninline int as(int x) {return x>0?x:-x;}\n\npii q[N];\nint n,m,hd[N],num;\nstruct node {\n    int nxt,to,s;\n}e[N<<1];\n#define v e[i].to\ninline void adde(int x,int y,int z) {\n    e[++num]=(node){hd[x],y,z};\n    hd[x]=num;\n}\nint sz[N],son[N],Fa[N],Son[N],top[N],seg[N],rev[N];\nll dep[N];\nunordered_map<int,int> p[N];\nvoid dfs1(int x,int fa) {\n    sz[x]=1; int cnt=0; Fa[x]=fa;\n    for(int i=hd[x];i;i=e[i].nxt) {\n        if(v==fa) continue;\n        dep[v]=dep[x]+e[i].s;\n        dfs1(v,x);\n        p[x][v]=++cnt;\n        sz[x]+=sz[v];\n        if(sz[v]>sz[son[x]]) son[x]=v,Son[x]=cnt;\n    }\n}\nvoid dfs2(int x,int fa) {\n    if(son[x]) {\n        top[son[x]]=top[x];seg[son[x]]=++seg[0];rev[seg[0]]=son[x];\n        dfs2(son[x],x);\n    }\n    for(int i=hd[x];i;i=e[i].nxt) {\n        if(top[v]) continue;\n        top[v]=v;seg[v]=++seg[0];rev[seg[0]]=v;\n        dfs2(v,x);\n    }\n}\nll b[M];pll st[M>>1];int Top,Hd[M],Num; node T[M];\ninline void ADD(int x,int y) {T[++Num]=(node){Hd[x],y};Hd[x]=Num;}\ninline void upd(ll l,ll r) {\n    b[++b[0]]=l;b[++b[0]]=r;\n    st[++Top]=mkp(l,r);\n}\nnamespace sgt {\n    struct Node {\n        int s2,tag,col;\n    }w[N<<2];\n    #define pu(ht) w[ht].s2=(w[ht<<1].s2|w[ht<<1|1].s2)\n    void build(int l,int r,int ht) {\n        if(l==r) {\n            w[ht].col=1;\n            if(1==Son[rev[l]]) w[ht].s2=0;\n            else w[ht].s2=1;\n            return ;\n        } int mid=(l+r)>>1;\n        build(l,mid,ht<<1);build(mid+1,r,ht<<1|1);pu(ht);\n    }\n    inline void pd(int ht) \n    {w[ht<<1].tag=mx(w[ht<<1].tag,w[ht].tag);w[ht<<1|1].tag=mx(w[ht<<1|1].tag,w[ht].tag);}\n    void update1(int l,int r,int ht,int x,int y,int tim) {\n        int mid=(l+r)>>1; pd(ht);\n        if(x<=l&&r<=y) {\n            if(!w[ht].s2) return ;\n            if(l==r) {\n                upd(w[ht].tag==0?1:w[ht].tag+dep[rev[l]]+1,tim+dep[rev[l]]);\n                w[ht].col=Son[rev[l]];w[ht].s2=0; return ;\n            }update1(l,mid,ht<<1,x,y,tim);update1(mid+1,r,ht<<1|1,x,y,tim);\n        } else {if(x<=mid) update1(l,mid,ht<<1,x,y,tim);if(y>mid)update1(mid+1,r,ht<<1|1,x,y,tim);}\n        pu(ht);\n    }\n    void update2(int l,int r,int ht,int pos,int val,int tim) {\n        if(l==r) {\n            if(w[ht].col!=val) \n                upd(w[ht].tag==0?1:w[ht].tag+dep[rev[l]]+1,tim+dep[rev[l]]);\n            w[ht].col=val;w[ht].s2=1; return ;\n        }int mid=(l+r)>>1; pd(ht);\n        if(pos<=mid) update2(l,mid,ht<<1,pos,val,tim);\n        else update2(mid+1,r,ht<<1|1,pos,val,tim);\n        pu(ht);\n    }\n    void Update(int l,int r,int ht,int x,int y,int tim) {\n        if(x<=l&&r<=y) {w[ht].tag=tim;return ;}\n        int mid=(l+r)>>1; pd(ht);\n        if(x<=mid) Update(l,mid,ht<<1,x,y,tim);\n        if(y> mid) Update(mid+1,r,ht<<1|1,x,y,tim);\n    }\n}using namespace sgt;\ninline void Add(int x,int tim) {\n    while(x>1&&son[Fa[x]]!=x) {\n        update2(1,n,1,seg[Fa[x]],p[Fa[x]][x],tim),x=Fa[x];\n        Update(1,n,1,seg[x],seg[x],tim);\n    }\n    x=Fa[x];\n    while(x) {\n        update1(1,n,1,seg[top[x]],seg[x],tim);\n        Update(1,n,1,seg[top[x]],seg[x],tim);\n        x=top[x];\n        if(x==1) break;\n        while(x>1&&son[Fa[x]]!=x) {\n            update2(1,n,1,seg[Fa[x]],p[Fa[x]][x],tim),x=Fa[x];\n            Update(1,n,1,seg[x],seg[x],tim);\n        }\n        x=Fa[x];\n    }\n}\ninline bool cmp(ll x,ll y) {return x>y;}\npriority_queue< int,vector<int>,greater<int> >Q;\nint Vis[M];bool qwq[M];\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"1.in\",\"r\",stdin);\n    freopen(\"1.out\",\"w\",stdout);\n#endif\n    n=read();m=read();\n    for(int i=1,x,y,z;i<n;++i) {\n        x=read();y=read();z=read();\n        adde(x,y,z);adde(y,x,z);\n    }\n    dfs1(1,0);\n    top[1]=1;seg[1]=++seg[0];rev[seg[0]]=1;\n    dfs2(1,0);\n    for(int i=1;i<=m;++i) q[i].sc=read(),q[i].fi=read();\n    sort(q+1,q+m+1);\n    build(1,n,1);\n    for(int i=1;i<=m;++i) \n        Add(q[i].sc,q[i].fi);\n    sort(b+1,b+b[0]+1); b[0]=unique(b+1,b+b[0]+1)-b-1;\n    for(int i=1;i<=Top;++i) {\n        st[i].fi=lower_bound(b+1,b+b[0]+1,st[i].fi)-b;\n        st[i].sc=lower_bound(b+1,b+b[0]+1,st[i].sc)-b;\n        ADD(st[i].fi,st[i].sc);\n        ++Vis[st[i].sc];\n        if(st[i].fi>st[i].sc) qwq[st[i].sc]=1;\n    }\n    int ans=0;\n    for(int i=1;i<=b[0];++i) {\n        ll len=b[i]-b[i-1]-1;\n        while(len&&!Q.empty()) Q.pop(),--len;\n        for(int j=Hd[i];j;j=T[j].nxt) Q.push(T[j].to);\n        if(!Q.empty()) Q.pop();\n        if((Vis[i]&&!Q.empty()&&Q.top()==i)||qwq[i]) {\n            printf(\"%lld %d\\n\",b[i],ans);\n            return 0;\n        }\n        ans+=Vis[i];\n    }\n    printf(\"-1 %d\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1668470417,
        "uid": 114830,
        "name": "Kostlin",
        "ccfLevel": 8,
        "title": "CF1344E"
    },
    {
        "content": "## [CF1344E](https://www.luogu.com.cn/problem/CF1344E)\n\n\u8003\u8651 $u$ \u7684\u6240\u6709\u53d8\u6362\u3002\u8bbe $dis$ \u8868\u793a\u6839\u5230 $u$ \u7684\u8ddd\u79bb\uff0c\u5c06\u6240\u6709\u7ec8\u70b9\u5728\u5b50\u6811\u5185\uff08\u4e0d\u5305\u542b $u$\uff09\u7684\u706b\u8f66\u6309\u53d1\u8f66\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5bf9\u4e8e\u5047\u8bbe\u6392\u5e8f\u540e\u7b2c $i$ \u4e2a\u706b\u8f66\u53d1\u8f66\u65f6\u95f4\u662f $t_i$\uff0c\u7ec8\u70b9\u662f\u5728 $u$ \u7684\u513f\u5b50 $v_i$ \u5b50\u6811\u5185\uff08\u5305\u542b $v_i$\uff09\uff0c\u5982\u679c $v_i!=v_{i+1}$\uff0c\u90a3\u4e48\u5728 $i$ \u706b\u8f66\u9a76\u51fa $u$ \u548c $i+1$ \u706b\u8f66\u5230\u8fbe $u$ \u8fd9\u6bb5\u65f6\u95f4\u5185\uff0c\u9700\u8981\u5c06 $u$ \u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4ece $v_i$ \u5207\u6362\u5230 $v_{i+1}$\uff0c\u5373\u533a\u95f4 $(t_i+dis,t_{i+1}+dis]$ \u65f6\u95f4\u5185\u9700\u8981\u5bf9 $u$ \u8fdb\u884c\u4e00\u6b21\u53d8\u6362\u3002\n\n\u5408\u5e76\u4e24\u4e2a\u513f\u5b50\u7684\u706b\u8f66\u96c6\u5408 $S,T$ \u65f6\uff0c\u4ea7\u751f\u7684\u65b0\u7684\u533a\u95f4\u4e2a\u6570\u662f $O(\\min(|S|,|T|))$ \u7684\u3002\u53ef\u4ee5\u8003\u8651\u5c06\u5c0f\u96c6\u5408\u4e2d\u7684\u706b\u8f66\u63d2\u5165\u5230\u5927\u96c6\u5408\u4e2d\uff0c\u6bcf\u6b21\u63d2\u5165\u6700\u591a\u52a0\u5165\u4e24\u4e2a\u533a\u95f4\uff0c\u5229\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e\uff0c\u533a\u95f4\u4e2a\u6570\u662f $O(n\\log_2 n)$\u3002\n\n\u542f\u53d1\u5f0f\u5408\u5e76\u52a0 $\\verb!std::set<int>!$ \u5f97\u5230\u6240\u6709\u533a\u95f4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log_2^2n)$\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u6709\u4e00\u4e2a\u533a\u95f4\u96c6\u5408 $t$\uff0c\u5224\u65ad\u662f\u5426\u6709\u5927\u5c0f\u4e3a $|t|$ \u7684\u96c6\u5408\u6ee1\u8db3 $s_i\\in t_i$\u3002\u7ecf\u5178\u7684\u8d2a\u5fc3\u95ee\u9898\uff0c\u53ef\u4ee5\u53c2\u8003\u5176\u4ed6\u9898\u89e3\u6216\u8005\u6211\u7684\u4ee3\u7801\uff0c\u4e0d\u8fdb\u884c\u8d58\u8ff0\u3002\n\n[\u4ee3\u7801](https://codeforces.com/contest/1344/submission/205419591)\u3002",
        "postTime": 1683806921,
        "uid": 571634,
        "name": "hgzxwzf",
        "ccfLevel": 7,
        "title": "CF1344E"
    }
]