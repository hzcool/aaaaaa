[
    {
        "content": "\u5927\u6982\u662f\u3002\u3002\u84dd\u9898\u96be\u5ea6\uff1f\n\n\u8003\u8651\u5bf9\u4e8e$1-10^7$\uff0c\u679a\u4e3e\u6bcf\u4e2a\u6570\u7684\u500d\u6570\uff0c\u7136\u540e\u9009\u51fa\u4e24\u4e2a\u6700\u5c0f\u7684\u6570\uff0c\u66f4\u65b0\u7b54\u6848\u3002\n\n\u590d\u6742\u5ea6$O(n\\ln n)$\uff0c\u5927\u6982\u5728$1.8\\times 10^8$\u5de6\u53f3\uff0c\u53ef\u8fc7\u3002\n\n\u6ce8\u610f\u4e00\u5f00\u59cb\u7528\u76f8\u540c\u7684\u6570\u5b57\u66f4\u65b0\u4e00\u4e0b\u7b54\u6848\n\n```cpp\n#include<cstdio>\nconst int N=1e7+50;\ntypedef long long LL;\nint n,x,vis[N],t1,t2,s1,s2;\nLL ans;\nint main(){\n\tscanf(\"%d\",&n);ans=1e14;\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&x);\n\t\tif(vis[x])if(ans>x)ans=x,t1=vis[x],t2=i;\n        //\u76f8\u540c\u7684\u6570\u66f4\u65b0\u4e0b\u7b54\u6848\n\t\tif(!vis[x])vis[x]=i;\n\t}\n\tfor(int i=1;i<N;i++){\n\t\tif(i>=ans)break;//\u53ef\u80fd\u6709\u70b9\u7528\u7684\u4f18\u5316\n\t\ts1=s2=0;\n\t\tfor(int j=i;j<N;j+=i){\n\t\t\tif(!vis[j])continue;\n\t\t\tif(!s1)s1=j,s2=vis[j];\n\t\t\telse{\n\t\t\t\tif(ans>1ll*s1*j/i)\n\t\t\t\tans=1ll*s1*j/i,t1=s2,t2=vis[j];//\u53d6\u51fa\u4e24\u4e2a\u6700\u5c0f\u7684\u66f4\u65b0\u7b54\u6848\n\t\t\t\tbreak;//\u540e\u9762\u7684\u4e0d\u53ef\u80fd\u66f4\u65b0\u7b54\u6848\n\t\t\t}\n\t\t}\n\t}\n\tif(t1>t2)t1^=t2^=t1^=t2;\n\tprintf(\"%d %d\\n\",t1,t2);\n}\n```",
        "postTime": 1555507347,
        "uid": 50092,
        "name": "da32s1da",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1154G \u3010Minimum Possible LCM\u3011"
    },
    {
        "content": "[\u672c\u573a\u6bd4\u8d5b\u9898\u89e3](https://www.cnblogs.com/yifusuyi/p/10727303.html)\n\n# G\n\n## Description\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$\uff0c\u627e\u51fa\u4e24\u4e2a\u6570\uff0c\u6700\u5c0f\u5316\u4ed6\u4eec\u7684\u6700\u5c0f\u516c\u500d\u6570\n\n## Limitation\n\n$2~\\leq~n~\\leq~10^6$\n\n$1~\\leq~a_i~\\leq~10^7$\n\n## Solution\n\n\u8003\u8651\u5f0f\u5b50\n\n $$x~\\times~y~=~\\gcd(x,~y)~\\times~\\text{lcm}(x,~y)$$\n\n\u4e8e\u662f\u6709\n\n$$\\text{lcm}(x,~y)~=~\\frac{x~\\times~y}{\\gcd(x,~y)}$$\n\n\u8003\u8651\u7531\u4e8e\u503c\u57df\u5728 $1e7$ \u8303\u56f4\u5185\uff0c\u4e8e\u662f\u4efb\u610f\u4e24\u6570\u7684 $\\gcd$ \u4e5f\u5728 $1e7$ \u8303\u56f4\u5185\u3002\u6211\u4eec\u8003\u8651\u679a\u4e3e\u8fd9\u4e2a $\\gcd$\uff0c\u7136\u540e\u679a\u4e3e $\\gcd$ \u7684\u500d\u6570\u662f\u5426\u51fa\u73b0\u5728\u7ed9\u5b9a\u7684\u6570\u5217\u4e2d\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u4ee5\u4e0a\u7684\u500d\u6570\u51fa\u73b0\u5728\u7ed9\u5b9a\u7684\u6570\u5217\u4e2d\uff0c\u5219\u53d6\u6700\u5c0f\u7684\u4e24\u4e2a\uff0c\u6c42\u4e00\u4e0b $\\text{lcm}$\uff0c\u770b\u4e00\u4e0b\u662f\u5426\u80fd\u66f4\u65b0\u7b54\u6848\u3002\u53d6\u6700\u5c0f\u7684\u4e24\u4e2a\u7684\u539f\u56e0\u662f\u8003\u8651\u4e0a\u5f0f\u4e2d\u5206\u6bcd\u4e0d\u53d8\uff0c\u5206\u5b50\u8d8a\u5c0f\u5219 $\\text{lcm}$ \u8d8a\u5c0f\uff0c\u4e8e\u662f\u53d6\u8f83\u5c0f\u7684\u66f4\u4f18\u3002\u53c8\u7531\u4e8e $1e7$ \u8303\u56f4\u5185\u7684 $\\gcd$ \u5305\u542b\u4e86\u6240\u6709\u7684\u60c5\u51b5\uff0c\u4e8e\u662f\u8fd9\u6837\u7684\u6b63\u786e\u6027\u662f\u5bf9\u7684\u3002\n\n\u8003\u8651\u5982\u679c\u679a\u4e3e\u5230 $x$\uff0c\u6570\u5217\u4e2d\u51fa\u73b0\u6700\u5c0f\u7684\u4e24\u4e2a $x$ \u7684\u500d\u6570\u662f $y$ \u548c $z$\uff0c\u82e5 $x$ \u53ea\u662f $y$ \u548c $z$ \u7684\u56e0\u6570\uff0c\u4f46\u4e0d\u662f\u6700\u5927\u7684\u600e\u4e48\u529e\uff1a\u8003\u8651\u679a\u4e3e\u5230 $\\gcd(y,~z)$ \u65f6\u4f9d\u7136\u53ef\u4ee5\u66f4\u65b0\u7b54\u6848\uff0c\u7531\u4e8e $x < \\gcd(y,~z)$\uff0c\u6240\u4ee5\u7528 $x$ \u6c42\u51fa\u7684\u7b54\u6848\u8981\u5927\u4e8e\u7528 $\\gcd(y,~z)$ \u6c42\u51fa\u7684\u7b54\u6848\uff0c\u9519\u8bef\u7684\u7b54\u6848\u4f1a\u88ab\u6b63\u786e\u7684\u66f4\u65b0\u6389\u3002\n\n\u4e8e\u662f\u679a\u4e3e\u6bcf\u4e2a\u6570\u7684\u500d\u6570\u5355\u6b21\u590d\u6742\u5ea6 $O(\\log N)$\uff0c\u4e8e\u662f\u603b\u590d\u6742\u5ea6 $O(N~\\log N)$\uff0c\u5176\u4e2d $N$ \u4e3a\u503c\u57df\u3002\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n\ntypedef long long int ll;\n\nnamespace IPT {\n  const int L = 1000000;\n  char buf[L], *front=buf, *end=buf;\n  char GetChar() {\n    if (front == end) {\n      end = buf + fread(front = buf, 1, L, stdin);\n      if (front == end) return -1;\n    }\n    return *(front++);\n  }\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n  char ch = IPT::GetChar(), lst = ' ';\n  while ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n  while ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n  if (lst == '-') x = -x;\n}\n\nnamespace OPT {\n  char buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n  if (x < 0) {x = -x, putchar('-');}\n  int top=0;\n  do {OPT::buf[++top] = static_cast<char>(x % 10 + '0');} while (x /= 10);\n  while (top) putchar(OPT::buf[top--]);\n  if (pt) putchar(aft);\n}\n\nconst int maxn = 1000009;\nconst int maxt = 10000009;\nconst int upceil = 10000000;\n\nint n, x, y;\nll ans = ((-1ull) << 1) >> 1;\nint id[maxt];\n\nint main() {\n  freopen(\"1.in\", \"r\", stdin);\n  qr(n);\n  for (int i = 1, k; i <= n; ++i) {\n    k = 0; qr(k);\n    if (id[k] && k < ans) {\n      ans = k; x = id[k]; y = i;\n    }\n    id[k] = i;\n  }\n  for (int i = 1; i <= upceil; ++i) {\n    int a = 0;\n    for (int j = i; j <= upceil; j += i) if (id[j]) {\n      if (a == 0) {\n        a = j;\n      } else {\n        ll lcm = 1ll * a * j / i;\n        if (lcm < ans) {\n          x = id[a]; y = id[j]; ans = lcm;\n        }\n      }\n    }\n  }\n  if (x > y) std::swap(x, y);\n  qw(x, ' ', true); qw(y, '\\n', true);\n  return 0;\n}\n```\n\n\n\n",
        "postTime": 1555525329,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1154G \u3010Minimum Possible LCM\u3011"
    }
]