[
    {
        "content": "> F. [CF1648E Air Reform](https://www.luogu.com.cn/problem/CF1648E) *3200\n\n\u6211\u4eca\u5929\u5c31\u662f\u8981\u7528 kruskal \u8fc7\u4e86\u8fd9\u9053\u9898\uff01\n\n\u5efa\u51fa\u539f\u56fe $G$ \u7684\u6700\u5c0f\u751f\u6210\u6811 $T$\uff0c\u5219 $G$ \u4e0a\u4efb\u610f\u4e24\u70b9 $u, v$ \u7684\u6700\u77ed\u8def\u5373 $T$ \u4e0a $u, v$ \u4e4b\u95f4\u8fb9\u6743\u6700\u5927\u503c\u3002\n\n\u66f4\u8fdb\u4e00\u6b65\u5730\uff0c\u5efa\u51fa\u539f\u56fe $G$ \u7684 kruskal \u91cd\u6784\u6811 $T$\uff0c\u5bf9\u4e8e $T$ \u4e0a\u7684\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 $u$\uff0c\u8bbe\u5176\u6743\u503c\u4e3a $w$\uff0c\u90a3\u4e48\u5bf9\u4e8e $G$ \u7684\u8865\u56fe $G'$\uff0c\u6240\u6709 $u$ \u7684\u5de6\u5b50\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4e0e\u6240\u6709\u53f3\u5b50\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4e4b\u95f4\u6709\u6743\u503c\u4e3a $w$ \u7684\u8fb9\uff08\u524d\u63d0\u662f\u8fde\u8fb9\u7684\u70b9\u5bf9\u5728\u539f\u56fe\u4e0a\u65e0\u8fde\u8fb9\uff09\u3002\n\n\u6211\u4eec\u5e0c\u671b\u6c42\u51fa $G'$ \u7684\u6700\u5c0f\u751f\u6210\u6811 $T'$\u3002\u4f46\u662f $G'$ \u4e0a\u7684\u8fb9\u592a\u591a\uff0c\u6211\u4eec\u65e0\u6cd5\u4f7f\u7528\u6734\u7d20\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff0c\u5fc5\u987b\u8fdb\u884c\u4f18\u5316\u3002\n\n\u8003\u8651 kruskal \u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fc7\u7a0b\uff0c\u6bcf\u6b21\u627e\u5230\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u82e5\u4e24\u7aef\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u4e0d\u8fde\u901a\uff0c\u5219\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u8003\u8651 $T$ \u4e0a\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u5e26\u6765\u7684\u5f71\u54cd\u3002\n\n\u6743\u503c\u4ece\u5c0f\u5230\u5927\u5728\u91cd\u6784\u6811\u4e0a\u5bf9\u5e94\u7740\u6df1\u5ea6\u4ece\u6df1\u5230\u6d45\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u9012\u5f52\u8003\u8651\u5f53\u524d\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\uff0c\u518d\u8003\u8651\u5f53\u524d\u8282\u70b9\u3002\n\n\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a $u$\uff0c\u5176\u5de6\u5b50\u6811\u6240\u6709\u53f6\u5b50\u8282\u70b9\u4e3a $L$\uff0c\u53f3\u5b50\u6811\u6240\u6709\u53f6\u5b50\u8282\u70b9\u4e3a $R$\u3002\u5728\u9012\u5f52\u5904\u7406\u5de6\u53f3\u5b50\u6811\u65f6\uff0c$L$ \u548c $R$ \u5728 $G'$ \u4e0a\u5df2\u7ecf\u5f62\u6210\u4e86\u82e5\u5e72\u8fde\u901a\u5757\u3002\u8bbe $L$ \u5f62\u6210\u7684\u8fde\u901a\u5757\u96c6\u5408\u4e3a $S_L = \\{GL_i\\}$\uff0c$R$ \u5f62\u6210\u7684\u8fde\u901a\u5757\u96c6\u5408\u4e3a $S_R = \\{GR_i\\}$\uff0c\u6bcf\u4e2a $GL_i$ \u5747\u7531\u82e5\u5e72 $L$ \u5f53\u4e2d\u7684\u8282\u70b9\u7ec4\u6210\uff0c$GR_i$ \u540c\u7406\u3002\n\n\u8003\u8651\u5408\u5e76 $S_L$ \u548c $S_R$\u3002\n\n\u679a\u4e3e $S_L$ \u5185\u6240\u6709\u8fde\u901a\u5757 $GL_i$\uff0c\u7136\u540e\u679a\u4e3e $GL_i$ \u5185\u6240\u6709\u8282\u70b9 $x$\uff0c\u7136\u540e\u679a\u4e3e $S_R$ \u5185\u6240\u6709\u8fde\u901a\u5757 $GR_j$\uff0c\u7136\u540e\u679a\u4e3e $GR_j$ \u5185\u6240\u6709\u8282\u70b9 $y$\uff0c\u5982\u679c $x, y$ \u4e4b\u95f4\u6ca1\u6709\u8fde\u8fb9\uff0c\u90a3\u4e48\u5b83\u4eec\u5728\u8865\u56fe\u4e0a\u76f4\u63a5\u76f8\u8fde\uff0c\u5c31\u628a $GR_j$ \u4ece $S_R$ \u4e2d\u5220\u53bb\uff0c\u5e76\u5408\u5e76\u5230 $GL_i$ \u5f53\u4e2d\u3002\n\n\u6ce8\u610f\uff0c\u7531\u4e8e\u53ef\u80fd\u51fa\u73b0 $GL_i$ \u548c $GL_k$ \u540c\u65f6\u4e0e $GR_j$ \u5408\u5e76\u4f7f\u5f97\u5b83\u4eec\u8fde\u901a\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a $GL_i$ \u5904\u7406\u5b8c\u8981\u4e22\u8fdb $S_R$ \u91cc\u9762\u53bb\u3002\n\n\u770b\u8d77\u6765\u5f88\u66b4\u529b\u5bf9\u5427\u3002\u53ea\u8981\u4f60\u52a0\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5b83\u7684\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86\u60ca\u4eba\u7684 $\\log ^ 2n$\u3002\n\n\u6211\u4eec\u6765\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002\u8003\u8651\u679a\u4e3e $x, y$ \u7684\u590d\u6742\u5ea6\u3002\n\n\u56e0\u4e3a\u4e00\u65e6 $x, y$ \u4e4b\u95f4\u5728 $G$ \u4e0a\u6ca1\u6709\u76f4\u63a5\u8fde\u8fb9\uff0c\u90a3\u4e48\u5fc5\u7136\u6709\u4e24\u4e2a\u8fde\u901a\u5757\u88ab\u5408\u5e76\u3002\u636e\u6b64\u53ef\u8bc1\u660e\uff0c\u4f7f\u5f97 $x, y$ \u6ca1\u6709\u76f4\u63a5\u8fde\u8fb9\u7684\u6b21\u6570\u4e3a $\\mathcal{O}(n)$\u3002\n\n\u5408\u5e76\u8fde\u901a\u5757\u7684\u590d\u6742\u5ea6\u7531\u542f\u53d1\u5f0f\u5408\u5e76\u4fdd\u8bc1\uff0c\u7528 `set` \u7ef4\u62a4\u6bcf\u4e2a\u8fde\u901a\u5757\uff0c\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log ^ 2 n)$\u3002\n\n\u6240\u4ee5\u53ea\u9700\u4fdd\u8bc1\u76f4\u63a5\u8fde\u8fb9\u7684 $x, y$ \u4e0d\u4f1a\u88ab\u679a\u4e3e\u592a\u591a\u6b21\u5373\u53ef\u3002\u76f4\u63a5\u8fde\u8fb9\u7684 $x, y$ \u6bcf\u6b21\u88ab\u679a\u4e3e\u4e00\u5b9a\u5f62\u5982\uff0c\u5728\u6b64\u4e4b\u524d $x$ \u4f5c\u4e3a $GL_i$ \u7684\u67d0\u4e2a\u70b9\u5728 $GL_i$ \u88ab\u4e22\u8fdb $S_R$ \u65f6\u5408\u5e76\u8fdb $R$\uff0c\u4f7f\u5f97 $y$ \u4f5c\u4e3a\u63a5\u4e0b\u6765\u88ab\u679a\u4e3e\u5230\u7684 $GL_i$ \u7684\u67d0\u4e2a\u70b9\uff0c\u4e14 $x$ \u4f5c\u4e3a $GR_i$ \u7684\u67d0\u4e2a\u70b9\uff08\u5176\u5b9e\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u662f\u5728 LCA \u5904\uff0c\u4e00\u4e2a\u4f5c\u4e3a $GL_i$ \u91cc\u9762\u7684\u70b9\uff0c\u53e6\u4e00\u4e2a\u4f5c\u4e3a $GR_j$ \u91cc\u9762\u7684\u70b9\u88ab\u679a\u4e3e\u5230\uff0c\u4e0d\u8fc7\u8fd9\u90e8\u5206\u7531\u4e8e\u539f\u56fe\u6bcf\u6761\u8fb9\u53ea\u4f1a\u8d21\u732e\u4e00\u6b21\uff0c\u6240\u4ee5\u679a\u4e3e\u6b21\u6570\u4e3a $\\mathcal{O}(m)$\uff09\u3002\u7531\u4e8e\u6211\u4eec\u5bf9 $|L|$ \u548c $|R|$ \u7684\u5408\u5e76\u4e5f\u662f\u542f\u53d1\u5f0f\u7684\uff0c\u6240\u4ee5\u4e00\u4e2a\u70b9\u4f5c\u4e3a $L$ \u4e2d\u7684\u67d0\u4e2a\u70b9\u88ab\u5408\u5e76\u8fdb $R$ \u7684\u6b21\u6570\u4e0d\u8d85\u8fc7 $\\log n$\uff0c\u6545\u4f7f\u5f97 $x, y$ \u4e4b\u95f4\u76f4\u63a5\u8fde\u8fb9\u7684\u6b21\u6570\u4e3a $\\mathcal{O}(m\\log n)$\u3002\n\n\u56e0\u4e3a\u6bcf\u6b21\u67e5\u8be2 $x, y$ \u4e4b\u95f4\u662f\u5426\u6709\u8fde\u8fb9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(\\log n)$\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(m\\log ^ 2 n)$\u3002\n\n\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5757\u65f6\u9700\u8981\u5728\u8865\u56fe $G'$ \u7684\u6700\u5c0f\u751f\u6210\u6811 $T'$ \u4e0a\u7684\u8fde\u901a\u5757\u4ee3\u8868\u5143\u4e4b\u95f4\u8fde\u6743\u503c\u4e3a $w(u)$ \u7684\u8fb9\u3002\u6c42\u51fa $T'$ \u540e\u56de\u7b54\u8be2\u95ee\u5c31\u662f\u5f88\u7b80\u5355\u7684\u8be2\u95ee\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u8fb9\u6743\u6700\u5927\u503c\uff0c\u6811\u4e0a\u500d\u589e\u505a\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int K = 18;\nconst int N = 4e5 + 5;\nint n, m, dn;\nint val[N], ans[N], sz[N];\nint node, fa[N], ls[N], rs[N];\nint find(int x) {return fa[x] == x ? x : fa[x] = find(fa[x]);}\nstruct edge {\n\tint u, v, w, id;\n\tbool operator < (const edge &r) const {return w < r.w;}\n} e[N];\nstruct Tree {\n\tint dep[N], mx[K][N], fa[K][N];\n\tvector <pair <int, int>> e[N];\n\tvoid init() {for(int i = 1; i <= n; i++) e[i].clear();}\n\tvoid add(int u, int v, int w) {\n\t\t// cerr << \"add \" << u << \" \" << v << \" \" << w << endl;\n\t\te[u].push_back(make_pair(v, w)), e[v].push_back(make_pair(u, w));\n\t}\n\tvoid dfs(int id, int f) {\n\t\t// cerr << \"dfs \" << id << \" \" << f << endl;\n\t\tfa[0][id] = f, dep[id] = dep[f] + 1;\n\t\tfor(auto it : e[id]) {\n\t\t\tint to = it.first;\n\t\t\tif(to == f) continue;\n\t\t\tmx[0][to] = it.second, dfs(to, id);\n\t\t\t// cerr << \"mx \" << to << \" \" << mx[0][to] << endl;\n\t\t}\n\t}\n\tint dist(int u, int v) {\n\t\tint ans = 0;\n\t\tif(dep[u] < dep[v]) swap(u, v);\n\t\tfor(int i = 17; ~i; i--) if(dep[fa[i][u]] >= dep[v]) ans = max(ans, mx[i][u]), u = fa[i][u];\n\t\tif(u == v) return ans;\n\t\tfor(int i = 17; ~i; i--)\n\t\t\tif(fa[i][u] != fa[i][v])\n\t\t\t\tans = max(ans, max(mx[i][u], mx[i][v])), u = fa[i][u], v = fa[i][v];\n\t\treturn max(ans, max(mx[0][u], mx[0][v]));\n\t}\n\tvoid build() {\n\t\tdfs(1, 0);\n\t\tfor(int i = 1; i <= 17; i++)\n\t\t\tfor(int j = 1; j <= n; j++) {\n\t\t\t\tfa[i][j] = fa[i - 1][fa[i - 1][j]];\n\t\t\t\tmx[i][j] = max(mx[i - 1][j], mx[i - 1][fa[i - 1][j]]);\n\t\t\t}\n\t}\n} tr;\nset <int> g[N], s[N], ind[N];\nvoid merge(set <int> &x, set <int> &y, int w) {\n\t// cerr << \"add edge \" << *x.begin() << \" \" << *y.begin() << \" \" << w << endl;\n\ttr.add(*x.begin(), *y.begin(), w);\n\tif(x.size() < y.size()) swap(x, y);\n\tfor(int it : y) x.insert(it);\n\ty.clear();\n}\nvoid calc(int id) {\n\tif(id <= n) return s[id].insert(id), sz[id] = 1, void();\n\tint u = ls[id], v = rs[id];\n\tcalc(u), calc(v), sz[id] = sz[u] + sz[v];\n\tif(sz[u] > sz[v]) swap(u, v);\n\tfor(int it : s[u]) {\n\t\tset <int> tmp = ind[it];\n\t\tfor(int x : tmp) {\n\t\t\tset <int> tmp2 = s[v];\n\t\t\tfor(int y : tmp2) {\n\t\t\t\tbool found = 0;\n\t\t\t\tfor(int z : ind[y]) if(g[x].find(z) == g[x].end()) {found = 1; break;}\n\t\t\t\tif(found) merge(ind[it], ind[y], val[id]), s[v].erase(y);\n\t\t\t}\n\t\t}\n\t\ts[v].insert(it);\n\t}\n\tswap(s[id], s[v]);\n}\nvoid solve() {\n\tcin >> n >> m;\n\tdn = 0, node = n, tr.init(); // init\n\t// for(int i = 1; i <= n; i++) assert(g[i].empty());\n\tfor(int i = 1; i <= n; i++) ind[i].clear(), ind[i].insert(i);\n\tfor(int i = 1; i <= n << 1; i++) fa[i] = i, g[i].clear(), s[i].clear();\n\tfor(int i = 1; i <= m; i++) scanf(\"%d %d %d\", &e[i].u, &e[i].v, &e[i].w), e[i].id = i;\n\tsort(e + 1, e + m + 1);\n\tfor(int i = 1; i <= m; i++) {\n\t\tint u = find(e[i].u), v = find(e[i].v);\n\t\tif(u == v) continue;\n\t\tval[++node] = e[i].w, fa[u] = fa[v] = node;\n\t\tls[node] = u, rs[node] = v;\n\t\t// cerr << node << \" \" << u << \" \" << v << endl;\n\t}\n\tfor(int i = 1; i <= m; i++) g[e[i].u].insert(e[i].v), g[e[i].v].insert(e[i].u);\n\tcalc(node);\n\ttr.build(); // ADD THIS LINE =.=\n\tfor(int i = 1; i <= m; i++) ans[e[i].id] = tr.dist(e[i].u, e[i].v);\n\tfor(int i = 1; i <= m; i++) printf(\"%d \", ans[i]);\n\tcout << endl;\n}\nint main() {\n\t// freopen(\"1.in\", \"r\", stdin);\n\tint T;\n\tcin >> T;\n\twhile(T--) solve();\n\treturn 0;\n}\n\n/*\n2022/5/2\nstart thinking at 9:35\n\n\u9996\u5148\u5efa\u51fa\u539f\u56fe\u7684 MST.\n\u8003\u8651\u6dfb\u52a0\u4e00\u6761\u8fb9\u8fde\u901a\u70b9\u96c6 S, T \u7684\u65f6\u5019, S \u548c T \u4e4b\u95f4\u6240\u6709\u4e0d\u51fa\u73b0\u5728\u539f\u56fe\u4e0a\u7684\u70b9\u5bf9\u8fde\u6743\u503c\u4e3a v \u7684\u8fb9.\n\u518d\u6c42\u51fa\u8865\u56fe MST.\n\u6811\u4e0a\u500d\u589e\u5373\u4e3a\u6240\u6c42.\n\n\u95ee\u9898\u51fa\u5728\u7b2c 2, 3 \u6b65.\n\u8865\u56fe\u7684\u8fb9\u662f\u76f8\u5f53\u591a\u7684, \u8003\u8651\u4f18\u5316\u8fd9\u4e24\u6b65.\n\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76.\n\u5c06\u8865\u56fe\u4e0a\u8fde\u901a\u7684\u70b9\u5408\u5e76\u6210\u4e00\u4e2a set.\n\u7528 set \u5b58\u6240\u6709\u51fa\u8fb9, \u7136\u540e\u8fd8\u8981\u7ed9\u6240\u6709\u70b9\u91cd\u7f16\u53f7, \u4fdd\u8bc1\u4efb\u610f\u65f6\u523b set \u91cc\u9762\u7684\u70b9\u90fd\u662f\u533a\u95f4.\nkruskal \u91cd\u6784\u6811.\n\n\u6709\u70b9\u96be\u5199.\n\nstart coding at 10:20\nfinish debugging at 11:59\n*/\n```",
        "postTime": 1651653156,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1648E Air Reform"
    },
    {
        "content": "[portal](https://www.luogu.com.cn/problem/CF1648E)\n\n\u9996\u5148\u539f\u56fe\u4e2d\u6700\u77ed\u8def\u662f\u201c\u6700\u5927\u503c\u6700\u5c0f\u201d\u7684\u63cf\u8ff0\uff0c\u90a3\u4e48\u81ea\u7136\u60f3\u5230 Kruskal \u91cd\u6784\u6811\u3002\u5219\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u4e3a\u5176\u5728 Kruskal \u91cd\u6784\u6811\u4e0a\u7684 LCA \u7684\u6743\u503c\u3002\n\n\u90a3\u4e48\u8003\u8651\u8865\u56fe\u3002\u663e\u7136\u6211\u4eec\u4e5f\u8981\u628a\u8865\u56fe\u7684 Kruskal \u91cd\u6784\u6811\u5efa\u51fa\u6765\u3002\n\n\u4f46\u662f\u6211\u4eec\u663e\u7136\u65e0\u6cd5\u5728\u8865\u56fe\u4e0a\u6267\u884c Kruskal \u7b97\u6cd5\u2014\u2014\u56e0\u4e3a\u8fb9\u6570\u662f $O(n^2)$ \u7684\u3002\n\n\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u53d1\u73b0\uff0c\u53ef\u4ee5\u5148\u6c42\u51fa\u8865\u56fe\u7684 **\u6700\u5c0f\u751f\u6210\u6811**\uff0c\u7136\u540e\u6839\u636e\u6700\u5c0f\u751f\u6210\u6811\u53ef\u4ee5\u7b80\u5355\u6c42\u51fa Kruskal \u91cd\u6784\u6811\u3002\n\n\u4f46\u662f\u6700\u5c0f\u751f\u6210\u6811\u5e94\u8be5\u600e\u4e48\u6c42\u5462\uff1f\n\n\u7b54\u6848\u4e0d\u662f Prim \u6216 Kruskal \u8fd9\u4e24\u79cd\u5e38\u89c1\u7684\u7b97\u6cd5\uff0c\u800c\u662f ~~\u672a\u66fe\u8bbe\u60f3\u7684\u9053\u8def~~ Boruvka \u7b97\u6cd5\u3002\n\n> Boruvka \u7b97\u6cd5\u662f\u7ef4\u62a4\u82e5\u5e72\u8fde\u901a\u5757\u7684\u8fc7\u7a0b\u3002\n>\n> \u5176\u4f1a\u6267\u884c\u82e5\u5e72\u8f6e\u3002\u5728\u6bcf\u4e00\u8f6e\u4e2d\uff0c\u4ece\u6bcf\u4e2a\u8fde\u901a\u5757\u51fa\u53d1\u627e\u5230\u5176\u4e0e\u4efb\u4e00\u5176\u5b83\u8fde\u901a\u5757\u95f4 **\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9**\u3002\u7136\u540e\uff0c\u8fde\u63a5\u8fd9\u6240\u6709\u7684\u8fb9\uff08\u53ea\u8981\u5176\u4e24\u4e2a\u7aef\u70b9\u4e0d\u4f4d\u4e8e\u540c\u4e00\u8fde\u901a\u5757\u4e2d\uff09\u3002\n>\n> \u91cd\u590d\u6267\u884c\uff0c\u76f4\u5230\u4ec5\u5269\u4e00\u4e2a\u8fde\u901a\u5757\u3002\n>\n> - \u6b63\u786e\u6027\u8bc1\u660e\uff1a\u6bcf\u4e2a\u8fde\u901a\u5757\u8981\u4e0e\u5176\u5b83\u8fde\u901a\u5757\u8fde\u901a\uff0c\u663e\u7136\u7ecf\u7531\u8be5\u6700\u5c0f\u8fb9\u6743\u8fb9\u662f\u6700\u4f18\u7684\u3002\n>\n>     \u5047\u5982\u51fa\u73b0\u4e86\u73af\uff0c\u5219\u663e\u7136\u73af\u4e0a\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u90fd\u76f8\u7b49\u4e14\u6700\u5c0f\uff08\u4e0d\u7136\u5c31\u4e0d\u4f1a\u6210\u73af\uff09\u3002\u90a3\u4e48\u5c31\u6254\u6389\u4e00\u6761\u8fb9\uff0c\u7528\u5269\u4e0b\u7684\u8fb9\u8fde\u6210\u4e00\u4e2a\u5927\u8fde\u901a\u5757\u5373\u53ef\u3002\n>\n> - \u590d\u6742\u5ea6\u8bc1\u660e\uff1a\u6bcf\u8f6e\u4e2d\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u5fc5\u7136\u4e0e\u53e6\u4e00\u4e2a\u8fde\u901a\u5757\u5408\u5e76\u3002\u6545\u6bcf\u8f6e\u4f1a\u8ba9\u8fde\u901a\u5757\u6570\u91cf\u51cf\u534a\uff0c\u81f3\u591a\u6267\u884c $\\log n$ \u8f6e\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0cBoruvka \u7b97\u6cd5\u5e76\u4e0d\u8981\u6c42\u6c42\u51fa\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u53ea\u8981\u4f60\u80fd\u591f\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6c42\u51fa\u5176\u4e0e\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u7684\u70b9\u95f4\u7684\u6700\u5c0f\u8fb9\u6743\u5373\u53ef\u3002\n\n\u8003\u8651\u672c\u9898\u3002\u6211\u4eec\u8003\u8651\u4e8c\u5206\u4e00\u4e2a\u70b9 $x$ \u5728 Kruskal \u91cd\u6784\u6811\u4e0a\u7684\u7956\u5148\uff0c\u5e76\u4e14\u5224\u5b9a\u8fd9\u4e2a\u7956\u5148\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1\u7684\u8fde\u8fb9\u3002\n\n\u8003\u8651\u5224\u5b9a\u6761\u4ef6\u3002\n\n- \u8fd9\u4e2a\u7956\u5148\u7684\u5b50\u6811\u4e2d\u5b58\u5728\u4e0e $x$ \u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u7684\u70b9\u3002\n- \u4e0a\u8ff0\u70b9\u4e2d\u5b58\u5728 **\u5728\u539f\u56fe\u4e2d\u4e0e $x$ \u65e0\u8fb9\u76f4\u63a5\u76f8\u8fde** \u7684\u70b9\u3002\n\n\u5176\u4e2d\u7b2c\u4e8c\u6761\u9650\u5236\u8f83\u6613\u9057\u5fd8\uff0c\u8fd9\u662f\u56e0\u4e3a **\u8865\u56fe** \u4e2d\u4e0d\u5b58\u5728\u539f\u56fe\u4e2d\u6709\u7684\u8fb9\u3002\n\n\u90a3\u4e48\u8003\u8651\u5982\u4f55\u5224\u5b9a\u3002\u6211\u4eec\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u4e0d\u4f7f\u7528\u4e8c\u5206\uff0c\u800c\u662f\u627e\u5230\u5728 Kruskal \u91cd\u6784\u6811\u7684 dfs \u5e8f\u4e0a\uff0c\u5728 $x$ \u4e4b\u524d/\u4e4b\u540e\u4e14\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u9996\u4e2a\u70b9\uff0c\u7136\u540e\u627e\u5230\u4e8c\u8005 LCA \u7684\u8f83\u6df1\u8005\uff0c\u5373\u4e3a\u6211\u4eec\u9700\u8981\u7684\u70b9\u3002\n\n\u8003\u8651\u5bf9\u4e4b\u524d\u4e4b\u540e\u5404\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\u3002\u663e\u7136\u968f\u7740 Boruvka \u7b97\u6cd5\u7684\u6267\u884c\uff0c\u4e4b\u524d\u7684\u6307\u9488\u4f1a\u4e0d\u65ad\u524d\u79fb\uff0c\u4e4b\u540e\u7684\u6307\u9488\u4f1a\u4e0d\u65ad\u540e\u79fb\u3002\n\n\u90a3\u4e48\u6211\u4eec\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u6bcf\u4e2a\u8fde\u901a\u5757\uff0c\u7136\u540e\u6bcf\u6b21\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u627e\u5230\u6307\u9488\u4e4b\u540e\u4e0b\u4e00\u4e2a\u4e0d\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u70b9\uff0c\u5047\u5982\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u8fb9\u51fa\u73b0\u5728\u539f\u56fe\u4e2d\u5c31\u518d\u6b21\u5bfb\u627e\u5373\u53ef\u3002\u53ef\u4ee5\u53d1\u73b0\u5931\u914d\u7684\u603b\u6b21\u6570\u662f $O(m)$ \u7ea7\u522b\u7684\u3002\n\n\u8003\u8651\u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u53ea\u9700\u6bcf\u8f6e\u90fd\u91cd\u6784\u8fde\u901a\u5757\u5373\u53ef\u2014\u2014\u56e0\u4e3a\u4e00\u5171\u4ec5\u6267\u884c $O(\\log n)$ \u8f6e\u3002\u66b4\u529b\u7ef4\u62a4\u8fde\u7eed\u7684\u6765\u81ea\u540c\u4e00\u8fde\u901a\u5757\u7684\u6bb5\uff0c\u7136\u540e\u67e5\u8be2\u540e\u7ee7\u4e4b\u7c7b\u5c31\u76f4\u63a5\u8df3\u5373\u53ef\u3002\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u53ef\u4ee5\u505a\u5230\u7ebf\u6027\u67e5\u8be2\u3002\n\n\u590d\u6742\u5ea6\u5bf9\u6570\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200100;\nint T,n,E,cnt,ord[N],dsu[N<<1],val[N<<1];\nstruct EDGE{int x,y,z;};\nvector<int>v[N],u[N<<1];\nvector<int>::iterator itf[N],itb[N];\ninline int find(const int&x){return dsu[x]==x?x:dsu[x]=find(dsu[x]);}\nint dfn[N<<1],rev[N<<1],tot,lim,dep[N<<1],st[20][N<<2],LG[N<<2],fir[N<<1];\ninline int MIN(const int&x,const int&y){return dep[x]<dep[y]?x:y;}\ninline bool dfncmp(const int&x,const int&y){return dfn[x]<dfn[y];}\ninline int LCA(int x,int y){\n\tx=fir[x],y=fir[y];if(x>y)swap(x,y);\n\tint k=LG[y-x+1];\n\treturn MIN(st[k][x],st[k][y-(1<<k)+1]);\n}\nvoid dfs(int x){\n\tif(x<=n)dfn[x]=++tot,rev[tot]=x;\n\tst[0][++lim]=x,fir[x]=lim;\n\tfor(auto y:u[x])dep[y]=dep[x]+1,dfs(y),st[0][++lim]=x;\n}\nvoid Kruskal(EDGE*e,int m){\n\tcnt=n,tot=lim=0;\n\tfor(int i=1;i<=m;i++)ord[i]=i;\n\tsort(ord+1,ord+m+1,[&](int x,int y){return e[x].z<e[y].z;});\n\tfor(int i=1;i<=n;i++)dsu[i]=i;\n\tfor(int i=1,x,y,z;i<=m;i++)\n\t\tif((x=find(e[ord[i]].x))!=(y=find(e[ord[i]].y)))\n\t\tval[z=++cnt]=e[ord[i]].z,\n\t\tu[z].push_back(x),u[z].push_back(y),\n\t\tdsu[x]=dsu[y]=dsu[z]=z;\n\tdfs(cnt);\n\tfor(int i=2;i<=lim;i++)LG[i]=LG[i>>1]+1;\n\tfor(int j=1;j<=LG[lim];j++)for(int i=1;i+(1<<j)-1<=lim;i++)\n\t\tst[j][i]=MIN(st[j-1][i],st[j-1][i+(1<<j-1)]);\n\tfor(int i=1;i<=cnt;i++)u[i].clear();\n}\nint lp[N],rp[N];\nint fp[N],bp[N];\nint mn[N],mx[N],my[N],m;\nEDGE e[N],f[N];\nvoid mina(){\n\tscanf(\"%d%d\",&n,&m),E=0;\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&e[i].x,&e[i].y,&e[i].z),\n\t\tv[e[i].x].push_back(e[i].y),v[e[i].y].push_back(e[i].x);\n\tKruskal(e,m);\n\tfor(int i=1;i<=n;i++){\n\t\tsort(v[i].begin(),v[i].end(),dfncmp);\n\t\titf[i]=itb[i]=lower_bound(v[i].begin(),v[i].end(),i,dfncmp);\n\t\tif(itf[i]!=v[i].begin())itf[i]--;\n\t\tfp[i]=bp[i]=dfn[i];\n\t}\n\tfor(int i=1;i<=n;i++)dsu[i]=i;\n\twhile(E<n-1){\n\t\tfor(int l=1,r=1;l<=n;l=r){\n\t\t\tfor(r=l;r<=n&&find(rev[l])==find(rev[r]);r++);\n\t\t\tfor(int i=l;i<r;i++)lp[i]=l,rp[i]=r-1;\n\t\t}\n\t\tfor(int i=1;i<=n;i++)mn[i]=0x3f3f3f3f,mx[i]=my[i]=-1;\n//\t\tfor(int i=1;i<=n;i++)printf(\"[%d,%d]\",lp[i],rp[i]);puts(\"\");\n\t\tfor(int i=1;i<=n;i++){\n\t\t\twhile(fp[i]){\n\t\t\t\tif(find(rev[fp[i]])==find(i)){fp[i]=lp[fp[i]]-1;continue;}\n\t\t\t\twhile(itf[i]!=v[i].begin()&&dfn[*itf[i]]>fp[i])itf[i]--;\n\t\t\t\tif(dfn[*itf[i]]==fp[i])fp[i]--;\n\t\t\t\telse break;\n\t\t\t}\n\t\t\twhile(bp[i]<=n){\n\t\t\t\tif(find(rev[bp[i]])==find(i)){bp[i]=rp[bp[i]]+1;continue;}\n\t\t\t\twhile(itb[i]!=v[i].end()&&dfn[*itb[i]]<bp[i])itb[i]++;\n\t\t\t\tif(itb[i]!=v[i].end()&&dfn[*itb[i]]==bp[i])bp[i]++;\n\t\t\t\telse break;\n\t\t\t}\n\t\t\tint z=0x3f3f3f3f,y=-1;\n\t\t\tif(fp[i]){\n\t\t\t\tint Z=val[LCA(rev[fp[i]],i)];\n\t\t\t\tif(Z<z)z=Z,y=rev[fp[i]];\n\t\t\t}\n\t\t\tif(bp[i]<=n){\n\t\t\t\tint Z=val[LCA(i,rev[bp[i]])];\n\t\t\t\tif(Z<z)z=Z,y=rev[bp[i]];\n\t\t\t}\n\t\t\tif(z<mn[find(i)])mn[find(i)]=z,mx[find(i)]=i,my[find(i)]=y;\n\t\t}\n\t\tfor(int i=1;i<=n;i++)if(dsu[i]==i){\n\t\t\tint j=find(my[i]);\n\t\t\tif(j==i)continue;\n//\t\t\tprintf(\"LINK:%d,%d:%d\\n\",mx[i],my[i],mn[i]);\n\t\t\tdsu[i]=j;\n\t\t\t++E,f[E].x=mx[i],f[E].y=my[i],f[E].z=mn[i];\n\t\t}\n\t}\n\tKruskal(f,E);\n\tfor(int i=1;i<=m;i++)printf(\"%d \",val[LCA(e[i].x,e[i].y)]);puts(\"\");\n\tfor(int i=1;i<=n;i++)v[i].clear();\n}\nint main(){\n\tscanf(\"%d\",&T);\n\twhile(T--)mina();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1646974504,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1648E\u3010Air Reform\u3011"
    },
    {
        "content": "# CF1648E Air Reform\n\n~~\u5934\u94c1\u8001\u54e5\u76f4\u63a5\u51b2 $3$ \u53ea $\\log$ \u559c\u63d0\u6700\u52a3\u89e3~~\n\n**\u63d0\u524d\u58f0\u660e\u8fd9\u4e0d\u662f\u6807\u7b97**\n\n---\n\n\u9996\u5148\u5bf9\u4e8e\u539f\u56fe\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u5efa Kruskal \u91cd\u6784\u6811\uff0c\u90a3\u4e48\u8865\u56fe\u4e2d\u8fb9 $(u,v)$ \u7684\u6743\u503c\u5c31\u662f $u,v$ \u5728\u91cd\u6784\u6811\u4e0a\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u70b9\u6743\u3002\n\n\u7136\u540e\uff0c\u6309\u9898\u76ee\u610f\u601d\uff0c\u6211\u4eec\u9700\u8981\u518d\u5bf9\u8865\u56fe\u5982\u6cd5\u70ae\u5236\uff0c\u5efa\u51fa\u91cd\u6784\u6811\u4e4b\u540e\u6c42\u8fb9\u6743\uff0c\u4f46\u53ef\u60dc\u7684\u662f\u8865\u56fe\u7684\u8fb9\u6570\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u53ef\u4ee5\u627f\u53d7\u7684\u8303\u56f4\u3002\n\n\u800c\u4e14\uff0c\u76f4\u63a5\u5728\u8003\u8651\u901a\u8fc7\u539f\u56fe\u7684 Kruskal \u91cd\u6784\u6811\u6765\u786e\u5b9a\u8865\u56fe\u7684 Kruskal \u91cd\u6784\u6811\u4e5f\u662f\u5f88\u56f0\u96be\u7684\uff08\u4f3c\u4e4e\u53ef\u4ee5\u6309\u8fb9\u6570\u505a\u6570\u636e\u5206\u6cbb\u4f46\u6211\u4e0d\u662f\u5f88\u6e05\u695a\uff09\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4e0d\u6c42\u91cd\u6784\u6811\uff0c\u800c\u662f\u6c42\u8865\u56fe\u7684**\u6700\u5c0f\u751f\u6210\u6811**\u3002\u56e0\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u662f\u6700\u5c0f\u74f6\u9888\u751f\u6210\u6811\uff0c\u90a3\u4e48\u6c42\u51fa\u8865\u56fe\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u540e\u53ea\u9700\u8981\u6c42 $(u,v)$ \u94fe\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u5c31\u662f\u7b54\u6848\u3002\n\n\u4f46\u600e\u4e48\u6c42\u6700\u5c0f\u751f\u6210\u6811\u5462\uff1f\u8865\u56fe\u4e0a\u8fb9\u6570\u975e\u5e38\u5927\uff0c\u800c\u4e14\u8fb9\u6743\u53ef\u4ee5\u8868\u793a\u4e3a\uff08\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\uff09\u4e00\u4e2a\u51fd\u6570\uff08\u5373\u4e24\u70b9 LCA \u5bf9\u5e94\u7684\u70b9\u6743\uff09\uff0c\u8003\u8651\u4f7f\u7528 Boruvka \u7b97\u6cd5\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u90a3\u4e48\u9700\u8981\u89e3\u51b3\u7684\u5c31\u662f\u5bf9\u6bcf\u4e2a\u8282\u70b9 $u$\uff0c\u6c42\u51fa\u8865\u56fe\u4e2d\u4e00\u7aef\u4e3a $u$\uff0c\u53e6\u4e00\u7aef\u4e0d\u5728 $u$ \u8fde\u901a\u5757\u5185\u7684\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u3002\u8003\u8651\u8865\u56fe\u7684\u6027\u8d28\uff1a\u4e0d\u5305\u542b\u539f\u56fe\u4e0a\u7684\u8fb9\uff0c\u800c\u4e14\u8fb9\u6743\u4e3a\u4e24\u70b9 LCA \u5bf9\u5e94\u7684\u70b9\u6743\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece $u$ \u5411\u4e0a\u500d\u589e\u5230\u6df1\u5ea6\u6700\u5927\u7684\u4e00\u4e2a\u7956\u5148 $p$ \u6ee1\u8db3 $p$ \u5b50\u6811\u5185\u5b58\u5728 \u65e2\u4e0d\u5728 $u$ \u6240\u5728\u8fde\u901a\u5757\u5185\u4e5f\u4e0d\u5728\u539f\u56fe\u4e2d\u4e0e $u$ \u76f8\u8fde \u7684\u70b9\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u8bb0\u51fa dfn \u4e4b\u540e\u8f6c\u5316\u4e3a\u533a\u95f4\u95ee\u9898\u3002\n\n\u7136\u540e\u5c31\u4e09\u4e2a $\\log$ \u4e86\uff0c~~\u7a0d\u5fae\u5361\u5361\u5e38\u5c31\u8dd1\u8fc7\u53bb\u4e86~~\u3002\n\n```c++\nint Find1(int u){ return fth[u]==u?u:fth[u]=Find1(fth[u]); }\nint Find2(int u){ return bel[u]==u?u:bel[u]=Find2(bel[u]); }\nvoid dfs1(int u, int f){\n\tfa[u][0]=f; dfn[u]=INF;\n\tfor (int i=1; i<=17; i++) fa[u][i]=fa[fa[u][i-1]][i-1];\n\tif (u<=n){ dfn[u]=End[u]=++Time; return; }\n\tfor (int v:KG[u]){\n\t\tdfs1(v,u);\n\t\tdfn[u]=min(dfn[u],dfn[v]);\n\t\tEnd[u]=max(End[u],End[v]);\n\t}\n}\nvoid update(int x, int y){\n\tint now=Leaf[x]; vex[now]=y==-1?id[x]:-1;\n\tfor (now>>=1; now; now>>=1) vex[now]=max(vex[ls],vex[rs]);\n\tfor (; x<=n; x+=x&-x) BIT[x]+=y;\n}\nint query(int now, int l, int r, int x, int y){\n\tif (l==x && r==y) return vex[now];\n\tint mid=(l+r)>>1;\n\tif (mid>=y) return query(ls,l,mid,x,y);\n\telse if (mid<x) return query(rs,mid+1,r,x,y);\n\telse return max(query(ls,l,mid,x,mid),query(rs,mid+1,r,mid+1,y));\n}\nvoid dfs2(int u, int f, int lst){\n\tFa[u][0]=f; dep[u]=dep[f]+1; mx[u][0]=lst;\n\tfor (int i=1; i<=17; i++){\n\t\tFa[u][i]=Fa[Fa[u][i-1]][i-1];\n\t\tmx[u][i]=max(mx[u][i-1],mx[Fa[u][i-1]][i-1]);\n\t}\n\tfor (auto v:NG[u])\n\t\tif (v.first!=f) dfs2(v.first,u,v.second);\n}\nint query(int u, int v){\n\tif (u==v) return 0;\n\tif (dep[u]<dep[v]) swap(u,v);\n\tint d=dep[u]-dep[v],ans=0;\n\tfor (int i=17; ~i; i--)\n\t\tif (d&(1<<i)) ans=max(ans,mx[u][i]),u=Fa[u][i];\n\tif (u==v) return ans;\n\tfor (int i=17; ~i; i--)\n\t\tif (Fa[u][i]^Fa[v][i]){\n\t\t\tans=max(ans,max(mx[u][i],mx[v][i]));\n\t\t\tu=Fa[u][i],v=Fa[v][i];\n\t\t}\n\treturn max(ans,max(mx[u][0],mx[v][0]));\n}\nvoid build(int now, int l, int r){\n\tif (l==r) return vex[now]=id[l],Leaf[l]=now,void();\n\tint mid=(l+r)>>1;\n\tbuild(ls,l,mid); build(rs,mid+1,r);\n\tvex[now]=max(vex[ls],vex[rs]);\n}\ninline int Query(int x, int y){\n\tint res=0;\n\tfor (; y; y-=y&-y) res+=BIT[y];\n\tfor (x--; x; x-=x&-x) res-=BIT[x];\n\treturn res;\n}\ninline int read(){\n\tchar ch=getchar(); int num=0;\n\twhile (ch<'0' || ch>'9') ch=getchar();\n\twhile (ch>='0' && ch<='9') num=(num<<3)+(num<<1)+ch-'0',ch=getchar();\n\treturn num;\n}\nvoid P(int x){\n\tif (!x) return;\n\tP(x/10); putchar(x%10+'0');\n}\ninline void Print(int x){\n\tif (!x) puts(\"0 \");\n\telse P(x),putchar(' ');\n}\nvoid solve(){\n\tn=read(),m=read(); Time=0;\n\tfor (int i=1; i<=m; i++){\n\t\tE[i].u=read(),E[i].v=read(),E[i].w=read(); E[i].id=i;\n\t\tG[E[i].u].push_back(E[i].v);\n\t\tG[E[i].v].push_back(E[i].u);\n\t}\n\tsort(E+1,E+1+m); siz=n;\n\tfor (int i=1; i<=n; i++) fth[i]=i;\n\tfor (int i=1; i<=m; i++){\n\t\tint x=Find1(E[i].u),y=Find1(E[i].v);\n\t\tif (x!=y){\n\t\t\tsiz++; fth[x]=fth[y]=fth[siz]=siz; val[siz]=E[i].w;\n\t\t\tKG[siz].push_back(x),KG[siz].push_back(y);\n\t\t}\n\t}\n\tdfs1(siz,0);\n\tfor (int i=1; i<=n; i++) id[dfn[i]]=i,bel[i]=i;\n\tbuild(1,1,n);\n\twhile (1){\n\t\tint cnt=0;\n\t\tfor (int i=1; i<=n; i++){\n\t\t\tint p=Find2(i);\n\t\t\tif (!vis[p]) vis[p]=++cnt;\n\t\t\tvec[vis[p]].push_back(i);\n\t\t}\n\t\tfor (int i=1; i<=n; i++) vis[Find2(i)]=0;\n\t\tif (cnt==1){ vec[1].clear(); break; }\n\t\tfor (int i=1; i<=cnt; i++){\n\t\t\tint Eu=0,Ev=0,Ew=INF;\n\t\t\tfor (int u:vec[i]){ cur[dfn[u]]++; if (cur[dfn[u]]==1) update(dfn[u],1); }\n\t\t\tfor (int u:vec[i]){\n\t\t\t\tint pos=u;\n\t\t\t\tfor (int v:G[u]){ cur[dfn[v]]++; if (cur[dfn[v]]==1) update(dfn[v],1); }\n\t\t\t\tfor (int i=17; ~i; i--)\n\t\t\t\t\tif (fa[u][i] && Query(dfn[fa[u][i]],End[fa[u][i]])==End[fa[u][i]]-dfn[fa[u][i]]+1) u=fa[u][i];\n\t\t\t\tu=fa[u][0]; \n\t\t\t\tif (u){\n\t\t\t\t\tint v=query(1,1,n,dfn[u],End[u]);\n\t\t\t\t\tif (v!=-1 && val[u]<Ew) Ew=val[u],Eu=pos,Ev=v;\n\t\t\t\t}\n\t\t\t\tfor (int v:G[pos]){ cur[dfn[v]]--; if (cur[dfn[v]]==0) update(dfn[v],-1); }\n\t\t\t}\n\t\t\tfor (int u:vec[i]){ cur[dfn[u]]--; if (cur[dfn[u]]==0) update(dfn[u],-1); }\n\t\t\tedge[i][0]=Eu,edge[i][1]=Ev,edge[i][2]=Ew;\n\t\t}\n\t\tfor (int i=1; i<=cnt; i++){\n\t\t\tif (edge[i][2]==INF) continue;\n\t\t\tint x=Find2(edge[i][0]),y=Find2(edge[i][1]);\n\t\t\tif (x!=y){\n\t\t\t\tbel[x]=y;\n\t\t\t\tNG[edge[i][0]].push_back(make_pair(edge[i][1],edge[i][2]));\n\t\t\t\tNG[edge[i][1]].push_back(make_pair(edge[i][0],edge[i][2]));\n\t\t\t}\n\t\t}\n\t\tfor (int i=1; i<=cnt; i++) vec[i].clear();\n\t}\n\tdfs2(1,0,0);\n\tfor (int i=1; i<=m; i++) ans[E[i].id]=query(E[i].u,E[i].v);\n\tfor (int i=1; i<=m; i++) Print(ans[i]); puts(\"\");\n\tfor (int i=1; i<=n; i++){\n\t\tbel[i]=cur[i]=BIT[i]=Leaf[i]=id[i]=0;\n\t\tfor (int j=0; j<=17; j++) Fa[i][j]=mx[i][j]=0;\n\t\twhile (!G[i].empty()) G[i].pop_back();\n\t\twhile (!NG[i].empty()) NG[i].pop_back();\n\t}\n\tfor (int i=1; i<=siz; i++){\n\t\tfor (int j=0; j<=17; j++) fa[i][j]=0;\n\t\tdfn[i]=End[i]=val[i]=fth[i]=dep[i]=0;\n\t\twhile (!KG[i].empty()) KG[i].pop_back();\n\t}\n\tfor (int i=1; i<=m; i++) ans[i]=0;\n}\n```\n\n",
        "postTime": 1646984155,
        "uid": 44599,
        "name": "wishapig",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1648E Air Reform"
    }
]