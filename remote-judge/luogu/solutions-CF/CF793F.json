[
    {
        "content": "\u9898\u610f \uff1a\n\n\u6709\u4e00\u53ea\u8717\u725b\u5728\u6811\u5e72\u4e0a\u722c\uff0c\u6709\u4e24\u79cd\u79fb\u52a8\u65b9\u5f0f\uff0c\u6cbf\u7740\u67d0\u6839\u7ef3\u5b50\u5411\u4e0a\u722c\uff0c\u6216\u8005\u987a\u7740\u6811\u5e72\u5f80\u4e0b\u6e9c\u3002\n\n\u6811\u5e72\u9ad8\u5ea6\u4e3a $n$\uff0c\u6709 $m$ \u6839\u7ef3\u5b50\uff0c\u7b2c $i$ \u6761\u8fde\u63a5\u4e86\u9ad8\u5ea6 $l_i$ \u81f3 $r_i$\uff0c\u4fdd\u8bc1 $r_i$ \u4e92\u4e0d\u76f8\u540c\u3002\n\n\u6709 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fa\u4e24\u4e2a\u6570 $L,R$ \uff0c\u95ee\u8717\u725b\u4ece\u9ad8\u5ea6 $L$ \u5f00\u59cb\u722c\uff0c\u53ea\u8003\u8651\u88ab\u5305\u542b\u5728 $[L,R]$ \u95f4\u7684\u7ef3\u5b50\uff08\u5373\u82e5\u4e00\u6761\u7ef3\u5b50\u7684\u533a\u95f4\u8d85\u51fa\u8be2\u95ee\u8303\u56f4\u5373\u4e0d\u80fd\u4f7f\u7528\uff09\uff0c\u8717\u725b\u80fd\u591f\u722c\u5230\u7684\u6700\u5927\u9ad8\u5ea6\u3002\n\n$ 1\u2264n,m,q\u226410^5$ \uff0c\u8f93\u5165\u5747\u4e3a\u6b63\u6574\u6570\u3002\n\n---\n\n\u770b\u5230\u662f\u533a\u95f4\u7684\u8be2\u95ee\uff0c\u800c\u4e14\u533a\u95f4\u5bf9\u7b54\u6848\u7684\u9650\u5236\u633a\u5927\u7684\uff0c\u6211\u4e00\u5f00\u59cb\u5c31\u60f3\u5230\u4e86\u79bb\u7ebf\u5904\u7406\uff0c\u5bf9\u8be2\u95ee\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e0b\u6240\u6709\u5de6\u7aef\u70b9\u7684\u7b54\u6848\u5373\u53ef\u3002\n\n\n\u6211\u4eec\u8bbe $a_i$ \u4e3a\u5f53\u524d\u4ee5 $i$ \u4e3a\u5de6\u7aef\u70b9\u7684\u7b54\u6848\u3002\n\n\u6bcf\u6b21\u5c06 $r$ \u53f3\u79fb\u53ef\u4ee5\u7ef4\u62a4\u7ef3\u5b50 $l,r$ \u5bf9\u7b54\u6848\u7684\u5f71\u54cd\uff1a\n\n$$\\large (l \\leq a_i ) \\  a_i=r  $$\n\n\u5373\u5bf9 $(1,l)$ \u4e2d\u6240\u6709 $l \\leq a_i$ \u7684 $a_i$ \u6539\u6210 $r$\u3002\n\n\u8fd9\u5c31\u662f\u4e00\u4e2a\u7ecf\u5178\u7684 $\\text{\u5409\u53f8\u673a\u7ebf\u6bb5\u6811}$ \uff0c\u82e5\u4e0d\u4f1a\u53ef\u4ee5\u53bb\u770b[\u7ebf\u6bb5\u68113](https://www.luogu.com.cn/problem/P6242)\u6216\u8005[BZOJ4695\u6700\u5047\u5973\u9009\u624b](https://www.baidu.com/s?ie=UTF-8&wd=BZOJ4695)\u3002\n\n\u590d\u6742\u5ea6\u662f $O(m \\log n)$ \u7684\uff0c\u8bc1\u660e\u53ef\u4ee5\u770b \u5409\u5982\u4e00 \u795e\u4ed9\u768416\u5e74\u96c6\u8bad\u961f\u8bba\u6587\u3002\n\n---\n\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define fr first\n#define sc second\n#define pb push_back \n#define mp std::make_pair\n#define mid (l + r >> 1)\n#define ls (root << 1)\n#define rs (root << 1 | 1)\nusing std::pair;\nusing std::vector;\ninline int max(int a,int b){return a>b?a:b;}\nconst int Maxn = 1e5 + 5;\nint n, m, Q, Ls[Maxn], ans[Maxn];\nvector<pair<int, int> > q[Maxn];\nint MAX[Maxn << 2], lst[Maxn << 2], TagA[Maxn << 2], TagB[Maxn << 2];\ninline void Upd(int root, int x) {\n    if (x > MAX[root])lst[root] = MAX[root], MAX[root] = x;\n    else if (x < MAX[root] && x > lst[root])lst[root] = x;\n}\ninline void Pushup(int root) {\n    MAX[root]=max(MAX[ls],MAX[rs]);\n}\nvoid Build(int root, int l, int r) {\n    if (l == r) {\n        MAX[root] = l;\n    \treturn;\n    }\n    Build(ls, l, mid);\n    Build(rs, mid + 1, r);\n    Pushup(root);\n}\ninline void Addtag(int root, int A) {\n    TagA[root]=max(TagA[root],A);\n    MAX[root]=max(MAX[root],A);\n}\ninline void Pushdown(int root) {\n    if (TagA[root])\n\t{\n\t\tAddtag(ls, TagA[root]);\n\t\tAddtag(rs, TagA[root]);\n\t\tTagA[root] = 0;\n\t}\n}\nvoid modify(int root, int l, int r, int L, int R, int A) {\n    if (MAX[root] > A || l > R || r < L) return;\n    if (L <= l && r <= R) return Addtag(root, A);\n    Pushdown(root);\n    modify(ls, l, mid, L, R, A);\n    modify(rs, mid + 1, r, L, R, A);\n    Pushup(root);\n}\nint Ask(int root, int l, int r, int pos) {\n    if (l > pos || r < pos) return 0;\n    if (l == r) return MAX[root];\n    Pushdown(root);\n    return Ask(ls, l, mid, pos) + Ask(rs, mid + 1, r, pos);\n}\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1, x, y; i <= m; i++) scanf(\"%d%d\", &x, &y), Ls[x] = y;\n    scanf(\"%d\", &Q);\n    for (int i = 1, x, y; i <= Q; i++) scanf(\"%d%d\", &x, &y), q[x].pb(mp(y, i));\n    Build(1, 1, n);\n    for (int i(n); i >= 1; i--) {\n        if (Ls[i]) modify(1, 1, n, Ls[i], i , i);\n        for (int si = q[i].size(), j = 0; j < si; j++) ans[q[i][j].sc] = min(Ask(1, 1, n, q[i][j].fr));\n    }\n    for (int i = 1; i <= Q; i++) printf(\"%d\\n\", ans[i]);\n}\n```\n\n\u53e6\u5916\u6211\u770b\u5230cf\u4e0a$\\rm{z \\color{red}houyuyang}$\u795e\u4ed9\u7684\u63d0\u4ea4\u662f\u53e6\u4e00\u79cd\u7ebf\u6bb5\u6811\uff0c\u4ed6\u662f\u6309\u7167\u8be2\u95ee\u5de6\u7aef\u70b9\u6392\u5e8f\u5904\u7406\u7684\uff0c\u6211\u6c34\u5e73\u4e0d\u591f\u6682\u65f6\u6ca1\u6709\u7406\u89e3\u5176\u505a\u6cd5\uff0c\u8dd1\u5f97\u6bd4\u6211\u5199\u7684\u8fd9\u4e2a\u5feb\u4e00\u4e9b\uff0c\u4f46\u662f\u6211\u4e5f\u4e0d\u77e5\u9053\u5176\u771f\u6b63\u7684\u590d\u6742\u5ea6\u5982\u4f55\u3002",
        "postTime": 1605257259,
        "uid": 220857,
        "name": "\u7d20\u8d28\u73a9\u5bb6\u5b591\u8d85",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF793F \u3010Julia the snail\u3011"
    },
    {
        "content": "# \u5206\u5757\u7684\u505a\u6cd5\n\n\u5206\u5757\u662f CF \u7684[\u5b98\u65b9\u9898\u89e3](https://codeforces.com/blog/entry/51685)\u7684\u601d\u8def\u3002\u867d\u8bf4\u662f $O(n\\sqrt q)$ \u7684\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u5f88\u663e\u7136 $10^5$ \u5c31\u662f\u5206\u5757\u7684\u6570\u636e\u8303\u56f4\u3002\n\n\u5f53\u7136\uff0c\u8fd9\u7bc7\u9898\u89e3\u53ef\u80fd\u548c\u5b98\u65b9\u9898\u89e3\u6709\u4e0d\u540c\uff0c\u4f46\u662f\u57fa\u672c\u601d\u8def\u548c\u590d\u6742\u5ea6\u662f\u4e00\u6837\u7684\uff0c\u8bf7\u653e\u5fc3\u98df\u7528\u3002\n\n## \u9898\u610f\n\n\u4e00\u4e2a\u5750\u6807\u8f74\u4e0a\uff0c\u6709\u82e5\u5e72\u7ebf\u6bb5\uff0c\u53ef\u4ee5\u4ece\u6bcf\u6761\u7ebf\u6bb5\u7684\u5de6\u7aef\u8d70\u5230\u7ebf\u6bb5\u53f3\u7aef\uff0c\u4e5f\u53ef\u4ee5\u5728\u5750\u6807\u8f74\u4e0a\u6cbf\u8d1f\u65b9\u5411\u79fb\u52a8\u3002\u4fdd\u8bc1\u6bcf\u6761\u7ebf\u6bb5\u53f3\u7aef\u70b9\u4e92\u4e0d\u76f8\u540c\u3002\n\n\u6bcf\u6b21\u8be2\u95ee\u7ed9\u4e00\u4e2a\u533a\u95f4 $[L, R]$\uff0c\u6c42\u4ee5 $L$ \u4e3a\u8d77\u70b9\uff0c\u5168\u7a0b\u4e0d\u79bb\u5f00\u533a\u95f4 $[L, R]$ \u6240\u80fd\u5230\u8fbe\u7684\u6700\u53f3\u4f4d\u7f6e\u3002\n\n\u5750\u6807\u8f74\u957f\u5ea6 $n$\uff0c\u7ebf\u6bb5\u6570 $m$\uff0c\u8be2\u95ee\u6570 $q$ \u5747\u6ee1\u8db3 $\\leq 10^5$\u3002\n\n## \u5206\u6790\n\n\u56e0\u4e3a\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u4e92\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4 $From_i$ \u5b58\u50a8\u70b9 $i$ \u505a\u53f3\u7aef\u70b9\u65f6\uff0c\u5bf9\u5e94\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u3002\n\n## \u66b4\u529b\n\n\u8be2\u95ee $[L, R]$ \u65f6\uff0c\u7ef4\u62a4\u4e00\u4e2a\u4ee5 $L$ \u4e3a\u5de6\u7aef\u70b9\u7684 \u201cAvailable \u533a\u95f4\u201d $[L, i]$\uff0c\u8868\u793a\u5f53\u524d\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u6240\u6709\u70b9\u90fd\u80fd\u5230\u8fbe\u3002\u4e00\u5f00\u59cb\uff0cAvailable \u533a\u95f4\u662f $[L, L]$\u3002\n\n\u4ece $L + 1$ \u5230 $R$ \u679a\u4e3e\u6307\u9488 $j$\uff0c\u5f53 $From_j \\in [L, i]$ \u65f6\uff0c \u5c06 $i$ \u53d8\u6210 $j$\uff0c\u7ee7\u7eed\u4e0a\u9762\u7684\u64cd\u4f5c\u3002\u6700\u7ec8\uff0c\u5f53 $j$ \u679a\u4e3e\u5230 $R$ \u65f6\uff0c\u8fd9\u65f6\u7684 $i$ \u5c31\u662f\u672c\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u7ef4\u62a4 Available \u5e8f\u5217\u662f\u6b63\u786e\u7684\uff1f\u5f53 $From_j \\in [L, i]$ \u65f6\uff0c\u53ef\u4ee5\u4ece Available \u533a\u95f4\u4e2d\u7684\u67d0\u4e2a\u70b9\u8d70\u5230 $j$\u3002\u800c\u4ece $j$ \u53c8\u53ef\u4ee5\u5408\u6cd5\u5730\u8d70\u5230 $i$ \u548c\u8def\u4e0a\u7684\u6240\u6709\u70b9\u3002\n\n## \u5206\u5757\n\n\u5bf9\u5750\u6807\u5206\u5757\uff0c\u8bbe\u5757\u957f $BlockLen$\uff0c\u5757\u6570 $BlockNum$\u3002\n\n\u65b0\u5efa\u4e00\u4e2a\u6570\u7ec4 $f_{i, j}$\uff0c\u8868\u793a\u4ee5 $i$ \u4e3a\u8d77\u70b9\uff0c\u4ee5\u7b2c $j$ \u5757\u7ed3\u5c3e ($jBlockLen$) \u4e3a\u7ec8\u70b9\u7684\u67e5\u8be2\u7ed3\u679c\u3002\n\n\u8fd9\u6837\u6bcf\u6b21\u67e5\u8be2\u65f6\uff0c\u53ef\u4ee5 $O(1)$ \u5f97\u5230 $j = kBlockLen$ \u65f6\u7684 Available \u533a\u95f4\u4e3a $[L, f_{L, kBlockLen}]$\u3002$k$ \u7684\u9009\u53d6\u6ee1\u8db3 $kBlockLen < R\\leq (k + 1)BlockLen$ \u53ea\u9700\u8981 $O(BlockLen)$ \u5373\u53ef\u3002\u8be2\u95ee\u603b\u590d\u6742\u5ea6 $O(qBlockLen)$\u3002\n\n## \u9884\u5904\u7406\n\n\u4e3a\u4e86\u4f18\u5316\u5e38\u6570\uff0c\u6211\u4eec $O(n)$ \u5904\u7406\u4e00\u4e2a\u6570\u7ec4 $Block_i$\uff0c\u8868\u793a $i$ \u6240\u5728\u5757\u7684\u7f16\u53f7\u3002\n\n\u5904\u7406\u4e00\u4e2a\u6570\u7ec4 $g_{i, j}$\uff0c\u8868\u793a\u4ee5 $i$ \u4e3a\u5de6\u7aef\uff0c\u53f3\u7aef\u5728 $j$ \u5757\u4ee5\u5185\u7684\u6700\u5927\u7684\u7ebf\u6bb5\u53f3\u7aef\u70b9\u3002\n\n\u6c42 $g_{i, j}$ \u9700\u8981\u5229\u7528 $g_{i, j}$ \u7684\u5355\u8c03\u6027\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e $j_1 < j_2$\uff0c\u4e00\u5b9a\u6709 $g_{i, j_1} \\leq g_{i, j_2}$\uff0c\u6240\u4ee5\u6bcf\u6b21\u8f93\u5165\u4e00\u4e2a\u7ebf\u6bb5 $(l, r)$ \u65f6\uff0c\u8d4b\u503c $g_{l, Block_r} = max(g_{l, Block_r}, r)$\u3002\n\n\u6700\u540e\uff0c\u6b63\u5e8f\u626b\u63cf\u4e00\u904d $g$ \u6570\u7ec4\uff0c\u4f7f $g_{i, j} = max(g_{i, j}, g_{i, j - 1})$ \u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(\\frac{n^2}{BlockLen} + m)$\u3002\n\n\u5bf9\u4e8e $f_{i, j}$\uff0c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e $i$\uff0c\u5219\u5bf9\u4e8e $k \\in (i, n]$\uff0c$f_{k, j}$ \u90fd\u662f\u5df2\u77e5\u7684\u3002\u5bf9\u4e8e $f_{i, j}$\uff0c\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n- $f_{i, j} = f_{k, j} (k \\in (i, g_{i, j}])$\n\n  \u56e0\u4e3a\u8fd9\u91cc\u7684 $i$ \u662f\u9012\u51cf\u679a\u4e3e\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e $k_1 < k_2$\uff0c\u53ea\u8981\u80fd\u53d6\u5230 $k_2$\uff0c\u4e00\u5b9a\u80fd\u53d6\u5230 $k_1$\uff0c\u6240\u4ee5\u5f53 $f_{k_1, j} > f_{k_2, j}$ \u65f6\uff0c$k_2$ \u7684\u5b58\u5728\u4e0d\u80fd\u4f7f\u7b54\u6848\u66f4\u4f18\uff0c\u5f39\u51fa $k_2$\u3002\n\n  \u8fd9\u91cc\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4 $k$\u3002\u4fdd\u8bc1\u961f\u5217\u4e2d $k$ \u548c $f_{k, j}$ \u5355\u8c03\u9012\u51cf\u3002\u6bcf\u4e00\u6b21\u6c42 $f_{i, j}$ \u65f6\uff0c\u4ece\u961f\u5c3e\u5f80\u524d\u904d\u5386\u961f\u5217\uff0c\u53ea\u8981 $k \\leq g_{i, j}$\uff0c\u5c31\u5f39\u51fa\u8fd9\u4e2a $k$\uff0c\u56e0\u4e3a $i < k$\uff0c\u4e14\u8fd9\u65f6\u4e00\u5b9a\u6709 $f_{i, j} \\geq f_{k, j}$\u3002\u91cd\u590d\u4e0a\u9762\u7684\u64cd\u4f5c\u76f4\u5230 $k > g_{i, j}$\u3002\n\n  \u5982\u679c\u6700\u540e\u4e00\u4e2a\u5f39\u51fa\u7684 $k$ \u6ee1\u8db3 $f_{k, j} > g_{i, j}$\uff0c\u5219\u8d4b\u503c $f_{i, j} = f_{k, j}$\u3002\u5426\u5219\u5c31\u662f\u4e0b\u9762\u7684\u60c5\u51b5\u3002\n\n- $f_{i, j} = g_{i, j}$\n\n  \u5982\u679c\u5f39\u51fa\u7684 $k$ \u6ee1\u8db3 $f_{k, j} \\leq g_{i, j}$\uff0c\u8bf4\u660e\u4ece $i$ \u76f4\u63a5\u8d70\u4e00\u6761\u7ebf\u6bb5\u5230\u8fbe\u7684\u70b9\u66f4\u4f18\u3002\u6240\u4ee5\u8d4b\u503c $f_{i, j} = g_{i, j}$\u3002\n\n\u6700\u540e\u628a $i$ \u63d2\u5165\u961f\u5c3e\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a $j$\uff0c\u590d\u6742\u5ea6\u662f $O(n)$\uff0c\u56e0\u4e3a\u6bcf\u4e2a $i$ \u53ea\u5165\u961f\u4e00\u6b21\u3002\u603b\u590d\u6742\u5ea6 $O(\\frac{n^2}{BlockLen})$\u3002\n\n\u7b97\u6cd5\u590d\u6742\u5ea6\u662f $O(\\frac{n^2}{BlockLen} + qBlockLen + m)$\n\n## \u5757\u957f\n\n\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\uff0c\u56e0\u4e3a $m \\leq n$\uff0c\u6211\u4eec\u5c06\u7ebf\u6027\u7684 $m$ \u5ffd\u7565\uff0c\u628a\u590d\u6742\u5ea6\u5f53\u6210 $O(\\frac{n^2}{BlockLen} + qBlockLen)$ \u6765\u8ba1\u7b97\uff0c\u53d1\u73b0\u5f53\u5757\u957f\u53d6 $\\frac n{\\sqrt{q}}$ \u65f6\u8fbe\u5230\u5206\u5757\u7406\u8bba\u6700\u4f18\u590d\u6742\u5ea6 $n\\sqrt q$\u3002\n\n## \u4ee3\u7801\n\n\u6ce8\u610f\uff1a\u7701\u7565\u4e86\u7f3a\u7701\u6e90\u548c\u5feb\u8bfb `RD()`\u3002\n\n```cpp\nunsigned A[100005], B[100005], m, n, q, Ans(0), From[100005], f[100005][400], g[100005][400], BlockLen, BlockNum, Block[100405], Ql, Qr, Stack[100005];\nint main() {\n  n = RD(), m = RD();\n  for (register unsigned i(1); i <= m; ++i) { // \u5148\u8bfb\u8fdb\u6765, \u56e0\u4e3a\u6c42\u5757\u957f\u9700\u8981\u7528 q \n    A[i] = RD(), B[i] = RD();\n  }\n  q = RD();\n  BlockLen = (n / (sqrt(q) + 1)) + 1;       // \u7406\u8bba\u6700\u4f18\u5757\u957f \n  BlockNum = (n + BlockLen - 1) / BlockLen; // \u5757\u6570 \n  for (register unsigned i(1); i <= BlockNum; ++i) {\n    for (register unsigned j(1); j <= BlockLen; ++j) {\n      Block[(i - 1) * BlockLen + j] = i;    // O(n) \u9884\u5904\u7406 Block \u6570\u7ec4 \n    }\n  }\n  for (register unsigned i(1); i <= m; ++i) {\n    g[A[i]][Block[B[i]]] = max(g[A[i]][Block[B[i]]], B[i]); // \u66f4\u65b0 g[l][Block[r]]\n    From[B[i]] = A[i];                                      // \u5b58\u50a8 From[r] = l \n  }\n  for (register unsigned i(1); i <= n; ++i) {\n    g[i][Block[i]] = max(i, g[i][Block[i]]);\n    for (register unsigned j(Block[i]); j <= BlockNum; ++j) {\n      g[i][j] = max(g[i][j], g[i][j - 1]);                  // \u626b\u4e00\u904d g \u6570\u7ec4, \u901a\u8fc7\u5355\u8c03\u6027\u5904\u7406 g \n    }\n  }\n  for (register unsigned j(1), Ri; j <= BlockNum; ++j) {\n    Ri = j * BlockLen;\n    Ri = (Ri > n) ? n : Ri;                         // \u7ec8\u70b9\u7684\u6700\u5927\u503c (\u7b2c j \u5757\u7684\u53f3\u754c)\n    for (register unsigned i(Ri), Hd(0); i >= 1; --i) {\n      while(Hd && Stack[Hd] <= g[i][j]) --Hd;       // \u5f39\u51fa\u961f\u5c3e \n      if(Stack[Hd + 1] <= g[i][j]) {                // \u8fd9\u4e2a i \u5f39\u51fa\u4e86\u81f3\u5c11\u4e00\u6b21\u961f\u5c3e \n        f[i][j] = max(f[Stack[Hd + 1]][j], g[i][j]);\n      }\n      else {                                        // \u4e00\u6b21\u4e5f\u6ca1\u5f39\u51fa \n        f[i][j] = g[i][j];\n      }\n      Stack[++Hd] = i;\n    }\n  }\n  for (register unsigned i(1), j; i <= q; ++i) {  // \u56de\u7b54\u8be2\u95ee \n    Ql = RD(), Qr = RD();\n    if(Block[Ql] ^ Block[Qr]) {                   // \u5de6\u53f3\u7aef\u70b9\u5728\u4e0d\u540c\u5757\u5185 \n      Ans = f[Ql][Block[Qr] - 1];\n      j = ((Block[Qr] - 1) * BlockLen) + 1;\n    } else {                                      // \u5728\u540c\u4e00\u5757\u5185 \n      Ans = Ql;\n      j = Ans + 1;\n    }\n    while (j <= Qr) {                             // \u66b4\u529b\u6700\u540e\u4e0d\u8db3\u4e00\u5757\u7684\u90e8\u5206 \n      if(Ql <= From[j] && From[j] <= Ans) {\n        Ans = j;\n      }\n      ++j;\n    }\n    printf(\"%u\\n\", Ans);\n  }\n  return Wild_Donkey;\n}\n```",
        "postTime": 1622033004,
        "uid": 143771,
        "name": "\u6bd4\u5229\u2642\u6d77\u7075\u987f",
        "ccfLevel": 8,
        "title": "CF793F Julia the snail \u5206\u5757"
    },
    {
        "content": "### \u5206\u5757\u505a\u6cd5\n\u5c1d\u8bd5\u63d0\u4f9b\u4e00\u79cd\u8f83\u4e3a\u4f18\u7f8e\u7684\u5206\u5757\u5199\u6cd5\n\n\u5177\u4f53\u89e3\u6790\u5199\u5728\u4e86\u4ee3\u7801\u7684\u6ce8\u91ca\u4e2d\n\n\u91cd\u70b9\u662f\u5bf9\u4e8e $f_{i,j}$ \u7684\u5904\u7406\uff0c\u7531\u4e8e\u5176\u5177\u6709\u5411\u4e0b\u8d70\u6ca1\u6709\u4ee3\u4ef7\u7684\u6027\u8d28\uff0c\u6240\u4ee5 $i$ \u66f4\u5927 $f$ \u4e00\u5b9a\u66f4\u4f18\u8fd9\u4e2a\n\n\u6211\u4eec\u8fd9\u91cc\u8981\u7528\u8fd9\u4e2a\u6027\u8d28\u7ef4\u62a4\u4e00\u4e2a\u6808\u6765\u66f4\u65b0\u5f53\u524d\u53ef\u80fd\u66f4\u65b0\u7b54\u6848\u7684\u8282\u70b9\n\n\u8d34\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#define rint register int\nusing namespace std;\ninline int read(){\n\tchar c;int f=1,res=0;\n\twhile(c=getchar(),!isdigit(c))if(c=='-')f*=-1;\n\twhile(isdigit(c))res=res*10+c-'0',c=getchar();\n\treturn f*res;\n}\nconst int N=1e5+5,sN=4e2+5;\nint n,m,q,g[N][sN]={0},f[N][sN];\nint fm[N],bk[N],bkl,bkcnt;\n/*\ng[i][j]:\u8868\u793a\u4ece\u7b2ci\u4e2a\u70b9\u5f00\u59cb\u4e00\u76f4\u5230\u7b2cj\u4e2a\u5757\uff0c\u6240\u6709\u7684\u7ef3\u5b50\u80fd\u5230\u8fbe\u7684\u6700\u53f3\u7aef\u7684\u4f4d\u7f6e\uff08\u76f4\u8fbe\uff09\nf[i][j]:\u8868\u793a\u4ece\u7b2ci\u4e2a\u70b9\u5f00\u59cb\u4e00\u76f4\u5230\u7b2cj\u4e2a\u5757\uff0c\u901a\u8fc7\u5404\u79cd\u65b9\u5f0f\u80fd\u5230\u8fbe\u7684\u6700\u53f3\u7aef\u7684\u4f4d\u7f6e\uff08\u4e0d\u4e00\u5b9a\u76f4\u8fbe\uff09\nbkl:\u5757\u957f \nbkcnt:\u5757\u6570 \nbk[i]: i\u70b9\u6240\u5728\u7684\u5757 \n*/\nint main(){\n\tn=read();\n\tbkl=sqrt(n);\n\tbkcnt=n/bkl;\n\tif(n%bkl!=0)++bkcnt;//\u5982\u679c\u6709\u4e0d\u6ee1\u6574\u5757\u7684\u5c31\u52a0\u4e00\u5757 \n\tfor(rint i=1;i<=n;++i)\n\t\tbk[i]=(i-1)/bkl+1;\n\tm=read();\n\tfor(rint i=1;i<=m;++i){\n\t\tint l=read(),r=read();\n\t\tfm[r]=l;\n\t\tg[l][bk[r]]=max(g[l][bk[r]],r);//\u5148\u8ba1\u7b97\u5728\u5757\u5185\u7684\u7ed3\u679c \n\t}\n\tfor(rint i=1;i<=n;++i){\n\t\tg[i][bk[i]]=i;//\u521d\u59cb\u53ef\u4ee5\u5230\u8fbe\u7684\u90fd\u662f\u81ea\u8eab \n\t\tfor(rint j=bk[i];j<=bkcnt;++j)\n\t\t\tg[i][j]=max(g[i][j],g[i][j-1]);//\u66f4\u65b0\u6240\u6709\u7684g\u4e3a\u5757\u5185\u548c\u4e4b\u524d\u5757\u7684\u7ed3\u679c \n\t}\n\tint stk[N],hed;\n\tfor(rint i=1;i<=bkcnt;++i){\n\t\tint r=min(bkl*i,n);\n\t\thed=0;\n\t\tfor(rint j=r;j>=1;--j){\n\t\t\twhile(hed&&stk[hed]<=g[j][i])\n\t\t\t\t--hed;\n\t\t\t/*\n\t\t\t\u65b0\u70b9\u52a0\u5165\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\n\t\t\t1.g\u4e0d\u5982\u80fd\u5230\u8fbe\u7684\u70b9\u7684f\u4f18\uff0c\u6b64\u65f6\u65b0\u70b9\u7684f\u88ab\u6539\u4e3a\u65e7\u70b9f\uff0c\u4f46\u662f\u65b0\u70b9\u66f4\u9760\u5de6\uff0c\u6240\u4ee5\u6392\u9664\u65e7\u70b9\n\t\t\t2.g\u6bd4\u53ef\u5230\u8fbe\u7684\u70b9\u7684f\u4f18\uff0c\u65b0\u70b9\u7684f\u8fd8\u662f\u6bd4\u65e7\u70b9\u7684\u4f18\uff0c\u4f9d\u65e7\u8e22\u51fa\u65e7\u70b9\n\t\t\t3.\u5230\u8fbe\u4e0d\u4e86\u6808\u9876\u70b9\uff0c\u7531\u4e8e\u6808\u9876\u70b9\u5df2\u7ecf\u662f\u6700\u9760\u5de6\u7684\u4e86\uff0c\u90a3\u4e48\u4e45\u6ca1\u6cd5\u66f4\u65b0\uff0c\u76f4\u63a5\u81ea\u5df1\u66f4\u65b0\u81ea\u5df1\u7136\u540e\u5165\u6808 \n\t\t\t*/\n\t\t\tif(stk[hed+1]<=g[j][i])//\u8fd9\u91cc\u6700\u540e\u4e00\u4e2a\u80fd\u5230\u8fbe\u7684\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u7528\u8fd9\u4e2a\u70b9\u66f4\u65b0\u5f53\u524d\u7684\u7b54\u6848 \n\t\t\t\tf[j][i]=max(f[stk[hed+1]][i],g[j][i]);\n\t\t\telse f[j][i]=g[j][i];\n\t\t\tstk[++hed]=j;\n\t\t}\n\t}\n\tq=read();\n\twhile(q--){\n\t\tint x=read(),y=read(),ava=x,i;\n\t\t/*\n\t\tava\uff1a\u8bb0\u5f55\u5f53\u524d\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u53f3\u7aef\u7684\u4f4d\u7f6e\uff0c\u4e5f\u662f\u6700\u540e\u7684\u7b54\u6848\n\t\ti\uff1a\u6307\u5411\u7b2c\u4e00\u4e2a\u5c1a\u672a\u5904\u7406\u7684\u6563\u70b9\u7684\u4e0b\u6807 \n\t\t*/ \n\t\tif(bk[x]!=bk[y]){//\u5982\u679c\u4e24\u4e2a\u4e0d\u5728\u4e00\u5757\u5185\u5c31\u76f4\u63a5\u628a\u53f3\u7aef\u70b9\u4e0a\u4e00\u5757\u7ed9\u5904\u7406\u6389 \n\t\t\tava=f[x][bk[y]-1];\n\t\t\ti=((bk[y]-1)*bkl)+1;\n\t\t}else{//\u5426\u5219\u5728\u4e00\u5757\u5185\u5c31\u4ece\u5934\u5f00\u59cb \n\t\t\tava=x;\n\t\t\ti=ava+1;\n\t\t}\n\t\twhile(i<=y){//\u5904\u7406\u5c1a\u672a\u5904\u7406\u7684\u6563\u70b9 \n\t\t\tif(x<=fm[i]&&fm[i]<=ava)//\u5982\u679c\u5f53\u524d\u53f3\u7aef\u70b9\u5bf9\u5e94\u7684\u5de6\u7aef\u70b9\u53ef\u4ee5\u5230\u8fbe\u90a3\u4e48\u66f4\u65b0\u7b54\u6848 \n\t\t\t\tava=i;\n\t\t\t++i;\n\t\t}\n\t\tprintf(\"%d\\n\",ava);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1626652188,
        "uid": 206258,
        "name": "SDNetFriend",
        "ccfLevel": 7,
        "title": "CF793F Julia the snail \u9898\u89e3"
    },
    {
        "content": "\u4f18\u96c5\u7684\u975e\u5206\u5757\u505a\u6cd5\n\n\u8be2\u95ee\u5148\u79bb\u7ebf\u4e0b\u6765\uff0c\u6309\u53f3\u7aef\u70b9\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u8003\u8651\u5f53\u53f3\u7aef\u70b9\u79fb\u52a8\u7684\u65f6\u5019\u7b54\u6848\u600e\u4e48\u53d8\u5316\n\n\u8bb0\u70b9 $x$ \u70b9\u7684\u7b54\u6848\u4e3a $r_x$\n\n\u5f53\u4ece $r \\rightarrow r+1$ \u7684\u65f6\u5019\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u6709\u7ef3\u5b50 $[l,r+1]$ \u90a3\u4e48\u8003\u8651\u5728 $l$ \u5de6\u8fb9\u7684\u70b9\u5982\u679c\u5b83\u7684\u7b54\u6848\u5728 $[l+1,r]$ \u4e4b\u95f4\uff08\u4e8b\u5b9e\u4e0a\u4e0d\u53ef\u80fd\u8d85\u8fc7 $r$\uff09\n\n\u90a3\u5c31\u5c06\u5176\u66f4\u65b0\u4e3a $r+1$ \uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5feb\u901f\u627e\u5230 $[1,l]$ \u7684\u70b9\u4e2d\u5927\u4e8e $l$ \u7684\u70b9\u5e76\u5c06\u5176\u4fee\u6539\u4e3a $r+1$\n\n\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528\u52bf\u80fd\u7ebf\u6bb5\u6811\u505a\uff0c\u5177\u4f53\u6765\u8bf4\u8bb0\u5f55\u4e00\u4e2a\u4e24\u5143\u7684\u6807\u8bb0 $tag(x,y)$ \u8868\u793a\u5927\u4e8e\u7b49\u4e8e $y$ \u7684\u70b9\u4fee\u6539\u4e3a $x$ \u5c31\u53ef\u4ee5\u505a\u4e86\uff0c\u4e0b\u653e\u6ce8\u610f\u4e0b\u8981\u53d6\u6700\u5c0f\u7684 $y$\n\n\u5176\u4ed6\u64cd\u4f5c\u548c\u52bf\u80fd\u7ebf\u6bb5\u6811\u4e00\u6837\uff0c\u590d\u6742\u5ea6 $O(m\\log n)$\n\n```cpp\n#include <array>\n#include <iostream>\n#include <vector>\nusing namespace std;\nconst int N   = 1e5 + 10;\nconst int INF = 0x3f3f3f3f;\nnamespace SegmentBeats {\n#define ls(x) (x * 2)\n#define rs(x) (x * 2 + 1)\nstruct Node {\n    int max, sem;\n    pair<int, int> tag;\n    int l, r;\n};\narray<Node, N * 4> tr;\nauto merge(const Node &A, const Node &B) {\n    pair<int, int> res;\n    if (B.max > A.max) {\n        res.first  = B.max;\n        res.second = max(A.max, B.sem);\n    } else if (B.max < A.max) {\n        res.first  = A.max;\n        res.second = max(A.sem, B.max);\n    } else {\n        res.first  = A.max;\n        res.second = max(A.sem, B.sem);\n    }\n    return res;\n}\n// apply B -> A\nvoid apply_tag(Node &A, const Node &B) {\n    if (A.max >= B.tag.second) {\n        A.max = B.tag.first;\n        if (!A.tag.second) {\n            A.tag.second = B.tag.second;\n        } else {\n            A.tag.second = min(A.tag.second, B.tag.second);\n        }\n        A.tag.first = B.tag.first;\n    }\n}\nvoid apply_tag(Node &A, const pair<int, int> &B) {\n    if (A.max >= B.second) {\n        A.max = B.first;\n        if (!A.tag.second) {\n            A.tag.second = B.second;\n        } else {\n            A.tag.second = min(A.tag.second, B.second);\n        }\n        A.tag.first = B.first;\n    }\n}\nvoid pushup(int x) {\n    auto &&res = merge(tr[ls(x)], tr[rs(x)]);\n    tr[x].max  = res.first;\n    tr[x].sem  = res.second;\n}\nvoid pushdown(int x) {\n    if (tr[x].tag.first) {\n        apply_tag(tr[ls(x)], tr[x]);\n        apply_tag(tr[rs(x)], tr[x]);\n        tr[x].tag = make_pair(0, 0);\n    }\n}\nvoid build(int rt, int l, int r) {\n    tr[rt].l = l;\n    tr[rt].r = r;\n    if (l == r) {\n        tr[rt].max = l;\n        tr[rt].sem = -INF;\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(ls(rt), l, mid);\n    build(rs(rt), mid + 1, r);\n    pushup(rt);\n}\nvoid update(int rt, int L, int R, int x, int y) {\n    auto &l = tr[rt].l;\n    auto &r = tr[rt].r;\n    if (tr[rt].max < y) {\n        return;\n    }\n    if (l >= L && r <= R && tr[rt].sem < y) {\n        apply_tag(tr[rt], make_pair(x, y));\n        return;\n    }\n    pushdown(rt);\n    int mid = (l + r) / 2;\n    if (L <= mid) {\n        update(ls(rt), L, R, x, y);\n    }\n    if (mid < R) {\n        update(rs(rt), L, R, x, y);\n    }\n    pushup(rt);\n}\nint query(int rt, int pos) {\n    auto &l = tr[rt].l;\n    auto &r = tr[rt].r;\n    if (l == r) {\n        return tr[rt].max;\n    }\n    pushdown(rt);\n    int mid = (l + r) / 2;\n    if (pos <= mid) {\n        return query(ls(rt), pos);\n    } else {\n        return query(rs(rt), pos);\n    }\n}\n#undef ls\n#undef rs\n} // namespace SegmentBeats\nint n, m, q;\narray<int, N> lb, ans;\nstruct Query {\n    int l, id;\n};\nvector<Query> qr[N];\nint main() {\n    cin >> n >> m;\n    for (int i = 1; i <= m; i++) {\n        int l, r;\n        cin >> l >> r;\n        lb[r] = l;\n    }\n    cin >> q;\n    for (int i = 1; i <= q; i++) {\n        int l, r;\n        cin >> l >> r;\n        qr[r].emplace_back(Query{l, i});\n    }\n    SegmentBeats::build(1, 1, n);\n    for (int i = 1; i <= n; i++) {\n        if (lb[i]) {\n            SegmentBeats::update(1, 1, lb[i], i, lb[i]);\n        }\n        for (auto &p : qr[i]) {\n            ans[p.id] = SegmentBeats::query(1, p.l);\n        }\n    }\n    for (int i = 1; i <= q; i++) {\n        cout << ans[i] << endl;\n    }\n    return 0;\n}\n// Asusetic eru quionours\n```",
        "postTime": 1625063718,
        "uid": 46099,
        "name": "YCS_GG",
        "ccfLevel": 0,
        "title": "CF793F Julia the snail"
    },
    {
        "content": "> [CF793F Julia the snail](https://www.luogu.com.cn/problem/CF793F)\n\n\u7ed9\u5b9a $x, y$ \u4e4b\u540e\u5de6\u7aef\u70b9\u5c0f\u4e8e $x$ \u6216\u53f3\u7aef\u70b9\u5927\u4e8e $y$ \u7684\u533a\u95f4\u5c31\u6ca1\u6709\u7528\u4e86\u3002\u540c\u65f6\u8003\u8651\u4e24\u6761\u9650\u5236\u6bd4\u8f83\u9ebb\u70e6\uff0c\u8003\u8651\u79bb\u7ebf\u6309 $x$ \u4ece\u5927\u5230\u5c0f\u626b\u63cf\u7ebf\u53bb\u6389\u4e00\u7ef4\u9650\u5236\u3002\u5f53 $x + 1\\to x$ \u65f6\uff0c\u52a0\u5165\u6240\u6709\u4ee5 $x$ \u4e3a\u5de6\u7aef\u70b9\u7684\u533a\u95f4 $(x, y_i)$\uff0c\u5e76\u56de\u7b54\u6240\u6709\u4ee5 $x$ \u4e3a\u5de6\u7aef\u70b9\u7684\u8be2\u95ee\u3002\n\n- \u8003\u8651\u533a\u95f4 $(x, y_i)$ \u5e26\u6765\u7684\u5f71\u54cd\u3002\u6211\u4eec\u7ef4\u62a4 $a_y$ \u8868\u793a\u4ece $y$ \u51fa\u53d1\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u5c0f\u7684 $x$\uff0c\u90a3\u4e48 $(x, y_i)$ \u76f8\u5f53\u4e8e\u5bf9\u6240\u6709 $y\\geq y_i$\uff0c\u5982\u679c $y$ \u80fd\u5230\u8fbe\u4e0d\u8d85\u8fc7 $y_i$ \u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48 $y$ \u53ef\u4ee5\u5230\u8fbe $x$\u3002\u6362\u8a00\u4e4b\uff0c\u5c06\u6240\u6709 $y \\geq y_i$ \u4e14 $a_y \\leq y_i$ \u7684 $a_y$ \u5168\u90e8\u6539\u6210 $x$\u3002\n\n- \u8bbe $a_y$ \u8868\u793a\u4ee5 $y$ \u4e3a\u53f3\u7aef\u70b9\u7684\u533a\u95f4\u5bf9\u5e94\u5de6\u7aef\u70b9\uff0c\u82e5\u5de6\u7aef\u5c0f\u4e8e $x$ \u5219 $a_y = y$\u3002\u7ef4\u62a4 $cur$ \u548c $low$ \u8868\u793a\u5f53\u524d\u4f4d\u7f6e\u5728 $cur$\uff0c\u6700\u4f4e\u53ef\u4ee5\u8df3\u5230 $low$\uff0c\u521d\u59cb $cur = y$\uff0c$low = a_y$\uff0c\u7b54\u6848\u4e3a $y$\u3002\u6bcf\u6b21\u4ee4 $low \\gets \\min(low, a_{cur})$\uff0c\u82e5\u6b64\u65f6\u4ecd\u6709 $low = cur \\neq x$\uff0c\u8bf4\u660e $y$ \u6700\u591a\u8df3\u5230 $low$\uff0c\u6b64\u65f6\u76f8\u5f53\u4e8e\u5c06 $y$ \u6539\u6210 $low - 1$ \u5e76\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\u3002\n\n\u4e0a\u8ff0\u4e24\u79cd\u505a\u6cd5\u7684\u4fee\u6539\u548c\u8be2\u95ee\u590d\u6742\u5ea6\u592a\u52a3\uff0c\u8003\u8651\u6839\u53f7\u5e73\u8861\u3002\u5bf9 $a$ \u5206\u5757\uff0c\u5e76\u5c06 $a_y$ \u7684\u5b9a\u4e49\u6539\u4e3a $y$ \u53ef\u8fbe\u7684\u4efb\u610f\u4e0d\u4e0e $y$ \u540c\u5757\u7684 $x(x < y)$\u3002\n\n\u8bbe\u5f53\u524d\u5757\u5de6\u53f3\u8fb9\u754c\u5206\u522b\u4e3a $l, r$\u3002\n\n- \u4fee\u6539\u65f6\uff0c\u5bf9\u4e8e $a_y \\leq y_i$ \u4e14 $y_i\\leq y\\leq r$ \u7684 $a_y$ \u6539\u6210 $x$\u3002\n\n- \u67e5\u8be2\u65f6\uff0c\n    - \u82e5 $low, cur$ \u4e0d\u540c\u5757\uff0c\u5219\u4ee4 $low$ \u4e0e $\\min_{p = l} ^ {cur} a_p$ \u53d6\u6700\u5c0f\u503c\uff0c\u4e14 $cur$ \u53d8\u6210 $l - 1$\u3002\n    - \u82e5 $low, cur$ \u540c\u5757\u4e14 $cur = r$\uff0c\u5219\u4ee4 $low$ \u4e0e $\\min_{p = low} ^ r a_p$ \u53d6\u6700\u5c0f\u503c\u3002\u82e5 $low$ \u548c $cur$ \u4ecd\u540c\u5757\uff0c\u8bf4\u660e $y$ \u65e0\u6cd5\u8df3\u5230\u6bd4\u5f53\u524d $low$ \u66f4\u4f4e\u7684\u4f4d\u7f6e\u3002\u56e0\u4e3a\u4ece\u66f4\u9ad8\u7684\u5757\u8df3\u4e0b\u6765\u6700\u591a\u8df3\u5230\u539f\u6765\u7684 $low$\uff0c\u800c\u539f $low$ \u5230 $cur$ \u4e4b\u95f4\u6700\u591a\u8df3\u5230\u5f53\u524d $low$\uff0c\u5047\u8bbe\u5f53\u524d $low$ \u5230\u539f $low$ \u51cf $1$ \u4e4b\u95f4\u53ef\u4ee5\u8df3\u51fa\u5f53\u524d\u5757\uff0c\u90a3\u4e48\u636e $a$ \u7684\u5b9a\u4e49\u5b9a\u4e49\uff0c\u539f $low$ \u5230 $cur$ \u4e4b\u95f4\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u51fa\u5f53\u524d\u5757\u3002\n    - \u82e5 $low, cur$ \u540c\u5757\u4e14 $cur < r$\uff0c\u8bf4\u660e\u4ece\u5f53\u524d $y$ \u5f00\u59cb\u65e0\u6cd5\u8df3\u5230\u6bd4 $low$ \u66f4\u4f4e\u7684\u4f4d\u7f6e\u3002\n    - \u5bf9\u4e8e\u65e0\u6cd5\u8df3\u5230\u6bd4 $low$ \u66f4\u4f4e\u7684\u4f4d\u7f6e\u7684\u60c5\u51b5\uff0c\u6b64\u65f6 $low, cur$ \u540c\u5757\u3002\u82e5 $low, x$ \u4e0d\u540c\u5757\uff0c\u5219\u9700\u8981\u4ece $low$ \u5f80 $l$ \u627e\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u8df3\u51fa\u5f53\u524d\u5757\u7684\u4f4d\u7f6e $p$\uff0c\u4ee4 $y\\gets p$ \u5e76\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u3002\u5426\u5219\u4ece $low$ \u5f80 $x$ \u679a\u4e3e\u627e\u7b2c\u4e00\u4e2a\u4f7f\u5f97 $a_y = x$ \u7684 $y$ \u5373\u4e3a\u6240\u6c42\u3002\n\n\u56e0\u4e3a\u6bcf\u4e2a\u5757\u5185\u81f3\u591a\u505c\u987f\u4e00\u6b21\u5373\u53ef\u8df3\u5230\u66f4\u4f4e\u7684\u5757\uff0c\u6240\u4ee5\u67e5\u8be2\u590d\u6742\u5ea6\u540c\u6837\u4e3a $\\mathcal{O}(\\sqrt n)$\u3002\n\n\u5bf9\u6bcf\u4e2a\u5757\u9884\u5904\u7406 $a$ \u7684\u524d\u7f00 $\\min$\uff0c\u540e\u7f00 $\\min$\uff0c\u4ee5\u53ca\u4ece\u6bcf\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u5f80\u524d\u7684\u7b2c\u4e00\u4e2a\u53ef\u8df3\u51fa\u5f53\u524d\u5757\u7684\u4f4d\u7f6e\u3002\u4fee\u6539\u65f6\u53ef\u5173\u4e8e\u5757\u957f\u7ebf\u6027\u5904\u7406\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(m\\sqrt n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define TIME 1e3 * clock() / CLOCKS_PER_SEC\nusing ll = long long;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nusing ull = unsigned long long;\ninline ll read() {\n  ll x = 0, sgn = 0;\n  char s = getchar();\n  while(!isdigit(s)) sgn |= s == '-', s = getchar();\n  while(isdigit(s)) x = x * 10 + s - '0', s = getchar();\n  return sgn ? -x : x;\n}\ninline void print(int x) {\n  if(x < 0) return putchar('-'), print(-x);\n  if(x >= 10) print(x / 10);\n  putchar(x % 10 + '0');\n}\nbool Mbe;\nconstexpr int N = 1e5 + 5;\nconstexpr int B = 333;\nint n, m, q, ans[N];\nint a[N], blk[N], lp[N], rp[N];\nint suf[N], pre[N], fst[N];\nvector<int> buc[N];\nvector<pii> qu[N];\nbool Med;\nint main() {\n  fprintf(stderr, \"%.3lf MB\\n\", (&Mbe - &Med) / 1048576.0);\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"1.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"1.out\", \"w\", stdout);\n  #endif\n  cin >> n >> m;\n  for(int i = 1; i <= n; i++) a[i] = i, blk[i] = i / B;\n  for(int i = 0; i <= blk[n]; i++) lp[i] = max(1, i * B), rp[i] = min(n, i * B + B - 1);\n  for(int i = 1; i <= m; i++) {\n    int l = read(), r = read();\n    buc[l].push_back(r);\n  }\n  cin >> q;\n  for(int i = 1; i <= q; i++) {\n    int x = read(), y = read();\n    qu[x].push_back({y, i});\n  }\n  auto rebuild = [&](int id, int lim) {\n    int l = max(lim, lp[id]), r = rp[id];\n    suf[r] = a[r];\n    for(int i = r - 1; i >= l; i--) suf[i] = min(suf[i + 1], a[i]);\n    pre[l] = a[l];\n    for(int i = l + 1; i <= r; i++) pre[i] = min(pre[i - 1], a[i]);\n    fst[l] = a[l] < l ? l : l - 1;\n    for(int i = l + 1; i <= r; i++) fst[i] = a[i] < l ? i : fst[i - 1];\n  };\n  for(int i = n; i; i--) {\n    for(int it : buc[i]) {\n      int cur = it;\n      for(int p = it; p <= rp[blk[it]]; p++) if(a[p] <= it) a[p] = i;\n      rebuild(blk[it], i);\n    }\n    rebuild(blk[i], i);\n    for(pii it : qu[i]) {\n      int y = it.first, x = a[y], ans = y;\n      while(1) {\n        while(blk[x] < blk[y]) {\n          x = suf[min(x, pre[y])];\n          y = lp[blk[y]] - 1;\n        }\n        if(blk[y] == blk[i]) {\n          for(int p = y; p >= i; p--) {\n            if(p < x) ans = p;\n            x = min(x, a[p]);\n          }\n          break;\n        }\n        if(blk[x] == blk[y]) ans = y = fst[x], x = a[y];\n      }\n      ::ans[it.second] = ans;\n    }\n  }\n  for(int i = 1; i <= q; i++) print(ans[i]), putchar('\\n'); \n  cerr << TIME << \" ms\\n\";\n  return 0;\n}\n/*\n2022/9/21\nauthor: Alex_Wei\nstart coding at \nfinish debugging at 20:34\n*/\n```",
        "postTime": 1663826998,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF793F Julia the snail"
    }
]