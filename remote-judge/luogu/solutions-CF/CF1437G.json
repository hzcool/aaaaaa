[
    {
        "content": "Upd on 2022.4.8\uff1a\u91cd\u5199\u9898\u89e3\uff0c\u8865\u5145\u4e86\u7ebf\u6027\u5bf9\u6570\u7684\u505a\u6cd5\u3002\n\nUpd on 2022.9.3\uff1a\u4fee\u6539\u4e00\u5904\u7b14\u8bef\u3002\n\n> *XIV. [CF1437G Death DBMS](https://www.luogu.com.cn/problem/CF1437G)\n>\n> [AC \u81ea\u52a8\u673a](https://www.cnblogs.com/alex-wei/p/Common_String_Theory_Theory_automaton_related.html)\u3002\n\n\u523b\u753b\u5b50\u4e32\u7ed3\u6784\u6700\u65b9\u4fbf\u7684\u5de5\u5177\u5c31\u662f\u540e\u7f00\u5b57\u7b26\u4e32\u7ed3\u6784\u3002\u8003\u8651\u5bf9 $s_i$ \u5efa\u51fa ACAM\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u82e5 $i$ \u662f $j$ \u7684\u7956\u5148\uff0c\u5219 $i$ \u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 $t_i$ \u662f $t_j$ \u7684 border\u3002\u5e76\u4e14\uff0c\u82e5\u5c06\u5b57\u7b26\u4e32 $q$ \u653e\u5728 $s_i$ \u7684 ACAM \u4e0a\u9762\u8dd1\uff0c\u90a3\u4e48\u8dd1\u5230\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u5c31\u4f9d\u6b21\u662f $q$ \u7684\u5bf9\u5e94\u524d\u7f00\u7684\u6700\u957f\u7684\u4e0e\u67d0\u4e2a\u5355\u8bcd\u7684\u524d\u7f00\u5339\u914d\u7684\u540e\u7f00\u3002\n\n\u56e0\u6b64\uff0c\u5224\u65ad $s_i$ \u662f\u5426\u662f $q$ \u7684\u5b50\u4e32\uff0c\u53ea\u9700\u8981\u5224\u65ad\u5c06 $q$ \u6309\u5b57\u7b26\u52a0\u5165\u81ea\u52a8\u673a\u540e\u4f9d\u6b21\u5f97\u5230\u7684\u72b6\u6001 $Q_j(1\\leq j\\leq |q|)$ \u7ecf\u8fc7\u4e86 $s_i$ \u5728 fail \u6811\u4e0a\u7684\u5b50\u6811\u3002\u6216\u8005\u8bf4\uff0c\u4e3a\u4e86\u6c42\u51fa\u7b54\u6848\uff0c\u6211\u4eec\u53ea\u9700\u67e5\u8be2\u6bcf\u4e2a $Q_j$ \u5728 fail \u6811\u4e0a\u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u8868\u793a\u67d0\u4e2a\u5355\u8bcd $s_i$ \u7684\u8282\u70b9\u7684\u5bf9\u5e94\u5355\u8bcd\u7684\u6743\u503c\u7684\u6700\u5927\u503c\u3002\u6811\u5256 + \u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u6ce8\u610f\uff0c\u7531\u4e8e\u5b57\u7b26\u4e32\u53ef\u80fd\u76f8\u7b49\uff0c\u6240\u4ee5\u4e00\u4e2a\u8282\u70b9\u53ef\u80fd\u8868\u793a\u4e86\u591a\u4e2a\u5355\u8bcd\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u7528 multiset \u7ef4\u62a4\u8be5\u8282\u70b9\u8868\u793a\u5355\u8bcd\u7684\u6743\u503c\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u5982\u679c\u4e0d\u60f3\u5199\u6811\u5256\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f6c\u5b50\u6811\u6dfb\u52a0\u6743\u503c + \u5355\u70b9\u67e5\u8be2\uff0c\u8fd9\u90e8\u5206\u7528 dfs \u5e8f\u62cd\u5e73\u8f6c\u5316\u6210\u533a\u95f4\u52a0\u5165 / \u5220\u9664\u4e00\u4e2a\u6570\uff0c\u5355\u70b9\u67e5\u8be2\u88ab\u52a0\u5165\u7684\u6240\u6709\u6570\u7684\u6700\u5927\u503c\u3002\u7ebf\u6bb5\u6811 + multiset \u7ef4\u62a4\u5373\u53ef\uff08\u6ce8\u610f\uff0c\u5b50\u6811\u64cd\u4f5c\u5f31\u4e8e\u533a\u95f4\u64cd\u4f5c\uff0c\u56e0\u4e3a\u524d\u8005\u53ef\u5f52\u7ea6\u5230\u540e\u8005\uff0c\u4f46\u540e\u8005\u4e0d\u53ef\u5f52\u7ea6\u81f3\u524d\u8005\uff09\u3002[\u4ee3\u7801](https://codeforces.com/contest/1437/submission/152990355)\u3002\n\n\u4e0a\u9762\u4e24\u79cd\u65b9\u6cd5\u90fd\u662f\u7ebf\u6027\u5bf9\u6570\u5e73\u65b9\u7684\u3002\u63a5\u4e0b\u6765\u4ecb\u7ecd\u7ebf\u6027\u5bf9\u6570\u7684\u9b54\u6cd5\u3002\n\n\u5728\u7ebf\u662f\u6ca1\u5565\u524d\u9014\u7684\uff0c\u8003\u8651\u79bb\u7ebf\u628a\u95ee\u9898\u641e\u7b80\u5355\u4e00\u70b9\u3002\u79bb\u7ebf\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u77e5\u9053\u4e86\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u6743\u503c\u88ab\u4fee\u6539\u7684\u65f6\u523b\u3002\u4ece\u800c\u5f97\u5230\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 $i$\uff0c\u5b58\u5728\u82e5\u5e72\u65f6\u523b\u7684\u8fde\u7eed\u6bb5 $[l_j, r_j, v_j]$ \u4f7f\u5f97\u5728 $l_j\\sim r_j$ \u65f6\u523b\uff0c$i$ **\u5bf9\u5e94\u7684\u5355\u8bcd** \u7684\u6743\u503c\u4e3a $v_j$\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u8868\u793a\u5355\u8bcd\uff0c\u5b83\u5bf9\u7b54\u6848\u663e\u7136\u4e0d\u4f1a\u6709\u4efb\u4f55\u8d21\u732e\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u4e00\u6b21\u8be2\u95ee $q$ \u5c31\u8f6c\u5316\u4e3a\u6240\u6709 $Q_j$ \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u5355\u8bcd\u8282\u70b9 $i$ \u7684 $v_k$ \u7684\u6700\u5927\u503c\uff0c\u5176\u4e2d\u67e5\u8be2\u65f6\u523b $t\\in [l_k, r_k]$\u3002\n\n\u5b50\u6811\u9650\u5236\u548c\u533a\u95f4\u9650\u5236\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\uff0c\u524d\u8005\u62cd\u5e73\u8f6c\u5316\u4e3a\u540e\u8005\u65f6\uff0c\u533a\u95f4\u6ee1\u8db3\u975e\u5e38\u597d\u7684\u6027\u8d28\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u533a\u95f4\uff0c**\u53ea\u6709\u5305\u542b\u6216\u76f8\u79bb** \u7684\u5173\u7cfb\uff0c\u4e0d\u4f1a\u76f8\u4ea4\u3002\u5c3d\u7ba1\u7ecf\u8fc7\u79bb\u7ebf\u540e\uff0c\u6240\u6709\u77e9\u5f62\u52a0\u6570\u5728\u6240\u6709\u5355\u70b9\u67e5\u8be2\u4e4b\u524d\uff0c\u4f46\u4ecd\u7136\u96be\u4ee5\u505a\u5230\u5355 $\\log$\uff08\u751a\u81f3\u4e0d\u53ef\u80fd\uff09\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u7cbe\u5f69\u4e14\u9002\u7528\u8303\u56f4\u975e\u5e38\u5e7f\u7684\u6280\u5de7\uff0c\u90a3\u5c31\u662f **\u901a\u8fc7 dfs \u89e3\u9664\u5b50\u6811\u9650\u5236**\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167 dfs \u7684\u987a\u5e8f\u8003\u8651\u6bcf\u4e2a\u5355\u8bcd\u8282\u70b9 $i$ \u7684\u8fde\u7eed\u6bb5 $[l_j, r_j, v_j]$ \u7684\u8d21\u732e\uff0c\u5728\u8fdb\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5c06\u8d21\u732e\u52a0\u4e0a\uff0c\u79bb\u5f00\u65f6\u64a4\u9500\u3002\u8fd9\u6837\u4e00\u6765\u5b50\u6811\u9650\u5236\u5c31\u6ca1\u4e86\uff0c\u53ea\u5269\u4e0b\u65f6\u95f4\u9650\u5236 $[l_j, r_j]$\u3002\u8fd9\u662f\u5bb9\u6613\u8003\u8651\u7684\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u65f6\u95f4\u8f74\u4e0a\u7684\u533a\u95f4 checkmax \u548c\u5355\u70b9\u67e5\u8be2\u3002\u64a4\u9500\u662f\u5bb9\u6613\u7684\uff0c\u8bb0\u5f55\u8fdb\u5165\u8be5\u8282\u70b9\u65f6\u6240\u6709 $[l_j, r_j, v_j]$ \u5bf9\u7ebf\u6bb5\u6811\u7684\u4fee\u6539\u5373\u53ef\u3002\n\n\u6362\u79cd\u89d2\u5ea6\u8003\u8651\uff0c\u5bf9\u4e8e\u4e00\u822c\u7684\u77e9\u5f62\u52a0\u6570\u5355\u70b9\u67e5\u8be2\u6700\u503c\uff0c\u6211\u4eec\u901a\u8fc7\u5bf9\u4e00\u7ef4\u626b\u63cf\u7ebf\u8f6c\u5316\u4e3a\u533a\u95f4\u52a0 / \u5220\u6570\u4ee5\u53ca\u5355\u70b9\u67e5\u6700\u503c\u3002\u5220\u6570\u662f\u5f88\u4e0d\u597d\u5904\u7406\u7684\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u4f7f\u7528 multiset\u3002\u4f46\u82e5\u626b\u63cf\u7ebf\u7684\u90a3\u4e00\u7ef4 $D_1$\uff08dfs \u5e8f\u7ef4\u5ea6\uff09\u7684\u533a\u95f4\u53ea\u6709\u5305\u542b\u6216\u76f8\u79bb\u7684\u5173\u7cfb\uff0c\u90a3\u4e48\u5728 $D_1$ \u7684\u67d0\u4e2a\u533a\u95f4 $[L, R]$ \u7684\u53f3\u7aef\u70b9\uff08$[L, R]$ \u662f dfn \u533a\u95f4\uff09\u5904\u5220\u9664\u53e6\u4e00\u7ef4 $D_2$\uff08\u65f6\u95f4\u7ef4\u5ea6\uff09\u4e0a\u4e00\u6bb5\u533a\u95f4\u7684\u6570\u65f6\uff0c\u6240\u6709\u5728 $D_1$ \u4e0a\u5305\u542b\u4e8e $[L, R]$ \u7684\u533a\u95f4\u7684\u5f71\u54cd\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u6b64\u65f6\u9762\u5bf9\u7740\u521a\u597d\u52a0\u5165\u5f53\u524d\u8981\u88ab\u5220\u9664\u7684\u4e00\u6bb5\u533a\u95f4\u7684\u6570\u7684\u5c40\u9762\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ea\u9700\u8981\u64a4\u9500\u64cd\u4f5c\u800c\u975e\u5220\u9664\u3002\u53ef\u4ee5\u60f3\u8c61\u6210\u62ec\u53f7\u5e8f\u5217\u8fdb\u6808\uff08\u52a0\u5165\u8d21\u732e\uff09\u51fa\u6808\uff08\u64a4\u9500\u5f71\u54cd\uff09\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u6811\u4e0a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u79bb\u7ebf dfs \u53bb\u6389\u5f62\u5982 \u201c\u5305\u542b\u5728\u67d0\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5185\u201d \u7684\u9650\u5236\uff0c\u5e76\u5c06\u5176\u8f6c\u5316\u4e3a\u5728\u7aef\u70b9\u5904\u64a4\u9500\uff0c\u800c\u64a4\u9500\u662f trivial \u7684\u3002\u4f46\u662f\u5e8f\u5217\u95ee\u9898\u901a\u8fc7\u626b\u63cf\u7ebf\u53bb\u6389 \u201c\u5305\u542b\u5728\u67d0\u4e2a\u533a\u95f4\u5185\u201d \u7684\u9650\u5236\u540e\uff0c\u53ea\u80fd\u5728\u7aef\u70b9\u5904\u5220\u9664\uff0c\u5bf9\u4e8e **\u4e0d\u53ef\u51cf\u7684\u4fe1\u606f** \u800c\u8a00\u590d\u6742\u5ea6\u66f4\u52a3\uff08\u4f46\u5bf9\u4e8e\u53ef\u51cf\u4fe1\u606f\u5e76\u6ca1\u6709\u592a\u5927\u5dee\u522b\uff09\u3002\u6362\u8a00\u4e4b\uff0c\u5bf9\u4e8e\u5b50\u6811\u9650\u5236\uff0c\u62cd\u5e73\u5230\u5e8f\u5217\u4e0a\u540e\u9650\u5236\u533a\u95f4\u4e24\u4e24\u4e0d\u4ea4\uff0c\u8fd9\u662f\u975e\u5e38\u68d2\u7684\u6027\u8d28\u3002\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u79cd\u6280\u5de7\u6709\u5f88\u5927\u7684\u5e94\u7528\u7a7a\u95f4\uff0c\u8bfb\u8005\u9700\u8ba4\u771f\u4f53\u4f1a\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n|\\Sigma| + q\\log n)$\uff0c[\u4ee3\u7801](https://codeforces.com/contest/1437/submission/152996143)\u3002",
        "postTime": 1614998584,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1437G Death DBMS"
    },
    {
        "content": "[\u6765\u849f\u84bb\u7684\u535a\u5ba2\u56ed\u91cc\u6765\u770b/kel](https://www.cnblogs.com/zkyJuruo/p/13891633.html)\n\n\u8fd9\u9898\u611f\u89c9\u4e0d\u662f\u5f88\u96be\uff0c\u4f46\u662f\u65e2\u7136\u653e\u5728 $\\texttt{EDU}$ \u7684 $\\texttt{G}$ \u9898\uff0c\u90a3\u4e48\u8fd8\u662f\u5199\u5199\u9898\u89e3\u5427\u3002\n## $\\texttt{Solution}$\n\u9996\u5148\u770b\u5230 \"\u5b50\u4e32\"\uff0c\u90a3\u4e48\u60f3\u5230 $\\texttt{ACAM}$ \u548c $\\texttt{SAM}$\u3002\u672c\u7bc7\u9898\u89e3\u5c31\u4f7f\u7528 $\\texttt{ACAM}$\u3002\n\n\u7136\u540e\u6211\u4eec\u5148\u5bf9\u4e8e\u6700\u5f00\u59cb\u7ed9\u5b9a\u7684 $n$ \u4e2a\u4e32\u5efa\u7acb\u4e00\u4e2a $\\texttt{ACAM}$\u3002\n\n\u7136\u540e\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e32\u5728 $\\texttt{ACAM}$ \u4e0a\u5bf9\u5e94\u7684\u4f4d\u7f6e\u8d4b\u4e0a\u8fd9\u4e2a\u4e32\u7684\u503c\u3002 \n\n\u67e5\u8be2\u5176\u5b9e\u5c31\u662f\u5728 $\\texttt{fail}$ \u6811\u4e0a\u67e5\u8be2\u4e00\u4e9b\u8282\u70b9\u5230\u6839\u7684\u6700\u5927\u503c\u3002\n\n\u8fd9\u4e2a\u5176\u5b9e\u5c31\u662f\u8981\u6c42\u5728 $\\texttt{fail}$ \u6811\u4e0a\u5355\u70b9\u4fee\u6539\uff0c\u6c42\u94fe\u4e0a\u6700\u5927\u503c\u3002\u8fd9\u4e2a\u4e1c\u897f\u6811\u5256\u5f88\u597d\u7ef4\u62a4\u3002\n\n\u7136\u540e\u6ce8\u610f\u4ee5\u4e0b\u4e00\u4e2a\u7ec6\u8282\uff1a\u4e00\u4e2a\u4e32\u53ef\u80fd\u51fa\u73b0\u591a\u6b21\u3002\u8fd9\u4e2a $\\texttt{multiset}$ \u7ef4\u62a4\u4e00\u4e0b\u6700\u5927\u503c\u5c31\u597d\u4e86\n\n## $\\texttt{Code}$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define L(i, j, k) for(int i = (j), i##E = (k); i <= i##E; i++) \n#define R(i, j, k) for(int i = (j), i##E = (k); i >= i##E; i--) \n#define ll long long \n#define db double\n#define mp make_pair \nconst int N = 3e5 + 7;\nconst int M = N * 4;\nconst int inf = 1e9;\nint n, m, endid[N], VAL[N];\nint ch[N][26], fa[N], tot = 1;\nmultiset<int> st[N];\nint insert(char *s, int n) {\n    int now = 1;\n    L(i, 0, n - 1) {\n        if(!ch[now][s[i] - 'a']) ch[now][s[i] - 'a'] = ++tot;\n        now = ch[now][s[i] - 'a'];\n    }\n    return now;\n}\nvoid bfs() {\n    queue<int> q;\n    L(i, 0, 25) if(ch[1][i]) fa[ch[1][i]] = 1, q.push(ch[1][i]); else ch[1][i] = 1;\n    while(!q.empty()) {\n        int u = q.front();\n        q.pop();\n        L(i, 0, 25) {\n            int v = ch[u][i];\n            if(!v) ch[u][i] = ch[fa[u]][i];\n            else fa[v] = ch[fa[u]][i], q.push(v);\n        }\n    }\n}\nint head[N], edge_id;\nstruct node { int to, next; } e[N << 1];\nvoid add_edge(int u, int v) {\n    ++edge_id, e[edge_id].next = head[u], e[edge_id].to = v, head[u] = edge_id;\n}\nint siz[N], maxto[N], dep[N], uid[N], idtot, heavy[N];\nvoid dfs1(int x) {\n    siz[x] = 1;\n    for(int i = head[x]; i; i = e[i].next) {\n        int v = e[i].to;\n        fa[v] = x, dep[v] = dep[x] + 1, dfs1(v), siz[x] += siz[v];\n        if(siz[v] > siz[heavy[x]]) heavy[x] = v;\n    }\n}\nvoid dfs2(int x) {\n    uid[x] = ++idtot;\n    if(heavy[x]) maxto[heavy[x]] = maxto[x], dfs2(heavy[x]);\n    for(int i = head[x]; i; i = e[i].next) {\n        int v = e[i].to;\n        if(v == heavy[x]) continue;\n        maxto[v] = v, dfs2(v);\n    }\n}\nint maxn[M];\nvoid build(int x, int l, int r) { \n    maxn[x] = -1; \n    if(l == r) return; \n    int mid = (l + r) / 2;\n    build(x << 1, l, mid), build(x << 1 | 1, mid + 1, r);\n}\nvoid add(int id, int L, int R, int wz, int val) {\n    // if(id == 1) cout << wz << \" is : \" << val << endl;\n    if(L == R) return maxn[id] = val, void();\n    int mid = (L + R) / 2;\n    if(wz <= mid) add(id << 1, L, mid, wz, val);\n    else add(id << 1 | 1, mid + 1, R, wz, val);\n    maxn[id] = max(maxn[id << 1], maxn[id << 1 | 1]);\n}\nint query(int id, int L, int R, int l, int r) {\n    if(l <= L && R <= r) return maxn[id];\n    int mid = (L + R) / 2, res = -1;\n    if(l <= mid) res = max(res, query(id << 1, L, mid, l, r));\n    if(r > mid) res = max(res, query(id << 1 | 1, mid + 1, R, l, r));\n    // if(id == 1) cout << l << \" to \" << r << \"'s max = \" << res << endl;\n    return res;\n}\nint get(int x) {\n    int res = -1;\n    while(x) res = max(res, query(1, 1, tot, uid[maxto[x]], uid[x])), x = fa[maxto[x]];\n    return res;\n}\nchar s[N];\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    L(i, 1, n) scanf(\"%s\", s), endid[i] = insert(s, strlen(s));\n    bfs();\n    L(i, 2, tot) add_edge(fa[i], i);\n    dfs1(1), maxto[1] = 1, dfs2(1);\n    build(1, 1, tot);\n    L(i, 1, n) add(1, 1, tot, uid[endid[i]], 0), st[endid[i]].insert(0);\n    while(m--) {\n        int opt, x, val;\n        scanf(\"%d\", &opt);\n        if(opt == 1) {\n            scanf(\"%d%d\", &x, &val);\n            int now = endid[x];\n            st[now].erase(st[now].lower_bound(VAL[x]));\n            st[now].insert(val), VAL[x] = val;\n            add(1, 1, tot, uid[now], *st[now].rbegin());\n        }\n        else {\n            int maxn = -1, now = 1;\n            scanf(\"%s\", s);\n            L(i, 0, strlen(s) - 1) now = ch[now][s[i] - 'a'], maxn = max(maxn, get(now)); \n            printf(\"%d\\n\", maxn);\n        }\n    }\n\treturn 0;\n}\n```",
        "postTime": 1603872507,
        "uid": 173660,
        "name": "zhoukangyang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1437G \u3010Death DBMS\u3011"
    },
    {
        "content": "CF\u8d28\u91cf\u786e\u5b9e\u8d8a\u6765\u8d8a\u5dee\uff0c\u5df2\u7ecf\u5f00\u59cb\u51fa\u677f\u5b50\u9898\u4e86\u3002\n\n\u5148\u8003\u8651\u6ca1\u6709\u540d\u5b57\u91cd\u590d\u7684\u60c5\u51b5\u3002\u5148\u5efa\u90a3\u4e9b\u4eba\u540d\u5b57\u7684\u5e7f\u4e49SAM\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e2a\u540d\u5b57\u5bf9\u5e94\u7684\u7ec8\u6b62\u8282\u70b9\u3002\u8bbe\u4e00\u4e2a\u7ec8\u6b62\u8282\u70b9\u7684\u70b9\u6743\u4e3a\u90a3\u4e2a\u4eba\u7684suspicion value\uff0c\u975e\u7ec8\u6b62\u8282\u70b9\u4e3a-1.\n\n\u8003\u8651\u8be2\u95ee\u4e00\u4e2a\u4e32$S$\uff0c\u5728SAM\u4e0a\u8dd1\u5339\u914d\u627e\u5230$S$\u7684\u6bcf\u4e2a\u524d\u7f00\u7684\u5bf9\u5e94\u8282\u70b9\uff0c\u8fd9\u4e2a\u524d\u7f00\u7684\u8d21\u732e\u5c31\u662f\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u70b9\u6743\u3002\n\n\u5355\u70b9\u4fee\u6539\uff0c\u8be2\u95ee\u5230\u6839\u7684\u6700\u5927\u70b9\u6743\uff0cLCT\u76f4\u63a5\u4e0a\u5c31\u597d\u4e86\u3002\n\n\u5bf9\u4e8e\u6709\u540d\u5b57\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u8ba9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a`std::multiset`\u6216\u7ebf\u6bb5\u6811\u5c31\u884c\u3002\n\n\u590d\u6742\u5ea6$\\mathcal O(L\\log L)$\n\n```cpp\n/**********/\n#define MAXN 600011\nstruct SAM\n{\n    int t[MAXN][26],pre[MAXN],len[MAXN];\n    int last,tot;\n    SAM(){last=tot=1;}\n    void extend(int w)\n    {\n        if(t[last][w])\n        {\n            int nxt=t[last][w];\n            if(len[nxt]==len[last]+1)last=nxt;\n            else\n            {\n                int tmp=++tot;\n                len[tmp]=len[last]+1,memcpy(t[tmp],t[nxt],sizeof t[nxt]);\n                pre[tmp]=pre[nxt],pre[nxt]=tmp;\n                while(last&&t[last][w]==nxt)t[last][w]=tmp,last=pre[last];\n                last=tmp;\n            }\n            return;\n        }\n        int pos=last,cur=++tot;\n        len[cur]=len[pos]+1,last=cur;\n        while(pos&&!t[pos][w])t[pos][w]=cur,pos=pre[pos];\n        if(!pos){pre[cur]=1;return;}\n        int nxt=t[pos][w];\n        if(len[nxt]==len[pos]+1)pre[cur]=nxt;\n        else\n        {\n            int tmp=++tot;\n            len[tmp]=len[pos]+1,memcpy(t[tmp],t[nxt],sizeof t[nxt]);\n            pre[tmp]=pre[nxt],pre[cur]=pre[nxt]=tmp;\n            while(pos&&t[pos][w]==nxt)t[pos][w]=tmp,pos=pre[pos];\n        }\n    }\n}sam;\nstruct LCT\n{\n    int fa[MAXN],son[MAXN][2],f[MAXN];\n    std::multiset<int>val[MAXN];\n    void init(){f[0]=-1; for(int i=1;i<=sam.tot;++i)fa[i]=sam.pre[i],f[i]=-1;}\n    bool not_root(int x){return son[fa[x]][0]==x||son[fa[x]][1]==x;}\n    void pushup(int x){f[x]=max(*val[x].rbegin(),max(f[son[x][0]],f[son[x][1]]));}\n    void rotate(int x)\n    {\n        int y=fa[x],z=fa[y],k=(son[y][1]==x);\n        if(not_root(y))son[z][son[z][1]==y]=x;\n        fa[x]=z;\n        son[y][k]=son[x][!k],fa[son[x][!k]]=y;\n        son[x][!k]=y,fa[y]=x;\n        pushup(y);\n    }\n    void splay(int x)\n    {\n        while(not_root(x))\n        {\n            int y=fa[x];\n            if(not_root(y))rotate((son[y][1]==x)==(son[fa[y]][1]==y)?y:x);\n            rotate(x);\n        }\n        pushup(x);\n    }\n    void access(int x)\n    {\n        for(int y=0;x;y=x,x=fa[x])\n            splay(x),son[x][1]=y;\n    }\n    int Query(int x){access(x),splay(x);return f[x];}\n    void add(int x,int k){access(x),splay(x);val[x].insert(k),pushup(x);}\n    void modify(int x,int pre,int k){access(x),splay(x),val[x].erase(val[x].find(pre)),val[x].insert(k);pushup(x);}\n}lct;\nchar s[MAXN];\nint ed[MAXN],a[MAXN];\nint main()\n{\n    int n=read(),m=read();\n    for(int x=1;x<=n;++x)\n    {\n        scanf(\"%s\",s+1);\n        int l=strlen(s+1);\n        sam.last=1;\n        for(int j=1;j<=l;++j)sam.extend(s[j]-'a');\n        ed[x]=sam.last;\n    }\n    lct.init();\n    for(int i=1;i<=n;++i)lct.val[ed[i]].insert(0);\n    for(int i=1;i<=sam.tot;++i)\n        if(lct.val[i].empty())lct.val[i].insert(-1);\n    while(m--)\n    {\n        int op=read();\n        if(op==1)\n        {\n            int x=read(),k=read();lct.modify(ed[x],a[x],k),a[x]=k;\n        }\n        else\n        {\n            scanf(\"%s\",s+1);\n            int l=strlen(s+1),u=1,nowlen=0,res=-1;\n            for(int i=1;i<=l;++i)\n            {\n                while(u&&!sam.t[u][s[i]-'a'])u=sam.pre[u],nowlen=sam.len[u];\n                if(!u)u=1,nowlen=0;\n                else u=sam.t[u][s[i]-'a'],++nowlen;\n                if(nowlen!=sam.len[u])umax(res,lct.Query(sam.pre[u]));\n                else umax(res,lct.Query(u));\n            }\n            printf(\"%d\\n\",res);\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1603853912,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1437G \u3010Death DBMS\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa $n$ \u4e2a\u5b57\u7b26\u4e32\u548c $m$ \u4e2a\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u5176\u521d\u59cb\u503c\u4e3a $0$\u3002\u8fd9 $m$ \u4e2a\u64cd\u4f5c\u5206\u4e3a $2$ \u79cd\uff1a\n- 1 x k\uff1a\u5c06\u7b2c $x$ \u4e2a\u5b57\u7b26\u4e32\u7684\u6743\u503c\u4fee\u6539\u4e3a $k$\u3002\n\n- 2 q\uff1a\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32 $q$\uff0c\u6c42\u6240\u6709\u662f $q$ \u7684\u5b50\u4e32\u7684\u5b57\u7b26\u4e32\u7684\u6743\u503c\u7684\u6700\u5927\u503c\u3002\n\n## \u601d\u8def\n\n\u6211\u4eec\u5bf9\u8fd9 $n$ \u4e2a\u5b57\u7b26\u4e32\u5efa\u7acb\u4e00\u4e2a AC \u81ea\u52a8\u673a\uff0c\u6309 fail \u6307\u9488\u5efa\u4e00\u9897 fail \u6811\uff0c\u5b9a\u4e49\u6bcf\u4e2a\u8282\u70b9\u6743\u503c\u662f\u5176\u6240\u6709\u7956\u5148\uff08\u5305\u62ec\u5b83\u672c\u8eab\uff09\u7684\u5b57\u7b26\u4e32\u7684\u6743\u503c\u7684\u6700\u5927\u503c\u3002\u90a3\u4e48\uff0c\u5bf9\u4e8e\u64cd\u4f5c $2$\uff0c\u6bcf\u6b21\u5728\u5b57\u5178\u6811\u4e0a\u904d\u5386\u5b57\u7b26\u4e32 $q$\uff0c\u6c42\u51fa\u5176\u904d\u5386\u5230\u7684\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u7684\u6700\u5927\u503c\u5c31\u662f\u7b54\u6848\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u5c06 fail \u6811\u6309 dfs \u5e8f\u538b\u6210 $1$ \u7ef4\u5e76\u5bf9\u5176\u5efa\u7acb\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u7528 multiset \u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u7684\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u7684\u6700\u5927\u503c\u3002\u6bcf\u6539\u53d8\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\uff0c\u5c31\u4ee4\u7ebf\u6bb5\u6811\u4e0a\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u533a\u95f4\u4e2d\u6240\u6709 multiset \u5220\u9664\u4fee\u6539\u524d\u7684\u6743\u503c\u5e76\u52a0\u5165\u4fee\u6539\u540e\u7684\u503c\uff0c\u6ce8\u610f\u4e0d\u8981\u628a multiset \u4e2d\u7684\u503c\u5411\u4e0b\u4f20\u9012\u3002\u67e5\u8be2\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\uff0c\u5c31\u6c42\u51fa\u6240\u6709\u5305\u542b\u8fd9\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u7684 multiset \u4e2d\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n\tint read_result=0,is_below_0=0;\n\tchar now_ch=0;\n\twhile(!isdigit(now_ch))\n\t{\n\t\tis_below_0|=now_ch=='-';\n\t\tnow_ch=getchar();\n\t}\n\twhile(isdigit(now_ch))\n\t{\n\t\tread_result=(read_result<<3)+(read_result<<1)+(now_ch^48);\n\t\tnow_ch=getchar();\n\t}\n\treturn is_below_0?-read_result:read_result;\n}\ninline void write(int x)\n{\n\tif(x<0)\n\t{\n\t\tputchar('-');\n\t\tx=-x;\n\t}\n\tif(x>9) write(x/10);\n\tputchar(x%10+'0');\n}\nint n,m,tr[300005][26],tot,fail[300005],id[300005],dfn[300005],cnt,sz[300005],lst[300005];\nmultiset<int>t[1200005];\nvector<int>s[300005];\ninline void insert(string s,int num)\n{\n\tint o=0;\n\tfor(int i=0;i<s.size();++i)\n\t{\n\t\tif(!tr[o][s[i]-'a']) tr[o][s[i]-'a']=++tot;\n\t\to=tr[o][s[i]-'a'];\n\t}\n\tid[num]=o;\n}\ninline void build()\n{\n\tqueue<int>q;\n\tfor(int i=0;i<26;++i) if(tr[0][i]) q.push(tr[0][i]);\n\twhile(q.size())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\ts[fail[u]].push_back(u);\n\t\tfor(int i=0;i<26;++i)\n\t\t{\n\t\t\tif(tr[u][i])\n\t\t\t{\n\t\t\t\tfail[tr[u][i]]=tr[fail[u]][i];\n\t\t\t\tq.push(tr[u][i]);\n\t\t\t}\n\t\t\telse tr[u][i]=tr[fail[u]][i];\n\t\t}\n\t}\n}\ninline void dfs(int u)\n{\n\tsz[u]=1;\n\tdfn[u]=++cnt;\n\tfor(int i=0;i<s[u].size();++i)\n\t{\n\t\tint v=s[u][i];\n\t\tdfs(v);\n\t\tsz[u]+=sz[v];\n\t}\n}\ninline void update(int o,int l,int r,int x,int y,int k1,int k2)\n{\n\tif(x<=l&&r<=y)\n\t{\n\t\tt[o].insert(k1);\n\t\tif(k2>=0) t[o].erase(t[o].find(k2));\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid) update(o<<1,l,mid,x,y,k1,k2);\n\tif(y>mid) update(o<<1|1,mid+1,r,x,y,k1,k2);\n}\ninline int query(int o,int l,int r,int x)\n{\n\tif(l==r)\n\t{\n\t\tif(t[o].empty()) return -1;\n\t\treturn *--t[o].end();\n\t}\n\tint mid=(l+r)>>1,res=-1;\n\tif(t[o].size()) res=*--t[o].end();\n\tif(x<=mid) return max(res,query(o<<1,l,mid,x));\n\treturn max(res,query(o<<1|1,mid+1,r,x));\n}\ninline int getmax(string s)\n{\n\tint o=0,res=-1;\n\tfor(int i=0;i<s.size();++i)\n\t{\n\t\to=tr[o][s[i]-'a'];\n\t\tres=max(res,query(1,1,cnt,dfn[o]));\n\t}\n\treturn res;\n}\nint main()\n{\n\tn=read();\n\tm=read();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tstring s;\n\t\tcin>>s;\n\t\tinsert(s,i);\n\t}\n\tbuild();\n\tdfs(0);\n\tfor(int i=1;i<=n;++i) update(1,1,cnt,dfn[id[i]],dfn[id[i]]+sz[id[i]]-1,0,-1);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint op=read();\n\t\tif(op==1)\n\t\t{\n\t\t\tint i=read(),x=read();\n\t\t\tupdate(1,1,cnt,dfn[id[i]],dfn[id[i]]+sz[id[i]]-1,x,lst[i]);\n\t\t\tlst[i]=x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstring s;\n\t\t\tcin>>s;\n\t\t\twrite(getmax(s));\n\t\t\tputs(\"\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1663211075,
        "uid": 488734,
        "name": "wrzSama",
        "ccfLevel": 7,
        "title": "CF1437G Death DBMS \u9898\u89e3"
    },
    {
        "content": "### \u6b63\u9898\n\n\u9996\u5148\uff0c\u6839\u636e\u4e00\u4e2a\u7ed3\u8bba\uff0c\u4e00\u4e2a\u4e32\u6240\u5305\u542b\u7684\u5b50\u4e32\u7684\u96c6\u5408\u7b49\u4e8e\u5b83\u5728 AC \u81ea\u52a8\u673a\u4e0a\u7ecf\u8fc7\u7684\u6240\u6709\u70b9\u5230\u6839\u7684\u8def\u5f84\u6240\u4ee3\u8868\u7684\u4e32\u7684\u5e76\u96c6\u3002\uff08\u53ef\u4ee5\u81ea\u884c\u753b\u56fe\u7406\u89e3\uff09\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb fail \u6811\uff0c\u90a3\u4e48\u64cd\u4f5c $1$ \u76f8\u5f53\u4e8e\u6811\u4e0a\u5355\u70b9\u4fee\u6539\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $2$\uff0c\u6211\u4eec\u5c06\u8be2\u95ee\u7684\u4e32\u653e\u5165 AC \u81ea\u52a8\u673a\u4e2d\u5339\u914d\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ecf\u8fc7\u7684\u8282\u70b9\u6c42\u5b83\u5230 $0$ \u53f7\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\uff0c\u6700\u540e\u5bf9\u4e8e\u8fd9\u4e9b\u6700\u5927\u503c\u518d\u53d6\u6700\u5927\u5373\u53ef\u3002\n\n\u7279\u522b\u5730\uff0c\u5982\u679c\u7ecf\u8fc7\u7684\u70b9\u5f53\u4e2d\u6ca1\u6709\u5305\u542b\u4efb\u4f55\u6587\u672c\u4e32\uff0c\u7b54\u6848\u4e3a $-1$\u3002\u800c\u8fd9\u53ef\u4ee5\u5728\u6c42 fail \u65f6\u987a\u4fbf\u6c42\u51fa\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5c55\u5f00\u8bb2\u4e86\u3002\n\n\u4f46\u8fd9\u9898\u6709\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u5730\u65b9\uff0c\u90a3\u5c31\u662f\u53ef\u80fd\u6709\u591a\u4e2a\u91cd\u590d\u7684\u6587\u672c\u4e32\uff0c\u5728\u4fee\u6539\u7684\u65f6\u5019\uff0c\u5355\u70b9\u4fee\u6539\u7684\u6743\u503c\u8981\u53d6\u8fd9\u4e9b\u6587\u672c\u4e32\u6743\u503c\u7684\u6700\u5927\u503c\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u7ed3\u675f\u8282\u70b9\u5728\u540c\u4e00\u4e2a\u70b9\u4e0a\u7684\u6587\u672c\u4e32\u770b\u505a\u4e00\u4e2a\u533a\u95f4\uff0c\u628a\u6240\u6709\u533a\u95f4\u538b\u7f29\u5230\u4e00\u4e2a\u7ebf\u6bb5\u6811\u91cc\uff0c\u53ea\u8981\u7ef4\u62a4\u5355\u70b9\u52a0\uff0c\u533a\u95f4\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u7528\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u5982\u679c\u5bf9\u4e8e\u4e0a\u8ff0\u5185\u5bb9\u4e0d\u7406\u89e3\uff0c\u53ef\u4ee5\u7ed3\u5408\u4ee3\u7801\u7406\u89e3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\Theta(q\\log n+q\\log^2\\sum|S|)$\uff0c\u867d\u7136\u4e0d\u662f\u5f88\u4f18\u79c0\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\nCode:\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <algorithm>\n#include <vector>\n#define lc(o) (o << 1) \n#define rc(o) (o << 1 | 1)\nusing namespace std ;\nconst int MAXN = 3e5 + 10 ;\nint n , q , trie[MAXN][30] , fail[MAXN] , tot , vis[MAXN] , vv[MAXN] ;\nint dep[MAXN] , sz[MAXN] , h[MAXN] , f[MAXN] , fir[MAXN] , tt ; \nint tp[MAXN] , id[MAXN] , cnt ;\nchar s[MAXN] ;\nstruct edge {\n\tint to , nxt ;\n} e[MAXN] ;\nstruct sgt {\n\tint mx ;\n\tsgt () {mx = 0 ;}\n} t[MAXN << 2] , t2[MAXN << 2] ;\nint idd[MAXN] , ccnt , lp[MAXN] , rp[MAXN] ;\nvoid add (int u , int v) {\n\te[++tt].to = v ;\n\te[tt].nxt = fir[u] ;\n\tfir[u] = tt ; \n}\nvector <int> G[MAXN] ;\nvoid insert (int x) {\n\tint len = strlen (s + 1) , nw = 0 ;\n\tfor (int i = 1 ; i <= len ; i++) {\n\t\tint p = s[i] - 'a' ;\n\t\tif (!trie[nw][p]) trie[nw][p] = ++tot ;\n\t\tnw = trie[nw][p] ;\n\t}\n\tvis[x] = nw ;\n\tvv[nw] = 1 ;\n\tG[nw].push_back (x) ; \n}\nvoid work () {\n\tfail[0] = 0 ;\n\tqueue <int> q ;\n\tfor (int i = 0 ; i < 26 ; i++)\n\t\tif (trie[0][i]) {\n\t\t\tq.push (trie[0][i]) ;\n\t\t\tfail[trie[0][i]] = 0 ;\n\t\t}\n\twhile (!q.empty ()) {\n\t\tint x = q.front () ;\n\t\t//printf (\"%d %d\\n\" , x , fail[x]) ;\n\t\tq.pop () ; add (fail[x] , x) ;\n\t\tfor (int i = 0 ; i < 26 ; i++)\t{\n\t\t\tif (trie[x][i]) {\n\t\t\t\tfail[trie[x][i]] = trie[fail[x]][i] ;\n\t\t\t\tvv[trie[x][i]] |= vv[trie[fail[x]][i]] ;\n\t\t\t\tq.push (trie[x][i]) ;\n\t\t\t}\n\t\t\telse trie[x][i] = trie[fail[x]][i] ;\n\t\t}\n\t}\n}\nvoid dfs (int x , int fa) {\n\tdep[x] = dep[fa] + 1 ; sz[x] = 1 ; f[x] = fa ;\n\tint tmp = -1 ;\n\tfor (int i = fir[x] ; i ; i = e[i].nxt) {\n\t\tint v = e[i].to ; dfs (v , x) ;\n\t\tsz[x] += sz[v] ;\n\t\tif (sz[v] > tmp)\n\t\t\ttmp = sz[v] , h[x] = v ; \n\t}\n}\nvoid dfs2 (int x , int fa) {\n\ttp[x] = fa ; id[x] = ++cnt ;\n\tif (h[x] != -1) dfs2 (h[x] , fa) ;\n\tfor (int i = fir[x] ; i ; i = e[i].nxt) {\n\t\tint v = e[i].to ;\n\t\tif (v != h[x]) dfs2 (v , v) ;\n\t}\n}\nint lca (int x , int y) {\n\twhile (tp[x] != tp[y]) {\n\t\tif (dep[tp[x]] < dep[tp[y]]) swap (x , y) ;\n\t\tx = f[tp[x]] ;\n\t}\n\treturn dep[x] < dep[y] ? x : y ;\n}\nvoid push_up (int o) {\n\tt[o].mx = max (t[lc(o)].mx , t[rc(o)].mx) ;\n}\nvoid upd (int o , int l , int r , int x , int k) {\n\tif (l == r) {\n\t\tt[o].mx = k ;\n\t\treturn ;\n\t}\n\tint mid = l + r >> 1 ;\n\tif (x <= mid) upd (lc(o) , l , mid , x , k) ;\n\telse upd (rc(o) , mid + 1 , r , x , k) ;\n\tpush_up (o) ;\n}\nint query (int o , int l , int r , int x , int y) {\n\tif (x <= l && r <= y) return t[o].mx ;\n\tint mid = l + r >> 1 ;\n\tif (y <= mid) return query (lc(o) , l , mid , x , y) ;\n\tif (mid < x) return query (rc(o) , mid + 1 , r , x , y) ;\n\treturn max (query (lc(o) , l , mid , x , y) , query (rc(o) , mid + 1 , r , x , y)) ;\n}\nint qmx (int x , int y) {\n\tint ret = 0 ;\n\twhile (tp[x] != tp[y]) {\n\t\tif (dep[tp[x]] < dep[tp[y]]) swap (x , y) ;\n\t\tret = max (ret , query (1 , 1 , cnt , id[tp[x]] , id[x])) ;\n\t\tx = f[tp[x]] ;\n\t}\n\tif (dep[x] > dep[y]) swap (x , y) ;\n\tret = max (ret , query (1 , 1 , cnt , id[x] , id[y])) ;\n\treturn ret ;\n}\nvoid u2 (int o , int l , int r , int x , int k) {\n\tif (l == r) {\n\t\tt2[o].mx = k ;\n\t\treturn ;\n\t}\n\tint mid = l + r >> 1 ;\n\tif (x <= mid) u2 (lc(o) , l , mid , x , k) ;\n\telse u2 (rc(o) , mid + 1 , r , x , k) ;\n\tt2[o].mx = max (t2[lc(o)].mx , t2[rc(o)].mx) ; \n}\nint q2 (int o , int l , int r , int x , int y) {\n\tif (x <= l && r <= y) return t2[o].mx ;\n\tint mid = l + r >> 1 ;\n\tif (y <= mid) return q2 (lc(o) , l , mid , x , y) ;\n\tif (mid < x) return q2 (rc(o) , mid + 1 , r , x , y) ;\n\treturn max (q2 (lc(o) , l , mid , x , y) , q2 (rc(o) , mid + 1 , r , x , y)) ;\n}\nint main () {\n\tscanf (\"%d %d\" , &n , &q) ;\n\tfor (int i = 1 ; i <= n ; i++)\n\t\tscanf (\"%s\" , s + 1) , insert (i) ;\n\tfor (int i = 0 ; i <= tot ; i++) {\n\t\tlp[i] = ccnt + 1 ; \n\t\tfor (int j = 0 ; j < G[i].size () ; j++)\n\t\t\tidd[G[i][j]] = ++ccnt ;\n\t\trp[i] = ccnt ;\n\t}\n\twork () ; \n\tmemset (h , -1 , sizeof (h)) ;\n\tdfs (0 , 0) ; dfs2 (0 , 0) ;\n\twhile (q--) {\n\t\tint opt , x , y ;\n\t\tscanf (\"%d\" , &opt) ;\n\t\tif (opt == 1) {\n\t\t\tscanf (\"%d %d\" , &x , &y) ;\n\t\t\tu2 (1 , 1 , n , idd[x] , y) ;\n\t\t\tint tmp = q2 (1 , 1 , n , lp[vis[x]] , rp[vis[x]]) ;\n\t\t\tupd (1 , 1 , cnt , id[vis[x]] , tmp) ; \n\t\t}\n\t\telse {\n\t\t\tscanf (\"%s\" , s + 1) ;\n\t\t\tint nw = 0 , ls = strlen (s + 1) , ret = -1 ;\n\t\t\tbool flag = 0 ;\n\t\t\tfor (int i = 1 ; i <= ls ; i++) {\n\t\t\t\tint p = s[i] - 'a' ;\n\t\t\t\tnw = trie[nw][p] ;\n\t\t\t\t//printf (\"%d\\n\" , nw) ;\n\t\t\t\tif (vv[nw]) flag = 1 ;\n\t\t\t\tret = max (ret , qmx (nw , 0)) ;\n\t\t\t\t//printf (\"%d\\n\" , ret) ;\n\t\t\t}\n\t\t\tprintf (\"%d\\n\" , flag ? ret : -1) ;\n\t\t}\n//\t\tfor (int i = 0 ; i <= tot ; i++)\n//\t\t\tprintf (\"%d \" , query (1 , 1 , cnt , id[i] , id[i])) ;\n//\t\tprintf (\"\\n\") ;\n\t}\n\treturn 0 ;\n}\n```",
        "postTime": 1643702964,
        "uid": 122641,
        "name": "GIFBMP",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1437G \u3010Death DBMS\u3011"
    },
    {
        "content": "\u7ed9\u51fa $n$ \u4e2a\u5b57\u7b26\u4e32 $s_i$\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6700\u521d\u6743\u503c\u90fd\u4e3a $0$\u3002$q$ \u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\n- \u5c06\u7b2c $i$ \u4e2a\u5b57\u7b26\u4e32\u7684\u6743\u503c\u4fee\u6539\u4e3a $x$\u3002\n- \u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32 $t_i$\uff0c\u6c42\u6240\u6709\u662f $t_i$ \u7684\u5b50\u4e32\u7684\u5b57\u7b26\u4e32\u7684\u6743\u503c\u6700\u5927\u503c\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4e3a $-1$\u3002\n\n$1\\le n,m\\le3\\times10^5$\uff0c$\\sum|s_i|,\\sum|t_i|\\le3\\times10^5$\u3002\n\n---\n~~\u5927\u5bb6\u597d\u6211\u5f88\u559c\u6b22\u66b4\u529b\u6240\u4ee5\u6211\u7528\u6839\u53f7\u505a\u6cd5\u901a\u8fc7\u4e86\u6b64\u9898\u3002~~  \n\u8bbe $S=\\sum|s_i|$\uff0c$T=\\sum|t_i|$\u3002\u4e00\u4e2a\u66b4\u529b\u7684\u60f3\u6cd5\u662f\u679a\u4e3e $t_i$ \u7684\u6240\u6709\u5b50\u4e32\uff0c\u5224\u65ad\u662f\u5426\u51fa\u73b0\uff0c\u53ef\u4ee5\u5728 Trie \u6811\u4e0a\u67e5\u8be2\u3002Trie \u6811\u7684\u7ed3\u675f\u7ed3\u70b9\u7528 `std::multiset` \u8bb0\u5f55\u6743\u503c\uff0c\u4fee\u6539\u662f $O(m\\log n)$ \u7684\u4e0d\u6210\u95ee\u9898\uff0c\u8fd9\u6837\u5355\u6b21\u67e5\u8be2\u662f $O(|t_i|^2)$ \u7684\uff0c\u4e8e\u662f\u8003\u8651\u6839\u53f7\u5206\u6cbb\u3002\u8bbe\u9608\u503c\u4e3a $B$\uff0c\u5f53 $|t_i|\\le B$ \u65f6\u66b4\u529b\uff0c\u6839\u636e\u4e0d\u7b49\u5f0f\u53ef\u4ee5\u77e5\u9053\u6700\u574f\u60c5\u51b5 $O(BT)$\uff1b\u5f53 $|t_i|>B$ \u65f6\uff0c\u8fd9\u6837\u7684\u60c5\u51b5\u6700\u591a\u53ea\u4f1a\u51fa\u73b0 $\\dfrac{T}{B}$ \u6b21\uff0c\u8003\u8651\u679a\u4e3e $s$ \u5224\u65ad\u662f\u5426\u662f $t_i$ \u7684\u5b50\u4e32\u3002\u8981\u6c42\u5224\u65ad\u5b50\u4e32\u7684\u590d\u6742\u5ea6\u4e0e $|t_i|$ \u65e0\u5173\uff0c\u53ef\u4ee5\u60f3\u5230\u5bf9 $t_i$ \u5efa\u7acb SAM\uff0c\u5355\u6b21\u590d\u6742\u5ea6\u5c31\u662f $O(S+|t_i|)$\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O\\left(BT+S\\times\\dfrac{T}{B}\\right)$\uff0c\u53d6 $B=\\sqrt{S}$\uff0c\u5219\u4e3a $O(T\\sqrt{S})$\u3002\n\n\u5b9e\u8df5\u6bd4\u5927\u591a\u6570 log \u505a\u6cd5\u5feb\u3002\n```cpp\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <set>\n#include <string>\ntemplate <typename T>\nvoid checkmax(T &x, T y) {\n  if (x < y) x = y;\n}\ntemplate <typename T>\nvoid checkmin(T &x, T y) {\n  if (x > y) x = y;\n}\nint n, q, a[300001], ch[300001][26], tot, ed[300001], id[300001], cnt;\nstd::string s[300001], t;\nstd::multiset<int, std::greater<int>> st[300001];\nbool vis[300001];\nvoid Insert(const std::string s, int x) {\n  int now = 0;\n  for (const auto &c : s) {\n    if (!ch[now][c - 'a']) ch[now][c - 'a'] = ++tot;\n    now = ch[now][c - 'a'];\n  }\n  vis[ed[x] = now] = true;\n  if (!id[now]) id[now] = ++cnt;\n  st[id[now]].emplace(0);\n}\nclass SuffixAutomaton {\n private:\n  struct Node {\n    int len, link, nxt[26];\n  } t_[600001];\n  int sz_, last_;\n\n public:\n  SuffixAutomaton() { t_[0].link = -1; }\n  void Clear() {\n    for (int i = 0; i <= sz_; i++)\n      t_[i].len = t_[i].link = 0, std::memset(t_[i].nxt, 0, sizeof(t_[i].nxt));\n    sz_ = last_ = 0, t_[0].link = -1;\n  }\n  void Expand(char c) {\n    int cur = ++sz_, p = last_;\n    t_[cur].len = t_[last_].len + 1;\n    while (p != -1 && !t_[p].nxt[c - 'a'])\n      t_[p].nxt[c - 'a'] = cur, p = t_[p].link;\n    if (p == -1) {\n      t_[cur].link = 0;\n    } else {\n      int q = t_[p].nxt[c - 'a'];\n      if (t_[q].len == t_[p].len + 1) {\n        t_[cur].link = q;\n      } else {\n        int nq = ++sz_;\n        t_[nq].len = t_[p].len + 1, t_[nq].link = t_[q].link;\n        std::memcpy(t_[nq].nxt, t_[q].nxt, sizeof(t_[q].nxt));\n        while (p != -1 && t_[p].nxt[c - 'a'] == q)\n          t_[p].nxt[c - 'a'] = nq, p = t_[p].link;\n        t_[cur].link = t_[q].link = nq;\n      }\n    }\n    last_ = cur;\n  }\n  bool Find(const std::string &s) {\n    int now = 0;\n    for (const auto &c : s) {\n      if (!t_[now].nxt[c - 'a']) return false;\n      now = t_[now].nxt[c - 'a'];\n    }\n    return true;\n  }\n  ~SuffixAutomaton() {}\n} sam;\nint main(int argc, char const *argv[]) {\n  std::ios_base::sync_with_stdio(false);\n  std::cin.tie(nullptr), std::cout.tie(nullptr);\n  std::cin >> n >> q;\n  std::size_t B = 0;\n  for (int i = 1; i <= n; i++) std::cin >> s[i], B += s[i].size();\n  for (int i = 1; i <= n; i++) Insert(s[i], i);\n  B = std::sqrt(B);\n  while (q--) {\n    int op;\n    std::cin >> op;\n    if (op == 1) {\n      int x, y;\n      std::cin >> x >> y;\n      st[id[ed[x]]].erase(st[id[ed[x]]].find(a[x]));\n      st[id[ed[x]]].emplace(a[x] = y);\n    } else {\n      std::cin >> t;\n      int ans = -1;\n      if (t.size() <= B) {\n        for (std::size_t i = 0; i < t.size(); i++) {\n          int now = 0;\n          for (std::size_t j = i; j < t.size(); j++) {\n            if (!ch[now][t[j] - 'a']) break;\n            now = ch[now][t[j] - 'a'];\n            if (vis[now]) checkmax(ans, *st[id[now]].begin());\n          }\n        }\n      } else {\n        sam.Clear();\n        for (const auto &c : t) sam.Expand(c);\n        for (int i = 1; i <= n; i++)\n          if (sam.Find(s[i])) checkmax(ans, *st[id[ed[i]]].begin());\n      }\n      std::cout << ans << '\\n';\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1644070072,
        "uid": 68273,
        "name": "xyf007",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1437G \u3010Death DBMS\u3011"
    },
    {
        "content": "\u6765\u4e00\u4e2a\u540e\u7f00\u6570\u7ec4\u7684\u505a\u6cd5\u3002\n\n\u79bb\u7ebf\uff0c\u628a\u6240\u6709\u7684\u6a21\u677f\u4e32\u548c\u8be2\u95ee\u4e32\u4f7f\u7528\u7279\u6b8a\u5b57\u7b26\u8fde\u63a5\u8d77\u6765\u641e\u4e2a\u5927\u4e32\uff0c\u7136\u540e\u6c42\u51fa\u5176\u540e\u7f00\u6570\u7ec4\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6a21\u677f\u4e32\uff0c\u8003\u8651\u5176\u5728\u540e\u7f00\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e$rk[i]$\uff0c\u663e\u7136\uff0c\u4ee5\u5b83\u4e3a\u524d\u7f00\u7684\u6240\u6709\u5927\u4e32\u7684\u540e\u7f00\uff08\u540e\u7f00\u7684\u524d\u7f00\u5c31\u662f\u5b50\u4e32\uff09\u662f\u5176\u5728\u540e\u7f00\u6570\u7ec4\u4e0a\u7684\u4e00\u4e2a\u90bb\u57df\u533a\u95f4$[rk[i]-a,rk[i]+b]$\uff0c\u53ef\u4ee5\u901a\u8fc7\u540e\u7f00\u7684LCP\uff0c\u4e8c\u5206\u51fa\u8fd9\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u4f7f\u7528\u7ebf\u6bb5\u6811\u5957\u5806\u53bb\u8fd9\u4e2a\u533a\u95f4\u5185\u6574\u4f53\u5c06\u5176\u7684\u6743\u503cpush\u8fdb\u53bb\uff0c\u4e5f\u53ef\u4ee5\u66f4\u65b0\u6743\u503c\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u4e32\uff0c\u679a\u4e3e\u5b83\u5bf9\u5e94\u7684\u6240\u6709\u540e\u7f00\uff0c\u7136\u540e\u53bb\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u503c\u5373\u53ef\uff0c\u6b64\u65f6\u7ebf\u6bb5\u6811\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u5806\u91cc\u9762\u5b58\u7684\u5c31\u662f\u6240\u6709\u4ee5\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a\u8d77\u70b9\u7684\u6a21\u677f\u5b50\u4e32\u7684\u503c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5199\u540e\u7f00\u6392\u5e8f+ST\u8868+\u7ebf\u6bb5\u6811\u5957\u5806\u5373\u53ef\u3002\u6ce8\u610f\u62fc\u51d1\u5927\u4e32\u7684\u65f6\u5019\u8981\u5f004\u500d\u7a7a\u95f4\u3002\n\n\u65f6\u95f4$O(n\\log^2n)$\uff0c\u7a7a\u95f4$O(n\\log n)$\u3002\n\n\uff08\u987a\u5e26\u4e00\u63d0\u2026\u20262019\u5e74\u7684\u5341\u4e8c\u7701\u8054\u8003\u7684D1T2\u548c\u6b64\u9898\u8f83\u4e3a\u76f8\u4f3c\uff0c\u6211\u5f53\u65f6\u5728\u8003\u573a\u4e0a\u5199\u7684\u662f\u548c\u6b64\u9898\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\u7684\u505a\u6cd5\uff0c~~\u4f46\u662f\u5b83\u5199\u6302\u4e86\u2026\u2026~~\uff09\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define N 400010\nusing namespace std;\nnamespace ywy{\n\tinline int get(){\n\t\tint n=0;char c;while((c=getchar())||23333)if(c>='0'&&c<='9')break;\n\t\tn=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\n\t\t}\n\t}char s[N];unsigned char bv[N*3];int st[N*3][21],gch='z'+1;\n\tinline int sget(){\n\t\tint n=1;char c;while((c=getchar())||2333)if(c>='a'&&c<='z')break;\n\t\ts[n]=c;n++;while((c=getchar())||23333){\n\t\t\tif(c>='a'&&c<='z')s[n]=c,n++;else return(n-1);\n\t\t}\n\t}int str[N*3],sa[N*3],rk[N*3],h[N*3],height[N*3],trk[N*3],tsa[N*3],lst[N*3],lstcnt[N*3];\n\ttypedef struct _h{\n\t\tpriority_queue<int> me,del;\n\t\tinline void wh(){while(!me.empty()&&!del.empty()&&me.top()==del.top())me.pop(),del.pop();}\n\t\tvoid push(int x){me.push(x);}\n\t\tvoid erase(int x){del.push(x);}\n\t\tint top(){wh();if(me.empty())return(-1);return(me.top());}\n\t}heap;heap que[N*6];int lef[N*6],rgh[N*6],gn=1;\n\tint build(int l,int r){\n\t\tint me=gn;gn++;if(l==r)return(me);int mid=(l+r)>>1;\n\t\tlef[me]=build(l,mid);rgh[me]=build(mid+1,r);return(me);\t\n\t}int pt,x,y;\n\tvoid push(int rl,int rr,int l,int r,int tree){\n\t\tif(rl==l&&rr==r){\n\t\t\tif(y!=-1)que[tree].erase(y);\n\t\t\tque[tree].push(x);return;\n\t\t}int mid=(l+r)>>1;if(rl>mid)push(rl,rr,mid+1,r,rgh[tree]);else{\n\t\t\tif(rr<=mid)push(rl,rr,l,mid,lef[tree]);else{\n\t\t\t\tpush(rl,mid,l,mid,lef[tree]);push(mid+1,rr,mid+1,r,rgh[tree]);\t\n\t\t\t}\n\t\t}\n\t}\n\tint query(int l,int r,int tree){\n\t\tif(l==r)return(que[tree].top());int mid=(l+r)>>1;\n\t\tif(pt<=mid)return(max(que[tree].top(),query(l,mid,lef[tree])));\n\t\treturn(max(que[tree].top(),query(mid+1,r,rgh[tree])));\n\t}int lg[N*3],sums[N*3],tmp[N*3];\n\tinline int getrk(int a,int b){\n\t\tif(lst[a]==b){lstcnt[a]++;return(tmp[a]);}\n\t\ttmp[a]-=lstcnt[a];lst[a]=b;lstcnt[a]=1;return(tmp[a]);\n\t}\n\tvoid SA(int n){\n\t\tfor(register int i=1;i<=n;i++)sums[str[i]]++;\n\t\tfor(register int i=1;i<=gch;i++)sums[i]+=sums[i-1],tmp[i]=sums[i];\n\t\tfor(register int i=1;i<=n;i++)sa[sums[str[i]]]=i,sums[str[i]]--,rk[i]=tmp[str[i]];\n\t\tfor(register int b=1;b<n;b<<=1){\n\t\t\tfor(register int i=1;i<=n;i++)bv[i]=sums[i]=lstcnt[i]=0,lst[i]=-1;\n\t\t\tfor(register int i=1;i<=n;i++)sums[rk[i]]++;int bswitch=1;\n\t\t\tfor(register int i=1;i<=n;i++)sums[i]+=sums[i-1],tmp[i]=sums[i];\n\t\t\tfor(register int i=n;i>=1;i--){\n\t\t\t\tif(sa[i]<=b)continue;tsa[sums[rk[sa[i]-b]]]=sa[i]-b;sums[rk[sa[i]-b]]--;\n\t\t\t\ttrk[sa[i]-b]=getrk(rk[sa[i]-b],rk[sa[i]]);\t\n\t\t\t}for(register int i=n;i>n-b;i--){\n\t\t\t\ttsa[sums[rk[i]]]=i;sums[rk[i]]--;trk[i]=getrk(rk[i],0);\n\t\t\t}for(register int i=1;i<=n;i++){\n\t\t\t\tsa[i]=tsa[i];if(bv[rk[i]=trk[i]])bswitch=0;bv[rk[i]]=1;\n\t\t\t}if(bswitch)break;\n\t\t}\n\t}\n\tvoid Height(int n){\n\t\tif(sa[1]!=1){\n\t\t\twhile(sa[rk[1]-1]+h[1]<=n&&str[sa[rk[1]-1]+h[1]]==str[h[1]+1])h[1]++;\n\t\t}for(register int i=2;i<=n;i++){\n\t\t\tif(rk[i]==1)continue;int lst=sa[rk[i]-1];h[i]=max(0,h[i-1]-1);\n\t\t\twhile(max(lst,i)+h[i]<=n&&str[lst+h[i]]==str[i+h[i]])h[i]++;\t\n\t\t}for(register int i=1;i<=n;i++)height[rk[i]]=h[i];\n\t}\n\tinline int qmin(int l,int r){\n\t\tint g=lg[r-l+1];return(min(st[l][g],st[r-(1<<g)+1][g]));\t\n\t}int dl[N],dr[N],pos[N],len[N],val[N],qry[N][3];\n\tvoid print(int x){\n\t\tif(x<10)putchar(x+'0');else print(x/10),putchar(x%10+'0');\t\n\t}\n\tvoid ywymain(){\n\t\tint n=get(),m=get();int ptr=1;for(register int i=1;i<=n;i++){\n\t\t\tint ln=sget();pos[i]=ptr;len[i]=ln;\n\t\t\tfor(register int j=1;j<=ln;j++)str[ptr]=s[j],ptr++;str[ptr]=gch;gch++;ptr++;\n\t\t}for(register int i=1;i<=m;i++){\n\t\t\tint op=get();if(op==1){\n\t\t\t\tqry[i][0]=1;qry[i][1]=get();qry[i][2]=get();\n\t\t\t}else{\n\t\t\t\tint ln=sget();qry[i][0]=2;qry[i][1]=ptr;qry[i][2]=ln;\n\t\t\t\tfor(register int j=1;j<=ln;j++)str[ptr]=s[j],ptr++;str[ptr]=gch;gch++;ptr++;\n\t\t\t}\n\t\t}ptr--;SA(ptr);Height(ptr);lg[0]=-1;for(register int i=1;i<=ptr;i++){\n\t\t\tlg[i]=lg[i-1];if(i==(i&-i))lg[i]++;st[i][0]=height[i];\n\t\t}\n\t\tfor(register int i=1;i<=lg[ptr];i++){\n\t\t\tfor(register int j=1;j+(1<<i)-1<=ptr;j++){\n\t\t\t\tst[j][i]=min(st[j][i-1],st[j+(1<<(i-1))][i-1]);\n\t\t\t}\n\t\t}int rt=build(1,ptr);for(register int i=1;i<=n;i++){\n\t\t\tint me=rk[pos[i]],ans=me,l=1,r=me-1;while(l<=r){\n\t\t\t\tint mid=(l+r)>>1;if(qmin(mid+1,me)>=len[i])ans=mid,r=mid-1;else l=mid+1; \n\t\t\t}dl[i]=ans;ans=me;l=me+1;r=ptr;while(l<=r){\n\t\t\t\tint mid=(l+r)>>1;if(qmin(me+1,mid)>=len[i])ans=mid,l=mid+1;else r=mid-1;\t\n\t\t\t}dr[i]=ans;x=0;y=-1;push(dl[i],dr[i],1,ptr,rt);\n\t\t}for(register int i=1;i<=m;i++){\n\t\t\tif(qry[i][0]==1){\n\t\t\t\tint me=qry[i][1];y=val[me];val[me]=x=qry[i][2];push(dl[me],dr[me],1,ptr,rt);\n\t\t\t}else{\n\t\t\t\tint me=qry[i][1],mx=-1;for(register int j=1;j<=qry[i][2];j++){\n\t\t\t\t\tpt=rk[me+j-1];mx=max(mx,query(1,ptr,rt));\n\t\t\t\t}if(mx==-1){\n\t\t\t\t\tputchar('-');putchar('1');\t\n\t\t\t\t}else print(mx);putchar('\\n');\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tywy::ywymain();return(0);\t\n}\n```",
        "postTime": 1603948761,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1437G \u3010Death DBMS\u3011"
    },
    {
        "content": "## UPD\n\u6211\u6210\u529f\u5728CF\u4e0ahack\u4e86\u6211\u81ea\u5df1\u7684\u4ee3\u7801\uff0c\u73b0\u5728\u66f4\u65b0\u4e86\u4fee\u6539\u8fc7\u53ef\u4ee5\u901a\u8fc7\u7684\u4ee3\u7801\u5e76\u5f3a\u8c03\u4e00\u4e0b\u8fd9\u4e2a\u53c9\u70b9\n\n\u5728\u4f7f\u7528AC\u81ea\u52a8\u673a\u8fdb\u884c\u5339\u914d\u65f6\uff0c\u4e4b\u524d\u7684\u4ee3\u7801\u4f7f\u7528\u4e86**\u6bcf\u5339\u914d\u5230\u4e00\u4e2a\u70b9\uff0c\u5c31\u4ece\u5b83\u6cbffail\u8d70\u5230\u6839\u7edf\u8ba1\u7b54\u6848**\u7684\u65b9\u6cd5\uff08\u540c\u65f6\u4e0d\u5141\u8bb8\u4e00\u6b21\u5339\u914d\u4e2d\u4e00\u4e2a\u70b9\u88ab\u8bbf\u95ee**\u5927\u4e8e\u4e00\u6b21**\uff0c\u8fd9\u907f\u514d\u4e86\u88abaaaa...aaa\u5361\u6389\uff09\n\n\u4f46\u8fd9\u79cd\u65b9\u6cd5\u4f9d\u7136\u80fd\u88ab\u5361\uff0c\u5177\u4f53\u64cd\u4f5c\u662f\uff0c\u6a21\u5f0f\u4e32\uff08\u53d7\u5bb3\u4eba\u59d3\u540d\uff09\u4e3a\u4e00\u4e2a**\u9ad8\u5ea6\u65e0\u5e8f**\uff08\u786e\u4fddtrie\u4e0a\u6709\u63a5\u8fd1\u6a21\u5f0f\u4e32\u957f\u5ea6\u7684\u8282\u70b9\uff09\u7684\u957f\u4e32(\u5177\u4f53\u5b9e\u73b0\u662f\u7528a-z\u7684\u6392\u5217\u8fde\u8d77\u6765)\u548c\u5b83**\u6240\u6709\u7684\u540e\u7f00**\uff0c\u8be2\u95ee\u4e32\u5c31\u662f\u8fd9\u4e2a\u957f\u4e32\u3002-----\u8fd9\u6837\u6574\u4e2afail\u6811\u5728\u4e00\u6b21\u8be2\u95ee\u4e2d\u90fd\u4f1a\u88ab\u8bbf\u95ee\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a$\\sqrt{\\sum s_i}$\u7684\u8be2\u95ee\u4e32\u4ea7\u751f\u4e86$\\sum s_i$\u7684\u8fd0\u7b97\u91cf\uff0c\u5219\u603b\u590d\u6742\u5ea6\u5c31\u662f$\\sqrt{\\sum s_i}\\times\\sum q_i$\uff0cTLE\u4e86\n\n- \u89e3\u51b3\u65b9\u6848\n\n\u57fa\u4e8efail\u6811\u5efa\u4e00\u68f5**\u53ea\u542b\u5bf9\u7b54\u6848\u6709\u6548\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u6709\u67d0\u4e2a$s_i$\u5728\u8fd9\u4e2a\u70b9\u7ed3\u5c3e\u7684\u8282\u70b9**\uff0c\u4fdd\u6301\u7956\u5148-\u540e\u4ee3\u5173\u7cfb\u4e0d\u53d8 \n\n\u5728\u7edf\u8ba1\u7b54\u6848\u65f6\uff0c\u53ea\u8bbf\u95ee\u8fd9\u68f5\u6811\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u6b21\u8bbf\u95ee\u590d\u6742\u5ea6$\\le n$\uff0c\u770b\u8d77\u6765\u5f88\u5927\u4f46\u5982\u679c\u8981\u7ef4\u6301\u4e0a\u9762\u90a3\u4e2ahack\u6570\u636e\u7684\u6027\u8d28\uff0cn\u5230100\u591a$\\sum s_i$\u5c31\u5230\u6781\u9650\u4e86\uff0c\u5b9e\u9645\u8017\u65f6\u5e76\u4e0d\u9ad8\u3002\n\n\u7ed3\u679c\u5c31\u662f\u6211\u8c03\u6574\u4e86\u534a\u5929\u6570\u503c\u8fd8\u662f\u5b8c\u5168\u5361\u4e0d\u6389\n\n\u5e0c\u671b\u6709\u4eba\u7ed9\u4e2a\u5361\u4e0d\u6389\u7684\u8bc1\u660e\u6216\u8005\u518d\u6b21\u5361\u6389\u7684\u65b9\u6cd5\uff1f\n\n\n------------\n\n\n\u9898\u76ee\u5927\u610f\uff1a\u4e00\u5f00\u59cb\u7ed9\u51fan\u4e2a\u5b57\u7b26\u4e32**\uff08\u53ef\u80fd\u76f8\u540c\uff09**\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6700\u521d**\u90fd\u662f0**\n\n\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n**1\uff1a**\u5c06\u7b2ci\u4e2a\u5b57\u7b26\u4e32\u7684\u6743\u503c\u4fee\u6539\u4e3ax\n\n**2\uff1a**\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff0c\u6c42n\u4e2a\u5b57\u7b26\u4e32\u4e2d**\u662fs\u7684\u5b50\u4e32\u7684\u4e32**\u7684\u6743\u503c\u7684\u6700\u5927\u503c\n\n\u5148\u89c2\u5bdf\u64cd\u4f5c2\uff0c\u8981\u6c42\u4e00\u7ec4\u5df2\u77e5\u4e32\u5728\u4e00\u4e2a\u7ed9\u5b9a\u4e32\u4e2d\u662f\u5426\u51fa\u73b0\uff0c\u53ef\u4ee5\u901a\u8fc7AC\u81ea\u52a8\u673a\u5b8c\u6210\uff0c\u5c06\u521d\u59cb\u7ed9\u51fa\u7684n\u4e2a\u5b57\u7b26\u4e32\u5efa\u6210AC\u81ea\u52a8\u673a\uff0c\u7136\u540e\u628a\u4e32s\u5728\u81ea\u52a8\u673a\u4e0a\u8dd1\u5373\u53ef\u627e\u5230\u6240\u6709\u5b50\u4e32\n\n\u5bf9\u4e8e**\u6c42\u6743\u503c\u7684\u6700\u5927\u503c**\uff0c\u5728\u6bcf\u4e2aAC\u81ea\u52a8\u673a\u8282\u70b9\u4e0a\u5efa\u4e00\u4e2amultiset\uff08\u56e0\u4e3a\u6743\u503c\u4f1a\u6709\u76f8\u540c\u7684\uff09\u7528\u4e8e\u4fdd\u5b58\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u4e32\u7684\u6743\u503c\u5373\u53ef\n\n\u5bf9\u4e8e\u64cd\u4f5c1\uff1a\u5728\u5efaAC\u81ea\u52a8\u673a\u63d2\u5165\u4e32\u65f6\uff0c\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u4e32\u5728\u54ea\u7ed3\u5c3e\uff08\u8fd9\u5c31\u662f\u4fdd\u5b58\u6743\u503c\u7684\u4f4d\u7f6e\uff09\uff0c\u7136\u540e\u4fee\u6539\u65f6\u627e\u5bf9\u5bf9\u5e94\u7684multiset\u5148\u5220\u9664\u539f\u6743\u503c\u518d\u63d2\u5165\u65b0\u6743\u503c\u5373\u53ef\n\n**\u6ce8\u610fmultiset\u5728\u5220\u9664\u65f6\u4f7f\u7528s.erase(x)\u4f1a\u628a\u6240\u6709x\u90fd\u5220\u6389\uff0c(test 90\u597d\u50cf\u5c31\u662f\u53c9\u8fd9\u4e2a\u7684)\u6240\u4ee5\u8981\u4f7f\u7528s.erase(s.find(x))**\n\n\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#include<set>\nusing namespace std;\n\nint n,m,i,val[300005];\n\nstruct node\n{\n\tmultiset<int> val;\n    int p,v;\n    node *chd[26],*fail,*anc;\n    node()\n    {\n        memset(chd,0ll,sizeof(chd));\n        fail=anc=0ll;p=v=0;\n        val.clear();\n    }\n};\nnode *root;\nnode *place[300005];\nvoid resetAC()\n{\n    root=new node();\n}\nchar s[300005];\nvoid insert()\n{\n    node *now=root;\n    int l=0,len=strlen(s);\n    while(l<len)\n    {\n        if(now->chd[s[l]-'a']==NULL)\n          now->chd[s[l]-'a']=new node();\n        now=now->chd[s[l]-'a'];\n        l++;\n    }\n    now->p++;\n    place[i]=now;now->val.insert(0);\n}\nqueue<node*> qAC;\nvoid buildAC()\n{\n    node *now,*q;\n    int i;\n    for(i=0;i<26;i++)\n\t  if(root->chd[i]!=NULL)\n\t\troot->chd[i]->fail=root,qAC.push(root->chd[i]);\n    while(!qAC.empty())\n    {\n        now=qAC.front();qAC.pop();\n        for(i=0;i<26;i++)\n          if(now->chd[i]!=NULL)\n          {\n          \tq=now->fail;\n          \twhile(q!=NULL&&q->chd[i]==NULL)\n          \t  q=q->fail;\n          \tif(q==NULL)\n          \t  now->chd[i]->fail=root;\n          \telse now->chd[i]->fail=q->chd[i],now->chd[i]->anc=(q->chd[i]->val.empty()?q->chd[i]->anc:q->chd[i]);\n          \tqAC.push(now->chd[i]);\n          }\n    }\n}\nint AC()\n{\n    node *now=root,*p;\n    int ans=-1,len=strlen(s);\n    for(int l=0;l<len;l++)\n    {\n        while(now!=root&&now->chd[s[l]-'a']==NULL)\n           now=now->fail;\n\t\tnow=(now->chd[s[l]-'a']==NULL?root:now->chd[s[l]-'a']);\n\t\tp=now;\n\t\twhile(p!=NULL&&p->v!=i)\n\t\t{\n\t\t\tif(!p->val.empty())\n\t\t\t{\n\t\t\t\tauto x=p->val.end();--x;\n\t\t\t\tans=max(ans,*x);\n\t\t\t}\n\t\t\tp->v=i;\n\t\t\tp=p->anc;\n\t\t}\n    }\n    return ans;\n}\n\nchar c;int flag;\nvoid read(int &x)\n{\n    x=0;c=getchar();flag=1;\n    while(c<'0'||c>'9')\n      flag=(c=='-'?-1:flag),c=getchar();\n    while(c>='0'&&c<='9')\n      x=x*10+c-'0',c=getchar();\n    x*=flag;\n}\n\nint opt; \n\n\nint main()\n{\n    resetAC();\n    read(n);read(m);\n    for(i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",s);\n\t    insert();\n\t}\n\tbuildAC();\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tread(opt);\n\t\tif(opt==1)\n\t\t{\n\t\t\tint x,vl;\n\t\t\tread(x);read(vl);\n\t\t\tplace[x]->val.erase(place[x]->val.find(val[x]));\n\t\t\tval[x]=vl;\n\t\t\tplace[x]->val.insert(val[x]);\n\t\t}\n\t\tif(opt==2)\n\t\t{\n\t\t\tscanf(\"%s\",s);\n\t\t\tcout<<AC()<<endl;\n\t\t}\n\t}\n    return 0;\n}\n```\n",
        "postTime": 1603874595,
        "uid": 9517,
        "name": "a2956331800",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1437G \u3010Death DBMS\u3011"
    },
    {
        "content": "## CF1437G Death DBMS\n\n\u4e00\u9053\u6bd4\u8f83\u6a21\u677f\u7684\u5b57\u7b26\u4e32\u9898\u3002\n\n~~\u672c\u6765\u5728\u8003\u573a\u4e0a15minutes\u7801\u5b8c\uff0c\u4f46\u8003\u8bd5\u7ed3\u675f\u540e\u4e24\u5206\u949f\u624d\u8c03\u5b8c\uff0c\u6ca1\u5206\u4e86\u3002~~\n\n### \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u51fa$n,m$\uff0c\u7136\u540e\u7ed9\u51fa$n$\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6700\u521d\u6743\u503c\u90fd\u4e3a0\n\n\u7136\u540e\u6709$m$\u4e2a\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\n\n- $\\texttt{1 i x}$ \u5c06\u7b2ci\u4e2a\u5b57\u7b26\u4e32\u7684\u6743\u503c\u4fee\u6539\u4e3a$x$\u3002\n- $\\texttt{2 q}$ \u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32$q$\uff0c\u6c42\u6240\u6709**\u662fq\u7684\u5b50\u4e32**\u7684\u5b57\u7b26\u4e32\u7684**\u6743\u503c\u7684\u6700\u5927\u503c**\u3002\n\n$\\sum |S_i|\\leq 3\\times 10^5,\\sum |q|\\leq 3\\times 10^5$\u3002\n\n### \u9898\u89e3\n\n\u5f88\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5bf9$n$\u4e2a\u6a21\u677f\u4e32\u5efa\u7acb\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u53ea\u7528\u5728$SAM$\u4e0a\u5339\u914d\uff0c\u6bcf\u8d70\u4e00\u6b65\u67e5\u8be2\u4e00\u6b21\u5f53\u524d\u70b9\u5230\u8ddf\u7684\u6700\u5c0f\u503c\u3002\n\n\u663e\u7136\u8fd9\u90fd\u53ef\u4ee5\u7528\u91cd\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u4fee\u6539\u53ea\u7528\u5728\u7ebf\u6bb5\u6811\u4e0a\u4fee\u6539\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6$O(n\\log^2 n)$\u3002\n\n**Hint\uff1a\u8fd9\u9053\u9898\u6709\u5f88\u591a\u7ec6\u8282\uff0c\u9700\u8981\u597d\u597d\u60f3\u4e00\u4e0b\u3002**\n\n**Hint1\uff1a\u5bf9\u4e8e\u4e00\u4e9bSAM\u4e0a\u76f8\u540c\u7684\u4e32\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4ed6\u6700\u4e0a\u9762\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u5c06\u76f8\u540c\u7684\u4e32\u7684\u6743\u503c\u6807\u8bb0\u5728\u6700\u4e0a\u9762\u7684\u4f4d\u7f6e\u7684multiset\u4e2d\u3002**\n\n**Hint2\uff1a\u5bf9\u4e8e\u5230\u8fbe\u4e00\u4e2aSAM\u4e0a\u7684\u70b9$u$\uff0c\u82e5\u5f53\u524d\u957f\u5ea6$=now[u]$\uff0c\u6211\u4eec\u624d\u4ece$u$\u67e5\u8be2\uff0c\u5426\u5219\u4ece$fa_u$\u67e5\u8be2\u3002**\n\n**Hint3\uff1a\u5728multiset\u4e2d\u5220\u503c\u7684\u65f6\u5019\u53ea\u80fd\u5220\u8fed\u4ee3\u5668\u3002**\n\n\u665a\u4e0a\u4ea4\u7684\u76f4\u63a5\u5220\u7684\u503c\uff0c\u8fd8\u8fc7\u4e86\uff0c\u65e9\u4e0a\u4e00\u8d77\u6765\u8d76\u7d27\u628a\u81ea\u5df1\u7ed9hack\u4e86\u3002\n\n### hack\u6570\u636e\n\nhack by me\n\n- $\\texttt{hack.in}$\n\n```plain\n6 15\na\na\na\na\na\na\n2 aaaa\n1 4 5\n2 aaa\n1 2 5\n1 6 5\n2 a\n2 aa\n1 5 5\n2 aa\n2 a\n1 4 1\n2 aaa\n1 5 1\n1 6 2\n2 a\n```\n\n- $\\texttt{hack.out}$\n\n```plain\n0\n5\n5\n5\n5\n5\n5\n5\n```\n\n\u8fd9\u5c31\u662fCF\u4e0a\u7684test90\uff0c~~\u987a\u5e26\u53c9\u6389\u4e868\u4e2a\u4eba~~\u3002\n\n### \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#pragma GCC optimize(4)\n#include<bits/stdc++.h>\n#define FOR(i,a,b) for(int i=a;i<=b;++i)\n#define REP(u) for(int i=p[u];i!=-1;i=e[i].nxt)\n#define ll long long\n#define pb push_back\n#define PII pair<int,int>\n#define gc getchar()//(p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++)\nusing namespace std;\nchar buf[100000],*p1,*p2;\ninline int gi()\n{\n\tint x=0,f=1;\n\tchar ch=gc;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=gc;}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=gc;}\n\treturn (f==1)?x:-x;\n}\ninline int max(int a,int b){return a<b?b:a;}\ninline int min(int a,int b){return a<b?a:b;}\nconst int maxn=6e5+5;\nint fa[maxn],len[maxn],tot=1,last=1,sz,p[maxn],son[maxn][26],pos[maxn],dfn[maxn],siz[maxn],tp[maxn],so[maxn],rel[maxn],val[maxn];\nchar s[maxn];\nstruct edge\n{\n\tint v,nxt;\n\tedge(int vv=0,int nn=0){v=vv,nxt=nn;}\n}e[maxn<<1];\ninline void add(int u,int v)\n{\n\te[++sz]=edge(v,p[u]);\n\tp[u]=sz;\n}\nstruct SAM\n{\n\tinline void insert(int c)\n\t{\n\t\tint np=++tot,p=last;\n\t\tlen[np]=len[p]+1,last=np;\n\t\twhile(!son[p][c]&&p)son[p][c]=np,p=fa[p];\n\t\tif(!p)fa[np]=1;\n\t\telse\n\t\t{\n\t\t\tint q=son[p][c];\n\t\t\tif(len[q]==len[p]+1)fa[np]=q;\n\t\t\telse\n\t\t\t{\n\t\t\t\tint nq=++tot;\n\t\t\t\tlen[nq]=len[p]+1;\n\t\t\t\tfa[nq]=fa[q];\n\t\t\t\tfa[q]=fa[np]=nq;\n\t\t\t\tmemcpy(son[nq],son[q],sizeof(son[q]));\n\t\t\t\twhile(p&&son[p][c]==q)son[p][c]=nq,p=fa[p];\n\t\t\t}\n\t\t}\n\t}\n}sam;\nint n,q;\ninline void dfs(int u)\n{\n\tif(len[u]==len[fa[u]]&&u!=1)rel[u]=rel[fa[u]];\n\telse rel[u]=u;\n\tsiz[u]=1;\n\tREP(u)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==fa[u])continue;\n\t\tdfs(v);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[so[u]])so[u]=v;\n\t}\n}\ninline void dfs2(int u,int topf)\n{\n\tdfn[u]=++tot;\n\ttp[u]=topf;\n\tif(so[u])dfs2(so[u],topf);\n\tREP(u)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==fa[u]||v==so[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\nstruct segmentree\n{\n\t#define ls u<<1\n\t#define rs u<<1|1\n\tstatic const int maxn=3e6+5;\n\tint maxv[maxn];\n\tinline void pushup(int u){maxv[u]=max(maxv[ls],maxv[rs]);}\n\tinline void update(int u,int l,int r,int x,int v)\n\t{\n\t\tif(l==r){return maxv[u]=v,void();}\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid)update(ls,l,mid,x,v);\n\t\telse update(rs,mid+1,r,x,v);\n\t\tpushup(u);\n\t}\n\tinline int query(int u,int l,int r,int x,int y)\n\t{\n\t\tif(x<=l&&y>=r)return maxv[u];\n\t\tint ret=-1e9;\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid)ret=query(ls,l,mid,x,y);\n\t\tif(y>mid)ret=max(ret,query(rs,mid+1,r,x,y));\n\t\treturn ret;\n\t}\n}tree;\ninline int Query(int u)\n{\n\tint ret=-1e9;\n\twhile(u)\n\t{\n\t\tret=max(ret,tree.query(1,1,n,dfn[tp[u]],dfn[u]));\n\t\tu=fa[tp[u]];\n\t}\n\treturn ret;\n}\nmultiset<int>ss[maxn];\nint main()\n{\n\tmemset(p,-1,sizeof(p));\n\tn=gi(),q=gi();\n\tFOR(i,1,n)\n\t{\n\t\tlast=1;\n\t\tscanf(\"%s\",s+1);\n\t\tint len=strlen(s+1);\n\t\tFOR(j,1,len)sam.insert(s[j]-'a');\n\t\tpos[i]=last;\n\t}\n\tFOR(i,2,tot)add(fa[i],i);\n\tint xx=n;\n\tn=tot;\n\ttot=0;\n\tdfs(1);\n\tdfs2(1,1);\n\tFOR(i,2,tot)if(i!=rel[i])ss[rel[i]].insert(0);\n\tFOR(i,1,tot)tree.update(1,1,tot,i,-1e9);\n\tFOR(i,1,xx)tree.update(1,1,tot,dfn[rel[pos[i]]],0);\n\twhile(q--)\n\t{\n\t\tint typ=gi();\n\t\tif(typ==2)\n\t\t{\n\t\t\tscanf(\"%s\",s+1);\n\t\t\tint len1=strlen(s+1);\n\t\t\tint now=1,nowlen=0;\n\t\t\tint ans=-1;\n\t\t\tFOR(i,1,len1)\n\t\t\t{\n\t\t\t\twhile(!son[now][s[i]-'a']&&now)now=fa[now],nowlen=len[now];\n\t\t\t\tif(now==0){now=1;nowlen=0;continue;}\n\t\t\t\tnowlen++;\n\t\t\t\tif(son[now][s[i]-'a'])now=son[now][s[i]-'a'];\n\t\t\t\tif(nowlen==len[now])ans=max(ans,Query(now));///fa[now]\n\t\t\t\telse ans=max(ans,Query(fa[now]));\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint id=gi(),x=gi();\n\t\t\tif(pos[id]!=rel[pos[id]])\n\t\t\t{\n\t\t\t\tauto it=ss[rel[pos[id]]].find(val[pos[id]]);\n\t\t\t\tss[rel[pos[id]]].erase(it);\n\t\t\t\tss[rel[pos[id]]].insert(val[pos[id]]=x);\n\t\t\t}\n\t\t\telse val[pos[id]]=x;\n\t\t\tif(ss[rel[pos[id]]].size())\n\t\t\t{\n\t\t\t\tauto it=ss[rel[pos[id]]].end();\n\t\t\t\tit--;\n\t\t\t\tx=max(x,*it);\n\t\t\t}\n\t\t\ttree.update(1,1,n,dfn[rel[pos[id]]],max(x,val[rel[pos[id]]]));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n**\u5e0c\u671b\u672c\u7bc7\u9898\u89e3\u80fd\u7ed9\u4f60\u5e26\u6765\u6536\u83b7\u3002**\n\n",
        "postTime": 1603886589,
        "uid": 333789,
        "name": "lory1608",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1437G \u3010Death DBMS\u3011"
    }
]