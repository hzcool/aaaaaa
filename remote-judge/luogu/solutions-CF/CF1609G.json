[
    {
        "content": "[\u4f20\u9001\u95e8](https://codeforces.com/contest/1609/problem/G)\n\n\u8fd9\u5468\u751f\u75c5\u4e86\uff0c\u72b6\u6001\u5f88\u5dee\uff0c\u6240\u4ee5\u6709\u6bb5\u65f6\u95f4\u6ca1\u5199\u9898\u3002\u4eca\u5929\u5199\u6389\u4e86\u8fd9\u573a\u6bd4\u8d5b\u7684 FG \u4e24\u9053 DS \u6e05\u9192\u6e05\u9192\u3002\u7136\u540e\u53d1\u73b0\u8fd9\u4e24\u9053\u90fd\u662f naive \u9898......\n\n#### \u5206\u6790\uff1a\n\n\u770b\u5230\u5c31\u5927\u6982\u6709\u4e2a\u611f\u89c9\uff0c\u5c31\u662f\u8fd9\u662f\u4e2a\u4e8c\u5408\u4e00\u9898\u3002\n\n\u53d1\u73b0\u544a\u8bc9\u4f60\u4e86\u4e24\u4e2a\u5e8f\u5217\u9012\u589e\u4e14\u5dee\u5206\u9012\u589e\uff0c\u4fee\u6539\u5b8c\u540e\u4e5f\u6ee1\u8db3\u3002\u770b\u4e0a\u53bb\uff0c\u8fd9\u4e1c\u897f\u5bf9\u4fee\u6539\u6ca1\u5e2e\u52a9\uff0c\u90a3\u4e48\u53ea\u53ef\u80fd\u548c\u67e5\u8be2\u6709\u5173\u3002\n\n\u4e8b\u5b9e\u4e0a\u67e5\u8be2\u90e8\u5206\u662f\u5f88\u7b80\u5355\u7684\uff08~~\u6211\u521d\u4e00\u7684\u65f6\u5019\u5c31\u51fa\u4e86\u8fd9\u9053\u9898\uff09~~\uff1a\n\n\u7ed3\u8bba\uff1a\u6bcf\u6b21\u8d2a\u5fc3\u5730\u5f80\u4e24\u79cd\u8d70\u6cd5\u91cc\uff0c\u6570\u5c0f\u7684\u8d70\uff0c\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\u3002\n\n\u8bc1\u660e\uff1a\n\n\u6b64\u65f6\u5dee\u5206\u5355\u8c03\u53d1\u6325\u7528\u5904\u4e86\u3002\u4e0a\u8ff0\u7ed3\u8bba\u7684\u672c\u8d28\u5c31\u662f\u9009\u5dee\u5206\u5c0f\u7684\u90a3\u4e2a\u6570\u3002\u90a3\u4e48\u53cd\u8bc1\u4e00\u4e0b\u5c31\u5b8c\u4e8b\u4e86\u3002\n\n\u8fd9\u6837\u4f60\u53ef\u4ee5\u5728 $O(n+m)$ \u7684\u65f6\u95f4\u5185\u89e3\u51b3\u4e00\u4e2a\u8be2\u95ee\u3002\n\n\u6211\u4eec\u73b0\u5728\u8981\u505a\u7684\u662f\u628a\u8fd9\u4e2a\u7b56\u7565\u8f6c\u6210\u4e00\u4e2a\u5f0f\u5b50\uff0c\u6216\u8005\u53ef\u4ee5 DS \u7ef4\u62a4\u7684\u4e1c\u897f\u3002\n\n\u5df2\u7ecf\u63d0\u5230\u4e86\uff0c\u8fd9\u4e2a\u7b56\u7565\u7684\u672c\u8d28\u662f\u6bcf\u6b21\u9009\u62e9\u5dee\u5206\u5c0f\u7684\u8d70\u3002\u628a\u6700\u7ec8\u6700\u4f18\u7b56\u7565\u91cc\uff0c\u6bcf\u6b21\u65b0\u9009\u62e9\u7684\u5dee\u5206\u5199\u51fa\u6765\uff0c\u90a3\u4e48\u5b83\u662f\u5355\u8c03\u7684\u3002\u6216\u8005\u8bf4\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u5199\u51fa\u6765\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f\u5728\u5bf9\u5dee\u5206\u6392\u5e8f\u3002\u800c\u7b2c $i$ \u4e2a\u4f4d\u7f6e\u7684\u5dee\u5206\uff0c\u4f1a\u8d21\u732e $(n+m-i-1)$ \u6b21\u3002\n\n\u6362\u8a00\u4e4b\u5982\u679c\u628a $a$ \u548c $b$ \u7684\u5dee\u5206\u5199\u51fa\u6765\uff0c\u5171\u6709 $n+m-2$ \u4e2a\uff0c\u628a\u8fd9\u4e2a\u6570\u7ec4\u8bb0\u4f5c $d$ \u5e76\u6392\u5e8f\uff0c\u5219\u7ed3\u679c\u4e3a\n\n$$\\sum _{i=1}^{n+m-2}(n-m-i-1)d_i$$\n\n\u8fd9\u4e2a\u5f0f\u5b50\u770b\u4e0a\u53bb\u6bd4\u8f83\u4eb2\u5207\u4e86\u3002\u800c\u4e14\u4f60\u89c2\u5bdf\u5230\uff0c\u5bf9\u4e8e $a$ \u7684\u4fee\u6539\u6211\u4eec\u66b4\u529b\uff0c\u5bf9\u4e8e $b$ \u7684\u4fee\u6539\uff0c\u5728\u5dee\u5206\u6570\u7ec4 $db$ \u4e0a\u4f53\u73b0\u5c31\u662f\u540e\u7f00\u52a0\u6cd5\u3002\u4fee\u6539\u90e8\u5206\u4e0d\u662f\u5f88\u96be\u3002\n\n\u7136\u540e\u53d1\u73b0 $n=100$ \u8fd8\u6ca1\u7528\u3002\u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u60c5\uff0c\u5c31\u662f\u4e24\u4e2a\u5e8f\u5217\u7684\u5dee\u5206\u5404\u81ea\u6709\u5e8f\u3002\u90a3\u4f60\u5b8c\u5168\u53ef\u4ee5\u5bf9 $b$ \u5e8f\u5217\u5dee\u5206 $db$ \u4fdd\u6301\u4e0d\u53d8\uff0c\u628a $a$ \u5e8f\u5217\u7684 $n-1$ \u4e2a\u5dee\u5206\uff0c\u5373\u6570\u7ec4 $da$\uff0c\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165 $db$\u3002\u8fd9\u6837\u53ea\u4f1a\u63d2\u5165 $100$ \u6b21\uff0c\u662f\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\n\n\u521a\u624d\u5df2\u7ecf\u63d0\u8fc7 $b$ \u9700\u8981\u652f\u6301\u540e\u7f00\u52a0\u6cd5\u4e86\uff0c\u8fd9\u91cc\u53c8\u6709\u4e00\u4e2a\u67e5\u627e\u524d\u9a71\u540e\u7ee7\uff0c\u7b2c\u4e00\u53cd\u5e94\u662f\u5e73\u8861\u6811\uff0c\u4f46\u6211\u4e0d\u4f1a\u3002\u6709\u6ca1\u6709\u66ff\u4ee3\u54c1\uff1f\u90a3\u4f60\u53ef\u4ee5\u4e8c\u5206+\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u5b9e\u6d4b\u4f1a TLE\uff0c\u90a3\u5c31\u6539\u6210\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n\u7ec6\u8282\u8fd8\u662f\u7565\u591a\u7684\uff0c\u5efa\u8bae\u5199\u4e4b\u524d\u5927\u6982\u634b\u4e00\u904d\u81ea\u5df1\u8981\u7ef4\u62a4\u54ea\u4e9b\u4e1c\u897f\u3002\u634b\u6e05\u695a\u4ee5\u540e\u4ee3\u7801\u4e5f\u5c31 100L \u51fa\u5934\u3002\u53ef\u80fd\u6bd4 F \u8fd8\u5c11\u70b9\u3002\n\n```\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define op(x) ((x&1)?x+1:x-1)\n#define odd(x) (x&1)\n#define even(x) (!odd(x))\n#define lc(x) (x<<1)\n#define rc(x) (lc(x)|1)\n#define lowbit(x) (x&-x)\n#define Max(a,b) (a>b?a:b)\n#define Min(a,b) (a<b?a:b)\n#define next Cry_For_theMoon\n#define il inline\n#define pb(x) push_back(x)\n#define is(x) insert(x)\n#define sit set<int>::iterator\n#define mapit map<int,int>::iterator\n#define pi pair<int,int>\n#define ppi pair<int,pi>\n#define pp pair<pi,pi>\n#define fr first\n#define se second\n#define vit vector<int>::iterator\n#define mp(x,y) make_pair(x,y)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int uint;\nusing namespace std;\nconst int MAXN=1e5+10;\nll n,m,q;\nll a[MAXN],b[MAXN],type,k,d;\nll da[MAXN],db[MAXN];\nll s;\nvoid Read(ll& num){\n\tchar ch;\n\twhile((ch=getchar()) && !isdigit(ch));\n\tnum=ch-'0';\n\twhile((ch=getchar()) && isdigit(ch))num=num*10+ch-'0';\n}\nstruct SegmentTree{\n\tll sum[MAXN<<2],tag[MAXN<<2],rv[MAXN<<2];\n\tvoid pushup(int x){sum[x]=sum[lc(x)]+sum[rc(x)];rv[x]=rv[rc(x)];}\n\tvoid pushdown(int x,int l,int r){\n\t\tif(!tag[x])return;\n\t\tint mid=(l+r)>>1;sum[lc(x)]+=tag[x]*(mid-l+1);sum[rc(x)]+=tag[x]*(r-mid);\n\t\trv[lc(x)]+=tag[x];rv[rc(x)]+=tag[x];\n\t\ttag[lc(x)]+=tag[x];tag[rc(x)]+=tag[x];tag[x]=0;\n\t} \n\tvoid upd(int x,int l,int r,int ql,int qr,ll val){\n\t\tif(ql<=l && qr>=r){\n\t\t\tsum[x]+=val*(r-l+1);tag[x]+=val;rv[x]+=val; \n\t\t\treturn;\n\t\t}\n\t\tpushdown(x,l,r);int mid=(l+r)>>1;\n\t\tif(ql<=mid)upd(lc(x),l,mid,ql,qr,val);\n\t\tif(qr>mid)upd(rc(x),mid+1,r,ql,qr,val);\n\t\tpushup(x);\n\t}\n\tvoid build(int x,int l,int r){\n\t\tif(l==r){\n\t\t\tsum[x]=rv[x]=db[l];\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;build(lc(x),l,mid);build(rc(x),mid+1,r);pushup(x);\n\t}\n\tll qry(int x,int l,int r,int ql,int qr){\n\t\tif(ql<=l && qr>=r)return sum[x];\n\t\tpushdown(x,l,r);\n\t\tint mid=(l+r)>>1;ll ret=0;\n\t\tif(ql<=mid)ret+=qry(lc(x),l,mid,ql,qr);\n\t\tif(qr>mid)ret+=qry(rc(x),mid+1,r,ql,qr);\n\t\tpushup(x);return ret;\n\t}\n\tint search(int x,int l,int r,ll val){\n\t\tif(l==r)return l;\n\t\tint mid=(l+r)>>1;\n\t\tpushdown(x,l,r);\n\t\tint ret=0;\t\n\t\tif(rv[lc(x)]>=val)ret=search(lc(x),l,mid,val);\n\t\telse ret=search(rc(x),mid+1,r,val);\n\t\tpushup(x);return ret; \n\t}\n}t; \nll S(ll n){return n*(n+1)/2;}\nint main(){\n\tRead(n);Read(m);Read(q);\n\t\n\trep(i,1,n)Read(a[i]);\n\trep(i,1,m)Read(b[i]);\n\trep(i,2,n)da[i]=a[i]-a[i-1];\n\trep(i,2,m)db[i]=b[i]-b[i-1];\n\trep(i,2,m)s+=db[i]*(m-i+1);\n\tt.build(1,2,m);\n\trep(i,1,q){\n\t\tRead(type);Read(k);Read(d);\n\t\tif(type==1){\n\t\t\tif(k==n){a[1]+=d;k--;}\n\t\t\trep(i,n-k+1,n)da[i]+=d;\n\t\t}else{\n\t\t\tif(k==m){b[1]+=d;k--;}\n\t\t\ts+=d*S(k);\n\t\t\tt.upd(1,2,m,m-k+1,m,d);\n\t\t}\n\t\tll ans=s+(n+m-1)*(a[1]+b[1]);\n\t\tll sm=t.qry(1,2,m,2,m);\n\t\trep(i,2,n){\n\t\t\t//find ai's positionS\n\t\t\tif(t.qry(1,2,m,m,m)<da[i]){ans+=sm;continue;}\n\t\t\tint pos=t.search(1,2,m,da[i]);\n\t\t\tif(pos!=2)ans+=t.qry(1,2,m,2,pos-1);\n\t\t\tans+=da[i]*(m-pos+1);\t\n\t\t}\n\t\trep(i,2,n)ans+=da[i]*(n-i+1);\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\n\treturn 0;\n}\n\n```",
        "postTime": 1638629117,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010CF1609G\u3011A Stroll Around the Matrix"
    },
    {
        "content": "> \u6458\u81ea\u6211\u7684[\u6742\u9898\u9009\u505a\u2163](https://www.cnblogs.com/ET2006/p/greedy-construction-dp4.html)\u4e2d\u7684\u7b2c $96$ \u9898\u3002\n\n\u9996\u5148\u8003\u8651\u4ec0\u4e48\u6837\u7684\u8def\u5f84\u662f\u6700\u4f18\u8def\u5f84\u3002\u6211\u4eec\u5148\u4e0d\u59a8\u5047\u8bbe\u6211\u4eec\u5148\u4e00\u76f4\u5411\u53f3\u8d70\uff0c\u518d\u4e00\u76f4\u5411\u4e0b\u8d70\uff0c\u5373 $(1,1)\\to(1,2)\\to\\cdots\\to(1,m)\\to(2,m)\\to\\cdots\\to(n,m)$\uff0c\u4f46\u662f\u8fd9\u6837\u663e\u7136\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\uff0c\u56e0\u6b64\u8003\u8651\u8c03\u6574\u3002\u8c03\u6574\u7684\u7b2c\u4e00\u6b65\u663e\u7136\u662f\u5c06 $(1,m-1)\\to(1,m)\\to(2,m)$ \u8c03\u6574\u4e3a $(1,m-1)\\to(2,m-1)\\to(2,m)$\uff0c\u663e\u7136\u540e\u8005\u4ee3\u4ef7\u6bd4\u524d\u8005\u66f4\u4f18\uff0c\u5f53\u4e14\u4ec5\u5f53 $a_2+b_{m-1}<a_1+b_m$\u3002\u518d\u8005\u5c31\u662f\u5c06 $(1,m-2)\\to(1,m-1)\\to(2,m-1)$ \u8c03\u6574\u4e3a $(1,m-2)\\to(2,m-2)\\to(2,m-1)$\uff0c\u4ee5\u53ca $(2,m-1)\\to(2,m)\\to(3,m)$ \u8c03\u6574\u4e3a $(2,m-1)\\to(3,m-1)\\to(3,m)$\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u6309\u7167\u8fd9\u6837\u7684\u65b9\u5f0f\u7ee7\u7eed\u624b\u73a9\u4e0b\u53bb\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u6700\u7ec8\u7684\u72b6\u6001\u4e2d\uff0c\u5047\u8bbe\u6211\u4eec\u5728\u70b9 $(i,j)$\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u5f80\u4e0b\u8d70\uff0c\u5f53\u4e14\u4ec5\u5f53 $j=m$\uff0c\u6216\u8005 $i\\ne n$ \u4e14 $a_{i+1}-a_i<b_{j+1}-b_j$\u3002\n\n\u6211\u4eec\u8003\u8651\u8bbe $pos_i$ \u8868\u793a\u6211\u4eec\u5904\u4e8e\u7b2c $i$ \u884c\u65f6\uff0c\u4f1a\u5728\u54ea\u4e2a\u4f4d\u7f6e\u9996\u6b21\u5411\u4e0b\u8d70\uff0c\u7531\u4e8e $n$ \u5f88\u5c0f\u5e76\u4e14\u9898\u76ee\u4e2d $a,b$ \u5e8f\u5217\u90fd\u662f\u4e0b\u51f8\u7684\uff0c\u56e0\u6b64\u5bf9\u4e8e\u540c\u4e00\u884c $i$\uff0c\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u65ad\u70b9 $j$\uff0c\u4f7f\u5f97\u5bf9\u4e8e $j$ \u5de6\u8fb9\u6240\u6709\u4f4d\u7f6e\uff0c\u5f53\u6211\u4eec\u4f4d\u4e8e $(i,j)$ \u65f6\u90fd\u4f1a\u5411\u53f3\u8d70\uff0c\u800c\u5bf9\u4e8e $j$ \u53f3\u8fb9\u6240\u6709\u4f4d\u7f6e\uff0c\u5f53\u6211\u4eec\u4f4d\u4e8e $(i,j)$ \u65f6\u90fd\u4f1a\u5411\u4e0b\u8d70\u3002\u4e14 $pos$ \u6570\u7ec4\u4e5f\u662f\u5355\u8c03\u4e0d\u964d\u7684\u3002\u8fd9\u6837\u4e00\u6765\u95ee\u9898\u5c31\u597d\u529e\u4e86\uff0c\u7531\u4e8e $n$ \u5f88\u5c0f\uff0c\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\uff0c\u6539\u5b8c\u4e4b\u540e\u90fd\u53ef\u4ee5\u76f4\u63a5\u7ebf\u6bb5\u6811\u4e8c\u5206\u4fee\u6539 $pos$ \u6570\u7ec4\uff0c\u800c\u7b54\u6848\u5373\u4e3a $\\sum\\limits_{i=1}^n(a_i\u00b7(pos_i-pos_{i-1}+1)+\\sum\\limits_{j=pos_{i-1}}^{pos_i}b_j)$\uff0c\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u6bcf\u6b21 $\\mathcal O(n\\log m)$ \u5730\u6c42\u3002\u6bd4\u8f83\u9ebb\u70e6\u7684\u662f\u8981\u5b9e\u73b0\u5355\u70b9\u52a0\u6c42\u4e09\u9636\u524d\u7f00\u548c\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5e73\u65b9\u9879\u3001\u4e00\u6b21\u9879\u548c\u5e38\u6570\u9879\u80fd\u591f\u83b7\u5f97\u5e38\u6570\u8f83\u5c0f\u7684\u5b9e\u73b0\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(nm\\log m)$\u3002\n\n```cpp\nconst int MAXN = 100;\nconst int MAXM = 1e5;\nint n, m, qu; u64 a[MAXN + 5], b[MAXM + 5];\nstruct node {int l, r; u64 lz, sum, rit;} s[MAXM * 4 + 5];\nvoid pushup(int k) {\n\ts[k].sum = s[k << 1].sum + s[k << 1 | 1].sum;\n\ts[k].rit = s[k << 1 | 1].rit;\n}\nvoid build(int k, int l, int r) {\n\ts[k].l = l; s[k].r = r; if (l == r) return s[k].sum = s[k].rit = b[l + 1] - b[l], void();\n\tint mid = l + r >> 1; build(k << 1, l, mid); build(k << 1 | 1, mid + 1, r);\n\tpushup(k);\n}\nvoid tag(int k, u64 v) {\n\ts[k].rit += v; s[k].lz += v;\n\ts[k].sum += 1ull * (s[k].r - s[k].l + 1) * v;\n}\nvoid pushdown(int k) {if (s[k].lz) tag(k << 1, s[k].lz), tag(k << 1 | 1, s[k].lz), s[k].lz = 0;}\nint walk(int k, u64 v) {\n\tif (s[k].rit <= v) return m;\n\tif (s[k].l == s[k].r) return s[k].l; pushdown(k);\n\tif (s[k << 1].rit <= v) return walk(k << 1 | 1, v);\n\telse return walk(k << 1, v);\n}\nvoid modify(int k, int l, int r, u64 v) {\n\tif (l <= s[k].l && s[k].r <= r) return tag(k, v), void();\n\tpushdown(k); int mid = s[k].l + s[k].r >> 1;\n\tif (r <= mid) modify(k << 1, l, r, v);\n\telse if (l > mid) modify(k << 1 | 1, l, r, v);\n\telse modify(k << 1, l, mid, v), modify(k << 1 | 1, mid + 1, r, v);\n\tpushup(k);\n}\nint pt[MAXN + 5];\nvoid calc() {\n\tpt[0] = 1;\n\tfor (int i = 1; i < n; i++) pt[i] = walk(1, a[i + 1] - a[i]);\n\tpt[n] = m;\n}\nstruct fenwick {\n\tu64 t[MAXM + 5];\n\tvoid add(int x, u64 v) {for (int i = x; i <= m; i += (i & (-i))) t[i] += v;}\n\tu64 query(int x) {u64 ret = 0; for (int i = x; i; i &= (i - 1)) ret += t[i]; return ret;}\n} t0, t1, t2;\nvoid mdf(int l, u64 a, u64 b) {\n\tt2.add(l, b);\n\tt1.add(l, 2 * a + b);\n\tt0.add(l, 2 * a * (1 - l) + b * l * (1 - l));\n}\nu64 query(int x) {\n\treturn (1ull * x * x * t2.query(x) + 1ull * x * t1.query(x) + t0.query(x)) / 2;\n}\nu64 query(int l, int r) {return query(r) - query(l - 1);}\nu64 calcans() {\n\tu64 res = 0;\n\tfor (int i = 1; i <= n; i++)\n\t\tres += 1ull * a[i] * (pt[i] - pt[i - 1] + 1) + query(pt[i - 1], pt[i]);\n\treturn res;\n}\nint main() {\n\tscanf(\"%d%d%d\", &n, &m, &qu);\n\tfor (int i = 1; i <= n; i++) scanf(\"%llu\", &a[i]);\n\tfor (int i = 1; i <= m; i++) scanf(\"%llu\", &b[i]), t0.add(i, 2 * b[i]);\n\tbuild(1, 1, m - 1);\n\twhile (qu--) {\n\t\tint typ, d, v; scanf(\"%d%d%d\", &typ, &d, &v);\n\t\tif (typ == 1) {\n\t\t\tfor (int i = 1; i <= d; i++)\n\t\t\t\ta[n - d + i] += 1ull * i * v;\n\t\t} else {\n\t\t\tmdf(m - d + 1, -1ull * (m - d) * v, v);\n\t\t\tmodify(1, m - d, m - 1, v);\n\t\t}\n\t\tcalc();\n\t\tprintf(\"%llu\\n\", calcans());\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1638630392,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1609G A Stroll Around the Matrix"
    }
]