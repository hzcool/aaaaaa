[
    {
        "content": "**\u5f15\u7406**\uff1a\u6240\u6709\u672a\u786e\u5b9a\u6743\u503c\u7684\u8fb9\u4e2d\uff0c\u53ea\u6709\u4e00\u6761\u88ab\u786e\u5b9a\u4e3a $x$\uff0c\u5176\u4f59\u6240\u6709\u8fb9\u7684\u6743\u503c\u90fd\u88ab\u786e\u5b9a\u4e3a $0$\u3002\n\n**\u8bc1\u660e**\uff1a\u8003\u8651\u751f\u6210\u6811\u7684\u5f62\u6001\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\u3002\n\n* MST \u4f7f\u7528\u4e86\u6240\u6709\u672a\u786e\u5b9a\u6743\u503c\u7684\u8fb9\uff0c\u90a3\u4e48\u6839\u636e $\\bigoplus w_e = x$\uff0c\u53ef\u4ee5\u5f97\u5230 $\\sum w_e \\ge x$\u3002\u8fd9\u662f\u56e0\u4e3a\u603b\u662f\u5b58\u5728 $\\sum w \\ge \\bigoplus w$\u3002\u6545\u53ef\u4ee5\u5728 $w_k = x, w_i =0$\uff08$i\\ne k$\uff09\u7684\u60c5\u51b5\u4e0b\u53d6\u7b49\u3002\n* MST \u6ca1\u6709\u4f7f\u7528\u6240\u6709\u672a\u786e\u5b9a\u6743\u503c\u7684\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ee4\u6ca1\u88ab\u7528\u7684\u67d0\u6761\u8fb9\u7684\u6743\u503c\u4e3a $x$\uff0c\u5176\u4ed6\u8fb9\u7684\u6743\u503c\u90fd\u4e3a $0$\uff0c\u4ee3\u4ef7\u663e\u7136\u662f\u6700\u5c0f\u7684\u3002\n\n\u6211\u4eec\u5728\u6240\u6709\u672a\u786e\u5b9a\u6743\u503c\u7684\u8fb9\u4e0a\u9762\u8fdb\u884c DFS\u3002\u4ec5\u6839\u636e\u8fd9\u4e9b\u672a\u88ab\u786e\u5b9a\u6743\u503c\u7684\u8fb9\uff0c\u8fd9\u5f20\u56fe\u4f1a\u88ab\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u4e8e\u662f\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u5df2\u7ecf\u786e\u5b9a\u6743\u503c\u7684\u8fb9\u6765\u786e\u5b9a MST\u3002\u6211\u4eec\u5c06\u5df2\u7ecf\u786e\u5b9a\u6743\u503c\u7684\u8fb9\u5212\u5206\u4e3a 3 \u4e2d\u7c7b\u578b\uff1a\n\n1. MST \u4e2d\u5fc5\u987b\u4f7f\u7528\u7684\u8fb9\uff1a\u6309\u7167\u8fb9\u6743\u6392\u5e8f\u540e\uff0c\u6700\u5c0f\u7684\u90a3\u4e9b\u8fde\u63a5\u4e24\u4e2a\u4e0d\u540c\u8fde\u901a\u5757\u7684\u8fb9\u3002\n2. MST \u4e2d\u4e0d\u53ef\u80fd\u5b58\u5728\u7684\u8fb9\uff1a\u4e0e\u8fb9\u6743\u66f4\u5c0f\u7684\u8fb9\u5f62\u6210\u73af\u7684\u8fb9\u3002\u6362\u8a00\u4e4b\uff0c\u4e0d\u5728\u539f\u56fe MSF\uff08\u6700\u5c0f\u751f\u6210\u68ee\u6797\uff09\u4e2d\u7684\u8fb9\u3002\n3. \u4e0d\u5c5e\u4e8e\u524d\u4e24\u79cd\u60c5\u51b5\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u672a\u88ab\u786e\u5b9a\u6743\u503c\u7684\u8fb9\uff0c\u53ef\u4ee5\u5212\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a\n\n* \u672a\u88ab\u786e\u5b9a\u6743\u503c\u7684\u8fb9\u5f62\u6210\u4e86\u81f3\u5c11\u4e00\u4e2a\u73af\uff1a\u6211\u4eec\u53ef\u4ee5\u94a6\u5b9a\u8fd9\u4e2a\u73af\u4e0a\u7684\u4efb\u610f\u4e00\u6761\u8fb9\u4e3a $x$\uff0c\u5176\u4ed6\u4e3a $0$\uff0c\u90a3\u4e48\u4f7f\u7528\u8fd9\u4e2a\u73af\u4e0a\u7684\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u4ee5\u53ca\u7b2c\u4e00\u7c7b\u5df2\u7ecf\u786e\u5b9a\u8fb9\u6743\u7684\u8fb9\u6784\u9020 MST\u3002\n* \u672a\u88ab\u786e\u5b9a\u6743\u503c\u7684\u8fb9\u6ca1\u6709\u5f62\u6210\u73af\u3002\u5047\u5b9a\u6211\u4eec\u4ec5\u4ec5\u4f7f\u7528\u672a\u786e\u5b9a\u8fb9\u6743\u7684\u8fb9\u548c\u7b2c\u4e00\u7c7b\u5df2\u7ecf\u786e\u5b9a\u8fb9\u6743\u7684\u8fb9\u6784\u9020\u4e86\u4e00\u68f5 ST\uff0c\u90a3\u4e48\u4efb\u4f55\u7b2c\u4e09\u79cd\u7c7b\u578b\u7684\u8fb9\u53ef\u4ee5\u66ff\u6362\u4e00\u6761\u672a\u88ab\u786e\u5b9a\u6743\u503c\u7684\u8fb9\u3002\u8fd9\u662f\u56e0\u4e3a\u7b2c\u4e09\u79cd\u7c7b\u578b\u7684\u8fb9\u5fc5\u7136\u4f1a\u548c\u7b2c\u4e00\u79cd\u7c7b\u578b\u4ee5\u53ca\u672a\u786e\u5b9a\u6743\u503c\u7684\u8fb9\u6784\u6210\u4e00\u4e2a\u73af\uff08\u5426\u5219\u5b83\u5c31\u662f\u7b2c\u4e00\u7c7b\u6216\u8005\u7b2c\u4e8c\u7c7b\u4e86\uff09\u3002\u5982\u679c\u5b58\u5728\u67d0\u6761\u7b2c\u4e09\u79cd\u7c7b\u578b\u7684\u8fb9 $<x$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u66ff\u6362\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 5;\nstruct edge\n{\n\tint u, v, w;\n\tbool operator < (const edge &oth) const\n\t{\n\t\treturn w < oth.w;\n\t}\n} e[N << 1];\nint n, m, x, mn = INT_MAX;\nlong long ans, rem;\nstruct disjoint_sets_union\n{\n\tint fa[N];\n\tint Query(int p)\n\t{\n\t\tif(fa[p] == p) return p;\n\t\treturn fa[p] = Query(fa[p]);\n\t}\n\t\n} dsu;\nqueue<int> que;\nset<int> unvised, G[N];\nbool vis[N], type[N];\nvoid FindBlocks()\n{\n\tfor(int i = 1; i <= n; i++) if(!vis[i])\n\t{\n\t\tque.push(i);\n\t\tvis[i] = true;\n\t\tunvised.erase(i);\n\t\tdsu.fa[i] = i;\n\t\twhile(!que.empty())\n\t\t{\n\t\t\tint u = que.front();\n\t\t\tque.pop();\n\t\t\tfor(set<int>::iterator it = unvised.begin(); it != unvised.end();)\n\t\t\t{\n\t\t\t\tint v = *it;\n\t\t\t\tit++;\n\t\t\t\tif(G[u].count(v)) continue;\n\t\t\t\tdsu.fa[v] = u;\n\t\t\t\tunvised.erase(v);\n\t\t\t\tvis[v] = true;\n\t\t\t\tque.push(v);\n\t\t\t\trem--;\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin >> n >> m;\n\trem = 1LL * n * (n - 1) / 2 - m;\n\tfor(int i = 1; i <= n; i++) unvised.insert(i);\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tcin >> e[i].u >> e[i].v >> e[i].w;\n\t\tG[e[i].u].insert(e[i].v);\n\t\tG[e[i].v].insert(e[i].u);\n\t\tx ^= e[i].w;\n\t}\n\tsort(e + 1, e + m + 1);\n\tFindBlocks(); \n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint fau = dsu.Query(e[i].u), fav = dsu.Query(e[i].v);\n\t\tif(fau != fav)\n\t\t{\n\t\t\tdsu.fa[fau] = fav;\n\t\t\tans += e[i].w;\n\t\t\ttype[i] = 1; // type 1\n\t\t}\n\t}\n\tif(rem > 0) return printf(\"%lld\\n\", ans) && 0;\n\tfor(int i = 1; i <= n; i++) dsu.fa[i] = i;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint fau = dsu.Query(e[i].u), fav = dsu.Query(e[i].v);\n\t\tif(fau == fav) continue; // type 2\n\t\tdsu.fa[fau] = fav;\n\t\tif(!type[i]) { mn = e[i].w; break; } // type 3\n\t}\n\tprintf(\"%lld\\n\", ans + min(x, mn));\n\treturn 0; \n}\n```",
        "postTime": 1619183328,
        "uid": 51971,
        "name": "syksykCCC",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1508C \u3010Complete the MST\u3011"
    },
    {
        "content": "\u5206\u7c7b\u8ba8\u8bba\u505a\u6cd5 /lb \n\n\u9996\u5148\uff0c\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u6743\u503c\u53ea\u4f1a\u8d34\u5728\u4e00\u6761\u8fb9\u4e0a\uff0c\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\u8bc1\u660e\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u56fe\u8fb9\u5f88\u7a00\u758f\u4e14\u968f\u673a\uff0c\u90a3\u4e48\u7b54\u6848\u5927\u6982\u7387\u662f$0$\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u8865\u56fe\u7684\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u4e4b\u540e\u628a\u6743\u503c\u8d34\u5728\u5176\u4ed6\u8fb9\u4e0a\u3002\n\n\u90a3\u4e48\u4ec0\u4e48\u60c5\u51b5\u4e0b\u7b54\u6848\u4e0d\u4e3a$0$\u5462\uff1f\n\n\u53ef\u80fd\u662f\u8865\u56fe\u4e0d\u8fde\u901a\uff0c\u4e5f\u53ef\u80fd\u662f\u8865\u56fe\u521a\u597d\u4e3a\u4e00\u68f5\u751f\u6210\u6811\uff0c\u6211\u4eec\u627e\u4e0d\u5230\u591a\u4f59\u7684\u4e00\u6761\u8fb9\u8ba9\u6211\u4eec\u8d34\u6743\u503c\u3002\n\n\u60c5\u51b5\u6709\u70b9\u591a\uff0c\u6211\u4eec\u5148\u8003\u8651\u540e\u8005\u3002\n\n\u8865\u56fe\u521a\u597d\u4e3a\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4e5f\u5c31\u662f\u8bf4\u7ed9\u51fa\u56fe\u8fb9\u6570\u63a5\u8fd1\u5b8c\u5168\u56fe\uff0c\u8fd9\u4e2a\u65f6\u5019\u70b9\u6570\u4e0d\u4f1a\u8d85\u8fc7$700$\uff0c\u8fd9\u6570\u636e\u8303\u56f4\u53ef\u4ee5\u4e71\u641e\u3002\n\n\u679a\u4e3e\u628a\u6743\u503c\u7ed9\u5728\u54ea\u6761\u8fb9\u4e0a\uff0c\u6bcf\u6b21\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\u3002\n\n\u6ce8\u610f\u8fd9\u4e2a\u65f6\u5019\u8fb9\u6570\u53ef\u4ee5\u7f29\u5230$n$\u7684\u7ea7\u522b\uff0c\u5927\u6982\u662f\u5148\u505a\u4e00\u904dkrusal\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u3002\n\n\u518d\u8003\u8651\u524d\u4e00\u79cd\u60c5\u51b5\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u4e5f\u8981\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u662f\u5426\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u65e0\u7528\u8fb9\u8d34\u6743\u503c\uff0c\u5373\u8865\u56fe\u662f\u5426\u6709\u73af\u3002\n\n\u6709\u73af\u5373\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u628a\u6743\u503c\u8d34\u5728\u4e0d\u5728\u751f\u6210\u6811\u4e2d\u7684\u90a3\u6761\u8fb9\u3002\n\n\u5982\u679c\u627e\u4e0d\u5230\uff0c\u70b9\u6570\u4e5f\u662f\u5c11\u4e8e$700$\uff0c\u5957\u7528\u4e0a\u8ff0\u505a\u6cd5\u4e5f\u53ef\u4ee5\u505a\u3002\n\n\u5982\u679c\u627e\u5f97\u5230\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8865\u56fe\u7684\u8fde\u901a\u5757\u627e\u51fa\u6765\uff0c\u518d\u7528\u7ed9\u7684\u8fb9\u505akrusal\u3002\n\n\u600e\u4e48\u505a\u8865\u56fe\u7684\u8fde\u901a\u5757\uff0c\u8fd9\u662f\u4e00\u9053CF920E\u539f\u9898\uff0c\u5148\u5b66\u5b66\u90a3\u9898\uff0c\u86e4\u86e4\u3002\n\n\u8fd9\u4e2a\u61a8\u61a8\u7528\u7684\u662f\u5747\u644a\u505a\u6cd5\u3002\n\n\u5148\u627e\u5230\u8865\u56fe\u5ea6\u6570\u6700\u5927\u7684\u70b9\uff0c\u5c06\u5176\u5168\u90e8\u8054\u901a\uff0c\u81f3\u5c11\u6709$n-m/n$\u4e2a\u70b9\u8054\u901a\u4e86\uff0c\u518d\u5c06\u5269\u4f59$m/n$\u66b4\u529b$O(n)$\u505a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u644a\u662f$O(n+m)$\n\n\u4ee3\u7801 \uff1a \n\n```cpp\n#include<bits/stdc++.h> \n#define rg register \n#define fp( i , x , y ) for( rg int i=(x); i<=(y); ++i ) \n#define fq( i , x , y ) for( rg int i=(y); i>=(x); --i ) \n#define i60 long long \n#define inf 1e18 \nusing namespace std ; \nconst int N = 2e5+10 ;\nstruct node { \n  int x , y , z ; \n  friend bool operator < ( node A , node B ) { return A.z < B.z ; } \n} b[N] , c[N] , d[N] , e[N] ;   \nvector <int> v[N] ; \nint n , m , len , pre[N] , me , deg[N] , lend ; bool is[805][805] , vis[N] , vis2[N] ;   \nint f( int x ) { return pre[x] == x ? x : pre[x] = f(pre[x]) ; } \nbool too( int x , int y ) { return f(x) == f(y) ; } \nvoid merge( int x , int y ) { pre[f(x)] = f(y) ; } \ni60 calc( ) { \n  sort( e+1 , e+1+me ) ;  \n  fp( i , 1 , n ) pre[i] = i ; \n  i60 ans = 0 ;  \n  fp( i , 1 , me ) { \n    if( too( e[i].x , e[i].y ) ) continue ; \n\tmerge( e[i].x , e[i].y ) ; ans += e[i].z ;  \n  } \n  return ans ; \n}  \nvoid Sub2( ) { \n  fp( i , 1 , m ) { \n    deg[b[i].x] ++ ; deg[b[i].y] ++ ; \n    v[b[i].x].push_back(b[i].y) ; \n    v[b[i].y].push_back(b[i].x) ; \n  } \n  int id = 1 ; \n  fp( i , 1 , n ) pre[i] = i ; \n  fp( i , 1 , n ) if( deg[i] < deg[id] ) id = i ; \n  fp( i , 1 , (int)v[id].size() ) vis[v[id][i-1]] = 1 ; \n  fp( i , 1 , n ) if( !vis[i] ) pre[i] = id ; \n  fp( i , 1 , n ) { \n     if( !vis[i] || i == id ) continue ; \n     fp( j , 1 , n ) vis2[j] = 0 ; int tf = f(i) ; \n     fp( j , 1 , (int)v[i].size() ) vis2[v[i][j-1]] = 1 ; \n     fp( j , 1 , n ) if( !vis2[j] ) pre[f(j)] = tf ;  \n  } \n  sort( b+1 , b+1+m ) ; \n  i60 ans = 0 ; \n  fp( i , 1 , m ) { \n    if( too( b[i].x , b[i].y ) ) continue ; \n    ans += b[i].z ; merge( b[i].x , b[i].y ) ; \n  } \n  cout << ans << '\\n' ; \n} \nvoid Sub1( ) { \n  sort( b+1 , b+1+m ) ; \n  fp( i , 1 , n ) pre[i] = i ; \n  int al = 0 ;  \n  fp( i , 1 , m ) { \n    is[b[i].x][b[i].y] = 1 ; al ^= b[i].z ; \n\tif( too( b[i].x , b[i].y ) ) continue ; \n    merge( b[i].x , b[i].y ) ; c[++len] = b[i] ; \n  } \n  fp( i , 1 , n ) pre[i] = i ; \n  fp( i , 1 , n ) fp( j , i+1 , n ) { \n    if( is[i][j] || is[j][i] ) continue ; \n    if( too( i , j ) ) { Sub2() ; return ; } \n    merge( i , j ) ; d[++lend] = (node){ i , j , 0 } ; \n  } \n  i60 ans = inf ; \n  fp( i , 1 , lend ) { \n    me = 0 ; \n    fp( j , 1 , len ) e[++me] = c[j] ; \n    fp( j , 1 , lend ) { e[++me] = d[j] ; if( j == i ) e[me].z = al ; } \n\tans = min( ans , calc() ) ;  \n  } \n  cout << ans << '\\n' ; \t\n} \nsigned main( ) { \n  ios::sync_with_stdio(false) ; \n  cin.tie(0) ; \n  cin >> n >> m ; \n  fp( i , 1 , m ) cin >> b[i].x >> b[i].y >> b[i].z ; \n  if( n <= 705 ) Sub1() ; else Sub2() ; \n} \n```\n\n\u8fd9\u4e2a\u61a8\u6279\u8003\u573a\u5b8c\u5168\u56fe\u70b9\u6570\u5224\u9519\u4e86\uff0c$700$\u5f04\u6210$500$\uff0c\u4e0b\u5927\u5206\u86e4\u86e4\u86e4\u3002",
        "postTime": 1618717979,
        "uid": 100114,
        "name": "hater",
        "ccfLevel": 0,
        "title": "CF1508C Complete the MST"
    },
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u5b9a $n$ \u4e2a\u70b9\u7684\u65e0\u5411\u5b8c\u5168\u56fe\uff0c\u5176\u4e2d $m$ \u6761\u8fb9\u7684\u6743\u503c\u5df2\u7ed9\u5b9a\uff0c\u4e14\u4e3a\u6b63\u503c\u3002\n\n\u4f60\u9700\u8981\u7ed9\u5269\u4e0b\u7684\u8fb9\u8d4b\u4e0a\u6743\u503c\uff08\u975e\u8d1f\uff09\uff0c\u5728\u6ee1\u8db3\u6240\u6709\u8fb9\uff08$\\frac{n\\cdot (n-1)}{2}$ \u6761\uff09\u6743\u503c\u5f02\u6216\u8d77\u6765\u4e3a $0$ \u7684\u60c5\u51b5\u4e0b\uff0c\u8ba9\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u6700\u5c0f\u3002\n\n---\n\n### Solution\n\n##### Part 1 \u4ec5\u6709\u4e00\u6761\u8fb9\u4f1a\u88ab\u9644\u4e0a\u503c\n\n\u8bbe\u90a3\u4e9b\u5df2\u7ecf\u8d4b\u4e0a\u6743\u503c\u7684\u8fb9\u7684\u5f02\u6216\u548c\u4e3a $x$\u3002\n\n\u5bf9\u4e8e\u90a3\u4e9b\u6ca1\u6709\u786e\u5b9a\u6743\u503c\u7684\u8fb9\uff0c\u6211\u4eec\u4e00\u5b9a\u662f\u5c06\u5176\u4e2d\u4e00\u6761\u8fb9\u8d4b\u4e3a $x$\uff0c\u5e76\u4e14\u5c06\u5269\u4e0b\u7684\u8fb9\u5b9a\u4e3a $0$\u3002\n\n\u5426\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u770b\u505a\u4e00\u6761\u8fb9\u6743\u4e3a $x$ \u7684\u8fb9\u5728\u9010\u6e10\u548c\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u8fdb\u884c\u6743\u503c\u4ea4\u6362\uff0c\u8fd9\u6837\u663e\u7136 $\\texttt{MST}$ \u53ea\u53ef\u80fd\u4f1a\u53d8\u5927\u3002\n\n---\n\n##### Part 2 \u7a20\u5bc6\u56fe\u7684\u60c5\u51b5\n\n\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff1a\u5269\u4e0b\u6ca1\u6709\u8d4b\u4e0a\u8fb9\u6743\u7684\u8fb9\u548c $n$ \u540c\u9636\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u54ea\u4e00\u6761\u8fb9\u88ab\u4fee\u6539\u6210\u4e86 $x$\uff0c\u7136\u540e\u8dd1\u4e00\u904d $\\texttt{MST}$\uff0c\u590d\u6742\u5ea6\u5927\u81f4\u53ef\u4ee5\u770b\u505a $\\operatorname O(n\\sqrt n\\log n)$ \u7684\uff0c\u8fd9\u91cc\u7684 $n$ \u662f $2\\cdot 10^5$\u3002\n\n\uff08\u6211\u8003\u573a\u4e0a\u6ca1\u65f6\u95f4\u60f3\u4f18\u5316\u4e86\uff0c\u5c31\u5199\u4e86\u8fd9\u4e48\u4e11\u964b\u7684\u590d\u6742\u5ea6\uff0c\u4e8b\u5b9e\u4e0a\u5b83\u8dd1\u5f97\u98de\u5feb\uff09\n\n---\n\n##### Part 3 \u7a00\u758f\u56fe\u7684\u60c5\u51b5\n\n\u5982\u679c\u5269\u4e0b\u6ca1\u8d4b\u503c\u7684\u8fb9 $\\ge n$\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8fb9\u6784\u6210\u7684\u65b0\u56fe**\u4e00\u5b9a\u5b58\u5728\u73af**\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06 $x$ \u8fd9\u4e2a\u8fb9\u6743\u585e\u5230\u4efb\u610f\u4e00\u6761\u73af\u4e0a\u7684\u8fb9\u4e0a\uff0c\u5b83\u4e0d\u4f1a\u5bf9 $\\texttt{MST}$ \u4ea7\u751f\u5f71\u54cd\u3002\n\n\u73b0\u5728\u95ee\u9898\u5728\u4e8e\uff1a\u6211\u4eec\u5982\u4f55\u5c06\u8fd9\u4e2a \u201c\u8865\u56fe\u201d\uff0c\u8fb9\u6570\u5982\u6b64\u591a\u7684\u4e1c\u897f\u63d0\u51fa\u6765\u4e00\u4e2a\u68ee\u6797\u3002\n\n\u4e8b\u5b9e\u4e0a\u8fd9\u662f\u4e00\u4e2a [\u539f\u9898](https://www.luogu.com.cn/problem/CF920E)\u3002\n\n\u7136\u540e\u518d\u628a\u90a3\u4e9b\u521d\u59cb\u6709\u8fb9\u6743\u7684\u8fb9\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u52a0\u5165\uff0c\u8dd1 Kruskal \u5373\u53ef\u3002\n\n---\n\n### Code\n\n\u975e\u5e38\u4e11\uff0c\u56e0\u4e3a\u662f\u8003\u573a\u4ee3\u7801\uff08\n\n\u771f\u5fc3\u4e0d\u5efa\u8bae\u4f60\u4eec\u501f\u9274\uff0c\u9664\u975e\u4f60\u4eec\u6709\u5947\u602a\u7684\u5ba1\u7f8e\u7656\u597d\u3002\n\n\u8fdb\u884c\u4e86\u4e00\u4e9b\u4fee\u6539\uff0c\u56e0\u4e3a\u539f\u6765\u7684\u8003\u573a\u4ee3\u7801\u662f\u6709\u9505\u7684\u53ef\u80fd\u4f1a\u6302\u6389\uff08\n\n~~\u5927\u6982\u662f\u6570\u636e\u6bd4\u8f83\u6c34\u8d5b\u573a\u4e0a\u628a\u6211\u653e\u8fc7\u53bb\u4e86~~\n\n```cpp\nint n,m;\nint u[N];\nint v[N];\nint w[N];\nint f[N];\nint du[N];\nint num[N];\nmap<int,bool>qy[N];\nvector<pair<int,int> >d;\ninline bool myru_num(int x,int y){return w[x]<w[y];}\ninline int find(int i){return f[i]==i?i:(f[i]=find(f[i]));}\ninline void work()\n{\n    rin>>n>>m;for(int i=1;i<=n;i++)f[i]=i,du[i]=n-1;\n    int val=0;bool tag=false;\n    for(int i=1;i<=m;i++)\n    {\n        rin>>u[i]>>v[i]>>w[i];qy[u[i]][v[i]]=qy[v[i]][u[i]]=true;\n        val^=w[i];num[i]=i;du[u[i]]--;du[v[i]]--;\n    }\n    sort(num+1,num+m+1,myru_num);\n    \n    if((1LL*n*(n-1)>>1)>=n+m)\n    {\n        int st=0;\n        for(int i=1;i<=n;i++)if(du[i]>du[st])st=i;\n        for(int i=1;i<=n;i++)if(!qy[i][st])f[find(i)]=st;\n        for(int i=1;i<=n;i++)\n        if(find(i)!=st)\n        {\n            for(int j=1;j<=n&&find(i)!=st;j++)if(find(j)!=find(i)&&!qy[i][j])f[find(i)]=find(j);\n        }\n        LL ans=0;\n        for(int i=1;i<=m;i++){int now=num[i];if(find(u[now])!=find(v[now]))ans+=w[now],f[find(u[now])]=find(v[now]);}\n        printf(\"%lld\\n\",ans);\n        return;\n    }\n\n    LL ans=0x3f3f3f3f3f3f3f3f;\n    for(int i=1;i<=n;i++)for(int j=i+1;j<=n;j++)if(!qy[i][j])d.push_back(make_pair(i,j));\n    for(vector<pair<int,int> >::iterator to=d.begin(),i;to!=d.end();to++)\n    {\n        LL sum=0;for(int j=1;j<=n;j++)f[j]=j;\n        for(i=d.begin();i!=d.end();i++)if(i!=to)f[find(i->first)]=find(i->second);\n        int j;for(j=1;j<=m;j++){int now=num[j];if(w[now]>=val)break;if(find(u[now])!=find(v[now]))f[find(u[now])]=find(v[now]),sum+=w[now];}\n        if(find(to->first)!=find(to->second))f[find(to->first)]=find(to->second),sum+=val;\n        for(;j<=m;j++){int now=num[j];if(find(u[now])!=find(v[now]))f[find(u[now])]=find(v[now]),sum+=w[now];}\n        ans=min(ans,sum);\n    }\n    printf(\"%lld\\n\",ans);\n    return;\n}\n```",
        "postTime": 1618594793,
        "uid": 73551,
        "name": "zjjws",
        "ccfLevel": 7,
        "title": "CF1508C - Complete the MST"
    },
    {
        "content": "\u9898\u610f:\u4f60\u6709\u4e00\u4e2a\u5b8c\u5168\u56fe,\u5176\u4e2d$m$\u6761\u8fb9\u7684\u8fb9\u6743\u662f\u7ed9\u5b9a\u7684,\u4f60\u9700\u8981\u7ed9\u5269\u4e0b\u7684\u8fb9\u8d4b\u6743\u503c,\u4f7f\u5f97$xor$\u548c\u4e3a$0$,\u5e76\u4e14\u4f7f\u5f97\u5bf9\u4e8e\u8fd9\u4e2a\u5b8c\u5168\u56fe\u6c42\u51fa\u7684$mst$\u6700\u5c0f,\u8f93\u51fa\u6700\u5c0f\u7684$mst$\u8fb9\u6743\u548c.\n\n\u9996\u5148\u6709\u4e00\u4e2a\u7ed3\u8bba\u5c31\u662f,\u6211\u4eec\u4e00\u5b9a\u53ea\u4f1a\u7528\u4e00\u6761\u8fb9\u6765\u4f7f\u5f97$xor$\u548c\u4e3a$0$,\u6211\u4eec\u8bb0\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u4e3a$mm$.\n\n\u6211\u4eec\u8003\u8651\u600e\u4e48\u66b4\u529b\u5b9e\u73b0\u8fd9\u4e2a\u4e1c\u897f,\u6211\u4eec\u5148\u6c42\u51fa\u8fd9\u4e1c\u897f\u7684\u8865\u56fe,\u7136\u540e\u8865\u56fe\u4e2d\u7684\u8fb9\u6743\u503c\u90fd\u662f0(\u5148\u4e0d\u8003\u8651\u7279\u6b8a\u8fb9).\u7136\u540e\u6211\u4eec\u66b4\u529b\u8dd1kruskal,\u53d1\u73b0\u6211\u4eec\u4f1a\u5148\u628a\u8865\u56fe\u7f29\u6210\u4e00\u4e2a\u8fde\u901a\u5757,\u7136\u540e\u518d\u5bf9\u5269\u4e0b\u7684k\u6761\u8fb9\u7ee7\u7eed\u8dd1kruskal,\u7136\u540e\u5bf9\u4e8e\u7279\u6b8a\u8fb9,\u6211\u4eec\u5224\u4e0b\u6709\u6ca1\u6709\u73af,\u5982\u679c\u6709\u73af\u7279\u6b8a\u8fb9\u5c31\u6ca1\u6709\u610f\u4e49,\u5982\u679c\u6ca1\u6709\u73af,\u6211\u4eec\u5219\u9700\u8981\u5c06\u7b54\u6848\u52a0\u4e0a **\u4e0e\u5269\u4e0b\u7684\u80fd\u66ff\u6362\u7684\u6ca1\u9009\u8fc7\u7684\u8fb9**(\u6ca1\u9009\u8fc7\u6307\u6ca1\u5728kruskal\u4e2d\u51fa\u73b0\u7684\u8fb9,\u80fd\u66ff\u6362\u6307\u5b83\u80fd\u66ff\u6362\u4e00\u6761\u8865\u56fe\u8fb9)\u548c$mm$\u53d6\u4e2a$min$.\n\n\u5bf9\u4e8e\u600e\u4e48\u7ef4\u62a4\u8fd9\u4e2a\u8fb9,\u6211\u4eec\u5c31\u518d\u5f00\u4e2a\u5e76\u67e5\u96c6,\u5c06\u6811\u8fb9\u7f29\u8d77\u6765,\u7136\u540e\u5982\u679c\u5269\u4e0b\u672a\u9009\u4e2d\u7684\u8fb9\u4e24\u7aeff\u4e0d\u76f8\u540c\u5c31\u662f\u6709\u6548\u8fb9,\u539f\u7406\u5c31\u662f\u5982\u679c\u4f60f\u76f8\u540c,\u90a3\u4e48\u4f60\u672a\u9009\u4e2d\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u540e\u6765\u8dd1kruskal\u5bfc\u81f4\u4e86\u5b83\u51fa\u73b0\u4e86\u73af\u4e2d,\u800c\u4e0d\u662f\u8865\u56fe\u5bfc\u81f4\u4ed6\u51fa\u73b0\u5728\u73af\u4e2d.\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u6c42\u8865\u56fe\u8fde\u901a\u5757,\u8fd9\u4e2a\u53ef\u4ee5\u7528$set$\u7ef4\u62a4\u4e0b.\u5c31\u4f18\u5316\u5230$O(mlogm)$,\u5177\u4f53\u600e\u4e48\u5b9e\u73b0\u53ef\u4ee5\u767e\u5ea6\u81ea\u5b66\u4e0b(\u6211\u8003\u573a\u4e0a\u73b0\u5b66\u4e86\u8fd9\u4e2a,~~\u7136\u540e\u65f6\u95f4\u5c31\u4e0d\u591f\u7528\u4e86~~).\n\n\u603b\u7ed3\u4e00\u4e0b:\u4f60\u5148\u6c42\u51fa\u8865\u56fe\u8fde\u901a\u5757,\u7136\u540e\u66b4\u529b\u8dd1kruskal,\u6c42\u4e0b\u662f\u5426\u6709\u8865\u56fe\u73af,\u5982\u679c\u6ca1\u6709\u4f60\u5219\u9700\u8981\u518d\u627e\u4e0b\u662f\u5426\u6709\u53ef\u66ff\u6362\u8fb9,\u7136\u540e\u4e0e$mm$\u53bb\u4e2amin\u5373\u53ef\n\n\n\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=214514;\n#define rep(i,j,k) for(int i=(j);i<=(k);i++)\n#define per(i,j,k) for(int i=(j);i>=(k);i--)\n#define int long long\nstruct ask{int x,y,z;}q[N];\nint n,m,sp,ss,st,as,sm,mm,ct,v[N],f[N],gg[N],al[N],c[N];\nset<int>s,G[N];\nset<int>::iterator it;\nbool cmp(ask a,ask b){return a.z<b.z;}\nint get(int x){return gg[x]==x?x:gg[x]=get(gg[x]);} \nint find(int x){return f[x]==x?x:f[x]=find(f[x]);}\nvoid bfs(int x){\n    queue<int>q;s.erase(x);\n    q.push(x);f[x]=ss;\n    while(!q.empty()){\n        int k=q.front();q.pop();\n        for(it = s.begin();it != s.end();){\n            int to = *it++;\n            if(!G[to].count(k)){s.erase(to);q.push(to);f[to]=ss;}\n        }\n    }\n}//\u6c42\u8865\u56fe\u8fde\u901a\u5757\nsigned main(){scanf(\"%lld%lld\",&n,&m);\n\trep(i,1,n)s.insert(i),gg[i]=i;\n\trep(i,1,m){scanf(\"%lld%lld%lld\",&q[i].x,&q[i].y,&q[i].z)\n\t\t,mm^=q[i].z,G[q[i].x].insert(q[i].y),G[q[i].y].insert(q[i].x);\n\t}rep(i,1,n)if(!f[i])ct++,ss=i,bfs(i);\n    rep(i,1,n)c[f[i]]++;\n\trep(i,1,m)if(f[q[i].x]==f[q[i].y])al[f[q[i].y]]++;\n\trep(i,1,n)if(c[f[i]]<=(1ll*(c[f[i]]*(c[f[i]]-1)/2)-al[f[i]]))sp=1;//\u5224\u8865\u56fe\u73af\n    sort(q+1,q+m+1,cmp);st=2e9;\n\trep(i,1,m){int x=find(q[i].x),y=find(q[i].y);\n\t\tif(x==y){v[i]=1;continue;}\n\t\tf[x]=y;as+=q[i].z;\n\t}\n\trep(i,1,m)if(!v[i])gg[get(q[i].x)]=get(q[i].y);//\u5c06\u6811\u8fb9\u7f29\u8d77\u6765\n\trep(i,1,m)if(v[i]&&get(q[i].x)!=get(q[i].y))st=min(st,q[i].z);//\u5982\u679cf\u4e0d\u76f8\u540c,\u90a3\u4e48\u8bf4\u660e\u4ed6\u53ef\u4ee5\u66ff\u6362\u8fb9\n\tif(!sp)as+=min(st,mm);printf(\"%lld\\n\",as);\n} \n```\n\n\n\n\n\u5c0f\u63d2\u66f2:\u6211\u8003\u573a\u4e0a\u662f\u8fd9\u6837\u5b9e\u73b0\u5224\u8865\u56fe\u73af\u7684\n```cpp\nrep(i,1,n)if(c[f[i]]<=(1ll*(c[f[i]]*(c[f[i]]-1)/2)-al[f[i]]))sp=1;\n```\n\u4f46\u662f\u6211\u5c06\u5b83\u653e\u5728\u4e86kruskal\u7684\u540e\u9762,\u7136\u540e\u5c31\u559c\u95fb\u4e50\u89c1\u7684\u5224\u6302\u4e86,~~(\u75db\u5931rk1)~~\n",
        "postTime": 1618626158,
        "uid": 53852,
        "name": "\u5f26\u5dfb\u3053\u3053\u308d",
        "ccfLevel": 0,
        "title": "CF1509F (1508C) Complete the MST"
    },
    {
        "content": "\u4ee4\u6240\u6709\u7ed9\u5b9a\u8fb9\u7684\u5f02\u6216\u548c\u4e3a $x$ \u3002\n\n\u90a3\u4e48\u4e00\u5b9a\u53ea\u6709\u4e00\u6761\u975e\u7ed9\u5b9a\u8fb9\u4e3a $x$ \uff0c\u5176\u4ed6\u975e\u7ed9\u5b9a\u8fb9\u4e00\u5b9a\u5168\u90e8\u4e3a $0$ \u3002\n\n\u53cd\u8bc1\uff0c\u5047\u5b9a\u6709 $k>1$ \u6761\u6307\u5b9a\u8fb9\u975e\u96f6\uff0c\u5982\u679c\u7b54\u6848\u7684\u751f\u6210\u6811\u5305\u542b\u6240\u6709 $k$ \u6761\u8fb9\uff0c\u5219\u7b49\u4ef7\u4e8e\u6307\u5b9a\u4e00\u6761\u8fb9\u4e3a $x$ \uff0c\u5426\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4\u5305\u542b\u7684\u6307\u5b9a\u8fb9\u4e3a $0$ \uff0c\u7b54\u6848\u4e00\u5b9a\u66f4\u4f18\u3002\n\n\u5982\u679c\u975e\u7ed9\u5b9a\u8fb9\u6210\u73af\uff0c\u5219\u7b49\u4ef7\u4e8e\u6240\u6709\u975e\u7ed9\u5b9a\u8fb9\u4e3a $0$ \u3002\n\n\u53cd\u8bc1\uff0c\u5982\u679c\u7b54\u6848\u751f\u6210\u6811\u5305\u542b\u4e3a $x$ \u7684\u8fb9\uff0c\u5219\u52a0\u5165\u6210\u73af\u7684\u6761\u8fb9\uff0c\u5220\u53bb\u4e3a $x$ \u7684\u8fb9\u4f7f\u5f97\u7b54\u6848\u66f4\u4f18\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u3002\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u6709\u73af\u7684\uff0c\u6211\u4eec\u7528\u6240\u6709\u975e\u7ed9\u5b9a\u8fb9\u5c06\u539f\u56fe\u4e0a\u7684\u8fde\u901a\u5757\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u518d\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\u6ca1\u6709\u73af\u7684\uff0c\u6211\u4eec\u4e5f\u7528\u6240\u6709\u975e\u7ed9\u5b9a\u8fb9\u5c06\u539f\u56fe\u4e0a\u7684\u8fde\u901a\u5757\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u3002\u4f46\u662f\u5f97\u5230\u7684\u751f\u6210\u6811\u4e2d\u5b58\u5728\u4e00\u6761\u8fb9\u6743\u503c\u4e3a $x$ \u6211\u4eec\u6ca1\u6709\u7b97\u8fdb\u53bb\u3002\n\n\u5bf9\u4e8e\u8fd9\u68f5\u751f\u6210\u6811\u4e0a\u7684\u7ed9\u5b9a\u8fb9\u5c06\u8fde\u901a\u5757\u7f29\u70b9\u3002\u7136\u540e\u5bf9\u4e8e\u4e0d\u5728\u5176\u4e2d\u7684\u7ed9\u5b9a\u8fb9\uff0c\u5982\u679c\u5c5e\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u8fde\u901a\u5757\uff0c\u5219\u53ef\u4ee5\u7528\u5b83\u66ff\u6362\u539f\u6765\u7684 $x$ \u8fb9\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pre(i,a,b) for(int i=a;i>=b;i--)\n#define N 200005\n#define int long long\nusing namespace std;\nint n,m,fa[N],in[N],f[N],cir,sum,ans,v[N];map<int,int>h[N];\nstruct node{\n\tint u,v,w;\n\tbool operator<(const node o)const{return w<o.w;}\n}e[N];\nint get(int x){return fa[x]==x?x:fa[x]=get(fa[x]);}\nint g(int x){return f[x]==x?x:f[x]=g(f[x]);}\nvoid solve(){\n\tint st=1;\n\trep(i,1,n)if(in[i]>in[st])st=i;\n\trep(i,1,n)if(i!=st&&!h[st].count(i))cir--,fa[i]=st,v[i]=1;\n\trep(i,1,n)if(!v[i]){\n\t\trep(j,1,n)if(i!=j&&!h[i].count(j)&&get(i)!=get(j))cir--,fa[get(i)]=get(j);\n\t}\n}\nsigned main(){\n\tscanf(\"%lld%lld\",&n,&m);cir=min(n*(n-1)/2-m,n+1);\n\trep(i,1,n)fa[i]=f[i]=i,in[i]=i-1;\n\trep(i,1,m)scanf(\"%lld%lld%lld\",&e[i].u,&e[i].v,&e[i].w),sum^=e[i].w,\n\t\th[e[i].u][e[i].v]=h[e[i].v][e[i].u]=1,in[e[i].u]--,in[e[i].v]--;\n\tsort(e+1,e+m+1);solve();int mn=0x7fffffff;\n\trep(i,1,m)if(get(e[i].u)!=get(e[i].v))ans+=e[i].w,fa[get(e[i].u)]=get(e[i].v),f[g(e[i].u)]=g(e[i].v);\n\trep(i,1,m)if(g(e[i].u)!=g(e[i].v))mn=min(mn,e[i].w);\n\tif(cir)printf(\"%lld\\n\",ans);else printf(\"%lld\\n\",ans+min(mn,sum));\n\treturn 0;\n}\n```",
        "postTime": 1620638779,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF1508C Complete the MST"
    },
    {
        "content": "[0-1 MST](https://www.luogu.com.cn/problem/CF1242B) \u5f3a\u5316\u7248\uff0c\u8003\u8651\u8865\u56fe\u8fde\u901a\u5757\u3002\n\n\u5f02\u6216\u548c\u7b49\u4e8e $0$ \u5176\u5b9e\u662f\u865a\u7684\uff0c\u56e0\u4e3a\u4f46\u51e1\u6709 $1$ \u6761\u672a\u7ed9\u5b9a\u8fb9\u4e00\u5b9a\u7528\u4e0d\u5230\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ee4\u5b83\u4e3a\u7ed9\u5b9a\u8fb9\u5f02\u6216\u548c\uff0c\u89c4\u907f\u8fd9\u4e2a\u9650\u5236\u4e86\u3002\n\n\u5f62\u5f0f\u5316\u5730\u8bf4\uff0c\u8fd9\u4e2a\u8865\u56fe\u7684\u8fde\u901a\u5757\u4e2d\u6709\u81f3\u5c11\u4e00\u4e2a\u8fde\u901a\u5757\u6709\u73af\u3002\n\n\u53e6\u4e00\u65b9\u9762\uff0c\u4f1a\u53d1\u73b0\u82e5\u90fd\u6ca1\u6709\u73af\uff0c\u8865\u56fe\u5c31\u662f\u68ee\u6797\uff0c\u8fb9\u6570\u4e0d\u8d85\u8fc7 $n - 1$\u3002\u4e8e\u662f\u8fb9\u6570\u81f3\u5c11\u4e3a $\\frac{n(n-1)}{2}-n+1=O(n^2)$\u3002\u8003\u8651\u679a\u4e3e\u5176\u4e2d\u4e00\u6761\u8fb9\u8d34\u6743\u503c\u518d\u8dd1 Kruskal\u3002$O(nm\\log n)$ \u663e\u7136\u4e0d\u4f18\u79c0\uff0c\u4f46\u662f\u6bcf\u6b21\u65e2\u7136\u53ea\u6539\u53d8\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u6bcf\u6b21\u4fee\u6539\u88ab\u8d34\u6743\u503c\u7684\u8fb9\uff0c\u62ff\u4e2a `vector` \u6734\u7d20\u5730\u79fb\u52a8\u53d1\u751f\u66f4\u6539\u7684\u4e24\u6761\u8fb9\u7684\u4f4d\u7f6e\uff0c\u5c31\u662f $O(nm)=O(m\\sqrt{m})$\u3002\n\n\u5b9e\u9645\u4e0a\u662f\u6839\u53f7\u5206\u6cbb\u3002\u540e\u9762\u90e8\u5206\u4e5f\u53ef\u4ee5\u5728\u5206\u7c7b\u8ba8\u8bba\u540e\u505a\u5230 $O(m\\log n)$\u3002\n\n",
        "postTime": 1684238418,
        "uid": 62440,
        "name": "MuelsyseU",
        "ccfLevel": 0,
        "title": "CF1508C Complete the MST \u9898\u89e3"
    }
]