[
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u5b9a$n$\u4e2a\u51f8\u5305\uff0c\u591a\u6b21\u8be2\u95ee\uff0c\u6c42\u7f16\u53f7$[l,r]$\u4e4b\u95f4\u7684\u6240\u6709\u51f8\u5305\u505a\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5f97\u5230\u7684\u51f8\u5305\u7684\u8fb9\u6570\u3002\n \n\u663e\u7136\u4e24\u4e2a\u51f8\u5305\u7684\u6240\u6709\u6309\u7167\u6781\u89d2\u5e8f\u8fde\u8d77\u6765\u7684\u8fb9\uff0c\u659c\u7387\u9012\u589e\u3002\n\n\u7136\u540e\u8003\u8651\u95f5\u53ef\u592b\u65af\u57fa\u548c\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u5c31\u662f\u6839\u636e\u6781\u89d2\u5e8f\u5f52\u5e76\u3002\n\n\u6240\u4ee5\u76f8\u540c\u659c\u7387\u7684\u8fb9\uff0c\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21\uff08\u91cd\u590d\u7684\u70b9\u90fd\u7701\u7565\u4e86\uff09\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u51f8\u5305\uff0c\u6781\u89d2\u6392\u5e8f\uff0c\u6c42\u51fa\u76f8\u90bb\u70b9\u7684\u659c\u7387\uff0c\u7136\u540e\u6bcf\u4e00\u6b21\u8be2\u95ee\u7b49\u4ef7\u4e8e\u6c42\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u659c\u7387\u3002\n\n\u76f4\u63a5\u79bb\u7ebf+\u6811\u72b6\u6570\u7ec4\u5373\u53ef\u3002 \n\n### \u7ec6\u8282\n\n\u6ce8\u610f$+0,-0$\u7b97\u4e24\u79cd\uff0c$+\\infty,-\\infty$ \u7b97\u4e24\u79cd\u3002  \n \n\u4eff\u4f5b\u7ed9\u5b9a\u7684\u51f8\u5305\u5df2\u7ecf\u6781\u89d2\u6392\u5e8f\u597d\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u8fde\u5c31\u53ef\u4ee5\u4e86\uff1f\n\u6ce8\u610f\u79bb\u6563\u5316\u3002 \n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define ljc 998244353\nusing namespace std;\n#ifdef Fading\n#define gc getchar\n#endif\n#ifndef Fading\ninline char gc(){\n\tstatic char now[1<<16],*S,*T;\n\tif (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n\treturn *S++;\n}\n#endif\ninline ll read(){\n    register ll x=0,f=1;char ch=gc();\n    while (!isdigit(ch)){if(ch=='-')f=-1;ch=gc();}\n    while (isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=gc();}\n    return (f==1)?x:-x;\n}\nmap<pair<int,int>,int> has;\nint n,m,col[620001],id,cnt,K[620001][2],tr[620001],L[620001],R[620001];\nint las[620001],pre[620001];\ninline int query(int x){\n\tint ans=0;\n\tfor (;x;x-=x&-x) ans+=tr[x];\n\treturn ans;\n}\ninline void add(int x,int y){\n\tif (!x) return;  \n\tfor (;x<=cnt;x+=x&-x) tr[x]+=y;\n}\nint ans[1000001];\nstruct QUE{\n\tint l,r,id;\n}q[1000001];\ninline bool cmp(QUE a,QUE b){\n\treturn (a.r==b.r?a.l<b.l:a.r<b.r);\n}\nsigned main(){\n\tn=read();\n\tfor (int i=1;i<=n;i++){\n\t\tL[i]=cnt+1;R[i]=L[i]+read()-1;\n\t\tfor (int j=1;j<=R[i]-L[i]+1;j++){\n\t\t\tK[j][0]=read();K[j][1]=read();\n\t\t}\n\t\tfor (int j=2;j<=R[i]-L[i]+1;j++){\n\t\t\tpair<int,int> P=make_pair(K[j][1]-K[j-1][1],K[j][0]-K[j-1][0]);\n\t\t\tint G=__gcd(abs(P.first),abs(P.second));\n\t\t\tP.first/=G;P.second/=G; \n\t\t\tif (!has.count(P)) has[P]=++id;\n\t\t\tcol[++cnt]=has[P];\n\t\t}\n\t\tpair<int,int> P=make_pair(K[1][1]-K[R[i]-L[i]+1][1],K[1][0]-K[R[i]-L[i]+1][0]);\n\t\tint G=__gcd(abs(P.first),abs(P.second));\n\t\tP.first/=G;P.second/=G; \n\t\tif (!has.count(P)) has[P]=++id;\n\t\tcol[++cnt]=has[P];\n\t}\n\tm=read();\n\tfor (int i=1;i<=m;i++){\n\t\tq[i].id=i;q[i].l=L[read()];q[i].r=R[read()];\n\t}\n\tfor (int i=1;i<=cnt;i++){\n\t\tpre[i]=las[col[i]];las[col[i]]=i;\n\t}\n\tsort(q+1,q+1+m,cmp);\n\tfor (int tmp=1,i=1;i<=m;i++){\n\t\tfor (;tmp<=q[i].r;tmp++) add(tmp,1),add(pre[tmp],-1);\n\t\tans[q[i].id]=query(q[i].r)-query(q[i].l-1);\n\t}\n\tfor (int i=1;i<=m;i++){\n\t\tprintf(\"%d\\n\",ans[i]);\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1563512848,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1195F \u3010Geometers Anonymous Club\u3011"
    },
    {
        "content": "## \u89e3\u6790\n\n\u8003\u8651\u505a\u95f5\u53ef\u592b\u65af\u57fa\u548c\u7684\u8fc7\u7a0b\uff1a\u5c31\u662f\u5c06\u8fb9\u5411\u91cf\u6392\u5e8f\uff1b\u800c\u65b9\u5411\u76f8\u540c\u7684\u8fb9\u5411\u91cf\u6392\u5e8f\u540e\u90fd\u662f\u76f8\u90bb\u7684\uff0c\u4f1a\u6210\u4e3a**\u540c\u4e00\u6761\u8fb9**\n\n\u4e8e\u662f\u6bcf\u6b21\u8be2\u95ee\u5b9e\u8d28\u4e0a\u5c31\u662f\u5728\u6c42\u533a\u95f4\u5185\u6240\u6709\u51f8\u5305\u7684\u4e0d\u540c\u7684\u8fb9\u5411\u91cf\u79cd\u7c7b\u6570\n\n\u8003\u8651\u7ed9\u6bcf\u79cd\u8fb9\u5411\u91cf\u67d3\u4e0a\u540c\u4e00\u989c\u8272\uff0c\u4e8e\u662f\u6211\u4eec\u9700\u8981\u505a\u7684\u5b9e\u9645\u4e0a\u5c31\u662f\u7edf\u8ba1\u533a\u95f4\u989c\u8272\u4e2a\u6570\uff08\u53ea\u662f\u8fd9\u91cc\u7684\u533a\u95f4\u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u6709\u591a\u7ec4\u989c\u8272...\uff09\n\n\u53ef\u4ee5\u76f4\u63a5\u79bb\u7ebf\u7ebf\u6bb5\u6811\u641e\uff1b\u4f46\u83ab\u961f\u4e5f\u53ef\u4ee5\n\n\u53ef\u80fd\u7b2c\u4e00\u5370\u8c61\u4f1a\u89c9\u5f97\u590d\u6742\u5ea6\u6bd4\u8f83\u5947\u602a\u3002\u5b9e\u9645\u4e0a\u53ea\u8981\u8003\u8651\u5c06\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u51f8\u5305\u5185\u7684\u8fb9\u5143\u7d20\u90fd \u201c\u5c55\u5f00\u201d\uff0c\u4e8e\u662f\u6bcf\u7ec4\u8be2\u95ee\u672c\u8d28\u4e0a\u4ecd\u662f\u4e00\u822c\u7684\u533a\u95f4\u67e5\u8be2\uff0c\u53ea\u4e0d\u8fc7 $l, r$ \u7684\u6700\u5c0f\u589e\u91cf\u5927\u4e8e $1$ \u7f62\u4e86\n\n\uff08\u4f8b\u5982\u5bf9\u4e8e $\\{p_0, p_1, p_2\\}, p_0=\\{l_0, l_1, l_2\\}, p_1 =\\{l_3, l_4, l_5, l_6\\}, p_2=\\{l_7, l_8, l_9\\}$\uff0c\u53ef\u4ee5 \u201c\u5c55\u5f00\u201d \u53d8\u4e3a $\\{l_0, l_1, l_2, l_3, l_4, l_5, l_6, l_7, l_8, l_9\\}$\uff09\n\n\u5982\u6709\u4e0d\u592a\u6e05\u695a\u7684\u5730\u65b9\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u5185\u6ce8\u91ca\u7406\u89e3 \\kk\n\n## CODE\n\n```cpp\n#include <cstdio>\n#include <map>\n#include <vector>\n#include <algorithm>\nusing std::vector;\nusing std::map;\nusing std::pair;\nusing std::sort;\n\nconst int MAXN =1e5+20, MAXK =4e5+20;\n\n/*------------------------------IO------------------------------*/\n\nnamespace MyIO{\n\tconst int MAXB =1<<18;\n\tchar gbuf[MAXB], *ps =gbuf, *pt =gbuf;\n\tchar pbuf[MAXB+1], *pp =pbuf;\n\tstruct Flusher{\n\t\t~Flusher(){\n\t\t\tfwrite(pbuf, 1, pp-pbuf, stdout);\n\t\t}\n\t}flusher;\n\t\n\tinline char Getchar(){\n\t\tif(ps == pt){\n\t\t\tps =gbuf;\n\t\t\tpt =gbuf+fread(gbuf, 1, MAXB, stdin);\n\t\t}\n\t\treturn (ps == pt) ? EOF : *ps++;\n\t}\n\tinline void Putchar(const char &ch){\n\t\tif(pp == pbuf+MAXB){\n\t\t\tpp =pbuf;\n\t\t\tfwrite(pbuf, 1, MAXB, stdout);\n\t\t}\n\t\t*pp++ =ch;\n\t}\n}\n#define getchar MyIO::Getchar\n#define putchar MyIO::Putchar\n\nint read(){\n\tint x =0; char c =getchar(); bool f =0;\n\twhile(c < '0' || c > '9') (c == '-') ? f =1, c =getchar() : c =getchar();\n\twhile(c >= '0' && c <= '9') x =(x<<1)+(x<<3)+(48^c), c =getchar();\n\treturn (f) ? -x : x;\n}\n\nvoid write(const int &x){\n\tif(x/10)\n\t\twrite(x/10);\n\tputchar('0'+x%10);\n}\n\n/*------------------------------Pre------------------------------*/\n\nint gcd(int a, int b){\n\twhile(b ^=a ^=b ^=a %=b) ;\n\treturn a;\n}\n\ninline int Abs(const int &x){ return (x < 0) ? -x : x; }\n\nstruct line{\n\tint k_up, k_down;/*\u659c\u7387\u7684\u5206\u5b50\uff0c\u5206\u6bcd*/\n\t\n\tline(){}\n\tline(const int &KU, const int &KD){\n\t\tif(KU == 0 || KD == 0){\n\t\t\tk_up =(KU != 0) ? ((KU > 0) ? 1 : -1) : 0;\n\t\t\tk_down =(KD != 0) ? ((KD > 0) ? 1 : -1) : 0;\n\t\t}\n\t\telse{\n\t\t\t// \u8fb9\u5411\u91cf\u7684\u4e0d\u540c\u671d\u5411\u4f1a\u5728\u5206\u5b50\u5206\u6bcd\u7684\u7b26\u53f7\u4e2d\u4f53\u73b0\u51fa\u6765 //\n\t\t\tint Gcd =Abs(gcd(KU, KD));\n\t\t\tk_up =KU/Gcd;\n\t\t\tk_down =KD/Gcd;\n\t\t}\n\t}\n\t\n\tbool operator < (const line &B) const{/*\u4ec5\u7528\u4e8e map \u505a\u533a\u5206*/\n\t\tif(k_up == B.k_up)\n\t\t\treturn k_down < B.k_down;\n\t\telse\n\t\t\treturn k_up < B.k_up;\n\t}\n};\n\nint tot;\nmap<line, int> Map;\n\n/*------------------------------\u83ab\u961f------------------------------*/\n\nvector<int> poly[MAXN];\n\nstruct query{\n\tint l, r, cl, id;\n\t\n\tbool operator < (const query &B) const{\n\t\tif(cl == B.cl)\n\t\t\treturn (cl&1) ? r < B.r : r > B.r;\n\t\telse\n\t\t\treturn cl < B.cl;\n\t}\n}q[MAXN];\n\nint cnt[MAXK];\nint Ans;\n\nvoid add(const int &pos){\n\tfor(int col:poly[pos])\n\t\tif(++cnt[col] == 1)\n\t\t\t++Ans;\n}\n\nvoid del(const int &pos){\n\tfor(int col:poly[pos])\n\t\tif(--cnt[col] == 0)\n\t\t\t--Ans;\n}\n\n/*------------------------------Main------------------------------*/\n\nint ans[MAXN];\n\nint pre[MAXN];\n//\t ^- \u5c55\u5f00\u540e\uff0c\u539f\u5e8f\u5217\u4f4d\u7f6e\u5bf9\u5e94\u7684\u65b0\u5e8f\u5217\u4f4d\u7f6e\u7684\u4e0b\u6807 ( \u8fd9\u91cc\u662f\u4ece 1 \u5f00\u59cb ) //\n\nint main(){\n\tint n =read();\n\tfor(int i =0; i < n; ++i){\n\t\tint k =read();\n\t\tpre[i+1] =pre[i]+k;\n\t\tint s_x =read(), s_y =read();\n\t\tint pre_x =s_x, pre_y =s_y;\n\t\tfor(int j =0; j < k-1; ++j){\n\t\t\tint x =read(), y =read();\n\t\t\tline l =line(y-pre_y, x-pre_x);\n\t\t\tif(Map.count(l))\n\t\t\t\tpoly[i].push_back(Map.find(l)->second);\n\t\t\telse{\n\t\t\t\tpoly[i].push_back(++tot);\n\t\t\t\tMap.insert(pair<line, int>(l, tot));\n\t\t\t}\n\t\t\tpre_x =x, pre_y =y;\n\t\t}\n\t\tline l =line(s_y-pre_y, s_x-pre_x);\n\t\tif(Map.count(l))\n\t\t\tpoly[i].push_back(Map.find(l)->second);\n\t\telse{\n\t\t\tpoly[i].push_back(++tot);\n\t\t\tMap.insert(pair<line, int>(l, tot));\n\t\t}\n\t}\n\t\n\tint Q =read();\n\tint S =sqrt(1.0*pre[n]*pre[n]/Q);/*<<- */\n\tif(S == 0)\n\t\tS =1;\n\tfor(int i =0; i < Q; ++i){\n\t\tq[i].l =read()-1, q[i].r =read()-1;\n\t\tq[i].id =i, q[i].cl =pre[q[i].l+1]/S;/*<<- */\n\t}\n\tsort(q, q+Q);\n\tfor(int i =0, l =0, r =0; i < Q; ++i){\n\t\twhile(l < q[i].l) del(l++);\n\t\twhile(l > q[i].l) add(--l);\n\t\twhile(r < q[i].r+1) add(r++);\n\t\twhile(r > q[i].r+1) del(--r);\n\t\tans[q[i].id] =Ans;\n\t}\n\t\n\tfor(int i =0; i < Q; ++i)\n\t\twrite(ans[i]), putchar('\\n');\n}\n```",
        "postTime": 1605092210,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1195F \u3010Geometers Anonymous Club\u3011"
    }
]