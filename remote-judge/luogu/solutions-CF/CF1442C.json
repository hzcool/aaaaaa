[
    {
        "content": "\u4ecb\u7ecd\u4e00\u4e2a\u4e0d\u9700\u8981\u5206\u5c42\u56fe\u7684\u505a\u6cd5\n\n\u770b\u5230\u9898\u7684\u7b2c\u4e00\u60f3\u6cd5\u662f\u5982\u679c\u7ffb\u8f6c\u8d85\u8fc7 $O(log)$ \u6b21\u662f\u4e0d\u4f18\u7684\uff0c\u56e0\u4e3a\u82b1\u8d39\u4f1a\u8d85\u8fc7\u76f4\u63a5\u8dd1\u4e00\u904d\u7684\u60c5\u51b5\n\n\u90a3\u4e48\u6709\u4e2a\u975e\u5e38 simple \u7684\u60f3\u6cd5\u662f\u8bb0 $f_{i,j}$ \u8868\u793a\u5230\u8fbe\u7b2c $i$ \u4e2a\u70b9\uff0c\u7ffb\u8f6c $j$ \u6b21\u7684\u6700\u77ed\u8def\uff08\u4e0d\u8ba1\u7ffb\u8f6c\u7684\u4ee3\u4ef7\uff09\uff0c\u7136\u540e\u8dd1 `bfs`\n\n\u4f46\u6211\u4eec\u4f1a\u53d1\u73b0\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\u8fd9\u6837\u505a\u4f1a\u5047\u6389\uff0c\u56e0\u4e3a\u4ece\u8d77\u70b9\u51fa\u53d1\u4e0d\u7ffb\u8f6c\u8d85\u8fc7 $log$ \u6b21\u751a\u81f3\u53ef\u80fd\u65e0\u6cd5\u5230\u8fbe\u67d0\u4e2a\u70b9\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u6539\u53d8 $f_{i,j}$ \u8868\u793a\u7684\u542b\u4e49\uff0c\u5148\u9884\u5904\u7406\u51fa $tim_i$ \u8868\u793a\u5230\u8fbe\u7b2c $i$ \u4e2a\u70b9\u6700\u5c11\u8981\u7ffb\u8f6c\u51e0\u6b21\u3002\u8bb0 $f_{i,j}$ \u8868\u793a\u5230\u8fbe\u7b2c $i$ \u4e2a\u70b9\uff0c\u7ffb\u8f6c\u6b21\u6570\u4e3a $tim_i+j$ \u6b21\u7684\u6700\u77ed\u8def\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u7684 $j$ \u662f $log$ \u7ea7\u522b\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u4fdd\u8bc1\u4e86\u5fc5\u5b9a\u53ef\u4ee5\u5230\u8fbe\u70b9 $i$\uff0c\u5982\u679c\u7ffb\u8f6c\u6b21\u6570\u591a\u4e8e $log$ \u5fc5\u5b9a\u4e0d\u4f18\n\n\u7136\u540e\u8dd1\u4e2a `bfs` \u8ba1\u7b97\u6240\u6709\u7684 $f_{i,j}$\uff0c\u7136\u540e\u679a\u4e3e\u7ffb\u8f6c\u6b21\u6570\u8ba1\u7b97\u6700\u4f18\u89e3\u5373\u53ef\u3002$tim_i$ \u53ef\u4ee5\u7528 `01bfs` \u5904\u7406\n\n\u590d\u6742\u5ea6 $O(nlogn)$\n\n```cpp\n#include<bits/stdc++.h>\n#define mk make_pair\n#define x first\n#define y second\n#define int long long\nusing namespace std;\nconst int N=2e5+5;\nconst int p=998244353;\n\nint read()\n{\n\tint s=0;\n\tchar c=getchar(),lc='+';\n\twhile (c<'0'||'9'<c) lc=c,c=getchar();\n\twhile ('0'<=c&&c<='9') s=s*10+c-'0',c=getchar();\n\treturn lc=='-'?-s:s;\n}\nvoid write(int x)\n{\n\tif (x<0)\n\t{\n\t\tputchar('-');\n\t\tx=-x;\n\t}\n\tif (x<10) putchar(x+'0');\n\telse\n\t{\n\t\twrite(x/10);\n\t\tputchar(x%10+'0');\n\t}\n}\nvoid print(int x,char c='\\n')\n{\n\twrite(x);\n\tputchar(c);\n}\nint power(int a,int b)\n{\n\tint ret=1;\n\twhile (b)\n\t{\n\t\tif (b&1) ret=ret*a%p;\n\t\ta=a*a%p;\n\t\tb/=2;\n\t}\n\treturn ret;\n}\nstruct edge\n{\n\tbool f;\n\tint to,nxt;\n}e[N*2];\nint head[N],cnt=0;\nvoid add(int u,int v,bool w)\n{\n\te[++cnt].f=w;\n\te[cnt].to=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nint n,m,tim[N],dis[N][20];\ndeque<int>dq;\nvoid bfs0()\n{\n\tmemset(tim,0x3f,sizeof(tim));\n\tdq.clear();\n\ttim[1]=0;\n\tdq.push_back(1);\n\twhile (!dq.empty())\n\t{\n\t\tint now=dq.front();\n\t\tdq.pop_front();\n\t\tfor (int i=head[now];i;i=e[i].nxt)\n\t\t{\n\t\t\tint to=e[i].to,f=e[i].f^(tim[now]&1);\n\t\t\tif (f)\n\t\t\t{\n\t\t\t\tif (tim[to]>tim[now]+1)\n\t\t\t\t{\n\t\t\t\t\ttim[to]=tim[now]+1;\n\t\t\t\t\tdq.push_back(to);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (tim[to]>tim[now])\n\t\t\t\t{\n\t\t\t\t\ttim[to]=tim[now];\n\t\t\t\t\tdq.push_front(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nqueue<pair<int,int> >q;\nvoid bfs1()\n{\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[1][0]=0;\n\tq.push(mk(1,0));\n\twhile (!q.empty())\n\t{\n\t\tpair<int,int>now=q.front();\n\t\tq.pop();\n\t\tfor (int i=head[now.x];i;i=e[i].nxt)\n\t\t{\n\t\t\tint to=e[i].to,f=e[i].f^(now.y&1);\n\t\t\tif (now.y+f-tim[to]>=20) continue;\n\t\t\tif (dis[to][now.y+f-tim[to]]>dis[now.x][now.y-tim[now.x]]+1)\n\t\t\t{\n\t\t\t\tdis[to][now.y+f-tim[to]]=dis[now.x][now.y-tim[now.x]]+1;\n\t\t\t\tq.push(mk(to,now.y+f));\n\t\t\t}\n\t\t}\n\t}\n}\nstruct answer\n{\n\tint k,val;\n\tbool operator <(const answer &a)const\n\t{\n\t\tif (max(k,a.k)>20) return k<a.k;\n\t\treturn (1<<k)+val<(1<<a.k)+a.val;\n\t}\n}ans({1919810,0});\n\nsigned main()\n{\n\tn=read();\n\tm=read();\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint u=read(),v=read();\n\t\tadd(u,v,0);\n\t\tadd(v,u,1);\n\t}\n\tbfs0();\n\tbfs1();\n\tfor (int i=0;i<20;i++) ans=min(ans,(answer){tim[n]+i,dis[n][i]});\n\tprint((power(2,ans.k)-1+ans.val)%p);\n\n\treturn 0;\n}\n```",
        "postTime": 1606459830,
        "uid": 61120,
        "name": "QwQcOrZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1442C \u3010Graph Transpositions\u3011"
    },
    {
        "content": "\u8003\u8651\u4e00\u79cd\u7384\u5b66\u505a\u6cd5\u3002\n\n\u9996\u5148\u5efa\u7acb\u5206\u5c42\u56fe\n\n\u9996\u5148\u89c2\u5bdf\u5230 $2^{19}$ \u5df2\u7ecf\u5927\u4e8e\u5f53\u524d\u8fd9\u4e2a $n$ \u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a\u5728 $19$ \u5c42\u53ca\u4ee5\u4e0a\u65f6\uff0c\u5982\u679c\u5f53\u524d\u5c42\u80fd\u5230\u8fbe\u7ec8\u70b9\uff0c\u8d70\u5230\u4e0b\u4e00\u5c42\u4e00\u5b9a\u4e0d\u4f18\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5206\u4e24\u79cd\u60c5\u51b5\uff1a$19$ \u5c42\u4ee5\u4e0b\u548c $19$ \u5c42\u4ee5\u4e0a\u3002\n\n\u663e\u7136 $19$ \u5c42\u4ee5\u4e0b\u8dd1\u4e2a\u6700\u77ed\u8def\u5c31\u884c\u4e86\u3002\n\n\u8003\u8651 $19$ \u5c42\u4ee5\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u5c42\u4e4b\u95f4\u7684\u8f6c\u79fb\u7684\u4ee3\u4ef7\u8bbe\u4e3a\u4e00\u4e2a\u6781\u5927\u503c\uff08\u6211\u8bbe\u7684\u662f $10^7$ )\u3002\u518d\u8dd1\u6700\u77ed\u8def\uff0c\u6700\u540e\u5f97\u51fa\u6765\u7684\u7ed3\u679c\u9664\u4ee5 $10^7$ \u5c31\u662f\u8f6c\u79fb\u7684\u6b21\u6570\u4e86\u3002\u63a5\u7740\u6700\u540e\u7684\u7b54\u6848\u7528\u5feb\u901f\u5e42\u8ba1\u7b97\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\n#define ll long long\n#define F(i,a,b) for (int i=(a);i<=(b);i++)\n#define R(i,a,b) for (int i=(a);i<(b);i++)\n#define D(i,a,b) for (int i=(a);i>=(b);i--)\n#define go(i,x) for (int i=head[x];i;i=Next[i])\n#define mp make_pair\n#define pb push_back\n#define pa pair < int,int >\n#define fi first\n#define se second\n#define re register\n#define be begin()\n#define en end()\n#define sqr(x) ((x)*(x))\n#define ret return puts(\"-1\"),0;\n#define put putchar('\\n')\n#define inf (1e18)\n#define mod 998244353\n#define int ll\n#define N 400005\nusing namespace std;\ninline char gc(){static char buf[100000],*p1=buf,*p2=buf;return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;}\n#define gc getchar\ninline ll read(){char c=gc();ll su=0,f=1;for (;c<'0'||c>'9';c=gc()) if (c=='-') f=-1;for (;c>='0'&&c<='9';c=gc()) su=su*10+c-'0';return su*f;}\ninline void write(ll x){if (x<0){putchar('-');write(-x);return;}if (x>=10) write(x/10);putchar(x%10+'0');}\ninline void writesp(ll a){if(a<0){a=-a; putchar('-');}write(a); putchar(' ');}\ninline void writeln(ll a){if(a<0){a=-a; putchar('-');}write(a); puts(\"\");}\nll quickPower(int x,int y)\n{\n\tint ans=1;x%=mod;\n\twhile (y>0)\n\t{\n\t\tif (y&1) (ans*=x)%=mod;\n\t\t(x*=x)%=mod;\n\t\ty>>=1;\n\t}\n\treturn ans;\n}\nint n,m,dis[19][N],dis1[N],u,v,ans,vis[N];\nvector<int>G[N][2];\nvector<pair<int,int> >G1[N];\nstruct wcr\n{\n\tint x,y;\n\tbool operator <(const wcr &A) const\n\t{\n\t\treturn dis[x][y]>dis[A.x][A.y];\n\t}\n};\npriority_queue<wcr>q;\npriority_queue<pair<int,int> >q1;\nwcr now;\npair<int,int>now1;\nsigned main()\n{\n\tn=read(),m=read();\n\tF(i,0,18)\n\t\tF(j,1,n)\n\t\t\tdis[i][j]=inf;\n\tF(i,1,n) G1[i].push_back(mp(i+n,10000000)),G1[i+n].push_back(mp(i,10000000));\n\tF(i,1,m) \n\t{\n\t\tu=read(),v=read();\n\t\tG[u][0].push_back(v);\n\t\tG[v][1].push_back(u);\n\t\tG1[u].push_back(mp(v,1));\n\t\tG1[v+n].push_back(mp(u+n,1));\n\t}\n\tq.push({0,1});\n\tdis[0][1]=0;\n\twhile (!q.empty())\n\t{\n\t\tnow=q.top();\n\t\tq.pop();\n\t\tif (now.x<=17)\n\t\t{\n\t\t\tif (dis[now.x+1][now.y]>dis[now.x][now.y]+(1ll<<now.x))\n\t\t\t{\n\t\t\t\tdis[now.x+1][now.y]=dis[now.x][now.y]+(1ll<<now.x);\n\t\t\t\tq.push({now.x+1,now.y});\n\t\t\t}\n\t\t}\n\t\tR(i,0,G[now.y][now.x%2].size())\n\t\t{\n//\t\t\tcout<<dis[now.x][G[now.y][now.x%2][i]]<<endl;\n\t\t\tif (dis[now.x][G[now.y][now.x%2][i]]>dis[now.x][now.y]+1)\n\t\t\t{\n\t\t\t\tdis[now.x][G[now.y][now.x%2][i]]=dis[now.x][now.y]+1;\n\t\t\t\tq.push({now.x,G[now.y][now.x%2][i]});\n\t\t\t}\n\t\t}\n\t}\n\tans=inf;\n\tF(i,0,18) ans=min(ans,dis[i][n]);\n\tif (ans!=inf) writeln(ans%mod); else\n\t{\n\t\tF(i,1,2*n+5) dis1[i]=inf;\n\t\tdis1[1]=0;\n\t\tq1.push(mp(0,1));\n\t\twhile (!q1.empty())\n\t\t{\n\t\t\tnow1=q1.top();q1.pop();\n\t\t\tif (vis[now1.second]) continue;\n\t\t\tvis[now1.second]=1;\n\t\t\tR(i,0,G1[now1.second].size())\n\t\t\t{\n\t\t\t\tif (dis1[G1[now1.second][i].first]>dis1[now1.second]+G1[now1.second][i].second)\n\t\t\t\t{\n\t\t\t\t\tdis1[G1[now1.second][i].first]=dis1[now1.second]+G1[now1.second][i].second;\n\t\t\t\t\tq1.push(mp(-dis1[G1[now1.second][i].first],G1[now1.second][i].first));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twriteln((quickPower(2,(min(dis1[n],dis1[n+n])/(10000000)))-1+mod+(min(dis1[n],dis1[n+n])%(10000000)))%mod);\n\t}\t\n}",
        "postTime": 1606533191,
        "uid": 120911,
        "name": "Lynkcat",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1442C \u3010Graph Transpositions\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1442C)\n\n## \u601d\u8def\n\n\u4e00\u79cd\u6bd4\u8f83\u5947\u602a\u7684\u505a\u6cd5\u3002\n\n\u6211\u4eec\u8bbe $1 \\sim u$ \u7684\u6700\u77ed\u8def\u5f84\u662f $w$\uff0c\u5219 $w$ \u4e00\u5b9a\u80fd\u5199\u6210 $x+2^y-1$ \u7684\u5f62\u5f0f\uff0c$x$ \u8868\u793a\u7ecf\u8fc7\u8fb9\u7684\u6570\u91cf\uff0c$y$ \u8868\u793a\u56fe\u7ffb\u8f6c\u7684\u6b21\u6570\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u5982\u4f55\u6bd4\u8f83\u4e24\u6761\u6700\u77ed\u8def\u5f84\u7684\u5927\u5c0f\uff0c\u6211\u4eec\u53d1\u73b0 $x$ \u4e0d\u4f1a\u8d85\u8fc7 $m$\u3002\n\n\u90a3\u4e48\uff0c\u5f53 $2^y$ \u5df2\u7ecf\u8fdc\u5927\u4e8e $m$ \u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u503c\u7684\u5927\u5c0f\u5c31\u4e0e $x$ \u51e0\u4e4e\u65e0\u5173\u4e86\uff08\u53ea\u6709\u5f53\u6bd4\u8f83\u7684\u4e24\u4e2a $y$ \u76f8\u7b49\u65f6\u624d\u4e0e $x$ \u6709\u5173\uff09\uff0c\u800c\u8fd9\u4e2a\u503c\u7684\u5927\u5c0f\u4e0e $x$ \u6709\u5173\uff0c\u5f53\u4e14\u4ec5\u5f53 $y \\le 18$\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6bd4\u8f83\u51fa\u4e24\u6761\u6700\u77ed\u8def\u5f84\u7684\u5927\u5c0f\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5206\u5c42\u56fe\uff0c\u76f4\u63a5\u5206\u5c42\u663e\u7136\u662f\u840e\u7684\uff0c\u6211\u4eec\u8003\u8651\u8fd0\u7528\u521a\u521a\u63a8\u5f97\u7684\u6027\u8d28\uff1a\u5f53 $y>18$ \u65f6\uff0c\u4e24\u6761\u8def\u5f84\u957f\u5ea6\u7684\u6bd4\u8f83\u5c31\u4e0e $x$ \u65e0\u5173\u4e86\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53 $y>18$ \u65f6\uff0c\u6211\u4eec\u53ea\u8981\u7edf\u4e00\u8bb0\u5f55\u4e00\u4e2a\u6700\u5c0f\u7684 $y$ \u503c\u5373\u53ef\uff0c$x$ \u503c\u4e0d\u9700\u8981\u53bb\u7ba1\u5b83\u4e86\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u505a\u5b8c\u4e86\uff0c\u56e0\u4e3a\u6240\u6709 $y>18$ \u7684\u60c5\u51b5\u53ef\u4ee5\u538b\u5230\u4e00\u4e2a\u72b6\u6001 $y=19$ \u91cc\u3002\n\n\u4ee3\u7801\u5f02\u5e38\u597d\u5199\uff0c\u7b80\u5355\u7ffb\u4e86\u51e0\u9875\u6d1b\u8c37\u63d0\u4ea4\u8bb0\u5f55\uff0c\u53d1\u73b0\u6ca1\u6709\u6bd4\u6211\u77ed\u7684\u3002\n\n## \u4ee3\u7801\n\n```cpp\n//A tree without skin will surely die.\n//A man without face will be alive\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nint const N=2e5+10;\nint const mod=998244353;\nbool vis[N][20][2];\nvector< pair<int,int> >a[N];\nstruct node{int w,x,y,z;}f[N][20][2];\ninline int qpow(int a,int b,int t=1){\n    for (;b;b>>=1,a=a*a%mod)\n        if (b&1) t=t*a%mod;\n    return t;\n}\nbool operator < (node a,node b){\n    return (a.y<20 && b.y<20)?\n    ((1ll<<a.y)+a.w>(1ll<<b.y)+b.w):\n    ((a.y==b.y)?(a.w>b.w):(a.y>b.y));\n}\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n    int n,m;cin>>n>>m;\n    while (m--){\n        int u,v;cin>>u>>v;\n        a[u].push_back({v,0});\n        a[v].push_back({u,1});\n    }\n    for (int i=1;i<=n;++i)\n        for (int j=0;j<20;++j)\n            for (int k=0;k<2;++k)\n                f[i][j][k]={123582391,0,129477372,0};\n    priority_queue<node>q;\n    memset(f,0x3f,sizeof(f));\n    f[1][0][0]={0,0,0,0};q.push({0,1,0,0});\n    while (!q.empty()){\n        auto [w,x,y,z]=q.top();q.pop();\n        if (x==n){\n            cout<<(qpow(2,y)-1+mod+w)%mod<<'\\n';\n            return 0;\n        }\n        int s=min(19ll,y);\n        if (vis[x][s][z]) continue;\n        vis[x][s][z]=1;\n        for (auto [v,w]:a[x]){\n            int k=y;if (w!=z) ++k;\n            if (!(f[v][min(19ll,k)][w]<\n                (node){f[x][s][z].w+1,v,k,w})) continue;\n            f[v][min(19ll,k)][w]={f[x][s][z].w+1,v,k,w};\n            q.push(f[v][min(19ll,k)][w]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1677741983,
        "uid": 253608,
        "name": "Tx_Lcy",
        "ccfLevel": 7,
        "title": "CF1442C Graph Transpositions"
    },
    {
        "content": "\u9996\u5148\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u5206\u5c42\u56fe\u5efa\u6a21\u3002\u4ee4 $dist[i,j]$ \u8868\u793a\u4ece $1$ \u5230 $i$ \u7ffb\u8f6c\u4e86\u6070\u597d $j$ \u6b21\u7684\u6700\u77ed\u8def\u3002\u81f3\u591a\u7ffb\u8f6c $O(n)$ \u6b21\u3002\u5c42\u4ece $0\\sim n$ \u7f16\u53f7\u3002\u5bf9\u4e8e\u7f16\u53f7\u4e3a\u5076\u6570\u7684\u5c42\u5efa\u6b63\u56fe\uff0c\u7f16\u53f7\u4e3a\u5947\u6570\u7684\u5c42\u5efa\u53cd\u56fe\uff0c\u8fb9\u6743\u5747\u4e3a $1$\u3002$\\forall 1\\le i\\le n$\uff0c\u4ece\u7b2c $j$ \u5c42\u7684 $i$ \u8fde\u5411\u7b2c $j+1$ \u5c42\u7684 $i$ \u8fb9\u6743 $2^j$ \u7684\u8fb9\u3002\n\n\u4f46\u662f $n$ \u6bd4\u8f83\u5927\u7684\u60c5\u51b5\u4e0b\u8fb9\u6743\u4f1a\u975e\u5e38\u5927\uff0c\u800c\u4e14\u590d\u6742\u5ea6\u4e0d\u592a\u884c\u3002\n\n\u8fd9\u91cc\u7684\u4e00\u4e2a intution \u662f\u5982\u679c\u7ffb\u8f6c\u7684\u6b21\u6570\u5f88\u591a\u624d\u80fd\u5230\u8fbe $n$\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u5b9a\u662f\u5728\u4fdd\u8bc1\u6700\u5c0f\u5316\u7ffb\u8f6c\u6b21\u6570\u7684\u524d\u63d0\u4e0b\u518d\u8d70\u5c3d\u91cf\u5c11\u7684\u8fb9\u3002\n\n\u66f4\u5177\u4f53\u4e00\u70b9\uff0c\u4ee4 $k$ \u8868\u793a\u4ece $1$ \u5230\u8fbe $n$ \u81f3\u5c11\u7ffb\u8f6c\u591a\u5c11\u6b21\uff0c\u5982\u679c $2^k\\ge n-1$\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u8981\u5728\u6700\u5c0f\u5316\u7ffb\u8f6c\u6b21\u6570\u7684\u524d\u63d0\u4e0b\u8d70\u5c3d\u91cf\u5c11\u7684\u8fb9\u3002\n\n\u6c42\u7ffb\u8f6c\u6b21\u6570\u53ef\u4ee5\u5efa\u4e00\u4e2a\u4e24\u5c42\u7684\u56fe\uff0c\u4e00\u4e2a\u6b63\u56fe\uff0c\u4e00\u4e2a\u53cd\u56fe\uff0c\u8fb9\u6743\u5747\u4e3a $0$\u3002$\\forall 1\\le i\\le n$\uff0c\u5728\u6b63\u56fe\u548c\u53cd\u56fe\u4e4b\u95f4\u7684 $i$ \u8fde\u4e00\u6761\u65e0\u5411\u8fb9\uff0c\u8fb9\u6743\u4e3a $1$\u3002\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u800c\u5728\u6700\u5c0f\u5316\u7ffb\u8f6c\u6b21\u6570\u7684\u524d\u63d0\u4e0b\u8d70\u7684\u6700\u5c11\u7684\u8fb9\u7684\u6570\u91cf\u4e5f\u662f\u597d\u6c42\u7684\u3002\u8003\u8651\u6c42\u7ffb\u8f6c\u6b21\u6570\u5efa\u7684\u5206\u5c42\u56fe\u3002\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u4ece $1$ \u5230 $n$ \u7684\u8def\u5f84\u65b9\u6848\u90fd\u53ef\u4ee5\u5bf9\u5e94\u5230\u8be5\u5206\u5c42\u56fe\u7684\u4e00\u6761\u8def\u5f84\u3002\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u6839\u636e $k$ \u7684\u5947\u5076\u6027\u786e\u5b9a\u6700\u540e\u7684\u7ec8\u70b9\u662f\u5728\u6b63\u56fe\u4e2d\u8fd8\u662f\u5728\u53cd\u56fe\u4e2d\u3002\u6211\u4eec\u5e0c\u671b\u6c42\u4e00\u6761\u4ece\u6e90\u70b9\u5230\u67d0\u4e2a\u70b9\u5728\u7ecf\u8fc7\u201c\u5c42\u95f4\u8fb9\u201d\u6700\u5c11\u7684\u524d\u63d0\u4e0b\u7ecf\u8fc7\u201c\u5c42\u5185\u8fb9\u201d\u6570\u6700\u5c11\u7684\u8def\u5f84\u3002\n\n\u5373\u6211\u4eec\u8003\u8651\u7684\u6240\u6709\u8def\u5f84\u4e00\u5b9a\u662f\u6c42\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570\u56fe\u4e2d\u7684\u6700\u77ed\u8def\u3002\u800c\u53ea\u8003\u8651\u6700\u77ed\u8def\u7684\u9650\u5236\u53ef\u4ee5\u4f7f\u7528\u6700\u77ed\u8def\u56fe\u8fdb\u884c\u523b\u753b\uff1a\u5efa\u7acb\u4e00\u4e2a\u65b0\u56fe\uff0c\u4e3a\u5206\u5c42\u56fe\uff0c\u4e00\u4e2a\u6b63\u56fe\uff0c\u4e00\u4e2a\u53cd\u56fe\uff0c\u4e0d\u8003\u8651\u8fb9\u6743\uff0c\u5176\u8fb9\u96c6\u662f\u6c42\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570\u5efa\u7acb\u7684\u5206\u5c42\u56fe\u7684\u5b50\u96c6\uff0c\u5bf9\u4e8e\u6c42\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570\u5efa\u7acb\u7684\u5206\u5c42\u56fe\u4e2d\u8fb9\u6743\u4e3a $w$ \u7684\u4e00\u6761\u8fb9 $u\\to v$ \u5176\u5728\u65b0\u56fe\u4e2d\u7684\u5145\u8981\u6761\u4ef6\u662f $dist[u]+w=dist[v]$\uff0c\u5176\u4e2d $dist[u]$ \u8868\u793a\u5728\u6c42\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570\u7684\u56fe\u4e2d\u4ece\u6e90\u70b9\u5230 $u$ \u7684\u6700\u77ed\u8def\u3002\u63a5\u4e0b\u6765\u4e3a\u65b0\u56fe\u4e2d\u7684\u8fb9\u8d4b\u4e0a\u5408\u9002\u7684\u8fb9\u6743\u3002\u201c\u5c42\u5185\u8fb9\u201d\u8fb9\u6743\u4e3a $1$\uff0c\u201c\u5c42\u95f4\u8fb9\u201d\u8fb9\u6743\u4e3a $0$\u3002\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u5982\u679c $2^k<n-1$\uff0c\u4f7f\u7528\u6700\u5f00\u59cb\u63d0\u5230\u7684\u5206\u5c42\u56fe\u5efa\u6a21\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log ^2n)$\u3002\n\n\n```cpp\n#include <bits/stdc++.h>\n\n#define rep(i,l,r) for (int i = l; i <= r; i++)\n#define per(i,r,l) for (int i = r; i >= l; i--)\n#define fi first\n#define se second\n#define prt std::cout\n#define gin std::cin\n#define edl std::endl\n\nnamespace wxy{\n\nconst int N = 2e5 + 50,mod = 998244353;\n\nint n,m,st[N],ed[N];\n\nnamespace Dijkstra {\n    int head[N * 20],edge[N * 40],fail[N * 40],w[N * 40],tot;\n    bool vis[N * 20];\n    int dist[N * 20];\n    using PII = std::pair<int,int>;\n    inline void add(int x,int y,int z) {\n        edge[++ tot] = y,w[tot] = z,fail[tot] = head[x],head[x] = tot;\n    }\n    inline void Init(){\n        memset(head,0,sizeof head); tot = 0;\n    }\n    inline void dijkstra(int S){\n        memset(dist,0x3f,sizeof dist); memset(vis,false,sizeof vis);\n        std::priority_queue<PII,std::vector<PII>,std::greater<PII> > q;\n        dist[S] = 0; q.push({0,S});\n        while (q.size()) {\n            int x = q.top().second; q.pop();\n            if (vis[x]) continue;\n            vis[x] = true; \n            for (int i = head[x]; i; i = fail[i]) {\n                int v = edge[i];\n                if (dist[v] > dist[x] + w[i]) {\n                    dist[v] = dist[x] + w[i];\n                    q.push({dist[v],v});\n                }\n            }\n        }\n    }\n}\n\nnamespace solve1 {\n    int idx[2][N],power[N],tot;\n    inline void Main(){\n        power[0] = 1; rep(i,1,n) power[i] = 1ll*power[i-1]*2%mod;\n        tot = 0; Dijkstra::Init(); rep(i,1,n) rep(j,0,1) idx[j][i] = ++ tot;\n        rep(i,1,m) rep(j,0,1) {\n            if (j & 1) {\n                Dijkstra::add(idx[j][ed[i]],idx[j][st[i]],0);\n            } else {\n                Dijkstra::add(idx[j][st[i]],idx[j][ed[i]],0);\n            }\n        }\n        rep(i,1,n) {\n            Dijkstra::add(idx[0][i],idx[1][i],1);\n            Dijkstra::add(idx[1][i],idx[0][i],1);\n        }\n        Dijkstra::dijkstra(idx[0][1]); int k = std::min(Dijkstra::dist[idx[0][n]],Dijkstra::dist[idx[1][n]]);\n        int ans = 0; rep(i,0,k-1) ans = (1ll*ans+power[i]) % mod;\n        Dijkstra::Init(); \n        rep(i,1,m) rep(j,0,1) {\n            if (j & 1) {\n                if (Dijkstra::dist[idx[j][st[i]]] == Dijkstra::dist[idx[j][ed[i]]]) {\n                    Dijkstra::add(idx[j][ed[i]],idx[j][st[i]],1);\n                }\n            } else {\n                if (Dijkstra::dist[idx[j][st[i]]] == Dijkstra::dist[idx[j][ed[i]]]) {\n                    Dijkstra::add(idx[j][st[i]],idx[j][ed[i]],1);\n                }\n            }\n        } \n        rep(i,1,n) {\n            if (Dijkstra::dist[idx[1][i]] == Dijkstra::dist[idx[0][i]] + 1)\n                Dijkstra::add(idx[0][i],idx[1][i],0);\n            if (Dijkstra::dist[idx[0][i]] == Dijkstra::dist[idx[1][i]] + 1)\n                Dijkstra::add(idx[1][i],idx[0][i],0);\n        } Dijkstra::dijkstra(idx[0][1]);\n        if (k & 1) ans = (1ll*ans+Dijkstra::dist[idx[1][n]]) % mod;\n        else ans = (1ll*ans+Dijkstra::dist[idx[0][n]]) % mod;\n        prt << ans;\n    }   \n}\n\nnamespace solve2 {\n    int idx[20][N],tot;\n    inline void Main(){\n        tot = 0; Dijkstra::Init(); rep(i,1,n) rep(j,0,19) idx[j][i] = ++ tot;\n        rep(i,1,m) rep(j,0,19) {\n            if (j & 1) {\n                Dijkstra::add(idx[j][ed[i]],idx[j][st[i]],1);\n            } else {\n                Dijkstra::add(idx[j][st[i]],idx[j][ed[i]],1);\n            }\n        }\n        rep(i,1,n) rep(j,0,18) Dijkstra::add(idx[j][i],idx[j+1][i],1<<j);\n        Dijkstra::dijkstra(idx[0][1]); \n        int ans = 0x3f3f3f3f; rep(j,0,19) ans = std::min(ans,Dijkstra::dist[idx[j][n]]);\n        if (ans != 0x3f3f3f3f) printf(\"%d\",ans);\n        else solve1::Main();\n    }\n}\n\ninline void main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.in\",\"r\",stdin);\n        freopen(\"out.out\",\"w\",stdout);\n    #endif\n    scanf(\"%d%d\",&n,&m); rep(i,1,m) scanf(\"%d%d\",&st[i],&ed[i]);\n    solve2::Main();\n}\n\n}signed main(){wxy::main(); return 0;}\n```",
        "postTime": 1663164999,
        "uid": 317459,
        "name": "RyexAwl",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011CF1442C Graph Transpositions"
    },
    {
        "content": "\u663e\u7136\u53ef\u4ee5\u60f3\u5230\u76f4\u63a5\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c\u4f46\u662f $m\\leq 200000$ \u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u52a3\u662f $O(nm)$ \u7684\u3002\u8003\u8651\u4f18\u5316\u8fd9\u79cd\u505a\u6cd5\uff1a\n\n\u53ef\u4ee5\u53d1\u73b0\u5f53\u64cd\u4f5c\u6b21\u6570\u4e0d\u8d85\u8fc7 $18$ \u65f6\uff0c\u6700\u5927\u5355\u6b21\u64cd\u4f5c\u4ee3\u4ef7\u5728 $n=200000$ \u7684\u60c5\u51b5\u4e0b\u6bd4\u904d\u5386\u5168\u56fe\u7684\u4ee3\u4ef7\u8981\u5c0f\u3002\u8fd9\u4e2a\u9636\u6bb5\u5185\u6211\u4eec\u53ef\u80fd\u901a\u8fc7\u53cd\u8f6c\u4e00\u4e9b\u8fb9\u4f7f\u4ee3\u4ef7\u66f4\u5c0f\u3002\u5373\uff0c\u5c31\u7b97\u5728\u7b2c $k$ \u5c42 $x\\to y$ \u662f\u53ef\u8fbe\u7684\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u901a\u8fc7\u7b2c $k+i$ \u5c42\u4ece $x$ \u5230\u8fbe $y$\u3002\n\n\u4f46\u5f53\u64cd\u4f5c\u6b21\u6570\u8d85\u8fc7 $18$ \u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u6b64\u65f6\u5355\u6b21\u64cd\u4f5c\u7684\u4ee3\u4ef7\u751a\u81f3\u5927\u4e8e\u904d\u5386\u5168\u56fe\u7684\u4ee3\u4ef7\uff01\u81ea\u7136\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5728\u7b2c $k$ \u5c42 $x\\to y$ \u53ef\u8fbe\uff0c\u5c31\u4e00\u5b9a\u4f1a\u901a\u8fc7\u7b2c $k$ \u5c42\u4ece $x$ \u5230\u8fbe $y$\u3002\u53ef\u4ee5\u5f97\u5230\u6b64\u65f6\u5728\u5c42\u4e0e\u5c42\u4e4b\u95f4\u8f6c\u79fb\u7684\u4ee3\u4ef7\u5927\u4e8e\u5728\u56fe\u4e0a\u76f4\u63a5\u8f6c\u79fb\u7684\u4ee3\u4ef7\uff0c\u800c\u6211\u4eec\u81ea\u7136\u5e0c\u671b\u8fd9\u4e2a\u4ee3\u4ef7\u5c3d\u53ef\u80fd\u5730\u5c0f\uff0c\u6240\u4ee5\u4ee4\u64cd\u4f5c\u6b21\u6570\u6700\u5c0f\u65f6 $1\\to n$ \u53ef\u8fbe\u662f\u4e00\u5b9a\u6700\u4f18\u7684\uff0c\u5e76\u4e14\u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b\u4ee4\u5728\u56fe\u4e0a\u76f4\u63a5\u8f6c\u79fb\u7684\u4ee3\u4ef7\u4e4b\u548c\u6700\u5c0f\u3002\n\n\u90a3\u4e48\u5c31\u6709\u4e86\u4e00\u4e2a\u5927\u6982\u7684\u601d\u8def\uff0c\u5bf9\u4e8e $k\\leq 18$ \u7684\u90e8\u5206\uff0c\u76f4\u63a5\u5206\u5c42\u56fe\u6700\u77ed\u8def\u3002\u5982\u679c\u5728 $k\\leq 18$ \u5185\u65e0\u6cd5\u51fa\u89e3\uff0c\u5219\u6c42\u51fa\u6700\u5c0f\u7684 $k$ \u53ca\u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b\u5728\u56fe\u4e0a\u8f6c\u79fb\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u7531\u4e8e\u6700\u5c0f\u7684 $k$ \u552f\u4e00\uff0c\u6240\u4ee5\u53ea\u9700\u679a\u4e3e\u8fd9\u4e2a $k$ \u5e76\u5224\u65ad\u5728\u7b2c $k$ \u5c42\u80fd\u5426\u4ece $1\\to n$ \u5373\u53ef\u3002\u5bf9\u4e8e $k>18$ \u7684\u90e8\u5206\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u679a\u4e3e $k$\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5c42\u76f4\u63a5\u5728\u56fe\u4e0a\u8f6c\u79fb\uff0c\u4e4b\u540e\u5c06\u6bcf\u4e00\u4e2a\u5728\u6700\u77ed\u8def\u8fc7\u7a0b\u4e2d\u88ab\u66f4\u65b0\u7684\u70b9\u52a0\u5165\u4e0b\u4e00\u5c42\u7684\u8f6c\u79fb\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u5bf9\u4e8e $k\\leq 18$ \u7684\u90e8\u5206\u662f $O(18m)$ \u7684\uff0c$k>18$ \u7684\u90e8\u5206\u662f $O(m)$ \u7684\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(19m)$ \uff08\u5947\u602a\u7684\u5e38\u6570\u589e\u52a0\u4e86\n\n\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\uff0c\u975e\u5e38\u597d\u5199\u3002",
        "postTime": 1605171872,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1442C \u3010Graph Transpositions\u3011"
    },
    {
        "content": "\u672c\u9898\u5f88\u5bb9\u6613\u60f3\u5230\u4e00\u79cd\u7b80\u5355\u7684\u505a\u6cd5\uff1a\u5efa\u7acb $n$ \u5c42\u56fe\uff0c\u6bcf\u5c42\u56fe\u4e2d\u95f4\u8fde\u4e0a\u8fb9\u6743\u4e3a $2^{k-1}$ \u7684\u8fb9\uff0c\u6bcf\u5c42\u56fe\u8981\u4e48\u662f\u6b63\u56fe\u8981\u4e48\u662f\u53cd\u56fe\uff0c\u4f46\u662f\u672c\u9898\u4e2d $n \\le 2 \\times 10^5$\uff0c\u8fd9\u6837\u7684\u505a\u6cd5\u7a7a\u95f4\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\uff0c\u56e0\u6b64\u8003\u8651\u522b\u7684\u5efa\u56fe\u65b9\u5f0f\u3002\n\n\u672c\u9898\u4e5f\u5f88\u5bb9\u6613\u60f3\u51fa\u4e00\u79cd\u8d2a\u5fc3\u7684\u505a\u6cd5\uff1a\u5982\u679c\u80fd\u5728\u5c0f\u4e8e $\\log n$ \u6b21\u7ffb\u8f6c\u4e4b\u540e\u5c31\u5230\u8fbe\u7ec8\u70b9\uff0c\u90a3\u4e48\u6700\u4f18\u89e3\u4e00\u5b9a\u4e0d\u4f1a\u7ffb\u8f6c\u8d85\u8fc7 $\\log n$ \u6b21\uff0c\u56e0\u4e3a\u90a3\u6837\u7684\u8bdd\u8d8a\u5f80\u540e\u7ffb\u8f6c\u7684\u6b21\u6570\u5c31\u4f1a\u8d85\u8fc7\u904d\u5386\u6574\u5f20\u56fe\u7684\u4ee3\u4ef7\u3002\n\n\u56e0\u6b64\u5efa\u7acb\u4e00\u5f20 20 \u5c42\u7684\u5206\u5c42\u56fe\uff0c\u6bcf\u5c42\u95f4\u8fde\u8fb9\u6743\u4e3a $2^{k-1}$ \u7684\u8fb9\uff0c\u8dd1\u4e00\u904d Dijkstra \u5373\u53ef\u3002\n\n\u4f46\u662f\u5982\u679c\u8dd1\u5230\u4e5f\u4e0d\u4e00\u5b9a\u4ee3\u8868\u6700\u4f18\u89e3\uff0c\u8bf7\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\uff1a\n\n[![ppYeeDe.png](https://s1.ax1x.com/2023/03/19/ppYeeDe.png)](https://imgse.com/i/ppYeeDe)\n\n\u53ea\u9700\u8981\u53cd\u5411\u4e00\u4e0b\uff0c\u7136\u540e\u518d\u8d70\u8fc7\u53bb\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u7ed5\u4e00\u5927\u5708\u518d\u5230\u3002\n\n\u56e0\u6b64\u6211\u4eec\u8003\u8651\u53cd\u5411\u8d85\u8fc7 $\\log n$ \u7684\u56fe\u548c\u8fd9\u79cd\u60c5\u51b5\u3002\n\n\u6211\u4eec\u5efa\u7acb\u4e24\u5c42\u56fe\uff0c\u6bcf\u5c42\u56fe\u95f4\u8fde\u8fb9\u7684\u8fb9\u6743\u8ba4\u4e3a\u662f\u6b63\u65e0\u7a77\uff08\u5f53\u7136\u4e5f\u522b\u7206 long long\uff09\uff0c\u7136\u540e\u76f4\u63a5\u8dd1 Dijkstra\uff0c\u770b\u770b\u8981\u7ecf\u8fc7\u51e0\u6761\u6b63\u65e0\u7a77\u7684\u8fb9\uff08\u76f4\u63a5\u9664\u5c31\u53ef\u4ee5\uff09\u3002\n\n\u5982\u679c\u7ecf\u8fc7\u6b21\u6570\u4e0d\u8d85\u8fc7 $\\log n$ \u6b21\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u7206 long long\uff0c\u56e0\u6b64\u548c\u4e0a\u9762\u90a3\u79cd\u60c5\u51b5\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u5982\u679c\u8d85\u8fc7\u4e86\uff0c\u90a3\u4e48\u7b2c\u4e00\u904d Dijkstra \u4e00\u5b9a\u8dd1\u4e0d\u5230\u7ec8\u70b9\uff08\u56e0\u4e3a\u4e00\u5171\u53ea\u5efa\u4e86 $\\log n$ \u5c42\uff0c\u8981\u8d70\u6b63\u65e0\u7a77\u7684\u53cd\u5411\u8fb9\u90fd\u8d70\u4e86\u8d85\u8fc7 $\\log n$ \u5c42\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u4e00\u5b9a\u641c\u4e0d\u5230\u7ec8\u70b9\uff09\uff0c\u4e8e\u662f\u76f4\u63a5\u53d6\u4f59\u8f93\u51fa\u5373\u53ef\u3002\n\n- \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#define LOCAL\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<long long, int> PII;\n\ninline int read()\n{\n    int x = 0, f = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9')\n    {\n        if(ch == '-') f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x * f;\n}\n\nconst int N = 1e7 + 10, mod = 998244353, M = 10000000;\nconst ll INF = 0x3f3f3f3f3f3f3f3f;\nint a[N], b[N];\nint h[N], e[N], ne[N], w[N], idx;\nll dist[N];\nbool st[N];\nint n, m;\n\nvoid init()\n{\n    memset(h, -1, sizeof h);\n    memset(st, 0, sizeof st);\n    idx = 0;\n}\n\nvoid add(int a, int b, int c)\n{\n    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++;\n}\n\ninline int get(int x, int floor)\n{\n    return x + floor * n;\n}\n\nvoid build1(int floor, int p)\n{\n    for(int i = 1; i <= m; i ++ )\n    {\n        if(p == 1) add(get(a[i], floor), get(b[i], floor), 1);\n        else add(get(b[i], floor), get(a[i], floor), 1);\n    }\n}\n\nvoid build2(int floor, int nxtf, int cost)\n{\n    for(int i = 1; i <= n; i ++ )\n        add(get(i, floor), get(i, nxtf), cost);\n}\n\nvoid dijkstra(int u)\n{\n    memset(dist, 0x3f, sizeof dist);\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n    heap.push({0, u});\n    dist[u] = 0;\n\n    while(heap.size())\n    {\n        auto t = heap.top();\n        heap.pop();\n\n        ll distance = t.first;\n        int ver = t.second;\n\n        if(st[ver]) continue;\n        st[ver] = true;\n\n        for(int i = h[ver]; i != -1; i = ne[i])\n        {\n            int j = e[i];\n            if(dist[j] > distance + w[i])\n            {\n                dist[j] = distance + w[i];\n                heap.push({dist[j], j});\n            }\n        }\n    }\n}\n\nll qmi(ll a, ll k)\n{\n    ll res = 1;\n    while(k)\n    {\n        if(k & 1) res = res * a % mod;\n        a = a * a % mod;\n        k >>= 1;\n    }\n    return res;\n}\n\nint main()\n{\n    #ifdef LOCAL\n        freopen(\"D:\\\\workspace\\\\in_and_out\\\\in.in\", \"r\", stdin);\n        freopen(\"D:\\\\workspace\\\\in_and_out\\\\out.out\", \"w\", stdout);\n    #endif\n\n    memset(h, -1, sizeof h);\n    n = read(), m = read();\n    for(int i = 1; i <= m; i ++ ) \n        a[i] = read(), b[i] = read();\n\n    for(int i = 1; i <= 21; i ++ )\n    {\n        if(i & 1) build1(i - 1, 1);\n        else build1(i - 1, -1);\n    }\n\n    for(int i = 0; i <= 19; i ++ )\n        build2(i, i + 1, 1 << i);\n\n    dijkstra(1);\n\n    ll ans1 = INF;\n    for(int i = 0; i <= 19; i ++ )\n        ans1 = min(ans1, dist[get(n, i)]);\n\n    init();\n    build1(0, 1);\n    build1(1, -1);\n    build2(0, 1, M);\n    build2(1, 0, M);\n\n    dijkstra(1);\n\n    ll ans2 = 0;\n    ll k = min(dist[n], dist[n * 2]);\n\n    if(k / M > 19)\n    {\n        ans2 = (qmi(2, k / M) + k % M - 1 + mod) % mod;\n        cout << ans2 << endl;\n    }\n    else\n    {\n        ans2 = ((1ll << (k / M)) + k % M - 1);\n        cout << min(ans2, ans1) % mod << endl;\n    }\n    \n    return 0;\n}\n\n```",
        "postTime": 1679184354,
        "uid": 755337,
        "name": "crimson000",
        "ccfLevel": 4,
        "title": "CF1442C\u9898\u89e3"
    },
    {
        "content": "### $\\text{Difficulty : 2400}$\n---\n### \u89e3\u9898\u601d\u8def\uff1a\n\n\u4f7f\u7528\u7ffb\u8f6c\u7684\u60c5\u51b5\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u60c5\u51b5\u4e0b\u5728\u53ea\u7ecf\u8fc7\u8f83\u5c0f\u6b21\u6570\u7684\u7ffb\u8f6c\u65f6\uff0c\u6709\u53ef\u80fd\u80fd\u591f\u8ba9\u4e00\u4e9b\u672c\u6765\u8ddd\u79bb\u5f88\u957f\u7684\u70b9\u4e4b\u95f4\u53ef\u4ee5\u5feb\u901f\u5230\u8fbe\uff0c\u8fbe\u5230\u7f29\u5c0f\u8ddd\u79bb\u7684\u76ee\u7684\u3002\u53e6\u4e00\u79cd\u60c5\u51b5\u4e0b\u5219\u662f\u8fc7\u4e0d\u53bb\uff0c\u5fc5\u987b\u8981\u7ffb\u8f6c\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u7ffb\u8f6c\u6b21\u6570\u53ef\u80fd\u4f1a\u975e\u5e38\u591a\u3002\n\n\u4e00\u79cd\u6734\u7d20\u7684\u601d\u60f3\u662f\u5efa\u7acb\u4e00\u4e2a\u5206\u5c42\u56fe\uff0c\u5947\u6570\u5c42\u5efa\u7acb\u6b63\u5411\u8fb9\uff0c\u5076\u6570\u5c42\u5219\u5efa\u7acb\u53cd\u5411\u8fb9\uff0c\u76f8\u90bb\u4e24\u5c42\u7684\u76f8\u540c\u70b9\u4e4b\u95f4\u6709\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u8868\u793a\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8fd9\u79cd\u5efa\u56fe\u7684\u5c42\u6570\u4e0d\u80fd\u592a\u591a\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4f7f\u7528\u7ffb\u8f6c\u7684\u6b21\u6570\u8d85\u8fc7\u4e86 $18$ \u6b21\uff0c\u4e00\u6b21\u7ffb\u8f6c\u7684\u4ee3\u4ef7\u5c31\u8d85\u8fc7\u4e86\u904d\u5386\u6574\u4e2a\u56fe\u7684\u4ee3\u4ef7\uff0c\u6240\u4ee5\u4e00\u5b9a\u662f\u7528\u4e8e\u8d70\u8fc7\u4e0d\u80fd\u8d70\u8fc7\u7684\u8fb9\u7684\u3002\n\n---\n\u7531\u6b64\u601d\u8def\u5c31\u6bd4\u8f83\u6e05\u6670\u4e86\u3002\n\n\u5148\u5efa\u7acb\u4e00\u4e2a $19$ \u5c42\u7684\u5206\u5c42\u56fe\uff0c\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u89c2\u5bdf\u662f\u5426\u80fd\u591f\u5230\u8fbe\u67d0\u4e00\u5c42\u7684\u76ee\u6807\u8282\u70b9\uff0c\u5982\u679c\u80fd\u591f\u5230\u8fbe\uff0c\u5219\u8fd9\u4e2a\u6700\u5c0f\u4ee3\u4ef7\u5c31\u662f\u7b54\u6848\u3002\n\n\u5426\u5219\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u56fe\uff0c\u8fd9\u4e2a\u56fe\u53ea\u6709\u4e24\u5c42\uff0c\u4e24\u5c42\u4e4b\u95f4\u7684\u8f6c\u79fb\u4ee3\u4ef7\u4e3a\u4e00\u4e2a\u76f8\u5bf9\u4e8e\u904d\u5386\u56fe\u4ee3\u4ef7\u7684\u65e0\u7a77\u5927\uff0c\u76f4\u63a5\u8dd1\u6700\u77ed\u8def\uff0c\u6c42\u51fa\u6700\u5c0f\u4ee3\u4ef7\u540e\u5c06\u65e0\u7a77\u5927\u66f4\u6362\u6210\u539f\u6765\u7684 $2^k$ \u5e76\u53d6\u6a21\u3002\n\n---\n\u6211\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u989d\u5916\u5904\u7406\u4e86\u4e00\u4e0b\u4e24\u8005\u8fb9\u754c\u7684\u60c5\u51b5\uff0c\u9632\u6b62\u51fa\u73b0\u6070\u597d\u5728\u8fb9\u754c\u4e0a\u800c\u4e0d\u597d\u5224\u65ad\u7684\u60c5\u51b5\u3002\n\n\u53e6\u5916\u6ce8\u610f\u989d\u5916\u8fb9\u7684\u6570\u91cf\uff0c\u4e0d\u8981\u628a\u6570\u7ec4\u5f00\u5c0f\u3002\n\n---\n### \u4ee3\u7801\uff1a\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define int long long\nconst int MOD=998244353;\nconst int MAXN=20*200005;\nint n,m,u[MAXN],v[MAXN],head[MAXN],nxt[2*MAXN],num[2*MAXN],w[2*MAXN],f[MAXN],tot,vis[MAXN],N,ans,ans_2;\npriority_queue <pair<int,int> > p; \nint pow(int a,int b){\n\tint ans=1;\n\twhile(b){\n\t\tif(b&1)ans=(ans*a)%MOD;\n\t\ta=(a*a)%MOD;\n\t\tb=b>>1;\n\t}\n\treturn ans;\n}\nvoid init(){\n\tmemset(head,0,sizeof(head));\n\tmemset(nxt,0,sizeof(nxt));\n\tmemset(num,0,sizeof(num));\n\tmemset(w,0,sizeof(w));\n\ttot=0;\n}\nvoid add(int x,int y,int z){\n\tnxt[++tot]=head[x];\n\thead[x]=tot;\n\tnum[tot]=y;\n\tw[tot]=z;\n}\nvoid build_1(int t,int p){//\u5efa\u7acb\u666e\u901a\u8fb9\n\t//     \u5c42\u6570  \u6b63\u53cd\n\tfor(int i=1;i<=m;i++){\n\t\tif(p==1)add(t*n+u[i],t*n+v[i],1);\n\t\tif(p==-1)add(t*n+v[i],t*n+u[i],1);\n\t}\n}\nvoid build_2(int t,int w,int u){//\u5c42\u4e0e\u5c42\u4e4b\u95f4\u7684\u8fb9 \n\tfor(int i=1;i<=n;i++)\n\tadd(t*n+i,(t+u)*n+i,w);\n}\nvoid Dij(int s){\n\twhile(!p.empty())p.pop();\n\tmemset(vis,0,sizeof(vis));\n\tp.push(make_pair(0,s));\n\tfor(int i=0;i<=N;i++)f[i]=1e13;\n\tf[s]=0;\n\twhile(!p.empty()){\n\t\tint now=p.top().second,d=-p.top().first;p.pop();\n\t\tif(f[now]!=d)continue;\n\t\tvis[now]=1;\n\t\tfor(int i=head[now];i;i=nxt[i]){\n\t\t\tif(f[now]+w[i]<f[num[i]]){\n\t\t\t\tf[num[i]]=f[now]+w[i];\n\t\t\t\tp.push(make_pair(-f[num[i]],num[i]));\n\t\t\t}\n\t\t}\n\t}\n}\nsigned main(){\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\tscanf(\"%lld%lld\",&u[i],&v[i]);\n\tfor(int i=1;i<=20;i++){\n\t\tif(i%2==1)build_1(i-1,1);\n\t\telse build_1(i-1,-1);\n\t}\n\tfor(int i=1;i<=18;i++)\n\tbuild_2((i-1),(1<<(i-1)),1);\n\tN=20*n;Dij(1);ans=1e13;\n\tfor(int i=1;i<=20;i++)\n\tans=min(ans,f[i*n]);\n\t\n\tinit();N=3*n;\n\tbuild_1(0,1);build_1(1,-1);\n\tbuild_2(0,10000000,1);build_2(1,10000000,-1);\n\tDij(1);ans_2=min(f[n],f[2*n]);\n\t\n\tif(ans_2/10000000>19){\n\t\tans_2=(pow(2,ans_2/10000000)+ans_2%10000000-1+MOD)%MOD;\n\t\tprintf(\"%lld\",ans_2);\n\t}\n\telse{\n\t\tans_2=(1ll<<(ans_2/10000000))-1ll+(ans_2%10000000);\n\t\tprintf(\"%lld\",min(ans,ans_2)%MOD);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1665229649,
        "uid": 223559,
        "name": "qxp101",
        "ccfLevel": 6,
        "title": "CF1442C Graph Transpositions \u9898\u89e3"
    },
    {
        "content": "\u6839\u636e\u9898\u610f\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u60f3\u5230\u5efa\u5206\u5c42\u56fe\uff1a$0,2,4...$\u5c42\u662f\u539f\u56fe\uff0c$1,3,5...$\u5c42\u662f\u53cd\u56fe\u3002\u7b2c$k$\u5c42\u5230\u7b2c$k+1$\u5c42\u7684\u76f8\u5e94\u70b9\u4e4b\u95f4\u8fde$2^k$\u7684\u8fb9\u3002\n\n\u4f46\u6211\u4eec\u6709\u53ef\u80fd\u4f1a\u8d70\u5f88\u591a\u5c42\u624d\u80fd\u5230\u8fbe$n$\u53f7\u70b9\u3002\u4e00\u79cd\u6700\u7b80\u5355\u7684\u60c5\u51b5\u5c31\u662f\n\n```plain\n200000 199999\n2 1\n2 3\n4 3\n4 5\n6 5\n6 7\n...\n199998 199999\n200000 199999\n```\n\n\u8fd9\u6837\u6bcf\u8d70\u4e00\u6b65\u90fd\u9700\u8981\u4e0b\u4e00\u5c42\u3002\u6240\u4ee5\u70b9\u6570\u4f1a\u8fbe\u5230$O(n^2)$\u800c\u4e14\u8fb9\u6743\u4e5f\u4f1a\u975e\u5e38\u5927\u3002\n\n\u6240\u4ee5\u66b4\u529b\u5efa\u5206\u5c42\u56fe\u663e\u7136\u662f\u4e0d\u53ef\u53d6\u7684\u3002\u4f46\u6211\u4eec\u53d1\u73b0$2^k$\u7684\u589e\u957f\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u5f53$k=18$\u65f6$2^k$\u5df2\u7ecf\u5927\u4e8e$n$\u4e86\u3002\n\n\u800c\u8fd9\u610f\u5473\u7740$k\\geq 18$\u65f6\uff0c\u6bcf\u4e0b\u4e00\u5c42\u6240\u4ea7\u751f\u7684\u4ee3\u4ef7\u90fd\u5927\u4e8e\u5728\u540c\u4e00\u5c42\u904d\u5386\u6574\u5f20\u56fe\u7684\u4ee3\u4ef7\u3002\u4e5f\u5c31\u662f\u8bf4\u6b64\u65f6\u9996\u8981\u6761\u4ef6\u662f\u5c42\u6570\u6700\u5c0f\uff0c\u5176\u6b21\u624d\u662f\u6700\u77ed\u8def\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ea\u5bf9\u524d$18$\u5c42\u5efa\u5206\u5c42\u56fe\u8dd1\u4e00\u904d$SPFA$\u3002\u5982\u679c\u524d$18$\u5c42\u8dd1\u4e0d\u5230$n$\u53f7\u70b9\uff0c\u5c31\u6309\u5c42\u8fdb\u884c\u7c7b\u4f3c\u4e8e\u6d2a\u6c34\u586b\u5145\u7684$SPFA$\uff1a\u9650\u5b9a$SPFA$\u5728\u5f53\u524d\u5c42\u8dd1\uff0c\u5f53\u8dd1\u4e0d\u52a8\uff08\u5373\u961f\u5217\u4e3a\u7a7a\uff09\u65f6\u5c31\u5c06\u6240\u6709\u70b9\u5165\u961f\u5728\u4e0b\u4e00\u5c42\u8dd1$SPFA$\u3002\u540c\u65f6\u8bb0\u5f55\u7684$dis$\u662f\u4e0d\u52a0$2^k$\u7684\u3002\n\n\u56e0\u4e3a\u8fb9\u6743\u90fd\u662f$0/1$\u6240\u4ee5\u8fd9\u6837\u7684$SPFA$\u662f\u7ebf\u6027\u7684\u3002\n\n\u8fd9\u6837\u53ef\u4fdd\u8bc1\u5230\u8fbe$n$\u53f7\u70b9\u65f6\u7684\u5c42\u6570\u6700\u5c0f\u3002\u8f93\u51fa\u7b54\u6848\u65f6\u52a0\u4e0a$2^k-1$\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(18m)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(18n)$\n\n\u4ee3\u7801\uff08\u5934\u6587\u4ef6\u7b49\u7701\u7565\uff09\n\n```cpp\nconst int N=2e5+10,mod=998244353;\nint n,m,x,y;\nvector<int> e[2][N];\ninline void adde(int x,int y,int o){\n\te[o][x].push_back(y);\n}\n\ntypedef pair<int,int> pii;\nint dis[19][N];\nbool vis[19][N];\nqueue<pii> q;\nint spfa(){\n\tmemset(dis,63,sizeof(dis));\n\tq.push(pii(0,1));\n\tdis[0][1]=0;\n\twhile(!q.empty()){\n\t\tint u=q.front().second,k=q.front().first;\n\t\tq.pop();vis[k][u]=0;\n\t\tfor(int v:e[k&1][u]){\n\t\t\tif(dis[k][v]>dis[k][u]+1){\n\t\t\t\tdis[k][v]=dis[k][u]+1;\n\t\t\t\tif(!vis[k][v])vis[k][v]=1,q.push(pii(k,v));\n\t\t\t}\n\t\t}\n\t\tif(k<18){\n\t\t\tif(dis[k+1][u]>dis[k][u]+(1<<k)){\n\t\t\t\tdis[k+1][u]=dis[k][u]+(1<<k);\n\t\t\t\tif(!vis[k+1][u])vis[k+1][u]=1,q.push(pii(k+1,u));\n\t\t\t}\n\t\t}\n\t}\n\tint res=1e9+7;\n\tfor(int i=0;i<=18;++i)res=min(res,dis[i][n]);\n\treturn res;\n}\n\nqueue<int> Q,tmp;\nint diss[N];\ninline int qbit(int x){\n\tint res=1,t=2;\n\tfor(;x;x>>=1)x&1?(res=1ll*res*t%mod):1,t=1ll*t*t%mod;\n\treturn res;\n}\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;++i){\n\t\tx=read(),y=read();\n\t\tadde(x,y,0),adde(y,x,1);\n\t}\n\tint ans=spfa();\n\tif(ans<1e9)return enter(ans),0;\n\t\n\tmemset(diss,63,sizeof(diss));\n\tdiss[1]=0,Q.push(1),tmp.push(1);\n\tfor(int k=0;;++k){\n\t\twhile(!Q.empty()){\n\t\t\tint u=Q.front();\n\t\t\tQ.pop();\n\t\t\tif(u==n)return enter((qbit(k)-1+diss[u])%mod),0;\n\t\t\tfor(int v:e[k&1][u])\n\t\t\t\tif(diss[v]>diss[u]+1)diss[v]=diss[u]+1,Q.push(v),tmp.push(v);\n\t\t}\n\t\twhile(!tmp.empty())Q.push(tmp.front()),tmp.pop();\n\t}\n}\n```",
        "postTime": 1604394300,
        "uid": 49260,
        "name": "fr200110217102",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1442C \u3010Graph Transpositions\u3011"
    }
]