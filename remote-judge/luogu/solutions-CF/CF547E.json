[
    {
        "content": "\u6b22\u8fce\u6765\u849f\u84bb\u7684\u535a\u5ba2\u56ed\u770b\u849f\u84bb\u7684[AC\u81ea\u52a8\u673a\u7ec3\u4e60\u7b14\u8bb0 ](https://www.cnblogs.com/zkyJuruo/p/13464007.html)\n\n\u9996\u5148\u5efa\u7acb$AC$\u81ea\u52a8\u673a,\u5efa\u7acb $fail$ \u6811\u3002\n\n\u5bfb\u95ee $s_k$ \u5728 $s_l .. s_r$ \u4e2d\u51fa\u73b0\u51e0\u6b21, \u62c6\u5206\u6210 $s_k$ \u5728 $s_1 ...  s_r$ \u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u51cf $s_k$ \u5728 $s_1 ...  s_r$ \u4e2d\u51fa\u73b0\u7684\u6b21\u6570,\u79bb\u7ebf\u67e5\u8be2\u3002\n\n\u5728\u5efa\u7acb\u5b8c $Fail$ \u6811\u4e4b\u540e, \u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u5b57\u7b26\u4e32\u3002\u63d2\u5165\u5b57\u7b26\u4e32 $s_m$ \u65f6\u5c06\u5b57\u7b26\u4e32 $s_m$ \u7684\u6bcf\u4e00\u4e2a\u524d\u7f00\u5bf9\u5e94\u72b6\u6001\u7684\u7b54\u6848\u589e\u52a0\u4e00\u3002\n\n\u63d2\u5165\u5b8c\u89e3\u51b3\u5bf9\u4e8e\u4efb\u610f $k$, $s_k$ \u5728 $s_1 ... s_m$ \u4e2d\u51fa\u73b0\u7684\u6b21\u6570, \u7531\u4e8e\u5728 $s_k$ \u7684\u5b50\u6811\u4e2d\u7684\u72b6\u6001\u6240\u5bf9\u4e8e\u7684\u5b57\u7b26\u4e32\u90fd\u5305\u542b $s_k$, \u6240\u4ee5\u53ea\u9700\u8981\u67e5\u8be2 $Fail$ \u6811\u4e0a\u7684\u5b50\u6811\u7b54\u6848\u548c\u5c31\u884c\u4e86\u3002\n\n\u5982\u4f55\u5feb\u901f\u5f97\u5230\u8fd9\u4e00\u4e2a\u7b54\u6848? $dfs$ \u5e8f + \u6811\u72b6\u6570\u7ec4\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $(|S| + q) log_2|S|$, $|S| = \\sum\\limits_{i = 1}^{n}|S_i|$\n\nCode:\n```cpp\n#include<bits/stdc++.h>\n#define N 210000\n#define M 510000\nusing namespace std;\nint lowbit(int x) {return x & -x;}\nint n, Q, ans[N], ch[N][26], fa[N], fail[N], tot, uid[N], siz[N], cnt;\nlong long szsz[N];\nvoid add(int x, int val) {\n\tif(x == 0) return;\n\twhile(x <= cnt) szsz[x] += val,x += lowbit(x);\n}\nint qzh(int x) {\n\tint Ans = 0;\n\tfor(int i = x; i; i -= lowbit(i)) Ans += szsz[i];\n\treturn Ans;\n}\nint head[N], last[N];\nstruct node {\n\tint to, next;\n} e[N];\nint edge_id;\nvoid add_edge(int u, int v) {\n\t++edge_id;\n\tif(!head[u]) head[u] = edge_id;\n\telse e[last[u]].next = edge_id;\n\te[edge_id].to = v, last[u] = edge_id;\n}\nvoid ins(char *f, int len, int id) {\n\tint now = 0;\n\tfor(int i = 0; i < len; i++) {\n\t\tif(!ch[now][f[i] - 'a']) ch[now][f[i] - 'a'] = ++tot, fa[tot] = now;\n\t\tnow = ch[now][f[i] - 'a'];\n\t}\n\tans[id] = now;\n}\nvoid bfs() {\n\tqueue<int> q; \n\tfor(int i = 0; i < 26; i++) if(ch[0][i]) q.push(ch[0][i]);\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i = 0; i < 26; i++) {\n\t\t\tint v = ch[u][i];\n\t\t\tif(!v) ch[u][i] = ch[fail[u]][i];\n\t\t\telse fail[v] = ch[fail[u]][i], q.push(v);\n\t\t}\n\t}\n}\nvoid dfs(int x) {\n\tuid[x] = ++cnt, siz[x] = 1;\n\tfor(int i = head[x]; i; i = e[i].next) dfs(e[i].to), siz[x] += siz[e[i].to];\n} \nvoid build() {\n\tfor(int i = 1; i <= tot; i++) add_edge(fail[i], i);\n\tdfs(0);\n} \nstruct ask {\n\tint x, cx, id, flag;\n\tlong long ans;\n} q[M << 1];\nbool cmp(ask aa, ask bb) {\n\treturn aa.x < bb.x;\n}\nbool pmc(ask aa, ask bb) {\n\treturn aa.id == bb.id ? aa.flag < bb.flag : aa.id < bb.id; \n}\nchar s[N];\nint mian() {\n\tscanf(\"%d%d\", &n, &Q);\n\tfor(int i = 1; i <= n; i++) {\n\t\tscanf(\"%s\", s);\n\t\tins(s, strlen(s), i);\n\t}\n\tbfs(), build();\n\tfor(int i = 1; i <= Q; i++) {\n\t\tscanf(\"%d\", &q[i * 2 - 1].x), q[i * 2 - 1].x--;\n\t\tscanf(\"%d\", &q[i * 2].x);\n\t\tscanf(\"%d\", &q[i * 2].cx), q[i * 2 - 1].cx = q[i * 2].cx;\n\t\tq[i * 2 - 1].id = q[i * 2].id = i;\n\t\tq[i * 2 - 1].flag = -1, q[i * 2].flag = 1;\n\t}\n\tsort(q + 1, q + 2 * Q + 1, cmp);\n\tint xyx = 1;\n\twhile(q[xyx].x == 0) ++xyx;\n\tfor(int i = 1; i <= n; ++i) {\n\t\tfor(int j = ans[i]; j; j = fa[j]) add(uid[j], 1);\n\t\twhile(q[xyx].x == i) {\n\t\t\tint ques = ans[q[xyx].cx], pid = uid[ques];\n\t\t\tq[xyx].ans = qzh(pid + siz[ques] - 1) - qzh(pid - 1);\n\t\t\t++xyx;\n\t\t}\n\t}\n\tsort(q + 1, q + 2 * Q + 1, pmc);\n\tfor(int i = 1; i <= Q; i++) printf(\"%lld\\n\", q[i * 2].ans - q[i * 2 - 1].ans);\n\treturn 0; //}\n```",
        "postTime": 1596972266,
        "uid": 173660,
        "name": "zhoukangyang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF547E \u3010Mike and Friends\u3011"
    },
    {
        "content": "> [CF547E Mike and Friends](https://codeforc.es/contest/547/problem/E)\n\n## \u9898\u610f\n\n- \u7ed9\u5b9a $n$ \u4e2a\u5b57\u7b26\u4e32 $s_{1 \\dots n}$\u3002\n- $q$ \u6b21\u8be2\u95ee $s_k$ \u5728 $s_{l \\dots r}$ \u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\n- $n, \\sum |s| \\le 2 \\times 10^5$\uff0c$q \\le 5 \\times 10^5$\u3002\n\n## \u9898\u89e3\n\n\u9996\u5148\u5bf9 $n$ \u4e2a\u5b57\u7b26\u4e32\u5efa\u51fa AC \u81ea\u52a8\u673a\u3002\n\n\u5c06\u8be2\u95ee\u79bb\u7ebf\u5e76\u5dee\u5206\u6210\u4e24\u4e2a\u8be2\u95ee\u3002\n\n\u5c06\u5b57\u7b26\u4e32\u987a\u7740\u626b\u4e00\u904d\uff0c\u5bf9\u626b\u8fc7\u7684\u5b57\u7b26\u4e32\u5728 trie \u4e0a\u7684\u6240\u6709\u8282\u70b9\u8d21\u732e $+1$\u3002\n\n\u5047\u8bbe\u6b64\u65f6\u626b\u5230\u4e32 $i$\uff0c\u90a3\u4e48\u5728 $i$ \u4e0a\u7684\u8be2\u95ee $s_k$ \u7684\u8d21\u732e\u7b49\u4e8e **$s_k$ \u5728 trie \u4e0a\u7684\u7ec8\u70b9**\u5728 fail \u6811\u4e0a\u7684\u5b50\u6811\u8d21\u732e\u548c\u3002\n\n\u6309 fail \u6811\u7684 dfs \u5e8f\u5efa\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O((n + q) \\log n)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\nconst int N = 2e5 + 7, M = 26, Q = 5e5 + 7;\nint n, m, q, p[N], trie[N][M], fail[N], f[N], t = 1, dfn[N], num, siz[N], c[N], k[Q], ans[Q];\nchar s[N];\nvi e[N];\n\ninline int ins(int n) {\n\tint p = 1;\n\tfor (int i = 1; i <= n; i++) {\n\t\tint c = s[i] - 'a';\n\t\tif (!trie[p][c]) f[trie[p][c]=++t] = p;\n\t\tp = trie[p][c];\n\t}\n\treturn p;\n}\n\nvoid dfs(int x) {\n\tdfn[x] = ++num, siz[x] = 1;\n\tfor (ui i = 0; i < e[x].size(); i++) dfs(e[x][i]), siz[x] += siz[e[x][i]];\n}\n\ninline void build() {\n\tqueue< int > q;\n\tfor (int i = 0; i < M; i++)\n\t\tif (trie[1][i]) fail[trie[1][i]] = 1, q.push(trie[1][i]);\n\t\telse trie[1][i] = 1;\n\twhile (q.size()) {\n\t\tint x = q.front();\n\t\tq.pop();\n\t\tfor (int i = 0; i < M; i++)\n\t\t\tif (trie[x][i]) fail[trie[x][i]] = trie[fail[x]][i], q.push(trie[x][i]);\n\t\t\telse trie[x][i] = trie[fail[x]][i];\n\t}\n\tfor (int i = 2; i <= t; i++) e[fail[i]].pb(i);\n\tdfs(1);\n}\n\ninline void add(int x) {\n\twhile (x <= t) ++c[x], x += x & -x;\n}\n\ninline int ask(int x) {\n\tint ret = 0;\n\twhile (x) ret += c[x], x -= x & -x;\n\treturn ret;\n}\n\nint main() {\n\trd(n), rd(q);\n\tfor (int i = 1; i <= n; i++) rds(s, m), p[i] = ins(m);\n\tbuild();\n\tfor (int i = 1; i <= n; i++) e[i].clear();\n\tfor (int i = 1, l, r; i <= q; i++) {\n\t\trd(l), rd(r), rd(k[i]);\n\t\tif (l > 1) e[l-1].pb(-i);\n\t\te[r].pb(i);\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tint x = p[i];\n\t\twhile (x ^ 1) add(dfn[x]), x = f[x];\n\t\tfor (ui j = 0; j < e[i].size(); j++) {\n\t\t\tint o = e[i][j] > 0 ? 1 : -1, t = abs(e[i][j]), x = p[k[t]];\n\t\t\tans[t] += o * (ask(dfn[x] + siz[x] - 1) - ask(dfn[x] - 1));\n\t\t}\n\t}\n\tfor (int i = 1; i <= q; i++) print(ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1575829341,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF547E \u3010Mike and Friends\u3011"
    },
    {
        "content": "## \u3010SAM\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u3011CF547E Mike and Friends\n\n### Description\n\n\u7ed9\u5b9a $n$ \u4e2a\u5b57\u7b26\u4e32 $s_1 \\dots s_n$\u3002\u6709 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u67e5\u8be2 $s_k$ \u5728 $s_l \\sim s_r$ \u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff08\u4f5c\u4e3a\u5b50\u4e32\uff09\u3002\n\n$1 \\leq n, \\sum |s| \\leq 2 \\times 10^5$\uff0c$1 \\leq q \\leq 5 \\times 10^5$\u3002\n\n### Analysis\n\n\u5bf9 $s$ \u5efa\u51fa\u5e7f\u4e49 SAM\u3002\n\n\u8003\u8651\u4ee5 $s_k$ \u4e3a\u5b50\u4e32\u7684\u4e32\u662f\u5728 fail \u6811\u4e0a $s_k$ \u7684\u5bf9\u5e94\u7ed3\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u7ed3\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002\u53ea\u8981\u90a3\u4e48\u53ea\u9700\u8981\u6c42\u51fa\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u4e00\u5171\u8868\u793a\u4e86\u591a\u5c11\u4e2a $[l, r]$ \u5185\u7684\u5b57\u7b26\u4e32\u5373\u53ef\u3002\n\n\u8003\u8651\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u533a\u95f4 $[i, i]$ \u8868\u793a\u5b83\u4ee3\u8868\u4e86\u51e0\u4e2a\u7f16\u53f7\u4e3a $i$ \u7684\u5b50\u4e32\uff0c\u5927\u533a\u95f4\u7ef4\u62a4\u533a\u95f4\u548c\u3002\u5728\u5efa SAM \u7684\u65f6\u5019\uff0c\u628a\u6240\u6709\u4e32\u7684\u6240\u6709\u524d\u7f00\u90fd\u5728\u5bf9\u5e94\u5bf9\u5e94\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u7684\u5bf9\u5e94\u4f4d\u7f6e\u4e0a $+1$\uff0c\u7136\u540e\u5728 fail \u6811\u4e0a\u5411\u4e0a\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u3002\u5f53\u7136\uff0c\u4e3a\u4e86\u4e0d\u7206\u65f6\u7a7a\uff0c\u7ebf\u6bb5\u6811\u9700\u8981\u52a8\u6001\u5f00\u70b9\u3002\u67e5\u8be2\u65f6\u76f4\u63a5\u627e\u5230 $s_k$ \u7684\u5bf9\u5e94\u8282\u70b9\uff0c\u7136\u540e\u67e5\u8be2\u7ebf\u6bb5\u6811\u4e0a $[l, r]$ \u7684\u533a\u95f4\u548c\u3002\n\n\u4e0b\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u679c\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u5019\u91c7\u53d6\u201c\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u201d\u4f5c\u4e3a\u8fd4\u56de\u503c\u8fd9\u6837\u4e0d\u7834\u574f\u539f\u4fe1\u606f\u7684\u5199\u6cd5\uff0c\u9700\u8981\u5f00 $8 \\times \\sum |s| \\times \\log n  \\approx 3.2 \\times 10^7$ \u4e2a\u7ed3\u70b9\uff0c\u8089\u773c\u53ef\u89c1\u4f1a\u7206\u7a7a\u95f4\u3002\u56e0\u6b64\u5fc5\u987b\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u628a\u8be2\u95ee\u5168\u90e8\u6302\u5728 $s_k$ \u5bf9\u5e94\u7684\u8282\u70b9\u4e0a\uff0c\u5728\u5c06 $s_k$ \u5b50\u6811\u4fe1\u606f\u5408\u5e76\u5b8c\u4ee5\u540e\uff0c\u76f4\u63a5\u6c42\u51fa $s_k$ \u7684\u6240\u6709\u8be2\u95ee\u7684\u7b54\u6848\u3002\u8fd9\u6837\u53ea\u9700\u8981\u5f00 $\\sum |s| \\log n$ \u4e2a\u7ebf\u6bb5\u6811\u7ed3\u70b9\uff0c\u7a7a\u95f4\u4e0a\u53ef\u4ee5\u627f\u53d7\u3002\n\n\u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u4ee5\u4e0b\u8bbe $\\sum |s| = S$\uff0c\u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a $t$\uff09\uff1a\u4e00\u5f00\u59cb\u4e00\u5171\u628a $O(S)$ \u4e2a\u524d\u7f00\u5728\u7ebf\u6bb5\u6811\u4e0a\u4fee\u6539\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(S \\log n)$\uff0c\u6784\u9020 $SAM$ \u7684\u590d\u6742\u5ea6\u4e3a $O(S \\log t)$\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u603b\u590d\u6742\u5ea6\u4e3a $O(S \\log n)$\uff0c\u67e5\u8be2\u590d\u6742\u5ea6\u4e3a $O(q \\log n)$\u3002\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a $O((S + q) \\log n + S \\log t)$\u3002\n\n### Code\n\n```cpp\nnamespace Fusu {\n\nconst int maxt = 26;\nconst int maxh = 19;\nconst int maxn = 200005;\nconst int maxq = 500005;\n\nint n, q;\nint a[maxq], b[maxq], k[maxq], ans[maxq];\n\nnamespace Smt {\n\nstruct Node {\n  int v;\n  Node *ls, *rs;\n\n  void pushup() {\n    v = 0;\n    if (ls) v += ls->v;\n    if (rs) v += rs->v;\n  }\n\n  int qry(const int L, const int R, const int l, const int r) {\n    if ((L <= l) && (r <= R)) return v;\n    int ret = 0, mid = (l + r) >> 1;\n    if (mid >= L) {\n      ret += ls ? ls->qry(L, R, l, mid) : 0;\n    }\n    if (mid <= R) {\n      ret += rs ? rs->qry(L, R, mid + 1, r) : 0;\n    }\n    return ret;\n  }\n};\nNode Mem[maxn * maxh], *pool = Mem, rot, *rt = &rot;\ninline Node* New() {\n  return pool++;\n}\n\ninline void upd(Node *const u, const int p, const int v, const int l, const int r) {\n  if (l == r) {\n    u->v += v;\n  } else {\n    int mid = (l + r) >> 1;\n    if (p <= mid) {\n      upd(u->ls ? u->ls : u->ls = New(), p, v, l, mid);\n    } else {\n      upd(u->rs ? u->rs : u->rs = New(), p, v, mid + 1, r);\n    }\n    u->pushup();\n  }\n//  printf(\"OOOOvOOO%lld %d %d %d %d %d\\n\", u, l, r, u->v, u->ls ? u->ls->v : -1, u->rs ? u->rs->v : -1);\n}\n\nNode *merge(Node *const u, Node *const v) {\n  if (u == nullptr) return v;\n  if (v == nullptr) return u;\n  if ((u->ls == nullptr) && (u->rs == nullptr)) {\n    u->v += v->v;\n    return u;\n  }\n  u->ls = merge(u->ls, v->ls);\n  u->rs = merge(u->rs, v->rs);\n  u->pushup();\n  return u;\n}\n\n} // namespace Smt\n\nnamespace SAM {\n\nstruct Node {\n  int len;\n  Node *fail;\n  Smt::Node *t;\n  std::vector<int> qid;\n  std::vector<Node*> e;\n  std::map<char, Node*> trans;\n\n  void dfs() {\n    for (auto v : e) {\n      v->dfs();\n      t = Smt::merge(t, v->t);\n    }\n    for (auto x : qid) {\n      ans[x] = t->qry(a[x], b[x], 1, n);\n    }\n  }\n};\nNode Mem[maxn << 1], *pool = Mem, rt , *rot = &rt;\ninline Node *New(const int x) {\n  pool->len = x;\n  return pool++;\n}\n\nNode *extend(Node *p, const char x) {\n  auto np = New(p->len + 1);\n  while (p && (p->trans.count(x) == false)) {\n    p->trans[x] = np;\n    p = p->fail;\n  }\n  if (p == nullptr) {\n    np->fail = rot;\n  } else {\n    auto q = p->trans[x];\n    if (q->len == (p->len + 1)) {\n      np->fail = q;\n    } else {\n      auto nq = New(p->len + 1);\n      nq->trans = q->trans;\n      nq->fail = q->fail;\n      q->fail = np->fail = nq;\n      while (p && (p->trans[x] == q)) {\n        p->trans[x] = nq;\n        p = p->fail;\n      }\n    }\n  }\n  return np;\n}\n\nvoid debug() {\n  printf(\"%lld\\n\", rot);\n  for (auto u = Mem; u != pool; ++u) printf(\"%lld %lld %d\\n\", u, u->fail, u->len);\n}\n\n} // namespace SAM\n\nnamespace Trie {\n\nstruct Node {\n  Node *ls, *rs;\n  SAM::Node *pos;\n  std::vector<int> pid;\n  std::map<int, Node*> trans;\n};\nNode rt, *rot = &rt, Mem[maxn], *pool = Mem;\n\nNode* insert(char *const s, const int x, const int id) {\n  auto u = rot;\n  for (int i = 1, c = s[i] - 'a'; i <= x; c = s[++i] - 'a') {\n    u = u->trans[c] ? u->trans[c] : (u->trans[c] = pool++);\n    u->pid.push_back(id);\n  }\n  return u;\n}\n\nstd::queue<Node*> Q;\nvoid bfs() {\n  Q.push(rot);\n  rot->pos = SAM::rot;\n  for (Node *u, *v; Q.empty() == false; Q.pop()) {\n    u = Q.front();\n    u->pos->t = Smt::pool++;\n    for (auto x : u->pid) {\n      Smt::upd(u->pos->t, x, 1, 1, n);\n//      printf(\"OOvvOO%lld %d %d\\n\", u->pos, x, u->pos->t->v);\n    }\n    for (auto &vv : u->trans) {\n      auto p = SAM::extend(u->pos, vv.first);\n      Q.push(v = vv.second);\n      v->pos = p;\n    }\n  }\n}\n\n} // namespace Trie\nTrie::Node *epos[maxn];\n\nchar s[maxn];\nvoid Main() {\n  qr(n); qr(q);\n  for (int i = 1, x; i <= n; ++i) {\n    x = qrs(s + 1);\n    epos[i] = Trie::insert(s, x, i);\n  }\n  Trie::bfs();\n//  SAM::debug();\n  for (int i = 1; i <= q; ++i) {\n    qr(a[i]); qr(b[i]); qr(k[i]);\n    epos[k[i]]->pos->qid.push_back(i);\n  }\n  for (auto u = SAM::Mem; u != SAM::pool; ++u) {\n    u->fail->e.push_back(u);\n  }\n  SAM::rot->dfs();\n  qwa(ans + 1, q,  '\\n', '\\n');\n}\n\n} // namespace Fusu\n```\n\n",
        "postTime": 1591692564,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF547E \u3010Mike and Friends\u3011"
    },
    {
        "content": "\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\u62c6\u6210\u4e24\u4e2a\u8be2\u95ee\n\n\u5bf9\u6240\u6709\u5b57\u7b26\u4e32\u5efa\u51fa AC \u81ea\u52a8\u673a\uff0c\u5efa fail \u6811\n\n\u4f9d\u6b21\u52a0\u5165\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u8d21\u732e\u540c\u65f6\u7edf\u8ba1\u7b54\u6848\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u5728\u5f53\u524d\u6240\u6709\u4e32\u4e2d\u51fa\u73b0\u6b21\u6570\u4e3a\uff1a\u5b83\u7684\u7ec8\u6b62\u8282\u70b9\u5728\u7684\u5b50\u6811\uff08fail \u6811\uff09\u7684\u8d21\u732e\u548c\n\n\u600e\u4e48\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u4e32\u7684\u8d21\u732e\uff1f\u7531\u4e8e $\\sum |s_i|\\le n$\uff0c\u6240\u4ee5\u6211\u4eec\u66b4\u529b\u5728 trie \u6811\u4e0a\u8df3\u540c\u65f6\u5728\u6811\u72b6\u6570\u7ec4\u91cc\u5355\u70b9\u4fee\u6539\u5373\u53ef\uff0c\u7531\u4e8e\u7ef4\u62a4\u7684\u662f\u5b50\u6811\u4fe1\u606f\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u91c7\u7528 dfs \u5e8f\u4f5c\u4e3a\u4e0b\u6807\n\n```cpp\n//timeuse:40min\nconst int N = 200010,M = N;\nint cnt;\nstruct AC\n{\n\tstruct trie\n\t{\n\t\tint ch[26],fail;\n\t\tint& operator [](int x) { return ch[x]; }\n\t}t[N];\n\tint end[N],fa[N];\n\tvoid insert(char *s,int id)\n\t{\n\t\tint now = 0;\n\t\tfor(int i = 1;s[i];i++)\n\t\t{\n\t\t\tint ch = s[i] - 'a';\n\t\t\tif(!t[now][ch]) fa[t[now][ch] = ++cnt] = now;\n\t\t\tnow = t[now][ch];\n\t\t}end[id] = now;\n\t}\n\tqueue<int> q;EE(1);\n\tint siz[N],dfn[N],idx;\n\tvoid dfs(int u)\n\t{\n\t\tdfn[u] = ++idx,siz[u] = 1;\n\t\tfor(int i = head[u];i;i = e[i].nxt) dfs(e[i].to),siz[u] += siz[e[i].to];\n\t}\n\tvoid build()\n\t{\n\t\tfor(int i = 0;i < 26;i++) if(t[0][i]) q.push(t[0][i]);\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint u = q.front();q.pop();\n\t\t\tfor(int i = 0;i < 26;i++)\n\t\t\t\tif(t[u][i]) t[t[u][i]].fail = t[t[u].fail][i],q.push(t[u][i]);\n\t\t\t\telse t[u][i] = t[t[u].fail][i];\n\t\t}\n\t\tfor(int i = 1;i <= cnt;i++) add(t[i].fail,i);\n\t\tdfs(0);\n\t}\n\tstruct BIT\n\t{\n\t\tint c[N];\n\t\tvoid add(int x) { for(;x <= cnt + 1;x += x & -x) c[x]++; }\n\t\tint query(int x) { int res = 0;for(;x;x -= x & -x) res += c[x];return res; }\n\t}bit;\n\tvoid push(int id)\n\t{\n\t\tint now = end[id];\n\t\twhile(now) bit.add(dfn[now]),now = fa[now];\n\t}\n\tint query(int id)\n\t{\n\t\tint k = end[id];\n\t\treturn bit.query(dfn[k] + siz[k] - 1) - bit.query(dfn[k] - 1);\n\t}\n}AC;\nint n,q;char s[N];\nstruct query { int k,id,t; };\nvector<query> v[N];int ans[N];\nint main()\n{\n\tn = read(),q = read();\n\tfor(int i = 1;i <= n;i++) scanf(\"%s\",s + 1),AC.insert(s,i);\n\tAC.build();\n\tfor(int i = 1;i <= q;i++)\n\t{\n\t\tint l = read(),r = read(),k = read();\n\t\tv[r].push_back({k,i,1});\n\t\tv[l - 1].push_back({k,i,-1});\n\t}\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tAC.push(i);\n\t\tfor(auto j:v[i]) ans[j.id] += j.t * AC.query(j.k);\n\t}\n\tfor(int i = 1;i <= q;i++) fprint(ans[i]);\n}\n```",
        "postTime": 1593168488,
        "uid": 53994,
        "name": "81179332_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF547E \u3010Mike and Friends\u3011"
    },
    {
        "content": "\u540c\u6b65\u66f4\u65b0\u5728\u6211\u7684 [blog](https://acfunction.github.io/2019/08/23/CF547E/) \u3002\n\n### Description \n\n\u7ed9\u5b9a $ n $ \u4e2a\u4e32  $ s_1, s_2, \\cdots, s_n $ \u548c $q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u67e5\u8be2 $ s_i $ \u4e00\u5171\u5728 $ s_l, s_{l+1}, \\cdots, s_r $ \u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\n\n$ n, q, \\sum \\limits_{i=1}^{n} |s_i| \\leq 2 \\times 10^5 $\u3002\n\n### Solution\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u540e\u7f00\u6570\u7ec4\u7684\u505a\u6cd5\u3002\n\n- \u628a $ n $ \u4e2a\u4e32\u4f9d\u6b21\u8fde\u5728\u4e00\u8d77\uff0c\u76f8\u90bb\u4e24\u4e2a\u4e4b\u95f4\u7528\u4e00\u4e2a `#` \u9694\u5f00\u3002\u5f97\u5230\u4e00\u4e2a\u5927\u4e32 $ \\mathtt{S} $ \u3002  \n- \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u6c42\u51fa\u7b2c $ i $ \u4e2a\u4e32 $ s_i $ \u7684\u957f\u5ea6 $len_i$\uff0c\u5728 $ \\mathtt{S} $ \u4e2d\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u6240\u5728\u7684\u4f4d\u7f6e $pos_i$ \u4ee5\u53ca $ \\mathtt{S} $ \u7684\u540e\u7f00\u6570\u7ec4\u3002  \n- \u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\uff0c\u5047\u8bbe\u8be2\u95ee\u4e32\u662f $s_k$\uff0c\u4ed6\u5728\u4e00\u4e2a\u4f4d\u7f6e $p$ \u51fa\u73b0\u5f53\u4e14\u4ec5\u5f53\u4ece $p$ \u5f00\u59cb\u7684\u540e\u7f00\u4e0e\u4ece $pos_k$ \u5f00\u59cb\u7684\u540e\u7f00\u7684 $\\mathtt{LCP} $ \u7684\u957f\u5ea6 $\\ge len_k $ \u3002\n- \u4f17\u6240\u5468\u77e5\uff0c\u4e24\u4e2a\u540e\u7f00 $i, j (\\mathtt{rk[i]} < \\mathtt{rk[j]})$ \u7684 $ \\mathtt{LCP} $ \u5c31\u662f $\\min\\limits_{\\mathtt{rk[i] + 1} \\le x \\le \\mathtt{rk[j]}} \\{\\mathtt{height[x]}\\}$ \uff0c\u4e5f\u5c31\u662f\u4e00\u6bb5\u533a\u95f4\u7684\u6700\u5c0f\u503c\u3002\n- \u5bf9\u4e8e\u6bcf\u4e2a $k$ \uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u901a\u8fc7\u4e8c\u5206\u6765\u627e\u5230\u6700\u957f\u7684\u4e00\u6bb5\u5305\u542b $\\mathtt{rk[k]}$ \u7684\u533a\u95f4 $[L_k, R_k]$ \u4f7f\u5f97\u8fd9\u4e00\u6bb5\u533a\u95f4\u4e2d\u7684 $\\mathtt{height[i]}$ \u6700\u5c0f\u503c $ \\ge len_i$ \u3002\n- \u90a3\u4e48\u5982\u679c\u4e00\u4e2a\u540e\u7f00\u7684\u524d\u7f00\u662f $s_k$ \uff0c\u90a3\u4e48\u4ed6\u7684 $ \\mathtt{rk} $ \u5fc5\u987b\u8981\u5728 $[L_k, R_k]$ \u4e2d\u3002\n- \u800c\u6211\u4eec\u60f3\u8981\u7684\u662f $s_l, s_{l+1}, \\cdots, s_r$ \u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21 $s_k$ \uff0c\u6240\u4ee5\u8fd9\u4e2a\u540e\u7f00\u7684\u51fa\u73b0\u4f4d\u7f6e $i$ \u8981\u6ee1\u8db3 $pos_l \\le i \\le pos_{r+1}-1$ \u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5047\u8bbe $pos_{n+1} = |S|+1$ \u3002\n- \u505a\u6cd5\u5df2\u7ecf\u6bd4\u8f83\u663e\u7136\uff1a\u5982\u679c\u628a\u540e\u7f00 $i$ \u5bf9\u5e94\u6210\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u7684\u70b9 $(i, rk_i)$ \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee $l, r, k$ \uff0c\u7b54\u6848\u4fbf\u662f\u5de6\u4e0b\u89d2\u4e3a $(pos_l, L_k)$ \uff0c\u53f3\u4e0a\u89d2\u4e3a $(pos_{r+1}-1, R_k)$ \u7684\u77e9\u5f62\u4e2d\u70b9\u7684\u4e2a\u6570\u3002\n- \u8fd9\u4fbf\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\u3002\u53ea\u9700\u8981\u628a\u4e00\u4e2a\u8be2\u95ee\u62c6\u6210\u56db\u4e2a\uff0c\u62ff\u51fa\u6765\u6309\u7167\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u6309\u7167\u987a\u5e8f\u626b\u4e00\u904d\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u7684\u8be2\u95ee\u628a\u6ee1\u8db3\u7b2c\u4e00\u7ef4\u9650\u5236\u7684\u70b9\u7684\u7b2c\u4e8c\u7ef4\u5750\u6807\u52a0\u4e00\uff0c\u8be2\u95ee\u5c31\u67e5\u8be2\u524d\u7f00\u548c\u5373\u53ef\u3002\u53ef\u4ee5\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n- \u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$ \u3002\n\n### Code\n\n```cpp\n/**\n * Author: AcFunction\n * Date:   2019-08-20 12:57:11\n * Email:  3486942970@qq.com\n**/\n\n#include <bits/stdc++.h>\n#define ll long long\n#define db double\n#define PII pair <int, int> \n#define pb push_back \n#define fi first\n#define se second \n#define MP make_pair\n\nusing namespace std;\n\nconst int N = 1002000; \n\nint n, qq, m, rk[N], sa[N], cnt[N], c[N]; \nint len[N], pos[N], h[N], st[N][25], lg2[N], ans[N];\nchar s[N];  \nstring S; \nchar A[N]; \nint Lp[N], Rp[N], tot; \n\nstruct node {\n  int x, y, id; \n} a[N], b[N]; \n\nstruct Query {\n  int x, y, id, typ; \n  bool operator < (const Query &t) const {\n    return x == t.x ? y < t.y : x < t.x; \n  }\n} Q[N * 4]; \n\nint lcp(int l, int r) {\n  if(l > r) return -1; int k = lg2[r - l + 1]; \n  return min(st[l][k], st[r - (1 << k) + 1][k]); \n}\n\nint lb(int x) {\n  return x & (-x); \n}\n\nint add(int x, int d) {\n  for(int i = x; i <= m; i += lb(i)) \n    c[i] += d;\n}\n\nint sum(int x) {\n  int ret = 0; \n  for(int i = x; i; i -= lb(i))\n    ret += c[i]; \n  return ret; \n}\n\nint main() {\n  scanf(\"%d %d\", &n, &qq);\n  int nowlen = 1;  \n  for(int i = 1; i <= n; i++) {\n    pos[i] = nowlen; \n    scanf(\"%s\", s + 1); \n    len[i] = strlen(s + 1); \n    for(int j = 1; j <= len[i]; j++) \n      S += s[j]; \n    nowlen += len[i] + 1; \n    S += '#';  \n  } \n  m = S.length();   \n  pos[n + 1] = m + 1;\n  A[0] = '#'; \n  for(int i = 0; i < m; i++) A[i + 1] = S[i]; \n  for(int i = 1; i <= m; i++) cnt[A[i]]++; \n  for(int i = 1; i <= 256; i++) cnt[i] += cnt[i - 1]; \n  for(int i = 1; i <= m; i++) rk[i] = cnt[A[i]]; \n  for(int L = 1; L <= m; L <<= 1) {\n    for(int i = 1; i <= m; i++) {\n      a[i].x = rk[i], a[i].y = rk[i + L]; a[i].id = i;\n    }\n    for(int i = 1; i <= m; i++) cnt[i] = 0; \n    for(int i = 1; i <= m; i++) cnt[a[i].y]++; \n    for(int i = 1; i <= m; i++) cnt[i] += cnt[i - 1]; \n    for(int i = 1; i <= m; i++) b[cnt[a[i].y]--] = a[i]; \n    for(int i = 1; i <= m; i++) cnt[i] = 0; \n    for(int i = 1; i <= m; i++) cnt[b[i].x]++;\n    for(int i = 1; i <= m; i++) cnt[i] += cnt[i - 1]; \n    for(int i = m; i >= 1; i--) a[cnt[b[i].x]--] = b[i]; \n    for(int i = 1; i <= m; i++) {\n      if(a[i].x == a[i - 1].x && a[i].y == a[i - 1].y)\n        rk[a[i].id] = rk[a[i - 1].id]; \n      else rk[a[i].id] = rk[a[i - 1].id] + 1; \n    }\n  }\n  for(int i = 2; i <= m; i++) lg2[i] = lg2[i >> 1] + 1; \n  for(int i = 1; i <= m; i++) sa[rk[i]] = i; \n  int k = 0; \n  for(int i = 1; i <= m; i++) {\n    if(k) k--; int j = sa[rk[i] - 1]; \n    while(i + k <= m && j + k <= m && A[i + k] == A[j + k]) k++;\n    h[rk[i]] = k; \n  }\n  for(int i = 1; i <= m; i++) st[i][0] = h[i]; \n  for(int j = 1; (1 << j) <= m; j++) \n    for(int i = 1; i + (1 << j) - 1 <= m; i++) \n      st[i][j] = min(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]); \n  for(int i = 1; i <= n; i++) {\n    int pp = pos[i];\n    int l = rk[pp] + 1, r = m; \n    Lp[i] = Rp[i] = rk[pp]; \n    while(l <= r) {\n      int mid = (l + r) >> 1; \n      if(lcp(rk[pp] + 1, mid) >= len[i]) {\n        Rp[i] = mid; l = mid + 1;  \n      } else r = mid - 1; \n    }\n    l = 1, r = rk[pp]; \n    while(l <= r) {\n      int mid = (l + r) >> 1; \n      if(lcp(mid + 1, rk[pp]) >= len[i]) {\n        Lp[i] = mid; r = mid - 1; \n      } else l = mid + 1; \n    }  \n  }\n  for(int i = 1; i <= qq; i++) {\n    int l, r, k; \n    scanf(\"%d %d %d\", &l, &r, &k); \n    Q[++tot] = {pos[l] - 1, Lp[k] - 1, i, 1}; \n    Q[++tot] = {pos[r + 1] - 1, Lp[k] - 1, i, -1}; \n    Q[++tot] = {pos[l] - 1, Rp[k], i, -1}; \n    Q[++tot] = {pos[r + 1] - 1, Rp[k], i, 1}; \n  }\n  int P = 1; \n  sort(Q + 1, Q + tot + 1);\n  for(int i = 1; i <= tot; i++) {\n    while(P <= Q[i].x && P <= m) {\n      add(rk[P], 1); P++; \n    }\n    // cout << Q[i].x << \" \" << Q[i].y << endl; \n    // cout << P << endl; \n    ans[Q[i].id] += Q[i].typ * sum(Q[i].y); \n  }\n  for(int i = 1; i <= qq; i++) printf(\"%d\\n\", ans[i]); \n  return 0; \n}\n```",
        "postTime": 1566535587,
        "uid": 54745,
        "name": "Gypsophila",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF547E \u3010Mike and Friends\u3011"
    },
    {
        "content": "\u6211\u662f\u7528 \u5e7f\u4e49SAM+\u7ebf\u6bb5\u6811\u5408\u5e76\u505a\u7684\uff0c\u597d\u50cf\u5927\u5bb6\u90fd\u6ca1\u4ed4\u7ec6\u8bb2\uff0c\u4e8e\u662f\u6211\u6765\u8bb2\u4e00\u4e0b\u3002\n\n---\n\n\u9996\u5148\u5148\u5efa\u51fa SAM\uff0c\u53ef\u4ee5\u627e\u51fa SAM \u4e2d\u6bcf\u4e00\u4e2a\u70b9\u662f\u5728\u7b2c\u51e0\u4e2a\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\uff0c\u5728\u4e00\u68f5\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\u4e0a\u8bb0\u5f55\u4e00\u4e0b\u3002\u7136\u540e\u628a SAM dfs \u4e00\u904d\uff0c\u6bcf\u4e00\u4e2a\u70b9\u5728\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u8d21\u732e\u52a0\u4e0a\u4ed6\u7684 $son$ \u7684\u6743\u503c\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u5c31\u662f SAM \u4e2d\u53ef\u80fd\u6709\u4e9b\u70b9\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u662f\u4e00\u6837\u7684\uff0c\u89e3\u51b3\u65b9\u6cd5\u662f\u628a\u4e00\u6837\u7684\u70b9\u90fd\u4ea4\u7ed9\u6700\u4e0a\u9762\u7684\u5904\u7406\u3002\n\ndfs \u5b8c\u4e4b\u540e**\u7406\u8bba\u4e0a**\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e00\u4e2a\u70b9\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u8d21\u732e\uff0c\u5c31\u53ef\u4ee5\u505a\u4e86\u3002\n\n---\n\n\u4f46\u662f\u4ed6\u6709\u5f88\u591a\u7ec6\u8282\u3002\n\n\u9996\u5148\u5728\u5efa SAM \u7684\u65f6\u5019\u5c31\u628a\u6bcf\u4e00\u4e2a\u70b9\u7684\u8d21\u732e\u9884\u5904\u7406\u597d\uff0c\u4ee3\u7801\u5982\u4e0b\u3002\n\n```cpp\nfor(int i=1;i<=n;i++)\n{\n\tscanf(\"%s\",str); int len=strlen(str);\n\tint las=1;\n\tfor(int j=0;j<len;j++) las=insert(str[j]-'a',las),update(rt[las],1,n,i);;\n\tpos[i]=las;\n}\n```\n\n\u7136\u540e\u56e0\u4e3a\u6211~~\u61d2\u5f97\u79bb\u7ebf~~\uff08\u4e0d\u592a\u4f1a\uff09\uff0c\u7528\u4e86\u4e00\u4e2a\u5728\u7ebf\u505a\u6cd5\uff0c**\u7ebf\u6bb5\u6811\u5408\u5e76\u4e4b\u540e\u7684\u4e24\u4e2a\u70b9\u90fd\u662f\u6709\u7528\u7684**\uff0c\u6240\u4ee5\u4ee5\u4e0b\u7684\u5408\u5e76\u505a\u6cd5\u4f1a\u9505\uff0c\u4ed6\u4f1a\u5728\u540e\u9762\u66f4\u65b0\u7684\u65f6\u5019\u8986\u76d6\u6389\u524d\u9762\u8fd8\u8981\u7528\u7684\u6570\u636e\u3002\n\n```cpp\nint merge(int u,int v)\n{\n\tif(!u||!v) return u|v;\n\tt[u].v+=t[v].v;\n\tt[u].ls=merge(t[u].ls,t[v].ls);\n\tt[u].rs=merge(t[u].rs,t[v].rs);\n\treturn u;\n}\n```\n\n\u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u5019\u8981\u65b0\u5f00\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u5408\u5e76\u5b8c\u4e86\u628a\u539f\u6765\u7684\u5e76\u56de\u53bb\uff0c\u4ee3\u7801\u5982\u4e0b\u3002\n\n```cpp\nint merge(int u,int v)\n{\n\tif(!u&&!v) return 0;\n\tif(!v) return u;\n\tif(!u) {int x=++_cnt; t[x]=t[v]; return x;}\n\tint x=++_cnt;\n\tt[x].v=t[u].v+t[v].v;\n\tt[x].ls=merge(t[u].ls,t[v].ls);\n\tt[x].rs=merge(t[u].rs,t[v].rs);\n\treturn x;\n}\n```\n\n\u56e0\u4e3a\u6211\u5f88\u83dc\uff0c\u6240\u4ee5\u8fd9\u4e2a\u505a\u6cd5\u8fd8\u6709\u70b9\u5361\u7a7a\u95f4\uff0c\u6211\u7528\u4e86 253MB \u7684\u7a7a\u95f4\uff0c\u8ddd\u79bb MLE \u8fd8\u6709 3MB \u3002\n\n---\n\n\u4e8e\u662f\u7ecf\u8fc7\u4e00\u4e9b\u4e0d\u600e\u4e48\u7b80\u5355\u7684\u5b9e\u73b0\uff0c\uff08\u5176\u5b9e\u662f\u6211\u592a\u83dc\u4e86\uff0c\u8c03\u4e86\u4e00\u4e2a\u665a\u4e0a\uff09\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u65f6\u95f4 $O(|s|\\log |s|+q)$\uff0c\u7a7a\u95f4 $O(|s|\\log |s|)$ \u7684\u505a\u6cd5\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\uff08\u5e76\u4e0d\u600e\u4e48\u597d\u770b\uff09\n\n```cpp\n#define N 400005\nint len[N],fa[N],ch[N][26],rt[N],pos[N],f[N];\nchar str[N];\nint cnt=1,n,Q;\nint insert(int c,int las)\n{\n\tint p=las,np=++cnt;\n\tlen[np]=len[p]+1;\n\tfor(;p&&!ch[p][c];p=fa[p]) ch[p][c]=np;\n\tif(!p) fa[np]=1;\n\telse\n\t{\n\t\tint q=ch[p][c];\n\t\tif(len[p]+1==len[q]) fa[np]=q;\n\t\telse\n\t\t{\n\t\t\tint nq=++cnt; len[nq]=len[p]+1;\n\t\t\tmemcpy(ch[nq],ch[q],26*4);\n\t\t\tfa[nq]=fa[q]; fa[q]=fa[np]=nq;\n\t\t\tfor(;ch[p][c]==q;p=fa[p]) ch[p][c]=nq;\n\t\t}\n\t}\n\treturn np;\n}\nstruct Node{int ls,rs,v;};\nstruct Query{int l,r,id;};\nint ans[N];\nNode t[N*40];\nvector<int> G[N];\nvector<Query> q[N];\nint _cnt;\nvoid update(int &u,int l,int r,int p)\n{\n\tif(!u) u=++_cnt;\n\tif(l==r) {t[u].v++;  return ;}\n\tint mid=(l+r)/2;\n\tif(p<=mid) update(t[u].ls,l,mid,p);\n\telse update(t[u].rs,mid+1,r,p);\n\tt[u].v=t[t[u].ls].v+t[t[u].rs].v;\n}\nint query(int u,int l,int r,int L,int R)\n{\n\tif(!u) return 0;\n\tif(L<=l&&r<=R) return t[u].v;\n\tint mid=(l+r)/2,ans=0;\n\tif(L<=mid) ans+=query(t[u].ls,l,mid,L,R);\n\tif(R>mid) ans+=query(t[u].rs,mid+1,r,L,R);\n\treturn ans;\n}\nint merge(int u,int v)\n{\n\tif(!u&&!v) return 0;\n\tif(!v) return u;\n\tif(!u)\n\t{\n\t\tint x=++_cnt;\n\t\tt[x]=t[v];\n\t\treturn x;\n\t}\n\tint x=++_cnt;\n\tt[x].v=t[u].v+t[v].v;\n\tt[x].ls=merge(t[u].ls,t[v].ls);\n\tt[x].rs=merge(t[u].rs,t[v].rs);\n\treturn x;\n}\nvoid dfs(int u)\n{\n\tfor(int v:G[u])\n\t{\n\t\tif(len[u]==len[v]) f[v]=f[u];\n\t\telse f[v]=v;\n\t\tdfs(v); rt[u]=merge(rt[u],rt[v]);\n\t}\n}\nsigned main()\n{\n\tcin>>n>>Q;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",str); int len=strlen(str);\n\t\tint las=1;\n\t\tfor(int j=0;j<len;j++) las=insert(str[j]-'a',las),update(rt[las],1,n,i);;\n\t\tpos[i]=las;\n\t}\n\tfor(int i=2;i<=cnt;i++) G[fa[i]].pb(i);\n\tf[1]=1;\n\tdfs(1);\n\twhile(Q--)\n\t{\n\t\tint u=read(),v=read(),w=read();\n\t\tprintf(\"%d\\n\",query(rt[f[pos[w]]],1,n,u,v));\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1586528552,
        "uid": 70780,
        "name": "wasa855",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF547E \u3010Mike and Friends\u3011"
    },
    {
        "content": "[\u6b22\u8fce\u6765\u6211\u7684blog\u901b\u901b~](https://blog.csdn.net/Dream_Lolita/article/details/86657057)\n\n\u8fd9\u79cd\u4e1c\u897f\u663e\u7136$\\text{SAM}$\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u53ef\u4ee5\u505a\u4e86\u5427\u3002\u5efa\u51fa$\\text{SAM}$\uff0c\u90a3\u4e48\u8be2\u95ee\u5c31\u662f\u5b50\u6811\u4e2d\u7f16\u53f7\u4e3a\u67d0\u6bb5\u533a\u95f4$endpos$\u7684\u6570\u91cf\u3002\u6211\u4eec\u4ee5\u6240\u5728\u4e32\u7f16\u53f7\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76$right$\u96c6\u5408\u5373\u53ef\u3002\n\n~~\u7136\u800c\u6211\u53c8\u5fd8\u8bb0SAM\u662f\u8282\u70b9\u6570\u662f\u4e24\u500d\u4e86~~\n\n\u4ec0\u4e48\uff1f\u4e0d\u4f1a$\\text{SAM}$\uff1f\u6ca1\u6709\u5173\u7cfb\u3002\n\n\u5176\u5b9e\u505a\u8fd9\u9898\u7684\u521d\u8877\u5c31\u662f\u7ec3$\\text{AC}$\u81ea\u52a8\u673a\u7684\uff0c\u539f\u7406\u4e00\u6837\uff0c~~\u4f46\u663e\u7136\u4e0d\u591f\u4f18\u79c0~~\u3002\n\n\u6211\u4eec\u5efa\u51fa$\\text{AC}$\u81ea\u52a8\u673a\u4ee5\u540e\uff0c\u518d\u7528\u6bcf\u4e2a\u4e32\u8dd1\u4e00\u6b21\uff0c\u5bf9\u4e8e\u5f53\u524d\u4e32$s$\u524d\u7f00$s_i$\uff0c\u5728\u5176\u5bf9\u5e94$fail$\u6811\u7684\u4f4d\u7f6e\u8d21\u732e$+1$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u524d\u7f00\u7684\u6240\u6709\u540e\u7f00\u90fd\u4f1a\u88ab\u8d21\u732e\u4e00\u6b21\uff0c\u5373\u5b83$fail$\u6811\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u5bf9\u4e8e$s$\u8fd9\u4e2a\u4e32\u7684\u8ba1\u6570\u90fd\u4f1a$+1$\u3002\n\n\u73b0\u5728\u95ee\u9898\u5c31\u662f\u7edf\u8ba1\u5b50\u6811\u5185\u4ee3\u8868\u4e32\u7f16\u53f7\u5728$[l,r]$\u7684\u6240\u6709\u8282\u70b9\u6743\u503c\u548c\u3002\n\u89c2\u5bdf\u5230\u8be2\u95ee\u7f16\u53f7\u5728$[l,r]$\u8fd9\u4e2a\u4e1c\u897f\u662f\u53ef\u4ee5\u5dee\u5206\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u7ebf\u6bb5\u6811\u7684\u4e0b\u6807\u663e\u7136\u5c31\u4e0d\u662f\u7f16\u53f7\u4e86\u3002\u4e00\u79cd\u663e\u7136\u7684\u65b9\u5f0f\u662f\uff0c\u6211\u4eec\u5bf9$fail$\u6811\u6c42\u51fa\u5b83\u7684$dfs$\u5e8f\uff0c\u7136\u540e\u4ee5\u6b64\u4e3a\u4e0b\u6807\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u53ef\u6301\u4e45\u5316\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u79bb\u7ebf$BIT$\u7684\u65b9\u5f0f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u83b7\u5f97\u66f4\u4f18\u79c0\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\n\n\u4e24\u79cd\u505a\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f$O((n+q)\\log n)$\u3002\n\n\u4ee5\u4e0b\u7ed9\u51fa\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\u7684\u53c2\u8003\u4ee3\u7801\n\n\u3010SAM+\u7ebf\u6bb5\u6811\u5408\u5e76\u3011\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=4e5+10,M=N*40;\nint n,Q;\nchar s[N];\n\nnamespace IO\n{\n\tint read()\n\t{\n\t\tint ret=0;char c=getchar();\n\t\twhile(!isdigit(c)) c=getchar();\n\t\twhile(isdigit(c)) ret=ret*10+(c^48),c=getchar();\n\t\treturn ret;\n\t}\n\tvoid write(int x){if(x>9)write(x/10);putchar(x%10^48);}\n\tvoid writeln(int x){write(x);putchar('\\n');}\n}\nusing namespace IO;\n\nnamespace Tree\n{\n\tint rt[N];\n\tstruct Segment\n\t{\n\t\tint sz,ls[M],rs[M],sum[M];\n\t\tvoid update(int &x,int l,int r,int p)\n\t\t{\n\t\t\tif(!x) x=++sz; ++sum[x];\n\t\t\tif(l==r) return;\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(p<=mid) update(ls[x],l,mid,p);\n\t\t\telse update(rs[x],mid+1,r,p);\n\t\t}\n\t\tint query(int x,int l,int r,int L,int R)\n\t\t{\n\t\t\tif(!x) return 0;\n\t\t\tif(L<=l && r<=R) return sum[x];\n\t\t\tint mid=(l+r)>>1,res=0;\n\t\t\tif(L<=mid) res+=query(ls[x],l,mid,L,R);\n\t\t\tif(R>mid) res+=query(rs[x],mid+1,r,L,R);\n\t\t\treturn res;\n\t\t}\n\t\tint merge(int x,int y)\n\t\t{\n\t\t\tif(!x || !y) return x+y;\n\t\t\tint z=++sz;\n\t\t\tls[z]=merge(ls[x],ls[y]);\n\t\t\trs[z]=merge(rs[x],rs[y]);\n\t\t\tsum[z]=sum[x]+sum[y];\n\t\t\treturn z;\n\t\t}\n\t}tr;\n}\nusing namespace Tree;\n\nnamespace SAM\n{\n\tint p[N],b[N],c[N],id[N];\n\tstruct SAM\n\t{\n\t\tint sz,las,fa[N],mx[N],ch[N][26];\n\t\tvoid extend(int x)\n\t\t{\n\t\t\tint p,q,np,nq;\n\t\t\tif(ch[las][x])\n\t\t\t{\n\t\t\t\tp=las;q=ch[p][x];\n\t\t\t\tif(mx[q]==mx[p]+1) {las=q;return;}\n\t\t\t\tnq=++sz;mx[nq]=mx[p]+1;\n\t\t\t\tmemcpy(ch[nq],ch[q],sizeof(ch[q]));\n\t\t\t\tfa[nq]=fa[q];fa[q]=nq;\n\t\t\t\tfor(;p && ch[p][x]==q;p=fa[p]) ch[p][x]=nq;\n\t\t\t\tlas=nq;return;\n\t\t\t}\n\t\t\tp=las;np=las=++sz;mx[np]=mx[p]+1;\n\t\t\tfor(;p && !ch[p][x];p=fa[p]) ch[p][x]=np;\n\t\t\tif(!p) fa[np]=1;\n\t\t\telse\n\t\t\t{\n\t\t\t\tq=ch[p][x];\n\t\t\t\tif(mx[q]==mx[p]+1) fa[np]=q;\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tnq=++sz;mx[nq]=mx[p]+1;\n\t\t\t\t\tmemcpy(ch[nq],ch[q],sizeof(ch[q]));\n\t\t\t\t\tfa[nq]=fa[q];fa[np]=fa[q]=nq;\n\t\t\t\t\tfor(;ch[p][x]==q;p=fa[p]) ch[p][x]=nq;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvoid merge()\n\t\t{\n\t\t\tfor(int i=1;i<=sz;++i) b[mx[i]]++;\n\t\t\tfor(int i=1;i<=sz;++i) b[i]+=b[i-1];\n\t\t\tfor(int i=sz;i;--i) c[b[mx[i]]--]=i;\n\t\t\tfor(int i=sz,x;i>1;--i) x=c[i],rt[fa[x]]=tr.merge(rt[x],rt[fa[x]]); \n\t\t}\n\t}S;\n}\nusing namespace SAM;\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"CF547E.in\",\"r\",stdin);\n\tfreopen(\"CF547E.out\",\"w\",stdout);\n#endif\n\tn=read();Q=read();S.sz=S.las=1;\n\tfor(int i=1,l;i<=n;++i) \n\t{\n\t\tscanf(\"%s\",s+1);l=strlen(s+1);S.las=1;\n\t\tfor(int j=1;j<=l;++j) S.extend(s[j]-'a'),tr.update(rt[S.las],1,n,i);\n\t\tp[i]=S.las;\n\t}\n\tS.merge();\n\twhile(Q--)\n\t{\n\t\tint l=read(),r=read(),id=read();\n\t\twriteln(tr.query(rt[p[id]],1,n,l,r));\n\t}\n\treturn 0;\n}\n```\n\u3010AC\u81ea\u52a8\u673a+\u4e3b\u5e2d\u6811\u3011\n```cpp\n#include<bits/stdc++.h>\n#define pb push_back\nusing namespace std;\n\nconst int N=2e5+10,M=N*40;\nint n,Q;\n\nnamespace IO\n{\n\tint read()\n\t{\n\t\tint ret=0;char c=getchar();\n\t\twhile(!isdigit(c)) c=getchar();\n\t\twhile(isdigit(c)) ret=ret*10+(c^48),c=getchar();\n\t\treturn ret;\n\t}\n\tvoid write(int x){if(x>9)write(x/10);putchar(x%10^48);}\n\tvoid writeln(int x){write(x);putchar('\\n');}\n}\nusing namespace IO;\n\nnamespace Tree\n{\n\tvector<int>e[N];\n\tint ind,rt[N],st[N],en[N];\n\tstruct Segment\n\t{\n\t\tint sz,ls[M],rs[M],sum[M];\n\t\tvoid copy(int x,int y){ls[x]=ls[y];rs[x]=rs[y];sum[x]=sum[y];}\n\t\tvoid pushup(int x){sum[x]=sum[ls[x]]+sum[rs[x]];}\n\t\tvoid update(int y,int &x,int l,int r,int p)\n\t\t{\n\t\t\t//printf(\"%d %d %d %d %d\\n\",y,x,l,r,p);\n\t\t\tx=++sz;copy(x,y);\n\t\t\tif(l==r){sum[x]++;return;}\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(p<=mid) update(ls[y],ls[x],l,mid,p);\n\t\t\telse update(rs[y],rs[x],mid+1,r,p);\n\t\t\tpushup(x);\n\t\t\t//printf(\"%d %d %d\\n\",l,r,sum[x]);\n\t\t}\n\t\tint query(int y,int x,int l,int r,int L,int R)\n\t\t{\n\t\t\tif(L<=l && r<=R) return sum[x]-sum[y];\n\t\t\tint mid=(l+r)>>1,res=0;\n\t\t\tif(L<=mid) res+=query(ls[y],ls[x],l,mid,L,R);\n\t\t\tif(R>mid) res+=query(rs[y],rs[x],mid+1,r,L,R);\n\t\t\treturn res;\n\t\t}\n\t}tr;\n\tvoid dfs(int x)\n\t{\n\t\tst[x]=++ind;\n\t\tfor(int i=0;i<(int)e[x].size();++i) dfs(e[x][i]);\n\t\ten[x]=ind;\n\t}\n}\nusing namespace Tree;\n\nnamespace ACM\n{\n\tint ed[N],len[N];\n\tchar s[N];\n\tvector<int>ts[N];\n\tqueue<int>q;\n\tstruct ACM\n\t{\n\t\tint sz,rt,fail[N],ch[N][26];\n\t\tvoid init(){rt=sz=1;}\n\t\tvoid in(int id)\n\t\t{\n\t\t\tscanf(\"%s\",s+1);len[id]=strlen(s+1);int now=rt;\n\t\t\t//printf(\"%d %d\\n\",id,len[id]);\n\t\t\tfor(int i=1;i<=len[id];++i)\n\t\t\t{\n\t\t\t\tts[id].pb(s[i]-'a');\n\t\t\t\tint x=s[i]-'a';\n\t\t\t\tif(!ch[now][x]) ch[now][x]=++sz;\n\t\t\t\tnow=ch[now][x];\n\t\t\t}\n\t\t\ted[id]=now;\n\t\t}\n\t\tvoid getfail()\n\t\t{\n\t\t\tq.push(rt);\n\t\t\twhile(!q.empty())\n\t\t\t{\n\t\t\t\tint x=q.front();q.pop();\n\t\t\t\tfor(int i=0;i<26;++i)\n\t\t\t\t{\n\t\t\t\t\tif(!ch[x][i]) continue;\n\t\t\t\t\tint t=fail[x],t1=ch[x][i];\n\t\t\t\t\twhile(t && !ch[t][i]) t=fail[t];\n\t\t\t\t\tfail[t1]=t?ch[t][i]:rt;\n\t\t\t\t\tq.push(t1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=1;i<=sz;++i) e[fail[i]].pb(i);\n\t\t}\n\t}S;\n}\nusing namespace ACM;\n\nvoid build(int y,int &x,int id)\n{\n\tint now=S.rt,las=y;\n\t//printf(\"%d %d %d %d\\n\",id,len[id],st[ed[id]],en[ed[id]]);\n\tfor(int i=0;i<len[id];++i)\n\t{\n\t\tnow=S.ch[now][ts[id][i]];\n\t\ttr.update(las,x,1,ind,st[now]);las=x;\n\t}\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"CF547E.in\",\"r\",stdin);\n\tfreopen(\"CF547E.out\",\"w\",stdout);\n#endif\n\tn=read();Q=read();S.init();\n\tfor(int i=1;i<=n;++i) S.in(i);\n\tS.getfail();dfs(S.rt);\n\tfor(int i=1;i<=n;++i) build(rt[i-1],rt[i],i);\n\twhile(Q--)\n\t{\n\t\tint l=read(),r=read(),id=read();\n\t\tprintf(\"%d\\n\",tr.query(rt[l-1],rt[r],1,ind,st[ed[id]],en[ed[id]]));\n\t}\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1548484604,
        "uid": 15438,
        "name": "Durant_Lee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF547E \u3010Mike and Friends\u3011"
    },
    {
        "content": "\u5b89\u5229\u4e2a\u4eba blog\uff1ahttps://www.cnblogs.com/ET2006/\n\n[\u9898\u9762\u4f20\u9001\u95e8](https://codeforces.ml/contest/547/problem/E)\n\n\u597d\u4e45\u6bcf\u505a\u8fc7 AC \u81ea\u52a8\u673a\u7684\u9898\u4e86\u2026\u2026\u505a\u51e0\u4e2a\u9898\u56de\u5fc6\u4e00\u4e0b\u7f62\n\nAC \u81ea\u52a8\u673a\u80fd\u591f\u89e3\u51b3\u591a\u4e32**\u5339\u914d\u95ee\u9898**\uff0c\u6ce8\u610f\u662f\u5339\u914d\uff0c\u78b0\u5230\u524d\u540e\u7f00\u7684\u95ee\u9898\u90a3\u591a\u534a\u4e0d\u5728 AC \u81ea\u52a8\u673a\u80fd\u89e3\u51b3\u7684\u8303\u56f4\u5185\u3002\n\n\u5728\u521d\u5b66 AC \u81ea\u52a8\u673a\u7684\u65f6\u5019\u76f8\u4fe1\u5927\u5bb6\u90fd\u505a\u8fc7\u4e00\u9053\u9898\u53eb\u505a P2414 [NOI2011] \u963f\u72f8\u7684\u6253\u5b57\u673a\u3002\u5728\u8fd9\u9053\u9898\u4e2d\u6211\u4eec\u7528\u5230\u4e86\u4e24\u68f5\u6811\uff0c\u4e00\u68f5\u5c31\u662f\u6240\u6709\u4e32\u7684\u5b57\u5178\u6811\uff0c\u79f0\u4e3a trie \u6811\uff0c\u4ee4\u4e00\u68f5\u662f\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684 $fail_i$ \u540e\uff0c\u5bf9\u4e8e\u6240\u6709\u4e0d\u662f\u6839\u8282\u70b9\u7684 $i$ \u8fde\u8fb9 $(fail_i,i)$ \u540e\u5f62\u6210\u7684\u6811\uff0c\u79f0\u4e3a fail \u6811\u3002\n\n\u5728\u90a3\u9053\u9898\u4e2d\u6211\u4eec\u5b66\u5230\u4e86\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7ed3\u8bba\uff0c\u90a3\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32 $s$ \u5728\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32 $t$ \u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7b49\u4e8e $t$ \u7684\u7ed3\u5c3e\u4f4d\u7f6e\u5728 **trie** \u6811\u4e0a\u7684\u7956\u5148\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u5728 $s$ \u7684\u7ed3\u5c3e\u4f4d\u7f6e\u5728 **fail** \u6811\u7684\u5b50\u6811\u4e2d\u3002\u53ef\u4ee5\u7b80\u5355\u8bb0\u4e3a\u201c**\u6a21\u5f0f\u4e32 fail \u6811\u5411\u4e0b\uff0c\u6587\u672c\u4e32 trie \u6811\u5411\u4e0a**\u201d\u3002\u8fd9\u4e2a\u7ed3\u8bba\u662f\u89e3\u4e0d\u5c11 AC \u81ea\u52a8\u673a\u4e0e\u6570\u636e\u7ed3\u6784\u7ed3\u5408\u7684\u9898\u7684\u57fa\u7840\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u7528\u8fd9\u4e2a\u7ed3\u8bba\u6765\u89e3\u8fd9\u9053\u9898\u3002\u9996\u5148\u5efa\u51fa AC \u81ea\u52a8\u673a\u3002\u6211\u4eec\u8003\u8651\u53ef\u4ee5\u7528\u5dee\u5206\u7684\u601d\u60f3\u628a\u4e00\u4e2a\u8be2\u95ee\u62c6\u6210 $(l-1,k)$ \u548c $(r,k)$ \u4e24\u90e8\u5206\uff0c\u4e8c\u8005\u76f8\u51cf\u5f97\u5230\u7b54\u6848\u3002\u4e8e\u662f\u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\u5904\u7406\u5f62\u5982\u201c$s_y$ \u5728\u524d $x$ \u4e2a\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u201d\uff0c\u6211\u4eec\u628a\u8fd9\u6837\u7684\u8be2\u95ee\u90fd\u6302\u5230 $x$ \u4e0a\u5e76\u52a8\u6001\u5730\u6dfb\u52a0\u5b57\u7b26\u4e32\u3002\u5f53\u6211\u4eec\u52a0\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32 $s_i$ \u7684\u65f6\u5019\uff0c\u5047\u8bbe $s_i$ \u7684\u7ed3\u5c3e\u4f4d\u7f6e\u4e3a $x$\uff0c\u7531\u4e8e $s_i$ \u662f\u6587\u672c\u4e32\u8981\u5728 trie \u6811\u4e0a\u5411\u4e0a\u8df3\uff0c\u6211\u4eec\u5c31\u679a\u4e3e $x$ \u7684\u6240\u6709\u7956\u5148 $y$ \u5e76\u5728 $y$ \u4f4d\u7f6e\u4e0a\u52a0 $1$\uff0c\u8868\u793a $y$ \u8282\u70b9\u7684\u8bbf\u95ee\u6b21\u6570\u591a\u4e86 $1$1\u3002\u67e5\u8be2\u7684\u65f6\u5019\u5c31\u6c42\u51fa $s_k$ \u7684\u7ed3\u5c3e\u4f4d\u7f6e\u5728 fail \u6811\u4e2d\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u4e2a $1$\uff0c\u8fd9\u4e2a\u663e\u7136\u53ef\u4ee5\u6811\u72b6\u6570\u7ec4+DFS \u5e8f\u641e\u5b9a\u3002\u7b97\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u663e\u7136\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 $i$\uff0c\u5b83\u5728 trie \u6811\u4e0a\u7684\u7956\u5148\u4e2a\u6570\u5c31\u662f $|s_i|$\uff0c\u6545\u6211\u4eec\u6700\u591a\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u52a0 $\\sum|s_i|$ \u6b21\uff0c\u590d\u6742\u5ea6\u7ebf\u5bf9\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define fz(i,a,b) for(int i=a;i<=b;i++)\n#define fd(i,a,b) for(int i=a;i>=b;i--)\n#define ffe(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define fill0(a) memset(a,0,sizeof(a))\n#define fill1(a) memset(a,-1,sizeof(a))\n#define fillbig(a) memset(a,63,sizeof(a))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\ntemplate<typename T1,typename T2> void chkmin(T1 &x,T2 y){if(x>y) x=y;}\ntemplate<typename T1,typename T2> void chkmax(T1 &x,T2 y){if(x<y) x=y;}\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntemplate<typename T> void read(T &x){\n\tx=0;char c=getchar();T neg=1;\n\twhile(!isdigit(c)){if(c=='-') neg=-1;c=getchar();}\n\twhile(isdigit(c)) x=x*10+c-'0',c=getchar();\n\tx*=neg;\n}\nconst int MAXN=2e5;\nconst int MAXQ=5e5;\nconst int ALPHA=26;\nint n,qu;string s[MAXN+5];\nint ch[MAXN+5][ALPHA+2],fail[MAXN+5],ncnt=0,ed[MAXN+5],ans[MAXQ+5];\nvoid insert(string s,int id){\n\tint cur=0;\n\tfor(int i=0;i<s.size();i++){\n\t\tif(!ch[cur][s[i]-'a']) ch[cur][s[i]-'a']=++ncnt;\n\t\tcur=ch[cur][s[i]-'a'];\n\t} ed[id]=cur;\n}\nvoid getfail(){\n\tqueue<int> q;\n\tfor(int i=0;i<ALPHA;i++) if(ch[0][i]) q.push(ch[0][i]);\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=0;i<ALPHA;i++){\n\t\t\tif(ch[x][i]){fail[ch[x][i]]=ch[fail[x]][i];q.push(ch[x][i]);}\n\t\t\telse ch[x][i]=ch[fail[x]][i];\n\t\t}\n\t}\n}\nint hd[MAXN+5],to[MAXN+5],nxt[MAXN+5],ec=0;\nvoid adde(int u,int v){to[++ec]=v;nxt[ec]=hd[u];hd[u]=ec;}\nint tim=0,bgt[MAXN+5],edt[MAXN+5];\nvoid dfs(int x){bgt[x]=++tim;for(int e=hd[x];e;e=nxt[e]) dfs(to[e]);edt[x]=tim;}\nint t[MAXN+5];\nvoid add(int x,int v){for(int i=x;i<=(ncnt+1);i+=(i&(-i))) t[i]+=v;}\nint query(int x){int ret=0;for(int i=x;i;i&=(i-1)) ret+=t[i];return ret;}\nvector<pair<pii,int> > qv[MAXN+5];\nint main(){\n\tscanf(\"%d%d\",&n,&qu);for(int i=1;i<=n;i++) cin>>s[i],insert(s[i],i);\n\tgetfail();for(int i=1;i<=ncnt;i++) adde(fail[i],i);dfs(0);\n\tfor(int i=1;i<=qu;i++){\n\t\tint l,r,k;scanf(\"%d%d%d\",&l,&r,&k);\n\t\tqv[r].pb(mp(mp(i,1),k));qv[l-1].pb(mp(mp(i,-1),k));\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint cur=0;\n\t\tfor(int j=0;j<s[i].size();j++){\n\t\t\tcur=ch[cur][s[i][j]-'a'];add(bgt[cur],1);\n\t\t}\n\t\tffe(it,qv[i]){\n\t\t\tint x=it->se,id=it->fi.fi,mul=it->fi.se;\n\t\t\tans[id]+=mul*(query(edt[ed[x]])-query(bgt[ed[x]]-1));\n\t\t}\n\t}\n\tfor(int i=1;i<=qu;i++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1613628941,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF547E\u3010Mike and Friends\u3011"
    },
    {
        "content": "_\u63a8\u9500\u535a\u5ba2\uff1ahttps://www.cnblogs.com/syc233/p/13771152.html_\n\n---\n\nAC\u81ea\u52a8\u673a+\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n---\n\n\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u63d2\u5165AC\u81ea\u52a8\u673a\u4e2d\uff0c\u5efa\u51fafail\u6811\u3002\n\n\u82e5 $s$ \u662f $t$ \u7684\u5b50\u4e32\uff0c\u4ee4 $u$ \u8868\u793a $s$ \u7684\u672b\u5c3e\u5b57\u7b26\u5728AC\u81ea\u52a8\u673a\u4e0a\u5bf9\u5e94\u7684\u7ed3\u70b9\u3002\u7531\u4e8eAC\u81ea\u52a8\u673a\u7684\u6027\u8d28\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a $t$ \u5728AC\u81ea\u52a8\u673a\u4e2d\u7684\u7ed3\u70b9\uff0c\u6ee1\u8db3\u5728fail\u6811\u4e2d\u5b83\u5728 $u$ \u7684\u5b50\u6811\u4e2d\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\uff1a\u8be2\u95ee $s_k$ \u5728AC\u81ea\u52a8\u673a\u4e0a\u7684\u7ed3\u675f\u7ed3\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u6709\u591a\u5c11\u7ed3\u70b9\u5c5e\u4e8e $s_{l \\cdots r}$ \uff08\u5373\u63d2\u5165Trie\u65f6\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff09\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u89e3\u51b3\u3002\n\n\u6bcf\u4e2a\u7ed3\u70b9\u5f00\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\u7f16\u53f7\u4e3a\u4e0b\u6807\u7684\u7ebf\u6bb5\u6811\u3002\u63d2\u5165\u5b57\u7b26\u4e32 $s_{id}$ \u65f6\uff0c\u5728\u7ecf\u8fc7\u7684\u6240\u6709\u7ed3\u70b9\u7684\u7ebf\u6bb5\u6811\u4e2d\u7684 $id$ \u4f4d\u7f6e\u52a0\u4e00\uff0c\u4ee3\u8868\u8fd9\u4e2a\u7ed3\u70b9\u5c5e\u4e8e $s_{id}$ \u3002\n\n\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u4e00\u4e2a\u7ed3\u70b9\u65f6\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u533a\u95f4\u548c\u5373\u53ef\u3002\n\n---\n\n\u4ee3\u7801\u633a\u597d\u5199\u7684\u3002\n\n$\\text{Code}:$ \n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <queue>\n#define Rint register int\n#define INF 0x3f3f3f3f\nusing namespace std;\ntypedef long long lxl;\nconst int maxn=2e5+5,maxq=5e5+5;\n \ntemplate <typename T>\ninline void read(T &x)\n{\n\tx=0;T f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n\tx*=f;\n}\n\nstruct edge\n{\n\tint u,v,next;\n\tedge(int u,int v,int next):u(u),v(v),next(next){}\n\tedge(){}\n}e[maxn];\n\nint head[maxn],ecnt;\n\ninline void add(int u,int v)\n{\n\te[ecnt]=edge(u,v,head[u]);\n\thead[u]=ecnt++;\n}\n\nstruct Segment_Tree\n{\n\tint tot;\n\tint sum[maxn<<5],ch[maxn<<5][2];\n\tinline void update(int p)\n\t{\n\t\tsum[p]=sum[ch[p][0]]+sum[ch[p][1]];\n\t}\n\tvoid modify(int &p,int l,int r,int ps,int d)\n\t{\n\t\tif(!p) p=++tot;\n\t\tsum[p]+=d;\n\t\tif(l==r) return;\n\t\tint mid=(l+r)>>1;\n\t\tif(ps<=mid) modify(ch[p][0],l,mid,ps,d);\n\t\telse modify(ch[p][1],mid+1,r,ps,d);\n\t}\n\tint query(int p,int l,int r,int L,int R)\n\t{\n\t\tif(!sum[p]||(L<=l&&r<=R)) return sum[p];\n\t\tint mid=(l+r)>>1,ans=0;\n\t\tif(L<=mid) ans+=query(ch[p][0],l,mid,L,R);\n\t\tif(R>mid) ans+=query(ch[p][1],mid+1,r,L,R);\n\t\treturn ans;\n\t}\n\tint merge(int x,int y)\n\t{\n\t\tif(!x||!y) return x|y;\n\t\tsum[x]+=sum[y];\n\t\tch[x][0]=merge(ch[x][0],ch[y][0]);\n\t\tch[x][1]=merge(ch[x][1],ch[y][1]);\n\t\treturn x;\n\t}\n}st;\nint rt[maxn];\n\nstruct querys\n{\n\tint l,r,id;\n\tquerys(int l,int r,int id):l(l),r(r),id(id){}\n\tquerys(){}\n};\n\nint n,q,idx[maxn];\nvector<querys> vec[maxn];\nint ans[maxq];\nint ch[maxn][30],tot;\nint fail[maxn];\n\ninline void insert(const char *s,int id)\n{\n\tint len=strlen(s+1),u=0;\n\tfor(int i=1;i<=len;++i)\n\t{\n\t\tint c=s[i]-'a'+1;\n\t\tif(!ch[u][c]) ch[u][c]=++tot;\n\t\tu=ch[u][c];\n\t\tst.modify(rt[u],1,n,id,1);\n\t}\n\tidx[id]=u;\n}\n\ninline void GetFail()\n{\n\tqueue<int> q;\n\tmemset(fail,-1,sizeof(fail));\n\tfor(int i=1;i<=26;++i)\n\t\tif(ch[0][i]) q.push(ch[0][i]),fail[ch[0][i]]=0;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=1;i<=26;++i)\n\t\t\tif(ch[u][i])\n\t\t\t{\n\t\t\t\tfail[ch[u][i]]=ch[fail[u]][i];\n\t\t\t\tq.push(ch[u][i]);\n\t\t\t}\n\t\t\telse ch[u][i]=ch[fail[u]][i];\n\t}\n\tfor(int i=1;i<=tot;++i)\n\t\tif(~fail[i]) add(fail[i],i);\n}\n\ninline void dfs(int u)\n{\n\tfor(int i=head[u];~i;i=e[i].next)\n\t{\n\t\tint v=e[i].v;\n\t\tdfs(v);\n\t\trt[u]=st.merge(rt[u],rt[v]);\n\t}\n\tfor(auto v:vec[u])\n\t\tans[v.id]=st.query(rt[u],1,n,v.l,v.r);\n}\n\nchar s[maxn];\n\nint main()\n{\n\t// freopen(\"CF547E.in\",\"r\",stdin);\n\tread(n),read(q);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\" %s\",s+1);\n\t\tinsert(s,i);\n\t}\n\tmemset(head,-1,sizeof(head));\n\tGetFail();\n\tfor(int i=1,l,r,k;i<=q;++i)\n\t{\n\t\tread(l),read(r),read(k);\n\t\tvec[idx[k]].push_back(querys(l,r,i));\n\t}\n\tdfs(0);\n\tfor(int i=1;i<=q;++i)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1601898145,
        "uid": 224236,
        "name": "GoPoux4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF547E \u3010Mike and Friends\u3011"
    },
    {
        "content": "[\u535a\u5ba2](https://blog.csdn.net/qq_43804974/article/details/106563051)\n\n\u8fd9\u63d0\u4f9b\u4e00\u4e2asa+\u4e3b\u5e2d\u6811\u7684\u505a\u6cd5\uff0c\u8fd9\u4e2a\u7528\u505a\u6cd5\u5c31\u4f60\u987a\u52bf\u53ef\u4ee5\u5728\u6572\u6389\u57fa\u672c\u4e00\u6837\u7684\u6d1b\u8c37[P4084](https://www.luogu.com.cn/problem/P4094)\n\n\u9898\u610f\u8be2\u95ee\u7684\u662fk\u4e32\u5728[L,R]\u7684\u4e32\u91cc\u9762\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u4e0d\u540c\u4f4d\u7f6e\u7b97\u591a\u6b21\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4e32\u5728SA\u91cc\u7684\u4f4d\u7f6e\u4ee5\u53ca\u548c\u4ed6\u6700\u50cf\u7684\u4f4d\u7f6e\u5fc5\u7136\u662f\u8fde\u7eed\u7684\uff08\u5b57\u5178\u5e8f\u7684\u539f\u56e0\uff09,\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e32\u5c31\u90fd\u53ef\u4ee5\u4e8c\u5206\u51fa\u4e00\u4e2a\u533a\u95f4\uff0c\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u4e32\u90fd\u6709\u548c\u5f53\u524d\u4e32\u76f8\u540c\u7684\u524d\u7f00\u3002\n\n\u90a3\u4e48\u6211\u4eec\u77e5\u9053\u8fd9\u4e2a\u533a\u95f4\u540e\uff0c\u600e\u4e48\u77e5\u9053\u8be2\u95ee\u8981\u6c42\u7684\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u662f\u843d\u5728\u80fd\u591f\u4f7f\u7528\u7684\u533a\u95f4\u5462\uff1f\n\n\u4ee5\u4e0brk\u6307sa\u7684rank\u6570\u7ec4\n\n\u8fd9\u5c31\u662f\u53ef\u4ee5\u5229\u7528\u4e3b\u5e2d\u6811\u3002\u6211\u4eec\u8ba9rk\u4e3a\u6743\u503c\u53bb\u5efa\u7acb\u4e3b\u5e2d\u6811\uff0c\u7136\u540e\u6309\u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u987a\u5e8f\u53bb\u63d2\u5165\uff0c\u7136\u540e\u8be2\u95ee\u7684\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8be2\u95ee\u4e3b\u5e2d\u6811\u4e0a\u67d0\u4e2a\u533a\u95f4\u91cc\u9762\u51fa\u73b0\u4e86\u591a\u5c11\u4e2ark\u5728\u4e8c\u5206\u51fa\u6765\u7684\u533a\u95f4\u7684\u6570\u91cf\uff0c\uff08\u4e8c\u5206\u51fa\u6765\u7684\u533a\u95f4\u4e5f\u5c31\u662f\u4e00\u4e2ark\u7684\u533a\u95f4\u8303\u56f4\uff09\n\n\nRE\u8b66\u544a\u4e4b\u4e00\uff1a\u7531\u4e8e\u5b57\u7b26\u4e32\u53ef\u4ee5\u6709\u5f88\u591a\u4e2a\uff0c\u5982\u679c\u6bcf\u4e00\u7ec4\u90fd\u662f\u7528\u65b0\u7684\u5b57\u7b26\u53bb\u8fde\u63a5\u7684\u8bdd\uff0c\u5b57\u7b26\u4f1a\u4e0d\u591f\u7528\uff0c\u8fd9\u5c31\u4f1aRE\uff0c\u6211\u4eec\u9700\u8981\u7528int\u53bb\u5b58\u50a8\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u6709RE\u7684\u95ee\u9898\u4e86\u3002\n\nRE\u8b66\u544a\u4e4b\u4e8c\uff1a\u4e8c\u5206\u7684\u65f6\u5019\u8981\u6ce8\u610f\u6709\u6ca1\u6709\u5199\u9519\uff0c\u5982\u679c\u4f60\u60f3\u7528\u4e4b\u524d\u5199\u8fc7\u7684\u67d0\u9053\u9898\u7684\u4e8c\u5206\u5199\u6cd5\uff0c\u6700\u597d\u4e0d\u7528\u8fd9\u9053[P2336 ](https://www.luogu.com.cn/problem/P2336)\u90a3\u9053\u9898\u7684\u4e8c\u5206\u4f60\u5199\u9519\u4e86\u4e5f\u80fdA\uff0c\u4f60debug\u53ef\u80fd\u8981\u597d\u4e45\u3002\n\nRE\u8b66\u544a\u4e4b\u4e09\uff1a\u4e3b\u5e2d\u6811\u7a7a\u95f4\u8981\u5f00\u8db3\uff0c\u6211\u4e00\u5f00\u59cb\u4e3b\u5e2d\u6811\u5f00\u5c0f\u4e86\u51faRE\u4f46\u662f\u6ca1\u7ea2\u611f\u53f9\u53f7\u63d0\u9192\u53c8debug\u597d\u4e45\n\n[\u4ee3\u7801\u65f6\u95f4](https://www.luogu.com.cn/paste/90kcs5vv)",
        "postTime": 1591319911,
        "uid": 156874,
        "name": "Boxxxxxx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF547E \u3010Mike and Friends\u3011"
    },
    {
        "content": "~~\u840c\u65b0\u521a\u5b66 OI\uff0c\u8bf7\u95ee\u8fd9\u5c31\u662f\u5b57\u7b26\u4e32\u6bd2\u7624\u9898\u5417\uff0ci \u4e86 i \u4e86\u3002~~\n\n\u5199\u51fa\u8fd9\u79cd\u9898~~\u7279\u522b\u662f\u7528\u4e24\u79cd\u65b9\u6cd5\u5199~~\u771f\u7684\u4f1a\u7279\u522b\u6709\u6210\u5c31\u611f\u7684\u8bf4\u3002\n\n------------\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u505a\u6cd5\u4ee5\u53ca\u4e00\u4e2a\u70c2\u5927\u8857\u7684\u505a\u6cd5\u3002\n\n\u672c\u7740\u80fd\u7528\u6734\u7d20 SAM \u5c31\u7edd\u5bf9\u4e0d\u7528\u5176\u4ed6\u5b57\u7b26\u4e32\u6570\u636e\u7ed3\u6784\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u65e0\u8111\u628a\u6240\u6709\u4e32\u52a0\u5206\u9694\u7b26\u4e32\u5728\u4e00\u8d77\u7136\u540e\u5efa SAM\u3002\n\n\u627e\u51fa\u6bcf\u4e2a\u4e32\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u3002\u8fd9\u4e2a\u76f4\u63a5\u5728 SAM \u4e0a\u5339\u914d\u5c31\u884c\u3002\u5f53\u7136\u4f60\u8981\u662f\u4e0d\u5acc\u9ebb\u70e6\u4f60\u4e5f\u53ef\u4ee5\u5728 parent \u6811\u4e0a\u8dd1\u500d\u589e\u6216\u8005\u6811\u5256\uff0c\u53cd\u6b63\u8fd9\u4e0d\u4f1a\u6210\u4e3a\u74f6\u9888\u3002\n\n\u7136\u540e\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u201c\u5728 $l$ \u5230 $r$ \u7684\u4e32\u4e2d\u51fa\u73b0\u201d\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u5728\u62fc\u63a5\u4e32\u7684\u67d0\u4e00\u90e8\u5206\u51fa\u73b0\u3002\u4e8e\u662f\u5c31\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4 endpos \u96c6\u5408\u7136\u540e\u67e5\u8be2\u533a\u95f4\u548c\u5373\u53ef\u3002\n\n\u4f60\u8981\u662f\u641e\u4e2a\u4e3b\u5e2d\u6811\u5408\u5e76\u6211\u4e5f\u4e0d\u62e6\u4f60\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u662f\u53ef\u4ee5\u76f4\u63a5\u79bb\u7ebf\u5904\u7406\u7684\u3002\n\n\u7136\u540e\u4f60\u5199\u51fa\u4e86\u8fd9\u6837\uff08\u53ef\u80fd\u597d\u770b\u4e00\u70b9\uff09\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n    int x=0;\n    bool f=0;\n    char c=getchar();\n    while(!isdigit(c)&&c!='-') c=getchar();\n    if(c=='-'){\n        f=1;\n        c=getchar();\n    }\n\twhile(isdigit(c)){\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return f?-x:x;\n}\nconst int maxn=2e5+5,maxq=5e5+5,sigma=26+5;\nint n,q;\nchar *s[maxn],res[maxn];\nint l[maxn],endl[maxn];\nstruct node{\n\tint l,r;\n\tnode* ch[2];\n\tint v;\n\tvoid pushup(){\n\t\tv=0;\n\t\tif(ch[0]) v+=ch[0]->v;\n\t\tif(ch[1]) v+=ch[1]->v;\n\t}\n\tnode(int l,int r):l(l),r(r),v(0){\n\t\tch[0]=ch[1]=0;\n\t}\n\tvoid modify(int x,int k){\n\t\tif(l==r) v+=k;\n\t\telse{\n\t\t\tint mid=l+(r-l)/2;\n\t\t\tif(x<=mid){\n\t\t\t\tif(!ch[0]) ch[0]=new node(l,mid);\n\t\t\t\tch[0]->modify(x,k);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(!ch[1]) ch[1]=new node(mid+1,r);\n\t\t\t\tch[1]->modify(x,k);\n\t\t\t}\n\t\t\tpushup();\n\t\t}\n\t}\n\tint query(int ql,int qr){\n\t\tif(ql==l&&qr==r) return v;\n\t\telse{\n\t\t\tint ans=0;\n\t\t\tif(ch[0]&&ql<=ch[0]->r) ans+=ch[0]->query(ql,min(qr,ch[0]->r));\n\t\t\tif(ch[1]&&qr>=ch[1]->l) ans+=ch[1]->query(max(ql,ch[1]->l),qr);\n\t\t\treturn ans;\n\t\t}\n\t}\n};\nnode* merge(node* a,node* b){\n\tif(!a) return b;\n\tif(!b) return a;\n\ta->ch[0]=merge(a->ch[0],b->ch[0]);\n\ta->ch[1]=merge(a->ch[1],b->ch[1]);\n\ta->v+=b->v;\n\ta->pushup();\n\tdelete b;\n\treturn a;\n}\nint sz,last,link[maxn*4],len[maxn*4],nxt[maxn*4][sigma];\nvector<int> ch[maxn*4];\nnode* rt[maxn*4];\nvoid init(){\n\tsz=1;\n\tlast=0;\n\tlink[0]=-1;\n\tlen[0]=0;\n\tmemset(nxt[0],-1,sizeof(nxt[0]));\n\trt[0]=new node(1,endl[n]);\n}\nvoid extend(int c){\n\tint cur=sz++;\n\tlen[cur]=len[last]+1;\n\tmemset(nxt[cur],-1,sizeof(nxt[cur]));\n\trt[cur]=new node(1,endl[n]);\n\trt[cur]->modify(len[cur],1);\n\tint p=last;\n\twhile(p>=0&&nxt[p][c]<0){\n\t\tnxt[p][c]=cur;\n\t\tp=link[p];\n\t}\n\tif(p<0) link[cur]=0;\n\telse{\n\t\tint q=nxt[p][c];\n\t\tif(len[p]+1==len[q]) link[cur]=q;\n\t\telse{\n\t\t\tint clone=sz++;\n\t\t\tlen[clone]=len[p]+1;\n\t\t\tlink[clone]=link[q];\n\t\t\tfor(int i=0;i<sigma;i++) nxt[clone][i]=nxt[q][i];\n\t\t\trt[clone]=new node(1,endl[n]);\n\t\t\twhile(p>=0&&nxt[p][c]==q){\n\t\t\t\tnxt[p][c]=clone;\n\t\t\t\tp=link[p];\n\t\t\t}\n\t\t\tlink[cur]=link[q]=clone;\n\t\t}\n\t}\n\tlast=cur;\n}\nint pos[maxn];\nstruct query{\n\tint l,r;\n}queries[maxq];\nvector<int> q2[maxn*4];\nint ans[maxq];\nvoid dfs(int u){\n\tfor(unsigned i=0;i<ch[u].size();i++){\n\t\tint v=ch[u][i];\n\t\tdfs(v);\n\t\trt[u]=merge(rt[u],rt[v]);\n\t}\n\tfor(unsigned i=0;i<q2[u].size();i++){\n\t\tint q=q2[u][i];\n\t\tans[q]=rt[u]->query(endl[queries[q].l-1]+1,endl[queries[q].r]);\n\t}\n}\nint main(){\n    #ifdef LOCAL\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    n=readint();\n    q=readint();\n    for(int i=1;i<=n;i++){\n    \tscanf(\"%s\",res);\n    \tl[i]=strlen(res);\n    \ts[i]=new char[l[i]+1];\n    \tstrcpy(s[i],res);\n\t}\n\tendl[0]=0;\n\tfor(int i=1;i<=n;i++) endl[i]=endl[i-1]+l[i]+1;\n\tinit();\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=0;j<l[i];j++) extend(s[i][j]-'a');\n\t\textend(26);\n\t}\n\tfor(int i=1;i<sz;i++) ch[link[i]].push_back(i);\n\tfor(int i=1;i<=n;i++){\n\t\tpos[i]=0;\n\t\tfor(int j=0;j<l[i];j++) pos[i]=nxt[pos[i]][s[i][j]-'a'];\n\t}\n\tfor(int i=0;i<q;i++){\n\t\tqueries[i].l=readint();\n\t\tqueries[i].r=readint();\n\t\tint k=readint();\n\t\tq2[pos[k]].push_back(i);\n\t}\n\tdfs(0);\n\tfor(int i=0;i<q;i++) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n~~\u662f\u7684\u8fd9\u4efd\u4ee3\u7801\u7684\u771f\u6b63\u76ee\u7684\u662f\u9632\u6284\u88ad\u3002~~\n\n\u4f60\u4f1a\u53d1\u73b0\u5b83 `MLE on test 9`\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$\uff0c\u7406\u8bba\u4e0a\u5e94\u8be5\u662f\u5361\u4e0d\u6389\u7684\u554a\uff1f\n\n\u4f46\u662f\u5b9e\u9645\u4e0a\u7531\u4e8e\u5206\u9694\u7b26\uff0c\u5728\u4e32\u7684\u957f\u5ea6\u90fd\u5f88\u77ed\u7684\u60c5\u51b5\u4e0b\u62fc\u63a5\u4e32\u7684\u957f\u5ea6\u6709\u53ef\u80fd\u8fbe\u5230 $n$ \u7684\u4e24\u500d\uff0c\u7136\u540e SAM \u7684\u8282\u70b9\u53c8\u8981\u5f00\u4e24\u500d\u2026\u2026\u8fd9\u6837\u4e0b\u6765\u5c31\u662f\u56db\u500d\u3002\u5361\u65f6\u95f4\u6211\u8fd8\u6709\u70b9\u529e\u6cd5\uff0c\u7a7a\u95f4\u6211\u662f\u771f\u4e0d\u4f1a\u5361\u3002\n\n\u6240\u4ee5\u8fd9\u4e2a\u65b9\u6cd5\u5e9f\u4e86\u3002\n\nSA \u4ec0\u4e48\u7684\u4e00\u8f88\u5b50\u90fd\u4e0d\u4f1a\u5199\u7684\uff0c\u90a3\u8fd9\u4e2a\u591a\u4e32\u7684\u95ee\u9898\u5c31\u53ea\u80fd\u7528 ACAM \u505a\u4e86\u3002\n\n\u7136\u540e\u5c31\u8fd8\u662f\u5957\u8def\u3002\u5efa ACAM\uff0c\u7136\u540e\u6839\u636e fail \u6811\u7684\u610f\u4e49\uff0c\u8be2\u95ee\u5c31\u53d8\u6210\u95ee\u67d0\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5185\u7684\u6bcf\u4e2a\u8282\u70b9\u662f\u51e0\u4e2a $l$ \u5230 $r$ \u7684\u4e32\u5bf9\u5e94\u7684\u8282\u70b9\u7684\u7956\u5148\u7684\u548c\u3002\n\n~~fz \u6559\u4f60\u8bf4\u7ed5\u53e3\u4ee4\u3002~~\n\n\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5dee\u5206\u8be2\u95ee\u7136\u540e\u79bb\u7ebf\u4f9d\u6b21\u52a0\u5165\u6bcf\u4e2a\u70b9\u7684\u8d21\u732e\u3002\u5177\u4f53\u5c31\u662f\u628a\u5b83\u5bf9\u5e94\u7684\u8282\u70b9\u6240\u6709\u7956\u5148\u8282\u70b9\u7684\u6743\u503c\u52a0\u4e00\uff0c\u7136\u540e\u67e5\u8be2\u5c31\u662f\u95ee\u4e00\u4e2a\u5b50\u6811\u5185\u7684\u548c\uff0c\u663e\u7136\u641e\u51fa dfs \u5e8f\u5f04\u4e2a\u6811\u72b6\u6570\u7ec4\u5c31\u884c\u4e86\u3002\n\n\u53e6\u5916\u8fd9\u91cc\u628a\u6240\u6709\u7956\u5148\u7684\u6743\u503c\u90fd\u52a0\u4e00\u7684\u64cd\u4f5c\u6211\u4e00\u5f00\u59cb\u8111\u62bd\u60f3\u7528\u6811\u5256\u52a0\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u5176\u5b9e\u8fd9\u6837\u8fd8\u591a\u4e2a log\u3002\u4e8b\u5b9e\u4e0a\u66b4\u529b\u4e5f\u5b8c\u5168\u4e0d\u4f1a\u6210\u4e3a\u74f6\u9888\u56e0\u4e3a\u603b\u5171\u7b97\u8d77\u6765\u5b83\u4f9d\u7136\u662f\u7ebf\u6027\u7684\u3002\n\n\u7136\u540e\u5c31\u2026\u2026\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u8fd9\u6b21\u662f\u80fd\u8fc7\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<queue>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n    int x=0;\n    bool f=0;\n    char c=getchar();\n    while(!isdigit(c)&&c!='-') c=getchar();\n    if(c=='-'){\n        f=1;\n        c=getchar();\n    }\n\twhile(isdigit(c)){\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return f?-x:x;\n}\nconst int maxn=2e5+5,maxq=5e5+5,sigma=26;\nint n,q;\nchar *s[maxn],res[maxn];\nint l[maxn];\nint sz=1,nxt[maxn][sigma],fail[maxn];\nvector<int> ch[maxn];\nint insert(char *s,int l){\n\tint u=0;\n\tfor(int i=0;i<l;i++){\n\t\tif(!nxt[u][s[i]-'a']) nxt[u][s[i]-'a']=sz++;\n\t\tu=nxt[u][s[i]-'a'];\n\t}\n\treturn u;\n}\nvoid build(){\n\tqueue<int> q;\n\tfail[0]=-1;\n\tfor(int i=0;i<sigma;i++) if(nxt[0][i]){\n\t\tfail[nxt[0][i]]=0;\n\t\tq.push(nxt[0][i]);\n\t}\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=0;i<sigma;i++){\n\t\t\tif(nxt[u][i]){\n\t\t\t\tfail[nxt[u][i]]=nxt[fail[u]][i];\n\t\t\t\tq.push(nxt[u][i]);\n\t\t\t}\n\t\t\telse nxt[u][i]=nxt[fail[u]][i];\n\t\t}\n\t}\n}\ntypedef unsigned uint;\nint cnt=0,size[maxn],dfn[maxn];\nvoid dfs(int u){\n\tsize[u]=1;\n\tdfn[u]=++cnt;\n\tfor(uint i=0;i<ch[u].size();i++){\n\t\tint v=ch[u][i];\n\t\tdfs(v);\n\t\tsize[u]+=size[v];\n\t}\n}\nint pos[maxn];\nint k[maxq];\nvector<int> q2[maxn];\nint c[maxn];\ninline int lowbit(int x){\n\treturn x&-x;\n}\nvoid modify(int x,int k){\n\twhile(x<=sz){\n\t\tc[x]+=k;\n\t\tx+=lowbit(x);\n\t}\n}\nint query(int x){\n\tint s=0;\n\twhile(x>0){\n\t\ts+=c[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn s;\n}\nint ans[maxq];\nint main(){\n    #ifdef LOCAL\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    n=readint();\n    q=readint();\n    for(int i=1;i<=n;i++){\n    \tscanf(\"%s\",res);\n    \tl[i]=strlen(res);\n    \ts[i]=new char[l[i]+1];\n    \tstrcpy(s[i],res);\n    \tpos[i]=insert(s[i],l[i]);\n\t}\n\tbuild();\n\tfor(int i=1;i<=q;i++){\n\t\tint l,r;\n\t\tl=readint();\n\t\tr=readint();\n\t\tk[i]=readint();\n\t\tif(l>1) q2[l-1].push_back(-i);\n\t\tq2[r].push_back(i);\n\t}\n\tfor(int i=1;i<sz;i++) ch[fail[i]].push_back(i);\n\tdfs(0);\n\tfor(int i=1;i<=n;i++){\n\t\tint u=0;\n\t\tfor(int j=0;j<l[i];j++){\n\t\t\tu=nxt[u][s[i][j]-'a'];\n\t\t\tmodify(dfn[u],1);\n\t\t}\n\t\tfor(uint j=0;j<q2[i].size();j++){\n\t\t\tint qq=q2[i][j];\n\t\t\tif(qq>0) ans[qq]+=query(dfn[pos[k[qq]]]+size[pos[k[qq]]]-1)-query(dfn[pos[k[qq]]]-1);\n\t\t\telse ans[-qq]-=query(dfn[pos[k[-qq]]]+size[pos[k[-qq]]]-1)-query(dfn[pos[k[-qq]]]-1);\n\t\t}\n\t}\n\tfor(int i=1;i<=q;i++) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n\u53e6\u5916\u4e24\u4efd\u4ee3\u7801\u7531\u4e8e\u5947\u5947\u602a\u602a\u7684\u539f\u56e0\u7801\u98ce\u4e0d\u4e00\u6837\uff08\u90fd\u5f88\u4e11\uff09\u2026\u2026\u51d1\u6d3b\u770b\u5427\u3002",
        "postTime": 1584107013,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF547E \u3010Mike and Friends\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/CF547E)\n\n[\u82f1\u6587\u9898\u9762](https://codeforces.com/problemset/problem/547/E)\n\n\u9898\u89e3\uff1a\n\n\u7531\u4e8e\u8981\u7edf\u8ba1\u5b57\u7b26\u4e32\u5728\u67d0\u4e00\u4e32\u4e2d\u7684\u51fa\u73b0\u60c5\u51b5\uff0c\u4e0d\u96be\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u5bf9\u6240\u6709\u4e32\u5efa\u7acb\u5e7f\u4e49SAM\uff0c\u7136\u540e\u62d3\u6251\u6392\u5e8f\uff0c\u6cbf\u7740link\u8fb9\u5411\u4e0a\u5408\u5e76\u5373\u53ef\u3002\n\n\u6bcf\u6b21\u67e5\u8be2\uff0c\u53ea\u9700\u4fdd\u5b58\u6bcf\u4e2a\u4e32\u7ec8\u6b62\u4f4d\u7f6e\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u3002\n\n\u6ce8\u610f\u5efa\u7acb\u5e7f\u4e49SAM\u65f6\u4e0d\u80fd\u7b80\u5355\u5730\u628alast\u8bbe\u4e3a1\uff0c\u8fd8\u8981\u6ce8\u610f\u4e0d\u80fd\u6bcf\u6b21\u90fd\u65b0\u52a0\u8282\u70b9\uff0c\n\n\u5177\u4f53\u53ef\u4ee5\u770b\u6211\u7684\u4ee3\u7801\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(nlogn)$\n\n\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register int\n#define F(x,y,z) for(re x=y;x<=z;x++)\n#define FOR(x,y,z) for(re x=y;x>=z;x--)\ntypedef long long ll;\n#define I inline void\n#define IN inline int\n#define C(x,y) memset(x,y,sizeof(x))\n#define STS system(\"pause\")\ntemplate<class D>I read(D &res){\n\tres=0;register D g=1;register char ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-')g=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tres=(res<<3)+(res<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\tres*=g;\n}\nnamespace Tree{\n\tint root[404000],tot,lc[9090000],rc[9090000],w[9090000];\n\t#define lt lc[k],l,mid\n\t#define rt rc[k],mid+1,r\n\tI modi(int &k,int l,int r,int x){\n\t\tif(!k)k=++tot;w[k]++;\n\t\tif(l==r)return;\n\t\tre mid=(l+r)>>1;\n\t\tif(x<=mid)modi(lt,x);\n\t\telse modi(rt,x);\n\t}\n\tIN ques(int k,int l,int r,int x,int y){\n\t\tif(x>r||y<l||!k)return 0;\n\t\tif(x<=l&&r<=y)return w[k];\n\t\tre mid=(l+r)>>1;\n\t\treturn ques(lt,x,y)+ques(rt,x,y);\n\t}\n\tIN merge(int x,int y){\n\t\tif(!x||!y)return x+y;\n\t\tre now=++tot;\n\t\tw[now]=w[x]+w[y];lc[now]=merge(lc[x],lc[y]);rc[now]=merge(rc[x],rc[y]);\n\t\treturn now;\n\t}\n};\nnamespace SAM{\n\tint ch[404000][27],len[404000],link[404000],tot,las,p,q,cur,cle;\n\tint buc[404000],sa[404000],id[202000];\n\tI init(){\n\t\tlas=1;tot=1;\n\t}\n\tI add(int x){\n\t\tif(ch[las][x]){\n\t\t\tp=las;q=ch[p][x];\n\t\t\tif(len[p]+1==len[q]){las=q;return;}\n\t\t\tcle=++tot;len[cle]=len[p]+1,link[cle]=link[q];\n\t\t\tmemcpy(ch[cle],ch[q],sizeof(ch[q]));\n\t\t\twhile(p&&ch[p][x]==q)ch[p][x]=cle,p=link[p];\n\t\t\tlas=cle;link[q]=cle;return;\n\t\t}\n\t\tlen[cur=++tot]=len[las]+1;p=las;las=cur;\n\t\twhile(p&&!ch[p][x])ch[p][x]=cur,p=link[p];\n\t\tif(!p){link[cur]=1;return;}\n\t\tq=ch[p][x];\n\t\tif(len[p]+1==len[q]){link[cur]=q;return;}\n\t\tcle=++tot;len[cle]=len[p]+1,link[cle]=link[q];\n\t\tmemcpy(ch[cle],ch[q],sizeof(ch[q]));\n\t\twhile(p&&ch[p][x]==q)ch[p][x]=cle,p=link[p];\n\t\tlink[cur]=link[q]=cle;\n\t}\n\tI sort(){\n\t\tF(i,1,tot)buc[len[i]]++;\n\t\tF(i,1,tot)buc[i]+=buc[i-1];\n\t\tFOR(i,tot,1)sa[buc[len[i]]--]=i;\n\t\tFOR(i,tot,1){\n\t\t\tif(sa[i]==1)continue;Tree::root[link[sa[i]]]=Tree::merge(Tree::root[link[sa[i]]],Tree::root[sa[i]]);\n\t\t}\n\t}\n};\nchar c[202000];\nint n,m,X,Y,W;\nint main(){\n\tread(n);read(m);\n\tSAM::init();\n\tF(i,1,n){\n\t\tscanf(\"%s\",c+1);SAM::las=1;re len=strlen(c+1);\n\t\tF(j,1,len)SAM::add(c[j]-'a'+1),Tree::modi(Tree::root[SAM::las],1,n,i);\n\t\tSAM::id[i]=SAM::las;\n\t}\n\tSAM::sort();\n\twhile(m--){\n\t\tread(X);read(Y);read(W);\n\t\tprintf(\"%d\\n\",Tree::ques(Tree::root[SAM::id[W]],1,n,X,Y));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1578981640,
        "uid": 93453,
        "name": "Purple_wzy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF547E \u3010Mike and Friends\u3011"
    }
]