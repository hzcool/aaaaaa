[
    {
        "content": "\u6cea\u76ee\u3002\n\n\u6211\u4e5f\u4e0d\u77e5\u9053\u6211\u505a\u8fd9\u79cd\u9898\u6709\u4ec0\u4e48\u5b9e\u9645\u610f\u4e49\uff0c\u6bd5\u7adf\u5b83\u80af\u5b9a\u662f\u8fdc\u8fdc\u8d85\u8fc7\u6211\u73b0\u5728\u7684 ds \u6c34\u5e73\u7684\u3002\u5982\u679c\u534a\u5e74\u6216\u8005\u4e00\u5e74\u524d\u6765\u505a\u8fd9\u79cd\u9898\uff0c\u90a3\u53ef\u80fd\u53ef\u4ee5\u663e\u793a\u6211\u60f3\u8981\u6311\u6218\u65e0\u4e0a EA \u7684\u51b3\u5fc3\u3002\u4f46\u662f\u73b0\u5728\u6211\u5df2\u7ecf\u4e0d\u53ef\u80fd\u6709\u8fd9\u79cd\u8822\u60f3\u6cd5\u4e86\uff0c\u6700\u591a\u4e5f\u5c31\u662f\u8868\u8fbe\u4e00\u4e0b\u5bf9 EA \u7684\u656c\u4ef0\u5427\u3002\n\n\u4f46\u662f\u8fd8\u662f\u8981\u7ed9\u81ea\u5df1\u7684\u6267\u5ff5\u4e00\u4e2a\u4ea4\u4ee3\uff0c\u7528\u8fd9\u9898\u6765\u5f7b\u5e95\u544a\u522b\u6211\u53bb\u5e74\u4e00\u5e74\u7684 OI \u751f\u6d3b\u5427\u3002\n\n------------\n\u6211\u5bf9\u4e8e\u4e09\u79cd\u60c5\u51b5\u7684\u5904\u7406\u597d\u50cf\u90fd\u8ddf\u5b98\u65b9\u9898\u89e3\u4e0d\u592a\u4e00\u6837\u3002\u9274\u4e8e\u6211\u5b8c\u5168\u770b\u4e0d\u61c2\u6d1b\u8c37\u73b0\u6709\u7684\u4e24\u7bc7\u9898\u89e3\uff0c\u5e76\u4e14\u548c EA \u8bf4\u7684\u65f6\u5019\u4ed6\u6700\u5f00\u59cb\u4e5f\u6ca1\u542c\u61c2\u6211\u8fd9\u4e2a\u505a\u6cd5\uff0c\u6211\u5c3d\u91cf\u8bb2\u6e05\u695a\u4e00\u70b9\u3002\n\n------------\n\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u4e24\u6761\u94fe lca \u4e0d\u540c\u3002\n\n![](https://codeforces.ml/predownloaded/95/e5/95e531fd6d6710c30f67f54a3a70332bfdde45a0.png)\n\ndfs \u6574\u68f5\u6811\uff0c\u5728 $A$ \u70b9\u5904\u679a\u4e3e\u6bcf\u6761 lca \u4e3a $A$ \u7684\u94fe $(E,F)$\uff0c\u5bf9 $E$ \u548c $F$ \u505a\u5355\u70b9\u52a0\u3002\u5728 $B$ \u70b9\u5904\u540c\u6837\u679a\u4e3e\u6bcf\u6761 lca \u4e3a $B$ \u7684\u94fe $(G,H)$\uff0c\u5411 $G$ \u8d70 $k$ \u6b65\u5230 $C$\uff0c\u5411 $H$ \u8d70 $k$ \u6b65\u5230 $D$\uff0c\u67e5\u8be2 $C$ \u548c $D$ \u7684\u5b50\u6811\u548c\u5e76\u7b97\u8fdb\u7b54\u6848\u3002\u6700\u540e\u5728\u56de\u6eaf\u5230 $A$ \u65f6\u64a4\u9500 $E$ \u548c $F$ \u7684\u8d21\u732e\uff08\u4f3c\u4e4e\u4e5f\u5e76\u4e0d\u9700\u8981\uff1f\uff09\u3002\n\n------------\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\u4e24\u6761\u94fe lca \u76f8\u540c\uff0c\u5982\u4e0b\u56fe\u53f3\u3002\n\n![](https://codeforces.ml/predownloaded/fc/a0/fca00e8fdae5ddc2e82355dea768994e4315cc50.png)\n\n\u6211\u4eec\u8981\u8003\u8651\u7684\u662f $(B,E)$ \u548c $(C,F)$ \u8fd9\u4e24\u6761\u94fe\uff0c\u4e0d\u59a8\u8bbe $dfn_B<dfn_E$\uff0c$dfn_C<dfn_F$\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e2d\uff0c\u5b83\u4eec\u7684\u4ea4\u5373\u4e3a\u4ee5 $A=lca(B,C)$ \u548c $D=lca(E,F)$ \u4e3a\u7aef\u70b9\u7684\u94fe $(A,D)$\u3002\n\n\u6211\u4eec\u679a\u4e3e\u70b9 $A$\uff0c\u8fd0\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u7ef4\u62a4\u6240\u6709 $s_i$ \u5728\u70b9 $A$ \u5b50\u6811\u5185\u7684\u94fe $i$\u3002\uff08\u8bbe $dfn_{s_i}<dfn_{t_i}$\uff09\u8981\u63d2\u5165\u4e00\u6761\u65b0\u7684\u94fe $j$ \u65f6\uff0c\u8bbe\u5f53\u524d\u6240\u6709\u5df2\u6709\u7684\u94fe $i$ \u90fd\u4e0e $j$ \u5728 $A$ \u7684\u4e0d\u540c\u5b50\u6811\u5185\uff0c\u8bbe $i$ \u4e3a\u4e0a\u56fe $(B,E)$\uff0c$j$ \u4e3a\u4e0a\u56fe $(C,F)$\u3002\u6211\u4eec\u4ece $A$ \u5f80 $F$ \u8d70 $k$ \u6b65\uff0c\u5047\u8bbe\u5230\u8fbe\u4e86 $G$ \u70b9\uff0c\u4e8e\u662f $G$ \u4e00\u5b9a\u662f $E$ \u7684\u7956\u5148\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u67e5\u8be2 $G$ \u7684\u5b50\u6811\u5185\u6709\u591a\u5c11\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9 $E$ \u5373\u53ef\u3002\n\n\u6211\u4eec\u5bf9\u6bcf\u4e2a\u94fe\u4ee5 lca \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u8d77\u70b9\u7684 dfs \u5e8f\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u81ea\u5df1\u4e3a\u7b2c\u4e09\u5173\u952e\u5b57\uff08\u9632\u6b62\u6709\u7b49\u4ef7\u7684\u94fe\u51fa\u73b0\uff09\u6392\u5e8f\u5e76\u91cd\u65b0\u7f16\u53f7\uff0c\u90a3\u4e48\u53d1\u73b0\u6240\u6709 lca \u4e3a\u540c\u4e00\u4e2a\u70b9\u7684\u94fe\u7684\u7f16\u53f7\u662f\u8fde\u7eed\u7684\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u5982\u679c\u6211\u4eec\u6309\u7167\u7b2c\u4e00\u6b21\u6392 dfs \u5e8f\u65f6\u7684\u513f\u5b50\u987a\u5e8f\u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u90a3\u4e48\u6240\u6709\u4e0e $j$ \u7684 lca \u76f8\u540c\u7684 $i$ \u7684\u7f16\u53f7\u4e5f\u662f\u5408\u5e76\u7684\u3002\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u5728\u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76\u7684 `set` \u4e2d\u4e8c\u5206\u51fa\u8fd9\u4e00\u6bb5\u7f16\u53f7\uff0c\u5373\u53ef\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u89e3\u51b3\u3002\n\n------------\n\u7b2c\u4e09\u79cd\u60c5\u51b5\uff1a\u5982\u4e0a\u56fe\u5de6\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e2d\uff0c\u4e0a\u9762\u63d0\u5230\u7684\u5047\u8bbe\u4e0d\u6210\u7acb\u4e86\u3002\u6211\u4eec\u9700\u8981\u5355\u72ec\u8ba1\u7b97\u8fd9\u4e00\u7c7b\u94fe\u5bf9\u7684\u8d21\u732e\u3002\u6ce8\u610f\u4e0b\u9762 @xyr2005 \u7684\u9898\u89e3\u4e2d\u8fd9\u4e00\u7c7b\u60c5\u51b5\u6210\u7acb\u7684\u6761\u4ef6\u662f\u9519\u8bef\u7684\uff08\u867d\u7136\u5728\u4ee3\u7801\u4e2d\u786e\u5b9e\u4e0d\u9700\u8981\u4f53\u73b0\uff09\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u5c06 $D$ \u548c $E$ \u7684\u4f4d\u7f6e\u4e92\u6362\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5bf9\u4e8e\u4ee5\u4e00\u4e2a\u8282\u70b9 $X$ \u4e3a lca \u7684\u6240\u6709\u94fe\u6309\u7167\u8d77\u70b9\u7684 dfs \u5e8f\u6392\u5e8f\uff08\u5b9e\u9645\u4e0a\u6392\u5e8f\u51fd\u6570\u53ef\u4ee5\u501f\u7528\u4e0a\u4e00\u79cd\u60c5\u51b5\u7684\uff09\uff0c\u7136\u540e\u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e2a\u94fe\u3002\u5728\u679a\u4e3e\u5230 $(A,E) $ \u65f6\uff0c\u6211\u4eec\u5bf9 $E$ \u5355\u70b9\u52a0\uff0c\u679a\u4e3e\u5230 $(D,C)$ \u65f6\u4ece $X$ \u5411 $D$ \u8d70 $k$ \u6b65\u5230 $B$\uff0c\u5bf9 $B$ \u533a\u95f4\u67e5\u3002\n\n------------\n\u4e8e\u662f\u6211\u4eec\u5728 $O(n\\log^2n)$ \u65f6\u95f4\u5185\u89e3\u51b3\u4e86\u6b64\u9898\u3002\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=1.5e5+5;\nint n,m,k,s[maxn],t[maxn];\nvector<int> g[maxn];\nint fa[maxn],dep[maxn],size[maxn],hson[maxn];\nvoid dfs1(int u){\n\tdep[u]=dep[fa[u]]+1;\n\tsize[u]=1;\n\tfor(int v:g[u]){\n\t\tif(v==fa[u]) continue;\n\t\tfa[v]=u;\n\t\tdfs1(v);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>size[hson[u]]) hson[u]=v;\n\t}\n}\nint pos[maxn],top[maxn];\nvector<int> f;\nvoid dfs2(int u){\n\tpos[u]=f.size();\n\tf.push_back(u);\n\tif(!hson[u]) return;\n\ttop[hson[u]]=top[u];\n\tdfs2(hson[u]);\n\tfor(int v:g[u]){\n\t\tif(v==fa[u]||v==hson[u]) continue;\n\t\ttop[v]=v;\n\t\tdfs2(v);\n\t}\n}\nint lca(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y]) swap(x,y);\n\treturn y;\n}\nint jump(int x,int k){\n\twhile(pos[x]-pos[top[x]]<k){\n\t\tk-=pos[x]-pos[top[x]]+1;\n\t\tx=fa[top[x]];\n\t}\n\treturn f[pos[x]-k];\n}\nstruct node{\n\tint l,r;\n\tnode* ch[2];\n\tint s;\n\tnode(int l,int r):l(l),r(r),s(0){\n\t\tch[0]=ch[1]=0;\n\t}\n\tvoid modify(int x,int k){\n\t\ts+=k;\n\t\tif(l==r) return;\n\t\tint mid=l+(r-l)/2;\n\t\tif(x<=mid){\n\t\t\tif(!ch[0]) ch[0]=new node(l,mid);\n\t\t\tch[0]->modify(x,k);\n\t\t}\n\t\telse{\n\t\t\tif(!ch[1]) ch[1]=new node(mid+1,r);\n\t\t\tch[1]->modify(x,k);\n\t\t}\n\t}\n\tint query(int ql,int qr){\n\t\tif(ql<=l&&qr>=r) return s;\n\t\tint ans=0;\n\t\tif(ch[0]&&ql<=ch[0]->r) ans+=ch[0]->query(ql,qr);\n\t\tif(ch[1]&&qr>=ch[1]->l) ans+=ch[1]->query(ql,qr);\n\t\treturn ans;\n\t}\n};\nnode* merge(node* a,node* b){\n\tif(!a) return b;\n\tif(!b) return a;\n\tnode* x=new node(a->l,a->r);\n\tx->s=a->s+b->s;\n\tx->ch[0]=merge(a->ch[0],b->ch[0]);\n\tx->ch[1]=merge(a->ch[1],b->ch[1]);\n\treturn x;\n}\nint l[maxn];\nvector<int> q[maxn];\nlong long ans=0;\nnode* rt1;\nvoid dfs3(int u){\n\tfor(int i:q[u]){\n\t\tif(dep[s[i]]-dep[u]>=k){\n\t\t\tint x=jump(s[i],dep[s[i]]-dep[u]-k);\n\t\t\tans+=rt1->query(pos[x],pos[x]+size[x]-1);\n\t\t}\n\t\tif(dep[t[i]]-dep[u]>=k){\n\t\t\tint x=jump(t[i],dep[t[i]]-dep[u]-k);\n\t\t\tans+=rt1->query(pos[x],pos[x]+size[x]-1);\n\t\t}\n\t}\n\tfor(int i:q[u]){\n\t\trt1->modify(pos[s[i]],1);\n\t\trt1->modify(pos[t[i]],1);\n\t}\n\tfor(int v:g[u]){\n\t\tif(v==fa[u]) continue;\n\t\tdfs3(v);\n\t}\n\tfor(int i:q[u]){\n\t\trt1->modify(pos[s[i]],-1);\n\t\trt1->modify(pos[t[i]],-1);\n\t}\n}\nbool cmp(int a,int b){\n\tif(l[a]!=l[b]) return l[a]<l[b];\n\tif(pos[s[a]]!=pos[s[b]]) return pos[s[a]]<pos[s[b]];\n\treturn a<b;\n}\nint ord[maxn],pos2[maxn];\nnode* rt2[maxn];\nvoid dfs4(int u){\n\tfor(int v:g[u]){\n\t\tif(v==fa[u]) continue;\n\t\tdfs4(v);\n\t\trt2[u]=merge(rt2[u],rt2[v]);\n\t}\n}\nint mn[maxn],mx[maxn];\nset<int> st[maxn];\nvoid insert(int u,int x){\n\tset<int>::iterator it1,it2;\n\tit1=st[u].lower_bound(mn[l[x]]);\n\tit2=st[u].upper_bound(mx[l[x]]);\n\tif(dep[u]+dep[t[x]]-dep[l[x]]*2>=k){\n\t\tint v=l[x];\n\t\tif(dep[u]-dep[l[x]]<k)\n\t\t\tv=jump(t[x],dep[u]+dep[t[x]]-dep[l[x]]*2-k);\n\t\tif(it1!=it2) ans+=rt2[v]->query(*it1,*--it2);\n\t}\n}\nvoid dfs5(int u){\n\tif(!hson[u]) return;\n\tdfs5(hson[u]);\n\tif(st[u].size()<st[hson[u]].size()) swap(st[u],st[hson[u]]);\n\tfor(int i:st[hson[u]]) insert(u,ord[i]);\n\tfor(int i:st[hson[u]]) st[u].insert(i);\n\tset<int>().swap(st[hson[u]]);\n\tfor(int v:g[u]){\n\t\tif(v==fa[u]||v==hson[u]) continue;\n\t\tdfs5(v);\n\t\tif(st[u].size()<st[v].size()) swap(st[u],st[v]);\n\t\tfor(int i:st[v]) insert(u,ord[i]);\n\t\tfor(int i:st[v]) st[u].insert(i);\n\t\tset<int>().swap(st[v]);\n\t}\n\tfor(int i:q[u]) st[u].erase(pos2[i]);\n}\nnode* rt3;\nvoid dfs6(int u){\n\tsort(q[u].begin(),q[u].end(),cmp);\n\tfor(int i:q[u]){\n\t\tif(dep[s[i]]-dep[u]>=k){\n\t\t\tint x=jump(s[i],dep[s[i]]-dep[u]-k);\n\t\t\tans+=rt3->query(pos[x],pos[x]+size[x]-1);\n\t\t}\n\t\trt3->modify(pos[t[i]],1);\n\t}\n\tfor(int i:q[u]) rt3->modify(pos[t[i]],-1);\n\tfor(int v:g[u]){\n\t\tif(v==fa[u]) continue;\n\t\tdfs6(v);\n\t}\n}\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tn=readint();\n\tm=readint();\n\tk=readint();\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;\n\t\tu=readint();\n\t\tv=readint();\n\t\tg[u].push_back(v);\n\t\tg[v].push_back(u);\n\t}\n\tdfs1(1);\n\ttop[1]=1;\n\tdfs2(1);\n\tfor(int i=1;i<=m;i++){\n\t\ts[i]=readint();\n\t\tt[i]=readint();\n\t\tif(pos[s[i]]>pos[t[i]]) swap(s[i],t[i]);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tl[i]=lca(s[i],t[i]);\n\t\tq[l[i]].push_back(i);\n\t}\n\trt1=new node(0,n-1);\n\tdfs3(1);\n\tfor(int i=1;i<=m;i++) ord[i]=i;\n\tsort(ord+1,ord+m+1,cmp);\n\tfor(int i=1;i<=m;i++) pos2[ord[i]]=i;\n\tfor(int i=1;i<=n;i++) rt2[i]=new node(1,m);\n\tfor(int i=1;i<=m;i++) rt2[t[i]]->modify(pos2[i],1);\n\tdfs4(1);\n\tfor(int i=1;i<=n;i++){\n\t\tmn[i]=m+1;\n\t\tmx[i]=0;\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tmn[l[i]]=min(mn[l[i]],pos2[i]);\n\t\tmx[l[i]]=max(mx[l[i]],pos2[i]);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tinsert(s[ord[i]],ord[i]);\n\t\tst[s[ord[i]]].insert(i);\n\t}\n\tdfs5(1);\n\trt3=new node(0,n-1);\n\tdfs6(1);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\nBonus\uff1a\n\n\u5173\u4e8e\u5b98\u65b9\u9898\u89e3\u4e2d\u6240\u63d0\u5230\u7684\u201c\u6bd4\u865a\u6811\u66f4\u597d\u5199\u7684\u6811\u5256\u505a\u6cd5\u201d\uff0c\u6211\u8be2\u95ee\u4e86 EA\uff0c\u8fd9\u91cc\u63d0\u4e00\u4e0b\u5427\uff1a\n\n\u6211\u4eec\u5b9e\u9645\u4e0a\u8981\u5bf9\u6240\u6709 lca \u4e3a\u5f53\u524d\u70b9\u7684\u94fe\u7684\u8d77\u70b9\u5efa\u865a\u6811\u3002\u90a3\u4e48\u6211\u4eec dfs \u65f6\u6700\u540e\u904d\u5386\u91cd\u5b50\u6811\uff0c\u5219\u7531\u4e8e\u8d77\u70b9\u7684 dfs \u5e8f\u5c0f\u4e8e\u7ec8\u70b9\u7684 dfs \u5e8f\uff0c\u8d77\u70b9\u4e00\u5b9a\u4e0d\u5728\u5f53\u524d\u70b9\u7684\u91cd\u5b50\u6811\u5185\uff0c\u4e8e\u662f\u904d\u5386\u5f53\u524d\u70b9\u7684\u865a\u5b50\u6811\u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\uff0c\u7531\u4e8e\u6240\u6709\u8f7b\u5b50\u6811\u7684\u5927\u5c0f\u548c\u4e3a $O(n\\log n)$ \u6240\u4ee5\u590d\u6742\u5ea6\u662f\u5bf9\u7684\u3002\u5f53\u7136\u5b98\u65b9\u9898\u89e3\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u4e0d\u662f\u6211\u4e0a\u9762\u8fd9\u4e2a\u505a\u6cd5\u7684\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u4f3c\u4e4e\u662f\u7ebf\u6bb5\u6811\u7684\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u4f46\u662f\u4e0a\u9762\u8fd9\u4e2a\u505a\u6cd5\u5176\u5b9e\u4e5f\u53ef\u4ee5\u5957\u7528\u8fd9\u4e2a\u505a\u6cd5\u3002\n\n\u5e76\u4e14\u5728\u4e0a\u9762\u8fd9\u4e2a\u505a\u6cd5\u5957\u7528\u4e86\u8fd9\u4e2a\u6811\u5256\u65b9\u6cd5\u4e4b\u540e\uff0c\u7531\u4e8e\u6211\u4eec\u4e0a\u9762\u8bf4\u4e86\u201c\u6240\u6709\u7684 $i$ \u7684\u7f16\u53f7\u662f\u8fde\u7eed\u7684\u201d\uff0c\u6211\u4eec\u542f\u53d1\u5f0f\u5408\u5e76\u65f6\u53ea\u9700\u8981\u5728\u524d\u540e\u8fdb\u884c\u63d2\u5165\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u53cc\u7aef\u961f\u5217\uff0c\u8fd9\u6837\u542f\u53d1\u5f0f\u5408\u5e76\u672c\u8eab\u7684\u590d\u6742\u5ea6\u5c31\u88ab\u964d\u5230\u4e86\u4e00\u4e2a log\u3002\u5bf9\u4e8e\u8ba1\u7b97\u8d21\u732e\u7684\u90e8\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u67e5\u8be2\u5b58\u4e0b\u6765\uff0c\u53d1\u73b0\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a $O(n)$ \u4e2a\u70b9 $O(n\\log n)$ \u6b21\u8be2\u95ee\u7684\u4e8c\u7ef4\u6570\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u7528\u591a\u5c42\u5206\u5757\u7684\u505a\u6cd5\u5747\u644a\u590d\u6742\u5ea6\u5373\u53ef\u505a\u5230 $O\\left(\\dfrac{n\\log^2n}{\\log\\log n}\\right)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u6ca1\u6709\u4ec0\u4e48\u610f\u601d\uff0c\u800c\u4e14\u636e EA \u8bf4\u6807\u7b97\u628a\u7ebf\u6bb5\u6811\u6362\u6210 $\\dfrac{\\log n}{\\log\\log n}$ \u53c9\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u505a\u5230\u4e00\u6837\u7684\u590d\u6742\u5ea6\u3002\u5bf9\u4e8e\u8fd9\u4e00\u70b9\u6211\u8fd8\u9700\u8981\u518d\u4ed4\u7ec6\u7814\u8bfb\u4e00\u4e0b std\u3002",
        "postTime": 1612194202,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1336F \u3010Journey\u3011"
    },
    {
        "content": "[$\\texttt{My Blog}$](https://www.cnblogs.com/Frame233/p/12719197.html)\n\n\n\u5bf9\u4e24\u6761\u94fe\u7684 $\\operatorname {lca}$ \u662f\u5426\u76f8\u540c\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u3002\u4e0b\u9762 $x$ \u7684\u94fe\u6307 $\\operatorname {lca}(s,t)=x$ \u7684\u94fe\uff0c\u94fe $(s,t)$ \u9700\u8981\u6ee1\u8db3 $dfn_s<dfn_t$\u3002\n\n1. \u5982\u679c$\\operatorname {lca}$\u4e0d\u540c\u3002\n\ndfs\u6574\u9897\u6811\uff0c\u5e76\u5728 $\\operatorname {lca}$ \u7684\u6df1\u5ea6\u8f83\u6d45\u5904\u4ea7\u751f\u8d21\u732e\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f \u4e24\u6761\u94fe\u7684\u4ea4\u4e00\u5b9a\u662f \u5728\u6df1\u5ea6\u8f83\u6df1\u7684\u94fe\u4e0a\u7684\u4e00\u6761\u4ee5$\\operatorname {lca}$\u4e3a\u7aef\u70b9\u7684\u94fe\uff0c\u6811\u72b6\u6811\u7ec4\u7edf\u8ba1\u3002\n\u5177\u4f53\u5730\uff0cdfs\u5230\u4e00\u4e2a\u70b9 $x$ \u65f6\uff0c\u5148\u9012\u5f52\u5904\u7406\u513f\u5b50\uff0c\u518d\u7edf\u8ba1 $x$ \u548c\u5b50\u6811\u5185\u7684\u94fe\u7684\u8d21\u732e\u3002\n\u653e\u5f20\u5b98\u65b9sol\u7684\u56fe\u3002\n\n![](https://i.loli.net/2020/04/17/62LMAbsKlgzwcSq.png)\n\n> \u56fe\u4e2d\u6709\u4e24\u6761\u94fe\uff0cE-F\u548cG-H\uff0c\u4ed6\u4eec\u7684\u4ea4\u662fB-G\uff0c\u4e14B-C\u548cB-D\u7684\u8ddd\u79bb\u662fk\u3002\n\u5904\u7406G-H\u7684\u65f6\u5019\uff0c\u5bf9C\uff0cD\u505a\u5b50\u6811\u52a0\uff0c\u5728E-F\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\uff0c\u67e5\u8be2E\uff0cF\u7684\u503c\u3002\n\n\n2. \u5982\u679c $\\operatorname {lca}$ \u76f8\u540c\u3002\n\n\u679a\u4e3e\u6bcf\u4e2a\u70b9\u4f5c\u4e3a$\\operatorname {lca}$\u3002\u5f53\u524d\u70b9\u662f $x$\u3002\u5c06 $x$ \u7684\u6240\u6709\u94fe\u7684 $s$ \u7aef\u70b9\u5efa\u68f5\u865a\u6811\uff0c$t$ \u7aef\u70b9\u5b58\u5728 $s$ \u4e0a\u3002\n\u8bbe $\\operatorname {lca}(x1,x2)=a$\uff0c\u4ece $a$ \u5411 $y1$ \u8d70 $k$ \u6b65\u5230\u70b9 $u$\uff0c\u6240\u6709\u5408\u6cd5\u7684 $y2$ \u5728 $u$ \u7684\u5b50\u6811\u5185\u3002\n\u542f\u53d1\u5f0f\u5408\u5e76+\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u3002\n\n![](https://i.loli.net/2020/04/17/d9bnVfKIF3LoyGB.png)\n\n>\u56fe\u4e2d\u6709\u4e24\u6761\u94fe\uff0cB-E\u548cC-F\uff0c\u4ed6\u4eec\u7684\u4ea4\u662fA-D\uff0c\u4e14A-X\u7684\u8ddd\u79bb\u662fk\u3002\n$\\operatorname {lca}(B,C)=A$\uff0cA\u5411E\u8d70 $k$ \u6b65\u5230X\uff0c\u67e5\u8be2X\u7684\u5b50\u6811\u5185\u7684 $y$ \u70b9\uff0c\u70b9F\u4ea7\u751f\u8d21\u732e\u3002\n\n\n3. \u8fd9\u6837\u505a\u8fd8\u9057\u6f0f\u4e86\u4e00\u79cd\u60c5\u51b5\n\n![](https://i.loli.net/2020/04/17/fMFSq7ialm8RDC5.png)\n\n>\u56fe\u4e2d\u67092\u6761\u94fe\uff0cA-E\u548cC-D\uff0c\u4ed6\u4eec\u7684\u4ea4\u662fB-X\u3002\n\u5176\u4e2d $dfn_A<dfn_E<dfn_D<dfn_C$\uff0c\u5bb9\u6613\u53d1\u73b0\u8fd9\u5bf9\u94fe\u6ca1\u88ab\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u5305\u542b\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u628a\u5f53\u524d\u70b9\u7684\u94fe\u6309 $dfn_s$ \u6392\u5e8f\uff0c\u6b64\u65f6\u94fe\u7684\u4ea4\u4e00\u5b9a\u662f\u4ecelca\u5411\u4e0b\u7684\u4e00\u6761\u94fe\uff0c\u7528\u7c7b\u4f3c\u7b2c1\u79cd\u60c5\u51b5\u7684\u65b9\u6cd5\u7edf\u8ba1\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6 $O(mlog^2n+nlogn)$\uff0c\u74f6\u9888\u5728\u4e8e\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n```cpp\n// Author -- Frame\n\n#include<bits/stdc++.h>\n\n#define lowbit(x) ((x)&(-x))\n#define Finline __inline__ __attribute__ ((always_inline))\n#define DEBUG fprintf(stderr,\"Running on Line %d in Function %s\\n\",__LINE__,__FUNCTION__)\n#define SZ(x) ((int)x.size())\n#define pb push_back\n\ntypedef long long ll;\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\n\nconst int inf=0x3f3f3f3f,Inf=0x7fffffff;\nconst ll INF=0x7fffffffffffffff;\nconst double eps=1e-10;\n\ntemplate <typename _Tp>_Tp gcd(const _Tp &a,const _Tp &b){return (!b)?a:gcd(b,a%b);}\ntemplate <typename _Tp>Finline _Tp abs(const _Tp &a){return a>=0?a:-a;}\ntemplate <typename _Tp>Finline _Tp max(const _Tp &a,const _Tp &b){return a<b?b:a;}\ntemplate <typename _Tp>Finline _Tp min(const _Tp &a,const _Tp &b){return a<b?a:b;}\ntemplate <typename _Tp>Finline void chmax(_Tp &a,const _Tp &b){(a<b)&&(a=b);}\ntemplate <typename _Tp>Finline void chmin(_Tp &a,const _Tp &b){(b<a)&&(a=b);}\ntemplate <typename _Tp>Finline bool _cmp(const _Tp &a,const _Tp &b){return abs(a-b)<=eps;}\ntemplate <typename _Tp>Finline void read(_Tp &x)\n{\n\tchar ch(getchar());\n\tbool f(false);\n\twhile(ch<48||ch>57) f|=ch==45,ch=getchar();\n\tx=ch&15,ch=getchar();\n\twhile(ch>=48&&ch<=57) x=(((x<<2)+x)<<1)+(ch&15),ch=getchar();\n\tif(f) x=-x;\n}\ntemplate <typename _Tp,typename... Args>Finline void read(_Tp &t,Args &...args)\n{\n\tread(t);read(args...);\n}\nFinline int read_str(char *s)\n{\n\tchar ch(getchar());\n\twhile(ch==' '||ch=='\\r'||ch=='\\n') ch=getchar();\n\tchar *tar=s;\n\t*tar=ch,ch=getchar();\n\twhile(ch!=' '&&ch!='\\r'&&ch!='\\n'&&ch!=EOF) *(++tar)=ch,ch=getchar();\n\treturn tar-s+1;\n}\n\nconst int N=150005;\nint n;\nstruct edge{\n\tint v,nxt;\n}c[N<<1];\nint front[N],edge_cnt;\nFinline void add(int u,int v)\n{\n\tc[++edge_cnt]=(edge){v,front[u]};\n\tfront[u]=edge_cnt;\n}\nint anc[N][21],dep[N],siz[N];\nint dfn[N],rev[N],id;\nstruct seg_tr{\n\tstruct Node{\n\t\tint ls,rs;\n\t\tint sum;\n\t}f[N<<5];\n\tint node_cnt;\n\tint st[N<<5],top;\n\tFinline void PushUp(int x)\n\t{\n\t\tf[x].sum=f[f[x].ls].sum+f[f[x].rs].sum;\n\t}\n\tFinline int newnode()\n\t{\n\t\tint cur=top?st[top--]:++node_cnt;\n\t\tf[cur]=(Node){0,0,0};\n\t\treturn cur;\n\t}\n\tvoid Update(int &cur,int l,int r,int pos)\n\t{\n\t\tif(!cur) cur=newnode();\n\t\t++f[cur].sum;\n\t\tif(l==r) return;\n\t\tint mid=(l+r)>>1;\n\t\tif(pos<=mid) Update(f[cur].ls,l,mid,pos);\n\t\telse Update(f[cur].rs,mid+1,r,pos);\n\t}\n\tint Query(int L,int R,int l,int r,int cur)\n\t{\n\t\tif(!cur) return 0;\n\t\tif(L<=l&&r<=R) return f[cur].sum;\n\t\tint mid=(l+r)>>1;\n\t\treturn (L<=mid?Query(L,R,l,mid,f[cur].ls):0)+(R>mid?Query(L,R,mid+1,r,f[cur].rs):0);\n\t}\n\tint merge(int a,int &b)\n\t{\n\t\tif(!a||!b) return a|b;\n\t\tf[a].sum+=f[b].sum;\n\t\tf[a].ls=merge(f[a].ls,f[b].ls);\n\t\tf[a].rs=merge(f[a].rs,f[b].rs);\n\t\tst[++top]=b;\n\t\tb=0;\n\t\treturn a;\n\t}\n\tvoid del(int &x)\n\t{\n\t\tif(!x) return;\n\t\tdel(f[x].ls);\n\t\tdel(f[x].rs);\n\t\tst[++top]=x;\n\t\tx=0;\n\t}\n}tr;\nint Fa[N];\nvoid dfs1(int x,int fa)\n{\n\tdep[x]=dep[fa]+1;\n\tanc[x][0]=fa;\n\tFa[x]=fa;\n\tsiz[x]=1;\n\tfor(int i=1;i<=20;++i)\n\t{\n\t\tanc[x][i]=anc[anc[x][i-1]][i-1];\n\t}\n\tdfn[x]=++id;\n\trev[x]=id;\n\tfor(int i=front[x];i;i=c[i].nxt)\n\t{\n\t\tint v=c[i].v;\n\t\tif(v!=fa)\n\t\t{\n\t\t\tdfs1(v,x);\n\t\t\tsiz[x]+=siz[v];\n\t\t}\n\t}\n}\nint jump(int x,int k)\n{\n\tfor(int i=20;i>=0;--i)\n\t{\n\t\tif((k>>i)&1)\n\t\t{\n\t\t\tx=anc[x][i];\n\t\t}\n\t}\n\treturn x;\n}\nint lca(int x,int y)\n{\n\tif(dep[x]<dep[y]) std::swap(x,y);\n\tfor(int i=20;i>=0;--i)\n\t{\n\t\tif(dep[anc[x][i]]>=dep[y])\n\t\t{\n\t\t\tx=anc[x][i];\n\t\t}\n\t}\n\tif(x==y) return x;\n\tfor(int i=20;i>=0;--i)\n\t{\n\t\tif(anc[x][i]!=anc[y][i])\n\t\t{\n\t\t\tx=anc[x][i];\n\t\t\ty=anc[y][i];\n\t\t}\n\t}\n\treturn anc[x][0];\n}\nll ans;\nint k;\ntemplate<typename _Tp>\nclass BIT{\npublic:\n\t_Tp c[N];\n\tFinline void clear(){memset(c,0,sizeof(c));}\n\tFinline void add(int x,_Tp C){++x;for(;x<N;x+=lowbit(x))c[x]+=C;}\n\tFinline _Tp sum(int x){++x;_Tp ans=0;for(;x;x-=lowbit(x))ans+=c[x];return ans;}\n};\nBIT<int> _tr;\nstruct node{\n\tint x,y;\n\tFinline bool operator < (const node &o)const\n\t{\n\t\treturn dfn[x]<dfn[o.x];\n\t}\n};\nstd::vector<node> v[N];\nvoid dfs2(int x,int fa)\n{\n\tfor(int i=front[x];i;i=c[i].nxt)\n\t{\n\t\tint v=c[i].v;\n\t\tif(v!=fa)\n\t\t{\n\t\t\tdfs2(v,x);\n\t\t}\n\t}\n\tfor(auto it:v[x])\n\t{\n\t\tans+=_tr.sum(dfn[it.x]);\n\t\tans+=_tr.sum(dfn[it.y]);\n\t}\n\tfor(auto it:v[x])\n\t{\n\t\tif(dep[it.x]-dep[x]>=k)\n\t\t{\n\t\t\tint qwq=jump(it.x,dep[it.x]-dep[x]-k);\n\t\t\t_tr.add(dfn[qwq],1);\n\t\t\t_tr.add(dfn[qwq]+siz[qwq],-1);\n\t\t}\n\t\tif(dep[it.y]-dep[x]>=k)\n\t\t{\n\t\t\tint qwq=jump(it.y,dep[it.y]-dep[x]-k);\n\t\t\t_tr.add(dfn[qwq],1);\n\t\t\t_tr.add(dfn[qwq]+siz[qwq],-1);\n\t\t}\n\t}\n}\nint t[N],pos;\nint st[N],top;\nstd::vector<int> e[N];\nstd::vector<int> q[N];\nint root[N];\nvoid ins(int x)\n{\n\tif(!top||(dfn[x]>=dfn[st[top]]&&dfn[x]<dfn[st[top]]+siz[st[top]]))\n\t{\n\t\tt[++pos]=x;\n\t\tst[++top]=x;\n\t\treturn;\n\t}\n\tint l=lca(x,st[top]);\n\twhile(top>1&&dfn[st[top-1]]>=dfn[l])\n\t{\n\t\te[st[top-1]].pb(st[top]);\n\t\t--top;\n\t}\n\tif(st[top]!=l)\n\t{\n\t\te[l].push_back(st[top]);\n\t\tst[top]=l;\n\t\tt[++pos]=l;\n\t}\n\tst[++top]=x;\n\tt[++pos]=x;\n}\nint cur_node;\nstd::vector<int> in[N];\nvoid dfs3(int x)\n{\n\tstd::function<void(int)> merge=[&](int a)\n\t{\n\t\tif(in[a].size()>in[x].size())\n\t\t{\n\t\t\tstd::swap(in[a],in[x]);\n\t\t\tstd::swap(root[a],root[x]);\n\t\t}\n\t\tfor(auto it:in[a])\n\t\t{\n\t\t\tint qwq;\n\t\t\tif(dep[x]-dep[cur_node]>=k)\n\t\t\t{\n\t\t\t\tqwq=cur_node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint len=dep[x]+dep[it]-(dep[cur_node]<<1);\n\t\t\t\tif(len<k) continue;\n\t\t\t\tqwq=jump(it,len-k);\n\t\t\t}\n\t\t\tans+=tr.Query(dfn[qwq],dfn[qwq]+siz[qwq]-1,1,n,root[x]);\n\t\t}\n\t\tfor(auto it:in[a]) in[x].push_back(it);\n\t\tin[a].clear();\n\t\troot[x]=tr.merge(root[x],root[a]);\n\t};\n\tfor(auto it:q[x])\n\t{\n\t\tint qwq;\n\t\tif(dep[x]-dep[cur_node]>=k)\n\t\t{\n\t\t\tqwq=cur_node;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint len=dep[x]+dep[it]-(dep[cur_node]<<1);\n\t\t\tif(len>=k) qwq=jump(it,len-k);\n\t\t\telse qwq=0;\n\t\t}\n\t\tif(qwq) ans+=tr.Query(dfn[qwq],dfn[qwq]+siz[qwq]-1,1,n,root[x]);\n\t\ttr.Update(root[x],1,n,dfn[it]);\n\t\tin[x].push_back(it);\n\t}\n\tfor(auto it:e[x])\n\t{\n\t\tdfs3(it);\n\t\tmerge(it);\n\t}\n}\nvoid solve(int x)\n{\n\tcur_node=x;\n\ttop=0,pos=0;\n\tstd::vector<int> nd;\n\tfor(auto it:v[x])\n\t{\n\t\tnd.pb(it.x);\n\t\tq[it.x].pb(it.y);\n\t}\n\tnd.erase(std::unique(nd.begin(),nd.end()),nd.end());\n\tfor(auto it:nd) ins(it);\n\twhile(top>1) e[st[top-1]].pb(st[top]),--top;\n\tint minn=inf,id=0;\n\tfor(int i=1;i<=pos;++i)\n\t{\n\t\tif(dfn[t[i]]<minn)\n\t\t{\n\t\t\tminn=dfn[t[i]];\n\t\t\tid=t[i];\n\t\t}\n\t}\n\tif(id) dfs3(id);\n\tfor(auto it:v[x]) q[it.x].clear();\n\tfor(int i=1;i<=pos;++i)\n\t{\n\t\ttr.del(root[t[i]]);\n\t\tin[t[i]].clear();\n\t\te[t[i]].clear();\n\t}\n}\nvoid _solve(int x)\n{\n\tstd::vector<int> tmp;\n\tfor(auto it:v[x])\n\t{\n\t\tans+=_tr.sum(dfn[it.x]);\n\t\tif(dep[it.y]-dep[x]>=k)\n\t\t{\n\t\t\tint qwq=jump(it.y,dep[it.y]-dep[x]-k);\n\t\t\t_tr.add(dfn[qwq],1);\n\t\t\t_tr.add(dfn[qwq]+siz[qwq],-1);\n\t\t\ttmp.push_back(qwq);\n\t\t}\n\t}\n\tfor(auto qwq:tmp)\n\t{\n\t\t_tr.add(dfn[qwq],-1);\n\t\t_tr.add(dfn[qwq]+siz[qwq],1);\n\t}\n}\nint main()\n{\n\tint m;\n\tread(n,m,k);\n\tint x,y;\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tread(x,y);\n\t\tadd(x,y),add(y,x);\n\t}\n\tdfs1(1,0);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tread(x,y);\n\t\tif(dfn[x]>dfn[y]) std::swap(x,y);\n\t\tv[lca(x,y)].pb((node){x,y});\n\t}\n\tdfs2(1,0);\n\t_tr.clear();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tstd::sort(v[i].begin(),v[i].end());\n\t}\n\tfor(int i=1;i<=n;++i) _solve(i);\n\tfor(int i=1;i<=n;++i) solve(i);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n\n```",
        "postTime": 1587100290,
        "uid": 81844,
        "name": "xyr2005",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1336F \u3010Journey\u3011"
    },
    {
        "content": "\u6211\u4eec\u5c06\u7b54\u6848\u5206\u6210\u4e09\u90e8\u5206\u8fdb\u884c\u7edf\u8ba1\u3002\n\n\u8bbe\u5f53\u524d\u8003\u8651\u7684\u4e24\u6761\u94fe\u4e3a $A, B$\uff0c\u56db\u4e2a\u7aef\u70b9\u4e3a $s_A, s_B, t_A, t_B$\uff0c\u4fdd\u8bc1 $dfn_s < dfn_t$\u3002$l_A=\\mathrm{lca}(s_A, t_A), l_B=\\mathrm{lca}(s_B, t_B)$\u3002\n\n1. $l_A\\neq l_B$\n\n   \u82e5 $l_A,l_B$ \u4e0d\u662f\u7956\u5148\u540e\u4ee3\u5173\u7cfb\uff0c\u4ea4\u96c6\u80af\u5b9a\u4e3a $0$\u3002\n\n   \u5047\u8bbe $l_A$ \u662f $l_B$ \u7684\u7956\u5148\u3002\u5219\u4ea4\u96c6\u4e3a\u4ee5 $l_B$ \u4e3a\u4e00\u7aef\u7684\u5411\u4e0b\u7684\u4e00\u6761\u94fe\u3002\n\n\t![62LMAbsKlgzwcSq.png (431\u00d7426) (loli.net)](https://i.loli.net/2020/04/17/62LMAbsKlgzwcSq.png)\n\n\t\u5728\u8fd9\u5f20\u56fe\u4e2d\uff0c\u4e24\u6761\u94fe\u4e3a $(\\texttt{E}, \\texttt{F}), (\\texttt{G}, \\texttt{H})$\u3002\u4ea4\u96c6\u4e3a\u7d2b\u8272\u8fb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u4ed6\u662f $l_B$ \u5411\u4e0b\u7684\u4e00\u6761\u94fe\u3002\n\n\t\u6211\u4eec\u5728 $l_B$ \u5904\uff0c\u5411 $s_B$ \u8d70 $k$ \u6b65\u5230\u8fbe\u70b9 $h1_B$\uff0c\u5411 $t_B$ \u8d70 $k$ \u6b65\u5230\u8fbe $h2_B$\uff0c\u5219 $A$ \u5fc5\u987b\u6ee1\u8db3\uff1a$l_A$ \u662f $l_B$ \u7684\u7956\u5148\uff0c\u4e14\u5b58\u5728\u94fe\u4e0a\u7684\u70b9\u5728 $h1_B$ \u7684\u5b50\u6811\u5185\u6216 $h2_B$ \u7684\u5b50\u6811\u5185\u3002\n\n\t\u6211\u4eec dfs \u6574\u68f5\u6811\uff0c\u5728 $h1_B$ \u548c $h2_B$ \u5904\u505a\u5b50\u6811\u52a0\uff0c\u4e4b\u540e\u5728 $s_A$ \u548c $t_A$ \u5904\u67e5\u8be2\u3002\n\n\t\u6709\u6ca1\u6709\u53ef\u80fd\u4e00\u5bf9\u94fe\u88ab\u8ba1\u7b97\u4e86\u4e24\u904d\u5462\uff1f\u4ed4\u7ec6\u60f3\u60f3\uff0c\u5982\u679c\u88ab\u8bb0\u4e86\u4e24\u904d\uff0c\u90a3\u53ef\u4ee5\u63a8\u51fa $l_A=l_B$\uff0c\u663e\u7136\u6211\u4eec\u5df2\u7ecf\u4fdd\u8bc1\u4e86\u8fd9\u4e0d\u5b58\u5728\u3002\n\n2. $l_A=l_B$\n\n\t![d9bnVfKIF3LoyGB.png (456\u00d7324) (loli.net)](https://i.loli.net/2020/04/17/d9bnVfKIF3LoyGB.png)\n\n\t\u5148\u4e0d\u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\u95ee\u9898\u3002\u6211\u4eec\u8003\u8651\u679a\u4e3e $l_A$\uff0c\u518d\u679a\u4e3e $L=\\mathrm{lca}(s_A, s_B)$\uff0c\u4ece $L$ \u5904\u5f00\u59cb\uff0c\u5728\u94fe\u4e0a\u5411 $t_A$ \u722c $k$ \u6b65\u5230 $p$\uff0c\u6b64\u65f6\u5408\u6cd5\u7684 $B$ \u90fd\u5728 $p$ \u7684\u5b50\u6811\u5185\u3002\n\n\t\u5728\u8fd9\u5f20\u56fe\u4e2d\uff0c\u4e24\u6761\u94fe\u4e3a $(\\texttt{B}, \\texttt{E}), (\\texttt{C}, \\texttt{F})$\uff0c$L$ \u5728 $\\texttt{A}$ \u70b9\uff0c\u5411 $\\texttt{E}$ \u70b9\u722c $k$ \u6b65\u540e\u722c\u5230\u4e86 $\\texttt{D}$\uff0c\u6b64\u65f6\u67e5\u8be2 $\\texttt{D}$ \u7684\u5b50\u6811\u6709\u591a\u5c11\u4e2a $t_B$\uff0c\u5e76\u4e14 $\\mathrm{lca}(s_A, s_B) = L$ \u5373\u53ef\u3002\n\n\t\u5982\u4f55\u67e5\u8be2\u4e00\u4e2a\u5b50\u6811\u5185\uff0c$t$ \u5728\u53e6\u4e00\u4e2a\u5b50\u6811\u5185\u7684\u94fe\u4e2a\u6570\uff1f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\t\u600e\u4e48\u722c $k$ \u6b65\uff1f\u500d\u589e\u5c31\u884c\u3002\n\n\t\u600e\u4e48\u679a\u4e3e\u4e24\u4e2a $\\texttt{lca}$\uff1f\u679a\u4e3e $l_A$\uff0c\u5bf9\u6240\u6709\u6ee1\u8db3\u7684\u94fe\u5efa\u865a\u6811\u3002\n\n\t\u600e\u4e48\u679a\u4e3e $A$\uff1f\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u679a\u4e3e\u5c0f\u7684\u90a3\u4e00\u5806\u5373\u53ef\u3002\n\n\t~~\u771f\u96be\u5199...~~\n\n3. $l_A=l_B$ \u7684\u7279\u6b8a\u60c5\u51b5\n\n\t\u5728\u4e0a\u4e00\u79cd\u60c5\u51b5\u4e2d\uff0c\u6211\u4eec\u9ed8\u8ba4\u4e86 $s_A, s_B$ \u5728 $l_A$ \u7684\u4e00\u8fb9\uff0c$t_A, t_B$ \u5728\u53e6\u4e00\u8fb9\u3002\n\n\t\u4f46\u662f\u8fd9\u6837\u4f1a\u6f0f\u6389\u4e00\u79cd\u60c5\u51b5\u3002\n\n\t![fMFSq7ialm8RDC5.png (314\u00d7334) (loli.net)](https://i.loli.net/2020/04/17/fMFSq7ialm8RDC5.png)\n\n\t\u5982\u679c $s_A, t_B$ \u5728\u4e00\u8fb9\uff0c$s_B, t_A$ \u5728\u4e00\u8fb9\uff1f\n\n\t\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4ea4\u96c6\u662f\u4ece $l_A$ \u5411\u4e0b\u7684\u4e00\u6761\u94fe\u3002\n\n\t\u6211\u4eec\u679a\u4e3e $l_A$\uff0c\u5411 $t_A$ \u722c $k$ \u6b65\uff0c\u518d\u5728 $s_B$ \u67e5\u8be2\u3002\n\n\t\u5728\u8fd9\u5f20\u56fe\u4e2d\uff0c$dfn_A < dfn_B < dfn_C$\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c$s_A=\\texttt{A},s_B=\\texttt{D}$\u3002\u6211\u4eec\u4ece $\\texttt{X}$ \u5411 $\\texttt{E}$ \u722c $k$ \u6b65\u5230 $\\texttt{B}$\uff0c\u7ed9 $\\texttt{B}$ \u505a\u5b50\u6811\u52a0\u3002\u518d\u5728 $\\texttt{D}$ \u5904\u67e5\u8be2\u3002\n\n\t\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u76f4\u63a5\u501f\u4e0a\u4e00\u79cd\u60c5\u51b5\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u4e00\u8d77\u6765\u505a\u5c31\u884c\u4e86\u3002\n\n\t\u4f1a\u4e0d\u4f1a\u548c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u91cd\u590d\u8ba1\u6570\uff1f\u663e\u7136\u4e0d\u4f1a\u3002\u722c\u8fc7\u6765\u540e\u80af\u5b9a\u8981\u4e48\u662f $s_B$\uff08\u7b2c\u4e09\u79cd\u60c5\u51b5\uff09\uff0c\u8981\u4e48\u662f $t_B$\uff08\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff09\uff0c\u603b\u4e0d\u53ef\u80fd\u4e24\u4e2a\u90fd\u5728\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O((m\\log m+n)\\log n)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n \nconst int Maxn = 300005;\nint n, m, k, ct, cnt, dfn_cnt, tree_ct, time_now, top, sum2[Maxn], siz[Maxn], node[Maxn], dep[Maxn], head[Maxn], sta[Maxn], dfn[Maxn], Time[Maxn], s[Maxn], t[Maxn], h1[Maxn], h2[Maxn], rt[Maxn], sum1[Maxn], vt_anc[Maxn][20], anc[Maxn][20];\nvector <int> Vt, E[Maxn], Ve[Maxn], V[Maxn];\nlong long ans;\nstruct edg\n{\n\tint nxt, to;\n} edge[2 * Maxn];\nvoid add(int x, int y)\n{\n\tedge[++cnt] = (edg){head[x], y};\n\thead[x] = cnt;\n}\nvoid dfs1(int u, int fa)\n{\n\tsiz[u] = 1;\n\tanc[u][0] = fa;\n\tdep[u] = dep[fa] + 1;\n\tdfn[u] = ++dfn_cnt;\n\tfor (int i = head[u]; i; i = edge[i].nxt)\n\t{\n\t\tint to = edge[i].to;\n\t\tif (to != fa) dfs1(to, u), siz[u] += siz[to];\n\t}\n}\nvoid init(void)\n{\n\tfor (int j = 1; (1 << j) <= n; j++)\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tanc[i][j] = anc[anc[i][j - 1]][j - 1];\n}\nint lca(int x, int y)\n{\n\tif (dep[x] < dep[y]) swap(x, y);\n\tfor (int i = 19; i >= 0; i--)\n\t\tif ((dep[x] - dep[y]) & (1 << i)) x = anc[x][i];\n\tif (x == y) return x;\n\tfor (int i = 19; i >= 0; i--)\n\t\tif (anc[x][i] != anc[y][i]) x = anc[x][i], y = anc[y][i];\n\treturn anc[x][0];\n}\nint get_dis(int x, int y)\n{\n\treturn dep[x] + dep[y] - 2 * dep[lca(x, y)];\n}\nstruct Tree\n{\n\tint lson, rson, cnt;\n} tree[60 * Maxn];\nvoid insert(int root, int lt, int rt, int pos)\n{\n\tif (lt + 1 == rt)\n\t\ttree[root].cnt++;\n\telse\n\t{\n\t\tint mid = (lt + rt) >> 1;\n\t\tif (pos >= mid)\n\t\t{\n\t\t\tif (!tree[root].rson)\n\t\t\t{\n\t\t\t\ttree[root].rson = ++tree_ct;\n\t\t\t\ttree[tree[root].rson] = (Tree){0, 0, 0};\n\t\t\t}\n\t\t\tinsert(tree[root].rson, mid, rt, pos);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!tree[root].lson)\n\t\t\t{\n\t\t\t\ttree[root].lson = ++tree_ct;\n\t\t\t\ttree[tree[root].lson] = (Tree){0, 0, 0};\n\t\t\t}\n\t\t\tinsert(tree[root].lson, lt, mid, pos);\n\t\t}\n\t\ttree[root].cnt = tree[tree[root].lson].cnt + tree[tree[root].rson].cnt;\n\t}\n}\nint merge(int root1, int root2)\n{\n\tif (!root1 || !root2) return root1 + root2;\n\tint new_node = ++tree_ct;\n\ttree[new_node] = (Tree){merge(tree[root1].lson, tree[root2].lson), merge(tree[root1].rson, tree[root2].rson)};\n\ttree[new_node].cnt = tree[root1].cnt + tree[root2].cnt;\n\treturn new_node;\n}\nint ask(int root, int L, int R, int lt, int rt)\n{\n\tif (!root) return 0;\n\tif (L == lt && R == rt) return tree[root].cnt;\n\telse\n\t{\n\t\tint mid = (L + R) >> 1;\n\t\tif (lt >= mid) return ask(tree[root].rson, mid, R, lt, rt);\n\t\telse if (rt <= mid) return ask(tree[root].lson, L, mid, lt, rt);\n\t\telse return ask(tree[root].lson, L, mid, lt, mid) + ask(tree[root].rson, mid, R, mid, rt);\n\t}\n}\nvoid vt_build(int u)\n{\n\ttime_now++;\n\ttree_ct = ct = 0;\n\tfor (vector <int> :: iterator it = Ve[u].begin(); it != Ve[u].end(); it++)\n\t\tnode[++ct] = s[*it], node[++ct] = t[*it];\n\tsort(node + 1, node + 1 + ct, [](int x, int y){return dfn[x] < dfn[y];});\n\tct = unique(node + 1, node + 1 + ct) - node - 1;\n\ttop = 0;\n\tif (node[1] != u) E[u].clear(), rt[u] = ++tree_ct, tree[rt[u]] = (Tree){0, 0, 0}, V[u].clear(), Time[u] = time_now, sta[++top] = u;\n\tfor (int i = 1; i <= ct; i++)\n\t\tE[node[i]].clear(), rt[node[i]] = ++tree_ct, tree[rt[node[i]]] = (Tree){0, 0, 0}, V[node[i]].clear(), Time[node[i]] = time_now;\n\tfor (int i = 1; i <= ct; i++)\n\t{\n\t\tif (!top)\n\t\t{\n\t\t\tsta[++top] = node[i];\n\t\t\tcontinue;\n\t\t}\n\t\tint l = lca(sta[top], node[i]);\n\t\tif (Time[l] != time_now) Time[l] = time_now, rt[l] = ++tree_ct, tree[rt[l]] = (Tree){0, 0, 0}, V[l].clear(), E[l].clear();\n\t\twhile (top > 1 && dep[sta[top - 1]] > dep[l]) E[sta[top - 1]].push_back(sta[top]), top--;\n\t\tif (dep[l] < dep[sta[top]]) E[l].push_back(sta[top]), top--;\n\t\tif (!top || sta[top] != l) sta[++top] = l;\n\t\tsta[++top] = node[i];\n\t}\n\twhile (top > 1) E[sta[top - 1]].push_back(sta[top]), top--;\n\tfor (vector <int> :: iterator it = Ve[u].begin(); it != Ve[u].end(); it++)\n\t\tinsert(rt[s[*it]], 1, n + 1, dfn[t[*it]]), V[s[*it]].push_back(*it);\n}\nvoid vt_dfs1(int u)\n{\n\tVt.push_back(u);\n\tfor (vector <int> :: iterator it = E[u].begin(); it != E[u].end(); it++)\n\t{\n\t\tvt_anc[*it][0] = u;\n\t\tvt_dfs1(*it);\n\t}\n}\nvoid vt_init(void)\n{\n\tfor (int j = 1; (1 << j) <= n; j++)\n\t\tfor (vector <int> :: iterator it = Vt.begin(); it != Vt.end(); it++)\n\t\t\tvt_anc[*it][j] = vt_anc[vt_anc[*it][j - 1]][j - 1];\n}\nint jump1(int u, int dis)\n{\n\tif (dis < 0) return 0;\n\tint v = u;\n\tfor (int i = 19; i >= 0; i--)\n\t\tif (dep[u] - dep[vt_anc[v][i]] <= dis && vt_anc[v][i]) v = vt_anc[v][i];\n\treturn v;\n}\nint jump2(int u, int dis)\n{\n\tif (dis < 0) return 0;\n\tint v = u;\n\tfor (int i = 19; i >= 0; i--)\n\t\tif (dep[u] - dep[anc[v][i]] <= dis && anc[v][i]) v = anc[v][i];\n\treturn v;\n}\nvoid cal1(int l, int u, int v)\n{\n\tfor (vector <int> :: iterator it = V[v].begin(); it != V[v].end(); it++)\n\t{\n\t\tint now = jump1(t[*it], get_dis(l, t[*it]) - k);\n\t\tif (now)\n\t\t\tans += ask(rt[u], 1, n + 1, dfn[now], dfn[now] + siz[now]);\n\t}\n}\nvoid cal2(int u)\n{\n\tlong long tmp_ans = 0;\n\tfor (vector <int> :: iterator it = V[u].begin(); it != V[u].end(); it++)\n\t{\n\t\tint now = jump1(t[*it], get_dis(u, t[*it]) - k);\n\t\tif (now)\n\t\t\ttmp_ans += ask(rt[u], 1, n + 1, dfn[now], dfn[now] + siz[now]) - 1;\n\t}\n\tans += tmp_ans / 2;\n}\nvoid vt_dfs2(int u)\n{\n\tcal2(u);\n\tfor (vector <int> :: iterator it1 = E[u].begin(); it1 != E[u].end(); it1++)\n\t{\n\t\tvt_dfs2(*it1);\n\t\tif (V[u].size() > V[*it1].size()) cal1(u, u, *it1);\n\t\telse cal1(u, *it1, u), V[u].swap(V[*it1]);\n\t\tfor (vector <int> :: iterator it2 = V[*it1].begin(); it2 != V[*it1].end(); it2++)\n\t\t\tV[u].push_back(*it2);\n\t\trt[u] = merge(rt[u], rt[*it1]);\n\t}\n}\nvoid work1(int u)\n{\n\tvt_build(u);\n\tVt.clear();\n\tvt_dfs1(u);\n\tvt_init();\n\tvt_dfs2(u);\n}\nint lowbit(int x)\n{\n\treturn x & -x;\n}\nvoid bit_add1(int x, int y)\n{\n\tif (!x) return ;\n\tfor (int i = x; i <= n; i += lowbit(i))\n\t\tsum1[i] += y;\n}\nint bit_ask1(int x)\n{\n\tint tmp = 0;\n\tfor (int i = x; i; i -= lowbit(i))\n\t\ttmp += sum1[i];\n\treturn tmp;\n}\nvoid bit_add2(int x, int y)\n{\n\tif (!x) return ;\n\tfor (int i = x; i <= n; i += lowbit(i))\n\t\tsum2[i] += y;\n}\nint bit_ask2(int x)\n{\n\tint tmp = 0;\n\tfor (int i = x; i; i -= lowbit(i))\n\t\ttmp += sum2[i];\n\treturn tmp;\n}\nvoid work2(int u)\n{\n\tfor (vector <int> :: iterator it = Ve[u].begin(); it != Ve[u].end(); it++)\n\t{\n\t\tans += bit_ask2(dfn[s[*it]]);\n\t\tint now = jump2(t[*it], get_dis(t[*it], u) - k);\n\t\tif (now)\n\t\t\tbit_add2(dfn[now], 1), bit_add2(dfn[now] + siz[now], -1);\n\t}\n\tfor (vector <int> :: iterator it = Ve[u].begin(); it != Ve[u].end(); it++)\n\t{\n\t\tint now = jump2(t[*it], get_dis(t[*it], u) - k);\n\t\tif (now)\n\t\t\tbit_add2(dfn[now], -1), bit_add2(dfn[now] + siz[now], 1);\n\t}\n}\nvoid dfs2(int u, int fa)\n{\n\tfor (int i = head[u]; i; i = edge[i].nxt)\n\t{\n\t\tint to = edge[i].to;\n\t\tif (to != fa)\n\t\t\tdfs2(to, u);\n\t}\n\tfor (vector <int> :: iterator it = Ve[u].begin(); it != Ve[u].end(); it++)\n\t\tans += bit_ask1(dfn[s[*it]]), ans += bit_ask1(dfn[t[*it]]);\n\tfor (vector <int> :: iterator it = Ve[u].begin(); it != Ve[u].end(); it++)\n\t{\n\t\tbit_add1(dfn[h1[*it]], 1), bit_add1(dfn[h1[*it]] + siz[h1[*it]], -1);\n\t\tbit_add1(dfn[h2[*it]], 1), bit_add1(dfn[h2[*it]] + siz[h2[*it]], -1);\n\t}\n\twork1(u);\n\twork2(u);\n}\nint main()\n{\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tadd(x, y), add(y, x);\n\t}\n\tdfs1(1, 0);\n\tinit();\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tscanf(\"%d%d\", &s[i], &t[i]);\n\t\tif (dfn[s[i]] > dfn[t[i]]) swap(s[i], t[i]);\n\t\tif (get_dis(s[i], t[i]) < k) m--, i--;\n\t}\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tint l = lca(s[i], t[i]);\n\t\tVe[l].push_back(i);\n\t\th1[i] = s[i], h2[i] = t[i];\n\t\tfor (int j = 19; j >= 0; j--)\n\t\t\tif (((dep[s[i]] - dep[l]) - k) & (1 << j)) h1[i] = anc[h1[i]][j];\n\t\tfor (int j = 19; j >= 0; j--)\n\t\t\tif (((dep[t[i]] - dep[l]) - k) & (1 << j)) h2[i] = anc[h2[i]][j];\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tsort(Ve[i].begin(), Ve[i].end(), [](int x, int y){return dfn[s[x]] < dfn[s[y]];});\n\tdfs2(1, 0);\n\tprintf(\"%lld\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1601690728,
        "uid": 49093,
        "name": "_sys",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1336F \u3010Journey\u3011"
    }
]