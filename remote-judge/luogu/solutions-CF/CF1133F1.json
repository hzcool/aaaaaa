[
    {
        "content": "\u56e0\u4e3a\u56fe\u4e2d\u6ca1\u6709\u81ea\u73af\u6216\u91cd\u8fb9\uff0c\u6240\u4ee5\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u5ea6\u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u80af\u5b9a\u4f1a\u628a\u4e0e\u5b83\u76f8\u5173\u7684\u8fb9\u5168\u90e8\u9009\u4e0a\u3002\n\n\u6240\u4ee5\u76f4\u63a5\u679a\u4e3e\u3002\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,f[200001],l[200001],r[200001],an,ans;\nint zbb(int x){\n\tif(f[x]==x)\n\t\treturn x;\n\tf[x]=zbb(f[x]);\n\treturn f[x];\n}\nvector<int>a[200001];\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d %d\",&l[i],&r[i]);\n\t\ta[l[i]].push_back(r[i]);\n\t\ta[r[i]].push_back(l[i]);\n\t}\n\tan=a[1].size();\n\tans=1;\n\tfor(int i=2;i<=n;i++){\n\t\tf[i]=i;\n\t\tif(a[i].size()>an){\n\t\t\tan=a[i].size();\n\t\t\tans=i;\n\t\t}\n\t}\n\tfor(int i=0;i<a[ans].size();i++){\n\t\tf[zbb(a[ans][i])]=zbb(ans);\n\t\tprintf(\"%d %d\\n\",a[ans][i],ans);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t\tif(l[i]!=ans&&r[i]!=ans&&zbb(r[i])!=zbb(l[i])){\n\t\t\tprintf(\"%d %d\\n\",l[i],r[i]);\n\t\t\tf[zbb(l[i])]=zbb(r[i]);\n\t\t}\n    return 0;\n}\n```\n",
        "postTime": 1683127761,
        "uid": 662992,
        "name": "zzbbq",
        "ccfLevel": 0,
        "title": "CF1133F1 Spanning Tree with Maximum Degree \u9898\u89e3"
    },
    {
        "content": "\u5f88\u6c34\u7684\u4e00\u9053\u9898\uff0c\u53ea\u8981\u8bfb\u6e05\u9898\u610f\u5c31\u5f88\u7b80\u5355\n\n\u9898\u76ee\u8981\u6c42\u7684\u662f\u5ea6\u6570\u6700\u5927\u503c\u6700\u5927\u7684\u751f\u6210\u6811\uff0c\u5e76\u4e0d\u662f\u5ea6\u6570\u4e4b\u548c\u8981\u6700\u5927\uff0c\u90a3\u4e48\u663e\u800c\u6613\u89c1\uff0c\u5728\u539f\u56fe\u4e2d\u5ea6\u6570\u6700\u5927\u7684\u70b9\uff0c\u5728\u6240\u6709\u7684\u751f\u6210\u6811\u4e2d\u4e5f\u4e00\u5b9a\u662f\u6700\u5927\u7684\uff0c\u56e0\u4e3a\u4e00\u5f20\u56fe\u7684\u751f\u6210\u6811\u662f\u5b83\u7684\u5b50\u96c6\uff0c\u6240\u4ee5\u751f\u6210\u6811\u4e2d\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u539f\u56fe\u4e2d\u5bf9\u5e94\u70b9\u7684\u5ea6\u6570\u3002\u90a3\u4e48\u53ea\u8981\u5c06\u539f\u56fe\u4e2d\u5ea6\u6570\u6700\u5927\u70b9\u7684\u6240\u6709\u90bb\u8fb9\u90fd\u52a0\u5165\u751f\u6210\u6811\u4e2d(\u56e0\u4e3a\u4fdd\u8bc1\u6ca1\u6709\u81ea\u73af\u6216\u91cd\u8fb9)\uff0c\u5269\u4e0b\u7684\u8fb9\u4efb\u9009\u5c31\u53ef\u4ee5\u4e86\uff0c\u5982\u679c\u6709\u591a\u4e2a\u70b9\u7684\u5ea6\u6570\u90fd\u6700\u5927\uff0c\u90a3\u4e48\u4efb\u9009\u4e00\u4e2a\u5373\u53ef\u3002\n\n**\u4e0b\u9762\u63d0\u4f9b\u4e24\u79cd\u65b9\u6cd5\uff1a**\n\n**\u6cd5\u4e00\uff1a**\u50cf**Kruskal**\u4e00\u6837\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u4e00\u68f5\u6811\u4e2d\uff0c\u6309\u4e0a\u9762\u7684\u6b65\u9aa4\u52a0\u8fb9\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u4e24\u4e2a\u7aef\u70b9\u5df2\u7ecf\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u4e86\uff0c\u90a3\u5c31\u4e0d\u7528\u52a0\u4e86\u3002\n\n\u4ee3\u7801$\\downarrow$\n\n```c++\n#include<stdio.h>\n\nconst int MAXN = 400000 + 121;\nint v[MAXN], u[MAXN], dgree[MAXN], fa[MAXN], cnt, maxn, maxd, fau, fav;\n\ninline int read()\n{\n    int x=0; char c=getchar();\n    while(c<'0' || c>'9') c=getchar();\n    while (c>='0' && c<='9') {x=x*10+c-'0'; c=getchar();}\n    return x;\n}\nint find(int x)\n{\n    if(fa[x] == x) return x;\n    return fa[x] = find(fa[x]);\n}\ninline void add_into_gragh(int x, int y)//\u8bfb\u5165\u7684\u65f6\u5019\u5efa\u56fe\u52a0\u8fb9\u7528\u7684\n{\n    u[++cnt] = x;\n    v[cnt] = y;\n    ++dgree[x];\n    ++dgree[y];\n    if(dgree[x] > maxd) {maxd = dgree[x]; maxn = x;}//\u987a\u4fbf\u627e\u4e00\u4e0b\u5ea6\u6570\u6700\u5927\u7684\u70b9\n    if(dgree[y] > maxd) {maxd = dgree[y]; maxn = y;}\n}\ninline void add_into_tree(int x)//\u5c1d\u8bd5\u628a\u67d0\u6761\u8fb9\u52a0\u5165\u751f\u6210\u6811\n{\n    fau = find(u[x]), fav = find(v[x]);\n    if(fau == fav) return;//\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u4e24\u4e2a\u7aef\u70b9\u5df2\u7ecf\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u4e86\uff0c\u90a3\u5c31\u4e0d\u7528\u52a0\u4e86\n    printf(\"%d %d\\n\", u[x], v[x]);\n    fa[find(fau)] = fav;\n}\nint main()\n{\n    int n, m;\n    n = read(); m = read();\n    for(int i = 1; i <= n; ++i) fa[i] = i;\n    for(int i = 1; i <= m; ++i) add_into_gragh(read(), read());\n    for(int i = 1; i <= m; ++i) if(u[i] == maxn || v[i] == maxn) add_into_tree(i);//\u5148\u52a0\u5ea6\u6570\u6700\u5927\u70b9\u7684\u90bb\u8fb9\n    for(int i = 1; i <= m; ++i) add_into_tree(i);\n    return 0;\n}\n```\n\n**\u6cd5\u4e8c\uff1a**\u4ee5\u5ea6\u6570\u6700\u5927\u70b9\u4e3a\u8d77\u70b9BFS\u4e00\u4e0b\uff0cBFS\u6811\u5c31\u662f\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684\u751f\u6210\u6811\uff0c\u8fd9\u4e2a\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u6211\u5c31\u4e0d\u8d34\u4e86\u3002",
        "postTime": 1566116671,
        "uid": 56501,
        "name": "\u26a1current\u26a1",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF1133F1 \u3010Spanning Tree with Maximum Degree\u3011"
    }
]