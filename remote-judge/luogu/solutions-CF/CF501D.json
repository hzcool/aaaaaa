[
    {
        "content": "[\u5b89\u5229\u4e00\u4e0b\u6211\u7684\u535a\u5ba2](https://karry5307.github.io/)\n### \u9898\u610f\n\u8bbe$P$\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u6392\u5217\uff0c\u5b9a\u4e49$\\operatorname{ord}P$\u4e3a$P$\u5728\u6240\u6709\u6392\u5217\u4e2d\u7684\u540d\u6b21\u3002\n\n\u7ed9\u5b9a\u4e24\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u6392\u5217$P_1,P_2$\uff0c\u6c42\u7b2c$\\operatorname{ord}P_1+\\operatorname{ord}P_2 \\bmod n!$\u5c0f\u7684\u6392\u5217\u3002\n### \u524d\u7f6e\u6280\u80fd\n[\u5eb7\u6258\u5c55\u5f00](https://karry5307.github.io/2018/11/18/%E3%80%8CUVa-11525%E3%80%8DPermutation/)\n\n\u8fd9\u91cc\u8bb2\u4ece\u6392\u5217\u6620\u5c04\u5230\u6570\u7684\u8fc7\u7a0b\uff0c\u8fd8\u662f\u5047\u8bbe\u8fd9\u4e2a\u6392\u5217\u957f\u5ea6\u4e3a$n$\u3002\n\n\u5bf9\u4e8e\u7b2c$i$\u6b21\u64cd\u4f5c\uff0c\u7edf\u8ba1\u8fd9\u4e2a\u6570\u540e\u9762\u6709\u591a\u5c11\u4e2a\u6bd4\u5b83\u5c0f\u7684\u6570\uff0c\u8bb0\u4e3a$a_i$\n\n\u90a3\u4e48\u7b54\u6848\u662f$\\sum_{i=1}^{n}a_i(n-i)!$\n### \u9898\u89e3\n\u8fd9\u4e00\u4e2a\u9898\u548c[UVa 11525](https://www.luogu.org/problemnew/show/UVA11525)\u5f88\u50cf\uff0c\u4e0d\u4f1a\u505a\u7684\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b[\u672c\u849f\u84bb\u7684\u9898\u89e3](https://karry5307.github.io/2018/11/18/%E3%80%8CUVa-11525%E3%80%8DPermutation/)\uff0c\u505a\u6cd5\u5c31\u662f\u7528\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5168\u5c40\u6ca1\u88ab\u653e\u8fdb\u6392\u5217\u4e2d\u7684\u7b2c$k$\u5c0f\uff0c\u6240\u4ee5\u505a\u8fd9\u4e2a\u9898\u53ef\u4ee5\u5148\u628a\u5b83\u8f6c\u5316\u4e3a\u4e0a\u9762\u90a3\u4e2a\u9898\u3002\n\n\u9996\u5148\u628a\u4e24\u4e2a\u6392\u5217\u6620\u5c04\u5230\u6574\u6570\uff0c\u8fd9\u91cc\u8981\u7edf\u8ba1\u540e\u9762\u6709\u591a\u5c11\u4e2a\u6bd4\u7b2c$i$\u4e2a\u6570$a_i$\u5c0f\u7684\u6570\u3002\u5982\u679c\u66b4\u529b\u627e\u7684\u8bdd\u662f$O(n^2)$\u7684\u3002\u4f46\u662f\uff0c\u53ef\u4ee5\u53d1\u73b0\u6392\u5217\u662f\u7531$0,1\\cdots n-1$\u7ec4\u6210\u7684\uff0c\u90a3\u4e48**\u6392\u5217\u91cc\u6bd4\u8fd9\u4e2a\u6570\u5c0f\u7684\u6570\u7684\u4e2a\u6570\u5c31\u662f\u8fd9\u4e2a\u6570**\u3002\n\n\u8fd9\u53e5\u8bdd\u4e0d\u662f\u5f88\u597d\u61c2\uff0c\u4f46\u662f\u5f88\u91cd\u8981\u3002\u56e0\u4e3a\u6392\u5217\u91cc\u6bd4\u8fd9\u4e2a\u6570$x$\u5c0f\u7684\u53ea\u6709$0,1\\cdots x-1$\uff0c\u5171\u6709$x$\u4e2a\uff0c\u6240\u4ee5\u6709$x$\u4e2a\u6570\u6bd4$x$\u5c0f\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u663e\u7136\u63a8\u51fa\u540e\u9762\u6bd4$a_i$\u5c0f\u7684\u6570\u7684\u4e2a$=$\u603b\u5171\u6bd4$a_i$\u5c0f\u7684\u6570$-$\u5728$a_i$\u524d\u9762\u6bd4$a_i$\u5c0f\u7684\u6570\u3002\u800c\u6392\u5728\u524d\u9762\u6bd4$a_i$\u5c0f\u7684\u6570\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7b2c$i$\u4e2a\u6570\u662f\u5426\u51fa\u73b0\u8fc7\u3002\u5bf9\u4e8e\u5f53\u524d\u7684\u6570\uff0c\u7edf\u8ba1$1$\u5230\u5f53\u524d\u6570$-1$\u4e2d\u7684\u548c\uff0c\u5c31\u662f\u5728\u8fd9\u4e2a\u6570\u524d\u9762\u6bd4\u5b83\u5c0f\u7684\u6570\u3002\n\n\u6240\u4ee5\u8bf4\uff0c\u53ef\u4ee5\u7528$O(n\\log n)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u628a$a_{P_1,i}$\u548c$a_{P_2,i}$\uff08$a$\u6307\u7684\u662f\u524d\u7f6e\u6280\u80fd\u91cc\u7684$a$\u6570\u7ec4\uff09\u6c42\u51fa\u6765\uff0c\u8bb0$S_i=a_{P_1,i}+a_{P_2,i}$\u3002\n\n\u63a5\u4e0b\u6765\u5316\u7b80$S$\uff0c\u7531\u4e8e$(x+1)\\cdot x!=(x+1)!$\uff0c\u4e8e\u662f\u53ef\u4ee5\u7528\u8fd9\u4e2a\u6027\u8d28\u5316\u7b80$S_i$\uff0c\u4f7f\u5f97$0\\leq S_i\\leq n-i$\u3002\n\n\u5177\u4f53\u65b9\u6cd5\u662f\uff0c\u5bf9\u4e8e$S_i$\uff0c$S_{i+1}+=S_i \\% n-i,S_i\\%=n-i$\u5c31\u53ef\u4ee5\u7b80\u5316$S$\u6570\u7ec4\u4e86\u3002\n\n\u6700\u540e\u6211\u4eec\u5c31\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e0a\u9762\u7684\u90a3\u4e2a\u9898\u4e86\uff0c\u7528\u90a3\u4e2a\u9898\u7684\u65b9\u6cd5\u505a\u5c31\u53ef\u4ee5\u4e86qwq\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log n)$\uff0c\u5e38\u6570\u4e0d\u5927~~\u9664\u4e86\u6743\u503c\u7ebf\u6bb5\u6811~~\uff0c\u8dd1\u4e86$2270$ms\uff0c\u62ff\u4e86\u6700\u4f18\u89e3qwq\u3002\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef int ll;\nconst ll MAXN=2e5+51;\nstruct BIT{\n\tll size;\n\tll num[MAXN];\n\tinline ll lowbit(ll x)\n\t{\n\t\treturn x&-x;\n\t}\n\tinline void add(ll pos,ll val)\n\t{\n\t\tfor(;pos<=size;pos+=lowbit(pos))\n\t\t{\n\t\t\tnum[pos]+=val;\n\t\t}\n\t}\n\tinline ll queryPrefix(ll pos)\n\t{\n\t\tll res=0;\n\t\tfor(;pos;pos-=lowbit(pos))\n\t\t{\n\t\t\tres+=num[pos];\n\t\t}\n\t\treturn res;\n\t}\n};\nstruct SegmentTree{\n\tll l,r,size;\n};\nBIT bit,bit2;\nSegmentTree tree[MAXN<<2];\nll cnt,num;\nll perm[MAXN];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline void update(ll node)\n{\n\ttree[node].size=tree[node<<1].size+tree[(node<<1)|1].size;\n}\ninline void create(ll l,ll r,ll node)\n{\n\ttree[node].l=l,tree[node].r=r;\n\tif(l==r)\n\t{\n\t\ttree[node].size=1;\n\t\treturn;\n\t}\n\tll mid=(l+r)>>1;\n\tcreate(l,mid,node<<1);\n\tcreate(mid+1,r,(node<<1)|1);\n\tupdate(node);\n}\ninline ll findVal(ll rk,ll node)\n{\n\tif(tree[node].l==tree[node].r)\n\t{\n\t\ttree[node].size=0;\n\t\treturn tree[node].l;\t\n\t}\t\n\tll res=0;\n\tif(rk<=tree[node<<1].size)\n\t{\n\t\tres=findVal(rk,node<<1);\n\t}\n\telse\n\t{\n\t\tres=findVal(rk-tree[node<<1].size,(node<<1)|1);\n\t} \n\tupdate(node);\n\treturn res;\n}\nint main()\n{\n\tbit.size=bit2.size=cnt=read();\n\tfor(register int i=1;i<=cnt;i++)\n\t{\n\t\tnum=read();\n\t\tperm[i]=num-bit.queryPrefix(num),bit.add(num+1,1);\n\t}\n\tfor(register int i=1;i<=cnt;i++)\n\t{\n\t\tnum=read();\n\t\tperm[i]+=num-bit2.queryPrefix(num),bit2.add(num+1,1);\n\t}\n\tfor(register int i=cnt,j=0;i;i--,j++)\n\t{\n\t\tperm[i-1]+=perm[i]/(j+1),perm[i]%=(j+1);\n\t}\n\tcreate(1,cnt,1);\n\tfor(register int i=1;i<=cnt;i++)\n\t{\n\t\tprintf(\"%d \",findVal(perm[i]+1,1)-1);\n\t} \n} \n```",
        "postTime": 1542543020,
        "uid": 60990,
        "name": "Karry5307",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF501D \u3010Misha and Permutations Summation\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u88f8\u7684\u5eb7\u6258\u5c55\u5f00\n\u4e00\u79cd\u5f88\u5bb9\u6613\u7684\u60f3\u6cd5\u662f\u76f4\u63a5\u628aa\u548cb\u6c42\u51fa\u6765\uff0c\u7136\u540e\u8ba1\u7b97(a+b)modn!\u7684\u503c\u5e76\u76f4\u63a5\u6c42\u5bf9\u5e94\u7684\u6392\u5217\uff0c\u4f46\u662f\u7531\u4e8en\u7684\u8303\u56f4(n\u2264200000)\n\n\u76f4\u63a5\u6c42\u503c\u663e\u7136\u4e0d\u53ef\u884c\u3002\n\n\u56e0\u6b64\uff0c\u8003\u8651\u5168\u6392\u5217\u7684\u5eb7\u6258\u5c55\u5f00(Cantor expansion) \u4efb\u610f\u4e00\u79cd\u6392\u5217\u5728\u5168\u6392\u5217\u4e2d\u5bf9\u5e94\u7684\u5e8f\u53f7\u4e3a\n\n\u2211i=1nai\u00d7i!\n\n\u4e8e\u662f\uff0c\u5c06\u8f93\u5165\u7684\u4e24\u4e2a\u6392\u5217\u5206\u522b\u5199\u6210\u8fd9\u79cd\u5f62\u5f0f\uff0c\u7136\u540e\u904d\u5386n\u76f8\u52a0\uff0c\u7531\u4e8e\u7ed3\u679c\u9700\u8981\u5bf9n!\u53d6\u6a21\uff0c\u56e0\u6b64\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\u9010\u9879\u5c06ai\u52a0\u5230ai+1\u4e0a\u53bb\uff0c\u6700\u540e\u5c06\u6700\u9ad8\u4f4d\u7684an\u6a21\u6389n\u5373\u53ef\u3002\u4e4b\u540e\uff0c\u53ea\u8981\u62df\u7528\u5eb7\u6258\u5c55\u5f00\u5373\u53ef\u6c42\u51fa\u5bf9\u5e94\u7684\u6392\u5217\u3002\n\n\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u9700\u8981\u7ef4\u62a4\"\u5f53\u524d\u8fd8\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\u7b2ck\u5927\u7684\u6570\"\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4BIT\u7ef4\u62a4\u3002\u6062\u590d\u6392\u5217\u65f6\u7528\u6811\u72b6\u6570\u7ec4\uff0b\u4e8c\u5206\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6O(n(logn)^2)\n```cpp\n#include<cstdio>\n#include<cstring>\n#define read(num) scanf(\"%d\",&num)\nusing namespace std;\nconst int Maxn = 200000+10;\nint n,a[Maxn],b[Maxn],f[Maxn];\n\n{\nint c[Maxn];\n#define lowbit(x) (x & -x)\nvoid upd(int x,int val){\n\tfor(int i = x; i <= n; i += lowbit(i))c[i] += val;\n}\nint sum(int x){\n\tint ret = 0;\n\tfor(int i = x;i;i -= lowbit(i))ret += c[i];\n\treturn ret;\n}\nvoid init(){\n\tmemset(c,0,sizeof(c));\n\tfor(int i = 1;i <= n;i++)upd(i,1);\n}\n}\n\nint main()\n{\n\tread(n);\n\tfor(int i = 1;i <= n;i++){read(a[i]);a[i] ++;}\n\tfor(int i = 1;i <= n;i++){read(b[i]);b[i] ++;}\n\tinit();\n\tfor(int i = 1;i < n;i++){\n\t\tint les = sum(a[i] - 1);\n\t\tf[n - i] += les;\n\t\tupd(a[i],-1); \n\t}\n\tinit();\n\tfor(int i = 1;i < n;i++){\n\t\tint les = sum(b[i] - 1);\n\t\tf[n - i] += les;\n\t\tupd(b[i],-1); \n\t}\n\tfor(int i = 1;i < n;i++){\n\t\tf[i+1] += f[i] / (i+1);\n\t\tf[i] = f[i] % (i+1);\n\t}\n\tinit();\n\tint sml = 1;\n\tfor(int i = n-1; i >= 1;i--){\n\t\tint l = 1,r = n,mid,tmp,ans = -1;\n\t\twhile( l <= r){\n\t\t\tmid = (l + r) >> 1;\n\t\t\ttmp = sum(mid - 1);\n\t\t\tif(tmp <= f[i]){\n\t\t\t\tl = mid + 1;\n\t\t\t\tans = mid;\n\t\t\t}\n\t\t\telse r = mid -1;\n\t\t}\n\t\tif(ans == -1)ans = sml;\n\t\tprintf(\"%d \", ans - 1);\n\t\tupd(ans,-1);\n\t\twhile(!c[sml])sml ++;\n\t}\n\tfor(int i=1; i<=n; i++)    \n        if(c[i]){\n            printf(\"%d\\n\", i-1);  \n            break;  \n        } \n    return 0;  \n}\n```",
        "postTime": 1524108535,
        "uid": 12066,
        "name": "star_eternal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF501D \u3010Misha and Permutations Summation\u3011"
    },
    {
        "content": "# \u5982\u4f55\u5408\u5e76\u6570\u7ec4\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5eb7\u6258\u5c55\u5f00\u7684\u601d\u60f3\uff0c\u5eb7\u6258\u5c55\u5f00\u662f\u8fd9\u6837\u7684\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u5b83\u7684\u5b57\u5178\u5e8f\u6392\u540d\u4e3a\uff1a\n\n$$\nsum=\\sum_{i=1}^nS(i)\\times (n-i)!\n$$\n\n\u5176\u4e2d $S(i)$ \u8868\u793a\u7b2c $i$ \u9879\u540e\u9762\u6709\u591a\u5c11\u9879\u6bd4\u5b83\u5c0f\u3002\n\n\u90a3\u4e48\u6839\u636e\u8fd9\u4e2a\u5f0f\u5b50\uff0c\u6211\u4eec\u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\u5c31\u7b80\u5355\u591a\u4e86\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u51fa\u4e24\u4e2a\u6570\u7ec4\u7684 $S(i)$ \u76f8\u52a0\u5373\u53ef\u3002\n\n# \u5982\u4f55\u5904\u7406\u6a21\u6570\n\n\u5b57\u7b26\u4e32\u7684\u6392\u540d\u9700\u8981 $\\bmod n!$\uff0c\u8fd9\u4e2a\u771f\u7684\u6c42\u51fa\u6765\u663e\u7136\u4e0d\u73b0\u5b9e\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u4e24\u70b9\uff1a\n\n- $n!$ \u6070\u597d\u662f\u6240\u6709\u6392\u5217\u7684\u65b9\u6848\u6570\u3002 \n- \u4efb\u610f $S(i)$ \u4e0d\u53ef\u80fd\u5927\u4e8e $n-i+1$\u3002\n\n\u65e2\u7136 $n!$ \u662f\u603b\u65b9\u6848\u6570\uff0c\u90a3\u4e48\u5927\u4e8e $n!$ \u7684\u6392\u540d\u4e00\u5b9a\u4e0d\u5408\u6cd5\uff0c\u6211\u4eec\u8003\u8651\u8fdb\u4f4d\u3002\n\n\u8fd9\u91cc\u8fdb\u4f4d\u4e0d\u591a\u8d58\u8ff0\u4e86\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u3002\n\n\u6700\u540e\uff0c\u6240\u6709\u6570\u5b57\u6c47\u805a\u5728 $S(1)$\uff0c\u7531\u4e8e $S(1)$ \u7684\u7cfb\u6570\u4e3a $(n-1)!$\uff0c\u56e0\u6b64\u6211\u4eec\u76f4\u63a5 $S(1)\\gets S(1)\\bmod n$ \u5373\u53ef\u3002\n\n# \u5982\u4f55\u8f6c\u6362\u4e3a\u6570\u7ec4\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4ece\u524d\u5f80\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u5b57\uff0c\u5b83\u5728\u5269\u4e0b\u6570\u5b57\u4e2d\u7684\u6392\u540d\u5c31\u662f\u540e\u9762\u6bd4\u5b83\u5c0f\u7684\u6570\u5b57\u7684\u6570\u91cf\u52a0\u4e0a $1$\u3002\n\n\u90a3\u4e48\u5bf9\u5e94\u7684\uff0c\u5269\u4e0b\u7684\u6570\u5b57\u4e2d\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5bf9\u5e94\u6392\u540d\u7684\u6570\u5b57\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6570\u5b57\uff0c\u6211\u4eec\u5220\u9664\u8fd9\u4e2a\u6570\u5b57\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u7528\u5e73\u8861\u6811\u5f88\u597d\u7ef4\u62a4\uff0c\u6211\u5199\u4e86\u4e00\u4e2a FHQ Treap\uff0c\u5b9e\u73b0\u6ca1\u6709\u4ec0\u4e48\u96be\u70b9\u3002\n\n\u597d\u5427\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e00\u6bb5\u5c31\u662f\u6211[\u8fd9\u4e2a\u9898\u89e3](https://www.luogu.com.cn/blog/DengDuck/solution-uva11525)\u3002\n\n# \u4ee3\u7801\u5b9e\u73b0\n\n\u6ca1\u5565\u96be\u70b9\uff0c\u6811\u72b6\u6570\u7ec4\u548c FHQ Treap \u4e5f\u662f\u7ecf\u5178\u7684\u6a21\u6837\uff0c\u6ca1\u6709\u4ec0\u4e48\u9700\u8981\u4fee\u6539\u7684\u5730\u65b9\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\nusing namespace std;\nconst LL N=4e5;\nLL a[N],cnt[N],b[N],n,tot,rt,x;\nLL lowbit(LL x)//\u6811\u72b6\u6570\u7ec4\n{\n\treturn x&-x;\n}\nLL query(LL x)\n{\n\tLL ans=0;\n\twhile(x)\n\t{\n\t\tans+=b[x];\n\t\tx-=lowbit(x);\n\t} \n\treturn ans;\n}\nvoid update(LL x,LL y)\n{\n\twhile(x<=n)\n\t{\n\t\tb[x]+=y; \n\t\tx+=lowbit(x);\n\t}\n}\nstruct node//\u5e73\u8861\u6811\n{\n\tLL l,r,val,pri,sz;\n}t[N];\nvoid pushup(LL x)\n{\n\tLL l=t[x].l,r=t[x].r;\n\tif(x)t[x].sz=t[l].sz+t[r].sz+1;\n}\nvoid split(LL rt,LL &lrt,LL &rrt,LL x)\n{\n\tLL l=t[rt].l,r=t[rt].r;\n\tif(rt==0)lrt=0,rrt=0;\n\telse if(t[rt].val<=x)lrt=rt,split(t[rt].r,t[rt].r,rrt,x);\n\telse rrt=rt,split(t[rt].l,lrt,t[rt].l,x);\n\tpushup(rt); \n} \nvoid merge(LL &rt,LL lrt,LL rrt)\n{\n\tLL l=t[rt].l,r=t[rt].r;\n\tif(lrt==0||rrt==0)rt=lrt+rrt;\n\telse if(t[lrt].pri<t[rrt].pri)rt=lrt,merge(t[rt].r,t[rt].r,rrt);\n\telse rt=rrt,merge(t[rt].l,lrt,t[rt].l);\n\tpushup(rt);\n}\nvoid ins(LL &rt,LL x)\n{\n\tt[++tot]={0,0,x,rand(),1};\n\tLL rt1,rt2;\n\tsplit(rt,rt1,rt2,x);\n\tmerge(rt1,rt1,tot),merge(rt,rt1,rt2); \n}\nvoid del(LL &rt,LL x)\n{\n\tLL rt1,rt2,k;\n\tsplit(rt,rt1,rt2,x),split(rt1,rt1,k,x-1);\n\tmerge(k,t[k].l,t[k].r),merge(rt1,rt1,k),merge(rt,rt1,rt2);\n}\nLL kth(LL rt,LL x)\n{\n\tLL l=t[rt].l,r=t[rt].r;\n\tif(x<=t[l].sz)return kth(l,x);\n\tif(t[l].sz+1==x)return t[rt].val;\n\treturn kth(r,x-t[l].sz-1);\n}\nint main()\n{\n\tscanf(\"%lld\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&a[i]);\n\t}\n\tfor(int i=n;i>=1;i--)\n\t{\n\t\tupdate(a[i]+1,1);\n\t\tcnt[i]+=query(a[i]);\n\t}\t\n\tmemset(b,0,sizeof(b));\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&a[i]);\n\t}\n\tfor(int i=n;i>=1;i--)\n\t{\n\t\tupdate(a[i]+1,1);\n\t\tcnt[i]+=query(a[i]);//\u5904\u7406S\u6570\u7ec4\uff0c\u5b58\u5728cnt\u6570\u7ec4\n\t}\t\n\tfor(int i=n;i>=1;i--)\n\t{\n\t\tcnt[i-1]+=cnt[i]/(n-i+1),cnt[i]%=(n-i+1);//\u8fdb\u4f4d\n\t}\n\tfor(int i=0;i<n;i++)ins(rt,i);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tLL k=kth(rt,cnt[i]+1);\n\t\tprintf(\"%lld \",k);//\u8f6c\u6362\u6210\u6570\u7ec4\n\t\tdel(rt,k);\n\t}\n}\n```",
        "postTime": 1681993367,
        "uid": 501947,
        "name": "DengDuck",
        "ccfLevel": 6,
        "title": "CF501D Misha and Permutations Summation \u9898\u89e3"
    }
]