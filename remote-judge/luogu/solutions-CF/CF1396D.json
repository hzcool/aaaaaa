[
    {
        "content": "[Codeforces \u9898\u9762\u4f20\u9001\u95e8](https://codeforces.ml/contest/1396/problem/D) & [\u6d1b\u8c37\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1396D)\n\n\u4e00\u9053\u9e3d\u4e86\u6574\u6574\u4e00\u5e74\u7684\u9898\u76ee\uff0c\u4e0a\u4e00\u6b21\u63d0\u4ea4\u597d\u50cf\u662f 2020 \u5e74 9 \u6708 13 \u65e5\u6765\u7740\u7684\uff08\uff1f\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/58m9jy50.png)\n\n~~\u4e4d\u4e00\u770b\u4ee5\u4e3a\u7b2c 2 \u4e2a\u63d0\u4ea4\u548c\u7b2c 3 \u4e2a\u63d0\u4ea4\u53ea\u5dee\u4e86 43min\uff0c\u5b9e\u9645\u4e0a\u662f 365 \u5929 + 43min = 1314043min~~\n\n\u8a00\u5f52\u6b63\u4f20\uff0c\u8fdb\u5165\u6b63\u9898\uff1a\n\n\u9996\u5148\u8fd9\u4e2a $L$ \u7684\u6570\u636e\u8303\u56f4\u80af\u5b9a\u8981\u8ba9\u6211\u4eec\u79bb\u6563\u5316\u5bf9\u5427\u3002\u6211\u4eec\u8003\u8651\u79bb\u6563\u5316\u4e4b\u540e\u679a\u4e3e\u4e0a\u4e0b\u8fb9\u754c\uff0c\u4e5f\u5c31\u662f\uff0c\u77e9\u5f62\u4e2d\u6700\u4e0a\u9762\u4e00\u4e2a\u5b58\u5728\u68cb\u5b50\u7684\u884c $i$ \u4ee5\u53ca \u77e9\u5f62\u4e2d\u6700\u4e0b\u9762\u4e00\u4e2a\u5b58\u5728\u68cb\u5b50\u7684\u884c $j$\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bbe $ux_i$ \u8868\u793a\u5c06 $x_i$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u5e76\u53bb\u91cd\u540e\u7684\u6570\u7ec4\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u5bf9 $(i,j)$ \u800c\u8a00\uff0c\u5728\u539f $L\\times L$ \u7684\u77e9\u5f62\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u4e0a\u8fb9\u754c\u4e2a\u6570\u5c31\u662f $ux_{i}-ux_{i-1}$\uff0c\u4e0b\u8fb9\u754c\u4e2a\u6570\u5c31\u662f $ux_{j+1}-ux_j$\uff0c\u5176\u4e2d $ux_{nx+1}=L+1$\uff0c$nx$ \u4e3a $x_i$ \u4e2d\u5305\u542b\u7684\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u679a\u4e3e\u5de6\u53f3\u8fb9\u754c\u3002\u4e00\u4e2a\u975e\u5e38\u81ea\u7136\u7684\u601d\u8def\u662f\u6548\u4eff\u4e4b\u524d\u679a\u4e3e\u4e0a\u4e0b\u8fb9\u754c\u7684\u601d\u8def\uff0c\u679a\u4e3e\u6700\u5de6\u8fb9\u90a3\u4e2a\u5b58\u5728\u68cb\u5b50\u7684\u5217 $l$\uff0c\u4ee5\u53ca\u6700\u53f3\u8fb9\u90a3\u4e2a\u5b58\u5728\u68cb\u5b50\u7684\u5217 $r$\uff0c\u65b9\u6848\u6570\u81ea\u7136\u5c31\u662f $(uy_{l}-uy_{l-1})\u00b7(uy_{r+1}-uy_r)$\uff0c\u5176\u4e2d $uy$ \u7684\u5b9a\u4e49\u540c $ux$\u3002\u8fd9\u6837\u66b4\u529b\u662f\u56db\u65b9\u7684\u3002\u4e0d\u8fc7\u6709\u4e00\u4e2a\u663e\u7136\u7684\u6027\u8d28\u662f\u7b26\u5408\u8981\u6c42\u7684 $r$ \u662f\u4e00\u6bb5\u540e\u7f00\uff0c\u5e76\u4e14\u8fd9\u6bb5\u540e\u7f00\u7684\u5de6\u7aef\u70b9\u968f\u7740 $l$ \u7684\u589e\u5927\u800c\u589e\u5927\uff0c\u56e0\u6b64\u53ef\u4ee5 two pointers \u4f18\u5316\u5230\u4e09\u65b9\uff0c\u4f46\u8fd8\u662f\u8fc7\u4e0d\u53bb\u3002\n\n\u8003\u8651\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u6211\u4eec\u8bb0 $f_l$ \u8868\u793a\u5f53\u5de6\u7aef\u70b9\u4e3a $l$ \u65f6\u7b26\u5408\u6761\u4ef6\u7684\u53f3\u7aef\u70b9 $r$ \u53d6\u5230\u6700\u5c0f\u503c\u65f6\u7684 $uy_r$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684 $r$\uff0c\u5176\u8d21\u732e\u5c31\u662f $(uy_l-uy_{l-1})\u00b7(L+1-f_l)$\uff0c\u603b\u8d21\u732e\u5c31\u53ef\u4ee5\u5199\u4f5c\n$$\n\\begin{aligned}&\\sum\\limits_{i=1}^{ny}(uy_i-uy_{i-1})\u00b7(L+1-f_i)\\\\\n=&\\sum\\limits_{i=1}^{ny}(uy_i-uy_{i-1})\u00b7(L+1)-\\sum\\limits_{i=1}^{ny}(uy_i-uy_{i-1})\u00b7f_i\\\\\n=&(L+1)\u00b7uy_{ny}-\\sum\\limits_{i=1}^{ny}(uy_i-uy_{i-1})\u00b7f_i\\end{aligned}\n$$\n\u6211\u4eec\u53ea\u9700\u7ef4\u62a4\u540e\u9762\u90a3\u5768\u4e1c\u897f\u5373\u53ef\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u626b\u63cf\u7ebf\u7684\u601d\u60f3\uff0c\u5373\u8003\u8651\u5f53\u52a0\u5165/\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u65f6\u5bf9 $f_l$ \u7684\u5f71\u54cd\u3002\u52a0\u5165\u4e0d\u597d\u5904\u7406\uff0c\u56e0\u6b64\u8003\u8651\u5904\u7406\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u65f6\u7684\u8d21\u732e\u3002\u6211\u4eec\u5047\u8bbe\u5220\u9664\u7684\u5143\u7d20\u7684\u7eb5\u5750\u6807\u4e3a $y$\uff0c\u989c\u8272\u4e3a $c$\uff0c\u90a3\u4e48\u8003\u8651\u5f00\u4e00\u4e2a `set` \u7ef4\u62a4\u6240\u6709\u989c\u8272\u7684\u51fa\u73b0\u4f4d\u7f6e\u7684\u5217\u5750\u6807\uff0c\u6bcf\u6b21\u5220\u9664\u6211\u4eec\u5c31\u5728 `set` \u4e2d\u627e\u5230\u4e0a\u4e00\u4e2a\u989c\u8272\u4e3a $c$ \u7684\u683c\u5b50\u7684\u5217\uff0c\u5047\u8bbe\u4e3a $pre$\uff0c\u4ee5\u53ca\u4e0b\u4e00\u4e2a\u989c\u8272\u4e3a $c$ \u7684\u683c\u5b50\u7684\u5217\uff0c\u5047\u8bbe\u4e3a $nxt$\uff0c\u90a3\u4e48\u663e\u7136\u5bf9\u4e8e $l\\in[pre+1,y]$\uff0c$f_l$ \u8981\u5bf9 $nxt$ \u53d6 $\\max$\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u652f\u6301\u533a\u95f4\u53d6 $\\max$ \u548c\u5168\u5c40\u6c42\u548c\u4e24\u4e2a\u64cd\u4f5c\u3002\u4e4d\u4e00\u770b\u8981[\u300a\u67d0\u79d1\u6280\u6811\u300b](https://www.cnblogs.com/ET2006/p/jsjxds.html)\uff0c\u4e0d\u8fc7\u7ec6\u60f3\u5176\u5b9e\u4e0d\u9700\u8981\uff0c\u56e0\u4e3a $f$ \u6570\u7ec4\u662f\u5355\u8c03\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u627e\u5230\u6700\u540e\u4e00\u4e2a $<nxt$ \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6267\u884c\u533a\u95f4\u8d4b\u503c\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $n^2\\log n$\u3002\n\n~~u1s1 \u5f3a\u884c\u4e0a\u79bb\u6563\u5316\u7684\u51fa\u9898\u4eba\u90fd\u662f sb \u51fa\u9898\u4eba~~\n\n```cpp\nconst int MAXN=2000;\nconst int MOD=1e9+7;\nint n,k,L,x[MAXN+5],y[MAXN+5],c[MAXN+5];\nint kx[MAXN+5],ky[MAXN+5],ux[MAXN+5],uy[MAXN+5],nx,ny;\nvector<int> px[MAXN+5],py[MAXN+5];\nint pos[MAXN+5],res=0;\nstruct node{int l,r,val,sm,lz,rit;} s[MAXN*4+5];\nmultiset<int> occ[MAXN+5];\nvoid pushup(int k){\n\ts[k].val=(s[k<<1].val+s[k<<1|1].val)%MOD;\n\ts[k].rit=s[k<<1|1].rit;\n}\nvoid build(int k,int l,int r){\n\ts[k].l=l;s[k].r=r;if(l==r) return s[k].sm=uy[l]-uy[l-1],void();\n\tint mid=l+r>>1;build(k<<1,l,mid);build(k<<1|1,mid+1,r);\n\ts[k].sm=(s[k<<1].sm+s[k<<1|1].sm)%MOD;\n}\nvoid tag(int k,int v){s[k].val=1ll*s[k].sm*v%MOD;s[k].lz=s[k].rit=v;}\nvoid pushdown(int k){if(s[k].lz) tag(k<<1,s[k].lz),tag(k<<1|1,s[k].lz),s[k].lz=0;}\nvoid modify(int k,int l,int r,int v){\n\tif(l>r) return;\n\tif(l<=s[k].l&&s[k].r<=r) return tag(k,v),void();\n\tpushdown(k);int mid=s[k].l+s[k].r>>1;\n\tif(r<=mid) modify(k<<1,l,r,v);\n\telse if(l>mid) modify(k<<1|1,l,r,v);\n\telse modify(k<<1,l,mid,v),modify(k<<1|1,mid+1,r,v);\n\tpushup(k);\n}\nint walk(int k,int v){//find the leftmost position >v\n\tif(s[k].l==s[k].r) return (s[k].rit>v)?s[k].l:(s[k].l+1);\n\tpushdown(k);\n\tif(s[k<<1].rit>v) return walk(k<<1,v);\n\telse return walk(k<<1|1,v);\n}\nint query(){return s[1].val;}\nvoid makemax(int l,int r,int v){\n//\tprintf(\"makemax %d %d %d\\n\",l,r,v);\n\tif(l>r) return;int p=walk(1,v)-1;\n\tchkmin(p,r);modify(1,l,p,v);\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&k,&L);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%d%d\",&x[i],&y[i],&c[i]);\n\t\t++x[i];++y[i];kx[i]=x[i];ky[i]=y[i];\n\t} sort(kx+1,kx+n+1);sort(ky+1,ky+n+1);\n\tfor(int i=1;i<=n;i++) if(kx[i]^kx[i-1]) ux[++nx]=kx[i];\n\tfor(int i=1;i<=n;i++) if(ky[i]^ky[i-1]) uy[++ny]=ky[i];\n\tfor(int i=1;i<=n;i++){\n\t\tx[i]=lower_bound(ux+1,ux+nx+1,x[i])-ux;\n\t\ty[i]=lower_bound(uy+1,uy+ny+1,y[i])-uy;\n\t\tpx[x[i]].pb(i);py[y[i]].pb(i);\n\t} ux[nx+1]=uy[ny+1]=L+1;build(1,1,ny);\n\tfor(int i=1;i<=k;i++) occ[i].insert(0),occ[i].insert(ny+1);\n\tfor(int i=1;i<=nx;i++){\n\t\tmultiset<int> st;\n\t\tfor(int j=1;j<=k;j++) pos[j]=ny+1,st.insert(ny+1);\n\t\tfor(int j=ny;j;j--){\n\t\t\tfor(int id:py[j]) if(x[id]>=i){\n\t\t\t\tst.erase(st.find(pos[c[id]]));\n\t\t\t\tpos[c[id]]=j;st.insert(pos[c[id]]);\n\t\t\t\tocc[c[id]].insert(j);\n\t\t\t} modify(1,j,j,uy[*st.rbegin()]);\n//\t\t\tprintf(\"%d%c\",uy[*st.rbegin()],\" \\n\"[j==1]);\n\t\t}\n\t\tfor(int j=nx;j>=i;j--){\n\t\t\tres=(res+1ll*(ux[i]-ux[i-1])*(ux[j+1]-ux[j])%MOD\n\t\t\t*(1ll*uy[ny]*(L+1)%MOD-query()+MOD))%MOD;\n//\t\t\tprintf(\"%d %d %d\\n\",i,j,s[1].val);\n//\t\t\tprintf(\"%d\\n\",1ll*(ux[i]-ux[i-1])*(ux[j+1]-ux[j])%MOD\n//\t\t\t*(1ll*uy[ny]*(L+1)%MOD-s[1].val+MOD)%MOD);\n\t\t\tfor(int id:px[j]){\n\t\t\t\tocc[c[id]].erase(occ[c[id]].find(y[id]));\n\t\t\t\tint pre=*--occ[c[id]].upper_bound(y[id]);\n\t\t\t\tint nxt=*occ[c[id]].upper_bound(y[id]);\n\t\t\t\tmakemax(pre+1,y[id],uy[nxt]);\n\t\t\t}\n\t\t}\n\t} printf(\"%d\\n\",res);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1631717134,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1396D Rainbow Rectangles"
    },
    {
        "content": "\n\u7ed9\u5b9a $n,k,L$ \u8868\u793a\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a $L\\times L$ \u7684\u77e9\u5f62\uff0c\u5185\u90e8\u6709 $n$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u989c\u8272 $c_i$\uff0c\u4f4d\u4e8e $(x_i,y_i)$\uff0c\u4fdd\u8bc1 $1\\le c_i\\le k$ \u4e14\u6bcf\u79cd\u989c\u8272\u81f3\u5c11\u6709\u4e00\u4e2a\u70b9\uff0c\u4f60\u9700\u8981\u6c42\u6709\u591a\u5c11\u4e2a\u77e9\u5f62\u6ee1\u8db3\u5176\u5185\u90e8\u542b\u6709\u6240\u6709\u989c\u8272\u7684\u70b9\u3002\n\n$k\\le n\\le 2000,L\\le 10^9$\n\n$\\rm Sol:$\n\n\u5c06\u5143\u7d20\u8fdb\u884c\u79bb\u6563\u5316\u73b0\u5728\u6211\u4eec\u7684\u77e9\u5f62\u5927\u5c0f\u4e3a $n\\times n$ \u4e86\u3002\n\n\u8003\u8651\u4e00\u7ef4\u7684\u60c5\u51b5\u5982\u4f55\u5904\u7406\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $l$ \u7ef4\u62a4 $f(l)$ \u8868\u793a\u6700\u5c0f\u7684 $r$ \u4f7f\u5f97 $[l,r]$ \u5408\u6cd5\u3002\u90a3\u4e48\u6b64\u65f6\u8d21\u732e\u4e3a $(L-r+1)$\n\n\u5904\u7406 $f(l)$ \u53ef\u4ee5\u9884\u5904\u7406\u6bcf\u4e2a\u989c\u8272\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u53d6 $\\max$ \u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5904\u7406\u4e8c\u7ef4\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u679a\u4e3e\u77e9\u5f62\u7684\u4e00\u4e2a\u8fb9\u754c\uff08\u67d0\u4e00\u884c\uff09\uff0c\u7136\u540e\u5148\u5bf9\u8fd9\u4e00\u884c\u505a\u4e00\u7ef4\u7684\u5904\u7406\uff0c\u7136\u540e\u8003\u8651\u5c06\u5176\u62d3\u5c55\u4e3a\u4e8c\u7ef4\u7684\u60c5\u51b5\uff0c\u6bcf\u6b21\u5728\u67d0\u4e2a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u989c\u8272 $c$\uff0c\u8fd9\u4f1a\u4f7f\u5f97\u7b54\u6848\u6539\u53d8\uff0c\u5f71\u54cd\u7684\u533a\u95f4 $[pre_c,i]$ \u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u7b54\u6848\u53ef\u80fd\u4f1a\u53d8\u5c0f\u3002\u7136\u800c\u6211\u4eec\u8ba1\u7b97\u7b54\u6848\u4e3a\u53d6 $\\max$ \u6240\u4ee5\u96be\u4ee5\u89e3\u51b3\u3002\n\n\u4e0d\u59a8\u53cd\u8fc7\u6765\u8003\u8651\uff0c\u5148\u5904\u7406\u51fa\u6700\u7ec8\u7684\u7b54\u6848\uff0c\u7136\u540e\u9006\u7740\u5904\u7406\uff0c\u6bcf\u6b21\u5220\u9664\u4e00\u4e2a\u65b0\u989c\u8272 $[pre_c,i]$ \u7684\u7b54\u6848\u4f1a\u53d6 $\\max$\uff0c\u7136\u540e\u6bcf\u6b21\u67e5\u8be2\u4e00\u6b21\u5168\u5c40\u8d21\u732e\u548c\u3002\u663e\u7136\u8fd9\u662f\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\uff0c\u7136\u800c\u76f4\u63a5\u53d6 $\\max$ \u8981\u5199\u67d0\u79d1\u6280\u6811\uff1f\u6240\u4ee5\u597d\u50cf\u4e0d\u662f\u5f88\u597d\u505a\u3002\n\n\u4e8b\u5b9e\u4e0a\u89c2\u5bdf\u5230 $f(l)$ \u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u5199\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e8c\u5206\u627e\u5230\u5bf9\u5e94\u533a\u95f4\uff0c\u7136\u540e\u6267\u884c\u533a\u95f4\u8986\u76d6\u5373\u53ef\uff0c\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n^2\\log n)$\n\n\u4e0b\u9762\u8fd9\u4efd\u4ee3\u7801\u53ea\u4fdd\u8bc1\u6b63\u786e\u6027\uff0c\u53ef\u80fd\u6709\u5730\u65b9\u5e38\u6570\u5927\u4e86\u6216\u8005\u5199\u5047\u4e86\uff0c$76, 77$ T \u4e86 TAT\n\n$Code:$\n\n```cpp\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std ;\n#define Next( i, x ) for( register int i = head[x]; i; i = e[i].next )\n#define rep( i, s, t ) for( register int i = (s); i <= (t); ++ i )\n#define drep( i, s, t ) for( register int i = (t); i >= (s); -- i )\n#define re register\n#define ls(x) (x << 1)\n#define rs(x) (x << 1 | 1)\n#define pb push_back\nint gi() {\n\tchar cc = getchar() ; int cn = 0, flus = 1 ;\n\twhile( cc < '0' || cc > '9' ) {  if( cc == '-' ) flus = - flus ; cc = getchar() ; }\n\twhile( cc >= '0' && cc <= '9' )  cn = cn * 10 + cc - '0', cc = getchar() ;\n\treturn cn * flus ;\n}\nconst int N = 4000 + 5 ; \nconst int P = 1e9 + 7 ; \nstruct node { \n\tint x, y, c ; \n} a[N], A[N], B[N] ;\nstruct Tr {\n\tint w, s, l, r, tag ; \n\tvoid init() { w = s = l = r = tag = 0 ; }\n} tr[N << 2] ;\nint n, K, L, H, W, Ans, prex[N], prey[N], sumx[N], sumy[N], f[N], p[N] ; \nvector<int> w[N] ; \nmultiset<int> col[N] ; \nset<int>::iterator it ; \nbool cmp1( node x, node y ) { return x.x < y.x ; }\nbool cmp2( node x, node y ) { return x.y < y.y ; }\nvoid init() {\n\tsort( A + 1, A + n + 1, cmp1 ) ; \n\tsort( B + 1, B + n + 1, cmp2 ) ; \n\tint num = 0 ; \n\trep( i, 1, n ) {\n\t\tif( A[i].x != A[i - 1].x ) \n\t\t\t++ num, prex[num] = A[i].x - A[i - 1].x ; \n\t\ta[A[i].c].x = num ; \n\t} prex[++ num] = L - A[n].x, W = num ;\n\tnum = 0 ; \n\trep( i, 1, n ) {\n\t\tif( B[i].y != B[i - 1].y ) \n\t\t\t++ num, prey[num] = B[i].y - B[i - 1].y ; \n\t\ta[B[i].c].y = num ; \n\t} prey[++ num] = L + 1 - B[n].y, H = num ; \n}\nvoid pushup(int x) {\n\ttr[x].s = (tr[ls(x)].s + tr[rs(x)].s) % P,\n\ttr[x].w = (tr[ls(x)].w + tr[rs(x)].w) % P,\n\ttr[x].l = tr[ls(x)].l, tr[x].r = tr[rs(x)].r ;  \n}\nvoid mark(int x, int c) {\n\ttr[x].l = tr[x].r = c, tr[x].w = 1ll * (L + 1 - c) * tr[x].s % P, tr[x].tag = c ; \n}\nvoid pushmark(int x) {\n\tint c = tr[x].tag ; if( !c ) return ; \n\tmark(ls(x), c), mark(rs(x), c), tr[x].tag = 0 ;\n}\nvoid build(int x, int l, int r) {\n\tif( l == r ) {\n\t\ttr[x].w = 1ll * (L + 1 - f[l]) * prex[l] % P ; \n\t\ttr[x].s = prex[l], tr[x].l = tr[x].r = f[l] ; return ; \n\t} int mid = (l + r) >> 1 ; \n\tbuild(ls(x), l, mid), build(rs(x), mid + 1, r), pushup(x) ; \n}\nvoid modify(int x, int l, int r, int ql, int qr, int c) {\n\tif( ql <= l && r <= qr ) return mark(x, c) ; \n\tif( qr < l || r < ql ) return ;\n\tint mid = (l + r) >> 1 ; pushmark(x) ;\n\tmodify(ls(x), l, mid, ql, qr, c), modify(rs(x), mid + 1, r, ql, qr, c), pushup(x) ;\n}\nint query(int x, int l, int r, int k) {\n\tif( l == r ) return l ; \n\tint mid = (l + r) >> 1 ; pushmark(x) ; \n\tif( tr[rs(x)].l > k ) return query(ls(x), l, mid, k) ; \n\telse return query(rs(x), mid + 1, r, k) ; \n}\nint query2(int x, int l, int r, int k) {\n\tif(l == r) return tr[x].l ; \n\tint mid = (l + r) >> 1 ; pushmark(x) ; \n\tif( k <= mid ) return query2(ls(x), l, mid, k) ;\n\telse return query2(rs(x), mid + 1, r, k) ; \n}\nvoid del(node u) {\n\tit = col[u.c].upper_bound(u.x) ; -- it ;\n\tint ll = 1, rr = L + 1, v ;  \n\tif( it != col[u.c].begin() ) -- it, v = *it, ll = v + 1, ++ it ; \n\t++ it ; if( it != col[u.c].end() ) v = *it, rr = sumx[v] ; \n\t-- it, col[u.c].erase(it) ; \n\tint k = query(1, 1, W, rr), fl = query2(1, 1, W, k) ; fl = (fl <= rr) ;\n\tif( !fl || k < ll ) return ; \n\tmodify( 1, 1, W, ll, k, rr ) ; \n}\nsigned main()\n{\n\tn = gi(), K = gi(), L = gi() ; \n\trep( i, 1, n ) \n\t\ta[i].x = gi() + 1, a[i].y = gi() + 1, a[i].c = gi(),\n\t\tA[i] = B[i] = a[i], A[i].c = B[i].c = i ; \n\tinit() ; \n\tsort(a + 1, a + n + 1, cmp2) ; \n\trep( i, 1, W ) sumx[i] = sumx[i - 1] + prex[i] ; \n\tsumx[W + 1] = L + 1, a[n + 1].y = H + 5 ; \n\trep( o, 1, H ) {\n\t\trep( i, 1, n ) if( a[i].y <= o ) \n\t\t\tw[a[i].x].pb(a[i].c), col[a[i].c].insert(a[i].x) ; \n\t\tint fl = 0, R = 0 ; \n\t\trep( i, 1, W ) {\n\t\t\twhile( fl != K && R <= W ) {\n\t\t\t\t++ R ; for(int j : w[R]) fl += (p[j] == 0), ++ p[j] ; \n\t\t\t} f[i] = sumx[R] ; \n\t\t\tfor(int j : w[i]) fl -= (p[j] == 1), -- p[j] ; \n\t\t}\n\t\tbuild(1, 1, W) ; int id = 0, d = 0 ; \n\t\trep( i, 1, o ) { \n\t\t\td = ( d + 1ll * prey[i] * (tr[1].w % P)) % P ; \n\t\t\twhile( a[id + 1].y == i ) ++ id, del(a[id]) ;\n\t\t}\n\t\td %= P ; \n\t\tif( o != H ) Ans = (Ans + 1ll * d * max(1, prey[o + 1]) % P) % P ;\n\t\trep( i, 1, W * 4 ) tr[i].init() ; \n\t\trep( i, 1, K ) w[i].clear(), p[i] = 0 ; \n\t}\n\tcout << Ans << endl ; \n\treturn 0 ;\n}\n```",
        "postTime": 1599040770,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1396D \u3010Rainbow Rectangles\u3011"
    },
    {
        "content": "\u5982\u679c\u679a\u4e3e\u77e9\u5f62\u7684\u67d0\u4e2a\u89d2\u597d\u50cf\u9664\u4e86\u66b4\u529b\u6ca1\u6709\u4ec0\u4e48\u5176\u4ed6\u505a\u6cd5\u3002\n\n\u4e8e\u662f\u8003\u8651\u5148\u679a\u4e3e\u4e0a\u4e0b\u8fb9\u754c\uff0c\u518d\u679a\u4e3e\u5de6\u8fb9\u754c\uff0c\u663e\u7136\u8fd9\u65f6\u53f3\u8fb9\u754c\u53ef\u4ee5\u4e8c\u5206\uff0c\u66f4\u8fdb\u4e00\u6b65\uff0c\u53ef\u4ee5\u53cc\u6307\u9488\u3002\n\n\u8003\u8651\u6bcf\u6b21\u4e0a\u4e0b\u8fb9\u754c\u53ea\u5f80\u5916\u6269\u5c55\u4e00\u884c\uff0c\u7136\u540e\u5229\u7528\u4e4b\u524d\u7684\u4fe1\u606f\u5feb\u901f\u7edf\u8ba1\uff0c\u53d1\u73b0\u591a\u4e86\u4e00\u4e9b\u70b9\uff0c\u5c31\u8981\u5bf9\u4e00\u6bb5\u5de6\u8fb9\u754c\u5bf9\u5e94\u80fd\u53d6\u5230\u7684\u6700\u5c0f\u53f3\u8fb9\u754c\u53d6 $\\min$\u3002\n\n\u4f46\u662f\u6211\u4eec\u8981\u83b7\u53d6\u7684\u4fe1\u606f\u662f\u6240\u6709\u989c\u8272\u9650\u5236\u7684\u6700\u5c0f\u53f3\u8fb9\u754c\u53d6 $\\max$\uff0c\u663e\u7136\u64cd\u4f5c\u548c\u8be2\u95ee\u4e0d\u592a\u517c\u5bb9\uff0c\u8fd9\u65f6\u53ef\u4ee5\u81ea\u7136\u7684\u60f3\u5230\u4f7f\u53d8\u5316\u6539\u4e3a\u5c11\u4e86\u4e00\u4e9b\u70b9\u5c31\u53ef\u4ee5\u4f7f\u6700\u5c0f\u53f3\u7aef\u70b9\u53d6 $\\max$\u3002\n\n\u66f4\u5177\u4f53\u7684\uff0c\u6211\u4eec\u5148\u5c06\u6240\u6709\u5728\u67d0\u4e2a\u754c\u9650\u4ee5\u4e0a\u7684\u70b9\u90fd\u52a0\u8fdb\u53bb\uff0c\u7136\u540e\u6bcf\u6b21\u5411\u5185\u6536\u7f29\u4e00\u884c\uff0c\u5c31\u662f\u5c11\u4e86\u4e00\u4e9b\u70b9\u4e86\u3002\n\n\u6b64\u65f6\u64cd\u4f5c\u548c\u8be2\u95ee\u662f\u517c\u5bb9\u7684\uff0c\u6211\u4eec\u5c06\u6240\u6709\u989c\u8272\u9650\u5236\u7684\u6700\u5c0f\u53f3\u8fb9\u754c\u7f6e\u4e8e\u4e00\u4e2a\u4fe1\u606f\u4e0a\uff0c\u4e8e\u662f\u4fee\u6539\u5c31\u53ef\u4ee5\u76f4\u63a5\u6539\u8fd9\u4e2a\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u5bf9\u8fd9\u4e2a\u4fe1\u606f\u53d6 $\\max$\uff0c\u7136\u540e\u8be2\u95ee\u5168\u5c40\u548c\u5373\u53ef\u3002\n\n\u8003\u8651\u6211\u4eec\u73b0\u5728\u9700\u8981\u652f\u6301\u7684\u64cd\u4f5c\uff1a\n\n- \u533a\u95f4\u53d6 $\\max$\n\n- \u5168\u5c40\u6c42\u548c\u3002\n\n\u6700\u7b80\u5355\u6700\u88f8\u7684 Segment tree beats\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u90fd\u4e0d\u7b97\u79d1\u6280\u3002\n\n\u5176\u4ed6\u9898\u89e3\u7684\u8f6c\u533a\u95f4\u8986\u76d6\u65e2\u589e\u52a0\u601d\u7ef4\u96be\u5ea6\u53c8\u589e\u52a0\u5b9e\u73b0\u96be\u5ea6\uff0c\u88f8\u677f\u5b50\u8fd8\u662f\u66f4\u4e0d\u5bb9\u6613\u5199\u6302\u3002\n\n[\u4ee3\u7801](https://www.luogu.com.cn/paste/5mggvuc0)",
        "postTime": 1635503560,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "CF1396D Rainbow Rectangles"
    },
    {
        "content": "\u9898\u610f\uff1a\n\n$L\\times L$ \u7f51\u683c\u5185\u6709 $k$ \u4e2a\u683c\u5b50\u6709\u989c\u8272 $c_i$\uff0c\u5750\u6807\u4e3a $(a_i, b_i)$\u3002\u6c42\u591a\u5c11\u4e2a\u5b50\u77e9\u5f62\u5305\u542b\u6240\u6709\u989c\u8272\u3002\n\n$n,k \\le 2\\times 10^3\\ \\ \\ \\ \\  1 \\le L \\le 10^9$\n\n---\n\u4e0d\u59a8\u8003\u8651\u4e00\u7ef4\u7684\u60c5\u51b5\uff0c\u5c3a\u53d6\u6cd5\u5373\u53ef $O(n)$ \u89e3\u51b3\u3002\n\n\u90a3\u4e48\u4e8c\u7ef4\u6bd4\u8f83\u7c7b\u4f3c\uff0c $O(n^2)$ \u679a\u4e3e\u884c\u7136\u540e\u76f4\u63a5\u62d3\u5c55\u5373\u53ef\u3002\u6bcf\u6b21\u62d3\u5c55\u6700\u591a\u4f1a\u52a0\u5165 $O(n)$ \u6b21\u989c\u8272\uff0c\u6240\u4ee5\u590d\u6742\u5ea6 $O(n^3)$ \u3002\n\n\u590d\u6742\u5ea6\u592a\u5dee\u4e86\uff0c\u8003\u8651\u4f18\u5316\uff1a\n\n\u8003\u8651\u600e\u4e48\u7ee7\u627f\u4fe1\u606f\u4ee5\u51cf\u5c11\u590d\u6742\u5ea6\uff1a\u5047\u8bbe\u884c $[l,r]$ \u7684\u6240\u6709\u7b54\u6848\u5df2\u7ecf\u6c42\u51fa\uff0c\u600e\u4e48\u8ba1\u7b97 $[l+1,r]$ \uff1a\u5220\u9664\u4e00\u884c\u540e\uff0c\u6bcf\u4e2a\u5de6\u7aef\u70b9\u5bf9\u5e94\u7684\u6700\u8fd1\u6ee1\u8db3\u6761\u4ef6\u7684\u53f3\u7aef\u70b9\u53ef\u80fd\u90fd\u5411\u53f3\u79fb\u52a8\u3002\n\n\u8003\u8651\u7b2c $x$ \u5217\u88ab\u5220\u9664\u540e\u7684\u5f71\u54cd\uff1a\u8bbe $p_x$ \u662f\u5bf9\u5e94\u884c\u5411\u5de6\u7b2c\u4e00\u4e2a\u540c\u989c\u8272\u6240\u5728\u7684\u5217\uff0c\u663e\u7136\u5f71\u54cd\u7684\u5217\u53ea\u6709 $[p_x+1,x]$\u3002\n\n\u8fd9\u4e9b\u5217\u7684\u53f3\u7aef\u70b9\u90fd\u4f1a\u5411\u53f3\u632a\u5230\u5bf9\u5e94\u884c\u5411\u53f3\u7b2c\u4e00\u4e2a\u540c\u989c\u8272\u6240\u5728\u7684\u5217\uff0c\uff08\u5982\u679c\u53f3\u7aef\u70b9\u5728\u5de6\u8fb9\uff09\n\n\u5176\u5b9e\u5c31\u662f\u8981\u5b9e\u73b0\u533a\u95f4\u53d6 $\\max$ \uff0c\u4f46\u662f\u8003\u8651\u5230\u5355\u8c03\u6027\uff0c\u76f8\u5f53\u4e8e\u533a\u95f4\u8d4b\u503c\u3002\n\n\u5206\u6790\u590d\u6742\u5ea6\uff1a\n\n\u9996\u5148\u505a\u51fa\u884c $[1,x]$ \u7684\u7b54\u6848\uff0c\u56e0\u4e3a\u6240\u6709\u5e26\u989c\u8272\u7684\u70b9\u6570\u91cf $O(n)$\uff0c\u6240\u4ee5\u662f $O(n^2)$ \u7684\u3002\n\n\u63a5\u4e0b\u6765\u8981\u6c42\u51fa\u5bf9\u5e94\u884c\u989c\u8272\u7684\u524d\u9a71\u540e\u7ee7\uff0c\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u7528 multisel \u5feb\u901f\u5b8c\u6210\u3002\n\n\u74f6\u9888\u5728\u4e8e $O(n^2)$ \u884c\u7684\u533a\u95f4\u8d4b\u503c\uff0c\u6240\u4ee5\u590d\u6742\u5ea6 $O(n^2\\log n)$ \u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u4ee3\u7801\u96be\u5ea6\u6bd4\u8f83\u5927\uff08\n\n```cpp\n#include <bits/stdc++.h>\n#define M(x) (x=x>=mod?x-mod:x)\n#define ll long long\n#define Mid ((L+R)>>1)\nusing namespace std;\ntypedef pair<int,int> pii;\ninline int read(){\n\tchar c;int x=0;int b=1;do{c=getchar();if(c==45)b=-1;}while(c>57||c<48);\n\tdo x=x*10+c-48,c=getchar();while(c<=57&&c>=48);x*=b;return x;\n}\nconst int maxn=2010,mod=1e9+7;\nint i,j,k,n,m,L;\nint X[maxn],Y[maxn],c[maxn][maxn],cnt0,cnt1,s0=1,s1=1;\nstruct edge{\n\tint x,y,c;\n}E[maxn];int cnt;\nvector<pii>C[maxn],C2[maxn];\nvoid init(){\n\tsort(X+1,X+1+cnt0);\n\tsort(Y+1,Y+1+cnt1);\n\tfor(int i=2;i<=cnt0;i++)\n\t\tif(X[i]!=X[i-1])X[++s0]=X[i];\n\tfor(int i=2;i<=cnt1;i++)\n\t\tif(Y[i]!=Y[i-1])Y[++s1]=Y[i];\n\tfor(int i=1;i<=cnt;i++){\n\t\tint x0=lower_bound(X+1,X+1+s0,E[i].x)-X,y0=lower_bound(Y+1,Y+1+s1,E[i].y)-Y;\n\t\t//cout<<\"x0=\"<<x0<<\" y0=\"<<y0<<' '<<X[x0]<<' '<<Y[y0]<<endl;\n\t\tc[x0][y0]=E[i].c;\n\t\tC[y0].push_back((pii){x0,E[i].c});\n\t\tC2[x0].push_back((pii){y0,E[i].c});\n\t}\n}\nint ans[maxn],last[maxn],nxt[maxn],S[maxn];\nmultiset<int>Mp[maxn];\nmultiset<int>::iterator it;\nint is[maxn];\nll Ans;\n\nnamespace Segment_tree{\n\tint tree[maxn*4],Min[maxn*4],lazy[maxn*4];ll w[maxn*4];\n\tvoid update(int root){\n\t\tMin[root]=min(Min[root*2],Min[root*2+1]);\n\t\ttree[root]=(tree[root*2]+tree[root*2+1])%mod;\n\t}\n\tvoid pushdown(int root,int L,int R){\n\t\tif(!lazy[root])return;\n\t\tlazy[root*2]=lazy[root];Min[root*2]=lazy[root];tree[root*2]=w[root*2]*lazy[root]%mod;\n\t\tlazy[root*2+1]=lazy[root];Min[root*2+1]=lazy[root];tree[root*2+1]=w[root*2+1]*lazy[root]%mod;\n\t\tlazy[root]=0;\n\t}\n\tvoid build(int root,int L,int R,int *ans,int *y){\n\t\tif(L==R){\n\t\t\tMin[root]=ans[L];\n\t\t\ttree[root]=1ll*ans[L]*(y[L]-y[L-1])%mod;\n\t\t\tw[root]=y[L]-y[L-1];\n\t\t\tlazy[root]=0;\n\t\t\t//cout<<\"root=\"<<root<<' '<<L<<' '<<y[L]<<' '<<y[L-1]<<' '<<ans[L]<<endl;\n\t\t}else{\n\t\t\tbuild(root*2,L,Mid,ans,y);\n\t\t\tbuild(root*2+1,Mid+1,R,ans,y);\n\t\t\tupdate(root);w[root]=(w[root*2]+w[root*2+1])%mod;\n\t\t\tlazy[root]=0;\n\t\t\t//cout<<\"building.. root=\"<<root<<\" L=\"<<L<<\" R=\"<<R<<' '<<w[root]<<' '<<tree[root]<<' '<<Min[root]<<endl;\n\t\t}\n\t}\n\tint find(int root,int L,int R,int s){\n\t\tif(L==R){\n\t\t\tif(Min[root]<=s)return L;\n\t\t\telse return L-1;\n\t\t}else{\n\t\t\tpushdown(root,L,R);\n\t\t\tif(Min[root*2+1]<=s)return find(root*2+1,Mid+1,R,s);\n\t\t\telse return find(root*2,L,Mid,s);\n\t\t}\n\t}\n\tvoid add(int root,int L,int R,int l,int r,int s){\n\t\tif(L==l && R==r){\n\t\t\tlazy[root]=s;\n\t\t\tMin[root]=s;\n\t\t\ttree[root]=1ll*s*w[root]%mod;\n\t\t}else{\n\t\t\tpushdown(root,L,R);\n\t\t\tif(r<=Mid)add(root*2,L,Mid,l,r,s);\n\t\t\telse if(l>Mid)add(root*2+1,Mid+1,R,l,r,s);\n\t\t\telse add(root*2,L,Mid,l,Mid,s),add(root*2+1,Mid+1,R,Mid+1,r,s);\n\t\t\tupdate(root);\n\t\t}\n\t}\n\tll updateans(int L,int s1){\n\t\tll sum=L*w[1]%mod-tree[1]+w[1];\n\t\t//cout<<\"updateans \"<<L<<' '<<w[1]<<' '<<tree[1]<<' '<<sum<<endl;\n\t\treturn (sum+1000000007)%(1000000007);\n\t}\n}using namespace Segment_tree;\n\nint main() {\n\tfreopen(\"CF1396D.in\",\"r\",stdin);\n\tfreopen(\"CF1396D.out\",\"w\",stdout);\n\tcin>>n>>m>>L;\n\t//X[++cnt0]=L;\n\tX[++cnt0]=L+1;\n\tY[++cnt1]=L+1;\n\tfor(i=1;i<=n;i++){\n\t\tint x=read()+1,y=read()+1,C=read();\n\t\tE[++cnt]={x,y,C};\n\t\tX[++cnt0]=x;\n\t\tY[++cnt1]=y;\n\t}init();\n\tfor(int x=1;x<s0;x++){\n//\t\tcout<<\"x=\"<<x<<' '<<X[x]<<endl;\n\t\tint all=0,p=0;\n\t\t\n\t\tmemset(last,-1,sizeof(last));\n\t\tfor(int co=1;co<=m;co++)Mp[co].clear();\n\t\tfor(int l=1;l<=s1;l++)nxt[l]=s1+1;\n\t\tmemset(ans,-1,sizeof(ans));\n\t\tfor(int l=1;l<=s1;l++){\n//\t\t\tcout<<\"l=\"<<l<<endl;\n\t\t\twhile(all!=m && p<s1){\n\t\t\t\t++p;\n//\t\t\t\tcout<<\"p=\"<<p<<endl;\n\t\t\t\tfor(int k=0;k<C[p].size();k++){\n\t\t\t\t\tint xs=C[p][k].first,c=C[p][k].second;\n\t\t\t\t\tif(xs<=x){\n//\t\t\t\t\t\tcout<<\"insert \"<<xs<<' '<<c<<endl;\n\t\t\t\t\t\tMp[c].insert(p);\n\t\t\t\t\t\tis[c]++;\n\t\t\t\t\t\tall+=(is[c]==1);\n\t\t\t\t\t}\n\t\t\t\t}if(all==m)break;\n\t\t\t}\n\t\t\tif(all==m)ans[l]=Y[p];\n\t\t\telse ans[l]=Y[s1];\n//\t\t\tcout<<\"ans[\"<<l<<\"]=\"<<ans[l]<<' '<<p<<' '<<Y[0]<<' '<<Y[1]<<' '<<Y[2]<<' '<<Y[3]<<' '<<s1<<endl;\n\t\t\tfor(int k=0;k<C[l].size();k++){\n\t\t\t\tint xs=C[l][k].first,c=C[l][k].second;\n\t\t\t\tif(xs<=x){\n//\t\t\t\t\tcout<<\"delate \"<<xs<<' '<<c<<endl;\n\t\t\t\t\tis[c]--;\n\t\t\t\t\tall-=(is[c]==0);\n\t\t\t\t}\n\t\t\t}\n\t\t}//\u9884\u5904\u7406ans\n\t\tbuild(1,1,s1,ans,Y);Ans+=updateans(L,s0)*(X[x+1]-X[x])%mod*(X[1]-X[0])%mod;M(Ans);\n//\t\tcout<<\"Ans=\"<<Ans<<' '<<X[0]<<' '<<X[1]<<' '<<X[x]<<' '<<X[x+1]<<endl;\n\n\t\tfor(int h=2;h<=x;h++){\n\t\t\t//cout<<\"h=\"<<h<<endl;\n\t\t\tfor(int k=0;k<C2[h-1].size();k++){\n\t\t\t\tint y=C2[h-1][k].first,c=C2[h-1][k].second;\n//\t\t\t\tcout<<\"erase \"<<y<<' '<<c<<endl;\n\t\t\t\tMp[c].erase(Mp[c].find(y));\n\t\t\t\tint L,R;it=Mp[c].upper_bound(y);\n\t\t\t\tif(it==Mp[c].end())R=Y[s1];else R=Y[*it];\n\t\t\t\tif(it==Mp[c].begin())L=1;\n\t\t\t\telse{--it;L=*it;L++;}\n//\t\t\t\tcout<<\"L=\"<<L<<' '<<\"R=\"<<R<<endl;\n\t\t\t\tint rig=find(1,1,s1,R);\n//\t\t\t\tcout<<\"RIGHT=\"<<rig<<endl;\n\t\t\t\tif(L<=rig)add(1,1,s1,L,rig,R);\n\t\t\t}Ans+=updateans(L,s0)*(X[x+1]-X[x])%mod*(X[h]-X[h-1])%mod;M(Ans);\n//\t\t\tcout<<\"ANS=\"<<Ans<<' '<<x<<' '<<X[h]<<' '<<X[h-1]<<' '<<X[x+1]<<' '<<X[x]<<endl;\n\t\t}\n\t\t\n//\t\tcout<<\"Ans=\"<<Ans<<endl<<endl<<endl<<endl<<endl;\n\t}cout<<Ans<<endl;\n\t//cerr << 1.0*clock()/CLOCKS_PER_SEC << endl;\n\treturn 0;\n}\n```",
        "postTime": 1617539699,
        "uid": 35891,
        "name": "huangzirui",
        "ccfLevel": 0,
        "title": "CF1396D \u9898\u89e3"
    }
]