[
    {
        "content": "\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u677f\u5b50\u9898\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u66b4\u529b\u5efa\u8fb9 $\\mathcal O(n^2)$ \u80af\u5b9a\u4f1a TLE\n\n\u4f46\u4ed4\u7ec6\u5206\u6790\u53ef\u4ee5\u53d1\u73b0\uff0c\u9898\u9762\u4e2d\u6709\u4e00\u4e2a\u6211\u4eec\u975e\u5e38\u719f\u6089\u7684\u5b57\u773c\u201c**\u533a\u95f4**\u201d\uff0c\u8fd9\u542f\u793a\u6211\u4eec\uff0c\u53ef\u4e0d\u53ef\u4ee5\u4ee5\u6b64\u4f5c\u4e3a\u89e3\u9898\u7684\u7a81\u7834\u53e3\u5462\uff1f\n\n\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u60f3\u5230\u533a\u95f4\u6211\u4eec\u53ef\u4ee5\u8054\u60f3\u5230\u5404\u79cd\u6211\u4eec\u5f88\u719f\u6089\u7684 trick\uff0c\u5982\u524d\u7f00\u548c\u3001\u5dee\u5206\u3001\u7ebf\u6bb5\u6811\u7b49\u3002\n\n\u4f46\u5bf9\u4e8e\u6b64\u9898\u800c\u8a00\u524d\u7f00\u548c\u3001\u5dee\u5206\u4f3c\u4e4e\u90fd\u4e0d\u592a\u884c\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u7ebf\u6bb5\u6811\uff0c\u5229\u7528\u201c\u6bcf\u4e00\u4e2a\u533a\u95f4\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u7ebf\u6bb5\u6811\u4e0a $\\log n$ \u4e2a\u533a\u95f4\u201c\u6765\u51cf\u5c11\u8fb9\u7684\u4e2a\u6570\u3002\n\n\u6211\u4eec\u5c31\u62ff $2$ \u64cd\u4f5c\u6765\u4e3e\u4f8b\u5427\u3002\u73b0\u5728\u5047\u8bbe\u5047\u5982\u6709\u4e00\u4e2a\u70b9\u8981\u4e0e $[1,3]$ \u7684\u70b9\u8fde\u8fb9\u6743\u4e3a $w$ \u7684\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u5efa\u51fa\u7ebf\u6bb5\u6811\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/uxcyzg3d.png)\n\u5c06 $[1,3]$ \u62c6\u6210 $[1,2]$ \u4e0e $[3,3]$ \u7136\u540e\u5206\u522b\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $w$\uff08\u56fe\u4e2d\u6a59\u8272\u7684\u8fb9\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/sy08ow6r.png)\n\u4f46\u662f\u4ec5\u4ec5\u53ea\u8fde\u8fd9\u4e24\u6761\u8fb9\u662f\u8fdc\u8fdc\u4e0d\u591f\u7684\uff0c\u56e0\u4e3a\u4f60\u53ea\u5c06\u8fd9\u4e2a\u70b9\u4e0e**\u4e00\u4e2a\u533a\u95f4**\u8868\u793a\u7684\u70b9\u8fde\u4e86\u8fb9\uff0c\u5e76\u6ca1\u6709\u5c06\u5176\u8fde\u5230**\u5177\u4f53\u7684\u5355\u70b9**\u4e0a\u3002\n\n\u56e0\u6b64\u6211\u4eec\u8fd8\u4ece\u6bcf\u4e2a\u533a\u95f4\u5411\u5176\u5b50\u533a\u95f4\u8fde\u8fb9\uff0c\u7531\u4e8e\u4f60\u5411\u4e0b\u8d70\uff0c\u4ece\u4e00\u4e2a\u5927\u533a\u95f4\u5bf9\u5e94\u5230\u4e00\u4e2a\u5c0f\u533a\u95f4**\u6ca1\u6709\u4ee3\u4ef7**\uff0c\u56e0\u6b64\u8fd9\u4e9b\u8fb9\u7684\u8fb9\u6743\u4e3a $0$\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/p9kcyjv8.png)\n\n\u64cd\u4f5c $3$ \u4e5f\u540c\u7406\uff0c\u53ea\u4e0d\u8fc7\u628a\u4e4b\u524d\u8fde\u7684\u6240\u6709\u8fb9\u90fd\u53cd\u5411\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/plxxps82.png)\n\n---\n\n\u4ee5\u4e0a\u662f\u64cd\u4f5c $2$ \u4e0e\u64cd\u4f5c $3$ \u5206\u5f00\u6765\u8003\u8651\u7684\u60c5\u5f62\uff0c\u90a3\u4e48\u64cd\u4f5c $2$ \u4e0e\u64cd\u4f5c $3$ \u76f8\u7ed3\u5408\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u663e\u7136\u4f60\u4e0d\u80fd\u628a\u5b83\u4eec\u63c9\u5728\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e0a\uff0c\u56e0\u4e3a\u4f60\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u6761\u8fb9\u5411\u4e0a\u5411\u4e0b\u8fb9\u6743\u90fd\u4e3a $0$\uff0c\u6545\u4ece\u539f\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e5f\u4e3a $0$\uff0c\u8fd9\u2026\u2026\u8fd8\u73a9\u4e2a\u4ec0\u4e48\u554a\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u56e0\u6b64\u53ef\u4ee5\u60f3\u5230\u5efa\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u7b2c\u4e00\u68f5\u53ea\u8fde\u81ea\u4e0a\u800c\u4e0b\u7684\u8fb9\uff0c\u7b2c\u4e8c\u68f5\u53ea\u8fde\u81ea\u4e0b\u800c\u4e0a\u7684\u8fb9\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7s51hcxi.png)\n\n\u5bf9\u4e8e $2$ \u64cd\u4f5c\uff0c\u4f60\u5c31\u4ece\u7b2c\u4e8c\u68f5\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5411\u7b2c\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e2d\u7684\u5bf9\u5e94\u533a\u95f4\u8fde\u8fb9\uff08\u4e0b\u56fe\u4e2d\u6a59\u8272\u7684\u8fb9\uff09\u3002\n\n\u5bf9\u4e8e $3$ \u64cd\u4f5c\uff0c\u4f60\u5c31\u4ece\u7b2c\u4e8c\u68f5\u7ebf\u6bb5\u6811\u4e2d\u7684\u5bf9\u5e94\u533a\u95f4\u5411\u7b2c\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e2d\u7684\u53f6\u5b50\u8282\u70b9\u8fde\u8fb9\uff08\u4e0b\u56fe\u4e2d\u7c89\u8272\u7684\u8fb9\uff09\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/v62b75pr.png)\n\n\u8fd8\u6709\u4e00\u70b9\uff0c\u5c31\u662f\u4e24\u68f5\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5b9e\u9645\u4e0a\u662f\u540c\u4e00\u4e2a\u70b9\uff0c\u56e0\u6b64\u8981\u5728\u5b83\u4eec\u4e92\u76f8\u4e4b\u95f4\u8fde\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\uff08\u4e0b\u56fe\u4e2d\u9ec4\u8272\u7684\u8fb9\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/nciq2uft.png)\n\n---\n\n\u56fe\u5efa\u597d\u4e86\uff0c\u5269\u4e0b\u6765\u5c31\u662f\u677f\u5b50\uff1a\n\n```cpp\nconst int D=5e5;\nint n=read(),m=read(),st=read(),dist[1000005],leaf[100005];\nvector<pii> g[1000005];\nstruct node{\n\tint l,r;\n} s[100005<<2];\ninline void build(int k,int l,int r){\n\ts[k].l=l;s[k].r=r;\n\tif(l==r){\n\t\tleaf[l]=k;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tg[k].push_back(pii(k<<1,0));\n\tg[k].push_back(pii(k<<1|1,0));\n\tg[(k<<1)+D].push_back(pii(k+D,0));\n\tg[(k<<1|1)+D].push_back(pii(k+D,0));\n\tbuild(k<<1,l,mid);\n\tbuild(k<<1|1,mid+1,r);\n}\ninline void connect(int k,int l,int r,int v,int w,int tp){\n\tif(l<=s[k].l&&s[k].r<=r){\n\t\tif(tp) g[k+D].push_back(pii(v,w));\n\t\telse g[v].push_back(pii(k,w));\n\t\treturn;\n\t}\n\tint mid=(s[k].l+s[k].r)>>1;\n\tif(r<=mid) connect(k<<1,l,r,v,w,tp);\n\telse if(l>mid) connect(k<<1|1,l,r,v,w,tp);\n\telse connect(k<<1,l,mid,v,w,tp),connect(k<<1|1,mid+1,r,v,w,tp);\n}\nsigned main(){\n\tbuild(1,1,n);\n\tfz(i,1,m){\n\t\tint opt=read();\n\t\tif(opt==1){\n\t\t\tint v=read(),u=read(),w=read();\n\t\t\tg[leaf[v]].push_back(pii(leaf[u],w));\n\t\t}\n\t\telse{\n\t\t\tint v=read(),l=read(),r=read(),w=read();\n\t\t\tconnect(1,l,r,leaf[v],w,opt%2);\n\t\t}\n\t}\n\tfz(i,1,n) g[leaf[i]].push_back(pii(leaf[i]+D,0)),g[leaf[i]+D].push_back(pii(leaf[i],0));\n\tpriority_queue<pii,vector<pii>,greater<pii> > q;\n\tfillbig(dist);dist[leaf[st]+D]=0;q.push(pii(0,leaf[st]+D));\n\twhile(!q.empty()){\n\t\tpii p=q.top();q.pop();\n\t\tint x=p.se,sum=p.fi;\n//\t\tcout<<x<<endl;\n\t\tif(dist[x]<sum) continue;\n\t\tforeach(it,g[x]){\n\t\t\tint y=it->fi,z=it->se;\n\t\t\tif(dist[y]>sum+z){\n\t\t\t\tdist[y]=sum+z;\n\t\t\t\tq.push(pii(dist[y],y));\n\t\t\t}\n\t\t}\n\t}\n\tfz(i,1,n){\n\t\tif(dist[leaf[i]]==0x3f3f3f3f3f3f3f3fll) printf(\"-1 \");\n\t\telse printf(\"%lld \",dist[leaf[i]]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1596727997,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF786B \u3010Legacy\u3011"
    },
    {
        "content": "**\u9898\u610f\u5206\u6790**\n\n\u8fd9\u4e00\u9898\u6700\u4e3b\u8981\u662f\u6709\u4e09\u79cd\u64cd\u4f5c\uff1a1.\u8fdb\u884c\u5355\u70b9\u4e0e\u5355\u70b9\u8fde\u6709\u5411\u8fb9 2.\u8fdb\u884c\u5355\u70b9\u4e0e\u533a\u95f4\u8fde\u6709\u5411\u8fb9 3.\u8fdb\u884c\u533a\u95f4\u4e0e\u5355\u70b9\u8fde\u6709\u5411\u8fb9\u3002\u7136\u540e\u6c42\u6700\u77ed\u8def\u3002\n\n\u8fd9\u4e00\u9053\u9898\uff0c\u6700\u5927\u7684\u96be\u70b9\u4e0d\u5728\u6700\u77ed\u8def\uff08\u76f4\u63a5\u5957Dij\u6a21\u677f\uff09\uff0c\u800c\u5728\u4e8e\u5982\u4f55\u8fde\u8fb9\u3002\u5982\u679c\u6309\u7167\u9898\u610f\u6a21\u62df\uff0c\u4e00\u4e2a\u70b9\u5230\u533a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\u8fdb\u884c\u8fde\u63a5\uff0c\u5176\u590d\u6742\u5ea6\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u4f1a\u8fbe\u5230O(n*n)\uff08\u5373\u6bcf\u4e00\u4e2a\u70b9\u5411\u6574\u4e2a\u533a\u95f4\u8fde\u8fb9\uff09\uff0c\u4efb\u4f55\u4e00\u4e2a\u6709\u5e38\u8bc6\u7684\u4eba\u90fd\u80fd\u770b\u51fa\u8fd9\u6837\u4e00\u5b9a\u4f1aTLE\u7684\u3002\n\n\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\uff0c\u6700\u5927\u7684\u96be\u70b9\u5c31\u662f\u8981\u89e3\u51b3\u5355\u70b9\u4e0e\u533a\u95f4\u4e4b\u95f4\u7684\u64cd\u4f5c\u3002\u4e00\u770b\u5230\u533a\u95f4\uff0c\u6211\u4eec\u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u524d\u7f00\u548c\u3001\u5dee\u5206\u3001ST\u8868\u3001\u6811\u72b6\u6570\u7ec4\u3001\u7ebf\u6bb5\u6811\u3002\u5176\u5b9e\uff0c\u8fd9\u4e00\u9898\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u9053\u7279\u6b8a\u7684\u7ebf\u6bb5\u6811\u9898\u3002\n\n\u90a3\u4e48\u600e\u4e48\u628a\u4e00\u4e2a\u7ebf\u6bb5\u6811\u653e\u5230\u56fe\u91cc\u9762\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u53ea\u5efa\u7acb\u4e00\u4e2a\u7ebf\u6bb5\u6811\u662f\u5f88\u96be\u5b9e\u73b0\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u4e0d\u505a\u4e8c\u4e0d\u4f11\uff0c\u5c31\u5efa\u7acb\u4e24\u4e2a\u7ebf\u6bb5\u6811\u3002\n\n```cpp\nint n,q,s,cnt,treeOut[MAXN<<2],treeIn[MAXN<<2];\n```\n\n\u6211\u4eec\u7528treeOut\u4e13\u95e8\u5904\u7406\u7531\u7ebf\u6bb5\u6811\u5411\u5916\u8fde\u8fb9\uff0c\u5176\u6548\u679c\u5982\u56fe\u6240\u793a\uff1a\n![treeOut]( https://cdn.luogu.com.cn/upload/pic/36910.png)\n\n\u6709\u56fe\u53ef\u89c1\uff0c\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u5185\u5efa\u7acb\u4e86\u591a\u6761\u6709\u5411\u865a\u8fb9\u3002\u4e14treeIn\u548ctreeOut\u7684\u7ebf\u6bb5\u6811\u865a\u8fb9\u7684\u65b9\u5411\u662f\u76f8\u53cd\u7684\uff0c\u5982\u56fe\u5219\u662ftreeIn\uff1a\n![treeIn](https://cdn.luogu.com.cn/upload/pic/36911.png)\n\n\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u5efa\u7acb\u865a\u8fb9\uff0c\u8fd9\u91cc\u5c31\u7528\u4e00\u5f20\u56fe\u6765\u6f14\u793a\u4e00\u4e0b\uff1a\n![ErrTreeIn](https://cdn.luogu.com.cn/upload/pic/36912.png)\n\u7531\u56fe\u53ef\u77e5\uff0c\u9519\u8bef\u7684\u8fde\u8fb9\u4f1a\u5bfc\u81f4\u8bbf\u95ee\u7684\u533a\u95f4\u51fa\u9519\u3002\u6bd4\u5982\u5728\u8fd9\u5f20\u9519\u8bef\u7684\u56fe\u4e2d\uff0c\u4e00\u4e2a\u53ea\u80fd\u8bbf\u95ee[mid+1,right]\u7684\u8fde\u8fb9\u5374\u8bbf\u95ee\u5230\u4e86[left,right]\u3002\n\n***\u4ee3\u7801***\n\n```cpp\nstatic vector<pair<int,int>> edge[MAXN*10];\n```\n\u6211\u4eec\u4f7f\u7528vector\u5efa\u56fe\uff0c\u76f8\u6bd4\u4e8e\u94fe\u8868\u6765\u8bf4\u4f1a\u65b9\u4fbf\u4e00\u4e9b\uff082s,STL\u4e0d\u6002\uff09\u3002\n```cpp\ninline void build(int k,int l,int r){\n    if(l==r){\n        treeOut[k]=l;\n        treeIn[k]=l;\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(k<<1,l,mid);\n    build(k<<1|1,mid+1,r);\n    treeOut[k]=++cnt;\n    treeIn[k]=++cnt;\n    edge[treeOut[k<<1]].push_back make(treeOut[k],0);\n    edge[treeOut[k<<1|1]].push_back make(treeOut[k],0);\n    edge[treeIn[k]].push_back make(treeIn[k<<1],0);\n    edge[treeIn[k]].push_back make(treeIn[k<<1|1],0);\n}\ninline void updateIn(int k,int l,int r,int L,int R,int from,int cost){\n    if(L<=l&&r<=R){\n        edge[from].push_back(make(treeIn[k],cost));\n        return ;\n    }\n    int mid=(l+r)>>1;\n    if(L<=mid){\n        updateIn(k<<1,l,mid,L,R,from,cost);\n    }\n    if(mid<R){\n        updateIn(k<<1|1,mid+1,r,L,R,from,cost);\n    }\n}\ninline void updateOut(int k,int l,int r,int L,int R,int from,int cost){\n    if(L<=l&&r<=R){\n        edge[treeOut[k]].push_back(make(from,cost));\n        return ;\n    }\n    int mid=(l+r)>>1;\n    if(L<=mid){\n        updateOut(k<<1,l,mid,L,R,from,cost);\n    }\n    if(mid<R){\n        updateOut(k<<1|1,mid+1,r,L,R,from,cost);\n    }\n}\n```\n\u5e38\u89c4\u7684\u5efa\u6811\u64cd\u4f5c\uff0c\u6700\u5927\u7684\u533a\u522b\u662f\u8981\u5728\u5efa\u6811\u7684\u65f6\u5019\u8fd8\u8981\u8fdb\u884c\u5efa\u56fe\u64cd\u4f5c\u3002\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u50a8\u5b58\u7740\u8be5\u533a\u95f4\u5728\u56fe\u4e2d\u7684\u7f16\u53f7\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u8be5\u533a\u95f4\u5c31\u662f\u4e00\u4e2a\u70b9\u65f6,\u6811\u4e2d\u50a8\u5b58\u7684\u5c31\u662f\u6539\u70b9\u7684\u4fbf\u540e\uff0c\u5373\uff1a\n```cpp\nif(l==r){\n        treeOut[k]=l;\n        treeIn[k]=l;\n        return;\n}\n```\n\u5728\u8fd9\u9053\u9898\u4e2d\uff0cupdate\u7684\u4f5c\u7528\u4e0d\u5728\u4e8e\u4fee\u6539\u6811\u4e2d\u7684\u503c\uff0c\u800c\u662f\u5728\u4e8e\u5efa\u56fe\uff0c\u8fd9\u662f\u4ed6\u4e0e\u4e00\u822c\u7ebf\u6bb5\u6811\u7684\u533a\u522b\u3002\n\u4ee5\u4e0b\u662f\u5168\u90e8\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define ini(x,y) memset(x,y,sizeof(x))\n#define all(x) x.begin(),x.end()\n#define F(x,y,z) for(int x=y;x<=z;++x)\n#define D(x,y,z) for(int x=y;x>=z;--x)\n#define cint const int&\nusing namespace std;\n/*\u8bf7\u4ee5C++11\u63d0\u4ea4,Develop By ZhangXinjie\uff08\u6c5f\u5357\u67da\u5b50\uff09*/\nconst int MAXN=static_cast<int>(1e5)+100;\nconst long long INF=0x3f3f3f3f3f3f3f3f;\nconst int oo=0x3f3f3f3f;\n#define int long long\ninline int read(){\n    int x = 0, y = 1, c = getchar();\n    while (c>'9' || c<'0') { if (c == '-')y = -1; c = getchar(); }\n    while (c >= '0'&&c <= '9') { x = x * 10 + c - '0'; c = getchar(); }\n    return x * y;\n}\n#define make(x,y) (make_pair(x,y))\n#define to first\n#define v second\nstatic vector<pair<int,int>> edge[MAXN*10];\nstatic int n,q,s,cnt,treeOut[MAXN<<2],treeIn[MAXN<<2];\ninline void build(int k,int l,int r){\n    if(l==r){\n        treeOut[k]=l;\n        treeIn[k]=l;\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(k<<1,l,mid);\n    build(k<<1|1,mid+1,r);\n    treeOut[k]=++cnt;\n    treeIn[k]=++cnt;\n    edge[treeOut[k<<1]].push_back make(treeOut[k],0);\n    edge[treeOut[k<<1|1]].push_back make(treeOut[k],0);\n    edge[treeIn[k]].push_back make(treeIn[k<<1],0);\n    edge[treeIn[k]].push_back make(treeIn[k<<1|1],0);\n}\ninline void updateIn(int k,int l,int r,int L,int R,int from,int cost){\n    if(L<=l&&r<=R){\n        edge[from].push_back(make(treeIn[k],cost));\n        return ;\n    }\n    int mid=(l+r)>>1;\n    if(L<=mid){\n        updateIn(k<<1,l,mid,L,R,from,cost);\n    }\n    if(mid<R){\n        updateIn(k<<1|1,mid+1,r,L,R,from,cost);\n    }\n}\ninline void updateOut(int k,int l,int r,int L,int R,int from,int cost){\n    if(L<=l&&r<=R){\n        edge[treeOut[k]].push_back(make(from,cost));\n        return ;\n    }\n    int mid=(l+r)>>1;\n    if(L<=mid){\n        updateOut(k<<1,l,mid,L,R,from,cost);\n    }\n    if(mid<R){\n        updateOut(k<<1|1,mid+1,r,L,R,from,cost);\n    }\n}\nstruct heapnode{\n    int pos,dis;\n    bool operator<(heapnode right)const{\n        return dis>right.dis;\n    }\n};\n\nstatic int dis[MAXN*10];\nstatic priority_queue<heapnode>heap;\ninline void dij(){\n    ini(dis,0x3f);\n    dis[s]=0;\n    heapnode tmp;\n    tmp.dis=0;\n    tmp.pos=s;\n    heap.push(tmp);\n    while(!heap.empty()){\n        heapnode now=heap.top();\n        heap.pop();\n        if(dis[now.pos]!=now.dis){\n            continue;\n        }\n        for(auto &i:edge[now.pos]){\n            if(i.to==0){\n                continue;\n            }\n            if(i.v+now.dis<dis[i.to]){\n                dis[i.to]=i.v+now.dis;\n                tmp.pos=i.to;\n                tmp.dis=dis[i.to];\n                heap.push(tmp);\n            }\n        }\n    }\n}\nsigned main(){\n    n=read();\n    q=read();\n    s=read();\n    cnt=n;\n    build(1,1,n);\n    F(i,1,q){\n        int com=read();\n        if(com==1){\n            int from=read(),to=read(),v=read();\n            edge[from].push_back(make(to,v));\n        }else{\n            if(com==2){\n                int from=read(),l=read(),r=read(),v=read();\n                updateIn(1,1,n,l,r,from,v);\n            }else{\n                int from=read(),l=read(),r=read(),v=read();\n                updateOut(1,1,n,l,r,from,v);\n            }\n        }\n    }\n    dij();\n    F(i,1,n){\n        printf(\"%lld \",(dis[i]==INF)?-1:dis[i]);\n    }\n    return 0;\n}\n\n```\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4f7f\u7528dij\u7b97\u6cd5\u800c\u4e0d\u7528SPFA\uff0c\u56e0\u4e3a\n```\n1<=w<=10^9\n```\n\u4ee5\u53caNOI2018D1T1\u7684\u8840\u7684\u6559\u8bad\u3002\n\n\u8fd8\u6709\uff0c\u8bb0\u5f97\u4f7f\u7528long long",
        "postTime": 1539044941,
        "uid": 86069,
        "name": "\u5f20\u946b\u6770",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF786B \u3010Legacy\u3011"
    },
    {
        "content": "\u5ba3\u4f20\u4e00\u6ce2 [blog](https://www.cnblogs.com/maoyiting/)~\n\n### \u9898\u76ee\u5927\u610f\n\n\u6709 $n$ \u4e2a\u70b9\u3001$q$ \u6b21\u64cd\u4f5c\u3002\u6bcf\u4e00\u79cd\u64cd\u4f5c\u4e3a\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\u4e2d\u7684\u4e00\u79cd\uff1a\n\n- \u64cd\u4f5c\u4e00\uff1a\u8fde\u4e00\u6761 $u\\to v$ \u7684\u6709\u5411\u8fb9\uff0c\u6743\u503c\u4e3a $w$\u3002\n\n- \u64cd\u4f5c\u4e8c\uff1a\u5bf9\u4e8e\u6240\u6709 $i\\in [l,r]$ \u8fde\u4e00\u6761 $u\\to i$ \u7684\u6709\u5411\u8fb9\uff0c\u6743\u503c\u4e3a $w$\u3002\n\n- \u64cd\u4f5c\u4e09\uff1a\u5bf9\u4e8e\u6240\u6709 $i\\in [l,r]$ \u8fde\u4e00\u6761 $i\\to u$ \u7684\u6709\u5411\u8fb9\uff0c\u6743\u503c\u4e3a $w$\u3002\n\n\u6c42\u4ece\u70b9 $s$ \u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u3002$1\\leq n,q\\leq 10^5,1\\leq w\\leq 10^9$\u3002\n\n### Solution\n\n\u8003\u8651\u66b4\u529b\u5efa\u56fe\u3002\u663e\u7136\u4e0d\u80fd\u901a\u8fc7\u6b64\u9898\u3002\n\n\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u4e86\u3002\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5c31\u662f\u5229\u7528\u7ebf\u6bb5\u6811\uff0c\u51cf\u5c11\u8fde\u8fb9\u6570\u91cf\uff0c\u4ece\u800c\u964d\u4f4e\u590d\u6742\u5ea6\u3002\n\n#### \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n\n\u5148\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\u5047\u5982\u73b0\u5728\u6211\u4eec\u8981\u4ece $8$ \u53f7\u70b9\u5411\u533a\u95f4 $[3,7]$ \u7684\u6240\u6709\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a $w$ \u6709\u5411\u8fb9\u3002\n\n![https://img2020.cnblogs.com/blog/1859218/202010/1859218-20201003152331500-2047892066.png](https://i.loli.net/2020/10/03/5kstpAXrwGiTdBc.png)\n\n\u90a3\u4e48\u600e\u4e48\u8fde\u8fb9\uff1f\u628a\u533a\u95f4 $[3,7]$ \u62c6\u6210 $[3,4]$\u3001$[5,6]$ \u548c $[7,7]$ \u7136\u540e\u5206\u522b\u8fde\u8fb9\u3002\n\n\u5c31\u8fd9\u6837\uff1a\uff08\u5982\u4e0b\u56fe\u6240\u793a\u3002\u5176\u4e2d\u9ed1\u8272\u666e\u901a\u8fb9\u7684\u8fb9\u6743\u4e3a $0$\uff0c\u7c89\u8272\u8fb9\u7684\u8fb9\u6743\u4e3a $w$\u3002\uff09\n\n![https://img2020.cnblogs.com/blog/1859218/202010/1859218-20201003152713737-813466449.png](https://i.loli.net/2020/10/03/A6u3Bw5vSJXmRqF.png)\n\n\u539f\u6765\u6211\u4eec\u8981\u8fde $5$ \u6761\u8fb9\uff0c\u73b0\u5728\u53ea\u9700\u8981\u8fde $3$ \u6761\u8fb9\uff0c\u4e5f\u5c31\u662f $\\lceil \\log_2 7\\rceil$ \u6761\u8fb9\u3002\n\n\u4e8e\u662f $O(n)$ \u7684\u8fb9\u6570\u5c31\u4f18\u5316\u6210\u4e86 $O(\\log n)$\u3002\n\n\u90a3\u4e48\u64cd\u4f5c\u4e09\u7528\u548c\u64cd\u4f5c\u4e8c\u7c7b\u4f3c\u7684\u65b9\u6cd5\u8fde\u8fb9\u3002\u4ece\u533a\u95f4 $[3,7]$ \u7684\u6240\u6709\u70b9\u5411 $8$ \u53f7\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a $w$ \u6709\u5411\u8fb9\uff1a\uff08\u5176\u5b9e\u5c31\u662f\u8fb9\u53cd\u4e86\u4e2a\u65b9\u5411\uff09\n\n![https://img2020.cnblogs.com/blog/1859218/202010/1859218-20201003155545073-505477788.png](https://i.loli.net/2020/10/03/C59jaEubSL3Rfd4.png)\n\n\u4ee5\u4e0a\u662f\u64cd\u4f5c\u4e8c\u4e0e\u64cd\u4f5c\u4e09\u5206\u5f00\u6765\u8003\u8651\u7684\u60c5\u5f62\uff0c\u90a3\u4e48\u64cd\u4f5c\u4e8c\u4e0e\u64cd\u4f5c\u4e09\u76f8\u7ed3\u5408\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u8003\u8651\u5efa\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u7b2c\u4e00\u68f5\u53ea\u8fde\u81ea\u4e0a\u800c\u4e0b\u7684\u8fb9\uff0c\u7b2c\u4e8c\u68f5\u53ea\u8fde\u81ea\u4e0b\u800c\u4e0a\u7684\u8fb9\u3002\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u628a\u7b2c\u4e00\u68f5\u6811\u79f0\u4f5c\u201c\u51fa\u6811\u201d\uff0c\u7b2c\u4e8c\u68f5\u6811\u79f0\u4f5c\u201c\u5165\u6811\u201d\u3002\n\n\u521d\u59cb\u65f6\u81ea\u4e0a\u800c\u4e0b\u6216\u81ea\u4e0b\u800c\u4e0a\u5730\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0e\u5b83\u7684\u7236\u4eb2\u4e4b\u95f4\u8fde\u8fb9\u3002\u7531\u4e8e\u4e24\u68f5\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5b9e\u9645\u4e0a\u662f\u540c\u4e00\u4e2a\u70b9\uff0c\u56e0\u6b64\u8981\u5728\u5b83\u4eec\u4e92\u76f8\u4e4b\u95f4\u8fde\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u3002\u521d\u59cb\u65f6\u662f\u8fd9\u6837\u7684\uff1a\n\n![https://img2020.cnblogs.com/blog/1859218/202010/1859218-20201003175442575-1059055629.png](https://i.loli.net/2020/10/03/MsNixweUIfAVojp.png)\n\n\u5efa\u6811\u90e8\u5206\u7684\u4ee3\u7801\uff1a\uff08\u4ee3\u7801\u4e2d\u7684 $K$ \u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u6839\u636e\u6570\u636e\u8303\u56f4\u800c\u5b9a\u3002\u5efa\u51fa\u6811\u548c\u5165\u6811\u4e5f\u53ef\u4ee5\u5206\u522b\u7528\u4e24\u4e2a\u51fd\u6570\u5b9e\u73b0\uff0c\u8fd9\u6837\u5c31\u7528\u4e0d\u5230 $K$ \u4e86\u3002\uff09\n\n```cpp\nvoid build(int p,int l,int r){\n      if(l==r){a[l]=p;return ;}    //a: \u8bb0\u5f55\u53f6\u5b50\u8282\u70b9\u7684\u7f16\u53f7 \n      add(p,p<<1,0),add(p,p<<1|1,0);    //\u51fa\u6811\uff08\u4ece p \u5411 p \u7684\u5de6\u53f3\u513f\u5b50\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a 0 \u7684\u8fb9\uff09 \n      add(p<<1+K,p+K,0),add(p<<1|1+K,p+K,0);    //\u5165\u6811\uff08\u4ece p \u7684\u5de6\u53f3\u513f\u5b50\u5411 p \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a 0 \u7684\u8fb9\uff09 \n      build(p<<1,l,mid);\n      build(p<<1|1,mid+1,r); \n}\n//\u4e3b\u51fd\u6570\u4e2d\uff1a \nfor(int i=1;i<=n;i++)\n      add(a[i],a[i]+K,0),add(a[i]+K,a[i],0);     //\u4e24\u68f5\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4e4b\u95f4\u8fde\u8fb9 \n```\n\n\u63a5\u4e0b\u6765\uff1a\n\n- \u5bf9\u4e8e\u64cd\u4f5c\u4e00\uff0c\u5c31\u4ece\u5165\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5411\u51fa\u6811\u7684\u53f6\u5b50\u8282\u70b9\u8fde\u8fb9\u3002\n\n- \u5bf9\u4e8e\u64cd\u4f5c\u4e8c\uff0c\u5c31\u4ece\u5165\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5411\u51fa\u6811\u4e2d\u7684\u5bf9\u5e94\u533a\u95f4\u8fde\u8fb9\u3002\n\n- \u5bf9\u4e8e\u64cd\u4f5c\u4e09\uff0c\u5c31\u4ece\u5165\u6811\u4e2d\u7684\u5bf9\u5e94\u533a\u95f4\u5411\u51fa\u6811\u4e2d\u7684\u53f6\u5b50\u8282\u70b9\u8fde\u8fb9\u3002\n\n\u4e3e\u4e2a\u6817\u5b50\u3002\u6bd4\u5982\u73b0\u5728\u6211\u4eec\u8981\u4ece $8$ \u53f7\u70b9\u5411\u533a\u95f4 $[3,7]$ \u7684\u6240\u6709\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a $w$ \u6709\u5411\u8fb9\u3002\u90a3\u4e48\u5c31\u5982\u56fe\u6240\u793a\u8fde\u8fb9\uff1a\uff08\u4e3a\u4e86\u8ba9\u56fe\u66f4\u6e05\u695a\uff0c\u56fe\u4e2d\u628a\u5165\u6811\u548c\u51fa\u6811\u53f6\u5b50\u8282\u70b9\u4e4b\u95f4\u76f8\u8fde\u7684\u8fb9\u7701\u7565\u4e86\u3002\uff09\n\n![https://img2020.cnblogs.com/blog/1859218/202010/1859218-20201003180159361-1510386633.png](https://i.loli.net/2020/10/03/bnOMekypKX4aEQs.png)\n\n\u8fde\u8fb9\u90e8\u5206\u7684\u4ee3\u7801\uff1a\n\n```cpp\nvoid modify(int p,int l,int r,int lx,int rx,int v,int w){\n\tif(l>=lx&&r<=rx){\t//\u5982\u679c\u5f53\u524d\u533a\u95f4\u88ab\u6db5\u76d6\n\t\tif(opt==2) add(v+K,p,w);\t//\u5bf9\u4e8e\u64cd\u4f5c\u4e8c\uff0c\u5c31\u4ece\u5165\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5411\u51fa\u6811\u4e2d\u7684\u5bf9\u5e94\u533a\u95f4\u8fde\u8fb9\u3002\n\t\telse add(p+K,v,w);\t//\u5bf9\u4e8e\u64cd\u4f5c\u4e09\uff0c\u5c31\u4ece\u5165\u6811\u4e2d\u7684\u5bf9\u5e94\u533a\u95f4\u5411\u51fa\u6811\u4e2d\u7684\u53f6\u5b50\u8282\u70b9\u8fde\u8fb9\u3002\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tif(lx<=mid) modify(p<<1,l,mid,lx,rx,v,w);\n\tif(rx>mid) modify(p<<1|1,mid+1,r,lx,rx,v,w);\n} \n//\u4e3b\u51fd\u6570\u4e2d\uff1a\nfor(int i=1;i<=m;i++){\n\tscanf(\"%lld\",&opt);\n\tif(opt==1) scanf(\"%lld%lld%lld\",&x,&y,&z),add(a[x]+K,a[y],z);\t//\u5bf9\u4e8e\u64cd\u4f5c\u4e00\uff0c\u5c31\u4ece\u5165\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5411\u51fa\u6811\u7684\u53f6\u5b50\u8282\u70b9\u8fde\u8fb9\u3002\n\telse{\n\t\tscanf(\"%lld%lld%lld%lld\",&x,&l,&r,&w);\n\t\tmodify(1,1,n,l,r,a[x],w);\n\t}\n}\n```\n\n[\u5b8c\u6574\u4ee3\u7801](https://www.cnblogs.com/maoyiting/p/13764109.html)",
        "postTime": 1601729978,
        "uid": 171807,
        "name": "maoyiting",
        "ccfLevel": 7,
        "title": "CF786B  Legacy"
    },
    {
        "content": "\u5177\u4f53\u53c2\u8003\u6211\u7684[blog][blog](~~\u987a\u4fbf\u9a97\u4e00\u6ce2\u70b9\u51fb\u91cf~~)\n\n\u9898\u76ee\u610f\u601d\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4f60\u6709\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n `$1$ $u$ $v$ $w$` \u4ece$u$\u5411$v$\u8fde\u4e00\u6761\u6743\u503c\u4e3a$w$\u7684\u6709\u5411\u8fb9\n \n `$2$ $u$ $L$ $R$ $w$` \u4ece$u$\u5411$L$\u81f3$R$\u7684\u6240\u6709\u7ed3\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3aw\u7684\u6709\u5411\u8fb9\n \n `$3$ $u$ $L$ $R$ $w$` \u4ece$L$\u81f3$R$\u7684\u6240\u6709\u7ed3\u70b9\u5411$u$\u8fde\u4e00\u6761\u6743\u503c\u4e3aw\u7684\u6709\u5411\u8fb9\n \n\u9996\u5148\u770b\u5230\u9898\u76ee\uff0c\u9a6c\u4e0a\u5c31\u660e\u767d\u4e0d\u662f\u66b4\u529b\u80fd\u591f\u89e3\u51b3\u7684\u4e8b\u60c5\uff08\u6bd5\u7adf\u4eba\u5bb6\u662fDiv.1\u7684B\u554a\uff09\uff0c\u4f46\u662f\u770b\u5230L\u548cR\uff0c\u6b63\u5e38\u4eba\u5e94\u8be5\u90fd\u4f1a\u5f80\u7ebf\u6bb5\u6811\u8fd9\u91cc\u60f3\u4e00\u60f3\u3002\u6ca1\u9519\uff0c\u6807\u7b97\u5c31\u662f\u7ebf\u6bb5\u6811\u56fe\u8bba\u5efa\u6a21+\u6700\u77ed\u8def\u3002\n\n\u7531\u4e8e\u8fde\u7684\u662f\u6709\u5411\u8fb9\uff0c\u4e00\u68f5\u7ebf\u6bb5\u6811\u53ef\u80fd\u96be\u4ee5\u6ee1\u8db3\u6211\u4eec\u7684\u8981\u6c42\uff0c\u90a3\u5c31\u5efa\u4e24\u68f5\u7ebf\u6bb5\u6811\u5427\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n----\n```\n\u6837\u4f8b\u8f93\u5165\uff1a\n4 3 1\n3 4 1 3 1\n2 1 2 4 2\n1 2 3 3\n\u6837\u4f8b\u8f93\u51fa\uff1a\n0 2 2 1\n```\n----\n\n\u6837\u4f8b\u89e3\u91ca\uff1a\n\u4f60\u6709\u4e09\u4e2a\u64cd\u4f5c\uff0c\u9996\u5148\u7531[1, 3]\u4e2d\u6240\u6709\u7ed3\u70b9\u54114\u53f7\u7ed3\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a1\u7684\u6709\u5411\u8fb9\n\u5176\u6b21\uff0c\u4ece1\u53f7\u7ed3\u70b9\u51fa\u53d1\u5411[2, 4]\u4e2d\u5de6\u53f3\u7ed3\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a2\u7684\u6709\u5411\u8fb9\uff0c\u6700\u540e\uff0c\u4ece2\u52303\u8fde\u4e00\u6761\u6743\u503c\u4e3a1\u7684\u6709\u5411\u8fb9\u3002\n\u5199\u8d34\u4e00\u4e2a\u4eb2\u81ea\u753b\u7684\u56fe~\n![](https://img-blog.csdn.net/20180521210255103?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Rpb2dlbmVzXw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\u770b\u5230\u8fd9\u5f20\u56fe\u5e94\u8be5\u5c31\u6bd4\u8f83\u6e05\u6670\u4e86\uff0c\u7ed91\u548c2\u4e24\u4e2a\u64cd\u4f5c\u5206\u522b\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u52a0\u8fb9\uff08\u5177\u4f53\u89e3\u91ca\u8d77\u6765\u6709\u70b9\u9ebb\u70e6\uff0c\u8d34\u4ee3\u7801\u7684\u65f6\u5019\u5199\u5199\u6ce8\u91ca\u89e3\u91ca\u4e00\u4e0b\uff09\uff0c\u7136\u540e\u5c31\u80fd\u5f88\u6e05\u6670\u7684\u770b\u5230\u4e00\u4e2a\u56fe\u8bba\u7684\u6a21\u578b\uff0c\u7136\u540e\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u5566~\n\n----\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#define N 100010\n#define M 300110\n#define lint long long\n#define min(x, y) ((x) < (y) ? (x) : (y))\nint n, m, s, cnt, root1, root2;\nint head[M], lc[M], rc[M], tot;\nstruct edge {\n\tint v, w, nxt; \n}edge[N * 20];\ninline void AddEdge(int u, int v, int w) { //\u5728\u56fe\u4e2d\u6dfb\u52a0\u4e00\u6761\u4eceu\u8fde\u5411v\u7684\u6743\u503c\u4e3aw\u7684\u5355\u5411\u8fb9\n    edge[++tot].v = v, edge[tot].w = w, edge[tot].nxt = head[u]; head[u] = tot; //\u524d\u5411\u661f\u5b58\u8fb9\n}\nvoid build1(int &p,int l,int r) { //build\u5173\u4e8e2\u64cd\u4f5c\u7684\u7ebf\u6bb5\u6811\n    if (l == r) {\n\t\tp = l; //\u5df2\u7ecf\u662f\u5b50\u8282\u70b9\uff0c\u76f4\u63a5\u8d4b\u503c\uff0c\u4ee5\u4fbf\u540e\u9762\u52a0\u8fb9\u3002\n\t\treturn;\n\t}\n    p = ++cnt;  //\u6570\u7ec4\u6a21\u62df\u94fe\u8868\n    int mid = (l + r) >> 1;\n    build1(lc[p], l, mid);\n    build1(rc[p], mid + 1, r);\n    AddEdge(p, lc[p], 0); //\u4ecep\u5411p\u7684\u5de6\u53f3\u5b50\u6811\u6dfb\u52a0\u4e00\u6761\u6743\u503c\u4e3a0\u7684\u6709\u5411\u8fb9\n\tAddEdge(p, rc[p], 0); //\u4e0a\u56fe\u7684\u5de6\u8fb9\u4e00\u534a\u7684\u7070\u8272\u8fb9\u5c31\u662f\u8fd9\u4e2abuild\u521b\u5efa\u7684\n}\nvoid build2(int &p, int l, int r) { //build\u5173\u4e8e3\u64cd\u4f5c\u7684\u7ebf\u6bb5\u6811\n    if (l == r) { \n\t\tp = l; \n\t\treturn;\n\t}\n    p = ++cnt;\n    int mid = (l + r) >> 1;\n    build2(lc[p], l, mid);\n    build2(rc[p], mid + 1, r);\n    AddEdge(lc[p], p, 0); //\u4ecep\u7684\u5de6\u53f3\u5b50\u6811\u5411p\u6dfb\u52a0\u4e00\u6761\u6743\u503c\u4e3a0\u7684\u6709\u5411\u8fb9\n\tAddEdge(rc[p], p, 0); //\u53f3\u8fb9\u4e00\u534a\u7684\u7070\u8272\u8fb9\u5c31\u662f\u8fd9\u4e2abuild\u521b\u5efa\u7684\n}\nint L, R;\nvoid updata(int p, int l, int r, int u, int w, int type) {\n    if(L <= l && r <= R) { //\u5b8c\u5168\u6db5\u76d6\u76f4\u63a5\u6839\u636etype\u52a0\u8fb9\n        type == 2 ? AddEdge(u, p, w) : AddEdge(p, u, w);\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if (L <= mid) updata(lc[p], l, mid, u, w, type);\n    if (mid < R) updata(rc[p], mid + 1, r, u, w, type);\n}\nconst lint INF = 0x3F3F3F3F3F3F3F3F;\nlint dist[M];\nstd::queue<int> Q;\nvoid SPFA(int s) {  //\u6700\u77ed\u8def\u90e8\u5206\n    memset(dist, 0x3F, sizeof dist);\n    dist[s] = 0; Q.push(s);\n    while(!Q.empty()) {\n        int u = Q.front(); Q.pop();\n        for(int i = head[u]; i; i = edge[i].nxt) {\n            int v = edge[i].v, w = edge[i].w;\n            if (dist[u] + w < dist[v]) \n\t\t\t\tdist[v] = dist[u] + w,\n\t\t\t\tQ.push(v);\n        }\n    }\n}\nint main() {\n\tscanf(\"%d%d%d\", &n, &m, &s);\n    cnt = n; //\u7531\u4e8e\u5efa\u8fb9\u8981\u6c42\uff0c\u7ebf\u6bb5\u6811\u7684\u7ed3\u70b9\u4ecen+1\u5f00\u59cb\u7f16\u53f7\n    build1(root1, 1, n); \n\tbuild2(root2, 1, n);\n    while (m--) {\n        int opt, u, v, w;\n\t\tscanf(\"%d\", &opt);\n        if(opt == 1) {\n\t\t\tscanf(\"%d%d%d\", &u, &v, &w);\n            AddEdge(u, v, w); //\u7531\u4e8e\u4e0a\u9762\u5bf9\u53f6\u5b50\u7ed3\u70b9\u7684\u5904\u7406\uff0c\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u52a0\u8fb9\n        }\n        else {\n\t\t\tscanf(\"%d%d%d%d\", &u, &L, &R, &w);\n        \tupdata(opt == 2 ? root1 : root2, 1, n, u, w, opt);\n        }\n    }\n    SPFA(s);\n    for(int i = 1; i <= n; i++) \n\t\tstd::cout << (dist[i] < INF ? dist[i] : -1) << \" \";\n    return 0;\n}\n```\n\n\n[blog]:https://blog.csdn.net/diogenes_/article/details/80396914",
        "postTime": 1526947116,
        "uid": 12472,
        "name": "Nekroz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF786B \u3010Legacy\u3011"
    },
    {
        "content": "# \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5b66\u4e60\u7b14\u8bb0\n\n## \u524d\u8a00\n\n\u505a\u4e86\u9898\u603b\u8fd8\u662f\u8981\u5199\u4e00\u7bc7\u535a\u5ba2\u8bb0\u5f55\u4e00\u4e0b\u3002\n\n\u6bd5\u7adf\u662f\u6bd4\u8f83\u7ecf\u5178\u7684 trick\n\n\u867d\u7136\u5495\u4e86\u5f88\u4e45\u4f46\u4e3a\u65f6\u4e0d\u665a\u3002\n\n## \u6982\u8ff0\n\n\u5bf9\u4e8e\u4e00\u7c7b\u9898\u76ee\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4 $[l_0,r_0]$ \u5411\u53e6\u5916\u4e00\u4e2a\u533a\u95f4 $[l_1,r_1]$ \u4e2d\u5bf9\u5e94\u7684\u4e24\u70b9\u4e00\u4e00\u8fde\u8fb9\u3002\n\n\u5982\u679c\u4e00\u4e00\u8fde\u8fb9\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u662f $\\mathcal{O(n^2)}$ \u7684\uff0c\u65f6\u7a7a\u4e0d\u8db3\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u95ee\u9898\uff0c\u4e00\u822c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u5904\u7406\u3002\n\n\u7ebf\u6bb5\u6811\u662f\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6bcf\u4e00\u4e2a\u533a\u95f4\u90fd\u53ef\u4ee5\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e0a $\\mathcal{\\log n}$ \u4e2a\u533a\u95f4\u7684\u6027\u8d28\u6765\u51cf\u5c11\u8fb9\u7684\u4e2a\u6570\u3002\n\n## \u7b97\u6cd5\u6d41\u7a0b\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5177\u4f53\u7684\u533a\u95f4\uff0c\u6211\u4eec\u5fc5\u5b9a\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u627e\u5230\u5408\u7406\u7684\u5bf9\u5e94\u533a\u95f4\uff0c\u5e76\u4e14\u5411\u4ed6\u4eec\u8fde\u8fb9\u3002\n\n\u5982\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vqsxuyxc.png)\n\n\u53ea\u8fd9\u6837\u8fde\u8fb9\u662f\u4e0d\u8db3\u7684\u3002\n\n\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u5bf9\u4e8e\u533a\u95f4\u4e2d\u7684\u6240\u6709\u70b9\u90fd\u9700\u8981\u8fde\u8fb9\u3002\n\n\u89e3\u51b3\u65b9\u6848\u662f\u76f4\u63a5\u5c06\u7236\u533a\u95f4\u5411\u5b50\u533a\u95f4\u8fde\u8fb9\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fb9\u6743\u662f $0$ \u3002\n\n\u5b9e\u9645\u610f\u4e49\u662f\u7236\u4eb2\u533a\u95f4\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165\u5b50\u533a\u95f4\uff0c\u4ee3\u4ef7\u662f\u96f6\u3002\n\n\u7236\u533a\u95f4\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6240\u6709\u5b50\u533a\u95f4\u7684\u72b6\u6001\u53e0\u52a0\uff0c\u6216\u8005\u662f\u603b\u4f53\u72b6\u6001\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/15j9cfog.png)\n\n\u76f8\u5bf9\u5e94\u7684\uff0c\u8fd8\u9700\u8981\u53e6\u5916\u4e00\u9897\u6811\uff0c\u5185\u90e8\u662f\u5b50\u8282\u70b9\u5411\u7236\u8282\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u662f $0$\u200b.\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/yqlhz857.png)\n\n\u63a5\u4e0b\u6765\u9700\u8981\u8003\u8651\u7684\u95ee\u9898\u5c31\u662f\uff0c\u8fd9\u4e24\u68f5\u6811\u5185\u53f6\u5b50\u8282\u70b9\u90fd\u662f\u539f\u56fe\u4e2d\u7684\u8282\u70b9\uff0c\u672c\u8d28\u4e0a\u5176\u5b9e\u662f\u76f8\u540c\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u5bf9\u5e94\u7684\u53f6\u5b50\u8282\u70b9\u4e5f\u8981\u4e92\u76f8\u8fde\u8fb9\uff0c\u8fb9\u6743\u662f $0$\u200b\u200b \u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/80hxa22q.png)\n\n\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u662f\u8fde\u8fb9\u7684\u65b9\u5411\u3002\n\n\u9996\u5148\u660e\u786e\u4ee5\u4e0b\u5b9a\u4e49\uff1a\n\n**\u5165\u6811** \uff1a\u5904\u7406\u8fdb\u5165\u8282\u70b9\u7684\u6811\n\n**\u51fa\u6811** \uff1a\u5904\u7406\u8f93\u51fa\u8282\u70b9\u7684\u6811\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5165\u6811\u4e2d\u7684\u8282\u70b9\u5e94\u8be5\u662f\u5bf9\u5e94\u8d77\u59cb\u8282\u70b9\uff0c\u800c\u51fa\u6811\u4e2d\u7684\u8282\u70b9\u5e94\u8be5\u662f\u5bf9\u5e94\u7ed3\u675f\u8282\u70b9\u3002\n\n\u81ea\u7136\u8fde\u8fb9\u4e5f\u5e94\u8be5\u662f\u7531\u521d\u59cb\u8282\u70b9\u5411\u7ed3\u675f\u8282\u70b9\u8fde\u8fb9\u3002\n\n\u6839\u636e\u4e0a\u9762\u7684\u8bf4\u6cd5\uff0c\u6211\u4eec\u5e94\u5f53\u79f0\u4e0a\u56fe\u4e2d\u53f3\u4fa7\u7684\u6811\u4e3a\u5165\u6811\uff0c\u5de6\u4fa7\u7684\u6811\u4e3a\u51fa\u6811\u3002\n\n\u8fd9\u4e00\u70b9\u53ef\u80fd\u4f1a\u4e0e\u4e00\u90e8\u5206\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u7684\u5165\u95e8\u535a\u5ba2\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u662f\u6211\u4e2a\u4eba\u5728\u7ecf\u8fc7\u659f\u914c\u4e4b\u540e\u9009\u62e9\u4e86\u8fd9\u4e00\u79cd\u66f4\u65b9\u4fbf\u8bb0\u5fc6\u4e0e\u7406\u89e3\u7684\u8bf4\u6cd5\u3002\n\n\u5bf9\u4e8e\u51fa\u6811\u4e0e\u5165\u6811\u7684\u8fde\u8fb9\u65b9\u5411\u662f\u6709\u7740\u4e25\u683c\u8981\u6c42\u7684\u3002\n\n\u5982\u679c\u4e0d\u614e\u5c06\u8fb9\u8fde\u53cd\uff0c\u6bd4\u5982\u9020\u6210\u4e86\u5165\u6811\u4e2d\u5374\u51fa\u73b0\u4e86\u8fb9\u5411\u6811\u4e2d\u8fde\u7684\u60c5\u51b5\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/uo7x9c7c.png)\n\n\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u539f\u672c\u8282\u70b9 $u$ \u53ea\u80fd\u8bbf\u95ee\u5230 $[l,mid]$ \uff0c\u4f46\u662f\u901a\u8fc7\u5165\u6811\u4e2d\u7684\u7236\u5411\u8fde\u8fb9\uff0c\u5374\u80fd\u591f\u8bbf\u95ee\u5230\u6574\u4e2a\u7684 $[l,r]$ \uff0c\u8fd9\u6837\u5c31\u51fa\u73b0\u4e86\u4e25\u91cd\u7684\u95ee\u9898\u3002\n\n\u4e00\u79cd\u7b80\u5355\u7684\u8bb0\u5fc6\u65b9\u6cd5\u662f\uff0c\u53d8\u7684\u65b9\u5411\u4e0e\u7236\u5b50\u8fb9\u65b9\u5411\u76f8\u540c\uff08\u81ea\u7136\u662f\u76f4\u89c2\u56fe\u753b\u4e0a\uff09\n\n\u5bf9\u4e8e\u5177\u4f53\u7684\u5efa\u8fb9\u64cd\u4f5c\uff0c\u6211\u4eec\u901a\u8fc7\u4f8b\u9898\u6765\u770b\uff1a\n\n[CF786B Legacy](https://www.luogu.com.cn/problem/CF786B)\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u8981\u6c42\u6700\u77ed\u8def\u3002\n\n\u5efa\u8fb9\u65b9\u5f0f\u6709\u4e09\u79cd\uff1a\n\n- \u7ed9\u5b9a\u4e24\u4e2a\u8282\u70b9\uff0c\u8282\u70b9\u4e4b\u95f4\u76f4\u63a5\u5efa\u8fb9\u3002\n\n- \u7ed9\u5b9a\u4e00\u4e2a\u8282\u70b9\u548c\u4e00\u4e2a\u533a\u95f4\uff0c\u8981\u6c42\u5efa\u7acb\u6709\u5411\u8fb9 $u \\rightarrow [l,r]$ \uff0c\u5373\u70b9\u533a\u95f4\u8fb9\n\n- \u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u548c\u4e00\u4e2a\u8282\u70b9\uff0c\u8981\u6c42\u5efa\u7acb\u6709\u5411\u8fb9 $[l,r]\\rightarrow v$ \uff0c\u5373\u533a\u95f4\u70b9\u8fb9\u3002\n\n  \n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u5efa\u8fb9\uff0c\u53ea\u9700\u8981\u5728\u5165\u6811\u548c\u51fa\u6811\u4e0a\u7684\u53f6\u5b50\u8282\u70b9\u76f4\u63a5\u5efa\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u5efa\u8fb9\uff0c\u7531\u5165\u6811\u7684\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u5411\u51fa\u6811\u4e2d\u5bf9\u5e94\u533a\u95f4\u5efa\u8fb9\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u5efa\u8fb9\uff0c\u7531\u5165\u6811\u7684\u5bf9\u5e94\u533a\u95f4\u5411\u51fa\u6570\u4e2d\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u5efa\u8fb9\u5373\u53ef\u3002\n\n\u4e8e\u662f\u76f8\u5f53\u4e8e\u662f\u5355\u70b9\u64cd\u4f5c\uff0c\u7ebf\u6bb5\u6811\u968f\u4fbf\u7ef4\u62a4\u3002\n\n\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n//#define LawrenceSivan\n \n#include <bits/stdc++.h>\nusing namespace std;\n \ntypedef long long ll;\ntypedef unsigned long long ull;\n \n#define INF 0x3f3f3f3f3f3f3f3f\n#define re register\n#define int ll\n \nconst int maxn=1e5+5;\n \nint n,m,s,op;\n \nnamespace SegTree_for_graph{\n    int head[maxn*10],to[maxn*30],nxt[maxn*30],w[maxn*30],cnt;\n \n    inline void add(int u,int v,int val){\n        nxt[++cnt]=head[u];\n        to[cnt]=v;\n        w[cnt]=val;\n        head[u]=cnt;\n    }\n \n    int rt1,rt2,tot;\n    \n    int ls[maxn*30],rs[maxn*30];\n \n    int in[maxn*30],out[maxn*30];\n \n    #define ls ls[rt]\n    #define rs rs[rt]\n \n    void build_in(int &rt,int l,int r){\n        rt=++tot;\n        if(l==r){\n            in[l]=rt;\n            return;\n        }\n \n        int mid=(l+r)>>1;\n        build_in(ls,l,mid);\n        build_in(rs,mid+1,r);\n \n        add(ls,rt,0);add(rs,rt,0);\n    }\n \n    void build_out(int &rt,int l,int r){\n        rt=++tot;\n        if(l==r){\n            out[l]=rt;\n            return;\n        }\n \n        int mid=(l+r)>>1;\n        build_out(ls,l,mid);\n        build_out(rs,mid+1,r);\n \n        add(rt,ls,0);add(rt,rs,0);\n    }\n \n    void modify_in(int rt,int l,int r,int ql,int qr,int pos,int val){\n        if(ql>r||qr<l)return;\n        if(ql<=l&&qr>=r){\n            add(rt,pos,val);\n            return;\n        }\n        int mid=(l+r)>>1;\n        modify_in(ls,l,mid,ql,qr,pos,val);\n        modify_in(rs,mid+1,r,ql,qr,pos,val);\n    }\n \n    void modify_out(int rt,int l,int r,int ql,int qr,int pos,int val){\n        if(ql>r||qr<l)return;\n        if(ql<=l&&qr>=r){\n            add(pos,rt,val);\n            return;\n        }\n        int mid=(l+r)>>1;\n        modify_out(ls,l,mid,ql,qr,pos,val);\n        modify_out(rs,mid+1,r,ql,qr,pos,val);\n    }\n    \n}\n \nusing namespace SegTree_for_graph;\n \n#define P pair<int,int> \n#define mp make_pair\n \npriority_queue<P,vector<P>,greater<P> > q;\n \nint dis[maxn*10];\n \nbool vis[maxn*10];\n \ninline void Dijkstra(int s){\n    s=in[s];\n    memset(dis,0x3f,sizeof(dis));\n    dis[s]=0;\n    q.push(mp(0,s));\n    while(!q.empty()){\n        int u=q.top().second;q.pop();\n        if(vis[u])continue;\n        vis[u]=true;\n        for(re int i=head[u];i;i=nxt[i]){\n            int v=to[i];\n            if(dis[v]>dis[u]+w[i]){\n                dis[v]=dis[u]+w[i];\n                q.push(mp(dis[v],v));\n            }\n        }\n    }\n}\n \nnamespace Read{\n    template<typename T>\n    inline void read(T &x){\n        x=0;T f=1;char ch=getchar();\n        while (!isdigit(ch)) {if(ch=='-')f=-1;ch=getchar();}\n        while (isdigit(ch)){x=x*10+(ch^48);ch=getchar();}\n        x*=f;\n    }\n \n    template <typename T, typename... Args>\n    inline void read(T& t, Args&... args) {\n        read(t); read(args...);\n    }\n}\n \nusing namespace Read;\n \nsigned main() {\n#ifdef LawrenceSivan\n    freopen(\"aa.in\",\"r\", stdin);\n    freopen(\"aa.out\",\"w\", stdout);\n#endif\n    read(n,m,s);\n \n    build_in(rt1,1,n);\n    build_out(rt2,1,n);\n \n    for(re int i=1;i<=n;i++){\n        add(in[i],out[i],0);\n        add(out[i],in[i],0);\n    }\n \n    for(re int i=1;i<=m;i++){\n        read(op);\n        if(op==1){\n            int u,v,val;\n            read(u,v,val);\n            add(in[u],out[v],val);\n        }\n \n        if(op==2){\n            int u,l,r,val;\n            read(u,l,r,val);\n            modify_out(rt2,1,n,l,r,in[u],val);\n        }\n \n        if(op==3){\n            int v,l,r,val;\n            read(v,l,r,val);\n            modify_in(rt1,1,n,l,r,out[v],val);\n        }\n    }\n \n    Dijkstra(s);\n \n    for(re int i=1;i<=n;i++){\n        if(dis[out[i]]==INF)printf(\"-1 \");\n        else printf(\"%lld \",dis[out[i]]);\n    }\n \n \n    return 0;\n}\n```\n\n",
        "postTime": 1627821871,
        "uid": 375208,
        "name": "LawrenceSivan",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "### \u9898\u610f\n\n\u6709 $n$ \u4e2a\u70b9\u548c $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u4e3a\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\u4e2d\u7684\u4e00\u79cd \uff1a\n\n- `1 u v w`\uff1a\u8fde\u4e00\u6761 $u\\to v$ \u7684\u5355\u5411\u8fb9\uff0c\u6743\u503c\u4e3a $w$\u3002\n\n- `2 u l r w`\uff1a\u5bf9\u4e8e\u6240\u6709 $i\\in [l,r]$ \u8fde\u4e00\u6761 $u\\to i$ \u7684\u5355\u5411\u8fb9\uff0c\u6743\u503c\u4e3a $w$\u3002\n\n- `3 u l r w`\uff1a\u5bf9\u4e8e\u6240\u6709 $i\\in [l,r]$ \u8fde\u4e00\u6761 $i\\to u$ \u7684\u5355\u5411\u8fb9\uff0c\u6743\u503c\u4e3a $w$\u3002\n\n\u6700\u540e\u4f60\u9700\u8981\u6c42\u51fa\u70b9 $s$ \u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n$\\texttt{Data Range:}1\\leq n,q\\leq 10^5,1\\leq w\\leq 10^9$\n\n### \u9898\u89e3\n\n[\u4e0d\u4e00\u5b9a\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Karry5307/p/13583069.html)\n\n\u597d\u4e45\u6ca1\u770b\u7ebf\u6bb5\u6811\u4f18\u5316\u8fde\u8fb9\u4e86\uff0c\u8fd9\u6b21\u5199\u7bc7\u9898\u89e3\u6765\u590d\u4e60\u590d\u4e60\u3002\n\n\u6ce8\u610f\u5230\u5982\u679c $2$ \u548c $3$ \u64cd\u4f5c\u66b4\u529b\u641e\u7684\u8bdd\u90a3\u8fb9\u6570\u4f1a\u7206\u70b8\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8003\u8651\u5c06\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u70b9\u7f29\u6210\u4e00\u4e2a\uff0c\u4e8e\u662f\u81ea\u7136\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u6765\u4f18\u5316\u3002\n\n\u9996\u5148\u8003\u8651\u53ea\u6709 $2$ \u64cd\u4f5c\u65f6\u600e\u4e48\u505a\u3002\n\n\u8003\u8651\u5148\u5efa\u51fa\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e\u67d0\u4e00\u4e2a $u$ \u5411 $[l,r]$ \u8fde\u8fb9\u7684\u64cd\u4f5c\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u641e\u51fa $[l,r]$ \u6240\u5bf9\u5e94\u7684\u82e5\u5e72\u533a\u95f4\uff0c\u7136\u540e $u$ \u4f9d\u6b21\u5411\u8fd9\u4e9b\u533a\u95f4\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u6837\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u4ee3\u8868\u7684\u533a\u95f4\u4e0e\u5b50\u533a\u95f4\u6ca1\u6709\u8fb9\u8fde\u63a5\u6240\u4ee5\u8dd1\u6700\u77ed\u8def\u4f1a\u51fa\u95ee\u9898\u3002\u6240\u4ee5\u5728\u5efa\u6811\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u4ece\u8fd9\u4e2a\u533a\u95f4\u5411\u4e24\u4e2a\u5b50\u533a\u95f4\u8fde\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u624d\u884c\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651 $3$ \u64cd\u4f5c\uff0c\u540c\u6837\u7684\u601d\u8def\uff0c\u5176\u5b9e\u5c31\u662f $[l,r]$ \u5bf9\u5e94\u7684\u82e5\u5e72\u533a\u95f4\u5411 $u$ \u8fde\u8fb9\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u4e2d\u4e24\u4e2a\u5b50\u533a\u95f4\u5411\u8fd9\u4e2a\u533a\u95f4\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u6700\u540e\u8003\u8651 $1$ \u64cd\u4f5c\uff0c\u7531\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u7684\u53f6\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7684\u5355\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u62ff\u53f6\u5b50\u8282\u70b9\u4e92\u76f8\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u5904\u7406\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u53f6\u8282\u70b9\u7f16\u53f7\u4e3a $1\\sim n$\uff0c\u7ebf\u6bb5\u6811\u4e0a\u7684\u975e\u53f6\u8282\u70b9\u4e00\u4e2a\u4e00\u4e2a\u7f16\u53f7\u3002\u4e5f\u5c31\u662f\u5efa\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e00\u68f5\u4ee3\u8868\u5f80\u5b50\u533a\u95f4\u8fde\u8fb9\uff0c\u53e6\u4e00\u68f5\u5f80\u7236\u8282\u70b9\u8fde\u8fb9\uff0c\u5176\u4e2d\u53f6\u8282\u70b9\u662f\u91cd\u5408\u7684\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![dHPLmd.jpg](https://s1.ax1x.com/2020/08/29/dHPLmd.jpg)\n\n\u84dd\u8272\u7684\u8282\u70b9\u4ee3\u8868\u4ece\u4e0a\u5f80\u4e0b\u8fde\u7684\uff0c\u7ea2\u8272\u7684\u4ee3\u8868\u4ece\u4e0b\u5f80\u4e0a\u8fde\u7684\uff0c\u53f6\u8282\u70b9\u4e3a\u4e24\u68f5\u6811\u6240\u5171\u4eab\u3002\n\n\u6700\u540e\u7684\u6700\u540e\uff0c\u6709\u4e00\u4e2a\u5b9e\u73b0\u7ec6\u8282\uff0c\u5c31\u662f\u4f60\u5199\u7ed3\u6784\u4f53\u5f0f\u7ebf\u6bb5\u6811\u4f1a\u8ba9\u4f60 T \u5230\u6000\u7591\u4eba\u751f\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\nusing namespace std;\ntypedef int ll;\ntypedef long long int li;\nconst ll MAXN=1e5+51;\nconst li inf=0x3f3f3f3f3f3f3f3f;\nstruct Edge{\n\tll to,prev,dist;\n};\nstruct Tuple{\n\tli x,y;\n\tinline bool operator <(const Tuple &rhs)const\n\t{\n\t\treturn this->x>rhs.x;\n\t}\n};\nEdge ed[MAXN*20];\npriority_queue<Tuple>pq;\nll cnt,nc,tot,rt,rtx,qcnt,source,op,x,y,l,r,dist;\nll last[MAXN<<2],inQueue[MAXN<<2],ls[MAXN<<2],rs[MAXN<<2];\nli dis[MAXN<<2];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline void addEdge(ll from,ll to,ll dist)\n{\n\ted[++tot].prev=last[from];\n\ted[tot].to=to;\n\ted[tot].dist=dist;\n\tlast[from]=tot;\n}\ninline ll createDown(ll l,ll r)\n{\n\tif(l==r)\n\t{\n\t\treturn l;\n\t}\n\tll mid=(l+r)>>1,cur=++nc;\n\tls[cur]=createDown(l,mid),rs[cur]=createDown(mid+1,r);\n\taddEdge(cur,ls[cur],0),addEdge(cur,rs[cur],0);\n\treturn cur;\n}\ninline ll createUp(ll l,ll r)\n{\n\tif(l==r)\n\t{\n\t\treturn l;\n\t}\n\tll mid=(l+r)>>1,cur=++nc;\n\tls[cur]=createUp(l,mid),rs[cur]=createUp(mid+1,r);\n\taddEdge(ls[cur],cur,0),addEdge(rs[cur],cur,0);\n\treturn cur;\n}\nll lx,rx;\ninline void link(ll l,ll r,ll x,ll dist,ll node,ll type)\n{\n\tif(lx<=l&&rx>=r)\n\t{\n\t\ttype?addEdge(node,x,dist):addEdge(x,node,dist);\n\t\treturn;\n\t}\n\tll mid=(l+r)>>1;\n\tif(lx<=mid)\n\t{\n\t\tlink(l,mid,x,dist,ls[node],type);\n\t}\n\tif(rx>mid)\n\t{\n\t\tlink(mid+1,r,x,dist,rs[node],type);\n\t}\n}\ninline void Dijkstra(ll source)\n{\n\tll top;\n\tdis[source]=0,inQueue[source]=1,pq.push((Tuple){0,source});\n\twhile(!pq.empty())\n\t{\n\t\ttop=pq.top().y,pq.pop(),inQueue[top]=0;\n\t\tfor(register int i=last[top];i;i=ed[i].prev)\n\t\t{\n\t\t\tif(dis[ed[i].to]>dis[top]+ed[i].dist)\n\t\t\t{\n\t\t\t\tdis[ed[i].to]=dis[top]+ed[i].dist;\n\t\t\t\tif(!inQueue[ed[i].to])\n\t\t\t\t{\n\t\t\t\t\tinQueue[ed[i].to]=1;\n\t\t\t\t\tpq.push((Tuple){dis[ed[i].to],ed[i].to});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} \nint main()\n{\n\tcnt=nc=read(),qcnt=read(),source=read();\n\trt=nc+1,createDown(1,cnt),rtx=nc+1,createUp(1,cnt);\n\tfor(register int i=0;i<qcnt;i++)\n\t{\n\t\top=read();\n\t\tif(op==1)\n\t\t{\n\t\t\tx=read(),y=read(),dist=read(),addEdge(x,y,dist);\n\t\t\tcontinue;\n\t\t}\n\t\tx=read(),lx=read(),rx=read(),dist=read();\n\t\tlink(1,cnt,x,dist,op^3?rt:rtx,op-2);\n\t}\n\tmemset(dis,0x3f,sizeof(dis)),Dijkstra(source);\n\tfor(register int i=1;i<=cnt;i++)\n\t{\n\t\tprintf(\"%lld \",dis[i]==inf?-1:dis[i]);\n\t}\n}\n```",
        "postTime": 1598697952,
        "uid": 60990,
        "name": "Karry5307",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF786B \u3010Legacy\u3011"
    },
    {
        "content": "\u5728qbxt\u67d0\u8425\u96c6\u4f53\u505a\u7684\n\n\u9898\u89e3\u91cc\u4ee5\u53ca\u5916\u5730OIer\u57fa\u672c\u4e0a\u90fd\u5199\u4e24\u9897\u7ebf\u6bb5\u6811\u7684\n\n\u800c\u6211\u4eec\u516d\u5b89\u7684OIer\u795eTM\u601d\u7ef4\u4e00\u81f4\u2014\u2014\u53ea\u7528\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u7c7b\u4f3c\u4e8e\u4e00\u7ef4\u5206\u5c42\u56fe\u7684\u601d\u60f3\uff0c\u7b2c\u4e8c\u5c42\u4e0a\u4e0e\u7b2c\u4e00\u5c42\u76f8\u5bf9\u5e94\u7684\u7ed3\u70b9\u7684\u7f16\u53f7\u662f\u7b2c\u4e00\u5c42\u7ed3\u70b9\u7f16\u53f7+NUM\uff0c\u800c\u4e14\u8c8c\u4f3c\u6bd4\u5206\u9897\u7684\u601d\u7ef4\u6b63\u5e38\u4e00\u70b9\uff0c\u56e0\u4e3a\u6ee1\u8db3lson=k<<1,rson=k<<1|1\uff0c\u548c\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u76f8\u4f3c\u5ea6\u9ad8\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u5206\u9897\u6216\u5206\u5c42\uff0c\u5bb9\u6613\u60f3\u660e\u767d\u6811\u8fb9\uff08\u8f85\u52a9\u8fb9\uff09\u5fc5\u987b\u662f\u53cc\u5411\u7684\uff08\u56e0\u4e3a\u8981\u7528\u7956\u5148\u7ed3\u70b9\u7684\u51fa\u5165\u4fe1\u606f\uff09\uff0c\u4f46\u5982\u679c\u4e0d\u5206\u9897\u6216\u5206\u5c42\u7684\u8bdd\u6c42\u51fa\u6765\u6700\u77ed\u8def\u4e0d\u5f88\u660e\u663e\u662f0\u4e86\u5417QwQ\n\n\u6240\u4ee5\u5206\u5c42\u7684\u8bdd\u7236\u5411\u5b50\u5e94\u662f\u4e00\u5c42\uff0c\u5b50\u5411\u7236\u5e94\u5728\u53e6\u4e00\u5c42\uff0c\u4e24\u5c42\u4e4b\u95f4\u901a\u8fc7\u53f6\u8282\u70b9\u76f8\u8fde\n\n\u53e6\u5916\u5173\u4e8e\u53f6\u7ed3\u70b9\u7684\u5904\u7406\u95ee\u9898\uff0cYoOXiii\u548cPride205\u662f\u628a\u539f\u56fe\u7b2ci\u7ed3\u70b9\u6295\u5f71\u5230\u6811\u4e0a\u7b2ci+n\u7ed3\u70b9\uff08n\u4e3a\u539f\u56fe\u7ed3\u70b9\u4e2a\u6570\uff09\n\n\u8fd9\u4e2a\u8be6\u89c1\u4ed6\u4eec\u7684\u4ee3\u7801\uff08\u5176\u5b9e\u6211\u4e5f\u6ca1\u4ed4\u7ec6\u7814\u7a76\u6e05\u695a\u4ed6\u4eec\u7684\u5904\u7406\u65b9\u6cd5\uff09\uff0c\u8fd9\u91cc\u4e0d\u5077\u4e86\uff08\u5077\u7a83\u72af\u7f6aw\uff09\uff0c\u8981\u770b\u81ea\u5df1\u627e\n\n\u7531\u4e8e\u6211\u548c\u4ed6\u4eec\u4e0d\u5750\u4e00\u5757\uff0c\u60f3\u601d\u8def\u65f6\u6ca1\u6709\u4ea4\u6d41\uff0c\u6240\u4ee5\u6211\u6ca1\u6709\u8fd9\u6837\u5199\uff0c\u6211\u662f\u628a\u7b2c\u4e00\u5c42\u6309\u7167\u4e00\u822c\u7ebf\u6bb5\u6811\u7684\u7f16\u53f7\u5efa\uff0c\u8fd9\u6837\u5bb9\u6613\u4e00\u70b9\u3002\u7136\u540e\u628a\u539f\u56fe\u7ed3\u70b9\u76f4\u63a5\u5411\u53f6\u5b50\u7ed3\u70b9\u6620\u5c04\u5373\u53ef\uff08\u5f00\u4e00\u4e2apos\u6570\u7ec4\uff09\uff08\u624d\u77e5\u9053szsz46\u4e5f\u662f\u8fd9\u4e48\u5199\u7684\uff0c\u539f\u6765\u516d\u5b89OIer\u7684\u601d\u7ef4\u540c\u6b65\u6027\u4e0d\u968f\u7a7a\u95f4\u6539\u53d8QwQ\uff09\n\n\u7136\u540e......\n\n\u4e0a\u4ee3\u7801\u5427\n\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<iostream>\n#define NUM 1000000\n#define maxn 100005<<5\n//\u8fd9\u4e24\u4e2a\u8303\u56f4\u8981\u8c03\u597d \n#define int long long\nusing namespace std;\ntypedef long long ll;\n\ninline void input(ll &x){\n    ll ans=0,f=1;\n    char c=getchar();\n    while(c>'9'||c<'0'){\n        if(c=='-')f=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        ans=ans*10+c-48;\n        c=getchar();\n    }\n    x=ans*f;\n}\n\ninline void output(ll x){\n    if(x<0)x=-x,putchar('-');\n    if(x>9)output(x/10);\n    putchar(x%10+48);\n}\n\ninline void writeln(ll x){\n    output(x);\n    putchar('\\n');\n}\n\nint n,m,s,head[maxn],c[maxn],pos[maxn],vis[maxn],dis[maxn],cnt;\n\n//pos:\u9898\u4e2d\u7ed3\u70b9\u5728\u6811\u4e0a\u7684\u7f16\u53f7 \n\nstruct edge{\n\tint v,w,next;\n}e[maxn];\n\nstruct node{\n\tint dis,u;\n\tbool operator<(const node &x)const{return x.dis<dis;}\n};\n\ninline void add(int u,int v,int w){\n\te[++cnt].v=v;\n\te[cnt].w=w;\n\te[cnt].next=head[u];\n\thead[u]=cnt;\n//\tcout<<u<<' '<<v<<' '<<w<<endl;\n}\n\ninline void build(int k,int l,int r){\n\tif(l==r){\n\t\tpos[l]=k;\n\t\tadd(k+NUM,k,0);\n\t\tadd(k,k+NUM,0);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(k<<1,l,mid);\n\tbuild(k<<1|1,mid+1,r);\n\tadd(k<<1,k,0);\n\tadd(k<<1|1,k,0);\n\tadd(k+NUM,(k<<1)+NUM,0);//\u8c03\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff1a\u52a0\u62ec\u53f7\uff1b\u5728\u62ec\u53f7\u5916\u52a0NUM\u800c\u4e0d\u662f\u7ed9k\u52a0NUM \n\tadd(k+NUM,(k<<1|1)+NUM,0);\n}\n\ninline void add(int k,int l,int r,int xl,int xr,int from,int w,int opt){\n\tif(xl<=l&&r<=xr){\n\t\tif(opt==2)add(from,k+NUM,w);\n\t\telse if(opt==3)add(k,from,w);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(xl<=mid)add(k<<1,l,mid,xl,xr,from,w,opt);\n\tif(xr>=mid+1)add(k<<1|1,mid+1,r,xl,xr,from,w,opt);\n}\n\npriority_queue<node> q;\n\ninline void dijkstra(){\n\ts=pos[s];\n\tq.push((node){0,s});\n\tdis[s]=0;\n\twhile(!q.empty()){\n\t\tint x=q.top().u;\n\t\tq.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=1;\n\t\tfor(int i=head[x];i!=-1;i=e[i].next){\n\t\t\tint y=e[i].v;\n\t\t\tif(!vis[y]&&dis[y]>dis[x]+e[i].w){\n\t\t\t\tdis[y]=dis[x]+e[i].w;\n\t\t\t\tq.push((node){dis[y],y});//\u60f3\u4e0d\u5230\u5427\uff0c\u8fd9\u4e00\u884c\u6253\u9519\u4f7f\u6211\u8c03\u4e86\u534a\u4e2a\u5c0f\u65f6 \n\t\t\t}\n\t\t}\n\t}\n\ts<<=1;\n\tif(s>=1)dijkstra();\n}\n\nsigned main(){\n\tmemset(head,-1,sizeof(head));\n\tmemset(dis,127,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tinput(n);input(m);input(s);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tint opt;\n\t\tinput(opt);\n\t\tif(opt==1){\n\t\t\tint u,v,w;\n\t\t\tinput(u);input(v);input(w);\n\t\t\tadd(pos[u],pos[v],w);\n\t\t}\n\t\telse if(opt==2){\n\t\t\tint u,l,r,w;\n\t\t\tinput(u);input(l);input(r);input(w);\n\t\t\tadd(1,1,n,l,r,pos[u],w,opt);\n\t\t}\n\t\telse if(opt==3){\n\t\t\tint u,l,r,w;\n\t\t\tinput(u);input(l);input(r);input(w);\n\t\t\tadd(1,1,n,l,r,pos[u],w,opt);\n\t\t}\n\t}\n\tdijkstra();\n//\tfor(int i=1;i<=4*n;i++)cout<<i<<' '<<dis[i]<<endl;\n\tfor(int i=1;i<=n;i++)output(dis[pos[i]]<=1e15?dis[pos[i]]:-1),putchar(' ');\n}\n\n```\n\n\u5728\u6b64\u611f\u8c22Layz\u7684\u4e09\u4f4d\u795e\u4ed9OIer",
        "postTime": 1565185641,
        "uid": 51301,
        "name": "Y15BeTa",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF786B \u3010Legacy\u3011"
    },
    {
        "content": "\u840c\u65b0\u521a\u5b66 OI\uff0c\u4e0d\u4f1a\u7ebf\u6bb5\u6811\uff0c\u66f4\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u6240\u4ee5\u5199\u4e86 ST \u8868\u4f18\u5316\u5efa\u56fe\u8fc7\u4e86\u3002\n\n~~\u840c\u65b0\u521a\u5b66 OI\uff0c\u4e0d\u4f1a dij\uff0c\u6240\u4ee5\u5199\u4e86 SPFA \u8fc7\u4e86\u3002~~\n\n## ST \u8868\u4f18\u5316\u5efa\u56fe\n\n\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5229\u7528\u4e86\u7ebf\u6bb5\u6811\u80fd\u628a\u4e00\u6bb5\u533a\u95f4\u62c6\u6210 $\\log n$ \u4efd\u7684\u7279\u6027\u3002\n\nST \u8868\u4e5f\u53ef\u4ee5\u5904\u7406\u533a\u95f4\u95ee\u9898\uff0c\u5e76\u4e14\u6709\u7740\u201c\u80fd\u628a\u4e00\u6bb5\u533a\u95f4\u62c6\u6210 $O(1)$ \u4e2a\u533a\u95f4\u7684\u5e76\u201d\u7684\u4f18\u79c0\u6027\u8d28\uff0c\u5728\u5904\u7406\u6781\u503c\u95ee\u9898\u4e0a\u6709\u4f18\u79c0\u7684\u67e5\u8be2\u590d\u6742\u5ea6\u3002\n\n\u6700\u77ed\u8def\u8981\u6700\u77ed\uff0c\u4e0d\u4e5f\u662f\u4e2a $\\textrm{min}$ \u561b\uff0c\u90a3\u5c31\u8003\u8651\u5982\u4f55 ST \u8868\u4f18\u5316\u533a\u95f4\u8fde\u8fb9\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e00\u6761\u6709\u610f\u601d\u7684\u6027\u8d28\uff1a\u5bf9\u4e8e\u539f\u56fe\u4e2d\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u628a\u8fd9\u6761\u8fb9\u91cd\u590d\u5730\u8fde\u4e00\u4e07\u904d\uff0c\u5bf9\u6700\u77ed\u8def\u7684\u7ed3\u679c\u4e0d\u4ea7\u751f\u5f71\u54cd\u3002\n\n\u8fd9\u8bf4\u660e\uff0c\u628a\u4e00\u4e2a\u70b9\u5206\u522b\u8fde\u5230\u67d0\u4e9b\u533a\u95f4\u4e0a\uff0c\u7b49\u4ef7\u4e8e\u8fde\u5230\u8fd9\u4e9b\u533a\u95f4\u7684\u5e76\u4e0a\u3002\u56de\u987e ST \u8868\u7684\u6027\u8d28\uff0c\u7136\u540e\u5c31\u4f1a\u53d1\u73b0\u5f88\u7b80\u5355\u4e86\u3002\n\n\u5177\u4f53\u800c\u8a00\uff0c\u89c2\u5bdf ST \u8868\u4e0a\u7684\u4e00\u4e2a\u533a\u95f4\uff0c\u4f60\u53d1\u73b0\u5b83\u7ef4\u62a4\u7684\u4fe1\u606f\u662f\u8fd9\u4e2a\u533a\u95f4\u5185\u6240\u6709\u8282\u70b9\u4fe1\u606f\u7684\u5e76\u3002\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\uff0c\u5f80\u4e0b\u5411\u201c\u901a\u8fc7\u5408\u5e76\u76f4\u63a5\u5f97\u5230\u5b83\u7684\u4e24\u4e2a\u533a\u95f4\u201d\u8fde\u6743\u503c\u4e3a $0$ \u7684\u8fb9\uff0c\u90a3\u5411\u8fd9\u4e2a\u533a\u95f4\u6240\u4ee3\u8868\u7684\u8282\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a $w$ \u7684\u8fb9\uff0c\u5c31\u7b49\u4ef7\u4e8e\u5411\u533a\u95f4\u5185\u6bcf\u4e2a\u70b9\u8fde\u4e86\u4e00\u6761\u8fd9\u6837\u7684\u8fb9\u4e86\u3002\n\n\u4e3e\u4f8b\u8bf4\u660e\uff1a$8$ \u4e2a\u70b9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/fu6dfcb6.png)\n\n\u5982\u679c\u70b9 $u$ \u8981\u50cf $[2,7]$ \u8fde\u8fb9\uff0c\u9996\u5148\u628a $[2,7]$ \u53d8\u4e3a $[2,5] \\cup [4,7]$\uff0c\u7136\u540e\u5206\u522b\u5411\u5b83\u4eec\u8fde\u8fb9\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/d7xqr64m.png)\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u7ecf\u8fc7\u7eff\u8272\u8282\u70b9\u548c\u8fb9\uff0c\u6700\u7ec8\u7b49\u4ef7\u4e8e\u8fde\u5411\u4e86 $[2,7]$\u3002\n\n\u8fd9\u662f\u4ece\u4e0a\u5f80\u4e0b\u8d70\u7684 ST \u8868\uff0c\u4ece\u4e0b\u5f80\u4e0a\u8d70\u540c\u7406\uff0c\u4e0e\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u76f8\u4f3c\u3002\u6700\u540e\u5728\u53f6\u5b50\u8282\u70b9\u8fde\u4e0a $0$ \u8fb9\uff0c\u6211\u7684\u5b9e\u73b0\u662f\u76f4\u63a5\u5171\u7528\u4e86\u53f6\u5b50\u8282\u70b9\u3002\n\n\u9884\u5904\u7406\u5efa\u4e86 $O(n\\log n)$ \u6761\u8fb9\uff0c\u4e00\u6b21\u4fee\u6539\u4f1a\u5efa $O(1)$ \u6761\uff0c\u6240\u4ee5\u5171 $O(n\\log n+q)$ \u6761\u8fb9\u3002\n\n```cpp\nfor(rgi i=1;i<=n;++i)st[0][i][0]=st[0][i][1]=i;\nfor(rgi w=1;w<LOG;++w){\n\tfor(rgi i=1;i+(1<<w)-1<=n;++i){\n\t\tst[w][i][0]=++tot;\n\t\tlink(st[w-1][i][0],tot,0),link(st[w-1][i+(1<<w-1)][0],tot,0);\n\t\tst[w][i][1]=++tot;\n\t\tlink(tot,st[w-1][i][1],0),link(tot,st[w-1][i+(1<<w-1)][1],0);\n\t}\n}\nwhile(m--){\n\tread(opt,v);\n\tif(opt==1)read(u,w),link(v,u,w);\n\telse{\n\t\tread(l,r,w),k=log2(r-l+1);\n\t\tif(opt==2)link(v,st[k][l][1],w),link(v,st[k][r-(1<<k)+1][1],w);\n\t\telse link(st[k][l][0],v,w),link(st[k][r-(1<<k)+1][0],v,w);\n\t}\n}\n```\n\n~~\u8fd9\u4e0d\u6bd4\u7ebf\u6bb5\u6811\u597d\u5199~~\n\n## SPFA \u6d3b\u4e86 \n\n\u5417\uff1f\n\n\u53c2\u8003\u4e86 [\u590d\u6d3b SPFA - TOE \u7684\u535a\u5ba2](https://toe.blog.uoj.ac/blog/6660) \u8fd9\u7bc7\u6587\u7ae0\u3002\n\n\u6211\u7684\u5b9e\u73b0\u4e3b\u8981\u6765\u8bb2\u6709\u4e24\u4e2a\uff1a\n\n- \u53d6\u51fa\u961f\u5c3e\u82e5\u5e72\u9879\u4e0e\u961f\u9996\u5224\u65ad\uff0c\u82e5\u8ddd\u79bb\u66f4\u5c0f\u5219\u4ea4\u6362\u4e4b\u3002\n\n- \u961f\u5185\u968f\u673a\u53d6\u51fa\u82e5\u5e72\u9879\u4e0e\u961f\u9996\u5224\u65ad\uff0c\u82e5\u8ddd\u79bb\u66f4\u5c0f\u5219\u4ea4\u6362\u4e4b\u3002\n\n\u7b2c\u4e8c\u4e2a\u5f88\u91cd\u8981\uff0c\u80fd\u6709\u6548\u89c4\u907f\u5f88\u591a\u602a\u5f02\u7684\u6570\u636e\u3002\n\n~~\u8fd9\u4e0d\u6bd4 dij \u597d\u5199~~\n\n\u5b8c\u6574\u7684\u4ee3\u7801\u5b9e\u73b0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2\\log^2 n+qn\\log n)$ \u6216 $O(kn\\log n+kq)$\uff0c\u5176\u4e2d $k$ \u4e3a\u5e38\u6570\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rgi register int\ntypedef long long ll;\nusing namespace std;\ninline void read(){}template <typename T,typename... Ts> inline void read(T& A,Ts&... As){\n\tT x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\tA=x*f,read(As...);\n}\nconst int N=100010,LOG=20;\nconst ll inf=1e18;\nint n,m,s,tot,st[LOG][N][2];\nint nxt[N<<6],to[N<<6],hd[N<<6],C;\nint opt,v,l,r,u,k;\nll d[N<<6],val[N<<6],w;\nvoid link(int u,int v,int w){\n\tto[++C]=v,val[C]=w,nxt[C]=hd[u],hd[u]=C;\n}\nint q[N<<6],x,in[N<<6];\nmt19937 rnd(time(0));\nvoid chk(int g){\n\tif(d[q[l]]>d[q[g]])swap(q[g],q[l]);\n}\nsigned main(){\n\tread(n,m,s),tot=n;\n\tfor(rgi i=1;i<=n;++i)st[0][i][0]=st[0][i][1]=i;\n\tfor(rgi w=1;w<LOG;++w){\n\t\tfor(rgi i=1;i+(1<<w)-1<=n;++i){\n\t\t\tst[w][i][0]=++tot;\n\t\t\tlink(st[w-1][i][0],tot,0),link(st[w-1][i+(1<<w-1)][0],tot,0);\n\t\t\tst[w][i][1]=++tot;\n\t\t\tlink(tot,st[w-1][i][1],0),link(tot,st[w-1][i+(1<<w-1)][1],0);\n\t\t}\n\t}\n\twhile(m--){\n\t\tread(opt,v);\n\t\tif(opt==1)read(u,w),link(v,u,w);\n\t\telse{\n\t\t\tread(l,r,w),k=log2(r-l+1);\n\t\t\tif(opt==2)link(v,st[k][l][1],w),link(v,st[k][r-(1<<k)+1][1],w);\n\t\t\telse link(st[k][l][0],v,w),link(st[k][r-(1<<k)+1][0],v,w);\n\t\t}\n\t}\n\tfor(rgi i=1;i<=tot;++i)d[i]=inf;\n\td[q[l=r=1]=s]=0;\n\twhile(r>=l){\n\t\tfor(rgi i=r;i>=l&&i>=r-3;--i)chk(i);\n\t\tfor(rgi i=5;i;--i)chk(l+rnd()%(r-l+1));\n\t\tin[x=q[l++]]=0;\n\t\tfor(rgi i=hd[x];i;i=nxt[i]){\n\t\t\tif(d[v=to[i]]>d[x]+val[i]){\n\t\t\t\td[v]=d[x]+val[i];\n\t\t\t\tif(!in[v])in[q[++r]=v]=1;\n\t\t\t}\n\t\t}\n\t}\n\tfor(rgi i=1;i<=n;++i)printf(\"%lld \",d[i]==inf?-1:d[i]);\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1623914537,
        "uid": 78372,
        "name": "M4_SOPMODII_JR",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF786B Legacy"
    },
    {
        "content": "[\u6a21\u677f\u9898CF786B Legacy](https://www.luogu.com.cn/problem/CF786B)  \n\u5148\u8bf4\u7b97\u6cd5  \n\u5982\u679c\u9700\u8981\u6709n\u4e2a\u70b9\u9700\u8981\u5efa\u56fe  \n\u7ed9m\u4e2a\u9700\u8981\u5efa\u8fb9\u7684\u4fe1\u606f\uff0c\u4ece\u5355\u70b9\uff08\u6216\u533a\u95f4\u5185\u6240\u6709\u70b9\uff09\u5411\u4e00\u533a\u95f4\u6240\u6709\u70b9\u8fde\u8fb9  \n\u5982\u679c\u66b4\u529b\u5efa\u56fe\u590d\u6742\u5ea6$mn^2$  \n\u4ee5\u5355\u70b9\u8fde\u5411\u533a\u95f4\u4e3a\u4f8b\uff0c\u5728n\u4e2a\u70b9\u4e0a\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u53f6\u5b50\u8282\u70b9\u5373\u4e3a\u8fd9n\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u5411\u5b83\u7684\u5de6\u53f3\u513f\u5b50\u8fde\u4e00\u4e2a\u6743\u503c\u4e3a0\u7684\u8fb9\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u8981\u5411\u4e00\u4e2a\u8282\u70b9\u8fde\u8fb9\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u5411\u5b83\u6240\u5728\u7684\u533a\u95f4\u6bcf\u4e2a\u70b9\u90fd\u8fde\u8fb9\u4e86\uff08\u56e0\u4e3a\u8fde\u5230\u8fd9\u4e2a\u8282\u70b9\uff0c\u5c31\u80fd\u987a\u7740\u7ebf\u6bb5\u6811\u4e2d0\u8fb9\u6743\u7684\u8def\u4e00\u8def\u8d70\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u771f\u6b63\u5b58\u5728\u7684\u8282\u70b9\uff09  \n\u8fd9\u6837\u53ef\u4ee5\u7528\u7c7b\u4f3c\u4e0e\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u627e\u7684\u65b9\u6cd5\uff0c\u4ee5$logn$\u7684\u590d\u6742\u5ea6\u5411$[l,r]$\u5185\u6240\u6709\u70b9\u8fde\u8fb9  \n\u5982\u679c\u662f\u533a\u95f4\u8fde\u5411\u533a\u95f4\uff08$[l,r]$\u8fde\u5411$[l',r']$\uff09\uff0c\u53ef\u4ee5\u5efa\u4e24\u9897\u7ebf\u6bb5\u6811\uff0c\u4e00\u68f5in\uff08\u7531\u5916\u9762\u5f80\u8fd9\u9897\u6811\u8fde\u8fb9\uff09\u6811\uff0c\u4e00\u68f5out\uff08\u7531\u8fd9\u68f5\u6811\u5411\u5916\u8fde\u8fb9\uff09\u6811\uff0c\u548c\u4e00\u4e2a\u865a\u62df\u8282\u70b9  \n\u5728out\u6811\u4e2d\u4ece$[l,r]$\u5411\u865a\u62df\u8282\u70b9\u8fde\u8fb9\uff0c\u518d\u7531\u865a\u62df\u8282\u70b9\u5411in\u6811\u4e2d\u7684$[l',r']$\u8fde\u8fb9  \n\u6ce8\u610f\u8fd9\u91ccout\u6811\u662f\u6709\u533a\u95f4\u5f80\u5916\u8fde\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u4e2d\u7684\u8fb9\u662f\u7531\u513f\u5b50\u8fde\u5411\u7236\u4eb2\uff0c\u56e0\u4e3a\u5982\u679c\u7f16\u53f7\u4e3apos\u7684\u8282\u70b9\u8981\u5411\u5916\u8fde\u4e00\u6761\u8fb9\uff0c\u5b83\u8981\u5148\u987a\u7740\u7ebf\u6bb5\u6811\u4e2d\u7684\u8fb9\u8d70\u5230\u67d0\u4e00\u4e2a\u7236\u4eb2\uff0c\u518d\u7531\u6b64\u53bb\u5176\u4ed6\u8282\u70b9  \n\u518d\u770b\u8fd9\u9053\u9898\u5c31\u7b80\u5355\u4e86  \n\u4e5f\u662f\u8981\u5efa\u4e00\u9897in\u6811\u4e00\u9897out\u6811  \n\u7b2c\u4e00\u79cd\u65b9\u6848\u76f4\u63a5\u8fde\u8fb9  \n\u7b2c\u4e8c\u79cd\u65b9\u6848\u7531\u8282\u70b9v\u5411in\u6811\u4e2d$[l,r]$\u8fde\u8fb9  \n\u7b2c\u4e09\u79cd\u7531out\u6811\u4e2d$[l,r]$\u5411v\u8282\u70b9\u8fde\u8fb9  \n\u6700\u540e\u8dd1\u4e2a\u6700\u77ed\u8def\u5c31\u884c\u4e86  \n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801  \n```cpp  \n#include<cstdio>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<iomanip>\n#include<cstring>\n#define R register\n#define EN std::puts(\"\")\n#define LL long long\ninline int read(){\n\tint x=0,y=1;\n\tchar c=std::getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') y=0;c=std::getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+(c^48);c=std::getchar();}\n\treturn y?x:-x;\n}\nint n,m,s,nn;\nint fir[500006],nex[4000005],to[4000006],len[4000006],tot;\nstruct tr{\n\ttr *ls,*rs;\n\tint id;\n}dizhi[400006],*rootin=&dizhi[0],*rootout=&dizhi[1];\nint dizhitot=1;\nLL dis[500006];\nint in[500006];\nint dui[500006],size;\ninline void push(int x){\n\tdui[size++]=x;\n\tR int i=size-1,fa;\n\twhile(i){\n\t\tfa=i>>1;\n\t\tif(dis[dui[fa]]<=dis[dui[i]]) return;\n\t\tstd::swap(dui[fa],dui[i]);i=fa;\n\t}\n}\ninline int pop(){\n\tint ret=dui[0];dui[0]=dui[--size];\n\tR int i=0,ls,rs;\n\twhile((i<<1)<size){\n\t\tls=i<<1;rs=ls|1;\n\t\tif(rs<size&&dis[dui[rs]]<dis[dui[ls]]) ls=rs;\n\t\tif(dis[dui[ls]]>=dis[dui[i]]) break;\n\t\tstd::swap(dui[ls],dui[i]);i=ls;\n\t}\n\treturn ret;\n}\ninline void dij(){\n\tstd::memset(dis,0x3f,sizeof dis);\n\tin[s]=1;push(s);dis[s]=0;\n\twhile(size){\n\t\tR int u=pop();in[u]=0;\n\t\tfor(R int i=fir[u];i;i=nex[i]){\n\t\t\tR int v=to[i];\n\t\t\tif(dis[v]>dis[u]+len[i]){\n\t\t\t\tdis[v]=dis[u]+len[i];\n\t\t\t\tif(!in[v]) push(v),in[v]=1;\n\t\t\t}\n\t\t}\n\t}\n}\ninline void add(int u,int v,int w){\n\tto[++tot]=v;len[tot]=w;\n\tnex[tot]=fir[u];fir[u]=tot;\n}\nvoid build(tr *treein,tr *treeout,int l,int r){\n\tif(l==r){treein->id=treeout->id=l;return;}\n\tint mid=(l+r)>>1;\n\ttreein->ls=&dizhi[++dizhitot];treein->rs=&dizhi[++dizhitot];\n\ttreeout->ls=&dizhi[++dizhitot];treeout->rs=&dizhi[++dizhitot];\n\tbuild(treein->ls,treeout->ls,l,mid);build(treein->rs,treeout->rs,mid+1,r);\n\ttreein->id=++nn;treeout->id=++nn;\n\tadd(treein->id,treein->ls->id,0);add(treein->id,treein->rs->id,0);\n\tadd(treeout->ls->id,treeout->id,0);add(treeout->rs->id,treeout->id,0);\n}\nvoid addtreein(tr *tree,int l,int r,int ql,int qr,int u,int w){\n\tif(ql<=l&&r<=qr){add(u,tree->id,w);return;}\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) addtreein(tree->ls,l,mid,ql,qr,u,w);\n\tif(qr>mid) addtreein(tree->rs,mid+1,r,ql,qr,u,w);\n}\nvoid addtreeout(tr *tree,int l,int r,int ql,int qr,int v,int w){\n\tif(ql<=l&&r<=qr){add(tree->id,v,w);return;}\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) addtreeout(tree->ls,l,mid,ql,qr,v,w);\n\tif(qr>mid) addtreeout(tree->rs,mid+1,r,ql,qr,v,w);\n}\nint main(){\n\tnn=n=read();m=read();s=read();\n\tbuild(rootin,rootout,1,n);\n\twhile(m--){\n\t\tint op=read();\n\t\tif(op==1){\n\t\t\tint u=read(),v=read(),w=read();\n\t\t\tadd(u,v,w);\n\t\t}\n\t\telse if(op==2){\n\t\t\tint u=read(),l=read(),r=read(),w=read();\n\t\t\taddtreein(rootin,1,n,l,r,u,w);\n\t\t}\n\t\telse{\n\t\t\tint v=read(),l=read(),r=read(),w=read();\n\t\t\taddtreeout(rootout,1,n,l,r,v,w);\n\t\t}\n\t}\n\tdij();\n\tfor(R int i=1;i<=n;i++)\n\t\tstd::printf(\"%lld \",dis[i]==0x3f3f3f3f3f3f3f3f?-1:dis[i]);\n\treturn 0;\n}\n```  \n### \u6700\u540e\u4e22\u4e0b\u51e0\u4e2a\u4f8b\u9898  \n[\u6d1b\u8c37P3588 [POI2015]PUS](https://www.luogu.com.cn/problem/P3588)  \n[\u9898\u89e3](https://www.luogu.com.cn/blog/suxxsfe/solution-p3588)  \n&nbsp;  \n[bzoj5017[Snoi2017]\u70b8\u5f39](https://www.lydsy.com/JudgeOnline/problem.php?id=5017) /[\u6d1b\u8c37P5025 [SNOI2017]\u70b8\u5f39](https://www.luogu.com.cn/problem/P5025)  \n[\u9898\u89e3](https://www.luogu.com.cn/blog/suxxsfe/ti-xie-bzoj5017snoi2017-zha-tan)\uff0c~~\u5f53\u65f6\u4ea4\u4e86\u4e00\u9875\u6700\u540e\u53d1\u73b0\u662f\u6ca1\u5f00long long~~  \n&nbsp;  \n[bzoj3073[Pa2011]Journeys](https://www.lydsy.com/JudgeOnline/problem.php?id=3073)\uff0c\u7b97\u662f\u4e00\u4e2a\u6a21\u677f\u9898\u4e86\uff0c\u5c31\u662f\u90a3\u79cd\u8fb9\u4ece\u533a\u95f4\u8fde\u5411\u533a\u95f4\u7684\u60c5\u51b5\uff0c\u800c\u4e14\u8fd9\u662f01\u8fb9\u6743\uff0c\u7528\u53cc\u7aef\u961f\u5217bfs\u5c31\u884c\uff0c\u770b\u7f51\u4e0a\u597d\u591a\u4eba\u90fd\u5199\u7684dij  \n\u4f46\u9700\u8981\u6743\u9650\uff0c\u6240\u4ee5\u53ef\u4ee5\u53bb[\u8fd9\u4e0a\u9762](https://darkbzoj.tk/problem/3073)\u770b\u770b  \n~~\u9898\u89e3\u6ca1\u5199~~  \n&nbsp;  \n[bzoj2143\u98de\u98de\u4fa0](https://www.lydsy.com/JudgeOnline/problem.php?id=2143)\uff0c\u4e00\u5f00\u59cb\u5199\u4e86\u4e2a\u90a3\u79cd\u4e09\u7ef4\u7684dp\uff0c\u4f46\u4e0d\u77e5\u9053\u662f\u5e38\u6570\u95ee\u9898\u8fd8\u662f\u5199\u70b8\u4e86\u5df2\u77e5TLE\uff0c\u4e4b\u540e\u6539\u7684\u7ebf\u6bb5\u6811\u5efa\u8fb9  \n~~\u9898\u89e3\u4f9d\u65e7\u6ca1\u5199~~  \n&nbsp;  \n[CF1045A Last chance](http://codeforces.com/contest/1045/problem/A)\uff0c\u8fd9\u4e2a\u8fd8\u9700\u8981\u7f51\u7edc\u6d41\uff0c\u4e0d\u4f1a\uff0c\u4ee5\u540e\u518d\u5199\u5427\u3002\u3002  \n",
        "postTime": 1582287082,
        "uid": 164432,
        "name": "suxxsfe",
        "ccfLevel": 9,
        "title": "\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u8fb9\uff08CF786B Legacy\u9898\u89e3\uff09"
    },
    {
        "content": "\u672c\u9898\u8981\u6c42\u6211\u4eec\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n\u2460 \u70b9\u5411\u70b9\u8fde\u8fb9\u3002 \u2461 \u70b9\u5411\u533a\u95f4\u8fde\u8fb9\u3002 \u2462 \u533a\u95f4\u5411\u70b9\u8fde\u8fb9\u3002\n\n\u7136\u540e\u8dd1\u6700\u77ed\u8def\u5f97\u51fa\u7b54\u6848\u3002\n\n\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\n\n\u5efa\u4e24\u9897\u7ebf\u6bb5\u6811\uff0c\u5165\u6811\u548c\u51fa\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e3a\u4e00\u6bb5\u533a\u95f4\u7684\u539f\u8282\u70b9\u96c6\u5408\u3002\u5165\u6811\u5185\u90e8\u4e3a\u513f\u5b50\u5411\u7236\u4eb2\u8fde\u6709\u5411\u8fb9\uff0c\u51fa\u6811\u5185\u90e8\u4e3a\u7236\u4eb2\u8fde\u6709\u5411\u8fb9\uff0c\u56e0\u4e3a\u5165\u6811\u548c\u51fa\u6811\u7684\u53f6\u5b50\u8282\u70b9\u90fd\u4e3a\u539f\u56fe\u4e2d\u7684\u70b9\uff0c\u6240\u4ee5\u4e24\u68f5\u6811\u7684\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u8fde\u65e0\u5411\u8fb9\uff0c\u8fd9\u4e9b\u8fb9\u8fb9\u6743\u90fd\u4e3a$0$\u3002\n\n\u793a\u610f\u56fe\u5982\u4e0b\uff0c\u5de6\u8fb9\u4e3a\u5165\u6811\uff0c\u53f3\u8fb9\u4e3a\u51fa\u6811\u3002\n\n![](https://s2.ax1x.com/2019/12/17/QI3ZWj.png)\n\n\u64cd\u4f5c\u4e00\u65f6\uff0c\u4ece\u5165\u6811\u53f6\u5b50\u8282\u70b9\u5411\u51fa\u6811\u53f6\u5b50\u8282\u70b9\u8fde\u8fb9\uff08\u7ea2\u8272\u7684\u7ebf\uff09\u3002\n\n\u64cd\u4f5c\u4e8c\u65f6\uff0c\u4ece\u5165\u6811\u53f6\u5b50\u8282\u70b9\u5411\u51fa\u6811\u6240\u5bf9\u5e94\u7684\u533a\u95f4\u8282\u70b9\u8fde\u8fb9\uff08\u84dd\u8272\u7684\u7ebf\uff09\u3002\n\n\u64cd\u4f5c\u4e09\u65f6\uff0c\u4ece\u5165\u6811\u6240\u5bf9\u5e94\u7684\u533a\u95f4\u8282\u70b9\u5411\u51fa\u6811\u53f6\u5b50\u8282\u70b9\u8fde\u8fb9\uff08\u7eff\u8272\u7684\u7ebf\uff09\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u770b\u4ee3\u7801\u5427\u3002\n\n\u8bb0\u5f97\u5f00$long\\ long$\u548c\u5f00\u5927\u6570\u7ec4\u3002\n\n$code:$\n```cpp\n#include<bits/stdc++.h>\n#define maxn 800010\n#define inf 2000000000\nusing namespace std;\ntypedef long long ll;\ntemplate<typename T> inline void read(T &x)\n{\n\tx=0;char c=getchar();bool flag=false;\n\twhile(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n\twhile(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\tif(flag)x=-x;\n}\nint n,m,s,flag;\nstruct edge\n{\n    int to,nxt,v;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to,int val)\n{\n    e[++edge_cnt]=(edge){to,head[from],val};\n    head[from]=edge_cnt;\n}\nint in_root,out_root,tree_cnt;\nint ls[maxn],rs[maxn],in_num[maxn],out_num[maxn];\nvoid build_in(int L,int R,int &cur)\n{\n    cur=++tree_cnt;\n    if(L==R)\n    {\n        in_num[L]=cur;\n        return;\n    }\n    int mid=(L+R)>>1;\n    build_in(L,mid,ls[cur]);\n    build_in(mid+1,R,rs[cur]);\n    add(ls[cur],cur,0),add(rs[cur],cur,0);\n}\nvoid build_out(int L,int R,int &cur)\n{\n    cur=++tree_cnt;\n    if(L==R)\n    {\n        out_num[L]=cur;\n        return;\n    }\n    int mid=(L+R)>>1;\n    build_out(L,mid,ls[cur]);\n    build_out(mid+1,R,rs[cur]);\n    add(cur,ls[cur],0),add(cur,rs[cur],0);\n}\nvoid modify_in(int L,int R,int l,int r,int pos,int val,int &cur)\n{\n    if(L<=l&&R>=r)\n    {\n        add(cur,pos,val);\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(L<=mid) modify_in(L,R,l,mid,pos,val,ls[cur]);\n    if(R>mid) modify_in(L,R,mid+1,r,pos,val,rs[cur]);\n}\nvoid modify_out(int L,int R,int l,int r,int pos,int val,int &cur)\n{\n    if(L<=l&&R>=r)\n    {\n        add(pos,cur,val);\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(L<=mid) modify_out(L,R,l,mid,pos,val,ls[cur]);\n    if(R>mid) modify_out(L,R,mid+1,r,pos,val,rs[cur]);\n}\nll dis[maxn];\nbool vis[maxn];\nstruct node\n{\n    ll val;\n    int num;\n};  \nbool operator <(const node &x,const node &y)\n{\n    return x.val>y.val;\n}\npriority_queue<node> q;\nvoid dijkstra()\n{\n    s=in_num[s];\n    for(int i=1;i<=tree_cnt;++i) dis[i]=inf;\n    dis[s]=0;\n    q.push((node){0,s});\n    while(!q.empty())\n    {\n        node tmp=q.top();\n        q.pop();\n        int x=tmp.num;\n        if(vis[x]) continue;\n        vis[x]=true;\n        for(int i=head[x];i;i=e[i].nxt)\n        {\n            int y=e[i].to,v=e[i].v;\n            if(dis[y]>dis[x]+v)\n            {\n                dis[y]=dis[x]+v;\n                q.push((node){dis[y],y});\n            }\n        }\n    }\n}\nint main()\n{\n\tread(n),read(m),read(s);\n    build_in(1,n,in_root);\n    build_out(1,n,out_root);\n    for(int i=1;i<=n;++i)\n        add(in_num[i],out_num[i],0),add(out_num[i],in_num[i],0);\n    while(m--)\n    {\n        read(flag);\n        int x,y,l,r,v;\n        if(flag==1)\n        {\n            read(x),read(y),read(v);\n            add(in_num[x],out_num[y],v);\n        }\n        if(flag==2)\n        {\n            read(x),read(l),read(r),read(v);\n            modify_out(l,r,1,n,in_num[x],v,out_root);\n        }\n        if(flag==3)\n        {\n            read(x),read(l),read(r),read(v);\n            modify_in(l,r,1,n,out_num[x],v,in_root);\n        }\n    }\n    dijkstra();\n    for(int i=1;i<=n;++i)\n    {\n        if(dis[out_num[i]]==inf) printf(\"-1 \");\n        else printf(\"%lld \",dis[out_num[i]]);\n    }\n\treturn 0;\n}\n```\n",
        "postTime": 1576551685,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF786B \u3010Legacy\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u6a21\u677f\u9898\u3002\n\n\u9898\u610f\uff1a\n\n\u4e09\u79cd\u8fde\u8fb9\u65b9\u5f0f\uff1a\n\n- $v\\to u$ \u70b9\u5230\u70b9\u8fde\u8fb9\u3002\n- $v\\to [l,r]$ \u70b9\u5230\u533a\u95f4\u6240\u6709\u70b9\u8fde\u8fb9\u3002\n- $[l,r]\\to v$ \u533a\u95f4\u6240\u6709\u70b9\u5230\u70b9\u8fde\u8fb9\u3002\n\n\u7ed9\u5b9a\u6e90\u70b9\uff0c\u6c42\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n---\n\n\u601d\u8def\uff1a\n\n\u66b4\u529b\u8fde\u8fb9\u663e\u7136\u4f1a\u70b8\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n\u770b\u5230 $10^5$ \u7684\u6570\u636e\u8303\u56f4\u548c\u533a\u95f4\u8fde\u8fb9\uff0c\u81ea\u7136\u800c\u7136\u5730\u60f3\u5230\u7ebf\u6bb5\u6811\uff0c\u53ef\u4ee5\u5efa\u7ebf\u6bb5\u6811\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u8fde\u8fb9\u3002\n\n\u6211\u4eec\u9996\u5148\u5efa\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e00\u68f5\u662f\u201c\u51fa\u6811\u201d\u4e00\u68f5\u662f\u201c\u5165\u6811\u201d\uff0c\u201c\u51fa\u6811\u201d\u4ece\u6839 $[1,n]$ \u5411\u53f6\u5b50\u65b9\u5411\u8fde\u8fb9\uff0c\u201c\u5165\u6811\u201d\u4ece\u53f6\u5b50\u5411\u6839 $[1,n]$ \u65b9\u5411\u8fde\u8fb9\uff0c\u8fb9\u6743\u5747\u4e3a $0$\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u70b9\u5230\u70b9\u8fde\u8fb9\uff0c\u76f4\u63a5\u8fde\u5373\u53ef\u3002\u5bf9\u4e8e\u70b9\u5230\u533a\u95f4\u8fde\u8fb9\uff0c\u6211\u4eec\u91c7\u7528\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\u7684\u65b9\u5f0f\uff0c\u9012\u5f52\u201c\u51fa\u6811\u201d\u627e\u5230\u88ab\u533a\u95f4\u6070\u597d\u8986\u76d6\u7684\u82e5\u5e72\u4e2a\u8282\u70b9\u8fdb\u884c\u8fde\u8fb9\u3002\u5bf9\u4e8e\u533a\u95f4\u5230\u70b9\u8fde\u8fb9\uff0c\u9012\u5f52\u201c\u5165\u6811\u201d\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u5efa\u56fe\u5b8c\u6bd5\u540e\uff0c\u8dd1\u4e00\u904d\u5806\u4f18\u5316 Dijkstra \u5373\u53ef\u3002\n\n---\n\n\u5751\u70b9\uff1a\n\n- \u56e0\u4e3a $1\\sim n$ \u662f\u5355\u70b9\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u52a8\u6001\u5f00\u70b9\u7684\u7f16\u53f7\u5e94\u8be5\u4ece $n+1$ \u5f00\u59cb\u3002\n- \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u7684\u70b9\u6570\u3001\u8fb9\u6570\u8fdc\u5927\u4e8e $n$\uff0c\u6570\u7ec4\u8bb0\u5f97\u5f00\u5927\u3002\n\n---\n\n\u4ee3\u7801\uff1a\n\n```cpp\n//By: Luogu@rui_er(122461)\n#include <bits/stdc++.h>\n#define rep(x,y,z) for(ll x=y;x<=z;x++)\n#define per(x,y,z) for(ll x=y;x>=z;x--)\nusing namespace std;\ntypedef long long ll;\nconst ll N = 3e6+5, inf = 0x3f3f3f3f3f3f3f3fll;\n\nll n, q, s, tot, dis[N], vis[N], rt[2];\nstruct Edge {\n\tll v, w, nxt;\n\tEdge(ll a=0, ll b=0, ll c=0) : v(a), w(b), nxt(c) {}\n\t~Edge() {}\n}e[N];\nll ne = 1, h[N];\nvoid add(ll u, ll v, ll w) {e[++ne] = Edge(v, w, h[u]); h[u] = ne;}\nstruct Node {\n\tll l, r, lc, rc;\n}t[N];\nvoid build(ll &u, ll l, ll r, ll k) { // k=0,1 <=> In/Out Tree\n\tt[u].l = l; t[u].r = r;\n\tif(l == r) {u = l; return;}\n\tu = ++tot;\n\tll mid = (l + r) >> 1;\n\tbuild(t[u].lc, l, mid, k);\n\tbuild(t[u].rc, mid+1, r, k);\n\tif(k) add(u, t[u].lc, 0), add(u, t[u].rc, 0);\n\telse add(t[u].lc, u, 0), add(t[u].rc, u, 0);\n}\nvoid modify(ll u, ll l, ll r, ll st, ll ql, ll qr, ll w, ll k) { // k=0,1 <=> []->#/#->[] \n\tif(ql <= l && r <= qr) {\n\t\tif(k) add(st, u, w);\n\t\telse add(u, st, w);\n\t\treturn;\n\t}\n\tll mid = (l + r) >> 1;\n\tif(ql <= mid) modify(t[u].lc, l, mid, st, ql, qr, w, k);\n\tif(qr > mid) modify(t[u].rc, mid+1, r, st, ql, qr, w, k);\n}\npriority_queue<pair<ll, ll> > hp;\nvoid dijkstra(ll s) {\n\tmemset(dis, 0x3f, sizeof(dis));\n\tdis[s] = 0; hp.push(make_pair(0, s));\n\twhile(!hp.empty()) {\n\t\tll u = hp.top().second; hp.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u] = 1;\n\t\tfor(ll i=h[u];i;i=e[i].nxt) {\n\t\t\tll v = e[i].v, w = e[i].w;\n\t\t\tif(dis[v] > dis[u] + w) {\n\t\t\t\tdis[v] = dis[u] + w;\n\t\t\t\thp.push(make_pair(-dis[v], v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tscanf(\"%lld%lld%lld\", &n, &q, &s);\n\ttot = n;\n\tbuild(rt[0], 1, n, 0);\n\tbuild(rt[1], 1, n, 1);\n\trep(i, 1, q) {\n\t\tll op, a, b, c, d;\n\t\tscanf(\"%lld%lld%lld%lld\", &op, &a, &b, &c);\n\t\tif(op != 1) scanf(\"%lld\", &d);\n\t\tif(op == 1) add(a, b, c);\n\t\telse if(op == 2) modify(rt[1], 1, n, a, b, c, d, 1);\n\t\telse modify(rt[0], 1, n, a, b, c, d, 0);\n\t}\n\tdijkstra(s);\n\trep(i, 1, n) printf(\"%lld%c\", dis[i]<inf?dis[i]:-1, \" \\n\"[i==n]);\n\treturn 0;\n}\n```",
        "postTime": 1623075436,
        "uid": 122461,
        "name": "rui_er",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF786B\u3010Legacy\u3011\u2014\u2014\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u6a21\u677f\u9898\u3002\n\n### \u9898\u9762\u7b80\u8ff0\n\n\u6709 $n$ \u4e2a\u70b9\u7684\u6709\u5411\u56fe\uff0c\u6709 $3$ \u79cd\u8fb9\uff0c\u5206\u522b\u4e3a\n- $u\\to v$ \u8fb9\u6743\u4e3a $w$  \n- $u\\to $ $[l,r]$ \u7684\u6240\u6709\u70b9 \u8fb9\u6743\u4e3a $w$  \n- $[l,r]$ \u7684\u6240\u6709\u70b9 $\\to u$ \u8fb9\u6743\u4e3a $u$\n\n\u6c42\u4ece $s$ \u53f7\u70b9\u5230\u6240\u6709\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8def\u3002\n\n### \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n\n\u9996\u5148\u6700\u65e0\u8111\u7684\u65b9\u6cd5\u5c31\u662f\u628a\u6240\u6709\u7684\u8fb9\u5168\u90e8\u90fd\u5efa\u51fa\u6765\u8dd1\u5355\u6e90\u6700\u77ed\u8def\uff0c$O(n^2\\log n)$ \u7acb\u9a6c\u8ba9\u4f60\u66b4\u6bd9\u3002\n\n\u4e8e\u662f\u5c31\u6709\u4e86\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5728\u4e8e\u8fd9\u4e9b\u8fde\u63a5\u533a\u95f4\u7684\u8fb9\u4e0d\u7528\u5168\u90e8\u5efa\u51fa\u6765\uff0c\u5230\u5e95\u662f\u4ec0\u4e48\u610f\u601d\u6211\u4eec\u7b49\u4e0b\u518d\u89e3\u91ca\u3002\u5148\u62ff\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8fc7\u6765\u3002\n\n![image.png](https://i.loli.net/2020/08/20/bDK1drAPmyScLeO.png)\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u8fde\u8fb9\u64cd\u4f5c\uff0c$u\\to [l,r]$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u539f\u56fe\u79cd\u7684 $u$ \u8fde\u5411 $[l,r]$ \u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e0a\u7684\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u4e8e\u662f $O(n)$ \u7684\u8fb9\u6570\u4f18\u5316\u6210\u4e86 $O(\\log n)$\u3002\uff08\u4e0b\u56fe\u4f8b\u5b50\u4e3a $4\\to [1,3]$\uff09\u3002\n\n![image.png](https://i.loli.net/2020/08/20/rvPSwxLpzVJcZlC.png)  \n\uff08\u7eff\u8272\u8fb9\u8fb9\u6743\u4e3a $w$\uff0c\u84dd\u8272\u8fb9\u8fb9\u6743\u4e3a $0$\uff09\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u8fd8\u53ef\u4ee5\u533a\u95f4\u8fde\u5411\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u518d\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u65b9\u5411\u4e3a\u6839\u5411\uff0c\u7136\u540e\u76f8\u540c\u7684\u65b9\u6cd5\u8fde\u8fb9\u3002\uff08\u4e0b\u56fe\u4f8b\u5b50\u4e3a $[1,3]\\to 4$\u3002\n\n![image.png](https://i.loli.net/2020/08/20/lYJb2ndquoSm1t9.png)\n\n\u7efc\u5408\u8d77\u6765\u662f\u8fd9\u6837\u7684\u3002\n\n![image.png](https://i.loli.net/2020/08/20/sY7txHgRSzcUZyE.png)\n\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff0c\u6bcf\u68f5\u6811\u7684\u53f6\u8282\u70b9\u5176\u5b9e\u5c31\u662f\u7eff\u8272\u8282\u70b9\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5408\u5e76\u53f6\u8282\u70b9\u548c\u7eff\u8272\u8282\u70b9\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u8fde $0$ \u6743\u65e0\u5411\u8fb9\u3002\u6211\u9009\u62e9\u540e\u8005\u56e0\u4e3a\u66f4\u52a0\u65b9\u4fbf\u4e00\u70b9\u3002\n\n![image.png](https://i.loli.net/2020/08/20/r5Lu3wFHaWq6Rd8.png)\n\n\u8fd9\u4e2a\u5efa\u6811\u7528 zkw \u66f4\u52a0\u65b9\u4fbf\u4e00\u70b9\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\uff0c\u6240\u4ee5\u5c31\u9012\u5f52\u5f04\u3002\n\n\uff08WA \u4e86\u597d\u4e45\uff0c\u624d\u53d1\u73b0\u662f\u52a0\u8fb9\u51fa\u4e86\u95ee\u9898 qwq\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=9e5+9, M=5e6+9; //2\u68f5\u7ebf\u6bb5\u6811+\u666e\u901a\u8282\u70b9 \n\nstruct edge {int to,nxt,w;}e[M]; int hd[N],tot;\nvoid add(int u,int v,int w) {e[++tot]=(edge){v,hd[u],w};hd[u]=tot;}\n\nint n,q,s;\n\nstruct Node {int l,r;}t[N];\nvoid build(int p,int l,int r) {\n\tt[p].l=l, t[p].r=r;\n\tif(l==r) {\n\t\tadd(l+8*n,p,0), add(p+4*n,l+8*n,0);\n\t\tadd(p,l+8*n,0), add(l+8*n,p+4*n,0);\n\t\treturn;\n\t}\n\tadd(p,p*2,0), add(p*2+n*4,p+n*4,0);\n\tadd(p,p*2+1,0), add(p*2+1+n*4,p+n*4,0);\n\tbuild(p*2,l,(l+r)/2), build(p*2+1,(l+r)/2+1,r);\n}\nvoid addh(int p,int x,int y,bool type,int u,int w) {\n\tint l=t[p].l, r=t[p].r, mid=((l+r)>>1);\n\tif(l==x&&y==r) {\n\t\tif(!type) return add(u+8*n,p,w);\n\t\telse return add(p+4*n,u+8*n,w);\n\t}\n\tif(y<=mid) addh(p*2,x,y,type,u,w);\n\telse if(x>mid) addh(p*2+1,x,y,type,u,w);\n\telse addh(p*2,x,mid,type,u,w), addh(p*2+1,mid+1,y,type,u,w);\n}\n\nint d[N];\nnamespace ShortestPath{\n\tbool vst[N];\n\tstruct Node {\n\t\tint u,w;\n\t\tbool operator < (const Node &a) const {\n\t\t\treturn w>a.w;\n\t\t}\n\t};\n\tvoid dijkstra() {\n\t\tmemset(d,0x3f,sizeof(d)); d[s]=0;\n\t\tpriority_queue<Node>q; q.push((Node){s,0ll});\n\t\twhile(!q.empty()) {\n\t\t\tint u=q.top().u; q.pop();\n\t\t\tif(vst[u]) continue;\n\t\t\tvst[u]=1;\n\t\t\tfor(int i=hd[u],v;i;i=e[i].nxt) {\n\t\t\t\tif(!vst[v=e[i].to]&&d[v]>d[u]+e[i].w) {\n\t\t\t\t\td[v]=min(d[v],d[u]+e[i].w);\n\t\t\t\t\tq.push((Node){v,d[v]});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nsigned main() {\n\tscanf(\"%lld%lld%lld\",&n,&q,&s);\n\tbuild(1,1,n);\n\tfor(int i=1,op,v,u,w,l,r;i<=q;i++) {\n\t\tscanf(\"%lld\",&op);\n\t\tif(op==1)\n\t\t\tscanf(\"%lld%lld%lld\",&v,&u,&w), add(v+8*n,u+8*n,w);\n\t\telse if(op==2)\n\t\t\tscanf(\"%lld%lld%lld%lld\",&v,&l,&r,&w),\n\t\t\taddh(1,l,r,0,v,w);\n\t\telse if(op==3)\n\t\t\tscanf(\"%lld%lld%lld%lld\",&v,&l,&r,&w),\n\t\t\taddh(1,l,r,1,v,w);\n\t}\n\ts+=8*n;\n\tShortestPath::dijkstra();\n\tfor(int i=1;i<=n;i++)\n\t\tif(d[i+8*n]<2e18) printf(\"%lld \",d[i+8*n]);\n\t\telse printf(\"-1 \");\n\treturn 0;\n}\n```",
        "postTime": 1597893382,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF786B \u3010Legacy\u3011"
    },
    {
        "content": "\u770b\u5230\u533a\u95f4\u5f88\u5bb9\u6613\u5c31\u80fd\u60f3\u5230\u7ebf\u6bb5\u6811\n\n\n\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u4ee3\u8868\u5b83\u5728\u7ebf\u6bb5\u6811\u4e0a\u4ee3\u8868\u7684\u533a\u95f4\u7684\u6240\u6709\u70b9\n\n\n\u4e00\u68f5\u7ebf\u6bb5\u6811\u8868\u793a\u8fdb,\u53e6\u4e00\u9897\u8868\u793a\u51fa\n\n\n\u8868\u793a\u8fdb\u7684\u7ebf\u6bb5\u6811\u8981\u5411\u4e0a\u8fde\u8fb9\n\n\n\u8868\u793a\u51fa\u7684\u7ebf\u6bb5\u6811\u8981\u5411\u4e0b\u8fde\u8fb9\n\n\n(\u753b\u4e2a\u56fe\u7406\u89e3\u4e00\u4e0b?)\n\n\n\u6240\u4ee5\u8fdb\u6765\u7684\u7ebf\u6bb5\u6811$son->fa$\u957f\u5ea6\u4e3a$0$\n\n\n\u51fa\u53bb\u7684\u7ebf\u6bb5\u6811$fa->son$\u957f\u5ea6\u4e3a$0$\n\n\n\u5bf9\u4e8e\u64cd\u4f5c$2$\n\n\n\u8bbe$pos_u$\u8868\u793a$u$\u5728\u7b2c\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u7f16\u53f7\n\n\n\u90a3\u4e48\u5c31\u628a$pos_u$\u5411\u6240\u6709$[ql,qr]\u2208[l,r]$\u7684\u6781\u5927\u5b50\u533a\u95f4\u7684\u8282\u70b9\u7f16\u53f7\u8fde\u4e00\u6761\u957f\u5ea6\u4e3a$w$\u7684\u8fb9\n\n\n\u64cd\u4f5c$3$\u540c\u7406,\u53ea\u8981\u53cd\u8fc7\u6765\u5efa\u8fb9\u5c31\u597d\u4e86\n\n\n\u6bcf\u4e00\u6b21\u65b0\u5efa\u8fb9\u7684\u64cd\u4f5c\u590d\u6742\u5ea6\u662f $O(2logn)$\n\n\n\u6700\u540e\u5c31\u53ea\u8981\u8f93\u51fa$s$\u5230\u6240\u6709\u70b9\u5728\u7b2c\u4e8c\u68f5\u6811\u4e0a\u4f4d\u7f6e\u7684\u70b9\u7684\u8ddd\u79bb\u5c31$ok$\u4e86\n",
        "postTime": 1517207411,
        "uid": 20156,
        "name": "Kelin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF786B \u3010Legacy\u3011"
    },
    {
        "content": "### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF786B)\n\n## \u9898\u610f\n\n- \u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u8282\u70b9\u7684\u6709\u5411\u6b63\u6743\u56fe\uff0c\u8d77\u70b9\u4e3a $s$\uff0c\u5171\u6709 $q$ \u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5206\u4e09\u79cd\u3002\n\n\t- \u70b9\u8fde\u70b9\n    \n    - \u70b9\u8fde\u533a\u95f4\n    \n    - \u533a\u95f4\u8fde\u70b9\n   \n- \u6c42\u4ece\u8d77\u70b9\u51fa\u53d1\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0c\u82e5\u4e0d\u8fde\u901a\u5219\u8f93\u51fa $-1$\u3002\n\n## \u9898\u89e3\n\n\u5148\u8003\u8651\u66b4\u529b\u8fde\u8fb9\uff0c\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u8fbe\u5230\u4e86 $O(n^2)$\u3002\n\n\u8003\u8651\u5230\u533a\u95f4\u8fde\u8fb9\uff0c\u90a3\u4e48\u53ef\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u8fdb\u884c\u62c6\u5206\u3002\n\n\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u7ebf\u6bb5\u6811\u3002\n\n\u8003\u8651\u5c06\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u4f5c\u4e3a\u4ee3\u66ff\u4e00\u4e2a\u533a\u95f4\u7684\u865a\u70b9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7y0ylsg9.png)\n\n\u663e\u7136\u6211\u4eec\u9700\u8981\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e0d\u7136\u8dd1\u51fa\u6765\u8ddd\u79bb\u90fd\u662f $0$ \u4e86\u8fd8\u8dd1\u5565\u3002\uff08\uff08\uff08\n\n\u6211\u4eec\u4ee5\u5de6\u8fb9\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4e3a\u5b9e\u9645\u7684\u70b9\u3002\n\n\u7528\u7ea2\u7ebf\u4ee3\u8868\u53cc\u5411\u8fb9\uff0c\u6a59\u8272\u4ee3\u8868\u5411\u4e0b\u7684\u5355\u5411\u8fb9\uff0c\u84dd\u8272\u4ee3\u8868\u5411\u4e0a\u7684\u5355\u5411\u8fb9\uff0c\u7d2b\u8272\u4ee3\u8868\u5411\u53f3\u7684\u5355\u5411\u8fb9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/c36xb8ma.png)\n\n\u663e\u7136\u8fd9\u662f\u521d\u59cb\u5fc5\u987b\u8981\u8fde\u7684\u8fb9\uff0c\u540c\u65f6\u8fd9\u4e9b\u8fb9\u7684\u8fb9\u6743\u4e3a $0$\u3002\n\n\u521d\u59cb\u5316\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n---\n\n\u8003\u8651\u64cd\u4f5c $1$\u3002\n\n\u76f4\u63a5\u5b9e\u9645\u7684\u70b9\u8fde\u5355\u5411\u8fb9\u5373\u53ef\u3002\n\n\u5355\u6b21\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6 $O(1)$\u3002\n\n\u4f8b\u5982\u8fde $2 \\to 3$ \u8fd9\u6761\u8fb9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tupl269i.png)\n\n---\n\n\u8003\u8651\u64cd\u4f5c $2$\u3002\n\n\u70b9\u8fde\u533a\u95f4\uff0c\u6211\u4eec\u5c06\u533a\u95f4\u5256\u5206\u6210\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\uff0c\u7136\u540e\u5b9e\u9645\u7684\u70b9\u5411\u5404\u4e2a\u8868\u793a\u533a\u95f4\u7684\u70b9\u8fde\u63a5\u5373\u53ef\u3002\n\n\u5355\u6b21\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\log n)$\u3002\n\n\u4f8b\u5982 $1 \\to [5,8]$\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/8blo2lu4.png)\n\n---\n\n\u8003\u8651\u64cd\u4f5c $3$\u3002\n\n\u5355\u6b21\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\log n)$\u3002\n\n\u533a\u95f4\u8fde\u70b9\uff0c\u540c\u6837\u6211\u4eec\u5c06\u533a\u95f4\u5256\u5206\u4e3a\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\uff0c\u7136\u540e\u8868\u793a\u533a\u95f4\u7684\u70b9\u8fde\u5411\u5b9e\u9645\u7684\u70b9\u5373\u53ef\u3002\n\n\u4f8b\u5982 $[1,4] \\to 1$\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jrjnljoz.png)\n\n---\n\n\u6700\u540e\u5408\u8d77\u6765\u56fe\u5c31\u6210\u4e86\u8fd9\u6837\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/d1f6qp14.png)\n\n\u7136\u540e\u4ece\u539f\u70b9\u5bf9\u5e94\u7684\u5b9e\u70b9\u5f00\u59cb\u8dd1 Dijkstra \u5373\u53ef\u3002\n\n\u8bb0\u5f97\u7a7a\u95f4\u5f00\u5927\uff01\u8bb0\u5f97\u5f00 long long\uff01\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0a\u754c $O(n+q\\log n)$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c $O(n\\log^2 n)$\u3002\n\n---\n\n## \u4ee3\u7801\n\n```cpp\nconst int N=5e5+5,D=5e5,INF=1e17;\nint n,m,st,dis[N<<1],node[N];\nbool vst[N<<1];\nvector<pair<int,int> >es[N<<1];\n\n#define mid ((l+r)>>1)\n#define xl (x<<1)\n#define xr (x<<1|1)\n\ninline void build(int x,int l,int r){\n\tif(l==r){node[l]=x;return ;}\n\tes[x].pb(mp(0,xl));es[x].pb(mp(0,xr));\n\tes[xl+D].pb(mp(0,x+D));es[xr+D].pb(mp(0,x+D));\n\tbuild(xl,l,mid);build(xr,mid+1,r);\n}\n\ninline void add(int x,int l,int r,int L,int R,int v,int w,int op){\n\tif(L<=l&&r<=R){\n\t\tif(op==2) es[v].pb(mp(w,x));\n\t\telse es[x+D].pb(mp(w,v));\n\t\treturn ;\n\t}\n\tif(L<=mid) add(xl,l,mid,L,R,v,w,op);\n\tif(R>mid) add(xr,mid+1,r,L,R,v,w,op);\n}\n\ninline void dijkstra(int s){\n\tpriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q; \n\tfill(dis,dis+(N<<1)+1,INF);dis[s]=0;q.push(mp(0,s));\n\twhile(!q.empty()){\n\t\tint x=q.top().second,sum=q.top().first;\n\t\tq.pop();\n\t\tif(vst[x]) continue;\n\t\tvst[x]=1;\n\t\tfor(re i=0;i<es[x].size();++i){\n\t\t\tint t=es[x][i].second,w=es[x][i].first;\n\t\t\tif(dis[t]>sum+w){\n\t\t\t\tdis[t]=sum+w;\n\t\t\t\tq.push(mp(dis[t],t));\n\t\t\t}\n\t\t}\n\t}\n}\n\n// ---------- Graph ---------- //\n\nsigned main(){\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\trd(n);rd(m);rd(st);\n\tbuild(1,1,n);\n\tfor(re i=1;i<=n;++i) es[node[i]].pb(mp(0,node[i]+D)),es[node[i]+D].pb(mp(0,node[i]));\n\tfor(re i=1;i<=m;++i){\n\t\tint op,u,v,w,l,r;\n\t\trd(op);\n\t\tif(op==1){\n\t\t\trd(v);rd(u);rd(w);\n\t\t\tes[node[v]].pb(mp(w,node[u]));\n\t\t}\n\t\telse{\n\t\t\trd(v);rd(l);rd(r);rd(w);\n\t\t\tadd(1,1,n,l,r,node[v],w,op);\n\t\t}\n\t}\n\tdijkstra(node[st]);\n\tfor(re i=1;i<=n;++i){\n\t\tif(dis[node[i]]==INF) cout<<\"-1 \";\n\t\telse wr(dis[node[i]]),putchar(' ');\n\t}puts(\"\");\n\treturn 0;\n}\n\n// ---------- Main ---------- //\n```",
        "postTime": 1625738684,
        "uid": 83999,
        "name": "Demoe",
        "ccfLevel": 7,
        "title": "CF786B Legacy \u9898\u89e3 \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe"
    },
    {
        "content": "\u9898\u610f\u5927\u6982\u662f\uff1a\n\n\u5df2\u77e5\u6709 $n$ \u4e2a\u70b9\uff0c\u6709\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n1. `1 v u w` \u8868\u793a\u4ece $v$ \u5411 $u$ \u8fde\u4e00\u6761\u6743\u503c\u4e3a $w$ \u7684\u6709\u5411\u8fb9\u3002\n1. `2 v l r w` \u8868\u793a\u4ece $v$ \u5411\u7f16\u53f7\u5728 $l$ \u5230 $r$ \u4e4b\u95f4\u7684\u6240\u6709\u70b9\u5404\u8fde\u4e00\u6761\u6743\u503c\u4e3a $w$ \u7684\u6709\u5411\u8fb9\u3002\n1. `3 v l r w` \u8868\u793a\u4ece\u7f16\u53f7\u5728 $l$ \u5230 $r$ \u4e4b\u95f4\u7684\u6240\u6709\u70b9\u5411 $v$ \u5404\u8fde\u4e00\u6761\u6743\u503c\u4e3a $w$ \u7684\u6709\u5411\u8fb9\u3002\n\n\u6c42\u4ece $s$ \u51fa\u53d1\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\uff0c\u82e5\u4e0d\u8fde\u901a\u5219\u4e3a $-1$\u3002\n\n\u66b4\u529b\u8fde\u8fb9\u80af\u5b9a\u4e0d\u884c\uff0c\u56e0\u4e3a\u5982\u679c\u66b4\u529b\u8fde\u8fb9\u90a3\u4e48\u603b\u8fb9\u6570\u4f1a\u8fbe\u5230 $n^2$ \u7684\u7ea7\u522b\u3002\n\n\u8003\u8651\u5efa\u7acb\u4e00\u4e2a\u70b9\u4ee3\u8868\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u5bf9\u4e8e $2$ \u64cd\u4f5c\uff0c\u5efa\u7acb\u4e00\u4e2a\u70b9\u8868\u793a\u533a\u95f4 $[l,r]$\uff0c\u4ece\u8be5\u70b9\u5411\u533a\u95f4\u5185\u6bcf\u4e00\u4e2a\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a\u96f6\u7684\u8fb9\uff0c\u518d\u4ece $v$ \u5411\u8be5\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a $w$ \u7684\u8fb9\u3002\n\n\u5bf9\u4e8e $3$ \u64cd\u4f5c\uff0c\u540c\u7406\uff0c\u53ea\u4e0d\u8fc7\u8fb9\u7684\u65b9\u5411\u53cd\u8fc7\u6765\u800c\u5df2\u3002\n\n\u4f46\u662f\u8fd9\u6837\u8fd8\u662f\u4e0d\u884c\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f46\u6ca1\u6709\u51cf\u5c11\u8fb9\u6570\uff0c\u53cd\u800c\u589e\u52a0\u4e86\u70b9\u6570\u3002\n\n\u4f46\u662f\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u601d\u8def\u3002\u770b\u5230\u201c\u533a\u95f4\u201d\uff0c\u60f3\u5fc5\u90fd\u4f1a\u60f3\u5230\u7ebf\u6bb5\u6811\u3002\n\n\u7531\u4e8e\u662f\u6709\u5411\u8fb9\uff0c\u6240\u4ee5\u4e00\u9897\u7ebf\u6bb5\u6811\u4e0d\u591f\uff0c\u90a3\u4e48\u5c31\u5efa\u4e24\u9897\u7ebf\u6bb5\u6811\u3002\n\n\u4e00\u9897\u8fb9\u4ece\u513f\u5b50\u5230\u7236\u4eb2\uff0c\u4e00\u9897\u8fb9\u4ece\u7236\u4eb2\u5230\u513f\u5b50\u3002\n\n\u8fb9\u6743\u5747\u4e3a\u96f6\u3002\n\n\u7136\u540e\u4ece\u4e00\u4e2a\u70b9\u5230\u533a\u95f4\u8fde\u8fb9\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u70b9\u8fde\u5230\u8986\u76d6\u76ee\u6807\u533a\u95f4\u7684\u6240\u6709\u533a\u95f4\u3002\n\n\u6ce8\u610f\u4e00\u70b9\uff1a\n\n# \u5173\u4e8eSPFA\uff1a\n\n- \u5b83\u6b7b\u4e86\n\n```\n#include <bits/stdc++.h>\n#define add(u, v, w) G[u].push_back(make_pair(v, w))\nusing namespace std;\nint n, o, v, u, l, r, w, q, s, c;\nvector<pair<int, int> > G[500000];\nlong long dis[500000];\n\nstruct SEG_TREE_NODE {\n\tint l, r;\n\tint ls, rs;\n}st[500000];\nint t1, t2;\n\nvoid dijskra(void) {\n\tbool vis[500000];\n\tmemset(vis, 0, sizeof(vis));\n\tmemset(dis, 0x3F, sizeof(dis));\n\tdis[s] = 0;\n\tpriority_queue<pair<long long, int> > Q;\n\tQ.push(make_pair(0ll, s));\n\twhile (!Q.empty()) {\n\t\tint u = Q.top().second;\n\t\tQ.pop();\n\t\tif (!vis[u]) {\n\t\t\tvis[u] = 1;\n\t\t\tfor (int i = 0; i < G[u].size(); i++) {\n\t\t\t\tint v = G[u][i].first;\n\t\t\t\tint d = G[u][i].second;\n\t\t\t\tif (d + dis[u] < dis[v]) {\n\t\t\t\t\tdis[v] = d + dis[u];\n\t\t\t\t\tQ.push(make_pair(-dis[v], v));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!vis[i]) dis[i] = -1;\n\t}\n}\n\nint create_st(int l, int r, bool f) {\n\tint ret;\n\tif (l == r) ret = l;\n\telse ret = ++c;\n\tst[ret].l = l;\n\tst[ret].r = r;\n\tif (l != r) {\n\t\tint m = (l + r) / 2;\n\t\tst[ret].ls = create_st(l, m, f);\n\t\tst[ret].rs = create_st(m+1,r,f);\n\t\tif (f) {\n\t\t\tadd(ret, st[ret].ls, 0);\n\t\t\tadd(ret, st[ret].rs, 0);\n\t\t} else {\n\t\t\tadd(st[ret].ls, ret, 0);\n\t\t\tadd(st[ret].rs, ret, 0);\n\t\t}\n\t} else st[ret].ls = st[ret].rs = -1e9;\n\treturn ret;\n}\n\nvoid addedge(int v, int w, int p, int l, int r, bool f) {\n\tif (l == st[p].l && r == st[p].r) {\n\t\tif (f) add(p, v, w);\n\t\telse add(v, p, w);\n\t} else {\n\t\tint m = (st[p].l + st[p].r) / 2;\n\t\tif (r <= m) addedge(v, w, st[p].ls, l, r, f);\n\t\telse if (l > m) addedge(v, w, st[p].rs, l, r, f);\n\t\telse addedge(v, w, st[p].ls, l, m, f), addedge(v, w, st[p].rs, m+1, r, f);\n\t}\n}\n\nint main() {\n\tcin >> n >> q >> s, c = n;\n\tt1 = create_st(1, n, 1);\n\tt2 = create_st(1, n, 0);\n\twhile (q--) {\n\t\tcin >> o;\n\t\tswitch (o) {\n\t\t\tcase 1: {\n\t\t\t\tcin >> v >> u >> w;\n\t\t\t\tadd(v, u, w);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2: {\n\t\t\t\tcin >> v >> l >> r >> w;\n\t\t\t\taddedge(v, w, t1, l, r, 0);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: {\n\t\t\t\tcin >> v >> l >> r >> w;\n\t\t\t\taddedge(v, w, t2, l, r, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tdijskra();\n\tfor (int i = 1; i <= n; i++) {\n\t\tcout << dis[i] << ' ';\n\t}\n\tcout << endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1619015164,
        "uid": 153422,
        "name": "0x3F",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF786B \u3010Legacy\u3011"
    },
    {
        "content": "### \u9898\u89e3\n\n\u6709\u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u505a\u6cd5\u662f\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3a $O(n\\log^2n)$\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4f18\u5316\u3002\u4e0d\u8fc7\u4e0d\u662f\u672c\u6587\u7684\u91cd\u70b9\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u65b9\u6cd5\u662f\u4e0d\u7528\u7ebf\u6bb5\u6811\u663e\u5f0f\u5efa\u56fe\uff0c\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u77ed\u8def\u3002\u5206\u522b\u8003\u8651\u4e00\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n- \u70b9 $u$ \u5411\u533a\u95f4\u8fde\u8fb9\uff1a\u76f4\u63a5\u5728\u7528 $u$ \u677e\u5f1b\u7684\u65f6\u5019\u5bf9\u8be5\u533a\u95f4\u53d6 $\\min$ \u5373\u53ef\u3002\n- \u533a\u95f4\u5411\u70b9 $u$ \u8fde\u8fb9\uff1a\u6ce8\u610f\u5230\u4e00\u4e2a\u533a\u95f4\u53ea\u4f1a\u88ab\u533a\u95f4\u5185 $dis$ \u6700\u5c0f\u7684\u70b9\u677e\u5f1b\uff0c\u5728\u679a\u4e3e\u5230\u533a\u95f4\u7684\u70b9\u65f6\uff0c\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u66f4\u65b0\u70b9 $u$\uff0c\u7136\u540e\u628a\u8be5\u533a\u95f4\u5220\u53bb\u5373\u53ef\u3002\u76f4\u63a5\u628a\u533a\u95f4\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u4e0a\u7684\u7ed3\u70b9\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u4e24\u4e2a\u64cd\u4f5c\u5206\u522b\u5f00\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6bcf\u4e2a\u533a\u95f4\u53ea\u4f1a\u4f7f\u7528 $1$ \u6b21\uff0c\u6bcf\u6b21\u66f4\u65b0\u5bf9\u5e94\u7684\u7ed3\u70b9 $O(log n)$\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(n\\log n)$\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n\nusing ll = long long;\nusing pli = std::pair<ll, int>;\nusing pii = std::pair<int, int>;\n#define mkp(a, b) std::make_pair(a, b)\n\nconst ll inf = 1LL << 60;\nconst int N = 1e5 + 10;\n\nnamespace Fast_IO\n{\n    const int bufsize = 1 << 22;\n    inline char Getchar()\n    {\n        static char buf[bufsize], *p1 = buf, *p2 = buf;\n        return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, bufsize, stdin), p1 == p2) ? EOF : *p1++;\n    }\n\n    template<typename T = int> inline T read()\n    {\n        T x = 0, f = 0; char ch = Getchar();\n        while (!isdigit(ch)) f |= ch == '-', ch = Getchar();\n        while ( isdigit(ch)) x = x * 10 + ch - '0', ch = Getchar();\n        return f ? -x : x;\n    }\n\n    char Buf[bufsize], *fout = Buf;\n    inline void flush() \n    {\n        fwrite(Buf, 1, fout - Buf, stdout), fflush(stdout);\n    }\n\n    inline void print(char *s) { while (*s) *fout++ = *s++; }\n    inline void print(char c) { *fout++ = c; }\n\n    template<typename T> inline void Write(T u) \n    {\n        u > 9 ? Write(u / 10), *fout++ = u % 10 + '0' : *fout++ = u + '0';\n    }\n\n    template<typename T> inline void write(T u, char ch = ' ') \n    {\n        if (u < 0) print('-'), u = -u; Write(u), print(ch);\n    }\n}\nusing namespace Fast_IO;\n\nstruct Node {int l, r, w;};\nstd::vector<Node> vec[N];\nint w[N]; ll dis[N];\n\nstruct SegmentTree1\n{\n    static const int M = N << 2;\n    int del[M]; ll tag[M]; pli Min[M];\n    #define mid ((l + r) >> 1)\n\n    inline void down(int k, ll dat, int d)\n    {\n        if (d) del[k] = 1, tag[k] = inf + 10, Min[k] = mkp(inf + 10, -1);\n        if (del[k]) return;\n        Min[k].first = std::min(Min[k].first, dat);\n        tag[k] = std::min(tag[k], dat);\n    }\n\n    inline void upd(int k)\n    {\n        del[k] = del[k << 1] & del[k << 1 | 1];\n        Min[k] = del[k] ? mkp(inf + 10, -1) : std::min(Min[k << 1], Min[k << 1 | 1]);\n    }\n\n    inline void down(int k)\n    {\n        if (del[k]) return;\n        down(k << 1, tag[k], 0), down(k << 1 | 1, tag[k], 0), tag[k] = inf;\n    }\n\n    inline void build(int k, int l, int r)\n    {\n        tag[k] = inf;\n        if (l == r) Min[k] = mkp(inf, l), del[k] = 0;\n        if (l != r) build(k << 1, l, mid), build(k << 1 | 1, mid + 1, r), upd(k);\n    }\n\n    inline void Mod(int k, int l, int r, int ql, int qr, ll dat, int d = 0)\n    {\n        if (ql >  r || l >  qr) return;\n        if (ql <= l && r <= qr) return down(k, dat, d);\n        down(k), Mod(k << 1, l, mid, ql, qr, dat, d), Mod(k << 1 | 1 , mid + 1, r, ql, qr, dat, d), upd(k);\n    }\n\n    inline int query() {return Min[1].second;}\n}T1;\n// \u533a\u95f4\u53d6min \u5355\u70b9\u5220\u9664 \u67e5\u8be2\u5168\u5c40\u6700\u5c0f\u503c\n\nstruct SegmentTree2\n{\n    static const int M = N << 2;\n    std::vector<pii> vec[M]; int del[M], vis[M];\n    #define mid ((l + r) >> 1)\n\n    inline void Add(int k, int l, int r, int ql, int qr, pii dat)\n    {\n        if (ql >  r || l >  qr) return;\n        if (ql <= l && r <= qr) return vec[k].push_back(dat), void();\n        Add(k << 1, l, mid, ql, qr, dat), Add(k << 1 | 1, mid + 1, r, ql, qr, dat);\n    }\n\n    inline void upd(int k, int l, int r, int p, ll dat, int n)\n    {\n        for (int i = 0; i < vec[k].size(); ++i)\n        {\n            int u = vec[k][i].first, idx = vec[k][i].second;\n            if (!vis[idx]) T1.Mod(1, 1, n, u, u, (ll)::w[idx] + dat, 0), vis[idx] = true;\n        }\n        vec[k].clear();\n        if (l != r) p <= mid ? upd(k << 1, l, mid, p, dat, n) : upd(k << 1 | 1, mid + 1, r, p, dat, n);\n    }\n}T2;\n\nint main()\n{\n    int n = read(), m = read(), s = read();\n    for (int i = 1; i <= m; ++i)\n    {\n        int opt = read(), u = read();\n        if (opt == 1) \n        {\n            int v = read(), w = read();\n            vec[u].push_back(Node{v, v, w});\n        }\n        if (opt == 2)\n        {\n            int l = read(), r = read(), w = read();\n            vec[u].push_back(Node{l, r, w});\n        }\n        if (opt == 3)\n        {\n            int l = read(), r = read(), w = read(); ::w[i] = w;\n            T2.Add(1, 1, n, l, r, mkp(u, i));\n        }\n    }\n    memset(dis, 0x3f, sizeof(dis));\n    T1.build(1, 1, n), T1.Mod(1, 1, n, s, s, 0), dis[s] = 0;\n    while (true)\n    {\n        pli dat = T1.Min[1]; int u = T1.query(); \n        if (u == -1 || dat.first >= 1e18) break;\n        T1.Mod(1, 1, n, u, u, inf + 10, 1);\n        T2.upd(1, 1, n, u, dis[u] = dat.first, n);\n        for (int i = 0; i < vec[u].size(); ++i)\n        {\n            int l = vec[u][i].l, r = vec[u][i].r;\n            T1.Mod(1, 1, n, l, r, vec[u][i].w + dis[u]);\n        }\n    }\n    for (int i = 1; i <= n; ++i) write(dis[i] >= 1e18 ? -1 : dis[i]);\n    return flush(), 0;\n}\n\n```\n\n",
        "postTime": 1604365904,
        "uid": 68387,
        "name": "lamboo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF786B \u3010Legacy\u3011"
    },
    {
        "content": "# \u524d\u8a00\n[\u535a\u5ba2\u56ed\u98df\u7528\u66f4\u4f73](https://www.cnblogs.com/C202202chenkelin/p/14771453.html)\n# \u9898\u610f\n\u6709 $n$ \u4e2a\u70b9\uff0c$q$ \u6b21\u8fde\u8fb9\uff0c\u4ee5\u53ca\u8d77\u70b9 $s$ \u3002\u8fde\u8fb9\u5177\u4f53\u5206\u4e09\u79cd\uff1a\n1. $1$ $v$ $u$ $w$ \u4ece $v$ \u5230 $u$ \u8fde\u4e00\u6761\u8fb9\u3002\n2. $2$ $v$ $l$ $r$ $w$ \u4ece $v$ \u5411 $l$ \u5230 $r$ \u6240\u6709\u70b9\u8fde\u4e00\u6761\u8fb9\u3002\n3. $3$ $v$ $l$ $r$ $w$ \u4ece $l$ \u5230 $r$ \u6240\u6709\u70b9\u5411 $v$ \u8fde\u4e00\u6761\u8fb9\u3002 \n\n\u6c42\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u3002\n# \u601d\u8def\n\u4ee5\u524d\u505a\u8fc7\u4e00\u9053\u6bd4\u8f83\u7c7b\u4f3c\u7684\u9898\uff1a[T'ill It's Over](https://www.cnblogs.com/C202202chenkelin/p/14612686.html) \u90fd\u662f\u7ebf\u6bb5\u6811\u4f18\u5316\u8fde\u8fb9\u3002\n\n\u5efa\u7acb\u4e24\u68f5\u7ebf\u6bb5\u6811\u8bb0\u4e3a $A$ \uff0c $B$ \uff0c\u7ebf\u6bb5\u6811 $A$ \u7684\u6240\u6709\u7ed3\u70b9\u5411\u4e0a\u8fde\u7ed3\u7236\u8282\u70b9\uff0c\u7ebf\u6bb5\u6811 $B$ \u7684\u6240\u6709\u8282\u70b9\u5411\u4e0b\u8fde\u7ed3\u81ea\u5df1\u7684\u5b50\u8282\u70b9\u3002\n\n\u90a3\u4e48\u64cd\u4f5c\u5c31\u53ef\u4ee5\u770b\u6210 $A$ \u6811\u5bf9\u5e94\u533a\u95f4\u8fde\u5411 $B$ \u6811\u5bf9\u5e94\u533a\u95f4\uff0c\u5c31\u8f6c\u6362\u4e3a\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u4e86\u3002\n\n\u73b0\u5728\u9700\u8981\u8003\u8651\u5982\u4f55\u5c06 $B$ \u6811\u7684\u72b6\u6001\u8f6c\u6362\u5230 $A$ \u6811\u4e0a\u3002\n\n\u53ea\u9700\u8981\u5c06 $B$ \u6811\u7684\u7ed3\u70b9\u8fde\u5411 $A$ \u7684\u5bf9\u5e94\u7ed3\u70b9\u5c31\u597d\u4e86\u3002\n\n\u7531\u4e8e\u72b6\u6001\u6700\u540e\u90fd\u4f1a\u56de\u5f52\u5230 $A$ \u6811\u4e2d\uff0c\u6240\u4ee5\u6700\u540e\u67e5\u8be2 $A$ \u6811\u4e2d\u53f6\u5b50\u7ed3\u70b9\u533a\u95f4\u4e3a $[i,i](i\\in [1,n])$ \u7684\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u7b97\u6cd5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n*log((n+q)\\log n))$ \uff0c\u5927\u6982\u5c31\u662f $O(n\\log^2n)$ \u7ea7\u522b\u7684\u3002\n# Code\n```cpp\n#include <queue>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nnamespace Quick_Function {\n\ttemplate <typename Temp> void Read(Temp &x) {\n\t\tx = 0; char ch = getchar(); bool op = 0;\n\t\twhile(ch < '0' || ch > '9') { if(ch == '-') op = 1; ch = getchar(); }\n\t\twhile(ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); }\n\t\tif(op) x = -x;\n\t}\n\ttemplate <typename T, typename... Args> void Read(T &t, Args &... args) { Read(t); Read(args...); }\n\ttemplate <typename Temp> Temp Max(Temp x, Temp y) { return x > y ? x : y; }\n\ttemplate <typename Temp> Temp Min(Temp x, Temp y) { return x < y ? x : y; }\n\ttemplate <typename Temp> Temp Abs(Temp x) { return x < 0 ? (-x) : x; }\n\ttemplate <typename Temp> void Swap(Temp &x, Temp &y) { x ^= y ^= x ^= y; }\n}\nusing namespace Quick_Function;\n#define INF 1e17\n#define int long long\nconst int MAXN = 5e5 + 5;\nconst int MAXM = 5e6 + 5;\nstruct Edge { int To, Dist, Next; };\nint head[MAXN], edgetot = 1;\nEdge edge[MAXM];\nvoid Addedge(int u, int v, int w) { edge[++edgetot].Next = head[u], edge[edgetot].To = v, edge[edgetot].Dist = w, head[u] = edgetot; }\nstruct Node {\n\tint id, dis;\n\tNode() {}\n\tNode(int I, int D) { id = I, dis = D; }\n\tfriend bool operator < (Node x, Node y) { return x.dis > y.dis; }\n};\npriority_queue<Node> que;\nint dis[MAXN];\nbool vis[MAXN];\nint n, q, s, p;\nstruct Segment_Node {\n\tint l, r, id;\n\t#define LS(x) (x << 1)\n\t#define RS(x) (x << 1 | 1)\n};\nstruct Segment_Tree {\n\tSegment_Node t[MAXN << 2][2];//0\u4e3aA\u7ebf\u6bb5\u6811\uff0c1\u4e3aB\u7ebf\u6bb5\u6811\n\tint tot;\n\tvoid Build(int pos, int l, int r, int flag) {//\u521d\u59cb\u5316\u5efa\u6811\n\t\tt[pos][flag].l = l, t[pos][flag].r = r, t[pos][flag].id = ++tot;\n\t\tif(l == r) {\n\t\t\tif(l == s && !flag) p = t[pos][flag].id;\n\t\t\tif(flag) Addedge(t[pos][1].id, t[pos][0].id, 0);//\u8fd9\u91cc\u5fd8\u5199\u8c03\u4e86\u534a\u4e2a\u5c0f\u65f6QAQ\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tBuild(LS(pos), l, mid, flag); Build(RS(pos), mid + 1, r, flag);\n\t\tif(!flag) {\n\t\t\tAddedge(t[LS(pos)][flag].id, t[pos][flag].id, 0);\n\t\t\tAddedge(t[RS(pos)][flag].id, t[pos][flag].id, 0);\n\t\t}\n\t\telse {\n\t\t\tAddedge(t[pos][flag].id, t[LS(pos)][flag].id, 0);\n\t\t\tAddedge(t[pos][flag].id, t[RS(pos)][flag].id, 0);\n\t\t\tAddedge(t[pos][1].id, t[pos][0].id, 0);\n\t\t}\n\t}\n\tint Query(int pos, int x, int flag) {//\u67e5\u8be2\u533a\u95f4\u4e3a[x,x]\u7684\u53f6\u5b50\u7ed3\u70b9\n\t\tif(t[pos][flag].l == t[pos][flag].r) return t[pos][flag].id;\n\t\tif(x <= t[LS(pos)][flag].r) return Query(LS(pos), x, flag);\n\t\telse return Query(RS(pos), x, flag);\n\t}\n\tvoid Update1(int pos, int l, int r, int x, int w) {//\u4e00\u8fde\u591a\n\t\tif(l <= t[pos][1].l && t[pos][1].r <= r) {\n\t\t\tAddedge(Query(1, x, 0), t[pos][1].id, w);\n\t\t\treturn;\n\t\t}\n\t\tif(l <= t[LS(pos)][1].r) Update1(LS(pos), l, r, x, w);\n\t\tif(r >= t[RS(pos)][1].l) Update1(RS(pos), l, r, x, w);\n\t}\n\tvoid Update2(int pos, int l, int r, int x, int w) {//\u591a\u8fde\u4e00\n\t\tif(l <= t[pos][0].l && t[pos][0].r <= r) {\n\t\t\tAddedge(t[pos][0].id, Query(1, x, 1), w);\n\t\t\treturn;\n\t\t}\n\t\tif(l <= t[LS(pos)][0].r) Update2(LS(pos), l, r, x, w);\n\t\tif(r >= t[RS(pos)][0].l) Update2(RS(pos), l, r, x, w);\n\t}\n};\nSegment_Tree tree;\nvoid Dijkstra() {//\u6700\u77ed\u8def\n\tfor(int i = 1; i <= tree.tot; i++) dis[i] = INF;\n\tque.push(Node(p, 0)); dis[p] = 0;\n\twhile(!que.empty()) {\n\t\tint u = que.top().id; que.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u] = 1;\n\t\tfor(int i = head[u]; i; i = edge[i].Next) {\n\t\t\tint v = edge[i].To;\n\t\t\tif(dis[v] > dis[u] + edge[i].Dist) {\n\t\t\t\tdis[v] = dis[u] + edge[i].Dist;\n\t\t\t\tque.push(Node(v, dis[v]));\n\t\t\t}\n\t\t}\n\t}\n}\nsigned main() {\n\tRead(n, q, s);\n\ttree.Build(1, 1, n, 0); tree.Build(1, 1, n, 1);\n\tfor(int i = 1, opt, u, v, l, r, w; i <= q; i++) {\n\t\tRead(opt, u);\n\t\tif(opt == 1) {\n\t\t\tRead(v, w);\n\t\t\ttree.Update1(1, v, v, u, w);\n\t\t}\n\t\telse if(opt == 2) {\n\t\t\tRead(l, r, w);\n\t\t\ttree.Update1(1, l, r, u, w);\n\t\t}\n\t\telse {\n\t\t\tRead(l, r, w);\n\t\t\ttree.Update2(1, l, r, u, w);\n\t\t}\n\t}\n\tDijkstra();\n\tfor(int i = 1; i <= n; i++) printf(\"%lld \", dis[tree.Query(1, i, 0)] == INF? -1 : dis[tree.Query(1, i, 0)]);\n\treturn 0;\n}\n```",
        "postTime": 1621058103,
        "uid": 254733,
        "name": "Night_Bringer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF786B Legacy"
    }
]