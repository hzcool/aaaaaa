[
    {
        "content": "\u8bf4\u5b9e\u8bdd\uff0c\u8fd9\u9053\u9898\u771f\u7684\u662f\u4e00\u9053\u5341\u5206\u795e\u4ed9\u7684\u9898\u3002\n\n\u770b\u89c1\u8fd9\u9053\u9898\u6700\u76f4\u89c2\u7684\u611f\u53d7\u5c31\u662f\uff0c\u6211\u4eec\u8bd5\u56fe\u8ba9\u540c\u4e00\u6df1\u5ea6\u7684\u8282\u70b9\u90fd\u80fd\u591f\u586b\u4e0a\u76f8\u540c\u7684\u5b57\u7b26\u3002\n\n\u6700\u4f18\u60c5\u51b5\u662f $x$ \u6070\u597d\u53ef\u4ee5\u88ab\u67d0\u4e9b\u6df1\u5ea6\u7684\u70b9\u7684\u4e2a\u6570\u74dc\u5206\u5b8c\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b54\u6848\u7684\u4e0b\u754c\u5c31\u662f\u8282\u70b9\u7684\u6700\u5927\u6df1\u5ea6\u3002\n\n\u65e2\u7136\u5df2\u7ecf\u77e5\u9053\u4e0b\u754c\uff0c\u6211\u4eec\u4e0d\u59a8\u6765\u5206\u6790\u4e00\u4e0b\u4e0a\u754c\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u79cd\u6784\u9020\u65b9\u6848\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5c42\uff0c\u6211\u4eec\u7528 $a$ \u6216 $b$ \u5148\u586b\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u6211\u4eec\u4e0d\u59a8\u8bbe\u8be5\u5c42\u975e\u53f6\u5b50\u6709 $l$ \u4e2a\uff0c\u603b\u5171\u8fd8\u6ca1\u6709\u88ab\u586b\u5165\u5b57\u7b26\u7684\u70b9\u6709 $m$ \u4e2a\uff0c\u7531\u4e8e\u975e\u53f6\u5b50\u8282\u70b9\u81f3\u5c11\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u6240\u4ee5\u5219\u6709 $l \\le \\frac{m}{2}$\u3002\u6211\u4eec\u8bbe\u8fd8\u6709 $x$ \u4e2a $a$ \u53ef\u4ee5\u586b\uff0c\u5219\u5fc5\u7136\u6709 $l \\le \\max(x , m - x)$ \uff0c\u6240\u4ee5\u8be5\u5c42\u7684\u975e\u53f6\u5b50\u8282\u70b9\u4e00\u5b9a\u80fd\u88ab\u586b\u4e0a $a$ \u6216 $b$ \u4e2d\u7684\u4e00\u4e2a\u7684\u76f8\u540c\u5b57\u7b26\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u586b\u8be5\u5c42\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u5982\u679c\u7528\u586b\u8be5\u5c42\u975e\u53f6\u5b50\u8282\u70b9\u7684\u5b57\u7b26\u628a\u4ed6\u4eec\u586b\u5b8c\u4e86\uff0c\u90a3\u4e5f\u4e0d\u9519\u3002\u5982\u679c\u6ca1\u6709\u586b\u5b8c\uff0c\u5c31\u610f\u5473\u7740\u6709\u4e00\u79cd\u5b57\u7b26\u88ab\u586b\u5b8c\u4e86\uff0c\u6211\u4eec\u7528\u53e6\u4e00\u79cd\u5b57\u7b26\u586b\u5269\u4e0b\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u540c\u65f6\u4e4b\u540e\u7684\u6bcf\u4e00\u5c42\u6211\u4eec\u90fd\u53ef\u4ee5\u7528\u53e6\u4e00\u79cd\u5b57\u7b26\u586b\u5b8c\u3002\u7531\u4e8e\u6211\u4eec\u8be5\u5c42\u4e0e\u975e\u53f6\u5b50\u8282\u70b9\u5b57\u7b26\u4e0d\u540c\u7684\u90fd\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u7684\u7b54\u6848\u6070\u597d\u4e3a\u6700\u5927\u6df1\u5ea6\u52a0\u4e0a $1$ \u3002\n\n\u6211\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u9053\u9898\u6700\u5927\u7684\u96be\u70b9\u53ef\u80fd\u5c31\u662f\u8fd0\u7528\u8d2a\u5fc3\u6784\u9020\u7684\u65b9\u5f0f\u8ba1\u7b97\u51fa\u4e00\u4e2a\u4f18\u79c0\u7684\u7b54\u6848\u4e0a\u754c\u3002\n\n\u73b0\u5728\u6211\u4eec\u7684\u95ee\u9898\u5c31\u53ea\u6709\u5982\u4f55\u5224\u65ad\u7b54\u6848\u662f\u5426\u662f\u6700\u5927\u6df1\u5ea6\u3002\n\n\u7531\u4e4b\u524d\u7684\u5206\u6790\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a $n^2$ \u7684\u80cc\u5305 $dp$ \u3002\n\n\u63a5\u4e0b\u6765\u5c31\u672c\u9898\u7b2c\u4e8c\u5927\u96be\u70b9\uff08\u4e5f\u53ef\u80fd\u53ea\u662f\u4e00\u4e2a\u6211\u7b2c\u4e00\u6b21\u89c1\u7684\u5e38\u89c1\u6280\u5de7\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u6bcf\u5c42\u7684\u8282\u70b9\u4e2a\u6570\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u8fd9\u5c31\u88ab\u8f6c\u5316\u6210\u4e3a\u4e00\u4e2a\u591a\u91cd\u80cc\u5305\u95ee\u9898\u3002\n\n\u5f88\u663e\u7136\uff0c\u5728\u6700\u52a3\u60c5\u51b5\u4e0b\uff0c\u6bcf\u5c42\u7684\u8282\u70b9\u4e2a\u6570\u4e3a\uff1a $1,2,3 \\dots x$ \u3002\u7531\u4e8e\u6211\u4eec\u4e00\u5171\u53ea\u6709 $n$ \u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u4e0d\u540c\u7684\u8282\u70b9\u4e2a\u6570\u6700\u591a\u53ea\u6709 $\\sqrt n$ \u4e2a\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u6ca1\u6709\u4ec0\u4e48\u597d\u8bf4\u7684\u3002\n\n```cpp\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\ntemplate <typename T>\nvoid read(T &x) {\n\tT f=1;x=0;char s=getchar();\n\twhile(s<'0'||s>'9') {if(s=='-') f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9') {x=(x<<3)+(x<<1)+(s^'0');s=getchar();}\n\tx *= f;\n}\n\ntemplate <typename T>\nvoid write(T x , char s='\\n') {\n\tif(x<0) {putchar('-');x=-x;}\n\tif(!x) {putchar('0');putchar(s);return;}\n\tint tmp[22]={},t=0;\n\twhile(x) tmp[t++]=x%10,x/=10;\n\twhile(t-->0) putchar(tmp[t]+'0');\n\tputchar(s);\n}\n\nconst int MAXN = 1e5 + 5;\n\nint head[MAXN] , to[MAXN << 1] , nxt[MAXN << 1] , ecnt;\nvoid add(int u , int v) {nxt[++ecnt] = head[u];head[u] = ecnt;to[ecnt] = v;} \n\nint n , x , dep[MAXN] , cnt , deg[MAXN] , c[500] , val[500] , us[500] , bl[MAXN];\npair <int , int> siz[MAXN];\nint md;\nchar ans[MAXN];\nvector <int> nod[MAXN];\nbool cmp(int x , int y) {return deg[x] > deg[y];}\n\nvoid pre(int x , int fa) {\n\tdep[x] = dep[fa] + 1;\n\tnod[dep[x]].push_back(x);\n\tmd = max(md , dep[x]);\n\tsiz[dep[x]].first ++;\n\tsiz[dep[x]].second = dep[x];\n\tfor (int i = head[x]; i; i = nxt[i]) {\n\t\tint v = to[i];\n\t\tif(v == fa) continue;\n\t\tpre(v , x);\n\t}\n}\n\nint f[480][MAXN];\n\nint main() {\n\tread(n),read(x);\n\tfor (int i = 2; i <= n; ++i) {\n\t\tint p;read(p);\n\t\tadd(p , i);\n\t\tdeg[p] ++ , deg[i] ++;\n\t}\n\tpre(1 , 0);\n\tsort(siz + 1 , siz + 1 + md);\n\tfor (int i = 1; i <= md; ++i) {\n\t\tif(siz[i].first != siz[i - 1].first) c[++cnt] = 1 , val[cnt] = siz[i].first;\n\t\telse c[cnt] ++;\n\t\tbl[siz[i].second] = cnt;\n\t}\n\tfor (int i = 1; i <= n; ++i) f[1][i] = -1;\n\tfor (int j = 1; j <= c[1]; ++j) f[1][j * val[1]] = 0; \n\tfor (int i = 2; i <= cnt; ++i) {\n\t\tf[i][0] = 0;\n\t\tfor (int j = 1; j <= n; ++j) {\n\t\t\tif(f[(i - 1)][j] != -1) f[i][j] = j;\n\t\t\telse if(j >= val[i] && f[i][j - val[i]] != -1 && (j - f[i][j - val[i]]) / val[i] <= c[i]) f[i][j] = f[i][j - val[i]];\n\t\t\telse f[i][j] = -1;\n\t\t}\n\t}\n\tif(f[cnt][x] != -1) {\n\t\tprintf(\"%d\\n\" , md);\n\t\tint now = x;\n\t\tfor (int i = cnt; i >= 1; --i) {\n\t\t\tus[i] = (now - f[i][now]) / val[i];\n\t\t\tnow = f[i][now];\n\t\t}\n\t\tfor (int i = 1; i <= md; ++i) {\n\t\t\tchar cur;\n\t\t\tif(us[bl[i]]) cur = 'a' , us[bl[i]] --;\n\t\t\telse cur = 'b';\n\t\t\tfor (int j = 0; j < (int)nod[i].size(); ++j) {\n\t\t\t\tans[nod[i][j]] = cur;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= n; ++i) putchar(ans[i]);\n\t}\n\telse {\n\t\tprintf(\"%d\\n\" , md + 1);\n\t\tint y = n - x;\n\t\tchar cx = 'a' , cy = 'b';\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tsort(nod[i].begin() , nod[i].end() , cmp);\n\t\t\tif(x < y) swap(x , y) , swap(cx , cy);\n\t\t\tfor (int j = 0; j < (int)nod[i].size(); ++j) {\n\t\t\t\tif(nod[i][j]) ans[nod[i][j]] = cx , x --;\n\t\t\t\tif(!x) swap(x , y) , swap(cx , cy);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= n; ++i) putchar(ans[i]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1614246159,
        "uid": 171554,
        "name": "Reanap",
        "ccfLevel": 9,
        "title": "AB Tree"
    },
    {
        "content": "\u7406\u4e00\u4e0b\u903b\u8f91\uff0c\u4e3b\u8981\u8bb2\u4e00\u4e0b\u6211\u505a\u9898\u65f6\u7684\u7591\u60d1\u548c\u5176\u5b83\u9898\u89e3\u6ca1\u63d0\u5230\u7684\u7ec6\u8282\u3002\n\n\u9996\u5148\u5bb9\u6613\u770b\u5230\uff0c\u4e00\u4e2a\u5fc5\u7136\u4e0d\u52a3\u7684\u8d2a\u5fc3\u7b56\u7565\u662f\u628a\u5c3d\u91cf\u9760\u8fd1\u6839\u7684\u5c42\u94fa\u6210\u540c\u6837\u7684\u5b57\u7b26\u3002\u4e5f\u8bb8\u4f1a\u6709\u7591\u60d1\uff0c\u5b57\u7b26\u4e32\u662f\u5426\u672c\u8d28\u4e0d\u540c\u7684\u5224\u5b9a\u6bcf\u4e2a\u4f4d\u7f6e\u5730\u4f4d\u76f8\u7b49\u3002\u7136\u800c\u5728\u8fd9\u9898\u91cc\u9762\u5b57\u7b26\u4e32\u4e2a\u6570\u7684\u8d21\u732e\u662f\u548c\u7ed3\u70b9\u6240\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u6709\u5173\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8d2a\u5fc3\u4e0d\u52a3\u3002\n\n\u8bbe\u6811\u7684\u6700\u5927\u6df1\u5ea6\u4e3a $d$\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u80fd\u5b9e\u73b0\u6bcf\u5c42\u90fd\u94fa\u6210\u540c\u6837\u7684\u5b57\u7b26\uff0c\u7b54\u6848\u5c31\u662f\u4e0d\u540c\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f $d$\u3002\n\n\u8003\u8651\u6784\u9020\u51fa\u7b54\u6848\u4e3a $d+1$ \u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u8d2a\u5fc3\u5c31\u8dd1\u4e0d\u51fa\u6765\u4e86\uff0c\u5177\u4f53\u60c5\u51b5\u662f\uff0c\u4f1a\u51fa\u73b0\u4e00\u5c42\u65e2\u6709 `a` \u53c8\u6709 `b`\uff0c\u5176\u4ed6\u5c42\u90fd\u662f pure `a` \u6216 pure `b`\u3002\n\n\u4e3b\u8981\u95ee\u9898\u5c31\u5728\u4e8e miscellaneous level \u653e\u5728\u54ea\u91cc\uff0c\u624d\u80fd\u8ba9\u7b54\u6848\u6700\u5c0f\u3002\u76f4\u89c9\u5730\uff0c\u6211\u4eec\u8ba4\u4e3a\u628a\u5b83\u653e\u5728\u5c3d\u91cf\u4f4e\uff08\u79bb\u6839\u66f4\u8fdc\uff09\u7684 level \u4f1a\u66f4\u4f18\u3002\u4f46\u662f\u5176\u5b9e\u8d21\u732e\u7ed3\u675f\u7684\u5730\u65b9\u662f\u53f6\u5b50\uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u5e94\u8be5\u628a\u5b83\u653e\u5728\u53f6\u5b50\u5c3d\u91cf\u591a\u7684 level\u3002\u8fd9\u4e2a\u65f6\u5019\u7b54\u6848\u4e3a $d+1$\u3002\n\n\u6839\u636e\u4ee5\u4e0a\u7684\u63a8\u7406\uff0c\u6211\u4eec\u5f97\u51fa\u4e00\u4e2a\u8bba\u65ad\uff1a\u6700\u4f18\u7b54\u6848\u5728 $d$ \u548c $d+1$ \u51fa\u73b0\u3002\u5269\u4e0b\u7684\u95ee\u9898\u5c31\u662f\u5982\u679c\u5224\u65ad\u662f\u524d\u8005\u8fd8\u662f\u540e\u8005\u3002\n\n\u5176\u5b9e\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u53ef\u8fbe\u6027 dp \u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5c06\u6bcf\u4e00\u4e2a level \u538b\u6210\u4e00\u4e2a item\uff0c\u5176\u4f53\u79ef\u4e3a\u5f53\u5c42\u7684\u7ed3\u70b9\u4e2a\u6570\u3002\u4f46\u662f\u8fd9\u4e2a\u662f $O(n^2)$ \u7684\uff0c\u8981\u8003\u8651\u4f18\u5316\u3002\u6709\u4e24\u79cd\u89e3\u51b3\u7684\u9053\u8def\uff0c\u5206\u6790\u540e\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u6839\u53f7\u89c4\u6a21\u7684\u7ed3\u8bba\uff0c\u6216\u8005\u7528 `std::bitset` \u4f18\u5316 dp\u3002\n\n\u6ce8\u610f `std::bitset` \u4f18\u5316 dp \u540e\u72b6\u6001\u7565\u6709\u4e0d\u540c\u2026\u2026\n\n```cpp\n#include<bits/stdc++.h>\n#define cmin(x, y) x = std::min(x, y)\n#define cmax(x, y) x = std::max(x, y)\n#define fors(i, l, r, ...) for(int i = (l), REP##i = (r), ##__VA_ARGS__; i <= REP##i; ++i)\n#define dfors(i, r, l, ...) for(int i = (r), REP##i = (l), ##__VA_ARGS__; i >= REP##i; --i)\n// observation: amount different answers would be 2: maximum depth, or, it plus 1\nint n, _x, dep[100100], nod[100100], leaf[100100], len, vol[100100];\n// params: @nod[i]: amout of nodes at level i; @leaf[i]: amout of leaves at lv i;\n//     #vol[i]: volume of i-th item\nstd::bitset<100100> f[2100]; // if can assign it to j perfectly within lefmost i items\nstd::vector<int> adj[100100], zip[100100];\nvoid pre_dfs(const int x) {\n    nod[dep[x]]++,leaf[dep[x]] += adj[x].empty();\n    for(const int y : adj[x]) dep[y] = dep[x]+1,pre_dfs(y);\n}\nint pre_zip() {\n    static int vis[100100], tot;\n    fors(i, 1, len) {\n        if(!vis[nod[i]]) vol[vis[nod[i]] = ++tot] = nod[i];\n        zip[vis[nod[i]]].emplace_back(i);\n    }\n    return tot; // amount of items\n}\nsigned main() {\n    std::ios_base::sync_with_stdio(0);\n    std::cin.tie(0);\n    std::cin >> n >> _x;\n    fors(i, 1, n-1, f) std::cin >> f,adj[f].emplace_back(i+1);\n    pre_dfs(dep[1] = 1),len = *std::max_element(dep+1, dep+n+1); // processing basic information\n    int m = pre_zip(); // compressing levels with same amout of nodes\n    fors(i, f[0][0] = 1, m, tmp) {\n        f[i] = f[i-1],tmp = zip[i].size();\n        for(int j = 1; j <= tmp; j *= 2) tmp -= j,f[i] |= (f[i]<<(vol[i]*j));\n        if(tmp > 0) f[i] |= (f[i]<<(vol[i]*tmp));\n    }\n    std::vector<bool> k(len);\n    std::function<void(int, int)> find_path = [&](const int rem, int t) { // reviving way we DP through\n        if(rem == 0) return;\n        for(const int x : zip[rem]) {\n            if(vol[rem] > t || f[rem-1][t]) break;\n            t -= vol[rem],k[x-1] = 1;\n        }\n        find_path(rem-1, t);\n    };\n    if(f[m][_x]) { // when greedy strategy runs well\n        std::cout << len << \"\\n\";\n        find_path(m, _x);\n        fors(i, 1, n) std::cout << (k[dep[i]-1]?'a':'b');\n        return std::cout << \"\\n\", 0;\n    }\n    std::cout << len+1 << \"\\n\"; // otherwise the answer would be maximum depth plus 1\n    int tmp = std::numeric_limits<int>::max(), tmp1 = -1;\n    dfors(i, _x, 0) if(f[m][i]) {\n        tmp = i; break;\n    }\n    find_path(m, tmp);\n    fors(i, 1, len) if(!k[i-1] && leaf[i] >= _x-tmp) {\n        tmp1 = i; break;\n    }\n    fors(i, 1, n) {\n        if(dep[i] == tmp1 && adj[i].empty()) std::cout << (tmp == _x?'b':(++tmp, 'a'));\n        else std::cout << (k[dep[i]-1]?'a':'b');\n    }\n    return std::cout << \"\\n\", 0;\n}\n```",
        "postTime": 1643983981,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "AB Tree\uff0c\u633a\u884c\u554a"
    },
    {
        "content": "\u600e\u4e48\u53c8\u662f DP\uff1f\u8fd9\u4e2a\u5b98\u65b9\u9898\u89e3\u5f88\u591a\u4e0d\u4e25\u8c28\u7684\u5730\u65b9\uff0c\u6211\u4f1a\u4e00\u4e00\u7ea0\u6b63\u3002\n\n\u8fd9\u4e2a\u9898\u662f\u771f\u7684\u6bd2\u7624\u3002\n\n![](http://image.qingtengbc.com/2021/02/08/90d1e0ae166d0.png)\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u7b54\u6848\u7684\u6700\u5c0f\u503c\u3002\u82e5\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a $1$\uff0c\u6df1\u5ea6\u6700\u5927\u7684\u8282\u70b9\u4e3a $dm$\uff0c\u6df1\u5ea6\u4e3a $dmax$\u3002\u90a3\u4e48\u7b54\u6848\u6700\u5c0f\u4e3a $dmax$\u3002\u56e0\u4e3a\u5bf9\u4e8e $1->dm$ \u7684\u8def\u5f84\u4e0a\u5c31\u4f1a\u6709 $dmax$ \u4e2a\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002\u53ea\u8981\u6211\u4eec\u4fdd\u8bc1\u6240\u6709\u6df1\u5ea6\u76f8\u540c\u7684\u8282\u70b9\u5b57\u7b26\u90fd\u4e00\u6837\uff0c\u5c31\u53ef\u4ee5\u8fbe\u5230\u7b54\u6848\u7684\u6700\u5c0f\u503c $dmax$\u3002\n\n\u4f46\u662f\u6211\u4eec\u8fd8\u9700\u8981\u6ee1\u8db3 \u5b57\u7b26 `a` \u7684\u4e2a\u6570\u9650\u5236\u3002\u6211\u4eec\u4ee4\u5176\u6709 $a$ \u4e2a\u3002\u663e\u7136\u6211\u4eec\u8981\u505a\u4e00\u4e2a\u80cc\u5305\uff0c\u6765\u786e\u5b9a\u662f\u5426\u53ef\u4ee5\u505a\u5230\u5728\u540c\u4e00\u6df1\u5ea6\u7684\u70b9\u67d3\u6210\u4e00\u4e2a\u5b57\u7b26\u3002\u65f6\u590d\u6742\u5ea6\u4e3a $O(n^2)$\u3002\u663e\u7136\uff0c\u6211\u4eec\u9700\u8981\u4f18\u5316\u3002\n\n\u6211\u4eec\u4ee4\u6df1\u5ea6\u4e3a $i$ \u7684\u70b9\u6709 $sz_i$ \u4e2a\u3002\u6211\u4eec\u53ef\u4ee5\u628a $sz_i$ \u76f8\u540c\u7684\u6df1\u5ea6\u5408\u5e76\u5230\u4e00\u8d77\uff0c\u505a\u591a\u91cd\u80cc\u5305\u3002\u90a3\u4e48\u6700\u591a\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684 $sz_i$ \u5462\uff1f\u5b98\u65b9\u9898\u89e3\u7ed9\u51fa\u7684\u6570\u91cf\u662f $O(\\sqrt{n})$\u3002\u5f88\u5bb9\u6613\u4e3e\u51fa\u8fd4\u5229\uff1a$23=1+2+3+4+5+6+2$\u3002\u90a3\u4e48\u771f\u6b63\u7684\u6570\u91cf\u4e3a\u591a\u5c11\u5462\uff1f\u6211\u4eec\u8bbe\u6570\u91cf\u4e3a $x$\u3002\u4e3a\u4e86\u4f7f\u5f97 $x$ \u6700\u5927\uff0c\u4e0d\u540c\u7684 $x$ \u4e2a\u6570\u4e00\u5b9a\u662f $1,2,3,\\cdots ,x$\u3002\u89e3\u4e0d\u7b49\u5f0f\u7ec4\uff1a\n\n$$\\begin{cases}\nx\\geq 0\\\\\n\\frac{(x+1)\\cdot x}{2}\\leq n\n\\end{cases}$$\n\n\u89e3\u96c6\u4e3a $0\\leq x\\leq \\frac{-1+\\sqrt{8n+1}}{2}$\u3002\u6211\u4eec\u53ef\u4ee5\u7c97\u7565\u5730\u8ba4\u4e3a $0\\leq x\\leq \\sqrt{2n}$\u3002\u6240\u4ee5 $x$ \u6700\u5927\u4e3a $\\sqrt{2n}$\u3002\n\n\u6211\u4eec\u8a00\u5f52\u6b63\u4f20\uff0c\u5982\u4f55 DP \u5462\uff1f\u7528\u4e8c\u8fdb\u5236\u4f18\u5316\u80af\u5b9a\u8d85\u65f6\u4e86\u3002\u5355\u8c03\u961f\u5217\u4f18\u5316\u5e94\u8be5\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u4e0d\u5229\u4e8e\u6211\u4eec\u540e\u9762\u6784\u9020\u65b9\u6848\u3002\u6211\u4eec\u53ea\u80fd\u91c7\u53d6\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002\n\n### \u57fa\u7840\u591a\u91cd\u80cc\u5305\n\n\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u6700\u57fa\u7840\u7684\u505a\u6cd5\u3002\n\n#### \u5b9a\u72b6\u6001\n\n\u5148\u89e3\u51b3\u4e00\u4e9b\u57fa\u672c\u7684\u5b9a\u4e49\uff0c\u5b9a\u4e49\u7b2c $i$ \u4e2a\u7269\u54c1\u6700\u591a\u53ef\u9009 $tot_i$ \u4e2a\uff0c\u6240\u5360\u7a7a\u95f4\u4e3a $val_i$\u3002\u5171\u6709 $m$ \u4e2a\u7269\u54c1\u3002\n\n\u4ee4 $f_{i,j}$ \u8868\u793a\u8003\u8651\u5230\u524d $i$ \u4e2a\u7269\u54c1\uff0c\u662f\u5426\u5b58\u5728\u603b\u4f53\u79ef\u4e3a $j$ \u7684\u65b9\u6848\u3002\n\n#### \u8f6c\u79fb\u65b9\u7a0b\n\n\u82e5\u5b58\u5728 $k$\uff0c\u6ee1\u8db3 $0\\leq k\\cdot val_i\\leq j$\uff0c\u4e14 $f_{i-1,j-k\\cdot val_i}=\\operatorname{true}$\uff0c\u5219 $f_{i,j}=\\operatorname{true}$\u3002\n\n\u5426\u5219 $f_{i,j}=\\operatorname{false}$\u3002\n\n#### \u8fb9\u754c&&\u521d\u503c\n\n$f_{0,0}=\\operatorname{true}$\u3002\n\n\u5f88\u663e\u7136\u8fd9\u4e2a\u80cc\u5305\u80af\u5b9a\u8d85\u65f6\uff0c\u600e\u4e48\u4f18\u5316\u5462\uff1f\u6211\u4eec\u53d1\u73b0\u8fd9\u91cc\u548c\u666e\u901a\u88ab\u767d\u54e6\u4e0d\u540c\u7684\u662f\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u662f\u5426\u5b58\u5728\u8fd9\u79cd\u65b9\u6848\uff0c\u800c\u4e0d\u9700\u8981\u6c42\u51fa\u4e00\u4e2a\u6700\u5927\u503c\u3002\u8fd9\u5c31\u662f\u7a81\u7834\u53e3\u3002\n\n### \u4f18\u5316\u540e\u7684\u80cc\u5305\u7b97\u6cd5\n\n\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 $k_{i,j}$\uff0c\u8868\u793a\u5bf9\u4e8e $f_{i,j}$\uff0c\u6700\u5c0f\u7684\u6ee1\u8db3\u6761\u4ef6\u7684 $k$\u3002\uff08$k$ \u7684\u5b9a\u4e49\u540c\u4e0a\u3002\uff09\n\n\u5f88\u663e\u7136\uff0c$k_{i,j}$ \u4e5f\u9700\u8981\u8f6c\u79fb\uff0c\u8f6c\u79fb\u65b9\u7a0b\u5f88\u7b80\u5355\uff1a\n\n$$k_{i,j}=\\begin{cases}\n0&&k_{i-1,j}=\\operatorname{true}\\\\\nk_{i,j-val_i}&&j\\geq val_i\\\\\n-inf&&\\operatorname{otherwise}\n\\end{cases}$$\n\n\u90a3\u4e48\u5bf9\u5e94\u7684 $f_{i,j}$ \u7684\u8f6c\u79fb\u5c31\u7b80\u5355\u4e86\u5f88\u591a\uff0c\u6211\u4eec\u4e0d\u7528\u5728\u989d\u5916\u679a\u4e3e $k$ \u4e86\u3002\n\n\u5982\u679c\u6700\u540e $f_{m,a}=\\operatorname{ture}$\uff0c\u5c31\u8bf4\u660e\u6211\u4eec\u53ef\u4ee5\u505a\u5230\u7b54\u6848\u4e3a $dmax$\u3002\u5229\u7528 $k$ \u6570\u7ec4\uff0c\u5012\u5e8f\u6784\u9020\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u6211\u4eec\u8003\u8651\u5269\u4e0b\u7684\u60c5\u51b5\u3002\u4ec0\u4e48\u65f6\u5019\u7b54\u6848\u4e3a $dmax+1$ \u5462\u3002\u6211\u4eec\u53ef\u4ee5\u60f3\u8c61\u3002\u5982\u679c\u5bf9\u4e8e\u4e24\u4e2a\u6df1\u5ea6\u76f8\u540c\u7684\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u4ed6\u4eec\u4e24\u4e2a\u67d3\u4e0a\u4e86\u76f8\u540c\u7684\u5b57\u7b26\uff0c\u4f46\u662f\u4ed6\u4eec\u4ed8\u6e05\u7684\u524d\u7f00\u4e0d\u540c\uff0c\u8fd9\u4e24\u4e2a\u4e32\u4e00\u5b9a\u4e5f\u4e0d\u540c\uff0c\u800c\u4e14\u8fd9\u4e2a\u4e0d\u540c\u4f1a\u4f20\u5bfc\u5230\u4ed6\u4eec\u7684\u5b50\u5b59\u8282\u70b9\u4e0a\u3002\u56e0\u6b64\u4e3a\u4e86\u505a\u5230\u7b54\u6848\u4e3a $dmax+1$\uff0c\u53ea\u80fd\u5728\u53f6\u5b50\u8282\u70b9\u5904\u6709\u4e0d\u540c\u7684\u5b57\u7b26\u3002\n\n\u6211\u4eec\u8003\u8651\u8d2a\u5fc3\u3002\u6211\u4eec\u4ece\u6df1\u5ea6\u4e3a $1$ \u7684\u8282\u70b9\u4e00\u76f4\u8003\u8651\u5230\u6df1\u5ea6\u4e3a $dmax$ \u7684\u70b9\u3002\u8bbe\u73b0\u5728\u8fd8\u6709 $m$ \u5272\u70b9\u672a\u88ab\u67d3\u8272\uff0c\u6709 $y$ \u4e2a `a` \u53ef\u7528\uff0c$sz_i\\leq \\max(y,m-y)$\uff0c\u90a3\u4e48\u5c31\u7528\u4e00\u4e2a\u5b57\u7b26\u8986\u76d6\u8fd9\u4e00\u5c42\u3002\n\n\u6211\u4eec\u8003\u8651\u662f\u5426\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u505a\u5230\u7b54\u6848\u4e3a $dmax+1$\u3002\u82e5\u8fd9\u4e00\u5c42\u90fd\u662f\u975e\u53f6\u8282\u70b9\uff0c\u6211\u4eec\u77e5\u9053\u6240\u6709\u975e\u53f6\u8282\u70b9\u90fd\u6709\u81f3\u5c11\u4e00\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684\u6570\u91cf\u5fc5\u7136\u5c0f\u4e8e\u7b49\u4e8e $\\frac{m}{2}$\uff0c\u4e14 $\\frac{m}{2}\\leq \\max(y,m-y)$\u3002\u56e0\u6b64\u6c38\u8fdc\u53ef\u4ee5\u505a\u5230\u7b54\u6848\u4e3a $dmax+1$\u3002\u6211\u4eec\u53ea\u9700\u8981\u6309\u4e0a\u9762\u7684\u6b65\u9aa4\u8d2a\u5fc3\u8ba1\u7b97\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u4e00\u4e9b\u6076\u5fc3\u4eba\u7684\u5730\u65b9\u4e86\uff0c\u6b63\u5982\u4f60\u4eec\u6240\u89c1\uff0c\u6211\u4e00\u5f00\u88ab\u75af\u72c2\u5361\u7a7a\u95f4\uff0c\u539f\u56e0\u662f\u6211\u5f00\u7684 $f,k$ \u6570\u7ec4\u90fd\u5f00\u4e86 $500*100000$\u3002\u540e\u6765\u6211\u60f3\u5230\u4e00\u4e2a\u7edd\u5999\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\u3002\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53ea\u5f00 $500*100000$ \u7684\u7a7a\u95f4\u3002\u6211\u4eec\u60f3\uff0c\u5230\u5e95 $a$ \u4ee3\u8868 `a` \u7684\u6570\u91cf\u8fd8\u662f `b` \u7684\u719f\u7ec3\u5e72\u5176\u5b9e\u4e0d\u91cd\u8981\uff0c\u6240\u4ee5\u5982\u679c $a>\\frac{n}{2}$\uff0c\u5c31\u8ba9 $a=n-a$\uff0c\u53ea\u662f\u6807\u8bb0\u4e00\u4e0b\uff0c\u6700\u540e\u6362\u56de\u6765\u5373\u53ef\u3002\n\n\u4ee3\u7801\u633a\u957f\uff0c\u4e0b\u6807\u7279\u522b\u4e71\u3002\n\n```cpp\n//Don't act like a loser.\n//This code is written by huayucaiji\n//You can only use the code for studying or finding mistakes\n//Or,you'll be punished by Sakyamuni!!!\n#include<bits/stdc++.h>\nusing namespace std;\n\nint read() {\n\tchar ch=getchar();\n\tint f=1,x=0;\n\twhile(ch<'0'||ch>'9') {\n\t\tif(ch=='-')\n\t\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn f*x;\n}\n\nconst int MAXN=1e5+10,inf=1e9;\n\nint n,cnt,m,a,dmax,b;\nint h[MAXN],sz[MAXN],k[500][MAXN>>1],f[500][MAXN>>1],tot[500],d[500],index[MAXN],size[MAXN];\nset<int> s; \nchar ans[MAXN];\nvector<int> dep[MAXN],vec[MAXN];\nbool rev;\n\nstruct edge {\n\tint v,nxt;\n}e[MAXN<<1];\n\nvoid addedge(int u,int v) {\n\te[++cnt].v=v;\n\te[cnt].nxt=h[u];\n\th[u]=cnt;\n}\nvoid insert(int u,int v) {\n\taddedge(u,v);\n\taddedge(v,u);\n}\n\nvoid dfs(int u,int fa,int d) {\n\tdmax=max(d,dmax);\n\tdep[d].push_back(u);\n\tsize[u]=1;\n\tfor(int i=h[u];i;i=e[i].nxt) {\n\t\tint v=e[i].v;\n\t\t\n\t\tif(v!=fa) {\n\t\t\tdfs(v,u,d+1);\n\t\t\tsize[u]+=size[v];\n\t\t\t//\u5b50\u6811\u5927\u5c0f\n\t\t}\n\t}\n}\n\nbool cmp(int x,int y) {\n\treturn size[x]<size[y];\n}\n\nsigned main() {\n\tcin>>n>>a;\n\tb=n-a;\n\tif(a>b) {\n\t\tswap(a,b);\n\t\trev=1;\n\t}\n\tfor(int i=2;i<=n;i++) {\n\t\tinsert(i,read());\n\t}\n\tdfs(1,0,1);\n\tfor(int i=1;i<=n;i++) {\n\t\tsz[i]=dep[i].size();\n\t\t//\u6df1\u5ea6\u4e3a i \u7684\u6df1\u5ea6\u96c6\u5408 \n\t\tif(!sz[i]) {\n\t\t\tcontinue;\n\t\t}\n\t\tsort(dep[i].begin(),dep[i].end(),cmp);\n\t\tvec[sz[i]].push_back(i);\n\t\t//\u5927\u5c0f\u4e3a sz_i \u7684\u6df1\u5ea6\u96c6\u5408 \n\t\tif(s.find(sz[i])==s.end()) {\n\t\t\td[++m]=sz[i];\n\t\t\tindex[sz[i]]=m;\n\t\t\ttot[m]++;\n\t\t\ts.insert(sz[i]);\n\t\t} \n\t\telse {\n\t\t\ttot[index[sz[i]]]++;\n\t\t}\n\t}\n\t\n\tf[0][0]=1;\n\tfor(int i=1;i<=m;i++) {\n\t\tfill(k[i],k[i]+n+1,-inf);\n\t\tfor(int j=0;j<=a;j++) {\n\t\t\tif(f[i-1][j]) {\n\t\t\t\tf[i][j]=1;\n\t\t\t\tk[i][j]=0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(j>=d[i])\n\t\t\t\t\tk[i][j]=k[i][j-d[i]]+1;\n\t\t\t\tif(k[i][j]>=0&&j>=k[i][j]*d[i]&&k[i][j]<=tot[i]) {\n\t\t\t\t\tf[i][j]=f[i-1][j-k[i][j]*d[i]];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tf[i][j]=0;\n\t\t\t\t\tk[i][j]=-inf;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(f[m][a]) {\n\t\tprintf(\"%d\\n\",dmax);\n\t\tfor(int i=m;i;i--) {\n\t\t\tfor(int j=0;j<k[i][a];j++) {\n\t\t\t\tfor(int l=sz[vec[d[i]][j]]-1;l>=0;l--) {\n\t\t\t\t\tans[dep[vec[d[i]][j]][l]]='a';\n\t\t\t\t}\n\t\t\t}\n\t\t\ta-=d[i]*k[i][a];\n\t\t}\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tif(ans[i]!='a') {\n\t\t\t\tans[i]='b';\n\t\t\t}\n\t\t}\n\t\tif(!rev)\n\t\t\tprintf(\"%s\\n\",ans+1);\n\t\telse {\n\t\t\tfor(int i=1;i<=n;i++) {\n\t\t\t\tprintf(\"%c\",'a'+'b'-ans[i]);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t/*if(b==489) {\n\t\t\tprintf(\"henhenhenaAAAAAAA\\n\");\n\t\t\treturn 0;\n\t\t}*/\n\t\tprintf(\"%d\\n\",dmax+1);\n\t\tchar x='a',y='b';\n\t\tif(rev) {\n\t\t\tswap(a,b);\n\t\t}\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tif(!sz[i]) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(b>a) {\n\t\t\t\tswap(x,y);\n\t\t\t\tswap(a,b);\n\t\t\t}\n\t\t\twhile(sz[i]&&a) {\n\t\t\t\tans[dep[i][sz[i]-1]]=x;\n\t\t\t\tsz[i]--;\n\t\t\t\ta--;\n\t\t\t}\n\t\t\twhile(sz[i]&&b) {\n\t\t\t\tans[dep[i][sz[i]-1]]=y;\n\t\t\t\tsz[i]--;\n\t\t\t\tb--;\n\t\t\t}\n\t\t} \n\t\tprintf(\"%s\\n\",ans+1);\n\t}\n\n\t//fclose(stdin);\n\t//fclose(stdout);\n\treturn 0;\n}\n/*\n9 6\n1 2 2 4 4 4 3 1\n*/ \n\n```",
        "postTime": 1613888057,
        "uid": 132976,
        "name": "huayucaiji",
        "ccfLevel": 6,
        "title": "CF1481F"
    },
    {
        "content": "**Problem F - AB Tree**\n\n\u8f93\u5165 $n$, $x$\uff0c\u7ed9\u4f60\u4e00\u68f5 $n$ \u4e2a\u7ed3\u70b9\u6839\u4e3a $1$ \u7684\u6811\uff0c\u8bf7\u4f60\u4e3a\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u5206\u914d\u4e00\u4e2a\u5b57\u7b26 `a` \u6216\u8005 `b`\u3002\u4f7f\u5f97\u5b57\u7b26 `a` \u7684\u6570\u91cf\u4e3a $x$ \u5b57\u7b26 `b` \u7684\u6570\u91cf\u4e3a $n-x$ \u3002 \n\n\u5b9a\u4e49\u7ed3\u70b9 $v$ \u4e0a\u7684\u5b57\u7b26\u4e32\uff1a\n\n- \u82e5\u7ed3\u70b9 $v$ \u662f\u6839\u7ed3\u70b9\uff0c\u5219\u7ed3\u70b9 $v$ \u7684\u4e0a\u7684\u5b57\u7b26\u4e32\u4e3a\u4f60\u4e3a\u6839\u7ed3\u70b9\u5206\u914d\u7684\u5b57\u7b26\n- \u5426\u5219\uff0c\u7ed3\u70b9 $v$ \u4e0a\u7684\u5b57\u7b26\u4e32\u5c31\u662f\u7236\u7ed3\u70b9\u4e0a\u7684\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u52a0\u4e0a \u7ed3\u70b9 $v$ \u4e0a\u9762\u5206\u914d\u7684\u5b57\u7b26\u3002\n\n\u8bf7\u4f60\u4e3a\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u5206\u914d\u5b57\u7b26\uff0c\u6ee1\u8db3\u6240\u6709\u7ed3\u70b9\u4e0a\u7684\u5b57\u7b26\u4e32\u7684\u79cd\u7c7b\u6700\u5c11\u3002\n\n**Solution**\n\n\u770b\u4e0a\u53bb\u53c8\u662f\u4e00\u4e2a\u8d2a\u5fc3 + DP\uff08~~\u6ca1\u5b8c\u4e86\u662f\u5427~~ \uff09\n\n\u8fd8\u662f\u5148\u5206\u6790\u4e00\u4e0b\u9898\u76ee\u6709\u4ec0\u4e48\u6027\u8d28\uff0c\u6bd4\u5982\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u4ec0\u4e48\uff0c\u5f88\u660e\u663e\uff0c\u5c31\u662f\u4ece\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6700\u4e0a\u5c42\u7684\u7956\u5148\u5f00\u59cb\uff08\u5b9e\u9645\u4e0a\u5c31\u662f\u6839\u7ed3\u70b9\uff09\u4e00\u76f4\u5230\u8be5\u7ed3\u70b9\u7ec4\u6210\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u6bcf\u4e2a\u7ed3\u70b9\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u53d1\u73b0\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e5f\u5c31\u662f\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u6700\u957f\u4e5f\u5c31\u662f\u6811\u4e0a\u6700\u957f\u7684\u7b80\u5355\u8def\u5f84\u7684\u957f\u5ea6 \u2014\u2014 \u6811\u7684\u76f4\u5f84 $\\tt dist$\u3002\u6700\u957f\u7684\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e5f\u5c31\u662f\u76f4\u5f84 $\\tt dist$ + $\\tt 1$ \u3002\u4e5f\u5c31\u662f\u6240\u6709\u7ed3\u70b9\u4e0a\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 $\\tt dist$ + $\\tt 1$ \uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6240\u6709\u7684\u5b57\u7b26\u4e32\u6700\u591a\u6709 $\\tt dist$ + $\\tt 1$ \u5c42\u3002\u5f88\u660e\u663e\uff0c\u4e0a\u5c42\uff0c\u4e5f\u5c31\u662f\u79bb\u6839\u7ed3\u70b9\u8fd1\u7684\u7ed3\u70b9\uff0c\u51fa\u73b0\u5728\u5b57\u7b26\u4e32\u91cc\u7684\u6b21\u6570\u6700\u591a\uff0c\u662f\u597d\u591a\u5b57\u7b26\u4e32\u7684\u57fa\u7840\uff08\u524d\u6392\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u524d\u9762\u7684\u5c3d\u91cf\u6bcf\u4e00\u5c42\uff08\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\uff09\u90fd\u76f8\u540c\uff0c\u8fd9\u6837\u6700\u540e\u603b\u7684\u5b57\u7b26\u4e32\u7684\u79cd\u6570\u4f1a\u66f4\u5c0f\u3002\n\n\u7136\u540e\u6211\u4eec\u8fd9\u91cc\u7684\u76f4\u5f84 $\\tt dist$ \u4e25\u683c\u610f\u4e49\u4e0a\u4e0d\u80fd\u8bf4\u662f\u6811\u7684\u76f4\u5f84\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u662f\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u5e94\u8be5\u662f**\u6811\u7684\u6df1\u5ea6**\uff0c\u4e5f\u5c31\u662f\u6839\u7ed3\u70b9\u7684\u6df1\u5ea6\u4e3a $1$ \u5f00\u59cb\u5f80\u4e0b\u9012\u63a8\u5c31\u884c\u4e86\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u53ea\u80fd\u4e5f\u5fc5\u987b\u5206\u914d $x$ \u4e2a\u5b57\u7b26 `a` \uff0c\u548c $n-x$ \u4e2a\u5b57\u7b26 `b` \uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u76f4\u89c2\u7684\u4e00\u4e2a\u8d2a\u5fc3\u7b56\u7565\u5c31\u662f\u8ba9\u4e0a\u5c42\u5c3d\u53ef\u80fd\u7684\u4e00\u81f4\uff0c\u76f4\u5230\u67d0\u4e00\u4e2a\u5b57\u7b26\u4e0d\u591f\u7528\u4e3a\u6b62\u3002\n\n\u6211\u4eec\u8bbe\u6811\u7684\u6df1\u5ea6\u4e3a $m$ \u3002\n\n\u8fd9\u6837\u6211\u4eec\u4e00\u5171\u4f1a\u6709 $m$ \u5c42\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5b9e\u9645\u4e0a\u6bcf\u4e00\u5c42\uff0c\u90fd\u662f\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684**\u540c\u6837\u7684\u4f4d\u7f6e**\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u662f\u540c\u6837\u7684\u4e0b\u6807\uff0c\u4e5f\u5c31\u662f\u5982\u679c\u6211\u4eec\u80fd\u4fdd\u8bc1**\u6bcf\u4e00\u5c42**\u5206\u914d\u7684\u5b57\u7b26**\u76f8\u540c**\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5b57\u7b26\u4e32\u90fd\u4f1a\u76f8\u540c\uff0c\u4e5f\u5c31\u662f\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\u5c31\u662f\u4e0d\u540c\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u5c42\u6570 $m$ \u3002\n\n\u6211\u753b\u4e00\u4e2a\u56fe\u6765\u5e2e\u52a9\u7406\u89e3\uff1a\n\n```cpp\n          1a\n        /    \\\n      2b     3b\n     /  \\   /  \\\n   4a   5a 6a   7a\n```\n\u8fd9\u9053\u9898\u4e00\u753b\u56fe\u5c31\u592a\u5f62\u8c61\u4e86\uff0c\u663e\u7136\uff0c\u4e0a\u9762\u7684\u7b56\u7565\u7684\u662f\u6b63\u786e\u7684\n\n\u6240\u4ee5\u6211\u4eec\u5c3d\u91cf\u53bb\u6839\u636e\u8fd9\u4e2a\u8d2a\u5fc3\u7b56\u7565\u53bb\u8d70\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8fd9\u9053\u9898\u5c31\u53d8\u6210\u4e86\uff0c\u4ece $m$ \u5c42\u91cc\uff0c\u9009\u62e9\u82e5\u5e72\u5c42\uff0c\uff08\u8bbe\u7b2c $i$ \u5c42\u7684\u7ed3\u70b9\u4e2a\u6570\u4e3a $num_i$ \uff09\uff0c\u9009\u62e9\u7684\u8fd9\u4e9b\u5c42\u7684**\u7ed3\u70b9\u4e2a\u6570\u4e4b\u548c\u7b49\u4e8e** $x$ \uff0c\u4e5f\u5c31\u662f `a` \u7684\u4e2a\u6570\uff0c\u7136\u540e\u5269\u4e0b\u7684\u81ea\u7136\u90fd\u662f `b` \uff0c\u4e5f\u5c31\u80fd\u4fdd\u8bc1\u6bcf\u4e00\u5c42\u7684\u5b57\u7b26\u90fd\u76f8\u540c\uff0c\u4e5f\u5c31\u5b8c\u6210\u4e86\u4e0a\u9762\u7684\u8d2a\u5fc3\u7b56\u7565\u3002\u8fd9\u5f88\u663e\u7136\u5c31\u662f\u4e00\u4e2a\u80cc\u5305\u95ee\u9898\u3002\u6211\u4eec\u9884\u5904\u7406\u51fa\u6765 $num_i$ \uff0c\u5f53\u4f5c\u80cc\u5305\u5904\u7406\u5373\u53ef\u3002\n\n\u7136\u540e\u518d\u6765\u5206\u6790\u4e00\u4e0b\u6709\u6ca1\u6709\u5176\u4ed6\u7684\u60c5\u51b5\uff1a\u5373\u5982\u679c\u8fd9\u79cd\u8d2a\u5fc3\u7b56\u7565\u4e0d\u80fd\u6ee1\u8db3\uff0c\u90a3\u4e48\u6700\u5c0f\u7684\u7b54\u6848\u662f\u5565\u561e ~\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u8d2a\u5fc3\u7b56\u7565\u4e0d\u80fd\u6ee1\u8db3\uff0c\u4e5f\u5c31\u662f\u5dee\u70b9\uff0c\u90a3\u4e48\u6700\u591a\u4e5f\u5c31\u53ea\u4f1a\u51fa\u73b0\u4e00\u5c42\u7684\u7ed3\u70b9\u5b57\u7b26\u4e0d\u540c\uff0c\u4e5f\u5c31\u662f\u9700\u8981\u88ab\u8feb\u5206\u914d\u5230\u4e24\u79cd\u5b57\u7b26\u3002\u90a3\u4e48\u628a\u8fd9\u4e00\u5c42\u653e\u5230\u54ea\u513f\u5f88\u5173\u952e\u3002\u6211\u4eec\u518d\u6765\u8d2a\u5fc3\u3002\n\n\u6211\u4eec\u77e5\u9053\u539f\u672c\u8d2a\u5fc3\u7b56\u7565\u5b8c\u7f8e\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u7b54\u6848\u662f\u4e0d\u540c\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\uff0c\u7136\u540e\u6839\u636e\u6211\u4eec\u6700\u5f00\u59cb\u7684\u8d2a\u5fc3\u7b56\u7565\uff0c\u8ba9\u4e0d\u540c\u7684\u5b57\u7b26\u8d8a\u4f4e\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u8ba9\u4e0d\u540c\u7684\u5b57\u7b26\u653e\u5230\u6700\u4f4e\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u5bf9\u6574\u4f53\u7684\u7b54\u6848\u5f71\u54cd\u6700\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u8ba9\u9700\u8981\u88ab\u8feb\u4f7f\u7528\u4e24\u79cd\u5b57\u7b26\u90a3\u4e00\u5c42\uff0c\u653e\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u627e\u5230\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u6700\u591a\u7684\u90a3\u4e00\u5c42\uff0c\u4e22\u8fdb\u53bb\uff0c\u635f\u5931\u6700\u5c0f\u3002\u7136\u540e\u56e0\u4e3a\u6211\u4eec\u5b9e\u9645\u4e0a\u4e0d\u540c\u5b57\u7b26\u53ea\u6709 `a` \u548c `b` \u4e24\u79cd\uff0c\u4e5f\u5c31\u662f\u90a3\u4e00\u5806\u53f6\u5b50\u8282\u70b9\uff0c\u957f\u5ea6\u76f8\u540c\uff0c\u672b\u5c3e\u5b57\u7b26\u4e0d\u540c\uff0c\u4f46\u4e5f\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7b54\u6848\u5728 $m$ \u7684\u57fa\u7840\u4e4b\u4e0a + $1$ \uff0c\u4e5f\u5c31\u662f  $m+1$ \n\n\u603b\u7ed3\u4e00\u4e0b\n\n- \u82e5\u80cc\u5305\u53ef\u4ee5\u5b9e\u73b0\u9009\u62e9 \u82e5\u5e72\u5c42\uff0c\u7ed3\u70b9\u4e2a\u6570\u548c\u4e3a $x$ \uff0c\u7b54\u6848\u4e3a  $m$\uff0c\u6211\u4eec\u5728DP\u7684\u65f6\u5019\u5b58\u4e00\u4e0b\u9009\u62e9\u65b9\u6848\uff0c\u88ab\u88c5\u8fdb\u80cc\u5305\u91cc\u7684\u5c42\uff0c\u4e3a `a` \uff0c\u5176\u4f59\u5168\u90e8\u4e3a `b`\n- \u82e5\u80cc\u5305\u4e0d\u80fd\u5b9e\u73b0\uff0c\u7b54\u6848\u4e3a $m+1$  \uff0c\u6211\u4eec\u627e\u5230\u53f6\u5b50\u8282\u70b9\u6700\u591a\u7684\u90a3\u4e00\u5c42\uff0c\u628a\u53f6\u5b50\u8282\u70b9\u4e0a\u7f3a\u7684\uff0c\u51d1\u4e0d\u591f\u7684 `a` \u6362\u6210 `b` \uff0c\u5176\u4f59\u65b9\u6848\u6570\uff0c\u540c\u4e0a\u4e00\u79cd\u60c5\u51b5\u8f93\u51fa\u5373\u53ef\u3002\n\n\n\n\u6240\u4ee5\u6211\u4eec\u5c31dfs\u6700\u5927\u6c42\u4e00\u4e0b\u6df1\u5ea6\u4ee5\u53ca\u6bcf\u5c42\u7684\u7ed3\u70b9\u4e2a\u6570\uff0c\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u3002\n\n\n\u7136\u540eDP\u6c42\u51d1\u6210 $x$ \u7684\u65b9\u6848\uff0c\u82e5\u80fd\u51d1\u6210\uff0c\u5c31\u56de\u6eaf\u4e00\u4e0b\u627e\u4e00\u4e0bDP\u7684\u9009\u62e9\u65b9\u6848\uff0c\u5c31\u662f\u7b54\u6848\u3002\u8981\u662f\u51d1\u4e0d\u6210\u5c31\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\u6211\u4eec\u5c31\u627e\u5230\u80fd\u51d1\u6210\u7684\u6700\u5927\u7684\u6570\uff0c\u540c\u6837\u5148\u627eDP\u65b9\u6848\uff0c\u7136\u540e\u56e0\u4e3a\u6211\u4eec\u7684 `a` \u6709\u5269\u4f59\uff0c\u6240\u4ee5\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u5927\u4e8e\u5dee\u503c\u7684\u90a3\u4e00\u5c42\uff0c\u586b\u4e0a `a` \uff0c\u7136\u540e\u5c31\u6ca1\u4e86...\n\n\n\u7136\u540e\u5c31\u6ca1\u4e86...\n\n~~\u7136\u540e\uff0c\u8981\u662f\u770b\u4e0d\u61c2\uff0c\u4f60\u98de\u8fc7\u6765\u6253\u6211\u5440~~ \n\n\n>\u7136\u540e\u6211\u5728\u5b98\u65b9\u9898\u89e3\u7684\u8bc4\u8bba\u533a\u91cc\u770b\u5230\u53ef\u4ee5\u7528bitset\u4f18\u5316\uff0c\u5c31\u627e\u4e86\u4e00\u4f4d\u5927\u4f6c\u7684AC\u4ee3\u7801\u5b66\u4e60\u4e86\u4e00\u4e0b\uff0c\u501f\u9274\u4e86\u4ed6\u7684\u90e8\u5206\u5de7\u5999\u7684\u5199\u6cd5\uff0c\u628a\u6211\u7684\u5783\u573e\u80cc\u5305\u6539\u6210bitset\u4e86\uff0c\u633a\u5de7\u5999\u7684 ~ \n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210207153258452.png)\n\n\n\u545c\u545c\u545c\n\n\u54e6\u54e6\u54e6\uff0c\u6811\u662f\u65e0\u5411\u8fb9\uff0c\u4f46\u662f\u5982\u4f55\u5224\u65ad\u662f\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\u5462\uff1f\u6211\u7528\u7684\u662f\u5982\u679c\u524d\u5411\u661f\u7d22\u5f15\u6570\u7ec4 `head = -1` \uff0c\u5219\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u4f46\u662f\u56e0\u4e3a\u6700\u5f00\u59cb\u6211\u5efa\u56fe\u8fde\u7684\u662f\u53cc\u5411\u7684... \u6240\u4ee5\u6ca1\u529e\u6cd5\u5224\u65ad\u4e86\u3002\u7136\u540e\u56e0\u4e3a\u6211\u4eec\u7684dfs\u53ea\u9700\u8981\u5411\u4e0b\u8d70\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8fde\u5355\u5411\u8fb9\u5c31\u884c\uff08~~\u8fd9\u90fd\u80fdA10\u4e2a\u70b9...\u4ee5\u53ca\u8fd9\u9053\u9898\u76f4\u63a5\u4e03\u5341\u591a\u4e2a\u70b9\uff0c\u4e27\u5fc3\u75c5\u72c2~~ \uff09\n\nwtcl\n![/kk](https://img-blog.csdnimg.cn/img_convert/ce50ce023e794256b9a58b86eddc0550.png)\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210207153234285.png)\n\n\u7136\u540e\u5c31A\u4e86...\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <bitset>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nconst int N = 100007, M = 500007, INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef int itn;\n\nint n, m, t, x;\nint fa[N];\nint deep[N];\nint maxx;\nint num[N];//\u6bcf\u4e00\u5c42\u7ed3\u70b9\u4e2a\u6570\nint cnt;\nint lson[N];//\u53f6\u5b50\u8282\u70b9\nint head[N], ver[M], edge[M], nex[M], tot;\nbitset<N> f[2007];//\u80fd\u5426\u51d1\u9f50 x\uff0c\u4f7f\u7528 bitset \u4f18\u5316\nint val[N];\nunordered_map<int, int> vis;\n//int vis[N];\nbool ok[N];\nvector<int> v[N];\n\nvoid add(int x, itn y)\n{\n\tver[tot] = y;\n\tnex[tot] = head[x];\n\thead[x] = tot ++ ;\n}\n\nvoid dfs1(int x)\n{\n\tdeep[x] = deep[fa[x]] + 1;//\u8fd9\u91cc\u6839\u7ed3\u70b9 deep[1] = 1 \u6240\u4ee5\u4e0d\u7528\u518d +1 \u4e86\n\tnum[deep[x]] ++ ;\n\tmaxx = max(maxx, deep[x]);//\u6811\u7684\u76f4\u5f84\uff0c\u5b9e\u9645\u4e0a\u4e5f\u5c31\u662f\u6700\u5927\u6df1\u5ea6\n\tif (head[x] == -1) //\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u8bf4\u660e\u662f\u53f6\u5b50\u7ed3\u70b9\n\t\tlson[deep[x]] ++ ;//\u6bcf\u5c42\u7684\u53f6\u5b50\u7ed3\u70b9\u4e2a\u6570\n\tfor (int i = head[x]; ~i; i = nex[i]) {\n\t\tint y = ver[i];\n\t\tdfs1(y);\n\t}\n}\n\nvoid dfs2(itn x, int t)\n{\n\tif(x == 0)\n\t\treturn;\n\tfor (int i = 0; i < (int)v[x].size(); ++ i) {\n\t\tif(val[x] > t || f[x - 1][t])\n\t\t\tbreak;\n\t\tt -= val[x], ok[v[x][i]] = true;\n\t}\n\tdfs2(x - 1, t);\n}\n\nvoid init()\n{\n    memset(head, -1, sizeof head);\n    tot = 0;\n}\n\nvoid solve()\n{\n    init();\n\tscanf(\"%d%d\", &n, &x);\n\tfor (int i = 2; i <= n; ++ i) {\n\t\tscanf(\"%d\", &fa[i]);\n\t\t//add(i, fa[i]);\n\t\tadd(fa[i], i);\n\t}\n\tdfs1(1);//\u9884\u5904\u7406\u6bcf\u5c42\u7ed3\u70b9\u4e2a\u6570\n\t//\u628a\u62bd\u8c61\u7684\u6811\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4e2a\u7269\u54c1\uff0c\u5b58\u5230 v \u91cc\uff0c\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u79cd\u7c7b\uff08\u7ed3\u70b9\u4e2a\u6570\uff09\u548c\u4e2a\u6570\uff08\u5c42\u6570\uff09\n\t//cout << \"ok\" << endl;\n\t//\u4e00\u5171cnt\u79cd\uff0c\n\tfor (int i = 1; i <= maxx; ++ i) {\n\t\tif (vis[num[i]]) {\n           v[vis[num[i]]].push_back(i);\n\t\t}\n\t\telse {\n            vis[num[i]] = ++ cnt;\n            val[cnt] = num[i];\n            v[cnt].push_back(i);//\u6765\u627e\u6700\u540e\u9009\u4e86\u7b2c\u51e0\u5c42\n\t\t}\n\t}\n\n\tf[0][0] = 1;\n\n    for (int i = 1; i <= cnt; ++ i) {\n        f[i] = f[i - 1];\n\t\titn Size = v[i].size();\n\t\tfor (int j = 1; j <= Size; j <<= 1) {\n\t\t\tSize -= j;\n\t\t\tf[i] |= (f[i] << (j * val[i]));\n\t\t}\n\t\tif(Size > 0)\n\t\t\tf[i] |= f[i] << (Size * val[i]);\n\t}\n\n\tif(f[cnt][x]) {\n\t\tprintf(\"%d\\n\", maxx);\n\t\tdfs2(cnt, x);//\u8fd8\u539fdp\u7684\u65b9\u6848\n\t\tfor (int i = 1; i <= n; ++ i) {\n\t\t\tputchar(ok[deep[i]] ? 'a' : 'b');\n\t\t}\n\t}\n\t//\u51d1\u4e0d\u9f50\uff0c'a' \u6709\u5269\u4f59\n\telse {\n\t\tint res = INF;\n\t\tfor (int i = x; i >= 0; -- i) {\n\t\t\tif(f[cnt][i]) {\n\t\t\t\tres = i;//\u627e\u5230\u80fd\u51d1\u5230\u7684\u6700\u5927\u7684\u6570\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tdfs2(cnt, res);\n\t\tint pos = -1;\n\t\tfor (int i = 1; i <= maxx; ++ i)\n\t\t{\n\t\t\tif(!ok[i] && lson[i] >= x - res) {\n\t\t\t\tpos = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tprintf(\"%d\\n\", maxx + 1);\n\n\t\tfor (int i = 1; i <= n; ++ i) {\n\t\t\tif(deep[i] == pos && head[i] == -1) {\n\t\t\t\tif(res == x) {\n\t\t\t\t\tputchar('b');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tputchar('a'), ++ res;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tputchar(ok[deep[i]] ? 'a' : 'b');\n\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}\n\nitn main()\n{\n    solve();\n\treturn 0;\n}\n```",
        "postTime": 1613618582,
        "uid": 262605,
        "name": "fanfansann",
        "ccfLevel": 0,
        "title": "CF1481F AB Tree \u8d85\u9ad8\u8d28\u91cf\u9898\u89e3"
    }
]