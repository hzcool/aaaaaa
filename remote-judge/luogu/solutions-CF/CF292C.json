[
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9aN\u4e2a\u6574\u6570\uff0c\u7528\u5b83\u4eec\u6765\u7ec4\u6210\u4e00\u4e2a\u5408\u6cd5\u7684\u56de\u6587IP\u5730\u5740\uff0c\u6bcf\u4e2a\u6574\u6570\u90fd\u8981\u7528\u5230\n\n## \u5206\u6790\n\n- \u6211\u4eec\u9700\u8981dfs\u66b4\u529b\u679a\u4e3e\u524d\u4e00\u534a\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u662f\u56de\u6587\uff0c\u6240\u4ee5\u540e\u4e00\u534a\u5c31\u8981\u6ee1\u8db3\u56de\u6587\u6027\u8d28\uff0c\u5728\u679a\u4e3e\u6570\u5b57\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u7528\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570flag\u6765\u5b58\u6709\u54ea\u4e9b\u6570\u5b57\u662f\u8981\u7528\u7684\uff0c\u5728dfs\u7684\u65f6\u5019\u4e5f\u7528\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570use\u6765\u5b58\u5f53\u524d\u5df2\u7ecf\u7528\u8fc7\u54ea\u4e9b\u6570\u5b57\uff0c\u5982\u679c\u5230\u4e86\u5230\u4e86\u6700\u540e\u53d1\u73b0use\uff01=flag\u5219\u8fdd\u6cd5\uff0c\u5c31\u8981\u9000\u51fa\n\n- \u5c06\u679a\u4e3e\u51fa\u6765\u7684\u6570\u5b57\u8fdb\u884c\u62c6\u5206\uff0c\u5e76\u8fdb\u884c\u5224\u65ad\uff0c\u8fdd\u6cd5\u7684\u60c5\u51b5\u6709\u4e24\u79cd 1. \u5f53\u524d\u8fd9\u7ec4\u6570\u7684\u9996\u4f4d\u4e3a0\uff0c\u4e14\u8fd9\u7ec4\u6570\u4e0d\u53ea\u6709\u4e00\u4f4d\u3002 2. \u8fd9\u7ec4\u6570\u6570\u5b57\u5927\u4e8e255\u6216\u5c0f\u4e8e0\u3002\u9664\u6b64\u4e4b\u5916\u7684\u5408\u6cd5IP\u5730\u5740\u6211\u4eec\u90fd\u52a0\u5165\u7b54\u6848\uff0c\u6700\u540e\u8f93\u51fa\u5373\u53ef\u3002\n\n## \u4ee3\u7801(\u90e8\u5206\u6ce8\u91ca\u5728\u4ee3\u7801\u4e2d)\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,flag,tot;\nbool check(string s,int l,int r)\n{\n\tif(s[l]=='0')\n\t{\n\t\tif(r==l+1) return 1;\n\t\treturn 0;\n\t}\n\tint x=0;\n\tfor(int i=l;i<r;i++)\n\t\tx=(x<<3)+(x<<1)+(s[i]-'0');\n\tif(x>=0&&x<=255) return 1;\n\treturn 0;\n}\nstring ans[8888];\nvoid solve(string s)\n{\n\tint len=s.size();\n\tfor(int i=1;i<=3;i++)\n\t\tfor(int j=i+1;j<=i+3;j++)\n\t\t\tfor(int k=j+1;k<=j+3;k++)\n\t\t\t{\n\t\t\t\tif(len-k>=1&&len-k<=3&&check(s,0,i)&&check(s,i,j)&&check(s,j,k)&&check(s,k,len))\n\t\t\t\t//\u5982\u679c\u6700\u540e\u4e00\u7ec4\u6570\u7684\u4f4d\u6570\u4e0d\u57281~3\u4e2d\u8bf4\u660e\u4e0d\u5408\u6cd5 \n\t\t\t\tans[++tot]=s.substr(0,i)+\".\"+s.substr(i,j-i)+\".\"+s.substr(j,k-j)+\".\"+s.substr(k,len-k);\n\t\t\t}\n}\n//\u56db\u9879\u5206\u522b\u662f\u5f53\u524d\u679a\u4e3e\u7684\u4f4d\u6570\uff0c\u6700\u5927\u4f4d\u6570\uff0c\u5f53\u524d\u4f7f\u7528\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u5df2\u4f7f\u7528\u7684\u6570\u5b57 \nvoid dfs(int k,int maxk,string s,int use)\n{\n\tif(k==maxk)\n\t{\n\t\tif(use==flag) solve(s);\n\t\treturn;\n\t}\n\tif(k*2>maxk-1)\n\t{\n\t\tif(use!=flag) return;\n\t\tdfs(k+1,maxk,s+s[maxk-k-1],use);\n\t\treturn;\n\t}\n\tfor(int i=0;i<=9;i++)\n\t\tif(flag&(1<<i))\n\t\t//\u5224\u65ad\u662f\u5426\u6709i\u8fd9\u4e2a\u6570\u5b57 \n\t\t\tdfs(k+1,maxk,s+char(i+'0'),use|(1<<i));\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tflag|=1<<x;\n\t\t//\u7528\u4e8c\u8fdb\u5236\u6570\u5b58\u7528\u54ea\u4e9b\u6570 \n\t}\n\tif(n<=6)\n\t{\n\t\tfor(int i=4;i<=12;i++)\n\t\t\tdfs(0,i,\"\",0);\n\t}\n\tprintf(\"%d\\n\",tot);\n\tfor(int i=1;i<=tot;i++)\n\t\tcout<<ans[i]<<endl;\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1588841707,
        "uid": 72043,
        "name": "jdsb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF292C \u3010Beautiful IP Addresses\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5206\u6790\n\u672c\u9898\u8981\u6c42\u51fa\u6240\u6709\u7f8e\u4e3d\u5730\u5740\uff0c\u7531\u4e8e IP \u5730\u5740\u7684\u9650\u5236\uff0c\u5bfc\u81f4\u53ef\u884c\u7684\u6570\u91cf\u6bd4\u8f83\u5c11\uff0c\u76f4\u63a5 dfs \u679a\u4e3e\u5373\u53ef\u3002\n\n\u5728\u679a\u4e3e\u65f6\uff0c\u4e3a\u63d0\u9ad8\u7a0b\u5e8f\u6548\u7387\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u53ea\u679a\u4e3e\u5e8f\u5217\u7684\u524d\u4e00\u534a\uff0c\u7136\u540e\u901a\u8fc7\u56de\u6587\u4e32\u7684\u7279\u70b9\u5f97\u5230\u540e\u4e00\u534a\uff0c\u5e76\u5224\u65ad\u5b83\u662f\u5426\u5408\u6cd5\u3002\u4e4b\u540e\u518d\u8003\u8651\u5411\u6570\u5217\u4e2d\u52a0\u70b9\u3002\u6bcf\u6b21\u52a0\u70b9\u65f6\uff0c\u5224\u65ad\u6bcf\u4e00\u7ec4\u6570\u662f\u5426\u5728 $ 0 $ ~ $ 255 $ \u4e4b\u95f4\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u65e0\u9700\u7ee7\u7eed\u5f80\u4e0b\u679a\u4e3e\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\n\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\u5730\u65b9\u3002\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u70b9\uff1a\n\n- \u8fb9\u754c\u95ee\u9898\uff1a\u5728\u679a\u4e3e\u70b9\u7684\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u8981\u6ce8\u610f\u6bcf\u4e00\u4f4d\u4e0d\u53ef\u4ee5\u6ca1\u6709\u6570\u5b57\u3002\n- \u524d\u5bfc $ 0 $ \u95ee\u9898\uff1a\u5728\u8fd4\u56de\u6bcf\u4e00\u7ec4\u7684\u503c\u65f6\uff0c\u987a\u4fbf\u5224\u65ad\u8fd9\u4e00\u7ec4\u662f\u5426\u5b58\u5728\u524d\u5bfc $ 0 $ \uff0c\u5982\u679c\u662f\uff0c\u5219\u4e0d\u518d\u7ee7\u7eed\u8ba1\u7b97\u3002\n- \u653e\u70b9\u95ee\u9898\uff1a\u5728\u653e\u70b9\u65f6\uff0c\u8981\u6ce8\u610f\u6240\u653e\u7684\u70b9\u662f\u5728\u5f53\u524d\u5b57\u7b26\u7684\u524d\u9762\u8fd8\u662f\u540e\u9762\uff0c\u672c\u9898\u89e3\u7684\u4ee3\u7801\u4ee5\u653e\u5728\u540e\u9762\u7684\u7248\u672c\u7ed9\u51fa\u3002\n- \u5176\u4ed6\u95ee\u9898\uff1a\u5224\u65ad\u662f\u5426\u5408\u6cd5\u65f6\u6bcf\u6b21\u6570\u7ec4\u8bb0\u5f97\u5f52 $ 0 $ \u6216\u76f4\u63a5\u5b9a\u4e49\u5728\u51fd\u6570\u5185\u90e8\u3002\n\n\u5176\u4ed6\u7684\u5c31\u4e0d\u5fc5\u591a\u8bf4\u4e86\uff0c\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u8be6\u89c1\u4e0b\u65b9\u4ee3\u7801\u3002\n```cpp\n#include<iostream>\nusing namespace std;\nint n,a[11],res;\nstring s[1111100];\n//\u8fd4\u56de\u8fd9\u4e00\u7ec4\u7684\u503c\nint val(string s,int st,int e){\n    int ans=0;\n    bool state=0;\n    for(int i=st;i<e;++i){\n        if(s[i]!='0')\n            state=1;\n        if(s[i]=='0' && state==0 && i!=e-1)\n            return 1e9;\n        ans=ans*10+s[i]-'0';\n    }\n    return ans;\n}\n//\u5411\u751f\u6210\u7684\u6570\u5217\u4e2d\u653e'.'\nvoid solve(string ans){\n    int k=ans.size();\n    for(int i=1;i<k-2;++i){\n        if(val(ans,0,i)>255)\n            continue;\n        for(int j=i+1;j<k-1;++j){\n            if(val(ans,i,j)>255)\n                continue;\n            for(int m=j+1;m<k;++m){\n                if(val(ans,j,m)>255 || val(ans,m,k)>255)\n                    continue;\n                int cnt=0;\n                ++res;\n                for(int q=0;q<k;++q){\n                    if(q==i || q==j || q==m){\n                        s[res]+='.';\n                        ++cnt;\n                    }\n                    s[res]+=ans[q];\n                }\n            }\n        }\n    }\n}\n//\u751f\u6210\u5b8c\u6574\u6570\u5b57\u5e8f\u5217\nvoid qwq(int d,int k,string ans){//\u4e00\u5171d\u4f4d\uff0c\u73b0\u6709k\u4f4d,\u8981\u8003\u8651\u7684\u6570\u5217ans\n    if(d%2){\n        int cnt=k-2;\n        for(int i=k;i<d;++i)\n            ans+=ans[cnt--];\n    }\n    else{\n        int cnt=k-1;\n        for(int i=k;i<d;++i)\n            ans+=ans[cnt--];\n    }\n    solve(ans);\n}\nbool ck(string s){//\u5224\u65ad\u751f\u6210\u7684\u662f\u5426\u5408\u6cd5\u3002\u5982\u679c\u6709\u6ca1\u7528\u5230\u7684\u6570\u5b57\u5373\u4e3a\u4e0d\u5408\u6cd5\n    int b[100]={};\n    for(int i=0;i<s.size();++i){\n        b[s[i]-'0']=1;\n    }\n    for(int i=1;i<=n;++i)\n        if(!b[a[i]])\n            return 0;\n    return 1;\n}\n//\u751f\u6210\u4e00\u534a\u6570\u5b57\u5e8f\u5217\nvoid make(int d,int k,int now,string ans){//\u5e94\u6709d\u4f4d\uff0c\u4e00\u534a\u6709k\u4f4d\uff0c\u5f53\u524d\u679a\u4e3e\u5230\u7b2cnow\u4f4d\uff0c\u679a\u4e3e\u751f\u6210\u6570\u5217\u4e3aans\n    if(now==k+1){\n        if(ck(ans))\n            qwq(d,k,ans);\n        return ;\n    }\n    for(int i=1;i<=n;++i){\n        make(d,k,now+1,ans+((char)(a[i]+'0')));\n    }\n}\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;++i){\n        cin>>a[i];\n    }\n    for(int k=4;k<=12;++k){//\u4f4d\u6570\n        make(k,(k+1)/2,1,\"\");//\u53ea\u9700\u679a\u4e3e\u524d\u4e00\u534a\n    }\n    cout<<res<<endl;\n    for(int i=1;i<=res;++i)\n        cout<<s[i]<<endl;\n    return 0;\n}\n\n```\n",
        "postTime": 1633271533,
        "uid": 183954,
        "name": "MC\u5c0f\u840c\u65b0",
        "ccfLevel": 6,
        "title": "CF292C\u3010Beautiful IP Addresses\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n  \u5b9a\u4e49\u4e00\u4e2a\u5408\u6cd5\u7684\u56de\u6587IP\u5730\u5740\u4e3a $Beautiful IP Address $ \uff08\u56de\u6587\u5730\u5740\u5c31\u662f\u53bb\u6389\u201c.\u201d\u540e\u662f\u4e2a\u56de\u6587\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff09\uff0c \u7ed9\u51fa $n$ \u4e2a\u6570\u5b57\uff0c\u6c42\u51fa\u6240\u6709\u53ef\u7528\u8fd9\u4e9b\u6570\u5b57\u7ec4\u6210\u7684 $Beautiful Addresses$ \u3002\uff08IP\u5730\u5740\u4e3a\u4e00\u4e2a $32$  \u4f4d\u7684\u4e8c\u8fdb\u5236\u6570 \uff0c \u5206\u6210\u56db\u7ec4 $8$ \u4f4d\u7684\u4e8c\u8fdb\u5236\u6574\u6570\uff08\u65e0\u524d\u5bfc$0$ ) .\n\n  \u6ce8\uff1a\u6bcf\u4e2a\u6570\u90fd\u5fc5\u987b\u7528\u5230\u4e14\u53ea\u80fd\u4f7f\u7528\u8fd9\u4e9b\u6570\u5b57\u3002\n\n### \u5206\u6790\n\n   \u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u56de\u6587\u6570\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u5b83\u7684\u524d\u9762\u4e00\u534a\u5373\u53ef\u3002\u6240\u4ee5\u6211\u4eec\u7528dfs\u6765\u66b4\u529b\u679a\u4e3e\u524d\u9762\u4e00\u534a\u7684\u6bcf\u79cd\u60c5\u51b5\uff0c\u7136\u540e\u5bf9\u4e8e\u6211\u4eec\u6240\u8981\u4f7f\u7528\u7684\u6570\u5b57\uff0c\u6211\u4eec\u7528 $2$ \u8fdb\u5236\u6765\u5b58\u653e\u8fd9\u4e9b\u6570\u5b57 \uff0c \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u679a\u4e3e\u7684\u6570\u6211\u4eec\u4e5f\u7528\u4e00\u4e2a $2$ \u8fdb\u5236\u6570\u6765\u5b58\u50a8\uff0c\u8868\u793a\u6211\u4eec\u4f7f\u7528\u8fc7\u7684\u6570\u5b57\uff0c\u8fd9\u6837\u5b50\u5f53\u6211\u4eec\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u65f6\uff0c\u53ea\u9700\u5224\u65ad\u8fd9\u4e24\u4e2a\u6570\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002\n\n   \u5176\u6b21\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u679a\u4e3e\u51fa\u6765\u7684\u56de\u6587\u6570\u90fd\u8981\u6ee1\u8db3\u4e00\u4e2a\u6027\u8d28\uff1a $IP$ \u5730\u5740\u3002\u6240\u4ee5\u8bf4\u6211\u4eec\u8981\u5224\u65ad\u5c06\u8fd9\u4e9b\u6570\u5b57\u8fdb\u884c\u62c6\u5206\uff0c\u5728\u6bcf\u6b21\u62c6\u5206\u65f6\uff0c\u5224\u65ad\u4ed6\u662f\u5426\u5408\u6cd5\uff0c $1$ .\u6bcf\u7ec4\u6570\u7684\u9996\u4f4d\u90fd\u4e0d\u80fd\u4e3a $0$ \u9664\u975e\u8fd9\u4e2a\u6570\u53ea\u6709\u4e00\u4f4d .  $2$ .\u6211\u4eec\u5bf9\u4e8e\u6570\u5b57\u90fd\u8981\u6ee1\u8db3\u4e0d\u5927\u4e8e $255$  \u548c \u4e0d\u5c0f\u4e8e$ 0 $ \u3002\u6ee1\u8db3\u6761\u4ef6\u7684\u90fd\u662f\u5408\u6cd5\u7684IP\u5730\u5740\uff0c\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u3002\n\n\uff08\u56e0\u4e3a\u662f\u521a\u5f00\u59cb\u5199\u9898\u89e3\uff0c\u5728\u697c\u4e0b\u540c\u673a\u623f\u5927\u4f6c $jdsb$ \u7684\u5e2e\u52a9\u4e0b\u5b8c\u6210\uff0c\u601d\u8def\u7c7b\u4f3c\uff0c\u5728\u8fd9\u91cc\u5bf9\u5176\u611f\u8c22\uff09\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n , a , MAX_num , cnt;\nstring ans[ 5010 ];\nbool check( string s , int l , int r ){\n\tif( s[ l ] == '0' ){\n\t if( r == l + 1 ) return 1;\n\t return 0;\n\t}\n\tint x = 0 ;\n\tfor( int i = l ; i < r ; i ++ )\n\tx = ( x << 3 ) + ( x << 1 ) + ( s[ i ] - '0' );\n    if( x >= 0 && x <= 255 ) return 1;\n    return 0; \n}\nvoid work( string s ){\n\tint len = s.size( );\n\tfor( int i = 1 ; i <= 3 ; i ++ ){\n\t for( int j = i + 1 ; j <= i + 3 ; j ++ )\n\t  for( int k = j + 1 ; k <= j + 3 ; k ++ ){\n\t  \tif( len - k >= 1 && len - k <= 3 && check( s , 0 , i )  && check( s , i , j ) && check( s , j , k ) && check( s , k ,len )){//\u6bcf\u6bb5IP\u5730\u5740\u662f\u5426\u5408\u683c \n\t     ans[ ++cnt ] = s.substr( 0 , i ) + '.' + s.substr( i , j - i ) + '.' + s.substr( j , k - j  ) + '.' + s.substr( k , len - k );  \n\t\t} \n \t  }\n\t}\n}\nvoid dfs( int k , int MAXk , string s , int used ){\n\tif( k == MAXk ) {\n\t\t if( used == MAX_num ) work( s );\n\t\t return;\n\t}\n\tif( k * 2 > MAXk - 1 ){\n\t\tif( used != MAX_num ) return;\n\t\tdfs( k + 1 , MAXk , s + s[ MAXk - k - 1 ] , used );\n\t\treturn;\n\t}\n    for( int i = 0 ; i <= 9 ; i ++ ){\n\t if( MAX_num & ( 1 << i ) )\n\t dfs( k + 1 , MAXk , s + char( i + 48 )  , used | ( 1 << i ) );\n\t} \n}\nint main( ){\n\tscanf(\"%d\" , &n );\n\tfor( int i = 1 ; i <= n ; i ++ ){\n\t scanf(\"%d\" , &a );\n\t MAX_num |= ( 1 << a );\n   }\n   if( n <= 6 ){\n   \t for( int i = 4 ; i <= 12 ; i++ )\n   \t  dfs( 0 , i , \"\" , 0 ); \n\t}\n\tprintf(\"%d\\n\" , cnt );\n\tfor( int i = 1 ; i <= cnt ; i ++ ){\n\t\t cout<< ans[ i ]<<endl;\n\t}\n    return 0;\n} \t\n```\n\n\n\n### \u603b\u7ed3\n\n \u96be\u5ea6\u4e0d\u5927\uff0c\u4ee3\u7801\u7406\u89e3\u8bfb\u8005\u81ea\u884c\u7406\u89e3\uff0c\u6709\u95ee\u9898\u53ef\u4ee5\u8bc4\u8bba\uff0c\u8c22\u8c22\u3002",
        "postTime": 1595232455,
        "uid": 114934,
        "name": "dzk_QwQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF292C \u3010Beautiful IP Addresses\u3011"
    }
]