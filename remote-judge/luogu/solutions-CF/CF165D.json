[
    {
        "content": "$$\\text{\u5173\u4e8e\u9898\u610f}$$\n\n$\\quad$\u4e00\u9053\u5f88\u7b80\u5355\u7684\u6811\u5256\u9898\uff0c\u53ea\u6709\u4e09\u79cd\u64cd\u4f5c(\u5176\u5b9e\u662f\u4e24\u79cd)\uff0c\u552f\u4e00\u8981\u8003\u8651\u7684\u70b9\u662f\u5982\u4f55\u5c06\u8fb9\u6743\u8f6c\u5316\u6210\u70b9\u6743\uff0c\u8003\u8651\u5230\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u7236\u4eb2\u8282\u70b9(\u9664\u6839\u8282\u70b91\u4e4b\u5916)\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u7236\u4eb2\u4e0e\u513f\u5b50\u8fde\u63a5\u7684\u8fb9\u6743\u8bb0\u5f55\u5230\u513f\u5b50\u8eab\u4e0a\uff0c\u8fd9\u6837 $n-1$ \u6761\u8fb9\u5c31\u53ef\u4ee5\u5408\u7406\u7684\u5206\u914d\u5230 $n-1$ \u4e2a\u70b9\u4e0a(\u9664\u4e86\u6839\u8282\u70b9)\uff0c\u8fd9\u6837\u5c31\u8f6c\u5316\u6210\u4e86\u666e\u901a\u7684\u6811\u94fe\u5256\u5206\u6a21\u677f\u4e86(\u5982\u679c\u8fd8\u4e0d\u80fd\u7406\u89e3\u5c31\u770b\u770b\u56fe\u5427)\u3002\n\n\u539f\u56fe\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/o4y4z8vc.png)\n\n\u7ecf\u8fc7\u8f6c\u5316\u540e\u7684\u56fe(\u5c06\u8fb9\u6743\u8f6c\u5316\u4e3a\u70b9\u6743)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qtsmvd97.png)\n\n\u6ce8\u610f\uff1a\u5bf9\u4e8e\u8def\u5f84$4-2-5$\uff0c\u53ea\u9700\u8bbf\u95ee\u70b9 $4$ \u548c\u70b9 $5$\uff0c\u5bf9\u4e8e $4$ \u548c $5$ \u7684 $LCA$ (\u6700\u8fd1\u516c\u5171\u7956\u5148)\u4e0d\u53ef\u53d6\uff0c\u56e0\u4e3a $2$ \u5728\u539f\u56fe\u4e2d\u5bf9\u5e94\u7684\u662f\u8fb9 $1-2$\uff0c\u5e76\u4e0d\u5728\u8def\u5f84$4-2-5$\u4e0a\uff0c\u6240\u4ee5\u5728\u6811\u94fe\u5256\u5206\u4e2d\u5f53 $x$ \u548c $y$ \u5728\u540c\u4e00\u6761\u94fe\u4e0a\u65f6($dep[x]<dep[y]$)\uff0c\u53ea\u9700\u8be2\u95ee $x+1$ \u5230 $y$ \u7684\u8def\u5f84\u3002\n\n$$\\text{\u5bf9\u4e8e\u4e09\u79cd\u64cd\u4f5c}$$\n\n1. \u64cd\u4f5c $1$\uff1a\u4fee\u6539\u64cd\u4f5c\uff0c\u628a\u7b2c $u$ \u6761\u8fb9\u6539\u6210\u9ed1\u8fb9\u3002\n\n2. \u64cd\u4f5c $2$\uff1a\u4fee\u6539\u64cd\u4f5c\uff0c\u628a\u7b2c $u$ \u6761\u8fb9\u6539\u6210\u767d\u8fb9\u3002\n\n3. \u64cd\u4f5c $3$\uff1a\u8be2\u95ee\u64cd\u4f5c\uff0c\u82e5 $u$ \u53f7\u8282\u70b9\u548c $v$ \u53f7\u8282\u70b9\u95f4\u5b58\u5728\u767d\u8fb9\uff0c\u8f93\u51fa $-1$\uff0c\u5426\u5219\u8f93\u51fa $u$ \u53f7\u8282\u70b9\u548c $v$ \u53f7\u8282\u70b9\u95f4\u7684\u9ed1\u8fb9\u6570\u3002\n\n$\\quad$\u53ef\u4ee5\u5f88\u5bb9\u6613\u53d1\u73b0\u64cd\u4f5c $1$\u548c\u64cd\u4f5c $2$ \u5176\u5b9e\u662f\u4e00\u79cd\u64cd\u4f5c\uff0c\u53ea\u9700\u5f00\u4e00\u4e2a\u6570\u7ec4 $u$[$x$][$2$] \u6765\u8bb0\u5f55\u7b2c $x$ \u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u64cd\u4f5c $2$\u5c06\u8fd9\u6761\u8fb9\u6807\u8bb0\u4e3a $0$\uff0c\u610f\u4e3a\u767d\u8fb9\uff0c\u64cd\u4f5c $1$ \u5c31\u628a\u8fd9\u6761\u8fb9\u6807\u8bb0\u4e3a $1$\uff0c\u610f\u4e3a\u9ed1\u8fb9\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c(\u4e5f\u53ef\u4ee5\u662f\u6700\u5c0f\u503c)\uff0c\u8be2\u95ee\u65f6\u5f53$sum$[$k$]==$r$-$l$+$1$ \u65f6\u8bf4\u660e\u8fd9\u4e2a\u533a\u95f4\u5185\u6240\u6709\u8fb9\u90fd\u662f\u9ed1\u8fb9\uff0cans+=sum[k]\uff0c\u5426\u5219\u81f3\u5c11\u6709 $1$ \u6761\u8fb9\u662f\u767d\u8fb9\uff0c\u8f93\u51fa-1\u3002\n\n$\\quad$\u4e0b\u9762\u8d34\u51faAC\u4ee3\u7801\uff0c\u5efa\u8bae\u53cd\u590d\u9605\u8bfb\uff0c\u6df1\u523b\u7406\u89e3\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define il inline\n#define inf 1e18\n#define next nne\n#define re register int\nusing namespace std;\nil int read()\t\t//\u5feb\u901f\u8bfb\u5165\n{\n\tint x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n    return x*f;\n}\nil void print(int x)\t//\u5feb\u901f\u8f93\u51fa\n{\n\tif(x<0)putchar('-'),x=-x;\n    if(x/10)print(x/10);\n    putchar(x%10+'0');\n}\nconst int N=3e5+5;\nint n,m,next[N<<1],go[N<<1],head[N],tot,u[N][2],sum[N<<2];\nint seg[N],son[N],father[N],top[N],size[N],dep[N],ans;\nil void Add(int x,int y)\n{\n  next[++tot]=head[x];\n  head[x]=tot;\n  go[tot]=y;\n}\nil void dfs1(int x,int fa)\n{\n  father[x]=fa;dep[x]=dep[fa]+1;size[x]=1;\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==fa)continue;\n      dfs1(y,x);\n      size[x]+=size[y];\n      if(size[y]>size[son[x]])son[x]=y;\n    }\n}\nil void dfs2(int x,int topf)\n{\n  top[x]=topf;seg[x]=++seg[0];\n  if(!son[x])return;\n  dfs2(son[x],topf);\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(top[y])continue;\n      dfs2(y,y);\n    }\n}\nil void build(int k,int l,int r)//\u5efa\u6811\uff0c\u6bcf\u4e2a\u70b9\u521d\u59cb\u4e3a1\uff0c\u6bcf\u6761\u8fb9\u90fd\u662f\u9ed1\u8fb9\n{\n  if(l==r){sum[k]=1;return;}\n  int mid=l+r>>1;\n  build(k<<1,l,mid);build(k<<1|1,mid+1,r);\n  sum[k]=sum[k<<1]+sum[k<<1|1];\n}\nil void change(int k,int l,int r,int x,int z)\n{\n  if(z&&sum[k]==r-l+1)return;\n  if(l==r){sum[k]=z;return;}\n  int mid=l+r>>1;\n  if(x<=mid)change(k<<1,l,mid,x,z);\n  else change(k<<1|1,mid+1,r,x,z);\n  sum[k]=sum[k<<1]+sum[k<<1|1];\n}\nil bool query1(int k,int l,int r,int x,int y)\n{\n  if(x<=l&&y>=r){if(sum[k]==r-l+1){ans+=sum[k];return 1;}return 0;}\t\t//\u7edf\u8ba1\u7b54\u6848\n  int mid=l+r>>1;\n  if(x<=mid)if(!query1(k<<1,l,mid,x,y))return 0;\n  if(y>mid)if(!query1(k<<1|1,mid+1,r,x,y))return 0;\n  return 1;\n}\nil void change1(int x,int z)\n{\n  int xx=u[x][0],yy=u[x][1];\n  if(father[xx]==yy)change(1,1,n,seg[xx],z);\t//\u4fee\u6539\u513f\u5b50\u8282\u70b9\n  else change(1,1,n,seg[yy],z);\n}\nil bool query(int x,int y)\n{\n  int fx=top[x],fy=top[y];\n  while(fx!=fy)\n    {\n      if(dep[fx]<dep[fy])swap(x,y),swap(fx,fy);\n      if(!query1(1,1,n,seg[fx],seg[x]))return 0;\n      x=father[fx];fx=top[x];\n    }\n  if(dep[x]>dep[y])swap(x,y);\n  if(seg[x]+1<=seg[y])if(!query1(1,1,n,seg[x]+1,seg[y]))return 0;\t\t//\u8bb0\u5f97seg[x]+1\n  return 1;\n}\nsigned main()\n{\n  n=read();\n  for(re i=1;i<n;i++){re x=read(),y=read();u[i][0]=x;u[i][1]=y;Add(x,y);Add(y,x);}\n  dfs1(1,0);dfs2(1,1);build(1,1,n);tot=0;m=read();\n  while(m--)\n    {\n      re k=read(),x=read();\n      if(k==1)change1(x,1);\n      else if(k==2)change1(x,0);\n      else {re y=read();ans=0;if(query(x,y))print(ans);else print(-1);putchar('\\n');}\t//ans\u8bb0\u5f97\u8981\u6e05\u96f6\n    }\n  return 0;\n}\n\n```\n$$\\text{\u540e\u8bdd}$$\n\n$\\quad$\u6b64\u9898\u548c[P3950 \u90e8\u843d\u51b2\u7a81](https://www.luogu.com.cn/problem/P3950)\u5f88\u50cf\uff0c\u90a3\u9898\u4e5f\u6709[\u6211\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/Farkas/solution-p3950)\uff0c\u6b22\u8fce\u652f\u6301\u3002\n\n$\\quad$\u8c22\u8c22\u89c2\u8d4f\uff0c\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u70b9\u4e2a\u8d5e\u5427\uff01",
        "postTime": 1604288959,
        "uid": 109220,
        "name": "Farkas_W",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF165D \u3010Beard Graph\u3011"
    },
    {
        "content": "\u6811\u4e0a\u5bf9\u94fe\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\n\n\u628a\u70b9\u6743\u4e0b\u63a8\u5230\u540c\u4e00\u6761\u8fb9\u4e0a\u6df1\u5ea6\u66f4\u5927\u7684\u70b9\n\n\u9ed1\u8fb9\u5c06\u5bf9\u5e94\u70b9\u6743\u8d4b\u4e3a0\uff0c\u767d\u8fb9\u5c06\u5bf9\u5e94\u70b9\u6743\u8d4b\u4e3a1\n\n\u4e00\u6761\u91cd\u94fe\u4e0a\u9ed1\u70b9\u7684\u4e2a\u6570\u4e3adfn[]-dfn[top[]]+1\n\n\u5982\u679c\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u70b9\u6743\u7684\u548c\u5927\u4e8e0\uff0c\u8bf4\u660e\u6709\u767d\u8fb9\n\n\u4e24\u70b9\u95f4LCA\u6240\u4ee3\u8868\u7684\u8fb9\u4e0d\u5728\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u4e0a\uff0c\u5728\u7edf\u8ba1\u65f6\u9700\u8981\u53bb\u9664\n```cpp\n#include<cstdio>\nusing namespace std;\nint n,m,opt,x,y,cnt,tot,u[100010],v[100010],h[100010],dad[100010],top[100010],dep[100010],size[100010],son[100010],id[100010],out;\nchar c;\nstruct Edge\n{\n\tint to,next;\n}e[200010];\nstruct SegT\n{\n\tint s;\n}t[400010];\nint read()\n{\n\tout=0,c=getchar();\n\twhile(c<48||c>57){c=getchar();}\n\twhile(c>=48&&c<=57){out=(out<<3)+(out<<1)+(c&15),c=getchar();}\n\treturn out;\n}\nvoid Add(int x,int y)\n{\t\n\te[++cnt].next=h[x],\n\te[cnt].to=y,\n\th[x]=cnt;\n}\nvoid DFS1(int x)\n{\n\tdep[x]=dep[dad[x]]+1,size[x]=1;\n\tfor(int i=h[x];i;i=e[i].next)\n\t{\n\t\tint y=e[i].to;\n\t\tif(y^dad[x])\n\t\t{\n\t\t\tdad[y]=x;\n\t\t\tDFS1(y);\n\t\t\tsize[x]+=size[y],\n\t\t\tson[x]=size[y]>size[son[x]]?y:son[x];\n\t\t}\n\t}\n}\nvoid DFS2(int x)\n{\n\tid[x]=++tot,\n\ttop[x]=x==son[dad[x]]?top[dad[x]]:x;\n\tif(!son[x]){return;}\n\tDFS2(son[x]);\n\tfor(int i=h[x];i;i=e[i].next)\n\t{\n\t\tint y=e[i].to;\n\t\tif(y^dad[x]&&y^son[x]){DFS2(y);}\n\t}\n}\nvoid DFS(int x)\n{\n\tDFS1(x);\n\tDFS2(x);\n}\nvoid Pushup(int k)\n{\n\tt[k].s=t[k<<1].s+t[k<<1|1].s;\n}\nvoid Change(int k,int l,int r,int p,int x)\n{\n\tif(l==r)\n\t{\n\t\tt[k].s=x;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif(p<=mid){Change(k<<1,l,mid,p,x);}\n\telse{Change(k<<1|1,mid+1,r,p,x);}\n\tPushup(k);\n}\nint Query(int k,int l,int r,int ll,int rr)\n{\n\tif(r<ll||rr<l){return 0;}\n\tif(ll<=l&&r<=rr){return t[k].s;}\n\tint mid=l+r>>1;\n\treturn Query(k<<1,l,mid,ll,rr)+Query(k<<1|1,mid+1,r,ll,rr);\n}\nint LCA(int x,int y)\n{\n\tint ans=0,now;\n\twhile(top[x]^top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]){x^=y,y^=x,x^=y;}\n\t\tnow=Query(1,1,n,id[top[x]],id[x]);\n\t\tif(now){return -1;}\n\t\tans+=id[x]-id[top[x]]+1,\n\t\tx=dad[top[x]];\n\t}\n\tif(dep[x]>dep[y]){x^=y,y^=x,x^=y;}\n\tnow=Query(1,1,n,id[x]+1,id[y]);\n\tif(now){return -1;}\n\tans+=id[y]-id[x];\n\treturn ans;\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tu[i]=read(),v[i]=read();\n\t\tAdd(u[i],v[i]);Add(v[i],u[i]);\n\t}\n\tDFS(1);\n\tm=read();\n\twhile(m--)\n\t{\n\t\topt=read();\n\t\tif(opt==1)\n\t\t{\n\t\t\tx=read();\n\t\t\tif(dep[u[x]]>dep[v[x]]){Change(1,1,n,id[u[x]],0);}\n\t\t\telse{Change(1,1,n,id[v[x]],0);}\n\t\t}\n\t\tif(opt==2)\n\t\t{\n\t\t\tx=read();\n\t\t\tif(dep[u[x]]>dep[v[x]]){Change(1,1,n,id[u[x]],1);}\n\t\t\telse{Change(1,1,n,id[v[x]],1);}\n\t\t}\n\t\tif(opt==3)\n\t\t{\n\t\t\tx=read(),y=read();\n\t\t\tprintf(\"%d\\n\",LCA(x,y));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1570715284,
        "uid": 14378,
        "name": "doby",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF165D \u3010Beard Graph\u3011"
    },
    {
        "content": "### \u4fee\u6539\u4e86\u4e00\u4e9b\u5c0f\u9519\u8bef\u3002\n\n\u8fd9\u5176\u5b9e\u5c31\u662f\u4e00\u9053\u6811\u5256\u7684\u6c34\u9898\u3002\n\n\u6211\u4eec\u7684\u7a0b\u5e8f\u9700\u8981\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\u3002\n\n- `1 x`\uff0c\u5c06\u7b2c $x$ \u6761\u8fb9\u53d8\u4e3a\u9ed1\u8fb9\u3002\n- `2 x`\uff0c\u5c06\u7b2c $x$ \u6761\u8fb9\u53d8\u4e3a\u767d\u8fb9\u3002\n- `3 x y`\uff0c\u8be2\u95ee $x \\to y$ \u8def\u5f84\u4e0a\u662f\u5426\u6709\u767d\u8fb9\uff0c\u6709\u7684\u8bdd\uff0c\u8f93\u51fa `-1`\uff0c\u5426\u5219\u8f93\u51fa $x \\to y$ \u7684\u9ed1\u8fb9\u6570\u91cf\u3002\n\n\u524d\u4e24\u4e2a\u64cd\u4f5c\u90fd\u7528\u4e00\u4e2a\u51fd\u6570 `update` \u6765\u7ef4\u62a4\u3002\u552f\u4e00\u7684\u5c0f\u95ee\u9898\u662f\uff0c\u8fd9\u9898\u662f\u8fb9\u6743\uff0c\u4e0d\u597d\u8f6c\u5316\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5148\u5c06\u8fb9\u6743\u8f6c\u4e3a\u70b9\u6743\uff0c\u518d\u5199\u4e2a\u6811\u5256\u3002\n\n```cpp\nvoid update(int L, int R, int l, int r, int k, int v){\n//v\u8868\u793a\u5f53\u524d\u66f4\u65b0\u7684\u8fb9\u8981\u53d8\u6210\u9ed1\u8fb9(1)\u8fd8\u662f\u767d\u8fb9(0)\u3002\n\tif(L<=l&&r<=R){\n\t\ttree[k]=v;//\u9ed1\u8fb9\u6570\u91cf\u603b\u548c\u3002\n\t\tmaxx[k]=!v;\n//maxx[k]\u8868\u793ak\u53f7\u70b9\u533a\u95f4\u5185\u7684\u6700\u5927\u503c\u3002maxx[k]=1\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u6709\u767d\u8fb9\uff0c\u5426\u5219\u8868\u793a\u6ca1\u6709\u767d\u8fb9\u3002\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tif(L<=mid) update(L,R,l,mid,k<<1,v);\n\tif(R>mid) update(L,R,mid+1,r,k<<1|1,v);\n\ttree[k]=tree[k<<1]+tree[k<<1|1];\n\tmaxx[k]=max(maxx[k<<1],maxx[k<<1|1]);//\u8bb0\u5f97\u8981\u66f4\u65b0\uff01\uff01\uff01\n\treturn ;\n}\n```\n\n\u5904\u7406\u5b8c\u524d\u4e24\u4e2a\u64cd\u4f5c\u540e\uff0c\u518d\u6765\u770b\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u3002\n\n\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u67e5\u8be2\u64cd\u4f5c\u3002\u67e5\u8be2 $x \\to y$ \u7684\u8fb9\u4e0a\u662f\u5426\u6709\u767d\u8fb9\u3002\n\n\u8fd9\u91cc\u53ef\u4ee5\u5148\u7528\u6811\u94fe\u5256\u5206\u6c42\u89e3\u3002\u81f3\u4e8e\u6811\u94fe\u5256\u5206\uff0c\u8fd9\u91cc\u4e0d\u518d\u8be6\u89e3\u3002\n\n\u6811\u94fe\u5256\u5206\u4ee3\u7801:\n\n```cpp\ninline int dfs1(int now, int fath){\n\tfa[now]=fath;//\u8bb0\u5f55\u5f53\u524d\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u3002\n\tsiz[now]=1;//siz[x]\u8868\u793a\u5728\u4ee51\u4e3a\u6574\u68f5\u6811\u7684\u6839\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\u3002\n\tde[now]=de[fath]+1;//\u8bb0\u5f55\u6df1\u5ea6\u3002\n\tint maxn=-1;\n\tfor(RI i=head[now];i;i=nxt[i]){\n\t\tif(to[i]==fath) continue;\n\t\tsiz[now]+=dfs1(to[i],now);\n\t\tif(siz[to[i]]>maxn){\n\t\t\tmaxn=siz[to[i]];\n\t\t\tson[to[i]]=to[i];//\u66f4\u65b0\u91cd\u513f\u5b50\u3002\n\t\t}\n\t}\n\treturn siz[now];\n}\ninline void dfs2(int now, int _top){\n\ttop_[now]=_top;//\u8bb0\u5f55\u94fe\u9876\n\tid[now]=++tot;//\u5c06\u6bcf\u4e2a\u8282\u70b9\u91cd\u65b0\u6807\u53f7\u3002\n\tif(!son[now]) return ;//\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u76f4\u63a5\u9000\u51fa\u3002\n\tdfs2(son[now],_top);//\u987a\u7740\u91cd\u513f\u5b50\u7ee7\u7eed\u627e\u3002\n\tfor(RI i=head[now];i;i=nxt[i]){\n\t\tif(to[i]==fa[now]||to[i]==son[now]) continue;\n\t\tdfs2(to[i],to[i]);\n\t}\n\treturn ;\n}\ninline int Qquery(int x, int y){\n\tint res=0, now=0;\n\twhile(top_[x]!=top_[y]){//\u5982\u679cx,y\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u3002\n\t\tif(de[top_[x]]<de[top_[y]]) swap(x,y);\n\t\tres+=query(id[top_[x]],id[x],1,n,1);\n\t\tnow+=Mquery(id[top_[x]],id[x],1,n,1);//\u8bb0\u5f55\u4e00\u4e0b\u672c\u6b21\u79fb\u52a8\u5f97\u5230\u7684\u7b54\u6848\u3002\n\t\tx=fa[top_[x]];//\u8ba9\u6df1\u5ea6\u5927\u7684\u5411\u4e0a\u79fb\u3002\n\t}\n\tif(id[x]>id[y]) swap(x,y);\n\tres+=query(id[x]+1,id[y],1,n,1);//\u8fd9\u91cc\u662f\u8fb9\u6743\uff0c\u6240\u4ee5\u662fid[x]=1\n\tnow+=Mquery(id[x]+1,id[y],1,n,1);//\u6700\u540e\u8fd8\u8981\u6765\u4e00\u6b21\u3002\n\tif(now) return -1;//\u8fd9\u91cc\uff01\uff01\uff01\u5982\u679cnow=0\uff0c\u8bf4\u660e x -> y \u8def\u5f84\u4e0a\u6ca1\u6709\u767d\u8fb9\u3002\u5426\u5219\uff0c\u8bf4\u660e\u6709\u767d\u8fb9\u3002\n\treturn res;\n}\n```\n\n ### \u8c22\u8c22\uff01\uff01\uff01",
        "postTime": 1598337103,
        "uid": 261914,
        "name": "Emy_Ycc",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF165D \u3010Beard Graph\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u6709\u4e00\u4e2a $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u989c\u8272\uff1a\u9ed1\u8272\u6216\u767d\u8272\u3002\u6709 $q$ \u4e2a\u8be2\u95ee\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u4f60\u9700\u8981\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u989c\u8272\uff0c\u6216\u8005\u56de\u7b54\u6811\u4e0a\u4e24\u4e2a\u8282\u70b9 $x$ \u548c $y$ \u4e4b\u95f4\u7684\u552f\u4e00\u8def\u5f84\u4e0a\u662f\u5426\u6240\u6709\u8fb9\u90fd\u662f\u9ed1\u8272\uff0c\u7136\u540e\u8f93\u51fa\u8fd9\u4e24\u4e2a\u70b9\u5728\u6811\u4e0a\u7684\u8ddd\u79bb\u3002\n\n\u8fd9\u662f\u6811\u94fe\u5256\u5206\u7684\u6a21\u677f\u9898\u3002\u5982\u679c\u60a8\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u6811\u94fe\u5256\u5206\uff0c\u8bf7\u60a8\u9605\u8bfb [\u6811\u94fe\u5256\u5206\u5165\u95e8](https://oi-wiki.org/graph/heavy-light-decomposition/)\u3002\n\n\u6811\u94fe\u5256\u5206\u80fd\u89e3\u51b3\u7684\u95ee\u9898\u5f80\u5f80\u90fd\u662f\u6743\u503c\u5728\u8282\u70b9\u4e0a\u7684\u60c5\u51b5\uff0c\u7136\u540e\u5c06\u6811\u5229\u7528\u8f7b\u91cd\u8def\u5f84\u62c6\u5206\u6210\u4e00\u6761\u94fe\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5e76\u4fee\u6539\u67e5\u8be2\u533a\u95f4\u4fe1\u606f\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u7684**\u6743\u503c\u662f\u51fa\u5728\u6811\u8fb9\u4e0a**\u7684\u3002\u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u89e3\u6cd5\uff0c\u6307\u5b9a\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u7136\u540e\u5c06\u8fb9\u6743\u5206\u914d\u5230\u53e6\u5916\u7684 $n-1$ \u4e2a\u8282\u70b9\u4e0a\u3002\u6709\u8fd9\u6837\u4e00\u79cd\u5206\u914d\u65b9\u5f0f\uff0c\u5c06\u8fb9\u6743\u5206\u914d\u7ed9\u4e00\u6761\u8fb9\u6240\u8fde\u4e24\u4e2a\u70b9\u5728\u6709\u6839\u6811\u4e0a\u6df1\u5ea6\u66f4\u5927\u7684\u90a3\u4e2a\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u4f1a\u91cd\u590d\u4e14\u65e0\u9057\u6f0f\u5730\u5206\u914d\u5230\u6240\u6709\u5176\u4ed6\u70b9\u4e0a\u3002\n\n\u5728\u8fdb\u884c\u6811\u94fe\u5256\u5206\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u67e5\u8be2\u4e24\u4e2a\u8282\u70b9 $x$ \u548c $y$ \u4e4b\u95f4\u7684\u8def\u5f84\u65f6\uff0c\u4f1a\u591a\u4f59\u8ba1\u7b97 $LCA(x,y)$ \u5230\u5b83\u7684\u7236\u4eb2\u8fd9\u6761\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6c42\u51fa\u8fd9\u4e24\u4e2a\u70b9\u7684LCA\uff0c\u7136\u540e\u5728\u6c42\u5f97\u7684\u7b54\u6848\u4e2d\u51cf\u53bb\u8fd9\u4e2a\u503c\u3002\n\n\u5728\u6811\u94fe\u5256\u5206\u65f6\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u8fd9\u6837\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff1a\n\n1.\u5355\u70b9\u4fee\u6539\u4e00\u4e2a\u8282\u70b9\u7684\u503c\uff0c0\u62161\uff0c0\u4ee3\u8868\u8fd9\u6761\u8fb9\u4e3a\u9ed1\u8272\uff0c1\u4ee3\u8868\u8fd9\u6761\u8fb9\u4e3a\u767d\u8272\uff1b\n\n2.\u67e5\u8be2\u533a\u95f4\u548c\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u53ea\u9700\u67e5\u8be2\u8fd9\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u6743\u503c\u548c\uff0c\u5982\u679c\u662f0\uff0c\u4ee3\u8868\u5b58\u5728\u4e00\u6761\u5168\u662f\u9ed1\u8272\u7684\u8def\u5f84\uff0c\u5219\u8f93\u51fa $depth(a)+depth(b)-2\\times depth(LCA(a,b))$\u3002\u5426\u5219\u8f93\u51fa-1.\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define lc o<<1\n#define rc o<<1|1\nusing namespace std;\ntypedef int ll;\nconst int maxn=200010;\nint n,m,op,a,b,x[maxn],y[maxn],lg[maxn];\nint cur,h[maxn],nxt[maxn],p[maxn];\nint siz[maxn],top[maxn],son[maxn],dep[maxn],fa[maxn][20],tid[maxn],rnk[maxn],cnt;\ninline void add_edge(int x,int y)\n{\n\tcur++;\n\tnxt[cur]=h[x];\n\th[x]=cur;\n\tp[cur]=y;\n}\nvoid dfs1(int o)\n{\n\tsiz[o]=1;son[o]=-1;\n\tfor(int j=h[o];j;j=nxt[j])if(!dep[p[j]])\n\t{\n\t\tdep[p[j]]=dep[o]+1;\n\t\tfa[p[j]][0]=o;\n\t\tdfs1(p[j]);\n\t\tsiz[o]+=siz[p[j]];\n\t\tif(son[o]==-1||siz[p[j]]>siz[son[o]])son[o]=p[j];\n\t}\n}\nvoid dfs2(int o,int t)\n{\n\ttop[o]=t;cnt++;tid[o]=cnt;rnk[cnt]=o;\n\tif(son[o]==-1)return;\n\tdfs2(son[o],t);\n\tfor(int j=h[o];j;j=nxt[j])if(p[j]!=son[o]&&p[j]!=fa[o][0])dfs2(p[j],p[j]);\n}\nstruct SegTree\n{\n\tstruct SegTreeNode{ll Val=0,AddMark=0;}SegTree[maxn*4];\n\tvoid Update(int o,int l,int r,int ul,int ur,ll AddVal)\n\t{\n\t\tif(l>ur||r<ul)return;\n\t\tif(l>=ul&&r<=ur)\n\t\t{\n\t\t\tSegTree[o].AddMark+=AddVal;\n\t\t\tSegTree[o].Val+=AddVal*(r-l+1);\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(SegTree[o].AddMark!=0)\n\t\t{\n\t\t\tSegTree[o*2].AddMark+=SegTree[o].AddMark;\n\t\t\tSegTree[o*2+1].AddMark+=SegTree[o].AddMark;\n\t\t\tSegTree[o*2].Val+=SegTree[o].AddMark*(mid-l+1);\n\t\t\tSegTree[o*2+1].Val+=SegTree[o].AddMark*(r-mid);\n\t\t\tSegTree[o].AddMark=0;\n\t\t}\n\t\tUpdate(o*2,l,mid,ul,ur,AddVal);\n\t\tUpdate(o*2+1,mid+1,r,ul,ur,AddVal);\n\t\tSegTree[o].Val=(SegTree[o*2].Val+SegTree[o*2+1].Val);\n\t}\n\tll Query(int o,int l,int r,int ql,int qr)\n\t{\n\t\tif(ql>r||qr<l)return 0;\n\t\tif(ql<=l&&qr>=r)return SegTree[o].Val;\n\t\tint mid=(l+r)>>1;\n\t\tif(SegTree[o].AddMark!=0)\n\t\t{\n\t\t\tSegTree[o*2].AddMark+=SegTree[o].AddMark;\n\t\t\tSegTree[o*2+1].AddMark+=SegTree[o].AddMark;\n\t\t\tSegTree[o*2].Val+=SegTree[o].AddMark*(mid-l+1);\n\t\t\tSegTree[o*2+1].Val+=SegTree[o].AddMark*(r-mid);\n\t\t\tSegTree[o].AddMark=0;\n\t\t}\n\t\treturn (Query(o*2,l,mid,ql,qr)+Query(o*2+1,mid+1,r,ql,qr));\n\t}\n}st;\nll query(int x,int y)\n{\n\tll ret=0,fx=top[x],fy=top[y];\n    while(fx!=fy)\n    {\n        if(dep[fx]>=dep[fy])ret+=st.Query(1,1,n,tid[fx],tid[x]),x=fa[fx][0];\n        else ret+=st.Query(1,1,n,tid[fy],tid[y]),y=fa[fy][0];\n        fx=top[x];fy=top[y];\n    }\n    if(x!=y)\n    {\n        if(tid[x]<tid[y])ret+=st.Query(1,1,n,tid[x],tid[y]);\n        else ret+=st.Query(1,1,n,tid[y],tid[x]);\n    }\n    else ret+=st.Query(1,1,n,tid[x],tid[y]);\n    return ret;\n}\nint LCA(int x,int y)\n{\n\tif(dep[x]>dep[y])swap(x,y);\n\tint k=dep[y]-dep[x];\n\tfor(int i=0;k;k>>=1,i++)if(k&1)y=fa[y][i];\n\tif(x==y)return x;\n\tk=dep[x];\n\tfor(int i=lg[k];i>=0;i--)if(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++)scanf(\"%d%d\",x+i,y+i),add_edge(x[i],y[i]),add_edge(y[i],x[i]);\n\tdep[1]=1;dfs1(1);dfs2(1,1);\n\tfor(int i=1;i<=n;i++)lg[i]=lg[i>>1]+1;\n\tfor(int i=1;i<=lg[n];i++)for(int j=1;j<=n;j++)fa[j][i]=fa[fa[j][i-1]][i-1];\n\tscanf(\"%d\",&m);\n\twhile(m--)\n\t{\n\t\tscanf(\"%d\",&op);\n\t\tif(op==3)\n\t\t{\n\t\t\tscanf(\"%d%d\",&a,&b);\n\t\t\tint t=LCA(a,b);\n\t\t\t//printf(\"j %d %d %d\\n\",a,b,t);\n\t\t\t//printf(\"%d %d\\n\",query(a,b),st.Query(1,1,n,t,t));\n\t\t\tif(query(a,b)-st.Query(1,1,n,tid[t],tid[t]))printf(\"-1\\n\");\n\t\t\telse printf(\"%d\\n\",dep[a]+dep[b]-dep[t]*2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\",&a);\n\t\t\tif(fa[x[a]][0]==y[a])a=x[a];\n\t\t\telse a=y[a];\n\t\t\tif(op==1)if(st.Query(1,1,n,tid[a],tid[a])==1)\n\t\t\tst.Update(1,1,n,tid[a],tid[a],-1);\n\t\t\tif(op==2)if(st.Query(1,1,n,tid[a],tid[a])==0)\n\t\t\tst.Update(1,1,n,tid[a],tid[a],1);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1537884277,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF165D \u3010Beard Graph\u3011"
    },
    {
        "content": "- ~~\u6700\u8fd1\u53d1\u73b0\u5f88\u591a\u6811\u94fe\u5256\u5206\u7684\u9898\u76ee\u90fd\u53ef\u4ee5\u4f7f\u7528O(mlogn)\u7684DFS\u5e8f\u89e3\u6cd5~~\n## \u6b63\u9898\n- \u5728\u9605\u8bfb\u672c\u9898\u89e3\u524d\uff0c\u8bf7\u786e\u4fdd\u81ea\u5df1\u5df2\u7ecf\u4f1a\u8fd9\u9898\u7684$O(mlog^2n)$\u505a\u6cd5\n- \u901a\u8fc7\u4ed4\u7ec6\u9605\u8bfb\u9898\u76ee\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u9053\u9898\u9700\u8981\u6211\u4eec\u5e72\u4e09\u4ef6\u4e8b\n   1. \u7ed9\u6811\u4e0a\u7684\u4e00\u6761\u8fb9+1\uff0c\u6216-1\n   2. \u6c42\u6811\u4e0a\u7684\u8def\u5f84\u548c\n   3. \u6c42\u6811\u4e0a\u8def\u5f84\u957f\u5ea6\n- \u9996\u51483\u5c31\u662f $dep[x]+dep[y]-2*dep[LCA(x,y)]$,\u4f7f\u7528\u6811\u94fe\u5256\u5206\u6c42LCA\u53ef\u4ee5\u505a\u5230$O(mlogn)$\n- \u800c1,2\u64cd\u4f5c\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u6811\u94fe\u5256\u5206\u662f$O(mlog^2n)$\u7684(\u53c2\u89c1\u6811\u94fe\u5256\u5206\u6a21\u677f)\uff0c\u4e5f\u662f\u8fd9\u9898\u7684\u74f6\u9888\u6240\u5728\uff0c\u90a3\u4e48\u6709\u6ca1\u6709$O(mlogn)$\u7684\u89e3\u6cd5($LCT$\u5e38\u6570\u5927\uff0c\u53ef\u80fd\u8fd8\u4e0d\u5982\u6811\u5256)\u5462\uff1f\n- \u4e8b\u5b9e\u4e0a\u662f\u5b58\u5728\u7684\uff0c\u6211\u4eec\u8003\u8651\u4ee5\u4e0b\u4e09\u4ef6\u4e8b\uff1a\n   1. $valsum(x,y)$\n   $=valsum(x,LCA(x,t))+valsum(y,LCA(x,y))$\n   $=valsum(x,1)-valsum(LCA(x,y),1)+valsum(y,1)-valsum(LCA(x,y),1)$\n   2. \u7531\u4e8e\u5b50\u6811\u7684$DFS$\u5e8f\u8fde\u7eed\uff0c\u6240\u4ee5\u4f7f\u7528\u6811\u94fe\u5256\u5206\u89e3\u51b3\u6811\u4e0a\u7684\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u5b50\u6811\u548c\u7684\u9898\u76ee\u53ef\u4ee5$O(mlogn)$\n   3. \u4ee5\u4e0b\u4e24\u4e2a\u95ee\u9898\u662f\u7b49\u4ef7\u7684\n      1. \u64cd\u4f5c1\uff1a\u7ed9\u70b9$x$\u7684\u503c\u52a0$a$\uff0c\u64cd\u4f5c2\uff1a\u67e5\u8be2\u70b9$y$\u5230\u70b9$1$\u7684\u548c\n      1. \u64cd\u4f5c1\uff1a\u7ed9\u4ee5$x$\u4e3a\u6839\u7684\u5b50\u6811\u52a0$a$\uff0c\u64cd\u4f5c2\uff1a\u67e5\u8be2\u70b9$y$\u7684\u503c\n- \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5$O(mlogn)$\u89e3\u51b3\u6811\u94fe\u5256\u5206\u95ee\u9898\u4e86",
        "postTime": 1564477073,
        "uid": 41485,
        "name": "HybridTheory",
        "ccfLevel": 9,
        "title": "CF165D Beard Graph"
    },
    {
        "content": "\u601d\u8def\uff1a\u5c06\u9ed1\u8fb9\u6807\u8bb0\u4e3a1\uff0c\u767d\u8fb9\u6807\u8bb0\u4e3a100000\uff0c\u6811\u94fe\u5256\u5206\n\n\u5982\u679c\u67e5\u8be2\u65f6ans\u8d85\u8fc7100000\uff0c\u90a3\u5c31\u6709\u767d\u8fb9\uff0c\u8f93\u51fa-1\uff0c\u4e0d\u7136\u76f4\u63a5\u8f93\u51faans\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 800001\n#define int long long\n#define L(x) (x<<1)\n#define R(x) ((x<<1)|1)\nusing namespace std;\nint tree[maxn],tag[maxn];\nint rev[maxn],dep[maxn],size[maxn],seg[maxn],top[maxn],son[maxn],father[maxn];\nint n,m,root,x,y,z,a[maxn],tot,mode;\nint cnt,from[maxn],to[maxn],Next[maxn],head[maxn];\nint Gx,Gy,Gz,Gd;\nint fa[maxn],X[maxn],Y[maxn],Z[maxn];\nvoid add(int x,int y){\n    cnt++;\n    from[cnt]=x;to[cnt]=y;\n    Next[cnt]=head[x];head[x]=cnt;\n}\nvoid update(int node,int begin,int end,int x,int y,int val){\n    if(begin>y||end<x)return;\n    if(begin>=x&&end<=y){\n        tree[node]=val;\n        return;\n    }else{\n        int mid=(begin+end)>>1;\n        if(x<=mid)update(L(node),begin,mid,x,y,val);\n        if(y>mid) update(R(node),mid+1,end,x,y,val);\n        tree[node]=tree[L(node)]+tree[R(node)];\n    }\n}\nint query(int node,int begin,int end,int x,int y){\n    if(begin>=x&&end<=y){\n        return tree[node];\n    }else{\n        int mid=(begin+end)>>1,sum=0;\n        if(x<=mid)sum+=query(L(node),begin,mid,x,y);\n        if(y>mid) sum+=query(R(node),mid+1,end,x,y);\n        return sum;\n    }\n}\nint dfs1(int x){\n    size[x]=1;\n    dep[x]=dep[father[x]]+1;\n    for(int i=head[x];i!=-1;i=Next[i]){\n        int v=to[i],big=0;\n        if(father[x]==v)continue;\n        father[v]=x;\n        big=dfs1(v);\n        size[x]+=big;\n        if(big>size[son[x]])son[x]=v;\n    }\n    return size[x]; \n}\nvoid dfs2(int x){\n    if(son[x]){\n        seg[son[x]]=++seg[0];\n        top[son[x]]=top[x];\n        rev[seg[0]]=son[x];\n        dfs2(son[x]);\n    }\n    for(int i=head[x];i!=-1;i=Next[i]){\n        int v=to[i];\n        if(!top[v]){\n            seg[v]=++seg[0];\n            top[v]=v;\n            rev[seg[0]]=v;\n            dfs2(v);\n        }\n    }\n}\nint linkquery(int x,int y){\n    int fx=top[x],fy=top[y],ans=0;\n    while(fx!=fy){\n        if(dep[fx]<dep[fy])swap(x,y),swap(fx,fy);\n        ans+=query(1,1,seg[0],seg[fx],seg[x]);\n        x=father[fx];fx=top[x];\n    }\n    if(dep[x]>dep[y])swap(x,y);\n    ans+=query(1,1,seg[0],seg[x],seg[y]);\n    ans-=query(1,1,seg[0],seg[x],seg[x]);\n    return ans;\n}\nvoid change(int x,int y){\n    x*=2;\n    x=dep[from[x]]>dep[to[x]]?from[x]:to[x];\n    update(1,1,seg[0],seg[x],seg[x],y);\n}\nsigned main(){\n    memset(head,-1,sizeof(head));\n    scanf(\"%lld\",&n);root=1;\n    for(int i=1;i<=n-1;i++){\n        scanf(\"%lld%lld\",&x,&y);\n        add(x,y),add(y,x);\n    }\n    dfs1(root);\n    seg[root]=++seg[0];\n    rev[seg[0]]=root;\n    top[root]=root;\n    dfs2(root);\n    scanf(\"%lld\",&m);\n    for(int i=1;i<=n-1;i++)change(i,1);\n    for(int i=1;i<=m;i++){\n        scanf(\"%lld%lld\",&mode,&x);\n        if(mode==1)change(x,1);\n        if(mode==2)change(x,100000);\n        if(mode==3){\n            scanf(\"%lld\",&y);\n            int ans=0;\n            ans=linkquery(x,y);\n            if(ans>=100000)printf(\"-1\\n\");else\n            printf(\"%lld\\n\",ans);\n        }\n    }\n}\n```",
        "postTime": 1552988827,
        "uid": 58711,
        "name": "hyfhaha",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF165D \u3010Beard Graph\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u5927\u529blct\u4e0d\u662f\u5f88\u723d\u5417\n\n\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u68ee\u6797\uff0c\u4e0a\u9762\u7684\u70b9\u6709\u8fb9\u4ec5\u5f53\u539f\u6811\u4e2d\u6709\u9ed1\u8fb9\n\n\u90a3\u4e48\u67d3\u6210\u767d\u8272\u5c31\u662f\u4e2a$Cut$\n\n\u90a3\u4e48\u67d3\u6210\u9ed1\u8272\u5c31\u662f\u4e2a$Link$\n\n\u7ef4\u62a4\u4e2asize,\u67e5\u8be2\u5982\u679c\u4e24\u70b9\u4e0d\u8fde\u901a\u5c31\u8bf4\u660e\u6709\u767d\u8fb9\u8fd4\u56de-1\u5426\u5219split\u4e4b\u540e\u8f93\u51fasize-1\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6:$O((n+m) log n)$+~~\u5e38\u6570~~\n\n~~\u8dd1\u5f97\u6bd4\u4e24\u4e2alog\u7684\u6811\u5256\u7ebf\u6bb5\u6811\u8fd8\u6162~~\n```cpp\n#include<cstdio>\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch=getchar();bool f=0;\n\twhile (ch<48||ch>57){if (ch=='-')f=1;ch=getchar();}\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n\tif (f)in=-in;\n}\ntemplate<class type>inline const void write(type out)\n{\n\tif (out>9)write(out/10);\n\tputchar(out%10+48);\n}\ntemplate<class type>inline const void writeln(type out)\n{\n\tif (out<0)putchar('-'),out=-out;\n\twrite(out);\n\tputchar('\\n');\n}\ntemplate<class type>inline const void swap(type &a,type &b)\n{\n\ttype c=a;a=b;b=c;\n}\nconst int N=1e5+10;\nint n,m,u[N],v[N];\nclass Link_Cut_Tree\n{\n\tprivate:\n\t\tstruct tree\n\t\t{\n\t\t\tbool rev;\n\t\t\tint size,son[2],fa;\n\t\t\tinline const void reverse()\n\t\t\t{\n\t\t\t\trev^=1;swap(son[0],son[1]);\n\t\t\t}\n\t\t}t[N];\n\t\tinline const void pushup(int p)\n\t\t{\n\t\t\tt[p].size=t[t[p].son[0]].size+1+t[t[p].son[1]].size;\n\t\t}\n\t\tinline const void pushdown(int p)\n\t\t{\n\t\t\tif (t[p].rev)\n\t\t\t\tt[t[p].son[0]].reverse(),\n\t\t\t\tt[t[p].son[1]].reverse(),\n\t\t\t\tt[p].rev=0;\n\t\t}\n\t\tinline const bool identity(int p)\n\t\t{\n\t\t\treturn t[t[p].fa].son[1]==p;\n\t\t}\n\t\tinline const bool nroot(int p)\n\t\t{\n\t\t\treturn t[t[p].fa].son[0]==p||identity(p);\n\t\t}\n\t\tinline const void rotate(int p)\n\t\t{\n\t\t\tbool f=identity(p);\n\t\t\tint fa=t[p].fa,gfa=t[fa].fa,q=t[p].son[f^1];\n\t\t\tif (nroot(fa))t[gfa].son[identity(fa)]=p;\n\t\t\tt[t[p].son[f^1]=fa].son[f]=q;\n\t\t\tt[t[t[q].fa=fa].fa=p].fa=gfa;\n\t\t\tpushup(fa);\n\t\t}\n\t\tinline const void relieve(int p)\n\t\t{\n\t\t\tif (nroot(p))relieve(t[p].fa);\n\t\t\tpushdown(p);\n\t\t}\n\t\tinline const void splay(int p)\n\t\t{\n\t\t\trelieve(p);\n\t\t\tfor (int fa;nroot(p);rotate(p))\n\t\t\t\tif (nroot(fa=t[p].fa))\n\t\t\t\t\trotate(identity(p)^identity(fa)?p:fa);\n\t\t\tpushup(p);\n\t\t}\n\t\tinline const void access(int x)\n\t\t{\n\t\t\tfor (int y=0;x;x=t[y=x].fa)\n\t\t\t\tsplay(x),t[x].son[1]=y,pushup(x);\n\t\t}\n\t\tinline const void makeroot(int x)\n\t\t{\n\t\t\taccess(x);splay(x);t[x].reverse();\n\t\t}\n\t\tinline const void split(int x,int y)\n\t\t{\n\t\t\tmakeroot(x);access(y);splay(y);\n\t\t}\n\t\tinline const int findroot(int x)\n\t\t{\n\t\t\taccess(x);splay(x);\n\t\t\twhile (t[x].son[0])pushdown(x=t[x].son[0]);\n\t\t\tsplay(x);return x;\n\t\t}\n\tpublic:\n\t\tinline const void link(int x,int y)\n\t\t{\n\t\t\tif (findroot(x)==findroot(y))return;\n\t\t\tmakeroot(x);t[x].fa=y;\n\t\t}\n\t\tinline const void cut(int x,int y)\n\t\t{\n\t\t\tif (findroot(x)^findroot(y))return;\n\t\t\tsplit(x,y);\n\t\t\tif (t[y].size>2)return;\n\t\t\tt[y].son[0]=t[x].fa=0;\n\t\t\tpushup(y);\n\t\t}\n\t\tinline const int distance(int x,int y)\n\t\t{\n\t\t\tif (findroot(x)^findroot(y))return -1;\n\t\t\tsplit(x,y);return t[y].size-1;\n\t\t}\n}lct;\nint main()\n{\n\tread(n);\n\tfor (int i=1;i<n;i++)read(u[i]),read(v[i]),lct.link(u[i],v[i]);\n\tread(m);\n\tfor (int opt,x,y;m--;)\n\t\tswitch (read(opt),read(x),opt)\n\t\t{\n\t\t\tcase 1:lct.link(u[x],v[x]);break;\n\t\t\tcase 2:lct.cut(u[x],v[x]);break;\n\t\t\tcase 3:read(y);writeln(lct.distance(x,y));break;\n\t\t}\n\treturn 0;\n}\n```",
        "postTime": 1570840585,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF165D \u3010Beard Graph\u3011"
    },
    {
        "content": "\u9898\u610f\u5f88\u88f8\n\n\u4fee\u6539\u8fb9\u6743\uff0c\u8be2\u95ee\u9ed1\u8fb9\u6570\u91cf\n\n\u7c7b\u4f3c\u4e8e\u6c42\u8ddd\u79bb\uff1a$u$\u5230$v$\u7684\u9ed1\u8fb9\u6570\u91cf=$1$\u5230$u$\u7684\u9ed1\u8fb9\u6570\u91cf$+1$\u5230$v$\u7684\u9ed1\u8fb9\u6570\u91cf$-lca(u,v)$\u5230$1$\u7684\u9ed1\u8fb9\u6570\u91cf\n\n\u8003\u8651\u5c06\u4e00\u6761\u8fb9$u,v$\u53d8\u9ed1\uff0c\u76f8\u5f53\u4e8e\u5c06$v$\u5b50\u6811\u6bcf\u4e2a\u70b9\u5230\u6839\u9ed1\u8fb9\u6570$+1$\uff0c\n\n\u6240\u4ee5\u8bb0\u5f55$dfs$\u5e8f\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std ;\nint n , m ;\nconst int N = 1e5 + 10 ;\nstruct Edge { int u , v ; } edge[N] ;\nstruct node { int v , nxt ; } e[N << 1] ;\nint head[N] , cnt = 0 ;\ninline void add(int u , int v) { e[++ cnt] = {v , head[u]} ; head[u] = cnt ; }\nint sz[N] , d[N] , fa[N] , son[N] ;\ninline void dfs(int u) {\n    sz[u] = 1 ;\n    for(register int i = head[u] ; i ; i = e[i].nxt) {\n    \tint v = e[i].v ;\n    \tif(v == fa[u]) continue ;\n    fa[v] = u ;\n    d[v] = d[u] + 1 ;\n    dfs(v) ;\n    sz[u] += sz[v] ;\n    if(sz[v] > sz[son[u]]) son[u] = v ;\n\t}\n}\nint top[N] , id[N] , idx = 0 ;\n    inline void dfs(int u , int t) {\n      top[u] = t ; id[u] = ++ idx ;\n      if(son[u]) dfs(son[u] , t) ;\n      for(register int i = head[u] ; i ; i = e[i].nxt) {\n        int v = e[i].v ;\n        if(v == fa[u] || v == son[u]) continue ;\n        dfs(v , v) ;\n      }\n    }\n    struct Seg {\n      int sum[N << 2] ;\n      inline void build(int l , int r , int rt) {\n        sum[rt] = r - l + 1 ;\n        if(l == r) return ;\n        int mid = l + r >> 1 ;\n        build(l , mid , rt << 1) ;\n        build(mid + 1 , r , rt << 1 | 1) ;\n      }\n      inline void change(int x , int l , int r , int rt , int val) {\n        if(l == r) { sum[rt] = val ; return ; }\n        int mid = l + r >> 1 ;\n        if(x <= mid) change(x , l , mid , rt << 1 , val) ;\n        else change(x , mid + 1 , r , rt << 1 | 1 , val) ;\n        sum[rt] = sum[rt << 1] + sum[rt << 1 | 1] ;\n      }\n      inline int query(int a , int b , int l , int r , int rt) {\n        if(a <= l && r <= b) return sum[rt] ;\n        int mid = l + r >> 1 ;\n        int ans = 0 ;\n        if(a <= mid) ans += query(a , b , l , mid , rt << 1) ;\n        if(b > mid) ans += query(a , b , mid + 1 , r , rt << 1 | 1) ;\n        return ans ;\n      }\n    } s[3] ;\n    inline int query_black(int x , int y) {\n      int fx = top[x] , fy = top[y] ; int ans = 0 ;\n      while(fx ^ fy) {\n        if(d[fx] < d[fy]) swap(x , y) , swap(fx , fy) ;\n        ans += s[1].query(id[fx] , id[x] , 1 , n , 1) ;\n        x = fa[fx] , fx = top[x] ;\n      }\n      if(d[x] > d[y]) swap(x , y) ;\n      ans += s[1].query(id[x] + 1 , id[y] , 1 , n , 1) ;\n      return ans ;\n    }\n    inline int query_white(int x , int y) {\n      int fx = top[x] , fy = top[y] ; int ans = 0 ;\n      while(fx ^ fy) {\n        if(d[fx] < d[fy]) swap(x , y) , swap(fx , fy) ;\n        ans += s[2].query(id[fx] , id[x] , 1 , n , 1) ;\n        x = fa[fx] , fx = top[x] ;\n      }\n      if(d[x] > d[y]) swap(x , y) ;\n      ans += s[2].query(id[x] + 1 , id[y] , 1 , n , 1) ;\n      return ans ;\n    }\n    signed main() {\n      ios :: sync_with_stdio(false) ;\n      cin.tie(nullptr) ;\n      cout.tie(nullptr) ;\n      cin >> n ;\n      for(register int i = 1 ; i < n ; i ++) {\n        int u , v ;\n        cin >> u >> v ;\n        add(u , v) ;\n        add(v , u) ;\n        edge[i] = { u , v } ;\n      }\n      dfs(1) ; dfs(1 , 1) ;\n      s[1].build(1 , n , 1) ;\n      for(cin >> m ; m -- ; ) {\n        int opt ; cin >> opt ;\n        if(opt == 3) {\n          int x , y ; cin >> x >> y ;\n          if(! query_white(x , y))\n            cout << query_black(x , y) << '\\n' ;\n          else\n            cout << -1 << '\\n' ;\n        }\n        else {\n          int x ; cin >> x ;\n          int u = edge[x].u , v = edge[x].v ;\n          if(fa[u] == v) swap(u , v) ;\n          s[opt == 2 ? 1 : 2].change(id[v] , 1 , n , 1 , 0) ;\n          s[opt].change(id[v] , 1 , n , 1 , 1) ;\n        }\n      }\n      cout << '\\n' ;\n      return 0 ;\n    }\n```\n\n",
        "postTime": 1602597531,
        "uid": 262212,
        "name": "\u662f\u4e2a\u59b9\u5b50\u5566",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF165D \u3010Beard Graph\u3011"
    },
    {
        "content": "# \u9898\u76ee\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF165D)\n\n# \u9898\u89e3\n\n\u8fd9\u7c7b\u9898\u76ee\uff0c\u4e0d\u591a\u8bf4\u53ef\u4ee5\u76f4\u63a5\u4e0a\u6811\u5256\u677f\u5b50\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log ^2n)$\uff0c\u6b64\u5904\u4e0d\u4f5c\u8fc7\u591a\u8d58\u8ff0\uff0c\u6bd5\u7adf\u91cd\u70b9\u4e0d\u662f\u8fd9\u4e2a\u65b9\u6cd5\u3002\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u6709\u6bd4\u6811\u5256\u7684\u4fe9 $\\log$ \u66f4\u4f18\u7684\u89e3\u6cd5\uff0c\u4f46\u662f\u8fd8\u662f\u5229\u7528\u7ebf\u6bb5\u6811\u3002\n\n\u5206\u6790\u8fd9\u9053\u9898\u5b9e\u9645\u8981\u6211\u4eec\u5e72\u7684\u4e8b\u662f\u4ec0\u4e48\uff1a\n\n1. \u80fd\u591f\u4efb\u610f\u6539\u8fb9\u7684\u989c\u8272\uff1b\n2. \u8be2\u95ee\u4fe9\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4ee5\u53ca\u4fe9\u70b9\u8def\u5f84\u4e0a\u9ed1\u8fb9\u7684\u6570\u91cf\uff1b\n\n\u7531\u4e8e\u6240\u6709\u7684\u5de5\u4f5c\u90fd\u662f\u4e3a\u8be2\u95ee\u670d\u52a1\uff0c\u6211\u4eec\u5148\u8003\u8651\u600e\u4e48\u89e3\u51b3\u8be2\u95ee\u3002\n\n\u7531\u4e8e\u662f\u8be2\u95ee\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4ee5\u53ca\u9ed1\u8fb9\u6570\u91cf\uff0c\u6211\u4eec\u80fd\u591f\u8054\u60f3\u5230 $lca$\uff0c\u4ece $lca$ \u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8ddd\u79bb\u662f\u5f88\u597d\u89e3\u51b3\u7684\uff0c\u4f46\u662f\u9ed1\u8fb9\u6570\u91cf\uff1f\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u6c42\u8ddd\u79bb\u7684\u65b9\u6cd5\uff0c\u6765\u6c42\u9ed1\u8fb9\u7684\u6570\u91cf\uff0c\u8003\u8651\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u53d8\u6362\uff1a\n$$\n\\text{cnt_black}(u,v)=\\text{cnt_black}(u,1)+\\text{cnt_black}(v,1)-\\text{cnt_black}(lca,1)\n$$\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u9ed1\u8fb9\u6570\u91cf\uff0c\u6211\u4eec\u4fbf\u4ea6\u80fd\u6c42\u5f97\u4e24\u70b9\u95f4\u9ed1\u8fb9\u6570\u91cf\uff0c\u8003\u8651\u5bf9\u4e8e\u4e00\u6761\u8fb9 $(u,v)$\uff08\u5047\u5b9a $v$ \u66f4\u6df1\uff09\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u53d8\u9ed1\uff0c\u5373\u76f8\u5f53\u4e8e $v$ \u5b50\u6811\u5185\u90e8\u6574\u4f53\u5230\u6839\u7684\u9ed1\u8fb9\u6570\u52a0\u4e00\uff0c\u5bf9\u4e8e\u9ed1\u53d8\u767d\u540c\u7406\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u5f97\u5230\u6bcf\u4e2a\u70b9\u7684 $dfs$ \u5e8f\uff0c\u518d\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u9ed1\u8fb9\u6570\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$.\n\n# \u4ee3\u7801\n\n```cpp\nhttps://www.cnblogs.com/Arextre/p/13552974.html\n```\n\n",
        "postTime": 1598240693,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF165D \u3010Beard Graph\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u6c42\u95ee $m$ \u6b21\u8be2\u95ee:\n-  1 \uff1a\u628a\u7b2c $u$ \u6761\u8fb9\u6539\u6210\u9ed1\u8fb9\u3002\n-  2 \uff1a\u628a\u7b2c $u$ \u6761\u8fb9\u6539\u6210\u767d\u8fb9\u3002\n-  3 \uff1a\u82e5 $u$ \u53f7\u8282\u70b9\u548c $v$ \u53f7\u8282\u70b9\u95f4\u5b58\u5728\u767d\u8fb9\uff0c\u8f93\u51fa $-1$ \uff0c\u5426\u5219\u8f93\u51fa $u$ \u53f7\u8282\u70b9\u548c $v$ \u53f7\u8282\u70b9\u95f4\u7684\u9ed1\u8fb9\u6570\u3002\n## \u5206\u6790\n\u4e3b\u8981\u95ee\u9898\u662f\u5982\u4f55\u5feb\u901f\u7684\u533a\u5206\u662f\u5426\u6709\u767d\u8fb9\u3002\u5426\u5219\u5c31\u662f\u4e00\u4e2a\u88f8\u7684\u6811\u4e0a\u8ddd\u79bb\u3002\u8003\u8651\u7528\u6781\u503c\u6765\u5206\u522b\u9ed1\u767d\u3002\u8003\u8651\u5230\u6700\u591a\u53ea\u6709 $n-1$ \u4e2a\u9ed1\u8fb9\u3002\u6240\u4ee5\u53ea\u8981\u5c06\u767d\u8fb9\u8d4b\u503c\u4e3a $n$ \uff0c\u9ed1\u8fb9\u4e3a $1$ \u3002\u5f53 $ans\\ge n$ \u65f6\uff0c\u4e00\u5b9a\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n$$\nans =\\begin{cases}ans(ans\\le {n-1})\\\\ -1(ans\\ge n)\\end{cases}\n$$\n\u6216\u8005\u7528\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u6765\u5224\u65ad\uff0c\u9ed1\u8fb9\u6743\u503c\u4e3a $0$ \uff0c\u767d\u4e3a $1$ \u3002\n$$\nans =\\begin{cases}ans(sum =0)\\\\ -1(sum \\ge 1)\\end{cases}\n$$\n\u4ee3\u7801\u5c31\u53ea\u662f\u4e00\u4e2a\u94fe\u4e0a\u67e5\u8be2\u4e86\u3002\u8fd9\u91cc\u91c7\u7528 $LCT$ \u7684 $O(n\\log n)$ \u7684\u505a\u6cd5\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long \nconst int N = 4e5+100;\nconst int inf = 2e5+10;\nint c[N][2],f[N],n,m,val[N];\nlong long sum[N];\nbool r[N];\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x;\n}\ninline void write(int x)\n{\n\tif(x>9)write(x/10);\n    putchar(x%10+'0');\n}\n\nvoid pushr(int x)\n{\n\tswap(c[x][1],c[x][0]);\n\tr[x] ^= 1;\n}\nvoid pushdown(int x)\n{\n\tif(r[x])\n\t{\n\t\tif(c[x][1]) pushr(c[x][1]);\n\t\tif(c[x][0]) pushr(c[x][0]);\n\t\tr[x] = 0;\n\t}\t\t\n}\nvoid pushup(int x)\n{\n\tsum[x] = val[x];\n\tsum[x] += sum[c[x][1]] + sum[c[x][0]]; \n}\nbool nroot(int x)\n{\n\treturn c[f[x]][0] == x || c[f[x]][1] == x; \n}\nvoid rotate(int x)\n{\n\tint y = f[x],z = f[y],k = c[y][1] == x,w = c[x][!k];\n\tif(nroot(y)) c[z][c[z][1] == y] = x;\n\tc[x][!k] = y;c[y][k] = w;\n\tf[w] = y;f[y] = x;f[x] = z;\n\tpushup(y);\n}\nvoid push(int x)\n{\n\tif(nroot(x)) push(f[x]);\n\tpushdown(x);\n}\nvoid splay(int x)\n{\n\tpush(x);\n\twhile(nroot(x))\n\t{\n\t\n\t\tint y = f[x],z = f[y];\n\t\tif(nroot(y))\n\t\t{\n\t\t\trotate((c[y][1]==x)^(c[z][1]==y)?x:y);\n\t\t}\n\t\trotate(x);\n\t\tpushup(x);\n\t}\n}\nvoid access(int x)\n{\n\tfor(int y = 0;x;x = f[y=x])\n\tsplay(x),c[x][1] = y,pushup(x);\n}\nvoid makeroot(int x)\n{\n\taccess(x);splay(x);pushr(x);\n}\nvoid link(int x,int y)\n{\n\tmakeroot(x);\n\tf[x] = y;\n}\nsigned main()\n{\n\tn = read();\n\tfor(int i = 1;i < n;i++)\n\t{\n\t\tint a = read(),b = read();\n\t\tval[i+n] = 1;\n\t\tval[a] = val[b] = 0;\n\t\tlink(a,i+n);\n\t\tlink(b,i+n);\n\t}\n\tm = read();\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tint opt = read();\n\t\tif(opt == 1)\n\t\t{\n\t\t\tint u = read();\n\t\t\tmakeroot(u+n);\n\t\t\tval[u+n] = 1; \n\t\t}\n\t\tif(opt == 2)\n\t\t{\n\t\t\tint u = read();\n\t\t\tmakeroot(u+n);\n\t\t\tval[u+n] = n;\n\t\t}\n\t\tif(opt == 3)\n\t\t{\n\t\t\tint u = read(),v = read();\n\t\t\tmakeroot(u);\n\t\t\taccess(v);\n\t\t\tsplay(v);\n\t\t\tif(sum[v] >= n) printf(\"-1\\n\");\n\t\t\telse printf(\"%lld\\n\",sum[v]);\n\t\t}\n\t}\n}\n```\n[\u5730\u5740](https://www.luogu.com.cn/blog/xzc/solution-cf165d)",
        "postTime": 1592044801,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF165D \u3010Beard Graph\u3011"
    },
    {
        "content": "\u8fd9\u5c31\u662f\u4e00\u4e2a\u6811\u5256\u88f8\u9898\uff0c\u4f46\u7ed9\u7684\u662f\u8fb9\u6743\u3002\n\n\u8fd9\u9898\u4f1a\u677f\u5b50\u7684\u8bdd\uff0c\u53ea\u9700\u8003\u8651\u5982\u4f55\u6765\u5199\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u9053\u9898\u7ef4\u62a4\u7684\u4e1c\u897f\u548c\u8fb9\u6743\u5316\u70b9\u6743\u3002\n\n\u6211\u5bf9\u4e8e\u8fb9\u6743\u5316\u70b9\u6743\u662f\u5728\u4e24\u70b9\u8fde\u7ebf\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2a\u70b9\uff0c\u628a\u8fb9\n\n\u6743\u7ed9\u5b83\uff0c\u8282\u70b9\u6570\u5c31\u4f1a\u53d8\u4e3a$2*n+1$\uff0c\u800c\u4ee3\u8868\u8fb9\u7684\u70b9\u7f16\u53f7\u90fd\u4e3a\u8fb9\u7684\u7f16\u53f7\u52a0n\u3002\n\n\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\u628ax\u6539\u6210x+n\u5c31\u662f\u8981\u4fee\u6539\u8fb9\u6240\u5bf9\u5e94\u7684\u7684\u7f16\u53f7\u3002\n\n\u5bf9\u4e8e\u9ed1\u8fb9\uff0c\u7ed9\u5b83\u8d4b\u503c\u4e3a1\uff0c\u800c\u767d\u8fb9\u8d4b\u503c\u4e3a0\uff0c\u4fee\u6539\u5c31\u662f\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u7684\u8bdd\uff0c\u67e5\u8be2\u533a\n\n\u95f4\u548c\uff0c\u518d\u5229\u7528\u6811\u5256LCA\u5224\u65ad\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5426\u662fans\u76842\u500d\uff0c\u82e5\u662f\uff0c\u5219\u5168\u662f\u9ed1\u8fb9\uff0c\n\n\u82e5\u4e0d\u662f\u5219\u8f93\u51fa-1\u3002\u7136\u540e\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\nAC\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define lson k<<1,l,mid\n#define rson k<<1|1,mid+1,r\n#define ls k<<1\n#define rs k<<1|1\n#define mid ((l+r)>>1)\nusing namespace std;\nconst int N=200005;\nint n,m,cnt,tot,ans;\nint head[N],id[N],top[N],fa[N],siz[N],son[N],dep[N],dfn[N];\nint tr[N<<2];\nbool flag;\nstruct node{\n\tint to,nxt;\n}e[N<<1];\ninline int read(){\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n\treturn s*w;\n}\ninline void add(int from,int to){\n\te[++cnt]=(node){to,head[from]};\n\thead[from]=cnt;\n}\nvoid dfs1(int x,int f){\n\tdep[x]=dep[f]+1;fa[x]=f;siz[x]=1;\n\tint y;\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\ty=e[i].to;\n\t\tif(y==f)continue;\n\t\tdfs1(y,x);\n\t\tsiz[x]+=siz[y];\n\t\tif(siz[y]>siz[son[x]])son[x]=y;\n\t}\n}\nvoid dfs2(int x,int topf){\n\ttop[x]=topf;id[x]=++tot;dfn[tot]=x;\n\tif(!son[x])return ;\n\tdfs2(son[x],topf);\n\tint y;\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\ty=e[i].to;\n\t\tif(y==fa[x]||y==son[x])continue;\n\t\tdfs2(y,y);\n\t}\n}\ninline void update(int k){\n\ttr[k]=tr[ls]+tr[rs];\n}\nvoid build(int k,int l,int r){\n\tif(l==r){\n\t\ttr[k]=dfn[l]>n?1:0;\n\t\treturn ;\n\t}\n\tbuild(lson);build(rson);\n\tupdate(k);\n}\nvoid change(int k,int l,int r,int x,int y){\n\tif(l==r&&x==l){\n\t\ttr[k]=y;\n\t\treturn ;\n\t}\n\tif(x<=mid)change(lson,x,y);\n\telse change(rson,x,y);\n\tupdate(k);\n}\nint ask(int k,int l,int r,int x,int y){\n\tif(l==x&&y==r){\n\t\treturn tr[k];\n\t}\n\tif(y<=mid)return ask(lson,x,y);\n\telse if(x>mid)return ask(rson,x,y);\n\telse return ask(lson,x,mid)+ask(rson,mid+1,y);\n}\ninline void qurey(int x,int y){\n\tans=0;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tans+=ask(1,1,n*2-1,id[top[x]],id[x]);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])swap(x,y);\n\tans+=ask(1,1,n*2-1,id[x],id[y]);\n}\ninline int LCA(int x, int y) {\n    while(top[x]!=top[y]){\n        if(dep[top[x]]<dep[top[y]])\n            swap(x,y);\n        x=fa[top[x]];\n    }\n    return dep[x]<dep[y]?x:y;\n}\ninline void check(int x,int y){\n\tint dis=dep[x]+dep[y]-2*dep[LCA(x,y)];\n\tif(dis!=ans*2)flag=1;\n}\nint main(){\n\tn=read();\n\tint x,y;\n\tfor(int i=1;i<n;++i){\n\t\tx=read();y=read();\n\t\tadd(x,i+n);add(i+n,x);\n\t\tadd(i+n,y);add(y,i+n);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tbuild(1,1,n*2-1);\n\tm=read();\n\tint opt;\n\twhile(m--){\n\t\topt=read();x=read();\n\t\tif(opt==1)change(1,1,n*2-1,id[x+n],1);\n\t\telse if(opt==2)change(1,1,n*2-1,id[x+n],0);\n\t\telse {\n\t\t\tflag=0;\n\t\t\ty=read();\n\t\t\tqurey(x,y);\n\t\t\tcheck(x,y);\n\t\t\tif(flag)printf(\"-1\\n\");\n\t\t\telse printf(\"%d\\n\",ans);\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1572042536,
        "uid": 151768,
        "name": "\u6d41\u901d\u4e36",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF165D \u3010Beard Graph\u3011"
    },
    {
        "content": "\u6811\u94fe\u5256\u5206\u3002\u8fd9\u9053\u9898\u975e\u5e38\u6709\u610f\u601d\uff0c\u53ea\u662f\u8ba9\u67e5\u8be2\u533a\u95f4\u5185\u662f\u5426\u6709\u767d\u8fb9\uff0c\u800c\u8f93\u51fa\u7684\u662f $-1$ \u6216\u4e24\u70b9\u7684\u8ddd\u79bb\u3002\u6211\u4eec\u9996\u5148\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u533a\u95f4\u5185\u662f\u5426\u6709\u767d\u8fb9\u3002\u9996\u5148\u4f9d\u7136\u662f\u7528\u5c06\u8fb9\u8f6c\u5230\u6df1\u70b9\uff0c\u5ffd\u7565 $\\text{LCA}$ \u7684\u505a\u6cd5\uff0c\u5c06\u8fb9\u8f6c\u70b9\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\uff0c\u5c06\u9ed1\u8fb9\u7684\u503c\u8d4b\u4e3a $0$\uff0c\u767d\u8fb9\u7684\u503c\u8d4b\u4e3a $1$\uff0c\u6b64\u65f6\u6211\u4eec\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u5f88\u7b80\u5355\u4e86\uff1a\u67e5\u8be2\u533a\u95f4\u548c\uff0c\u5982\u679c\u533a\u95f4\u548c\u5927\u4e8e $0$\uff0c\u90a3\u4e48\u5c31\u663e\u7136\u6709\u767d\u8fb9\uff0c\u8f93\u51fa $-1$\uff0c\u5426\u5219\u6211\u4eec\u53ef\u4ee5\u5728\u67e5\u8be2\u533a\u95f4\u548c\u7684\u65f6\u5019\u987a\u4fbf\u6c42\u51fa $\\text{LCA}$\uff08\u56e0\u4e3a\u5728\u9000\u51fa $top[u]\\not=top[v]$\uff09\u8fd9\u4e2a\u5faa\u73af\u7684\u65f6\u5019\uff0c\u6df1\u5ea6\u66f4\u6d45\u7684\u90a3\u4e2a\u70b9\u5fc5\u7136\u5c31\u662f $\\text{LCA}$\uff0c\u8bb0\u5f55\u4e00\u4e0b\u5373\u53ef\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u8f93\u51fa\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\uff0c\u5373 $dep[u]+dep[v]-dep[lca]*2$\u3002\n\n\u7136\u540e\u8003\u8651\u600e\u4e48\u4fee\u6539\uff0c\u9898\u4e2d\u6709\u4e24\u53e5\u5f88\u91cd\u8981\u7684\u8bdd\u6ca1\u6709\u7ffb\u8bd1\u51fa\u6765\uff1a\u5728\u4fee\u6539\u67d0\u8fb9\u4e3a\u9ed1\u8fb9\u65f6\uff0c\u5b83\u539f\u672c\u4e00\u5b9a\u662f\u767d\u8fb9\uff1b\u5728\u4fee\u6539\u67d0\u8fb9\u4e3a\u767d\u8fb9\u65f6\uff0c\u5b83\u539f\u672c\u4e00\u5b9a\u662f\u9ed1\u8fb9\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5355\u70b9\u52a0\u51fd\u6570\uff0c\u5728\u4fee\u6539\u4e3a\u9ed1\u8fb9\u65f6\u52a0\u4e0a $-1$\uff0c\u4fee\u6539\u4e3a\u767d\u8fb9\u65f6\u52a0\u4e0a $1$ \u5373\u53ef\u3002\n\n\u6811\u94fe\u5256\u5206\u5165\u95e8\u89c1\uff1a[\u6811\u94fe\u5256\u5206\u778e\u5165\u95e8](http://www.luogu.org/blog/Venus/tree-train-split)\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100005\nusing namespace std;\nint cnt,fst[MAXN],nxt[MAXN<<1],to[MAXN<<1];\nint n,Q,fr[MAXN],tx[MAXN],t[MAXN<<2],tag[MAXN<<2],lca;\nint siz[MAXN],son[MAXN],top[MAXN],dep[MAXN],faz[MAXN],dfn[MAXN],Index;\nvoid AddEdge(int u,int v)\n{\n\tto[++cnt]=v;\n\tnxt[cnt]=fst[u];\n\tfst[u]=cnt;\n}\nvoid Dfs1(int u)\n{\n\tsiz[u]=1;\n\tson[u]=0;\n\tfor(int i=fst[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==faz[u]) continue;\n\t\tdep[v]=dep[u]+1;\n\t\tfaz[v]=u;\n\t\tDfs1(v);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[son[u]]<siz[v]) son[u]=v;\n\t}\n}\nvoid Dfs2(int u,int rt)\n{\n\tdfn[u]=++Index;\n\ttop[u]=rt;\n\tif(son[u]) Dfs2(son[u],rt);\n\tfor(int i=fst[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==faz[u] || v==son[u]) continue;\n\t\tDfs2(v,v);\n\t}\n}\nvoid PushUp(int rt)\n{\n\tt[rt]=t[rt<<1]+t[rt<<1|1];\n}\nvoid PushDown(int rt,int len)\n{\n\tt[rt<<1]+=tag[rt]*(len-(len>>1));\n\tt[rt<<1|1]+=tag[rt]*(len>>1);\n\ttag[rt<<1]+=tag[rt];\n\ttag[rt<<1|1]+=tag[rt];\n\ttag[rt]=0;\n}\nvoid Modify(int rt,int l,int r,int pos,int val)\n{\n\tif(l==r)\n\t{\n\t\tt[rt]+=val*(r-l+1);\n\t\ttag[rt]+=val;\n\t\treturn;\n\t}\n\tPushDown(rt,r-l+1);\n\tint mid=l+r>>1;\n\tif(pos<=mid) Modify(rt<<1,l,mid,pos,val);\n\telse Modify(rt<<1|1,mid+1,r,pos,val);\n\tPushUp(rt);\n}\nint Query(int rt,int l,int r,int tl,int tr)\n{\n\tif(tl<=l && r<=tr) return t[rt];\n\tPushDown(rt,r-l+1);\n\tint mid=l+r>>1,res=0;\n\tif(tl<=mid) res+=Query(rt<<1,l,mid,tl,tr);\n\tif(tr>mid) res+=Query(rt<<1|1,mid+1,r,tl,tr);\n\treturn res;\n}\nint QueryOnTree(int u,int v)\n{\n\tint res=0;\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tres+=Query(1,1,n,dfn[top[u]],dfn[u]);\n\t\tu=faz[top[u]];\n\t}\n\tif(dep[u]>dep[v]) swap(u,v);\n\tlca=u;\n\tres+=Query(1,1,n,dfn[u]+1,dfn[v]);\n\treturn res;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tAddEdge(x,y);\n\t\tAddEdge(y,x);\n\t\tfr[i]=x;\n\t\ttx[i]=y;\n\t}\n\tDfs1(1);\n\tDfs2(1,1);\n\tscanf(\"%d\",&Q);\n\twhile(Q--)\n\t{\n\t\tint opt,x,y;\n\t\tscanf(\"%d %d\",&opt,&x);\n\t\tif(opt==1)\n\t\t{\n\t\t\tint u=fr[x],v=tx[x];\n\t\t\tif(dep[u]<dep[v]) swap(u,v);\n\t\t\tModify(1,1,n,dfn[u],-1);\n\t\t}\n\t\telse if(opt==2)\n\t\t{\n\t\t\tint u=fr[x],v=tx[x];\n\t\t\tif(dep[u]<dep[v]) swap(u,v);\n\t\t\tModify(1,1,n,dfn[u],1);\n\t\t}\n\t\telse if(opt==3)\n\t\t{\n\t\t\tscanf(\"%d\",&y);\n\t\t\tint res=QueryOnTree(x,y);\n\t\t\tif(res) puts(\"-1\");\n\t\t\telse printf(\"%d\\n\",dep[x]+dep[y]-dep[lca]*2);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1547103919,
        "uid": 52734,
        "name": "vocaloid",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF165D \u3010Beard Graph\u3011"
    }
]