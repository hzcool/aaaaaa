[
    {
        "content": "### \u524d\u8a00\n\n\u6211\u4e0d\u4f1aDP\uff0c\u4f46\u6211\u4f1a\u8fd0\u7528\u4eba\u7c7b\u672c\u8d28\u3002\n\n### \u9898\u76ee\n\n> \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9\u7684\u5b8c\u5168\u56fe\uff0c\u8fb9\u6743\u76f8\u540c\u4e3a y \uff0c\u5728\u5b8c\u5168\u56fe\u4e2d\u6807\u5b9a\u4e00\u9897\u751f\u6210\u6811\uff0c\u6811\u4e0a\u8fb9\u6743\u53d8\u4e3a x\uff0c\u6c42\u4e0d\u91cd\u590d\u904d\u5386\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n\n### \u601d\u8def\n\n\u65e2\u7136\u9898\u76ee\u4e2d\u975e\u5e38\u9c9c\u660e\u5730\u6307\u51fa\u4e86 `\u4e0d\u8fc7\u6ce8\u610fx\u4e0d\u4e00\u5b9a\u5c0f\u4e8ey` \u90a3\u4e48\u80af\u5b9a\u662f\u8ba9\u6211\u4eec\u6765\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u7684\u3002\n\n\u4e00\u3001\u5b8c\u5168\u56fe\u7684\u8fb9\u6743\u66f4\u5c0f\u3002\n\n\u5927\u5bb6\u80af\u5b9a\u77e5\u9053\u8fd9\u4e2a\u60c5\u51b5\u4e00\u5b9a\u4f1a\u9009\u62e9\u66f4\u5c0f\u7684\uff0c\u4e5f\u5c31\u662f\u4f7f\u9009\u62e9\u7684\u5b8c\u5168\u56fe\u7684\u8fb9\u66f4\u591a\u4e00\u4e9b\u3002\n\n\u90a3\u4e48\u73b0\u5728\u8ba8\u8bba\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1\u3001\u83ca\u82b1\u56fe\u3002\n\n\u751f\u6210\u6811\u4e3a\u83ca\u82b1\u56fe\u8bf4\u660e\u5fc5\u987b\u8981\u9009\u62e9\u4e00\u6761\u6811\u8fb9 $e$\uff0c\u90a3\u4e48\u5176\u4ed6\u7684\u8def\u5f84\u4e00\u5b9a\u53ef\u4ee5\u5728\u5b8c\u5168\u56fe\u7684\u8fb9\u4e0a\u904d\u5386\u5b8c\u6210\uff0c\u6240\u4ee5\u5176\u4ed6\u7684\u9009\u62e9\u5b8c\u5168\u56fe\u4e0a\u7684\u8fb9\u5373\u53ef\u3002\u7b54\u6848\u4e3a $\\text{x+(n-2)y}$\u3002\n\n\u5224\u65ad\u662f\u5426\u4e3a\u83ca\u82b1\u56fe\uff0c\u53ea\u9700\u8981\u5224\u65ad\u4e00\u4e2a\u70b9\u7684\u51fa\u5ea6\u662f\u5426\u4e3a $\\text{n-1}$ \u5373\u53ef\u3002\n\n2\u3001\u975e\u83ca\u82b1\u56fe\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u8fde\u63a5\u4e00\u4e2a\u70b9\u7684\u8fb9\u4e00\u5b9a\u6709\u4e00\u6761\u662f\u5b8c\u5168\u56fe\u8fb9\uff0c\u90a3\u4e48\u80af\u5b9a\u6709\u4e00\u6761\u8def\u5f84\u662f\u4e0d\u4f1a\u7ecf\u8fc7\u4efb\u4f55\u7684\u6811\u8fb9\u7684\uff0c\u53ef\u4ee5\u624b\u6a21\u51e0\u7ec4\u6837\u4f8b\u5c1d\u8bd5\u5c1d\u8bd5\u3002\n\n\u6b64\u65f6\u7684\u7b54\u6848\u5c31\u662f $(\\text{n-1}) y$ \u3002\n\n\u4e8c\u3001\u8fb9\u6743\u76f8\u540c\u3002\n\n\u90a3\u80af\u5b9a\u968f\u4fbf\u9009\u5c31\u884c\u4e86\uff0c\u7b54\u6848\u4e3a $(\\text{n-1})y$\u3002\n\n\u4e09\u3001\u6811\u8fb9\u7684\u8fb9\u6743\u66f4\u5c0f\u3002\n\n\u6839\u636e\u8d2a\u5fc3\u601d\u60f3\uff0c\u4e00\u5b9a\u4f1a\u5c3d\u53ef\u80fd\u591a\u5f97\u9009\u62e9\u6811\u8fb9\u53bb\u8d70\uff0c\u4f46\u662f\u8fd9\u4e2a\u5e76\u6ca1\u6709\u4e00\u4e9b\u5f88\u56fa\u5b9a\u7684\u89c4\u5f8b\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5229\u7528**\u4eba\u7c7b\u672c\u8d28**\u4e86\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u8def\u5f84\u4e2d\u4e00\u4e2a\u70b9\u7684\u5ea6\u6700\u5927\u4e3a $2$\uff0c\u4e5f\u5c31\u662f\n$$a-x-b$$\n\n\u4e00\u6761\u8fdb\uff0c\u4e00\u6761\u51fa\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u8d2a\u5fc3\u5730\u60f3\uff0c\u5c3d\u91cf\u4f7f\u9009\u62e9\u7684\u6811\u8fb9\u6700\u591a\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u6df1\u641c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u9009\u62e9\u5373\u53ef\u3002\n\n\u6700\u540e\u7b54\u6848\u5c31\u662f $cnt_e y+(n-cnt_e-1) x$\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n/*\n\n\t\u5206\u7c7b\u8ba8\u8bba:\n\t\n\t\u751f\u6210\u6811\u8fb9x > \u5b8c\u5168\u56fe\u8fb9y : 1\u3001\u975e\u83ca\u82b1\u56fe\uff0c\u901a\u8fc7\u624b\u6a21\u53d1\u73b0\uff0c\u53ea\u8981\u751f\u6210\u6811\u4e0d\u662f\u83ca\u82b1\u56fe\uff0c\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u8def\u5f84\u4e0d\u4f1a\u7ecf\u8fc7\u6811\u8fb9\uff0c\u4e5f\u5c31\u662f\n\t\t\t\t\t\t\t\t\tans=y*(n-1)\n\t\t\t\t\t\t\t2\u3001\u83ca\u82b1\u56fe\uff0c\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u4e00\u6761\u6811\u8fb9\uff0c\u5176\u4ed6\u7684\u8fb9\u90fd\u53ef\u4ee5\u7ecf\u8fc7\u5b8c\u5168\u56fe\u8fb9\uff0c ans=x+y*(n-2)\n\t\t\t\t\t\t\t(\u5224\u65ad\u83ca\u82b1\u56fe\u627e\u5ea6\u4e3a n-1 \u7684\u5373\u53ef)\n\tx=y ans=x*(n-1)\n\t\n\t\u751f\u6210\u6811\u8fb9x < \u5b8c\u5168\u56fe\u8fb9y : 1\u3001\u5c3d\u53ef\u80fd\u5730\u627e\u751f\u6210\u6811\u7684\u8fb9\uff0c\u53e6\u6709\u4e00\u6761\u6027\u8d28\uff0c\u5ea6\u6700\u591a\u4e3a2\uff0c\u90a3\u4e48\u76f4\u63a5\u8d2a\u5fc3\u8ba1\u7b97\u5c31\u53ef\u4ee5\u4e86\uff01\u53ea\u8981\u4e00\u6761\u5408\u6cd5\u7684\u6811\u8fb9\u6ca1\u6709\u88ab\u9009\uff0c\u8d2a\u5fc3\u9009\u4e0a\u5373\u53ef\u3002 \n\t\t\t\t\t\t\t\t\tans=stick*x+(n-stick-1)*y\n\n*/\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<stack>\n#include<map>\n#include<algorithm>\n#include<vector>\n#define int long long\n#define ZPL return\n#define AK 0\n#define IOI ;\nusing namespace std;\nconst int N=2e5+9;\nstruct node{\n\tint last;\n\tint to;\n\tint dis;\n}e[N<<1];\nint head[N];\nint cnt;\nint f[N][3];\nint ans;\nint ind[N];\nint stick;//\u9009\u62e9\u7684\u6811\u8fb9 \nint n,x,y;//x\u751f\u6210\u6811\uff0cy\u5b8c\u5168\u56fe\u4e0a \nint read()\n{\n\tint f=1,x=0;\n\tchar s=getchar();\n\twhile(s<'0'||s>'9'){if(s=='-')f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9'){x=(x<<1)+(x<<3)+(s^'0');s=getchar();}\n\treturn f*x;\n}\nvoid add(int from,int to,int dis)\n{\n\te[++cnt].last=head[from];\n\te[cnt].to=to;\n\te[cnt].dis=dis;\n\thead[from]=cnt;\n}\nbool dfs(int u,int fa)\n{\n\tint du=2;//\u5ea6\u6700\u591a\u4e3a2\n\tfor(int i=head[u];i;i=e[i].last)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa) continue;\n\t\tif(dfs(v,u)&&du)//\u53ef\u4ee5\u4f7f\u7528\u6811\u8fb9\uff01 \n\t\t{\n\t\t\tdu--;\n\t\t\tstick++;\n\t\t}\n\t}\n\tif(du>0) return true;\n\telse return false; \n}\nvoid work()\n{\n\tdfs(1,0);\n\tcout<<stick*x+(n-stick-1)*y<<endl;\n\treturn;\n}\nsigned main()\n{\n\tn=read();\n\tx=read();//\u751f\u6210\u6811\u8fb9 \n\ty=read();//\u5b8c\u5168\u56fe\u8fb9 \n\tbool flag=false;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u=read();\n\t\tint v=read();\n\t\tadd(u,v,x);\n\t\tadd(v,u,x);\n\t\tind[v]++;\n\t\tind[u]++;\n\t\tif(ind[v]==n-1||ind[u]==n-1)\n\t\t\tflag=true;\t\n\t}\n\tif(flag&&x>y)\n\t{\n\t\tcout<<x+(n-2)*y<<endl;\n\t\treturn 0;\n\t}\n\tif(x>y)\n\t{\n\t\tcout<<(n-1)*y<<endl;\n\t\treturn 0;\n\t}\n\tif(x==y)\n\t{\n\t\tcout<<(n-1)*y<<endl;\n\t\treturn 0;\n\t}\n\twork();\n\tZPL AK IOI \n}\n```",
        "postTime": 1620353254,
        "uid": 230804,
        "name": "Durancer",
        "ccfLevel": 4,
        "title": "\u3010\u9898\u89e3\u3011CF618D Hamiltonian Spaning Tree"
    },
    {
        "content": "# \u8d2a\u5fc3 + \u6811\u4e0a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\n\n## 0x00 \u4f55\u4e3a\u8def\u5f84\u8986\u76d6\uff1a\n\n**\u8def\u5f84\u8986\u76d6**\u662f\u6307\u5c06\u70b9\u96c6\u5212\u5206\u4e3a\u82e5\u5e72\u70b9 _\u4e0d\u76f8\u4ea4_ \u7684\u8def\u5f84\u7684\u65b9\u6848\n\n## 0x01 \u600e\u6837\u6c42\u6700\u5c0f\u8def\u5f84\u8986\u76d6\n\n\u8fd9\u91cc\u6211\u4eec\u4ec5\u63a2\u8ba8**\u6811\u4e0a**\u6700\u5c0f\u8def\u5f84\u8986\u76d6\n\n### \u8003\u8651\u6811\u5f62DP\n\n\u8bb0$dp_u$\u8868\u793a\u8981\u8986\u76d6\u4ee5$u$\u4e3a\u6839\u8282\u70b9\u53ca\u5176\u5b50\u6811\uff0c\u6700\u5c11\u9700\u8981\u7684\u70b9\u96c6\u4e2a\u6570\n\n\u663e\u7136\u6700\u7ec8\u7b54\u6848\u4e3a$dp_{root}$\n\n\u6211\u4eec\u8fd8\u9700\u8bb0\u4e00\u4e2a$f_u\\in\\ \\{0, 1\\}$\u8868\u793a$u$\u662f\u5426\u53ef\u4ee5\u6210\u4e3a\u4e00\u6761\u8def\u5f84\u7684\u7aef\u70b9\n\n\u76f4\u89c2\u6765\u8bf4\u5c31\u662f\u5b83\u80fd\u4e0d\u80fd\u6210\u4e3a\u5b83\u7236\u8282\u70b9\u7684\u201c\u63a5\u53e3\u201d\n\n#### \u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u8f6c\u79fb\n\n\u9996\u5148\uff0c\u5982\u679c$u$\u7684\u6240\u6709\u5b50\u6811\u90fd\u6ca1\u6709\u53ef\u4ee5\u4e0e\u5b83\u76f8\u201c\u63a5\u4e0a\u201d\u7684\u201c\u7aef\u53e3\u201d\uff0c\u90a3\u4e48\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u7684\u96c6\u5408\u6570\u5c31\u8981$+1$\uff0c\u540c\u662f\u5b83\u4e5f\u6210\u4e86\u65b0\u7684\u96c6\u5408\u7684\u201c\u63a5\u53e3\u201d\uff0c\u6545$f_u=1$\n\n\u5982\u679c$u$\u7684\u5b50\u6811\u4e2d\u6709\u4e00\u4e2a\u201c\u63a5\u53e3\u201d\uff0c\u8003\u8651\u5230\u5982\u679c\u63a5\u4e0a\u8fd9\u4e2a\u201c\u63a5\u53e3\u201d\uff0c\u5219$u$\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u63a5\u5230\u4e0a\u4e00\u7ea7\uff0c\u4e00\u5b9a\u4e0d\u5dee\u3002\u6545\u8d2a\u5fc3\u5730\u628a$u$\u63a5\u4e0a\u8fd9\u9897\u5b50\u6811\u4e0a\uff0c$f_u=1$\n\n\u5982\u679c$u$\u7684\u5b50\u6811\u4e2d\u5b58\u5728\u591a\u4e2a\u201c\u63a5\u53e3\u201d\uff0c\u7531\u4e8e\u8def\u5f84\u4e0d\u53ef\u4ea4\u53c9\uff0c$u$\u6700\u591a\u4e0e\u4e24\u201c\u63a5\u53e3\u201d\u76f8\u63a5\u3002\u8fd9\u91cc\u7ee7\u7eed\u4f7f\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\u8003\u8651\uff0c\u5982\u679c$u$\u53ea\u63a5\u4e00\u4e2a\u201c\u63a5\u53e3\u201d\uff0c\u5219\u4f1a\u820d\u5f03\u8ba9\u96c6\u5408\u6570$-1$\u7684\u4ee3\u4ef7\uff08\u5b50\u6811\u4e2d\u4e24\u4e2a\u72ec\u7acb\u96c6\u5408\u5e76\uff09\uff0c\u6765\u6362\u53d6$u$\u53ef\u4ee5\u63a5\u5230\u5176\u7236\u8282\u70b9\u800c\u53ef\u80fd\u8fbe\u5230\u7684$-1$\u7684\u56de\u62a5\uff0c\u663e\u7136\u4e0d\u5212\u7b97\uff01\u6545\u8981\u8ba9$u$\u63a5\u4e24\u4e2a\u5b50\u6811\u201c\u63a5\u53e3\u201d\uff0c\u90a3\u4e48\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u7684\u96c6\u5408\u6570\u5c31\u8981$-1$\uff0c\u540c\u65f6$f_u=0$\n\n\u7efc\u4e0a\uff0c\u53ef\u4ee5\u5199\u51fa\u5982\u4e0bDP\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$\ndp_u = \\sum_{}{dp_v}+\n\\left\\{ \n\\begin{matrix}\n+1,\\quad\\sum_{}{f_v}=0 \\\\\n0,\\quad\\sum_{}{f_v}=1 \\\\\n-1,\\quad\\sum_{}{f_v}>=2 \\\\\n\\end{matrix}\n\\right.\n$$\n\n$$\nf_u =\n\\left\\{ \n\\begin{matrix}\n1,\\quad\\sum_{}{f_v}=0 \\\\\n1,\\quad\\sum_{}{f_v}=1 \\\\\n0,\\quad\\sum_{}{f_v}>=2 \\\\\n\\end{matrix}\n\\right.\n$$\n\n\u4e24\u8005\u540c\u65f6\u8f6c\u79fb\n\n\u81f3\u6b64\uff0c\u5373\u53ef\u6c42\u51fa\u6811\u4e0a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u7684\u96c6\u5408\u6570\n\n## 0x02 \u672c\u9898\u8fd0\u7528\n\n\u672c\u9898\u4e2d\u662f\u7ed9\u51fa\u4e86\u4e00\u5f20\u56fe\u548c\u56fe\u4e0a\u7684\u4e00\u9897\u751f\u6210\u6811\uff0c\u5728\u56fe\u4e0a\u8dd1\u7684\u8fb9\u9700\u8981\u82b1\u8d39$y$\uff0c\u5728\u6811\u4e0a\u8dd1\u7684\u8fb9\u9700\u8981\u82b1\u8d39$x$\n\n\u82e5$y<x$\uff0c\u663e\u7136\u5728\u56fe\u4e0a\u8dd1\u53cd\u800c\u66f4\u4f18\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u8fd9\u79cd\u60c5\u51b5\uff1a\n\n\u82e5\u6b64\u6811\u662f\u83ca\u82b1\u56fe\uff0c\u5373\u6240\u6709\u70b9\u90fd\u8fde\u5411\u6839\u8282\u70b9\uff0c\u5219\u5fc5\u987b\u8981\u8dd1\u4e00\u6761\u6811\u8fb9\uff0c\u5176\u4ed6\u7684\u8dd1$n-2$\u56fe\u8fb9\n\n\u5176\u4f59\u60c5\u51b5\uff0c\u4e0d\u96be\u53d1\u73b0\u7686\u53ef\u8dd1$n-1$\u6761\u56fe\u8fb9\u5b8c\u6210\n\n\u82e5$y>=x$\uff0c\u53ef\u4ee5\u53d1\u73b0\u80fd\u8dd1\u6811\u8fb9\u5c3d\u91cf\u8dd1\u6811\u8fb9\u66f4\u4f18\uff0c\u5373\u9700\u8981\u8ba9\u56fe\u8fb9\u5c3d\u91cf\u5c11\u3002\u800c\u6211\u4eec\u53d1\u73b0\u56fe\u8fb9\u6570\u5c31\u662f\u8fde\u63a5\u6bcf\u6bb5\u201c\u72ec\u7acb\u8def\u5f84\u5757\u201d\u7684\u8fb9\u6570\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u6c42\u51fa\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570$k$\uff0c\u90a3\u4e48\u8dd1$k-1$\u6761\u56fe\u8fb9\u548c$n-k$\u6761\u6811\u8fb9\u5373\u662f\u6700\u6709\u89e3\n\n## 0x03 \u9644\u4e0aAC\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ninline int read() {\n\tint x = 0; bool f = 0; char ch = getchar();\n\twhile (!isdigit(ch)) f |= ch == '-', ch = getchar();\n\twhile (isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n\treturn f ? -x : x;\n}\nconst int MAXN = 2e5 + 6;\nint n, x, y, cnte, hd[MAXN];\nint in[MAXN], dp[MAXN], f[MAXN];\nstruct tEdge { int to, nxt; } e[MAXN << 1];\ninline void link(int u, int v) {\n\te[++cnte] = {v, hd[u]};\n\thd[u] = cnte;\n}\nvoid misaka(int u, int p) {\n\tif (!hd[u]) {\n\t\tdp[u] = f[u] = 1;\n\t\treturn;\n\t}\n\tint sumf = 0;\n\tfor (int i = hd[u]; i; i = e[i].nxt) {\n\t\tint v = e[i].to;\n\t\tif (v == p) continue;\n\t\tmisaka(v, u);\n\t\tdp[u] += dp[v];\n\t\tsumf += f[v];\n\t}\n\tif (sumf == 0) ++dp[u], f[u] = 1;\n\tif (sumf == 1) f[u] = 1;\n\tif (sumf >= 2) --dp[u], f[u] = 0;\n}\nint main() {\n\tn = read(), x = read(), y = read();\n\tfor (int i = 1; i < n; ++i) {\n\t\tint u = read(), v = read();\n\t\tlink(u, v); link(v, u);\n\t\t++in[u]; ++in[v];\n\t}\n\tif (y < x) {\n\t\tbool f = 0;\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tif (in[i] == n - 1) f = 1;\n\t\tif (f) printf(\"%lld\\n\", (n - 2ll) * y + x);\n\t\telse printf(\"%lld\\n\", (n - 1ll) * y);\n\t} else {\n\t\tmisaka(1, 0);\n\t\tprintf(\"%lld\\n\", (dp[1] - 1ll) * y + (n - dp[1] * 1ll) * x);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1667712918,
        "uid": 180693,
        "name": "Accelerator_X",
        "ccfLevel": 6,
        "title": "Hamiltonian Spanning Tree \u89e3\u9898\u62a5\u544a"
    }
]