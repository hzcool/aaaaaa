[
    {
        "content": "\u95ee\u9898\u7b49\u4ef7\u4e8e\u7ed9\u51fa $k$ \u7ec4\u6709\u6839\u6811 $T$ \u7684\u4f18\u5148\u8bbf\u95ee\u968f\u673a\u513f\u5b50\u7684\u4e2d\u5e8f\u904d\u5386 $A_1, A_2, \\cdots, A_k$\uff0c\u8981\u6c42\u8fd8\u539f $T$\u3002\n\n\u8003\u8651\u5b9a\u6839\u3002\u5982\u679c $u$ \u4e3a\u6839\uff0c\u5219 $u$ \u5728\u4efb\u610f $A_i$ \u4e2d\u4e0d\u4e3a\u4e24\u7aef\uff0c\u4e14\u4e24\u4fa7\u96c6\u5408\u5206\u522b\u4e3a\u5176\u4e24\u68f5\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u3002\u56e0\u6b64\uff0c$u$ \u6ee1\u8db3\u5982\u4e0b\u6027\u8d28\uff1a\n\n- \u5bf9\u4e8e\u4efb\u610f $A_i$\uff0c$u$ \u4e0d\u5728\u5176\u4e24\u7aef\u3002\n- \u5bf9\u4e8e\u4efb\u610f $A_i$\uff0c\u8bbe $u$ \u4e24\u4fa7\u96c6\u5408\u5206\u522b\u4e3a $L_i, R_i$\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f $1\\leq i, j\\leq k$\uff0c\u8981\u4e48 $(L_i, R_i) = (L_j, R_j)$\uff0c\u8981\u4e48 $(L_i, R_i) = (R_j, L_j)$\u3002\u5b9e\u9645\u4e0a\u6211\u4eec\u53ea\u9700\u7528\u5230 $|\\bigcup_{i = 1} ^ k \\{L_i, R_i\\}| = 2$\u3002\n\n\u56e0\u4e3a\u6570\u636e\u968f\u673a\uff0c\u6240\u4ee5\u5176\u5b83\u70b9\u6781\u5927\u6982\u7387\u4e0d\u540c\u65f6\u6ee1\u8db3\u8fd9\u4e9b\u6027\u8d28\u3002\n\n\u5b9a\u6839\u540e\u9012\u5f52\u8fdb\u5165\u5b50\u95ee\u9898\u3002\u603b\u5171 $\\mathcal{O}(n)$ \u6b21\u5b9a\u6839\uff0c$\\mathcal{O}(n ^ 2)$ \u6b21\u68c0\u67e5\u3002\u5355\u6b21\u68c0\u67e5\u7684\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(nk)$\uff0c\u65e0\u6cd5\u63a5\u53d7\u3002\u4e24\u79cd\u65b9\u6cd5\uff1a\n\n- \u9884\u5904\u7406\u540e\u5feb\u901f\u6c42\u51fa $L_i, R_i$ \u7684 XOR-Hash\u3002\n- \u5148\u5224\u662f\u5426\u6709 $|\\bigcup_{i = 1} ^ k \\{|L_i|, |R_i|\\}| = 2$\uff0c\u82e5\u662f\u5219\u8fdb\u4e00\u6b65\u68c0\u67e5\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n ^ 2k)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nusing vint = vector<int>;\nconstexpr int N = 1e3 + 5;\nint n, k, p[N], fa[N];\nvoid solve(vector<vint> dat, int ff) {\n  int m = dat[0].size();\n  if(m == 1) return fa[dat[0][0]] = ff, void();\n  vector<vint> pos(k, vint(n + 1));\n  for(int i = 0; i < k; i++)\n    for(int j = 0; j < m; j++)\n      pos[i][dat[i][j]] = j;\n  auto split = [&](int u, vint arr, vint &a, vint &b) {\n    bool find = 0;\n    for(int it : arr)\n      if(it == u) find = 1;\n      else if(find) b.push_back(it);\n      else a.push_back(it);\n  };\n  auto check = [&](int u) {\n    int x = -1, y = -1;\n    for(int i = 0, sz; i < k; i++) {\n      sz = pos[i][u];\n      if(!sz) return false;\n      if(x == -1 || x == sz) x = sz;\n      else if(y == -1 || y == sz) y = sz;\n      else return false;\n      sz = m - 1 - sz;\n      if(!sz) return false;\n      if(x == -1 || x == sz) x = sz;\n      else if(y == -1 || y == sz) y = sz;\n      else return false;\n    }\n    vint c, d;\n    for(auto &arr : dat) {\n      vint a, b;\n      split(u, arr, a, b);\n      sort(a.begin(), a.end());\n      sort(b.begin(), b.end());\n      if(c.empty() || c == a) c = a;\n      else if(d.empty() || d == a) d = a;\n      else return false;\n      if(c.empty() || c == b) c = b;\n      else if(d.empty() || d == b) d = b;\n      else return false;\n    }\n    return true;\n  };\n  for(int id : dat[0]) {\n    if(!check(id)) continue;\n    fa[id] = ff;\n    int beg = dat[0][0];\n    vector<vint> ldat, rdat;\n    for(auto arr : dat) {\n      vint a, b;\n      split(id, arr, a, b);\n      if(find(a.begin(), a.end(), beg) == a.end()) a.swap(b);\n      ldat.push_back(a), rdat.push_back(b);\n    }\n    solve(ldat, id), solve(rdat, id);\n  }\n}\nint main() {\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"1.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"1.out\", \"w\", stdout);\n  #endif\n  cin >> n >> k;\n  vector<vector<int>> dat;\n  for(int _ = 1; _ <= k; _++) {\n    vector<int> arr(n, 0);\n    for(int i = 0; i < n; i++) cin >> arr[i];\n    dat.push_back(arr);\n  }\n  solve(dat, -1);\n  for(int i = 1; i <= n; i++) cout << fa[i] << (i == n ? '\\n' : ' ');\n  return 0;\n}\n/*\ng++ B.cpp -o B -std=c++14 -O2 -DALEX_WEI\n*/\n```",
        "postTime": 1670819207,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1773B BinCoin"
    },
    {
        "content": "\u4e00\u573a\u6bd4\u8d5b\u5c31\u505a\u4e24\u9053\u968f\uff0c\u961f\u53cb\u90fd\u5728 D \u6211\u3002\n\n\u6bcf\u6b21\u627e\u5230\u533a\u95f4\u5185\u7684\u6839\u9012\u5f52\u5373\u53ef\u3002\n\n\u5f53\u533a\u95f4\u957f\u5ea6 $>1$ \u7684\u65f6\u5019\uff0c\u6839\u4e3a\u6240\u6709\u5e8f\u5217\u4e2d\u5176\u4e24\u4fa7\u5143\u7d20\u96c6\u5408\u5747\u975e\u7a7a\u4e14\u76f8\u540c\uff08\u4e24\u4fa7\u53ef\u4ee5\u4ea4\u6362\uff09\uff0c\u9519\u8bef\u7387 $2^{-50}$\u3002\n\n\u5224\u96c6\u5408\u76f8\u7b49\u53ef\u4ee5\u7528 Hash\uff0c\u6211\u8fd9\u91cc\u7528\u4e86\u5f02\u6216\u3001\u548c\u3001\u5e73\u65b9\u548c\u5c31\u8fc7\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2)$\u3002",
        "postTime": 1670771466,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "CF1773B BinCoin"
    }
]