[
    {
        "content": "## \u9898\u76ee\u5927\u610f\r\n\r\n\u7ed9\u5b9a $k$ \u6761\u7ebf\u6bb5\uff0c\u6bcf\u4e00\u6761\u7ebf\u6bb5\u5c5e\u4e8e $1\\sim n$ \u4e2d\u7684\u67d0\u4e00\u4e2a\u96c6\u5408\u3002\r\n$m$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u5f62\u5982 $(a, b, x, y)$\uff0c\u5373\u8be2\u95ee\u662f\u5426\u96c6\u5408 $a\\sim b$  \u4e2d\uff0c\u90fd\u5b58\u5728\u4e00\u6761\u7ebf\u6bb5\u88ab\u7ebf\u6bb5 $[x, y]$ \u8986\u76d6\u3002\r\n\r\n$ k \\le 3\\times 10^5$ , $n, m \\le 10^5$\u3002\r\n\r\n## \u9898\u76ee\u601d\u8def\r\n\r\n\u5bf9\u4e8e\u8fd9\u79cd\u9898\u5f53\u7136\u662f\u5148\u8003\u8651\u66b4\u529b\uff0c\u518d\u8003\u8651\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\u3002\r\n\r\n\u6709\u4e24\u79cd\u601d\u7ef4\u65b9\u5411:\r\n\r\n- \u4e00\u79cd\u662f\u4ece\u7ebf\u6bb5\u4e3a\u5143\u7d20\u51fa\u53d1\uff0c\u67e5\u8be2 $[x, y]$ \u5185\u7684\u7ebf\u6bb5\u662f\u5426\u80fd\u5c06 $[a, b]$ \u8fd9\u4e9b\u96c6\u5408\u56ca\u62ec\u5165\u5185\uff1b\r\n- \u4e00\u79cd\u662f\u4ece\u96c6\u5408\u4e3a\u5143\u7d20\u51fa\u53d1\uff0c\u67e5\u8be2 $[a, b]$ \u8fd9\u4e2a\u533a\u95f4\u7684\u96c6\u5408\u662f\u5426\u90fd\u6709\u7ebf\u6bb5\u5728 $[x, y]$ \u4e4b\u95f4\u3002\r\n\r\n\u7b2c\u4e8c\u4e2a\u4e00\u5b9a\u4f1a\u6bd4\u7b2c\u4e00\u4e2a\u597d\u505a\uff0c\u4e0d\u7136\u9898\u76ee\u7ed9\u4f60 $[a, b]$ \u8fd9\u4e2a\u533a\u95f4\u662f\u767d\u7ed9\u7684\u5417\u3002\r\n\r\n\u8003\u8651\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u96c6\u5408\uff0c\u5b83\u5305\u542b\u67d0\u4e00\u6761\u7ebf\u6bb5 $ [l, r]$ \u5728 $[x, y]$ \u4e4b\u95f4\uff0c\u76f8\u5f53\u4e8e\u6ee1\u8db3 $ r \\le y$ \u7684\u7ebf\u6bb5\u4e2d\u6700\u5927\u7684 $l \\ge x$ \u3002\r\n\r\n\u76f8\u5f53\u4e8e\u6211\u4eec\u5728\u6ee1\u8db3 $r \\le y$ \u7684\u524d\u63d0\u4e0b\uff0c\u6c42\u51fa $[a, b]$ \u96c6\u5408\u4e2d\u7684\u7ebf\u6bb5\u6700\u5927\u7684 $l$\uff0c\u5c06\u8fd9\u4e9b $l$ \u53d6\u6700\u5c0f\u503c $l_{min}$\u3002\u5982\u679c $l_{min} \\ge x$\uff0c\u5219\u6709\u89e3\uff0c\u8f93\u51fa `yes`\uff1b\u5426\u5219\u8f93\u51fa `no`\u3002\r\n\r\n\u5728\u6ee1\u8db3 $r \\le y$ \u7684\u524d\u63d0\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6765\u641e\u3002\u6309\u7167 $r$ \u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\uff0c\u5c06 $l$ \u4f9d\u6b21\u52a0\u5165\u7ebf\u6bb5\u6811\u5e76\u7ef4\u62a4\u5386\u53f2\u7248\u672c\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u53d6\u5f97\u4efb\u610f\u7684 $r \\le y$ \u60c5\u51b5\u4e0b\u7684\u7ebf\u6bb5\u6811\u3002\u5c31\u53ef\u4ee5\u8fdb\u884c\u76f8\u5e94\u7684\u8be2\u95ee\u3002\r\n## \u4ee3\u7801\r\n```cpp\r\n#include<cstdio>\r\n#include<algorithm>\r\nusing namespace std;\r\nconst int MAXN = 100000;\r\nconst int MAXK = 300000;\r\nconst int INF = (1<<30);\r\nstruct Segment{\r\n\tint l, r, p;\r\n\tSegment(int _l=0, int _r=0, int _p=0):l(_l), r(_r), p(_p){}\r\n}seg[MAXK + 5];\r\nbool operator < (Segment a, Segment b) {\r\n\treturn a.r < b.r;\r\n}\r\nstruct SegmentTree{\r\n\tSegmentTree *ch[2]; int mn;\r\n}tree[MAXK*20 + 5], *root[MAXK + 5], *NIL, *tcnt;\r\nvoid init() {\r\n\tNIL = tcnt = &tree[0];\r\n\tNIL->ch[0] = NIL->ch[1] = NIL;\r\n\tNIL->mn = -INF;\r\n}\r\nvoid insert(SegmentTree *rt1, SegmentTree *&rt2, int pos, int key, int le, int ri) {\r\n\trt2 = (++tcnt); *(rt2) = *(rt1);\r\n\tif( le == ri ) rt2->mn = max(rt2->mn, key);\r\n\telse {\r\n\t\tint mid = (le + ri) >> 1;\r\n\t\tif( pos <= mid )\r\n\t\t\tinsert(rt1->ch[0], rt2->ch[0], pos, key, le, mid);\r\n\t\telse insert(rt1->ch[1], rt2->ch[1], pos, key, mid+1, ri);\r\n\t\trt2->mn = min(rt2->ch[0]->mn, rt2->ch[1]->mn);\r\n\t}\r\n}\r\nint query(SegmentTree *rt, int le, int ri, int ql, int qr) {\r\n\tif( ql > ri || qr < le )\r\n\t\treturn INF;\r\n\telse if( ql <= le && ri <= qr )\r\n\t\treturn rt->mn;\r\n\tint mid = (le + ri) >> 1;\r\n\treturn min(query(rt->ch[0], le, mid, ql, qr), query(rt->ch[1], mid+1, ri, ql, qr));\r\n}\r\nint main() {\r\n\tinit(); int n, m, k;\r\n\tscanf(\"%d%d%d\", &n, &m, &k);\r\n\tfor(int i=1;i<=k;i++)\r\n\t\tscanf(\"%d%d%d\", &seg[i].l, &seg[i].r, &seg[i].p);\r\n\tsort(seg+1, seg+k+1); root[0] = NIL;\r\n\tfor(int i=1;i<=k;i++)\r\n\t\tinsert(root[i-1], root[i], seg[i].p, seg[i].l, 1, n);\r\n\tfor(int i=1;i<=m;i++) {\r\n\t\tint a, b, x, y;\r\n\t\tscanf(\"%d%d%d%d\", &a, &b, &x, &y);\r\n\t\tint p = upper_bound(seg+1, seg+k+1, Segment(0, y, 0)) - seg - 1;\r\n\t\tint q = query(root[p], 1, n, a, b);\r\n\t\tif( q >= x ) puts(q >= x ? \"yes\" : \"no\");\r\n\t\tfflush(stdout);\r\n\t}\r\n}\r\n```\r\n",
        "postTime": 1673942065,
        "uid": 932291,
        "name": "Tiw_Air_qwq",
        "ccfLevel": 0,
        "title": "CF1080F \u9898\u89e3"
    },
    {
        "content": "\u4e3b\u8981\u601d\u8def\uff1a\u79bb\u6563\u5316+\u4e3b\u5e2d\u6811\n\n\u8003\u8651\u5c06\u6240\u6709\u7ebf\u6bb5\u5de6\u7aef\u70b9\u79bb\u6563\u5316\uff0c\u4e3b\u5e2d\u6811\u7684\u7b2c $j$ \u4e2a\u6839\u7684\u53f6\u5b50\u8282\u70b9 $i$ \u8868\u793a\u7b2c $i$ \u4e2a\u96c6\u5408\u4e2d\u5de6\u7aef\u70b9\u5728\u79bb\u6563\u5316\u4e4b\u540e\u5927\u4e8e\u7b49\u4e8e $j$ \u7684\u7ebf\u6bb5\u4e2d\u53f3\u7aef\u70b9\u7684\u6700\u5c0f\u503c\u3002\n\n\u8fd9\u6837\u8bf4\u53ef\u80fd\u96be\u4ee5\u7406\u89e3\u3002\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee $a,b,x,y$\n\n\u6211\u4eec\u8003\u8651 $[a,b]$ \u4e2d\u7684\u6bcf\u4e2a\u96c6\u5408\uff0c\u5b83\u7b26\u5408\u6761\u4ef6\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u96c6\u5408\u4e2d\u5b58\u5728\u4e00\u6761\u7ebf\u6bb5\uff0c\u5de6\u7aef\u70b9\u5927\u4e8e $x$\uff0c\u53f3\u7aef\u70b9\u5c0f\u4e8e $y$\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u7ef4\u62a4\u5de6\u7aef\u70b9\u5927\u4e8e $x$ \u7684\u7ebf\u6bb5\u4e2d\u53f3\u7aef\u70b9\u7684\u6700\u5c0f\u503c\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408 $a$ \u5728 $(x,y)$ \u610f\u4e49\u4e0b\u7684\u7b54\u6848\u4e3a\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u5de6\u7aef\u70b9\u5927\u4e8e $x$ \u7684\u7ebf\u6bb5\u53f3\u7aef\u70b9\u6700\u5c0f\u503c\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811 $O(log n)$ \u66f4\u65b0\u3002\n\n\u63a5\u7740\u6211\u4eec\u67e5\u8be2 $[a,b]$ \u533a\u95f4\u6bcf\u4e2a\u96c6\u5408\u7684\u7b54\u6848\u5e76\u53d6\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u5b9e\u73b0\u3002\u82e5\u6700\u5927\u503c\u5c0f\u4e8e $y$ \uff0c\u7b54\u6848\u4e3a $yes$\uff0c\u5426\u5219\u5c31\u662f $no$\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5012\u5e8f\u63d2\u5165\u7ebf\u6bb5\uff0c\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u82e5\u5e72\u96c6\u5408\u53f3\u7aef\u70b9\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\uff0c\u8be2\u95ee\u65f6\u627e $x$ \u5728\u6211\u4eec\u79bb\u6563\u5316\u96c6\u5408\u4e2d\u7684 $lower\\_bound$ \u5373\u53ef\u3002\n\n\u611f\u89c9\u8fd9\u9053\u9898\u662f\u9ed1\u9898\u5df2\u7ecf\u8fdc\u8fdc\u9ad8\u4f30\u5b83\u4e86\u3002\n\n\u9632\u6b62\u6284\u88ad\uff0c\u4ece\u6211\u505a\u8d77\uff0c\u4ee5\u4e0b\u4ee3\u7801\u7ecf\u8fc7\u4e00\u4e9b\u5c0f\u4fee\u6539\uff0c\u53ea\u63d0\u4f9b\u601d\u8def\uff0c\u5e76\u4e0d\u80fd AC\uff0c\u8bf7\u8bfb\u8005\u4eec\u81ea\u884c\u601d\u8003 AC \u4ee3\u7801\u3002\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\nint n,m,k;\n\nstruct Segx\n{\n\tint l,r,ps;\n\tbool operator < (const Segx &a) const\n\t{\n\t\treturn l < a.l;\n\t}\n}Seg[300050];\n\nconst int MAXNODE = 1e7;\n\nstruct Prisident_Tree\n{\n\tint val[MAXNODE],lc[MAXNODE],rc[MAXNODE],pcnt;\n\tvoid Push_Up(int rt)\n\t{\n\t\tval[rt] = max(val[lc[rt]],val[rc[rt]]);\n\t}\n\tint Build(int rt,int l,int r)\n\t{\n\t\trt = ++ pcnt;\n\t\tif(l == r)\n\t\t{\n\t\t\tval[rt] = 1000000001;\n\t\t\treturn rt;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tlc[rt] = Build(0,l,mid);\n\t\trc[rt] = Build(0,mid + 1,r);\n\t\treturn rt;\n        \tPush_Up(rt);\n\t}\n\tvoid Update(int &rt,int rt0,int l,int r,int x,int valx)\n\t{\n\t\tif(!rt) rt = ++ pcnt;\n\t\tval[rt] = val[rt0];\n\t\tlc[rt] = lc[rt0]; rc[rt] = rc[rt0];\n\t\tif(l == r)\n\t\t{\n\t\t\tval[rt] = min(val[rt],valx);\n\t\t\treturn ;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tif(mid >= x) Update(lc[rt],lc[rt0],l,mid,x,valx);\n\t\telse Update(rc[rt],rc[rt0],mid + 1,r,x,valx);\n                Push_Up(rt);\n\t}\n\tint Query(int rt,int l,int r,int ll,int rr)\n\t{\n\t\tif(ll <= l && r <= rr) return val[rt];\n\t\tint mid = (l + r) >> 1;\n\t\tif(mid >= rr) return Query(lc[rt],l,mid,ll,rr);\n\t\tif(mid < ll) return Query(rc[rt],mid + 1,r,ll,rr);\n\t\treturn max(Query(lc[rt],l,mid,ll,rr),Query(rc[rt],mid + 1,r,ll,rr));\n\t}\n}tree;\n\nint lisan[300050];\nint root[300050];\n\nint main()\n{\n\tint n,m,k,scnt = 0;\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i = 1;i <= k; ++ i)\n\t{\n\t\tscanf(\"%d%d%d\",&Seg[i].l,&Seg[i].r,&Seg[i].ps);\n\t\tlisan[++ scnt] = Seg[i].l;\n\t}\n\tsort(lisan + 1,lisan + 1 + scnt); scnt = unique(lisan + 1,lisan + 1 + scnt) - lisan - 1;\n\troot[scnt + 1] = tree.Build(1,1,n);\n\tfor(int i = 1;i <= k; ++ i) Seg[i].l = lower_bound(lisan + 1,lisan + 1 + scnt,Seg[i].l) - lisan;\n\tsort(Seg + 1,Seg + 1 + k);\n\tint cpos = k;\n\tfor(int i = scnt;i >= 1; -- i)\n\t{\n\t\tbool fucked = 0;\n\t\twhile(cpos >= 1 && Seg[cpos].l >= i)\n\t\t{\n\t\t\ttree.Update(root[i],fucked ? root[i] : root[i + 1],1,n,Seg[cpos].ps,Seg[cpos].r); cpos --;\n\t\t\tfucked = 1;\n\t\t}\n\t\tif(!fucked) root[i] = root[i + 1];\n\t}\n\tfor(int i = 1;i <= m; ++ i)\n\t{\n\t\tint l,r,x,y; scanf(\"%d%d%d%d\",&l,&r,&x,&y);\n\t\tx = lower_bound(lisan + 1,lisan + 1 + scnt,x) - lisan;\n\t\tint ans = tree.Query(root[x],1,n,l,r);\n\t\tif(ans <= y) printf(\"yes\\n\"); else printf(\"no\\n\");\n\t}\n}\n```",
        "postTime": 1543195256,
        "uid": 25308,
        "name": "Wen_kr",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1080F \u3010Katya and Segments Sets\u3011"
    },
    {
        "content": "\u672c\u6765\u61d2\u5f97\u5199\u9898\u89e3\u7684\uff0c\u4f46\u7a81\u7136\u53d1\u73b0\u81ea\u5df1\u662f\u7b2c $441$ \u4e2a\u63d0\u4ea4\uff0c\u7b2c $144$ \u4e2a\u901a\u8fc7\uff0c\u95f2\u5f97\u65e0\u804a\u7eaa\u5ff5\u4e00\u4e0b(\n\n## \u9898\u9762\u63cf\u8ff0\n\n\u7ed9\u4f60 $n$ \u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u4e2d\u53f3\u82e5\u5e72\u4ece $l_i$ \u5230 $r_i$ \u7684\u7ebf\u6bb5\uff0c\u7ebf\u6bb5\u603b\u6570\u4e3a $k$\uff0c\u5171 $m$ \u6b21\u67e5\u8be2\uff0c\u6bcf\u6b21\u67e5\u8be2\u7b2c $a$ \u5230\u7b2c $b$ \u4e2a\u96c6\u5408\u4e2d\u7684\u662f\u5426\u6ee1\u8db3\u6240\u6709\u96c6\u5408\u90fd\u6709\u81f3\u5c11\u4e00\u6761\u7ebf\u6bb5\u5b8c\u5168\u5904\u4e8e $[l,r]$ \u533a\u95f4\u3002\n\n$1\\leq n,m\\leq 10^5,1\\leq k\\leq 3\\times 10^5,1\\leq l,r\\leq 10^9,1\\leq a,b \\leq n$\n\n## \u9898\u76ee\u5206\u6790\n\n\u6211\u4eec\u53d1\u73b0\u67e5\u8be2\u64cd\u4f5c\u76f8\u5f53\u4e8e\u67e5\u8be2\u4e00\u4e2a\u4e8c\u7ef4\u533a\u95f4\uff0c\u662f\u53ef\u6301\u4e45\u5316\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u73b0\u5728\u7684\u95ee\u9898\u5c31\u5728\u4e8e\uff0c\u6211\u4eec\u8be5\u9009\u62e9\u54ea\u4e00\u90e8\u5206\u4f5c\u4e3a\u4e0b\u6807\uff0c\u54ea\u4e00\u90e8\u5206\u4f5c\u4e3a\u53ef\u6301\u4e45\u5316\u7684\u7248\u672c\u6807\u53f7\uff0c\u54ea\u4e00\u90e8\u5206\u7528\u4f5c\u6743\u503c\u3002\n\n\u6211\u4eec\u5148\u6765\u8003\u8651\u6bcf\u4e2a\u7ebf\u6bb5\u80fd\u505a\u4ec0\u4e48\uff0c\u6211\u4eec\u5047\u8bbe\u5f53\u524d\u96c6\u5408\u6709\u4e24\u4e2a\u7ebf\u6bb5\uff0c\u5de6\u7aef\u70b9\u76f8\u7b49\uff0c\u53f3\u7aef\u70b9\u5206\u522b\u4e3a $r_1,r_2$\uff0c\u4e14 $r_1<r_2$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\uff0c$r_2$ \u7684\u8d21\u732e\u5b8c\u5168\u53ef\u4ee5\u5ffd\u89c6\u6389\uff0c\u539f\u56e0\u4e5f\u5f88\u7b80\u5355\uff0c\u5982\u679c\u5f53\u524d\u533a\u95f4 $[l,r]$ \u80fd\u591f\u5305\u542b $[l,r_2]$\uff0c\u90a3\u4e48\u4e5f\u4e00\u5b9a\u80fd\u5305\u542b $[l,r_1]$\uff0c\u4f46\u53cd\u8fc7\u6765\u5374\u4e0d\u4e00\u5b9a\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u53f3\u7aef\u70b9\u4f5c\u4e3a\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u6743\u503c\uff0c\u5bf9\u4e8e\u53f6\u5b50\u7ed3\u70b9\uff0c\u6211\u4eec\u8bb0\u5f55\u5bf9\u5e94\u7ebf\u6bb5\u53f3\u7aef\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u5bf9\u4e8e\u5176\u4ed6\u8282\u70b9\uff0c\u6211\u4eec\u7ef4\u62a4\u5176\u5de6\u53f3\u513f\u5b50\u6743\u503c\u7684\u6700\u5927\u503c\uff0c\u53ea\u8981\u5f53\u524d\u7684\u533a\u95f4\u7684\u6743\u503c\u8d85\u8fc7\u5f53\u524d\u67e5\u8be2\u7684 $r$\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u5408\u6cd5\u65b9\u6848\u3002\u53cd\u4e4b\u5408\u6cd5\u3002\n\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u7528\u53f3\u7aef\u70b9\u4f5c\u4e3a\u6743\u503c\u4e86\uff0c\u6240\u4ee5\u4e3a\u4e86\u8ba9\u4e0b\u6807\u662f\u533a\u95f4\uff0c\u6240\u4ee5\u53ea\u80fd\u8ba9 $a,b$ \u4f5c\u4e3a\u7ebf\u6bb5\u6811\u7684\u4e0b\u6807\u4e86\uff0c\u4e5f\u7b26\u5408\u4e0a\u8ff0\u7684\u6c42\u503c\u65b9\u6cd5\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u6bcf\u6b21\u67e5\u8be2 $[a,b]$ \u533a\u95f4\u53f3\u7aef\u70b9\u7684\u6700\u5927\u503c\u3002\n\n\u6700\u540e\u6211\u4eec\u8003\u8651\u5982\u4f55\u7528 $l$ \u7ef4\u62a4\u5386\u53f2\u7248\u672c\u6807\u53f7\uff0c\u6211\u4eec\u60f3\u6211\u4eec\u9700\u8981\u77e5\u9053\u4ec0\u4e48\uff0c\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5728\u4e0d\u8003\u8651\u5de6\u7aef\u70b9\u662f\u5426\u5408\u6cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u4f55\u5224\u65ad\u5f53\u524d\u533a\u95f4\u662f\u5426\u5408\u6cd5\u3002\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u662f\u9700\u8981\u60f3\u529e\u6cd5\u4fdd\u8bc1\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5168\u90e8\u5408\u6cd5\u3002\n\n\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\u8981\u6ee1\u8db3 $l_i\\geq l$\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u80fd\u60f3\u5230 $rt_l$ \u8fd9\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6240\u6709\u5de6\u7aef\u70b9 $\\geq l$ \u7684\u7ebf\u6bb5\uff0c\u6211\u4eec\u8003\u8651\u5c06\u5de6\u7aef\u70b9\u79bb\u6563\u5316\uff0c\u7136\u540e\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6bcf\u6b21\u7528\u6700\u5927\u7684\u66f4\u65b0\u7ebf\u6bb5\u6811\uff0c\u5c31\u76f4\u63a5\u4ee5\u4e0a\u4e00\u4e2a\u7248\u672c\u4e3a\u84dd\u672c\u66f4\u65b0\u5373\u53ef\u3002\n\n\u7531\u4e8e\u6211\u4eec\u79bb\u6563\u5316\u4e86\u5de6\u7aef\u70b9\uff0c\u6240\u4ee5\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u8981\u4e8c\u5206\u627e\u5230\u6700\u5c0f\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5de6\u7aef\u70b9\uff0c\u4ece\u8fd9\u4e2a\u5de6\u7aef\u70b9\u5f00\u59cb\u67e5\u8be2\uff0c\u800c\u4e14\u6ce8\u610f\u5982\u679c\u6ca1\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\uff0c\u8bf4\u660e\u4e00\u5b9a\u65e0\u89e3\u3002\n\n## Code\n\n\u6ce8\u610f\u7531\u4e8e\u6211\u4eec\u662f\u52a8\u6001\u5f00\u70b9\uff0c\u6240\u4ee5\u6743\u503c\u53d6\u6700\u5927\u503c\u7684\u65f6\u5019\u4e0d\u4f1a\u8003\u8651\u5230\u7a7a\u8282\u70b9\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ea\u8981\u5f53\u524d\u533a\u95f4\u6709\u4e00\u4e2a\u7a7a\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u65e0\u89e3\uff0c\u8981\u7279\u5224\u6389\u8fd9\u79cd\u60c5\u51b5\uff0c\u6240\u4ee5\u8981\u53e6\u5916\u7ef4\u62a4\u4e00\u4e2a $cnt_i$ \u8868\u793a\u5f53\u524d\u7ebf\u6bb5\u6811\u8282\u70b9\u6709\u591a\u5c11\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u53ea\u6709\u5f53\u53f6\u5b50\u8282\u70b9\u6ee1\u7684\u65f6\u5019\u624d\u53ef\u80fd\u6709\u89e3\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <queue>\nusing namespace std;\nint read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nconst int N = 3e5+5;\nint lsh[N],lx[N],rx[N],p[N];\nint rt[N];\nstruct aa{\n\tint lx,rx,p;\n\tbool operator<(const aa&x)const{\n\t\treturn lx>x.lx;\n\t}\n}line[N];\nint tot;\nstruct bb{\n\tint lc,rc,val,cnt;\n}node[N*40];\nint inf = 2e9;\nvoid pushup(int u){\n\tnode[u].val = max(node[node[u].lc].val,node[node[u].rc].val);\n\tnode[u].cnt = node[node[u].lc].cnt+node[node[u].rc].cnt;\n\tif(!node[u].lc&&!node[u].rc){\n\t\tnode[u].val = inf;\n\t}\n}\nvoid ins(int &u,int v,int l,int r,int pla,int x){\n\tu = ++tot;\n\tnode[u] = node[v];\n\tif(l==r){\n\t\tif(node[u].val==0){\n\t\t\tnode[u].val=x;\n\t\t}else{\n\t\t\tnode[u].val = min(x,node[u].val);\n\t\t}\n\t\tnode[u].cnt = 1;\n\t\treturn;\n\t}\n\tint mid = (l+r)/2;\n\tif(pla<=mid){\n\t\tins(node[u].lc,node[v].lc,l,mid,pla,x);\n\t}else{\n\t\tins(node[u].rc,node[v].rc,mid+1,r,pla,x);\n\t}\n\tpushup(u);\n}\nint n,m,k,cnt;\nint zhi[N];\nint ask(int val){\n\tint l=1,r=cnt;\n\tint ans=0;\n\twhile(l<=r){\n\t\tint mid = (l+r)/2;\n\t\tif(val<=zhi[mid]){\n\t\t\tans = mid;\n\t\t\tl = mid+1;\n\t\t}else{\n\t\t\tr = mid-1;\n\t\t}\n\t}\n\treturn ans;\n}\n\nint query(int u,int l,int r,int ll,int rr){\n\tif(!u){\n\t\treturn inf;\n\t}\n\tif(l==ll&&r==rr){\n\t\tif(node[u].cnt!=r-l+1){\n\t\t\treturn inf;\n\t\t}\n\t\treturn node[u].val;\n\t}\n\tint mid = (l+r)/2;\n\tif(rr<=mid){\n\t\treturn query(node[u].lc,l,mid,ll,rr);\n\t}else if(ll>mid){\n\t\treturn query(node[u].rc,mid+1,r,ll,rr);\n\t}else{\n\t\treturn max(query(node[u].lc,l,mid,ll,mid),query(node[u].rc,mid+1,r,mid+1,rr));\n\t}\n}\nint main(){\n\tn = read();m = read();k = read();\n\tfor(int i=1;i<=k;i++){\n\t\tline[i].lx = read();line[i].rx = read();line[i].p = read();\n//\t\tlx[i] = read();rx[i] = read();p[i] = read();\n\t\tlsh[i] = line[i].lx;\n\t}\n\tsort(lsh+1,lsh+1+k);\n\tint z = unique(lsh+1,lsh+1+k)-lsh-1;\n\tfor(int i=1;i<=k;i++){\n\t\tline[i].lx = lower_bound(lsh+1,lsh+1+z,line[i].lx)-lsh;\n\t}\n\tsort(line+1,line+1+k);\n\tfor(int i=1;i<=k;i++){\n\t\tif(line[i].lx!=line[i-1].lx){\n\t\t\tcnt++;\n\t\t\trt[cnt] = rt[cnt-1];\n\t\t\tzhi[cnt] = lsh[line[i].lx];\n\t\t}\n\t\tins(rt[cnt],rt[cnt],1,n,line[i].p,line[i].rx);\n\t}\n\tint a,b,x,y;\n\tfor(int i=1;i<=m;i++){\n\t\ta = read();b = read();x = read();y = read();\n\t\tint id = ask(x);\n\t\tif(id==0){\n\t\t\tcout<<\"no\"<<\"\\n\";\n\t\t}else{\n\t\t\tbool flg = (query(rt[id],1,n,a,b)<=y);\n\t\t\tif(flg){\n\t\t\t\tcout<<\"yes\"<<\"\\n\";\n\t\t\t}else{\n\t\t\t\tcout<<\"no\"<<\"\\n\";\n\t\t\t}\n\t\t}\n\t\tcout.flush();\n\t}\n\treturn 0;\n}\n```\n\n\u600e\u4e48\u611f\u89c9\u53c8\u5199\u7684\u597d\u957f\u554a\u3002\u3002\u3002",
        "postTime": 1670499289,
        "uid": 369399,
        "name": "yizhiming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u3010Katya and Segments Sets\u3011"
    },
    {
        "content": "\u4e3b\u5e2d\u6811\u7ec3\u624b\u597d\u9898\uff0c\u6240\u4ee5\u4e3a\u4ec0\u4e48\u662f\u9ed1\u7684$qwq$\n\n\u505a\u4e3b\u5e2d\u6811\u7684\u9898\u76ee\uff0c\u4e0d\u8981\u88ab\u6a21\u7248\u7ed9\u6b3a\u9a97\u4e86\uff0c\u4e3b\u5e2d\u6811\u672c\u8d28\u662f**\u53ef\u6301\u4e45\u5316**\u7ebf\u6bb5\u6811\uff0c\u4ed6\u4e0d\u4e00\u5b9a\u662f\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u5e9f\u8bdd\uff01\n\n\u6211\u4eec\u7684\u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u662f\uff1a\u4ee5\u96c6\u5408\u4e3a\u4e0b\u6807\uff0c\u6bcf\u4e00\u4e2a\u96c6\u5408\u5185\u6240\u6709\u7ebf\u6bb5\u7684$r$\u7684\u6700\u5c0f\u503c\u3002\n\n\u5bf9\u4e8e\u975e\u53f6\u5b50\u7ed3\u70b9\uff0c\u8fd8\u8981\u7ef4\u62a4\u4ed6\u513f\u5b50\u6743\u503c\u7684\u6700\u5927\u503c\u3002\n\n\u6211\u4eec\u5148\u6309\u7167\u6240\u6709\u7ebf\u6bb5\u7684$l$\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8fd9\u6837\u5b50\u53ef\u4ee5\u6d88\u9664$l$\u7684\u5f71\u54cd\u3002\n\n\u7136\u540e\u6309\u7167$l$\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u5c06$r$\u63d2\u5165\n\n\u8bbe$root[i]$\u4e3a\u7b2c$i$\u6b21\u63d2\u5165\u540e\u8fd9\u68f5\u4e3b\u5e2d\u6811\u7684\u6839\n\n\u6bcf\u4e00\u6b21\u8be2\u95ee\u5c31\u7b49\u4ef7\u4e8e\u8be2\u95ee$l\\geq x$\u65f6\u5bf9\u5e94\u7684\u4e3b\u5e2d\u6811\u533a\u95f4$(a,b)$\u7684\u6700\u5927\u503c\u662f\u5426$\\leq y$\u5c31\u597d\u5566\uff01\n\n\u90a3\u600e\u4e48\u6c42$l\\geq x$\u65f6\u5bf9\u5e94\u7684\u4e3b\u5e2d\u6811\u7684\u6839\u8282\u70b9\u5462\uff1f\n\n\u4e8c\u5206\u5c31\u597d\u5566!\n\n\u4ee3\u7801\u5982\u4e0b:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=3e5+10;\nint n,m,cnt,k;\nstruct node{\n    int l,r,sum=1999999999;\n}g[maxn*20];\ninline int read(){\n    register int x=0,f=1;char ch=getchar();\n    while (ch<'0'||ch>'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch<='9'&&ch>='0') x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nstruct value{\n    int x,y,id;\n}x[maxn];\nbool cmp(value v1,value v2){\n    return v1.x>v2.x;\n}\nint root[maxn];\nvoid update(int num,int wht,int &rt,int l,int r){\n    g[++cnt]=g[rt];\n    if (l==r){g[cnt].sum=min(g[rt].sum,wht);rt=cnt;return;}\n    rt=cnt;int mid=l+r>>1;\n    if (num<=mid) update(num,wht,g[rt].l,l,mid);\n    else update(num,wht,g[rt].r,mid+1,r);\n    g[rt].sum=max(g[g[rt].l].sum,g[g[rt].r].sum);\n}\nint query(int rt,int l,int r,int lb,int rb){\n    if (lb>=l&&rb<=r) return g[rt].sum;\n    if (lb>r||l>rb) return -1999999999;\n    int mid=lb+rb>>1;\n    return max(query(g[rt].l,l,r,lb,mid),query(g[rt].r,l,r,mid+1,rb));\n}\nint main(){\n    cnt=1;\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=k;i++){\n        x[i].x=read(),x[i].y=read(),x[i].id=read();\n    }\n    sort(x+1,x+1+k,cmp);\n    for (int i=1;i<=k;i++){\n        //cout<<\"wht:\"<<x[i].x<<\" \"<<x[i].y<<\" \"<<x[i].id<<endl;\n        root[i]=root[i-1];\n        update(x[i].id,x[i].y,root[i],1,n);\n    }\n    while (m--){\n        int A=read(),B=read(),X=read(),Y=read();\n        int lb=1,asn=-1,rb=k;\n        while (lb<=rb){\n            int mid=lb+rb>>1;\n            if (x[mid].x>=X){\n                lb=mid+1;asn=mid;\n            }else{\n                rb=mid-1;\n            }\n        }\n        int ans=query(root[asn],A,B,1,n);\n        //cout<<\"pos:\"<<asn<<\" \"<<ans<<endl;\n        if (ans<=Y) printf(\"yes\\n\"); else printf(\"no\\n\");\n        fflush(stdout);\n    }\n    return 0;\n}\n\n```",
        "postTime": 1543921679,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1080F \u3010Katya and Segments Sets\u3011"
    },
    {
        "content": "UPDATA\uff1a\u6ce8\u610f\u4e3b\u5e2d\u6811\u7684root\u6570\u7ec4\u7b49\u4e8e**\u63d2\u5165\u6b21\u6570**\u800c\u4e0d\u662f\u96c6\u5408\u4e2a\u6570\uff1b\u4ee5\u53ca\u4e4b\u524d\u770b\u9519\u9898\uff0c\u8fd9\u4e2a\u9898\u95ee\u7684\u662f\u201c\u662f\u4e0d\u662f\u6bcf\u4e00\u4e2a\u96c6\u5408\u90fd\u5b58\u5728\u4e00\u4e2a\u7ebf\u6bb5\u5728\u7ed9\u5b9a\u533a\u95f4\u5185\u201d\uff0c\u800c\u4e0d\u662f\u201c\u5b58\u5728\u4e00\u4e2a...\u201d\uff08~~\u6628\u5929\u8fd8\u8bf4\u9898\u610f\u76f8\u5f53\u660e\u786e\u6765\u7740~~\uff09\uff0c\u9898\u76ee\u7ffb\u8bd1\u4e0a\u4e5f\u5199\u9519\u4e86\uff08\u6240\u4ee5\u6ca1\u8fc7\u5ba1\uff1f\uff09\u7136\u540e\u4e5f\u6539\u6389\u4e86\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u8fc7\u3002\n\n\u6628\u5929\u6253CF\u8fd9\u4e2a\u9898\u5199\u4e86\u534a\u5929\u53d1\u73b0\u662f\u5047\u7b97\u6cd5\uff0c\u7136\u540e\u5c31\u770b\u4e86\u5b98\u65b9\u9898\u89e3\uff08\u8d3c\u96be\u61c2\uff09\u53d1\u73b0\u597d\u5999\uff0c\u628a\u8fd9\u9898\u7684\u7ffb\u8bd1\u548c\u9898\u89e3\u4e00\u8d77\u5199\u4e86\n\n\u9898\u610f~~\u76f8\u5f53\u660e\u786e~~\u5c31\u4e0d\u591a\u8bf4\u4e86\n\n\u5148\u628a\u7ebf\u6bb5\u6309**\u5de6\u7aef\u70b9**\u6392\u5e8f\uff0c\u5de6\u7aef\u70b9\u76f8\u540c\u7684\u987a\u5e8f\u65e0\u6240\u8c13\n\n#### \u8003\u8651\u600e\u4e48\u56de\u7b54\u4e00\u4e2a\u8be2\u95ee\uff1a\u5148\u627e\u5230\u5de6\u7aef\u70b9$\\ge a$\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u8003\u8651\u4ece\u5b83\u5f00\u59cb\u53f3\u9762\uff08\u6570\u7ec4\u6392\u8fc7\u5e8f\u4e86\uff09\u6240\u6709\u53f3\u7aef\u70b9$\\le b$\u7684\u7ebf\u6bb5\u4e2d\u6709\u6ca1\u6709\u7f16\u53f7\u5728$a$\u3001$b$\u4e4b\u95f4\u7684\n\n\u76f4\u63a5\u505a\u80af\u5b9aTLE\n\n\u5bf9\u6bcf\u4e2a\u96c6\u5408\u5b9a\u4e49\u4e00\u4e2a$W$\uff0c\u8868\u793a\u8fd9\u4e2a\u96c6\u5408\u4e2d\u5de6\u7aef\u70b9$\\ge a$\u7684\u7ebf\u6bb5\u4e2d\uff0c\u53f3\u7aef\u70b9\u7684**\u6700\u5c0f\u503c**\n\n## \u7ebf\u6bb5\u6811\uff01\uff01\uff01\n\n$a$\u3001$b$\u4e4b\u95f4\u8fd9\u4e2a\u6761\u4ef6\u7528**\u7ebf\u6bb5\u6811**\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\uff08\u7ebf\u6bb5\u6811**\u5bf9\u96c6\u5408**\u7ef4\u62a4$W$\u7684\u6700\u5927\u503c\uff09\u6ce8\u610f\u8fd9\u4e2a\u662f\u5173\u952e\uff0c\u7b54\u6848\u6309\u96c6\u5408\u7ef4\u62a4\n\n------------\n\n\u600e\u4e48\u7ef4\u62a4$W$\u554a\uff08$a$\u662f\u6539\u53d8\u7684,$W$\u4e5f\u4f1a\u8ddf\u7740\u53d8\uff09\n\n\u4e0d\u77e5\u9053**\u5f3a\u5236\u5728\u7ebf**\u548c$10^5$\u6709\u6ca1\u6709\u8ba9\u4f60\u60f3\u5230\u4ec0\u4e48\n\n## \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff01\uff01\uff01\n\n\u56de\u60f3\u4e00\u4e0b\u5f00\u59cb\u90a3\u4e2a\u6392\u8fc7\u5e8f\u7684\u6570\u7ec4\uff0c\u73b0\u5728\u5012\u5e8f\u628a\u5176\u4e2d\u7684\u7ebf\u6bb5\u63d2\u5165\uff08\u8ba1\u5165\u7b54\u6848\uff09\uff0c\u8fd9\u6837\u66f4\u65b0\u7684\u65f6\u5019\u5c31\u662f\u5de6\u7aef\u70b9**\u968f\u63d2\u5165\u987a\u5e8f\u5411\u5de6\u79fb**\n\n### \u600e\u4e48\u56de\u7b54\u8be2\u95ee\u5462\n\n\u5148\u5728\u4e8c\u5206\u627e\u5230\u54ea\u4e9b\u7ebf\u6bb5\u5de6\u7aef\u70b9$\\ge a$\uff0c\u7136\u540e\u5728\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0a\u627e\u5230\u6700\u9760\u5de6\u7684\uff08\u7b26\u5408\u6761\u4ef6\u7684\uff09\u7ebf\u6bb5\u5bf9\u5e94\u7684\u7248\u672c\uff08\u5c31\u662f\u7b2c$n-id+1$\u4e2a\u7248\u672c\uff0c$id$\u662f\u7ebf\u6bb5\u7684\u7f16\u53f7\uff09\uff0c\u7531\u4e8e\u662f\u6309\u5de6\u7aef\u70b9\u5012\u5e8f\u63d2\u5165\uff0c\u8fd9\u4e2a\u7248\u672c\u4e00\u5b9a\u5305\u542b\u4e86\u6240\u6709\u5de6\u7aef\u70b9$\\ge a$\u7684\u7ebf\u6bb5\uff0c\u7136\u540e\u67e5\u4e00\u4e0b$[a,b]$\u4e4b\u95f4\u7684\u6700\u5c0f\u503c\u770b\u770b\u662f\u4e0d\u662f$\\le b$\u5c31\u884c\u4e86\n\n\u6ce8\u610f\u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u5728$a$\u5de6\u8fb9\u7684\u8bdd\uff0c\u76f4\u63a5no\uff08\u8981\u4e0d\u53ef\u80fd\u67e5\u5230\u7b2c0\uff08\u89c6\u5199\u6cd5\u4e0d\u540c\u53ef\u80fd\u662f01\uff09\u4e2a\u7248\u672c\u53bb\u7136\u540eRE\uff09",
        "postTime": 1543161584,
        "uid": 9517,
        "name": "a2956331800",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1080F \u3010Katya and Segments Sets\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a $k$ \u6761\u7ebf\u6bb5\uff0c\u5206\u6210 $n$ \u7ec4\uff0c\u6bcf\u7ec4\u6807\u53f7 $1,2,3,\\dots,n$\uff0c\u6bcf\u6b21\u8be2\u95ee\u6807\u53f7\u4e3a $a,a+1,a+2,\\dots,b$ \u7684\u96c6\u5408\u4e2d\uff0c\u662f\u5426\u90fd\u6709\u81f3\u5c11\u4e00\u6761\u7ebf\u6bb5\u6ee1\u8db3 $x\\le l\\le r\\le y$\uff0c\u5f3a\u5236\u5728\u7ebf\u3002\n\n## \u601d\u8def\n\n~~\u5c45\u7136\u8fd8\u80fd\u7528\u4ea4\u4e92\u6765\u5f3a\u5236\u5728\u7ebf\u3002~~\n\n\u770b\u5230\u8fd9\u9053\u9898\u7b2c\u4e00\u65f6\u95f4\u60f3\u5230\u7684\u662f\u4e3b\u5e2d\u6811\uff0c\u56e0\u4e3a\u8fd9\u9053\u9898\u5728\u533a\u95f4\u91cc\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u95ee\u9898\u3002\u4e00\u5f00\u59cb\uff0c\u6211\u60f3\u5230\u7684\u662f\u6309\u7167\u7ebf\u6bb5\u6240\u5c5e\u96c6\u5408\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u4f9d\u6b21\u585e\u5230\u4e3b\u5e2d\u6811\u91cc\u9762\uff0c\u4f46\u8fd9\u6837\u8c8c\u4f3c\u53ea\u80fd\u89e3\u51b3\u8be2\u95ee\u96c6\u5408\u91cc\u6709\u591a\u5c11\u6761\u7ebf\u6bb5\u6ee1\u8db3\u6761\u4ef6\uff0c\u5e76\u4e0d\u80fd\u5224\u65ad\u662f\u5426\u6bcf\u4e2a\u96c6\u5408\u90fd\u5305\u542b\u4e00\u6761\u6ee1\u8db3\u8981\u6c42\u7684\u7ebf\u6bb5\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u8f6c\u5316\u95ee\u9898\u3002\n\n\u601d\u8003\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u96c6\u5408\u600e\u4e48\u529e\uff0c\u663e\u7136\u53ef\u4ee5\u8fd9\u6837\uff1a\u5148\u5bf9\u4e8e\u6240\u6709\u53f3\u7aef\u70b9\u5c0f\u4e8e\u7b49\u4e8e $i$ \u7684\u7ebf\u6bb5\uff0c\u6c42\u51fa\u5b83\u4eec\u6700\u5927\u7684\u90a3\u4e2a\u5de6\u7aef\u70b9 $l$\uff0c\u8bb0\u4e3a $w_i$\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u5982\u679c\u6ee1\u8db3 $x\\le w_y$\uff0c\u5219\u8bf4\u660e\u6709\u81f3\u5c11\u4e00\u6761\u6ee1\u8db3\u8981\u6c42\u7684\u7ebf\u6bb5\uff0c\u5982\u679c $x>w_y$\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u3002\n\n\u8bc1\u660e\u4e00\u4e0b\u8fd9\u4e2a\u65b9\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u9996\u5148\u7531\u4e8e $w_y$ \u8868\u793a\u7684\u662f\u53f3\u7aef\u70b9\u5c0f\u4e8e\u7b49\u4e8e $y$ \u7684\u7ebf\u6bb5\u4e2d\u6700\u5927\u7684\u5de6\u7aef\u70b9\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9 $r$ \u5f88\u660e\u663e\u90fd\u662f\u6ee1\u8db3 $r\\le y$ \u7684\u3002\u5982\u679c\u5728\u8fd9\u4e9b\u7ebf\u6bb5\u4e2d\u5b58\u5728\u4e00\u6761\u6ee1\u8db3\u8981\u6c42\u7684\u7ebf\u6bb5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b58\u5728\u4e00\u4e2a $l$ \u5927\u4e8e\u7b49\u4e8e $x$\uff0c\u90a3\u4e48 $w_y$ \u663e\u7136\u4e00\u5b9a\u662f\u5927\u4e8e\u7b49\u4e8e $l$ \u7684\uff0c\u800c\u5982\u679c\u4e0d\u5b58\u5728\u4e00\u6761\u6ee1\u8db3\u8981\u6c42\u7684\u7ebf\u6bb5\uff0c\u4e5f\u5c31\u662f\u8bf4\u6240\u6709 $l$ \u90fd\u5c0f\u4e8e $x$\uff0c\u90a3\u4e48 $w_y$ \u4e5f\u5c31\u4e00\u5b9a\u662f\u5c0f\u4e8e $x$ \u7684\u4e86\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u5c06\u8fd9\u4e2a\u65b9\u6cd5\u63a8\u5e7f\u5230\u591a\u4e2a\u96c6\u5408\u3002\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u4e0a\u9762\u63d0\u5230\u7684\u8fd9\u4e2a\u65b9\u6cd5\u6709\u70b9\u50cf\u524d\u7f00\u548c\uff0c\u8fd9\u542f\u53d1\u6211\u4eec\u7528\u4e3b\u5e2d\u6811\u6765\u7ef4\u62a4\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u7528\u4e3b\u5e2d\u6811\u7b2c $i$ \u4e2a\u6839\u7684\u7b2c $j$ \u4e2a\u513f\u5b50\u8868\u793a\u96c6\u5408 $j$ \u4e2d\u6240\u6709\u53f3\u7aef\u70b9\u5c0f\u4e8e\u7b49\u4e8e $i$ \u7684\u7ebf\u6bb5\u4e2d\u5de6\u7aef\u70b9\u7684\u6700\u5927\u503c\uff08\u4e5f\u5c31\u662f\u4e0a\u9762\u7684 $w_i$\uff09\uff0c\u8fd9\u6837\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee $a,b,x,y$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u770b\u7b2c $y$ \u68f5\u7ebf\u6bb5\u6811\u7684 $[a,b]$ \u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u503c\u662f\u5426\u5168\u90fd\u5927\u4e8e\u7b49\u4e8e $x$ \u5c31\u884c\u4e86\uff0c\u4f46\u6211\u4eec\u603b\u4e0d\u80fd\u628a\u8fd9\u4e9b\u53f6\u5b50\u8282\u70b9\u5168\u90fd\u904d\u5386\u4e00\u6b21\u5427\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u8fd9\u4e9b $w_y$ \u7684\u6700\u5c0f\u503c\uff0c\u5982\u679c\u8fd9\u4e2a\u6700\u5c0f\u503c\u90fd\u662f\u5927\u4e8e\u7b49\u4e8e $x$ \u7684\uff0c\u90a3\u4e00\u5b9a\u6240\u6709\u96c6\u5408\u91cc\u90fd\u5305\u542b\u4e00\u6761\u6ee1\u8db3\u8981\u6c42\u7684\u7ebf\u6bb5\uff0c\u5982\u679c\u8fd9\u4e2a\u6700\u5c0f\u503c\u5c0f\u4e8e $x$\uff0c\u5c31\u8bf4\u660e\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u4e0d\u5b58\u5728\u4e00\u6761\u6ee1\u8db3\u8981\u6c42\u7684\u7ebf\u6bb5\u3002\n\n\u5bf9\u4e86\uff0c\u7531\u4e8e\u53f3\u7aef\u70b9\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5efa\u6811\u65f6\u53ef\u4ee5\u7528\u4e0b\u6807\u6765\u4ee3\u66ff\uff0c\u5728\u8be2\u95ee\u65f6\u4e8c\u5206\u4e00\u4e0b\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u6839\u5c31\u884c\u4e86\u3002\n\n\u8fd8\u6709\u4e00\u70b9\uff0c\u5982\u679c\u5728\u67e5\u8be2\u65f6\u8bbf\u95ee\u5230\u4e86\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u8282\u70b9\uff0c\u800c\u5b83\u5bf9\u5e94\u7684\u533a\u95f4\u53c8\u5305\u542b\u4e86\u4e00\u90e8\u5206\uff08\u6216\u5168\u90e8\uff09\u8981\u67e5\u8be2\u7684\u533a\u95f4\uff0c\u5219\u8bf4\u660e\u88ab\u5b83\u5305\u542b\u7684\u8fd9\u90e8\u5206\u533a\u95f4\u91cc\u4e0d\u5b58\u5728\u4e00\u6761\u53f3\u7aef\u70b9\u5c0f\u4e8e\u7b49\u4e8e $y$ \u7684\u7ebf\u6bb5\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u6781\u5c0f\u503c\u5c31\u884c\u4e86\uff0c\u5728 pushup \u7684\u65f6\u5019\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u5de6\u513f\u5b50\u6216\u662f\u53ea\u6709\u53f3\u513f\u5b50\uff0c\u90a3\u4e5f\u76f4\u63a5\u8d4b\u6210\u4e00\u4e2a\u6781\u5c0f\u503c\u5c31\u884c\u4e86\uff0c\u8fd9\u6837\u5982\u679c\u5b83\u88ab\u8981\u67e5\u8be2\u7684\u533a\u95f4\u5b8c\u5168\u5305\u542b\uff0c\u8fd4\u56de\u7684\u503c\u624d\u6b63\u786e\uff08\u9053\u7406\u540c\u4e0a\uff09\u3002\n\n\u5177\u4f53\u7684\u8fd8\u662f\u770b\u4ee3\u7801\u5427\uff0c\u6211\u8bed\u6587\u6709\u70b9\u5dee\uff0c\u53ef\u80fd\u8868\u8ff0\u4e0d\u592a\u6e05\u695a\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 3e5 + 10, inf = 0x3f3f3f3f;\nstruct Segment\n{\n\tint l;\n\tint r;\n\tint p;\n\tbool operator < (Segment const & x) const\n\t{\n\t\treturn r == x.r ? (l == x.l ? p < x.p : l < x.l) : r < x.r;\n\t}\n};\nstruct SegTree\n{\n\tint ls;\n\tint rs;\n\tint dat;\n};\nSegTree tree[N*30];\nSegment q[N];\nint n, m, k, tot, c[N], rt[N];\ninline void push_up(int i)\n{\n\tif(tree[i].ls && tree[i].rs)//\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u53ea\u6709\u540c\u65f6\u6709\u5de6\u53f3\u513f\u5b50\u65f6\u624d\u53d6\u5b83\u4eec\u7684\u8f83\u5c0f\u503c\uff0c\u5426\u5219\u90fd\u76f4\u63a5\u8d4b\u6210 0\n\t\ttree[i].dat = min(tree[tree[i].ls].dat, tree[tree[i].rs].dat);\n\telse\n\t\ttree[i].dat = 0;\n}\nvoid update(int &i, int p, int l, int r, int x, int k)\n{\n\ti = ++tot;\n\ttree[i] = tree[p];\n\tif(l == r)\n\t{\n\t\ttree[i].dat = max(tree[i].dat, k);\n\t\treturn;\n\t}\n\tint mid = (l+r)>>1;\n\tif(x <= mid)\n\t\tupdate(tree[i].ls, tree[p].ls, l, mid, x, k);\n\telse\n\t\tupdate(tree[i].rs, tree[p].rs, mid+1, r, x, k);\n\tpush_up(i);\n}\nint query(int i, int l, int r, int x, int y)\n{\n\tif(!i)//\u4e0a\u9762\u8bb2\u8fc7\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u6781\u5c0f\u503c\n\t\treturn 0;\n\tif(x <= l && y >= r)\n\t\treturn tree[i].dat;\n\tint mid = (l+r)>>1, ans = inf;\n\tif(x <= mid)\n\t\tans = min(ans, query(tree[i].ls, l, mid, x, y));\n\tif(mid+1 <= y)\n\t\tans = min(ans, query(tree[i].rs, mid+1, r, x, y));\n\treturn ans;\n}\nint main()\n{\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor(int i = 1; i <= k; i++)\n\t{\n\t\tscanf(\"%d%d%d\", &q[i].l, &q[i].r, &q[i].p);\n\t\tc[i] = q[i].r;\n\t}\n\tsort(c+1, c+1+k);\n\tsort(q+1, q+1+k);\n\tfor(int i = 1; i <= k; i++)\n\t\tupdate(rt[i], rt[i-1], 1, n, q[i].p, q[i].l);\n\twhile(m--)\n\t{\n\t\tint a, b, x, y;\n\t\tscanf(\"%d%d%d%d\", &a, &b, &x, &y);\n\t\ty = upper_bound(c+1, c+1+k, y)-c-1;\n\t\tif(y == 0)\n\t\t\tprintf(\"no\\n\");\n\t\telse\n\t\t\tif(query(rt[y], 1, n, a, b) < x)\n\t\t\t\tprintf(\"no\\n\");\n\t\t\telse\n\t\t\t\tprintf(\"yes\\n\");\n\t\tfflush(stdout);\n\t}\n\treturn 0;\n}\n```\n\n\u5173\u4e8e`y = upper_bound(c+1, c+1+k, y)-c-1;`\u8fd9\u4e00\u53e5\uff0c\u6211\u770b\u5230\u6709\u7684\u5927\u4f6c\u662f\u624b\u5199\u7684\u4e8c\u5206\uff0c\u8fd9\u6837\u5b50\u5c11\u4e86\u4e00\u4e2a\u6392\u5e8f\uff0c\u5e38\u6570\u4f1a\u5c0f\u4e00\u70b9\uff08~~\u7136\u800c\u56e0\u4e3a\u6211\u61d2\u6240\u4ee5\u5c31\u6ca1\u5199~~\uff09\u3002\n\n## \u53cd\u601d\n\n\u601d\u7ef4\u8fd8\u4e0d\u591f\u5f00\u9614\uff0c\u6ca1\u6709\u60f3\u5230\u8f6c\u5316\u95ee\u9898\uff0c\u867d\u7136\u90fd\u60f3\u5230\u4e3b\u5e2d\u6811\u4e0a\u53bb\u4e86\uff0c\u4f46\u5c31\u662f\u641e\u4e0d\u51fa\u6765\uff0c\u5bf9\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u7406\u89e3\u8fd8\u4e0d\u591f\u6df1\u5165\uff0c\u5e94\u5f53\u518d\u591a\u52a0\u7ec3\u4e60\u624d\u884c\u3002",
        "postTime": 1609228882,
        "uid": 183235,
        "name": "Islauso",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1080F \u3010Katya and Segments Sets\u3011"
    },
    {
        "content": "\u597d\u9898\u554a\u597d\u9898\uff01\n\n\u521a\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a $l$ \u7ef4\u62a4\u4e00\u4e2a\u6700\u5c0f\u7684 $r$ \u503c\uff0c\u7136\u540e\u67d0\u4e2a\u533a\u95f4\u662f\u5426\u5408\u6cd5\u5c31\u53ef\u4ee5\u770b\u505a $\\ge x$ \u7684\u6700\u5c0f\u503c\u662f\u5426 $\\le y$\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u5916\u5c42\u533a\u95f4\u5c31\u8981\u6811\u5957\u6811\u4e86\uff0c\u663e\u7136\u4e0d\u884c\u3002\n\n\u6b63\u89e3\uff1a\u5148\u628a\u6240\u6709\u7ebf\u6bb5\u6309\u7167 $l$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u6bcf\u6b21\u8be2\u95ee $x$ \u7684\u65f6\u5019\uff0c\u53ea\u8003\u8651\u5de6\u7aef\u70b9$\\ge x$ \u7684\u6240\u6709\u7ebf\u6bb5\u3002\u8fd9\u53ef\u4ee5\u4e8c\u5206\u627e\u5230\u3002\u7136\u540e\u5c31\u662f\u770b\u540e\u7f00\u7684\u6240\u6709\u7ebf\u6bb5\u4e2d\uff0c$[a,b]$ \u96c6\u5408\u7684\u53f3\u7aef\u70b9\u6700\u5c0f\u503c\u7684\u533a\u95f4\u6700\u5927\u503c\u662f\u5426 $\\le y$ \u5373\u53ef\u3002\u8fd9\u53ef\u4ee5\u4e3b\u5e2d\u6811\u5b9e\u73b0\u3002\n\n\u8fd8\u6709\u7b2c\u4e00\u6b21\u505a\u5f3a\u5236\u5728\u7ebf\u7684\u4ea4\u4e92\u9898\uff0c\u53ea\u8981\u52a0\u4e0a\u4e00\u53e5\u8bdd\u5c31\u884c\u4e86\uff0c\u522b\u7684\u90fd\u4e00\u6837\u3002\n\n\u8fd8\u6709\uff0c\u6570\u7ec4\u8d4b\u503c\u7684\u65f6\u5019\u4e0d\u8981\u624b\u61d2\u3002\n\n```cpp\nint mx[M]={INF};\n```\n\u867d\u7136\u53ea\u6709 $mx[0]$ \u7684\u503c\u4e3a $INF$ \uff0c\u5176\u5b83\u90fd\u662f 0\uff0c\u4e0d\u8fc7\u8fd8\u662f\u4f1a\u8d4b\u503c\u4e00\u904d\u7684\u3002\u8fd9\u4f1a\u4f7f\u8f93\u51fa\u5927\u5c0f\u7279\u522b\u5927\uff0c\u56e0\u4e3a\u8fd9\u4e2aCE\u4e86\u597d\u51e0\u6b21\u3002\n\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define N 300005\n#define M N*20\n#define mid ((l+r)>>1)\nusing namespace std;\n\ninline void rd(int &X){\n    X=0;int w=0;char ch=0;\n    while(!isdigit(ch))w|=ch=='-',ch=getchar();\n    while( isdigit(ch))X=(X<<3)+(X<<1)+(ch^48),ch=getchar();\n    X=w?-X:X;\n}\n\nint n,m,k,cnt;\nstruct nd{int l,r,p;}a[N];\nint B[N],rt[N],ls[M],rs[M],mx[M],mn[M];\n\nbool cmp(nd a,nd b){\n\treturn a.l<b.l;\n}\nvoid ins(int o,int &p,int x,int d,int l=1,int r=n){\n\tmn[p=++cnt]=min(mn[o],d);ls[p]=ls[o],rs[p]=rs[o];if(l==r) return mx[p]=mn[p],void();\n\tx<=mid ? ins(ls[o],ls[p],x,d,l,mid) : ins(rs[o],rs[p],x,d,mid+1,r); mx[p]=max(mx[ls[p]],mx[rs[p]]);\n}\nint ask(int p,int L,int R,int l=1,int r=n){\n\tif(!p or (L<=l and r<=R)) return mx[p]; int v=0;\n\tif(L<=mid) v=max(v,ask(ls[p],L,R,l,mid));\n\tif(R >mid) v=max(v,ask(rs[p],L,R,mid+1,r));\n\treturn v;\n}\nsigned main(){\n\tmx[0]=mn[0]=2e9;\n\trd(n);rd(m);rd(k);\n\tfor(int i=1;i<=k;i++)\n\t\trd(a[i].l),rd(a[i].r),rd(a[i].p);\n\tsort(a+1,a+1+k,cmp);\t\n\tfor(int i=k;i;i--)\n\t\tins(rt[i+1],rt[i],a[i].p,a[i].r),B[i]=a[i].l;\n\twhile(m--){\n\t\tint a,b,x,y;rd(a);rd(b);rd(x);rd(y);\n\t\tint now=lower_bound(B+1,B+1+k,x)-B;\n\t\task(rt[now],a,b)<=y ? puts(\"yes\") : puts(\"no\");\n\t\tfflush(stdout);\n\t}\n}\n```",
        "postTime": 1545038802,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "{CF\u626b\u9ed1\u884c\u52a8}[CF1080F]Katya and Segments Sets\u2014\u2014\u4e3b\u5e2d\u6811"
    },
    {
        "content": "## CF1080F \u9898\u89e3\n\n##### $\\text{Description}$\n\n\u7ed9\u5b9a $n$ \u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u91cc\u6709\u82e5\u5e72\u6761\u7ebf\u6bb5\uff0c\u5171\u6709 $k$ \u6761\uff0c$m$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u5b9a $a,b,x,y$\uff0c\u8be2\u95ee\u7f16\u53f7\u5728 $[a,b]$ \u5185\u7684\u96c6\u5408\u662f\u5426\u90fd\u6709\u4e00\u6761\u7ebf\u6bb5\u5728 $[x,y]$ \u5185\u3002\n\n$1\\le n,m\\le 10^5,1\\le k\\le 3\\times 10^5$\n\n##### $\\text{Solution}$\n\n\u9996\u5148\u5206\u6790\uff0c\u82e5\u6709\u67d0\u4e2a\u96c6\u5408\u5185\u6709\u4e00\u6761\u7ebf\u6bb5\u5728 $[x,y]$ \u5185\uff0c\u5219\u8981\u6c42\u5176\u4e2d\u6240\u6709\u6ee1\u8db3 $l\\in[x,y]$ \u7684\u7ebf\u6bb5\u4e2d\uff0c$r$ \u7684\u6700\u5c0f\u503c $\\in[x,y]$\u3002\u5b9e\u9645\u4e0a\uff0c\u7531\u4e8e $r\\ge l$ \u4e00\u5b9a\u6210\u7acb\uff0c\u6240\u4ee5\u4e3a\u4e86\u65b9\u4fbf\uff08\u8be2\u95ee\u4e00\u4e2a\u524d\u7f00\u901a\u5e38\u6bd4\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u6765\u7684\u7b80\u5355\uff09\uff0c\u6211\u4eec\u5c06 $l\\in[x,y]$ \u8fd9\u4e00\u6761\u4ef6\u6539\u6210 $l\\in [x,+\\infty]$\uff0c\u8fd9\u91cc\u7684 $+\\infty$ \u5728\u5b9e\u73b0\u4e2d\u53ef\u4ee5\u770b\u4f5c\u662f\u6700\u5927\u7684 $l$\u3002\n\n\u56e0\u6b64\uff0c\u5bf9\u4e8e\u4e24\u6761\u7ebf\u6bb5 $[l_x,r_x],[l_y,r_y]$\uff0c\u82e5 $l_x=l_y$\uff0c\u5219\u6211\u4eec\u53ea\u9700\u8003\u8651 $r$ \u5c0f\u7684\u90a3\u4e00\u6761\u7ebf\u6bb5\u3002\n\n\u56de\u5230\u95ee\u9898\u672c\u8eab\uff0c\u8fd9\u79cd\u591a\u7ef4\u5ea6\u9650\u5236\u7684\u9898\u76ee\u4e00\u822c\u53ef\u4ee5\u7528\u6392\u5e8f\u6765\u53bb\u9664\u67d0\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5f71\u54cd\uff0c\u6ce8\u610f\u5230\u6211\u4eec\u5c06\u8be2\u95ee\u4e2d\u5bf9 $l$ \u7684\u9650\u5236\u53d8\u6210\u4e86\u4e00\u4e2a\u540e\u7f00/\u524d\u7f00\uff0c\u6211\u4eec\u5c06\u6240\u6709\u7ebf\u6bb5\u6309 $l$ \u964d\u5e8f\u6392\u5217\uff0c\u5219\u8be2\u95ee\u4e2d\u5bf9 $l$ \u7684\u9650\u5236\u662f\u4e00\u4e2a\u524d\u7f00\u3002\n\n\u65e2\u7136\u662f\u8be2\u95ee\u4e00\u4e2a\u524d\u7f00\uff0c\u8fd9\u542f\u53d1\u6211\u4eec\u4f7f\u7528\u4e3b\u5e2d\u6811\u3002\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u524d\u7f00\u6765\u8bf4\uff0c\u5176\u610f\u4e49\u662f\u6240\u6709\u6ee1\u8db3 $l$ \u5927\u4e8e\u7b49\u4e8e\u67d0\u4e00\u4e2a\u503c\u7684\u7ebf\u6bb5\u7684\u96c6\u5408\u3002\u7531\u4e8e\u8be2\u95ee\u4e2d\u5bf9\u96c6\u5408\u7f16\u53f7\u7684\u9650\u5236\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u5728\u5efa\u6811\u65f6\u4e0d\u59a8\u4ee5\u96c6\u5408\u7f16\u53f7\u4e3a\u4e0b\u6807\uff0c\u90a3\u4e48\u6b64\u65f6\u67d0\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u5b58\u7684\u5c31\u5e94\u5f53\u662f\u5176\u5bf9\u5e94\u7684\u96c6\u5408\u4e2d\u6700\u5c0f\u7684 $r$\u3002\u7531\u4e8e\u8be2\u95ee\u4e2d\u8981\u6c42\u533a\u95f4\u5185\u7684**\u6240\u6709**\u96c6\u5408\u90fd\u8981\u6ee1\u8db3\u6761\u4ef6\uff0c\u6545\u8be5\u4e3b\u5e2d\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\u662f\u5176\u513f\u5b50\u6743\u503c\u7684\u6700\u5927\u503c\u3002\n\n\u90a3\u4e48\u6bcf\u6b21\u8be2\u95ee\u65f6\uff0c\u5148\u4e8c\u5206\u627e\u5230\u9700\u8981\u7684\u524d\u7f00\uff08\u5927\u4e8e\u7b49\u4e8e $x$ \u7684\u6700\u5c0f\u7684 $l$\uff09\uff0c\u7136\u540e\u5728\u5176\u4e0a\u8be2\u95ee $[a,b]$ \u7684\u6700\u5927\u503c\uff0c\u82e5\u5c0f\u4e8e\u7b49\u4e8e $y$\uff0c\u5219\u8fd4\u56de $\\texttt {yes}$\uff0c\u5426\u5219\u8fd4\u56de $\\texttt{no}$\u3002\n\n##### $\\text{Code}$\n\n```cpp\n#include<bits/stdc++.h>\n#define REG register\nusing namespace std;\ninline void read(int& x){\n\tREG char c;\n\twhile(!isdigit(c=getchar()));x=c^48;\n\twhile(isdigit(c=getchar()))x=(x*10)+(c^48);\n}\n\nconst int N=100005,K=300005,INF=0x7f7f7f7f;\n\nint n,m,k;\n\nstruct Seg{int l,r,num;}seg[K];\ninline bool cmp(Seg x,Seg y){return x.l>y.l;}\nint srt[K];\ninline bool cmp1(int x,int y){return x>y;}\n\nint Rt[K],tot;\nstruct Tree{int ls,rs,val;}t[N*100];\n\nvoid Build(int& now,int l,int r){\n\tt[now=++tot].val=INF;\n\tif(l==r) return;\n\tREG int mid=(l+r)>>1;\n\tBuild(t[now].ls,l,mid),Build(t[now].rs,mid+1,r);\n}\n\nvoid Insert(int pre,int& now,int l,int r,int pos,int S){\n\tt[now=++tot]=t[pre];\n\tif(l==r) return (void)(t[now].val=min(t[now].val,S));\n\tREG int mid=(l+r)>>1;\n\tif(mid>=pos) Insert(t[pre].ls,t[now].ls,l,mid,pos,S);\n\telse Insert(t[pre].rs,t[now].rs,mid+1,r,pos,S);\n\tt[now].val=max(t[t[now].ls].val,t[t[now].rs].val);\n}\n\nint Ask(int now,int l,int r,int x,int y){\n\tif(!now) return INF;\n\tif(l>=x&&r<=y) return t[now].val;\n\tREG int Ans=0,mid=(l+r)>>1;\n\tif(mid>=x) Ans=max(Ans,Ask(t[now].ls,l,mid,x,y));\n\tif(mid<y) Ans=max(Ans,Ask(t[now].rs,mid+1,r,x,y));\n\treturn Ans;\n}\n\ninline void Work(){\n\tread(n),read(m),read(k);\n\tfor(REG int i=1;i<=k;++i) read(seg[i].l),read(seg[i].r),read(seg[i].num),srt[i]=seg[i].l;\n\tsort(seg+1,seg+k+1,cmp),sort(srt+1,srt+k+1,cmp1);\n\tBuild(Rt[0],1,n);\n\tfor(REG int i=1;i<=k;++i) Insert(Rt[i-1],Rt[i],1,n,seg[i].num,seg[i].r);\n\twhile(m--){\n    \tint a,b,x,y;\n    \tread(a),read(b),read(x),read(y);\n    \tint l=1,r=k,mid,ans=0;\n    \twhile(l<=r){\n        \tmid=(l+r)>>1;\n        \tif(srt[mid]>=x) ans=mid,l=mid+1;\n        \telse r=mid-1;\n        }\n    \tint M=Ask(Rt[ans],1,n,a,b);\n    \tif(M<=y) puts(\"yes\");\n    \telse puts(\"no\");\n    \tfflush(stdout);\n    }\n}\n\nint main(){Work();}\n```\n\n",
        "postTime": 1605328792,
        "uid": 83547,
        "name": "LCuter",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1080F \u3010Katya and Segments Sets\u3011"
    },
    {
        "content": "\u7ed9\u4f60$n$\u4e2a\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f\u7ebf\u6bb5\uff0c\u6bcf\u4e2a\u7ebf\u6bb5\u7528\u5de6\u53f3\u7aef\u70b9$[l,r],l\\le r$\u63cf\u8ff0\u3002\u6bcf\u4e2a\u96c6\u5408\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u4e2a\u7ebf\u6bb5\uff08\u5305\u62ec0\u4e2a\uff09\uff0c\u5141\u8bb8\u5b58\u5728\u76f8\u540c\u7684\u7ebf\u6bb5\n\n\u6709$m$\u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u5f62\u5982$a,b,x,y$\uff0c\u95ee\u5bf9\u4e8e\u7f16\u53f7\u5728$[a,b]$\u4e4b\u95f4\u7684\u96c6\u5408\uff0c\u662f\u4e0d\u662f\u6bcf\u4e00\u4e2a\u90fd\u5305\u542b\u4e00\u4e2a\u6ee1\u8db3$x\\le l\\le r\\le y$\u7684\u7ebf\u6bb5\uff0c\u662f\u5219\u8f93\u51fa\"yes\"\uff0c\u5426\u5219\u8f93\u51fa\"no\"\u3002\u5f3a\u5236\u5728\u7ebf\u3002\n\n\u8fd9\u4e2a\u9898\u4e00\u5f00\u59cbyy\u4e86\u5f88\u591a\u79cd\u505a\u6cd5\uff0c\u540e\u6765\u60f3\u51fa\u4e86\u4e00\u4e2a\u5f88simple\u7684\u7528\u4e3b\u5e2d\u6811\u6c42$[a,b]$\u96c6\u5408\u4e2d\u6709\u591a\u5c11\u88ab\u5305\u542b\u5728$[x,y]$\u4e2d\u7684\u7ebf\u6bb5\uff0c\u4f46\u662f\u5e76\u4e0d\u80fd\u5224\u65ad\u51fa\u662f\u5426\u6bcf\u4e2a\u96c6\u5408\u90fd\u6709\u6ca1\u6709\u3002\u7136\u540e\u540e\u9762\u53c8\u6f14\u53d8\u6210\u6c42\u4e8c\u7ef4\u5e73\u9762\u5185\u77e9\u5f62\u8303\u56f4\u7684\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5c31\u5f03\u4e86\u3002\n\n\u95ee\u9898\u8f6c\u5316\u5f88\u91cd\u8981\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u5408\u6211\u4eec\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\uff0c\u53ef\u4ee5\u7528\u8fd9\u6837\u4e00\u79cd\u65b9\u6cd5\uff1a\u67e5\u8be2\u5de6\u7aef\u70b9$\\ge l$\u7684\u90a3\u4e9b\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u6700\u5c0f\u503c\u662f\u5426$\\le r$\u3002\u8fd9\u79cd\u601d\u8def\u5f88\u5bb9\u6613\u6269\u5c55\uff0c\u6211\u4eec\u8bb0\u4e00\u4e2a\u503c\u4e3a$V_{i,l}$\u8868\u793a\u7b2c$i$\u4e2a\u96c6\u5408\u91cc\u5de6\u7aef\u70b9$\\ge l$\u7684\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u7684\u6700\u5c0f\u503c\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee$a,b,x,y$\uff0c\u6211\u4eec\u8981\u5224\u65ad$[a,b]$\u4e2d\u6bcf\u4e2a\u96c6\u5408\u7684$V_{i,l}$\u662f\u5426\u90fd\u5c0f\u4e8e$y$,\u7b49\u4ef7\u4e8e\u6c42$max\\{V_{i,x}\\}\\le r,i\\in [a,b]$\u3002\u5982\u679c\u533a\u95f4\u6700\u5927\u503c\u90fd\u6ee1\u8db3\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a\u96c6\u5408\u4e5f\u90fd\u6ee1\u8db3\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\u5c31\u80fd\u652f\u6301\u67e5\u8be2\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u80fd\u7ef4\u62a4\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u652f\u6301\u67e5\u8be2\u5728\u5f53\u524d\u5de6\u7aef\u70b9\u503c$l$\u4e0b\uff0c\u96c6\u5408\u533a\u95f4$V_i$\u7684\u6700\u5927\u503c\u3002\u79bb\u7ebf\u7684\u8bdd\u5c31\u5c06\u7ebf\u6bb5\u6309\u7167\u5de6\u7aef\u70b9\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u5355\u70b9\u4fee\u6539\u3002\n\n\u5728\u7ebf\u53ef\u6301\u4e45\u5316\u4e00\u4e0b\u561b\u3002\n\n\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\u7684\u70b9\u88ab\u5751\u4e86\u3002\u6bcf\u6b21\u67e5\u8be2\u9700\u8981\u4e8c\u5206\u51fa\u4e00\u4e2a\u67e5\u8be2\u7684\u7ebf\u6bb5\u6811\u6839\u7684\u4f4d\u7f6e\u3002\u4f46\u5047\u5982\u7ed9\u51fa\u7684\u7ebf\u6bb5\u96c6\u5408\u6839\u672c\u6ca1\u6709\u5de6\u7aef\u70b9\u5927\u4e8e\u5f53\u524d\u8be2\u95ee\u70b9\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u70b9\u5c0f\u95ee\u9898\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<iostream>\nusing namespace std;\n#define N 331200\n#define INF 0x3f3f3f3f\nint Rt[N],ls[N*33],rs[N*33],maxm[N*33],a[N],cc;\nstruct Seg{\n\tint l,r,S;\n\tbool operator < (const Seg &B) const {return l==B.l?r>B.r:l>B.l;}\n}seg[N];\nvoid update(int &i,int l,int r,int F,int pos,int k)\n{\n\ti=++cc;ls[i]=ls[F];rs[i]=rs[F];maxm[i]=maxm[F];\n\tif (l==r) {maxm[i]=min(maxm[i],k);return;}\n\tint mid=(l+r)>>1;\n\tif (pos<=mid) update(ls[i],l,mid,ls[F],pos,k);\n\telse update(rs[i],mid+1,r,rs[F],pos,k);\n\tmaxm[i]=max(maxm[ls[i]],maxm[rs[i]]);\n}\nint query(int i,int l,int r,int L,int R)\n{\n\tif (!i) return INF;\n\tif (L<=l&&r<=R) return maxm[i];\n\tint mid=(l+r)>>1;\n\tif (L>mid) return query(rs[i],mid+1,r,L,R);\n\telse if (R<=mid) return query(ls[i],l,mid,L,R);\n\telse return max(query(ls[i],l,mid,L,mid),query(rs[i],mid+1,r,mid+1,R));\n}\nint read(){\n\tint n=0;char a;bool z=false;\n\twhile(a=getchar())\n\t{\n\t\tif (a>'9'||a<'0')\n\t\t\tif (z) break;\n\t\t\telse continue;\n\t\tif (!z) z=true;\n\t\tn=(n<<1)+(n<<3)+(a^48);\n\t}\n\treturn n;\n}\nint main()\n{\n\tmaxm[0]=INF;a[0]=INF;\n\tint n=read(),Q=read(),k=read(),l,r,mid,L,R,now=0,x,y,pos;\n\tfor (int i=1;i<=k;++i) seg[i]=(Seg){read(),read(),read()};\n\tsort(seg+1,seg+1+k);\n\tfor (int i=1;i<=k;++i)\n\t{\n\t\tif (i==1||seg[i].l^seg[i-1].l) Rt[now+1]=Rt[now],++now,a[now]=seg[i].l;\n\t\tupdate(Rt[now],1,n,Rt[now],seg[i].S,seg[i].r);\n\t}\n\twhile(Q--)\n\t{\n\t\tL=read();R=read();x=read();y=read();\n\t\tl=0;r=now;\n\t\twhile(l<=r)\n\t\t{\n\t\t\tmid=(l+r)>>1;\n\t\t\tif (a[mid]>=x) pos=mid,l=mid+1;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tprintf(\"%s\\n\",query(Rt[pos],1,n,L,R)<=y?\"yes\":\"no\");\n\t\tfflush(stdout);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1543678468,
        "uid": 45876,
        "name": "\u51c4\u9b49",
        "ccfLevel": 9,
        "title": "CF1080F \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811"
    }
]