[
    {
        "content": "# CF718D Andrew and Chemistry\n\n## \u9898\u610f\n\n\u7ed9\u4f60\u4e00\u4e2a\u6709 n \u4e2a\u70b9\u7684\u6811\u3002\u5f53\u6bcf\u4e00\u4e2a\u70b9\u7684\u5ea6\u4e0d\u8d85\u8fc7 4 \u65f6\u8fd9\u68f5\u6811\u662f\u5408\u6cd5\u7684\u3002\u73b0\u5728\u8ba9\u4f60\u518d\u6dfb\u52a0\u4e00\u4e2a\u70b9\uff0c\u5728\u6811\u4ecd\u7136\u5408\u6cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u6811\u3002\n\n\u5f53\u4e24\u68f5\u6811\u540c\u6784\u65f6\u89c6\u4f5c\u540c\u4e00\u79cd\u3002\n\n\u4fdd\u8bc1\u8f93\u5165\u7684\u6811\u662f\u5408\u6cd5\u7684\u3002\n\n## \u601d\u8def\n\n\u5f88\u663e\u7136\uff0c\u5982\u679c\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 A \u518d\u8fde\u63a5\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 B\uff0c\u5982\u679c\u4ee5\u8282\u70b9 A \u4f5c\u4e3a\u6839\u65f6\u54c8\u5e0c\u503c\u4e0e\u5df2\u7ecf\u6c42\u51fa\u7684\u5176\u4ed6\u8282\u70b9\u54c8\u5e0c\u503c\u76f8\u540c\uff0c\u90a3\u4e48\u5728 A \u4e0a\u8fde\u63a5\u4e00\u4e2a B \u548c\u5728\u76f8\u540c\u54c8\u5e0c\u503c\u7684\u8282\u70b9\u4e0a\u8fde\u63a5\u4e00\u4e2a B \u663e\u7136\u662f\u540c\u6784\u7684\uff0c\u6240\u4ee5\u73b0\u5728\u7684\u95ee\u9898\u8f6c\u6362\u4e3a\uff0c\u5bf9\u4e8e\u539f\u56fe\u4e2d\u5ea6\u6570\u5c0f\u4e8e 4 \u7684\u8282\u70b9\uff0c\u8ba9\u8fd9\u4e9b\u8282\u70b9\u4f5c\u4e3a\u6811\u7684\u6839\u6c42\u51fa\u7684\u54c8\u5e0c\u503c\u7684\u503c\u7684\u6570\u91cf\u3002\n\n\u4e8e\u662f\u8fd9\u4e2a\u95ee\u9898\u6210\u529f\u5730\u8f6c\u6362\u4e3a\u6811\u54c8\u5e0c\u6a21\u677f\u9898\n\n\u770b\u4e86\u4e00\u4e0b\u5176\u4ed6\u9898\u89e3\u7684\u54c8\u5e0c\u505a\u6cd5\uff0c\u90fd\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\u505a\u6cd5\uff0c\u611f\u89c9\u6ca1\u6709\u6211\u7684\u4f18\uff08\u6bd5\u7adf\u53bb\u6389\u8bb0\u5fc6\u5316\u5c31\u662f\u5e73\u65b9\u590d\u6742\u5ea6\u4e86\uff09\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u54c8\u5e0c\u65b9\u6cd5\uff0c\u5728\u7ebf\u6027\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u6240\u6709\u70b9\u7684\u54c8\u5e0c\u503c\uff0c\u4f7f\u7528\u4e86\u6362\u6839 DP\u3002\n\n\u54c8\u5e0c\u5f0f\u5b50\u5982\u4e0b  \n\n\n $\\large f_u=1 + \\sum_{v\\in son_u} f_v \\times prime_{size_v}$\n \n\n\u81f3\u4e8e\u6362\u6839\u7684\u8bdd\u770b\u4ee3\u7801\u5427\uff0c\u6bd4\u8f83\u7b80\u5355\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ull unsigned long long\nusing namespace std;\ninline int read()\n{\n    int ret=0;char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')ret=ret*10+ch-'0',ch=getchar();\n    return ret;\n}\nconst int maxn=1e5+10;\nstruct node\n{\n    int v,next;\n}e[maxn<<1];\nint cnt,head[maxn];\nint n;\nvoid add(int u,int v)\n{\n    e[++cnt].next=head[u];\n    e[cnt].v=v;\n    head[u]=cnt;\n}\nbool vis[maxn*15];\nint p[maxn];\nvoid prework(int n)\n{\n    int tot=0;\n    for(int i=2;tot<=n;i++)\n    {\n        if(!vis[i]) p[++tot]=i;\n        for(int j=1;j<=tot && i*p[j]<=maxn*15;j++)\n        {\n            vis[i*p[j]]=1;\n            if(i%p[j]==0) break;\n        }\n    }\n}\null f[maxn];\nint sz[maxn];\nvoid dfs(int u,int fa)\n{\n    sz[u]=f[u]=1;\n    for(int i=head[u];i;i=e[i].next)\n    {\n        int v=e[i].v;\n        if(v==fa) continue;\n        dfs(v,u);\n        f[u]+=f[v]*p[sz[v]];\n        sz[u]+=sz[v];\n    }\n}\nvoid dfs1(int u,int fa)\n{\n    for(int i=head[u];i;i=e[i].next)\n    {\n        int v=e[i].v;\n        if(v==fa) continue;\n        f[v]+=(f[u]-f[v]*p[sz[v]])*p[n-sz[v]];\n        dfs1(v,u);\n    }\n}\nint d[maxn];\nset<ull> s;\nint main()\n{\n    n=read();\n    prework(n+1);\n    for(int i=1,x,y;i<n;i++)\n    {\n        x=read();y=read();\n        add(x,y);add(y,x);\n        d[x]+=1;d[y]+=1;\n    }\n    dfs(1,0);dfs1(1,0);\n    for(int i=1;i<=n;i++)\n    {\n        if(d[i]>=4) continue;\n        s.insert(f[i]);\n    }\n    cout<<s.size()<<endl;\n    return 0;\n}\n```\n\n\u6ce8\u610f\u8fd9\u79cd\u65b9\u6cd5\u9700\u8981\u4f7f\u7528\u7b5b\u6cd5\u6c42\u8d28\u6570\uff0c\u9700\u8981\u70b9\u6570\u4e2a\u8d28\u6570\uff0c\u5728\u9884\u5904\u7406\u7684\u65f6\u5019\u63a7\u5236\u597d\u8303\u56f4\u3002\n\n",
        "postTime": 1647341050,
        "uid": 178804,
        "name": "\u592a\u9633\u8d77\u665a\u4e86\u5462",
        "ccfLevel": 0,
        "title": "CF718D\u9898\u89e3"
    },
    {
        "content": "~~\u84dd\u9898\u597d\u50cf\u6709\u4e9b\u4f4e\u4e86\uff08\u6811\u540c\u6784\u6a21\u677f\u90fd\u7d2b\u9898\uff09~~    \n## \u8bb0\u5fc6\u5316\u641c\u7d22+\u6811\u540c\u6784hash   \n\u904d\u5386\u6bcf\u4e2a\u5ea6\u6570\u5c0f\u4e8e4\u7684\u8282\u70b9\uff0c\u4ee5\u5b50\u8282\u70b9\u7684hash\u503c\u653e\u5728\u4e00\u4e2avector\u91cc\u4f5c\u4e3a\u81ea\u5df1\u7684hash\u503c\uff0c\u7136\u540e\u904d\u5386\u5b50\u6811\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5c06\u7ed3\u679c\u653e\u5728set\u91cc\u53bb\u91cd\uff0c\u8f93\u51fa\u5373\u53ef    \n\u4e0a\u4ee3\u7801\uff08\u7801\u98ce\u5e94\u8be5\u8fd8\u53ef\u4ee5\u63a5\u53d7\uff09    \n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<vector>\n#include<map>\n#include<set>\n#define inf 0x3f3f3f3f\n#define N 100010\nusing namespace std;\nint n,cnt,head[N],tot,d[N];\nmap<vector<int>,int>Hash;\nmap<int,int>mp[N];\nset<int>ans;\nstruct Edge{\n\tint v,next;\n}edge[N*2];\ninline int read(){\n\tint x=0,f=1;char ch=getchar();while(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();\n\t}while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();\n\t}return x*f;\n}\ninline void add(int x,int y){edge[++tot].v=y;edge[tot].next=head[x];head[x]=tot;d[x]++;}\nint dp(int x,int fa){\n\tif(mp[x][fa])return mp[x][fa];\n\tvector<int>tmp;\n\tfor(int i=head[x];i;i=edge[i].next){\n\t\tint v=edge[i].v;if(v==fa)continue;\n\t\ttmp.push_back(dp(v,x));\n\t}\n\tsort(tmp.begin(),tmp.end());\n\tif(!Hash[tmp])Hash[tmp]=++cnt;\n\treturn mp[x][fa]=Hash[tmp];\n}\nint main(){\n\tn=read();\n\tfor(int i=1;i<n;i++){\n\t\tint x=read(),y=read();\n\t\tadd(x,y);add(y,x);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(d[i]<4)\n\t\t\tans.insert(dp(i,0));\n\t}\n\tprintf(\"%d\\n\",ans.size());\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1563273374,
        "uid": 88733,
        "name": "Zekrom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF718D \u3010Andrew and Chemistry\u3011"
    },
    {
        "content": "\u83ab\u540d\u60f3\u505a\u5316\u5b66\u9898.\n\n\u5f88\u663e\u7136\u70f7\u70c3\u4f1a\u662f\u4e00\u68f5\u6811.\n\n\u5bf9\u4e8e\u4e00\u4e2a\u78b3\u539f\u5b50, \u4e0e\u5b83\u8fde\u63a5\u7684\u6c22\u539f\u5b50\u90fd\u662f\u7b49\u4ef7\u7684, \u6240\u4ee5\u76f8\u5e94\u5730\u53d6\u4ee3\u54ea\u4e2a\u6c22\u539f\u5b50\u5f62\u6210\u7684\u4e00\u6c2f\u4ee3\u7269\u4e5f\u90fd\u662f\u540c\u6784\u7684.\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u6c2f\u539f\u5b50\u6240\u8fde\u63a5\u7684\u78b3\u539f\u5b50\u4f5c\u4e3a\u6839\u628a\u8fd9\u68f5\u65e0\u6839\u6811\u8f6c\u5316\u6210\u6709\u6839\u6811.\n\n\u6240\u4ee5\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\n\n**\u7ed9\u4f60\u4e00\u68f5\u6811, \u5206\u522b\u628a\u5b83\u7684\u6bcf\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u6839, \u6240\u5f62\u6210\u7684\u4e0d\u540c\u6784\u7684\u6709\u6839\u6811\u7684\u6570\u91cf.**\n\n\u8003\u8651hash.\n\n\u56e0\u4e3a\u6bcf\u4e2a\u78b3\u539f\u5b50\u6700\u591a\u8fde\u63a5\u56db\u4e2a\u78b3\u539f\u5b50.\n\n\u90a3\u4e48\u53ef\u4ee5\u5148\u6c42\u51fa\u5b83\u7684\u5b50\u6811\u7684hash\u503c\u7136\u540e\u6392\u5e8f\u5e76\u62fc\u63a5\u8d77\u6765\u4f5c\u4e3a\u5b83\u81ea\u5df1\u7684hash\u503c.\n\n\u663e\u7136\u8fd9\u6837hash\u503c\u53ef\u80fd\u4f1a\u975e\u5e38\u5927.\n\n\u8003\u8651\u67d0\u4e2a\u521d\u8d5b\u4e2d\u51fa\u73b0\u8fc7\u7684\u5b57\u5178\u5b58\u50a8\u65b9\u6cd5, \u628a\u6bcf\u4e2a\u65b0\u51fa\u73b0\u7684hash\u503c\u90fd\u6254\u5230map\u91cc\u5e76\u7ed9\u5b83\u4e00\u4e2a\u7f16\u53f7.\n\n\u7136\u540e\u518d\u7ed9hash\u51fd\u6570\u4e00\u4e2a\u8bb0\u5fc6\u5316\u5c31\u53ef\u4ee5\u8fc7\u6389\u6b64\u9898\u4e86.\n\n~~\u590d\u6742\u5ea6? \u590d\u6742\u5ea6\u4e0d\u77e5\u9053\u554a.~~\n\n\u597d\u50cf\u8fd9\u4e2a\u4ee3\u7801\u4e5f\u7ed9\u4e0d\u4e86\u591a\u5c11\u6ce8\u91ca\u7684\u6837\u5b50.\n\n~~\u7b2c\u4e00\u6b21\u7528vector\u5b58\u56fe(\u597d\u50cf\u4e5f\u662f\u7b2c\u4e00\u6b21\u5199hash)\u8bf7\u5404\u4f4ddalao\u8f7b\u55b7~~\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <vector>\n#include <algorithm>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#define _for(i, a, b) for (register int i = a; i < b; ++i)\n#define _rep(i, a, b) for (register int i = a; i <= b; ++i)\nconst int ri_top = 1e7;\nchar ri[ri_top + 1], *rich = ri, *rr = ri;\ninline void rd() {*(rr = ri + fread(rich = ri, 1, ri_top, stdin)) = 0;}\ninline char nch() {if (++rich >= rr) rd(); return *rich;}\ninline void read_int(int& x) {while (!isdigit(*rich)) nch(); for (x = *rich - '0'; isdigit(nch()); x = x * 10 + *rich - '0');}\nstd::vector<int> G[100001];\n__gnu_pbds::tree<int, __gnu_pbds::null_type> S;\n__gnu_pbds::tree<int, int>dp[100001]; //\u8bb0\u5fc6\u5316\n__gnu_pbds::tree<int, int>::iterator it;\n__gnu_pbds::tree<std::vector<int>, int>l; //hash\u6620\u5c04\u5230id\n__gnu_pbds::tree<std::vector<int>, int>::iterator it1;\nint cnt;\nint dfs(const int& u, const int& fa)\n{\n    if ((it = dp[u].find(fa)) != dp[u].end()) return it->second; //\u8bb0\u5fc6\u5316\n    std::vector<int> V;\n    for (auto i : G[u]) if (i != fa) V.push_back(dfs(i, u));\n    std::sort(V.begin(), V.end()); //\u5c06\u5b50\u6811\u7684hash\u503c\u62fc\u63a5\u8d77\u6765\u5e76\u6392\u5e8f\n    return dp[u][fa] = (((it1 = l.find(V)) != l.end()) ? it1->second : (l[V] = ++cnt)); //\u5224\u65ad\u662f\u5426\u9700\u8981\u65b0\u5efa\u4e00\u4e2a\u6620\u5c04\u5e76\u8fd4\u56de\n}\nint n, u, v;\nint main()\n{\n    read_int(n);\n    _for(i, 1, n) {read_int(u); read_int(v); G[u].push_back(v); G[v].push_back(u);}\n    _rep(i, 1, n) if (G[i].size() < 4) S.insert(dfs(i, 0)); //\u4e0d\u80fd\u5ffd\u7565\u5bf9\u5ea6\u6570\u7684\u5224\u65ad. \u53ea\u6709\u8fde\u6709\u6c22\u539f\u5b50\u7684\u78b3\u539f\u5b50\u624d\u53ef\u4ee5\u88ab\u53d6\u4ee3(\u4eff\u4f5b\u4e0d\u80fd\u8bf4\u78b3\u539f\u5b50\u88ab\u53d6\u4ee3\u90a3\u5c31\u662f\u4e0d\u80fd\u4f5c\u4e3a\u6839)\n    printf(\"%d\\n\", S.size()); //\u4e0d\u540c\u7684hash\u503c\u7684\u4e2a\u6570.\n}\n```",
        "postTime": 1539579768,
        "uid": 22132,
        "name": "little_gift",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF718D \u3010Andrew and Chemistry\u3011"
    },
    {
        "content": "\u4e00\u9053\u6811\u54c8\u5e0c\u6a21\u677f\u9898\u3002\n\n\u7531\u4e8e\u5ea6\u6570\u5f88\u5c0f\uff0c\u6211\u4eec\u8003\u8651\u76f4\u63a5\u641c\u7d22\u3002\n\n\u4f7f\u7528\u8bb0\u641c\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u5c31\u76f4\u63a5\u8fd4\u56de\u539f\u6765\u7684\u503c\u3002\n\n\u81f3\u4e8e\u54c8\u5e0c\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u8003\u8651\u7528 $\\text{vector}$ \u6765\u5b58\u50a8\u3002\n\n\u6bcf\u4e2a $\\text{vector}$ \u6240\u5b58\u50a8\u7684\u90fd\u662f\u5176\u513f\u5b50\u7684\u54c8\u5e0c\u503c\uff0c\u5c31\u53ef\u4ee5\u4e0d\u65ad\u9012\u5f52\u5411\u4e0a\u5408\u5e76\u3002\n\n\u4e3a\u4e86\u51cf\u5c11\u5e38\u6570\uff0c\u53ef\u4ee5\u4e0d\u9009 $\\text{map}$ \u91c7\u7528 $\\text{pbds}$ \u4e2d $O(1)$ \u7684 $\\text{hash table}$\n\n#### Code\n\n```cpp\n#include <bits/stdc++.h>\n#include <bits/extc++.h>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\nconst int maxn = 100010;\n\nint n , cnt , tot , du[maxn] , head[maxn];\n\nset<int> q;\nmap<vector<int> , int> Hash;\ngp_hash_table<int , int> mp[maxn];\n\nstruct edge\n{\n\tint to , nxt;\n}e[maxn * 2];\n\ninline int read()\n{\n    int asd = 0 , qwe = 1; char zxc;\n    while(!isdigit(zxc = getchar())) if(zxc == '-') qwe = -1;\n    while(isdigit(zxc)) asd = asd * 10 + zxc - '0' , zxc = getchar();\n    return asd * qwe;\n}\n\ninline void add(int x , int y)\n{\n\tdu[x]++ , du[y]++; \n\te[++cnt] = {y , head[x]} , head[x] = cnt;\n\te[++cnt] = {x , head[y]} , head[y] = cnt;\n}\n\ninline int dfs(int now , int fa)\n{\n\tif(mp[now][fa]) return mp[now][fa];\n\tvector<int> tmp;\n\tfor(int i = head[now];i;i = e[i].nxt)\n\t{\n\t\tif(e[i].to == fa) continue;\n\t\ttmp.push_back(dfs(e[i].to , now));\n\t}\n\tsort(tmp.begin() , tmp.end());\n\tif(!Hash[tmp]) Hash[tmp] = ++tot;\n\treturn mp[now][fa] = Hash[tmp];\n}\n\nint main()\n{\n    n = read();\n    for(int i = 1;i < n;i++)\n    {\n    \tint x = read() , y = read();\n    \tadd(x , y);\n\t}\n\tfor(int i = 1;i <= n;i++) if(du[i] < 4) q.insert(dfs(i , 0));\n\tcout << q.size();\n    return 0;\n}\n\n\n```\n",
        "postTime": 1645059429,
        "uid": 320933,
        "name": "Mfeitveer",
        "ccfLevel": 0,
        "title": "CF718D Andrew and Chemistry \u9898\u89e3"
    },
    {
        "content": "\u9898\u76ee\u8981\u6c42\u6211\u4eec\u5feb\u901f\u6c42\u51fa\u52a0\u4e0a\u4e00\u4e2a\u70b9\u540e\u6811\u7684\u54c8\u5e0c\u503c\n\n\u8003\u8651\u5230\u5ea6\u6570\u53ea\u67094\u5f88\u5c0f\uff0c\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a ```vector``` \u5b58\u4e0b\u8282\u70b9 $u$ \u7684\u6bcf\u4e2a\u513f\u5b50\u7684\u54c8\u5e0c\u503c\uff0c\n\n\u53bb\u91cd\u524d\u6392\u5e8f\u4fdd\u8bc1\u552f\u4e00\uff0c\u7136\u540e\u4e22\u8fdb ```set``` \u53bb\u91cd,\n\n```set``` \u7684\u5143\u7d20\u4e2a\u6570\u5c31\u662f\u7b54\u6848\n\n**Code:**\n\n```\n#include<bits/stdc++.h>\n\n#define rd(x) x=read()\n\n#define N 100005\n\nusing namespace std;\n\nint n,m;\nvector<int>e[N];\nmap<vector<int>,int>h;\nmap<int,int>f[N];\nset<int>s;\nint tot;\n\ninline void addEdge(int u,int v){e[u].push_back(v);}\n \ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\n\ninline void write(int x)\n{\n    if(x<0){putchar('-');x=-x;}\n    if(x>=10)write(x/10);\n    putchar(x%10+'0');\n}\n\nint dfs(int u,int fa)\n{\n\tvector<int>rec;\n\tif(f[u][fa])return f[u][fa];\n\tfor(int v:e[u]){if(v==fa)continue;rec.push_back(dfs(v,u));}\n\tsort(rec.begin(),rec.end());if(!h[rec])h[rec]=++tot;return f[u][fa]=h[rec];\n}\n\nint main()\n{\n\trd(n);for(int i=1,u,v;i<n;i++)rd(u),rd(v),addEdge(u,v),addEdge(v,u);\n\tfor(int i=1;i<=n;i++){if(e[i].size()>=4)continue;s.insert(dfs(i,0));}\n\tcout<<s.size()<<endl;\n\n    return 0;\n}\n\n```",
        "postTime": 1574862381,
        "uid": 53807,
        "name": "Erusel",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF718D \u3010Andrew and Chemistry\u3011"
    }
]