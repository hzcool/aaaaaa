[
    {
        "content": "\u4e3b\u5e2d\u6811\u597d\u9898\u3002\n\n\n------------\n\n\u770b\u5176\u4ed6\u9898\u89e3\u90fd\u662f\u6839\u53f7\u5206\u6cbb\u505a\u6cd5\uff0c\u6765\u4e00\u79cd\u4e0d\u5e26\u6839\u53f7\u505a\u6cd5\u3002\n\n\n------------\n\n\u9996\u5148\u8003\u8651\u7b80\u5355\u60c5\u51b5\uff0c\u6ca1\u6709\u6a21\u6570\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\uff0c\u56e0\u4e3a\u6700\u5c0f\u516c\u500d\u6570\u53ef\u4ee5\u5408\u5e76\u3002\n\n\u4f46\u6709\u4e86\u6a21\u6570\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u7b80\u5355\u5408\u5e76\u4e86\uff0c\u4f46\u6211\u4eec\u8003\u8651\u6700\u5c0f\u516c\u500d\u6570\u7684\u6027\u8d28\uff0c\u5373\u4e58\u79ef\u4e4b\u548c\u518d\u9664\u4ee5\u4e24\u4e24\u6570\u4e4b\u95f4\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002\u6240\u4ee5\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6c42\u4e00\u6bb5\u533a\u95f4\u4e24\u4e24\u6700\u5927\u516c\u7ea6\u6570\u3002\n\n\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u6bcf\u4e2a\u6570\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4ed6\u7684\u6bcf\u4e2a\u8d28\u56e0\u6570\u7684 $x$ \u6b21\u5e42\u90fd\u53ef\u4ee5\u627e\u5230\u4e4b\u524d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5730\u65b9\uff0c\u5177\u4f53\u7684\u6211\u4eec\u53ef\u4ee5\u7528\u6876\u8bb0\u5f55\u6bcf\u4e2a\u6570\u51fa\u73b0\u4f4d\u7f6e\u3002\n\n\u8fd9\u6837\u4e00\u79cd\u601d\u8def\u5c31\u51fa\u73b0\u4e86\uff0c\u5373\u5728\u6bcf\u4e2a\u8d28\u56e0\u6570\u7684 $x$ \u6b21\u5e42\u4e4b\u524d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5730\u65b9\u4e58\u4e0a $x$ \u7684\u9006\u5143\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6d88\u6389\u4e24\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570\u3002\u7136\u540e\u6700\u540e\u5728\u8fd9\u4e2a\u6570\u7684\u4f4d\u7f6e\u4e58\u4e0a\u4ed6\u7684\u503c\uff0c\u8fd9\u6837\u67e5\u8be2 $l\\to r$ \u8fd9\u4e00\u6bb5\u533a\u95f4\u65f6\uff0c\u53ea\u9700\u67e5\u8be2\u518d\u52a0\u5230\u7b2c $i$ \u4e2a\u6570\u65f6 $l \\to r$ \u7684\u503c\uff0c\u8fd9\u4e2a\u95ee\u9898\u5f88\u5bb9\u6613\u7528\u4e3b\u5e2d\u6811\u89e3\u51b3\u3002\n\n\n------------\n\n\n\u7531\u4e8e\u8d28\u56e0\u6570\u4e2a\u6570\u662f $\\log n$ \u7ea7\u522b\uff0c\u6240\u4ee5\u63d2\u5165\u64cd\u4f5c\u8981\u8fdb\u884c $n \\log n$ \u6b21\u3002\n\u6545\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $n \\log^2 n$ \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $n \\log^2 n$\u3002\n\n\n------------\n\n\u6ce8\u610f\u672c\u9898\u7565\u5fae\u5361\u7a7a\u95f4\uff0c\u6570\u7ec4\u8981\u7528 int \u5b58\u50a8\u3002\n\n\n------------\n\u4ee3\u7801\u5982\u4e0b\uff0c\u4ec5\u4f9b\u53c2\u8003\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n//static char buf[1000000],*p1=buf,*p2=buf;\n//#define getchar() p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++\n#define pi pair<int,int>\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define mid (l+r>>1)\n#define lowbit (x&-x)\nconst int maxn=1e5+5,M=2e5,mod=1e9+7;\ninline int read()\n{\n\tchar ch=getchar();bool f=0;int x=0;\n\tfor(;!isdigit(ch);ch=getchar())if(ch=='-')f=1;\n\tfor(;isdigit(ch);ch=getchar())x=(x<<1)+(x<<3)+(ch^48);\n\tif(f==1)x=-x;return x;\n}\ninline void print(int x)\n{\n    static int a[55];int top=0;\n    if(x<0) putchar('-'),x=-x;\n    do{a[top++]=x%10,x/=10;}while(x);\n    while(top) putchar(a[--top]+48);\n}\nint n,m,Rt[maxn],sum[maxn*400],tot,inv[M+5],f[M+5],s[M+5],x,ans=0,l,r;\nint ls[maxn*400],rs[maxn*400];\nint merge(int pre,int l,int r,int x,int num)\n{\n\tif(l>x||r<x)return pre;\n\tint rt=++tot;\n\tif(l==r){sum[rt]=1ll*sum[pre]*num%mod;return rt;}\n\tls[rt]=merge(ls[pre],l,mid,x,num),rs[rt]=merge(rs[pre],mid+1,r,x,num);\n\tsum[rt]=1ll*sum[ls[rt]]*sum[rs[rt]]%mod;return rt;\n}\nint query(int rt,int l,int r,int x)\n{\n\tif(l>=x)return sum[rt];\n\tif(r<x)return 1;\n\treturn 1ll*query(ls[rt],l,mid,x)*query(rs[rt],mid+1,r,x)%mod;\n}\nsigned main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tn=read();inv[1]=1,sum[0]=1;\n\tfor(int i=2;i<=M;i++)\n\t{\n\t\tinv[i]=1ll*inv[mod%i]*(mod-mod/i)%mod;\n\t\tif(!f[i]){for(int k=i;k<=M;k+=i)f[k]=i;}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tx=read();Rt[i]=Rt[i-1];\n\t\twhile(f[x])\n\t\t{\n\t\t\tint k=f[x],t=1;\n\t\t\twhile(x%k==0)\n\t\t\t{\n\t\t\t\tt=t*k;x=x/k;\n\t\t\t\tif(s[t])Rt[i]=merge(Rt[i],1,n,s[t],inv[k]);\n\t\t\t\ts[t]=i;\n\t\t\t}Rt[i]=merge(Rt[i],1,n,i,t);\n\t\t}\n\t}\n\tm=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tl=read(),r=read();l=(l+ans)%n+1,r=(r+ans)%n+1;\n\t\tif(l>r)swap(l,r);\n\t\tans=query(Rt[r],1,n,l);printf(\"%d\\n\",ans);\n\t}\n \treturn 0;\n}\n\n```\n\n",
        "postTime": 1636286118,
        "uid": 343748,
        "name": "louhao088",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1422F Boring Queries"
    },
    {
        "content": "$\\operatorname{lcm}$ \u80fd\u88ab\u533a\u95f4\u5185\u7684\u6bcf\u4e2a\u6570\u6574\u9664\u3002\u8003\u8651\u4e00\u4e2a\u8d28\u6570 $p$\uff0c\u5b83\u5728 $a_i~(l\\le i\\le r)$ \u4e2d\u7684\u6b21\u6570\uff08\u8d28\u56e0\u6570\u5206\u89e3\u540e $p$ \u7684\u6307\u6570\uff09\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u5728 $\\operatorname{lcm}$ \u4e2d\u7684\u6b21\u6570\u3002\u90a3\u4e48\u53ef\u4ee5\u628a $\\operatorname{lcm}$ \u8868\u793a\u6210 $\\prod\\limits_{p\\text{ \u662f\u8d28\u6570}}p^{\\max\\limits_{l\\le i\\le r}\\{cnt_{i,p}\\}}$\uff0c\u5176\u4e2d $cnt_{i,p}$ \u8868\u793a $a_i$ \u4e2d $p$ \u7684\u6b21\u6570\u3002\n\n\u8003\u8651\u6839\u53f7\u5206\u6cbb\u3002\u5c0f\u4e8e $450$ \u7684\u8d28\u6570\u6709 $87$ \u4e2a\uff0c\u8fd9\u4e9b\u53ef\u4ee5\u7528 $87$ \u4e2a st \u8868\u505a\u3002\n\n\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u6570 $x$ \u6700\u591a\u6709\u4e00\u4e2a\u5927\u4e8e $\\sqrt x$ \u7684\u8d28\u56e0\u5b50\u3002\u628a\u6bcf\u4e2a $a_i$ \u4e2d\u5c0f\u4e8e $450$ \u7684\u8d28\u56e0\u5b50\u5168\u90e8\u9664\u6389\uff0c\u5269\u4e0b\u7684\u662f $1$ \u6216\u5927\u4e8e $450$ \u7684\u8d28\u6570\u3002\n\n\u73b0\u5728\u95ee\u9898\u53d8\u6210\u4e86\u6c42\u533a\u95f4 $[l,r]$ \u4e2d\u51fa\u73b0\u8fc7\u7684\u6570\u7684\u4e58\u79ef\uff08\u91cd\u590d\u7684\u53ea\u7b97\u4e00\u6b21\uff09\u3002\u8bbe $pre_i$ \u8868\u793a $[1,i-1]$ \u4e2d $a_i$ \u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u6ca1\u6709\u51fa\u73b0\u5219\u4e3a $0$\u3002\u8fd9\u4e2a\u53ef\u4ee5 $O(n)$ \u6c42\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a $i~(l\\le i\\le r)$\uff0c\u82e5 $l\\le pre_i$\uff0c\u8bf4\u660e $[l,i-1]$ \u4e2d\u51fa\u73b0\u4e86\u4e00\u4e2a\u4e0e $a_i$ \u76f8\u7b49\u7684\u6570\uff0c\u90a3\u4e48\u8fd9\u4e2a $i$ \u662f\u4e0d\u80fd\u7b97\u8d21\u732e\u7684\u3002\n\n\u95ee\u9898\u53c8\u53d8\u6210\u4e86 $\\prod\\limits_{i=l}^r[pre_i\\le l-1]a_i$\u3002\u8003\u8651\u5efa $n$ \u68f5\u7ebf\u6bb5\u6811\uff0c\u7b2c $j$ \u68f5\u7ef4\u62a4\u6ee1\u8db3 $pre_i\\le j$ \u7684\u6570\u7684\u4e58\u79ef\uff08$pre_i>j$ \u7684\u4f4d\u7f6e\u4e0a\u90fd\u4e3a $1$\uff09\u3002\u5bb9\u6613\u53d1\u73b0\u5bf9\u4e8e $j~(j>0)$\uff0c\u6700\u591a\u5b58\u5728\u4e00\u4e2a $i$ \u6ee1\u8db3 $pre_i=j$\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ece\u7b2c $j-1~(j>0)$ \u68f5\u7ebf\u6bb5\u6811\u5230\u7b2c $j$ \u68f5\uff0c\u6700\u591a\u53ea\u7528\u4fee\u6539\u4e00\u4e2a\u6570\u3002\u90a3\u4e48\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u505a\u3002\n\n\u6574\u4f53\u601d\u8def\uff1a\n\n1. \u7ebf\u6027\u7b5b\u6c42\u8d28\u6570\n1. \u8ba1\u7b97\u6bcf\u4e2a\u6570\u4e2d\u5404\u4e2a\u8d28\u6570\u7684\u6b21\u6570\u5e76\u628a\u5b83\u4eec\u9664\u6389\n1. \u5efa ST \u8868\n1. \u5efa\u4e3b\u5e2d\u6811\n1. \u56de\u7b54\u8be2\u95ee\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff08$pre$ \u6ca1\u6709\u7528\u6570\u7ec4\u8bb0\u5f55\u4e0b\u6765\uff09\n\n```cpp\n#include <cstdio>\n\nusing namespace std;\n\ntypedef long long ll;\ninline int max(int x, int y) {return x > y ? x : y;}\ninline int min(int x, int y) {return x < y ? x : y;}\ninline void swap(int &x, int &y) {x ^= y ^= x ^= y;}\n#define rei register int\n#define rep(i, l, r) for(rei i = l, i##end = r; i <= i##end; ++i)\n#define per(i, r, l) for(rei i = r, i##end = l; i >= i##end; --i)\n#define ci const int\nchar inputbuf[1 << 23], *p1 = inputbuf, *p2 = inputbuf;\n#define getchar() (p1 == p2 && (p2 = (p1 = inputbuf) + fread(inputbuf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++)\ninline int read() {\n\tint res = 0; char ch = getchar(); bool f = true;\n\tfor(; ch < '0' || ch > '9'; ch = getchar())\n\t\tif(ch == '-') f = false;\n\tfor(; ch >= '0' && ch <= '9'; ch = getchar())\n\t\tres = res * 10 + (ch ^ 48);\n\treturn f ? res : -res;\n}\nconst int N = 2e5 + 15, SQRT = 450, P = 1e9 + 7;\nint n, a[N], b[N], rt[N], tot, lg[N], lc[N * 20], rc[N * 20], pos[N * 2], pr[SQRT], cnt;\nbool npr[SQRT];\nchar st[90][N][18];\nll mul[N * 18], poww[100][20];\n\ninline void upd(int p) {\n\tmul[p] = mul[lc[p]] * mul[rc[p]] % P;\n}\n\nvoid get_prime() {\n\tnpr[1] = 1;\n\trep(i, 2, SQRT - 1) {\n\t\tif(!npr[i]) pr[++ cnt] = i;\n\t\tfor(rei j = 1; j <= cnt && i * pr[j] < SQRT; ++ j) {\n\t\t\tnpr[i * pr[j]] = 1;\n\t\t\tif(i % pr[j] == 0) break;\n\t\t}\n\t}\n}\n\ninline int query(int k, int l, int r) {\n\tint p = lg[r - l + 1];\n\treturn max(st[k][l][p], st[k][r - (1 << p) + 1][p]);\n}\n\nint build(int l, int r) {\n\tint p = ++ tot, mid = l + r >> 1;\n\tmul[p] = 1;\n\tif(l == r) return p;\n\tlc[p] = build(l, mid);\n\trc[p] = build(mid + 1, r);\n\treturn p;\n}\n\nvoid modify(int p, int l, int r, ci &t, ci &x) {\n\tif(l == r) { mul[p] = x; return ; }\n\tint mid = l + r >> 1;\n\tif(t <= mid) modify(lc[p], l, mid, t, x);\n\telse modify(rc[p], mid + 1, r, t, x);\n\tupd(p);\n}\n\nint modify2(int rt, int l, int r, ci &t, ci &x) {\n\tint p = ++ tot, mid = l + r >> 1;\n\tif(l == r) { mul[p] = x; return p; }\n\tif(t <= mid) lc[p] = modify2(lc[rt], l, mid, t, x), rc[p] = rc[rt];\n\telse rc[p] = modify2(rc[rt], mid + 1, r, t, x), lc[p] = lc[rt];\n\tupd(p);\n\treturn p;\n}\n\nll query(int p, int l, int r, ci &tl, ci &tr) {\n\tif(tl <= l && r <= tr) return mul[p];\n\tint mid = l + r >> 1;\n\tll res = 1;\n\tif(tl <= mid) res = query(lc[p], l, mid, tl, tr);\n\tif(mid < tr) res = res * query(rc[p], mid + 1, r, tl, tr) % P;\n\treturn res;\n}\n\nvoid input() {\n\tn = read();\n\trep(i, 1, n) {\n\t\ta[i] = read();\n\t\trep(j, 1, cnt)\n\t\t\twhile(a[i] % pr[j] == 0) {\n\t\t\t\ta[i] /= pr[j];\n\t\t\t\tst[j][i][0] ++ ;\n\t\t\t}\n\t}\n}\n\nvoid build_st() {\n\trep(i, 2, n) lg[i] = lg[i / 2] + 1;\n\trep(k, 1, cnt) rep(j, 1, lg[n])\n\t\tfor(rei i = 1; i + (1 << j) - 1 <= n; ++ i)\n\t\t\tst[k][i][j] = max(st[k][i][j - 1], st[k][i + (1 << j - 1)][j - 1]);\n}\n\nvoid build_sgt() {\n\trt[0] = build(1, n);\n\trep(i, 1, n) {\n\t\tif(!pos[a[i]]) modify(rt[0], 1, n, i, a[i]);\n\t\telse b[pos[a[i]]] = i;\n\t\tpos[a[i]] = i;\n\t}\n\trep(i, 1, n) {\n\t\tif(b[i]) rt[i] = modify2(rt[i - 1], 1, n, b[i], a[b[i]]);\n\t\telse rt[i] = rt[i - 1];\n\t}\n}\n\nvoid solve() {\n\tint l, r;\n\tll ans = 0;\n\trep(i, 1, cnt) {\n\t\tpoww[i][0] = 1;\n\t\trep(j, 1, 20) poww[i][j] = (poww[i][j - 1] * pr[i]) % P;\n\t}\n\tfor(int q = read(); q; -- q) {\n\t\tl = (read() + ans) % n + 1;\n\t\tr = (read() + ans) % n + 1;\n\t\tif(l > r) swap(l, r);\n\t\tans = 1;\n\t\trep(i, 1, cnt) ans = ans * poww[i][query(i, l, r)] % P;\n\t\tans = ans * query(rt[l - 1], 1, n, l, r) % P;\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n}\n\nsigned main() {\n\tget_prime();\n\tinput();\n\tbuild_st();\n\tbuild_sgt();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1613909962,
        "uid": 214437,
        "name": "IntrepidStrayer",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF1422F Boring Queries"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u5217 $a$\uff0c$m$ \u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fa $l,r$\uff0c\u6c42 $\\mathrm{lcm}(a_l,\\dots,a_r)\\bmod 10^9+7$\u3002\n\n\u5f3a\u5236\u5728\u7ebf\uff0c$n\\le 10^5,a_i\\le2\\times 10^5$\n## \u9898\u89e3\n\u9996\u5148\u8fd9\u4e2a\u95ee\u9898\u6709\u4e00\u4e2a\u4e25\u683c\u5f31\u5316\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u6c42 $n$ \u4e2a\u6570\u7684 $\\mathrm{lcm}$\uff0c\u8fd9\u4e5f\u5c31\u542f\u793a\u6211\u4eec\u4e0d\u80fd\u591f\u76f4\u63a5\u66b4\u529b\u6c42 $\\mathrm {lcm}$ \u800c\u5e94\u8be5\u5728\u6bcf\u4e2a\u8d28\u56e0\u5b50\u65f6\u7edf\u8ba1\u8d21\u732e\u6700\u540e\u4e58\u8d77\u6765\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u540c\u6837\u8981\u4ece\u8d28\u56e0\u5b50\u7684\u89d2\u5ea6\u5206\u6790\u3002\u8003\u8651\u5f53\u53f3\u7aef\u70b9\u56fa\u5b9a\u65f6\uff0c\u4e00\u4e2a\u8d28\u56e0\u5b50\u7684\u8d21\u732e\u4e00\u5b9a\u662f\u5355\u8c03\u4e0d\u964d\u7684\uff0c\u56e0\u4e3a $[l,r]$ \u8d28\u56e0\u5b50\u7684\u8d21\u732e\u662f\u6700\u591a\u51fa\u73b0\u6b21\u6570\u3002\u8003\u8651\u8fd9\u6837\u4e00\u6bb5\u6298\u7ebf\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/dcuq90vp.png)\n\n\u5728\u6bcf\u4e00\u4e2a\u62d0\u70b9\u7684\u5730\u65b9\u8bb0\u5f55\u4e58\u4e0a\u4e86 $p$ \u7684\u591a\u5c11\u6b21\uff0c\u7136\u540e\u67e5\u8be2\u5c31\u76f8\u5f53\u4e8e\u6c42\u4e00\u6bb5\u533a\u95f4\u7684\u79ef\u3002\u53ef\u4ee5\u7528\u5355\u8c03\u6808\u7ef4\u62a4\u8fd9\u4e9b\u62d0\u70b9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/se89nucx.png)\n\n\u5982\u679c\u73b0\u5728\u53c8\u65b0\u52a0\u5165\u4e86\u4e00\u4e2a\u503c\uff08\u7eff\u7ebf\uff09\uff0c\u90a3\u4e48\u6bd4\u7eff\u7ebf\u4f4e\u7684\u62d0\u70b9\uff08\u84dd\u70b9\uff09\u5148\u7ed9\u5220\u6389\uff0c\u628a\u66f4\u65b0\u6298\u7ebf\uff0c\u7136\u540e\u66f4\u65b0\u7eff\u70b9\u7684\u503c\u3002\n\n\u56e0\u4e3a\u8d28\u56e0\u5b50\u7684\u4e2a\u6570\u548c\u662f $\\mathcal O(n\\log n)$ \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u4e0d\u540c\u8d28\u56e0\u5b50\u7684\u62d0\u70b9\u4e2a\u6570\u4e5f\u662f\u8fd9\u4e2a\u7ea7\u522b\u7684\uff0c\u5982\u679c\u7528\u7ebf\u6bb5\u6811\u4fee\u6539\u548c\u67e5\u8be2\u90a3\u4e48\u5c31\u662f\u4e24\u53ea $\\log$\u3002\n\n\u5982\u679c\u53ef\u4ee5\u79bb\u7ebf\u90a3\u4e48\u8fd9\u6837\u5c31\u505a\u5b8c\u4e86\uff0c\u4f46\u51fa\u9898\u4eba\u5f3a\u5236\u5728\u7ebf\u8fd8\u9700\u8981\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u3002\u53ef\u80fd\u6709\u4e00\u5b9a\u5361\u7a7a\u95f4\u4f46\u603b\u4f53\u601d\u8def\u8fd8\u662f\u6bd4\u8f83\u81ea\u7136\u7684\u3002\n## \u4ee3\u7801\n```cpp\n// Problem: CF1422F Boring Queries\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/CF1422F\n// Memory Limit: 500 MB\n// Time Limit: 3000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include<bits/stdc++.h>\n#define pb push_back\n#define pc putchar\n#define mp make_pair\n#define fi first\n#define se second\n#define chkmx(a,b) ((a)=max((a),(b)))\n#define chkmn(a,b) ((a)=min((a),(b)))\nusing namespace std;\ntemplate<typename T>\ninline void read(T &x){x=0;char c=getchar();bool f=false;for(;!isdigit(c);c=getchar())f|=c=='-';for(;isdigit(c);c=getchar())x=x*10+c-'0';if(f)x=-x;}\ntemplate<typename T ,typename ...Arg>inline void read(T &x,Arg &...args){read(x);read(args...);}\ntemplate<typename T>inline void write(T x){if(x<0)putchar('-'),x=-x;if(x>=10)write(x/10);putchar(x%10+'0');}\n//#define int long long\n#define mid ((l+r)>>1)\ntypedef long long ll;\ntemplate<const int mod>\nstruct modint{\n    int x;\n    modint<mod>(int o=0){x=o;}\n    modint<mod> &operator = (int o){return x=o,*this;}\n    modint<mod> &operator +=(modint<mod> o){return x=x+o.x>=mod?x+o.x-mod:x+o.x,*this;}\n    modint<mod> &operator -=(modint<mod> o){return x=x-o.x<0?x-o.x+mod:x-o.x,*this;}\n    modint<mod> &operator *=(modint<mod> o){return x=1ll*x*o.x%mod,*this;}\n    template<class I>friend modint<mod> operator +(modint<mod> a,I b){return a+=b;}\n    template<class I>friend modint<mod> operator -(modint<mod> a,I b){return a-=b;}\n    template<class I>friend modint<mod> operator *(modint<mod> a,I b){return a*=b;}\n    modint<mod> operator - () {return x?mod-x:0;}\n};\nenum{mod=1000000000+7};\nusing mint=modint<mod>;\nconst int N=2e5+100;\nint n,m,a[N],rt[N];\nstruct node{\n\tmint prod;\n\tint lc,rc;\n}t[N*150];\nint tot;\nint build(int l,int r){\n\tint x=++tot;\n\tt[x].prod=1;\n\tif(l==r)return x;\n\tt[x].lc=build(l,mid);\n\tt[x].rc=build(mid+1,r);\n\treturn x;\n}\nint mdf(int y,int l,int r,int pos,mint val){\n\tint x=++tot;t[x]=t[y];t[x].prod*=val;\n\tif(l==r)return x;\n\tif(pos<=mid)t[x].lc=mdf(t[y].lc,l,mid,pos,val);\n\telse t[x].rc=mdf(t[y].rc,mid+1,r,pos,val);\n\treturn x;\n}\nmint qry(int x,int l,int r,int ql,int qr){\n\tif(ql<=l&&r<=qr)return t[x].prod;\n\tif(r<ql||qr<l)return 1;\n\treturn qry(t[x].lc,l,mid,ql,qr)*qry(t[x].rc,mid+1,r,ql,qr);\n}\nint f[N];\nstack<pair<int,int>>s[N];\nmint inv[N];\nsigned main(){\n\tinv[1]=1;for(int i=2;i<N;i++)inv[i]=-inv[mod%i]*(mod/i);\n\tfor(int i=2;i<N;i++)if(!f[i])\n\t\tfor(int j=i;j<N;j+=i)f[j]=i;\n\tread(n);\n\tfor(int i=1;i<=n;i++)read(a[i]);\n\trt[0]=build(1,n);\n\tfor(int i=1;i<=n;i++){\n\t\trt[i]=rt[i-1];\n\t\twhile(a[i]>1){\n\t\t\tint p=f[a[i]],kk=1;\n\t\t\twhile(a[i]%p==0)a[i]/=p,kk*=p;mint lst=1;\n\t\t\twhile(s[p].size()&&s[p].top().se<=kk){\n\t\t\t\tint pos=s[p].top().fi;\n\t\t\t\tint val=s[p].top().se;s[p].pop();\n\t\t\t\trt[i]=mdf(rt[i],1,n,pos,inv[val]*lst);\n\t\t\t\tlst=val;\n\t\t\t}\n\t\t\tif(s[p].size())\n\t\t\t\trt[i]=mdf(rt[i],1,n,s[p].top().fi,inv[kk]*lst);\n\t\t\trt[i]=mdf(rt[i],1,n,i,kk);\n\t\t\ts[p].push(mp(i,kk));\n\t\t}\n\t}\n\tread(m);mint lst=0;\n\twhile(m--){\n\t\tint l,r;read(l,r);\n\t\tl=(l+lst.x)%n+1,r=(r+lst.x)%n+1;\n\t\tif(l>r)swap(l,r);\n\t\t//printf(\"%d %d\\n\",l,r);\n\t\twrite((lst=qry(rt[r],1,n,l,r)).x);pc('\\n');\n\t}\n}\n```",
        "postTime": 1636290957,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1422F \u3010Boring Queries\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e00\u4e0b\u9898\u89e3\u533a\u7684\u5927\u4f6c\u4eec\uff0c\u65e0\u4e00\u4f8b\u5916\u7684\u5168\u90e8\u4e0a\u4e86\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u5b9e\u5728\u4f69\u670d\u3002\n\n\u9119\u4eba\u4e0d\u624d\uff0c\u867d\u7136\u65e9\u5c31\u505a\u8fc7\u4e86 HH\u7684\u9879\u94fe \u8fd9\u9053\u9898\uff0c\u4f46\u662f\u60f3\u9898\u7684\u65f6\u5019\u8fd8\u662f\u6ca1\u6709\u81ea\u7136\u7684\u53bb\u60f3\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u5199\u6cd5\u3002\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u5206\u5757\u9884\u5904\u7406\u7684\u505a\u6cd5\u3002\u603b\u590d\u6742\u5ea6 $O(222(n+q) +(n+q)\\sqrt n )$ \u3002\n\n-----\n\n### \u9898\u610f\u63cf\u8ff0\uff1a\n\n\u7ed9\u51fa $n$ \u4e2a\u6574\u6570 $1\\le a_i \\le 2\\times 10^5$ \uff0c\u7ed9\u51fa $q$ \u7ec4\u8be2\u95ee $[l,r]$ \uff0c\u6bcf\u6b21\u8be2\u95ee\u533a\u95f4\u5185\u6570\u7684 lcm \uff0c\u5f3a\u5236\u5728\u7ebf\uff0c\u7b54\u6848\u5bf9 $10^9+7$ \u53d6\u6a21\u3002 $n,q \\le 10^5$ \u3002\n\n------\n\n### \u9898\u76ee\u5206\u6790\uff1a\n\n* \u9996\u5148\u8003\u8651\u5230 lcm \u975e\u5e38\u5927\uff0c\u5fc5\u987b\u5728\u8ba1\u7b97\u4e2d\u53d6\u6a21\uff0c\u56e0\u6b64\u4e0d\u80fd\u591f\u76f4\u63a5\u7684\u7528\u533a\u95f4\u6c42 lcm \u7684\u7b97\u6cd5\u89e3\u51b3\u3002\u6240\u4ee5\u8003\u8651\u7b54\u6848\u662f\u8d28\u6570\u5e42\u6b21\u4e4b\u79ef\u7684\u5f62\u5f0f\uff0c\u5373 $ans=p_1^{k_1}p_2^{k_2}\\dots p_s^{k_s}$ \u3002\n\n* \u89c2\u5bdf\u6027\u8d28\uff0c $a_i$ \u8303\u56f4\u5f88\u5c0f\uff0c\u56e0\u6b64\uff0c\u5bf9\u4e8e $\\sqrt{2\\times 10^5} \u2248 447 $ \u4ee5\u5185\u7684\u8d28\u56e0\u5b50\uff0c\u5e42\u6b21\u624d\u53ef\u80fd\u5927\u4e8e $1$ \uff0c\u5176\u4f59\u7684\u8d28\u56e0\u5b50\u7684\u5e42\u6b21\u8981\u4e48\u662f $1$ \uff0c\u8981\u4e48\u662f $0$ \u3002\u56e0\u6b64\u6211\u4eec\u8003\u8651\u5206\u6bb5\u5904\u7406\u3002\n\n-----\n\n### \u505a\u6cd5\uff1a\n\n#### \u7b2c\u4e00\u90e8\u5206\n\n\u8003\u8651\u5904\u7406 $447$ \u4ee5\u5185\u7684\u8d28\u56e0\u5b50\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c\u6253\u8868\u53d1\u73b0\uff0c\u8fd9\u6837\u7684\u8d28\u56e0\u5b50\u4e00\u5171\u6709 $86$ \u4e2a\u3002\u5230\u4e86\u8fd9\u91cc\uff0c\u5f88\u591a\u4eba\u5c31\u60f3\u7528 $86$ \u4e2a ST \u8868\u6765\u641e\u4e86\u3002\u4f46\u6211\u4eec\u6682\u65f6\u4e0d\u614c\uff0c\u518d\u8003\u8651\u6bcf\u4e2a\u8d28\u56e0\u5b50 $p_i$ \u6700\u9ad8\u7684\u5e42\u6b21\u662f $\\log_{p_i}200000$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u6253\u8868\uff0c\u53d1\u73b0 $447$ \u4ee5\u5185\u7684\u8d28\u56e0\u5b50\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u53ea\u6709 $\\sum_{i=1}^{86} (log_{p_i}200000) \u2248 222$ \u79cd\u72b6\u6001\u3002\u6bcf\u4e2a\u72b6\u6001\u5bf9\u5e94\u7684\u503c\u5f62\u5982 $p_i^{k}$ \u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a $222 \\times n$ \u7684\u6570\u7ec4 `pre[222][n]`\uff0c\u5176\u4e2d`pre[][i]`\u5b58\u4e0b\u7684\u662f\u6bcf\u4e2a\u8d28\u56e0\u5b50\u7684\u67d0\u4e2a\u5e42\u6b21\u5728 $[1,i]$ \u8303\u56f4\u5185\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 \u90a3\u4e48\u6211\u4eec\u5728\u6c42\u89e3\u8fd9\u4e00\u6bb5\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u6240\u6709 $86$ \u4e2a\u8d28\u56e0\u5b50\uff0c\u5bf9\u6bcf\u4e2a\u8d28\u56e0\u5b50\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u5e42\u6b21\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a`pre[][r]>=l` \u5e42\u6b21\uff0c\u8fd9\u5c31\u662f\u8fd9\u4e2a\u8d28\u56e0\u5b50\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5 $O(222)$ \u5904\u7406\u6bcf\u4e2a\u8be2\u95ee\u7684\u7b2c\u4e00\u90e8\u5206\u4e86\u3002\n\n-----\n\n#### \u7b2c\u4e8c\u90e8\u5206\n\n\u8003\u8651\u7b2c\u4e8c\u90e8\u5206\uff0c\u6211\u4eec\u5148\u628a\u539f\u6765\u7684 $a_i$ \u5546\u6389\u6240\u6709 $447$ \u4ee5\u5185\u7684\u8d28\u56e0\u5b50\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\u6c42\u89e3\u7684\u8d21\u732e\uff0c\u5176\u5b9e\u5c31\u662f\u533a\u95f4 $[l,r]$ \u8303\u56f4\u5185\u51fa\u73b0\u8fc7\u7684\u6570\u5b57\u7684\u79ef\u3002\u8fd9\u91cc\u5f88\u591a\u4eba\u5c31\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0a\u53bb\u641e\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u8003\u8651\u5206\u5757\u7684\u505a\u6cd5\u3002\u9996\u5148\u6211\u4eec\u5148\u8981\u660e\u767d\u4e00\u70b9\uff0c\u5047\u5982\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u51fa\u533a\u95f4 $[a,b]$ \u7684\u7b54\u6848\u4e86\uff0c\u5982\u679c\u6211\u4eec\u60f3\u62d3\u5c55\u8fd9\u4e2a\u533a\u95f4\u5230 $[a,b+1]$ \u6216 $[a-1,b]$\uff0c\u662f\u53ef\u4ee5 $O(1)$ \u505a\u5230\u7684\uff0c\u53ea\u9700\u8981\u6211\u4eec\u9884\u5904\u7406\u51fa\u6bcf\u4e2a $a_i$ \u5de6\u8fb9\u6700\u8fd1\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u548c\u53f3\u8fb9\u6700\u8fd1\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u4e86\u3002\u56e0\u4e3a\u5229\u7528\u9884\u5904\u7406\u7684\u503c\u6211\u4eec\u53ef\u4ee5 $O(1) $ \u5224\u65ad\u65b0\u62d3\u5c55\u7684\u503c\u6709\u6ca1\u6709\u5728 $[a,b]$ \u51fa\u73b0\u8fc7\u3002\u65e2\u7136\u5982\u6b64\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u8003\u8651\u5206\u5757\u5462\uff1f\n\n\u6bcf $\\sqrt n$ \u957f\u5ea6\u4e00\u4e2a\u5757\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 `itv[L][R]` \u8868\u793a\u4ece\u7b2c $L$ \u5757\u5230\u7b2c $R$ \u5757\u7684\u533a\u95f4\u7684\u7b54\u6848\u3002\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7684\u7a7a\u95f4\u53ea\u6709 $O(n)$ \uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5 $O(n\\sqrt n)$ \u9884\u5904\u7406\u51fa\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u3002\u6709\u4e86\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8be2\u95ee\u533a\u95f4 $[l,r]$ \u5206\u4e3a\u4e09\u6bb5 $[l,L-1],[L,R],[R+1,r]$ \uff0c\u5176\u4e2d $[L,R]$ \u662f\u6574\u5757\u7684\u4e00\u4e2a\u533a\u95f4\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u9884\u5904\u7406\u7684 `itv[][]` \u6570\u7ec4\u5f97\u5230\u5176\u8d21\u732e\uff0c\u7136\u540e\u518d\u628a\u8fd9\u4e2a\u533a\u95f4\u5411\u5de6\u53f3\u62d3\u5c55\uff0c\u56e0\u6b64\u4e0d\u6ee1\u6574\u5757\u7684 $[l,L-1],[R+1,r]$ \u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc7 $\\sqrt n$\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u505a $O(2\\sqrt n)$ \u6b21\u62d3\u5c55\u5373\u53ef\u6c42\u51fa\u533a\u95f4 $[l,r]$ \u7684\u8d21\u732e\u3002\n\n-----\n\n\u4e8e\u662f\u628a\u4e0a\u9762\u4e24\u4e2a\u8fc7\u7a0b\u7ed3\u5408\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u4ee5 $O(222(n+q) +(n+q)\\sqrt n )$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c $O(222n)$ \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u95ee\u9898\u4e86\u3002 \u4e0d\u9700\u8981\u7528\u5230\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u6280\u5de7\u3002\n\n----\n\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include <map>\n#include <cmath> \n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define LL long long\n#define MOD 1000000007\n#define MAXN 220000\n#define MAXC 230\n#define LSQRT 87\n#define BSIZE 350\nusing namespace std;\nint n,m,a[MAXN];\nint Div[MAXN],prime[MAXN],cnt;\nint range[MAXN];\nint base[MAXN];\nint power[LSQRT][20];\nint pre[MAXC][MAXN];\nint loc[MAXN],lm[MAXN],rm[MAXN];\nint itv[BSIZE][BSIZE];\nbool vis[MAXN];\nvoid get_p()\n{\n    for(int i=2;i<MAXN;i++)\n    {\n        if(!Div[i])\n        {\n            prime[++cnt]=i;\n            Div[i]=i;\n        }\n        for(int j=1;j<=cnt&&prime[j]*i<MAXN;j++)\n        {\n            Div[prime[j]*i]=prime[j];\n            if(prime[j]==Div[i])\n                break;\n        }\n    }\n}\nvoid prepare_first()\n{\n    \n    int sum=0;\n    for(int i=1;i<LSQRT;i++)\n    {\n        range[i]=(log(200000)/log(prime[i]));\n        base[i]=sum;\n        sum+=range[i];\n    }\n\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=0;j<MAXC;j++)\n            pre[j][i]=pre[j][i-1];\n        for(int j=1;j<LSQRT;j++)\n        {\n            int cnt = 0;\n            while(!(a[i]%prime[j]))\n            {\n                cnt++;\n                a[i]/=prime[j];\n            }\n            if(cnt)\n                pre[base[j]+cnt-1][i]=i;\n        }\n    }\n    for(int i=1;i<LSQRT;i++)\n    {\n        int tmp=1;\n        for(int j=1;j<20;j++)\n        {\n            tmp=1ll*tmp*prime[i]%MOD;\n            power[i][j]=tmp;\n        }\n    }\n}\n\nvoid prepare_second()\n{\n    for(int i=1;i<=n;i++)\n    {\n        lm[i]=loc[a[i]];\n        loc[a[i]]=i;\n    }\n    for(int i=1;i<MAXN;i++)loc[i]=n+1;\n    for(int i=n;i>=1;i--)\n    {\n        rm[i]=loc[a[i]];\n        loc[a[i]]=i;\n    }\n\n    for(int i=1;i<=n;i+=BSIZE)\n    {\n        memset(vis,0,sizeof(vis));\n        int tmp=1;\n        for(int j=i;j<=n;j++)\n        {\n            if(!vis[a[j]])\n            {\n                vis[a[j]]=1;\n                tmp=1ll*tmp*a[j]%MOD;\n            }\n            if( !(j%BSIZE) || j==n)\n            {\n                itv[i/BSIZE][(j-1)/BSIZE]=tmp;\n            }\n        }\n    }\n}\nint main()\n{\n    get_p();\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    prepare_first();\n    prepare_second();\n    scanf(\"%d\",&m);\n    int lst=0;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        x=(lst+x)%n+1;\n        y=(lst+y)%n+1;\n        if(x>y)\n            swap(x,y);\n        lst=1;\n        for(int i=1;i<LSQRT;i++)\n        {\n            for(int j=base[i]+range[i]-1;j>=base[i];j--)\n            {\n                if(pre[j][y]>=x)\n                {\n                    lst=1ll*lst*power[i][j-base[i]+1]%MOD;\n                    break;\n                }\n            }\n        }\n\n        if(y-x+1 <= 2*BSIZE)\n        {\n            for(int i=x;i<=y;i++)\n                if(lm[i]<x)\n                    lst=1ll*lst*a[i]%MOD;\n        }\n        else\n        {\n            int L=(x-1)/BSIZE + 1,R=(y-1)/BSIZE - 1;\n            lst=1ll*lst*itv[L][R]%MOD;\n            for(int i=x;i<=L*BSIZE;i++)\n                if(rm[i]>(R+1)*BSIZE)\n                    lst=1ll*lst*a[i]%MOD;\n            for(int i=(R+1)*BSIZE+1;i<=y;i++)\n                if(lm[i]<x)\n                    lst=1ll*lst*a[i]%MOD;\n        }\n        printf(\"%d\\n\",lst);\n    }\n    \n    \n    return 0;\n}\n```\n\n\n",
        "postTime": 1621083858,
        "uid": 34329,
        "name": "George_Plover",
        "ccfLevel": 7,
        "title": "\u3010CF1422F\u3011Boring Queries \u5206\u5757\u9884\u5904\u7406+\u5f3a\u5236\u5728\u7ebf"
    },
    {
        "content": "\u88f8\u9898\u5c31\u662f\u795e\u9898\u3002\n\n\u5f3a\u5236\u5728\u7ebf\u533a\u95f4 $\\rm lcm$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u50cf\u533a\u95f4 $\\gcd$ \u4e00\u6837\uff0c\u76f4\u63a5\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u5bf9\u5e94\u5b50\u533a\u95f4\u7684 $\\rm lcm$\u3002\n\n\u7531\u4e8e $ \\rm lcm$ \u548c $\\gcd$ \u5177\u6709\u76f8\u4f3c\u7684\u6027\u8d28\u3002\u6240\u4ee5$\\gcd$\u53ef\u505a\uff0c$\\rm lcm$ \u4e5f\u53ef\u505a\uff0c\u4e8e\u662f\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u4f46\u5f53\u4f60\u5f00\u59cb\u7801\u4ee3\u7801\u540e\u624d\u53d1\u73b0\u4e0d\u80fd\u8fd9\u4e48\u505a\u3002\u56e0\u4e3a$\\gcd$\u53ea\u51cf\u4e0d\u589e\uff0c\u4f46$\\rm lcm$\u53ea\u589e\u4e0d\u51cf\uff0c\u4e14$\\rm lcm$\u7684\u589e\u957f\u901f\u5ea6\u5f88\u5feb\uff0c\u6211\u4eec\u4e0d\u5f00\u9ad8\u7cbe\u4e0d\u80fd\u4fdd\u5b58\u5b8c\u6574\u4fe1\u606f\uff0c\u5f00\u4e86\u9ad8\u7cbe\u65f6\u7a7a\u590d\u6742\u5ea6\u4f1a\u7206\uff0c\u53d6\u6a21\u4f1a\u5f97\u5230\u9519\u8bef\u7684\u7ed3\u679c\u3002\n\n\u6211\u4eec\u9700\u8981\u5bfb\u6c42\u66f4\u597d\u7684\u7b97\u6cd5\u3002\n\n\u4e00\u4e2a\u6bd4\u8f83\u5957\u8def\u7684\u505a\u6cd5\uff0c\u5f3a\u5236\u5728\u7ebf\u7b97\u6cd5\u5e94\u8be5\u5148\u8003\u8651\u79bb\u7ebf\u505a\u6cd5\u3002\n\n\u6211\u4eec\u5bf9\u8be2\u95ee\u79bb\u7ebf\uff0c\u6309\u533a\u95f4\u53f3\u7aef\u70b9\u6392\u5e8f\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u53f3\u7aef\u70b9\u56fa\u5b9a\uff0c\u5f53\u5de6\u7aef\u70b9\u5411\u5de6\u79fb\u52a8\u65f6\uff0c\u6bcf\u6b21\u4f1a\u589e\u52a0\u4e00\u4e2a\u6570\u3002\u5f53\u4e14\u4ec5\u5f53\u589e\u52a0\u7684\u6570\u5b58\u5728\u4e00\u4e2a\u56e0\u5b50$p^w$\uff0c\u539f\u6765\u7684$\\rm lcm$\u7684$p$\u7684\u6307\u6570\u5c0f\u4e8e$w$\u65f6\uff0c\u7b54\u6848\u4f1a\u589e\u5927\u3002\u66f4\u5177\u4f53\u4e00\u70b9\uff0c\u539f\u6765$\\rm lcm$\u7684$p$\u7684\u6307\u6570\u4f1a\u5bf9$w$\u53d6$\\max$\u3002\n\n\u8fd9\u6837\u5bf9\u4e8e\u4e24\u4e2a\u6570$a_i,a_j(i<j)$\uff0c\u8d28\u56e0\u5b50$p$\u5bf9\u5e94\u7684\u6307\u6570\u5206\u522b\u4e3a$x,y$\uff0c\u82e5$x<y$\uff0c\u5219$a_i$\u4e00\u5b9a\u4e0d\u4f1a\u66f4\u65b0\u7b54\u6848\u3002\u8fd9\u6837\u7684$a_i$\u53ef\u4ee5\u76f4\u63a5\u4e22\u6389\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u975e\u5e38\u7c7b\u4f3c\u5355\u8c03\u6808\u7684\u8fc7\u7a0b\u3002\u4f46\u662f\u6211\u4eec\u8fd8\u6709\u533a\u95f4\u5de6\u7aef\u70b9\u7684\u9650\u5236\uff0c\u8fd9\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u3002\n\n\u56de\u5230\u539f\u9898\uff0c\u6211\u4eec\u8981\u5f3a\u5236\u5728\u7ebf\uff0c\u4e00\u4e2a\u6bd4\u8f83\u5957\u8def\u7684\u505a\u6cd5\u662f\u76f4\u63a5\u4e0a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e$a_i$\u7684\u8d28\u56e0\u5b50\u7684\u6307\u6570\u548c\u6709\u5173\uff0c\u4e0d\u5927\u4f1a\u7b97\u590d\u6742\u5ea6/kk\u3002\u4e0d\u8fc7\u7c97\u7565\u7684\u4e0a\u4e0b\u754c\u662f$\\rm O(N\\ log\\ N )\\sim O(N\\ log^2\\ N)$\u3002\u4e3b\u5e2d\u6811\u65f6\u95f4\u548c\u7a7a\u95f4\u540c\u9636\u3002\n\n\u8f7b\u5fae\u5361\u7a7a\u95f4/kk\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pre(i,a,b) for(int i=a;i>=b;i--)\n#define N 200005\n#define P 1000000007\nusing namespace std;\nint n,u[N],m,tot,rt[N];\nstruct node{\n\tint l,r,mul;\n}a[20000000];\n#define ls a[x].l\n#define rs a[x].r\nint build(int l,int r){\n\tint x=++tot;a[x].mul=1;\n\tif(l==r)return x;\n\tint mid=(l+r)>>1;\n\ta[x].l=build(l,mid);\n\ta[x].r=build(mid+1,r);\n\treturn x;\n}\nint ins(int x,int l,int r,int pos,int val){\n\tint y=++tot;a[y]=a[x];a[y].mul=a[y].mul*val%P;\n\tif(l==r)return y;\n\tint mid=(l+r)>>1;\n\tif(mid>=pos)a[y].l=ins(ls,l,mid,pos,val);\n\telse a[y].r=ins(rs,mid+1,r,pos,val);\n\treturn y;\n}\nint ask(int x,int l,int r,int L,int R){\n\tif(L>=l&&R<=r)return a[x].mul;\n\tint mid=(L+R)>>1,now=1;\n\tif(mid>=l)now=now*ask(ls,l,r,L,mid)%P;\n\tif(mid<r)now=now*ask(rs,l,r,mid+1,R)%P;\n\treturn now;\n}\nint Pow(int x,int y){\n\tint now=1;\n\tfor(;y;y>>=1,x=x*x%P)if(y&1)now=now*x%P;\n\treturn now;\n}\nint pre[N],pm[N];const int w = 200000 ;\nvector<pair<int,int> >c;\nsigned main(){\n\trep(i,2,w)if(!pm[i])rep(j,1,w){\n\t\tif(i*j>w)break;\n\t\tpm[i*j]=i;\n\t}\n\tscanf(\"%lld\",&n);\n\trep(i,1,n)scanf(\"%lld\",&u[i]);\n\trt[0]=build(1,n);\n\trep(i,1,n){\n\t\tint x=u[i];rt[i]=rt[i-1];\n\t\tc.clear();\n\t\twhile(pm[x]){\n\t\t\tint now=pm[x],cnt=0,k=1;\n\t\t\tint inv=Pow(now,P-2);\n\t\t\twhile(x%now==0){\n\t\t\t\tx/=now,cnt++,k*=now;\n\t\t\t\tif(pre[k])c.push_back(make_pair(pre[k],inv));\n\t\t\t\tpre[k]=i;\n\t\t\t}\n\t\t\tpre[k]=i;rt[i]=ins(rt[i],1,n,i,k);\n\t\t}\n\t\tif(x){\n\t\t\tif(pre[x])c.push_back(make_pair(pre[x],Pow(x,P-2)));\n\t\t\tpre[x]=i;rt[i]=ins(rt[i],1,n,i,x);\n\t\t}\n\t\tint res;\n\t\tfor(int j=0;j<(int)c.size();j++){\n\t\t\tif(j==0||c[j-1].first!=c[j].first)res=1;\n\t\t\tres=res*c[j].second%P;\n\t\t\tif(j+1==(int)c.size()||c[j].first!=c[j+1].first)rt[i]=ins(rt[i],1,n,c[j].first,res);\n\t\t}\n\t}\n\tint lastans=0;\n\tscanf(\"%lld\",&m);\n\trep(i,1,m){\n\t\tint l,r;scanf(\"%lld%lld\",&l,&r);\n\t\tl=(l+lastans)%n+1;r=(r+lastans)%n+1;\n\t\tif(l>r)swap(l,r);\n\t\tprintf(\"%lld\\n\",lastans=ask(rt[r],l,r,1,n));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1601943267,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1422F \u3010Boring Queries\u3011"
    },
    {
        "content": "\u5199\u4e2a\u88ab\u5361\u7a7a\u95f4\u7684\u505a\u6cd5\uff0c\u5927\u5bb6\u53ef\u4ee5\u5f53\u7b11\u8bdd\u770b\u3002\n\n------------\n\u5148\u5199\u4e00\u4e0b\u6211\u6700\u5f00\u59cb\u7684\u60f3\u6cd5\uff0c\u4e0d\u60f3\u770b\u7684\u53ef\u4ee5\u76f4\u63a5\u5212\u5230\u4e0b\u9762\u3002\n\n\u5957\u8def\u6839\u53f7\u5206\u6cbb\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5c0f\u4e8e\u6839\u53f7\u7684\u8d28\u56e0\u5b50\u6211\u4eec\u9700\u8981\u6c42\u51fa\u5b83\u6307\u6570\u7684\u6700\u5927\u503c\uff0c\u62ff\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u8fd9\u91cc\u7ebf\u6bb5\u6811\u8ddf st \u8868\u7684\u65f6\u95f4\u662f\u4e00\u6837\u7684\uff0c\u4f46 st \u8868\u7a7a\u95f4\u591a\u4e2a log\u3002\n\n\u5bf9\u4e8e\u5927\u4e8e\u6839\u53f7\u7684\u8d28\u56e0\u5b50\uff0c\u5b83\u7684\u6307\u6570\u4e0d\u8d85\u8fc7\u4e00\uff0c\u6211\u4eec\u5904\u7406\u51fa\u6bcf\u4e2a\u6570\u7684\u8fd9\u6837\u7684\u56e0\u5b50\uff0c\u5219\u6211\u4eec\u9700\u8981\u6c42\u51fa\u533a\u95f4\u5185\u6240\u6709\u51fa\u73b0\u8fc7\u7684\u56e0\u5b50\u7684\u4e58\u79ef\u3002\u8fd9\u4e2a\u53ef\u4ee5\u50cf HH \u7684\u9879\u94fe\u4e00\u6837\u62ff\u4e2a\u4e3b\u5e2d\u6811\u7ef4\u62a4\u3002\n\n\u9274\u4e8e $n$ \u4ee5\u5185\u8d28\u6570\u4e2a\u6570\u662f $O(\\dfrac n{\\log n})$ \u7684\uff0c\u65f6\u95f4\u7a7a\u590d\u6742\u5ea6\u4e00\u4e2a\u6839\u53f7\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fc7\uff0c\u4f46\u662f\u4f3c\u4e4e\u5c31\u662f\u53ef\u4ee5\u8fc7\uff0c\u79bb\u8c31\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u4e24\u90e8\u5206\u7684\u590d\u6742\u5ea6\u5176\u5b9e\u662f\u975e\u5e38\u4e0d\u5e73\u8861\u7684\uff0c\u8003\u8651\u7ee7\u7eed\u4f18\u5316\u3002\n\n------------\n\u8fd9\u91cc\u4e5f\u4e0d\u662f\u6700\u540e\u7684\u89e3\u6cd5\uff0c\u8fd8\u662f\u53ef\u4ee5\u8df3\u8fc7\u3002\n\n\u6cbf\u7528\u628a\u5927\u56e0\u5b50\u548c\u5c0f\u56e0\u5b50\u5206\u5757\u5904\u7406\u7684\u601d\u60f3\uff0c\u6211\u4eec\u8003\u8651\u5982\u679c\u4e00\u4e2a\u56e0\u5b50\u6700\u591a\u51fa\u73b0 $S$ \u6b21\u600e\u4e48\u505a\u3002\n\n\u4e0a\u9762\u7684\u505a\u6cd5\u5176\u5b9e\u662f\u7ef4\u62a4\u4e86\u4e0a\u4e00\u4e2a\u6307\u6570\u4e3a\u4e00\u7684\u5730\u65b9\uff0c\u90a3\u6211\u7ef4\u62a4\u6307\u6570\u4e3a $1$ \u5230 $S$ \u7684\u4e0a\u4e00\u4e2a\u5730\u65b9\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662f $O(nS^2\\log n)$\u3002\n\n\u5982\u679c\u6211\u4eec\u5bf9\u6240\u6709\u7684\u56e0\u5b50\u90fd\u8fd9\u6837\u5904\u7406\uff0c\u90a3\u5b9e\u9645\u4e0a $S=O(\\log n)$\uff0c\u603b\u7684\u590d\u6742\u5ea6\u4e3a $O(n\\log^3n)$\uff0c\u65f6\u7a7a\u590d\u6742\u5ea6\u76f8\u540c\u3002\u6ce8\u610f\u5206\u89e3\u8d28\u56e0\u6570\u65f6\u4e0d\u80fd\u6bcf\u6b21\u66b4\u529b\u5206\u89e3\u3002\n\n\u6211\u89c9\u5f97\u8fc7\u4e0d\u53bb\uff0c\u4f46\u662f\u4f3c\u4e4e\u6ca1\u4eba\u5b9e\u73b0\u8fc7\u3002\n\n------------\n\u8fd9\u91cc\u662f\u6b63\u89e3\u3002\n\n\u8003\u8651\u4e0a\u9762\u7684\u7b97\u6cd5\u7684\u4f18\u5316\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u8d28\u56e0\u6570\uff0c\u5b83\u5728 $i$ \u5904\u7684\u6307\u6570\u6bd4 $j>i$ \u5904\u7684\u51fa\u73b0\u6b21\u6570\u8981\u5c11\uff0c\u90a3\u5b9e\u9645\u4e0a\u6ca1\u5fc5\u8981\u5bf9 $j$ \u5904\u7684\u8fd9\u4e2a\u8d28\u56e0\u5b50\u8ba1\u7b97\u8d21\u732e\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8d28\u56e0\u5b50\u5f00\u4e00\u4e2a\u5355\u8c03\u6808\uff0c\u7ef4\u62a4\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u8d21\u732e\u5373\u53ef\u3002\n\n\u5982\u679c\u4f60\u770b\u4e0d\u61c2\u8fd9\u4e2a\u7b97\u6cd5\u90a3\u6211\u8fd8\u662f\u5efa\u8bae\u4f60\u56de\u53bb\u518d\u770b\u770b\u4e0a\u9762\u7684\u4e24\u4e2a\u975e\u6b63\u89e3\uff08\n\n\u6839\u636e\u5355\u8c03\u6808\u7684\u590d\u6742\u5ea6\u5206\u6790\uff0c\u8fd9\u4e2a\u65f6\u7a7a\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(nw(n)\\log n)$\uff0c$w(n)$ \u8868\u793a $n$ \u4ee5\u5185\u7684\u6570\u4e0d\u540c\u8d28\u56e0\u6570\u4e2a\u6570\u6700\u5927\u503c\uff0c\u4e0a\u754c\u4e3a $O(\\log n)$\u3002\n\n\u611f\u89c9\u662f\u80fd\u8fc7\u7684\uff0c\u7136\u800c\u4e0d\u80fd\u8fc7\uff0c\u6211\u4e5f\u6ca1\u5565\u529e\u6cd5\u3002\n\n@Inf_Voltage \u795e\u4ed9\u4f3c\u4e4e\u4e5f\u5199\u7684\u662f\u8fd9\u4e2a\u505a\u6cd5\uff0c\u4f46\u662f\u6211\u770b\u4e0d\u61c2\u4ed6\u7684\u4ee3\u7801\uff0c\u4e5f\u4e0d\u6e05\u695a\u4ed6\u4e3a\u4ec0\u4e48\u80fd\u8fc7/fad\n\n\u653e\u4e2a\u5361\u4e0d\u8fc7\u53bb\u7684\u4ee3\u7801\u597d\u4e86\uff0c\u5728 31 \u4e2a\u70b9 MLE\u3002\n\n\u6240\u4ee5\u8fd9\u9898\u5f00\u5f3a\u5236\u5728\u7ebf\u7684\u610f\u4e49\u662f\u5565\u554a\u5f3a\u5236\u9009\u624b\u5199\u4e2a\u4e3b\u5e2d\u6811\u88ab\u5361\u7a7a\u95f4\u5417\u2026\u2026\n```cpp\n#include<stack>\n#include<cstdio>\n#include<cctype>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tchar c=getchar();\n\tbool f=0;\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=1e5+5,maxa=2e5+5;\nint n,q;\nint mf[maxa];\nconst int mod=1e9+7;\nint ksm(int a,int b){\n\tint ans=1;\n\twhile(b){\n\t\tif(b%2==1) ans=1ll*ans*a%mod;\n\t\ta=1ll*a*a%mod;\n\t\tb/=2;\n\t}\n\treturn ans;\n}\nstruct node{\n\tnode* ch[2];\n\tint prod,t;\n\tnode(int l,int r):prod(1),t(0){\n\t\tif(l==r) return;\n\t\tint mid=l+(r-l)/2;\n\t\tch[0]=new node(l,mid);\n\t\tch[1]=new node(mid+1,r);\n\t}\n\tnode(node* x){\n\t\t*this=*x;\n\t\tt++;\n\t}\n\tvoid modify(int l,int r,int x,int k){\n\t\tprod=1ll*prod*k%mod;\n\t\tif(l==r) return;\n\t\tint mid=l+(r-l)/2;\n\t\tif(x<=mid){\n\t\t\tif(ch[0]->t!=t) ch[0]=new node(ch[0]);\n\t\t\tch[0]->modify(l,mid,x,k);\n\t\t}\n\t\telse{\n\t\t\tif(ch[1]->t!=t) ch[1]=new node(ch[1]);\n\t\t\tch[1]->modify(mid+1,r,x,k);\n\t\t}\n\t}\n\tint query(int l,int r,int ql,int qr){\n\t\tif(ql<=l&&qr>=r) return prod;\n\t\tint mid=l+(r-l)/2,ans=1;\n\t\tif(ql<=mid) ans=1ll*ans*ch[0]->query(l,mid,ql,qr)%mod;\n\t\tif(qr>mid) ans=1ll*ans*ch[1]->query(mid+1,r,ql,qr)%mod;\n\t\treturn ans;\n\t}\n}*rt[maxn];\ntypedef pair<int,int> pii;\nstack<pii> s[maxa];\nvoid insert(int x,int p,int m){\n\tint lst=0;\n\twhile(s[p].size()&&s[p].top().second<=m){\n\t\trt[x]->modify(1,n,s[p].top().first,ksm(ksm(p,s[p].top().second-lst),mod-2));\n\t\tlst=s[p].top().second;\n\t\ts[p].pop();\n\t}\n\tif(s[p].size()) rt[x]->modify(1,n,s[p].top().first,ksm(ksm(p,m-lst),mod-2));\n\ts[p].push(pii(x,m));\n\trt[x]->modify(1,n,x,ksm(p,m));\n}\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tfor(int i=2;i<maxa;i++) if(!mf[i]){\n\t\tmf[i]=i;\n\t\tfor(int j=i;1ll*i*j<maxa;j++) mf[i*j]=i;\n\t}\n\tn=readint();\n\trt[0]=new node(1,n);\n\tfor(int i=1;i<=n;i++){\n\t\tint a=readint();\n\t\trt[i]=new node(rt[i-1]);\n\t\twhile(a!=1){\n\t\t\tint tmp=mf[a],cnt=0;\n\t\t\twhile(a%tmp==0){\n\t\t\t\ta/=tmp;\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\tinsert(i,tmp,cnt);\n\t\t}\n\t}\n\tq=readint();\n\tint last=0;\n\twhile(q--){\n\t\tint l,r;\n\t\tl=(readint()+last)%n+1;\n\t\tr=(readint()+last)%n+1;\n\t\tif(l>r) swap(l,r);\n\t\tprintf(\"%d\\n\",last=rt[r]->query(1,n,l,r));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1602865213,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1422F \u3010Boring Queries\u3011"
    },
    {
        "content": "\u597d\u50cf\u6709\u4e00\u9053 [\u7c7b\u4f3c\u7684\u9898\u76ee](https://www.luogu.com.cn/problem/P5655?contestId=23455)...\u4e0d\u8fc7\u7531\u4e8e\u503c\u57df\u7684\u539f\u56e0\uff0c\u4e24\u8005\u505a\u6cd5\u6709\u5f88\u5927\u7684\u5dee\u522b\n\n## \u89e3\u6790\n\n$\\text{lcm}$ \u548c $\\gcd$ \u7684\u6027\u8d28\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u60f3\u5230\u4e5f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u7136\u800c $\\text{lcm}$ \u7684\u503c\u5355\u8c03\u4e0d\u51cf\uff0c\u4e14\u7ebf\u6bb5\u6811\u7ef4\u62a4\u65f6\u662f\u4e0d\u80fd\u53d6\u6a21\u7684\uff1b\u7ed3\u70b9\u7684 $\\text{lcm}$ \u503c\u5f88\u5feb\u5c31\u4f1a\u968f\u7740\u533a\u95f4\u8303\u56f4\u7684\u6269\u5927\u800c\u70b8\u6389\n\n$\\text{lcm}$ \u770b\u8d77\u6765\u548c $\\gcd$ \u6709\u5f88\u591a\u8054\u7cfb\uff0c\u56e0\u6b64\u63a5\u7740\u4f1a\u60f3\u5230\u63a8\u5f0f\u5b50\u5c06\u7ef4\u62a4\u7684\u4e1c\u897f\u5316\u6210\u548c $\\gcd$ \u6709\u5173\u7684\u5f62\u5f0f\u3002\u4f46\u6211\u63a8\u4e86\u51e0\u4e2a\u5f0f\u5b50\u90fd\u4e0d\u50cf\u80fd\u8fc7\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u7684\u6837\u5b50\uff0c\u6709\u51e0\u4e2a\u8fd8\u5047\u6389\u4e86\uff08\\kk\uff09\n\n\u4e8e\u662f\u518d\u89c2\u5bdf\u503c\u57df\uff0c\u53d1\u73b0\u4ec5\u6709 $2\\cdot 10^5$\uff0c\u8003\u8651\u6839\u53f7\u5206\u6cbb\u3002\u5177\u4f53\u6765\u8bf4\uff0c$\\text{lcm}$ \u53ef\u4ee5\u770b\u505a\u5bf9\u6bcf\u4e2a\u7684\u8d28\u56e0\u5b50\u5e42\u6b21\u53d6 $\\max$\n\n\u5bf9\u4e8e\u5c0f\u4e8e\u7b49\u4e8e $\\sqrt{2\\cdot 10^5}$ \u7684\u8d28\u56e0\u5b50\uff0c\u76f4\u63a5\u5404\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\u66b4\u529b\u7ef4\u62a4\n\n\u5bf9\u4e8e\u5927\u4e8e $\\sqrt{2\\cdot 10^5}$ \u7684\u8d28\u56e0\u5b50\uff0c\u6bcf\u4e2a\u5143\u7d20\u81f3\u591a\u6709\u4e00\u4e2a\u3002\u8fd9\u6709\u70b9\u50cf\u7ef4\u62a4\u533a\u95f4\u4e0d\u540c\u989c\u8272\u4e2a\u6570\uff0c\u53ea\u4e0d\u8fc7\u6bcf\u4e2a\u989c\u8272\u8fd8\u5e26\u4e86\u6743\u503c\uff08\u5f3a\u5236\u5728\u7ebf\uff09\uff1b\u6211\u4eec\u628a\u539f\u6765\u7684\u505a\u6cd5\u7a0d\u5fae\u6539\u4e0b\u5c31\u884c\u4e86\n\n\uff08\u53ef\u80fd\u8fd8\u6709\u5176\u5b83\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4ec5\u63d0\u4e00\u79cd\uff09\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u8bbe $i$ \u7248\u672c\u7684\u7ef4\u62a4\u533a\u95f4\u4e58\u79ef\u7684\u7ebf\u6bb5\u6811\u4e3a\u53f3\u7aef\u70b9\u4e3a $i$ \u7684\u7b54\u6848\u3002\u9884\u5904\u7406\u65f6\uff0c\u6bcf\u6b21\u4ece $i-1$ \u7248\u672c\u7684\u7ebf\u6bb5\u6811\u5f97\u5230 $i$ \u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff0c\u5176\u4e2d $0$ \u7248\u672c\u7684\u7ebf\u6bb5\u6811\u4e3a\u7a7a\uff0c\u4e14\u8bbe\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u7f3a\u7701\u503c\u4e3a $0$\uff1b\u9884\u5904\u7406\u7b2c $i$ \u7248\u672c\u7684\u7ebf\u6bb5\u6811\u65f6\uff0c\u5c06 $i$ \u4f4d\u7f6e\u7684\u6743\u503c\u4e58\u4e0a $a_i$ \u7684\u5927\u8d28\u56e0\u5b50\uff0c\u5e76\u5c06 $a_i$ \u4e0a\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u9664\u6389\u8be5\u8d28\u56e0\u5b50\uff08\u4e3a\u4e86\u907f\u514d\u591a\u6b21\u7edf\u8ba1\u540c\u4e00\u8d28\u56e0\u5b50\uff09\u3002\u67e5\u8be2 $[l, r]$ \u7684\u7b54\u6848\u65f6\uff0c\u53ea\u9700\u5728 $r$ \u7248\u672c\u7684\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2 $[l, r]$ \u7684\u503c\u5373\u53ef\n\n## CODE\n\n\uff08\u4e0d\u77e5\u4e3a\u4f55\u8fd9\u4efd\u4ee3\u7801\u4f1a\u5728 Codeforces \u8ff7\u4e4b[\u5438\u6c27\u4e2d\u6bd2](https://www.luogu.com.cn/discuss/show/265731)\uff08`O3`, `Ofast`\uff09...\uff09\n\n\u6ce8\u610f\u6211\u7684\u4ee3\u7801\u4e2d\u6ca1\u6709\u663e\u5f0f\u5730\u5c06\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u7f3a\u7701\u503c\u8bbe\u4e3a $0$\uff08\u53ef\u80fd\u9020\u6210\u7406\u89e3\u4e0a\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u63d0\u9192\u4e0b\uff09\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <iostream>\n#include <cstring>\n#include <cstdlib>\n//#pragma GCC optimize(\"O3\")\n//#pragma GCC optimize(\"Ofast\", \"-funroll-loops\", \"-fdelete-null-pointer-checks\")\n//#pragma GCC target(\"ssse3\", \"sse3\", \"sse2\", \"sse\", \"avx2\", \"avx\")\n#define ll long long\nusing std::max;\n\nconst int M =1e9+7;\nconst int MAXN =1e5+20, MAXV =2e5+20, sqrt_MAXV =sqrt(MAXV)+20;\nconst int MAXN_Seg1 =(1<<18)+20, MAXN_Seg2 =(1<<18)+7e6, MAXNUM_Seg1 =86;/*<- 86 \u662f\u6d4b\u6570\u636e\u8303\u56f4\u5f97\u5230\u7684*/\n\n/*------------------------------Math------------------------------*/\n\nint pow(int x, int k){\n\tint ret =1;\n\tfor(; k; x =1ll*x*x%M, k >>=1)\n\t\tif(k&1)\n\t\t\tret =1ll*ret*x%M;\n\treturn ret;\n}\n\nint inv[MAXV];\n\nvoid pre_inv(){\n\tinv[1] =1;\n\tfor(int i =2; i < MAXV; ++i)\n\t\tinv[i] =1ll*(M-M/i)*inv[M%i]%M;\n}\n\nbool np[sqrt_MAXV];\nint prim[sqrt_MAXV], totp;\n\nvoid getprim(int n){\n\tfor(int i =2; i <= (int)sqrt(n); ++i){\n\t\tif(!np[i])\n\t\t\tprim[totp++] =i;\n\t\tfor(int j =0; i*prim[j] <= (int)sqrt(n); ++j){\n\t\t\tnp[i*prim[j]] =1;\n\t\t\tif(i%prim[j] == 0)\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\n/*------------------------------Seg------------------------------*/\n\nint N =1;\n\nstruct Seg1{\n\tint Seg_mx[MAXN_Seg1];\n\t\n\tinline void pushup(int x){ Seg_mx[x] =max(Seg_mx[(x<<1)], Seg_mx[(x<<1)|1]); }\n\t\n\tvoid modify(int pos, int x =1, int nl =1, int nr =N){\n\t\tif(nl == nr){\n\t\t\t++Seg_mx[x];\n\t\t\treturn;\n\t\t}\n\t\tint mid =(nl+nr)>>1;\n\t\tif(pos <= mid)\n\t\t\tmodify(pos, x<<1, nl, mid);\n\t\telse\n\t\t\tmodify(pos, (x<<1)|1, mid+1, nr);\n\t\tpushup(x);\n\t}\n\t\n\tint query(int l, int r, int x =1, int nl =1, int nr =N){\n\t\tif(l == nl && r == nr)\n\t\t\treturn Seg_mx[x];\n\t\tint mid =(nl+nr)>>1;\n\t\tif(r <= mid)\n\t\t\treturn query(l, r, x<<1, nl, mid);\n\t\telse if(l >= mid+1)\n\t\t\treturn query(l, r, (x<<1)|1, mid+1, nr);\n\t\telse\n\t\t\treturn max(query(l, mid, x<<1, nl, mid), query(mid+1, r, (x<<1)|1, mid+1, nr));\n\t}\n}t_small[MAXNUM_Seg1];\n\nstruct Seg2{\n\tint root[MAXN], tot;\n\tint ls[MAXN_Seg2], rs[MAXN_Seg2];\n\tint Seg_mul[MAXN_Seg2];\n\t\n\tinline int New(int x){\n\t\t++tot;\n\t\tls[tot] =ls[x], rs[tot] =rs[x];\n\t\tSeg_mul[tot] =max(1, Seg_mul[x]);\n\t\treturn tot;\n\t}\n\t\n\tinline void pushup(int x){ Seg_mul[x] =1ll*max(1, Seg_mul[ls[x]])*max(1, Seg_mul[rs[x]])%M; }\n\t\n\tvoid modify(int pos, int val, int &x, int nl =1, int nr =N){\n\t\tx =New(x);\n\t\tif(nl == nr){\n\t\t\tSeg_mul[x] =1ll*Seg_mul[x]*val%M;\n\t\t\treturn;\n\t\t}\n\t\tint mid =(nl+nr)>>1;\n\t\tif(pos <= mid)\n\t\t\tmodify(pos, val, ls[x], nl, mid);\n\t\telse\n\t\t\tmodify(pos, val, rs[x], mid+1, nr);\n\t\tpushup(x);\n\t}\n\t\n\tint query(int l, int r, int x, int nl =1, int nr =N){\n\t\tif(l == nl && r == nr)\n\t\t\treturn Seg_mul[x];\n\t\tint mid =(nl+nr)>>1;\n\t\tif(r <= mid)\n\t\t\treturn query(l, r, ls[x], nl, mid);\n\t\telse if(l >= mid+1)\n\t\t\treturn query(l, r, rs[x], mid+1, nr);\n\t\telse\n\t\t\treturn 1ll*query(l, mid, ls[x], nl, mid)*query(mid+1, r, rs[x], mid+1, nr)%M;\n\t}\n}t_large;\n\n/*------------------------------Pre------------------------------*/\n\nint a[MAXN], max_fact[MAXN], last_pos[MAXV];\n\nvoid pre_Seg1(int n){\n\tfor(int i =1; i <= n; ++i){\n\t\tfor(int j =0; j < totp; ++j){\n\t\t\twhile(a[i]%prim[j] == 0){\n\t\t\t\ta[i] /=prim[j];\n\t\t\t\tt_small[j].modify(i);\n\t\t\t}\n\t\t}\n\t\tmax_fact[i] =a[i];\n\t}\n}\n\nvoid pre_Seg2(int n){\n\tfor(int i =1; i <= n; ++i){\n\t\tt_large.modify(i, max_fact[i], t_large.root[i] =t_large.root[i-1]);\n\t\tif(last_pos[max_fact[i]] != 0)\n\t\t\tt_large.modify(last_pos[max_fact[i]], inv[max_fact[i]], t_large.root[i]);\n\t\tlast_pos[max_fact[i]] =i;\n\t}\n}\n\n/*------------------------------Main------------------------------*/\n\ninline int read(){\n\tint x =0; char c =getchar();\n\twhile(c < '0' || c > '9') c =getchar();\n\twhile(c >= '0' && c <= '9') x = (x<<3) + (x<<1) + (48^c), c =getchar();\n\treturn x;\n}\n\nint main(){\n\tint n =read(), maxa =1;\n\tfor(int i =1; i <= n; ++i)\n\t\ta[i] =read(), maxa =max(maxa, a[i]);\n\t\n\tpre_inv();\n\tgetprim(maxa);\n\twhile(N < n)\n\t\tN <<=1;\n\tpre_Seg1(n);\n\tpre_Seg2(n);\n\t\n\tint q =read();\n\tfor(int last =0; q; q--){\n\t\tint x =read(), y =read();\n\t\tint l =(last+x)%n+1, r =(last+y)%n+1;\n\t\tif(l > r)\n\t\t\tl ^=r ^=l ^=r;\n\t\tlast =1;\n\t\tfor(int j =0; j < totp; ++j)\n\t\t\tlast =1ll*last*pow(prim[j], t_small[j].query(l, r))%M;\n\t\tlast =1ll*last*t_large.query(l, r, t_large.root[r])%M;\n\t\tprintf(\"%d\\n\", last);\n\t}\n}\n```",
        "postTime": 1602562930,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1422F \u3010Boring Queries\u3011"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[ST \u8868](https://oi-wiki.org/ds/sparse-table/)\u3001[\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811](https://oi-wiki.org/ds/persistent-seg/)\n\n\u9996\u5148\u5c06 $\\operatorname{lcm}$ \u8f6c\u5316\u4e3a\u5bf9\u5404\u4e2a\u8d28\u56e0\u6570\u53d6 $\\max$\u3002\n\n\u5957\u8def\u5730\uff0c\u6211\u4eec\u5bf9 $N = 2 \\times 10^5$ \u5185\u7684\u8d28\u56e0\u6570\u6839\u53f7\u5206\u6cbb\u3002\n\n\u5bf9\u4e8e $\\leq \\sqrt{N}$ \u7684\u8d28\u56e0\u6570\uff0c\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e2a\u8303\u56f4\u5185\u53ea\u6709 $86$ \u4e2a\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7528 ST \u8868\u5bf9\u6bcf\u4e2a\u8d28\u56e0\u6570\u7684\u5e42\u6b21\u6c42\u533a\u95f4 $\\max$\u3002\n\n\u5bf9\u4e8e $> \\sqrt{N}$ \u7684\u8d28\u56e0\u6570\uff0c\u4e0d\u96be\u53d1\u73b0\u6bcf\u4e2a $a_i$ \u81f3\u591a\u5305\u542b\u4e00\u4e2a\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u8d28\u56e0\u6570\uff0c\u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u4e3a $[l, r]$ \u4e2d\u51fa\u73b0\u8fc7\u7684\u8be5\u7c7b\u8d28\u56e0\u6570\u7684\u79ef\u3002\u770b\u5230\u201c\u51fa\u73b0\u201d\uff0c\u8bbe $a'_i$ \u8868\u793a\u8003\u8651\u7ef4\u62a4 $pre_i$ \u8868\u793a $i$ \u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u82e5\u6b64\u524d\u672a\u51fa\u73b0\u5219\u4e3a $0$\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\u5230 $r$ \u4e3a\u6b62\uff0c\u6c42 $[l, r]$ \u4e2d\u6240\u6709\u4e0d\u540c\u7684 $a'_i$ \u4e4b\u79ef\u3002\u8fd9\u53ef\u4ee5\u7528\u4e00\u68f5\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\u4e58\u79ef\u7684\u4e3b\u5e2d\u6811\u7ef4\u62a4\u3002\n\n\u7efc\u4e0a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\frac{n \\sqrt{N} \\log n}{\\ln N} + \\frac{q \\sqrt{N} \\log \\log n}{\\ln N})$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long ll;\n\ntypedef struct {\n\tint ls;\n\tint rs;\n\tll mul;\n} Node;\n\nconst int N = 86 + 7, M = 1e5 + 7, K = 16 + 1, P = 2e5 + 7, Q = 447, R = 3999982 + 7, mod = 1e9 + 7;\nint id = 0;\nshort power[N][M], st[N][M][K];\nint prime[N], root[M], pre[P];\nbool p[Q + 7];\nNode tree[R];\n\ninline int init1(){\n\tint cnt = 0;\n\tp[0] = p[1] = true;\n\tfor (register int i = 2; i <= Q; i++){\n\t\tif (!p[i]) prime[++cnt] = i;\n\t\tfor (register int j = 1; j <= cnt && i * prime[j] <= Q; j++){\n\t\t\tp[i * prime[j]] = true;\n\t\t\tif (i % prime[j] == 0) break;\n\t\t}\n\t}\n\treturn cnt;\n}\n\ninline void init2(int n, int pos){\n\tint m = log2(n);\n\tfor (register int i = 1; i <= n; i++){\n\t\tst[pos][i][0] = power[pos][i];\n\t}\n\tfor (register int i = 1; i <= m; i++){\n\t\tint id = i - 1, t1 = n - (1 << i) + 1, t2 = 1 << id;\n\t\tfor (register int j = 1; j <= t1; j++){\n\t\t\tst[pos][j][i] = max(st[pos][j][id], st[pos][j + t2][id]);\n\t\t}\n\t}\n}\n\ninline void update(int x){\n\ttree[x].mul = tree[tree[x].ls].mul * tree[tree[x].rs].mul % mod;\n}\n\nvoid build(int &x, int l, int r){\n\tif (x == 0) x = ++id;\n\tif (l == r){\n\t\ttree[x].mul = 1;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(tree[x].ls, l, mid);\n\tbuild(tree[x].rs, mid + 1, r);\n\tupdate(x);\n}\n\nvoid assign(int &x, int l, int r, int pos, int val){\n\tid++;\n\ttree[id] = tree[x];\n\tx = id;\n\tif (l == r){\n\t\ttree[x].mul = val;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid){\n\t\tassign(tree[x].ls, l, mid, pos, val);\n\t} else {\n\t\tassign(tree[x].rs, mid + 1, r, pos, val);\n\t}\n\tupdate(x);\n}\n\nll get_product(int x, int L, int R, ll l, ll r){\n\tif (l <= L && R <= r) return tree[x].mul;\n\tint mid = (L + R) >> 1;\n\tll ans = 1;\n\tif (l <= mid) ans = get_product(tree[x].ls, L, mid, l, r);\n\tif (r > mid) ans = ans * get_product(tree[x].rs, mid + 1, R, l, r) % mod;\n\treturn ans;\n}\n\ninline short get_max(int l, int r, int pos){\n\tint t = log2(r - l + 1);\n\treturn max(st[pos][l][t], st[pos][r - (1 << t) + 1][t]);\n}\n\ninline ll quick_pow(ll x, ll p, ll mod){\n\tll ans = 1;\n\twhile (p){\n\t\tif (p & 1) ans = ans * x % mod;\n\t\tx = x * x % mod;\n\t\tp >>= 1;\n\t}\n\treturn ans;\n}\n\nint main(){\n\tint n, cnt, q;\n\tll last_ans = 0;\n\tcin >> n;\n\tcnt = init1();\n\tbuild(root[0], 1, n);\n\tfor (register int i = 1; i <= n; i++){\n\t\tint a;\n\t\tcin >> a;\n\t\tfor (register int j = 1; j <= cnt; j++){\n\t\t\twhile (a % prime[j] == 0){\n\t\t\t\ta /= prime[j];\n\t\t\t\tpower[j][i]++;\n\t\t\t}\n\t\t}\n\t\troot[i] = root[i - 1];\n\t\tif (a > 1){\n\t\t\tif (pre[a] != 0) assign(root[i], 1, n, pre[a], 1);\n\t\t\tpre[a] = i;\n\t\t\tassign(root[i], 1, n, i, a);\n\t\t}\n\t}\n\tfor (register int i = 1; i <= cnt; i++){\n\t\tinit2(n, i);\n\t}\n\tcin >> q;\n\tfor (register int i = 1; i <= q; i++){\n\t\tll l, r;\n\t\tcin >> l >> r;\n\t\tl = (l + last_ans) % n + 1;\n\t\tr = (r + last_ans) % n + 1;\n\t\tif (l > r) swap(l, r);\n\t\tlast_ans = get_product(root[r], 1, n, l, r);\n\t\tfor (register int j = 1; j <= cnt; j++){\n\t\t\tlast_ans = last_ans * quick_pow(prime[j], get_max(l, r, j), mod) % mod;\n\t\t}\n\t\tcout << last_ans << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1650445446,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1422F \u3010Boring Queries\u3011"
    },
    {
        "content": "[\u9898\u4f20](https://www.luogu.com.cn/problem/CF1422F)\n\n\u7b80\u5316\u9898\u610f\uff1a\u5728\u7ebf\u533a\u95f4 $\\operatorname{lcm}$\u3002\n\n\u663e\u7136\u4e0d\u80fd\u76f4\u63a5\u4e0a\u7ebf\u6bb5\u6811\uff0c\u56e0\u4e3a $\\operatorname{lcm}$ \u53ea\u589e\u4e0d\u51cf\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u76f4\u63a5\u5f00\u9ad8\u7cbe\u90fd\u662f\u4e0d\u53ef\u884c\u7684\uff0c($10^5$ \u4e2a $10^8$ \u7ea7\u522b\u7684\u6570\u4e58\u8d77\u6765\u7a33\u5b9a\u98de\u5929)\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5206\u5f00\u7b97\u6bcf\u4e2a\u8d28\u56e0\u5b50\u7684\u8d21\u732e\u3002\n\n\u8bbe\u7d20\u6570\u96c6 $P=\\{p_1, p_2, \\dots p_m \\}$\uff0c\u5219\u5e8f\u5217\u4e2d\u7684\u6570 $a_i$ \u53ef\u8868\u793a\u6210\uff1a\n\n$$\\prod_{j=1}^m p_j^{c_{i, j}}$$\n\n\u8bb0 $C_j =\\max_{i=l}^r c_{i, j}$\uff0c\n\n\u90a3\u4e48\u6839\u636e\u5b9a\u4e49\uff0c\u533a\u95f4\u6700\u5c0f\u516c\u500d\u6570\u4e3a\uff1a\n\n$$\\prod_{j=1}^m p_j^{C_j}$$\n\n\u5927\u773c\u89c2\u5bdf $Max_{a}=2 \\times 10^5$\uff0c\u7531\u4e8e\u4efb\u4f55\u6570\u53ea\u4f1a\u6709\u4e00\u4e2a\u5927\u4e8e $\\sqrt{Max_{a}} \\approx 450$ \u7684\u7d20\u6570\uff0c\u6253\u8868\u540e\u53d1\u73b0\u8fd9\u4e2a\u8303\u56f4\u5185\u53ea\u6709 $87$ \u4e2a\u7d20\u6570\uff0c\u663e\u7136\u6839\u53f7\u5206\u6cbb\u4e86\uff1a\n\n- \u5bf9\u4e8e $\\le 450$ \u7684\u8d28\u56e0\u5b50\uff0c\u9884\u5904\u7406 ST \u8868\uff0c\u6bcf\u6b21\u8be2\u95ee\u66b4\u529b\u679a\u4e3e\u8d28\u56e0\u5b50\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(87 n \\log n)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(87n+87 \\log \\log n + 87q)$\u3002\n\n- \u5bf9\u4e8e\u5927\u4e8e $\\ge 450$ \u7684\u8d28\u56e0\u5b50\uff0c\u7531\u4e8e\u53ea\u6709\u4e00\u4e2a\uff0c\u4ee4 $b_i$ \u4e3a $a_i$ \u7684\u6700\u5927\u503c\u56e0\u5b50\uff0c\u90a3\u4e48\u5c31\u662f\u6c42\u533a\u95f4\u5185\u4e0d\u540c\u79cd\u7c7b\u6570\u7684\u4e58\u79ef\uff0c\u7c7b\u4f3c\u4e8e [ HH \u7684\u9879\u94fe ](https://www.luogu.com.cn/problem/P1972) \u8fd9\u9898\u7684\u5728\u7ebf\u505a\u6cd5\uff0c\u7528\u4e3b\u5e2d\u6811\uff0c\u6bcf\u6b21\u628a\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684 $b$ \u62d4\u6389\u5373\u53ef\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+q) \\log n)$\u3002\n\n\n\u5927\u6982\u7b97\u4e86\u4e00\u4e0b ST \u8868\u7a7a\u95f4\u4f1a\u88ab\u5361\uff0c\u6539\u6210 `char` \u7c7b\u5373\u53ef\u3002\n\n```cpp\nconst int mo=1e9+7;\nconst int N=1e5+5;\nconst int R=450;\nconst int Pcnt=87;\nint Su[Pcnt]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449};\nint n, m, Lg[N], a[N], pre[N*2], root[N], Mi[Pcnt][18];\nchar f[Pcnt][N][18];\nnamespace ZQF_AKIOI_LH_AKCTSC_CHT_AKWC{\n\tint tot;\n\tstruct node{int pro, lc, rc;}d[N*40];\n\t#define ls d[k].lc\n\t#define rs d[k].rc\n\t#define mid (l+r>>1)\n\tvoid pushup(int k){d[k].pro=1ll*d[ls].pro*d[rs].pro%mo;}\n\tvoid build(int &k, int l, int r){\n\t\tk=++tot;d[k].pro=1;\n\t\tif(l==r){d[k].pro=a[l&r];return ;}\n\t\tbuild(ls, l, mid), build(rs, mid+1, r);\n\t\tpushup(k);\n\t}\n\tvoid insert(int &k, int l, int r, int x, int v){\n\t\td[++tot]=d[k];k=tot;\n\t\tif(l==r){d[k].pro=v;return ;}\n\t\tif(x<=mid) insert(ls, l, mid, x, v);\n\t\telse insert(rs, mid+1, r, x, v);\n\t\tpushup(k);\n\t}\n\tint query(int k, int l, int r, int x, int y){\n\t\tif((!k)||l>y||r<x) return 1;\n\t\tif(x<=l&&r<=y) return d[k].pro;\n\t\treturn 1ll*query(ls, l, mid, x, y)*query(rs, mid+1, r, x, y)%mo;\n\t}\n\t#undef ls\n\t#undef rs\n\t#undef mid\n}\nint query(int j, int l, int r){\n\tint k=Lg[r-l+1];\n\treturn max(f[j][l][k], f[j][r-(1<<k)+1][k]);\n}\nsigned main(){\n\tn=read();Lg[0]=-1;\n\tfor(int i=1; i<=n; i++){\n\t\ta[i]=read();Lg[i]=Lg[i>>1]+1;\n\t\tfor(int j=0; j<Pcnt; j++)\n\t\t\twhile(a[i]%Su[j]==0) f[j][i][0]++, a[i]/=Su[j];\n\t}\n\tZQF_AKIOI_LH_AKCTSC_CHT_AKWC :: build(root[0], 1, n);\n\tfor(int i=1; i<=n; i++){\n\t\troot[i]=root[i-1];if(a[i]==1) continue;\n\t\tif(pre[a[i]]) ZQF_AKIOI_LH_AKCTSC_CHT_AKWC :: insert(root[i], 1, n, pre[a[i]], 1);\n\t\tpre[a[i]]=i;\n\t}\n\tfor(int k=0; k<Pcnt; k++){\n\t\tfor(int j=1; j<18; j++)\n\t\t\tfor(int i=1; i+(1<<j)-1<=n; i++)\n\t\t\t\tf[k][i][j]=max(f[k][i][j-1], f[k][i+(1<<j-1)][j-1]);\n\t\tMi[k][0]=1;\n\t\tfor(int i=1; i<18; i++) Mi[k][i]=1ll*Mi[k][i-1]*Su[k]%mo;\n\t}\n\tm=read();int last=0;\n\tfor(int i=1; i<=m; i++){\n\t\tint l=(read()%n+last%n)%n+1, r=(read()%n+last%n)%n+1;if(l>r) swap(l, r);last=1;\n\t\tfor(int j=0; j<Pcnt; j++){\n\t\t\tint x=query(j, l, r);\n\t\t\tlast=1ll*last*Mi[j][x]%mo;\n\t\t}\n\t\tlast=1ll*last*(ZQF_AKIOI_LH_AKCTSC_CHT_AKWC :: query(root[r], 1, n, l, r))%mo;\n\t\tprintf(\"%d\\n\", last);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1635916153,
        "uid": 341102,
        "name": "ReKoJ",
        "ccfLevel": 0,
        "title": "CF1422F Boring Queries"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u590d\u6742\u5ea6\u4f18\u79c0\u7684\u5bf9\u8d28\u56e0\u5b50\u6839\u53f7\u5206\u6cbb\u7684\u505a\u6cd5\uff0c\u5b8c\u5168\u4e0d\u7528\u5361\u7a7a\u95f4~~\u5c31\u662f\u88ab\u5361\u7ec6\u8282\u4e86~~\uff0c\u800c\u4e14\u7406\u8bba\u590d\u6742\u5ea6\u4e0e\u5355\u8c03\u6808+\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0d\u76f8\u4e0a\u4e0b\u3002\n\n\u9996\u5148\u81ea\u7136\u7684\u60f3\u5230\u5bf9\u4e8e\u6bcf\u79cd\u8d28\u6570\u7edf\u8ba1\u8d21\u732e\uff0c\u7136\u540e\u66f4\u81ea\u7136\u7684\u60f3\u5230\u4e00\u4e2a\u6570 $x$ \u81f3\u591a\u53ea\u6709\u4e00\u4e2a\u8d28\u56e0\u5b50\u5927\u4e8e $\\sqrt{x}$\uff0c\u4e8e\u662f\u5bf9\u8d28\u56e0\u5b50\u7684\u503c\u57df\u5206\u5757\u3002\n\n\u8bbe\u503c\u57df\u4e3a $W=2\\times10^5$\uff0c\u5bf9\u4e8e\u5c0f\u4e8e $\\sqrt{W}$ \u7684\u8d28\u6570\u53ea\u6709 $86$ \u4e2a\uff0c\u76f4\u63a5\u5bf9\u6bcf\u4e2a\u505a ST \u8868\uff0c\u5f00\u4e2a\u6302\u7528 $O(n)-O(1)$\uff0c\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u662f $O(86n)$ \u7684\u3002\n\n\u5bf9\u4e8e\u5927\u4e8e $\\sqrt{W}$ \u7684\u8d28\u6570\u6bcf\u4e2a $i$ \u53ea\u4f1a\u8d21\u732e\u4e00\u4e2a\u6570\uff0c\u90a3\u4e48\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5904\u7406\u8be2\u95ee\uff0c\u66b4\u529b\u5728\u5bf9\u5e94\u533a\u95f4\u4e0a\u8d21\u732e\u5373\u53ef\uff0c\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u662f $O(n\\log n)$\u3002\n\n\u7406\u8bba\u4e0a\u6765\u8bf4 $O(86n)$ \u5e94\u8be5\u4e0e $O(nw(n)\\log n)$ \u4e0d\u76f8\u4e0a\u4e0b\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e38\u6570\u88ab\u540a\u6253\u4e86\u3002\uff08\u60b2\uff09\n\n[\u4ee3\u7801](https://www.luogu.com.cn/paste/8h2epgld)\u4ec5\u4f9b\u53c2\u8003\u3002",
        "postTime": 1635408999,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "CF1422F Boring Queries"
    },
    {
        "content": "\u4e00\u9053\u5f88\u597d\u7684\u9898\u3002       \n\n\u505a\u6cd5\u6709\u4e24\u79cd\uff0c\u7b2c\u4e00\u79cd\u5c31\u662f\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u4e0d\u5f97\u4e0d\u8bf4\u6211\u6ca1\u770b\u61c2\u3002      \n\n\u4e8e\u662f\u5c31\u8bb2\u8bb2\u6b64\u9898\u7684\u7b2c\u4e8c\u79cd\u6839\u53f7\u5206\u6cbb\u7684\u505a\u6cd5\uff0c\u4f60\u770b\u8fd9 $3s,2e5$ \uff0c\u867d\u7136\u4e0d\u662f $Ynoi$ \u4f46\u662f\u7528\u811a\u60f3\u4e5f\u77e5\u9053\u8fd9\u79cd\u9898\u80af\u5b9a\u662f\u653e $O(n\\sqrt nlog_n)$ \u8fc7\u7684\uff0c\u4e0d\u7136 $1s$ \u5c31\u8db3\u77e3\u3002        \n           \n\u5982\u679c\u6211\u4eec\u76f4\u63a5\u50cf\u7ef4\u62a4\u533a\u95f4 $gcd$ \u4e00\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u9700\u8981\u4e2a\u9ad8\u7cbe\uff0c\u7136\u540e\u6211\u4eec\u5c31\u5f00\u5f00\u5fc3\u5fc3\u7206\u6389\u4e86\u8fd9\u9053\u9898\u3002          \n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651 $lcm$ \u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u4e00\u6bb5\u6570\u7684 $lcm$ \u6211\u4eec\u6709\u4e24\u79cd\u505a\u6cd5\uff0c\u4e00\u79cd\u662f $O(lenlog_{len})$ \u4e00\u4e2a\u4e2a\u66b4\u529b\u5408\u8d77\u6765\uff0c\u8fd8\u6709\u4e00\u4e2a\u5c31\u662f\u62c6\u5206\u6240\u6709\u6570\u7684\u8d28\u56e0\u6570\u7136\u540e\u6307\u6570\u53d6 $max$ \uff0c\u5bf9\u4e8e\u6b64\u9898\u6211\u4eec\u8003\u8651\u7b2c\u4e8c\u79cd\u505a\u6cd5\u3002       \n\n\u4e0d\u8fc7\u8003\u8651\u5f88\u96be\u7ef4\u62a4\u6240\u6709\u8d28\u56e0\u6570\uff0c\u6211\u4eec\u53ea\u80fd\u5148\u6839\u53f7\u5206\u6cbb\u538b\u7f29\u7a7a\u95f4\uff0c\u5bf9\u4e8e $\\leq \\sqrt {200000}$ \u7684\u73a9\u610f\u513f\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u5f00\u76f8\u5e94\u6570\u91cf\u7684\u7ebf\u6bb5\u6811\u7136\u540e\u7ef4\u62a4\u5bf9\u4e8e\u6bcf\u4e2a\u8d28\u56e0\u5b50\u7684\u6307\u6570\u533a\u95f4\u6700\u5927\u503c\uff0c\u63a5\u7740\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e $\\sqrt{200000} \\leq$ \u7684\u8d28\u56e0\u5b50\u5b83\u7684\u6307\u6570\u53ea\u4f1a\u4e3a $1$ \u5e76\u4e14\u53ea\u4f1a\u51fa\u73b0 $1$ \u4e2a\u8fd9\u6837\u7684\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5\u628a\u8fd9\u4e9b\u6570\u66b4\u529b\u4e58\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\u3002\u6211\u4eec\u7528 $HH$ \u7684\u9879\u94fe\u7684\u641e\u6cd5\u52a0\u4e3b\u5e2d\u6811\u6765\u7ef4\u62a4\u3002     \n\n\n\u5177\u4f53\u7684\uff0c\u6211\u4eec\u8003\u8651\u6bcf\u4e2a\u7248\u672c\u7684\u4e3b\u5e2d\u6811\uff0c\u5728 $root_r$ \u7684\u610f\u4e49\u4e0b\u76f8\u5f53\u4e8e\u7ef4\u62a4\u7684\u662f\u6240\u6709\u53f3\u7aef\u70b9\u5728 $r$ \u7684\u67e5\u8be2\u3002      \n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u7684\u7ef4\u62a4\u662f\u5bf9\u7684\u5462\uff1f       \n\n\u56e0\u4e3a\u6211\u4eec\u5982\u679c\u76f4\u63a5\u7ef4\u62a4\u7684\u8bdd\u5f88\u6709\u53ef\u80fd\u4f1a\u7b97\u91cd\u4e00\u4e9b\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u8003\u8651\u53bb\u91cd\u3002    \n\u6211\u4eec\u53ef\u4ee5\u6765\u4e2a\u5c0f\u5c0f\u7684\u8bc1\u660e\uff1a\u9996\u5148\u5728 $root_r$ \u7684\u7ebf\u6bb5\u6811\u4e2d\uff0c\u6211\u4eec\u7684 $[1,r]$ \u7684\u533a\u95f4\u7684\u7b54\u6848\u80af\u5b9a\u6ca1\u6709\u95ee\u9898\uff0c\u63a5\u7740\u6211\u4eec\u6765\u770b $[2,r]$ \u7684\u533a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec $1$ \u4f4d\u7f6e\u7684\u6700\u5927\u8d28\u56e0\u5b50\u672c\u6765\u53ef\u80fd\u662f\u548c $[2,r]$ \u4e2d\u4e00\u4e2a\u6570\u7684\u6700\u5927\u8d28\u56e0\u5b50\u7b97\u91cd\u4e86\uff0c\u4f46\u73b0\u5728\u5c31\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u53cd\u4e4b\u5982\u679c\u6211\u4eec $1$ \u4f4d\u7f6e\u7684\u6700\u5927\u8d28\u56e0\u5b50\u672c\u6765\u5c31\u6ca1\u91cd\uff0c\u6211\u4eec\u76f4\u63a5\u9664\u53bb\u4ed6\u5c31\u597d\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u7684\u65b9\u6cd5\u662f\u5bf9\u7684\uff0c\u800c\u6b64\u65f6\u6bd4\u5982\u8bf4\u4f60\u8981\u5728\u8fd9\u68f5\u6811\u4e0a\u67e5\u8be2\u533a\u95f4 $[1 , r - 1]$ \uff0c\u5047\u5982\u6211\u4eec\u7684 $r - 1$ \u4f4d\u548c $r$ \u4f4d\u7684\u6700\u5927\u8d28\u56e0\u5b50\u91cd\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5df2\u7ecf\u628a\u8d21\u732e\u79fb\u5230\u4e86 $r$ \u4f4d\u53bb\uff0c\u5c31\u4ea7\u751f\u4e86\u9519\u8bef\u3002          \n\n\u5177\u4f53\u5b9e\u73b0\u53c2\u8003\u7684 $piwry$ \u7684\u4ee3\u7801\u3002        \n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int Len = 2e5 + 5 , sqrtV = 455 , Maxn = 2e5 + 7e6 + 5 , Mseg1 = (1 << 18) + 5;\nconst long long Mod = 1e9 + 7;\nint inv[200005];\nint n,m,ans[Mseg1][86],a[200005],last[200005],maxn[200005];\nint ls(int x){return x << 1;}\nint rs(int x){return x << 1 | 1;}\nvoid push_up(int x,int op){ans[x][op] = max(ans[ls(x)][op] , ans[rs(x)][op]);}\nvoid update(int p,int l,int r,int idx,int op)\n{\n\tif(l == r)\n\t{\n\t\tans[p][op] ++;\n\t\treturn;\t\n\t} \n\tint mid = (l + r) >> 1;\n\tif(idx <= mid) update(ls(p) , l , mid , idx , op);\n\telse update(rs(p) , mid + 1 , r , idx , op);\n\tpush_up(p , op);\n}\nint query(int p,int l,int r,int nl,int nr,int op)\n{\n\tif(nl <= l && nr >= r) return ans[p][op];\n\tint mid = (l + r) >> 1 , res = 0;\n\tif(nl <= mid) res = max(res , query(ls(p) , l , mid , nl , nr , op));\n\tif(nr > mid) res = max(res , query(rs(p) , mid + 1 , r , nl , nr , op));\n\treturn res;\n}\nint pow(int x, int k)\n{\n\tint ret = 1;\n\tfor(; k ; x = 1LL * x * x % Mod , k >>= 1)\n\t\tif(k & 1)\n\t\t\tret = 1LL * ret * x % Mod;\n\treturn ret;\n}\nvoid pre_inv()\n{\n\tinv[1] = 1;\n\tfor(int i = 2 ; i < Len ; ++ i)\n\t\tinv[i] = 1LL * (Mod - Mod / i) * inv[Mod % i] % Mod;\n}\nbool np[455];\nint prim[455], totp;\nvoid getprim(int N){\n\tfor(int i = 2 ; i <= sqrt(N) ; i ++){\n\t\tif(!np[i])\n\t\t\tprim[++ totp] = i;\n\t\tfor(int j = 1 ; i * prim[j] <= sqrt(N) ; j ++){\n\t\t\tnp[i * prim[j]] = 1;\n\t\t\tif(i % prim[j] == 0)\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\nint top,root[Len];\nstruct node\n{\n\tint l,r,mul;\n}tree[Maxn];\nint clone(int p)\n{\n\ttop ++;\n\ttree[top] = tree[p];\n\ttree[top].mul = max(1 , tree[p].mul);\n\treturn top;\n}\nvoid Push_up_t(int p){tree[p].mul = 1LL * max(1 , tree[tree[p].l].mul) * max(1 , tree[tree[p].r].mul) % Mod;}\nint build(int p,int l,int r)\n{\n\tp = ++ top;\n\tif(l == r){tree[p].mul = 1 ; return p;}\n\tint mid = (l + r) >> 1;\n\ttree[p].l = build(tree[p].l , l , mid);\n\ttree[p].r = build(tree[p].r , mid + 1 , r);\n\tPush_up_t(p);\n\treturn p;\n}\nint Update_t(int p,int l,int r,int idx,int val)\n{\n\tp = clone(p);\n\tif(l == r)\n\t{\n\t\ttree[p].mul = 1LL * tree[p].mul * val % Mod;\n\t\treturn p;\n\t}\t\n\tint mid = (l + r) >> 1;\n\tif(idx <= mid) tree[p].l = Update_t(tree[p].l , l , mid , idx , val);\n\telse tree[p].r = Update_t(tree[p].r , mid + 1 , r , idx , val);\n\tPush_up_t(p);\n\treturn p;\n} \nint Query_t(int p,int l,int r,int nl,int nr)\n{\n\tif(nl <= l && nr >= r) return tree[p].mul;\n\tint mid = (l + r) >> 1 , res = 1;\n\tif(nl <= mid) res = 1LL * res * Query_t(tree[p].l , l , mid , nl , nr) % Mod;\n\tif(nr > mid) res = 1LL * res * Query_t(tree[p].r , mid + 1 , r , nl , nr) % Mod;\n\treturn res;\t\n}\nvoid Pre1()\n{\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tfor(int j = 1 ; j <= totp ; j ++)\n\t\t{\n\t\t\twhile(a[i] % prim[j] == 0)\n\t\t\t{\n\t\t\t\ta[i] /= prim[j];\n\t\t\t\tupdate(1 , 1 , n , i , j);\n\t\t\t}\n\t\t}\n\t\tmaxn[i] = a[i];\n\t}\n}\nvoid Pre2()\n{\n\troot[0] = build(1 , 1 , n);\n\tint cnt = 0;\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\troot[i] = Update_t(root[i - 1] , 1 , n , i , maxn[i]);\n\t\tif(last[maxn[i]]) root[i] = Update_t(root[i] , 1 , n , last[maxn[i]] , inv[maxn[i]]);\n\t\tlast[maxn[i]] = i;\n\t}\n}\nsigned main()\n{\n\tint maxa = 0;\n\tscanf(\"%d\",&n);\n\tfor(int i = 1 ; i <= n ; i ++){scanf(\"%d\",&a[i]);maxa = max(maxa , a[i]);}\n\tpre_inv();\n\tgetprim(maxa);\n\tPre1();\n\tPre2();\n\tscanf(\"%d\",&m);\n\tint lastans = 0;\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tint l,r;scanf(\"%d %d\",&l,&r);\n\t\tl = (l + lastans) % n + 1 , r = (r + lastans) % n + 1;\n\t\tif(l > r) swap(l , r);\n\t\tlastans = 1;\n\t\tfor(int j = 1 ; j <= totp ; j ++) lastans = 1LL * lastans * pow(prim[j] , query(1 , 1 , n , l , r , j)) % Mod;\n\t\tlastans = 1LL * lastans * Query_t(root[r] , 1 , n , l , r) % Mod;\n\t\tprintf(\"%d\\n\",lastans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1613743571,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1422F Boring Queries"
    },
    {
        "content": "\u9898\u610f\uff1a\u503c\u57df\u5c0f\u4e8e\u7b49\u4e8e $2\\times10^5$\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u8fdb\u884c $q$ \u6b21\u5728\u7ebf\u7684\u8be2\u95ee $[l,r]$\uff0c\u6c42\u533a\u95f4 $\\text{lcm}$\uff0c$n\\le 10^5,q\\le10^5$\u3002\n\n\u503c\u57df\u5206\u5757\uff0c\u5bf9\u5c0f\u4e8e $\\sqrt{2\\times10^5}$ \u7684\u8d28\u6570\uff0c\u4f7f\u7528 $\\text{ST}$ \u8868\u8bb0\u5f55\u533a\u95f4\u51fa\u73b0\u7684\u6700\u5927\u6b21\u5e42\u3002\n\n\u5bf9\u4e8e\u5927\u4e8e\u503c\u57df\u7684\u8d28\u6570\uff0c\u6bcf\u4e2a\u6570\u53ea\u4f1a\u5206\u89e3\u51fa\u4e00\u4e2a\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f7f\u7528 HH \u306e \u9879\u94fe \u7684\u5957\u8def\uff0c\u7528 $pre_i$ \u8868\u793a $i$ \u7684\u4e0a\u4e00\u6b21\u51fa\u73b0\u5728\u54ea\u91cc\uff0c\u7136\u540e\u53ea\u7edf\u8ba1\u7684 $pre<l$ \u7684\u503c\u7684\u4e58\u79ef\u5c31\u884c\u4e86\uff0c\u4f7f\u7528\u4e3b\u5e2d\u6811\u7b80\u5355\u7ef4\u62a4\u3002\n\n\u73b0\u5728\u662f $20:00$\uff0c\u6211\u770b\u6211\u4ec0\u4e48\u65f6\u5019\u5199\u5b8c\u3002\n\n$\\text{ST}$ \u8868 $\\text{MLE}$ \u4e86\u3002\n\n\u5ffd\u7136\u610f\u8bc6\u5230\u53ef\u4ee5\u6539\u6210 short\uff0c\u73b0\u5728\u662f $20:30$\uff0c\u8fc7\u4e86\u3002\n\n\n```cpp\nconst int p=1e9+7;\ntemplate<class _Tp,class _tp>void add(_Tp&x,const _tp& y){((x+=y)>=p)&&(x-=p);}template<class _Tp,class _tp>_Tp Add(_Tp x,const _tp y){add(x,y);return x;}\ntemplate<class _Tp,class _tp>void sub(_Tp&x,const _tp&y){((x-=y)<0)&&(x+=p);}template<class _Tp,class _tp>_Tp Sub(_Tp x,const _tp y){sub(x,y);return x;}\ntemplate<class _Tp,class _tp>void mul(_Tp&x,const _tp&y){x=1ll*x*y%p;}template<class _Tp,class _tp>_Tp Mul(const _Tp x,const _tp y){return 1ll*x*y%p;}\ntemplate<class _Tp,class _tp>_Tp ksm(_Tp a,_tp b){_Tp ans(1);for(;b;b>>=1,mul(a,a))if(b&1)mul(ans,a);return ans;} \ntemplate<class _Tp>_Tp div2(_Tp a){if(a&1)a+=p;return a>>1;}\n#define maxn 100010\nint n;\nint a[maxn];\nint pri[]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443};\nshort st[86][19][maxn],lg[maxn];\nshort rmq(int o,int l,int r){\n  int k=lg[r-l+1];\n  return max(st[o][k][l],st[o][k][r-(1<<k)+1]);\n}\nstruct prpr{\n  int sm;\n  int l,r;\n}tree[maxn<<5];\nint rt[maxn],tot;\nint pre[maxn],app[maxn];\nint build(int l,int r){\n  int x=++tot;\n  int mid=(l+r)>>1;\n  tree[x].sm=1;\n  if(l==r)return x;\n  tree[x].l=build(l,mid);\n  tree[x].r=build(mid+1,r);\n  return x;\n}\nint insert(int now,int pos,int d,int l=0,int r=n){\n  int x=++tot;\n  tree[x]=tree[now];\n  mul(tree[x].sm,d);\n  if(l==r)return x;\n  int mid=(l+r)>>1;\n  if(pos<=mid)tree[x].l=insert(tree[now].l,pos,d,l,mid);\n  else tree[x].r=insert(tree[now].r,pos,d,mid+1,r);\n  return x;\n}\nint ask(int x,int pos,int l=0,int r=n){\n  if(l==r)return tree[x].sm;\n  int mid=(l+r)>>1;\n  if(pos<=mid)return ask(tree[x].l,pos,l,mid);\n  else return Mul(tree[tree[x].l].sm,ask(tree[x].r,pos,mid+1,r));\n}\nsigned main(){\n  cin>>n;\n  rep(i,1,n)cin>>a[i];\n  rep(i,2,n)lg[i]=lg[i>>1]+1;\n  rep(j,0,85)rep(i,1,n)\n  while(a[i]%pri[j]==0)st[j][0][i]++,a[i]/=pri[j];\n  rep(k,0,85)rep(j,1,lg[n])rep(i,1,n-(1<<j)+1)st[k][j][i]=max(st[k][j-1][i],st[k][j-1][i+(1<<(j-1))]);\n  rt[0]=build(0,n);\n  tree[0].sm=1;//\u907f\u514d\u4e580\uff1f\n  rep(i,1,n){\n    if(a[i]!=1)rt[i]=insert(rt[i-1],app[a[i]],a[i]),app[a[i]]=i;\n    else rt[i]=rt[i-1];\n  }\n  int m;\n  cin>>m;\n  int ans=0;\n  while(m--){\n    int l,r;\n    cin>>l>>r;\n    l=(ans+l)%n+1;\n    r=(ans+r)%n+1;\n    if(l>r)swap(l,r);\n    ans=1;\n    rep(i,0,85)mul(ans,ksm(pri[i],rmq(i,l,r)));\n    int a=ask(rt[r],l-1);\n    int b=ask(rt[l-1],l-1);\n    mul(ans,a);\n    mul(ans,ksm(b,p-2));\n    cout<<ans<<endl;\n  }\n}\n```",
        "postTime": 1650456047,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "CF1422F Boring Queries \u8bb0\u5f55"
    },
    {
        "content": "### \u9898\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$ \u4ee5\u53ca $q$ \u6b21\u8be2\u95ee \u3002\n\n\u6bcf\u6b21\u8be2\u95ee\u5305\u542b $2$ \u4e2a\u6574\u6570 $l,r$ \uff0c\u4f60\u9700\u8981\u6c42\u51fa\u533a\u95f4 $[l,r]$ \u7684\u6700\u5c0f\u516c\u500d\u6570\u5bf9 $10^9 + 7$ \u53d6\u6a21\u7684\u7ed3\u679c\u3002\n\u8be2\u95ee\u5f3a\u5236\u5728\u7ebf \u3002\n\n\u6570\u636e\u8303\u56f4\uff1a \n\n$$1\u2264x,y\u226410^5, 1\\leq n,q\\leq 10^5,1 \\leq a_i\\leq 2\\cdot 10^5$$\n\n### Sol\n\n\u533a\u95f4 $\\text{lcm}$ ? \u8fd9\u4e0d\u662f\u7b80\u5355\u6570\u636e\u7ed3\u6784\u9898\uff1f\n\n\u60f3\u591a\u4e86\uff0c\u53d1\u73b0 $\\text{lcm}$ \u5e76\u6ca1\u6709 $\\text{gcd}$ \u90a3\u79cd\u5355\u8c03\u4e0d\u589e\u7684\u6027\u8d28\uff0cST \u8868\u884c\u4e0d\u901a\u4e86\uff01\n\n\u800c\u53d6\u6a21\u4e4b\u540e\u518d ST \u8868\u663e\u7136\u6ca1\u6709\u4e86\u7ed3\u5408\u5f8b\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u80fd\u4ece $\\text{lcm}$ \u7684\u5b9a\u4e49\u5165\u624b\uff0c\u5c1d\u8bd5\u53d1\u6398\u4e00\u4e9b\u6027\u8d28\u3002\n\n- \u5bf9\u4e8e $k$ \u4e2a\u6570 $a_i=\\prod_{i=1}^k p_i^{s_i}$\uff0c \n\t\u5b83\u4eec\u7684\u6700\u5c0f\u516c\u500d\u6570 $\\text{lcm} = \\prod_{i=1}^k p_i^{\\max _{j=1}^p{s_j}}$\n  \u5176\u4e2d $p$ \u662f\u8d28\u56e0\u5b50\u603b\u6570\u3002\n  \n\u53d1\u73b0\u4e86\u4ec0\u4e48\uff0c\u53ef\u4ee5\u5bf9\u6307\u6570 ST \u8868\uff01\n\n\u4eff\u7167 NOI2015 \u5bff\u53f8\u665a\u5bb4 \u7684\u5957\u8def\uff0c\u5bf9\u8d28\u56e0\u5b50\u6839\u53f7\u5206\u6cbb\uff0c\u9009\u53d6\u9608\u503c $K$ \uff0c\u5bf9\u4e0d\u5927\u4e8e $K$ \u7684\u8d28\u56e0\u5b50\u66b4\u529b ST \u8868\u9884\u5904\u7406\uff0c\u5e76\u5c06\u539f\u5e8f\u5217\u4e2d\u8fd9\u4e9b\u8d28\u56e0\u5b50\u53bb\u9664\u3002\n\n\u5f53\u5c06\u8fd9\u4e9b\u8d28\u56e0\u5b50\u53bb\u9664\u540e\uff0c\u539f\u5e8f\u5217\u53ea\u5269\u4e0b\u5927\u4e8e $K$ \u7684\u8d28\u6570\u548c $1$ \uff0c$1$ \u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\uff1b\u5bf9\u4e8e\u5927\u4e8e $K$ \u7684\u8d28\u6570\uff0c\u6211\u4eec\u60f3\u8981\u6c42\u51fa\u4e00\u6bb5\u533a\u95f4\u4e2d\u8fd9\u4e9b\u6570\u53bb\u91cd\u540e\u7684\u4e58\u79ef\u3002\n\n\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\u53ef\u6301\u4e45\u5316\uff01\n\n\u6211\u4eec\u53ef\u4ee5\u5efa $n$ \u68f5\u4e3b\u5e2d\u6811\uff0c\u7b2c $i$ \u68f5\u4e3b\u5e2d\u6811\u4fdd\u5b58\u5e8f\u5217\u4e2d $pre_p \\le i$ \u7684 $p$ \u7684\u4e58\u79ef\uff0c\u6bcf\u6b21\u5728\u7b2c $l-1$ \u4e3b\u5e2d\u6811\u4e0a\u67e5\u8be2\u4e0b\u6807\u4f4d\u4e8e $[l,r]$ \u95f4\u7684 $\\prod p$ \uff0c\u8fd9\u4e5f\u662f\u6700\u76f4\u89c2\u7684\u505a\u6cd5\u3002\n\n\u9664\u6b64\u4ee5\u5916\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e5f\u53ef\u4ee5\u7c7b\u6bd4 [HH \u7684\u9879\u94fe](https://www.luogu.com.cn/problem/P1972) \u7684\u5728\u7ebf\u505a\u6cd5\u6c42\u89e3 \uff0c\u6211\u4eec\u540c\u6837\u662f\u5efa $n$ \u68f5\u4e3b\u5e2d\u6811\uff0c\u4f46\u4e0d\u540c\u7684\u662f\uff0c\u5f53\u5904\u7406\u5230\u7b2c $i$ \u68f5\u4e3b\u5e2d\u6811\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c06 $pre_{a_i}$ \u4e0a\u4e58\u4e0a\u7684 $a_i$ \u7684\u8d21\u732e\u53bb\u6389\uff0c\u5e76\u5728\u4e0b\u6807 $i$ \u5904\u6dfb\u52a0 $a_i$ \u7684\u8d21\u732e\uff0c\u6bcf\u6b21\u5728\u7b2c $r$ \u4e3b\u5e2d\u6811\u4e0a\u67e5\u8be2\u4e0b\u6807\u4f4d\u4e8e $[l,r]$ \u95f4\u7684 $\\prod p$\u3002\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u53ef\u4ee5\u518d\u65b0\u5efa\u7b2c $0$ \u68f5\u4e3b\u5e2d\u6811\uff0c\u5b58\u50a8\u6ca1\u6709\u5220\u9664\u8d21\u732e\u7684 $a_i$ \u503c\uff0c\u8fd9\u6837\u6bcf\u6b21\u53ea\u8981\u4ece\u4e0a\u4e00\u68f5\u6811\u5904\u5220\u9664\u76f8\u5e94\u7684\u8d21\u732e\uff0c\u4e0d\u9700\u8981\u6dfb\u52a0\u65b0\u8d21\u732e\u3002\n\n\u5f53\u7136\uff0c\u4e24\u79cd\u505a\u6cd5\u672c\u8d28\u76f8\u540c\u3002\n\n\u4f46\u5230\u4e86\u8fd9\u4e00\u6b65\uff0c\u4f60\u8fd8\u8fdc\u8fdc\u6ca1\u6709\u505a\u5b8c\uff0c\u56e0\u4e3a\u8fd9\u9898\u4e27\u5fc3\u75c5\u72c2\u7684\u4e00\u70b9\u4e0d\u5728\u4e8e\u7b97\u6cd5\uff0c\u800c\u5728\u4e8e\u5361\u7a7a\u95f4\uff01\n\n\u9996\u5148\u4f60\u9700\u8981\u7b97\u597d\u4e3b\u5e2d\u6811\u7684\u5185\u5b58\uff0c\u80fd\u5f00 $10\\times MAXN$ \u5c31\u4e0d\u8981\u5f00 $20 \\times MAXN$ \u3002\n\n\u5176\u6b21\u4f60\u5e94\u8be5\u6ce8\u610f\u5230\u7a7a\u95f4\u7684\u74f6\u9888\u5728\u4e8e ST \u8868\uff0c\u6240\u4ee5\u4f60\u9009\u5b9a\u7684\u9608\u503c $K$ \u4e0d\u80fd\u592a\u5927\uff0c\u5e76\u4e14\u8981\u7b97\u597d $K$ \u5185\u7684\u8d28\u6570\u4e2a\u6570\uff0c\u5361\u7740\u5f00\u3002\n\n\u6700\u540e\uff0c\u4f60\u7684 ST \u8868\u5f00 short \u4e5f\u8fc7\u4e0d\u53bb\uff0c\u5fc5\u987b\u8981\u5f00\u6210 char\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 200010\n#define MOD 1000000007\n#define B 450\nusing namespace std;\nint n,a[MAXN+5],vis[B+5],pri[B+5],pricnt,mn[MAXN+5],pre[MAXN+5],lg[MAXN+5];\nchar f[90][MAXN+5][18];\nint Fast(int x,int y){\n\tint ret=1;\n\twhile(y){\n\t\tif(y&1) ret=1ll*ret*x%MOD;\n\t\tx=1ll*x*x%MOD,y>>=1;\n\t}return ret;\n}int root[MAXN];\nint numc,mul[MAXN*10];\nint ls[MAXN*10],rs[MAXN*10];\t\nvoid pushup(int rt){mul[rt]=1ll*mul[ls[rt]]*mul[rs[rt]]%MOD;}\nvoid build(int &rt,int l,int r){\n\tmul[rt=(++numc)]=1;\n\tif(l==r){mul[rt]=a[l]; return;}\n\tint md=(l+r)>>1; \n\tbuild(ls[rt],l,md);\n\tbuild(rs[rt],md+1,r); \n\tpushup(rt);\n}int modify(int pre,int l,int r,int x){\n\tint rt=(++numc); \n\tls[rt]=ls[pre];\n\trs[rt]=rs[pre];\n\tmul[rt]=mul[pre];\n\tif(l==r){mul[rt]=1; return rt;} //\u5728\u53f6\u8282\u70b9\u8d4b\u503c\uff0c\u901a\u8fc7 pushup \u4f20\u4e0a\u53bb \n\t//\u8fd9\u91cc\u5c06\u53f6\u8282\u70b9\u8d4b\u62101\uff0c\u76f8\u5f53\u4e8e\u53bb\u9664\u4e86\u4ece\u6839\u901a\u5411 x \u7684\u94fe\u4e0a x \u7684\u8d21\u732e  \n\tint md=(l+r)>>1;\n\tif(x<=md) ls[rt]=modify(ls[pre],l,md,x);\n\telse rs[rt]=modify(rs[pre],md+1,r,x);\n\tpushup(rt); return rt;\n}int ask(int rt,int l,int r,int L,int R){\n\tif(!rt) return 1;\n\tif(L<=l&&r<=R) return mul[rt];\n\tint md=(l+r)>>1,ret=1;\n\tif(L<=md) ret=1ll*ret*ask(ls[rt],l,md,L,R)%MOD;\n\tif(R>md) ret=1ll*ret*ask(rs[rt],md+1,r,L,R)%MOD;\n\treturn ret;\n}\nint que(int id,int l,int r){\n\tint p=lg[r-l+1];\n\treturn max(f[id][l][p],f[id][r-(1<<p)+1][p]);\n}signed main(){\n\tscanf(\"%d\",&n); vis[0]=vis[1]=1,lg[0]=-1;\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=MAXN;i++) lg[i]=lg[i>>1]+1;\n\tfor(int i=2;i<=B;i++){\n\t\tif(!vis[i]) pri[++pricnt]=i,mn[i]=i;\n\t\tfor(int j=1;j<=pricnt&&i*pri[j]<=B;j++){\n\t\t\tvis[i*pri[j]]=1;\n\t\t\tmn[i*pri[j]]=min(mn[i],pri[j]);\n\t\t\tif(i%pri[j]==0) break;\n\t\t}\n\t}for(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=pricnt;j++)\n\t\t\twhile(a[i]%pri[j]==0) a[i]/=pri[j],f[j][i][0]++;\n\tbuild(root[0],1,n);\n\tfor(int i=1;i<=n;i++){\n\t\troot[i]=root[i-1]; if(a[i]==1) continue;\n\t\tif(pre[a[i]]) root[i]=modify(root[i-1],1,n,pre[a[i]]);\n\t\tpre[a[i]]=i;\n\t\t//\u5df2\u7ecf\u6709a[i]\u4e86\uff0c\u90a3\u4e48pre[a[i]]\u7684\u8d21\u732e\u8981\u53bb\u9664 \n\t}for(int k=1;k<=pricnt;k++)\n\t\tfor(int j=1;j<=17;j++)\n\t\t\tfor(int i=1;i+(1<<(j-1))<=n;i++)\n\t\t\t\tf[k][i][j]=max(f[k][i][j-1],f[k][i+(1<<(j-1))][j-1]);\n\tint Q; scanf(\"%d\",&Q); int lstans=0;\n\twhile(Q--){\n\t\tint l,r; scanf(\"%d%d\",&l,&r);\n\t\tl=(l+lstans)%n+1,r=(r+lstans)%n+1;\n\t\tif(l>r) swap(l,r); lstans=1;\n\t\tfor(int i=1;i<=pricnt;i++) lstans=1ll*lstans*Fast(pri[i],que(i,l,r))%MOD;\n\t\tlstans=1ll*lstans*ask(root[r],1,n,l,r)%MOD; printf(\"%d\\n\",lstans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1637288904,
        "uid": 132040,
        "name": "S00021",
        "ccfLevel": 0,
        "title": "CF1422F"
    },
    {
        "content": "[Codeforces \u9898\u9762\u4f20\u9001\u95e8](https://codeforces.ml/contest/1422/problem/F) & [\u6d1b\u8c37\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1422F)\n\n\u6ca1\u5f80\u201c\u6bcf\u4e2a\u6570\u6700\u591a\u53ea\u6709\u4e00\u4e2a $>\\sqrt{x}$ \u7684\u8d28\u56e0\u5b50\u201d\u8fd9\u4e2a\u6027\u8d28\u7684\u849f\u84bb\u6765\u4e00\u53d1\u7279\u522b\u66b4\u529b\u7684\u89e3\u6cd5\u3002\n\n\u9996\u5148\u770b\u5230\u8fd9\u4e2a\u5f3a\u5236\u5728\u7ebf\u663e\u7136\u65e0\u6cd5\u7528 cdq \u5206\u6cbb\u6216\u8005\u626b\u63cf\u7ebf\u4e00\u7c7b\u79bb\u7ebf\u7b97\u6cd5\u7ef4\u62a4\uff0c\u56e0\u6b64\u8003\u8651\u4e3b\u5e2d\u6811\u6216\u8005\u6811\u5957\u6811\u8fd9\u4e00\u7c7b\u5728\u7ebf\u7b97\u6cd5\u3002\u6ce8\u610f\u5230\u5bf9\u4e8e\u4e00\u4e2a\u8d28\u56e0\u5b50 $p$\u200b\u200b\uff0c\u663e\u7136 $p$\u200b\u200b \u5bf9\u4e00\u6bb5\u533a\u95f4\u7684\u8d21\u732e\u5c31\u662f $p^\\text{maxc}$\u200b\u200b\uff0c\u5176\u4e2d $\\text{maxc}$\u200b\u200b \u8868\u793a\u533a\u95f4 $[l,r]$\u200b\u200b \u4e2d $p$\u200b\u200b \u6b21\u6570\u7684\u6700\u5927\u503c\u3002\u8fd9\u4e2a\u6700\u5927\u503c\u663e\u7136\u4e0d\u597d\u7ef4\u62a4\uff0c\u56e0\u6b64\u8f6c\u5316\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u6570 $p$\u200b\u200b \u7684\u6b21\u6570 $p^c$\u200b\u200b\uff0c\u5b83\u4f1a\u5bf9\u54ea\u4e9b\u533a\u95f4\u4ea7\u751f\u8d21\u732e\uff0c\u6839\u636e\u7b1b\u5361\u5c14\u6811\u90a3\u4e00\u5957\u7406\u8bba\uff0c\u6ee1\u8db3 $[l,r]$\u200b\u200b \u4e2d $p$\u200b\u200b \u6b21\u6570\u7684\u6700\u5927\u503c\u521a\u597d\u4e3a $c$\u200b\u200b \u7684\u533a\u95f4\u5de6\u7aef\u70b9\u5f62\u6210\u4e00\u4e2a\u533a\u95f4 $[L_l,R_l]$\u200b\u200b\uff0c\u53f3\u7aef\u70b9\u4e5f\u5f62\u6210\u4e00\u4e2a\u533a\u95f4 $[L_r,R_r]$\u200b\u200b\uff0c\u56e0\u6b64\u5bf9\u4e8e $l\\in[L_l,R_l],r\\in[L_r,R_r]$\u200b\u200b\uff0c$[l,r]$\u200b\u200b \u533a\u95f4\u7684\u7b54\u6848\u5e94\u4e58\u4e0a $p^c$\u200b\u200b\u3002$L_l,R_l,L_l,R_r$\u200b\u200b \u53ef\u4ee5\u5355\u8c03\u6808\u6c42\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u5c06\u6240\u6709 $c$\u200b\u200b \u63d2\u5165 `set` \u4e2d\u7136\u540e\u5728 `set` \u4e2d\u7528 `lower_bound` \u4e4b\u7c7b\u7684\u4e1c\u897f\u6c42\u5f97\u3002\u7531\u4e8e\u53ea\u6709 $c\\ne 0$\u200b\u200b \u7684 $c$\u200b\u200b \u662f\u6709\u610f\u4e49\u7684\uff0c\u800c\u5bf9\u4e8e\u6240\u6709 $p$\u200b\u200b\uff0c\u6709\u610f\u4e49\u7684 $c$\u200b\u200b \u7684\u4e2a\u6570\u4e4b\u548c\u5e94\u4e3a\u6240\u6709 $a_i$\u200b\u200b \u8d28\u56e0\u5b50\u4e2a\u6570\u4e4b\u548c\uff0c\u800c\u8fd9\u663e\u7136\u4e0d\u8d85\u8fc7 $\\max\\{\\omega(n)\\}\u00b7n\\approx 7n$\u200b\u200b\uff0c\u56e0\u6b64\u8fd9\u6837\u590d\u6742\u5ea6\u662f $\\mathcal O(7n)$\u200b\u200b \u6216 $\\mathcal O(7n\\log n)$\u200b\u200b\u200b\uff0c\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u5185\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u600e\u6837\u8ba1\u7b97\u7b54\u6848\u3002\u663e\u7136\u7ecf\u8fc7\u6211\u4eec\u8fd9\u4e48\u4e00\u5206\u6790\uff0c\u6240\u6709\u8d21\u732e\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\uff1a\u521d\u59cb\u6709\u4e00\u4e2a\u5168\u4e3a $1$ \u7684\u77e9\u9635 $a$\uff0c\u6709\u82e5\u5e72\u6b21\u64cd\u4f5c\uff1a\u5bf9\u4e8e $i\\in[l_1,r_1],j\\in[l_2,r_2],a_{i,j}\\leftarrow a_{i,j}\u00b7v$\uff0c\u6c42 $a_{l,r}$\u3002\u770b\u5230\u8fd9\u4e2a\u8bbe\u95ee\u4e00\u773c\u6811\u5957\u6811\uff0c\u76f4\u63a5\u6811\u5957\u6811\u5927\u6982\u662f $7n\u00b7\\log^2n$\uff0c\u7a7a\u95f4\u548c\u65f6\u95f4\u90fd\u5f88\u5371\uff0c\u6211\u7b2c\u4e00\u6b21\u63d0\u4ea4\u5927\u7ea6\u662f TLE #21\u3002\u8003\u8651\u52a0\u4e00\u70b9\u5c0f\u5c0f\u7684\u4f18\u5316\uff0c\u6839\u636e\u590d\u6742\u5ea6\u5e73\u8861\u7684\u601d\u60f3\uff0c\u6211\u4eec\u8bbe\u4e00\u4e2a\u9608\u503c $B$\uff08$30\\sim 50$\uff09\uff0c\u90a3\u4e48\u5bf9\u4e8e $\\le B$ \u7684\u8d28\u56e0\u5b50\uff0c\u6709\u610f\u4e49\u7684 $c$ \u7684\u4e2a\u6570\u53ef\u80fd\u5f88\u591a\uff0c\u6b64\u65f6\u76f4\u63a5 ST \u8868\u7ef4\u62a4\u6700\u5927\u503c\u662f $n\\log n$ \u7684\uff0c\u53cd\u800c\u4f18\u4e8e\u6811\u5957\u6811\u7684 2log\uff0c\u56e0\u6b64\u8003\u8651\u5bf9 $\\le B$ \u7684\u8d28\u56e0\u5b50\u6bcf\u4e2a\u5efa\u4e00\u4e2a ST \u8868\uff0c\u7136\u540e\u6bcf\u6b21\u8be2\u95ee\u8fd9\u4e9b\u8d28\u56e0\u5b50\u7684\u8d21\u732e\u5c31\u66b4\u529b\u904d\u5386\u5373\u53ef\u3002\n\n```cpp\nconst int MAXN=1e5;\nconst int MAXV=2e5;\nconst int MAXP=MAXN<<8;\nconst int LOG_N=17;\nconst int MOD=1e9+7;\nint n,qu,a[MAXN+5];\nint pr[MAXV/6+5],prcnt=0,mnp[MAXV+5];\nbitset<MAXV+5> vis;\nvector<pii> ps[MAXV+5];\nvoid sieve(int n){\n\tfor(int i=2;i<=n;i++){\n\t\tif(!vis[i]) pr[++prcnt]=i,mnp[i]=i;\n\t\tfor(int j=1;j<=prcnt&&pr[j]*i<=n;j++){\n\t\t\tvis[pr[j]*i]=1;mnp[pr[j]*i]=pr[j];\n\t\t\tif(i%pr[j]==0) break;\n\t\t}\n\t}\n}\nint qpow(int x,int e){\n\tint ret=1;\n\tfor(;e;e>>=1,x=1ll*x*x%MOD) if(e&1) ret=1ll*ret*x%MOD;\n\treturn ret;\n}\nstruct node{int ch[2],val;} s[MAXP+5];\nint rt[MAXN+5],ncnt=0;\nvoid pushup(int k){s[k].val=1ll*s[s[k].ch[0]].val*s[s[k].ch[1]].val%MOD;}\nvoid insert_in(int &k,int l,int r,int p,int v){\n\tif(!k) k=++ncnt,s[k].val=1;\n\tif(l==r) return s[k].val=1ll*s[k].val*v%MOD,void();\n\tint mid=l+r>>1;\n\tif(p<=mid) insert_in(s[k].ch[0],l,mid,p,v);\n\telse insert_in(s[k].ch[1],mid+1,r,p,v);\n\tpushup(k);\n}\nvoid insert(int x,int l,int r,int v){\n\tint iv=qpow(v,MOD-2);\n\tfor(int i=x;i<=n;i+=(i&(-i))){\n\t\tinsert_in(rt[i],1,n,l,v);\n\t\tif(r!=n) insert_in(rt[i],1,n,r+1,iv);\n\t}\n}\nint query_in(int k,int l,int r,int ql,int qr){\n\tif(!k) return 1;if(ql<=l&&r<=qr) return s[k].val;\n\tint mid=l+r>>1;\n\tif(qr<=mid) return query_in(s[k].ch[0],l,mid,ql,qr);\n\telse if(ql>mid) return query_in(s[k].ch[1],mid+1,r,ql,qr);\n\telse return 1ll*query_in(s[k].ch[0],l,mid,ql,mid)*query_in(s[k].ch[1],mid+1,r,mid+1,qr)%MOD;\n}\nint query(int x,int y){\n\tint ret=1;\n\tfor(;x;x&=(x-1)) ret=1ll*ret*query_in(rt[x],1,n,1,y)%MOD;\n\treturn ret;\n}\nvoid add(int l1,int r1,int l2,int r2,int v){\n//\tprintf(\"%d %d %d %d %d\\n\",l1,r1,l2,r2,v);\n\tinsert(l1,l2,r2,v);if(r1^n) insert(r1+1,l2,r2,qpow(v,MOD-2));\n}\nint st[11][MAXN+5][LOG_N+2];\nint query_st(int x,int l,int r){\n\tint k=31-__builtin_clz(r-l+1);\n\treturn max(st[x][l][k],st[x][r-(1<<k)+1][k]);\n}\nint main(){\n\tscanf(\"%d\",&n,&qu);sieve(MAXV);s[0].val=1;\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=n;i++){\n\t\tint tmp=a[i];\n\t\twhile(tmp^1){\n\t\t\tint p=mnp[tmp],cnt=0;\n\t\t\twhile(tmp%p==0) tmp/=p,cnt++;\n\t\t\tps[p].pb(mp(cnt,i));\n\t\t}\n\t}\n\tfor(int i=1;i<=10;i++){\n\t\tfor(pii p:ps[pr[i]]) st[i][p.se][0]=p.fi;\n\t\tfor(int j=1;j<=LOG_N;j++) for(int k=1;k+(1<<j)-1<=n;k++)\n\t\t\tst[i][k][j]=max(st[i][k][j-1],st[i][k+(1<<j-1)][j-1]);\n\t}\n\tfor(int i=31;i<=MAXV;i++) if(!ps[i].empty()){\n\t\tsort(ps[i].begin(),ps[i].end());\n\t\treverse(ps[i].begin(),ps[i].end());\n\t\tset<int> st;st.insert(0);st.insert(n+1);\n\t\tfor(pii p:ps[i]){\n\t\t\tst.insert(p.se);\n\t\t\tset<int>::iterator it=st.find(p.se);\n\t\t\tint pre=*--it,nxt=*++ ++it;\n//\t\t\tprintf(\"%d %d\\n\",pre,nxt);\n\t\t\tadd(pre+1,p.se,p.se,nxt-1,qpow(i,p.fi));\n\t\t}\n\t} scanf(\"%d\",&qu);int pre=0;\n\twhile(qu--){\n\t\tint x,y;scanf(\"%d%d\",&x,&y);\n\t\tx=(x+pre)%n+1;y=(y+pre)%n+1;\n\t\tif(x>y) swap(x,y);\n//\t\tprintf(\"%d %d\\n\",x,y);\n\t\tpre=query(x,y);\n\t\tfor(int i=1;i<=10;i++) pre=1ll*pre*qpow(pr[i],query_st(i,x,y))%MOD;\n\t\tprintf(\"%d\\n\",pre);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1630769164,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1422F Boring Queries"
    },
    {
        "content": "### [\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/CF1422F)\n\n## \u89e3\u9898\u601d\u8def\n\n\u4e00\u4e2a\u663e\u7136\u7684\u4e8b\u5b9e\u662f\uff0c$\\operatorname{lcm}(a\\mod p,b\\mod p)\\neq\\operatorname{lcm}(a,b)\\mod p$\u3002\u7528\u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u7684\u8bdd~~\u5728n=100\u65f6\u590d\u6742\u5ea6\u76f4\u63a5\u7206\u70b8~~\uff0c\u6211\u4eec\u8003\u8651\u7528\u56e0\u5f0f\u5206\u89e3\u505a\u8fd9\u9053\u9898\u3002\n\n\u5047\u8bbe $\\displaystyle a_i=\\prod p_j^{\\alpha_{i,j}}$\uff0c\u5219\u6709\n\n$$\n\\operatorname{lcm}(a_l,a_{l+1},\\dots,a_r)=\\prod p_j^{\\max\\{a_{i,j}\\ |\\ l\\le i\\le r\\}}\n$$\n\n\u4f46\u662f $2\\times10^5$ \u4ee5\u5185\u7684\u8d28\u6570\u6570\u91cf\u592a\u591a\uff0c\u4e0a\u5f0f\u65e0\u6cd5\u76f4\u63a5\u8ba1\u7b97\uff0c\u8003\u8651\u4f7f\u7528\u6839\u53f7\u5206\u6cbb\u89e3\u51b3\u3002\n\n\u8bbe $m=\\max\\{a_i\\}$\uff0c\u6211\u4eec\u5c06\u5927\u4e8e $\\sqrt{m}$ \u548c\u5c0f\u4e8e\u7b49\u4e8e $\\sqrt{m}$ \u7684\u8d28\u56e0\u6570\u5206\u522b\u8003\u8651\u3002\n\n$(\\sqrt m)_{max}=\\sqrt{200000}\\approx447.21$\u3002$447$ \u4ee5\u5185\u7684\u8d28\u6570\u4ec5\u6709 $90$ \u4e2a\u5de6\u53f3\uff0c\u7528ST\u8868\u8bb0\u5f55\u6bcf\u4e2a\u8d28\u6570\u533a\u95f4\u5185\u6307\u6570\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u66b4\u529b\u8ba1\u7b97\u5176\u8d21\u732e\uff0c\u590d\u6742\u5ea6\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5927\u4e8e $\\sqrt{m}$ \u7684\u8d28\u56e0\u6570\u5728\u6bcf\u4e00\u4e2a\u6570\u4e2d\u6307\u6570\u4e0d\u8d85\u8fc7 $1$\uff08\u5982\u679c\u5b58\u5728 $p>\\sqrt{m}$ \u4e14\u5176\u6307\u6570 $\\alpha\\ge2$\uff0c\u90a3\u4e48 $p^\\alpha>(\\sqrt{m})^2=\\max\\{a_i\\}$\uff0c\u4e0e\u524d\u63d0\u77db\u76fe\uff09\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u4e00\u4e2a\u533a\u95f4\u51fa\u73b0\u8fc7\u7684\u4e0d\u540c\u7684\u6570\u7684\u4e58\u79ef\u3002\n\n\u7531\u4e8e\u6ca1\u6709\u4fee\u6539\uff0c\u5148\u8003\u8651\u79bb\u7ebf\u505a\u6cd5\u3002\u4e00\u822c\u5904\u7406\u533a\u95f4\u53bb\u91cd\u7684\u505a\u6cd5\u662f\u5c06\u8be2\u95ee\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\u5904\u7406\u3002\u5177\u4f53\u5730\uff0c\u8bbe\u5f53\u524d\u5904\u7406\u5230\u7684\u53f3\u7aef\u70b9\u4e3a $r$\u3002\u5982\u679c $a_r$ \u5728 $[1,r]$ \u4e2d\u51fa\u73b0\u8fc7\uff0c\u5c31\u5c06\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e $pos_{a_r}$ \u4e0a\u4e58\u4e0a $a_r^{-1}$\uff0c\u5e76\u66f4\u65b0 $pos_{a_r}\\gets r$\u3002\u6574\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u4f46\u662f\u672c\u9898\u5f3a\u5236\u5728\u7ebf\uff0c\u53ef\u4ee5\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5b8c\u6210\u4e0a\u8ff0\u7684\u64cd\u4f5c\u3002\n\n## \u6ce8\u610f\u4e8b\u9879\n\nST\u8868\u7684\u6570\u7ec4\u8981\u5f00\u6210`char`\u7c7b\u578b\uff0c\u5426\u5219\n![](https://cdn.luogu.com.cn/upload/image_hosting/czhko0id.png)\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int MOD=1e9+7;\nint n,m,maxx,msqt,a[100005],no[505],pos[200005];\nchar f[90][100005][18];\nbool vis[200005];\nvector<int> prm;\nvoid euler(int mx)\n{\n    for(int i=2;i<=mx;i++)\n    {\n        if(!vis[i]) prm.push_back(i);\n        for(int j: prm)\n        {\n            if(i*j>mx)  break;\n            vis[i*j]=true;\n            if(i%j==0)  break;\n        }\n    }\n}\ninline void ST()\n{\n    for(int k=1;k<=maxx;k++)\n        for(int i=1;i<=17;i++)\n            for(int j=1;(j+(1<<i)-1)<=n;j++)\n                f[k][j][i]=max(f[k][j][i-1],f[k][j+(1<<i-1)][i-1]);\n}\ninline char stQuery(int l,int r,int i)\n{\n    if(i>maxx)  return 0;\n    int siz=log2(r-l+1);\n    return max(f[i][l][siz],f[i][r-(1<<siz)+1][siz]);\n}\nstruct TreeNode\n{\n    LL val;int ver;\n    TreeNode *lc,*rc;\n    TreeNode(): val(1),ver(0)\n        { lc=rc=nullptr; }\n}*rt[200005];\ntypedef TreeNode *pNode;\nvoid modify(int p,LL x,int v,pNode &i,int l=1,int r=n)\n{\n    if(!i)  i=new TreeNode,i->ver=v;\n    if(i->ver!=v)   i=new TreeNode(*i),i->ver=v;\n    i->val=i->val*x%MOD;\n    if(l!=r)\n    {\n        int mid=(l+r)>>1;\n        if(mid>=p)  modify(p,x,v,i->lc,l,mid);\n        else    modify(p,x,v,i->rc,mid+1,r);\n    }\n}\nLL query(int lq,int rq,pNode i,int l=1,int r=n)\n{\n    if(!i)\treturn 1;\n    if(l>=lq && r<=rq)\treturn i->val;\n    LL mid=(l+r)>>1,res=1;\n    if(mid>=lq) res*=query(lq,rq,i->lc,l,mid);\n    if(mid<rq)  res*=query(lq,rq,i->rc,mid+1,r);\n    return res%MOD;\n}\ninline LL quickPow(LL a,LL b)\n{\n    LL res=1;a%=MOD;\n    while(b)\n    {\n        if(b&1)\tres=res*a%MOD;\n        a=a*a%MOD,b>>=1;\n    }\n    return res;\n}\ninline void ztt(int x,int i)\n{\n    if(pos[x])\n        modify(pos[x],quickPow(x,MOD-2),i,rt[i]);\n    modify(pos[x]=i,x,i,rt[i]);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)    scanf(\"%d\",&a[i]),maxx=max(maxx,a[i]);\n    msqt=sqrt(maxx);\n    euler(msqt);\n    for(int i=0;i<prm.size();i++)   no[prm[i]]=i+1;\n    maxx=prm.size();\n    for(int i=1;i<=n;i++)\n    {\n        int x=a[i];rt[i]=rt[i-1];\n        for(int j=2;j*j<=x;j++)\n            while(x%j==0)   f[no[j]][i][0]++,x/=j;\n        if(x!=1)\n            if(x>msqt)  ztt(x,i);\n            else    f[no[x]][i][0]++;\n    }\n    ST();\n    scanf(\"%d\",&m);\n    LL ans=0;\n    while(m--)\n    {\n        int l,r;\n        scanf(\"%d%d\",&l,&r);\n        l=(l+ans)%n+1,r=(r+ans)%n+1;\n        if(l>r) swap(l,r);\n        ans=query(l,r,rt[r]);\n        for(int i: prm)\n            ans=ans*quickPow(i,stQuery(l,r,no[i]))%MOD;\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1627785775,
        "uid": 279800,
        "name": "ExplodingKonjac",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011CF1422F Boring Queries"
    }
]