[
    {
        "content": "\u5927 \u597d \u9898\n\n### \u9898\u610f\u6982\u8ff0\n\u4e3a\u4e86\u8ba9\u6240\u6709\u70b9\u90fd\u6709\u81f3\u5c11 k \u7684\u5ea6\u6570\uff0c\u81f3\u5c11\u8981\u9009\u62e9\u591a\u5c11\u8fb9\u3002\n\n### \u9898\u89e3\n\u5bf9\u4e8e\u8fd9\u79cd\u591a\u91cd\u7ea6\u675f\u95ee\u9898\uff0c\u5e94\u8be5\u9996\u5148\u60f3\u5230\u7f51\u7edc\u6d41\u3002\u6211\u4eec\u60f3\u4e00\u4e0b\uff0c\u81f3\u5c11 k \u7684\u5ea6\u6570\u610f\u5473\u7740\u81f3\u5c11\u6709 k \u6761\u8fb9\u8fde\u5411\u8fd9\u4e2a\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\u6700\u591a\u6709 $deg_i-k$ \u6761\u8fb9\u4e0d\u8fde\u8fd9\u4e2a\u70b9\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5efa\u56fe\uff0c\u56e0\u4e3a\u9898\u76ee\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u5206\u4e3a U \u548c V \u4e24\u4e2a\u5927\u96c6\u5408\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a U \u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u5411\u6211\u4eec\u7684\u865a\u62df\u6e90\u70b9 s \uff0cV \u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u70b9\u8fde\u5411\u6211\u4eec\u7684\u865a\u62df\u6c47\u70b9 t\uff0c\u8fb9\u6743\u90fd\u662f $deg_i-k$\u3002\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e2a\u5462\uff1f\u60f3\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u6700\u5c11\u7684\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u9009\u53d6\u7684\u8fb9\u5c3d\u91cf\u5c11\uff0c\u8fd9\u540c\u65f6\u610f\u5473\u7740\u4e0d\u9009\u7684\u8fb9\u8981\u5c3d\u91cf\u591a\uff0c\u800c $deg_i-k$ \u5c31\u662f\u6700\u591a\u4e0d\u9009\u591a\u5c11\u8fb9\uff0c\u6240\u4ee5\u5728\u8fd9\u6837\u7684\u4e00\u5f20\u56fe\u4e0a\u8dd1\u7684\u6700\u5927\u6d41\u5c31\u662f\u6700\u591a\u4e0d\u9009\u591a\u5c11\u8fb9\u3002\u8fd8\u6709\u5c31\u662f\u9898\u76ee\u7ed9\u7684\u6bcf\u6761\u8fb9\u90fd\u8fde\u4e0a\uff0c\u6743\u503c\u4e3a 1\uff0c\u56e0\u4e3a\u4e00\u6761\u8fb9\u4e0d\u80fd\u201c\u4e0d\u9009 2 \u6b21\u201d\u3002\n\n\u4e0a\u9762\u7684\u505a\u6cd5\u975e\u5e38\u7b80\u6d01\u6613\u61c2\uff0c\u4f46\u95ee\u9898\u662f\u6bcf\u6b21\u7684 k \u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e2a k \u90fd\u91cd\u65b0\u5efa\u56fe\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u80af\u5b9a\u8d85\u6807\uff0c\u56e0\u4e3a\u4e00\u6b21 Dinic \u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f $\\Theta(VE)$\uff0c\u5efa\u56fe\u6700\u574f\u60c5\u51b5\u4e0b\u7b97\u662f $\\Theta(E)$\uff0c\u5c31\u53d8\u6210\u4e86 $\\Theta(VE^2)$\uff0c\u663e\u7136\u8fc7\u4e0d\u53bb\u3002\n\n\u6211\u4eec\u63a5\u7740\u60f3\uff0c\u5982\u679c\u8bf4\uff0c\u6211\u4eec\u53ea\u5efa\u4e00\u6b21\u56fe\uff0c\u4f46\u662f\u628a k \u4ece\u5927\u5230\u5c0f\u679a\u4e3e $k\\in[mindeg,0]$\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u6b21\u8fb9\u6743\u4e3a $deg_i-k$ \u7684\u8fb9\u7684\u8fb9\u6743\u90fd\u8981\u52a0\u4e00\uff0c\u8fd9\u6837\u6bcf\u6b21\u5c31\u4e0d\u9700\u8981\u91cd\u65b0\u5efa\u56fe\u4e86\uff0c\u53ea\u9700\u8981\u589e\u52a0\u8fb9\u6743\u5373\u53ef\u3002\n\n### \u505a\u6cd5\u8bc1\u660e\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6bcf\u6b21\u90fd\u662f\u5728\u4e0a\u4e00\u6b21\u6c42\u89e3\u7b54\u6848\u65f6\u7684\u6b8b\u4f59\u7f51\u7edc\u4e0a\u9762\u589e\u5e7f\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u5462\uff1f\n\n\u7ecf\u8fc7\u4e0e\u5b66\u957f\u7684\u6fc0\u70c8\u8ba8\u8bba\uff0c\u6211\u5f97\u51fa\u4e86\u5982\u4e0b\u7406\u89e3&\u8bc1\u660e\u65b9\u6cd5\u3002\n\n\u56e0\u4e3a\u6bcf\u6b21\u8fb9\u6743\u52a0\u4e00\uff0c\u6240\u4ee5\u663e\u7136\uff0c\u8fd9\u603b\u5171 mindeg+1 \u6b21 Dinic \u7684\u8fd0\u884c\u603b\u65f6\u95f4\u8ddf\u76f4\u63a5\u628a\u6240\u6709\u8fb9\u6743\u90fd\u6309\u7167\u6700\u5c0f\u7684 k \u5373\u6700\u5927\u7684 $deg_i-k$ \u7ed9\u7684\u8fd0\u884c\u603b\u65f6\u95f4\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a\u5728\u6700\u9ad8\u8fb9\u6743\u4e00\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u589e\u5e7f\u7684\u6b21\u6570\u662f\u4e00\u5b9a\u7684\uff0c\u6240\u4ee5\u5747\u644a\u4e0b\u6765\u603b\u5171\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f $\\Theta(VE)$\uff0c\u8fd9\u662f\u5173\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bc1\u660e\u3002\n\n\u90a3\u6700\u4f18\u6027\u5462\uff1f\u6bcf\u6b21\u6211\u4eec\u90fd\u5728\u4e0a\u4e00\u6b21\u7684\u6b8b\u4f59\u7f51\u7edc\u4e0a\u9762 Dinic\uff0c\u6839\u636e Dinic \u7684\u8fd0\u884c\u65b9\u5f0f\uff0c\u5982\u679c\u8fd9\u4e00\u6b21\u6709\u6bd4\u4e0a\u4e00\u6b21\u66f4\u4f18\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u901a\u8fc7\u53cd\u5411\u8fb9\u628a\u6d41\u91cf\u52a0\u56de\u53bb\uff0c\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\u3002\n\n\u5230\u8fd9\u91cc\uff0c\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u5566\uff08\n\n### AC\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n#define pb push_back\n#define INF 0x3f3f3f3f\nusing namespace std;\nconst int N=2e5+5;\nint n1,n2,m,v[N],w[N],nxt[N],head[N],id[N],cnt=1,de[N],S,T;\nint mindegree=0x3f3f3f3f,X[N],Y[N],dep[N],vis[N],cur[N];\nvector<int>ans[N];\nint read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        x=(x<<3)+(x<<1)+(ch^48);\n        ch=getchar();\n    }\n    return x*f;\n}\nvoid add(int a,int b,int c,int d)\n{\n    v[++cnt]=b;\n    w[cnt]=c;\n    id[cnt]=d;\n    nxt[cnt]=head[a];\n    head[a]=cnt;\n}\nint bfs()\n{\n    memset(dep,0x3f,sizeof(dep));\n    for(int i=S;i<=T;i++)cur[i]=head[i];\n    queue<int>q;q.push(S);dep[S]=0;\n    while(!q.empty())\n    {\n        int c=q.front();q.pop();vis[c]=0;\n        for(int i=head[c];i;i=nxt[i])\n        {\n            if(dep[v[i]]>dep[c]+1&&w[i])\n            {\n                dep[v[i]]=dep[c]+1;\n                if(!vis[v[i]])\n                {\n                    q.push(v[i]);\n                    vis[v[i]]=1;\n                }\n            }\n        }\n    }\n    if(dep[T]==INF)return 0;\n    return 1;\n}\nint dfs(int x,int limit)\n{\n    if(x==T || !limit) return limit;\n    int flow=0,rlow;\n    for(int i=cur[x];i;i=nxt[i])\n    {\n        cur[x]=i;\n        if(dep[v[i]]==dep[x]+1 && w[i])\n        {\n            if(rlow=dfs(v[i],min(w[i],limit)))\n            {\n                flow+=rlow;\n                limit-=rlow;\n                w[i]-=rlow;\n                w[i^1]+=rlow;\n                if(!limit)break;\n            }\n        }\n    }\n    return flow;\n}\nvoid Dinic()\n{\n    int maxflow=0;\n    while(bfs()) maxflow+=dfs(S,INF);\n}\nint main()\n{\n    n1=read(),n2=read(),m=read();\n    for(int i=1;i<=m;i++) X[i]=read(),Y[i]=read(),de[X[i]]++,de[Y[i]+n1]++;\n    S=0;T=n1+n2+1;\n    for(int i=1;i<=n1+n2;i++) mindegree=min(mindegree,de[i]);\n    for(int i=1;i<=m;i++) add(X[i],Y[i]+n1,1,i),add(Y[i]+n1,X[i],0,i);\n    for(int i=1;i<=n1;i++) add(S,i,de[i]-mindegree,0),add(i,S,0,0);\n    for(int i=1;i<=n2;i++) add(i+n1,T,de[i+n1]-mindegree,0),add(T,i+n1,0,0);\n    for(int i=mindegree;i>=0;i--)\n    {\n        Dinic();\n        for(int j=1;j<=n1;j++)for(int k=head[j];k;k=nxt[k]) if(w[k]&&id[k]) ans[i].pb(id[k]);\n        for(int j=head[S];j;j=nxt[j]) w[j]++;\n        for(int j=head[T];j;j=nxt[j]) w[j^1]++;\n    }\n    for(int i=0;i<=mindegree;i++)\n    {\n        int siz=ans[i].size();\n        printf(\"%d \",siz);\n        for(int j=0;j<siz;j++) printf(\"%d \",ans[i][j]);\n        puts(\"\");\n    }\n    return 0;\n}\n```\n",
        "postTime": 1629181615,
        "uid": 156297,
        "name": "\u77ed\u77ed_",
        "ccfLevel": 6,
        "title": "CF976F\u9898\u89e3"
    },
    {
        "content": "\u4e00\u9053\u7f51\u7edc\u6d41\u7684\u597d\u9898\n\n\u5b89\u5229\u4e2a\u4eba [blog](https://www.luogu.com.cn/blog/et2006/wang-lao-liu-hao-ti-ti-xie-hui-zong)\u3002\n\n\u6211\u592a\u5f31\u4e86\uff0c\u88ab\u8fd9\u4e2a\u201c\u6700\u5c0f\u201d\u5e26\u504f\u4e86\uff0c\u770b\u5230\u201c\u6700\u5c0f\u201d\u6211\u5c31\u60f3\u5230\u6700\u5c0f\u5272\uff0c\u770b\u4e86CF\u5b98\u65b9\u9898\u89e3\u624d\u77e5\u9053\u662f\u4e00\u4e2a\u6700\u5927\u6d41\u3002\n\n\u7531\u4e8e\u666e\u901a\u7f51\u7edc\u6d41\u4e2d\uff0c\u9650\u5236\u4e00\u822c\u662f\u6bcf\u6761\u8fb9\u6d41\u91cf\u6700\u5927\u4e3a\u591a\u5c11\uff08\u9664\u4e86\u6709\u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41\uff0c\u53ef\u60dc\u6211\u4e0d\u4f1a\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u9898\u76ee\u4e2d\u7684\u201c\u6bcf\u4e2a\u70b9\u6700\u5c11\u8986\u76d6 $k$ \u6b21\u6539\u4e3a\u6bcf\u4e2a\u70b9\u6700\u591a\u8986\u76d6 $d_i-k$ \u6b21\uff0c\u5176\u4e2d $d$ \u6570\u7ec4\u4e3a\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u3002\u8fd9\u6837\u4e00\u6765\u5efa\u56fe\u5c31\u51fa\u6765\u4e86\uff0c\u5bf9\u4e8e\u4e8c\u5206\u56fe\u7684\u5de6\u534a\u90e8\u5206\uff0c\u8fde\u8fb9 $(S,i,d_i-k)$\uff0c\u5bf9\u4e8e\u4e8c\u5206\u56fe\u7684\u53f3\u534a\u90e8\u5206\uff0c\u8fde\u8fb9 $(i,T,d_i-k)$\u3002\u4e2d\u95f4\u90e8\u5206\u8fde\u9898\u76ee\u7ed9\u51fa\u7684\u8fb9\uff0c\u5bb9\u91cf\u4e3a $1$\uff0c\u7136\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u7528 $m-$ \u6700\u5927\u6d41\u5c31\u662f\u7b54\u6848\u3002\u8f93\u51fa\u65b9\u6848\u53ea\u9700\u627e\u4e2d\u95f4\u6d41\u91cf\u4e3a $0$ \u7684\u8fb9\u8f93\u51fa\u5c31\u597d\u4e86\u3002\n\n\u4f46\u662f\u4f60\u53d1\u73b0\u4f60 TLE \u4e86\u3002\u539f\u56e0\u662f\uff1a\u4f60\u5bf9\u4e8e\u6bcf\u4e2a $k$ \u90fd\u5efa\u4e86\u4e00\u6b21\u56fe\uff0c\u8dd1\u4e86\u4e00\u6b21\u6700\u5927\u6d41\uff0c\u8fd9\u6837\u76f8\u5f53\u4e8e\u8dd1\u4e86 $n$ \u6b21\u7f51\u7edc\u6d41\uff0c\u5f88\u660e\u663e CF \u6570\u636e\u4e0d\u53ef\u80fd\u8fd9\u4e48\u5f31\u8ba9\u4f60\u8dd1\u8fc7\u53bb\u7684\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u53ea\u5efa\u4e00\u6b21\u56fe\uff0c\u7136\u540e\u5728\u6b8b\u4f59\u7f51\u7edc\u4e0a\u8dd1\u6700\u5927\u6d41\u5462\uff1f\n\n\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5012\u7740\u4ece $minDegree$ \u5f00\u59cb\uff0c\u6bcf\u4e00\u6b21\u5728\u4e0a\u4e00\u6b21\u7684\u6b8b\u4f59\u7f51\u7edc\u4e0a\u8dd1\u6700\u5927\u6d41\uff0c\u4e0d\u96be\u53d1\u73b0 $k$ \u4ece $i$ \u53d8\u4e3a $i-1$ \u7684\u65f6\u5019\u4e0e $S$ \u548c $T$ \u76f8\u8fde\u7684\u8fb9\u7684\u5bb9\u91cf\u90fd\u6269\u5927 $1$\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u9700\u5efa\u4e00\u6b21\u56fe\uff0c\u8dd1 $n$ \u6b21\u7f51\u7edc\u6d41\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u644a\u4e0b\u6765\u662f $O(n)$ \u7684\uff0c\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n```cpp\n/*\n\u6570\u636e\u4e0d\u6e05\u7a7a\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u591a\u6d4b\u4e0d\u8bfb\u5b8c\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8fb9\u754c\u4e0d\u7279\u5224\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8d2a\u5fc3\u4e0d\u8bc1\u660e\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\nD P \u987a\u5e8f\u9519\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u5927\u5c0f\u5c11\u7b49\u53f7\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u53d8\u91cf\u4e0d\u7edf\u4e00\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8d8a\u754c\u4e0d\u5224\u65ad\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8c03\u8bd5\u4e0d\u6ce8\u91ca\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u6ea2\u51fa\u4e0d l l\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi\t\t\tfirst\n#define se\t\t\tsecond\n#define fz(i,a,b)\tfor(int i=a;i<=b;i++)\n#define fd(i,a,b)\tfor(int i=a;i>=b;i--)\n#define foreach(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define put(x)\t\tputchar(x)\n#define eoln        put('\\n')\n#define space\t\tput(' ')\n#define y1\t\t\ty_chenxiaoyan_1\n#define y0\t\t\ty_chenxiaoyan_0\ninline int read(){\n\tint x=0,neg=1;char c=getchar();\n\twhile(!isdigit(c)){\n\t\tif(c=='-')\tneg=-1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c))\tx=x*10+c-'0',c=getchar();\n\treturn x*neg;\n}\ninline void print(int x){\n\tif(x<0){\n\t\tputchar('-');\n\t\tprint(abs(x));\n\t\treturn;\n\t}\n\tif(x<=9)\tputchar(x+'0');\n\telse{\n\t\tprint(x/10);\n\t\tputchar(x%10+'0');\n\t}\n}\ninline int qpow(int x,int e,int _MOD){\n\tint ans=1;\n\twhile(e){\n\t\tif(e&1)\tans=ans*x%_MOD;\n\t\tx=x*x%_MOD;\n\t\te>>=1;\n\t}\n\treturn ans;\n}\nint n1=read(),n2=read(),m=read();\nint u[2005],v[2005];\nint head[5005];\nstruct edge{\n\tint to,nxt,cap;\n} e[3000005];\nint ecnt=1;\ninline void addedge(int u,int v,int f){\n\te[++ecnt].to=v;e[ecnt].cap=f;e[ecnt].nxt=head[u];head[u]=ecnt;\n}\nint dep[5005];\ninline bool bfs(int s,int t){\n\tqueue<int> q;\n\tmemset(dep,-1,sizeof(dep));\n\tq.push(s);dep[s]=0;\n\twhile(!q.empty()){\n\t\tint cur=q.front();q.pop();\n\t\tfor(int i=head[cur];i;i=e[i].nxt){\n\t\t\tint to=e[i].to;\n\t\t\tif(dep[to]==-1&&e[i].cap){\n\t\t\t\tdep[to]=dep[cur]+1;\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\tif(dep[t]!=-1)\treturn 1;\n\treturn 0;\n}\ninline int dfs(int x,int t,int f){\n\tif(x==t)\treturn f;\n\tint ret=0;\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tint y=e[i].to;\n\t\tif(dep[y]==dep[x]+1&&e[i].cap){\n\t\t\tint w=dfs(y,t,min(f-ret,e[i].cap));\n\t\t\te[i].cap-=w;\n\t\t\te[i^1].cap+=w;\n\t\t\tret+=w;\n\t\t\tif(ret==f)\treturn f;\n\t\t}\n\t}\n\tif(ret==0)\tdep[x]=-1;\n\treturn ret;\n}\ninline int Dinic(int s,int t){\n\tint tot=0;\n\twhile(bfs(s,t))\ttot+=dfs(s,t,0x3f3f3f3f);\n\treturn tot;\n}\nint id[2005],deg[4005];\nvector<int> ans[2005];\nsigned main(){\n\tfz(i,1,m){\n\t\tu[i]=read();v[i]=read();v[i]+=n1;\n\t\tdeg[u[i]]++;deg[v[i]]++;\n\t}\n\tint k=0x3f3f3f3f;\n\tfz(i,1,n1+n2)\tk=min(k,deg[i]);\n\tfz(j,1,n1){\n\t\taddedge(0,j,deg[j]-k);\n\t\taddedge(j,0,0);\n\t}\n\tfz(j,n1+1,n1+n2){\n\t\taddedge(j,5000,deg[j]-k);\n\t\taddedge(5000,j,0);\n\t}\n\tfz(j,1,m){\n\t\taddedge(u[j],v[j],1);\n\t\taddedge(v[j],u[j],0);\n\t\tid[j]=ecnt;\n\t}\n\tfd(i,k,0){\n\t\tDinic(0,5000);\n\t\tfz(j,1,m){\n\t\t\tif(e[id[j]].cap==0){\n\t\t\t\tans[i].push_back(j);\n\t\t\t}\n\t\t}\n\t\tfor(int i=head[0];i;i=e[i].nxt)\te[i].cap++;\n\t\tfor(int i=head[5000];i;i=e[i].nxt)\te[i^1].cap++;\n\t}\n\tfz(i,0,k){\n\t\tcout<<ans[i].size()<<\" \";\n\t\tforeach(it,ans[i])\tcout<<*it<<\" \";\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1581741553,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF976F \u3010Minimal k-covering\u3011"
    }
]