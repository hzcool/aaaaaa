[
    {
        "content": "\u79d1\u6280\u666e\u53ca\u9898\u3002\n\n\u5982\u679c\u4f60\u4f1a\u540e\u7f00\u6570\u7ec4\u90a3\u8fd9\u9898\u5c31\u662f\u4e2a\u9664\u4e86\u5b9e\u73b0\u4e4b\u5916\u6beb\u65e0\u96be\u5ea6\u7684\u7801\u519c\u9898\u3002\u4f60\u53ea\u9700\u8981\u4e8c\u5206\u5b9a\u4f4d\uff0c\u652f\u6301\u6bd4\u8f83\u4e00\u6761\u94fe\u548c\u6a21\u677f\u4e32\u4e0a\u7684\u67d0\u4e2a\u540e\u7f00\u7684\u5b57\u5178\u5e8f\u6bd4\u8f83\uff0c\u6811\u5256\u5373\u53ef\u3002\n\n\u95ee\u9898\u662f\u4f60\u4e5f\u53ef\u80fd\u8ddf\u6211\u4e00\u6837\uff0c\u662f\u4e00\u4e2a\u53ea\u4f1a\u786c\u4e0a SAM \u7684\u61a8\u61a8\u3002\u8fd9\u7bc7\u9898\u89e3\u5c31\u662f\u8bb2\u600e\u4e48\u628a\u8fd9\u9053\u9898\u5bf9\u4e8e\u6211\u8fd9\u79cd\u61a8\u61a8\u4e5f\u53d8\u6210\u6beb\u65e0\u601d\u7ef4\u96be\u5ea6\u7684\u677f\u5b50\u9898\u3002\n\n\u9996\u5148\u5efa\u51fa\u5e7f\u4e49 SAM\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u628a\u8fd9\u4e2a\u94fe\u5f62\u6210\u7684\u5b57\u7b26\u4e32\u5728 SAM \u4e0a\u5b9a\u4f4d\u3002\u540e\u7f00\u6811\u7684\u6811\u5f62\u7ed3\u6784\u5728\u8fd9\u91cc\u6ca1\u6709\u4ec0\u4e48\u4f18\u79c0\u7684\u6027\u8d28\uff0c\u8003\u8651\u5229\u7528\u8f6c\u79fb\u8fb9\u3002\n\n\u4ecb\u7ecd\u4e00\u79cd\u79d1\u6280\uff1a**DAG \u5256\u5206**\u3002SAM \u7684\u8f6c\u79fb\u8fb9\u6709\u4e00\u4e2a\u4f18\u79c0\u7684\u6027\u8d28\u662f\uff0c\u6bcf\u6761\u8def\u5f84\u5bf9\u5e94\u4e00\u4e2a\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\uff0c\u6240\u4ee5\u8def\u5f84\u4e2a\u6570\u662f\u5e73\u65b9\u7ea7\u522b\u7684\u3002\u6b64\u65f6\u6211\u4eec\u5c06\u8fd9\u6837\u7684\u8fb9 $(u,v)$ \u79f0\u4e3a\u91cd\u8fb9\uff1a$v$ \u51fa\u53d1\u7684\u8def\u5f84\u6570\u5927\u4e8e $u$ \u7684\u4e00\u534a\uff0c\u5230\u8fbe $u$ \u7684\u8def\u5f84\u6570\u5927\u4e8e $v$ \u7684\u4e00\u534a\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u4f1a\u53d8\u6210\u82e5\u5e72\u6761\u91cd\u94fe\uff0c\u6bcf\u8d70\u4e00\u6761\u8f7b\u8fb9\u90fd\u4f1a\u4f7f\u5f53\u524d\u70b9\u51fa\u53d1\u7684\u8def\u5f84\u51cf\u534a\uff0c\u6240\u4ee5\u6bcf\u6761\u8def\u5f84\u4e0a\u7684\u8f7b\u8fb9\u6570\u91cf\u90fd\u662f $O(\\log n^2)=O(\\log n)$ \u7ea7\u522b\u7684\u3002\n\n\u8003\u8651\u4e00\u4e2a\u4ece\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u5728 SAM \u4e0a\u5339\u914d\u7684\u8fc7\u7a0b\u3002\u6211\u9700\u8981\u77e5\u9053\u80fd\u6cbf\u7740\u91cd\u94fe\u8d70\u591a\u957f\uff0c\u53d1\u73b0\u53ea\u9700\u8981\u6c42\u5f97\u91cd\u94fe\u5e95\u7aef\u5bf9\u5e94\u7684\u5b50\u4e32\u4e0e\u5339\u914d\u7684\u6587\u672c\u4e32\u7684 lcp\u3002\u7136\u540e\u6211\u53ef\u4ee5\u76f4\u63a5\u786e\u5b9a\u8981\u8d70\u54ea\u4e2a\u8f7b\u8fb9\u3002\n\n\u628a\u8fd9\u4e2a\u6811\u4e5f\u6811\u5256\uff0c\u4e00\u6761\u6761\u91cd\u94fe\u5730\u5339\u914d\uff0c\u5219\u6211\u4eec\u53ea\u9700\u8981\u628a\u6bcf\u4e2a\u91cd\u94fe\u548c\u91cd\u94fe\u7684\u53cd\u4e32\u548c\u6240\u6709\u6a21\u677f\u4e32\u7684\u53cd\u4e32\u518d\u4e22\u5230\u4e00\u4e2a\u5e7f\u4e49 SAM \u91cc\u53bb\u6c42\u4e2a lca \u5c31\u884c\u4e86\u3002\n\nDAG \u5256\u5206\u662f\u4e00\u5171\u8d70 log \u4e2a\u8f7b\u8fb9\uff0c\u6811\u5256\u6700\u591a\u5e26\u6765 log \u7684\u989d\u5916\u8d21\u732e\uff0c\u800c\u4e24\u4e2a\u8d21\u732e\u662f\u52a0\u800c\u4e0d\u662f\u4e58\u5230\u4e00\u8d77\u7684\uff0c\u6240\u4ee5\u5339\u914d\u4e00\u6b21\u8fd8\u662f\u6700\u591a\u6c42 $O(\\log n)$ \u6b21 lcp\u3002\u5b9a\u4f4d\u4e4b\u540e\u81ea\u7136\u662f\u4e8c\u7ef4\u6570\u70b9\u3002\n\n\u6839\u636e\u4f60\u4f7f\u7528\u7684 SAM \u6784\u9020\u65b9\u6cd5\u4ee5\u53ca\u6c42 lcp \u7684\u65b9\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4ece $O(n(\\log^2n+|\\Sigma|))$ \u5230 $O(n\\log n)$ \u4e0d\u7b49\uff08\u8bbe $n$\uff0c$m$\uff0c$q$ \u540c\u9636\uff09\uff0c\u7a7a\u95f4\u4ece $O(n)$ \u5230 $O(n(\\log n+|\\Sigma|))$ \u4e0d\u7b49\u3002\n\n\u6211\u4f7f\u7528\u6811\u5256\u6c42 lcp\uff0c\u6734\u7d20\u7684\u5199\u6cd5\u6784\u9020 SAM\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u524d\u8005\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n|\\Sigma|)$\uff0c\u76ee\u524d\u5728 cf \u4e0a\u6392\u6700\u4f18\u89e3\u7b2c\u4e00\u3002\u4ee3\u7801 6.88k\uff0c333 \u884c\uff0c\u653e\u4e0a\u6765\u6bd4\u8f83\u7cbe\u795e\u6c61\u67d3\uff0c\u4e22\u4e2a[\u8bc4\u6d4b\u8bb0\u5f55](https://codeforces.ml/contest/1608/submission/139337232)\u597d\u4e86\u3002\n\n\u5c5e\u4e8e\u662f\u96be\u5199\u597d\u8c03\uff0c\u6211\u5199\u4e86\u4e00\u5929\u624d\u8c03\u4e86\u53ef\u80fd\u4e00\u4e2a\u5c0f\u65f6\u5de6\u53f3\u5c31\u8fc7\u4e86\u3002\n\nbonus\uff1a\u5728\u548c Zeven \u5b66\u957f\u7684\u4ea4\u6d41\u4e2d\u5b66\u957f\u6307\u51fa\uff0c\u538b\u7f29\u540e\u7f00\u81ea\u52a8\u673a\u53ef\u80fd\u53ef\u4ee5\u76f4\u63a5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6211\u662f\u4ece ULR1 \u7684\u9898\u89e3\u5b66\u5230\u7684 DAG \u5256\u5206\u8fd9\u4e2a\u6280\u5de7\uff0c\u90a3\u91cc\u4e5f\u8bf4\u4e86\u4ece\u538b\u7f29 SAM \u7684\u89d2\u5ea6\u6765\u770b DAG \u5256\u5206\u53ea\u662f\u5bf9\u53cd\u4e32\u540e\u7f00\u6811\u8fdb\u884c\u4e86\u6811\u5256\u3002\n\n\u4f46\u662f\u6211\u5e76\u4e0d\u4f1a\u538b\u7f29 SAM\u2026\u2026\u6709\u6ca1\u6709\u8001\u54e5\u6559\u6559\u6211\u554a\uff08\n\n\u611f\u8c22 Zeven \u5b66\u957f\u7684\u6307\u5bfc\uff01",
        "postTime": 1639529593,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1608G \u3010Alphabetic Tree\u3011"
    },
    {
        "content": "Upd on 2022.9.2\uff1a\u5c06\u6811\u5256\u505a\u6cd5\u6362\u6210\u500d\u589e\u3002\n\n> I. [CF1608G Alphabetic Tree](https://www.luogu.com.cn/problem/CF1608G) *3500\n\n\u6bd2\u7624\u7ec6\u8282\u7801\u519c\u9898\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee $Q(u, v, l, r)$\uff0c\u7531\u4e8e\u4fe1\u606f\u5177\u6709\u53ef\u51cf\u6027\uff0c\u6240\u4ee5\u8f6c\u5316\u4e3a $Q(u, v, 1, r) - Q(u, v, 1, l - 1)$\uff0c\u8bb0\u4e3a $Q(u, v, r) - Q(u, v, l - 1)$\u3002\u76f8\u5f53\u4e8e\u505a\u4e00\u4e2a\u626b\u63cf\u7ebf\u3002\n\n\u5bf9\u4e8e\u540e\u7f00\u6570\u7ec4\uff0c\u5bf9\u7279\u5b9a $t$ \u6c42\u89e3 $t$ \u5728\u6587\u672c\u4e32 $s$ \u4e2d\u51fa\u73b0\u6b21\u6570\u7684\u65b9\u6cd5\u662f\u4e8c\u5206\u627e\u5230\u7b2c\u4e00\u4e2a $\\geq t$ \u7684\u540e\u7f00\u6392\u540d $L$\uff0c\u4ee5\u53ca\u6700\u540e\u4e00\u4e2a $\\leq t$ \u7684\u540e\u7f00\u6392\u540d $R$\u3002\u4efb\u4f55\u6392\u540d\u5728 $[L, R]$ \u4e4b\u95f4\u7684\u540e\u7f00\u5747\u4ee5 $t$ \u4e3a\u524d\u7f00\uff0c\u4ee3\u8868 $t$ \u5728 $s$ \u4e2d\u7684\u4e00\u6b21\u51fa\u73b0\u3002\n\n\u5bf9\u4e8e\u672c\u9898\u4e5f\u4e00\u6837\u3002\u6211\u4eec\u5148\u5bf9 $s_i$ \u8fdb\u884c\u540e\u7f00\u6392\u5e8f\uff0c\u8bbe\u5f53\u524d\u626b\u63cf\u7ebf\u5230\u4f4d\u7f6e $p$\uff0c\u5219\u7ba1\u7528\u7684\u53ea\u6709 $s_1\\sim s_p$ \u7684\u540e\u7f00\u3002\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee $Q(u, v, p)$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9 $u\\to v$ \u5f62\u6210\u7684\u5b57\u7b26\u4e32 $t(u\\to v)$ \u8fdb\u884c\u4e0a\u8ff0\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u5177\u4f53\u5730\uff0c\u4e8c\u5206\u6392\u540d $m$\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6bd4\u8f83 $t(u\\to v)$ \u548c\u6392\u540d\u4e3a $m$ \u7684\u540e\u7f00 $s$ \u7684\u5927\u5c0f\u5173\u7cfb\u3002\u4e00\u822c\u7684\u6bd4\u8f83\u65b9\u6cd5\u662f\u4e8c\u5206 LCP \u7136\u540e\u5224\u4e0b\u4e00\u4e2a\u5b57\u7b26\u7684\u5927\u5c0f\u5173\u7cfb\u3002\u5bf9\u4e8e\u672c\u9898\uff0c\u5982\u679c\u518d\u4e8c\u5206 LCP $len$\uff0c\u90a3\u4e48\u9700\u8981\u6c42\u51fa $s[1, len]$ \u7684\u54c8\u5e0c\u503c\uff0c\u4ee5\u53ca $u\\to v$ \u957f\u5ea6\u4e3a $len$ \u7684\u524d\u7f00\u7684\u54c8\u5e0c\u503c\uff0c\u540e\u8005\u9700\u8981\u6811\u4e0a\u500d\u589e\u6c42\u89e3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(q\\log ^ 3n)$\uff0c\u4e0d\u53ef\u63a5\u53d7\u3002\u4f46\u6211\u4eec\u6ce8\u610f\u5230\u500d\u589e\u7684\u8fc7\u7a0b\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u79cd\u4e8c\u5206\uff0c\u56e0\u6b64\u5c06\u500d\u589e\u548c\u4e8c\u5206\u7ed3\u5408\u8d77\u6765\u5373\u53ef\u505a\u5230 $\\mathcal{O}(q\\log ^ 2 n)$\u3002\n\n\u6c42\u5f97 $t(u\\to v)$ \u5bf9\u5e94\u7684\u6392\u540d\u533a\u95f4 $[L, R]$ \u540e\uff0c\u53ea\u9700\u6c42\u51fa\u5f53\u4e2d\u6709\u591a\u5c11\u4e2a\u7ba1\u7528\u7684\u540e\u7f00\uff0c\u626b\u63cf\u7ebf\u65f6 BIT \u7ef4\u62a4\u5373\u53ef\u3002[\u4ee3\u7801](https://codeforces.com/contest/1608/submission/170548334)\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u6ce8\u610f\u70b9\uff1a\n\n- \u54c8\u5e0c\u503c\u7684\u6bcf\u4e00\u4f4d\u4e0d\u80fd\u76f4\u63a5\u51cf\u53bb `'a'`\uff0c\u5426\u5219 `aab` \u548c `ab` \u4f1a\u88ab\u89c6\u4f5c\u76f8\u7b49\u3002\n- \u54c8\u5e0c base \u5e94\u5927\u4e8e\u591a\u4e32 SA \u63d2\u5165\u5206\u9694\u7b26\u7684\u6700\u5927\u6570\u503c\u3002\n- \u4e8c\u5206 $L$ \u7684\u4e0b\u754c\u4e3a $1$\uff0c\u4e0a\u754c\u4e3a SA \u603b\u957f\u52a0 $1$\uff0c$R$ \u7684\u4e0a\u4e0b\u754c\u8981\u51cf\u53bb $1$\u3002\n- \u6ce8\u610f\u5206\u6e05\u6392\u540d\u548c\u4e0b\u6807\u3002\n\n\u5982\u679c\u7528 SAM \u5199\uff0c\u5219\u9700\u8981\u5feb\u901f\u5b9a\u4f4d\u4e00\u6761\u94fe\u5728 DAG \u4e0a\u7684\u4f4d\u7f6e\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7 DAG \u94fe\u5256\u5206\u5b9e\u73b0\uff0c\u505a\u5230 $\\mathcal{O}(q\\log n)$\uff0c\u5177\u4f53\u53ef\u89c1 FZzzz \u7684\u535a\u5ba2\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define TIME 1e3 * clock() / CLOCKS_PER_SEC\nusing ll = long long;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\ninline int read() {\n  int x = 0;\n  char s = getchar();\n  while(!isdigit(s)) s = getchar();\n  while(isdigit(s)) x = x * 10 + s - '0', s = getchar();\n  return x;\n}\ninline void print(int x) {\n  if(x < 0) return putchar('-'), print(-x);\n  if(x >= 10) print(x / 10);\n  putchar(x % 10 + '0');\n}\nbool Mbe;\nconstexpr int K = 18;\nconstexpr int N = 2e5 + 5;\nconstexpr int base = 1e9 + 7; // base should be larger than N\nconstexpr int mod = 1004535809;\ninline int ksm(int a, int b) {\n  int s = 1;\n  while(b) {\n    if(b & 1) s = 1ll * s * a % mod;\n    a = 1ll * a * a % mod, b >>= 1;\n  }\n  return s;\n}\nint n, m, q, lg;\nvector<pii> e[N];\nint dn, dep[N], fc[N], sz[N], dfn[N];\nbool isanc(int u, int v) {return dfn[u] <= dfn[v] && dfn[v] < dfn[u] + sz[u];}\nint pw[N], ipw[N];\nint up[N], down[N], fa[K][N];\nint thsh(int x, int y) {\n  if(dep[x] > dep[y]) return 1ll * (up[x] + mod - up[y]) * ipw[dep[y] - 1] % mod;\n  return (down[y] - 1ll * down[x] * pw[dep[y] - dep[x]] % mod + mod) % mod;\n}\nvoid dfs(int id, int ff) {\n  sz[id] = 1;\n  dfn[id] = ++dn;\n  fa[0][id] = ff;\n  dep[id] = dep[ff] + 1;\n  for(pii _ : e[id]) {\n    int it = _.first, c = _.second;\n    if(it == ff) continue;\n    fc[it] = c;\n    down[it] = (1ll * down[id] * base + c) % mod;\n    up[it] = (up[id] + 1ll * c * pw[dep[id] - 1]) % mod; \n    dfs(it, id);\n    sz[id] += sz[it];\n  }\n}\nvector<int> pos[N];\nint len, s[N], pre[N];\nint shsh(int l, int r) {return (pre[r] - 1ll * pre[l - 1] * pw[r - l + 1] % mod + mod) % mod;}\nint sa[N], rk[N], ork[N], buc[N], id[N];\nbool cmp(int a, int b, int w) {return ork[a] == ork[b] && ork[a + w] == ork[b + w];}\nvoid build(int n, int *s) {\n  int m = ::m + 30, p = 0;\n  for(int i = 1; i <= n; i++) buc[rk[i] = s[i]]++;\n  for(int i = 1; i <= m; i++) buc[i] += buc[i - 1];\n  for(int i = n; i; i--) sa[buc[rk[i]]--] = i;\n  for(int w = 1; ; w <<= 1, m = p, p = 0) {\n    for(int i = n - w + 1; i <= n; i++) id[++p] = i;\n    for(int i = 1; i <= n; i++) if(sa[i] > w) id[++p] = sa[i] - w;\n    memset(buc, 0, sizeof(buc));\n    for(int i = 1; i <= n; i++) buc[rk[i]]++;\n    for(int i = 1; i <= m; i++) buc[i] += buc[i - 1];\n    for(int i = n; i; i--) sa[buc[rk[id[i]]]--] = id[i];\n    memcpy(ork, rk, sizeof(rk)), p = 0;\n    for(int i = 1; i <= n; i++) rk[sa[i]] = cmp(sa[i - 1], sa[i], w) ? p : ++p;\n    if(p == n) break;\n  }\n}\nll ans[N];\nint u[N], v[N], lb[N], rb[N];\nvector<int> qu[N];\nstruct BIT {\n  int c[N];\n  void add(int x) {while(x <= len) c[x]++, x += x & -x;}\n  int query(int x) {int s = 0; while(x) s += c[x], x -= x & -x; return s;}\n  int query(int l, int r) {return query(r) - query(l - 1);}\n} tr;\npii lcp(int x, int y, int pos) {\n  auto check = [&](int a) {\n    int L = abs(dep[x] - dep[a]);\n    if(pos + L - 1 > len) return false;\n    return thsh(x, a) == shsh(pos, pos + L - 1);\n  };\n  if(!isanc(x, y)) {\n    int a = x;\n    for(int i = lg; ~i; i--)\n      if(!isanc(fa[i][a], y) && check(fa[i][a]))\n        a = fa[i][a];\n    if(check(fa[0][a])) a = fa[0][a];\n    pos += dep[x] - dep[a]; // add this line\n    if(!isanc(a, y)) return make_pair(fc[a], s[pos]);\n    x = a;\n  }\n  if(check(y)) return make_pair(-1, s[pos + dep[y] - dep[x]]);\n  for(int i = lg; ~i; i--)\n    if(dep[fa[i][y]] > dep[x] && !check(fa[i][y]))\n      y = fa[i][y];\n  return make_pair(fc[y], s[pos + dep[y] - dep[x] - 1]);\n}\nbool Med;\nint main() {\n  fprintf(stderr, \"%.3lf MB\\n\", (&Mbe - &Med) / 1048576.0);\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"1.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"1.out\", \"w\", stdout);\n  #endif\n  ios::sync_with_stdio(0);\n  cin >> n >> m >> q;\n  for(int i = pw[0] = 1; i <= n; i++) pw[i] = 1ll * pw[i - 1] * base % mod;\n  ipw[0] = 1, ipw[1] = ksm(base, mod - 2);\n  for(int i = 2; i <= n; i++) ipw[i] = 1ll * ipw[i - 1] * ipw[1] % mod;\n  for(int i = 1; i < n; i++) {\n    int u, v; char c;\n    cin >> u >> v >> c;\n    e[u].push_back({v, c - 'a' + 1});\n    e[v].push_back({u, c - 'a' + 1});\n  }\n  dfs(1, 1), lg = 31 - __builtin_clz(n);\n  for(int i = 1; i <= lg; i++)\n    for(int j = 1; j <= n; j++)\n      fa[i][j] = fa[i - 1][fa[i - 1][j]];\n  for(int i = 1; i <= m; i++) {\n    string str;\n    cin >> str;\n    for(char it : str) s[++len] = it - 'a' + 1, pos[i].push_back(len);\n    s[++len] = i + 30;\n  }\n  s[len + 1] = -1;\n  for(int i = 1; i <= len; i++) pre[i] = (1ll * pre[i - 1] * base + s[i]) % mod;\n  build(len, s);\n  for(int i = 1; i <= q; i++) {\n    int l, r;\n    cin >> u[i] >> v[i] >> l >> r;\n    if(l - 1) qu[l - 1].push_back(-i);\n    qu[r].push_back(i);\n  }\n  for(int _ = 1; _ <= m; _++) {\n    for(int it : pos[_]) tr.add(rk[it]);\n    for(int it : qu[_]) {\n      int id = abs(it), coef = id / it;\n      if(lb[id]) {\n        ans[id] += tr.query(lb[id], rb[id]) * coef;\n        continue;\n      }\n      int l = 1, r = len + 1;\n      int ql = -1, qr = -1;\n      while(l < r) {\n        int m = l + r >> 1;\n        pii info = lcp(u[id], v[id], sa[m]);\n        if(info.first == -1) r = m;\n        else if(info.first > info.second) l = m + 1;\n        else r = m;\n      }\n      ql = l;\n      l = 0, r = len;\n      while(l < r) {\n        int m = l + r + 2 >> 1;\n        pii info = lcp(u[id], v[id], sa[m]);\n        if(info.first == -1) l = m;\n        else if(info.first < info.second) r = m - 1;\n        else l = m;\n      }\n      qr = r;\n      lb[id] = ql, rb[id] = qr;\n      ans[id] += tr.query(ql, qr) * coef;\n    }\n  }\n  for(int i = 1; i <= q; i++) cout << ans[i] << \"\\n\";\n  cerr << TIME << \" ms\\n\";\n  return 0;\n}\n/*\n2022/9/2\nauthor: Alex_Wei\nstart coding at 11:17\nfinish debugging at 14:11\n*/\n```",
        "postTime": 1651557563,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1608G Alphabetic Tree"
    },
    {
        "content": "\u4e00\u4e2a\u975e\u5e38\u81ea\u7136\u7684\u60f3\u6cd5\u5c31\u662f\u628a\u6240\u6709\u7684\u4e32\u548c\u8be2\u95ee\u7684\u94fe\u653e\u5230\u4e00\u4e2a SA \u91cc\u9762\uff0c\u7136\u540e\u7528\u54c8\u5e0c\u8fdb\u884c\u6bd4\u8f83\u6392\u5e8f\u5f97\u51fa SA\u3002\n\n\u4e0d\u8fc7\u66f4\u597d\u7684\u505a\u6cd5\u662f\u6bcf\u6b21\u5c06\u94fe\u5728 SA \u91cc\u9762\u4e8c\u5206\u5b9a\u4f4d\u3002\n\n\u5173\u4e8e\u6bd4\u8f83\u4e00\u6761\u94fe\u548c\u4e00\u4e2a\u540e\u7f00\u7684\u5b57\u5178\u5e8f\u4ee5\u53ca\u6c42 LCP\uff1a\n\n\u7ef4\u62a4\u5b57\u7b26\u4e32\u7684 hash \u548c\u6811\u4e0a\u7531\u4e0b\u81ea\u4e0a\u548c\u7531\u4e0a\u81ea\u4e0b\u7684 hash \u524d\u7f00\u548c\u3002\u7136\u540e\u5206\u6210\u4e24\u6bb5\u5230 lca \u7684\u6bb5\u6811\u4e0a\u500d\u589e\u8ba1\u7b97\u3002\u7ec6\u8282\u7e41\u591a\u3002\n\n\u5b9a\u4f4d\u540e\u8fdb\u884c\u4e8c\u5206\u3002\u627e\u5230\u533a\u95f4\u6ee1\u8db3\u5176\u4e2d\u6240\u6709\u7684\u540e\u7f00\u5747\u5305\u542b\u94fe\u3002\u4e8c\u7ef4\u6570\u70b9\u5373\u53ef\u3002\n\n\u603b\u7ed3\uff1a\n\nSA \u5728\u4e00\u4e9b\u5947\u602a\u7684\u9898\u4f1a\u6709\u5f02\u5e38\u7684\u8868\u73b0\u3002\u8fd9\u91cc\u7684 hash \u5b9e\u9645\u4e0a\u662f\u5728\u540e\u7f00\u7ec4\u6210\u7684 trie \u4e0a\u8fdb\u884c\u5feb\u901f\u5339\u914d\u3002\n\n\u4e0d\u8fc7\u76f8\u5f53\u96be\u5199\uff0c\u6216\u8bb8\u53ef\u4ee5\u5339\u914d *3500 \u7684\u96be\u5ea6\u3002\n\n[\u8bc4\u6d4b\u8bb0\u5f55](https://codeforces.com/contest/1608/submission/146836050)",
        "postTime": 1645192483,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1608G Alphabetic Tree"
    }
]