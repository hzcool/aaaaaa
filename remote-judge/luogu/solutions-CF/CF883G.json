[
    {
        "content": "\u9898\u89e3\u8fde\u66f4\u8ba1\u5212\u7b2c6\u7bc7\n\n## \u3010\u601d\u8def\u3011\n\u8fd9\u9053\u9898\u8fd8\u662f\u6bd4\u8f83\u6c34\u7684\uff0c\u6ca1\u4ec0\u4e48\u601d\u60f3\u96be\u5ea6\uff08\u5c31\u7801\u91cf\u5927\u4e00\u70b9\uff09\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u5148\u7528\u6240\u6709\u6709\u5411\u8fb9\u63a8\u51fa**\u4e00\u5b9a\u80fd\u5230\u8fbe\u7684\u70b9**\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u70b9\u80af\u5b9a\u90fd\u662f**\u53ea\u80fd\u901a\u8fc7\u65e0\u5411\u8fb9\u5230\u8fbe\u7684\u70b9**\u3002\n\n\u4e8e\u662f\u5f88\u7b80\u5355\uff0c\u8981\u6700\u5927\u5316\u80fd\u5230\u8fbe\u7684\u70b9\u6570\uff0c\u4ee5\u6240\u6709**\u4e00\u5b9a\u80fd\u5230\u8fbe\u7684\u70b9**\uff0c\u4e3a\u8d77\u70b9\uff0c\u7ecf\u8fc7\u6240\u6709**\u80fd\u6269\u5c55\u5230\u5176\u4ed6\u70b9**\u7684\u65e0\u5411\u8fb9\uff0c\u8fbe\u5230\u6700\u5927\u5316\u7684\u6548\u679c\u3002\n\n\u53cd\u8fc7\u6765\u8bf4\uff0c\u8981\u6700\u5c0f\u5316\u8fd9\u4e2a\u70b9\u6570\uff0c\u5c31\u628a\u4e0a\u9762\u7684\u6240\u6709\u65e0\u5411\u8fb9\u6539\u6210\u4e0d\u7ecf\u8fc7\uff0c\u4e5f\u5c31\u662f\u5efa\u53cd\u8fb9\uff08\u5f53\u7136\u5e76\u4e0d\u662f\u76f4\u63a5\u5168\u90e8\u53d6\u53cd\uff09\uff0c\u662f\u4e3a\u4e86\u4f7f\u5f97**\u4e00\u5b9a\u80fd\u5230\u8fbe\u7684\u70b9**\u4e00\u5b9a\u4e0d\u80fd\u5230\u8fbe**\u53ea\u80fd\u901a\u8fc7\u65e0\u5411\u8fb9\u5230\u8fbe\u7684\u70b9**\u3002\n\n\u7136\u540e\u5c31\u597d\u4e86\u3002\n\n\u8bf4\u7684\u5f62\u8c61\u4e00\u70b9\uff0c\u5c31\u662f\u8981\u6700\u5927\u5316\u80fd\u5230\u8fbe\u7684\u70b9\u6570\uff0c\u5c31\u662f\u201c\u5f00\u95e8\u201d\uff0c\u8ba9**\u4e00\u5b9a\u80fd\u5230\u8fbe\u7684\u70b9**\u6709\u51fa\u8def\uff0c\u800c\u6700\u5c0f\u5316\u5c31\u662f\u201c\u5173\u95e8\u201d\uff0c\u628a\u51fa\u8def\u5c01\u6b7b\u3002\n\n\u4e8e\u662f\uff0c\u8dd1\u4e24\u8fb9$bfs$\uff0c\u6bcf\u4e00\u6b21\u7279\u5224\u4e00\u4e0b\uff0c\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\n## \u3010\u4ee3\u7801\u3011\n\u7801\u91cf\u6bd4\u8f83\u5927\uff0c\u4f46\u9274\u4e8e\u4e24\u6b21$bfs$\u672c\u8d28\u57fa\u672c\u76f8\u540c\uff0c\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5$ctrl+C+ctrl+V$\uff0c\u7136\u540e\u7a0d\u4e8b\u6539\u52a8\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename T>\ninline void read(T &x)\n{\n    char c;\n    x = 0;\n    int fu = 1;\n    c = getchar();\n    while(c > 57 || c < 48)\n    {\n        if(c == 45)\n        {\n            fu = -1;\n        }\n        c = getchar();\n    }\n    while(c <= 57 && c >= 48)\n    {\n        x = (x << 3) + (x << 1) + c - 48;\n        c = getchar();\n    }\n    x *= fu;\n}\ntemplate <typename T>\ninline void fprint(T x)\n{\n    if(x < 0)\n    {\n        putchar(45);\n        x = -x;\n    }\n    if(x > 9)\n    {\n        fprint(x / 10);\n    }\n    putchar(x % 10 + 48);\n}\n\nint n, m, s, tot;\nint ans[300010], cnt, vis[300010];\n\nstruct EDGE{\n\tint e, num, val;\n\tEDGE (int tmp1, int tmp2, int tmp3) : e(tmp1), num(tmp2), val(tmp3) {}\n}; \nvector <EDGE> ude[300010];\nvector <int> de[300010];\nqueue <int> q;\n\nvoid work1()\n{\n\tcnt = 1;\n\tmemset(ans, 0, sizeof(ans));\n\tmemset(vis, 0, sizeof(vis));\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint tp = q.front();\n\t\tq.pop();\n\t\tvis[tp] = true;\n//\t\tprintf(\"WORK %d\\n\", tp);\n\t\tfor (register int i = 0;i < de[tp].size();i ++)\n\t\t{\n\t\t\tint _e = de[tp][i];\n\t\t\tif(!vis[_e])\n\t\t\t{\n\t\t\t\tcnt ++;\n\t\t\t\tvis[_e] = true;\n\t\t\t\tq.push(_e);\n//\t\t\t\tprintf(\"PUSH D %d\\n\", _e);\n\t\t\t}\n\t\t}\n\t\tfor (register int i = 0;i < ude[tp].size();i ++)\n\t\t{\n\t\t\tint _e = ude[tp][i].e, _num = ude[tp][i].num, _val = ude[tp][i].val;\n\t\t\tif(!vis[_e] && ans[_num] != -_val)\n\t\t\t{\n\t\t\t\tans[_num] = _val;\n\t\t\t\tcnt ++;\n\t\t\t\tvis[_e] = true;\n//\t\t\t\tprintf(\"PUSH UD %d\\n\", _e);\n\t\t\t\tq.push(_e);\n\t\t\t}\n\t\t}\n\t}\n\tfprint(cnt);\n\tputchar('\\n');\n\tfor (register int i = 1;i <= tot;i ++)\n\t{\n\t\tputchar(ans[i] == 1? '+':'-');\n\t}\n\tputchar('\\n');\n}\n\nvoid work2()\n{\n\tcnt = 1;\n\tmemset(ans, 0, sizeof(ans));\n\tmemset(vis, 0, sizeof(vis));\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint tp = q.front();\n\t\tq.pop();\n\t\tvis[tp] = true;\n//\t\tprintf(\"WORK %d\\n\", tp);\n\t\tfor (register int i = 0;i < de[tp].size();i ++)\n\t\t{\n\t\t\tint _e = de[tp][i];\n\t\t\tif(!vis[_e])\n\t\t\t{\n\t\t\t\tcnt ++;\n\t\t\t\tvis[_e] = true;\n\t\t\t\tq.push(_e);\n//\t\t\t\tprintf(\"PUSH D %d\\n\", _e);\n\t\t\t}\n\t\t}\n\t\tfor (register int i = 0;i < ude[tp].size();i ++)\n\t\t{\n\t\t\tint _e = ude[tp][i].e, _num = ude[tp][i].num, _val = ude[tp][i].val;\n\t\t\tif(ans[_num] != _val)\n\t\t\t{\n\t\t\t\tans[_num] = -_val;\n\t\t\t}\n\t\t}\n\t}\n\tfprint(cnt);\n\tputchar('\\n');\n\tfor (register int i = 1;i <= tot;i ++)\n\t{\n\t\tputchar(ans[i] == 1? '+':'-');\n\t}\n\tputchar('\\n');\n}\n\nint main()\n{\n\tread(n);\n\tread(m);\n\tread(s);\n\twhile(m --)\n\t{\n\t\tint opt, u, v;\n\t\tread(opt);read(u);read(v);\n\t\tif(opt == 1)\n\t\t{\n\t\t\tde[u].push_back(v);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tude[u].push_back(EDGE(v, ++ tot, 1));\n\t\t\tude[v].push_back(EDGE(u, tot, -1));\n\t\t}\n\t}\n\twork1();\n\twork2(); \n} \n```",
        "postTime": 1573193165,
        "uid": 66511,
        "name": "DPair",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF883G \u3010Orientation of Edges\u3011"
    }
]