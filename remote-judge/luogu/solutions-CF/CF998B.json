[
    {
        "content": "   \u8fd9\u9898\u554a\uff0c\u6211\u770b\u5230\u53e6\u4e00\u7bc7\u9898\u89e3\u662fDP+\u4f18\u5148\u961f\u5217\u4e4b\u7c7b\u7684\uff0c\u849f\u84bb\u5bf9\u81ea\u5e95\u5411\u4e0a\u7684DP\u5b9e\u5728\u4e00\u7a8d\u4e0d\u901a\uff0c\u4e00\u5f00\u59cb\u6ca1\u6709\u60f3\u5230\uff0c\u5c31\u62ff\u4e86\u81ea\u9876\u5411\u4e0b\u7684\u8bb0\u5fc6\u5316\u641c\u7d22\u8fc7\u7684\u3002\n\n\u6572DFS\u5927\u5bb6\u4e00\u5b9a\u90fd\u4f1a\u5427\uff1f\n\n\u5728\u8bfb\u5165\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u5947\u6570\u4e2a\u6570\uff0c\u7136\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u5728\u5e8f\u5217\u4e2d\u4f4d\u7f6e\u4e0d\u540c\u3001\u5230\u5f53\u524d\u4f4d\u7f6e\u5947\u5076\u6570\u4e0d\u540c\u3001\u5269\u4f59\u6bd4\u7279\u5e01\u6570\u91cf\u4e0d\u540c\u3001\u5207\u5272\u7684\u6b21\u6570\uff08dao\uff09\u4e0d\u540c\uff0c\u6765\u8fdb\u884cDFS\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint a[105];\nint n,m;\nint maxx=0;\nvoid dfs(int pos,int odd,int even,int money,int dao,int sumodd,int sumeven)\n{\n    if(odd>sumodd||even>sumeven||n-pos+dao<=maxx||pos>=n-1||money<=0||sumodd!=sumeven)//\u4e00\u4e9b\u526a\u679d\n        return;\n    if(pos<n-1)//\u53ea\u7528\u641c\u5230n-1\uff0c\u56e0\u4e3a\u603b\u4e0d\u80fd\u628a\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7ed9\u5207\u4e86\u5427\uff1f\n    {\n        odd+=(a[pos]&1);\n        even+=(!(a[pos]&1));\n    }\n    if(odd==even&&sumodd-odd==sumeven-even&&odd>0&&even>0)//\u5224\u65ad\u662f\u5426\u5207\u5272\u524d\u540e\u7684\u5e8f\u5217\u5947\u5076\u90fd\u76f8\u540c\n    {\n        if(money>=abs(a[pos]-a[pos+1])&&pos<n-1)\n        {\n            maxx=max(maxx,dao+1);//\u5982\u679c\u90fd\u7b26\u5408\uff0c\u5c31\u5207\u4e00\u5200\uff0c\u7136\u540e\u7ee7\u7eeddfs\n            dfs(pos+1,0,0,money-abs(a[pos]-a[pos+1]),dao+1,sumodd-odd,sumeven-even);\n        }\n    }\n    dfs(pos+1,odd,even,money,dao,sumodd,sumeven);//\u4e5f\u53ef\u4ee5\u9009\u62e9\u4e0d\u5728\u8fd9\u91cc\u5207\u4e00\u5200\uff0c\u56e0\u4e3a\u5728\u8fd9\u5207\u672a\u5fc5\u662f\u6700\u4f18\u89e3\n}\nint main()\n{\n    int sumodd=0;//\u4fdd\u5b58\u4e00\u4e0b\u5947\u6570\u6570\u91cf\uff0c\u4fdd\u5b58\u5076\u6570\u4e5f\u884c\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<=n; i++)\n    {\n        scanf(\"%d\",&a[i]);\n        sumodd+=(a[i]&1);\n    }\n    if(sumodd<<1==n)//\u5fc5\u987b\u8ba9\u5e8f\u5217\u5947\u5076\u76f8\u7b49\u624d\u6709\u53ef\u80fd\u5207\u5272\n        dfs(1,0,0,m,0,sumodd,n-sumodd);\n    printf(\"%d\",maxx);\n    return 0;\n}\n```\n\u5f53\u7136\uff0c\u4e0a\u9762\u8fd9\u662f\u52a0\u4e86\u4e00\u70b9\u70b9\u526a\u679d\u7684DFS\uff0c\u53ea\u662f\u60f3\u8ba9\u4f60\u770b\u770bDFS\u7684\u5927\u6982\u6d41\u7a0b\uff0c\u867d\u7136\u6709\u4e00\u70b9\u70b9\u526a\u679d\uff0c\u5b9e\u9645\u4e0a\u5c31\u6bd4\u6700\u6734\u7d20\u7684\u597d\u4e00\u70b9\u800c\u5df2\uff0c\u8fd9\u4e00\u70b9\u4f18\u5316\u662f\u6ca1\u7528\u7684\uff0c\u8fd8\u662f\u4f1aTLE\u3002\n\n\u6211\u5728\u4fee\u6539\u4e86\u65e0\u6570\u6b21\u8fd8\u662fT\u4e4b\u540e\uff0c\u6211\u5c31\u4e0d\u6253\u7b97\u8fdb\u884c\u5c0f\u4f18\u5316\u4e86\uff0c\u7528**\u8bb0\u5fc6\u5316\u641c\u7d22**\uff08\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e00\u5f00\u59cb\u6ca1\u60f3\u5230\uff09\u3002\n\n**\u666e\u901aDFS\u4e4b\u6240\u4ee5\u590d\u6742\u5ea6\u9ad8\uff0c\u662f\u56e0\u4e3a\u5f88\u591a\u72b6\u6001\u4f1a\u88ab\u641c\u7d22\u975e\u5e38\u591a\u6b21\uff0c\u5bfc\u81f4\u72b6\u6001\u591a\u7684\u8bdd\uff0c\u65f6\u95f4\u6d88\u8017\u975e\u5e38\u5927\uff0c\u5982\u679c\u8ba9\u6bcf\u79cd\u72b6\u6001\u90fd\u53ea\u641c\u7d22\u4e00\u6b21\uff0c\u90a3\u4e48\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u9ad8\u6548\u7387\u3002**\n\n\u5bf9\u4e8e\u67d0\u4e00\u4f4d\u7f6e\uff0c\u5728\u6bd4\u7279\u5e01\u5269\u4f59\u6570\u91cf\u548c\u5947\u5076\u6570\u91cf\u4e0d\u540c\u7684\u65f6\u5019\uff0c\u4f1a\u5206\u522b\u5bf9\u5e94\u4e00\u79cd\u552f\u4e00\u72b6\u6001\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a\u8bb0\u5fc6\u6570\u7ec4\u3002\n```\nint dp[101][51][101][51];//\u4f4d\u7f6e\uff0c\u5f53\u524d\u4f4d\u7f6e\u5947\u6570\u6570\u91cf\uff0c\u5269\u4f59\u6bd4\u7279\u5e01\u6570\u91cf\uff0c\u5e8f\u5217\u4e2d\u5269\u4f59\u603b\u7684\u5947\u6570\u6570\u91cf\n```\n\u5076\u6570\u6570\u91cf\u662f\u4e0d\u7528\u8bb0\u5f55\u7684\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1\u80fd\u5207\u5272\uff0c\u5fc5\u987b\u5269\u4f59\u5947\u5076\u6570\u76f8\u7b49\uff0c\u6240\u4ee5\u6211\u5728DFS\u4e2d\u52a0\u6709\u4e00\u4e2a\u5224\u65ad\u8bed\u53e5\u5c31\u662f\u4e13\u95e8\u5224\u65ad\u5947\u5076\u6570\u662f\u5426\u76f8\u7b49\uff0c\u8fd9\u6837\u4e5f\u7b97\u5e2e\u6211\u4eec\u7701\u53bb\u4e00\u7ef4\u3002\n\n\u6700\u6781\u7aef\u7684\u72b6\u51b5\uff0c\u4e5f\u4e0d\u8fc7\u662f100 * 50 * 100 * 50\u79cd\u60c5\u51b5\uff0c\u5168\u90e8\u904d\u5386\u4e00\u904d\u4e0d\u8fc7\u662f2.5*10^7\u79cd\u60c5\u51b5\uff0c2s\u7684\u65f6\u95f4\u7ef0\u7ef0\u6709\u4f59\u3002\n\n\u53ef\u80fd\u4f60\u8fd8\u4f1a\u60f3\u95ee\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u5e8f\u5217\u603b\u7684\u5947\u6570\u6570\u91cf\u90a3\u7ef4\u4e0d\u5f00\u5230100\uff1f\n\n\u56e0\u4e3a\u5e8f\u5217\u6700\u957f\u5c31\u662f100\u4e2a\u6570\u5b57\uff0c\u4e00\u65e6\u603b\u7684\u5947\u6570\u8d85\u8fc750\uff0c\u5c31\u4e00\u5b9a\u4e0d\u80fd\u5207\u5272\u3002\n\n\u4e0b\u9762\u4e0aAC\u4ee3\u7801\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint a[105];\nint n,m;\nint dp[101][51][101][51];\nint dfs(int pos,int odd,int even,int money,int dao,int sumodd,int sumeven)\n{\n    if(dp[pos][odd][money][sumodd]!=-1)\n        return dp[pos][odd][money][sumodd];\n    if(odd>sumodd||even>sumeven||pos>=n-1||money<=0||sumodd!=sumeven||pos>=n-1)\n        return dao;\n    if(pos<n-1)\n    {\n        odd+=(a[pos]&1);\n        even+=(!(a[pos]&1));\n    }\n    int p=dao,q=dao;\n    if(odd==even&&sumodd-odd==sumeven-even&&odd>0&&even>0)\n    {\n        if(money>=abs(a[pos]-a[pos+1])&&pos<n-1)\n        {\n            p=dfs(pos+1,0,0,money-abs(a[pos]-a[pos+1]),dao+1,sumodd-odd,sumeven-even);\n        }\n    }\n    q=dfs(pos+1,odd,even,money,dao,sumodd,sumeven);\n    return dp[pos][odd][money][sumodd]=max(p,q);\n}\nint main()\n{\n    //freopen(\"ans.txt\",\"r\",stdin);\n    memset(dp,-1,sizeof(dp));\n    int sumodd=0;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<=n; i++)\n    {\n        scanf(\"%d\",&a[i]);\n        sumodd+=(a[i]&1);\n    }\n    int maxx=0;\n    if(sumodd<<1==n)\n        maxx=dfs(1,0,0,m,0,sumodd,sumodd);\n    printf(\"%d\",maxx);\n    return 0;\n}\n```\n\u8fd9\u6837\uff0c\u65f6\u95f4\u53ef\u4ee5\u964d\u5230\u51e0\u5341ms\u5c31\u5b8c\u6210\u3002\u5f53\u7136\u6211\u4e5f\u627f\u8ba4\uff0c\u8fd9\u6837\u727a\u7272\u4e86\u6bd4\u8f83\u5927\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\n\n\u5982\u679c\u6709\u66f4\u597d\u7684\u8bb0\u5fc6\u5316\u641c\u7d22\u4f18\u5316\uff0c\u65e0\u8bba\u662f\u65f6\u95f4\u8fd8\u662f\u7a7a\u95f4\uff0c\u90fd\u6b22\u8fce\u4f60\u63d0\u51fa\uff01\n\n\uff082020.04.08\u7b2c\u4e00\u6b21\u4fee\u6539\uff0c\u5c06\u5f00\u5934\u201c\u5bf9DP\u5b9e\u5728\u4e00\u7a8d\u4e0d\u901a\uff0c\u4e00\u5f00\u59cb\u6ca1\u6709\u60f3\u5230\uff0c\u5c31\u62ff\u4e86\u53e6\u5916\u4e00\u79cd\u89e3\u6cd5\u201d\u6539\u4e3a\u201c\u5bf9\u81ea\u5e95\u5411\u4e0a\u7684DP\u5b9e\u5728\u4e00\u7a8d\u4e0d\u901a\uff0c\u4e00\u5f00\u59cb\u6ca1\u6709\u60f3\u5230\uff0c\u5c31\u62ff\u4e86\u81ea\u9876\u5411\u4e0b\u7684\u8bb0\u5fc6\u5316\u641c\u7d22\u201d\u3002\uff09",
        "postTime": 1586164655,
        "uid": 277023,
        "name": "YuanZhizheng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF998B \u3010Cutting\u3011"
    },
    {
        "content": "#### \u9898\u76ee\u63cf\u8ff0\n\u6709\u5f88\u591a\u4e1c\u897f\u662f\u53ef\u4ee5\u88ab\u5207\u5272\u7684\uff0c\u6bd4\u5982\u2014\u2014\u6811\u3001\u7eb8\u5f20\u6216\u8005\u7ef3\u5b50\u3002\u5728\u8fd9\u9053\u9898\u76ee\u91cc\u9762\u4f60\u9700\u8981\u5207\u5272\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\u3002  \n\u73b0\u5728\u544a\u8bc9\u4f60\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u5728\u8fd9\u4e2a\u6574\u6570\u5e8f\u5217\u91cc\u9762\u6709\u4e00\u4e9b\u6570\uff0c\u5b83\u4eec\u53ef\u80fd\u662f\u5947\u6570\uff0c\u4e5f\u53ef\u80fd\u662f\u5076\u6570\u3002  \n\u7ed9\u4f60\u4e00\u4e2a\u56fa\u5b9a\u7684\u9884\u7b97\uff08\u56e0\u4e3a\u5207\u5272\u662f\u6709\u6210\u672c\u7684\uff09\uff0c\u4f60\u9700\u8981\u5c3d\u53ef\u80fd\u591a\u5730\u5c06\u8fd9\u4e2a\u6574\u6570\u5e8f\u5217\u5207\u5206\u6210\u4e00\u7cfb\u5217\u8fde\u7eed\u5b50\u5e8f\u5217\uff0c  \n\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217\u4e2d\u7684 \u5947\u6570\u5143\u7d20\u7684\u4e2a\u6570 \u548c \u5076\u6570\u5143\u7d20\u7684\u4e2a\u6570 \u76f8\u540c\u3002  \n\u6bd4\u5982\uff0c\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u5e8f\u5217 [4,1,2,3,4,5,4,4,5,5] \uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u5207\u5272\u4e24\u6b21\u53d8\u6210   \n[4,1 | 2,3,4,5 | 4,4,5,5] \u3002\u5176\u4e2d\uff0c[4,1] \u3001 [2,3,4,5] \u4ee5\u53ca [4,4,5,5] \u8fd9\u4e09\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217\u4e2d\u5305\u542b\u7684\u5947\u6570\u4e2a\u6570\u7b49\u4e8e\u5076\u6570\u4e2a\u6570\u3002  \n\u5982\u679c\u4f60\u8981\u5c06\u7b2c i \u4e2a\u5143\u7d20\u548c\u7b2c i+1 \u4e2a\u5143\u7d20\u4e4b\u95f4\u5207\u4e00\u5200\uff0c\u6211\u4eec\u5047\u8bbe\u7b2c i \u4e2a\u5143\u7d20\u5bf9\u5e94\u7684\u6570\u503c\u4e3a x \uff0c\u7b2c j \u4e2a\u5143\u7d20\u5bf9\u5e94\u7684\u6570\u503c\u4e3a y \uff0c\u90a3\u4e48\u4f60\u9700\u8981\u6d88\u8017 |x-y| \u4e2a\u6bd4\u7279\u5e01\u3002  \n\uff08|x-y| \u8868\u793a x-y \u7684\u5dee\u7684\u7edd\u5bf9\u503c\uff09\u3002  \n\u800c\u4f60\u7684\u9884\u7b97\u53ea\u6709 B \u4e2a\u6bd4\u7279\u5e01\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8ba1\u7b97\u4e00\u4e0b\u5728\u6700\u591a\u6d88\u8017 B \u4e2a\u6bd4\u7279\u5e01\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u5207\u51e0\u6b21\u3002  \n#### \u8f93\u5165\u683c\u5f0f\n\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n \uff082<=n<=100\uff09\u548c B\uff081<=B<=100\uff09\uff0c\u5206\u522b\u8868\u793a\u6574\u6570\u5e8f\u5217\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u548c\u4f60\u6700\u591a\u53ef\u7528\u7684\u6bd4\u7279\u5e01\u7684\u6570\u91cf\u3002  \n\u8f93\u5165\u7684\u7b2c\u4e8c\u884c\u5305\u542b n \u4e2a\u6574\u6570\uff0c\u7528\u4e8e\u8868\u793a\u6574\u6570\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\uff1aa1,a2,\u2026\u2026,an\uff081<=ai<=100\uff09\u3002   \n#### \u8f93\u51fa\u683c\u5f0f\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u7528\u4e8e\u8868\u793a\u5728\u6700\u591a\u6d88\u8017 B \u4e2a\u6bd4\u7279\u5e01\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u5207\u51e0\u5200\uff0c\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u5207\u51fa\u6765\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\u4e2d\u5305\u542b\u76f8\u540c\u7684\u5947\u5076\u5143\u7d20\u3002  \n#### \u6837\u4f8b\u8f93\u51651\n```\n6 4\n1 2 5 10 15 20\n```\n#### \u6837\u4f8b\u8f93\u51fa1\n```\n1\n```\n#### \u6837\u4f8b\u8f93\u51652\n```\n4 10\n1 3 2 4\n```\n#### \u6837\u4f8b\u8f93\u51fa2\n```\n0\n```\n#### \u6837\u4f8b\u8f93\u51653\n```\n6 100\n1 2 3 4 5 6\n```\n#### \u6837\u4f8b\u8f93\u51fa3\n```\n2\n```\n#### \u6837\u4f8b\u89e3\u91ca\n\u5bf9\u4e8e\u6837\u4f8b1\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 2 \u548c 5 \u4e4b\u95f4\u5207\u5272\u4e00\u5200\uff0c\u6d88\u8017 3 \u4e2a\u6bd4\u7279\u5e01\uff1b  \n\u5bf9\u4e8e\u6837\u4f8b2\uff0c\u6211\u4eec\u65e0\u6cd5\u5207\u5272\uff1b  \n\u5bf9\u4e8e\u6837\u4f8b3\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 2 \u548c 3 \u4e4b\u95f4 \u4ee5\u53ca 4 \u548c 5 \u4e4b\u95f4\u5207\u5272\u4e00\u5200\uff0c\u6d88\u8017 1+1=2 \u4e2a\u6bd4\u7279\u5e01\u3002  \n\n### \u95ee\u9898\u5206\u6790\n\u8fd9\u9053\u9898\u76ee\u6d89\u53ca\u7684\u7b97\u6cd5\u662f\u201cDP\u201d+\u201c\u8d2a\u5fc3\u201d\uff0c\u53ef\u4ee5\u7528 dp+sort \u6216\u8005 dp+heap \u6765\u505a\u3002  \n\u9996\u5148\u6211\u4eec\u5047\u8bbe n \u4e2a\u5143\u7d20\u7684\u5750\u6807\u4ece 1 \u5230 n \uff0c\u4ed6\u4eec\u5206\u522b\u5bf9\u5e94 a[1] \u5230 a[n] \u3002   \n\u7136\u540e\u6211\u4eec\u5f00\u4e00\u4e2a\u8f93\u51fa cc[] \uff0ccc[i] \u7528\u4e8e\u8868\u793a\u4ece a[1] \u5230 a[i] \u8fd9 i \u4e2a\u6570\u4e2d\u5947\u6570\u4e2a\u6570\u51cf\u53bb\u5076\u6570\u4e2a\u6570\u4e4b\u5dee\u3002  \n\u90a3\u4e48\u5bf9\u4e8e 1 \u5230 n-1 \u8303\u56f4\u5185\u7684 i \uff0c\u5982\u679c cc[i] == 0 \uff0c\u90a3\u4e48\u5b83\u8fd9\u4e2a\u4f4d\u7f6e\u5c31\u662f\u53ef\u4ee5\u5207\u5272\u7684\uff0c\u5207\u5272\u7684\u6210\u672c\u662f abs(a[i+1]-a[i]) \u3002\n#### dp+sort\u89e3\u6cd5\uff1a  \n\u6211\u4eec\u5c06 1 \u5230 n-1 \u8303\u56f4\u5185\u7684\u6240\u6709\u6ee1\u8db3 cc[i]==0 \u6761\u4ef6\u7684 i \u5bf9\u5e94\u7684 abs(a[i+1]-a[i]) \u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u6570\u7ec4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6bcf\u6b21\u53d6\u51fa\u4e00\u4e2a\u6570\u8ba1\u6570\u5668cnt++\uff0c\u540c\u65f6B\u51cf\u53bb\u8fd9\u4e2a\u6570\uff0c\u76f4\u5230B\u4e0d\u591f\u7528\u4e3a\u6b62\uff1b\n#### dp+heap\uff08\u5806\uff09\u89e3\u6cd5\uff1a  \n\u6211\u4eec\u9996\u5148\u6784\u9020\u4e00\u4e2a\u6700\u5c0f\u5806\uff08\u53ef\u4ee5\u7528 priority_queue \u6a21\u62df\uff09\uff0c\u7136\u540e\u5c06 1 \u5230 n-1 \u8303\u56f4\u5185\u7684\u6240\u6709\u6ee1\u8db3 cc[i]==0 \u6761\u4ef6\u7684 i \u5bf9\u5e94\u7684 abs(a[i+1]-a[i]) \u653e\u5165\u6700\u5c0f\u5806\u4e2d1\uff0c\u7136\u540e\u6bcf\u6b21\u4ece\u6700\u5c0f\u5806\u4e2d\u53d6\u51fa\u5806\u9876\u5143\u7d20\uff0c\u8ba1\u6570\u5668cnt++\uff0c\u540c\u65f6B\u51cf\u53bb\u8fd9\u4e2a\u6570\uff0c\u76f4\u5230B\u4e0d\u591f\u7528\u4e3a\u6b62\u3002  \n\n1\u3001\u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86 dp+sort \u7684\u64cd\u4f5c\uff1a  \n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 110;\n\nint n, B, cnt, a[maxn], cc[maxn];\nvector<int> vec;\n\nint main() {\n    cin >> n >> B;\n    for (int i = 1; i <= n; i ++) {\n        cin >> a[i];\n        cc[i] = cc[i-1] + (a[i] % 2 ? 1 : -1);\n    }\n    for (int i = 1; i < n; i ++) if (!cc[i]) vec.push_back(abs(a[i+1]-a[i]));\n    sort(vec.begin(), vec.end());\n    for (vector<int>::iterator it = vec.begin(); it != vec.end(); it ++) {\n        if (*it > B) break;\n        B -= *it;\n        cnt ++;\n    }\n    cout << cnt << endl;\n    return 0;\n}\n```\n\n2\u3001\u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86 dp+heap \u7684\u64cd\u4f5c\uff1a\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 110;\n\nint n, B, cnt, a[maxn], cc[maxn];\npriority_queue<int, vector<int>, greater<int> > que;\n\nint main() {\n    cin >> n >> B;\n    for (int i = 1; i <= n; i ++) {\n        cin >> a[i];\n        cc[i] = cc[i-1] + (a[i] % 2 ? 1 : -1);\n    }\n    for (int i = 1; i < n; i ++) if (!cc[i]) que.push(abs(a[i+1]-a[i]));\n    while (!que.empty()) {\n        int u = que.top();\n        que.pop();\n        if (u > B) break;\n        B -= u;\n        cnt ++;\n    }\n    cout << cnt << endl;\n    return 0;\n}\n```\n",
        "postTime": 1578975377,
        "uid": 291976,
        "name": "quanjun",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF998B \u3010Cutting\u3011"
    },
    {
        "content": "# CF998B Cutting \u9898\u89e3\n## \u9898\u610f\u7b80\u8ff0\n+ \u6709\u4e00\u957f\u5ea6\u4e3a $n$ \u7684\u6574\u6570\u5e8f\u5217 $a_1,a_2,\\cdots,a_n$\uff0c\u6ee1\u8db3\u5e8f\u5217\u4e2d\u5947\u6570\u548c\u5076\u6570\u7684\u6570\u91cf\u76f8\u540c\u3002\n+ \u5b9a\u4e49\u7b2c $k$ \u6b21\u201c\u5207\u5272\u201d\u4e3a\u5728\u5df2\u6709\u7684 $k$ \u4e2a\u5e8f\u5217\u4e2d\u9009\u62e9\u4e00\u4e2a\uff0c\u8bbe\u6b64\u5e8f\u5217\u4e3a $a_l,a_{l+1},\\cdots,a_r$\uff0c\u7136\u540e\u9009\u62e9\u4e00\u4e2a\u5143\u7d20 $a_i(l\\le i<r)$\uff0c\u5728 $a_i$ \u4e0e $a_{i+1}$ \u95f4\u8fdb\u884c\u5206\u5272\uff0c\u5f62\u6210\u4e24\u4e2a\u65b0\u5e8f\u5217 $a_l,a_{l+1},\\cdots,a_i$ \u4e0e $a_{i+1},a_{i+2},\\cdots,a_r$\u3002\u5206\u5272\u4ee3\u4ef7\u4e3a $\\left\\vert a_{i+1}-a_i\\right\\vert$\u3002\n+ \u4e00\u6b21\u201c\u5207\u5272\u201d\u53ef\u4ee5\u8fdb\u884c\u5f53\u4e14\u4ec5\u5f53\u5206\u5272\u540e\u4e24\u4e2a\u65b0\u5e8f\u5217\u90fd\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a\u65b0\u5e8f\u5217\u4e2d\u5947\u3001\u5076\u6570\u6570\u91cf\u76f8\u540c\u3002\n+ \u5728\u4fdd\u8bc1\u5206\u5272\u4ee3\u4ef7\u603b\u548c\u4e0d\u8d85\u8fc7\u9884\u7b97 $B$ \u7684\u6761\u4ef6\u4e0b\uff0c\u201c\u5207\u5272\u201d\u6b21\u6570\u8981\u5c3d\u53ef\u80fd\u591a\u3002\u6c42\u6700\u591a\u7684\u201c\u5207\u5272\u201d\u6b21\u6570\u3002\n+ $2\\le n\\le 100$\uff0c$1\\le B\\le 100$\uff0c$1\\le a_i\\le 100$\u3002\n\n\n## \u9898\u76ee\u5206\u6790\n\u5bf9\u4e00\u4e2a\u5947\u3001\u5076\u6570\u6570\u91cf\u76f8\u540c\u7684\u5e8f\u5217\u8fdb\u884c\u201c\u5207\u5272\u201d\uff0c\u53ea\u8981\u6ee1\u8db3\u524d\u4e00\u4e2a\u65b0\u5e8f\u5217\u4e2d\u5947\u3001\u5076\u6570\u6570\u91cf\u76f8\u540c\uff0c\u5219\u540e\u4e00\u4e2a\u65b0\u5e8f\u5217\u4e2d\u5947\u3001\u5076\u6570\u6570\u91cf\u5fc5\u7136\u76f8\u540c\u3002\n\n\u5982\u679c\u4e00\u4e2a\u5e8f\u5217\u53ef\u88ab\u5206\u4e3a\u591a\u6bb5\u5e8f\u5217\uff0c\u4e14\u8fd9\u4e9b\u5e8f\u5217\u5947\u3001\u5076\u6570\u6570\u91cf\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u5947\u3001\u5076\u6570\u6570\u91cf\u5fc5\u7136\u76f8\u540c\u3002\n\n\u800c\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217 $a_l,a_{l+1},\\cdots,a_r$\uff0c\u53ea\u8981\u6ee1\u8db3 $a_1,a_2,\\cdots,a_r$ \u5947\u3001\u5076\u6570\u6570\u91cf\u76f8\u540c\uff0c\u4e14 $a_1,a_2,\\cdots,a_{l-1}$ \u5947\u3001\u5076\u6570\u6570\u91cf\u4e5f\u76f8\u540c\uff0c\u90a3\u4e48 $a_l,a_{l+1},\\cdots,a_r$ \u5947\u3001\u5076\u6570\u6570\u91cf\u5fc5\u7136\u76f8\u540c\u3002\n\n\u6240\u4ee5**\u5982\u679c\u5e8f\u5217 $a_1,a_2,\\cdots,a_i$ \u5947\u3001\u5076\u6570\u6570\u91cf\u76f8\u540c\uff0c\u90a3\u4e48\u65e0\u8bba\u524d\u9762\u201c\u5207\u5272\u201d\u4e86\u51e0\u6b21\uff0c\u5728 $a_i$ \u4e0e $a_{i+1}$ \u95f4\u603b\u53ef\u4ee5\u201c\u5207\u5272\u201d**\u3002\u5982\u56fe\uff1a\uff08\u7eff\u8272\u7ad6\u7ebf\u8868\u793a\u4e4b\u524d\u7684\u201c\u5207\u5272\u201d\uff0c\u84dd\u8272\u7ad6\u7ebf\u8868\u793a\u73b0\u5728\u7684\u201c\u5207\u5272\u201d\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lcdorc8s.png)\n\n\u5f97\u51fa\u7ed3\u8bba\uff1a**\u201c\u5207\u5272\u201d\u987a\u5e8f\u4e0d\u91cd\u8981**\u3002\n\n\u6240\u4ee5\u5c31\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6240\u6709\u53ef\u4ee5\u201c\u5207\u5272\u201d\u7684\u70b9\uff0c\u5e76\u8ba1\u7b97\u6bcf\u6b21\u201c\u5207\u5272\u201d\u7684\u4ee3\u4ef7\u3002\n\n\u8981\u4fdd\u8bc1\u201c\u5207\u5272\u201d\u6b21\u6570\u8981\u5c3d\u53ef\u80fd\u591a\uff0c\u5c31\u5f97\u628a\u201c\u5207\u5272\u201d\u4ee3\u4ef7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u518d\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u201c\u5207\u5272\u201d\u3002\n\n\u6d41\u7a0b\uff1a\n1. \u8f93\u5165\u3002\uff08$O(n)$\uff09\n2. \u9884\u5904\u7406\u53ca\u6392\u5e8f\u3002\uff08$O(n+n\\log n)=O(n\\log n)$\uff09\n3. \u6a21\u62df\u201c\u5207\u5272\u201d\u3002\uff08$O(n)$\uff09\n4. \u8f93\u51fa\u3002\uff08$O(1)$\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\log n)$\u3002\n\n## \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\ninline ll read() {\n\tll nov = 1, dat = 0;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-')\n\t\t\tnov = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tdat = (dat << 3) + (dat << 1) + (c & 15);\n\t\tc = getchar();\n\t}\n\treturn dat * nov;\n}\n\nvoid write(ll x) {\n\tif (x < 0) {\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x < 10) {\n\t\tputchar(x + '0');\n\t} else {\n\t\twrite(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nll a[110], now, ans, n, b;//now \u8868\u793a\u76ee\u524d\u5947\u6570\u6bd4\u5076\u6570\u591a\u591a\u5c11\u4e2a\nvector<ll>cutting;//\u7528 vector \u4fdd\u5b58\u201c\u5207\u5272\u201d\u4ee3\u4ef7\n\nint main() {\n\t//1.\u8f93\u5165\n\tn = read(), b = read();\n\tfor (ll i = 1; i <= n; i++) {\n\t\ta[i] = read();\n\t}\n\t//2.\u9884\u5904\u7406\n\tfor (ll i = 1; i < n; i++) { //a[n] \u540e\u9762\u65e0\u6cd5\u201c\u5207\u5272\u201d\n\t\tif (a[i] % 2 == 1) { //a[i] \u662f\u5947\u6570\n\t\t\tnow++;\n\t\t} else { //a[i] \u662f\u5076\u6570\n\t\t\tnow--;\n\t\t}\n\t\tif (now == 0) { //\u5947\u6570\u3001\u5076\u6570\u6570\u91cf\u76f8\u7b49\n\t\t\tcutting.push_back(llabs(a[i + 1] - a[i]));//\u53ef\u4ee5\u201c\u5207\u5272\u201d\n\t\t}\n\t}\n\tsort(cutting.begin(), cutting.end()); //\u6839\u636e\u201c\u5207\u5272\u201d\u4ee3\u4ef7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\t//vector.end() \u8fed\u4ee3\u5668\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4f4d\n\t//3.\u6a21\u62df\u201c\u5207\u5272\u201d\n\tfor (ll i = 0; i < cutting.size(); i++) {\n\t\tif (b >= cutting[i]) { //\u8fd8\u53ef\u4ee5\u8fdb\u884c\u201c\u5207\u5272\u201d\n\t\t\tb -= cutting[i];\n\t\t\tans++;\n\t\t} else { //\u9884\u7b97\u4e0d\u8db3\n\t\t\tbreak;\n\t\t}\n\t}\n\t//4.\u8f93\u51fa\n\twrite(ans);\n\treturn 0;\n}\n```",
        "postTime": 1676632102,
        "uid": 423140,
        "name": "_frog",
        "ccfLevel": 5,
        "title": "CF998B Cutting \u9898\u89e3"
    }
]