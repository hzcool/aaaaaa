[
    {
        "content": "\u79bb\u6563\u5316 + BFS \uff08DFS\uff09\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u9053\u9898\u3002 \n\n\u9898\u76ee\u5927\u610f\u662f\u7ed9\u4f60\u4e00\u6761\u8def\u7ebf\uff0c\u8def\u7ebf\u4e0a\u7684\u65b9\u683c\u4e0d\u80fd\u8d70\u5230\uff0c\u95ee\u6700\u540e\u80fd\u5230\u90a3\u4e9b\u65b9\u683c\u3002\n\n\u5f88\u660e\u663e\u7684\u641c\u7d22\uff0c\u4f46\u662f\u571f\u5730\u7684\u957f\u5bbd\u592a\u5927\uff0c\u76f4\u63a5\u641c\u80af\u5b9a\u4f1a TLE \u3002\n\n\u89c2\u5bdf\u9898\u76ee\uff0c\u53d1\u73b0 $n$ \u53ea\u6709 1e3 ,\u60f3\u5230\u628a\u56fe\u79bb\u6563\u5316\u3002\u5177\u4f53\u7684\u505a\u6cd5\u662f\u628a\u6bcf\u6761\u8def\u7ebf\u7684\u7ec8\u70b9\uff08\u8f6c\u6298\u70b9\uff09\u7684\u884c\u5217\u8bb0\u4e0b\u6765\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u79bb\u6563\u5316\u3002\n\n\u8fd9\u4e9b\u884c\u5217\u628a\u56fe\u5206\u5272\u6210\u6700\u591a $(n+1)*(n+1)$ \u4e2a\u5c0f\u65b9\u5757\u3002\u8fd9\u65f6\u5bf9\u4e8e\u641c\u7d22\u7684\u8fc7\u7a0b\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5c0f\u5206\u5757\u90fd\u88ab\u5f53\u6210\u4e00\u4e2a\u70b9\u5904\u7406\uff0c\u53ea\u9700\u5728\u7edf\u8ba1\u7b54\u6848\u65f6\u52a0\u4e0a\u539f\u6765\u7684\u9762\u79ef\u5373\u53ef\u3002\n\n\u5177\u4f53\u8981\u5904\u7406\u7684\u7ec6\u8282\u770b\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int Maxn=3005;\nint ax[Maxn],ay[Maxn],nx,ny,n,px[Maxn],py[Maxn],vis[Maxn][Maxn],ans;//\u6570\u7ec4 ax \u4e2d ax[0] \u5b58\u7684\u662f\u6570\u7ec4\u5927\u5c0f \ninline int find_x(int x){return lower_bound(ax+1,ax+ax[0]+1,x)-ax;}\ninline int find_y(int x){return lower_bound(ay+1,ay+ay[0]+1,x)-ay;} //\u79bb\u6563\u5316\u540e\u7684\u6570\u7ec4\u5177\u6709\u5355\u8c03\u6027\uff0c\u4f7f\u7528\u4e8c\u5206\u627e\u5230\u503c x \u5bf9\u5e94\u7684\u539f\u59cb\u7f16\u53f7 \nvoid dfs(int x,int y){\n\tif(vis[x][y]||x<1||x>ax[0]+1||y<1||y>ay[0]+1)return; //\u5982\u679c\u8d8a\u754c\u6216\u8005\u5728\u4e4b\u524d\u7684\u8def\u7ebf\u4e2d\u6216\u8005\u5df2\u7ecf\u66f4\u65b0\u4e86\u5c31\u8fd4\u56de \n\tvis[x][y]=2;dfs(x-1,y),dfs(x,y-1),dfs(x+1,y),dfs(x,y+1); //\u56db\u4e2a\u65b9\u5411 \n}\nsigned main(){\n\tscanf(\"%lld\",&n);\n\t// \u63d2\u5165 x \u7684\u65f6\u5019\u628a x-1 \uff0cx \uff0cx+1 \u90fd\u63d2\u8fdb\u53bb \n\tax[++ax[0]]=-1,ax[++ax[0]]=0,ax[++ax[0]]=1;\n\tay[++ay[0]]=-1,ay[++ay[0]]=0,ay[++ay[0]]=1;//\u63d2\u5165\u8d77\u70b9 \uff080,0\uff09 \n\tfor(int i=1;i<=n;i++){\n\t\tchar op[5];int x;\n\t\tscanf(\"%s\",op);scanf(\"%lld\",&x);\n\t\tif(op[0]=='R')ny+=x;\n\t\tif(op[0]=='U')nx+=x;\n\t\tif(op[0]=='L')ny-=x;\n\t\tif(op[0]=='D')nx-=x;\n\t\tpx[i]=nx,py[i]=ny;\n\t\tax[++ax[0]]=nx-1,ax[++ax[0]]=nx,ax[++ax[0]]=nx+1;\n\t\tay[++ay[0]]=ny-1,ay[++ay[0]]=ny,ay[++ay[0]]=ny+1;\n\t}\n\tsort(ax+1,ax+ax[0]+1);sort(ay+1,ay+ay[0]+1); \n\tax[0]=unique(ax+1,ax+ax[0]+1)-(ax+1);ay[0]=unique(ay+1,ay+ay[0]+1)-(ay+1);//\u5229\u7528STL unique \u79bb\u6563\u5316 \uff0c\u8fd4\u56de\u7684\u662f\u65b0\u7684\u5927\u5c0f \n\tfor(int i=1;i<=n;i++){\n\t\tint p1=find_x(px[i-1]),q1=find_y(py[i-1]),p2=find_x(px[i]),q2=find_y(py[i]);\n\t\tif(p1==p2) for(int j=min(q1,q2);j<=max(q1,q2);j++)vis[p1][j]=1;\n\t\tif(q1==q2) for(int j=min(p1,p2);j<=max(p1,p2);j++)vis[j][q1]=1; //\u6807\u8bb0\u8d70\u8fc7\u7684\u70b9 (\u5728 dfs \u4e2d\u4e0d\u8d70\uff09 \n\t}\n\tdfs(1,1);\n\tfor(int i=1;i<=ax[0];i++){\n\t\tfor(int j=1;j<=ay[0];j++)\n\t\t\tif(vis[i][j]!=2)ans+=(ax[i]-ax[i-1])*(ay[j]-ay[j-1]);\n\t}// \u6700\u540e\u7edf\u8ba1\u7b54\u6848\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\uff0cO\uff08n^2\uff09 \n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1614172632,
        "uid": 128269,
        "name": "\u5b57\u5982\u5176\u4eba",
        "ccfLevel": 7,
        "title": "CF243C\u9898\u89e3"
    },
    {
        "content": "\u56e0\u4e3a\u8fd9\u7247\u571f\u5730\u7684\u5927\u5c0f\u662f$10^{10}+1$\u7684\uff0c\u8f93\u5165\u6570\u636e\u6700\u5927\u53ea\u6709$10^3\\times 10^6 = 10^9$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u571f\u5730\u770b\u505a\u662f\u65e0\u9650\u5927\u7684\u3002\n\n\u7136\u540e\u9898\u76ee\u8981\u6c42\u7684\u662f\u7ebf\u6bb5\u56f4\u6210\u7684\u5c01\u95ed\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u641c\u7d22\u3002\u53ef\u662f\uff0c\u8303\u56f4\u9ad8\u8fbe$10^{20}$\uff0c\u4e0d\u80fd\u641c\u7d22\u3002\u56e0\u4e3a\u9898\u76ee\u4e2d\u53ea\u6709$10^3$\u6761\u7ebf\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c06\u5176\u79bb\u6563\u5316\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u6109\u5feb\u7684\u5728$2000\\times 2000$\u7684\u8303\u56f4\u5185\u8fdb\u884c`BFS`\u67d3\u8272\u4e86\uff0c\u5e76\u4e14\u7a7a\u95f4\u4e5f\u53ef\u4ee5\u63a5\u53d7\u3002\u6211\u4eec\u4ece$(0,0)$\uff08\u8fd9\u4e2a\u662f\u53d6\u4e0d\u5230\u7684\u70b9\uff09\u5f00\u59cb\u67d3\u8272\uff0c\u6ca1\u6709\u88ab\u67d3\u8272\u7684\u90e8\u5206\u5c31\u662f\u5c01\u95ed\u7684\u3002\n\n\u5728\u5b9e\u73b0\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6700\u5916\u9762\u52a0\u4e0a\u56db\u6761\u201c\u8fb9\u6846\u201d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u641c\u7d22\u4e86\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<map>\n#include<vector>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int MAXN=2010;\nconst ll INF=1ll<<47;\nconst ll way[4][2]={{0,1},{0,-1},{1,0},{-1,0}};  \n\nstruct rect{\n    ll p1,q1,p2,q2;\n}rec[MAXN];\n\nint n,tot=0;\nint vis[MAXN][MAXN];\nint lst[2],now[2];\nmap<ll,int>xpos,ypos;\nvector<ll>x,y;\nqueue<pair<ll,ll> >q;\n\ninline int max(int x,int y){\n    return x>y?x:y;\n}\ninline int min(int x,int y){\n    return x<y?x:y;\n}\n\nvoid adde(int ord){\n    char opt[3];int val;\n    scanf(\"%s%d\",opt,&val);\n    switch(opt[0]){\n        case 'U':{\n            now[0]=lst[0]-val;\n            now[1]=lst[1];\n            break;\n        }\n        case 'D':{\n            now[0]=lst[0]+val;\n            now[1]=lst[1];\n            break;\n        }\n        case 'L':{\n            now[0]=lst[0];\n            now[1]=lst[1]-val;\n            break;\n        }\n        case 'R':{\n            now[0]=lst[0];\n            now[1]=lst[1]+val;\n            break;\n        }\n        default:{\n            puts(\"Error\");\n            return;\n        }\n    }\n    x.push_back(min(lst[0],now[0]));x.push_back(max(lst[0],now[0])+1);\n    y.push_back(min(lst[1],now[1]));y.push_back(max(lst[1],now[1])+1);\n    rec[ord]=(rect){min(lst[0],now[0]),min(lst[1],now[1]),max(lst[0],now[0])+1,max(lst[1],now[1])+1};\n    lst[0]=now[0];lst[1]=now[1];\n}\n\nint match(vector<ll>v,ll num){  \n    return find(v.begin(),v.end(),num)-v.begin();  \n}  \n\nint main(){\n    x.push_back(-INF);x.push_back(INF);\n    y.push_back(-INF);y.push_back(INF);\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++)\n        adde(i);\n    sort(x.begin(),x.end());sort(y.begin(),y.end());\n    x.resize(unique(x.begin(),x.end())-x.begin());\n    y.resize(unique(y.begin(),y.end())-y.begin());\n    \n    for(int i=0;i<n;i++){  \n        lst[0]=match(x,rec[i].p1);now[0]=match(x,rec[i].p2)-1;  \n        lst[1]=match(y,rec[i].q1);now[1]=match(y,rec[i].q2)-1;  \n        for(int j=lst[0];j<=now[0];j++)  \n            for(int k=lst[1];k<=now[1];k++)  \n                vis[j][k]=1;  \n    }  \n    q.push(make_pair(0,0));vis[0][0]=2;\n    while(!q.empty()){\n    \tpair<ll,ll>u,v;\n    \tu=q.front();q.pop();\n    \tfor(int i=0;i<4;i++){\n    \t\tv=u;\n\t\t\tv.first+=way[i][0];v.second+=way[i][1];\n\t\t\tif(v.first>=0&&v.first<x.size()&&v.second>=0&&v.second<y.size()&&vis[v.first][v.second]==0){  \n                vis[v.first][v.second]=2;  \n                q.push(v);  \n            }\n\t\t}\n\t}\n\tll ans=0;  \n    for(int i=0;i<x.size()-1;i++)  \n        for(int j=0;j<y.size()-1;j++)  \n            if(vis[i][j]!=2)  \n                ans+=(x[i+1]-x[i])*(ll)(y[j+1]-y[j]);  \n    printf(\"%lld\\n\",ans);  \n    return 0;\n} \n```",
        "postTime": 1521260021,
        "uid": 23398,
        "name": "frankchenfu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF243C \u3010Colorado Potato Beetle\u3011"
    },
    {
        "content": "# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7531\u4e8e$OIer$\u65e0\u8bba\u662f\u5411\u4e0a\u5411\u4e0b\uff0c\u5411\u5de6\u5411\u53f3\uff0c\u8ddd\u79bb\u90fd\u662f$5\\times 10^9$\uff0c\u800c$OIer$\u6700\u591a\u8d70$\\max\\{X\\}\\times N$\uff0c\u4e5f\u5c31\u662f$10^9$\u6b65\uff0c\u6240\u4ee5$OIer$\u7edd\u5bf9\u8d70\u4e0d\u51fa\u4ed6\u7684\u7530\u5730\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7530\u5730\u5b8c\u5168\u53ef\u4ee5\u88ab\u8ba4\u4f5c\u662f\u65e0\u7a77\u5927\u7684\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7531\u4e8e\u5f88\u96be\u5bf9\u539f\u95ee\u9898\u76f4\u63a5\u6c42\u89e3\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u6c42\u4f1a\u88ab\u7532\u866b\u5165\u4fb5\u7684\u7530\u5730\uff0c\u7136\u540e\u518d\u7528\u603b\u7530\u5730\u6570\u91cf\u51cf\u53bb\u4f1a\u88ab\u5165\u4fb5\u7684\u7530\u5730\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4f46\u662f\uff0c\u88ab\u5165\u4fb5\u7684\u7530\u5730\u4e5f\u5f88\u96be\u6c42\u5f97\u3002\u4e0d\u8fc7\uff0c\u5047\u5982\u6211\u4eec\u5bf9\u539f\u56fe\u7684\u5750\u6807\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u90a3\u4e48\u70b9\u7684\u6570\u91cf\u5c31\u4f1a\u53d8\u6210$O(N^2)$\u7ea7\u522b\u7684\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8fd9\u4e2a\u65f6\u5019\u518d\u7528$BFS$\u6c42\u51fa\u4f1a\u88ab\u4f1a\u88ab\u5165\u4fb5\u7684\u9762\u79ef\uff0c\u4ece\u8d70\u8fc7\u7684\u957f\u5bbd\u56f4\u6210\u7684\u957f\u65b9\u5f62\u9762\u79ef\u4e2d\u51cf\u53bb\u8fd9\u4e2a\u9762\u79ef\u5c31\u662f\u7b54\u6848\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5bf9\u4e8e\u70b9\u7684\u79bb\u6563\uff0c\u6211\u628a\u6bcf\u4e2a\u7ebf\u6bb5\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u90fd\u4f1a\u52a0\u5165\u79bb\u6563\u7ed3\u679c\u3002\u7136\u540e\uff0c\u540c\u4e00\u5750\u6807\u8f74\u4e0a\u975e\u7d27\u9760\u7684\u76f8\u90bb\u4e24\u70b9\u4e2d\u95f4\u90fd\u4f1a\u6709\u4e00\u6bb5\u7a7a\u7f3a\uff0c\u8fd9\u6bb5\u7a7a\u7f3a\u4e5f\u4f1a\u88ab\u52a0\u5165\u5230\u79bb\u6563\u540e\u7684\u7ed3\u679c\u540e\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5982\u679c\u4e0d\u52a0\u5165\u8fd9\u6bb5\u7a7a\u7f3a\uff0c\u90a3\u4e48\u5c31\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u539f\u6765\u4e24\u70b9\u4e0d\u76f8\u90bb\uff0c\u4f46\u662f\u5728\u79bb\u6563\u5316\u4e4b\u540e\u5c31\u76f8\u90bb\u4e86\u7684\u60c5\u51b5\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6587\u5b57\u63cf\u8ff0\u6bd4\u8f83\u96be\u61c2\u3002\u5f85\u4f1a\u770b\u4ee3\u7801\u3002 \n# \u4ee3\u7801\n```cpp\n#include <queue>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long LL;\n\nconst int MAXN = 1005;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s < '0' || '9' < s ){ if( s == '-' ) f = -1; s = getchar(); }\n\twhile( '0' <= s && s <= '9' ){ x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar(); }\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ x = -x, putchar( '-' ); }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\nstruct node\n{\n\tlong long pos;\n\tint indx, type;\n\tnode(){}\n\tnode( const long long Pos, const int Indx, const int t )\n\t{\n\t\tpos = Pos, indx = Indx;\n\t\ttype = t;\n\t}\n\tbool operator < ( const node & other ) const\n\t{\n\t\treturn pos < other.pos;\n\t}\n}XPoints[2 * MAXN], YPoints[2 * MAXN];\n\nstruct seg\n{\n\tint sx, sy, ex, ey;\n\tseg(){}\n\tseg( const int Sx, const int Sy, const int Ex, const int Ey )\n\t{\n\t\tsx = Sx, sy = Sy, ex = Ex, ey = Ey;\n\t}\n}segment[MAXN];\n\nstruct BFSNode\n{\n\tint x, y;\n\tBFSNode(){}\n\tBFSNode( const int X, const int Y )\n\t{\n\t\tx = X, y = Y;\n\t}\n};\n\nqueue<BFSNode> q;\n\nint dir[4][2] = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };\nint lenX[3 * MAXN], lenY[3 * MAXN];\nint N;\nbool mp[3 * MAXN][3 * MAXN];\n\nint main()\n{\n\tchar op[5];\n\tlong long x = 0, y = 0;\n\tlong long minY = 0, maxY = 0, minX = 0, maxX = 0;\n\tlong long mov;\n\tint cnt1 = 0, cnt2 = 0;\n\tread( N );\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t{\n\t\tscanf( \"%s\", op );\n\t\tread( mov );\n\t\tswitch( op[0] )\n\t\t{\n\t\t\tcase 'L':\n\t\t\t{\n\t\t\t\tXPoints[++ cnt1] = node( x, i, 1 );\n\t\t\t\tYPoints[++ cnt2] = node( y, i, 2 );\n\t\t\t\tx -= mov;\n\t\t\t\tXPoints[++ cnt1] = node( x, i, 3 );\n\t\t\t\tYPoints[++ cnt2] = node( y, i, 4 );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'R':\n\t\t\t{\n\t\t\t\tXPoints[++ cnt1] = node( x, i, 1 );\n\t\t\t\tYPoints[++ cnt2] = node( y, i, 2 );\n\t\t\t\tx += mov;\n\t\t\t\tXPoints[++ cnt1] = node( x, i, 3 );\n\t\t\t\tYPoints[++ cnt2] = node( y, i, 4 );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'U':\n\t\t\t{\n\t\t\t\tXPoints[++ cnt1] = node( x, i, 1 );\n\t\t\t\tYPoints[++ cnt2] = node( y, i, 2 );\n\t\t\t\ty -= mov;\n\t\t\t\tXPoints[++ cnt1] = node( x, i, 3 );\n\t\t\t\tYPoints[++ cnt2] = node( y, i, 4 );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'D':\n\t\t\t{\n\t\t\t\tXPoints[++ cnt1] = node( x, i, 1 );\n\t\t\t\tYPoints[++ cnt2] = node( y, i, 2 );\n\t\t\t\ty += mov;\n\t\t\t\tXPoints[++ cnt1] = node( x, i, 3 );\n\t\t\t\tYPoints[++ cnt2] = node( y, i, 4 );\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tminX = MIN( x, minX );\n\t\tmaxX = MAX( x, maxX );\n\t\tminY = MIN( y, minY );\n\t\tmaxY = MAX( y, maxY );\n\t}\n\tif( ! N )\n\t{\n\t\twrite( 1 ), putchar( '\\n' );\n\t\treturn 0;\n\t}\n\tsort( XPoints + 1, XPoints + 1 + cnt1 );\n\tsort( YPoints + 1, YPoints + 1 + cnt2 );\n\tint cntX = 0;\n\tXPoints[0].pos = -2147483648ll;\n\tYPoints[0].pos = -2147483648ll;\n\tfor( int i = 1 ; i <= cnt1 ; i ++ )\n\t{\n\t\tif( XPoints[i].pos ^ XPoints[i - 1].pos )\n\t\t{\n\t\t\tcntX ++;\n\t\t\tlenX[cntX] = XPoints[i].pos - ( i - 1 ? XPoints[i - 1].pos : XPoints[i].pos - 1 ) - 1;\n\t\t\tif( ! lenX[cntX] ) cntX --;\n\t\t\tcntX ++;\n\t\t\tlenX[cntX] = 1;\n\t\t}\n\t\tswitch( XPoints[i].type )\n\t\t{\n\t\t\tcase 1:\n\t\t\t{\n\t\t\t\tsegment[XPoints[i].indx].sx = cntX;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3:\n\t\t\t{\n\t\t\t\tsegment[XPoints[i].indx].ex = cntX;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tint cntY = 0;\n\tfor( int i = 1 ; i <= cnt1 ; i ++ )\n\t{\n\t\tif( YPoints[i].pos ^ YPoints[i - 1].pos )\n\t\t{\n\t\t\tcntY ++;\n\t\t\tlenY[cntY] = YPoints[i].pos - ( i - 1 ? YPoints[i - 1].pos : YPoints[i].pos - 1 ) - 1;\n\t\t\tif( ! lenY[cntY] ) cntY --;\n\t\t\tcntY ++;\n\t\t\tlenY[cntY] = 1;\n\t\t}\n\t\tswitch( YPoints[i].type )\n\t\t{\n\t\t\tcase 2:\n\t\t\t{\n\t\t\t\tsegment[YPoints[i].indx].sy = cntY;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4:\n\t\t\t{\n\t\t\t\tsegment[YPoints[i].indx].ey = cntY;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t{\n\t\tif( segment[i].sx == segment[i].ex )\n\t\t{\n\t\t\tfor( int j = MIN( segment[i].sy, segment[i].ey ) ; j <= MAX( segment[i].sy, segment[i].ey ) ; j ++ )\n\t\t\t{\n\t\t\t\tmp[j][segment[i].ex] = true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor( int j = MIN( segment[i].sx, segment[i].ex ) ; j <= MAX( segment[i].sx, segment[i].ex ) ; j ++ )\n\t\t\t{\n\t\t\t\tmp[segment[i].ey][j] = true;\n\t\t\t}\n\t\t}\n\t}\n\tfor( int i = 1 ; i <= cntX ; i ++ )\n\t{\n\t\tif( ! mp[1][i] )\n\t\t{\n\t\t\tq.push( BFSNode( 1, i ) );\n\t\t\tmp[1][i] = true;\n\t\t}\n\t\tif( ! mp[cntY][i] )\n\t\t{\n\t\t\tq.push( BFSNode( cntY, i ) );\n\t\t\tmp[cntY][i] = true;\n\t\t}\n\t}\n\tfor( int i = 1 ; i <= cntY ; i ++ )\n\t{\n\t\tif( ! mp[i][1] )\n\t\t{\n\t\t\tq.push( BFSNode( i, 1 ) );\n\t\t\tmp[i][1] = true;\n\t\t}\n\t\tif( ! mp[i][cntX] )\n\t\t{\n\t\t\tq.push( BFSNode( i, cntX ) );\n\t\t\tmp[i][cntX] = true;\n\t\t}\n\t}\n\tBFSNode h;\n\tLL tot = 0;\n\tint tx, ty;\n\twhile( ! q.empty() )\n\t{\n\t\th = q.front();\n\t\tq.pop();\n\t\ttot += 1ll * lenY[h.x] * lenX[h.y];\n\t\tfor( int i = 0 ; i < 4 ; i ++ )\n\t\t{\n\t\t\ttx = h.x + dir[i][0], ty = h.y + dir[i][1];\n\t\t\tif( 1 <= tx && tx <= cntY && 1 <= ty && ty <= cntX && ! mp[tx][ty] )\n\t\t\t{\n\t\t\t\tmp[tx][ty] = true;\n\t\t\t\tq.push( BFSNode( tx, ty ) );\n\t\t\t}\n\t\t}\n\t}\n\twrite( 1ll * ( maxX - minX + 1 ) * ( maxY - minY + 1 ) - tot ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1563179488,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[CF243C]Colorado Potato Beetle"
    }
]