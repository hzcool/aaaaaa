[
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n- \u6570\u8f74\u4e0a\u6709 $n$ \u4e2a\u5854\uff0c\u7b2c $i$ \u4e2a\u5854\u80fd\u91cf\u4e0a\u9650 $c_i$\uff0c\u6bcf\u79d2\u56de\u590d $r_i$ \u70b9\u80fd\u91cf\uff0c\u521d\u59cb\u6240\u6709\u5854\u80fd\u91cf\u5168\u662f\u6ee1\u7684\u3002\n- \u540c\u65f6\u6709 $m$ \u4e2a\u602a\uff0c\u7b2c $i$ \u4e2a\u4f1a\u5728 $t_i$ \u79d2\u5237\u51fa\uff0c\u8840\u91cf $h_i$\u3002\u7b2c $i$ \u4e2a\u602a\u4f1a\u5728\u7b2c $t_i+j-1$ \u79d2\u88ab\u7b2c $j$ \u4e2a\u5854\u653b\u51fb\u3002\u653b\u51fb\u65f6\uff0c\u5854\u7684\u80fd\u91cf\u548c\u602a\u7684\u8840\u91cf\u540c\u65f6\u51cf\u53bb\u4e24\u8005\u4e2d\u7684\u8f83\u5c0f\u503c\u3002\n- \u8f93\u51fa\u6240\u6709\u602a\u5168\u90fd\u8d70\u8fc7\u4e00\u904d\u540e\u6240\u6709\u602a\u8840\u91cf\u4e4b\u548c\u3002\n\n## \u7b80\u8981\u505a\u6cd5\n\n- \u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a $a_i \\gets \\min (a_i + T b_i,c_i)$ \u7684\u5f62\u5f0f\u548c CF453E \u6709\u70b9\u50cf\u554a\uff1f\n\n\u8003\u8651\u5bf9\u5854\u5206\u5757\u3002\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u602a\u7ecf\u8fc7\u4e00\u5757\u5185\u7684\u5854\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. \u5757\u5185\u6240\u6709\u5854\u628a\u602a\u6253\u4e00\u904d\u540e\u602a\u8fd8\u6709\u8840\uff0c\u8fd9\u65f6\u76f8\u5f53\u4e8e\u5757\u5185\u5854\u7684\u80fd\u91cf\u88ab\u6e05\u96f6\u4e86\u3002\n2. \u602a\u88ab\u5176\u4e2d\u4e00\u4e2a\u5854\u6253\u6210\u8840\u91cf\u4e3a\u96f6\uff0c\u6b64\u65f6\u8fd9\u4e2a\u602a\u5c31\u4e0d\u4f1a\u5bf9\u540e\u9762\u7684\u5757\u9020\u6210\u8d21\u732e\u4e86\u3002\u5904\u7406\u540e\u9762\u7684\u5757\u7684\u65f6\u5019\u76f4\u63a5\u628a\u8fd9\u4e2a\u602a continue \u6389\u5373\u53ef\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u7531\u4e8e\u4e00\u4e2a\u602a\u6700\u591a\u53ea\u4f1a\u88ab\u6253\u6210\u7a7a\u8840\u4e00\u6b21\uff0c\u6240\u4ee5\u7b2c\u4e8c\u79cd\u60c5\u51b5\u6700\u591a\u53ea\u4f1a\u51fa\u73b0 $O(m)$ \u6b21\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u5757\u7ef4\u62a4\u4e00\u4e2a\u63a8\u5e73 tag \u548c\u8fd9\u4e2a\u5757\u4e0a\u6b21\u88ab\u64cd\u4f5c\u7684\u65f6\u95f4\u6233\u3002\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u5757\u88ab\u6e05\u96f6\u540e $k$ \u79d2\u6765\u4e86\u4e00\u4e2a\u602a\u65f6\u80fd\u5bf9\u602a\u6253\u51fa\u591a\u5c11\u4f24\u5bb3\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u602a\u4f9d\u6b21\u5904\u7406\u6bcf\u4e2a\u5757\uff1a\n\n- \u82e5\u8fd9\u4e2a\u602a\u80fd\u88ab\u5757\u5185\u7684\u5854\u6253\u6210\u7a7a\u8840\uff0c\u76f4\u63a5\u66b4\u529b\u505a\uff0c\u7136\u540e\u64a4\u9500\u5757\u5185\u7684\u63a8\u5e73\u6807\u8bb0\u3002\n- \u5426\u5219\uff0c\u82e5\u5757\u5185\u6ca1\u6709\u63a8\u5e73\u6807\u8bb0\uff0c\u540c\u6837\u66b4\u529b\u505a\uff0c\u7136\u540e\u6253\u4e0a\u4e00\u4e2a\u63a8\u5e73\u6807\u8bb0\u3002\n- \u5426\u5219\uff0c\u76f4\u63a5\u628a\u602a\u7684\u8840\u91cf\u51cf\u53bb\u9884\u5904\u7406\u51fa\u6765\u7684\u503c\uff0c\u63a8\u5e73\u6807\u8bb0\u4fdd\u6301\u4e0d\u53d8\u3002\n\n\u9884\u5904\u7406\u7684\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003\u6211\u7684[\u8fd9\u7bc7\u9898\u89e3](/blog/yzy1/solution-cf453e)\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u9053\u9898\u7684 $n \\le 2\\times 10^5$\uff0c\u800c\u6211\u4eec\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n\\sqrt n)$\uff0c\u6211\u4eec\u6839\u672c\u5f00\u4e0d\u4e0b\u8fd9\u4e48\u5927\u7684\u6570\u7ec4\uff01\n\n\u8003\u8651\u628a\u6240\u6709\u8be2\u95ee\u79bb\u7ebf\uff0c\u7136\u540e\u4e00\u5757\u4e00\u5757\u7684\u505a\uff0c\u6bcf\u5757\u7edf\u4e00\u5904\u7406\u6240\u6709\u7684\u602a\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u53ea\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u7684\u5757\u7684\u9884\u5904\u7406\u503c\u548c\u6807\u8bb0\u5373\u53ef\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\u964d\u4e3a $O(n)$\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u4ee5 $O(n\\sqrt n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c$O(n)$ \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u4e86\u6b64\u9898\u3002\n\n[\u4ee3\u7801\u53c2\u8003](https://codeforces.com/contest/1651/submission/149206879)",
        "postTime": 1646971113,
        "uid": 207996,
        "name": "yzy1",
        "ccfLevel": 9,
        "title": "CF1651F \u9898\u89e3"
    },
    {
        "content": "\u5bb9\u6613\u53d1\u73b0\u6bcf\u4e2a\u602a\u7269\u4e00\u5b9a\u662f\u8ba9\u4e00\u6bb5\u524d\u7f00\u7684\u70ae\u5854\u5f39\u836f\u53d8\u4e3a $0$\uff0c\u8ba9\u4e0b\u4e00\u4e2a\u70ae\u5854\u7684\u5f39\u836f\u51cf\u5c11\u5230\u67d0\u4e2a\u503c\uff0c\u5176\u4f59\u70ae\u5854\u5f39\u836f\u4e0d\u53d8\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u602a\u7269\u53ea\u4f1a\u8ba9\u70ae\u5854\u589e\u52a0\u5e38\u6570\u6bb5\u3002\u8fd9\u91cc\u7684\u201c\u6bb5\u201d\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f $[l,r]$ \u5185\u7684\u70ae\u5854\u5728\u67d0\u4e00\u4e2a\u602a\u7269\u7ecf\u8fc7\u540e\u5f39\u836f\u5168\u90e8\u53d8\u4e3a $0$\uff0c\u53e6\u4e00\u79cd\u662f $l=r$ \u5e76\u4e14\u70ae\u5854 $l$ \u5728\u67d0\u4e00\u4e2a\u602a\u7269\u7ecf\u8fc7\u540e\u5f39\u836f\u53d8\u4e3a\u67d0\u4e2a\u503c\u3002\n\n\u4ece\u524d\u5230\u540e\u679a\u4e3e\u602a\u7269\u3002\u8003\u8651\u7528\u4e00\u4e2a\u6808\u5b58\u4e0b\u6bcf\u4e00\u6bb5\u7684\u7aef\u70b9\u548c\u5bf9\u5e94\u7684\u602a\u7269\u3002\u65b0\u589e\u4e00\u4e2a\u602a\u7269\u65f6\uff0c\u53ea\u9700\u8981\u4ece\u524d\u5230\u540e\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u6bb5\uff0c\u5224\u65ad\u602a\u7269\u662f\u5426\u4f1a\u5728\u8fd9\u4e00\u6bb5\u6b7b\u4ea1\u3002\u5982\u679c\u662f\uff0c\u90a3\u4e48\u4e8c\u5206\u6b7b\u4ea1\u7684\u4f4d\u7f6e\uff1b\u5426\u5219\u7ee7\u7eed\u8003\u8651\u4e0b\u4e00\u6bb5\u3002\u7136\u540e\u5c06\u679a\u4e3e\u7684\u8fd9\u4e9b\u6bb5\u5408\u5e76\u6210\u4e00\u6bb5\u3002\u56e0\u4e3a\u6bcf\u6b21\u53ea\u4f1a\u589e\u52a0\u5e38\u6570\u6bb5\uff0c\u6240\u4ee5\u603b\u6bb5\u6570\u662f $n+q$ \u7ea7\u522b\u7684\uff0c\u590d\u6742\u5ea6\u5747\u644a\u4e0b\u6765\u5c31\u662f\u5bf9\u7684\u3002\n\n$l=r$ \u7684\u90e8\u5206\u5f88\u597d\u5904\u7406\u3002\u8003\u8651 $l<r$ \u7684\u90e8\u5206\u3002\u9700\u8981\u652f\u6301\uff1a\u7ed9\u5b9a $x$\uff08\u5373\u5f53\u524d\u602a\u7269\u548c\u8fd9\u4e00\u6bb5\u5bf9\u5e94\u602a\u7269\u7684\u51fa\u751f\u65f6\u95f4\u7684\u5dee\uff09\uff0c\u7ed9\u5b9a $l$\uff08\u5373\u8fd9\u4e00\u6bb5\u7684\u5de6\u7aef\u70b9\uff09\uff0c\u7ed9\u5b9a $w$\uff08\u5269\u4f59\u8840\u91cf\uff09\uff0c\u6c42\u4e00\u4e2a\u6700\u5927\u7684\u4f4d\u7f6e $p$\uff0c\u6ee1\u8db3 $sum=\\sum_{l\\leq i\\leq p}\\min(c_i,r_ix),sum\\leq w$\uff0c\u5e76\u6c42\u51fa $sum$ \u7684\u503c\u3002\n\n\u53d1\u73b0\u8f6c\u5316\u540e\u7684\u95ee\u9898\u548c[CF837G Functions On The Segments](https://www.luogu.com.cn/problem/CF837G)\u5dee\u4e0d\u591a\uff0c\u8003\u8651\u7528\u540c\u6837\u7684\u505a\u6cd5\u3002\u9996\u5148 $\\min(c_i,r_ix)$ \u53ef\u4ee5\u89c6\u4e3a\u5206\u6bb5\u4e00\u6b21\u51fd\u6570\uff0c$x\\leq \\lfloor c_i/r_i\\rfloor$ \u7684\u65f6\u5019\u662f $r_ix+0$\uff0c$x>\\lfloor c_i/r_i\\rfloor$ \u7684\u65f6\u5019\u662f $0x+c_i$\u3002\u6ce8\u610f\u5230 $\\max x\\leq 2\\times 10^5$\uff0c\u8003\u8651\u5efa $\\max x$ \u68f5\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u4ee5\u70ae\u5854\u7f16\u53f7\u4e3a\u4e0b\u6807\u7ef4\u62a4\u4e00\u6b21\u9879\u548c\u5e38\u6570\u9879\u7684\u533a\u95f4\u548c\uff0c\u6bcf\u4e2a\u70ae\u5854\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e0a\u7684\u81f3\u591a\u4e24\u6b21\u5355\u70b9\u4fee\u6539\u3002\n\n\u6c42\u4f4d\u7f6e $p$ \u53ef\u4ee5\u4e8c\u5206\uff0c\u5bb9\u6613\u53d1\u73b0\u53ef\u4ee5\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff0c\u8fd9\u6837\u5355\u6b21\u590d\u6742\u5ea6\u5c31\u662f $\\log n$\u3002\u603b\u590d\u6742\u5ea6 $O((n+q)\\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\nenum{N=200009};\nstruct T{\n\tint l,r;\n\tll a,b;\n}s[N*24];\nint c[N],r[N],rt[N],id,u,v,x,st[N],tim[N],nc[N],p;\nll now,h,ans;\nbasic_string<int>bs[N];\nvoid bd(int&k,int l,int r){//\u5efa\u6811\n\tif(k=++id,l==r){s[k].a=::r[l];return;}\n\tint m=l+r>>1;\n\tbd(s[k].l,l,m),bd(s[k].r,m+1,r),s[k].a=s[s[k].l].a+s[s[k].r].a;\n}\nvoid upd(int&k,int l,int r){//\u5355\u70b9\u4fee\u6539\n\tif(s[++id]=s[k],k=id,l==r){s[k].a=0,s[k].b=c[l];return;}\n\tint m=l+r>>1;\n\tu>m?upd(s[k].r,m+1,r):upd(s[k].l,l,m),s[k].a=s[s[k].l].a+s[s[k].r].a,s[k].b=s[s[k].l].b+s[s[k].r].b;\n}\nvoid qry(int k,int l,int r){//\u533a\u95f4\u548c\n\tif(u<=l&&r<=v){now+=s[k].a*x+s[k].b;return;}\n\tint m=l+r>>1;\n\tif(u<=m)qry(s[k].l,l,m);\n\tif(m<v)qry(s[k].r,m+1,r);\n}\nvoid erf(int k,int l,int r){//\u4e8c\u5206\n\tll w=s[k].a*x+s[k].b;\n\tint m=l+r>>1;\n\tif(l>=u){\n\t\tif(now+w<=h)now+=w,p=r;\n\t\telse if(l<r){\n\t\t\tif(w=s[s[k].l].a*x+s[s[k].l].b,now+w<=h)now+=w,p=m,erf(s[k].r,m+1,r);else erf(s[k].l,l,m);\n\t\t}\n\t}else if(m<u)erf(s[k].r,m+1,r);else if(erf(s[k].l,l,m),p==m)erf(s[k].r,m+1,r);\n}\nint main(){ios::sync_with_stdio(0),cin.tie(0);\n\tint n,m,i,j,t,o=0;\n\tfor(cin>>n,i=1;i<=n;++i)if(cin>>c[i]>>r[i],j=c[i]/r[i]+1,j<N)bs[j]+=i;\n\tfor(bd(rt[0],1,n),i=1;i<N;++i){\n\t\trt[i]=rt[i-1];\n\t\tfor(int o:bs[i])u=o,upd(rt[i],1,n);\n\t}\n\tfor(st[0]=n+1,i=n;i;--i)st[++o]=i,nc[o]=c[i];\n\tfor(cin>>m;m--;){\n\t\tcin>>t>>h;\n\t\twhile(o){\n\t\t\tif(st[o-1]-(i=st[o])==1){//l=r\u7684\u6bb5\n\t\t\t\tj=min((ll)c[i],r[i]*1ll*(t-tim[o])+nc[o]);\n\t\t\t\tif(j>h){\n\t\t\t\t\tnc[o]=j-h,tim[o]=t;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\th-=j,--o;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tx=t-tim[o],u=i,v=st[o-1]-1;//l<r\u7684\u6bb5\n\t\t\tnow=0,qry(rt[x],1,n);\n\t\t\tif(now>h){\n\t\t\t\tnow=0,p=u-1,erf(rt[x],1,n),++p;\n\t\t\t\tif(p==v)--o;else st[o]=p+1;\n\t\t\t\tst[++o]=p,j=min((ll)c[p],r[p]*1ll*x),h-=now,j-=h,nc[o]=j,tim[o]=t;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\th-=now,--o;\n\t\t}\n\t\tif(!o)ans+=h;\n\t\tif(st[o]!=1)st[++o]=1,tim[o]=t,nc[o]=0;\n\t}\n\tcout<<ans;\n}\n```",
        "postTime": 1646963992,
        "uid": 221955,
        "name": "panyf",
        "ccfLevel": 10,
        "title": "CF1651F Tower Defense\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff09"
    },
    {
        "content": "\u81ea\u5df1\u82b1\u4e86\u8fd1\u4e24\u4e2a\u5c0f\u65f6\u72ec\u7acb\u60f3\u5230\u4e86\u8fd9\u9898\u7684\u5b8c\u6574\u89e3\u6cd5\uff0c\u5f88\u6709\u6210\u5c31\u611f\u3002\n\n------------\n\n\u628a\u4e00\u4e2a\u8fde\u7eed\u7684\uff0c\u7ecf\u8fc7 $n$ \u5ea7\u5854\u7684\u8fc7\u7a0b\uff0c\u89c6\u4f5c\u975e\u8fde\u7eed\u7684\uff0c\u6bcf\u5ea7\u5854\u72ec\u7acb\u7684\u8fc7\u7a0b\u3002\u6bd4\u5982\u8bf4\u5982\u679c\u65f6\u523b $1$ \u52a0\u5165\u4e86\u4e00\u53ea\u602a\u7269\uff0c\u65f6\u523b $10$ \u52a0\u5165\u4e86\u7b2c\u4e8c\u53ea\u3002\u5f53\u602a\u7269 $1$ \u4ece\u5854 $1$ \u8d70\u5230\u5854 $2$ \u7684\u65f6\u5019\uff0c\u5854 $1$ \u4e0d\u4f1a\u56de\u590d\u6cd5\u529b\u503c\uff0c\u800c\u662f\u7b49\u5230\u602a\u7269 $2$ \u5230\u8fbe\u5854 $1$ \u7684\u65f6\u5019\uff0c\u4e00\u53e3\u6c14\u56de\u590d $9$ \u79d2\u6cd5\u529b\u503c\u3002\n\n\u6362\u8a00\u4e4b\uff0c\u5728\u653b\u51fb\u5b8c\u5f53\u524d\u602a\u7269\u540e\uff0c\u6240\u6709\u7684\u5854\u5e76\u4e0d\u56de\u590d\u6cd5\u529b\u503c\u3002\u8bbe\u4e0b\u4e00\u53ea\u602a\u7269 $t$ \u79d2\u540e\u51fa\u73b0\uff0c\u90a3\u4e48\u5904\u7406\u4e0b\u4e00\u53ea\u602a\u7269\u4e4b\u524d\uff0c\u8ba9\u6240\u6709\u7684\u5854\u56de\u590d $t$ \u79d2\u7684\u6cd5\u529b\u503c\u5373\u53ef\u3002\n\n\u5982\u679c\u602a\u7269\u6ca1\u6709\u6b7b\uff0c\u90a3\u4e48\u8bf4\u5b83\u6b7b\u5728\u7b2c $n+1$ \u5ea7\u5854\u3002\u5982\u679c\u602a\u7269\u6b7b\u5728\u7b2c $i$ \u5ea7\u5854\uff0c\u90a3\u4e48\u653b\u51fb\u5b8c\u6bd5\u540e\uff0c\u5854 $1\\sim i-1$ \u7684\u5269\u4f59\u6cd5\u529b\u503c\u90fd\u4e3a $0$\uff0c\u5854 $i$ \u7684\u6cd5\u529b\u503c\u4f1a\u88ab\u6d88\u8017\u6389\u4e00\u90e8\u5206\uff0c\u800c\u5854 $i+1\\sim n$ \u7684\u6cd5\u529b\u503c\u6ca1\u6709\u53d8\u5316\u3002\n\n\u5904\u7406\u4efb\u610f\u602a\u7269\u4e4b\u524d\uff0c\u5854\u53ef\u4ee5\u88ab\u5206\u4e3a\u82e5\u5e72\u4e2a\u5355\u70b9\u548c\u82e5\u5e72\u6761\u7ebf\u6bb5\u3002\u5355\u70b9\u7684\u6cd5\u529b\u503c\u662f\u4efb\u610f\u7684\uff0c\u800c\u4e00\u6761\u7ebf\u6bb5\u91cc\u7684\u6bcf\u5ea7\u5854\u7684\u6cd5\u529b\u503c\u53ef\u4ee5\u89c6\u4f5c\u4ece $0$ \u6cd5\u529b\u503c\u5f00\u59cb\uff0c\u56de\u590d\u4e00\u4e2a\u76f8\u540c\u7684\u79d2\u6570 $t$ \u800c\u5f97\u5230\u3002\n\n\u7ed9\u5b9a\u7ebf\u6bb5 $[l,r]$ \u548c\u4e00\u4e2a\u65f6\u95f4 $t$\uff0c\u4ee3\u8868\u5176\u4e2d\u7684\u6bcf\u5ea7\u5854\uff0c\u521d\u59cb\u6cd5\u529b\u90fd\u4e3a\u7a7a\uff0c\u7136\u540e\u90fd\u56de\u590d\u4e86 $t$ \u79d2\u3002\u80fd\u5426\u5feb\u901f\u6c42\u51fa\u56de\u590d\u7ed3\u675f\u540e\u7684\u6cd5\u529b\u503c\u4e4b\u548c\uff1f\n\n\u5982\u679c\u5854\u6ca1\u6709\u6cd5\u529b\u503c\u4e0a\u9650 $c_i$\uff0c\u90a3\u4e48\u6211\u4eec\u6c42\u51fa\u533a\u95f4\u7684\u6bcf\u79d2\u56de\u590d\u91cf $r_i$ \u4e4b\u548c $s$\u3002$s\\times t$ \u5c31\u662f\u6240\u6c42\u3002\u8003\u8651\u5bf9\u4e8e\u6bcf\u5ea7\u5854\uff0c\u6709\u4e00\u4e2a\u5206\u754c\u65f6\u523b $lim$\uff1a\u5f53 $t\\le lim$ \u7684\u65f6\u5019\uff0c\u5b83\u7684\u8d21\u732e\u662f $t\\times r_i$\uff0c\u5426\u5219\uff0c\u5b83\u7684\u8d21\u732e\u662f $c_i$\u3002\n\n\u8003\u8651\u628a $n$ \u4e2a $lim$ \u79bb\u6563\u5316\uff0c\u7136\u540e\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7ef4\u62a4\u524d\u7f00\u548c\u3002\u8fd9\u6837\u53ef\u4ee5 $O(\\log n)$ \u5730\u5f97\u5230\u7b54\u6848\u3002\n\n\u73b0\u5728\u53ef\u4ee5\u5feb\u901f\u8ba1\u7b97\u7ebf\u6bb5\u7684\u548c\u4e86\uff0c\u800c\u5355\u70b9\u7684\u4fe1\u606f\u4e5f\u662f\u5f88\u597d\u7ef4\u62a4\u7684\u3002\n\n\u4e00\u4e2a\u602a\u7269\u88ab\u653b\u51fb\u7684\u65f6\u5019\uff0c\u662f\u4ece\u6700\u524d\u9762\u7684\u90e8\u5206\u5f00\u59cb\u63a8\u5e73\u7684\uff08\u201c\u63a8\u5e73\u201d\u6307\u6cd5\u529b\u503c\u6e05\u7a7a\u91cd\u65b0\u5f00\u59cb\u56de\u590d\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u6808\u6765\u7ef4\u62a4\u6240\u6709\u7684\u5355\u70b9\u548c\u7ebf\u6bb5\u3002\n\n\u90a3\u4e48\u8003\u8651\u5230\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u602a\u7269\u6700\u540e\u5012\u5728\u4e86\u4e00\u6761\u7ebf\u6bb5\u7684\u67d0\u4e2a\u70b9\u4e0a\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5730\u5904\u7406\u4e86\uff0c\u9700\u8981\u5728\u7ebf\u6bb5\u4e0a\u7528\u4e8c\u5206\u7b97\u51fa\u8fd9\u4e2a\u6b7b\u4ea1\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\uff0c\u5355\u6b21\u5904\u7406\u602a\u7269\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\log^2 n)$ \u7684\u3002\u5f53\u7136\u662f\u53ef\u4ee5\u4f18\u5316\u5230 $O(\\log n)$ \u7684\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u4e8c\u5206\u8fc7\u7a0b\u6539\u6210\u4e3b\u5e2d\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n\u73b0\u5728\u6211\u4eec\u5b8c\u6210\u4e86\u653b\u51fb\u602a\u7269\u7684\u8fc7\u7a0b\uff0c\u4f46\u662f\u653b\u51fb\u5f53\u524d\u602a\u7269\u524d\uff0c\u5168\u5c40\u7684\u6240\u6709\u5854\u90fd\u8981\u56de\u590d\u4e00\u4e2a $t$ \u79d2\uff0c\u8fd9\u4e2a\u600e\u4e48\u7ef4\u62a4\u5462\u3002\n\n\u5bf9\u6bcf\u6761\u7ebf\u6bb5/\u70b9\u8bb0\u5f55\u5b83\u88ab\u52a0\u5165\u7684\u65f6\u523b\uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u65f6\u95f4 $sum$\uff0c\u52a0\u5165\u4e00\u4e2a\u7ebf\u6bb5/\u70b9\u7684\u65f6\u5019\uff0c\u5b83\u7684\u65f6\u523b\u5c31\u662f $sum$\u3002\u800c\u5f53\u6211\u4eec\u60f3\u8ba9\u6240\u6709\u5854\u56de\u590d $t$ \u79d2\u7684\u65f6\u5019\uff0c\u76f4\u63a5 $sum\\leftarrow sum+t$ \u5373\u53ef\u3002\u8fd9\u6837\uff0c\u7528\u5f53\u524d\u7684 $sum$ \u548c\u7ebf\u6bb5/\u70b9\u7684\u52a0\u5165\u65f6\u523b\u4f5c\u5dee\uff0c\u5c31\u53ef\u4ee5\u5f97\u51fa\u8fd9\u4e2a\u90e8\u5206\u5230\u5e95\u56de\u590d\u4e86\u51e0\u79d2\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u4e3b\u5e2d\u6811\u5feb\u901f\u7b97\u7b54\u6848\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u89c6\u5b9e\u73b0\u5728 $O(q\\log n)\\sim O(q\\log^2 n)$ \u5427\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define op(x) ((x&1)?x+1:x-1)\n#define odd(x) (x&1)\n#define even(x) (!odd(x))\n#define lc(x) (x<<1)\n#define rc(x) (lc(x)|1)\n#define lowbit(x) (x&-x)\n#define mp(x,y) make_pair(x,y)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\nusing namespace std;\n#define int ll\nconst ll MAXN=2e5+10,MAXM=MAXN*30,INF=1.5e12;\nint n,q,c[MAXN],r[MAXN],pre;\nint d[MAXN];\nll sum;\nstack<array<ll,4> >st;\nll ans;\nstruct Node{int lc,rc;ll tag;};\nstruct Seg{\n    int rt[MAXN],tot;\n    Node tree[MAXM];\n    ll a[MAXN];\n    void copy(int from,int to){tree[to]=tree[from];}\n    void build(ll* a){rep(i,1,n)(*this).a[i]=a[i];}\n    int update(int x,int l,int r,int ql,int qr,ll val){\n        int p=++tot;copy(x,p);\n        if(ql<=l&&qr>=r){\n            tree[p].tag+=val;\n            return p;\n        }\n        int mid=(l+r)>>1;\n        if(ql<=mid)tree[p].lc=update(tree[p].lc,l,mid,ql,qr,val);\n        if(qr>mid)tree[p].rc=update(tree[p].rc,mid+1,r,ql,qr,val);\n        return p;\n    }\n    ll qry(int x,int l,int r,int pos,ll sum){\n        sum+=tree[x].tag;\n        if(l==r)return sum+a[l];\n        int mid=(l+r)>>1;\n        if(pos<=mid)return qry(tree[x].lc,l,mid,pos,sum);\n        else return qry(tree[x].rc,mid+1,r,pos,sum);\n    }\n}s1,s2;\nbool cmp(int x,int y){return d[x]<d[y];}\nvoid Pre(){\n    static ll sum[MAXN],idx[MAXN];\n    memset(sum,0,sizeof sum);\n    s2.build(sum);\n    rep(i,1,n)sum[i]=sum[i-1]+r[i];\n    s1.build(sum);\n    rep(i,1,n)d[i]=c[i]/r[i]+1,idx[i]=i;\n    sort(idx+1,idx+1+n,cmp);sort(d+1,d+1+n);\n    rep(i,1,n){\n        s1.rt[i]=s1.update(s1.rt[i-1],1,n,idx[i],n,-r[idx[i]]);\n        s2.rt[i]=s2.update(s2.rt[i-1],1,n,idx[i],n,c[idx[i]]);\n    }\n}\nll qry(ll t,int l){\n    if(l==0)return 0;\n    int idx=upper_bound(d+1,d+1+n,t)-d-1;\n    return s2.qry(s2.rt[idx],1,n,l,0)+t*s1.qry(s1.rt[idx],1,n,l,0);\n}\nll qry(ll t,int l,int r){return qry(t,r)-qry(t,l-1);}\nvoid solve(int t,int h){\n    sum+=t;\n    while(st.size()){\n        array<ll,4>tmp=st.top();st.pop();\n        if(tmp[0]==tmp[1]){\n            tmp[2]=min(tmp[2]+(sum-tmp[3])*r[tmp[0]],(ll)c[tmp[0]]);\n            tmp[3]=sum;\n            if(tmp[2]<h){\n                h-=tmp[2];\n                continue;\n            }else{\n                tmp[2]-=h;st.push(tmp);\n                if(tmp[0]>1){\n                    if(tmp[0]>2)st.push({1,tmp[0]-1,sum,0});\n                    else st.push({1,1,0,sum}); \n                }\n                return;\n            }\n        }else{\n            ll val=qry(sum-tmp[2],tmp[0],tmp[1]);\n            if(val<h){h-=val;continue;}\n            int L=tmp[0],R=tmp[1],ret=L-1;\n            while(L<=R){\n                int mid=(L+R)>>1;\n                if(qry(sum-tmp[2],tmp[0],mid)<h){\n                    ret=mid;L=mid+1;\n                }else R=mid-1;\n            }\n            ll pre=0;if(ret>=tmp[0])pre=qry(sum-tmp[2],tmp[0],ret);\n            h-=pre;val=qry(sum-tmp[2],ret+1,ret+1);\n            if(ret+1!=tmp[1]){\n                if(ret+2!=tmp[1])st.push({ret+2,tmp[1],tmp[2],0});\n                else st.push({ret+2,ret+2,qry(sum-tmp[2],ret+2,ret+2),sum});\n            }\n            st.push({ret+1,ret+1,val-h,sum});\n            if(ret){\n                if(ret>1)st.push({1,ret,sum,0});\n                else st.push({1,1,0,sum});\n            }\n            return;\n        }\n    }\n    if(n==1)st.push({1,1,0,sum});\n    else st.push({1,n,sum,0});\n    ans+=h;\n}\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin>>n;\n    rep(i,1,n)cin>>c[i]>>r[i];\n    Pre();\n    sum=INF;\n    if(n>1)st.push({1,n,0,0});\n    else st.push({1,n,c[1],sum});\n    cin>>q;\n    rep(i,1,q){\n        int t,h;cin>>t>>h;\n        int delta=t-pre;\n        solve(delta,h);\n        pre=t;\n    }\n    cout<<ans<<endl;\n\n    return 0;\n}\n```",
        "postTime": 1647479489,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010CF1651F\u3011Tower Defense"
    },
    {
        "content": "## Solution\n\n\u8bb0 $X_k$ \u4e3a $\\sum_{i=1}^kx_i$\uff0c\u5373\u5e8f\u5217 $x$ \u7684\u524d\u7f00\u548c\u3002\n\n\u5bf9\u4e8e\u6bcf\u5ea7\u5854\u90fd\u6709\u6ee1\u9b54\u529b\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206 $C$ \u6765\u5f97\u5230\u4f1a\u63a8\u5e73\u54ea\u4e2a\u524d\u7f00\u3002\n\n\u5bf9\u4e8e\u6bcf\u5ea7\u5854\u5728\u524d\u4e00\u79d2\u90fd\u6ca1\u6709\u9b54\u529b\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206 $R$ \u6765\u5f97\u5230\u4f1a\u63a8\u5e73\u54ea\u4e2a\u524d\u7f00\u3002\n\n\u5bf9\u4e8e\u6bcf\u5ea7\u5854\u5728\u524d $k$ \u79d2\u90fd\u6ca1\u6709\u9b54\u529b\uff0c\u4e14 $r_ik\\le c_i$ \u65f6\uff0c\u53ef\u4ee5\u4e5f\u901a\u8fc7\u4e8c\u5206 $R$ \u6765\u5f97\u5230\u4f1a\u63a8\u5e73\u54ea\u4e2a\u524d\u7f00\u3002\u8bb0 $p=\\lceil\\frac{h}{k}\\rceil$\uff0c\u5bf9 $p$ \u4e8c\u5206\u5373\u53ef\u3002\n\n\u8bb0 $f_i=\\lceil\\frac{c_i}{r_i}\\rceil$\u3002\u5bf9\u4e8e\u7ecf\u8fc7\u65f6\u95f4 $t$\uff0c\u4e00\u5ea7\u5854 $i$ \u6ee1\u9b54\u529b\u5f53\u4e14\u4ec5\u5f53 $t\\ge f_i$\u3002\n\n\u5982\u679c\u4e0d\u8003\u8651 $r_ik\\le c_i$ \u7684\u9650\u5236\uff1a\n\n\u53ef\u4ee5\u5c1d\u8bd5\u5b9e\u73b0\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u80fd\u591f\u652f\u6301\u67e5\u8be2\u7684 $t\\ge f_i$ \u5854\u7684\u9b54\u529b\u603b\u548c\u4e0e $t<f_i$ \u7684\u5854\u7684\u6062\u590d\u901f\u7387\u603b\u548c\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7ecf\u8fc7\u65f6\u95f4 $t$ \u540e\u7684\u9b54\u529b\u548c\u3002\n\n\u8003\u8651**\u7ebf\u6bb5\u6811**\u3002\n\n\u5728\u4e0b\u6807 $f_i$ \u63d2\u5165\u6bcf\u4e2a\u5854\u7684 $c_i$ \u548c $r_i$ \u5e76\u7ef4\u62a4 $c$ \u548c $r$ \u7684\u533a\u95f4\u548c\u3002\u67e5\u8be2\u65f6\u53ea\u9700\u8981\u67e5\u8be2\u524d\u7f00 $[1,t]$ \u7684\u5bb9\u91cf\u548c \u548c \u533a\u95f4 $[t+1, \\texttt{inf}]$ \u7684\u901f\u7387\u548c\u3002\n\n\u95ee\u9898\u662f\u73b0\u5728\u53ea\u652f\u6301\u7ef4\u62a4\u9b54\u529b\u548c\uff0c\u5e76\u4e0d\u80fd\u7b97\u51fa\u8981\u63a8\u5e73\u5230\u54ea\u4e2a\u524d\u7f00\u3002\n\n\u8003\u8651**\u500d\u589e**\u3002\n\n\u6bcf\u6b21\u5224\u65ad $[1, v]$ \u7684\u5854\u7684\u524d\u7f00\u9b54\u529b\u548c\u662f\u5426\u5927\u4e8e $h$\uff0c\u5927\u4e8e\u5c31\u4e0d\u8df3\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u5c31\u8df3\u3002\u500d\u589e\u8981\u6ce8\u610f\u53ef\u80fd $[1,1]$ \u5c31\u5927\u4e8e $h$\uff0c\u4e0d\u8fc7\u8fd9\u4e9b\u90fd\u662f\u57fa\u672c\u7684\u5b9e\u73b0\u7ec6\u8282\u3002\n\n\u95ee\u9898\u662f\u7ebf\u6bb5\u6811\u4e00\u4e0b\u5c31\u63d2\u5165\u4e86 $n$ \u4e2a\u5854\u7684\u4fe1\u606f\uff0c\u533a\u5206\u4e0d\u4e86\u524d $v$ \u5ea7\u5854\u9b54\u529b\u548c \u548c \u540e $n-v$ \u5ea7\u5854\u7684\u9b54\u529b\u548c\u3002\n\n\u8003\u8651**\u4e3b\u5e2d\u6811**\u3002\n\n\u6309 $1\\sim n$ \u7684\u987a\u5e8f\u4f9d\u6b21\u5728\u4e0b\u6807 $f_i$ \u63d2\u5165 $c_i,r_i$\uff0c\u5bf9\u4e8e\u67e5\u8be2\u533a\u95f4 $[l,r]$\uff0c\u76f4\u63a5\u7528\u7248\u672c $r$ \u51cf\u53bb\u7248\u672c $l-1$\u3002\u6ce8\u610f\u5230\u6211\u4eec\u7ef4\u62a4\u7684\u4fe1\u606f\u662f $c$ \u548c $r$ \u7684\u533a\u95f4\u548c\uff0c\u5177\u6709**\u53ef\u51cf\u6027**\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4\u3002\n\n\u901a\u8fc7\u4e3b\u5e2d\u6811\u548c\u500d\u589e\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u5230\u5728 $\\mathcal O(\\log^2 n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u67e5\u8be2\u63a8\u5e73\u54ea\u4e2a\u524d\u7f00\u3002\n\n\u4ecd\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5b9e\u73b0\u4e0a\u8ff0\u505a\u6cd5\u540e\uff0c\u6211\u4eec\u80fd\u56de\u7b54\u7684\u95ee\u9898\u90fd\u6709\u4e00\u4e2a\u9650\u5236\uff1a\u6bcf\u5ea7\u5854\u9700\u8981\u90fd\u5728**\u540c\u4e00\u79d2**\u6ca1\u6709\u9b54\u529b\u3002\n\n\u663e\u7136\u5b9e\u9645\u4e0a\u5f88\u96be\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\u3002\n\n\u4e0d\u8fc7\u521a\u624d\u53cd\u590d\u51fa\u73b0\u4e86**\u63a8\u5e73**\u4e8c\u5b57\u2026\u2026\n\n\u8003\u8651**\u73c2\u6735\u8389\u6811**\u3002\n\n\u6211\u4eec\u7528\u73c2\u6735\u8389\u6811\u7ef4\u62a4\u82e5\u5e72\u4e2a\u533a\u95f4 $[l,r,t]$\uff0c\u8868\u793a\u533a\u95f4 $[l,r]$ \u7684\u6bcf\u5ea7\u5854\u90fd\u5728 $t$ \u65f6\u523b\u88ab\u69a8\u5e72\u3002\u5bf9\u4e8e\u5728 $t$ \u65f6\u523b\u6ca1\u6709\u5b8c\u5168\u69a8\u5e72\u7684\u5854\uff0c\u7ed9\u5b83\u6253\u4e2a\u6807\u8bb0\uff0c\u5206\u914d\u4e00\u4e2a $[i,i,-t]$ \u7684\u7ebf\u6bb5\uff08\u663e\u7136\u6b63\u5e38\u7684 $t$ \u4e0d\u4f1a\u662f\u8d1f\u6570\uff0c\u6807\u8bb0\u4e0d\u4f1a\u6df7\u6dc6\uff09\u3002\n\n\u4e0d\u8fc7\u73c2\u6735\u8389\u6811\u7684\u6700\u5927\u95ee\u9898\u5728\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u53d1\u73b0\u6bcf\u6b21\u64cd\u4f5c\uff0c\u6211\u4eec\u4f1a\u62b9\u5e73\u4e00\u6bb5\u524d\u7f00\uff0c\u5e76\u65b0\u5efa\u4e24\u4e2a\u7ebf\u6bb5 $[1, p, t]$ \u548c $[p,p,-t]$\uff0c\u603b\u7ebf\u6bb5\u6570\u662f $\\mathcal O(q)$ \u7684\u3002\u800c\u6bcf\u4e2a\u7ebf\u6bb5\u6700\u591a\u88ab\u63d2\u5165\u4e00\u6b21\uff0c\u5220\u9664\u4e00\u6b21\uff0c\u5bf9\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u603b\u8d21\u732e\u662f $\\mathcal O(1)$ \u7684\uff0c\u73c2\u6735\u8389\u6811\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O(q\\log q)$ \u7684\uff08\u7528 `map` \u6216 `set` \u5b9e\u73b0\u81ea\u5e26 $\\log$\uff0c\u5f53\u7136\u4f60\u4f1a\u53d1\u73b0\u6bcf\u6b21\u53ea\u4f1a\u5bf9\u524d\u7f00\u52a8\u624b\u811a\uff0c\u6240\u4ee5**\u76f4\u63a5\u7528\u94fe\u8868\u7ef4\u62a4\u4e5f\u53ef\u4ee5**\uff09\u3002\u800c\u5148\u524d\u4f7f\u7528\u7684\u4e3b\u5e2d\u6811\u4e5f\u53ef\u4ee5\u652f\u6301\u67e5\u8be2\u7684\u4efb\u610f\u4e00\u4e2a\u7ebf\u6bb5 $[l,r]$ \u5185\u7684\u5854\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(q(\\log^2 n+\\log q))$ \u6216 $\\mathcal O(q\\log^2 n)$\uff08\u94fe\u8868\uff09\u3002\n\n## Code\n\n```cpp\n// Problem: F. Tower Defense\n// From: Codeforces - Educational Codeforces Round 124 (Rated for Div. 2)\n// URL: https://codeforces.com/contest/1651/problem/F\n// Time: 2022-03-15 16:54\n// Author: lingfunny\n\n#include <bits/stdc++.h>\n#define LL long long\nusing namespace std;\nconst int mxn = 2e5+10, mxd = 1e7;\n\nint n, c[mxn], r[mxn], tt, root[mxn], lst[mxn], lg[mxn];\nLL ans;\nstruct node {\n\tLL sc, sr; inline node operator + (const node& rhs) const { return {sc + rhs.sc, sr + rhs.sr}; }\n} nd[mxd];\nint lc[mxd], rc[mxd], tot;\n#define mid ((L+R)>>1)\ninline void psup(int o) { nd[o] = nd[lc[o]] + nd[rc[o]]; }\nvoid insert(int& o, int rt, int p, node x, int L = 1, int R = mxn) {\n\tif(!o) o = ++tot; if(L == R) return nd[o] = nd[rt] + x, void();\n\tif(p <= mid) insert(lc[o], lc[rt], p, x, L, mid), rc[o] = rc[rt];\n\telse insert(rc[o], rc[rt], p, x, mid+1, R), lc[o] = lc[rt];\n\tpsup(o);\n}\nnode query(int r, int l, int p, int L = 1, int R = mxn) {\n\t// \u8ba1\u7b97\u7248\u672cr-l\u7684\u5c0f\u4e8e\u7b49\u4e8e p \u7684 sc \u548c\u5927\u4e8e p \u7684sr\n\tif(R <= p) return {nd[r].sc-nd[l].sc, 0}; if(L > p) return {0, nd[r].sr-nd[l].sr};\n\treturn query(lc[r], lc[l], p, L, mid) + query(rc[r], rc[l], p, mid+1, R);\n}\nmap <int, int> mp;\ninline void cut(int p) {\n\tif(mp.find(p) == mp.end()) mp[p] = prev(mp.lower_bound(p))->second;\n}\ninline LL get(int l, int r, int dt) {\n\tnode s = query(root[r], root[l-1], dt);\n\treturn s.sc + (s.sr*dt);\n}\n// node[P] \u65f6\u95f4\u4e3a P \u7684\u65f6\u5019\u6ee1\u9b54\u529b\u7684\u5854\u7684\u4fe1\u606f\n\nsigned main() {\n\tscanf(\"%d\", &n); lg[0] = -1;\n\tfor(int i = 1; i <= n; ++i) scanf(\"%d%d\", c+i, r+i), lg[i] = lg[i>>1] + 1;\n\tfor(int i = 1; i <= n; ++i) insert(root[i], root[i-1], min((c[i]+r[i]-1)/r[i], mxn), {c[i], r[i]});\n\tmp[n+1] = 114514; mp[1] = -1919810;\n\tscanf(\"%d\", &tt);\n\twhile(tt--) {\n\t\tint t, L, R, dt, pos; LL h, dec; scanf(\"%d%lld\", &t, &h);\n\t\t++t;\t// \u5b58\u5728 t = 0, \u5efa\u8bae\u5148 +1 \u4ee5\u4fdd\u8bc1\u7279\u6b8a\u6807\u8bb0\u53ef\u4ee5\u533a\u5206\u5f00\n\t\tauto it = mp.begin();\n\t\twhile(it->first != n+1) {\n\t\t\tif(it -> second < 0 && it -> second != -1919810) {\n\t\t\t\t// \u8fd9\u4e2a\u70b9\u5220\u4e86\uff0c\u4f46\u6ca1\u5b8c\u5168\u5220\n\t\t\t\tdt = t + it->second, pos = it -> first;\n\t\t\t\tdec = min((LL)c[pos], lst[pos] + (LL)r[pos] * dt);\n\t\t\t\tif(h >= dec) { h -= dec; it = mp.erase(it); }\n\t\t\t\telse { lst[pos] = dec - h; it -> second = -t; h = 0; break; }\n\t\t\t} else {\n\t\t\t\tL = it->first, R = next(it)->first - 1, dt = t - it->second;\n\t\t\t\tdec = get(L, R, dt);\n\t\t\t\tif(h >= dec) { h -= dec; it = mp.erase(it); }\n\t\t\t\telse {\n\t\t\t\t\tfor(int d = lg[R-L+1], v; v = L + (1<<d), ~d; --d) if(v <= R) {\n\t\t\t\t\t\t// \u5224\u65ad [L, v] \u7684\u548c\u662f\u5426\u6bd4 h \u5927\uff0c\u5927\u4e86\u4e0d\u8df3\uff0c\u5c0f\u4e86\u5c31\u8df3\n\t\t\t\t\t\tdec = get(L, v, dt);\n\t\t\t\t\t\tif(h >= dec) h -= dec, L = v + 1;\n\t\t\t\t\t}\n\t\t\t\t\tif((dec = get(L, L, dt)) <= h) h -= dec, ++L;\n\t\t\t\t\t// \u6b64\u65f6 get(L, L, dt) > h\n\t\t\t\t\tdec = min((LL)c[L], (LL)r[L] * dt);\n\t\t\t\t\tdec -= h; lst[L] = dec; h = 0; cut(L), cut(L+1);\n\t\t\t\t\tmp.erase(it); mp[L] = -t; break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(mp.find(1) == mp.end()) mp[1] = t; ans += h;\n\t}\n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1647341330,
        "uid": 280800,
        "name": "lingfunny",
        "ccfLevel": 7,
        "title": "CF-EduRd-124F \u9898\u89e3"
    },
    {
        "content": "## CF1651F \u9898\u89e3\n\n\n**\u9898\u610f**\uff1a\n\n\u6570\u8f74\u4e0a\u6709 $n$ \u4e2a\u5854\uff0c\u5176\u4e2d\u5854 $i$ \u7684\u5750\u6807\u662f $i$\uff0c\u9b54\u529b\u503c\u4e0a\u9650\u662f $lim_i$\uff0c\u6bcf\u79d2\u672b\u53ef\u4ee5\u56de\u590d $re_i$ \u70b9\u9b54\u529b\u3002\n\n\u8fd8\u6709 $q$ \u4e2a\u602a\u7269\uff0c\u7b2c $i$ \u4e2a\u602a\u7269\u51fa\u73b0\u65f6\u95f4\u4e3a\u7b2c $t_i$ \u79d2\u521d\uff0c\u8840\u91cf\u4e3a $h_i$\uff0c\u521d\u59cb\u5750\u6807\u4e3a $1$ \u5e76\u4ee5 $1m/s$ \u901f\u5ea6\u5411\u53f3\u8d70\u3002\n\n\u7b2c $0$ \u79d2\u521d\u65f6\uff0c\u6240\u6709\u5854\u7684\u9b54\u529b\u503c\u4e3a $lim_i$\uff0c\u602a\u7269\u7ecf\u8fc7\u67d0\u5854\u7684\u77ac\u95f4\uff0c\u8be5\u5854\u4f1a\u8017\u8d39\u9b54\u529b\u503c\u7ed9\u602a\u7269\u9020\u6210\u540c\u7b49\u4f24\u5bb3\uff0c\n\n\u5f62\u5f0f\u5316\u7684\uff0c\u82e5\u6b64\u65f6\u602a\u7269\u8840\u91cf\u4e3a $H$\uff0c\u5854\u6b64\u65f6\u9b54\u529b\u503c\u4e3a $W$\uff0c\u5219 $H$ \u548c $W$ \u540c\u65f6\u51cf\u53bb $\\min(H,W)$\u3002\n\n\u4f60\u8981\u6c42\u51fa\uff0c\u6240\u6709\u7ecf\u8fc7\u4e86\u6700\u540e\u4e00\u4e2a\u5854\u7684\u602a\u7269\uff0c\u5728\u7ecf\u8fc7\u4e86\u6700\u540e\u4e00\u4e2a\u5854\u540e\u7684\u5269\u4f59\u8840\u91cf\u4e4b\u548c\u3002\n\n> $n,q,t_i\\le2\\times10^5,h_i\\le10^{12},\\forall i<q,t_i<t_{i+1},$ \u5176\u4f59\u6240\u6709\u6570\u90fd\u5728 `int` \u8303\u56f4\u5185\u3002\n\n**\u505a\u6cd5**\uff1a\n\n\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u6bcf\u4e2a\u602a\u7269\u7684\u901f\u5ea6\u90fd\u662f\u4e00\u6837\u7684\uff0c\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff0c\u6570\u8f74\u4e0a\u6240\u6709\u602a\u7269\u7684\u4f4d\u7f6e\u987a\u5e8f\u6c38\u8fdc\u4e0d\u53d8\uff0c\n\n\u5373\u4e0d\u5b58\u5728\u4efb\u4f55\u4e24\u5854 $i,j$ \u4ee5\u53ca\u4e24\u602a\u7269 $x,y$\uff0c\u4f7f\u5f97\uff1a$x$ \u6bd4 $y$ \u5148\u7ecf\u8fc7 $i$\uff0c\u800c $y$ \u6bd4 $x$ \u5148\u7ecf\u8fc7 $j$\uff0c\n\n\u6545\u4e00\u4e2a\u81ea\u7136\u7684\u60f3\u6cd5\u662f\uff0c\u6309\u51fa\u73b0\u65f6\u95f4\u7684\u5148\u540e\u679a\u4e3e\u6bcf\u4e2a\u602a\u7269\uff0c\u5e76\u5feb\u901f\u7ef4\u62a4\u5f53\u524d\u602a\u7269\u7ed9\u6240\u6709\u5854\u5e26\u6765\u7684\u5f71\u54cd\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u602a\u7269\u7ed9\u6240\u6709\u5854\u7684\u9b54\u529b\u503c\u5e26\u6765\u7684\u5f71\u54cd\uff0c\u6c38\u8fdc\u662f\u4ee5\u4e0b\u5f62\u5f0f\uff1a\n\n\u4ece\u70b9 $1$ \u51fa\u53d1\uff0c\u5c06\u7ecf\u8fc7\u7684\u6240\u6709\u5854\u7684\u9b54\u529b\u503c\u6e05\u96f6\uff0c\u6700\u540e\u5230\u8fbe\u6740\u6b7b\u8be5\u602a\u7269\u7684\u5854\u6216\u6240\u6709\u5854\u7684\u540e\u9762\u3002\n\n\u6ce8\u610f\u5230\uff0c\u5728\u8fd9\u6bb5\u8def\u5f84\u4e0a\uff0c\u53ea\u6709\u6700\u591a\u4e00\u4e2a\u5854\u7684\u9b54\u529b\u503c\u635f\u8017\uff0c\u4e0e\u602a\u7269\u672c\u8eab\u7684\u8840\u91cf\u6709\u5173\uff0c\n\n\u5176\u4ed6\u7684\u5854\u7684\u9b54\u529b\u503c\u90fd\u4f1a\u88ab\u6e05\u96f6\uff0c\u5e76\u6309\u7167\u5176\u81ea\u8eab\u7684\u6c38\u8fdc\u4e0d\u53d8\u7684\u9b54\u529b\u503c\u6062\u590d\u901f\u5ea6\u6765\u6062\u590d\u9b54\u529b\u503c\u3002\n\n\u6211\u4eec\u79f0\u90a3\u4e2a\u4e0e\u602a\u7269\u8840\u91cf\u6709\u5173\u7684\u70b9\u4e3a\u5173\u952e\u70b9\uff0c\u5219\u5176\u4ed6\u70b9\u5c31\u662f\u975e\u5173\u952e\u70b9\u3002\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u5c06\u6570\u8f74\u4e0a\u7684\u6240\u6709\u5854\uff0c\u7528\u82e5\u5e72\u4e2a\u5173\u952e\u70b9\u5212\u5206\u6210\u4e86\u4e00\u4e9b\u8fde\u7eed\u6bb5\uff0c\u800c\u4efb\u610f\u4e00\u8fde\u7eed\u6bb5\uff0c\n\n\u5176\u5bf9\u5e94\u7684\u533a\u95f4 $[l,r]$ \u4e2d\u7684\u6240\u6709\u5854\uff0c\u5fc5\u5b9a\u88ab\u540c\u4e00\u602a\u7269 $c$ \u4f9d\u6b21\u6e05\u96f6\u8fc7\uff0c\u6b64\u65f6\u6211\u4eec\u79f0\u8be5\u8fde\u7eed\u6bb5\u989c\u8272\u4e3a $c$\u3002\n\n\u90a3\u6211\u4eec\u8003\u8651\u80fd\u5426\u5feb\u901f\u7ef4\u62a4\u4e00\u4e2a\u8fde\u7eed\u6bb5\u7684\u4fe1\u606f\u3002\u5f62\u5f0f\u5316\u7684\uff0c\u82e5\u6709\u4e2a\u602a\u7269 $i$ \u7ad9\u5728\u4e86\u70b9 $l$\uff0c\u8840\u91cf\u4e3a $H$\uff0c\n\n\u4e14\u5b58\u5728\u70b9 $r$ \u4f7f\u533a\u95f4 $[l,r]$ \u662f\u989c\u8272\u4e3a $c$ \u7684\u8fde\u7eed\u6bb5\uff0c\u6b64\u65f6\u6211\u4eec\u80fd\u5426\u5feb\u901f\u7ef4\u62a4\uff0c\n\n\u602a\u7269 $i$ \u6700\u540e\u4f1a\u5728\u533a\u95f4 $[l,r]$ \u4e2d\u7684\u54ea\u4e2a\u4f4d\u7f6e\u88ab\u6740\u6b7b\uff0c\u6216\u5230\u8fbe $r$ \u7684\u53f3\u8fb9\u3002\n\n\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u4e8c\u5206 $mid$ \u5e76\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5224\u5b9a\u602a\u7269 $i$ \u80fd\u5426\u6d3b\u7740\u7ecf\u8fc7\u70b9 $mid$\u3002\n\n\u800c\u602a\u7269 $i$ \u80fd\u6d3b\u7740\u7ecf\u8fc7\u70b9 $mid$\uff0c\u7b49\u4ef7\u4e8e\u533a\u95f4 $[l,mid]$ \u91cc\u6240\u6709\u5854\u5bf9\u602a\u7269\u9020\u6210\u7684\u4f24\u5bb3\u503c\u5c0f\u4e8e $H$\uff0c\n\n\u6545\u6211\u4eec\u9700\u8981\u6c42\u51fa\u533a\u95f4 $[l,mid]$ \u4e2d\u5854\u5bf9\u602a\u7269\u9020\u6210\u7684\u4f24\u5bb3\u503c\u603b\u548c\u3002\n\n\u6ce8\u610f\u5230 $[l,mid]$ \u662f $[l,r]$ \u7684\u5b50\u533a\u95f4\uff0c\u6545\u5bf9 $\\forall j\\in[l,mid]$\uff0c\u5854 $j$ \u5728\u7b2c $t_c+j-1$ \u79d2\u521d\u7684\u9b54\u529b\u503c\u4e3a $0$\uff0c\n\n\u539f\u56e0\u662f $[l,r]$ \u4e2d\u6240\u6709\u5854\u7684\u9b54\u529b\u503c\uff0c\u90fd\u88ab\u602a\u7269 $c$ \u6e05\u96f6\u8fc7\uff0c\u800c\u602a\u7269 $c$ \u5728 $t_c$ \u79d2\u521d\u65f6\uff0c\u5750\u6807\u4e3a $1$\uff0c\n\n\u6240\u4ee5\u602a\u7269 $c$ \u5230\u8fbe\u70b9 $j$ \u7684\u65f6\u523b\uff0c\u5c31\u662f\u7b2c $t_c+j-1$ \u79d2\u521d\u3002\n\n\u540c\u7406\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7b97\u51fa\uff0c\u602a\u7269 $i$ \u5230\u8fbe\u5854 $j$ \u65f6\u662f\u7b2c $t_i+j-1$ \u79d2\u521d\uff0c\n\n\u8fd9\u4e0e\u602a\u7269 $c$ \u7684\u5230\u8fbe\u65f6\u95f4\u76f8\u5dee $t_i-t_c$ \u79d2\uff0c\u5373\u5854 $j$ \u6709 $t_i-t_c$ \u79d2\u7684\u65f6\u95f4\uff0c\u4ece $0$ \u5f00\u59cb\u6062\u590d\u9b54\u529b\u503c\uff0c\n\n\u6545\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\uff0c\u5854 $j$ \u5728\u602a\u7269 $i$ \u5230\u8fbe\u65f6\u7684\u9b54\u529b\u503c\u662f\uff1a$\\min((t_i-t_c)\\times re_j,lim_j)$\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u533a\u95f4 $[l,mid]$ \u5bf9\u602a\u7269 $i$ \u9020\u6210\u4e86\u603b\u4f24\u5bb3\u662f\uff1a$\\sum\\limits_{l\\le j\\le mid}\\min((t_i-t_c)\\times re_j,lim_j)$\uff0c\n\n\u800c\u6211\u4eec\u9700\u8981\u7684\uff0c\u5c31\u662f\u5feb\u901f\u7684\u7b97\u51fa\u8fd9\u4e2a\u503c\u3002\n\n\u770b\u5230\u5f0f\u5b50\u91cc\u7684 $\\min$ \u662f\u4e0d\u597d\u7ef4\u62a4\u7684\uff0c\u6211\u4eec\u8003\u8651\u80fd\u5426\u5c06 $\\min$ \u62c6\u5f00\uff0c\n\n\u5373\u8bbe $X_j=\\min((t_i-t_c)\\times re_j,lim_j)$\uff0c\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba $X_j$ \u7684\u503c\u7a76\u7adf\u7b49\u4e8e\u54ea\u4e00\u9879\u3002\n\n\u82e5 $X_j=(t_i-t_c)\\times re_j$\uff0c\u5219\u8bf4\u660e\u4e86 $(t_i-t_c)\\times re_j\\le lim_j$\uff0c\u5373 $t_i-t_c\\le\\lceil\\frac{lim_j}{re_j}\\rceil$\uff0c\n\n\u800c\u82e5 $X_j=lim_j$\uff0c\u4e5f\u5c31\u8bf4\u660e\u4e86 $(t_i-t_c)\\times re_j>lim_j$\uff0c\u5373 $t_i-t_c>\\lceil\\frac{lim_j}{re_j}\\rceil$\u3002\n\n\u6211\u4eec\u8bb0 $val_j=\\lceil\\frac{lim_j}{re_j}\\rceil$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3 $t_i-t_c\\le val_j$ \u7684 $j$\uff0c$X_j$ \u503c\u90fd\u4e3a $(t_i-t_c)\\times re_j$\uff0c\n\n\u76f8\u53cd\u7684\uff0c\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3 $t_i-t_c>val_j$ \u7684 $j$\uff0c$X_j$ \u503c\u90fd\u4e3a $lim_j$\uff0c\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6211\u4eec\u8981\u6c42\u7684\u5f0f\u5b50\u6539\u5199\uff0c\u5373\uff1a\n\n$\\sum\\limits_{l\\le j\\le mid}X_j=(\\sum\\limits_{l\\le j\\le mid,val_j\\ge t_i-t_c}(t_i-t_c)\\times re_j)+(\\sum\\limits_{l\\le j\\le mid,val_j<t_i-t_c}lim_j)$\u3002\n\n\u6ce8\u610f\u5230\u540e\u9762\u4e24\u9879\u90fd\u662f\u5178\u578b\u7684\u4e8c\u4f4d\u504f\u5e8f\u7684\u5f62\u5f0f\uff0c\u6545\u6211\u4eec\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u505a\u5230\u5355\u6b21 $O(\\log n)$\uff0c\n\n\u518d\u4e58\u4e0a\u4e8c\u5206\u7684\u590d\u6742\u5ea6\uff0c\u5373\u6211\u4eec\u53ef\u4ee5\u7528 $O(\\log^2n)$ \u7684\u590d\u6742\u5ea6\u6765\u7ef4\u62a4\u4e00\u4e2a\u8fde\u7eed\u6bb5\u7684\u4fe1\u606f\u3002\n\n\u90a3\u6211\u4eec\u7ee7\u7eed\u8003\u8651\uff0c\u5f53\u6709\u82e5\u5e72\u4e2a\u8fde\u7eed\u6bb5\u65f6\u7684\u7ef4\u62a4\u65b9\u6cd5\u3002\n\n\u5176\u5b9e\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u5904\u7406\u6bcf\u4e2a\u5173\u952e\u70b9\uff0c\u5e76\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u8fde\u7eed\u6bb5\uff0c\u5355\u4e2a\u8fde\u7eed\u6bb5\u5185\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u7ef4\u62a4\uff0c\n\n\u800c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f\u5bf9\u7684\uff0c\u539f\u56e0\u53ef\u4ee5\u7528\u5747\u644a\u590d\u6742\u5ea6\u7684\u601d\u60f3\u8bc1\u660e\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u5728\u8fd9\u79cd\u505a\u6cd5\u4e2d\uff0c\u679a\u4e3e\u7684\u8fde\u7eed\u6bb5\u6570\u4e0e\u602a\u7269\u5b9e\u9645\u7ecf\u8fc7\u7684\u5173\u952e\u70b9\u6570\u540c\u7ea7\uff0c\n\n\u800c\u602a\u7269\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u5173\u952e\u70b9\uff0c\u90fd\u4f1a\u4f7f\u8fd9\u4e2a\u5173\u952e\u70b9\u7684\u9b54\u529b\u503c\u6e05\u96f6\uff0c\u5373\u53d8\u6210\u975e\u5173\u952e\u70b9\uff0c\n\n\u800c\u6bcf\u4e2a\u602a\u7269\u53ea\u4f1a\u5728\u5176\u88ab\u67d0\u4e2a\u5854\u6740\u6b7b\u65f6\uff0c\u4f7f\u8fd9\u4e2a\u5854\u53d8\u6210\u4e00\u4e2a\u65b0\u7684\u5173\u952e\u70b9\uff0c\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5173\u952e\u70b9\u7684\u603b\u589e\u91cf\u662f $O(q)$ \u7684\uff0c\u6545\u6211\u4eec\u679a\u4e3e\u8fde\u7eed\u6bb5\u7684\u603b\u6b21\u6570\u4e5f\u5c31\u662f $O(q)$ \u7684\uff0c\n\n\u90a3\u4e48\u603b\u590d\u6742\u5ea6\u4e5f\u5c31\u662f $O(n+q\\log^2n)$ \u7684\u3002\n\n\u5f53\u7136\uff0c\u5982\u679c\u4ee3\u7801~~\u50cf\u6211\u4e00\u6837~~\u5b9e\u73b0\u7684\u4e0d\u662f\u5f88\u597d\uff0c\u90a3\u590d\u6742\u5ea6\u53ef\u80fd\u4f1a\u53d8\u6210 $O((n+q)\\log^2n)$ \u4e14\u5e38\u6570\u5de8\u5927\uff0c\n\n\u5c31\u9700\u8981\u5361\u4e00\u4e0b\u5e38\u6570\u624d\u80fd\u8fc7\u3002\n\n\u5f53\u7136\uff0c\u4e0a\u9762\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u53ef\u4ee5\u4f18\u5316\uff0c\u5c31\u662f\u628a\u4e8c\u5206\u62ff\u5230\u4e3b\u5e2d\u6811\u91cc\u9762\u53bb\uff0c\u5c31\u53ef\u4ee5\u505a\u5230\u5355 $\\log$\u3002\n\n[\u4ee3\u7801\u94fe\u63a5](https://codeforces.com/contest/1651/submission/149531334)",
        "postTime": 1647224914,
        "uid": 100091,
        "name": "GaryH",
        "ccfLevel": 6,
        "title": "CF1651F \u9898\u89e3"
    },
    {
        "content": "\u5728 CF \u4e0a\u51fa Dirty Work \u9898\uff0c\u51fa\u9898\u4eba\u8017\u5b50\u5c3e\u6c41\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u5854\u6c42\u51fa\u586b\u6ee1\u6240\u9700\u8981\u7684\u65f6\u95f4 $f_i$\uff0c\u5f53\u524d\u5df2\u7ecf\u6b63\u5e38\u586b\u4e86 $\\min(g_i\\times r_i,c_i)$\uff0c\u53d1\u73b0\u6bcf\u6b21\u76f8\u5f53\u4e8e\u91cd\u7f6e\u4e00\u4e2a\u524d\u7f00\u7684 $g_i$ \u4e3a 0\uff0c\u7136\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7279\u6b8a\u5904\u7406\u3002\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5\u8003\u8651\u989c\u8272\u6bb5\u5747\u644a\uff0c\u7136\u540e\u6bb5\u5185\u7528\u4e3b\u5e2d\u6811\u67e5\u8be2\u586b\u6ee1\u548c\u672a\u6ee1\u7684\u4e24\u90e8\u5206\u503c\u5c31\u884c\u4e86\u3002\u601d\u7ef4\u96be\u5ea6 *800\u3002\n\n\u4ee3\u7801\u6211\u5199\u7684\u6bd4\u8f83\u5197\u957f\uff0c\u4f46\u5f88\u51fa\u4eba\u610f\u6599\u5730\u8c03\u7684\u65f6\u95f4\u82b1\u8d39\u7684\u5f88\u5c11\u3002\n\n```c++\n//\u6211\u8033\u6735\u778e\u6389\u62c9~~\n#define setI(x) freopen(x,\"r\",stdin)\n#define setO(x) freopen(x,\"w\",stdout)\n#include<bits/stdc++.h>\n#define poly vector<int>\n#define IOS ios::sync_with_stdio(false)\n#define ll long long\n#define mp make_pair\n#define mt make_tuple\n#define pa pair < int,int >\n#define fi first\n#define se second\n#define inf 1e18\n#define mod 998244353\n#define int ll\n#define N 200005\n#define B 300005ll\nusing namespace std;\ninline char gc(){static char buf[1000000],*p1=buf,*p2=buf;return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++;}\n#define gc getchar\ninline ll read(){char c=gc();ll su=0,f=1;for (;c<'0'||c>'9';c=gc()) if (c=='-') f=-1;for (;c>='0'&&c<='9';c=gc()) su=su*10+c-'0';return su*f;}\ninline void write(ll x){if (x<0){putchar('-');write(-x);return;}if (x>=10) write(x/10);putchar(x%10+'0');}\ninline void writesp(ll x){write(x),putchar(' ');}\ninline void writeln(ll x){write(x);putchar('\\n');}\nint rt[N];\nint rt1[N];\nint tp;\nint sta[N];\nint n,r[N],c[N],fl[N],nowfl[N];\nint s[N];\nint res[N];\n\nint q,ans;\nnamespace sg1\n{\n    int cnt;\n    int tr[10000005];\n    int rson[10000005];\n    int lson[10000005];\n    void pushup(int k)\n    {\n        tr[k]=tr[lson[k]]+tr[rson[k]];\n    }\n    void update(int &k,int lst,int l,int r,int L,int x)\n    {\n        k=++cnt;\n        tr[k]=tr[lst];\n        lson[k]=lson[lst];\n        rson[k]=rson[lst];\n        if (l==r)\n        {\n            tr[k]=tr[k]+x;\n            return;\n        }\n        int mid=l+(r-l)/2;\n        if (L<=mid) update(lson[k],lson[lst],l,mid,L,x);\n        else update(rson[k],rson[lst],mid+1,r,L,x);\n        pushup(k);\n    }\n    int query(int lk,int rk,int l,int r,int L)\n    {\n        if (lk==rk) return 0;\n        if (!rk) return 0;\n        if (r<=L)\n        {\n            return tr[rk]-tr[lk];\n        }\n        int mid=l+(r-l)/2;\n        int res=query(lson[lk],lson[rk],l,mid,L);\n        if (mid<L)  \n            res+=query(rson[lk],rson[rk],mid+1,r,L);\n        return res;\n    }\n};\nnamespace sg2\n{\n    int cnt;\n    int tr[10000005];\n    int rson[10000005];\n    int lson[10000005];\n    void pushup(int k)\n    {\n        tr[k]=tr[lson[k]]+tr[rson[k]];\n    }\n    void update(int &k,int lst,int l,int r,int L,int x)\n    {\n        k=++cnt;\n        tr[k]=tr[lst];\n        lson[k]=lson[lst];\n        rson[k]=rson[lst];\n        if (l==r)\n        {\n            tr[k]=tr[k]+x;\n            return;\n        }\n        int mid=l+(r-l)/2;\n        if (L<=mid) update(lson[k],lson[lst],l,mid,L,x);\n        else update(rson[k],rson[lst],mid+1,r,L,x);\n        pushup(k);\n    }\n    int query(int lk,int rk,int l,int r,int L)\n    {\n        if (r<L) return 0;\n        if (lk==rk) return 0;\n        if (!rk) return 0;\n        if (L<=l)\n        {\n            return tr[rk]-tr[lk];\n        }\n        int mid=l+(r-l)/2;\n        int res=query(rson[lk],rson[rk],mid+1,r,L);\n        if (L<=mid) \n            res+=query(lson[lk],lson[rk],l,mid,L);\n        return res;\n    }\n};\nvoid BellaKira()\n{\n    n=read();\n    for (int i=1;i<=n;i++) \n    {\n        c[i]=read(),r[i]=read();\n        fl[i]=(c[i]-1)/r[i]+1;\n        fl[i]=min(fl[i],B);\n        s[i]=s[i-1]+c[i];\n    }\n    for (int i=1;i<=n;i++)\n    {\n        sg1::update(rt[i],rt[i-1],0,B,fl[i],c[i]);\n        sg2::update(rt1[i],rt1[i-1],0,B,fl[i],r[i]);\n    }\n    q=read();\n    sta[++tp]=n;\n    nowfl[n]=inf;\n    int lstt=0;\n    for (int i=1;i<=q;i++)\n    {\n        int t=read(),h=read();\n        int lstl=0;\n        while (tp)\n        {\n            if (nowfl[sta[tp]]==inf)\n            {\n                int l=lstl+1,r=sta[tp];\n                int now=r+1;\n                while (l<=r)\n                {\n                    int mid=l+(r-l)/2;\n                    if (s[mid]-s[lstl]>=h)\n                    {\n                        now=mid;\n                        r=mid-1;\n                    } else l=mid+1;\n                }\n                if (now==sta[tp]+1)\n                {\n                    h-=s[n]-s[lstl];\n                    nowfl[n]=t;res[n]=0;\n                } else\n                {\n                    if (now!=sta[tp]) sta[++tp]=now;\n                    res[sta[tp]]=s[now]-s[lstl]-h;\n                    nowfl[sta[tp]]=t;\n                    if (now>1)\n                    {\n                        sta[++tp]=now-1;\n                        nowfl[sta[tp]]=t;\n                        res[sta[tp]]=0;\n                    }\n                    h=0;\n                }\n                break;\n            } else\n            if (!res[sta[tp]])\n            {\n                int nowt=t-nowfl[sta[tp]];\n                int nowtt=sg1::query(rt[lstl],rt[sta[tp]],0,B,nowt)+\n                            sg2::query(rt1[lstl],rt1[sta[tp]],0,B,nowt+1)*nowt;\n                if (h>=nowtt)\n                {\n                    h-=nowtt;\n                    nowfl[sta[tp]]=0;\n                    res[sta[tp]]=0;\n                    lstl=sta[tp];\n                    tp--;\n                    continue;\n                } else\n                {\n                    int l=lstl+1,r=sta[tp];\n                    int now=r+1;\n                    while (l<=r)\n                    {\n                        int mid=l+(r-l)/2;\n                        if (sg1::query(rt[lstl],rt[mid],0,B,nowt)+sg2::query(rt1[lstl],rt1[mid],0,B,nowt+1)*nowt>=h)\n                        {\n                            now=mid;\n                            r=mid-1;\n                        } else l=mid+1;\n                    }\n                    if (now!=sta[tp]) sta[++tp]=now;\n                    res[sta[tp]]=sg1::query(rt[lstl],rt[now],0,B,nowt)+sg2::query(rt1[lstl],rt1[now],0,B,nowt+1)*nowt-h;\n                    nowfl[sta[tp]]=t;\n                    if (now>1)\n                    {\n                        sta[++tp]=now-1;\n                        nowfl[sta[tp]]=t;\n                        res[sta[tp]]=0;\n                    }\n                    h=0;\n                    break;\n                }\n            } else\n            {\n                res[sta[tp]]+=(t-nowfl[sta[tp]])*r[sta[tp]];\n                res[sta[tp]]=min(res[sta[tp]],c[sta[tp]]);\n                if (res[sta[tp]]<=h)\n                {\n                    h-=res[sta[tp]];\n                    res[sta[tp]]=0;\n                    nowfl[sta[tp]]=0;\n                    lstl=sta[tp];\n                    tp--;\n                    continue;\n                } else\n                {\n                    res[sta[tp]]=res[sta[tp]]-h;\n                    h=0;\n                    nowfl[sta[tp]]=t;\n                    break;\n                }\n            }   \n        }\n        if (!tp) sta[++tp]=n,nowfl[n]=t,res[n]=0;\n        else\n        {\n            if (sta[tp]!=1)\n            {\n                int lst=sta[tp];\n                sta[++tp]=lst-1;\n                nowfl[lst-1]=t;\n                res[lst-1]=0;\n            }\n        }\n        ans+=h;\n    }\n    writeln(ans);\n}\nsigned main()\n{\n    int T=1;\n    while (T--)\n    {\n        BellaKira();\n    }\n}\n/*\n3\n5 1\n7 4\n4 2\n4\n0 14\n1 10\n3 16\n10 16\n*/\n```",
        "postTime": 1647585522,
        "uid": 120911,
        "name": "Lynkcat",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1651F Tower Defense"
    }
]