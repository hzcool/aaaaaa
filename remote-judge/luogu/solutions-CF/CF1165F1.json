[
    {
        "content": "## Sol:\n\n\u6570\u636e\u8303\u56f4\u8f83\u5c0f\uff0c\u53ef\u4ee5\u66b4\u529b\uff0c\u8fd9\u91cc\u8bf4\u4e00\u4e0b\u4e8c\u5206\u7684\u505a\u6cd5\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e00\u9898\uff0c\u6211\u4eec\u4e8c\u5206\u8fd9\u4e2a\u5929\u6570\u5373\u53ef\u3002\u8003\u8651\u8d2a\u5fc3\u7b56\u7565\uff0c\u4f55\u65f6\u4e70\u7269\u54c1\uff1f\u662f\u6253\u6298\u65f6\u80fd\u4e70\u5373\u4e70\u5417\uff1f\u5982\u679c\u8fd9\u6837\u7684\u8bdd\uff0c\u53ef\u80fd\u9020\u6210\u540e\u9762\u6253\u6298\u65f6\u5374\u6ca1\u94b1\u53bb\u4e70\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u4f18\u7684\uff0c\u5176\u5b9e\uff0c\u5b8c\u5168\u53ef\u4ee5\u4e00\u76f4\u6512\u94b1\uff0c\u6512\u5230\u8fd9\u4ef6\u7269\u54c1\u6700\u540e\u4e00\u4e2a\u6253\u6298\u65e5\u65f6\u5168\u90e8\u4e70\u4e86\uff0c\u5982\u679c\u524d\u9762\u6563\u7740\u4e70\uff0c\u548c\u6700\u540e\u4e00\u8d77\u4e70\u6548\u679c\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u770b\u770b\u4e8c\u5206\u7684\u8fd9\u4e2a\u5929\u6570\u5bf9\u5e94\u7684\u6512\u7684\u94b1\u80fd\u5426\u8d2d\u4e70\u5168\u90e8\u7269\u54c1\u3002\u90a3\u6211\u53ea\u9700\u8981\u6309\u7167\u6700\u540e\u4e00\u4e2a\u6253\u6298\u65e5\u51fa\u73b0\u7684\u65f6\u95f4\u7ed9\u7269\u54c1\u6392\u5e8f\uff0c\u7edf\u8ba1\u8d21\u732e\u5373\u53ef\uff0c\u5176\u4ed6\u7684\u5c31\u662f\u4ee3\u7801\u80fd\u529b\u7684\u95ee\u9898\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u601d\u8def\u8be5\u600e\u4e48\u5199\u53ef\u4ee5\u770b\u4e0b\u4ee3\u7801\u3002\n\n\u4ee3\u7801\u4e2d\u6709\u4e9b\u8bb8\u6ce8\u91ca\uff0c\u53ef\u4ee5\u7406\u89e3\u4e00\u4e0b\u3002\n\n## Code:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 1e6 + 6;\n\nint read() {\n    int x = 0, f = 0;\n    char ch = getchar();\n    for (; !isdigit(ch); ch = getchar()) f |= (ch == '-');\n    for (; isdigit(ch); ch = getchar()) x = (x << 1) + (x << 3) + (ch & 15);\n    return f ? -x : x;\n}\n\nvector<int>Z[N];\nint n, m, a[N], wz[N], bh[N];\nbool cmp(int x, int y) {return Z[x][wz[x]] < Z[y][wz[y]];}\n\nvoid prepare(int mid) {\n     for (int i = 1; i <= n; i++) {\n\t wz[i] = Z[i].size() - 1;\n\t for (int j = 1; j < Z[i].size(); j++) {if (Z[i][j] > mid) { wz[i] = j - 1;break;}}\n     }\n     sort(bh + 1, bh + 1 + n, cmp);\n}\n\nbool check(int mid) {\n\tprepare(mid); //\u9884\u5904\u7406\u6700\u540e\u4e00\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\n\tint T = 0, LL = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t     int m = Z[bh[i]][wz[bh[i]]] - T;//\u8ba1\u7b97\u80fd\u82b1\u7684\u94b1\n\t     if (m >= a[bh[i]])mid -= a[bh[i]], T += a[bh[i]];//\u90fd\u80fd\u4e70\u5c31\u90fd\u4e70\n\t     else mid -= m, T += m, LL += a[bh[i]] - m;//\u4e0d\u80fd\u4e70\u5c31\u628a\u80fd\u4e70\u7684\u90fd\u4e70\u4e86\n\t}\n\tmid -= LL * 2;//LL\u662f\u7edf\u8ba1\u53ea\u80fd\u82b12\u5757\u4e70\u7684\u7269\u54c1\u7684\u4e2a\u6570\n\treturn mid >= 0;\n}\n\nsigned main() {\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; i++) bh[i] = i, a[i] = read(), Z[i].push_back(0);//\u4e0d\u6253\u6298\u7684\u5546\u54c1\u585e\u4e2a0\uff0c\u5373\u7b2c\u96f6\u5929\u4e70\u3002\n\tfor (int i = 1; i <= m; i++) {\n\t    int d = read(), t = read();\n\t    Z[t].push_back(d);\n\t}\n\tfor (int i = 1; i <= n; i++)sort(Z[i].begin(), Z[i].end());\n\tint l = 0, r = 4e5 + 1;\n\twhile (l < r) {\n\t     int mid = l + r >> 1;\n\t     if (!check(mid)) l = mid + 1;\n\t     else r = mid;\n\t}\n\treturn printf(\"%d\\n\",l), 0;\n}\n```\n",
        "postTime": 1653125209,
        "uid": 397317,
        "name": "Gym_nastics",
        "ccfLevel": 0,
        "title": "CF1165F1 Microtransactions (easy version)"
    }
]