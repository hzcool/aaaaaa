[
    {
        "content": "$k$ \u8fd9\u4e48\u5c0f\u80af\u5b9a\u662f\u6307\u6570\u7b97\u6cd5 ~~\u7136\u540e n \u592a\u5927\u4e0d\u4f1a\u505a~~\n\n\u8003\u8651\u4e00\u4e2a\u6570\u88ab\u62ff\u51fa\u6765\u4e00\u5b9a\u4f1a\u6709\u53e6\u4e00\u4e2a\u6570\u88ab\u66ff\u6362\uff0c\u800c\u53e6\u4e00\u4e2a\u6570\u662f\u786e\u5b9a\u7684\n\n\u628a\u6570\u770b\u6210\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u6761\u6216\u6ca1\u6709\u51fa\u8fb9\n\n\u4e8e\u662f\u5c31\u8f6c\u6362\u6210\u4e86\u4e00\u4e2a\u56fe\u8bba\u95ee\u9898\n\n\u5f53\u56fe\u4e0a\u6709\u73af\u7684\u65f6\u5019\uff0c\u5e76\u4e14\u8fd9\u4e9b\u6570\u5c5e\u4e8e**\u4e0d\u540c\u7684**\u76d2\u5b50\u65f6\uff0c\u8fd9\u51e0\u4e2a\u76d2\u5b50\u5c31\u80fd\u4e00\u8d77\u9009\u4e0a\n\n\u4e8e\u662f\u53d8\u6210\u4e86\u4e00\u4e2a\u5185\u5411\u57fa\u73af\u6811\u627e\u73af\u7684\u95ee\u9898\uff0c\u52a0\u4e0a\u4e00\u4e2a\u4eba\u4eba\u90fd\u4f1a\u7684\u72b6\u538b\n\n```cpp\n#include <bits/stdc++.h>\n#define R(i, r) for (int i = 0; i < (r); ++i)\n#define rep(i, l, r) for (int i = (l); i <= (r); ++i)\n#define per(i, l, r) for (int i = (l); i >= (r); --i)\nusing std::cerr; using std::cin; using std::cout; using std::endl;\nusing std::make_pair; using std::pair; typedef pair<int, int> pii;\ntypedef long long ll; typedef unsigned int ui; typedef unsigned long long ull;\n \nconst int K = 15, N = 5010;\n \nint n[K]; ll a[K][N], sig[K];\nstd::map<ll, pii> s;\npii g[K][N]; int clr[K][N];\nint f[1<<K], from[1<<K];\npii plan[1<<K]; int origin[1<<K]; pii out[K];\n \nvoid dfs(int state){\n    if (origin[state]){\n        int x = plan[state].first, y = plan[state].second;\n        pii n;\n        do {\n            n = g[x][y];\n            out[n.first] = {a[n.first][n.second], x};\n            x = n.first, y = n.second;\n        } while(x != plan[state].first);\n    } else {\n        dfs(from[state]);\n        dfs(state^from[state]);\n    }\n}\n \nint main() {\n#ifdef LOCAL\n    freopen(\"input\", \"r\", stdin);\n#endif\n    std::ios::sync_with_stdio(0); cout.tie(0);\n    int k; cin >> k; ll avg = 0;\n    R(i, k){\n        cin >> n[i];\n        R(j, n[i]){\n            cin >> a[i][j];\n            sig[i] += a[i][j];\n            s[a[i][j]] = {i,j};\n        }\n        avg += sig[i];\n    }\n    if (avg % k != 0){ cout << \"No\"; return 0; }\n    avg /= k;\n    R(i, k) R(j, n[i]){\n        ll x = avg - sig[i] + a[i][j];\n        if (s.count(x)) g[i][j] = s[x];\n        else g[i][j].first = -1;\n    }\n    int x, y, state, flag; pii np; int cnt = 0;\n    R(i, k) R(j, n[i]){\n        if (clr[i][j]) continue;\n        x = i, y = j;\n        clr[x][y] = ++cnt;\n        while(g[x][y].first != -1){\n            np = g[x][y]; x = np.first, y = np.second;\n            if (clr[x][y] == cnt){\n                state = 0, flag = 1;\n                int ox = x, oy = y;\n                do {\n                    if (state&(1<<x)) { flag = 0; break; }\n                    state |= (1<<x);\n                    np = g[x][y];\n                    x = np.first, y = np.second;\n                } while(x != ox || y != oy);\n                if (flag) f[state] = origin[state] = 1, plan[state] = {x, y};\n                break;\n            } else if (clr[x][y] != 0) break;\n            clr[x][y] = cnt;\n        }\n    }\n    f[0] = 1;\n    for(int i = 1; i < (1<<k); ++i){\n        for(int j = i; j && !f[i]; j = ((j-1)&i)){\n            if (f[j] && f[i^j]){\n                f[i] = 1;\n                from[i] = j;\n            }\n        }\n    }\n    if(!f[(1<<k)-1]){ cout << \"No\"; return 0; }\n    cout << \"Yes\\n\";\n    dfs((1<<k)-1);\n    R(i, k){\n        cout << out[i].first << ' ' << out[i].second+1 << endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1573179372,
        "uid": 9903,
        "name": "Chaigidel",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1242C \u3010Sum Balance\u3011"
    },
    {
        "content": "\u7b80\u8981\u9898\u610f\uff1a\u6709 $k$ \u4e2a\u76d2\u5b50\uff0c\u6bcf\u4e2a\u76d2\u5b50\u91cc\u6709\u4e00\u4e9b\u6570\uff1b\u4f60\u8981\u4ece\u6bcf\u4e2a\u76d2\u5b50\u91cc\u53d6\u51fa\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u8fdb\u53e6\u4e00\u4e9b\u76d2\u5b50\u91cc\uff08\u6bcf\u4e2a\u76d2\u5b50\u91cc\u6700\u591a\u53ea\u80fd\u653e\u56de\u53bb\u4e00\u4e2a\u6570\uff09\u3002\u95ee\u80fd\u4e0d\u80fd\u4e00\u6b21\u64cd\u4f5c\u4e4b\u540e\u8ba9\u6240\u6709\u76d2\u5b50\u91cc\u7684\u6570\u7684\u548c\u76f8\u7b49\u3002\n\n\u5982\u679c\u6240\u6709\u6570\u7684\u548c\u4e0d\u662f $k$ \u7684\u500d\u6570\uff0c\u663e\u7136\u4e0d\u884c\u3002\n\n\u5426\u5219\u6c42\u51fa\u76f8\u7b49\u7684\u65f6\u5019\u6bcf\u4e2a\u76d2\u5b50\u91cc\u7684\u6570\u7684\u548c\u5e94\u8be5\u662f\u591a\u5c11\u3002\n\n\u5bf9\u4e8e\u76d2\u5b50\u91cc\u7684\u6bcf\u4e00\u4e2a\u6570\uff0c\u5982\u679c\u62ff\u51fa\u53bb\u7684\u662f\u8fd9\u4e2a\u6570\uff0c\u90a3\u4e48\u6ee1\u8db3\u8981\u6c42\u62ff\u8fdb\u6765\u7684\u6570\u53ea\u6709\u4e00\u4e2a\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5efa\u51fa\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6307\u5411\u66ff\u6362\u5b83\u7684\u90a3\u4e2a\u6570\u3002\n\n\u9898\u76ee\u6c42\u5f97\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u7f6e\u6362\uff0c\u7f6e\u6362\u53ef\u4ee5\u62c6\u6210\u82e5\u5e72\u4e2a\u8f6e\u6362\uff1b\u6240\u4ee5\u6211\u4eec\u628a\u5efa\u51fa\u7684\u6709\u5411\u56fe\u91cc\u7684\u6240\u6709\u73af\u627e\u51fa\u6765\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u73af\uff0c\u5982\u679c\u4e0a\u9762\u6709\u4e24\u4e2a\u5728\u540c\u4e00\u4e2a\u76d2\u5b50\u91cc\u7684\u6570\uff0c\u76f4\u63a5\u6254\u6389\u4e0d\u7ba1\u3002\n\n\u5bf9\u4e8e\u5269\u4e0b\u7684\u73af\uff0c\u5904\u7406\u73af\u4e0a\u6709\u54ea\u4e9b\u76d2\u5b50\u91cc\u7684\u6570\uff0c\u538b\u8fdb $S$ \u91cc\u3002\n\n\u663e\u7136\uff0c\u6211\u4eec\u8981\u9009\u51fa\u82e5\u5e72\u4e2a\u73af\uff0c\u8fd9\u4e9b\u73af\u4e0a\u7684\u6570\u6240\u5c5e\u7684\u76d2\u5b50\u4e24\u4e24\u4e0d\u540c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u76d2\u5b50\u4e2d\u90fd\u6709\u6570\u5728\u8fd9\u4e9b\u73af\u4e0a\u3002\n\n\u53ef\u4ee5\u72b6\u538b $\\text{DP}$ \u505a\uff0c\u590d\u6742\u5ea6 $O(n+2^k)$\u3002",
        "postTime": 1654781563,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "CF1242C \u9898\u89e3"
    },
    {
        "content": "### \u9898\u610f\n\n\u6709 $k$ \u4e2a\u76d2\u5b50\uff0c\u6bcf\u4e2a\u76d2\u5b50\u91cc\u6709\u4e00\u5806\u6570\uff0c\u7b2c $i$ \u5806\u6709 $n_i$ \u4e2a\u6570\uff0c\u6240\u6709\u76d2\u5b50\u7684\u6570\u90fd\u4e92\u4e0d\u76f8\u540c\u3002\n\u4f60\u73b0\u5728\u9700\u8981\u4ece\u6bcf\u4e2a\u76d2\u5b50\u91cc\u62ff\u51fa\u4e00\u4e2a\u6570\uff0c\u6253\u4e71\u540e\u518d\u6bcf\u4e2a\u76d2\u5b50\u653e\u56de\u53bb\u4e00\u4e2a\u3002\u95ee\u662f\u5426\u6709\u65b9\u6848\u4f7f\u5f97\u6700\u540e\u6bcf\u4e2a\u76d2\u5b50\u91cc\u7684\u6570\u7684\u548c\u76f8\u7b49\uff1f\u5982\u679c\u6709\u540c\u65f6\u8fd8\u9700\u8981\u7ed9\u51fa\u65b9\u6848\u3002\n\n+ $k\\leq 15, n_i \\leq 5000$\uff0c\u6570\u5b57\u5927\u5c0f\u7684\u7edd\u5bf9\u503c\u5728 $10^9$ \u4ee5\u5185\u3002\n\n### \u89e3\u9898\n\n\u9996\u5148\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u8bc1\u660e\uff0c\u4ece\u67d0\u4e2a\u76d2\u5b50\u53d6\u51fa\u4e00\u4e2a\u6570\u5b57 $x$\uff0c\u90a3\u4e48\u518d\u653e\u5165\u8fd9\u4e2a\u76d2\u5b50\u7684\u6570\u5b57 $y$ \u662f\u4e00\u5b9a\u7684\uff0c\u6bd5\u7adf\u6240\u6709\u76d2\u5b50\u7684\u6570\u90fd\u4e92\u4e0d\u76f8\u540c\u3002\n\n\u90a3\u4e48\u663e\u7136\u7b2c\u4e00\u53cd\u5e94\u53ef\u80fd\u6709\u8fd9\u4e48\u4e00\u4e2a\u601d\u8def\uff1a\u6211\u5148\u786e\u5b9a\u4e00\u4e2a\u5fc5\u987b\u8981\u6362\u6570\u5b57\u7684\u76d2\u5b50\uff0c\u679a\u4e3e\u53d6\u51fa\u7684\u6570\u5b57 $x$\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5f97\u51fa\u653e\u5165\u7684\u6570\u5b57 $y$\u3002\u7d27\u63a5\u5bf9\u4e8e\u90a3\u4e2a $y$ \u6240\u5728\u7684\u76d2\u5b50\uff0c\u88ab\u53d6\u51fa\u4e86\u4e00\u4e2a $y$\uff0c\u90a3\u4e48\u80af\u5b9a\u8fd8\u8981\u653e\u5165\u4e00\u4e2a\u6570\u5b57 $z$\u3002\u800c\u8fd9\u4e9b\u90fd\u662f\u53ef\u4ee5\u6c42\u51fa\u7684\uff0c\u6700\u540e\u5f62\u6210\u4e00\u4e2a\u300c\u73af\u300d\u56de\u5230 $x$\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u79cd\u65b9\u6848\u3002\n\n\u6211\u5f00\u59cb\u4e5f\u662f\u8fd9\u4e48\u60f3\u7684\uff0c\u8fd9\u6837\u7684\u601d\u8def\u5176\u5b9e\u5df2\u7ecf\u63a5\u8fd1\u6b63\u89e3\uff0c\u7136\u800c\u6211\u4eec\u5ffd\u7565\u4e86\u4e00\u4e2a\u95ee\u9898\u2014\u2014\u8fd9\u6837\u7684\u300c\u73af\u300d\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\uff0c\u4e8e\u662f\u6211\u4eec\u5fc5\u987b\u8981\u628a\u8fd9\u9053\u9898\u8f6c\u6362\u6210\u4e00\u4e2a\u4fbf\u4e8e\u89e3\u51b3\u7684\u56fe\u8bba\u6a21\u578b\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u5b57\u5efa\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u8fde\u5411\u53e6\u5916\u4e00\u4e2a\u4e0e\u4e4b\u5339\u914d\u7684\u70b9\uff08\u5c31\u50cf\u521a\u624d\u7684 $x$ \u548c $y$ \u90a3\u6837\u5339\u914d\uff1a\u6211\u53d6\u51fa\u4e86\u8fd9\u4e2a\u6570\u5b57\u540e\uff0c\u5c31\u8981\u518d\u5411\u5b83\u6240\u5728\u7684\u76d2\u5b50\u91cc\u88c5\u4e00\u4e2a\u786e\u5b9a\u7684\u6570\u5b57\uff09\u3002\u8fd9\u6837\u5927\u7ea6\u4f1a\u5f62\u6210\u4e00\u4e2a\u6709 $N$ \u4e2a\u70b9 $N$ \u6761\u8fb9\u7684\u56fe\u3002\u663e\u7136\uff0c\u8fd9\u662f\u4e00\u4e2a\u7531\u5185\u5411\u6811\u548c\u6811\u7ec4\u6210\u7684\u4e00\u4e2a\u4e71\u4e03\u516b\u7cdf\u7684\u68ee\u6797\u3002\u6211\u4eec\u73b0\u5728\u8981\u628a\u5176\u4e2d\u7684\u73af\u63ea\u51fa\u6765\uff0c\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u6216 tarjan\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002\n\n`update\uff1a\u83dc\u9e1f\u7b14\u8005\u53d1\u73b0\u5176\u5b9e\u4e0d\u7528\u90a3\u4e48\u9ebb\u70e6\u627e\u73af\uff0c\u9274\u4e8e\u5b83\u662f\u6709\u5411\u56fe\u76f4\u63a5\u904d\u5386\u5c31\u597d\u4e86\u2026\u2026`\n\n\u628a\u73af\u627e\u51fa\u6765\u540e\u4ecd\u6709\u4e00\u4e2a\u95ee\u9898\u2014\u2014\u6211\u4eec\u8981\u4fdd\u8bc1\u6240\u6709\u7684\u7bb1\u5b50\u91cc\u90fd\u53d6\u51fa\u4e86\u6570\u5b57\uff08\u5bf9\u4e8e\u4e0d\u7528\u53d6\u6570\u5b57\u7684\u7bb1\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u89c6\u4e3a\u53d6\u51fa\u6765\u53c8\u653e\u56de\u53bb\uff09\uff0c\u800c\u6bcf\u4e00\u4e2a\u73af\u53ef\u80fd\u53ea\u5bf9\u5e94\u4e86\u82e5\u5e72\u4e2a\u7bb1\u5b50\uff0c\u8fd8\u53ef\u80fd\u6709\u91cd\u590d\u3002\n\n\u8fd9\u65f6\u6ce8\u610f\u5230\u6570\u636e\u8303\u56f4 $k \\leq 15$\uff0c\u663e\u7136\u60f3\u5230\u72b6\u6001\u538b\u7f29\u3002\u6211\u4eec\u628a\u6bcf\u4e2a\u73af\u6d89\u53ca\u5230\u7684\u7bb1\u5b50\u538b\u6210\u4e00\u4e2a\u6700\u591a\u4ec5 $15$ \u4f4d\u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u5176\u4e2d\u6d89\u53ca\u5230\u7684\u7bb1\u5b50\u90a3\u4e00\u4f4d\u5c31\u4e3a $1$\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u8868\u8ff0\uff0c\u6211\u4eec\u6682\u65f6\u5b9a\u4e49\u4ec5\u4e00\u4e2a\u73af\u72b6\u538b\u540e\u7684\u79f0\u4e3a\u201c\u57fa\u7840\u7bb1\u5b50\u5e8f\u5217\u201d\uff0c\u4e00\u4e2a\u6216\u591a\u4e2a\u73af\u72b6\u538b\u540e\u7684\u4e3a\u201c\u7bb1\u5b50\u5e8f\u5217\u201d\u3002\n\n\u7531\u4e8e\u53ea\u9700\u8981\u7ed9\u51fa\u4efb\u610f\u4e00\u79cd\u65b9\u6848\uff0c\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u89e3\u51b3\uff1a\u5982\u4f55\u628a\u4e0d\u540c\u7684\u73af\u5bf9\u5e94\u7684\u57fa\u7840\u7bb1\u5b50\u5e8f\u5217\u62fc\u51d1\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u5408\u5e76\u7684\u7bb1\u5b50\u5e8f\u5217\uff0c\u6700\u540e\u5f97\u5230\u4e00\u4e2a $k$ \u4f4d\u5168\u662f $1$ \u7684\u4e8c\u8fdb\u5236\u4e32\uff08\u5373\u6240\u6709\u7bb1\u5b50\u90fd\u53d6\u51fa\u53c8\u653e\u56de\u4e86\u6570\u5b57\uff09\u3002\n\n\u5f00\u59cb\u60f3\u5230\u4e86\u7206\u641c\uff0c\u4f46\u8fd9\u6837\u590d\u6742\u5ea6\u6700\u574f\u4f1a\u8fbe\u5230 $15!$\uff0c\u4e0d\u80fd\u63a5\u53d7\u3002\u56e0\u6b64\u8003\u8651\u4f7f\u7528 dp \u4f18\u5316\u3002\n\n\u6211\u4eec\u5728\u7b2c\u4e00\u7ef4\u679a\u4e3e\u72b6\u6001\uff08\u7bb1\u5b50\u5e8f\u5217\uff09\uff0c\u7b2c\u4e8c\u7ef4\u679a\u4e3e\u5b83\u7684\u5b50\u96c6\u3002\u6211\u4eec\u73b0\u5728\u53ea\u9700\u8981\u8003\u8651\u8fd9\u4e2a\u7b2c\u4e00\u7ef4\u7684\u7bb1\u5b50\u5e8f\u5217\u80fd\u5426\u7531\u7b2c\u4e8c\u7ef4\u7684\u5b50\u96c6\u548c\u5b83\u5728\u7b2c\u4e00\u7ef4\u7bb1\u5b50\u5e8f\u5217\u4e0b\u7684\u8865\u96c6\u62fc\u51d1\u800c\u6210\uff0c\u6ce8\u610f\u6b64\u65f6\u5b50\u96c6\u548c\u8865\u96c6\u90fd\u5df2\u7ecf\u5728\u7b2c\u4e00\u7ef4\u88ab\u679a\u4e3e\u8fc7\u4e86\u3002\n\n\u663e\u7136\u5199\u51fa dp \u65b9\u7a0b\uff1a\u5176\u4e2d $f[i]$ \u6709\u503c\u5f53\u4e14\u4ec5\u5f53 $i$ \u662f\u57fa\u7840\u7bb1\u5b50\u5e8f\u5217\uff0c$vis[i]$ \u6709\u503c\u5f53\u4e14\u4ec5\u5f53 $i$ \u662f\u7bb1\u5b50\u5e8f\u5217\u3002\n```cpp\nfor(int i = 0; i < (1 << K); ++i) {\n\t\tif(f[i]) vis[i] = 1;\n\t\tfor(int j = i; j; j = (j - 1) & i) {\n\t\t\tif(vis[j] && vis[i ^ j]) {\n\t\t\t\tvis[i] = 1;\n\t\t\t\tbef[i] = j;\n\t\t\t}\n\t\t\tif(vis[i]) break;\n\t\t}\n\t}\n```\n$bef$ \u6570\u7ec4\u5b58\u50a8\u4e86\u5f53\u524d\u7bb1\u5b50\u5e8f\u5217 $i$ \u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u4fbf\u4e8e\u4e4b\u540e\u7684\u8f93\u51fa\u3002\n\n\u8f93\u51fa\u65b9\u6848\u90e8\u5206\uff0c\u53ea\u9700\u8981\u9012\u5f52\u5904\u7406\u3002\u5982\u679c\u5f53\u524d $f[i]$ \u6709\u503c\uff0c\u8bf4\u660e\u662f\u57fa\u7840\u7bb1\u5b50\u5e8f\u5217\uff0c\u5c31\u8981\u628a\u5b83\u5bf9\u5e94\u7684\u73af\u7684\u4fe1\u606f\u5904\u7406\u540e\u8f93\u51fa\u3002\u5982\u679c\u6ca1\u6709\u503c\uff0c\u8bf4\u660e\u8fd9\u4e2a\u7bb1\u5b50\u5e8f\u5217\u662f\u5408\u5e76\u51fa\u6765\u7684\uff0c\u6839\u636e $bef$ \u6570\u7ec4\u9012\u5f52\u89e3\u51b3\u5373\u53ef\u3002\u7ec6\u8282\u53c2\u89c1\u4ee3\u7801\u3002\n\n### \u7a0b\u5e8f\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <map>\n\n#define Maxk 16\n#define Maxn 750010\n#define LL long long\n\nusing namespace std;\n\nint read() {\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile(c < '0' || c > '9') {\n\t\tif(c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile('0' <= c && c <= '9') {\n\t\tx = x * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\nLL K, N, tot, sum[Maxk];\nLL deg[Maxn], f[1 << Maxk], bef[1 << Maxk];\nbool vis[1 << Maxk];\n\nstruct Edge {\n\tint next, to;\n}\nedge[Maxn];\nint head[Maxn], edge_num;\n\nstruct Point {\n\tLL val, bel;\n}\npoint[Maxn];\nmap <LL, LL> check;\n\nvoid add_edge(int from, int to) {\n\tedge[++edge_num].next = head[from];\n\tedge[edge_num].to = to;\n\thead[from] = edge_num;\n}\n\nvoid fl(int first, int u, int sta) {\n\tif(u == first && !deg[u]) {f[sta] = first; return;}\n\tdeg[u] = 0;\n\tint nowu = 1 << (point[u].bel - 1);\n\tif(sta & nowu) return;\n\tfl(first, edge[head[u]].to, sta | nowu);\n}\n\nint stack[Maxn], top;\nvoid topsort() {\n\tfor(int i = 1; i <= N; ++i) if(!deg[i]) stack[++top] = i;\n\twhile(top) {\n\t\tint u = stack[top--];\n\t\tint v = edge[head[u]].to;\n\t\t--deg[v];\n\t\tif(!deg[v]) stack[++top] = v;\n\t}\n\tfor(int i = 1; i <= N; ++i) if(deg[i]) fl(i, i, 0);\n}\n\nLL out1[Maxk], out2[Maxk];\n\nvoid output(int sta) {\n\tif(f[sta]) {\n\t\tint u = f[sta];\n\t\twhile(true) {\n\t\t\tint v = edge[head[u]].to;\n\t\t\tout1[point[v].bel] = point[v].val;\n\t\t\tout2[point[v].bel] = point[u].bel;\n\t\t\tu = v;\n\t\t\tif(u == f[sta]) break;\n\t\t}\n\t}\n\telse {\n\t\toutput(bef[sta]);\n\t\toutput(sta ^ bef[sta]);\n\t}\n}\n\nint main() {\n\tK = read();\n\tLL size, val;\n\tfor(int i = 1; i <= K; ++i) {\n\t\tsize = read();\n\t\tfor(int j = 1; j <= size; ++j) {\n\t\t\tval = read();\n\t\t\tpoint[++N].val = val, point[N].bel = i;\n\t\t\tsum[i] += val, tot += val; \n\t\t}\n\t}\n\tif(tot % K) {printf(\"No\"); return 0;}\n\telse tot = tot / K;\n\tfor(int i = 1; i <= N; ++i) check[point[i].val] = i;\n\tfor(int i = 1; i <= N; ++i) {\n\t\tint u = i, v = check[tot - sum[point[i].bel] + point[i].val];\n\t\tif(!v) continue;\n\t\tadd_edge(u, v); ++deg[v];\n\t}\n\ttopsort();\n\tfor(int i = 0; i < (1 << K); ++i) {\n\t\tif(f[i]) vis[i] = 1;\n\t\tfor(int j = i; j; j = (j - 1) & i) {\n\t\t\tif(vis[j] && vis[i ^ j]) {\n\t\t\t\tvis[i] = 1;\n\t\t\t\tbef[i] = j;\n\t\t\t}\n\t\t\tif(vis[i]) break;\n\t\t}\n\t}\n\tif(vis[(1 << K) - 1]) {\n\t\tprintf(\"Yes\\n\");\n\t\toutput((1 << K) - 1);\n\t\tfor(int i = 1; i <= K; ++i) printf(\"%lld %lld\\n\", out1[i], out2[i]);\n\t}\n\telse printf(\"No\");\n\treturn 0;\n}\n```\n\n\u53ef\u80fd\u6709\u4eba\u4f1a\u8ba4\u4e3a\u6211\u628a\u4e00\u4e2a\u7b80\u5355\u7684\u9898\u76ee\u8bf4\u7684\u6bd4\u8f83\u7e41\u7410\uff0c\u6216\u8bb8\u5427\uff0c\u4e0d\u8fc7\u6211\u8ba4\u4e3a\u8bb0\u5f55\u601d\u7ef4\u7684\u6bcf\u4e00\u70b9\u6ef4\u4f55\u5c1d\u4e0d\u597d\u5462\uff1f",
        "postTime": 1583028647,
        "uid": 39278,
        "name": "Sqrtyz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1242C \u3010Sum Balance\u3011"
    },
    {
        "content": "## \u9898\u89e3\u601d\u8def\uff1a\n\u65e0\u89e3\u60c5\u51b5\uff1a\n\n>\u6240\u6709\u7684\u4ef7\u503c\u548c\u4e0d\u662f $k$ \u7684\u500d\u6570\u90a3\u4e48\u4ed6\u5c31\u65e0\u89e3\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u5408\u6cd5\u90fd\u662f\u4e00\u4e2a\u73af\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u770b\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u80fd\u5426\u6784\u6210\u5168\u4e00\u4e32\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5177\u4f53\u600e\u4e48\u505a\uff1a\n> \u9996\u5148\u5224\u65ad\u662f\u5426\u6709\u89e3\uff0c\u5373\u4ed6\u4eec\u7684\u4ef7\u503c\u548c $\\mod k = 0$\u3002\n\n>\u9884\u5904\u7406\u73af\u3002\n\n>\u72b6\u538b dp $\\longrightarrow$ \u4e8c\u8fdb\u5236\u5168 $1$\u3002\n\n## AC CODE:\n```cpp\n#include <cstring>\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <map>\nusing namespace std;\ntypedef long long ll;\nll sum[15];\nvector <int> a[15];\nmap <ll , pair <int , int>> mp;\nbool vis[1 << 15] , dp[1 << 15];\nvector <pair <pair<int , int> , int>> mark[1 << 15];\nint pre[1 << 15];\npair <int , int> ans[15];\nint main() {\n    int k;\n    scanf (\"%d\" , &k);\n    ll v = 0;\n    for (int i = 0; i < k; ++ i) {\n        int n;\n        scanf (\"%d\" , &n);\n        a[i].resize (n);\n        for (int j = 0; j < n; ++ j) {\n            scanf (\"%d\" , &a[i][j]);\n            sum[i] += a[i][j];//sum[i]\u7b2ci\u7ec4\u7684\u548c\n            mp[a[i][j]] = {i , j};//i\u7ec4j\u4e2a\n        }\n        v += sum[i];//\u603b\u548c \n    }\n    if (v % k != 0) return puts(\"No\") , 0;//\u65e0\u89e3\n    v /= k;//\u5206\u6210k\u4e2a\u5c0f\u6bb5\uff0c\u6bcf\u6bb5\u7684\u548c\n    for (int i = 0; i < k; ++ i) {//\u9884\u5904\u7406\u73af\n        for (int j = 0; j < a[i].size(); ++ j) {\n            ll cur = a[i][j];//\u679a\u4e3ea[i][j]\uff0c\u590d\u6742\u5ea615\u00d75000\n            int now = 0;//\u73b0\u5728\u7684\u72b6\u6001\n            bool ok = true;\n            vector <pair<pair <int , int> , int>>b;\n            while (1) {\n                int y = mp[cur].first;//\u7528map\u8bb0\u5f55\n                cur = v - sum[y] + cur;//\u4ed6\u5bf9\u5e94\u7684\u503c\uff1asum[i]+a[i][j]+?=v,\u6211\u4eec\u5df2\u77e5\uff1asum[i],v,\n                if (!mp.count(cur)) {\n                    ok = false;\n                    break;\n                }\n                auto x = mp[cur];\n                if (now & (1 << x.first)) {\n                    ok = false;\n                    break;\n                }\n                now |= (1 << x.first);\n                b.push_back ({{x.first , x.second} , y});\n                if (x.first == i) {//\u4e00\u76f4\u5f80\u524d\u627e\uff0c\u53c8\u56de\u5230\u4e86\u671f\u70b9\uff0c\u6709\u73af\n                    if (x.second != j) ok = false;\n                    break;\n                }\n            }\n            if (ok) {\n                vis[now] = true;\n                mark[now] = b;\n            }\n        }\n    }\n    dp[0] = 1;\n    for (int s = 0; s < (1 << k); ++ s) {//\u679a\u4e3e\u5b50\u96c6\uff0c\u72b6\u538bDP\n        for (int ns = s; ns; ns = (ns - 1) & s)\n            if (vis[ns] && dp[s ^ ns]) {\n                dp[s] = 1;\n                pre[s] = ns;\n                break;\n            }\n    }\n    if (!dp[(1 << k) - 1]) return puts(\"No\") , 0;//\u6ca1\u6709\u51681\u90a3\u4e48\u4e5f\u65e0\u89e3\n    int s = 1 << k;\n    -- s;\n    while (s) {\n        for (auto &x : mark[pre[s]]) {\n            ans[x.first.first] = {a[x.first.first][x.first.second] , x.second};\n        }\n        s ^= pre[s];\n    }\n    puts(\"Yes\");\n    for (int i = 0; i < k; ++ i)\n        printf (\"%d %d\\n\" , ans[i].first , ans[i].second + 1);\n    return 0;\n}\n```\n\u7801\u5b57\u4e0d\u6613\uff0c\u6c42\u8d5e\uff01",
        "postTime": 1651498779,
        "uid": 528430,
        "name": "FiraCode",
        "ccfLevel": 0,
        "title": "CF1242C\u9898\u89e3"
    },
    {
        "content": "\n## \u9898\u610f\n\n\u6709 $k$ \u4e2a\u76d2\u5b50\uff0c\u6bcf\u4e2a\u76d2\u5b50\u91cc\u9762\u6709 $n_i$ \u4e2a\u7edd\u5bf9\u503c\u5c0f\u4e8e $10^9$ \u7684\u6570\uff08\u6240\u6709\u6570\u4e92\u4e0d\u76f8\u540c\uff09\u3002\n\n\u8981\u6c42\u4ece\u6bcf\u4e2a\u76d2\u5b50\u91cc\u62ff\u51fa**\u521a\u597d\u4e00\u4e2a**\u5143\u7d20\uff0c\u5c06\u5176\u653e\u5165\u4efb\u610f\u7684\u4e00\u4e2a\u76d2\u5b50\u5f53\u4e2d\uff08\u53ef\u4ee5\u662f\u81ea\u5df1\uff09\uff0c\u5e76\u4e14\u6bcf\u4e00\u4e2a\u76d2\u5b50\u53ea\u4f1a\u65b0\u653e\u5165**\u4e00\u4e2a**\u5143\u7d20\u3002\n\n\u95ee\u4f60\u662f\u5426\u6709\u53ef\u80fd\u8ba9\u6bcf\u4e00\u4e2a\u76d2\u5b50\u91cc\u7684\u6570\u7684\u548c\u90fd\u76f8\u7b49\uff0c\u5e76\u7ed9\u51fa\u65b9\u6848\u3002\n\n## \u9898\u89e3\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e00\u4e2a\u76d2\u5b50\u90fd\u53ea\u4f1a\u62ff\u51fa\u4e00\u4e2a\uff0c\u5f97\u5230\u4e00\u4e2a\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a\u76d2\u5b50\u91cc\u7684\u5143\u7d20\u4e2a\u6570\u662f\u4e0d\u53d8\u7684\u3002\n\n\u8bbe\u62ff\u8d70\u7684\u5143\u7d20\u662f $x$ \uff0c\u653e\u8fdb\u6765\u7684\u662f $y$ \u3002\n\n\u6211\u4eec\u8981\u6539\u53d8\u4e00\u4e2a\u76d2\u5b50\u7684\u5143\u7d20\u4e4b\u548c\uff0c\u5c31\u53ea\u80fd\u9760 $y-x$ \u6765\u6539\u53d8\u3002\n\n\u800c\u9898\u76ee\u91cc\u4fdd\u8bc1\u4e0d\u4f1a\u6709\u91cd\u590d\u51fa\u73b0\u7684\u6570\u3002\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u76d2\u5b50\uff0c\u5982\u679c\u4f60\u62ff\u8d70\u7684 $x$ \u56fa\u5b9a\uff0c\u90a3\u4e48\u60f3\u8981\u6709\u89e3\u7684\u8bdd\uff0c\u5b83\u5bf9\u5e94\u7684 $y$ \u4e5f\u5e94\u8be5\u662f\u56fa\u5b9a\u7684\u3002\n\n\u5e76\u4e14\u56e0\u4e3a\u5143\u7d20\u4e0d\u4f1a\u5220\u9664\u6216\u8005\u6dfb\u52a0\uff0c\u6240\u4ee5\u6240\u6709\u5143\u7d20\u4e4b\u548c\u662f\u4e0d\u53d8\u7684\uff0c\u4e5f\u5c31\u662f\uff0c\u6211\u4eec\u8981\u8ba9\u6bcf\u4e00\u4e2a\u76d2\u5b50\u7684\u548c\u6700\u7ec8\u53d8\u6210\u7684\u90a3\u4e2a\u6570 $Goal$ \u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\u3002\n\n\u6240\u4ee5\u8bf4\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u90fd**\u53ef\u80fd**\u5b58\u5728\u4e00\u5bf9 $x\\to y$ \u7684\u5bf9\u5e94\u5173\u7cfb\u3002\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u60f3\u5230\uff0c\u53ef\u4ee5\u5229\u7528\u6709\u5411\u56fe\u6765\u7ef4\u62a4\u8fd9\u6837\u7684\u5173\u7cfb\u3002\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u5b57 $x$\uff0c\u6211\u4eec\u8ba9\u4ed6\u53d8\u6210\u4e00\u4e2a\u56fe\u4e0a\u7684\u8282\u70b9\uff0c\n\n\u5e76\u4ee4\u4ed6\u8fde\u5411\u4e00\u4e2a\u6570 $y$ \u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u6ee1\u8db3 $x$ \u6240\u5728\u7684\u76d2\u5b50\u7684\u5143\u7d20\u548c\u52a0\u4e0a $y-x$ \u80fd\u7b49\u4e8e $Goal$\u3002\n\n\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8282\u70b9 $y$ \uff0c\u6211\u4eec\u4ee4\u4ed6\u8fde\u5411\u4e00\u4e2a\u5b9e\u9645\u4e0a\u4e0d\u5b58\u5728\u7684\u70b9 $nil$ \uff0c\u8868\u793a\u6ca1\u6cd5\u627e\u5230\u4e00\u4e2a\u53ef\u4ee5\u6ee1\u8db3\u6761\u4ef6\u7684 $y$\u3002 \n\n\u5f88\u660e\u663e\uff0c\u56e0\u4e3a\u6570\u662f\u4e92\u4e0d\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u70b9\u7684\u51fa\u5ea6\u4e00\u5b9a\u4e3a $1$\u3002\n\n\u5f53\u7136\uff0c\u8fde\u5b8c\u8fb9\u4e4b\u540e\u662f\u53ef\u4ee5\u51fa\u73b0\u81ea\u73af\u7684\uff08\u6bd4\u5982\u4e0b\u9762\u7684\u6837\u4f8b\uff09\n\n\u624b\u6413\u4e00\u4e0b\u6837\u4f8b\uff1a\n\n[![53TvVJ.png](https://z3.ax1x.com/2021/10/15/53TvVJ.png)](https://imgtu.com/i/53TvVJ)\n\n\u9664\u53bb\u548c $nil$ \u76f8\u8fde\u7684\u8282\u70b9\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5185\u5411\u6811\u68ee\u6797\u3002\n\n\u518d\u89c2\u5bdf\u4e00\u4e0b\u8f93\u51fa\uff1a\n\n```\nYes\n7 2\n2 3\n5 1\n10 4\n```\n\n\u4f60\u4f1a\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u7b54\u6848\u662f\u7531\u521a\u597d\u5305\u542b\u6bcf\u4e2a\u76d2\u5b50\u91cc\u7684\u67d0\u4e00\u4e2a\u5143\u7d20\u7684\u591a\u4e2a\u73af\u7ec4\u6210\u7684\u3002\n\n\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e00\u4e2a\u76d2\u5b50\u91cc\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u8282\u70b9\u5728\u8fd9\u4e9b\u73af\u4e0a\u3002\n\n\u56e0\u4e3a\u5982\u679c\u5173\u7cfb\u6784\u6210\u4e00\u4e2a\u73af\uff0c\u90a3\u4e48\u8bc1\u660e\u73af\u4e0a\u7684\u8282\u70b9\u80fd\u591f\u76f8\u4e92\u4f7f\u5bf9\u65b9\u7684\u76d2\u5b50\u5f53\u4e2d\u7684\u5143\u7d20\u4e4b\u548c\u7b49\u4e8e $Goal$\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u627e\u5230\u51e0\u4e2a\u80fd\u6ee1\u8db3\u6761\u4ef6\u7684\u73af\u5c31\u884c\u4e86\u3002\n\n\u53d1\u73b0\u9898\u76ee\u7ed9\u7684 $k$ \u662f $\\le 15$ \u7684\u3002\n\n\u5e76\u4e14\u6211\u4eec\u9700\u8981\u7684\u662f\u6bcf\u4e2a\u76d2\u5b50\u91cc**\u53ea\u6709\u4e00\u4e2a**\u5143\u7d20\u5728\u8fd9\u4e9b\u73af\u4e0a\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u72b6\u538b DP \u3002\n\n\u56e0\u4e3a\u76d2\u5b50\u53ea\u6709 $15$ \u4e2a\uff0c\u6240\u4ee5\u73af\u4e5f\u6700\u591a\u53ea\u6709 $15$ \u4e2a\u3002\n\n\u7528\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u6765\u8868\u793a\u4f60\u5f53\u524d\u5df2\u7ecf\u6ee1\u8db3\u6761\u4ef6\u7684\u76d2\u5b50\u7684\u72b6\u6001\u3002\n\n\u6211\u4eec\u8bbe $f_{msk}$ \u8868\u793a\u5f53\u4f60\u5904\u7406\u5230\u7684\u76d2\u5b50\u7684\u72b6\u6001\u662f $msk$ \u7684\u65f6\u5019\u7684**\u65b9\u6848** \uff08\u6ce8\u610f\u662f\u65b9\u6848\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5229\u7528 `vector` \u8bb0\u5f55\u5373\u53ef\uff09\u3002\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a**\u4e0d\u6ee1\u8db3\u6761\u4ef6**\uff0c\u4e5f\u5c31\u662f\u4e8c\u8fdb\u5236\u4e0b\u6709\u81f3\u5c11\u4e00\u4f4d\u4e0d\u662f $1$ \u7684\u72b6\u6001 $msk$ \uff0c\u6211\u4eec\u8003\u8651\u53bb\u627e\u5b83\u7684\u8865\u96c6\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u679a\u4e3e\u53e6\u5916\u7684\u4e00\u4e2a\u72b6\u6001 $msk^\\prime$ \uff0c\u770b $\\complement_{msk}$ \u662f\u4e0d\u662f $msk^\\prime$ \u7684\u5b50\u96c6\u5373\u53ef\u3002\n\n\u5982\u679c\u6709\u91cd\u590d\u51fa\u73b0\u540c\u4e00\u4e2a\u76d2\u5b50\u91cc\u7684\u4e0d\u540c\u5143\u7d20\uff0c\u6211\u4eec\u5c31\u9700\u8981\u6392\u9664\u6389\u679a\u4e3e\u51fa\u6765\u7684\u72b6\u6001 $msk^\\prime$\u3002\n\n\u6700\u540e\u5bf9 $f_{2^k-1}$ \u6392\u4e2a\u5e8f\u8f93\u51fa\u5c31\u597d\u4e86\u3002\n\nCode:\n\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n#define ld long double\n#define pii pair<int,int>\n#define fr first\n#define sc second\n#define pb push_back\n#define mk make_pair\n\nconstexpr int boxsi=20;\nconstexpr int stasi=(1<<16);\nint k,n[boxsi];\nint Sum=0,sum[boxsi],Goal;\n// bitset<stasi>vis;\nbool vis[stasi];\nvector<pii>f[stasi];\nunordered_map<int,int>rec;\nset<int>S,Fr; \n\nsigned main(){\n    auto comp=[&](pii a,pii b)->bool{ return rec[a.fr]<rec[b.fr];};\n    auto Go=[&](int x)->int{ return x+Goal-sum[rec[x]];};\n    scanf(\"%lld\",&k);\n    for(register int i=1;i<=k;++i){\n        scanf(\"%lld\",&n[i]);\n        for(register int j=1,rmp;j<=n[i];++j){\n            scanf(\"%lld\",&rmp);\n            rec[rmp]=i,Sum+=rmp,sum[i]+=rmp;\n        }\n    }\n    Goal=Sum/k;\n    if(Sum%k) return puts(\"No\"),0; //\u660e\u663e\u65e0\u89e3\uff0c\u76f4\u63a5\u7279\u5224\u3002\n    for(auto x:rec){\n        register int i=x.fr;\n        while(rec.find(i)!=rec.end() && S.find(i)==S.end() && Fr.find(i)==Fr.end()){\n            Fr.insert(i),i=Go(i);\n        }\n        bool fa=false;\n        if(Fr.find(i)!=Fr.end()){\n            vector<pii>lep;\n            register int j=i,msk=0;\n            do{int to=Go(i);\n               lep.pb(mk(to,rec[i]));\n               if(msk&(1<<(rec[i]-1))) fa=true;\n               msk^=(1<<(rec[i]-1)),i=to;\n            }while(i!=j);\n            if(!fa && !vis[msk]) f[msk]=lep,vis[msk]=true;\n        }\n        for(auto y:Fr) S.insert(y);\n        Fr.clear();\n    }\n    for(register int msk=1;msk<(1<<k);++msk){\n        if(!vis[msk]){\n            for(register int i=msk;i>0;i=(i-1)&msk){\n                if(vis[i] && vis[msk-i]){\n                    vis[msk]=true;\n                    for(auto x:f[i]) f[msk].pb(x);\n                    for(auto x:f[msk-i]) f[msk].pb(x);\n                    break;\n                }\n            }\n        }\n    }\n    if(!vis[(1<<k)-1]) return puts(\"No\"),0;\n    else{\n        puts(\"Yes\");\n        vector<pii>ans=f[(1<<k)-1];\n        sort(ans.begin(),ans.end(),comp);\n        for(auto x:ans){\n            printf(\"%lld %lld\\n\",x.fr,x.sc);\n        }return 0;\n    }\n}\n```",
        "postTime": 1634286769,
        "uid": 304550,
        "name": "black_trees",
        "ccfLevel": 0,
        "title": "CF 1242C Solution"
    }
]