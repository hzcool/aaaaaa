[
    {
        "content": "\u4ee4 $mp=p^{-1}$\uff0c\u5373 $mp_{p_i}=i$\uff0c\u5219\u539f\u5f0f\u6539\u5199\u4e3a\uff1a\n\n$$\\sum\\limits_{i=1}^n |mp_{q_i}-q_{i+1}|$$\n\n\u53ef\u4ee5\u7406\u89e3\u4e3a\u5c06 $n$ \u4e2a\u4e8c\u5143\u7ec4 $(i,mp_i)$ \u6392\u6210\u4e00\u4e2a\u73af\uff0c\u4ee3\u4ef7\u5373\u5728\u4e8c\u5143\u7ec4\u95f4\u8df3\u8f6c\u7684\u8ddd\u79bb\u4e4b\u548c\u3002\n\n\u5c06 $p$\uff08\u6216 $mp$\uff09\u89c6\u4e3a\u4e00\u4e2a\u7f6e\u6362\uff0c\u5c06\u6bcf\u4e2a\u5faa\u73af\u8282\u67d3\u4e0a\u4e00\u79cd\u989c\u8272\uff0c\u611f\u6027\u7406\u89e3\u5e94\u8be5\u5c3d\u53ef\u80fd\u5728\u540c\u79cd\u989c\u8272\u95f4\u8df3\u8f6c\uff08\u5373\u5c3d\u53ef\u80fd\u4f7f $mp_{q_i}=q_{i+1}$\uff09\u3002\u8bbe\u5171\u6709 $k$ \u79cd\u989c\u8272\u3002\n\n\u8003\u8651\u5728\u8fde\u8fb9 $(mp_{q_i},q_{i+1})$\uff0c\u5219\u6bcf\u4e2a\u70b9\u6070\u6709\u4e00\u6761\u5165\u8fb9\u4e0e\u4e00\u6761\u51fa\u8fb9\uff0c\u6545\u5f62\u6210\u4e00\u4e9b\u73af\u3002\u6ce8\u610f\u5230\u5927\u5c0f\u4e3a $m$ \u7684\u73af\u7684\u8d21\u732e\u81f3\u5c11\u4e3a $2(m-1)$\uff0c\u53d6\u7b49\u5f53\u4e14\u4ec5\u5f53\u73af\u7684\u70b9\u7f16\u53f7\u8fde\u7eed\u4e14\u53ef\u4ee5\u88ab\u62c6\u5206\u4e3a\u5355\u589e\u53ca\u5355\u51cf\u7684\u4e24\u6761\u94fe\u3002\n\n\u4e3a\u4e86\u80fd\u904d\u5386\u5230\u6574\u5f20\u56fe\uff0c\u8fd8\u8981\u6c42\u82e5\u5c06\u6bcf\u79cd\u989c\u8272\u7684\u70b9\u5206\u522b\u7f29\u8d77\u6765\u5e76\u5c06\u8fb9\u770b\u4f5c\u65e0\u5411\u8fb9\uff0c\u5219\u6240\u6709\u989c\u8272\u5fc5\u987b\u8fde\u901a\u3002\n\n\u5927\u5c0f\u4e3a $m$ \u7684\u73af\u81f3\u591a\u80fd\u51cf\u5c11 $m-1$ \u4e2a\u989c\u8272\u8fde\u901a\u5757\uff0c\u800c\u603b\u5171\u51cf\u5c11\u4e86 $k-1$ \u4e2a\u989c\u8272\u8fde\u901a\u5757\uff0c\u8bf4\u660e $\\sum\\limits_i (m_i-1) \\geq k-1$\uff0c\u6545\u7b54\u6848\u6709\u4e0b\u754c $2(k-1)$\u3002\n\n\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u4e0b\u754c\u53ef\u4ee5\u8fbe\u5230\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a\n\n+ \u6bcf\u4e2a\u70b9\u6070\u6709\u4e00\u6761\u5165\u8fb9\u4e0e\u4e00\u6761\u51fa\u8fb9\u3002\uff08\u5408\u6cd5\u6027\uff09\n\n+ \u6240\u6709\u73af\u4f7f\u5f97\u6240\u6709\u989c\u8272\u76f8\u4e92\u8fde\u901a\u3002\uff08\u5408\u6cd5\u6027\uff09\n\n+ \u6bcf\u4e2a\u73af\u7684\u70b9\u7f16\u53f7\u8fde\u7eed\u4e14\u53ef\u4ee5\u88ab\u62c6\u5206\u4e3a\u5355\u589e\u53ca\u5355\u51cf\u7684\u4e24\u6761\u94fe\u3002\uff08\u6700\u4f18\u6027\uff09\n\n+ \u6bcf\u4e2a\u73af\u4e0d\u4f1a\u91cd\u590d\u5408\u5e76\u67d0\u4e24\u79cd\u989c\u8272\u3002\uff08\u6700\u4f18\u6027\uff09\n\n\u5bf9\u4e8e Easy Version\uff0c\u53ea\u9700\u8003\u8651\u6bcf\u4e2a $i \\in [1,n)$\uff0c\u82e5 $col_i \\neq col_{i+1}$ \u4e14\u8fd9\u4e24\u79cd\u989c\u8272\u672a\u88ab\u5408\u5e76\u5c31\u5c06\u8fd9\u4e24\u4e2a\u70b9\u5408\u5e76\uff0c\u6700\u540e\u5c06\u6240\u6709\u5408\u5e76\u51fa\u7684\u533a\u95f4\u53d8\u6210\u73af\u5373\u53ef\u3002\n\n\u5bf9\u4e8e Hard Version\uff0c\u6309\u5b57\u5178\u5e8f\u5c1d\u8bd5\u52a0\u5165\u6bcf\u6761\u8fb9\uff0c\u53ea\u9700\u8981\u5224\u65ad\u76ee\u524d\u52a0\u5165\u7684\u8fb9\u662f\u5426\u80fd\u591f\u6784\u9020\u51fa\u5408\u6cd5\u89e3\u5373\u53ef\u3002\n\n\u6ce8\u610f\u5230\u5df2\u7ecf\u8fde\u51fa\u7684\u8fb9\u53ea\u53ef\u80fd\u662f\u73af\uff0c\u5355\u589e\u94fe\u6216\u5355\u51cf\u94fe\uff0c\u6545\u53ef\u4ee5\u8fd9\u6837\u5224\u65ad\uff1a\n\n+ \u4e0d\u5b58\u5728\u4e24\u6761\u5355\u589e\u94fe\u76f8\u4ea4\uff0c\u4e0d\u5b58\u5728\u4e24\u6761\u5355\u51cf\u94fe\u76f8\u4ea4\uff08\u81ea\u73af\u540c\u65f6\u7b97\u4f5c\u5355\u589e\u94fe\u53ca\u5355\u51cf\u94fe\uff09\u3002\n\n+ \u4e0d\u5b58\u5728\u672a\u8fde\u8fb9\u7684\u70b9\u540c\u65f6\u88ab\u5355\u589e\u94fe\u53ca\u5355\u51cf\u94fe\u8986\u76d6\u3002\n\n+ \u76ee\u524d\u8fde\u7684\u8fb9\u6ca1\u6709\u91cd\u590d\u5408\u5e76\u67d0\u4e24\u79cd\u989c\u8272\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5bf9\u6240\u6709\u82e5 $col_i \\neq col_{i+1}$ \u4e14 $(i,i+1)$ \u88ab\u67d0\u6761\u8fb9\u8986\u76d6\u7684 $i$ \u8fde\u8fb9 $(col_i,col_{i+1})$\uff0c\u5224\u65ad\u662f\u5426\u6210\u73af\u5373\u53ef\u3002\n\n+ \u5269\u4e0b\u7684\u8fb9\u53ef\u80fd\u4f7f\u6240\u6709\u989c\u8272\u8fde\u901a\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5bf9\u6240\u6709 $i$ \u4e0d\u4e3a\u67d0\u4e2a\u73af\u7684\u53f3\u7aef\u70b9\u4e14 $i+1$ \u4e0d\u4e3a\u67d0\u4e2a\u73af\u7684\u5de6\u7aef\u70b9\u7684 $i$ \u8fde\u8fb9 $(col_i,col_{i+1})$\uff0c\u5224\u65ad\u662f\u5426\u8fde\u901a\u5373\u53ef\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^3)$\u3002\n\n#### Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=550;\nint T,n,p[N],mp[N];\nint col[N],id;\n\nint in[N],out[N];//\u8be5\u70b9\u7684\u5165\u8fb9\u53ca\u51fa\u8fb9\nint ans[N];\n\nint L[N],R[N];//\u8be5\u70b9\u662f\u5426\u88ab\u5411\u5de6/\u53f3\u8986\u76d6\n\nvector <int> G[N];\nbool vis[N];\nvoid dfs(int u){\n\tif(vis[u]) return ;\n\tvis[u]=1;\n\tfor(int i=0;i<(int)G[u].size();i++) dfs(G[u][i]);\n}\n\nbool check(){\n\tfor(int i=1;i<=n;i++) if(L[i]+(in[i]==i)>1 || R[i]+(in[i]==i)>1) return 0;//case 1\n\tfor(int i=1;i<=n;i++)\n\t\tif(!in[i] && !out[i] && L[i] && R[i]) return 0;//case 2\n\t\n\tfor(int i=1;i<=id;i++) G[i].clear(),vis[i]=0;\n\tint ct=0,num=0;\n\tfor(int i=1;i<n;i++){\n\t\tif(L[i+1] || R[i]){\n\t\t\tct++;\n\t\t\tG[col[i]].push_back(col[i+1]);\n\t\t\tG[col[i+1]].push_back(col[i]);\n\t\t}\n\t}\n\tfor(int i=1;i<=id;i++){\n\t\tif(vis[i]) continue;\n\t\tnum++; dfs(i);\n\t}\n\tif(num+ct>id) return 0;\n\t//case 3\n\t\n\tfor(int i=1;i<=id;i++) G[i].clear(),vis[i]=0;\n\tnum=0;\n\tfor(int i=1;i<n;i++){\n\t\tif(!(in[i] && out[i] && (in[i]<=i && out[i]<=i)) && !(in[i+1] && out[i+1] && in[i+1]>=i+1 && out[i+1]>=i+1)){\n\t\t\tG[col[i]].push_back(col[i+1]);\n\t\t\tG[col[i+1]].push_back(col[i]);\n\t\t}\n\t}\n\tfor(int i=1;i<=id;i++){\n\t\tif(vis[i]) continue;\n\t\tnum++; dfs(i);\n\t}\n\tif(num>1) return 0;\n\t//case 4\n\treturn 1;\n}\n\nvoid add(int u,int v){\n\tout[u]=v,in[v]=u;\n\tif(v<u) for(int j=u;j>v;j--) L[j]++;\n\telse for(int j=u;j<v;j++) R[j]++;\n}\nvoid del(int u,int v){\n\tout[u]=in[v]=0;\n\tif(v<u) for(int j=u;j>v;j--) L[j]--;\n\telse for(int j=u;j<v;j++) R[j]--;\n}\n\nint main(){\n\tcin>>T;\n\twhile(T--){\n\t\tcin>>n;\n\t\tfor(int i=1;i<=n;i++) scanf(\"%d\",&p[i]),mp[p[i]]=i;\n\t\tid=0;\n\t\tfor(int i=1;i<=n;i++) col[i]=in[i]=out[i]=L[i]=R[i]=0;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(col[i]) continue;\n\t\t\tcol[i]=++id;\n\t\t\tint cur=mp[i];\n\t\t\twhile(cur!=i) col[cur]=id,cur=mp[cur];\n\t\t}\n\t\tans[1]=1;\n\t\tfor(int t=2;t<=n;t++){\n\t\t\tint u=ans[t-1];\n\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\tint v=p[i];\n\t\t\t\tif(in[v]) continue;\n\t\t\t\tadd(u,v);\n\t\t\t\tif(check()){\n\t\t\t\t\tans[t]=i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdel(u,v);\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++) printf(\"%d \",ans[i]);\n\t\tputchar('\\n');\n\t}\n}\n```",
        "postTime": 1655264316,
        "uid": 225645,
        "name": "\u82f9\u679c\u84dd17",
        "ccfLevel": 8,
        "title": "\u9898\u89e3  CF1685D Permutation Weight"
    },
    {
        "content": "\u975e\u5e38\u96be\u7406\u89e3\u7684\u6784\u9020\u3002\n\n\u56de\u987e D1 \u505a\u6cd5\uff1a\u9996\u5148\uff0c\u8bb0 $w_{q_{i+1}}=q_i$\uff0c\u90a3\u4e48\u9898\u76ee\u8f6c\u5316\u4e3a $\\sum\\limits_{i=1}^n|w_i-p_i|$\uff0c\u8fd9\u91cc\u8981\u6c42 $w$ \u53ea\u6709\u4e00\u4e2a\u7f6e\u6362\u73af\u3002\u663e\u7136 $w_i=p_i$ \u65f6\u4e0a\u5f0f\u503c\u4e3a $0$ \u4f46\u4e0d\u4e00\u5b9a\u6ee1\u8db3 $w$ \u53ea\u6709\u4e00\u4e2a\u7f6e\u6362\u73af\u7684\u9650\u5236\uff0c\u56e0\u6b64\u8003\u8651\u8c03\u6574\u3002\u8c03\u6574\u65b9\u6cd5\u5f88 trivial\uff1a\u4ece\u5c0f\u5230\u5927\u8003\u8651\u6240\u6709 $1\\le i<n-1$\uff0c\u5982\u679c $i,i+1$ \u4e0d\u5728\u540c\u4e00\u4e2a\u7f6e\u6362\u73af\u4e2d\u5219\u4ea4\u6362 $w_i,w_{i+1}$\uff0c\u663e\u7136\u6bcf\u6b21\u4ea4\u6362\u6700\u591a\u4f7f\u4e0a\u5f0f\u7684\u503c\u589e\u52a0 $2$\uff0c\u56e0\u6b64\u8fd9\u6837\u4ea4\u6362\u5f97\u5230\u7684\u5e8f\u5217\u7684\u6743\u503c\u81f3\u591a\u4e3a $2(c-1)$\uff0c\u5176\u4e2d $c$ \u4e3a $p$ \u4e2d\u7f6e\u6362\u73af\u4e2a\u6570\uff0c\u53ef\u4ee5\u8bc1\u660e\u8fd9\u540c\u65f6\u4e5f\u662f\u6743\u503c\u7684\u4e0b\u754c\uff0c\u8bc1\u660e\u53ef\u4ee5\u89c1\u4e0b\u9762 hard version \u7684\u9898\u89e3\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\alpha(n))$\u3002\n\n\u5728 easy version \u91cc\uff0c\u6211\u4eec\u53ea\u8981\u6c42\u6784\u9020\u51fa\u5408\u6cd5\u7684\u6392\u5217\u5373\u53ef\u3002\u4f46\u662f hard version \u91cc\u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u8fd9\u53c8\u8be5\u600e\u4e48\u5904\u7406\u5462\uff1f\n\n\u9996\u5148\u770b\u5230\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6211\u4eec\u5e94\u8be5\u5f62\u6210\u4e00\u4e2a\u6761\u4ef6\u53cd\u5c04\uff1a\u6309\u4f4d\u94a6\u5b9a\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u5224\u5b9a\u4e00\u4e2a\u524d\u7f00\u662f\u5426\u53ef\u80fd\u79f0\u4e3a\u4ee3\u4ef7\u6700\u5c0f\u7684\u6392\u5217\u3002\n\n\u9996\u5148\u8003\u8651\u8bc1\u660e\u4ee3\u4ef7\u7684\u4e0b\u754c\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u8003\u8651\u5efa\u56fe $G$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $i$ \u8fde\u8fb9 $q_i\\to p_{q_{i+1}}$\uff0c\u8fd9\u6837\u663e\u7136\u4f1a\u5f62\u6210\u82e5\u5e72\u4e2a\u7f6e\u6362\u73af\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u6700\u5c0f\u5316\u7f6e\u6362\u73af\u4e2d\u76f8\u90bb\u4e24\u4e2a\u70b9\u7684\u6807\u53f7\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\u3002\u663e\u7136\u5bf9\u4e8e\u4e00\u4e2a\u5927\u5c0f\u4e3a $k$ \u7684\u73af\uff0c\u76f8\u90bb\u4e24\u6570\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\u7684\u4e0b\u754c\u662f $2(k-1)$\uff0c\u8fd9\u4e2a\u4e0b\u754c\u80fd\u591f\u8fbe\u5230\u5f53\u4e14\u4ec5\u5f53\u5176\u6309\u987a\u5e8f\u5f62\u6210\u4e00\u4e2a\u9012\u589e\u94fe\u6216\u9012\u51cf\u94fe\u4e14\u9012\u589e\uff08\u51cf\uff09\u94fe\u4e0a\u76f8\u90bb\u4e24\u6570\u5dee\u4e3a $1$\uff0c\u800c\u6211\u4eec\u73af\u7684\u4e2a\u6570\u540c\u6837\u662f\u6709\u754c\u7684\uff1a\u8bb0 $bel_i$ \u4e3a $i$ \u5728\u539f $p$ \u6392\u5217\u4e2d\u6240\u5728\u7f6e\u6362\u73af\u7684\u7f16\u53f7\uff0c\u90a3\u4e48\u8003\u8651\u56fe $G'$\uff0c\u5bf9\u4e8e $G$ \u4e2d\u6bcf\u6761\u8fb9 $q_i\\to p_{q_{i+1}}$\uff0c\u8fde\u8fb9 $bel[q_i]\\to bel[p_{q_{i+1}}]$\uff0c\u53ef\u4ee5\u8bc1\u660e $G'$ \u57fa\u56fe\u8fde\u901a\uff0c\u56e0\u4e3a $q_{i+1}$ \u548c $p_{q_{i+1}}$ \u663e\u7136 $bel$ \u76f8\u540c\uff0c\u56e0\u6b64\u6211\u4eec $bel[q_1]\\to bel[q_2]\\to bel[q_3]\\to\\cdots\\to bel[q_n]\\to bel[q_1]$ \u76f8\u5f53\u4e8e $G'$ \u7684\u4e00\u4e2a\u6b27\u62c9\u56de\u8def\u3002\u8003\u8651 $G'$ \u57fa\u56fe\u7684\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u663e\u7136\u751f\u6210\u6811\u4e0a\u7684\u6bcf\u6761\u6811\u8fb9\u5bf9\u5e94\u7684\u4e24\u4e2a\u70b9\u90fd\u5c5e\u4e8e\u4e0d\u540c\u7684\u73af\uff0c\u56e0\u6b64\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u884c\u4e86 $k-1$ \u6b21\u5408\u5e76\uff0c\u73af\u7684\u4e2a\u6570\u81f3\u591a\u662f $n-k+1$\uff0c\u8fd9\u6837 $\\sum 2(siz_i-1)$ \u5c31\u81f3\u591a\u662f $2\u00b7(n-(n-k+1))=2(k-1)$\uff0c\u800c\u901a\u8fc7 easy version \u7684\u6784\u9020\u53ef\u4ee5\u5f97\u5230\u4e0a\u9762\u7684\u4e0b\u754c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u4ece $G$ \u8fd8\u539f\u51fa $q$\u2014\u2014\u56e0\u4e3a\u6211\u4eec\u786e\u5b9a\u4e00\u4e2a\u524d\u7f00\u76f8\u5f53\u4e8e\u662f\u786e\u5b9a $G$ \u7684\u4e00\u4e2a\u90e8\u5206\uff0c\u800c\u76f4\u63a5\u4ece $q$ \u7684\u89d2\u5ea6\u5165\u624b\u5206\u6790\u95ee\u9898\u663e\u7136\u592a\u4e0d\u53ef\u505a\uff0c\u56e0\u6b64\u6211\u4eec\u5148\u8003\u8651\u786e\u5b9a\u4ec0\u4e48\u6837\u7684 $G$ \u7b26\u5408\u6761\u4ef6\uff0c\u6709\u5982\u4e0b\u7ed3\u8bba\uff1a\n\n- $G$ \u7531\u82e5\u5e72\u4e2a\u73af\u6784\u6210\u3002\n- \u6784\u56fe $G'$\u3002\u5bf9\u4e8e $G$ \u4e2d\u6bcf\u6761\u8fb9 $u\\to v$ \u8fde\u8fb9 $bel_u\\to bel_v$\uff0c\u90a3\u4e48 $G'$ \u7684\u57fa\u56fe\u8fde\u901a\u3002\n- $G$ \u4e2d\u73af\u7684\u4e2a\u6570\u6070\u597d\u662f $n-k+1$\u3002\n- $G$ \u4e2d\u6bcf\u4e2a\u73af\u90fd\u7531\u9012\u51cf\u94fe\u6216\u8005\u9012\u589e\u94fe\u7ec4\u6210\u4e14\u6bcf\u4e2a\u9012\u51cf\uff08\u589e\uff09\u94fe\u4e0a\u6309\u987a\u5e8f\u884c\u8d70\u5f97\u5230\u7684\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u5dee\u90fd $\\le 1$\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u8fd9\u662f $G$ \u53ef\u4ee5\u7531\u6743\u503c\u6700\u5c0f\u7684\u6392\u5217 $q$ \u751f\u6210\u7684\u5145\u8981\u6761\u4ef6\u3002\u5b98\u65b9\u7edf\u8ba1\u4e2d\u6ca1\u6709\u7ed9\u8bc1\u660e\uff0c\u8fd9\u91cc\u7a0d\u5fae\u629b\u7816\u5f15\u7389\u4e00\u4e0b\u3002\u9996\u5148\u5fc5\u8981\u6027\u663e\u7136\uff0c\u5145\u5206\u6027\u7684\u8bdd\uff0c\u9996\u5148\u7b2c\u56db\u6761\u662f\u9488\u5bf9\u6743\u503c\u6700\u5c0f\u800c\u8a00\u7684\uff0c\u5bf9\u4e8e\u6ee1\u8db3\u524d\u4e09\u4e2a\u6027\u8d28\u7684\u56fe\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u5c06\u6807\u53f7 shuffle \u4f7f\u5176\u6ee1\u8db3\u6027\u8d28\u56db\uff0c\u56e0\u6b64\u6211\u4eec\u5148\u5ffd\u7565\u6027\u8d28\u56db\u3002\u8003\u8651\u524d\u4e09\u4e2a\u6027\u8d28\u3002\u7531\u4e8e\u73af\u7684\u4e2a\u6570\u6070\u597d\u662f $n-k+1$ \u4e14 $G'$ \u8fde\u901a\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5728 $G$ \u7684\u6bcf\u4e2a\u73af\u4e2d\u968f\u673a\u65ad\u6389\u4e00\u6761\u8fb9\u540e\u518d\u6784\u9020\u4e0a\u9762\u7684 $G'$\u2014\u2014\u663e\u7136\u4f1a\u5f97\u5230\u4e00\u68f5\u6811\u3002\u5e76\u4e14\u6bcf\u4e2a\u73af\u6240\u5360\u636e\u7684\u90fd\u662f\u6811\u4e0a\u7684\u4e00\u6761\u94fe\u3002\u90a3\u4e48\u6211\u4eec\u5047\u8bbe\u6309\u7167 $i\\to p^{-1}_{to_i}$ \u7684\u987a\u5e8f\u8d70\u8def\u8d70\u56de\u8d77\u70b9\u7684\u65f6\u5019\u6ca1\u6709\u8bbf\u95ee\u6240\u6709\u70b9\uff08\u5176\u4e2d $to_i$ \u4e3a $G$ \u4e2d $i$ \u7684\u51fa\u8fb9\uff09\uff0c\u6b64\u65f6\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u4e00\u662f\u6ca1\u6709\u8bbf\u95ee\u8fc7\u6240\u6709\u7684 $k$ \u4e2a\u989c\u8272\uff0c\u4f46\u662f\u8bbf\u95ee\u7684\u6240\u6709\u73af\u90fd\u8bbf\u95ee\u4e86\u73af\u4e2d\u6240\u6709\u70b9\uff0c\u8fd9\u79cd\u60c5\u51b5\u662f\u7edd\u5bf9\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u8bbf\u95ee\u8fc7\u7684\u90e8\u5206\u5728 $k$ \u4e2a\u70b9\u7684\u6811\u4e2d\u80af\u5b9a\u662f\u51fa\u5165\u5c01\u95ed\u7684\uff0c\u8fd9\u4e0e\u6811\u7684\u8fde\u901a\u6027\u76f8\u77db\u76fe\u3002\u4e8c\u662f\u5982\u679c\u6709\u73af\u53ea\u8bbf\u95ee\u4e86\u4e00\u90e8\u5206\uff0c\u90a3\u4e48\u5fc5\u7136\u4f1a\u51fa\u73b0\u4e0b\u9762\u7684\u60c5\u51b5\uff08\u5176\u4e2d\u84dd\u8272\u8868\u793a $p$ \u4e2d\u7684\u73af\uff0c\u6a59\u8272\u8868\u793a $G$ \u4e2d\u7684\u8fb9\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/e3f4aznv.png)\n\n\u7531\u4e8e\u8981\u8ba9\u67d3\u7eff\u7684\u70b9\u4e0d\u88ab\u8bbf\u95ee\uff0c$p$ \u4e2d\u7684\u8fb9\u548c $G$ \u4e2d\u7684\u8fb9\u53ea\u80fd\u6784\u6210\u4e0a\u9762\u7684\u5f62\u6001\uff0c\u5373\u6709\u4e00\u6761\u8fb9\u8fdb\u5165\u8fd9\u4e2a\u73af\uff0c\u7136\u540e\u6cbf\u7740\u73af\u8fb9\u8fdb\u5165\u53e6\u4e00\u4e2a\u73af\u540e\u56de\u5230\u540c\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e0e\u201c\u6bcf\u4e2a\u73af\u5220\u6389\u4e00\u6761\u8fb9\u7684 $G'$ \u6784\u6210\u4e00\u68f5\u6811\u201d\u7684\u5927\u524d\u63d0\u76f8\u77db\u76fe\u3002\n\n\u8fd9\u6837\u6211\u4eec\u6316\u6398\u4e86 $G$ \u7b26\u5408\u6761\u4ef6\u7684\u5145\u8981\u6761\u4ef6\uff0c\u63a5\u4e0b\u6765\u8003\u8651\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86 $G$ \u7684\u4e00\u90e8\u5206\uff0c\u600e\u6837\u5224\u65ad\u5408\u6cd5\u6027\u3002\u5bf9\u4e8e $G$ \u4e2d\u6bcf\u6761\u8fb9 $(u_i,v_i)$\uff0c\u5982\u679c $u_i<v_i$ \u8bb0 $[u_i,v_i]$ \u4e3a\u5de6\u7ebf\u6bb5\uff0c\u5982\u679c $u_i>v_i$ \u8bb0 $[v_i,u_i]$ \u4e3a\u53f3\u7ebf\u6bb5\uff0c\u5982\u679c $u_i=v_i$ \u8bb0 $u_i$ \u4e3a\u73af\u70b9\uff0c\u90a3\u4e48\u5145\u8981\u6761\u4ef6\u662f\uff1a\n\n- \u6ca1\u6709\u4e24\u4e2a\u5de6\u7ebf\u6bb5\u5728\u975e\u7aef\u70b9\u5904\u76f8\u4ea4\uff0c\u53f3\u7ebf\u6bb5\u540c\u7406\u3002\n- \u6ca1\u6709\u4efb\u4f55\u4e00\u6761\u7ebf\u6bb5\u5305\u542b\u73af\u70b9\u3002\n- \u6ca1\u6709\u4e00\u4e2a\u6ca1\u8fde\u8fb9\u7684\u70b9\u88ab\u5de6\u7ebf\u6bb5\u548c\u6709\u7ebf\u6bb5\u540c\u65f6\u8986\u76d6\u3002\n- \u8003\u8651\u6784\u56fe $G''$\uff0c\u5982\u679c $i,i+1$ \u88ab\u67d0\u6761\u7ebf\u6bb5\u8986\u76d6\uff0c\u90a3\u4e48\u8fde\u65e0\u5411\u8fb9 $(bel_i,bel_{i+1})$\uff0c\u90a3\u4e48 $G''$ \u65e0\u73af\u3002\n- \u8003\u8651\u6784\u56fe $G''$\uff0c\u5982\u679c $i,i+1$ \u90fd\u4e0d\u662f\u73af\u70b9\uff0c\u4e14 $i$ \u4e0d\u662f\u67d0\u6761\u7ebf\u6bb5\u53f3\u7aef\u70b9\uff0c\u4e14 $i+1$ \u4e0d\u662f\u67d0\u6761\u7ebf\u6bb5\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u8fde\u65e0\u5411\u8fb9 $(bel_i,bel_{i+1})$\uff0c\u90a3\u4e48 $G''$ \u8fde\u901a\u3002\n\ncheck \u53ef\u4ee5\u5728 $O(n\\alpha(n))$ \u7684\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u800c\u6211\u4eec\u4e00\u5171\u8981\u8fdb\u884c $n^2$ \u6b21 check\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6 $n^3\\alpha(n)$\u3002\n\n```cpp\nconst int MAXN = 200;\nint n, p[MAXN + 5], q[MAXN + 5], vis[MAXN + 5], bel[MAXN + 5], cmp, used[MAXN + 5];\nint df1[MAXN + 5], df2[MAXN + 5], in[MAXN + 5], out[MAXN + 5];\nint f[MAXN + 5], ed;\nint find(int x) {return (!f[x]) ? x : f[x] = find(f[x]);}\nbool merge(int x, int y) {\n\tx = find(x); y = find(y);\n\tif (x != y) return f[x] = y, ed--, 1;\n\telse return 0;\n}\nbool check(int N) {\n\t// printf(\"check %d\\n\", N);\n\t// for (int i = 1; i <= N; i++) printf(\"%d%c\", q[i], \" \\n\"[i == N]);\n\tvector<pii> edges;\n\tfor (int i = 1; i < N; i++) edges.pb(mp(q[i], p[q[i + 1]]));\n\t// printf(\"edges:\\n\");\n\t// for (pii p : edges) printf(\"%d %d\\n\", p.fi, p.se);\n\tfor (int i = 0; i <= n + 1; i++) df1[i] = df2[i] = vis[i] = in[i] = out[i] = 0;\n\tfor (pii p : edges) {\n\t\tif (p.fi < p.se) df1[p.fi]++, df1[p.se]--, vis[p.fi] = vis[p.se] = 1;\n\t\tif (p.fi > p.se) df2[p.se]++, df2[p.fi]--, vis[p.fi] = vis[p.se] = 1;\n\t\tin[p.se] = p.fi; out[p.fi] = p.se;\n\t}\n\tfor (int i = 1; i <= n; i++) df1[i] += df1[i - 1], df2[i] += df2[i - 1];\n\tfor (int i = 1; i <= n; i++) if (df1[i] >= 2 || df2[i] >= 2) return 0;\n\tfor (int i = 1; i <= n; i++) if (!vis[i] && (df1[i] && df2[i])) return 0;\n\tfor (int i = 1; i <= cmp; i++) f[i] = 0;\n\tfor (int i = 1; i < n; i++) if (df1[i] || df2[i])\n\t\tif (!merge(bel[i], bel[i + 1])) return 0;\n\tfor (int i = 1; i <= cmp; i++) f[i] = 0; ed = cmp;\n\tfor (int i = 1; i < n; i++) if (!(in[i] && out[i] && in[i] <= i && out[i] <= i) && !(in[i + 1] && out[i + 1] && in[i + 1] >= i + 1 && out[i + 1] >= i + 1))\n\t\tmerge(bel[i], bel[i + 1]);\n\tif (ed != 1) return 0; return 1;\n}\nvoid solve() {\n\tscanf(\"%d\", &n); cmp = 0;\n\tfor (int i = 1; i <= n; i++) scanf(\"%d\", &p[i]), bel[i] = q[i] = used[i] = 0;\n\tfor (int i = 1; i <= n; i++) if (!bel[i]) {\n\t\t++cmp; for (int j = i; !bel[j]; j = p[j]) bel[j] = cmp;\n\t}\n\t// for (int i = 1; i <= n; i++) printf(\"%d%c\", bel[i], \" \\n\"[i == n]);\n\tq[1] = 1; used[1] = 1;\n\tfor (int i = 2; i <= n; i++) {\n\t\tfor (int j = 1; j <= n; j++) if (!used[j]) {\n\t\t\tq[i] = j; //printf(\"! %d %d\\n\", i, j);\n\t\t\tif (check(i)) {used[j] = 1; break;}\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) printf(\"%d%c\", q[i], \" \\n\"[i == n]);\n}\nint main() {\n#ifdef LOCAL\n\tfreopen(\"in.txt\", \"r\", stdin);\n\tfreopen(\"out.txt\", \"w\", stdout);\n#endif\n\tint qu; scanf(\"%d\", &qu);\n\twhile (qu--) solve();\n\treturn 0;\n}\n```",
        "postTime": 1663232209,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1685D2 Permutation Weight (Hard Version)"
    }
]