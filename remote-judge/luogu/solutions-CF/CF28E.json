[
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\n\u5e73\u9762\u4e0a\u7ed9\u5b9a\u4e00\u4e2a\u591a\u8fb9\u5f62\uff0c\u4f60\u4ece\u591a\u8fb9\u5f62\u5916\u90e8\u67d0\u4e00 $A$ \u70b9\u8d77\u98de\uff0c\u5728 $t_1$ \u79d2\u8df3\u4e0b\u98de\u673a\uff0c\u8fdb\u884c $t_2$ \u79d2\u81ea\u7531\u843d\u4f53\uff0c\u4e4b\u540e\u6253\u5f00\u964d\u843d\u4f1e\u8df3\u4e0b\u98de\u673a\u3002\u7ed9\u5b9a\u98de\u673a\u98de\u884c\u901f\u5ea6\u5411\u91cf $V$\uff0c\u7ed9\u5b9a\u964d\u843d\u4f1e\u6ed1\u7fd4\u901f\u5ea6\u5411\u91cf $U$\uff0c\u7ed9\u5b9a\u81ea\u7531\u843d\u4f53\u901f\u5ea6 $F$\uff0c\u7ed9\u5b9a\u8d77\u98de\u70b9 $A$ \u5750\u6807\u3002\u6c42\u51fa\u6700\u5c0f $t_1$\uff0c\u82e5\u6709\u591a\u89e3 $t_1$\uff0c\u53d6 $t_2$ \u6700\u5c0f\u8005\uff0c\u8f93\u51fa $t_1, t_2$\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u7ed9\u7684 $z_v,F$ \u90fd\u662f\u8d1f\u6570\uff0c\u6ce8\u610f\u5904\u7406\u3002\n\n# \u9898\u89e3\n\n## \u627e\u5230\u53ef\u884c\u533a\u57df\n\n\u9996\u5148\u8003\u8651\u6211\u4eec\u53ef\u4ee5\u964d\u843d\u5728\u54ea\u4e9b\u5730\u65b9\u3002\u6211\u4eec\u5047\u8bbe\u4e00\u76f4\u98de\u4ea7\u751f\u7684\u8f68\u8ff9\u5728\u5e73\u9762\u4e0a\u7684\u6295\u5f71\u4e3a**\u822a\u7ebf**\uff0c\u6beb\u65e0\u7591\u95ee\u5982\u679c $U$ \u548c $V$ \u5728\u5e73\u9762\u4e0a\u7684\u6295\u5f71\u4e0d\u5171\u7ebf\uff0c\u90a3\u4e48\u8981\u4f7f\u5f97\u504f\u79bb\u822a\u7ebf\u8db3\u591f\u8fdc\uff0c\u6211\u4eec\u8df3\u4e0b\u98de\u673a\u7684\u77ac\u95f4\u5c31\u5f97\u6253\u5f00\u964d\u843d\u4f1e\u4e86\u3002\u90a3\u4e48\u5982\u679c\u6709\u4e00\u6bb5\u65f6\u95f4\u7684\u81ea\u7531\u843d\u4f53\uff0c\u6211\u4eec\u662f\u65e0\u6cd5\u8d8a\u8fc7\u90a3\u6761\u6700\u8fdc\u504f\u822a\u7ebf\u7684\u3002\u56e0\u6b64\uff0c\u53ef\u884c\u89e3\u5fc5\u987b\u843d\u5728\u5982\u56fe\u6240\u793a\u7684\u7eff\u8272\u533a\u57df\u5185\uff1a\n\n![\u53ef\u884c\u533a\u57df](https://cdn.luogu.com.cn/upload/image_hosting/xtlecyn1.png)\n\n\n\u4f46\u662f\u8981**\u6ce8\u610f**\uff1a\u7531\u4e8e $U$ \u548c $V$ \u7684 $z$ \u65b9\u5411\u5206\u91cf\u4e0d\u540c\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u5b83\u4eec\u540c\u6bd4\u653e\u5927\u6216\u7f29\u5c0f\u6210 $z$ \u65b9\u5411\u5206\u91cf\u76f8\u540c\uff0c\u8fd9\u6837\u624d\u80fd\u786e\u5b9a\u51fa\u6700\u8fdc\u53ef\u4ee5\u5230\u8fbe\u7684\u8fb9\u754c\u3002\n\n## \u786e\u5b9a\u53ef\u80fd\u7684\u7b54\u6848\u96c6\u5408\n\n\u5148\u8bf4\u7ed3\u8bba\uff1a\u7b54\u6848\u53ea\u53ef\u80fd\u53d6\u5728\u6700\u8fdc\u504f\u822a\u8fb9\u754c\u4e0e\u591a\u8fb9\u5f62\u7684\u4ea4\u70b9\u5904\u6216\u8005\u591a\u8fb9\u5f62\u7684\u9876\u70b9\u4e0a\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u5206\u51e0\u7ec4\u60c5\u51b5\u3002\n\n### \u60c5\u51b5\u4e00\n\n\u6b64\u60c5\u51b5\u5c31\u662f\u6700\u8fd1\u7684\u70b9\u8df3\u4e0b\u53bb\u7684\u65f6\u5019\uff0c\u964d\u843d\u4f1e\u7ec8\u70b9\u843d\u5230\u7684\u662f\u4e00\u6761\u8fb9\u4e0a\u3002\n\n![\u53ef\u80fd\u53ef\u884c\u89e31](https://cdn.luogu.com.cn/upload/image_hosting/fym6ytzq.png)\n\n### \u60c5\u51b5\u4e8c\n\n\u964d\u843d\u4f1e\u7ec8\u70b9\u843d\u5728\u7684\u662f\u4e00\u4e2a\u70b9\u4e0a\u3002\n\n![\u53ef\u80fd\u53ef\u884c\u89e32](https://cdn.luogu.com.cn/upload/image_hosting/6lnvu3pz.png)\n\n\u6b64\u65f6\u5c31\u9700\u8981\u5229\u7528\u81ea\u7531\u843d\u4f53\u6765\u524a\u51cf\u504f\u822a\u8ddd\u79bb\u4e86\u3002\n\n### \u60c5\u51b5\u4e09\n\n\u822a\u7ebf\u76f4\u63a5\u4e0e\u591a\u8fb9\u5f62\u76f8\u4ea4\u3002\n\n![\u53ef\u80fd\u53ef\u884c\u89e34](https://cdn.luogu.com.cn/upload/image_hosting/xvs839v7.png)\n\n\u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u964d\u843d\u3002\n\n## \u5982\u679c $U,V$ \u5171\u7ebf\n\n\u8fd9\u91cc\u770b\u8d77\u6765\u7b80\u5355\u4e86\uff0c\u4f46\u662f\u4e5f\u8981\u6ce8\u610f\u5751\u70b9\uff0c\u4e5f\u5206\u4e24\u4e2a\u60c5\u51b5\uff1a\n\n### \u60c5\u51b5\u4e00\n\n$U,V$ \u65b9\u5411\u76f8\u540c\u3002\u6ce8\u610f\u8fd9\u91cc $U$ \u90fd\u662f\u540c\u6bd4\u7f29\u653e\u540e\u7684\u3002\n\n![\u540c\u5411\u5411\u91cf](https://cdn.luogu.com.cn/upload/image_hosting/2c9c0wwc.png)\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u591a\u8fb9\u5f62\u4e0e\u76f4\u7ebf\u4ea4\u70b9\u662f\u4e0d\u662f\u5728 $V$ \u65b9\u5411\u8fd9\u4e00\u4fa7\u5c31\u884c\u4e86\u3002\n\n### \u60c5\u51b5\u4e8c\n\n$U,V$ \u65b9\u5411\u76f8\u53cd\u3002\n\n![\u53cd\u5411\u5411\u91cf](https://cdn.luogu.com.cn/upload/image_hosting/l0tru7dy.png)\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u9700\u8981\u518d\u5206\u4e24\u5c0f\u70b9\u8ba8\u8bba\uff1a\n\n- $V$ \u66f4\u5927\uff1a\u53ea\u9700\u8003\u8651\u81ea\u7531\u843d\u4f53\u5373\u53ef\uff0c\u56e0\u4e3a\u8fd9\u6837\u4e00\u5b9a\u662f $t_1$ \u6700\u5c0f\uff1b\n- $U$ \u66f4\u5927\uff1a\u9700\u8981\u8003\u8651 $U$ \u9020\u6210\u7684\u53cd\u5411\u98de\u884c\u4ee5\u53ca\u4ec5\u8003\u8651\u81ea\u7531\u843d\u4f53\u4e24\u79cd\u60c5\u51b5\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u5c06\u6240\u6709\u60c5\u51b5\u8ba8\u8bba\u5b8c\u6bd5\uff0c\u6240\u9700\u8981\u7684\u8ba1\u7b97\u51e0\u4f55\u5de5\u5177\u5c31\u662f\u70b9\u7684\u76f8\u5173\u64cd\u4f5c\uff08\u5305\u62ec\u70b9\u4e58\u548c\u53c9\u4e58\uff09\uff0c\u7136\u540e\u662f\u76f4\u7ebf\u76f8\u4ea4\uff0c\u5224\u65ad\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a\uff0c\u8fd9\u51e0\u4e2a\u5c31 $OK$ \u4e86\u3002\n\n# \u4e3b\u8981\u4ee3\u7801\n\n```\nint n;\nPolygon<db> ps;\nP<db> A, U, V, UV;\ndb zu, zv, f, calcf, calcuv;\ndb T1 = infit, T2 = infit;\n\ninline void update(db t1, db t2)\n{\n    int r1 = cmp(t1, T1), r2 = cmp(t2, T2);\n    if(r1 > 0) return;\n    if(r1 < 0) { T1 = t1, T2 = t2; return; }\n    if(r2 < 0) T2 = t2;\n}\n\ninline void getans(P<db> nw)\n{\n    int r1 = sign(V.det(UV)), r2 = sign(V.det(nw-A)), r3 = sign((nw-A).det(UV));\n    if(r2 && r2 != r1) return;\n    if(r3 && r3 != r1) return;\n    //nw.write();\n    P<db> iuv = isLL(nw, nw+U, A, A+UV);\n    //iuv.write();\n    update((iuv-A).abs()/calcuv, (nw-iuv).abs()/calcf);\n    // Here we assume that he will reach the most further line\n    // And if he don't need to get there\n    // The recent point to the assuming point will consume during droping\n}\n\nint main()\n{\n    cin >> n;\n    ps.resize(n);\n    for(auto &p : ps)\n        p.read();\n    A.read();\n    V.read();\n    cin >> zv;\n    cin >> f;\n    U.read();\n    cin >> zu;\n    zu *= -1;\n    f *= -1; // Negative number is not good for thinking\n    calcf = U.abs()*f/zu;\n    U = U*zv/zu;\n    UV = U+V;\n    //UV.write();\n    calcuv = UV.abs();\n    if(sign(U.det(V))) // U is not collinear with V\n    {\n        for(auto p : ps) getans(p); // Check all endpoints, Case 1\n        for(int i = 0; i < n; i += 1)\n        {\n            P<db> cur;\n            if(chkLL(A, A+UV, ps[i], ps[(i+1)%n])) // Check lines not parallel\n            {\n                cur = isLL(A, A+UV, ps[i], ps[(i+1)%n]); // Case 2\n                if(onSeg(ps[i], ps[(i+1)%n], cur))\n                    getans(cur);\n            }\n            if(chkLL(A, A+V, ps[i], ps[(i+1)%n]))\n            {\n                cur = isLL(A, A+V, ps[i], ps[(i+1)%n]); // Case 3\n                if(onSeg(ps[i], ps[(i+1)%n], cur))\n                    getans(cur);\n            }\n        }\n    }\n    else\n    {\n        if(sign(U.dot(V)) >= 0) // Same side\n        {\n            for(int i = 0; i < n; i += 1)\n            {\n                P<db> cur;\n                if(chkLL(A, A+UV, ps[i], ps[(i+1)%n]))\n                {\n                    cur = isLL(A, A+UV, ps[i], ps[(i+1)%n]);\n                    if(onSeg(ps[i], ps[(i+1)%n], cur) && sign(UV.dot(cur-A)) >= 0)\n                        update((cur-A).abs()/calcuv, 0.0);\n                }\n            }\n        }\n        else // Different side\n        {\n            int isv = sign(V.abs()-U.abs());\n            if(isv >= 0) // V is bigger\n            {\n                for(int i = 0; i < n; i += 1)\n                {\n                    P<db> cur;\n                    if(chkLL(A, A+V, ps[i], ps[(i+1)%n]))\n                    {\n                        cur = isLL(A, A+V, ps[i], ps[(i+1)%n]);\n                        if(onSeg(ps[i], ps[(i+1)%n], cur))\n                        {\n                            if(sign(V.dot(cur-A)) >= 0)\n                            {\n                                db t1 = (cur-A).abs()/V.abs();\n                                update(t1, zv*t1/f);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                for(int i = 0; i < n; i += 1)\n                {\n                    P<db> cur;\n                    if(chkLL(A, A+V, ps[i], ps[(i+1)%n]))\n                    {\n                        cur = isLL(A, A+V, ps[i], ps[(i+1)%n]);\n                        if(onSeg(ps[i], ps[(i+1)%n], cur))\n                        {\n                            if(sign(V.dot(cur-A)) < 0) // Backway!\n                                update((cur-A).abs()/calcuv, 0.0);\n                            else\n                            {\n                                db t1 = (cur-A).abs()/V.abs();\n                                update(t1, zv*t1/f);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(T1 > 1e9)\n        cout << -1 << ' ' << -1;\n    else\n        cout << fixed << setprecision(7) << T1 << ' ' << T2;\n    return 0;\n}\n```\n\n",
        "postTime": 1651144553,
        "uid": 50871,
        "name": "Euler_Pursuer",
        "ccfLevel": 6,
        "title": "CF28E DravDe saves the world \u9898\u89e3"
    }
]