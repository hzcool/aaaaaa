[
    {
        "content": "#### \u5f15\u5165\u7b97\u6cd5\n\n\uff08\u5df2\u7ecf\u5b66\u4f1a\u6700\u77ed\u8def\u5f84\u6811\u7684\u540c\u5b66\u4eec\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u90e8\u5206\uff09\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u8981\u5148\u5f15\u5165\u4e00\u4e2a\u6982\u5ff5\uff1a\u6700\u77ed\u8def\u5f84\u6811\u3002\n\n\u6700\u77ed\u8def\u5f84\u6811\u662f\u4e00\u4e2a\u56fe\u7684\u751f\u6210\u6811\uff0c\u8be5\u6811\u6709\u4e00\u4e2a\u539f\u70b9s\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u90fd\u6709\u5bf9\u4e8e\u5176\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9$i$\uff0c\u90fd\u6709\u5728\u539f\u56fe\u4e2ds\u5230i\u7684\u6700\u77ed\u8def\u7b49\u4e8e\u5728\u8be5\u6811\u4e2d$s$\u5230$i$\u7684\u8ddd\u79bb\uff0c\u800c\u5728\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u540e\uff0c\u8981\u6c42\u4f7f\u5f97\u6811\u7684\u8fb9\u6743\u548c\u6700\u5c0f\u3002\n\n\u5177\u4f53\u5730\u8bb2\uff0c\u5c31\u662f\u5bf9\u4e8e\u4efb\u610f$i$\u90fd\u6709$ans_i=dis_i$\uff0c\u5176\u4e2d$ans_i$\u8868\u793a\u539f\u56fe\u4e2d\u539f\u70b9\u5230i\u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\uff0c$dis_i$\u4e3a\u5728\u8be5\u6700\u77ed\u8def\u5f84\u6811\u4e2d\u539f\u70b9\u5230$i$\u7684\u8ddd\u79bb\u3002\n\n\u8fd9\u9053\u9898\u770b\u4f3c\u548c\u6700\u5c0f\u751f\u6210\u6811\u6709\u7740\u5343\u4e1d\u4e07\u7f15\u7684\u5173\u7cfb\uff0c\u4f46\u662f\u5176\u5b9e\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\u3002\n\n\u53ef\u4ee5\u601d\u8003\uff0c\u6700\u77ed\u8def\u5f84\u6811\u8981\u6c42\u6ee1\u8db3\u7684\u9996\u8981\u6761\u4ef6\u662f\u6700\u77ed\u8def\uff0c\u800c\u8fb9\u6743\u548c\u6700\u5c0f\u53ea\u662f\u5728\u6ee1\u8db3\u9996\u8981\u6761\u4ef6\u4e0b\uff0c\u8fbe\u5230\u7684\u6700\u4f18\u60c5\u51b5\uff0c\u6545\u53ef\u4ee5\u8003\u8651$dijkstra$\u7b97\u6cd5\u3002\n\n\u8003\u8651$dijkstra$\u53ef\u77e5\uff0c\u8be5\u7b97\u6cd5\u662f\u7531\u4e00\u4e2a\u96c6\u5408\u4e0d\u65ad\u5f80\u91cc\u9762\u52a0\u5165\u8282\u70b9\uff0c\u4ece\u800c\u5f97\u5230\u4ece\u67d0\u4e00\u4e2a\u8282\u70b9\u51fa\u53d1\u5230\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5171\u5f80\u91cc\u9762\u52a0\u5165\u4e86$n-1$\u4e2a\u8282\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u7531\u4e00\u6761\u8fb9\u62c9\u8fdb\u6765\u7684\uff0c\u6545\u5176\u5b9e\u8fd0\u884c$dijkstra$\u65f6\u5c31\u65e0\u5f62\u7684\u5f62\u6210\u4e86\u4e00\u68f5\u6811\uff0c\u4e14\u8fd9\u68f5\u6811\u7684\u6027\u8d28\u6ee1\u8db3\u6211\u4eec\u7b2c\u4e00\u70b9\u4e2d\u7684\u6027\u8d28\u3002$dijkstra$\u6a21\u677f\u53c2\u8003\u5982\u4e0b\uff1a\n\n```cpp\npriority_queue<pair<int,int> >q;//\u4f7f\u7528\u5806\u7ef4\u62a4\u5f53\u524d\u6700\u5c0f\u503c\nmemset(ans,0x7f,sizeof(ans));\nans[s]=0,in[s]=1;\nq.push(make_pair(0,s));//\u52a0\u5165\u6e90\u70b9\nwhile(!q.empty()){\n\tint x=q.top.second;\n\tq.pop();\n\tin[x]=0;//\u677e\u5f1b\u8282\u70b9x\n\tfor(int i=bg[x];i;i=ne[i]){\n\t\tint y=to[i];\n\t\tif(ans[x]+le[i]<ans[y]){\n\t\t\tans[y]=ans[x]+le[i];//\u66f4\u65b0\u7b54\u6848\n\t\t\tif(in[y]==0){\n\t\t\t\tq.push(make_pair(-ans[y],y));\n\t\t\t\tin[y]=1;//in\u6570\u7ec4\u5f88\u91cd\u8981\uff0c\u9632\u6b62\u591a\u6b21\u5c06\u4e00\u4e2a\u70b9\u52a0\u5165\u5806\u4e2d\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\u90a3\u4e48\u73b0\u5728\u9700\u8981\u8003\u8651\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u4f7f\u6743\u503c\u548c\u6700\u5c0f\uff1f\n\n\u8003\u8651\u5982\u4e0b\u8fd9\u4e2a\u56fe\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ox667d9t.png)\n\n\u5047\u5982$1$\u4e3a\u6e90\u70b9\uff0c\u70b9$1,2,3$\u5df2\u7ecf\u5728\u96c6\u5408\u4e2d\uff0c\u90a3\u4e48\u5bf9\u4e8e\u70b9$4$\uff0c\u6709\u4e24\u6761\u6700\u77ed\u8def\u5f84\u53ef\u4f9b\u9009\u62e9\uff1a\u8def\u5f84$1-3-4$\u4e0e\u8def\u5f84$1-2-4$\uff0c\u5bf9\u4e8e\u5df2\u5728\u96c6\u5408\u4e2d\u7684\u70b9\u6765\u8bf4\uff0c\u4e24\u6761\u8def\u5f84\u5bf9\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u800c\u65e0\u8bba\u662f\u54ea\u4e00\u6761\u8def\u5f84\uff0c\u70b9$5$\u90fd\u53ef\u7531\u70b9$4$\u62d3\u5c55\u6765\uff0c\u4e14\u6743\u503c\u90fd\u4e3a$4$\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5176\u65e0\u8bba\u9009\u62e9\u54ea\u4e00\u6761\u8fb9\uff0c\u53ea\u8981\u4f7f\u5f97\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6700\u5c0f\uff0c\u5bf9\u5176\u4ed6\u70b9\u90fd\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u5e94\u9009\u6700\u77ed\u7684\u4e00\u6761\u8fb9\u3002\n\n\u8fd9\u5c31\u662f\u6574\u4e2a\u7b97\u6cd5\uff0c\u4e0b\u9762\u770b\u4ee3\u7801\uff1a\n\n\uff08\u5177\u4f53\u53c2\u8003[CF545E Paths and Trees](https://www.luogu.com.cn/problem/CF545E)\uff09\n\n```cpp\n//ed[i]\u8868\u793a\u4ece\u96c6\u5408\u5230\u70b9i\u7684\u6240\u6709\u6ee1\u8db3dijkstra\u8981\u6c42\u7684\u8fb9\u4e2d\u6700\u77ed\u7684\u4e00\u6761\u7684\u7f16\u53f7\n//nu[i]\u8868\u793a\u8fd9\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u7528\u4e8e\u8bb0\u5f55\u6574\u4e2a\u751f\u6210\u6811\npriority_queue<pai<int,int> >q;\nmemset(ans,0x7f,sizeof(ans));\nq.push(make_pair(0,s));\nans[s]=0;in[s]=1;\nwhile(!q.empty()){\n\tint x=q.top().second;\n\tq.pop();\n\tin[x]=0;\n\tfor(int i=bg[x];i;i=ne[i]){//\u524d\u9762\u90e8\u5206\u540c\u4e0a\u9762\u7684\u4ee3\u7801\n\t\tint y=to[i];\n\t\tif(ans[x]+le[i]==ans[y]&&le[ed[y]]>le[i]){\n\t\t\ted[y]=i;//\u5982\u679c\u8ddd\u79bb\u76f8\u7b49\uff0c\u5219\u9009\u8f83\u77ed\u4e00\u8fb9\n\t\t}\n\t\tif(ans[x]+le[i]<ans[y]){\n\t\t\ted[y]=i;//\u8ddd\u79bb\u8f83\u77ed\u5219\u76f4\u63a5\u66f4\u65b0\n\t\t\tans[y]=ans[x]+le[i];\n\t\t\tif(in[y]==0){\n\t\t\t\tin[y]=1;\n\t\t\t\tq.push(make_pair(-ans[y],y));\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\u6700\u540e\u7edf\u8ba1\u5219\u6709\u5982\u4e0b\u4ee3\u7801\uff1a\n\n```cpp\nint sum=0;//sum\u8bb0\u5f55\u6700\u5c0f\u7684\u8fb9\u6743\u548c\nfor(int i=1;i<=n;i++){\n\tif(i==s){\n\t\tcontinue;\n\t}\n\tsum+=le[ed[i]];\n}\ncout<<sum<<\"\\n\";\nfor(int i=1;i<=n;i++){\n\tif(i==s){\n\t\tcontinue;\n\t}\n\tprintf(\"%lld \",nu[ed[i]]);//\u8f93\u51fa\u6bcf\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u8fb9\n}\n```\n\n\n#### \u89e3\u9898\u601d\u8def\n\n\u9605\u8bfb\u9898\u610f\u53ef\u77e5\uff0c\u6b64\u9898\u5c31\u662f\u8981\u6c42\u6c42\u6700\u77ed\u8def\u5f84\u6811\u7684\u65b9\u6848\u6570\uff0c\u6b64\u65f6\u53ef\u4ee5\u601d\u8003\uff0c\u82e5\u5bf9\u4e8e\u6bcf\u4e00\u6761\u88ab\u62d3\u5c55\u7684\u8fb9\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5c06\u5176\u8fde\u5165\u70b9\u96c6\u4e2d\u6240\u6709\u6700\u5c0f\u8fb9\u90fd\u8bb0\u5f55\u4e0b\u6765\uff0c\u5219\u5904\u7406\u7b54\u6848\u65f6\u5373\u53ef\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5c06\u5176\u5bf9\u5e94\u7684\u8fb9\u679a\u4e3e\u4e00\u6b21\uff0c\u7531\u4e8e\u6bcf\u6761\u8fb9\u53ea\u4f1a\u7531\u4e00\u4e2a\u8282\u70b9\u8bb0\u5f55\uff0c\u5373\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(m)$\uff0c\u4e0d\u4f1a$TLE$\u3002\n\n\u4f46\u662f\u5982\u679c\u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u5219\u4f1a\u9020\u6210\u4e25\u91cd\u7684\u4e0d\u65b9\u4fbf\uff0c\u56e0\u4e3a\u4f60\u9700\u8981\u5f00\u4e24\u7ec4\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u5bf9\u4e8e\u6b63\u5e38\u5199\u6cd5\u6765\u8bf4\u6709\u4e25\u91cd\u7684\u4e0d\u8212\u670d\uff0c\u800c\u5f00$n^2$\u7684\u6570\u7ec4\u5219\u6709\u5927\u7ea6$1.5\u00d710^5$MB\uff0c\u4f1a\u4e25\u91cd$MLE$\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528vector\u5b58\u8fb9\n\n\u800c\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u5219\u53ef\u4ee5\u4f7f\u7528\u5927\u6cd5\u5e08$\uff08dfs\uff09$\u7b97\u6cd5\uff0c\u7b80\u6d01\u6613\u61c2\uff0c\u65b9\u4fbf\u7f16\u5199\u3002\n\n\u8fd8\u6709\u4e00\u70b9\u503c\u5f97\u6ce8\u610f\uff0c\u5c31\u662f\u8be5\u9898\u8fb9\u6743\u4e3a1\uff0c\u6240\u4ee5\u53ef\u5c06$dijkstra$\u6539\u4e3a$bfs$\uff0c\u4f18\u5316\u4e00\u4e2a$log_n$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n```cpp\nqueue<int>q;\nvoid bfs(){\n\tmemset(ans,0x7f,sizeof(ans));\n\tq.push(1);//\u4ece\u4e00\u53f7\u8282\u70b9\u5f00\u59cb\n\tans[1]=0;in[1]=1;\n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tif(in[x]==1){\n\t\t\tcontinue;\n\t\t}\n\t\tin[x]=1;\n\t\tfor(int i=bg[x];i;i=ne[i]){\n\t\t\tint y=to[i];\n\t\t\tif(ans[x]+1==ans[y]){\n\t\t\t\t//\u628a\u6240\u6709\u53ef\u4ee5\u5c06\u70b9y\u62c9\u8fdb\u6811\u4e2d\u7684\u8fb9\u52a0\u5165vector\n\t\t\t\tv[y].push_back(nu[i]);\n\t\t\t}\n\t\t\tif(ans[x]+1<ans[y]){\n\t\t\t\tv[y].clear();//\u524d\u9762\u7684\u8fb9\u4e0d\u6ee1\u8db3\u7b2c\u4e00\u6761\u6027\u8d28\uff0c\u9700\u8981\u5220\u6389\n\t\t\t\tv[y].push_back(nu[i]);\n\t\t\t\tans[y]=ans[x]+1;\n\t\t\t\tq.push(y);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\u7136\u540e\u5c31\u662f\u8f93\u51fa\u65b9\u6848\u7684$dfs$\u4e86\n\n```cpp\nvoid dfs(int x){//\u8fd9\u91cc\u8981\u6ce8\u610f\uff0cx\u662f\u4ece2\u5f00\u59cb\u7684\n\t//\u56e0\u4e3a1\u53f7\u8282\u70b9\u662f\u539f\u70b9\uff0c\u5e76\u6ca1\u6709\u5bf9\u5e94\u8fb9\n\tif(x>n){\n\t\tt++;\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tprintf(\"%lld\",pd[i]);\n\t\t}\n\t\tcout<<\"\\n\";\n\t\tif(t>=e){//\u5982\u679c\u65b9\u6848\u6570\u8fbe\u5230\u8981\u6c42\u76f4\u63a5\u7ed3\u675f\n\t\t\texit(0);\n\t\t}\n\t\treturn;\n\t}\n\tfor(int i=0;i<v[x].size();i++){//\u679a\u4e3e\u6bcf\u4e00\u6761\u5bf9\u5e94\u8fb9\n\t\tif(pd[v[x][i]]==1){\n\t\t\tcontinue;\n\t\t}\n\t\tpd[v[x][i]]=1;\n\t\tdfs(x+1);\n\t\tpd[v[x][i]]=0;\n\t}\n}\n```\n\n",
        "postTime": 1601047990,
        "uid": 90176,
        "name": "xixiup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1005F \u3010Berland and the Shortest Paths\u3011"
    },
    {
        "content": "# CF1005F Berland and the Shortest Paths\n\nupdated\uff1a\u5728\u548c\u540c\u673a\u623f\u540c\u5b66\u8ba8\u8bba\u65f6\u53d1\u73b0\u4e86\u4e00\u7ec4\u6781\u5176\u8be1\u5f02\u7684\u6570\u636e\uff0c\u4e8e\u662f\u589e\u52a0\u4e86\u90e8\u5206\u8bf4\u660e\u3002\n## \u524d\u8a00\n\n\u6700\u8fd1\u5728\u505a\u6700\u77ed\u8def\u5f84\u6811\u7684\u9898\u76ee\uff0c\u4e8e\u662f\u5237\u5230\u4e86\u8fd9\u4e2a\u3002\n\n\u611f\u89c9\u8fd8\u662f\u633a\u6709\u610f\u601d\u7684\u3002\n\n## \u6700\u77ed\u8def\u5f84\u6811\n\n\u5173\u4e8e\u6700\u77ed\u8def\u5f84\u6811\u7684\u6982\u5ff5\u4ecb\u7ecd\u4ee5\u53ca\u57fa\u672c\u6c42\u6cd5\uff0c\u53ef\u4ee5\u770b\u770b\u6211\u7684[\u8fd9\u4e00\u7bc7\u9898\u89e3](https://www.luogu.com.cn/blog/LawrenceSivan/cf545e-paths-and-trees-zui-duan-lu-jing-shu-post)\uff0c\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\uff0c\u8fd9\u91cc\u4e3b\u8981\u8bf4\u4e00\u4e0b\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u3002\n\n## \u672c\u9898\u601d\u8def\n\n\u9996\u5148\u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u6700\u77ed\u8def\u5f84\u6811\u5e76\u4e0d\u4e00\u5b9a\u662f\u552f\u4e00\u7684\u3002\n\n\u5f53\u51fa\u73b0\u4e86\u5f88\u591a\u6761\u8ddd\u79bb\u76f8\u7b49\u7684\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u6210\u4e3a\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u7684\u8fb9\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u5728\u8bb0\u5f55\u524d\u9a71\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u90fd\u6709\u54ea\u4e9b\u76f8\u7b49\u7684\u8def\u5f84\u53ef\u4ee5\u6269\u5c55\u51fa\u8fd9\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8fd9\u4e9b\u90fd\u4f1a\u5bf9\u7ed3\u679c\u4ea7\u751f\u8d21\u732e\u3002\n\n\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6211\u4eec\u76f4\u63a5\u628a\u524d\u9a71\u4e2a\u6570\u4e58\u8d77\u6765\uff0c\u5f97\u5230\u7684\u5c31\u662f\u603b\u65b9\u6848\u6570\u3002\n\n$tot$ \u5343\u4e07\u522b\u5fd8\u8bb0\u8d4b\u503c\u6210 $1$\u3002\n\n```cpp\ninline bool check_k(){\n\tfor(re int i=2;i<=n;i++){\n\t\tif(tot*vec[i].size()>k){\n\t\t\treturn 0;\t\n\t\t}\n\t\telse tot*=vec[i].size();\n\t}\n\treturn 1;\n}\n```\n\n\u8fd9\u91cc\u9700\u8981\u6781\u5176\u6ce8\u610f\u4e00\u70b9\uff01\n\n\u8fd9\u91cc\u5343\u4e07\u4e0d\u80fd\u5199\u6210\u8fd9\u6837\uff1a\n\n```cpp\nfor (int i = 2; i <= n; i++) {\n\tans *= vec[i].size();\n}\nprintf(\"%lld\\n\", min(ans, k));\n```\n\n\u8fd9\u4e00\u9898\u6709\u4e00\u4e2a\u6781\u5176\u8be1\u5f02\u7684\u6570\u636e #26,\u5b83\u4f1a\u5bfc\u81f4 $ans$ \u5728\u67d0\u4e00\u6b21\u6267\u884c\u4e58\u6cd5\u7684\u65f6\u5019\u76f4\u63a5\u6ea2\u51fa\uff0c\u5e76\u4e14\u5341\u5206\u8be1\u5f02\u7684\u662f\uff0c\u4ed6\u4f1a\u76f4\u63a5\u53d8\u6210 $0$\uff0c\u8fd9\u5c31\u5bfc\u81f4\u5269\u4e0b\u7684 $ans$ \u4e00\u76f4\u90fd\u662f $0$\uff0c\u7136\u540e\u6700\u540e\u53d6 min \u7684\u65f6\u5019\u5c31\u4f1a\u8f93\u51fa $0$\u3002\n\n~~\u5728\u6b64\u8c34\u8d23\u6bd2\u7624hack\u8005~~\n\n\u7136\u540e\u53ef\u601c\u7684\u540c\u673a\u623f wiki \u540c\u5b66\u8c03\u4e86\u534a\u5929\u624d\u641e\u51fa\u8fd9\u4e2a\u8be1\u5f02\u7684\u73a9\u610f\u3002\n\n\u6240\u4ee5\u4e00\u5b9a\u8981\u53ca\u65f6\u5224\u65ad\uff0c\u4e0d\u80fd\u5168\u90fd\u6267\u884c\u5b8c\u6bd5\u4e58\u6cd5\u624d\u5224\u65ad\u3002\n\n## \u7ec6\u8282\u95ee\u9898\uff1a\n\n\u5173\u4e8e\u5b58\u56fe\uff1a\n\n\u524d\u5411\u661f\u5b58\u56fe\u662f\u6ca1\u95ee\u9898\u7684\u3002\n\n\u95ee\u9898\u5728\u4e8e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u90fd\u8981\u7ef4\u62a4\u4e00\u4e2a\u524d\u9a71\u96c6\u5408\u3002\n\n\u7136\u540e\u76f4\u63a5\u7a7a\u95f4\u5c31 $O(n^2)$\u3002\n\n\u7136\u540e\u8981\u662f\u518d\u5f00\u4e00\u4e2a\u9759\u6001\u6570\u7ec4\u90a3\u53ef\u80fd\u5c31\u6b7b\u7684\u6bd4\u8f83\u60e8\u3002\n\n\u4e8e\u662f\u8003\u8651\u7528 `std::vector` \u6765\u5b58\u50a8\u524d\u9a71\u96c6\u5408\u3002\n\n\u5173\u4e8e\u6700\u77ed\u8def\u5f84\u6811\u6c42\u6cd5\uff1a\n\n>\u5982\u679c $d_i$ \u8868\u793a\u9996\u90fd\u5230 $i$ \u53f7\u57ce\u5e02\u6240\u9700\u7ecf\u8fc7\u7684\u8def\u7684\u6761\u6570\uff0c\u6cbf\u7740\u9009\u62e9\u7684 $n-1$ \u6761\u8def\u8d70\u6240\u5f97\u7684 $d_1+d_2+\\cdots+d_n$ \u5e94\u662f\u6700\u5c0f\u7684\u3002\n\n\u4e8e\u662f\u8fd9\u9898\u5c31\u6709\u4e86\u8fb9\u6743\u90fd\u662f $1$ \u7684\u6781\u5176\u4f18\u7f8e\u7684\u6027\u8d28\u3002\n\n\u4e8e\u662f\u5bf9\u4e8e\u8fb9\u6743\u90fd\u662f $1$ \u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u53bb\u8dd1 Dijkstra \u4e86\uff0c\u76f4\u63a5\u5e7f\u641c\u5c31\u884c\u3002\n\n\u590d\u6742\u5ea6\u76f4\u63a5\u6389\u4e00\u4e2a $\\log$\u3002\n\n$O((n+m)\\log n->O(n+m)$\n\n```cpp\ninline void bfs(int s){\n\tqueue <int> q;\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[s]=0;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tif(vis[u])continue;\n\t\tvis[u]=true;\n\t\tfor(re int i=head[u];i;i=nxt[i]){\n\t\t\tint v=to[i];\n\t\t\tif(dis[v]>=dis[u]+1){\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\tvec[v].push_back(i);\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\u5173\u4e8e\u8f93\u51fa\u7b54\u6848\uff1a\n\n\u56e0\u4e3a\u6211\u4eec\u8bb0\u5f55\u5e76\u4fdd\u7559\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u524d\u9a71\uff0c\u6240\u4ee5\u76f4\u63a5 dfs \u679a\u4e3e\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u591a\u4e8e $k$ \u4e2a\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f\u5c31\u884c\u3002\n\n```cpp\nvoid dfs(int step){\n\tif(step==n+1){\n\t\tfor(re int i=1;i<=m;i++){\n\t\t\tprintf(\"%d\",vis[i]);\n\t\t}\n\t\tputs(\"\");\n\t\tCase++;\n\t\tif(Case>=k){//\u591a\u4e8ek\u4e2a\uff0c\u7ed3\u675f\n\t\t\texit(0);\n\t\t}\n\t\treturn;\n\t}\n\tfor(re int i=0;i<vec[step].size();i++){\n\t\tvis[(vec[step][i]+1)/2]=1;\n\t\tdfs(step+1);\n\t\tvis[(vec[step][i]+1)/2]=0;\n\t}\n}\n```\n\u8fd9\u91cc\u8bf4\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u662f $(vec[step][i]+1)/2$\uff0c\u56e0\u4e3a\u5b58\u7684\u662f\u53cc\u5411\u8fb9\uff0c\u5bfc\u81f4\u53cc\u5411\u8fb9\u6709\u4e86\u4e0d\u540c\u7684 $id$\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u53d6\u4e00\u534a\u3002 \n\n## CODE:\n\n```cpp\n\n//#define LawrenceSivan\n\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define re register\nconst int maxn=2e5+5;\n#define INF 0x3f3f3f3f\n\nint n,m,k;\n\nint head[maxn],nxt[maxn<<1],to[maxn<<1],cnt;\n\ninline void add(int u,int v){\n\tnxt[++cnt]=head[u];\n\tto[cnt]=v;\n\thead[u]=cnt;\n}\n\nint dis[maxn];\n\nvector <int> vec[maxn];\n\nbool vis[maxn];//\u8fd9\u4e2a\u6570\u7ec4\u53ef\u4ee5\u4e24\u7528\uff0c\u5728bfs\u91cc\u7528\u6765\u5224\u65ad\u70b9\u6765\u6ca1\u6765\u8fc7\uff0c\u5728dfs\u4e2d\u7528\u4e8e\u8f93\u51fa\u7b54\u6848\n\nll tot=1;//\u5343\u4e07\u522b\u5fd8\u8bb0\u8d4b\u503c\u6210 1\n\ninline void bfs(int s){\n\tqueue <int> q;\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[s]=0;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tif(vis[u])continue;\n\t\tvis[u]=true;\n\t\tfor(re int i=head[u];i;i=nxt[i]){\n\t\t\tint v=to[i];\n\t\t\tif(dis[v]>=dis[u]+1){\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\tvec[v].push_back(i);\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\ninline bool check_k(){\n\tfor(re int i=2;i<=n;i++){\n\t\tif(tot*vec[i].size()>k){\n\t\t\treturn 0;\t\n\t\t}\n\t\telse tot*=vec[i].size();\n\t}\n\treturn 1;\n}\n\nint Case;\n\nvoid dfs(int step){\n\tif(step==n+1){\n\t\tfor(re int i=1;i<=m;i++){\n\t\t\tprintf(\"%d\",vis[i]);\n\t\t}\n\t\tputs(\"\");\n\t\tCase++;\n\t\tif(Case>=k){\n\t\t\texit(0);\n\t\t}\n\t\treturn;\n\t}\n\tfor(re int i=0;i<vec[step].size();i++){//\u679a\u4e3e\n\t\tvis[(vec[step][i]+1)/2]=1;\n\t\tdfs(step+1);\n\t\tvis[(vec[step][i]+1)/2]=0;\n\t}\n\t\n}\n\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)){x=x*10+(ch^48);ch=getchar();}\n    return x*f;\n}\n\nint main(){\n#ifdef LawrenceSivan\n    freopen(\"aa.in\",\"r\",stdin);\n    freopen(\"aa.out\",\"w\",stdout);\n#endif\n\tn=read();m=read();k=read();\n\tfor(re int i=1,u,v;i<=m;i++){\n\t\tu=read(),v=read();\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\t\n\tbfs(1);\n\tmemset(vis,0,sizeof(vis));\n    \n\tprintf(\"%lld\\n\",check_k()?tot:k);\n\tdfs(2);//\u4ece2\u5f00\u59cb\uff0c1\u6ca1\u6709\u8fb9\u3002\n\n\treturn 0;\n}\n```",
        "postTime": 1623053008,
        "uid": 375208,
        "name": "LawrenceSivan",
        "ccfLevel": 0,
        "title": "CF1005F Berland and the Shortest Paths\uff08\u6700\u77ed\u8def\u5f84\u6811\uff09"
    },
    {
        "content": "\u8fd9\u9898\u4e0d\u9519...\n\n\u9996\u5148\uff0c\u4e0d\u96be\u770b\u5230\u4ed6\u60f3\u8ba9\u4f60\u6c42\u51fa\u7684\u662f\u6700\u77ed\u8def\u6811\n\n\u7136\u540e\uff0c\u8003\u8651\u5230\u6240\u6709\u8fb9\u6743\u5747\u4e3a1\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528bfs\u76f4\u63a5\u751f\u6210\u6700\u77ed\u8def\u6811\n\n\u81f3\u4e8e\u65b9\u6848\u7684\u50a8\u5b58\uff0c\u53ef\u4ee5\u5728\u52a0\u8fb9\u7684\u65f6\u5019\u540c\u65f6\u8bb0\u5f55\u8fb9\u7684\u7f16\u53f7\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u80fd\u8f6c\u79fb\u4ed6\u7684\u6700\u77ed\u8def\u7684\u8fb9\u7684\u7f16\u53f7\u7684\u96c6\u5408\uff0c\u8fd9\u6837\u603b\u7684\u65b9\u6848\u6570\u5c31\u662f\u6240\u6709\u7684\u96c6\u5408\u5927\u5c0f\u7684\u4e58\u79ef\n\n\u7136\u540e\u7528dfs\u5728\u6bcf\u4e2a\u96c6\u5408\u4e2d\u9009\u4e00\u4e2a\u5143\u7d20\u8f93\u51fa\u5373\u53ef\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <stack>\nusing namespace std;\nstruct Edge\n{\n    int next;\n    int to;\n    int num;\n}edge[400005];\nint head[200005];\nint dep[200005];\nvector <int> v[200005];\nint used[200005];\nint cnt=1;\nint n,m,k;\nvoid init()\n{\n    memset(head,-1,sizeof(head));\n    cnt=1;\n}\nvoid add(int l,int r,int v)\n{\n    edge[cnt].next=head[l];\n    edge[cnt].to=r;\n    edge[cnt].num=v;\n    head[l]=cnt++;\n}\nvoid bfs(int rt)\n{\n    queue <int> M;\n    M.push(rt);\n    dep[rt]=0;\n    while(!M.empty())\n    {\n        int u=M.front();\n        M.pop();\n        for(int i=head[u];i!=-1;i=edge[i].next)\n        {\n            int to=edge[i].to;\n            if(!dep[to])\n            {\n                dep[to]=dep[u]+1;\n                v[to].push_back(edge[i].num);\n                M.push(to);\n            }else if(dep[to]==dep[u]+1)\n            {\n                v[to].push_back(edge[i].num);\n            }\n        }\n    }\n}\nint cct=0,tot=1;\nvoid dfs(int dep)\n{\n    if(dep==n+1)\n    {\n        for(int i=1;i<=m;i++)\n        {\n            printf(\"%d\",used[i]);\n        }\n        printf(\"\\n\");\n        cct++;\n        if(cct==tot)\n        {\n            exit(0);\n        }\n        return;\n    }\n    for(int i=0;i<v[dep].size();i++)\n    {\n        used[v[dep][i]]=1;\n        dfs(dep+1);\n        used[v[dep][i]]=0;\n    }\n}\ninline int read()\n{\n    int f=1,x=0;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint main()\n{\n    n=read(),m=read(),k=read();\n    init();\n    for(int i=1;i<=m;i++)\n    {\n        int x=read(),y=read();\n        add(x,y,i);\n        add(y,x,i);\n    }\n    bfs(1);\n    for(int i=2;i<=n;i++)\n    {\n        if((long long)tot*v[i].size()>k)\n        {\n            tot=k;\n            break;\n        }else\n        {\n            tot*=v[i].size();\n        }\n    }\n    printf(\"%d\\n\",tot);\n    dfs(2);\n    return 0;\n}\n```",
        "postTime": 1540299126,
        "uid": 66905,
        "name": "leozhang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1005F \u3010Berland and the Shortest Paths\u3011"
    },
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u770b\u51fa\u7b26\u5408\u9898\u76ee\u4e2d\u4e24\u4e2a\u6761\u4ef6\u7684\u4e00\u5b9a\u662f\u6700\u77ed\u8def\u5f84\u6811\uff0c\u4f46\u6700\u77ed\u8def\u5f84\u6811\u663e\u7136\u4e0d\u552f\u4e00\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u70b9 $u$ \u7ef4\u62a4\u4e00\u4e2a\u53ef\u80fd\u6210\u4e3a\u4e00\u68f5\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u7684\u8fb9\u7684\u8fb9\u96c6 $E_u$\uff0c\u5f62\u5f0f\u5316\u7684\u8bf4\u6709 $E_u=\\{v\\to u:v\\in V,dis_u=dis_v+1\\}$\uff0c\u5176\u4e2d $dis_u$ \u4e3a $1\\to u$ \u7684\u6700\u77ed\u8def\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u4ece\u6bcf\u4e2a $u\\neq 1$ \u7684 $E_u$ \u4e2d\u53d6\u4e00\u6761\u8fb9\u6784\u6210\u7684 $n-1$ \u4e2a\u70b9\u7684\u56fe\u4e00\u5b9a\u662f\u4e00\u4e2a\u8fde\u901a\u56fe\uff0c\u5e76\u4e14\u8fdb\u4e00\u6b65\u6211\u4eec\u8fd8\u53ef\u4ee5\u8bc1\u660e\u5b83\u662f\u4e00\u68f5\u6700\u77ed\u8def\u5f84\u6811\u3002\u8bfb\u8005\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u5f52\u7eb3\u8bc1\u660e\u6cd5\u81ea\u884c\u8bc1\u660e\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7206\u641c\u65b9\u6848\uff0c\u65b9\u6848\u6570\u4e5f\u53ef\u4ee5\u7b97\u51fa\u6765\uff1a\n\n$$\nans=\\prod_{u\\neq 1} |E_u|\n$$\n\n",
        "postTime": 1617764107,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1005F \u3010Berland and the Shortest Paths\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u8865\u5145\u4e00\u4e0b\u5173\u4e8e \u201c\u4e3a\u4ec0\u4e48\u6c42\u7684\u662f\u6700\u77ed\u8def\u5f84\u6811\u201d \u548c \u201c\u89e3\u6cd5\u7684\u6b63\u786e\u6027\u201d \u4e24\u4e2a\u95ee\u9898\u7684\u8bc1\u660e\u3002\n\n## \u6700\u77ed\u8def\u5f84\u6811\n\n\u8003\u8651\u4e00\u4e2a\u8fde\u901a\u65e0\u5411\u56fe $G$\uff0c\u4e00\u4e2a\u4ee5\u9876\u70b9 $v$ \u4e3a\u6839\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u6811 $T$ \u662f\u56fe $G$ \u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u7684\u751f\u6210\u6811\uff1a\u6811 $T$ \u4e2d\u4ece\u6839\u8282\u70b9 $v$ \u5230\u5176\u5b83\u9876\u70b9 $u$ \u7684\u8def\u5f84\u8ddd\u79bb\uff0c\u5728\u56fe $G$ \u4e2d\u662f\u4ece $v$ \u5230 $u$ \u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u3002\n\n\u5bf9\u4e8e\u6b64\u9898\u6765\u8bb2\uff0c\u4ee5 $1$ \u4e3a\u6839\u7684\u6700\u77ed\u8def\u5f84\u6811\u4fbf\u662f\u539f\u56fe\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u751f\u6210\u6811\uff1a\u8be5\u6811\u4e0a\u4ece $1$ \u5230\u4efb\u610f\u70b9\u7684\u8def\u5f84\u957f\u4e0e\u539f\u56fe\u8fd9\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u76f8\u7b49\u3002\n\n\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u5c06\u539f\u56fe\u5220\u53bb\u67d0\u4e9b\u8fb9\uff0c\u53ea\u7559\u4e0b\u4e00\u68f5\u6811\uff0c\u4f7f\u5f97\u4ece $1$ \u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u4e0d\u53d8\u3002\n\n## \u4e3a\u4ec0\u4e48\u6c42\u7684\u662f\u6700\u77ed\u8def\u5f84\u6811\n\n\u5f15\u7406\uff1a\u5bf9\u4e8e\u65e0\u5411\u6b63\u6743\u8fde\u901a\u56fe\uff0c\u6700\u77ed\u8def\u5f84\u6811\u4e00\u5b9a\u662f\u5b58\u5728\u7684\u3002\n\n\u8bc1\u660e\uff1a\u8003\u8651 Dij \u7b97\u6cd5\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f\u6bcf\u6b21\u6269\u5c55\u4e00\u4e2a\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\u66f4\u65b0\u6700\u77ed\u8def\u3002\u7c7b\u6bd4\u4e8e Prim \u7b97\u6cd5\uff0c\u5982\u679c\u70b9 $u$ \u6b64\u65f6\u7531\u70b9 $v$ \u66f4\u65b0\u8fc7\u6765\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u5c06 $u$ \u52a0\u5165\u8fdb\u76ee\u524d\u7684\u751f\u6210\u6811\u91cc\u9762\u6765\uff0c\u4e5f\u5c31\u662f\u5c06 $u,v$ \u8fde\u8fb9\u3002\u6240\u4ee5\u8dd1 Dij \u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5c31\u662f\u50cf Prim \u4e00\u6837\u5c06\u751f\u6210\u6811\u7531\u8d77\u70b9\u4e00\u6b65\u6b65\u6269\u5c55\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u662f\u6700\u77ed\u8def\u5f84\u6811\u3002\n\n\u6b64\u9898\u5bf9\u8fd9\u4e2a\u751f\u6210\u6811\u7684\u9650\u5236\u662f\u6700\u77ed\u8def\u4e4b\u548c\u6700\u5c0f\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u8981\u8bc1\u660e\u201c\u82e5\u6b64\u751f\u6210\u6811\u6700\u77ed\u8def\u4e4b\u548c\u6700\u5c0f\u7684\uff0c\u90a3\u4e48\u5b83\u662f SPT\u201d\u3002\n\n\u8003\u8651\u53bb\u8bc1\u660e\u5b83\u7684\u9006\u5426\u547d\u9898\u201c\u82e5\u6b64\u751f\u6210\u6811\u4e0d\u662f SPT\uff0c\u5219\u5176\u6700\u77ed\u8def\u4e4b\u548c\u4e0d\u662f\u6700\u5c0f\u7684\u201d\u3002\n\n\u8003\u8651\u6700\u77ed\u8def\u5f84\u6811\u7684\u5b9a\u4e49\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u8bb0 $d_v$ \u4e3a\u6811\u4e0a\u4ece $1$ \u5230 $v$ \u7684\u8ddd\u79bb\uff0c$dis_v$ \u4e3a\u539f\u56fe $1$ \u5230 $v$ \u7684\u6700\u77ed\u8def\uff0c\u6709 $d_v\\geq dis_v$\u3002\u800c\u6b64\u751f\u6210\u6811\u4e0d\u662f\u6700\u77ed\u8def\u5f84\u6811\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a $v$ \u4f7f\u5f97 $d_v\\neq dis_v$\uff0c\u4e5f\u5c31\u662f $d_v > dis_v$\uff0c\u800c $\\sum_{u\\neq v}d_u \\geq \\sum_{u\\neq v}dis_u$\uff0c\u6240\u4ee5 $\\sum d > \\sum dis$\uff0c\u6700\u77ed\u8def\u4e4b\u548c\u4e0d\u662f\u6700\u5c0f\u7684\uff0c\u8bc1\u6bd5\u3002\u6240\u4ee5\u8fd9\u9898\u6c42\u7684\u662f SPT\u3002\n\n## \u89e3\u6cd5\u53ca\u5176\u8bc1\u660e\n\n\u5148\u8bf4\u89e3\u6cd5:\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $i$ \u90fd\u7ef4\u62a4\u4e00\u4e2a\u8fb9\u7684\u96c6\u5408 $S_i$\u3002\n\n\u5bf9\u4e8e\u70b9 $u$ \u548c\u4e00\u6761\u6743\u503c\u4e3a $w$ \u7684\u8fb9 $(u,v)$\uff0c\u8bb0 $dis_i$ \u4e3a\u8d77\u70b9\u5230 $i$ \u6700\u77ed\u8def\uff0c\u82e5 $dis_u=dis_v+w$\uff0c\u5219\u5c06\u8fd9\u6761\u8fb9\u52a0\u5165 $S_u$\u3002\n\n\u6700\u540e\u5bf9\u4e8e\u9664\u8d77\u70b9\u5916\u7684\u6bcf\u4e2a\u70b9 $u$\uff0c\u5728 $S_u$ \u4e2d\u4efb\u9009\u4e00\u6761\u8fb9\u3002\u8fd9\u4e9b\u8fb9\u6240\u7ec4\u6210\u7684\u751f\u6210\u6811\u4e00\u5b9a\u662f\u4e00\u68f5 SPT\u3002\n\n---\n\n\u8bc1\u660e\uff1a\u5148\u8bc1\u660e\u5b83\u7684\u5f62\u6001\u662f\u4e00\u68f5\u6811\u3002\n\n\u7531\u4e8e\u5b83\u662f\u4e00\u4e2a $n-1$ \u6761\u8fb9\u7684\u8fb9\u96c6\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8bc1\u660e\u5b83\u662f\u8054\u901a\u7684\u5373\u53ef\uff0c\u5373\u5b83\u8986\u76d6\u4e86\u6240\u6709\u7684\u70b9\u3002\u5bf9\u4e8e\u9664\u8d77\u70b9\u5916\u7684\u4efb\u610f\u4e00\u4e2a\u70b9 $u$\uff0c\u7531\u4e8e\u6700\u77ed\u8def\u5f84\u6811\u5fc5\u7136\u5b58\u5728\uff0c\u6240\u4ee5\u5b83\u4e00\u5b9a\u6709\u7236\u8282\u70b9 $v$\uff0c\u4e14 $dis_v=dis_u-w<dis_u$\u3002\u82e5 $v=1$\uff0c\u5219 $u$ \u663e\u7136\u4e0e $1$ \u8054\u901a\uff1b\u53cd\u4e4b\uff0c\u5219\u6709 $dis_v>0=dis_1$\uff0c\u5219\u9012\u5f52\u5230 $v$ \u7684\u7236\u4eb2 $v_2$ \u6709 $dis_{v_{2}}<dis_v$\uff0c\u4e00\u76f4\u9012\u5f52\u4e0b\u53bb\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u7684 $dis$ \u4e0d\u4e3a $0$ \u5219\u53ef\u4ee5\u4e0d\u65ad\u51cf\u5c0f\uff0c\u4e00\u5b9a\u53ef\u4ee5\u9012\u5f52\u5230\u51fa\u53d1\u70b9\uff0c\u6240\u4ee5 $u$ \u4e0e\u51fa\u53d1\u70b9\u8054\u901a\u3002\u6240\u4ee5\u4efb\u53d6\u4e24\u70b9 $u,v$\uff0c\u6709 $u$ \u4e0e $1$ \u8054\u901a\u4e14 $1$ \u4e0e $v$ \u8054\u901a\uff0c\u8bc1\u6bd5\u3002\n\n\u7136\u540e\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e0e\u539f\u56fe\u76f8\u7b49\uff0c\u8003\u8651\u7528\u5f52\u7eb3\u6cd5\u3002\u4efb\u53d6\u4e00\u4e2a\u70b9 $u$\uff0c\u82e5\u4ece $1$ \u5230 $u$ \u7684\u7236\u8282\u70b9\u4e0a\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u6ee1\u8db3\u6b64\u6027\u8d28\uff0c\u53c8\u56e0\u4e3a $d_u=d_{fa_u}+w=dis_{fa_u}+w=dis_u$\uff0c\u6240\u4ee5 $u$ \u4e5f\u6ee1\u8db3\u6b64\u6027\u8d28\u3002\u53c8\u56e0\u4e3a\u6839\u8282\u70b9 $1$ \u6709 $d_1=dis_1=0$\uff0c\u6240\u4ee5\u6240\u6709\u70b9\u6ee1\u8db3\u6b64\u6027\u8d28\u3002\n\n\u8fd9\u4e2a\u7ed3\u8bba\u5982\u679c\u7528\u4e00\u53e5\u8bdd\u89e3\u91ca\u5927\u6982\u662f\uff0c\u4e00\u4e2a\u70b9\u5728 SPT \u4e2d\u7684\u7236\u8282\u70b9\u662f\u5728\u539f\u56fe\u8dd1 Dij \u8fc7\u7a0b\u4e2d\u80fd\u591f\u66f4\u65b0\u5b83\u7684\u70b9\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u3002\n\n\u5229\u7528\u8fd9\u4e2a\u7ed3\u8bba\u4e5f\u662f\u53ef\u4ee5\u89e3\u51b3 SPT \u8ba1\u6570\u7684\u95ee\u9898\u7684\uff0c\u4e5f\u5c31\u662f\u5c06\u6240\u6709\u7684\u96c6\u5408\u5927\u5c0f\u4e58\u8d77\u6765\u3002\n\n## \u4ee3\u7801\n\n1k \u5de6\u53f3\uff0c\u5927\u6982\u53ea\u6709\u4e00\u4e2a Dij\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u975e\u5e38\u597d\u5199\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rgi register int\ntypedef long long ll;\nusing namespace std;\ninline void read(){}template <typename T,typename... Ts> inline void read(T& A,Ts&... As){\n\tT x=0,f=1;char ch=getchar();\n\twhile(!(ch&16)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch&16)x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\tA=x*f,read(As...);\n}\nconst int N=200010;\nint n,m,u,v,to;\nstruct node{int id,d;};\nbool operator<(node a,node b){return a.d>b.d;}\nint e[N],d[N],vis[N];\nvector<int>a[N],ch[N];\npriority_queue<node>q;\nll k,res=1;\nvoid dfs(rgi x){\n\tif(x>n){\n\t\tfor(rgi i=1;i<=m;++i)putchar((e[i]<0)+'0');\n\t\treturn puts(\"\"),void(--k);\n\t}\n\tfor(rgi to:ch[x]){\n\t\tif(!k)return;\n\t\te[to]=~e[to],dfs(x+1),e[to]=~e[to];\n\t}\n}\nint main(){\n\tread(n,m,k);\n\tfor(rgi i=1;i<=m;++i){\n\t\tread(u,v),e[i]=u^v;\n\t\ta[u].push_back(i),a[v].push_back(i);\n\t}\n\tmemset(d,127,sizeof d);\n\td[1]=0,q.push(node{1,0});\n\twhile(!q.empty()){\n\t\tint x=q.top().id;\n\t\tq.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=1;\n\t\tfor(rgi i:a[x]){\n\t\t\tif(d[to=e[i]^x]>d[x]+1){\n\t\t\t\td[to]=d[x]+1;\n\t\t\t\tif(!vis[to])q.push(node{to,d[to]});\n\t\t\t}\n\t\t}\n\t}\n\tfor(rgi i=1;i<=n;++i){\n\t\tfor(rgi j:a[i])if(d[to=e[j]^i]==d[i]+1)ch[to].push_back(j);\n\t}\n\tfor(rgi i=2;i<=n;++i){\n\t\tres*=(ll)ch[i].size();\n\t\tif(res>k)break;\n\t}\n\tk=min(res,k),cout<<k<<'\\n',dfs(2);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1609243241,
        "uid": 78372,
        "name": "M4_SOPMODII_JR",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1005F \u3010Berland and the Shortest Paths\u3011"
    },
    {
        "content": "### $\\text{Difficulty : 2100}$\n---\n### \u89e3\u9898\u601d\u8def\uff1a\n\n\u95ee\u9898\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5982\u4f55\u6c42\u51fa\u6700\u5c0f\u8def\u5f84\u751f\u6210\u6811\u4ee5\u53ca\u5982\u4f55\u8fdb\u884c\u65b9\u6848\u6570\u7684\u8ba1\u6570\u3002\n\n\u5bf9\u4e8e\u524d\u8005\uff0c\u4e0d\u8003\u8651\u672c\u9898\u7684\u7279\u6b8a\u6027\u8d28\uff0c\u4e00\u79cd\u6bd4\u8f83\u4e00\u822c\u7684\u65b9\u6cd5\u662f\u7528 $\\text{Dijkstra}$ \u8dd1\u4e00\u904d\uff0c\u5c06\u4efb\u610f\u4e00\u6761\u53ef\u4ee5\u8fdb\u884c\u66f4\u65b0\u7684\u8fb9\u4f5c\u4e3a\u52a0\u5165\u7684\u8fb9\u3002\u7279\u6b8a\u5730\uff0c\u5982\u679c\u8981\u6c42\u603b\u8fb9\u6743\u6700\u5c0f\uff0c\u9700\u8981\u5c06\u6700\u77ed\u7684\u4e00\u6761\u8def\u52a0\u5165\u3002\n\n\u800c\u8fd9\u9053\u9898\u76ee\u6240\u6709\u7684\u8fb9\u6743\u90fd\u4e3a $1$\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 $\\text{BFS}$ \u8fdb\u884c\u8def\u5f84\u7684\u7edf\u8ba1\uff0c\u5c06\u6240\u6709\u7684\u80fd\u591f\u66f4\u65b0\u7684\u8fb9\u5168\u90fd\u7edf\u8ba1\u4e0b\u6765\u3002\u5728\u8fd9\u4e9b\u88ab\u7edf\u8ba1\u7684\u8fb9\u91cc\uff0c\u6bcf\u4e00\u4e2a\u70b9\u4efb\u610f\u9009\u62e9\u4e00\u6761\u8fb9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6848\u3002\n\n\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684\u603b\u65b9\u6848\u6570\u4e3a $\\prod_{i=1}^ncnt_i$\uff0c\u6700\u540e\u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a $\\text{DFS}$ \u8fdb\u884c\u4e00\u4e2a\u65b9\u6848\u7684\u8f93\u51fa\u5c31\u884c\u4e86\u3002\n\n---\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<queue>\nusing namespace std;\nconst int MAXN=400005;\nint n,m,k,head[MAXN],nxt[MAXN],num[MAXN],head1[MAXN],nxt1[MAXN],num1[MAXN],x,y,tot,tot1,dis[MAXN],cnt[MAXN];\nint vis[MAXN],id[MAXN],book[MAXN],ans_cnt,flag;\nqueue <int> q;\nvoid add(int x,int y){\n\tnxt[++tot]=head[x];\n\thead[x]=tot;\n\tnum[tot]=y;\n}\nvoid add1(int x,int y,int ID){\n\tcnt[x]++;\n\tnxt1[++tot1]=head1[x];\n\thead1[x]=tot1;\n\tnum1[tot1]=y;\n\tid[tot1]=ID;\n}\nvoid bfs(int S){\n\tq.push(S);\n\tfor(int i=1;i<=n;i++)dis[i]=2147483647;\n\tdis[1]=0;vis[1]=1;\n\twhile(!q.empty()){\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[now];i;i=nxt[i]){\n\t\t\tif(dis[now]+1<=dis[num[i]]){\n\t\t\t\tdis[num[i]]=dis[now]+1;\n\t\t\t\tadd1(num[i],now,(i+1)/2);\n\t\t\t\tif(vis[num[i]]==0){\n\t\t\t\t\tvis[num[i]]=1;\n\t\t\t\t\tq.push(num[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint calc(){\n\tint now=1;\n\tcnt[1]=1;\n\tfor(int i=1;i<=n;i++){\n\t\tif(now>=k)return k;\n\t\tnow*=cnt[i];\n\t}\n\treturn now;\n}\nvoid dfs(int now){\n\tif(flag)return;\n\tif(now==n+1){\n\t\tfor(int i=1;i<=m;i++)printf(\"%d\",book[i]);\n\t\tprintf(\"\\n\");\n\t\tans_cnt++;\n\t\tif(ans_cnt==k)flag=1;\n\t\treturn;\n\t}\n\tfor(int i=head1[now];i;i=nxt1[i]){\n\t\tbook[id[i]]=1;\n\t\tdfs(now+1);\n\t\tif(flag)return;\n\t\tbook[id[i]]=0;\n\t}\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);add(y,x);\n\t}\n\tbfs(1);\n\tprintf(\"%d\\n\",calc());\n\tdfs(2);\n\treturn 0;\n}\n```\n",
        "postTime": 1648430008,
        "uid": 223559,
        "name": "qxp101",
        "ccfLevel": 6,
        "title": "CF1005F Berland and the Shortest Paths \u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u4e0d\u5728 $1$ \u53f7\u70b9\u5230\u5176\u4f59\u4efb\u610f\u70b9\u7684\u6700\u77ed\u8def\u4e0a\u9762\uff0c\u5219\u4e00\u5b9a\u4e0d\u53ef\u80fd\u88ab\u9009\u3002\n\n\u90a3\u4e48\u53ef\u4ee5\u8003\u8651\u5148\u4f7f\u7528 BFS \u6c42\u51fa $1$ \u53f7\u70b9\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u90a3\u4e48\u52a0\u5165\u7ed3\u679c\u8fb9\u96c6\uff0c\u7136\u540e\u76f4\u63a5\u4ece $2$ \u53f7\u70b9\u5f00\u59cb\u7206\u641c\u5373\u53ef\u6c42\u51fa\u7b54\u6848\uff0c\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u6700\u591a\u53ea\u8981\u6c42\u51fa $k$ \u6761\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(m+k)$ \u7684\u3002\n\n```cpp\n#include <iostream>\n#include <vector>\n// #define TIME\n\nusing namespace std;\nusing LL = long long;\nusing Pll = pair<LL, LL>;\n\nconst int kN = 2e5 + 1;\nusing S = string;\n\nint n, m, k, d[kN], q[kN], h = 1, t;\nvector<Pll> e[kN];\nvector<int> p[kN];\nvector<S> v;\nS s;\n\nvoid R(int x, int _d) {\n  if (d[x] > _d) {\n    d[x] = _d, q[++t] = x;\n  }\n}\nvoid D(int x) {\n  if (v.size() >= k) {\n    return;\n  }\n  if (x > n) {\n    v.push_back(s);\n    return;\n  }\n  for (int i : p[x]) {\n    s[i - 1] = '1', D(x + 1), s[i - 1] = '0';\n  }\n}\n\nint main() {\n  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> m >> k;\n  for (int i = 1, x, y; i <= m; ++i) {\n    cin >> x >> y;\n    e[x].push_back({i, y}), e[y].push_back({i, x});\n  }\n  fill(d + 1, d + n + 1, 1 << 30);\n  for (R(1, 0); h <= t; ++h) {\n    int x = q[h];\n    for (auto i : e[x]) {\n      R(i.second, d[x] + 1);\n    }\n  }\n  for (int i = 2; i <= n; ++i) {\n    for (auto j : e[i]) {\n      if (d[j.second] + 1 == d[i]) {\n        p[i].push_back(j.first);\n      }\n    }\n  }\n  s = string(m, '0'), D(2);\n  cout << v.size() << endl;\n  for (auto &&i : v) {\n    cout << i << endl;\n  }\n#ifdef TIME\n  fprintf(stderr, \"\\nTIME: %dms\", clock());\n#endif\n  return 0;\n}\n```",
        "postTime": 1641116493,
        "uid": 376161,
        "name": "wsfxk",
        "ccfLevel": 6,
        "title": "CF1005F \u9898\u89e3"
    },
    {
        "content": "# \u9898\u610f\n\u6c42\u51fa\u6709\u591a\u5c11\u6700\u77ed\u8def\u5f84\u6811\uff0c\u82e5\u5c0f\u4e8e$ K $\u5219\u8f93\u51fa\u65b9\u6848\u603b\u6570\uff0c\u5927\u4e8e$ K $\u8f93\u51fa$ K $\uff0c\u518d\u8f93\u51fa\u65b9\u6848\u3002\n\n# \u57fa\u672c\u601d\u8def\n\n\u6211\u4eec\u5148\u6c42\u51fa\u4e00\u68f5\u6700\u77ed\u8def\u5f84\u6811\uff0c\u6211\u7684\u505a\u6cd5\u662f\u4ece$ 1 $\u5f00\u59cb\u6c42\u51fa\u5230\u5176\u4ed6\u70b9\u6240\u4f1a\u7ecf\u8fc7\u7684\u8fb9\uff0c\u5728\u8fdb\u884c\u6807\u8bb0\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7684\u6b63\u786e\u6027\u6211\u4e5f\u4e0d\u4f1a\u8bc1\uff0c\u4f46\u5c31\u662f\u8fc7\u4e86\u3002\u4e4b\u540e\u5c31\u662f\u66b4\u529b\u66ff\u6362\uff0c\u7b97\u51fa\u6bcf\u4e00\u6761\u6811\u8fb9\u53ef\u4ee5\u66ff\u6362\u6210\u54ea\u51e0\u6761\u8fb9\uff0c\u518d\u66ff\u6362\u5373\u53ef\u3002\n\n# \u6b63\u9898\n### \u5982\u4f55\u627e\u53ef\u4ee5\u6362\u7684\u8fb9\n\u6211\u4eec\u5148\u7b97\u51fa\u6bcf\u4e00\u70b9\u7684\u6df1\u5ea6\uff0c\u8bb0\u4e3a$ f[i] $,\u7136\u540e\u5bf9\u4e8e\u6811\u70b9,\u6211\u4eec\u53bb\u627e\u6df1\u5ea6\u4e0e\u5176\u7684\u7236\u4eb2\u76f8\u540c\u4e14\u4e0d\u662f\u6811\u70b9\u7684\u70b9\uff0c\u90a3\u4e48\u8fde\u63a5\u8fd9\u4e24\u4e2a\u70b9\u7684\u8fb9\u5c31\u662f\u4e00\u6761\u5907\u7528\u8fb9\uff0c\u56e0\u4e3a\u5982\u679c\u6df1\u5ea6\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5185\u7684\u6240\u6709\u70b9\u7684\u6df1\u5ea6\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u800c\u8fd9\u68f5\u6811\u7684\u7236\u4eb2\u53ca\u7956\u5148\u8282\u70b9\u663e\u7136\u53ef\u8bc1\u4e0d\u4f1a\u53d8\u3002\n### \u5982\u4f55\u66ff\u6362\n\u770b\u5230\u8bb8\u591a\u9898\u89e3\u7528DFS\uff0c\u6211\u81ea\u6127\u4e0d\u5982\uff0c\u6211\u662f\u8fd0\u7528\u7c7b\u4f3c\u8fdb\u5236\u52a0\u6cd5\u7684\u65b9\u6cd5\uff0c\u5148\u628a\u6700\u540e\u4e00\u6761\u6811\u8fb9\u66ff\u6362\uff0c\u5982\u679c\u56de\u5230\u4e86\u6700\u5f00\u59cb\u90a3\u6761\u6811\u8fb9\uff0c\u5219\u5728\u524d\u9762\u4e00\u6761\u6811\u8fb9\u505a\u5982\u6b64\u64cd\u4f5c\u3002\n\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct hxz{\n\tint x,y;\n};\nhxz h[2000000];\nlong long f[2000000],e1[2000000],e2[2000000],e3[2000000],father2[2000000],father1[2000000],a[2000000],b[2000000],c[2000000],d[2000000];\nbool e[2000000];\nbool u[2000000];\nint K,now[2000000],rit[2000000],uu[2000000],a1[2000000],b1[2000000],d1[2000000];\npriority_queue< pair<long long ,int> , vector< pair<long long ,int> > ,greater< pair<long long ,int> > > q;\nlong long cnt1,num[2000000],ans,j,t,w,x,y,z,cnt,sum,n,m,k,i;\nbool cmp(hxz a,hxz b)\n{\n\treturn (a.x<b.x);\n}\nvoid sc(int x)\n{\n\tif (e[father2[x]]) return;\n\te[father2[x]]=true;\n\tsc(father1[x]);\n}\nvoid add(int x,int y,int z)\n{\n\tcnt++;a[cnt]=y;b[cnt]=d[x];c[cnt]=z;d[x]=cnt;\n}\nvoid add1(int x,int y)\n{\n\tcnt1++;a1[cnt1]=y;b1[cnt1]=d1[x];d1[x]=cnt1;\n}\nvoid sc(int x,int fa)\n{\n\tf[x]=1;\n\tfor (int i=d[x];i;i=b[i])\n\t    if (a[i]!=fa)\n\t        {\n\t        \tsc(a[i],x);\n\t        \th[c[i]].x=f[a[i]];h[c[i]].y=c[i];\n\t        \tf[x]+=f[a[i]];\n\t\t\t}\n}\nint main()\n{\n\tcin>>n>>m>>K;\n\tfor (i=1;i<=m;i++)\n\t     {\n\t     \tcin>>x>>y;z=1;\n\t     \te1[i]=x;e2[i]=y;e3[i]=z;\n\t     \tadd(x,y,z);add(y,x,z);\n\t\t }\n\tfor (i=1;i<=n;i++) f[i]=100000000000000000;\n\tq.push(make_pair(0,1));f[1]=0;\n\twhile (!(q.empty()))\n\t     {\n\t     \tx=q.top().second;q.pop();\n\t     \tif (u[x]) continue;u[x]=true;\n\t     \tfor (i=d[x];i;i=b[i])\n\t     \t    if (f[a[i]]>f[x]+c[i])\n\t     \t        {\n\t     \t        \tf[a[i]]=f[x]+c[i];\n\t     \t        \tfather1[a[i]]=x;father2[a[i]]=(i-1)/2+1;\n\t     \t        \tq.push(make_pair(f[a[i]],a[i]));\n\t\t\t\t\t }\n\t\t }\n\tans=1;\n\tfor (i=2;i<=n;i++)\n\t     {\n\t     \tj=i;\n\t     \twhile (j!=1)\n\t     \t    {\n\t     \t    \tif (e[father2[j]]) break;\n\t     \t    \te[father2[j]]=true;\n\t     \t    \tj=father1[j];\n\t\t\t\t }\n\t\t }\n\t\n\tw=1;\n\tfor (i=1;i<=m;i++)\n\t    {\n\t    \tnum[i]=1;\n\t    if (e[i])\n\t        {\n\t        \tuu[i]=1;\n\t        \tif (f[e1[i]]<f[e2[i]])\n\t        \t     {\n\t        \t     \tsum=1;rit[i]=i;\n\t        \t     \tfor (j=d[e2[i]];j;j=b[j])\n\t        \t     \t      if ((f[a[j]]==f[e1[i]])&(e[(j-1)/2+1]==false))\n\t        \t     \t          {\n\t        \t     \t          \tnum[i]++;\n\t        \t     \t          \tadd1(e2[i],(j-1)/2+1);sum++;\n\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\tnow[i]=d1[e2[i]];\n\t\t\t\t\t\tif (ans<=K) ans=ans*sum;\n\t\t\t\t\t }\n\t\t\t\telse\n\t\t\t\t    {\n\t\t\t\t    \tsum=1;rit[i]=i;\n\t        \t     \tfor (j=d[e1[i]];j;j=b[j])\n\t        \t     \t      if ((f[a[j]]==f[e2[i]])&(e[(j-1)/2+1]==false))\n\t        \t     \t          {\n\t        \t     \t          \tnum[i]++;\n\t        \t     \t          \tadd1(e1[i],(j-1)/2+1);sum++;\n\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t    now[i]=d1[e1[i]];\n\t\t\t\t\t\tif (ans<=K)\n\t\t\t\t\t\t   ans=ans*sum;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t}\n\t    }\n\tif (K>ans) K=ans;\n\tprintf(\"%d\\n\",K);\n\tfor (;K;K--)\n\t     {\n\t     \tfor (i=1;i<=m;i++) printf(\"%d\",uu[i]);\n\t     \tprintf(\"\\n\");\n\t     \tbool flag;\n\t     \ti=m;flag=false;\n\t     \twhile (1)\n\t     \t    {\n\t     \t    \tif (flag) break;\n\t     \t    \tif (e[i]==false) \n\t     \t    \t    {\n\t     \t    \t    \ti--;continue;\n\t\t\t\t\t\t }\n\t     \t    \tif (i<=0) break;\n\t     \t    \tif (f[e1[i]]<f[e2[i]])\n\t     \t    \t    {\n\t     \t    \t    \tx=a1[now[i]];\n\t     \t    \t    \tif (x==0)\n\t     \t    \t    \t    {\n\t     \t    \t    \t    \tuu[rit[i]]=0;uu[i]=1;\n\t     \t    \t    \t    \trit[i]=i;now[i]=d1[e2[i]];i--;\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t    \tuu[rit[i]]=0;uu[x]=1;\n\t\t\t\t\t\t\t    \trit[i]=x;\n\t\t\t\t\t\t\t    \tnow[i]=b1[now[i]];flag=true;break;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t }\n\t\t\t\t\telse\n\t\t\t\t\t   {\n\t\t\t\t\t   \tx=a1[now[i]];\n\t     \t    \t    \tif (x==0)\n\t     \t    \t    \t    {\n\t     \t    \t    \t    \tuu[rit[i]]=0;uu[i]=1;\n\t     \t    \t    \t    \trit[i]=i;now[i]=d1[e1[i]];i--;\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t    \tuu[rit[i]]=0;uu[x]=1;\n\t\t\t\t\t\t\t    \trit[i]=x;\n\t\t\t\t\t\t\t    \tnow[i]=b1[now[i]];flag=true;break;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t   }\n\t\t\t\t }\n\t\t }\n\treturn 0;\n}\n```\n",
        "postTime": 1618130473,
        "uid": 77615,
        "name": "OIerAlbedo",
        "ccfLevel": 0,
        "title": "CF1005F \u9898\u89e3"
    },
    {
        "content": "\u7ffb\u8bd1\u4e00\u4e0b\uff08\u7b14\u8005\u4eba\u5de5\u7ffb\u8bd1\uff0c\u975e\u673a\u7ffb\uff09\uff0c\u4e4b\u540e\u5c31\u662f\u6700\u77ed\u8def\u6811\u7684\u95ee\u9898\u5566\uff0c\u4ee3\u7801&\u5206\u6790\u6765\u81ea@leozhang\n[leozhang\u7684\u9898\u89e3](https://www.luogu.org/blog/leozhang/solution-cf1005f)\n\n### \u9898\u76ee\u63cf\u8ff0\n\nBerland\u91cc\u6709n\u4e2a\u57ce\u5e02\uff0c\u88ab\u9053\u8def\u8fde\u63a5\u3002\u6bcf\u6761\u8def\u90fd\u662f\u53cc\u5411\u7684\uff0c\u5b83\u4eec\u8fde\u63a5\u7740\u4e24\u4e2a\u4e0d\u540c\u7684\u57ce\u5e02\uff0c\u4e24\u4e2a\u57ce\u5e02\u4e2d\u6700\u591a\u53ea\u6709\u4e00\u6761\u8def\u3002\u57ce\u5e02\u7684\u7f16\u53f7\u4e3a1-n\u3002\n\n\u4ece\u9996\u90fd\uff08\u7f16\u53f7\u4e3a1\uff09\u51fa\u53d1\uff0c\u6cbf\u7740\u8fd9\u4e9b\u8def\u4f60\u80fd\u5230\u8fbe\u4efb\u610f\u4e00\u4e2a\u57ce\u5e02\u3002\n\nBerland\u7684\u603b\u7edf\u8ba1\u5212\u6539\u5584\u4e00\u4e0b\u56fd\u5bb6\u7684\u4ea4\u901a\u7f51\uff0c\u9884\u7b97\u8db3\u591f\u4fee\u5efan-1\u6761\u8def\u3002\u603b\u7edf\u60f3\u9009\u62e9\u8fd9n-1\u6761\u8def\uff1a\n1\u3001\u6cbf\u7740\u8fd9n-1\u6761\u8def\uff0c\u53ef\u4ee5\u4ece\u9996\u90fd\u5230\u4efb\u4f55\u4e00\u4e2a\u57ce\u5e02\uff1b\n2\u3001\u5982\u679c\u4ece\u9996\u90fd\u5230\u57ce\u5e02i\u9700\u8981\u8d70$d_{i}$\u6761\u8def\uff0c\u90a3\u4e48\u5728\u8fd9n-1\u6761\u8def\u4e2d\uff0c$d_{1}$+$d_{2}$+\u2026\u2026+$d_{n}$\u6700\u5c0f\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9n-1\u6761\u8def\u5e94\u8be5\u80fd\u8fde\u63a5\u6574\u4e2a\u56fd\u5bb6\uff0c\u5e76\u4e14\u4ece\u9996\u90fd\uff08city 1\uff09\u5230\u6240\u6709\u57ce\u5e02\u7684\u8ddd\u79bb\u6700\u77ed\uff08\u4f60\u53ea\u80fd\u9009\u62e9n-1\u6761\u8def\uff09\u3002\n\n\u603b\u7edf\u6307\u793a\u5916\u4ea4\u90e8\u51c6\u5907\u9009\u62e9n-1\u6761\u8def\u7684k\u79cd\u53ef\u80fd\uff0c\u4f7f\u4e0a\u9762\u4e24\u4e2a\u6761\u4ef6\u90fd\u80fd\u5f97\u5230\u6ee1\u8db3\u3002\u8bf7\u4f60\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u8fd9k\u79cd\u53ef\u80fd\uff08\u5982\u679c\u5c11\u4e8ek\u79cd\u65b9\u6cd5\uff0c\u5219\u8f93\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u6709\u6548\u9014\u5f84\uff09\u3002\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u5305\u62ec3\u4e2a\u6574\u6570\uff0cn,m,\u548ck\u3002\nn\u662f\u57ce\u5e02\u7684\u6570\u91cf\uff0cm\u662f\u9053\u8def\u7684\u6570\u91cf\uff0ck\u662f\u9009\u9879\u7684\u6570\u91cf\u3002\n\u5176\u4e2d2\u2264n\u2264$2\\times10^{5}$,n-1\u2264m\u2264$2\\times10^{5}$,1\u2264k\u2264$2\\times10^{5}$\uff0c\u4fdd\u8bc1$m\\times k$\u2264$10^{6}$;\n\n\u4e0b\u9762m\u884c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570$a_{i}$,$b_{i}$\uff0c\u8868\u793a\u7b2ci\u6761\u9053\u8def\u8fde\u63a5\u7684\u57ce\u5e02\u6570\u91cf\u3002\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u6700\u591a\u6709\u4e00\u6761\u8def\u3002\u7ed9\u5b9a\u7684\u4e00\u7ec4\u9053\u8def\u53ef\u4ee5\u4ece\u9996\u90fd\u5230\u8fbe\u4efb\u4f55\u57ce\u5e02\u3002\n\u5176\u4e2d1\u2264$a_{i}$,$b_{i}$\u2264n,\u4e14$a_{i} \\neq b_{i}$\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u6253\u5370\u65b9\u6cd5\u6570t(1\u2264t\u2264k)\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u60a8\u9700\u8981\u627e\u5230k\u4e2a\u4e0d\u540c\u7684\u9009\u9879\uff1b\u5982\u679c\u5c11\u4e8ek\u4e2a\uff0c\u5219\u9700\u8981\u627e\u5230\u6240\u6709\u53ef\u80fd\u7684\u4e0d\u540c\u6709\u6548\u9009\u9879\u3002\n\n\u5728\u4e0b\u9762\u7684t\u884c\u4e2d\uff0c\u6253\u5370\u9009\u9879\uff0c\u6bcf\u884c\u4e00\u4e2a\uff0c\u5c06\u9009\u9879\u6253\u5370\u4e3a\u957f\u5ea6\u4e3am\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u9009\u9879\u4e2d\u5305\u542b\u7b2cj\u6761\u9053\u8def\uff0c\u5219\u5176\u4e2d\u7b2cj\u4e2a\u5b57\u7b26\u7b49\u4e8e\u201c1\u201d\uff1b\u5982\u679c\u4e0d\u5305\u542b\u9053\u8def\uff0c\u5219\u6253\u5370\u4e3a\u201c0\u201d\u3002\u9053\u8def\u5e94\u6839\u636e\u5176\u8f93\u5165\u987a\u5e8f\u8fdb\u884c\u7f16\u53f7\u3002\u9009\u9879\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u6253\u5370\u3002t\u4e2a\u9009\u9879\u5e94\u4e0d\u540c\u3002\n\n\u56e0\u4e3a$m\\times k$\u2264$10^{6}$\uff0c\u6240\u4ee5t\u6761\u7ebf\u8def\u7684\u603b\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7$10^{6}$\n\n\u5982\u679c\u6709\u51e0\u4e2a\u7b54\u6848\uff0c\u8f93\u51fa\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u3002\n\n\n\n### \u5206\u6790\n\n~~\u8fd9\u9898\u4e0d\u9519...~~\n\n\u9996\u5148\uff0c\u4e0d\u96be\u770b\u5230\u4ed6\u60f3\u8ba9\u4f60\u6c42\u51fa\u7684\u662f\u6700\u77ed\u8def\u6811\n\n\u7136\u540e\uff0c\u8003\u8651\u5230\u6240\u6709\u8fb9\u6743\u5747\u4e3a1\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528bfs\u76f4\u63a5\u751f\u6210\u6700\u77ed\u8def\u6811\n\n\u81f3\u4e8e\u65b9\u6848\u7684\u50a8\u5b58\uff0c\u53ef\u4ee5\u5728\u52a0\u8fb9\u7684\u65f6\u5019\u540c\u65f6\u8bb0\u5f55\u8fb9\u7684\u7f16\u53f7\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u80fd\u8f6c\u79fb\u4ed6\u7684\u6700\u77ed\u8def\u7684\u8fb9\u7684\u7f16\u53f7\u7684\u96c6\u5408\uff0c\u8fd9\u6837\u603b\u7684\u65b9\u6848\u6570\u5c31\u662f\u6240\u6709\u7684\u96c6\u5408\u5927\u5c0f\u7684\u4e58\u79ef\n\n\u7136\u540e\u7528dfs\u5728\u6bcf\u4e2a\u96c6\u5408\u4e2d\u9009\u4e00\u4e2a\u5143\u7d20\u8f93\u51fa\u5373\u53ef\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <stack>\nusing namespace std;\nstruct Edge\n{\n    int next;\n    int to;\n    int num;\n}edge[400005];\nint head[200005];\nint dep[200005];\nvector <int> v[200005];\nint used[200005];\nint cnt=1;\nint n,m,k;\nvoid init()\n{\n    memset(head,-1,sizeof(head));\n    cnt=1;\n}\nvoid add(int l,int r,int v)\n{\n    edge[cnt].next=head[l];\n    edge[cnt].to=r;\n    edge[cnt].num=v;\n    head[l]=cnt++;\n}\nvoid bfs(int rt)\n{\n    queue <int> M;\n    M.push(rt);\n    dep[rt]=0;\n    while(!M.empty())\n    {\n        int u=M.front();\n        M.pop();\n        for(int i=head[u];i!=-1;i=edge[i].next)\n        {\n            int to=edge[i].to;\n            if(!dep[to])\n            {\n                dep[to]=dep[u]+1;\n                v[to].push_back(edge[i].num);\n                M.push(to);\n            }else if(dep[to]==dep[u]+1)\n            {\n                v[to].push_back(edge[i].num);\n            }\n        }\n    }\n}\nint cct=0,tot=1;\nvoid dfs(int dep)\n{\n    if(dep==n+1)\n    {\n        for(int i=1;i<=m;i++)\n        {\n            printf(\"%d\",used[i]);\n        }\n        printf(\"\\n\");\n        cct++;\n        if(cct==tot)\n        {\n            exit(0);\n        }\n        return;\n    }\n    for(int i=0;i<v[dep].size();i++)\n    {\n        used[v[dep][i]]=1;\n        dfs(dep+1);\n        used[v[dep][i]]=0;\n    }\n}\ninline int read()\n{\n    int f=1,x=0;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint main()\n{\n    n=read(),m=read(),k=read();\n    init();\n    for(int i=1;i<=m;i++)\n    {\n        int x=read(),y=read();\n        add(x,y,i);\n        add(y,x,i);\n    }\n    bfs(1);\n    for(int i=2;i<=n;i++)\n    {\n        if((long long)tot*v[i].size()>k)\n        {\n            tot=k;\n            break;\n        }else\n        {\n            tot*=v[i].size();\n        }\n    }\n    printf(\"%d\\n\",tot);\n    dfs(2);\n    return 0;\n}\n```\n\n\u6700\u540e\u58f0\u660e\uff0c\u7ffb\u8bd1\u975e\u673a\u7ffb\uff0c\u4e3a\u7b14\u8005\u4eba\u5de5\u7ffb\u8bd1\uff0c\u5206\u6790&\u4ee3\u7801\u6765\u81ea[leozhang\u7684\u9898\u89e3](luogu.org/blog/leozhang/solution-cf1005f)\n\n",
        "postTime": 1566635994,
        "uid": 67087,
        "name": "_\u68c9\u82b1\u7cd6_",
        "ccfLevel": 0,
        "title": "\u7ffb\u8bd1&\u5206\u6790&\u4ee3\u7801c++"
    },
    {
        "content": "**analysis**\n\n\u8fd9\u9053\u9898\u662f\u7528\u6700\u77ed\u8def\u6811\uff08\u56fe\uff09\u505a\u7684\n\n\u8981\u8bc1\u660e(\u7406\u89e3)\u6700\u77ed\u8def\u6811\uff08\u56fe\uff09\u5c31\u662f\u672c\u9898\u7684\u5408\u6cd5\u7b54\u6848\u7684\u8bdd\uff0c\u6709\u4e0b\u9762\u4e24\u79cd\u65b9\u5f0f\n\n- \u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6709\u968f\u673a\u7684\u4e00\u4e2a\u65b9\u6848\uff08n-1\u6761\u8fb9\uff09\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9i\uff0c\u5982\u679c\u5b83\u7684$d_i$\u5728\u7528\u65b9\u6848\u91ccn-1\u6761\u8fb9\u7684\u65f6\u5019\u4e0d\u662f\u6700\u5c0f\u503c\u7684\u8bdd\u8bf4\u660e\u8fd8\u53ef\u4ee5\u66f4\u6539\u8def\u5f84\u4f7f\u5f97$d_i$\u66f4\u5c0f,\u800c\u6700\u77ed\u8def\u6811(\u56fe)\u4e0a\u9762\u7684\u6bcf\u4e2a\u70b9\u7684$d_i$\u90fd\u662f\u6700\u5c0f\u7684,\u56e0\u6b64\u603b\u548c$\\sum d_i$\u4e5f\u662f\u6700\u5c0f\u7684\n\n\n- \u5047\u8bbe\u6700\u77ed\u8def\u6811\u6240\u7ed9\u51fa\u7684\u65b9\u6848\u4e0d\u662f\u6700\u5c0f\u7684,\u90a3\u4e48\u5047\u8bbe\u6709\u53e6\u4e00\u4e2a\u6811A\u4f7f\u5f97A\u7ed9\u51fa\u7684\u65b9\u6848\u6700\u5c0f,\u90a3\u4e48\u5fc5\u7136\u6709\u67d0\u4e00\u70b9i\u4f7f\u5f97A\u4e2d\u7684$d_i$\u5c0f\u4e8e\u6700\u77ed\u8def\u6811\u4e2d\u7684$d_i$\u8fd9\u4e0e\u6700\u77ed\u8def\u6811\u7684\u5b9a\u4e49\u77db\u76fe\n\n\n\u4e8e\u662f\u5148\u6c42\u51fa\u6700\u77ed\u8def\u6811(\u5176\u5b9e\u672c\u9898\u4e2d\u6c42\u51fa\u7684\u662f\u6700\u77ed\u8def\u56fe(\u4e00\u4e2aDAG),\u56e0\u4e3a\u6700\u77ed\u8def\u6811\u5728\u672c\u9898\u4e2d\u662f\u4e0d\u552f\u4e00\u7684)\n\n\u800c\u672c\u9898\u8981\u6c42\u8f93\u51fa\u7684\u662f\u65b9\u6848\u603b\u6570\u548c\u5177\u4f53\u65b9\u6848,\u5b9e\u8d28\u4e0a\u5c31\u662f\u5728\u6700\u77ed\u8def\u56fe\u4e2d\u6c42\u9009\u62e9n-1\u6761\u8fb9\u7684\u65b9\u6848\u6570\u548c\u5177\u4f53\u65b9\u6848,\u90a3\u4e48\u6839\u636e\u4e58\u6cd5\u539f\u7406,\u65b9\u6848\u6570=$\\prod_{u\\in[1,n]} fa[u].size()$(fa[u].size(),u\u7684\u53ef\u9009\u7236\u8282\u70b9\u7684\u4e2a\u6570),\u8f93\u51fa\u65b9\u6848\u6570\u4e5f\u5c31\u662f\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\u7684\u53ef\u9009\u8fb9\u7136\u540e\u6253\u6807\u8bb0\u7f62\u4e86\n\n\n**code**\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define loop(i,start,end) for(int i=start;i<=end;++i)\n#define anti_loop(i,start,end) for(register int i=start;i>=end;--i)\n#define clean(arry,num) memset(arry,num,sizeof(arry))\n#define ll long long\ntemplate<typename T>void read(T &x){\n\tx=0;char r=getchar();T neg=1;\n\twhile(r>'9'||r<'0'){if(r=='-')neg=-1;r=getchar();}\n\twhile(r>='0'&&r<='9'){x=(x<<1)+(x<<3)+r-'0';r=getchar();}\n\tx*=neg;\n}\nint n,m,k;\nconst int maxn=2e5+10;\nconst int maxm=2e5+10;\nconst int maxk=1e5+10;\nstruct node{\n\tint e;\n\tint w;\n\tint id;\n\tint nxt;\n}edge[maxm<<1];\nint head[maxn];\nint cnt=0;\ninline void addl(int u,int v,int id){\n\tedge[cnt].e=v;\n\tedge[cnt].w=1;\n\tedge[cnt].id=id;\n\tedge[cnt].nxt=head[u];\n\thead[u]=cnt++;\n}\nstruct point{\n\tint pos;\n\tint w;\n\tpoint():pos(0),w(0){}\n\tpoint(int pos,int w):pos(pos),w(w){}\n\tfriend bool operator<(point a,point b){\n\t\treturn a.w>b.w;\n\t}\n};\npriority_queue<point>q;\nint dis[maxn];\nint f[maxn];\nvector<int>vec[maxn];\ninline void dijkstra(int S){\n\tclean(dis,0x3f);\n\tdis[S]=0;\n\tq.push(point(S,0));\n\twhile(q.empty()==false){\n\t\tint f=q.top().pos;\n\t\tq.pop();\n\t\tfor(int i=head[f];i!=-1;i=edge[i].nxt){\n\t\t\tint v=edge[i].e;\n\t\t\tif(dis[v]>dis[f]+edge[i].w){\n\t\t\t\tvec[v].push_back(edge[i].id);\n\t\t\t\tdis[v]=dis[f]+edge[i].w;\n\t\t\t\tq.push(point(v,dis[v]));\n\t\t\t}\n\t\t\telse if(dis[v]==dis[f]+edge[i].w)\n\t\t\t\tvec[v].push_back(edge[i].id);\n\t\t}\n\t}\n}\nint usd[maxm];\nint tot=1;\nint num=0;\nvoid dfs(int dep){\n\tif(dep==n+1){\n        for(int i=1;i<=m;i++){\n            printf(\"%d\",usd[i]);\n        }\n        printf(\"\\n\");\n        num++;\n        if(num==tot){\n            exit(0);\n        }\n        return;\n    }\n    for(int i=0;i<vec[dep].size();i++){\n        usd[vec[dep][i]]=1;\n        dfs(dep+1);\n        usd[vec[dep][i]]=0;\n    }\n}\nint main(){\n\tclean(head,-1);\n\tclean(usd,0);\n\tread(n);\n\tread(m);\n\tread(k);\n\tloop(i,1,m){\n\t\tint ai,bi;\n\t\tread(ai);\n\t\tread(bi);\n\t\taddl(ai,bi,i);\n\t\taddl(bi,ai,i);\n\t}\n\tdijkstra(1);\n\tloop(i,2,n){\n\t\ttot*=vec[i].size();\n\t\tif(tot>=k){\n\t\t\ttot=k;\n\t\t\tbreak;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",tot);\n\tdfs(2);\n\treturn 0;\n}\n```\n",
        "postTime": 1566953074,
        "uid": 109378,
        "name": "Andrew82",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF1005F \u3010Berland and the Shortest Paths\u3011"
    }
]