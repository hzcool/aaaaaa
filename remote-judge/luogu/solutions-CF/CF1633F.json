[
    {
        "content": "## CF1633F\n\n### \u9898\u610f\u7b80\u8ff0\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u521d\u59cb\u65f6\u53ea\u6709 $1$ \u53f7\u70b9\u88ab\u6fc0\u6d3b\u3002\n\n\u5904\u7406\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n- \u6fc0\u6d3b\u4e00\u4e2a\u70b9 $v$\uff0c\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u4e0e $v$ \u76f8\u90bb\u7684\u70b9\u5df2\u88ab\u6fc0\u6d3b\u3002\u8f93\u51fa\u6240\u6709\u5df2\u88ab\u6fc0\u6d3b\u7684\u70b9\u6784\u6210\u7684\u6811\u7684\u4efb\u610f\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d\u4e2d\u8fb9\u7684\u7f16\u53f7\u4e4b\u548c\u3002\n\n- \u8f93\u51fa\u5df2\u88ab\u6fc0\u6d3b\u7684\u70b9\u6784\u6210\u7684\u6811\u7684\u4efb\u610f\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d\u3002\u6700\u591a $10$ \u4e2a\u8fd9\u6837\u7684\u8be2\u95ee\u3002\n\n$1\\leq n\\leq 2\\times 10^5$\uff0c\u8be2\u95ee\u6b21\u6570\u6700\u591a\u4e3a $2n+9$\u3002\u672c\u9898\u5f3a\u5236\u5728\u7ebf\u3002\n\n### \u9898\u76ee\u5206\u6790\n\u9996\u5148\u8003\u8651\u89e3\u51b3\u6811\u4e0d\u53d8\u65f6\u7684\u95ee\u9898\u3002\u663e\u7136\u9996\u5148\u8981\u9009\u62e9\u4e0e\u53f6\u5b50\u8282\u70b9\u76f4\u63a5\u76f8\u8fde\u7684\u8fb9\uff0c\u7136\u540e\u9694\u4e00\u6761\u9009\u4e00\u6761\uff0c\u770b\u662f\u5426\u5408\u6cd5\u3002\n\n\u5982\u679c\u6211\u4eec\u8bbe\u4e00\u4e2a\u70b9\u7684\u72b6\u6001 $f_u=0/1$\uff0c\u4e14 $f_u=1$\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fde\u63a5 $u$ \u548c\u5176\u7236\u8282\u70b9\u7684\u8fb9\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u9009\u8fb9\u5c31\u662f\u628a\u5b83\u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u7684 $f_u$ \u53d6\u53cd\u3002\n\n\u7528\u6811\u5256 + \u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u7ef4\u62a4\u8fd9\u4e2a\u533a\u95f4\u53d6\u53cd\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u8fd8\u8981\u5728\u7ebf\u6bb5\u6811\u4e2d\u8bb0\u5f55\u9009\u62e9\u7684\u8fb9\u6570 $cnt$\u3002\u5982\u679c\u5168\u5c40 $cnt=\\frac{n}{2}$\uff0c\u90a3\u4e48\u5c31\u5408\u6cd5\u3002\n\n\u7136\u540e\u73b0\u5728\u8fd9\u9053\u9898\u662f\u4e0d\u65ad\u52a0\u70b9\uff0c\u56e0\u4e3a\u65b0\u52a0\u7684\u70b9\u80af\u5b9a\u662f\u53f6\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u4e0a\u9762\u7684\u505a\u6cd5\u53ef\u4ee5\u76f4\u63a5\u505a\u8fd9\u9053\u9898\u3002\u81f3\u4e8e\u8f93\u51fa\u65b9\u6848\uff0c\u56e0\u4e3a\u4e0d\u8d85\u8fc7 $10$ \u6b21\u8be2\u95ee\u6240\u4ee5\u76f4\u63a5\u66b4\u529b dfs \u5c31\u53ef\u4ee5\u4e86\u3002\n\nCode\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int N=2e5+10;\nint n,tot,h[N];\nstruct edge\n{\n\tint v,w,nxt;\n}e[N<<1];\nvoid add(int u,int v,int w)\n{\n\te[++tot]=(edge){v,w,h[u]};\n\th[u]=tot;\n}\nint fa[N],siz[N],dep[N],wson[N];\nvoid prework(int u)\n{\n\tsiz[u]=1;\n\tfor(int i=h[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==fa[u])continue;\n\t\tfa[v]=u,dep[v]=dep[u]+1;\n\t\tprework(v),siz[u]+=siz[v];\n\t\tif(siz[wson[u]]<siz[v])wson[u]=v;\n\t}\n}\nint dfn[N],id[N],idx,top[N],a[N];\nvoid dfs(int u,int t)\n{\n\ttop[u]=t,id[dfn[u]=++idx]=u;\n\tif(wson[u])dfs(wson[u],t);\n\tfor(int i=h[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==wson[u])a[v]=e[i].w; \n\t\tif(v==fa[u]||v==wson[u])continue;\n\t\tdfs(v,v),a[v]=e[i].w;\n\t}\n}\nstruct SegmentTree\n{\n\tll sum[N<<2],s[N<<2];\n\tint cnt[N<<2],tag[N<<2];\n\tvoid pushup(int p){s[p]=s[p<<1]+s[p<<1|1],cnt[p]=cnt[p<<1]+cnt[p<<1|1];}\n\tvoid adtag(int p,int l,int r)\n\t{\n\t\ttag[p]^=1,cnt[p]=(r-l+1)-cnt[p],s[p]=sum[p]-s[p];\n\t}\n\tvoid pushdown(int p,int l,int r)\n\t{\n\t\tif(!tag[p])return;\n\t\tint mid=(l+r)>>1;\n\t\tadtag(p<<1,l,mid),adtag(p<<1|1,mid+1,r);\n\t\ttag[p]=0;\n\t}\n\tvoid build(int p,int l,int r)\n\t{\n\t\tif(l==r){cnt[p]=(l==1),sum[p]=a[id[l]];return;}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(p<<1,l,mid),build(p<<1|1,mid+1,r);\n\t\tpushup(p),sum[p]=sum[p<<1]+sum[p<<1|1];\n\t}\n\tvoid upd(int p,int l,int r,int L,int R)\n\t{\n\t\tif(L<=l&&r<=R){adtag(p,l,r);return;}\n\t\tpushdown(p,l,r);\n\t\tint mid=(l+r)>>1;\n\t\tif(L<=mid)upd(p<<1,l,mid,L,R);\n\t\tif(R>mid)upd(p<<1|1,mid+1,r,L,R);\n\t\tpushup(p);\n\t}\n}segt;\nbool act[N],chs[N];\nint acnt;\nvector<int>way; \nvoid getans(int u)\n{\n\tfor(int i=h[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==fa[u]||!act[v])continue;\n\t\tgetans(v);\n\t\tif(!chs[v])chs[u]=1,way.push_back(e[i].w);\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1,x,y;i<n;i++)\n\t\tscanf(\"%d%d\",&x,&y),add(x,y,i),add(y,x,i);\n\tprework(1),dfs(1,1),segt.build(1,1,n),act[1]=1,acnt=1;\n\tint op,u;ll ans=0;\n\twhile(1)\n\t{\n\t\tscanf(\"%d\",&op);\n\t\tif(op==1)\n\t\t{\n\t\t\tscanf(\"%d\",&u);\n\t\t\tact[u]=1,acnt++;\n\t\t\twhile(u)\n\t\t\t{\n\t\t\t\tsegt.upd(1,1,n,dfn[top[u]],dfn[u]);\n\t\t\t\tu=fa[top[u]];\n\t\t\t}\n\t\t\tif(segt.cnt[1]*2==acnt)ans=segt.s[1];\n\t\t\telse ans=0;\n\t\t\tprintf(\"%lld\\n\",ans),fflush(stdout);\n\t\t}\n\t\telse if(op==2)\n\t\t{\n\t\t\tif(ans)\n\t\t\t{\n\t\t\t\tway.resize(0),memset(chs,0,sizeof(chs));\n\t\t\t\tgetans(1),sort(way.begin(),way.end());\n\t\t\t\tprintf(\"%d \",(int)way.size()),fflush(stdout);\n\t\t\t\tfor(int x:way)printf(\"%d \",x),fflush(stdout);\n\t\t\t\tputs(\"\"),fflush(stdout);\n\t\t\t}\n\t\t\telse puts(\"0\"),fflush(stdout);\n\t\t}\n\t\telse break;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1644285020,
        "uid": 333574,
        "name": "Tyyyyyy",
        "ccfLevel": 7,
        "title": "CF1633F\u9898\u89e3"
    },
    {
        "content": " \u9996\u5148\u6240\u6709\u7684 activated nodes \u7ec4\u5408\u6210\u4e86\u4e00\u68f5\u4ee5 $1$ \u4e3a\u6839\u7684\u6709\u6839\u6811\u3002\u8be2\u95ee\u5373\u6c42\u7531 activated nodes \u7ec4\u6210\u7684\u6811\u7684\u6700\u5927\u5339\u914d\u3002\u5bf9\u4e8e\u6811\u4e0a\u6700\u5927\u5339\u914d\u6709\u4e00\u4e2a\u8d2a\u5fc3\u7b56\u7565\uff1a\u81ea\u5e95\u5411\u4e0a\u5339\u914d\u5f53\u524d\u70b9\u548c\u5176\u7236\u4eb2\uff0c\u5220\u9664\u8fd9\u4e24\u4e2a\u70b9\uff0c\u76f4\u81f3\u53ea\u5269\u4e00\u4e2a\u70b9\u6216\u7a7a\u6811\u3002\u82e5\u4e3a\u7a7a\u6811\uff0c\u5219\u6811\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u3002\n \n> **Claim\uff1a** \u5bf9\u4e8e\u6811 $\\textbf{T}=(\\textbf{V},\\textbf{E})$\uff0c\u82e5\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u5f53\u4e14\u4ec5\u5f53 $\\displaystyle\\left(\\sum_{u\\in\\textbf{V}}[|\\text{subtree}(u)|\\bmod2=1]\\right)=\\left(\\sum_{u\\in\\textbf{V}}[|\\text{subtree}(u)|\\bmod2=0]\\right)$\n\n> **Proof\uff1a** \u4e24\u4e2a\u7b80\u5355\u7684\u89c2\u5bdf\u5373\u53ef\u8bc1\u660e\uff1a\uff081\uff09\u6bcf\u4e2a\u5b50\u6811\u5927\u5c0f\u4e3a\u5076\u6570\u7684\u7ed3\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u5b50\u6811\u5927\u5c0f\u4e3a\u5947\u6570\u7684\u540e\u7ee7\uff1b\uff082\uff09\u6bcf\u4e2a\u5b50\u6811\u5927\u5c0f\u4e3a\u5947\u6570\u7684\u7ed3\u70b9\u7684\u7236\u4eb2\u5b50\u6811\u5927\u5c0f\u4e3a\u5076\u6570\u3002\n>\n> \u6240\u4ee5\u5076\u6570\u5947\u6570\u4e24\u4e24\u5bf9\u5e94\uff0c\u4ee5\u4e0a\u8bba\u65ad\u7684\u5145\u5206\u6027\u5f97\u8bc1\u3002\u5176\u5fc5\u8981\u6027\u7684\u6b63\u786e\u6027\u6bd4\u8f83\u5e73\u51e1\uff0c\u6545\u7565\u3002\n\n\u7136\u540e\u6211\u4eec\u9700\u8981\u652f\u6301\u7684\u64cd\u4f5c\u5c31\u53ea\u6709\u52a0\u5165\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u53cd\u8f6c\u4e00\u6761\u65e0\u62d0\u70b9\u7684\u94fe\u4e0a\u7ed3\u70b9\u7684\u6807\u8bb0\u3002\u6574\u68f5\u6811\u7684\u5f62\u6001\u662f\u56fa\u5b9a\u7684\uff0cHLD \u7ef4\u62a4\u5373\u53ef\u3002\u5177\u4f53\u65b9\u6848\u7684\u8be2\u95ee\u6b21\u6570\u4e0d\u8d85\u8fc7 10 \u6b21\uff0c\u6734\u7d20 $O(n)$ \u5bfb\u627e\u5373\u53ef\u3002\n\n\u7136\u800c\u7ffb\u8f6c\u94fe\u90e8\u5206\u66b4\u529b\u4e5f\u80fd\u8fc7\u800c\u4e14\u548c\u7ebf\u6bb5\u6811\u6ca1\u5565\u672c\u8d28\u533a\u522b\u2026\u2026\n\n```cpp\n#pragma GCC optimize(\"Ofast,unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\n#include<bits/stdc++.h>\n#define cmin(x, y) x = std::min(x, y)\n#define cmax(x, y) x = std::max(x, y)\n#define fors(i, l, r, ...) for(int i = (l), REP##i = (r), ##__VA_ARGS__; i <= REP##i; ++i)\n#define dfors(i, r, l, ...) for(int i = (r), REP##i = (l), ##__VA_ARGS__; i >= REP##i; --i)\nint n, up[200100], all, on[200100], cnt, sz[200100], son[200100], top[200100], fa[200100], dfn[200100];\n// params: @up[i]: identity of edge (i, fa[i]); @on[i]: is rev[i] activated; @all: amout of nodes activated;\n//      @cnt: amout of odd nodes\nstd::vector<std::pair<int, int>> adj[200100];\nstd::set<int> S;\nlong long ans;\nnamespace hld {\n    int tt;\n    void dfs_sz(const int x, const int fa) {\n        sz[x] = 1, ::fa[x] = fa;\n        for(const auto [y, id] : adj[x]) if(y != fa) {\n            dfs_sz(y, x);\n            if(sz[y] > sz[son[x]]) son[x] = y;\n        }\n    }\n    void dfs_hld(const int x, const int tp) {\n        top[x] = tp, dfn[x] = ++tt;\n        if(son[x]) dfs_hld(son[x], tp);\n        for(const auto [y, id] : adj[x]) {\n            if(y == fa[x]) up[dfn[x]] = id;\n            if(y != fa[x] && y != son[x]) dfs_hld(y, y);\n        }\n    }\n    void init() { dfs_sz(1, 0), dfs_hld(1, 1); }\n}\nsigned main() {\n    std::ios::sync_with_stdio(0);\n    std::cin >> n;\n    fors(i, 1, n-1, x, y) {\n        std::cin >> x >> y;\n        adj[x].emplace_back(y, i);\n        adj[y].emplace_back(x, i);\n    }\n    on[1] = all = cnt = 1, hld::init();\n    for(int op, x; \"eternal love\"; std::cout << \"\\n\") {\n        if(std::cin >> op, S.clear(); op == 1) {\n            for(std::cin >> x, all++; x; x = fa[top[x]])\n                fors(i, dfn[top[x]], dfn[x]) cnt += (on[i]?-1:1),ans += (on[i]?-1:1)*up[i],on[i] ^= 1;\n            std::cout << ((all == cnt*2)?ans:0);\n        } else if(op == 2) {\n            if(all != cnt*2) std::cout << \"0\";\n            else {\n                fors(i, 2, n) if(on[i]) S.emplace(up[i]);\n                std::cout << cnt;\n                for(const int x : S) std::cout << \" \" << x;\n            }\n        } else break;\n    }\n    return 0;\n}\n```",
        "postTime": 1644072659,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u8c01\u5199\u6b63\u786e\u590d\u6742\u5ea6\u7684\u4e1c\u897f\u554a\uff1f"
    }
]