[
    {
        "content": "# Description\n\u7ed9\u51fa$n\u00d7m(n,m\u22641000)$\u7684\u683c\u5b50\u548c$k(k\u226410)$\u79cd\u989c\u8272\uff0c\u4e00\u4e9b\u683c\u5b50\u6709\u989c\u8272\uff0c\u4e00\u4e9b\u683c\u5b50\u6ca1\u6709\u3002\u8be2\u95ee\u6709\u591a\u5c11\u79cd\u67d3\u8272\u65b9\u6848\u53ef\u4ee5\u4f7f\u5f97\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230\u53f3\u4e0b\u89d2\u7684\u6bcf\u4e00\u6761\u9053\u8def\u90fd\u6ca1\u6709\u76f8\u540c\u7684\u989c\u8272\u3002\n# Solution\n\u9996\u5148\u53ef\u4ee5\u610f\u8bc6\u5230\uff0c$n,m\u22641000$\u7684\u8303\u56f4\u662f\u5047\u7684\u3002\u3002\n\n\u56e0\u4e3a\u5f53$n+m-1>k$\u65f6\uff0c\u663e\u7136\u65e0\u89e3\u3002\n\n\u90a3\u4e48$n,m$\u7684\u8303\u56f4\u5c31\u5f88\u5c0f\u4e86\uff0c\u53ef\u4ee5\u8003\u8651\u641c\u7d22+\u526a\u679d\u3002\n\n\u526a\u679d\u6709\u4e24\u79cd\uff1a\n\n$1.$\u53ef\u884c\u6027\u526a\u679d\uff0c\u5f53\u5269\u4f59\u989c\u8272\u6bd4\u6b65\u6570\u5c11\u5c31\u8fd4\u56de\u3002\n\n$2.$\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u683c\u5b50\uff0c\u5982\u679c\u6ca1\u6709\u653e\u8fc7\u989c\u8272\uff0c\u90a3\u4e48\u4ece\u5269\u4e0b\u7684\u989c\u8272\u4e2d\u968f\u4fbf\u653e\u4e00\u79cd\u672c\u8d28\u662f\u76f8\u540c\u7684\uff0c\u8ba1\u7b97\u4e00\u6b21\u540e\u76f4\u63a5\u7d2f\u52a0\u7b54\u6848\u5373\u53ef\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\uff1a\n\n\u7b2c\u4e00\u4e2a\u526a\u679d\u5f88\u597d\u60f3\u4f46\u662f\u5f88\u91cd\u8981\u3002\u3002\u3002\u6ca1\u52a0\u4e4b\u524dT\u4e86\u4e00\u53d1\u3002\u3002\n\n\u5224\u65ad\u5f53\u524d\u989c\u8272\u72b6\u6001\u7528\u72b6\u538b\u5b9e\u73b0\u3002\n\n\u53ef\u4ee5\u9884\u5904\u7406\u51fa$log$\u7684\u503c\uff0c\u53d6\u6a21\u7528\u51cf\u6cd5\u7b49\u65b9\u6cd5\u5361\u5e38\u6570\u3002\n\n~~\u7136\u540e\u5c31\u5361\u5230\u4e8662ms\u2026\u2026~~\n\n# Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\nusing namespace std;\nconst int mod = 1e9 + 7;\nint lg[1030], n, m, k, a[20][20], f[20][20], v[20];\n\nint dfs(int x, int y) {\n    if(y == m + 1) x++, y = 1;\n    if(x == n + 1) return 1;\n    int s = f[x - 1][y] | f[x][y - 1], calc = -1, ret = 0;\n    int S = ~s & ((1 << k) - 1);\n    if(n + m - x - y + 1 > lg[S]) return 0;\n    for(int tmp = 0; tmp < k; tmp++) if(S & (1 << tmp)) {\n        if(a[x][y] == 0 || a[x][y] == tmp + 1) {\n            v[tmp + 1]++;\n            f[x][y] = s | (1 << tmp);\n            if(v[tmp + 1] == 1) {\n                if(calc == -1) calc = dfs(x, y + 1);\n                ret += calc;\n            }\n            else ret += dfs(x, y + 1);\n            if(ret >= mod) ret -= mod;\n            v[tmp + 1]--;\n        }            \n    }\n    return ret;\n}\n\nint main()\n{\n    for(int i = 1; i < 1024; i++) lg[i] = lg[i >> 1] + (i & 1);\n    scanf(\"%d %d %d\", &n, &m, &k);\n    if(n + m - 1 > k) {\n        puts(\"0\");\n        return 0;\n    }\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++) {\n            scanf(\"%d\", &a[i][j]);\n            v[a[i][j]]++;\n        }\n    printf(\"%d\\n\", dfs(1, 1));\n    return 0;\n}\n```",
        "postTime": 1536588886,
        "uid": 23138,
        "name": "naive_wcx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF293B \u3010Distinct Paths\u3011"
    },
    {
        "content": "\u8fd9\u4e2a$n\uff0cm\u22641000$\u660e\u663e\u662f\u552c\u4eba\u7684\uff0c\u6211\u4eec\u7ecf\u8fc7\u7814\u7a76\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53$n + m - 1>k$\u65f6\u5c31\u65e0\u89e3\u4e86\u3002\u56e0\u6b64\u6211\u4eec\u53d1\u73b0\uff0cn,m\u7684\u5b9e\u9645\u8303\u56f4\u662f\u975e\u5e38\u5c0f\u7684\uff0c\u56e0\u6b64\u8003\u8651dfs\u3002\n\u4f46\u662f\u5355\u7eaf\u7684dfs\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u4e0d\u8db3\u4ee5\u901a\u8fc7\u6b64\u9898\uff0c\u6211\u4eec\u8003\u8651\u4f18\u5316\uff1a\n\n1.\u53ef\u884c\u6027\u526a\u679d\u3002\u82e5\u5269\u4e0b\u6b65\u6570\u5927\u4e8e\u53ef\u7528\u989c\u8272\u5c31\u526a\u6389\n\n2. \u5bf9\u79f0\u6027\u526a\u679d\u3002\u5982\u679c\u5f53\u524d\u662f\u7b2c\u4e00\u6b21\u586b\u989c\u8272x\uff0c\u90a3\u4e48\u628ax\u6362\u6210\u5176\u4ed6\u7b2c\u4e00\u6b21\u586b\u7684\u989c\u8272\u7ed3\u679c\u4e0d\u53d8\n\n\u8fd9\u6837\u5c31\u4f7f\u7684\u641c\u7d22\u91cf\u5927\u5927\u51cf\u5c11\uff0c\u5373\u4f7f\u68cb\u76d8\u76f8\u5f53\u7a00\u758f\u4e5f\u80fd\u77ac\u95f4\u51fa\u89e3\n\n**Code**\n```cpp\n#include <cstdio>\n#include <cstring>\n#define lowbit(x) ((x) & (-(x)))\n#define Int register int\nusing namespace std;\n\nconst int MOD = 1000000007;\n\nint rc[1007][1007] , n , m , k , ans;\nint rec[1007][1007] , used[1000007];\n\ninline int dfs(Int x , Int y) \n{\n    if (y > m) y = 1 , ++ x;\n    if (x == n + 1) return 1;\n    int now = rec[x - 1][y]|rec[x][y-1],tmp=-1;\n    int ret = 0 , tot = 0;\n    for (Int i = 1 ; i <= k ; ++ i) tot += !((1 << i - 1) & now);\n    if (n + m - x - y + 1 > tot) return 0;\n    for (Int i = 1 ; i <= k ; ++ i) \n\t{\n        if ((1 << i - 1) & now) continue;\n        if (!rc[x][y] || rc[x][y] == i) \n\t\t{\n            rec[x][y] = now | (1 << i - 1);\n            if (++ used[i] == 1) \n\t\t\t{\n                if (tmp == -1) tmp = dfs(x , y + 1);\n                ret += tmp;\n            } else ret += dfs(x , y + 1);\n            ret %= MOD;\n            -- used[i];\n        }\n    }\n    return ret;\n}\n\nint main(void) \n{\n    int cnt = 0; \n\tscanf(\"%d%d%d\" , &n , &m , &k);\n    if (n + m - 1 > k) {putchar('0'); return 0;}\n    for (Int i = 1 ; i <= n ; ++ i)\n\t\tfor (Int j = 1 ; j <= m ; ++ j)\n\t\t{\n        \tscanf(\"%d\",&rc[i][j]);\n        \tcnt += (!rc[i][j]); \n\t\t\t++ used[rc[i][j]];\n    \t}\n    printf(\"%d\\n\" , dfs(1 , 1));\n    return 0;\n}\n```\n",
        "postTime": 1583149459,
        "uid": 119633,
        "name": "\u9ebb\u7701\u7406\u5de5\u5b66\u9662",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF293B \u3010Distinct Paths\u3011"
    },
    {
        "content": "# CF293B Distinct Paths\n## \u9898\u610f\n\u7ed9\u5b9a\u4e00\u4e2a$n\\times m$\u7684\u77e9\u5f62\u8272\u677f\uff0c\u6709kk\u79cd\u4e0d\u540c\u7684\u989c\u6599\uff0c\u6709\u4e9b\u683c\u5b50\u5df2\u7ecf\u586b\u4e0a\u4e86\u67d0\u79cd\u989c\u8272\uff0c\u73b0\u5728\u9700\u8981\u5c06\u5176\u4ed6\u683c\u5b50\u4e5f\u586b\u4e0a\u989c\u8272\uff0c\u4f7f\u5f97\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u4efb\u610f\u8def\u5f84\u7ecf\u8fc7\u7684\u683c\u5b50\u90fd\u4e0d\u4f1a\u51fa\u73b0\u4e24\u79cd\u53ca\u4ee5\u4e0a\u76f8\u540c\u7684\u989c\u8272\u3002\u8def\u5f84\u53ea\u80fd\u6cbf\u7740\u76f8\u90bb\u7684\u683c\u5b50\uff0c\u4e14\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u3002\n\n\u8ba1\u7b97\u6240\u6709\u53ef\u80fd\u7684\u65b9\u6848\uff0c\u7ed3\u679c\u5bf9 $1000000007 (10^9 + 7)$\n## \u8f93\u5165\u53ca\u8f93\u51fa\u683c\u5f0f\n### \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\uff0c\u4e09\u4e2a\u6574\u6570$ n, m, k (1 \\le n, m \\le 1000, 1 \\le k \\le 10)$\uff1b\n\n\u63a5\u4e0b\u6765$n$\u884c\uff0c\u6bcf\u884c\u5305\u542b$m$\u4e2a\u6574\u6570\uff0c\u8868\u793a\u989c\u8272\u3002\u5176\u4e2d$0$\u8868\u793a\u672a\u6d82\u8272\uff0c\u975e$0$\u8868\u793a\u989c\u8272\u7684\u7f16\u53f7\uff0c \u989c\u8272\u7f16\u53f7\u4e3a$1$\u5230$k$\u3002\n### \u8f93\u51fa\u683c\u5f0f\n\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6d82\u8272\u65b9\u6848\u5bf9$ 1000000007 (10^9 + 7)$\u6c42\u6a21\u7684\u7ed3\u679c\u3002\n## \u6837\u4f8b\n\u6b64\u5904\u5c31\u4e0d\u6302\u4e86\uff1a[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/CF293B)\n\n## \u601d\u8def\n\n\u770b\u4f3c\u6570\u636e\u5f88\u5927\uff1a$ n, m, k (1 \\le n, m \\le 1000, 1 \\le k \\le 10)$\uff0c\u4f46\u662f\uff0c$k<n+m-1$\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa0\u3002\u56e0\u4e3a\u65e0\u6cd5\u8d70\u5b8c\u4e00\u6761\u8def\u5f84\uff08\u4e00\u6761\u8def\u5f84\u957f\u5ea6\u4e3a$n+m-1$\uff0c\u56e0\u4e3a\u662f\u53ea\u80fd\u5411\u4e0b\u3001\u5411\u53f3\u8d70\uff09\u3002\n\n\u90a3\u4e48\u5b9e\u9645\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u5927\u6982\u662f$n+m-1 \\le 10$\u5de6\u53f3\u5427\u3002\n\n\u8fd9\u4e48\u5c0f\u7684\u8303\u56f4\u5f88\u5bb9\u6613\u5c31\u53ef\u60f3\u5230$dfs$\u3002\u8fd9\u91cc\u6709\u4e24\u4e2a\u4f18\u5316\uff0c\u4e00\u4e2a\u662f\u5982\u679c\u641c\u5230\u4e00\u534a\uff0c\u53d1\u73b0\u5269\u4e0b\u7684\u989c\u8272\u4e0d\u591f\u7528\u4e86\u5c31\u76f4\u63a5$return$\u3002\u8fd8\u6709\u4e00\u4e2a\u5c31\u662f\u5229\u7528\u989c\u8272$A$\u4e0e\u989c\u8272$B$\u7684\u5148\u540e\u6b21\u5e8f\u95ee\u9898\uff0c\u8def\u5f84$AB$\u4e0e\u8def\u5f84$BA$\u5e76\u4e0d\u662f\u540c\u4e00\u79cd\u65b9\u6848\uff0c\u6240\u4ee5\u641c\u7d22\u65f6\u5982\u679c\u641c\u5230\u662f\u7b2c\u4e00\u6b21\u65f6\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e58$now$\u5c31\u53ef\u4ee5\u7701\u53bb\u5f88\u591a$dfs$\u3002\n\n\u4ee3\u7801\u5f88\u4e11\uff0c\u52ff\u55b7\u3002\n```C++\n#include<algorithm>\n#include<bitset>\n#include<complex>\n#include<deque>\n#include<exception>\n#include<fstream>\n#include<functional>\n#include<iomanip>\n#include<ios>\n#include<iosfwd>\n#include<iostream>\n#include<istream>\n#include<iterator>\n#include<limits>\n#include<list>\n#include<locale>\n#include<map>\n#include<memory>\n#include<new>\n#include<numeric>\n#include<ostream>\n#include<queue>\n#include<set>\n#include<sstream>\n#include<stack>\n#include<stdexcept>\n#include<streambuf>\n#include<string>\n#include<typeinfo>\n#include<utility>\n#include<valarray>\n#include<vector>\n#include<cstring>\n#include<cmath>\n#define MOD 1000000007\nusing namespace std;//\u6076\u5fc3\u7684\u5934\u6587\u4ef6\ninline int read(){\n\tchar ch=getchar();int res=0,f=1;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') res=res*10+ch-'0',ch=getchar();\n\treturn res*f;\n}//\u8bfb\u5165\u4f18\u5316\ninline void write(int zx){\n\tif(zx<0) zx=-zx,putchar('-');\n\tif(zx<10) putchar(zx+'0');\n\telse{\n\t\twrite(zx/10);\n\t\tputchar(zx%10+'0');\n\t}\n}//\u8f93\u51fa\u4f18\u5316\nint n,m,k,cnt[50],a[50][50],sum,f[30][30],ps,ans,vv;\nint dfs(int x,int y){\n\tif(y==m+1){return dfs(x+1,1);}\n\tif(x==n+1) return 1;\n\tint S=0,num=0,mar=0,res=0,las=0;\n\tf[x][y]=f[x-1][y]|f[x][y-1];\n\tfor(int i=1;i<=k;i++){\n\t\tif(!(f[x][y]&(1<<i-1))) ++num;\n\t}\n\tif(num<n+m-x-y+1) return 0;//\u7b2c\u4e00\u4e2a\u4f18\u5316\n\tif(a[x][y]==0){\n\t\tfor(int i=1;i<=k;i++){\n\t\t\tif(!(f[x][y]&(1<<i-1))){\n\t\t\t\tif(cnt[i]==0){\n\t\t\t\t\tif(mar) res+=las,res%=MOD;//\u7b2c\u4e8c\u4e2a\u4f18\u5316\n\t\t\t\t\telse{\n\t\t\t\t\t\tmar=1;\n\t\t\t\t\t\tcnt[i]++;\n\t\t\t\t\t\tf[x][y]|=1<<i-1;\n\t\t\t\t\t\tlas=dfs(x,y+1);\n\t\t\t\t\t\tf[x][y]^=1<<i-1;\n\t\t\t\t\t\tcnt[i]--;\n\t\t\t\t\t\tres+=las;\n\t\t\t\t\t\tres%=MOD;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue ;\n\t\t\t\t}\n\t\t\t\tcnt[i]++;\n\t\t\t\tf[x][y]|=1<<i-1;\n\t\t\t\tres+=dfs(x,y+1);\n\t\t\t\tf[x][y]^=1<<i-1;\n\t\t\t\tcnt[i]--;\n\t\t\t\tres%=MOD;\n\t\t\t}\n\t\t}\n\t}else{\n\t\tif(!(f[x][y]&(1<<a[x][y]-1))){\n\t\t\tf[x][y]|=1<<a[x][y]-1;\n\t\t\tres+=dfs(x,y+1);\n\t\t\tf[x][y]^=1<<a[x][y]-1;\n\t\t\tres%=MOD;\n\t\t}\n\t}\n\treturn res;\n}\nint main(){\n\tn=read();m=read();k=read();\n\tvv=n+m-1;\n\tif(k<vv){//\u5f00\u59cb\u5148\u7279\u5224\n\t\tputs(\"0\");\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\ta[i][j]=read();\n\t\t\tcnt[a[i][j]]++;\n\t\t}\n\t}\n\tans=dfs(1,1);\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1540802385,
        "uid": 37103,
        "name": "yzxoi",
        "ccfLevel": 7,
        "title": "CF293B Distinct Paths"
    },
    {
        "content": "# \u9898\u89e3 CF293B \u3010Distinct Paths\u3011\n## **\u2014\u2014by max67**\n## \u524d(~~\u5e9f~~)\u8bdd\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5f53\u521d\u505a\u9898\u770b\u4e86\u4e00\u4e2a\u4e0b\u5348\u4e5f\u6ca1\u770b\u61c2\u9898\u89e3\u5728\u5e72\u5565\uff0c\u867d\u7136\u61c2\u65b9\u6cd5\uff0c\u53d6\u4e0d\u61c2\u5199\u6cd5\u3002\u4e3a\u6b64\uff0c\u6211\u7279\u610f~~\u590d\u5236~~\u8001\u5e08\u7684\u4ee3\u7801\u6765\u7ed9\u5927\u5bb6\u8bb2\u8bb2\uff0c\u4e0d\u81f3\u4e8e\u50cf\u6211\u4e00\u6837\u8499\u3002\n## \u9898\u9762\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF293B)  \n**\u9898\u610f\u6982\u8ff0**  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7ed9\u5b9a\u4e00\u4e2a$n*m$($1<=n,m<=1000$)\u7684\u77e9\u9635,\u91cc\u9762\u6709\u4e00\u4e9b\u6570\uff0c\u4ee3\u8868\u989c\u8272\u7f16\u53f7\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u6570\u4e3a0\uff0c\u4e5f\u5c31\u662f\u65e0\u8272\u3002\u73b0\u7ed9\u5b9ak\uff08$k<=10$)\u79cd\u989c\u8272,\u9700\u8981\u4f7f\u77e9\u9635\u5185\u6570\u5168\u90e8\u4e0d\u4e3a0\uff08\u90fd\u6709\u8272\uff09\uff0c\u4e14\u6ee1\u8db3\u4ece\uff081,1\uff09\u5230\uff08n,m)\u7684\u6240\u6709\u8def\u5f84(\u6309\u5411\u4e0b\u8d70n-1\u683c\uff0c\u5411\u53f3\u8d70m-1\u683c\u7684\u6807\u51c6)\u90fd\u6ee1\u8db3\u7ecf\u8fc7\u7684\u683c\u5b50\u4e2d\u7684\u6570\u5b57\u4e0d\u76f8\u7b49(\u989c\u8272\u4e0d\u76f8\u540c),\u95ee\u6709\u591a\u5c11\u79cd\u65b9\u6cd5,\u6309$1e9+7$\u53d6\u6a21.\n## \u5206\u6790\u601d\u8def\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u9996\u5148\u770b\u6570\u636e\u8303\u56f4$k<=10$,$1<=n,m<=1000$\u3002\u53ef\u4ee5\u80af\u5b9a\u8fd9\u662f\u4e3a\u4e86\u5751\u4eba\u3002\u56e0\u4e3a\u8def\u5f84\u603b\u5171\u7ecf\u8fc7\uff08$n+m-1$\uff09\u4e2a\u683c\u5b50\u3002\n ![](https://cdn.luogu.com.cn/upload/image_hosting/phauf9o6.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6839\u636e\u62bd\u5c49\u539f\u7406([\u4e0d\u61c2\u70b9\u6211](https://www.baidu.com/link?url=H-fZCWxTNq3EkPApU3tQmuFG_ucdOZ1DBtQ81JfD_SriaBV0Jup8LT7eNQD_Lv7F1g6scETZ_yii6ptW_sBijXntufCbbndIBaa5DAZ4-VQXLUs6dAmRaCk9iWp78mgN&wd=&eqid=b7502b7000029001000000065fc24332))\uff0c\u5fc5\u7136\u9700\u8981\uff08$n+m-1$\uff09\u79cd\u989c\u8272\u624d\u4e0d\u4f1a\u91cd\u590d\uff0c\u6240\u4ee5$n+m<=10,1<=n,m<=9$.  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u90a3\u4e48\u5c0f\u7684\u6570\u636e\uff0c\u60f3\u5230\u7684\u80af\u5b9a\u662fdfs\u7206\u641c,\u7528\u72b6\u538b\u6570\u7ec4\u50a8\u5b58\u5df2\u7ecf\u6709\u7684\u989c\u8272\u505adfs,\u4f46\u8fd9\u6837\u8fd8\u662f\u56de\u8d85......  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u601d\u8def\u5927\u81f4\u65b9\u5411\u662f\u5bf9\u7684\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5c0f\u7684\u4f18\u5316\u5c31\u53ef\u4ee5\u4e86\uff0c\u6211\u4eec\u60f3\u5230dfs\u7684\u526a\u679d  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**1**.~~\u5f88\u660e\u663e~~\uff0c\u526a\u679d\u53ef\u4ee5\u4ece\u53ef\u884c\u6027\u526a\u679d\u53bb\u8003\u8651(\u7b97\u6bd4\u8f83\u5e38\u89c1\u7684\uff09,\u90a3\u4e48\u7531\u4e0a\u6587\u7684\u62bd\u5c49\u539f\u7406~~\u6613~~\u8054\u60f3\u5230\u626b\u5230\u5f53\u524d\u72b6\u6001(dfs(i,j)\uff09\u5269\u4e0b\u7684\u989c\u8272\u5fc5\u987b\u6ee1\u8db3\u5c0f\u4e8e\u5269\u4e0b\u7684\u6b65\u6570\uff0c\u5426\u5219\u5c31\u4f1a\u91cd\u590d\uff0c\u6240\u4ee5\u8981\u526a\u53bb\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**2**.\u53ef\u4ee5\u4ece\u989c\u8272\u7684\u79cd\u7c7b\u8003\u8651\uff0c\u53ea\u8981\u5f53\u524d\u989c\u8272\u6ee1\u8db3\u653e\u7684\u6761\u4ef6\uff0c\u5fc5\u7136\u5176\u4ed6\u7684\u989c\u8272\u4e5f\u53ef\u4ee5\u6ee1\u8db3\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u64cd\u4f5c\u5e76\u672a\u6d89\u53ca\u5230\u8981\u5206\u4e0d\u540c\u7684\u989c\u8272\u8ba8\u8bba(\u56fa\u5b9a\u7684\u989c\u8272\u9664\u5916)\u7684\u60c5\u51b5\u3002\u5047\u8bbe\u5f53\u524d\u53ef\u4ee5\u653e1\u548c2\uff0c\u73b0\u5728\u653e\u4e861\uff0c\u63a5\u4e0b\u53bb\u5c31\u653e2\uff0c\u90a3\u4e48\u4e0e\u73b0\u5728\u653e2\uff0c\u63a5\u4e0b\u53bb\u653e1\u7684\u65b9\u6848\u6570\u8d21\u732e\u662f\u4e00\u6837\u7684\u3002\n## \u4ee3\u7801\u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6211\u4eec\u6709\u7684\u7ed3\u6784\u80af\u5b9a\u7531\u4ee5\u4e0b\u7ed3\u6784\u7ec4\u6210  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**1**.\u8bfb\u5165  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**2**.\u7279\u5224  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**3**.\u7206\u641c(dfs)  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**4**.\u8f93\u51fa  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8be6\u7ec6\u601d\u8003\u7206\u641c(dfs)\u7531\u54ea\u51e0\u90e8\u5206\u7ec4\u6210  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**1**.\u5224\u65ad\u7ec8\u70b9\u7d2f\u52a0  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**2**.\u526a\u679d  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**3**.\u5faa\u73af\u679a\u4e3e\u5e76\u7d2f\u52a0\u7b54\u6848\n\u90a3\u4e48\u600e\u4e48\u6253\u5462\uff1f\n\u56e0\u4e3a\u6211\u4eec\u8981\u5224\u65ad\u662f\u5426\u91cd\u590d\uff0c\u6240\u4ee5\u8bfb\u5165\u90e8\u5206\u9700\u8981\u8bb0\u5f55\u989c\u8272\u51fa\u73b0  \n```cpp\n\t scanf(\"%lld%lld%lld\",&n,&m,&k);\n\t if(n+m-1>k)return puts(\"0\");\n          //\u526a\u679d\n\t for(int i=1;i<=n;i++)\n\t    for(int j=1;j<=m;j++)\n\t       {\n\t       \t     scanf(\"%lld\",&a[i][j]);\n\t       \t  ```cpp\n\tprintf(\"%lld\\n\",ans);\n                 //\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570\n\t\t   }\n```\n\u7136\u540e\u662f\u8f93\u51fa\n```cpp\n\tprintf(\"%lld\\n\",ans);\n```\ndfs\u90e8\u5206\n```cpp\nvoid dfs(int x,int y)\n{\n\tif(x==n+1)\n\t{\n\t\tans=(ans+1)%p;\n\t\treturn;\n\t}\n\tf[x][y]=f[x-1][y]|f[x][y-1];\n\tint XX=1,YY=k,s=0,sum=-1,pre;\n\tfor(int i=f[x][y];i;i-=i&-i) s++;\n\tif(n+m-x-y>=k-s)return;\n\tif(a[x][y])XX=YY=a[x][y];\n\tfor(int i=XX;i<=YY;i++)\n\t{\n\t\tif((f[x][y]&(1<<(i-1)))==0)\n\t\t{ \n\t\t  if(!cnt[i])\n\t\t  {\n\t\t\tif(sum>=0)\n\t\t\t{\n\t\t\t  ans=(ans+sum)%p;\n\t\t\t  continue;\n\t\t     }\n\t\t  pre=ans;\n\t     }\n\t\t  f[x][y]^=(1<<(i-1));\n\t\t  cnt[i]++;\n\t\t  if(y==m)dfs(x+1,1);\n\t\t  else dfs(x,y+1);\n\t\t  f[x][y]^=(1<<(i-1));\n\t\t  cnt[i]--;\n\t\t  //\u9012\u5f52\u4e0b\u53bb \n\t\t  if(!cnt[i])sum=(ans-pre)%p;\n\t   }\n   }\n}\n```\n\u6211\u4eec\u6765\u9010\u6b65\u5206\u6790\n\n```cpp\nif(x==n+1)\n\t{\n\t\tans=(ans+1)%p;\n\t\treturn;\n\t}\n```\n\u5f53\u8dd1\u5230\u7ec8\u70b9\u65f6\u7d2f\u52a0\u7b54\u6848\n```cpp\nf[x][y]=f[x-1][y]|f[x][y-1];\n```\nf[x][y]\u4ee3\u8868\u5728x,y\u65f6\u7d2f\u8ba1\u7684\u6570\u91cf\uff0c\u7528\u4e8c\u8fdb\u5236\u5b58\u50a8\u3002\u56e0\u4e3a\u6700\u591a\u670910\u79cd\u989c\u8272\uff0c\u53ef\u4ee5\u75311024\n\n\n",
        "postTime": 1606568218,
        "uid": 223891,
        "name": "max67",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF293B \u3010Distinct Paths\u3011"
    },
    {
        "content": "**Description**\n\n\u7ed9\u4f60 $n*m(n,m\\leq 1000)$ \u4e2a\u683c\u5b50\u548c $k(k\\leq 10)$ \u79cd\uff0c\u6709\u4e9b\u683c\u5b50\u6709\u989c\u8272\uff0c\u8ba9\u4f60\u5728\u6ca1\u6709\u989c\u8272\u7684\u683c\u5b50\u4e0a\u6d82\u8272\u3002\n\n\u95ee\u6709\u591a\u5c11\u79cd\u6d82\u8272\u65b9\u6cd5\u4f7f\u5f97\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u6240\u6709\u53ef\u80fd\u8def\u5f84\u7ecf\u8fc7\u683c\u5b50\u7684\u989c\u8272\u90fd\u4e0d\u540c\u3002\n\n**Solution**\n\n\u6211\u7b2c\u4e00\u773c\u5c31\u770b\u5230 $n,m\\leq 1000$\uff0c\u7136\u540e\u89c9\u5f97\uff0c\u8fd9\u9053\u9898\u53ef\u80fd\u662fDP\u4ec0\u4e48\u7684\uff0c\u60f3\u4e86\u534a\u5929\u6ca1\u4e00\u70b9\u5934\u7eea\uff0c\u56de\u5934\u518d\u8bfb\u4e86\u4e00\u4e0b\u9898\u3002\n\n\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u8def\u5f84\u4e00\u5171\u7ecf\u8fc7 $n+m-1$ \u4e2a\u683c\u5b50\uff0c\u6240\u4ee5\u8981\u4f7f\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u683c\u5b50\u7684\u989c\u8272\u90fd\u4e0d\u540c\uff0c\u90a3\u4e48 $k$ \u5c31\u5fc5\u987b $\\geq$ \u8def\u5f84\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f $k\\geq n+m-1$\uff0c\u5426\u5219\u65e0\u89e3\uff0c\u90a3\u8fd9\u6837 $n,m$ \u7684\u8303\u56f4\u5c31\u7f29\u5c0f\u4e86\u5f88\u591a\u4e86\uff0c $k\\leq 10$\uff0c\u90a3\u4e48 $n,m\\leq 6$\uff0c\u8fd9\u4e0d\u5c31\u662f\u7206\u641c+\u526a\u679d\u7684\u8303\u56f4\u561b\u3002\n\n\u4e8e\u662f\u7acb\u523b\u60f3\u5230\u4e24\u4e2a\u526a\u679d\u3002\n\n1\u3001\u53ef\u884c\u6027\u526a\u679d\u3002\n\n\u5982\u679c\u5269\u4e0b\u7684\u989c\u8272\u4e0d\u8db3\u4ee5\u586b\u5b8c\u8def\u5f84\u4e0a\u8fd8\u672a\u8d70\u5b8c\u7684\u683c\u5b50\uff0c\u90a3\u4e48\u9000\u51fa\u3002\n\n2\u3001\u5bf9\u79f0\u6027\u526a\u679d\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u989c\u8272\u662f\u7b2c\u4e00\u6b21\u9009\uff0c\u90a3\u4e48\u5176\u4ed6\u989c\u8272\u7b2c\u4e00\u6b21\u9009\u548c\u8fd9\u4e2a\u989c\u8272\u7b2c\u4e00\u6b21\u9009\u7684\u672c\u8d28\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u52a0\u4e0a\u8fd9\u4e2a\u989c\u8272\u7684\u8d21\u732e\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u987a\u5229 $AC$ \u4e86\uff01\uff01\n\n**Code**\n\n```cpp\n#include<cstdio>\nusing namespace std;\nconst int mo=1000000007;\nint n,m,k,a[11][11],f[12][1101],bz[11];\nint dg(int x,int y)\n{\n\tif (y>m) x++,y=1;\n\tif (x>n) return 1;\n\tint ans=0,flow,s=0;\n\tbool bj=false;\n\tf[x][y]=f[x-1][y]|f[x][y-1];\n\tfor (int i=1;i<=k;i++)\n\t\tif (f[x][y]&(1<<(i-1))) s++;\n\tif (n+m-x-y+1>k-s) return 0;\n\ts=f[x][y];\n\tif (a[x][y])\n\t{\n\t\tif (!(s&(1<<(a[x][y]-1))))\n\t\t{\n\t\t\tf[x][y]=s|(1<<(a[x][y]-1));\n\t\t\tans=(ans+dg(x,y+1))%mo;\n\t\t}\n\t\treturn ans;\n\t}\n\tfor (int i=1;i<=k;i++)\n\t\tif (!(s&(1<<(i-1))))\n\t\t{\n\t\t\tf[x][y]=s|(1<<(i-1));\n\t\t\tbz[i]++;\n\t\t\tif (bz[i]==1)\n\t\t\t{\n\t\t\t\tif (!bj) flow=dg(x,y+1),bj=true;\n\t\t\t\tans=(ans+flow)%mo;\n\t\t\t}\n\t\t\telse ans=(ans+dg(x,y+1))%mo;\n\t\t\tbz[i]--;\n\t\t}\n\treturn ans;\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tif (n+m-1>k)\n\t{\n\t\tprintf(\"0\");\n\t\treturn 0;\n\t}\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=m;j++)\n\t\t\tscanf(\"%d\",&a[i][j]),bz[a[i][j]]++;\n\tprintf(\"%d\",dg(1,1));\n\treturn 0;\n}\n```\n",
        "postTime": 1580968824,
        "uid": 157857,
        "name": "ImmortalWatcher",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF293B \u3010Distinct Paths\u3011"
    },
    {
        "content": "\n## \u9898\u89e3\uff1a\n\n~~2019.10.29\u6a21\u62df\u8d5bT2 20\u5206\u573a~~\n\n\u4e00\u5f00\u59cb\u6beb\u65e0\u601d\u8def\u3002\n\n\u540e\u6765\u53d1\u73b0\uff1f\u54a6\uff1f\u5982\u679c\u5de6\u4e0a\u548c\u53f3\u4e0b\u7684\u6570\uff08\u975e\u96f6\uff09\u4e00\u6a21\u4e00\u6837\u7684\u8bdd\uff0c\u90a3\u5c31\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa0\u4e86\u3002\n\n\u518d\u540e\u6765\u53d1\u73b0\uff1f\u54a6\uff1f\u5982\u679c\u77e9\u9635\u957f\u5bbd\u51cf\u4e00\u5c0f\u4e8e$k$\uff0c\u90a3\u4e48\u4e5f\u663e\u7136\u4e0d\u5408\u6cd5\u3002\n\n\u90a3\u8fd9\u9898\u4f1a\u4e0d\u4f1a\u592a\u7b80\u5355\u4e86\uff1f~~\u7edd\u58c1\u4e0d\u4f1a~~\n\n\u8be2\u95ee\u51fa\u9898\u4eba\u88ab\u4e00\u987f\u60e8$Diss$\uff0c\u575a\u5b9a\u4e86\u6211\u7684\u770b\u6cd5~~\u4e00\u822c\u731c\u5230\u51fa\u9898\u4eba\u7684\u5c0f\u5fc3\u601d\u51fa\u9898\u4eba\u90fd\u4f1aDiss~~\n\n\u6240\u4ee5\u7528\u4e24\u4e2a\u7279\u5224\u52a0\u4e00\u4e2a\u9519\u8bef\u7684\u641c\u7d22\u62ff\u4e8620\u5206\u3002\n\n\u6b63\u786e\u7684\u641c\u7d22\u52a0\u526a\u679d\u5e94\u8be5\u662f\uff1a\n\n\u5982\u679c\u641c\u7d22\u5230\u4e00\u534a\uff0c\u53d1\u73b0\u6b65\u6570\u6bd4\u989c\u8272\u8fd8\u591a\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5return\u3002\n\n\u53ef\u5982\u679c\u4f60\u53ea\u8fd9\u4e48\u505a\uff0c\u4f60\u5c31\u4f1a\u53d1\u73b0\uff1a\u4e24\u4e2a\u989c\u8272\u7684\u5148\u540e\u6b21\u5e8f\u4e5f\u4f1a\u51b3\u5b9a\u65b9\u6848\u6570\u7684\u4e0d\u540c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5728\u641c\u7d22\u7684\u65f6\u5019\u76f4\u63a5\u8fdb\u884c\u6392\u5217\u7684\u4e58\u6cd5\uff0c\u5c31\u53ef\u4ee5\u526a\u6389\u5f88\u591a\u679d\u6860\u3002\n\n\u5c31\u662f\uff1a**\u53ef\u884c\u6027\u526a\u679d+\u6392\u9664\u7b49\u6548\u5197\u4f59**\n\n\u5173\u4e8e\u526a\u679d\u65b9\u5f0f\uff0c\u6709\u5174\u8da3\u4e86\u89e3\u66f4\u591a\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u53c2\u8003\u672c\u849f\u84bb\u7684\u8fd9\u7bc7\u535a\u5ba2\uff1a\n\n[\u5173\u4e8e\u526a\u679d\u7684\u65b9\u5f0f](https://www.cnblogs.com/fusiwei/p/11759489.html)\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\nusing namespace std;\nconst int mod=1e9+7;\nconst int maxn=1010;\nint n,m,k,ans;\nint map[maxn][maxn],cnt[20];\nint f[50][50];\nint dfs(int x,int y)\n{\n    if(y==m+1)\n        return dfs(x+1,1);\n    if(x==n+1)\n        return 1;\n    int num=0,flag=0,ret=0,last=0;\n    f[x][y]=f[x-1][y]|f[x][y-1];\n    for(int i=1;i<=k;i++)\n        if(!(f[x][y]&(1<<i-1)))\n            num++;\n    if(num<n+m-x-y+1)\n        return 0;\n    if(!map[x][y])\n    {\n        for(int i=1;i<=k;i++)\n        {\n            if(!(f[x][y]&(1<<i-1)))\n            {\n                if(!cnt[i])\n                {\n                    if(flag)\n                        ret=(ret+last)%mod;\n                    else\n                    {\n                        flag=1;\n                        cnt[i]++;\n                        f[x][y]|=1<<i-1;\n                        last=dfs(x,y+1);\n                        f[x][y]^=1<<i-1;\n                        cnt[i]--;\n                        ret=(ret+last)%mod;\n                    }\n                    continue;\n                }\n                cnt[i]++;\n                f[x][y]|=1<<i-1;\n                ret+=dfs(x,y+1);\n                f[x][y]^=1<<i-1;\n                cnt[i]--;\n                ret%=mod;\n            }\n        }\n    }\n    else\n    {\n        if(!(f[x][y]&(1<<(map[x][y]-1))))\n        {\n            f[x][y]|=1<<map[x][y]-1;\n            ret+=dfs(x,y+1);\n            f[x][y]^=1<<map[x][y]-1;\n            ret%=mod;\n        }\n    }\n    return ret;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    if(n+m-1>k)\n    {\n        puts(\"0\");\n        return 0;\n    }\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n        {\n            scanf(\"%d\",&map[i][j]);\n            cnt[map[i][j]]++;\n        }\n    ans=dfs(1,1);\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1572344135,
        "uid": 175131,
        "name": "\u5085\u601d\u7ef4666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF293B \u3010Distinct Paths\u3011"
    }
]