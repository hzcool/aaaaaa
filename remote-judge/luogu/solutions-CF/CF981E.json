[
    {
        "content": "# Solution\n\n\u9996\u5148\u5982\u679c\u6ca1\u6709\u533a\u95f4\u7684\u9650\u5236\uff0c\u90a3\u4e48\u8fd9\u9898\u5c31\u662f\u4e00\u4e2a\u88f8\u7684 $01$ \u80cc\u5305\uff0c\u53ef\u4ee5\u5728 $O(n^2)$ \u7684\u65f6\u95f4\u5185 $\\text{DP}$ \u51fa\u6765\u3002\u8003\u8651\u5982\u4f55\u5c06\u5176\u63a8\u5e7f\u5230\u4e00\u6bb5\u6bb5\u533a\u95f4\u4e0a\u3002\n\n\u9996\u5148\u8f6c\u5316\u4e00\u4e0b\u5b9a\u4e49\uff0c\u8bbe $f_{i,j}$ \u8868\u793a\u9009\u5230\u533a\u95f4 $i$\uff0c\u5e8f\u5217\u7684\u6700\u5927\u503c\u4e3a $j$ \u65f6\uff0c\u6700\u5de6\u8fb9\u4e00\u4e2a\u503c\u53ef\u4ee5\u4e3a $j$ \u7684\u4f4d\u7f6e\u3002\n\n\u5148\u5c06\u6240\u6709\u7684\u533a\u95f4\u6309\u7167\u53f3\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\uff0c\u4ece\u540e\u5f80\u524d\u626b\uff0c\u505a\u4e00\u4e2a\u7c7b\u4f3c $01$ \u80cc\u5305\u7684\u8f6c\u79fb\u3002\n\n\u5047\u8bbe\u5f53\u524d\u679a\u4e3e\u5230\u533a\u95f4 $i$\uff0c\u6700\u5927\u503c\u4e3a $j$\uff0c\u521d\u59cb\u65f6 $f_{i,j} = f_{i + 1,j}$\uff0c\u5f53\u4e14\u4ec5\u5f53 $f_{i+1,j - x_{i}} \\le r_{i}$ \u65f6\uff0c$f_{i,j}$ \u53ef\u4ee5\u7531 $f_{i+1,j - x_{i}}$ \u8f6c\u79fb\u6765\uff1a$f_{i,j} = \\min\\{f_{i,j},\\max\\{f_{i+1,j - x_{i}},l_{i}\\}\\}$\u3002\n\n\u89e3\u91ca\u4e0b\u4e0a\u5f0f\u7684\u542b\u4e49\uff1a\n- \u5982\u679c $r_{i}$ \u4ee5\u5de6\u7684\u6240\u6709\u4f4d\u7f6e\u90fd\u65e0\u6cd5\u88ab\u539f\u5148\u7684\u6700\u5927\u503c $j - x_{i}$ \u53d6\u5230\uff0c\u663e\u7136\u65e0\u6cd5\u8f6c\u79fb\uff0c\u8fd9\u4e5f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u72b6\u6001\u8981\u8bbe\u8ba1\u6210\u662f\u6700\u5de6\u8fb9\u4e00\u4e2a\u4f4d\u7f6e\u3002\n- \u5982\u679c $f_{i+1,j - x_{i}} \\geq l_{i}$\uff0c\u5219 $f_{i,j}$ \u7684\u503c\u663e\u7136\u4e3a $f_{i+1,j - x_{i}}$\u3002\n- \u5982\u679c $f_{i+1,j - x_{i}} < l_{i}$\uff0c\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u6309\u53f3\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\uff0c\u4ece\u540e\u5f80\u524d\u626b\uff0c\u6240\u4ee5\u533a\u95f4 $i$ \u662f\u88ab\u4e4b\u524d\u53d6\u5230 $j - x_{i}$ \u7684\u533a\u95f4\u5305\u542b\uff0c\u5219\u6574\u4e2a $[l_i,r_i]$ \u8303\u56f4\u5185\u90fd\u53ef\u4ee5\u53d6\u5230 $j$\uff0c\u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e\u4e3a $l_i$\u3002\n\n\u6700\u540e\u5982\u679c $f_{1,j} \\le n$\uff0c\u5219 $j$ \u662f\u4e00\u4e2a\u53ef\u884c\u7684\u89e3\u3002\n\n\u53d1\u73b0 $f_i$ \u4ec5\u7531 $f_{i+1}$ \u8f6c\u79fb\u6765\uff0c\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u7a7a\u95f4\u3002\n\n\u521d\u503c $f_j = \\inf$\uff0c$f_0 = 1$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\uff0c$n \\le 10^4$ \u8dd1\u7684\u5f88\u7a33\uff0c~~\u8fd8\u53ef\u4ee5\u51b2\u6700\u4f18\u89e3~~\u3002\n\n# code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e4 + 5;\nint n,m,ans[maxn],tot,f[maxn];\nstruct node\n{\n\tint l,r,x;\n}a[maxn];\nbool cmp(node a,node b){return a.l < b.l;}\nvoid input()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i = 1;i <= m;i++)\n\t\tscanf(\"%d%d%d\",&a[i].l,&a[i].r,&a[i].x);\n}\nvoid DP()\n{\n\tmemset(f,0x3f,sizeof(f));\n\tf[0] = 1;\n\tfor(int i = m;i;i--)\n\t\tfor(int j = n;j >= a[i].x;j--)\n\t\t\tif(f[j - a[i].x] <= a[i].r)\n\t\t\t\tf[j] = min(f[j],max(f[j - a[i].x],a[i].l));\n}\nvoid output()\n{\n\tfor(int i = 1;i <= n;i++)\n\t\tif(f[i] <= n)\n\t\t\tans[++tot] = i;\n\tprintf(\"%d\\n\",tot);\n\tfor(int i = 1;i <= tot;i++)\n\t\tprintf(\"%d \",ans[i]);\n}\nint main()\n{\n\tinput();\n\tsort(a + 1,a + 1 + m,cmp);\n\tDP();\n\toutput();\n\treturn 0 ;\n}\n```",
        "postTime": 1660176234,
        "uid": 302636,
        "name": "zhaoyp",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF981E \u3010Addition on Segments\u3011"
    },
    {
        "content": "\u4e3a\u4e86\u907f\u514d\u683c\u5f0f\u51fa\u95ee\u9898\uff0c\u8bf7\u53bb[My blog](https://oierwanhong.cc/2020/04/06/%E6%B5%85%E8%B0%88%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%86%E6%B2%BB/)\u67e5\u770b\n## CF 981E\n\n\u9898\u610f:\n\n\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$ \u7684\u5e8f\u5217(\u521d\u59cb\u5168\u4e3a0)\u548c$q$\u6761\u64cd\u4f5c(\u4ee5$(l,r,x)$\u8868\u793a\u5c06$[l,r]$\u4e2d\u7684\u6bcf\u4e2a\u6570\u90fd\u52a0\u4e0a$x$.  \n\u5bf9\u4e8e$1\\le k\\le n$,\u6c42\u54ea\u4e9b$k$\u6ee1\u8db3\u9009\u51fa\u82e5\u5e72\u6761\u64cd\u4f5c\u540e\u5e8f\u5217\u6700\u5927\u503c\u4e3a$k$.(\u5bf9\u4e8e\u4e00\u4e2a$k$,\u6bcf\u6761\u64cd\u4f5c\u81f3\u591a\u7528\u4e00\u6b21)\n\n$1\\le n,q\\le 10^4$\n\n<!--more> \n\n\u89e3:\u9996\u5148,\u53ef\u884c\u7684$k$\u96c6\u5408\u7b49\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u8fbe\u7684\u503c\u7684\u96c6\u5408 \u7684\u5e76\u96c6.\u6545\u6c42\u51fa\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u8fbe\u7684\u503c\u96c6\u5408\u5373\u53ef.  \n\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e$i$\u7ef4\u62a4\u4e00\u4e2a`bitset`,\u8bb0\u4e3a`s`,\u8bbe\u73b0\u5728\u8003\u8651\u7684$(l,r,x)$\u6ee1\u8db3$l\\le i\\le r$,\u90a3\u4e48$(l,r,x)$\u5bf9`s`\u7684\u8d21\u732e\u5c31\u662f:`s|=(s<<x)`\n\n\u4e8e\u662f\u66b4\u529b\u505a\u6cd5\u5c31\u663e\u7136\u4e86:\u5bf9\u4e8e$[l,r]$\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20,\u90fd\u505a\u4e00\u6b21`s|=(s<<x)`\u5373\u53ef.\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c$\\mathcal O(nq\\times \\frac{n}{w})$,\u663e\u7136\u4e0d\u884c.  \n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5957\u8def:\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb,\u628a$(l,r,x)$\u7684\u5f71\u54cd\u6253\u5230\u7ebf\u6bb5\u6811\u7684$\\mathcal O(\\log n)$\u4e2a\u8282\u70b9\u4e0a.(\u6ce8\u610f\u8282\u70b9\u4e0a\u7528`vector`\u7ef4\u62a4\u589e\u52a0\u7684\u503c\u5373\u53ef,\u4e0d\u7528\u7ef4\u62a4`bitset`\u5f92\u589e\u65f6\u95f4\u590d\u6742\u5ea6)\u6700\u540e\u4ece\u6839dfs\u4e00\u4e0b,\u628a\u4fe1\u606f\u4e0b\u63a8\u81f3\u53f6\u5b50\u8282\u70b9\u5373\u53ef.\u53f6\u5b50\u8282\u70b9\u7684`bitset or`\u8d77\u6765\u7684\u7ed3\u679c\u5c31\u662f\u7b54\u6848.  \n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O(q\\log n+\\frac{n^2}{w})$\n\n```cpp\n/**********/\n#define MAXN 10011\nll n,q;\nstd::bitset<MAXN>ans;\nstruct Segment_Tree\n{\n    std::vector<ll>t[MAXN<<2|1];\n    #define rt t[num]\n    #define tl t[num<<1]\n    #define tr t[num<<1|1]\n    void modify(un ql,un qr,ll k,un l=1,un r=n,un num=1)\n    {\n        if(ql<=l&&r<=qr)\n        {\n            rt.push_back(k);return;\n        }\n        un mid=(l+r)>>1;\n        if(ql<=mid)modify(ql,qr,k,l,mid,num<<1);\n        if(qr>mid)modify(ql,qr,k,mid+1,r,num<<1|1);\n    }\n    void dfs(std::bitset<MAXN>pre,un l=1,un r=n,un num=1)\n    {\n        std::bitset<MAXN>cur=pre;\n        for(auto x:rt)cur|=(cur<<x);\n        un mid=(l+r)>>1;\n        if(l==r){ans|=cur;return;}\n        dfs(cur,l,mid,num<<1),dfs(cur,mid+1,r,num<<1|1);\n    }\n}sgt;\nstd::bitset<MAXN>s;\nint main()\n{\n    n=read(),q=read();\n    while(q--)\n    {\n        ll l=read(),r=read(),k=read();\n        sgt.modify(l,r,k);\n    }\n    s[0]=1;\n    sgt.dfs(s);\n    ll cnt=0;\n    for(ll i=1;i<=n;++i)\n        if(ans[i])++cnt;\n    printf(\"%lld\\n\",cnt);\n    for(ll i=1;i<=n;++i)\n        if(ans[i])printf(\"%lld \",i);\n    return 0;\n}\n```\n\n\n\n",
        "postTime": 1586181528,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF981E \u3010Addition on Segments\u3011"
    },
    {
        "content": "## \u3010\u7ebf\u6bb5\u6811\u5206\u6cbb\u3011\u3010CF981E\u3011Addition on Segments\n\n### Description\n\n- \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u548c $q$ \u6761\u64cd\u4f5c\u3002\n- \u5e8f\u5217\u521d\u59cb\u4e3a\u5168 $0$\u3002$q$ \u6761\u64cd\u4f5c\u90fd\u5f62\u5982 $l, r, x$\uff0c\u610f\u4e3a\u7ed9\u5e8f\u5217 $[l, r]$ \u533a\u95f4\u5185\u7684\u6bcf\u4e2a\u6570\u52a0\u4e0a $x$\u3002\n- \u5bf9\u4e8e $1 \\leq k \\leq n$\uff0c\u6c42\u6709\u591a\u5c11\u4e2a $k$ \u6ee1\u8db3\u4ece $q$ \u6761\u64cd\u4f5c\u4e2d\u9009\u51fa\u82e5\u5e72\u6761\u64cd\u4f5c\u540e\u5e8f\u5217\u7684\u6700\u5927\u503c\u4e3a $k$\u3002\uff08\u5bf9\u4e8e\u4e00\u4e2a $k$\uff0c\u4e00\u6761\u64cd\u4f5c\u6700\u591a\u8fdb\u884c\u4e00\u6b21\uff09\u3002\n- $1 \\leq n,  q \\leq 10^4$\u3002\n\n### Solution\n\n\u8fd9\u4e2a\u95ee\u6cd5\u548c\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u770b\u8d77\u6765\u5c31\u5f88 bitset\uff0c\u4ed4\u7ec6\u60f3\u60f3\u679c\u7136\u662f bitset\uff08\uff08\n\n\u5bf9\u5e8f\u5217\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u4f9d\u6b21\u8003\u8651\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u53ea\u8981\u4fdd\u8bc1\u9009\u51fa\u7684\u64cd\u4f5c\u5bf9\u5e94\u7684\u533a\u95f4\u90fd\u5305\u542b\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4f4d\u7f6e\u4e00\u5b9a\u53ef\u4ee5\u4f5c\u4e3a\u64cd\u4f5c\u540e\u7684\u5e8f\u5217\u6700\u5927\u503c\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 bitset \u8f7b\u677e\u7ef4\u62a4\u51fa\u8fdb\u884c\u4e00\u7cfb\u5217\u5305\u542b\u8be5\u4f4d\u7f6e\u7684\u64cd\u4f5c\u540e\u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u503c\u3002\u5177\u4f53\u7684\uff0c\u8bbe $f$ \u4e3a\u4e00\u4e2a\u4fdd\u5b58\u4e86\u8be5\u4f4d\u7f6e\u53ef\u80fd\u5f97\u5230\u7684\u503c\u7684 bitset\uff0c\u82e5\u4e00\u6b21\u64cd\u4f5c\u4e3a\u533a\u95f4\u52a0 $x$\uff0c\u5219\n\n$$f |= f << x$$\n\n\u521d\u503c\u4e3a $f_0 = \\text{true}$\u3002\n\n\u4f46\u662f\u6ce8\u610f\u5230\u7531\u4e8e\u662f\u53d6\u6216\uff0c\u5728\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u5bf9\u4e8e\u53ea\u5305\u542b\u539f\u4f4d\u7f6e\u800c\u4e0d\u5305\u542b\u65b0\u4f4d\u7f6e\u7684\u4fee\u6539\u9020\u6210\u7684\u5f71\u54cd\u65e0\u6cd5\u64a4\u9500\u3002\n\n\u8003\u8651\u8fdb\u884c\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u5c06\u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\u6253\u5230\u7ebf\u6bb5\u6811\u7684\u5bf9\u5e94\u8282\u70b9\u4e0a\uff0c\u6700\u540e\u904d\u5386\u8fd9\u9897\u7ebf\u6bb5\u6811\uff0c\u5728\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u8fdb\u884c\u8be5\u8282\u70b9\u5230\u6839\u8def\u5f84\u4e0a\u7684\u6240\u6709\u64cd\u4f5c\u540e\u53ef\u4ee5\u5f97\u5230\u7684\u503c\uff0c\u5728\u53f6\u8282\u70b9\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6253\u4fee\u6539\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u662f $O(q \\log n)$\uff0c\u904d\u5386\u7ebf\u6bb5\u6811\u662f $O(n)$ \u7684\uff0c\u904d\u5386\u8fc7\u7a0b\u4e2d\u4f1a\u6709 $O(q \\log n)$ \u6b21\u5bf9\u957f\u5ea6\u4e3a $O(n)$ \u7684 bitset \u53d6\u6216\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6 $O(\\frac{nq\\log n}{w})$\u3002\n\n### Code\n\n```cpp\nconst int maxn = 10001;\n\nint n, q, bcnt, acnt;\nstd::bitset<maxn> bt[maxn << 1], ans;\nint pans[maxn];\n\n\nstruct OP {\n  int l, r, x;\n\n  inline void init() {\n    qr(l); qr(r); qr(x);\n  }\n};\nOP op[maxn];\n\nstruct Node {\n  int l, r, ld, rd, id;\n  std::vector<int> opid;\n};\nNode tree[maxn << 1];\n\nvoid build(int &o, const int l, const int r);\nvoid insert(const int o, const int id);\nvoid calc(const int o);\n\nint main() {\n  freopen(\"1.in\", \"r\", stdin);\n  qr(n); qr(q);\n  bt[0].set(0);\n  build(bcnt, 1, n);\n  for (int i = 1; i <= q; ++i) {\n    op[i].init();\n    insert(0, i);\n  }\n  calc(0);\n  for (int i = 1; i <= n; ++i) if (ans.test(i)) {\n    pans[++acnt] = i;\n  }\n  qw(acnt, '\\n');\n  qwa(pans, acnt, ' ', '\\n');\n  return 0;\n}\n\nvoid build(int &o, const int l, const int r) {\n  auto u = tree + o;\n  u->l = l; u->r = r; u->id = o;\n  if (l != r) {\n    int m = (l + r) >> 1;\n    u->ld = ++o;\n    build(o, l, m);\n    u->rd = ++o;\n    build(o, m + 1, r);\n  }\n}\n\nvoid insert(const int o, const int id) {\n  auto u = tree + o;\n  if ((u->l >= op[id].l) && (u->r <= op[id].r)) {\n    u->opid.push_back(id);\n  } else if (!((u->l > op[id].r) || (u->r < op[id].l))) {\n    insert(u->ld, id);\n    insert(u->rd, id);\n  }\n}\n\nvoid calc(const int o) {\n  auto u = tree + o;\n  for (auto p : u->opid) {\n    bt[o] |= bt[o] << op[p].x;\n  }\n  if (u->ld) {\n    bt[u->rd] = bt[u->ld] = bt[o];\n    calc(u->ld); calc(u->rd);\n  } else {\n    ans |= bt[o];\n  }\n}\n```",
        "postTime": 1584627644,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF981E \u3010Addition on Segments\u3011"
    },
    {
        "content": "updata\uff1a\u611f\u8c22\u8bc4\u8bba\u533a\u5185\u7684 hack\uff0cCF \u6570\u636e\u8f83\u6c34\u6240\u4ee5\u6ca1\u53d1\u73b0\u3002\n\n\u5df2\u7ecf\u901a\u8fc7\u7684\u9898\u89e3\uff0c\u9ebb\u70e6\u7ba1\u7406\u5458\u518d\u5ba1\u6838\u4e00\u4e0b\uff0c\u611f\u8c22\u3002\n\n\u6ce8\uff1a\u5728 CF \u4e0a $n^2$ \u8fc7 $10^4$ \u662f\u53ef\u884c\u7684\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5982\u679c\u6ca1\u6709\u533a\u95f4\u9650\u5236\u5c31\u662f\u4e00\u4e2a\u6734\u7d20\u7684\u80cc\u5305\u3002\n\n\u8003\u8651\u76f4\u63a5\u8fdb\u884c\u66b4\u529b DP\uff0c$f_i$ \u8868\u793a\u5f53\u524d\u62fc\u51fa $i$ \u8fd9\u4e2a\u6570\u6240\u80fd\u5230\u8fbe\u6700\u5c0f\u7684\u5de6\u7aef\u70b9\u3002\n\n\u8d2a\u5fc3\u7684\u60f3\u4e00\u60f3\uff0c\u6211\u4eec\u9700\u8981\u5c31\u662f\u6700\u5c0f\u7684\u5de6\u7aef\u70b9\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u66f4\u591a\u7684\u533a\u95f4\u548c\u4ed6\u62fc\u4e00\u5757\u3002\n\n\u5f53\u7136\u6211\u4eec\u8981\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u4ee5\u53ca\u5012\u7740\u626b\uff0c\u5426\u5219\u5c31\u8981\u8bb0\u5f55\u6700\u5927\u7684\u53f3\u7aef\u70b9\u3002\n\n\u5224\u65ad\u4e24\u4e2a\u533a\u95f4\u662f\u5426\u6709\u4ea4\uff0c\u5c31\u662f $l_i \\le r_j$ \u5e76\u4e14 $l_j \\le l_i$\uff0c\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u5b8c\u5168\u53ef\u4ee5\u7528\u6392\u5e8f\u6765\u505a\u5230\u3002\n\n\u7136\u540e\u5c31\u662f\u975e\u5e38\u666e\u901a\u7684 DP\uff0c\u4e0d\u7528\u4efb\u4f55\u6570\u636e\u7ed3\u6784\uff01\uff01\n\n\u5f53\u7136\u9700\u8981\u6eda\u52a8\u6570\u7ec4\u8fdb\u884c\u4f18\u5316\u3002\n\n\u66f4\u5177\u4f53\u7684\u6765\u8bf4\u3002\n\n\u5148\u5bf9\u4e8e\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u7136\u540e DP \u7684\u65f6\u5019\u4ece\u540e\u5f80\u524d\u679a\u4e3e\uff0c\u505a\u4e00\u4e2a\u80cc\u5305\uff0c\u6ce8\u610f\u8fd9\u8fb9\u5224\u4e00\u4e0b\u533a\u95f4\u662f\u5426\u6709\u4ea4\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\nconst int INF=1e4+5;\nint n,q,f[INF],ans,ans1[INF];\nstruct _node_data{\n\tint l,r,x;\n}a[INF];\nbool cmp(_node_data xx,_node_data yy) {\n\treturn xx.l<yy.l;\n}\nsigned main()\n{\n\tmemset(f,63,sizeof f);\n\tscanf(\"%d %d\",&n,&q);\n\tfor (int i=1;i<=q;i++) {\n\t\tscanf(\"%d %d %d\",&a[i].l,&a[i].r,&a[i].x);\n\t}\n\tf[0]=1;\n\tsort(a+1,a+1+q,cmp);\n\tfor (int i=q;i>=1;i--) {\n\t\tfor (int j=n;j>=a[i].x;j--) {\n\t\t\tif (f[j-a[i].x]<=a[i].r) {\n\t\t\t\tf[j]=min(f[j],max(f[j-a[i].x],a[i].l));\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i=1;i<=n;i++)\n\t\tif (f[i]<=n) ans1[++ans]=i;\n\tcout<<ans<<\"\\n\";\n\tfor (int i=1;i<=ans;i++)\n\t\tcout<<ans1[i]<<\" \";\n\treturn 0;\n}\n```\n\n\u5982\u6709\u95ee\u9898\u8fd8\u8bf7\u6307\u51fa\u3002",
        "postTime": 1638601307,
        "uid": 208653,
        "name": "_edge_",
        "ccfLevel": 0,
        "title": "CF981E"
    },
    {
        "content": "```cpp\n// dp\u9898\uff0c\u8be6\u89e3\u770b\u4ee3\u7801\u53ca\u6211\u7684\u6ce8\u91ca\uff0c\u5e0c\u671b\u80fd\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\n#include <iostream>\n#include <array>\n#include <tuple>\n#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n\n    int n, q;\n    std::cin >> n >> q;\n\n    std::vector<std::tuple<int, int, int>> Q;   // \u7aef\u70b9\u5bf9<l, r, x>\u7684\u96c6\u5408\n    for (int i = 0; i < q; ++i)\n    {\n        int l, r, x;\n        std::cin >> l >> r >> x;\n        Q.push_back({ l, r, x });\n    }\n    std::sort(Q.begin(), Q.end(), [](const auto &l, const auto &r) // \u6309\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\n    {\n        return std::get<1>(l) < std::get<1>(r);\n    });\n\n    constexpr int MaxN = 10000 + 5;\n    std::array<int, MaxN> dp{ 0 };\n\n    // dp[i]\u8868\u793a\u6570\u5b57i\u80fd\u591f\u8fbe\u5230\u7684\u6700\u53f3\u8fb9\u7684\u7aef\u70b9\u4f4d\u7f6e\uff0c\u5982\u679c\u6570\u5b57i\u65e0\u6cd5\u53d6\u5f97\u5219\u4e3a0\n    // \u8d77\u59cb\u72b6\u6001\u662fdp[0] = n\uff0c\u56e0\u4e3a\u4e00\u5f00\u59cb\u5168\u662f0\uff0c0\u672c\u8eab\u5c31\u80fd\u8fbe\u5230\u6700\u53f3\u7684\u7aef\u70b9n\n    dp[0] = n;\n    for (int i = 0; i < q; ++i) // \u6392\u5e8f\u4e4b\u540e\u904d\u5386\u6bcf\u4e00\u4e2a\u533a\u95f4\n    {\n        const auto &[l, r, x] = Q[i];\n\n        for (int j = n; j >= x; --j)    // \u7531\u4e8e\u4e0d\u80fd\u8d85\u8fc7n\uff0c\u6240\u4ee5\u4ecen\u5f80\u4e0b\u5faa\u73af\uff0c\u4f46\u5230\u5e95\u7684\u65f6\u5019j - x\u4e0d\u80fd\u5c0f\u4e8e\u96f6\uff0c\u56e0\u6b64\u4e0b\u754c\u662fx\n        {\n            if (dp[j - x] >= l) // \u5982\u679c\u5de6\u7aef\u70b9\u5c0f\u4e8ej - x\u80fd\u5728\u7684\u6700\u53f3\u4f4d\u7f6e\uff0c\u8bf4\u660ej - x\u6709\u53ef\u80fd\u88ab\u8fd9\u4e2a\u52a0\u4e0a\u7684x\u66f4\u65b0\u3002\u7136\u540e\u6211\u4eec\u6709\u4e24\u79cd\u66f4\u65b0\u65b9\u5f0f\uff1a\n            {\n                if (dp[j - x] <= r) // \u5982\u679c\u5f53\u524d\u533a\u95f4\u80fd\u591f\u5305\u542bj - x\u6240\u5728\u7684\u6700\u53f3\u7aef\u70b9\uff0c\u8bf4\u660ej - x\u53ef\u4ee5\u88ab\u66f4\u65b0\u4e3aj\uff0c\u90a3\u4e48\u5c31\u770b\u4e00\u4e0b\u66f4\u65b0\u4e4b\u540e\u662f\u5426\u80fd\u5ef6\u7533j\u7684\u6700\u53f3\u7aef\n                {\n                    dp[j] = std::max(dp[j], dp[j - x]);\n                }\n                else // \u5982\u679c\u5f53\u524d\u533a\u95f4\u4e0d\u80fd\u5305\u542bj - x\uff0c\u90a3\u5c31\u770b\u770b\u80fd\u4e0d\u80fd\u66f4\u65b0x\u7684\u4f4d\u7f6e\uff0c\u7531\u4e8er\u4ee5\u6309\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6240\u4ee5\u76f4\u63a5\u8d4b\u503cr\u5c31\u884c\u4e86\uff0c\u5b83\u662f\u9012\u589e\u7684\n                {\n                    dp[x] = r;\n                }\n            }\n        }\n    }\n\n    int Ans = 0;\n    for (int i = 1; i <= n; ++i)\n    {\n        if (dp[i])  // \u7edf\u8ba1\u80fd\u8fbe\u5230\u7684\u6570\u5b57\u6709\u591a\u5c11\u4e2a\uff0c\u56e0\u4e3a\u6309\u7167\u539f\u5148\u7684\u7ea6\u5b9a\uff0c\u65e0\u6cd5\u53d6\u5f97\u7684\u6570\u5b57\u53f3\u7aef\u70b9\u88ab\u8bbe\u4e3a\u4e860\n        {\n            ++Ans;\n        }\n    }\n\n    // \u6309\u9898\u610f\u8f93\u51fa\n    std::cout << Ans << std::endl;\n    for (int i = 1; i <= n; ++i)\n    {\n        if (dp[i])\n        {\n            std::cout << i << ' ';\n        }\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```",
        "postTime": 1531328608,
        "uid": 59062,
        "name": "\u5c0f\u95f8\u87f9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF981E \u3010Addition on Segments\u3011"
    },
    {
        "content": "\u5927\u5bb6\u597d\uff0c\u56e0\u4e3a\u6211\u662f\u4e00\u4e2a\u65b0\u624b\uff0c\u6240\u4ee5\u6211\u7528\u4e86\u4e00\u4e2a\u50bb\u903c\u65b9\u6cd5\u79d2\u4e86\u8fd9\u9898\u3002\n\n\u663e\u7136\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u6709\u4ea4\u7684\u7ebf\u6bb5\u96c6\u5408\uff0c\u5426\u5219\u7edf\u8ba1\u51fa\u6765\u7684\u7b54\u6848\u53ef\u4ee5\u88ab\u6709\u4ea4\u7684\u7ebf\u6bb5\u96c6\u5408\u5305\u542b\u3002\n\n\u90a3\u4e48\u679a\u4e3e\u4ea4\u70b9\u4f4d\u7f6e\uff0c\u8dd1\u6240\u6709\u5305\u542b\u8fd9\u4e2a\u70b9\u7684\u7ebf\u6bb5\u7684 01 \u80cc\u5305\uff0c\u66f4\u65b0\u6bcf\u4e00\u4e2a\u70b9\u7684\u53d6\u503c\u5373\u53ef\u3002\n\n\u626b\u63cf\u7ebf+\u9000\u80cc\u5305\u5373\u53ef\u300201 \u80cc\u5305\u505a\u65b9\u6848\u6570\uff0c\u9009\u62e9 998244353 \u4f5c\u4e3a\u6a21\u6570\uff0c\u8fd9\u9053\u9898\u5c31\u8279\u8fc7\u53bb\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ljc 998244353\n#define gc getchar\nusing namespace std;\ninline int read(){\n\tint x=0,f=1;char ch=gc();\n\twhile (!isdigit(ch)){if (ch=='-') f=-1;ch=gc();}\n\twhile (isdigit(ch)){x=x*10ll+ch-'0';ch=gc();}\n\treturn x*f;\n}\nint n,m,f[10001],g[10001];\nvector<int> add[10001],del[10001];\nint main(){\n\tn=read(),m=read();\n\tfor (int i=1;i<=m;i++){\n\t\tint l=read(),r=read(),w=read();\n\t\tadd[l].push_back(w);\n\t\tdel[r].push_back(w);\n\t}\n\tf[0]=1;\n\tfor (int i=1;i<=n;i++){\n\t\tfor (auto j:add[i]){\n\t\t\tfor (int k=n;k>=j;k--) f[k]=(f[k]+f[k-j])%ljc;\n\t\t}\n\t\tfor (int j=1;j<=n;j++) g[j]|=(f[j]>0);\n\t\tfor (auto j:del[i]){\n\t\t\tfor (int k=j;k<=n;k++) f[k]=(f[k]-f[k-j]+ljc)%ljc;\n\t\t}\n\t}\n\tint _=0;\n\tfor (int i=1;i<=n;i++) _+=g[i]>0;\n\tprintf(\"%d\\n\",_);\n\tfor (int i=1;i<=n;i++) if (g[i]>0) printf(\"%d \",i);\n\treturn 0;\n}\n\n```\n\n\u4e00\u770b\u9898\u89e3\u53d1\u73b0\u53ef\u4ee5\u7ebf\u6bb5\u6811\u5206\u6cbb+bitset \u4f18\u5316\uff0c\u4f46\u662f\u6211\u662f\u4e00\u4e2a\u65b0\u624b\uff0c\u6240\u4ee5\u6211\u6ca1\u60f3\u5230\uff0c\u81ea\u95ed\u4e86\u3002\u4f46\u662f\u590d\u6742\u5ea6\u5dee\u4e0d\u591a\uff0c\u56e0\u4e3a\u591a\u4e86\u4e00\u4e2a log\u3002\n\n\u4e00\u770b\u9898\u89e3\u53d1\u73b0\u6211\u53c8\u88ab\u5b66\u5f1f\u540a\u6253\u4e86\u3002\u4e0d\u8fc7\u8fd9\u597d\u50cf\u5f88\u6b63\u5e38\u3002",
        "postTime": 1670831907,
        "uid": 77426,
        "name": "sanaka87",
        "ccfLevel": 0,
        "title": "CF981E Addition on Segments"
    },
    {
        "content": "emmmmmm \u6000\u7591\u81ea\u5df1\u50bb\u6389\u4e86\n\n\u7531\u4e8e\u9009\u7684\u662f\u96c6\u5408\uff0c\u4f60\u53ef\u4ee5\u5148\u9009\u597d\u5fc5\u9009\u7684\uff0c\u518d\u9009\u5176\u4ed6\u7684\u3002\n\n\u80fd\u4f7f\u7b2ci\u4e2a\u5143\u7d20\u6539\u53d8\u5927\u5c0f\u7684\u53ea\u80fd\u662f\u5305\u542b\u8fd9\u4e2a\u5143\u7d20\u7684\u533a\u95f4\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u80cc\u5305\u7684\u65b9\u6cd5\u5f97\u5230\u8fd9\u4e2a\u5143\u7d20\u7684\u53d6\u503c\u79cd\u7c7b\u548c\u5927\u5c0f\n\n\u8fd9\u4e9b\u53d6\u503c\u662f\u5747\u80fd\u8fbe\u5230\u7684\u3002\u56e0\u4e3a\u4f60\u53ef\u4ee5\u53ea\u53d6\u8fd9\u4e00\u4e9b\u64cd\u4f5c\uff0c\u5e76\u4e14\u64cd\u4f5c\u7684\u503c\u90fd\u662f>0\u7684\uff0c\u8fd9\u53ef\u4ee5\u4fdd\u8bc1\u4f60\u662f\u6700\u5927\u503c\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=10005;\nint n,q;\nvector<int > tag[N<<2];\nbitset<N> ans,C;\nvoid update(int k,int l,int r,int x,int y,int w){\n\tif (l==x&&r==y) {tag[k].push_back(w); return;}\n\tint mid=(l+r)>>1;\n\tif (mid>=y) update(k<<1,l,mid,x,y,w);\n\t\telse if (mid<x) update(k<<1|1,mid+1,r,x,y,w);\n\t\t\telse update(k<<1,l,mid,x,mid,w),update(k<<1|1,mid+1,r,mid+1,y,w);\n}\nvoid dfs(int k,int l,int r,bitset<N> A){\n\tbitset<N> B=A;\n\tfor (int i=0;i<tag[k].size();i++) B|=(B<<tag[k][i]);\n\tif (l==r) {ans|=B; return;}\n\tint mid=(l+r)>>1; dfs(k<<1,l,mid,B); dfs(k<<1|1,mid+1,r,B);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&q);\n\tfor (int i=1;i<=q;i++){\n\t\tint l,r,x;\n\t\tscanf(\"%d%d%d\",&l,&r,&x);\n\t\tupdate(1,1,n,l,r,x); \n\t}\n\tC[0]=1;\n\tdfs(1,1,n,C); int tot=0;\n\tfor (int i=1;i<=n;i++) if (ans[i]) tot++;\n\tprintf(\"%d\\n\",tot);\n\tfor (int i=1;i<=n;i++) if (ans[i]) printf(\"%d \",i);\n\tputs(\"\");\n\treturn 0;\n} \n```",
        "postTime": 1533355243,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF981E \u3010Addition on Segments\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\u672c\u9898\u66b4\u529b DP \u53ef\u8fc7\uff0c\u800c\u4e14\u80fd\u4f18\u96c5\u7684\u62ff\u5230\u6700\u4f18\u89e3 [here](https://www.luogu.com.cn/record/69596894)\uff0c\u9274\u4e8e\u6709\u795e\u7287\u5199\u8fc7\u8be5\u9898 DP \u9898\u89e3\n[here](https://www.luogu.com.cn/blog/dfg/solution-cf981e)\uff0c\u6211\u5728\u4ed6\u7684\u57fa\u7840\u4e0a\u7b80\u5316\u4e00\u4e0b\u4ee3\u7801\u5b9e\u73b0\u3002  \n\n### \u89e3\u6790\n\u5982\u4f55\u641e\u51fa\u5e8f\u5217\u6700\u5927\u503c $k$\uff1f\u5982\u679c\u5b58\u5728\u4e00\u4e9b\u76f8\u4ea4\u7684\u533a\u95f4\uff08\u6216\u8005\u53ea\u9009\u4e00\u4e2a\uff09\u4ed6\u4eec\u7684\u52a0\u503c\u548c\u7b49\u4e8e $k$\uff0c\u8bf4\u660e\u53ef\u884c\u3002  \n\n\u6240\u4ee5\u8bbe $dp_i$ \u4e3a\u4f7f\u5e8f\u5217\u6700\u5927\u503c\u4e3a $i$ \u7684\u4e00\u4e9b\u533a\u95f4\u7684\u5de6\u8fb9\u754c\u6700\u5927\u503c\u3002  \n\u6211\u4eec\u628a\u6240\u6709\u533a\u95f4\u6309\u5de6\u8fb9\u754c\u5927\u5c0f\u6392\u5e8f\uff0c\u4ece\u5927\u5230\u5c0f\u904d\u5386\u533a\u95f4\u3002\u4e24\u4e2a\u533a\u95f4\u76f8\u4ea4\uff0c\u5373 $ l_i\u2264 l_j $ \u4e14 $ l_j\u2264r_i$\u3002  \n\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u6392\u4e86\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7ba1\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u3002  \n\u5f53\u679a\u5230\u7b2c $i$ \u4e2a\u533a\u95f4\u65f6\uff0c\u5982\u679c\u5b58\u5728\u5e8f\u5217\u6700\u5927\u503c $k$ \u4e14 $dp_k\u2264r_i$,\u8bf4\u660e $k+x_i$ \u4e5f\u5b58\u5728\u3002\n\n### ~~\u6478\u9c7c\u7ed3\u675f~~ \u5f00\u59cb\u539f\u521b\n\n- \u56e0\u4e3a\u6309\u5de6\u8fb9\u754c\u4ece\u5927\u5230\u5c0f\u679a\u533a\u95f4\uff0c\u6240\u4ee5 $ dp_{k+x_i}=dp_k $\u3002\n\n- \u7279\u5224\u4e00\u4e0b\u5355\u9009\u4e00\u4e2a\u533a\u95f4\uff0c\u5373\u679a\u5b8c\u4e00\u4e2a\u533a\u95f4\u540e\u7528\u6b64\u533a\u95f4\u7684 $k$ \u548c $l$ \u8fdb\u884c\u521d\u59cb\u5316 $dp_{k}=l$\u3002\n\n### code\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define pb push_back\n#define mid ((l+r)>>1)\n#define FOR(i,a,b) for(int i=(a); i<=(b); ++i)\n#define ROF(i,a,b) for(int i=(a); i>=(b); --i)\nusing namespace std;\n//\nconst ll N=1e4;\n//\nstruct node{\n\tll l,r,z;\n};\nnode que[N+10];\nll dp[N+10];\n//\nbool cmp(node a,node b){\n\treturn a.l<b.l; \n}\nint main() {\n\tmemset(dp,0x3f,sizeof(dp));\n\tll n=gt(),q=gt();\n\tFOR(i,1,q){\n\t\tque[i].l=gt(),que[i].r=gt(),que[i].z=gt();\n\t} \n\tsort(que+1,que+q+1,cmp);\n\tROF(i,q,1){\n\t\tnode aba=que[i];\n\t\tROF(j,n-aba.z,1){\n\t\t\taba.r>=dp[j]?dp[j+aba.z]=dp[j]:n; \n\t\t} \n\t\tdp[aba.z]=aba.l;\n\t}\n\tll ans=0;\n\tFOR(i,1,n) ans+=dp[i]<=n?1:0;\n\tprintf(\"%lld\\n\",ans);\n\tFOR(i,1,n) dp[i]<=n?printf(\"%lld \",i):n;\n}\n\n\n```\n\n~~\u4e3a\u4ee3\u7801\u7f8e\u89c2\u5220\u4e86\u5feb\u8bfb XD~~\n",
        "postTime": 1645254910,
        "uid": 208967,
        "name": "Hasinon",
        "ccfLevel": 9,
        "title": "CF981E Addition on Segments \u840c\u65b0\u9898\u89e39th"
    }
]