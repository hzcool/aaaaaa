[
    {
        "content": "\u6709\u8da3\u7684\u9898\n\n\u53d1\u73b0\u4ed6\u8981\u6700\u7ec8\u7684\u56fe\u662f\u4e00\u4e2a$cactus$,\u5373\u6bcf\u4e00\u4e2a\u70b9\u6700\u591a\u5728\u4e00\u4e2a\u73af\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u6210\u5bf9\u4e8e\u6bcf\u4e00\u6761\u53ef\u4ee5\u52a0\u7684\u8fb9\uff0c\u662f\u4e00\u6761$x$\u5230$y$\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u52a0\u4e86\u8fd9\u6761\u8fb9\u5c31\u4f1a\u8ba9\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u5904\u5728\u8fd9\u4e2a\u73af\u4e0a\n\n\u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u6210\uff0c\u8ba9\u591a\u4e2a\u8def\u5f84\u8986\u76d6\u8fd9\u4e2a\u6811\uff0c\u6bcf\u4e00\u4e2a\u70b9\u6700\u591a\u88ab\u8986\u76d6\u4e00\u6b21\uff0c\u4f7f\u6743\u503c\u548c\u6700\u5927\n\n\u8003\u8651$dp$,$f_i$\u8868\u793a$i$\u5b50\u6811\u5185\u7684\u7b54\u6848\n\n\u5206\u4e24\u79cd\u60c5\u51b5\n\n\u60c5\u51b5$1:$ \u4e0d\u9009\u8fd9\u4e2a\u70b9\uff0c\u5373$f_i=f_j$\u4e4b\u548c\uff0c$j$\u662f$i$\u7684\u76f4\u63a5\u5b69\u5b50\u3002\n\n\u60c5\u51b5$2:$ \u9009\u8fd9\u4e2a\u70b9\uff0c\u679a\u4e3e\u54ea\u4e00\u4e2a\u8def\u5f84\uff0c\u53ea\u7528\u8003\u8651$lca$\u4e3a$i$\u7684\u8def\u5f84\uff0c\u5176\u5b9e\u5c31\u662f\u6811\u4e0a\u6316\u6389\u8fd9\u4e2a\u8def\u5f84\u8ba9\u5269\u4e0b\u7684\u7b54\u6848\u6700\u5927\uff0c\u5047\u8bbe\u8def\u5f84\u7684\u7aef\u70b9\u4e3a$x$,$y$\u90a3\u4e48\u663e\u7136\u5c31\u662f\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u4e0d\u5728\u8def\u5f84\u76f8\u90bb\u70b9\u7684$f_i$\u4e4b\u548c\uff0c\u8f6c\u5316\u4e00\u4e0b\uff0c\u5047\u8bbe$g(i)$\u8868\u793a$f_j$\u4e4b\u548c$j$\u662f$i$\u7684\u5b69\u5b50\u51cf\u53bb$f_i$\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f$x$\u5230$i$\u7684$gi$\u548c+$y$\u5230$i$\u7684$gi$\u548c+\u8fd9\u6761\u8fb9\u7684\u6743\u503c+$f_j$\u7684\u548c$j$\u662f$i$\u7684\u5b69\u5b50\n\n\u8003\u8651\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\uff0c\u663e\u7136\u4ed6\u7684\u7b54\u6848\u5c31\u662f\u8fd9\u4e2a\u70b9\u5230$i$\u70b9\u8def\u5f84\u4e0a\u6240\u6709\u6570\u7684$f_j$\u4e4b\u548c\u51cf\u53bb$f_k$,$k$\u4e3a\u5f53\u524d\u70b9\u5728\u8def\u5f84\u4e0a\u7684\u513f\u5b50\uff0c\u8fd9\u6837\u5c31\u662f\u4e00\u4e2a\u5355\u70b9\u4fee\u6539\uff0c\u94fe\u67e5\u8be2\uff0c\u94fe\u67e5\u8be2\u8981\u6811\u5256\uff0c\u6211\u4eec\u8003\u8651\u8f6c\u5316\n\n\u6211\u4eec\u679a\u4e3e\u5b8c\u4e00\u4e2a\u70b9\uff0c\u5c31\u4f1a\u5bf9\u6240\u6709\u4ed6\u7684\u5b50\u6811\u5185\u7684\u70b9\u4ea7\u751f\u4e00\u5b9a\u7684\u8d21\u732e\uff0c\u8d21\u732e\u5c31\u662f\u4e0a\u9762\u7684$f_j$\u4e4b\u548c\u51cf\u53bb$f_k$,$k$\u4e3a\u5f53\u524d\u70b9\u5728\u8def\u5f84\u4e0a\u7684\u513f\u5b50\uff0c\u90a3\u4e48\u53d8\u6210\u4e86\u5b50\u6811\u52a0\u6cd5\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ef4\u62a4dfs\u5e8f\u8f6c\u5316\u6210\u533a\u95f4\u52a0\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u5dee\u5206\u540e\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\n\n```cpp\n\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=200005;\nstruct edge {\n  int to,nxt;\n}e[N<<1];\nint head[N],m,n,u[N],v[N],st[N],ed[N],dfn=0,f[N],dp[N][21],val[N],t[N<<2],dep[N];\nvector<int> vec[N];\nint cnt=0;\nvoid addedge(int x,int y) {\n  ++cnt;\n  e[cnt].to=y;e[cnt].nxt=head[x];head[x]=cnt;\n}\nint lowbit(int x) {return x&(-x);}\nvoid add(int x,int y) {\n  for (;x<=n;x+=lowbit(x)) t[x]+=y;\n}\nint query(int x) {\n  int ret=0;\n  for (;x;x-=lowbit(x)) ret+=t[x];\n  return ret;\n}\nvoid dfs(int x,int fa) {\n  ++dfn;\n  st[x]=dfn;dp[x][0]=fa;\n  for (int i=head[x];~i;i=e[i].nxt) {\n    int v1=e[i].to;\n    if(v1==fa) continue;\n    dep[v1]=dep[x]+1;\n    dfs(v1,x);\n  }\n  ed[x]=dfn;\n}\nvoid init() {\n  for (int j=1;j<=20;++j) {\n    for (int i=1;i<=n;++i) dp[i][j]=dp[dp[i][j-1]][j-1];\n  }\n}\nint lca(int x,int y) {\n  if(dep[x]<dep[y]) swap(x,y);\n  int delt=dep[x]-dep[y];\n  for (int i=0;i<=20;++i) if(delt&(1<<i)) x=dp[x][i];\n  if(x==y) return x;\n  for (int i=20;i>=0;--i) {\n    if(dp[x][i]!=dp[y][i]) {\n      x=dp[x][i];\n      y=dp[y][i];\n    }\n  }\n  return dp[x][0];\n}\nvoid dfs1(int x,int fa) {\n  int ret=0;\n  for (int i=head[x];~i;i=e[i].nxt) {\n    int v1=e[i].to;\n    if(v1==fa) continue;\n    dfs1(v1,x);\n    ret+=f[v1];\n  }\n  f[x]=ret;\n  for (int i=0;i<vec[x].size();++i) {\n    int x1=u[vec[x][i]],y=v[vec[x][i]];\n    f[x]=max(f[x],query(st[x1])+query(st[y])+val[vec[x][i]]+ret);\n  }\n  add(st[x],ret-f[x]);\n  add(ed[x]+1,f[x]-ret);\n  return ;\n}\n\nint main() {\n  memset(head,-1,sizeof(head));\n  scanf(\"%d%d\",&n,&m);\n  for (int i=2;i<=n;++i) {\n    int x;\n    scanf(\"%d\",&x);\n    addedge(x,i);\n    addedge(i,x);\n  }\n  dfs(1,0);\n  init();\n  for (int i=1;i<=m;++i) {\n    scanf(\"%d%d%d\",&u[i],&v[i],&val[i]);\n    int lc=lca(u[i],v[i]);\n    vec[lc].push_back(i);\n  }\n  dfs1(1,0);\n  printf(\"%d\\n\",f[1]);\n  return 0;\n}\n\n```",
        "postTime": 1582206277,
        "uid": 78187,
        "name": "zjjcth330",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF856D \u3010Masha and Cactus\u3011"
    },
    {
        "content": "\u5b9e\u9645\u4e0a\u5c31\u662f\u5e26\u6743\u7248\u672c\u7684  HDU 4912 Paths on the tree\n\n\u8003\u8651dp\n\n$f_u$ \u8868\u793a\u5728 $u$ \u5b50\u6811\u5185\u80fd\u5f97\u5230\u7684\u6700\u5927\u7b54\u6848\n\n\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u5728\u4ed6\u7684 lca \u4f4d\u7f6e\u5904\u7406\u4ed6\u7684\u8d21\u732e\n\n\u8f6c\u79fb\uff1a\n\n\u7b2c\u4e00\u79cd\uff0c\u5728\u8fd9\u4e2a\u70b9\u5565\u8def\u5f84\u90fd\u4e0d\u9009\uff1a\n\n$f_u=\\sum f_v$\uff0c$v$ \u662f $u$ \u7684\u513f\u5b50\n\n\u7b2c\u4e8c\u79cd\uff0c\u9009\u67d0\u4e00\u6761 lca \u4e3a $u$ \u7684\u8def\u5f84\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4jqaiubr.png)\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u9009\u62e9\u6a59\u8272\u8fd9\u6761\u8def\u5f84\u540e\uff0c\u6240\u6709 lca\u7ecf\u8fc7\u7eff\u8272\u70b9\u7684\u8def\u5f84\u90fd\u6ca1\u529e\u6cd5\u9009\u62e9\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u6a59\u8272\u8def\u5f84\u7684\u7b54\u6848\u662f\u6240\u6709\u84dd\u70b9\u7684dp\u503c\u52a0\u4e0a\u6a59\u8272\u8def\u5f84\u7684\u6743\u503c\u3002\n\n\u8fd9\u4e9b\u84dd\u70b9\u5176\u5b9e\u5c31\u662f\u8def\u5f84\u4e0a\u7684\u70b9\u7684**\u5b50\u8282\u70b9**\uff08\u6ce8\u610f\u4e0d\u662f\u5b50\u6811\uff09\n\n\u90a3\u4e48\u6211\u4eec\u6709\u4e2a\u5f88\u5de7\u5999\u7684\u65b9\u6cd5\u6765\u7ef4\u62a4\u8fd9\u4e2a\uff1a\n\n\u6211\u4eec\u7528\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u8282\u70b9 $u$ \u7684 $-f_u+\\sum f_v$\n\n\u7136\u540e\u53c8\u56e0\u4e3a\u6211\u4eec\u662f\u4ece\u53f6\u5b50\u5f00\u59cb\u9012\u5f52\u5411\u6839\u8282\u70b9\u5411\u4e0a\u7edf\u8ba1\u7b54\u6848\uff0c\u6240\u4ee5\u5728\u8ba1\u7b97 $u$ \u7684dp\u503c\u7684\u65f6\u5019\uff0c$u$ \u5411\u7236\u4eb2\u8282\u70b9\u65b9\u5411\u7684\u7ef4\u62a4\u7684\u8282\u70b9\u7684\u503c\u4e00\u5b9a\u662f 0\uff0c\u56e0\u4e3a\u5f53\u524d\u8282\u70b9\u7684 dp \u503c\u8fd8\u6ca1\u5f04\u5b8c\u7236\u8282\u70b9\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u8981\u7ef4\u62a4\u7684\u503c\n\n\u90a3\u4e48\u663e\u7136\uff0c\u6211\u4eec\u8981\u6c42\u7684\u84dd\u70b9\u7684dp\u503c\u548c\u5c31\u662f**\u6a59\u8272\u8def\u5f84\u4e24\u4e2a\u7aef\u70b9\u5230\u6839\u8282\u70b9\u7684\u7ef4\u62a4\u7684\u503c\u7684\u548c\u52a0\u4e0a** $\\sum f_v$\uff08\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4e0d\u662f\u5230 $u$ \u524d\u9762\u5df2\u7ecf\u8bf4\u8fc7\u4e86\uff0c$u$ \u7684\u7236\u4eb2\u65b9\u5411\u8282\u70b9\u7684\u7ef4\u62a4\u7684\u503c\u4e00\u5b9a\u662f 0\uff09\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5728\u4e0a\u9762\u90a3\u5f20\u56fe\u624b\u6a21\u4e00\u4e0b\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u70b9\u5230\u6839\u8def\u5f84\u6743\u503c\u548c\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811+dfs\u5e8f\u6765\u8fdb\u884c\u5dee\u5206\uff0c\u533a\u95f4\u4fee\u6539\u76f4\u63a5\u628a\u6574\u68f5\u5b50\u6811\uff08dfs\u5e8f\u7684\u533a\u95f4\uff09\u52a0\u4e0a\u503c\u5c31\u597d\uff0c\u7136\u540e\u5355\u70b9\u67e5\u8be2\n\n\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4+dfs\u5e8f\uff0c\u5e38\u6570\u4f1a\u5c0f\u5f88\u591a\u4e5f\u5f88\u597d\u5199\n\n\u9009\u62e9\u4e00\u6761\u8def\u5f84\u7684\u8f6c\u79fb\uff1a\n\n$f_u=\\max \\{ \\text{\u8fd9\u6761\u8def\u5f84\u84dd\u70b9dp\u503c\u548c}+\\sum f_v \\}$\uff0c$\\sum f_v$ \u5728\u4e0d\u9009\u8def\u5f84\u8f6c\u79fb\u7684\u65f6\u5019\u5148\u8ba1\u7b97\u597d\u5c31\u884c\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\n\n```cpp\n// This code writed by chtholly_micromaker(MicroMaker)\n#include <bits/stdc++.h>\n#define reg register\nusing namespace std;\nconst int MaxN=200050;\nstruct Edge\n{\n\tint nxt,to;\n}E[MaxN<<2];\nstruct Quetion\n{\n\tint u,v,w;\n\tint Lca;\n};\nstruct SegmentTree\n{\n\t#define lson (u<<1)\n\t#define rson (u<<1|1)\n\tint val[MaxN<<2],lazy[MaxN<<2];\n\tinline void pushup(int u)\n\t{\n\t\tval[u]=val[lson]+val[rson];\n\t\treturn ;\n\t}\n\tinline void pushdown(int u,int l,int r)\n\t{\n\t\tif(lazy[u])\n\t\t{\n\t\t\treg int mid=(l+r)>>1;\n\t\t\tlazy[lson]+=lazy[u];\n\t\t\tlazy[rson]+=lazy[u];\n\t\t\tval[lson]+=(mid-l+1)*lazy[u];\n\t\t\tval[rson]+=(r-mid)*lazy[u];\n\t\t\tlazy[u]=0;\n\t\t}\n\t\treturn;\n\t}\n\tinline void modify(int u,int l,int r,int ql,int qr,int k)\n\t{\n\t\tif(ql<=l&&r<=qr)\n\t\t{\n\t\t\tval[u]+=(r-l+1)*k;\n\t\t\tlazy[u]+=k;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(u,l,r);\n\t\treg int mid=(l+r)>>1;\n\t\tif(ql<=mid)\n\t\t\tmodify(lson,l,mid,ql,qr,k);\n\t\tif(mid<qr)\n\t\t\tmodify(rson,mid+1,r,ql,qr,k);\n\t\tpushup(u);\n\t\treturn;\n\t}\n\tinline int query(int u,int l,int r,int p)\n\t{\n\t\tif(l==r)\n\t\t\treturn val[u];\n\t\tpushdown(u,l,r);\n\t\treg int mid=(l+r)>>1;\n\t\tif(p<=mid)\n\t\t\treturn query(lson,l,mid,p);\n\t\telse\n\t\t\treturn query(rson,mid+1,r,p);\n\t\treturn -1;\n\t}\n}tr;\ntemplate <class t> inline void read(t &s)\n{\n\ts=0;\n\treg int f=1;\n\treg char c=getchar();\n\twhile(!isdigit(c))\n\t{\n\t\tif(c=='-')\n\t\t\tf=-1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c))\n\t\ts=(s<<3)+(s<<1)+(c^48),c=getchar();\n\ts*=f;\n\treturn;\n}\nint hd[MaxN],en,n,m;\nint cnt;\nint L[MaxN],R[MaxN];\nint up[MaxN][21],dep[MaxN];\nvector<Quetion> ask[MaxN];\nint dp[MaxN];\ninline void adde(int u,int v)\n{\n\t++en;\n\tE[en]=(Edge){hd[u],v};\n\thd[u]=en;\n\treturn;\n}\ninline void dfs(int u,int fa)\n{\n\tL[u]=++cnt;\n\tup[u][0]=fa;\n\tfor(int i=hd[u];~i;i=E[i].nxt)\n\t{\n\t\treg int v=E[i].to;\n\t\tif(v==fa)\n\t\t\tcontinue;\n\t\tdep[v]=dep[u]+1;\n\t\tdfs(v,u);\n\t}\n\tR[u]=cnt;\n\treturn;\n}\ninline void Init_lca()\n{\n\tfor(int k=1;k<21;++k)\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tup[i][k]=up[up[i][k-1]][k-1];\n\treturn;\n}\ninline int lca(int u,int v)\n{\n\tif(dep[u]<dep[v])\n\t\tswap(u,v);\n\tif(u!=v)\n\t\tfor(int k=20;k>=0;--k)\n\t\t\tif(dep[up[u][k]]>=dep[v])\n\t\t\t\tu=up[u][k];\n\tif(u==v)\n\t\treturn u; \n\tfor(int k=20;k>=0;--k) \n\t\tif(up[u][k]!=up[v][k])\n\t\t\tu=up[u][k],v=up[v][k];\n\treturn up[u][0]; \n} \ninline void dfs2(int u,int fa)\n{ \n\tvector<int> Save;\n\treg int DpSum=0;\n\tfor(int i=hd[u];~i;i=E[i].nxt)\n\t{ \n\t\treg int v=E[i].to; \n\t\tif(v==fa) \n\t\t\tcontinue; \n\t\tdfs2(v,u);\n\t\tdp[u]+=dp[v];\n\t\tDpSum+=dp[v];\n\t}\n\tfor(int i=0;i<(int)ask[u].size();++i)\n\t{\n\t\treg int l=ask[u][i].u;\n\t\treg int r=ask[u][i].v;\n\t\tdp[u]=max(dp[u],ask[u][i].w+tr.query(1,1,n,L[l])+\n\t\t\ttr.query(1,1,n,L[r])+DpSum);\n\t}\n\ttr.modify(1,1,n,L[u],R[u],DpSum-dp[u]);\n\treturn;\n}\nsigned main(void)\n{\n\tmemset(hd,-1,sizeof hd);\n\tcin>>n>>m;\n\treg int u,v;\n\tfor(int i=2;i<=n;++i)\n\t{\n\t\tread(v);\n\t\tadde(i,v);\n\t\tadde(v,i);\n\t}\n\tdep[1]=1;\n\tdfs(1,0);\n\t// for(int i=1;i<=n;++i)\n\t// {\n\t\t// printf(\"Node %d %d %d\\n\",i,L[i],R[i]);\n\t// }\n\tInit_lca();\n\treg int Lca,w;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tread(u);read(v);read(w);\n\t\tLca=lca(u,v);\n\t\task[Lca].push_back((Quetion){u,v,w,Lca});\n\t}\n\tdfs2(1,0);\n\tcout<<dp[1]<<endl;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1585728341,
        "uid": 51376,
        "name": "MyukiyoMekya",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF856D \u3010Masha and Cactus\u3011"
    },
    {
        "content": "\u633a\u597d\u7684\u4e00\u9053\u9898\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u5728\u4e00\u68f5\u6811\u4e0a\u52a0\u8fb9\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4e00\u822c\u53ef\u4ee5\u5728**\u6bcf\u6761\u65b0\u8fb9\u4e24\u4e2a\u7aef\u70b9\u7684lca\u5904\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u4fe1\u606f**\uff0c\u5982[\u8fd9\u9053\u9898](http://poj.org/problem?id=3417)\u3002\n\n\u4f46\u662f\uff0c\u5728lca\u5904\u8bb0\u5f55\u5b8c\u540e\u5982\u4f55\u5462\uff1f\n\n\u8003\u8651**\u6811\u4e0adp**\u3002\n\n\u8bbe$f_i$\u4e3a$i$\u53f7\u8282\u70b9\u5728\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u5185\u6240\u80fd\u53d6\u5f97\u7684\u6700\u5927\u7684\u6743\u503c\u548c\u3002\n\n\u8003\u8651\u8f6c\u79fb\u3002\n\n1\uff09\u4e0d\u9009lca\u4e3a$i$\u7684\u4efb\u4f55\u4e00\u6761\u65b0\u8fb9\u3002\u6b64\u65f6\uff0c\u6709$f_i=\\Sigma f_j$\uff0c$j$\u662f$i$\u7684\u513f\u5b50\u3002\n\n2\uff09\u9009\u62e9\u4e00\u6761\u4ece$u$\u5230$v$\uff0c\u6743\u503c\u4e3a$w$\u7684\u65b0\u8fb9\u3002\u8fd9\u65f6\uff0c\u6709$f_i=w+\\Sigma f_j$\uff0c$j$\u662f$u$\u5230$v$\u8def\u5f84\u4e0a\u4efb\u610f\u4e00\u4e2a\u70b9\u7684\u67d0\u4e2a\u513f\u5b50\uff0c\u4e14$j$\u4e0d\u5728\u8def\u5f84\u4e0a\u3002\n\n\u6362\u4e00\u4e2a\u8bf4\u6cd5\u3002\u4ee4$g_i=\\Sigma f_j$\uff0c\u4e14$j$\u662f$i$\u7684\u513f\u5b50\uff08\u5373$g_i$\u4e3a\u65b9\u6848\u4e00\u4e2d\u7684$f_i$\uff09\u3002\u5219$f_i=w+\\Sigma (g_j-f_j)$\uff0c\u4e14$j$\u5728\u8def\u5f84\u4e0a\u3002\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u8def\u5f84\u4e0a\u7684\u70b9$k$\uff0c**$f_k$\u5fc5\u5b9a\u5728$k$\u5904\u52a0\u4e0a\uff0c\u53c8\u5728$g_{father_k}$\u5904\u88ab\u51cf\u53bb**\u3002\n\n\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u679a\u4e3e\u8def\u5f84\u4e0a\u6bcf\u4e00\u4e2a$k$\uff0c\u4e0d\u7136\u662f$O(n^2)$\u7684\u3002\n\n\u663e\u7136\uff0c\u6811\u4e0a\u5355\u70b9\u4fee\u6539\uff0c\u8def\u5f84\u6c42\u548c\uff0c\u53ef\u4ee5**\u6811\u5256**\u3002\n\n\u4f46\u6811\u5256\u7801\u91cf\u5927\uff0c\u4e0d\u60f3\u5199\uff0c\u600e\u4e48\u529e\uff1f\n\n**\u6811\u4e0a\u5dee\u5206**\u3002\n\n\u540c\u5f80\u5e38\u7684\u6811\u4e0a\u5dee\u5206\u4e00\u6837\uff0c\u4ee4$sum_i$\u50a8\u5b58$i$\u5230\u6839\u8282\u70b9\u4e0a\u6240\u6709\u70b9\u7684$(g_i-f_i)$\u7684\u503c\u7684\u548c\u3002\n\n\u5219\u65b9\u6848\u4e8c\u7684\u7b54\u6848\u4e3a$w+sum_u+sum_v+g_i$\u3002\uff08\u56e0\u4e3a\u5728dp\u5230\u8282\u70b9$i$\u65f6\uff0c$i$\u7684\u6240\u6709\u7956\u5148\u90fd\u8fd8\u6ca1\u6709dp\uff0c\u5219$sum_i$\u4e3a$0$\u3002\uff09\n\n\u800c\u4fee\u6539\uff0c\u5c31\u4ece\u5355\u70b9\u4fee\u6539\u53d8\u6210\u5b50\u6811\u4fee\u6539\u3002\u67e5\u8be2\u5219\u662f\u5355\u70b9\u67e5\u8be2\u3002\n\n\u5b50\u6811\u4fee\u6539\uff0c\u6211\u4eec\u6709**dfs\u5e8f**\u3002\n\n\u8bbe$dfn_i$\u4e3a$i$\u53f7\u8282\u70b9\u7684dfs\u5e8f\uff0c$sz_i$\u4e3a$i$\u53f7\u8282\u70b9\u5b50\u6811\u5927\u5c0f\u3002\n\n\u5219\u6240\u6709dfs\u5e8f\u5728$[dfn_i,dfn_i+sz_i-1]$\u533a\u95f4\u5185\u7684\u70b9$j$\u90fd\u5e94\u8be5\u88ab\u4fee\u6539\u3002\n\n\u67e5\u8be2$i$\u7684\u8bdd\uff0c\u5219\u67e5\u8be2$dfn_i$\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e86\u3002\n\n\u590d\u6742\u5ea6$O(nlog_2n)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define lson x<<1\n#define rson x<<1|1\n#define mid ((l+r)>>1) \nint n,m,head[200100],cnt,f[200100],g[200100],anc[200100][20],dep[200100],dfn[200100],sz[200100],tot;\nstruct edge{\n\tint to,next;\n}edge[200100];\nstruct EDGE{\n\tint u,v,w;\n\tEDGE(int x=0,int y=0,int z=0){\n\t\tu=x,v=y,w=z;\n\t}\n};\nvoid ae(int u,int v){\n\tedge[cnt].next=head[u],edge[cnt].to=v,head[u]=cnt++;\n}\nvector<EDGE>v[200100];\nvoid dfs_lca(int x){\n\tdfn[x]=++tot,sz[x]=1;\n\tfor(int i=1;(1<<i)<=dep[x];i++)anc[x][i]=anc[anc[x][i-1]][i-1];\n\tfor(int i=head[x];i!=-1;i=edge[i].next)dep[edge[i].to]=dep[x]+1,anc[edge[i].to][0]=x,dfs_lca(edge[i].to),sz[x]+=sz[edge[i].to];\n}\nint LCA(int x,int y){\n\tif(dep[x]>dep[y])swap(x,y);\n\tfor(int i=19;i>=0;i--)if(dep[x]<=dep[y]-(1<<i))y=anc[y][i];\n\tif(x==y)return x;\n\tfor(int i=19;i>=0;i--)if(anc[x][i]!=anc[y][i])x=anc[x][i],y=anc[y][i];\n\treturn anc[x][0];\n}\nstruct SegTree{\n\tint sum,tag;\n}seg[800100];\nvoid pushup(int x){\n\tseg[x].sum=seg[lson].sum+seg[rson].sum;\n}\nvoid pushdown(int x,int l,int r){\n\tseg[lson].sum+=(mid-l+1)*seg[x].tag,seg[rson].sum+=(r-mid)*seg[x].tag;\n\tseg[lson].tag+=seg[x].tag,seg[rson].tag+=seg[x].tag;\n\tseg[x].tag=0;\n}\nvoid modify(int x,int l,int r,int L,int R,int val){\n\tif(l>R||r<L)return;\n\tif(L<=l&&r<=R){seg[x].sum+=(r-l+1)*val,seg[x].tag+=val;return;}\n\tpushdown(x,l,r),modify(lson,l,mid,L,R,val),modify(rson,mid+1,r,L,R,val),pushup(x);\n}\nint query(int x,int l,int r,int P){\n\tif(l>P||r<P)return 0;\n\tif(l==r)return seg[x].sum;\n\tpushdown(x,l,r);\n\treturn query(lson,l,mid,P)+query(rson,mid+1,r,P);\n}\nvoid dfs_dp(int x){\n\tfor(int i=head[x];i!=-1;i=edge[i].next)dfs_dp(edge[i].to),g[x]+=f[edge[i].to];\n\tf[x]=g[x];\n\tfor(int i=0;i<v[x].size();i++)f[x]=max(f[x],query(1,1,n,dfn[v[x][i].u])+query(1,1,n,dfn[v[x][i].v])+v[x][i].w+g[x]);\n\tmodify(1,1,n,dfn[x],dfn[x]+sz[x]-1,g[x]-f[x]);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m),memset(head,-1,sizeof(head));\n\tfor(int i=2,Fa;i<=n;i++)scanf(\"%d\",&Fa),ae(Fa,i);\n\tdfs_lca(1);\n\tfor(int i=1,x,y,z;i<=m;i++)scanf(\"%d%d%d\",&x,&y,&z),v[LCA(x,y)].push_back(EDGE(x,y,z));\n\tdfs_dp(1);\n//\tfor(int i=1;i<=n;i++)printf(\"(%d,%d)\\n\",f[i],g[i]);\n\tprintf(\"%d\\n\",f[1]);\n\treturn 0;\n}\n```\n",
        "postTime": 1576909133,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF856D \u3010Masha and Cactus\u3011"
    },
    {
        "content": "[\u9898\u9762\u4f20\u9001\u95e8](https://codeforces.ml/contest/856/problem/D)\n\n> \u9898\u610f\uff1a\n> - \u7ed9\u4f60\u4e00\u68f5 $n$ \u4e2a\u9876\u70b9\u7684\u6811\u548c $m$ \u6761\u5e26\u6743\u503c\u7684\u9644\u52a0\u8fb9\n> - \u4f60\u8981\u9009\u62e9\u4e00\u4e9b\u9644\u52a0\u8fb9\u52a0\u5165\u539f\u6811\u4e2d\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a**\u4ed9\u4eba\u638c**\uff08\u6bcf\u4e2a\u70b9\u6700\u591a\u5c5e\u4e8e $1$ \u4e2a\u7b80\u5355\u73af\uff09\n> - \u6c42\u4f60\u9009\u62e9\u7684\u9644\u52a0\u8fb9\u6743\u503c\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002\n> - $n \\in [3,2 \\times 10^5]$\uff0c$m \\in [0,2 \\times 10^5]$\n\n\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u5982\u679c\u4f60\u9009\u62e9\u4e00\u6761\u7aef\u70b9\u4e3a $u,v$ \u7684\u9644\u52a0\u8fb9\uff0c\u90a3\u4e48 $u$ \u5230 $v$ \u8def\u5f84\u4e0a\u6240\u6709\u70b9\u90fd\u4f1a\u88ab\u5305\u542b\u8fdb\u4e00\u4e2a\u7b80\u5355\u73af\u3002\n\n\u90a3\u4e48\u9898\u76ee\u53d8\u4e3a\uff1a\u6709 $m$ \u6761\u8def\u5f84\uff0c\u4f60\u8981\u9009\u62e9\u5176\u4e2d\u67d0\u4e9b\u8def\u5f84\u4f7f\u5f97\u6bcf\u4e2a\u70b9**\u6700\u591a\u88ab\u4e00\u6761\u8def\u5f84\u8986\u76d6**\u3002\u95ee\u9009\u62e9\u7684\u8def\u5f84\u6743\u503c\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e00\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u6811\u5f62 $dp$\u3002\u8bb0 $dp_u$ \u4e3a\uff1a\u9009\u62e9\u4e00\u4e9b\u8def\u5f84\uff0c\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u90fd\u5728 $u$ \u7684\u5b50\u6811\u5185\uff0c\u5e76\u4e14\u8def\u5f84\u4e24\u4e24\u4e0d\u76f8\u4ea4\uff0c\u8fd9\u4e9b\u8def\u5f84\u6743\u503c\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002\n\n\u8f6c\u79fb\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. $u$ \u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u90a3\u4e48 $dp_u=\\sum\\limits_{fa_v=u}dp_v$\n\n2. $u$ \u88ab\u8986\u76d6\u3002\u90a3\u4e48\u663e\u7136\u5b83\u53ea\u80fd\u88ab $LCA=u$ \u7684\u8def\u5f84\u8986\u76d6\uff08\u56e0\u4e3a\u6839\u636e\u4e4b\u524d\u7684\u5b9a\u4e49\uff0c\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u90fd\u5fc5\u987b\u5728 $u$ \u7684\u5b50\u6811\u5185\uff09\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u662f $u$ \u7684\u5b50\u6811\u6316\u6389\u8fd9\u6761\u8def\u5f84\u540e\u5269\u4f59\u90e8\u5206\u7684\u7b54\u6848+\u8fd9\u6761\u8def\u5f84\u7684\u6743\u503c\u3002\n\n\u662f\u4e0d\u662f\u542c\u8d77\u6765\u6709\u4e9b\u62bd\u8c61\uff1f\u4e0d\u59a8\u753b\u4e2a\u56fe\u7406\u89e3\u770b\uff1a\n\n\u5047\u8bbe\u6709\u5982\u4e0b\u56fe\u7684\u6811\uff0c\u4f60\u9009\u62e9\u4e86\u7531\u6a59\u8272\u8fb9\u7ec4\u6210\u7684\u8def\u5f84\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/oy8h4jyi.png)\n\n\u6211\u4eec\u628a\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u5168\u90e8\u53bb\u6389\u770b\u770b\u5269\u4f59\u90e8\u5206\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9rtve1gi.png)\n\n~~\u51ed\u76f4\u89c9~~\uff0c\u8fd9\u90e8\u5206\u7684\u8d21\u732e\u4e3a \n\n$dp[4]+dp[5]+dp[6]+dp[7]+dp[10]+dp[13]+dp[16]+dp[17]+dp[19]+dp[21]+dp[24]$\n\n\u53d1\u73b0\u4e86\u4ec0\u4e48\u4e86\u5417\uff1f\n\n\u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u9879\u6570\u8fd9\u4e48\u591a\uff0c\u6211\u5565\u4e5f\u6ca1\u53d1\u73b0\u3002\n\n\u90a3\u6211\u4eec\u5c31\u628a\u5220\u6389\u7684\u70b9\u8865\u5168\u540e\u770b\u770b\u5457\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vjit01el.png)\n\n\u901a\u8fc7\u89c2\u5bdf\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\n\n- $4,5$ \u662f $3$ \u7684\u513f\u5b50\n- $6,7$ \u662f $2$ \u9664\u4e86 $3$ \u4e4b\u5916\u7684\u513f\u5b50\n- $10,13$ \u662f $1$ \u9664\u4e86 $2,15$ \u4e4b\u5916\u7684\u513f\u5b50\n- $16,17$ \u662f $15$ \u9664\u4e86 $18$ \u4e4b\u5916\u7684\u513f\u5b50\n- $19$ \u662f $18$ \u9664\u4e86 $20$ \u4e4b\u5916\u7684\u513f\u5b50\n- $21,24$ \u662f $20$ \u7684\u513f\u5b50\u3002\n\n\u6211\u4eec\u8bb0 $p_1 \\to p_2 \\to \\dots \\to p_k$ \u4e3a\u6211\u4eec\u9009\u62e9\u7684\u8def\u5f84\uff0c\u5176\u4e2d $p_j=i$\uff0c$p_0=p_{k+1}=0$\uff0c\u90a3\u4e48\u8d21\u732e\u4e3a\uff1a\n\n$$\\sum\\limits_{i=1}^j\\sum\\limits_{fa_v=p_i}dp_v \\times [v \\neq p_{i-1}]+\\sum\\limits_{fa_v=u}dp_v \\times [v \\neq p_{i-1} \\operatorname{and} v \\neq p_{i+1}]+\\sum\\limits_{i=j+1}^k\\sum\\limits_{fa_v=p_i}dp_v \\times [v \\neq p_{i+1}]+w$$\n\n\u66b4\u529b\u663e\u7136\u662f $n^2$ \u7684\uff0c\u8003\u8651\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\u3002\n\n\u8bb0 $g_x=\\sum\\limits_{fa_y=x}dp_y-dp_x$\uff0c\u90a3\u4e48\u4e0a\u5f0f\u5b50\u7b49\u4ef7\u4e8e\n\n$$\\sum\\limits_{i=1}^{j-1}g_{p_i}+\\sum\\limits_{fa_v=u}dp_v+\\sum\\limits_{i=j+1}^kg_{p_i}+w$$\n\n\u7528\u6811\u94fe\u5256\u5206\u968f\u4fbf\u7ef4\u62a4\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\n\n```cpp\n/*\nContest: -\nProblem: Codeforces 856D\nAuthor: tzc_wk\nTime: 2020.8.20\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi\t\t\tfirst\n#define se\t\t\tsecond\n#define pb\t\t\tpush_back\n#define fz(i,a,b)\tfor(int i=a;i<=b;i++)\n#define fd(i,a,b)\tfor(int i=a;i>=b;i--)\n#define foreach(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define all(a)\t\ta.begin(),a.end()\n#define fill0(a)\tmemset(a,0,sizeof(a))\n#define fill1(a)\tmemset(a,-1,sizeof(a))\n#define fillbig(a)\tmemset(a,0x3f,sizeof(a))\n#define y1\t\t\ty1010101010101\n#define y0\t\t\ty0101010101010\ntypedef pair<int,int> pii;\ntypedef long long ll;\ninline int read(){\n\tint x=0,neg=1;char c=getchar();\n\twhile(!isdigit(c)){\n\t\tif(c=='-') neg=-1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)) x=x*10+c-'0',c=getchar();\n\treturn x*neg;\n}\nint n=read(),m=read();\nint head[200005],to[400005],nxt[400005],ecnt=0;\ninline void adde(int u,int v){\n\tto[++ecnt]=v;nxt[ecnt]=head[u];head[u]=ecnt;\n}\nint fa[200005],top[200005],dep[200005],siz[200005],wson[200005],dfn[200005],nd[200005],tim=0;\ninline void dfs1(int x){\n\tsiz[x]=1;\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tint y=to[i];dep[y]=dep[x]+1;dfs1(y);siz[x]+=siz[y];\n\t\tif(siz[y]>siz[wson[x]]) wson[x]=y;\n\t}\n}\ninline void dfs2(int x,int tp){\n\ttop[x]=tp;dfn[x]=++tim;nd[tim]=x;\n\tif(wson[x]) dfs2(wson[x],tp);\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tint y=to[i];if(y!=wson[x]) dfs2(y,y);\n\t}\n}\ninline int getlca(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y]) swap(x,y);\n\treturn y;\n}\nstruct path{\n\tint u,v,w;\n\tpath(){/*nothing*/}\n\tpath(int _u,int _v,int _w){u=_u;v=_v;w=_w;}\n}; vector<path> t[200005];\nstruct node{\n\tint l,r,val;\n} s[200005<<2];\ninline void build(int k,int l,int r){\n\ts[k].l=l;s[k].r=r;\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tbuild(k<<1,l,mid);\n\tbuild(k<<1|1,mid+1,r);\n}\ninline void modify(int k,int ind,int val){\n\tif(s[k].l==s[k].r){s[k].val+=val;return;}\n\tint mid=(s[k].l+s[k].r)>>1;\n\tif(ind<=mid) modify(k<<1,ind,val);\n\telse modify(k<<1|1,ind,val);\n\ts[k].val=s[k<<1].val+s[k<<1|1].val;\n}\ninline int query(int k,int l,int r){\n\tif(l<=s[k].l&&s[k].r<=r) return s[k].val;\n\tint mid=(s[k].l+s[k].r)>>1;\n\tif(r<=mid) return query(k<<1,l,r);\n\telse if(l>mid) return query(k<<1|1,l,r);\n\telse return query(k<<1,l,mid)+query(k<<1|1,mid+1,r);\n}\ninline int calc(int u,int v){\n\tint sum=0;\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tsum+=query(1,dfn[top[u]],dfn[u]);u=fa[top[u]];\n\t}\n\tif(dep[u]<dep[v]) swap(u,v);\n\tsum+=query(1,dfn[v],dfn[u]);return sum;\n}\nint dp[200005];\ninline void dfs3(int x){\n\tint sum=0;\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tdfs3(to[i]);sum+=dp[to[i]];\n\t}\n\tdp[x]=sum;\n\tforeach(it,t[x]) dp[x]=max(dp[x],calc(it->u,it->v)+it->w+sum);\n\tmodify(1,dfn[x],sum-dp[x]);\n}\nint main(){\n\tfor(int i=2;i<=n;i++){fa[i]=read();adde(fa[i],i);}\n\tdfs1(1);dfs2(1,1);build(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tint u=read(),v=read(),w=read();\n\t\tt[getlca(u,v)].pb(path(u,v,w));\n\t}\n\tdfs3(1);printf(\"%d\\n\",dp[1]);\n\treturn 0;\n}\n```",
        "postTime": 1597928572,
        "uid": 123543,
        "name": "ET2006",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF856D \u3010Masha and Cactus\u3011"
    }
]