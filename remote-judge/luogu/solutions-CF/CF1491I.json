[
    {
        "content": "\u8fd9\u91cc\u662f\u672c\u9898\u7684\u5b98\u65b9\u9898\u89e3\uff0c\u8fd9\u9898\u6bd4\u8f83\u590d\u6742\uff0c\u8fd8\u662f\u6309\u7167 oolimry \u7684\u9898\u89e3\u5206\u6210 4 parts \u53d9\u8ff0\uff0c\u589e\u52a0\u4e86\u6211\u5728\u9a8c\u9898\u7684\u65f6\u5019\u4e0d\u540c\u7684\u60f3\u6cd5\u3002\n\n\u53e6\u5916\u9898\u9762\u4e2d\u6709\u4e00\u53e5\u5f69\u86cb:\n\n> Zookeeper is just a duck.\n\n\u6307\u7684\u662f oolimry \u539f\u6765\u7684 id \u662f Zookeeper \u4f46\u662f\u73b0\u5728\u4ed6\u662f\u53ea\u9e2d\u5b50\u4e86\uff08\n\n\u5982\u679c\u60a8\u60f3\u505a\u8fd9\u9898\u7684\u8bdd\uff0c\u8bb0\u4f4f errorgon \u8bf4\u7684\u8bdd:\n\n> It's a waste of time.\n\n## part1\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u628a\u9898\u610f\u4e2d\u7684\u961f\u5217\u8f6c\u6362\u6210\u4e00\u4e2a\u5706\uff0c\u628a\u738b\u4f4d\u8fdb\u884c\u7ee7\u627f\u3002\n\n\u5047\u8bbe\u6211\u4eec\u8ba4\u4e3a\u738b\u4f4d\u662f\u987a\u65f6\u9488\u65cb\u8f6c\u7684\uff0c\u90a3\u4e48\u738b\u4f4d\u6240\u5728\u7684\u4eba\u4f1a\u548c\u987a\u65f6\u9488\u7684\u4e0b\u4e00\u4f4d\u8fdb\u884c\u51b3\u6597\u3002\n\n\u6211\u4eec\u5c06 \u987a\u65f6\u9488\u7684\u4e0b\u4e00\u4f4d \u79f0\u4f5c \u987a\u6b21\u4f4d\uff0c\u540c\u7406\u6211\u4eec\u5b9a\u4e49 \u9006\u6b21\u4f4d \u662f \u9006\u65f6\u9488\u7684\u4e0b\u4e00\u4f4d\u3002\n\n\u8fd9\u662f\u6709 2 \u79cd\u60c5\u51b5:\n\n1. \u738b \u6253\u8d25\u4e86 \u987a\u6b21\u4f4d\uff0c\u90a3\u4e48\u4ea4\u6362 \u738b \u548c \u987a\u6b21\u4f4d\u3002\n2. \u738b \u8d25\u4e86\uff0c\u5219\u4e0d\u8fdb\u884c\u53d8\u5316\u3002\n\n\u65e0\u8bba\u662f\u54ea\u79cd\u60c5\u51b5 \u738b\u4f4d \u90fd\u4f1a\u5411 \u987a\u6b21\u4f4d \u79fb\u52a8\u3002\n\n\u8fd9\u91cc\u653e\u4e00\u5f20\u56fe\u65b9\u4fbf\u7406\u89e3\uff0c\u5176\u4e2d $0$ \u5148\u662f\u6253\u8d25\u4e86 $1$ \u7136\u540e\u8f93\u7ed9\u4e86 $2$:\n\n![](https://codeforces.ml/predownloaded/26/a1/26a1652b93536d168f4a5cb26498d8b80899a03c.png)\n\n\u5728\u8fd9\u6837\u7684\u9898\u610f\u4e0b \u628a \u738b\u4f4d \u878d\u5165\u4e86 \u6218\u6597\u987a\u5e8f \u4e2d \u65b9\u4fbf\u6211\u4eec\u8fdb\u884c\u540e\u7eed\u5904\u7406\u4ee5\u53ca\u6027\u8d28\u7684\u53d1\u73b0\u3002\n\n## part2\n\n\u5982\u679c\u4e00\u4e2a\u52a8\u7269 $i$ \u7684 $b$ \u5927\u4e8e \u987a\u6b21\u4f4d\u7684 $a$ \u90a3\u4e48 \u6211\u4eec\u5c06 \u987a\u6b21\u4f4d \u6807\u4e3a \u7ea2\u8272\u3002\n\n\u6362\u53e5\u8bdd\u5c31\u662f \u5f53\u4e00\u4e2a\u4f4d\u7f6e\u662f \u7ea2\u8272 \u65f6 \u53ef\u4ee5\u5e2e\u52a9 \u4ed6\u7684\u9006\u6b21\u4f4d \u4ece\u7b2c\u4e00\u4efb\u671f\u5230\u7b2c\u4e8c\u4efb\u671f\u8fc7\u6e21\u3002\n\n\u63a5\u4e0b\u6765\u6211\u8981\u8bc1\u660e\u7684\u662f:\u5728 **part1** \u6240\u8f6c\u5316\u7684\u9898\u610f\u4e2d \u7ea2\u8272 \u65e0\u6cd5\u88ab\u5236\u9020\u51fa\u6765\u3002\n\n>  \u6211\u4eec\u5047\u8bbe $X,Y,Z$ \u7684\u76f8\u90bb\u987a\u5e8f\u4e2d $X,Z$ \u662f\u4e00\u4e2a\u975e\u7ea2\u8272\u4f4d\u7f6e $Y$ \u662f\u7ea2\u8272\u4f4d\u7f6e \u6211\u4eec\u8ba9 $X$ \u8fdb\u5165\u7b2c\u4e00\u4efb\u671f \u7531\u4e8e\u6211\u4eec\u7ade\u9009\u4e0d\u80fd\u7ed3\u675f ~~\u56e0\u4e3a\u7ed3\u675f\u4e86\u8ba8\u8bba\u8fd9\u4e2a\u6ca1\u6709\u610f\u4e49~~ \u6240\u4ee5\u5047\u8bbe $C_X<A_Z$\n>\n> \u6ce8\u610f\u5230\u4fdd\u8bc1\u4e86 $A_i>B_i,C_i>B_i$\n>\n> \u8003\u8651 $B_X>A_Y\\to A_X>B_Y$ \u5728\u6253\u8d25\u4e86 $Y$ \u4e4b\u540e $X$ \u5e76\u4e0d\u80fd\u6210\u4e3a \u7ea2\u8272\n>\n> \u8003\u8651 $C_X<A_Z\\to B_X<A_Z$ \u6240\u4ee5 $Z$ \u4e5f\u4e0d\u80fd\u6210\u4e3a\u7ea2\u8272\n\n\u6240\u4ee5 \u7ea2\u8272 \u65e0\u6cd5\u88ab\u5236\u9020\u51fa\uff0c\u4f46\u663e\u7136 $Y$ \u53ef\u4ee5\u5931\u53bb\u7ea2\u8272\u3002\n\n\u6240\u4ee5\u5728\u9009\u4e3e\u7684\u8fc7\u7a0b\u4e2d \u6574\u4f53\u7684\u7ea2\u8272\u6570\u91cf\u662f\u5355\u8c03\u4e0d\u589e\u7684\u3002\u8fd9\u662f\u8fd9\u9898\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\u3002\n\n## part3\n\n\u8fd9\u90e8\u5206\u662f\u8fd9\u9898\u6bd4\u8f83\u96be\u7684\u5730\u65b9\u3002\n\n\u6211\u4eec\u6ce8\u610f\u5230 \u7ea2\u8272\u4f4d\u7f6e \u7684\u6d88\u5931\u7684\u6b21\u6570\u6709 $\\mathcal O(n)$ \u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5feb\u901f\u8ba1\u7b97\u4e24\u6b21\u6d88\u5931\u4e4b\u95f4\u7684\u8f6e\u6570\u3002\n\n\u8ba9\u6211\u4eec\u518d\u5173\u6ce8\u4e00\u4e9b\u6027\u8d28:\n\n> \u975e\u7ea2\u8272\u4f4d\u7f6e\u4e4b\u95f4\u7684\u987a\u5e8f\u4e0d\u4f1a\u53d8\u5316\n\n\u90a3\u6211\u4eec\u628a\u7ea2\u8272\u70b9\u62bd\u51fa\u6765\uff0c\u5c06\u5176\u4ed6\u70b9\u770b\u505a\u4e0d\u52a8\uff0c\u7ea2\u8272\u70b9\u5f00\u59cb\u8fdb\u884c\u5411 \u9006\u6b21\u4f4d \u79fb\u52a8\u3002\n\n\u8fd8\u662f\u7ed9\u51fa\u56fe\u6765\u5e2e\u52a9\u7406\u89e3:\n\n![](https://codeforces.ml/predownloaded/a4/62/a462b15840891649c8e53971192a71e04ea7dbc4.png)\n\n\u8fd9\u662f\u597d\u7684\uff0c\u51cf\u5c11\u4e86\u6211\u4eec\u5904\u7406\u79fb\u52a8\u7684\u8d1f\u62c5 \u8003\u8651\u6700\u591a $n-1$ \u6b65\uff0c\u6bcf\u4e2a \u7ea2\u8272\u4f4d\u7f6e\u90fd\u4f1a\u5411 \u9006\u6b21\u4f4d \u79fb\u52a8\u4e00\u683c\u3002\n\n\u6211\u4eec\u5c06 \u975e\u7ea2\u8272 \u7684\u4f4d\u7f6e \u518d\u5206\u6210 \u7eff\u8272 \u548c \u84dd\u8272 \u5206\u522b \u6807\u6ce8\u80fd\u7ed3\u675f\u7ade\u9009 \u4e0e \u4e0d\u80fd\u7ed3\u675f\u7ade\u9009\u3002\n\n\u84dd\u8272\u7684\u5b9a\u4e49\u662f: \u8d62\u4e86\u524d\u4e00\u4e2a \u7ea2\u8272 \u4f46\u8f93\u7ed9\u4e86\u540e\u4e00\u4e2a\u52a8\u7269\u3002\n\n\u7eff\u8272\u7684\u5b9a\u4e49\u662f: \u8d62\u4e86\u524d\u4e00\u4e2a \u7ea2\u8272 \u4e5f\u8d62\u4e86\u540e\u4e00\u4e2a\u52a8\u7269\u3002\n\n\u6211\u4eec\u518d\u8003\u8651\u4e00\u4e0b\u51e0\u4e2a\u5173\u952e\u7684\u4f4d\u7f6e:\n\n> 1. \u7ea2\u8272\u6d88\u5931\u5f53\u4e14\u4ec5\u5f53 $B_{x} < A_r$ \u800c $x$ \u53ef\u4ee5\u662f \u7eff\u6216\u84dd\u3002\n> 2. \u7ade\u9009\u7ed3\u675f\u53ea\u53ef\u80fd\u5f53 $B_x>A_r$ \u800c $x$ \u5fc5\u987b\u662f \u7eff\u8272\u3002\n\n\u6211\u4eec\u60f3\u8981\u627e\u5230\u79fb\u52a8\u6b21\u6570\u7684\u8bdd\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4e8c\u5206 \u4ece\u7531\u975e\u7ea2\u8272\u4f4d\u7f6e\u6784\u6210\u7684 \u4f20\u9001\u5e26 \u4e2d\u627e\u5230\u4e0a\u8ff0\u4e24\u4e2a\u5173\u952e\u4f4d\u7f6e\u4e2d\u6700\u65e9\u53d1\u751f\u7684\u8fdb\u884c\u8f6c\u79fb\u3002\n\n\u6700\u540e\u6211\u4eec\u6709 $n - 1$ \u6b65\uff0c\u5012\u7740\u68c0\u67e5\u4e00\u904d\u5c31\u53ef\u4ee5\u4e86\uff0c\u5982\u679c\u4e0d\u884c\u5c31\u8f93\u51fa $-1\\ -1$\u3002\n\n\u4f46\u662f\u8fd9\u91cc\u5e76\u6ca1\u6709\u8003\u8651\u4e00\u4e9b\u975e\u5e38\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u4e0d\u5b58\u5728\u7ea2\u8272\u4f4d\u7f6e \u6216\u8005\u6709\u7ea2\u8272\u76f8\u90bb \u7b49\u3002\n\n\u8fd9\u4e9b\u7279\u6b8a\u60c5\u51b5\u90fd\u53ef\u4ee5\u5728 $2n$ \u6b65\u5185\u7b97\u51fa\u7ed3\u679c\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u5f00\u59cb\u53ef\u4ee5\u66b4\u529b\u8dd1\u8fd9\u90e8\u5206\u3002\n\n## part4\n\n\u8003\u8651\u590d\u6742\u5ea6 \u6211\u4eec\u4e00\u5171\u4f1a\u6709 $\\mathcal O(n)$ \u6b21\u4e8b\u4ef6\uff0c\u800c\u6bcf\u6b21\u4e8b\u4ef6\u8981 $\\mathcal O(n\\log n)$ \u7684\u65f6\u95f4\u5bfb\u627e\u4e0b\u4e00\u4e2a\u3002\n\n\u603b\u590d\u6742\u5ea6: $\\mathcal O(n^2\\log n)$\n\n\u8fd9\u9898\u4ee3\u7801\u548c \\*\\*\\*\\* \u4e00\u6837\uff0c\u7ed9\u51fa\u4e00\u4efd\u5c1a\u6709\u53ef\u8bfb\u6027\u7684\u4ee3\u7801\u65b9\u4fbf\u8c03\u8bd5:\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int RED = 0, BLUE = 1, GREEN = 2;\nconst long long inf = 1e16;\ntypedef pair<long long, long long> ii;\ntypedef pair<long long, ii> iii;\n\nlong long n;\nstruct animal{ int a, b, c, id, pos, colour, redHere; };\nvector<animal> belt;\nvector<animal> arr;\n\nvector<iii> s; ///strictly increasing stack\nvector<ii> reds;\nvoid insert(long long b, long long beltPos, long long pos){\n\twhile(!s.empty() && s.back().first >= b) s.pop_back();\n\ts.push_back(iii(b,ii(beltPos, pos)));\n}\n\nlong long totalMoves = 0;\n\nvoid brute(){\n\tdeque<animal> q;\n\tanimal w = arr[0];\n\t\n\tfor(int i = 1;i < n;i++){\n\t\tq.push_back(arr[i]);\n\t}\n\n\tlong long count = 1;\n\tfor(int x = 1;;x++){\n\t\tif(x > 2*n){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(count == 3){\n\t\t\tcout << w.id << \" \" << x << \"\\n\"; // << \"\\n\" << (int)((clock() - start));\n\t\t\texit(0);\n\t\t}\n\t\t\t\n\t\tif(count == 1){\n\t\t\tif(w.b > q.front().a){\n\t\t\t\tanimal y = q.front();\n\t\t\t\tq.push_back(y);\n\t\t\t\tq.pop_front();\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tq.push_back(w);\n\t\t\t\tw = q.front();\n\t\t\t\tq.pop_front();\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(w.c > q.front().a){\n\t\t\t\tanimal y = q.front();\n\t\t\t\tq.push_back(y);\n\t\t\t\tq.pop_front();\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tq.push_back(w);\n\t\t\t\tw = q.front();\n\t\t\t\tq.pop_front();\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n\t\n\tcin >> n;\n\tfor(int i = 0;i < n;i++){\n\t\tint a, b, c; cin >> a >> b >> c;\n\t\tassert(a > b and b < c);\n\t\tarr.push_back({a,b,c,i,-1,1,-1});\n\t}\n\t\n\tif(arr[0].a > arr[1].a) swap(arr[0],arr[1]); ///settle first game\n\tarr.push_back(arr[0]); arr.erase(arr.begin());\n\t\n\tbrute();\n\t\n\t///deciding which are RED\n\tfor(int i = 1;i < n;i++){\n\t\tif(arr[i-1].b > arr[i].a){\n\t\t\tarr[i].colour = RED;\n\t\t}\n\t}\n\t\n\t///for non-RED, decide if it's BLUE or GREEN\n\tfor(int i = 0;i < n;i++){\n\t\tarr[i].pos = i;\n\t\t\n\t\tif(arr[i].colour == RED) continue;\n\t\tint nxt = i+1; if(nxt == n) nxt = 0;\n\t\tif(arr[nxt].colour == RED) nxt++; if(nxt == n) nxt = 0;\n\t\t\n\t\tif(arr[i].c > arr[nxt].a) arr[i].colour = GREEN;\n\t\telse arr[i].colour = BLUE;\n\t}\n\t\n\t///get ready the belt\n\tarr.push_back(arr[0]);\n\tfor(int i = 0;i < n;i++){\n\t\tif(arr[i].colour != RED){\n\t\t\tif(arr[i+1].colour == RED){\n\t\t\t\tarr[i].redHere = arr[i+1].pos;\n\t\t\t}\n\t\t\tbelt.push_back(arr[i]);\n\t\t}\n\t}\n\t\n\twhile(true){\n\t\ts.clear(); reds.clear();\n\t\t\n\t\t///Account for cyclic nature, so every element is inserted once, then later inserted again\n\t\tfor(int i = 0;i < (int) belt.size();i++){\n\t\t\tanimal A = belt[i];\n\t\t\tif(A.colour == BLUE) insert(A.b, A.pos, i);\n\t\t\telse insert(-inf, A.pos, i); ///GREEN trigger events regardless of the value of a\n\t\t}\n\t\t\t\t\n\t\tlong long minMoves = inf;\n\t\tfor(int i = 0;i < (int) belt.size();i++){\n\t\t\tanimal A = belt[i];\n\t\t\tif(A.colour == BLUE) insert(A.b, A.pos, i);\n\t\t\telse insert(-inf, A.pos, i); ///GREEN trigger events regardless of the value of a\n\t\t\t\n\t\t\t///find the RED at that position, if any\n\t\t\tint red = A.redHere; if(red == -1) continue;\n\t\t\treds.push_back(ii(red, i));\n\t\t\t\n\t\t\t///find the earliest event that triggers this RED (rightmost non-Red with nonRED.a < RED.b or rightmost GREEN)\n\t\t\tauto early = lower_bound(s.begin(), s.end(), iii(arr[red].a, ii(-1,-1)));\n\t\t\tif(early == s.begin()) continue; ///no event in this case\n\t\t\tearly--;\n\t\t\t\n\t\t\t///Number of rotations before event (rotation = N-1 turns)\n\t\t\tlong long distance = i - (early->second).second;\n\t\t\tif(distance < 0) distance += (belt.size());\n\t\t\tminMoves = min(distance, minMoves); ///find the minimum number of rotations\n\t\t}\n\t\t\n\t\t///No event can occur, answer last infiinite\n\t\tif(minMoves == inf){\n\t\t\tcout << \"-1 -1\";\n\t\t\treturn 0;\n\t\t}\n\t\telse if(minMoves != 0){ ///Move the reds CCW along the belt\n\t\t\ttotalMoves += minMoves * (n-1);\n\t\t\tfor(ii R : reds) belt[R.second].redHere = -1;\n\t\t\tfor(ii R : reds){\n\t\t\t\tint pos = R.second;\n\t\t\t\tpos -= minMoves; if(pos < 0) pos += belt.size();\n\t\t\t\tbelt[pos].redHere = R.first;\n\t\t\t}\n\t\t}\n\t\t\n\t\tii ans = ii(inf, inf);\n\t\t\n\t\t///Updating the belt\n\t\tfor(int i = 0;i < (int) belt.size();i++){\n\t\t\tif(belt[i].redHere == -1) continue;\n\t\t\tanimal R = arr[belt[i].redHere];\n\t\t\tif(belt[i].b < R.a){ ///BLUE type event occured\n\t\t\t\tbelt[i].redHere = -1;\t\t\n\t\t\t\tbelt.insert(belt.begin()+(i+1), R); ///inserting in middle of vector\n\t\t\t\t\n\t\t\t\t///updating the colours of the surrounding non-REDs\n\t\t\t\tif(belt[i].c > R.a) belt[i].colour = GREEN;\n\t\t\t\telse belt[i].colour = BLUE;\n\t\t\t\t\n\t\t\t\tint nxt = i+2; if(nxt == (int) belt.size()) nxt = 0;\n\t\t\t\tif(belt[i+1].c > belt[nxt].a) belt[i+1].colour = GREEN;\n\t\t\t\telse belt[i+1].colour = BLUE;\n\t\t\t}\n\t\t\telse if(belt[i].colour == GREEN){ ///GREEN type event occured, game ends\n\t\t\t\tans = min(ans, ii(totalMoves + R.pos + 2, belt[i].id));\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(ans.first != inf){\n\t\t\tcout << ans.second << \" \" << ans.first;\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n```\n\n",
        "postTime": 1614666440,
        "uid": 68030,
        "name": "serverkiller",
        "ccfLevel": 0,
        "title": "CF1491I Ruler Of The Zoo"
    }
]