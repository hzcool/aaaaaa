[
    {
        "content": "\n\u849f\u84bb\u535a\u5ba2\uff1a[QwQ](https://www.cnblogs.com/GoldenPotato/p/9814348.html)\n\n------------\n\n#### \u9898\u76ee\u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u9897\u6709\u6839\u6811\uff0c\u70b9\u6709\u6743\u503c\uff0c\u95ee\u4f60\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u8ddd\u79bb\u5176\u4e0d\u8d85\u8fc7k\u7684\u70b9\u7684\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002\uff08\u8fb9\u6743\u5747\u4e3a1\uff0c\u5f3a\u5236\u5728\u7ebf\uff09\n------------\n## Solution\n\n\n\u8fd9\u9898\u5f88\u6709\u610f\u601d\u3002\n\n .\n\n\u6211\u4eec\u4e00\u822c\u770b\u5230\u8fd9\u79cd\u8ddd\u79bb\u4e0d\u8d85\u8fc7k\u7684\u9898\u76ee\uff0c\u7b2c\u4e00\u53cd\u5e94\u4e00\u822c\u662f\u5efa\u4ee5\u6df1\u5ea6\u4e3a\u4e0b\u6807\uff0c\u4ee5dfs\u5e8f\u4e3a\u65f6\u95f4\u8f74\u7684\u7684\u4e3b\u5e2d\u6811\u3002\n\n\u5982\u679c\u70b9\u6743\u4e0d\u91cd\u590d\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6743\u503c\u4e3b\u5e2d\u6811+\u6811\u4e0a\u4e8c\u5206\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u5f88\u4e0d\u5e78\uff0c\u8fd9\u9898\u70b9\u6743\u6709\u91cd\u590d\u3002\n\n.\n\n\n\u6240\u4ee5\u8bf4\uff0c\u8fd9\u9898\u5999\u5728\u601d\u60f3\u7684\u8f6c\u6362\u3002\n\n\u8003\u8651**\u4ee5dfs\u5e8f\u4e3a\u4e0b\u6807\uff0c\u4ee5\u6df1\u5ea6\u4e3a\u65f6\u95f4\u8f74\u5efa\u4e00\u9897\u4e3b\u5e2d\u6811**\u3002\n\n\u6211\u4eec\u53ef\u4ee5bfs\uff0c\u6309\u6df1\u5ea6\u4e00\u5c42\u5c42\u5730\u628a\u70b9\u52a0\u8fdb\u53bb\u3002\n\n\u8fd9\u6837\u5b50\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u67e5\u8be2\u5bf9\u5e94\u6df1\u5ea6\u4e4b\u5185\u7684\u8fd9\u9897\u5b50\u6811\u7684\u6700\u5c0f\u6743\u503c\u5566\u3002\n\n. \n\n\u5c31\u9171\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u9898\u5207\u6389\u5566\u30fd(\uffe3\u25bd\uffe3)\uff89\n\n\n\n------------\n\n## Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int N=100000+1000;\nconst int M=30*N;\nint n,r,a[N];\nvector <int> e[N];\nstruct SegmentTree\n{\n    static const int inf=0x3f3f3f3f;\n    #define mid ((now_l+now_r)>>1)\n    int MIN[M],son[M][2],cnt;\n    inline void update(int now)\n    {\n        MIN[now]=min(MIN[son[now][0]],MIN[son[now][1]]);    \n    }\n    void Build(int now,int now_l,int now_r)\n    {\n        if(now_l==now_r)\n        {\n            MIN[now]=inf;\n            return;    \n        }\n        Build(son[now][0]=++cnt,now_l,mid);\n        Build(son[now][1]=++cnt,mid+1,now_r);\n        update(now);\n    }\n    void Change(int x,int num,int now,int pre,int now_l,int now_r)\n    {\n        if(now_l==now_r)\n        {\n            MIN[now]=num;\n            return;\n        }\n        if(x<=mid) son[now][1]=son[pre][1],Change(x,num,son[now][0]=++cnt,son[pre][0],now_l,mid);\n        else son[now][0]=son[pre][0],Change(x,num,son[now][1]=++cnt,son[pre][1],mid+1,now_r);\n        update(now);\n    }\n    int Query(int L,int R,int now,int now_l,int now_r)\n    {\n        if(now_l>=L and now_r<=R)\n            return MIN[now];\n        int ans=inf;\n        if(L<=mid) ans=min(ans,Query(L,R,son[now][0],now_l,mid));\n        if(R>mid) ans=min(ans,Query(L,R,son[now][1],mid+1,now_r));\n        return ans;\n    }\n    void Print(int now,int now_l,int now_r)\n    {\n        cerr<<\"no.\"<<now<<\" now_l&r:\"<<now_l<<\" \"<<now_r<<\" sonl&r\"<<son[now][0]<<\" \"<<son[now][1]<<\" MIN:\"<<MIN[now]<<endl;\n        if(now_l!=now_r)\n        {\n            Print(son[now][0],now_l,mid);\n            Print(son[now][1],mid+1,now_r);    \n        }\n    }    \n    #undef mid\n}sgt;\nint dfn[N],depth[N],dfn_to,size[N],depth_MAX;\nvoid dfs(int now)\n{\n    depth_MAX=max(depth_MAX,depth[now]);\n    dfn[now]=++dfn_to;\n    size[now]=1;\n    for(int i=0;i<int(e[now].size());i++)\n        if(dfn[e[now][i]]==0)\n        {\n            depth[e[now][i]]=depth[now]+1;\n            dfs(e[now][i]);\n            size[now]+=size[e[now][i]];    \n        }\n}\nint dl[N],front,tail,root[N];\nvoid bfs()\n{\n    dl[tail++]=r;\n    int depth_now=0;\n    while(tail>front)\n    {\n        int now=dl[front];\n        int temp=root[depth_now];\n        if(depth[now]!=depth_now)\n        {\n            depth_now=depth[now];\n            temp=root[depth_now-1];\n        }\n        root[depth_now]=++sgt.cnt;\n        sgt.Change(dfn[now],a[now],root[depth_now],temp,1,n);\n        //sgt.Print(root[depth_now],1,n);\n        //cerr<<endl;\n        for(int i=0;i<int(e[now].size());i++)\n            if(depth[e[now][i]]>depth[now])\n                dl[tail++]=e[now][i];\n        front++;    \n    }\n}\nint main()\n{\n    n=read(),r=read();\n    for(int i=1;i<=n;i++)\n        a[i]=read();\n    for(int i=1;i<n;i++)\n    {\n        int s=read(),t=read();\n        e[s].push_back(t);\n        e[t].push_back(s);\n    }\n    \n    depth[r]=1;\n    dfs(r);\n    sgt.Build(0,1,n);\n    //sgt.Print(0,1,n);\n    //cerr<<endl;\n    bfs();\n    \n    int m=read(),lans=0;\n    for(int i=1;i<=m;i++)\n    {\n        int x=read(),K=read();\n        x=((x+lans)%n)+1,K=(K+lans)%n;\n        int temp=min(depth[x]+K,depth_MAX);\n        lans=sgt.Query(dfn[x],dfn[x]+size[x]-1,root[temp],1,n);\n        printf(\"%d\\n\",lans);    \n    }\n    return 0;\n}\n```",
        "postTime": 1539907476,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF893F \u3010Subtree Minimum Query\u3011"
    },
    {
        "content": "## \u9898\u89e3 CF893F \u3010Subtree Minimum Query\u3011\n\n[luogu \u9898\u9762](https://www.luogu.com.cn/problem/CF893F)\n\n[Codeforces \u9898\u9762](https://codeforces.com/contest/893/problem/F)\n\n\u4e00\u770b\u5230\u8fd9\u79cd\u6df1\u5ea6\u5dee\u4e0d\u8d85\u8fc7 $k$ \u7684\u9898\uff0c\u5341\u6709\u516b\u4e5d\u5c31\u662f\u6309\u6df1\u5ea6\u5efa\u4e3b\u5e2d\u6811\uff0c\u6b64\u9898\u4e5f\u4e0d\u4f8b\u5916\u3002\n\n\u6211\u4eec\u628a\u6bcf\u4e2a\u70b9\u7684 dfs \u5e8f\u6c42\u51fa\u6765\uff0c\u5728\u6309\u7167\u6df1\u5ea6\u9012\u589e\u7684\u987a\u5e8f\u52a0\u5230\u4e3b\u5e2d\u6811\u4e2d\uff0c\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u67e5\u8be2\u5728 \u6811$(dep_x)$ \u5230 \u6811$(dep_x+k)$ \u4e2d\u4e0b\u6807\u5728 $[dfn_x,dfn_x+siz_x-1]$ \u4e2d\u70b9\u7684\u70b9\u6743\u6700\u5c0f\u503c\u5373\u53ef\u3002\u53c8\u56e0\u4e3a\u5728 $x$ \u4e0a\u65b9\uff0c\u6ca1\u6709\u70b9\u7684\u6df1\u5ea6\u5728 $[dep_x,dep_x+k]$ \u4e4b\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7b97 \u6811$(dep_x+k)$ \u5373\u53ef\uff0c\u8fde\u524d\u7f00\u7ebf\u6bb5\u6811\u76f8\u51cf\u90fd\u4e0d\u9700\u8981\u4e86\u3002\n\n\u6700\u540e\u4e00\u4e2a\u5c0f\u6ce8\u610f\u70b9\uff0c$dep_x+k$ \u6709\u53ef\u80fd\u5927\u4e8e $n$\uff0c\u6ce8\u610f\u5224\u65ad\u3002\n\n\u4e0b\u9762\u662f AC \u4ee3\u7801\u3002\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n#define mid (l+r>>1)\n\nconst int INF = 0x7f7f7f7f;\n\nint n,r,q,a[100005],ans;\nint ee,h[100005],nex[100005<<1],to[100005<<1];\nint cnt,dfn[100005],dep[100005],siz[100005];\nint p[100005];\nint root[100005];\nstruct hjtree{\n\tint l,r,mn;\n}t[100005<<6];\n\nvoid addedge(int x,int y)\n{\n\tnex[++ee] = h[x];\n\tto[ee] = y;\n\th[x] = ee;\n}\n\nvoid dfs(int x,int pre)\n{\n\tdep[x] = dep[pre]+1;\n\tdfn[x] = ++cnt;\n\tsiz[x] = 1;\n\tfor(int i=h[x];i;i=nex[i])\n\t\tif(to[i]!=pre)\n\t\t{\n\t\t\tdfs(to[i],x);\n\t\t\tsiz[x] += siz[to[i]]; \n\t\t}\n}\n\nbool cmp(int x,int y)\n{\n\treturn dep[x]<dep[y];\n}\n\nvoid build(int &o,int pre,int l,int r,int x,int v)\n{\n\to = ++cnt;\n\tt[o] = t[pre];\n\tif(l==x && r==x)\n\t{\n\t\tt[o].mn = v;\n\t\treturn;\n\t}\n\tif(x<=mid)\n\t\tbuild(t[o].l,t[pre].l,l,mid,x,v);\n\telse\n\t\tbuild(t[o].r,t[pre].r,mid+1,r,x,v);\n\tt[o].mn = min(t[t[o].l].mn,t[t[o].r].mn);\n}\n\nint query(int o,int l,int r,int ql,int qr)\n{\n\tif(l>=ql && r<=qr)\n\t\treturn t[o].mn;\n\tint res=INF;\n\tif(ql<=mid)\n\t\tres = min(res,query(t[o].l,l,mid,ql,qr));\n\tif(qr>mid)\n\t\tres = min(res,query(t[o].r,mid+1,r,ql,qr));\n\treturn res;\n}\n\nsigned main()\n{\n\tt->mn = INF;\n\tcin>>n>>r;\n\tfor(int i=1;i<=n;scanf(\"%lld\",a+i),i++);\n\tfor(int i=1,x,y;i<n&&scanf(\"%lld%lld\",&x,&y);i++)\n\t\taddedge(x,y), addedge(y,x);\n\tdfs(r,0);\n\tfor(int i=1;i<=n;i++)\n\t\tp[i] = i;\n\tsort(p+1,p+1+n,cmp);\n\tcnt = 0;\n\tfor(int i=1;i<=n;i++)\n\t\tbuild(root[dep[p[i]]],root[dep[p[i-1]]],1,n,dfn[p[i]],a[p[i]]);\n\tcin>>q;\n\twhile(q--)\n\t{\n\t\tint x,k;\n\t\tscanf(\"%lld%lld\",&x,&k);\n\t\tx = (x+ans)%n+1, k = (k+ans)%n;\n\t\tprintf(\"%lld\\n\",ans=query(root[min(dep[x]+k,dep[p[n]])],1,n,dfn[x],dfn[x]+siz[x]-1));\n\t}\n\t\n\treturn 0;\n}\n```\n\n\u795d\u5927\u5bb6 AC \u6109\u5feb\uff01",
        "postTime": 1609599840,
        "uid": 123298,
        "name": "kouylty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF893F \u3010Subtree Minimum Query\u3011"
    },
    {
        "content": "\u4e3b\u5e2d\u6811\u3002\n\n\u8bbe\u7ed9\u51fa\u7684\u8be2\u95ee\u4e3a$u,k$\uff0c\u5219\u67e5\u8be2\u7684\u662f$u$\u5b50\u6811\u4e2d\uff0c\u6df1\u5ea6\u5728$[dep_x,dep_x+k]$\u5185\u7684\u8282\u70b9\u7684\u6700\u5c0f\u70b9\u6743\u3002\n\n\u6309dfs\u5e8f\u7ef4\u62a4\uff0c\u5219\u6bcf\u4e2a\u5b50\u6811\u5bf9\u5e94\u7740\u4e00\u6574\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\u3002\n\n\u67e5\u8be2\u6df1\u5ea6$[dep_x,dep_x+k]$\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u7684\u601d\u8def\uff0c\u5dee\u5206\u6210$[1,dep_x+k]$\u548c$[1,dep_x-1]$\u3002\n\n\u6211\u4eec\u8003\u8651\u5efa\u51fa\u6df1\u5ea6\u5c0f\u4e8e\u7b49\u4e8e$p$\u7684\u8282\u70b9\u6784\u6210\u7684\u4e3b\u5e2d\u6811$d_p$\uff0c\u4fdd\u5b58\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\uff0c\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e$[1,dep_x+k]$\u8fd9\u4e00\u6bb5\uff0c\u76f4\u63a5\u5728\u4e0b\u6807\u4e3a$dep_x+k$\u7684\u7ebf\u6bb5\u6811\u6811\u4e0a\u533a\u95f4\u67e5\u8be2\u8fd9\u4e00\u6574\u68f5\u5b50\u6811\u5373\u53ef\u3002\n\n\u800c\u7531\u4e8e\u5b50\u6811$x$\u4e2d\u6ca1\u6709\u8282\u70b9\u7684\u6df1\u5ea6\u5c0f\u4e8e$dep_x$\uff0c\u6240\u4ee5\u4e0a\u9762\u67e5\u8be2\u7684\u65f6\u5019\uff0c$[1,dep_x-1]$\u8fd9\u6bb5\u533a\u95f4\u5176\u5b9e\u672c\u8eab\u5c31\u6ca1\u6709\u3002\n\n\u6240\u4ee5\u53ea\u9700\u8981\u5bf9\u7ebf\u6bb5\u6811\u53ef\u6301\u4e45\u5316\u4e00\u4e0b\uff0c\u7136\u540e\u533a\u95f4\u67e5\u8be2\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(m\\log n)$\u3002\n\n\u6ce8\u610f$dep_x+k$\u53ef\u80fd\u4f1a\u5927\u4e8e\u6574\u68f5\u6811\u7684\u6700\u5927\u6df1\u5ea6\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\n#define N 100005\nclass istream{\n    char buf[21000003],*s;\n    public:\n        inline istream(){\n            buf[fread(s=buf,1,21000001,stdin)]='\\n';\n            fclose(stdin);\n        }\n        template<typename T>\n        inline istream&operator>>(T&rhs){\n            for(rhs=0;!isdigit(*s);++s);\n            while(isdigit(*s))rhs=rhs*10+(*s++&15);\n            return*this;\n        }\n}cin;\nstruct ostream{\n    char buf[12000005],*s;\n    inline ostream(){s=buf;}\n    inline void operator<<(int d){\n        if(!d){\n            *s++='0';\n        }else{\n            static int w;\n            for(w=1;w<=d;w*=10);\n            for(;w/=10;d%=w)*s++=d/w^'0';\n        }\n        *s++='\\n';\n    }\n    inline~ostream(){fwrite(buf,1,s-buf,stdout);}\n}cout;\nstruct edge{\n\tint to,nxt;\n}e[N<<1];\nstruct Nodes{\n\tint ls,rs,mn;\n}d[N*333];\nint n,m,ans,rt[N],c[N],dep[N],dfn[N],idx=0,sz[N],head[N],cnt=0,idfn[N],tmp[N],node=0,r;\nint ret;\nvoid dfs(int now){\n\tsz[now]=1,idfn[dfn[now]=++idx]=now;\n\tfor(int i=head[now];i;i=e[i].nxt)\n\tif(!dep[e[i].to]){\n\t\tdep[e[i].to]=dep[now]+1;\n\t\tdfs(e[i].to);\n\t\tsz[now]+=sz[e[i].to];\n\t}\n}\nvoid add(int&o,int P,int l,int r,int pos){\n\td[o=++node]=d[P];\n\tif(l==r)d[o].mn=c[idfn[pos]];else{\n\t\tconst int mid=l+r>>1;\n\t\tif(pos<=mid)add(d[o].ls,d[P].ls,l,mid,pos);else add(d[o].rs,d[P].rs,mid+1,r,pos);\n\t\td[o].mn=std::min(d[d[o].ls].mn,d[d[o].rs].mn);\n\t}\n}\nvoid query(int o,int l,int r,const int&L,const int&R){\n\tif(!o)return;\n\tif(L<=l&&r<=R)ret=std::min(ret,d[o].mn);else{\n\t\tconst int mid=l+r>>1;\n\t\tif(L<=mid)query(d[o].ls,l,mid,L,R);\n\t\tif(mid<R)query(d[o].rs,mid+1,r,L,R);\n\t}\n}\nint main(){\n\td->mn=2e9;\n\tcin>>n>>r;\n\tfor(int i=1;i<=n;++i)cin>>c[i];\n\tfor(int i=1;i<n;++i){\n\t\tint u,v;cin>>u>>v;\n\t\te[++cnt]=(edge){v,head[u]};head[u]=cnt;\n\t\te[++cnt]=(edge){u,head[v]};head[v]=cnt;\n\t}\n\tdep[r]=1;\n\tdfs(r);\n\tfor(int i=1;i<=n;++i)tmp[i]=i;\n\tstd::sort(tmp+1,tmp+n+1,[](const int&a,const int&b){return dep[a]<dep[b];});\n\tfor(int i=1;i<=n;++i)\n\tadd(rt[dep[tmp[i]]],rt[dep[tmp[i-1]]],1,n,dfn[tmp[i]]);\n\tcin>>m;\n\twhile(m--){\n\t\tint u,k;cin>>u>>k;\n\t\tu=(u+ans)%n+1,k=(k+ans)%n;\n\t\tret=2e9;\n\t\tquery(rt[std::min(dep[u]+k,dep[tmp[n]])],1,n,dfn[u],dfn[u]+sz[u]-1);\n\t\tans=ret;\n\t\tcout<<ans;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1543322138,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF893F \u3010Subtree Minimum Query\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5f3a\u5236\u5728\u7ebf\uff0c\u611f\u89c9\u7ebf\u6bb5\u6811\u5408\u5e76\u597d\u5199\u4e00\u4e9b\uff0c\u73b0\u6709\u9898\u89e3\u91cc\u4e00\u8f66\u4e3b\u5e2d\u6811\u8fd8\u6709\u6811\u5957\u6811\u3002\n\n\u4e00\u4e2a\u5f88 naive \u7684\u60f3\u6cd5\u662f\u7ef4\u62a4\u4e00\u68f5\u5173\u4e8e\u6df1\u5ea6\u7684\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u67e5\u8be2\u5c31\u6210\u4e86\u533a\u95f4 $dep_x $ \u5230 $\\min(dep_x+k,n)$\uff0c\u53d6 $\\min$ \u662f\u56e0\u4e3a\u53ef\u80fd\u8d85\u8fc7 $n$ \u5c31\u5bc4\u6389\u4e86\u3002\n\n\u7136\u540e\u5c31\u662f\u6211\u4eec\u5199 merge \u7684\u65f6\u5019\u4e0d\u8981\u5c06\u4e00\u68f5\u7ebf\u6bb5\u6811\u5408\u5230\u53e6\u4e00\u68f5\u4e0a\uff0c\u800c\u662f\u5efa\u65b0\u6811\u5408\u5e76\uff0c\u56e0\u4e3a\u76f4\u63a5\u5408\u5e76\u4f1a\u7834\u574f\u5408\u5e76\u7684\u90a3\u68f5\u6811\u8d21\u732e\u3002\n\n\u5269\u4e0b\u7684\u90fd\u662f\u4e00\u4e9b\u57fa\u672c\u7684\u64cd\u4f5c\u3002\n\n\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u76f4\u662f\u4e2a\u7384\u5b66\u4e1c\u897f\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u662f $\\mathcal{O(n\\log{n})}$\uff0c\u867d\u7136\u7384\u5b66\u4e00\u70b9\uff0c\u4f46\u662f\u8dd1 $10^5$ \u8fd8\u662f\u6ca1\u95ee\u9898\u7684\u3002\n\n[\u7801\u3002](https://codeforces.com/contest/893/submission/170705693)",
        "postTime": 1662191130,
        "uid": 397317,
        "name": "Gym_nastics",
        "ccfLevel": 0,
        "title": "CF893F Subtree Minimum Query"
    },
    {
        "content": "### \u9898\u610f\n\n\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6709\u6839\u6811\uff0c$m$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa $x,k$\uff0c\u6c42 $x$ \u7684\u5b50\u6811\u5185\u4e0e $x$ \u8ddd\u79bb\u4e0d\u8d85\u8fc7 $k$ \u7684\u70b9\u7684\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002\n\n### Solution\n\n\u62c6\u4e00\u62c6\u7ea6\u675f\uff0c\u53d1\u73b0\u5927\u6982\u662f\uff1a\n$$\n\\begin{cases}\n\\mathrm{dfn}_x\\leq \\mathrm{dfn}_y\\leq \\mathrm{dfn}_x+\\mathrm{size}_x-1\n\\\\\n\\mathrm{dep}_y\\leq \\mathrm{dep}_x+k\n\\end{cases}\n$$\n\n\u4ee5 $\\text{dfn}$ \u4e3a\u4e0b\u6807\uff0c\u4ee5\u6df1\u5ea6\u4e3a\u65f6\u95f4\u8f74\uff0c\u5efa\u4e3b\u5e2d\u6811\u3002\n\n\u67e5\u8be2\u65f6\u53ea\u9700\u8981\u67e5\u8be2\u65f6\u95f4 $\\mathrm{dep_x}+k$ \u7684\u4e3b\u5e2d\u6811\u4e2d $[\\mathrm{dfn}_x,\\mathrm{dfn}_x+\\mathrm{size}_x-1]$ \u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u6b63\u786e\u6027\uff1f\u7531\u4e8e $<\\mathrm{dep}_x$ \u7684 \u96c6\u5408 $S$ \u4e2d \u4e0d\u5b58\u5728\u5143\u7d20 $\\mathrm{dfn}_y\\in[\\mathrm{dfn}_x,\\mathrm{dfn}_x+\\mathrm{size}_x-1]$ \n\n\u7531\u4e8e\u672c\u9898\u6c42\u6700\u5c0f\u503c\u7684\u7279\u6b8a\u6027\uff0c\u6240\u4ee5\u65f6\u95f4\u8f74\u4e0a\u662f\u65e0\u6cd5\u9009\u53d6\u4e00\u6bb5\u533a\u95f4\u7684\uff0c\u53ea\u80fd\u9009\u53d6\u4e00\u6bb5\u524d\u7f00\u6216\u540e\u7f00\u3002\u8fd9\u5c31\u662f\u4e0d\u9009\u53d6\u4e0b\u6807\u4f5c\u4e3a\u65f6\u95f4\u8f74\u7684\u539f\u56e0\u3002\u56e0\u4e3a\u6df1\u5ea6\u4f5c\u4e3a\u4e0b\u6807\u65e0\u6cd5\u5212\u5206\u6240\u6c42\uff0c\u800c\u65f6\u95f4\u8f74\u4e5f\u65e0\u6cd5\u53d6\u51fa\u533a\u95f4\u3002\n\n### Code\n\n```cpp\n#include<cstdio>\n#include<queue>\nint cnt=0,num=0,tot=0;\nint DEPTH_MAX;\nint a[100005];\nint rt[100005],lson[10000005],rson[10000005],mn[10000005];\nint dfn[100005],dep[100005],high[100005];\nint h[100005],to[200005],ver[200005];\ninline int read() {\n\tregister int x=0,f=1;register char s=getchar();\n\twhile(s>'9'||s<'0') {if(s=='-') f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9') {x=x*10+s-'0';s=getchar();}\n\treturn x*f;\n}\ninline int max(const int &x,const int &y) {return x>y? x:y;}\ninline int min(const int &x,const int &y) {return x<y? x:y;}\ninline void add(int x,int y) {to[++cnt]=y;ver[cnt]=h[x];h[x]=cnt;}\ninline void dfs(int x,int fa) {\n\tdfn[x]=++num; DEPTH_MAX=max(DEPTH_MAX,dep[x]);\n\tfor(register int i=h[x];i;i=ver[i]) {\n\t\tint y=to[i]; if(y==fa) continue;\n\t\tdep[y]=dep[x]+1; dfs(y,x);\n\t}\n\thigh[x]=num;\n}\ninline void assign(int x,int y) {mn[x]=mn[y]; lson[x]=lson[y]; rson[x]=rson[y];}\ninline void changeTree(int &p,int lst,int l,int r,int x,int val) {\n\tif(!p||p==lst) assign(p=++tot,lst); \n\tif(mn[p]) mn[p]=min(mn[p],val);\n\telse mn[p]=val;\n\tif(l==r) return;\n\tint mid=l+r>>1;\n\tif(x<=mid) changeTree(lson[p],lson[lst],l,mid,x,val);\n\telse changeTree(rson[p],rson[lst],mid+1,r,x,val);\n}\n//inline void change(int &p,int l,int r,int x,int val) {\n//\tif(!p) {p=++tot; mn[p]=val;} else {mn[p]=min(mn[p],val);}//exists mn[p]=0\n//\tif(l==r) return;\n//\tint mid=l+r>>1;\n//\tif(x<=mid) change(lson[p],l,mid,x,val);\n//\telse change(rson[p],mid+1,r,x,val);\n//}\ninline int ask(int p,int l,int r,int L,int R) {\n\tif(!p) return 1e9+5;\n\tif(L<=l&&r<=R) return mn[p];\n\tint mid=l+r>>1;\n\tif(R<=mid) return ask(lson[p],l,mid,L,R);\n\tif(L>mid) return ask(rson[p],mid+1,r,L,R);\n\treturn min(ask(lson[p],l,mid,L,mid),ask(rson[p],mid+1,r,mid+1,R));\n}\ninline void bfs(int u) {\n\tstd::queue<int> Q;\n\tQ.push(u); int cur=1;\n\twhile(Q.size()) {\n\t\tint x=Q.front(); Q.pop();\n\t\tchangeTree(rt[dep[x]],rt[dep[x]-1],1,num,dfn[x],a[x]);\n\t\tfor(register int i=h[x];i;i=ver[i]) {\n\t\t\tint y=to[i]; if(dep[y]<dep[x]) continue;\n\t\t\tQ.push(y);\n\t\t}\n\t}\n}\nint main() {\n\tint n=read(),RT=read();\n\tfor(register int i=1;i<=n;++i) a[i]=read();\n\tfor(register int i=1;i<n;++i) {\n\t\tint x=read(),y=read();\n\t\tadd(x,y); add(y,x);\n\t}\n\tdep[RT]=1; dfs(RT,-1); bfs(RT);\n\tint Q=read(),lastans=0;\n\twhile(Q--) {\n\t\tint x=(read()+lastans)%n+1,k=(read()+lastans)%n;\n\t\tprintf(\"%d\\n\",lastans=ask(rt[min(DEPTH_MAX,dep[x]+k)],1,num,dfn[x],high[x]));\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1633771459,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "Solution CF893F"
    },
    {
        "content": "\u56e0\u4e3a\u5728\u5b50\u6811\u5185\u90e8\uff0c\u6240\u4ee5\u4e0d\u80fd\u4f7f\u7528 $\\text{BFS}$ \u5e8f\u8fdb\u884c\u7ef4\u62a4\n\n\u6211\u4eec\u8003\u8651\u7528 $\\text{DFS}$ \u5e8f\u7ef4\u62a4\u8fd9\u6bb5\u533a\u95f4\n\n\u6709\u4e00\u4e2a\u975e\u5e38\u663e\u7136\u7684\u601d\u8def\u5c31\u662f\u628a\u6df1\u5ea6\u5dee\u5206\uff0c\u7531\u4e8e\u5728\u5b50\u6811\u4e2d\u6ca1\u6709\u6bd4\u6839\u8282\u70b9\u66f4\u6df1\u7684\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4 $dep \\in [1,dep[u]+k]$ \u8fd9\u6bb5\u533a\u95f4\n\n\u6211\u4eec\u8003\u8651\u7528\u4e3b\u5e2d\u6811\uff0c\u6bcf\u6b21 $\\text{BFS}$ \u52a0\u5165\u65b0\u7684\u70b9\uff0c\u7ef4\u62a4\u6240\u6709\u6df1\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $dep$ \u7684\u70b9\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u6709\u4e00\u53ea $\\text{log}$\n\n(\u770b\u5b8c\u82f1\u6587\u7248\u9898\u9762\u8111\u5b50\u62bd\u4e86\uff0c\u672c\u8eab\u60f3\u7528 $\\text{BFS}$ \u5e8f\u7ef4\u62a4\n",
        "postTime": 1573784108,
        "uid": 53807,
        "name": "Erusel",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF893F \u3010Subtree Minimum Query\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u7c7b\u4f3c\u5206\u6563\u5c42\u53e0\u4f18\u5316\u533a\u57df\u6811\u7684\u505a\u6cd5\u3002\n\n~~\u7eaf\u5c5e\u53e3\u80e1\uff0c\u4f46\u4e2a\u4eba\u611f\u89c9\u633a\u9760\u8c31\u7684\uff0c\u8981\u662f\u6709\u95ee\u9898\u6b22\u8fce\u6765 D \u6211~~\n\n## \u601d\u8def\n\n\n\u770b\u5230 \u201c\u5b50\u6811\u201d \uff0c\u770b\u5230 \u201c\u6df1\u5ea6\u8ddd\u79bb\u201d \u9996\u5148\u8003\u8651\u628a dfs \u5e8f\u62c9\u4e0b\u6765\uff0c\u7136\u540e\u628a\u6bcf\u4e00\u4e2a\u70b9\u6df1\u5ea6\u62c9\u4e0b\u6765\u3002\n\n\u90a3\u4e48\u4e0d\u96be\u53d1\u73b0\u95ee\u9898\u53d8\u6210\u4e86\u5f3a\u5236\u5728\u7ebf\u8be2\u95ee\u67d0\u4e00\u4e2a\u77e9\u5f62\u5185\u7684\u6700\u5c0f\u503c\u3002\n\n\u4e00\u79cd\u505a\u6cd5\u662f\u4e3b\u5e2d\u6811\uff0c\u8fd9\u91cc\u4e0d\u7528\u4e3b\u5e2d\u6811\uff0c\u6539\u7528\u4e00\u79cd\u66f4\u4e3a\u66b4\u529b\u7684\u505a\u6cd5\u2014\u2014\u6811\u5957\u6811\u3002\n\n\u4f46\u662f\u4e00\u822c\u7684\u6811\u5957\u6811\u662f $O(n\\log^2 n)$ \u7684\uff0c $m=10^6$ \u7684\u60c5\u51b5\u4e0b\u53ef\u80fd\u4f1a\u677e\u4e0d\u8fc7\u53bb\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u4e00\u822c\u7684\u6811\u5957\u6811\u7ed3\u6784\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u5728\u591a\u68f5\u5185\u5c42\u6811\u5f53\u4e2d\u628a\u7ed3\u679c\u67e5\u8be2\u51fa\u6765\u4e4b\u540e\u5408\u5e76\uff0c\u4f46\u662f\u7531\u4e8e\u5185\u5c42\u6811\u4e5f\u662f\u7ebf\u6bb5\u6811\u6545\u8981\u591a\u4e58\u4e00\u53ea $\\log$ \u3002\n\n\u4f46\u662f\u6211\u4eec\u8fd9\u91cc\u505a\u7684\u662f $\\text{RMQ}$ \u95ee\u9898\uff0c\u7528\u7ebf\u6bb5\u6811\u5904\u7406\u5c31\u663e\u5f97\u6709\u4e9b\u4e0d\u592a\u4f18\u79c0\u3002\n\n\u6211\u4eec\u8003\u8651\u628a\u5185\u5c42\u7ed3\u6784\u6539\u6210 **st\u8868** \uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u50a8\u5b58\u8fd9\u6bb5\u533a\u95f4\u5185\u6240\u6709\u8282\u70b9\u6392\u5e8f\u540e\u7684\u7ed3\u679c\uff0c\u7136\u540e\u5efa st \u8868\u3002\n\n\u4f46\u662f\u8fd9\u6837\u6bcf\u4e00\u6b21\u8be2\u95ee\u8fd8\u8981\u4e8c\u5206\uff0c\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u5f97\u5230\u4f18\u5316\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u7236\u4eb2\u8282\u70b9\u4e0a\u90fd\u53ef\u4ee5\u5b58\u50a8\u5f53\u524d\u8282\u70b9\u5728\u513f\u5b50\u4e2d\u7684\u540e\u7ee7\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u5728\u6839\u8282\u70b9\u4e0a\u4e8c\u5206\u4e00\u6b21\uff0c\u540e\u9762\u7684\u8282\u70b9\u5c31\u90fd\u53ef\u4ee5 $O(1)$ \u67e5\u8be2\u4e86\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log^2n+m\\log n)$ \uff0c\u7528\u56db\u6bdb\u5b50\u5904\u7406 $\\text{RMQ}$ \u95ee\u9898\u4e5f\u8bb8\u53ef\u4ee5\u505a\u5230 $O(n\\log n + m\\log n)$ \uff0c\u4f46\u6ca1\u5fc5\u8981\u3002",
        "postTime": 1619008496,
        "uid": 66511,
        "name": "DPair",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF893F \u3010Subtree Minimum Query\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u9898\u610f\u5df2\u7ecf\u5f88\u6e05\u695a\u4e86\uff0c\u5c31\u4e0d\u8bb2\u4e86\u3002\n\n\u8fd9\u9898\u8981\u6c42\u5f3a\u5236\u5728\u7ebf\uff0c\u4e0d\u7136dsu on tree\u5c31\u5b8c\u4e8b\u513f\u4e86\u3002\n\n\u8003\u8651\u5982\u679c\u53ea\u6709\u5173\u4e8e\u6839\u8282\u70b9\u7684\u8be2\u95ee\uff0c\u53ef\u4ee5\u60f3\u5230\u7ef4\u62a4\u4e00\u68f5\u5173\u4e8e\u6df1\u5ea6\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u6b64\u65f6\uff0c\u6811\u4e0a\u7684\u95ee\u9898\u548c\u5e8f\u5217\u4e0a\u7684\u95ee\u9898\u5c31\u662f\u7b49\u4ef7\u7684\u4e86\u3002\n\n\u6211\u4eec\u5c06\u5bf9\u6839\u8282\u70b9\u7ef4\u62a4\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\uff0c\u62d3\u5c55\u5230\u6574\u68f5\u6811\u4e0a\u3002\u4e0d\u96be\u60f3\u5230\u5bf9\u4e8e\u4e00\u4e2a\u6839\u8282\u70b9$u$\u7684\u6570\u636e\u7ed3\u6784\uff0c${\\forall v, v \\in \\text{son[u]}} $\u90fd\u4f1a\u5bf9\u5b83\u4ea7\u751f\u5f71\u54cd\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u79cd\u53ef\u5408\u5e76\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u8fd9\u68f5\u6811\u3002\u663e\u7136\uff0c\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u548cdfs\u5e8f+\u4e3b\u5e2d\u6811\u90fd\u662fOK\u7684\u3002\n\n\u6211\u53ea\u5199\u4e86\u4e00\u4e0b\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\uff0c\u7ef4\u62a4\u5173\u4e8e\u6bcf\u4e2a\u70b9\u7684\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u5927\u529b\u5408\u5e76\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define lson s[p].ls\n#define rson s[p].rs\n#define pb push_back\nconst int MAXN = 1e5;\nconst int INF = 0x3f3f3f3f;\nusing namespace std;\n\nint rt[MAXN + 5];\n\nstruct SegmentTree {\n  struct Node {\n    int ls, rs, mn;\n  } s[MAXN * 50 + 5];\n  int tot;\n  SegmentTree() {}\n  void upd(int p) {\n    int lm = lson ? s[lson].mn : INF, rm = rson ? s[rson].mn : INF;\n    s[p].mn = min(lm, rm);\n  }\n  void insert(int &p, int l, int r, int u, int val) {\n    if (!p) p = ++tot;\n    if (l == r) {\n      s[p].mn = val; return;\n    }\n    int mid = (l + r) >> 1;\n    if (u <= mid) {\n      insert(lson, l, mid, u, val);\n    } else {\n      insert(rson, mid + 1, r, u, val);\n    }\n    upd(p);\n  }\n  int query(int p, int l, int r, int x, int y) {\n    if (!p) return INF;\n    if (x <= l && y >= r) return s[p].mn;\n    int mid = (l + r) >> 1, ret = INF;\n    if (x <= mid) ret = query(lson, l, mid, x, y);\n    if (y > mid) ret = min(ret, query(rson, mid + 1, r, x, y));\n    return ret;\n  }\n  int merge(int x, int y) {\n    if (!x || !y) return x + y;\n    int p = ++tot; s[p].mn = min(s[x].mn, s[y].mn);\n    lson = merge(s[x].ls, s[y].ls);\n    rson = merge(s[x].rs, s[y].rs);\n    return p; \n  }\n} Sgt;\n\nint n, a[MAXN + 5], depth[MAXN + 5], tree_rt;\n\nnamespace tree {\nvector < int > adj[MAXN + 5];\n\nvoid addEdge(int u, int v) {\n  adj[u].pb(v), adj[v].pb(u);\n}\nvoid dfs(int u, int fa) {\n  Sgt.insert(rt[u], 1, n, depth[u], a[u]);\n  for (int v: adj[u]) {\n    if (v == fa) continue; \n    depth[v] = depth[u] + 1, dfs(v, u);\n    rt[u] = Sgt.merge(rt[u], rt[v]);\n  }\n}\n}\n\nvoid init() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n\n  cin >> n >> tree_rt;\n  for (int i = 1; i <= n; ++i) cin >> a[i];\n  for (int i = 1; i < n; ++i) {\n    int u, v; cin >> u >> v;\n    tree::addEdge(u, v);\n  }\n  depth[tree_rt] = 1, tree::dfs(tree_rt, 0);\n}\n\nint last_ans, m;\n\nint main() {\n#ifdef forever23\n  freopen(\"test.in\", \"r\", stdin);\n  freopen(\"test.out\", \"w\", stdout);\n#endif\n  init();\n\n  cin >> m; \n  while (m--) {\n    int u, k; cin >> u >> k;\n    u = (u + last_ans) % n + 1, k = (k + last_ans) % n;\n    last_ans = Sgt.query(rt[u], 1, n, depth[u], min(depth[u] + k, n));\n    cout << last_ans << endl;\n  }\n  return 0;\n}\n```",
        "postTime": 1583368161,
        "uid": 53567,
        "name": "23forever",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF893F \u3010Subtree Minimum Query\u3011"
    },
    {
        "content": "\u7531\u4e8e\u6211\u6bd4\u8f83\u83dc \u6211\u61d2\u5f97\u5199\u4e3b\u5e2d\u6811\u5408\u5e76 \u6211\u5c31\u5199\u4e86\u4e2a\u6811\u5957\u6811\n\n\u7531\u4e8e\u6700\u5c0f\u503c\u4e0d\u5177\u6709\u53ef\u51cf\u6027 \u5355\u7eaf\u4e3b\u5e2d\u6811\u80af\u5b9a\u662f\u4e0d\u884c\u7684 \u9664\u975e\u5408\u5e76\u7b49\u64cd\u4f5c\n\n\u7136\u540e\u6211\u5c31\u5199\u4e86\u4e2a\u7ebf\u6bb5\u6811\u5957FhqTreap\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4[dfn[x],end[x]] (end[x]\u662fx\u7684\u5b50\u6811\u7684dfn\u7684\u7ed3\u5c3e)\n\n\u5185\u90e8\u5957\u5e73\u8861\u6811 \u6bcf\u4e2a\u70b9\u6309\u7167key\u6392\u5e8f \u7ef4\u62a4val\u7684\u6700\u5c0f\u503c \u8fd9\u91cc\u7528\u6df1\u5ea6dep\u5f53\u4f5ckey  \u70b9\u6743\u5f53\u4f5cval\n\nfhqtreap\u5206\u79bb\u533a\u95f4[dep[x],dep[x]+k]\u7136\u540e\u83b7\u53d6\u7b54\u6848\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\nusing std::min;\nconst int N=1e5+10,INF=1e9+10;\nint n,r,m,w[N],lastans;\nint head[N],cnt,to[N<<1],next[N<<1];\ninline const void link(int u,int v)\n{\n\tnext[++cnt]=head[v];to[head[v]=cnt]=u;\n\tnext[++cnt]=head[u];to[head[u]=cnt]=v;\n}\nint dep[N],dot[N],dfn[N],end[N],dfc;\ninline const void dfs(int p,int fa)\n{\n\tdot[dfn[p]=++dfc]=p;\n\tfor (int son,i=head[p];i;i=next[i])\n\t\tif ((son=to[i])^fa)\n\t\t\tdep[son]=dep[p]+1,dfs(son,p);\n\tend[p]=dfc;\n}\nnamespace Fhq_Treap\n{\n\tstruct tree\n\t{\n\t\tint mn,val,key,priority;\n\t\ttree *lson,*rson;\n\t\tinline const void pushup()\n\t\t{\n\t\t\tmn=min(val,min(lson->mn,rson->mn));\n\t\t}\n\t}memory_pool[N*25],*tail,*null;\n\tinline const void init()\n\t{\n\t\ttail=memory_pool;\n\t\tnull=tail++;\n\t\tnull->val=null->mn=INF;\n\t\tnull->key=null->priority=0;\n\t\tnull->lson=null->rson=null;\n\t}\n\tinline tree *spawn(int key,int val)\n\t{\n\t\ttree *p=tail++;\n\t\tp->key=key;\n\t\tp->mn=p->val=val;\n\t\tp->priority=rand();\n\t\tp->lson=p->rson=null;\n\t\treturn p;\n\t}\n\tinline const void split(tree *p,int x,tree *&a,tree *&b)\n\t{\n\t\tif (p==null)return (void)(a=b=null);\n\t\tif (p->key<=x)a=p,split(p->rson,x,a->rson,b);\n\t\telse b=p,split(p->lson,x,a,b->lson);\n\t\tp->pushup();\n\t}\n\tinline tree *merge(tree *a,tree *b)\n\t{\n\t\tif (a==null&&b==null)return null;\n\t\tif (a==null)return b;\n\t\tif (b==null)return a;\n\t\tif (a->priority<b->priority)return a->rson=merge(a->rson,b),a->pushup(),a;\n\t\treturn b->lson=merge(a,b->lson),b->pushup(),b;\n\t}\n\tinline const void insert(tree *&root,int key,int val)\n\t{\n\t\ttree *a,*b;\n\t\tsplit(root,key,a,b);\n\t\troot=merge(a,merge(spawn(key,val),b));\n\t}\n\tinline const int query(tree *&root,int l,int r)\n\t{\n\t\ttree *a,*b,*c;\n\t\tsplit(root,r,a,b);\n\t\tsplit(a,l-1,c,a);\n\t\tint mn=a->mn;\n\t\troot=merge(c,merge(a,b));\n\t\treturn mn;\n\t}\n}using namespace Fhq_Treap;\nclass Segment_Tree\n{\n\tprivate:\n\t\tstruct tree\n\t\t{\n\t\t\tFhq_Treap::tree *root;\n\t\t\ttree *lson,*rson;\n\t\t\tinline const int query(int l,int r,int l1,int r1,int l2,int r2)\n\t\t\t{\n\t\t\t\tif (l>r1||r<l1)return INF;\n\t\t\t\tif (l>=l1&&r<=r1)return Fhq_Treap::query(root,l2,r2);\n\t\t\t\tint mid=l+r>>1;\n\t\t\t\treturn min(lson->query(l,mid,l1,r1,l2,r2),rson->query(mid+1,r,l1,r1,l2,r2));\n\t\t\t}\n\t\t}*root,memory_pool[N<<2],*tail;\n\t\tinline const void build(tree *&p,int l,int r)\n\t\t{\n\t\t\tp=tail++;p->root=null;\n\t\t\tfor (int i=l;i<=r;i++)insert(p->root,dep[dot[i]],w[dot[i]]);\n\t\t\tif (l==r)return;\n\t\t\tint mid=l+r>>1;\n\t\t\tbuild(p->lson,l,mid);\n\t\t\tbuild(p->rson,mid+1,r);\n\t\t}\n\tpublic:\n\t\tinline Segment_Tree(){tail=memory_pool;}\n\t\tinline const void build(){build(root,1,n);}\n\t\tinline const int query(int l1,int r1,int l2,int r2){return root->query(1,n,l1,r1,l2,r2);}\n}sgt;\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&r);\n\tfor (int i=1;i<=n;i++)scanf(\"%d\",&w[i]);\n\tfor (int a,b,i=1;i<n;i++)scanf(\"%d%d\",&a,&b),link(a,b);\n\tdfs(r,0);scanf(\"%d\",&m);\n\tinit();sgt.build();\n\tfor (int x,k;m--;)\n\t\tscanf(\"%d%d\",&x,&k),\n\t\tx=(x+lastans)%n+1,k=(k+lastans)%n,\n\t\tprintf(\"%d\\n\",lastans=sgt.query(dfn[x],end[x],dep[x],dep[x]+k));\n\treturn 0;\n}\n```",
        "postTime": 1564563210,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF893F \u3010Subtree Minimum Query\u3011"
    },
    {
        "content": "\u672c\u6587\u540c\u6b65\u53d1\u8868\u4e8e\u6211\u7684\u535a\u5ba2\uff1ahttps://www.alpha1022.me/articles/cf-893f.htm\n\n\u7092\u9e21\u5927\u6c34\u9898\uff0c\u5957\u8def\u5f97\u8981\u6b7b\uff08\n\n\u770b\u5230\u300c\u5b50\u6811\u300d\uff0c\u5c31\u6709\u7ebf\u6bb5\u6811\u5408\u5e76\u548c DFS \u5e8f\u2014\u2014\u8003\u8651\u5230\u7ef4\u62a4\u7684\u6700\u5c0f\u503c\u6ca1\u6709\u533a\u95f4\u51cf\u6cd5\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u3002  \n\u5f3a\u5236\u5728\u7ebf\uff0c\u53ef\u6301\u4e45\u5316\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int N = 1e5;\nint n,m,r;\nint a[N + 5];\nint to[(N << 1) + 5],pre[(N << 1) + 5],first[N + 5];\nint lastans;\ninline void add(int u,int v)\n{\n    static int tot = 0;\n    to[++tot] = v,pre[tot] = first[u],first[u] = tot;\n}\nstruct node\n{\n    int min;\n    int ls,rs;\n} seg[(N << 7) + 10];\nint rt[N + 5];\nint seg_tot;\nvoid insert(int x,int k,int &p,int tl,int tr)\n{\n    if(!p)\n        p = ++seg_tot,seg[p].min = 0x3f3f3f3f;\n    seg[p].min = min(seg[p].min,k);\n    if(tl == tr)\n        return ;\n    int mid = tl + tr >> 1;\n    x <= mid ? insert(x,k,seg[p].ls,tl,mid) : insert(x,k,seg[p].rs,mid + 1,tr);\n}\nint query(int l,int r,int p,int tl,int tr)\n{\n    if(!p || (l <= tl && tr <= r))\n        return seg[p].min;\n    int mid = tl + tr >> 1;\n    int ret = 0x3f3f3f3f;\n    if(l <= mid)\n        ret = min(ret,query(l,r,seg[p].ls,tl,mid));\n    if(r > mid)\n        ret = min(ret,query(l,r,seg[p].rs,mid + 1,tr));\n    return ret;\n}\nint merge(int x,int y)\n{\n    if(!x || !y)\n        return x | y;\n    int p = ++seg_tot;\n    seg[p].min = min(seg[x].min,seg[y].min);\n    seg[p].ls = merge(seg[x].ls,seg[y].ls),seg[p].rs = merge(seg[x].rs,seg[y].rs);\n    return p;\n}\nint fa[N + 5],dep[N + 5];\nvoid dfs(int p)\n{\n    insert(dep[p],a[p],rt[p],1,n);\n    for(register int i = first[p];i;i = pre[i])\n        if(to[i] ^ fa[p])\n            fa[to[i]] = p,dep[to[i]] = dep[p] + 1,dfs(to[i]),rt[p] = merge(rt[p],rt[to[i]]);\n}\nint main()\n{\n    seg[0].min = 0x3f3f3f3f;\n    scanf(\"%d%d\",&n,&r);\n    for(register int i = 1;i <= n;++i)\n        scanf(\"%d\",a + i);\n    int u,v;\n    for(register int i = 1;i < n;++i)\n        scanf(\"%d%d\",&u,&v),add(u,v),add(v,u);\n    dep[r] = 1,dfs(r);\n    scanf(\"%d\",&m);\n    int x,k;\n    while(m--)\n    {\n        scanf(\"%d%d\",&x,&k);\n        x = (x + lastans) % n + 1,k = (k + lastans) % n;\n        printf(\"%d\\n\",lastans = query(dep[x],min(dep[x] + k,n),rt[x],1,n));\n    }\n}\n```",
        "postTime": 1559446148,
        "uid": 75840,
        "name": "deserter",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF893F \u3010Subtree Minimum Query\u3011"
    },
    {
        "content": "\u8fd9\u4e3a\u4ec0\u4e48\u662f\u4e3b\u5e2d\u6811\uff1f\uff1f\uff1f\n\n\u8fd9\u4e0d\u662f\u533a\u95f4\u7ebf\u6bb5\u6811+\u52a8\u6001\u5f00\u70b9\u5417\uff1f\uff1f\uff1f~~\u5176\u5b9e\u4e5f\u5dee\u4e0d\u591a~~\n\n\u6211\u4eec\u4ee5 $dfs$ \u5e8f\u4e3a\u533a\u95f4\uff0c\u52a8\u6001\u5f00\u70b9\uff0c\u518d\u4ee5 $bfs$ \u5e8f\u52a0\u5165\u65b0\u7684\u70b9\u5c31\u884c\u4e86\uff0c\u7ef4\u62a4\u4e00\u4e0b\u6700\u5c0f\u70b9\u6743\n\n\u63a8\u8350\u4e00\u9053\u66f4\u96be\u7684\u9898 [\u4e03\u5f69\u6811](https://www.lydsy.com/JudgeOnline/problem.php?id=4771)\n\n$Code\\ Below:$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=100000+10;\nconst int inf=0x3f3f3f3f;\nint n,m,rt,maxdep,a[maxn],id[maxn],dep[maxn],st[maxn],ed[maxn],tim;\nint head[maxn],to[maxn<<1],nxt[maxn<<1],tot;\nint T[maxn],L[maxn*20],R[maxn*20],sum[maxn*20],cnt;\n\ninline int read(){\n\tregister int x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn (f==1)?x:-x;\n}\ninline void add(int x,int y){\n\tto[++tot]=y;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n}\n\nbool cmp(int a,int b){return dep[a]<dep[b];}\n\nvoid dfs(int x,int f){\n\tst[x]=++tim;\n\tdep[x]=dep[f]+1;\n\tfor(int i=head[x],y;i;i=nxt[i]){\n\t\ty=to[i];\n\t\tif(y==f) continue;\n\t\tdfs(y,x);\n\t}\n\ted[x]=tim;\n}\n\nvoid pushup(int now){\n\tsum[now]=min(L[now]?sum[L[now]]:inf,R[now]?sum[R[now]]:inf);\n}\n\nvoid update(int pre,int &now,int l,int r,int x,int v){\n\tnow=++cnt;\n\tL[now]=L[pre];R[now]=R[pre];\n\tif(l == r){sum[now]=v;return ;}\n\tint mid=(l+r)>>1;\n\tif(x <= mid) update(L[pre],L[now],l,mid,x,v);\n\telse update(R[pre],R[now],mid+1,r,x,v);\n\tpushup(now);\n}\n\nint query(int now,int Le,int Ri,int l,int r){\n\tif(!now) return inf;\n\tif(Le <= l && r <= Ri){\n\t\treturn sum[now];\n\t}\n\tint mid=(l+r)>>1,ans=inf;\n\tif(Le <= mid) ans=min(ans,query(L[now],Le,Ri,l,mid));\n\tif(Ri > mid) ans=min(ans,query(R[now],Le,Ri,mid+1,r));\n\treturn ans;\n}\n\nint main()\n{\n\tn=read(),rt=read();\n\tfor(int i=1;i<=n;i++) a[i]=read();\n\tint opt,x,y,k,lastans=0;\n\tfor(int i=1;i<n;i++){\n\t\tx=read(),y=read();\n\t\tadd(x,y);add(y,x);\n\t}\n\tdfs(rt,0);\n\tfor(int i=1;i<=n;i++) id[i]=i;\n\tsort(id+1,id+n+1,cmp);\n\tmaxdep=dep[id[n]];\n\tfor(int i=1;i<=n;i++){\n\t\tif(!T[dep[id[i]]]) T[dep[id[i]]]=T[dep[id[i]]-1];\n\t\tupdate(T[dep[id[i]]],T[dep[id[i]]],1,n,st[id[i]],a[id[i]]);\n\t}\n\tm=read();\n\tfor(int i=1;i<=m;i++){\n\t\tx=(read()+lastans)%n+1,k=(read()+lastans)%n;\n\t\tprintf(\"%d\\n\",lastans=query(T[min(dep[x]+k,maxdep)],st[x],ed[x],1,n));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1543193101,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF893F \u3010Subtree Minimum Query\u3011"
    }
]