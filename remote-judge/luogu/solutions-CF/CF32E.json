[
    {
        "content": "\u8fd9\u4e2a\u9898\u8003\u5bdf\u8ba1\u7b97\u51e0\u4f55\u91cc\u7684**\u6c42\u5bf9\u79f0\u70b9**\u548c**\u5224\u65ad\u7ebf\u6bb5\u662f\u5426\u76f8\u4ea4**\u3002  \n\u4e24\u4e2a\u70b9\u80fd\u4e92\u76f8\u770b\u5230\uff0c\u6709\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff08\u6765\u6b64\u521d\u4e2d\u516b\u5e74\u7ea7\uff09\uff1a\n\n1. \u7531\u4e8e\u955c\u5b50**\u53cd\u9762\u4e0d\u53cd\u5149**\uff0c\u90a3\u4e48\u4e24\u8005\u4e00\u5b9a\u51fa\u73b0\u5728\u955c\u5b50\u7684\u540c\u4fa7\uff1b\n2. \u5149\u8def\u4e0a\u4e0d\u5b58\u5728\u5899\u3002\n\n\u672c\u9898\u5751\u70b9\u5982\u4e0b\uff1a\n- \u5899\u662f\u6709\u539a\u5ea6\u7684\u4f46\u662f\u955c\u5b50\u6ca1\u6709\uff1b\n- \u5982\u679c\u5149\u7ebf\u4e0e\u5899\u6216\u955c\u5b50\u5171\u7ebf\uff0c\u4e5f\u65e0\u6cd5\u901a\u8fc7\u3002\n\n\u6c42\u5bf9\u79f0\u70b9\u7684\u65b9\u6cd5\u5982\u4e0b\uff08\u5411\u91cf\u6c42\u6cd5\uff09\uff1a\n```cpp\ntemp = v + Point(-mirror.vec.y, mirror.vec.x); \ntemp = crs(Segment(v, temp), mirror); \noppo = temp + (temp - v);\n```\n\n\u63a5\u4e0b\u6765\u662f\u5224\u65ad\u662f\u5426\u7b26\u5408\u6761\u4ef6\uff1a\n```cpp\nbool OK1() { // \u5224\u65ad\u662f\u5426\u76f8\u4ea4\n\tif(cross(Segment(p, v), mirror, 0)) return false;\n\tif(cross(Segment(p, v), wall, 1))\treturn false;\n\treturn true; \n}\nbool OK2() { // \u5224\u65ad\u5149\u7ebf\u80fd\u4e0d\u80fd\u8d70\u5230\n\tint ca = sgn((p - mirror.start) ^ mirror.vec);\n\tint cb = sgn((v - mirror.start) ^ mirror.vec);\n\tif (!((ca < 0 && cb < 0) || (ca > 0 && cb > 0))) return false;\n\tif (!cross(Segment(p, oppo), mirror, 0)) return false;\n\ttemp = crs(Segment(p, oppo), mirror);\n\tif (cross(Segment(p, temp), wall, 1))  return false;\n\tif (cross(Segment(temp, v), wall, 1))  return false;\n\treturn true;\n}\n\n```\n\n\u4ee5\u53ca\uff0c\u6211\u5199\u7684\u8ba1\u7b97\u51e0\u4f55\u76f8\u5173\u6a21\u677f\uff1a\n```cpp\nnamespace LTF {\n\ttypedef long double pos;\n\tconstexpr auto EPS = 1e-6;\n\tint sgn(pos x) { if (x < -EPS) return -1; if (x > EPS) return 1; else return 0; };\n\n\tclass Point {\n\tpublic:\n\t\tpos x, y;\n\t\tPoint(pos _X = 0, pos _Y = 0)\t  { x = _X, y = _Y; }\n\t\tPoint operator+ (const Point& _v) { return Point(this->x + _v.x, this->y + _v.y); }\n\t\tPoint operator- (const Point& _v) { return Point(this->x - _v.x, this->y - _v.y); }\n\t\tPoint operator* (const pos&   _v) { return Point(this->x * _v,   this->y * _v);   }\n\t\tpos\t  operator^ (const Point& _C) { return this->x * _C.y - this->y * _C.x;\t}\n\t};\n\n\tclass Segment {\n\tpublic:\n\t\tPoint start, end, vec;\n\t\tSegment() {};\n\t\tSegment(Point _s, Point _e) { start = _s, end = _e, vec = end - start; }\n\t};\n\n\tPoint crs(Segment A, Segment B) {\n\t\tpos S1 = (B.start - A.start) ^ A.vec;\n\t\tpos S2 = A.vec ^ B.vec;\n\t\treturn B.start + (B.vec * (S1 / S2));\n\t}\n\n\tbool isOn(Point C, Segment T) {\n\t\tif ((C.x < min(T.start.x, T.end.x) - EPS) || (C.x > max(T.start.x, T.end.x) + EPS)) return false;\n\t\tif ((C.y < min(T.start.y, T.end.y) - EPS) || (C.y > max(T.start.y, T.end.y) + EPS)) return false;\n\t\treturn true;\n\t}\n\n\tbool cross(Segment A, Segment B, int md) {\n\t\tif (abs(A.vec ^ B.vec) < EPS) {\n\t\t\tif (md == 0) return false;\n\t\t\tif (isOn(A.start, B) || isOn(A.end, B) || isOn(B.start, A) || isOn(B.end, A)) return true;\n\t\t\treturn false;\n\t\t}\n\t\tPoint C = crs(A, B);\n\t\treturn isOn(C, A) && isOn(C, B);\n\t}\n};\n```",
        "postTime": 1676772723,
        "uid": 367343,
        "name": "SDLTF",
        "ccfLevel": 0,
        "title": "CF32E Hide-and-Seek \u9898\u89e3"
    },
    {
        "content": "\u4e00\u9053\u8f83\u4e3a\u7b80\u5355\u4f46\u662f\u7ec6\u8282\u7684\u8ba1\u7b97\u51e0\u4f55\u9898\u76ee\n\n- **\u9898\u76ee\u5927\u610f**\n\n\u5df2\u77e5\u4e24\u4e2a\u70b9 $A,B$ \u548c\u4e24\u6761\u7ebf\u6bb5 $a,b$\uff0c$a$ \u662f\u4e00\u5835\u5899\uff0c$b$ \u662f\u4e00\u9762\u955c\u5b50\u4e14\u53ea\u6709\u4e00\u9762\u6709\u53cd\u5149\u6548\u679c\uff0c\u95ee\u80fd\u4e0d\u80fd\u4ece $A$ \u70b9\u770b\u5230 $B$ \u70b9\n\n- **\u5206\u6790**\n\n\u8fd9\u9053\u9898\u76ee\u660e\u663e\u6ca1\u6709\u65f6\u95f4\u6216\u7a7a\u95f4\u9650\u5236\u7684\u95ee\u9898\uff0c\u6211\u4eec\u53ea\u9700\u8003\u8651\u505a\u9898\u601d\u8def\u5373\u53ef\n\n\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n1. \u7ebf\u6bb5 $AB$ \u548c\u955c\u5b50\u76f8\u4ea4\n\n\t\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u5176\u4ed6\u4e1c\u897f\u53ef\u4ee5\u6539\u53d8\u6211\u4eec\u7684\u89c6\u7ebf\u65b9\u5411\uff0c\u6240\u4ee5\u4e0d\u8bba\u4e2d\u95f4\u662f\u5426\u6709\u5899\u9694\u7740\uff0c\u6211\u4eec\u7684\u89c6\u7ebf\u90fd\u5230\u4e0d\u4e86 $B$ \u70b9\uff0c\u6545\u8fd9\u79cd\u60c5\u51b5\u4e00\u5b9a\u662f\u4e0d\u884c\u7684\u3002\n\n0. \u7ebf\u6bb5 $AB$ \u4e0d\u548c\u955c\u5b50\u76f8\u4ea4\u4e5f\u4e0d\u548c\u5899\u76f8\u4ea4\n\n\t\u6211\u4eec\u76f4\u63a5\u4ece $A$ \u770b\u5411 $B$ \u5373\u53ef\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ef\u884c\u3002\n\n0. \u7ebf\u6bb5 $AB$ \u4e0d\u548c\u955c\u5b50\u76f8\u4ea4\u4f46\u662f\u548c\u5899\u76f8\u4ea4\n\n\t\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd0\u7528\u5e73\u9762\u955c\u6210\u50cf\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u77e5\u9053\uff1a\u53ea\u8981\u6211\u4eec\u53ef\u4ee5\u5728\u955c\u5b50\u91cc\u770b\u89c1 $B$ \u70b9\u7684\u865a\u50cf\uff0c\u90a3\u4e48\u5c31\u53ef\u884c\u3002\n   \n   \u6211\u4eec\u518d\u4e00\u6b21\u5206\u7c7b\u8ba8\u8bba\uff1a\u8bbe $B^{'}$ \u662f $B$ \u70b9\u5728\u955c\u5b50\u91cc\u7684\u865a\u50cf\u3002\n   \n   I. \u7ebf\u6bb5 $AB^{'}$ \u548c\u955c\u5b50\u4e0d\u76f8\u4ea4\n   \t\n   \t\u5e73\u9762\u955c\u6210\u50cf\u544a\u8bc9\u4f60\u770b\u4e0d\u5230 $B$\u3002\n   \n   \u8fd9\u65f6\u6211\u4eec\u518d\u8bbe \u7ebf\u6bb5 $AB^{'}$ \u548c\u955c\u5b50\u4ea4\u70b9\u4e3a $O$\n   \n   II. $AO$ \u548c $OB$ \u4e2d\u5b58\u5728\u4e00\u6761\u548c\u5899\u76f8\u4ea4\n   \t\n   \t\u4f1a\u88ab\u6321\u4f4f\uff0c\u81ea\u7136\u662f\u4e0d\u884c\u7684\u3002\n   \n   III. $AO$ \u548c $OB$ \u4e2d\u4efb\u610f\u4e00\u6761\u90fd\u4e0d\u548c\u5899\u76f8\u4ea4\n   \t\n   \t\u8fd9\u4e00\u60c5\u51b5\u4e0b\u53ef\u4ee5\u3002\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u6574\u9053\u9898\u3002\n   \n\u4f46\u662f\u4e3a\u4ec0\u4e48\u8bf4\u8fd9\u9053\u9898\u76ee\u7ec6\u8282\u5462\uff1f\n\n\u6211\u4eec\u5f00\u5eb7\u5eb7\u6837\u4f8b\uff1a\u8fd9\u662f\u6837\u4f8b4\n\n```\n0 0\n10 0\n100 100 101 101\n1 0 3 0\n```\n\n\u53ef\u4ee5\u8fc5\u901f\u53d1\u73b0**\u955c\u5b50**\u548c\u4e24\u70b9\u662f**\u5171\u7ebf**\u7684\uff0c\u800c\u8fd9\u4e2a\u6837\u4f8b\u7684\u7b54\u6848\u4e3a```YES```\uff0c\u6240\u4ee5**\u955c\u5b50\u662f\u4e0d\u8ba1\u539a\u5ea6**\u7684\u3002\n\nbut,\u6709\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u662f\u8fd9\u6837\u7684\uff1a\n\n```\n0 0\n3 0\n1 0 2 0\n-10 2 -12 2\n```\n\n\u8fd9\u79cd\u60c5\u51b5\u4e0b**\u5899**\u548c\u4e24\u70b9\u662f**\u5171\u7ebf**\u7684\uff0c\u800c\u8fd9\u4e2a\u6d4b\u8bd5\u70b9\u7684\u7b54\u6848\u4e3a```NO```\uff0c\u6240\u4ee5**\u5899\u662f\u8ba1\u539a\u5ea6\u7684**\u3002\n\n\u6240\u4ee5\u8fd8\u9700\u8981**\u7279\u5224\u4e00\u4e0b\u5171\u7ebf\u7684\u60c5\u51b5**\u3002\n\n\u6574\u9053\u9898\u76ee\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u6700\u540e\u7684\u6700\u540e\uff0c\u6ce8\u610f\u4f60\u4ee3\u7801\u7684\u8fdb\u5ea6\u95ee\u9898\n\n- **Codes**\n\n\u8f7b\u55b7\u7801\u98ce\uff0c\u5b58\u5728\u95ee\u9898\u8fd8\u8bf7\u6307\u51fa\u3002\n\n```cpp\n// Problem: CF32E Hide-and-Seek\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/CF32E\n// Memory Limit: 250 MB\n// Time Limit: 2000 ms\n// Date:2023-02-18 13:46:44\n// By:SmallBlack\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include<bits/stdc++.h>\nusing namespace std;\ninline long long read()\n{\n\tlong long s=0,k=1;\n\tchar c=getchar();\n\twhile(!isdigit(c))\n\t{\n\t\tk=(c=='-')?-1:1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c))\n\t{\n\t\ts=s*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn s*k;\n}\n#define d read()\n#define ll long long\n#define Maxn 10000\n#define Size 10000\n#define pb push_back\n#define mp make_pair\n#define dou double\n#define Vector Point\n#define Re register int\nconst dou eps=1e-6;\ninline int dcmp(dou a){return ((a<-eps)?(-1):((a>eps)?1:0));}\ninline dou Abs(dou a){return a*dcmp(a);}\nstruct Point\n{\n\tdou x,y;\n\tPoint(){x=y=0;}\n\tPoint(dou X,dou Y){x=X,y=Y;}\n\tPoint(int X,int Y){x=X,y=Y;}\n\tPoint(ll X,ll Y){x=X,y=Y;}\n\tinline Point in(){scanf(\"%lf%lf\",&x,&y);return *this;}\n\tinline void out(){printf(\"%.2lf %.2lf\",x,y);}\n\tinline bool operator<(const Point &a){return (a.x==x)?(y<a.y):(x<a.x);}\n};\ninline dou Dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ninline dou Cro(Vector a,Vector b){return a.x*b.y-b.x*a.y;}\ninline dou Len(Vector a){return sqrt(Dot(a,a));}\ninline dou Tan(Vector a){return atan2(a.y,a.x);};\ninline dou Angle(Vector a,Vector b){return acos(Dot(a,b)/Len(a)/Len(b));}\ninline Vector Normal(Vector a){return Vector(-a.y,a.x);}\ninline Vector operator+(Vector a,Vector b){return Vector(a.x+b.x,a.y+b.y);}\ninline Vector operator-(Vector a,Vector b){return Vector(a.x-b.x,a.y-b.y);}\ninline Vector operator*(Vector a,dou b){return Vector(a.x*b,a.y*b);}\ninline Vector operator/(Vector a,dou b){return Vector(a.x/b,a.y/b);}\ninline bool operator==(Vector a,Vector b)\n\t{return !dcmp(a.x-b.x)&&!dcmp(a.y-b.y);}\ninline Point turn_P0(Point a,dou eta)\n{\n\tdou x=a.x*cos(eta)+a.y*sin(eta);\n\tdou y=a.y*cos(eta)-a.x*sin(eta);\n\treturn Point(x,y);\n}\ninline Point turn_P(Point a,Point b,dou eta)\n{\n\tPoint p=a-b;\n\tdou x=p.x*cos(eta)+p.y*sin(eta);\n\tdou y=p.y*cos(eta)-p.x*sin(eta);\n\treturn Point(x+b.x,y+b.y);\n}\nstruct Line\n{\n\tPoint A,B;\n\tdou k;\n\tLine(){A=B=Point(0,0),k=1;}\n\tLine(Point a,Point b):A(a),B(b),k(Tan(b-a)){}\n\tinline bool isOn(Point p){return dcmp(Cro(p-A,p-B))==0;}\n\tinline bool operator==(const Line &l)\n\t{\n\t\tdou x=k-l.k;\n\t\twhile(x<0) x+=acos(-1);\n\t\twhile(x>=acos(-1)) x-=acos(-1);\n\t\tif(dcmp(x)) return 0;\n\t\treturn isOn(l.A);\n\t}\n\tinline Point FootPoint(Point p)\n\t{\n\t\tVector x=p-A,y=p-B,z=B-A;\n\t\tdou len1=Dot(x,z)/Len(z),len2=-1.00*Dot(y,z)/Len(z);\n\t\treturn A+z*(len1/(len1+len2));\n\t}\n\tinline Point Symmetry(Point p){return p+(FootPoint(p)-p)*2;}\n\tinline Point operator*(const Line &l)\n\t{\n\t\tif(*this==l) return A;\n\t\tVector x=B-A,y=l.B-l.A,z=A-l.A;\n\t\treturn A+x*(Cro(y,z)/Cro(x,y));\n\t}\n};\nstruct Segment\n{\n\tPoint A,B;\n\tSegment(Point a=Point(0,0),Point b=Point(0,0)):A(a),B(b){}\n\tinline Line toLine(){return Line(A,B);}\n\tinline bool isOn(Point p)\n\t{\n\t\tdou X1=min(A.x,B.x),X2=max(A.x,B.x);\n\t\tdou Y1=min(A.y,B.y),Y2=max(A.y,B.y);\n\t\treturn toLine().isOn(p)&&(X1<=p.x)&&(p.x<=X2)&&(Y1<=p.y)&&(p.y<=Y2);\n\t}\n\tinline bool isCrossing_L(Line l){return isOn(l*Line(A,B));}\n\tinline bool isCrossing_S(Segment S)\n\t{\n\t\tif(toLine()==S.toLine()&&(S.isOn(A)||S.isOn(B)||isOn(S.A)||isOn(S.B)))\n\t\t\treturn 1;\n\t\telse if(toLine()==S.toLine()) return 0;\n\t\tPoint O=(toLine()*S.toLine());\n\t\treturn isOn(O)&&S.isOn(O);\n\t}\n};\nint main()\n{\n\tPoint A,B;\n\tA.in(),B.in();\n\tSegment S(A,B);\n\tA.in(),B.in();\n\tSegment W(A,B);\n\tA.in(),B.in();\n\tSegment M(A,B);\n\tif(M.toLine()==S.toLine())\n\t{\n\t\tif(S.isCrossing_S(W)) puts(\"NO\");\n\t\telse puts(\"YES\");\n\t\treturn 0;\n\t}else if(S.isCrossing_S(M)) return 0&puts(\"NO\");\n\tif(!S.isCrossing_S(W)&&!S.isCrossing_S(M))\treturn 0&puts(\"YES\");\n\tPoint B1=M.toLine().Symmetry(S.B);\n\tif(!M.isCrossing_S(Segment(S.A,B1))) return 0&puts(\"NO\");\n\tPoint O=M.toLine()*Line(S.A,B1);\n\tSegment S1(S.A,O),S2(O,S.B);\n\tif(!S1.isCrossing_S(W)&&!S2.isCrossing_S(W)) return 0&puts(\"YES\");\n\telse puts(\"NO\");\n}\n```",
        "postTime": 1676709717,
        "uid": 185048,
        "name": "SmallBlack",
        "ccfLevel": 0,
        "title": "CF32E"
    }
]