[
    {
        "content": "\u6b22\u8fce\u5230[\u6211\u7684\u535a\u5ba2](https://ouuan.github.io/CF235C-Cyclical-Quest%EF%BC%88SAM%EF%BC%89/)\u9605\u8bfb\u3002\n\n# \u9898\u76ee\u94fe\u63a5\n\n[\u6d1b\u8c37](https://www.luogu.org/problemnew/show/CF235C)\n\n[CF problemset](https://codeforces.com/problemset/problem/235/C)\n\n[CF contest](https://codeforces.com/contest/235/problem/C)\n\n# \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 $s$ \u548c $n$ \u4e2a\u5b57\u7b26\u4e32 $x_{1..n}$\uff0c\u5bf9\u6bcf\u4e2a $x_i$\uff0c\u6c42\u6709\u591a\u5c11\u4e2a $s$ \u7684\u5b50\u4e32\u53ef\u4ee5\u7531 $x_i$ \u65cb\u8f6c\u5f97\u5230\u3002\n\n\u65cb\u8f6c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c31\u662f\u628a\u5b83\u7684\u4e00\u4e2a\u524d\u7f00\u79fb\u5230\u540e\u9762\uff0c\u5982 `abcd` \u53ef\u4ee5\u65cb\u8f6c\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u6709 `abcd`\uff0c`bcda`\uff0c`cdab`\uff0c`dabc`\u3002\n\n# \u7b80\u8981\u505a\u6cd5\n\n\u5bf9 $s$ \u5efa SAM\uff0c\u628a $x_i$ \u65cb\u8f6c\u5f97\u5230\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7528 SAM \u8bfb\u5165\uff0c\u5c31\u53ef\u4ee5\u6c42\u7b54\u6848\u4e86\u3002\uff08SAM \u6c42\u5b50\u4e32\u51fa\u73b0\u6b21\u6570\u662f\u7ecf\u5178\u95ee\u9898\uff0c\u53ef\u4ee5\u53c2\u8003[\u6211\u7684\u535a\u5ba2](https://ouuan.github.io/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E5%AD%90%E4%B8%B2%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0)\uff09\n\n\u5206\u5f00\u8bfb\u5165\u6bcf\u4e2a $x_i$ \u65cb\u8f6c\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u663e\u7136\u4f1a\u8d85\u65f6\uff0c\u7136\u800c\uff0cSAM \u8bfb\u5165\u5b57\u7b26\u4e32\u662f\u652f\u6301\u5220\u9664\u9996\u5b57\u7b26\u7684\uff1a\u8bb0\u5f55\u5f53\u524d\u8bfb\u5165\u7684\u957f\u5ea6 $l$ \u4ee5\u53ca\u6240\u5904\u72b6\u6001 $u$\uff0c\u5220\u9664\u5b57\u7b26\u5c31\u628a $l$ \u51cf\u4e00\uff0c\u82e5\u51cf\u4e00\u540e $l=len(parent(u))$\uff0c\u5219\u8f6c\u79fb\u5230 $parent(u)$\uff08\u628a $u$ \u8d4b\u503c\u4e3a $parent(t)$\uff09\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u7684\u65f6\u5019\u5f53\u524d\u72b6\u6001\u6ca1\u6709\u8fd9\u4e2a\u5b57\u7b26\u7684\u51fa\u8fb9\uff0c\u5c31\u9700\u8981\u5728 $parent$ \u6811\u4e0a\u5411\u4e0a\u8df3\uff0c\u76f4\u5230\u6709\u8fd9\u4e2a\u5b57\u7b26\u7684\u51fa\u8fb9\uff0c\u540c\u65f6\u66f4\u65b0 $l$ \u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5220\u9664\u5b57\u7b26\u524d\u5c31\u8981\u5148\u5224\u65ad $l$ \u4e0e\u9700\u8981\u4fdd\u7559\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7684\u5173\u7cfb\u3002\u5177\u4f53\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u53ca\u6ce8\u91ca\u3002\n\n\u6240\u4ee5\uff0c\u5148\u8bfb\u5165 $x_i$ \u7edf\u8ba1\u7b54\u6848\uff0c\u518d\u5220\u53bb\u9996\u5b57\u7b26\u8bfb\u5165 $x_i[0]$ \u7edf\u8ba1\u7b54\u6848\uff0c\u5220\u53bb\u9996\u5b57\u7b26\u8bfb\u5165 $x_i[1]$ \u7edf\u8ba1\u7b54\u6848\u2026\u2026\u5c31\u53ea\u7528\u8bfb\u5165 $O(len(x_i))$ \u4e2a\u5b57\u7b26\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u53bb\u91cd\u3002$s$ \u7684\u4e00\u4e2a\u5b50\u4e32\u53ef\u80fd\u53ef\u4ee5\u548c $x_i$ \u4e0d\u540c\u7684\u65cb\u8f6c\u5339\u914d\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6709\u4e24\u4e2a\u65b9\u6cd5\uff0c\u7b2c\u4e00\u4e2a\u662f\u6c42\u51fa $x_i$ \u7684\u5468\u671f\uff08\u53ef\u4ee5\u7528 kmp \u6c42\uff09\uff0c\u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u662f\u5728 SAM \u4e0a\u6253\u6807\u8bb0\u3002\u6211\u7528\u7684\u662f\u6253\u6807\u8bb0\u7684\u65b9\u6cd5\uff0c\u5177\u4f53\u7ec6\u8282\u8fd8\u662f\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u53ca\u6ce8\u91ca\u3002\n\n# \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdio>\n\nusing namespace std;\n\nconst int N=1000010;\n\nstruct Node\n{\n\tint len,par,ch[26],vis,cnt;\n} sam[N<<1];\n\nvoid insert(int x);\nvoid read(int x);\nvoid del();\nvoid calc();\nvoid add(int u,int v);\nvoid dfs(int u);\n\nchar s[N];\nint head[N<<1],nxt[N<<1],to[N<<1],cnt;\nint p,tot,n,m,l,u,tim,ans;\n\nint main()\n{\n\tint i;\n\t\n\tscanf(\"%s%d\",s,&n);\n\t\n\tsam[0].par=-1;\n\tfor (i=0;s[i];++i) insert(s[i]-'a');\n\tfor (i=1;i<=tot;++i) add(sam[i].par,i);\n\tdfs(0);\n\t\n\tfor (tim=1;tim<=n;++tim)\n\t{\n\t\tscanf(\"%s\",s);\n\t\tm=strlen(s);\n\t\tans=u=l=0;\n\t\tfor (i=0;i<m;++i) read(s[i]-'a');\n\t\tcalc();\n\t\tfor (i=0;i<m-1;++i)\n\t\t{\n\t\t\tread(s[i]-'a');\n\t\t\tdel();\n\t\t\tcalc();\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\t\n\treturn 0;\n}\n\nvoid read(int x) //\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\n{\n\twhile (u&&!sam[u].ch[x]) l=sam[u=sam[u].par].len; //\u5411\u4e0a\u8df3\u76f4\u81f3\u6709\u8fd9\u4e2a\u5b57\u7b26\u7684\u51fa\u8fb9\n\tif (sam[u].ch[x])\n\t{\n\t\t++l;\n\t\tu=sam[u].ch[x];\n\t}\n}\n\nvoid del() //\u5220\u9664\u9996\u5b57\u7b26\n{\n\tif (l>m&&--l==sam[sam[u].par].len) u=sam[u].par; //m\u8868\u793a\u5f53\u524dxi\u7684\u957f\u5ea6\uff0c\u53ea\u6709l>m\u7684\u65f6\u5019\u624d\u5220\u9664\n}\n\nvoid calc() //\u8ba1\u7b97\u5f53\u524d\u7684\u7b54\u6848\n{\n\tif (l==m&&sam[u].vis<tim) //\u53ea\u6709\u5f53\u524d\u8bfb\u5165\u7684\u4e32\u957f\u5ea6\u6070\u597d\u4e3am\u4e14\u5f53\u524d\u72b6\u6001\u6ca1\u6709\u6253\u4e0a\u6807\u8bb0\u65f6\u624d\u7edf\u8ba1\u7b54\u6848\n\t{\n\t\tans+=sam[u].cnt;\n\t\tsam[u].vis=tim; //\u6253\u6807\u8bb0\n\t}\n}\n\nvoid insert(int x) //\u5411SAM\u4e2d\u63d2\u5165\u5b57\u7b26\uff0c\u6709\u4eba\u628a\u8fd9\u4e2a\u51fd\u6570\u53eb\u505aextend\n{\n\tint np=++tot;\n\tsam[np].len=sam[p].len+1;\n\tsam[np].cnt=1;\n\twhile (~p&&!sam[p].ch[x])\n\t{\n\t\tsam[p].ch[x]=np;\n\t\tp=sam[p].par;\n\t}\n\tif (p==-1) sam[np].par=0;\n\telse\n\t{\n\t\tint q=sam[p].ch[x];\n\t\tif (sam[q].len==sam[p].len+1) sam[np].par=q;\n\t\telse\n\t\t{\n\t\t\tint nq=++tot;\n\t\t\tsam[nq].len=sam[p].len+1;\n\t\t\tmemcpy(sam[nq].ch,sam[q].ch,sizeof(sam[q].ch));\n\t\t\tsam[nq].par=sam[q].par;\n\t\t\tsam[q].par=sam[np].par=nq;\n\t\t\twhile (~p&&sam[p].ch[x]==q)\n\t\t\t{\n\t\t\t\tsam[p].ch[x]=nq;\n\t\t\t\tp=sam[p].par;\n\t\t\t}\n\t\t}\n\t}\n\tp=np;\n}\n\nvoid add(int u,int v) //\u52a0\u8fb9\uff0c\u7528\u4e8e\u904d\u5386parent\u6811\n{\n\tnxt[++cnt]=head[u];\n\thead[u]=cnt;\n\tto[cnt]=v;\n}\n\nvoid dfs(int u) //\u904d\u5386parent\u6811\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u72b6\u6001\u7684\u51fa\u73b0\u6b21\u6570\n{\n\tint i,v;\n\tfor (i=head[u];i;i=nxt[i])\n\t{\n\t\tv=to[i];\n\t\tdfs(v);\n\t\tsam[u].cnt+=sam[v].cnt;\n\t}\n}\n```",
        "postTime": 1551246589,
        "uid": 49742,
        "name": "ouuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF235C \u3010Cyclical Quest\u3011"
    },
    {
        "content": "[LINK](https://www.luogu.com.cn/problem/CF235C)\n\n**\u9898\u610f**\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e3b\u4e32$S$\u548c$n$\u4e2a\u8be2\u95ee\u4e32\uff0c\u6c42\u6bcf\u4e2a\u8be2\u95ee\u4e32\u7684\u6240\u6709\u5faa\u73af\u540c\u6784\u5728\u4e3b\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u603b\u548c\u3002\n\n---\n\n\u5bf9$s$\u5efa\u7acb$SAM$,\u987a\u4fbf\u6c42\u51fa$siz[p]$\u8868\u793a$p$\u4ee3\u8868\u7684\u96c6\u5408\u5728$s$\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\n\n\u628a\u6bcf\u4e2a\u8be2\u95ee\u4e32$t$\u590d\u5236\u4e00\u4efd\u63a5\u5728\u540e\u9762,\u6211\u4eec\u5339\u914d\u8fd9\u4e2a\u65b0\u4e32$T$\n\n**\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u4e3a,\u80fd\u5339\u914d\u591a\u5c11$T$\u7684\u5b50\u4e32\u957f\u5ea6\u4e3a$|t|$**\n\n\u5c31\u662f$T$\u4e32\u5728$SAM$\u4e0a\u8dd1,\u770b\u770b\u5bf9\u4e8e$T$\u6bcf\u4e2a\u524d\u7f00$[1,i]$\u662f\u5426\u6700\u5927\u5339\u914d\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e$|t|$\n\n\u8bbe\u5339\u914d$[1,i]$\u8dd1\u5230\u4e86$SAM$\u4e0a\u7684$p$\u70b9,\u5339\u914d\u957f\u5ea6\u662f$l$\n\n\u82e5\u5f53\u524d\u5339\u914d\u957f\u5ea6$l$\u5927\u4e8e\u7b49\u4e8e$|t|$\u5c31\u662f\u5339\u914d\u6210\u529f\n\n\u90a3\u4e48\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f\u591a\u5c11\u5462??\u662f\u52a0\u4e0a$siz[p]$\u5417??\n\n\u5f53\u7136\u4e0d\u662f,$siz[p]$\u662f$[i-l+1,i]$\u7684\u51fa\u73b0\u6b21\u6570,\u6211\u4eec\u9700\u8981\u6c42\u7684\u662f$[i-|t|+1,i]$\u7684\n\n\u90a3\u5c31\u7b80\u5355\u4e86,\u6211\u4eec\u76f4\u5230$parent$\u6811\u4e0a\u7684\u7956\u5148\u662f\u5b69\u5b50\u7684\u540e\u7f00,\u6211\u4eec\u4e00\u76f4\u5f80\u4e0a$father$\n\n\u76f4\u5230\u7236\u4eb2\u7684$longest$\u5c0f\u4e8e$|t|$\n\n\u6b64\u65f6\u7684$p$\u70b9\u7684\u96c6\u5408\u4e2d\u5fc5\u7136\u5305\u62ec$[i-|t|+1,i]$\u8fd9\u4e2a\u5b50\u4e32,\u52a0\u4e0a$siz[p]$\u5373\u53ef\n\n\u4e0d\u8fc7\u5faa\u73af\u540c\u6784\u53ef\u80fd\u76f8\u7b49\u554a...\u6253\u4e2a\u6807\u8bb0\u5373\u53ef,\u6bcf\u4e2a\u8282\u70b9\u53ea\u7b97\u4e00\u6b21\u8d21\u732e\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 2e6+10;\nint n,id=1,ed=1,len;\nchar a[maxn];\nstruct SAM\n{\n\tint zi[26],len,fa;\n}sam[maxn]; int siz[maxn];\nvoid insert(int c)\n{\n\tint p = ed, np = ++id; ed = id;\n\tsam[np].len = sam[p].len+1; siz[np] = 1;\n\tfor( ;p&&!sam[p].zi[c];p=sam[p].fa )\tsam[p].zi[c] = np;\n\tif( p==0 )\tsam[np].fa = 1;\n\telse\n\t{\n\t\tint q = sam[p].zi[c];\n\t\tif( sam[q].len==sam[p].len+1 )\tsam[np].fa = q;\n\t\telse\n\t\t{\n\t\t\tint nq = ++id; \n\t\t\tsam[nq] = sam[q], sam[nq].len = sam[p].len+1;\n\t\t\tsam[q].fa = sam[np].fa = nq;\n\t\t\tfor( ;p&&sam[p].zi[c]==q;p=sam[p].fa )\tsam[p].zi[c] = nq;\n\t\t}\n\t}\n} \nint c[maxn],rk[maxn],vis[maxn];\nvoid tuopu()\n{\n\tfor(int i=1;i<=id;i++)\tc[sam[i].len]++;\n\tfor(int i=1;i<=id;i++)\tc[i] += c[i-1];\n\tfor(int i=1;i<=id;i++)\trk[c[sam[i].len]--] = i;\n\tfor(int i=id;i>=1;i--)\n\t{\n\t\tint u = rk[i], fa = sam[u].fa;\n\t\tsiz[fa] += siz[u];\n\t}\n}\nint main()\n{\n\tcin >> ( a+1 ); len = strlen( a+1 );\n\tfor(int i=1;i<=len;i++)\tinsert( a[i]-'a' );\n\ttuopu();\n\tcin >> n;\n\tfor(int w=1;w<=n;w++)\n\t{\n\t\tcin >> ( a+1 ); len = strlen( a+1 );\n\t\tfor(int i=1;i<=len;i++)\ta[i+len] = a[i];\n\t\tint ans = 0, p = 1, l = 0;\n\t\tfor(int i=1;i<=len+len;i++)\n\t\t{ \n\t\t\tint c = a[i]-'a';\n\t\t\tif( sam[p].zi[c] )\tp = sam[p].zi[c],l++;\n\t\t\telse\n\t\t\t{\n\t\t\t\twhile( p&&!sam[p].zi[c] )\tp = sam[p].fa;\n\t\t\t\tif( p==0 )\tp = 1, l = 0;\n\t\t\t\telse\tl = sam[p].len+1, p = sam[p].zi[c];\n\t\t\t}\n\t\t\tif( l>=len )\n\t\t\t{\n\t\t\t\twhile( sam[sam[p].fa].len>=len )\tp = sam[p].fa;\n\t\t\t\tif( vis[p]!=w )\n\t\t\t\t\tans+=siz[p],vis[p] = w;\n\t\t\t\tl = len;\n\t\t\t}\n\t\t}\n\t\tcout << ans << endl;\n\t}\n}\n```",
        "postTime": 1614065055,
        "uid": 299810,
        "name": "issue_is_fw",
        "ccfLevel": 0,
        "title": "df"
    },
    {
        "content": "\u7ffb\u4e86\u4e00\u4e0b\u9898\u89e3\u533a\u4f3c\u4e4e\u6ca1\u6709\u548c\u6211\u4e00\u6837\u7684\u505a\u6cd5\uff1f\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e3b\u4e32 $S$ \u548c\u591a\u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u4e32\u7684\u6240\u6709\u672c\u8d28\u4e0d\u540c\u5faa\u73af\u540c\u6784\u5728 $S$ \u4e2d\u7684\u51fa\u73b0\u4e2a\u6570\u3002\n\n## \u9898\u89e3\n\n\u8003\u8651\u5bf9 $S$ \u5efa\u51fa SAM\uff0c\u5e76\u628a\u8be2\u95ee\u4e32\u590d\u5236\u4e00\u4efd\u89e3\u51b3\u5faa\u73af\u540c\u6784\u95ee\u9898\u3002\u6211\u4eec\u7528\u5f97\u5230\u7684\u65b0\u4e32\u5728 SAM \u4e0a\u8dd1\u5339\u914d\uff0c\u5982\u679c\u5f53\u524d\u5339\u914d\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u8be2\u95ee\u4e32\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u5f53\u524d\u4e32\u5c5e\u4e8e\u54ea\u4e2a $\\rm endpos$ \u7b49\u4ef7\u7c7b\u5e76\u7edf\u8ba1\u7b54\u6848\u3002\u5177\u4f53\u5730\uff0c\u5c31\u662f\u627e\u5230 $\\rm parent$ \u6811\u4e0a\u9762\u7684\u4e00\u4e2a\u7ed3\u70b9 $u$\uff0c\u6ee1\u8db3 $\\text{len}(u)\\geq l\\land \\text{len}(\\text{link}_u)<l$\u3002\u500d\u589e\u8df3\u5373\u53ef\u3002\u56e0\u4e3a\u9700\u8981\u672c\u8d28\u4e0d\u540c\uff0c\u6240\u4ee5\u7edf\u8ba1\u5b8c\u4e4b\u540e\u9700\u8981\u6253\u4e0a\u6807\u8bb0\u3002\u56e0\u4e3a $\\rm endpos$ \u96c6\u5408\u53ea\u6709\u5305\u542b\u548c\u4e0d\u4ea4\u5173\u7cfb\uff0c\u800c\u6b64\u5904\u4e0d\u53ef\u80fd\u5305\u542b\uff0c\u6240\u4ee5\u4e0d\u4f1a\u7b97\u91cd\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O((|S|+\\sum x_i)\\log |S|)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define db double\n#define pb push_back\n#define mp make_pair\n#define pii pair<int, int>\nusing namespace std;\ninline int read() {\n\tint x = 0; bool op = 0;\n\tchar c = getchar();\n\twhile(!isdigit(c))op |= (c == '-'), c = getchar();\n\twhile(isdigit(c))x = (x << 1) + (x << 3) + (c ^ 48), c = getchar();\n\treturn op ? -x : x;\n}\nconst int N = 2000010;\nint tot, lst, top;\nint lk[N], nxt[N], len[N], cnt[N], sz[N], p[N], tr[N][26], stk[N], vis[N], dp[N][25];\nchar s[N];\nvoid extend(int c) {\n\tint p = lst, cur = ++tot;\n\tlen[cur] = len[lst] + 1; sz[cur] = 1;\n\twhile(p != -1 && tr[p][c] == 0)tr[p][c] = cur, p = lk[p];\n\tif(p == -1)lk[cur] = 0;\n\telse {\n\t\tint q = tr[p][c];\n\t\tif(len[q] == len[p] + 1)lk[cur] = q;\n\t\telse {\n\t\t\tint cp = ++tot;\n\t\t\tlk[cp] = lk[q]; len[cp] = len[p] + 1;\n\t\t\tmemcpy(tr[cp], tr[q], sizeof(tr[q]));\n\t\t\twhile(p != -1 && tr[p][c] == q)tr[p][c] = cp, p = lk[p];\n\t\t\tlk[q] = lk[cur] = cp;\n\t\t}\n\t}\n\tlst = cur;\n\treturn ;\n} \nvoid build(char *s) {\n\tint l = strlen(s); lk[0] = -1;\n\tfor(int i = 0; i < l; i++)extend(s[i] - 'a');\n\tfor(int i = 1; i <= tot; i++)cnt[len[i]]++;\n\tfor(int i = 1; i <= tot; i++)cnt[i] += cnt[i - 1];\n\tfor(int i = tot; i; i--)p[cnt[len[i]]--] = i;\n\tfor(int i = 1; i <= tot; i++) {\n\t\tint now = p[i];\n\t\tdp[now][0] = lk[now];\n\t\tfor(int j = 1; j <= 20; j++)dp[now][j] = dp[dp[now][j - 1]][j - 1];\n\t} \n\tfor(int i = tot; i; i--) {\n\t\tint now = p[i];\n\t\tsz[lk[now]] += sz[now];\n\t}\n\treturn ;\n}\nint calc(int u, int l) {\n\tfor(int i = 20; i >= 0; i--) {\n\t\tif(len[dp[u][i]] >= l)u = dp[u][i];\n\t}\n\tif(vis[u] == 0) {vis[u] = 1; stk[++top] = u; return sz[u];}\n\treturn 0;\n}\nvoid solve() {\n\tscanf(\"%s\", s);\n\tint l = strlen(s), res = 0;\n\tfor(int i = 0; i < l; i++)s[i + l] = s[i];\n\tfor(int i = 0, u = 0, ml = 0; i < l * 2; i++) {\n\t\tint c = s[i] - 'a';\n\t\twhile(u != -1 && tr[u][c] == 0)u = lk[u], ml = len[u];\n\t\tif(u == -1) {u = ml = 0;}\n\t\telse {u = tr[u][c]; ml++;}\n\t\tif(ml >= l)res += calc(u, l);\n\t}\n\tprintf(\"%d\\n\", res);\n\twhile(top)vis[stk[top--]] = 0;\n\treturn ;\n}\nint main() {\n\tscanf(\"%s\", s);\n\tbuild(s);\n\tint test = read();\n\twhile(test--)solve();\n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1628408976,
        "uid": 149192,
        "name": "__gcd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u3010CF235C Cyclical Quest \u9898\u89e3\u3011"
    },
    {
        "content": "> [CF235C Cyclical Quest \u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF235C)\n\n> \u9898\u610f\u7b80\u8ff0\uff1a\u7ed9\u51fa $s$\uff0c\u591a\u6b21\u8be2\u95ee\u7ed9\u51fa\u5b57\u7b26\u4e32 $t$ \u6240\u6709\u5faa\u73af\u540c\u6784\u4e32**\u53bb\u91cd**\u540e\u5728 $s$ \u4e2d\u51fa\u73b0\u6b21\u6570\u4e4b\u548c\u3002\n\n\u672c\u6587\u8282\u9009\u81ea [\u6211\u7684 SAM \u505a\u9898\u7b14\u8bb0](https://www.cnblogs.com/alex-wei/p/Suffix_Automaton_Involution.html)\uff0c\u6807\u53f7\u4e3a XII\u3002\n\n---\n\n\u5982\u679c\u6ca1\u6709\u5faa\u73af\u540c\u6784\u90a3\u4e48\u5c31\u662f ACAM/SA/SAM \u677f\u5b50\u9898\u3002\u5173\u4e8e\u5faa\u73af\u540c\u6784\u7684\u4e00\u4e2a\u5e38\u89c1\u5957\u8def\u5c31\u662f\u5c06 $t$ \u590d\u5236\u4e00\u4efd\u5728\u540e\u9762\u3002\u90a3\u4e48\u6211\u4eec\u5982\u6cd5\u70ae\u5236\uff0c\u7528 $2t$ \u5728 SAM \u4e0a\u8dd1\u5339\u914d\u3002\u5982\u679c**\u5f53\u524d\u957f\u5ea6\u5927\u4e8e $|t|$**\uff0c\u90a3\u4e48\u5c31\u4e0d\u65ad**\u5c06\u5339\u914d\u957f\u5ea6 $d$ \u51cf\u4e00**\uff0c\u540c\u65f6\u5224\u65ad**\u5f53\u524d\u72b6\u6001\u662f\u5426\u80fd\u8868\u793a\u957f\u5ea6\u4e3a $d$ \u7684\u5b57\u7b26\u4e32**\uff08\u5373\u662f\u5426\u6709 $len(link(p))<d\\leq len(p)$\uff09\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u8981\u5411\u4e0a\u8df3\u3002\n\n\u6ce8\u610f\u5230\u9898\u76ee\u9700\u8981\u53bb\u91cd\uff0c\u540c\u65f6\u4e24\u4e2a\u957f\u5ea6\u4e3a $|t|$ \u7684 $s$ \u7684\u4e0d\u540c\u5b50\u4e32\u4e00\u5b9a\u88ab\u4e0d\u540c\u7684\u72b6\u6001\u8868\u793a\uff0c\u6240\u4ee5\u8ba1\u7b97\u4e00\u4e2a\u4f4d\u7f6e\u8d21\u732e\u540e\u6253\u4e0a\u6807\u8bb0\uff0c\u540e\u9762\u518d\u9047\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u5c31\u4e0d\u7b97\u8d21\u732e\u4e86\uff0c\u6bcf\u6b21\u67e5\u8be2\u540e\u64a4\u9500\u6807\u8bb0\u5373\u53ef\uff08\u53ef\u4ee5\u7528 vector \u8bb0\u5f55\u6253\u4e0a\u6807\u8bb0\u7684\u4f4d\u7f6e\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(|s||\\Sigma|+\\sum|t|)$\uff0c\u5176\u4e2d $\\Sigma$ \u4e3a\u5b57\u7b26\u96c6\u3002\n\n```cpp\n/*\n\tPowered by C++11.\n\tAuthor : Alex_Wei.\n*/\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll long long\n#define pb emplace_back\n\nconst int N=2e6+5;\nconst int S=26;\n\nint las,cnt;\nint son[N][S],len[N],fa[N],ed[N];\nint buc[N],id[N],vis[N];\nvoid ins(char s){\n\tint p=las,cur=++cnt,it=s-'a';\n\tlen[cur]=len[p]+1,ed[cur]++,las=cur;\n\twhile(p&&!son[p][it])son[p][it]=cur,p=fa[p];\n\tif(!p)return fa[cur]=1,void();\n\tint q=son[p][it];\n\tif(len[p]+1==len[q])return fa[cur]=q,void();\n\tint cl=++cnt;\n\tfa[cl]=fa[q],fa[q]=fa[cur]=cl,len[cl]=len[p]+1;\n\tmemcpy(son[cl],son[q],sizeof(son[q]));\n\twhile(son[p][it]==q)son[p][it]=cl,p=fa[p];\n} void build(char *s){\n\tint n=strlen(s+1); las=cnt=1;\n\tfor(int i=1;i<=n;i++)ins(s[i]);\n\tfor(int i=1;i<=cnt;i++)buc[len[i]]++;\n\tfor(int i=1;i<=cnt;i++)buc[i]+=buc[i-1];\n\tfor(int i=cnt;i;i--)id[buc[len[i]]--]=i;\n\tfor(int i=cnt;i;i--)ed[fa[id[i]]]+=ed[id[i]];\n}\n\nint n;\nchar s[N];\nint main(){\n\tscanf(\"%s%d\",s+1,&n),build(s);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%s\",s+1);\n\t\tll p=1,l=strlen(s+1),d=0,ans=0;\n\t\tvector <int> del; \n\t\tfor(int i=1;i<l*2;i++){\n\t\t\tint it=s[i>l?i-l:i]-'a';\n\t\t\twhile(p&&!son[p][it])p=fa[p],d=len[p];\n\t\t\tif(p){\n\t\t\t\tp=son[p][it],d++;\n\t\t\t\twhile(d>l)if((--d)<=len[fa[p]])p=fa[p];\n\t\t\t\tif(d>=l&&!vis[p])ans+=ed[p],vis[p]=1,del.pb(p);\n\t\t\t} else p=1;\n\t\t} cout<<ans<<endl;\n\t\tfor(int it:del)vis[it]=0;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1615025542,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF235C Cyclical Quest"
    },
    {
        "content": "\u5927\u5bb6\u90fd\u662f\u6253\u6807\u8bb0\u89e3\u6cd5\u7684\u8bf4\u2026\u2026\u56e0\u6b64\u672c\u9898\u89e3\u91c7\u7528\u7684\u662f\u627e\u51fa\u6700\u5c0f\u5faa\u73af\u8282\u7684\u89e3\u6cd5\u3002\n\n------------\n\n\u8003\u8651\u5bf9\u539f\u4e32\u5efa\u51faSAM\u3002\n\n\u5047\u5982\u6211\u4eec\u8981\u6c42\u51fa\u67d0\u4e2a\u5b50\u4e32\u672c\u8eab\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u53ea\u9700\u8981\u5728SAM\u4e0a\u6309\u987a\u5e8f\u8d70\u5230\u5176\u6240\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u7136\u540e\u8be5\u8282\u70b9\u7684 $\\text{endpos}$ \u96c6\u5408\u5927\u5c0f\u5c31\u662f\u5176\u51fa\u73b0\u6b21\u6570\u3002\n\n\u73b0\u5728\u8981\u4f60\u6c42\u51fa\u5176\u6240\u6709\u5faa\u73af\u540c\u6784\u7684\u51fa\u73b0\u6b21\u6570\u603b\u548c\u3002\u5728\u521d\u5b66SAM\u65f6\uff0c\u5927\u5bb6\u53ef\u80fd\u542c\u8bf4\u8fc7\u8fd9\u6837\u4e00\u53e5\u8bdd\uff1a\n\n\u201c\u5728SAM\u4e0a\u6cbf\u7740\u8fb9\u8d70\u76f8\u5f53\u4e8e\u5f80\u5b57\u7b26\u4e32\u540e\u9762\u52a0\u5b57\u7b26\uff0c\u5728parent tree\u4e0a\u6cbf\u7740\u8fb9\u8d70\u76f8\u5f53\u4e8e\u5f80\u5b57\u7b26\u4e32\u524d\u9762\u52a0\u5b57\u7b26\u201d\n\n\u4e8e\u662f\u6211\u4eec\u73b0\u5728\u8003\u8651\u5df2\u7ecf\u6c42\u51fa\u4e86\u67d0\u4e2a\u8be2\u95ee\u4e32\u5728SAM\u4e0a\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u3002\u5728parent tree\u4e0a\u5f80\u4e0b\u8d70\u662f\u5f80\u524d\u9762\u52a0\u5b57\u7b26\uff0c\u90a3\u4e48\u5728\u4e0a\u9762\u8df3\u7236\u4eb2\u5c31\u76f8\u5f53\u4e8e\u5728\u524d\u9762\u5220\u5b57\u7b26\u4e86\u3002\u4e8e\u662f\u8003\u8651\u5220\u9664\u6700\u524d\u9762\u4e00\u4e2a\u5b57\u7b26\u6240\u5f97\u5230\u7684\u65b0\u4e32\u6240\u5bf9\u5e94\u7684 $\\text{endpos}$ \u96c6\u5408\uff0c\u82e5\u5176\u4e0e\u5f53\u524d\u4e32\u6240\u5bf9\u5e94\u96c6\u5408\u4e0d\u540c\uff0c\u5219\u660e\u663e\u5176\u53ea\u6709\u53ef\u80fd\u662f\u5f53\u524d\u96c6\u5408\u7684\u7236\u4eb2\uff0c\u4e8e\u662f\u5f80\u4e0a\u8df3\u4e00\u6b65\u5373\u53ef\u3002\u4e0a\u8df3\u4e00\u6b65\u540e\uff0c\u4fbf\u53ef\u4ee5\u5bf9\u5411\u53f3\u79fb\u4f4d\u4e00\u4f4d\u7684\u540c\u6784\u4e32\u8fdb\u884c\u5904\u7406\u4e86\u3002\n\n\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u8ba1\u7b97\uff0c\u6211\u4eec\u53ea\u5904\u7406\u8be2\u95ee\u4e32\u7684\u6700\u5c0f\u5faa\u73af\u8282\u5185\u7684\u540c\u6784\u4e32\u3002\u6700\u5c0f\u5faa\u73af\u8282\u53ef\u4ee5\u901a\u8fc7KMP/Z/\u54c8\u5e0c\u5904\u7406\uff0c\u8fd9\u91cc\u4f7f\u7528Z\u7b97\u6cd5\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(n|\\Sigma|)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=1001000;\nint cnt=1;\nstruct Suffix_Automaton{int ch[26],fa,len;}t[N<<1];\nchar s[N];\nint S,q,sz[N<<1],Z[N];\nint Add(int x,int c){\n\tint xx=++cnt;t[xx].len=t[x].len+1,sz[xx]=1;\n\tfor(;x&&!t[x].ch[c];x=t[x].fa)t[x].ch[c]=xx;\n\tif(!x){t[xx].fa=1;return xx;}\n\tint y=t[x].ch[c];\n\tif(t[y].len==t[x].len+1){t[xx].fa=y;return xx;}\n\tint yy=++cnt;t[yy]=t[y],t[yy].len=t[x].len+1;\n\tt[y].fa=t[xx].fa=yy;\n\tfor(;x&&t[x].ch[c]==y;x=t[x].fa)t[x].ch[c]=yy;\n\treturn xx;\n}\nvector<int>v[N<<1];\nvoid dfs(int x){for(auto y:v[x])dfs(y),sz[x]+=sz[y];}\nvoid Zalgorithm(){\n\tint Centre=-1,Rpos=-1;\n\tfor(int i=1;i<S;i++){\n\t\tif(i<=Rpos)Z[i]=min(Rpos-i,Z[i-Centre]);else Z[i]=0;\n\t\twhile(i+Z[i]<S&&s[Z[i]]==s[i+Z[i]])Z[i]++;\n\t\tif(i+Z[i]>Rpos)Rpos=i+Z[i],Centre=i;\n\t}\n}\nll Cyclical(){\n\tll ret=0;\n\tfor(int i=0,j=0,x=1;i<S&&(i+Z[i]<S||!i||S%i);i++){\n\t\tif(!x)x=1;\n\t\tfor(j=max(i,j);j!=i+S;j++)if(t[x].ch[s[j%S]-'a'])x=t[x].ch[s[j%S]-'a'];else break;\n//\t\tprintf(\"%d %d %d %d\\n\",i,j,x,sz[x]);\n\t\tif(j==i+S)ret+=sz[x];\n\t\tif(j-i==t[t[x].fa].len+1)x=t[x].fa;\n\t}\n\treturn ret;\n}\nint main(){\n\tscanf(\"%s%d\",s,&q),S=strlen(s);\n\tfor(int i=0,las=1;i<S;i++)las=Add(las,s[i]-'a');\n\tfor(int i=2;i<=cnt;i++)v[t[i].fa].push_back(i);\n\tdfs(1);\n//\tfor(int i=1;i<=cnt;i++)for(int j=0;j<26;j++)if(t[i].ch[j])printf(\"%d %d %c\\n\",i,t[i].ch[j],'a'+j);\n//\tfor(int i=1;i<=cnt;i++)printf(\"%d %d\\n\",t[i].fa,t[i].len);\n//\tfor(int i=1;i<=cnt;i++)printf(\"%d \",sz[i]);puts(\"\");\n\twhile(q--){\n\t\tscanf(\"%s\",s),S=strlen(s);\n\t\tZalgorithm();\n\t\tprintf(\"%lld\\n\",Cyclical());\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1611289597,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF235C \u3010Cyclical Quest\u3011"
    },
    {
        "content": "**CF235C sol**\n\n\u8003\u8651\u5bf9\u4e8e\u5faa\u73af\u91cd\u6784\u4e32\u76f4\u63a5\u66b4\u529b\u5efa\u51fa\u6765\uff0c\u7136\u540e\u5728 SAM \u4e0a\u9762\u5339\u914d\u5373\u53ef\u3002\n\n\u4e00\u4e2a\u52a0\u5feb\u8be2\u95ee\u7684\u65b9\u6cd5\u662f\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u5355\u4e00\u4e32\u7684\u5339\u914d\u5728 SAM \u4e0a\u662f\u53ef\u4ee5\u505a\u5230\u7ebf\u6027\u7684\uff08\u52bf\u80fd\u53d6\u51b3\u4e8e\u4e32\u957f\uff09\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6784\u6210\u6ed1\u52a8\u533a\u95f4\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u632a\u52a8\u4e86\u9996\u5b57\u7b26\u5176\u5728 SAM \u4e0a\u7684\u8868\u73b0\u5f62\u5f0f\u4e3a\u5728 parent tree \u4e0a\u662f\u5426\u8981\u632a\u5230\u7236\u4eb2\u53bb\u3002\n\n\u5199\u53cc\u6307\u9488\uff0c\u663e\u7136\u5728 parent tree \u4e0a\u548c SAM \u4e0a\u7684\u8d70\u52bf\u80fd\u90fd\u662f\u4e32\u957f\u76f8\u5173\u7684\u3002\u5bf9\u4e8e\u540c\u6784\u7684\u4e32\u7531\u4e8e\u540c\u957f\u6240\u4ee5\u5728 SAM \u4e0a\u662f\u4e0d\u4f1a\u5b58\u5728\u4e8e\u540c\u4e00\u8282\u70b9\u4e0a\u7684\uff0c\u6240\u4ee5\u4e00\u4e2a\u8282\u70b9\u5982\u679c\u52a0\u4e86\u4e4b\u540e\u53ef\u4ee5\u6682\u65f6\u628a\u5f53\u524d\u8282\u70b9\u7684\u8d21\u732e\u53bb\u6389\u65b9\u4fbf\u53bb\u91cd\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(|S| + \\sum |Q|)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int Len = 1e6 + 5;\n#define ll long long\nint n,m;\nchar s[Len],ss[Len],sss[Len];\nstruct node\n{\n    int ch[26],len,fa;\n    node(){memset(ch , 0 , sizeof ch);len = fa = 0;}\n};\nstruct Node\n{\n    int next,to;\n};\nstruct Suf\n{\n    node t[Len << 1];int tot;int sz[Len << 1];\n    Node edge[Len << 2];int head[Len << 1],cnt;\n    inline void add(int from,int to)\n    {\n        edge[++ cnt].to = to;\n        edge[cnt].next = head[from];\n        head[from] = cnt;\n    }\n    Suf(){tot = 1;}\n    inline int ins(int c,int lst)\n    {\n        if(t[lst].ch[c])\n\t\t{\n\t\t\tint p = lst , q = t[lst].ch[c];\n\t\t\tif(t[q].len == t[p].len + 1) return q;\n\t\t\telse\n\t\t\t{\n\t\t\t\tint nq = ++ tot;t[nq] = t[q];\n\t\t\t\tt[nq].len = t[p].len + 1;\n\t\t\t\tt[q].fa = nq;\n\t\t\t\tfor( ; p && t[p].ch[c] == q ; p = t[p].fa) t[p].ch[c] = nq;\n\t\t\t\treturn nq;\n\t\t\t}\n\t\t}\n\t\tint p = lst;\n\t\tint np = lst = ++ tot;t[np].len = t[p].len + 1;\n\t\tfor( ; p && !t[p].ch[c] ; p = t[p].fa) t[p].ch[c] = np;\n\t\tif(!p) t[np].fa = 1;\n\t\telse\n\t\t{\n\t\t\tint q = t[p].ch[c];\n\t\t\tif(t[q].len == t[p].len + 1) t[np].fa = q;\n\t\t\telse\n\t\t\t{\n\t\t\t\tint nq = ++ tot;t[nq] = t[q];\n\t\t\t\tt[nq].len = t[p].len + 1;\n\t\t\t\tt[np].fa = t[q].fa = nq;\n\t\t\t\tfor( ; p && t[p].ch[c] == q ; p = t[p].fa) t[p].ch[c] = nq;\n\t\t\t}\t\n\t\t}\n\t\treturn np;\n\t}\n    inline int down(int x,int c){return t[x].ch[c];}\n    inline void bt(){for(int i = 2 ; i <= tot ; i ++) add(t[i].fa , i);}\n    void dfs(int x,int f)\n    {\n        for(int e = head[x] ; e ; e = edge[e].next)\n        {\n            int to = edge[e].to;\n            if(to == f) continue;\n            dfs(to , x);\n            sz[x] += sz[to];\n        }\n        //printf(\"%d %d %d %d\\n\",x,f,sz[x],t[x].len);\n    }\n}At;\n#define mk(x , y) make_pair(x , y)\nint fg[Len << 1];vector<int> Ps;\nint main()\n{\n    //freopen(\"F.in\",\"r\",stdin);\n    scanf(\"%s\",s + 1);n = strlen(s + 1);int lst = 1;\n    for(int i = 1 ; i <= n ; i ++){lst = At.ins(s[i] - 'a' , lst);At.sz[lst] ++;}\n    At.bt() , At.dfs(1 , 0);\n    scanf(\"%d\",&m);\n    while(m --)\n    {\n        //printf(\"#%d\\n\",i);\n        scanf(\"%s\",sss + 1);const int len = strlen(sss + 1);\n        for(int j = 1 ; j <= len ; j ++) ss[j] = sss[j];\n        for(int j = len + 1 ; j <= (len << 1) ; j ++) ss[j] = sss[j - len];\n        int now = 1 , l = 1 , r = 0;ll asss = 0;\n        while(r < (len << 1))\n        {\n            if(r <= (len << 1) && r - l + 1 == len && !fg[now]) \n            {\n                asss += At.sz[now];\n                fg[now] = 1;\n                Ps.push_back(now);\n            }\n            while(r - l + 1 < len && r + 1 < (len << 1)) \n            {\n                int to = At.down(now , ss[r + 1] - 'a');\n                if(!to) break;\n                now = to;\n                r ++;\n            }\n            if(r <= (len << 1) && r - l + 1 == len && !fg[now]) \n            {\n                asss += At.sz[now];\n                fg[now] = 1;\n                Ps.push_back(now);\n            }\n            while((r - l + 1 >= len || !At.down(now , ss[r + 1] - 'a')))\n            {\n                if(r >= (len << 1)) break;\n                l ++;r = max(r , l - 1);\n                if(At.t[now].fa && r - l + 1 <= At.t[At.t[now].fa].len) now = At.t[now].fa;\n            }\n            if(r != (len << 1)) now = At.down(now , ss[r + 1] - 'a');\n            r ++;\n            if(r <= (len << 1) && r - l + 1 == len && !fg[now]) \n            {\n                asss += At.sz[now];\n                fg[now] = 1;\n                Ps.push_back(now);\n            }\n        }\n        printf(\"%lld\\n\",asss);\n        for(int j = 1 ; j <= (len << 1) ; j ++) ss[j] = 0;\n        for(int j = 0 ; j < Ps.size() ; j ++) fg[Ps[j]] = 0;\n        Ps.clear();\n    }\n    return 0;\n}\n```",
        "postTime": 1664264570,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u5426\uff0c\u543e\u4e43\u5929\uff0c\u5815\u843d\u4e4b\u5929\uff01"
    },
    {
        "content": "\u5bf9\u6a21\u5f0f\u4e32\u5efa $\\text{SAM}$\u3002\n\n\u5faa\u73af\u540c\u6784\u7c7b\u578b\u7684\u9898\u76ee\uff0c\u591a\u6570\u53ef\u4ee5\u201c\u65ad\u73af\u6210\u94fe\u201d\u5373\u590d\u5236\u4e00\u6b21\u89e3\u51b3\u3002\n\n\u7ef4\u62a4\u5de6\u53f3\u6307\u9488 $lpos,rpos $ \u4ee5\u53ca\u5f53\u524d\u72b6\u6001 $u$\uff0c\u5f53\u679a\u4e3e $lpos\\in [1,n]$ \u65f6\u66f4\u65b0 $rpos$ \u4e0e $u$ \u5e76\u5728 $rpos-lpos+1=n$ \u65f6\u66f4\u65b0\u7b54\u6848\uff0c\u8fd9\u4e2a\u7b54\u6848\u4e3a\u9884\u5904\u7406\u51fa\u7684 $\\operatorname{endpos}$ \u96c6\u5408\u5927\u5c0f\uff0c\u4e5f\u5373\u51fa\u73b0\u6b21\u6570\u3002\n\n\u8003\u8651\u5339\u914d\u65f6\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n- \u5931\u914d\uff0c\u4ee5\u5f53\u524d\u679a\u4e3e\u5230\u7684\u5de6\u6307\u9488\u4e0d\u53ef\u80fd\u5b58\u5728\u7b54\u6848\u3002\n- \u7ee7\u7eed\u5339\u914d\uff0c\u4e14\u533a\u95f4\u957f\u5ea6\u5c0f\u4e8e $n$\u3002\n- \u5339\u914d\u7ed3\u675f\uff0c\u533a\u95f4\u957f\u5ea6\u7b49\u4e8e $n$\u3002\n\n\u5339\u914d\u7ed3\u675f\u81ea\u7136\u53ef\u4ee5\u66f4\u65b0\u5f53\u524d\u72b6\u6001\u7684\u7b54\u6848\uff0c\u5e76\u6253\u4e0a\u6807\u8bb0\uff08\u6837\u4f8b $2$ \u4e2d\u76f8\u540c\u5faa\u73af\u540c\u6784\u53ea\u8ba1\u7b97\u4e00\u6b21\uff09\uff0c\u800c\u5931\u914d\u5219\u76f4\u63a5\u8fdb\u884c\u4e0b\u4e00\u6b21\u679a\u4e3e\u3002\n\n\u5173\u952e\u5904\u7406\u5c31\u662f\u7ee7\u7eed\u5339\u914d\u7684\u72b6\u6001\u79fb\u52a8\u4ee5\u53ca\u5de6\u6307\u9488\u53f3\u79fb\u7684\u72b6\u6001\u79fb\u52a8\u3002\n\n\u5bf9\u4e8e\u7ee7\u7eed\u5339\u914d\uff08\u4e5f\u5373\u53f3\u6307\u9488\u53f3\u79fb\uff09\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5728 $\\text{SAM}$ \u4e0a\u8f6c\u79fb\uff0c\u8f6c\u79fb\u5230 $ch(u,c)$\u3002\n\n\u800c\u5de6\u7aef\u70b9\u53f3\u79fb\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u7684\u7b49\u4ef7\u7c7b\u96c6\u5408\u4e2d\u5b50\u4e32\u957f\u5ea6\u6709\uff1a$[\\operatorname{len}(\\operatorname{link}(u))+1,\\operatorname{len}(u)]$\uff0c\u82e5\u5220\u53bb\u9996\u5b57\u6bcd\u540e\u957f\u5ea6\u4ecd\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\u5219\u72b6\u6001\u4e0d\u53d8\uff0c\u53cd\u4e4b\u79fb\u52a8\u5230 $\\operatorname{link}(u)$ \u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6 $O(|S|+\\sum|T|)$\u3002\n\n```cpp\nint n,m;\nchar s[maxn];\n\nstruct SuffixAutomaton{\n    int tot,last;\n    int len[maxn],link[maxn],cnt[maxn];\n    int ch[maxn][26];\n    int mark[maxn];\n    inline void init(){\n        tot=0,last=0;\n        len[0]=0,link[0]=-1,cnt[0]=0;\n    }\n    inline void extend(int c){\n        int cur=++tot;\n        len[cur]=len[last]+1,cnt[cur]=1;\n        int p=last;\n        while(p!=-1&&!ch[p][c]){\n            ch[p][c]=cur;\n            p=link[p];\n        }\n        if(p==-1) link[cur]=0;\n        else{\n            int q=ch[p][c];\n            if(len[p]+1==len[q]) link[cur]=q;\n            else{\n                int clone=++tot;\n                len[clone]=len[p]+1,link[clone]=link[q];\n                for(int k=0;k<26;++k) ch[clone][k]=ch[q][k];\n                while(p!=-1&&ch[p][c]==q){\n                    ch[p][c]=clone;\n                    p=link[p];\n                }\n                link[cur]=link[q]=clone;\n            }\n        }\n        last=cur;\n    }\n    vector<int> E[maxn];\n    inline void build(){\n        for(int i=1;i<=tot;++i){\n            E[link[i]].push_back(i);\n        }\n    }\n    void dfs(int u){\n        for(int v:E[u]){\n            dfs(v);\n            cnt[u]+=cnt[v];\n        }\n    }\n    inline int solve(int id){\n        for(int i=1;i<=n;++i){\n            if(!ch[0][s[i]-'a']) return 0;\n        }\n        int u=ch[0][s[1]-'a'],lpos=1,rpos=1,ans=0;\n        for(lpos=1;lpos<=n;++lpos){\n            while(rpos-lpos+1<n){\n                if(ch[u][s[rpos+1]-'a']){\n                    u=ch[u][s[rpos+1]-'a'],++rpos;\n                }\n                else break;\n            }\n            if(rpos-lpos+1==n){\n                if(mark[u]<id) ans+=cnt[u];\n                mark[u]=id;\n            }\n            if(len[link[u]]==rpos-(lpos+1)+1) u=link[u];\n        }\n        return ans;\n    }\n}SAM;\n\nint main(){\n    scanf(\"%s\",s+1);\n    n=strlen(s+1),m=read();\n    SAM.init();\n    for(int i=1;i<=n;++i) SAM.extend(s[i]-'a');\n    SAM.build();\n    SAM.dfs(0);\n    for(int k=1;k<=m;++k){\n        scanf(\"%s\",s+1);\n        n=strlen(s+1);\n        for(int i=1;i<=n;++i) s[i+n]=s[i];\n        printf(\"%d\\n\",SAM.solve(k));\n    }\n    return 0;\n}\n``",
        "postTime": 1672899907,
        "uid": 321177,
        "name": "SoyTony",
        "ccfLevel": 6,
        "title": "CF235C \u9898\u89e3"
    },
    {
        "content": "## \u540e\u7f00\u6570\u7ec4\u8fd9\u4e48\u6ca1\u6392\u9762\u7684\u5417\uff1f\u8fd9\u4e2a\u9898\u90fd\u6ca1\u6709 SA \u9898\u89e3\uff1f\n\n\u9898\u610f\u7565\u3002\n\n\u5faa\u73af\u540c\u6784\uff0c\u6309\u7167\u5957\u8def\u6211\u4eec\u628a\u6bcf\u4e2a $x_i$ \u500d\u957f\u540e\u5f97\u5230 $y_i$ \u987a\u6b21\u8fde\u63a5\uff0c\u518d\u4e0e $S$ \u8fde\u63a5\u8d77\u6765\u5efa\u7acb\u540e\u7f00\u6570\u7ec4\u3002\n\n\u500d\u957f\u540e\u6bcf\u4e2a\u53ef\u80fd\u7684\u5faa\u73af\u540c\u6784\u5c31\u6210\u4e3a\u4e86 $y_i$ \u7684\u957f\u4e3a $|x_i|$  \u7684\u5b50\u4e32\u3002\u5982\u4f55\u5224\u65ad\u5b83\u4eec\u662f\u5426\u5faa\u73af\u540c\u6784\uff1f\u53ea\u8981\u67e5\u8be2 $lcp$ \u662f\u5426\u5927\u4e8e\u7b49\u4e8e $|x_i|$ \u5c31\u53ef\u4ee5\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u540e\u7f00\u6392\u5e8f\u4ece\u524d\u5f80\u540e\u626b\u4e00\u904d\u540e\u7f00\u6570\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e2a $y_i$ \u4e0a\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5f53\u518d\u9047\u5230 $y_i$ \u7684\u5b50\u4e32\u65f6\uff0c\u5224\u65ad\u662f\u5426\u662f\u4e00\u4e2a\u65b0\u7684\u5faa\u73af\u540c\u6784\u3002\u5982\u679c\u662f\u7684\u8bdd\u518d\u7edf\u8ba1\u5728 $S$ \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002\u8fd9\u4e5f\u662f\u540e\u7f00\u6570\u7ec4\u7684\u57fa\u672c\u64cd\u4f5c\uff1a\u9884\u5148\u628a\u540e\u7f00\u6570\u7ec4\u4e0a\u6bcf\u4e2a\u662f $S$ \u7684\u67d0\u4e00\u5b57\u7b26\u5f00\u5934\u7684\u4f4d\u7f6e $+1$ \uff0c\u67e5\u8be2\u65f6\u4e24\u8fb9\u4e8c\u5206\u5f97\u51fa\u4e0e\u8be5\u4e32 $lcp$ \u5927\u4e8e\u7b49\u4e8e $|x_i|$ \u7684\u540e\u7f00\u6570\u7ec4\u4e0a\u7684\u533a\u95f4\uff0c\u518d\u67e5\u8be2\u533a\u95f4\u548c\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u5c31\u662f\u7b80\u5355\u7684\u524d\u7f00\u548c\u76f8\u51cf\u3002\n\n\u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3a $O(n\\log n)$ \u3002",
        "postTime": 1659095034,
        "uid": 131591,
        "name": "\u849f\u84bb\u541bHJT",
        "ccfLevel": 7,
        "title": "CF235C Cyclical Quest \u9898\u89e3"
    },
    {
        "content": "## Tag\n\n\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u5b57\u7b26\u4e32\u3002\n\n## Description\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e3b\u4e32 $S$ \u548c $n$ \u4e2a\u8be2\u95ee\u4e32 $T$\uff0c\u6c42\u6bcf\u4e2a\u8be2\u95ee\u4e32\u7684\u6240\u6709\u5faa\u73af\u540c\u6784\u5728\u4e3b\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u603b\u548c\u3002\n\n$\\texttt{data range:} n\\leq 10^5, |S| \\leq 10^6, \\sum |T| \\leq 10^6$.\n\n## Solution\n\n\u5faa\u73af\u540c\u6784\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u590d\u5236\u4e00\u904d\u653e\u5728\u540e\u9762\uff0c\u7136\u540e\u8be2\u95ee\u6bcf\u4e00\u4e2a\u957f\u5ea6\u4e3a $|T|$ \u7684\u5b50\u4e32\u5728 $S$ \u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\u4e24\u4e2a\u76f8\u540c\u7684\u53ea\u80fd\u7b97\u4e00\u4e2a\uff0c\u6bd4\u5982 `aaaaa` \u8fd9\u6837\u4e00\u4e2a\u4e32\u53ea\u80fd\u7b97\u4e00\u4e2a\u3002\n\n\u7136\u540e\u601d\u8003\u600e\u4e48\u505a\u8be2\u95ee\u51fa\u73b0\u6b21\u6570\u8fd9\u4e2a\u64cd\u4f5c\u3002\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e3b\u4e32\u5efa\u7acb\u4e00\u4e2a SAM\uff0c\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684 $sz$\uff0c\u7136\u540e\u5728\u8fd9\u4e2a SAM \u4e0a\u9762\u76f4\u63a5\u5339\u914d\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u5b50\u4e32\u53ea\u4f1a\u5728\u4e00\u4e2a\u8282\u70b9\u91cc\u9762\u51fa\u73b0\uff0c\u5982\u679c\u5728\u8fd9\u4e2a\u8282\u70b9\u8ba1\u7b97\u4e86\u4e00\u6b21\u7b54\u6848\uff0c\u90a3\u5c31\u628a\u8fd9\u4e2a\u8282\u70b9\u6253\u4e2a\u6807\u8bb0\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$.\n\n## Code\n\n```cpp\nusing ll = long long;\n\nconst int N = 2e6 + 10;\n\nnamespace SAM {\n\n    int lst = 1, tot = 1;\n    int ch[N][26], fa[N], len[N], sz[N];\n    int vis[N];\n\n    inline void cpy(int x, int y) {\n        FOR(i, 0, 25) ch[x][i] = ch[y][i];\n    }\n\n    inline void ins(int x) {\n        int p(lst), np, q, nq;\n        len[np = lst = ++tot] = len[p] + 1, sz[np] = 1;\n        while(p && !ch[p][x]) ch[p][x] = np, p = fa[p];\n        if (!p) return void (fa[np] = 1);\n        if (len[q = ch[p][x]] == len[p] + 1) return void (fa[np] = q);\n        cpy(nq = ++tot, q), fa[nq] = fa[q];\n        len[nq] = len[p] + 1, fa[np] = fa[q] = nq;\n        while (p && ch[p][x] == q) ch[p][x] = nq, p = fa[p];\n        return ;\n    }\n\n    int top;\n    int stk[N], d[N];\n    inline void init() {\n        top = 0;\n        FOR(i, 2, tot) d[fa[i]]++;\n        FOR(i, 1, tot) if (!d[i]) stk[++top] = i;\n        while (int u = stk[top--]) {\n            sz[fa[u]] += sz[u];\n            if (!--d[fa[u]]) stk[++top] = fa[u];\n        }\n        return ;\n    }\n\n    inline ll solve(char *s, int tim) {\n        int n = strlen(s + 1), slen = 0, p = 1;\n        ll ans = 0;\n        for (int i = 1; i <= n; i++) {\n            int v = s[i] - 'a';\n            while (p > 1 && !ch[p][v]) p = fa[p], slen = len[p];\n            if (ch[p][v]) p = ch[p][v], slen++;\n        }\n        for (int i = 1; i <= n; i++) {\n            if (slen == n) {\n                if (vis[p] != tim) ans += sz[p];\n                vis[p] = tim, slen--;\n                if (slen == len[fa[p]]) p = fa[p];\n            }\n            int v = s[i] - 'a';\n            while (p > 1 && !ch[p][v]) p = fa[p], slen = len[p];\n            if (ch[p][v]) p = ch[p][v], slen++;\n        }\n        return ans;\n    }\n}\n\nchar s[N];\n\ninline void solve() {\n    scanf(\"%s\", s + 1);\n    int n = strlen(s + 1);\n    for (int i = 1; i <= n; i++) SAM::ins(s[i] - 'a');\n    SAM::init();\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; i++) {\n        scanf(\"%s\", s + 1);\n        cout << SAM::solve(s, i) << '\\n';\n    }\n    return ;\n}\n```\n\n",
        "postTime": 1639558000,
        "uid": 366935,
        "name": "KAMIYA_KINA",
        "ccfLevel": 7,
        "title": "CF235C Cyclical Quest \u9898\u89e3"
    },
    {
        "content": "[$\\Large\\color{#FFBBFF}\\textit{Tian-Xing's blog}$](https://Tian-Xing.github.io)\n\n------------\n\n# Description\n\n[\u4f20\u9001\u95e8](http://codeforces.com/problemset/problem/235/C)\n\n------------\n\n# Solution\n\n\u8003\u8651\u5faa\u73af\u540c\u6784\u7684\u6027\u8d28\uff0c\u6bcf\u6b21\u76f8\u5f53\u4e8e\u4ece\u6700\u524d\u9762\u5220\u53bb\u4e00\u4e2a\u5b57\u7b26\uff0c\u4ece\u6700\u540e\u9762\u52a0\u4e0a\u4e00\u4e2a\u5b57\u7b26\u3002\u5728$SAM$\u91cc\u5bf9\u5e94\u7740\u5f80\u4e0a\u8df3$fa$\u6216\u4e0d\u8df3\u548c\u8d70\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u8f6c\u79fb\u8fb9\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u957f\u5ea6\u4e3a$l$\u7684\u4e32\uff0c\u6700\u591a\u5220$l$\u6b21\uff0c\u6700\u591a\u52a0$l$\u6b21\uff0c\u6240\u4ee5\u76f4\u63a5\u5728$SAM$\u4e0a\u66b4\u529b\u5220\u9664\u6dfb\u52a0\u5b57\u7b26\u7684\u590d\u6742\u5ea6\u5c31\u662f$O(l)$\u7684\u3002\n\n\u90a3\u4e48\u5148\u628a\u5b57\u7b26\u4e32\u5728\u540e\u9762\u5c06\u81ea\u5df1\u590d\u5236\u4e00\u904d\uff0c\u7136\u540e\u4e22\u5230$SAM$\u4e0a\u8dd1\uff0c\u5982\u679c\u6ca1\u6709\u5bf9\u5e94\u7684\u8f6c\u79fb\u8fb9\u5c31\u4e0d\u505c\u5730\u8df3$fa$\uff0c\u76f4\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u662f\u5b57\u7b26\u4e32\u7684\u5faa\u73af\u540c\u6784\u4e32\u7684\u8282\u70b9\u3002\u90a3\u4e48\u8fd9\u65f6\u8003\u8651\u5220\u9664\u6700\u524d\u9762\u7684\u5b57\u7b26\uff0c\u5c31\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f$len_{fa_{now}} + 1 =$\u539f\u5b57\u7b26\u4e32\u4e32\u957f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5220\u53bb\u6700\u524d\u9762\u7684\u4e00\u4e2a\u5b57\u7b26\u540e\uff0c\u8981\u5f80\u4e0a\u8df3$fa$\uff1b\u53e6\u4e00\u79cd\u662f$len_{fa_{now}} + 1 < $\u5f53\u524d\u5339\u914d\u957f\u5ea6\uff0c\u8fd9\u5c31\u8bf4\u660e\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u540e\u7684$endpos$\u96c6\u5408\u6ca1\u6709\u6539\u53d8\uff0c\u76f4\u63a5\u8f6c\u79fb\u4e0b\u4e00\u4e2a\u8fb9\u5c31\u884c\u3002\n\n\u7136\u540e\u56e0\u4e3a\u8981\u6c42\u672c\u8d28\u4e0d\u540c\uff0c\u6240\u4ee5\u6253\u4e0a\u65f6\u95f4\u6233\u6807\u8bb0\uff0c\u786e\u4fdd\u6bcf\u79cd\u5b50\u4e32\u53ea\u88ab\u7b97\u4e00\u6b21\u8d21\u732e\u5373\u53ef\u3002\n\n------------\n\n# Code\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int N = 1000000;\n\nint l, fa[N * 2 + 50], son[N * 2 + 50][26], len[N * 2 + 50], vis[N * 2 + 50], siz[N * 2 + 50], num, head[N * 2 + 50], last = 1, cnt = 1;\n\nchar st[N * 2 + 50];\n\nstruct Node\n{\n\tint next, to;\n} edge[N * 2 + 50];\n\nvoid Addedge(int u, int v)\n{\n\tedge[++num] = (Node){head[u], v};\n\thead[u] = num;\n\treturn;\n} \n\nvoid Insert(int c)\n{\n\tint p = last, ne = last = ++cnt;\n\tlen[ne] = len[p] + 1; siz[ne] = 1; \n\twhile (!son[p][c] && p) son[p][c] = ne, p = fa[p];\n\tif (!p) { fa[ne] = 1; return; }\n\tint q = son[p][c];\n\tif (len[q] == len[p] + 1) { fa[ne] = q; return; }\n\tint sp = ++cnt;\n\tfor (int i = 0; i < 26; i++) son[sp][i] = son[q][i];\n\tlen[sp] = len[p] + 1;\n\tfa[sp] = fa[q];\n\tfa[q] = fa[ne] = sp;\n\twhile (p && son[p][c] == q) son[p][c] = sp, p = fa[p];\n\treturn;\n}\n\nvoid Dfs(int x)\n{\n//\tcout << x << \" len:\" << len[x] << \" \" << endl;\n\tfor (int i = head[x]; i; i = edge[i].next)\n\t{\n\t\tint v = edge[i].to;\n\t\tDfs(v);\n\t\tsiz[x] += siz[v];\n\t}\n//\tcout << x << \" \" << siz[x] << endl;\n\treturn;\n}\n\nint main()\n{\n\tscanf(\"%s\", st + 1);\n\tl = strlen(st + 1);\n\tfor (int i = 1; i <= l; i++) Insert(st[i] - 'a');\n//\tcout << cnt << endl;\n\tfor (int i = 2; i <= cnt; i++) Addedge(fa[i], i);\n\tDfs(1);\n\tint t;\n\t//for (int i = 1; i <= cnt; i++) printf(\"%d \", siz[i]); puts(\"\");\n\tscanf(\"%d\", &t);\n\tfor (int i = 1; i <= cnt; i++) vis[i] = t;\n\twhile (t--)\n\t{\n\t\tint ans = 0; \n\t\tscanf(\"%s\", st + 1);\n\t\tint now = 1, length = 0;\n\t\tl = strlen(st + 1);\n\t\tint yl = l;\n\t\tfor (int i = yl + 1; i <= yl * 2 - 1; i++) st[i] = st[i - yl];\n\t\tl = 2 * l - 1;\n\t\tfor (int i = 1; i <= l; i++)\n\t\t{\n\t\t\tint c = st[i] - 'a';\n\t\t//\tcout << st[i] << \" \" << length << \" \" << now << endl;\n\t\t\twhile (!son[now][c] && now) now = fa[now], length = len[now];\n\t\t\tif (son[now][c]) length++, now = son[now][c]; else now = 1, length = 0;\n\t\t\tif (length == yl) \n\t\t\t{\n\t\t\t\tif (vis[now] > t) ans += siz[now], vis[now] = t;\n\t\t\t\tif (len[fa[now]] + 1 == yl) now = fa[now];\n\t\t\t\tlength--;\n\t\t\t} \n\t\t//\tcout << now << endl;\n\t\t}\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1591795139,
        "uid": 73983,
        "name": "Infiltrator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF235C \u3010Cyclical Quest\u3011"
    },
    {
        "content": "**\u5e7f\u4e49\u540e\u7f00\u6811** \u9898\u89e3\u3002\u5bf9 $S$ \u5efa\u7acb \u5e7f\u4e49\u540e\u7f00\u6811\u3002\n\n\u8bbe\u8be2\u95ee\u7684\u4e32\u957f\u5ea6\u4e3a $m$\u3002\u628a\u5b57\u7b26\u4e32\u590d\u5236\u4e00\u500d\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u6bcf\u6b21\u90fd\u67e5\u8be2 $[i,i+m-1]$ \u8fd9\u4e00\u6bb5\u8be2\u95ee\u4e32\u5728\u4e3b\u4e32 $S$ \u4e2d\u51fa\u73b0\u591a\u5c11\u6b21\u3002\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u6bcf\u6b21\u63d2\u5165\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5220\u9664\u6700\u524d\u9762\u7684\u5b57\u7b26\uff0c\u67e5\u8be2\u5bf9\u5e94\u540e\u7f00\u6811\u8282\u70b9\u7684\u5b50\u6811\u4e0a\u6709\u591a\u5c11\u4e2a\u53f6\u5b50\u8282\u70b9\uff08\u5c31\u662f\u6709\u591a\u5c11\u4e2a\u540e\u7f00\u7684\u524d\u7f00\u662f\u5f53\u524d\u8be2\u95ee\u4e32\uff09\u3002\u63d2\u5165\u5c31\u662f $len+1$\uff0c\u5220\u9664\u5c31\u662f\u8df3\u540e\u7f00\u94fe\u63a5\u3002\n\n\u6ce8\u610f\u8d70\u8fb9\u3001\u8df3\u540e\u7f00\u94fe\u63a5\u53ef\u80fd\u4f1a\u6267\u884c\u4e0d\u6b62\u4e00\u6b21\u3002\n\n```c++\n#include<bits/stdc++.h>\n#define rep(i,x,y) for(int i=x;i<=y;++i)\n#define mar(o) rep(i,1,27)\n#define v dot[o].son[i]\n#define sn dot[nowz].son[ cz[i-len+1] ]\n#define lon long long\nusing namespace std;\nconst int l7=1012345,inf=1e8;\nstruct beer{int sta,len,fail;bool islaf;int son[29];}dot[l7*2];\nstruct dino{int id,len;}b[l7];\nint n,m,T,now,las,cnt,rem,cr[l7],cz[l7*2],siz[l7*2];\n\nint rd(){\n\tint shu=0;bool fu=0;char ch=getchar();\n\twhile( !isdigit(ch) ){if(ch=='-')fu=1;ch=getchar();}\n\twhile( isdigit(ch) )shu=(shu<<1)+(shu<<3)+ch-'0',ch=getchar();\n\treturn fu?-shu:shu;\n}\n\nint rdstr(int *a,bool sys){\n\tchar ch=getchar();int len=0;\n\twhile( !isalpha(ch) )ch=getchar();\n\twhile( isalpha(ch) ){\n\t\tlen++,a[len]=ch-'a'+1,ch=getchar();\n\t}\n\tif(sys)len++,a[len]=27;\n\treturn len;\n}\n\nvoid sesmet(){\n\tcnt=1,now=1,dot[0].len=inf;\n}\n\nint Dnew(int sta,int len){\n\tcnt++,dot[cnt]=(beer){sta,len,1,(len==inf)};\n\treturn cnt;\n}\n\nvoid isert(int id){\n\trem++,las=1;\n\twhile(rem){\n\t\twhile(rem>dot[ dot[now].son[ cr[id-rem+1] ] ].len){\n\t\t\tnow=dot[now].son[ cr[id-rem+1] ];\n\t\t\trem-=dot[now].len;\n\t\t}\n\t\tint &z=dot[now].son[ cr[id-rem+1] ];\n\t\tint ch=cr[ dot[z].sta+rem-1 ];\n\t\tif(!z||ch==cr[id]){\n\t\t\tdot[las].fail=now,las=now;\n\t\t\tif(!z)z=Dnew(id,inf);\n\t\t\telse return;\n\t\t}\n\t\telse{\n\t\t\tint fut=Dnew(dot[z].sta,rem-1);\n\t\t\tdot[fut].son[ch]=z;\n\t\t\tdot[fut].son[ cr[id] ]=Dnew(id,inf);\n\t\t\tdot[z].sta+=rem-1,dot[z].len-=rem-1;\n\t\t\tz=fut,dot[las].fail=fut,las=fut;\n\t\t}\n\t\tif(now==1)rem--;\n\t\telse now=dot[now].fail;\n\t}\n}\n\nint dfs(int o){\n\tif(dot[o].islaf){\n\t\tsiz[o]=!(o==cnt);return siz[o];\n\t}\n\tmar(o){\n\t\tif(v)siz[o]+=dfs(v);\n\t}\n\treturn siz[o];\n}\n\nbool cmp(dino p,dino q){\n\treturn p.id==q.id?p.len<q.len:p.id<q.id;\n}\n\nlon work(){\n\tint nowz=1,len=0,poi=1,cntz=0;\n\tlon ans=0;\n\trep(i,1,m+m-1){\n\t\tlen++;\n\t\twhile(poi<=i){\n\t\t\twhile(len>dot[sn].len){\n\t\t\t\tnowz=sn,len-=dot[nowz].len;\n\t\t\t}\n\t\t\tif(!sn||cr[dot[sn].sta+len-1]^cz[i]){\n\t\t\t\tif(nowz==1)len--;\n\t\t\t\tpoi++,nowz=dot[nowz].fail;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(i-poi+1>=m){\n\t\t\t\tcntz++,b[cntz]=(dino){sn,len};\n\t\t\t\tif(nowz==1)len--;\n\t\t\t\tpoi++,nowz=dot[nowz].fail;\n\t\t\t}\n\t\t\tbreak;\t\t\t\n\t\t}\n\t}\n\tsort(b+1,b+cntz+1,cmp);\n\trep(i,1,cntz){\n\t\tif(b[i].id^b[i-1].id||b[i].len^b[i-1].len)ans+=siz[ b[i].id ];\n\t}\n\treturn ans;\n}\n\nint main(){\n\tsesmet();\n\tn=rdstr(cr,1),T=rd();\n\trep(i,1,n)isert(i);\n\tdot[1].fail=1;\n\tdfs(1);\n\twhile(T--){\n\t\tm=rdstr(cz,0);\n\t\trep(i,1,m)cz[i+m]=cz[i];\n\t\tprintf(\"%lld\\n\", work() );\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1619706218,
        "uid": 99623,
        "name": "BlankAo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF235C Cyclical Quest"
    },
    {
        "content": "\u539a\u989c\u65e0\u803b\u7684\u53d1\u4e00\u7bc7\u53ef\u80fd\u662f\u5168\u7f51\u6700\u52a3\u89e3\u6cd5\n\n\u6211\u4eec\u53d1\u73b0\u8981\u6c42\u7ed9\u5b9a\u7684\u4e32\u6240\u6709\u4e0d\u540c\u7684\u5faa\u73af\u540c\u6784\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u554a\n\n\u56e0\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u4e32\uff0c\u4e0d\u540c\u7684\u5faa\u73af\u540c\u6784\u6b21\u6570\u663e\u7136\u662f\u4e0d\u4f1a\u8d85\u8fc7$n$\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5bf9\u6bcf\u4e00\u4e2a\u5faa\u73af\u901a\u8fc7\u5206\u522b\u6c42\u4e00\u4e0b\u5176\u51fa\u73b0\u6b21\u6570\n\n\u6c42\u5176\u51fa\u73b0\u6b21\u6570\u5f53\u7136\u53ef\u4ee5\u4ea4\u7ed9$SAM$\u6765\u641e\u4e86\n\n\u4e8e\u662f\u6211\u4eec\u628a\u6240\u6709\u7684\u4e32\u90fd\u63d2\u5165$SAM$\u91cc\u53bb\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u8ba1\u7b97$S$\u4e32\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$T$\u4e32\u6211\u4eec\u8981\u5c06\u5176\u500d\u957f\u4e4b\u540e\u518d\u63d2\u5165\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728$parent$\u6811\u4e0a\u76f4\u63a5\u6811\u4e0a\u500d\u589e\u6c42\u51fa\u4e00\u4e2a\u5faa\u73af\u540c\u6784\u51fa\u73b0\u6b21\u6570\u4e86\n\n\u540c\u65f6\u4e3a\u4e86\u53bb\u91cd\uff0c\u6211\u4eec\u6bcf\u6b21\u8df3\u51fa\u6765\u4e00\u4e2a\u5faa\u73af\u540c\u6784\u4e4b\u540e\u7ed9\u5b83\u6253\u4e0a\u6807\u8bb0\uff0c\u4e4b\u540e\u5c31\u4e0d\u8981\u518d\u8df3\u4e86\n\n\u8fd9\u6837\u7684\u505a\u6cd5\u5f53\u8ba9\u662f\u559c\u63d0$MLE$\n\n\u4e8e\u662f\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u90a3$map$\u6765\u5b58\u8fb9\uff0c\u4e4b\u540e\u4e0d\u7528\u6811\u4e0a\u500d\u589e\u76f4\u63a5\u66b4\u529b\u5f80\u4e0a\u8df3\uff0c\u4e8e\u662f\u5c31\u80fd\u4ee5\u5168luogu\u6700\u6162\u7684\u597d\u6210\u7ee9\u901a\u8fc7\u8fd9\u9053\u9898\n\n\u4ee3\u7801\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<map>\n#include<vector>\n#define maxn 6000005\n#define re register\n#define LL long long\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\nstd::map<int,int> son[maxn];\nstruct E{int v,nxt;}e[maxn];\nint n,lst=1,cnt=1,num,m;\nint len[maxn],head[maxn],sz[maxn],deep[maxn],vis[maxn],fa[maxn];\ninline void add(int x,int y) {e[++num].v=y;e[num].nxt=head[x];head[x]=num;}\nvoid dfs(int x) {for(re int i=head[x];i;i=e[i].nxt) deep[e[i].v]=deep[x]+1,dfs(e[i].v),sz[x]+=sz[e[i].v];}\nint st[1000005],top;\nstd::vector<int> a[100005];\nint L[100005];\nchar S[1000005];\ninline void ins(int c,int o,int t)\n{\n\tint f=lst,p=++cnt; lst=p;\n\tlen[p]=len[f]+1; if(!o) sz[p]=1;\n\tif(o&&t) a[o].push_back(p);\n\twhile(f&&!son[f][c]) son[f][c]=p,f=fa[f];\n\tif(!f) {fa[p]=1;return;}\n\tint x=son[f][c];\n\tif(len[f]+1==len[x]) {fa[p]=x;return;}\n\tint y=++cnt;\n\tlen[y]=len[f]+1,fa[y]=fa[x],fa[x]=fa[p]=y;\n\tfor(std::map<int,int>::iterator it=son[x].begin();it!=son[x].end();it++) son[y].insert(*it);\n\twhile(f&&son[f][c]==x) son[f][c]=y,f=fa[f];\n}\ninline int find(int x,int li) {while(len[fa[x]]>=li) x=fa[x];return x;} \nint main()\n{\n\tscanf(\"%s\",S+1),n=strlen(S+1);scanf(\"%d\",&m);\n\tfor(re int i=1;i<=n;i++) ins(S[i]-'a',0,0);\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%s\",S+1);L[i]=strlen(S+1);lst=1;\n\t\tfor(re int j=1;j<L[i];j++) ins(S[j]-'a',i,0);ins(S[L[i]]-'a',i,1);\n\t\tfor(re int j=1;j<L[i];j++) ins(S[j]-'a',i,1);\n\t}\n\tfor(re int i=2;i<=cnt;i++) add(fa[i],i);deep[1]=1;dfs(1);\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tint ans=0;top=0;\n\t\tfor(re int j=0;j<a[i].size();j++)\n\t\t{\n\t\t\tint t=find(a[i][j],L[i]);\n\t\t\tif(vis[t]) continue;\n\t\t\tst[++top]=t;ans+=sz[t];vis[t]=1;\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t\tfor(re int j=1;j<=top;j++) vis[st[j]]=0;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1547940694,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF235C \u3010Cyclical Quest\u3011"
    }
]