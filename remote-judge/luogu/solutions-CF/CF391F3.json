[
    {
        "content": "\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a $\\mathcal{O}(n\\log n)$ \u7684\u505a\u6cd5\u3002\u9996\u5148\u6211\u4eec\u8003\u8651\u5982\u679c\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u9012\u589e\u80a1\u7968\uff0c\u90a3\u6211\u4eec\u76f8\u5f53\u4e8e\u662f\u4e00\u5f00\u59cb\u4e70\u8fdb\uff0c\u6700\u540e\u5356\u51fa\u3002\u5982\u679c\u8fd9\u6837\u8fde\u7eed\u7684\u6bb5\u5c0f\u4e8e\u7b49\u4e8e $k$\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u53ef\u4ee5\u8fd4\u56de\u7b54\u6848\u4e86\u3002\u5982\u679c\u6bd4 $k$ \u5927\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u505a\u51fa\u8fd9\u6837\u4e24\u79cd\u9009\u62e9\uff1a\u8981\u4e48\u9009\u62e9\u4e00\u4e2a\u4e0a\u5347\u7684\u533a\u95f4\u653e\u5f03\uff0c\u8981\u4e48\u9009\u62e9\u4e00\u6bb5\u4e0b\u964d\u7684\u533a\u95f4\u628a\u4e24\u6bb5\u4e0a\u5347\u7684\u533a\u95f4\u7ed9\u8fde\u8d77\u6765\u3002\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u5806\u6216\u8005 `set` \u6765\u7ef4\u62a4\u3002\n\t\n\u4f46\u662f\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a $\\mathcal{O}(n)$ \u7684\u505a\u6cd5\uff0c\u9700\u8981\u89c2\u5bdf\u4e00\u4e9b\u6027\u8d28\u3002\u6211\u4eec\u628a\u8bfb\u5165\u7684\u80a1\u7968\u770b\u6210\u662f\u4e00\u4e2a\u4e2a\u5355\u8c03\u4e0d\u51cf\u7684\u533a\u95f4\u3002\u5f53\u7136\u6709\u4e9b\u533a\u95f4\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u6570\u3002\n\t\n\u6211\u4eec\u8003\u8651\u4e00\u4e9b\u533a\u95f4\u53ef\u4ee5\u5408\u5e76\u6210\u4e00\u4e2a\u7b49\u4ef7\u7684\u533a\u95f4\uff0c\u6211\u4eec\u8003\u8651\u5c06\u533a\u95f4\u4ece\u5de6\u5f80\u540e\u4e00\u4e2a\u4e2a\u52a0\u5165\u3002\u6211\u4eec\u518d\u5f00\u4e00\u4e2a\u6570\u7ec4 $b$\uff0c\u8bb0\u5f55\u90a3\u4e9b\u4e0d\u53ef\u80fd\u8ddf\u540e\u9762\u7684\u533a\u95f4\u5408\u5e76\u7684\u533a\u95f4\u3002\n\t\n\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5728\u4efb\u4e00\u65f6\u523b\u5bf9\u4e8e\u90a3\u4e9b\u53ef\u80fd\u4e0e\u540e\u9762\u5408\u5e76\u7684\u533a\u95f4\uff0c\u5176\u4e70\u5165\u65f6\u7684\u4ef7\u683c\u4e00\u5b9a\u662f\u5355\u8c03\u9012\u589e\u7684\u3002\u56e0\u4e3a\u5982\u679c\u4e0d\u662f\u9012\u589e\u7684\uff0c\u5982\u4e0b\u56fe\u60c5\u51b5\uff0c\u539f\u6765\u9ed8\u8ba4\u7684\u5339\u914d\u662f $[x_1,x_2]$\uff0c$[x_3,x_4]$\uff0c\u73b0\u5728\u52a0\u5165\u4e86\u4e00\u4e2a\u53f3\u7aef\u70b9 $x_5$\uff08\u5de6\u7aef\u70b9\u5728\u54ea\u513f\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5173\u5fc3\uff09\uff0c\u5982\u679c $x_1$ \u8ddf $x_5$\u914d\uff0c\u90a3\u663e\u7136\u4e0d\u5982 $x_3$ \u8ddf $x_5$ \u914d\uff0c\u56e0\u4e3a\u8fd9\u6837\u4e0d\u4ec5\u8282\u7701\u4e86\u4e00\u6bb5\u533a\u95f4\uff08$[x_1,x_2]$\uff09\uff0c\u7b54\u6848\u8fd8\u66f4\u4f18\u3002\n\t\n![](https://cdn.luogu.com.cn/upload/image_hosting/2d993dmc.png)\n\n\u6211\u4eec\u8fd8\u9700\u8981\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff0c\u90a3\u5c31\u662f\u5982\u679c\u73b0\u5728\u6709\u4e24\u4e2a\u533a\u95f4 $[l_1,r_1],[l_2,r_2]$\uff0c\u5982\u679c\u6709 $l_1<l_2$ \u4e14 $r_1<r_2$\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u7b49\u4ef7\u6210\u4e3a $[l_1,r_2],[l_2,r_1]$ \u8fd9\u6837\u4e24\u6bb5\u533a\u95f4\u3002\u800c $[l_2,r_1]$ \u662f\u4e0d\u53ef\u80fd\u518d\u8ddf\u540e\u9762\u7684\u5339\u914d\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u6254\u8fdb $b$ \u4e2d\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/cbipiu81.png)\n\n\u6839\u636e\u8fd9\u6837\u4e24\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5f88\u591a\u4e2a\u533a\u95f4\u3002\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e9b\u533a\u95f4\u662f\u72ec\u7acb\u7684\u3002\u6700\u540e\u6211\u4eec\u53d6\u524d $k$ \u5927\u7684\u533a\u95f4\u5373\u53ef\u3002\n\n\u5177\u4f53\u4ee3\u7801\u53ef\u4ee5[\u6233\u8fd9\u91cc](https://codeforces.com/contest/391/submission/69274254)\u3002",
        "postTime": 1579756946,
        "uid": 84088,
        "name": "pufanyi",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF391F3 \u3010Stock Trading\u3011"
    },
    {
        "content": "\n\u660e\u660e\u662f\u4e00\u9053\u8d2a\u5fc3\u597d\u9898\uff0c\u6ca1\u60f3\u5230\u8fd9\u9898\u8fd9\u4e48\u51b7\u95e8\u3002\n\n\u601d\u8def\u548c\u4ee3\u7801\u501f\u9274\u4e8e[\u8fd9\u91cc](https://blog.csdn.net/u012602144/article/details/40429909)\n\n## \u9898\u610f\n\n\u7ed9\u51fa$n$\u5929\u7684\u80a1\u7968\u4ef7\u683c\u3002\n\n\u6bcf\u5929\u53ef\u4e70\u5165\u6216\u5356\u51fa\u4e00\u80a1\u4e5f\u53ef\u4ee5\u4e0d\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u624b\u4e0a\u53ea\u80fd\u6709\u4e00\u80a1\u3002\n\n\u95ee\u6700\u591a$k$\u6b21\u4e70\u8fdb\u548c\u5356\u51fa\u7684\u6700\u5927\u6536\u76ca\u3002\n\n## \u9898\u89e3\n\n\u9996\u5148\u6211\u4eec\u5bf9\u4ef7\u683c\u8fdb\u884c\u5dee\u5206\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u6570\u7ec4\u4e2d\u4e0d\u8d85\u8fc7$k$\u6bb5\u6570\u5b57\u80fd\u6784\u6210\u7684\u6700\u5927\u548c\u3002\n\n\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u8d2a\u5fc3\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u663e\u7136\u5982\u679c\u6ca1\u6709$k$\u7684\u9650\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u6b63\u6570\u53d6\u8d70\u3002\n\n\u90a3\u4e48$k$\u5e26\u6765\u7684\u5f71\u54cd\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u4e48\u653e\u5f03\u9009\u62e9\u4e00\u4e9b\u6b63\u6570\uff0c\u8981\u4e48\u628a\u4e00\u4e9b\u6b63\u6570\u4e2d\u95f4\u7684\u8d1f\u6570\u4e5f\u9009\u8fdb\u53bb\uff0c\u6784\u6210\u4e00\u6bb5\u3002\u4e8e\u662f\u53ef\u4ee5\u60f3\u5230\u5148\u4e00\u6ce2\u9884\u5904\u7406\uff0c\u628a\u539f\u6570\u7ec4\u4e2d\u5df2\u7ecf\u8fde\u7eed\u7684\u6b63\u6570\u6216\u8005\u8d1f\u6570\u7f29\u6210\u4e00\u4e2a\u6570\u3002\n\n\u63a5\u7740\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5bf9\u4e8e\u6570\u7ec4$a$\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e$x$\uff0c$a[x]>0,a[x-1]<0,a[x+1]<0$\uff0c\u5982\u679c\u6ee1\u8db3$|a[x-1]|>a[x]$\u4e14$|a[x+1]|>a[x]$\uff0c\u90a3\u4e48\u9009$a[x]$\u662f\u4e0d\u4f18\u7684\uff08\u56e0\u4e3a\u5728$k$\u7684\u9650\u5236\u4e0b\uff0c\u9009$a[x]$\u5fc5\u7136\u9700\u8981\u9009\u4e0e\u4e4b\u76f8\u90bb\u7684\u6570\uff0c\u7531\u4e8e\u6ee1\u8db3\u4e0a\u8ff0\u7684\u8981\u6c42\uff0c\u9009\u76f8\u90bb\u7684\u8d1f\u6570\u80af\u5b9a\u4e0d\u4f18\uff09\u3002\u6240\u4ee5\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u628a$a[x-1],a[x],a[x+1]$\u7f29\u5728\u4e00\u8d77\u3002\n\n\u90a3\u4e48\u6211\u4eec\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u6570\u7ec4\u4e2d\u5143\u7d20\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e$2k$\uff0c\u6b64\u65f6\u6709\u6070\u597d\u6709\u4e00\u534a\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u6211\u4eec\u628a\u5b83\u4eec\u52a0\u8d77\u6765\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define MAX 4000005\n#define ll long long\n#define mk(x, y) (make_pair(x, y))\nusing namespace std;\n\ntemplate<typename T>\nvoid read(T &n){\n    n = 0;\n    T f = 1;\n    char c = getchar();\n    while(!isdigit(c) && c != '-') c = getchar();\n    if(c == '-') f = -1, c = getchar();\n    while(isdigit(c)) n = n*10+c-'0', c = getchar();\n    n *= f;\n}\n\nint n, m, cnt, tot;\nint pre[MAX], nxt[MAX], vis[MAX], in[MAX];\nll a[MAX], b[MAX];\nqueue<int> q;\npair<ll, int> st[MAX], tmp;\n\nvoid push(int x){\n    if(!in[x] && mk(abs(a[x]), x) <= tmp) q.push(x), in[x] = 1;\n}\n\nvoid init(){\n    for(int i = 2; i <= n; ++i){\n        if(a[i] != a[i-1]){\n            b[++cnt] = a[i]-a[i-1];\n            if(cnt <= 1 && b[cnt] <= 0) cnt--;\n            if(cnt > 1 && ((b[cnt]>0) == (b[cnt-1]>0))){\n                cnt--;\n                b[cnt] += b[cnt+1];\n            }\n        }\n    }\n    while(cnt && b[cnt] <= 0) cnt--;\n    n = cnt;\n    for(int i = 1; i <= n; ++i) a[i] = b[i];\n    for(int i = 0; i < n; ++i) nxt[i] = (i+1)%(n+1);\n    for(int i = 1; i <= n; ++i) pre[i] = (i-1);\n    pre[0] = n, nxt[n] = 0;\n    a[0] = 0;\n}\n\nvoid merge(int x){\n    int l = pre[x], r = nxt[x];\n    if(vis[x]) return;\n    if(l && abs(a[l]) < abs(a[x])) return;\n    if(r && abs(a[r]) < abs(a[x])) return;\n    if(l) pre[x] = pre[l];\n    if(r) nxt[x] = nxt[r];\n    nxt[pre[x]] = x, pre[nxt[x]] = x;\n    vis[l] = vis[r] = 1;\n    a[x] += a[l]+a[r];\n    if(!l){\n        nxt[0] = nxt[x];\n        pre[nxt[x]] = 0;\n        vis[x] = 1;\n    }\n    if(!r){\n        pre[0] = pre[x];\n        nxt[pre[x]] = 0;\n        vis[x] = 1;\n    }\n    if(pre[x]) push(pre[x]);\n    if(nxt[x]) push(nxt[x]);\n    push(x);\n}\n\nint main()\n{\n    cin >> n >> m;\n    for(int i = 1; i <= n; ++i) read(a[i]);\n    init();\n    while(1){\n        tot = 0;\n        for(int i = nxt[0]; i; i = nxt[i]){\n            if(!vis[i]) st[++tot] = mk(abs(a[i]), i);\n        }\n        if(tot < m*2) break;\n        int mid = (tot-m*2+1)/2;\n        nth_element(st+1, st+mid, st+tot+1);\n        tmp = st[mid];\n        while(!q.empty()) q.pop();\n        for(int i = nxt[0]; i; i = nxt[i]) push(i);\n        while(!q.empty()){\n            int x = q.front();\n            q.pop();\n            in[x] = 0;\n            merge(x);\n        }\n    }\n    ll ans = 0;\n    for(int i = nxt[0]; i; i = nxt[i]){\n        if(a[i] > 0) ans += a[i];\n    }\n    cout << ans << endl;\n\n    return 0;\n}\n```\n\n",
        "postTime": 1579609624,
        "uid": 22991,
        "name": "fighter",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF391F3 \u3010Stock Trading\u3011"
    }
]