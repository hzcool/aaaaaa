[
    {
        "content": "## \u9898\u610f\u5206\u6790\n\u9996\u5148\u6211\u4eec\u60f3\u5230\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u5141\u8bb8\u6709\u91cd\u8fb9\uff0c\u6240\u4ee5\u8bf4\u6bcf\u6b21\u52a0\u8fb9\u53ea\u4f1a\u8ba9\u6574\u4e2a\u56fe\u7684\u8fde\u901a\u5206\u91cf\u7684\u6570\u91cf $-1$ \u6216\u4e0d\u53d8\u3002\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u4e86\u7b2c\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5982\u679c cnt \u4e5f\u5c31\u662f\u8fde\u901a\u5757\u7684\u6570\u91cf\u672c\u6765\u5c31\u5c0f\u4e8e q,\u90a3\u4e48\u80af\u5b9a\u505a\u4e0d\u5230\u3002\u540c\u7406\uff0c\u5982\u679c $cnt-q>p$\uff0c\u4e5f\u5c31\u662f\u628a\u6240\u6709\u8fb9\u90fd\u7528\u5b8c\u4e86\u8fd8\u662f\u592a\u591a\u4e86\uff0c\u90a3\u4e5f\u4e0d\u884c\u3002\u6700\u540e\u4e00\u4e2a no \u7684\u60c5\u51b5\u5c31\u662f\u5982\u679c\u672c\u6765\u6ca1\u8fb9\uff0c\u4f46\u662f $p\\not=0$\uff0c\u7136\u540e $q=n$\uff0c\u90a3\u4e48\u5c31\u662f\u8bf4\u6211\u4eec\u53ea\u8981\u52a0\u8fb9\u5c31\u4e00\u5b9a\u4f1a\u8ba9 $cnt-1$ \u4f46\u662f\u4eba\u5bb6\u8981\u6c42\u6700\u540e\u662f n \u4e2a\uff0c\u6240\u4ee5\u4e5f\u4e0d\u884c\u3002\n\n## \u505a\u6cd5\u5206\u6790\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u8d2a\u5fc3\uff1a\u6bcf\u6b21\u62ff\u4e24\u4e2a\u8fb9\u6743\u6700\u5c0f\u7684\u8fde\u901a\u5757\u51fa\u6765\uff0c\u8ba9\u4ed6\u4eec\u4e24\u4e2a\u8fde\u8d77\u6765\u3002\u8fd9\u6837\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u5b58\u5728\u4e4b\u540e\u7684\u67d0\u79cd\u64cd\u4f5c\u6bd4\u73b0\u5728\u597d\u3002\n\n\u6211\u4eec\u5728\u6bcf\u6b21\u52a0\u8fb9\u7684\u65f6\u5019\u7ef4\u62a4\u5e76\u67e5\u96c6\uff0c\u6bcf\u6b21\u5c06\u8fb9\u7684\u4e24\u7aef\u52a0\u5165\u5230\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\u8fb9\uff0c\u540c\u65f6\u7528\u4e00\u4e2a siz \u6570\u7ec4\u6765\u7ef4\u62a4\u6bcf\u4e2a\u5e76\u67e5\u96c6\u4e5f\u5c31\u662f\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u8fb9\u6743\u548c\u3002\n\n\u4e4b\u540e\u6211\u4eec\u8ba9\u6bcf\u4e00\u4e2a\u5e76\u67e5\u96c6\u51fa\u4e00\u4e2a\u201c\u4ee3\u8868\u201d\uff0c\u5728\u8fd9\u91cc\u6211\u9009\u62e9\u4e86\u8fd9\u4e2a\u5e76\u67e5\u96c6\u7684\u5927\u7956\u5148\u3002\u7136\u540e\u628a\u8fd9\u4e2a\u4ee3\u8868\u7684\u7f16\u53f7\u548c\u4ed6\u6240\u5728\u7684\u5e76\u67e5\u96c6\u7684\u5927\u5c0f siz \u585e\u8fdb\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u3002\u4e4b\u540e\u5c31 \n`\nwhile cnt>q\n`\n\uff0c\u6bcf\u6b21\u4ece\u961f\u5934\u53d6\u51fa\u4e24\u4e2a\uff0c\u8fd9\u4e24\u4e2a\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\uff0c\u7136\u540e\u8ba9\u8fd9\u4e24\u4e2a\u7684\u4e24\u4e2a\u4ee3\u8868 merge \u5728\u4e00\u8d77\uff0c\u8ba1\u7b97 siz\uff0c\u8bb0\u5f97 $p-1$\u3002\n\n\u4e4b\u540e\u8fd8\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u5f53 $cnt=q$ \u7684\u65f6\u5019\u9000\u51fa\u5faa\u73af\uff0c\u6b64\u65f6 p \u53ef\u80fd\u8fd8\u6709\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u6dfb\u52a0\u7684\u8fb9\u8fd8\u4e0d\u591f\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u8ba9\u8fd9\u4e2a\u70b9\u548c\u4ed6\u7684\u5927\u7956\u5148\u4e0d\u505c\u7684\u8fde\u8fb9\uff0c\u8fde\u5230\u591f\u4e3a\u6b62\uff0c\u7ec6\u8282\u8be6\u89c1\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=2e5+5;\nint cnt,fa[N],n,m,p,q,siz[N];\nstruct ConnectBlock\n{\n    int Size,dpty;\n    // int ;\n    bool operator < (const ConnectBlock &b) const\n\t{\n\t\treturn Size>b.Size;\n\t}\n};\npriority_queue<ConnectBlock> que;\nint read()\n{\n    int x=0,f=1;\n    char c=getchar();\n    while (c<'0'||c>'9')\n    {\n        if(c=='-') f=-1;\n        c=getchar();\n    }\n    while (c>='0'&&c<='9')\n    {\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    return x*f;\n}\nint getfa(int x)\n{\n    if(x==fa[x]) return x;\n    return getfa(fa[x]);\n}\nvoid merge(int x,int y,int z)\n{\n    int fax=getfa(x),fay=getfa(y);\n    if(fax==fay) siz[fax]+=z;\n    else \n    {\n        fa[fay]=fax;\n        siz[fax]+=siz[fay]+z;\n        cnt--;\n    }\n}\nsigned main()\n{\n    n=read(),m=read(),p=read(),q=read();\n    cnt=n;\n    for(int i=1;i<=n;i++) fa[i]=i;\n    for(int i=1;i<=m;i++) {int x=read(),y=read(),z=read();merge(x,y,z);}\n    for(int i=1;i<=n;i++) if(i==fa[i]) que.push(ConnectBlock{siz[i],i});\n    if(cnt<q || cnt-p>q || (!m && q==n && p)) puts(\"NO\"),exit(0);\n    puts(\"YES\");\n    while (cnt>q)\n    {\n        ConnectBlock x=que.top();que.pop();\n        ConnectBlock y=que.top();que.pop();\n        merge(x.dpty,y.dpty,min((int)1e9,x.Size+y.Size+1));\n        cout<<x.dpty<<\" \"<<y.dpty<<endl;\n        p--;\n        que.push(ConnectBlock{siz[x.dpty],x.dpty});\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(i!=getfa(i)) \n        {\n            while(p--) cout<<i<<\" \"<<getfa(i)<<endl;\n            return 0;\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1620616103,
        "uid": 517444,
        "name": "AladV",
        "ccfLevel": 0,
        "title": "CF362D\u9898\u89e3"
    },
    {
        "content": "\u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0b\u9898\u76ee\u7684\u6761\u4ef6\uff0c\u7ed9\u4f60\u4e00\u5806\u8fde\u901a\u5757\uff0c\u7136\u540e\u5728\u91cc\u9762\u8fde\u8fb9\uff0c\u8fde\u51fa $q$ \u4e2a\u8fde\u901a\u5757\uff0c\u53ef\u4ee5\u6709\u91cd\u8fb9\u5e76\u4e14\u4e0d\u7b97\u505a\u8d21\u732e\u3002\n\n\u5982\u679c\u6211\u4eec\u53bb\u8fde\u4e86\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u4f1a\u6d88\u5931\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5982\u679c\u4e0d\u662f\u91cd\u8fb9\u7684\u8bdd\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fde\u8fb9\u81f3\u5c11\u8981\u591a\u5c11\u4e2a\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5224\u6389\u65e0\u89e3\u7684\u60c5\u51b5\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u5982\u4f55\u53bb\u6784\u9020\u8fd9\u4e2a\u65b9\u6848\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e\u6bcf\u6b21\u9009\u4e24\u4e2a\u8fb9\u6743\u548c\u6bd4\u8f83\u5c0f\u7684\u8fde\u901a\u5757\u4e0d\u4f1a\u4f7f\u5f97\u7b54\u6848\u53d8\u52a3\u3002\n\n\u5047\u5982\u8bf4\u4e0d\u662f\u9009\u8fd9\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u53e6\u5916\u4e24\u4e2a\u8fde\u901a\u5757\u52a0\u4e0a\u53bb\u7684\u8fb9\u6743\u80af\u5b9a\u662f\u6bd4\u8fd9\u4e24\u4e2a\u8981\u5927\u7684\uff0c\u5e76\u4e14\u5728\u4e4b\u540e\u4e0d\u4f1a\u4ea7\u751f\u5176\u4f59\u8d21\u732e\uff0c\u6240\u4ee5\u8fd9\u6837\u8d2a\u5fc3\u7684\u51b3\u7b56\u8fd8\u662f\u633a\u5bf9\u7684\u3002\n\n\u5f53\u7136\uff0c\u6211\u4eec\u5982\u4f55\u53bb\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u662f\u5f88\u5173\u952e\u7684\u95ee\u9898\u3002\n\n\u8003\u8651\u53ef\u4ee5\u7528\u5806\u6765\u7ef4\u62a4\u8fde\u901a\u5757\uff0c\u7531\u4e8e\u6211\u4e0d\u60f3\u7528\u5e76\u67e5\u96c6\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u76f4\u63a5\u5c06\u4e24\u4e2a\u503c\u7ed9\u5408\u5e76\u3002\n\n\u5bf9\u4e8e\u8fd8\u6709\u5197\u4f59\u7684\u8981\u6dfb\u52a0\u7684\uff0c\u968f\u4fbf\u627e\u4e24\u4e2a\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8981\u5f00 long long\uff0c\u4ee5\u53ca\u6ce8\u610f\u9898\u76ee\u6240\u7ed9\u51fa\u7684 $\\min$ \u6761\u4ef6\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#define int long long \nusing namespace std;\nconst int INF=1e6+5;\nstruct _node_edge{\n\tint to_,next_,disv_;\n}edge[INF<<1];\nint tot,head[INF],num[INF],l[INF][5],ans[INF][5],ans1;\nvoid add_edge(int x,int y,int z) {\n\tedge[++tot]=(_node_edge){y,head[x],z};\n\thead[x]=tot;return ;\n}\nstruct _node_data{\n\tint v,id;\n\tbool operator < (const _node_data &x) const {\n\t\treturn x.v<v; \n\t};\n} aa[INF];\nint DFS(int x) {\n\tif (num[x]) return 0;\n\tnum[x]=tot;\n\tif (!l[tot][0]) l[tot][0]=x;\n\telse l[tot][1]=x;\n\tint sum=0;\n\tfor (int i=head[x];i;i=edge[i].next_) {\n\t\tint v=edge[i].to_;\n\t\tsum+=DFS(v)+edge[i].disv_;\n\t}\n\treturn sum;\n}\nint n,m,p,qq;\npriority_queue <_node_data> q;\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>n>>m>>p>>qq;\n\tfor (int i=1;i<=m;i++) {\n\t\tint x=0,y=0,z=0;\n\t\tcin>>x>>y>>z;\n\t\tadd_edge(x,y,z);\n\t\tadd_edge(y,x,z);\n\t}\n\ttot=0;\n\tfor (int i=1;i<=n;i++) {\n\t\tif (num[i]) continue;\n\t\ttot++;aa[tot].v=DFS(i);\n\t\taa[tot].id=tot;\n\t\tq.push(aa[tot]);\n\t}\n//\tif (n==1000 && m==100000)\n//\t\tcout<<tot<<\" ??\\n\";\n\tif (tot-p>qq) {cout<<\"NO\\n\";return 0;}\n//\tcout<<\"YES\\n\";\n\tint pp=p;p=tot-qq;pp-=p;\n\twhile (q.size()>1 && p) {\n\t\t_node_data x=q.top();q.pop();\n\t\t_node_data y=q.top();q.pop();\n\t\tans[++ans1][0]=l[x.id][0];\n\t\tans[ans1][1]=l[y.id][0];\n//\t\tcout<<x.v<<\" \"<<x.v<<\" \"\n\t\tx.v=(x.v+y.v)+min(x.v+y.v+1,(int)(1e9))+1;\n\t\tif (!l[x.id][1]) l[x.id][1]=l[y.id][0];\n\t\tq.push(x);\n\t\tp--;\n\t}\n\t\n\twhile (pp && q.size()) {\n\t\t_node_data x=q.top();q.pop();\n\t\tif (!l[x.id][0] || !l[x.id][1]) continue;\n//\t\tcout<<x.v<<\" fad?\\n\";\n\t\tans[++ans1][0]=l[x.id][0];\n\t\tans[ans1][1]=l[x.id][1];\n\t\tq.push(x);pp--;\n\t}\n\t\n\tif (!p && !pp) cout<<\"YES\\n\";\n\telse {cout<<\"NO\\n\";return 0;}\n\tfor (int i=1;i<=ans1;i++)\n\t\tcout<<ans[i][0]<<\" \"<<ans[i][1]<<\"\\n\";\n\treturn 0;\n}\n```\n",
        "postTime": 1659959564,
        "uid": 208653,
        "name": "_edge_",
        "ccfLevel": 0,
        "title": "CF362D"
    },
    {
        "content": "### \u9898\u76ee\u94fe\u63a5\nhttps://www.luogu.com.cn/problem/CF362D  \nhttp://codeforces.com/contest/362/problem/D  \n### \u9898\u76ee\u5927\u610f  \n\u5df2\u77e5\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u80fd\u5426\u901a\u8fc7\u6dfb\u52a0 $p$ \u6761\u8fb9\u4f7f\u56fe\u4e2d\u8fde\u901a\u5757\u6570\u6070\u597d\u4e3a $q$ \u3002\u82e5\u4e0d\u80fd\uff0c\u5219\u8f93\u51fa`NO`\uff0c\u5426\u5219\u8f93\u51fa`YES`\uff0c\u5e76\u6c42\u51fa\u52a0\u8fb9\u540e\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u65b9\u6848\u3002  \n\u5176\u4e2d\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u4e24\u70b9\uff08\u5373\u4f7f\u5df2\u7ecf\u76f8\u8fde\uff09\u52a0\u8fb9\uff0c\u82e5\u4e24\u70b9\u4e0d\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u5219\u52a0\u7684\u8fb9\u957f\u5ea6\u4e3a $min(10^9,S+1)$ \uff0c\u5426\u5219\u4e3a $1000$ \u3002\u5176\u4e2d $S$ \u8981\u8fde\u63a5\u7684\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u8fb9\u6743\u548c\u3002  \n### \u601d\u8def  \n\u7b97\u6cd5\uff1a\u5e76\u67e5\u96c6+\u4f18\u5148\u961f\u5217\u3002  \n\u672c\u9898\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u53ea\u9700\u8981\u77e5\u9053\u4e24\u70b9\u662f\u5426\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u5199\u3002  \n\u9996\u5148\u662f\u5224\u65ad\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u5206\u4e3a\u4ee5\u4e0b\u4e09\u79cd\uff1a  \n1. \u52a0\u8fb9\uff08\u4e5f\u5c31\u662f\u8fde\u63a5\u8fde\u901a\u5757\uff09\u540e\u8054\u901a\u5757\u6570\u91cf\u4f9d\u65e7\u5927\u4e8e $q$\u3002(`tot-p>q`)  \n2. \u52a0\u8fb9\u524d\u8fde\u901a\u5757\u6570\u91cf\u5df2\u7ecf\u5c0f\u4e8e $q$\u3002(`tot<q`)\n3. \u70b9\u7684\u6570\u91cf\u7b49\u4e8e $q$ \uff0c\u4e14\u6ca1\u6709\u8fb9\uff0c\u4f46 $p>0$ \uff0c\u663e\u7136\u4efb\u610f\u4e24\u70b9\u95f4\u5747\u4e0d\u80fd\u52a0\u8fb9\u3002(`!m&&!(q-n)&&p`)  \n\n\u56e0\u4e3a\u5224\u65ad\u9700\u8981\u77e5\u9053\u8fde\u901a\u5757\u6570\u91cf `tot`\uff0c\u56e0\u6b64\u9700\u8981\u5148\u5efa\u597d\u5e76\u67e5\u96c6\u3002  \n\u4e4b\u540e\u6c42\u6700\u4f18\u65b9\u6848\u3002\u56e0\u4e3a\u9700\u8981\u8fb9\u6743\u503c\u6700\u5c0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u5f53\u524d\u6700\u5c0f\u7684\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u6bcf\u6b21\u53d6\u51fa\u8fdb\u884c\u5408\u5e76\u5e76\u8f93\u51fa\u5408\u5e76\u7684\u7236\u4eb2\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u76f4\u5230\u8fde\u901a\u5757\u6570\u91cf\u7b49\u4e8e $q$\u3002  \n\u6700\u540e\u5982\u679c\u52a0\u5b8c\u8fb9\u540e\u4f9d\u7136 $q>0$\uff0c\u90a3\u4e48\u968f\u4fbf\u627e\u5728\u76f8\u540c\u8fde\u901a\u5757\u4e2d\u7684\u4e24\u4e2a\u70b9\uff0c\u5269\u4e0b\u7684\u8fb9\u90fd\u52a0\u7ed9\u4ed6\u4eec\u5373\u53ef\u3002  \n### code  \n~~\u4f60\u770b\u4ee3\u7801\u8fd9\u4e48\u77ed\uff0c\u624d29\u884c(\u538b\u4e86\u597d\u4e45)~~\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn = 1e5+7,inf = 1e9;\nlong long n,m,p,q,sz[maxn],fa[maxn],tot;\nstruct node\n{\n\tlong long x,sz;\n\tbool operator < (const node& rhs) const {return sz>rhs.sz;}\n}t1,t2;\npriority_queue<node> Q;\nlong long find(long long x){return x==fa[x]?x:fa[x]=find(fa[x]);}\nlong long merge(long long x,long long y,long long l)\n{\n\tx=find(x),y=find(y);\n\tif(x==y)sz[x]+=l;else fa[x]=y,sz[y]+=l+sz[x],tot--;\n}\nint main()\n{\n\tscanf(\"%lld%lld%lld%lld\",&n,&m,&p,&q),tot=n;//tot\u4e3a\u8fde\u901a\u5757\u6570 \n\tfor(long long i=1;i<=n;++i)fa[i]=i;//\u521d\u59cb\u5316\u5e76\u67e5\u96c6 \n\tfor(long long i=1,x,y,l;i<=m;++i)scanf(\"%lld%lld%lld\",&x,&y,&l),merge(x,y,l);//\u6784\u5efa\u5e76\u67e5\u96c6 \n\tif(tot-p>q||tot<q||(!m&&!(q-n)&&p))return 0*puts(\"NO\");else puts(\"YES\");//\u5224\u65ad\u65e0\u89e3 \n\tfor(int i=1;i<=n;++i)if(find(i)==i)Q.push((node){i,sz[fa[i]]});// \n\twhile(tot>q)t1=Q.top(),Q.pop(),t2=Q.top(),Q.pop(),p--,tot--,printf(\"%lld %lld\\n\",t1.x,t2.x)\n\t,fa[t2.x]=t1.x,sz[t1.x]+=min(inf,t1.sz+t2.sz+1)+t2.sz,Q.push((node){t1.x,sz[t1.x]});//\u53d6\u51fa\u6700\u5c0f\u7684\u4e24\u4e2a\u8fde\u901a\u5757\u5408\u5e76\u540e\u518d\u538b\u5165\u4f18\u5148\u961f\u5217 \n\tfor(tot=1;tot<=n;++tot)if(find(tot)!=tot)break;//\u968f\u4fbf\u627e\u5728\u76f8\u540c\u8fde\u901a\u5757\u4e2d\u7684\u4e24\u4e2a\u70b9\n\twhile(p--)printf(\"%lld %lld\\n\",tot,fa[tot]);\n\treturn 0;\n}\n```",
        "postTime": 1591180460,
        "uid": 39740,
        "name": "sdxjzsq",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF362D \u3010Fools and Foolproof Roads\u3011"
    }
]