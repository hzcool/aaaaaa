[
    {
        "content": "\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u5757\uff1a\n\n1. square \u7684**\u5bf9\u8fb9**\u88ab\u4e00\u6761 segment \u8fde\u63a5\uff0c\u5982\u56fe\uff1a\n  \n   ![image.png](https://i.loli.net/2020/08/23/9hoOlIuLHM2Bqzg.png)\n\n2. \u4e24\u6761 segment **\u76f8\u4ea4**\uff0c\u5982\u56fe\uff1a\n\n   ![image.png](https://i.loli.net/2020/08/23/mqGVZQ3cO1up7Kn.png)\n   \n   \u6ce8\u610f\uff0c\u56e0\u4e3a\u6bcf\u6761 segment \u5fc5\u7136\u6709\u4e00\u6bb5\u4e0e square \u7684\u4e00\u8fb9\u76f8\u8fde\uff0c\u5219\u4e24\u6761\u76f8\u4ea4\u5fc5\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u5757\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u8fd9\u4e24\u79cd\u60c5\u51b5\u6765\u8ba1\u7b97\u6240\u6709\u7684\u5757\u3002\n\n\u9996\u5148\uff0c$ans \\gets 1$\uff08\u6ca1\u6709 segment \u4e5f\u6709\u521d\u59cb\u7684\u4e00\u4e2a\u5757\uff09\u3002\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u5f88\u597d\u5904\u7406\u7684\uff0c\u5bf9\u4e8e\u8bfb\u5165\u7684\u67d0\u6761\u6a2a\u8fb9\u6216\u8005\u7ad6\u8fb9\uff0c\u5982\u679c\u5b83\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a $0$ \u548c $10^6$\uff0c\u5219 $ans \\gets ans + 1$\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4e00\u4e2a**\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2**\u7684\u95ee\u9898\u3002\n\n\u6bd4\u5982\uff0c\u6211\u4eec\u628a**\u6a2a\u8fb9**\u770b\u4f5c\u300c\u4fee\u6539\u300d\uff0c**\u7ad6\u8fb9**\u770b\u4f5c\u300c\u67e5\u8be2\u300d\u3002\n\n\u4e0b\u9762\uff0c\u6211\u4eec\u4f9d\u6b21\u5904\u7406\u6a2a\u5750\u6807\u4f4d\u4e8e $1, 2, \\cdots 10^6-1$ \u7684\u4ea4\u70b9\uff08\u4e5f\u5c31\u662f\u4ece\u5de6\u5f80\u53f3\u626b\u63cf\uff09\uff0c\u53ef\u4ee5\u62bd\u8c61\u4e3a $1-$\u65f6\u523b\uff0c$2-$\u65f6\u523b\u2026\u2026\uff0c\u5728\u6bcf\u4e00\u4e2a\u65f6\u523b\uff0c**\u5148\u5904\u7406\u67e5\u8be2\u64cd\u4f5c\uff0c\u518d\u5904\u7406\u4fee\u6539\u64cd\u4f5c**\u3002\n\n\u5c1d\u8bd5\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 $\\text{cover}$\uff0c$\\text{cover}_i = 0/1$ \u8868\u793a\u5728\u5f53\u524d\u65f6\u523b\u4e0b\uff0c\u7eb5\u5750\u6807 $i$ \u4e0a\u9762\u662f\u5426\u88ab\u7ebf\u6bb5\u8986\u76d6\u3002\n\n* \u5b9a\u4e49\u64cd\u4f5c $\\operatorname{\\large{M}\\small{ODIFY}}\\normalsize{(t, p, v)}$ \u8868\u793a\u5728 $t$ \u65f6\u523b\uff0c\u5c06 $\\text{cover}_p$ \u589e\u52a0 $v$\uff1b\n* \u5b9a\u4e49\u64cd\u4f5c $\\operatorname{\\large{Q}\\small{UERY}}\\normalsize{(t, l, r)}$ \u8868\u793a\u8be2\u95ee\u5728 $t$ \u65f6\u523b\uff0c\u67e5\u8be2 $\\sum\\limits_{i=l}^{r}\\text{cover}_i$\u3002\n\n\u63cf\u8ff0\u4e00\u4e0b\u4e00\u6761\u6a2a\u8fb9 $(y, lx, rx)$\uff0c\u5b83\u8868\u793a\uff0c\u5728\u65f6\u523b $[lx, rx]$ \u4e2d\uff0c\u628a $\\text{cover}_y$ \u8d4b\u503c\u4e3a $1$\u3002\u90a3\u4e48\uff0c\u901a\u8fc7\u5dee\u5206\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e00\u6761\u6a2a\u8fb9\u62bd\u8c61\u4e3a\u4e24\u4e2a\u4fee\u6539\u64cd\u4f5c\uff1a$\\operatorname{\\large{M}\\small{ODIFY}}\\normalsize{(lx-1, y, 1)}$ \u548c $\\operatorname{\\large{M}\\small{ODIFY}}\\normalsize{(rx, y, -1)}$\u3002\u56e0\u4e3a\u662f\u5148\u67e5\u8be2\u540e\u4fee\u6539\uff0c\u6240\u4ee5\uff0c$lx$ \u65f6\u523b\u5c31\u5e94\u8be5\u88ab\u8ba1\u5165\u7684\u8d21\u732e\u5e94\u8be5\u5728 $lx-1$ \u65f6\u523b\u4fee\u6539\uff0c\u540c\u7406\uff0c$rx$ \u65f6\u523b\u4ee5\u540e\u5c31\u8981\u88ab\u64a4\u9500\u7684\u5f71\u54cd\u5e94\u8be5\u5728 $rx$ \u65f6\u523b\u4fee\u6539\u3002\n\n\u63cf\u8ff0\u4e00\u4e0b\u4e00\u6761\u7ad6\u8fb9 $(x, ly, ry)$\uff0c\u5b83\u4f1a\u4e0e**\u5728 $x$ \u65f6\u523b\uff0c$\\text{cover}_i = 1(ly \\le i \\le ry)$** \u7684\u90a3\u4e9b\u7eb5\u5750\u6807\u4e0a\u7684\u7ebf\u6bb5\u76f8\u4ea4\u3002\u90a3\u4e48\uff0c\u603b\u91cf\u5c31\u662f\u4e00\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u5373 $\\operatorname{\\large{Q}\\small{UERY}}\\normalsize{(x, ly, ry)}$\uff0c\u5c06\u5176\u7d2f\u52a0\u5230 $ans$ \u4e2d\u3002\n\n\u90a3\u4e48\uff0c\u5c06\u6240\u6709\u64cd\u4f5c\u6309\u7167 **\u300c\u65f6\u95f4\u4e0d\u540c\u65f6\uff0c\u6309\u7167\u65f6\u95f4\u5347\u5e8f\uff1b\u65f6\u95f4\u76f8\u540c\u65f6\uff0c\u5148\u4fee\u6539\u540e\u67e5\u8be2\u300d** \u7684\u65b9\u5f0f\u6392\u5e8f\uff0c\u8fd9\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u6807\u51c6\u7684\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4/\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n \\log n)$\uff0c\u4ee3\u7801\u4e2d\u7528\u7684\u662f\u6811\u72b6\u6570\u7ec4\uff0c\u5c06\u5750\u6807\u8303\u56f4\u5e73\u79fb\u5230\u4e86 $[1, 10^6 + 1]$ \u9632\u6b62\u8d8a\u754c\uff0c\u5e76\u4e14\u5c06\u4fee\u6539\u548c\u67e5\u8be2\u5206\u5f00\u4e86\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5b58\u5728\u4e00\u8d77\u6392\u5e8f\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define AddModification(t, p, v) mdfy[++m0] = (modification){t, p, v};\n#define AddQuery(t, l, r) qry[++q0] = (query){t, l, r};\nusing namespace std;\nconst int N = 1e5 + 5, S = 1e6 + 5;\nint y[N], lx[N], rx[N], x[N], ly[N], ry[N];\nint ans = 1, n, m, o[S], m0, q0;\nstruct modification\n{\n\tint t, p, v;\n\tbool operator < (const modification &oth) const { return t < oth.t; }\n} mdfy[N << 1];\nstruct query\n{\n\tint t, l, r;\n\tbool operator < (const query &oth) const { return t < oth.t; }\n} qry[N << 1];\nvoid Modify(modification &opt)\n{\n\tfor(int p = opt.p; p < S; p += p & -p)\n\t\to[p] += opt.v;\n}\nint Query(query &opt)\n{\n\tint res = 0;\n\tfor(int p = opt.r; p; p -= p & -p)\n\t\tres += o[p];\n\tfor(int p = opt.l - 1; p; p -= p & -p)\n\t\tres -= o[p];\n\treturn res;\n}\nsigned main()\n{\n\tscanf(\"%lld %lld\", &n, &m);\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%lld %lld %lld\", &y[i], &lx[i], &rx[i]);\n\t\tif(lx[i] == 0 && rx[i] == 1000000) ans++;\n\t\ty[i]++; lx[i]++; rx[i]++;\n\t\tAddModification(lx[i] - 1, y[i], 1);\n\t\tAddModification(rx[i], y[i], -1);\n\t}\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tscanf(\"%lld %lld %lld\", &x[i], &ly[i], &ry[i]);\n\t\tif(ly[i] == 0 && ry[i] == 1000000) ans++;\n\t\tx[i]++; ly[i]++; ry[i]++;\n\t\tAddQuery(x[i], ly[i], ry[i]);\n\t}\n\tsort(mdfy + 1, mdfy + m0 + 1);\n\tsort(qry + 1, qry + q0 + 1);\n\tint nowm = 1, nowq = 1;\n\tfor(; nowm <= m0 && mdfy[nowm].t == 0; nowm++) Modify(mdfy[nowm]);\n\tfor(int t = 1; t < S; t++)\n\t{\n\t\tfor(; nowq <= q0 && qry[nowq].t == t; nowq++) ans += Query(qry[nowq]);\n\t\tfor(; nowm <= m0 && mdfy[nowm].t == t; nowm++) Modify(mdfy[nowm]);\n\t}\n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1598174038,
        "uid": 51971,
        "name": "syksykCCC",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1401E \u3010Divide Square\u3011"
    },
    {
        "content": "\n\u6765\u849f\u84bb\u900a\u900a\u7684\u535a\u5ba2\u56ed\u770b\u770b$\\to$\n\n[$\\Huge\\it\\color{#aa4514}{George1123}$](https://www.cnblogs.com/George1123/p/13550010.html)\n\n---\n\n## \u9898\u9762\n\n> [CF1401E Divide Square](https://www.luogu.com.cn/problem/CF1401E) \n\n> \u7ed9\u4e00\u4e2a\u6b63\u65b9\u5f62\u5e73\u9762\u8fb9\u957f\u4e3a $10^6$\uff0c\u7ed9 $n$ \u6761\u6a2a\u7ebf\u6bb5\u548c $m$ \u6761\u7ad6\u7ebf\u6bb5\uff0c**\u6bcf\u6761\u7ebf\u6bb5\u90fd\u4e0e\u6b63\u65b9\u5f62\u8fb9\u7f18\u76f8\u4ea4**\u4e14**\u4e00\u6761\u76f4\u7ebf\u4e0a\u4e0d\u4f1a\u6709\u4e24\u6761\u7ebf\u6bb5**\uff0c\u6c42\u88ab\u7ebf\u6bb5\u5212\u5206\u540e\u6709\u51e0\u4e2a\u5757\u3002\n\n> \u6570\u636e\u8303\u56f4\uff1a$0\\le n,m\\le 10^5$\uff0c$0<x,y<10^6$\uff0c$0\\le (lx<rx),(ly<ry)\\le 10^6$\u3002\n\n---\n\n## \u849f\u84bb\u8bed\n\n\u524d\u5929\u6253\u5c0f\u53f7 $30$ \u5206\u949f\u5207\u4e86 $\\tt ABCD$ \u4ee5\u4e3a\u80fd $\\tt AK$\uff0c\u7ed3\u679c $\\tt E$ \u5c11\u770b\u4e86\u6761\u4ef6\u5f00\u59cb\u786c\u94a2\u5e78\u5f97\u7206\u96f6\u3002\n\n---\n\n## \u849f\u84bb\u89e3\n\n**\u7ed3\u8bba\uff1a**$ans=($\u5185\u90e8\u4ea4\u70b9\u6570 $p)+(10^6$ \u957f\u5ea6\u7ebf\u6bb5\u6570 $s)+1$\u3002\n\n\u8fd9\u4e2a\u7ed3\u8bba\u5e94\u8be5\u6bd4\u8f83\u597d\u627e\uff0c\u53ef\u4ee5\u591a\u753b\u51e0\u4e2a\u56fe\u627e\u89c4\u5f8b\u3002\n\n\u849f\u84bb\u672c\u6765\u60f3\u4e86\u4e00\u4e2a\u5f88\u70ab\u9177\u7684\u8bc1\u660e\uff0c\u4f46\u88ab\u8bc1\u4f2a\u4e86\uff0c\u770b\u4e2a\u900a\u4e00\u70b9\u7684\u5427\u2026\u2026\n\n**\u8bc1\u660e\uff1a**\n\n\u5bf9\u4e8e $s=0$ \u7684\u60c5\u51b5\uff0c\u6240\u6709\u7ebf\u6bb5\u90fd\u8d34\u4e14\u4ec5\u8d34\u4e00\u8fb9\u53c8\u4e92\u76f8\u4e0d\u91cd\u5408\uff0c\u6240\u4ee5\u6bcf\u591a\u4e00\u4e2a\u4ea4\u70b9\u591a\u4e00\u4e2a\u5757\u6613\u8bc1\u3002\n\n\u5bf9\u4e8e $s>0$ \u7684\u60c5\u51b5\uff0c\u5982\u679c\u4e00\u6761\u957f\u5ea6\u4e3a $10^6$ \u7684\u7ebf\u6bb5\u4e0d\u7a7f\u8fc7\u7ebf\u6bb5\uff0c\u90a3\u4e48\u56fa\u7136\u628a\u6b63\u65b9\u5f62\u5206\u6210\u4e24\u5757\u591a\u4e00\u5757\u3002\u5426\u5219\u4ece\u4e00\u6761\u88ab\u7a7f\u8fc7\u7684\u7ebf\u6bb5\u628a\u5b83\u62c6\u6210\u4e24\u6761\u7ebf\u6bb5\u8003\u8651\uff0c\u7b54\u6848\u4e5f\u4f1a $+1$\u3002\n\n\u7efc\u4e0a\uff0c$ans=p+s+1$\u3002\n\n---\n\u81f3\u4e8e\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u626b\u63cf\u7ebf\uff0c\u4ee3\u7801\u4e2d\u7ed9\u51fa\u4e00\u79cd\u65b0\u5947\u7684\u6811\u72b6\u6570\u7ec4\u5199\u6cd5\u3002\n\n---\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n//Start\ntypedef long long ll;\ntypedef double db;\n#define mp(a,b) make_pair((a),(b))\n#define x first\n#define y second\n#define be(a) (a).begin()\n#define en(a) (a).end()\n#define sz(a) int((a).size())\n#define pb(a) push_back(a)\n#define R(i,a,b) for(int i=(a),I=(b);i<I;i++)\n#define L(i,a,b) for(int i=(a),I=(b);i>I;i--)\nconst int iinf=0x3f3f3f3f;\nconst ll linf=0x3f3f3f3f3f3f3f3f;\n\n//Data\nconst int N=1e5,M=1e6;\nint n,m; ll ans=1;\nvector<int> d;\nstruct segment{\n\tint op,y,l,r;\n\tsegment(){}\n\tsegment(int _op,int _y,int _l,int _r){\n\t\top=_op,y=_y,l=_l,r=_r;\n\t}\n};\nvector<segment> a;\n\n//FenwickTree\nvector<int> c;\nvoid add(int i,int v){for(;i<sz(c);i|=i+1) c[i]+=v;}\nint sum(int i){int v=0;for(;~i;(i&=i+1)--) v+=c[i];return v;}\n\n//Main\nint main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0),cout.tie(0);\n\tcin>>n>>m;\n\tR(i,0,n){\n\t\tint y,l,r; cin>>y>>l>>r;\n\t\tif(r-l==M) ++ans;\n\t\td.pb(l),d.pb(r),a.pb(segment(0,y,l,r));\n\t}\n\tR(i,0,m){\n\t\tint x,l,r; cin>>x>>l>>r;\n\t\tif(r-l==M) ++ans;\n\t\td.pb(x),a.pb(segment(1,l,x,1)),a.pb(segment(1,r,x,-1));\n\t}\n\tsort(be(a),en(a),[&](segment p,segment q){\n\t\tif(p.y!=q.y) return p.y<q.y;\n\t\treturn p.op*p.r>q.op*q.r;\n\t});\n\tsort(be(d),en(d)),d.erase(unique(be(d),en(d)),en(d));\n\tc.assign(sz(d),0);\n\t// c.assign(M+1,0);\n\tfor(auto u:a){\n\t\tif(u.op){\n\t\t\tint i=lower_bound(be(d),en(d),u.l)-be(d);\n\t\t\tadd(i,u.r);\n\t\t} else {\n\t\t\tint l=lower_bound(be(d),en(d),u.l)-be(d);\n\t\t\tint r=lower_bound(be(d),en(d),u.r)-be(d);\n\t\t\tans+=sum(r)-sum(l-1);\n\t\t}\n\t}\n\tcout<<ans<<'\\n';\n\treturn 0;\n}\n```\n---\n**\u795d\u5927\u5bb6\u5b66\u4e60\u6109\u5feb\uff01**",
        "postTime": 1598179910,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1401E \u3010Divide Square\u3011"
    },
    {
        "content": "\u6211\u4eec\u5b9a\u4e49\u7279\u6b8a\u7ebf\u6bb5\u4e3a\u4e00\u4e2a\u7aef\u70b9\u4e3a  $0$\uff0c\u53e6\u4e00\u4e2a\u7aef\u70b9\u4e3a $10^6$ \u7684\u7ebf\u6bb5\u3002\n\n\u7136\u540e\u778e\u731c\u4e00\u4e2a\u770b\u4e0a\u53bb\u5341\u5206\u4e0d\u9760\u8c31\u7684\u7ed3\u8bba\uff1a\n$$\n\\text{ans}=\\text{\u7ebf\u6bb5\u4ea4\u70b9\u4e2a\u6570}+\\text{\u7279\u6b8a\u7ebf\u6bb5\u4e2a\u6570}+1\n$$\n\u7136\u540e\u4f60\u53d1\u73b0\u5b83\u8fc7\u4e86\uff08\u4eb2\u8eab\u7ecf\u5386\n\n\u8003\u8651\u4e24\u6839\u7ebf\u6bb5\uff0c\u5982\u679c\u5b83\u4eec\u76f8\u4ea4\u5219\u5fc5\u7136\u4ea7\u751f**\u6070\u597d** $1$ \u4e2a\u5757\u3002\u8fd9\u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u6bcf\u6839\u7ebf\u6bb5\u90fd\u6709\u81f3\u5c11\u4e00\u4e2a\u7aef\u70b9\u5728\u8fb9\u754c\u4e0a\u3002\n\n\u666e\u901a\u7ebf\u6bb5\u4e0d\u4f1a\u4ea7\u751f\u5728\u6b64\u4e4b\u5916\u7684\u8d21\u732e\uff0c\u800c\u7279\u6b8a\u7ebf\u6bb5\u4eec\u81ea\u5df1\u5c31\u53ef\u4ee5\u4ea7\u751f $1$ \u7684\u8d21\u732e\u3002\n\n\u4ea4\u70b9\u4e2a\u6570\u5219\u662f\u4e00\u4e2a\u7ecf\u5178\u6811\u72b6\u6570\u7ec4\u95ee\u9898\uff1a\u7528\u503c\u57df\u4e3a $1\\sim 10^6$ \u7684\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6c34\u5e73\u7684\u7ebf\u6bb5\u3002\u5c06\u5782\u76f4\u7ebf\u6bb5\u6309\u6a2a\u5750\u6807\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u679a\u4e3e\u7ad6\u76f4\u7ebf\u6bb5\u7684\u540c\u65f6\u7ef4\u62a4\u6c34\u5e73\u7ebf\u6bb5\u3002\n\n```c++\n// 2020.08.21\n// by LTb\n// #pragma GCC optimize(2)\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define debug cout<<\"QwQ\"<<endl;\ninline int read(){\n    int x=0,f=1;\n    char ch;\n    while(ch<'0'||ch>'9')  {if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return f*x;\n}\n\nconst int MAXN=100005;\nconst int MAX=1e6;\nint n,m;\nint a[MAXN];\nstruct BIT{\n\tint tree[MAX+10];\n\tint Max_Value=n;\n\n\tinline int lowbit(int x){\n\t    return x&(-x);\n\t}\n\n\tinline void add(int x,int c){\n\t\twhile (x<=Max_Value+1){\n\t\t\ttree[x]+=c;\n\t\t\tx+=lowbit(x);\n\t\t}\n\t}\n\n\tinline int query(int x){\n\t\tint ans=0;\n\t\twhile (x>0){\n\t\t\tans+=tree[x];\n\t\t\tx-=lowbit(x);\n\t\t}\n\t\treturn ans;\n\t}\n\n\tinline int query2(int l,int r){\n\t\treturn query(r)-query(l-1);\n\t}\n\n\tinline void add2(int l,int r,int c){\n\t\tadd(l,c);\n\t\tadd(r+1,-c);\n\t}\n}t;\n\nvector<pair<int,int> > v[MAX+10];\nstruct node{\n\tint x,l,r;\n\tbool operator<(node b){\n\t\treturn x<b.x;\n\t}\n}q[MAXN];\n\nsigned main()\n\n{\n\tn=read();m=read();\n\tt.Max_Value=MAX+2;\n\tint ans=1;\n\tfor (int i=1;i<=n;i++){\n\t\tint x=read(),l=read(),r=read();\n\t\tif (l==0 && r==MAX) ans++;\n\t\tv[l].push_back(make_pair(x,1));\n\t\tv[r+1].push_back(make_pair(x,-1));\n\t}\n\n\tfor (int i=1;i<=m;i++){\n\t\tq[i].x=read();q[i].l=read();q[i].r=read();\n\t\tif (q[i].l==0 && q[i].r==MAX) ans++;\n\t}\n\n\tsort(q+1,q+1+m);\n\n\tint cur=0;\n\tfor (int i=1;i<=m;i++){\n\t\twhile (cur<=q[i].x){\n\t\t\tfor (auto j:v[cur])\n\t\t\t\tt.add(j.first,j.second);\n\t\t\tcur++;\n\t\t}\n\t\tint tmp=t.query2(q[i].l,q[i].r);\n\t\tans+=tmp;\n\t}\n\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1598057520,
        "uid": 48981,
        "name": "LTb_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1401E \u3010Divide Square\u3011"
    },
    {
        "content": "\u5ba3\u4f20\u535a\u5ba2 $\\to$ [link](https://blog.csdn.net/BWzhuzehao/article/details/119642949)\n\n\u4e00\u9053\u5957\u8def\u9898\u3002\n\n\u8003\u8651\u5c06\u6240\u6709\u7684\u6a2a\u7ebf\u5206\u4e2a\u7c7b\uff0c\u5de6\u7aef\u70b9\u5728\u8fb9\u754c\u4e0a\u7684\u4e3a 1 \u7c7b\uff08L \u7c7b\uff09\uff0c\u53f3\u7aef\u70b9\u5728\u8fb9\u754c\u4e0a\u7684\u4e3a 1 \u7c7b\uff08R \u7c7b\uff09\uff0c\u5de6\u53f3\u90fd\u5728\u8fb9\u754c\u4e0a\u7684\u968f\u610f\u5206\uff0c\u7136\u540e\u5c06\u6240\u6709\u7684\u7ad6\u7ebf\u6309\u7167\u5176 $x$ \u5347\u5e8f\u6392\u5e8f\u3002\n\n\u5f00\u4e24\u4e2a\u503c\u57df\u7ebf\u6bb5\u6811\uff08\u80fd\u652f\u6301\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u5373\u53ef\uff09\uff0c\u4e00\u68f5\u7ef4\u62a4 L \u7c7b\uff0c\u4e00\u68f5\u7ef4\u62a4 R \u7c7b\u3002\n\n- \u7406\u8bba\u4e0a\u4e00\u68f5\u4e5f\u53ef\u884c\uff0c\u4f46\u662f\u4e24\u68f5\u7406\u89e3\u65b9\u4fbf\u3002\n\n\u5c06\u6240\u6709\u7ad6\u7ebf\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u7edf\u8ba1\u7ad6\u7ebf\u5206\u5272\u6a2a\u7ebf\u6240\u521b\u9020\u7684\u8d21\u732e\uff0c\u5bf9\u4e8e\u4e00\u6761\u6a2a\u7ebf\u800c\u8a00\uff0c\u9996\u5148\u5c06 R \u7c7b\u91cc\u9762\u6240\u6709\u5de6\u7aef\u70b9\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u7ad6\u7ebf $x$ \u7684\u7ebf\u4e22\u5230\u7ebf\u6bb5\u6811\u91cc\uff0c\u5c06 L \u7c7b\u91cc\u9762\u6240\u6709\u53f3\u7aef\u70b9\u5927\u4e8e\u5f53\u524d\u7ad6\u7ebf $x$ \u7684\u5220\u6389\uff0c\u8fd9\u6837\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6a2a\u7ebf\u5c31\u662f\u53ef\u80fd\u4f1a\u505a\u51fa\u8d21\u732e\u7684\u7ebf\u3002\n\n\u7136\u540e\u76f4\u63a5\u7edf\u8ba1\u4e00\u4e0b\u4e24\u7c7b\u4e2d $y$ \u88ab\u7ad6\u7ebf\u8986\u76d6\u7684\u7ebf\u6bb5\u4e2a\u6570\u5373\u53ef\u3002\n\n\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u90fd\u80fd\u7528\u7ebf\u6bb5\u6811\u5b8c\u6210\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u53ef\u80fd\u6709\u7684\u7ebf\u5de6\u53f3\u7aef\u70b9/\u4e0a\u4e0b\u7aef\u70b9\u90fd\u5728\u8fb9\u754c\u4e0a\uff0c\u6b64\u65f6\u7b54\u6848\u9700\u8981\u989d\u5916\u52a0 1\u3002\n\nCode\uff1a[GitHub CodeBase-of-Plozia CF1401E Divide Square.cpp](https://github.com/Plozia/CodeBase-of-Plozia/blob/main/Codeforces%20%E5%88%B7%E9%A2%98%E5%90%88%E9%9B%86/CF1401E%20Divide%20Square.cpp)\n\n```cpp\n/*\n========= Plozia =========\n    Author:Plozia\n    Problem:CF1401E Divide Square\n    Date:2021/8/12\n========= Plozia =========\n*/\n\n#include <bits/stdc++.h>\n\ntypedef long long LL;\nconst int MAXN = 1e5 + 5, MAXA = 1e6 + 5;\nint n, m, cntl, cntr, cl, cr;\nLL ans = 1;\nstruct node1 { int l, r, sum; } LTree[MAXA << 2], RTree[MAXA << 2];\nstruct node2 { int y, r; } Linel[MAXN];\nstruct node3 { int y, l; } Liner[MAXN];\nstruct node4 { int x, l, r; } a[MAXN];\n\nint Read()\n{\n    int sum = 0, fh = 1; char ch = getchar();\n    for (; ch < '0' || ch > '9'; ch = getchar()) fh -= (ch == '-') << 1;\n    for (; ch >= '0' && ch <= '9'; ch = getchar()) sum = sum * 10 + (ch ^ 48);\n    return sum * fh;\n}\nint Max(int fir, int sec) { return (fir > sec) ? fir : sec; }\nint Min(int fir, int sec) { return (fir < sec) ? fir : sec; }\nbool cmp2(const node2 &fir, const node2 &sec) { return fir.r < sec.r; }\nbool cmp3(const node3 &fir, const node3 &sec) { return fir.l < sec.l; }\nbool cmp4(const node4 &fir, const node4 &sec) { return fir.x < sec.x; }\n\nvoid LBuild(int p, int l, int r)\n{\n    LTree[p].l = l, LTree[p].r = r;\n    if (l == r) return ;\n    int mid = (l + r) >> 1;\n    LBuild(p << 1, l, mid); LBuild(p << 1 | 1, mid + 1, r);\n}\n\nvoid RBuild(int p, int l, int r)\n{\n    RTree[p].l = l, RTree[p].r = r;\n    if (l == r) return ;\n    int mid = (l + r) >> 1;\n    RBuild(p << 1, l, mid); RBuild(p << 1 | 1, mid + 1, r);\n}\n\nvoid LChange(int p, int x, int d)\n{\n    if (LTree[p].l == LTree[p].r) { LTree[p].sum += d; return ; }\n    int mid = (LTree[p].l + LTree[p].r) >> 1;\n    if (x <= mid) LChange(p << 1, x, d);\n    else LChange(p << 1 | 1, x, d);\n    LTree[p].sum = LTree[p << 1].sum + LTree[p << 1 | 1].sum;\n}\n\nvoid RChange(int p, int x, int d)\n{\n    if (RTree[p].l == RTree[p].r) { RTree[p].sum += d; return ; }\n    int mid = (RTree[p].l + RTree[p].r) >> 1;\n    if (x <= mid) RChange(p << 1, x, d);\n    else RChange(p << 1 | 1, x, d);\n    RTree[p].sum = RTree[p << 1].sum + RTree[p << 1 | 1].sum;\n}\n\nint LAsk(int p, int l, int r)\n{\n    if (LTree[p].l >= l && LTree[p].r <= r) return LTree[p].sum;\n    int mid = (LTree[p].l + LTree[p].r) >> 1, val = 0;\n    if (l <= mid) val += LAsk(p << 1, l, r);\n    if (r > mid) val += LAsk(p << 1 | 1, l, r);\n    return val;\n}\n\nint RAsk(int p, int l, int r)\n{\n    if (RTree[p].l >= l && RTree[p].r <= r) return RTree[p].sum;\n    int mid = (RTree[p].l + RTree[p].r) >> 1, val = 0;\n    if (l <= mid) val += RAsk(p << 1, l, r);\n    if (r > mid) val += RAsk(p << 1 | 1, l, r);\n    return val;\n}\n\nint main()\n{\n    n = Read(), m = Read();\n    for (int i = 1; i <= n; ++i)\n    {\n        int y = Read(), l = Read(), r = Read();\n        if (l == 0) Linel[++cntl] = (node2){y, r};\n        else Liner[++cntr] = (node3){y, l};\n        if (l == 0 && r == 1000000) ++ans;\n    }\n    for (int i = 1; i <= m; ++i) a[i].x = Read(), a[i].l = Read(), a[i].r = Read();\n    std::sort(Linel + 1, Linel + cntl + 1, cmp2);\n    std::sort(Liner + 1, Liner + cntr + 1, cmp3);\n    std::sort(a + 1, a + m + 1, cmp4);\n    LBuild(1, 0, 1000000); RBuild(1, 0, 1000000);\n    for (int i = 1; i <= cntl; ++i) LChange(1, Linel[i].y, 1);\n    for (int i = 1; i <= m; ++i)\n    {\n        if (a[i].l == 0 && a[i].r == 1000000) ++ans;\n        for (; cl <= cntl && Linel[cl].r < a[i].x; ++cl) LChange(1, Linel[cl].y, -1);\n        for (; cr <= cntr && Liner[cr].l <= a[i].x; ++cr) RChange(1, Liner[cr].y, 1);\n        ans += (LL)RAsk(1, a[i].l, a[i].r) + (LL)LAsk(1, a[i].l, a[i].r);\n    }\n    printf(\"%lld\\n\", ans); return 0;\n}\n```",
        "postTime": 1628748744,
        "uid": 134000,
        "name": "Plozia",
        "ccfLevel": 7,
        "title": "CF1401E Divide Square \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9898\u5f88\u5bb9\u6613\u770b\u51fa\u5927\u81f4\u7684\u601d\u8def\n\n\u9996\u5148\u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0\uff0c\u7b54\u6848\u5c31\u662f\uff08\u957f\u5ea6\u4e3a $1e6$ \u7684\u7ebf\u6bb5\u6761\u6570\uff09 $+$ \uff08\u7ebf\u6bb5\u4e4b\u95f4\u7684\u4ea4\u70b9\u4e2a\u6570\uff09 $+ \\ 1$\n\n\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u4e3a\u5982\u4f55\u7edf\u8ba1\u8fd9\u4e9b\u7ebf\u6bb5\u4e4b\u95f4\u7684\u4ea4\u70b9\u4e2a\u6570\u3002\n\n\u5bb9\u6613\u60f3\u5230\u4e00\u79cd\u505a\u6cd5\uff0c\u5728 $x$ \u8f74\u4e0a\u4ece\u5de6\u5411\u53f3\u626b\uff0c\u78b0\u5230\u4e00\u6761\u6c34\u5e73\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u5c31\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u52a0 $1$\uff0c\u78b0\u5230\u53f3\u7aef\u70b9\u52a0 $1$ \u7684\u4f4d\u7f6e\u5c31\u51cf $1$\uff0c\u540c\u65f6\u7edf\u8ba1\u6bcf\u6761\u7ad6\u76f4\u7ebf\u6bb5\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\n\n\u5177\u4f53\u89c1\u4ee3\u7801\uff1a\n```cpp\n#include\"bits/stdc++.h\"\nusing namespace std;\n#define ll long long\n#define ul unsigned long long\n#define ui unsigned int\n#define ri register int\n#define pb push_back\n#define mp make_pair\nchar p[30]={'0','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\ninline ll rd(){\n\tll x=0,flag=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') flag=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+(ch^48);ch=getchar();}\n\treturn x*flag;\n}\n#define N 1000010\nint n,m,y[N],lx[N],rx[N],x[N],ly[N],ry[N],co[N];\nll ans;\ninline int lowbit(int x){return x & ( - x ) ;}\ninline void add(int x,int v){\n\tfor(ri i=x;i<=1e6;i+=lowbit(i)) co[i]+=v;\n}\ninline int sum(int x){\n\tint ans=0;\n\tfor(ri i=x;i>0;i-=lowbit(i)) ans+=co[i];return ans;\n}\nvector<int>a[N];\nvector<int>b[N];\nvector<int>c[N];\nint main()\n{\n\tstd::ios::sync_with_stdio(false);\n\tn=rd(),m=rd();\n\tfor(ri i=1;i<=n;++i){\n\t\ty[i]=rd(),lx[i]=rd(),rx[i]=rd();\n\t\tif(rx[i]-lx[i]==1000000) ans++;\n\t\ta[lx[i]].push_back(i);\n\t\tb[rx[i]+1].push_back(i);\n\t}\n\tfor(ri i=1;i<=m;++i){\n\t\tx[i]=rd(),ly[i]=rd(),ry[i]=rd();\n\t\tif(ry[i]-ly[i]==1000000) ans++;\n\t\tc[x[i]].push_back(i);\n\t}\n\tfor(ri i=0;i<=1000000;++i){\n\t\tint siz=a[i].size();\n\t\tfor(ri j=0;j<siz;++j) add(y[a[i][j]],1);siz=b[i].size();\n\t\tfor(ri j=0;j<siz;++j) add(y[b[i][j]],-1);siz=c[i].size();\n\t\tfor(ri j=0;j<siz;++j){\n\t\t\tif(ly[c[i][j]]==0) ans+=sum(ry[c[i][j]]);\n\t\t\telse ans+=sum(1000000)-sum(ly[c[i][j]]-1);\n\t\t\t//cout<<i<<\" \"<<ans<<endl;\n\t\t}\n\t}\n\tcout<<ans+1;\n    return 0;\n}\n```\n",
        "postTime": 1598077627,
        "uid": 135839,
        "name": "Fairicle",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1401E \u3010Divide Square\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\n~~\u4e00\u9c7c\u4e24\u5403\uff1f~~\n\n[JOI2014 \u88c1\u526a\u7ebf](https://www.luogu.com.cn/problem/AT_joi2014ho5) \u662f [CF1401E](https://www.luogu.com.cn/problem/CF1401E) \u7684\u52a0\u5f3a\u7248\u3002\u5bf9\u4e8e\u524d\u4e00\u9898\uff0c\u4f60\u53ef\u4ee5\u5728 [loj2760](https://loj.ac/p/2760) \u67e5\u770b\u66f4\u8be6\u7ec6\u7684\u9898\u9762\u3002\n\n\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7 [\u8fd9\u4e2a](https://www.luogu.com.cn/blog/max67/solution-at-joi2014ho5) \u548c [\u8fd9\u4e2a](https://www.luogu.com.cn/blog/max67/solution-cf1401e) \u8df3\u5230\u4e24\u6761\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\u7684\u9898\u89e3\u3002\n## \u9898\u89e3\n\n$w,h$ \u4e3a\u539f\u9898\u4e2d\u7684\u77e9\u5f62\u957f\u5bbd\u3002\n\n\u9996\u5148\u5c06\u7ebf\u6bb5\u7684\u6a2a\u7eb5\u5750\u6807\u79bb\u6563\u5316\uff0c\u4e0b\u6587\u5047\u5b9a $w,h \\le 10^5$\u3002\u4e0b\u6587\u5047\u8bbe $k$ \u662f\u539f\u9898\u4e2d\u7684 $n+m$\u3002\n\n\u672c\u9898\u89e3\u8bb2\u7684\u662f\u53bb\u9664\u6a2a\u8fb9\u548c\u7ad6\u8fb9\u5fc5\u987b\u4e0e\u77e9\u5f62\u8fb9\u76f4\u63a5\u76f8\u8fde\u7684\u6761\u4ef6\u540e\u7684\u505a\u6cd5\u3002\n### \u505a\u6cd5 1\n\n\u6216\u8005\u4f60\u53ef\u4ee5\u5eb7\u5eb7\u8fd9\u7bc7[\u9898\u89e3](https://blog.csdn.net/qq_42101694/article/details/104775768)\u3002\n\n\n\u663e\u7136\u88ab\u7b54\u6848\u53ef\u4ee5\u770b\u505a\u8fd9\u5f20\u56fe\u5f62\u6210\u7684\u6781\u5927\u8fde\u901a\u5757\u6570\u91cf\uff08\u6211\u4eec\u628a $(i,j)$ \u770b\u505a\u4e00\u4e2a\u70b9\uff0c\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8054\u901a\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a\u70b9\u53ef\u4ee5\u56db\u8054\u901a\u5e76\u4e14\u4e0d\u7ecf\u8fc7\u88c1\u526a\u7ebf\uff09\n\n\u770b\u7740\u6837\u4f8b\u7684\u56fe\u50cf\uff0c\u4f60\u60f3\u8d77\u4e86\u66fe\u7ecf\u505a\u8fc7\u7684\u6a21\u677f\u9898[\u626b\u63cf\u7ebf](https://www.luogu.com.cn/problem/P5490)\u3002\u90a3\u4e48\u6211\u4eec\u6a21\u4eff\u5bf9\u5e94\u7684\u5957\u8def\uff0c\u4ece\u4e0a\u5230\u4e0b\u626b\u63cf\u6bcf\u4e00\u884c\u7684\u8d21\u732e\u3002\n\n\u4e00\u4e2a\u777f\u667a\u7684\u60f3\u6cd5\u662f\u52a8\u6001\u7ef4\u62a4\u5f53\u524d\u884c\u7684\u6bcf\u4e2a\u70b9\u5c5e\u4e8e\u54ea\u4e2a\u8054\u901a\u5757\u3002\u7b54\u6848\u5373\u4e3a\u8fde\u901a\u5757\u7684\u6570\u91cf\u3002\n\n* \u52a0\u5165\u4e00\u6761\u7ad6\u76f4\u7ebf\u6bb5\uff1a\u5047\u8bbe\u5b58\u5728\u4e00\u6761\u8d77\u70b9\u4e3a $(i+1,x)$ \u7684\u7ad6\u76f4\u7ebf\u6bb5\uff0c\u76f4\u89c2\u4e0a\u6765\u770b\u4ed6\u628a\u7b2c $i+1$ \u884c\u5206\u5272\u6210\u4e86\u4f9d\u7136\u76f8\u8fde\u7684\u4e24\u4e2a\u90e8\u5206\uff0c\u4f46\u8fd9\u4e24\u4e2a\u90e8\u5206\u4ec5\u901a\u8fc7\u7b2c $i+1$ \u884c\u7684\u70b9\u65e0\u6cd5\u4e92\u76f8\u8054\u901a\u3002\n\n[![ppAk6Jg.png](https://s1.ax1x.com/2023/03/03/ppAk6Jg.png)](https://imgse.com/i/ppAk6Jg)\n\n* \u5220\u9664\u4e00\u6761\u7ad6\u76f4\u7ebf\u6bb5\uff1a\u5047\u8bbe\u5b58\u5728\u4e00\u6761\u7ec8\u70b9\u4e3a $(i+1,x)$ \u7684\u7ad6\u76f4\u7ebf\u6bb5\uff0c\u4ece\u76f4\u89c2\u4e0a\u6765\u770b\u4ed6\u628a\u6211\u4eec\u539f\u672c\u8ba4\u4e3a\u53ef\u80fd\u4e0d\u76f8\u8054\u901a\u7684\u4e24\u4e2a\u8fde\u901a\u5757\u5e76\u5728\u4e00\u8d77\u3002\n\n[![ppAkgzj.png](https://s1.ax1x.com/2023/03/03/ppAkgzj.png)](https://imgse.com/i/ppAkgzj)\n\n* \u52a0\u5165\u4e00\u6761\u6c34\u5e73\u7ebf\u6bb5\uff1a\u5047\u8bbe\u5b58\u5728\u4e00\u6761 $(i,x) \\rightarrow (i,y)$ \u7684\u6c34\u5e73\u7ebf\u6bb5\uff0c\u5047\u8bbe\u4ed6\u4e0e\u6c34\u5e73\u7ebf\u6bb5\u4ea4\u7684\u70b9\u4e3a\uff1a$(i,a_1),(i,a_2)\\dots(i,a_n)$\uff0c\u90a3\u4e48\u5bf9\u4e8e $j \\in [a_1,a_n]$ \u5185\u7684\u70b9\uff0c$(i,j)$ \u4e0e $(i+1,j)$ \u5728\u524d $i+1$ \u884c\u4e2d\u4e0d\u8fde\u901a\u3002\u6211\u4eec\u53ef\u4ee5\u76f4\u89c2\u7684\u770b\u505a\u65b0\u5efa\u4e86 $n-1$ \u4e2a\u8fde\u901a\u5757\uff0c\u4f46\u8fd9\u4e9b\u8fde\u901a\u5757\u53ef\u80fd\u5728\u4e4b\u540e\u7684\u884c\u4e2d\u4e0e\u5176\u4ed6\u8fde\u901a\u5757\u5408\u5e76\u3002\n\n[![ppAm8ot.png](https://s1.ax1x.com/2023/03/03/ppAm8ot.png)](https://imgse.com/i/ppAm8ot)\n\n\u56e0\u4e3a\u7b54\u6848\u662f $O(n^2)$ \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u9c7c\u5507\u7684\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u6240\u5c5e\u7684\u8fde\u901a\u5757\u7f16\u53f7\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5f53\u5728\u5220\u9664\u4e00\u6761\u7ad6\u76f4\u7ebf\u6bb5\u65f6\u624d\u4f1a\u6709\u4e24\u4e2a\u8fde\u901a\u5757\u8fdb\u884c\u5408\u5e76\uff0c\u6216\u8005\u52a0\u5165\u4e00\u6761\u7ad6\u76f4\u7ebf\u6bb5\u65f6\u6709\u4e24\u4e2a\u90e8\u5206\u76f8\u8fde\u901a\u2014\u2014\u8fd9\u662f $O(k)$ \u7ea7\u522b\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u7ed9\u8fd9\u4e9b\u53ef\u80fd\u7279\u6b8a\u7684\u8fde\u901a\u5757\u4e00\u4e2a\u6807\u53f7\uff0c\u6700\u540e\u518d\u7528\u5e76\u67e5\u96c6\u8ba1\u7b97\u8fde\u901a\u5757\u7684\u6570\u91cf\u3002\n\n\u8fd9\u542f\u53d1\u6211\u4eec\u5206\u5f00\u7ef4\u62a4\u53ef\u80fd\u76f8\u540c\u7684\u8054\u901a\u5757\u548c\u5176\u4ed6\u8fde\u901a\u5757\u3002\u5927\u6982\u9700\u8981\u8fd9\u4e9b\u64cd\u4f5c\uff1a\n\n* \u6211\u4eec\u628a\u4e00\u4e2a\u533a\u95f4\u770b\u6210\u4e00\u4e2a\uff08\u5f53\u524d\u884c\u7684\uff09\u8fde\u901a\u5757\u3002\u4fdd\u8bc1\u540c\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u70b9\u5728\u540c\u4e00\u884c\u5185\u4e92\u76f8\u8054\u901a\u3002\u4e0d\u540c\u7684\u533a\u95f4\u53ef\u80fd\u4e92\u76f8\u8054\u901a\u3002\u9ed8\u8ba4\u6bcf\u4e2a\u533a\u95f4\u7684\u8d21\u732e\u4e3a $1$\uff0c\u770b\u6210\u4e00\u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u8fde\u901a\u5757\u3002\u521d\u59cb\u9ed8\u8ba4\u6bcf\u4e2a\u533a\u95f4\u6ca1\u6709\u6807\u53f7\u3002\n\n* \u52a0\u5165\u4e00\u4e2a\u7ebf\u6bb5\uff1a\u628a\u4e00\u4e2a\u533a\u95f4\u5206\u88c2\u6210\u4e24\u4e2a\u533a\u95f4\uff0c\u5220\u53bb\u8fd9\u4e24\u4e2a\u533a\u95f4\u7684\u8d21\u732e\uff0c\uff08\u5982\u679c\u6ca1\u6709\u7f16\u53f7\u7684\u8bdd\uff09\u7ed9\u4ed6\u4eec\u4e00\u4e2a\u65b0\u7684\u6807\u53f7\u3002\n\n* \u628a\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\uff0c\u5e76\u5220\u53bb\u8fd9\u4e24\u4e2a\u533a\u95f4\u7684\u8d21\u732e\uff0c\uff08\u5982\u679c\u6ca1\u6709\u6807\u53f7\u7684\u8bdd\u65b0\u8bbe\u6807\u53f7\uff09\u628a\u4ed6\u4eec\u4e24\u4e2a\u7684\u6807\u53f7\u5408\u5e76\u3002\n\n* \u7edf\u8ba1\u5305\u542b\u5728\u8be2\u95ee\u533a\u95f4\u5185\u7684\u6240\u6709\u533a\u95f4\u7684\u8d21\u732e\uff0c\u5e76\u91cd\u65b0\u628a\u4ed6\u4e4b\u5185\u7684\u6240\u6709\u533a\u95f4\u5185\u7684\u8d21\u732e\u8bbe\u4e3a $1$\uff0c\u6807\u53f7\u6e05\u7a7a\u3002\n\n* \u6700\u540e\u7528\u5e76\u67e5\u96c6\u7edf\u8ba1\u8fde\u901a\u5757\u4e2a\u6570\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u5e73\u8861\u6811\uff08\u6216\u8005\u7ebf\u6bb5\u6811\uff1f\uff09\u80fd\u80dc\u4efb\u6b64\u6b21\u5de5\u4f5c\uff0c\u590d\u6742\u5ea6\u4e3a $O(k\\log k  +k\\alpha(k))$\u3002\n\n\u53e6\u5916\uff0c\u53ef\u4ee5\u628a\u539f\u56fe\u77e9\u5f62\u7684\u56db\u6761\u8fb9\u4e5f\u770b\u6210\u52a0\u5165\u8fdb\u6765\u7684\u8fb9\u3002\n\n\u4ee3\u7801\u7684\u8bdd\u53ef\u4ee5\u770b\u5f00\u5934\u7ed9\u7684\u9898\u89e3\u3002\uff08\u9700\u8981\u7565\u5fae\u6539\u52a8\uff09\n\n\n### \u505a\u6cd5 2\n\n\u4f60\u777f\u667a\u7684\u53d1\u73b0\u8fd9\u662f\u4e00\u5f20\u653e\u5728\u5e73\u9762\u4e0a\u7684\u56fe\uff08~~\u4f46\u662f\u5e76\u4e0d\u662f\u53eb\u505a\u5e73\u9762\u56fe~~\uff09\uff0c\u4f60\u56de\u60f3\u8d77\u4e86\u4f1f\u5927\u7684[\u6b27\u62c9\u516c\u5f0f](https://oi-wiki.org/graph/planar/)\uff1a\n\n$$\nn-m+r=p+1\n$$\n\n\uff08$n$ \u662f\u70b9\u6570\uff0c$m$ \u662f\u8fb9\u6570\uff0c$r$ \u662f\u9762\u6570\uff0c$p$ \u662f\u8054\u901a\u5206\u652f\u6570\uff09\n\n\u5982\u679c\u80fd\u628a\u9898\u76ee\u7684\u56fe\u53d8\u6210\u4e00\u5f20\u5e73\u9762\u56fe\uff0c\u8bf4\u4e0d\u5b9a\u5c31\u80fd\u8f7b\u677e\u7684\u7b97\u51fa\u7b54\u6848\u3002\u6210\u4e3a\u5e73\u9762\u56fe\u7684\u5176\u4e2d\u4e00\u4e2a\u65b9\u6cd5\u662f\u6709\u4e00\u5f20\u65b9\u6cd5\u4f7f\u5f97\u8fd9\u5f20\u56fe\u653e\u5728\u5e73\u9762\u4e0a\u4f7f\u5f97\u8fb9\u4e92\u4e0d\u76f8\u4ea4\u3002\n\n\u90a3\u4e48\u4e00\u4e2a\u7b80\u5355\u7684\u6784\u9020\u65b9\u6cd5\u662f\u628a\u9898\u76ee\u6240\u7ed9\u56fe\u7684\u6240\u6709\u4ea4\u70b9\u5efa\u505a\u65b0\u56fe\u7684\u9876\u70b9\uff0c\u65b0\u56fe\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u6709\u8fde\u8fb9\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u5728\u539f\u56fe\u4e2d\u76f8\u90bb\uff08\u5b58\u5728\u4e00\u6761\u8def\u5f84\u4f7f\u5f97\u4e0d\u7ecf\u8fc7\u5176\u4ed6\u65b0\u56fe\u7684\u9876\u70b9\uff09\u3002\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u5bf9\u65b0\u56fe\u7684\u70b9\u6570\uff0c\u8fb9\u6570\uff0c\u8054\u901a\u5206\u652f\u6570\u8fdb\u884c\u8ba1\u6570\u3002\n\n\n[![ppAEXa6.png](https://s1.ax1x.com/2023/03/03/ppAEXa6.png)](https://imgse.com/i/ppAEXa6)\n\n\u5982\u679c\u4f60\u76f4\u63a5\u66b4\u529b\u7ef4\u62a4\u7684\u8bdd\u4e5f\u4e0d\u662f\u4e0d\u884c\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6316\u6398\u65b0\u56fe\u4e2d\u7684\u4e00\u4e9b\u6027\u8d28\u5bf9\u539f\u56fe\u8fdb\u884c\u7b80\u5316\u3002\n\n\u5148\u8003\u8651\u5bf9\u70b9\u6570\u4ee5\u53ca\u8fb9\u6570\u7684\u8ba1\u6570\uff0c\u4e00\u4e2a\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u8003\u8651\u539f\u56fe\u4e2d\u6bcf\u6761\u7ebf\u6bb5\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff1a\n\n* \u82e5\u7b2c $x$ \u6761\u7ebf\u6bb5\u88ab $a_x$ \u6761\u7ebf\u6bb5\u7a7f\u8fc7\uff0c\u90a3\u4e48\u4ed6\u5bf9\u65b0\u56fe\u8d21\u732e\u4e86 $a_x-1$ \u6761\u8fb9\u3002\u7531\u4e8e\u6bcf\u4e2a\u65b0\u56fe\u4e2d\u7684\u70b9\u4f1a\u88ab\u539f\u56fe\u4e2d\u7684\u4e24\u6761\u7ebf\u6bb5\u7a7f\u8fc7\u3002\u8bbe $n$ \u662f\u65b0\u70b9\u6570\uff0c$m,r$ \u540c\u7406\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u7b49\u5f0f\uff1a\n\n$$\n\\sum_{x\\in[1,k]} a_x= 2\\times n\n$$\n\n\u90a3\u4e48\u8fb9\u6570\u5373\uff1a\n\n$$\nm=\\sum_{x\\in[1,k]} (a_x-1) = 2\\times n-  k \n$$\n\n\u90a3\u4e48\u6c42 $r$ \u7684\u5f0f\u5b50\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a\n\n$$\nn-m+r = p+1 \\rightarrow r=p+1-n+(2\\times n-k)\\rightarrow r=p+1 + n-k\n$$\n\n\u7531\u4e8e\u8fd9\u4e2a\u516c\u5f0f\u8ba1\u7b97\u4e86\u8fd9\u4e2a\u77e9\u5f62\u5916\u9762\u7684\u9762\u79ef\u4e3a\u65e0\u9650\u5927\u7684\u9762\uff0c\u56e0\u6b64\u7b54\u6848\u53ef\u4ee5\u5199\u4f5c\uff1a\n\n$$\nr=p+n-k\n$$\n\n\u63a5\u4e0b\u6765\u8bb2\u89e3\u5b9e\u73b0\u7ec6\u8282\uff1a\n\n\u5bf9\u4e8e\u70b9\u6570\u7684\u7edf\u8ba1\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u7c7b\u4f3c\u626b\u63cf\u7ebf\u7684\u5f62\u5f0f\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u884c\u7684\u7ad6\u76f4\u7ebf\u6bb5\u4e2a\u6570\uff0c\u9047\u5230\u6c34\u5e73\u7ebf\u6bb5\u65f6\u7edf\u8ba1\u8986\u76d6\u7684\u4e2a\u6570\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u8054\u901a\u5206\u652f\u7684\u7edf\u8ba1\uff0c\u56e0\u4e3a\u5728\u539f\u56fe\u4e2d\u7684\u7ebf\u6bb5\u4e0a\u7684\u70b9\u4e92\u76f8\u8054\u901a\uff0c\u6211\u4eec\u53ef\u4ee5\u8f6c\u4e3a\u7ef4\u62a4\u539f\u56fe\u7ebf\u6bb5\u7684\u8054\u901a\u5206\u652f\u4e2a\u6570\u3002\n\n\u8fd8\u662f\u5957\u7528\u7c7b\u4f3c\u626b\u63cf\u7ebf\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u9047\u5230\u4e00\u6761\u6c34\u5e73\u7ebf\u6bb5\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e0e\u4e0e\u4ed6\u76f8\u4ea4\u7684\u6240\u6709\u7ad6\u76f4\u8fb9\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u3002\u5982\u4f55\u64cd\u4f5c\uff1f\u82e5\u4e00\u4e2a\u533a\u95f4\u88ab\u6c34\u5e73\u7ebf\u6bb5\u5408\u5e76\uff0c\u90a3\u4e48\u5728\u5f53\u524d\u65f6\u523b\u5185\u90e8\u7684\u6240\u6709\u7ad6\u76f4\u8fb9\u90fd\u88ab\u5408\u5e76\uff0c\u4ee5\u540e\u518d\u88ab\u6c34\u5e73\u7ebf\u6bb5\u5408\u5e76\u65f6\uff08\u4e0d\u8003\u8651\u8fd9\u4e4b\u95f4\u52a0\u5165\u7684\u5176\u4ed6\u7ad6\u76f4\u8fb9\uff09\u53ea\u9700\u5408\u5e76\u5176\u4e2d\u7684\u4e00\u6761\u7ad6\u76f4\u8fb9\u5373\u53ef\u3002\u663e\u7136\u64cd\u4f5c\u4e4b\u540e\u6211\u4eec\u53ea\u9700\u8981\u9009\u51fa\u4e00\u4e2a\u6d88\u5931\u6700\u665a\u7684\u7ad6\u76f4\u7ebf\u6bb5\u4f5c\u4e3a\u5f53\u524d\u7ebf\u6bb5\u7684\u4ee3\u8868\u5143\u7d20\u5373\u53ef\u3002\n\n\u6309\u7167\u4e0a\u9762\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u8003\u8651\u628a\u8be2\u95ee\u533a\u95f4\u62c6\u6210 $\\log$ \u6bb5\u7ef4\u62a4\uff0c\u56e0\u6b64\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u3002\u52a0\u5165\u7ad6\u76f4\u7ebf\u6bb5\u65f6\u5f80\u7ebf\u6bb5\u6811\u4e0a\u6240\u6709\u5305\u542b\u4ed6\u7684\u533a\u95f4\u52a0\u5165\u3002\u5bf9\u4e8e\u8be2\u95ee\u533a\u95f4\uff0c\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e0a\u627e\u5230 $\\log$ \u4e2a\u88ab\u4ed6\u5305\u542b\u7684\u533a\u95f4\uff0c\u6bcf\u4e2a\u533a\u95f4\u5185\u7684\u6240\u6709\u70b9\u4e0e\u6c34\u5e73\u7ebf\u6bb5\u66b4\u529b\u8fde\u8fb9\uff0c\u5e76\u4fdd\u7559\u6d88\u5931\u6700\u665a\u7684\u4e00\u6761\u7ad6\u76f4\u8fb9\u3002\u5bf9\u4e8e\u5220\u9664\u64cd\u4f5c\uff0c\u6211\u4eec\u6a21\u4eff\u5ef6\u8fdf\u6807\u8bb0\uff0c\u5bf9\u8fd9\u4e2a\u7ad6\u76f4\u7ebf\u6bb5\u6253\u4e2a tag\uff0c\u626b\u5230\u65f6\u76f4\u63a5\u8df3\u8fc7\u5373\u53ef\u3002\u7528 vector \u7ef4\u62a4\u5373\u53ef\u3002\n\n\u90a3\u4e48\u603b\u7684\u590d\u6742\u5ea6\u662f $O(k \\log k+k\\alpha (k))$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f $O(k\\log k+k)$\u3002\u6ce8\u610f\u4e0d\u662f $O(k\\log k\\times \\alpha(k))$\uff0c\u56e0\u4e3a\u867d\u7136\u52a0\u5165\u4e86 $O(k\\log k )$ \u4e2a\u70b9\uff0c\u4f46\u53ea\u6709 $O(k)$ \u4e2a\u6807\u53f7\u4e0d\u540c\u7684\u7ebf\u6bb5\u3002\n\n~~\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\u8bb0\u5f97\u4e34\u65f6\u53d8\u91cf\u4e0d\u80fd\u5f00\u5f97\u592a\u5927\uff0c\u4e5f\u5c31\u662f\u8bf4\u7528 vector \u79bb\u6563\u5316\u7684\u65f6\u5019\u5982\u679c\u5b83\u662f\u4e34\u65f6\u53d8\u91cf\uff0clower_bound \u4f1a\u53d8\u5f97\u5f88\u6162\u3002\u3002\u3002~~\n\n\n```cpp\n#include<bits/stdc++.h>\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define ll long long\n#define eb emplace_back \nusing namespace std;\nconst int N=2e6+10;\nstruct Seg{int x,l,r,id;}p[N];\nint n,m,k,R;\nint tag[N];\nvector<int>qry[N],add[N];\nnamespace F\n{\n\tint fa[N];\n\tvoid clear(int n){for(int i=0;i<=n;i++)fa[i]=i;}\n\tint get(int x){return x==fa[x]?x:fa[x]=get(fa[x]);}\n\tvoid merge(int x,int y){x=get(x);y=get(y);if(x!=y)fa[x]=y;}\n}\nnamespace bit\n{\n\t#define lb(x) (x&(-x))\n\tint c[N];\n\tvoid add(int x,int y){for(;x<=R;x+=lb(x))c[x]+=y;}\n\tint ask(int x){int t=0;for(;x;x-=lb(x))t+=c[x];return t;}\n\tint ask(int l,int r){return ask(r)-ask(l-1);}\n}\nnamespace T\n{\n\t#define ls (x<<1)\n\t#define rs (x<<1|1)\n\t#define midd (L+R>>1)\n\tvector<int>vt[N];\n\tvoid insert(int x,int p,int L,int R,int v)\n\t{\n\t\tvt[x].pb(v);\n\t\tif(L==R)return;\n\t\tint mid=midd;\n\t\tif(p<=mid)insert(ls,p,L,mid,v);\n\t\telse insert(rs,p,mid+1,R,v);\n\t}\n\tvoid merge(vector<int>&vt,int v)\n\t{\n\t\tint id=0;\n\t\tfor(auto y:vt)if(y&&!tag[y])\n\t\t\tF::merge(v,y),(p[y].r>p[id].r?id=y:0);\n\t\tvt.clear();vt.pb(id);\n\t}\n\tvoid query(int x,int l,int r,int L,int R,int v)\n\t{\n\t\tif(l<=L&&R<=r)return merge(vt[x],v);\n\t\tint mid=midd;\n\t\tif(l<=mid)query(ls,l,r,L,mid,v);\n\t\tif(r>mid)query(rs,l,r,mid+1,R,v);\n\t}\n}\nll solve()\n{\n\tll res=0;\n\tfor(int i=1;i<=R;i++)\n\t{\n\t\tfor(auto y:add[i])\n\t\t\tif(y>0)bit::add(p[y].x,1),T::insert(1,p[y].x,1,R,y);\n\t\t\telse bit::add(p[-y].x,-1),tag[-y]=1;\n\t\tfor(auto y:qry[i])\n\t\t\tT::query(1,p[y].l,p[y].r,1,R,y),res+=bit::ask(p[y].l,p[y].r);\n\t}\n\tfor(int i=1;i<=k;i++)res+=F::fa[i]==i;\n\treturn res;\n}\nvector<int>vt;\nsigned main()\n{\n\tn=1e6;m=1e6;int k1=0,k2=0;\n\tscanf(\"%d%d\",&k1,&k2);k=k1+k2;\n\tp[0]={-1,-1,-1,-1};\n\tfor(int i=1,a,b,c,d;i<=k;i++)\n\t{\n\t\tif(i<=k1)scanf(\"%d%d%d\",&a,&b,&d),c=a;\n\t\telse scanf(\"%d%d%d\",&b,&a,&c),d=b;\n\t\tp[i]={a,b,c,d};\n\t\tvt.pb(a);vt.pb(b);vt.pb(c);vt.pb(d);\n\t}\n\tvt.pb(0);vt.pb(n);vt.pb(m);\n\tp[++k]={0,0,n,0};p[++k]={0,0,0,m};p[++k]={n,0,n,m};p[++k]={0,m,n,m};\n\tsort(vt.begin(),vt.end());vt.erase(unique(vt.begin(),vt.end()),vt.end()); \n\tR=vt.size();F::clear(k);\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tint a=p[i].x,b=p[i].l,c=p[i].r,d=p[i].id;\n\t\tauto get=[=](int x){return lower_bound(vt.begin(),vt.end(),x)-vt.begin()+1;};\n\t\ta=get(a);b=get(b);c=get(c);d=get(d);\n\t\tif(a==c)p[i]={a,b,d,i},qry[a].pb(i);\n\t\telse p[i]={b,a,c,i},add[a].pb(i),add[c+1].pb(-i);\n\t}\n\tprintf(\"%lld\\n\",solve()-k);\n\treturn 0;\n}\n```\n",
        "postTime": 1677844134,
        "uid": 223891,
        "name": "max67",
        "ccfLevel": 0,
        "title": "AT_joi2014ho5 \u5207\u308a\u53d6\u308a\u7dda (Cutting)  && CF1401E Divide Square \u9898\u89e3"
    },
    {
        "content": "~~\u8fd9\u9053\u9898\u53ef\u4ee5\u4f5c\u4e3a\u626b\u63cf\u7ebf\u7684\u524d\u7f6e\u9898\u7ec3\u624b~~\n\n~~\u771f\u7684~~\n\n\u5148\u8bf4\u7ed3\u8bba\uff1a\u6211\u4eec\u5b9a\u4e49\u8d2f\u7a7f\u7ebf\u4e3a\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u4e14\u957f\u5ea6\u4e3a $10^6$ \u7684\u7ebf\u6bb5\uff0c\u8bbe $num_1$ \u4e3a\u8d2f\u7a7f\u7ebf\u7684\u6570\u91cf\uff0c$num_2$ \u4e3a\u4ea4\u70b9\u7684\u6570\u91cf\n\u7b54\u6848\u5373\u4e3a $ans = num_{1}+num_{2}+1$\n\n\u6d45\u6d45\u8bf4\u4e00\u4e0b\u7406\u89e3\uff1a\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u7684\u7ebf\u6bb5\u662f\u5e73\u884c\u5750\u6807\u8f74\uff0c\u6240\u4ee5\u4ea7\u751f\u7684\u4ea4\u70b9\u5fc5\u7136\u662f\u6a2a\u7eb5\u7ebf\u76f8\u4ea4\uff0c\u53c8\u56e0\u4e3a\u662f\u5728\u5c01\u95ed\u7684\u6b63\u65b9\u5f62\u5185\uff0c\u6240\u4ee5\u6240\u4ee5\u51fa\u73b0\u4e00\u4e2a\u4ea4\u70b9\u5fc5\u7136\u4f1a\u4ea7\u751f\u4e00\u4e2a\u989d\u5916\u7684\u6b63\u65b9\u5f62\uff0c\u4e0d\u8fc7\u5f53\u8d2f\u7a7f\u7ebf\u7684\u5b58\u5728\u672c\u6765\u5c31\u53ef\u4ee5\u628a\u6b63\u65b9\u5f62\u5206\u5f00\uff0c\u6240\u4ee5\u8981\u8003\u8651\u4e0a\u8d2f\u7a7f\u7ebf\u7684\u8d21\u732e\n\n\u6240\u4ee5\u6211\u4eec\u5c06\u672c\u9898\u8f6c\u6362\u4e3a\u4e86\u7edf\u8ba1\u6a2a\u7eb5\u7ebf\u4ea4\u70b9\u6570\u91cf\uff0c\u8003\u8651\u4f7f\u7528\u626b\u63cf\u7ebf\u89e3\u51b3\n\n\u8fd9\u91cc\u6211\u4eec\u628a\u6a2a\u7ebf\u62bd\u8c61\u6210\u65f6\u523b\uff0c\u7eb5\u8f74\u60f3\u8c61\u6210\u4e00\u4e2a\u6570\u7ec4 `line`\uff0c$line_i = 0/1$ \u8868\u793a\u5f53\u524d $i$ \u7eb5\u5750\u6807\u6709\u65e0\u88ab\u7ebf\u6bb5\u8986\u76d6\u3002\n\n\u4e00\u6761\u6a2a\u8fb9 $(y,l,r)$ \u5373\u4e3a\u5728\u65f6\u523b $l$ \u5230\u65f6\u523b $r$ \u5728 $y$ \u7eb5\u5750\u6807\u505a\u51fa\u8d21\u732e\uff0c\u5177\u4f53\u8868\u73b0\u4e3a\u5728\u65f6\u523b $l$ \u5bf9 $line_y$ \u52a0\u4e0a $1$\uff0c\u65f6\u523b $r+1$ \u5bf9 $line_y$ \u51cf\u53bb $1$\n\n\u4e00\u6761\u7eb5\u8fb9 $(x,l,r)$ \u5373\u4e3a\u5728 $line_l$ \u5230 $line_r$ \u90fd\u52a0\u4e0a $1$\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u67e5\u8be2\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\n\n\u770b\u5230\u5176\u4ed6\u9898\u89e3\u91cc\u5c06\u4fee\u6539\u548c\u67e5\u8be2\u5206\u5f00\uff0c\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\uff0c\u53ea\u8981\u4fdd\u8bc1\u65f6\u95f4\u6309\u987a\u5e8f\u5373\u53ef\uff0c\u540c\u65f6\u4fdd\u8bc1\u5728\u76f8\u540c\u65f6\u95f4\u5185\u5148\u4fee\u6539\uff0c\u540e\u67e5\u8be2\u5373\u53ef\n\n~~\u53ef\u80fd\u5e38\u6570\u8f83\u5927\uff0c\u4f46\u662f\u771f\u7684\u597d\u5199~~\n\n```C++\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\nusing ll = long long;\n\nint n, m;\n\ninline int read() {\n  int res = 0, f = 1; char c = getchar();\n  while(!isdigit(c)) {\n    if(c == '-') f = -1;\n    c = getchar();\n  }\n  while(isdigit(c)) {\n    res = res * 10 + c - '0';\n    c = getchar();\n  }\n  return res * f;\n}\n\nclass fenwickTree {\n  int static const N = 1e6 + 5;\n  int c[N];\n#define lowbit(x) x & -x\npublic:\n  inline void insert(int x, int d) {\n    for(int i = x; i < N; i += lowbit(i)) \n      c[i] += d;\n  }\n  \n  inline int query(int x) {\n    ll res = 0;\n    for(int i = x; i; i -= lowbit(i))\n      res += c[i];\n    return res;\n  }\n}t;\n\nstruct node {\n  int id; // mod = 1, query = 2;\n  int tim, l, r;\n  \n  bool operator < (const node& ano) const {\n    if(tim == ano.tim) return id < ano.id;\n    return tim < ano.tim;\n  }\n};\n\nvector<node> line;\n\nsigned main() {\n  n = read(), m = read();\n  line.reserve(2e5);\n  \n  ll ans = 0;\n  while(n --) { \n    int y = read() + 1, l = read() + 1, r = read() + 1;\n    ans += (r - l == 1e6);\n    line.push_back({1, l, y, 1});\n    line.push_back({1, r + 1, y, -1});\n  }\n  \n  while(m --) {\n    int x = read() + 1, l = read() + 1, r = read() + 1;\n    ans += (r - l == 1e6);\n    line.push_back({2, x, l, r});\n  }\n  \n  sort(line.begin(), line.end());\n  \n  for(node x : line) {\n    if(x.id == 1) t.insert(x.l, x.r);\n    else ans += t.query(x.r) - t.query(x.l - 1);\n  }\n  \n  printf(\"%lld\\n\", ans + 1);\n  return 0;\n}\n```",
        "postTime": 1677241856,
        "uid": 418670,
        "name": "baoziwu2",
        "ccfLevel": 4,
        "title": "CF1401E\u9898\u89e3"
    }
]