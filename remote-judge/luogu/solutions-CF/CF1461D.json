[
    {
        "content": "\u66b4\u529b\u9898\uff0c\u4ece\u6ca1\u89c1\u8fc7\u8fd9\u4e48\u66b4\u529b\u7684 2D\u3002\n\n\u8003\u8651\u66b4\u529b\u7684\u590d\u6742\u5ea6\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\uff0c\u6211\u4eec\u53d1\u73b0 $a_i$ \u7684\u503c\u57df\u5f88\u5c0f\uff0c\u4ec5\u4ec5\u53ea\u6709 $10^6$ \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6ee1\u6253\u6ee1\u7b97\u6700\u540e\u8dd1\u51fa\u6765\u7684\u533a\u95f4\u6570\u4e5f\u53ea\u6709 $10^6 \\times \\log{10^6}$ \u4e2a\uff0c\u5b8c\u5168\u53ef\u4ee5\u505a\u8fd9\u9053\u9898\u3002\n\n```c++\nint T,n,q,a[N],s[N],x;\nmap<int,int>Mp;\nvoid dfs(int l,int r)\n{\n\tif (l>r) return;\n\tint mid,l1,r1,mid1,nowcut;\n\tMp[s[r]-s[l-1]]=1;\n\tmid=(a[l]+a[r])/2;\n\tl1=l,r1=r;\n\tnowcut=r+1;\n\twhile (l1<=r1)\n\t{\n\t\tmid1=l1+(r1-l1)/2;\n\t\tif (a[mid1]>mid) nowcut=mid1,r1=mid1-1; else l1=mid1+1;\n\t}\n\tif (nowcut==r+1) return;\n\tdfs(l,nowcut-1);//\u66b4\u529b\u8dd1\u5de6\u8fb9\u7684\u533a\u95f4\n\tdfs(nowcut,r);//\u66b4\u529b\u8dd1\u53f3\u8fb9\u7684\u533a\u95f4\n}\nsigned main()\n{\n\tT=read();\n\twhile (T--)\n\t{\n\t\tMp.clear();\n\t\tn=read(),q=read();\n\t\tfor (int i=1;i<=n;i++) a[i]=read();\n\t\tsort(a+1,a+n+1);\n\t\tfor (int i=1;i<=n;i++) s[i]=s[i-1]+a[i];\n\t\tdfs(1,n);\n\t\twhile (q--)\n\t\t{\n\t\t\tx=read();\n\t\t\tif (Mp[x]) puts(\"Yes\"); else puts(\"No\");\n\t\t}\n\t}\n}",
        "postTime": 1608040802,
        "uid": 120911,
        "name": "Lynkcat",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1461D \u3010Divide and Summarize\u3011"
    },
    {
        "content": "### \u9898\u610f\uff1a\n\n\u200b\t\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u6570\u7ec4$a$\uff0c\u53d6$mid=\\lfloor \\frac{max+min}{2} \\rfloor$\uff0c\u6309\u7167\u5143\u7d20\u548c$mid$\u7684\u5927\u5c0f\u5173\u7cfb\uff08\u5c0f\u4e8e\u7b49\u4e8e$mid$\u7684\u8fdb\u5165\u5de6\u6570\u7ec4\uff0c\u5927\u4e8e$mid$\u7684\u8fdb\u5165\u53f3\u6570\u7ec4\uff09\u5c06\u6570\u7ec4\u5206\u4e3a\u4e24\u5757\uff08\u4e24\u4e2a\u65b0\u6570\u7ec4\u5185\u5143\u7d20\u5747\u4fdd\u6301\u5b83\u4eec\u5728\u539f\u6570\u7ec4\u5185\u7684\u5148\u540e\u6b21\u5e8f\uff09\uff0c\u7136\u540e\u4efb\u53d6\u4e00\u5757\u629b\u5f03\u3002\u63a5\u4e0b\u6765\u662f$m$\u6b21\u67e5\u8be2\uff0c\u67e5\u8be2\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u6570\u7ec4\uff0c\u5176\u5143\u7d20\u548c\u4e3a$q$\n\n### \u601d\u8def\uff1a\n\n\u200b\t\u56e0\u4e3a\u6211\u4eec\u4ec5\u4ec5\u53ea\u662f\u5bf9\u5143\u7d20\u8fdb\u884c**\u6c42\u548c**\uff0c\u6240\u4ee5\u8bf4\u6570\u7ec4\u5185\u5143\u7d20\u7684\u987a\u5e8f\u5b9e\u9645\u4e0a\u548c\u6211\u4eec\u7684\u7ed3\u679c\u6ca1\u6709\u591a\u5927\u5173\u7cfb\uff0c\u4e3a\u4e86\u51cf\u5c0f\u6211\u4eec\u5728\u5c06\u6570\u7ec4\u5206\u5757\u7684\u65f6\u5019\u7684\u5de5\u4f5c\u91cf\uff0c\u6211\u4eec\u8003\u8651\u5148\u5c06\u521d\u59cb\u6570\u7ec4$a$\u8fdb\u884c\u6392\u5e8f\u3002\n\n\u200b\t\u7531\u4e8e\u6211\u4eec\u7684\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u5728\u5c06\u5927\u6570\u7ec4\u5206\u4e3a\u5de6\u53f3\u5c0f\u6570\u7ec4\u65f6\uff0c\u5c31**\u4e0d\u4f1a**\u5bf9\u5176\u4e2d\u5143\u7d20\u7684\u4f4d\u7f6e\u8fdb\u884c\u66f4\u6539\uff0c\u53ea\u9700\u8981\u6539\u53d8\u6211\u4eec\u7684\u5f00\u5934\u7ed3\u5c3e\u5373\u53ef\u3002\n\n\u200b\t\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528**\u9012\u5f52\u51fd\u6570**\uff08\u51fa\u53e3\u4e3a\u6570\u7ec4\u5185\u6240\u6709\u5143\u7d20\u76f8\u7b49\uff0c\u5373$a[l]\\equiv a[r]$\uff09\u76f4\u63a5\u5bf9\u6570\u7ec4\u8fdb\u884c\u5206\u5757\u7684\u6a21\u62df\uff0c\u7136\u540e\u7528**\u524d\u7f00\u548c**\u6765\u7edf\u8ba1\u5c0f\u6570\u7ec4\u5185\u5143\u7d20\u4e4b\u548c\uff0c\u5e76\u5c06\u5176\u8bb0\u5f55\u3002\n\n\u200b\t\u4e3a\u4e86\u4fbf\u4e8e\u4ee5\u540e\u7684\u67e5\u627e\uff0c\u6211\u4eec\u5c06\u8bb0\u5f55\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff08\u5f53\u7136\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528set\u6765\u8fdb\u884c\u8bb0\u5f55\uff09\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\uff0c\u6211\u4eec\u7528\u4e8c\u5206\u6cd5\u5bfb\u627e\u8bb0\u5f55\u6570\u7ec4\u91cc\u9762\u662f\u5426\u5b58\u5728\u6211\u4eec\u67e5\u8be2\u7684\u5143\u7d20\u5373\u53ef\u3002\n\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int inf=1e9+7;\nconst int maxn=1e6+100;\nll a[maxn],can[maxn],qzh[maxn],cnt=0;\t\t\t\t//can\u6570\u7ec4\u5b58\u5143\u7d20\u548c\uff0ccnt\u7edf\u8ba1can\u6570\u7ec4\u5185\u5143\u7d20\u4e2a\u6570\uff0cqzh\u662f\u524d\u7f00\u548cqaq\n \nvoid find(int l,int r){\n    if(l==r){\n        can[cnt++]=a[l];\n        return;\n    }\n    else if(l>r)return;\n    int maxi=r,mini=l;\n    can[cnt++]=qzh[r]-qzh[l-1];\n    if(a[maxi]==a[mini])return;\t\t\t\t\t\t//\u8fd9\u91cc\u4ee3\u7801\u53ef\u4ee5\u7b80\u5316\uff0c\u6211\u5199\u7684\u6bd4\u8f83\u5197\u6742\n    int mid=(a[maxi]+a[mini])/2;\n    int midd=l;\n    int left=l,right=r;\n    while(left<=right){\t\t\t\t\t\t\t\t//\u4e8c\u5206\u67e5\u627emid\u4f4d\u7f6e\n        int midium=(left+right)/2;\n        if(a[midium]<=mid){\n            left=midium+1;\n            midd=midium;\n        }\n        else{\n            right=midium-1;\n        }\n    }\n    find(l,midd);\n    find(midd+1,r);\n}\n \nint query(int x){\t\t\t\t\t\t\t\t\t//\u4e8c\u5206\u67e5\u8be2\uff0c\u5982\u679c\u628a\u6570\u7ec4\u4fdd\u5b58\u6362\u6210set\u4fdd\u5b58\u4ee3\u7801\u76f4\u63a5\u5c11\u4e00\u534a\n    int l=0,r=cnt-1;\n    while(l<=r){\n        int mid=(l+r)/2;\n        if(can[mid]==x)\n            return true;\n        else if(can[mid]<x){\n            l=mid+1;\n        }\n        else{\n            r=mid-1;\n        }\n    }\n    return false;\n}\n \nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        cnt=0;\n        int n,q;\n        scanf(\"%d%d\",&n,&q);\n        for(int i=1;i<=n;i++){\n            scanf(\"%d\",&a[i]);\n        }\n        sort(a+1,a+1+n);\t\t\t\t\t\t\t\t\t//\u8fd9\u4e2asort\u76f4\u63a5\u8ba9\u6211D\u6bd4C\u4f4e\u4e86500\u5206\n        qzh[1]=a[1];\n        for(int i=2;i<=n;i++){\n            qzh[i]=a[i]+qzh[i-1];\n        }\n        find(1,n);\n        sort(can,can+cnt);\n        int qq;\n        for(int i=0;i<q;i++){\n            scanf(\"%d\",&qq);\n            if(query(qq)){\n                cout<<\"YES\"<<endl;\n            }\n            else{\n                cout<<\"NO\"<<endl;\n            }\n        }\n    }\n}\n```\n\n",
        "postTime": 1607938593,
        "uid": 282218,
        "name": "IIIIndex",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1461D \u3010Divide and Summarize\u3011"
    },
    {
        "content": "\u663e\u7136 $s$ \u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\u5b83\u5c5e\u4e8e\u5207\u7247\u64cd\u4f5c\u5f97\u5230\u7684\u6240\u6709\u6570\u7ec4\u548c\u7684\u96c6\u5408\u3002\u800c\u4e14\u5728\u8fdb\u884c\u5207\u7247\u64cd\u4f5c\u524d\u5148\u5bf9\u6574\u4e2a\u6570\u7ec4\u6392\u5e8f\u80af\u5b9a\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002\n\n\u6a21\u62df\u4e00\u904d\u8fd9\u4e2a\u5207\u7247\u64cd\u4f5c\uff0c\u6c42\u51fa\u6240\u6709\u53ef\u80fd\u7684\u6570\u7ec4\u548c\u5373\u53ef\u3002\u6bcf\u6b21\u9012\u5f52\u53ea\u9700\u8981\u4e8c\u5206\u51fa\u4e2d\u95f4\u4f4d\u7f6e\uff0c\u6700\u574f\u590d\u6742\u5ea6\u4e3a $O(nlogn)$\uff0c\u7a33\u8fc7\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<map>\n#define ll long long\n#define fo(i,x,y) for(register int i=x;i<=y;++i)\n#define go(i,x,y) for(register int i=x;i>=y;--i)\nusing namespace std;\n\ninline int read(){\n\tint x=0,fh=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-') fh=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx=(x<<1)+(x<<3)+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn x*fh;\n}\n\nconst int N=1e7+5;\nint top,a[N];\nll sum[N],ans[N];\n\nvoid di(int L,int R){\n\tif(L==R){\n\t\tans[++top]=a[L];\n\t\treturn;\n\t}\n\tint mid=(a[L]+a[R])>>1,pos=upper_bound(a+L,a+R+1,mid)-a-1;\n\tif(pos==R){\n\t\tans[++top]=sum[R]-sum[L-1];\n\t\treturn;\n\t}\n\tans[++top]=sum[pos]-sum[L-1];\n\tans[++top]=sum[R]-sum[pos];\n\tdi(L,pos);\n\tdi(pos+1,R);\n}\n\nvoid work(){\n\tint n=read(),q=read();\n\ttop=0;\n\tfo(i,1,n) a[i]=read();\n\tsort(a+1,a+1+n);\n\tfo(i,1,n) sum[i]=sum[i-1]+a[i];\n\tdi(1,n);\n\tans[++top]=sum[n];\n\tsort(ans+1,ans+1+top);\n\tfo(i,1,q){\n\t\tint s=read();\n\t\tif(binary_search(ans+1,ans+1+top,s)) puts(\"Yes\");\n\t\telse puts(\"No\");\n\t}\n\t//puts(\"\");\n}\nint main(){\n\tint T=read();\n\twhile(T--){\n\t\twork();\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1607744617,
        "uid": 238408,
        "name": "vectorwyx",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1461D\u3010Divide and Summarize\u3011"
    }
]