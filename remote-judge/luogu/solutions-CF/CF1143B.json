[
    {
        "content": "## \u601d\u8def\uff1a\n\n\u524d\u6bb5\u65f6\u95f4\u6a21\u62df\u8003\u5230\u4e86\u8fd9\u9053\u9898\uff0c\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e24\u4e2a\u505a\u6cd5\u3002\n\n### \u505a\u6cd51\uff1a\n\n**\u8d2a\u5fc3**\n\n\u5c06\u539f\u6765\u7684\u6570\u5199\u4e3a\u6570\u4f4d\u5f62\u5f0f: $ x_1x_2x_3...x_n $ \n\n\u90a3\u4e48\u6bcf\u4e00\u4f4d\u4e58\u79ef\u6700\u5927\u7684\u6570\u4e00\u5b9a\u662f\u5f62\u5982:\n\n$(x_1-1)99999...,x_1(x_2-1)9999...,x_1x_2(x_3-1)999...$ \n\n\u679a\u4e3e\u4e00\u4e0b\u627e\u6700\u5927\u5373\u53ef\uff0c\u6ce8\u610f\u5904\u7406\u524d\u5bfc\u96f6\u548c\u8fdb\u4f4d\u7684\u95ee\u9898\u3002\n\n**\u7136\u800c\u6211\u8003\u573a\u4e0a\u5e76\u6ca1\u6709\u60f3\u5230\u8fd9\u79cd\u505a\u6cd5**\n\n### \u505a\u6cd52\uff1a\n\n**\u6570\u4f4d dp**\n\n\u8bbe $f_{pos,lst,0/1,0/1}$ \u8868\u793a\u5f53\u524d\u5728\u6570\u5b57\u7684\u7b2c $\\text{pos}$ \u4f4d\uff0c\u4e0a\u4e00\u4f4d\u586b\u7684\u6570\u5b57\u4e3a $\\text{lst}$ \uff0c\u7b2c\u4e00\u4e2a $0/1$ \u8868\u793a\u5f53\u524d\u4f4d\u586b\u7684\u6570\u5b57\u662f\u5426\u7b49\u4e8e\u539f\u6570\u5b57\u4e0a\u8fd9\u4e00\u4f4d\u7684\u6570\u503c\uff0c\u7b2c\u4e8c\u4e2a $0/1$ \u8868\u793a\u5f53\u524d\u4f4d\u662f\u5426\u4e3a\u524d\u5bfc\u96f6\u65f6**\u6b64\u65f6\u6570\u4f4d\u5404\u4f4d\u4e58\u79ef\u7684\u6700\u5927\u503c**\u3002\n\n\u8f6c\u79fb\u5c31\u662f\u4e00\u4e2a\u5f88\u5957\u8def\u7684\u6570\u4f4d dp \uff0c\u8003\u8651\u5f53\u5f53\u524d\u4f4d\u586b\u7684\u6570\u5b57\u5c0f\u4e8e\u539f\u6570\u5b57\u4e0a\u8fd9\u4e00\u4f4d\u7684\u6570\u65f6\uff0c\u540e\u9762\u7684\u6570\u4f4d\u53ef\u4ee5\u4efb\u610f\u586b\uff0c\u524d\u5bfc\u96f6\u540c\u7406\uff0c\u800c\u5f53\u5f53\u524d\u4f4d\u586b\u7684\u6570\u5b57\u7b49\u4e8e\u539f\u6570\u5b57\u4e0a\u8fd9\u4e00\u4f4d\u7684\u6570\u65f6\uff0c\u4e0b\u4e00\u4f4d\u6570\u6700\u9ad8\u53ea\u80fd\u586b\u5230\u539f\u6570\u5b57\u4e0a\u8fd9\u4e00\u4f4d\u7684\u6570\u503c\uff0c\u5728\u8f6c\u79fb\u4e2d\u53d6\u6700\u5927\u5373\u53ef\u3002\n\n\u8fd8\u662f\u8981\u6ce8\u610f\u4e00\u4e0b\u524d\u5bfc\u96f6\u7684\u95ee\u9898\uff0c\u5373\u5f53\u5f53\u524d\u8fd9\u4f4d\u4e3a\u524d\u5bfc\u96f6\uff0c\u9012\u5f52\u7edf\u8ba1\u7b54\u6848\u65f6\u5e94\u4e58\u4e0a $1$ \u800c\u4e0d\u662f $0$ \u4ee5\u9632\u6b62\u5f71\u54cd\u8ba1\u7b97\u7ed3\u679c\u3002\n\n\u65e2\u7136\u4f60\u80fd\u627e\u5230\u8fd9\u9898\uff0c\u6211\u76f8\u4fe1\u4f60\u80fd\u77ac\u95f4\u505a\u51fa\u6765\u7684\u3002\n\n$Code:$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst long long N=20,M=1000010,INF=0x3f3f3f3f;\nlong long n,cnt,f[N][N],p[N];//\u4f60\u5728\u770b\u6211\u7684\u4ee3\u7801\u5bf9\u5427 \ninline long long Max(long long x,long long y){return x>y?x:y;}\ninline long long Min(long long x,long long y){return x<y?x:y;}\ninline void Swap(long long &x,long long &y){x^=y,y^=x,x^=y;}\nlong long dfs(long long pos,long long lst,bool l1,bool l2){\n\tif(!pos)return 1;\n\tif(!l1&&!l2&&f[pos][lst]!=-1)return f[pos][lst];\n\tlong long tmp=-INF,up=l1?p[pos]:9;\n\tfor(long long i=0;i<=up;i++)\n\t\ttmp=Max(tmp,((l2&&!i)?1:i)*dfs(pos-1,i,(!(l2&&!i))&&(l1&&i==up),(l2&&!i)));\n\tif(!l1&&!l2)f[pos][lst]=tmp;\n\treturn tmp;\n}\nlong long solve(long long x){\n\tmemset(f,-1,sizeof(f));cnt=0;\n\twhile(x)p[++cnt]=x%10,x/=10;\n\treturn dfs(cnt,0,1,1);\n}\nint main(){\n\tscanf(\"%lld\",&n);\n\tprintf(\"%lld\\n\",solve(n));\n\treturn 0;\n}\n```\n",
        "postTime": 1607609614,
        "uid": 137242,
        "name": "Dia\u043esi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1143B \u3010Nirvana\u3011"
    },
    {
        "content": "## CF1143B Nirvana \u9898\u89e3\n\n\u8003\u8651 make a list\u3002\n\n\u6700\u6734\u7d20\u7684\u6253\u8868\u65b9\u6cd5\u5c31\u662f\u8ba9 $i$ \u4ece $1\\sim 2\\times 10^9$ \u66b4\u529b\u679a\u4e3e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $i$\uff0c\u5982\u679c $i$ \u5404\u4f4d\u6570\u5b57\u7684\u4e58\u79ef\u6bd4\u4e4b\u524d\u4efb\u4f55\u4e00\u4e2a\u6570\u7684\u7b54\u6848\u90fd\u8981\u5927\uff0c\u5c31\u628a $i$ \u548c\u76f8\u5e94\u7684\u7b54\u6848\u5b58\u8d77\u6765\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u4e34\u754c\u503c\u3002\u6362\u8a00\u4e4b\uff0c\u5c31\u662f\u628a $n$ \u7684\u6bcf\u4e00\u4e2a\u8303\u56f4\u5bf9\u5e94\u7684\u7b54\u6848\u5b58\u5230\u8868\u91cc\uff0c\u4e8e\u662f\u8f93\u5165 $n$ \u5c31\u53ef\u4ee5 $O(1)$ \u5f97\u5230\u7b54\u6848\u3002\n\n\u4f46\u662f\u50cf\u8fd9\u6837\u6253\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u76f8\u5f53\u9ad8\u7684\uff0c\u5dee\u4e0d\u591a\u662f $n$ \u7684\u6700\u5927\u503c\u4e58\u4e00\u4e2a $30$ \u5de6\u53f3\u7684\u5e38\u6570\uff0c\u7ed9\u8ba1\u7b97\u673a\u7684\u8fd0\u7b97\u91cf\u8fbe\u5230\u4e86\u516d\u767e\u4ebf\u6b21\u4ee5\u4e0a\u3002\u4e8e\u662f\u6211\u5bf9\u8fd9\u4e2a\u6253\u8868\u7a0b\u5e8f\u505a\u4e86\u4e00\u4e9b\u4f18\u5316\u3002\n\n- \u4e0d\u96be\u770b\u51fa\uff0c\u5728\u5341\u4ebf\u8303\u56f4\u5185\u7684\u6700\u5927\u7b54\u6848\u4e3a $9^9$\u3002\u4f46\u662f\u5728\u5341\u4ebf\u5230\u4e8c\u5341\u4ebf\u7684\u8303\u56f4\u5185\uff0c\u65e0\u6cd5\u518d\u627e\u5230\u4e00\u4e2a\u6570\u80fd\u4f7f\u7b54\u6848\u5927\u4e8e $9^9$\u3002\u4e8e\u662f\u53ea\u8981\u679a\u4e3e $1\\sim 10^9$ \u8303\u56f4\u5185\u7684\u6570\u5c31\u884c\u4e86\u3002\n\n- \u5bf9\u4e8e\u6240\u6709\u5e26\u201c0\u201d\u7684\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u4e0d\u679a\u4e3e\u3002\u4e8e\u662f\u4e00\u65e6\u9047\u5230\u4e00\u4e2a\u5e26\u201c0\u201d\u7684\u6570\uff0c\u5c31\u76f4\u63a5\u628a\u662f $0$ \u7684\u4e00\u4f4d\u53d8\u6210 $1$\u3002\u6bd4\u5982\u5f53\u904d\u5386\u5230 $15000$ \u8fd9\u4e2a\u6570\u65f6\uff0c\u4e0b\u4e00\u4e2a\u904d\u5386\u7684\u6570\u5c31\u4f1a\u662f $15100$\uff0c\u63a5\u4e0b\u6765\u662f $15110$\uff0c$15111$\u3002\u8fd9\u6837\u7528 $O(3)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5c31\u5b8c\u6210\u4e86 $O(111)$ \u7684\u8fd0\u7b97\u91cf\u3002\n\n### \u751f\u6210\u4ee3\u7801\n```cpp\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\n#define For(i,a,b) for(register int i=(a);i<=(b);++i)\n#define Rep(i,a,b) for(register int i=(a);i>=(b);--i)\nusing namespace std;\nvector<int> a,b;\nvoid make_it() //\u5236\u8868\n{\n\tint fn=0,len,ans; //fn\u8bb0\u5f55\u76ee\u524d\u6700\u5927\u7b54\u6848\n\tchar c[20];\n\tFor(i,1,1000000000) //\u53ea\u9700\u904d\u5386\u5341\u4ebf\n\t{\n\t\tsprintf(c,\"%d\",i); //\u628ai\u53d8\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\n\t\tlen=strlen(c),ans=1;\n\t\tbool flag=true;\n\t\tFor(j,0,len-1)\n\t\t{\n\t\t\tif(c[j]=='0') //\u9047\u52300\n\t\t\t{\n\t\t\t\tflag=false;\n\t\t\t\tint t=pow(10,len-j-1);\n\t\t\t\ti+=t; i/=t; i*=t;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tans*=(c[j]-48); //\u8ba1\u7b97\u4e58\u79ef\n\t\t}\n\t\tif(flag&&ans>fn)\n\t\t{\n\t\t\tfn=ans;\n\t\t\ta.push_back(i); //\u5b58\u50a8\u4e34\u754c\u503c\n\t\t\tb.push_back(ans); //\u5b58\u50a8\u7b54\u6848\n\t\t}\n\t}\n}\nvoid output() //\u8f93\u51fa\n{\n\tint sz=a.size();\n\tFor(i,0,sz-1) printf(\"%d,\",a[i]);\n\tcout<<endl;\n\tFor(i,0,sz-1) printf(\"%d,\",b[i]);\n}\nint main()\n{\n\tfreopen(\"tst.out\",\"w\",stdout); //\u6ce8\u610f\u5f00freopen\n\tmake_it();\n\toutput();\n\treturn 0;\n}\n```\n\u8fd9\u4e2a\u7a0b\u5e8f\u5728\u6211\u7684\u7b14\u8bb0\u672c\u4e0a\u8dd1\uff0c\u7528\u4e86\u5927\u6982 $1000$ \u79d2\u7684\u65f6\u95f4\uff0c\u5728\u673a\u623f\u7684\u53f0\u5f0f\u4e0a\u53ea\u7528\u4e86 $800$ \u591a\u79d2\u3002\u5982\u679c\u4f60\u6709\u66f4\u597d\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u6b22\u8fce\u79c1\u4fe1\uff01\n### \u63d0\u4ea4\u7684\u6253\u8868\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define For(i,a,b) for(register int i=(a);i<=(b);++i)\n#define Rep(i,a,b) for(register int i=(a);i>=(b);--i)\nusing namespace std;\nconst int a[]={-1,1,2,3,4,5,6,7,8,9,25,26,27,28,29,37,38,39,47,48,49,58,59,68,69,78,79,88,89,99,259,268,269,278,279,288,289,299,378,379,388,389,399,479,488,489,499,589,599,689,699,789,799,889,899,999,2599,2689,2699,2789,2799,2889,2899,2999,3789,3799,3889,3899,3999,4799,4889,4899,4999,5899,5999,6899,6999,7899,7999,8899,8999,9999,25999,26899,26999,27899,27999,28899,28999,29999,37899,37999,38899,38999,39999,47999,48899,48999,49999,58999,59999,68999,69999,78999,79999,88999,89999,99999,259999,268999,269999,278999,279999,288999,289999,299999,378999,379999,388999,389999,399999,479999,488999,489999,499999,589999,599999,689999,699999,789999,799999,889999,899999,999999,2599999,2689999,\n\t2699999,2789999,2799999,2889999,2899999,2999999,3789999,3799999,3889999,3899999,3999999,4799999,4889999,4899999,4999999,5899999,5999999,6899999,6999999,7899999,7999999,8899999,8999999,9999999,25999999,26899999,26999999,27899999,27999999,28899999,28999999,29999999,37899999,37999999,38899999,38999999,39999999,47999999,48899999,48999999,49999999,58999999,59999999,68999999,69999999,78999999,79999999,88999999,89999999,99999999,259999999,268999999,269999999,278999999,279999999,288999999,289999999,299999999,378999999,379999999,388999999,389999999,399999999,479999999,488999999,489999999,499999999,589999999,599999999,689999999,699999999,789999999,799999999,889999999,899999999,999999999};\nconst int b[]={-1,1,2,3,4,5,6,7,8,9,10,12,14,16,18,21,24,27,28,32,36,40,45,48,54,56,63,64,72,81,90,96,108,112,126,128,144,162,168,189,192,216,243,252,256,288,324,360,405,432,486,504,567,576,648,729,810,864,972,1008,1134,1152,1296,1458,1512,1701,1728,1944,2187,2268,2304,2592,2916,3240,3645,3888,4374,4536,5103,5184,5832,6561,7290,7776,8748,9072,10206,10368,11664,13122,13608,15309,15552,17496,19683,20412,20736,23328,26244,29160,32805,34992,39366,40824,45927,46656,52488,59049,65610,69984,78732,81648,91854,93312,104976,118098,122472,137781,139968,157464,177147,183708,186624,209952,236196,262440,295245,314928,354294,367416,413343,419904,472392,531441,590490,629856,708588,\n\t734832,826686,839808,944784,1062882,1102248,1240029,1259712,1417176,1594323,1653372,1679616,1889568,2125764,2361960,2657205,2834352,3188646,3306744,3720087,3779136,4251528,4782969,5314410,5668704,6377292,6613488,7440174,7558272,8503056,9565938,9920232,11160261,11337408,12754584,14348907,14880348,15116544,17006112,19131876,21257640,23914845,25509168,28697814,29760696,33480783,34012224,38263752,43046721,47829690,51018336,57395628,59521392,66961566,68024448,76527504,86093442,89282088,100442349,102036672,114791256,129140163,133923132,136048896,153055008,172186884,191318760,215233605,229582512,258280326,267846264,301327047,306110016,344373768,387420489};\nint main()\n{\n\tint n; cin>>n;\n\tRep(i,211,1) //\u6ce8\u610f\u5012\u5e8f\u904d\u5386\u8868\n\t\tif(n>=a[i])\n\t\t{\n\t\t\tcout<<b[i]<<endl;\n\t\t\tbreak;\n\t\t}\n\treturn 0;\n}\n```",
        "postTime": 1599399281,
        "uid": 219866,
        "name": "Blunt_Feeling",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1143B \u3010Nirvana\u3011"
    },
    {
        "content": "# \u9898\u610f\n\u7ed9\u5b9a\u4e00\u4e2a$n$, \u6c42$1$~$n$ \u6bcf\u4e00\u4e2a\u6570\u5b57\u6bcf\u4e00\u4f4d\u4e0a\u4e58\u79ef\u548c\u7684\u6700\u5927\u503c\u3002\n# \u601d\u8def\n\u5c06$n$ \u7684\u6bcf\u4e00\u4f4d\u53d6\u51fa\u6765\uff0c \u4e24\u5c42\u5faa\u73af\uff0c \u7b2c\u4e00\u5c42\u5faa\u73af\u8868\u793a\u679a\u4e3e\u5230\u7b2c$i$\u4f4d\uff0c \u7b2c$1$~$i-1$\u4f4d\uff0c\u4fdd\u6301\u4e0d\u53d8\uff0c\u7b2c$i$\u4f4d$ - 1$ \u5219\u7b2c$i + 1$~$n$ \u4f4d\u4e3a$9$\u662f\u6700\u4f18\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u7684\u4e58\u79ef\u548c\uff0c\u53d6$max$\u5373\u53ef\u3002\n# \u4ee3\u7801\n```c\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <iostream>\n#include <queue>\n// #define d lld\n// #define int long long\nusing namespace std;\n\nconst int maxn = 2e5 + 10;\nint t, n, vis[maxn];\n \nsigned main () {\n    string s;\n    cin >> s;\n    int len = s.size();\n    long long ans = 1;\n    for (int i = 0; i < len; i++) ans = ans * (s[i] - '0');\n    for (int i = 0; i < len; i++) {\n        long long gg = s[i] - '0' - 1;\n        if (s[i] == '1') gg = 1;\n        for (int j = 0; j < i; j++) gg *= (s[j] - '0');\n        for (int j = i + 1; j < len; j++) gg *= 9;\n        ans = max (ans, gg);\n    }\n    printf (\"%lld\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1606571919,
        "uid": 371178,
        "name": "Fan_Tuan",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF1143B \u3010Nirvana\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://xiaohuang888.github.io/2019/08/31/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8FCodeforces1143B%20Nirvana/)\n\n### Solution\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u9012\u5f52\uff0c\u6bcf\u6b21\u4ece\u53f3\u8fb9\u5c11\u4e00\u4f4d\u4e0b\u53bb\uff0c\u8fdb\u884c\u9012\u5f52\uff0c\u5982\u679c\u5269\u4e0b\u7684\u6570\u662f\u4e0d\u4e3a0\u7684\u4e00\u4f4d\u6570\uff0c\u5c31\u8fd4\u56de\u8fd9\u4e2a\u6570\uff0c\u5426\u5219\u8fd4\u56de1\uff0c\u7136\u540e\u679a\u4e3e\u6700\u540e\u4e00\u4f4d\uff0c\u9009\u62e9\u76f4\u63a5\u7528\u90a3\u4e00\u4f4d\u7684\u6570\u6216\u8005\u9000\u4f4d\u3002\n\n### Code\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n\nusing namespace std;\n\nint n;\ninline int f(int x) {\n    if (x < 10) {//\u5224\u65ad\u4e00\u4f4d\u6570\u7684\u60c5\u51b5\n        if (x == 0) return 1; else return x;\n    }\n    return max((x % 10) * f(x / 10), 9 * f(x / 10 - 1));//\u76f4\u63a5\u7528\u90a3\u4e00\u4f4d\u7684\u6570\u6216\u8005\u9000\u4f4d\n}\nint main() {\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", f(n));\n    return 0;\n}\n```",
        "postTime": 1567250413,
        "uid": 19729,
        "name": "xiaohuang",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF1143B \u3010Nirvana\u3011"
    },
    {
        "content": "\u5bf9\u4e8e $\\overline{a9}$ \u548c $\\overline{a8}$\uff0c\u663e\u7136\u524d\u8005\u7684\u4e58\u79ef\u5927\u4e8e\u7b49\u4e8e\u540e\u8005\u3002\u6240\u4ee5\u6211\u4eec\u4ec5\u9700\u8981\u8003\u8651\u672b\u7aef\u6709\u51e0\u4e2a $9$ \u5373\u53ef\u3002\u6b64\u65f6\u5bf9\u7b54\u6848\u53d6 $\\max$\u3002\n\n\u4f8b\u5b50\uff1a\n\n$1234 \\max=1\\times2\\times3\\times4=24$\n\n$1229 \\max=\\max(1\\times 2\\times 2\\times9=36,24)=36$\n\n$1199 \\max=\\max(1\\times 1\\times 9\\times9=81,36)=81$\n\n$999 \\max=\\max(9\\times9\\times9=729,81)=729$\n\n\u5176\u4f59\u4e0d\u7406\u89e3\u7684\u5730\u65b9\u53ef\u4ee5\u501f\u52a9`code`\u3002\n\n```cpp\n//\u8be5\u9898\u8bb0\u5f97\u5f00long long,\u8fd9\u4efdcode\u524d\u9762\u6709\u5b8f\u5b9a\u4e49\n\nint a[20];//\u5f53\u524d\u7684\u6570\u5b57\nint getmul(int a[],int l){//\u83b7\u53d6\u5f53\u524d\u6570\u5b57\u7684\u4e58\u79ef\n\tint tot=1;\n\twhile(a[tot]==0) tot++;//\u53bb\u9664\u524d\u5bfc0\n\tint res=1;\n\tfor(int i=tot;i<=l;i++){\n\t\tres*=a[i];\n\t}\n\treturn res;\n}\nint getlen(int x){//\u83b7\u53d6\u4e00\u4e2a\u6b63\u6574\u6570\u7684\u957f\u5ea6\n\tint res=0;\n\twhile(x){\n\t\tx/=10;\n\t\tres++;\n\t}\n\treturn res;\n}\nvoid Solve(){\n\t//coding here...\n\tint n;\n\tcin>>n;\n\tint l=getlen(n),now=l;\n\twhile(n){\n\t\ta[now--]=n%10;//\u5c06n\u53d8\u6210\u6570\u7ec4\u7684\u5f62\u5f0f\n\t\tn/=10;\n\t}\n\tint ans=getmul(a,l);//\u539f\u6570\u7684\u5404\u4f4d\u4e4b\u79ef\n\tfor(int i=l;i>=2;i--){\n\t\tif(a[i]!=9){//\u5982\u679c\u4e0d\u662f9\u624d\u9700\u8981\u5c06\u4e0a\u4e00\u4f4d\u51cf\u4e00\uff0c\u56e0\u4e3a\u8981\u6c42\u5c0f\u4e8e\u7b49\u4e8e\u539f\u6570\n\t\t\ta[i-1]--;\n\t\t}\n\t\ta[i]=9;//\u5c06\u8fd9\u4f4d\u8bbe\u4e3a9\n\t\tans=max(ans,getmul(a,l));//\u53d6\u6700\u5927\u503c\u3002\n\t}\n\tcout<<ans<<endl;\n}\n```",
        "postTime": 1657612950,
        "uid": 327444,
        "name": "Tothetime_tolife",
        "ccfLevel": 0,
        "title": "CF1143B Nirvana \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u4e48\u597d\u7684\u9898\u5f53\u7136\u662f\u6253\u8868\u8fc7\u5566\u3002\n\n\u4e0d\u52a0\u4efb\u4f55\u4f18\u5316\u7684\u6253\u8868\u901f\u5ea6\u5f88\u6162\uff0c\u56e0\u6b64\u53ef\u4ee5\u52a0\u4e0a\u4e00\u70b9\u70b9\u7684\u4f18\u5316\u3002\u5982\u679c\u9047\u5230\u6570\u4f4d\u4e0a\u4e3a 0 \u7684\u6570\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e9b\u6570\u4f4d\u8f6c\u6210 1\uff0c\u5728\u8f6c\u5316\u7684\u540c\u65f6\u8ba1\u7b97\u8fd9\u4e2a\u6570\u5404\u4e2a\u6570\u4f4d\u76f8\u4e58\u7684\u4e58\u79ef\uff0c\u4e0e\u6b64\u524d\u7684\u6700\u5927\u503c\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u6bd4\u4e4b\u524d\u7684\u5927\uff0c\u5c31\u628a\u5f53\u524d\u7684\u6570\u4e0e\u4e58\u79ef\u52a0\u5230\u8868\u4e2d\u3002\n\n\u901f\u5ea6\u8fd8\u7b97\u5feb\uff0c\u53ef\u4ee5\u5728\u534a\u5206\u949f\u5185\u8f93\u51fa\u5b8c\u3002\n\n\u6253\u8868 Code\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nll ans[10000010],res[1000010],cnt;\nint check(int &x)\n{\n    int a[10],cnt = 0,tmp = x,mul = 1;\n    while(tmp) \n    {\n        a[++cnt] = tmp % 10;\n        if(a[cnt] == 0) a[cnt]++;//\u76f8\u5f53\u4e8e\u53d8\u62101\n        tmp /= 10;\n    }\n    for(int i = cnt;i > 0;i--) tmp = tmp * 10 + a[i],mul *= a[i];//\u8ba1\u7b97\u4e58\u79ef\n    x = tmp;//\u66f4\u65b0\u5f53\u524d\u7684\u6570\n    return mul;\n}\nint main()\n{\n    for(int i = 1;i <= 1000000000;i++)\n    {\n        int mul = check(i);\n        if(res[cnt] < mul) \n        {\n            res[++cnt] = mul;\n            ans[cnt] = i;\n            cout << mul << ',';\n        }\n    }\n    return 0;\n}\n```\n\u6253\u5b8c\u8868\u540e\u53ef\u4ee5\u7528 $\\text{upper\\_bound}$ \u51fd\u6570\u6c42\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e n \u7684\u6570\uff0c\u5b83\u7684\u524d\u4e00\u4e2a\u6570\u5c31\u662f\u8868\u4e2d\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e n \u7684\u6570\uff0c\u56e0\u6b64\u76f4\u63a5\u8f93\u51fa\u76f8\u5e94\u7684\u6210\u7ee9\u5c31\u884c\u3002\n\nCode\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint ans[211] = {1,2,3,4,5,6,7,8,9,25,26,27,28,29,37,38,39,47,48,49,58,59,68,69,78,79,88,89,99,259,268,269,278,279,288,289,299,378,379,388,389,399,479,488,489,499,589,599,689,699,789,799,889,899,999,2599,2689,2699,2789,2799,2889,2899,2999,3789,3799,3889,3899,3999,4799,4889,4899,4999,5899,5999,6899,6999,7899,7999,8899,8999,9999,25999,26899,26999,27899,27999,28899,28999,29999,37899,37999,38899,38999,39999,47999,48899,48999,49999,58999,59999,68999,69999,78999,79999,88999,89999,99999,259999,268999,269999,278999,279999,288999,289999,299999,378999,379999,388999,389999,399999,479999,488999,489999,499999,589999,599999,689999,699999,789999,799999,889999,899999,999999,2599999,2689999,2699999,2789999,2799999,2889999,2899999,2999999,3789999,3799999,3889999,3899999,3999999,4799999,4889999,4899999,4999999,5899999,5999999,6899999,6999999,7899999,7999999,8899999,8999999,9999999,25999999,26899999,26999999,27899999,27999999,28899999,28999999,29999999,37899999,37999999,38899999,38999999,39999999,47999999,48899999,48999999,49999999,58999999,59999999,68999999,69999999,78999999,79999999,88999999,89999999,99999999,259999999,268999999,269999999,278999999,279999999,288999999,289999999,299999999,378999999,379999999,388999999,389999999,399999999,479999999,488999999,489999999,499999999,589999999,599999999,689999999,699999999,789999999,799999999,889999999,899999999,999999999};\nint res[211] = {1,2,3,4,5,6,7,8,9,10,12,14,16,18,21,24,27,28,32,36,40,45,48,54,56,63,64,72,81,90,96,108,112,126,128,144,162,168,189,192,216,243,252,256,288,324,360,405,432,486,504,567,576,648,729,810,864,972,1008,1134,1152,1296,1458,1512,1701,1728,1944,2187,2268,2304,2592,2916,3240,3645,3888,4374,4536,5103,5184,5832,6561,7290,7776,8748,9072,10206,10368,11664,13122,13608,15309,15552,17496,19683,20412,20736,23328,26244,29160,32805,34992,39366,40824,45927,46656,52488,59049,65610,69984,78732,81648,91854,93312,104976,118098,122472,137781,139968,157464,177147,183708,186624,209952,236196,262440,295245,314928,354294,367416,413343,419904,472392,531441,590490,629856,708588,734832,826686,839808,944784,1062882,1102248,1240029,1259712,1417176,1594323,1653372,1679616,1889568,2125764,2361960,2657205,2834352,3188646,3306744,3720087,3779136,4251528,4782969,5314410,5668704,6377292,6613488,7440174,7558272,8503056,9565938,9920232,11160261,11337408,12754584,14348907,14880348,15116544,17006112,19131876,21257640,23914845,25509168,28697814,29760696,33480783,34012224,38263752,43046721,47829690,51018336,57395628,59521392,66961566,68024448,76527504,86093442,89282088,100442349,102036672,114791256,129140163,133923132,136048896,153055008,172186884,191318760,215233605,229582512,258280326,267846264,301327047,306110016,344373768,387420489};\nint main()\n{\n    int n;cin >> n;\n    int p = upper_bound(ans,ans + 211,n) - ans - 1;// \u6ce8\u610f\u9700\u8981 - 1\n    cout << res[p];\n    return 0;\n}\n```",
        "postTime": 1642817319,
        "uid": 384736,
        "name": "\u5965\u65af\u5361\u5c0f\u51b0\u4eba",
        "ccfLevel": 4,
        "title": "CF1143B"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6bd4\u8f83\u65b9\u4fbf\u7684\u65b9\u6cd5\u662f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u3002\n\n\u5728\u4ee3\u7801\u7684\u4e8c\u5c42\u5faa\u73af\u4e2d\uff0c\u7b2c\u4e00\u5c42\u7684 $i$ \u66b4\u529b\u679a\u4e3e\u6570\u4f4d\uff0c\u7b2c\u4e8c\u5c42\u524d\u9762 $1$ \u4e00\u76f4\u5230 $i-1$\u4f4d\u4e0d\u53d8\uff0c\u7b2c $i$ \u4f4d $-1$ \uff0c\u540e\u9762\u7684\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5f53\u7136\u662f\u90fd\u53d6 $9$ \u5c31\u597d\u4e86\u3002\u679a\u4e3e\u5b8c\u4e4b\u540e\u7528\u6253\u64c2\u53f0\u7684\u65b9\u6cd5\u4f7f\u5f97\u6700\u540e\u4e58\u79ef\u53d6\u6700\u5927\u503c\u3002\n\n\u8bdd\u4e0d\u591a\u8bf4\uff0c\u7ed9\u5927\u4f6c\u4eec\u732e\u4e0a\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n\tstring s;\n\tcin>>s;\n\t/*\u5b57\u7b26\u4e32\u4f1a\u6bd4int\u7c7b\u578b\u597d\u7528\u5f88\u591a\uff0c\n\t\u56e0\u4e3astring\u7c7b\u578b\u53ef\u4ee5\u76f4\u63a5\u67e5\u627e\uff0c\n\t\u4f46int\u7c7b\u578b\u9700\u8981\u7528\u7e41\u7410\u7684\u8ba1\u7b97*/ \n\tint len=s.length();\n\tlong long maxn=1;\n\tfor(int i=0;i<len;++i) maxn*=s[i]-'0';\n\tfor(int i=0;i<len;++i){\n\t\tlong long tmp;\n\t\tif(s[i]!='1') tmp=s[i]-'0'-1;\n\t\telse tmp=1;\n\t\tfor(int j=0;j<i;++j) tmp*=(s[j]-'0')\n\t\tfor(int j=i+1;j<len;++j) tmp*=9;\n\t\tmaxn=max(maxn,tmp);\n\t}\n\tcout<<maxn;\n\treturn 0;\n} \n```",
        "postTime": 1642819033,
        "uid": 481855,
        "name": "OLE_OIer",
        "ccfLevel": 0,
        "title": "CF1143B\u9898\u89e3"
    },
    {
        "content": "\u6bd4\u8d5b\u4e00\u5f00\u59cb\u60f3\u7528\u6784\u9020\u505a\uff0c\u7ed3\u679c\u4e00\u76f4WA  \n\u540e\u6539\u7528DP\u5c31\u884c\u4e86  \n\u8fd9\u9053\u9898\u7684\u4e3b\u8981\u96be\u70b9\u5728\u4e8e\u5904\u7406\u9000\u4f4d\u7684\u95ee\u9898  \nDP\u4e00\u4e0b\u5c31\u597d\u4e86  \n\u5b9a\u4e49dp[i][0]\u4e3a\u7b2ci\u4f4d\u9000\u4f4d\u80fd\u53d6\u5230\u7684\u6700\u5927\u7684\u6570  \n\u5b9a\u4e49dp[i][1]\u4e3a\u7b2ci\u4f4d\u4e0d\u9000\u4f4d\u80fd\u53d6\u5230\u7684\u6700\u5927\u7684\u6570  \n\u8f6c\u79fb\u65b9\u7a0b\u662f\u663e\u7136\u7684  \n\u7136\u540e\u5c31A\u4e86\n```\n//by ciwomuli\n//AK JSOI 2019\n#include <algorithm>\n#include <cctype>\n#include <climits>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <vector>\n#define LL long long\nusing namespace std;\ntemplate <typename T>\ninline void read(T &t)\n{\n    int f = 0, c = getchar();\n    t = 0;\n    while (!isdigit(c))\n        f |= c == '-', c = getchar();\n    while (isdigit(c))\n        t = t * 10 + c - 48, c = getchar();\n    if (f)\n        t = -t;\n}\ntemplate <typename T, typename... Args>\ninline void read(T &t, Args &... args)\n{\n    read(t);\n    read(args...);\n}\nLL dp[15][2];\nLL x[15];\nint main()\n{\n    char ch;\n    ch = getchar();\n    int tot = 0;\n    while (isdigit(ch))\n    {\n        x[++tot] = ch - '0';\n        ch = getchar();\n    }\n    LL ans = x[1];\n    dp[1][1] = x[1];\n    dp[1][0] = max(1ll, x[1] - 1);\n    for (int i = 2; i <= tot; i++)\n    {\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1]) * (x[i] - 1);\n        dp[i][0] = max(dp[i][0], dp[i - 1][0] * 9);\n        dp[i][1] = max(dp[i - 1][0], dp[i - 1][1]) * x[i];\n        ans = max(ans, max(dp[i][0], dp[i][1]));\n    }\n    cout << ans;\n}\n```",
        "postTime": 1554108383,
        "uid": 31228,
        "name": "ciwomuli",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1143B \u3010Nirvana\u3011"
    }
]