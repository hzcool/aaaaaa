[
    {
        "content": "\u5176\u4ed6\u9898\u89e3\u505a\u6cd5\u8bf4\u7684\u5f88\u8be6\u7ec6\u4e86\uff0c\u8fd9\u91cc\u8865\u5145\u4e00\u4e2a\u4e0d\u9700\u8981 tarjan \u7f29\u70b9\u7684\uff0c\u4ee3\u7801\u6bd4\u8f83\u6e05\u65b0\u7684\u505a\u6cd5\u3002  \n\n\u5927\u4f53\u601d\u8def\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u8fdb\u884c\u7f29\u70b9\u3002  \n\u6211\u4eec\u79f0\u6bcf\u4e00\u5217\u4ece\u4e0b\u5f80\u4e0a\u6570\u7684\u7b2c $a_i$ \u4e2a\u70b9\u4e3a\u5173\u952e\u70b9\uff0c\u6bcf\u4e00\u5217\u7684\u7b2c\u4e00\u4e2a\u70b9\u4e3a\u8d77\u59cb\u70b9\u3002    \n\u5bf9\u4e8e\u6bcf\u4e2a\u5173\u952e\u70b9\uff0c\u6c42\u51fa\u6700\u5de6\u80fd\u8986\u76d6\u5b83\u7684\u8d77\u59cb\u70b9\u5728\u54ea\u4e00\u5217\uff0c\u6700\u53f3\u80fd\u8986\u76d6\u5b83\u7684\u8d77\u59cb\u70b9\u5728\u54ea\u4e00\u5217\u3002\u8fd9\u4e2a\u53ef\u4ee5\u7528\u4e24\u904d dfs \u6765\u89e3\u51b3\u3002  \n\n\u7136\u540e\u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\u3002  \n\n\u5177\u4f53\u53ef\u4ee5\u89c1\u4ee3\u7801\u3002\n\n```cpp\n\nint n,m,pos,ans;\nchar s[N],str[N];\nint a[N],L[N],R[N],f[N];\nint p(int x,int y){return x*m-m+y;}\nvoid dfs1(int x,int y,int k)\n{\n\tif(L[p(x,y)]!=-1) return;L[p(x,y)]=k;\n\tif(x<n) dfs1(x+1,y,k);\n\tif(x>1 && s[p(x-1,y)]=='#') dfs1(x-1,y,k);\n\tif(y>1 && s[p(x,y-1)]=='#') dfs1(x,y-1,k);\n\tif(y<m && s[p(x,y+1)]=='#') dfs1(x,y+1,k);\n}\nvoid dfs2(int x,int y,int k)\n{\n\tif(R[p(x,y)]!=-1) return;R[p(x,y)]=k;\n\tif(x<n) dfs2(x+1,y,k);\n\tif(x>1 && s[p(x-1,y)]=='#') dfs2(x-1,y,k);\n\tif(y>1 && s[p(x,y-1)]=='#') dfs2(x,y-1,k);\n\tif(y<m && s[p(x,y+1)]=='#') dfs2(x,y+1,k);\n}\nsigned main()\n{\n    rd(n);rd(m);\n    for (int i=1;i<=n;i++) {scanf(\"%s\",str+1);for (int j=1;j<=m;j++) s[p(i,j)]=str[j];}\n    for (int i=1;i<=m;i++) rd(a[i]);\n    memset(L,-1,sizeof(L));memset(R,-1,sizeof(R));\n    for (int j=1;j<=m;j++) for (int i=1;i<=n;i++) if (s[p(i,j)]=='#') dfs1(i,j,j);\n    for (int j=m;j>=1;j--) for (int i=1;i<=n;i++) if (s[p(i,j)]=='#') dfs2(i,j,j);\n    for (int i=1;i<=m+2;i++) f[i]=m+2;\n    for (int j=1;j<=m;j++) if (a[j]) for (int i=n;i>=1;i--) if (s[p(i,j)]=='#')\n    {\n        a[j]--;if (a[j]==0) {f[L[p(i,j)]]=min(f[L[p(i,j)]],R[p(i,j)]+1);break;}\n    }\n    for (int i=m+1;i>=1;i--) f[i]=min(f[i],f[i+1]);pos=1;\n    while (pos<m+2) pos=f[pos],ans++;\n    cout<<ans-1<<endl;\n    \n}\n```\n",
        "postTime": 1628663172,
        "uid": 70132,
        "name": "AsunderSquall",
        "ccfLevel": 7,
        "title": "CF1534F2"
    },
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u4e00\u4e2a $n \\times m$ \u7684\u7f51\u683c\uff0c\u67d0\u4e9b\u683c\u5b50\u91cc\u6709\u6c99\u5b50\uff0c\u5176\u4ed6\u683c\u5b50\u91cc\u6ca1\u6709\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u6c99\u5b50\u4f7f\u5176\u6389\u843d\u3002\u6c99\u5b50\u5728\u4e0b\u843d\u8fc7\u7a0b\u4e2d\u4f1a\u6270\u52a8\u76f8\u90bb\uff08\u4e0a\u4e0b\u5de6\u53f3\uff09\u7684\u6c99\u5b50\uff0c\u4f7f\u5b83\u4eec\u4e00\u540c\u6389\u843d\u3002\u95ee\u81f3\u5c11\u8981\u9009\u62e9\u591a\u5c11\u6c99\u5b50\u624d\u80fd\u4f7f\u7b2c $i$ \u5217\u4e0b\u843d\u7684\u6c99\u5b50\u6700\u5c11\u4e3a $a_i$ \u4e2a\u3002\n\n## Easy Version\n\n\u5728Easy Version\u4e2d\uff0c\u6240\u6709\u7684\u6c99\u5b50\u90fd\u8981\u6389\u843d\u3002\n\n\u8003\u8651\u5c06\u6270\u52a8\u7684\u5173\u7cfb\u5efa\u6210\u56fe\u3002\u6211\u4eec\u5bf9\u6bcf\u4e2a\u6c99\u5b50\u5411\u5176\u4e0a\u65b9\u4e00\u683c\u7684\u6c99\u5b50\u3001\u4e0b\u65b9\u7b2c\u4e00\u4e2a\u6c99\u5b50\u3001\u5de6\u8fb9\u4e00\u5217\u548c\u53f3\u8fb9\u4e00\u5217\u4e0e\u5f53\u524d\u6c99\u5b50\u76f8\u90bb\u6216\u5728\u5f53\u524d\u6c99\u5b50\u4e0b\u65b9\u7684\u6c99\u5b50\u4e2d\u6700\u4e0a\u65b9\u7684\u6c99\u5b50\u8fde\u8fb9\u3002\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/li346bje.png)\n\n\u5bb9\u6613\u53d1\u73b0\u4e00\u4e2a\u6c99\u5b50 $A$ \u80fd\u6270\u52a8\u53e6\u4e00\u4e2a\u6c99\u5b50 $B$ \u7684\u5145\u8981\u6761\u4ef6\u662f $A$ \u5230 $B$ \u6709\u4e00\u6761\u8def\u5f84\u3002\u95ee\u9898\u53d8\u6210\u4e86\u9009\u53d6\u6700\u5c11\u7684\u70b9\u4f7f\u5f97\u4ece\u8fd9\u4e9b\u70b9\u51fa\u53d1\u80fd\u5230\u8fbe\u56fe\u4e2d\u7684\u6240\u6709\u70b9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u7f29\u70b9\u53d8\u4e3a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u6613\u5f97\u6240\u6709\u5165\u5ea6\u4e3a$0$\u7684\u70b9\u90fd\u8981\u88ab\u9009\u53d6\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(nm)$ \u6216 $O(nm \\log (nm))$\uff0c\u53d6\u51b3\u4e8e\u5efa\u56fe\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n## Hard Version\n\n\u663e\u7136\u5982\u679c\u4e00\u4e2a\u6c99\u5b50\u6389\u843d\u4e86\u5176\u4e0b\u7684\u6240\u6709\u6c99\u5b50\u4e5f\u4f1a\u6389\u843d\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u6270\u52a8\u6bcf\u4e00\u5217\u4e2d\u4ece\u4e0b\u5411\u4e0a\u6570\u7b2c $a_i$ \u4e2a\u6c99\u5b50\u3002\u6211\u4eec\u79f0\u8fd9\u4e9b\u6c99\u5b50\u5bf9\u5e94\u7684\u70b9\u4e3a\u7279\u6b8a\u70b9\u3002\u95ee\u9898\u8f6c\u5316\u6210\u9009\u53d6\u4e00\u4e9b\u70b9\uff0c\u4ece\u8fd9\u4e9b\u70b9\u51fa\u53d1\u80fd\u8986\u76d6\u5230\u8fd9\u4e9b\u6c99\u5b50\u5bf9\u5e94\u7684\u70b9\u3002\n\n\u5982\u679c\u4ece\u4e00\u4e2a\u7279\u6b8a\u70b9 $X$ \u80fd\u5230\u53e6\u4e00\u4e2a\u7279\u6b8a\u70b9 $Y$\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651 $Y$\uff0c\u56e0\u4e3a\u5982\u679c\u80fd\u5230 $X$ \u5c31\u4e00\u5b9a\u80fd\u5230 $Y$ \u3002\u6211\u4eec\u4ece\u7279\u6b8a\u70b9\u4e2d\u5220\u53bb\u8fd9\u4e9b\u70b9\uff0c\u6309\u5217\u6392\u5e8f\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6570\u7ec4 $A$\u3002\u53ef\u4ee5\u53d1\u73b0\u4ece\u56fe\u4e2d\u4efb\u610f\u4e00\u4e2a\u70b9 $X$ \u80fd\u5230\u8fbe\u7684\u5728 $A$ \u4e2d\u7684\u7279\u6b8a\u70b9\u5728 $A$ \u4e2d\u7684\u4e0b\u6807\u662f\u8fde\u7eed\u7684\u3002\n\n\u8bc1\uff1a\u5047\u5982\u8bf4\u4ece $X$ \u51fa\u53d1\u5230\u8fbe\u7684 $A$ \u4e2d\u7684\u7279\u6b8a\u70b9\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u90a3\u4e48\u5b58\u5728\u4e24\u4e2a $A$ \u4e2d\u7684\u70b9 $i, j$\uff08$i$ \u5728 $j$ \u7684\u5de6\u8fb9\uff09\uff0c\u4ece $X$ \u80fd\u5230\u8fbe $i$ \u548c $j$ \u4f46\u4e0d\u80fd\u5230\u8fbe $i, j$ \u4e2d\u95f4\u7684\u5217\u7684 $A$ \u4e2d\u7684\u70b9\u3002\u5047\u8bbe\u4e00\u4e2a\u4e0d\u80fd\u5230\u8fbe\u7684 $A$ \u4e2d\u7684\u70b9\u662f $Z$\u3002\u7531\u4e8e\u6270\u52a8\u7684\u5217\u662f\u8fde\u7eed\u7684\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u70b9 $k$ \u4f7f\u5f97 $k$ \u548c $Z$ \u5728\u540c\u4e00\u5217\u4e14\u4ece $X$ \u80fd\u5230 $k$\u3002\u5047\u5982 $k$ \u5728 $Z$ \u4e0a\u65b9\uff0c\u5219 $X$ \u80fd\u5230 $Z$\uff1b\u5047\u5982 $k$ \u5728 $Z$ \u4e0b\u65b9\uff0c\u5219 $Z$ \u80fd\u5230 $j$ \uff0c\u5219 $j$ \u4e0d\u5728 $A$ \u4e2d\uff0c\u77db\u76fe\u3002\n\n\u6211\u4eec\u80fd\u7528 DP \u7b97\u51fa\u6bcf\u4e2a\u70b9\u80fd\u5230\u7684\u5728 $A$ \u4e2d\u7684\u70b9\u7684\u533a\u95f4\u3002\u95ee\u9898\u8f6c\u6362\u6210\u4e86\u6709\u82e5\u5e72\u6761\u7ebf\u6bb5\uff0c\u6211\u4eec\u8981\u9009\u53d6\u82e5\u5e72\u6761\u7ebf\u6bb5\u4f7f\u5f97\u5b83\u4eec\u80fd\u8986\u76d6\u4e00\u4e2a\u533a\u95f4\u3002\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u53ef\u4ee5\u7528\u8d2a\u5fc3\u89e3\u51b3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(nm)$ \u6216 $O(nm \\log (nm))$\uff0c\u53d6\u51b3\u4e8e\u5efa\u56fe\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <stdio.h>\n#include <algorithm>\n#include <vector>\n#include <string.h>\n\nint n, m, a[400005];\nstd::vector<int> sandl[400005];\n\nstruct edge {\n    int to, nxt;\n} g[2000005], g2[2000005], g3[2000005];\nint head[400005], cnt, dgr[400005];\nint low[400005], dfn[400005], in_stack[400005], stack[400005], h, dfs_id, belong[400005], bcnt;\nint head2[400005], head3[400005], cnt2, indgr[400005];\nint marked[400005];\n\nint A_cnt, L[400005], R[400005], seg_cnt, ans;\nstruct segment {\n    int l, r;\n} segs[400005];\n\ninline void add_edge(int f, int t) {\n    g[++cnt].to = t;\n    g[cnt].nxt = head[f];\n    head[f] = cnt;\n    ++dgr[f];\n    ++dgr[t];\n}\ninline int node_num(int i, int j) {\n    return (i - 1) * m + j;\n}\n\nvoid tarjan(int u) {\n    dfn[u] = low[u] = ++dfs_id;\n    in_stack[u] = 1;\n    stack[++h] = u;\n\n    for (int i = head[u]; i; i = g[i].nxt) {\n        if (!dfn[g[i].to]) {\n            tarjan(g[i].to);\n            if (low[g[i].to] < low[u])\n                low[u] = low[g[i].to];\n        } else if (in_stack[g[i].to] && dfn[g[i].to] < low[u])\n            low[u] = dfn[g[i].to];\n    }\n\n    if (dfn[u] == low[u]) {\n        ++bcnt;\n        int j;\n        do {\n            j = stack[h--];\n            in_stack[j] = 0;\n            belong[j] = bcnt;\n        } while (j != u);\n    }\n}\n\ninline void add_edge2(int f, int t) {\n    g2[++cnt2].to = t;\n    g2[cnt2].nxt = head2[f];\n    head2[f] = cnt2;\n    g3[cnt2].to = f;\n    g3[cnt2].nxt = head3[t];\n    head3[t] = cnt2;\n    ++indgr[f];\n}\nvoid mark(int u) {\n    for (int i = head2[u]; i; i = g2[i].nxt)\n        if (!marked[g2[i].to]) {\n            marked[g2[i].to] = 1;\n            mark(g2[i].to);\n        }\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i)\n        for (int j = 1; j <= m; ++j) {\n            char c;\n            scanf(\" %c\", &c);\n            if (c == '#')\n                sandl[j].push_back(i);\n        }\n    for (int i = 1; i <= m; ++i)\n        scanf(\"%d\", a + i);\n\n    for (int i = 1; i <= m; ++i)\n        for (unsigned j = 0; j < sandl[i].size(); ++j) {\n            add_edge(node_num(sandl[i][j], i), node_num(sandl[i][j], i));\n\n            if (j && sandl[i][j - 1] == sandl[i][j] - 1)\n                add_edge(node_num(sandl[i][j], i), node_num(sandl[i][j] - 1, i));\n            if (j != sandl[i].size() - 1)\n                add_edge(node_num(sandl[i][j], i), (sandl[i][j + 1] - 1) * m + i);\n            \n            if (i != 1) {\n                auto lq = std::lower_bound(sandl[i - 1].begin(), sandl[i - 1].end(), sandl[i][j]);\n                if (lq != sandl[i - 1].end())\n                    add_edge(node_num(sandl[i][j], i), node_num(*lq, i - 1));\n            }\n            if (i != m) {\n                auto rq = std::lower_bound(sandl[i + 1].begin(), sandl[i + 1].end(), sandl[i][j]);\n                if (rq != sandl[i + 1].end())\n                    add_edge(node_num(sandl[i][j], i), node_num(*rq, i + 1));\n            }\n        }\n\n    for (int i = 1; i <= n * m; ++i)\n        if (dgr[i] && !dfn[i])\n            tarjan(i);\n\n    for (int i = 1; i <= n * m; ++i)\n        for (int j = head[i]; j; j = g[j].nxt)\n            if (belong[i] != belong[g[j].to])\n                add_edge2(belong[i], belong[g[j].to]);\n\n    for (int j = 1; j <= m; ++j)\n        if (a[j])\n            mark(belong[node_num(sandl[j][sandl[j].size() - a[j]], j)]);\n\n    memset(L, 0x3f, sizeof(L));\n\n    for (int j = 1; j <= m; ++j)\n        if (a[j]) {\n            int i = sandl[j][sandl[j].size() - a[j]];\n            if (!marked[belong[node_num(i, j)]] && !R[belong[node_num(i, j)]]) {\n                L[belong[node_num(i, j)]] = ++A_cnt;\n                R[belong[node_num(i, j)]] = A_cnt;\n            }\n        }\n\n    h = 0;\n\n    for (int i = 1; i <= bcnt; ++i)\n        if (!indgr[i])\n            stack[++h] = i;\n\n    while (h) {\n        int u = stack[h--];\n\n        for (int i = head3[u]; i; i = g3[i].nxt) {\n            if (L[u] < L[g3[i].to])\n                L[g3[i].to] = L[u];\n            if (R[u] > R[g3[i].to])\n                R[g3[i].to] = R[u];\n\n            --indgr[g3[i].to];\n            if (!indgr[g3[i].to])\n                stack[++h] = g3[i].to;\n        }\n    }\n\n    for (int i = 1; i <= bcnt; ++i)\n        if (L[i] <= R[i]) {\n            segs[++seg_cnt].l = L[i];\n            segs[seg_cnt].r = R[i];\n        }\n\n    std::sort(segs + 1, segs + seg_cnt + 1, [](const segment & a, const segment & b) {\n        return a.l == b.l ? a.r > b.r : a.l < b.l;\n    });\n\n    for (int i = 1, rmost = 0, rfur = 0, j = 1; i <= A_cnt; ++i) {\n        while (j <= seg_cnt && segs[j].l <= i) {\n            if (segs[j].r > rfur)\n                rfur = segs[j].r;\n            ++j;\n        }\n        if (i > rmost) {\n            ++ans;\n            rmost = rfur;\n        }\n    }\n\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1623751281,
        "uid": 103558,
        "name": "zhangjunyan2580",
        "ccfLevel": 0,
        "title": "CF1534F2 Falling Sand (Hard Version) \u9898\u89e3"
    },
    {
        "content": "[\u5728\u6211\u7684 cnblogs \u4e0a\u9605\u8bfb](https://www.cnblogs.com/RiverHamster/p/sol-cf1534f2.html)\n\n\u5bf9\u6240\u6709\u7684 `#` \u7f16\u53f7\u5e76\u6784\u9020\u6709\u5411\u56fe\uff1a\u82e5 $i$ \u88ab\u201c\u5f71\u54cd\u201d\u540e\u80fd\u5f71\u54cd $j$\uff0c\u5219 $i$ \u5411 $j$ \u8fde\u8fb9\u3002\u5bf9\u4e8e\u540c\u4e00\u5217\u7684\u70b9\uff0c\u53ef\u4ee5\u53ea\u5bf9\u76f8\u90bb\u7684\u70b9\u8fde\u8fb9\u3002\n\n\u5148\u627e\u51fa\u539f\u56fe\u4e2d\u7684\u6240\u6709\u6781\u5927\u5f3a\u8fde\u901a\u5206\u91cf\u5e76\u7f29\u70b9\u3002\u5bf9\u4e8e Easy Version\uff0c\u7b54\u6848\u5373\u4e3a\u7f29\u70b9\u56fe\u4e2d\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\u6570\u3002\n\n\u5bf9\u4e8e Hard Version\uff0c\u82e5 $a_i > 0$\uff0c\u5c06\u7b2c $i$ \u5217\u7684\u7b2c $a_i$ \u4e2a\u70b9\u6807\u8bb0\u4e3a**\u5173\u952e\u70b9**\u3002\u6211\u4eec\u9700\u8981\u9009\u51fa\u6700\u5c11\u7684\u70b9\uff0c\u4f7f\u5f97\u5b83\u4eec\u53ef\u4ee5\u5230\u8fbe\u6240\u6709\u5173\u952e\u70b9\u3002\n\n\u8bbe\u5173\u952e\u70b9\u7684\u96c6\u5408\u4e3a $S$\uff0c\u82e5\u5b58\u5728 $u, v \\in S$\uff0c$u$ \u53ef\u8fbe $v$\uff0c\u90a3\u4e48\u5c06 $v$ \u4ece $S$ \u4e2d\u5220\u9664\u3002\n\n\u6709\u7ed3\u8bba\uff1a\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u8986\u76d6\u7684\u5b58\u5728\u5173\u952e\u70b9\u7684\u5217\u5f62\u6210\u8fde\u7eed\u533a\u95f4\u3002\n\n\u8bc1\u660e\uff1a\u4e0d\u5931\u4e00\u822c\u6027\u5730\uff0c\u8bbe**\u4ece\u5de6\u5230\u53f3**\u5b58\u5728\u5173\u952e\u70b9 $u, v, w \\in S$\uff0c$u$ \u53ef\u8fbe $w$\uff0c\u4f46\u4e0d\u53ef\u8fbe $v$\u3002\u90a3\u4e48 $u$ \u5fc5\u987b\u7ecf\u8fc7 $v$ \u5217\u4e2d\u7684\u67d0\u70b9 $i$\uff0c\u7136\u540e\u5230\u8fbe $w$\uff0c\u56e0\u4e3a $v$ \u9ad8\u4e8e $i$\uff08\u5426\u5219\u53ef\u4ee5\u5230\u8fbe $v$\uff09\uff0c\u6240\u4ee5 $v$ \u53ef\u8fbe $w$\uff0c\u6545 $w \\notin S$\u3002\n\n\u90a3\u4e48\u901a\u8fc7\u4e00\u6b21 DAG \u4e0a DP \u6c42\u51fa\u6240\u6709\u5173\u952e\u70b9\u548c\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\uff0c\u5bf9\u533a\u95f4\u5de6\u7aef\u70b9\u6392\u5e8f\u540e\u8d2a\u5fc3\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <algorithm>\n#include <numeric>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\n#define LOG(f...) fprintf(stderr, f)\n#define all(cont) begin(cont), end(cont)\n\nusing ll = long long;\n\ntemplate<class T> void read(T &x) {\n  char ch; x = 0;\n  int f = 1;\n  while (isspace(ch = getchar()));\n  if (ch == '-') ch = getchar(), f = -1;\n  do x = x * 10 + (ch - '0'); while(isdigit(ch = getchar()));\n  x *= f;\n}\ntemplate<class T, class ...A> void read(T &x, A&... args) { read(x); read(args...); }\n\nconst int N = 400005;\n\nvector<int> pos[N];\nchar s[N];\nint pre_id[N];\nint a[N];\n\nint dfn[N], low[N], scc[N], dfc = 0, stk[N], top = 0, scc_cnt;\nbool instk[N];\nvector<int> G[N], RG[N];\nint r_ind[N];\nbool key[N], vis[N];\nint key_id[N], key_cnt;\n\nstruct range {\n  int l, r;\n  bool operator<(const range &r) const { return l < r.l; }\n} ran[N];\n\nvoid tarjan(int x) {\n  dfn[x] = low[x] = ++dfc;\n  stk[++top] = x; instk[x] = true;\n  for (int v : G[x])\n    if (!dfn[v]) tarjan(v), low[x] = min(low[x], low[v]);\n    else if (instk[v]) low[x] = min(low[x], dfn[v]);\n  if (low[x] == dfn[x]) {\n    int tp;\n    do {\n      tp = stk[top--];\n      instk[tp] = false;\n      scc[tp] = scc_cnt;\n    } while (tp != x);\n    ++scc_cnt;\n  }\n}\n\nvoid scc_dp() {\n  vector<int> ord;\n  for (int i = 0; i < scc_cnt; ++i)\n    if (!r_ind[i]) ord.push_back(i);\n  for (int i = 0; i < scc_cnt; ++i) {\n    int x = ord[i];\n    if (vis[x]) key[x] = false;\n    if (key[x]) vis[x] = true;\n    for (int v : RG[x]) {\n      --r_ind[v];\n      if (vis[x] || key[x]) vis[v] = true;\n      if (!r_ind[v]) ord.push_back(v);\n    }\n  }\n  for (int i = 0; i < scc_cnt; ++i)\n    if (key[i]) key_id[i] = key_cnt++;\n  for (auto i = rbegin(ord); i != rend(ord); ++i) {\n    int x = *i;\n    ran[x].l = key[x] ? key_id[x] : numeric_limits<int>::max();\n    ran[x].r = key[x] ? key_id[x] : numeric_limits<int>::min();\n    for (int v : RG[x]) {\n      ran[x].l = min(ran[x].l, ran[v].l);\n      ran[x].r = max(ran[x].r, ran[v].r);\n    }\n  }\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n  freopen(\"input.txt\", \"r\", stdin);\n  freopen(\"output.txt\", \"w\", stdout);\n#endif\n  int n, m;\n  read(n, m);\n  for (int i = 0; i < n; ++i) {\n    scanf(\"%s\", s);\n    for (int j = 0; j < m; ++j)\n      if (s[j] == '#') pos[j].push_back(n - 1 - i);\n  }\n  for (int i = 0; i < m; ++i)\n    read(a[i]);\n  for (int i = 0; i < m; ++i)\n    reverse(all(pos[i]));\n  pre_id[0] = 0;\n  for (int i = 1; i <= m; ++i)\n    pre_id[i] = pre_id[i - 1] + pos[i - 1].size();\n  for (int i = 0; i < m; ++i)\n    for (auto it = begin(pos[i]); it != end(pos[i]); ++it) {\n      int id = pre_id[i] + (it - begin(pos[i]));\n      if (it != begin(pos[i])) G[id].push_back(id - 1);\n      if (next(it) != end(pos[i]) && it[1] == *it + 1) G[id].push_back(id + 1);\n      if (i != 0) {\n        auto t = upper_bound(all(pos[i - 1]), *it);\n        if (t != begin(pos[i - 1])) G[id].push_back(pre_id[i - 1] - 1 + (t - begin(pos[i - 1])));\n      }\n      if (i + 1 != m) {\n        auto t = upper_bound(all(pos[i + 1]), *it);\n        if (t != begin(pos[i + 1])) G[id].push_back(pre_id[i + 1] - 1 + (t - begin(pos[i + 1])));\n      }\n    }\n  int nc = pre_id[m];\n  for (int i = 0; i < nc; ++i)\n    if (!dfn[i]) tarjan(i);\n  for (int i = 0; i < m; ++i)\n    if (a[i])\n      key[scc[pre_id[i] + a[i] - 1]] = true;\n  for (int i = 0; i < nc; ++i)\n    for (int v : G[i])\n      if (scc[i] != scc[v]) RG[scc[i]].push_back(scc[v]), ++r_ind[scc[v]];\n  scc_dp();\n  sort(ran, ran + scc_cnt);\n  int max_r = -1, nmax_r = 0, res = 0;\n  for (int i = 0; i < scc_cnt && max_r + 1 < key_cnt; ++i) {\n    nmax_r = max(nmax_r, ran[i].r);\n    if (i + 1 == scc_cnt || ran[i + 1].l > max_r + 1)\n      ++res, max_r = nmax_r;\n  }\n  printf(\"%d\\n\", res);\n  return 0;\n}\n```\n\n",
        "postTime": 1623756144,
        "uid": 31756,
        "name": "RiverHamster",
        "ccfLevel": 9,
        "title": "CF1534F2 Falling Sand (Hard Version) \u9898\u89e3"
    },
    {
        "content": "\u5982\u679c\u60a8\u6ca1\u6709\u770b\u8fc7 F1 \u7684\u9898\u89e3\uff0c\u5efa\u8bae\u5148\u770b\u4e00\u770b -> [link](https://www.luogu.com.cn/blog/gyh20/solution-cf1534f1)\n\n\u5148\u4ece\u4e00\u4e9b\u663e\u800c\u6613\u89c1\u7684\u7ed3\u8bba\u5f00\u59cb\uff1a\n\n$1.$ \u5982\u679c\u67d0\u4e00\u4e2a\u6c99\u6389\u843d\uff0c\u90a3\u4e48\u4e0b\u9762\u7684\u6240\u6709\u6c99\u6389\u843d\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u9700\u8981\u7b2c $a_i$ \u4e2a\u6c99\u6389\u4e0b\u6765\u5373\u53ef\u3002\n\n\u4ee4\u6bcf\u4e00\u5217\u524d $a_i$ \u4e2a\u70b9\u4e3a $A$ \u7c7b\u70b9\uff0c\u5176\u4f59\u70b9\u4e3a $B$ \u7c7b\u70b9\u3002\n\n$2.$ \u5047\u8bbe\u53ea\u770b $A$ \u7c7b\u70b9\uff0c\u6211\u4eec\u53ea\u7528\u7ba1\u7f29\u70b9\u4e4b\u540e\u7684 $0$ \u5ea6\u70b9\uff08\u50cf F1 \u4e00\u6837\u6c42\uff09\u3002\n\n\u8fd9\u4e9b $0$ \u5ea6\u70b9\u5fc5\u987b\u88ab\u6270\u52a8\uff0c\u800c\u6270\u52a8\u4e4b\u540e\u6240\u6709\u70b9\u90fd\u4f1a\u88ab\u6270\u52a8\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ba1\u8fd9\u4e9b $0$ \u5ea6\u70b9\u4e0e $B$ \u7c7b\u70b9\u6784\u6210\u7684\u56fe\u3002\n\n$3.$ \u6bcf\u4e00\u5217\u7684 $0$ \u5ea6\u70b9\u81f3\u591a\u53ea\u6709 $1$ \u4e2a\u3002\n\n$4.$ \u6240\u6709\u7684 $A$ \u7c7b\u70b9\u90fd\u5728\u540c\u5217\u7684 $B$ \u7c7b\u70b9\u4e0b\u65b9\u3002\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u5efa\u56fe\uff0c\u6c42\u51fa\u6bcf\u4e2a $B$ \u7c7b\u70b9\u80fd\u5f71\u54cd\u5230\u7684\u6240\u6709 $0$ \u5ea6\u70b9\uff0c\u7136\u540e\u5c31\u8f6c\u6210\u4e86 DAG \u4e0a\u7684\u5947\u602a\u95ee\u9898\uff0c $n\\leq 4\\times 10^5$ \u65f6\u5b8c\u5168\u65e0\u6cd5\u89e3\u51b3\u3002\n\n\u5f53\u611f\u89c9\u4e00\u4e2a\u95ee\u9898\u4e0d\u53ef\u505a\u65f6\uff0c\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e0b\u81ea\u5df1\u8f6c\u5316\u95ee\u9898\u7684\u65f6\u5019\u662f\u4e0d\u662f\u6f0f\u4e86\u4ec0\u4e48\u6027\u8d28\u3002\n\n\u6bcf\u4e2a $B$ \u7c7b\u70b9\u5f71\u54cd\u7684 $0$ \u5ea6\u70b9\u5230\u5e95\u662f\u4ec0\u4e48\u6837\u7684\uff1f\n\n\u5148\u7ed9\u51fa\u7ed3\u8bba\uff1a\u4e00\u6bb5\u533a\u95f4\uff01\n\n\u8bc1\u660e\uff1a\u5982\u679c\u7b2c $i$ \u5217\u7684 $B$ \u7c7b\u70b9\u5f71\u54cd\u4e86\u7b2c $x(x>i)$ \u5217\u7684 $0$ \u5ea6\u70b9\uff0c\u7531\u4e8e\u6211\u4eec\u521d\u59cb\u7684\u8fde\u8fb9\u53ea\u6709 $i$ \u5411 $[i-1,i+1]$ \u7684\u70b9\u8fde\u8fb9\uff0c\u90a3\u4e48\u5728\u4e2d\u9014 $i<k<x$ \u6240\u6709\u7b2c $k$ \u5217\u4e2d\u4e14\u5728\u4e24\u70b9\u7eb5\u5750\u6807\u4e4b\u95f4\u7684\u70b9\u4e00\u5b9a\u5b58\u5728\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e2d\u95f4\u7684\u6bcf\u4e00\u5217\uff0c\u8fd9\u4e2a\u7eb5\u5750\u6807\u7684\u70b9\u4e00\u5b9a\u4e3a $B$ \u7c7b\u70b9\uff0c\u5426\u5219\uff0c\u82e5\u7b2c $x$ \u5217\u7684\u90a3\u4e2a\u70b9\u4e3a $A$ \u7c7b\u70b9\uff0c\u800c\u6839\u636e\u6700\u5f00\u59cb\u8fde\u8fb9\u7684\u5b9a\u4e49\uff0c$0$ \u5ea6\u70b9\u662f $A$ \u7c7b\u70b9\u7f29\u70b9\u4e4b\u540e\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u53ef\u80fd\u5b58\u5728\u5176\u5b83\u7684 $A$ \u7c7b\u70b9\u53ef\u8fbe\uff0c\u800c\u8fd9\u4e2a $B$ \u7c7b\u70b9\u4e00\u5b9a\u4f1a\u5f71\u54cd\u4e0b\u9762\u7684 $0$ \u5ea6\u70b9\u3002\n\n\u4e8e\u662f\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u8f6c\u4e3a\u4e86\u7ebf\u6bb5\u8986\u76d6\u7684\u7ecf\u5178\u95ee\u9898\u3002\n\n\u4ee3\u7801\u8fd8\u6ca1\u5199\uff0c\u5148\u5495\u7740\u3002\n",
        "postTime": 1623754466,
        "uid": 41476,
        "name": "gyh20",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1534F2"
    }
]