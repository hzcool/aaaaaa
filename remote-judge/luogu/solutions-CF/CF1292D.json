[
    {
        "content": "\u6765\u4e00\u53d1\u865a\u6811\u9898\u89e3\u3002\n\n\u6628\u5929\u4e0a\u5348\u5f00\u4e86\u4e00\u573aVP\uff0c\u7136\u540e\u673a\u623f\u795e\u4ed9\u79d2\u4e86\u8fd9\u4e2aD\u3002\u6211\u4e00\u770b\u8fd9\u4e0d\u662f\u865a\u6811\u9898\u5417?\u4f46\u662f\u6211\u4e0d\u4f1a\u5199\u865a\u6811\uff0c\u6240\u4ee5\u5b66\u4e86\u4e00\u4e0b\u5348\uff0c\u4eca\u5929\u6765\u5199\u4e2a\u9898\u89e3\u3002\n\n\u8fd9\u662f\u4e00\u9053\u5f88\u597d\u7684\u865a\u6811\u7ec3\u624b\u9898\uff0c\u81f3\u5c11\u5b83\u8ba9\u6211\u5bf9\u865a\u6811\u6709\u4e86\u66f4\u6df1\u523b\u7684\u8ba4\u8bc6\u3002\n\n\u5728\u8fdb\u5165\u6b63\u9898\u2014\u2014\u5efa\u865a\u6811\u4e4b\u524d\uff0c\u6211\u76f8\u4fe1\u5927\u5bb6\u90fd\u80fd\u770b\u51fa\u6765\uff0c\u4e0d\u540c\u7684\u70b9\u6570\u5176\u5b9e\u4e0d\u8d85\u8fc75000\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6253\u8868\u9884\u5904\u7406\u6bcf\u4e2a\u9636\u4e58\u7684\u552f\u4e00\u5206\u89e3\u5f62\u5f0f\u3002\n\n\u7136\u540e\uff0c\u5982\u679c\u6211\u4eec\u5efa\u51fa\u4e86\u865a\u6811\uff0c\u5c31\u628a\u539f\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a\u70b9\u8fb9\u5747\u5e26\u6743\u7684\u91cd\u5fc3\u95ee\u9898\u3002\u63a5\u4e0b\u6765\u8fd8\u8981\u8003\u8651\u8fd9\u4e2a\u5e26\u6743\u91cd\u5fc3\u53ef\u80fd\u5728\u865a\u6811\u7684\u70b9\u4e0a\uff0c\u865a\u6811\u7684\u8fb9\u4e0a\uff0c\u751a\u81f3\u865a\u6811\u7684\u5916\u9762\u2014\u2014\u800c\u540e\u4e24\u79cd\u662f\u4e0d\u597d\u5904\u7406\u7684\u3002\n\n\u663e\u7136\uff0c\u5728\u865a\u6811\u7684\u5916\u9762\u80af\u5b9a\u4e0d\u4f18\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u7528\u8c03\u6574\u6cd5\u8bc1\u660e\u5728\u865a\u6811\u7684\u8fb9\u4e0a\u4e0d\u4f1a\u6bd4\u5728\u8fd9\u6761\u8fb9\u7684\u67d0\u4e2a\u7aef\u70b9\u4e0a\u66f4\u4f18\u3002\u5982\u679c\u8fd9\u6761\u8fb9\u4e24\u8fb9\u6240\u6709\u70b9\u7684\u6743\u91cd\u4e4b\u548c\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u968f\u4fbf\u53d6\u4e00\u4e2a\u7aef\u70b9\uff0c\u5f97\u5230\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u548c\u662f\u4e00\u6837\u7684\uff1b\u5982\u679c\u4e24\u8fb9\u6743\u91cd\u548c\u4e0d\u540c\uff0c\u6211\u4eec\u53d6\u6743\u91cd\u8f83\u5c0f\u4e00\u8fb9\u7684\u7aef\u70b9\uff0c\u4e00\u5b9a\u6bd4\u8fd9\u4e2a\u8fb9\u4e0a\u7684\u70b9\u66f4\u4f18\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u4e00\u68f5\u865a\u6811\u7684\u4e00\u6761\u8fb9\u4ee3\u8868\u539f\u6811\u7684\u4e00\u6761\u94fe\uff0c\u800c\u8fd9\u6761\u94fe\u4e0a\u5168\u662f0\u6743\u70b9\uff0c\u90a3\u4e48\u5728\u8fd9\u6761\u94fe\u4e4b\u5916\u4e00\u5b9a\u8fd8\u5b58\u5728\u5e26\u6743\u91cd\u5fc3\u3002\n\n\u8003\u8651\u5982\u679c\u8981\u5efa\u865a\u6811\uff0c\u6211\u4eec\u9700\u8981\u641e\u5b9a\u4ee5\u4e0b\u51e0\u4e2a\u64cd\u4f5c : \n\n### 1.\u7ed9\u70b9\u6392\u5e8f\n\n\u53d1\u73b0\u5176\u5b9e\u4e0d\u7528\u7ed9\u70b9\u6392\u5e8f\u3002\u5982\u679c\u6211\u4eec\u6309\u9664\u53bb\u7684\u90a3\u4e2a\u8d28\u56e0\u5b50\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u904d\u5386\u513f\u5b50\u7684\u8bdd\uff0c\u6211\u4eec\u53d1\u73b0\u8d70\u4e0a\u6765\u662f\u780d\u53bb\u6700\u5c0f\u8d28\u56e0\u5b50\u7684\u8fc7\u7a0b\uff0c\u800c\u8d70\u4e0b\u53bb\u5219\u662f\u4e58\u4e0a\u6700\u5927\u8d28\u56e0\u5b50\u7684\u8fc7\u7a0b\u3002\u6240\u4ee5\uff0c\u65e2\u7136\u9636\u4e58\u7684\u5404\u8d28\u56e0\u5b50\u6b21\u6570\u90fd\u662f\u5355\u8c03\u9012\u589e\u7684\uff0cdfs\u5e8f\u4e5f\u662f\u5355\u8c03\u9012\u589e\u7684\u3002\n\n### 2.\u6c42LCA\n\n\u8003\u8651\u4e00\u4e2a\u70b9\u8d70\u5230\u5b83\u7684\u5404\u7ea7\u7956\u5148\u65f6\u780d\u8d28\u56e0\u5b50\u7684\u8fc7\u7a0b\u3002\u53d1\u73b0\u5982\u679c$u$\u662f$v$\u7684\u7956\u5148\uff0c\u90a3\u4e48$u$\u524d\u9762\u6709\u82e5\u5e720\uff0c\u7136\u540e\u63a5\u4e0b\u6765\u4e00\u4e2a\u8d28\u56e0\u5b50\u7684\u6b21\u6570\u6bd4$v$\u5c0f\uff0c\u5269\u4e0b\u7684\u8d28\u56e0\u5b50\u6b21\u6570\u90fd\u548c$v$\u76f8\u540c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u6c42$l=\\operatorname{LCA}(u,v)$\uff0c\u5c31\u5148\u6c42\u51fa$u,v$\u7684\u6700\u957f\u516c\u5171\u540e\u7f00\uff0c\u7136\u540e\u63a5\u4e0b\u6765\u4e00\u4f4d\u53d6$u,v$\u8fd9\u4e00\u4f4d\u4e0a\u7684$\\min$\uff0c\u5269\u4e0b\u7684\u4f4d\u53d6$0$\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u6211\u4eec\u8981\u6c42$\\operatorname{LCA}(15,20)$(\u53ef\u4ee5\u770b\u770b\u6837\u4f8b\u7684\u56fe\uff0c\u62ec\u53f7\u91cc\u8868\u793a\u552f\u4e00\u5206\u89e3\u5f62\u5f0f) : \n\n$$\n\\begin{aligned}\n15&=(0,1,1,0,...)\\\\\n20&=(2,0,1,0,...)\\\\\n\\operatorname{LCA}(15,20)=5&=(0,0,1,0,...)\\\\\n\\end{aligned}\n$$\n\n### 3.\u5224\u65ad\u76f8\u7b49\n\n\u5e9f\u8bdd\u3002\n\n### 4.\u5224\u65ad\u7956\u5148\u5173\u7cfb\n\n\u5176\u5b9e\u5728\u7b2c\u4e8c\u90e8\u5206\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u4e86\u3002\u6211\u4eec\u8981\u5224\u65ad$u$\u662f\u4e0d\u662f$v$\u7684\u540e\u4ee3\uff0c\u53ea\u8981\u770b$v$\u7b2c\u4e00\u4e2a\u975e$0$\u4f4d\u662f\u4e0d\u662f\u5c0f\u4e8e$u$\u5bf9\u5e94\u4f4d\u7684\u503c\uff0c\u7136\u540e\u540e\u9762\u7684\u4f4d\u662f\u4e0d\u662f\u76f8\u7b49\u3002\n\n\u89e3\u51b3\u4e86\u8fd9\u51e0\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6210\u529f\u5730\u5efa\u7acb\u865a\u6811\u3002\u63a5\u4e0b\u6765\u7684\u4efb\u52a1\u662f\u6c42\u51fa\u5e26\u6743\u91cd\u5fc3\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6362\u6839dp\u6765\u641e\u5b9a\u3002\n\n\u590d\u6742\u5ea6\uff0c\u9884\u5904\u7406\u662f$O(k\\log\\log k)$\uff0c\u5efa\u7acb\u865a\u6811\u662f$O(\\frac{k^2}{\\log k})$\uff0cdp\u662f$O(k)$\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6$O(\\frac{k^2}{\\log k})$\uff0c\u901f\u5ea6\u8fd8\u53ef\u4ee5\u3002\n\n\u6211\u7801\u529b\u4e0d\u592a\u884c\uff0c\u5199\u4e86160\u884c\u624d\u5199\u5b8c\u3002\u6ce8\u610f\u4e00\u4e0b$k$\u53ef\u80fd\u4e3a0\uff0c\u9700\u8981\u7279\u5224$0!=1$\u3002\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n\nint n;\nint b[5002],prime[700],pcnt;\nint temp[5002],val[20002];\nint cnt;\nlong long ans=0x7fffffffffffffff;\n\nstruct Num\n{\n\tint e[700];\n\tNum(){ memset(e,0,sizeof(e)); }\n\tinline bool operator == (Num x)\n\t{\n\t\tfor(int i=1;i<=pcnt;i++)\n\t\t\tif(e[i]!=x.e[i]) return 0;\n\t\treturn 1;\n\t}\n\tinline bool operator < (Num x)\n\t{\n\t\tfor(int i=1;i<=pcnt;i++)\n\t\t\tif(e[i]!=x.e[i])\n\t\t\t\tif(e[i]<x.e[i]) return 1;\n\t\t\t\telse return 0;\n\t\treturn 0;\n\t}\n}a[20000];\n\ninline void init()\n{\n\tfor(int i=2;i<=5000;i++)\n\t\tif(!b[i])\n\t\t{\n\t\t\tprime[++pcnt]=i;\n\t\t\tfor(int j=2*i;j<=5000;j+=i)\n\t\t\t\tb[j]=1;\n\t\t}\n\t\n\tfor(int i=1;i<=5000;i++) temp[i]=i;\n\tfor(int i=1;i<=pcnt;i++)\n\t\tfor(int j=1;j<=5000;j++)\n\t\t\twhile(temp[j]%prime[i]==0)\n\t\t\t\ttemp[j]/=prime[i],a[j].e[i]++;\n\tfor(int i=1;i<=5000;i++)\n\t\tfor(int j=1;j<=pcnt;j++)\n\t\t\ta[i].e[j]+=a[i-1].e[j];\n\tcnt=5000;\n}\n\nstruct Edge\n{\n\tint v,w,next;\n}e[100002];\n\nint h[50002];\nint ecnt;\n\ninline void add_edge(int u,int v,int w)\n{\n\te[++ecnt]={v,w,h[u]};\n\th[u]=ecnt;\n\te[++ecnt]={u,w,h[v]};\n\th[v]=ecnt;\n}\n\n#define min(x,y) ((x)<(y)?(x):(y))\n\ninline Num lca(Num a,Num b)\n{\n\tNum c;\n\tint i=pcnt;\n\tfor(;a.e[i]==b.e[i];i--) c.e[i]=a.e[i];\n\tc.e[i]=min(a.e[i],b.e[i]);\n\ti--;\n\tfor(;i>0;i--) c.e[i]=0;\n\treturn c;\n}\n\ninline int dist(Num u,Num v)//jump from u to v\n{\n\tint res=0;\n\tfor(int i=1;i<=pcnt;i++)\n\t\tres+=u.e[i]-v.e[i];\n\treturn res;\n}\n\ninline bool is_son(Num u,Num v)//check if u is v's son\n{\n\tint i=1;\n\tfor(;i<=pcnt&&!v.e[i];i++);\n\tif(i>pcnt) return 1;\n\tif(v.e[i]>u.e[i]) return 0;\n\ti++;\n\tfor(;i<=pcnt;i++)\n\t\tif(v.e[i]!=u.e[i]) return 0;\n\treturn 1;\n}\n\nint s[20002],top;\n\ninline void insert(int u)\n{\n\ta[++cnt]=lca(a[s[top]],a[u]);\n\tif(!(a[cnt]==a[s[top]]))\n\t{\n\t\twhile(is_son(a[s[top-1]],a[cnt])&&!(a[s[top-1]]==a[cnt]))\n\t\t\tadd_edge(s[top],s[top-1],dist(a[s[top]],a[s[top-1]])),top--;\n\t\tif(!(a[cnt]==a[s[top-1]]))\n\t\t\tadd_edge(s[top],cnt,dist(a[s[top]],a[cnt])),s[top]=cnt;\n\t\telse\n\t\t\tadd_edge(s[top],s[top-1],dist(a[s[top]],a[s[top-1]])),top--;\n\t}\n\ts[++top]=u;\n}\n\ninline void build()\n{\n\ts[++top]=1;\n\tfor(int i=2;i<=5000;i++)\n\t\tif(val[i])\n\t\t\tinsert(i);\n\tfor(int i=1;i<top;i++)\n\t\tadd_edge(s[i],s[i+1],dist(a[s[i+1]],a[s[i]]));\n}\n\nbool vis[20002];\nint sum[20002];\nlong long dp[20002],f[20002];\n\nvoid dfs1(int u,int fa)\n{\n\tvis[u]=1;\n\tsum[u]=val[u];\n\tf[u]=0;\n\tfor(int i=h[u];i;i=e[i].next)\n\t\tif(e[i].v!=fa)\n\t\t\tdfs1(e[i].v,u),sum[u]+=sum[e[i].v],f[u]+=(long long)e[i].w*sum[e[i].v]+f[e[i].v];\n}\n\nvoid dfs2(int u,int fa)\n{\n\tfor(int i=h[u];i;i=e[i].next)\n\t\tif(e[i].v!=fa)\n\t\t\tdp[e[i].v]=(dp[u]-(f[e[i].v]+(long long)e[i].w*sum[e[i].v])+(long long)e[i].w*(sum[1]-sum[e[i].v])+f[e[i].v]),\n\t\t\tdfs2(e[i].v,u);\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1,k;i<=n;i++)\n\t\tscanf(\"%d\",&k),k==0?val[1]++:val[k]++;\n\tinit();\n\tbuild();\n\tdfs1(1,0);\n\tdp[1]=f[1];\n\tdfs2(1,0);\n\tfor(int i=1;i<=cnt;i++)\n\t\tif(vis[i]) ans=min(ans,dp[i]);\n\tprintf(\"%I64d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1611797241,
        "uid": 152213,
        "name": "\u534e\u5c71\u62a1\u5251",
        "ccfLevel": 9,
        "title": "CF1292D Chaotic V. \u9898\u89e3"
    },
    {
        "content": "\u6c34\u6c34\u6c34\u6c34\u6c34\u6c34\u6c34\u9898\u89e3\u3002\n\n\u8003\u8651\u5982\u4f55\u63cf\u8ff0\u7b54\u6848\u4f1a\u53d8\u5c0f\uff0c\u5957\u7528\u5e7b\u60f3\u4e61\u6218\u7565\u6e38\u620f\u7684\u7ed3\u8bba\u5373\u53ef\u3002\n\n\u5177\u4f53\u5982\u4e0b\uff1a\n\n\u8003\u8651\u8de8\u8fc7\u4e00\u6761\u8fb9\u4ece $x$ \u8d70\u5230 $v$\uff0c\u5bf9\u4e8e\u7b54\u6848\u7684\u53d8\u5316\uff0c\u5e94\u5f53\u5f62\u5982 $+(n-sz_v)-sz_v$\n\n\u6362\u53e5\u8bdd\u8bf4\u4f1a\u53d8\u5c0f\u7b49\u4ef7\u4e8e $2sz_v>n$\uff0c\u8fd9\u6837\u7684\u70b9 $v$ \u5728 $x$ \u7684\u51fa\u8fb9\u4e2d\u552f\u4e00\u3002\n\n\u6ce8\u610f\u5230\u4ee5 $x$ \u4e3a\u6839\u540e\u5b50\u6811\u5927\u5c0f\u968f\u7236\u4eb2\u5230\u513f\u5b50\u5355\u8c03\u4e0d\u5347\uff0c\u663e\u7136\u5982\u679c\u81f3\u6b64\u70b9\u6ca1\u6709\u5408\u6cd5\u7684\u70b9\u65f6\u65e2\u6709\u5230\u8fbe\u6700\u4f18\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5185\u90e8\u7684\u5b50\u6811\u5927\u5c0f\u3002\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\u5b9e\u9645\u4e0a $\\dfrac{x}{f(x)}$ \u8fd9\u4e2a\u5f62\u5f0f\u662f\u5bb9\u6613\u627e\u5230\u89c4\u5f8b\u7684\uff0c\u5b83\u6307\u660e $x$ \u5f80\u4e0a\u8d70\u5230\u7684\u7956\u5148\u662f $x$ \u7684\u6700\u5927\u8d28\u56e0\u6570\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u5bf9 $x!$ \u7c7b\u578b\u7684\u6240\u6709\u70b9\u8fdb\u884c\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u7136\u540e\u4f9d\u6b21\u628a\u8d28\u56e0\u6570\u6d88\u6389\u5373\u53ef\u3002\n\n\u7136\u540e\u53c8\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u8d70\u7684\u8d28\u56e0\u6570\u663e\u7136\u5355\u8c03\uff0c\u6240\u4ee5\u66b4\u529b\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u8d28\u56e0\u6570\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6\u53ef\u4ee5\u88ab\u611f\u6027\u7406\u89e3\u4e3a\uff1a$O(n^2\\log \\log n)$ \u8bc1\u660e\u4e0d\u4f1a\u3002\n\n\u7136\u540e\u7ec6\u8282\u6bd4\u8f83\u591a\u3002\n\n$Code:$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std ;\n#define rep( i, s, t ) for( register int i = s; i <= t; ++ i )\n#define re register\n#define int long long\nint gi() {\n\tchar cc = getchar() ; int cn = 0, flus = 1 ;\n\twhile( cc < '0' || cc > '9' ) {  if( cc == '-' ) flus = - flus ; cc = getchar() ; }\n\twhile( cc >= '0' && cc <= '9' )  cn = cn * 10 + cc - '0', cc = getchar() ;\n\treturn cn * flus ;\n}\nconst int M = 5000 + 5 ;\nconst int N = 1000 + 5 ;\nint n, m, a[M], k[M][N], R[M], use[M], p[N], sum[M], Ans, top, isp[M] ; \nvoid init( int x ) {\n\trep( i, 2, x )\n\t\tif( !isp[i] ) { p[++ top] = i ;\n\t\t\tfor( re int j = 2 * i; j <= x; j += i ) isp[j] = 1 ;\n\t\t}\n\trep( i, 1, top ) {\n\t\tint u = p[i] ; for( re int j = u; j <= x; j += u ) k[j][i] = k[j / u][i] + 1 ;\n\t} sum[0] = sum[1] = 0 ;\n\trep( i, 2, x ) {\n\t\tsum[i] = sum[i - 1] ;\n\t\trep( j, 1, top ) sum[i] += k[i][j] ;\n\t\trep( j, 1, top ) k[i][j] += k[i - 1][j] ;\n\t\tfor( re int j = top; j >= 1; -- j )\n\t\tif( k[i][j] ) { R[i] = j ; break ; }\n\t\tAns = Ans + sum[i] * a[i] ;\n\t}\n}\nsigned main()\n{\n\tn = gi() ; int x, cnt = 0, sz ;\n\trep( i, 1, n ) x = gi(), ++ a[x], m = max( m, x ) ;\n\tinit( m ) ; int flag = 1 ;\n\tfor( re int i = top; i >= 1; -- i ) {\n\t\tflag = 1 ; while( flag ) {\n\t\t\tsz = 0 ; \n\t\t\trep( j, 2, m ) if( R[j] == i && ( use[j] == cnt ) ) sz += a[j] ; \n\t\t\tif( 2 * sz > n ) {\n\t\t\t\tAns = Ans + n - 2 * sz ; \n\t\t\t\trep( j, 2, m ) if( R[j] == i && ( use[j] == cnt ) ) { \n\t\t\t\t\t-- k[j][R[j]], ++ use[j] ; if( !k[j][R[j]] )\n\t\t\t\t\twhile( ( !k[j][R[j]] ) && ( R[j] != 0 ) ) -- R[j] ;\n\t\t\t\t} ++ cnt, flag = 1 ;\n\t\t\t} else flag = 0 ;\n\t\t} \n\t} printf(\"%lld\\n\", Ans ) ;\n\treturn 0 ;\n}\n```",
        "postTime": 1592546745,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1292D \u3010Chaotic V.\u3011"
    },
    {
        "content": "\u672c\u9898\u5176\u5b9e\u5f88\u66b4\u529b\u3002\n\n\u4e3b\u8981\u601d\u8def\u5c31\u662f\uff0c\u5148\u5c06\u70b9\u6570\u51cf\u5c0f\u5230 $n = 5 \\times 10^3$\u3002\n\n\u5047\u8bbe\u7b54\u6848\u4e3a $1$\uff0c\u7136\u540e\u6bcf\u6b21\u5f80\u6700\u5927\u7684\u5b50\u6811\u8d70\uff0c\u5982\u679c\u7b54\u6848\u80fd\u591f\u66f4\u4f18\u5219\u66f4\u65b0\u7b54\u6848\uff0c\u5426\u5219\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002\n\n\u8003\u8651\u7ec6\u8282\u4e0a\u7684\u95ee\u9898\uff0c\u7b2c\u4e00\u70b9\u662f\uff0c\u7531\u4e8e\u70b9\u6570\u592a\u5927\uff0c\u56fe\u662f\u65e0\u6cd5\u663e\u5f0f\u5efa\u51fa\u6765\u7684\u3002\n\n\u5982\u4f55\u9690\u5f0f\u5efa\u56fe\u5462\uff1f\n\n\u9996\u5148\u53ef\u4ee5\u5c06 $1! \\sim n!$ \u7684\u6240\u6709\u8d28\u56e0\u6570\u4ee5\u53ca\u5e42\u6b21\u6570\u90fd\u6c42\u51fa\u6765\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u6c42\u51fa $1 \\sim n$ \u7684\u7136\u540e\u505a\u4e00\u4e2a\u524d\u7f00\u548c\u5373\u53ef\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a $i$ \u5efa\u7acb\u4e00\u4e2a\u6307\u9488 $p_i$ \u6307\u5411 $i!$ \u7684\u6700\u5927\u8d28\u56e0\u6570\uff0c\u7279\u522b\u5730\u5982\u679c $c_i$\uff08\u5373 $i$ \u51fa\u73b0\u7684\u6b21\u6570\uff09\u4e3a\u96f6\u5219\u6700\u5927\u8d28\u56e0\u6570\u9ed8\u8ba4\u4e3a $1$\u3002\n\n\u90a3\u4e48\u6bcf\u6b21\u5f80\u4e00\u68f5\u5b50\u6811\u8d70\u7684\u65f6\u5019\uff0c\u52a8\u6001\u7ef4\u62a4\u8fd9\u4e2a\u6307\u9488\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u7531\u4e8e\u4e00\u4e2a\u70b9\u7684\u53ef\u91cd\u8d28\u56e0\u5b50\u4e2a\u6570\u662f $\\mathcal O(\\log n)$ \u7ea7\u522b\u7684\uff0c\u56e0\u6b64\u6700\u591a\u8d70 $\\mathcal O(n \\log n)$ \u6761\u8fb9\u3002\n\n\u6bcf\u8d70\u4e00\u6761\u8fb9\u9700\u8981\u5747\u644a $\\mathcal O(n)$ \u7684\u65f6\u95f4\u7ef4\u62a4\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n^2 \\log n)$\u3002\n\n```cpp\nconst int N = 5e3 + 1;\nint n, c[N], f[N][N], p[N], s[N];\nll ans, now;\n\nint main() {\n\trd(n);\n\tfor (int i = 1, x; i <= n; i++) rd(x), ++c[x];\n\tfor (int i = 2; i < N; i++) {\n\t\tmemcpy(f[i], f[i-1], sizeof(f[i]));\n\t\tfor (int j = 2, k = i; j <= k; j++)\n\t\t\twhile (k % j == 0) ++f[i][j], k /= j;\n\t}\n\tfor (int i = 1; i < N; i++)\n\t\tif (!c[i]) p[i] = 1;\n\t\telse for (int j = 1; j <= i; j++)\n\t\t\tif (f[i][j]) p[i] = j, now += 1ll * f[i][j] * c[i];\n\tans = now;\n\twhile (*max_element(p + 1, p + N) > 1) {\n\t\tmemset(s, 0, sizeof(s));\n\t\tfor (int i = 0; i < N; i++) s[p[i]] += c[i];\n\t\tint o = max_element(s + 1, s + N) - s, w = s[o];\n\t\tif (w * 2 <= n || o == 1) break;\n\t\tans = min(ans, now -= w * 2 - n);\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tif (p[i] != o) p[i] = 1;\n\t\t\tif (p[i] == 1) continue;\n\t\t\t--f[i][p[i]];\n\t\t\twhile (p[i] > 1 && !f[i][p[i]]) --p[i];\n\t\t}\n\t}\n\tprint(ans);\n\treturn 0;\n}\n```",
        "postTime": 1579716059,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1292D \u3010Chaotic V.\u3011"
    },
    {
        "content": "[\u5b98\u65b9\u9898\u89e3](https://codeforces.com/blog/entry/73051)\n\n[\u5728\u6211\u7684blog\u9605\u8bfb](https://www.cnblogs.com/RiverHamster/sol-cf1292d)\n\n\u8bb0$K = \\max{k_i}$\n\n\u8c8c\u4f3c\u6bd4\u539f\u9898\u89e3\u7684\u590d\u6742\u5ea6\u6b63\u786e\u4e00\u70b9\uff0c$O(K\\log^2 K )$\u7684\n\n## \u9898\u610f\n\n\u7ed9\u4e00\u68f5\u6811\uff0c$i$\u4e0e$\\dfrac{i}{minFactor(i)}$\u8fde\u8fb9\n\n\u7ed9$n$\u4e2a\u5173\u952e\u70b9\uff0c\u6bcf\u4e2a\u70b9\u7684\u4f4d\u7f6e\u662f$k_i!$\n\n\u6c42\u4e00\u4e2a\u70b9\u5230\u6240\u6709\u5173\u952e\u70b9\u8ddd\u79bb\u6700\u77ed\uff08\u91cd\u590d\u7b97\u591a\u6b21\uff09\uff0c$n \\leq 10^6, k_i \\leq 5\\times10^3$\n\n## \u601d\u8def\n\n- \u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u5176\u5b9e\u7b49\u4ef7\u4e8e\u6c42\u6811\u7684\u91cd\u5fc3\uff08\u70b9\u3001\u8fb9\u5747\u5e26\u6743\uff09\n- \u6784\u51fa\u865a\u6811\u5c31\u53ef\u4ee5\u89e3\u51b3\n\n\u9996\u5148\u53d1\u73b0\uff0cLCA\u7684\u6df1\u5ea6\u5c31\u662f\u516c\u5171\u6700\u5927\u8d28\u56e0\u5b50\u4e2a\u6570\uff0c\u6bcf\u4e2a\u70b9\u7684\u5206\u53c9\u7684\u4f4d\u7f6e\u5c31\u662f\u7b2c\u4e00\u6b21\u8d28\u56e0\u5b50\u6539\u53d8\u7684\u5730\u65b9\u3002\u5982$5^2$\u53d8\u6210$5^3$\u5c31\u4f1a\u5206\u53c9\u3002\n\n\u4f9d\u6b21\u63d2\u5165$1!$\u5230 $5000!$\uff0c\u8bbe\u63d2\u5165$i!$\n\n\u663e\u7136\uff0c\u63d2\u5165\u4e00\u4e2a\u8d28\u6570\u4e00\u5b9a\u4f1a\u8fde\u63a5$1$\uff0c\u5426\u5219\u5bf9$i$\u505a\u8d28\u56e0\u5b50\u5206\u89e3\uff0c\u7b2c\u4e00\u6b21\u6539\u53d8\u7684\u8d28\u56e0\u5b50\u4e00\u5b9a\u662f$i$\u7684\u6700\u5927\u8d28\u56e0\u5b50\n\n\u6240\u4ee5\u53ef\u4ee5\u6c42\u51fa\u8fd9\u4e2a\u8d28\u56e0\u5b50\uff0c$(i-1)!$\u4e2d\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u8d28\u56e0\u5b50\u4e0d\u4f1a\u5206\u53c9\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u5206\u53c9\uff08\u53ef\u80fd\u5728\u4e00\u6761\u865a\u8fb9\u4e0a\uff0c\u9700\u8981\u62c6\u5f00\u8fb9\uff0c\u5f00\u4e00\u4e2a\u65b0\u70b9\uff09\u3002\n\n\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4$(i-1)!$\u7684\u5404\u4e2a\u8d28\u56e0\u5b50\u51fa\u73b0\u4e2a\u6570\uff0c\u5c31\u53ef\u4ee5\u5feb\u901f\u6c42\u51fa\u516c\u5171\u90e8\u5206\u7684\u957f\u5ea6\uff0c\u8bb0\u4e3a$com$\uff0c\u7136\u540e\u5c06$(i-1)!$\u7684\u8d28\u56e0\u5b50\u4e2a\u6570\u548c\u8bb0\u4e3a$facSum$\uff0c$facSum - com$\u5c31\u662f\u8981\u8df3\u7684\u6b65\u6570\uff0c\u66b4\u529b\u5411\u4e0a\u8df3\uff0c\u7136\u540e\u9700\u8981\u5f00\u65b0\u70b9\u5c31\u5f00\u65b0\u70b9\uff0c\u4e0d\u9700\u8981\u5c31\u76f4\u63a5\u6302\u4e0b\u9762\u5c31\u597d\u4e86\uff0c\u8fde\u4e00\u6761\u957f\u4e3a$facSum' - com$\uff08$facSum'$\u4e3a$i!$\u7684\u8d28\u56e0\u5b50\u4e2a\u6570\uff09\u5373\u53ef\uff0c\u8fd9\u91cc\u6709\u70b9\u7c7b\u4f3cSAM\u63d2\u5165\u3002\n\n\u6700\u540e\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u8d2a\u5fc3\u5730\u8fdb\u5165$size \\geq \\lfloor \\dfrac{n}{2} \\rfloor$\u7684\u5b50\u6811\u5373\u53ef\u3002\n\n## \u590d\u6742\u5ea6\n- $k$\u6b21\u67e5\u8be2\u6811\u72b6\u6570\u7ec4\uff0c$O(K \\log K)$\n- \u6bcf\u6b21\u5206\u89e3\u8d28\u56e0\u5b50\u63d2\u5165\u6811\u72b6\u6570\u7ec4\uff0c$O(K \\log ^2 K)$\uff08\u6700\u591a\u6709$O(K \\log K)$\u4e2a\u8d28\u56e0\u5b50\uff09\n- \u6bcf\u6b21\u66b4\u529b\u5411\u4e0a\u8df3\uff0c\u56e0\u4e3a\u6bcf\u6b21\u6df1\u5ea6$+1$\uff08\u6307\u865a\u6811\uff09\uff0c\u6240\u4ee5$O(K)$\n- \u4e0a\u754c\u4e0d\u662f\u5f88\u7d27\n\n## Code\n[CF\u63d0\u4ea4\u8bb0\u5f55](https://codeforces.com/contest/1292/submission/69286634)\n\n\u4e5f\u53ef\u4ee5\u5728\u6211blog\u770b\n\n\u597d\u50cf\u5199\u957f\u4e86\u70b9...\n",
        "postTime": 1579684707,
        "uid": 31756,
        "name": "RiverHamster",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1292D \u3010Chaotic V.\u3011"
    },
    {
        "content": "\u94fe\u63a5:https://www.luogu.com.cn/problem/CF1292D\n\n~~\u8bdd\u8bf4\u8fd9\u4e2a\u9898\u600e\u4e48\u6bd4\u4e0a\u9762\u90a3\u9053\u9898\u8fd8\u8981\u7b80\u5355\uff0c\u987a\u5e8f\u662f\u4e0d\u662f\u5f04\u53cd\u4e86\u3002~~\n\n\u8bb2\u4e00\u8bb2\u6211\u7684\u505a\u6cd5:\n\n\u9898\u89e3:\u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e9b\u6570\u770b\u6210\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9x\u7684\u7236\u4eb2\u662f$\\frac{x}{f(x)}$(\u5176\u4e2d$f(x)$\u662f$x$\u7684\u6700\u5c0f\u8d28\u56e0\u5b50)\u3002\u6837\u4f8b\u7684\u56fe\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u5f88\u597d\u7684\u793a\u8303:\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF1292D/e214af30f3eb751abab75da52b3089227c0773fd.png)\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u539f\u95ee\u9898\u5176\u5b9e\u5c31\u662f\u8ba9\u6211\u4eec\u6c42\u4e00\u4e2a\u8282\u70b9\u5230\u6240\u6709\u7ed3\u70b9\u7684\u8def\u5f84\u548c\u6700\u5c0f\uff0c\u5176\u5b9e\u8fd9\u5c31\u662f\u4e00\u4e2a\u6811\u4e0a\u95ee\u9898\u3002\n\n\u6211\u4eec\u8003\u8651\u89e3\u51b3\u8fd9\u4e2a\u6811\u4e0a\u95ee\u9898\uff0c\u7531\u4e8e\u6570\u592a\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e2a\u7c7b\u4f3c\u6269\u57df\u7684\u64cd\u4f5c\uff0c\u5b9a\u4e49\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u6570\u90fd\u4e3a($a_{1},a_{2},a_{3},...a_{5000}$)\u7684\u5f62\u5f0f(\u5176\u4e2d$a_{i}$\u8868\u793a\u5728\u8be5\u6570\u7684\u8d28\u56e0\u5b50\u4e2d\uff0c$i$\u51fa\u73b0\u7684\u6b21\u6570)\u3002\n\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u5982\u4e0b\u4e09\u4e2a\u8fd0\u7b97\uff1a\n\n$1.x\\times y$\n\n$2.lca(x,y)$\n\n$3.dis(x,y)$\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u8fd0\u7b97\uff0c\u5c06\u6bcf\u4e00\u4f4d\u7684$a_{i}$\u76f8\u52a0\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u7b2c\u4e00\u79cd\u8fd0\u7b97\u9884\u5904\u7406$x!$\u6240\u8868\u793a\u7684\u6570\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u8fd0\u7b97\uff0c\u53ef\u4ee5\u6c42\u51fa\u4e24\u4e2a\u6570\u7684\u6700\u957f\u516c\u5171\u540e\u7f00\uff0c\u6700\u957f\u516c\u5171\u540e\u7f00\u7684\u4f4d\u5c31\u53d6\u5b83\u4eec\u4e24\u4e2a\u76f8\u540c\u7684\u503c\uff0c\u4e0d\u4e00\u6837\u7684\u90a3\u4e00\u4f4d\u53d6\u6700\u5c0f\u503c\uff0c\u524d\u9762\u7684\u4f4d\u5c31\u53d6$0$\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u8fd0\u7b97\uff0c\u4e5f\u53ef\u4ee5\u6c42\u51fa\u4e24\u4e2a\u6570\u7684\u6700\u957f\u516c\u5171\u540e\u7f00\uff0c\u6700\u957f\u516c\u5171\u540e\u7f00\u7684\u4f4d\u6ca1\u6709\u8d21\u732e\uff0c\u4e0d\u4e00\u6837\u7684\u90a3\u4e00\u4f4d\u7684\u8d21\u732e\u5219\u4e3a\u5b83\u4eec\u7684\u5dee\uff0c\u524d\u9762\u7684\u4f4d\u7684\u8d21\u732e\u5219\u4e3a\u5b83\u4eec\u7684\u548c\u3002\n\n\u8003\u8651\u6811\u4e0a\u7684\u8282\u70b9\u8fc7\u591a\uff0c\u800c\u6709\u7528\u7684\u53ea\u6709\u8f93\u5165\u7684\u8282\u70b9\u4ee5\u53ca\u5b83\u4eec\u7684$lca$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u5efa\u4e00\u68f5\u6811\u3002\u7531\u4e8e\u4e00\u4e2a$lca$\u53ef\u80fd\u662f\u53e6\u5916\u4e24\u4e2a$lca$\u7684$lca$\uff0c\u800c\u6df1\u5ea6\u6700\u5927\u7684$lca$\u4e0d\u80fd\u662f\u5176\u4ed6$lca$\u7684$lca$\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06$lca$\u6309\u6df1\u5ea6\u6392\u5e8f\uff0c\u5229\u7528\u7c7b\u4f3c$kruskal$\u91cd\u6784\u6811\u7684\u65b9\u6cd5\u5efa\u6811\u3002\u4f46\u8fd9\u6837\u7684$lca$\u6709$n^2$\u4e2a\uff0c\u5efa\u6811\u7684\u590d\u6742\u5ea6\u8fc7\u9ad8\u3002\n\n\u8003\u8651\u4f18\u5316\u3002\u91cd\u65b0\u8003\u8651\u7b2c\u4e8c\u79cd\u8fd0\u7b97\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u6570\u7684$lca$\u7684\u6df1\u5ea6\u5373\u4e3a\u4e24\u4e2a\u6570\u7684\u6700\u957f\u516c\u5171\u540e\u7f00\u7684\u5927\u5c0f\u3002\u5c06\u6bcf\u4e2a\u6570\u770b\u4f5c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a\u8d28\u56e0\u5b50\u4e2a\u6570\u662f\u9012\u589e\u7684\uff0c\u6240\u4ee5\u8f83\u5c0f\u6570\u7684\u5b57\u5178\u5e8f\u4e5f\u6700\u5c0f\u3002\u5229\u7528\u540e\u7f00\u6570\u7ec4\u7684\u503c\u662f\u6211\u4eec\u77e5\u9053\uff0c\u5b57\u5178\u5e8f\u76f8\u90bb\u7684\u6700\u957f\u516c\u5171\u540e\u7f00\u4f1a\u5c3d\u91cf\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u5230\u7684$lca$\u53ea\u6709\u76f8\u90bb\u4e24\u6570\u7684$lca$\u3002\n\n\u5efa\u51fa\u6811\u540e\uff0c\u539f\u95ee\u9898\u5f7b\u5f7b\u5e95\u5e95\u7684\u53d8\u4e3a\u4e86\u6811\u4e0a\u95ee\u9898\uff0c\u6362\u6839$dp$\u5373\u53ef\u3002\n\n```\n#include<iostream>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nstruct node\n{\n\tint map[5001];\n};\nstruct reads\n{\n\tint v,data,nxt;\n};\nreads edge[10001];\nnode a[10001],sum[10001];\nint b[1000001],n,x,leng;\nlong long S,head[10001],len,dp[10001],dp2[10001],sz[10001],res=1e18,t,num[10001],length;\nbool used[10001];\nnode c,ans;\nstruct tree_made\n{\n\tint depth,num,x,y;\n\tbool operator < (const tree_made &t)const\n\t{\n\t\treturn depth>t.depth;\n\t}\n};\ntree_made LCA[5001];\nvoid add_edge(int x,int y,int z)\n{\n\tedge[++len].v=y;\n\tedge[len].data=z;\n\tedge[len].nxt=head[x];\n\thead[x]=len;\n\treturn;\n}\nnode add(node a,node b)\n{\n\tfor (int i=1;i<=5000;++i)\n\t\tc.map[i]=a.map[i]+b.map[i];\n\treturn c;\n}\nint dist(node a,node b)\n{\n\tint sum=0,i;\n\tfor (i=5000;i>=1;--i)\n\t\tif (a.map[i]!=b.map[i])\n\t\t{\n\t\t\tsum=abs(a.map[i]-b.map[i]);\n\t\t\tbreak;\n\t\t}\n\ti--;\n    for (;i>=1;--i)\n    \tsum+=a.map[i]+b.map[i];\n    return sum;\n}\nnode lca(node a,node b)\n{\n\tfor (int i=1;i<=5000;++i)\n\t\tc.map[i]=0;\n\tfor (int i=5000;i>=1;--i)\n\t{\n\t\tc.map[i]=a.map[i];\n\t\tif (a.map[i]!=b.map[i])\n\t\t{\n\t\t\tc.map[i]=min(a.map[i],b.map[i]);\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn a;\n}\nvoid dfs(int x)\n{\n\tused[x]=1;\n\tdp[x]=0;\n\tsz[x]=num[x];\n\tfor (int i=head[x];i>0;i=edge[i].nxt)\n\t\tif (!used[edge[i].v])\n\t\t{\n\t\t\tdfs(edge[i].v);\n\t\t\tdp[x]+=dp[edge[i].v]+sz[edge[i].v]*edge[i].data;\n\t\t\tsz[x]+=sz[edge[i].v];\n\t\t}\n\treturn;\n}\nvoid dfs2(int x)\n{\n\tused[x]=0;\n\tfor (int i=head[x];i>0;i=edge[i].nxt)\n\t\tif (used[edge[i].v])\n\t\t{\n\t\t\tdp2[edge[i].v]=dp2[x]+edge[i].data*(n-sz[edge[i].v])-sz[edge[i].v]*edge[i].data;\n\t\t\tdfs2(edge[i].v);\n\t\t}\n\treturn;\n}\nint rt[10001];\nint find(int x)\n{\n\tif (rt[x]==x)\n\t\treturn x;\n\treturn rt[x]=find(rt[x]);\n}\nvoid unionn(int x,int y)\n{\n\trt[find(x)]=find(y);\n\treturn;\n}\nsigned main()\n{\n\tcin>>n;\n\tfor (int i=2;i<=5000;++i)\n\t{\n\t\tt=i;\n\t\tfor (int j=2;j*j<=i;++j)\n\t\t\tif (t%j==0)\n\t\t\t{\n\t\t\t\twhile (t%j==0)\n\t\t\t\t{\n\t\t\t\t\tt/=j;\n\t\t\t\t\ta[i].map[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\tif (t>1)\n\t\t\ta[i].map[t]++;\n\t} \n\tfor (int i=1;i<=5000;++i)\n\t\tsum[i]=add(sum[i-1],a[i]);\n\tfor (int i=1;i<=n;++i)\n\t\tcin>>b[i];\n\tfor (int i=1;i<=n;++i)\n\t{\n\t\tif (b[i]==0)\n\t\t\tb[i]++;\n\t\tnum[b[i]]++;\n\t}\n\tfor (int i=1;i<=10000;++i)\n\t\trt[i]=i;\n\tlength=0;\n\tS=5000;\n\tfor (int i=2;i<=5000;++i)\n\t{\n\t\tif (dist(lca(sum[i],sum[i-1]),sum[i-1])!=0)\n\t\t{\n\t\t\t++S; \n\t\t\tLCA[++length].num=S;\n\t\t\tsum[S]=lca(sum[i],sum[i-1]);\n\t\t}\n\t\telse\n\t\t\tLCA[++length].num=i-1;\n\t\tLCA[length].x=i;\n\t\tLCA[length].y=i-1;\n\t\tLCA[length].depth=dist(sum[1],lca(sum[i],sum[i-1]));\n\t}\n\tsort(LCA+1,LCA+length+1);\n\tfor (int i=1;i<=length;++i)\n\t{\n\t\tadd_edge(LCA[i].num,find(LCA[i].x),dist(sum[LCA[i].num],sum[find(LCA[i].x)]));\n\t\tadd_edge(LCA[i].num,find(LCA[i].y),dist(sum[LCA[i].num],sum[find(LCA[i].y)]));\n\t\tif (find(LCA[i].x!=LCA[i].num))\n\t\t\tunionn(LCA[i].x,LCA[i].num);\n\t\tif (find(LCA[i].y!=LCA[i].num))\n\t\t\tunionn(LCA[i].y,LCA[i].num);\n\t}\n\tdfs(LCA[length].num); \n\tdp2[LCA[length].num]=dp[LCA[length].num];\n\tdfs2(LCA[length].num);\n\tfor (int i=1;i<=S;++i)\n\t\tres=min(res,dp2[i]);\n\tcout<<res<<endl;\n\treturn 0;\n}",
        "postTime": 1579616231,
        "uid": 148025,
        "name": "zhouhuanyi",
        "ccfLevel": 9,
        "title": "CF1292D Chaotic V."
    }
]