[
    {
        "content": "# Kruskal + \u5e76\u67e5\u96c6\n\n\u5173\u4e8e\u540c\u4e00\u5f20\u56fe\u4e0a\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6709\u4e00\u4e9b\u6027\u8d28\uff1a\n\n- \u5bf9\u4e8e\u4efb\u610f\u6743\u503c\u7684\u8fb9\uff0c\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u8fd9\u4e2a\u6743\u503c\u7684\u8fb9\u7684\u6570\u91cf\u662f\u4e00\u5b9a\u7684\n- \u5bf9\u4e8e\u4efb\u610f\u6b63\u786e\u52a0\u8fb9\u65b9\u6848\uff0c\u52a0\u5b8c\u5c0f\u4e8e\u67d0\u6743\u503c\u7684\u6240\u6709\u8fb9\u540e\u56fe\u7684\u8fde\u901a\u6027\u662f\u4e00\u6837\u7684\n\n\u636e\u4ee5\u4e0a\u6027\u8d28\uff0c\u5224\u65ad\u67d0\u4e9b\u8fb9\u662f\u5426\u80fd\u591f\u5728\u540c\u4e00\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u540c\u65f6\u51fa\u73b0\u65f6\uff0c\u4e0d\u540c\u6743\u503c\u7684\u8fb9\u4e4b\u95f4\u4e0d\u4e92\u76f8\u5f71\u54cd\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u7528Kruskal\u9884\u5904\u7406\u51fa\u52a0\u5b8c\u5c0f\u4e8e\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u540e\u7684\u6240\u6709\u8fb9\u540e\uff0c\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6bcf\u79cd\u6743\u503c\u5206\u5f00\u8003\u8651\uff0c\u770b\u8fd9\u4e9b\u8fb9\u8fde\u63a5\u7684\u8fde\u901a\u5757\u662f\u5426\u6784\u6210\u73af\uff08\u6ce8\u610f\u4e0d\u8981\u6f0f\u6389\u81ea\u73af\uff09\uff0c\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u5e76\u67e5\u96c6\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int gi() {\n\tregister int x; register char c, op = 0;\n\twhile(c = getchar(), c < '0' || c > '9') if(c == '-') op = !op;\n\tx = c ^ 48;\n\twhile(c = getchar(), c >= '0' && c <= '9') x = (x << 3) + (x << 1) + (c ^ 48);\n\treturn op ? -x : x;\n}\nint fa[500001];\nint find(int x) {\n\treturn fa[x] == x ? x : fa[x] = find(fa[x]);\n}\nvoid merge(int x, int y) {\n\tfa[find(x)] = find(y);\n}\nstruct edge {\n\tint x, y, val, id;\n\tint tx, ty;\n\tbool operator < (const edge a)const {\n\t\treturn val < a.val;\n\t}\n} e[500001];\nint n, m;\nbool cmp(const edge x, const edge y) {\n\treturn x.id < y.id;\n}\nint main() {\n\tn = gi(), m = gi();\n\tfor(int i = 1; i <= n; i ++) fa[i] = i;\n\tfor(int i = 1; i <= m; i ++) e[i].x = gi(), e[i].y = gi(), e[i].val = gi(), e[i].id = i;\n\tsort(e + 1, e + m + 1);\n\te[0].val = -1;\n\tfor(int i = 1; i <= m;) {\n\t\tint j = i;\n\t\tdo {\n\t\t\te[j].tx = find(e[j].x);\n\t\t\te[j].ty = find(e[j].y);\n\t\t\tj ++;\n\t\t} while(j <= m && e[j].val == e[j - 1].val);\n\t\twhile(i < j) {\n\t\t\twhile(find(e[i].x) == find(e[i].y) && i < j) i ++;\n\t\t\tif(i < j) merge(e[i].x, e[i].y);\n\t\t} \n\t}\n\tint q = gi();\n\tsort(e + 1, e + m + 1, cmp);\n\tfor(int i = 1; i <= n; i ++) fa[i] = i;\n\twhile(q --) {\n\t\tint k = gi();\n\t\tvector<edge>v;\n\t\tfor(int i = 1; i <= k; i ++) {\n\t\t\tint a = gi();\n\t\t\tv.push_back({e[a].tx, e[a].ty, e[a].val});\n\t\t}\n\t\tsort(v.begin(), v.end());\n\t\tbool flag = 1;\n\t\tfor(int i = 0, sz = v.size() - 1; i <= sz && flag;) {\n\t\t\tif(v[i].x == v[i].y) { flag = 0; break;}\n\t\t\tmerge(v[i].x, v[i].y);\n\t\t\tint j = i + 1;\n\t\t\twhile(j <= sz && v[j].val == v[i].val) {\n\t\t\t\tif(find(v[j].x) == find(v[j].y)) { flag = 0; break;}\n\t\t\t\tmerge(v[j].x, v[j].y), j ++;\n\t\t\t}\n\t\t\twhile(i < j) fa[v[i].x] = v[i].x, fa[v[i].y] = v[i].y, i ++;\n\t\t}\n\t\tputs(flag ? \"YES\" : \"NO\");\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1552310658,
        "uid": 70310,
        "name": "wuzhaoxin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF891C \u3010Envy\u3011"
    },
    {
        "content": "\u9898\u89e3\u533a\u5bf9\u4e8e $\\text{MST}$ \u6027\u8d28\u7684\u63cf\u8ff0\uff0c\u6709\u4e9b\u5947\u602a\u3002\n\n\u4ee5\u81f3\u4e8e\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/vmcvm8rm.png)\n\n\u54b3\u54b3\uff0c\u7a0d\u5fae\u6253\u4e2a\u5c94\uff08\n\n**\u8fd9\u9898\u786e\u5b9e\u662f\u4e2a\u6027\u8d28\u9898**\u3002\n\u6211\u4eec\u5148\u8003\u8651\u53ea\u6709\u4e00\u7ec4\u8be2\u95ee\u7684\u60c5\u51b5\u3002\u5c06\u8fd9\u7ec4\u8be2\u95ee\u4e2d\u7684\u8fb9\u6309\u8fb9\u6743\u6392\u5e8f\u3002\u5bf9\u4e8e\u5f53\u524d\u7684 $w_i$ \uff0c\u786e\u4fdd $< w_i$ \u8fb9\u6743\u7684\u8fb9\u5df2\u88ab\u52a0\u5165 $\\text{Kruskal}$ \u7684\u8d21\u732e\u4e2d\uff0c\u518d\u5c1d\u8bd5\u52a0\u5165\u5f53\u524d\u7684 $w_i$\u3002\u5982\u679c\u8be2\u95ee\u4e2d\u6709\u591a\u4e2a\u4e0e $w_i$ \u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u5219\u5168\u90e8\u8bd5\u56fe\u52a0\u5165\uff0c\u82e5\u5176\u4e2d\u4e00\u6761\u65e0\u6cd5\u52a0\u5165\u5219\u8bf4\u660e\u4e0d\u53ef\u884c\u3002\n\n\u8fd9\u6837\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u5462\uff1f**\u5bf9\u4e8e\u6240\u6709\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5176\u4e2d\u6bcf\u79cd\u6743\u503c\u7684\u8fb9\u7684\u6570\u91cf\u662f\u4e00\u5b9a\u7684**\u3002\u5982\u679c\u6211\u4eec\u52a0\u5165\u4e86 $<w_i$ \u7684\u6240\u6709\u8fb9\uff08**\u56e0\u4e3a\u8fd9\u4e9b\u8fb9\u4e2d\u7684\u4e00\u4e9b\u8fb9\u4e0d\u52a0\u5165\u8fdb\u6700\u5c0f\u751f\u6210\u6811\u53ea\u4f1a\u5f97\u5230\u66f4\u52a3\u89e3**\uff09\u800c\u4f7f\u8fb9\u6743\u4e0e $w_i$ \u76f8\u540c\u7684\u8fb9\u65e0\u6cd5\u52a0\u5165\uff0c\u5219\u8bf4\u660e\u8fd9\u6761\u8fb9\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c06\u8be2\u95ee\u4e2d\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u52a0\u5165\uff0c\u5176\u4e2d\u6709\u8fb9\u65e0\u6cd5\u52a0\u5165\uff0c\u5219\u8bf4\u660e\u4ed6\u4eec\u65e0\u6cd5\u540c\u65f6\u5b58\u5728\u4e8e\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\uff0c**\u5bf9\u4e8e\u4e00\u7ec4\u8be2\u95ee\u4e2d\uff0c\u4e0d\u540c\u8fb9\u6743\u4e4b\u95f4\u5176\u5b9e\u5e76\u4e0d\u5b58\u5728\u5f71\u54cd**\u3002\u56e0\u4e3a\u5bf9\u4e8e\u8be2\u95ee\u4e2d\u7684\u4efb\u610f\u4e24\u6761\u8fb9 $w_i,w_j$ \uff0c\u4e0d\u59a8\u8bbe $w_i$ \u7684\u8fb9\u6743 $<$ $w_j$ \u7684\u8fb9\u6743\uff0c\u90a3\u4e48\u6240\u6709 $<w_j$ \u8fb9\u6743\u7684\u8fb9\uff08\u5305\u62ec $w_i$\uff09\u5728\u6b64\u524d\u90fd\u5df2\u88ab\u52a0\u5165\u8fdb $\\text{Kruskal}$ \u7684\u8d21\u732e\u4e2d\u3002\n\n\u6839\u636e\u4e0a\u8ff0\u7ed3\u8bba\uff0c\u6211\u4eec\u5c06\u6bcf\u7ec4\u8be2\u95ee\u62c6\u6210\u82e5\u5e72\u7ec4\u8fb9\u6743\u76f8\u540c\u7684\u8be2\u95ee\u3002\u5bf9\u4e8e\u6bcf\u7ec4\u8fb9\u6743\u76f8\u540c\u7684\u8be2\u95ee\u5206\u522b\u5904\u7406\uff0c\u7136\u540e\u7edf\u8ba1\u5176\u5bf9\u6bcf\u7ec4\u8be2\u95ee\u7684\u8d21\u732e\u3002\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u5c06\u6bcf\u7ec4\u8fb9\u6743\u76f8\u540c\u7684\u8be2\u95ee\u6309\u8be2\u95ee\u4e2d\u7684\u8fb9\u6743\u6392\u5e8f\uff0c\u6309\u53ea\u5b58\u5728\u4e00\u6b21\u8be2\u95ee\u7684\u505a\u6cd5\u5904\u7406\u8fd9\u4e9b\u8be2\u95ee\uff0c\u9700\u8981\u7528\u4e0a\u4e00\u4e9b\u5e38\u89c4\u7684\u79bb\u7ebf\u6280\u5de7\uff08\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u52a0\u5165\u4e00\u7ec4\u8be2\u95ee\u4e2d\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u540e\u9700\u8981\u64a4\u56de\u8fd9\u7ec4\u8fb9\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u5bf9\u540e\u7eed\u8be2\u95ee\u4ea7\u751f\u5f71\u54cd\u3002\u8fd9\u9700\u8981\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u652f\u6301 **\u64a4\u9500\u4e0a\u4e00\u6b21\u64cd\u4f5c\u7684\u5e76\u67e5\u96c6**\uff1a\u7528\u6309\u79e9\u5408\u5e76\u5b9e\u73b0\u80fd\u591f\u4fdd\u7559\u6811\u7684\u7ed3\u6784\uff0c\u7528\u6808\u8bb0\u5f55\u4fee\u6539\u4fe1\u606f\uff0c\u66b4\u529b\u4fee\u6539\uff0c\u67e5\u8be2\uff0c\u64a4\u9500\u5373\u53ef\u3002\n\n\u4e0d\u77e5\u9053\u5565\u662f\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u7684\u53ef\u4ee5\u53bb\u6211 [$\\text{Blog}$](https://www.cnblogs.com/tommy0103/p/13749379.html) \u770b\u770b\uff0c~~\u4e0d\u8fc7\u90fd\u6765\u505a\u8fd9\u9898\u4e86\u5e94\u8be5\u4e0d\u4f1a\u4e0d\u77e5\u9053\u5427~~\uff08\n\n\u4ee3\u7801\u5199\u7684\u975e\u5e38\u751f\u8349\uff0c\u968f\u4fbf\u770b\u770b\u5c31\u597d\uff0c\u5624\u5624\u5624\uff08\n\n**Show the Code**\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nint top=0;\nstd::vector<int> ask[500005];\nint x[500005],y[500005],z[500005],fa[500005],size[500005],tmp[500005],res[500005];\nstruct edge {int x,y,val;} e[500005]; \nstruct state {int x,y,fx,fy;} st[500005];\ninline int read() {\n\tregister int x=0,f=1;register char s=getchar();\n\twhile(s>'9'||s<'0') {if(s=='-') f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9') {x=x*10+s-'0';s=getchar();}\n\treturn x*f;\n}\ninline void swap(int &x,int &y) {int tmp=y;y=x;x=tmp;}\ninline bool cmp1(const edge &x,const edge &y) {return x.val<y.val;}\ninline bool cmp2(const int &x,const int &y) {return z[x]<z[y];}\ninline bool cmp3(const std::vector<int> &x,const std::vector<int> &y) {return z[x[1]]<z[y[1]];}\ninline int find(int x) {while(x!=fa[x]) x=fa[x]; return x;}\ninline void merge(int x,int y) {\n\tint fx=find(x),fy=find(y);\n\tif(fx!=fy) {\n\t\tif(size[fx]>size[fy]) swap(fx,fy);\n\t\tst[++top]=(state){x,y,fx,fy};\n\t\tsize[fy]+=size[fx]; fa[fx]=fy;\n\t} \n}\nint main() {\n\tint n=read(),m=read(),num=0,cur=1,Q=0;\n\tfor(register int i=1;i<=n;++i) {fa[i]=i;size[i]=1;}\n\tfor(register int i=1;i<=m;++i) {\n\t\tx[i]=read();y[i]=read();z[i]=read();\n\t\te[i].x=x[i];e[i].y=y[i];e[i].val=z[i];\n\t}\n\tstd::sort(e+1,e+1+m,cmp1); Q=read();\n\tfor(register int t=1;t<=Q;++t) {\n\t\tint len=read(); res[t]=1;\n\t\tfor(register int i=1;i<=len;++i) tmp[i]=read();\n\t\tstd::sort(tmp+1,tmp+1+len,cmp2);\n\t\tfor(register int i=1;i<=len;++i) {\n\t\t\tif(z[tmp[i]]!=z[tmp[i-1]]) ask[++num].push_back(t);\n\t\t\task[num].push_back(tmp[i]);\n\t\t}\n\t}\n\tstd::sort(ask+1,ask+1+num,cmp3);\n\tfor(register int i=1;i<=num;++i) {\n\t\tint flag=1;\n\t\twhile(cur<=m&&e[cur].val<z[ask[i][1]]) {merge(e[cur].x,e[cur].y); ++cur;}\n\t\tfor(register int j=1;j<ask[i].size();++j) {int id=ask[i][j]; if(find(x[id])==find(y[id])) {flag=0;} else {merge(x[id],y[id]);}}\n\t\tfor(register int j=ask[i].size()-1;j>=1;--j) {\n\t\t\tint id=ask[i][j]; while(top>0&&st[top].x==x[id]&&st[top].y==y[id]) {fa[st[top].fx]=st[top].fx;size[st[top].fy]-=size[st[top].fx];--top;}\n\t\t} \n\t\tres[ask[i][0]]&=flag;\n\t}\n\tfor(register int t=1;t<=Q;++t) printf(\"%s\\n\",res[t]? \"YES\":\"NO\");\n\treturn 0;\n}\n```",
        "postTime": 1601426103,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF891C \u3010Envy\u3011"
    },
    {
        "content": "%\u524d\u9762\u7684\u865a\u6811\u5927\u4f6c\n\n\u7136\u800c\u5176\u5b9e\u8fd9\u9898\u5e76\u4e0d\u9700\u8981\u865a\u6811\uff0c\u53ea\u8981\u4e00\u4e2a\u5e76\u67e5\u96c6\u5c31\u597d\u4e86\n\n\u5b9e\u9645\u4e0a\u8fd8\u662f\u8003\u4e86\u5e76\u67e5\u96c6kruskal\u7b97\u6cd5\n\n\u8003\u8651\u5982\u679c\u53ea\u6709\u4e00\u7ec4\u8be2\u95ee\uff1a\u5047\u8bbe\u8fd9\u7ec4\u8be2\u95ee\u7684\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u5e76\u53bb\u91cd\u4e4b\u540e\u662f$w_1,w_2,w_3,...,w_k$\u3002\u6211\u4eec\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6765\u8003\u8651\uff0c\u5047\u8bbe\u73b0\u5728\u6b63\u5728\u8003\u8651\u7684\u8fb9\u6743\u662f$w_i$\uff0c\u9996\u5148\u7528\u539f\u56fe\u4e2d\u6240\u6709\u8fb9\u6743\u5c0f\u4e8e$w_i$\u7684\u8fb9\u5efa\u51fa\u4e00\u4e2a\u68ee\u6797\uff1b\u7136\u540e\u5c06\u8be2\u95ee\u4e2d\u8fb9\u6743\u4e3a$w_i$\u7684\u8fb9\u4f9d\u6b21\u5c1d\u8bd5\u52a0\u5165\u68ee\u6797\uff0c\u5728\u52a0\u5165\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u53d1\u73b0\u67d0\u6761\u8fb9\u52a0\u8fdb\u53bb\u4f1a\u6210\u73af\uff08\u8fd9\u4e2a\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u5224\u65ad\uff09\uff0c\u5c31\u8bf4\u660e\u8fd9\u7ec4\u8be2\u95ee\u4e0d\u884c\uff1b\u7136\u540e\u63a5\u7740\u770b\u4e0b\u4e00\u4e2a\u8fb9\u6743\u5373\u53ef\u3002\n\n\u5982\u679c\u6709\u591a\u7ec4\u8be2\u95ee\uff1a\u53ef\u4ee5\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8fb9\u6743$w_i$\uff0c\u4f9d\u6b21\u53bb\u68c0\u67e5\u6bcf\u4e2a\u8be2\u95ee\u91cc\u8fb9\u6743\u4e3a$w_i$\u7684\u8fb9\u5373\u53ef\u3002\u6ce8\u610f\uff0c\u68c0\u67e5\u5b8c\u67d0\u4e2a\u8be2\u95ee\u4e4b\u540e\u8981\u5c06\u7531\u8fd9\u4e2a\u8be2\u95ee\u5728\u5e76\u67e5\u96c6\u4e0a\u5f15\u8d77\u7684\u6539\u52a8\u5168\u90e8\u64a4\u9500\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ef\u64a4\u9500\u7684\u5e76\u67e5\u96c6\uff0c\u5c31\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\u800c\u5e94\u8be5\u6309\u79e9\u5408\u5e76/\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u5177\u4f53\u770b\u4ee3\u7801\n\n```cpp\n#include <cctype>\n#include <cstdio>\n#include <climits>\n#include <algorithm>\n#include <vector>\n#include <utility>\n\n#define rep(I, A, B) for (int I = (A); I <= (B); ++I)\n#define dwn(I, A, B) for (int I = (A); I >= (B); --I)\n#define erp(I, X) for (int I = head[X]; I; I = next[I])\n\ntemplate <typename T> inline void read(T& t) {\n    int f = 0, c = getchar(); t = 0;\n    while (!isdigit(c)) f |= c == '-', c = getchar();\n    while (isdigit(c)) t = t * 10 + c - 48, c = getchar();\n    if (f) t = -t;\n}\ntemplate <typename T, typename... Args>\ninline void read(T& t, Args&... args) {\n    read(t); read(args...); \n}\ntemplate <typename T> void write(T x) {\n    if (x < 0) x = -x, putchar('-');\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + 48);\n}\ntemplate <typename T> void writeln(T x) {\n    write(x);\n    puts(\"\");\n}\ntemplate <typename T> inline bool chkMin(T& x, const T& y) { return y < x ? (x = y, true) : false; }\ntemplate <typename T> inline bool chkMax(T& x, const T& y) { return x < y ? (x = y, true) : false; }\n\nconst int maxn = 5e5 + 207;\nstruct Edge {\n    int from, to, weight;\n};\nEdge e[maxn];\nstruct Query_edge {\n    int id, from, to, weight;\n    Query_edge(int i, int u, int v, int w)\n        : id(i), from(u), to(v), weight(w) {}\n    Query_edge() : id(0), from(0), to(0), weight(0) {}\n};\nstd::vector<Query_edge> qe[maxn];\nint fa[maxn], size[maxn];\nint ans[maxn];\nint n, m, q, mv;\n\nint stk[maxn], top;\n\ninline int findf(int x) {\n    while (fa[x] != x) x = fa[x];\n    return x;\n}\ninline bool merge(int x, int y) {\n    int fx = findf(x), fy = findf(y);\n    if (fx == fy) return 0;\n    if (size[fx] > size[fy]) std::swap(fx, fy);\n    fa[fx] = fy;\n    size[fy] += size[fx];\n    stk[++top] = fx;\n    return true;\n}\n\nint main() {\n    read(n, m);\n    rep(i, 1, m) {\n        read(e[i].from, e[i].to, e[i].weight);\n        chkMax(mv, e[i].weight);\n    }\n    read(q);\n    rep(i, 1, q) {\n        int k; read(k);\n        rep(j, 1, k) {\n            int x; read(x);\n            qe[e[x].weight].emplace_back(i, e[x].from, e[x].to, e[x].weight);\n        }\n    }\n    std::sort(e + 1, e + m + 1, [](const Edge &lhs, const Edge &rhs) -> bool { return lhs.weight < rhs.weight; });\n    rep(i, 1, n) fa[i] = i, size[i] = 1;\n    rep(i, 1, q) ans[i] = 1;\n    rep(i, 1, m) {\n        int val = e[i].weight;\n        top = 0;\n        // \u4f9d\u6b21\u68c0\u67e5\u8fb9\u6743\u4e3aval\u7684\u6bcf\u4e00\u6761\u8be2\u95ee\u4e2d\u6d89\u53ca\u7684\u8fb9\n        for (unsigned j = 0; j < qe[val].size(); ++j) {\n            if (!ans[qe[val][j].id]) continue;\n            if (j > 0 && qe[val][j].id != qe[val][j - 1].id) {\n                // \u8bf4\u660e\u8fdb\u5165\u4e86\u65b0\u7684\u4e00\u7ec4\u8be2\u95ee\uff0c\u8981\u64a4\u9500\u4e0a\u4e00\u7ec4\u8be2\u95ee\u7684\u5f71\u54cd\n                while (top) {\n                    int x = stk[top--];\n                    size[fa[x]] -= size[x];\n                    fa[x] = x;\n                }\n            }\n            if (!merge(qe[val][j].from, qe[val][j].to))\n                ans[qe[val][j].id] = 0;\n        }\n        // \u8fb9\u6743\u4e3aval\u7684\u8be2\u95ee\u8fb9\u5168\u90e8\u68c0\u67e5\u5b8c\u6bd5\uff0c\u5c06\u539f\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\u6743\u4e3aval\u7684\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\n        while (e[i].weight == val) {\n            merge(e[i].from, e[i].to);\n            ++i;\n        }\n        if (e[i].weight != val) --i;\n    }\n    rep(i, 1, q) puts(ans[i] ? \"YES\" : \"NO\");\n    return 0;\n}\n```\n\n\u5982\u679c\u4f60\u6bd4\u8f83\u61d2\uff0c\u4e0d\u60f3\u5199\u8fd9\u4e2a\u5e26\u64a4\u9500\u7684\u5e76\u67e5\u96c6\uff0cLCT\u5f53\u7136\u4e5f\u662f\u53ef\u4ee5\u7684\uff01QAQ",
        "postTime": 1543661727,
        "uid": 72071,
        "name": "GKxx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF891C \u3010Envy\u3011"
    },
    {
        "content": "## $\\text{CF891C}$\n\n### \u5e9f\u8bdd\uff1a\n\n\u611f\u8c22 [plate_let](https://www.luogu.com.cn/user/177524) \u5946\u4f6c\uff0c\u5728\u5979\u7684\u5e2e\u52a9\u4e0b\uff0c\u5bf9 $\\text{MST}$ \u7684\u7406\u89e3\u6df1\u5165\u4e86\u4e0d\u5c11\u3002\n\n### \u601d\u8def\uff1a\n\n\u9996\u5148\uff0c\u4e0d\u540c\u6743\u503c\u7684\u8fb9\u76f8\u4e92\u4e4b\u95f4\u662f\u4e0d\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u6743\u503c\u5206\u5f00\u8003\u8651\uff0c\u8fd9\u4e2a\u7ed3\u8bba\u5c06\u5728\u4e0b\u6587\u8bc1\u660e\u3002\u7136\u540e\uff0c\u6bcf\u6b21\u9009\u5b8c\u5c0f\u4e8e\u7b49\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u503c\u7684\u6240\u6709\u8fb9\u540e\uff0c\u56fe\u7684\u8fde\u901a\u6027\u662f\u56fa\u5b9a\u7684\uff08\u5f53\u7136\uff0c\u9009\u5b9a\u7684\u8fb9\u9700\u8981\u6784\u6210\u4e00\u9897 $\\text{MST}$ \uff09\uff0c\u8fd9\u4e2a\u7ed3\u8bba\u4e5f\u5c06\u5728\u4e0b\u9762\u8bc1\u660e\u3002\n\n\u6709\u4e86\u8fd9\u4e24\u4e2a\u7ed3\u8bba\uff0c\u95ee\u9898\u5c31\u53d8\u5f97\u7b80\u5355\u8d77\u6765\u4e86\uff0c\u6211\u4eec\u5bf9\u8be2\u95ee\u7684\u6240\u6709\u8fb9\u79bb\u7ebf\uff0c\u6309\u7167\u6743\u503c\u548c\u8be2\u95ee\u7f16\u53f7\u6392\u5e8f\uff0c\u5176\u4e2d\u6743\u503c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u3002\n\n\u8dd1 $\\text{Kruscal}$ \u679a\u4e3e\u6bcf\u79cd\u6743\u503c\u7684\u8fb9\u4e4b\u524d\u5148\u8003\u8651\u8be2\u95ee\u7684\u8fb9\uff0c\u770b\u770b\u8be2\u95ee\u7684\u8fb9\u52a0\u5165\u548c\u662f\u5426\u4f1a\u6210\u73af\uff0c\u8fd9\u91cc\u9700\u8981\u4e00\u4e2a\u53ef\u64a4\u9500\u7684\u5e76\u67e5\u96c6\uff0c\u56e0\u4e3a\u4e0d\u540c\u8be2\u95ee\u95f4\u72ec\u7acb\uff0c\u9700\u8981\u6392\u9664\u4e0a\u4e00\u4e2a\u8be2\u95ee\u7684\u5f71\u54cd\u3002\u7531\u4e8e\u65e0\u8bba\u600e\u4e48\u9009\uff0c\u8fde\u901a\u6027\u90fd\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5927\u53ef\u76f4\u63a5\u4f7f\u7528 $\\text{Kruscal}$ \u7b97\u6cd5\u8fdb\u884c\u65f6\u7684\u5e76\u67e5\u96c6\u3002\u5982\u679c\u6210\u73af\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8be2\u95ee\u7684\u56de\u7b54\u5c31\u662f $\\text{NO}$\u3002\n\n\u6211\u4eec\u63a5\u4e0b\u6765\u8bc1\u660e\u63d0\u51fa\u7684\u4e24\u4e2a\u7ed3\u8bba\u3002\n\n\u7ed3\u8bba $\\text{2}$\uff08\u6bcf\u6b21\u9009\u5b8c\u5c0f\u4e8e\u7b49\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u503c\u7684\u6240\u6709\u8fb9\u540e\uff0c\u56fe\u7684\u8fde\u901a\u6027\u662f\u56fa\u5b9a\u7684\uff09\uff1a\n\n\u5047\u8bbe\u73b0\u5728\u8003\u8651\u6700\u5c0f\u7684\u6743\u503c $x$ \uff0c\u5982\u679c\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u8fde\u901a\u6027 $G_1,G_2$ \u90a3\u4e48\u627e\u51fa\u5176\u4e2d\u7684\u4e0d\u540c\uff0c\u6211\u4eec\u5047\u8bbe\u8fd9\u4e2a\u4e0d\u540c\u662f\u8fd9\u6837\u7684\u5f62\u5f0f\uff1a\u5728 $G_1$ \u4e2d $u,v$  \u8054\u901a\uff0c\u5728 $G_2$ \u4e2d\u5219\u4e0d\u7136\uff0c\u90a3\u4e48\u5c06 $G_2$ \u4e2d\u7684\u8fb9\u8bd5\u56fe\u52a0\u5165 $G_1$ \u5219\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u52a0\u5165\uff0c\u7531\u4e8e\u6709\u65b0\u7684\u8fb9\u52a0\u5165\uff0c\u6240\u4ee5\u8fd8\u6ca1\u6709\u9009\u5b8c\u8fb9\uff0c\u6240\u4ee5\u8fde\u901a\u6027\u76f8\u540c\u3002\n\n\u5c06\u6240\u6709\u8054\u901a\u5757\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u7531\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c\u7ed3\u8bba\u6210\u7acb\u3002\n\n\u7ed3\u8bba $\\text{1}$ \uff08\u4e0d\u540c\u6743\u503c\u7684\u8fb9\u76f8\u4e92\u4e4b\u95f4\u662f\u4e0d\u5f71\u54cd\uff09\n\n\u6709\u4e86\u7ed3\u8bba $\\text{2}$\uff0c\u5b83\u662f\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u9009\u5230\u56fa\u5b9a\u6743\u503c\u540e\u8fde\u901a\u6027\u76f8\u540c\uff0c\u6240\u4ee5\u4e0d\u540c\u6743\u503c\u7684\u8fb9\u4e0d\u4f1a\u76f8\u4e92\u5f71\u54cd\u3002\n\n### \u4ee3\u7801\u548c\u7ec6\u8282\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#include<queue>\n#include<cmath>\n#include<string>\n#include<cstring>\n#include<ctime>\n#include<vector>\n#define next nxt\n#define itn int\n#define y1 y3647\n#define LL long long\nusing namespace std;\ninline void read(int &x)\n{\n\tx=0;\n\tint f=1;\n\tchar ch=getchar();\n\twhile((ch<'0'||ch>'9')&&ch!='-')\n\tch=getchar();\n\tif(ch=='-')\n\t{\n\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\tx*=f;\n}\nint i,j,m,n,s,t,k[2];\nconst int N=1e6+10;\nint fa[N],size[N],p[N],top;\nstruct fu{\n\tint v,val,rk,u;\n}a[2][N];\nstruct opr{\n\tint fa,size,u,v;\n}st[N];\nvoid work(int aa,int bb,int cc,int op)\n{\n\ta[op][++k[op]].v=bb;\n\ta[op][k[op]].val=cc;\n\ta[op][k[op]].rk=i;\n\ta[op][k[op]].u=aa;\n}\nint find(int x)\n{\n\treturn fa[x]==x?x:find(fa[x]);\n}\nvoid put(int u,int v,int c)\n{\n\tif(size[u]>size[v])\n\tswap(u,v);\n\tif(c==1)\n\t{\n\t\tst[++top].u=u;\n\t\tst[top].fa=fa[u];\n\t\tst[top].v=v;\n\t\tst[top].size=size[v];\n\t}\n\tfa[u]=v;\n\tsize[v]+=size[u];\n}\nvoid cancel()\n{\n\twhile(top)\n\t{\n\t\tfa[st[top].u]=st[top].fa;\n\t\tsize[st[top].v]=st[top].size;\n\t\ttop--;\n\t}\n}\nbool cmp(fu aa,fu bb)\n{\n\tif(aa.val!=bb.val)\n\treturn aa.val<bb.val;\n\treturn aa.rk<bb.rk;\n}\nvoid kru()\n{\n\tfor(i=1;i<=n;i++)\n\tfa[i]=i,size[i]=1;\n\tint now=1;\n\tfor(i=1;i<=m;i++)\n\t{\n\t\twhile(a[1][now].val==a[0][i].val)\n\t\t{\n\t\t\tint start=now;\n\t\t\twhile(a[1][now].rk==a[1][start].rk&&a[1][now].val==a[0][i].val)//\u4e00\u5b9a\u8bb0\u5f97\u5224\u6389\u7b2c\u4e8c\u4e2a\u6761\u4ef6\n\t\t\t//\u4e0d\u7136\u6211\u4fdd\u8bc1\u4f60WA 48\n            {\n\t\t\t\tint u=find(a[1][now].u),v=find(a[1][now].v);\n\t\t\t\tnow++;\n\t\t\t\tif(u==v)\n\t\t\t\t{\n\t\t\t\t\tp[a[1][now-1].rk]=1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tput(u,v,1);\n\t\t\t}\n\t\t\tcancel();\n\t\t}\n\t\tint u=find(a[0][i].u),v=find(a[0][i].v);\n\t\tif(u==v)\n\t\tcontinue;\n\t\tput(u,v,0);//\u8fd9\u91cc\u4e0d\u7528\u64a4\u9500\n\t}\n}\nsigned main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\t//freopen(\".ans\",\"w\",stdout);\n\tint q;\n\tread(n),read(m);\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tread(x),read(y),read(z);\n\t\twork(x,y,z,0);\n\t}\n\tread(q);\n\tint all=0;\n\tfor(i=1;i<=q;i++)\n\t{\n\t\tread(s);\n\t\tfor(j=1;j<=s;j++)\n\t\t{\n\t\t\tint x;\n\t\t\tread(x);\n\t\t\twork(a[0][x].u,a[0][x].v,a[0][x].val,1);\n\t\t}\n\t\tall+=s;\n\t}\n\tsort(a[0]+1,a[0]+m+1,cmp);\n\tsort(a[1]+1,a[1]+all+1,cmp);//\u5bf9\u8fb9\u6392\u5e8f\n\tkru();\n\tfor(i=1;i<=q;i++)\n\tputs(p[i]?\"NO\":\"YES\");\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1618027982,
        "uid": 177535,
        "name": "CDFLS_mao_zx",
        "ccfLevel": 7,
        "title": "CF891C\u9898\u89e3"
    },
    {
        "content": "### P.S.\n![](https://cdn.luogu.com.cn/upload/image_hosting/rmtulew0.png)  \n\u7136\u540e\u5c31\u6765\u505a\u8fd9\u9898\u4e86\u3002  \n\u4e00\u9053 2300 \u5199\u4e86\u6211\u4e00\u4e2a\u665a\u4e0a\uff0c\u771f\u662f\u81ea\u95ed\u81ea\u95ed\u3002  \n\u767d\u5929\u60f3\u4e86\u4e00\u5929\uff0c\u60f3\u4e86\u4e24\u4e2a\u5047\u505a\u6cd5\uff0c\u665a\u4e0a\u4ece 9:00 \u5199\u5230 10:20\u3002  \n### Problem.\n\u591a\u6b21\u8be2\u95ee\uff0c\u67e5\u8be2\u51e0\u6761\u8fb9\u662f\u5426\u53ef\u80fd\u540c\u65f6\u51fa\u73b0\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002  \n### Solution.\n#### Fake Solution1.\n\u6839\u636e\u73af\u8def\u6027\u8d28\uff0c\u4e00\u68f5\u6811\u52a0\u4e0a\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u5207\u6389\u8fd9\u6761\u8fb9\u4e24\u4e2a\u70b9\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u4e00\u6761\u8fb9\u540e\uff0c\u5b83\u4ecd\u7136\u662f\u6811\u3002  \n\u6240\u4ee5\u6211\u4eec\u968f\u4fbf\u627e\u51fa\u4e00\u68f5\u751f\u6210\u6811\uff0c\u518d\u7528 LCT \u7ef4\u62a4\u94fe\u4e0a\u6700\u5c0f\u503c\uff0c\u6bcf\u7ec4\u8be2\u95ee\u76f4\u63a5\u66b4\u529b\u65ad\u8fb9\u5c31\u597d\u4e86\u3002  \n**Fake \u539f\u56e0\uff1a** \u81f3\u5c11\u7b14\u8005\u4e0d\u4f1a\u7528 LCT \u652f\u6301\u94fe\u4e0a\u65ad\u6389\u6700\u5c0f\u8fb9\u3002  \n#### Fake Solution2.\n\u5bf9\u4e8e\u6bcf\u7ec4\u8be2\u95ee\uff0c\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\u3002  \n\u7136\u540e\u5bf9\u4e8e\u5f53\u524d\u52a0\u5165\u7684\u8fb9\u6211\u4eec\u4f18\u5148\u53d6\u5b83\uff0c\u5982\u679c\u5df2\u7ecf\u8054\u901a\u4e86\u5c31\u65e0\u89e3\u3002  \n**Fake \u539f\u56e0\uff1a** \u4e25\u683c\u5c0f\u4e8e\u5f53\u524d\u9700\u8981\u5224\u65ad\u8fb9\u6743\u7684\u8fb9\u65e0\u6cd5\u5904\u7406\u3002  \n#### Real Solution.\n\u6839\u636e **Fake Solution2.**\uff0c\u6b63\u89e3\u5df2\u7ecf\u547c\u4e4b\u6b32\u51fa\u4e86\u3002  \n\u9996\u5148\uff0c\u67d0\u7ec4\u8be2\u95ee\uff0c\u80af\u5b9a\u53ef\u4ee5\u628a\u5b83\u5206\u5f00\u6210\u4e92\u4e0d\u5e72\u6270\u7684\u4e0d\u540c\u8be2\u95ee\u3002  \n\u56e0\u4e3a\u5982\u679c\u8fb9\u6743\u4e0d\u540c\uff0c\u90a3\u4e48\u80af\u5b9a\u4e0d\u4f1a\u4e92\u76f8\u5e72\u6270\uff0c\u4f60\u80af\u5b9a\u4f1a\u5148\u628a\u6240\u6709\u5c0f\u7684\u8fb9\u5168\u90e8\u5904\u7406\u3002  \n\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5bf9\u503c\u57df\u5904\u7406\uff0c\u8be2\u95ee\u79bb\u7ebf\u3002  \n\u7136\u540e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6bcf\u6b21\u8be2\u95ee\uff0c\u7528\u4e00\u4e2a DSU \u7ef4\u62a4\u5c31\u597d\u4e86\u3002  \n\n\u4e0d\u8fc7\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u56e0\u4e3a\u8be2\u95ee\u4e4b\u95f4\u4e92\u76f8\u72ec\u7acb\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u8fd9\u4e2a DSU \u53ef\u64a4\u9500\u5c31\u7ed3\u675f\u4e86\u3002  \n\n### Coding.\n\u4ee3\u7801\u5e94\u8be5\u8fd8\u662f\u633a\u6e05\u6670\u6613\u61c2\u7684qwq\n```cpp\n//\u662f\u554a\u2026\u2026\u4f60\u5c31\u662f\u90a3\u53ea\u9b3c\u4e86\u2026\u2026\u6240\u4ee5\u88ab\u4f60\u78b0\u5230\u4ee5\u540e\uff0c\u5c31\u8f6e\u5230\u6211\u53d8\u6210\u9b3c\u4e86\n#include<bits/stdc++.h>\nusing namespace std;typedef long long ll;\ntemplate<typename T>inline void read(T &x)\n{\n\tx=0;char c=getchar(),f=0;\n\tfor(;c<48||c>57;c=getchar()) if(!(c^45)) f=1;\n\tfor(;c>=48&&c<=57;c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tf?x=-x:0;\n}\nint n,m,Q,fa[500005],de[500005],nid[500005],a[500005];char rs[500005];\nstruct edge{int x,y,w,id;char tg;}e[500005];int ut,tn[500005];\nstruct node{int id;vector<int>v;};vector<node>q[500005];\nstruct dsub{int x,y,de;}st[500005];int tp;\ninline char cmp(edge a,edge b) {return a.w<b.w;}\ninline char cpp(int a,int b) {return e[a].w<e[b].w;}\ninline int getf(int x) {return fa[x]==x?x:getf(fa[x]);}\ninline void mrg(int x,int y)\n{\n\tx=getf(x),y=getf(y);if(x==y) return;else if(de[x]>de[y]) swap(x,y);\n\tst[++tp]=(dsub){x,y,de[y]},fa[x]=y,de[y]+=de[x]==de[y];\n}\ninline void pop() {fa[st[tp].x]=st[tp].x,de[st[tp].y]=st[tp].de,tp--;}\nint main()\n{\n\tread(n),read(m);for(int i=1;i<=m;i++) read(e[i].x),read(e[i].y),read(e[i].w),e[i].id=i;\n\tread(Q),sort(e+1,e+m+1,cmp);for(int i=1;i<=n;i++) fa[i]=i;\n\tfor(int i=1;i<=m;i++) nid[e[i].id]=i,tn[++ut]=e[i].w;\n\tsort(tn+1,tn+ut+1),ut=unique(tn+1,tn+ut+1)-tn-1;\n\tfor(int i=1;i<=m;i++) e[i].w=lower_bound(tn+1,tn+ut+1,e[i].w)-tn;\n\tfor(int K,xtw=1;xtw<=Q;xtw++)\n\t{\n\t\tread(K);for(int i=1;i<=K;i++) read(a[i]),a[i]=nid[a[i]];\n\t\tvector<int>v;sort(a+1,a+K+1,cpp);\n\t\t//for(int i=1;i<=n;i++) printf(\"%d%c\",a[i],i==n?'\\n':' ');\n\t\tfor(int l=1,r=l;l<=K;l=++r)\n\t\t{\n\t\t\twhile(e[a[l]].w==e[a[r+1]].w) r++;\n\t\t\tvector<int>v;for(int i=l;i<=r&&i<=K;i++) v.push_back(a[i]);\n\t\t\tq[e[a[l]].w].push_back((node){xtw,v});\n\t\t}\n\t}\n\t//puts(\"------------\");for(int i=1;i<=m;i++) printf(\"%d %d %d\\n\",e[i].x,e[i].y,e[i].w);\n\tfor(int i=1,j=1;j<=ut;j++)\n\t{\n\t\t//printf(\"nwj : %d\\n\",j);\n\t\t//for(int i=1;i<=n;i++) printf(\"%d%c\",getf(i),i==n?'\\n':' ');\n\t\tint qwq=tp;for(auto &nw:q[j])\n\t\t{\n\t\t\tfor(auto &x:nw.v) if(getf(e[x].x)==getf(e[x].y)) rs[nw.id]=1;else mrg(e[x].x,e[x].y);\n\t\t\t//printf(\"%d : \",nw.id);{for(auto x:nw.v) printf(\"%d \",x);}putchar('\\n');\n\t\t\twhile(tp>qwq) pop();\n\t\t}\n\t\tfor(;e[i].w==j;i++) if(getf(e[i].x)!=getf(e[i].y)) mrg(e[i].x,e[i].y);\n\t}\n\tfor(int i=1;i<=Q;i++) if(rs[i]) puts(\"NO\");else puts(\"YES\");\n\treturn 0;\n}\n```",
        "postTime": 1615991495,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "CF891C Envy\uff08\u9898\u89e3\uff09"
    },
    {
        "content": "\u5c45\u7136\u6ca1\u770b\u9898\u89e3\u60f3\u51fa\u6765\u4e86\u8fd9\u9053\u795e\u9898\uff0c\u975e\u5e38\u5f00\u5fc3\u3002\n\n\u9996\u5148\uff0c\u5224\u65ad$k$\u6761\u8fb9\u662f\u4e0d\u662f\u80fd\u540c\u65f6\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u5b9e\u9645\u4e0a\u53ea\u8981\u6c42\u51fa\u5305\u542b\u8fd9\u4e9b\u8fb9\u7684\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\u7684\u6743\u503c\uff0c\u518d\u548c\u6700\u5c0f\u751f\u6210\u6811\u6bd4\u5bf9\u5373\u53ef\u3002\n\n\u600e\u4e48\u6c42\u5462\uff1f\u9996\u5148\u628a$k$\u6761\u8fb9\u5148\u8fde\u4e0a\uff0c\u5f62\u6210\u4e00\u4e9b\u8fde\u901a\u5757\uff0c\u6ce8\u610f\u5230\u4e00\u4e2a\u6027\u8d28\uff1a\u8981\u8fde\u901a\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u4f7f\u7528\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\u8bc1\u660e\u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\uff0c\u5982\u679c\u7528\u7684\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u800c\u4e14\u66f4\u4f18\uff0c\u90a3\u4e48\u8fd9\u4e2a\u201c\u6700\u5c0f\u751f\u6210\u6811\u201d\u5c31\u4e0d\u662f\u6700\u5c0f\u7684\u3002\u8fd9\u65f6\u6211\u4eec\u60f3\u5230\u5148\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u7136\u540e\u518d\u66b4\u529b\u505a\u4e00\u6b21\u6700\u5c0f\u751f\u6210\u6811\u3002\u8fd9\u6837\u7b97\u51fa\u7684\u7ed3\u679c\u80af\u5b9a\u662f\u5bf9\u7684\uff0c\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u7206\u70b8\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4f18\u5316\u3002\n\n\u6ce8\u610f\u5230\u5df2\u7ecf\u548c\u5176\u4ed6\u70b9\u8fde\u901a\u7684\u70b9\u81f3\u591a\u6709$2k$\u4e2a\uff0c\u6211\u4eec\u60f3\u5230\u4f7f\u7528\u865a\u6811\u3002\u8fd9\u65f6\u6211\u4eec\u53d1\u73b0\uff0c\u865a\u6811\u5916\u7684\u90a3\u4e9b\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u662f\u4e00\u5b9a\u8981\u8fde\u7684\uff0c\u4e0d\u7136\u5c31\u4e0d\u8fde\u901a\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8003\u8651\u865a\u6811\u5185\u7684\u8fde\u901a\u6027\u3002\u865a\u6811\u4e0a\u4e00\u6761\u8fb9\u5c31\u4ee3\u8868\u539f\u56fe\u4e2d\u7684\u4e00\u6761\u8def\u5f84\uff0c\u4e14\u8fd9\u4e9b\u8def\u5f84\u4e0a\u7684\u70b9\u90fd\u6ca1\u6709\u548c\u5176\u5b83\u70b9\u8fde\u901a\u3002\u6211\u4eec\u5c1d\u8bd5\u628a\u8fd9\u6761\u8def\u5f84\u7f29\u6210\u4e00\u6761\u8fb9\u3002\u9996\u5148\uff0c\u8def\u5f84\u5185\u7684\u70b9\u8981\u8fde\u901a\uff0c\u90a3\u4e48\u80af\u5b9a\u662f\u4ece\u8def\u5f84\u7684\u4e24\u7aef\u8fde\u6811\u8fb9\uff0c\u76f4\u5230\u4e2d\u95f4\u8fd8\u6709\u4e00\u6761\u8fb9\u6ca1\u8fde\u4e0a\u4e3a\u6b62\u3002\u8fd9\u65f6\uff0c\u5982\u679c\u6211\u4eec\u8981\u6c42\u8def\u5f84\u7684\u4e24\u7aef\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8d2a\u5fc3\u5730\u9009\u62e9\u6700\u5927\u7684\u8fb9\u5272\u6389\u5373\u53ef\uff0c\u8fd9\u6761\u6700\u5927\u8fb9\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u500d\u589e\u627e\u5230\u3002\u4e8e\u662f\u8981\u6c42\u8def\u5f84\u4e24\u7aef\u8fde\u901a\u5c31\u76f8\u5f53\u4e8e\u5728\u4e0d\u8fde\u901a\u7684\u57fa\u7840\u4e0a\uff0c\u8fde\u901a\u4e86\u90a3\u6761\u6700\u5927\u7684\u8fb9\uff0c\u56e0\u6b64\u6211\u4eec\u53d1\u73b0\u53ea\u6709\u8fd9\u6761\u6700\u5927\u7684\u8fb9\u548c\u8fd9\u6761\u8def\u5f84\u7684\u6700\u4f18\u89e3\u6709\u5173\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u628a\u4e00\u6761\u8def\u5f84\u7f29\u6210\u4e86\u4e00\u6761\u8fb9\u3002\u4e8e\u662f\u865a\u6811\u4e2d\u5c31\u53ea\u6709$O(k)$\u6761\u8fb9\u4e86\uff0c\u8fd9\u65f6\u5019\u518d\u505a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(k\\log k)$\uff0c\u56e0\u6b64\u603b\u7684\u590d\u6742\u5ea6\u4e3a$O(\\sum k\\log \\sum k)$\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n**\u4ee3\u7801\uff1a**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint n,m,q,first[500010]={0},tot=0,totke,pos[500010],tim=0;\nint ma[500010],mb[500010],pre[500010][21]={0},dep[500010]={0};\nint p[2000010],totp,pe[500010],tote,fa[500010];\nint st[500010],top;\nll mw[500010],mx[500010][21]={0},dis[500010]={0};\nstruct kruskaledge\n{\n\tint a,b;\n\tll w;\n}me[500010];\nstruct treeedge\n{\n\tint v,next;\n\tll w;\n}e[1000010];\n\nbool cmp(kruskaledge a,kruskaledge b)\n{\n\treturn a.w<b.w;\n}\n\nvoid insert(int a,int b,ll w)\n{\n\te[++tot].v=b;\n\te[tot].next=first[a];\n\te[tot].w=w;\n\tfirst[a]=tot;\n}\n\nint find(int x)\n{\n\tint r=x,i=x,j;\n\twhile(r!=fa[r]) r=fa[r];\n\twhile(i!=r) j=fa[i],fa[i]=r,i=j;\n\treturn r;\n}\n\nvoid merge(int x,int y)\n{\n\tint fx=find(x),fy=find(y);\n\tfa[fx]=fy;\n}\n\nll kruskal(ll init,bool type)\n{\n\tll tot=init;\n\tsort(me+1,me+totke+1,cmp);\n\tfor(int i=1;i<=totke;i++)\n\t\tif (find(me[i].a)!=find(me[i].b))\n\t\t{\n\t\t\ttot+=me[i].w;\n\t\t\tmerge(me[i].a,me[i].b);\n\t\t\tif (type)\n\t\t\t{\n\t\t\t\tinsert(me[i].a,me[i].b,me[i].w);\n\t\t\t\tinsert(me[i].b,me[i].a,me[i].w);\n\t\t\t}\n\t\t}\n\treturn tot;\n}\n\nvoid dfs(int v)\n{\n\tpos[v]=++tim;\n\tfor(int i=first[v];i;i=e[i].next)\n\t\tif (e[i].v!=pre[v][0])\n\t\t{\n\t\t\tpre[e[i].v][0]=v;\n\t\t\tdep[e[i].v]=dep[v]+1;\n\t\t\tmx[e[i].v][0]=e[i].w;\n\t\t\tdis[e[i].v]=dis[v]+e[i].w;\n\t\t\tdfs(e[i].v);\n\t\t}\n}\n\nbool cmpp(int a,int b)\n{\n\treturn pos[a]<pos[b];\n}\n\nint lca(int a,int b)\n{\n\tif (dep[a]<dep[b]) swap(a,b);\n\tfor(int i=20;i>=0;i--)\n\t\tif (dep[pre[a][i]]>=dep[b])\n\t\t\ta=pre[a][i];\n\tif (a==b) return a;\n\tfor(int i=20;i>=0;i--)\n\t\tif (pre[a][i]!=pre[b][i])\n\t\t\ta=pre[a][i],b=pre[b][i];\n\treturn pre[a][0];\n}\n\nll findmx(int a,int b)\n{\n\tll ans=0;\n\tfor(int i=20;i>=0;i--)\n\t\tif (dep[pre[a][i]]>=dep[b])\n\t\t{\n\t\t\tans=max(ans,mx[a][i]);\n\t\t\ta=pre[a][i];\n\t\t}\n\treturn ans;\n}\n\nvoid solve()\n{\n\tint newp=totp;\n\tsort(p+1,p+totp+1,cmpp);\n\tfor(int i=1;i<totp;i++)\n\t\tp[++newp]=lca(p[i],p[i+1]);\n\ttotp=newp;\n\tsort(p+1,p+totp+1,cmpp);\n\tnewp=0;\n\tfor(int i=1;i<=totp;i++)\n\t\tif (i==1||p[i]!=p[newp])\n\t\t\tp[++newp]=p[i];\n\ttotp=newp;\n\t\n\tll basis=0,bestval=0;\n\tfor(int i=1;i<=totp;i++)\n\t\tfa[p[i]]=p[i];\n\tfor(int i=1;i<=tote;i++)\n\t{\n\t\tif (find(ma[pe[i]])==find(mb[pe[i]]))\n\t\t{\n\t\t\tprintf(\"NO\\n\");\n\t\t\treturn;\n\t\t}\n\t\tmerge(ma[pe[i]],mb[pe[i]]);\n\t\tbasis+=mw[pe[i]];\n\t}\n\t\n\ttop=0;\n\ttotke=0;\n\tfor(int i=1;i<=totp;i++)\n\t{\n\t\twhile(top&&lca(st[top],p[i])!=st[top]) top--;\n\t\tst[++top]=p[i];\n\t\tif (top>1)\n\t\t{\n\t\t\tll sum,mx;\n\t\t\tsum=dis[st[top]]-dis[st[top-1]];\n\t\t\tmx=findmx(st[top],st[top-1]);\n\t\t\tbestval+=sum;\n\t\t\tbasis+=sum-mx;\n\t\t\tif (find(st[top])!=find(st[top-1]))\n\t\t\t{\n\t\t\t\tme[++totke].a=st[top];\n\t\t\t\tme[totke].b=st[top-1];\n\t\t\t\tme[totke].w=mx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (kruskal(basis,0)==bestval) printf(\"YES\\n\");\n\telse printf(\"NO\\n\");\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%lld\",&ma[i],&mb[i],&mw[i]);\n\t\tme[i].a=ma[i],me[i].b=mb[i],me[i].w=mw[i];\n\t}\n\t\n\ttotp=n;\n\ttotke=m;\n\tfor(int i=1;i<=totp;i++)\n\t\tfa[i]=i;\n\tkruskal(0,1);\n\t\n\tdep[1]=1;\n\tdfs(1);\n\tfor(int i=1;i<=20;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tpre[j][i]=pre[pre[j][i-1]][i-1];\n\t\t\tmx[j][i]=max(mx[j][i-1],mx[pre[j][i-1]][i-1]);\n\t\t}\n\t\n\tscanf(\"%d\",&q);\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tscanf(\"%d\",&tote);\n\t\ttotp=0;\n\t\tfor(int i=1;i<=tote;i++)\n\t\t{\n\t\t\tscanf(\"%d\",&pe[i]);\n\t\t\tp[++totp]=ma[pe[i]],p[++totp]=mb[pe[i]];\n\t\t}\n\t\tsolve();\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1539765428,
        "uid": 13447,
        "name": "Maxwei_wzj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF891C \u3010Envy\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/CF891C)\n\n\u70b9\u6570\uff1a2300\n\nupd 2022.08.03\uff1a\u4fee\u6b63\u4e86\u4e00\u5904\u7b14\u8bef\u3002\n\n#### \u524d\u7f6e\u77e5\u8bc6\n\n\u6700\u5c0f\u751f\u6210\u6811\uff08kruskal\uff09\n\n#### \u9898\u76ee\u5206\u6790\n\n\u5f88\u660e\u663e\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u7684 $n,m,q,\\sum k_i\\leq 5\\times10^5$\uff0c\u5bf9\u4e8e\u6240\u6709\u67e5\u8be2\u9700\u8981\u7528 $O(k\\log n)$ \u6216\u8005 $O(k\\log k)$ \u5de6\u53f3\u7684\u590d\u6742\u5ea6\u5b8c\u6210\u3002\n\n\u9996\u5148\uff0c\u9009\u51fa\u7684\u4e00\u4e9b\u8fb9\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u8bdd\u6709\u4e24\u79cd\u53ef\u80fd\u6027\uff1a\n\n1.\u6743\u503c\u4e0d\u662f\u6700\u5c0f\n\n2.\u56fe\u4e0d\u8fde\u901a\u6216\u8005\u6709\u73af\n\n\u8003\u8651\u66b4\u529b\u600e\u4e48\u5904\u7406\uff0c\u4e5f\u5c31\u662f $O(q(m+k)\\log n)$ \u7684\u7b97\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9 $k$ \u6761\u8fb9\u76f4\u63a5\u52a0\u5230\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u7136\u540e\u76f4\u63a5\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u5224\u65ad\u662f\u5426\u6709\u73af\u5373\u53ef\u3002\n\n\u8003\u8651\u4f18\u5316\u8fd9\u4e2a\u65b9\u6cd5\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u6bcf\u6b21\u4f1a\u91cd\u590d\u8003\u8651\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u53ea\u8003\u8651\u6bcf\u6b21\u67e5\u8be2\u7684\u8fb9\u7684\u8bdd\u76f4\u63a5\u5c31\u662f $O(k\\log n)$ \u7684\u3002\n\n##### \u5f15\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e24\u4e2a\u6027\u8d28\uff1a\n\n\uff08\u9ed8\u8ba4\u6309\u7167 kruskal \u7684\u52a0\u8fb9\u65b9\u5f0f\u4e14\u8bfb\u8005\u4e86\u89e3\u5176\u6b63\u786e\u6027\uff09\n\n\u4e00\u3001\u5bf9\u4e8e\u4efb\u610f\u6b63\u786e\u52a0\u8fb9\u65b9\u6848\uff0c\u52a0\u5b8c\u5c0f\u4e8e\u67d0\u6743\u503c $w$ \u7684\u6240\u6709\u8fb9\u540e\u56fe\u7684\u8fde\u901a\u6027\u662f\u4e00\u6837\u7684\u3002\u8bc1\u660e\u5982\u4e0b\uff1a\n\n\u200b\t\u5982\u679c\u56fe\u7684\u8fde\u901a\u6027\u6539\u53d8\uff0c\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u70b9 $u$ \u4e0d\u5728\u7b2c\u4e00\u4e2a\u52a0\u8fb9\u65b9\u6848\uff0c\u800c\u5728\u7b2c\u4e8c\u4e2a\u52a0\u8fb9\u65b9\u6848\u4e0a\u3002\u6b64\u65f6\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u70b9 $v$ \u5df2\u7ecf\u52a0\u5165\u7b2c\u4e00\u4e2a\u52a0\u8fb9\u65b9\u6848\uff0c\u4e14\u5b58\u5728\u8fb9 $(u,v)$ \u4f7f\u5f97 $w(u,v)<w$\uff0c\u5426\u5219\u4e24\u56fe\u4e0d\u540c\u3002\u90a3\u4e48\t\u8fd9\u4e2a\u70b9\u5fc5\u7136\u5e94\u8be5\u5728\u7b2c\u4e00\u4e2a\u65b9\u6848\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u4e0e\u5176\u6b63\u786e\u6027\u4e0d\u7b26\u3002\u6545\u6210\u7acb\u3002\n\n\u4e8c\u3001\u5bf9\u4e8e\u4efb\u610f\u6743\u503c\u7684\u8fb9\uff0c\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u8fd9\u4e2a\u6743\u503c\u7684\u8fb9\u7684\u6570\u91cf\u662f\u4e00\u5b9a\u7684\u3002\u8bc1\u660e\u5982\u4e0b\uff1a\n\n\u200b\t\u8bbe\u5b58\u5728\u4e24\u9897\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fb9\u6309\u7f16\u53f7\u5206\u522b\u4e3a\u4e24\u4e2a\u96c6\u5408 $s1,s2$\u3002\u5982\u679c\u7ed3\u8bba\u4e0d\u6210\u7acb\u5219\u6709\u8fb9 $i\\in s1$ \u4e14 $i\\notin s2$ \u5e76\u4e14\u6709\u8fb9 $j\\notin s1,j\\in s2$\uff0c\u4e0d\u59a8\u8bbe $w(i)<w(j)$\u3002\u90a3\u4e48\u5728\u52a0\u5165 $j$ \u8fd9\u4e00\u6761\u8fb9\u65f6\u5fc5\u7136\u5df2\u7ecf\u8003\u8651\u8fc7 $i$ \u8fd9\u6761\u8fb9\uff0c\u7531\u6027\u8d28\u4e00\u53ef\u5f97 $i$ \u8fd9\u6761\u8fb9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u662f\u56e0\u4e3a\u8fd9\u6761\u8fb9\u7684\u4e24\u7aef\u662f\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u5728\u7b2c\u4e8c\u9897\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u5fc5\u7136\u4e5f\u5305\u542b\u8fd9\u6761\u8fb9\u3002\u77db\u76fe\u3002\u6545\u6210\u7acb\u3002\n\n\u7ed3\u5408\u4e0a\u9762\u4e24\u4e2a\u6027\u8d28\uff0c\u4e0d\u96be\u53d1\u73b0\u53ef\u4ee5\u628a\u6bcf\u4e2a\u8fb9\u6743 $w$ \u5206\u5f00\u601d\u8003\u3002\u552f\u4e00\u8981\u5904\u7406\u7684\u662f\u5728\u52a0\u5165\u4e00\u6761\u6743\u503c\u4e3a $w$ \u7684\u8fb9\u65f6\uff0c\u5982\u4f55 $O(\\log n)$ \u5f97\u5230\u52a0\u5165\u4e86\u6240\u6709\u6743\u503c\u5c0f\u4e8e $w$ \u7684\u8fb9\u540e\u7684\u56fe\u7684\u8fde\u901a\u72b6\u6001\u3002\n\n\u5728\u67e5\u8be2\u524d\uff0c\u6211\u4eec\u5148\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u628a\u52a0\u5165\u5f53\u524d\u6743\u503c\u524d\u7684\u6bcf\u6761\u8fb9\u4e24\u7aef\u7684\u8fde\u901a\u5757\u7f16\u53f7\u8bb0\u5f55\u3002\u8fd9\u91cc\u91c7\u7528\u7b2c\u4e00\u4e2a\u52a0\u5165\u8be5\u8fde\u901a\u5757\u7684\u70b9\u4f5c\u4e3a\u5b83\u7684\u7f16\u53f7\uff0c\u65b9\u4fbf\u5199\u4ee3\u7801\u3002\u5728\u67e5\u8be2\u65f6\u6211\u4eec\u628a\u6bcf\u6761\u8fb9\u76f4\u63a5\u8003\u8651\u4e3a\u8fd9\u4e24\u4e2a\u7684\u8fde\u901a\u5757\u4e4b\u95f4\u7684\u8fb9\uff0c\u5e76\u628a\u8fd9\u6761\u8fb9\u52a0\u5165\u770b\u662f\u5426\u5b58\u5728\u73af\u5373\u4e24\u7aef\u662f\u5426\u5df2\u7ecf\u5728\u540c\u4e00\u8fde\u901a\u5757\u5185\u3002\n\n\u81f3\u4e8e\u6743\u503c\u6700\u5c0f\u7531\u6700\u5c0f\u751f\u6210\u6811\u7684\u5efa\u6811\u8fc7\u7a0b\u548c\u6027\u8d28\u4e00\u5bb9\u6613\u53d1\u73b0\u5982\u679c\u4e24\u7aef\u5df2\u7ecf\u5728\u540c\u4e00\u8fde\u901a\u5757\u5185\u5c31\u4e0d\u53ef\u884c\uff0c\u5426\u5219\u53ef\u884c\u3002\n\n\u6ce8\u610f\u5728\u91cd\u7f6e\u5e76\u67e5\u96c6\u65f6\u5e94\u8be5\u53ea\u91cd\u7f6e\u4f7f\u7528\u7684\u90e8\u5206\uff0c\u5426\u5219\u590d\u6742\u5ea6\u5c06\u9000\u5316\u4e3a $O(qn\\log n)$\uff0c\u8fd0\u7528\u53cc\u6307\u9488\u89e3\u51b3\u91cd\u7f6e\u95ee\u9898\u3002\n\n\u603b\u590d\u6742\u5ea6\uff1a$O(m\\log m+\\sum k_i(\\log k_i+\\log n))$\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\n#define mem(a,b) memset(a,b,sizeof(a));\n#define pc putchar\n#define fast_iostream ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\ntypedef double db;\nconst ld EPS=1e-8;\nconst ll INF=ll(1e9+7);\nconst ll LLINF=ll(1e18+7);\nconst ld LDEPS=1e-18;\ninline ll max(ll x,ll y){return x>y?x:y;}\ninline ll min(ll x,ll y){return x<y?x:y;}\ninline ld dmax(ld x,ld y){return x>y?x:y;}\ninline ld dmin(ld x,ld y){return x<y?x:y;}\ninline ll gcd(ll a,ll b){return b?gcd(b,a%b):a;}\ninline ll lcm(ll a,ll b){return a*b/gcd(a,b);}\ninline ll lowbit(ll x){return x&(-x);}\ninline ll read(){ll read_result=0,is_below_0=0;char now_ch=0;while(!isdigit(now_ch)){is_below_0|=now_ch=='-';now_ch=getchar();}while(isdigit(now_ch)){read_result=(read_result<<3)+(read_result<<1)+(now_ch^48);now_ch=getchar();}return is_below_0?-read_result:read_result;}\ninline ld dread(){ld x=0,d=0.1;char f=0,ch=getchar();while(!isdigit(ch))f|=(ch=='-'),ch=getchar();while(isdigit(ch)) x=x*10+ch-48,ch=getchar();if(ch=='.'){ch=getchar();while(isdigit(ch))x+=d*(ch^48),d*=0.1,ch=getchar();}return f?-x:x;}\ninline void write(ll x){if(x<0){putchar('-');x=-x;}if(x>9){write(x/10);}putchar(x%10+'0');}\nconst ll MAXN=5e5+7,MAXM=5e5+7;\nll fa[MAXN],n,m,q,k,head[MAXN],edgenum;\nbool book[MAXN];\nstruct node\n{\n\tll u,v,nxt,w,id,x,y;\n\tbool operator<(const node& xx)const\n\t{\n\t\treturn w<xx.w;\n\t}\n}edge[MAXM];\nvector<node>e;\nvoid add_edge(ll u,ll v,ll w)\n{\n\tedgenum++;\n\tedge[edgenum].nxt=head[u];\n\tedge[edgenum].v=v;\n\tedge[edgenum].u=u;\n\tedge[edgenum].w=w;\n\thead[u]=edgenum;\n}\nll find(ll x)\n{\n\tif(x!=fa[x])fa[x]=find(fa[x]);\n\treturn fa[x];\n}\nvoid us(ll x,ll y)\n{\n\tll xx=find(x),yy=find(y);\n\tif(xx!=yy)\n\t{\n\t\tfa[xx]=fa[yy]; \n\t}\n}\nbool cmp(const node& xx,const node& yy)\n{\n\treturn xx.id<yy.id;\n}\nint main()\n{\n \t//freopen(\".in\",\"r\",stdin);\n    //freopen(\".out\",\"w\",stdout);\n    n=read(),m=read();\n    for(ll i=1;i<=m;i++)\n    {\n    \tll u=read(),v=read(),w=read();\n    \tadd_edge(u,v,w);\n    \tedge[i].id=i;\n\t}\n\tsort(edge+1,edge+m+1);\n\tedge[0].w=-1;\n\tfor(ll i=1;i<=n;i++)fa[i]=i;\n\tfor(ll i=1;i<=m;)\n\t{\n\t\tll j=i;\n\t\tdo\n\t\t{\n\t\t\tedge[j].x=find(edge[j].u),edge[j].y=find(edge[j].v);\n\t\t\tj++;\n\t\t}while(j<=m&&edge[j].w==edge[j-1].w);\n\t\twhile(i<j)\n\t\t{\n\t\t\twhile(find(edge[i].u)==find(edge[i].v)&&i<j)i++;\n\t\t\tif(i<j)us(edge[i].u,edge[i].v);\n\t\t}\n\t}\n\tq=read();\n\tsort(edge+1,edge+m+1,cmp);\n\tfor(ll i=1;i<=n;i++)fa[i]=i;\n\twhile(q--)\n\t{\n\t\tk=read();\n\t\tfor(ll i=1;i<=k;i++)\n\t\t{\n\t\t\tll pos=read();\n\t\t\tnode tmp;\n\t\t\ttmp.u=edge[pos].x,tmp.v=edge[pos].y,tmp.w=edge[pos].w;\n\t\t\te.push_back(tmp);\n\t\t}\n\t\tsort(e.begin(),e.end());\n\t\tbool ans=1;\n\t\tfor(ll i=0;i<e.size()&&ans;)\n\t\t{\n\t\t\tif(find(e[i].u)==find(e[i].v))\n\t\t\t{\n\t\t\t\tans=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tus(e[i].u,e[i].v);\n\t\t\tll j=i+1;\n\t\t\twhile(j<e.size()&&e[i].w==e[j].w)\n\t\t\t{\n\t\t\t\tif(find(e[j].u)==find(e[j].v))\n\t\t\t\t{\n\t\t\t\t\tans=0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tus(e[j].u,e[j].v);j++;\n\t\t\t}\n\t\t\twhile(i<j)fa[e[i].u]=e[i].u,fa[e[i].v]=e[i].v,i++;\n\t\t}\n\t\tputs(ans?\"YES\":\"NO\");\n\t\te.clear();\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1646997610,
        "uid": 395288,
        "name": "Yuby",
        "ccfLevel": 6,
        "title": "CF891C\u9898\u89e3"
    },
    {
        "content": "\u8003\u8651lct\u505a\u6cd5\u3002\n\n\u5148\u968f\u4fbf\u627e\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u51fa\u6765\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u7684\u8fb9$(u,v,w)$\uff0c\u67e5\u627e$u,v$\u4e4b\u95f4\u7684\u6700\u5927\u6743\u503c\uff0c\u5982\u679c\u5c0f\u4e8e$w$\uff0c\u90a3\u4e48\u662f$NO$\uff0c\u5426\u5219\u628a$(u,v,w)$\u8fd9\u6761\u8fb9\u63d2\u5165\uff0c\u5e76\u4ee4\u8fb9\u6743\u4e3a$-inf$(\u9632\u6b62\u88ab\u66ff\u6362)\uff0c\u6700\u540e\u6062\u590d\u8fb9\u6743\u5373\u53ef\u3002\n\n\u53e6\uff1a[lct\u662f\u5927\u5e38\u6570\u505a\u6cd5\uff0c\u53ef\u80fd\u4f1aT](https://www.luogu.org/recordnew/show/17604648)\uff08\u89c1\u7b2c26\u70b9\uff09\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=2e6+50;\nint n,m,x,y,p,q,opt,qwq;\nint b[N],c[N],zn[N],cnt;\ninline void rad(int &_){\n    static char ch;\n    while(ch=getchar(),ch<'0'||ch>'9');_=ch-48;\n    while(ch=getchar(),ch<='9'&&ch>='0')_=_*10+ch-48;\n}\ninline void swap(int &u,int &v){int o=u;u=v;v=o;}\nstruct node{\n\tint x,y,w,id;\n}a[N];\nstruct lct{\n\tint ch[N][2],fa[N],tagrev[N],val[N],sum[N];\n\tbool isrot(int x){\n\t\treturn ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;\n\t}\n\tvoid rev(int x){\n\t\ttagrev[x]^=1;\n\t\tswap(ch[x][0],ch[x][1]);\n\t}\n\tvoid update(int x){\n\t\tsum[x]=max({val[x],sum[ch[x][0]],sum[ch[x][1]]});\n\t}\n\tvoid rotate(int x){\n\t\tint y=fa[x],z=fa[y],opt=(ch[y][1]==x),w=ch[x][opt^1];\n\t\tif(!isrot(y))ch[z][ch[z][1]==y]=x;fa[x]=z;\n\t\tch[y][opt]=w;fa[w]=y;\n\t\tch[x][opt^1]=y;fa[y]=x;\n\t\tupdate(y);update(x);\n\t}\n\tvoid splay(int x){\n\t\tint y,z;\n\t\tfor(y=x,zn[++cnt]=x;!isrot(y);y=fa[y],zn[++cnt]=y);\n\t\tfor(;cnt;--cnt){\n\t\t\tif(zn[cnt]&&tagrev[zn[cnt]])\n\t\t\ttagrev[zn[cnt]]=0,rev(ch[zn[cnt]][0]),rev(ch[zn[cnt]][1]);\n\t\t}\n\t\twhile(!isrot(x)){\n\t\t\ty=fa[x];z=fa[y];\n\t\t\tif(!isrot(y))\n\t\t\trotate(((ch[y][0]==x)^(ch[z][0]==y))?x:y);\n\t\t\trotate(x);\n\t\t}\n\t}\n\tvoid access(int x){\n\t\tfor(int y=0;x;y=x,x=fa[x])\n\t\tsplay(x),ch[x][1]=y,update(x);\n\t}\n\tvoid mktrot(int x){\n\t\taccess(x);splay(x);rev(x);\n\t}\n\tvoid mkvrot(int x){\n\t\taccess(x);splay(x);\n\t}\n\tvoid cut(int x,int y){\n\t\tmktrot(x);mkvrot(y);\n\t\tch[y][0]=fa[x]=0;\n\t\tupdate(y);\n\t}\n\tvoid link(int x,int y){\n\t\tmktrot(x);mkvrot(y);\n\t\tfa[x]=y;\n\t}\n\tint query(int x,int y){\n\t\tmktrot(x);mkvrot(y);\n\t\twhile(y&&(sum[ch[y][0]]==sum[y]||sum[ch[y][1]]==sum[y]))\n\t\tif(sum[ch[y][0]]==sum[y])y=ch[y][0];\n\t\telse y=ch[y][1];\n\t\treturn y>n?y:n;\n\t}\n}s;\nint Fa[N];\nint find(int x){return x==Fa[x]?x:Fa[x]=find(Fa[x]);}\nint main(){\n\trad(n);rad(m);\n\tfor(int i=1;i<=m;i++){\n\t\trad(a[i].x);rad(a[i].y);rad(a[i].w);\n\t\ta[i].id=n+i;\n\t\ts.val[n+i]=s.sum[n+i]=a[i].w;\n\t}\n\tfor(int i=1;i<=n;i++)Fa[i]=i;\n\tfor(int i=1;i<=m;i++){\n\t\tx=find(a[i].x);y=find(a[i].y);\n\t\tif(x==y){\n\t\t\tx=s.query(a[i].x,a[i].y)-n;\n\t\t\tif(a[x].w<=a[i].w)continue;\n\t\t\ts.cut(a[x].x,a[x].id);\n\t\t\ts.cut(a[x].id,a[x].y);\n\t\t\ts.link(a[i].x,a[i].id);\n\t\t\ts.link(a[i].id,a[i].y);\n\t\t}else Fa[x]=y,s.link(a[i].x,a[i].id),s.link(a[i].id,a[i].y);\n\t}\n\ta[0].w=-1;\n\tfor(rad(q);q;q--){\n\t\trad(p);opt=1;qwq=0;\n\t\tfor(int i=1;i<=p;i++){\n\t\t\trad(b[i]);\n\t\t\tif(opt){\n\t\t\t\tx=s.query(a[b[i]].x,a[b[i]].y)-n;\n\t\t\t\tif(a[x].w<a[b[i]].w){opt=0;continue;}\n\t\t\t\tc[++qwq]=s.val[a[b[i]].id];\n\t\t\t\tif(x!=b[i]){\n\t\t\t\t\ts.cut(a[x].x,a[x].id);\n\t\t\t\t\ts.cut(a[x].id,a[x].y);\n\t\t\t\t\ts.val[a[b[i]].id]=0;\n\t\t\t\t\ts.link(a[b[i]].x,a[b[i]].id);\n\t\t\t\t\ts.link(a[b[i]].id,a[b[i]].y);\n\t\t\t\t}else s.val[a[b[i]].id]=0,s.splay(a[b[i]].id);\n\t\t\t}\n\t\t}\n\t\tputs(opt?\"YES\":\"NO\");\n\t\tfor(int i=1;i<=qwq;i++)s.val[a[b[i]].id]=c[i],s.splay(a[b[i]].id);\n\t}\n}\n```",
        "postTime": 1553587207,
        "uid": 50092,
        "name": "da32s1da",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF891C \u3010Envy\u3011"
    },
    {
        "content": "# Envy-\u9898\u89e3\n\n## \u9898\u9762\n\n[Envy](https://codeforces.com/contest/892/problem/E)\n\n\u8f93\u5165\u4e00\u4e2a $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6709 $q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u7ec4\u8fb9\u96c6\uff0c\u95ee\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u5305\u542b\u8fd9\u7ec4\u8fb9\u96c6\u3002\n\n## \u524d\u7f6e\u77e5\u8bc6\n\n\u82e5\u4e00\u4e2a\u8fde\u901a\u56fe\u4e2d\uff0c\u6bd4\u8fb9 $e$ \u8fb9\u6743\u5c0f\u7684\u6240\u6709\u8fb9\u7ec4\u6210\u7684\u56fe\u4e2d $e$ \u7684\u4e24\u4e2a\u7aef\u70b9\u4e0d\u8fde\u901a\uff0c\u5219 $e$ \u5728\u8fd9\u4e2a\u56fe\u7684\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\n\n\u82e5\u4e00\u4e2a\u8fde\u901a\u56fe\u4e2d\uff0c\u8fb9 $i$ \u5728\u8fd9\u4e2a\u56fe\u7684\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u8fb9 $j$ \u5728\u8fd9\u4e2a\u56fe\u7684\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u4e14 $i,j$ \u6743\u503c\u4e0d\u540c\uff0c\u5219 $i,j$ \u540c\u5728\u8fd9\u4e2a\u56fe\u7684\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\n\n##### \u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u611f\u6027\u7406\u89e3\uff0c\u4e5f\u53ef\u4ee5\u627e\u8d44\u6599\u7406\u6027\u7406\u89e3\u3002\n\n---\n\n###### \u88ab\u67d0\u4eba~~w\u0113ixi\u00e9~~\u5efa\u8bae\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u4e00\u4e0b\u3002\n\n![](https://cdn.fzoi.top/upload/user/c20230122/22040809135873.png)\n\n1. \u5982\u4e0a\u56fe\uff0c\u4f7f\u7528\u5728\u51c6\u5907\u8fde\u63a5\u4e2d\u95f4\u7684\u90a3\u6761\u6743\u503c\u4e3a $3$ \u7684\u8fb9\u65f6\uff0c\u53d1\u73b0\u4e24\u4e2a\u7aef\u70b9\u5df2\u7ecf\u8fde\u901a\u4e86\u3002\u867d\u7136\u6309\u7167 $Kruskal$ \u7684\u7b97\u6cd5\uff0c\u4e2d\u95f4\u7684\u90a3\u6761\u6743\u503c\u4e3a $2$ \u7684\u8fb9\u5e76\u4e0d\u4f1a\u88ab\u5b9e\u9645\u8fde\u63a5\uff0c\u4f46\u6700\u5c0f\u751f\u6210\u6811\u4e00\u70b9\u5305\u542b\u7ea2\u8fb9\u4e2d\u7684\u82e5\u5e72\u6761\uff0c\u4e14\u4f7f\u6240\u6709\u7ea2\u8fb9\u76f8\u8fde\u70b9\u90fd\u88ab\u5305\u542b\uff08$Kruskal$ \u662f\u5728\u4e24\u4e2a\u7aef\u70b9\u5df2\u88ab\u8fde\u901a\u7684\u60c5\u51b5\u4e0b\u624d\u4e0d\u8fde\u63a5\uff09\u3002\u800c\u5982\u679c\u4e0d\u8fde\u901a\uff08\u53f3\u4fa7\u7684\u90a3\u6761\u6743\u503c\u4e3a $3$ \u7684\u8fb9\uff09\uff0c$Kruskal$ \u81ea\u7136\u662f\u4f1a\u8fde\u63a5\u7684\u3002\n2. \u5982\u679c $i,j$ \u8fb9\u6743\u4e0d\u540c\uff0c\u5b83\u4eec\u662f\u5728\u4e0d\u540c\u7684\u9636\u6bb5\u5f85\u8fde\u63a5\uff0c\u5b8c\u5168\u72ec\u7acb\u3002\u5982\u679c $i,j$ \u8fb9\u6743\u76f8\u540c\uff0c\u5b83\u4eec\u5c31\u6709\u53ef\u80fd\u8fde\u63a5\u76f8\u540c\u7684\u4e24\u4e2a\u66fe\u7ecf\u72ec\u7acb\u8fde\u901a\u5757\uff0c\u4e0d\u5408\u6cd5\u3002\n\n## \u5206\u6790\n\n\u6839\u636e\u524d\u7f6e\u77e5\u8bc6\uff0c\u6309\u7167 $Kruskal$ \u7684\u6b65\u9aa4\uff0c\u5c06\u6240\u6709\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u8fde\u63a5\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u8bb0\u5f55\u8fde\u901a\u6027\u3002\u4e00\u4e2a\u8be2\u95ee\u96c6\u4e2d\u5982\u6709\u6743\u503c\u7b49\u7684\u8fb9\uff0c\u5c31\u5168\u90e8\u63d2\u5165\u540e\u64a4\u9500\u64cd\u4f5c\u3002\n\n\u5feb\u6377\u7684\u65b9\u5f0f\u662f\u5c06\u6240\u6709\u88ab\u8be2\u95ee\u7684\u8fb9\u6392\u5e8f\uff0c\u540c\u8be2\u95ee\u96c6\u7684\u6392\u5728\u4e00\u8d77\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ninline int read_int(){//\u5feb\u901f\u8bfb\u5165\n\tregister int x=0;register char c=getchar();\n\twhile(c>'9'||c<'0')c=getchar();\n\twhile(c<='9'&&c>='0'){\n\t\tx=(x<<3)+(x<<1)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x;\n}\n\nint n,m,QQ,k;\nclass EDGE{\n\tpublic:\n\t\tint u,v,w;\n}e[500005];\nint e_cnt;\nvoid add_edge(){\n\tint u=read_int();int v=read_int();int w=read_int();\n\t++e_cnt;\n\te[e_cnt].u=u;e[e_cnt].v=v;e[e_cnt].w=w;\n}\n\nclass Q{\n\tpublic:\n\t\tEDGE edge;\n\t\tint id;\n}q[500005];\nint q_cnt;\n\nbool cmp_E(EDGE x,EDGE y){\n\treturn x.w<y.w;\n}\nbool cmp_Q(Q x,Q y){\n\tif(x.edge.w!=y.edge.w)return x.edge.w<y.edge.w;\n\telse return x.id<y.id;\n}\n\nint fa[500005],s[500005];\nbool ans[500005];\nstack<pair<int,int>> M;\nstack<bool> N;\nint Find_fa(int x){\n\twhile(fa[x]!=x)x=fa[x];\n\treturn x;\n}\nvoid Merge(int x,int y){\n\tx=Find_fa(x),y=Find_fa(y);\n\tif(x==y){\n\t\tM.push(make_pair(0,0));\n\t\tN.push(0);\n\t\treturn;\n\t}\n\tif(s[x]<s[y]){\n\t\tM.push(make_pair(x,y));\n\t\tN.push(0);\n\t\tfa[x]=y;\n\t}else if(s[x]>s[y]){\n\t\tM.push(make_pair(y,x));\n\t\tN.push(0);\n\t\tfa[y]=x;\n\t}else{\n\t\tM.push(make_pair(x,y));\n\t\t++s[y];\n\t\tN.push(1);\n\t\tfa[x]=y;\n\t}\n}\nvoid Unmerge(int X){\n\twhile(~--X){\n\t\tint x=M.top().first,y=M.top().second,z=N.top();\n\t\tM.pop(),N.pop();\n\t\tfa[x]=x;if(z)--s[y];\n\t}\n}\n\nint main(){\n\tn=read_int();m=read_int();\n\tfor(int i=1;i<=m;++i)add_edge();\n\tQQ=read_int();\n\tfor(int i=1;i<=QQ;++i){\n\t\tk=read_int();\n\t\tfor(int j=1;j<=k;++j){\n\t\t\tint EE=read_int();\n\t\t\t++q_cnt;\n\t\t\tq[q_cnt].edge=e[EE];\n\t\t\tq[q_cnt].id=i;\n\t\t}\n\t}\n\tsort(e+1,e+1+e_cnt,cmp_E);sort(q+1,q+1+q_cnt,cmp_Q);//\u6392\u5e8f\n\t\n\tfor(int i=1;i<=n;++i)fa[i]=i,s[i]=1;\n\te_cnt=1;\n\tfor(int i=1;i<=q_cnt;){\n\t\twhile(e[e_cnt].w<q[i].edge.w){Merge(e[e_cnt].u,e[e_cnt].v);++e_cnt;}//\u63d2\u5165\u6240\u6709\u6bd4\u5f53\u524d\u8fb9\u6743\u503c\u5c0f\u7684\u8fb9\n\t\tint j;\n\t\tfor(j=i;j<=q_cnt;++j){\n\t\t\tif(q[j].edge.w!=q[i].edge.w||q[j].id!=q[i].id)break;\n\t\t\tif(Find_fa(q[j].edge.u)==Find_fa(q[j].edge.v)){//NO\n\t\t\t\tans[q[j].id]=1;\n\t\t\t}\n\t\t\tMerge(q[j].edge.u,q[j].edge.v);\n\t\t}\n\t\tUnmerge(j-i);//\u64a4\u9500\n\t\ti=j;\n\t}\n\tfor(int i=1;i<=QQ;++i){\n\t\tprintf(ans[i]?\"NO\\n\":\"YES\\n\");\n\t}\n\t\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1649421974,
        "uid": 492662,
        "name": "Endt_or_endt",
        "ccfLevel": 5,
        "title": "Envy-\u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/CF891C)\n\n\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u5f20\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u6bcf\u6b21\u7ed9\u51fa\u4e00\u4e9b\u8fb9\uff0c\u8be2\u95ee\u8fd9\u4e9b\u8fb9\u80fd\u5426\u540c\u65f6\u5728\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u51fa\u73b0\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u6ca1\u592a\u5927\u601d\u7ef4\u96be\u5ea6\u7684 $\\text{LCT}$ \u505a\u6cd5\uff0c\u6709\u70b9\u5361\u5e38\u3002\n\n\u5148\u5efa\u51fa\u4efb\u610f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5bf9\u6811\u4e0a\u4e0e\u975e\u6811\u4e0a\u7684\u8fb9\u8ba8\u8bba\u3002\n\n\u9996\u5148\uff0c\u5982\u679c\u8be2\u95ee\u7684\u8fb9\u4f1a\u6784\u6210\u4e00\u4e2a\u73af\uff0c\u90a3\u5c31\u5b8c\u5168\u4e0d\u53ef\u80fd\u5728\u540c\u4e00\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\n\n\u5176\u6b21\uff0c\u8003\u8651\u4e00\u6761\u975e\u6811\u8fb9 $(x,y,w)$ \u4ec0\u4e48\u65f6\u5019\u80fd\u66ff\u6362\u4e00\u6761\u5728\u539f\u5148\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u3002\n\n\u90a3\u5c31\u5fc5\u987b\u6ee1\u8db3 $x,y$ \u4e24\u4e2a\u70b9\u5728\u539f\u5148\u6700\u5c0f\u751f\u6210\u6811\u8def\u5f84\u4e0a\u7684\u8fb9\u7684**\u6700\u5927\u503c** $\\geq w$\uff0c\u4e0d\u7136\u4e0d\u53ef\u884c\u3002\n\n\u90a3\u8fd9\u65f6\u5019\u8fd9\u6761\u8fb9\u5c31\u80fd\u5c06\u8fd9\u6761\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u66ff\u6362\u6389\u3002\n\n\u4f46\u5982\u679c\u8fd9\u6761\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u88ab\u8981\u6c42\u4e86\u5fc5\u987b\u51fa\u73b0\uff0c\u5c31\u9700\u8981\u53e6\u5916\u7684\u8fb9\u53bb\u66ff\u6362\u3002\n\n\u7531\u4e8e\u6709\u52a8\u6001\u7684\u66ff\u6362\u4e0e\u6c42\u8def\u5f84\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u8003\u8651 $\\text{LCT}$ **\u5316\u8fb9\u4e3a\u70b9**\u5b9e\u73b0\u3002\n\n\u5148\u5c06\u8be2\u95ee\u4e2d**\u5728\u539f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9**\u7684\u6743\u503c\u8bbe\u4e3a $0$ \u4fdd\u8bc1\u4e0d\u4f1a\u88ab\u66ff\u6362\u3002\n\n\u518d\u5bf9**\u975e\u6811\u8fb9**\u67e5\u8def\u5f84\u6700\u5927\u503c\u770b\u80fd\u5426\u66ff\u6362\uff0c\u5e76\u8bb0\u5f55\u4e0b\u88ab\u66ff\u6362\u8fc7\u7684\u8fb9\uff0c\u5728\u6700\u7ec8\u8981\u590d\u539f\u56de\u53bb\u3002\n\n\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$ \u7684\uff08\u9ed8\u8ba4 $n,m$ \u540c\u9636\uff09\u3002\n\n\u4f46\u7531\u4e8e $\\text{LCT}$ \u7684\u5de8\u5927\u5e38\u6570\uff0c\u4e14\u4e3a\u4e86\u67e5\u8def\u5f84\u6700\u503c\u7684\u5316\u8fb9\u4e3a\u70b9\uff0c\u70b9\u6570\u5df2\u53bb\u5230 $1e6$ \u7ea7\u522b\u3002\n\n\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u6709\u70b9\u5361\u5e38\uff0c\u4f46\u4e2a\u4eba\u5b9e\u73b0\u4e0a\u6240\u6709\u6570\u636e\u90fd\u80fd\u5728 $1s$ \u5185\u8dd1\u5b8c\uff1a[\u8bb0\u5f55\u8be6\u60c5](https://www.luogu.com.cn/record/60301701)\u3002\n\n\u6700\u7ec8\u4ee3\u7801\uff1a\n\n```cpp\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e6+10;\nint n,m,q,x,y,v,k,ax,ay,tot;bool flag,bb[N];\nint w[N],ww[N],xx[N],yy[N],a[N],f[N],id[N];\ninline int getf(int x){while(x^f[x])x=f[x]=f[f[x]];return x;}\nstruct pre_state{int x,y;}ps[N<<1];\nnamespace FastIO\n{//\u6b64\u5904\u7701\u7565\u5e26\u7f13\u5b58\u7684 FastIO\n}\nusing namespace FastIO;\nstruct lct{\n\tint mxid[N],son[N][2],tmpid,anc[N],rev[N],i,y,_y,_x,_id,rx,ry,mxy;bool b;\n\tinline bool nroot(int x){return son[anc[x]][0]==x||son[anc[x]][1]==x;}\n\tinline bool p(int x){return son[anc[x]][1]==x;}\n\tinline void rev_(int x){rev[x]^=1;son[x][0]^=son[x][1]^=son[x][0]^=son[x][1];}\n\tinline void fix(int x){\n\t\tmxid[x]=x;\n\t\tif(w[tmpid=mxid[son[x][0]]]>w[x])mxid[x]=tmpid;\n\t\tif(w[tmpid=mxid[son[x][1]]]>w[mxid[x]])mxid[x]=tmpid;\n\t}\n\tinline void pushdown(int x){\n\t\tif(rev[x]){if(son[x][0])rev_(son[x][0]);if(son[x][1])rev_(son[x][1]);rev[x]=0;}\n\t}\n\tvoid pushall(int x){if(nroot(x))pushall(anc[x]);pushdown(x);}\n\tinline void rotate(int x){\n\t\ty=anc[x];_x=anc[y];b=p(x);\n\t\tif(nroot(y))son[_x][p(y)]=x;\n\t\tanc[x]=_x;\n\t\tanc[son[y][b]=son[x][!b]]=y;\n\t\tanc[son[x][!b]=y]=x;\n\t\tfix(y);fix(x);fix(_x);\n\t}\n\tinline void splay(int x){\n\t\tpushall(x);for(;i=anc[x],nroot(x);rotate(x))if(nroot(i))rotate(p(x)==p(i)?i:x);\n\t}\n\tinline void access(int x){\n\t\tfor(_y=0;x;_y=x,x=anc[x])splay(x),son[x][1]=_y,fix(x);\n\t}\n\tinline void makeroot(int x){access(x);splay(x);rev_(x);}\n\tinline void split(int x,int y){makeroot(x);access(y);splay(y);}\n\tinline void link(int x,int y){makeroot(x);anc[x]=y;}\n\tinline void cut(int x,int y){split(x,y);son[y][0]=anc[x]=0;fix(y);}\n\tinline void link(int x,int y,int id){\n\t\tsplit(x,y);mxy=mxid[y];\n\t\tif(w[mxy]>=w[id]){\n\t\t\t_id=mxy;\n\t\t\tcut(xx[_id],_id);cut(_id,yy[_id]);\n\t\t\tlink(x,id);link(id,y);\n\t\t\tps[++tot]=(pre_state){_id,id};\n\t\t}\n\t\telse flag=1;\n\t}\n\tinline void recover(){\n\t\tfor(;tot;--tot){\n\t\t\try=ps[tot].y,rx=ps[tot].x;\n\t\t\tcut(xx[ry],ry);cut(yy[ry],ry);\n\t\t\tlink(xx[rx],rx);link(yy[rx],rx);\n\t\t}\n\t}\n}L;\nbool cmp(int a,int b){return w[a]<w[b];}\nmain(){\n\tqin>>n>>m;register int i;\n\tfor(i=1;i<=m;++i)qin>>xx[i]>>yy[i]>>w[i];\n\tfor(i=1;i<=m;++i)xx[i]+=m,yy[i]+=m,ww[i]=w[i],id[i]=i;\n\tfor(i=1;i<=n;++i)f[i]=i;\n\tsort(id+1,id+m+1,cmp);\n\tfor(i=1;i<=m;++i){\n\t\tx=xx[id[i]]-m,y=yy[id[i]]-m;\n\t\tax=getf(x),ay=getf(y);\n\t\tif(ax==ay)continue;\n\t\tf[ax]=ay;bb[id[i]]=1;\n\t\tL.link(x+m,id[i]);L.link(y+m,id[i]);\n\t}//\u8001\u8001\u5b9e\u5b9e\u6253kruskal\n\ttot=0;qin>>q;\n\tfor(i=1;i<=n;++i)f[i]=i;\n\twhile(q--){\n\t\tqin>>k;flag=1;\n\t\tfor(i=1;i<=k;++i)qin>>a[i],flag&=bb[a[i]];\n\t\tif(flag){puts(\"YES\");continue;}//\u5168\u90e8\u5728\u539fMST\u7684\u8fb9\u663e\u7136\u53ef\u884c\n\t\tflag=0;\n\t\tfor(i=1;i<=k;++i){\n\t\t\tax=getf(xx[a[i]]-m);\n\t\t\tay=getf(yy[a[i]]-m);\n\t\t\tif(ax==ay)flag=1;\n\t\t\telse f[ax]=ay;\n\t\t}//\u5e76\u67e5\u96c6\u5224\u73af\n\t\tfor(i=1;i<=k;++i)x=xx[a[i]]-m,f[x]=x,y=yy[a[i]]-m,f[y]=y;\n\t\tif(flag){puts(\"NO\");continue;}\n\t\tfor(i=1;i<=k;++i)if(bb[a[i]])w[a[i]]=0,L.splay(a[i]);\n\t\tfor(i=1;i<=k;++i)if(!bb[a[i]]){\n\t\t\tL.link(xx[a[i]],yy[a[i]],a[i]);\n\t\t\tif(flag)break;\n\t\t}\n\t\tfor(i=1;i<=k;++i)if(bb[a[i]])w[a[i]]=ww[a[i]],L.splay(a[i]);\n\t\tL.recover();//\u590d\u539f\n\t\tif(flag)puts(\"NO\");\n\t\telse puts(\"YES\");\n\t}\n}\n```\n",
        "postTime": 1634621063,
        "uid": 334380,
        "name": "Y_B_X",
        "ccfLevel": 7,
        "title": "\u9898\u89e3[CF891C Envy]"
    },
    {
        "content": "### $\\text{Difficulty : 2300}$\n----\n### \u89e3\u9898\u601d\u8def\uff1a\n\n\u4e00\u5f00\u59cb\u60f3\u7684 $\\text{LCT}$\uff0c\u7ed3\u679c\u6709\u66f4\u5de7\u5999\u7684\u505a\u6cd5\uff0c\u679c\u7136\u6211\u8fd8\u662f\u592a\u83dc\u4e86\u3002\n\n---\n#### $\\text{LCT}$ \u505a\u6cd5\uff1a\n\n\u5148\u5efa\u7acb\u4efb\u610f\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6bcf\u4e00\u6b21\u8981\u66f4\u6362\u8fb9\u7684\u65f6\u5019\uff0c\u67e5\u8be2\u65b0\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6743\u503c\u6700\u5927\u7684\u8fb9\u662f\u4e0d\u662f\u6070\u597d\u7b49\u4e8e\u66f4\u6362\u8fb9\u7684\u6743\u503c\uff0c\u5982\u679c\u6ca1\u6709\u8bf4\u660e\u5982\u679c\u628a\u8fd9\u4e2a\u8fb9\u52a0\u4e0a\u53bb\u4f1a\u4f7f\u5f97\u4ee3\u4ef7\u589e\u5927\uff0c\u4e0d\u53ef\u53d6\u3002\u4e0d\u53ef\u80fd\u51fa\u73b0\u6700\u5927\u503c\u6bd4\u5f53\u524d\u8981\u52a0\u5165\u7684\u8fb9\u8fd8\u8981\u5927\u7684\u60c5\u51b5\u3002\n\n\u7136\u540e\u5c06\u90a3\u4e00\u6761\u8fb9\u65ad\u5f00\uff0c\u8fde\u63a5\u4e0a\u65b0\u7684\u8fb9\uff0c\u7531\u4e8e\u65b0\u7684\u8fb9\u4e0d\u80fd\u88ab\u6362\u4e0b\u6765\uff0c\u4e0d\u59a8\u5c06\u6743\u503c\u8bbe\u7f6e\u4e3a\u65e0\u9650\u5c0f\uff0c\u6700\u540e\u6062\u590d\u539f\u6837\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u7528 $\\text{LCT}$ \u505a\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u8089\u773c\u53ef\u89c1\u7684\u9ebb\u70e6\uff0c\u6240\u4ee5\u6362\u4e00\u79cd\u505a\u6cd5\u3002\n\n---\n#### \u5e76\u67e5\u96c6\u505a\u6cd5\n\n\u5229\u7528 $\\text{kruskal}$ \u7684\u6027\u8d28\uff0c\u4e00\u5b9a\u662f\u6309\u7167\u8fb9\u7684\u6743\u503c\u4f9d\u6b21\u5904\u7406\uff0c\u800c\u4e14\u65e0\u8bba\u6309\u7167\u4ec0\u4e48\u6837\u7684\u987a\u5e8f\u52a0\u8fb9\uff0c\u5728\u5904\u7406\u5b8c\u4e00\u79cd\u6743\u503c\u4e4b\u540e\u5f62\u6210\u7684\u82e5\u5e72\u5757\u4e00\u5b9a\u662f\u4e00\u6837\u7684\u3002\u56e0\u4e3a\u5047\u8bbe\u6709\u5728\u4e00\u79cd\u65b9\u5f0f\u4f7f\u5f97\u4e24\u4e2a\u70b9\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u90a3\u4e48\u5728\u53e6\u4e00\u4e2a\u987a\u5e8f\u4e2d\uff0c\u8fd9\u4e2a\u94fe\u63a5\u4e24\u4e2a\u70b9\u7684\u8fb9\u4e5f\u4e00\u5b9a\u80fd\u52a0\u5165\uff0c\u6700\u540e\u4f7f\u5f97\u4e24\u4e2a\u70b9\u8054\u901a\u3002\u5bf9\u4e8e\u4e0d\u5728\u4e00\u8d77\u7684\u4e5f\u662f\u540c\u7406\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fb9\uff0c\u5728\u8003\u8651\u5230\u8fd9\u4e2a\u8fb9\u6240\u5728\u7684\u6743\u503c\u7684\u65f6\u5019\uff0c\u5b83\u6240\u8fde\u63a5\u7684\u4e24\u4e2a\u8fde\u901a\u5757\uff08\u6709\u53ef\u80fd\u662f\u540c\u4e00\u4e2a\uff09\u5c31\u662f\u56fa\u5b9a\u7684\uff0c\u9884\u5904\u7406\u51fa\u8fd9\u4e2a\uff0c\u7136\u540e\u6bcf\u4e00\u6b21\u8be2\u95ee\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u7528\u8fd9\u4e9b\u8fde\u901a\u5757\u7684\u7f16\u53f7\u8fdb\u884c\u64cd\u4f5c\uff0c\u6548\u679c\u548c\u7528\u6574\u4e2a\u5e76\u67e5\u96c6\u662f\u4e00\u6837\u7684\u3002\n\n\u5f53\u51fa\u73b0\u4e86\u73af\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u8fb9\u5c31\u4e00\u5b9a\u4e0d\u80fd\u88ab\u52a0\u5165\uff0c\u4e5f\u5c31\u662f\u6574\u4e2a\u65b9\u6848\u4e0d\u53ef\u884c\u3002\u53cd\u4e4b\u5219\u5728\u5f53\u524d\u53ef\u884c\u3002\n\n\u660e\u663e\u6bd4\u4e0a\u4e00\u79cd\u7b80\u5355\u3002\n\n---\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=500005;\nint n,m,Q,fa[MAXN],K,flag,x;\nint find(int x){\n\tif(fa[x]==x)return x;\n\treturn fa[x]=find(fa[x]);\n}\nvoid merge(int x,int y){\n\tfa[find(x)]=find(y);\n}\nstruct edge{\n\tint x,y,v,id;\n\tbool operator <(const edge a)const{\n\t\treturn v<a.v;\n\t}\n}e[MAXN],v[MAXN];\nbool cmd(edge a,edge b){\n\treturn a.id<b.id;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&e[i].x,&e[i].y,&e[i].v);\n\t\te[i].id=i;\n\t}\n\tsort(e+1,e+m+1);\n\te[0].v=-1;\n\tfor(int i=1;i<=m;){\n\t\tint j=i;\n\t\te[i].x=find(e[i].x);\n\t\te[i].y=find(e[i].y);\n\t\ti++;\n\t\twhile(e[i].v==e[i-1].v){\n\t\t\te[i].x=find(e[i].x);\n\t\t\te[i].y=find(e[i].y);\n\t\t\ti++;\n\t\t}\n\t\tfor(;j<i;j++){\n\t\t\tif(find(e[j].x)==find(e[j].y))continue;\n\t\t\tmerge(e[j].x,e[j].y);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n\tsort(e+1,e+m+1,cmd);\n\tscanf(\"%d\",&Q);\n\twhile(Q--){\n\t\tflag=1;\n\t\tscanf(\"%d\",&K);\n\t\tfor(int i=1;i<=K;i++){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tv[i]=e[x];\n\t\t}\n\t\tsort(v+1,v+K+1);\n\t\tv[K+1].v=-1;\n\t\tfor(int i=1;i<=K;){\n\t\t\tint j=i;\n\t\t\tif(v[i].x==v[i].y){flag=0;break;}\n\t\t\tmerge(v[i].x,v[i].y);\n\t\t\ti++;\n\t\t\twhile(v[i].v==v[i-1].v){\n\t\t\t\tif(find(v[i].x)==find(v[i].y)){flag=0;break;}\n\t\t\t\tmerge(v[i].x,v[i].y);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tfor(;j<i;j++)fa[v[j].x]=v[j].x,fa[v[j].y]=v[j].y;\n\t\t}\n\t\tif(flag)printf(\"YES\\n\");\n\t\telse printf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1647001890,
        "uid": 223559,
        "name": "qxp101",
        "ccfLevel": 6,
        "title": "CF891C Envy \u9898\u89e3"
    },
    {
        "content": "[CF891C Envy](http://codeforces.com/problemset/problem/891/C)\n# \u9898\u76ee\u5927\u610f\n>\u7ed9\u51fa\u4e00\u4e2a$n$\u4e2a\u70b9$m$\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u8fb9\u6743\uff0c\u5171$Q$\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fa$k_i$\u6761\u8fb9\uff0c\u95ee\u8fd9\u4e9b\u8fb9\u80fd\u5426\u540c\u65f6\u5728\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002\n\n# Solution\n\u9996\u5148\u660e\u786e\u4e24\u4ef6\u4e8b\uff1a\n\n- \u8fde\u901a\u56fe\u4e2d\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u6240\u6709\u6743\u503c\u7684\u8fb9\u7684\u6570\u91cf\u90fd\u662f\u76f8\u7b49\u7684\u3002\n- \u5404\u6743\u503c\u7684\u8fb9\u4e4b\u95f4\u662f\u65e0\u5f71\u54cd\u7684\u3002\n\n\u5206\u522b\u8bf4\u660e\uff1a\u5bf9\u4e8e\u7b2c\u4e00\u70b9\uff0c\u663e\u7136\uff0c\u7531\u4e8e\u7528$Kruskal$\u6c42\u51fa\u6765\u7684\u7ed3\u679c\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u5982\u679c\u67d0\u4e00\u6743\u503c\u7684\u8fb9\u5c11\u4e86\uff0c\u52bf\u5fc5\u4f1a\u591a\u51fa\u4e00\u6761\u6743\u503c\u66f4\u5927\u7684\u8fb9\uff0c\u5982\u679c\u591a\u4e86\uff0c\u90a3\u4e48\u52bf\u5fc5\u4f1a\u5bfc\u81f4\u540e\u9762\u7684\u8fb9\u4f1a\u65e0\u6cd5\u52a0\u5165\uff0c\u6700\u7ec8\u5bfc\u81f4\u7b54\u6848\u66f4\u52a3\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u70b9\uff0c\u6211\u4eec\u8003\u8651\u6bcf\u4e00\u6761\u8fb9\u662f\u5426\u80fd\u52a0\u5165\u751f\u6210\u6811\u4e2d\uff0c\u5f53\u6743\u503c\u5c0f\u4e8e\u5f53\u524d\u8fb9\u7684\u8fb9\u90fd\u5904\u7406\u8fc7\u540e\uff0c\u6574\u5f20\u56fe\u4f1a\u53d8\u6210\u4e00\u4e2a\u68ee\u6797\uff0c\u5e76\u4e14\u5404\u4e2a\u8fde\u901a\u5757\u4e4b\u95f4\u662f\u6ca1\u6709\u6743\u503c\u5c0f\u4e8e\u5f53\u524d\u8fb9\u7684(~~\u8fd9\u4e0d\u662f\u663e\u7136\u5417~~)\uff0c\u6240\u4ee5\uff0c\u5f53\u5904\u7406\u5230\u5f53\u524d\u7684\u8fb9\u65f6\uff0c\u5982\u679c\u5f53\u524d\u8fb9\u4e0d\u80fd\u52a0\u5165\uff0c\u662f\u4e0d\u53ef\u80fd\u901a\u8fc7\u6539\u53d8\u4e4b\u524d\u7684\u8fde\u63a5\u65b9\u5f0f\uff0c\u4f7f\u5f97\u65b9\u6848\u4ecd\u7136\u5408\u6cd5\u5e76\u4e14\u5f53\u524d\u8fb9\u80fd\u591f\u52a0\u5165\u751f\u6210\u6811\u3002\u6362\u8a00\u4e4b\uff0c\u4e4b\u524d\u6240\u6709\u6743\u503c\u7684\u8fb9\u7684\u8fde\u63a5\u65b9\u5f0f\u548c\u5f53\u524d\u8fb9\u80fd\u5426\u52a0\u5165\u751f\u6210\u6811\u662f\u6ca1\u6709\u5173\u7cfb\u7684\uff0c\u6240\u4ee5\u5404\u6743\u503c\u7684\u8fb9\u4e4b\u95f4\u662f\u65e0\u5f71\u54cd\u7684\u3002\n\n---\n\u660e\u786e\u4e0a\u8ff0\u4e24\u70b9\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u601d\u8003\u8fd9\u9898\u3002\u9996\u5148\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u5c06\u8fb9\u6309\u6743\u503c\u8fdb\u884c\u5206\u7c7b\uff0c\u6bcf\u6b21\u90fd\u5904\u7406\u540c\u4e00\u6743\u503c\u7684\u8fb9\u3002\u6839\u636e\u4e0a\u8ff0\u7684\u6027\u8d28\uff0c\u5982\u679c\u80fd\u77e5\u9053\u6bcf\u6b21\u8be2\u95ee\u7684\u8fb9\u7684\u6743\u503c\u65f6\uff0c\u5e76\u67e5\u96c6\u7684\u72b6\u6001\uff0c\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u5224\u65ad\u8fd9\u6761\u8fb9\u662f\u5426\u80fd\u5728\u751f\u6210\u6811\u4e2d\u3002\u4f46\u662f\u73b0\u5728\u68d8\u624b\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e2a\u505a\u5230\u4e00\u534a\u7684\u5e76\u67e5\u96c6\u3002\n\n\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u8fde\u63a5\u5b8c**\u5c0f\u4e8e**\u67d0\u4e2a\u6743\u503c\u7684\u8fb9\u65f6\uff0c\u8fd9\u4e2a\u6743\u503c\u7684\u8fb9\u6240\u8fde\u63a5\u7684\u8fde\u901a\u5757\u7684\u7f16\u53f7\uff0c\u6839\u636e\u6027\u8d28\u4e8c\uff0c\u8fd9\u4e2a\u7f16\u53f7\u662f\u552f\u4e00\u7684(\u9664\u975e\u662f\u5e76\u67e5\u96c6\u5408\u5e76\u65f6\u4ea7\u751f\u7684\u5dee\u5f02\uff0c\u4f46\u662f\u6240\u6307\u7684\u8fde\u901a\u5757\u65f6\u540c\u4e00\u4e2a)\u3002\u7136\u540e\u62ff\u4e00\u4e2a**\u5d2d\u65b0**\u7684\u5e76\u67e5\u96c6\u53bb\u7ef4\u62a4\u6bcf\u4e2a\u6743\u503c\uff0c\u5728\u5904\u7406\u5b8c\u4e00\u4e2a\u6743\u503c\u540e\u5c31\u8fd8\u539f**\u6539\u53d8\u8fc7**\u7684\u5e76\u67e5\u96c6\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4e24\u4e2a\u6ce8\u610f\u70b9\uff1a\n\u7531\u4e8e\u8981\u8fde\u63a5\u5c0f\u4e8e\u67d0\u4e00\u6743\u503c\u7684\u8fb9\uff0c\u6240\u4ee5\u5728$Kruskal$\u7684\u65f6\u5019\u5fc5\u987b\u8981\u5148\u5b58\u4e0b\u540c\u4e00\u6743\u503c\u7684\u8fb9\uff0c\u7136\u540e\u5728\u9884\u5904\u7406\u5b8c\u6240\u9700\u8981\u7684\u4e1c\u897f\u4e4b\u540e(~~\u81f3\u4e8e\u4ec0\u4e48\u4e1c\u897f\uff0c\u61c2\u5f97\u90fd\u61c2~~)\uff0c\u624d\u80fd\u5c06\u8fb9\u52a0\u5165\u751f\u6210\u6811\u3002\n\n\u540c\u65f6\u6ce8\u610f\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u7528\u6734\u7d20\u7684\u5e76\u67e5\u96c6\uff0c\u4f46\u662f\u8fd9\u6837\u7cbe\u51c6\u7684\u590d\u539f\u5c31\u53ef\u4ee5\u3002\u56e0\u4e3a\u9898\u76ee\u4e2d\u7ed9\u51fa\u8be2\u95ee\u4e2a\u6570\u662f$5\\times10^5$\uff0c\u663e\u7136\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u662f$O(n)$\u7684\u8bdd\uff0c\u60f3\u4e0d$T$\u90fd\u96be\u3002\u4f46\u662f\u6709\u8fd9\u4e48\u4e00\u53e5\u8bdd\n>It is guaranteed that the sum of $k_{i}$  for $1<=i<=q$ does not exceed $5\u00b710^{5}$.\n\n\u8fd9\u5c31\u663e\u7136\uff0c\u53ea\u8981\u6bcf\u6b21\u662f$O(k)$\uff0c\u603b\u7684\u590d\u6742\u5ea6\u662f\u4e0d\u4f1a\u8d85\u51fa$O(n)$\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n---\n\u7efc\u4e0a\uff0c\u6211\u4eec\u603b\u7ed3\u51fa\u4e00\u4e2a\u53ef\u884c\u7684\u65b9\u6848\uff1a\n\u9996\u5148\u7528$Kruskal$\u6765\u9884\u5904\u7406\u51fa\uff0c\u5c0f\u4e8e\u5f53\u524d\u8fb9\u6743\u7684\u6240\u6709\u8fb9\u90fd\u5904\u7406\u540e\uff0c\u5f53\u524d\u8fb9\u6240\u8fde\u63a5\u7684\u8fde\u901a\u5757\u7f16\u53f7\u3002\n\u7136\u540e\u5904\u7406\u8be2\u95ee\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u90fd\u5148\u5bf9\u8fb9\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u4e8e\u540c\u4e00\u8fb9\u6743\u7684\u8fb9\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u52a0\u5165\u751f\u6210\u6811\u4e2d\uff0c\u5229\u7528\u9884\u5904\u7406\u51fa\u7684\u7f16\u53f7\u5373\u53ef\u3002\n\u5982\u679c\u6709\u8fb9\u65e0\u6cd5\u52a0\u5165\uff0c\u5373\u5f62\u6210\u4e86\u73af(\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u5373\u53ef)\uff0c\u90a3\u4e48\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n\u6700\u540e\u590d\u539f\u5e76\u67e5\u96c6\u5373\u53ef\u3002\n\n# Code\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define inf 1ll<<60\nusing namespace std;\nconst int MAXN=5e5+10;\nstruct node{\n\tint u,v,w,id;\n\tvoid input(){\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t}\n\tbool friend operator<(node a,node b){\n\t\treturn a.w<b.w;\n\t}\n}e[MAXN];\nbool cmp(node x,node y){return x.id<y.id;}\nint f[MAXN],conx[MAXN],cony[MAXN];\nvector<node> cur;\nint find(int x){return f[x]==x?x:f[x]=find(f[x]);}\nint main()\n{\n\tint n,m,q;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\te[i].input();\n\t\te[i].id=i;\n\t}\n\tfor(int i=1;i<=n;i++) f[i]=i;\n\tsort(e+1,e+1+m);\n\tint pre=e[1].w,lst=1;\n\tfor(int i=1;i<=m;i++){\n\t\tif(e[i].w==pre) continue;//\u5982\u679c\u548c\u4e0a\u4e00\u6b21\u7684\u6743\u503c\u76f8\u7b49\uff0c\u90a3\u4e48\u5148\u5b58\u7740\n\t\telse{\n\t\t\tfor(int j=lst;j<i;j++){\n\t\t\t\tint fu=find(e[j].u),fv=find(e[j].v);\n\t\t\t\tconx[e[j].id]=fu;cony[e[j].id]=fv;//\u5426\u5219\u5148\u5904\u7406\u8fde\u63a5\u7684\u8fde\u901a\u5757\n\t\t\t}\n\t\t\tfor(int j=lst;j<i;j++){\n\t\t\t\tint fu=find(e[j].u),fv=find(e[j].v);\n\t\t\t\tif(fu!=fv) f[fu]=fv;//\u7136\u540e\u52a0\u5165\u751f\u6210\u6811\n\t\t\t}\n\t\t\tpre=e[i].w;lst=i;\n\t\t}\n\t}\n\tfor(int j=lst;j<=m;j++){\n\t\tint fu=find(e[j].u),fv=find(e[j].v);\n\t\tconx[e[j].id]=fu;cony[e[j].id]=fv;\n\t}\n\tfor(int j=lst;j<=m;j++){\n\t\tint fu=find(e[j].u),fv=find(e[j].v);\n\t\tif(fu!=fv) f[fu]=fv;\n\t}\n\tsort(e+1,e+1+m,cmp);\n\tscanf(\"%d\",&q);\n\tfor(int i=1;i<=n;i++) f[i]=i;\n\twhile(q--){\n\t\tint k,id;\n\t\tscanf(\"%d\",&k);\n\t\tcur.clear();\n\t\tfor(int i=1;i<=k;i++){\n\t\t\tscanf(\"%d\",&id);\n\t\t\tcur.push_back(e[id]);\n\t\t}\n\t\tsort(cur.begin(),cur.end());\n\t\tbool fl=1;\n\t\tfor(int i=0;i<cur.size()&&fl;){\n\t\t\tint u=conx[cur[i].id],v=cony[cur[i].id],j=i+1;\n\t\t\tif(u==v){fl=0;break;}\n\t\t\tf[u]=v;\n\t\t\tfor(j=i+1;j<cur.size()&&cur[j].w==cur[i].w;j++){//\u628a\u540c\u6743\u503c\u7684\u8fb9\u8fdb\u884c\u5904\u7406\n\t\t\t\tu=find(conx[cur[j].id]),v=find(cony[cur[j].id]);\n\t\t\t\tif(u==v){fl=0;break;}//\u6210\u73af\u5c31\u9000\u51fa\n\t\t\t\tf[u]=v;\n\t\t\t}\n\t\t\twhile(i<j)\n\t\t\t\tf[conx[cur[i].id]]=conx[cur[i].id],\n\t\t\t\tf[cony[cur[i].id]]=cony[cur[i].id],i++;//\u590d\u539f\u5e76\u67e5\u96c6\n\t\t}\n\t\tif(fl) puts(\"YES\");\n\t\telse puts(\"NO\");\n\t}\n}\n```",
        "postTime": 1615942018,
        "uid": 292315,
        "name": "ZCETHAN",
        "ccfLevel": 7,
        "title": "CF891C Envy"
    }
]