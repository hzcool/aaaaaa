[
    {
        "content": "## \u524d\u8a00\n\n\u8d5b\u65f6\u6ca1\u5207\u51fa\u6765\uff0c\u4e0b\u5927\u5206\uff0c\u9ebb\u4e86\u3002\n\n\u8d5b\u540e\u4e0d\u6562\u76f8\u4fe1\u8fd9\u73a9\u610f\u53ea\u6709 \\*1900\u3002\n\n## \u89e3\u6cd5\n\n\u672c\u9898\u6709\u4e00\u4e2a\u975e\u5e38\u5173\u952e\u7684 Key Conclusion\uff1a\n\n- \u7b54\u6848\u6700\u591a\u53ea\u6709 $2$ \u79cd:\n\n  1. \u521d\u59cb\u957f\u65b9\u5f62\u7684\u957f\u7b49\u4e8e\u6700\u7ec8 $n$ \u4e2a\u5c0f\u957f\u65b9\u5f62\u4e2d\u6700\u5927\u7684\u957f\uff1b\n  2. \u521d\u59cb\u957f\u65b9\u5f62\u7684\u5bbd\u7b49\u4e8e\u6700\u7ec8 $n$ \u4e2a\u5c0f\u957f\u65b9\u5f62\u4e2d\u6700\u5927\u7684\u5bbd\uff1b\n  \n  \u539f\u7406\uff1a\u7b2c\u4e00\u6b21\u5207\u5272\u5fc5\u7136\u628a\u4e00\u4e2a\u957f\u65b9\u5f62\u5207\u4e0b\u6765\u653e\u8fdb\u7bb1\u5b50\u91cc\uff0c\u5982\u679c\u6a2a\u7740\u5207\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5c0f\u957f\u65b9\u5f62\u7684\u957f\u7b49\u4e8e\u521d\u59cb\u957f\u65b9\u5f62\u7684\u957f\uff1b\u5426\u5219\u5c0f\u957f\u65b9\u5f62\u7684\u5bbd\u7b49\u4e8e\u521d\u59cb\u957f\u65b9\u5f62\u7684\u5bbd\u3002\n  \n\u65e2\u7136\u627e\u5230\u4e86\u53ef\u80fd\u7684\u89e3\uff0c\u90a3\u4e48\u5c31\u5c1d\u8bd5\u68c0\u9a8c\u89e3\u7684\u5408\u6cd5\u6027\u3002\n\n\u4e00\u4e2a\u89e3\u8981\u5408\u6cd5\uff0c\u9996\u5148\u5b83\u7684\u957f\u548c\u5bbd\u90fd\u5fc5\u987b\u662f\u603b\u9762\u79ef\u7684\u56e0\u6570\uff0c\u5982\u679c\u4e0d\u7b26\u5408\u8fd9\u4e2a\u6761\u4ef6\u7684\u4e00\u5b9a\u4e0d\u5408\u6cd5\u3002\n\n\u5982\u679c\u6ee1\u8db3\u4e0a\u9762\u7684\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e0b\u4e00\u6b65\u68c0\u67e5\uff1a\u5177\u4f53\u5730\uff0c\u6211\u4eec\u628a\u88ab\u653e\u8fdb\u7bb1\u5b50\u91cc\u5730\u5c0f\u957f\u65b9\u5f62\u4ece\u7bb1\u5b50\u91cc\u5f80\u5916\u4e00\u4e2a\u4e00\u4e2a\u62ff\uff0c\u5e76\u5c1d\u8bd5\u62fc\u6210\u76ee\u6807\u56fe\u5f62\u3002\u6bcf\u4e00\u6b21\u5148\u62ff\u51fa\u957f\u6700\u5927\u7684\u5c0f\u957f\u65b9\u5f62\uff0c\u5982\u679c\u5b83\u7684\u957f\u7b49\u4e8e\u76ee\u6807\u56fe\u5f62\u7684\u957f\uff0c\u90a3\u4e48\u628a\u5b83\u62fc\u8fdb\u53bb\uff0c\u76ee\u6807\u56fe\u5f62\u7684\u5bbd\u51cf\u53bb\u8be5\u56fe\u5f62\u7684\u5bbd\uff0c\u7bb1\u5b50\u91cc\u51cf\u5c11\u4e00\u4e2a\u957f\u65b9\u5f62\uff1b\u5426\u5219\u5c31\u62ff\u51fa\u5bbd\u6700\u5927\u7684\u5c0f\u957f\u65b9\u5f62\uff0c\u5982\u679c\u5b83\u7684\u5bbd\u7b49\u4e8e\u76ee\u6807\u56fe\u5f62\u7684\u5bbd\uff0c\u90a3\u4e48\u62fc\u8fdb\u53bb\uff0c\u76ee\u6807\u56fe\u5f62\u7684\u957f\u51cf\u53bb\u8be5\u56fe\u5f62\u7684\u957f\uff0c\u5426\u5219\u8be5\u89e3\u4e0d\u5408\u6cd5\u3002\u4e00\u76f4\u5230 $n$ \u4e2a\u5c0f\u957f\u65b9\u5f62\u90fd\u62ff\u5b8c\uff0c\u76ee\u6807\u56fe\u5f62\u7684\u957f\u5bbd\u90fd\u88ab\u51cf\u4e3a $0$\uff0c\u90a3\u4e48\u8be5\u89e3\u5408\u6cd5\u3002\n\n\u5b9e\u73b0\u65f6\u7565\u6709\u4e0d\u540c\uff1a\u6bcf\u4e00\u6b21\u68c0\u67e5\u65f6\u6211\u4eec\u62ff\u51fa\u4e86**\u6240\u6709\u7684**\u957f / \u5bbd\u6700\u5927\u7684\u5c0f\u957f\u65b9\u5f62\uff0c\u5047\u8bbe\u672c\u8f6e\u62ff\u7684\u662f\u957f\u6700\u5927\u7684\u82e5\u5e72\u4e2a\u5c0f\u957f\u65b9\u5f62\uff0c\u90a3\u4e48\u4e0b\u4e00\u6b21\u53ea\u80fd\u62ff\u5bbd\u6700\u5927\u7684\uff08\u56e0\u4e3a\u63a5\u4e0b\u6765\u957f\u6700\u5927\u7684\u5c0f\u957f\u65b9\u5f62\u7684\u957f\u5c31\u6ca1\u529e\u6cd5\u4e0e\u76ee\u6807\u56fe\u5f62\u7684\u957f\u76f8\u7b49\uff09\u3002\n\n\u53ef\u4ee5\u4f7f\u7528 `map` \u7ef4\u62a4\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u5355\u7ec4\u6d4b\u8bd5\u6570\u636e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\u3002\n\n\u653e\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nbool check(int x,int y,vector<pair<int,int> > a,bool f){\n  map<pair<int,int>,int,greater<> > m1,m2;\n  for(auto [x,y]:a)m1[make_pair(x,y)]++,m2[make_pair(y,x)]++;\n  for(int c=0;c<a.size();f^=1){\n    if(f){\n      if(m1.begin()->first.first!=x)return false;\n      while(m1.begin()->first.first==x){\n        y-=m1.begin()->first.second,c++;\n        if(!--m2[make_pair(m1.begin()->first.second,x)])\n          m2.erase(make_pair(m1.begin()->first.second,x));\n        if(!--m1[make_pair(x,m1.begin()->first.second)])\n          m1.erase(make_pair(x,m1.begin()->first.second));\n        // \u8be5\u8f6e\u9700\u8981\u68c0\u67e5\u957f\u6700\u5927\u7684\n      }\n    }\n    else{\n      if(m2.begin()->first.first!=y)return false;\n      while(m2.begin()->first.first==y){\n        x-=m2.begin()->first.second,c++;\n        if(!--m1[make_pair(m2.begin()->first.second,y)])\n          m1.erase(make_pair(m2.begin()->first.second,y));\n        if(!--m2[make_pair(y,m2.begin()->first.second)])\n          m2.erase(make_pair(y,m2.begin()->first.second));\n        // \u8be5\u8f6e\u9700\u8981\u68c0\u67e5\u5bbd\u6700\u5927\u7684\n      }\n    }\n  }\n  return true;\n}\nmain(){\n  ios::sync_with_stdio(false);\n  int t; cin>>t;\n  while(t--){\n    int n,mx=0,my=0,c=0; cin>>n;\n    vector<pair<int,int> > a(n),r;\n    for(auto &[x,y]:a)\n      cin>>x>>y,mx=max(mx,x),my=max(my,y),c+=x*y;\n    if(!(c%mx)&&check(mx,c/mx,a,1))r.emplace_back(mx,c/mx);\n    if(mx!=c/my&&!(c%my)&&check(c/my,my,a,0))r.emplace_back(c/my,my);\n    // \u6ce8\u610f\u4e24\u79cd\u60c5\u51b5\u53ef\u80fd\u4ea7\u751f\u957f\u5bbd\u4e00\u6837\u7684\u56fe\u5f62\uff0c\u8981\u5224\u6389\n    cout<<r.size()<<endl;\n    for(auto [x,y]:r)cout<<x<<' '<<y<<endl;\n  }\n  return 0;\n}\n```",
        "postTime": 1682140804,
        "uid": 556366,
        "name": "zyc212303",
        "ccfLevel": 5,
        "title": "CF1819B The Butcher \u9898\u89e3"
    }
]