[
    {
        "content": "\u672c\u9898\u7edf\u8ba1\u7684\u662f $n$ \u4f4d\u6570\u4e2d\uff08\u5141\u8bb8\u524d\u5bfc\u96f6\uff09\u5728 $[l,r]$ \u4e4b\u95f4\u7684\u5b50\u4e32\u8ba1\u6570\u7684\u6700\u5927\u503c\u53ca\u65b9\u6848\u3002\n\n\u8ba1\u6570\u8fd9\u4e2a\u5b50\u4e32\u76f8\u5f53\u4e8e\u662f\u8ba1\u6570\u5b57\u5178\u5e8f\u5728 $l,r$ \u4e4b\u95f4\u7684\u5b50\u4e32\u3002\n\n\u4e00\u4e2a ~~naive\u7684~~ \u60f3\u6cd5\u662f\u628a $[l,r]$ \u95f4\u7684\u4e32\u5168\u585e\u5230 $AC$ \u81ea\u52a8\u673a\u91cc\uff0c\u7136\u540e $dp$ \uff0c\u8003\u8651\u8282\u70b9 $i$ \u5bf9\u7b54\u6848\u7684\u8d21\u732e $g[i]$ \u3002\u8fd9\u4e2a\u8d21\u732e\u9664\u4e86 $i$ \u4ee3\u8868\u7684\u4e32\u81ea\u8eab\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u8fd8\u5e94\u5305\u62ec $fail[i]$ \u7684\u8d21\u732e\uff08\u56e0\u4e3a\u5b83\u540c\u65f6\u4e5f\u51fa\u73b0\u4e86\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c$g[i]$ \u5e94\u8be5\u662f\u8282\u70b9 $i$ \u8df3 $fail$ \u80fd\u8df3\u5230\u7684\u70b9\u7684\u8d21\u732e\u603b\u548c\u3002\uff08\u4e5f\u8bb8\u662f $AC$ \u81ea\u52a8\u673a $dp$ \u5e38\u89c4\u64cd\u4f5c\uff1f\uff09\n\n\u6c42 $g[i]$ \u5f88\u7b80\u5355\uff0c\u5c31\u662f\u63d2\u5165\u65f6\u6807\u8bb0\u4e32\u7684\u8d21\u732e\uff0c\u7136\u540e\u5728 $getfail$ \u7684\u65f6\u5019\u6bcf\u6b21\u67e5\u5230\u4e00\u4e2a\u540e\u7ee7\u8282\u70b9\u5c31 $g[to]+=g[fail[to]]$ \u5c31\u884c\u3002\n\n\u7ee7\u7eed\u8fd9\u4e2a\u66b4\u529b\u7684\u601d\u8def\uff0c\u8003\u8651\u8bbe\u8ba1 $dp$\uff0c\u72b6\u6001 $dp[rt][len]$ \u8868\u793a\u5728\u8282\u70b9 $rt$ \u4e0a\u7ec4\u6210\u7684 $len$ \u4f4d\u6570\u65b9\u6848\u6570\u3002\u663e\u7136\u53ef\u4ee5\u62ff $dp[rt][len]+g[son]$ \u53bb\u66f4\u65b0 $dp[son][len+1]$ \uff0c\u7b54\u6848\u5c31\u662f $\\max \\{ dp[i][n]\\}$\u3002\n\n\u8fd9\u4e2aTLE\u81ea\u52a8\u673a+ $dp$ \u65b9\u6cd5\u6548\u7387\u4f4e\u4e0b\uff0c\u6211\u4eec\u8003\u8651\u4f18\u5316\u5b83\u3002\n\n$[l,r]$ \u95f4\u7684\u4e32\u6570\u91cf\u5f88\u5927\uff0c\u8fd9\u964d\u4f4e\u4e86 $dp$ \u7684\u6548\u7387\u3002\u4f46\u8fd9\u4e9b\u4e32\u5e76\u4e0d\u90fd\u6709\u7528\uff0c\u6bd4\u5982 $[1000,2222]$ \u95f4\uff0c\u679a\u4e3e\u5230 $11\\_\\ \\_$ \u65f6\u540e\u9762\u65e0\u8bba\u586b\u4ec0\u4e48\u90fd\u884c\u3002\u8fd9\u4e0d\u53ef\u907f\u514d\u5730\u4ea7\u751f\u4e86\u4e00\u5806\u6ee1\u5341\u53c9\u6811\u3002\u6240\u4ee5\u73b0\u5728\u9700\u8981\u53ca\u65f6\u5728\u5b83\u4ea7\u751f\u6ee1\u5341\u53c9\u6811\u524d\u5236\u6b62\u5b83\uff0c\u5373\u5728\u5b83\u51fa\u73b0\u586b\u4ec0\u4e48\u90fd\u884c\u7684\u60c5\u51b5\u65f6\uff08\u79f0\u8fd9\u79cd\u8282\u70b9\u4e3a**\u7ec8\u6b62\u70b9**\uff09\uff0c\u76f4\u63a5\u8ba1\u4e00\u4e2a\u8d21\u732e\uff0c\u5373 $g[rt][len]++$\u3002\u6ce8\u610f\u8fd9\u91cc\u8fd8\u8981\u8bb0\u5f55\u5b83\u5360\u7528\u7684\u957f\u5ea6\uff08\u5373\u67ff\u5b50\u91cc\u7684 $len$ \uff09\uff0c\u5982\u679c\u5269\u4e0b\u7684\u4f4d\u6570\u4e0d\u591f\u586b\u6ee1\uff0c\u5c31\u4e0d\u80fd\u4ea7\u751f\u8d21\u732e\u3002\n\n\u8fd9\u65f6 $g[i][len]$ \u7684\u7684\u5904\u7406\u65b9\u5f0f\u4e0d\u53d8\uff0c\u8f6c\u79fb\u53d8\u6210\u4e86\u7528 $dp[rt][len]+\\sum \\limits ^{n-len-1} _ {k=0} g[son][k]$ \u66f4\u65b0 $dp[son][len+1]$ \u3002\u6240\u4ee5\u9700\u8981\u5904\u7406\u51fa $g[son]$ \u7684\u524d\u7f00\u548c\uff0c\u7136\u540e $dp$ \u5373\u53ef\u3002\n\n\u73b0\u5728\u5269\u4e0b\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u6309\u4e0a\u9762\u8981\u6c42\u5efa\u51fa$trie$\u6811\u3002\n\n\u7528\u7c7b\u4f3c\u6570\u4f4d $dp$ \u7684\u601d\u60f3\uff0c\u9700\u8981\u5206\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n+ $l,r$ \u957f\u5ea6\u76f8\u7b49\uff1a\n\n\t1.\u5f53\u524d\u8282\u70b9\u662f $l,r$ \u5171\u540c\u524d\u7f00\uff1a\u4e0b\u4e00\u8282\u70b9\u4e3a\u7ec8\u6b62\u70b9\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e0b\u4e00\u70b9\u6570\u503c $num \\in (l_i,r_i)$ \u3002\n    \n    2.\u5f53\u524d\u8282\u70b9\u53ea\u662f $l$ \u524d\u7f00\uff1a\u8981\u6c42\u4e0b\u4e00\u70b9\u6570\u503c $num \\in (l_i,9]$ \u3002\n    \n    3.\u5f53\u524d\u8282\u70b9\u53ea\u662f $r$ \u524d\u7f00\uff1a\u8981\u6c42\u4e0b\u4e00\u70b9\u6570\u503c $num \\in [0,r_i)$ \u3002\n    \n\t4.\u5f53\u524d\u8282\u70b9\u662f $l$ \u6216 $r$ \u7ec8\u70b9\uff0c\u5bf9\u5f53\u524d\u70b9\u8bb0\u5f55\u8d21\u732e\uff0c\u5373 $g[rt][0]++$.\n    \n+ $l,r$ \u957f\u5ea6\u4e0d\u7b49:\n\t\n    \u60c5\u51b5 $2,3,4$\u540c\u4e0a\u3002\n    \n    \u8fd8\u9700\u8981\u989d\u5916\u6dfb\u52a0\u4e00\u79cd\u60c5\u51b5\uff1a\u5bf9\u4e8e $len \\in (len_l,len_r)$\u7684\u4e32\uff0c\u663e\u7136\u90fd\u662f\u7b26\u5408\u9898\u610f\u7684\uff0c\u56e0\u6b64\u8981\u5bf9\u6bcf\u4e00\u4e2a $g[son[0]][len-1]$ \u8bb0\u5f55\u8d21\u732e\u3002\n    \n\u8fd9\u6837\u5efa\u6811\u5c31\u5b8c\u6210\u4e86\uff0c$getfail$ \u548c\u539f\u6765\u51e0\u4e4e\u6ca1\u6709\u53d8\u5316\uff0c\u53ea\u9700\u8981\u987a\u4fbf\u5904\u7406\u4e0b $g$ \u6570\u7ec4\u3002\n\n$dp$ \u76f4\u63a5\u987a\u5e8f\u679a\u4e3e\u957f\u5ea6\u548c\u5f53\u524d\u8282\u70b9\uff0c\u9012\u63a8\u5373\u53ef\u3002\u6bcf\u4e2a\u6570\u4f4d\u4ea7\u751f\u81f3\u591a\u5341\u4e2a\u65b0\u8282\u70b9\uff0c\u6545\u603b\u590d\u6742\u5ea6\u5927\u6982\u662f $O(|\\Sigma|^2N\\log R)$\uff0c$R$\u4e3a\u503c\u57df $10^{800}$\uff0c$|\\Sigma|=10$.\uff08\u663e\u7136\u8dd1\u4e0d\u6ee1\uff09\n\n~~\u5b8c\u7ed3\u6492\u82b1~~\n\n\u54e6\u5bf9\uff0c\u8fd8\u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u65b9\u6848\u3002\n\n\u5148\u679a\u4e3e\u6240\u6709 $dp[rt][n]$ \u627e\u5230\u7b49\u4e8e\u7b54\u6848\u7684\u8282\u70b9\u5e76\u6807\u8bb0\uff0c\u518d\u4ece\u540e\u5411\u524d\u63a8\u3002\u627e\u5230\u6240\u6709\u80fd\u5230\u8fbe\u7b54\u6848\u7684\u8def\u5f84\uff0c\u518d\u6309\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u65b9\u5f0f\u904d\u5386\u8f93\u51fa\u5373\u53ef\u3002\n\n\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\uff0c\u770b\u4ee3\u7801\u5427\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\n#define for_each(i,bg,ed) for(int i=bg;i<ed;++i)\n\nusing namespace std;\nconst int M=2e4+10,N=2e3+10,SIG=10;\nint ch[M][SIG],fail[M], //AC\u81ea\u52a8\u673a\u90e8\u5206 \n\tg[M][N],\t\t\t//g[u][len]:\u8282\u70b9 u \u5904\u540e\u63a5\u957f\u5ea6\u4e3a len \u7684\u81ea\u7531\u6570\u7801\u7684\u65b9\u6848\u6570\u3002\n\tdp[M][N],\t\t\t//dp[u][pos]:\u5339\u914d\u5230 pos \u5904\uff0c\u5728\u8282\u70b9 u \u4e0a\u7684\u5339\u914d\u6570\u3002 \n\tcnt,n,len_l,len_r,ans;\nstring sl,sr,str;\n\ninline void Read(){\n\tcin>>sl>>sr>>n;\n\tlen_l=sl.size();\n\tlen_r=sr.size(); \n\tfor_each(i,0,len_l)sl[i]-='0';\n\tfor_each(i,0,len_r)sr[i]-='0';\n}\n\ninline void CreateNode(int rt,int son_id){if(!ch[rt][son_id])ch[rt][son_id]=++cnt;}\n//\u5224\u65ad\u5e76\u65b0\u5efa\u8282\u70b9 \n \ninline void RegMsg(int rt,int l,int r,int len){\n\tfor_each(nxt,l,r){\n\t\tCreateNode(rt,nxt);\n\t\tg[ch[rt][nxt]][len]++;\n\t}\n}//\u5bf9\u6bcf\u4e2a\u513f\u5b50\u8bb0\u5f55\u4fe1\u606f \n\ninline void MoveIter(int &rt,int num){\n\tCreateNode(rt,num);\n\trt=ch[rt][num];\n}//\u79fb\u52a8\u6839\u8282\u70b9\u3002 \n\n//\u5904\u7406\u4e00\u4e2ag\u6570\u7ec4\uff0c\u7701\u7565\u53ef\u4ee5\u81ea\u7531\u5b89\u6392\u7684\u90e8\u5206\uff0c\u4ee5\u51cf\u5c11AC\u81ea\u52a8\u673a\u8282\u70b9\u6570\u3002\nvoid BuildTree(){\n\tint rt_l=0,rt_r=0;\n\tif(len_l==len_r){\t\t\t\t\t\t\t//Case A:l,r\u957f\u5ea6\u76f8\u7b49 \n\t  for_each(i,1,len_l+1){\n\t  \tint num_l=sl[i-1],num_r=sr[i-1]; \n\t    if(rt_l==rt_r){\t\t\t\t\t\t\t//case 1:\u5f53\u524d\u8282\u70b9\u5c5e\u4e8el,r\u5171\u540c\u524d\u7f00\n\t      RegMsg(rt_l,num_l+1,num_r,len_l-i);\t\t\t\n\t\t  MoveIter(rt_l,num_l);\n\t\t  MoveIter(rt_r,num_r);\n\t\t}else{\t\t\t\t\t\t\t\t\t//case 2:\u5206\u522b\u5904\u7406l,r\u524d\u7f00\u3002 \n\t\t  RegMsg(rt_l,num_l+1,10,len_l-i);\t\t\t\n\t\t  RegMsg(rt_r,0,num_r,len_r-i);\n\t\t  MoveIter(rt_l,num_l);\n\t\t  MoveIter(rt_r,num_r);\n\t\t}\n\t  }\n\t  g[rt_l][0]++;\n\t  if(rt_l!=rt_r)g[rt_r][0]++;\n\t}else{\t\t\t\t\t\t\t\t\t//Case B:l,r\u957f\u5ea6\u4e0d\u7b49 \n\t  for_each(i,1,len_l+1){\t\t\t\t//\u5904\u7406 l \n\t  \tint num_l=sl[i-1];\n\t  \tRegMsg(rt_l,num_l+1,10,len_l-i);\n\t  \tMoveIter(rt_l,num_l);\n\t  }\n\n\t  for_each(i,1,len_r+1){\t\t\t\t//\u5904\u7406 r \n\t  \tint num_r=sr[i-1];\n\t  \tRegMsg(rt_r,0,num_r,len_r-i);\n\t  \tMoveIter(rt_r,num_r);\n\t  }\n\t  g[rt_l][0]++,g[rt_r][0]++;\n      for_each(i,len_l+1,len_r)\t\t\t\t//\u5904\u7406\u957f\u5ea6\u4ecb\u4e8e len_l \u548c len_r \u7684\u90e8\u5206\u3002 \n        for_each(nxt,1,10){\n    \tif(!ch[0][nxt])ch[0][nxt]=++cnt;\n    \tg[ch[0][nxt]][i-1]++;\n      }\n\t}\n\tch[0][0]=0;\n}\n\nqueue<int> q;\nvoid GetFail(){\n\tfor(int i=0;i<SIG;++i)\n\t  if(ch[0][i])\n\t\tq.push(ch[0][i]);\n\twhile(!q.empty()){\n\t\tint it=q.front();\n\t\tq.pop();\n\t\tfor(int i=0;i<SIG;++i){\n\t\t\tint &to=ch[it][i];\n\t\t\tif(to){\n\t\t\t  q.push(to),fail[to]=ch[fail[it]][i];\n\t\t\t  for_each(i,0,n+1)g[to][i]+=g[fail[to]][i];//\u7ee7\u627ffail\u6811\u7236\u4eb2\u7684g\u503c\u3002 \n\t\t\t}else to=ch[fail[it]][i];\n\t\t}\n\t}\n\tfor_each(rt,0,cnt+1)\n\t  for_each(i,0,n+1)\n\t  \tg[rt][i]+=g[rt][i-1];\n}\n\nvoid GetAns(){\n\tmemset(dp,-1,sizeof(dp));\n\tdp[0][0]=0;\n\tfor_each(i,0,n+1)\t\n\t  for_each(rt,0,cnt+1)\n\t    if(dp[rt][i]>=0){\n\t      dp[rt][i]+=g[rt][n-i];\n\t      for_each(nxt,0,10)\n\t      \tdp[ch[rt][nxt]][i+1]=max(dp[rt][i],dp[ch[rt][nxt]][i+1]);\n\t\t}\n\tfor_each(rt,0,cnt+1)ans=max(ans,dp[rt][n]);\n\tcout<<ans<<endl;\n}\n\nbool reg[M][N];//\u8bb0\u5f55\u65b9\u6848 \nvoid GetSolution(){\n\tfor_each(rt,0,cnt+1)\n\t  if(dp[rt][n]==ans)\n\t    reg[rt][n]=1;\n\tfor(int len=n-1;~len;len--)\n      for_each(rt,0,cnt+1)\n        if(dp[rt][len]>=0)\n          for_each(nxt,0,10)\n      \t\tif(reg[ch[rt][nxt]][len+1]&&dp[ch[rt][nxt]][len+1]==dp[rt][len]+g[ch[rt][nxt]][n-len-1]){\n        \t  reg[rt][len]=1;\n\t\t\t  break;\n      \t\t}\n    int rt=0;\n\tfor_each(len,0,n)\n      for_each(nxt,0,10)\n      \tif(reg[ch[rt][nxt]][len+1]&&dp[ch[rt][nxt]][len+1]==dp[rt][len]+g[ch[rt][nxt]][n-len-1]){\n      \t  putchar('0'+nxt);\n      \t  rt=ch[rt][nxt];\n\t\t  break;\n      \t}\n}\n\nint main(){\n\tRead();\n\tBuildTree();\n\tGetFail();\n\tGetAns();\n\tGetSolution();\n}\n\n```\n",
        "postTime": 1621695486,
        "uid": 231710,
        "name": "zhouyixian",
        "ccfLevel": 8,
        "title": "CF1110H Modest Substrings \u9898\u89e3"
    },
    {
        "content": "\u795e\u9898orz\u3002\n\n\u9996\u5148\u8fd9\u4e2a\u4ef7\u503c\u7684\u610f\u601d\u662f\u201c\u5b57\u5178\u5e8f\u5728$l$\u548c$r$\u4e4b\u95f4\u7684\u5b50\u4e32\u4e2a\u6570\u201d\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6709\u8fd9\u6837\u4e00\u4e2a\u66b4\u529b\uff0c\u628a$l$\u548c$r$\u4e4b\u95f4\u6240\u6709\u7684\u6570\u6216\u8005\u53eb\u4e32\u641e\u51fa\u6765\uff0c\u7136\u540e\u53d8\u6210\u4e86\u7ecf\u5178\u7684AC\u81ea\u52a8\u673a\u4e0a$dp$\u7684\u95ee\u9898\u3002\u505a\u6cd5\u662f\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u4e32\u5efa\u4e2aAC\u81ea\u52a8\u673a\uff0c\u90a3\u4e48\u8fd9\u4e9b\u4e32\u53ea\u8981\u51fa\u73b0\u8fc7\u4e00\u6b21\u5c31\u4f1a\u628a\u7b54\u6848+1\u3002\u6211\u4eec\u4ee4$g[i]$\u4e3a\u8d70\u5230\u8282\u70b9$i$\u80fd\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c\u7136\u540e\u6784\u5efa\u7684\u65f6\u5019\u8ba9$g[i]+=g[fail[i]]$\u56e0\u4e3a$fail$\u6811\u7956\u5148\u7684\u8282\u70b9\u8868\u793a\u7684\u524d\u7f00\u4e00\u5b9a\u5728\u8d70\u5230$i$\u7684\u65f6\u5019\u51fa\u73b0\u5728\u5f53\u524d\u7ed3\u5c3e\u4e86\u3002\u7136\u540e\u5c31$dp[i][j]$\u957f\u5ea6\u4e3a$i$\uff0c\u5f53\u524d\u5728$j$\u8282\u70b9\u7684\u6700\u5927\u4ef7\u503c\uff0c\u663e\u7136\u6709\u8f6c\u79fb$dp[i][j]+g[ch[j]]->dp[i+1][ch]$\u3002\u81f3\u4e8e\u7b54\u6848\u7684\u6784\u9020\uff0c\u6211\u4eec\u5728$dp$\u5b8c\u4e4b\u540e\u5012\u7740\u6765\u4e00\u904d\uff0c\u4ee4$mxdp[i][j]$\u8868\u793a\u4ece$dp[i][j]$\u8fd9\u4e2a\u72b6\u6001\u5f00\u59cb\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u6700\u5927\u7b54\u6848\u4f1a\u662f\u5565\u3002\u6211\u4eec\u4ece\u524d\u5f80\u540e\u6784\u9020\uff08\u522b\u5fd8\u4e86\u6211\u4eec\u662f$dp$\u51fa\u4e86$Trie$\u56fe\u4e0a\u7684\u4e00\u6761\u8def\u5f84\uff09\uff0c\u5047\u8bbe\u5f53\u524d\u5728\u4e00\u4e2a\u72b6\u6001$dp[i][j]$\uff0c\u90a3\u4e48\u6211\u4eec\u8d2a\u5fc3\u7684\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u51fa\u8fb9\uff0c\u5982\u679c\u53d1\u73b0$dp[i+1][ch]$\u53ef\u4ee5\u7531$dp[i][j]$\u8f6c\u79fb\u8fc7\u53bb\uff0c\u5e76\u4e14$mxdp[i+1][ch]$\u5f97\u5230\u7684\u662f\u6700\u5927\u7b54\u6848\u7684\u8bdd\u90a3\u4e48\u5c31\u53ef\u4ee5\u8df3\u5230$dp[i+1][ch]$\u4e86\u3002\n\n\u6211\u4eec\u8003\u8651$l$\u548c$r$\u7279\u522b\u5927\u7684\u65f6\u5019\u600e\u4e48\u505a\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u66b4\u529b\u63d2\u5165\u7684$Trie$\u6811\u4e0a\uff0c\u6709\u5f88\u591a\u5b50\u6811\u90fd\u662f\u6ee110\u53c9\u6811\uff0c\u6211\u4eec\u6309\u7167\u6570\u4f4d$dp$\u90a3\u5957\u7406\u8bba\u4f1a\u53d1\u73b0**\u4ece\u4e00\u4e2a\u524d\u7f00\u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u82e5\u5e72\u4f4d\u53ef\u4ee5\u968f\u4fbf\u586b**\uff0c\u6240\u4ee5\u5b83\u5448\u73b0\u51fa\u4e86\u6ee110\u53c9\u6811\u3002\u90a3\u4e48\u6211\u4eec\u5957\u8def\u7684\u8003\u8651\u628a\u5df2\u7ecf\u5f88\u6e05\u695a\u4e4b\u540e\u80fd\u591f\u968f\u4fbf\u586b\u7684\u72b6\u6001\u7f29\u51cf\u6389\u3002\n\n\u6ce8\u610f\u5230\u4e0a\u9762\u90a3\u4e2a\u66b4\u529b$dp$\u662f\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u7edf\u8ba1\u6709\u591a\u5c11\u6a21\u677f\u4e32\u4ee5\u5b83\u4e3a\u7ed3\u5c3e\uff0c\u4f46\u662f\u6211\u4eec\u5728\u8fd9\u91cc\u5219\u4e0d\u80fd\u8fd9\u4e48\u505a\uff0c\u56e0\u4e3a\u53ea\u6709\u5230\u8fbe\u6ee110\u53c9\u6811\u5b50\u6811\u7684\u5e95\u90e8\u624d\u80fd\u591f\u88ab\u7edf\u8ba1\u5230\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u5230\u8fbe\u4e00\u4e9b\u70b9\u7684\u65f6\u5019\u77e5\u9053\u662f\u4e0d\u662f\u4ee5\u540e\u53ea\u8981\u586b\u4e86\u67d0\u4e9b\u957f\u5ea6\uff08\u6ce8\u610f\u662f\u67d0\u4e9b\u957f\u5ea6\uff0c\u800c\u4e0d\u662f\u4efb\u610f\u957f\u5ea6\u90fd\u884c\uff09\u7684\u4efb\u610f\u4e32\u90a3\u4e48\u5c31\u4e00\u5b9a\u80fd\u4ea7\u751f1\u7684\u8d21\u732e\u3002\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u628a\u7edf\u8ba1\u8d21\u732e\u8fd9\u4e00\u6b65\u653e\u5230\u7ed3\u5c3e\u4e4b\u524d\u4e5f\u5c31\u662f\u8fd9\u4e9b\u6240\u8c13\u7684\u201c\u89e3\u653e\u4f4d\u201d\u7684\u70b9\u4e0a\u3002\u6211\u4eec\u8bbe$g[i][j]$\u8868\u793a\u4ece$i$\u70b9\u51fa\u53d1\u8d70$j$\u6b65\u80fd\u591f\u4ea7\u751f\u7684\u8d21\u732e\u662f\u591a\u5c11\uff0c\u5373\u5982\u679c\u8d70\u5230$i$\u70b9\uff0c\u4e4b\u540e\u7684$j$\u4f4d\u968f\u4fbf\u586b\u90fd\u80fd**\u5728$j$\u6b65\u4e4b\u540e\u7684\u7ed3\u5c3e**\u4ea7\u751f$g[i][j]$\u7684\u8d21\u732e\uff0c\u6211\u4eec\u53ea\u662f\u51fa\u4e8e\u4e4b\u540e\u586b\u4ec0\u4e48\u90fd\u80fd\u5f97\u5230\u8d21\u732e\u8fd9\u4e00\u8003\u8651\u5728$i$\u70b9\u5c31\u63d0\u524d\u8ba1\u5165\u7b54\u6848\u7684\u3002\n\n\u8003\u8651\u600e\u4e48\u6784\u9020\u8fd9\u4e2a\u7f29\u51cf\u72b6\u6001\u7684AC\u81ea\u52a8\u673a\uff0c\u8fd9\u548c\u666e\u901a\u7684\u6570\u4f4ddp\u6709\u70b9\u76f8\u4f3c\uff0c\u4f46\u662f\u53c8\u6709\u70b9\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u666e\u901a\u7684\u6570\u4f4ddp\u6211\u4eec\u4e00\u822c\u90fd\u662f\u7ed9\u5b83\u505a\u524d\u7f00\u548c\u8f6c\u6210\u53ea\u8003\u8651\u4e0a\u9650\u7684\u95ee\u9898\u3002\u4f46\u662f\u8fd9\u9898\u5e76\u6ca1\u6cd5\u505a\u524d\u7f00\u548c\uff0c\u5fc5\u987b\u540c\u65f6\u8003\u8651\u4e0a\u9650\u548c\u4e0b\u9650\u3002\u6211\u4eec\u5957\u8def\u7684\u679a\u4e3e\u4e00\u4e2a\u524d\u7f00\uff0c\u8fd9\u4e2a\u524d\u7f00\u53ef\u80fd\u662f\uff1a\u2460\u516c\u5171\u524d\u7f00\uff0c\u2461$l$\u7684\u524d\u7f00\uff0c\u2462$r$\u7684\u524d\u7f00\u3002\u663e\u7136\u4e00\u4e2a\u80fd\u591f\u6210\u4e3a\u201c\u89e3\u653e\u4f4d\u201d\u7684\u70b9\u80af\u5b9a\u662f\u4e00\u4e2a\u4e0d\u662f\u524d\u7f00\u7684\u70b9\uff08\u5373\u4e00\u4e2a\u524d\u7f00\u52a0\u4e0a\u4e00\u4e2a\u5176\u4ed6\u5b57\u7b26\uff09\uff0c\u9996\u5148\u7ed3\u5c3e\u957f\u5ea6\u5728$[|l|+1,|r|-1]$\u7684\u80af\u5b9a\u53ef\u4ee5\uff0c\u957f\u5ea6\u5728$|l|$\u548c$|r|$\u7684\u8fd8\u8981\u6839\u636e\u5f53\u524d\u524d\u7f00\u4e0e$l,r$\u7684\u5b57\u5178\u5e8f\u5927\u5c0f\u8ba8\u8bba\u3002~~\u53cd\u6b63\u8fd9\u5757\u7ec6\u8282\u633a\u591a\u7684\u591a\u8ba8\u8bba\u51e0\u4e0b\u5c31\u884c\u4e86~~\u53e6\u5916\u6ce8\u610f\u4e0d\u8981\u5f15\u5165\u524d\u5bfc0\u7684\u524d\u7f00\uff0c\u5e76\u4e14\u6700\u540e\u7684\u65f6\u5019\u6211\u4eec\u8fd8\u8981\u7279\u5224$l$\u548c$r$\u7684\u8282\u70b9\u628a\u5b83\u4eec\u7684$g[][0]=1$\u3002\u7136\u540e\u8fd9\u6837\u5c31\u53ef\u4ee5\u628aAC\u81ea\u52a8\u673a\u4e0e$g$\u6570\u7ec4\u641e\u51fa\u6765\u4e86\u3002\n\n\u7136\u540e\u5c31\u8ddf\u4e0a\u9762\u7684\u66b4\u529b$dp$\u4e00\u6837\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u7684\u8f6c\u79fb\u5c31\u8981\u53d8\u6210$dp[i][j]+\\sum_{k=0}^{n-i-1}g[ch][k]->dp[i+1][ch]$\uff0c\u56e0\u4e3a\u54b1\u4eec\u8fd9\u662f\u63d0\u524d\u7edf\u8ba1\u8d21\u732e\uff0c\u5e76\u4e14\u4e4b\u540e\u4e0d\u80fd\u8d70\u8d85\u8fc7$n-i-1$\u6b65\uff0c\u6240\u4ee5\u8fd8\u8981\u5bf9$g$\u505a\u4e2a\u524d\u7f00\u548c\uff0c\u5e76\u4e14$g$\u6570\u7ec4\u4f9d\u7136\u8981\u4ece$fail$\u7956\u5148\u7ee7\u627f\u8fc7\u6765\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\nusing namespace std;\nnamespace ywy {\n\tint trie[30001][10], fail[30001], dp[2001][30001], mxdp[2001][30001], g[30001][811];\n\tvector<int> dl, dr;\n\tint que[100001], gn = 1;\n\tvoid dfs(int pos, int cur, int op, int dayu, int xiaoyu) {\n\t    if (pos == dr.size()) {\n\t        g[cur][0] = 1;\n\t        return;\n\t    }\n\t    if (op == 1) {\n\t        for (register int i = (cur == 0); i < 10; i++) {\n\t            if (!trie[cur][i])\n\t                trie[cur][i] = gn, gn++;\n\t            if (pos < dl.size() && i == dl[pos])\n\t                continue;\n\t            if (i == dr[pos])\n\t                continue;\n\t            for (register int j = max((int)dl.size() + 1, pos + 1); j < dr.size(); j++)\n\t                g[trie[cur][i]][j - pos - 1] = 1;\n\t            if (dl.size() >= pos + 1 && i > dl[pos]) {\n\t                if (!(dl.size() == dr.size() && i >= dr[pos]))\n\t                    g[trie[cur][i]][dl.size() - pos - 1] = 1;\n\t            }\n\t            if (i < dr[pos]) {\n\t                if (!(dl.size() == dr.size() && i <= dl[pos]))\n\t                    g[trie[cur][i]][dr.size() - pos - 1] = 1;\n\t            }\n\t        }\n\t        if (pos < dl.size() && dl[pos] == dr[pos])\n\t            dfs(pos + 1, trie[cur][dl[pos]], 1, 0, 0);\n\t        else {\n\t            if (pos < dl.size())\n\t                dfs(pos + 1, trie[cur][dl[pos]], 2, dl[pos] > dr[pos], 0);\n\t            dfs(pos + 1, trie[cur][dr[pos]], 3, 0, (pos < dl.size() && dl[pos] > dr[pos]));\n\t        }\n\t        return;\n\t    }\n\t    if (op == 2) {\n\t        if (pos == dl.size()) {\n\t            for (register int i = dl.size(); i < dr.size(); i++) g[cur][i - pos] = 1;\n\t            if (!dayu)\n\t                g[cur][dr.size() - pos] = 1;\n\t            return;\n\t        }\n\t        for (register int i = 0; i < 10; i++) {\n\t            if (!trie[cur][i])\n\t                trie[cur][i] = gn, gn++;\n\t            if (i == dl[pos])\n\t                continue;\n\t            for (register int j = dl.size() + 1; j < dr.size(); j++) g[trie[cur][i]][j - pos - 1] = 1;\n\t            if (!dayu && !(dl.size() == dr.size() && i <= dl[pos]))\n\t                g[trie[cur][i]][dr.size() - pos - 1] = 1;\n\t            if (i > dl[pos])\n\t                g[trie[cur][i]][dl.size() - pos - 1] = 1;\n\t        }\n\t        dfs(pos + 1, trie[cur][dl[pos]], 2, dayu, 0);\n\t        return;\n\t    }\n\t    for (register int i = 0; i < 10; i++) {\n\t        if (!trie[cur][i])\n\t            trie[cur][i] = gn, gn++;\n\t        if (i == dr[pos])\n\t            continue;\n\t        for (register int j = max((int)dl.size() + 1, pos + 1); j < dr.size(); j++)\n\t            g[trie[cur][i]][j - pos - 1] = 1;\n\t        if (pos < dl.size() && !xiaoyu && !(dl.size() == dr.size() && i > dr[pos]))\n\t            g[trie[cur][i]][dl.size() - pos - 1] = 1;\n\t        if (i < dr[pos])\n\t            g[trie[cur][i]][dr.size() - pos - 1] = 1;\n\t    }\n\t    dfs(pos + 1, trie[cur][dr[pos]], 3, 0, xiaoyu);\n\t}\n\tchar str[100001];\n\tvoid ywymain() {\n\t    cin >> str;\n\t    int len = strlen(str);\n\t    for (register int i = 0; i < len; i++) dl.push_back(str[i] - '0');\n\t    cin >> str;\n\t    len = strlen(str);\n\t    for (register int i = 0; i < len; i++) dr.push_back(str[i] - '0');\n\t    dfs(0, 0, 1, 0, 0);\n\t    int cur = 0;\n\t    for (register int i = 0; i < dl.size(); i++) {\n\t        if (!trie[cur][dl[i]])\n\t            trie[cur][dl[i]] = gn, gn++;\n\t        cur = trie[cur][dl[i]];\n\t    }\n\t    g[cur][0] = 1;\n\t    cur = 0;\n\t    for (register int i = 0; i < dr.size(); i++) {\n\t        if (!trie[cur][dr[i]])\n\t            trie[cur][dr[i]] = gn, gn++;\n\t        cur = trie[cur][dr[i]];\n\t    }\n\t    g[cur][0] = 1;\n\t    int head = 0, tail = 0;\n\t    for (register int i = 0; i < 10; i++) {\n\t        if (trie[0][i])\n\t            que[tail] = trie[0][i], tail++;\n\t    }\n\t    while (head < tail) {\n\t        int me = que[head];\n\t        head++;\n\t        for (register int i = 1; i <= dr.size(); i++) g[me][i] += g[me][i - 1];\n\t        for (register int i = 0; i <= dr.size(); i++) g[me][i] += g[fail[me]][i];\n\t        for (register int i = 0; i < 10; i++) {\n\t            if (trie[me][i]) {\n\t                fail[trie[me][i]] = trie[fail[me]][i];\n\t                que[tail] = trie[me][i];\n\t                tail++;\n\t            } else {\n\t                trie[me][i] = trie[fail[me]][i];\n\t            }\n\t        }\n\t    }\n\t    int n;\n\t    cin >> n;\n\t    memset(dp, -1, sizeof(dp));\n\t    dp[0][0] = 0;\n\t    for (register int i = 1; i <= n; i++) {\n\t        for (register int j = 0; j < gn; j++) {\n\t            if (dp[i - 1][j] == -1)\n\t                continue;\n\t            for (register int k = 0; k < 10; k++) {\n\t                dp[i][trie[j][k]] =\n\t                    max(dp[i][trie[j][k]], dp[i - 1][j] + g[trie[j][k]][min((int)dr.size(), n - i)]);\n\t            }\n\t        }\n\t    }\n\t    int ans = 0;\n\t    for (register int i = 0; i < gn; i++) ans = max(ans, dp[n][i]), mxdp[n][i] = dp[n][i];\n\t    cout << ans << endl;\n\t    if (!ans) {\n\t        for (register int i = 1; i <= n; i++) printf(\"0\");\n\t        return;\n\t    }\n\t    for (register int i = n - 1; i >= 1; i--) {\n\t        for (register int j = 0; j < gn; j++) {\n\t            if (dp[i][j] == -1)\n\t                continue;\n\t            for (register int k = 0; k < 10; k++) {\n\t                if (dp[i + 1][trie[j][k]] == dp[i][j] + g[trie[j][k]][min((int)dr.size(), n - i - 1)]) {\n\t                    mxdp[i][j] = max(mxdp[i][j], mxdp[i + 1][trie[j][k]]);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    cur = 0;\n\t    for (register int i = 0; i < n; i++) {\n\t        for (register int j = 0; j < 10; j++) {\n\t            if (dp[i + 1][trie[cur][j]] == dp[i][cur] + g[trie[cur][j]][min((int)dr.size(), n - i - 1)]) {\n\t                if (mxdp[i + 1][trie[cur][j]] == ans) {\n\t                    cur = trie[cur][j];\n\t                    printf(\"%d\", j);\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1558406153,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1110H \u3010Modest Substrings\u3011"
    }
]