[
    {
        "content": "#### \u3010\u9898\u76ee\u5927\u610f\u3011\n\n\u7ed9\u5b9a $n$ \u4e2a\u70b9\u548c $n$ \u6761\u5c0f\u8def\uff0c\u6c42\u4ece $1$ \u53f7\u70b9\u51fa\u53d1\u5230\u8fd9 $n$ \u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n#### \u3010\u89e3\u9898\u601d\u8def\u3011\n\n\u4ece $1$ \u5230 $n$ \u6bcf\u4e2a\u70b9\u4e4b\u95f4\u4e0e\u8fde\u63a5\u4e00\u6761\u4e3b\u5e72\u8def\uff0c\u518d\u628a\u6bcf\u4e00\u6761\u5c0f\u8def\u8fde\u63a5\u4e0a\uff0c\u8dd1\u4e00\u904d Dijkstra \uff08\u5806\u4f18\u5316\uff09\u5373\u53ef\u3002\n\n~~\u770b\u5230\u6ca1\u6709\u7528Dijkstra\u7684\uff0c\u6765\u53d1\u4e00\u6ce2~~\u3002\n#### \u3010\u4ee3\u7801\u5b9e\u73b0\u3011\n\n+  \u53ef\u7528\u90bb\u63a5\u8868\u5b58\u56fe\uff0c\u4e5f\u53ef\u7528 vector \u5b58\u56fe\uff0c\u6211\u7528\u7684\u90bb\u63a5\u8868\uff0c\u81ea\u5df1\u719f\u6089\u7684\u662f\u6700\u597d\u7684\u3002\n\n+ \u56e0\u4e3a\u662f\u5355\u6e90\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u53ef\u7528 spfa ,\u4e5f\u53ef\u7528 Dijkstra \u3002\n\n#### \u3010Code\u3011\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define ull unsigned long long\n#define ll long long\n#define M 1000010\n#define N 1010\n#define qaq cout<<\"\u53ef\u884cQAQ\"<<endl\n#define INF 0x3f3f3f3f\nusing namespace std;\n/*================================================*/\nint n,num;\nstruct node{\n\tint dis;\n\tint x;\n\tinline bool operator<(const node &x)const//\u91cd\u8f7d\u5c0f\u6839\u5806\n\t{\n\t\treturn dis>x.dis;\n\t}\n};\nstruct nod{\n\tint next;\n\tint to;\n}e[M];\nint head[M],dis[M];\nbool vis[M];//\u5224\u65ad\u662f\u5426\u5230\u8fbe\n/*================================================*/\ninline int read()\n{\n\tint s = 0, f = 0;char ch = getchar();\n\twhile (!isdigit(ch)) f |= ch == '-', ch = getchar();\n\twhile (isdigit(ch)) s = s * 10 + (ch ^ 48), ch = getchar();\n\treturn f ? -s : s;\n}\n\nvoid add_edge(int from,int to)//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n{\n\te[++num].to=to;\n\te[num].next=head[from];\n\thead[from]=num;\n}\n\nvoid dijkstra()\n{\n\tpriority_queue <node> qp;\n\tmemset(dis,INF,sizeof(dis));\n\tdis[1]=0;\n\tqp.push((node){0,1});\n\twhile(!qp.empty()){\n\t\tnode cun = qp.top();//\u6bcf\u6b21\u53d6\u51fa\u6765\u7684\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\u3002\n\t\tqp.pop();\n\t\tint k=cun.x;\n\t\tif(vis[k]) continue;\n\t\tvis[k]=true;\n\t\tfor(int i=head[k];i;i=e[i].next){\n\t\t\tint y=e[i].to;\n\t\t\tif(dis[y] > dis[k] + 1){//\u66f4\u65b0\u6700\u77ed\u8def\n\t\t\t\tdis[y] = dis[k] + 1;\n\t\t\t\tqp.push((node){dis[y],y});\n\t\t\t} \n\t\t} \n\t}\n}\n\n/*=================================================*/\n\nsigned main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tadd_edge(i,x);//\u8fde\u63a5\u5c0f\u8def\u3002\n\t\tif(i!=n) {\n\t\t\tadd_edge(i,i+1);//\u8fde\u63a5\u4e3b\u5e72\u8def\n\t\t\tadd_edge(i+1,i);\n\t\t}\n\t}\n\tdijkstra();//\u8dd1\u4e00\u904dDijkstra\n\tfor(int i=1;i<=n;i++){\n\t\tprintf(\"%d \",dis[i]);\n\t}\n\treturn 0;//\u597d\u4e60\u60ef\n}\n```\n\n",
        "postTime": 1608343167,
        "uid": 381904,
        "name": "\u659c\u63fd\u6b8b\u7bab",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF689B  [ Mike and Shortcuts ]"
    },
    {
        "content": "\u9898\u89e3\u91cc\u8fd8\u6ca1\u6709\u7ebf\u6bb5\u6811\u4f18\u5316\u8fea\u6770\u65af\u7279\u62c9\u7684\uff0c\u6211\u6765\u5199\u4e00\u4e2a\u3002\n\n## Sol\uff1a\n\n\u8fd9\u9898\u7684\u9898\u9762\u7ffb\u8bd1\u7684\u7a00\u788e\uff0c\u5927\u610f\u5982\u4e0b\uff1a\n\n> \u7ed9\u5b9a $n$ \u4e2a\u70b9 \u4efb\u610f\u4e24\u70b9 $i,j$ \u95f4\u6709\u6743\u503c\u4e3a $|i-j|$ \u7684\u53cc\u5411\u8fb9 \u53e6\u6709 $n$ \u6761\u6743\u503c\u4e3a $1$ \u7684\u5355\u5411\u8fb9 \u6c42\u4ee5 $1$ \u4e3a\u8d77\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3002\n\n\u6b63\u5e38\u8fde\u8fb9 $n^2$ \u6761\u8fb9\u4e0d\u53ef\u53d6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fb9\u62c6\u5f00\uff0c\u4e0d\u662f\u6bcf\u4e2a $i,j$ \u90fd\u8fde\u8fb9\u5417\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u5c06\u76f8\u90bb\u7684\u4e24\u8fb9\u4e4b\u95f4\u8fde\u4e00\u6761\u6743\u503c\u4e3a $1$ \u7684\u8fb9\uff0c\u95f4\u63a5\u7684\u8fde\u8d77\u4e86\u8fd9\u4e9b\u8fb9\u3002\n\n\u4e3a\u4ec0\u4e48\u7528\u7ebf\u6bb5\u6811\uff1f\n\n\u9996\u5148\u8003\u8651\u6211\u4eec\u5f53\u65f6\u8981\u7528\u4f18\u5148\u961f\u5217\u505a\u4ec0\u4e48\u3002\n\n\u662f\u4e0d\u662f\u5c31\u662f\u7ef4\u62a4\u7684 $dis[]$ \u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4ee5\u53ca\u5b83\u7684\u7ec8\u70b9\uff1f\n\n\u5177\u4f53\u64cd\u4f5c\uff1f\n\n\u4e0d\u5c31\u662f\u8981\u6211\u4eec\u5411\u4f18\u5148\u961f\u5217\u91cc\u653e\u5165\u4e00\u4e2a $dis$ \u548c\u7ec8\u70b9\uff0c\u7136\u540e\u6bcf\u6b21\u677e\u5f1b\u90fd\u51fa\u961f\u4e00\u7ec4\uff0c\u518d\u8fdb\u884c\u66f4\u65b0\uff1f\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u5728\u8fd9\u91cc\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\u95ee\u9898\u3002\n\n\u4e0d\u8fc7\u7ebf\u6bb5\u6811\u6709\u4e2a\u6027\u8d28\uff1a\u4e0d\u80fd\u5220\u70b9\u3002\u90a3\u8be5\u600e\u4e48\u8fdb\u884c\u90a3\u4e2a\u8981\u6c42\u6211\u4eec\u51fa\u961f\u7684\u64cd\u4f5c\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff1a\u5982\u679c\u6211\u4eec\u628a\u90a3\u4e2a\u8981\u51fa\u961f\u7684\u4e00\u7ec4\u6570\u4e2d $dis$ \u4fee\u6539\u4e3a $INF$\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u7ebf\u6bb5\u6811\u91cc\u6709\u6570\uff0c\u5c31\u4e00\u5b9a\u53d6\u4e0d\u5230 $INF$\uff0c\u5c31\u4e0d\u4f1a\u7528\u5230\u8fd9\u7ec4\u6570\u4e86\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u51fa\u961f\u4e86\u3002\u5982\u679c\u6211\u4eec\u5728\u6700\u5f00\u59cb\u521d\u59cb\u5316\uff08\u5efa\u6811\uff09\u65f6\u5c31\u53ea\u7559\u4e00\u4e2a $dis$ \u4e3a $0$ \u7684$s$\uff08\u8d77\u70b9\u7f16\u53f7\uff09\uff0c\u5176\u4f59\u90fd\u53d8\u6210 $INF$\uff0c\u90a3\u4e48\u6211\u4eec\u63d2\u5165\u4e00\u7ec4\u6570\u65f6\u76f4\u63a5\u5355\u70b9\u4fee\u6539\u4e0d\u5c31\u597d\u5566\uff1f\n\n\u5982\u4f55\u5224\u65ad\u961f\u5217\u4e3a\u7a7a\uff1f\u6211\u4eec\u5982\u679c\u961f\u5217\u4e2d\u53ea\u6709 $INF$\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u771f\u5b9e\u8981\u7528\u7684\u6570\u636e\uff0c\u961f\u5217\u5c31\u662f\u7a7a\u7684\u4e86\u3002\n\n\u8fd9\u91cc\u53ea\u9700\u8981\u4e00\u4e2a\u5355\u70b9\u4fee\u6539\u7684\u4e00\u4e2a\u7ebf\u6bb5\u6811\u3002\n\n## Code\uff1a\n\n```cpp\n/*\nKnowledge : Rubbish Algorithm\nWork by : Dreamcatcher\nTime : O(AC)\n*/\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nconst int INF=0x3f3f3f3f;\nconst int Mod=1e9+7;\nconst int N=1e6+6;\n\nint read() {\n    int x=0,f=0;char ch=getchar();\n    for(;!isdigit(ch);ch=getchar()) f|=(ch=='-');\n    for(;isdigit(ch);ch=getchar()) x=(x<<1)+(x<<3)+(ch&15);\n    return f?-x:x;\n}\n\nvoid print(int x) {\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) print(x/10);\n    putchar(x%10+48);\n}\n\nint n,head[N],cnt,dis[N];struct node{int v,nxt,w;}e[N];\nvoid Add_edge(int u,int v){e[++cnt]=(node){v,head[u]};head[u]=cnt;}\n\nnamespace Seg{\n    #define lson pos<<1\n    #define rson pos<<1|1\n    \n    struct Tree{int Min,id;}tree[N];\n    \n    void push_up(int pos){\n        tree[pos].Min=min(tree[lson].Min,tree[rson].Min);\n        tree[pos].id=(tree[lson].Min<tree[rson].Min?tree[lson].id:tree[rson].id);\n    }\n    \n    void build(int pos,int l,int r){\n        if(l==r) return tree[pos].id=l,tree[pos].Min=(l==1?0:INF),void();\n        int mid=l+r>>1;build(lson,l,mid);build(rson,mid+1,r);push_up(pos);\n    }\n    \n    void change(int pos,int l,int r,int x,int val){\n        if(l==r) return tree[pos].Min=val,void();\n        int mid=l+r>>1;\n        if(x<=mid) change(lson,l,mid,x,val);\n        else change(rson,mid+1,r,x,val);\n        push_up(pos);\n    }\n}\n\nvoid Dij(){\n    while(Seg::tree[1].Min<INF){\n        int u=Seg::tree[1].id;Seg::change(1,1,n,u,INF);\n        for(int i=head[u];i;i=e[i].nxt){\n            int v=e[i].v;\n            if(dis[v]>dis[u]+1){\n                dis[v]=dis[u]+1;\n                Seg::change(1,1,n,v,dis[v]);\n            }\n        }\n    }\n}\n\nsigned main(){n=read();\n   for(int i=1;i<=n;i++){\n       int x=read();\n       Add_edge(i,x);\n       if(i^n) Add_edge(i,i+1),Add_edge(i+1,i);\n   }memset(dis,INF,sizeof dis);dis[1]=0;\n   Seg::build(1,1,n);Dij();for(int i=1;i<=n;i++) \n   print(dis[i]),putchar(' ');\n   return 0;\n}\n```\n",
        "postTime": 1647776644,
        "uid": 397317,
        "name": "Gym_nastics",
        "ccfLevel": 0,
        "title": "CF689B Mike and Shortcuts"
    },
    {
        "content": "~~\u6c34\u9898\u89e3\u7684\u4e00\u5929\u3002~~\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a $n$ \u4e2a\u70b9 \u4efb\u610f\u4e24\u70b9 $i,j$ \u95f4\u6709\u6743\u503c\u4e3a $|i-j|$ \u7684\u53cc\u5411\u8fb9\uff0c\u53e6\u6709 $n$ \u6761\u6743\u503c\u4e3a $1$ \u7684\u5355\u5411\u8fb9\uff0c\u6c42\u4ee5 $1$ \u4e3a\u8d77\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3002\n\n$1\\leqslant n\\leqslant200000$\n\n\n\n### \u89e3\u9898\u601d\u8def\n\n\u7531\u4e8e $n$ \u592a\u5927\u4e86\uff0c$n^2$ \u6761\u8fb9\u4e0d\u80fd\u63a5\u53d7\u3002\n\n\u8003\u8651\u7b80\u5316\uff0c \u53d1\u73b0 $i \\to \\ k$ \u4e4b\u95f4\u7684\u8fb9\u53ef\u4ee5\u7531 $\\forall i \\leq j<k,j \\to j+1$ \u8fd9\u4e9b\u6743\u503c\u4e3a $1$ \u7684\u8fb9\u62fc\u6210\u3002\n\n\u7136\u540e\u8dd1 `dij` \u6700\u77ed\u8def\u5373\u53ef\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n\\log n)$\u3002\n\n\n\n### CODE\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int _ = 200005;\n\nint tot, head[_], to[_ * 3], nxt[_ * 3], w[_ * 3];\n\nint vis[_], dis[_];\n\nvoid add(int x, int y, int z)\n{\n    to[++tot] = y;\n    w[tot] = z;\n    nxt[tot] = head[x];\n    head[x] = tot;\n}\n\nvoid dij()\n{\n    priority_queue<pair<int, int>> q;\n    memset(dis, 0x3f, sizeof dis);\n    q.push(make_pair(0, 1));\n    dis[1] = 0;\n    while (!q.empty())\n    {\n        int x = q.top().second;\n        q.pop();\n        if (vis[x])\n            continue;\n        vis[x] = 1;\n        for (int i = head[x]; i; i = nxt[i])\n        {\n            int y = to[i], z = w[i];\n            if (dis[y] > dis[x] + z)\n            {\n                dis[y] = dis[x] + z;\n                q.push(make_pair(-dis[y], y));\n            }\n        }\n    }\n}\n\nint n;\n\nsigned main()\n{\n    scanf(\"%d\", &n);\n    for (int i = 1; i < n; i++)\n    {\n        add(i, i + 1, 1);\n        add(i + 1, i, 1);\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        int x;\n        scanf(\"%d\", &x);\n        add(i, x, 1);\n    }\n    dij();\n    for (int i = 1; i <= n; i++)\n        printf(\"%d \", dis[i]);\n    return 0;\n}\n```\n\n",
        "postTime": 1635657242,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "CF689B Mike and Shortcuts"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF689B)\n\n### \u9898\u76ee\u7b80\u8ff0\n\n\u7ed9\u5b9a $n$ \u4e2a\u70b9 \u4efb\u610f\u4e24\u70b9 $i,j$ \u95f4\u6709\u6743\u503c\u4e3a $|i-j|$ \u7684\u53cc\u5411\u8fb9  \u53e6\u6709 $n$ \u6761\u6743\u503c\u4e3a $1$ \u7684\u5355\u5411\u8fb9  \u6c42\u4ee5 $1$ \u4e3a\u8d77\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\n\n$1\\leqslant n\\leqslant200000$\n\n### solution\n\n\u53d1\u73b0 $n$ \u592a\u5927\u4e86 $n^2$ \u6761\u8fb9\u4e0d\u80fd\u63a5\u53d7  \u53d1\u73b0    $\\ i \\to  \\ k\\quad (\\,i< j)$ \u4e4b\u95f4\u7684\u8fb9\u53ef\u4ee5\u7531  $i\\to  j\\ $\u4e4b\u95f4\u7684\u8fb9\u548c  $j\\to k(\\,i< j< k\\,)$  \u4e4b\u95f4\u7684\u8fb9 \u62fc\u6210\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4ece $i$ \u5411  $i+1$ \u8fde\u63a5\u6743\u503c\u4e3a $1$ \u7684\u8fb9\u5373\u53ef\n\n\u9898\u76ee\u4e2d\u7ed9\u5b9a\u7684\u5355\u5411\u8fb9  \u6309\u7167\u9898\u76ee\u8981\u6c42\u5373\u53ef\n\n\u6700\u540e\u8fb9\u7684\u6570\u91cf $3n$ \u5de6\u53f3\n\n\u8dd1\u6700\u77ed\u8def\u5373\u53ef\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n+n\\log n)$ \n\n### code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200005;\nconst int M=N*3;\nint head[N],ver[M],nxt[M],edge[M],cnt;\nint v[N],d[N];\nvoid add(int x,int y,int z)\n{\n\tver[++cnt]=y;\n\tedge[cnt]=z;\n\tnxt[cnt]=head[x];\n\thead[x]=cnt;\n}\nvoid dij()\n{\n\tpriority_queue<pair<int,int> > q;\n\tmemset(d,0x3f,sizeof d);\n\tq.push(make_pair(0,1));d[1]=0;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.top().second;q.pop();\n\t\tif(v[x])continue;v[x]=1;\n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tint y=ver[i],z=edge[i];\n\t\t\tif(d[y]>d[x]+z)\n\t\t\t{\n\t\t\t\td[y]=d[x]+z;\n\t\t\t\tq.push(make_pair(-d[y],y));\n\t\t\t}\n\t\t}\n\t} \n}\nint n;\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tadd(i,i+1,1);\n\t\tadd(i+1,i,1);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tadd(i,x,1);\n\t}\n\tdij();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tprintf(\"%d \",d[i]);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1626659015,
        "uid": 250916,
        "name": "_Dreamer_",
        "ccfLevel": 0,
        "title": "CF689B Mike and Shortcuts"
    },
    {
        "content": "\u8fd9\u4e00\u9898\uff0c\u4e4d\u4e00\u770b\u9898\u76ee\u5f88\u957f\uff0c\u5b9e\u5219\u5f88\u7b80\u5355\u3002\n\n\u6211\u4eec\u600e\u4e48\u505a\u5462\uff1f\n\n\u6ca1\u6709\u8d1f\u6743\u8fb9\uff0c\u8003\u8651\u4e00\u6ce2dijkstra\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u5de8\u9ad8\u7684\u590d\u6742\u5ea6\u663e\u7136\u6211\u4eec\u627f\u53d7\u4e0d\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u5806\u4f18\u5316\u4ee5\u540e\u7684dijkstra\u3002\n\n\u4e0d\u4f1a\u5806\u4f18\u5316\u8bf7\u8f6c[P4779](https://www.luogu.com.cn/problem/P4779)\u3002\n\n## \u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define pii pair<int,int>\n#define mp(a,b) make_pair(a,b)\nstruct edge{\n\tint to,nxt;\n\tint w;\n}e[1000086];\nint dis[200086];\nint last[200086],vis[200086];\nint n,m,s=1,cnt;\npriority_queue<pii,vector<pii>,greater<pii> >q;\n//\u56e0\u4e3a\u8981\u627e\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u7528\u5c0f\u6839\u5806\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-f;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+(c^48);c=getchar();}\n\treturn x*f;\n} \ninline void add(int u,int v,int w){\n\te[++cnt].to=v;\n\te[cnt].w=w;\n\te[cnt].nxt=last[u];\n\tlast[u]=cnt;\n}\ninline void djstr(){\n\tmemset(dis,0x7f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tq.push(mp(0,s));\n\tdis[s]=0;\n\twhile(!q.empty()){\n\t\tint p=q.top().second;\n\t\tq.pop();\n\t\tif(vis[p])continue;\n\t\tvis[p]=1;\n\t\tfor(int i=last[p];i;i=e[i].nxt){\n\t\t\tint to=e[i].to;\n\t\t\tif(!vis[to]&&dis[to]>dis[p]+e[i].w){\n\t\t\t\tdis[to]=dis[p]+e[i].w;\n\t\t\t\tq.push(mp(dis[to],to));\n\t\t\t}\n\t\t}\n\t}\n}\nsigned main(){\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\t\tif(i!=n){\n\t\t\tadd(i,i+1,1);//\u5927\u8def\n\t\t\tadd(i+1,i,1);\n\t\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint x=read();\n\t\tadd(i,x,1);//\u5c0f\u8def\uff0c\u6ce8\u610f\u4e0d\u80fd\u56de\u5934\u8d70\n\t}\n\tdjstr();\n\tfor(int i=1;i<=n;i++)printf(\"%lld \",dis[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1610758068,
        "uid": 246099,
        "name": "dalao_see_me",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF689B \u3010Mike and Shortcuts\u3011"
    },
    {
        "content": "\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\n\n\u9898\u76ee\u7ffb\u8bd1\uff1a\n```\n\u6700\u8fd1\uff0c\u5c0f\u8d1d\u5fd9\u4e8e\u5b66\u4e60\uff0c\u8003\u8bd5\u548c\u6bd4\u8d5b\u3002\u73b0\u5728\u5979\u60f3\u51fa\u53bb\u5728\u57ce\u5e02\u91cc\u901b\u901b\u653e\u677e\u4e00\u4e0b\u3002\n\n\u57ce\u5e02\u6709n\u4e2a\u8def\u53e3\uff0c\u4ece1\u5230n\u7f16\u53f7\u3002\u5c0f\u8d1d\u5bb6\u57281\u53f7\u8def\u53e3\uff0c\u5979\u4ece1\u53f7\u8def\u53e3\u51fa\u53d1\uff0c\u8d70\u8fc7\u4e00\u7cfb\u5217\u7684\u8def\u53e3\u3002\u4ece\u8def\u53e3i\u5230\u8def\u53e3j\u9700\u8981\u6d88\u8017|i\u2009-\u2009j|\u5355\u4f4d\u7684\u80fd\u91cf\u3002\u5979\u8d70\u8fc7\u4e00\u7cfb\u5217\u8def\u53e3p1\u2009=\u20091,\u2009p2,\u2009...,\u2009pk \u6d88\u8017\u7684\u603b\u80fd\u91cf\u7b49\u4e8e \u3002\n\n\u5f53\u7136\uff0c\u5982\u679c\u6ca1\u6709\u5c0f\u8def\uff0c\u4e00\u5473\u6b65\u884c\u662f\u6bd4\u8f83\u65e0\u804a\u7684\u3002\u5c0f\u8def\u662f\u7279\u522b\u7684\u8def\u5f84\uff0c\u80fd\u8ba9\u5c0f\u8d1d\u4ece\u4e00\u4e2a\u8def\u53e3\u5230\u53e6\u4e00\u4e2a\u8def\u53e3\u53ea\u6d88\u80171\u5355\u4f4d\u7684\u80fd\u91cf\u3002\u5c0f\u8d1d\u7684\u57ce\u5e02\u603b\u5171\u6070\u597d\u6709n\u6761\u5c0f\u8def\uff0c\u7b2ci\u6761\u5c0f\u8def\u5141\u8bb8\u5c0f\u8d1d\u4ece\u8def\u53e3i\u8d70\u5230\u8def\u53e3ai (i\u2009\u2264\u2009ai\u2009\u2264\u2009ai\u2009+\u20091) (\u4f46\u4e0d\u80fd\u53cd\u65b9\u5411\u8d70)\uff0c\u56e0\u6b64\u6bcf\u4e2a\u8def\u53e3\u90fd\u6709\u4e14\u53ea\u6709\u4e00\u6761\u5c0f\u8def\u3002\u4e25\u683c\u6765\u8bf4\uff0c\u5982\u679c\u5c0f\u8d1d\u9009\u62e9\u4e00\u7cfb\u5217\u8def\u53e3p1\u2009=\u20091,\u2009p2,\u2009...,\u2009pk\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a1\u2009\u2264\u2009i\u2009<\u2009k \u6ee1\u8db3pi\u2009+\u20091\u2009=\u2009api\uff0c\u5e76\u4e14api\u2009\u2260\u2009pi\uff0c\u4ece\u8def\u53e3pi\u5230\u8def\u53e3pi\u2009+\u20091\uff0c\u5c0f\u8d1d\u53ea\u4f1a\u6d88\u80171\u5355\u4f4d\u80fd\u91cf\uff0c\u800c\u4e0d\u662f|pi\u2009-\u2009pi\u2009+\u20091|\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5c0f\u8d1d\u9009\u62e9\u8def\u53e3\u5e8f\u5217p1\u2009=\u20091,\u2009p2\u2009=\u2009ap1,\u2009p3\u2009=\u2009ap2,\u2009...,\u2009pk\u2009=\u2009apk\u2009-\u20091\uff0c\u5979\u603b\u5171\u6d88\u8017k\u2009-\u20091\u5355\u4f4d\u7684\u80fd\u91cf\u3002\n\n\u5728\u5979\u5f00\u59cb\u95f2\u901b\u4e4b\u524d\uff0c\u5979\u8bf7\u4f60\u5e2e\u5979\u8ba1\u7b97\u4ece\u5979\u5bb6\u5230\u8fbe\u6bcf\u4e2a\u8def\u53e3\u6700\u5c11\u6d88\u8017\u591a\u5c11\u80fd\u91cf\u3002\n\n\u8f93\u5165\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570n (1\u2009\u2264\u2009n\u2009\u2264\u2009200\u2009000) \uff0c\u8868\u793a\u5c0f\u8d1d\u57ce\u5e02\u7684\u8def\u53e3\u6570\u91cf\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542bn\u4e2a\u6574\u6570a1,\u2009a2,\u2009...,\u2009an (i\u2009\u2264\u2009ai\u2009\u2264\u2009n , \uff0c\u7ed9\u51fa\u5c0f\u8d1d\u57ce\u5e02\u7684\u5c0f\u8def\uff0c\u5141\u8bb8\u5c0f\u8d1d\u53ea\u6d88\u80171\u5355\u4f4d\u80fd\u91cf\u4ece\u8def\u53e3i\u5230\u8def\u53e3ai\u3002\u8bf7\u6ce8\u610f\u5c0f\u8def\u4e0d\u80fd\u8d70\u53cd\u65b9\u5411(\u4eceai\u5230i)\u3002\n\n\u8f93\u51fa\n\u8f93\u51fan\u4e2a\u6574\u6570m1,\u2009m2,\u2009...,\u2009mn\uff0c\u5176\u4e2dmi\u8868\u793a\u4ece\u8def\u53e31\u5230\u8def\u53e3i\u7684\u6700\u5c0f\u80fd\u91cf\u82b1\u8d39\u3002\n```\n\n\n~~\u5df2\u63d0\u4ea4\u9898\u76ee\u7ffb\u8bd1\uff0c\u4e5f\u8bb8\u4e0d\u4e45\u540e\u5c31\u80fd\u5728\u9898\u76ee\u754c\u9762\u4e0a\u770b\u5230\u6211\u7684\u7ffb\u8bd1\u4e86~~\n\n\u8fd9\u662f\u4e00\u9053\u6700\u77ed\u8def\u95ee\u9898\uff0c\u76f4\u63a5\u7528SPFA\u89e3\u51b3\u5c31\u597d\u4e86\n\nSPFA\u8be6\u7ec6\u8fc7\u7a0b\u8bb2\u89e3\uff1a[\u6700\u77ed\u8def\u5f84\u95ee\u9898---SPFA\u7b97\u6cd5\u8be6\u89e3](https://blog.csdn.net/qq_35644234/article/details/61614581)\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n\nusing namespace std;\n\nconst int maxn=200005;\nconst long long inf=0x3f3f3f3f;\n\nint n,dis[maxn];  //dis\u5b58\u7684\u662f\u6700\u540e\u7684\u7ed3\u679c\nbool inQue[maxn];\nvector <int> a[maxn];\nqueue <int> que;\n\nint main()\n{\n    cin>>n;    //\u8f93\u5165\uff0c\u521d\u59cb\u5316\u90e8\u5206\n    for(int i=1;i<n;i++)\n        dis[i]=inf;\n    dis[0]=0;\n    inQue[0]=true;\n    for(int i=0;i<n;i++)\n    {\n        int ls;\n        cin>>ls;\n        a[i].push_back(ls-1);   //\u5206\u522b\u548c\u4e24\u8fb9\u7684\u8def\u53e3\u548c\u6377\u5f84\u7684\u76ee\u7684\u5730\u76f8\u8fde\n        if(i>0)\n            a[i].push_back(i-1);\n        if(i<n-1)\n            a[i].push_back(i+1);\n    }\n    que.push(0);    //\u4ece\u51fa\u53d1\u70b9\u5f00\u59cb\n    while(!que.empty())\n    {\n        int w=que.front();\n        inQue[w]=false;  \n        que.pop();\n        int len=a[w].size();\n        for(int i=0;i<len;i++)\n        {\n            int ls=dis[a[w][i]];\n            dis[a[w][i]]=min(dis[a[w][i]],dis[w]+1);    //\u9009\u62e9\u539f\u6765\u7684\u548c\u65b0\u7684\u8d70\u6cd5\u4e2d\u5c0f\u7684\u503c\n            if(ls!=dis[a[w][i]]&&!inQue[a[w][i]])    //\u5982\u679c\u503c\u53d8\u52a8\u4e86\uff0c\u53c8\u6ca1\u6709\u5728\u961f\u5217\u4e2d\uff0c\u5c31\u628a\u5b83\u52a0\u8fdb\u53bb\n            {\n                que.push(a[w][i]);\n                inQue[a[w][i]]=true;\n            }\n        }\n    }\n    for(int i=0;i<n;i++)\n        cout<<dis[i]<<\" \";\n    return 0;\n}\n\n```\n",
        "postTime": 1570280787,
        "uid": 176659,
        "name": "pnpn111",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF689B \u3010Mike and Shortcuts\u3011"
    },
    {
        "content": "\u6700\u77ed\u8def-\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=200010;\nconst int inf=100000001;\nint n,m;\nbool vis[maxn];\nint dist[maxn];\nvector<int> G[maxn];\nvoid addedge(int u,int v)//\u5efa\u8fb9-\u51fd\u6570\n{\n\tG[u].push_back(v);\n}\nvoid spfa()\n{\n\tfor(register int i=1;i<=n;i++)\n\t\tdist[i]=inf;\n\tdist[1]=0;\n\tvis[1]=true;\n\tqueue<int> q;\n\tq.push(1);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=false;\n\t\tfor(register int i=0;i<G[u].size();i++)\n\t\t{\n\t\t\tint v=G[u][i];\n\t\t\tif(dist[v]>dist[u]+1)\n\t\t\t{\n\t\t\t\tdist[v]=dist[u]+1;\n\t\t\t\tif(!vis[v])\n\t\t\t\t{\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\taddedge(i,x);\n\t\tif(i!=n) addedge(i,i+1),addedge(i+1,i);\n\t}//\u6309\u7167\u9898\u610f\u5efa\u8fb9\n\tspfa();//\u8c03\u7528spfa\n\tfor(register int i=1;i<=n;i++)\n\t\tprintf(\"%d \",dist[i]);//\u6109\u5feb\u8f93\u51fa\n\treturn 0;\n}\n```",
        "postTime": 1540906366,
        "uid": 94398,
        "name": "durbin\u4e2d\u5c06",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF689B \u3010Mike and Shortcuts\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF689B)\n\n\u7ed9\u4f60 $n$ \u4e2a\u70b9\uff08\u4ece $1 \\sim n$ \u7f16\u53f7\uff09\u548c $n$\uff08 $n\\le2\\times10^5$ \uff09 \u6761\u6709\u5411\u8fb9\uff0c\u5176\u4e2d\u6bcf\u6761\u6709\u5411\u8fb9\u7684\u957f\u5ea6\u4e3a $1$\u3002\u4e14\u4ece $i$\u70b9\u8d70\u5230 $j$ \u70b9\u7684\u8ddd\u79bb\u4e3a $|i-j|$\uff08\u5df2\u7ed9\u51fa\u7684\u6709\u5411\u8fb9\u9664\u5916\uff09\u3002\u6c42\u4ece\u7b2c $1$ \u4e2a\u70b9\u51fa\u53d1\u5230\u8fbe\u5176\u4f59\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n## \u601d\u8def\n\n\u4e00\u770b\u5230\u9898\u9762\uff0c\u9996\u5148\u60f3\u5230\u7684\u80af\u5b9a\u662f\u628a\u6240\u6709\u8fb9\u90fd\u5b58\u4e00\u4e0b\uff0c\u7136\u540e\u8dd1\u4e00\u8fb9 `dijkstra`\uff0c\u6c42\u6700\u77ed\u8def\u5373\u53ef\uff08~~\u849f\u84bb~~\u6211\u7684\u60f3\u6cd5\uff09\u3002\u4f46\u770b\u5230 $n\\le2\\times10^5$\uff0c\u80af\u5b9a\u4f1a\u6302\u3002\u4e8e\u662f\u4fbf\u8003\u8651\u53e6\u4e00\u79cd\u505a\u6cd5\u3002\n\n\u6211\u4eec\u4e0d\u4e00\u5b9a\u9700\u8981\u628a\u6240\u6709\u7684\u8fb9\u90fd\u5b58\u8fdb\u53bb\uff0c\u53ea\u9700\u8981\u5b58\u76f8\u90bb\u4e24\u4e2a\u70b9\u6240\u8fde\u7684\u8fb9\u5373\u53ef\u3002\u56e0\u4e3a\u4efb\u4f55\u4e00\u6761\u957f\u5ea6\u5927\u4e8e $1$ \u7684\u8fb9\u90fd\u53ef\u4ee5\u9760\u957f\u5ea6\u4e3a $1$ \u7684\u8fb9\u6240\u8fde\u8d77\u6765\u3002\u8fd9\u4e2a\u70b9\u662f\u9898\u76ee\u7684\u5173\u952e\uff0c\u60f3\u5230\u8fd9\u4e00\u70b9\uff0c\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5\u8f7b\u677e AC \u4e86\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u8dd1\u4e00\u904d `dijkstra` \u5373\u53ef\u3002\n\n## Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=6e5+7;\nint n;\nstruct sa{\n\tint next;\n\tint to;\n\tint w;\n}e[N];\nstruct node{\n\tint x;\n\tint dis;\n\tinline bool operator<(const node &x)const\n\t{\n\t\treturn dis>x.dis;\n\t}\n};\npriority_queue<node>q;//\u4f18\u5148\u961f\u5217 \nint dis[N];//\u5b58\u8ddd\u79bb \nbool vis[N];//\u6807\u8bb0 \nint h[N],cnt;\nvoid add(int u,int v,int w){//\u6dfb\u8fb9 \n\te[++cnt]={h[u],v,w},h[u]=cnt;\n}\nvoid dijk(){//\u8dd1\u4e00\u904ddijkstra \n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[1]=0;\n\tq.push({1,0});\n\twhile(q.size()){\n\t\tint u=q.top().x;q.pop();\n\t\tif(vis[u])continue;vis[u]=1;\n\t\tfor(int i=h[u];~i;i=e[i].next){\n\t\t\tint v=e[i].to,w=1;\n\t\t\tif(dis[v]>dis[u]+w){\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tq.push({v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\nint main(){\n\tmemset(h,-1,sizeof(h));\n\tcin>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tint x;cin>>x;\n\t\tif(i!=x)add(i,x,1);\n\t\tif(i!=1)add(i-1,i,1),add(i,i-1,1);//\u5efa\u8fb9 \n\t}\n\tdijk();\n\tfor(int i=1;i<=n;i++)\n\tcout<<dis[i]<<' ';\n\treturn 0;\n}\n```",
        "postTime": 1656850172,
        "uid": 541916,
        "name": "yaoyanfeng",
        "ccfLevel": 5,
        "title": "CF689B"
    }
]