[
    {
        "content": "\u6ce8\u610f\u5230\u672c\u9898\u7684\u7684\u64cd\u4f5c 1 \u662f\u8fde\u7eed\u6bb5\u67d3\u8272\uff0c\u4e0e [ODT](https://oi-wiki.org/ds/odt/) \u7684 `assign` \u64cd\u4f5c\u7c7b\u4f3c\uff0c\u56e0\u6b64\u8003\u8651 ODT \u7ef4\u62a4\u989c\u8272\u6bb5\u3002\n\n\u64cd\u4f5c 2 \u662f\u5bf9\u6240\u6709\u540c\u8272\u5143\u7d20\u52a0\u4e00\u4e2a\u503c\uff0c\u8003\u8651\u5bf9\u4e8e\u989c\u8272 $i$ \u7ef4\u62a4\u4e00\u4e2a $tag_i$\uff0c\u8868\u793a\u989c\u8272 $i$ \u52a0\u7684\u503c\u662f\u591a\u5c11\uff0c\u6bcf\u6b21\u6267\u884c\u64cd\u4f5c 2 \u65f6\uff0c\u53ea\u9700\u8981\u4fee\u6539 $tag_i$ \u5373\u53ef\u3002\n\n\u5355\u70b9\u67e5\u8be2\u65f6\uff0c\u5143\u7d20 $p$ \u7684\u503c\u663e\u7136\u662f $a_p + tag_{col_p}$\u3002\n\n\u73b0\u5728\u8003\u8651 $tag$ \u7684\u5b58\u5728\u5bf9\u64cd\u4f5c 1 \u7684\u5f71\u54cd\uff08\u8bbe\u67d0\u5143\u7d20\u539f\u6765\u7684\u989c\u8272\u4e3a $c$\uff0c\u65b0\u989c\u8272\u4e3a $c^\\prime$\uff09\uff1a\n\n- \u9996\u5148\uff0c\u7531\u4e8e\u989c\u8272\u7684\u66f4\u65b0\uff0c$tag_c$ \u503c\u5e94\u8be5\u7d2f\u52a0\u5230\u8be5\u5143\u7d20\u4e0a\uff0c\u4ee5\u843d\u5b9e\u64cd\u4f5c 2 \u7684\u5ef6\u8fdf\u4fee\u6539\u3002\n- \u5728\u989c\u8272\u66f4\u65b0\u5230 $c^\\prime$ \u540e\uff0c\u4e3a\u4e86\u62b5\u6d88 $tag_{c^\\prime}$ \u7684\u5f71\u54cd\uff0c\u8be5\u5143\u7d20\u7684\u503c\u8fd8\u8981\u51cf\u53bb $tag_{c^\\prime}$\uff0c\u4ece\u800c\u786e\u4fdd\u5355\u70b9\u67e5\u8be2\u65f6\u80fd\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002\n\n\u64cd\u4f5c 1 \u6d89\u53ca\u5230\u5143\u7d20\u7684\u533a\u95f4\u52a0\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u663e\u7136\u64cd\u4f5c 2 \u65f6\u95f4\u590d\u6742\u5ea6 $O(1)$\uff0c\u64cd\u4f5c 3 \u662f\u6811\u72b6\u6570\u7ec4\u5355\u70b9\u67e5\u8be2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\log n)$\u3002\n\n\u95ee\u9898\u6765\u4e86\uff0c\u672c\u9898\u6570\u636e\u5e76\u4e0d\u4fdd\u8bc1\u968f\u673a\uff0c\u64cd\u4f5c 1 \u4f7f\u7528 ODT \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u6709\u4fdd\u969c\u5417\uff1f\n\n\u8bbe\u4e00\u6b21 `assign` \u64cd\u4f5c\u9700\u8981\u5408\u5e76 $k$ \u4e2a\u533a\u95f4\u3002\u5728 `assign` \u64cd\u4f5c\u540e\uff0c\u533a\u95f4\u6570\u4f1a\u51cf\u5c11 $k-1$\uff0c\u540c\u65f6\u7531\u4e8e `assign` \u524d\u9700\u8981 `split` \u7aef\u70b9\uff0c\u53c8\u4f1a\u4ea7\u751f\u81f3\u591a 2 \u4e2a\u533a\u95f4\u3002\n\n\u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u533a\u95f4\u6570\u7684\u589e\u91cf\u4e3a $O(q)$\uff0c\u56e0\u4e3a\u533a\u95f4\u6570\u6052\u4e3a\u6b63\uff0c`assign` \u64cd\u4f5c\u51cf\u5c11\u7684\u533a\u95f4\u6570\uff08\u5373\u6211\u4eec\u8981\u5408\u5e76\u7684\u533a\u95f4\u6570\uff09\u81f3\u591a\u4e5f\u4e3a $O(q)$\u3002\n\n\u5728\u6267\u884c `assign` \u64cd\u4f5c\u65f6\uff0c\u6bcf\u5904\u7406\u4e00\u4e2a\u533a\u95f4\uff0c\u5c31\u8981\u6267\u884c\u4e00\u6b21\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\u4fee\u6539\u3002\u56e0\u6b64\uff0c\u8be5\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(q \\log n)$\u3002\n\n```cpp\n// Problem: E. Colorful Operations\n// Contest: Codeforces - Codeforces Round #771 (Div. 2)\n// URL: https://codeforces.com/contest/1638/problem/E\n// Memory Limit: 256 MB\n// Time Limit: 4000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <algorithm>\n#include <iostream>\n#include <set>\n#include <vector>\nusing namespace std;\nstruct node {\n  int l, r;\n  mutable int c;\n  node(int l, int r = -1, int c = 0) {\n    this->l = l;\n    this->r = r;\n    this->c = c;\n  }\n  bool operator<(const node& a) const { return l < a.l; }\n};\nset<node> odt;\nint n, q;\nlong long tag[1000005];\nstruct BIT {\n  long long a[1000005];\n  int n;\n  void init(int n) { this->n = n; }\n  int lowbit(int x) { return x & (-x); }\n  void add(int p, long long x) {\n    while (p <= n) {\n      a[p] += x;\n      p += lowbit(p);\n    }\n  }\n  long long query(int p) {\n    long long ans = 0;\n    while (p) {\n      ans += a[p];\n      p -= lowbit(p);\n    }\n    return ans;\n  }\n} tr;\nauto split(int pos) {\n  auto it = odt.lower_bound(node(pos));\n  if (it != odt.end() && it->l == pos) return it;\n  it--;\n  int l = it->l, r = it->r, c = it->c;\n  odt.erase(it);\n  odt.insert(node(l, pos - 1, c));\n  return odt.insert(node(pos, r, c)).first;\n}\nvoid assign(int l, int r, int c) {\n  auto itr = split(r + 1), itl = split(l);\n  for (auto it = itl; it != itr; it++) {\n    tr.add(it->l, tag[it->c]);\n    tr.add(it->r + 1, -tag[it->c]);\n  }\n  odt.erase(itl, itr);\n  odt.insert(node(l, r, c));\n  tr.add(l, -tag[c]), tr.add(r + 1, tag[c]);\n}\nlong long get_tag(int p) {\n  auto it = odt.lower_bound(node(p));\n  if (it != odt.end() && it->l == p) return tag[it->c];\n  return tag[(--it)->c];\n}\nint main() {\n  ios::sync_with_stdio(false);\n  cin >> n >> q;\n  odt.insert(node(1, n, 1));\n  tr.init(n);\n  while (q--) {\n    string type;\n    cin >> type;\n    if (type == \"Color\") {\n      int l, r, c;\n      cin >> l >> r >> c;\n      assign(l, r, c);\n    } else if (type == \"Add\") {\n      int c, x;\n      cin >> c >> x;\n      tag[c] += x;\n    } else {\n      int x;\n      cin >> x;\n      cout << tr.query(x) + get_tag(x) << endl;\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1644895386,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1638E \u3010Colorful Operations\u3011"
    },
    {
        "content": "> [CF1638E Colorful Operations](https://codeforces.ml/contest/1638/problem/E)\n>\n> \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u521d\u59cb\u65f6\u6240\u6709\u5143\u7d20\u7684\u503c\u4e3a $0$ \uff0c\u989c\u8272\u4e3a $1$\u3002\u4f60\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a\n>\n> - `Color l r c` \uff1a\u628a $[l,r]$ \u8fd9\u6bb5\u7684\u5143\u7d20\u989c\u8272\u6539\u4e3a $c$\n> - `Add c x`\uff1a\u628a\u6240\u6709\u989c\u8272\u4e3a $c$ \u7684\u5143\u7d20\u503c\u90fd\u52a0\u4e0a $x$\n> - `Query i`\uff1a\u8f93\u51fa\u5143\u7d20 $i$ \u7684\u503c\n>\n> $n,q \\leq 10^6$ \n\n<!-- more -->\n\n## \u601d\u8def\uff1a\n\n\u8fd9\u4e2a\u9898\u6709\u4e24\u79cd\u601d\u8def\uff0c\u4e00\u79cd\u662f\u6811\u72b6\u6570\u7ec4/\u7ebf\u6bb5\u6811\u5957\u73c2\u6735\u8389\u6811\uff0c\u4e00\u79cd\u662f\u5e26 `lazytag` \u7684\u7ebf\u6bb5\u6811\uff0c\u672c\u6587\u5728\u6b64\u8bb2\u89e3\u7b2c\u4e8c\u79cd\u601d\u8def\u3002\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u8fd9\u4e2a\u628a\u6240\u6709\u989c\u8272\u4e3a $c$ \u7684\u5143\u7d20\u503c\u90fd\u52a0\u4e0a $x$ \u7684\u64cd\u4f5c\u663e\u7136\u662f\u4e0d\u597d\u76f4\u63a5\u5904\u7406\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u8fd9\u4e2a\u64cd\u4f5c\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5168\u5c40\u6253\u6807\u8bb0\u7684\u64cd\u4f5c\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a $tag_c$ \u8868\u793a\u989c\u8272 $c$ \u7d2f\u8ba1\u52a0\u4e0a\u7684\u503c\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5355\u70b9\u67e5\u8be2\u7684\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u76f4\u63a5\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u5143\u7d20 $i$ \u7684\u503c\u4e4b\u540e\u52a0\u4e0a $tag_{color_x}$ \u5373\u53ef\u3002\n\n\u6700\u540e\u8003\u8651\u533a\u95f4\u4fee\u6539\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u9996\u5148\u8003\u8651 $[l,r]$ \u989c\u8272\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u628a $[l,r]$ \u8fd9\u6bb5\u52a0\u4e0a\u539f\u672c\u989c\u8272\u7684 $tag$\uff0c\u6d88\u9664\u6389\u4e4b\u524d\u7684\u5f71\u54cd\uff0c\u7136\u540e\u518d\u51cf\u53bb\u65b0\u989c\u8272\u7684 $tag$\u3002\u8fd9\u91cc\u51cf\u53bb\u65b0\u989c\u8272\u7684 $tag$ \u662f\u5728\u4e8e\u6211\u4eec\u6700\u540e\u8f93\u51fa\u65f6\u4f1a\u52a0\u4e0a\u8fd9\u4e2a $tag$\uff0c\u5e76\u4e14\u6211\u4eec\u66f4\u65b0\u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u4e5f\u4f1a\u52a0\u4e0a\u8fd9\u4e2a $tag$\uff0c\u6240\u4ee5\u5f88\u5de7\u5999\u7684\u5904\u7406\u4e86\u989c\u8272\u5bf9\u4e8e\u5143\u7d20\u7684\u5f71\u54cd\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c $[l,r]$ \u989c\u8272\u4e0d\u5b8c\u5168\u76f8\u540c\u7684\u65f6\u5019\u4f1a\u4e0d\u4f1a\u6302\u6389\uff1f\u5176\u5b9e\u662f\u4e0d\u4f1a\u7684\uff0c\u6211\u4eec\u4f7f\u7528\u989c\u8272\u6bb5\u5747\u644a\u7684\u77e5\u8bc6\u8fdb\u884c\u8bc1\u660e\u3002\n\n> \u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u989c\u8272\u8fde\u7eed\u6bb5\uff0c\u6bcf\u6b21\u7ebf\u6bb5\u6811\u4e0a\u9012\u5f52\u4fee\u6539\u7684\u590d\u6742\u5ea6\u662f $\\Theta (\\log n)$\n>\n> \u6bcf\u6b21\u533a\u95f4\u67d3\u8272\u64cd\u4f5c\uff0c\u6700\u591a\u589e\u52a0 $O(1)$ \u4e2a\u533a\u95f4\u989c\u8272\u8fde\u7eed\u6bb5\uff0c\u6240\u4ee5\u5355\u6b21\u64cd\u4f5c\u5747\u644a\u590d\u6742\u5ea6\u662f $\\Theta(\\log n)$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7684\u4ee3\u7801\u5c31\u80fd\u8fbe\u5230  $\\Theta(n + q\\log n)$ \u7684\u590d\u6742\u5ea6\u3002\u800c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u8fde\u7eed\u6bb5\u662f\u5426\u989c\u8272\u76f8\u540c\u7684\u7ef4\u62a4\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728 `pushup` \u7684\u8fc7\u7a0b\u4e2d\u66b4\u529b\u7ef4\u62a4\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801\u3002\n\n\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cctype>\n#include <vector>\n#include <cmath>\n#include <queue>\nusing namespace std;\n#define ll long long\n#define FO(x) {freopen(#x\".in\",\"r\",stdin);freopen(#x\".out\",\"w\",stdout);}\n#define pii pair<int,int>\n#define mp make_pair\n#define int long long\n\n//char buf[1 << 20], *p1, *p2;\n//#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 20, stdin), p1 == p2)?EOF: *p1++)\ntemplate <typename T> inline void read(T &t) {\n\tint v = getchar();T f = 1;t = 0;\n\twhile (!isdigit(v)) {if (v == '-')f = -1;v = getchar();}\n\twhile (isdigit(v)) {t = t * 10 + v - 48;v = getchar();}\n\tt *= f;\n}\ntemplate <typename T,typename... Args> inline void read(T &t,Args&... args) {\n\tread(t);read(args...);\n}\n\nconst int N = 1e6 + 10;\n\nll a[N],tag[N],n,q;\n\nstruct node {\n    int l,r;\n    ll tag1,tag2,col,sam;\n}tree[N<<2];\n\nvoid pushup(int p) {\n    tree[p].col = tree[p << 1].col;\n    tree[p].sam = ((tree[p << 1].sam && tree[p << 1 | 1].sam )&& (tree[p << 1].col == tree[p << 1 | 1].col));\n}\n\nvoid build(int p,int l,int r) {\n    tree[p].l = l,tree[p].r = r;\n    if (l == r) {\n        tree[p].col = 1;\n        tree[p].sam = 1;\n        return ;\n    }\n    int mid = (l + r) >> 1;\n    build(p << 1,l,mid);\n    build(p << 1 | 1,mid + 1,r);\n    pushup(p);\n}\n\nvoid pushdown(int p) {\n    if (tree[p].tag1) {\n        tree[p << 1].tag1 += tree[p].tag1;\n        tree[p << 1 | 1].tag1 += tree[p].tag1;\n        tree[p].tag1 = 0;\n    }\n    if (tree[p].tag2) {\n        tree[p << 1].col = tree[p << 1 | 1].col = tree[p].tag2;\n        tree[p << 1].tag2 = tree[p << 1 | 1].tag2 = tree[p].tag2;\n        tree[p << 1].sam = tree[p << 1 | 1].sam = 1;\n        tree[p].tag2 = 0;\n    }\n}\n\nvoid change(int p,int l,int r,int k) {\n    if (tree[p].l >= l && tree[p].r <= r && tree[p].sam) {\n        tree[p].tag1 += tag[tree[p].col];\n        tree[p].col = k;\n        tree[p].tag2 = k;\n        tree[p].sam = 1;\n        tree[p].tag1 -= tag[k];\n        return ;\n    }\n    int mid = (tree[p].l + tree[p].r) >> 1;\n    pushdown(p);\n    if (l <= mid) change(p << 1,l,r,k);\n    if (r > mid) change(p << 1 | 1,l,r,k);\n    pushup(p);\n}\n\nll query(int p,int x) {\n    //printf(\"%lld %lld %lld %lld %lld\\n\",p,tree[p].l,tree[p].r,tree[p].tag2,tree[p].col);\n    if (tree[p].l == tree[p].r) {\n        return tree[p].tag1 + tag[tree[p].col];\n    }\n    int mid = (tree[p].l + tree[p].r) >> 1;\n    pushdown(p);\n    if (x <= mid) return query(p << 1,x);\n    else return query(p << 1 | 1,x);\n}\n\nsigned main() {\n    read(n,q);\n    build(1,1,n);\n    for (int i = 1;i <= q;++i) {\n        char opt[10];scanf(\"%s \",opt);\n        if (opt[0] == 'C') {\n            int x,y,w;read(x,y,w);\n            change(1,x,y,w);\n        }\n        if (opt[0] == 'A') {\n            int x,k;read(x,k);\n            tag[x] += k;\n        }\n        if (opt[0] == 'Q') {\n            int x;read(x);\n            printf(\"%lld\\n\",query(1,x));\n        }\n    }\n\treturn 0;\n}\n```\n\n",
        "postTime": 1644897495,
        "uid": 105230,
        "name": "Retired_Doubeecat",
        "ccfLevel": 6,
        "title": "CF1638E Colorful Operations"
    },
    {
        "content": "# CF1638E Colorful Operations\n\n\u5f00\u9898\u7684\u65f6\u5019\u770b\u5230\u662f\u6570\u636e\u7ed3\u6784\u5f88\u5f00\u5fc3\uff0c\u611f\u89c9\u53ef\u4ee5\u79d2\u4e86\u3002\u7ed3\u679c\u6700\u540e\u867d\u7136\u60f3\u5230\u4e86\u6b63\u89e3\uff0c\u4f46\u662f\u5199\u6302\u5230\u6700\u540e\u90fd\u6ca1\u8c03\u51fa\u6765...\n\n## \u9898\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u521d\u59cb\u5168 $0$ \u7684\u5e8f\u5217 $a_1,a_2,...,a_n$\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u989c\u8272\u90fd\u4e3a $1$\u3002\u63a5\u4e0b\u6765\u6267\u884c $q$ \u6b21\u64cd\u4f5c\uff1a\n\n- ```Color l r c``` \u628a\u533a\u95f4 $[a_l,a_r]$ \u7684\u5143\u7d20\u989c\u8272\u90fd\u7f6e\u4e3a $c$\u3002\n- ```Add c x``` \u628a\u5f53\u524d\u6240\u6709\u989c\u8272\u4e3a $c$ \u7684\u5143\u7d20\u589e\u52a0 $x$\u3002\uff08$x$ \u53ef\u8d1f\uff09\n- ```Query x``` \u8be2\u95ee\u5f53\u524d $a_x$ \u7684\u503c\u3002\n\n$n,q\\le 10^6$\u3002\n\n## \u5206\u6790\uff1a\n\n### Part 1.\n\n\u672c\u9898\u64cd\u4f5c\u6709\u4e09\u4e2a\uff0c\u6709\u70b9\u590d\u6742\u3002\u6211\u4eec\u6765\u628a\u8fd9\u4e2a\u95ee\u9898\u5f31\u5316\u4e00\u4e0b\uff1a\u5982\u679c\u6ca1\u6709\u64cd\u4f5c $1$\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u521d\u59cb\u989c\u8272\u53ef\u4ee5\u4e0d\u540c\u3002\u7136\u540e\u4fdd\u7559\u64cd\u4f5c $2$ \u548c $3$\uff0c\u5982\u4f55\u5feb\u901f\u5b9e\u73b0\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u5bf9\u989c\u8272\u6253 $lazy$\uff1a\u4e00\u6b21 ```Add``` \u64cd\u4f5c\u5c31\u4ee4 $lazy_c\\leftarrow lazy_c+x$\u3002\u7136\u540e\u4e00\u6b21\u8be2\u95ee\uff0c\u8bbe\u7b2c $x$ \u4e2a\u5143\u7d20\u7684\u989c\u8272\u662f $c$\uff0c\u8f93\u51fa\u5f53\u524d\u7684 $lazy_c$ \u5373\u53ef\u3002\n\n\u8fd9\u6837\uff0c\u662f $O(n+q)$ \u7684\u3002\n\n### Part 2.\n\n\u8ba9\u6211\u4eec\u56de\u5230\u539f\u95ee\u9898\u3002\n\n\u56e0\u4e3a $2$ \u64cd\u4f5c\u4e0d\u53ef\u80fd\u627e\u5230\u6240\u6709\u4f4d\u7f6e\u53bb\u4fee\u6539\uff0c\u6240\u4ee5\u4f9d\u7136\u662f\u4ee5\u6253 $lazy$ \u7684\u5f62\u5f0f\u5b9e\u73b0\u4e0b\u6765\u3002\n\n\u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u5f97\u652f\u6301\u533a\u95f4\u63a8\u5e73\uff0c\u5355\u70b9\u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6765\u67e5\u8be2\u6bcf\u6b21\u8be2\u95ee\u65f6\u7b2c $x$ \u4e2a\u5143\u7d20\u7684\u989c\u8272\u3002\u4e00\u822c\u7684\u601d\u8def\u662f\u7ebf\u6bb5\u6811\uff0c\u672c\u9898\u4e5f\u53ef\u4ee5\u7528 ```std::set``` \u6765\u66b4\u529b\u7ef4\u62a4\u3002\u8fd9\u662f\u7b80\u5355\u7684\u3002\n\n\u7531\u4e8e\u8be2\u95ee\u662f\u5355\u70b9\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5b83\u5728\u65f6\u523b $1\\sim t$ \u7684\u53d8\u5316\uff08$t$ \u662f\u4e00\u6b21\u8be2\u95ee\u8be5\u4f4d\u7f6e\u7684\u503c\u7684\u65f6\u523b\uff09\uff1a\n\n\u8bbe\u8be5\u70b9 $x$\uff0c\u5728\u65f6\u523b $[i,j]$ \u4e0a\u662f\u989c\u8272 $c$ \u7684\uff0c\u90a3\u4e48\u5728 $i-1$ \u65f6\u523b\uff0c\u6211\u4eec\u8ba9\u4ed6\u51cf\u53bb $lazy_{c}$\uff0c\u5728 $j$ \u65f6\u523b\uff0c\u6211\u4eec\u8ba9\u4ed6\u52a0\u4e0a $lazy_j$\u3002\n\n\u53e6\u5916\uff0c\u8fd9\u7b49\u4ef7\u4e8e\u5728 $i$ \u65f6\u523b\u51cf\u6389 $lazy_i$ \u800c\u4e0d\u662f\u5728 $i-1$ \u65f6\u523b\u53bb\u51cf\uff0c\u56e0\u4e3a $i$ \u65f6\u523b\u80af\u5b9a\u662f\u4e00\u6b21\u8986\u76d6\u64cd\u4f5c\u3002\uff08\u9664\u975e $i=1$\uff0c\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u51cf\u53bb\u7684\u662f $0$\uff09\u3002\n\n\u6216\u8005\u8bf4\uff0c\u8003\u8651\u8fd9\u6837\u7684\u8fc7\u7a0b\uff1a\n\n\u5bf9\u4e8e\u4e00\u6b21\u8986\u76d6\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u88ab\u8986\u76d6\u5230\u7684\u6bcf\u4e2a\u70b9\uff0c\u5982\u679c\u5b83\u4ee5\u524d\u989c\u8272\u4e3a $c'$\uff0c\u90a3\u4e48\u8be5\u70b9\u7684\u503c\u52a0\u4e0a $lazy_{c'}$\uff1b\u5982\u679c\u8986\u76d6\u540e\u989c\u8272\u4e3a $c$\uff0c\u90a3\u4e48\u8be5\u70b9\u7684\u503c\u52a0\u4e0a $lazy_{c}$\u3002\n\n\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee\u64cd\u4f5c\uff0c\u5148\u8be2\u95ee\u51fa\u8be5\u70b9\u5f53\u524d\u7684\u503c $val$ \u548c\u989c\u8272 $c$\u3002$val+lazy_c$ \u5c31\u662f\u7b54\u6848\u3002\n\n\u6211\u4eec\u9700\u8981\u5feb\u901f\u652f\u6301\u8fd9\u4e2a\u95ee\u9898\u3002\n\n### Part 3.\n\n\u51cf\u53bb $lazy_c$ \u662f\u597d\u505a\u7684\uff0c$[l,r]$ \u8fdb\u884c\u533a\u95f4\u51cf\u6cd5\u5373\u53ef\u3002\n\n \u8003\u8651\u8fd9\u6837\u7684\u60f3\u6cd5\uff1a\u7ef4\u62a4\u6240\u6709\u7684\u989c\u8272\u8fde\u7eed\u6bb5\uff0c\u79f0\u4e00\u4e2a\u989c\u8272\u4e3a $c$ \u7684\u6781\u5927\u8fde\u7eed\u6bb5\u4e3a\u4e00\u6761\u989c\u8272\u4e3a $c$ \u7684\u7ebf\u6bb5\u3002\u663e\u7136\u6bcf\u4e2a\u72b6\u6001\u4e0b\u4e24\u4e24\u7ebf\u6bb5\u4ea4\u96c6\u4e3a\u7a7a\uff0c\u4e14\u6240\u6709\u7ebf\u6bb5\u7684\u5e76\u96c6\u4e3a $[1,n]$\u3002\n\n\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u64cd\u4f5c $[l,r]$\uff0c\u66b4\u529b\u627e\u51fa\u6240\u6709\u548c $[l,r]$ \u6709\u4ea4\u7684\u7ebf\u6bb5\uff0c\u7531\u4e8e\u4e00\u6761\u7ebf\u6bb5\u4e0a\u7684\u6240\u6709\u70b9\u989c\u8272\u76f8\u540c\uff0c\u90a3\u4e48\u4e0a\u6587\u63d0\u5230\u7684\u52a0\u4e0a $lazy_{c'}$ \u8fd9\u4e2a\u64cd\u4f5c\u5c31\u597d\u7ef4\u62a4\u4e86\u3002\n\n\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f\u6b63\u786e\u7684\uff1a\u4e00\u6761\u7ebf\u6bb5\u53ea\u4f1a\u88ab\u5220\u9664\u4e00\u6b21\uff0c\u800c\u4e00\u6b21\u64cd\u4f5c\u4f1a\u589e\u52a0\u5e38\u6570 ($\\le 5$ ) \u6761\u7ebf\u6bb5\u3002\u6240\u4ee5\u53ef\u4ee5\u7528 ```std::set``` \u6765\u7ef4\u62a4\u3002\n\n\u7b14\u8005\u8d5b\u65f6\u7684\u60f3\u6cd5\u662f\u8003\u8651\u7c7b\u4f3c Segment beats \u7684\u505a\u6cd5\uff1a\u7528 $c_x$ \u8868\u793a\u8282\u70b9 $x$ \u7684\u6240\u8868\u793a\u533a\u95f4\u5185\uff0c\u6240\u6709\u5143\u7d20\u7684\u989c\u8272\u662f\u5426\u5168\u4e3a\u67d0\u4e2a\u7edf\u4e00\u7684\u503c $val$\uff08\u5982\u679c\u662f\uff0c\u5219\u4e3a $val$\uff1b\u5426\u5219\u4e3a $0$\uff09\u3002\n\n\u90a3\u4e48\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u5019\uff0c\u5982\u679c\u8be2\u95ee\u533a\u95f4 $[q_l,q_r]$ \u4e0d\u5b8c\u5168\u5305\u542b\u5f53\u524d\u8282\u70b9 $x$ \u7684\u8868\u793a\u533a\u95f4 $[l,r]$\uff0c\u5c31\u8fd8\u662f\u6b63\u5e38\u9012\u5f52\u4e0b\u53bb\u3002\u5426\u5219\uff0c\u5e38\u89c4\u7ebf\u6bb5\u6811\u662f\u76f4\u63a5\u8fdb\u884c\u4fee\u6539\u4e86\uff0c\u4f46\u672c\u9898\u4e2d\u53ef\u80fd\u8fd9\u4e2a\u533a\u95f4\u7684\u989c\u8272\u4e0d\u5168\u76f8\u540c\uff08$c_x=0$\uff09\uff0c\u6b64\u65f6\u6211\u4eec\u8981\u7ee7\u7eed\u9012\u5f52\u4e0b\u53bb\uff0c\u76f4\u5230 $c_x$ \u975e $0$ \u4e3a\u6b62\u624d\u4fee\u6539\u3002\n\n\u4fee\u6539\u662f\u52a0\u6cd5\u3002\u6211\u4eec\u5047\u8bbe\u5b83\u662f $O(1)$ \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\uff1a\u590d\u6742\u5ea6\u662f $O(q\\log n)$ \u7684\uff0c\u56e0\u4e3a\u8fd8\u662f\u6709 $O(q)$ \u6761\u7ebf\u6bb5\uff0c\u7136\u540e\u6bcf\u6761\u7ebf\u6bb5\u4f1a\u5728\u7ebf\u6bb5\u6811\u4e0a\u88ab\u62c6\u5206\u4e3a $\\log $ \u6761\uff08\u6216\u8005\u4e5f\u53ef\u4ee5\u52bf\u80fd\u5206\u6790\uff09\u3002\n\n\u7136\u540e\u4e00\u4e2a naive \u7684\u60f3\u6cd5\u53ef\u80fd\u662f\uff0c\u8fd8\u8981\u7ef4\u62a4\u4e00\u4e2a bit \u6267\u884c\u533a\u95f4\u52a0\u6cd5\uff0c\u6bcf\u6b21\u7684\u201c\u4fee\u6539\u201d\u653e\u5728 bit\uff0c\u8fd9\u6837\u5c31\u662f $O(q\\log^2 n)$ \u7684\uff0c\u4f46\u662f\u6ca1\u6709\u5fc5\u8981\u3002\u6211\u4eec\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u52a0\u6cd5 tag\uff0c\u4fee\u6539\u653e\u5728 tag \u4e0a\u5c31\u597d\u4e86\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u6837\uff0c\u5c31\u6709\u533a\u95f4\u989c\u8272\u8986\u76d6\u7684 tag\uff0c\u548c\u52a0\u6cd5\u7684 tag\uff0c\u8fd9\u4e24\u4e2a tag \u4e92\u76f8\u6ca1\u5565\u8054\u7cfb\uff08\u4e0d\u50cf\u4e58\u6cd5 tag \u548c\u52a0\u6cd5 tag\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u653e\u5fc3 pushdown\u3002\u5982\u679c\u4e0d\u653e\u5fc3\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u52a0\u6cd5 tag \u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u4e5f\u662f\u597d\u5b9e\u73b0\u7684\u3002\n\n\u4e24\u79cd\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(q\\log n)$\u200b\u3002\n\n## \u4e24\u79cd\u5b9e\u73b0\u7684\u4ee3\u7801\uff1a\n\n### 1. set \u5b9e\u73b0\n\n```cpp\nconst int MAXN=1e6+10,INF=1e9;\nint n,q;\nll lazy[MAXN];\nstruct BIT{\n    ll t[MAXN];\n    void upd(int x,ll val){for(;x<=n;x+=lowbit(x))t[x]+=val;}\n    void upd(int l,int r,ll val){upd(l,val);upd(r+1,-val);}\n    ll qry(int x){ll ret=0;for(;x;x-=lowbit(x))ret+=t[x];return ret;}\n}bit;\nset<array<int,3> >s;\nint upd(int l1,int r1,int l2,int r2,int prec,int t){\n    if(r1<l2||l1>r2)return 0;\n    if(l1<=l2&&r1>=r2){\n        bit.upd(l2,r2,lazy[prec]);\n        if(l1!=l2)s.insert({l1,l2-1,prec});\n        if(r1!=r2)s.insert({r2+1,r1,prec});\n    }else if(l1>=l2&&r1<=r2){\n        bit.upd(l1,r1,lazy[prec]);\n    }else if(l1<=l2){\n        bit.upd(l2,r1,lazy[prec]);\n        if(l1!=l2)s.insert({l1,l2-1,prec});\n    }else{\n        bit.upd(l1,r2,lazy[prec]);\n        if(r1!=r2)s.insert({r2+1,r1,prec});\n    }\n    s.erase({l1,r1,prec});\n    return 1;\n}\nvoid Add(int t,int l,int r,int c){\n    bit.upd(l,r,-lazy[c]);\n    auto it=s.upper_bound({l,r,INF});\n    it--;\n    array<int,3>tmp=*it;\n    upd(tmp[0],tmp[1],l,r,tmp[2],t);\n    int pre=tmp[1];\n    while(1){\n        it=s.upper_bound({pre,INF,INF});\n        if(it==s.end())break;\n        tmp=*it;\n        if(tmp[0]>r)break;\n        upd(tmp[0],tmp[1],l,r,tmp[2],t);\n        pre=tmp[1];\n    }\n    s.insert({l,r,c});\n}\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin>>n>>q;\n    s.insert({1,n,1});\n    s.insert({n+1,n+1,n+1});\n    rep(i,1,q){\n        string op;\n        cin>>op;\n        if(op==\"Color\"){\n            int l,r,c;cin>>l>>r>>c;\n            Add(i,l,r,c);\n        }else if(op==\"Add\"){\n            int c,x;cin>>c>>x;\n            lazy[c]+=x;\n        }else{\n            int x;cin>>x;\n            auto it=s.upper_bound({x,INF,INF});\n            it--;\n            int c=(*it)[2];\n            ll ans=bit.qry(x);\n            ans+=lazy[c];\n            cout<<ans<<endl;\n        }\n    }\n \n    return 0;\n}\n```\n\n### 2. \u7ebf\u6bb5\u6811\u5b9e\u73b0\uff08\u63a8\u8350\uff09\n\n```cpp\nconst int MAXN=1e6+10;\nint n,q;\nll lazy[MAXN];\nstring op;\nstruct Seg{\n    int c[MAXN<<2],ctag[MAXN<<2];\n    ll tag[MAXN<<2],s[MAXN<<2];\n    void pushup(int x){c[x]=(c[lc(x)]==c[rc(x)])?c[lc(x)]:0;}\n    void add(int x,ll val){s[x]+=val;tag[x]+=val;}\n    void pushdown(int x){if(ctag[x])c[lc(x)]=c[rc(x)]=ctag[lc(x)]=ctag[rc(x)]=ctag[x],ctag[x]=0;}\n    void build(int x,int l,int r){\n        c[x]=1;if(l==r)return;\n        int mid=(l+r)>>1;build(lc(x),l,mid);build(rc(x),mid+1,r);\n    }\n    void upd(int x,int l,int r,int ql,int qr,int col){\n        if(ql<=l&&qr>=r){\n            if(c[x]){\n                add(x,lazy[c[x]]);add(x,-lazy[col]);\n                c[x]=ctag[x]=col;\n                return;\n            }\n            int mid=(l+r)>>1;pushdown(x);\n            upd(lc(x),l,mid,ql,qr,col);\n            upd(rc(x),mid+1,r,ql,qr,col);\n            pushup(x);\n            return;\n        }\n        int mid=(l+r)>>1;pushdown(x);\n        if(ql<=mid)upd(lc(x),l,mid,ql,qr,col);\n        if(qr>mid)upd(rc(x),mid+1,r,ql,qr,col);\n        pushup(x);\n    }\n    ll qry(int x,int l,int r,int pos){\n        if(l==r)return s[x]+lazy[c[x]];\n        int mid=(l+r)>>1;pushdown(x);\n        ll ret=tag[x];if(pos<=mid)ret+=qry(lc(x),l,mid,pos);else ret+=qry(rc(x),mid+1,r,pos);\n        pushup(x);return ret;\n    }\n}t;\nint main(){\n    ios::sync_with_stdio(false);\n    cin>>n>>q;\n    t.build(1,1,n);\n    rep(i,1,q){\n        cin>>op;\n        if(op==\"Color\"){\n            int l,r,c;cin>>l>>r>>c;\n            t.upd(1,1,n,l,r,c);\n        }else if(op==\"Add\"){\n            int c,x;cin>>c>>x;\n            lazy[c]+=x;\n        }else{\n            int x;cin>>x;\n            cout<<t.qry(1,1,n,x)<<endl;\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1644970552,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010CF1638E\u3011Colorful Operations"
    },
    {
        "content": "## CF1638E \u9898\u89e3\n\n\u7ed9\u4e00\u4e2a\u81ea\u8ba4\u4e3a\u5f88\u65e0\u8111\u5f88\u597d\u60f3\u7684\u505a\u6cd5\uff0c\n\n\u7528\u5230\u4e86\u533a\u95f4\u52a0\u5355\u70b9\u67e5\u8be2\uff0c\u4ee5\u53ca\u533a\u95f4\u8d4b\u503c\u5355\u70b9\u67e5\u8be2\u4e24\u79cd\u7ebf\u6bb5\u6811\uff0c\n\n\u7f3a\u70b9\u662f\u5e38\u6570\u5de8\u5927\uff0c\u9700\u8981\u52a0 `fread` \u5feb\u8bfb\u624d\u80fd\u5361\u8fc7\u3002\n\n**\u9898\u610f**\uff1a\n\n\u4f60\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u6709\u6743\u503c\u548c\u989c\u8272\u3002\n\n\u6700\u5f00\u59cb\u65f6\u5e8f\u5217\u6240\u6709\u4f4d\u7f6e\u7684\u6743\u503c\u90fd\u4e3a $0$\uff0c\u989c\u8272\u90fd\u4e3a $1$\u3002\n\n\u7ef4\u62a4\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u6709\u4e09\u79cd\u8981\u6c42\u5171 $q$ \u6b21\uff0c\u5177\u4f53\u5982\u4e0b\uff1a\n\n1. \u5c06\u533a\u95f4 $[l,r]$ \u5185\u6240\u6709\u4f4d\u7f6e\u7684\u989c\u8272\u6539\u6210 $c$\uff1b\n2. \u5c06\u6240\u6709\u989c\u8272\u662f $c$ \u7684\u4f4d\u7f6e\u7684\u6743\u503c\u52a0 $x$\uff1b\n3. \u67e5\u8be2\u4f4d\u7f6e $i$ \u7684\u6743\u503c\u3002\n\n> $n,q\\le10^6$\u3002\n\n**\u505a\u6cd5**\uff1a\n\n\u9996\u5148\u770b\u5230\u7684\u662f\u6539\u53d8\u6743\u503c\u7684\u552f\u4e00\u9014\u5f84\u662f\u5bf9\u67d0\u79cd\u7279\u5b9a\u989c\u8272\u7684\u5168\u5c40\u52a0\uff0c\n\n\u6545\u5bf9\u6bcf\u79cd\u989c\u8272\u7ef4\u62a4\u5168\u5c40\u52a0\u7684\u6807\u8bb0\u662f\u597d\u60f3\u7684\uff0c\u5373\u8bb0 $tag_c$ \u4ee3\u8868\u6240\u6709\u989c\u8272\u4e3a $c$ \u7684\u4f4d\u7f6e\u88ab\u4e00\u8d77\u52a0\u7684\u548c\uff0c\n\n\u5219\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u6570\u7ec4 $col$ \u4ee3\u8868\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u989c\u8272\uff0c\u540c\u65f6\u7ef4\u62a4\u6570\u7ec4 $b$ \u4ee3\u8868\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u5df2\u7ecf\u66f4\u65b0\u8fc7\u7684\u6743\u503c\uff0c\n\n\u5373 $b_i=a_i-tag_{col_i}$\uff0c\u90a3\u4e48\u67e5\u8be2\u64cd\u4f5c\u5c31\u662f\u7b80\u5355\u7684\uff0c\u6211\u4eec\u76f4\u63a5\u8f93\u51fa $a_i=b_i+tag_{col_i}$ \u5373\u53ef\u3002\n\n\u90a3\u73b0\u5728\u552f\u4e00\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5c31\u662f\uff0c\u5728\u4e00\u4e2a\u4f4d\u7f6e $i$ \u7684\u989c\u8272\u4ece $c$ \u53d8\u6210 $c'$ \u65f6\uff0c\u4e3a\u786e\u4fdd\u7b54\u6848\u7684\u6b63\u786e\u6027\uff0c\n\n\u6211\u4eec\u9700\u8981\u66f4\u65b0\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6743\u503c\uff0c\u5373\u5c06 $b_i$ \u6539\u6210 $b_i+tag_{c}-tag_{c'}$\uff0c\u4ee3\u8868\uff1a\n\n\u6211\u4eec\u52a0\u4e0a\u8fd9\u4e2a\u4f4d\u7f6e\u5e94\u8be5\u53d7\u5230\u7684\u6743\u503c\u7684\u6539\u53d8\uff0c\u5373\u56e0\u4e3a\u8be5\u4f4d\u7f6e\u989c\u8272\u662f $c$ \u800c\u5bfc\u81f4\u7684\u4f4d\u7f6e\u6743\u503c\u7684\u53d8\u5316\u91cf\uff1b\n\n\u5e76\u6263\u9664\u5176\u4e0d\u5e94\u8be5\u53d7\u5230\u7684\u503c\u7684\u6539\u53d8\uff0c\u5373\u5176\u521a\u4ece\u989c\u8272 $c$ \u53d8\u6210 $c'$\uff0c\u6240\u6709 $c'$ \u989c\u8272\u4ee5\u524d\u5bf9\u5e94\u7684\u53d8\u5316\u90fd\u4e0d\u5e94\u6709\u5f71\u54cd\u3002\n\n\u663e\u7136\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u4e0d\u80fd\u679a\u4e3e\u533a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u5e76\u4e00\u4e2a\u4e2a\u7ef4\u62a4\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u8fd8\u4e0d\u5982\u66b4\u529b\uff0c\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u533a\u95f4\u4e2d\u7684\u4e00\u4e2a\u989c\u8272\u540c\u4e3a $c$ \u7684\u8fde\u7eed\u6bb5\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u6743\u503c\u52a0\u7684\u6570\u662f\u4e00\u6837\u7684\uff0c\n\n\u5373\u90fd\u662f $tag_{c'}-tag_{c}$\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u80fd\u5feb\u901f\u627e\u51fa\u8fd9\u4e9b\u8fde\u7eed\u6bb5\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u8fde\u7eed\u6bb5\u5185\u6240\u6709\u6570\u540c\u65f6\u7ef4\u62a4\uff0c\n\n\u5219\u590d\u6742\u5ea6\u5c31\u662f\u6240\u6709\u9047\u5230\u7684\u8fde\u7eed\u6bb5\u4e2a\u6570\u4e4b\u548c\u7684\u7ea7\u522b\uff0c\u518d\u5e26\u4e2a\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 $b,col$ \u6570\u7ec4\u7684 $\\log$\u3002\n\n\u770b\u4e0a\u53bb\u8fd9\u4e2a\u590d\u6742\u5ea6\u8fd8\u662f\u4e0d\u5bf9\uff1f\u8fd9\u91cc\u5c31\u8981\u7528\u5230\u672c\u9898\u89e3\u4e2d\u552f\u4e00\u7684\u89c2\u5bdf\uff0c\u5373\uff1a\n\n\u9047\u5230\u7684\u989c\u8272\u6bb5\u6570\u4e4b\u548c\u662f $O(q)$ \u7ea7\u522b\u7684\u3002\u4ee5\u4e0b\u7ed9\u51fa\u8bc1\u660e\uff1a\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u6bcf\u6b21\u533a\u95f4\u8d4b\u989c\u8272\u65f6\uff0c\u9664\u4e86\u533a\u95f4\u4e2d\u6700\u5de6\u548c\u6700\u53f3\u7684\u8fde\u7eed\u6bb5\uff0c\n\n\u5176\u4ed6\u6240\u6709\u533a\u95f4\u4e2d\u7684\u8fde\u7eed\u6bb5\u90fd\u4f1a\u5b8c\u5168\u88ab\u8986\u76d6\uff0c\u6700\u540e\u4e00\u8d77\u53d8\u6210\u4e00\u4e2a\u5927\u7684\u989c\u8272\u8fde\u7eed\u6bb5\uff0c\n\n\u6545\u4e00\u4e2a\u8fde\u7eed\u6bb5\u53ea\u4f1a\u88ab\u9047\u5230\u4e00\u6b21\uff0c\u56e0\u4e3a\u5728\u9047\u5230\u4e4b\u540e\u6211\u4eec\u5c31\u4f1a\u5c06\u5176\u5220\u6389\uff0c\n\n\u53ea\u6709\u5728\u6bcf\u6b21\u64cd\u4f5c\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u4f1a\u5728\u5e8f\u5217\u4e2d\u589e\u52a0\u4e0d\u8d85\u8fc7\u4e09\u4e2a\u8fde\u7eed\u6bb5\uff0c\u5373 $O(1)$ \u4e2a\u8fde\u7eed\u6bb5\uff0c\n\n\u6240\u4ee5\u6240\u6709\u64cd\u4f5c\u4e2d\u589e\u52a0\u7684\u8fde\u7eed\u6bb5\u6570\u4e4b\u548c\u662f $O(q)$ \u7ea7\u522b\u7684\uff0c\u6211\u4eec\u9047\u5230\u7684\u8fde\u7eed\u6bb5\u6570\u4e5f\u5c31\u662f $O(q)$ \u7ea7\u522b\u7684\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u53ea\u8981\u652f\u6301\u5feb\u901f\u627e\u989c\u8272\u8fde\u7eed\u6bb5\u5373\u53ef\uff0c\u800c\u652f\u6301\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4 $L,R$\uff0c\n\n\u5176\u4e2d $L_i,R_i$ \u5206\u522b\u4ee3\u8868\u4f4d\u7f6e $i$ \u6240\u5728\u8fde\u7eed\u6bb5\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u90a3\u5f53\u9700\u8981\u627e\u533a\u95f4 $[l,r]$ \u4e2d\u7684\u8fde\u7eed\u6bb5\u65f6\uff0c\n\n\u6211\u4eec\u53ea\u9700\u8981\u4ece $l$ \u5f00\u59cb\u8df3\uff0c\u6bcf\u6b21\u8df3\u5230\u5f53\u524d\u4f4d\u7f6e\u6240\u5728\u8fde\u7eed\u6bb5\u7684\u53f3\u7aef\u70b9\u7684\u53f3\u8fb9\uff0c\u76f4\u5230\u8df3\u5230 $r$ \u53f3\u8fb9\u7ed3\u675f\u3002\n\n\u7ef4\u62a4 $L,R$ \u6570\u7ec4\u662f\u7b80\u5355\u7684\uff0c\u6211\u4eec\u6bcf\u6b21\u4f1a\u5c06\u533a\u95f4 $[l,r]$ \u5185\u6240\u6709\u4f4d\u7f6e\u7684 $L,R$ \u503c\u5206\u522b\u6539\u6210 $l$ \u548c $r$\uff0c\n\n\u4ee5\u53ca $l$ \u5de6\u8fb9\u67d0\u4e9b\u4f4d\u7f6e\u7684 $R$ \u503c\u6539\u6210 $l-1$\uff0c\u548c $r$ \u53f3\u8fb9\u67d0\u4e9b\u4f4d\u7f6e\u7684 $L$ \u503c\u6539\u6210 $r+1$\uff0c\n\n\u6545\u6211\u4eec\u7528\u533a\u95f4\u52a0\u5355\u70b9\u67e5\u8be2\u7684\u7ebf\u6bb5\u6811\u7ef4\u62a4 $b$\uff0c\u7528\u533a\u95f4\u8d4b\u503c\u5355\u70b9\u67e5\u8be2\u7684\u7ebf\u6bb5\u6811\u7ef4\u62a4 $col,L,R$ \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(q\\log n)$ \u7684\uff0c\u4f46\u56e0\u4e3a\u5e38\u6570\u5927\uff0c\u6240\u4ee5\u9700\u8981 `fread` \u5feb\u8bfb\u5feb\u8f93\u624d\u80fd\u5361\u8fc7\u3002\n\n[**code**](https://codeforces.com/contest/1638/submission/146472244) \u89c1\u94fe\u63a5\u3002",
        "postTime": 1644925088,
        "uid": 100091,
        "name": "GaryH",
        "ccfLevel": 6,
        "title": "CF1638E \u9898\u89e3"
    },
    {
        "content": "Colorful Operations\n\n[Github Blog](https://onlypath.github.io/2022/03/12/CF1638E/)\u3002\n\n\u795e\u5947\u5747\u644a\u79d1\u6280\u3002\n\n\u989c\u8272\u52a0\u53ef\u4ee5\u76f4\u63a5\u505a\u4e00\u4e2a\u989c\u8272\u6807\u8bb0\u7d2f\u52a0\u5728\u4e0a\u9762\u3002\n\n\u4fee\u6539\u533a\u95f4\u7684\u65f6\u5019\u76f4\u63a5\u66b4\u529b\u627e\u5230\u6bcf\u4e2a\u8be5\u533a\u95f4\u5185\u7ebf\u6bb5\u6811\u4e0a\u989c\u8272\u76f8\u540c\u7684\u5b50\u533a\u95f4\u5e76\u6253\u4e0a\u61d2\u6807\u8bb0\uff0c\u6700\u540e\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u5355\u70b9\u67e5\u5373\u53ef\uff08\u6bd4\u8f83 Trivial \u7684 lazytag \u4e0b\u4f20\uff09\u3002\n\n\u7136\u540e\u5c31\u6ca1\u4e86\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f\u5bf9\u7684\uff1f\n\n\u6211\u4eec\u77e5\u9053\uff0c\u6bcf\u6b21\u67d3\u8272\u64cd\u4f5c\uff0c\u81f3\u591a\u4f1a\u589e\u52a0 $O(1)$ \u4e2a\u989c\u8272\u76f8\u540c\u7684\u5b50\u533a\u95f4\u3002\u6211\u4eec\u5047\u8bbe\u7b2c $i$ \u6b21\u64cd\u4f5c\u7684\u533a\u95f4\u4e2d\u6709 $O(\\Delta x_i)$ \u4e2a\u989c\u8272\u76f8\u540c\u7684\u5b50\u533a\u95f4\uff08\u4e0d\u662f\u7ebf\u6bb5\u6811\u4e0a\u7684\uff09\u9700\u8981\u66b4\u529b\u4fee\u6539\uff0c\u5219\u5fc5\u7136\u5728\u4e4b\u524d\u9700\u8981 $O(\\Delta x_i)$ \u6b21\u67d3\u8272\u64cd\u4f5c\uff0c\u4ece\u800c\u6709 $O(\\sum \\Delta x_i)\\le O(q)$\uff0c\u56e0\u6b64\u9700\u8981\u64cd\u4f5c\u7684\u989c\u8272\u76f8\u540c\u7684\u5b50\u533a\u95f4\u6570\u91cf\u4e3a $O(q)$ \u4e2a\u3002\n\n\u4f46\u662f\u6211\u4eec\u662f\u5728\u7ebf\u6bb5\u6811\u4e0a\u64cd\u4f5c\u7684\uff0c\u610f\u5473\u7740\u6bcf\u4e2a\u8fd9\u6837\u989c\u8272\u76f8\u540c\u7684\u5b50\u533a\u95f4\u6211\u4eec\u90fd\u9700\u8981\u628a\u5b83\u62c6\u5206\u6210 $\\log$ \u4e2a\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4\uff0c\u4ece\u800c\u6211\u4eec\u7684\u67d3\u8272\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u662f $O(q\\log n)$ \u7684\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u6700\u7ec8\u7684\u590d\u6742\u5ea6\u5c31\u662f $O((n+q)\\log n)$ \u7684\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\n\nconst ll N=1e6;\n\nll n,q;\nll tag_val[N+5];\nchar s[10];\n\nstruct Sgt{\n  ll tag_same,tag_laz;\n  #define tag_same(x) tree[x].tag_same\n  #define tag_laz(x) tree[x].tag_laz\n}tree[N*4+5];\n\ninline void Build(ll p,ll l,ll r) {\n  tag_same(p)=1;\n  if(l==r) return;ll mid=(l+r)>>1;\n  if(l<=mid) Build(p<<1,l,mid);\n  if(r>mid) Build(p<<1|1,mid+1,r);\n}\n\ninline void Pushup(ll p) {\n  if(tag_same(p<<1)==tag_same(p<<1|1)) tag_same(p)=tag_same(p<<1);\n  else tag_same(p)=0;\n}\n\ninline void Pushdown(ll p) {\n  tag_laz(p<<1)+=tag_laz(p);tag_laz(p<<1|1)+=tag_laz(p);\n  if(tag_same(p)) {\n    tag_same(p<<1)=tag_same(p<<1|1)=tag_same(p);\n  }\n  tag_laz(p)=0;\n}\n\ninline void Modify(ll p,ll lp,ll rp,ll l,ll r,ll col) {\n  if(lp>=l&&rp<=r) {\n    if(tag_same(p)) {\n      tag_laz(p)+=tag_val[tag_same(p)];\n      tag_laz(p)-=tag_val[col];\n      tag_same(p)=col;\n      return;\n    }\n    ll mid=(lp+rp)>>1;\n    Modify(p<<1,lp,mid,l,r,col);Modify(p<<1|1,mid+1,rp,l,r,col);\n    Pushup(p);\n    return;\n  }\n  ll mid=(lp+rp)>>1;Pushdown(p);\n  if(l<=mid) Modify(p<<1,lp,mid,l,r,col);\n  if(r>mid) Modify(p<<1|1,mid+1,rp,l,r,col);\n  Pushup(p);\n}\n\ninline ll Ask(ll p,ll lp,ll rp,ll x) {\n  if(lp==rp) return tag_laz(p)+tag_val[tag_same(p)];\n  ll mid=(lp+rp)>>1;Pushdown(p);\n  if(x<=mid) return Ask(p<<1,lp,mid,x);\n  else return Ask(p<<1|1,mid+1,rp,x);\n}\n\ninline ll read() {\n  ll ret=0,f=1;char ch=getchar();\n  while(ch<48||ch>57) {if(ch==45) f=-f;ch=getchar();}\n  while(ch>=48&&ch<=57) {ret=(ret<<3)+(ret<<1)+ch-48;ch=getchar();}\n  return ret*f;\n}\n\ninline void write(ll x) {\n  static char buf[22];static ll len=-1;\n  if(x>=0) {do{buf[++len]=x%10+48;x/=10;}while(x);}\n  else {putchar(45);do{buf[++len]=-(x%10)+48;x/=10;}while(x);}\n  while(len>=0) putchar(buf[len--]);\n}\n\ninline void writeln(ll x) {write(x);putchar(10);}\n\nint main() {\n\n  n=read();q=read();\n  Build(1,1,n);\n\n  while(q--) {\n    scanf(\"%s\",s);\n    if(s[0]=='C') {\n      ll l,r,c;\n      l=read();r=read();c=read();\n      Modify(1,1,n,l,r,c);\n    }\n    if(s[0]=='A') {\n      ll c,x;\n      c=read();x=read();tag_val[c]+=x;\n    }\n    if(s[0]=='Q') {\n      ll x=read();\n      writeln(Ask(1,1,n,x));\n    }\n  }\n\n  return 0;\n}\n```",
        "postTime": 1647103812,
        "uid": 154279,
        "name": "Apolynth",
        "ccfLevel": 0,
        "title": "CF1638E"
    },
    {
        "content": "\u56e0\u4e3a\u8fd9\u9898\u6709\u63a8\u5e73\u64cd\u4f5c\uff0c\u5e76\u4e14\u4e5f\u6ca1\u6709\u5176\u5b83\u989c\u8272\u7684\u533a\u95f4\u64cd\u4f5c\uff0c\u6240\u4ee5\u8003\u8651 $\\text{ODT}$ \u7ef4\u62a4\u989c\u8272\u5e8f\u5217\u3002\n\n2 \u64cd\u4f5c\u662f\u5bf9\u4e00\u4e2a\u989c\u8272\u7684\u70b9\u6574\u4f53 $+x$ \uff0c\u4f46\u663e\u7136\u4e0d\u80fd\u904d\u5386\u4e00\u904d $\\text{ODT}$ \u66b4\u529b\u5730\u505a\uff1b\u6240\u4ee5\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u6bcf\u4e2a\u989c\u8272\u7684\u6574\u4f53 $\\text{tag}$ \uff0c\u64cd\u4f5c 2 \u76f4\u63a5\u4fee\u6539\u4e00\u4e2a\u989c\u8272\u7684 $\\text{tag}$ \u5c31\u53ef\u4ee5\u4e86\u3002\u7136\u540e\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u5b58\u50a8 $a_i-tag_{color_i}$\n\n\u63a5\u7740\u8003\u8651 1 \u64cd\u4f5c\uff0c\u5728 $\\text{ODT}$ \u4e0a\u53d6\u51fa $[l,r]$ \u5185\u7684\u989c\u8272\u5757\u540e\uff0c\u8003\u8651\u5c06\u4e00\u4e2a\u989c\u8272\u5757\u7684\u989c\u8272\u4ece $x'$ \u6362\u6210 $x$ \u4e4b\u540e\uff0c\u5757\u5185\u7684\u6570\u4f1a\u53d1\u751f\u600e\u6837\u7684\u53d8\u5316\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u53ea\u662f\u6539\u53d8\u4e86\u989c\u8272\u5757\u7684\u989c\u8272\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8ba9\u5185\u90e8\u7684\u70b9\u503c\u4fdd\u6301\u4e0d\u53d8\uff1b\u4e0d\u96be\u53d1\u73b0\uff0c\u53ea\u9700\u5c06\u989c\u8272\u5757\u5bf9\u5e94\u533a\u95f4\u90fd\u52a0\u4e0a\u4e24\u79cd\u989c\u8272\u5bf9\u5e94\u7684 $\\text{tag}$ \u7684\u5dee\u5373\u53ef\uff0c\u5373 $tag_x-tag_{x'}$\u3002\n\n\u63a5\u7740\u6211\u4eec\u8003\u8651\u8fd9\u4e2a\u4e1c\u897f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5f88\u660e\u663e\uff0c2 \u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u662f $O(1)$ \uff0c3\u64cd\u4f5c\u5355\u6b21\u590d\u6742\u5ea6\u4e3a $O(\\log n)$\n\n\u8003\u8651 1 \u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5f88\u663e\u7136\uff0c\u6bcf\u6b21 1 \u64cd\u4f5c\u6700\u591a\u7ed9 $\\text{ODT}$ \u52a0\u4e0a $2$ \u4e2a\u989c\u8272\u5757\uff1b\u5982\u679c\u4e00\u4e2a\u989c\u8272\u5757\u5728\u4e00\u6b21 1 \u64cd\u4f5c\u4e2d\u88ab\u904d\u5386\u4e86\uff0c\u5f88\u663e\u7136\u5728\u8fd9\u6b21 1 \u64cd\u4f5c\u540e\u5c31\u4f1a\u88ab\u5220\u9664\u3002\u6240\u4ee5\u6bcf\u4e2a\u989c\u8272\u5757\u53ea\u4f1a\u88ab\u904d\u5386 1 \u6b21\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u6700\u591a\u53ea\u4f1a\u65b0\u5efa $O(n)$ \u4e2a\u989c\u8272\u5757\uff0c\u800c\u6bcf\u4e2a\u989c\u8272\u5757\u6700\u591a\u88ab\u904d\u5386 $1$ \u6b21\uff0c\u6240\u4ee5 1 \u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NR=1e6+10;\n#define ll long long\n#define fi first\n#define se second\nint n,q;ll c[NR];\n\nstruct node{\n\tint l,r,color;\n\tbool operator <(const node &T)const{\n\t\treturn l<T.l;\n\t}\n}; \nset<node>s;\n#define IT set<node>::iterator\n\nll a[NR];\nint lowbit(int x){\n\treturn x&(-x);\n}\nvoid add(int x,ll y){\n\tfor(int i=x;i<=n;i+=lowbit(i))\n\t\ta[i]+=y;\n}\nll sum(int x){\n\tll res=0;\n\tfor(int i=x;i;i-=lowbit(i))\n\t\tres+=a[i];\n\treturn res;\n}\nvoid modify(int l,int r,ll x){\n\tadd(l,x);add(r+1,-x);\n}\n\nIT split(int pos){\n\tIT it=s.lower_bound((node){pos,0,0});\n\tif(it!=s.end()&&(*it).l==pos)return it;\n\tit--;\n\tint l=(*it).l,r=(*it).r,co=(*it).color;\n\ts.erase(it);\n\ts.insert((node){l,pos-1,co});\n\treturn s.insert((node){pos,r,co}).fi;\n}\nvoid assign(int l,int r,int x){\n\tIT it1=split(r+1),it2,it3=split(l);it2=it3;\n\twhile(it1!=it2){\n\t\tmodify((*it2).l,(*it2).r,c[(*it2).color]-c[x]);\n\t\tit2++;\n\t}\n\ts.erase(it3,it1);\n\ts.insert((node){l,r,x});\n}\nint query(int x){\n\tIT it=s.lower_bound((node){x,0,0});\n\tif(it!=s.end()&&(*it).l==x)return (*it).color;\n\tit--;\n\treturn (*it).color;\n}\n\nint main(){\n\tcin>>n>>q;\n\ts.insert((node){1,n,1});\n\twhile(q--){\n\t\tint x,y,z;char opt[10];\n\t\tscanf(\" %s %d\",opt,&x);\n\t\tif(opt[0]=='C'){\n\t\t\tscanf(\" %d%d\",&y,&z);\n\t\t\tassign(x,y,z);\n\t\t}\n\t\tif(opt[0]=='A'){\n\t\t\tscanf(\" %d\",&y);\n\t\t\tc[x]+=y;\n\t\t}\n\t\tif(opt[0]=='Q')printf(\"%lld\\n\",sum(x)+c[query(x)]);\n\t}\t\n\treturn 0;\n}\n```",
        "postTime": 1645527910,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "CF1638E \u9898\u89e3"
    },
    {
        "content": "## \u524d\u8a00\n\n- \u8bed\u8a00\uff1aJava\n- \u53c2\u8003\u8d44\u6599\uff1ahttps://zhuanlan.zhihu.com/p/467535379\n   > \u82e5\u53ef\u4ee5\u770b\u61c2\u4e0a\u9762\u8fd9\u7bc7\u6587\u7ae0\uff0c\u90a3\u4e48\u6b64\u7bc7\u9898\u89e3\u53ef\u4ee5\u4e0d\u770b\uff0c\u6b64\u9898\u89e3\u4f5c\u4e3a\u4e0a\u9762\u7684\u8865\u5145\u3002\n\n## \u89e3\u6790\n\n\u4e2a\u4eba\u8ba4\u4e3a\u672c\u9898\u7684\u96be\u70b9\u5e94\u8be5\u662f\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e2a\u989c\u8272\uff0c\u6211\u4e00\u5f00\u59cb\u662f\u60f3\u7528\u4e00\u4e2a\u7ed3\u70b9\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2a `color` \u548c `val` \u5c5e\u6027\uff0c\u8868\u793a\u6bcf\u4e2a\u7ed3\u70b9\u7684\u989c\u8272\u548c\u503c\uff0c\u7528\u7684\u662f\u7ebf\u6bb5\u6811\uff0c\u540e\u9762\u6211\u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u989c\u8272\u4e0d\u540c\uff0c\u90a3\u4e48 color \u5230\u5e95\u5e94\u8be5\u586b\u4ec0\u4e48\u5462...\uff0cval \u53c8\u8868\u793a\u5565\u5462\uff1f\n\n**\u5f53\u7136\uff0c\u6211\u8fd9\u662f\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u6a21\u677f\u800c\u5df2\uff0c\u624d\u5b66\u4e0d\u4e45\uff0c\u770b\u6765\u8fd8\u662f\u6211\u592a\u83dc\u4e86...** \n\n**\u56de\u5230\u4e3b\u9898\uff1a**\n\n\u6211\u4eec\u5148\u8003\u8651\u5355\u70b9\u64cd\u4f5c\uff0c\u4e09\u79cd\u64cd\u4f5c\u5982\u4e0b\uff1a\n\n- `Color x c`\uff1a\u5c06\u5143\u7d20 $i$ \u7684\u989c\u8272\u4fee\u6539\u4e3a $c$\u3002\n- `Add c x`\uff1a\u5c06\u6240\u6709\u989c\u8272\u4e3a $c$ \u7684\u5143\u7d20\u589e\u52a0 $x$\u3002\n- `Query i`\uff1a\u6253\u5370\u7b2c $i$ \u4e2a\u5143\u7d20\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u4e00\u4e2a $Lazy[color]$ \u6765\u4fdd\u5b58\u6bcf\u4e2a\u989c\u8272\u7684\u603b\u548c\uff0c\u56e0\u4e3a\u6211\u4eec\u603b\u4e0d\u53ef\u80fd\u904d\u5386\u6bcf\u4e00\u4e2a\u989c\u8272\u4e3a $c$ \u7684\u5143\u7d20\u90fd\u589e\u52a0 $x$ \u5427\uff1f\u8fd9\u6837\u6548\u7387\u5f88\u4f4e\uff0c\u53ef\u4ee5\u8003\u8651\u5148\u64cd\u4f5c\uff0c\u7b49\u8be5\u6570\u7684\u989c\u8272\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u518d\u53bb\u66f4\u65b0\u5143\u7d20\u7684\u503c\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5ef6\u8fdf\u64cd\u4f5c\u7684\u6548\u679c\u3002\n\n\u8fd8\u9700\u8981\u4e00\u4e2a $color[i]$ \u4fdd\u6301\u5143\u7d20 $i$ \u7684\u989c\u8272\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c 2 \u6765\u8bf4\uff1a\n\n```java\nLazy[c] += x\n```\n\n\u5bf9\u4e8e\u64cd\u4f5c 3 \u6765\u8bf4\uff1a\n\n```java\nA[x] + Lazy[color[x]] // \u8f93\u51fa\u9700\u8981\u52a0\u4e0a Lazy \uff0c\u8fd9\u5c31\u662f\u5ef6\u8fdf\n```\n\n\u5bf9\u4e8e\u64cd\u4f5c 1 \u6765\u8bf4\uff1a\n\n```java\nA[x] += Lazy[color[x]] // \u989c\u8272\u51c6\u5907\u53d1\u751f\u6539\u53d8\uff0c\u66f4\u65b0\u5f53\u524d\u5143\u7d20`=>`\u89e6\u53d1\u5ef6\u8fdf\u64cd\u4f5c\ncolor[x] = c // \u66f4\u65b0\u989c\u8272\nA[x] -= Lazy[c] // \u56e0\u4e3a\u6211\u4eec\u8f93\u51fa\u65f6\uff0c\u6211\u4eec\u8981\u4fdd\u8bc1 A[x] + Lazy[color[x]]\uff0c\u56e0\u6b64\u9700\u8981\u51cf\u53bb Lazy[c]\n```\n\n**\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\uff1a**\n\n\n```txt\n\u30101\u3011Add 1 7\n\u30102\u3011Query 1 7\n\u30103\u3011Add 2 4\n\u30104\u3011Query 2\n\u30105\u3011Color 1 2\n\u30106\u3011Query 1\n\n====================\nLazy:  0 0 0\nColor: 1 1 1\nA:     0 0 0\n====================\n\u30101\u3011Lazy[1] += 7\n====================\nLazy:  7 0 0\nColor: 1 1 1\nA:     0 0 0\n====================\n\u30102\u3011A[1] + Lazy[color[1]] // print 7\n\u30103\u3011Lazy[2] += 4\n====================\nLazy:  7 4 0\nColor: 1 1 1\nA:     0 0 0\n====================\n\u30104\u3011A[2] + Lazy[color[2]] // print 7\n\u30105\u3011A[1] += Lazy[color[1]]\n     color[1] = 2\n     A[1] -= Lazy[2]\n====================\nLazy:  7 4 0\nColor: 1 1 1\nA:     7 0 0\n--------------------\nLazy:  7 4 0\nColor: 2 1 1\nA:     7 0 0\n--------------------\nLazy:  7 4 0\nColor: 2 1 1\nA:     3 0 0\n====================\n\u30106\u3011A[1] + Lazy[color[1]] // print 7\n```\n\n**\u660e\u767d\u4e86\u5355\u70b9\u64cd\u4f5c\uff0c\u56de\u6765\u770b\u770b\u533a\u95f4\u64cd\u4f5c\uff1a**\n\n\u91c7\u7528\u7ebf\u6bb5\u6811\u548cLazyTag\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u5b9e\u73b0\u3002\n\n`colorVal[color]`\uff1a\u540c\u4e0a\u9762\u7684 Lazy\n\n\u9700\u8981\u4e00\u4e2a\u7ed3\u70b9\uff0c\u91cc\u9762\u7ef4\u62a4\u5982\u4e0b\u5143\u7d20\uff1a\n\n- `same`\uff1a\u8be5\u533a\u95f4\u7684\u6240\u6709\u5143\u7d20\u662f\u5426\u76f8\u540c\n- `color`\uff1a\u8be5\u7ed3\u70b9\u7684\u989c\u8272\uff0c\u5f53 `same` \u4e3a true \u65f6\uff0c\u8868\u793a\u8be5\u533a\u95f4\u5185\u6240\u6709\u7684\u989c\u8272\n- `lazy`\uff1a\u61d2\u6807\u8bb0\uff0c\u540c\u65f6\u4e5f\u4f5c\u4e3a\u8be5\u5143\u7d20\u7684\u503c\n\n\u5bf9\u4e8e\u64cd\u4f5c 2 \u548c \u64cd\u4f5c 3 \u6765\u8bf4\uff0c\u5176\u5b9e\u548c\u5355\u70b9\u7684\u662f\u4e00\u6837\u3002\u5bf9\u4e8e\u64cd\u4f5c 1 \u6765\u8bf4\u4e5f\u5dee\u4e0d\u591a\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c 1\uff1a\u53ea\u4fee\u6539\u540c\u4e00\u79cd\u989c\u8272\u7684\u533a\u95f4\uff0c\u5426\u5219\u5c31\u4e00\u5b9a\u5f80\u4e0b\u627e\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u4e00\u5b9a\u4e3a true\u3002\n\n## AC Code\n\n\n```java\npublic class Main {\n    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    static StreamTokenizer st = new StreamTokenizer(br);\n    static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n\n    static final int MAX = 1000005;\n    static long[] colorVal = new long[MAX];\n    static Node[] T = new Node[MAX << 2];\n    static int n, m;\n\n    public static void main(String[] args) throws Exception {\n        n = nextInt(); m = nextInt();\n        build(1, 1, n);\n        while(m-- != 0) {\n            String opt = nextStr();\n            if(opt.equals(\"Color\")) update(1, nextInt(), nextInt(), nextInt());\n            else if(opt.equals(\"Add\")) colorVal[nextInt()] += nextInt();\n            else if(opt.equals(\"Query\")) {\n                int v = nextInt();\n                out.println(query(1, v, v));\n            }\n        }\n        out.flush();\n    }\n\n    public static void build(int p, int start, int end) {\n        T[p] = new Node(start, end);\n        if(start == end) {\n            T[p].color = 1;\n            T[p].same = true;\n            return;\n        }\n        int mid = (start + end) / 2;\n        build(L(p), start, mid);\n        build(R(p), mid + 1, end);\n        pushUp(p);\n    }\n\n    public static void update(int p, int start, int end, int k) {\n        // \u53ea\u4fee\u6539\u540c\u4e00\u79cd\u989c\u8272\u7684\u533a\u95f4\uff0c\u5426\u5219\u5c31\u4e00\u76f4\u5f80\u4e0b\u627e\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u4e00\u5b9a\u4e3a true\n        if(start <= T[p].left && end >= T[p].right && T[p].same) {\n            T[p].lazy += colorVal[T[p].color];\n            T[p].color = k;\n            T[p].lazy -= colorVal[T[p].color];\n            return;\n        }\n        pushDown(p);\n        int mid = (T[p].left + T[p].right) / 2;\n        if(start <= mid) update(L(p), start, end, k);\n        if(end > mid) update(R(p), start, end, k);\n        pushUp(p);\n    }\n\n    public static long query(int p, int start, int end) {\n        long res = 0;\n        if(start <= T[p].left && end >= T[p].right)\n            return T[p].lazy + colorVal[T[p].color];\n        pushDown(p);\n        int mid = (T[p].left + T[p].right) / 2;\n        if(start <= mid) res += query(L(p), start, end);\n        if(end > mid) res += query(R(p), start, end);\n        return res;\n    }\n\n    public static void pushDown(int p) {\n        // \u56e0\u4e3a\u6211\u4eec\u4fee\u6539\u7684\u662f\u540c\u4e00\u79cd\u989c\u8272\u7684\u533a\u95f4\uff0c\u56e0\u6b64\u4e5f\u5bf9\u540c\u4e00\u79cd\u989c\u8272\u7684\u533a\u95f4\u4e0b\u4f20\n        if(T[p].same) {\n            T[L(p)].lazy += T[p].lazy;\n            T[R(p)].lazy += T[p].lazy;\n            T[L(p)].color = T[p].color;\n            T[R(p)].color = T[p].color;\n            T[p].lazy = 0;\n        }\n    }\n\n    public static void pushUp(int p) {\n        // \u53ea\u66f4\u65b0\u540c\u4e00\u79cd\u989c\u8272\u7684\u533a\u95f4\n        if(T[L(p)].same && T[R(p)].same && T[L(p)].color == T[R(p)].color) {\n            T[p].same = true;\n            T[p].color = T[R(p)].color;\n        } else {\n            T[p].same = false;\n        }\n    }\n\n    public static int L(int p) { return p<<1; };\n    public static int R(int p) { return p<<1|1; };\n\n    public static int nextInt() throws Exception {\n        st.nextToken();\n        return (int) st.nval;\n    }\n\n    public static String nextStr() throws Exception {\n        st.nextToken();\n        return st.sval;\n    }\n}\n\nclass Node {\n    int left, right;\n    int color; // \u8be5\u533a\u95f4\u989c\u8272\n    long lazy; // lazyTag\n    boolean same; // \u8be5\u533a\u95f4\u5185\u7684\u989c\u8272\u662f\u5426\u5b8c\u5168\u76f8\u540c\n    public Node(int left, int right) {\n        this.left = left;\n        this.right = right;\n    }\n}\n```\n\n\n\n",
        "postTime": 1645181034,
        "uid": 561690,
        "name": "\u6d1b\u8c37\u5c0f\u7075",
        "ccfLevel": 0,
        "title": "CF1638E \u7ebf\u6bb5\u6811+LazyTag"
    },
    {
        "content": "\u6bcf\u6b21\u533a\u95f4\u67d3\u8272\uff0c\u4f1a\u5220\u9664\u82e5\u5e72\u4e2a\u989c\u8272\u6bb5\uff0c\u6dfb\u52a0 $\\mathcal{O}(1)$ \u4e2a\u989c\u8272\u6bb5\u3002\u56e0\u6b64\u989c\u8272\u6bb5\u603b\u6570\u662f $\\mathcal{O}(n+q)$\uff0e\n\n\u91c7\u7528\u5e73\u8861\u6811\uff08\u7528 set \u5373\u53ef\uff09\u7ef4\u62a4\u6781\u957f\u8fde\u7eed\u989c\u8272\u6bb5\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u989c\u8272\u589e\u52a0\u503c\u5927\u5c0f\u7684 $tag$\uff0c\u5e76\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u51cf\u53bb\u5bf9\u5e94\u989c\u8272\u7684 $tag$ \u503c\u3002\n\n`Add`\uff1a\u76f4\u63a5\u7ed9\u5bf9\u5e94\u989c\u8272\u7684 $tag$ \u8fdb\u884c\u4fee\u6539\u3002\n\n`Color`\uff1a\u5f53\u5220\u9664\u4e00\u4e2a\u989c\u8272\u6bb5\u65f6\uff0c\u5c31\u5c06\u5176\u533a\u95f4\u52a0\u4e0a\u539f\u5148\u989c\u8272\u7684 $tag$ \u503c\uff1b\u5f53\u6dfb\u52a0\u4e00\u4e2a\u989c\u8272\u6bb5\u65f6\uff0c\u5c31\u5c06\u5176\u533a\u95f4\u51cf\u53bb\u65b0\u989c\u8272\u7684 $tag$ \u503c\uff08\u56e0\u4e3a\u65b0\u989c\u8272\u539f\u5148\u7684 $tag$ \u5e76\u6ca1\u6709\u52a0\u5728\u8fd9\u4e00\u6bb5\u4e0a\uff0c\u9700\u8981\u51cf\u53bb\uff09\u3002\n\n`Query`\uff1a\u8f93\u51fa\u7b54\u6848\u5373\u53ef\uff0c\u5373\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u503c\u52a0\u4e0a\u5bf9\u5e94\u989c\u8272\u7684 $tag$ \u503c\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u6811\u72b6\u6570\u7ec4\u64cd\u4f5c\u6b21\u6570\u548c\u989c\u8272\u6bb5\u6b21\u6570\u5448\u7ebf\u6027\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}((n+q)\\log n)$\uff0e\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<set>\n#define pb emplace_back\n#define mp std::make_pair\n#define fi first\n#define se second\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef std::pair<int,int>pii;\ntypedef std::pair<ll,int>pli;\ntypedef std::pair<ll,ll>pll;\ntypedef std::vector<int>vi;\ntypedef std::vector<ll>vll;\ntemplate<typename T>T cmax(T &x, T y){return x=x>y?x:y;}\ntemplate<typename T>T cmin(T &x, T y){return x=x<y?x:y;}\ntemplate<typename T>\nT &read(T &r){\n\tr=0;bool w=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')w=ch=='-'?1:0,ch=getchar();\n\twhile(ch>='0'&&ch<='9')r=r*10+(ch^48),ch=getchar();\n\treturn r=w?-r:r;\n}\ntemplate<typename T1,typename... T2>\nvoid read(T1 &x, T2& ...y){ read(x); read(y...); }\nconst int N=1000010;\ninline int lowbit(int x){return x&(-x);}\nint n,q;\nll tree[N],tag[N];\nvoid modify(int x,ll v){\n\tfor(;x<=n;x+=lowbit(x))tree[x]+=v;\n}\nvoid change(int x,int y,ll v){\n\tmodify(x,v);\n\tif(y<n)modify(y+1,-v);\n}\nll query(int x){\n\tll s=0;\n\tfor(;x;x-=lowbit(x))s+=tree[x];\n\treturn s;\n}\nstruct Node{\n\tint l,r,c;\n\tNode(int x=0,int y=0,int z=0){\n\t\tl=x;r=y;c=z;\n\t}\n\tbool operator < (const Node &x)const{\n\t\treturn l<x.l;\n\t}\n};\nset<Node>st;\n#define IT set<Node>::iterator\nIT split(int pos){\n\tauto it=st.lower_bound(Node(pos,pos,0));\n\tif(it!=st.end()&&(*it).l==pos)return it;\n\t--it;\n\tint L=(*it).l,R=(*it).r,C=(*it).c;\n\tst.erase(it);\n\tst.insert(Node(L,pos-1,C));\n\treturn st.insert(Node(pos,R,C)).first;\n}\nvoid assign(int l,int r,int c){\n\tauto itr=split(r+1),itl=split(l);\n\tauto it=split(l);\n\tfor(;it!=itr;++it)\n\t\tchange((*it).l,(*it).r,tag[(*it).c]);\n\tst.erase(itl,itr);\n\tst.insert(Node(l,r,c));\n\tchange(l,r,-tag[c]);\n}\nint Col(int l,int r){\n\tauto it=st.lower_bound(Node(l,r,0));\n\twhile(it==st.end()||(!(l>=(*it).l && r<=(*it).r)))--it;\n\treturn (*it).c;\n}\nsigned main(){\n\t#ifdef do_while_true\n\tfreopen(\"data.in\",\"r\",stdin);\n\t#endif \n\tread(n,q);\n\tst.insert(Node(1,n,1));\n\twhile(q--){\n\t\tchar ch=getchar();while(ch!='C'&&ch!='A'&&ch!='Q')ch=getchar();\n\t\tif(ch=='A'){\n\t\t\tint c,x;read(c,x);\n\t\t\ttag[c]+=x;\n\t\t}\n\t\telse if(ch=='Q'){\n\t\t\tint x;read(x);\n\t\t\tcout << query(x)+tag[Col(x,x)] << '\\n';\n\t\t}\n\t\telse{\n\t\t\tint l,r,c;read(l,r,c);\n\t\t\tassign(l,r,c);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1644994801,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300dCodeforces 1638E Colorful Operations"
    },
    {
        "content": "## Solution\n\n\u6709\u5f88\u660e\u663e\u7684\u533a\u95f4\u8986\u76d6\u64cd\u4f5c\uff0c\u6211\u4eec\u8003\u8651\u7528 ODT\u3002\n\n\u64cd\u4f5c\u4e8c\u76f4\u63a5\u66b4\u529b\u7684\u8bdd\u663e\u7136\u4e0d\u53ef\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u6bcf\u4e2a\u989c\u8272\u7ef4\u62a4\u4e00\u4e2a $tag_{col_i}$\uff0c\u8868\u793a $col_i$ \u8fd9\u4e2a\u989c\u8272\u9700\u8981\u52a0\u7684\u6570\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e8c\u7684\u65f6\u5019\u76f4\u63a5\u7ed9\u8fd9\u4e2a\u989c\u8272\u7684 $tag$ \u52a0\u4e0a\u5373\u53ef\u3002\n\n\u64cd\u4f5c\u4e00\u4e2d\uff0c\u5f53\u989c\u8272\u4fee\u6539\u7684\u65f6\u5019\uff0c\u8981\u628a\u5f53\u524d\u989c\u8272\u4e4b\u524d\u6ca1\u6709\u52a0\u4e0a\u7684 $tag$ \u52a0\u4e0a\uff0c\n\n\u6240\u4ee5\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u9ad8\u6548\u7ef4\u62a4\u533a\u95f4\u52a0\uff0c\u5355\u70b9\u67e5\uff0c\u7ebf\u6bb5\u6811\uff0c\u6811\u72b6\u6570\u7ec4\u90fd\u53ef\u4ee5\u3002\n\n\u6700\u540e\u52a0\u5b8c\u4e4b\u540e\u8981\u5728\u8986\u76d6\u540e\u7684\u533a\u95f4\u51cf\u53bb\u4e00\u4e2a $tag$\uff0c\u56e0\u4e3a\u5f53\u8986\u76d6\u5b8c\u4e4b\u540e\uff0c\u5f53\u524d\u7684\u989c\u8272\u4e4b\u524d\u52a0\u7684\u6570\u4ed6\u5e76\u4e0d\u9700\u8981\u52a0\uff0c\u6240\u4ee5\u63d0\u524d\u51cf\u53bb\u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002\n\n\u64cd\u4f5c\u4e09\u5c31\u662f\u6811\u72b6\u6570\u7ec4\u5355\u70b9\u67e5\u3002\n\n\u6ce8\u610f\u9700\u8981\u5f00 long long\u3002\n```cpp\n/**\n *\tauthor: TLE_Automation\n *\tcreater: 2022.9.6\n **/\n#include<set>\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<bitset>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define gc getchar\n#define int long long\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e6 + 10;\nconst int mod = 998244353;\nconst ll inf = 0x3f3f3f3f3f3f3f3f;\n#define debug cout << \"i ak ioi\" << \"\\n\"\ninline void print(int x) {if (x < 0) putchar('-'), x = -x; if(x > 9) print(x / 10); putchar(x % 10 + '0');}\ninline char readchar() {static char buf[100000], *p1 = buf, *p2 = buf; return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;}\ninline int read() { int res = 0, f = 0; char ch = gc();for (; !isdigit(ch); ch = gc()) f |= (ch == '-'); for (; isdigit(ch); ch = gc()) res = (res << 1) + (res << 3) + (ch ^ '0'); return f ? -res : res;}\n\n\nint n, q, tag[N];\n\nnamespace Bit {\n\tint c[N];\n\t#define lowbit(x) (x & -x)\n\tvoid add(int x, int k) {for(; x <= n; x += lowbit(x)) c[x] += k; }\n\tint Query(int x) {int res = 0; for(; x; x -= lowbit(x)) res += c[x]; return res;}\n}\nusing namespace Bit;\n\nnamespace Chtholly_tree {\n\t#define It set <Node>::iterator\n\tstruct Node {\n\t\tint l, r; mutable int v;\n\t\tNode (int L, int R = 0, int V = 0) : l(L), r(R), v(V) {}\n\t\tbool operator < (const Node &x) const {return l < x.l; }\n\t}; set <Node> s;\n\tIt Split(int pos) {\n\t\tIt it = s.lower_bound(Node(pos));\n\t\tif(it != s.end() && it -> l == pos) return it;\n\t\t--it; int L = it -> l, R = it -> r, V = it -> v;\n\t\ts.erase(it); s.insert(Node(L, pos - 1, V));\n\t\treturn s.insert(Node(pos, R, V)).first;\n\t}\n\tvoid Cover(int l, int r, int val) {\n\t\tIt itr = Split(r + 1), itl = Split(l);\n\t\tfor(It it = itl; it != itr; ++it) \n\t\t\tadd(it -> l, tag[it -> v]), add(it -> r + 1, -tag[it -> v]);\n\t\ts.erase(itl, itr), s.insert(Node(l, r, val));\n\t\tadd(l, -tag[val]),  add(r + 1, tag[val]);\n\t}\n\tint getans(int pos) {\n\t\tIt it = s.lower_bound(Node(pos, 0, 0));\n\t\tif(it != s.end() && it -> l == pos) return Query(pos) + tag[it -> v];\n\t\telse return Query(pos) + tag[(--it) -> v];\n\t}\n}\nusing namespace Chtholly_tree;\n\nsigned main() \t\n{\n\tn = read(), q = read();\n\ts.insert(Node(1, n + 5, 1));\n\tfor(int i = 1; i <= q; i++) {\n\t\tstring s; cin >> s;\n\t\tif(s == \"Color\") {\n\t\t\tint l = read(), r = read(), c = read();\n\t\t\tCover(l, r, c);\n\t\t}\n\t\telse if(s == \"Add\") {\n\t\t\tint c = read(), x = read();\n\t\t\ttag[c] += x;\n\t\t}\n\t\telse {\n\t\t\tint pos = read();\n\t\t\tprintf(\"%lld\\n\", getans(pos));\n\t\t}\n\t}\n\treturn (0 - 0);\n}\n\n```",
        "postTime": 1662424255,
        "uid": 396974,
        "name": "Buried_Dream",
        "ccfLevel": 4,
        "title": "CF1638E Colorful Operations \u9898\u89e3"
    },
    {
        "content": "\u7b2c\u4e00\u6b21\u5728\u8d5b\u573a\u4e0a\u60f3\u51fa\u53ea\u6709\u90a3\u4e48\u70b9\u4eba\u8fc7\u7684 E \u7559\u5ff5\u3002~~\u53ef\u662f\u5728 C \u4e0a\u5361\u4e86\u597d\u4e45\u6ca1\u65f6\u95f4\u8c03\u4e86\u3002~~\n\n\u5982\u679c\u53ea\u80fd\u6539\u6210\u4e00\u79cd\u989c\u8272\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u989c\u8272\u52a0\u6807\u8bb0\uff0c\u628a\u4e00\u6bb5\u4fee\u6539\u6210\u8fd9\u4e2a\u989c\u8272\u524d\u5148\u628a\u8fd9\u4e00\u6bb5\u90fd\u51cf\u53bb\u8be5\u989c\u8272\u73b0\u5728\u5df2\u6709\u7684\u6807\u8bb0\uff0c\u6700\u540e\u67e5\u8be2\u4f4d\u7f6e\u4e0a\u7684\u503c\u518d\u52a0\u4e0a\u52a0\u6807\u8bb0\u5c31\u53ef\u4ee5\u4e86\uff08\u597d\u50cf\u67d0\u573a ABC \u51fa\u8fc7\uff1f\uff09\uff0c\u4f46\u662f\u5982\u679c\u8fdb\u884c\u591a\u6b21\u989c\u8272\u66f4\u6539\uff0c\u90a3\u8fd9\u6837\u5c31\u4f1a\u4e22\u5931\u539f\u6765\u7684\u6807\u8bb0\u3002\n\n\u4e00\u79cd\u6734\u7d20\u7684\u5f25\u8865\u60f3\u6cd5\u662f\u5728\u8fdb\u884c\u4e00\u6b21\u4fee\u6539\u4e4b\u524d\uff0c\u5148\u628a\u4e00\u4e2a\u4f4d\u7f6e\u5148\u524d\u989c\u8272\u7684\u6807\u8bb0\u52a0\u5230\u90a3\u4e2a\u4f4d\u7f6e\u4e0a\uff0c\u518d\u8fdb\u884c\u4fee\u6539\u989c\u8272\u3002\u56e0\u4e3a\u53ea\u6709\u6700\u591a $2q$ \u4e2a\u989c\u8272\u95f4\u7684\u5206\u754c\u70b9\uff0c\u800c\u4e00\u4e2a\u5206\u754c\u70b9\u88ab\u8986\u76d6\u4e4b\u540e\u5c31\u4f1a\u6d88\u5931\uff0c\u6240\u4ee5\u82e5\u6bcf\u6b21\u5bf9\u6574\u5757\u989c\u8272\u8fdb\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u6700\u591a $O(q)$ \u6b21\u8986\u76d6\uff0c\u590d\u6742\u5ea6\u5c31\u662f\u5bf9\u7684\u3002\n\n\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u989c\u8272\uff0c\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u65ad\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u627e\u5230\u4e00\u5757\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6765\u5b9e\u73b0\uff0c\u5373\u627e\u5230\u7b2c\u4e00\u4e2a\u65ad\u70b9\u524d\u7f00\u548c\u591a\u4e86\u7684\u4f4d\u7f6e\uff0c\u76f4\u63a5\u4e8c\u5206\u662f\u4e24\u53ea $\\log$ \u7684\uff0c\u6811\u72b6\u6570\u7ec4\u4e0a\u4e8c\u5206\u5e94\u8be5\u53ef\u4ee5\u505a\u5230\u4e00\u53ea $\\log$ \u4f46\u6bd4\u8d5b\u7684\u65f6\u5019\u4e3a\u4e86\u6c42\u7a33\u8d76\u65f6\u95f4\u6211\u76f4\u63a5\u4e8c\u5206\u4e86\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7ef4\u62a4\u65ad\u70b9\u7684\u6811\u72b6\u6570\u7ec4\u662f\u5355\u70b9\u4fee\u6539\u67e5\u524d\u7f00\u548c\u7684\uff0c\u5176\u5b83\u4e24\u4e2a\u662f\u533a\u95f4\u4fee\u6539\u67e5\u5355\u70b9\u7684\u3002~~\u6700\u540e 4min \u5199\u5b8c\u4e00\u904d\u8fc7\u6837\u4f8b\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u641e\u9519\u5374\u559c\u63d0 RE\u3002~~\n\n```cpp\nconstexpr int N = 100'0006;\nlong long n, q, cnt[N];\nstruct bit {\n    long long t[N];\n    void upd(int x, int v) {\n        for ( ; x <= n + 1; x += x & -x) t[x] += v;\n    }\n    long long qry(int x) {\n        long long an = 0;\n        for ( ; x; x -= x & -x) an += t[x];\n        return an;\n    }\n    void add(int l, int r, int v) {\n        upd(l, v), upd(r + 1, -v);\n    }\n} bre, col, sum;\nvoid cover(int L, int R, int c) {\n    int oL = L;\n    while (\"Powered By CP Editor\"[0]) {\n        int l = L, r = R, ans = -1;\n        while (l <= r) {\n            int mid = l + (r - l) / 2;\n            if (bre.qry(mid) == bre.qry(L)) l = mid + 1;\n            else ans = mid, r = mid - 1;\n        }\n        bool flag = 0;\n        if (ans == -1) {\n            ans = R + 1;\n            flag = 1;\n        }\n        int oc = col.qry(L);\n        sum.add(L, ans-1, cnt[oc]);\n        col.add(L, ans-1, -oc), col.add(L, ans-1, c);\n        if (bre.qry(ans) != bre.qry(ans-1)) bre.upd(ans, -1);\n        L = ans;\n        if (flag == 1) break;\n    }\n    if (bre.qry(R + 1) == bre.qry(R)) bre.upd(R + 1, 1);\n    if (bre.qry(oL) == bre.qry(oL-1)) bre.upd(oL, 1);\n}\nvoid main() {\n    std::cin >> n >> q;\n    col.add(1, n, 1);\n    bre.upd(1, 1);\n    while (q--) {\n        std::string opt;\n        std::cin >> opt;\n        if (opt == \"Color\") {\n            int a, b, c;\n            std::cin >> a >> b >> c;\n            cover(a, b, c);\n            sum.add(a, b, -cnt[c]);\n        }\n        else if (opt == \"Add\") {\n            int a, b;\n            std::cin >> a >> b;\n            cnt[a] += b;\n        }\n        else {\n            int a;\n            std::cin >> a;\n            std::cout << sum.qry(a) + cnt[col.qry(a)] << '\\n';\n        }\n    }\n}\n```",
        "postTime": 1644923054,
        "uid": 499996,
        "name": "Qiaoqia",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1638E Colorful Operations"
    }
]