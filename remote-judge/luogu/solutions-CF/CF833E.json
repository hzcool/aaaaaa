[
    {
        "content": "### Problem Statement\n\n$n$ \u4e2a\u533a\u95f4\uff0c\u7b2c $i$ \u4e2a\u4e3a $[l_i, r_i]$\uff0c\u4ee3\u4ef7\u4e3a $c_i$\u3002\u6709\u4ee3\u4ef7\u9650\u5236\u4e3a $C$\u3002\n\n$m$ \u6b21\u8be2\u95ee\uff0c\u53ef\u79fb\u9664\u603b\u4ee3\u4ef7\u4e0d\u8d85\u8fc7 $C$ \u7684\u81f3\u591a\u4e24\u4e2a\u533a\u95f4\uff0c\u6c42\u6700\u5c0f\u7684 $x$ \u4f7f\u5f97 $[0, x]$ \u5185\u81f3\u5c11\u6709 $k_j - \\epsilon$ \u7684\u957f\u5ea6\u672a\u88ab\u4efb\u4f55\u533a\u95f4\u8986\u76d6\u3002\u8be2\u95ee\u72ec\u7acb\u3002\n\n### Constraints\n\n$0 \\le n \\le 3 \\times 10^5$\uff0c$1 \\le m \\le 3 \\times 10^5$\uff0c$0 \\le l_i \\lt r_i \\le 10^9$\uff0c$1 \\le k_j \\le 10^9$\uff0c$0 \\le C, c_i \\le 10^9$\u3002\u6240\u6709\u6570\u636e\u5747\u4e3a\u6574\u6570\u3002\n\n---\n\n### Solution\n\n\u8bb0 $S \\coloneqq \\lbrace l_i \\rbrace \\cup \\lbrace r_i \\rbrace$\u3002\u95ee\u9898\u6613\u4e8e\u8f6c\u5316\u4e3a\uff1a\u5bf9\u4e8e $S$ \u4e2d\u7684\u6bcf\u4e00\u70b9 $x$\uff0c\u6c42\u51fa\u5728\u53ea\u8003\u8651 $[0, x]$ \u7684\u60c5\u51b5\u4e0b\uff0c\u672a\u88ab\u8986\u76d6\u7684\u6700\u5927\u957f\u5ea6 $l_x$\u200b\u3002\n\n\u8003\u8651\u9012\u589e\u679a\u4e3e $x$\u3002\u5047\u8bbe\u5f53\u524d\u8f6c\u79fb\u4e3a $x' \\to x$\u200b\u3002\n\u8bb0 $v_i$\u200b \u8868\u793a\uff1a\u9009\u62e9\u7684\u533a\u95f4\u5305\u542b $i$\u200b\uff0c\u4e14 $i$ \u533a\u95f4\u5728\u8fd9\u4e9b\u533a\u95f4\u4e2d\u53f3\u7aef\u70b9\u6700\u5927\uff08\u76f8\u540c\u53ef\u6309\u7f16\u53f7\u94a6\u5b9a\u987a\u5e8f\uff09\uff0c\u5728\u53ea\u8003\u8651\u5f53\u524d $[0, x]$ \u7684\u60c5\u51b5\u4e0b\uff0c\u65b0\u589e\u7a7a\u767d\u957f\u5ea6\u6700\u5927\u503c\u3002\n\u8bb0 $v_{0, i}$ \u8868\u793a\uff1a\u4ec5\u9009\u62e9\u533a\u95f4 $i$\uff0c\u5728\u53ea\u8003\u8651\u5f53\u524d $[0, x]$ \u7684\u60c5\u51b5\u4e0b\uff0c\u65b0\u589e\u7a7a\u767d\u957f\u5ea6\u6700\u5927\u503c\u3002\n\u8bb0 $o_i$ \u8868\u793a\uff1a\u533a\u95f4 $i$ \u4e2d\uff0c\u5728\u53ea\u8003\u8651\u5f53\u524d $[0, x]$ \u7684\u60c5\u51b5\u4e0b\uff0c\u81f3\u591a\u88ab\u4e24\u4e2a\u533a\u95f4\u8986\u76d6\u7684\u957f\u5ea6\u3002\n\u5bb9\u6613\u901a\u8fc7\u8bb0\u5f55\u4ee5\u4e0a\u4e09\u8005\u8f6c\u79fb $l_x$\u3002\n\n>\u5177\u4f53\u5730\uff0c\u82e5\u5f53\u524d\u6bb5\u88ab\u591a\u4e8e\u4e24\u7aef\u533a\u95f4\u8986\u76d6\uff0c\u5219 $l_x \\gets l_{x'}$\u3002\n>\u82e5\u672a\u88ab\u8986\u76d6\uff0c\u5219 $l_x \\gets l_{x'} + (x - x')$\u3002\n>\u82e5\u67d0\u4e2a\u533a\u95f4\u9996\u6b21\u51fa\u73b0\uff0c\u5219\u5bf9\u5e94\u7684 $v$ \u66f4\u65b0\u4e3a\u5176\u5de6\u4fa7 $v_0$ \u7684\u6700\u5927\u503c\uff08\u5bf9\u4ee3\u4ef7\u6709\u8981\u6c42\uff0c\u53ef\u901a\u8fc7\u5e73\u8861\u6811\uff08C++ \u4e2d `std::map`\uff09\u7ef4\u62a4\u5355\u8c03\u6027\uff09\u3002\n>\u82e5\u6070\u88ab\u4e00\u4e2a\u533a\u95f4\u8986\u76d6\uff0c\u66f4\u65b0\u5bf9\u5e94\u7684 $v_i, v_{0, i}, o_i$\uff0c\u7528\u5bf9\u5e94\u7684 $v_i$ \u66f4\u65b0 $l_x$\u3002\n>\u82e5\u6070\u88ab\u4e24\u4e2a\u533a\u95f4\u8986\u76d6\uff0c\u66f4\u65b0\u4e24\u533a\u95f4\u7684 $o_i$\uff0c\u53ca\u53f3\u7aef\u70b9\u8f83\u5927\u8005\u5bf9\u5e94\u7684 $v_i$\uff0c\u7528\u8fd9\u4e00 $v$ \u66f4\u65b0 $l_x$\u3002\n\n\u8be2\u95ee\u65f6\u4e8c\u5206 $S$ \u4e2d\u7684 $x$\u3002\u663e\u7136\u5bf9\u4e8e $x' \\to x$\uff0c\u82e5 $l_{x'} \\ne l_x$\uff0c\u5219 $l_{x''} = \\max(l_{x'}, l_x - (x - x'')) \\pod{x' \\le x'' \\le x}$\u3002\u6ce8\u610f $\\max S$ \u5916\u7684\u5904\u7406\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O((n + m) \\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n + m)$\u3002",
        "postTime": 1649327728,
        "uid": 236807,
        "name": "Mitama",
        "ccfLevel": 9,
        "title": "[Solution] CF0833E"
    },
    {
        "content": "\u5148\u628a\u8bfb\u5165\u7684\u7ebf\u6bb5\u8f6c\u6210\u7aef\u70b9\u7684\u5f62\u5f0f\u3002\u5bf9\u6bcf\u4e2a\u6d89\u53ca\u5230\u7684\u7aef\u70b9 $x$\uff0c\u6211\u4eec\u8ba1\u7b97\u51fa $ans_x$ \u8868\u793a\u53ea\u8003\u8651 $[0,x]$ \u8fd9\u6bb5\u533a\u95f4\uff0c\u6700\u591a\u80fd\u6709\u591a\u5c11\u591a\u957f\u7684\u7ebf\u6bb5\u4e0d\u88ab\u8986\u76d6\u3002\u90a3\u4e48\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a $s$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728 $ans$ \u6570\u7ec4\u91cc lower_bound \u4e00\u4e0b\uff0c\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u5728\u4e00\u6bb5\u533a\u95f4\u4e2d\u3002\u6ce8\u610f\u5230\u8fd9\u6bb5\u533a\u95f4\u4e00\u5b9a\u4e0d\u88ab\u8986\u76d6\uff0c\u5426\u5219\u7b54\u6848\u5e94\u8be5\u5728\u4e0a\u4e00\u6bb5\u533a\u95f4\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u51fa\u7b54\u6848\u3002\u90a3\u4e48\u95ee\u9898\u53d8\u6210\u4e86\u6c42 $ans$ \u6570\u7ec4\u3002\n\n\u8003\u8651\u7aef\u70b9\u5206\u5272\u5f62\u6210\u7684\u6bcf\u4e00\u6bb5\u7ebf\u6bb5\u7684\u8986\u76d6\u60c5\u51b5\uff0c\u5982\u679c $0$ \u6761\u90a3\u4e48\u767d\u7ed9\uff0c\u5982\u679c $>2$ \u6761\u90a3\u4e48\u5fc5\u7136\u88ab\u8986\u76d6\uff0c\u90a3\u4e48\u53ea\u5269\u4e0b $1$ \u6761\u548c $2$ \u6761\u3002\u8003\u8651\u5982\u679c\u5220\u9664\u7684\u662f\u4e00\u6761\u7ebf\u6bb5 $x$\uff0c\u90a3\u4e48\u8d21\u732e\u662f\u8986\u76d6\u4e00\u6b21\u7684\u4e14\u662f\u88ab $x$ \u8986\u76d6\u7684\u7ebf\u6bb5\uff0c\u5982\u679c\u662f\u4e24\u6761\u7ebf\u6bb5 $x,y$\uff0c\u90a3\u4e48\u662f\u8986\u76d6\u4e00\u6b21\u7684\u4e14\u662f\u88ab $x$ \u6216 $y$ \u8986\u76d6\u7684\u7ebf\u6bb5\uff0c\u52a0\u4e0a\u8986\u76d6\u4e24\u6b21\u7684\u4e14\u662f\u88ab $x$ \u548c $y$ \u8986\u76d6\u7684\u7ebf\u6bb5\u3002\u626b\u63cf\u7aef\u70b9 $x$ \u5c1d\u8bd5\u7ef4\u62a4\u4fe1\u606f\u3002\n\n\u5982\u679c\u5b58\u5728\u4e00\u6bb5\u533a\u95f4\u88ab\u8986\u76d6\u4e86\u4e24\u6b21\uff0c\u4e14\u662f\u88ab\u7ebf\u6bb5 $x$ \u548c\u7ebf\u6bb5 $y$ \u8986\u76d6\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5728 $x$ \u70b9\u548c $y$ \u70b9\u76f4\u63a5\u8fde\u8fb9\uff0c\u5bb9\u6613\u8bc1\u660e\u5f62\u6210\u4e86\u4e00\u4e2a\u68ee\u6797\u3002\u6bcf\u6b21\u6dfb\u52a0\u4e00\u4e2a\u7ebf\u6bb5\u7684\u65f6\u5019\uff0c\u8981\u4e48\u662f\u7ed9\u4e00\u4e2a\u70b9\u589e\u52a0\u4e00\u4e2a\u6743\u503c\uff0c\u8981\u4e48\u662f\u7ed9\u4e00\u6761\u8fb9\u589e\u52a0\u4e00\u4e2a\u6743\u503c\uff0c\u6bcf\u6b21\u9700\u8981\u627e\u5230 $x,y$ \u6ee1\u8db3 $x$ \u7684\u70b9\u6743 + $y$ \u7684\u70b9\u6743 + $(x,y)$ \u7684\u8fb9\u6743\uff08\u5982\u679c\u5b58\u5728\u8fb9\uff09\u6700\u5927\u5316\uff0c\u4e14\u6ee1\u8db3 $c_x+c_y\\le C$\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u662f\u53ef\u4ee5\u7ef4\u62a4\u7684\uff0c\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff1a$(x,y)$ \u4e4b\u95f4\u6709\u8fb9\u4e0e\u65e0\u8fb9\u3002\u65e0\u8fb9\u7684\u65f6\u5019\u6bcf\u6b21\u4fee\u6539 $c_x$ \u7684\u65f6\u5019\u8003\u8651\u5176\u4e2d\u4e00\u4e2a\u9009\u62e9 $c_x$\uff0c\u53e6\u4e00\u4e2a\u9700\u8981\u6ee1\u8db3 $c\\le C-c_x$\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u6700\u503c\u5c31\u884c\u3002\u6709\u8fb9\u7684\u65f6\u5019\u53ef\u4ee5\u5728\u6811\u4e0a\u7528\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u6280\u5de7\u7ef4\u62a4\uff0c\u4f46\u662f\u8fd9\u68f5\u6811\u8fd8\u5f88\u7279\u6b8a\uff0c\u5bb9\u6613\u53d1\u73b0\u5265\u6389\u53f6\u5b50\u4e4b\u540e\u5c31\u662f\u4e00\u6761\u94fe\u3002\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u5ea6\u6570\u4e0d\u4e3a $1$ \u7684\u70b9\uff0c\u7ef4\u62a4\u5176\u5468\u56f4\u7684\u53f6\u5b50\u70b9\u6743\u548c\u4e4b\u95f4\u7684\u8fb9\u6743\u7684 $\\max$ \u5373\u53ef\u3002\n\n\u5199\u8d77\u6765\u6709\u4e00\u4e9b\u7ec6\u8282\u3002\u7ebf\u6bb5\u6811\u5982\u679c\u52a8\u6001\u5f00\u70b9\u53ef\u80fd\u4f1a\u88ab\u5361\u7a7a\u95f4\u3002\u6ce8\u610f\u5982\u679c\u7ebf\u6bb5\u6811\u6700\u503c\u67e5\u5230\u81ea\u5df1\u8981\u5224\u4e00\u4e0b\u3002\u6211\u5199\u7684\u6bd4\u8f83\u4e11\u6240\u4ee5\u4ee3\u7801\u5c31\u4e0d\u653e\u4e86\u3002\u590d\u6742\u5ea6\u662f\u4e00\u4e2a $\\log$\u3002",
        "postTime": 1683112855,
        "uid": 151475,
        "name": "Little09",
        "ccfLevel": 8,
        "title": "CF833E Caramel Clouds"
    },
    {
        "content": "\u5e7f\u544a\uff1a\u98df\u7528[$blog$](https://www.cnblogs.com/heyujun/p/10207742.html)\u4f53\u9a8c\u66f4\u4f73\n\n\u8fd9\u9898\u597d\u795e\u4ed9\u554a\u3002\u3002\u3002\n\n\u6211\u4eec\u9996\u5148\u8bb0\u51e0\u4e2a\u4e1c\u897f\uff1a\n\n$Free:$\u8868\u793a\u5f53\u524d\u7a7a\u7740\u7684\u957f\u5ea6\u548c\n\n$single[x]:$\u8868\u793a\u53ea\u6709$x$\u8986\u76d6\u7684\u957f\u5ea6\n\n$opt[x]:$\u9009\u51fa\u7684\u4e24\u6735\u4e91\u4e2d\u5fc5\u5b9a\u5305\u542b$x$\u7684\u6700\u5927\u957f\u5ea6\n\n$Top:$$opt$\u7684\u6700\u5927\u503c\n\n$cross[x][y]:$\u8868\u793a\u53ea\u6709$x,y$\u8986\u76d6\u7684\u957f\u5ea6\n\n\u7136\u540e\u7528\u4e00\u4e2a$set$\u7ef4\u62a4\u5f53\u524d\u8fd8\u672a\u6d88\u5931\u7684\u4e91\n\n\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b$set$\u4e2d\u4e91\u7684\u4e2a\u6570\uff1a\n\n1\u3001\u5f53$set$\u4e2d\u6ca1\u6709\u4e91\u65f6\uff0c\u76f4\u63a5\u8ba9$Free$\u52a0\u4e0a\u8d21\u732e\u5373\u53ef\n\n2\u3001\u5f53$set$\u4e2d\u53ea\u6709\u4e00\u6735\u4e91\uff0c\u66f4\u65b0$single$\u4ee5\u53ca$opt$\n\n3\u3001\u5f53$set$\u4e2d\u6709\u4e24\u6735\u4e91\uff0c\u66f4\u65b0$cross$\u3001$opt$\n\n4\u3001\u5f53$set$\u4e2d\u4e91\u6735\u6570\u5927\u4e8e\u4e8c\uff0c\u4e0d\u7528\u7ba1\uff0c\u56e0\u4e3a\u6b64\u65f6\u4e00\u5b9a\u4e0d\u4f1a\u6bd4\u4e91\u6735\u6570\u5c0f\u4e8e\u7b49\u4e8e\u4e8c\u7684\u65f6\u5019\u7b54\u6848\u66f4\u4f18\n\n\u81f3\u4e8e\u66f4\u65b0\u7684\u65b9\u6cd5\uff0c\u770b\u4ee3\u7801\u5e94\u8be5\u80fd\u770b\u61c2\n\n```cpp\n#include <iostream> \n#include <cstdio> \n#include <cstdlib> \n#include <cstring> \n#include <cmath> \n#include <algorithm>\n#include <set>\n#include <map> \nusing namespace std; \ninline int gi() { \n    register int data = 0, w = 1; \n    register char ch = 0; \n    while (!isdigit(ch) && ch != '-') ch = getchar(); \n    if (ch == '-') w = -1, ch = getchar(); \n    while (isdigit(ch)) data = 10 * data + ch - '0', ch = getchar(); \n    return w * data; \n}\nvoid chkmax(int &x, int y) { if (x < y) x = y; } \nconst int MAX_N = 3e5 + 5;\nstruct Cloud { int l, r, c; } cld[MAX_N];\nbool operator < (const Cloud &l, const Cloud &r) { return l.c < r.c; }\nstruct Query { int id, t; } q[MAX_N];\nbool operator < (const Query &l, const Query &r) { return l.t < r.t; }\nstruct Node { int t, op, id; } a[MAX_N << 1]; int tot = 0; \nbool operator < (const Node &l, const Node &r) { return l.t < r.t; } \nint N, M, C, single[MAX_N], opt[MAX_N], ans[MAX_N];\nmap<int, int> cross[MAX_N];\nset<int> s;\nset<int>::iterator ite;\nint Free, Top; \n#define lson (o << 1)\n#define rson (o << 1 | 1)\nint mx[MAX_N << 2];\nvoid modify(int o, int l, int r, int pos, int v) {\n\tif (l == r) return (void)(mx[o] = v);\n\tint mid = (l + r) >> 1;\n    if (pos <= mid) modify(lson, l, mid, pos, v);\n\telse modify(rson, mid + 1, r, pos, v);\n\tmx[o] = max(mx[lson], mx[rson]); \n}\nint find(int o, int l, int r) {\n\tif (l == r) return l; \n\tint mid = (l + r) >> 1;\n\tif (mx[lson] > mx[rson]) return find(lson, l, mid);\n\telse return find(rson, mid + 1, r); \n}\nint query(int o, int l, int r, int ql, int qr) {\n\tif (ql <= l && r <= qr) return find(o, l, r); \n\tint mid = (l + r) >> 1, res = 0; \n\tif (ql <= mid) res = query(lson, l, mid, ql, qr); \n\tif (qr > mid) {\n\t\tint tmp = query(rson, mid + 1, r, ql, qr); \n\t\tif (single[tmp] > single[res]) res = tmp; \n\t}\n\treturn res; \n}\nint sum(int x, int y) {\n\tif (x > y) swap(x, y); \n\treturn single[x] + single[y] + cross[x][y]; \n} \nvoid solve() {\n\tint now = 0, pos = 1; \n\tfor (int i = 1; i <= tot; i++) {\n\t\tint dlt = a[i].t - now; now = a[i].t;\n\t\tif (!s.size()) Free += dlt; \n\t\telse if (s.size() == 1) {\n\t\t    ite = s.upper_bound(0); int x = *ite;\n\t\t\tsingle[x] += dlt; modify(1, 1, N, x, single[x]);\n\t\t\topt[x] += dlt; \n\t\t\tint rem = C - cld[x].c; \n\t\t\tif (rem >= 0) {\n\t\t\t\tint val = single[x]; \n\t\t\t\tif (rem >= cld[1].c) {\n\t\t\t\t\tint l = 1, r = N, res = 1; \n\t\t\t\t\twhile (l <= r) {\n\t\t\t\t\t\tint mid = (l + r) >> 1; \n\t\t\t\t\t\tif (cld[mid].c <= rem) res = mid, l = mid + 1; \n\t\t\t\t\t\telse r = mid - 1; \n\t\t\t\t\t}\n\t\t\t\t\tint ql = 1, qr = res; \n\t\t\t\t\tif (x == qr) --qr;\n\t\t\t\t\tif (x < qr) { ql = x + 1; if (ql <= qr) chkmax(val, sum(x, query(1, 1, N, ql, qr))); ql = 1, qr = x - 1; }\n\t\t\t\t\tif (ql <= qr) chkmax(val, sum(x, query(1, 1, N, ql, qr))); \n\t\t\t\t}\n\t\t\t\tchkmax(opt[x], val);\n\t\t\t\tchkmax(Top, opt[x]); \n\t\t\t} \n\t\t} else if (s.size() == 2) {\n\t\t\tite = s.upper_bound(0); int x = *ite;\n\t\t\t++ite; int y = *ite;\n\t\t\tif (cross[x].count(y) > 0) cross[x][y] += dlt;\n\t\t\telse cross[x][y] = dlt; \n\t\t\tif (cld[x].c + cld[y].c <= C) { \n\t\t\t\tchkmax(opt[x], sum(x, y)); chkmax(opt[y], sum(x, y));\n\t\t\t\tchkmax(Top, opt[x]); \n\t\t\t} \n\t\t}\n\t\twhile (pos <= M && Top + Free >= q[pos].t) ans[q[pos].id] = now - (Top + Free - q[pos].t), ++pos;\n\t\tif (pos > M) break;\n\t\tif (a[i].op == 1) s.insert(a[i].id);\n\t\telse s.erase(a[i].id); \n\t} \n} \nint main () {\n\tN = gi(), C = gi(); \n\tfor (int i = 1; i <= N; i++) cld[i].l = gi(), cld[i].r = gi(), cld[i].c = gi(); \n\tsort(&cld[1], &cld[N + 1]);\n\tfor (int i = 1; i <= N; i++) {\n\t\ta[++tot] = (Node){cld[i].l, 1, i};\n\t\ta[++tot] = (Node){cld[i].r, -1, i}; \n\t}\n\tsort(&a[1], &a[tot + 1]);\n\ta[++tot] = (Node){(int)(2e9 + 7), 1, N + 1}; \n\tM = gi(); \n\tfor (int i = 1; i <= M; i++) q[i].id = i, q[i].t = gi();\n\tsort(&q[1], &q[M + 1]);\n\tsolve(); \n\tfor (int i = 1; i <= M; i++) printf(\"%d\\n\", ans[i]); \n\treturn 0;  \n} \n\n```",
        "postTime": 1546413981,
        "uid": 42506,
        "name": "\u4f55\u4fde\u5747",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF833E \u3010Caramel Clouds\u3011"
    }
]