[
    {
        "content": "\u8fd9\u9898\u53ef\u4ee5\u505a\u5230\u4e00\u4e2a $\\log$\u3002\n\n\u9996\u5148\u628a\u533a\u95f4\u6700\u503c\u8fd9\u4e2a\u4e1c\u897f\u753b\u6210\u4e00\u5f20\u8868\u7684\u8bdd\uff0c\u5373 $a_{l,r}= \\min_{l\\le i \\le r} h_i$\uff0c\u8fd9\u662f\u4e00\u5f20\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u8868\u683c\uff0c\u5b83\u7684\u53d6\u503c\u5176\u5b9e\u662f\u6bd4\u8f83\u6e05\u695a\u7684\uff0c\u7531\u7b1b\u5361\u5c14\u6811\u8f83\u597d\u523b\u753b\uff0c\u5047\u8bbe\u8fd9\u4e2a\u5e8f\u5217\u7684\u6700\u5927\u503c\u5728 $u$ \u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5bf9\u4e8e $(l, r) \\in (1, u) \\times (u, n)$ \u7684\u533a\u57df\u53d6\u503c\u90fd\u4e3a $h_u$\uff0c\u5269\u4f59\u7684\u4e24\u4e2a\u5b50\u4e09\u89d2\u5f62\u662f\u7b1b\u5361\u5c14\u6811\u5de6\u53f3\u5b50\u7ba1\u8f96\u7684\uff0c\u4e00\u76f4\u4e0b\u53bb\u3002\u90a3\u4e48\u5c31\u662f\u8bf4\u8fd9\u4e2a\u4e09\u89d2\u5f62\u6bcf\u4e2a\u4f4d\u7f6e\u6070\u597d\u88ab\u4e00\u4e2a\u77e9\u5f62\u8986\u76d6\uff0c\u800c\u6211\u4eec\u8981\u67e5\u8be2\u7684\u662f\u6ee1\u8db3 $r - l = k - 1$ \u7684\u8fd9\u6837\u4e00\u6761\u659c\u7ebf\u4e0a\u7684\u683c\u5b50\u4e2d\u4e00\u6bb5\u7684\u503c\u7684 $\\max$\u3002\n\n\u63a5\u4e0b\u6765\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u628a\u8fd9\u4e2a\u5750\u6807\u7cfb\u65cb\u8f6c\u4e00\u4e0b\uff0c\u5982\u679c\u67e5\u8be2\u80fd\u591f\u662f\u4e00\u4e2a\u6a2a\u7740\u7684\u7ebf\u6bb5\u90a3\u4f1a\u5904\u7406\u8d77\u6765\u5bb9\u6613\u4e00\u4e9b\u3002\u6211\u4eec\u628a\u5750\u6807\u7cfb\u53d8\u6362\u4e3a $(l, k)$ \u8868\u793a\u5de6\u7aef\u70b9\u4ee5\u53ca\u957f\u5ea6\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u662f\u5728 $([l, r-k+1], k)$ \u8fd9\u6761\u7ebf\u4e0a\u67e5\u8be2\u6700\u503c\u3002\u8003\u8651\u539f\u6765\u7684\u77e9\u5f62\u73b0\u5728\u53d8\u6210\u4e86\u4ec0\u4e48\uff1a\u73b0\u5728\u662f\u4e00\u4e2a\u5e73\u884c\u56db\u8fb9\u5f62\uff0c\u4e00\u5bf9\u8fb9\u662f\u7ad6\u76f4\u5411\u4e0b\u7684\uff0c\u53e6\u4e00\u5bf9\u662f\u5411\u4e1c\u5357 $45^\\circ$ \u7684\u3002\u90a3\u4e48\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u5c06\u5176\u6a2a\u7740\u5207 2 \u5200\uff0c\u5c31\u4f1a\u5206\u6210\u4e0a\u4e0b\u4e24\u4e2a\u76f4\u89d2\u4e09\u89d2\u5f62\uff08\u76f4\u89d2\u8fb9\u548c\u5750\u6807\u8f74\u5782\u76f4\uff09\u548c\u4e2d\u95f4\u7684\u5e73\u884c\u56db\u8fb9\u5f62\uff0c\u5982\u679c\u8fd9\u4e2a\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u4e24\u4e2a\u9510\u89d2\u7aef\u70b9\u7684 $2\\Delta x \\le \\Delta y$ \u90a3\u4e48\u8bf4\u660e\u6bd4\u8f83\u957f\uff0c\u4e2d\u95f4\u662f\u4e00\u4e2a\u548c\u5750\u6807\u8f74\u65b9\u5411\u8d34\u7740\u7684\u77e9\u5f62\uff0c\u5426\u5219\u662f\u4e00\u4e2a\u6a2a\u7740\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u3002\u5bf9\u4e8e\u524d\u4e09\u79cd\u56fe\u5f62\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u5176\u4e2d\u7684\u503c\u6807\u8bb0\u5728\u5176\u4e2d\u4e00\u6761\u7ad6\u76f4\u8fb9\u5bf9\u5e94\u7684\u5750\u6807\u4e0a\uff0c\u90a3\u4e48\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u67e5\u8be2\u5bf9\u5e94\u7684\u533a\u95f4\uff0c\u9876\u591a\u518d\u7b97\u4e0a\u6709\u4e00\u4e2a\u548c\u6211\u4eec\u533a\u95f4\u4e00\u8fb9\u6709\u91cd\u5408\u7684\uff0c\u7528\u5e73\u8861\u6811\u53ef\u4ee5\u627e\u5230\u3002\u5bf9\u4e8e\u6700\u540e\u90a3\u79cd\u5e73\u884c\u56db\u8fb9\u5f62\uff0c\u53ef\u4ee5\u518d\u659c\u5207\u4e00\u4e0b\u5750\u6807\u7cfb\uff0c\u8fd9\u6837\u5c31\u8f6c\u6362\u4e3a\u4e86\u77e9\u5f62\u3002\n\n\u7efc\u4e0a\uff0c\u901a\u8fc7\u7ef4\u62a4\u51e0\u79cd\u6bd4\u8f83\u7b80\u5355\u7ed3\u6784\u7684\u56fe\u5f62\u7684\u626b\u63cf\u7ebf\uff0c\u53ef\u4ee5\u5728 $\\Theta((n+m)\\log n)$ \u7684\u65f6\u95f4\u5185\u5904\u7406\u6240\u6709\u8be2\u95ee\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <cctype>\n\n#include <algorithm>\n#include <random>\n#include <bitset>\n#include <queue>\n#include <functional>\n#include <set>\n#include <map>\n#include <vector>\n#include <iostream>\n#include <limits>\n#include <numeric>\n\n#define MP make_pair\n\nusing namespace std;\n\ntypedef priority_queue<int> PQ;\n\n#ifdef LBT\n\nconst int N = 100;\n\n#else\n\nconst int N = 100010;\n\n#endif\n\nstruct Node {\n  int l, r, v;\n  Node *ls, *rs;\n\n  void*operator new(size_t) {\n    static Node pool[N * 4];\n    static Node* ptop = pool;\n    return ptop++;\n  }\n\n  void upd() {\n    v = max(ls->v, rs->v);\n  }\n\n  void ch(int k, int x) {\n    if (l == r) {\n      v = x;\n      return;\n    }\n    (k <= ls->r ? ls : rs)->ch(k, x);\n    upd();\n  }\n\n  int qry(int l, int r) const {\n    if (this->l == l && this->r == r)\n      return v;\n    if (r <= ls->r)\n      return ls->qry(l, r);\n    if (l >= rs->l)\n      return rs->qry(l, r);\n    return max(ls->qry(l, ls->r), rs->qry(rs->l, r));\n  }\n};\n\nNode* build(int l, int r) {\n  Node* p = new Node;\n  p->l = l;\n  p->r = r;\n  if (l == r)\n    return p;\n  int mid = (l + r) >> 1;\n  p->ls = build(l, mid);\n  p->rs = build(mid + 1, r);\n  return p;\n}\n\nint n, m, cnt;\nint a[N], ans[N], stk[N], cl[N], cr[N], cc[N];\nvector<pair<int, pair<int, int>> > qry[N], sch1[N], sch2[N], sch3[N], sch4[N];\nmap<int, pair<int, int> > seg1, seg2, seg3, seg4; // ^ - \\ V\npriority_queue<int> q1[N], q2[N], dq1[N], dq2[N];\nNode *sgt1, *sgt2;\n\nint qtop(const PQ& pq) {\n  return pq.empty() ? 0 : pq.top();\n}\n\nvoid ins(PQ* q, PQ* dq, Node* sgt, int k, int x) {\n  if (x > qtop(q[k])) {\n    sgt->ch(k, x);\n  }\n  q[k].push(x);\n}\n\nvoid ers(PQ* q, PQ* dq, Node* sgt, int k, int x) {\n  dq[k].push(x);\n  bool f = false;\n  while (!dq[k].empty() && q[k].top() == dq[k].top()) {\n    q[k].pop();\n    dq[k].pop();\n    f = true;\n  }\n  if (f)\n    sgt->ch(k, qtop(q[k]));\n}\n\nvoid dis(PQ* q, PQ* dq, Node* sgt, int k, int x) {\n  if (x < 0)\n    ers(q, dq, sgt, k, -x);\n  else\n    ins(q, dq, sgt, k, x);\n}\n\nint main() {\n\n  scanf(\"%d\", &n);\n  for (int i = 1; i <= n; ++i)\n    scanf(\"%d\", &a[i]);\n  scanf(\"%d\", &m);\n  for (int i = 1; i <= m; ++i) {\n    int l, r, k;\n    scanf(\"%d%d%d\", &l, &r, &k);\n    qry[k].push_back(MP(i, MP(l, r - k + 1)));\n  }\n  for (int i = 1; i <= n; ++i) {\n    int cur = 1;\n    cl[i] = i;\n    while (cnt && a[stk[cnt - 1]] >= a[i]) {\n      --cnt;\n      cl[i] -= cc[cnt];\n      cur += cc[cnt];\n      cr[stk[cnt]] = i - 1;\n    }\n    cc[cnt] = cur;\n    stk[cnt++] = i;\n  }\n  while (cnt)\n    cr[stk[--cnt]] = n;\n  for (int i = 1; i <= n; ++i) {\n    int x1 = i, y1 = 1, x2 = cl[i], y2 = cr[i] - cl[i] + 1;\n    sch1[y2 + 1].push_back(MP(-a[i], MP(x2, y2)));\n    sch4[y1].push_back(MP(a[i], MP(x1, y1)));\n    int d;\n    if ((x1 - x2) * 2 <= (y2 - y1)) {\n      d = x1 - x2;\n      if (y1 + d + 1 < y2 - d) {\n        sch2[y1 + d + 1].push_back(MP(a[i], MP(x2, x1)));\n        sch2[y2 - d].push_back(MP(-a[i], MP(x2, x1)));\n        //if (i == 3)\n        //  LOG(\"[%d %d] * [%d %d]\\n\", x2, x1, y1 + d + 1, y2 - d - 1);\n      }\n    } else {\n      //LOG(\"HELLO %d\\n\", a[i]);\n      d = y2 - y1 - (x1 - x2);\n      //LOG(\"%d %d %d %d => %d\\n\", x1, y1, x2, y2, d);\n      if (y1 + d + 1 < y2 - d) {\n        sch3[y1 + d + 1].push_back(MP(a[i], MP(x1, x1 + d)));\n        sch3[y2 - d].push_back(MP(-a[i], MP(x1, x1 + d)));\n      }\n    }\n    sch1[y2 - d].push_back(MP(a[i], MP(x2, y2)));\n    sch4[y1 + d + 1].push_back(MP(-a[i], MP(x1, y1)));\n  }\n  sgt1 = build(1, n);\n  sgt2 = build(1, n);\n  for (int k = 1; k <= n; ++k) {\n/*#define SRT(X) sort(sch##X[k].begin(), sch##X[k].end(), greater<pair<int, pair<int, int> > >())\n    SRT(1);\n    SRT(2);\n    SRT(3);\n    SRT(4);*/\n    for (const auto& pr : sch1[k]) {\n      dis(q1, dq1, sgt1, pr.second.first, pr.first);\n      if (pr.first < 0)\n        seg1.erase(pr.second.first);\n      else\n        seg1.insert(MP(pr.second.first, MP(pr.second.second, pr.first)));\n    }\n    for (const auto& pr : sch2[k]) {\n      dis(q1, dq1, sgt1, pr.second.first, pr.first);\n      if (pr.first < 0) {\n        seg2.erase(pr.second.first);\n      } else {\n        seg2.insert(MP(pr.second.first, MP(pr.second.second, pr.first)));\n        //LOG(\"INS %d %d %d\\n\", pr.second.first, pr.second.second, pr.first);\n      }\n    }\n    for (const auto& pr : sch3[k]) {\n      dis(q2, dq2, sgt2, pr.second.second, pr.first);\n      if (pr.first < 0)\n        seg3.erase(pr.second.second);\n      else\n        seg3.insert(MP(pr.second.second, MP(pr.second.first, pr.first)));\n    }\n    for (const auto& pr : sch4[k]) {\n      dis(q1, dq1, sgt1, pr.second.first, pr.first);\n      if (pr.first < 0)\n        seg4.erase(pr.second.first);\n      else {\n        seg4.insert(MP(pr.second.first, MP(1, pr.first)));\n      }\n    }\n\n    for (const auto& pr : qry[k]) {\n      int l = pr.second.first, r = pr.second.second;\n      int id = pr.first;\n      ans[id] = max(sgt1->qry(l, r), sgt2->qry(l + k - 1, r + k - 1));\n      map<int, pair<int, int> >::iterator it;\n      it = seg1.lower_bound(l);\n      if (it != seg1.begin()) {\n        int ll = (--it)->first;\n        int rr = ll + (it->second.first - k);\n        //LOG(\"%d FND %d %d\\n\", id, ll, rr);\n        if (rr >= l)\n          ans[id] = max(ans[id], it->second.second);\n      }\n      it = seg2.lower_bound(l);\n      if (it != seg2.begin()) {\n        int rr = (--it)->second.first;\n        if (rr >= l)\n          ans[id] = max(ans[id], it->second.second);\n      }\n      it = seg3.upper_bound(r + k - 1);\n      if (it != seg3.end()) {\n        int ll = it->second.first;\n        if (ll <= r + k - 1)\n          ans[id] = max(ans[id], it->second.second);\n      }\n      it = seg4.upper_bound(r);\n      if (it != seg4.end()) {\n        int rr = it->first;\n        int ll = rr - (k - 1);\n        //LOG(\"%d FND %d %d\\n\", id, ll, rr);\n        if (ll <= r)\n          ans[id] = max(ans[id], it->second.second);\n      }\n    }\n  }\n\n  for (int i = 1; i <= m; ++i)\n    printf(\"%d\\n\", ans[i]);\n\n  return 0;\n}\n```",
        "postTime": 1550308800,
        "uid": 21423,
        "name": "Elegia",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF484E \u3010Sign on Fence\u3011"
    },
    {
        "content": "\u9898\u89e3\uff1a\n\n\u8fd9\u9898\u548c[\u56fd\u5bb6\u96c6\u8bad\u961f]middle\u5f88\u50cf\n\n\u8003\u8651\u4e8c\u5206\u7b54\u6848\n\n\u95ee\u9898\u53d8\u6210\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u6bb5\u5927\u4e8e\u7b49\u4e8emid\u4e14\u957f\u5ea6\u4e0d\u5c11\u4e8ek\u7684\u5b50\u533a\u95f4\n\n\u5c06\u5927\u4e8e\u7b49\u4e8emid\u8bbe\u4e3a1,\u5c0f\u4e8emid\u8bbe\u4e3a0,\u5c31\u662f\u67e5\u8be2\u533a\u95f4\u6700\u957f\u51681\u533a\u95f4\u662f\u5426\u8d85\u8fc7k\n\n\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u524d\u540e\u7f00\u6700\u957f\u51681\u533a\u95f4\uff0c\u5c31\u652f\u6301\u533a\u95f4\u52a0\u6cd5\u4e86\n\n\u7531\u4e8e\u6bcf\u6b21\u4e8c\u5206\u7684mid\u90fd\u4e0d\u540c\uff0c\u4e8e\u662f\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u6bcf\u4e2amid\u65f6\u7684\u7ebf\u6bb5\u6811\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define N 100005 \nint root[N], rk[N], a[N], v[N];\nstruct data {\n    int len, lx, rx, max;\n    data() { len = lx = rx = max = 0; }\n    data(int x) { len = 1, lx = rx = max = x; }\n    data(int x, int y, int z, int w) { len = x, lx = y, rx = z, max = w; }\n    data operator + (data rhs) const {\n        return (data) {\n            len + rhs.len,\n            lx == len ? lx + rhs.lx : lx,\n            rhs.rx == rhs.len ? rhs.rx + rx : rhs.rx,\n            std::max(std::max(max, rhs.max), rx + rhs.lx)\n        };\n    }\n} M[N * 20];\nint lc[N * 20], rc[N * 20], idx, n, m;\nint build(int l, int r) {\n    int now = ++idx;\n    if (l == r) { M[now] = data(0); return now; }\n    int mid = l + r >> 1;\n    lc[now] = build(l, mid), rc[now] = build(mid + 1, r);\n    M[now] = M[lc[now]] + M[rc[now]];\n    return now;\n}\nint insert(int cur, int l, int r, int pos) {\n    int now = ++idx; lc[now] = lc[cur], rc[now] = rc[cur];\n    if (l == r) { M[now] = data(1); return now; }\n    int mid = l + r >> 1;\n    if (pos <= mid) lc[now] = insert(lc[cur], l, mid, pos);\n    else rc[now] = insert(rc[cur], mid + 1, r, pos);\n    M[now] = M[lc[now]] + M[rc[now]];\n    return now;\n}\ndata query(int cur, int l, int r, int L, int R) {\n    if (L <= l && R >= r) return M[cur];\n    int mid = l + r >> 1; data res;\n    if (L <= mid) res = res + query(lc[cur], l, mid, L, R);\n    if (R > mid) res = res + query(rc[cur], mid + 1, r, L, R);\n    return res;\n}\nint query(int L, int R, int k) {\n    int l = 1, r = n, ans = 0;\n    while (l <= r) {\n        int mid = l + r >> 1;\n        if (query(root[mid], 1, n, L, R).max >= k) ans = mid, r = mid - 1;\n        else l = mid + 1;\n    }\n    return ans;\n}\nint main() {\n    std::scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) std::scanf(\"%d\", &a[i]), v[i] = a[i], rk[i] = i;\n    std::sort(v + 1, v + n + 1, [] (int i, int j) { return i > j; });\n    std::sort(rk + 1, rk + n + 1, [] (int i, int j) { return a[i] > a[j]; });\n    root[0] = build(1, n);\n    for (int i = 1; i <= n; i++) root[i] = insert(root[i - 1], 1, n, rk[i]);\n    std::scanf(\"%d\", &m);\n    for (int i = 1; i <= m; i++) {\n        int l, r, k;\n        std::scanf(\"%d%d%d\", &l, &r, &k);\n        std::printf(\"%d\\n\", v[query(l, r, k)]);\n    }\n    return 0;\n}\n```",
        "postTime": 1538543480,
        "uid": 26127,
        "name": "Weng_Weijie",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF484E \u3010Sign on Fence\u3011"
    },
    {
        "content": "[**\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c**](https://www.cnblogs.com/MnZnOIerLzy/articles/17135246.html)\n\n# $\\texttt{Description}$\n\n[**CodeForces \u9898\u76ee\u94fe\u63a5**](https://codeforces.com/problemset/problem/484/E \"**CodeForces \u94fe\u63a5**\")\n\n[**\u6d1b\u8c37\u9898\u76ee\u94fe\u63a5**](https://www.luogu.com.cn/problem/CF484E \"**\u6d1b\u8c37\u94fe\u63a5**\")\n\n> - \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u5217 $A$\uff0c\u6709 $m$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u5728\u7ed9\u51fa $A_l\\sim A_r$ \u4e2d\u9009\u4e00\u4e2a\u957f\u5ea6\u4e3a $k$ \u7684\u5b50\u533a\u95f4\uff0c\u4f7f\u5f97\u9009\u51fa\u533a\u95f4\u7684\u6700\u5c0f\u503c\u6700\u5927\u3002\n>\n> - $1\\le n,m\\le 10^5$\uff0c$1\\le A_i\\le 10^9$\u3002\n\n# $\\texttt{Solution}$\n\n\u9996\u5148\u770b\u5230\u6700\u5c0f\u503c\u6700\u5927\uff0c\u4e0d\u96be\u60f3\u5230\u4e8c\u5206\u3002\u7531\u4e8e\u662f\u591a\u7ec4\u8be2\u95ee\uff0c\u6240\u4ee5\u8003\u8651[**\u6574\u4f53\u4e8c\u5206**](https://www.cnblogs.com/MnZnOIerLzy/articles/17038232.html \"**\u6574\u4f53\u4e8c\u5206**\")\u3002\n\n\u5728\u6574\u4f53\u4e8c\u5206\u4e2d\uff0c\u6211\u4eec\u5957\u8def\u5730\u5c06\u6240\u6709\u8be2\u95ee\u5f53\u524d\u7b54\u6848\u7684\u503c\u57df $[L,R]$ \u5206\u6210 $[L,\\text{mid}]$ \u548c $(\\text{mid},R]$ \u4e24\u90e8\u5206\u3002 \u5148\u4e8c\u5206\u4e00\u4e2a $\\text{mid}$\uff0c\u7136\u540e\u7ef4\u62a4\u6240\u6709 $> \\text{mid}$ \u7684\u6570\u7684**\u6700\u957f\u8fde\u7eed\u5b50\u533a\u95f4\u957f\u5ea6**\u3002\u6bcf\u6b21\u8be2\u95ee\u67e5\u8be2 $[l,r]$ \u8fd9\u4e00\u533a\u95f4\u7684\u7b54\u6848\u3002\u82e5\u7ed3\u679c $\\ge k$\uff0c\u8bf4\u660e\u7b54\u6848\u5728 $(\\text{mid},R]$ \u4e2d\uff0c\u5426\u5219\u5728 $[L,\\text{mid}]$ \u4e2d\u3002\u7136\u540e\u7ee7\u7eed\u5bf9\u8fd9\u4e24\u90e8\u5206\u9012\u5f52\u6c42\u89e3\u5373\u53ef\u3002\u82e5 $L=R$\uff0c\u5219\u66f4\u65b0\u5f53\u524d\u9012\u5f52\u5185\u7684\u6240\u6709\u8be2\u95ee\u7684\u7b54\u6848\u3002\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u53ef\u4ee5\u53c2\u7167[**\u6d1b\u8c37 P4513**](https://www.luogu.com.cn/problem/P4513 \"**\u6d1b\u8c37 P4513**\") \u7684\u601d\u8def\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6240\u6709 $> \\text{mid}$ \u7684\u6570\u7684**\u6700\u957f\u8fde\u7eed\u5b50\u533a\u95f4\u957f\u5ea6**\uff0c\u5373\u628a\u6240\u6709 $>\\text{mid}$ \u7684\u6570\u7684\u8d21\u732e\u7edf\u8ba1\u5230\u7ebf\u6bb5\u6811\u4e0a\u3002\u8003\u8651\u5728\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u4e2d\u7ef4\u62a4 $\\text{len},\\text{llen},\\text{rlen},\\text{sz}$ \u56db\u4e2a\u503c\uff0c\u8868\u793a\u8be5\u8282\u70b9\u7684\u7b54\u6848\u3001\u5de6\u8d77\u6700\u957f\u8fde\u7eed\u6bb5\u957f\u5ea6\u3001\u53f3\u8d77\u6700\u957f\u8fde\u7eed\u6bb5\u957f\u5ea6\u548c\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u957f\u5ea6\u3002\n\n\u4ee4 $x$ \u4e3a\u5f53\u524d\u8282\u70b9\uff0c$\\text{ls}$ \u4e3a\u5de6\u513f\u5b50\uff0c$\\text{rs}$ \u4e3a\u53f3\u513f\u5b50\u3002\u5219\u6709\uff1a\n\n- \u82e5 $\\text{llen}_{\\text{ls}}\\ne \\text{sz}_\\text{ls}$\uff0c\u8bf4\u660e\u5de6\u8d77\u6700\u957f\u8fde\u7eed\u6bb5**\u4e0d\u6a2a\u8de8\u5de6\u53f3\u513f\u5b50\u7684\u533a\u95f4**\uff0c$\\text{llen}_x=\\text{llen}_{\\text{ls}}$\uff1b\u5426\u5219\u8bf4\u660e**\u6a2a\u8de8\u5de6\u53f3\u513f\u5b50**\u7684\u533a\u95f4\uff0c$\\text{llen}_x=\\text{sz}_\\text{ls}+\\text{llen}_\\text{rs}$\u3002$\\text{rlen}_x$ \u7c7b\u4f3c\u7ef4\u62a4\u5373\u53ef\u3002\n\n- $\\text{sz}_x=\\text{sz}_\\text{ls}+\\text{sz}_\\text{rs}$\u3002\u663e\u800c\u6613\u89c1\u3002\n\n- $\\text{len}_x=\\max\\{\\text{len}_\\text{ls},\\text{len}_\\text{rs},\\text{rlen}_\\text{ls}+\\text{llen}_\\text{rs}\\}$\u3002\u8868\u793a\u5206\u522b\u8003\u8651\u7b54\u6848**\u5b8c\u5168\u5728\u5de6\u513f\u5b50\u533a\u95f4\u5185**\u3001**\u5b8c\u5168\u5728\u53f3\u513f\u5b50\u533a\u95f4\u5185**\u548c**\u6a2a\u8de8\u5de6\u53f3\u513f\u5b50\u7684\u533a\u95f4**\u3002\n\n\u6b64\u5916\uff0c\u8fd9\u9898\u5e76\u4e0d\u50cf[**\u6a21\u677f\u9898**](https://www.luogu.com.cn/problem/P3834 \"**\u6d1b\u8c37 P4513**\")\u4e00\u6837**\u7b54\u6848\u7b26\u5408\u53ef\u52a0\u6027**\uff0c\u56e0\u4e3a\u6a21\u677f\u9898\u53ea\u6709\u6570\u91cf\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u52a0\u52a0\u51cf\u51cf\u3002\u4f46\u662f\u8fd9\u9898\u8fd8\u6709\u8fde\u7eed\u7684\u9650\u5236\uff0c\u5c31\u4e0d\u80fd\u50cf\u6a21\u677f\u9898\u90a3\u6837\uff0c\u82e5\u67e5\u8be2\u7ed3\u679c\u4e3a $p$ \u4e14 $p<k$\uff0c\u5219\u5728 $[L,\\text{mid}]$ \u5185\u67e5\u627e\u5269\u4e0b\u7684 $k-p$ \u4e2a\u6570\u3002\u4f46\u662f\u82e5\u66b4\u529b\u5f80\u4e24\u4e2a\u533a\u95f4\u5185\u63d2\u5165 $>\\text{mid}$ \u7684\u6570\uff0c\u80af\u5b9a\u4f1a `TLE`\u3002\u7531\u4e8e $>\\text{mid}$ \u7684\u6570\u5728 $[L,\\text{mid}]$ \u4ecd\u6709\u8d21\u732e\uff08\u7528\u5b83\u8fde\u63a5\u8d77\u4e24\u7aef\u7684\u8fde\u7eed\u6bb5\uff0c\u7b26\u5408\u8fde\u7eed\u7684\u9650\u5236\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651**\u5148\u9012\u5f52\u6c42\u89e3 $[L,\\text{mid}]$ \u7684\u7b54\u6848\uff0c\u518d\u6d88\u9664\u5f53\u524d\u9012\u5f52\u4e2d\u7684\u6570\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u8d21\u732e\uff0c\u518d\u9012\u5f52\u6c42\u89e3 $(\\text{mid},R]$**\u3002\u6ce8\u610f\uff0c\u5728\u9012\u5f52\u6c42\u89e3 $[L,\\text{mid}]$ \u7684\u7b54\u6848\u65f6\uff0c\u8be2\u95ee\u5185\u7684 $k$ \u503c**\u4e0d\u80fd\u6539\u6210 $k-p$**\uff0c\u56e0\u4e3a**\u90a3 $p$ \u4e2a\u503c\u4ecd\u7136\u5728\u7ebf\u6bb5\u6811\u4e0a\u6709\u8d21\u732e**\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u4fdd\u8bc1\u6548\u7387\u7684\u540c\u65f6\u5b9e\u73b0\u8fde\u7eed\u7684\u9650\u5236\u4e86\u3002\n\n\u4ee4 $V$ \u4e3a\u503c\u57df\uff08\u4e0a\u754c\u51cf\u4e0b\u754c\uff09\uff0c\u8fd9\u6837\u7684\u65b9\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4e3a $\\mathcal{O}((n+m)\\cdot \\log n\\cdot \\log V)$\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n# $\\texttt{Code}$\n\n\u5b9e\u73b0\u7ec6\u8282\uff1a\n\n- \u6211\u662f\u7528 `vector` \u50a8\u5b58\u6574\u4f53\u4e8c\u5206\u4e2d\u7684\u6570\u4e0e\u8be2\u95ee\u7684\u3002\n\n- \u4f7f\u7528\u6307\u4ee4\u96c6\u6216\u79bb\u6563\u5316\uff08\u5acc\u9ebb\u70e6\u6ca1\u5199 qwq\uff09\u53ef\u4ee5\u52a0\u5feb\u4ee3\u7801\u8fd0\u884c\u6548\u7387\u3002\n\n[**\u8bc4\u6d4b\u8bb0\u5f55**](https://codeforces.com/contest/484/submission/188200792 \"**\u6d4b\u8bc4\u94fe\u63a5**\")\n\n\n```cpp\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\n#define ls x*2\n#define rs x*2+1\nconst int N=100005;\nint n,m,ans[N];\nstruct queries{\n    int l,r,k,id;\n};\nvector<queries>Q;\nstruct num{\n    int x,p;\n};\nvector<num>A;\nstruct tree{\n    int len,llen,rlen,sz;\n}sg[N*4];\nvoid up(int x){\n    sg[x].sz=sg[ls].sz+sg[rs].sz;\n    sg[x].len=max({sg[ls].len,sg[rs].len,sg[ls].rlen+sg[rs].llen});\n    sg[x].llen=(sg[ls].len==sg[ls].sz?sg[ls].len+sg[rs].llen:sg[ls].llen);\n    sg[x].rlen=(sg[rs].len==sg[rs].sz?sg[rs].len+sg[ls].rlen:sg[rs].rlen);\n}\nvoid build(int x,int l,int r){\n    if(l==r){\n        sg[x]={0,0,0,1};\n        return;\n    }\n    int mid=l+r>>1;\n    build(ls,l,mid);\n    build(rs,mid+1,r);\n    up(x);\n}\nvoid change(int x,int l,int r,int k,int v){\n    if(l==r&&l==k){\n        sg[x]={v,v,v,1};\n        return;\n    }\n    int mid=l+r>>1;\n    if(k<=mid){\n        change(ls,l,mid,k,v);\n    }else{\n        change(rs,mid+1,r,k,v);\n    }\n    up(x);\n}\ntree query(int x,int l,int r,int ql,int qr){\n    if(ql<=l&&qr>=r){\n        return sg[x];\n    }\n    int mid=l+r>>1;\n    if(qr<=mid){\n        return query(ls,l,mid,ql,qr);\n    }else if(ql>mid){\n        return query(rs,mid+1,r,ql,qr);\n    }else{\n        tree t1=query(ls,l,mid,ql,qr),t2=query(rs,mid+1,r,ql,qr);\n        return {max({t1.len,t2.len,t1.rlen+t2.llen}),(t1.len==t1.sz?t1.len+t2.llen:t1.llen),(t2.len==t2.sz?t2.len+t1.rlen:t2.rlen),t1.sz+t2.sz};\n    }\n}\nvoid solve(vector<queries>q,vector<num>a,int l,int r){\n    if(!q.size()||!a.size()){\n        return;\n    }\n    if(l^r){\n        int mid=l+r>>1;\n        vector<queries>q1,q2;\n        vector<num>a1,a2;\n        for(auto i:a){\n            if(i.x>mid){\n                a1.push_back(i);\n                change(1,1,n,i.p,1);\n            }else{\n                a2.push_back(i);\n            }\n        }\n        for(auto i:q){\n            tree tmp=query(1,1,n,i.l,i.r);\n            if(tmp.len>=i.k){\n                q1.push_back(i);\n            }else{\n                q2.push_back(i);\n            }\n        }\n        solve(q2,a2,l,mid);\n        for(auto i:a){\n            if(i.x>mid){\n                change(1,1,n,i.p,0);\n            }\n        }\n        solve(q1,a1,mid+1,r);\n    }else{\n        for(auto i:q){\n            ans[i.id]=l;\n        }\n    }\n}\nsigned main(){\n    cin>>n;\n    for(int i=1,x;i<=n;++i){\n        cin>>x;\n        A.push_back({x,i});\n    }\n    cin>>m;\n    for(int i=1,l,r,k;i<=m;++i){\n        cin>>l>>r>>k;\n        Q.push_back({l,r,k,i});\n    }\n    build(1,1,n);\n    solve(Q,A,1,1e9);\n    for(int i=1;i<=m;++i){\n        cout<<ans[i]<<'\\n';\n    }\n}\n```",
        "postTime": 1676802867,
        "uid": 539211,
        "name": "\u849f\u84bb\u00b7\u5ed6\u5b50\u9633",
        "ccfLevel": 5,
        "title": "CF484E Sign on Fence"
    },
    {
        "content": "\u6574\u4f53\u4e8c\u5206\u7684\u4e3b\u6d41\u505a\u6cd5\u662f\u6c42\u6700\u957f\u7684\u8fde\u7eed\u7684 1 \u7684\u533a\u95f4\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6709\u53e6\u4e00\u4e2a\u9b3c\u755c\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\u8fd9\u9898\u7684\u9759\u6001\u7248\u672c\u6bd4\u8f83\u7ecf\u5178\u3002\u5355\u8c03\u6808\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u524d\u9a71\u540e\u7ee7 $l_i,r_i$\uff0c\u90a3\u4e48 \u8986\u76d6 $[l_i,r_i]$ \u7684\u6700\u5927\u9ad8\u5ea6\u5373\u662f\u8fd9\u4e2a\u70b9\u7684\u9ad8\u5ea6\u3002\n\n\u8fd9\u4e2a\u6574\u4f53\u4e8c\u5206\u5f88\u597d\u60f3\u5230\uff0c\u9996\u5148\u628a $a$ \u6309\u9ad8\u5ea6\u6392\u5e8f\uff0c\u6211\u4eec\u8003\u8651\u6574\u4f53\u4e8c\u5206\u5230\u8be2\u95ee $[ql,qr]$\uff0c\u7b54\u6848 \u5728 a \u6570\u7ec4\u4e0b\u6807 $[vl,vr]$ \u4e4b\u95f4\uff0c\u90a3\u4e48\u5c31\u662f\u8981\u770b $[mid+1,vr]$ \u8fd9\u4e9b\u5899\u7684\u8986\u76d6\u8303\u56f4\u662f\u5426\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u53ef\u4ee5\u628a\u6bcf\u4e2a $[l_i,r_i]$ \u8f6c\u5316\u4e3a\u4e00\u6761\u7ebf\u6bb5\uff0c\u539f\u95ee\u9898\u53d8\u4e3a\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u5feb\u901f\u67e5\u8be2\u662f\u5426\u6709\u4e00\u4e2a\u7ebf\u6bb5\u548c\u5b83\u7684\u4ea4\u5927\u4e8e $z$\u3002\u8fd9\u91cc\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n1\u00b0\u6709\u4e00\u4e2a\u7ebf\u6bb5\u5b8c\u5168\u5305\u542b\u5b83\n\n\u4e00\u5b9a\u5408\u6cd5\uff0c\u56e0\u4e3a $z<y-x+1$\u3002\n\n2\u00b0\u5b83\u5b8c\u5168\u5305\u542b\u4e00\u4e2a\u7ebf\u6bb5\n\n\u8003\u8651\u53cc\u6307\u9488\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u628a $[ql,qr]$ \u7684\u8be2\u95ee\u6309 $z$ \u964d\u5e8f\u6392\u5e8f\uff0c\u7ebf\u6bb5\u6309\u957f\u5ea6\u964d\u5e8f\u6392\u5e8f\u3002\u8fd9\u6837\u5f53\u6211\u4eec\u626b\u5230\u4e00\u4e2a\u8be2\u95ee\u7684\u65f6\u5019\u53ef\u4ee5\u4fdd\u8bc1\u4e4b\u524d\u7684\u7ebf\u6bb5\u957f\u5ea6\u4e00\u5b9a\u662f\u5927\u4e8e\u8981\u6c42\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u770b\u662f\u5426\u5b8c\u5168\u5305\u542b\u5373\u53ef\uff0c\u8003\u8651\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u70b9\u8868\u793a\u4ee5\u5b83\u4e3a\u5de6\u7aef\u70b9\u7684\u7ebf\u6bb5\u4e2d\uff0c\u53f3\u7aef\u70b9\u6700\u8fd1\u7684\u662f\u54ea\u4e2a\u3002\u6bcf\u6b21 $O(\\log)$ \u66f4\u65b0\uff0c\u8be2\u95ee\u5c31\u662f\u67e5\u8be2 $[x,y]$ \u6700\u5c0f\u503c\u662f\u5426\u5c0f\u4e8e $y$\u3002\n\n3\u00b0 \u4e00\u4e2a\u7ebf\u6bb5\u5728\u5b83\u5de6\u8fb9\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u770b\u6210\u628a\u7ebf\u6bb5\u5de6\u7aef\u70b9\u548c $x$ \u5f3a\u5236\u53d6 $\\max$\uff08\u6211\u4eec\u5e76\u4e0d\u7528\u8003\u8651\u53f3\u7aef\u70b9\u8d85\u8fc7 $y$ \uff0c\u56e0\u4e3a\u8fd9\u662f\u60c5\u51b5 1\uff09\uff0c\u8003\u8651\u628a\u7ebf\u6bb5\u6309 $l$ \u6392\u5e8f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u4e8c\u5206\u627e\u5230\u5c0f\u4e8e $x$ \u7684\u524d\u7f00\uff0c\u67e5\u8be2\u524d\u7f00 $r$ \u6700\u5927\u503c\u662f\u5426\u5927\u4e8e $x+z-1$\u3002\n\n4\u00b0 \u4e00\u4e2a\u7ebf\u6bb5\u5728\u5b83\u53f3\u8fb9\n\n\u7ef4\u62a4\u65b9\u5f0f\u548c\u60c5\u51b5 3 \u76f8\u540c\u3002\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5 $O(n \\log n^2)$ \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u9664\u4e86\u60c5\u51b5 2 \u90fd\u53ef\u4ee5\u505a\u5230\u5355 $\\log$\uff08\u53cc\u6307\u9488\uff09\uff0c\u4f46\u662f\u60c5\u51b5 2 \u5e76\u6ca1\u6709\u60f3\u5230\u4f18\u5316\u6210\u5355 $\\log$ \u7684\u65b9\u6cd5\u3002",
        "postTime": 1646477145,
        "uid": 282751,
        "name": "cryozwq",
        "ccfLevel": 7,
        "title": "\u4f60\u8bf4 CF484E \u6574\u4f53\u4e8c\u5206\u505a\u6cd5\u4e00\u4e2a\u4e00\u4e2a\u4e00\u4e2a\u6362\u4e86\u591a\u5c11\u4e2a\u4e86\uff1f\u6539\u8fc7\u4e0d\u4e86\uff1f\u6362\u6c64\u4e0d\u6362\u836f\u554a\uff01"
    },
    {
        "content": "\u4e00\u4e2a\u597d\u60f3\u597d\u5199\u597d\u8c03\u7684\u4e24\u4e2a $log$ \u7684\u505a\u6cd5\u3002\n\n\u6211\u4eec\u5982\u679c\u4e8c\u5206\u4e00\u4e0b\u7b54\u6848\u7684\u8bdd\uff0c\u5c31\u8f6c\u5316\u6210\u4e86\u80fd\u5426\u627e\u5230\u8fde\u7eed\u7684 $k$ \u4e2a\u5927\u4e8e\u7b49\u4e8e $mid$ \u7684\u503c\u5c31\u597d\u4e86\u3002\u6211\u4eec\u5bf9\u4e8e $mid$ \u503c\u90fd\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u5c31\u597d\u4e86\uff0c\u5e76\u5c06\u6b64\u65f6\u5927\u4e8e\u7b49\u4e8e $mid$ \u7684\u503c\u53d8\u6210 $1$\u3002\n\n\u4f46\u662f\u53d1\u73b0\u7a7a\u95f4\u7206\u70b8\uff0c\u7136\u540e\u53d1\u73b0\u6bcf\u6b21\u4f1a\u6709\u5f88\u591a\u91cd\u5408\u7684\u90e8\u5206\uff0c\u4e8e\u662f\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u4e3b\u5e2d\u6811\u6211\u4eec\u8981\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u8981\u7ef4\u62a4\u4e00\u4e0b\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u7684 $1$\uff0c\u8fd9\u4e2a\u5c31\u662f\u57fa\u7840\u7684\u7ebf\u6bb5\u6811\u64cd\u4f5c\u4e86\uff0c\u5982\u679c\u4e0d\u60f3\u52a8\u6001\u5f00\u70b9\u7684\u8bdd\u53ef\u4ee5\u79bb\u6563\u5316\u4e0b\u6765\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NR=1e5+10; \nvoid Min(int& x,int y){x=min(x,y);}\nvoid Max(int& x,int y){x=max(x,y);}\nint n,m;\nint all,tot;\nint a[NR],p[NR],q[NR];\nint num[NR];\nint getid(int x)\n{\n\tint l=1,r=all,ans=-1;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r>>1);\n\t\tif(num[mid]<=x)ans=mid,l=mid+1;\n\t\telse r=mid-1;\n\t}\n\treturn ans;\n}\nint to[NR],nxt[NR];\nint head[NR];\nint tt=1;\nvoid add(int x,int y)\n{\n\tto[tt]=y;\n\tnxt[tt]=head[x];\n\thead[x]=tt++;\n}\nint root[NR];\nstruct Nd{int l,r,le,ri,siz,sum;}tr[NR<<5];\nvoid update(int rt)\n{\n\ttr[rt].le=(tr[tr[rt].l].le==tr[tr[rt].l].siz)?tr[tr[rt].l].siz+tr[tr[rt].r].le:tr[tr[rt].l].le;\n\ttr[rt].ri=(tr[tr[rt].r].ri==tr[tr[rt].r].siz)?tr[tr[rt].r].siz+tr[tr[rt].l].ri:tr[tr[rt].r].ri;\n\ttr[rt].sum=max(tr[tr[rt].l].sum,max(tr[tr[rt].r].sum,tr[tr[rt].l].ri+tr[tr[rt].r].le));\n}\nvoid build(int &rt,int l,int r)\n{\n\trt=++tot;if(l==r){tr[rt].siz=1;return;}\n\tint mid=(l+r>>1);\n\tbuild(tr[rt].l,l,mid),build(tr[rt].r,mid+1,r);\n\ttr[rt].siz=tr[tr[rt].l].siz+tr[tr[rt].r].siz;\n}\nvoid change(int &rt,int l,int r,int x)\n{\n\tint la=rt;rt=++tot;tr[rt]=tr[la];\n\tif(l==r){tr[rt].le=tr[rt].ri=tr[rt].sum=1;return;}\n\tint mid=(l+r>>1);\n\tif(x<=mid)change(tr[rt].l,l,mid,x);\n\telse change(tr[rt].r,mid+1,r,x);\n\tupdate(rt);\n}\nNd getnum(Nd a,Nd b)\n{\n\tNd res;\n\tres.le=(a.le==a.siz)?a.siz+b.le:a.le;\n\tres.ri=(b.ri==b.siz)?b.siz+a.ri:b.ri;\n\tres.sum=max(a.sum,max(b.sum,a.ri+b.le));\n\treturn res;\n}\nNd query(int rt,int l,int r,int L,int R)\n{\n\tif(l==L&&r==R)return tr[rt];int mid=(l+r>>1);\n\tif(R<=mid)return query(tr[rt].l,l,mid,L,R);\n\telse if(L>mid)return query(tr[rt].r,mid+1,r,L,R);\n\telse return getnum(query(tr[rt].l,l,mid,L,mid),query(tr[rt].r,mid+1,r,mid+1,R));\n}\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint main()\n{\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"1.out\",\"w\",stdout);\n\tn=read();for(int i=1;i<=n;i++)a[i]=read(),p[i]=a[i];\n\tsort(p+1,p+n+1);for(int i=1;i<=n;i++)q[++all]=p[i];\n\tfor(int i=1;i<=all;i++)num[i]=q[i];build(root[all+1],1,n);\n\tfor(int i=1;i<=n;i++)add(getid(a[i]),i);\n\tfor(int x=all;x>=1;x--)\n\t{\n\t\troot[x]=root[x+1];\n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tint y=to[i];\n\t\t\tchange(root[x],1,n,y);\n\t\t}\n\t}\n\tm=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint L=read(),R=read(),K=read();\n\t\tint l=1,r=all,ans=0;\n\t\twhile(l<=r)\n\t\t{\n\t\t\tint mid=(l+r>>1);\n\t\t\tif(query(root[mid],1,n,L,R).sum>=K)ans=mid,l=mid+1;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tprintf(\"%d\\n\",num[ans]);\n\t}\n\treturn 0;\n}\n/*\n5\n1 2 2 3 3\n1\n2 5 3\n*/",
        "postTime": 1610541437,
        "uid": 97136,
        "name": "chenzida",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF484E \u3010Sign on Fence\u3011"
    },
    {
        "content": "# CF484E \u3010Sign on Fence\u3011\n[$\\text{\\color{red}{\u66f4\u597d\u306e\u9605\u8bfb\u4f53\u9a8c}}$](https://chen-jia-liang.gitee.io/blog/2020/09/12/%E9%A2%98%E8%A7%A3-CF484E-%E3%80%90Sign-on-Fence%E3%80%91/)\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u6570\u5217\uff0c\u6709$m$\u6b21\u8be2\u95ee\uff0c\u8be2\u95ee\u5f62\u5982$l\\ \\  r\\ \\ k$\n\n\u8981\u6c42\u5728\u533a\u95f4$[l,r]$\u5185\u9009\u4e00\u4e2a\u957f\u5ea6\u4e3a$k$\u7684\u533a\u95f4\uff0c\u6c42\u6b64\u533a\u95f4\u91cc\u6700\u5c0f\u6570\u7684\u6700\u5927\u503c\n\n## \u9898\u89e3\n\n\u9996\u5148~~\u9898\u9762\u6709\u70b9\u7ed5~~\uff0c\u4f46\u770b\u5230`\u6700\u5c0f\u6570\u7684\u6700\u5927\u503c`\uff0c\u6211\u4eec\u4e0d\u7981\u8054\u60f3\u5230\u4e86\u4e8c\u5206\n\n\u4e0d\u8fc7\u9996\u5148\u6570\u5b57\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981**\u79bb\u6563**\uff0c\u628a\u503c\u57df\u6539\u5230$[1,n]$\uff0c\u4e0d\u6539\u53d8\u5927\u5c0f\u5173\u7cfb\u3002\u4ee5\u4e0b\u64cd\u4f5c\u5747\u4f7f\u7528\u79bb\u6563\u540e\u7684\u503c\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8981\u8003\u8651\u5982\u4f55\u68c0\u9a8c$mid$\u662f\u5426\u53ef\u884c\u3002\n\n\u6211\u4eec\u8f6c\u6362\u4e00\u4e0b\u9898\u610f\uff0c`\u5728\u533a\u95f4[l,r]\u5185\u9009\u4e00\u4e2a\u957f\u5ea6\u4e3ak\u7684\u533a\u95f4\uff0c\u6b64\u533a\u95f4\u91cc\u6700\u5c0f\u6570\u4e3amid`\u5c31\u76f8\u5f53\u4e8e\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6$\\ \u2265 k$\u7684\u5e8f\u5217\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u6570\u90fd$\\ \u2265mid$\u3002\n\n\u5728\u6362\u53e5\u8bdd\u8bf4\uff0c\u5728$[l,r]$\u4e2d\u5927\u4e8e\u7b49\u4e8e$mid$\u7684\u6570\u7684\u6700\u5927\u8fde\u7eed\u957f\u5ea6$\\ \u2265k$\u3002\n\n\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u957f\u5ea6\u7684\u6700\u5927\u503c\u3002\u5982\u679c\u662f\u7ebf\u6bb5\u6811\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u64cd\u4f5c\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u7ef4\u62a4\u4e09\u4e2a\u53d8\u91cf$llen,rlen,mlen$\uff0c\u5206\u522b\u8868\u793a\u5f53\u524d\u533a\u95f4\u5de6\u4fa7\u8fde\u7eed\u957f\u5ea6\uff0c\u53f3\u4fa7\u8fde\u7eed\u957f\u5ea6\u4ee5\u53ca\u6700\u5927\u7684\u8fde\u7eed\u957f\u5ea6\u3002\n\u90a3\u4e48$mlen$\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u8f6c\u79fb\n\n1. \u4e0d\u8de8\u8d8a\u7684\u7684\u6700\u5927\u503c$\\max\\{mlen_{rson},mlen_{lson}\\}$\n\n2. \u8de8\u8d8a\u4e24\u6bb5\u7684\u503c$rlen_{lson}+llen_{rson}$\n\n\u53d6\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u89c2\u5bdf\u4e0b\u9762\u7684\u56fe\uff1a\n\n![tu](https://cdn.luogu.com.cn/upload/image_hosting/cbmqdokm.png)\n\n\u90a3\u4e48\u65b0\u7684$llen=llen_{lson},rlen=rlen_{rson}$\n\n\u4f46\u4ee5\u4e0b\u60c5\u51b5\u9700\u8981\u7279\u5224\uff1a\n\n![tu](https://cdn.luogu.com.cn/upload/image_hosting/yc1lzc2q.png)\n\n$llen=llen_{lson}+llen_{rson}$\n\n$rlen$\u4e5f\u662f\u540c\u7406\u3002\n\n\u4e8e\u662f\u80fd\u5feb\u901f\u67e5\u8be2\u6700\u5927\u8fde\u7eed\u957f\u5ea6\u7684\u7ebf\u6bb5\u6811\u5c31\u5efa\u5b8c\u4e86\u3002\n\n\u4f46\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u80fd\u5feb\u901f\u67e5\u8be2\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7ed9\u6bcf\u4e00\u4e2a\u503c\u6709\u4e00\u4e2a\u7ebf\u6bb5\u6811\u3002\u4f46\u8fd9\u6837\u5fc5\u5b9a\u65f6\u7a7a\u7206\u70b8\u3002\u8fd9\u91cc\u6211\u4eec\u91c7\u7528**\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811**\u6765\u7ef4\u62a4\u3002\n\n\u7ed9\u6bcf\u4e00\u4e2a\u503c\u5efa\u4e00\u4e2a\u7248\u672c\uff0c\u4ece\u800c\u505a\u5230\u5728$O(\\log(n))$\u7684\u65f6\u95f4\u5185\u67e5\u8be2$mid$\u662f\u5426\u53ef\u884c\u3002\u4e8e\u662f\u4ee3\u7801\u5c31\u5f88\u597d\u5199\u4e86\u3002\n\n## \u4ee3\u7801\n```cpp\n//#pragma optimize(2)\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate<typename T>\ninline void read(T &x){\n\tx=0;char c=getchar();bool f=false;\n\tfor(;!isdigit(c);c=getchar())f!=c=='-';\n\tfor(;isdigit(c);c=getchar())x=x*10+c-'0';\n\tif(f)x=-x;\n}\ntemplate<typename T ,typename ...Arg>\ninline void read(T &x,Arg &...args){\n\tread(x);read(args...);\n}\ntemplate<typename T>\ninline void write(T x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>=10)write(x/10);\n\tputchar(x%10+'0');\n}\nconst int maxn=1e5+100;\ntemplate<class T>struct Discrete{\n\tset<T>num;unordered_map<T,int>rk;vector<T>n;int cnt;\n\tvoid operator+=(const T b){\n\t\tnum.insert(b);\n\t}void init(){\n\t\tcnt=0;n.clear();\n\t\tfor(auto N:num)\n\t\t\trk[N]=++cnt,n.push_back(N);\n\t}T operator[](const int b){return n[b-1];}\n\tint get(T x){return rk[x];}\n};\nDiscrete<int>D;\nstruct node{\n\tint l,r,lc,rc;int len,llen,rlen,mlen;\n\ttemplate<class T>node(T val){\n\t\tif(val==1)llen=rlen=mlen=1;\n\t\telse llen=rlen=mlen=0;\n\t\tlen=1;\n\t}\n\tnode(){llen=rlen=mlen=len=0;}\n\tnode operator+(const node b)const{\n\t\tnode c;c.len=len+b.len;\n\t\tif(r-l+1==mlen)c.llen=mlen+b.llen;\n\t\telse c.llen=llen;\n\t\tif(b.r-b.l+1==b.mlen)c.rlen=b.mlen+rlen;\n\t\telse c.rlen=b.rlen;\n\t\tc.mlen=max(rlen+b.llen,max(mlen,b.mlen));\n\t\treturn c;\n\t}\n\tvoid cpy(node from){\n\t\tllen=from.llen;\n\t\trlen=from.rlen;\n\t\tmlen=from.mlen;\n\t\tlen=from.len;\n\t}\n};\ntemplate<class A,class B>\nstruct HJT_Tree{\n\tA t[maxn*20];B a[maxn];\n\tB *operator[](const int x){return &a[x];}\n\tint cnt;HJT_Tree(){cnt=0;}\n\tint build(int l,int r){\n\t\tint x=++cnt;\n\t\tt[x].l=l,t[x].r=r;\n\t\tif(l==r){\n\t\t\tt[x].cpy(A(a[l]));\n\t\t\treturn x;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tt[x].lc=build(l,mid);\n\t\tt[x].rc=build(mid+1,r);\n\t\tt[x].cpy(t[t[x].lc]+t[t[x].rc]);\n\t\treturn x;\n\t}\n\tint upd(int lst,int pos,B val){\n\t\tint x=++cnt;t[x]=t[lst];\n\t\tif(t[x].l==t[x].r){t[x].cpy(A(val));return x;}\n\t\tint mid=t[x].l+t[x].r>>1;\n\t\tif(pos<=mid)t[x].lc=upd(t[lst].lc,pos,val);\n\t\telse t[x].rc=upd(t[lst].rc,pos,val);\n\t\tt[x].cpy(t[t[x].lc]+t[t[x].rc]);\n\t\treturn x;\n\t}\n\tA qry(int x,int lq,int rq){\n\t\tif(lq<=t[x].l&&t[x].r<=rq)return t[x];\n\t\tint mid=t[x].l+t[x].r>>1;\n\t\tif(rq<=mid)return qry(t[x].lc,lq,rq);\n\t\tif(lq>mid)return qry(t[x].rc,lq,rq);\n\t\treturn qry(t[x].lc,lq,rq)+qry(t[x].rc,lq,rq);\n\t}\n};\nHJT_Tree<node,int>Tree;\nint rt[maxn],n,a,q,x,y,k;\npair<int,int>p[maxn];\nsigned main(){\n\t//freopen(\"1.in\",\"r\",stdin);\n\tread(n);\n\tfor(int i=1;i<=n;i++)read(a),p[i]=make_pair(a,i),D+=a;\n\tsort(p+1,p+1+n);D.init();\n\trt[maxn-1]=Tree.build(1,n);p[n+1].first=maxn-1;\n\tfor(int i=1;i<=n;i++)p[i].first=D.get(p[i].first);\n\tfor(int i=n;i>=1;i--)\n\t\trt[p[i].first]=Tree.upd(rt[p[i+1].first],p[i].second,1);\n\tfor(int i=maxn-2;i>=0;i--)if(!rt[i])rt[i]=rt[i+1];\n\tread(q);while(q--){\n\t\tread(x,y,k);\n \t\tint l=0,r=maxn-1,ans;\n\t\twhile(l<=r){\n\t\t\tint mid=l+r>>1;\n\t\t\tif(Tree.qry(rt[mid],x,y).mlen>=k)ans=mid,l=mid+1;\n\t\t\telse r=mid-1;\n\t\t}write(D[ans]);putchar('\\n');\n\t}\n\treturn 0;\n}\n```\n  ",
        "postTime": 1599911472,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF484E \u3010Sign on Fence\u3011"
    },
    {
        "content": "\u5176\u5b9e EI \u4e5f\u6709\uff0c\u4f46\u662f\u4ed6\u7684\u592a\u590d\u6742\u4e86\n\n\u5148\u611f\u8c22 cryozwq \u63d0\u4f9b\u521d\u6b65\u60f3\u6cd5\uff0c\u9605\u8bfb\u4e0b\u6587\u4e4b\u524d\u8bf7\u79fb\u6b65\u4ed6\u7684\u9898\u89e3\n\n\u6211\u4eec\u4ee4\u4e00\u4e2a\u5143\u7d20 $i$ \u5728\u7b1b\u5361\u5c14\u6811\u4e0a\u7684\u8303\u56f4\u4e3a $[l, r]$\uff0c\u6b64\u65f6\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u7ebf\u6bb5\u8986\u76d6\n\n\u4f1a\u53d1\u73b0\u74f6\u9888\u5176\u5b9e\u5728 $[l, r]$ \u5b8c\u5168\u843d\u5728\u8be2\u95ee\u533a\u95f4\u5185\u7684\u60c5\u51b5\u4e0a\n\ncryozwq \u7684\u7b2c $2, 3, 4$ \u4e2a\u8ba8\u8bba\u4e2d\u5206\u4e86\u90e8\u5206\u76f8\u4ea4\u548c\u5b8c\u5168\u5305\u542b\u4e24\u79cd\u60c5\u51b5\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u8003\u8651\n\n\u4ee4\u8be2\u95ee\u533a\u95f4\u4e3a $[L, R]$ \uff0c\u8981\u6c42\u957f\u5ea6\u4e3a $k$\n\n\u6211\u4eec\u8ba4\u4e3a\u957f\u5ea6 $\\geq k$ \u7684\u4e3a\u5408\u6cd5\u7ebf\u6bb5\n\n\u9996\u5148\u8003\u8651 $L \\leq r \\leq R$ \u7684\u60c5\u51b5\n\n\u4f1a\u53d1\u73b0\u65e0\u8bba\u662f\u90e8\u5206\u76f8\u4ea4\u8fd8\u662f\u5b8c\u5168\u5305\u542b\uff0c\u5176\u53f3\u7aef\u70b9 $r \\geq L + k - 1$\n\n\u7528\u4e00\u4e2a\u5e26\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u6700\u5927\u503c\u7684\u7ebf\u6bb5\u6811\u5373\u53ef\n\n$L \\leq l \\leq R$ \u7684\u60c5\u51b5\u540c\u7406\n\nCode\n\n```\n#include <bits/stdc++.h>\n#define ri register int\n#define ll long long\nusing namespace std;\nconst int Maxn=1e5;\nstruct Seg {\n\tint l,r,id;\n\tinline bool operator<(const Seg b) const {\n\t\treturn r-l+1>b.r-b.l+1;\n\t}\n}s[Maxn+5];\nstruct Query {\n\tint l,r,k,id;\n\tinline bool operator<(const Query b) const {\n\t\treturn k>b.k;\n\t}\n}q[Maxn+5];\nint a[Maxn+5];\nint ans[Maxn+5];\nint stk[Maxn+5],ls[Maxn+5],rs[Maxn+5],top;\nint n,m;\nstruct SegTree {\n\t#define ls(p) (p<<1)\n\t#define rs(p) (p<<1|1)\n\t#define mid (((l)+(r))>>1)\n\tint v[Maxn<<2];\n\tinline void update(int p) {\n\t\tv[p]=max(v[ls(p)],v[rs(p)]);\n\t}\n\tvoid build(int p,int l,int r) {\n\t\tv[p]=0;\n\t\tif(l==r)return ;\n\t\tbuild(ls(p),l,mid);\n\t\tbuild(rs(p),mid+1,r);\n\t}\n\tvoid change(int p,int l,int r,int k,int d) {\n\t\tif(l==r) {\n\t\t\tv[p]=d;\n\t\t\treturn ;\n\t\t}\n\t\tif(k<=mid)change(ls(p),l,mid,k,d);\n\t\telse change(rs(p),mid+1,r,k,d);\n\t\tupdate(p);\n\t}\n\tint query(int p,int l,int r,int L,int R) {\n\t\tif(L<=l&&r<=R)return v[p];\n\t\tint mx=0;\n\t\tif(L<=mid)mx=max(mx,query(ls(p),l,mid,L,R));\n\t\tif(R>mid)mx=max(mx,query(rs(p),mid+1,r,L,R));\n\t\treturn mx;\n\t}\n}t;\ninline bool cmpq(Query a,Query b) {\n\treturn a.l<b.l;\n}\ninline bool cmps(Seg a,Seg b) {\n\treturn a.l<b.l;\n}\nint build() {\n\tfor(ri i=1;i<=n;i++) {\n\t\twhile(top&&a[stk[top]]>a[i])ls[i]=stk[top--];\n\t\tif(top)rs[stk[top]]=i;\n\t\tstk[++top]=i;\n\t}\n\treturn stk[1];\n}\nvoid dfs(int p,int l,int r) {\n\tif(!p)return ;\n\ts[p]=(Seg){l,r,p};\n\tdfs(ls[p],l,p-1);\n\tdfs(rs[p],p+1,r);\n}\nvoid deal_left() {\n\tsort(q+1,q+m+1);\n\tsort(s+1,s+n+1);\n\tt.build(1,1,n);\n\tint now=1;\n\tfor(ri i=1;i<=m;i++) {\n\t\twhile(now<=n&&s[now].r-s[now].l+1>=q[i].k) {\n\t\t\tt.change(1,1,n,s[now].r,a[s[now].id]);\n\t\t\t++now;\n\t\t}\n\t\tans[q[i].id]=max(ans[q[i].id],t.query(1,1,n,q[i].l+q[i].k-1,q[i].r));\n\t}\t\n}\nvoid deal_right() {\n\tsort(q+1,q+m+1);\n\tsort(s+1,s+n+1);\n\tt.build(1,1,n);\n\tint now=1;\n\tfor(ri i=1;i<=m;i++) {\n\t\twhile(now<=n&&s[now].r-s[now].l+1>=q[i].k) {\n\t\t\tt.change(1,1,n,s[now].l,a[s[now].id]);\n\t\t\t++now;\n\t\t}\n\t\tans[q[i].id]=max(ans[q[i].id],t.query(1,1,n,q[i].l,q[i].r-q[i].k+1));\n\t}\n}\nvoid deal() {\n\tsort(q+1,q+m+1,cmpq);\n\tsort(s+1,s+n+1,cmps);\n\tt.build(1,1,n);\n\tint now=1;\n\tfor(ri i=1;i<=m;i++) {\n\t\twhile(now<=n&&s[now].l<=q[i].l) {\n\t\t\tt.change(1,1,n,s[now].r,a[s[now].id]);\n\t\t\t++now;\n\t\t}\n\t\tans[q[i].id]=max(ans[q[i].id],t.query(1,1,n,q[i].r,n));\n\t}\n}\nint main() {\n\tscanf(\"%d\",&n);\n\tfor(ri i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n\tdfs(build(),1,n);\n\tscanf(\"%d\",&m);\n\tfor(ri i=1;i<=m;i++)scanf(\"%d%d%d\",&q[i].l,&q[i].r,&q[i].k),q[i].id=i;\n\tdeal_left();\n\tdeal_right();\n\tdeal();\n\tfor(ri i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1647501576,
        "uid": 201278,
        "name": "xianggl",
        "ccfLevel": 0,
        "title": "Sign on Fence \u5355log\u89e3\u6cd5"
    },
    {
        "content": "~~\u5de8\u4f6c\u90fd\u7528\u4e3b\u5e2d\u6811\uff0c\u6211\u7528\u6574\u4f53\u4e8c\u5206~~\n\n\u9898\u610f\uff1a\u9759\u6001\u6c42$[l,r]$,\u4e2d\u957f\u5ea6\u4e3ak\u7684\u8fde\u7eed\u5b50\u533a\u95f4\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\n\n\u5eb7\u5230\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u8054\u60f3\u5230\u4e8c\u5206\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u4e8c\u5206\u51fa\u4e00\u4e2a$mid$\u540e\uff0c\u53ea\u8981\u628a\u5927\u4e8e$mid$\u7684\u4f4d\u7f6e\u641e\u4e3a1\uff0c\u5176\u4ed6\u641e\u4e3a0\n\n\u7136\u540e\u6c42$[l,r]$\u4e2d\u7684\u6700\u957f\u8fde\u7eed1\u7684\u5b50\u533a\u95f4\n\n\u5982\u679c\u6bcf\u4e2a\u90fd\u4e8c\u5206\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u5141\u8bb8\n\n\u90a3\u4e48\u5c31\u6574\u4f53\u4e8c\u5206\n\n\u4ee3\u7801\u6709~~\u8be6\u7ec6~~\u6ce8\u91ca\n\n```cpp\n#include<bits/stdc++.h>\n#define lc (root<<1)\n#define rc (root<<1|1)\n#define mid (l+r>>1) \n#define max(a,b) (a>b?a:b)\nusing namespace std;\nconst int Maxn=2e5+5;\ninline int R()\n{\n\tchar c;int res,sign=1;\n\twhile((c=getchar())>'9'||c<'0') if(c=='-') sign=-1;res=c-'0';\n\twhile((c=getchar())>='0'&&c<='9') res=res*10+c-'0';\n\treturn res*sign;\n}\nvoid W(int x)\n{\n\tif(x>9) W(x/10);\n\tputchar('0'+x%10);\n} \n//\u8bfb\u5165\u8f93\u51fa\u4f18\u5316 \nstruct thing // \u628a\u6240\u6709\u4e1c\u897f\u90fd\u4e22\u8fdb\u53bb \n{\n\tint x,y,k;\n\tbool op;\n\tint num;\n}q[Maxn],q1[Maxn],q2[Maxn];\nint n,m,cnt,ans[Maxn];\nint llen[Maxn*2],rlen[Maxn*2],mlen[Maxn*2],Rlen,Mlen,TOP;\ninline void pushup(int root,int l,int r)\n{\n\tmlen[root]=0;\n\tif(mlen[lc]==mid-l+1) llen[root]=mlen[lc]+llen[rc];\n\telse llen[root]=llen[lc];\n\tif(mlen[rc]==r-mid)   rlen[root]=mlen[rc]+rlen[lc];\n\telse rlen[root]=rlen[rc];\n\tmlen[root]=max(mlen[root],mlen[lc]);\n\tmlen[root]=max(mlen[root],mlen[rc]);\n\tmlen[root]=max(mlen[root],rlen[lc]+llen[rc]);\n}\nvoid modify(int root,int l,int r,int pos,int value)\n{\n\tif(l>pos||r<pos) return;\n\tif(l==r)\n\t{\n\t\tllen[root]=value;\n\t\trlen[root]=value;\n\t\tmlen[root]=value;\n\t\treturn;\n\t}\n\tmodify(lc,l,mid,pos,value);\n\tmodify(rc,mid+1,r,pos,value);\n\tpushup(root,l,r);\n}\nvoid query(int root,int l,int r,int z,int y)\n{\n\tif(r<z||l>y) return;\n\tif(z<=l&&y>=r) \n\t{\n\t\tMlen=max(Mlen,mlen[root]);\n\t\tMlen=max(Mlen,llen[root]+Rlen);\n\t\tif(mlen[root]==r-l+1) Rlen+=mlen[root];\n\t\telse Rlen=rlen[root]; \n\t\treturn ;\n\t}\n\tquery(lc,l,mid,z,y);\n\tquery(rc,mid+1,r,z,y);\n}\n//\u7ebf\u6bb5\u6811\u90e8\u5206,\u7ebf\u6bb5\u6811\u5c31\u5355\u7eaf\u8bb0\u5f55\u5de6\u8d77\u6700\u957f1\u6bb5,\u548c\u53f3\u8d77\u6700\u957f1\u6bb5\u548c\u6700\u957f1\u6bb5,\u7136\u540e\u7ef4\u62a4\u5c31\u597d\u4e86 \nvoid solve(int ql,int qr,int l,int r)\n{\n\tif(ql>qr) return;\n\tif(l==r)\n\t{\n\t\tfor(int i=ql;i<=qr;i++)\n\t\t\tif(q[i].op)ans[q[i].num]=l;\n\t\treturn;//\u4e8c\u5206\u51fa\u6765\u4e86 \n\t}\n\tint p1=0,p2=0;\n\tfor(int i=ql;i<=qr;i++)\n\t\tif(!q[i].op)\n\t\t{\n\t\t\tif(q[i].x>mid)\n\t\t\t{\n\t\t\t\tmodify(1,1,n,q[i].num,1);\n\t\t\t\tq2[++p2]=q[i];\n\t\t\t}\n\t\t\telse q1[++p1]=q[i];\n\t\t}//\u5904\u7406\u70b9 \n\tfor(int i=ql;i<=qr;i++)\n\t\tif(q[i].op)\n\t\t{\n\t\t\tMlen=Rlen=0;\n\t\t\tquery(1,1,n,q[i].x,q[i].y);\n\t\t\tif(Mlen>=q[i].k)q2[++p2]=q[i];\n\t\t\telse q1[++p1]=q[i];\n\t\t}//\u5904\u7406\u8be2\u95ee \n\tint p3=ql-1;\n\tfor(int i=1;i<=p1;i++)\n\tq[++p3]=q1[i];\n\tfor(int i=1;i<=p2;i++)\n\tq[++p3]=q2[i];\n\tsolve(ql,ql+p1-1,l,mid);//\u5de6\u533a\u95f4 \n\tfor(int i=ql+p1;i<=qr;i++)//\u8fd8\u539f,\u4f7f\u5f97\u5bf9\u53f3\u533a\u95f4\u4e0d\u4f1a\u6709\u5f71\u54cd\n\tif(!q[i].op)\n\tmodify(1,1,n,q[i].num,0);\n\tsolve(ql+p1,qr,mid+1,r);//\u53f3\u533a\u95f4 \n}\nint main()//\u4e2d\u89c4\u4e2d\u77e9\u7684\u4e3b\u51fd\u6570 \n{\n\tn=R(); \n\tfor(int i=1;i<=n;i++)\n\t{\n\t\t++cnt;\n\t\tq[cnt].x=R();\n\t\tq[cnt].num=i;\n\t\tTOP=max(TOP,q[cnt].x);\n\t}\n\tm=R();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\t++cnt;\n\t\tq[cnt].x=R();\n\t\tq[cnt].y=R();\n\t\tq[cnt].k=R();\n\t\tq[cnt].num=i;\n\t\tq[cnt].op=1; \n\t}\n\tsolve(1,cnt,1,TOP+1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tW(ans[i]);\n\t\tputs(\"\");\n\t}\n}\n```\n",
        "postTime": 1588079400,
        "uid": 220857,
        "name": "\u7d20\u8d28\u73a9\u5bb6\u5b591\u8d85",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF484E \u3010Sign on Fence\u3011"
    },
    {
        "content": "\u8003\u8651\u5148\u628a\u539f\u5e8f\u5217\u6309\u503c\u6392\u5e8f\uff0c\u7136\u540e\u67e5\u8be2\u65f6\u6211\u4eec\u53d1\u73b0\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\u5e76\u4e14\u7b54\u6848\u4e00\u5b9a\u662f\u4e00\u4e2a\u6728\u6869\u4e0a\u7684\u9ad8\u5ea6\uff0c\u6240\u4ee5\u4e8c\u5206\u4e00\u4e0b\u7b54\u6848\u662f\u5728\u6392\u5e8f\u540e\u7684\u54ea\u4e2a\u6728\u6869\u4e0a\u5c31\u884c\u4e86\u3002    \n\n\u5c06\u4e4b\u524d\u7684\u4e0b\u6807\u770b\u6210\u503c\u57df\uff0c\u73b0\u5728\u5355\u6b21\u67e5\u8be2\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u8be2\u95ee\u524d\u7f00\u662f\u5426\u53ef\u4ee5\u9009\u51fa\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e $w$ \u7684\u533a\u95f4\u5185\u7684\u8fde\u7eed\u503c\u57df\u6bb5\uff0c\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u5168\u5c40\u67e5\u8be2\u662f\u53ef\u4ee5\u76f4\u63a5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u3002          \n\n\u53d1\u73b0\u67e5\u8be2\u90fd\u5728\u524d\u7f00\u5185\uff0c\u4e8e\u662f\u76f4\u63a5\u5efa\u7acb\u4e3b\u5e2d\u6811\u7136\u540e\u6811\u4e0a\u8282\u70b9\u7ef4\u62a4\u4fe1\u606f\u540e\u5728\u67e5\u8be2\u65f6\u76f4\u63a5\u628a $2 \\log n$ \u4e2a\u8282\u70b9\u5355\u72ec\u63d0\u51fa\u6765\u91cd\u65b0\u5efa\u6811\u7b97\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5927\u5e38\u6570 $O(n \\log ^ 2 n)$ \u3002          \n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 1e5 + 5;\nstruct Node\n{\n\tint val,id;\n}a[Len];\nbool cmp(Node x,Node y){return x.val > y.val;}\nint n,m,top,Ll,Rr,lsh[Len],cnt,Kcnt,rt[Len];\nstruct node\n{\n\tint l,r,lmax,rmax,allmaxn,len;\n\tnode(){l = r = lmax = rmax = allmaxn = len = 0;}\n\tnode(int L,int R,int LMAX,int RMAX,int ALLMAXN,int LEN){l = l , R = r , lmax = LMAX , rmax = RMAX , allmaxn = ALLMAXN , len = LEN;}\n}tree[Len * 25],ODT[1025],LSH[1025];\nint clone(int p)\n{\n\ttop ++;\n\ttree[top] = tree[p];\n\treturn top;\n}\nnode push_up(node L,node R)\n{\n\tnode res;\n\tres.l = L.l , res.r = R.r , res.len = L.len + R.len;\n\tres.lmax = L.lmax;\n\tif(L.allmaxn == L.len) res.lmax = L.allmaxn + R.lmax;\n\tres.rmax = R.rmax;\n\tif(R.allmaxn == R.len) res.rmax = R.allmaxn + L.rmax;\n\tres.allmaxn = max(L.allmaxn , R.allmaxn);\n\tres.allmaxn = max(res.allmaxn , L.rmax + R.lmax);\n\treturn res;\n}\nvoid build(int &p,int l,int r)\n{\n\tp = clone(p);\n\ttree[p].len = r - l + 1;\n\tif(l == r) return;\n\tint mid = (l + r) >> 1;\n\tbuild(tree[p].l , l , mid);\n\tbuild(tree[p].r , mid + 1 , r);\n}\nvoid update(int &p,int l,int r,int idx)\n{\n\tp = clone(p);\n\tif(l == r)\n\t{\n\t\ttree[p].allmaxn = tree[p].lmax = tree[p].rmax = 1;\n\t//\tprintf(\"%d %d %d %d %d\\n\",l,r,tree[p].allmaxn,tree[p].lmax,tree[p].rmax); \n\t\ttree[p].l = tree[p].r = 0 , tree[p].len = 1;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(idx <= mid) update(tree[p].l , l , mid , idx);\n\telse update(tree[p].r , mid + 1 , r , idx);\n\tLl = tree[p].l , Rr = tree[p].r;\n\ttree[p] = push_up(tree[tree[p].l] , tree[tree[p].r]);\n\ttree[p].l = Ll , tree[p].r = Rr;\n\t//printf(\"%d %d %d %d %d\\n\",l,r,tree[p].allmaxn,tree[p].lmax,tree[p].rmax); \n}\nvoid query(int p,int l,int r,int nl,int nr)\n{\n\tif(nl <= l && nr >= r) \n\t{\n\t\tLSH[++ Kcnt] = tree[p];\n\t\treturn;\t\n\t} \n\tint mid = (l + r) >> 1;\n\tif(nl <= mid) query(tree[p].l , l , mid , nl , nr);\n\tif(nr > mid) query(tree[p].r , mid + 1 , r , nl , nr);\n}\n#define ls(p) p << 1\n#define rs(p) p << 1 | 1\nvoid BUILD(int p,int l,int r)\n{\n\tif(l == r){ODT[p] = LSH[l];return;}\n\tint mid = (l + r) >> 1;\n\tBUILD(ls(p) , l , mid);\n\tBUILD(rs(p) , mid + 1 , r);\n\tODT[p] = push_up(ODT[ls(p)] , ODT[rs(p)]);\n}\nsigned main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\tscanf(\"%d\",&a[i].val);\n\t\ta[i].id = i;\n\t}\n\tsort(a + 1 , a + 1 + n , cmp);\n\tbuild(rt[0] , 1 , n);\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\t//printf(\"###%d\\n\",i);\n\t\trt[i] = rt[i - 1];\n\t\tupdate(rt[i] , 1 , n , a[i].id);\t\t\n\t}\n\tscanf(\"%d\",&m);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tint l,r,x;scanf(\"%d %d %d\",&l,&r,&x);\n\t\tint ansl = 1 , ansr = n;\n\t\twhile(ansl <= ansr)\n\t\t{\n\t\t\tint mid = (ansl + ansr) >> 1;\n\t\t\tKcnt = 0;\n\t\t\tquery(rt[mid] , 1 , n , l , r);\n\t\t\tBUILD(1 , 1 , Kcnt);\n\t\t\tif(ODT[1].allmaxn >= x) ansr = mid - 1;\n\t\t\telse ansl = mid + 1;\n\t\t}\n\t\tprintf(\"%d\\n\",a[ansl].val);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1630328595,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF484E Sign on Fence"
    },
    {
        "content": "## \u524d\u8a00\n\n\u4e3b\u5e2d\u6811\u5165\u95e8\n\n## \u89e3\u9898\u601d\u8def\n\n\u8fd9\u4e2a\u5f88\u597d\u505a\u3002\u9996\u5148\u9898\u76ee\u8981\u6211\u4eec\u6c42\u7684\u662f\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\uff0c\u663e\u7136\u4e00\u773c\u5c31\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u6211\u4eec\u73b0\u5728\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u600e\u6837\u68c0\u9a8c\u4e00\u4e2a\u7b54\u6848\u662f\u5426\u7b26\u5408\u8981\u6c42\u3002\n\n\u6bd4\u5982\u8bf4\u6211\u4eec\u4e8c\u5206\u51fa\u6765\u4e00\u4e2a $mid$\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u68c0\u9a8c\u5728 $[l,r]$ \u4e4b\u4e2d\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a $k$ \u7684\u8fde\u7eed\u4e0d\u6bd4 $mid$ \u5c0f\u7684\u4e32\u3002\n\n\u7531\u4e8e\u6211\u4eec\u53ea\u5173\u5fc3\u6570\u5b57\u4e0e $mid$ \u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u5927\u4e8e\u7b49\u4e8e $mid$ \u4e3a $1$\uff0c\u5c0f\u4e8e $mid$ \u4e3a $0$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6c42\u7684\u5c31\u662f\u5bf9\u4e8e $mid$\uff0c\u6700\u957f\u8fde\u7eed\u4e3a $1$ \u7684\u4e32\u957f\u5ea6\u662f\u5426\u5927\u4e8e\u7b49\u4e8e $k$\u3002\n\n\u5bb9\u6613\u60f3\u5230\u5bf9\u6bcf\u4e2a $mid$ \u5f00\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u65f6\u7a7a\u7206\u70b8\uff0c\u6211\u4eec\u9700\u53e6\u60f3\u5999\u62db\u3002\n\n\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u6765\u4f18\u5316\u3002\n\n\u6b64\u65f6\u6211\u4eec\u628a\u4ece\u5927\u5230\u5c0f\u7684\u6240\u6709 $mid$ \u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u5168\u90e8\u6c42\u51fa\u6765\uff0c\u6700\u591a\u4fee\u6539 $n$ \u6b21\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u81f3\u4e8e\u600e\u4e48\u7ef4\u62a4\u6700\u957f\u8fde\u7eed $1$\uff0c\u53ef\u4ee5\u770b\u5176\u4ed6\u535a\u6587\uff0c\u6709\u8be6\u7ec6\u89e3\u91ca\uff0c\u6216\u8005\u770b\u6211\u7684\u4ee3\u7801\u4e5f\u53ef\u4ee5\u3002\n\n\u6ce8\u610f\u8981\u79bb\u6563\u5316\uff0c\u628a\u503c\u57df\u4fee\u6539\u4e3a $[1,n]$\uff0c\u5426\u5219\u53ef\u80fd\u7684 $mid$ \u503c\u592a\u591a\u4e86\u3002\n\n## \u4ee3\u7801\n\n```cpp\n//Don't act like a loser.\n//This code is written by huayucaiji\n//You can only use the code for studying or finding mistakes\n//Or,you'll be punished by Sakyamuni!!!\n#include<bits/stdc++.h>\n#define int long long//\u522b\u9a82\u4e86\nusing namespace std;\n\nint read() {\n\tchar ch=getchar();\n\tint f=1,x=0;\n\twhile(ch<'0'||ch>'9') {\n\t\tif(ch=='-')\n\t\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn f*x;\n}\n\nconst int MAXN=1e5+10;\n\nint n,m,q,cnt,tot;\nint num[MAXN],a[MAXN],root[MAXN],rt[MAXN];\nvector<int> vec[MAXN];\nstruct seg_tree {\n\tint llen,rlen,alen,ls,rs,len;\n}s[MAXN<<5];\n\nint new_node() {\n\treturn ++cnt;\n}\nvoid pushup(seg_tree &ans,seg_tree a,seg_tree b) {\n\tans.len=a.len+b.len;\n\t\n\tans.alen=max(max(a.alen,b.alen),a.rlen+b.llen);\n\tif(a.llen==a.len) {\n\t\tans.llen=a.llen+b.llen;\n\t}\n\telse {\n\t\tans.llen=a.llen;\n\t}\n\tif(b.rlen==b.len) {\n\t\tans.rlen=b.rlen+a.rlen;\n\t}\n\telse {\n\t\tans.rlen=b.rlen;\n\t}\n}\nint build(int l,int r,int p) {\n\tif(!p) {\n\t\tp=new_node();\n\t}\n\tif(l==r) {\n\t\ts[p].len=r-l+1;\n\t\ts[p].llen=s[p].rlen=s[p].alen=0;\n\t\treturn p;\n\t}\n\tint mid=(l+r)>>1;\n\ts[p].ls=build(l,mid,s[p].ls);\n\ts[p].rs=build(mid+1,r,s[p].rs);\n\tpushup(s[p],s[s[p].ls],s[s[p].rs]);\n\treturn p;\n}\nint modify(int l,int r,int p0,int p,int x) {\n\tif(!p) {\n\t\tp=new_node();\n\t}\n\tif(l==r) {\n\t\ts[p].len=r-l+1;\n\t\ts[p].llen=s[p].rlen=s[p].alen=1;\n\t\treturn p;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid) {\n\t\ts[p].rs=s[p0].rs;\n\t\ts[p].ls=modify(l,mid,s[p0].ls,s[p].ls,x);\n\t}\n\telse {\n\t\ts[p].ls=s[p0].ls;\n\t\ts[p].rs=modify(mid+1,r,s[p0].rs,s[p].rs,x);\n\t}\n\tpushup(s[p],s[s[p].ls],s[s[p].rs]);\n\treturn p;\n}\nseg_tree query(int l,int r,int p,int x,int y) {\n\tif(y<l||r<x) {\n\t\treturn s[0];\n\t}\n\tif(x<=l&&r<=y) {\n\t\treturn s[p];\n\t}\n\tint mid=(l+r)>>1;\n\tseg_tree ans=s[0];\n\tpushup(ans,query(l,mid,s[p].ls,x,y),query(mid+1,r,s[p].rs,x,y));\n\treturn ans;\n}\n\nbool check(int l,int r,int k,int x) {\n\tif(query(1,n,rt[x],l,r).alen>=k) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nsigned main() {\n\tcin>>n;\n\tfor(int i=1;i<=n;i++) {\n\t\ta[i]=read();\n\t\tnum[i]=a[i];\n\t}\n\tsort(num+1,num+n+1);\n\tm=unique(num+1,num+n+1)-num-1;\n\tfor(int i=1;i<=n;i++) {\n\t\ta[i]=lower_bound(num+1,num+m+1,a[i])-num;\n\t\t//cout<<a[i]<<endl;\n\t\tvec[a[i]].push_back(i);\n\t}\n\t\n\troot[0]=build(1,n,root[0]);\n\tfor(int i=m;i;i--) {\n\t\tint sz=vec[i].size();\n\t\tfor(int j=0;j<sz;j++) {\n\t\t\ttot++;\n\t\t\troot[tot]=modify(1,n,root[tot-1],root[tot],vec[i][j]);\n\t\t}\n\t\trt[i]=root[tot];\n\t}\n\t\n\tcin>>q;\n\tfor(int i=1;i<=q;i++) {\n\t\tint l,r,k;\n\t\tl=read();r=read();k=read();\n\t\t\n\t\tint lft=1,rgt=m;\n\t\twhile(lft+1<rgt) {\n\t\t\tint mid=(lft+rgt)>>1;\n\t\t\tif(check(l,r,k,mid)) {\n\t\t\t\tlft=mid;\n\t\t\t}\n\t\t\telse {\n\t\t\t\trgt=mid;\n\t\t\t}\n\t\t}\n\t\tif(check(l,r,k,rgt)) {\n\t\t\tprintf(\"%lld\\n\",num[rgt]);\n\t\t}\n\t\telse {\n\t\t\tprintf(\"%lld\\n\",num[lft]);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1622884453,
        "uid": 132976,
        "name": "huayucaiji",
        "ccfLevel": 6,
        "title": "CF484E Sign on Fence"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u5217\uff0c\u6709 $m$ \u6b21\u8be2\u95ee\uff0c\u8be2\u95ee\u5f62\u5982 $l$\uff0c$r$\uff0c$k$\u3002\n\n\u8981\u4f60\u5728\u533a\u95f4 $[l,r]$ \u5185\u9009\u4e00\u4e2a\u957f\u5ea6\u4e3a $k$ \u7684\u533a\u95f4\uff0c\u6c42\u533a\u95f4\u6700\u5c0f\u6570\u7684\u6700\u5927\u503c\u3002\n\n## Sol\n\u5f88\u663e\u7136\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\u3002\n\n\u8bbe\u4e8c\u5206\u7684\u6700\u5c0f\u9ad8\u5ea6 $h_{\\min}$\uff0c\u53ea\u8981\u5728\u533a\u95f4 $[l,r]$ \u4e2d\u68c0\u67e5\u662f\u5426\u6709\u8fde\u7eed $w$ \u4e2a\u6570\u90fd $\\ge h_{\\min}$\u3002\n\n\u6211\u4eec\u628a $h_{i} \\ge h_{\\min}$ \u7684\u4f4d\u7f6e\u586b $1$\uff0c\u5426\u5219\u586b $0$\u3002\n\n\u95ee\u9898\u5c31\u53d8\u6210\u68c0\u67e5\u533a\u95f4 $[l,r]$ \u4e2d\u662f\u5426\u6709\u8fde\u7eed $w$ \u4e2a $1$\u3002\n\n\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u5b9e\u73b0\u3002 \n\n\u8003\u8651\u4e0a\u8ff0\u505a\u6cd5\u7684\u524d\u63d0\u662f\u5728\u56fa\u5b9a $h_{\\min}$ \u7684\u60c5\u51b5\u4e0b\u7684\uff0c\u5f88\u663e\u7136 $h_{\\min}$ \u6700\u591a\u6709 $n$ \u79cd\u53d6\u503c\uff0c\u6700\u591a\u53ef\u80fd\u6709 $n$ \u9897\u7ebf\u6bb5\u6811\u3002\n\n\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u3002\n\n\u5bf9 $h$ \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\n\n\u4f9d\u6b21\u5f80\u7ebf\u6bb5\u6811\u4e2d\u63d2\u5165 $1$\uff0c\u5f97\u5230\u4e00\u9897\u65b0\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u4e8c\u5206 $h_{\\min}$ \u7684\u65f6\u5019\uff0c\u5728 $h_{\\min}$ \u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e0a\u505a\u67e5\u8be2\u5373\u53ef\u3002\n",
        "postTime": 1680424126,
        "uid": 675646,
        "name": "Dyousks",
        "ccfLevel": 0,
        "title": "CF484E Sign on Fence \u9898\u89e3"
    }
]