[
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/LaoMang-no-blog/p/16033541.html)\n\n---\n\n[**\u4f60\u8c37 link**](https://www.luogu.com.cn/problem/CF1201D)\n\n[**CF link**](https://codeforces.com/problemset/problem/1201/D)\n\n\u9898\u89e3\u533a\u6709\u4e00\u534a\u662f $\\mathcal O\\left(n\\log n\\right)$ \u505a\u6cd5\uff0c\u5269\u4e0b\u4e24\u7bc7 $\\mathcal O\\left(n\\right)$ \u505a\u6cd5\uff0c\u8dd1\u5f97\u53c8\u6162\uff0c\u4ee3\u7801\u8fd8\u53c8\u81ed\u53c8\u957f\uff0c\u6d3b\u751f\u751f\u6574\u51fa\u5927\u6a21\u62df\u7684\u5473\u9053\uff0c\u660e\u660e\u662f\u53ef\u4ee5\u5199\u7684\u5f88\u7b80\u6d01\u7684\u4ee3\u7801\u3002\n\n\u5728\u4e0b\u83bd\u67d0\u4eba\u4e0d\u624d\uff0c\u6682\u65f6\u62ff\u4e0b\u4f60\u8c37\u6700\u4f18\u89e3\uff1a\n\n![](https://s2.loli.net/2022/03/21/B5jIDLgVlaytWfx.png)\n\n### \u6b63\u7247\u5f00\u59cb\n\n\u5e9f\u8bdd\u5230\u6b64\u4e3a\u6b62\uff0c\u63a5\u4e0b\u6765\u8bb2\u505a\u6cd5\uff0c\u5176\u5b9e\u5927\u5bb6\u9898\u89e3\u91cc\u505a\u6cd5\u90fd\u5df2\u7ecf\u8bb2\u5f97\u6bd4\u8f83\u6e05\u695a\u4e86\uff0c\u6211\u8fd9\u91cc\u8fd8\u662f\u518d\u8bb2\u4e00\u904d\u3002\n\n\u7ed9\u5b9a\u4e00\u5f20\u7f51\u683c\u56fe\u4ee5\u53ca\u4e00\u4e9b\u7279\u6b8a\u70b9\u548c\u7279\u6b8a\u5217\uff0c\u53ea\u5141\u8bb8\u5411\u5de6\u53f3\u8d70\u6216\u5728\u7279\u6b8a\u5217\u5411\u4e0a\u8d70\uff0c\u95ee\u7ecf\u8fc7\u6240\u6709\u7279\u6b8a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n\n\u7b2c\u4e00\u773c\u5c31\u662f dp\uff0c\u611f\u89c9\u5c31\u5f88\u5bf9\uff0c\u5148\u8bbe\u4e00\u4e2a dp \u72b6\u6001 $f_{i,j}$ \u8868\u793a**\u5df2\u7ecf\u7ecf\u8fc7\u6240\u6709\u524d $i$ \u884c\u7279\u6b8a\u70b9**\uff0c\u8d70\u5230\u7b2c $i$ \u884c\u7b2c $j$ \u4e2a\u7279\u6b8a\u70b9\uff0c\u6240\u7ecf\u8fc7\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n\n\u8f6c\u79fb\u65b9\u7a0b\u5c31\u4e0d\u5199\u4e86\u3002\n\n\u7136\u540e\u53d1\u73b0\u5149\u72b6\u6001\u5c31\u6709 $\\mathcal O\\left(n^2\\right)$ \u4e2a\uff0c\u94c1\u5b9a\u7206\u70b8\uff0c\u6240\u4ee5\u8003\u8651\u505a\u4e00\u70b9\u4f18\u5316\u3002\n\n\u9996\u5148\u80af\u5b9a\u4ece\u72b6\u6001\u5165\u624b\uff0c\u53d1\u73b0\u8981\u7ecf\u8fc7**\u5168\u90e8**\u7684\u7279\u6b8a\u70b9\uff0c\u90a3\u4e48\u5728\u4e00\u5c42\u5185\u79fb\u52a8\u65b9\u5f0f\u5df2\u7ecf\u56fa\u5b9a\u4e86\uff0c\u5230\u8fbe\u8fd9\u4e00\u5c42\u540e\uff0c\u8981\u4e48\u5148\u8d70\u5230\u6700\u5de6\u8fb9\u7684\u7279\u6b8a\u70b9\uff0c\u518d\u5f80\u53f3\u8fb9\u8d70\u5230\u6700\u53f3\u8fb9\u7684\u7279\u6b8a\u70b9\uff0c\u8981\u4e48\u53cd\u8fc7\u6765\uff0c\u4e2d\u95f4\u7684\u70b9\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002\n\n\u8fd9\u4e0b\u7b80\u5355\u4e86\uff0c\u6bcf\u5c42\u53ea\u8bb0\u6700\u5de6\u8fb9\u548c\u6700\u53f3\u8fb9\u7684\u70b9\u5c31\u53ef\u4ee5\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u77ac\u51cf\u4e00\u4e2a $n$\u3002\n\n\u5927\u4f53\u601d\u8def\u4e0a\u5c31\u662f\u8fd9\u6837\uff0c\u4f46\u662f\u7ec6\u8282\u8fd8\u662f\u6709\u7684\u3002\n\n\u9996\u5148\uff0c\u5982\u679c\u6709\u7a7a\u884c\uff0c\u90a3\u4e48\u6240\u6709\u4fe1\u606f\u5e94\u8be5\u7ee7\u627f\u4e0a\u4e00\u884c\u7684\u3002\n\n\u5176\u6b21\uff0c\u7eb5\u5411\u4e0a\u4e0d\u4e00\u5b9a\u662f\u8d70 $n-1$ \u6b65\uff0c\u9876\u7aef\u5982\u679c\u6709\u7a7a\u884c\uff0c\u6ce8\u610f\u4e0d\u7528\u8dd1\u5230\u7b2c $n$ \u884c\uff0c\u5e94\u5f53\u5c06 $n$ \u8bbe\u4e3a\u6700\u9760\u4e0a\u7684\u7279\u6b8a\u70b9\u7684\u7eb5\u5750\u6807\u3002\n\n\u7136\u540e\u5c31\u662f\u4e00\u70b9\u5c0f\u5206\u7c7b\u8ba8\u8bba\uff0c\u6bd4\u5982\u4ece $(1,1)$ \u8d70\u5230 $(2,3)$ \uff0c\u5982\u679c\u7b2c $1$ \u5217\u5230\u7b2c $3$ \u5217\u4e2d\u6709\u7279\u6b8a\u5217\uff0c\u90a3\u4e48\u6a2a\u5411\u79fb\u52a8\u8ddd\u79bb\u5c31\u662f $3-1=2$\uff0c\u5426\u5219\u7684\u8bdd\u5e94\u8be5\u627e\u6700\u8fd1\u7684\u7279\u6b8a\u5217\u53bb\u201c\u501f\u9053\u201d\uff0c\u6bd4\u5982\u5982\u679c\u7b2c $5$ \u5217\u662f\u7279\u6b8a\u5217\uff0c\u90a3\u4e48\u6a2a\u5411\u79fb\u52a8\u8ddd\u79bb\u5c31\u662f $5\\times2-3-1=6$\uff0c\u6240\u4ee5\u8981\u5148\u9884\u5904\u7406\u6bcf\u4e00\u5217\u5de6\u53f3\u4e24\u8fb9\u6700\u9760\u8fd1\u7684\u7279\u6b8a\u5217\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230 $\\mathcal O\\left(1\\right)$ \u67e5\u8be2\uff0c\u5426\u5219\u5982\u679c\u7528\u4e8c\u5206\u4f1a\u53d8\u6210 $\\mathcal O\\left(n\\log n\\right)$\u3002\n\n\u6700\u540e\u662f[**\u4ee3\u7801**](https://codeforces.com/contest/1201/submission/150313552)\uff0c\u81ea\u8ba4\u4e3a\u8fd8\u633a\u7b80\u6d01\u7684\uff0c\u8dd1\u7684\u4e5f\u4e0d\u9519\u3002",
        "postTime": 1647829701,
        "uid": 310525,
        "name": "\u8001\u83bd\u83bd\u7a7f\u4e00\u5207",
        "ccfLevel": 0,
        "title": "CF1201D Treasure Hunting \u9898\u89e3"
    },
    {
        "content": "# $CF1201D$ `Treasure Hunting`\n\n## \u9898\u610f\uff1a\n+ \u6709$2*10^5$\u4e2a\u5b9d\u85cf\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u5730\u65b9\u5f80\u5de6\u53f3\u8d70\uff0c\u5728\u5b89\u5168\u5217\u53ef\u4ee5\u5f80\u4e0a\u8d70\uff0c\u4e0d\u80fd\u5f80\u4e0b\u8d70\u3002\u521d\u59cb\u5728$(1,1)$\u3002\u6bcf\u8d70\u4e00\u683c\u6d88\u8017\u65f6\u95f4$1$\u3002\u6c42\u53d6\u5b8c\u6240\u6709\u5b9d\u85cf\u82b1\u8d39\u6700\u5c0f\u65f6\u95f4\u3002\n\n## $Solution$\n+ \u8003\u8651$dp$\n+ \u56e0\u4e3a\u4e0d\u80fd\u5f80\u4e0b\u8d70\uff0c\u663e\u7136\u6bcf\u884c\u672b\u72b6\u6001\u53ea\u80fd\u662f\u5728\u6700\u5de6\u8fb9\u6216\u8005\u6700\u53f3\u8fb9\u7684\u5b9d\u85cf\n+ $dp[i][0/1]$\u8868\u793a\u524d$i$\u884c\u5b9d\u85cf\u9009\u5b8c\u5728\u5de6/\u53f3\u7684\u6700\u5c0f\u82b1\u8d39\n+ \u53d1\u73b0\u53ea\u6709\u6bcf\u4e00\u884c\u53ea\u6709\u6700\u5de6\u8fb9\u548c\u6700\u53f3\u8fb9\u7684\u5b9d\u85cf\u6709\u7528(\u4ece\u6700\u5de6\u5230\u6700\u53f3\u6216\u8005\u4ece\u6700\u53f3\u5230\u6700\u5de6\u8d70\u4e00\u904d)\n+ \u8bb0\u5f55\u4e00\u4e2a$p$\u6570\u7ec4\uff0c\u8868\u793a\u5f53\u524d\u884c\u7684\u6700\u5de6\u548c\u6700\u53f3\u5b9d\u85cf\n+ \u7136\u540e\u8ba8\u8bba\u5982\u4e0b\u4e24\u79cd\u60c5\u51b5\n    1. \u5f53\u524d\u884c\u6709\u5b9d\u85cf\n        + \u53ef\u4ee5\u4ece\u4e0a\u4e2a\u72b6\u6001\u7684\u5de6\u53f3\u8f6c\u79fb\u5230\u5f53\u524d\u72b6\u6001\u7684\u5de6\u53f3\uff0c\u8f6c\u79fb\u56db\u6b21\n        + \u6bcf\u6b21\u8f6c\u79fb\u53ef\u80fd\u4ece\u4e0a\u4e2a\u72b6\u6001\u7684\u6700\u8fd1\u5de6\u5b89\u5168\u5217\u8f6c\u79fb\u8fc7\u6765\uff0c\u4e5f\u6709\u53ef\u80fd\u4ece\u4e0a\u4e2a\u5b89\u5168\u70b9\u7684\u6700\u8fd1\u53f3\u5b89\u5168\u5217\u8f6c\u79fb\u8fc7\u6765\uff0c\u6bcf\u6b21\u8f6c\u79fb\u5224\u65ad\u4e24\u6b21\n        + \u6bcf\u6b21\u8f6c\u79fb\u7684\u5224\u65ad\u5177\u6709\u5f88\u5927\u7684\u76f8\u4f3c\u6027\uff0c\u8003\u8651\u5199\u4e2a\u51fd\u6570\u51cf\u5c11\u7801\u91cf(\u4e4b\u524d\u5199\u4e86$160$\u591a\u884c\u7684$8$\u79cd\u60c5\u51b5\u5224\u65ad\u7136\u540e\u653e\u5f03\u4e86)\n        + \u8bbe\u51fd\u6570 $calc(j,u,i,v)$ \u8868\u793a\u4ece$j$\u70b9\u7684$u$\u65b9\u5411\u8f6c\u79fb\u5230$i$\u70b9\u7684$v$\u65b9\u5411\u8981\u8d70\u7684\u8def\u7a0b\n        + \u753b\u56fe\u53d1\u73b0\u7684\u89c4\u5f8b\u662f\n        + ![](https://cdn.luogu.com.cn/upload/image_hosting/vc8ixf6n.png)\n        + \u4e00\u53e5\u8bdd\u5c31\u662f\u8ddd\u79bb\u8d21\u732e\u7b49\u4e8e\u5f53\u524d\u70b9\u5230\u8f6c\u79fb\u70b9\u7684\u53e6\u4e00\u8fb9\u7684\u8ddd\u79bb\u52a0\u4e0a\u5de6\u53f3\u4e24\u70b9\u957f\u5ea6\n        + \u8fd9\u6837\u5c31\u53ef\u4ee5\u7528`lower_bound`\u67e5\u627e$p$\u6570\u7ec4\u5feb\u901f\u66f4\u65b0\u5f53\u524d\u70b9\u7684\u524d\u9a71\u548c\u540e\u7ee7\u4ece\u800c\u66f4\u65b0\u7b54\u6848\u4e86\n    2. \u5f53\u524d\u884c\u6ca1\u6709\u5b9d\u85cf\n        + \u628a\u4e0a\u4e00\u884c\u7684\u5b9d\u85cf\u4f4d\u7f6e\u8f6c\u79fb\u5230\u5f53\u524d\u884c\n        + $dp$\u503c++\n        + \u6ce8\u610f\u53ef\u80fd\u4e0a\u9762\u5b9d\u85cf\u90fd\u6ca1\u6709\u4e86\uff0c\u5c31\u4e0d\u80fd\u4f7f$dp$\u503c++\n        + \u6240\u4ee5\u8bb0\u5f55\u4e00\u4e2a$las$\u8868\u793a\u4e0a\u4e00\u4e2a\u5b9d\u85cf\u5728\u54ea\u4e00\u884c\uff0c\u8f6c\u79fb\u65f6\u52a0\u4e0a\u884c\u5dee\n        \n~~\u770b\u524d\u9762\u51e0\u7bc7\u90fd\u8ba8\u8bba\u4e86\u597d\u591a\u60c5\u51b5\uff0c\u8fd9\u7bc7\u9898\u89e3\u5229\u7528\u901a\u6027\u5c11\u8ba8\u8bba\u70b9\u60c5\u51b5\u3002~~\n\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <vector>\n#define rr int\nusing namespace std;\ntypedef long long ll;\ninline ll read() {\n    char i = getchar();\n    ll f = 1, res = 0;\n    while (i < '0' || i > '9') {\n        if (i == '-') f = -1;\n        i = getchar();\n    }\n    while (i >= '0' && i <= '9') {\n        res = res * 10 + i - '0';\n        i = getchar();\n    }\n    return res * f;\n}\nconst int N = 2e5 + 50;\nint n, m, k, q;\nll p[N][2], dp[N][2], inf;\nvector<ll> line;\nvector<ll>::iterator ite;\ninline ll calc(int j, int u, int i, int v) {\n    ite = lower_bound(line.begin(), line.end(), p[j][u]);  // suf\n    ll res = inf;\n    if (ite != line.end()) {\n        ll pos = *ite;\n        res = abs(p[j][u] - pos) + abs(p[i][v ^ 1] - pos) +\n              abs(p[i][v] - p[i][v ^ 1]);\n    }\n    ite = lower_bound(line.begin(), line.end(), p[j][u]);  // pre\n    if (ite != line.begin()) {\n        --ite;\n        ll pos = *ite;\n        res = min(res, abs(p[j][u] - pos) + abs(p[i][v ^ 1] - pos) +\n                           abs(p[i][v] - p[i][v ^ 1]));\n    }\n    return res;\n}\nint main() {\n    n = read(), m = read(), k = read(), q = read();\n    memset(dp, 0x3f3f3f3f, sizeof dp);\n    inf = dp[0][0];\n    for (rr i = 1; i <= n; ++i) {\n        p[i][0] = inf;\n        p[i][1] = -inf;\n    }\n    ll x, y;\n    for (rr i = 1; i <= k; ++i) {\n        x = read();\n        y = read();\n        p[x][0] = min(p[x][0], y);\n        p[x][1] = max(p[x][1], y);\n    }\n    p[1][0] = 1;\n    p[1][1] = max(p[1][1], ll(1));\n    for (rr i = 1; i <= q; ++i) {\n        x = read();\n        line.push_back(x);\n    }\n    sort(line.begin(), line.end());\n    dp[1][0] = abs(p[1][1] - 1) + abs(p[1][1] - 1);\n    dp[1][1] = abs(p[1][1] - 1);\n    int las = 1;\n    for (rr i = 2; i <= n; ++i) {\n        if (p[i][0] == inf) continue;\n        for (rr u = 0; u < 2; ++u)\n            for (rr v = 0; v < 2; ++v) {\n                dp[i][v] =\n                    min(dp[i][v], dp[las][u] + calc(las, u, i, v) + i - las);\n            }\n        las = i;\n    }\n    ll ans = min(dp[las][0], dp[las][1]);\n    cout << ans;\n}\n```",
        "postTime": 1571732260,
        "uid": 19905,
        "name": "DarkMoon_Dragon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1201D \u3010Treasure Hunting\u3011"
    },
    {
        "content": "[\u95e8\u95e8](https://codeforces.com/problemset/problem/1201/D)\n\n### \u9898\u610f\uff1a\n\u4e00\u4e2a$n \\times m$\u7684\u77e9\u9635\uff0c\u521d\u59cb\u65f6\u5728$(1,1)$\u5904\uff0c\u53ea\u80fd\u5411\u4e0a\uff0c\u5411\u5de6\uff0c\u5411\u53f3\u8d70\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u7ed9\u5b9a\u5217\u624d\u80fd\u5411\u4e0a\u8d70\u3002\u4e00\u4e9b\u683c\u5b50\u4e2d\u6709\u5b9d\u85cf\uff0c\u95ee\u62ff\u5230\u6240\u6709\u5b9d\u85cf\u7684\u6700\u5c0f\u6b65\u6570\u3002\n\n\n### \u9898\u89e3\n\u8003\u8651dp,$dp[i][0/1]$ \u8868\u793a\u770b\u5230\u7b2c$i$\u884c\uff0c\u76ee\u524d\u5728\u6b64\u884c\u7684\u6700\u5de6$/$\u53f3\u683c\u5b50\u7684\u5b9d\u85cf\uff0c\u6240\u9700\u8981\u7684\u6700\u5c0f\u6b65\u6570\u3002\n\n\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u8bbe\u8ba1\u5462\uff1f\n\n\u9996\u5148\uff0c\u56e0\u4e3a\u4e0d\u80fd\u5411\u4e0b\u8d70\uff0c\u6240\u4ee5\u5728\u8d70\u5230\u66f4\u9ad8\u7684\u4e00\u884c\u524d\u5fc5\u987b\u628a\u8fd9\u884c\u7684\u5b9d\u85cf\u5168\u7ecf\u8fc7\uff0c\u7ecf\u8fc7\u6240\u6709\u5b9d\u85cf\u65f6\uff0c\u4e00\u5b9a\u505c\u5728\u4e24\u7aef\u7684\u5b9d\u85cf\u4e0a\uff0c\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u6700\u4f18\u3002\n\n\u8f6c\u79fb\u65f6\uff0c\u53ea\u8981\u8003\u8651\u524d\u4e00\u884c\u5b9d\u85cf\u6700\u8fd1\u7684\u67f1\u5b50\u3002\u6240\u4ee5\u662f$2 \\times 2\\times2 $ \u7684\n\n\n### \u6ce8\u610f\n\u5982\u679c\u67d0\u4e00\u884c\u6ca1\u6709\u5b9d\u85cf\uff0c\u8981\u628a\u524d\u4e00\u884c\u7684$dp$\u503c\u548c\u4e24\u7aef\u5b9d\u85cf\u7684\u4f4d\u7f6e\u90fd\u590d\u5236\u8fc7\u6765\uff0c$dp$\u503c\u8981$+1$\uff0c\u76f8\u5f53\u4e8e\u76f4\u63a5\u5411\u4e0a\u5e73\u79fb\u3002\u4f46\u5982\u679c\u8fd9\u884c\u540e\u9762\u90fd\u6ca1\u6709\u5b9d\u85cf\uff0c\u8fd9\u6837\u5c31\u4e0d\u5bf9\u4e86\uff0c\u6240\u4ee5\u5f00\u59cb\u65f6\uff0c\u5012\u7740\u626b\u4e00\u904d\uff0c\u5982\u679c\u6ca1\u5b9d\u85cf\uff0c\u5c31\u628a$n$\u51cf\u4e00\u3002\n\n\u5982\u679c\u7b2c\u4e00\u884c\u6ca1\u6709\u5b9d\u85cf\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5c31\u5728$(1,1)$  \u5904\u52a0\u4e00\u4e2a\u5b9d\u85cf\uff0c\u663e\u7136\u8fd9\u6837\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\n\n\u8fd9\u4e24\u4e2a\u70b9\u5361\u4e86\u6211\u597d\u4e45\u3002\u3002\u3002\n\n### Tips:\n1. \u8003\u8651\u95ee\u9898\u8981\u5168\u9762\u554a\uff01\n\ncode:\n\n```cpp\n//love yjl forever;\n#include<bits/stdc++.h>\nusing namespace std;\nconst int INF=0x3f3f3f3f,MAX=2e5+5;\nint n,m,k,q;\nint zz[MAX],zr[MAX];\nint td[MAX];\nint le[MAX],ri[MAX];\nlong long dp[MAX][2];\nlong long js(int now,int i)\n{\n\tlong long s=0;\n\tif(now<=zz[i])\n\t\ts+=zr[i]-now;\n\telse \n\t\ts+=now-zz[i]+(zr[i]-zz[i]);\n\treturn s;\t\n}\n\nlong long js1(int now,int i)\n{\n\tlong long s=0;\n\tif(now>=zr[i])\n\t\ts+=now-zz[i];\n\telse \n\t\ts+=zr[i]-now+(zr[i]-zz[i]);\n\treturn s;\n}\nint main()\n{\n/*\tfreopen(\"\",\"r\",stdin);\n\tfreopen(\"\",\"w\",stdout);*/\n\tcin>>n>>m>>k>>q;\n\tint i;\n\tfor(i=1;i<=n;i++)\n\t\tzz[i]=m+1;\n\t\n\t\n\tfor(i=1;i<=k;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tzz[x]=min(zz[x],y);\n\t\tzr[x]=max(zr[x],y);\n\t}\n\t\n\tfor(i=1;i<=q;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\ttd[x]=1;\n\t}\n\t\n\tint x=0;\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tif(td[i]) x=i;\n\t\tle[i]=x;\n\t}\n\t\n\tx=m+1;\n\tfor(i=m;i;i--)\n\t{\n\t\tif(td[i]) x=i;\n\t\tri[i]=x;\n\t}\t\n\tfor(i=1;i<=n;i++)\n\t\tdp[i][0]=dp[i][1]=400000000000+5;\n\t\n\tif(zz[1]==m+1)\n\t\tzz[1]=zr[1]=1;\n\t\n\tdp[1][1]=zr[1]-1;\n\tdp[1][0]=dp[1][1]+zr[1]-zz[1];\t\n\t\n\twhile(zz[n]==m+1)\n\t{\n\t\tn--;\n\t}\n\tfor(i=2;i<=n;i++)\n\t{\n\t\tif(zz[i]==m+1||!zr[i])\n\t\t{\n\t\t\tdp[i][0]=dp[i-1][0]+1;\n\t\t\tdp[i][1]=dp[i-1][1]+1;\n\t\t\tzz[i]=zz[i-1];\n\t\t\tzr[i]=zr[i-1];\n\t\t\tcontinue;\n\t\t}\n\t\tint now;\n\t\tlong long s;\n\t\t//dp[i-1][1]--------dp[i][1];\n\t\tx=zr[i-1];\n\t\tif(le[x]!=0)\n\t\t{\n\t\t\ts=0;\n\t\t\ts+=1+x-le[x];\n\t\t\tnow=le[x];\n\t\t\ts+=js(now,i);\n\t\t\tdp[i][1]=min(dp[i][1],s+dp[i-1][1]);\n\t\t}\n\t\tif(ri[x]!=m+1)\n\t\t{\n\t\t\ts=0;\n\t\t\ts+=ri[x]-x+1;\n\t\t\tnow=ri[x];\n\t\t\ts+=js(now,i);\n\t\t\tdp[i][1]=min(dp[i][1],s+dp[i-1][1]);\n\t\t}\n\t//\tif(i==3&&dp[i][1]==15)\tcout<<1<<endl;\n\n\t\t//dp[i-1][0]--------dp[i][1];\n\t\tx=zz[i-1];\n\t\tif(le[x]!=0)\n\t\t{\n\t\t\ts=0;\n\t\t\ts+=1+x-le[x];\n\t\t\tnow=le[x];\n\t\t\ts+=js(now,i);\n\t\t\tdp[i][1]=min(dp[i][1],s+dp[i-1][0]);\n\t\t}\n\t\tif(ri[x]!=m+1)\n\t\t{\n\t\t\ts=0;\n\t\t\ts+=ri[x]-x+1;\n\t\t\tnow=ri[x];\n\t\t\ts+=js(now,i);\n\t\t\tdp[i][1]=min(dp[i][1],s+dp[i-1][0]);\n\t\t}\n\t\t//if(i==3&&dp[i][1]==15)\tcout<<2<<endl;\n\t\t\n\t\t//dp[i-1][1]--------dp[i][0];\n\t\tx=zr[i-1];\n\t\tif(le[x]!=0)\n\t\t{\n\t\t\ts=0;\n\t\t\ts+=1+x-le[x];\n\t\t\tnow=le[x];\n\t\t\ts+=js1(now,i);\n\t\t\tdp[i][0]=min(dp[i][0],s+dp[i-1][1]);\n\t\t}\n\t\tif(ri[x]!=m+1)\n\t\t{\n\t\t\ts=0;\n\t\t\ts+=ri[x]-x+1;\n\t\t\tnow=ri[x];\n\t\t\ts+=js1(now,i);\n\t\t\tdp[i][0]=min(dp[i][0],s+dp[i-1][1]);\n\t\t}\n\t\t//dp[i-1][0]--------dp[i][0];\n\t\tx=zz[i-1];\n\t\tif(le[x]!=0)\n\t\t{\n\t\t\ts=0;\n\t\t\ts+=1+x-le[x];\n\t\t\tnow=le[x];\n\t\t\ts+=js1(now,i);\n\t\t\tdp[i][0]=min(dp[i][0],s+dp[i-1][0]);\n\t\t}\n\t\tif(ri[x]!=m+1)\n\t\t{\n\t\t\ts=0;\n\t\t\ts+=ri[x]-x+1;\n\t\t\tnow=ri[x];\n\t\t\ts+=js1(now,i);\n\t\t\tdp[i][0]=min(dp[i][0],s+dp[i-1][0]);\n\t\t}\n\t}\n/*\tfor(i=1;i<=n;i++)\n\t\tcout<<dp[i][0]<<\" \"<<dp[i][1]<<endl;*/\n\tcout<<min(dp[n][0],dp[n][1])<<endl;\n\treturn 0;\n}\n/*\n3 6 2 2\n2 2\n3 4\n1 6\n\n*/\n```\n",
        "postTime": 1566115369,
        "uid": 20338,
        "name": "zhmshitiancai",
        "ccfLevel": 7,
        "title": "CF 1021 D. Treasure Hunting"
    },
    {
        "content": "[\u539f\u9898\u94fe\u63a5](https://www.luogu.org/problem/CF1201D)\n\n# \u9898\u89e3\n\n\u5927\u6982\u5c31\u662f\u8bf4\u4e00\u4e2a\u7f51\u683c\u56fe \u4f60\u5728\u5de6\u4e0b\u89d2 \u53ef\u4ee5\u5411\u4e0a \u5411\u53f3 \u5411\u5de6\u8d70 \u4e0d\u80fd\u5411\u4e0b\u8d70 \n\u800c\u4e14\u5411\u4e0a\u8d70\u65f6\u53ea\u80fd\u901a\u8fc7\u6307\u5b9a\u7684\u5217\u5411\u4e0a\u8d70 \u6709\u4e00\u4e9b\u70b9\u6709\u5b9d\u85cf\u6c42\u628a\u5b83\u4eec\u5403\u5b8c\u7684\u6700\u5c0f\u6b65\u6570\n\n![](https://codeforces.com/predownloaded/c7/2a/c72ae8d7e76c07277be9dd6841fa0d9bc199ab31.png)\n\n\u770b\u5230\u4e0d\u80fd\u5411\u4e0b\u8d70 \u60f3\u5230$Dp$\u7684\u9636\u6bb5\u6309\u884c\u5212\u5206 \u672c\u6765\u6211\u60f3$Dp[i][j]$\u8868\u793a\u5f53\u524d\u5728$i$\u884c$j$\u5217\u7684\u6700\u5c0f\u4ee3\u4ef7 \u4f46\u5149\u72b6\u6001\u5c31\u5b58\u4e0d\u4e0b \u540e\u6765\u4e00\u60f3 \u6bcf\u4e00\u884c\u5403\u5b8c\u5b9d\u85cf\u6240\u5728\u7684\u70b9\u53ea\u80fd\u662f$R[i]$\u6216\u8005$L[i]$\u5373\u6700\u5de6\u8fb9\u6216\u6700\u53f3\u8fb9\u7684\u5b9d\u85cf\u7684\u4f4d\u7f6e \u8fd9\u6837\u53ef\u4ee5\u7528$f[i][0/1]$\u8868\u793a\u4e00\u4e2a\u72b6\u6001 \u8003\u8651\u8f6c\u79fb \u5728\u8fd9\u4e00\u884c\u8d70\u5f88\u8fdc\u627e\u5230\u4e00\u4e2a\u5411\u4e0a\u7684\u901a\u9053\u4e0a\u53bb\u7136\u540e\u518d\u5728\u4e0a\u9762\u7684\u4e00\u884c\u5403\u80af\u5b9a\u4e0d\u5982\u627e\u6700\u8fd1\u7684\u4e0a\u53bb\u7136\u540e\u5728\u4e0a\u9762\u7684\u4e00\u884c\u8d70\u66f4\u4f18 \u56e0\u4e3a\u8fd9\u6837\u6709\u4e86\u66f4\u591a\u9009\u62e9\u7684\u4f59\u5730 \u7136\u540e\u5c31\u53ef\u4ee5\u7528\u4e8c\u5206\u67e5\u627e\u5230\u6700\u8fd1\u7684\u901a\u9053 \u8ba1\u7b97$dis$\u540e\u8f6c\u79fb\u5c31\u884c\u4e86 \u6ce8\u610f\u4e00\u884c\u82e5\u6ca1\u6709\u4e1c\u897f \u76f4\u63a5\u52a0$1$ \u4e0a\u53bb\u5c31\u884c\u4e86\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int maxn=2e5+999;\nint sum[maxn],f[maxn][2],b[maxn],l[maxn],r[maxn],n,s[maxn],m,k,q;\nint dis(int pos,int h,int opt){\n\tif(!opt)return abs(pos-r[h])+abs(r[h]-l[h]);\n\telse return abs(pos-l[h])+abs(l[h]-r[h]);\n}\nint find_pos(int pos,int opt){\n\tif(!opt)\n\t{\n\t\tint l=0,r=pos;\n\t\twhile(l<r){\n\t\t\tint mid=(l+r+1)>>1;\n\t\t\tif(sum[pos]-sum[mid-1]>0)l=mid;\n\t\t\telse r=mid-1;\n\t\t}\n\t\treturn l;\n\t}\n\telse\n\t{\n\t\tint l=pos,r=m+1;\n\t\twhile(l<r){\n\t\t\tint mid=l+r>>1;\n\t\t\tif(sum[mid]-sum[pos-1]>0)r=mid;\n\t\t\telse l=mid+1;\n\t\t}\n\t\treturn l;\n\t}\n}\n \nsigned main()\n{\n\tcin>>n>>m>>k>>q;\n\tfor(int i=1;i<=k;i++){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tx=n-x+1;\n\t\tl[x]=l[x]==0?y:min(l[x],y);\n\t\tr[x]=r[x]==0?y:max(r[x],y);\n\t\ts[x]++;\n\t}\n\tfor(int i=1;i<=q;i++){\n\t\tint x;\n\t\tcin>>x;\n\t\tsum[x]=1;\n\t}\n\tfor(int i=1;i<=m;i++)sum[i]=sum[i-1]+sum[i];\n\tmemset(f,0x3f,sizeof(f));\n\tf[n][0]=dis(1,n,0);\n\tf[n][1]=dis(1,n,1);\n\tif(!s[n])f[n][0]=f[n][1]=0,l[n]=r[n]=1;\n\tfor(int i=n-1;i>=1;i--)\n\t{\n\t\tif(!s[i]){f[i][0]=f[i+1][0]+1;l[i]=l[i+1],r[i]=r[i+1],f[i][1]=f[i+1][1]+1;continue;}\n\t\tint pos;\n\t\tpos=find_pos(l[i+1],0);\n\t\tif(pos)f[i][0]=min(f[i][0],f[i+1][0]+l[i+1]-pos+dis(pos,i,0)),f[i][1]=min(f[i][1],f[i+1][0]+l[i+1]-pos+dis(pos,i,1));\n\t\tpos=find_pos(l[i+1],1);\n\t\tif(pos!=m+1)f[i][0]=min(f[i][0],f[i+1][0]+pos-l[i+1]+dis(pos,i,0)),f[i][1]=min(f[i][1],f[i+1][0]+pos-l[i+1]+dis(pos,i,1));\n\t\tpos=find_pos(r[i+1],1);\n\t\tif(pos!=m+1)f[i][0]=min(f[i][0],pos-r[i+1]+f[i+1][1]+dis(pos,i,0)),f[i][1]=min(f[i][1],pos-r[i+1]+f[i+1][1]+dis(pos,i,1));\n\t\tpos=find_pos(r[i+1],0);\n\t\tif(pos!=0)f[i][0]=min(f[i][0],r[i+1]-pos+f[i+1][1]+dis(pos,i,0)),f[i][1]=min(f[i][1],r[i+1]-pos+f[i+1][1]+dis(pos,i,1));\n\t\tf[i][0]++;f[i][1]++;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(s[i]){\n\t\t\tcout<<min(f[i][0],f[i][1]);return 0;\n\t\t}\n}\n```",
        "postTime": 1565093160,
        "uid": 60150,
        "name": "Alioth_",
        "ccfLevel": 8,
        "title": "CF1201D Treasure Hunting"
    },
    {
        "content": "**Update:\u6539\u4e86\u6807\u70b9**\n\n\u4e00\u4e2a $n\\times m$ \u7684\u7f51\u683c\u4e0a\u6709\u8bb8\u591a\u7269\u54c1\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5411\u5de6\u53f3\u8d70\uff0c\u4ec5\u5728\u7ed9\u5b9a\u7684\u51e0\u4e2a\u5217\u53ef\u4ee5\u5411\u4e0a\u8d70\uff0c\u6c42\u53d6\u5b8c\u6240\u6709\u7269\u54c1\u7684\u6700\u77ed\u8def\u7a0b\u3002\n\n\u663e\u7136\u4e0d\u9002\u5408\u6700\u77ed\u8def\uff0c\u539f\u56e0\u5728\u4e8e\u6bcf\u6b21\u5230\u8fbe\u4e00\u884c\u5fc5\u5b9a\u8981\u8d70\u5b8c\u8fd9\u4e00\u884c\u7684\u6240\u6709\u7269\u54c1\uff0c\u800c\u7a7f\u8fc7\u7269\u54c1\u4e0d\u56de\u5934\u4ece\u53e6\u4e00\u7aef\u79bb\u5f00\u663e\u7136\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u5c42\uff0c\u53ea\u9700\u8981\u8003\u8651\u53d6\u5b8c\u8be5\u5c42\u7269\u54c1\u4e4b\u540e\u4ece\u54ea\u91cc\u53bb\u5f80\u4e0b\u4e00\u5c42\uff0c\u800c\u53d6\u5b8c\u7269\u54c1\u65f6\u4e00\u5b9a\u4f4d\u4e8e\u7269\u54c1\u5757\u7684\u4e24\u7aef\uff0c\u4e8e\u662f\u4ece\u6bcf\u5c42\u7269\u54c1\u5757\u4e24\u7aef\u5206\u522b\u5411\u4e0b\u4e00\u5c42\u7269\u54c1\u5757\u7684\u4e24\u7aef\u8f6c\u79fb\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8f6c\u79fb\uff0c\u8003\u8651\u4f9d\u6b21\u5c1d\u8bd5\u79bb\u56db\u4e2a\u7aef\u70b9\u7684\u6700\u8fd1\u7684\u4e24\u4e2a\u901a\u9053\uff0c\u663e\u7136\u6ca1\u6709\u6bd4\u8fd9\u56db\u4e2a\u901a\u9053\u66f4\u4f18\u7684\u65b9\u6cd5(\u5176\u4ed6\u90fd\u662f\u51a4\u6789\u8def)\uff0c\u5177\u4f53\u8ba1\u7b97\u8def\u7a0b\u65f6\u8fd8\u8981\u8003\u8651\u662f\u5426\u987a\u8def\u5b8c\u6210\u4e86\u7269\u54c1\u5757\u7684\u8986\u76d6\uff0c\u4ee5\u53ca\u662f\u5426\u9700\u8981\u8d70\u56de\u5934\u8def\u3002\n\n\u7ec6\u8282\u8f83\u591a\uff0c\u6ce8\u610f\u5206\u7c7b\u8ba8\u8bba\uff1a\u56db\u7aef\u8f6c\u79fb\uff0c\u6bcf\u5bf9\u6709\u56db\u79cd\u901a\u9053\uff0c\u6bcf\u6761\u8def\u6709\u56db\u79cd\u901a\u9053\u4e0e\u4e24\u7aef\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u6bcf\u79cd\u76f8\u5bf9\u4f4d\u7f6e\u6709\u5de6\u53f3\u7aef\u4e0e\u5de6\u53f3\u7aef\u662f\u5426\u8d85\u8fc7\u901a\u9053\u9700\u8981\u8d70\u56de\u5934\u8def\u56db\u79cd\u60c5\u51b5\uff0c\u5171\u6709 $4^4=64$ \u79cd\u60c5\u51b5\uff0c\u4f9d\u6b21\u8ba8\u8bba\u5373\u53ef\u3002\n\n\u6ce8\u610f\u51e0\u4e2a\u5751\u70b9\uff1a\n\n- \u7aef\u70b9\u53ef\u80fd\u5c31\u5728\u901a\u9053\u4e0a,.\u4e0d\u7528\u627e\u5de6\u53f3\u7aef\u76f4\u63a5\u5c1d\u8bd5\u8f6c\u79fb\u5373\u53ef\u3002\n- \u4ece\u67d0\u5c42\u5f80\u4e0a\u53ef\u80fd\u90fd\u6ca1\u6709\u7269\u54c1,\u8981\u628a\u5b83\u4eec\u5220\u6389\u3002\n- \u67d0\u4e24\u5c42\u95f4\u53ef\u80fd\u6709\u591a\u5c42\u6ca1\u6709\u7269\u54c1,\u7528\u6307\u9488\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u6709\u7269\u54c1\u7684\u5c42\u5373\u53ef\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#define int long long\nusing namespace std;\nconst int N = 200005, INF = 0x7ffffff;\nint n, m, k, q;\nbool treasure_in_line[N];\nint left_of_line[N], right_of_line[N], safecolumn[N], closest_left_safe_column[N], closest_right_safe_column[N], len[N];\nint dp[N][2];\nnamespace solve\n{\n    void init()\n    {\n        ios::sync_with_stdio(false);\n        cin >> n >> m >> k >> q;\n        for (int i = 1; i <= n; i++)\n            left_of_line[i] = m + 1, right_of_line[i] = -1;\n        for (int i = 1; i <= k; i++)\n        {\n            int x, y;\n            cin >> x >> y;\n            treasure_in_line[x] = 1;\n            left_of_line[x] = min(left_of_line[x], y);\n            right_of_line[x] = max(right_of_line[x], y);\n        }\n        for (int i = 1; i <= n; i++)\n            len[i] = right_of_line[i] - left_of_line[i];\n        for (int i = 1; i <= q; i++)\n        {\n            int temp;\n            cin >> temp;\n            safecolumn[temp] = 1;\n        }\n        for (int i = 1; i <= m; i++)\n        {\n            if (!safecolumn[i])\n                continue;\n            closest_left_safe_column[i] = i;\n            closest_right_safe_column[i] = i;\n            int templ = i - 1, tempr = i + 1;\n            while (templ >= 1 && !safecolumn[templ])\n            {\n\n                closest_right_safe_column[templ] = i;\n                templ--;\n            }\n            while (tempr <= m && !safecolumn[tempr])\n            {\n\n                closest_left_safe_column[tempr] = i;\n                tempr++;\n            }\n        }\n        int cnt = n;\n        for (cnt; cnt >= 1; cnt--)\n            if (treasure_in_line[cnt])\n                break;\n        if (cnt < n)\n            n = cnt;\n    }\n    int real_distant(int line1, int line2, int column1, int column2, int path, int lr1, int lr2)\n    {\n        int sum;\n        if (path <= column1 && path <= column2)\n        {\n            sum = column1 - path + column2 - path + 1;\n            if (lr2 == 0)\n                sum += 2 * len[line2];\n            else\n            {\n                if (left_of_line[line2] < path)\n                    sum += 2 * (path - left_of_line[line2]);\n            }\n        }\n        if (path <= column1 && path >= column2)\n        {\n            sum = column1 - column2 + 1;\n            if (lr2 == 1)\n                sum += 2 * len[line2];\n            else\n            {\n                if (right_of_line[line2] > path)\n                    sum += 2 * (right_of_line[line2] - path);\n            }\n        }\n        if (path >= column1 && path <= column2)\n        {\n            sum = column2 - column1 + 1;\n            if (lr2 == 0)\n                sum += 2 * len[line2];\n            else\n            {\n                if (left_of_line[line2] < path)\n                    sum += 2 * (path - left_of_line[line2]);\n            }\n        }\n        if (path >= column1 && path >= column2)\n        {\n            sum = path - column1 + path - column2 + 1;\n            if (lr2 == 1)\n                sum += 2 * len[line2];\n            else\n            {\n                if (right_of_line[line2] > path)\n                    sum += 2 * (right_of_line[line2] - path);\n            }\n        }\n        return sum;\n    }\n    int get_dis(int low_line, int high_line, int low_line_column, int high_line_column, int position_low, int position_high)\n    {\n        int ans = INF;\n        if (closest_left_safe_column[low_line_column])\n            ans = min(ans, real_distant(low_line, high_line, low_line_column, high_line_column, closest_left_safe_column[low_line_column], position_low, position_high));\n        if (closest_right_safe_column[low_line_column])\n            ans = min(ans, real_distant(low_line, high_line, low_line_column, high_line_column, closest_right_safe_column[low_line_column], position_low, position_high));\n        if (closest_left_safe_column[high_line_column])\n            ans = min(ans, real_distant(low_line, high_line, low_line_column, high_line_column, closest_left_safe_column[high_line_column], position_low, position_high));\n        if (closest_right_safe_column[high_line_column])\n            ans = min(ans, real_distant(low_line, high_line, low_line_column, high_line_column, closest_right_safe_column[high_line_column], position_low, position_high));\n        return ans;\n    }\n}\nusing namespace solve;\nint head=1;\nsigned main()\n{\n    init();\n    if (!treasure_in_line[1])\n    {\n        dp[1][0] = 0, dp[1][1] = 0;\n        left_of_line[1] = 1, right_of_line[1] = 1;\n        len[1] = 0;\n    }\n    else\n        dp[1][0] = left_of_line[1] - 1 + 2 * len[1], dp[1][1] = right_of_line[1] - 1;\n    for (int i = 2; i <= n; i++)\n        if (treasure_in_line[i])\n        {\n            dp[i][0] = i - head - 1 + min(dp[head][0] + get_dis(head, i, left_of_line[head], left_of_line[i], 0, 0), dp[head][1] + get_dis(head, i, right_of_line[head], left_of_line[i], 1, 0));\n            dp[i][1] = i - head - 1 + min(dp[head][0] + get_dis(head, i, left_of_line[head], right_of_line[i], 0, 1), dp[head][1] + get_dis(head, i, right_of_line[head], right_of_line[i], 1, 1));\n            head = i;\n        }\n    cout << min(dp[n][0], dp[n][1]);\n}\n```\n\n",
        "postTime": 1635989860,
        "uid": 34940,
        "name": "Minuit",
        "ccfLevel": 0,
        "title": "CF1201D Treasure Hunting \u9898\u89e3"
    }
]