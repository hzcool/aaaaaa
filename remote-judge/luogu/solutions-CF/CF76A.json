[
    {
        "content": "# CF76A Gift\n\n## \u9898\u610f\n[\u6211\u8ba4\u4e3a\u6700\u597d\u7684\u9898\u610fPortal](https://www.luogu.com.cn/discuss/show/300140)\u611f\u8c22 @HTensor \u7684\u66f4\u597d\u7684\u7ffb\u8bd1\uff0c\u5426\u5219\u6211\u770b\u4e0d\u61c2\u6b63\u786e\u7684\u9898\u610f\u3002\n\n## \u601d\u8def\n\n### \u58f9\uff1a\u521d\u59cb\u7684\u66b4\u529b\u601d\u8def\n\n\u6309\u7167\u6bcf\u6761\u8fb9\u7684 Ag \u7684\u9700\u6c42\u6570\u91cf\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u679a\u4e3e\u6700\u5927 Au \u6570\u76ee\u7684\u5927\u5c0f mg\uff08max gold\uff09\uff0c\u7528 Au \u6570\u76ee\u5c0f\u4e8e\u7b49\u4e8e mg \u7684\u8fb9\u8fdb\u884c Kruskal \u7136\u540e\u6c42\u6700\u5c0f\u503c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\max(Au) \\times M)$\uff0c \u8fd9\u91cc\u7684 Au \u4ee3\u6307 Au \u7684\u6570\u76ee\u3002\n\n### \u8d30\uff1a\u7a0d\u5fae\u4f18\u5316\u4e86\u4e00\u4e0b\n\n\u518d\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58 Au \u7684\u6570\u76ee\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u679a\u4e3e\u90a3\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u5927\u5c0f\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(M^2)$\u3002\n\n### \u53c1\uff1a\u6700\u91cd\u8981\u7684\u4f18\u5316\n\n\u5148\u6765\u601d\u8003\u8fd9\u4e48\u4e00\u4e2a\u95ee\u9898\u3002\n\n\u518d mg \u5c0f\u7684\u65f6\u5019\uff0c\u6ee1\u8db3 Au \u7684\u6570\u76ee\u7684\u8fb9\u5c1a\u4e14\u6ca1\u88ab\u9009\u5165\u751f\u6210\u6811\u4e2d\uff0c\u90a3\u4e48\u5f53\u5faa\u73af\u5230\u540e\u9762\u65f6 mg \u53d8\u5f97\u5f88\u5927\u8fd9\u6761\u8fb9\u662f\u5426\u4f1a\u88ab\u9009\u5165\u5230\u751f\u6210\u6811\u4e2d\u53bb\uff1f\n\n\u663e\u7136\u4e0d\u4f1a\uff0c\u8303\u56f4\u5c0f\u65f6\u5c1a\u4e14\u4e0d\u884c\uff0c\u8303\u56f4\u6269\u5927\u4e4b\u540e\u54ea\u91cc\u8fd8\u4f1a\u6709\u8fd9\u6761\u8fb9\u7684\u4efd\u5462\uff1f\n\n\u6240\u4ee5\uff0c**\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u628a\u90a3\u4e9b\u6ca1\u7528\u7684\u8fb9\u5728\u5faa\u73af\u4e4b\u540e\u5220\u4e86\u4ece\u800c\u5f97\u5230\u66f4\u597d\u7684\u65f6\u95f4\u590d\u6742\u5ea6**\u3002\n\n\u6211\u9009\u7528\u7684\u662f\u7528 STL \u4e2d\u7684 [multiset](https://zhuanlan.zhihu.com/p/267056428) \u4e0d\u53bb\u91cd\u7684\u96c6\u5408\uff0c\u597d\u5904\u662f\u6211\u53ef\u4ee5\u904d\u5386\u6bcf\u6761\u8fb9\uff0c\u8fd8\u53ef\u4ee5\u4ee5 log \u7ea7\u522b\u7684\u590d\u6742\u5ea6\u5220\u9664\u8fb9\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(M + M \\times N \\times log_2N)$,\u53ef\u4ee5\u8fc7\u3002\n\n\n### \u8086\uff1a\u4e00\u4e9b\u53ef\u4ee5\u4f46\u6ca1\u5fc5\u8981\u7684\u4f18\u5316\n\n- \u4f18\u5316\u4e00 \uff1a Kruskal \u4e2d\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u63d0\u524d\u7ed3\u675f\u5faa\u73af\u7684\u4f18\u5316\u3002\n- \u4f18\u5316\u4e8c \uff1a \u5728\u6838\u5fc3\u5faa\u73af\u7684\u524d\u9762\u7528**\u4e8c\u5206**\u5b9a\u4f4d\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u5f62\u6210\u751f\u6210\u6811\u7684\u6700\u5c0f\u7684 Au \u7684\u6570\u76ee\uff0c\u4e4b\u540e\u53ef\u4ee5\u4ece\u5b83\u5f00\u59cb\u8dd1\u3002\n- \u4f18\u5316\u4e09 \uff1a \u53ef\u4ee5\u5728\u6392\u5e8f\u540e\u628a multiset \u6539\u6210\u652f\u6301\u5220\u9664\u7684**\u53cc\u5411\u94fe\u8868**\uff0c\u53ef\u4ee5\u628a\u4e0a\u9762\u90a3\u4e2a\u590d\u6742\u5ea6\u4e2d\u7684 log \u53bb\u6389\uff08\u8fd9\u4e2a\u6211\u6ca1\u5199\uff09\u3002\n\n## ~~\u4f60\u4eec\u6700\u60f3\u8981\u7684~~\u4ee3\u7801\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 205;\nconst int maxm = 50005;\n\nstruct reader {\n\ttemplate <typename Type>\n\treader & operator >> (Type & ret) {\n\t\tint f = 1; ret = 0; char ch = getchar ();\n\t\tfor (;!isdigit (ch); ch = getchar ()) if (ch == '-') f=-f;\n\t\tfor (; isdigit (ch); ch = getchar ()) ret = (ret << 1) + (ret << 3) + (ch - '0');\n\t\tret *= f; return *this;\n\t}\n} fin; // \u5feb\u8bfb\uff0c\u53ef\u4ee5\u50cfcin\u4e00\u6837\u8bfb\u6574\u578b\u6570\u636e\uff0c\u5176\u4ed6\u4e0d\u884c\n\nint N, M, G, S;\nstruct Edge {\n\tint x, y, g, s;\n\tbool operator < (Edge X) const {\n\t\treturn s < X.s;\n\t}\n} P; // \u8fb9\u7684\u7ed3\u6784\u4f53\nmultiset < Edge > E; // \u4e0a\u6587\u63d0\u5230\u7684\u96c6\u5408\nint gg[maxm], L, R, mid, res; // \u8fd9\u91cc\u7684gg\u6570\u7ec4\u662f\u4e0a\u6587\u8bf4\u7684\u628a Au \u5355\u72ec\u51fa\u6765\u6392\u5e8f\nint fa[maxn];\nlong long ans, now;\n\nint getfa (int id) {return id == fa[id] ? id : fa[id] = getfa (fa[id]);}\n\nbool check (int maxg) {\n\tint cnt = 1;\n\tfor (int i = 1; i <= N; i++) fa[i] = i;\n\tfor (multiset < Edge > :: iterator it = E.begin (); it != E.end (); it++) {\n\t\tP = *it; int fx = getfa (P.x), fy = getfa (P.y);\n\t\tif (fx == fy || P.g > maxg) continue; fa[fx] = fy; cnt++;\n\t}\n\t// \u4e8c\u5206check\uff0cmultiset\u770b\u4e0d\u61c2\u7684\u53bb\u4e0a\u6587\u4e2d\u7684\u94fe\u63a5\n\treturn cnt == N;\n}\n\nint main () {\n\tfin >> N >> M >> G >> S;\n\tfor (int i = 1; i <= M; i++)\n\tfin >> P.x >> P.y >> P.g >> P.s, gg[i] = P.g, E.insert (P);\n\tsort (gg + 1, gg + 1 + M); L = 1; R = M; res = -1;\n\twhile (L <= R) { // \u4f18\u5316\u4e8c\uff0c\u53ef\u4ee5\u53bb\u6389\uff0c\u4e0d\u8fc7\u4e0b\u9762\u7684\u7279\u5224\u8981\u6ce8\u610f\n\t\tmid = L + R >> 1;\n\t\tcheck (gg[mid]) ? R = mid - 1, res = mid : L = mid + 1;\n\t}\tans = 9223372036854775800; // long long \u7c7b\u578b\u4e0a\u96509223372036854775807\n\tif (res == -1) {printf (\"-1\"); return 0;}\n\t// \u5982\u679c\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u53ef\u4ee5\u5f62\u6210\u751f\u6210\u6811\uff0c\u90a3\u4e48\u8f93\u51fa -1\n\tfor (int mg = res; mg <= M; mg++) {\n\t\t// \u5237Kruskal\n\t\tint cnt = 1; now = 0;\n\t\tfor (int i = 1; i <= N; i++) fa[i] = i;\n\t\tfor (multiset < Edge > :: iterator it = E.begin (); it != E.end (); it++) {\n\t\t\tP = *it; int fx = getfa (P.x), fy = getfa (P.y);\n\t\t\tif (P.g > gg[mg]) continue; if (fx == fy) {\n\t\t\t\t// \u5982\u679c\u6ee1\u8db3\u4e0a\u6587\u8bf4\u7684\u4f18\u5316\u7684\u6761\u4ef6\u90a3\u5c31\u628a\u8fd9\u4e2a\u70b9\u53bb\u6389\n\t\t\t\tmultiset < Edge > :: iterator registit = it;\n\t\t\t\tregistit--; E.erase (it); it = registit; continue;\n\t\t\t}\tfa[fx] = fy; now = P.s; cnt++;\n\t\t\tif (cnt == N) break; // \u4f18\u5316\u4e00\uff0c\u8bb0\u5f55\u5f53\u524d\u6709\u591a\u5c11\u4e2a\u8282\u70b9\u5728\u751f\u6210\u6811\u4e2d\n\t\t}\n\t\tans = min (ans, now * S + (long long) gg[mg] * G);\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n```\n\n## \u5173\u4e8e\u5176\u4ed6\u7684\u4e00\u4e9b\u89e3\u91ca\n\n### \u4e00\uff1a\u5173\u4e8e\u5220\u8fb9\u65f6\u7684\u96c6\u5408\u8fed\u4ee3\u5668\u66f4\u6362\n\n\u6211\u662f\u5148\u628a\u5f53\u524d\u8fed\u4ee3\u5668\u7684\u524d\u9a71\u8bb0\u5f55\u4e0b\u6765\u3002\n\n```cpp\nmultiset < Edge > :: iterator registit = it;\nregistit--;\n```\n\n\u5728\u96c6\u5408\u5220\u9664\u8fed\u4ee3\u5668 it \u4e4b\u540e\uff0cit \u5e94\u8be5\u5df2\u7ecf\u4e0d\u5728\u96c6\u5408 E \u4e2d\u4e86\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5++\uff0c\u800c\u662f\u7c7b\u4f3c\u4e8e\u94fe\u8868\u4e00\u6837\u8ba9\u5b83\u53d8\u6210\u5b83\u7684\u524d\u9a71\uff0c\u4e4b\u540e\u518d\u5728\u5faa\u73af\u4e2d\u81ea\u52a8++\u3002\n\n```cpp\nE.erase (it);\nit = registit; continue;\n```\n\u7136\u540e it \u5c31\u4f1a\u6b63\u5e38\u7684\u5411\u4e0b\u4e00\u4f4d\u4f20\u9012\u3002\n\n### \u4e8c\uff1a\u5982\u679c\u94fe\u63a5\u5931\u6548\u7b49\n\n\u5982\u679c\u94fe\u63a5\u5931\u6548\u7b49\u6216\u8005\u6709\u4ec0\u4e48\u6ca1\u7406\u89e3\u7684\u79c1\u4fe1\u6211\uff0c\u6211\u4f1a\u8fdb\u884c\u8865\u5145\u8bf4\u660e",
        "postTime": 1615983400,
        "uid": 189351,
        "name": "wheneveright",
        "ccfLevel": 7,
        "title": "CF76A"
    },
    {
        "content": "> \u4e00\u5f20\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u5c5e\u6027  $(g_i, s_i)$ \u3002\u7ed9\u5b9a  $G, S$\uff0c\u6c42\u4e00\u68f5\u56fe\u7684\u751f\u6210\u6811  $T$\uff0c\u4f7f\u5f97  $G \\times \\max(g_i) + S \\times \\max (s_i)$ \u6700\u5c0f  $(i\\in T)$\u3002\n\n\u5148\u5bf9\u6240\u6709\u8fb9\u6309\u7167 $g_i$ \u6392\u5e8f\u3002\u8003\u8651\u679a\u4e3e $\\max(g_i)$\uff0c\u62bd\u51fa\u6240\u6709 $g_i \\leq \\max(g_i)$ \u7684\u8fb9\u5f53\u505a\u4e00\u4e2a\u65b0\u56fe\uff0c\u7136\u540e\u5728\u65b0\u56fe\u4e0a\u7ef4\u62a4 $s_i$ \u7684\u6700\u5c0f\u751f\u6210\u6811\u3002 \u679a\u4e3e $\\max(g_i)$ \u7684\u8fc7\u7a0b\u76f8\u5f53\u4e8e\u4e0d\u65ad\u5f80\u8fd9\u4e2a\u65b0\u56fe\u4e2d\u52a0\u8fb9\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u652f\u6301\u5411\u56fe\u4e2d\u52a0\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u8bbe\u5f53\u524d\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u96c6\u4e3a $T$\u3002\u663e\u7136\u5982\u679c\u4e00\u6761\u8fb9\u79bb\u5f00\u4e86 $T$\uff0c\u5c31\u4e0d\u53ef\u80fd\u518d\u56de\u5230 $T$ \u4e2d\u3002\u56e0\u6b64\u53ea\u6709\u5f53\u524d $T$ \u4e2d\u7684\u8fb9\u548c\u65b0\u52a0\u5165\u7684\u90a3\u6761\u8fb9\u662f\u6709\u7528\u7684\uff0c\u800c $T$ \u4e2d\u7684\u8fb9\u6570\u59cb\u7ec8\u662f $O(n)$ \u7684\u3002\u4e8e\u662f\u6211\u4eec\u66b4\u529b\u5730\u6bcf\u52a0\u4e00\u6b21\u8fb9\uff0c\u5c31\u505a\u4e00\u6b21 $\\mathrm{kruskal}$\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nm\\log n)$\u3002\n\n\u7136\u800c\u5b9e\u9645\u4e0a\u6bcf\u6b21 $\\mathrm{kruskal}$ \u540e $T$ \u90fd\u662f\u6709\u5e8f\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u63d2\u5165\u4e00\u6761\u8fb9\u7684\u65f6\u5019\u76f4\u63a5\u66b4\u529b\u63d2\u5165 $T$\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(nm)$\u3002\n\n```cpp\n#include <map>\n#include <ctime>\n#include <stack>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define int long long\nusing namespace std;\n \ninline int read() {\n\tint x = 0, w = 1;char ch = getchar();\n\twhile (ch > '9' || ch < '0') { if (ch == '-')w = -1;ch = getchar(); }\n\twhile (ch >= '0' && ch <= '9')x = x * 10 + ch - '0', ch = getchar();\n\treturn x * w;\n}\ninline void write(int x) {\n    if (x < 0) putchar('-'), x = -x;\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + '0');\n}\n \nconst int maxn = 1e5 + 5;\nconst int mod = 998244353;\nconst int inf = 2e18;\n \ninline int min(int x, int y) { return x < y ? x : y; }\ninline int max(int x, int y) { return x > y ? x : y; }\n\n\nstruct node {\n    int u, v, g, s;\n} edge[maxn], a[maxn];\nint n, m, S, G, tot, ans = inf;\n\ninline bool cmp(const node &x, const node &y) {\n    return x.g < y.g;\n}\n\nstruct DSU {\n    int fa[maxn];\n    inline void init() {\n        for (int i = 1;i <= n;i++) fa[i] = i;\n    }\n    inline int find(int x) {\n        return x == fa[x] ? x : fa[x] = find(fa[x]);\n    }\n    inline void uni(int x, int y) {\n        int fx = find(x), fy = find(y);\n        if (fx != fy) fa[fx] = fy;\n    }\n    inline bool same(int x, int y) {\n        return find(x) == find(y);\n    }\n} s;\n\nsigned main(void) { \n    n = read(), m = read(), S = read(), G = read();\n    for (int i = 1;i <= m;i++) edge[i].u = read(), edge[i].v = read(), edge[i].s = read(), edge[i].g = read();\n    sort(edge + 1, edge + m + 1, cmp);\n    for (int i = 1;i <= m;i++) {\n        int pos = ++tot;\n        while (pos >= 2 && a[pos - 1].s > edge[i].s) {\n            a[pos] = a[pos - 1]; pos--;\n        }\n        a[pos] = edge[i], s.init();\n        int cnt = 0, maxS = 0;\n        for (int i = 1;i <= tot;i++) {\n            int u = a[i].u, v = a[i].v;\n            if (!s.same(u, v)) {\n                s.uni(u, v), a[++cnt] = a[i];\n                maxS = max(maxS, a[i].s);\n            }\n        }\n        if (cnt == n - 1) ans = min(ans, maxS * S + edge[i].g * G);\n        tot = cnt;\n    }\n    printf(\"%lld\\n\", (ans == inf) ? -1 : ans);\n    return 0; \n}\n```\n",
        "postTime": 1619840031,
        "uid": 246019,
        "name": "_came11ia_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF76A\u3010Gift\u3011"
    },
    {
        "content": "# \u601d\u8def\uff1a\n\n\u63d0\u4f9b\u4e00\u79cd\u9898\u89e3\u533a\u6ca1\u6709\u7684 ~~\u9ebb\u70e6\u7684\u8981\u6b7b~~ \u7684 **LCT** \u505a\u6cd5\u3002\n\n\u8f6c\u6362\u9898\u610f\uff0c\u6c42\u6240\u6709\u751f\u6210\u6811 $P$ \u7684\n\n$$\nMin(Max_{i\\in P}\\ g_i\\times G+Max_{i\\in P}\\ s_i\\times S)\n$$\n\n\u53d1\u73b0\u548c [\u9b54\u6cd5\u68ee\u6797](https://www.luogu.com.cn/problem/P2387) \u5f88\u50cf\u3002\n\n\u8003\u8651\u7c7b\u4f3c\u7684\u7ef4\u62a4\u65b9\u5f0f\u3002\n\n\u5316\u8fb9\u4e3a\u70b9\uff0c\u5148\u5c06\u8fb9\u6309 $g_i$ \u6392\u5e8f\uff0c\u7136\u540e\u9010\u6761\u52a0\u5165\u8fb9\uff0c\u7ef4\u62a4 $s_i$ \u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u5728\u56fe\u8fde\u901a\u540e\u6bcf\u6b21\u66f4\u65b0\u7b54\u6848\u3002\n\n\u8003\u8651\u5982\u4f55\u7ef4\u62a4 $s_i$ \u7684\u6700\u5c0f\u751f\u6210\u6811\uff1a\n\n\u52a0\u5165\u4e00\u6761\u8fb9\uff1a\n- \u5982\u679c\u8fb9\u7684\u4e24\u7aef\u70b9\u4e0d\u8fde\u901a\uff0c\u76f4\u63a5\u52a0\u5165\u3002\n- \u5982\u679c\u8fb9\u7684\u4e24\u7aef\u70b9\u8fde\u901a\uff0c\u52a0\u5165\u8fd9\u6761\u8fb9\u540e\u52bf\u5fc5\u6210\u73af\uff0c\u627e\u5230\u73af\u4e0a $s_i$ \u6700\u5927\u7684\u8fb9\uff0c\u5220\u9664\u5373\u53ef\u3002\n\n\u4e8e\u662f **LCT** \u7ef4\u62a4\u94fe\u7684 $Max\\ s_i$ \u5373\u53ef\u3002\n\n\u8003\u8651\u5982\u4f55\u66f4\u65b0\u7b54\u6848\uff1a\n\n\u5373\u8981\u7ef4\u62a4\u6839\u8282\u70b9\u7684\u6574\u68f5\u5b50\u6811\u7684 $Max\\ g_i$ \u548c $Max\\ s_i$\u3002\n\n\u7528 **LCT** \u7ef4\u62a4\u5b50\u6811\u6700\u503c\u7684\u5e38\u89c4\u624b\u6bb5\uff0c\u5728\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a **multiset** \u7ef4\u62a4\u865a\u5b50\u6811\u7684\u6700\u503c\uff0c\u5728 **access** \u548c **link** \u65f6\u66f4\u65b0\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(mlog^2(n+m))$ ~~\uff08\u5e38\u6570\u6781\u5927\uff09~~\u3002\n\n~~\u4e8e\u662f\u53ef\u4ee5\u52a0\u5f3a\u5230~~ $n,m\\leq 10^5$ \u3002\n\n\u6ce8\u610f\u6700\u5927\u7684\u7b54\u6848\u53ef\u80fd\u5230 $2\\times 10^{18}$\uff0c\u4e8e\u662f **INF** \u8981\u5f00\u5927\u3002\n\nupdate:\n\u7ecf\u8fc7\u5946\u4f6c @[FSYolanda](https://www.luogu.com.cn/user/73811) \u7684\u63d0\u9192\uff0c\u66f4\u65b0\u7b54\u6848\u53ea\u7528\u7ef4\u62a4\u8fb9\u7684\u96c6\u5408\uff0c\u4e8e\u662f\u7528\u4e00\u4e2a **set** \u7ef4\u62a4\u53ef\u4ee5\u505a\u5230 $O(mlogn)$ ~~(\u8dd1\u5f97\u633a\u5feb)~~\u3002\n\n~~\u4e8e\u662f\u53ef\u4ee5\u52a0\u5f3a\u5230~~ $n,m\\leq 10^6$ \u4e86\u3002\n\n\n# code\uff1a\n\n$O(mlog^2(n+m))$\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define re register\n#define LL long long\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\n#define fir first\n#define sec second\n#define pb push_back\n#define mp make_pair\n\n#define int long long\n\nnamespace IO {\nchar buf_[1 << 21], *p1_ = buf_, *p2_ = buf_;\n#define ch()                                                                 \\\n  (p1_ == p2_ &&                                                             \\\n           (p2_ = (p1_ = buf_) + fread(buf_, 1, 1 << 21, stdin), p1_ == p2_) \\\n       ? EOF                                                                 \\\n       : *p1_++)\ninline int in() {\n  int s = 0, f = 1;\n  char x = ch();\n  for (; x < '0' || x > '9'; x = ch())\n    if (x == '-') f = -1;\n  for (; x >= '0' && x <= '9'; x = ch()) s = (s * 10) + (x & 15);\n  return f == 1 ? s : -s;\n}\nchar _buf[1 << 21];\nint _pos = -1;\ninline void flush() { fwrite(_buf, 1, _pos + 1, stdout), _pos = -1; }\ninline void pc(char x) {\n  if (_pos == (1 << 21) - 1) flush();\n  _buf[++_pos] = x;\n}\ninline void out(int x) {\n  char k[30];\n  int pos = 0;\n  if (!x) return pc('0');\n  if (x < 0) pc('-'), x = -x;\n  while (x) k[++pos] = (x % 10) | 48, x /= 10;\n  for (re int i = pos; i; i--) pc(k[i]);\n}\ninline void out(string x) {\n  int len = x.size();\n  for (re int i = 0; i < len; ++i) pc(x[i]);\n}\n}  // namespace IO\nusing namespace IO;\n\nconst int A = 5e5 + 5;\nconst int INF = 3e18;\nint n, m;\nint G, S;\nint ans = INF;\n\nstruct Road {\n  int x, y, g, s;\n  inline friend bool operator<(Road u, Road v) { return u.g < v.g; }\n} p[A];\n\nstruct LCT {\n  int ch[A][2], f[A], rev[A], mxg[A], mxs[A], xg[A], xs[A];\n  struct MG {\n    int x;\n    MG(int _x = 0) { x = _x; }\n    inline friend bool operator<(MG u, MG v) { return p[u.x].g > p[v.x].g; }\n  };\n  struct MS {\n    int x;\n    MS(int _x = 0) { x = _x; }\n    inline friend bool operator<(MS u, MS v) { return p[u.x].s > p[v.x].s; }\n  };\n  multiset<MG> mg[A];\n  multiset<MS> ms[A];\n\n  inline int isroot(int x) { return ch[f[x]][0] != x && ch[f[x]][1] != x; }\n\n  inline int Maxg(int x, int y) { return p[x].g > p[y].g ? x : y; }\n  inline int Maxs(int x, int y) { return p[x].s > p[y].s ? x : y; }\n\n  inline void pushup(int x) {\n    mxg[x] =\n        Maxg(Maxg(x, (*mg[x].begin()).x), Maxg(mxg[ch[x][0]], mxg[ch[x][1]]));\n    mxs[x] =\n        Maxs(Maxs(x, (*ms[x].begin()).x), Maxs(mxs[ch[x][0]], mxs[ch[x][1]]));\n    xg[x] = Maxg(x, Maxg(xg[ch[x][0]], xg[ch[x][1]]));\n    xs[x] = Maxs(x, Maxs(xs[ch[x][0]], xs[ch[x][1]]));\n  }\n\n  inline void reverse(int x) {\n    if (x) swap(ch[x][0], ch[x][1]), rev[x] ^= 1;\n  }\n\n  inline void pushdown(int x) {\n    if (rev[x]) reverse(ch[x][0]), reverse(ch[x][1]), rev[x] ^= 1;\n  }\n\n  inline void rotate(int x) {\n    int y = f[x], z = f[y];\n    int k = (ch[y][1] == x);\n    if (!isroot(y)) ch[z][(ch[z][1] == y)] = x;\n    f[x] = z, ch[y][k] = ch[x][k ^ 1];\n    if (ch[x][k ^ 1]) f[ch[x][k ^ 1]] = y;\n    ch[x][k ^ 1] = y, f[y] = x;\n    pushup(y);\n    return;\n  }\n\n  int st[A], top;\n  inline void pushpath(int x) {\n    top = 0;\n    st[++top] = x;\n    for (int i = x; !isroot(i); i = f[i]) st[++top] = f[i];\n    for (int i = top; i; i--) pushdown(st[i]);\n    return;\n  }\n\n  inline void splay(int x) {\n    pushpath(x);\n    while (!isroot(x)) {\n      int y = f[x], z = f[y];\n      if (!isroot(y)) {\n        if ((ch[y][1] == x) == (ch[z][1] == y))\n          rotate(y);\n        else\n          rotate(x);\n      }\n      rotate(x);\n    }\n    pushup(x);\n    return;\n  }\n\n  inline void access(int x) {\n    for (int y = 0; x; y = x, x = f[x]) {\n      splay(x);\n      if (y) {\n        mg[x].erase(mg[x].find(MG(mxg[y])));\n        ms[x].erase(ms[x].find(MS(mxs[y])));\n      }\n      if (ch[x][1]) {\n        mg[x].insert(MG(mxg[ch[x][1]]));\n        ms[x].insert(MS(mxs[ch[x][1]]));\n      }\n      ch[x][1] = y;\n      pushup(x);\n    }\n  }\n\n  inline void makeroot(int x) { access(x), splay(x), reverse(x); }\n\n  inline int findroot(int x) {\n    access(x), splay(x);\n    while (ch[x][0]) pushdown(x), x = ch[x][0];\n    return x;\n  }\n\n  inline void split(int x, int y) {\n    makeroot(x);\n    access(y);\n    splay(y);\n  }\n\n  inline void link(int x, int y) {\n    makeroot(x);\n    if (findroot(y) != x)\n      f[x] = y, mg[y].insert(MG(mxg[x])), ms[y].insert(MS(mxs[x]));\n    pushup(y);\n  }\n\n  inline void cut(int x, int y) {\n    makeroot(x);\n    if (findroot(y) == x && f[x] == y && ch[y][0] == x) f[x] = 0, ch[y][0] = 0;\n    pushup(y);\n  }\n\n  struct DSU {\n    int f[A], num[A];\n    inline int find(int x) { return f[x] == x ? f[x] : f[x] = find(f[x]); }\n    inline void merge(int x, int y) {\n      if (find(x) != find(y))\n        num[find(y)] += num[find(x)], f[find(x)] = find(y);\n    }\n  } D;\n\n  inline void work(int now) {\n    if (D.find(p[now].x) != D.find(p[now].y)) {\n      link(p[now].x + m, now);\n      link(p[now].y + m, now);\n      D.merge(p[now].x, p[now].y);\n    } else {\n      split(p[now].x + m, p[now].y + m);\n      if (p[xs[p[now].y + m]].s > p[now].s) {\n        int t = xs[p[now].y + m];\n        cut(p[t].x + m, t), cut(p[t].y + m, t);\n        link(p[now].x + m, now), link(p[now].y + m, now);\n      }\n    }\n    if (D.num[D.find(1)] == n) {\n      makeroot(m + 1);\n      ans = min(ans, p[mxg[m + 1]].g * G + p[mxs[m + 1]].s * S);\n    }\n    return;\n  }\n\n} T;\n\nsigned main() {\n  n = in(), m = in(), G = in(), S = in();\n  for (int i = 1; i <= m; i++)\n    p[i].x = in(), p[i].y = in(), p[i].g = in(), p[i].s = in();\n  sort(p + 1, p + 1 + m);\n  for (int i = 1; i <= n; i++) T.D.f[i] = i, T.D.num[i] = 1;\n  for (int i = 1; i <= m; i++) T.mxg[i] = T.mxs[i] = i;\n  for (int i = 1; i <= m; i++) T.work(i);\n  out(ans == INF ? -1 : ans), pc('\\n');\n  flush();\n  return 0;\n}\n```\n\n# code:\n\n$O(mlogn)$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define re register\n#define LL long long\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\n#define fir first\n#define sec second\n#define pb push_back\n#define mp make_pair\n\n#define int long long\n\nnamespace IO {\nchar buf_[1 << 21], *p1_ = buf_, *p2_ = buf_;\n#define ch()                                                                 \\\n  (p1_ == p2_ &&                                                             \\\n           (p2_ = (p1_ = buf_) + fread(buf_, 1, 1 << 21, stdin), p1_ == p2_) \\\n       ? EOF                                                                 \\\n       : *p1_++)\ninline int in() {\n  int s = 0, f = 1;\n  char x = ch();\n  for (; x < '0' || x > '9'; x = ch())\n    if (x == '-') f = -1;\n  for (; x >= '0' && x <= '9'; x = ch()) s = (s * 10) + (x & 15);\n  return f == 1 ? s : -s;\n}\nchar _buf[1 << 21];\nint _pos = -1;\ninline void flush() { fwrite(_buf, 1, _pos + 1, stdout), _pos = -1; }\ninline void pc(char x) {\n  if (_pos == (1 << 21) - 1) flush();\n  _buf[++_pos] = x;\n}\ninline void out(int x) {\n  char k[30];\n  int pos = 0;\n  if (!x) return pc('0');\n  if (x < 0) pc('-'), x = -x;\n  while (x) k[++pos] = (x % 10) | 48, x /= 10;\n  for (re int i = pos; i; i--) pc(k[i]);\n}\ninline void out(string x) {\n  int len = x.size();\n  for (re int i = 0; i < len; ++i) pc(x[i]);\n}\n}  // namespace IO\nusing namespace IO;\n\nconst int A = 5e5 + 5;\nconst int INF = 3e18;\nint n, m;\nint G, S;\nint ans = INF;\n\nstruct Road {\n  int x, y, g, s;\n  inline friend bool operator<(Road u, Road v) { return u.g < v.g; }\n} p[A];\n\nstruct LCT {\n  int ch[A][2], f[A], rev[A], xg[A], xs[A];\n  struct MG {\n    int x;\n    MG(int _x = 0) { x = _x; }\n    inline friend bool operator<(MG u, MG v) { return p[u.x].g > p[v.x].g; }\n  };\n  struct MS {\n    int x;\n    MS(int _x = 0) { x = _x; }\n    inline friend bool operator<(MS u, MS v) { return p[u.x].s > p[v.x].s; }\n  };\n  multiset<MG> mg;\n  multiset<MS> ms;\n\n  inline int isroot(int x) { return ch[f[x]][0] != x && ch[f[x]][1] != x; }\n\n  inline int Maxg(int x, int y) { return p[x].g > p[y].g ? x : y; }\n  inline int Maxs(int x, int y) { return p[x].s > p[y].s ? x : y; }\n\n  inline void pushup(int x) {\n    xg[x] = Maxg(x, Maxg(xg[ch[x][0]], xg[ch[x][1]]));\n    xs[x] = Maxs(x, Maxs(xs[ch[x][0]], xs[ch[x][1]]));\n  }\n\n  inline void reverse(int x) {\n    if (x) swap(ch[x][0], ch[x][1]), rev[x] ^= 1;\n  }\n\n  inline void pushdown(int x) {\n    if (rev[x]) reverse(ch[x][0]), reverse(ch[x][1]), rev[x] ^= 1;\n  }\n\n  inline void rotate(int x) {\n    int y = f[x], z = f[y];\n    int k = (ch[y][1] == x);\n    if (!isroot(y)) ch[z][(ch[z][1] == y)] = x;\n    f[x] = z, ch[y][k] = ch[x][k ^ 1];\n    if (ch[x][k ^ 1]) f[ch[x][k ^ 1]] = y;\n    ch[x][k ^ 1] = y, f[y] = x;\n    pushup(y);\n    return;\n  }\n\n  int st[A], top;\n  inline void pushpath(int x) {\n    top = 0;\n    st[++top] = x;\n    for (int i = x; !isroot(i); i = f[i]) st[++top] = f[i];\n    for (int i = top; i; i--) pushdown(st[i]);\n    return;\n  }\n\n  inline void splay(int x) {\n    pushpath(x);\n    while (!isroot(x)) {\n      int y = f[x], z = f[y];\n      if (!isroot(y)) {\n        if ((ch[y][1] == x) == (ch[z][1] == y))\n          rotate(y);\n        else\n          rotate(x);\n      }\n      rotate(x);\n    }\n    pushup(x);\n    return;\n  }\n\n  inline void access(int x) {\n    for (int y = 0; x; y = x, x = f[x]) splay(x), ch[x][1] = y, pushup(x);\n  }\n\n  inline void makeroot(int x) { access(x), splay(x), reverse(x); }\n\n  inline int findroot(int x) {\n    access(x), splay(x);\n    while (ch[x][0]) pushdown(x), x = ch[x][0];\n    return x;\n  }\n\n  inline void split(int x, int y) {\n    makeroot(x);\n    access(y);\n    splay(y);\n  }\n\n  inline void link(int x, int y) {\n    makeroot(x);\n    if (findroot(y) != x) f[x] = y;\n  }\n\n  inline void cut(int x, int y) {\n    makeroot(x);\n    if (findroot(y) == x && f[x] == y && ch[y][0] == x) f[x] = 0, ch[y][0] = 0;\n    pushup(y);\n  }\n\n  struct DSU {\n    int f[A], num[A];\n    inline int find(int x) { return f[x] == x ? f[x] : f[x] = find(f[x]); }\n    inline void merge(int x, int y) {\n      if (find(x) != find(y))\n        num[find(y)] += num[find(x)], f[find(x)] = find(y);\n    }\n  } D;\n\n  inline void work(int now) {\n    if (D.find(p[now].x) != D.find(p[now].y)) {\n      link(p[now].x + m, now);\n      link(p[now].y + m, now);\n      mg.insert(MG(now)), ms.insert(MS(now));\n      D.merge(p[now].x, p[now].y);\n    } else {\n      split(p[now].x + m, p[now].y + m);\n      if (p[xs[p[now].y + m]].s > p[now].s) {\n        int t = xs[p[now].y + m];\n        cut(p[t].x + m, t), cut(p[t].y + m, t);\n        mg.erase(mg.find(t)), ms.erase(ms.find(t));\n        link(p[now].x + m, now), link(p[now].y + m, now);\n        mg.insert(MG(now)), ms.insert(MS(now));\n      }\n    }\n    if (D.num[D.find(1)] == n)\n      ans = min(ans, p[(*mg.begin()).x].g * G + p[(*ms.begin()).x].s * S);\n    return;\n  }\n\n} T;\n\nsigned main() {\n  n = in(), m = in(), G = in(), S = in();\n  for (int i = 1; i <= m; i++)\n    p[i].x = in(), p[i].y = in(), p[i].g = in(), p[i].s = in();\n  sort(p + 1, p + 1 + m);\n  for (int i = 1; i <= n; i++) T.D.f[i] = i, T.D.num[i] = 1;\n  for (int i = 1; i <= m; i++) T.work(i);\n  out(ans == INF ? -1 : ans), pc('\\n');\n  flush();\n  return 0;\n}\n```\n\n",
        "postTime": 1606138846,
        "uid": 225048,
        "name": "ghr_226",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF76A \u3010Gift\u3011"
    },
    {
        "content": "**Solution**\n\n\u9996\u5148\u8003\u8651\u53ea\u6709\u94f6\u5e01\u600e\u4e48\u505a\uff0c\u663e\u7136\u6b64\u65f6\u7684\u7b54\u6848\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6700\u5927\u8fb9\u7684\u6743\u503c\n\n\u73b0\u5728\u6211\u4eec\u53c8\u52a0\u5165\u4e86\u91d1\u5e01\u7684\u9650\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u679a\u4e3e\u91d1\u5e01\u7684\u6570\u91cf$max\\_g$\uff0c\u7136\u540e\u6bcf\u6b21\u5c06\u7b26\u5408\u6761\u4ef6\uff08\u5373$g_i\\leq max\\_g$\uff09\u7684\u8fb9\u52a0\u5165\u65b0\u56fe\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u65b0\u56fe\u6309\u94f6\u5e01\u4e3a\u6743\u503c\u505a\u6700\u5c0f\u751f\u6210\u6811\n\n\u8fd9\u4e48\u505a\u590d\u6742\u5ea6\u5927\u6982\u662f$O(M^2)$\u7684\n\n\u8003\u8651\u4f18\u5316\u590d\u6742\u5ea6\uff0c\u4e3a\u4e86\u4f7f\u4e4b\u524d\u52a0\u5165\u7684\u8fb9\u5728\u65b0\u7684\u56fe\u4e2d\u90fd\u6709\u7528\uff0c\u6211\u4eec\u5c06\u8fb9\u6309\u7167$g_i$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4f9d\u6b21\u4f5c\u4e3a$max\\_g$\u3002\u8fd9\u6837\u5efa\u56fe\u7684\u590d\u6742\u5ea6\u53d8\u6210\u4e86$O(M)$\u7684\n\n\u73b0\u5728\u590d\u6742\u5ea6\u4e3b\u8981\u662f\u5728\u6bcf\u6b21\u90fd\u8981\u6c42\u4e00\u8fb9\u6700\u5c0f\u751f\u6210\u6811\u7684\u95ee\u9898\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\u2014\u2014\u5982\u679c\u8fd9\u6761\u8fb9\u4e4b\u524d\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u8fb9\uff0c\u90a3\u4e48\u4e4b\u540e\u90fd\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u8fb9\uff0c\u8bc1\u660e\u5341\u5206\u663e\u7136\uff1a\u5982\u679c\u4e4b\u524d\u90fd\u4e0d\u5728\u91cc\u9762\u4e86\uff0c\u90a3\u4e48\u4e4b\u540e\u5982\u679c\u8981\u7528\u5b83\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u7528\u539f\u5148\u66f4\u5c0f\u7684\u90a3\u4e2a\u5462\n\n\u8fd9\u6837\u6211\u4eec\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u8003\u8651\u8fb9\u6570\u5c31\u53d8\u6210\u4e86$O(N)$\u7684\u4e86\uff0c\u4f46\u662f\u7531\u4e8e\u6bcf\u6b21\u90fd\u8981\u5c06\u8fb9\u6392\u5e8f\u6240\u4ee5\u6211\u4eec\u7684\u590d\u6742\u5ea6\u662f$O(MN\\log N)$\u7684\uff0c\u5927\u7ea6\u5728$7\\times10^7$\u5de6\u53f3\uff0c\u8003\u8651\u5230CF\u7684\u673a\u5b50\u5f88\u5feb\uff0c\u53ef\u80fd\u53ef\u4ee5\u8fc7\n\n\u4f46\u662f\u53c8\u8003\u8651\u5230\u8fd9\u662f\u8fdc\u53e4\u573a\uff0c\u6240\u4ee5\u53ef\u80fd\u5e76\u4e0d\u662f\u8ba9\u6211\u4eec$7\\times10^7$\u66b4\u529b\u8fc7\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u518d\u8003\u8651\u8fdb\u4e00\u6b65\u4f18\u5316\n\n\u7531\u4e8e\u6211\u4eec\u6bcf\u6b21\u5c06\u4e00\u6761\u65b0\u8fb9\u52a0\u5165\u7684\u65f6\u5019\u4e4b\u524d\u7684\u8fb9\u90fd\u662f\u6392\u597d\u5e8f\u7684\uff0c\u6211\u4eec\u4fbf\u60f3\u5230\u4e86\u5f52\u5e76\u6392\u5e8f\u3002\u800c\u7531\u4e8e\u6211\u4eec\u6bcf\u6b21\u53ea\u52a0\u8fdb\u53bb\u4e00\u6761\u8fb9\uff0c\u6240\u4ee5\u76f4\u63a5\u5c06\u6bd4\u8fd9\u6761\u8fb9\u5dee\u7684\u66b4\u529b\u540e\u79fb\u4e00\u4f4d\u518d\u76f4\u63a5\u5c06\u5176\u63d2\u5165\u5230\u5bf9\u5e94\u4f4d\u7f6e\u5373\u53ef\uff0c\u7c7b\u4f3c\u4e8e\u5192\u6ce1\u6392\u5e8f\n\n\u8fd9\u4e48\u505a\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86$O(MN)$\u7684\u4e86\n\n**Code**\n\n```c++\n#include <bits/stdc++.h>\n\n#define N (int) 1e5\n#define ll long long\n#define INF (ll) 2e18\n\nusing namespace std;\n\nint input () {\n    int x = 0, f = 0;\n    char c = getchar ();\n    while (c < '0' || c > '9') f = c == '-', c = getchar ();\n    while (c >= '0' && c <= '9') x = (x << 1) + (x << 3) + (c ^ 48), c = getchar ();\n    return f ? - x : x;\n}\n\nint n, m;\nint S, G;\nstruct Edge {\n    int u, v, g, s;\n} edge[N];\n\nbool cmp (const Edge & x, const Edge & y) {\n    return x.g < y.g;\n}\n\nstruct Oniset {\n    int fth[N], size[N];\n    inline int findf (int x) {\n        return x == fth[x] ? x : fth[x] = findf (fth[x]);\n    }\n    void onion (int x, int y) {\n        int fx = findf (x), fy = findf (y);\n        if (fx == fy) return ;\n        if (size[fx] < size[fy]) fth[fx] = fy;\n        else fth[fy] = fx, size[fx] += size[fx] == size[fy];\n    }\n    int same (int x, int y) {\n        return findf (x) == findf (y);\n    }\n    void init (int n) {\n        for (int i = 1; i <= n; i ++) fth[i] = i, size[i] = 1;\n    }\n} oniset;\n\nEdge a[N];\nint tot;\n\nint main () {\n    n = input (), m = input ();\n    S = input (), G = input ();\n    for (int i = 1; i <= m; i ++) edge[i].u = input (), edge[i].v = input (), edge[i].s = input (), edge[i].g = input ();\n\n    sort (edge+1, edge+m+1, cmp);\n\n    ll ans = INF;\n    for (int i = 1; i <= m; i ++) {\n        int pos = ++ tot;\n        while (pos >= 2 && a[pos-1].s > edge[i].s) {\n            a[pos]= a[pos-1];\n            pos --;\n        }\n        a[pos] = edge[i];\n\n        oniset.init (n);\n        int tmp = 0, max_s = 0;\n        for (int i = 1; i <= tot; i ++) {\n            int u = a[i].u, v = a[i].v;\n            if (! oniset.same (u, v)) {\n                oniset.onion (u, v);\n                a[++ tmp] = a[i];\n                max_s = max (max_s, a[i].s);\n            }\n        }\n\n        if (tmp == n-1) ans = min (ans, 1ll * (1ll * max_s * S + 1ll * edge[i].g * G));\n        tot = tmp;\n    }\n\n    cout << (ans == INF ? -1 : ans) << endl;\n\n    return 0;\n}\n```\n\n**Conclusion**\n\n* \u6700\u5c0f\u751f\u6210\u6811\n* \u4f18\u5316\u6389\u4e00\u4e9b\u4e0d\u53ef\u80fd\u88ab\u8003\u8651\u8fdb\u6765\u7684\u4e1c\u897f\uff0c\u5373\u6254\u6389\u65e0\u7528\u72b6\u6001\n* \u5f52\u5e76\u6392\u5e8f\n\n",
        "postTime": 1606272960,
        "uid": 74333,
        "name": "BDFCL",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF76A"
    },
    {
        "content": "### \u3010\u9898\u76ee\u5927\u610f\u3011\n\n\u5965\u6797\u5339\u4e9a\u738b\u56fd\u7531N\u4e2a\u57ce\u5e02\u548cM\u4e2a\u53cc\u5411\u9053\u8def\u7ec4\u6210\u3002\u6bcf\u6761\u8def\u8fde\u63a5\u4e24\u4e2a\u57ce\u5e02\uff0c\u4e24\u4e2a\u57ce\u5e02\u53ef\u4ee5\u8fde\u63a5\u4e00\u6761\u4ee5\u4e0a\u7684\u9053\u8def\u3002\u53ef\u80fd\u6709\u4e9b\u9053\u8def\u662f\u73af\u57ce\u7684\u3002\u6240\u6709\u7684\u9053\u8def\u90fd\u4e0d\u65ad\u5730\u88ab\u5f3a\u76d7\u63a0\u593a\u3002\u540e\u6765\uff0c\u5f3a\u76d7\u4eec\u538c\u5026\u4e86\u5728\u9053\u8def\u62a2\u52ab\u4e2d\u6d6a\u8d39\u65f6\u95f4\uff0c\u6240\u4ee5\u4ed6\u4eec\u8981\u6c42\u5965\u6797\u5339\u4e9a\u56fd\u738b\u8fd8\u6e05\u503a\u52a1\u3002\u6839\u636e\u63d0\u8bae\uff0c\u5f3a\u76d7\u60f3\u8981\u5f97\u5230\u4e00\u4e2a\u7531\u91d1\u5e01\u548c\u94f6\u5e01\u7ec4\u6210\u7684\u793c\u7269\u3002\u63d0\u8bae\u8fd8\u5305\u542b\u4e00\u4e2a\u8868\u5355\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u6761\u9053\u8def\uff0c\u5b83\u90fd\u662f\u5df2\u77e5\u7684Gi\u2014\u2014\u6700\u5c0f\u7684\u91d1\u5e01\u6570\u91cf\u548cSi\u2014\u2014\u6700\u5c0f\u7684\u94f6\u5e01\u6570\u91cf\uff0c\u5e94\u5f53\u662f\u963b\u6b62\u5f3a\u76d7\u5728\u8def\u4e0a\u62a2\u52ab\u7684\u793c\u7269\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u793c\u7269\u5305\u542bA\u679a\u91d1\u5e01\u548cB\u679a\u94f6\u5e01(Gi<=A\u4e14Si<=B)\uff0c\u90a3\u4e48\u76d7\u8d3c\u5c31\u53ef\u4ee5\u5728\u6bcf\u4e2a\u9053\u8def\u4e0a\u90fd\u505c\u6b62\u62a2\u52ab\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8d22\u653f\u90e8\u65e2\u65e0\u91d1\u5e01\u4e5f\u65e0\u94f6\u5e01\uff0c\u4f46\u91cc\u9762\u6709\u5965\u6797\u5339\u4e9a\u56fe\u683c\u91cc\u514b\u3002\u4e00\u4e2a\u91d1\u5e01\u5728\u56fe\u683c\u91cc\u514b\u7684\u6210\u672c\u662fG\uff0c\u800c\u4e00\u4e2a\u94f6\u5e01\u5728\u56fe\u683c\u91cc\u514b\u7684\u6210\u672c\u662fS\u3002\u56fd\u738b\u5f88\u60f3\u9001\u4e0a\u76d7\u8d3c\u8fd9\u6837\u7684\u793c\u7269\uff0c\u4f7f\u4efb\u4f55\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u6709\u4e00\u6761\u5b89\u5168\u7684\u9053\u8def\u3002\u4f60\u7684\u4efb\u52a1\u662f\u5728\u56fe\u683c\u91cc\u514b\u627e\u5230\u6700\u5c0f\u7684\u793c\u7269\u91d1\u989d\u3002\n\n### \u3010\u5206\u6790\u3011\n\u4ece\u9898\u4e2d\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u8981\u5efa\u7acb\u51e0\u6761\u8fb9\u627e\u51fa\u6700\u5c0f\u7684\u4ef7\u503c\u603b\u548c\uff0c\u6240\u4ee5\u8981\u7528\u6700\u77ed\u8def\u6765\u5b9e\u73b0\u3002\u4f46\u662f\u9898\u76ee\u4e2d\u6709**\u4e24\u4e2a\u53d8\u91cf**\u2014\u2014\u91d1\u5e01\u6570\u548c\u94f6\u5e01\u6570\uff0c\u6240\u4ee5\u7b80\u5355\u7684\u4e00\u7ef4\u7684Kruscal\u7b97\u6cd5\u5e76\u4e0d\u80fd\u89e3\u51b3\u3002\u7136\u540e\u7b2c\u4e00\u904d\u60f3\u7684\u65f6\u5019\u8111\u5b50\u4e00\u62bd\uff0c\u76f4\u63a5\u5c06\u4e24\u4e2a\u53d8\u91cf\u5408\u5728\u4e86\u4e00\u8d77\u5f53\u4e00\u7ef4\u505a\u3002\u4f46\u662f\u6bcf\u6b21\u52a0\u8fdb\u53bb\u4e00\u6761\u8fb9\u540e\uff0c\u53d6\u7684\u503c\u5e94\u4e3a\u91d1\u5e01\u6700\u5927\u91cf\u4e0e\u94f6\u5e01\u6700\u5927\u91cf\uff0c\u6240\u4ee5**\u4e0d\u4e00\u5b9a\u662f\u540c\u4e00\u6761\u8fb9\u4e0a\u7684\u503c**\u3002\u90a3\u4e48\u5982\u4f55\u624d\u80fd\u5728\u4e8c\u7ef4\u72b6\u51b5\u4e0b\u7528Kruscal\u6c42\u6700\u77ed\u8def\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ee5\u91d1\u5e01\u4e3a\u7b2c\u4e00\u5173\u952e\u6b21\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u4ee5\u94f6\u5e01\u4e3a\u53d8\u91cf\u505a\u6700\u5c0f\u751f\u6210\u6811\u3002\u6240\u4ee5\u6211\u4eec\u5148\u5c06\u94f6\u5e01\u6570\u6392\u5e8f\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\u3002\u7136\u540e\u6211\u4eec\u601d\u8003Kruscal\u7684\u672c\u8d28\uff0c\u5c31\u662f\uff1a \n\n_\u5148\u6784\u9020\u4e00\u4e2a\u53ea\u542b n \u4e2a\u9876\u70b9\uff0c\u800c\u8fb9\u96c6\u4e3a\u7a7a\u7684\u5b50\u56fe\uff0c\u82e5\u5c06\u8be5\u5b50\u56fe\u4e2d\u5404\u4e2a\u9876\u70b9\u770b\u6210\u662f\u5404\u68f5\u6811\u4e0a\u7684\u6839\u7ed3\u70b9\uff0c\u5219\u5b83\u662f\u4e00\u4e2a\u542b\u6709 n \u68f5\u6811\u7684\u4e00\u4e2a\u68ee\u6797\u3002\u4e4b\u540e\uff0c\u4ece\u7f51\u7684\u8fb9\u96c6 E \u4e2d\u9009\u53d6\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u82e5\u8be5\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5206\u5c5e\u4e0d\u540c\u7684\u6811\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5b50\u56fe\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06\u8fd9\u4e24\u4e2a\u9876\u70b9\u5206\u522b\u6240\u5728\u7684\u4e24\u68f5\u6811\u5408\u6210\u4e00\u68f5\u6811\uff1b\u53cd\u4e4b\uff0c\u82e5\u8be5\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5df2\u843d\u5728\u540c\u4e00\u68f5\u6811\u4e0a\uff0c\u5219\u4e0d\u53ef\u53d6\uff0c\u800c\u5e94\u8be5\u53d6\u4e0b\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u518d\u8bd5\u4e4b\u3002\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u81f3\u68ee\u6797\u4e2d\u53ea\u6709\u4e00\u68f5\u6811\uff0c\u4e5f\u5373\u5b50\u56fe\u4e2d\u542b\u6709 n-1\u6761\u8fb9\u4e3a\u6b62\u3002_ \n\n\u6240\u4ee5\u5982\u679c\u8fd9\u4e00\u6b65\u7684\u6700\u5c0f\u751f\u6210\u6811\u6ee1\u8db3\u91d1\u5e01\u6570\u6700\u5c11\uff0c**\u90a3\u4e48\u8fd9\u6761\u8fb9\u5fc5\u5b9a\u5df2\u7ecf\u679a\u4e3e\u8fc7**\u3002\u6240\u4ee5\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u6808\u8bb0\u5f55\u4e0a\u4e00\u6b21\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\uff0c\u7136\u540e\u540e\u9762\u51e0\u6b21\u7684\u627e\u8fb9\u64cd\u4f5c\u5c31\u5728\u8fd9\u4e2a\u6808\u4e2d\u5b8c\u6210\u3002\n\n####  tip : \u6ce8\u610f\u6570\u636e\u8303\u56f4\uff0c\u8981\u4f7f\u7528long long\uff1b\u53e6\u5916\u5b9a\u4e49ans\u65f6\u8d4b\u4e00\u4e2a\u6700\u5927\u7684long long\u503c\uff08\u60f3\u60f3CF\u7684\u6570\u636e\u5427\uff09\n \n \n### \u3010\u6838\u5fc3\u4ee3\u7801\u3011\n1\u3001\u6bcf\u6b21\u5faa\u73af\u5728\u6808\u4e2d\u52a0\u8fdb\u8fd9\u6761\u8fb9\uff0c\u7136\u540e\u626b\u4e00\u904d\u6808\u6765\u5b8c\u6210\u6392\u5e8f\u3002\n```cpp\ntmp[++top] = node[i];\nfor(int j = top; j >= 2; j--)\n\tif(tmp[j].w2 < tmp[j - 1].w2)\n\t\tswap(tmp[j], tmp[j - 1]);\n```\n2\u3001\u6bcf\u6b21\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n```cpp\nvoid set()\n{\n\tfor(long long a = 1; a <= n; a++)\n\t\tfa[a] = a;\n}\n```\n\n### \u3010\u6b63\u89e3\u3011\n```cpp\n#include <cmath>\n#include <iomanip>\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define N 100100\nusing namespace std;\n\nlong long n, m, G, S, top;\nlong long ans = 0x7fffffffffffffffll;\nlong long fa[210];\n\nvoid set()\n{\n\tfor(long long a = 1; a <= n; a++)\n\t\tfa[a] = a;\n}\n\nlong long find(long long x)\n{\n\tif(fa[x] == x)\n\t\treturn x;\n\treturn fa[x] = find(fa[x]);\n}\n\nstruct Node{\n\tlong long from, to, w1, w2;\n\tfriend istream& operator >> (istream&_, Node &a)\n\t{\n\t\tscanf(\"%d %d %d %d\", &a.from, &a.to, & a.w1, &a.w2);\n\t\treturn _;\n\t}//\u7384\u5999\u800c\u53c8\u65b9\u4fbf\u7684\u8bfb\u5165\u64cd\u4f5c\n}node[51000], tmp[210];\n\nbool cmp(Node a, Node b)\n{\n    if(a.w1 == b.w1)\n\t\treturn a.w2 < b.w2;\n    return a.w1 < b.w1;\n    //\u4ee5\u91d1\u5e01\u4e3a\u7b2c\u4e00\u5173\u952e\u8bcd\uff0c\u94f6\u5e01\u4e3a\u7b2c\u4e8c\u5173\u952e\u8bcd\u6392\u5e8f\n}\n\nint main()\n{\n\tfreopen(\"gift.in\", \"r\", stdin);\n \tfreopen(\"gift.out\", \"w\", stdout);\n\tcin >> n >> m >> G >> S;\n\tfor(int i = 1; i <= m; i++)\n\t\tcin >> node[i];\n\tsort(node + 1, node + m + 1, cmp);\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tset();\n\t\ttmp[++top] = node[i];\n\t\tfor(int j = top; j >= 2; j--)\n\t\t\tif(tmp[j].w2 < tmp[j - 1].w2)\n\t\t\t\tswap(tmp[j], tmp[j - 1]);\n\t\tlong long cnt = 0;\n\t\tfor(int j = 1; j <= top; j++)\n        {\n            int u = find(tmp[j].from), v = find(tmp[j].to);\n            if(u != v)\n            {\n                fa[u] = v;\n                tmp[++cnt] = tmp[j];\n                if(cnt == n - 1)\n\t\t\t\t\tbreak;\n            }//Kruscal\u6838\u5fc3\n        }\n        if(cnt == n - 1)//\u627e\u5230\u7b2cn - 1\u6761\u8fb9\u505c\u6b62\n            ans = min(ans, (long long)G * node[i].w1 + (long long)S * tmp[cnt].w2);\n        top = cnt;\n    }\n    if(ans == 0x7fffffffffffffffll)\n\t\tcout << -1;\n    else\n    \tcout << ans;\n}\n```",
        "postTime": 1531390587,
        "uid": 71084,
        "name": "\u5e05\u5230\u62a5\u8b66",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF76A \u3010Gift\u3011"
    },
    {
        "content": "**[Portal]( https://www.luogu.com.cn/problem/CF76A )**\n\n\u8fd9\u662f\u4e00\u9053\u633a\u6709\u610f\u601d\u7684\u9898\uff0c\u53ea\u662f\u4e0d\u77e5\u9053\u4e3a\u5565 CF \u4e0a diff \u53ea\u6709 2200\uff1f\u53ef\u80fd\u56e0\u4e3a\u662f\u8fdc\u53e4\u573a\u5427\u3002\n\n\u9996\u5148\u8003\u8651\u4e00\u4e2a\u66b4\u529b\uff1a\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u91d1\u5b50\u6570\uff0c\u7136\u540e\u663e\u7136\u6700\u4f18\u94f6\u5b50\u6570\u662f\u9012\u51cf\u7684\uff0c\u8fd9\u6837\u4e00\u6765\u4fbf\u662f\u4e00\u4e2a two-pointers\uff0c\u6240\u6709\u53ef\u80fd\u7684\u6700\u4f18\u60c5\u51b5\u4e00\u5171\u6709 $\\mathrm O(m)$ \u4e2a\u3002\u7136\u540e\u4e00\u8def two-pointers \u4e0b\u6765\uff0c\u6bcf\u6b21\u90fd\u66b4\u529b\u5e76\u67e5\u96c6\u6216 DFS \u5224\u8fde\u901a\u6027\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u662f $\\mathrm O\\!\\left(m^2\\alpha\\right)$\uff08\u5e76\u67e5\u96c6\u7684\u5220\u8fb9\u5e76\u4e0d\u662f\u64a4\u9500\uff0c\u65e0\u6cd5\u4f18\u5316\uff09\u3002\u4f46\u662f\u6b63\u89e3\u4f3c\u4e4e\u548c\u8fd9\u4e2a\u66b4\u529b\u4e00\u70b9\u5173\u7cfb\u90fd\u6ca1\u6709\uff08\n\n\u6362\u4e2a\u89d2\u5ea6\u60f3\uff1a\u4e4b\u524d\u662f\u60f3\u5148\u786e\u5b9a\u91d1\u94f6\u6570\uff0c\u7136\u540e\u770b\u6784\u51fa\u6765\u7684\u56fe\uff1b\u800c\u6211\u4eec\u53ef\u4ee5\u4ece\u56fe\u4e2d\u62bd\u4e00\u4e9b\u8fb9\uff0c\u7136\u540e\u770b\u8981\u7684\u6700\u5c0f\u91d1\u94f6\u6570\u3002\u663e\u7136\uff0c\u5bf9\u4e8e\u62bd\u51fa\u6765\u7684\u4e00\u4e9b\u8fb9\uff0c\u8981\u7684\u91d1\u94f6\u6570\u4fbf\u5206\u522b\u662f\u8fd9\u4e9b\u8fb9\u7684\u6700\u5927\u91d1\u94f6\u6570\uff08\u90a3\u4e48\u8fb9\u7684\u91d1\u94f6\u6570\u53ef\u4ee5\u770b\u4f5c\u8fb9\u6743\uff09\u3002\u8981\u62bd\u51fa\u6765\u7684\u8fb9\u4f7f\u5f97\u56fe\u8fde\u901a\u7684\u8bdd\uff0c\u663e\u7136\u8003\u8651\u53d6\u751f\u6210\u6811\u3002\u4e8e\u662f\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u53d8\u6210\u4e86\u6c42\u4f7f\u5f97 $Gg+Ss$ \u6700\u5c0f\u7684\u8fd9\u6837\u4e00\u4e2a\u5e7f\u4e49 MST\u3002\n\n\u5e7f\u4e49 MST \u600e\u4e48\u6c42\u5462\uff1f\u6211\u4eec\u8003\u8651 Kruskal \u7684\u672c\u8d28\uff0c\u4e5f\u5c31\u662f\u6b63\u786e\u6027\u8bc1\u660e\u3002\u5b83\u57fa\u4e8e\u751f\u6210\u6811\u7684\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6027\u8d28\uff1a\u5c06\u4e00\u6761\u975e\u6811\u8fb9\u8fde\u5165\u8be5\u751f\u6210\u6811\uff0c\u5c06\u5f62\u6210\u7684\u73af\u4e2d\u5f02\u4e0e\u52a0\u5165\u8fb9\u7684\u4e00\u6761\u8fb9\u53bb\u6389\uff0c\u5f97\u5230\u53e6\u4e00\u68f5\u751f\u6210\u6811\uff1b\u800c\u4efb\u610f\u4e24\u4e2a\u751f\u6210\u6811\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u64cd\u4f5c\u4e92\u76f8\u8f6c\u5316\u3002\u800c\u4e00\u68f5\u751f\u6210\u6811\u662f MST \u5f53\u4e14\u4ec5\u5f53\u4efb\u610f\u4e00\u6761\u975e\u6811\u8fb9\u52a0\u5165\u540e\uff0c\u5b83\u662f\u6240\u5728\u73af\u4e2d\u8fb9\u6743\u6700\u5927\u7684\uff08\u4e5f\u5c31\u662f\u65e0\u6cd5\u901a\u8fc7\u4e0a\u8ff0\u64cd\u4f5c\u4f7f\u6743\u503c\u548c\u53d8\u5c0f\uff09\uff0c\u8fd9\u4e2a\u5fc5\u8981\u6027\u663e\u7136\uff0c\u5145\u5206\u6027\u968f\u4fbf\u53cd\u8bc1\u3002Kruskal \u5c31\u662f\u5229\u7528\u4e86\u8fd9\u4e00\u70b9\uff0c\u641e\u51fa\u4e00\u4e2a\u63a8\u8bba\uff1a\u4efb\u610f\u4e00\u68f5 MST \u90fd\u5305\u542b\u56fe\u4e2d\u6700\u5c0f\u8fb9\uff0c\u4ea6\u5373\u56fe\u4e2d\u4efb\u610f\u4e00\u6761\u6700\u5c0f\u8fb9\u90fd\u4e00\u5b9a\u5728\u81f3\u5c11\u4e00\u9897 MST \u91cc\uff0c\u968f\u4fbf\u53cd\u8bc1\u3002\u90a3\u4e48\u6211\u4eec dark \u9009\u51fa\u4efb\u610f\u4e00\u6761\u6700\u5c0f\u8fb9\uff0c\u7136\u540e\u8003\u8651\u5c06\u8fd9\u6761\u8fb9\u4e24\u7aef\u5408\u5e76\u6210\u4e00\u4e2a\u70b9\uff0c\u95ee\u9898\u5f52\u7ea6\u4e3a\u89c4\u6a21\u4e3a $n-1$ \u7684\u95ee\u9898\uff0c\u81f3\u6b64 Kruskal \u6b63\u786e\u6027\u5f97\u8bc1\u3002\n\n\u53ef\u89c1\u5e7f\u4e49 MST \u53ef\u4ee5\u7528 Kruskal \u6c42\u9700\u8981\u6ee1\u8db3\u4efb\u610f\u65f6\u523b\u90fd\u5b58\u5728\u4e00\u6761\u8fb9\uff0c\u82e5\u5b83\u662f\u975e\u6811\u8fb9\u90a3\u4e48\u4ee5\u5b83\u4f5c\u4e3a\u5bf9\u8c61\u505a\u4e0a\u8ff0\u64cd\u4f5c\u4e00\u5b9a\u80fd\u51cf\u5c0f\u751f\u6210\u6811\u7684\u603b\u6743\u503c\u3002\u800c\u8fd9\u9898\u4e2d\u8981\u6c42\u7684\u6743\u503c\u662f\u4e2a\u4e8c\u7ef4\u7684\uff0c\u5f88\u663e\u7136\u4e0d\u4e00\u5b9a\u5b58\u5728\u8fd9\u6837\u4e00\u6761\u8fb9\u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u6d88\u6389\u4e00\u7ef4\u3002\n\n\u8003\u8651\u679a\u4e3e\u7b2c\u4e00\u7ef4\uff0c\u4e5f\u5c31\u662f\u91d1\u5b50\u6570\u3002\u90a3\u4e48\u5269\u4e0b\u6765\u7684\u4efb\u52a1\u5c31\u662f\u6c42\u4e00\u4e2a\u4e00\u7ef4\u6743\u503c\u7684\u5e7f\u4e49 MST\uff0c\u5f88\u663e\u7136\u53ef\u4ee5 Kruskal\uff0c\u5c31\u6309\u7167\u666e\u901a Kruskal \u9009\u8fb9\u7b56\u7565\u663e\u7136\u53ef\u8bc1\u6b63\u786e\u6027\u3002\u4f46\u662f\u8fd9\u6837\u8fd8\u662f $\\mathrm O\\!\\left(m^2\\alpha\\right)$\uff0c\u53c8\u56de\u5230\u4e86\u66b4\u529b\uff08\uff1f\n\n\u4f46\u662f\u8fd9\u4e2a\u66b4\u529b\u662f\u53ef\u4f18\u5316\u7684\u3002\u6ce8\u610f\u5230 MST \u662f\u4e00\u68f5\u6811\uff0c\u8fb9\u6570\u662f $\\mathrm O(n)$ instead of $\\mathrm O(m)$\u3002\u4e00\u6761\u8fb9\u4eca\u671d\u4e0d\u5305\u542b\u5728 MST \u91cc\uff0c\u4ee5\u540e\u6c38\u8fdc\u4e5f\u522b\u60f3\u7ffb\u8eab\uff08\u8fd9\u4e5f\u592a\u663e\u7136\u4e86\u5427\uff09\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5728 $g$ \u7684\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u8fc7\u7a0b\u4e2d\uff0c\u5b9e\u65f6\u7ef4\u62a4 MST \u7684\u8fb9\u4eec\uff0c\u7136\u540e\u5c06\u65b0\u52a0\u7684\u8fb9\u66b4\u529b\u653e\u8fdb\u53bb\u8dd1 Kruskal\uff0c\u8fd9\u6837\u603b\u8fb9\u6570\u663e\u7136\u662f\uff0c$\\mathrm O(m)$ \u6b21\u6bcf\u6b21\u57fa\u7840\u8fb9 $\\mathrm O(n)$\uff0c\u6dfb\u52a0\u7684\u8fb9\u7684\u603b\u91cf\u662f $\\mathrm O(m)$\uff0c\u8fd8\u8981\u6392\u5e8f\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f $\\mathrm O(nm\\log)$\u3002\u7136\u540e\u8fd9\u4e2a $\\log$ \u53ef\u4ee5\u5f52\u5e76\u6389\uff0c\u4f46\u8fd8\u8981\u5e76\u67e5\u96c6\uff0c\u6240\u4ee5\u662f $\\mathrm O(nm\\alpha)$\u3002\n\n\u81f3\u6b64\u5e94\u8be5\u53ef\u4ee5\u8fc7\u4e86\uff0c\u4f46\u662f yyq \u8bf4\u300c\u6709\u66f4\u4f18\u79c0\u7684\u65b9\u6cd5\u4e3a\u4ec0\u4e48\u4e0d\u7528\u5462\u300d\u3002\u8003\u8651\u4e0d\u4e00\u6b21\u589e\u52a0 $g_i=g$ \u7684\u90a3\u4e48\u591a\u8fb9\uff0c\u800c\u4e00\u6761\u8fb9\u4e00\u6761\u8fb9\u52a0\uff0c\u8fd9\u6837\u663e\u7136\u4f1a\u53d8\u66f4\u7b80\u5355\u4e00\u4e9b\u3002\u8003\u8651\u4e0d\u518d\u62d8\u6ce5\u4e8e Kruskal\uff0c\u53bb\u6389\u5e76\u67e5\u96c6\u64cd\u4f5c\uff1a\u6ce8\u610f\u5230\u4e0a\u9762\u8bf4\u7684\u751f\u6210\u6811\u7684\u90a3\u4e2a\u6027\u8d28\uff0c\u770b\u65b0\u52a0\u5165\u7684\u8fb9\u52a0\u5165\u540e\u5f62\u6210\u7684\u73af\uff0c\u80fd\u4e0d\u80fd\u628a\u539f\u8fb9\u5f39\u52be\u6389\u3002\u4e8e\u662f\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u5f53\u524d MST \u7684\u90bb\u63a5\u8868\uff0cDFS\u3001\u5220\u8fb9\u8fd9\u4e00\u5207\u90fd\u662f $\\mathrm O(n)$ \u7684\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6 $\\mathrm O(nm)$\u3002\n\n**_[code]( https://www.luogu.com.cn/paste/915h3kk9 )_**",
        "postTime": 1606549066,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF76A \u3010Gift\u3011"
    },
    {
        "content": "**\u524d\u8a00**\n\n\u8fd9\u9898\u88ab\u8001\u5e08\u8003\u8bd5\u653e\u5230 $\\texttt{T2}$\uff0c\u5199\u4e86\u4e2a $14$ \u79cd\u8d2a\u5fc3\u4e71\u641e\uff0c\u7ed3\u679c\u6700\u540e\u4e00\u79cd\u8d2a\u5fc3\u6392\u5e8f\u5199\u6302\u628a\u6211\u4eba\u6574\u4e0d\u4f1a\u4e86\u3002\n\n\u8d5b\u540e\u542c\u4e86\u8bb2\u8bc4\u77e5\u9053\u662f\u4e00\u4e2a\u751f\u6210\u6811\u79d1\u6280\u3002\n\n**\u9898\u610f\u7b80\u8ff0**\n\n\u7ed9\u5b9a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u4e24\u79cd\u5c5e\u6027 $g$ \u548c $s$\uff0c\u8bf7\u4f60\u6c42\u51fa\u6b64\u56fe\u7684\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u4f7f\u5f97 $G\\times \\max\\{g_i\\}+S\\times \\{s_i\\}$ \u5c3d\u91cf\u5c0f\u3002\n\n$1\\le n\\le 200,1\\le m\\le 5\\times 10^4$\u3002\n\n**\u9898\u76ee\u89e3\u6790**\n\n\u8fd9\u4e2a\u6bd4\u666e\u901a\u751f\u6210\u6811\u591a\u4e86\u4e00\u4e2a\u9650\u5236\uff0c\u5982\u679c\u5149\u6709 $g$ \u6216 $s$ \u7684\u8bdd\u5c31\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u677f\u5b50\u3002\n\n\u8003\u8651\u6211\u4eec\u628a\u5176\u4e2d\u4e00\u4e2a\u91cf\u56fa\u5b9a\u4e0b\u6765\uff0c\u5982 $g$\uff0c\u90a3\u4e48\u6211\u4eec\u628a $g$ \u5347\u5e8f\u6392\u5e8f\uff0c\u518d\u8003\u8651 $s$\u3002\n\n\u5bf9\u4e8e\u679a\u4e3e\u7684\u4e00\u4e2a $g_i$\uff0c\u8003\u8651\u5c06 $[1,i-1]$ \u8fd9\u4e9b\u8fb9\u4e2d\u9009\u53d6\u4e00\u4e9b\u8fb9\u4e0e\u7b2c $i$ \u6761\u8fb9\u6784\u6210\u4e00\u68f5\u65b0\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u518d\u7b97\u8fd9\u4e2a\u751f\u6210\u6811\u7684\u8d21\u732e\uff0c\u53d6\u4e2a\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u95ee\u9898\u662f\u9009\u54ea\u4e9b\u8fb9\u6784\u6210\u76ee\u524d\u770b\u6765\u6700\u4f18\u7684\u751f\u6210\u6811\u3002\u663e\u7136\uff0c\u6211\u4eec\u8981\u8ba9 $s$ \u5c3d\u53ef\u80fd\u5c0f\uff0c\u800c $s_i$ \u662f\u4e00\u5b9a\u8981\u9009\u7684\uff0c\u6240\u4ee5\u5728 $[1,i-1]$ \u8fd9\u4e9b\u8fb9\u4e2d $s_j>s_i$ \u7684\u8fb9\u90fd\u4e0d\u80fd\u9009\u3002\n\n\u8fd9\u6837\u6784\u5efa\u51fa\u4e00\u4e2a\u65b0\u56fe\uff0c\u7136\u540e $\\texttt{kruskal}$ \u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u9898\u5c31\u6ca1\u4e86\u3002\n\n",
        "postTime": 1633522492,
        "uid": 360511,
        "name": "UperFicial",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF76A\u3010Gift\u3011"
    },
    {
        "content": "\u65e2\u7136\u8fd9\u9053\u9898\u7ed9\u51fa\u4e86\u51e0\u4e2a\u57ce\u5e02\u548c\u57ce\u5e02\u4e4b\u95f4\u8054\u901a\u7684\u8fb9\u53ca\u4fe1\u606f\uff0c\u8ba9\u4f60\u6c42\u6700\u5c0f\u7684\u8054\u901a\u503c\uff0c~~\u770b\u8d77\u6765\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811~~\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002[\u6700\u5c0f\u751f\u6210\u6811](https://blog.csdn.net/qq_35644234/article/details/59106779)(\u770b\u5b8c\u8bb0\u5f97\u56de\u6765\uff0c\u8fd9\u9898\u6ca1\u8fd9\u4e48\u7b80\u5355)\n\n\u4f46\u662f\u5462\uff0c\u8fd9\u68f5\u6811\u6709\u4e24\u4e2a\u91cf\uff0c\u9700\u8981\u540c\u65f6\u8003\u8651\uff0c\u53c8\u4e0d\u80fd\u52a0\u8d77\u6765\u7b97\uff08\u56e0\u4e3a\u8981\u9009\u53d6\u91d1\u5e01\u6570\u6700\u5927\u518d\u8f6c\u6362\u6210\u56fe\u817e\u6570\uff0c\u518d\u52a0\u4e0a\u94f6\u5e01\u6570\u6700\u5927\u518d\u8f6c\u6362\u6210\u56fe\u817e\u6570\uff0c\u4e0d\u80fd\u5148\u52a0\u8d77\u6765\u518d\u7b97\u6700\u5c0f\u751f\u6210\u6811\uff09\u6240\u4ee5\u6211\u4eec\u8981\u505a\u4e00\u4e2a\u7c7b\u4f3c\u4e8e[\u6b21\u5c0f\u751f\u6210\u6811](http://www.cnblogs.com/Ash-ly/p/5494975.html)\u7684\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u5148\u5bf9\u91d1\u5e01\u6570\u91cf\u6392\u5e8f\uff0c\u7136\u540e\u505a\u5efa\u8fb9\u7684\u64cd\u4f5c\uff0c\u5f53\u7136**\u5148\u628a\u91d1\u5e01\u6570\u5c0f\u7684**\u5148\u653e\u8fdb\u53bb\uff0c\u7136\u540e\u5f97\u5230\u4e00\u4e2aans\uff0c\u4e4b\u540e\u4e0d\u65ad\u5730\u5f80\u91cc\u585e\u8fb9\uff08**\u653e\u8fdb\u53bb\u540e\u6309\u94f6\u5e01\u5192\u6ce1**\uff09\uff0c\u5f97\u5230\u4e00\u4e2a\u5173\u4e8e\u91d1\u5e01\u7684\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u4f7f\u94f6\u5e01\u4ece\u751f\u6210\u6811\u5411\u6700\u5c0f\u751f\u6210\u6811\u8fc7\u5ea6\uff0c\u5f97\u5230\u4e00\u4e2a\u5bf9\u4e8e\u94f6\u5e01\u548c\u91d1\u5e01\u52a0\u8d77\u6765\u6700\u5c0f\u7684\u6811\u3002\n\n\u795e\u4ed9\u4ee3\u7801kruskal\uff0c\u6ca1\u9519\u5c31\u662f\u8fd9\u4e48\u77ed\n\n```\nfor(ll i=1,t=0,s;i<=m;i++){\n\t\tq[++t]=a[i];\n\t\ts=0;\n\t\tfor(ll j=t-1;j&&q[j+1].b<q[j].b;j--) swap(q[j],q[j+1]);//\u6309\u94f6\u5e01\u5c06\u6700\u540e\u4e00\u4e2a\u5192\u6ce1\u5230\u524d\u9762\n\t\tfor(ll j=1;j<=n;j++) fa[j]=j;\n\t\tfor(ll j=1,x,y;s<n-1&&j<=t;j++)\n\t\t\tif((x=find(q[j].x))!=(y=find(q[j].y))) fa[x]=y,q[++s]=q[j];//kruskal\uff0cq[++s]=q[j]\u7684\u89e3\u91ca\u89c1\u4e0b\n\t\tif(s==n-1) ans=min(ans,1ll*A*a[i].a+1ll*B*q[s].b);//\u5224\u65ad\u8fd9\u68f5\u6811\u7684\u5927\u5c0f\n\t\tt=s;//\u5df2\u7ecf\u585e\u4e86\u591a\u5c11\u8fb9\uff08\u6709\u4e9b\u8fb9\u88ab\u4e22\u6389\u4e86\uff09\n\t}\n```\nq[++s]=q[j]\u8fd9\u53e5\u5c31\u662f\u5c06\u5bf9\u4e8e\u5df2\u7ecf\u653e\u8fdb\u53bb\u7684\u8fb9\u4e2d\u5bf9\u4e8e\u94f6\u5e01\u6765\u8bf4\u6700\u4f18\u7684\u8fb9\u5efa\u6811\uff0c\u5269\u4e0b\u7684\u5c31\u4e22\u6389\uff0c\u8fd9\u76f8\u5f53\u4e8e\u7528\u8d2a\u5fc3\u505a\u6811\u7684\u8f6c\u6362\u3002\n\n\u4e0b\u9762\u662f\u603b\u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\n#define ll long long//\u8bb0\u5f97\u7528long long\nusing namespace std;\nstruct think{\n\tll x,y,a,b;\n\tbool operator<(const think A)const{\n\t\treturn a<A.a;\n\t}\n}a[50005],q[205];\nll n,m,A,B,fa[205];\nll find(ll x){\n\tif(fa[x]==x) return x;\n\treturn fa[x]=find(fa[x]);\n}\nint main(){\n\tfreopen(\"gift.in\",\"r\",stdin);\n\tfreopen(\"gift.out\",\"w\",stdout);\n\tcin>>n>>m>>A>>B;\n\tfor(ll i=1;i<=m;i++){\n\t\tcin>>a[i].x>>a[i].y>>a[i].a>>a[i].b;\n\t}\n\tsort(a+1,a+m+1);\n\tll ans=0x7fffffffffffffff;\n\tfor(ll i=1,t=0,s;i<=m;i++){\n\t\tq[++t]=a[i];\n\t\ts=0;\n\t\tfor(ll j=t-1;j&&q[j+1].b<q[j].b;j--) swap(q[j],q[j+1]);\n\t\tfor(ll j=1;j<=n;j++) fa[j]=j;\n\t\tfor(ll j=1,x,y;s<n-1&&j<=t;j++)\n\t\t\tif((x=find(q[j].x))!=(y=find(q[j].y))) fa[x]=y,q[++s]=q[j];\n\t\tif(s==n-1) ans=min(ans,1ll*A*a[i].a+1ll*B*q[s].b);\n\t\tt=s;\n\t}\n\tcout<<(ans==0x7fffffffffffffff ? -1:ans);\n\treturn 0;\n}\n```",
        "postTime": 1531391359,
        "uid": 71080,
        "name": "\u8363\u4e00\u9e23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF76A \u3010Gift\u3011"
    },
    {
        "content": "\u9700\u8981\u6ce8\u610f\u7684\u51e0\u70b9\n\n1\u6570\u636e\u5f88\u5927\uff0c\u7206int\u3002\n\n2\u6c42\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6c42\u8fd9\u4e2a\u6811\u4e0a\u9762\u7684\u6bcf\u6761\u8fb9\u7684\u6700\u5927\u7684\u91d1\u5e01\u6570\u548c\u6700\u5927\u7684\u94f6\u5e01\u6570\u76ee\uff0c\u53ef\u80fd\u6700\u5927\u91d1\u5e01\u548c\u94f6\u5e01\u4e0d\u5728\u4e00\u4e2a\u8fb9\u4e0a\n\n3\u628a\u8fb9\u6309\u5f00\u9500\u5347\u5e8f\u6392\u5e8f\n\n4\u6bcf\u4e00\u6b21\u65b0\u52a0\u4e00\u4e2a\u8fb9\u751f\u6210\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u662f\u548c\u524d\u9762\u751f\u6210\u7684\u6700\u5c0f\u751f\u6210\u6811\u6709\u4e00\u5b9a\u5173\u7cfb\u7684\uff0c\u8fd9\u662f\u4e2a\u51cf\u5c0f\u5f00\u9500\u7684\u64cd\u4f5c\uff0c\u53ea\u5728\u4e00\u5b9a\u6570\u76ee\u7684\u8fb9\u5185\u53d6\u6700\u5c0f\u751f\u6210\u6811.\u60f3\u4e00\u4e0b\uff0cm\u6761\u8fb9\uff0c\u6bcf\u4e00\u6b21\u53d6\u90a3\u4e48\u591a\u6761\u8fb9\uff0c\u4f1aTLE\u3002\n\n5\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u628a\u94f6\u5e01\u5c0f\u7684\u653e\u524d\u9762\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3amlgm + (m * n)\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int maxn = 2e2 + 10;\nconst int maxm = 5e4 + 10;\n//test;\nint father[maxn] = {0}, T[maxn] = {0};\n\nstruct Edge{\n    int from, to, gold, silver;\n}edges[maxm];\n\nbool com(Edge &a, Edge &b);\n\nvoid init();\n\nint Get(int u);\n\nint main(){\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    long long g, s;\n    cin >> g >> s;\n    for(int i = 0; i < m; i++){\n        scanf(\"%d%d%d%d\", &edges[i].from, &edges[i].to, &edges[i].gold, &edges[i].silver);\n    }\n    sort(edges, edges + m, com);\n    long long anw = -1;\n    int top = 0;\n    for(int i = 0; i < m; i++){\n        init();\n        T[top++] = i;\n        for(int j = top - 1; j >= 1; j--){\n            if(edges[T[j]].silver < edges[T[j - 1]].silver){\n                swap(T[j], T[j - 1]);\n            }//silver first\n        }\n        int cnt = 0;\n        int gold = 0, silver = 0;\n        for(int j = 0; j < top; j++){\n            int u = edges[T[j]].from, v = edges[T[j]].to;\n            int fu = Get(u), fv = Get(v);\n            if(fu != fv){\n                father[fu] = fv;\n                T[cnt++] = T[j];\n                gold = max(gold, edges[T[j]].gold);\n                silver = max(silver, edges[T[j]].silver);\n                if(cnt == n - 1){break;}\n            }\n        }\n        if(cnt == n - 1){\n            if(anw == -1){ anw = g * gold + s * silver;}\n            else{ anw = min(anw, g * gold + s * silver);}\n        }\n        top = cnt;\n    }\n    cout << anw;\n    return 0;\n}\n\nbool com(Edge &a, Edge &b){\n    return ( (a.gold < b.gold) || (a.gold == b.gold && a.silver < b.silver) );\n}\n\nvoid init(){\n    for(int i = 0; i < maxn; i++){father[i] = i;}\n}\n\nint Get(int u){\n    if(father[u] == u){return u;}\n    return father[u] = Get(father[u]);\n}\n\n```\n",
        "postTime": 1561016354,
        "uid": 74624,
        "name": "\u5b89\u9759\u5b66\u4e60",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF76A \u3010Gift\u3011"
    }
]