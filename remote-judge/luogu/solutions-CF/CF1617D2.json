[
    {
        "content": "\u5ef6\u7eed easy version \u7684\u601d\u8def\uff0c\u627e\u5230\u4e24\u4e2a\u4e09\u5143\u7ec4 $(a,b,c),(b,c,d)$ \u6ee1\u8db3\u5b83\u4eec\u8be2\u95ee\u51fa\u7684 $01$ \u503c\u4e0d\u540c\u3002\n\n\u628a\u539f\u5e8f\u5217\u6bcf\u4e09\u4e2a\u5143\u7d20\u5206\u4e00\u5757\u5206\u6210 $\\frac{n}{3}$ \u5757\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u5757\u5bf9\u5e94\u7684\u4e09\u5143\u7ec4\u4f9d\u6b21\u8be2\u95ee\u3002\u7531\u4e8e\u9898\u76ee\u4fdd\u8bc1 $\\frac{n}{3}<k<\\frac{2n}{3}$\uff0c\u56e0\u6b64\u4e00\u5b9a\u80fd\u627e\u5230\u4e24\u5757\u6ee1\u8db3\u5b83\u4eec\u8be2\u95ee\u5f97\u5230\u7684\u503c\u4e0d\u540c\uff0c\u4e0d\u59a8\u8bbe $(p,p+1,p+2),(q,q+1,q+2)$ \u662f\u627e\u5230\u7684\u8be2\u95ee\u503c\u4e0d\u540c\u7684\u4e24\u5757\uff0c\u4e14\u524d\u8005\u8be2\u95ee\u7684\u7ed3\u679c\u4e3a $0$\u3002\n\n\u628a $(p,p+1,p+2),(q,q+1,q+2)$ \u5355\u62ce\u51fa\u6765\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e24\u4e2a\u76f8\u90bb\u7684\u4e09\u5143\u7ec4\uff0c\u5982 $(p+1,p+2,q),(p+2,q,q+1)$\uff0c\u4e00\u5b9a\u80fd\u627e\u5230\u76f8\u90bb\u4e14\u8be2\u95ee\u503c\u4e0d\u540c\u7684\u4e24\u4e2a\u4e09\u5143\u7ec4\u3002\u8fd9\u6709\u70b9\u50cf\u79bb\u6563\u7248\u7684\u96f6\u70b9\u5b58\u5728\u5b9a\u7406\uff0c\u56e0\u4e3a\u4e09\u5143\u7ec4\u5185 $1$ \u7684\u6570\u91cf\u7684\u53d8\u5316\u53ea\u53ef\u80fd\u4e3a $-2,0,2$\uff0c\u800c\u6700\u7ec8 $1$ \u7684\u6570\u91cf\u7531\u8d1f\u8f6c\u6b63\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709\u4e00\u4e2a\u65f6\u523b $1$ \u7684\u6570\u91cf\u7531 $-1$ \u53d8\u4e3a\u4e86 $1$\u3002\n\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u7528 $\\frac{n}{3}+2$ \u6b21\u64cd\u4f5c\u627e\u5230\u4e24\u4e2a\u4e09\u5143\u7ec4 $(a,b,c),(b,c,d)$ \u6ee1\u8db3\u5b83\u4eec\u8be2\u95ee\u51fa\u7684 $01$ \u503c\u4e0d\u540c\uff0c\u5373\u627e\u5230\u4e24\u4e2a\u4f4d\u7f6e $s,t$ \u6ee1\u8db3 $a_s=0,a_t=1$\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u5757\u4f7f\u7528\u81f3\u591a $2$ \u6b21\u6c42\u51fa\u5757\u5185\u4e09\u4e2a\u4f4d\u7f6e\u7684\u786e\u5207\u503c\u3002\u4e0d\u59a8\u8bbe\u5f53\u524d\u5757 $(i,i+1,i+2)$ \u8be2\u95ee\u503c\u4e3a $0$\uff0c\u5148\u8be2\u95ee $(t,i,i+1)$\uff0c\u5982\u679c\u8fd4\u56de\u503c\u4e3a $1$ \u5219 $i,i+1$ \u4e2d\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a $1$\uff0c\u6240\u4ee5 $a_{i+2}=0$\uff0c\u518d\u8be2\u95ee\u4e00\u6b21 $(s,t,i)$ \u5c31\u80fd\u786e\u5b9a $a_i$\uff0c\u4ece\u800c\u786e\u5b9a $a_{i+1}$\u3002\u800c\u5982\u679c $(t,i,i+1)$ \u8fd4\u56de\u503c\u4e3a $0$\uff0c\u90a3\u4e48 $a_i=a_{i+1}=0$\uff0c\u518d\u8be2\u95ee\u4e00\u6b21 $(s,t,i+2)$ \u5c31\u80fd\u786e\u5b9a $a_{i+2}$\u3002$(i,i+1,i+2)$ \u8be2\u95ee\u503c\u4e3a $1$ \u65f6\u540c\u7406\u3002\u7efc\u4e0a\uff0c\u603b\u64cd\u4f5c\u6570\u4e3a $n+2$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n//author:\u671b\u8fdc\u661f\n#include<bits/stdc++.h>\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\n#define mk make_pair\n#define sml(x,y) (x=min(x,y))\n#define big(x,y) (x=max(x,y))\n#define ll long long\n#define ull unsigned long long\n#define db double\n#define fo(i,x,y) for(int i=x;i<=y;++i)\n#define go(i,x,y) for(int i=x;i>=y;--i)\nusing namespace std;\ninline int read(){int x=0,fh=1; char ch=getchar(); while(!isdigit(ch)){if(ch=='-') fh=-1; ch=getchar();} while(isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0'; ch=getchar();} return x*fh;}\ninline void out(int *a,int l,int r){fo(i,l,r) cout<<*(a+i)<<' ';puts(\"\");}\n\nconst int N=1e5+5;\nint a[N],n,b[N];\n\nint ask(int x,int y,int z){\n\tprintf(\"? %d %d %d\\n\",x,y,z);cout.flush();\n\tint ret=read();\n\tif(ret==-1) exit(0);\n\treturn ret;\n}\n\nvoid solve(){\n\tcin>>n;int p,q;//p:0 q:1\n\tfor(int i=1;i<=n;i+=3){\n\t\tb[i]=ask(i,i+1,i+2);\n\t\tif(b[i]) q=i;\n\t\telse p=i;\n\t}\n\tint x=ask(p+1,p+2,q),y,s,t;\n\tif(x) s=p,t=q;\n\telse{\n\t\ty=ask(p+2,q,q+1);\n\t\tif(y) s=p+1,t=q+1;\n\t\telse s=p+2,t=q+2;\n\t}\n\t//printf(\"%d,%d\\n\",s,t);\n\ta[s]=0,a[t]=1;\n\tfor(int i=1;i<=n;i+=3){\n\t\tif(p==i||q==i){\n\t\t\tfo(j,i,i+2) if(j!=s&&j!=t) a[j]=ask(s,t,j);\n\t\t\tcontinue;\n\t\t}\n\t\tif(b[i]){\n\t\t\tif(ask(s,i,i+1)){\n\t\t\t\ta[i]=a[i+1]=1;\n\t\t\t\ta[i+2]=ask(s,t,i+2);\n\t\t\t}else a[i+2]=1,a[i]=ask(s,t,i),a[i+1]=a[i]^1;\n\t\t}else{\n\t\t\tif(!ask(t,i,i+1)){\n\t\t\t\ta[i]=a[i+1]=0;\n\t\t\t\ta[i+2]=ask(s,t,i+2);\n\t\t\t}else a[i+2]=0,a[i]=ask(s,t,i),a[i+1]=a[i]^1;\n\t\t}\n\t}\n\tvector<int> ans;fo(i,1,n) if(!a[i]) ans.pb(i);\n\tcout<<\"! \"<<ans.size()<<' ';for(int i:ans) cout<<i<<' ';puts(\"\");\n\tcout.flush();\n}\n\nsigned main(){\n\tint T=read();\n\twhile(T--) solve();\n\treturn 0;\n}\n/*\n-------------------------------------------------\n*/\n```\n\n",
        "postTime": 1640765340,
        "uid": 238408,
        "name": "vectorwyx",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1617D2 Too Many Impostors (hard version)"
    },
    {
        "content": "## \u9898\u610f\n\n\u6709 $n$ \u4e2a\u4eba\uff08\u4fdd\u8bc1 $n\\bmod 3=0$\uff09\uff0c\u5176\u4e2d\u6709 $k$ \u4e2a impostor\uff08\u4fdd\u8bc1 $n< 3k< 2n$\uff09\u548c $n-k$ \u4e2a crewmate\uff0c\u4f46\u4f60\u4e0d\u77e5\u9053 $k$ \u5177\u4f53\u662f\u591a\u5c11\u3002\u4f60\u53ef\u4ee5\u8be2\u95ee\u81f3\u591a $n+6$ \u6b21\uff0c\u6bcf\u6b21\u7ed9\u51fa $a,b,c(1\\le a,b,c\\le n)$\uff0c\u4f60\u53ef\u4ee5\u5f97\u77e5 $a,b,c$ \u4e2d\u662f impostor \u591a\u8fd8\u662f crewmate \u591a\u3002\n\n\u627e\u5230\u6240\u6709\u7684 impostors\u3002\n\n## \u9898\u89e3\n\n### \u627e\u5230\u4efb\u610f\u4e00\u4e2a impostor \u548c\u4e00\u4e2a crewmate\n\n\u4e00\u4e2a\u7ed3\u8bba\u662f\uff0c\u5bf9\u4e8e\u56db\u4e2a\u4eba $x,y,z,w$\uff0c\u82e5\u8be2\u95ee $(x,y,z)$ \u548c $(y,z,w)$ \u5f97\u5230\u7684\u7ed3\u679c\u4e0d\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a $x$ \u548c $w$ \u7684\u8eab\u4efd\u3002\n\n\u5c06\u8fd9 $n$ \u4e2a\u4eba\u5206\u6210 $\\frac{n}{3}$ \u7ec4\uff0c\u7b2c $i$ \u7ec4\u662f $(3i-2,3i-1,3i)$\u3002\u82e5\u67d0\u4e00\u7ec4\u4e2d impostor \u66f4\u591a\uff0c\u5219\u79f0\u8fd9\u4e00\u7ec4\u662f $1$\uff1b\u5426\u5219\u8fd9\u4e00\u7ec4\u662f $0$\u3002\n\n\u7528 $\\frac{n}{3}$ \u6b21\u8be2\u95ee\u5f97\u5230\u6bcf\u7ec4\u662f $0$ \u8fd8\u662f $1$\u3002\u7531\u4e8e $\\frac{n}{3}<k<\\frac{2n}{3}$\uff0c\u6240\u4ee5\u4e00\u5b9a\u5b58\u5728\u4e00\u7ec4 $p$ \u6ee1\u8db3\u5b83\u662f $0$\uff1b\u4e5f\u4e00\u5b9a\u5b58\u5728\u4e00\u7ec4 $q$ \u6ee1\u8db3\u5b83\u662f $1$\u3002\n\n\u6211\u4eec\u8be2\u95ee $(3p-1,3p,3q-2),(3p,3q-2,3q-1)$\u3002\u6211\u4eec\u77e5\u9053\uff0c\u5728 $3p-2,3p-1,3p,3q-2,3q-1,3q$ \u4e2d\uff0c\u4e00\u5b9a\u6709\u76f8\u90bb\u7684\u56db\u4e2a\u4eba $x,y,z,w$ \u6ee1\u8db3 $(x,y,z)$ \u548c $(y,z,w)$ \u8be2\u95ee\u7684\u7ed3\u679c\u4e0d\u540c\u3002\u6839\u636e\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u516d\u4e2a\u4eba\u91cc\u627e\u5230\u4e00\u4e2a impostor \u548c\u4e00\u4e2a crewmate\uff0c\u4f7f\u7528\u4e86 $\\frac{n}{3}+2$ \u6b21\u64cd\u4f5c\u3002\n\n### \u786e\u5b9a\u6240\u6709\u4eba\u7684\u8eab\u4efd\n\n\u627e\u5230\u4e86\u4e00\u4e2a impostor \u548c\u4e00\u4e2a crewmate\uff0c\u8bbe\u5b83\u4eec\u5206\u522b\u662f $a$ \u548c $b$\u3002\n\n\u5bf9\u4e8e\u7b2c $i$ \u7ec4\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5b83\u662f $0$ \u8fd8\u662f $1$\u3002\u4e0d\u59a8\u8bbe\u5b83\u662f $0$\u3002\u6211\u4eec\u8be2\u95ee $(3i-2,3i-1,b)$\uff0c\u5206\u7c7b\u8ba8\u8bba\u8fd9\u4e2a\u8be2\u95ee\u7684\u7ed3\u679c\uff1a\n\n0. \u8bf4\u660e $3i-2$ \u548c $3i-1$ \u90fd\u662f impostor\u3002\u518d\u8be2\u95ee $(3i,a,b)$ \u5c31\u53ef\u4ee5\u5f97\u5230 $3i$ \u7684\u8eab\u4efd\u3002\n1. \u8bf4\u660e $3i$ \u4e00\u5b9a\u662f impostor\uff0c\u4e14 $3i-2$ \u548c $3i-1$ \u4e2d\u6070\u597d\u6709\u4e00\u4e2a impostor\u3002\u8be2\u95ee $(3i-2,a,b)$ \u5c31\u53ef\u4ee5\u5f97\u5230 $3i-2$ \u548c $3i-1$ \u7684\u8eab\u4efd\u3002\n\n\u82e5\u8fd9\u4e00\u7ec4\u662f $1$\uff0c\u7c7b\u4f3c\u5730\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\u3002\n\n\u603b\u5171\u4f7f\u7528\u4e86 $n+2$ \u6b21\u64cd\u4f5c\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n#define For(Ti,Ta,Tb) for(int Ti=(Ta);Ti<=(Tb);++Ti)\n#define Dec(Ti,Ta,Tb) for(int Ti=(Ta);Ti>=(Tb);--Ti)\n#define Debug(...) fprintf(stderr,__VA_ARGS__)\ntypedef long long ll;\nconst int N=1e4+5;\nint Query(int a,int b,int c){\n\tcout<<\"? \"<<a<<' '<<b<<' '<<c<<endl;\n\tint res;cin>>res;\n\treturn res;\n}\nint T,n,res[N];\nint main(){\n\tcin>>T;\n\twhile(T--){\n\t\tcin>>n;\n\t\tint _imp=0,_crm=0;\n\t\tFor(i,1,n/3){\n\t\t\tres[i]=Query(i*3-2,i*3-1,i*3);\n\t\t\tif(res[i]) _crm=i;\n\t\t\telse _imp=i;\n\t\t}\n\t\tint res1=Query(_imp*3-1,_imp*3,_crm*3-2),res2=Query(_imp*3,_crm*3-2,_crm*3-1),imp,crm;\n\t\tif(res[_imp]!=res1) imp=_imp*3-2,crm=_crm*3-2;\n\t\telse if(res1!=res2){\n\t\t\tif(res1) imp=_crm*3-1,crm=_imp*3-1;\n\t\t\telse imp=_imp*3-1,crm=_crm*3-1;\n\t\t}else imp=_imp*3,crm=_crm*3;\n\t\tvector<int> ans;\n\t\tans.push_back(imp);\n\t\tFor(i,1,n/3){\n\t\t\tif(_imp==i||_crm==i){\n\t\t\t\tFor(j,i*3-2,i*3) if(j!=imp&&j!=crm&&Query(j,imp,crm)==0) ans.push_back(j);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(res[i]){\n\t\t\t\tint x=Query(i*3-2,i*3-1,imp);\n\t\t\t\tif(x){if(Query(i*3,imp,crm)==0) ans.push_back(i*3);}\n\t\t\t\telse ans.push_back(Query(i*3-2,imp,crm)?i*3-1:i*3-2);\n\t\t\t}else{\n\t\t\t\tint x=Query(i*3-2,i*3-1,crm);\n\t\t\t\tif(!x){ans.push_back(i*3-2),ans.push_back(i*3-1);if(Query(i*3,imp,crm)==0) ans.push_back(i*3);}\n\t\t\t\telse ans.push_back(i*3),ans.push_back(Query(i*3-2,imp,crm)?i*3-1:i*3-2);\n\t\t\t}\n\t\t}\n\t\tsort(ans.begin(),ans.end());\n\t\tcout<<\"! \"<<ans.size()<<' ';\n\t\tfor(int x:ans) cout<<x<<' ';\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1639719311,
        "uid": 225625,
        "name": "Alan_Zhao",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1617D2\u3010Too Many Impostors\u3011"
    },
    {
        "content": "\u601d\u8def\u548c\u5b98\u65b9\u9898\u89e3\uff08\u4ee5\u53ca\u697c\u4e0a\u51e0\u4f4d\uff09\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7\u6709\u4e00\u70b9\u7ec6\u8282\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\n\n\u6211\u4eec\u627e\u5230\u4e00\u7ec4 $0$ \u548c\u4e00\u7ec4 $1$ \u4e4b\u540e\uff0c\u53ef\u4ee5\u518d\u7528 $5$ \u6b21\u8be2\u95ee\u76f4\u63a5\u786e\u5b9a\u4e24\u7ec4\u7ec4\u5185\u7684\u6240\u6709\u4eba\n\n\u600e\u4e48\u60f3\u5230\u7684\uff1f\u5bb9\u6613\u53d1\u73b0 $6$ \u4e2a\u4eba\u603b\u5171\u53ea\u6709 $20$ \u79cd\u8be2\u95ee\uff0c\u9664\u53bb\u6574\u7ec4\u7684\u4e24\u79cd\u53ea\u5269 $18$ \u79cd\uff0c\u66b4\u529b\u679a\u4e3e\u4e00\u4e0b\u54ea\u4e9b\u7ec4\u5408\u80fd\u786e\u5b9a\u5c31\u597d\u4e86\u3002\u3002\u3002\n\n\u5171\u9700\u8981 $n + 1$ \u6b21\u8be2\u95ee\n\n---\n\n\u679a\u4e3e\u8be2\u95ee\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <limits>\n#include <set>\n#include <vector>\n\nstruct Query {\n  unsigned pos[3];\n  bool result = false;\n\n  constexpr auto operator<=>(const Query &) const = default;\n};\n\nconstexpr unsigned SIZE = 6;\nconst Query fixedQueries[]{{{0, 1, 2}, false}, {{3, 4, 5}, true}};\n\nbool color[SIZE];\n\nunsigned minNums = std::numeric_limits<unsigned>::max();\nstd::vector<std::vector<Query>> optimalQueries;\n\nvoid getPossibleQueries(unsigned x, unsigned y, Query query,\n                        std::vector<Query> &v) {\n  if (y == 3) {\n    for (const auto &q : fixedQueries) {\n      if (q == query)\n        return;\n    }\n    v.push_back(query);\n    return;\n  }\n  if (x == SIZE)\n    return;\n  query.pos[y] = x;\n  getPossibleQueries(x + 1, y + 1, query, v);\n  getPossibleQueries(x + 1, y, query, v);\n}\n\nbool checkBasic() {\n  for (const auto &query : fixedQueries) {\n    unsigned cnt[2]{};\n    for (unsigned i = 0; i < 3; ++i)\n      ++cnt[color[query.pos[i]]];\n    if ((cnt[0] < cnt[1]) != query.result)\n      return false;\n  }\n  return true;\n}\n\nstd::vector<Query> getResults(const std::vector<Query> &queries) {\n  std::vector<Query> v;\n  for (const auto &query : queries) {\n    unsigned cnt[2]{};\n    for (unsigned i = 0; i < 3; ++i)\n      ++cnt[color[query.pos[i]]];\n    v.push_back({query.pos[0], query.pos[1], query.pos[2], cnt[1] > cnt[0]});\n  }\n  return v;\n}\n\nvoid updateAnswer(const std::vector<Query> &queries) {\n  if (queries.size() > minNums)\n    return;\n  std::set<std::vector<Query>> results;\n  for (unsigned i = 0; i < (1 << SIZE); ++i) {\n    for (unsigned j = 0; j < SIZE; ++j)\n      color[j] = (i >> j) & 1;\n    if (checkBasic() && !results.emplace(getResults(queries)).second)\n      return;\n  }\n  if (queries.size() < minNums) {\n    minNums = queries.size();\n    optimalQueries.clear();\n  }\n  optimalQueries.push_back(queries);\n}\n\nint main() {\n  std::vector<Query> possibleQueries;\n  getPossibleQueries(0, 0, {}, possibleQueries);\n  for (unsigned i = 0; i < (1U << possibleQueries.size()); ++i) {\n    std::vector<Query> queries;\n    for (unsigned j = 0; j < possibleQueries.size(); ++j) {\n      if ((i >> j) & 1)\n        queries.push_back(possibleQueries[j]);\n    }\n    updateAnswer(queries);\n  }\n  std::cout << \"Minimal number of queries: \" << minNums << std::endl;\n  for (const auto &queries : optimalQueries) {\n    bool flag = false;\n    for (const auto &query : queries) {\n      if (flag)\n        std::cout << \", \";\n      else\n        flag = true;\n      std::cout << '{' << query.pos[0] << \", \" << query.pos[1] << \", \"\n                << query.pos[2] << '}';\n    }\n    std::cout << std::endl;\n  }\n  return 0;\n}\n```\n\n---\n\n\u8fd9\u9898\u672c\u8eab\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#ifdef ONLINE_JUDGE\n#define NDEBUG\n#endif\n\n#include <cassert>\n#include <cstdlib>\n\n#include <bit>\n#include <iostream>\n#include <limits>\n#include <map>\n#include <utility>\n#include <vector>\n\nclass Interactor {\nprivate:\n  unsigned short n;\n\npublic:\n  unsigned short getN() {\n    unsigned short n;\n    std::cin >> n;\n    return n;\n  }\n\n  bool query(unsigned short pos1, unsigned short pos2, unsigned short pos3) {\n    int result;\n    std::cout << \"? \" << pos1 << ' ' << pos2 << ' ' << pos3 << std::endl;\n    std::cin >> result;\n    if (result != 0 && result != 1)\n      std::exit(0);\n    return result;\n  }\n\n  void answer(const std::vector<unsigned short> &v) {\n    std::cout << \"! \" << v.size();\n    for (const auto &p : v)\n      std::cout << ' ' << p;\n    std::cout << std::endl;\n  }\n} interactor;\n\nstd::vector<bool> types;\n\nconstexpr unsigned short NUM_OF_FIXED_QUERIES = 5;\nconstexpr unsigned short FIXED_QUERIES[NUM_OF_FIXED_QUERIES][3] = {\n    {0, 1, 4}, {0, 2, 5}, {0, 3, 5}, {1, 2, 3}, {1, 3, 4}};\n\nstd::pair<unsigned short, unsigned short>\ngetIndicator(unsigned short first0Block, unsigned short first1Block) {\n  std::map<unsigned short, unsigned short> resultToTypes;\n  for (unsigned short i = 0; i < (1U << 6U); ++i) {\n    unsigned short s = 0;\n    if (std::popcount(i & ((1U << 3U) - 1U)) > 1 ||\n        std::popcount<unsigned short>(i >> 3) < 2)\n      continue;\n    for (unsigned short j = 0; j < NUM_OF_FIXED_QUERIES; ++j) {\n      unsigned short cnt[2]{};\n      for (unsigned short k = 0; k < 3; ++k)\n        ++cnt[(i >> FIXED_QUERIES[j][k]) & 1];\n      if (cnt[1] > cnt[0])\n        s |= (1U << j);\n    }\n    resultToTypes.emplace(s, i);\n  }\n\n  unsigned short s = 0;\n  for (unsigned short i = 0; i < NUM_OF_FIXED_QUERIES; ++i) {\n    unsigned short pos[3];\n    for (unsigned short j = 0; j < 3; ++j)\n      pos[j] = FIXED_QUERIES[i][j] < 3\n                   ? first0Block * 3 + FIXED_QUERIES[i][j] + 1\n                   : first1Block * 3 + FIXED_QUERIES[i][j] - 2;\n    const auto t = interactor.query(pos[0], pos[1], pos[2]);\n    if (t)\n      s |= (1U << i);\n  }\n\n  assert(resultToTypes.count(s));\n  const auto typesInBlocks = resultToTypes[s];\n  std::pair<unsigned short, unsigned short> indicator{0, 0};\n  for (unsigned short i = 0; i < 6; ++i) {\n    const auto realPos =\n        i < 3 ? first0Block * 3 + i + 1 : first1Block * 3 + i - 2;\n    if ((typesInBlocks >> i) & 1) {\n      if (!indicator.second)\n        indicator.second = realPos;\n    } else {\n      if (!indicator.first)\n        indicator.first = realPos;\n    }\n    types[realPos] = (typesInBlocks >> i) & 1;\n  }\n  assert(indicator.first && indicator.second);\n  return indicator;\n}\n\nvoid determine(unsigned short block, bool blockType,\n               std::pair<unsigned short, unsigned short> indicator) {\n  const unsigned short p[3]{block * 3 + 1, block * 3 + 2, block * 3 + 3};\n  if (blockType) {\n    const auto s1 = interactor.query(indicator.first, p[0], p[1]);\n    if (s1) {\n      const auto s2 = interactor.query(indicator.first, indicator.second, p[2]);\n      types[p[0]] = true;\n      types[p[1]] = true;\n      types[p[2]] = s2;\n    } else {\n      const auto s2 = interactor.query(indicator.first, indicator.second, p[0]);\n      types[p[0]] = s2;\n      types[p[1]] = !s2;\n      types[p[2]] = true;\n    }\n  } else {\n    const auto s1 = interactor.query(indicator.second, p[0], p[1]);\n    if (s1) {\n      const auto s2 = interactor.query(indicator.first, indicator.second, p[0]);\n      types[p[0]] = s2;\n      types[p[1]] = !s2;\n      types[p[2]] = false;\n    } else {\n      const auto s2 = interactor.query(indicator.first, indicator.second, p[2]);\n      types[p[0]] = false;\n      types[p[1]] = false;\n      types[p[2]] = s2;\n    }\n  }\n}\n\nint main() {\n  unsigned short t;\n  std::cin >> t;\n  while (t--) {\n    unsigned short n = interactor.getN(),\n                   first0Block = std::numeric_limits<unsigned short>::max(),\n                   first1Block = std::numeric_limits<unsigned short>::max();\n    std::pair<unsigned short, unsigned short> indicator;\n    std::vector<unsigned short> v;\n    std::vector<bool> blockType(n / 3);\n    types.resize(n + 1);\n    for (unsigned short i = 0; i < n / 3; ++i) {\n      blockType[i] = interactor.query(i * 3 + 1, i * 3 + 2, i * 3 + 3);\n      if (blockType[i]) {\n        if (first1Block == std::numeric_limits<unsigned short>::max())\n          first1Block = i;\n      } else {\n        if (first0Block == std::numeric_limits<unsigned short>::max())\n          first0Block = i;\n      }\n    }\n    assert(first0Block != std::numeric_limits<unsigned short>::max() &&\n           first1Block != std::numeric_limits<unsigned short>::max());\n    indicator = getIndicator(first0Block, first1Block);\n    for (unsigned short i = 0; i < n / 3; ++i) {\n      if (i == first0Block || i == first1Block)\n        continue;\n      determine(i, blockType[i], indicator);\n    }\n    for (unsigned short i = 1; i <= n; ++i) {\n      if (!types[i])\n        v.push_back(i);\n    }\n    interactor.answer(v);\n  }\n  return 0;\n}\n```",
        "postTime": 1640609033,
        "uid": 110634,
        "name": "zhanghengrui",
        "ccfLevel": 9,
        "title": "CF1617D Too Many Impostors \u9898\u89e3"
    },
    {
        "content": "### Preface\n\n\u76f8\u4fe1\u8bfb\u8005\u4eec\u90fd\u4f1a\u4e86 Easy version \u7684\u89e3\u6cd5\u4e86\u3002\n\n\u8fd9\u9898\u7684**\u6838\u5fc3\u60f3\u6cd5**\u5728\u4e8e**\u901a\u8fc7\u77e5\u9053\u4e00\u5bf9 \"0+1\" \u540e\u4e0e\u53e6\u4e00\u4e2a\u6570\u8fdb\u884c\u8be2\u95ee\u6765\u786e\u5b9a\u8fd9\u4e2a\u6570\u7684\u503c**\u3002\n\n### Analysis\n\n**\u4e0b\u6587\u4e2d\u6240\u6709 $m$ \u5747\u6307\u4ee3 $\\dfrac{n}{3}$\u3002**\n\n\u53d1\u73b0\u8be2\u95ee\u6b21\u6570\u9650\u5236\u751a\u81f3\u51cf\u5c11\u4e86\u4e00\u534a\uff01\u8003\u8651\u4f18\u5316\u3002\n\n1. \u5148\u786e\u5b9a\u4e00\u4e2a $0$ \u4f4d\u7f6e\u548c\u4e00\u4e2a $1$ \u4f4d\u7f6e\uff0c\u6211\u4eec\u7528 $m+8$ \u6b21\u8be2\u95ee\u4e4b\u5185\u5b9e\u73b0\u3002\n\n2. \u518d\u901a\u8fc7 \"0+1\" \u7ec4\u5408\u786e\u5b9a\u5269\u4e0b\u4f4d\u7f6e\u7684\u503c\uff0c\u7528 $2(m-2)$ \u6b21\u5b9e\u73b0\u3002\n\n\u6211\u4eec\u5c06\u4eba\u6309\u8fde\u7eed $3$ \u4e2a\u4e3a\u4e00\u7ec4\u5206\u7ec4\uff0c\u7ec4\u5206\u522b\u7f16\u53f7\u4e3a $1,2,\\dots,m$\uff0c\u6211\u4eec\u5c06\u6bcf\u7ec4 $3$ \u4e2a\u90fd\u8be2\u95ee\u4e00\u904d\uff0c\u56de\u7b54\u8bb0\u4e3a $a_1,a_2,\\dots,a_m$\uff0c\u7531\u4e8e $0$ \u4e2a\u6570\u7684\u9650\u5236\uff1a\n\n$$\\exists i\\in [1,m],a_i=0\\land a_{i\\%m+1}=1$$\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u8d85\u8fc7 $8$ \u6b21\u77e5\u9053\u7ec4 $i,i+1$ \u4e2d $6$ \u4e2a\u503c\uff08\u4e0b\u6587 Function A\uff09\uff0c\u800c\u8fd9\u4e4b\u4e2d\u5fc5\u6709 \"0+1\" \u7684\u7ec4\u5408\u3002\n\n\u6211\u4eec\u7528\u8fd9\u4e00\u5bf9 \"0+1\" \u53bb\u6c42\u5176\u4ed6 $m-2$ \u7ec4\u7684\u503c\uff0c\u6bcf\u4e00\u7ec4\u53ea\u8981 $2$ \u6b21\u5373\u53ef\uff08\u4e0b\u6587 Function B\uff09\u3002\n\n\u6700\u540e\u8f93\u51fa $0$ \u7684\u4e2a\u6570\u548c\u4f4d\u7f6e\u5373\u53ef\u3002\n\n#### Function A\n\n\u8bb0\u8fd9 $6$ \u4e2a\u8fde\u7eed\u7684\u4f4d\u7f6e\u5206\u522b\u4e3a $0,1,\\dots,5$\uff0c\u5148\u8be2\u95ee $(0,1,3)$ \u548c $(0,1,4)$\u3002\u82e5\u4e24\u4e2a\u8be2\u95ee\u7b54\u6848\u4e0d\u7b49\uff0c\u5219 $(0,1)$ \u5373\u4e3a \"0+1\"\uff1b\u82e5\u5747\u4e3a $0$ \u5219\u786e\u5b9a $(0,1)$ \u5747\u4e3a $0$\uff0c\u518d\u901a\u8fc7\u8be2\u95ee $(0,3,4)$ \u5373\u53ef\u786e\u5b9a \"0+1\"\uff1b\u4e24\u4e2a\u8be2\u95ee\u5747\u4e3a $1$ \u7684\u60c5\u51b5\u4e0e $0$ \u7c7b\u4f3c\u3002\u4e0d\u61c2\u770b\u4ee3\u7801\u3002\n\n\u786e\u5b9a\u4e86 \"0+1\" \u540e\u518d $4$ \u6b21\u786e\u5b9a\u5269\u4e0b\u7684 $4$ \u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u518d\u901a\u8fc7\u5979\u4eec $4$ \u4e2a\u8fd4\u56de\u6765\u786e\u5b9a \"0+1\" \u7684 $0,1$ \u5206\u522b\u5bf9\u5e94\u5173\u7cfb\u3002\n\n#### Function B\n\n\u6211\u4eec\u4ee5 $a_i=0$ \u7684\u60c5\u51b5\u4e3a\u4f8b\uff0c$a_i=1$ \u4e0e\u4e4b\u76f8\u53cd\u5bf9\u79f0\u3002\n\n\u7c7b\u4f3c\u4e8e Function A\uff0c\u8bb0\u8fd9 $3$ \u4e2a\u8fde\u7eed\u7684\u4f4d\u7f6e\u5206\u522b\u4e3a $0,1,2$\u3002\n\n\u8bbe \"0+1\" \u4e2d $0,1$ \u5206\u522b\u5bf9\u5e94 $A,B$\u3002\n\n\u5148\u8be2\u95ee $(B,1,2)$ \u5982\u679c\u7b54\u6848\u4e3a $1$ \u8868\u793a $0$ \u7684\u503c\u5fc5\u5b9a\u4e3a $0$\uff0c\u518d\u901a\u8fc7\u4e00\u6b21\u8be2\u95ee\u6c42\u51fa $1,2$ \u7684\u503c\uff1b\u5982\u679c\u7b54\u6848\u4e3a $0$\uff0c\u90a3\u4e48 $1,2$ \u7684\u503c\u5747\u4e3a $0$\uff0c\u518d\u901a\u8fc7\u4e00\u6b21\u8be2\u95ee\u6c42\u51fa $0$ \u7684\u503c\u3002\n\n### Code\n\n[Link](https://codeforces.com/contest/1617/submission/140167999)",
        "postTime": 1640092593,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "CF1617D2 Too Many Impostors (hard version)"
    },
    {
        "content": "# CF1617D2\n#### \u9898\u610f\u7b80\u8ff0\n- \u6709 $n$ \u4e2a\u4eba\uff08$n$ \u662f $3$ \u7684\u500d\u6570\uff09\uff0c\u5176\u4e2d\u6709 $k$ \u4e2a\u662f\u9a97\u5b50\uff08$\\frac{n}{3}<k<\\frac{2n}{3}$\uff09\uff0c\u5176\u4f59\u4eba\u662f\u666e\u901a\u4eba\u3002\n- \u4f60\u53ef\u4ee5\u8fdb\u884c\u82e5\u5e72\u6b21\u8be2\u95ee\uff0c\u5982 `? a b c` \u6240\u793a\uff08\u8981\u6c42 $a,b,c$ \u4e92\u4e0d\u76f8\u540c\u4e14\u90fd\u5728 $1\\sim n$\uff09\u3002\n- \u4f5c\u4e3a\u5bf9\u8be2\u95ee\u7684\u56de\u7b54\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u6574\u6570 $0$ \u6216 $1$\u3002\u82e5\u4e3a $0$\uff0c\u8868\u793a\u7f16\u53f7\u4e3a $a,b,c$ \u7684\u4e09\u4e2a\u4eba\u4e2d\uff0c\u9a97\u5b50\u591a\u4e8e\u666e\u901a\u4eba\uff1b\u82e5\u4e3a $1$\uff0c\u8868\u793a\u666e\u901a\u4eba\u591a\u4e8e\u9a97\u5b50\u3002\n- \u8fdb\u884c\u6700\u591a $n+6$ \u6b21\u8be2\u95ee\uff0c\u627e\u5230\u9a97\u5b50\u7684\u6570\u91cf\u548c\u6240\u6709\u9a97\u5b50\u7684\u7f16\u53f7\u3002\n- $6 \\leq n < 10^4$\uff0c\u6570\u636e\u7ec4\u6570\u6ee1\u8db3 $1 \\leq t \\leq 100$\u3002\n\n#### \u9898\u76ee\u5206\u6790\n**\u8bf7\u786e\u4fdd\u60a8\u5df2\u7ecf\u660e\u767d CF1617D1\uff08\u672c\u9898\u5f31\u5316\u7248\uff09\u7684\u57fa\u672c\u601d\u8def\u3002**\n\n\u9996\u5148\uff0c\u6211\u4eec\u7684\u6838\u5fc3\u4ecd\u662f\u627e\u5230\u4e24\u4e2a\u8eab\u4efd\u4e0d\u540c\u7684\u4eba\uff0c\u5e76\u501f\u52a9\u4ed6\u4eec\u627e\u5230\u5176\u4ed6\u4eba\u7684\u8eab\u4efd\u3002\n\n\u672c\u9898\u53ea\u5141\u8bb8\u6211\u4eec\u8fdb\u884c $n+6$ \u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u9700\u8981\u66f4\u9ad8\u6548\u5730\u627e\u51fa\u4e24\u4e2a\u8eab\u4efd\u4e0d\u540c\u7684\u4eba\u3002\u6ce8\u610f\u5230 $n$ \u662f $3$ \u7684\u500d\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c06\u6bcf $3$ \u4e2a\u4eba\u5206\u5230\u4e00\u7ec4\uff08\u6ce8\u610f\uff0c\u5404\u7ec4\u4e4b\u95f4\u65e0\u4ea4\u96c6\uff09\uff0c\u5e76\u5bf9\u6bcf\u4e00\u7ec4\u8fdb\u884c\u63d0\u95ee\u3002\n\n\u56e0\u4e3a $\\frac{n}{3}<k<\\frac{2n}{3}$\uff0c\u6240\u4ee5\u4e00\u5b9a\u5b58\u5728\u76f8\u90bb\u7684\u4e24\u7ec4\u7b54\u6848\u4e0d\u540c\u3002\u6211\u4eec\u8bbe\u8fd9\u4e24\u7ec4\u4e3a $\\{i,i+1,i+2\\}$ \u548c $\\{i+3,i+4,i+5\\}$\u3002\n\n\u8003\u8651\u5728\u8fd9 $6$ \u4e2a\u4eba\u4e4b\u4e2d\u5bf9\u76f8\u90bb\u7684 $3$ \u4e2a\u4eba\u8fdb\u884c\u63d0\u95ee\uff08\u5982 D1 \u4e2d\u7684\u505a\u6cd5\uff09\u3002\u56e0\u4e3a\u4e24\u7ec4\u7684\u7b54\u6848\u4e0d\u540c\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a $j \\in \\{i,i+1,i+2\\}$\uff0c\u4f7f\u5f97 $\\{j,j+1,j+2\\}$ \u548c $\\{j+1,j+2,j+3\\}$ \u7684\u7b54\u6848\u4e0d\u540c\u3002\u6b64\u65f6\u6211\u4eec\u77e5\u9053 $j+1$ \u548c $j+2$ \u8eab\u4efd\u4e0d\u540c\uff0c\u518d\u6839\u636e $\\{j,j+1,j+2\\}$ \u548c $\\{j+1,j+2,j+3\\}$ \u7684\u7b54\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 $j$ \u548c $j+3$ \u7684**\u786e\u5207\u8eab\u4efd**\u3002\n\n\u6b64\u65f6\u6211\u4eec\u518d\u7528 $j$ \u548c $j+3$ \u5bf9\u4e0a\u9762\u7684 $i\\sim i+5$ \u516d\u4e2a\u4eba\u4e2d\u7684\u5176\u4ed6\u4eba\u63d0\u95ee\uff0c\u5373\u53ef\u77e5\u9053\u8fd9\u516d\u4e2a\u4eba\u7684\u8eab\u4efd\u3002\u73b0\u5728\u6211\u4eec\u4e00\u5171\u7528\u6389\u4e86 $\\frac{n}{3}+6$ \u6b21\u8be2\u95ee\u673a\u4f1a\uff0c\u8fd8\u5269\u4e0b $\\frac{2n}{3}$ \u6b21\u3002\u6211\u4eec\u9700\u8981\u627e\u5230\u5176\u4ed6\u4eba\u7684\u8eab\u4efd\u3002\n\n\u8003\u8651\u5229\u7528\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u7684\u4fe1\u606f\uff1a\u6bcf\u4e00\u7ec4\u4e09\u4e2a\u4eba\u7684\u7b54\u6848\u3002\u5bf9\u4e8e\u7b54\u6848\u4e3a $0$ \u7684\u7ec4 $\\{i,i+1,i+2\\}$\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5df2\u77e5\u7684\u666e\u901a\u4eba\u548c $i,i+1$\uff0c$i+1,i+2$ \u5206\u522b\u63d0\u51fa\u4e24\u6b21\u8be2\u95ee\uff0c\u5373\u53ef\u77e5\u9053\u8fd9\u4e09\u4e2a\u4eba\u7684\u5177\u4f53\u8eab\u4efd\u3002\u539f\u6765\u7b54\u6848\u4e3a $1$ \u7684\u7ec4\u540c\u7406\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u4f7f\u7528 $n+2$ \u6b21\u8be2\u95ee\uff0c\u627e\u5230\u4e86\u6240\u6709\u4eba\u7684\u8eab\u4efd\u3002\n\nCode\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint t,n,a[10010],tot;\nint ans[10010],cnt;\nint main()\n{\n\tscanf(\"%d\",&t);\n\twhile(t--)\n\t{\n\t\tscanf(\"%d\",&n);\n\t\ttot=0;\n\t\tfor(int i=1;i<=n;i+=3)\n\t\t{\n\t\t\tprintf(\"? %d %d %d\\n\",i,i+1,i+2);\n\t\t\tfflush(stdout);\n\t\t\tscanf(\"%d\",&a[(i-1)/3+1]);\n\t\t}\n\t\ttot=n/3;\n\t\tint p;\n\t\tfor(int i=1;i<tot;i++)\n\t\t\tif(a[i]!=a[i+1]){p=i;break;}\n\t\tint lst=a[p];\n\t\tint crew=0,impo=0;cnt=0;\n\t\tfor(int i=p*3-1,rec;i<=p*3;i++)\n\t\t{\n\t\t\tprintf(\"? %d %d %d\\n\",i,i+1,i+2);\n\t\t\tfflush(stdout);\n\t\t\tscanf(\"%d\",&rec);\n\t\t\tif(rec!=lst)\n\t\t\t{\t\n\t\t\t\tif(rec==0)ans[++cnt]=i+2,crew=i-1,impo=i+2;\n\t\t\t\telse ans[++cnt]=i-1,crew=i+2,impo=i-1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlst=rec;\n\t\t}\n\t\tif(!crew&&!impo)\n\t\t{\n\t\t\tif(a[p+1]!=lst)\n\t\t\t{\t\n\t\t\t\tif(a[p+1]==0)ans[++cnt]=p*3+3,crew=p*3,impo=p*3+3;\n\t\t\t\telse ans[++cnt]=p*3,crew=p*3+3,impo=p*3;\n\t\t\t}\t\n\t\t}\n\t\tfor(int i=p*3-2,rec;i<=p*3+3;i++)\n\t\t{\n\t\t\tif(crew==i||impo==i)continue;\n\t\t\tprintf(\"? %d %d %d\\n\",i,crew,impo);\n\t\t\tfflush(stdout);\n\t\t\tscanf(\"%d\",&rec);\n\t\t\tif(rec==0)ans[++cnt]=i;\n\t\t}\n\t\tfor(int i=1;i<=tot;i++)\n\t\t{\n\t\t\tif(i==p||i==p+1)continue;\n\t\t\tint a1,a2;\n\t\t\tif(a[i]==0)\n\t\t\t{\n\t\t\t\tprintf(\"? %d %d %d\\n\",i*3-2,i*3-1,crew);\n\t\t\t\tfflush(stdout);\n\t\t\t\tscanf(\"%d\",&a1);\n\t\t\t\tif(a1==0)\n\t\t\t\t{\n\t\t\t\t\tans[++cnt]=i*3-2,ans[++cnt]=i*3-1;\n\t\t\t\t\tprintf(\"? %d %d %d\\n\",i*3,crew,impo);\n\t\t\t\t\tfflush(stdout);\n\t\t\t\t\tscanf(\"%d\",&a2);\n\t\t\t\t\tif(a2==0)ans[++cnt]=i*3;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprintf(\"? %d %d %d\\n\",i*3-1,i*3,crew);\n\t\t\t\t\tfflush(stdout);\n\t\t\t\t\tscanf(\"%d\",&a2);\n\t\t\t\t\tif(a2==1)ans[++cnt]=i*3-2,ans[++cnt]=i*3;\n\t\t\t\t\telse ans[++cnt]=i*3-1,ans[++cnt]=i*3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprintf(\"? %d %d %d\\n\",i*3-2,i*3-1,impo);\n\t\t\t\tfflush(stdout);\n\t\t\t\tscanf(\"%d\",&a1);\n\t\t\t\tif(a1==1)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"? %d %d %d\\n\",i*3,crew,impo);\n\t\t\t\t\tfflush(stdout);\n\t\t\t\t\tscanf(\"%d\",&a2);\n\t\t\t\t\tif(a2==0)ans[++cnt]=i*3; \n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprintf(\"? %d %d %d\\n\",i*3-1,i*3,impo);\n\t\t\t\t\tfflush(stdout);\n\t\t\t\t\tscanf(\"%d\",&a2);\n\t\t\t\t\tif(a2==0)ans[++cnt]=i*3-1;\n\t\t\t\t\telse ans[++cnt]=i*3-2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"! %d \",cnt);\n\t\tfor(int i=1;i<=cnt;i++)printf(\"%d \",ans[i]);\n\t\tputs(\"\");\n\t\tfflush(stdout);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1639740534,
        "uid": 333574,
        "name": "Tyyyyyy",
        "ccfLevel": 7,
        "title": "CF1617D2\u9898\u89e3"
    }
]