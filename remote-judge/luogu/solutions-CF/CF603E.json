[
    {
        "content": "\u6765\u4e00\u7bc7\u5199\u5f97\u6e05\u695a\u4e00\u70b9\u7684\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\n\n___\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u8fd9\u4e2a\u9898\u76ee\u7684\u9650\u5236 \uff0c`\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5947\u6570` \uff0c\u7684\u672c\u8d28\u662f\u4ec0\u4e48\u3002\n\n\u624b\u73a9\u51e0\u4e2a\u56fe\uff0c\u73c2\u4ee5\u53d1\u73b0\u4e00\u4e2a\u5f88\u5f3a\u7684\u7ed3\u8bba\uff1a\n\n\u8fd9\u4e2a\u9650\u5236\u7b49\u4ef7\u4e8e \u201c\u8fd9\u4e2a\u56fe\u4e2d\u53ea\u5b58\u5728\u5927\u5c0f\u4e3a**\u5076\u6570**\u7684\u8fde\u901a\u5757\u201d\u3002\n\n\u8bc1\u660e\uff1a\n\n- \u5fc5\u8981\u6027\uff1a\u5047\u8bbe\u5b58\u5728\u5947\u6570\u5927\u5c0f\u7684\u8fde\u901a\u5757\uff0c\u7531\u4e8e\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u90fd\u4e3a\u5947\u6570\uff0c\u6240\u6709\u6240\u6709\u5ea6\u6570\u4e4b\u548c\u4e5f\u4e3a\u5947\u6570\u3002\u7136\u800c\u6bcf\u4e00\u6761\u8fb9\u90fd\u5bf9\u603b\u5ea6\u6570\u8d21\u732e\u4e14\u53ea\u8d21\u732e\u4e86 **2**\uff0c\u6240\u4ee5**\u603b\u5ea6\u6570\u5fc5\u7136\u662f\u5076\u6570**\u3002\u8fd9\u5c31\u4e0e\u5047\u8bbe\u77db\u76fe\u3002\u6240\u4ee5\u53ea\u6709\u5fc5\u7136\u53ea\u5b58\u5728\u5076\u6570\u5927\u5c0f\u7684\u8fde\u901a\u5757\u3002\n\n- \u5145\u5206\u6027\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5076\u6570\u5927\u5c0f\u7684\u8fde\u901a\u5757\uff0c\u968f\u4fbf\u62ff\u51fa\u5b83\u7684\u4e00\u9897\u751f\u6210\u6811\uff0c\u4ece\u5e95\u5411\u4e0a\u8dd1\u4e00\u904d\u8fd9\u4e2a\u7b97\u6cd5\uff1a\n\n\t- \u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u513f\u5b50\u8fde\u4e0a\u6765\u7684\u8fb9\u6570\u4e3a\u5076\u6570\uff0c\u5c31\u8fde\u4e0a\u4ed6\u4e0e\u7236\u4eb2\u7684\u8fb9\uff0c\u53cd\u4e4b\u5219\u4e0d\u7136\u3002\n  \n  \u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u6837\u7684\u6784\u9020\u53ef\u4ee5\u6ee1\u8db3\u9664\u4e86\u6839\u7684\u6240\u6709\u8282\u70b9\u7684\u9650\u5236\u3002\n  \n  \u7136\u800c\u56e0\u4e3a\u8fd9\u4e2a\u8fde\u901a\u5757\u5185\u9664\u6839\u5916\u5176\u4ed6\u8282\u70b9\u7684\u6570\u91cf\u662f\u5947\u6570\uff0c\u800c\u8fd9\u4e9b\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5947\u6570\uff0c\u800c\u5305\u62ec\u6839\u7684\u603b\u5ea6\u6570\u662f\u5076\u6570\uff0c\u6240\u4ee5\u6839\u7684\u5ea6\u6570\u81ea\u7136\u4e5f\u662f\u5947\u6570\u3002\n\n\u8bc1\u660e\u5b8c\u7ed3\u8bba\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u8003\u8651 `\u6700\u5c0f\u5316\u8fb9\u96c6\u4e2d\u7684\u6700\u5927\u8fb9\u6743` \u7684\u8fd9\u4e2a\u9650\u5236\u4e86\u3002\n\n\u5f88\u660e\u663e\uff0c\u8fd9\u4e2a\u6761\u4ef6\u4e00\u770b\u5c31\u5f88\u6709**\u6700\u5c0f\u74f6\u9888\u751f\u6210\u6811**\u7684\u611f\u89c9\uff0c\u800c\u6700\u5c0f\u74f6\u9888\u751f\u6210\u6811\u7684\u89e3\u51b3\u65b9\u5f0f\u5e94\u8be5\u4eba\u4eba\u7686\u77e5\u3002Kruskal\uff0c\u5373\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\u4e3a\u6b62\u3002\n\n~~\u8fd9\u4e2a\u9898\u5e94\u8be5\u4e0d\u4f1a\u6709\u4eba\u56e0\u4e3a\u5728\u8fd9\u91cc\u60f3\u5230 Prim \u7136\u540e\u6389\u8fdb\u7caa\u5751\u5427~~\n\n\u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u95ee\u9898\u7684\u9759\u6001\u7248\u672c\u7684\u89e3\u6cd5\uff1a\n\n- **\u628a\u8fb9\u6309\u6743\u503c\u6392\u5e8f**\uff0c\u7528\u5e76\u67e5\u96c6\u65f6\u523b\u7ef4\u62a4\u4e00\u4e0b\u5947\u8fde\u901a\u5757\u7684\u6570\u76ee\u5c31\u884c\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u600e\u4e48\u628a\u8fd9\u4e2a\u7b97\u6cd5\u6269\u5c55\u5230\u52a8\u6001\u52a0\u8fb9\u3002\n\n\u4e0d\u96be\u60f3\u5230\u7684\u662f\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u60f3\u8981\u652f\u6301\u52a8\u6001\u52a0\u8fb9\u4e14\u4fdd\u8bc1\u590d\u6742\u5ea6\u57fa\u672c\u662f\u80e1\u626f\u3002\n\n\u56e0\u4e3a\u5728\u6392\u5e8f\u540e\u7684\u8fb9\u96c6\u7684\u4e2d\u95f4\u52a0\u8fb9\u5c31\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6574\u5f20\u56fe\u7684\u5f62\u6001\u4ece\u90a3\u91cc\u5f00\u59cb\u53d8\u5316\uff0c\u4ece\u800c\u5f71\u54cd\u7b54\u6848\uff0c\u800c\u8fd9\u4e2a\u5f71\u54cd\u6211\u4eec\u662f\u65e0\u6cd5\u5feb\u901f\u7b97\u51fa\u7684\u3002\n\n\u4f46\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u8003\u8651\u4e00\u4e0b\u52a0\u8fb9\u7684\u8fc7\u7a0b\uff0c\u53d1\u73b0\uff1a\u4e00\u6761\u8fb9\u5982\u679c\u8fdb\u5165\u65f6\u5c31\u6ca1\u6709\u8fdb\u5165\u6700\u4f18\u8fb9\u96c6\uff0c\u90a3\u4e48\u5c31\u518d\u4e5f\u4e0d\u4f1a\u8fdb\u5165\uff1b\u4e00\u6761\u8fb9\u4e00\u65e6\u88ab\u6dd8\u6c70\uff0c\u5c31\u518d\u4e5f\u4e0d\u4f1a\u56de\u6765\u3002\n\n\u8bf4\u660e\uff1a\u6bcf\u4e00\u6761\u8fb9\u6709\u4e00\u4e2a\u5f71\u54cd\u8303\u56f4\uff0c\u53ea\u6709\u8fd9\u4e2a\u8303\u56f4\u5185\u8fd9\u6761\u8fb9\u624d\u4f1a\u88ab\u7eb3\u5165\u6700\u4f18\u8fb9\u96c6\u4e2d\u3002\n\n**\u5f71\u54cd\u8303\u56f4 & \u65f6\u95f4\u8f74 -> \u7ebf\u6bb5\u6811\u5206\u6cbb\u3002**\n\n\u63a5\u4e0b\u6765\u5c31\u8003\u8651\u600e\u4e48\u6c42\u51fa\u6bcf\u6761\u8fb9\u7684\u5f71\u54cd\u533a\u95f4\u3002\n\n\u8003\u8651\u5728\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u8bbf\u95ee\u5230\u4e00\u4e2a\u53f6\u5b50\uff0c\u6211\u4eec\u90fd\u5fc5\u7136\u9700\u8981\u540e\u79fb Kruskal \u7684\u6307\u9488\uff0c\u5c06\u65b0\u7684\u5408\u6cd5\u7684\u8fb9\u7eb3\u5165\u7b54\u6848\u76f4\u5230\u5408\u6cd5\u4e3a\u6b62\u3002\u90a3\u4e48\u8fd9\u4e2a\u65f6\u95f4\u70b9\u5c31\u662f\u8fd9\u6761\u8fb9\u7684\u5f71\u54cd\u8303\u56f4\u7684\u7ed3\u675f\u4f4d\u7f6e\uff0c\u800c\u6211\u4eec\u53c8\u77e5\u9053\u6bcf\u4e00\u6761\u8fb9\u7684\u51fa\u73b0\u65f6\u95f4\uff0c\u4e8e\u662f\u4e8b\u60c5\u5c31\u597d\u8d77\u6765\u4e86\u3002\n\n\n\n\u6ce8\u610f\uff1a\u5206\u6cbb\u65f6\u5e94\u5f53**\u4ece\u53f3\u5230\u5de6**\u9012\u5f52\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u8981\u4f9d\u6b21\u5bf9\u6bcf\u4e00\u4e2a\u65f6\u95f4\u70b9\u6c42\u51fa\u7b54\u6848\uff0c\u7136\u540e\u901a\u8fc7\u7b54\u6848\u8ba1\u7b97\u88ab\u6700\u4f18\u8fb9\u96c6\u5305\u542b\u7684\u8fb9\u5f71\u54cd\u533a\u95f4\u3002\u5982\u679c\u4ece\u5de6\u5230\u53f3\u7684\u8bdd\uff0c\u5f97\u4e0d\u5230\u6bcf\u4e00\u6761\u8fb9\u7684\u5f71\u54cd\u533a\u95f4\u7684\u7ed3\u675f\u4f4d\u7f6e\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u8fb9\u5206\u6cbb\u8fb9 cover \u7684\u5904\u7406\u8fc7\u7a0b\uff0c\u76f4\u63a5\u7ebf\u6bb5\u6811\u5206\u6cbb\u8d77\u6765\u53ef\u80fd\u4f1a\u6709\u70b9\u5c0f\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u95f4\u70b9\u4e0a cover \u4e0a\u7684\u8fb9\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u64a4\u56de\u6389\u3002\n\n\u8fd9\u4e5f\u5f88\u7b80\u5355\u554a\uff0c\u53ea cover \u5230\u5f53\u524d\u65f6\u95f4\u51cf\u4e00\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u4e2a\u70b9\u4e0a cover \u4e0a\u7684\u8fb9\u5728\u8fd9\u4e2a\u70b9\u76f4\u63a5\u64a4\u56de\u5c31\u5b8c\u4e8b\u4e86\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u539f\u7406\u4e5f\u5f88\u597d\u7406\u89e3\uff1a\n\n\u6211\u4eec\u6bcf\u6b21\u5728\u53f6\u5b50\u8282\u70b9\u627e\u7b54\u6848\uff0c\u7956\u5148\u8282\u70b9\u4e0a cover \u4e0a\u7684\u65f6\u95f4\u6233\u5fc5\u7136\u5408\u6cd5\uff0c\u5728\u8fd9\u4e2a\u70b9\u4e0a cover \u4e0a\u7684\u8fb9\u4e5f\u4f1a\u56e0\u4e3a\u5224\u65ad\u800c\u53ea\u52a0\u8d77\u59cb\u65f6\u95f4\u5728\u5f53\u524d\u65f6\u95f4\u70b9\u4e4b\u524d\u7684\u8fb9\u3002\n\n\u539f\u672c\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u56e0\u4e3a\u6bcf\u4e00\u6b21\u66b4\u529b\u52a0\u8fb9\u800c\u53d8\u5f97\u4e0d\u53ef\u63a5\u53d7\u3002\n\n\u800c\u901a\u8fc7\u8ba1\u7b97\u51b3\u7b56\u7684\u5f71\u54cd\u8303\u56f4\u4e0e\u5c06\u8fd9\u4e9b\u8303\u56f4\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u5c31\u51cf\u5c11\u4e86\u5927\u91cf\u7684\u91cd\u590d\u8ba1\u7b97\u3002\n\n\u603b\u7684\u590d\u6742\u5ea6\u8fd8\u662f\u7ecf\u5178\u7684 $O(m \\log m \\log n)$\u3002\n\n___\n\n\u4ee3\u7801\u533a\uff1a\n\n\u81ea\u8ba4\u4e3a\u4ee3\u7801\u5199\u7684\u6bd4\u8f83\u597d\u770b\u2026\u2026\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nconst int maxn = 3e5+5;\nint n,m,pos,ans[maxn],odd;\nstruct Edge{\n\tint x,y,v,id;\n\tbool operator <(Edge b){return v<b.v;}\n}e[maxn];\nstruct ch{int x,y,dlt;};\nch st[maxn];\nint fa[maxn],siz[maxn],top;\nint getfa(int x){return fa[x] == x ? x : getfa(fa[x]);}\nstd :: vector <Edge> vec[maxn<<2];\nvoid cover(int k,int l,int r,int x,int y,Edge v){\n\tif(l>y||r<x||x>y)return ;\n\tif(l>=x&&r<=y)return vec[k].push_back(v),void();\n\tint mid = l+r>>1;\n\tcover(k<<1,l,mid,x,y,v),cover(k<<1|1,mid+1,r,x,y,v);\n}\nvoid trymerge(int x,int y){\n\tint fx = getfa(x),fy = getfa(y);\n\tif(fx != fy){\n\t\tif(siz[fx]<siz[fy])fx^=fy^=fx^=fy;\n\t\tst[++top] = (ch){fx,fy,0};\n\t\tif(siz[fx]%2==1&&siz[fy]%2==1)odd-=2,st[top].dlt+=2;\n\t\tsiz[fx] += siz[fy],fa[fy] = fx;\n\t}\n}\nvoid getans(int k,int l,int r){\n\tint pretop = top;\n\tfor(int i=0;i<vec[k].size();++i)trymerge(vec[k][i].x,vec[k][i].y);\n\tint mid = l+r>>1;\n\tif(l == r){\n\t\twhile(1){\n\t\t\tif(odd == 0 || pos == m)break;\n\t\t\tif(e[pos+1].id <= l){\n\t\t\t\ttrymerge(e[pos+1].x,e[pos+1].y);\n\t\t\t\tcover(1,1,m,e[pos+1].id,l-1,e[pos+1]);\n\t\t\t}\n\t\t\t++pos;\n\t\t}\n\t\tif(odd == 0)ans[l] = e[pos].v;\n\t\telse ans[l] = -1;\n\t}\n\telse getans(k<<1|1,mid+1,r),getans(k<<1,l,mid);\n\twhile(top^pretop){\n\t\tint x = st[top].x,y = st[top].y,dlt=st[top].dlt;\n\t\tsiz[x] -= siz[y],fa[y] = y,odd += dlt,--top;\n\t}\n}\nint main(){\n\tscanf(\"%d %d\",&n,&m),odd = n;\n\tfor(int i=1;i<=n;++i)fa[i] = i,siz[i] = 1;\n\tfor(int i=1;i<=m;++i)scanf(\"%d %d %d\",&e[i].x,&e[i].y,&e[i].v),e[i].id = i;\n\tstd::sort(e+1,e+m+1),getans(1,1,m);\n\tfor(int i=1;i<=m;++i)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1616064121,
        "uid": 114153,
        "name": "Sali\u0435ri",
        "ccfLevel": 7,
        "title": "CF603E \u9898\u89e3"
    },
    {
        "content": "> [CF603E Pastoral Oddities](https://codeforces.com/contest/603/problem/E)\n\n## \u9898\u610f\n\n- \u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u521d\u59cb\u6ca1\u6709\u8fb9\u3002\n- \u4f9d\u6b21\u52a0\u5165 $m$ \u6761\u5e26\u6743\u7684\u8fb9\uff0c\u6bcf\u6b21\u52a0\u5165\u540e\u8be2\u95ee\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u8fb9\u96c6\uff0c\u6ee1\u8db3\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u5747\u4e3a\u5947\u6570\u3002\n- \u82e5\u5b58\u5728\uff0c\u5219\u8fd8\u9700\u8981\u6700\u5c0f\u5316\u8fb9\u96c6\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u3002\n- $n \\le 10^5$\uff0c$m \\le 3 \\times 10^5$\u3002\n\n## \u9898\u89e3\n\n\u5bf9\u4e8e\u4e00\u4e2a $n$ \u4e2a\u70b9\u7684\u8fde\u901a\u5757\uff0c\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u96c6\u7684\u5145\u8981\u6761\u4ef6\u4e3a $n$ \u662f\u5076\u6570\uff0c\u56e0\u4e3a\u82e5 $n$ \u662f\u5947\u6570\uff0c\u7531\u4e8e\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5947\u6570\uff0c\u56e0\u6b64\u603b\u5ea6\u6570\u4e3a\u5947\u6570\uff0c\u4f46\u7531\u4e8e\u6bcf\u6761\u8fb9\u4f1a\u4ea7\u751f\u7684\u5ea6\u6570\u4e3a $2$\uff0c\u56e0\u6b64\u77db\u76fe\u3002\n\n\u90a3\u5982\u679c $n$ \u4e3a\u5076\u6570\uff0c\u662f\u5426\u610f\u5473\u7740\u4e00\u5b9a\u5b58\u5728\u5462\uff1f\u7b54\u6848\u663e\u7136\u662f\u80af\u5b9a\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u51fa\u6765\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u7136\u540e\u4ece\u53f6\u5b50\u5f00\u59cb\uff0c\u4e00\u4e2a\u70b9\u4e0e\u5176\u7236\u4eb2\u7684\u8fde\u8fb9\u4fdd\u7559\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u70b9\u4e0e\u5176\u6240\u6709\u513f\u5b50\u7684\u8fde\u8fb9\u6570\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6784\u9020\u51fa\u6765\u4e86\u3002\n\n\u56e0\u6b64\u8fd9\u5f20\u56fe\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u96c6\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u70b9\u6570\u5747\u4e3a\u5076\u6570\u3002\n\n\u6211\u4eec\u63a5\u4e0b\u6765\u518d\u8003\u8651\uff0c\u5bf9\u4e8e\u4e00\u5f20\u7ed9\u5b9a\u7684\u9759\u6001\u56fe\uff0c\u5982\u4f55\u6700\u5c0f\u5316\u8fb9\u96c6\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u5462\uff1f\n\n\u8003\u8651 kruskal \u7b97\u6cd5\uff0c\u7531\u4e8e\u52a0\u5165\u8fb9\u4e0d\u4f1a\u4f7f\u7b54\u6848\u53d8\u52a3\uff0c\u56e0\u6b64\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u70b9\u6570\uff0c\u76f4\u5230\u52a0\u5165\u67d0\u6761\u8fb9\u540e\uff0c\u6ee1\u8db3\u6240\u6709\u8fde\u901a\u5757\u7684\u70b9\u6570\u5747\u4e3a\u5076\u6570\uff0c\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u5c31\u662f\u7b54\u6848\u3002\n\n\u6269\u5c55\u5230\u52a8\u6001\u52a0\u8fb9\uff0c\u6211\u4eec\u91c7\u7528 LCT \u7ef4\u62a4\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u6700\u5c0f\u751f\u6210\u6811\u7ed3\u6784\u53ca\u5927\u5c0f\uff0c\u540c\u65f6\u7528\u5927\u6839\u5806\u7ef4\u62a4\u6240\u6709\u5728\u68ee\u6797\u4e2d\u7684\u8fb9\u3002\n\n\u6bcf\u5f53\u6211\u4eec\u52a0\u5165\u4e00\u6761\u8fb9\u540e\uff0c\u6211\u4eec\u4e0d\u65ad\u5730\u5c1d\u8bd5\u5220\u9664\u5f53\u524d\u68ee\u6797\u4e2d\u8fb9\u6743\u6700\u5927\u7684\u8fb9\uff0c\u76f4\u5230\u5220\u9664\u4e86\u67d0\u6761\u8fb9\u540e\u51fa\u73b0\u4e86\u5947\u6570\u5927\u5c0f\u7684\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u5c31\u662f\u7b54\u6848\u3002\n\n\u7531\u4e8e\u6211\u4eec\u9700\u8981\u77e5\u9053\u5f53\u524d\u662f\u5426\u5b58\u5728\u5947\u6570\u5927\u5c0f\u7684\u8fde\u901a\u5757\uff0c\u8fd9\u91cc\u7684 LCT \u9700\u8981\u91c7\u7528\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u7684\u6280\u5de7\uff0c\u5373\u989d\u5916\u7ef4\u62a4\u4e00\u4e2a\u865a\u5b50\u6811\u7684\u4fe1\u606f\u603b\u548c\uff0c\u5728 $\\operatorname{access}$ \u548c $\\operatorname{link}$ \u7684\u65f6\u5019\u66f4\u65b0\u3002\n\n\u663e\u7136\u6bcf\u6761\u8fb9\u6700\u591a\u88ab\u5220\u6389\u4e00\u6b21\uff0c\u56e0\u6b64\u5728 $n,m$ \u540c\u9636\u7684\u60c5\u51b5\u4e0b\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n \\log n)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\nconst int N = 4e5 + 7, M = 3e5 + 7;\nint n, m, x[M], y[M], z[M], v[M], cnt;\npq<pair<int, int>> q;\n\nstruct LCT {\n\tint f[N], ch[N][2], s[N], v[N], a[N], c[N], d[N];\n\t#define lc ch[p][0]\n\t#define rc ch[p][1]\n\t#define get(p) (p == ch[f[p]][1])\n\t#define rev(p) v[p] ^= 1, swap(ch[p][0], ch[p][1])\n\t#define isrt(p) (ch[f[p]][0] != p && ch[f[p]][1] != p)\n\tinline void upd(int p) {\n\t\ts[p] = s[ch[p][0]] + s[ch[p][1]] + d[p] + (p <= n);\n\t\tint o = a[c[lc]] > a[c[rc]] ? c[lc] : c[rc];\n\t\tc[p] = a[o] > a[p] ? o : p;\n\t}\n\tinline void spd(int p) {\n\t\tif (p && v[p]) {\n\t\t\tif (lc) rev(lc);\n\t\t\tif (rc) rev(rc);\n\t\t\tv[p] = 0;\n\t\t}\n\t}\n\tinline void rot(int p) {\n\t\tint x = f[p], y = f[x], u = get(p), v = get(x), o = isrt(x);\n\t\tf[ch[p][u^1]] = x, ch[x][u] = ch[p][u^1];\n\t\tf[x] = p, ch[p][u^1] = x, upd(x), upd(p);\n\t\tif ((f[p] = y) && !o) ch[y][v] = p;\n\t}\n\tvoid pre(int p) {\n\t\tif (!isrt(p)) pre(f[p]);\n\t\tspd(p);\n\t}\n\tinline void splay(int p) {\n\t\tpre(p);\n\t\tfor (int x = f[p]; x = f[p], !isrt(p); rot(p))\n\t\t\tif (!isrt(x)) rot(get(p) == get(x) ? x : p);\n\t}\n\tinline void access(int p) {\n\t\tfor (int x = 0; p; p = f[x=p])\n\t\t\tsplay(p), d[p] += s[rc], d[p] -= s[rc=x], upd(p);\n\t}\n\tinline void mkrt(int p) {\n\t\taccess(p), splay(p), rev(p);\n\t}\n\tinline void split(int x, int y) {\n\t\tmkrt(x), access(y), splay(y);\n\t}\n\tinline int fdrt(int p) {\n\t\taccess(p), splay(p);\n\t\twhile (lc) spd(p), p = lc;\n\t\treturn splay(p), p;\n\t}\n\tinline void link(int x, int y) {\n\t\tmkrt(x), access(y), splay(y), cnt -= s[x] & 1, cnt -= s[y] & 1;\n\t\td[f[x]=y] += s[x], upd(y), cnt += s[y] & 1;\n\t}\n\tinline void cut(int x, int y) {\n\t\tsplit(x, y), cnt -= s[y] & 1;\n\t\tf[x] = ch[y][0] = 0, upd(y), cnt += s[x] & 1, cnt += s[y] & 1;\n\t}\n\tinline int add(int i) {\n\t\tint x = ::x[i], y = ::y[i], z = ::z[i];\n\t\tbool ok = 1;\n\t\tif (fdrt(x) == fdrt(y)) {\n\t\t\tsplit(x, y);\n\t\t\tint o = c[y];\n\t\t\tif (a[o] > z) cut(::x[o-n], o), cut(::y[o-n], o), v[o] = 1;\n\t\t\telse ok = 0;\n\t\t}\n\t\tif (ok) {\n\t\t\ts[i+n] = 1, a[i+n] = z, c[i+n] = i + n;\n\t\t\tlink(x, i + n), link(y, i + n), q.push(mp(z, i));\n\t\t}\n\t\tif (cnt) return -1;\n\t\twhile (q.size()) {\n\t\t\tint o = q.top().se;\n\t\t\tq.pop();\n\t\t\tif (::v[o]) continue;\n\t\t\tcut(::x[o], o + n), cut(::y[o], o + n);\n\t\t\tif (cnt) {\n\t\t\t\tlink(::x[o], o + n), link(::y[o], o + n);\n\t\t\t\treturn q.push(mp(::z[o], o)), ::z[o];\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n} lct;\n\nint main() {\n\trd(n), rd(m), cnt = n;\n\tfor (int i = 1; i <= n; i++) lct.s[i] = 1, lct.c[i] = i;\n\tfor (int i = 1; i <= m; i++)\n\t\trd(x[i]), rd(y[i]), rd(z[i]), print(lct.add(i));\n\treturn 0;\n}\n```",
        "postTime": 1580637746,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF603E \u3010Pastoral Oddities\u3011"
    },
    {
        "content": "## Preface\n\n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u590d\u6742\u5ea6\u4e3a $O(mlognlogm)$ \u7684**\u6574\u4f53\u4e8c\u5206**\u505a\u6cd5\u3002\n\n## Problem\n\n[CF603E Pastoral Oddities\uff08\u6574\u4f53\u4e8c\u5206\uff09](https://www.luogu.com.cn/problem/CF603E)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/q8ervcoj.png)\n\n## Solution\n\n**\u6574\u4f53\u4e8c\u5206+\u53ef\u64a4\u9500\u5e76\u67e5\u96c6**\n\n\u795e\u4ed9\u601d\u8def\u3002\n\n\u9996\u5148\u505a\u8fd9\u4e2a\u9898\u5fc5\u987b\u8981\u5148\u624b\u73a9\u6837\u4f8b\u63a8\u51fa\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a\u5f53\u4e00\u4e2a\u56fe\u53ef\u4ee5\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u5f53\u4e14\u4ec5\u5f53\u9014\u4e2d\u6240\u6709\u8fde\u901a\u5757\u7684\u5927\u5c0f\u90fd\u662f\u5076\u6570\u3002\n\n\u8fd9\u91cc\u5c31\u6682\u4e0d\u8d58\u8ff0\u5177\u4f53\u7684\u505a\u6cd5\u4e86\uff0c\u6211\u4eec\u91cd\u70b9\u5728\u4e8e\u6574\u4f53\u4e8c\u5206\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u53ef\u4ee5\u4e8c\u5206\uff0c\u800c\u4e14\u56e0\u4e3a\u6211\u4eec\u4e0d\u65ad\u5730\u52a0\u8fb9\uff0c\u7b54\u6848\u80af\u5b9a\u8d8a\u6765\u8d8a\u4f18\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b54\u6848\u5355\u8c03\u4e0d\u5347\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6574\u4f53\u4e8c\u5206\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u6765\u4e8c\u5206\uff1a$Solve(ql,qr,vl,vr)$ \u8868\u793a\u5f53\u524d\u6211\u4eec\u8981\u5904\u7406\u7684\u8be2\u95ee\u533a\u95f4\u662f $[ql,qr]$ \uff0c\u4e14\u8fd9\u4e9b\u8be2\u95ee\u7684\u7b54\u6848\u4e00\u5b9a\u5728 $val_vl$ ~ $val_vr$ \u4e4b\u95f4\u3002\uff08\u5047\u8bbe\u4e8b\u5148\u5bf9\u4e8e\u8fb9\u96c6\u4ee5\u6743\u503c\u4e3a\u5173\u952e\u5b57\u6392\u8fc7\u5e8f\uff0c\u5e76\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u4e86\u4e0b\u6765\uff09\n\n\u6ce8\u610f\uff1a\u8fd9\u91cc\u7684 $[vl,vr]$ \u662f\u4e0b\u6807\u533a\u95f4\uff0c\u5177\u4f53\u6765\u8bf4\u662f\u6240\u6709\u8fb9\u6309\u8fb9\u6743\u6392\u5b8c\u5e8f\u8fc7\u540e\u7684\u4e0b\u6807\u533a\u95f4\u3002\n\n\u63a5\u4e0b\u6765\u60f3\u4e00\u4e0b\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u5206\u6cbb\u5177\u4f53\u600e\u4e48\u505a\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u5728\u5904\u7406\u5230\u5f53\u524d\u533a\u95f4\u4e4b\u524d\uff0c\u8981\u5148\u4fdd\u8bc1\uff1a\u533a\u95f4 $[1,ql]$ \u7684\u6240\u6709\u503c $\\leq val_{vl}$ \u7684\u8fb9\u90fd\u5728\u6211\u4eec\u5f53\u524d\u7684\u8fb9\u96c6\u5185\u3002\n\n\u7136\u540e\u6211\u4eec\u624d\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\uff0c\u6211\u4eec\u6bcf\u6b21\u4e8c\u5206 $mid=ql+qr>>1$ \uff0c\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5c31\u76f8\u5f53\u4e8e\u662f\u5728\u6743\u503c\u4e3a $val_{vl+1}$ ~ $val_{vr}$ \u4e14\u7f16\u53f7\u5728 $[ql,qr]$ \u4e2d \u7684\u533a\u95f4\u5f53\u4e2d\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u7684\u70b9 $MID$ \u4f7f\u5f97\u8fd9\u4e2a\u56fe\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u90a3\u4e48\u56e0\u4e3a\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u6392\u8fc7\u5e8f\u5e76\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u4e0b\u6765\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u4e0d\u505c\u7684\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\u6216\u52a0\u5b8c\u6240\u6709\u7684\u8fb9\u4e3a\u6b62\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u8fd9\u4e2a\u70b9\u8bb0\u4f5c $MID$\u3002\uff08 $MID$ \u4e00\u5b9a\u662f $[vl,vr]$ \u4e0a\u7684\u3002\uff09\n\n\u7136\u540e\u6211\u4eec\u5224\u65ad\u5f53\u524d\u72b6\u6001\u4e0b\u56fe\u662f\u5426\u6ee1\u8db3\u5f62\u6001\uff0c\u66f4\u65b0\u4e00\u4e0b $Ans[Q[mid].id]$ \u3002\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5c31\u628a\u533a\u95f4\u5206\u6210\u4e86\u5de6\u53f3\u4e24\u534a\uff0c\u8981\u9012\u5f52\u7684\u5b50\u533a\u95f4\u660e\u663e\u662f $Solve(ql,mid-1,MID,vr)$ \u548c $Solve(mid+1,qr,vl,MID)$ \u3002\uff08\u8fd8\u662f\u56e0\u4e3a\u7b54\u6848\u7684\u5355\u8c03\u4e0d\u4e0a\u5347\u3002\uff09\n\n\u4f46\u662f\u5728\u8fdb\u5165\u4e4b\u524d\u6211\u4eec\u90fd\u8981\u5148\u5904\u7406\u4e00\u4e0b\u8fb9\u96c6\uff1a\n\n\u4e5f\u5c31\u662f\u6211\u4eec\u5148\u8fd8\u539f\u6211\u4eec\u5728\u5f53\u524d\u533a\u95f4\u7684\u6240\u6709\u64cd\u4f5c\uff08\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u5373\u53ef\uff09\uff0c\u7136\u540e\u5728\u9012\u5f52\u5de6\u8fb9\u4e4b\u524d\uff0c\u5148\u628a\u8fb9\u6743\u5728 $val_{vl}$ ~ $val_{MID}$ \u5f53\u4e2d\u4e14\u8fb9\u7684\u7f16\u53f7\u5728 $[1,ql]$ \u4e2d\u7684\u8fb9\u5168\u90e8\u52a0\u8fdb\u53bb\u3002\n\n\u5728\u9012\u5f52\u53f3\u8fb9\u4e4b\u524d\uff0c\u5148\u8fd8\u539f\u5de6\u8fb9\u7684\u5f71\u54cd\uff0c\u7136\u540e\u628a\u7f16\u53f7\u5728 $[ql,mid]$ \u4e14\u6743\u503c $\\leq val_{vl}$ \u7684\u8fb9\u52a0\u5165\u3002\n\n\u7136\u540e\u8bb0\u5f97\u6211\u4eec\u8fd9\u91cc\u7684\u201c\u56fe\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u201d\u7684\u72b6\u6001\u662f\u5728\u5168\u5c40\u7ef4\u62a4\u7684\uff08\u4ee3\u7801\u91cc\u5c31\u662f $Now$ \uff09\uff0c\u7ef4\u62a4\u7684\u662f\u5947\u6570\u8fde\u901a\u5757\u4e2a\u6570\u3002\n\n\u6700\u540e\u5c31\u662f\u5e76\u67e5\u96c6\u8981\u6309\u79e9\u5408\u5e76\uff08\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u57fa\u64cd\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(mlogmlogn)$\n\n## Code\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\ninline void read(T &x){\n\tx=0;char ch=getchar();bool f=false;\n\twhile(!isdigit(ch)){if(ch=='-'){f=true;}ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n\tx=f?-x:x;\n\treturn ;\n}\ntemplate <typename T>\ninline void write(T x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) write(x/10);\n\tputchar(x%10^48);\n\treturn ;\n}\nconst int N=4e5+5;\nint n,m,Now,Ans[N];\nstruct Query{\n\tint x,y,v,id;\n}Q[N],P[N];//\u5176\u4e2dP\u662f\u8fb9\u96c6\u6309\u7167\u8fb9\u6743\u6392\u5e8f\u5f97\u5230\u7684\u7ed3\u679c\uff0cQ\u5c31\u662f\u6b63\u5e38\u8fb9\u96c6\u3002 \ninline bool Cmp(Query a,Query b){return (a.v==b.v)?(a.id<b.id):(a.v<b.v);}\nnamespace DSU{//\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\uff08\u6309\u79e9\u5408\u5e76\uff09 \n\tint fa[N],siz[N],top;\n\tstruct _Node{int x,y,fa1,fa2,siz1,siz2;}sta[N];\n\tvoid PreWork(){\n\t\ttop=0;\n\t\tfor(int i=1;i<=n;i++) fa[i]=i,siz[i]=1;\n\t\treturn ;\n\t}\n\tint Getfa(int x){return x==fa[x]?x:Getfa(fa[x]);}\n\tvoid Merge(int x,int y){\n\t\tint fx=Getfa(x),fy=Getfa(y);\n\t\tif(fx==fy) return ;\n\t\tif(siz[fx]>siz[fy]) swap(fx,fy);\n\t\tif((siz[fx]&1)&&(siz[fy]&1)) Now-=2;\n\t\tsta[++top].x=fx,sta[top].fa1=fx;\n\t\tsta[top].y=fy,sta[top].fa2=fy;\n\t\tsta[top].siz1=siz[fx],sta[top].siz2=siz[fy];\n\t\tfa[fx]=fy,siz[fy]+=siz[fx];\n\t\treturn ;\n\t}\n\tvoid Return(){\n\t\tfa[sta[top].x]=sta[top].fa1,siz[sta[top].x]=sta[top].siz1;\n\t\tfa[sta[top].y]=sta[top].fa2,siz[sta[top].y]=sta[top].siz2;\n\t\tNow+=((sta[top].siz1&1)&&(sta[top].siz2&1))*2;\n\t\ttop--;return ;\n\t}\n};\nusing namespace DSU;\nnamespace Solve{\n\tvoid Solve(int vl,int vr,int ql,int qr){//\u5904\u7406\u4e0b\u6807\u5728 ql-qr \u7684\u7b54\u6848\uff0c\u4e14\u7b54\u6848\u4e00\u5b9a\u5728\u533a\u95f4\u4e0b\u6807\u4e3a vl-vr \u5f53\u4e2d\u3002 \n\t\tif(ql>qr) return ;\n\t\tint mid=ql+qr>>1,now=top,NOW=vl,MID; //\u4ee5 ans[mid] \u4e3a\u57fa\u51c6\u5904\u7406\u5de6\u53f3\u533a\u95f4 \n\t\t\n\t\tfor(int i=ql;i<=mid;i++) if(P[i].v<=vl) Merge(P[i].x,P[i].y); \n\t\tfor(int i=vl;i<=vr&&Now;i++,NOW++) if(Q[i].id<=mid) Merge(Q[i].x,Q[i].y);\n\t\tMID=max(NOW-1,vl);\n\t\t//\u66f4\u65b0\u5f53\u524d mid \u70b9\u7684\u7b54\u6848 \n\t\tif(!Now) Ans[P[mid].id]=Q[MID].v;\n\t\telse Ans[P[mid].id]=-1;\n\t\twhile(top>now) Return();\n\t\t//\u5de6\u533a\u95f4 \n\t\tfor(int i=vl;i<=MID;i++) if(Q[i].id<=ql) Merge(Q[i].x,Q[i].y);\n\t\tSolve(MID,vr,ql,mid-1);\n\t\twhile(top>now) Return();\n\t\t//\u53f3\u533a\u95f4 \n\t\tfor(int i=ql;i<=mid;i++) if(P[i].v<=vl) Merge(P[i].x,P[i].y);\n\t\tSolve(vl,MID,mid+1,qr);\n\t\twhile(top>now) Return();\n\t\t\n\t\treturn ;\n\t}\n}\nnamespace Main{\n\tvoid main(){\n\t\tread(n),read(m);\n\t\tfor(int i=1,x,y,v;i<=m;i++){\n\t\t\tread(x),read(y),read(v);\n\t\t\tQ[i]=Query{x,y,v,i};\n\t\t\tP[i]=Q[i];\n\t\t}\n\t\tsort(Q+1,Q+m+1,Cmp);\n\t\tfor(int i=1;i<=m;i++) P[Q[i].id].v=i;\n\t\tNow=n;\n\t\tPreWork();\n\t\tSolve::Solve(1,m,1,m);\n\t\tfor(int i=1;i<=m;i++) printf(\"%d\\n\",Ans[i]);\n\t\treturn ;\n\t}\n};\nint main(){\n\tMain::main();\n    return 0;\n}\n```  ",
        "postTime": 1616688190,
        "uid": 130387,
        "name": "_Anchor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF603E Pastoral Oddities"
    },
    {
        "content": "[\u9898\u76ee](http://codeforces.com/problemset/problem/603/E)\n\n\u7ecf\u8fc7\u5927\u529b\u624b\u73a9\u4e0d\u96be\u53d1\u73b0\u5b58\u5728\u4e00\u4e2a\u8fb9\u96c6\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5947\u6570\u7684\u5145\u8981\u6761\u4ef6\u662f**\u4e0d\u5b58\u5728\u5947\u6570\u4e2a\u70b9\u7684\u8054\u901a\u5757**\u3002\n\n\u8003\u8651\u8bc1\u660e\u5947\u6570\u4e2a\u70b9\u7684\u8054\u901a\u5757\u4e00\u5b9a\u4e0d\u5408\u6cd5\u3002\u521a\u5f00\u59cb\u6240\u6709\u70b9\u5ea6\u6570\u5747\u4e3a\u5076\u6570\uff0c\u8003\u8651\u52a0\u5165\u4e00\u6761\u8fb9$(u,v)$\u7684\u5f71\u54cd\uff1a\n\n- $u,v$\u5ea6\u6570\u5747\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u52a0\u5165$(u,v)$\u540e\u4e24\u70b9\u5ea6\u6570\u5747\u53d8\u4e3a\u5947\u6570\uff0c\u5947\u5ea6\u70b9\u4e2a\u6570\u589e\u52a0$2$\u3002\n\n- $u,v$\u5ea6\u6570\u5747\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u52a0\u5165$(u,v)$\u540e\u4e24\u70b9\u5ea6\u6570\u5747\u53d8\u4e3a\u5076\u6570\uff0c\u5947\u5ea6\u70b9\u4e2a\u6570\u51cf\u5c11$2$\u3002\n\n- $u,v$\u5ea6\u6570\u4e00\u5947\u4e00\u5076\uff0c\u90a3\u4e48\u52a0\u5165$(u,v)$\u4e4b\u540e\u5947\u5076\u6027\u4ea4\u6362\uff0c\u5947\u5ea6\u70b9\u4e2a\u6570\u4e0d\u53d8\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u52a0\u5165\u4e00\u6761\u8fb9\u4f1a\u4ee4\u5947\u5ea6\u70b9\u4e2a\u6570$+2,-2$\u6216\u4e0d\u53d8\uff0c\u4e8e\u662f\u5947\u5ea6\u70b9\u4e2a\u6570\u59cb\u7ec8\u4e3a\u5076\u6570\uff0c\u4e0d\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u5947\u6570\u4e2a\u70b9\u7684\u8054\u901a\u5757\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u5bf9\u4e8e\u5076\u6570\u4e2a\u70b9\u7684\u8054\u901a\u5757\uff0c\u53ef\u4ee5\u76f4\u63a5\u627e\u51fa\u5176\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4e4b\u540e\u7528\u4e00\u5c42\u5c42\u5220\u53f6\u5b50\u7684\u65b9\u6cd5\u5c31\u80fd\u6784\u9020\u51fa\u4e00\u4e2a\u5408\u6cd5\u7684\u8fb9\u96c6\u3002\n\n\u73b0\u5728\u7684\u6211\u4eec\u9700\u8981\u6c42\u51fa\u4e00\u4e2a\u8fb9\u96c6\uff0c\u4f7f\u5f97\u6240\u6709\u8054\u901a\u5757\u5747\u6709\u5076\u6570\u4e2a\u70b9\uff0c\u4e14\u6700\u5c0f\u5316\u6700\u5927\u8fb9\u96c6\u3002\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u7c7b\u4f3c\u4e8ekruskal\u7684\u505a\u6cd5\uff0c\u5373\u5c06\u6240\u6709\u8fb9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\u5757\u7684\u70b9\u6570\uff0c\u987a\u6b21\u52a0\u5165\u6bcf\u4e00\u6761\u8fb9\uff0c\u76f4\u5230\u4e0d\u5b58\u5728\u5947\u6570\u4e2a\u70b9\u7684\u8054\u901a\u5757\u4e3a\u6b62\u3002\n\n\u8003\u8651\u5230\u52a0\u5165\u8fb9\u7684\u8fc7\u7a0b\u4e2d\u7b54\u6848\u662f\u4e0d\u5347\u7684\uff0c\u5373\u52a0\u5165\u4e00\u6761\u8fb9\u540e\u7b54\u6848\u4e0d\u53ef\u80fd\u53d8\u5927\uff0c\u4e8e\u662f\u8003\u8651\u7528cdq\u5206\u6cbb\u6765\u89e3\u51b3\u95ee\u9898\u3002\n\n\u8bbe\u5f53\u524d\u6211\u4eec\u5904\u7406\u7684\u662f$[l,r]$\u5185\u7684\u8fb9\uff0c\u4e14\u7b54\u6848\u5728$[x,y]$\u4e2d\uff1b\u6211\u4eec\u4fdd\u8bc1\uff0c\u52a0\u5165\u65f6\u95f4\u5728$[1,l)$\u4e14\u6743\u503c\u5c0f\u4e8e$x$\u7684\u90fd\u5df2\u7ecf\u88ab\u52a0\u5165\u4e86\u3002\u5c1d\u8bd5\u6c42\u51fa$ans_{mid}$\uff0c\u8fd9\u6837\u5c31\u80fd\u5206\u6cbb\u5230$[l,mid-1,ans_{mid},y]$\u548c$[mid+1,r,x,ans_{mid}]$\u53bb\u5904\u7406\u3002\n\n\u6211\u4eec\u5148\u5c06$[l,mid]$\u4e2d\u8fb9\u6743\u5c0f\u4e8e$x$\u7684\u8fb9\u52a0\u5165\uff0c\u4e4b\u540e\u5728\u4ece\u5c0f\u5230\u5927\u52a0\u5165\u6743\u503c\u5728$[x,y]$\u4e4b\u95f4\u7684\u8fb9\uff1b\u4e00\u65e6\u6ee1\u8db3\u6761\u4ef6\u5c31\u505c\u6b62\uff0c\u6b64\u65f6\u6700\u540e\u52a0\u5165\u7684\u8fb9\u7684\u8fb9\u6743\u5c31\u662f$ans_{mid}$\u3002\n\n\u5f53\u5f80\u4e0b\u5206\u6cbb\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u6027\u8d28\u7ee7\u7eed\u6ee1\u8db3\uff1b\u4e8e\u662f\u5206\u6cbb\u5de6\u533a\u95f4\u7684\u65f6\u5019\u9700\u8981\u628a\u6743\u503c\u5c0f\u4e8e$ans_{mid}$\u7684\u8fb9\u4e2d\u51fa\u73b0\u65f6\u95f4\u5c0f\u4e8e$l$\u7684\u8fb9\u52a0\u5165\uff0c\u5206\u6cbb\u53f3\u533a\u95f4\u7684\u65f6\u5019\u9700\u8981\u628a\u51fa\u73b0\u65f6\u95f4\u5c0f\u4e8e$mid+1$\u7684\u8fb9\u4e2d\u6743\u503c\u5c0f\u4e8e$x$\u7684\u52a0\u5165\u3002\n\n\u7531\u4e8e\u5206\u6cbb\u5b8c\u540e\u8981\u64a4\u56de\u65b0\u52a0\u5165\u7684\u8fb9\uff0c\u4e8e\u662f\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u652f\u6301\u64a4\u56de\u7684\u5e76\u67e5\u96c6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(m\\log m\\log n)$\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\ninline int read() {\n\tchar c=getchar();int x=0;while(c<'0'||c>'9')c=getchar();\n\twhile(c>='0'&&c<='9')x=(x<<3)+(x<<1)+c-48,c=getchar();return x;\n}\nconst int maxn=1e5+5,maxm=3e5+5;\nstruct Edge{int u,v,t,w;}e[maxm],E[maxm];\nint n,m,ans[maxm],id[maxm];\ninline int cmp(const Edge &A,const Edge &B) {return A.w<B.w;}\nstruct dsu{\n\tint fa[maxn],sz[maxn],tot,top,st[maxn];\n\tinline void bud() {\n\t\ttot=n;for(re int i=1;i<=n;i++)fa[i]=i,sz[i]=1;\n\t}\n\tinline int find(int x) {\n\t\twhile(x!=fa[x])x=fa[x];return x;\n\t}\n\tinline void lnk(int x,int y) {\n\t\tx=find(x),y=find(y);if(x==y) return;\n\t\tif(sz[x]<sz[y]) x^=y,y^=x,x^=y;\n\t\tfa[y]=x;tot-=(sz[x]&1),tot-=(sz[y]&1);\n\t\tsz[x]+=sz[y];tot+=(sz[x]&1);st[++top]=y;\n\t}\n\tinline void back() {\n\t\tint y=st[top--],x=fa[y];\n\t\ttot-=(sz[x]&1);sz[x]-=sz[y];fa[y]=y;\n\t\ttot+=(sz[x]&1);tot+=(sz[y]&1);\n\t}\n}S;\nvoid cdq(int l,int r,int x,int y) {\n\tif(l>r) return;\n\tint mid=l+r>>1,pre=S.top;\n\tfor(re int i=l;i<=mid;++i)\n\t\tif(id[i]<x) S.lnk(E[i].u,E[i].v);\n\tfor(re int i=x;i<=y;++i) {\n\t\tif(e[i].t<=mid) S.lnk(e[i].u,e[i].v); \n\t\tif(!S.tot) {ans[mid]=i;break;}\n\t}\n\twhile(S.top>pre) S.back();\n\tif(!ans[mid]) {\n\t\tfor(re int i=l;i<=mid;++i) \n\t\t\tif(id[i]<x) S.lnk(E[i].u,E[i].v);\n\t\tcdq(mid+1,r,x,y);\n\t\twhile(S.top>pre) S.back();\n\t\treturn;\t\n\t}\n\tfor(re int i=l;i<=mid;++i) \n\t\tif(id[i]<x) S.lnk(E[i].u,E[i].v);\n\tcdq(mid+1,r,x,ans[mid]);\n\twhile(S.top>pre) S.back();\n\tfor(re int i=x;i<ans[mid];++i) \n\t\tif(e[i].t<l) S.lnk(e[i].u,e[i].v);\n\tcdq(l,mid-1,ans[mid],y);\n\twhile(S.top>pre) S.back();\n\t\n}\nint main() {\n\tn=read(),m=read();S.bud();\n\tfor(re int i=1;i<=m;i++)\n\t\te[i].t=i,e[i].u=read(),e[i].v=read(),e[i].w=read(); \n\tfor(re int i=1;i<=m;i++)E[i]=e[i];\n\tstd::sort(e+1,e+m+1,cmp);\n\tfor(re int i=1;i<=m;i++)id[e[i].t]=i;cdq(1,m,1,m);\n\tfor(re int i=1;i<=m;++i)if(!ans[i]) puts(\"-1\");else printf(\"%d\\n\",e[ans[i]].w);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1589292147,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF603E \u3010Pastoral Oddities\u3011"
    },
    {
        "content": "\u6765\u53d1\u4e00\u53d1\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u9898\u89e3\n\n\u9996\u5148\u5bf9\u4e8e\u9650\u5236\u6761\u4ef6\u8fdb\u884c\u5206\u6790,\u53d1\u73b0\u6ee1\u8db3\u6761\u4ef6\u5f53\u4e14\u4ec5\u5f53\u8fde\u901a\u5757\u7684\u5927\u5c0f\u4e3a\u5076\u6570\n\n\u8bc1\u660e:\n\n\u56e0\u4e3a\u4e00\u6761\u8fb9\u5bfc\u81f4\u603b\u5ea6\u6570\u4e0d\u4f1a\u53d8,\u6240\u4ee5\u5982\u679c\u4e3a\u5947\u6570\u7684\u8bdd,\u6700\u7ec8\u7684\u603b\u5ea6\u6570\u4e3a\u5947\u6570,\u6240\u4ee5\u80af\u5b9a\u8fde\u901a\u5757\u5927\u5c0f\u4e0d\u4e3a\u5947\u6570\n\n\u7136\u540e\u8003\u8651\u5982\u679c\u662f\u5076\u6570\u600e\u4e48\u53bb\u6784\u9020,\u9996\u5148\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\u53ef\u4ee5\u968f\u4fbf\u627e\u51fa\u4e00\u4e2a\u751f\u6210\u6811,\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\u8003\u8651,\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u5ea6\u6570\u4e3a\u5076\u6570,\u90a3\u4e48\u5c31\u52a0\u4e0a\u548c\u7236\u4eb2\u7684\u8fb9,\u8fd9\u6837\u7684\u8bdd\u6700\u7ec8\u5c31\u53ea\u6709\u6839\u8282\u70b9\u7684\u5ea6\u6570\u4e0d\u80fd\u786e\u5b9a,\u4f46\u662f\u603b\u5ea6\u6570\u4e3a\u5076\u6570,\u5c31\u51b3\u5b9a\u4e86\u6839\u8282\u70b9\u7684\u5ea6\u6570\u4e5f\u4e3a\u5076\u6570\n\n\u89e3\u6cd5:\n\n\u9996\u5148\u8981\u8003\u8651\u53ea\u6709\u4e00\u4e2a\u8be2\u95ee\u7684\u60c5\u51b5,\u5c31\u662f\u4ece\u5c0f\u5f80\u5927\u52a0\u4e0a\u8fb9,\u76f4\u5230\u6240\u6709\u8fde\u901a\u5757\u90fd\u662f\u5076\u6570\u5927\u5c0f\u4f4d\u7f6e.\n\n\u8003\u8651\u6269\u5c55\u5f00\u6765,\u6700\u66b4\u529b\u7684\u60f3\u6cd5\u5c31\u662f\u7528LCT\u66b4\u529b\u7ef4\u62a4\u5b50\u6811\u7684\u5927\u5c0f,\u7136\u540e\u6bcf\u6b21\u63d2\u5165\u8fb9\u7684\u65f6\u5019\u5220\u9664\u6700\u5927\u7684\u8fb9\n\n\u4ece\u8fd9\u4e2a\u60f3\u6cd5\u4e2d,\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6761\u8fb9\u7684\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f\u4e00\u4e2a\u533a\u95f4,\u6211\u4eec\u53ef\u4ee5\u4ece\u65f6\u95f4\u7ebf\u5f80\u524d\u505a,\u6240\u6709\u4ece\u5c0f\u5f80\u5927\u52a0\u5165\u6bcf\u6761\u8fb9,\u76f4\u5230\u6700\u7ec8\u7684\u56fe\u6ee1\u8db3\u6761\u4ef6,\u7136\u540e\u65b0\u52a0\u5165\u7684\u8fb9\u7684\u4f5c\u7528\u8303\u56f4\u5c31\u662f \u6700\u5f00\u59cb\u51fa\u73b0\u7684\u65f6\u95f4\u5230\u73b0\u5728\u6240\u5904\u7684\u65f6\u95f4\n\n\u90a3\u4e48\u6211\u4eec\u5927\u6982\u5c31\u662f\u505a\u8fd9\u6837\u4e00\u4e2a\u4e8b\u60c5\n\n\u5728\u7ebf\u6bb5\u6811\u4e0a\u904d\u5386,\u6bcf\u5230\u8fbe\u4e00\u4e2a\u70b9\u628a\u8fd9\u4e2a\u70b9\u4e0a\u6807\u8bb0\u7684\u8fb9\u52a0\u5230\u56fe\u4e2d,\u53ef\u4ee5\u7528\u4e00\u4e2a\u652f\u6301\u56de\u9000\u7684\u5e76\u67e5\u96c6\u7ef4\u62a4,\u7136\u540e\u4f18\u5148\u904d\u5386\u53f3\u513f\u5b50,\u518d\u53bb\u904d\u5386\u5de6\u513f\u5b50,\u904d\u5386\u5b8c\u5b50\u6811\u4e4b\u540e\u5c31\u5220\u9664\u6807\u8bb0\u7684\u8fb9\n\n\u6bcf\u5230\u8fbe\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9,\u53ef\u4ee5\u4ece\u5c0f\u5f80\u5927\u52a0\u8fb9,\u76f4\u5230\u56fe\u6ee1\u8db3\u6761\u4ef6\u4f4d\u7f6e,\u8fd9\u4e2a\u53ef\u4ee5\u7528\u4e00\u4e2a\u5806\u6765\u7ef4\u62a4,\u7136\u540e\u518d\u628a\u65b0\u52a0\u5165\u7684\u8fb9\u5f80\u7ebf\u6bb5\u6811\u4e0a\u6253\u6807\u8bb0,\u7b54\u6848\u5c31\u662f\u52a0\u5165\u7684\u8fb9\u7684\u6700\u5927\u503c\n\n\u611f\u89c9\u6bd4LCT\u7a0d\u5fae\u597d\u5199\u4e00\u70b9\u5427,\u65f6\u95f4\u590d\u6742\u5ea6 O(mlog(m) log(n))\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tregister int x=0;\n\tregister char ch=getchar();\n\twhile(ch<'0'||ch>'9')\tch=getchar();\n\twhile(ch>='0'&&ch<='9')\tx=x*10+(ch^48),ch=getchar();\n\treturn x;\n}\nconst int N=1e5+5;\nconst int M=3e5+5;\nstruct each{\n\tint x,y,z,t;\n\tbool operator < (const each k) const {\n\t\treturn z>k.z;\n\t}\n}a[M],st[N];\nvector<each>b[M<<2];\npriority_queue<each>que;\nint n,m,top,cnt,fa[N],si[N],dep[N],ans[M];\ninline int find(int x){\n\twhile(fa[x])\tx=fa[x];\n\treturn x;\n}\ninline void merge(int x,int y){\n\tx=find(x),y=find(y);\n\tif(x==y)\treturn ;\n\tcnt-=(si[x]&1)+(si[y]&1);\n\tif(dep[x]>dep[y])\tswap(x,y);\n\tif(dep[x]==dep[y])\tst[top].y=1,++dep[y];\n\tst[++top].x=x,fa[x]=y,si[y]+=si[x],cnt+=si[y]&1;\n}\ninline void del(each k){\n\tint x=k.x,y=fa[x];\n\tif(k.y)\tdep[y]--;\n\tcnt-=si[y]&1,si[y]-=si[x];\n\tcnt+=(si[x]&1)+(si[y]&1),fa[x]=0;\n}\nvoid add(int l,int r,int x,int y,each z,int rt){\n\tif(x>y)\treturn ;\n\tif(x<=l&&y>=r){\n\t\tb[rt].push_back(z);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid)\tadd(l,mid,x,y,z,rt<<1);\n\tif(y>mid)\tadd(++mid,r,x,y,z,rt<<1|1);\n}\nvoid dfs(int l,int r,int rt,int res){\n\tint tmp=top,si=b[rt].size();\n\tfor(register int i=0;i<si;i++){\n\t\tmerge(b[rt][i].x,b[rt][i].y);\n\t\tres=max(res,b[rt][i].z);\n\t}\n\n\tif(l==r){\n\t\tint num=0;\n\t\twhile(cnt&&!que.empty()){\n\t\t\teach k=que.top();\tque.pop();\n\t\t\tif(k.t<=l){\n\t\t\t\tmerge(k.x,k.y),res=max(res,k.z);\n\t\t\t\ta[++num]=k;\n\t\t\t}\n\t\t}\n\t\tif(!cnt){\n\t\t\tfor(register int i=1;i<=num;i++)\n\t\t\t\tadd(1,m,a[i].t,l-1,a[i],1);\n\t\t\tans[l]=res;\n\t\t}\n\t\telse\tans[l]=-1;\n\t}\n\telse{\n\t\tint mid=(l+r)>>1;\n\t\tdfs(mid+1,r,rt<<1|1,res),dfs(l,mid,rt<<1,res);\n\t}\n\twhile(top!=tmp)\tdel(st[top--]);\n}\nint main(){\n\tn=read(),m=read();\n\tfor(register int i=1;i<=n;i++)\tsi[i]=1;\n\tfor(register int i=1;i<=m;i++){\n\t\ta[i].x=read(),a[i].y=read();\n\t\ta[i].z=read(),a[i].t=i,que.push(a[i]);\n\t}\n\tcnt=n,dfs(1,m,1,-1);\n\tfor(register int i=1;i<=m;i++)\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n\n```",
        "postTime": 1583329551,
        "uid": 88567,
        "name": "lzk5627",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF603E \u3010Pastoral Oddities\u3011"
    },
    {
        "content": "- Update on 2022.10.25\uff1a\u4fee\u6539\u7b14\u8bef\u3002\n\n> [CF603E Pastoral Oddities](https://www.luogu.com.cn/problem/CF603E)\n\n\u8003\u5bdf\u4e00\u5f20\u56fe\u5408\u6cd5\u7684\u5145\u8981\u6761\u4ef6\u3002\n\n\u56e0\u4e3a\u56fe\u4e0a\u6240\u6709\u70b9\u5ea6\u6570\u4e4b\u548c\u4e3a\u5076\u6570\uff0c\u6240\u4ee5\u53ea\u8981\u5b58\u5728\u5947\u6570\u5927\u5c0f\u8fde\u901a\u5757\u5219\u4e0d\u5408\u6cd5\u3002\u5426\u5219\uff0c\u56e0\u4e3a\u4e00\u6761\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u5ea6\u6570\u5747\u4e3a\u5947\u6570\uff0c\u5176\u4f59\u5747\u4e3a\u5076\u6570\uff0c\u6240\u4ee5\u5c06\u8fde\u901a\u5757\u5185\u6240\u6709\u8282\u70b9\u4efb\u610f\u4e24\u4e24\u914d\u5bf9\u5f97\u5230\u70b9\u6570\u9664\u4ee5 $2$ \u6761\u8def\u5f84\uff0c\u8fd9\u4e9b\u8def\u5f84\u7684\u5bf9\u79f0\u5dee\u5373\u5408\u6cd5\u65b9\u6848\u3002\u56e0\u6b64\u56fe\u5408\u6cd5\u7684\u5145\u8981\u6761\u4ef6\u4e3a\u6240\u6709\u8fde\u901a\u5757\u5927\u5c0f\u4e3a\u5076\u6570\u3002\n\n\u81f3\u6b64\uff0c\u5b58\u5728\u663e\u7136\u7684 LCT \u5728\u7ebf\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\u7684 $\\mathcal{O}(m\\log n)$ \u505a\u6cd5\u3002\n\n\u8003\u8651\u6574\u4f53\u4e8c\u5206\uff0c\u4ee4 $solve(l, r, vl, vr)$ \u8868\u793a\u5df2\u77e5 $ans_l \\sim ans_r$ \u5728 $[vl, vr]$ \u8303\u56f4\u5185\uff0c\u6c42 $ans_l\\sim ans_r$\u3002\u63a5\u4e0b\u6765\u6709\u4e24\u4e2a\u65b9\u5411\uff1a\n\n- \u5bf9 $[l, r]$ \u5206\u6cbb\uff0c\u4ee4 $mid = \\frac{l + r} 2$\uff0c\u4e8c\u5206\u6c42\u51fa $ans_{mid}$\uff0c\u7136\u540e $solve(l, mid - 1, ans_{mid}, vr)$ \u4ee5\u53ca $solve(mid + 1, r, vl, ans_{mid})$\u3002\n- \u5bf9 $[vl, vr]$ \u5206\u6cbb\uff0c\u4ee4 $mid = \\frac{vl + vr} 2$\uff0c\u4f9d\u6b21\u52a0\u5165\u6240\u6709\u6743\u503c $\\leq mid$ \u7684\u8fb9\u76f4\u5230\u5408\u6cd5\uff0c\u4ee4\u7b2c\u4e00\u4e2a\u5408\u6cd5\u4f4d\u7f6e\u4e3a $pos$\uff0c\u5219 $ans_{pos} \\leq mid$\uff0c$ans_{pos - 1} > mid$\u3002\u56e0\u6b64 $solve(l, pos - 1, mid + 1, vr)$ \u4ee5\u53ca $solve(pos, r, vl, mid)$\u3002\n\n\u65e0\u8bba\u54ea\u79cd\u65b9\u6cd5\uff0c\u6734\u7d20\u5b9e\u73b0\u5747\u65e0\u6cd5\u63a5\u53d7\u3002\u6ce8\u610f\u5230\u5728 $solve(l, r, vl, vr)$ \u7684\u8fc7\u7a0b\u4e2d\uff0c\u7f16\u53f7 $< l$ \u4e14\u6743\u503c $\\leq vl$ \u7684\u8fb9\u4e00\u5b9a\u88ab\u8003\u8651\uff0c\u56e0\u6b64\u5c1d\u8bd5\u4fdd\u8bc1\u5728 $solve(l, r, vl, vr)$ \u8c03\u7528\u65f6\uff0c\u6240\u6709 $\\leq l$ \u4e14\u6743\u503c $\\leq vl$ \u7684\u8fb9\u5df2\u7ecf\u52a0\u5165\u5e76\u67e5\u96c6\u3002\n\n\u56e0\u4e3a\u7b2c\u4e00\u79cd\u65b9\u6cd5\u9700\u8981\u4e8c\u5206\u6c42 $ans_{mid}$\uff0c\u6bd4\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u591a\u51fa\u4e00\u4e2a $\\log$\uff0c\u6545\u8003\u8651\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u3002\n\n- \u5f53 $solve(l, pos - 1, mid + 1, vr)$ \u65f6\uff0c\u679a\u4e3e\u6240\u6709\u6743\u503c\u5728 $vl\\sim mid + 1$ \u4e4b\u95f4\u7684\u8fb9\uff0c\u82e5\u7f16\u53f7 $< l$ \u5219\u52a0\u5165\u5e76\u67e5\u96c6\u3002\u6700\u540e\u56de\u6eaf\u3002\n- \u5f53 $solve(pos, r, vl, mid)$ \u65f6\uff0c\u679a\u4e3e\u6240\u6709\u7f16\u53f7\u5728 $l\\sim pos$ \u4e4b\u95f4\u7684\u8fb9\uff0c\u82e5\u6743\u503c $\\leq vl$ \u5219\u52a0\u5165\u5e76\u67e5\u96c6\u3002\u6700\u540e\u56de\u6eaf\u3002\n\n- \u6ce8\u610f\uff0c\u5728\u6309\u7f16\u53f7\u987a\u5e8f\u52a0\u5165\u6743\u503c $\\leq mid$ \u7684\u8fb9\u4e4b\u524d\uff0c\u9700\u8981\u5148\u5c06\u6743\u503c\u5728 $vl\\sim mid$ \u4e4b\u95f4\u7684\u7f16\u53f7 $< l$ \u7684\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u5355\u6b21 $solve$ \u7684\u590d\u6742\u5ea6\u548c $r - l$ \u4e0e\u6743\u503c\u5728 $vl \\sim vr$ \u4e4b\u95f4\u7684\u8fb9\u7684\u6570\u91cf\u76f8\u5173\u3002\u56e0\u4e3a\u5206\u6cbb\u4e24\u4e2a\u5b50\u6811\u65f6\u7f16\u53f7\u4e0e\u6743\u503c\u5747\u5206\u88c2\u6210\u4e24\u6bb5\u533a\u95f4\uff0c\u6240\u4ee5\u6bcf\u5c42\u5206\u6cbb\u6811\u7684\u64cd\u4f5c\u6b21\u6570\u5173\u4e8e $m$ \u7ebf\u6027\uff0c\u518d\u7b97\u4e0a\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u7684\u590d\u6742\u5ea6\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(m\\log V\\log n)$\u3002\u5bf9\u6743\u503c\u79bb\u6563\u5316\u53ef\u5c06 $\\log V$ \u53d8\u4e3a $\\log m$\u3002\n\n\u5373\u4f7f\u6ca1\u6709 LCT \u7684\u7406\u8bba\u590d\u6742\u5ea6\u4f18\u79c0\uff0c\u4f46\u5e38\u6570\u76f8\u5f53\u5c0f\u4e14\u76f8\u5f53\u597d\u5199\uff0c\u5728 CF \u548c\u6d1b\u8c37\u4e0a\u5747\u83b7\u5f97\u6700\u4f18\u89e3\uff082022.7.9\uff09\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nbool Mbe;\nconstexpr int N = 3e5 + 5;\nconstexpr int inf = 0x3f3f3f3f;\nint n, m, odd, stc[N], top;\nint fa[N], sz[N], ans[N];\nstruct edge {\n  int u, v, w, id;\n  bool operator < (const edge &rhs) {\n    return w < rhs.w;\n  }\n} e[N], g[N];\nint find(int x) {return fa[x] == x ? x : find(fa[fa[fa[fa[x]]]]);} // \u600e\u4e48\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u53c8\u8def\u5f84\u538b\u7f29\u4e86\uff01\nvoid merge(int u, int v) {\n  if((u = find(u)) == (v = find(v))) return;\n  if(sz[u] < sz[v]) swap(u, v);\n  if((sz[u] & 1) && (sz[v] & 1)) odd -= 2;\n  sz[u] += sz[v], fa[v] = u, stc[++top] = v;\n}\nvoid undo(int lim) {\n  while(top > lim) {\n    int v = stc[top--], u = fa[v];\n    fa[v] = v, sz[u] -= sz[v];\n    if((sz[u] & 1) && (sz[v] & 1)) odd += 2;\n  }\n}\nvoid solve(int l, int r, int vl, int vr) {\n  if(l > r || vl > vr) return;\n  if(vl == vr) {\n    for(int p = l; p <= r; p++) ans[p] = g[vl].w;\n    return;\n  }\n  int mid = vl + vr >> 1, ori = top;\n  for(int p = vl; p <= mid; p++) if(g[p].id < l) merge(g[p].u, g[p].v);\n  int found = r + 1, ori2 = top;\n  for(int p = l; p <= r; p++) {\n    if(e[p].w <= g[mid].w) merge(e[p].u, e[p].v);\n    if(!odd) {found = p; break;}\n  }\n  undo(ori2);\n  solve(l, found - 1, mid + 1, vr);\n  undo(ori); // add this line\n  for(int p = l; p < found; p++) if(e[p].w <= g[vl].w) merge(e[p].u, e[p].v); // vl -> g[vl].w\n  solve(found, r, vl, mid);\n  undo(ori);\n}\nbool Med;\nint main() {\n  fprintf(stderr, \"%.4lf\\n\", (&Mbe - &Med) / 1048576.0);\n  #ifdef ALEX_WEI\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n  #endif\n  ios::sync_with_stdio(0);\n  cin >> n >> m, odd = n;\n  for(int i = 1; i <= n; i++) fa[i] = i, sz[i] = 1;\n  for(int i = 1; i <= m; i++) {\n    cin >> e[i].u >> e[i].v >> e[i].w;\n    e[i].id = i, g[i] = e[i];\n  }\n  sort(g + 1, g + m + 1);\n  g[m + 1].w = -1;\n  solve(1, m, 1, m + 1);\n  for(int i = 1; i <= m; i++) cout << ans[i] << \"\\n\";\n  return cerr << \"Time: \" << clock() << \"\\n\", 0;\n}\n/*\n2022/7/9\nstart coding at 11:11\nfinish debugging at 19:18\n*/\n```",
        "postTime": 1657372225,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF603E Pastoral Oddities"
    },
    {
        "content": "\u6b63\u5411\u63a8\u5bfc\u4e00\u6ce2\u3002\u4ec5\u4ec5\u4ee3\u8868\u6211\u7684\u601d\u8003\u8def\u5f84\u3002\u53ef\u80fd\u6709\u4e9b\u7e41\u7410\u3002\n\n\u9996\u5148\u8003\u8651\u9759\u6001\u65e0\u6743\u600e\u4e48\u5224\u65ad\u5408\u6cd5\u3002\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u4ece\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0a\u63a8\u3002\u53f6\u8282\u70b9\u7684\u7236\u8fb9\u662f\u5fc5\u9009\u7684\uff0c\u7136\u540e\u518d\u5f80\u4e0a\u53ef\u4ee5\u4f9d\u6b21\u786e\u5b9a\u6bcf\u4e2a\u70b9\u7684\u7236\u8fb9\u662f\u5426\u9009\u62e9\u3002\u8fd9\u68f5\u6811\u662f\u5408\u6cd5\u7684\u5f53\u4e14\u4ec5\u5f53\u5b83\u7684\u6839\u8282\u70b9\u7684\u5ea6\u6570\u4e3a\u5947\u6570\u3002\n\n\u90a3\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u56fe\uff0c\u53d6\u51fa\u5176\u4efb\u610f\u4e00\u68f5\u751f\u6210\u6811\uff0c\u8dd1\u8fd9\u4e2a\u6d41\u7a0b\u3002\u6700\u7ec8\u5982\u679c\u6811\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u5c31\u662f\u5408\u6cd5\u7684\uff08\u5176\u5b83\u8fb9\u90fd\u4e0d\u9009\u5c31\u884c\u4e86\uff09\uff0c\u5e76\u4e14\u65b9\u6848\u662f\u53ef\u4ee5\u76f4\u63a5\u6784\u9020\u7684\u3002\u5982\u679c\u6700\u7ec8\u6811\u662f\u975e\u6cd5\u7684\uff0c\u90a3\u5fc5\u7136\u8fd9\u4e2a\u6811\u4ec5\u5b58\u5728\u4e00\u4e2a\u5076\u5ea6\u70b9\uff08\u6839\u8282\u70b9\uff09\u3002\u8003\u8651\u52a0\u5165\u4e00\u6761\u975e\u6811\u8fb9\u6216\u8005\u5220\u9664\u4e00\u6761\u6811\u8fb9\uff0c\u53d1\u73b0\u65e0\u8bba\u8fd9\u4e2a\u8fb9\u600e\u4e48\u8fde\u600e\u4e48\u5220\uff0c\u90fd\u5fc5\u7136\u4e0d\u4f1a\u6539\u53d8\u5076\u5ea6\u70b9\u4e2a\u6570\u7684\u5947\u5076\u6027\uff08\u8981\u4e48\u5076\u5ea6\u70b9\u4e2a\u6570\u52a0\u4e8c\uff0c\u8981\u4e48\u51cf\u4e8c\uff0c\u8981\u4e48\u4e0d\u53d8\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6811\u662f\u975e\u6cd5\u7684\uff0c\u90a3\u4e48\u65e0\u8bba\u4f60\u600e\u4e48\u6539\uff0c\u90a3\u90fd\u4e0d\u53ef\u80fd\u662f\u5408\u6cd5\u7684\u3002\u8fd9\u6837\u8bf4\u660e\u4e86\u4e00\u4e2a\u8fde\u901a\u5757\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\u5076\u5ea6\u70b9\u4e2a\u6570\u4e3a\u5076\u6570\u3002\n\n\u66f4\u8fdb\u4e00\u6b65\uff0c\u7531\u4e8e\u4efb\u610f\u4e00\u5f20\u56fe\u7684\u5947\u5ea6\u70b9\u4e2a\u6570\u5fc5\u7136\u4e3a\u5076\u6570\uff0c\u6240\u4ee5\u4e00\u4e2a\u8fde\u901a\u5757\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\u5176\u5927\u5c0f\u4e3a\u5076\u6570\u3002**\u4e00\u4e2a\u56fe\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\u5176\u6240\u6709\u8fde\u901a\u5757\u7684\u5927\u5c0f\u90fd\u4e3a\u5076\u6570\u3002**\n\n---\n\n\u5bf9\u4e8e\u52a8\u6001\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u79cd\u6709\u8da3\u7684\u5206\u6cbb\u65b9\u6cd5\u3002\u7531\u4e8e\u7b54\u6848\u662f\u9012\u51cf\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u6211\u4eec\u4ee5\u65f6\u95f4\u4f5c\u4e3a\u5206\u6cbb\u7684\u5173\u952e\u5b57\uff0c\u7136\u540e\u540c\u65f6\u4e5f\u7ef4\u62a4\u503c\u57df\u7684\u7b54\u6848\u533a\u95f4\u3002\u5177\u4f53\u64cd\u4f5c\u5927\u6982\u662f\uff1a\n\n\u5bf9\u4e8e\u4e00\u6b21\u5206\u6cbb\uff08\u65f6\u95f4 $[l,r]$\uff0c\u503c\u57df $[x,y]$\uff09  \n1. \u628a $[l,r]$ \u7684\u65f6\u95f4\u533a\u95f4\u4e2d\u6ee1\u8db3\u8fb9\u7684\u8fb9\u6743 $w_i<x$ \u7684\u8fb9\u5168\u90e8\u52a0\u5165\u5e76\u67e5\u96c6\n2. \u53d6\u65f6\u95f4\u7684\u4e2d\u70b9 $mid$\u3002\u6211\u4eec\u628a\u503c\u57df\u5728 $[x,y]$ \u4e14\u65f6\u95f4\u5728 $[l,mid]$ \u7684\u8fb9\u6309\u503c\u57df\u4ece\u5c0f\u5230\u5927\u52a0\u5165\u5e76\u67e5\u96c6\uff0c\u76f4\u5230\u5408\u6cd5\u3002\u8fd9\u76f8\u5f53\u4e8e\u662f\u4f7f $mid$ \u5408\u6cd5\u7684\u6700\u5c0f\u7b54\u6848 $z$\u3002\n3. \u7531\u4e8e\u7b54\u6848\u662f\u9012\u51cf\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a $z$ \u662f $[l,mid]$ \u65f6\u95f4\u6bb5\u7684\u4e0b\u754c\uff0c\u4e14\u662f $[mid+1,r]$ \u65f6\u95f4\u6bb5\u7684\u4e0a\u754c\u3002\u5206\u522b\u7ee7\u7eed\u5206\u6cbb\u4e24\u4e2a\u65f6\u95f4\u6bb5\u5373\u53ef\u3002\n4. \u5728 2, 3\uff08\u5176\u4e2d\u5305\u62ec\u4e24\u6b21\u5206\u6cbb\u7ed3\u675f\uff09\u540e\u90fd\u8981\u56de\u5230\u521d\u59cb\u72b6\u6001\uff08\u5373\u628a\u8fd9\u4e9b\u64cd\u4f5c\u5168\u90e8\u90fd\u64a4\u56de\u6389\uff09\u3002\n\n\u4e5f\u6709\u4e00\u79cd\u7c7b\u4f3c\u7684\u6574\u4f53\u4e8c\u5206\u505a\u6cd5\uff0c\u5927\u6982\u5c31\u662f\u5206\u6cbb\u7b54\u6848\u533a\u95f4\uff0c\u53bb\u627e\u6700\u5c0f\u5408\u6cd5\u65f6\u95f4\uff0c\u7136\u540e\u7c7b\u4f3c\u5730\u9012\u5f52\u4e0b\u53bb\u3002\u672c\u8d28\u4e0a\u6ca1\u4ec0\u4e48\u533a\u522b\uff08\u56e0\u4e3a\u7b54\u6848\u548c\u65f6\u95f4\u90fd\u662f\u5355\u8c03\u7684\uff09\uff0c\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002\n\n\u590d\u6742\u5ea6\uff1a\u6bcf\u4e00\u4e2a\u5206\u6cbb\u533a\u95f4\u7684\u590d\u6742\u5ea6\u90fd\u662f $(C\\times(r-l)+C\\times(y-x))\\log n$ \u7684\uff0c\u5373\u4e00\u5c42\u7684\u590d\u6742\u5ea6\u4e3a $O(m\\log n)$\uff0c\u603b\u590d\u6742\u5ea6 $O(m\\log m\\log n)$\u3002\n\n\u5206\u6cbb\u6709\u4e0d\u5c11\u7684\u7ec6\u8282\u3002\u9700\u8981\u5f88\u6ce8\u610f\u3002  \n\u8fd8\u6709\u522b\u5fd8\u4e86\u79bb\u6563\u5316\u3002\u8fd9\u6837\u5206\u6cbb\u5728\u51fa\u73b0\u4e24\u4e2a\u6743\u503c\u76f8\u540c\u7684\u8fb9\u65f6\u53ef\u80fd\u4f1a\u5bc4\uff0c\u9700\u8981\u5728\u79bb\u6563\u5316\u65f6\u624b\u52a8\u533a\u5206\u4e00\u4e0b\u3002\n\nhttps://codeforces.com/contest/603/submission/167729346",
        "postTime": 1660123274,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "CF603E Pastoral Oddities"
    },
    {
        "content": "\u9898\u610f\u7ffb\u8bd1\u7684\u5f88\u6e05\u695a\uff0c\u4e0d\u518d\u53d9\u8ff0\u3002\n\n\u6709\u4e00\u4e2a\u7ed3\u8bba\u5c31\u662f \u201c\u5076\u6570\u5ea6\u8fde\u901a\u5757\u662f\u6709\u89e3\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u201d \uff0c\u5f88\u591a\u9898\u89e3\u8bf4\u7684\u90fd\u662f\u201c\u8c03\u6574\u6cd5\u201d\uff0c\u4fbf\u4e8e\u7406\u89e3\uff0c\u4f46\u7ed9\u51fa\u4e00\u4e2a\u5177\u4f53\u5316\u7684\u8bc1\u660e\uff0c\u5982\u4e0b\uff1a\n\n\n\u7b54\u6848\u662f\u751f\u68ee\u6797\u662f\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u73af\u4e00\u5b9a\u53ef\u4ee5\u4ece\u96c6\u5408\u4e2d\u5220\u53bb\u4f7f\u5f97\u7b54\u6848\u66f4\u4f18\n\n\u9996\u5148\uff0c\u5947\u6570\u5927\u5c0f\u7684\u8fde\u901a\u5757\u7684\u8fb9\u6570\u4e3a\u5076\u6570\uff0c\u6bcf\u6761\u8fb9\u5bf9\u603b\u5ea6\u6570\u7684\u8d21\u732e\u662f 2\uff0c\u800c\u603b\u5ea6\u6570\u7b49\u4e8e \u5947\u6570 * \u5947\u6570 \u4ecd\u7136\u4e3a\u5947\u6570\uff0c\u6545\u662f\u5fc5\u8981\u6761\u4ef6\u3002\n\n\u5bf9\u4e8e\u5145\u5206\u6027\uff0c\u53ea\u8981\u7ed9\u51fa\u4e00\u7ec4\u6784\u9020\u5373\u53ef\u3002\n\n\u4ee4 $S(x)$ \u8868\u793a\u5927\u5c0f\u4e3a 2x \u7684\u8fde\u901a\u5757\u3002\n\n\u5bf9\u4e8e\u5927\u5c0f\u4e3a 0 \u7684\u8fde\u901a\u5757 $S(0)$ \u7a7a\u96c6\u4e3a\u89e3\u3002\n\n\u5bf9\u4e8e\u5927\u5c0f\u4e3a 2 \u7684\u8fde\u901a\u5757 $S(1)$ \u6709\u89e3\uff0c\u76f4\u63a5\u9009\u62e9\u4e8c\u70b9\u4e4b\u95f4\u7684\u8fb9\u5373\u6709\u89e3\u3002\n\n\u5bf9\u4e8e $S(x)$ \u82e5 $S(p) (p\\in \\mathbb{N},p < x)$ \u6709\u89e3\uff0c\u5219 $S(x)$ \u6709\u89e3\u3002\n\n\uff0c\u8bc1\u660e\u5982\u4e0b\uff1a\n\n\u56e0\u4e3a\u8be5\u8fde\u901a\u5757\u7684\u5927\u5c0f\u662f\u5076\u6570\uff0c\u6240\u4ee5\u8be5\u8fde\u901a\u5757\u4e00\u5b9a\u53ef\u4ee5\u88ab\u5212\u5206\u6210\u4e24\u4e2a\u5927\u5c0f\u4e3a\u5076\u6570\u7684\u8fde\u901a\u5757\uff0c\u6216\u4e24\u4e2a\u5927\u5c0f\u4e3a\u5947\u6570\u7684\u8fde\u901a\u5757\u3002\n\n\u82e5\u8be5\u8fde\u901a\u5757\u53ef\u4ee5\u88ab\u7ea6\u5316\u4e3a $S(x-p) , S(p) (0 < p < x)$  \u4e24\u8fb9\u90fd\u6709\u89e3\u3002\n\n\u82e5\u8be5\u8fde\u901a\u5757\u4e0d\u80fd\u88ab\u5212\u5206\u6210\u4e24\u4e2a\u5076\u6570\u5927\u5c0f\u7684\u8fde\u901a\u5757\uff0c\u5219\u4efb\u610f\u9009\u62e9\u4e00\u6761\u8fb9\uff0c\u5c06\u8fd9\u6761\u8fb9\u52a0\u5165\u8fb9\u96c6\uff0c\u94a6\u5b9a\u8fd9\u4e24\u4e2a\u70b9\u4e0d\u518d\u88ab\u5176\u4ed6\u8fb9\u8fde\u63a5\uff0c\u53ef\u4ee5\u7ea6\u5316\u6210 $S(x - 1 - p) , S(p) (0\\leq p \\leq x - 1) $ \u3002 \n\n\u6545 $S(x)$ \u82e5 $S(p) (p\\in \\mathbb{N},p < x)$ \u6709\u89e3\uff0c\u5219 $S(x)$ \u6709\u89e3\u3002\n\n\u7531\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c $S(0)$ \u6709\u89e3\uff0c\u53c8\u56e0\u4e0a\u5b9a\u7406\uff0c\u6545\u5076\u6570\u5927\u5c0f\u662f\u6210\u7acb\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u3002\n\n\u56de\u5230\u672c\u9898\uff0c\u5df2\u7ecf\u89e3\u51b3\u9759\u6001\u95ee\u9898\u4e86\uff0c\u8003\u8651\u201c\u52a0\u8fb9\u201d\u600e\u4e48\u5904\u7406\u3002\n\n\u5c06\u201c\u52a0\u8fb9\u201d\u79bb\u7ebf\uff0c\u7136\u540e\u7531\u4e8e\u7b54\u6848\u662f\u5355\u8c03\u4e0d\u964d\u7684\uff0c\u9009\u7684\u8fb9\u53ea\u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u8003\u8651\u5012\u7740\u8ba1\u7b97\uff0c\u5c06\u8fb9\u6309\u6743\u503c\u6392\u5e8f\uff0c\u5148\u6309\u987a\u5e8f\u52a0\u5165\u8fb9\u76f4\u9053\u7b54\u6848\u6210\u7acb\uff08\u7528\u4e00\u4e2a\u6307\u9488\u4ece\u5de6\u5411\u53f3\u52a0\u2014\uff09\uff0c\u77e5\u9053\u8be5\u8fb9\u7684\u8d77\u59cb\u65f6\u95f4\u7684\u524d\u4e00\u4e2a\u65f6\u523b\u628a\u8fd9\u6761\u8fb9\u5220\u4e86\uff0c\u7ee7\u7eed\u52a0\u5165\u8fb9\u5373\u53ef\u3002\n\n\u4f46\u662f\u7531\u4e8e\u201c\u5220\u8fb9\u201d\u5f88\u96be\u5b9e\u73b0\uff0c\u53c8\u56e0\u4e3a\u548c\u56fe\u7684\u8fde\u901a\u6027\u6709\u5173\uff0c\u4e8e\u662f\u8003\u8651\u7528\u4e00\u4e2a[\u534a\u5728\u7ebf\u7684\u7ebf\u6bb5\u6811\u5206\u6cbb](https://codeforces.com/problemset/problem/576/E)\u53bb\u7ef4\u62a4\u5b83\uff0c\u8bb0\u5f55\u5947\u6570\u5927\u5c0f\u7684\u8fde\u901a\u5757\u6570\uff0c\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\uff0c\u5148\u904d\u5386\u53f3\u513f\u5b50\uff0c\u904d\u5386\u5230\u53f6\u8282\u70b9\u5c31\u5224\u65ad\uff0c\u5e76\u5411\u524d\u9762\u533a\u95f4\u52a0\u8fb9\u5373\u53ef\u3002\n\n\u4e00\u4e2a\u5751\u70b9\u662f\u4e0d\u80fd\u5728 $[tim , l]$ \u76f4\u63a5\u8fde\u8fb9\uff08 $tim$ \u8868\u793a\u8fd9\u6761\u8fb9\u7684\u51fa\u73b0\u65f6\u95f4\uff0c $l$ \u8868\u793a\u76ee\u524d\u5206\u6cbb\u5230\u7684\u65f6\u95f4\u70b9\uff09 \u56e0\u4e3a\u5df2\u7ecf\u904d\u5386\u5230\u4e86\u8fd9\u4e2a\u53f6\u5b50\uff0c\u53ef\u80fd\u5bfc\u81f4\u4e0a\u9762\u7684\u6807\u8bb0\u6ca1\u6709\u751f\u6548\uff0c\u5e94\u5728 $[tim , l - 1]$ \u8fde\u8fb9\u3002\n\n\u7ebf\u6bb5\u6811\u5206\u6cbb\u90e8\u5206\u4ee3\u7801\uff1a\n\n```cpp\n/*uniset \u8868\u793a\u5408\u5e76 \uff0c disset\u8868\u793a\u62c6\u5206 \uff0cO\u8bb0\u5f55\u64cd\u4f5c\u4ee5\u64a4\u56de \uff0c cnt\u8868\u793a\u76ee\u524d\u5947\u6570\u5927\u5c0f\u7684\u8fde\u901a\u5757\u6570*/\n/*\u672c\u4eba\u7801\u98ce\u3001\u7f29\u8fdb\u7565\u602a\uff0c\u591a\u591a\u5305\u6db5*/\nvoid solve(int x,int l,int r) {\n    vector<Pair> O;\n    for(int p : ed[x]) {\n        int U = find(e[p].u) , V = find(e[p].v) ;\n        if(U^V) {\n            if(siz[U] < siz[V]) swap(U,V) ; \n            uniset(U,V); O.emplace_back(U,V);\n        }\n    }\n    if(l == r) {\n            while (cnt && ptr <= m) {\n                if(e[ptr].tim <= l)\n                {\n                    int U = find(e[ptr].u) , V = find(e[ptr].v) ;\n                    if(U^V) {\n                        if(siz[U] < siz[V]) swap(U,V) ; \n                        uniset(U,V); O.emplace_back(U,V);\n                    }\n                    adde(1,1,m,e[ptr].tim,l - 1,ptr); /*\u5751\u70b9\u5c31\u662f\u8fd9\u91cc\uff01\uff01\uff01*/\n                }\n            ptr ++ ;  \n        }\n        if(!cnt) ans[l] = e[ptr - 1].w; else ans[l] = -1 ;\n    }\n    else {\n        int mid = l + r >> 1;\n        solve(x<<1|1,mid+1,r);\n        solve(x<<1,l,mid) ;\n    }\n    reverse(All(O)) ;\n    for(auto[U,V]:O) disset(U,V) ;\n}\n\n```\n\n[ACcode](https://www.luogu.com.cn/paste/vjpyqxmf) \n\n(\u6709\u5feb\u8bfb\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0cdefine\u6781\u591a\uff0c\u89c2\u611f\u4e0d\u4f73\uff0c\u4e0a\u65b9\u4ee3\u7801\u4e3a\u65b9\u4fbf\u9605\u8bfb\u8fdb\u884c\u4e86\u7f29\u8fdb\u4fee\u6539\uff0c\u5220\u9664\u4e86\u90e8\u5206\u6ce8\u91ca\u3002)\n\n\u5982\u6709\u7b14\u8bef\u3001\u903b\u8f91\u9519\u8bef\u6b22\u8fce\u8f7b\u55b7\u3002\n\n\u611f\u8c22\u60a8\u7684\u9605\u8bfb\uff0c\u611f\u8c22\u7ba1\u7406\u5458\u8f9b\u82e6\u5ba1\u6838\u3002",
        "postTime": 1653404415,
        "uid": 161697,
        "name": "\u10e6\ua9bf\u0fd0",
        "ccfLevel": 7,
        "title": "\u3010CF603E\u3011\u534a\u5728\u7ebf\u7ebf\u6bb5\u6811\u5206\u6cbb"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u65e0\u5411\u56fe\uff0c\u521d\u59cb\u4e3a\u7a7a\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u6c42\u9009\u62e9\u82e5\u5e72\u6761\u8fb9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u5ea6\u6570\u5747\u4e3a\u5947\u6570\uff0c\u4e14\u6700\u5927\u6743\u503c\u5c3d\u53ef\u80fd\u5c0f\u3002\n\n\u9996\u5148\u6211\u4eec\u4e0d\u59a8\u6765\u770b\u4e00\u4e9b\u7b80\u5316\u7248\u7684\u95ee\u9898\uff0c\u6bd4\u5982\uff1a\u5982\u679c\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u5982\u4f55\u5224\u65ad\u662f\u5426\u5b58\u5728\u5408\u6cd5\u7684\u8fb9\u96c6\uff1f\n\n\u6bcf\u4e2a\u8fde\u901a\u5757\u4e4b\u95f4\u663e\u7136\u662f\u72ec\u7acb\u7684\uff0c\u6211\u4eec\u5206\u5f00\u8ba8\u8bba\u5c31\u597d\u3002\n\n\u4e00\u4e2a\u6bd4\u8f83\u660e\u663e\u7684\u7ed3\u8bba\u662f\uff0c\u4e00\u4e2a\u5927\u5c0f\u4e3a\u5947\u6570\u7684\u8fde\u901a\u5757\u662f\u65e0\u89e3\u7684\u3002\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5947\u6570\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u5ea6\u6570\u548c\u4e5f\u662f\u5947\u6570\uff0c\u7136\u800c\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u70b9\u5ea6\u6570\u548c\u662f2e\u4e00\u5b9a\u662f\u5076\u6570\u3002\n\n\u90a3\u4e48\u4e00\u4e2a\u5927\u5c0f\u4e3a\u5076\u6570\u7684\u8fde\u901a\u5757\u662f\u5426\u4e00\u5b9a\u6709\u89e3\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u53ea\u9700\u8981\u5bf9\u539f\u56fe\u6c42\u4e00\u68f5dfs\u6811\uff0c\u7136\u540e\u4ece\u53f6\u5b50\u5f00\u59cb\u8d2a\u5fc3\uff0c\u6bcf\u4e2a\u70b9\u6839\u636e\u5176\u8fde\u5411\u513f\u5b50\u7684\u5ea6\u6570\u51b3\u5b9a\u5176\u8fde\u5411\u7236\u4eb2\u7684\u8fb9\u662f\u5426\u9009\u5373\u53ef\u3002\n\n\u6240\u4ee5\uff0c\u4e00\u4e2a\u56fe\u6709\u89e3\u5f53\u4e14\u4ec5\u5f53\u5176\u6bcf\u4e2a\u8fde\u901a\u5757\u5927\u5c0f\u90fd\u662f\u5076\u6570\u3002\n\n\u518d\u628a\u8fb9\u6743\u7684\u9650\u5236\u52a0\u4e0a\u3002\u5047\u8bbe\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u5982\u4f55\u6c42\u6700\u5927\u6743\u503c\u5c3d\u53ef\u80fd\u5c0f\u7684\u5408\u6cd5\u8fb9\u96c6\uff1f\n\n\u8fd9\u4e5f\u5f88\u7b80\u5355\u3002\u50cfkruskal\u90a3\u6837\u6309\u7167\u8fb9\u6743\u5347\u5e8f\u52a0\u5165\u8fb9\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0f\uff0c\u76f4\u5230\u6240\u6709\u8fde\u901a\u5757\u5927\u5c0f\u5747\u4e3a\u5076\u6570\u5373\u53ef\u3002\n\n\u90a3\u5982\u4f55\u5904\u7406\u52a8\u6001\u52a0\u8fb9\u5462\uff1f\n\n\u5bb9\u6613\u53d1\u73b0\u52a0\u8fb9\u4f1a\u4f7f\u5f97\u7b54\u6848\u9010\u6e10\u53d8\u5c0f\uff0c\u800c\u6211\u4eec\u7684\u4e0a\u8ff0\u64cd\u4f5c\u662f\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u679a\u4e3e\u7b54\u6848\uff0c\u8fd9\u4f1a\u975e\u5e38\u4e0d\u548c\u8c10\u3002\n\n\u90a3\u4e0d\u59a8\u628a\u64cd\u4f5c\u53cd\u8fc7\u6765\uff08\u65f6\u5149\u5012\u6d41\u5927\u6cd5\u597d\uff09\uff0c\u53d8\u6210\u6bcf\u6b21\u5220\u8fb9\u6c42\u7b54\u6848\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5bf9\u4e00\u5f00\u59cb\u7684\u56fe\u6c42\u597d\u4e86\u7b54\u6848\uff0c\u73b0\u5728\u5220\u6389\u4e86\u4e00\u6761\u8fb9\uff0c\u8fd9\u53ef\u80fd\u4f7f\u5f97\u4e00\u4e2a\u5076\u6570\u8fde\u901a\u5757\u5206\u88c2\u6210\u4e86\u4e24\u4e2a\u5947\u6570\u8fde\u901a\u5757\u3002\u6b64\u65f6\u6211\u4eec\u8981\u4ece\u4e0a\u6b21\u7684\u4f4d\u7f6e\u7ee7\u7eed\u6309\u8fb9\u6743\u987a\u5e8f\u52a0\u8fb9\uff0c\u76f4\u5230\u56fe\u91cd\u65b0\u53d8\u6210\u5168\u5076\u6570\u8fde\u901a\u5757\u4e3a\u6b62\u3002\n\n\u8fd9\u5c31\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u52a0\u8fb9\u5220\u8fb9\u7ef4\u62a4\u8fde\u901a\u6027\u7684\u52a8\u6001\u56fe\u95ee\u9898\u3002\u7531\u4e8e\u6bcf\u6761\u8fb9\u7684\u5220\u9664\u65f6\u95f4\u5df2\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528lct\u7ef4\u62a4\u6700\u5927\u5220\u9664\u65f6\u95f4\u751f\u6210\u6811\uff0c\u540c\u65f6\u7528\u7b80\u5355\u7684\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u7684\u65b9\u6cd5\u7ef4\u62a4\u8fde\u901a\u5757\u5927\u5c0f\u7684\u5947\u5076\u6027\u3002\n\n\uff08\u4ec0\u4e48\u4f60\u4e0d\u4f1alct\uff1f\u51fa\u95e8\u53f3\u8f6c\u6a21\u677f\u533a\u3002\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define gc getchar()\n#define pc putchar\n#define li long long\ninline li read(){\n\tli x = 0,y = 0,c = gc;\n\twhile(!isdigit(c)) y = c,c = gc;\n\twhile(isdigit(c)) x = (x << 1) + (x << 3) + (c ^ '0'),c = gc;\n\treturn y == '-' ? -x : x;\n}\ninline void print(li q){\n\tif(q < 0) pc('-'),q = -q;\n\tif(q >= 10) print(q / 10);\n\tpc(q % 10 + '0');\n}\nint n,m;\nint f[400010],l[400010],r[400010],mx[400010];\nbool c[400010],sz[400010],zs[400010];\nstruct edge{\n\tint u,v,w;\n}e[300010];\nint ee[300010],ans[300010];\ninline bool cmp(int q,int w){\n\treturn e[q].w < e[w].w;\n}\ninline bool is(int q){\n\treturn l[f[q]] != q && r[f[q]] != q;\n}\ninline void ud(int q){\n\tsz[q] = sz[l[q]] ^ sz[r[q]] ^ zs[q];\n\tmx[q] = max(max(mx[l[q]],mx[r[q]]),q <= n ? 0 : q);\n}\ninline void rv(int q){\n\tc[q] ^= 1;swap(l[q],r[q]);\n}\ninline void ps(int q){\n\tif(!c[q]) return;\n\tif(l[q]) rv(l[q]);\n\tif(r[q]) rv(r[q]);\n\tc[q] = 0;\n}\ninline void ro(int q){\n\tint p = f[q];\n\tif(l[f[p]] == p) l[f[p]] = q;\n\telse if(r[f[p]] == p) r[f[p]] = q;\n\tf[q] = f[p];f[p] = q;\n\tif(l[p] == q){\n\t\tl[p] = r[q];r[q] = p;\n\t\tif(l[p]) f[l[p]] = p;\n\t}\n\telse{\n\t\tr[p] = l[q];l[q] = p;\n\t\tif(r[p]) f[r[p]] = p; \n\t}\n\tud(p);ud(q);\n}\ninline void gx(int q){\n\tif(!is(q)) gx(f[q]);\n\tps(q);\n}\ninline void sp(int q){\n\tgx(q);\n\twhile(!is(q)){\n\t\tint p = f[q];\n\t\tif(!is(p)){\n\t\t\tif((l[f[p]] == p) ^ (l[p] == q)) ro(q);\n\t\t\telse ro(p);\n\t\t}\n\t\tro(q);\n\t}\n}\ninline void ac(int q){\n\tint p = 0;\n\twhile(q){\n\t\tsp(q);\n\t\tzs[q] ^= sz[r[q]];\n\t\tr[q] = p;\n\t\tzs[q] ^= sz[r[q]];\n\t\tud(q);\n\t\tp = q;\n\t\tq = f[q];\n\t}\n}\ninline void mk(int q){\n\tac(q);sp(q);rv(q);\n}\ninline void si(int u,int v){\n\tmk(u);ac(v);sp(v);\n}\nint main(){\n\tint i,j,u,v,w;\n\tn = read();m = read();\n\tif(n & 1){\n\t\tfor(i = 1;i <= m;++i) puts(\"-1\");\n\t\treturn 0;\n\t}\n\tfor(i = 1;i <= m;++i){\n\t\te[i].u = read();e[i].v = read();e[i].w = read();ee[i] = i;\n\t}\n\tsort(ee + 1,ee + m + 1,cmp);\n\tfor(i = 1;i <= n;++i) sz[i] = zs[i] = 1,mx[i] = 0;\n\tfor(i = 1;i <= m;++i) mx[i + n] = i + n;\n\tint nw = n;\n\tfor(i = m,j = 1;i;--i){\n\t\tfor(;j <= m && nw;++j){\n\t\t\tif(ee[j] > i) continue;\n\t\t\tw = ee[j] + n;u = e[w - n].u;v = e[w - n].v;\n\t\t\tsi(u,v);\n\t\t\tif(f[u]){\n\t\t\t\tif(mx[v] <= w) continue;\n\t\t\t\tw = mx[v];u = e[w - n].u;v = e[w - n].v;\n\t\t\t\tsi(u,v);sp(w);l[w] = r[w] = f[u] = f[v] = sz[w] = zs[w] = 0;\n\t\t\t\tw = ee[j] + n;u = e[w - n].u;v = e[w - n].v;\n\t\t\t\tmk(u);mk(v);f[u] = f[v] = w;sz[w] = zs[w] = sz[u] ^ sz[v];\n\t\t\t}\n\t\t\telse{\n\t\t\t\trv(v);f[u] = f[v] = w;sz[w] = zs[w] = sz[u] ^ sz[v];\n\t\t\t\tif(sz[u] && sz[v]) nw -= 2;\n\t\t\t}\n\t\t}\n\t\tif(j > m && nw) ans[i] = -1;\n\t\telse{\n\t\t\tans[i] = e[ee[j - 1]].w;\n\t\t\tw = i + n;u = e[i].u;v = e[i].v;\n\t\t\tsi(u,v);sp(w);\n\t\t\tif(!f[v]) continue;\n\t\t\tl[w] = r[w] = f[u] = f[v] = sz[w] = zs[w] = 0;\n\t\t\tif(sz[u] && sz[v]) nw += 2;\n\t\t}\n\t}\n\tfor(i = 1;i <= m;++i) print(ans[i]),pc('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1558679678,
        "uid": 45775,
        "name": "liuzhangfeiabc",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF603E \u3010Pastoral Oddities\u3011"
    },
    {
        "content": "### \u9898\u76ee\u4f20\u9001\u95e8\n\n[\u6d1b\u8c37](https://www.luogu.com.cn/problem/CF603E)\n\n[CF](https://codeforces.com/problemset/problem/603/E)\n\n### \u5199\u5728\u524d\u9762\n\n\u7b2c\u4e5d\u9053\u9ed1\u9898\uff01\n\nCodeforces \u4e0a\u5c11\u6709\u7684\u7ecf\u5178\u6570\u636e\u7ed3\u6784\u9898\u3002\n\n\u9898\u610f\u5df2\u7ecf\u5f88\u7cbe\u7b80\u4e86\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n### \u5206\u6790\n\n\u9996\u5148\uff0c\u6ce8\u610f\u5230\u201c\u6bcf\u4e2a\u5e97\u7684\u5ea6\u6570\u90fd\u662f\u5947\u6570\u201d\u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\u662f\u5f88\u96be\u8003\u8651\u7684\uff0c\u5fc5\u987b\u8f6c\u5316\u6389\u3002\n\n\u8003\u8651\u52a0\u8fb9\u7684\u5947\u5ea6\u6570\u7684\u70b9\u7684\u6570\u91cf\u53d8\u5316\uff0c\u52a0\u5165\u8fb9 $(u,v)$\uff0c\u5219\uff1a\n\n+ \u5f53 $u$ \u548c $v$ \u7684\u5ea6\u6570\u4e00\u5947\u4e00\u5076\u65f6\uff0c\u5947\u5ea6\u6570\u7684\u70b9\u7684\u6570\u91cf\u4e0d\u53d8\u3002\n\n+ \u5f53 $u$ \u548c $v$ \u7684\u5ea6\u6570\u90fd\u4e3a\u5076\u65f6\uff0c\u5947\u5ea6\u6570\u7684\u70b9\u7684\u6570\u91cf\u52a0\u4e8c\u3002\n\n+ \u5f53 $u$ \u548c $v$ \u7684\u5ea6\u6570\u90fd\u4e3a\u5947\u65f6\uff0c\u5947\u5ea6\u6570\u7684\u70b9\u7684\u6570\u91cf\u51cf\u4e8c\u3002\n\n\u5df2\u77e5\u6ca1\u6709\u53d8\u7684\u65f6\u5019\u5947\u5ea6\u6570\u7684\u70b9\u7684\u6570\u91cf\u4e3a\u96f6\uff0c\u5947\u5ea6\u6570\u7684\u70b9\u7684\u6570\u91cf\u5fc5\u7136\u4e3a\u5076\u6570\u3002\n\n\u6240\u4ee5\uff0c\u5f53\u8fde\u901a\u5757\u7684\u5927\u5c0f\u4e3a\u5947\u6570\u65f6\uff0c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5947\u6570\uff0c\u90a3\u4e48\u603b\u5ea6\u6570\u4e5f\u662f\u5947\u6570\uff0c\u77db\u76fe\uff0c\u5373\u8fde\u901a\u5757\u7684\u5927\u5c0f\u53ea\u80fd\u4e3a\u5076\u6570\u3002\n\n\u6b64\u65f6\u6211\u4eec\u5e94\u8be5\u601d\u8003\u7684\u662f\uff0c\u8fde\u901a\u5757\u7684\u5927\u5c0f\u4e3a\u5076\u6570\u65f6\u5c31\u5fc5\u7136\u6210\u7acb\u5417\uff1f\n\n\u53ef\u4ee5\u60f3\u5230\u4e00\u79cd\u6784\u9020\u65b9\u6cd5\uff0c\u5148\u62bd\u51fa\u4e00\u9897\u751f\u6210\u6811\uff0c\u4ece\u53f6\u8282\u70b9\u5f00\u59cb\uff0c\u5982\u679c\u5ea6\u6570\u4e3a\u5076\u6570\u5c31\u8fde\u5411\u7236\u4eb2\uff0c\u5426\u5219\u4e0d\u8fde\uff0c\u6700\u540e\uff0c\u6839\u7684\u5ea6\u6570\u4e5f\u4e00\u5b9a\u662f\u5947\u6570\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u6700\u7ec8\u8bc1\u660e\u4e86\uff0c**\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u5747\u4e3a\u5947\u6570\u7b49\u4ef7\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0f\u5747\u4e3a\u5076\u6570**\u3002\n\n\u65e2\u7136\u8981\u8ba9\u6700\u5927\u8fb9\u6743\u6700\u5c0f\uff0c\u90a3\u5c31\u6309\u7167\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u540c\u65f6\u8bb0\u5f55\u4e00\u4e0b\u5176\u521d\u59cb\u4f4d\u7f6e\u3002\n\n\u7136\u540e\u8fdb\u884c\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u6ce8\u610f\u4e3a\u4e86\u8fb9\u8986\u76d6\u7684\u65f6\u6548\u6027\uff0c\u5e94\u5f53\u4ece\u5927\u5230\u5c0f\u5730\u8fdb\u884c\u5206\u6cbb\u3002\n\n\u5728\u53f6\u5b50\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u521d\u59cb\u4f4d\u7f6e\u5c0f\u4e8e\u53f6\u5b50\u7684\u52a0\u5165\uff0c\u8986\u76d6\u5b83\u4e4b\u540e\u7684\u8303\u56f4\uff0c\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\u4e3a\u6b62\u3002\u5f53\u7136\uff0c\u5982\u679c\u5168\u90e8\u52a0\u5165\u4e86\u4ecd\u4e0d\u6ee1\u8db3\uff0c\u6839\u636e\u9898\u610f\uff0c\u7b54\u6848\u5b58\u4e0b $-1$ \u5373\u53ef\u3002\n\n\u6ce8\u610f\u5728\u8df3\u51fa\u8282\u70b9\u65f6\u5e94\u64a4\u9500\u52a0\u5165\u7684\u8fb9\u4e0d\u5e72\u6270\u540e\u7eed\u64cd\u4f5c\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate<typename T>inline void read(register T &x)\n{\n\tregister T p = 1;\n\tx = 0;\n\tchar c = getchar();\n\twhile(c < '0'||c > '9')\n\t{\n\t\tif(c == '-') p = -p;\n\t\tc = getchar();\n\t}\n\twhile('0' <= c&&c <= '9')\n\t{\n\t\tx = (x<<3)+(x<<1)+(c^48);\n\t\tc = getchar();\n\t}\n\tx *= p;\n}\ntemplate<typename T>inline void write(register T x)\n{\n\tif(x < 0) putchar('-'),x = -x;\n\tif(x > 9) write(x/10);\n\tputchar(x%10+48);\n}\n#define D(i,a,b) for(register int i=a;i>=b;--i)\n#define F(i,a,b) for(register int i=a;i<=b;++i)\n#define ll long long\n#define pii pair<int,int>\nint n,m;\nstruct Seg\n{\n\t#define M 300010\n\t#define N 100010\n\t#define mid (l+r)/2\n\t#define ls u<<1\n\t#define rs u<<1|1\n\tstruct node\n\t{\n\t\tint u,v,w,id;\n\t\tinline bool friend operator<(const node &X,const node &Y) {return X.w < Y.w;}\n\t}e[M];\n\tvector<pii> g[M<<2];\n\tint ans[M],now;\n\tSeg() {now = 0;}\n\tstruct union_find\n\t{\n\t\tint f[N],sz[N],sum;\n\t\tstack<node> s;\n\t\tinline void init()\n\t\t{\n\t\t\tF(i,1,n) f[i] = i,sz[i] = 1;\n\t\t\tsum = n;\n\t\t}\n\t\tinline int find(int u)\n\t\t{\n\t\t\twhile(u != f[u]) u = f[u];\n\t\t\treturn u; \n\t\t}\n\t\tinline int merge(int u,int v)\n\t\t{\n\t\t\tu = find(u),v = find(v);\n\t\t\tif(u == v) return 0;\n\t\t\tif(sz[u] < sz[v]) swap(u,v);\n\t\t\tif((sz[u]&1)&&(sz[v]&1)) s.push((node){u,v,2,0}),sum -= 2;\n\t\t\telse s.push((node){u,v,0,0});\n\t\t\tsz[u] += sz[v];\n\t\t\tf[v] = u;\n\t\t\treturn 1;\n\t\t}\n\t\tinline void erase(int u,int v,int w)\n\t\t{\n\t\t\tsz[u] -= sz[v];\n\t\t\tf[v] = v;\n\t\t\tsum += w;\t\n\t\t}\n\t\tinline void erase(int len)\n\t\t{\n\t\t\tif(!len) return;\n\t\t\twhile(len--)\n\t\t\t{\n\t\t\t\terase(s.top().u,s.top().v,s.top().w);\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}tree;\n\tvoid update(int u,int l,int r,int x,int y,pii p)\n\t{\n\t\tif(x <= l&&r <= y) \n\t\t{\n\t\t\tg[u].push_back(p);\n\t\t\treturn;\n\t\t}\n\t\tif(x <= mid) update(ls,l,mid,x,y,p);\n\t\tif(y > mid) update(rs,mid+1,r,x,y,p);\n\t}\n\tvoid solve(int u,int l,int r)\n\t{\n\t\tint cnt = 0;\n\t\tfor(auto p:g[u]) cnt += tree.merge(p.first,p.second);\n\t\tif(l == r)\n\t\t{\n\t\t\twhile(tree.sum&&now < m)\n\t\t\t{\n\t\t\t\t++now;\n\t\t\t\tif(e[now].id <= l)\n\t\t\t\t{\n\t\t\t\t\tcnt += tree.merge(e[now].u,e[now].v);\n\t\t\t\t\tif(e[now].id < l) update(1,1,m,e[now].id,l-1,(pii){e[now].u,e[now].v});\t\n\t\t\t\t}\t\n\t\t\t}\t\n\t\t\tif(tree.sum) ans[l] = -1;\n\t\t\telse ans[l] = e[now].w;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsolve(rs,mid+1,r);\n\t\t\tsolve(ls,l,mid);\n\t\t}\n\t\ttree.erase(cnt);\n\t\treturn;\t\n\t}\n\tinline void init()\n\t{\n\t\tread(n),read(m);\n\t\tF(i,1,m) read(e[i].u),read(e[i].v),read(e[i].w),e[i].id = i;\n\t\tsort(&e[1],&e[m+1]);\n\t\ttree.init();\n\t\tsolve(1,1,m); \n\t\tF(i,1,m) write(ans[i]),putchar('\\n');\t\n\t}\n}tree;\nint main()\n{\n\ttree.init();\n\treturn 0;\n}\n```\n",
        "postTime": 1681392568,
        "uid": 197648,
        "name": "Wangxun",
        "ccfLevel": 5,
        "title": "CF603E \u9898\u89e3"
    },
    {
        "content": "[CF \u4f20\u9001\u95e8\uff1aCF603E](https://codeforces.com/problemset/problem/603/e)\n\n\u6574\u4f53\u4e8c\u5206 + \u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u3002\n\n\uff08\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e2a\u4eba\u8ba4\u4e3a\u8f83\u7b80\u5355\u7684\uff0c\u9664\u5916\u8fd8\u6709[LCT \u7ef4\u62a4](https://www.luogu.com.cn/blog/xht37/solution-cf603e)\u3001[\u7ebf\u6bb5\u6811\u5206\u6cbb](https://www.luogu.com.cn/blog/shan-cheng/solution-cf603e)\u7684\u505a\u6cd5\u3002\uff09\n\n~~\u8003\u573a\u4e0a\u82e6\u60f3\u6b63\u89e3\u89c9\u5f97\u81ea\u5df1\u5199\u5f97\u51fa\u6765\u7684\u6211\u771f\u7684\u592a naive \u4e86~~\n\n## Solution\n\n### Part 1 \u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u5747\u4e3a\u5947\u6570\n\n\u4e0d\u59a8\u79f0\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u4e3a\u5947\u70b9\uff0c\u4e3a\u5076\u6570\u79f0\u5076\u70b9\u3002\n\n\u9010\u4e00\u8003\u8651\u9898\u76ee\u9650\u5236\u6761\u4ef6\u3002\u663e\u7136\u5148\u4ece\u201c\u6bcf\u4e2a\u70b9\u4e3a\u5947\u70b9\u201d\u8003\u8651\uff0c\u56e0\u4e3a\u5b83\u76f8\u5bf9\u7279\u6b8a\u3002\n\n\u5148\u6254\u51fa\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7ed3\u8bba\uff1a\u4e00\u4e2a\u8fde\u901a\u56fe\u5185\u6240\u6709\u70b9\u4e3a\u5947\u70b9\uff0c\u7b49\u4ef7\u4e8e\u8be5\u8fde\u901a\u56fe\u5185\u6709\u5076\u6570\u4e2a\u8282\u70b9\u3002\u8bc1\u660e\u5982\u4e0b\uff1a\n\n- **\u5fc5\u8981\u6027**\uff1a\u8003\u573a\u4e0a\u963f\u5df4\u51fa\u201c\u82e5\u67d0\u8fde\u901a\u56fe\u5185\u7684\u6bcf\u4e2a\u70b9\u90fd\u4e3a\u5947\u70b9\uff0c\u5219\u8be5\u56fe\u4e2d\u70b9\u6570\u5fc5\u5b9a\u4e3a\u5947\u6570\u201d\u3002\n\n\t\u8fd9\u4e2a\u6027\u8d28\u7684\u8bc1\u660e\u4e0d\u96be\uff0c~~\u624b\u73a9\u5c0f\u6837\u4f8b\u5373\u53ef~~\uff0c\u5f62\u8c61\u5730\u8bf4\uff0c\u5947\u70b9\u5fc5\u5b9a\u662f\u6210\u53cc\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u82e5\u60f3\u8981\u4e00\u4e2a\u5076\u70b9\u53d8\u4e3a\u5947\u70b9\uff0c\u5fc5\u987b\u540c\u65f6\u8ba9\u53e6\u4e00\u4e2a\u5076\u70b9\u53d8\u4e3a\u5947\u70b9\uff08\u6216\u8005\u91cd\u65b0\u6784\u9020\u51fa\u4e00\u4e2a\u70b9\uff09\u3002\u81ea\u5df1\u753b\u753b\u56fe\u6784\u9020\u4e00\u4e0b\u5f88\u5bb9\u6613\u5c31\u80fd\u5f97\u51fa\u3002\n\n- **\u5145\u5206\u6027**\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5076\u6570\u4e2a\u8282\u70b9\u7684\u8fde\u901a\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5b83\u4efb\u610f\u4e00\u79cd\u5f62\u6001\u7684\u751f\u6210\u6811\u4e0a\u6784\u9020\u51fa\u201c\u6240\u6709\u70b9\u4e3a\u5947\u70b9\u201d\u7684\u5c40\u9762\u3002\n\n\t\u5177\u4f53\u5730\uff0c\u4ece\u5e95\u5411\u4e0a\u904d\u5386\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u513f\u5b50\u8fde\u4e0a\u6765\u7684\u8fb9\u6570\u4e3a\u5076\u6570\uff0c\u5c31\u8fde\u4e0a\u4ed6\u4e0e\u7236\u4eb2\u7684\u8fb9\uff0c\u53cd\u4e4b\u5219\u4e0d\u7136\u3002\u5bf9\u4e8e\u6839\u8282\u70b9\uff0c\u56e0\u4e3a\u5176\u5b50\u6811\u5185\u5176\u4ed6\u8282\u70b9\u7684\u5ea6\u6570\u4e4b\u548c\u4e3a \u5947\u6570 x \u5947\u6570 = \u5947\u6570\uff0c\u800c\u5ea6\u6570\u603b\u548c\u4e3a\u5076\u6570\uff0c\u6240\u4ee5\u6839\u8282\u70b9\u7684\u5ea6\u6570\u4e5f\u4e3a\u5947\u6570\u3002\n    \n\u7ed3\u5408\u8fd9\u4e2a\u7ed3\u8bba\u548c\u5176\u5145\u5206\u6027\u8bc1\u660e\u4e2d\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u53ef\u4ee5\u53d1\u73b0\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u56fe\uff0c\u53ea\u8981\u6dfb\u4e0a\u67d0\u4e00\u6761\u8fb9\u4e4b\u540e\uff0c\u5b83\u7684\u70b9\u6570\u53d8\u4e3a\u5076\u6570\uff0c\u90a3\u8fd9\u6761\u8fb9\u5c31\u662f\u8fd9\u4e2a\u8fb9\u96c6\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u3002\u8fdb\u4e00\u6b65\u5730\uff0c\u60f3\u8981\u628a\u8fd9\u4e2a\u56fe\u771f\u771f\u5207\u5207\u6784\u9020\u6210\u4e00\u4e2a\u201c\u6240\u6709\u70b9\u90fd\u4e3a\u5947\u70b9\u201d\u7684\u60c5\u51b5\uff0c\u9700\u8981\u5728\u56fe\u4e2d\u5220\u8fb9\uff0c\u4f46\u662f\u5220\u7684\u8fb9\u4e00\u5b9a\u4e0d\u4f1a\u662f\u8fd9\u6761\u6700\u5927\u6743\u7684\u8fb9\u3002\n\n\u7531\u6b64\uff0c\u660e\u767d\uff1a\u65e2\u7136\u6211\u4eec\u53ea\u662f\u8981\u6c42\u201c\u6700\u5c0f\u5316\u8fb9\u96c6\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u201d\uff0c\u90a3\u8fd9\u4e2a\u8fde\u901a\u56fe\u5185\u90e8\u5982\u4f55\u5220\u8fb9\u6211\u4eec\u5176\u5b9e\u6beb\u4e0d\u5173\u5fc3\uff0c\u53ea\u9700\u8981\u660e\u767d\u6709\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4f46\u662f\u4ee3\u7801\u5b9e\u73b0\u4e2d\u65e0\u9700\u5199\u51fa\uff0c**\u8981\u60f3\u627e\u5230\u201c\u6700\u5c0f\u5316\u8fb9\u96c6\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u201d\uff0c\u53ea\u9700\u8981\u770b\u5728\u52a0\u5165\u54ea\u6761\u8fb9\u4e4b\u540e\u603b\u70b9\u6570\u53d8\u4e3a\u5076\u6570\u5373\u53ef**\u3002\u76f4\u767d\u5730\u8bf4\uff0c\u5bf9\u5408\u6cd5\u7684\u8fb9\uff0c\u80fd\u52a0\u5c31\u52a0\u3002\n\n### Part 2 \u6700\u5c0f\u5316\u8fb9\u96c6\u4e2d\u7684\u6700\u5927\u8fb9\u6743\n\n\u7136\u540e\u6765\u8003\u8651\u201c\u6700\u5c0f\u5316\u8fb9\u96c6\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u201d\u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\u3002\u6761\u4ef6\u53cd\u5c04\u80af\u5b9a\u5c31\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u7684\u505a\u6cd5\uff0c\u4f46\u662f\u672c\u9898\u662f\u52a8\u6001\u52a0\u8fb9\uff0c\u590d\u6742\u5ea6\u4e0d\u5141\u8bb8\u6bcf\u6b21\u52a0\u8fb9\u540e\u90fd\u6765\u4e00\u6b21\u4e8c\u5206\uff0c\u6545\u5f15\u5bfc\u6211\u4eec\u53bb\u8003\u8651\u6574\u4f53\u4e8c\u5206\u7684\u505a\u6cd5\u3002\u8fdb\u4e00\u6b65\u5730\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u80fd\u591f\u4f7f\u7528\u6574\u4f53\u4e8c\u5206\uff0c\u8003\u8651\u8bc1\u660e\u6700\u7ec8\u7b54\u6848\u7684\u5355\u8c03\u6027\u3002\u8fd9\u4e2a\u901a\u8fc7~~\u89c2\u5bdf\u6837\u4f8b\u8f93\u51fa~~\u7b80\u5355\u601d\u8003\u53d1\u73b0\u7b54\u6848\u4e00\u5b9a\u662f\u5355\u8c03\u4e0d\u4e0b\u964d\u7684\u3002\n\n\u6309\u7167\u6574\u4f53\u4e8c\u5206\u7684\u5957\u8def\u6765\uff0c\u51fd\u6570 `solve(ql, qr, vl, vr)` \u8868\u793a\u73b0\u5728\u5904\u7406\u5728 $[ql,qr]$ \u4e4b\u95f4\u7684\u8be2\u95ee\uff0c\u4e14\u5b83\u4eec\u7684\u7b54\u6848\u90fd\u662f\u8fb9\u6309\u7167\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e4b\u540e\uff0c\u4f4d\u4e8e $[vl,vr]$ \u4e4b\u4e2d\u7684\u67d0\u8fb9\u7684\u8fb9\u6743\u3002\uff08\u4f7f\u7528 $e$ \u6570\u7ec4\u6309\u8f93\u5165\u987a\u5e8f\u5b58\u653e\u8fb9\uff0c$b$ \u6570\u7ec4\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u5b58\u653e\u8fb9\u3002\uff09\n\n\u6309\u7167\u4e4b\u524d\u7684\u63a8\u8bba\uff0c\u6211\u4eec\u6839\u672c\u4e0d\u5173\u5fc3\u8fde\u901a\u5757\u5185\u90e8\u600e\u4e48\u5220\u8fb9\uff0c\u6545\u8981\u5148\u786e\u4fdd\u5728 $e$ \u4e2d\u7f16\u53f7\u5c0f\u4e8e $ql$\u3001$w$ \u4e2d\u7f16\u53f7\u5c0f\u4e8e $vl$ \u7684\u8fb9\u90fd\u5148\u52a0\u5165\u3002\u4e3a\u4e86\u7ee7\u7eed\u4e8c\u5206\u5904\u7406\u8be2\u95ee\uff0c\u8bbe $mid=\\frac{vl+vr}{2}$\uff0c\u6211\u4eec\u5c31\u9700\u8981\u6c42\u51fa\u5728\u8be2\u95ee $[ql,qr]$\uff0c\u4e2d\uff0c\u54ea\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u662f $b_{mid}.w$\uff0c\u8bb0\u6b64\u7b54\u6848\u4e3a $Ans$\u3002\u82e5\u6c42\u51fa\u4e86 $Ans$\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u8981\u9012\u5f52\u7684\u4e24\u4e2a\u51fd\u6570\u7684\u5206\u522b\u662f `solve(ql, Ans - 1, mid + 1, vr)` \u548c `solve(Ans, qr, vl, mid)`\uff0c\u5373\u5206\u522b\u9012\u5f52\u5de6\u5b50\u533a\u95f4\u548c\u53f3\u5b50\u533a\u95f4\u3002\n\n### Part 3 \u52a0\u8fb9\n\n\u518d\u56de\u8fc7\u5934\u8003\u8651\u52a0\u8fb9\u7ec6\u8282\uff1a\n\n1. \u4e3a\u6c42\u89e3 $Ans$ \u52a0\u8fb9\uff1a\u6211\u4eec\u9996\u5148\u80af\u5b9a\u8981\u4fdd\u8bc1 $e$ \u4e2d\u7f16\u53f7\u5c0f\u4e8e $ql$ \u7684\u8fb9\u4e14 $w$ \u4e2d\u7f16\u53f7\u5c0f\u4e8e $mid$ \u7684\u8fb9\u90fd\u5fc5\u987b\u5f97\u52a0\u5165\uff0c\u8fd9\u662f\u6839\u636e\u80fd\u52a0\u5c31\u52a0\u7684\u539f\u5219\u3002\u7136\u540e\u518d\u4ece $e_{ql}$ \u904d\u5386\u5230 $e_{qr}$\uff0c\u4f9d\u6b21\u52a0\u5165\u8fd9\u4e9b\u8fb9\uff0c\u76f4\u5230\u52a0\u5165\u67d0\u6761\u8fb9\u4e4b\u540e\u6574\u4e2a\u56fe\u4e2d\u6ca1\u6709\u4e00\u4e2a\u5185\u90e8\u70b9\u6570\u4e3a\u5947\u6570\u7684\u8fde\u901a\u5757\uff0c\u5219\u8fd9\u6761\u8fb9\u5c31\u662f $Ans$\u3002\n2. \u4e3a\u9012\u5f52 `solve(ql, Ans - 1, mid + 1, vr)` \u52a0\u8fb9\uff1a\u663e\u7136\uff0c\u4e3a\u4e86\u4e0d\u59a8\u788d\u4e0b\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u9012\u5f52\u8fd9\u4e2a\u51fd\u6570\u4e4b\u524d\u52a0\u5165 $e$ \u4e2d\u7f16\u53f7\u5c0f\u4e8e $ql$ \u7684\u8fb9\u4e14 $w$ \u4e2d\u7f16\u53f7\u5c0f\u4e8e $mid$ \u7684\u8fb9\u3002\n3. \u4e3a\u9012\u5f52 `solve(Ans, qr, vl, mid)` \u52a0\u8fb9\uff1a\u540c\u7406\uff0c\u6b64\u65f6\u8981\u5148\u52a0\u5165  $e$ \u4e2d\u7f16\u53f7\u5728 $[ql, Ans)$ \u7684\u8fb9\u4e14\u5176\u8fb9\u6743\u5c0f\u4e8e $b_{vl}.w$ \u7684\u8fb9\u3002\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a\n\n1. \u6211\u4eec\u60f3\u7ef4\u62a4\u8fde\u901a\u5757\u5185\u7684\u8282\u70b9\u6570\uff1b\n2. \u6bcf\u6b21\u9012\u5f52\u51fd\u6570\u4e2d\uff0c\u4e0a\u8ff0\u4e09\u4e2a\u52a0\u8fb9\u6b65\u9aa4\u6709\u6240\u91cd\u590d\uff08\u6bd4\u5982\u7b2c\u4e00\u6b65\u7684\u524d\u534a\u90e8\u5206\u548c\u7b2c\u4e8c\u6b65\uff09\uff1b\n3. \u6211\u4eec\u60f3\u5c3d\u53ef\u80fd\u8282\u7701\u7a7a\u95f4\u3002\n\n\u8fd9\u4e09\u6761\uff08\u6216\u8005\u66f4\u591a\uff09\u6307\u5411\u4e86\u6211\u4eec\u7ef4\u62a4\u8fd9\u4e9b\u8fb9\u3001\u8fde\u901a\u5757\u6240\u4f7f\u7528\u7684\u5de5\u5177\uff1a\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u3002\n\n\u4e3a\u4ec0\u4e48\u8981\u201c\u53ef\u64a4\u9500\u201d\uff1f\u53d1\u73b0\u7b2c\u4e00\u6b65\u52a0\u8fb9\u4e4b\u540e\uff0c\u8981\u60f3\u6267\u884c\u7b2c\u4e8c\u6b65\u52a0\u8fb9\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u64a4\u9500\u6389\u7b2c\u4e00\u6b65\u540e\u534a\u90e8\u5206\u7684\u52a0\u8fb9\u64cd\u4f5c\u5373\u53ef\uff0c\u65e0\u9700\u91cd\u65b0\u52a0\u8fb9\uff08\u663e\u7136\uff0c\u64a4\u9500\u6bd4\u521d\u59cb\u5316\u518d\u91cd\u65b0\u52a0\u8fb9\u8981\u65b9\u4fbf\u7684\u591a\uff09\u3002\n\n\u55ef\uff0c\u7136\u540e\u8fd9\u9053\u9898\u5c31\u7ed3\u675f\u4e86\u3002\n\n\u7b80\u5355\u63d0\u4e00\u5634\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\uff0c\u5b83\u5176\u5b9e\u5c31\u662f\u5728\u5e76\u67e5\u96c6\u7684\u57fa\u7840\u4e0a\uff0c\u4e0d\u8def\u5f84\u538b\u7f29\uff0c\u7136\u540e\u518d\u5f00\u4e2a\u6808\u5b58\u653e\u6bcf\u6b21\u5408\u5e76\u7684\u4e24\u4e2a\u6839\u8282\u70b9\uff0c\u4fbf\u4e8e\u64a4\u9500\u5373\u53ef\u3002\n\n## Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n \n#define rep(i, a, b) for(register int i = a; i <= b; ++i)\nconst int maxn = 3e5 + 5;\nint n, m, num;\nint fa[maxn], sz[maxn], stk[maxn], tot, ans[maxn];\nstruct node{\n    int u, v, w, id;\n}e[maxn], b[maxn];\nbool operator <(const node &a, const node &b){\n    return a.w < b.w;\n}\n \ninline int fnd(int x){\n    return x == fa[x] ? x : fnd(fa[x]);\n}\n \ninline void erase(int lmt){\n    while(tot > lmt){\n        int v = stk[tot--], u = fa[v];\n        fa[v] = v, sz[u] -= sz[v];\n        if((sz[u] & 1) and (sz[v] & 1)) num += 2; \n    }\n}\n \ninline void merge(int x, int y){\n    x = fnd(x), y = fnd(y);\n    if(x == y) return;\n    if(sz[x] < sz[y]) swap(x, y);\n    if((sz[x] & 1) and (sz[y] & 1)) num -= 2;\n    sz[x] += sz[y], fa[y] = x, stk[++tot] = y;\n}\n \ninline void slv(int ql, int qr, int vl, int vr){\n    if(ql > qr or vr < vl) return;\n    if(vl == vr){\n        rep(i, ql, qr) ans[i] = b[vl].w; return;\n    } int mid = vl + vr >> 1, nw = tot;\n    rep(i, vl, mid) if(b[i].id < ql) merge(b[i].u, b[i].v);//\u52a0\u5165\u4e4b\u524d\u7684\u8fb9 \n    int Ans = qr + 1, nw2 = tot;\n    rep(i, ql, qr){\n        if(e[i].w <= b[mid].w) merge(e[i].u, e[i].v);\n        if(!num){Ans = i; break;}//\u627e\u5230 ans[mid] \n    } erase(nw2), slv(ql, Ans - 1, mid + 1, vr), erase(nw);//\u9012\u5f52\u5de6\u5b50\u533a\u95f4 \n    rep(i, ql, Ans - 1) if(e[i].w <= b[vl].w) merge(e[i].u, e[i].v);//\u6dfb\u52a0\u6ee1\u8db3\u9650\u5236\u7684\u8fb9 \n    slv(Ans, qr, vl, mid), erase(nw); //\u9012\u5f52\u53f3\u5b50\u533a\u95f4 \n} \n \nint main(){\n    scanf(\"%d%d\", &n, &m), num = n;\n    rep(i, 1, n) sz[i] = 1, fa[i] = i;\n    rep(i, 1, m) scanf(\"%d%d%d\", &e[i].u, &e[i].v, &e[i].w), e[i].id = i, b[i] = e[i];\n    sort(b + 1, b + m + 1), b[m + 1].w = -1;\n    slv(1, m, 1, m + 1); rep(i, 1, m) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n\n------------\n\u611f\u8c22\u9605\u8bfb\u3002",
        "postTime": 1658410838,
        "uid": 469672,
        "name": "\u4f0d\u53c1\u58f9",
        "ccfLevel": 7,
        "title": "\u3010CF603E\u3011 Pastoral Oddities"
    },
    {
        "content": "### CF603E Pastoral Oddities\n\n\u5b58\u5728\u8fd9\u6837\u6ee1\u8db3\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u5747\u4e3a\u5947\u6570\u7684\u8fb9\u96c6\uff0c\u5145\u5206\u6761\u4ef6\u662f\u8fde\u901a\u5757\u7684\u70b9\u6570\u4e3a\u5076\u6570\u3002 \n\n\u5148\u8003\u8651\u5fc5\u8981\u6027\uff0c\u52a0\u5165\u4e00\u8fb9\u5ea6\u6570\u548c\u589e\u52a0 $2$ \u6545\u5ea6\u6570\u548c\u4e3a\u5076\u6570\uff0c\u800c\u5f53\u6ee1\u8db3\u6761\u4ef6\u7684\u8fde\u901a\u5757\u70b9\u6570\u4e3a\u5947\u65f6\uff0c\u5ea6\u6570\u548c\u5fc5\u4e3a\u5947\u6570\uff0c\u77db\u76fe\u3002\n\n\u8bc1\u660e\u5145\u5206\u6027\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u5076\u6570\u5927\u5c0f\u7684\u8fde\u901a\u5757\uff0c\u627e\u51fa\u5176\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4ece\u53f6\u5b50\u5f00\u59cb\u6839\u636e\u8fde\u5411\u513f\u5b50\u7684\u5ea6\u6570\u8003\u8651\u662f\u5426\u6dfb\u52a0\u5176\u5230\u7236\u4eb2\u7684\u8fb9\uff0c\u9010\u6b65\u6ee1\u8db3\uff0c\u6700\u540e\u9664\u4e86\u6839\u4e4b\u5916\u90fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u663e\u7136\u6839\u636e\u5947\u5076\u6027\u6839\u4e5f\u6ee1\u8db3\u6761\u4ef6\uff0c\u6545\u5145\u5206\u6027\u4fdd\u8bc1\u3002\n\n\u6545\u7528\u4e00\u4e2a\u6309\u79e9\u5408\u5e76\u5e76\u67e5\u96c6\u5373\u53ef\u7ef4\u62a4\u8fde\u901a\u5757\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u518d\u8003\u8651\u8fb9\u96c6\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u6700\u5c0f\u7684\u9650\u5236\uff0c\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u8db3\u77e3\u3002\n\n\u5728\u7ebf `LCT` \u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\u68ee\u6797\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\u3002\n\n\u4f46\u975e\u5e38\u96be\u5199\u4e14\u5e38\u6570\u5de8\u5927\uff0c\u8003\u8651\u79bb\u7ebf\u505a\u6cd5\u3002\n\n\u89c2\u5bdf\u6837\u4f8b\u5f97\u77e5\uff0c\u65f6\u95f4\u5347\u5e8f\uff0c\u7b54\u6848\u5355\u8c03\u9012\u51cf\uff1b\u8fd8\u6709\u201c\u6700\u5927\u503c\u6700\u5c0f\u201d\u4e00\u7c7b\u7684\u8bcd\uff0c\u8003\u8651\u4e8c\u5206\u3002\n\n\u591a\u6b21\u8be2\u95ee\uff0c\u8003\u8651\u6574\u4f53\u4e8c\u5206\u3002\n\n\u5177\u4f53\u5730\uff0c\u79bb\u6563\u5316\u6743\u503c\uff0c\u518d\u5bf9\u6743\u503c\u5206\u6cbb\uff0c\u4ee4\u5176\u4e3a $mid$\u3002\n\n\u6dfb\u52a0\u6743\u503c $\\leq mid$ \u7684\u8fb9\u76f4\u5230\u5408\u6cd5\uff0c\u6839\u636e\u7b2c\u4e00\u4e2a\u5408\u6cd5\u7684\u4f4d\u7f6e\u5206\u6cbb\u3002\n\n\u6ce8\u610f\u7ec6\u8282\uff0c\u6574\u4f53\u4e8c\u5206\u540e\u9762\u7684\u72b6\u6001 $(l,r,vl,vr)$ \u9700\u8981\u5e76\u67e5\u96c6\u4e2d\u542b\u6709\u6240\u6709\u7f16\u53f7 $\\leq l$ \u4e14\u6743\u503c $\\leq vl$ \u7684\u8fb9\uff0c\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(m\\log m\\log n)$\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n\ntypedef long long ll;\n\n#define ha putchar(' ')\n#define he putchar('\\n')\n\ninline int read() {\n\tint x = 0;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9')\n\t\tc = getchar();\n\twhile (c >= '0' && c <= '9')\n\t\tx = (x << 3) + (x << 1) + (c ^ 48), c = getchar();\n\treturn x;\n}\n\ninline void write(int x) {\n\tif (x < 0) {\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9)\n\t\twrite(x / 10);\n\tputchar(x % 10 + 48);\n}\n\nconst int _ = 3e5 + 5;\n\nint n, m, cnt, fa[_], sz[_], t, s[_], ans[_];\n\nstruct abc {\n\tint u, v, w, id;\n\tbool operator < (const abc &t) {\n\t\treturn w < t.w;\n\t}\n} e[_], b[_];\n\nint find(int x) {\n\treturn fa[x] == x ? x : find(fa[x]);\n}\n\nvoid merge(int u, int v) {\n\tu = find(u), v = find(v);\n\tif (u == v) return;\n\tif (sz[u] < sz[v]) std::swap(u, v);\n\tif ((sz[u] & 1) && (sz[v] & 1)) cnt -= 2;\n\tsz[u] += sz[v], fa[v] = u, s[++t] = v;\n}\n\nvoid ers(int lim) {\n\twhile (t > lim) {\n\t\tint v = s[t--], u = fa[v];\n\t\tfa[v] = v, sz[u] -= sz[v];\n\t\tif ((sz[u] & 1) && (sz[v] & 1)) cnt += 2;\n\t}\n}\n\nvoid solve(int l, int r, int vl, int vr) {\n\tif (l > r || vl > vr) return;\n\tif (vl == vr) {\n\t\tfor (int i = l; i <= r; ++i) ans[i] = b[vl].w;\n\t\treturn;\n\t}\n\tint mid = (vl + vr) >> 1, nw = t;\n\tfor (int i = vl; i <= mid; ++i)\n\t\tif (b[i].id < l) merge(b[i].u, b[i].v);\n\tint Id = r + 1, nw2 = t;\n\tfor (int i = l; i <= r; ++i) {\n\t\tif (e[i].w <= b[mid].w) merge(e[i].u, e[i].v);\n\t\tif (!cnt) {\n\t\t\tId = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\ters(nw2);\n\tsolve(l, Id - 1, mid + 1, vr);\n\ters(nw);\n\tfor (int i = l; i < Id; ++i)\n\t\tif (e[i].w <= b[vl].w) merge(e[i].u, e[i].v);\n\tsolve(Id, r, vl, mid);\n\ters(nw);\n}\n\nsigned main() {\n\tn = cnt = read(), m = read();\n\tfor (int i = 1; i <= n; ++i) fa[i] = i, sz[i] = 1;\n\tfor (int i = 1; i <= m; ++i) {\n\t\te[i].u = read(), e[i].v = read(), e[i].w = read();\n\t\te[i].id = i, b[i] = e[i];\n\t}\n\tstd::sort(b + 1, b + m + 1);\n\tb[m + 1].w = -1;\n\tsolve(1, m, 1, m + 1);\n\tfor (int i = 1; i <= m; ++i) write(ans[i]), he;\n}\n```\n\n",
        "postTime": 1658392461,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "CF603E Pastoral Oddities"
    },
    {
        "content": "~~\u6765\u8865\u4e00\u4e2a\u6bd4\u8f83\u6b63\u5b97\u4e00\u70b9\u7684\u6574\u4f53\u4e8c\u5206\u505a\u6cd5\u5427~~\r\n\r\n\u9996\u5148\u7ed3\u8bba\u662f\u6240\u6709\u8fde\u901a\u5757\u70b9\u6570\u5747\u4e3a\u5076\u6570\u7684\u56fe\u662f\u5408\u6cd5\u7684\uff0c\u8fd9\u4e00\u70b9\u5176\u4ed6\u9898\u89e3\u5df2\u7ecf\u7ed9\u51fa\u4e86\u4e25\u8c28\u7684\u8bc1\u660e\u3002   \r\n\u89c2\u5bdf\u5230\u7b54\u6848\u5f88\u660e\u663e\u662f\u5355\u8c03\u7684\uff0c\u56e0\u6b64\u6bcf\u6b21\u90fd\u53ef\u4ee5\u4e8c\u5206\u5b9e\u73b0\uff0c\u7531\u4e8e\u6709\u591a\u6b21\u8be2\u95ee\uff0c\u53ef\u4ee5\u4f7f\u7528\u6574\u4f53\u4e8c\u5206\u89e3\u51b3\u3002    \r\n\u52a0\u8fb9\u9650\u5236\u6709\u4e8c\uff0c\u5176\u4e00\u65f6\u95f4\u8f74\uff0c\u5176\u4e00\u503c\u5927\u5c0f\uff0c\u6070\u597d\u5bf9\u5e94\u4e86\u4e24\u7ef4\u64cd\u4f5c\u3001\u4e8c\u5206\u503c\uff0c\u56e0\u6b64\u9884\u5904\u7406\u4e24\u4e2a\u8fb9\u96c6\u5206\u522b\u6309\u7167\u65f6\u95f4\u3001\u503c\u57df\u6392\u5e8f\u5907\u7528\u3002   \r\n~~\u6b63\u5b97\u7684\u6574\u4f53\u4e8c\u5206\u662f\u4e8c\u5206\u503c\u57df\u7684~~    \r\n$\\mathop{solve}(lx,rx,l,r)$ \u8868\u793a\u64cd\u4f5c $[lx,rx]$ \u7684\u7b54\u6848\u662f $[l,r]$ \u7684\u8fb9\uff0c\u8bbe\u4e8c\u5206\u503c $\\mathop{mid}=\\frac{l+r}{2}$\uff0c\u7136\u540e\u53bb\u5bfb\u627e\u64cd\u4f5c\u7684\u5206\u754c\u70b9\u3002   \r\n\u601d\u60f3\u662f\u4ece\u5de6\u5230\u53f3\u4e00\u6761\u4e00\u6761\u52a0 $\\le \\mathop{mid}$ \u7684\u8fb9\uff0c\u76f4\u5230\u67d0\u4e2a\u4f4d\u7f6e $\\mathop{pos}$ \u4f7f\u5f97\u56fe\u53d8\u6210\u4e86\u5408\u6cd5\u7684\uff0c\u90a3\u4e48\u6b64\u65f6\u5c31\u53ef\u4ee5\u6210\u529f\u9012\u5f52\u5230 $(lx,pos-1,mid+1,r)$ \u548c $(pos,rx,l,mid)$ \u89e3\u51b3\u4e86\u3002   \r\n\u6ce8\u610f\u5728\u6bcf\u6b21\u679a\u4e3e\u4e4b\u524d\uff0c\u90fd\u8981\u4fdd\u8bc1\u6240\u6709 $\\le mid$ \u4e14 $<lx$ \u7684\u6240\u6709\u8fb9\u90fd\u5df2\u7ecf\u5728\u96c6\u5408\u91cc\uff0c\u90a3\u4e48\u6839\u636e\u4e8c\u5206\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u624b\u52a8\u4f7f\u5f97\u8fdb\u5165\u51fd\u6570\u524d\u5c31\u5904\u7406\u597d $<l$ \u7684\u90e8\u5206\u5df2\u7ecf\u52a0\u5165\uff0c\u6b64\u65f6\u518d\u52a0\u5165 $[l,mid]$ \u7684\u8fb9\u3002   \r\n\u6b64\u65f6\u53ef\u4ee5\u53d1\u73b0\u5206\u6cbb\u6df1\u5ea6\u662f $\\log n$ \u7684\uff0c\u4e14\u6bcf\u5c42\u4e2d\u90fd\u53ea\u679a\u4e3e\u5f53\u524d\u5c42\u957f\u5ea6\u7684\u8ddd\u79bb\uff0c\u603b\u590d\u6742\u5ea6\u8fd8\u662f $\\mathcal{O}(n\\log n)$ \u7684\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u7684\u590d\u6742\u5ea6\u3002\r\n\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define fi first\r\n#define se second\r\n#define mp make_pair\r\nconst int maxn=3e5+5;\r\ntypedef pair<int,int>pi;\r\nint n,m,ans[maxn],tp;\r\npi sta[maxn];\r\nint read(){\r\n\tint x=0,f=1;char ch=getchar();\r\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\r\n\twhile(isdigit(ch)){x=x*10+ch-48;ch=getchar();}\r\n\treturn x*f;\r\n}\r\nstruct Edge{\r\n\tint x,y,w,id;\r\n}edge[maxn],edge1[maxn];\r\nstruct DSU{\r\n\tint fa[maxn],siz[maxn],num;\r\n\tvoid init(int n){num=n;for(int i=1;i<=n;i++)fa[i]=i,siz[i]=1;}\r\n\tint find(int x){return fa[x]==x?x:find(fa[x]);}\r\n\tvoid merge(int x,int y){\r\n\t\tx=find(x),y=find(y);if(x==y)return ;\r\n\t\tif(siz[x]>siz[y])swap(x,y);\r\n\t\tnum-=(siz[x]&1),num-=(siz[y]&1);\r\n\t\tfa[x]=y;siz[y]+=siz[x];sta[++tp]=mp(x,y);\r\n\t\tnum+=(siz[y]&1);\r\n\t\treturn ;\r\n\t}\r\n\tvoid undo(int last){\r\n\t\twhile(tp>last){\r\n\t\t\tnum-=(siz[sta[tp].se]&1);\r\n\t\t\tfa[sta[tp].fi]=sta[tp].fi,siz[sta[tp].se]-=siz[sta[tp].fi];\r\n\t\t\tnum+=(siz[sta[tp].fi]&1);num+=(siz[sta[tp].se]&1);\r\n\t\t\ttp--;\r\n\t\t}\r\n\t\treturn ;\r\n\t}\r\n}t;\r\nvoid solve(int lx,int rx,int l,int r){\r\n\tif(lx>rx)return ;\r\n\tint mid=l+r>>1,last=tp,pos=0;\r\n\tfor(int i=l;i<=mid;i++)if(edge[i].id<lx)t.merge(edge[i].x,edge[i].y);\r\n\tfor(int i=lx;i<=rx;i++){\r\n\t\tif(edge1[i].id<=mid)t.merge(edge1[i].x,edge1[i].y);\r\n\t\tif(!t.num){pos=i;break;}\r\n\t}\r\n\tt.undo(last);\r\n\tif(l==r){\r\n\t\tif(!pos)pos=rx+1;\r\n\t\tfor(int i=pos;i<=rx;i++)ans[i]=edge[l].w;\r\n\t\tfor(int i=lx;i<pos;i++)ans[i]=-1;\r\n\t\treturn ;\r\n\t}\r\n\tif(!pos){\r\n\t\tlast=tp;\r\n\t\tfor(int i=l;i<=mid;i++)if(edge[i].id<lx)t.merge(edge[i].x,edge[i].y);\r\n\t\tsolve(lx,rx,mid+1,r);t.undo(last);return ;\r\n\t}\r\n\tlast=tp;\r\n\tfor(int i=l;i<=mid;i++)if(edge[i].id<lx)t.merge(edge[i].x,edge[i].y);\r\n\tsolve(lx,pos-1,mid+1,r);t.undo(last);\r\n\tlast=tp;\r\n\tfor(int i=lx;i<pos;i++)if(edge1[i].id<l)t.merge(edge1[i].x,edge1[i].y);\r\n\tsolve(pos,rx,l,mid);t.undo(last);\r\n\treturn ;\r\n}\r\nint main(){\r\n\tn=read(),m=read();t.init(n);\r\n\tfor(int i=1;i<=m;i++)edge1[i]=edge[i]={read(),read(),read(),i};\r\n\tsort(edge+1,edge+m+1,[](Edge a,Edge b){return a.w<b.w;});\r\n\tfor(int i=1;i<=m;i++)edge1[edge[i].id].id=i;\r\n\tsolve(1,m,1,m);for(int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\r\n\treturn 0;\r\n}\r\n```",
        "postTime": 1653443121,
        "uid": 232987,
        "name": "yangchenxiao",
        "ccfLevel": 9,
        "title": "CF603E Pastoral Oddities \u9898\u89e3"
    },
    {
        "content": "### $\\texttt{Solution}$\n\u8fd9\u91cc\u7ed9\u51faDFS\u6811\u7ecf\u5178\u65b9\u6cd5\u5bf9\u4e8e\u6b64\u9898\u7ed3\u8bba\u7684\u4e00\u4e2a\u8bc1\u660e\n\n\u968f\u610f\u53d6\u70b9\u96c6\u7684\u4e00\u4e2aDFS\u751f\u6210\u68ee\u6797\uff0c\u94a6\u5b9a\u9009\u6240\u6709\u975e\u6811\u8fb9\n\n\u4ece\u53f6\u5b50\u5f00\u59cb\u7528\u7236\u4eb2\u8fb9\u8c03\u6574\u8282\u70b9\u5ea6\u6570\uff0c\u5bb9\u6613\u53d1\u73b0\u9664\u6839\u5916\u6240\u6709\u70b9\u5747\u80fd\u88ab\u8c03\u6574\u5230\u5947\u5ea6\n\n\u5f53\u8c03\u6574\u6cd5\u505a\u5b8c\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u6839\u7684\u5ea6\u6570\u5df2\u7ecf\u786e\u5b9a\uff0c\u4ec0\u4e48\u65f6\u5019\u6839\u7684\u5ea6\u6570\u4e3a\u5947\u6570\u5462\uff1f\n\n\u8003\u8651\u4e00\u6761\u8fb9\u4f7f\u5f97\u6574\u4e2a\u56fe\u7684\u5ea6\u6570\u52a02\uff0c\u56fe\u603b\u5ea6\u6570\u4e00\u5b9a\u4e3a\u5076\u6570\n\n\u663e\u7136\u6bcf\u4e2a\u8fde\u901a\u5757\u72ec\u7acb\uff0c\u8bb0\u67d0\u4e2a\u8fde\u901a\u5757\u70b9\u6570\u4e3a $n$\n\n\u9664\u6839\u5916\u70b9\u5ea6\u6570\u548c\u5947\u5076\u6027\u4e3a $n-1$,\u5219\u5f53 $n-1$ \u4e3a\u5947\u6570\u65f6\u6839\u8282\u70b9\u6240\u9009\u5ea6\u6570\u4e00\u5b9a\u4e3a\u5947\u6570\n\n\u6545\u201c\u5b58\u5728\u4e00\u4e2a\u8fb9\u96c6\uff0c\u6ee1\u8db3\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u5747\u4e3a\u5947\u6570\u201d\u7b49\u4ef7\u4e8e\u201c\u4e0d\u5b58\u5728\u5947\u6570\u4e2a\u70b9\u7684\u8fde\u901a\u5757\u201d\n\n\u8fdb\u4e00\u6b65\u53d1\u73b0\u52a0\u5165\u4e00\u6761\u8fb9\u7b54\u6848\u4e00\u5b9a\u4e0d\u52a3\n\n\u8fd9\u662f\u56e0\u4e3a\u5bf9\u4e8e\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u5408\u5e76\uff1a\u5947\u52a0\u5947\u4e3a\u5076\uff0c\u5076\u52a0\u5076\u4e3a\u5076\uff0c\u5947\u52a0\u5076\u4e3a\u5947\n\n\u5206\u6cbb\u8ba1\u7b97\u5373\u53ef\n\n[code](https://www.luogu.com.cn/paste/f4ghnb6o)",
        "postTime": 1627701100,
        "uid": 98527,
        "name": "juju527",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF603E \u3010Pastoral Oddities\u3011"
    },
    {
        "content": "\uff08\u54e6\u6211\u5199\u8fd9\u4e2a\u9898\u89e3\u7684\u65f6\u5019luogu\u597d\u50cf\u6ca1\u6cd5\u4ea4CF\u4e86\u2026\u2026\u4e0d\u8fc7\u8fd9\u4e2a\u5728CF\u4e0a\u786e\u5b9eA\u4e86\u2026\u2026\uff09\n\n\u9996\u5148\u4f60\u4e00\u4e2a\u5927\u81f4\u7684\u601d\u8def\u5c31\u662f\uff0c\u6bcf\u6b21\u66b4\u529b\u628a\u8fb9\u6392\u5e8f\u7136\u540e\u4f9d\u6b21\u52a0\u5165\u5224\u65ad\u662f\u5426\u80fd\u591f\u6784\u6210\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u6848\u3002\u7136\u540e\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5224\u5b9a\u5176\u5408\u6cd5\u6027\u3002\n\n\u7136\u540e~~\u7ecf\u8fc7\u591a\u6b21\u624b\u73a9~~\u53d1\u73b0\u52a0\u5165\u4e00\u6761\u4e24\u7aef\u90fd\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u8fb9\uff08\u4e5f\u5c31\u662f\u975e\u6811\u8fb9\uff09\u662f\u5bf9\u5408\u6cd5\u6027\u6ca1\u6709\u7528\u7684\uff08\u81f3\u4e8e\u4e3a\u5565\u8fd9\u4e2a\u6211\u5e76\u4e0d\u80fd\u8bc1\u660e\u2026\u2026\uff09\u3002\u7136\u540e\u8fd9\u6837\u7684\u8bdd\u4f60\u5c31\u53ea\u9700\u8981\u8003\u8651\u5176\u751f\u6210\u6811\u6216\u8005\u8bf4\u662f\u751f\u6210\u68ee\u6797\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ece\u5176\u53f6\u5b50\u5165\u624b\uff0c\u4e0d\u59a8\u5148\u786e\u5b9a\u4e00\u4e2a\u6839\uff0c\u7136\u540e\u53f6\u5b50\u7684\u5ea6\u6570\u5fc5\u987b\u662f1\u4ed6\u5fc5\u987b\u9009\u4ed6\u7684\u7236\u4eb2\u8fb9\uff0c\u6211\u4eec\u4ece\u8fd9\u91cc\u5165\u624b\uff0c\u5c31\u8fd9\u6837dfs\u4e00\u904d\uff0c\u53d1\u73b0\u4e00\u4e2a\u70b9\u5ea6\u6570\u4e3a\u5076\u6570\u7684\u65f6\u5019\u5c31\u9009\u4e0a\u4ed6\u7236\u4eb2\u8fb9\uff0c\u4e3a\u5947\u6570\u7684\u65f6\u5019\u4e0d\u7528\u9009\u4e5f\u4e0d\u80fd\u9009\u7236\u4eb2\u8fb9\uff0c\u6700\u540e\u5224\u65ad\u6839\u7684\u5ea6\u6570\u5373\u53ef\uff0c\u6240\u4ee5\u4e0d\u7ba1\u9009\u54ea\u4e2a\u6839\u65b9\u6cd5\u90fd\u662f\u552f\u4e00\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u63a5\u7740\u624b\u73a9\u53d1\u73b0\u4e00\u4e2a\u66f4\u5f3a\u7684\u7ed3\u8bba\uff1a**\u5982\u679c\u5b58\u5728size\u4e3a\u5947\u6570\u7684\u8fde\u901a\u5757\uff0c\u5c31\u65e0\u89e3\u3002**\n\n\u8fd9\u4e2a\u53ef\u4ee5\u7528\u4e0a\u9762\u7684\u90a3\u4e2a\u7ed3\u8bba\u5f52\u7eb3\u8bc1\u660e\uff1a\u5982\u679c\u8fd9\u4e2a\u8fde\u901a\u5757\u53ea\u67091\u4e2a\u70b9\uff0c\u663e\u7136\u65e0\u89e3\uff0c\u5982\u679c\u8fd9\u4e2a\u8fde\u901a\u5757\u662f2\u4e2a\u70b9\u8fde\u8d77\u6765\u7684\u663e\u7136\u6709\u89e3\uff0c\u90a3\u4e48\uff0c\u6211\u73b0\u5728\u8981\u5408\u5e76\u4e24\u4e2a\u5076\u8fde\u901a\u5757\uff0c\u5408\u5e76\u5b8c\u8fd8\u662f\u5076\u8fde\u901a\u5757\u662f\u6709\u89e3\u7684\u3002\u4e00\u4e2a\u5947\u8fde\u901a\u5757\u53ef\u4ee5\u770b\u505a\u5728\u4e00\u4e2a\u5076\u8fde\u901a\u5757\u4e0a\u52a0\u4e86\u4e2a\u53f6\u5b50\uff0c\u7531\u4e8e\u5076\u8fde\u901a\u5757\u5df2\u7ecf\u6709\u89e3\u4f46\u662f\u52a0\u4e86\u4e2a\u53f6\u5b50\u4e4b\u540e\u4f1a\u81ea\u5e95\u5f80\u4e0a\u6539\u53d8\u5947\u5076\u6027\uff0c\u5c31\u65e0\u89e3\u4e86\uff0c\u800c\u5408\u5e76\u5947\u8fde\u901a\u5757\u76f8\u5f53\u4e8e\u5408\u5e76\u4e24\u4e2a\u5076\u8fde\u901a\u5757\u518d\u52a02\u4e2a\u53f6\u5b50\uff0c\u6539\u53d8\u4e86\u4e24\u6b21\u5947\u5076\u6027\u76f8\u5f53\u4e8e\u6ca1\u53d8\uff0c\u6240\u4ee5\u8fd9\u7ed3\u8bba\u6210\u7acb\u3002~~\uff08\u611f\u89c9\u6211\u597d\u50cf\u5728\u53e3\u80e1\u554a\u2026\u2026\uff09~~\n\n\u4e8e\u662f\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u505a\u5230$O(m^2logm)$\u7684\u66b4\u529b\u4e86\uff0c\u4f46\u662f\u8fd9\u4e1c\u897f\u597d\u50cf\u5c31\u662f\u5728\u505a\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u6216\u8005\u53eb\u6700\u5c0f\u751f\u6210\u68ee\u6797\uff0c\u5982\u679c\u8981\u52a8\u6001\u7ef4\u62a4\u7684\u8bdd\uff0c\u80fd\u4e0d\u80fd\u76f4\u63a5\u7528$LCT$\u5462\uff1f\n\n\u54e6\u7136\u540e\u4f60\u5199\u4e86\u4e00\u4e2aLCT\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u540e\u53d1\u73b0\u8fde\u6837\u4f8b1\u90fd\u8fc7\u4e0d\u53bb\uff0c\u56e0\u4e3a\u4f60\u66b4\u529b\u7684\u8fc7\u7a0b\u662f\u5982\u679c\u52a0\u5b8c\u8fd9\u6761\u8fb9\u4e4b\u540e\u8fde\u901a\u5757\u5168\u90e8\u90fd\u662f\u5076\u7684\uff08\u663e\u7136\u4e4b\u540e\u518d\u52a0\u8fb9\u4e0d\u53ef\u80fd\u53c8\u51fa\u6765\u5947\u7684\u2026\u2026\uff09\u5c31\u505c\u6b62\u52a0\u8fb9\uff0c\u8fd9\u6761\u8fb9\u5c31\u662f\u6700\u5c0f\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u4f60\u6700\u5c0f\u751f\u6210\u68ee\u6797\u4e0a\u7684\u4e00\u4e9b\u5927\u6811\u8fb9\u662f\u6ca1\u6709\u7528\u7684\u3002\n\n\u90a3\u4e48\u6211\u53ef\u4ee5\u8fd9\u4e48\u5e72\uff1a\u6bcf\u6b21\u6211\u7ef4\u62a4\u5b8c\u751f\u6210\u68ee\u6797\u4e4b\u540e\uff0c\u6211\u4ece\u5927\u5230\u5c0f\u8003\u8651\u6bcf\u6761\u5df2\u7ecf\u52a0\u5165\u7684\u8fb9\uff0c\u5982\u679c\u5220\u6389\u5b83\u4e4b\u540e\u6ca1\u6709\u4ea7\u751f\u5947\u8fde\u901a\u5757\uff0c\u5c31\u5220\u6389\uff0c\u5426\u5219\u505c\u6b62\u5220\u8fb9\u3002\u4e3a\u5565\u8fd9\u4e2a\u662f\u5bf9\u7684\u5462\uff1f\u5982\u679c\u4f60\u6700\u5927\u7684\u8fb9\u6bd4\u7b54\u6848\u5927\u7684\u8bdd\uff0c\u90a3\u4e48\u5047\u5982\u7b54\u6848\u7684\u90a3\u6761\u8fb9\u4e4b\u540e\u52a0\u7684\u8fb9\u8fde\u7684\u5c31\u90fd\u662f\u5076\u8fde\u901a\u5757\uff0c\u6240\u4ee5\u5220\u53bb\u4e00\u5b9a\u4e0d\u4f1a\u4ea7\u751f\u5947\u8fde\u901a\u5757\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u5728LCT\u4e0a\u7ef4\u62a4\u4e00\u4e0b\u5b50\u6811\u5b9e\u9645\u7684size\uff0c\u518d\u5f00\u4e2a\u5927\u6839\u5806\u7ef4\u62a4\u52a0\u8fdb\u6765\u7684\u8fb9\uff0c\u5c31\u597d\u4e86\u3002\u6ce8\u610f\u66ff\u6362\u6811\u8fb9\u7684\u65f6\u5019\u8981\u5220\u6389\u5df2\u7ecf\u52a0\u8fdb\u6765\u7684\u4e00\u6761\u6811\u8fb9\uff0c\u8fd9\u4e2a\u7528\u4e2a\u61d2\u60f0\u5220\u9664\u5806\u3002\n\n\u54e6\u5bf9\u4e86\u8fd9\u91cc\u5206\u4eab\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff0c\u6bd4\u5982\u4f60\u8981\u662f\u7528\u7ed3\u6784\u4f53\u5b58\u8fb9\u7684\u8bdd\u4e0d\u80fd\u53ea\u5728\u81ea\u5b9a\u4e49\u7684$<$\u8fd0\u7b97\u7b26\u91cc\u6bd4\u8f83\u5927\u5c0f\uff0c\u5982\u679c\u5927\u5c0f\u76f8\u540c\u7684\u8bdd\u8fd8\u8981\u4ee5\u7f16\u53f7\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u8fd9\u6837\u9632\u6b62\u8fd9\u4e24\u6761\u5df2\u7ecf\u61d2\u60f0\u5220\u9664\u7684\u8fb9\u5728\u4e24\u4e2a\u5806\u4e2d\u76f8\u5bf9\u5927\u5c0f\u4e0d\u4e00\u6837\u5bfc\u81f4\u6ca1\u6cd5\u53ca\u65f6\u5f39\u51fa\u53bb\u5c31\u51fa\u9505\u4e86\u2026\u2026\u8fd9\u4e2a\u8c03\u4e86\u6211\u597d\u4e45\u2026\u2026\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define isroot(_o) (_o!=ch[fa[_o]][0]&&_o!=ch[fa[_o]][1])\n#define opp(_o) (_o==ch[fa[_o]][1])\nusing namespace std;\nnamespace ywy{\n\tvoid print(int num){\n\t\tif(num>=10)print(num/10);putchar(num%10+'0');\n\t}\n\tint fa[400001],minpos[400001],val[400001],ch[400001][2],size[400001];\n\tint stk[400001];\n\tunsigned char bj[400001];\n\tint sz[400001];\n\tinline void up(int tree){\n\t\tsize[tree]=size[ch[tree][0]]+size[ch[tree][1]]+sz[tree];\n\t\tminpos[tree]=tree;\n\t\tint minn=val[tree];\n\t\tif(val[minpos[ch[tree][0]]]>minn)minn=val[minpos[ch[tree][0]]],minpos[tree]=minpos[ch[tree][0]];\n\t\tif(val[minpos[ch[tree][1]]]>minn)minn=val[minpos[ch[tree][1]]],minpos[tree]=minpos[ch[tree][1]];\n\t}\n\tinline void down(int tree){\n\t\tif(bj[tree])bj[tree]=0,swap(ch[tree][0],ch[tree][1]),bj[ch[tree][0]]^=1,bj[ch[tree][1]]^=1;\n\t}\n\tinline void xuan(int me){\n        int tree=fa[me],cjr=fa[tree];\n\t\tdown(cjr);down(tree);down(me);\n\t\tint op=opp(me),ls=ch[me][op^1];\n        ch[me][op^1]=tree;ch[tree][op]=ls;fa[ls]=tree;\n\t\tif(!isroot(tree))ch[cjr][opp(tree)]=me;\n        fa[tree]=me;fa[me]=cjr;up(tree);up(me);\n    }\n    inline void splay(int tree){\n        if(isroot(tree)){down(tree);return;}\n\t\tint sp=0,tmp=tree;\n\t\twhile(!isroot(tmp))stk[sp]=tmp,sp++,tmp=fa[tmp];\n        stk[sp]=tmp;sp++;\n\t\twhile(sp)sp--,down(stk[sp]);\n\t\twhile(!isroot(tree)){\n            int cjr=fa[tree];\n\t\t\tif(!isroot(cjr))xuan((opp(cjr)==opp(tree))?cjr:tree);\n\t\t\txuan(tree);\n        }\n\t\tup(tree);\n    }\n    inline void access(int tree){\n        splay(tree);down(tree);\n\t\tsz[tree]+=size[ch[tree][1]];\n\t\tch[tree][1]=0;up(tree);while(fa[tree]){\n            int cjr=fa[tree];splay(cjr);down(cjr);\n\t\t\tsz[cjr]-=size[tree];\n\t\t\tsz[cjr]+=size[ch[cjr][1]];\n            ch[cjr][1]=tree;\n\t\t\tup(cjr);splay(tree);\n        }\n\t\tup(tree);\n    }\n\tinline void makeroot(int tree){\n\t\taccess(tree);\n\t\tsplay(tree);bj[tree]^=1;\n\t}\n\tinline void link(int a,int b){\n\t\tmakeroot(a);makeroot(b);\n\t\tsz[a]+=size[b];fa[b]=a;up(a);\n\t}\n\tinline void cut(int a,int b){\n\t\tmakeroot(a);access(b);\n\t\tsplay(a);down(a);\n\t\tch[a][1]=fa[b]=0;up(a);\n\t}\n\tinline int findroot(int tree){\n\t\taccess(tree);splay(tree);down(tree);\n\t\twhile(ch[tree][0])tree=ch[tree][0],down(tree);\n\t\tsplay(tree);return(tree);\n\t}\n\ttypedef struct _b{\n\t\tint s;int t;int l;\n\t\tfriend bool operator <(const _b &a,const _b &b){\n\t\t\treturn(a.l<b.l);\n\t\t}\n\t}bian;\n\tbian memchi[300001];\n\tint gnn=1;\n\tint ss[400001],ts[400001];\n\ttypedef struct _n{\n\t\tint l;int pt;\n\t\tfriend bool operator <(const _n &a,const _n &b){\n\t\t\tif(a.l==b.l)return(a.pt<b.pt);\n\t\t\treturn(a.l<b.l);\n\t\t}\n\t\tfriend bool operator ==(const _n &a,const _n &b){\n\t\t\treturn(a.pt==b.pt);\n\t\t}\n\t}node;\n\tpriority_queue<node> que,del;\n\tinline int get(){\n\t\tint n=0;char c;while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}n=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\n\t\t}s:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\n\t\t}\n\t}\n\tvoid ywymain(){\n\t\tint n=get(),m=get();\n\t\tfor(register int i=1;i<=n;i++){\n\t\t\tsz[i]=size[i]=1;minpos[i]=i;\n\t\t}\n\t\tif(n&1){\n\t\t\tfor(register int i=1;i<=m;i++)printf(\"-1\\n\");return;\n\t\t}\n\t\tint cnt=n;int gnn=n+1;\n\t\twhile(m){\n\t\t\tm--;\n\t\t\tint s=get(),t=get(),l=get();\n\t\t\tint aa=findroot(s),ab=findroot(t);\n\t\t\tif(aa!=ab){\n\t\t\t\tif(size[aa]&1)cnt--;\n\t\t\t\tif(size[ab]&1)cnt--;\n\t\t\t\tif((size[ab]+size[aa])&1)cnt++;\n\t\t\t\tint me=gnn;gnn++;\n\t\t\t\tnode cjr;cjr.pt=me;\n\t\t\t\tcjr.l=l;que.push(cjr);\n\t\t\t\tss[me]=s;ts[me]=t;val[me]=l;\n\t\t\t\tminpos[me]=me;\n\t\t\t\tlink(me,s);link(me,t);\n\t\t\t}else{\n\t\t\t\tmakeroot(s);access(t);splay(t);\n\t\t\t\tif(val[minpos[t]]>l){\n\t\t\t\t\tint dst=minpos[t];\n\t\t\t\t\tnode cjr;cjr.pt=dst;cjr.l=val[dst];\n\t\t\t\t\tdel.push(cjr);\n\t\t\t\t\tcut(ss[dst],dst);cut(ts[dst],dst);\n\t\t\t\t\tint me=gnn;gnn++;\n\t\t\t\t\tss[me]=s;ts[me]=t;val[me]=l;\n\t\t\t\t\tminpos[me]=me;\n\t\t\t\t\tlink(me,s);link(me,t);\n\t\t\t\t\tcjr.pt=me;cjr.l=l;\n\t\t\t\t\tque.push(cjr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cnt){\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t}else{\n\t\t\t\twhile(1){\n\t\t\t\t\twhile(!que.empty()&&!del.empty()&&que.top()==del.top())que.pop(),del.pop();\n\t\t\t\t\tint pt=que.top().pt;\n\t\t\t\t\tmakeroot(pt);access(ss[pt]);splay(ss[pt]);\n\t\t\t\t\tif(sz[ss[pt]]&1)break;\n\t\t\t\t\tcut(ss[pt],pt);cut(ts[pt],pt);\n\t\t\t\t\tque.pop();\n\t\t\t\t}\n\t\t\t\tprint(que.top().l);\n\t\t\t\tputchar('\\n');\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tywy::ywymain();return(0);\n}\n```",
        "postTime": 1551620481,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF603E \u3010Pastoral Oddities\u3011"
    },
    {
        "content": "### CF 603E\n#### Solution\n\u9996\u5148\uff0c\u5b58\u5728\u4e00\u4e2a\u8fb9\u96c6\u4f7f\u5f97\u6240\u6709\u70b9\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u5145\u8981\u6761\u4ef6\u662f\u6bcf\u4e2a\u8fde\u901a\u5757\u90fd\u6709\u5076\u6570\u4e2a\u70b9\u3002\n\n\u5fc5\u8981\u6027\uff0c\u56e0\u4e3a\u4e00\u6761\u8fb9\u63d0\u4f9b\u7684\u5ea6\u4e3a$2$\uff0c\u6240\u4ee5\u4e00\u4e2a\u8fde\u901a\u5757\u603b\u5ea6\u6570\u5fc5\u7136\u4e3a\u5076\u6570\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\u51fa\u73b0\u70b9\u6570\u4e3a\u5947\u6570\u4e14\u5ea6\u6570\u5168\u4e3a\u5947\u6570\u7684\u60c5\u51b5\u3002\n\n\u5145\u5206\u6027\uff0c\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u4efb\u53d6\u4e00\u68f5\u751f\u6210\u6811\uff0c\u81ea\u5e95\u5f80\u4e0a\u8003\u8651\u6bcf\u4e2a\u70b9\u662f\u5426\u4fdd\u7559\u5230\u5b83\u7236\u4eb2\u7684\u8fb9\uff0c\u8fd9\u6837\u9664\u4e86\u6839\u4e4b\u5916\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u90fd\u5fc5\u7136\u4e3a\u5947\u6570\uff0c\u800c\u7531\u4e8e\u603b\u5ea6\u6570\u4e3a\u5947\u6570\uff0c\u6240\u4ee5\u6839\u7684\u5ea6\u6570\u663e\u7136\u4e5f\u4e3a\u5947\u6570\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u52a0\u5165\u4e86\u4e00\u6761\u5c0f\u4e8e\u7b54\u6848\u7684\u8fb9\uff0c\u90a3\u4e48\u65e0\u8bba\u5982\u4f55\u7b54\u6848\u90fd\u4e0d\u4f1a\u53d8\u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e00\u4e2a\u7c7b\u4f3c kruskal \u7684\u65b9\u6cd5\uff0c\u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\u76f4\u5230\u4e0d\u5b58\u5728\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u8fde\u901a\u5757\u4e3a\u6b62\uff0c\u6b64\u65f6\u7684\u6700\u540e\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u5c31\u662f\u7b54\u6848\u4e86\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u800c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u8981\u8ba1\u7b97\u7b54\u6848\uff0c\u53ef\u4ee5\u8003\u8651\u6574\u4f53\u4e8c\u5206\uff0c\u5c06\u6743\u503c\u79bb\u6563\u5316\u4e4b\u540e\uff0c\u8bbe$solve(l,r,x,y)$\u8868\u793a\u8003\u8651$[l,r]$\u4e4b\u95f4\u7684\u8fb9\u4e14\u7b54\u6848\u4e3a$[x,y]$\u7684\u60c5\u51b5\uff0c\u9996\u5148\u5c06$[l,mid]$\u4e4b\u95f4\u6240\u6709\u6743\u503c\u5c0f\u4e8e$x$\u7684\u8fb9\u52a0\u5165\uff0c\u7136\u540e\u518d\u5c06\u6743\u503c\u5728$[x,y]$\u4e4b\u95f4\u4e14\u7f16\u53f7\u5c0f\u4e8e$mid$\u7684\u8fb9\u52a0\u5165\u76f4\u5230\u4e0d\u5b58\u5728\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\uff0c\u6b64\u65f6\u7684\u8fb9\u6743\u5c31\u662f$mid$\u7684\u7b54\u6848\u4e86\u3002\n\n+ \u5982\u679c\u4e00\u76f4\u5b58\u5728\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\uff0c\u90a3\u4e48\u8bf4\u660e\u7f16\u53f7\u5728$[l,mid]$\u4e2d\u7684\u8fb9\u7b54\u6848\u90fd\u4e3a$-1$\uff0c\u7136\u540e\u9012\u5f52\u5904\u7406$solve(mid+1,r,x,y)$\u5373\u53ef\u3002\n\n+ \u5982\u679c\u627e\u5230\u4e86$mid$\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u8003\u8651\u9012\u5f52\u5206\u6cbb\u3002\u5f80\u53f3\u9012\u5f52\u9012\u5f52$solve(mid+1,r,x,ans[mid])$\u65f6\u9700\u8981\u5c06$[l,mid]$\u4e2d\u5c0f\u4e8e$x$\u7684\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\uff0c\u5f80\u5de6\u9012\u5f52$solve(l,mid-1,ans[mid],y)$\u65f6\u9700\u8981\u5c06$[x,ansmid\u22121]$\u4e2d\u5c0f\u4e8e$l$\u7684\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\u3002\n\n\u7531\u4e8e\u8981\u652f\u6301\u64a4\u9500\u64cd\u4f5c\uff0c\u4f7f\u7528\u6309\u79e9\u5408\u5e76\u7684\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u5373\u53ef\u3002\n\n\u7531\u4e8e\u6bcf\u6761\u8fb9\u6700\u591a\u88ab\u52a0\u5165$\\mathcal O(\\log m)$\u6b21\uff0c\u6bcf\u6b21\u52a0\u5165\u7684\u590d\u6742\u5ea6\u4e3a$\\mathcal O(\\log n)$\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e3a$\\mathcal O(m\\log m\\log n)$\n\n#### Code\n```cpp\nint n,m;\nint ans[MAXN];\n\nstruct Edges{\n    int u,v,w,id;\n} p[MAXN],q[MAXN];\n\nstruct DSU{\n    int num,top;\n    int fa[MAXN],size[MAXN];\n    pii stk[MAXN];\n\n    void init(int n) {num = n; for(int i = 1;i <= n;i++) fa[i] = i, size[i] = 1;}\n    int find(int x) {return x == fa[x] ? x : find(fa[x]);}\n\n    void merge(int x,int y){\n        x = find(x); y = find(y);\n        if(x == y) return;\n        if(size[x] < size[y]) swap(x,y);\n        num -= (size[x] & 1) + (size[y] & 1);\n        fa[y] = x; size[x] += size[y]; num += (size[x] & 1);\n        stk[++top] = make_pair(x,y);\n    }\n\n    void undo(){\n        int x = stk[top].first, y = stk[top].second; top -= 1;\n        num -= (size[x] & 1); size[x] -= size[y];\n        fa[y] = y; num += (size[x] & 1) + (size[y] & 1); \n    }\n} dsu;\n\nvoid solve(int l,int r,int x,int y){\n    if(l > r) return;\n    int mid = (l + r) >> 1, lst = dsu.top, ansmid = -1;\n    for(int i = l;i <= mid;i++)\n        if(q[i].id < x) dsu.merge(q[i].u,q[i].v);\n    for(int i = x;i <= y;i++){\n        if(p[i].id <= mid) dsu.merge(p[i].u,p[i].v);\n        if(dsu.num == 0) {ansmid = i; break;}\n    }\n    while(dsu.top > lst) dsu.undo();\n    if(ansmid == -1){\n        for(int i = l;i <= mid;i++) ans[i] = -1;\n        for(int i = l;i <= mid;i++)\n            if(q[i].id < x) dsu.merge(q[i].u,q[i].v);\n        solve(mid + 1,r,x,y); \n        while(dsu.top > lst) dsu.undo(); return; \n    }\n    ans[mid] = p[ansmid].w;\n    for(int i = l;i <= mid;i++)\n        if(q[i].id < x) dsu.merge(q[i].u,q[i].v);\n    solve(mid + 1,r,x,ansmid); while(dsu.top > lst) dsu.undo();\n    for(int i = x;i <= ansmid;i++)\n        if(p[i].id < l) dsu.merge(p[i].u,p[i].v);\n    solve(l,mid - 1,ansmid,y); while(dsu.top > lst) dsu.undo();\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m); dsu.init(n);\n    for(int i = 1;i <= m;i++){\n        scanf(\"%d%d%d\",&q[i].u,&q[i].v,&q[i].w);\n        p[i] = q[i]; p[i].id = i;\n    }\n    sort(p + 1,p + 1 + m,[&](const Edges &x,const Edges &y) {return x.w < y.w;});\n    for(int i = 1;i <= m;i++) q[p[i].id].id = i;\n    solve(1,m,1,m);\n    for(int i = 1;i <= m;i++) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1611629116,
        "uid": 108894,
        "name": "\u5173\u6000\u4ed6\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF603E \u3010Pastoral Oddities\u3011"
    }
]