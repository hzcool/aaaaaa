[
    {
        "content": "~~\u4e4d\u4e00\u770b\uff0c\u4ec0\u4e48\u7834\u9898\u76ee\uff0c\u6839\u672c\u4e0d\u53ef\u505a\uff01~~\n\n\u5b9e\u9645\u4e0a\uff0c\u662f**\u7f51\u7edc\u6d41**\uff0c\u5efa\u56fe\u6bd4\u8f83\u6bd2\u7624\uff0c\u5efa\u8bae\u7d2b\u9898\u6216\u4ee5\u4e0a\uff0c\u6807\u7b7e\u6700\u5927\u6d41\u3002\n\n\uff08\u6570\u7ec4\u542b\u4e49\u4ee5\u82f1\u6587\u9898\u9762\u4e3a\u51c6\uff09\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u6dfb\u52a0\u4e24\u7ec4\u65b0\u7684\u9650\u5236\uff1a\n$upTo_0=0,quantity_0=0$\u4ee5\u53ca$upTo_{q+1}=b,quantity_{q+1}=n$\n\n\u4e4b\u540e\uff0c\u5c06$q$\u6539\u53d8\u4e3a$q+1$\uff08\u56e0\u4e3a\u6dfb\u52a0\u4e86\u539f\u6765\u7684\u7b2c$q+1$\u7ec4\u9650\u5236\uff09\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u96c6\u5408\u5206\u6210$q$\u6bb5\u3002\u5bf9$\\forall i \\in [1,q]$\uff0c\u7b2c$i$\u6bb5\u4e2d\u6709$(quantity_i-quantity_{i-1})$\u4e2a\u503c\u57df\u5728$(upTo_{i-1},upTo_i]$\u7684\u6570\u3002\n\n\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u5efa\u56fe\u4e86\u3002\n\n**\u524d\u7f6e\u77e5\u8bc6\uff1a\u5728\u533a\u95f4$(i,j]$\u4e2d\uff0c\u6a21$5$\u4f59$k$\u7684\u6570\u6709$(j-k)/5-(i-k)/5$\u4e2a\uff0c\u5176\u4e2d$/$\u662f\u6574\u9664\u7b26\u53f7\u3002**\n\n\u8bbe$id_i$\u4e3a\u8868\u793a\u6a215\u4f59$i$\u7684\u8282\u70b9\u7684**\u865a\u62df\u8282\u70b9**\u3002\n\n\u5219\u4ece\u6e90\u70b9$S$\uff0c\u6211\u4eec\u5411\u6bcf\u4e2a$i$\u8fde$quantity_i$\u5355\u4f4d\u6d41\u91cf\uff1b\n\n\u518d\u4ece\u6bcf\u4e2a$i$\uff0c\u5411\u6bcf\u4e2a$id_j$\uff0c\u8fde **$(upTo_{i-1},upTo_i]$\u4e2d\u6a21$5$\u4f59$j$\u7684\u6570\u7684\u6570\u91cf** \u7684\u6d41\u91cf\n\n\u6700\u540e\u4ece\u6bcf\u4e2a$id_i$\u5411\u6c47\u70b9$T$\u8fde$n/5$\u7684\u6d41\u91cf\n\n\u4e4b\u540e\u8dd1\u6700\u5927\u6d41\u5373\u53ef\u3002\u5982\u679c\u6700\u5927\u6d41\u4e0d\u662f$n$\uff0c\u5219\u4e0d\u5408\u6cd5\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\npair<int,int>p[10100];\nint n,lim,m,head[20100],cur[20100],dep[20100],cnt,id[5],S,T,res;\nstruct node{\n\tint to,next,val;\n}edge[200100];\nvoid ae(int u,int v,int w){\n\tedge[cnt].next=head[u],edge[cnt].to=v,edge[cnt].val=w,head[u]=cnt++;\n\tedge[cnt].next=head[v],edge[cnt].to=u,edge[cnt].val=0,head[v]=cnt++;\n}\nint calc(int L,int R,int mod){//Calculate the number of (%5=mod)'s nums in range (i,j] \n\tR=R-mod+5,L=L-mod+5;\n\treturn R/5-L/5;\n}\nbool reach;\nqueue<int>q;\nbool bfs(){\n\tmemset(dep,0,sizeof(dep)),dep[S]=1,q.push(S);\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=cur[x]=head[x];i!=-1;i=edge[i].next)if(edge[i].val&&!dep[edge[i].to])dep[edge[i].to]=dep[x]+1,q.push(edge[i].to);\n\t}\n\treturn dep[T]>0;\n}\nint dfs(int x,int flow){\n\tif(x==T){reach=true;res+=flow;return flow;}\n\tint used=0;\n\tfor(int &i=cur[x];i!=-1;i=edge[i].next){\n\t\tif(!edge[i].val||dep[edge[i].to]!=dep[x]+1)continue;\n\t\tint ff=dfs(edge[i].to,min(flow-used,edge[i].val));\n\t\tif(ff){\n\t\t\tedge[i].val-=ff;\n\t\t\tedge[i^1].val+=ff;\n\t\t\tused+=ff;\n\t\t\tif(used==flow)break;\n\t\t}\n\t}\n\treturn used;\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&lim,&m),memset(head,-1,sizeof(head));\n\tS=n+6,T=n+7;\n\tfor(int i=0;i<5;i++)id[i]=n+i+1,ae(id[i],T,n/5);\n\tfor(int i=1;i<=m;i++)scanf(\"%d%d\",&p[i].first,&p[i].second);\n\tsort(p+1,p+m+1),m++,p[m]=make_pair(lim,n);\n\tfor(int i=1;i<=m;i++)if(p[i].first-p[i-1].first<p[i].second-p[i-1].second||p[i].second<p[i-1].second){puts(\"unfair\");return 0;}//if there are more numbers than the range, or in a larger range there's a smaller total,it is definitelt invalid. \n\tfor(int i=1;i<=m;i++)ae(S,i,p[i].second-p[i-1].second);\n\tfor(int i=1;i<=m;i++)for(int j=0;j<5;j++)ae(i,id[j],calc(p[i-1].first,p[i].first,j));\n\twhile(bfs()){\n\t\treach=true;\n\t\twhile(reach)reach=false,dfs(S,0x3f3f3f3f);\n\t}\n//\tprintf(\"%d\\n\",res);\n\tputs(res==n?\"fair\":\"unfair\");\n\treturn 0;\n}\n```\n\n",
        "postTime": 1576933711,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF628F \u3010Bear and Fair Set\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u6700\u5927\u6d41\u662f\u80fd\u505a\uff0c\u4f46\u63d0\u4f9b\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u505a\u6cd5\uff0c\u53ef\u4ee5\u5c06\u9898\u76ee\u96be\u5ea6\u964d\u4f4e\u5f88\u591a\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5224\u65ad\u662f\u5426\u80fd\u53d6\u51fa $n$ \u4e2a**\u53ea\u7b26\u5408\u5927\u5c0f\u9650\u5236**\u7684\u6570\u5e76\u4e0d\u80fd\u8bc1\u660e\u4e00\u5b9a\u6ee1\u8db3\uff0c\u540c\u7406\uff0c\u53ea\u662f\u5206\u522b\u5224\u65ad\u5bf9\u4e8e\u6a215\u4f590~4\u7684\u7b26\u5408\u5927\u5c0f\u9650\u5236\u7684\u6570\u80fd\u5426\u53d6\u51fa\u4e5f\u65e0\u6cd5\u8bf4\u660e\u4ec0\u4e48\u3002\n\n\u4e8e\u662f\u60f3\u5230\uff0c\u5982\u679c\u5c1d\u8bd5\u7740\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7ec4\u5408\u8fdb\u884c\u5224\u65ad\u662f\u5426\u53ef\u884c\u3002\n\n\u53ef\u4ee5\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n```\n10 20 3\n15 10\n5 0\n10 5\n```\n\u5c06\u533a\u95f4\u6392\u5e8f\uff0c\u6574\u7406\uff0c\u5f97\u5230\uff1a\n\n\u533a\u95f41\uff1a$[1,5]$\uff0c\u53ef\u4ee5\u53d6 $0$ \u4e2a\u6570\uff1b\n\n\u533a\u95f42\uff1a$[6,10]$\uff0c\u53ef\u4ee5\u53d6 $5$ \u4e2a\u6570\uff1b\n\n\u533a\u95f43\uff1a$[11,15]$\uff0c\u53ef\u4ee5\u53d6 $5$ \u4e2a\u6570\uff1b\n\n\u533a\u95f44\uff1a$[16,20]$\uff0c\u53ef\u4ee5\u53d6 $0$ \u4e2a\u6570\u3002\n\n\u5bf9\u4e8e\u4e00\u79cd\u7ec4\u5408 ```11000``` ,\u4ee3\u8868\u533a\u95f4\u53ea\u5305\u542b\u6a215\u4f590\uff0c1\u7684\u6570\u3002\n\n\u5219\u5bf9\u4e8e\u533a\u95f41\uff0c\u6709 $2$ \u4e2a\u6570\u7b26\u5408\u6761\u4ef6\uff0c\u53ea\u80fd\u53d6 $0$ \u4e2a\u6570\uff1b\n\n\u5bf9\u4e8e\u533a\u95f42\uff0c\u6709 $2$ \u4e2a\u6570\u7b26\u5408\u6761\u4ef6\uff0c\u53ef\u4ee5\u53d6 $2$ \u4e2a\u6570\uff1b\n\n\u2026\u2026\n\n\u6700\u540e\u6700\u591a\u53ef\u4ee5\u53d6 $0+2+2+0=4$ \u4e2a\u6570\uff0c\u5927\u4e8e\u7b49\u4e8e $2\\times \\frac n 5=4$\u3002\n\n\u5c06 $2^5=32$ \u79cd\u60c5\u51b5\u9010\u4e00\u5c1d\u8bd5\uff0c\u5982\u679c\u5168\u90e8\u6ee1\u8db3\uff0c\u5219\u53ef\u4ee5\u8bc1\u660e\u5b58\u5728\u8fd9\u6837\u7684\u533a\u95f4\uff0c\u5927\u6982\u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,b,q;\nvector<pair<int,int>>v;\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&b,&q);\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tv.push_back({x,y});\n\t}\n\tv.push_back({b,n});\n\tsort(v.begin(),v.end());\n\tfor(int i=0;i<v.size()-1;i++)\n\t\tif(v[i].second>v[i+1].second)\n\t\t\treturn puts(\"unfair\");\n\tfor(int k=0;k<32;k++)\n\t{\n\t\tint can=0;\n\t\tfor(int i=0;i<=q;i++)\n\t\t{\n\t\t\tint pre=i?v[i-1].first+1:1;\n\t\t\tint quan=i?v[i].second-v[i-1].second:v[i].second;\n\t\t\tint s=0;\n\t\t\tfor(int j=pre;j<=v[i].first;j++)\n\t\t\t\tif((k>>(j%5))&1)\n\t\t\t\t\ts++;\n\t\t\tcan+=min(quan,s);\n\t\t}\n\t\tif(can<n/5*__builtin_popcount(k))\n\t\t\treturn puts(\"unfair\");\n\t}\n\tputs(\"fair\");\n\treturn 0;\n}\n\n```\n",
        "postTime": 1609675811,
        "uid": 240812,
        "name": "45dino",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF628F \u3010Bear and Fair Set\u3011"
    },
    {
        "content": "\u524d\u9762\u6709\u795e\u4ed9\u8bb2\u8ff0\u4e86\u975e\u7f51\u7edc\u6d41\u7684\u795e\u4ed9\u505a\u6cd5\uff0c\u8fd9\u91cc\u8bb2\u8ff0\u4e00\u4e0b\u601d\u8003\u8fc7\u7a0b\u4e0e\u6b63\u786e\u6027\uff1f\n## \u9898\u610f\u63cf\u8ff0\n\n\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u6709 $n,5 \\mid n$ \u4e2a\u6b63\u6574\u6570\u6784\u6210\u7684\u7684\u96c6\u5408 $S$\uff0c\u6ee1\u8db3\u6709 $\\frac n 5$ \u4e2a\u6570\u9664\u4ee5 $5$ \u5206\u522b\u4f59 $0,1,2,3,4$\uff0c\u5143\u7d20\u5927\u5c0f\u5728 $[1,b]$ \u4e4b\u95f4\uff0c\u6bcf\u4e2a\u6570\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u4e14 $x,x\\in S\\cup [1,u_i]$ \u7684\u4e2a\u6570\u4e3a $t_i$\u3002\n\n## \u7b80\u8981\u5206\u6790\n\n\u9996\u5148\uff0c\u5143\u7d20\u5927\u5c0f\u5728 $[1,b]$ \u4e4b\u95f4\u53ef\u4ee5\u8f6c\u6362\u6210 $x,x\\in S\\cup [1,b]$ \u7684\u4e2a\u6570\u4e3a $n$\u3002\n\n\u6b64\u65f6\uff0c\u82e5\u5b58\u5728 $i,j$ \u6ee1\u8db3 $u_i < b_j,u_i > t_j$ \u663e\u7136\u65e0\u89e3\u3002\n\n\u4e0d\u8003\u8651\u5173\u4e8e\u6bcf\u4e2a\u533a\u95f4\u80fd\u9009\u591a\u5c11\u6570\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e $[1,b]$ \u7684\u6570\u7edf\u8ba1\u6a21 $5$ \u7b49\u4e8e $0,1,2,3,4$ \u7684\u6570\u91cf\u3002\n\n\u73b0\u5728\u52a0\u4e0a\u9650\u5236\uff0c\u7136\u540e\u5bf9\u6240\u6709\u533a\u95f4\u505a\u5dee\u5206\u3002\n\n\u8fd9\u6837\u5c31\u80fd\u5f97\u51fa\u5728 $[l,r]$ \u4e2d\u80fd\u6709\u591a\u5c11\u6570\u3002\n\n\u53d1\u73b0\u6240\u6709\u533a\u95f4\u90fd\u662f\u76f8\u90bb\u7684\u5373\u533a\u95f4\u4e0e\u533a\u95f4\u4e2d\u95f4\u4e0d\u4f1a\u5b58\u5728\u6b63\u6574\u6570\u3002\n\n\u5982\u679c\u52a0\u4e0a\u9650\u5236\u518d\u53bb\u7edf\u8ba1\u6a21 $5$ \u7b49\u4e8e $0,1,2,3,4$ \u7684\u6570\u91cf\u662f\u9519\u8bef\u7684\u3002\n\n\u53ef\u80fd\u4f1a\u5b58\u5728\u4e00\u4e2a\u533a\u95f4\uff0c\u5728\u8fd9\u4e2a\u533a\u95f4\u4e2d\u53ea\u80fd\u9009\u51fa $x$ \u4e2a\u6570\uff0c\u7136\u800c\u5728\u8fd9\u4e2a\u533a\u95f4\u4e2d\u6a21 $5$ \u7b49\u4e8e $0,1,2,3,4$ \u7684\u6570\u90fd\u6709 $x - 1$ \u4e2a\u3002\n\n\u6b64\u65f6\u7edf\u8ba1\u6a21 $5$ \u7b49\u4e8e $1$ \u7684\u65f6\u5019\uff0c\u53d6\u51fa\u4e86\u8fd9\u4e2a\u533a\u95f4\u5185\u7684 $x - 1$ \u4e2a\u6570\uff0c\u7136\u540e\u52a0\u4e0a\u5176\u4ed6\u533a\u95f4\u7684\u6a21 $5$ \u4e3a $1$ \u7684\u6570\u5408\u6cd5\u4e86\uff0c\u518d\u7edf\u8ba1\u6a21 $5$ \u4e3a $2$ \u7684\u65f6\u5019\u4ecd\u53d6\u51fa\u4e86\u8fd9\u4e2a\u533a\u95f4\u5185\u7684 $x-1$ \u4e2a\u6570\uff0c\u7136\u540e\u52a0\u4e0a\u5176\u4ed6\u533a\u95f4\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\uff0c\u518d\u6b21\u5408\u6cd5\u3002\n\n\u95ee\u9898\u51fa\u5728\u6ca1\u6709\u8003\u8651\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u6211\u4eec\u7edf\u8ba1\u6a21 $5$ \u4e3a $0 \\cup1,1\\cup2,\\dots ,3 \\cup4,0\\cup1\\cup2,\\dots$\uff0c\u7b49\u7b49\u4e00\u5171 $32$ \u79cd\u60c5\u51b5\u5c31\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u60c5\u51b5\uff08\u7c7b\u6bd4\u5bb9\u65a5\uff09\u3002\n\n\u82e5 $32$ \u79cd\u60c5\u51b5\u4e2d\u6709\u4e00\u6b21\u4e0d\u5408\u6cd5\u90a3\u4e48\u5373\u4e3a `unfair`\uff0c\u5168\u90e8\u5408\u6cd5\u5373\u4e3a `fair`\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(q \\log q + b)$\u3002\n\n\u5173\u4e8e\u4ee3\u7801\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002",
        "postTime": 1679539326,
        "uid": 378222,
        "name": "fakestd",
        "ccfLevel": 0,
        "title": "F. Bear and Fair Set \u9898\u89e3"
    },
    {
        "content": "\u611f\u89c9\u8fd9\u9898\u7528\u4e0d\u7740\u9ad8\u6df1\u7684\u7f51\u7edc\u6d41\u5efa\u6a21\u6280\u5de7\uff0c\u76f4\u63a5\u4e8c\u5206\u56fe\u5339\u914d\u4e0d\u597d\u5417\u3002\n\n\u8003\u8651 $b$ \u4e2d\u6bcf\u4e2a\u6570\u5bf9\u6bcf\u4e2a\u4f59\u6570\u5339\u914d\uff0c $i\\to i\\%5$ \uff0c\u6d41\u91cf\u4e3a $1$ \u3002\n\n\u7136\u540e\u8003\u8651\u5bf9\u96c6\u5408\u7684\u9650\u5236\uff0c\u5dee\u5206\u5b8c\u4e4b\u540e\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u533a\u95f4\u6070\u597d\u6709\u51e0\u4e2a\u6570\uff0c\u8bbe\u5f53\u524d\u533a\u95f4\u4e3a $[l,r]$ \u5efa\u4e00\u4e2a\u865a\u70b9 $x$ \uff0c $S\\to x$ \uff0c\u6d41\u91cf\u4e3a\u533a\u95f4\u6070\u597d\u7684\u6570\u7684\u4e2a\u6570\uff0c $x\\to i(l\\le i\\le r)$ ,\u6d41\u91cf\u4e3a $1$ \u3002\n\n\u6700\u540e\u6a21\u6570\u5411 $T$ \u8fde\u6d41\u91cf\u4e3a $\\frac{n}{5}$ \u7684\u8fb9\u3002\n\n\u6211\u4eec\u8fd8\u9700\u8981\u6ee1\u8db3\u96c6\u5408\u9650\u5236\u4e2d\u7684\u6070\u597d\uff0c\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u6761\u8fb9\u6d41\u91cf\u7684\u4e0a\u4e0b\u754c\uff0c\u76f4\u63a5\u8dd1\u6709\u6e90\u6709\u6c47\u4e0a\u4e0b\u754c\u53ef\u884c\u6d41\u5c31\u884c\u4e86\u3002\n\n\u8dd1\u7684\u5f88\u5febQAQ\n\n**Code**\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nconst int N = 1e4;\nconst int inf = 1e9;\nusing namespace std;\nstruct qry\n{\n    int u,t;\n}a[N + 5];\nint n,b,q,idc,id1[N + 5],S,T,id2[10],t[N + 5],fl[N * 10 + 5];\nnamespace F\n{\n    const int N = 1e6;\n    const long long inf = 2e18;\n    struct edges\n    {\n        int to;\n        long long cost;\n    }edge[N * 2 + 5];\n    int nxt[N * 2 + 5],head[N + 5],edge_cnt = 1,dis[N + 5],q[N + 5],cur[N + 5],S,T;\n    void add_edge(int u,int v,long long w)\n    {\n        edge[++edge_cnt] = (edges){v,w};\n        nxt[edge_cnt] = head[u];\n        head[u] = edge_cnt;\n    }\n    void add(int u,int v,long long w)\n    {\n        add_edge(u,v,w);\n        add_edge(v,u,0);\n    }\n    int bfs()\n    {\n        for (int i = 1;i <= idc;i++)\n            cur[i] = head[i],dis[i] = 0;\n        int l = 1,r = 0;\n        dis[S] = 1;\n        q[++r] = S;\n        while (l <= r)\n        {\n            int u = q[l++];\n            for (int i = head[u];i;i = nxt[i])\n            {\n                int v = edge[i].to,w = edge[i].cost;\n                if (w && !dis[v])\n                {\n                    dis[v] = dis[u] + 1;\n                    q[++r] = v;\n                }\n            }\n        }\n        return dis[T];\n    }\n    long long dfs(int u,long long flow)\n    {\n        if (u == T)\n            return flow;\n        long long sm = 0;\n        for (int &i = cur[u];i;i = nxt[i])\n        {\n            int v = edge[i].to;\n            long long w = edge[i].cost;\n            if (dis[v] == dis[u] + 1 && w)\n            {\n                long long res = dfs(v,min(w,flow));\n                edge[i].cost -= res;\n                edge[i ^ 1].cost += res;\n                sm += res;\n                flow -= res;\n                if (!flow)\n                    break;\n            }\n        }\n        return sm;\n    }\n    long long dinic(int s,int t)\n    {\n        S = s;T = t;\n        long long ans = 0;\n        while (bfs())\n            ans += dfs(S,inf);\n        return ans;\n    }\n    void clear()\n    {\n        edge_cnt = 1;\n        for (int i = 1;i <= idc;i++)\n            head[i] = 0;\n        idc = 0;\n    }\n    bool check(int S,int T)\n    {\n        for (int i = head[S];i;i = nxt[i])\n            if (edge[i].cost)\n                return 0;\n        for (int i = head[T];i;i = nxt[i])\n            if (edge[i ^ 1].cost)\n                return 0;\n        return 1;\n    }\n}\nbool cmp(qry a,qry b)\n{\n    return a.u < b.u;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&b,&q);\n    for (int i = 1;i <= q;i++)\n        scanf(\"%d%d\",&a[i].u,&a[i].t);\n    S = ++idc;T = ++idc;\n    for (int i = 1;i <= b;i++)\n        id1[i] = ++idc;\n    for (int i = 0;i <= 4;i++)\n        id2[i] = ++idc;\n    for (int i = 1;i <= b;i++)\n        F::add(id1[i],id2[i % 5],1);\n    sort(a + 1,a + q + 1,cmp);\n    for (int i = 1;i <= q;i++)\n    {\n        if (!t[a[i].u])\n            t[a[i].u] = a[i].t;\n        else\n        {\n            if (t[a[i].u] != a[i].t)\n            {\n                cout<<\"unfair\"<<endl;\n                return 0;\n            }\n        }\n        if (a[i].u != a[i - 1].u)\n        {\n            int x = a[i].t - a[i - 1].t;\n            if (x < 0)\n            {\n                cout<<\"unfair\"<<endl;\n                return 0;\n            }\n            int nw = ++idc;\n            F::add(S,nw,0);\n            fl[S] -= x;\n            fl[nw] += x;\n            for (int j = a[i - 1].u + 1;j <= a[i].u;j++)\n                F::add(nw,id1[j],1);\n        }\n    }\n    for (int i = a[q].u + 1;i <= b;i++)\n        F::add(S,id1[i],1);\n    for (int i = 0;i <= 4;i++)\n    {\n        F::add(id2[i],T,0);\n        fl[id2[i]] -= n / 5;\n    }\n    F::add(T,S,inf);\n    fl[T] = n;\n    int ss = ++idc,tt = ++idc;\n    for (int i = 1;i <= idc;i++)\n        if (fl[i] < 0)\n            F::add(i,tt,-fl[i]);\n        else\n            if (fl[i] > 0)\n                F::add(ss,i,fl[i]);\n    int x = F::dinic(ss,tt);\n    if (F::check(ss,tt))\n        cout<<\"fair\"<<endl;\n    else\n        cout<<\"unfair\"<<endl;\n    return 0;\n}\n```",
        "postTime": 1616204221,
        "uid": 73231,
        "name": "eee_hoho",
        "ccfLevel": 7,
        "title": "CF628F Bear and Fair Set"
    }
]