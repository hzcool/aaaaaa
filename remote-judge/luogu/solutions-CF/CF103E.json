[
    {
        "content": "\u5b89\u5229 : [\u4e5d\u6708\u6742\u9898\u9009\u505a-\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.com.cn/blog/s-r-f/jiu-yue-za-ti-xuan-zuo) [\u4e5d\u6708\u6742\u9898\u9009\u505a-cnblogs](https://www.cnblogs.com/s-r-f/p/13602350.html)\n\n---\n\n\u53cc\u500d\u7ecf\u9a8c : [LOJ#6045. \u300c\u96c5\u793c\u96c6\u8bad 2017 Day8\u300d\u4ef7](https://loj.ac/problem/6045)\n\n\u9996\u5148\u628a\u4ef7\u503c\u53d6\u53cd\uff0c\u7136\u540e\u95ee\u9898\u8f6c\u6362\u4e3a\u6c42\u6700\u5927\u6743\u503c\u3002\n\n\u8003\u8651\u4e00\u4e2a\u6700\u5c0f\u5272\u6a21\u578b:\n\nS\u8fde\u5411\u96c6\u5408\uff0c\u5bb9\u91cfINF+\u6743\u503c\uff0c\u5272\u6389\u8fd9\u6761\u8fb9\u76f8\u5f53\u4e8e\u4e0d\u9009\u8fd9\u4e2a\u96c6\u5408\uff1b\n\n\u96c6\u5408\u8fde\u5411\u96c6\u5408\u5185\u7684\u6570\u5b57\uff0c\u5bb9\u91cfINF\uff1b\n\n\u6570\u5b57\u8fde\u5411T\uff0c\u5bb9\u91cfINF\uff0c\u5272\u6389\u8fd9\u6761\u8fb9\u76f8\u5f53\u4e8e\u9009\u8fd9\u4e2a\u6570\u5b57\uff1b\n\n\u4e0d\u96be\u53d1\u73b0\u5728\u6700\u5c0f\u5272\u65b9\u6848\u4e2d\uff0c\u5272\u6389\u96c6\u5408\u8fde\u5411\u96c6\u5408\u5185\u7684\u6570\u5b57\u7684\u8fb9\u662f\u4e0d\u4f18\u7684\u3002\n\n\u56e0\u4e3a\u6709\u5b8c\u7f8e\u5339\u914d\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4efb\u610f\u5de6\u90e8\u70b9\u96c6\u5408 $S$ , $|N(S)| \\geq |S|,$ \u56e0\u6b64\u81f3\u5c11\u4f1a\u5272\u6389$n$\u6761\u8fb9\u3002\n\n\u53c8\u56e0\u4e3a\u8fb9\u6743\u52a0\u4e0a\u4e86 $INF$ ,\u6240\u4ee5\u4e0d\u4f1a\u5272\u6389 $>n$ \u6761\u8fb9\u3002\n\n\u56e0\u6b64\u4e0d\u9009\u7684\u96c6\u5408\u7684\u4e2a\u6570 + \u9009\u7684\u6570\u5b57\u4e2a\u6570 = n\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u9009\u7684\u96c6\u5408\u4e2a\u6570 = \u9009\u7684\u6570\u5b57\u7684\u4e2a\u6570\u3002\n\n\u7136\u540e\u8dd1\u4e00\u4e2a\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n$O(Dinic(n,n^2))$\n\n\u4ee3\u7801\u89c1 : [my solution](https://www.cnblogs.com/s-r-f/p/13662769.html)",
        "postTime": 1599998652,
        "uid": 52518,
        "name": "s_r_f",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF103E \u3010Buying Sets\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u66f4\u4e3a\u5de7\u5999\u7684\u505a\u6cd5\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u4e8c\u5206\u56fe\u5339\u914d\u3002  \n### \u9898\u610f\n\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a $n$ \u7684\u5168\u96c6\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u6570\uff0c\u6709 $n$ \u4e2a\u5b50\u96c6\u3002\u9898\u76ee**\u4fdd\u8bc1\u4efb\u610f $k$ \u4e2a\u5b50\u96c6\u7684\u5e76\u7684\u5927\u5c0f $ \\ge k $**\u3002  \n\u6bcf\u4e2a\u5b50\u96c6\u6709\u4e00\u4e2a\u53ef\u6b63\u53ef\u8d1f\u7684\u6743\u503c\uff0c\u4f60\u9700\u8981\u9009\u51fa\u4e00\u4e9b\u5b50\u96c6\u4f7f\u5f97\u8fd9\u4e9b\u5b50\u96c6\u5e76\u7684\u5927\u5c0f\u7b49\u4e8e\u5b50\u96c6\u4e2a\u6570\uff0c\u4e14\u6240\u9009\u5b50\u96c6\u7684\u6743\u503c\u548c\u6700\u5c0f\uff0c\u53ef\u4ee5\u4e3a\u7a7a\u96c6\u3002\n\n### \u9898\u89e3\n\u628a\u5b50\u96c6\u548c\u5143\u7d20\u5206\u522b\u770b\u6210\u4e24\u7c7b\u7269\u54c1\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u4e2a\u5b50\u96c6\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u9009\u62e9\u6240\u6709\u5c5e\u4e8e\u5b83\u7684\u5143\u7d20\u3002\u8fd9\u542f\u53d1\u6211\u4eec\u5f80\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u65b9\u5411\u8f6c\u5316\u3002  \n\u6211\u4eec\u5148\u5ffd\u7565\u201c\u5b50\u96c6\u5e76\u7684\u5927\u5c0f\u7b49\u4e8e\u5b50\u96c6\u4e2a\u6570\u201d\u8fd9\u4e2a\u6761\u4ef6\uff0c\u5c31\u662f\u6700\u5c0f\u6743\u95ed\u5408\u5b50\u56fe\u7684\u7ecf\u5178\u6a21\u578b\uff0c\u628a\u6bcf\u4e2a\u5b50\u96c6\u7684\u6743\u503c\u53d6\u53cd\u5c31\u53ef\u4ee5\u505a\u4e86\u3002\n\n\u90a3\u4e48\uff0c\u5982\u4f55\u89e3\u51b3\u8fd9\u4e00\u9650\u5236\u5462\uff1f  \n\u201c\u4efb\u610f $k$ \u4e2a\u5b50\u96c6\u7684\u5e76\u7684\u5927\u5c0f $ \\ge k $\u201d\u662f\u4e00\u4e2a\u5f88\u5f3a\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ece\u8fd9\u91cc\u5165\u624b\u3002  \n\u6211\u4eec\u7ed9\u6bcf\u4e2a\u5143\u7d20\u8d4b\u4e0a$-\\infty$\u7684\u6743\u503c\uff0c\u7ed9\u6bcf\u4e2a\u5b50\u96c6\u8d4b\u4e0a$+\\infty$\u7684\u6743\u503c\uff0c\u7531\u4e0a\u8ff0\u6761\u4ef6\uff0c\u4efb\u610f\u65b9\u6848\u9009\u62e9\u7684\u5b50\u96c6\u6570\u91cf\u90fd$\\le$\u5143\u7d20\u6570\u91cf\u3002\u6240\u4ee5\u6240\u9009\u62e9\u7684$-\\infty$\u7684\u6570\u91cf\u90fd$\\le$\u9009\u62e9\u7684$+\\infty$\u7684\u6570\u91cf\u3002\u5f53\u4e14\u4ec5\u5f53\u65b9\u6848\u6ee1\u8db3\u9650\u5236\u65f6\uff0c\u6240\u6709\u8d4b\u4e0a\u7684\u6743\u503c\u4f1a\u76f8\u4e92\u62b5\u6d88\u3002\u800c\u6700\u5927\u6d41\u603b\u662f\u4f1a\u5bfb\u627e\u6700\u4f18\u7684\u65b9\u6848\uff0c\u6240\u4ee5\u5728\u6709\u89e3\u7684\u60c5\u51b5\u4e0b\uff0c\u6c42\u51fa\u7684\u7b54\u6848\u4e00\u5b9a\u5408\u6cd5\uff0c\u4e14\u6240\u6709\u9644\u52a0\u6743\u503c\u90fd\u5df2\u6d88\u53bb\u3002  \n\u800c\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u7a7a\u96c6\uff0c\u6240\u4ee5\u4e00\u5b9a\u5b58\u5728\u5408\u6cd5\u7684\u65b9\u6848\u3002\n\n\u5b9e\u73b0\u4e2d\u6709\u4e24\u4e2a\u7ec6\u8282\u8981\u6ce8\u610f\uff1a  \n1. \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u5efa\u6a21\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5fc5\u987b\u540c\u65f6\u9009\u62e9\u7684\u7269\u54c1\u95f4\u6d41\u91cf\u4e3a$+\\infty$\u7684\u8fb9\u7684\u6743\u503c\u5fc5\u987b\u5927\u4e8e\u8d4b\u4e0a\u7684\u6743\u503c\u3002\u5728\u4ee3\u7801\u4e2d\uff0c\u6211\u7528```lim```\u8868\u793a\u8d4b\u4e0a\u7684\u65e0\u7a77\u5927\u6743\u503c\uff0c\u7528```inf```\u8868\u793a\u5efa\u56fe\u8fc7\u7a0b\u4e2d\u7684\u65e0\u7a77\u5927\u6743\u503c\u3002\n2. \u7531\u4e8e\u53ef\u4ee5\u9009\u62e9\u7a7a\u96c6\uff0c\u8f93\u51fa\u65f6\u7b54\u6848\u8981\u548c$0$\u53d6\u4e2a$\\min$\u3002\n\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define reg register\nusing namespace std;\ntypedef long long ll;\nconst int lim=3e8+5;\nconst int inf=0x3f3f3f3f;\nconst int V=605;\nconst int E=181205;\nint to[E],nxt[E],c[E],h[V],cnt;\ninline void ins(int s,int t,int w){\n\tto[cnt]=t;nxt[cnt]=h[s];c[cnt]=w;h[s]=cnt++;\n\tto[cnt]=s;nxt[cnt]=h[t];c[cnt]=0;h[t]=cnt++;\n}\nint S,T,level[V],iter[V],que[V];\nbool bfs(){\n\tmemset(level,-1,sizeof(level));\n\treg int he=0,ta=1;que[0]=S;level[S]=1;\n\twhile(he<ta){\n\t\treg int v=que[he++];\n\t\tfor(reg int i=h[v];~i;i=nxt[i]){\n\t\t\tif(c[i]&&level[to[i]]<0){\n\t\t\t\tlevel[to[i]]=level[v]+1;\n\t\t\t\tque[ta++]=to[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn level[T]>0;\n}\nint dfs(int st,int f){\n\tif(st==T)return f;\n\treg int used=0,w;\n\tfor(reg int& i=iter[st];~i;i=nxt[i])\n\t\tif(c[i]&&level[to[i]]==level[st]+1){\n\t\t\tw=dfs(to[i],min(c[i],f-used));\n\t\t\tif(!w)continue;\n\t\t\tc[i]-=w;c[i^1]+=w;used+=w;\n\t\t\tif(f==used)return f;\n\t\t}\n\treturn used;\n}\nint n;\nint main(){\n\tmemset(h,-1,sizeof(h));\n\tscanf(\"%d\",&n);T=n+n+1;\n\tfor(reg int i=1,k,x;i<=n;i++){\n\t\tscanf(\"%d\",&k);\n\t\twhile(k--)scanf(\"%d\",&x),ins(i,x+n,inf);\n\t}\n\treg ll Ans=0,f;\n\tfor(reg int i=1,x;i<=n;i++)\n\t\tscanf(\"%d\",&x),ins(S,i,lim-x),Ans+=lim-x;\n\tfor(reg int i=1;i<=n;i++)ins(i+n,T,lim);\n\twhile(bfs()){\n\t\tmemcpy(iter,h,sizeof(h));\n\t\twhile(f=dfs(S,inf))Ans-=f;\n\t}\n\tprintf(\"%lld\\n\",min(-Ans,0ll));\n\treturn 0;\n}\n```",
        "postTime": 1584881019,
        "uid": 17930,
        "name": "Marser",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF103E \u3010Buying Sets\u3011"
    },
    {
        "content": "## $\\text{Description}$\n\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a $n$ \u7684\u5168\u96c6\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u6570\uff0c\u6709 $n$ \u4e2a\u5b50\u96c6\u3002\u9898\u76ee\u4fdd\u8bc1\u4efb\u610f $k$ \u4e2a\u5b50\u96c6\u7684\u5e76\u7684\u5927\u5c0f $\\geqslant k$ \u3002\n\n\u6bcf\u4e2a\u5b50\u96c6\u6709\u4e00\u4e2a\u53ef\u6b63\u53ef\u8d1f\u7684\u6743\u503c\uff0c\u4f60\u9700\u8981\u9009\u51fa\u4e00\u4e9b\u5b50\u96c6\u4f7f\u5f97\u8fd9\u4e9b\u5b50\u96c6\u5e76\u7684\u5927\u5c0f\u7b49\u4e8e\u5b50\u96c6\u4e2a\u6570\uff0c\u4e14\u6240\u9009\u5b50\u96c6\u7684\u6743\u503c\u548c\u6700\u5c0f\u3002\u53ef\u4ee5\u4e3a\u7a7a\u96c6\u3002  \n$n\\le 300$\n## $\\text{Solution}$\n\u4e00\u9053\u7f51\u7edc\u6d41\u6bd4\u8f83\u795e\u7684\u9898\u3002  \n\u9996\u5148\u53ef\u4ee5\u8865\u96c6\u8f6c\u5316\uff0c\u9009\u7684\u6743\u503c\u6700\u5c0f\uff0c\u8f6c\u5316\u4e3a\u4e0d\u9009\u7684\u6743\u503c\u6700\u5927\u3002  \n\u7136\u540e\u7531\u4e8e\u8fd9\u79cd\u9898\u5927\u591a\u6570\u90fd\u662f\u8f6c\u6210\u6700\u5c0f\u5272\uff0c\u6240\u4ee5\u628a\u6240\u6709\u6743\u503c\u53d6\u53cd\u3002  \n\n\u7136\u540e\u5c31\u662f\u5173\u952e\u7684\u5efa\u56fe\uff1a  \n\u539f\u70b9\u5411\u6240\u6709\u96c6\u5408\u8fde\u5bb9\u91cf\u7b49\u4e8e\u96c6\u5408\u6743\u503c $INF$ \u7684\u8fb9\uff0c\u96c6\u5408\u5411\u5305\u542b\u7684\u6570\u5b57\u8fde $INF$ \u7684\u8fb9\uff0c\u6570\u5b57\u5411\u6c47\u70b9\u8fde $INF$ \u7684\u8fb9\u3002  \n\u663e\u7136\uff0c\u65ad\u6570\u5b57\u548c\u96c6\u5408\u4e4b\u95f4\u7684\u8fb9\u662f\u4e0d\u4f18\u7684\uff1b\u800c\u5176\u4e2d\u96c6\u5408\u65ad\u8fb9\u76f8\u5f53\u4e8e\u4e0d\u9009\uff0c\u6570\u5b57\u65ad\u8fb9\u76f8\u5f53\u4e8e\u9009\u3002  \n\u8fd9\u6837\uff0c\u8003\u8651\u4efb\u610f\u4e00\u79cd\u5272\u7684\u65b9\u6848\uff0c\u90fd\u8bf4\u660e\u9009\u62e9\u4e86\u6240\u6709\u7684\u96c6\u5408\u548c\u4ed6\u4eec\u7684\u6570\u5b57\u7684\u5e76\u96c6\u3002  \n\n\u4f46\u662f\u600e\u4e48\u4fdd\u8bc1\u6570\u5b57\u6570\u91cf\u7b49\u4e8e\u96c6\u5408\u6570\u91cf\u5462\uff1f  \n\u5047\u8bbe\u5de6\u8fb9\u65ad\u4e86 $x$ \u6761\u8fb9\uff0c\u5269\u7684 $n-x$ \u4e2a\u96c6\u5408\u5fc5\u7136\u8fde\u5411\u4e0d\u5c11\u4e8e $n-x$ \u4e2a\u6570\uff0c\u6240\u4ee5\u53f3\u8fb9\u65ad\u8fb9\u4e0d\u5c11\u4e8e $n-x$ \u6761\uff0c\u603b\u65ad\u8fb9\u6570\u4e0d\u5c11\u4e8e $n$ \u6761\u3002  \n\u540c\u65f6\uff0c\u53ea\u65ad $n$ \u6761\u7684\u65b9\u6848\u663e\u7136\u5b58\u5728\uff08\u53ea\u780d\u4e00\u8fb9\u5c31\u884c\uff09\uff0c\u53c8\u7531\u4e8e\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u52a0\u4e0a\u4e86 $INF$\uff0c\u6240\u4ee5\u663e\u7136\u6700\u7ec8\u7684\u7b54\u6848\u5c31\u4f1a\u65ad $n$ \u6761\u3002  \n\u56de\u5230\u521a\u624d\u65ad\u8fb9\u7684\u5b9a\u4e49\uff0c\u5c31\u662f\uff1a\u672a\u9009\u96c6\u5408+\u9009\u53d6\u5143\u7d20=n\uff0c\u4e5f\u5c31\u662f\u9009\u53d6\u96c6\u5408\u6570\u7b49\u4e8e\u9009\u53d6\u5143\u7d20\u6570\u3002  \n\u5f97\u8bc1\u3002  \n\n## $\\text{Description}$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ull unsigned long long\n#define debug(...) fprintf(stderr,__VA_ARGS__)\nconst int N=3e5+100;\n#define ll long long\n#define ui unsigned int\ninline ll read(){\n  ll x(0),f(1);char c=getchar();\n  while(!isdigit(c)){if(c=='-')f=-1;c=getchar();}  \n  while (isdigit(c)){x=(x<<1)+(x<<3)+c-'0';c=getchar();}    \n  return x*f;\n}\n\nint n,m;\n\n#define inf 1000000000ll\nstruct node{\n  int to,nxt,cap;\n}p[N];\nint fi[N],cur[N],cnt;\ninline void addline(int x,int y,int w){\n  p[++cnt]=(node){y,fi[x],w};fi[x]=cnt;\n  p[++cnt]=(node){x,fi[y],0};fi[y]=cnt;\n  return;\n}\nint s,t;\nint bel[N],q[N],st,ed;\nbool bfs(){\n  q[st=ed=1]=s;\n  memset(bel,0,sizeof(bel));bel[s]=1;\n  while(st<=ed){\n    int now=q[st++];\n    for(int i=cur[now]=fi[now];~i;i=p[i].nxt){\n      int to=p[i].to;\n      if(!p[i].cap||bel[to]) continue;\n      bel[to]=bel[now]+1;q[++ed]=to;\n    }\n  }\n  return bel[t]?1:0;\n}\nint dfs(int x,int lim){\n  if(!lim||x==t) return lim;\n  int res(0);\n  for(int &i=cur[x];~i;i=p[i].nxt){\n    int to=p[i].to;\n    if(!p[i].cap||bel[to]!=bel[x]+1) continue;\n    int add=dfs(to,min(lim,p[i].cap));\n    res+=add;lim-=add;\n    p[i].cap-=add;p[i^1].cap+=add;\n    if(!lim) break;\n  }\n  if(!res) bel[x]=-1;\n  return res;\n}\nll dinic(){\n  ll flow(0),tmp(0);\n  while(bfs()){\n    while((tmp=dfs(s,2e9))) flow+=tmp;\n  }\n  return flow;\n}\n\nsigned main(){\n#ifndef ONLINE_JUDGE\n  freopen(\"a.in\",\"r\",stdin);\n  freopen(\"a.out\",\"w\",stdout);\n#endif\n  memset(fi,-1,sizeof(fi));cnt=-1;\n  n=read();\n  ll sum(0);\n  s=2*n+1;t=s+1;\n  for(int i=1;i<=n;i++) addline(i+n,t,inf);\n  for(int i=1;i<=n;i++){\n    int k=read();\n    for(int j=1;j<=k;j++){\n      int x=read();\n      addline(i,x+n,inf);\n    }\n  }\n  for(int i=1;i<=n;i++){\n    int w=read();sum-=w;\n    addline(s,i,inf-w);\n  }\n  printf(\"%lld\\n\",(dinic()-1ll*n*inf)-sum);\n  return 0;\n}\n/*\n*/\n\n```\n",
        "postTime": 1640661892,
        "uid": 449265,
        "name": "wind_whisper",
        "ccfLevel": 10,
        "title": "CF103E Buying Sets"
    },
    {
        "content": "\u6211\u4eec\u8981\u6c42\u96c6\u5408\u6570\u4e0e\u96c6\u5408\u5e76\u7684\u5927\u5c0f\u76f8\u7b49\uff0c\u4e14\u6700\u540e\u7684\u4ef7\u683c\u6700\u5c0f\n\n\u6211\u4eec\u8003\u8651\u628a\u4ef7\u683c\u53d6\u76f8\u53cd\u6570\uff0c\u56e0\u4e3a$n\\le 300$\uff0c\u663e\u7136\u53ef\u4ee5\u7f51\u7edc\u6d41\n\n\u56e0\u4e3a\u4ef7\u683c\u6709\u6b63\u6709\u8d1f\uff0c\u6211\u4eec\u4ece\u6e90\u70b9\u5230\u96c6\u5408\u7684\u6d41\u91cf\u7edf\u4e00\u53d6$inf+(-p_i)$\uff0c\u5bf9\u6bcf\u4e2a\u6570\u5411\u6c47\u70b9\u53d6$inf$\uff0c\u7136\u540e\u96c6\u5408\u5230\u6bcf\u4e2a\u6570\u7684\u6d41\u91cf\u53d6\u4e00\u4e2a\u8fdc\u5927\u4e8einf\u7684\u6570\u5373\u53ef\n\n\u6211\u4eec\u6765\u8bc1\u660e\u4ed6\u7684\u6b63\u786e\u6027\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6743\u503c\u548c$>=0$\u7684\u96c6\u5408\u96c6\uff0c\u5de6\u8fb9\u7684\u6d41\u91cf\u4e00\u5b9a\u4f1a\u6d41\u6ee1\uff0c\u56e0\u4e3a\u5bf9\u5e94\u7684\u53f3\u8fb9\u81f3\u5c11\u6709$k\\times inf$\u7684\u6d41\u91cf\uff0c\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6743\u503c\u548c$<0$\u7684\u96c6\u5408\u96c6\uff0c\u82e5\u5bf9\u5e94\u7684\u53f3\u8fb9\u4e2a\u6570$>k$\uff0c\u53ea\u8981$inf$\u53d6\u5f97\u8db3\u591f\u5927\uff0c\u591a\u4f59\u6d41\u91cf\u90fd\u4f1a\u6d41\u6ee1\uff0c\u56e0\u6b64\u6d41\u4e0d\u6ee1\u7684\u60c5\u51b5\u5f53\u4e14\u4ec5\u5f53\u6743\u503c\u548c$<0$\u4e14\u5bf9\u5e94\u7684\u53f3\u8fb9\u8282\u70b9\u6570\u7b49\u4e8e\u5de6\u8fb9\u8282\u70b9\u6570\n\n\u6211\u4eec\u8dd1\u4e00\u4e2a\u6700\u5927\u6d41\uff0c\u628a\u5de6\u8fb9\u7684\u6ee1\u6d41-maxflow\u5373\u53ef\n\n",
        "postTime": 1605324011,
        "uid": 131933,
        "name": "sunzh",
        "ccfLevel": 9,
        "title": "CF103E"
    },
    {
        "content": "[\u535a\u5ba2\u91cc\u9605\u8bfb](https://www.cnblogs.com/dzice/p/13061241.html)\n\n~~\u6700\u8fd1\u535a\u5ba2\u91cc\u5947\u5947\u602a\u602a\u7684\u4e1c\u897f\u8d8a\u6765\u8d8a\u591a\u4e86~~,\u662f\u65f6\u5019\u5199\u4e00\u7bc7\u9898\u89e3\u4e86\n\n\u8fd9\u662f\u6a21\u62df\u8d5b\u7684\u4e00\u9053\u9898\uff0c\u8003\u8bd5\u65f6\u53ea\u4f1a\u6253\u66b4\u529bQWQ\uff0c\u540e\u6765\u53d1\u73b0\u8fd9\u9053\u9898\u7684\u5efa\u56fe\u771f\u7684\u5341\u5206\u5de7\u5999\n\n\u9996\u5148\uff0c\u770b\u5230$n<=300$\u7684\u6570\u636e\u8303\u56f4\uff0c\u5f88\u50cf\u662f\u7f51\u7edc\u6d41\uff0c\u6211\u4eec\u5148\u628a\u5b50\u96c6\u548c\u5b50\u96c6\u4e2d\u7684\u5143\u7d20\u62c6\u5f00\u6765\u770b\uff0c\u5c06\u5b50\u96c6\u7684\u4ef7\u503c\u53d6\u76f8\u53cd\u6570\uff0c\u6700\u540e\u8f93\u51fa\u7b54\u6848\u65f6\u518d\u53d6\u4e2a\u76f8\u53cd\u6570\uff0c\u4e8e\u662f\u4fbf\u4e3a\u9009\u4e86\u8fd9\u4e2a\u5b50\u96c6\u5c31\u5fc5\u987b\u8981\u9009\u5176\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u9009\u51fa\u7684\u5b50\u96c6\u4ef7\u503c\u5c3d\u91cf\u5927\uff0c\u5c06\u5b50\u96c6\u5411\u5143\u7d20\u8fde$inf$\u8fb9\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u4e2a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6a21\u578b\uff0c\n\n\u7136\u540e\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5904\u7406\u4f7f\u5f97\u5b50\u96c6\u5e76\u7684\u5927\u5c0f\u7b49\u4e8e\u5b50\u96c6\u4e2a\u6570\uff0c\u770b\u5230\u9898\u76ee\u4e2d\u7ed9\u7684\u201c\u4efb\u610f$k$\u4e2a\u5b50\u96c6\u7684\u5e76\u7684\u5927\u5c0f$k\\ge k$\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u60f3\u5982\u4f55\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u5efa\u56fe\uff0c\u7531\u6e90\u70b9\u5411\u5b50\u96c6\u8fde$lim+P_i$\u7684\u8fb9($lim$\u662f\u6bd4$inf$\u5c0f\u7684\u4e00\u4e2a\u6781\u5927\u503c\uff0c\u9632\u6b62$inf$\u8fb9\u88ab\u5272\u6389)\uff0c\u8fd9\u6761\u8fb9\u88ab\u5272\u610f\u5473\u7740\u4e0d\u9009\u8fd9\u4e2a\u5b50\u96c6\uff0c\u7531\u5143\u7d20\u5411\u6c47\u70b9\u8fde$lim$\u8fb9\uff0c\u8fd9\u6761\u8fb9\u88ab\u5272\u610f\u5473\u7740\u8fd9\u4e2a\u5143\u7d20\u6700\u7ec8\u4f1a\u88ab\u9009\uff0c\u8fd9\u91cc\u53ef\u4ee5~~\u611f\u6027\u7406\u89e3\u4e00\u4e0b~~\u753b\u4e2a\u56fe\u624b\u73a9\u4e00\u4e0b\uff0c\u6700\u7ec8\u88ab\u5272\u6389\u7684\u8fb9\u80af\u5b9a\u4e3a$n$\u6761\uff0c\u5e76\u4e14\u4efb\u610f$k$\u4e2a\u5b50\u96c6\u7684\u5e76\u7684\u5927\u5c0f$k\\ge k$\n\n\u653e\u4e2a\u4ee3\u7801\n```\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nint s,t,dep[1003],n,t1,x,p,ans;\nvector<int>l[1003],l1[1003],nu[1003];\nqueue<int>q;\nvoid bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tq.push(s),dep[s]=1;\n\twhile(!q.empty())\n\t{\n\t\tp=q.front(),q.pop();\n\t\tfor(int j=0;j<l[p].size();j++)\n\t\t\tif(l1[p][j]!=0&&dep[l[p][j]]==0)\n\t\t\t\tq.push(l[p][j]),dep[l[p][j]]=dep[p]+1;\n\t}\n}\nint dfs(int x1,int wat)\n{\n\tif(x1==t)\n\t\treturn wat;\n\tint sum=0,cnt;\n\tfor(int j=0;j<l[x1].size();j++)\n\t\tif(l1[x1][j]!=0&&dep[l[x1][j]]==dep[x1]+1)\n\t\t\tcnt=dfs(l[x1][j],min(l1[x1][j],wat)),l1[x1][j]-=cnt,l1[l[x1][j]][nu[x1][j]]+=cnt,sum+=cnt,wat-=cnt;\n\tif(sum==0)\n\t\tdep[x1]=0;\n\treturn sum;\n}\nvoid add(int x,int y,int wat)\n{\n\tl[x].push_back(y),l[y].push_back(x),l1[x].push_back(wat),l1[y].push_back(0),nu[x].push_back(l[y].size()-1),nu[y].push_back(l[x].size()-1);\n}\nsigned main()\n{\n\tscanf(\"%lld\",&n);\n\ts=0,t=2*n+1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&t1);\n\t\tadd(i+n,t,5e8);\n\t\tfor(int j=1;j<=t1;j++)\n\t\t{\n\t\t\tscanf(\"%lld\",&x);\n\t\t\tadd(i,x+n,2e9);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&x);\n\t\tadd(s,i,5e8-x),ans+=5e8-x;\n\t}\n\twhile(1)\n\t{\n\t\tbfs();\n\t\tif(dep[t]==0)\n\t\t\tbreak;\n\t\tans-=dfs(s,2e9);\n\t}\n\tcout<<min(0ll,-ans);\n\treturn 0;\n}\n\n```",
        "postTime": 1591543042,
        "uid": 78001,
        "name": "dz_ice",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF103E \u3010Buying Sets\u3011"
    }
]