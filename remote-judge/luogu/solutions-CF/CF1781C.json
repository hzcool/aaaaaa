[
    {
        "content": "# \u9898\u89e3\u3010CF1781C Equal Frequencies\u3011\n\n## 0. \u9898\u610f\n\n\u7ed9\u51fa\u957f\u5ea6\u4e3a $n$ \u7684\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32 $s$\uff0c\u8bf7\u4fee\u6539\u5c3d\u91cf\u5c11\u7684\u5b57\u7b26\uff0c\u4f7f\u5f97\u6bcf\u79cd\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u76f8\u540c\u3002\u7ed9\u51fa\u6700\u4f18\u7684\u4fee\u6539\u6b21\u6570\u548c\u4e00\u79cd\u65b9\u6848\u3002\uff08\u4e00\u5b9a\u6709\u89e3\uff09\n\n## 1. \u601d\u8def\n\n\u9996\u5148\uff0c\u4e3a\u4e86\u8ba9\u6bcf\u79cd\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u76f8\u540c\uff0c\u5b57\u6bcd\u4e2a\u6570 $k$ \u5fc5\u7136\u4e3a $n$ \u7684\u56e0\u6570\uff08\u663e\u7136\u5730\uff0c$k\\leq 26$\uff0c\u5426\u5219\u5b57\u7b26\u4e0d\u591f\u7528\uff09\u3002\n\n\u679a\u4e3e\u53ef\u80fd\u7684 $k$\uff0c\u6b64\u65f6\u53ef\u4ee5\u6c42\u51fa\u6700\u5c11\u7684\u4fee\u6539\u6b21\u6570\uff1a\u6211\u4eec\u5c06\u6bcf\u4e2a\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\u6392\u5e8f\uff0c\u4fdd\u7559\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684 $k$ \u79cd\u5b57\u6bcd\uff0c\u800c\u5269\u4f59\u7684\u5b57\u6bcd\u53bb\u9664\u3002\n\n\u8fd9\u76f8\u5f53\u4e8e\uff0c\u524d $k$ \u79cd\u5b57\u6bcd\u51fa\u73b0\u6b21\u6570\u4e3a $\\frac{n}{k}$\uff0c\u5176\u4f59\u7684\u4e3a $0$\u3002\u6c42\u51fa\u6bcf\u79cd\u5b57\u6bcd\u5b9e\u9645\u51fa\u73b0\u6b21\u6570\u548c\u76ee\u6807\u7684\u5dee\u8ddd\u4e4b\u548c\u5e76\u9664\u4ee5 $2$\uff0c\u5373\u4e3a\u6700\u5c11\u7684\u4fee\u6539\u6b21\u6570\u3002\uff08\u4e3a\u4ec0\u4e48\u8981\u9664\u4ee5 $2$\uff1f\u56e0\u4e3a\u6bcf\u6b21\u4fee\u6539\u53ef\u4ee5\u6539\u53d8\u4e24\u4e2a\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\u3002\uff09\n\n\u7ee7\u800c\uff0c\u6839\u636e\u4ee5\u4e0a\u7684\u6c42\u6cd5\uff0c\u6211\u4eec\u4e5f\u5f97\u5230\u4e86\u4e00\u79cd\u6700\u4f18\u89e3\u7684\u6784\u9020\uff1a\u6bcf\u6b21\u4fee\u6539\u5c06\uff08\u5b9e\u9645\u51fa\u73b0\u6b21\u6570\uff09\u8d85\u8fc7\u76ee\u6807\u7684\u5b57\u6bcd\u201c\u5206\u914d\u201d\u7ed9\u4f4e\u4e8e\u76ee\u6807\u7684\u5b57\u6bcd\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n## 2. \u5b9e\u73b0\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nint n;\nstring s;\nint cnt[26];\nstruct Node\n{\n    int id, cnt;\n} v[26];\nbool cmp(Node a, Node b)\n{\n    return a.cnt > b.cnt;\n}\nsigned main()\n{\n    int t;\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin >> t;\n    while (t--)\n    {\n        cin >> n >> s;\n        fill(cnt, cnt + 26, 0);\n        for (int i = 0; i < s.length(); ++i)\n            ++cnt[s[i] - 'a'];\n        int ans = 0x3f3f3f3f3f3f3f3fll, ansid = 0;\n        for (int i = 0; i < 26; ++i)\n            v[i] = {i, cnt[i]}; // \u8bb0\u5f55\u51fa\u73b0\u6b21\u6570\n        sort(v, v + 26, cmp); // \u6392\u5e8f\n        for (int used = 1; used <= 26; ++used)\n        { // \u679a\u4e3e\u4f7f\u7528\u7684\u5b57\u6bcd\u4e2a\u6570 k\n            if (n % used != 0)\n                continue;\n            int m = n / used; // n / k\n            int now = 0;\n            for (int i = 0; i < used; ++i)\n                now += abs(v[i].cnt - m); // \u524d k \u4e2a\u5b57\u6bcd\u7684\u76ee\u6807\u4e3a n / k\n            for (int i = used; i < 26; ++i)\n                now += v[i].cnt; // \u5269\u4f59\u5b57\u6bcd\u7684\u76ee\u6807\u4e3a 0\n            now /= 2; // \u6bcf\u6b21\u4fee\u6539\u53ef\u4ee5\u6539\u53d8 2 \u4e2a\u51fa\u73b0\u6b21\u6570\n            ans = min(ans, now);\n            if (ans == now)\n                ansid = used;\n        }\n        cout << ans << '\\n'; // \u5148\u8f93\u51fa\u4fee\u6539\u6b21\u6570\uff0c\u4e0b\u9762\u8fdb\u884c\u6784\u9020\n        for (int i = 0; i < ansid; ++i)\n            cnt[v[i].id] = n / ansid;\n        for (int i = ansid; i < 26; ++i)\n            cnt[v[i].id] = 0; // \u4fdd\u5b58\u76ee\u6807\u51fa\u73b0\u6b21\u6570\n        for (int i = 0; i < s.length(); ++i)\n        {\n            bool vis = false;\n            for (int j = 0; j < ansid; ++j)\n                if (v[j].id == s[i] - 'a')\n                {\n                    vis = true;\n                    break;\n                } // \u5224\u65ad\u5f53\u524d\u5b57\u6bcd\u53ef\u4e0d\u53ef\u4ee5\u4fdd\u7559\n            if (!vis)\n                s[i] = '\\0'; // \u56e0\u4e3a\u5f53\u524d\u5b57\u6bcd\u4e0d\u5728\u524d k \u79cd\u91cc\uff0c\u6240\u4ee5\u4e0d\u80fd\u4fdd\u7559\n            else if (cnt[s[i] - 'a'])\n                --cnt[s[i] - 'a'];\n            else\n                s[i] = '\\0'; // \u56e0\u4e3a\u5f53\u524d\u5b57\u6bcd\u51fa\u73b0\u6b21\u6570\u8fc7\u591a\uff0c\u6240\u4ee5\u4e0d\u80fd\u4fdd\u7559\n        }\n        for (int i = 0; i < s.length(); ++i)\n        {\n            if (s[i] != '\\0')\n                continue; // \u5bf9\u4e0d\u80fd\u4fdd\u7559\u7684\u5b57\u6bcd\u91cd\u65b0\u5206\u914d\n            int vis = -1;\n            for (int j = 0; j < ansid; ++j)\n                if (cnt[v[j].id])\n                {\n                    vis = v[j].id; // \u627e\u5230\u8fd8\u6709\u7a7a\u4f59\u7684\u5b57\u6bcd\n                    break;\n                }\n            s[i] = vis + 'a'; // \u8fdb\u884c\u5206\u914d\n            --cnt[vis];\n        }\n        cout << s << '\\n';\n    }\n    cout.flush();\n    return 0;\n}\n```\n\n## 3. \u9644\u6ce8\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6784\u9020\u9898\u53ef\u4ee5\u8fdb\u884c\u9002\u5f53\u679a\u4e3e\uff0c\u4ee5\u7ea6\u675f\u6784\u9020\u7684\u8303\u56f4\u3002\u53e6\u5916\uff0c\u4e00\u5b9a\u6ce8\u610f\u9898\u76ee\u4e2d\u4e00\u4e9b\u53d8\u91cf\u7684\u8303\u56f4\uff0c\u8fd9\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u9009\u62e9\u66f4\u597d\u7684\u505a\u6cd5\u3002\n",
        "postTime": 1674001377,
        "uid": 371468,
        "name": "qidirj",
        "ccfLevel": 0,
        "title": "# \u9898\u89e3\u3010CF1781C Equal Frequencies\u3011"
    }
]