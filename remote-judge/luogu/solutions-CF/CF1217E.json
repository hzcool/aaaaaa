[
    {
        "content": "### [\u9898\u76ee\u6233\u8fd9\u91cc](https://www.luogu.org/problem/CF1217E)\n\n## **\u9898\u610f**\n\n\u8bb0$sum$\u4e3a\u4e00\u4e2a\u591a\u91cd\u96c6\u7684\u6240\u6709\u5143\u7d20\u7684\u548c\n\n**\u6211\u4eec\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e2a\u591a\u91cd\u96c6\u662f\u5e73\u8861\u7684$:$**\n\n\u5bf9\u4e8e$sum$\u7684\u6bcf\u4e00\u4e2a\u6570\u4f4d\uff0c\u591a\u91cd\u96c6\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\u4e0e$sum$\u6b64\u6570\u4f4d\u76f8\u540c\n\n**\u73b0\u5728\uff0c\u7ed9\u4f60\u4e00\u4e2aa\u6570\u7ec4\uff0c\u6709\u4e24\u79cd\u64cd\u4f5c**\n\n1.\u4fee\u6539a\u6570\u7ec4\u4e2d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n\n2.\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u4e2d\u6240\u6709**\u4e0d\u5e73\u8861\u591a\u91cd\u96c6\u7684sum\u7684\u6700\u5c0f\u503c**\n\n\n$\\huge\\mathcal{Solution}$\n\n\u9996\u5148\uff0c\u5bb9\u6613\u5f97\u5230\u7684\u662f\uff0c\u4e00\u4e2a\u5e73\u8861\u7684\u591a\u91cd\u96c6\u4e2d\u4e0d\u5b58\u5728\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u5143\u7d20\u5728\u67d0\u4e2a\u6570\u4f4d\u90fd\u6709\u503c\uff08\u5927\u4e8e0\uff09\u3002\u53cd\u8fc7\u6765\uff0c \u4e00\u4e2a\u4e0d\u5e73\u8861\u7684\u591a\u91cd\u96c6\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u6570\u4f4d\u4e0a\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u5143\u7d20\u6709\u503c\u3002\n\n**\u5982\u679c\u6ca1\u6709\u4fee\u6539**\n\n\u7531\u4e0d\u5e73\u8861\u591a\u91cd\u96c6\u7684\u8fd9\u4e2a\u6027\u8d28\u53ef\u4ee5\u5f97\u51fa\uff0c\u53ea\u8003\u8651\u4e00\u4e2a\u6570\u4f4d\u7684\u8bdd\uff0c**sum\u7684\u6700\u5c0f\u503c\u4e3a\u5728\u8be5\u4f4d\u4e0a\u6709\u503c\u7684\u6700\u5c0f\u7684\u4e24\u4e2a\u5143\u7d20\u4e4b\u548c**\u3002\n\n\u8003\u8651\u591a\u4e2a\u6570\u4f4d\u7684\u8bdd\uff0c\u90a3\u7b54\u6848\u5c31\u662f$min${\u6bcf\u4e2a\u6570\u4f4d\u7684sum\u7684\u6700\u5c0f\u503c}\n\n\u77e5\u9053\u4e86\u8fd9\u70b9\uff0c\u505a\u6cd5\u5c31~~\u5f88\u663e\u7136\u4e86~~\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u6570\u4f4d\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u5728\u8be5\u4f4d\u4e0a\u6709\u503c\u7684\u5143\u7d20\u7684\u6700\u5c0f\u503c$Min$\u548c\u6b21\u5c0f\u503c$Secmin$,\u90a3\u4e48\u7b54\u6848\u5c31\u662f$min${$Min_{i}+Secmin_{i}$}\u3002\n\n**\u63a5\u4e0b\u6765\uff0c\u8003\u8651\u5e26\u4e0a\u4fee\u6539**\n\n\u76f4\u63a5\u628a$a_{x}$\u6539\u6210$y$\u4e0d\u592a\u5bb9\u6613\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u628a$a_{x}$\u53d8\u6210$0$\uff0c\u518d\u6539\u6210$y$\u3002(\u4e24\u6b21\u5355\u70b9\u4fee\u6539)\n\n$\\huge\\mathcal{Code}$\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <climits>\n\ntemplate <typename Tp>\ninline void read(Tp &x) {\n    x = 0;\n    bool f = true; char ch = getchar();\n    for ( ; ch < '0' || ch > '9'; ch = getchar()) f ^= ch == '-';\n    for ( ; ch >= '0' && ch <= '9'; ch = getchar()) x = x * 10 + (ch ^ 48);\n    x = f ? x : -x;\n}\n\nconst int N = 2e5 + 7;\n\nint a[N], b[N];\n\nstruct node {\n    int Min, Secmin;\n    #define Min(x) tre[x].Min\n    #define Secmin(x) tre[x].Secmin\n};\n\nstruct Segment_Tree {\n    node tre[N << 2];\n    inline void build(int p, int l, int r) {\n        Min(p) = Secmin(p) = INT_MAX;\n        if (l == r) {\n            if (b[l]) Min(p) = a[l];\n            return;\n        }\n        int mid = (l + r) >> 1;\n        build(p << 1, l, mid), build(p << 1 | 1, mid + 1, r);\n        if (Min(p << 1) < Min(p << 1 | 1)) {\n            Min(p) = Min(p << 1);\n            Secmin(p) = std::min(Secmin(p << 1), Min(p << 1 | 1));\n        }\n        else {\n            Min(p) = Min(p << 1 | 1);\n            Secmin(p) = std::min(Secmin(p << 1 | 1), Min(p << 1));\n        }\n    }\n    inline void change(int p, int l, int r, int x, int k, int v) {\n        if (l == r) {\n            Min(p) = Secmin(p) = INT_MAX;\n            if (k) Min(p) = v;\n            return;\n        }\n        int mid = (l + r) >> 1;\n        if (x <= mid) change(p << 1, l, mid, x, k, v);\n        if (x > mid) change(p << 1 | 1, mid + 1, r, x, k, v);\n        if (Min(p << 1) < Min(p << 1 | 1)) {\n            Min(p) = Min(p << 1);\n            Secmin(p) = std::min(Secmin(p << 1), Min(p << 1 | 1));\n        }\n        else {\n            Min(p) = Min(p << 1 | 1);\n            Secmin(p) = std::min(Secmin(p << 1 | 1), Min(p << 1));\n        }\n    }\n    inline node Get_ans(int p, int l, int r, int x, int y) {\n        if (l >= x && r <= y) return tre[p];\n        int mid = (l + r) >> 1;\n        if (y <= mid) return Get_ans(p << 1, l, mid, x, y);\n        if (x > mid) return Get_ans(p << 1 | 1, mid + 1, r, x, y);\n        node ans1 = Get_ans(p << 1, l, mid, x, y), ans2 = Get_ans(p << 1 | 1, mid + 1, r, x, y), ans;\n        if (ans1.Min < ans2.Min) {\n            ans.Min = ans1.Min;\n            ans.Secmin = std::min(ans1.Secmin, ans2.Min);\n        }\n        else {\n            ans.Min = ans2.Min;\n            ans.Secmin = std::min(ans2.Secmin, ans1.Min);\n        }\n        return ans;\n    }\n};\nSegment_Tree T[9];\n\nint main() {\n    int n, m;\n    read(n), read(m);\n    for (int i = 1; i <= n; ++i) read(a[i]);\n    for (int i = 0, x = 1; i < 9; ++i) {\n        for (int j = 1; j <= n; ++j) b[j] = (a[j] / x) % 10;\n        T[i].build(1, 1, n);\n        x *= 10;\n    }\n    while (m--) {\n        int opt, x, y;\n        read(opt), read(x), read(y);\n        if (opt == 1) {\n            for (int i = 0; i < 9; ++i) T[i].change(1, 1, n, x, 0, 0);\n            a[x] = y;\n            for (int i = 0; i < 9; ++i) {\n                T[i].change(1, 1, n, x, y % 10, a[x]);\n                y /= 10;\n            }\n        }\n        else {\n            int ans = INT_MAX;\n            for (int i = 0; i < 9; ++i) {\n                node t = T[i].Get_ans(1, 1, n, x, y);\n                ans = std::min(ans, (t.Secmin == INT_MAX ? INT_MAX : t.Min + t.Secmin));\n            }\n            printf(\"%d\\n\", ans == INT_MAX ? -1 : ans);\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1567947539,
        "uid": 47751,
        "name": "Crossing",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1217E \u3010Sum Queries?\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://pelom.top/archives/15/)\n\n### \u9898\u610f\n\n\u8bb0$sum$\u4e3a\u4e00\u4e2a\u591a\u91cd\u96c6\u7684\u6240\u6709\u5143\u7d20\u7684\u548c\n\n\u5bf9\u4e8e$sum$\u7684\u6bcf\u4e00\u4e2a\u6570\u4f4d\uff0c\u5982\u679c\u591a\u91cd\u96c6\u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5143\u7d20\u7684\u540c\u4e00\u6570\u4f4d\u4e0e$sum$\u7684\u6b64\u6570\u4f4d\u76f8\u540c\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u591a\u91cd\u96c6\u662f\u5e73\u8861\u7684\uff0c\u5426\u5219\u79f0\u5b83\u662f\u4e0d\u5e73\u8861\u7684\n\n\u7ed9\u51fa\u4e00\u4e2a\u6570\u7ec4\uff0c\u6709\u4e24\u79cd\u64cd\u4f5c\n\n1.\u5355\u70b9\u4fee\u6539\n\n2.\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u4e2d\u6240\u6709\u4e0d\u5e73\u8861\u7684\u591a\u91cd\u96c6\u7684$sum$\u4e2d\u7684\u6700\u5c0f\u503c\n\n**\u6570\u636e\u8303\u56f4\uff1a**$1 \\le n,m \\le 2 \\cdot 10^5,1 \\le a_i \\le 10^9$\n\n### \u9898\u89e3\n\n\u9996\u5148\u901a\u8fc7\u7ed9\u51fa\u7684\u6837\u4f8b\u731c\u60f3\uff1a$sum$\u7684\u6bcf\u4e00\u4f4d\u4e0a\u53ea\u80fd\u5bf9\u5e94\u6709$1$\u4e2a\u975e$0$\u7684\u6570\u5b57\n\n\u5bb9\u6613\u8bc1\u660e\uff1a\u82e5\u540c\u4e00\u4f4d\u4e0a\u5b58\u5728$2$\u4e2a\u53ca\u4ee5\u4e0a\u975e$0$\u6570\u5b57\uff0c\u60f3\u8981\u4f7f$sum$\u4e2d\u7684\u5bf9\u5e94\u4f4d\u4e0e\u5176\u4e2d\u4e00\u4e2a\u76f8\u7b49\uff0c\u80af\u5b9a\u9700\u8981\u8fdb\u4f4d\uff1b\u800c\u8fdb\u4f4d\u540e\u4e0b\u4e00\u4f4d\u53c8\u4e0e$sum$\u4e2d\u5b83\u7684\u5bf9\u5e94\u4f4d\u4e0d\u7b49\uff0c\u518d\u6b21\u9700\u8981\u8fdb\u4f4d\uff1b\u4ee5\u6b64\u7c7b\u63a8\uff0c\u603b\u4f4d\u6570\u4e00\u5b9a\u4f1a\u8d85\u8fc7$sum$\u7684\u603b\u4f4d\u6570\uff0c\u77db\u76fe\n\n\u53cd\u4e4b\uff0c\u82e5\u4e00\u4e2a\u591a\u91cd\u96c6\u662f\u4e0d\u5e73\u8861\u7684\uff0c\u90a3\u5b83\u4e00\u5b9a\u6709\u67d0\u4e00\u4f4d\u4e0a\u5b58\u5728$2$\u4e2a\u53ca\u4ee5\u4e0a\u975e$0$\u7684\u6570\u5b57\uff1b\u4f5c\u4e3a\u8fd9\u4e2a\u591a\u91cd\u96c6\u7684\u5b50\u96c6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u8be5\u4f4d\u4e0a\u6700\u5c0f\u7684$2$\u4e2a\u5143\u7d20\u7684\u548c\uff1b\u800c\u5bf9\u4e8e\u5176\u5b83\u6570\u4f4d\uff0c\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u8bb0\u5f55\u8be5\u503c\uff0c\u6700\u540e\u7684\u7b54\u6848\u5373\u4e3a\u533a\u95f4\u7684\u6700\u5c0f\u503c\n\n```cpp\ninline void init(int v){\n    int t=v;\n    for(int i=1;i<L && t;i++,t/=10)\n        if(t%10!=0)\n            mi[i]=Min(mi[i],v);\n}\n```\n\n\u56e0\u4e3a\u53d6$min$\u6ee1\u8db3\u533a\u95f4\u548c\u6027\u8d28\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff1b\u5177\u4f53\u65b9\u6cd5\u662f\uff1a\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u7ef4\u62a4\u8be5\u533a\u95f4\u7684\u7b54\u6848\u4e0e\u8be5\u533a\u95f4\u7684\u6bcf\u4e2a\u6570\u4f4d\u4e0a\u975e$0$\u7684\u6570\u7684\u6700\u5c0f\u503c\uff0c\u5408\u5e76\u533a\u95f4\u65f6\u7528\u540c\u4e00\u4f4d\u7684\u6700\u5c0f\u503c\u7684\u548c\u53bb\u66f4\u65b0\u533a\u95f4\u7684\u7b54\u6848\n\n\u6ce8\u610f\u56de\u7b54\u8be2\u95ee\u7684\u65f6\u5019\u4e5f\u9700\u8981\u5408\u5e76\u7b54\u6848\uff0c\u53ef\u4ee5\u5c06\u533a\u95f4\u5408\u5e76\u91cd\u8f7d\u4e3a$+$\uff0c\u65b9\u4fbf\u4f7f\u7528\n\n```cpp\ninline node operator + (const node& x){\n    node res;\n    res.w=Min(w,x.w);\n    for(int i=1;i<L;i++){\n        res.mi[i]=Min(mi[i],x.mi[i]);\n        if(mi[i]<INF && x.mi[i]<INF)\n            res.w=Min(res.w,mi[i]+x.mi[i]);\n    }\n    return res;\n}\n```\n\n**\u4ee3\u7801\uff1a**\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<memory.h>\nusing namespace std;\n#define ls rt<<1\n#define rs rt<<1|1\nconst int N=2e5+10;\nconst int L=10;\nconst int INF=2e9;\nint n,m,op,x,y;\nint a[N];\ntemplate <typename T>\ninline T Min(T a,T b){\n    return a<b?a:b;\n}\nstruct node{\n    int w,mi[L];\n    inline node(){\n        w=INF;\n        for(int i=1;i<L;i++)\n            mi[i]=INF;\n    }\n    inline void init(int v){\n        int t=v;\n        for(int i=1;i<L && t;i++,t/=10)\n            if(t%10!=0)\n                mi[i]=Min(mi[i],v);\n    }\n    inline node operator + (const node& x){\n        node res;\n        res.w=Min(w,x.w);\n        for(int i=1;i<L;i++){\n            res.mi[i]=Min(mi[i],x.mi[i]);\n            if(mi[i]<INF && x.mi[i]<INF)\n                res.w=Min(res.w,mi[i]+x.mi[i]);\n        }\n        return res;\n    }\n} T[N<<2];\ninline void pushUp(int rt){\n    T[rt]=T[ls]+T[rs];\n}\nvoid build(int rt,int l,int r){\n    if(l==r){\n        T[rt].init(a[l]);\n        return ;\n    }\n    int mid=l+r>>1;\n    build(ls,l,mid);\n    build(rs,mid+1,r);\n    pushUp(rt);\n}\nvoid update(int rt,int l,int r,int p,int k){\n    if(l==r){\n        T[rt]=node();\n        T[rt].init(k);\n        return ;\n    }\n    int mid=l+r>>1;\n    if(p<=mid)\n        update(ls,l,mid,p,k);\n    else update(rs,mid+1,r,p,k);\n    pushUp(rt);\n}\nnode query(int rt,int l,int r,int L,int R){\n    if(l>=L && r<=R){\n        return T[rt];\n    }\n    node res;\n    int mid=l+r>>1;\n    if(L<=mid)\n        res=res+query(ls,l,mid,L,R);\n    if(R>mid)\n        res=res+query(rs,mid+1,r,L,R);\n    return res;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&a[i]);\n    build(1,1,n);\n    for(;m--;){\n        scanf(\"%d%d%d\",&op,&x,&y);\n        if(op==1)\n            update(1,1,n,x,y);\n        else{\n            int t=query(1,1,n,x,y).w;\n            printf(\"%d\\n\",t<INF?t:-1);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1569325383,
        "uid": 63708,
        "name": "Pelom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1217E \u3010Sum Queries?\u3011"
    },
    {
        "content": "\u5728\u6211\u7684\u535a\u5ba2\u56ed\u770b\u6548\u679c\u66f4\u4f73\uff1a[\u70b9\u8fd9\u91cc](https://www.cnblogs.com/1000Suns/p/11515585.html)\n\n\u5b8c\u4e86\uff0c\u524d\u51e0\u5929\u624d\u8bf4 edu \u7684 DEF \u90fd\u4e0d\u4f1a\uff0c\u73b0\u5728\u6253\u8138\u4e86\u5427 qwq\n\n~~\u5176\u5b9e\u5728\u521a\u8bf4\u5b8c\u8fd9\u53e5\u8bdd 1min \u5c31\u4f1a\u4e86 D\uff0c3min \u5c31\u4f1a\u4e86 E~~\n\n\u53d1\u73b0\uff0c\u5bf9\u4e8e\u5927\u5c0f $\\ge 3$ \u7684\u4e0d\u5e73\u8861\u96c6\u5408\uff0c\u5b83\u81f3\u5c11\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a $2$ \u7684\u5b50\u96c6\u662f\u4e0d\u5e73\u8861\u7684\u3002\n\n\u8bc1\u660e\uff0c\u53d1\u73b0\u5bf9\u4e8e\u5927\u5c0f\u4e3a $2$ \u7684\u96c6\u5408\uff0c\u5e73\u8861\u5f53\u4e14\u4ec5\u5f53\u4e24\u6570\u7684\u6570\u4f4d\u4ea4\u4e3a\u7a7a\uff08\u5bf9\u4e8e\u4efb\u610f\u4e00\u4f4d\uff0c\u81f3\u591a\u4e00\u4e2a\u6570\u5728\u8fd9\u4e00\u4f4d\u4e0a\u4e0d\u662f $0$\uff09\u3002\n\n\u53cd\u8bc1\u4e00\u6ce2\uff0c\u5982\u679c\u5927\u96c6\u5408\u6ca1\u6709\u5927\u5c0f\u4e3a $2$ \u7684\u4e0d\u5e73\u8861\u96c6\u5408\uff0c\u90a3\u4e48\u4efb\u610f\u4e24\u6570\u7684\u6570\u4f4d\u4ea4\u90fd\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5927\u96c6\u5408\u4e5f\u662f\u5e73\u8861\u7684\uff0c\u77db\u76fe\u4e86\u3002\n\n\u6240\u4ee5\uff0c\u53ea\u9700\u8981\u8003\u8651\u5927\u5c0f\u4e3a $2$ \u7684\u96c6\u5408\u3002\n\n\u8fd9\u4e2a\u5c31\u80fd\u7ebf\u6bb5\u6811\u7b80\u5355\u505a\u4e86\uff0c\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4 $ans$ \u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u4e2d\u7684\u7b54\u6848\uff0c$mn_i$ \u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u4e2d\u7b2c $i$ \u4f4d\u6709\u503c\u7684\u6570\u7684\u6700\u5c0f\u503c\u3002pushup \u5177\u4f53\u770b\u4ee3\u7801\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+q\\log n)\\log a_i)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst int maxn=200020,pw[9]={1,10,100,1000,10000,100000,1000000,10000000,100000000};\n#define MP make_pair\n#define PB push_back\n#define lson o<<1,l,mid\n#define rson o<<1|1,mid+1,r\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define ROF(i,a,b) for(int i=(a);i>=(b);i--)\n#define MEM(x,v) memset(x,v,sizeof(x))\ninline ll read(){\n\tchar ch=getchar();ll x=0,f=0;\n\twhile(ch<'0' || ch>'9') f|=ch=='-',ch=getchar();\n\twhile(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn f?-x:x;\n}\nint n,m,a[maxn];\nstruct node{\n\tll ans,mn[9];\n\tnode operator+(const node &nd)const{\n\t\tnode s;\n\t\ts.ans=min(ans,nd.ans);\n\t\tFOR(i,0,8) s.ans=min(s.ans,mn[i]+nd.mn[i]),s.mn[i]=min(mn[i],nd.mn[i]);\n\t\treturn s;\n\t}\n}seg[maxn*4];\ninline int get(int x,int id){return x/pw[id]%10;}\nvoid build(int o,int l,int r){\n\tif(l==r){\n\t\tseg[o].ans=1e18;\n\t\tFOR(i,0,8) seg[o].mn[i]=get(a[l],i)?a[l]:1e18;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(lson);build(rson);\n\tseg[o]=seg[o<<1]+seg[o<<1|1];\n}\nvoid update(int o,int l,int r,int p,int v){\n\tif(l==r){\n\t\tseg[o].ans=1e18;\n\t\tFOR(i,0,8) seg[o].mn[i]=get(v,i)?v:1e18;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(mid>=p) update(lson,p,v);\n\telse update(rson,p,v);\n\tseg[o]=seg[o<<1]+seg[o<<1|1];\n}\nnode query(int o,int l,int r,int ql,int qr){\n\tif(l>=ql && r<=qr) return seg[o];\n\tint mid=(l+r)>>1;\n\tif(mid<ql) return query(rson,ql,qr);\n\tif(mid>=qr) return query(lson,ql,qr);\n\treturn query(lson,ql,qr)+query(rson,ql,qr);\n}\nint main(){\n\tn=read();m=read();\n\tFOR(i,1,n) a[i]=read();\n\tbuild(1,1,n);\n\twhile(m--){\n\t\tint op=read(),x=read(),y=read();\n\t\tif(op==1) update(1,1,n,x,y);\n\t\telse{\n\t\t\tll ans=query(1,1,n,x,y).ans;\n\t\t\tprintf(\"%lld\\n\",ans>=2e9?-1ll:ans);\n\t\t}\n\t}\n}\n```",
        "postTime": 1568301699,
        "uid": 72118,
        "name": "AThousandSuns",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1217E \u3010Sum Queries?\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1217E)\n\n## \u601d\u8def\n\n\u600e\u4e48\u8bf4\u5462\uff0c\u5176\u5b9e\u662f\u4e00\u9053\u7b80\u5355\u9898\uff0c\u4f46\u662f\u7531\u4e8e\u672c\u4eba\u592a\u83dc\u60f3\u4e86\u633a\u957f\u65f6\u95f4\uff0c\u53d1\u4e00\u7bc7\u9898\u89e3\u3002\n\n\u6211\u4e00\u5f00\u59cb\u88ab\u8fd9\u4e2a\u9898\u9762\u8bc8\u9a97\u5230\u4e86\uff0c\u4ee5\u4e3a\u662f\u4e0d\u53ef\u505a\u9898\uff0c\u5176\u5b9e\u7a0d\u5fae\u60f3\u4e00\u60f3\uff0c\u7b54\u6848\u4e00\u5b9a\u662f\u7531\u4e24\u4e2a\u6570\u7ec4\u6210\u7684\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff0c\u7b80\u5355\u5730\u8bc1\u660e\u4e00\u4e0b\uff1a\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u8bf4\u660e\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u82e5\u6709\u4e24\u4e2a\u6570\u5728\u67d0\u4e00\u4f4d\u4e0a\u90fd\u6709\u503c\uff0c\u8fd9\u4e24\u4e2a\u6570\u6ee1\u8db3\u6761\u4ef6\u3002\u4e3a\u5565\u5462\uff0c\u56e0\u4e3a\u4efb\u610f\u4e24\u4e2a\u4e2a\u4f4d\u6570\u52a0\u8d77\u6765\u5f97\u5230\u7684\u7ed3\u679c\u7684\u4e2a\u4f4d\u6570\u80af\u5b9a\u4e0d\u4e0e\u5b83\u4eec\u4e2d\u4efb\u610f\u4e00\u4e2a\u76f8\u7b49\u3002\n\n\u5047\u8bbe $x,y$ \u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u800c $x,y,z$ \u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e9b\u7ed3\u8bba\uff1a\n\n+ \u7ed3\u8bba $1$\uff1a$x,y$ \u7684\u975e\u96f6\u6570\u4f4d\u96c6\u5408\u7684\u5e76\u96c6\u662f\u4e00\u4e2a\u7a7a\u96c6\u3002\n\n+ \u7ed3\u8bba $2$\uff1a$z$ \u4e0e $x$ \u6216 $y$ \u7684\u975e\u96f6\u6570\u4f4d\u7684\u96c6\u5408\u7684\u5e76\u96c6\u4e0d\u662f\u4e00\u4e2a\u7a7a\u96c6\u3002\n\n\u5047\u8bbe $z$ \u4e0e $x$ \u975e\u96f6\u6570\u4f4d\u7684\u96c6\u5408\u5e76\u96c6\u4e0d\u662f\u7a7a\u96c6\uff0c\u90a3\u4e48\u5b8c\u5168\u53ef\u4ee5\u6487\u5f00 $y$\uff0c\u5355\u72ec\u7531 $z$ \u4e0e $x$ \u7ec4\u6210\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848\uff0c\u53cd\u4e4b\u540c\u7406\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f00\u4e5d\u9897\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u53d6\u524d\u4e24\u5c0f\u52a0\u8d77\u6765\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5751\u70b9\uff0c$a_i$ \u6709\u53ef\u80fd\u8fbe\u5230 $10^9$\uff0c\u9898\u9762\u662f\u9519\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n \\log_2 n \\log_{10} a_i)$\uff0c\u6709\u70b9\u5361\u5e38\uff0c\u6211\u4f5c\u4e3a\u5927\u5e38\u6570\u9009\u624b\u4e0a\u4e86\u706b\u8f66\u5934\u548c $\\rm IO$ \u624d\u8fc7\u53bb\u7684\u3002\n\n## \u4ee3\u7801\n\n\u6ce8\uff1a\u6b64\u4ee3\u7801\u5df2\u7565\u53bb\u8bfb\u5165\u4f18\u5316\uff0c\u53ef\u80fd\u4f1a\u8d85\u65f6\u3002\n\n```cpp\n//A tree without skin will surely die.\n//A man without face will be alive\n#include<bits/stdc++.h>\nusing namespace std;\n#define mid ((l+r)>>1)\n#define sqr(x) ((x)*(x))\n#define all(x) (x).begin(),(x).end()\n#define Tim ((double)clock()/CLOCKS_PER_SEC)\n#define lowbit(x) (x&-x)\nint const N=2e5+10;\nint a[N];\nstruct Segment_Tree{\n\t#define ls (x<<1)\n\t#define rs (x<<1|1)\n\tint c1[N<<2],c2[N<<2];\n\tinline void merge(int x){\n\t\tint a[4];\n\t\ta[0]=c1[ls];a[1]=c2[ls];\n\t\ta[2]=c1[rs];a[3]=c2[rs];\n\t\tsort(a,a+4);c1[x]=a[0];c2[x]=a[1];\n\t}\n\tinline void update(int x,int l,int r,int p,int v){\n\t\tif (l==r){c1[x]=v;c2[x]=2e9;return;}\n\t\tif (p<=mid) update(ls,l,mid,p,v);\n\t\telse update(rs,mid+1,r,p,v);\n\t\tmerge(x);\n\t}\n\tinline pair<int,int> query(int x,int l,int r,int ll,int rr){\n\t\tif (ll<=l && r<=rr) return {c1[x],c2[x]};\n\t\tint vec[4],cnt=0;\n\t\tif (ll<=mid){\n\t\t\tauto down=query(ls,l,mid,ll,rr);\n\t\t\tvec[cnt++]=down.first;\n\t\t\tvec[cnt++]=down.second;\n\t\t}\n\t\tif (mid<rr){\n\t\t\tauto down=query(rs,mid+1,r,ll,rr);\n\t\t\tvec[cnt++]=down.first;\n\t\t\tvec[cnt++]=down.second;\n\t\t}\n\t\tsort(vec,vec+cnt);\n\t\treturn {vec[0],vec[1]};\n\t}\n}T[10];\nsigned main(){\n\tint n,m;io.read(n);io.read(m);\n\tfor (int i=1;i<=n;++i) io.read(a[i]);\n\tfor (int i=1;i<=9;++i)\n\t\tmemset(T[i].c1,0x3f,sizeof(T[i].c1)),\n\t\tmemset(T[i].c2,0x3f,sizeof(T[i].c2));\n\tfor (int i=1;i<=n;++i){\n\t\tint x=a[i];\n\t\tfor (int j=1;j<=9;++j){\n\t\t\tif (x%10==0){x/=10;continue;}\n\t\t\tT[j].update(1,1,n,i,a[i]);\n\t\t\tx/=10;\n\t\t}\n\t}\n\twhile (m--){\n\t\tint opt,l,r;\n\t\tio.read(opt);io.read(l);io.read(r);\n\t\tif (opt==1){\n\t\t\tint x=a[l];\n\t\t\tfor (int j=1;j<=9;++j){\n\t\t\t\tif (x%10==0){x/=10;continue;}\n\t\t\t\tT[j].update(1,1,n,l,2e9);\n\t\t\t\tx/=10;\n\t\t\t}\n\t\t\ta[l]=r;x=a[l];\n\t\t\tfor (int j=1;j<=9;++j){\n\t\t\t\tif (x%10==0){x/=10;continue;}\n\t\t\t\tT[j].update(1,1,n,l,a[l]);\n\t\t\t\tx/=10;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tlong long ans=9e18;\n\t\tfor (int i=1;i<=9;++i){\n\t\t\tauto down=T[i].query(1,1,n,l,r);\n\t\t\tif (down.first<1e9+7 && down.second<1e9+7) ans=min(ans,1ll*down.first+1ll*down.second);\n\t\t}\n\t\tif (ans>2e9) ans=-1;\n\t\tio.writeln(ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1670845031,
        "uid": 253608,
        "name": "Tx_Lcy",
        "ccfLevel": 7,
        "title": "CF1217E Sum Queries?"
    },
    {
        "content": "\u7b80\u5355\u7684 $2300$\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u8bfb\u61c2\u9898\u610f\uff0c\u4e8b\u5b9e\u4e0a\u7b80\u5316\u4e00\u4e0b\u5c31\u53ef\u4ee5\u77e5\u9053\u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\u6709\u4e24\u4e2a\u6570\u9700\u8981\u5728\u67d0\u4e00\u4f4d\u4e0a\u90fd\u6709\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b50\u5e8f\u5217\u5c31\u662f\u574f\u7684\u3002\n\n\u5982\u679c\u5b58\u5728\u4e24\u4e2a\u6570\u5728\u67d0\u4e00\u4f4d\u4e0a\u6709\u503c\uff0c\u5148\u4e0d\u8003\u8651\u8fdb\u4f4d\u7684\u60c5\u51b5\uff0c\u80af\u5b9a\u627e\u4e0d\u51fa\u6765\u4e00\u4e2a\u6570\u548c\u4ed6\u4eec\u7684\u548c\u7684\u8fd9\u4e00\u4f4d\u76f8\u7b49\uff0c\u5982\u679c\u8fdb\u4f4d\u7684\u8bdd\u5219\u4e0b\u4e00\u4f4d\u4e0d\u76f8\u7b49\uff0c\u53ef\u4ee5\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u3002\n\n\u90a3\u4e48\uff0c\u5047\u5982\u5df2\u7ecf\u6709\u4e24\u4e2a\u6570\u5728\u67d0\u4e00\u4f4d\u6709\u503c\u4e86\uff0c\u90a3\u4e48\u7b2c\u4e09\u4e2a\uff0c\u7b2c\u56db\u4e2a\uff0c\u4ee5\u53ca\u5176\u4ed6\u7684\u6570\u90fd\u662f\u6ca1\u7528\u7684\uff0c\u53ea\u4f1a\u4f7f\u5f97 $s_p$ \u53d8\u5927\u3002\n\n\u7136\u540e\u6211\u4eec\u73b0\u5728\u95ee\u9898\u8f6c\u5316\u6210\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u7136\u540e\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u6700\u5c0f\u7684\u4e24\u4e2a\u6570\u4f7f\u5f97\u4ed6\u4eec\u5728\u67d0\u4e00\u4f4d\u4e0a\u76f8\u7b49\u3002\n\n\u8fd9\u4e1c\u897f\u5728\u67d0\u4e00\u4f4d\u4e0a\u76f8\u7b49\u4e00\u770b\u5c31\u62c6\u4f4d\u6765\u505a\uff0c\u8fd9\u6837\u66f4\u597d\u505a\u3002\n\n\u6211\u4eec\u679a\u4e3e\u5f53\u524d\u662f\u7b2c\u51e0\u4f4d\uff0c\u7136\u540e\u5bf9\u4e8e\u8fd9\u4e00\u4f4d\u4e3a $0$ \u7684\u5c31\u4ea7\u751f\u4e0d\u4e86\u4efb\u4f55\u8d21\u732e\uff0c\u76f4\u63a5\u89c6\u4e3a\u6b63\u65e0\u7a77\uff0c\u5bf9\u4e8e\u5176\u4ed6\u7684\u5c31\u89c6\u4e3a\u4ed6\u7684\u6570\u503c\u3002\n\n\u4f1a\u53d1\u73b0\uff0c\u4e25\u683c\u6b21\u5c0f\u503c\u8fd9\u79cd\u4e1c\u897f\u662f\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\uff0c\u76f4\u63a5\u4e0a\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u6709\u70b9\u5c0f\u5361\u5e38\uff0c\u53bb\u6389 long long\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u5f00\u706b\u8f66\u5934\u5427\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define getchar()(p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read()\n{\n    char c=getchar();int x=0;bool f=0;\n    for(;!isdigit(c);c=getchar())f^=!(c^45);\n    for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+(c^48);\n    if(f)x=-x;return x;\n}\nusing namespace std;\nconst int INF=2e5+5;\nint n,m,ans[INF],a[INF],t[INF],l[INF],r[INF],X,Min,Min1;\nstruct _node_tree{\n\t#define ls(x) x<<1\n\t#define rs(x) x<<1|1\n\t#define ll tl[id]\n\t#define rr tr[id]\n\tint sum[INF<<2],tl[INF<<2],tr[INF<<2],sum1[INF<<2],g[11];\n\t// sum[id] sum1[id] \u8868\u793a\u6700\u5c0f\u503c\u548c\u4e25\u683c\u6b21\u5c0f\u503c \n\tvoid mer(int &a,int &b,int c,int d) {\n\t\tg[1]=a;g[2]=b;g[3]=c;g[4]=d;\n\t\tsort(g+1,g+1+4);\n\t\ta=g[1];b=g[2];\n\t}\n\tvoid push_up(int id) {\n\t\tsum[id]=sum1[id]=1e9;\n\t\tmer(sum[id],sum1[id],sum[ls(id)],sum1[ls(id)]);\n\t\tmer(sum[id],sum1[id],sum[rs(id)],sum1[rs(id)]);\n\t}\n\tvoid build(int l,int r,int id) {\n\t\tll=l;rr=r;sum[id]=sum1[id]=1e9;\n\t\tif (l==r) {\n\t\t\tsum[id]=sum1[id]=1e9;\n\t\t\tif (a[l]/X%10) sum[id]=a[l];\n\t\t\treturn ;\n\t\t}\n\t\tint Mid=(l+r)>>1;\n\t\tbuild(l,Mid,ls(id));\n\t\tbuild(Mid+1,r,rs(id));\n\t\tpush_up(id);\n\t}\n\tvoid add(int l,int x,int id) {\n\t\tif (ll==rr) {\n\t\t\tsum[id]=sum1[id]=1e9;\n\t\t\tif (x/X%10) sum[id]=x;\n\t\t\treturn ;\n\t\t}\n\t\tint Mid=(ll+rr)>>1;\n\t\tif (l<=Mid) add(l,x,ls(id));\n\t\telse add(l,x,rs(id));\n\t\tpush_up(id);\n\t}\n\tvoid query(int l,int r,int id) {\n\t\tif (l<=ll && rr<=r) {\n\t\t\tmer(Min,Min1,sum[id],sum1[id]);\n\t\t\treturn ;\n\t\t}\n\t\tint Mid=(ll+rr)>>1;\n\t\tif (l<=Mid) query(l,r,ls(id));\n\t\tif (Mid<r) query(l,r,rs(id));\n\t\treturn ;\n\t}\n}T1;\nvoid solve() {\n\tT1.build(1,n,1);\n\tfor (int i=1;i<=m;i++) {\n\t\tif (t[i]==1) T1.add(l[i],r[i],1);\n\t\telse {\n\t\t\tMin=Min1=1e9;\n\t\t\tT1.query(l[i],r[i],1);\n\t\t\tif (Min==1e9 || Min1==1e9) continue;\n\t\t\tint sum=Min+Min1;\n\t\t\tif (ans[i]==-1 || ans[i]>sum) ans[i]=sum;\n\t\t}\n\t}\n\treturn ;\n}\nsigned main()\n{\n\tmemset(ans,255,sizeof ans);\n\tn=read();m=read();\n\tfor (int i=1;i<=n;i++) a[i]=read();\n\tfor (int i=1;i<=m;i++)\n\t\tt[i]=read(),l[i]=read(),r[i]=read();\n\tfor (int T=1;T<=1e8;T*=10) X=T,solve();\n\t\n\tfor (int i=1;i<=m;i++)\n\t\tif (t[i]==2) cout<<ans[i]<<\"\\n\";\n\treturn 0;\n}\n```\n",
        "postTime": 1668911676,
        "uid": 208653,
        "name": "_edge_",
        "ccfLevel": 0,
        "title": "CF1217E"
    },
    {
        "content": "\u9996\u5148\u5f88\u81ea\u7136\u7684\u53ef\u4ee5\u60f3\u5230\uff0c\u5bf9\u4e8e\u6ee1\u8db3\u6761\u4ef6\u7684\u548c\u6700\u5c0f\u7684\u5b50\u5e8f\u5217\u6700\u4f18\u60c5\u51b5\u4e00\u5b9a\u53ea\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u3002 \n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ea\u9700\u8981\u5bf9\u4e8e $10$ \u8fdb\u5236\u4e2d\u7684\u6bcf\u4e00\u4f4d\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u51fa\u4e00\u6bb5\u533a\u95f4\u4e2d\u5f53\u524d\u8fd9\u4e00\u4f4d\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u5019\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4f4d\u90fd\u53bb\u67e5\u8be2\u4e00\u904d\u53d6min\uff0c\u7136\u540e\u5c06\u7ebf\u6bb5\u6811\u4e0a\u7684\u4f17\u591a\u533a\u95f4\u5408\u5e76\uff0c\u5c31\u5f97\u5230\u4e86\u7b54\u6848\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ls x << 1\n#define rs x << 1 | 1\nusing namespace std;\nconst int N = 2e5 + 10;\nconst int inf = 1e9;\nstruct tree {\n  int mn[N << 2][2];\n  \n  tree() {\n    for(int i = 0; i < N * 4; ++i)\n      mn[i][0] = mn[i][1] = inf;\n  }\n  \n  void upd(int x, int w) {\n    if(mn[x][0] > w) {\n      mn[x][1] = mn[x][0], mn[x][0] = w;\n    } else if(mn[x][1] > w) {\n      mn[x][1] = w;\n    }\n  }\n  \n  void up(int x) {\n    mn[x][0] = mn[x][1] = inf;\n    for(int i = 0; i < 2; ++i)\n      upd(x, mn[ls][i]), upd(x, mn[rs][i]);\n  }\n  \n  void insert(int x, int l, int r, int L, int w) {\n    if(l == r) {\n      mn[x][0] = w; mn[x][1] = inf;\n      return ;\n    }\n    int mid = (l + r) >> 1;\n    if(L <= mid) insert(ls, l, mid, L, w);\n    else insert(rs, mid + 1, r, L, w);\n    up(x);\n  }\n  \n  void get(int x, int l, int r, int L, int R) {\n    if(L <= l && r <= R) {\n     for(int i = 0; i < 2; ++i)\n      upd(0, mn[x][i]);\n     return ; \n    }\n    int mid = (l + r) >> 1;\n    if(L <= mid) get(ls, l, mid, L, R);\n    if(R > mid) get(rs, mid + 1, r, L, R);\n  }\n} tr[12];\n \nint nm[12], v[N];\nint n, m;\n \nvoid putin(int id, int x) {\n  nm[0] = 0;\n  for(; x; x /= 10) nm[++nm[0]] = x % 10;\n  for(int i = 1; i <= nm[0]; ++i) {\n    if(nm[i]) tr[i].insert(1, 1, n, id, v[id]);\n  }\n}\n \nvoid erase(int id, int x) {\n  nm[0] = 0;\n  for(; x; x /= 10) nm[++nm[0]] = x % 10;\n  for(int i = 1; i <= nm[0]; ++i) {\n    if(nm[i]) tr[i].insert(1, 1, n, id, inf);\n  }\n}\n \nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for(int i = 1; i <= n; ++i) {\n    scanf(\"%d\", &v[i]);\n    putin(i, v[i]);\n  }\n  for(int i = 1, x, y, z; i <= m; ++i) {\n    scanf(\"%d%d%d\", &x, &y, &z);\n    if(x == 1) {\n      erase(y, v[y]);\n      v[y] = z;\n      putin(y, v[y]);\n    } else {\n      int ans = 2e9;\n      for(int i = 1; i <= 10; ++i) {\n        tr[i].mn[0][0] = tr[i].mn[0][1] = inf;\n        tr[i].get(1, 1, n, y, z);\n        if(tr[i].mn[0][1] == inf) continue;\n        ans = min(ans, tr[i].mn[0][0] + tr[i].mn[0][1]);\n      }\n      if(ans == 2e9) puts(\"-1\");\n      else printf(\"%d\\n\", ans);\n    }\n  }\n  return 0;\n}\n```\n",
        "postTime": 1568533848,
        "uid": 26937,
        "name": "_soul_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1217E \u3010Sum Queries?\u3011"
    }
]