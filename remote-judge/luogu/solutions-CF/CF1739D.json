[
    {
        "content": "## \u9898\u76ee\u94fe\u63a5\nEducational Codeforces Round 136 (Rated for Div. 2), Problem D\n[1739D Reset K Edges](https://codeforces.com/problemset/problem/1739/D)\n\n## \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a\u4e00\u68f5\u6709\u6839\u6811\uff0c\u8282\u70b9\u6570\u4e3a $n$\uff0c\u7f16\u53f7 $1, 2, \\dots, n$\uff0c\u6839\u8282\u70b9\u7f16\u53f7\u4e3a $1$\u3002\u9898\u76ee\u4fdd\u8bc1 $i$ \u8282\u70b9\u7684\u7236\u8282\u70b9\u7f16\u53f7 $p_i<i$\u3002\n\u7ed9\u5b9a $k$ \u8f6e\u6811\u91cd\u6784\u64cd\u4f5c\uff0c\u6bcf\u8f6e\u64cd\u4f5c\u53ef\u9009\u62e9\u4e00\u8282\u70b9 $u$ \u65ad\u5f00\u4e0e\u7236\u8282\u70b9 $v$ \u8fde\u63a5\uff0c\u70b9\u5e76\u5c06 $u$ \u4e0e\u5176\u5b50\u6811\u4e00\u5e76\u8fde\u63a5\u5230\u6839\u8282\u70b9 $1$ \u4e0a\uff0c**\u5373\u5220\u8fb9 $(v,u)$\uff0c\u589e\u8fb9 $(1,u)$**\u3002\n\u6c42\u6700\u7ec8\u80fd\u83b7\u5f97\u6811\u7684\u6700\u5c0f\u9ad8\u5ea6\u503c\uff08\u6839\u8282\u70b9\u9ad8\u5ea6\u8bb0\u4e3a $0$\uff09\u3002\n\n---\n## \u89e3\u6cd5\n### *\u6700\u503c\u8fb9\u754c\u4e8c\u5206*\n\n> \u8f83\u4e3a\u5178\u578b\u7684\u6700\u5927\u503c\u6700\u5c0f\u5316\u95ee\u9898\uff0c\u53ea\u662f\u64cd\u4f5c\u5bf9\u8c61\u53d8\u4e3a\u4e86\u6811\u7684\u91cd\u6784\u3002\n\n\u7531\u4e8e\u7ea6\u675f\u8f83\u5c11\uff0c\u4f18\u5316\u65b9\u5411\u53d1\u6563\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6cd5\u5939\u903c\u6811\u91cd\u6784\u540e\u5408\u6cd5\u7684\u9ad8\u5ea6\u503c\uff0c\u6765\u83b7\u5f97\u6700\u5c0f\u9ad8\u5ea6\u503c\uff1a\n- \u5982\u6d4b\u8bd5\u9ad8\u5ea6 `mid` \u53ef\u901a\u8fc7 $k$ \u8f6e\u6811\u91cd\u6784\u64cd\u4f5c\u8fbe\u5230\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u9ad8\u5ea6 `ans` \u7b54\u6848\uff0c\u9ad8\u5ea6\u4e0a\u754c `biggestHight` \u6536\u7d27\uff1b\n- \u5982\u6d4b\u8bd5\u9ad8\u5ea6 `mid` \u4e0d\u80fd\u901a\u8fc7 $k$ \u8f6e\u6811\u91cd\u6784\u64cd\u4f5c\u8fbe\u5230\uff0c\u5219\u9ad8\u5ea6\u4e0b\u754c `smallestHight` \u6536\u7d27\u3002\n\n```cpp\nint smallestHight = 1, biggestHight = n-1;\nint mid;\nint ans = n-1;\n\nwhile (smallestHight <= biggestHight){\n    mid = (smallestHight + biggestHight) / 2;\n    if (check(mid) == true){\n        ans = mid;\n        biggestHight = mid - 1;\n    }\n    else{\n        smallestHight = mid + 1;\n    }\n}\n```\n\n> \u6b64\u8fc7\u7a0b\u82b1\u8d39\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\log_2n)$.\n\n### *\u6811\u7684\u641c\u7d22\u4e0e\u5408\u6cd5\u68c0\u9a8c*\n**\u81ea\u5e95\u800c\u4e0a\uff08\u4ece\u53f6\u81f3\u6839\uff09** \u641c\u7d22\u6574\u68f5\u6811\uff0c\u5e76\u5728\u8fc7\u7a0b\u4e2d\u7ef4\u62a4 $i$ \u53f7\u8282\u70b9\u7684\u5386\u7ecf\u7684\u6df1\u5ea6 `depth[i]`\uff0c\u5e76\u5b8c\u6210\u5bf9\u5e94\u91cd\u6784\uff0c\u7edf\u8ba1\u8fbe\u5230\u6d4b\u8bd5\u9ad8\u5ea6\u503c $h$ \u6240\u9700\u91cd\u6784\u64cd\u4f5c\u6570 `cnt`\uff0c\u5e76\u67e5\u9a8c\u6240\u9700\u64cd\u4f5c\u6570\u662f\u5426\u5408\u6cd5\uff1a\n- \u82e5\u5411\u4e0a\u7ef4\u62a4\u8fc7\u7a0b\u4e2d\uff0c\u8282\u70b9 $i$ \u7684\u7b2c $j$ \u4e2a\u5b50\u8282\u70b9 $v_j$ \u7d2f\u8ba1\u5386\u7ecf\u6df1\u5ea6\u8fbe\u5230\u6d4b\u8bd5\u9ad8\u5ea6\u503c $h$\uff0c\u5219\u64cd\u4f5c\u6570 `cnt` \u81ea\u52a0\u4e00\uff0c\u540e\u7eed\u64cd\u4f5c\u65e0\u9700\u8fdb\u884c\uff1b\n\n> \u4ee3\u8868\u5b50\u8282\u70b9 $v_j$ \u5df2\u65ad\u5f00\u4e0e $i$ \u53f7\u8282\u70b9\u7684\u8fde\u63a5\uff0c\u91cd\u65b0\u8fde\u63a5\u81f3 $1$ \u53f7\u6839\u8282\u70b9\uff0c\u540e\u7eed\u8282\u70b9 $v_j$ \u4e0d\u518d\u53c2\u4e0e\u5bf9\u7236\u8282\u70b9 $i$ \u7684\u5386\u7ecf\u6df1\u5ea6\u503c\u8d21\u732e\u3002\n\n- \u5426\u5219\u66f4\u65b0\u8282\u70b9 $i$ \u7684\u5386\u7ecf\u6df1\u5ea6\u503c\uff0c\u4e3a\u6240\u6709\u672a\u65ad\u5f00\u5b50\u8282\u70b9\u4e2d\u6700\u5927\u7684\u5386\u7ecf\u6df1\u5ea6\u503c\u52a0\u4e00\uff1b\n- \u5b8c\u6210\u641c\u7d22\u540e\uff0c\u82e5\u6240\u9700\u91cd\u6784\u64cd\u4f5c\u6570 `cnt` \u4e0d\u8d85\u8fc7\u9898\u76ee\u89c4\u5b9a\u8303\u56f4 `k`\uff0c\u5219\u6d4b\u8bd5\u9ad8\u5ea6\u503c `h` \u53ef\u8fbe\u3002\n\n```cpp\nbool check(int h){\n    for (int i = 1; i <= n; i ++){\n        depth[i] = 1;\n    }\n    int cnt = 0;\n    \n    for (int i = n; i >= 2; i --){\n        int s = a[i].son.size();\n        for (int j = 0; j < s; j ++){\n            int v = a[i].son[j];\n            if (depth[v] == h){\n                cnt ++;\n                continue;\n            }\n            depth[i] = max(depth[v]+1, depth[i]);\n        }\n    }\n    return cnt <= k;\n}\n```\n\n> \u7531\u4e8e\u9898\u76ee\u4fdd\u8bc1 $i$ \u8282\u70b9\u7684\u7236\u8282\u70b9\u7f16\u53f7 $p_i<i$\uff0c\u6240\u4ee5\u6839\u636e\u8282\u70b9\u7f16\u53f7\u4ece\u540e\u5f80\u524d\u626b\u63cf\u5373\u53ef\u5b8c\u6210\u6811\u7684\u904d\u5386\uff0c\u65e0\u9700\u9012\u5f52\u3002\u6b64\u8fc7\u7a0b\u7531\u4e8e\u6bcf\u4e2a\u8282\u70b9\u4ec5\u4f1a\u5411\u7236\u8282\u70b9\u8d21\u732e\u81f3\u591a\u4e00\u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$.\n\n---\n## \u4ee3\u7801\n### *\u6613\u9519\u70b9*\n**\u4e0d\u80fd\u81ea\u9876\u800c\u4e0b\uff08\u4ece\u6839\u81f3\u53f6\uff09** \u7ef4\u62a4\u6574\u68f5\u6811\uff0c\u5426\u5219\u6240\u9700\u64cd\u4f5c\u6570\u4e0d\u662f\u6700\u4f18\uff0c\u4e0b\u56fe\u7ed9\u51fa\u4e86\u4e00\u7ec4\u53cd\u4f8b\uff1a\n\n![\u6b64\u95ee\u9898\u4e2d\u81ea\u9876\u800c\u4e0b\u91cd\u6784\u6811\u4f1a\u4f7f\u5f97\u64cd\u4f5c\u6570\u589e\u591a](https://img-blog.csdnimg.cn/450a24afc5a84f24a4625e87189976b8.png#pic_center)\n\n\n```cpp\n/*\n    debug: from leaf to root V, from root to leaf X\n*/\n/*\nint cnt;\nbool check(int root, int h0, int h){\n    bool ok = true;\n    if (h0 > h){\n        cnt --;\n        h0 = 1;\n    }\n    if (cnt < 0){\n        return false;\n    }\n \n    int s = a[root].son.size();\n    for (int i = 0; i < s; i ++){\n        int v = a[root].son[i];\n        ok &= check(v, h0+1, h);\n        if (!ok){\n            return ok;\n        }\n    }\n    return ok;\n}\n*/\n```\n### *AC\u4ee3\u7801*\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 200000 + 10;\nstruct node {\n    vector<int> son;\n}   a[maxn];\nint n, k;\n\nvoid init(){\n    cin >> n >> k;\n    for (int i = 1; i <= n; i ++){\n        a[i].son.clear();\n    }\n    for (int i = 2; i <= n; i ++){\n        int x;\n        cin >> x;\n        a[x].son.push_back(i);\n    }\n}\n\nint depth[maxn];\nbool check(int h){\n    for (int i = 1; i <= n; i ++){\n        depth[i] = 1;\n    }\n    int cnt = 0;\n    \n    for (int i = n; i >= 2; i --){\n        int s = a[i].son.size();\n        for (int j = 0; j < s; j ++){\n            int v = a[i].son[j];\n            if (depth[v] == h){\n                cnt ++;\n                continue;\n            }\n            depth[i] = max(depth[v]+1, depth[i]);\n        }\n    }\n    \n    return cnt <= k;\n}\n\n\nint main()\n{\n    int tt;\n    cin >> tt;\n    while (tt --){\n        init();\n\n        int smallestHight = 1, biggestHight = n-1;\n        int mid;\n        int ans = n-1;\n\n        while (smallestHight <= biggestHight){\n            mid = (smallestHight + biggestHight) / 2;\n            // cnt = k;\n            // root, h0, h\n            // if(check(1, 0, mid)){\n\n            if (check(mid) == true){\n                ans = mid;\n                biggestHight = mid - 1;\n            }\n            else{\n                smallestHight = mid + 1;\n            }\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n\n> \u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log_2n)$.",
        "postTime": 1665992056,
        "uid": 745544,
        "name": "Sycamore_Ma",
        "ccfLevel": 0,
        "title": "CF1739D Reset K Edges\u3010\u6811\u91cd\u6784 + \u6700\u503c\u8fb9\u754c\u4e8c\u5206\u3011"
    },
    {
        "content": "### \u9898\u610f\u63cf\u8ff0\n\u7ed9\u5b9a\u4e00\u68f5\u5927\u5c0f\u4e3a $n$ \u7684\u6811\uff0c\u53ef\u4ee5\u8fdb\u884c $k$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u4ece\u6811\u5272\u4e0b\uff0c\u5e76\u63a5\u5230 $1$ \u53f7\u8282\u70b9\u4e0b\uff0c\u4f5c\u4e3a $1$ \u53f7\u8282\u70b9\u7684\u5b50\u6811\u3002\u95ee\u7ecf\u8fc7 $k$ \u6b21\u64cd\u4f5c\u540e\uff0c\u6240\u6709\u8282\u70b9\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u6700\u5c0f\u4e3a\u591a\u5c11\u3002\n### \u9898\u76ee\u5206\u6790\n\u770b\u5230\u6700\u5927\u503c\u6700\u5c0f\uff0c\u9a6c\u4e0a\u60f3\u5230\u4e8c\u5206\uff0c\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u5199 $check$ \u51fd\u6570\u3002\u5bf9\u4e8e\u5728\u6811\u4e0a\u4e8c\u5206\uff0c\u4e00\u822c\u6709\u4e24\u79cd\u5199\u6cd5\uff1a\u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\uff0c\u4ece\u53f6\u8282\u70b9\u5230\u6839\u8282\u70b9\u3002\u8fd9\u91cc\u5982\u679c\u4ece\u6839\u5230\u53f6\uff0c\u660e\u663e\u7b54\u6848\u4f1a\u589e\u52a0\u3002\n#### Hack \n```\n1 2\n2 3\n3 4\n4 5\n3 6\n6 7\n7 8\n7 9\n```\n\u5bf9\u4e8e\u8fd9\u68f5\u6811\uff0c\u8981\u4f7f\u5176\u6700\u5927\u6df1\u5ea6\u4e3a $2$,\u4ece\u6839\u5230\u53f6\u626b\u9700\u8981 $4$ \u6b21\u64cd\u4f5c\uff0c\u4ece\u53f6\u5f80\u6839\u626b\u53ea\u9700\u8981 $3$ \u6b21\u64cd\u4f5c\u3002\n\n\u6240\u4ee5\u6211\u4e8c\u5206\u51fa\u4e00\u4e2a\u7b54\u6848 $x$ \u540e\uff0c\u8003\u8651\u5982\u679c\u4ee5\u67d0\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u6df1\u5ea6\u5927\u4e8e\u7b49\u4e8e $x$\uff0c\u4e14\u8be5\u8282\u70b9\u4e0d\u4e3a $1$ \u53f7\u70b9\u5b50\u8282\u70b9\uff08\u5272\u4e86\u548c\u6ca1\u5272\u4e00\u4e2a\u6837\uff09\uff0c\u5219\u628a\u8fd9\u68f5\u5b50\u6811\u5272\u4e0b\u6765\u3002\n### Code\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nint read(){\n    int s=0,f=1;\n    char ch=getchar();\n    while(ch>'9'||ch<'0'){\n        if(ch=='-'){\n            f=-1;\n        }\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        s=s*10+(ch-'0');\n        ch=getchar();\n    }\n    return s*f;\n}\nint n,dep[200100],k,mx,ans,fa[200100];\nvector<vector<int> >e;\nvoid dfs(int x) {\n    dep[x]=1;\n    for(auto y:e[x]){\n        dfs(y);\n        dep[x]=max(dep[x],dep[y]+1);\n    }\n    if(x!= 1&&fa[x]!=1&&dep[x]==mx){\n        dep[x]=0;\n        ++ans;\n    }\n}\nbool check(int mid) {\n  ans=0;\n  mx=mid;\n  dfs(1);\n  return ans<=k;\n}\nvoid solve(){\n    n=read(),k=read();\n    e.clear();\n    e.resize(n+10);\n    for(int i=1;i<=n;i++){\n        e[i].clear();\n    }\n    for(int i=2;i<=n;i++){\n        fa[i]=read();\n        e[fa[i]].push_back(i);\n    }\n    int l=1,r=n-1,ans=0;\n    while(l<=r){\n        int mid=(l+r)>>1;\n        if(check(mid)){\n            ans=mid;\n            r=mid-1;\n        }\n        else{\n            l=mid+1;\n        }\n    }\n    printf(\"%lld\\n\",ans);\n}\nsigned main(){\n    // freopen(\"1.out\",\"w\",stdout);\n    int t;\n    t=read();\n    while(t--){\n        solve();\n    }\n    return 0;\n}\n```",
        "postTime": 1665849240,
        "uid": 131610,
        "name": "luo_shen",
        "ccfLevel": 7,
        "title": "CF1739D\u9898\u89e3"
    },
    {
        "content": "\n\u770b\u5b8c\u9898\u76ee\uff0c\u5f88\u663e\u7136\u6709\u4e2a\u5355\u8c03\u6027\u3002\u5f53\u6df1\u5ea6\u8d8a\u5927\u65f6\uff0c\u8d8a\u96be\u4ee5\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u6240\u4ee5\u4e8c\u5206\u4e00\u4e2a\u6700\u5c0f\u7b54\u6848\u3002\n\n\u73b0\u5728\u5df2\u7ecf\u786e\u5b9a\u4e86\u6700\u540e\u7684\u6df1\u5ea6\uff0c\u63a5\u4e0b\u6765\u96be\u70b9\u5c31\u5728 `check` \u51fd\u6570\u3002\n\n\u5bf9\u4e8e\u5f53\u524d\u6df1\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u4ee3\u4ef7 $res$ \u3002\n\n\u73b0\u5728\u8981\u60f3\u8ba9\u4ee3\u4ef7\u6700\u5c0f\uff0c\u90a3\u5c31\u8981\u60f3\u4e00\u4e2a\u8d2a\u5fc3\u7b56\u7565\u3002\n\n\u5177\u8c61\u5316\u4e00\u4e9b\uff0c\u9898\u76ee\u8bf4\u5c06\u4e00\u4e2a\u70b9\u7684\u7236\u4eb2\u53d8\u4e3a\u6839\u8282\u70b9\uff0c\u5176\u5b9e\u53ef\u4ee5\u60f3\u8c61\u4e3a\u65ad\u5f00\u4e86\u5f53\u524d\u70b9\u8fde\u7236\u4eb2\u7684\u8fb9\u3002\u90a3\u4e48\u73b0\u5728\u7684\u76ee\u7684\u5c31\u662f\u6c42\u8bbe\u8ba1\u7684\u6700\u5c0f\u7684\u65ad\u70b9\u6570\u91cf\u3002\n\n## \u5b9e\u73b0\u65b9\u6cd5 1\n\n\u8003\u8651\u53f6\u5b50\u8282\u70b9\u4e00\u5b9a\u4f1a\u5728\u5176\u4e0a\u65b9\u7b2c $x$ \u4e2a\u70b9\u7684\u8fde\u7236\u4eb2\u8fb9\u8bbe\u8ba1\u4e00\u4e2a\u65ad\u70b9\uff0c\u800c\u4e2d\u95f4\u6240\u7ecf\u8fc7\u7684\u70b9\u90fd\u6ee1\u8db3\u4e86\u6761\u4ef6\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u4ee5\u6253\u4e00\u4e2a\u6807\u8bb0\u3002\n\n\u66f4\u52a0\u666e\u904d\u5316\u4e00\u4e9b\uff0c\u6df1\u5ea6\u66f4\u6d45\u7684\u70b9\u5148\u66f4\u65b0\uff0c\u7136\u540e\u662f\u6df1\u5ea6\u6df1\u7684\uff0c\u90a3\u4e48\u6df1\u5ea6\u6df1\u7684\u70b9\u5c31\u53ef\u80fd\u5728\u66f4\u65b0\u65f6\u53d7\u5230\u4e0d\u5fc5\u8981\u7684\u7684\u5f71\u54cd\u3002\u6240\u4ee5\u80af\u5b9a\u6df1\u5ea6\u6df1\u7684\u4f18\u5148\u66f4\u65b0\u3002\u6392\u5e8f\u5373\u53ef\u3002\n\n\u6700\u540e\u4e00\u4e2a\u4e2a\u5411\u4e0a\u66f4\u65b0\u5373\u53ef\uff0c\u5c06\u4e0a\u65b9 $x$ \u4e2a\u70b9\u66f4\u65b0\uff0c\u5982\u679c\u78b0\u5230\u5df2\u7ecf\u6709\u66f4\u65b0\u7684\u4e86\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e00\u6bb5\u90fd\u4e0d\u9700\u8981\u5207\u4e86\uff0c\u90fd\u5df2\u7ecf\u6ee1\u8db3\u4e86\u6761\u4ef6\u3002\n\n\u6ce8\u610f\uff0c\u6df1\u5ea6\u672c\u8eab\u5c0f\u4e8e\u7b49\u4e8e $res$ \u7684\u70b9\u4e0d\u9700\u8981\u7ba1\uff0c\u56e0\u4e3a\u672c\u8eab\u5c31\u6ee1\u8db3\u6761\u4ef6\uff0c\u800c\u9898\u76ee\u7ed9\u7684\u6837\u4f8b\u544a\u8bc9\u6211\u4eec\uff0c\u6839\u8282\u70b9 $1$ \u7684\u6df1\u5ea6\u5176\u5b9e\u662f $0$ \uff0c\u6240\u4ee5\u521d\u59cb\u5316\u7684\u65f6\u5019\u5343\u4e07\u4e0d\u8981\u628a $1$ \u7684\u6df1\u5ea6\u8bbe\u4e3a $1$\n\n## code\n\n```cpp\n#include<bits/stdc++.h>\n#define printlf(x) print(x),putchar('\\n')\n#define printsp(x) print(x),putchar(' ')\nusing namespace std;\ninline int read(){\n    int x=0;\n    bool w=0;\n    char c=getchar();\n    while(!isdigit(c))  w|=c=='-',c=getchar();\n    while(isdigit(c))   x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    return w?-x:x;\n}\ninline void print(int x){\n    if(x<0) x=-x,putchar('-');\n    if(x>9) print(x/10);\n    putchar('0'+x%10);\n}\nconst int N=2e5+5;\nstruct edge{\n    int to,nxt;\n}Edge[N<<1];\nstruct node{\n    int num,dep;\n}p[N];\ninline bool cmp(node a,node b){\n    return a.dep>b.dep;\n}\nint head[N],vis[N],fa[N],deg[N];\nint n,k,tot;\ninline void add(int u,int v){\n    Edge[++tot].to=v;\n    Edge[tot].nxt=head[u];\n    head[u]=tot;\n}\ninline void dfs(int x,int fa){\n    p[x].dep=p[fa].dep+1;\n    for(register int i=head[x];i;i=Edge[i].nxt){\n        int v=Edge[i].to;\n        if(v==fa)   continue;\n        dfs(v,x);\n    }\n}\ninline bool check(int x){\n    memset(vis,0,sizeof(vis));\n    int res=0;\n    for(register int i=2;i<=n;++i){\n        int s=p[i].num;\n        if(p[i].dep<=x) continue;\n        ++res;\n        int now=s;\n        for(register int i=1;i<=x;++i){\n            if(vis[now]){\n                --res;\n                break;\n            }\n            vis[now]=1;\n            now=fa[now];\n        }\n    }\n    return res<=k;\n}\ninline int Solve(){\n    n=read(),k=read();\n    tot=0;\n    memset(deg,0,sizeof(deg));\n    memset(head,0,sizeof(head));\n    for(register int i=2;i<=n;++i){\n        fa[i]=read(),p[i].num=i;\n        add(fa[i],i),add(i,fa[i]);\n        deg[fa[i]]++,deg[i]++;\n    }\n    p[0].dep=-1;\n    dfs(1,0);\n    sort(p+2,p+n+1,cmp);\n    int l=1,r=n,ans=0;\n    while(l<=r){\n        int mid=l+r>>1;\n        //cout<<l<<' '<<r<<' '<<mid<<\" lrmid\\n\";\n        if(check(mid))  r=mid-1,ans=mid;\n        else    l=mid+1;\n    }\n    return ans;\n}\nsigned main(){\n    int T=read();\n    while(T--){\n        printlf(Solve());\n    }\n    return 0;\n}\n\n```\n\n## \u5b9e\u73b0\u65b9\u6cd5 2\n\n\u8fd9\u4e2a\u8fd8\u6ca1\u6709\u5199\uff0c\u739b\u4e3d\u592a\u5dee\uff0c\u4f46\u8fd8\u662f\u53ef\u4ee5\u8bb2\u4e00\u4e0b\u3002\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u6761\u5355\u94fe\uff0c\u5176\u5272\u65ad\u65b9\u6cd5\u4e00\u5b9a\u662f\u56fa\u5b9a\u7684\uff0c\u4e00\u4e2a\u4e2a\u6765\u5373\u53ef\uff0c\u76f4\u5230\u5269\u4e0b\u7684\u4e0d\u80fd\u5355\u72ec\u5272\u51fa\u6765\u4e3a\u6b62\uff08\u5272\u5230\u4e86\u4e0d\u662f\u5355\u94fe\u4e0a\u7684\u70b9\uff0c\u5ea6\u6570\u4e0d\u4e3a $2$\uff09\u3002\n\n\u5269\u4e0b\u7684\u90a3\u4e9b\u70b9\u7684\u6570\u91cf\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u8d21\u732e\u4f20\u9012\u7ed9\u4ea4\u70b9 \uff08\u5ea6\u6570\u4e0d\u4e3a $2$ \u7684\uff09\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e9b\u5927\u5c0f\u4e0d\u540c\u4e14\u90fd\u4e0d\u8d85\u8fc7\u6df1\u5ea6 $x$ \u7684\u8d21\u732e\uff0c\u53d6\u4e00\u4e2a\u6700\u5927\u503c $maxx$ \u540e\uff0c\u5728\u4ea4\u70b9\u7684\u4e0a\u65b9 $x-maxx$ \u5904\u53c8\u53ef\u4ee5\u5272\u4e00\u6b21\uff0c\u5269\u4e0b\u7684\u8d21\u732e\u53c8\u4f20\u9012\u7ed9\u6df1\u5ea6\u66f4\u6d45\u7684\u4e0a\u4e00\u4e2a\u4ea4\u70b9\uff0c\u5982\u6b64\u5f80\u590d\uff0c\u6700\u540e\u5f97\u5230\u7b54\u6848\u3002\n\n\u6ce8\u610f\u7684\u4e1c\u897f\u540c\u4e0a\u3002\n\n",
        "postTime": 1666501949,
        "uid": 199459,
        "name": "Masna_Kimoyo",
        "ccfLevel": 0,
        "title": "CF1739D Reset K Edges \u9898\u89e3"
    }
]