[
    {
        "content": "## \u9898\u610f\n\n\u76f4\u7ebf\u4e0a\u6709 $n$ \u4e2a\u7ebf\u6bb5 $[L_i, R_i ]$\uff0c\u4fdd\u8bc1\u4e24\u4e2a\u7ebf\u6bb5\u8981\u4e48\u4e00\u4e2a\u5305\u542b\u53e6\u4e00\u4e2a\uff0c\u8981\u4e48\u4e0d\u4ea4\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5\uff0c\u9009\u62e9\u5b83\u7684\u4e00\u4e2a\u5b50\u6bb5 $[l_i, r_i ]$\uff08$l_i<r_i$\uff09\uff0c\u4f7f\u5f97\u6240\u6709\u7ebf\u6bb5\u7684\u5b50\u6bb5\u4e0d\u76f8\u4ea4\uff08\u4f46\u662f\u53ef\u4ee5\u62e5\u6709\u76f8\u540c\u7684\u7aef\u70b9\uff09\uff0c\u4e14\u6240\u6709\u5b50\u6bb5\u7684\u957f\u5ea6\u4e4b\u548c\u6700\u5927\u3002\n\n\u6570\u636e\u8303\u56f4 $n\u22642\\times 10^3$\uff0c$L_i < R_i \\le 10^9$\u3002\n\n## \u601d\u8def\n\n\u9996\u5148\uff0c\u6839\u636e\u9898\u76ee\u4e2d\u201c\u4e24\u4e2a\u7ebf\u6bb5\u8981\u4e48\u4e00\u4e2a\u5305\u542b\u53e6\u4e00\u4e2a\uff0c\u8981\u4e48\u4e0d\u4ea4\u201d\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u7ebf\u6bb5\u6309\u7167\u5305\u542b\u5173\u7cfb\u5efa\u51fa\u4e00\u4e2a\u68ee\u6797\uff0c\u5176\u4e2d\u6bcf\u68f5\u6811\u4e0a\u6bcf\u4e00\u4e2a\u7236\u4eb2\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u90fd\u5305\u542b\u5b83\u7684\u6240\u6709\u5b50\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u3002\u4e0b\u9762\u8003\u8651\u600e\u6837\u6c42\u51fa\u6240\u6709\u5b50\u6bb5\u6700\u5927\u7684\u957f\u5ea6\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6bb5\uff0c\u8fd9\u4e2a\u7ebf\u6bb5\u4f1a\u88ab\u5b83\u7684 $m$ \u4e2a\u513f\u5b50\u62c6\u5206\u6210 $m+1$ \u6bb5\uff0c\u5219\u5f53\u524d\u7ebf\u6bb5\u9009\u62e9\u7684\u5b50\u533a\u95f4\u8981\u4e48\u662f\u8fd9 $m+1$ \u6bb5\u4e2d\u7684\u4e00\u6bb5\u5411\u5de6\u5411\u53f3\u5ef6\u4f38\uff0c\u8981\u4e48\u662f\u5b8c\u5168\u5728\u67d0\u4e2a\u513f\u5b50\u5185\u90e8\u3002\u5bf9\u4e8e\u540e\u9762\u4e00\u79cd\u60c5\u51b5\uff0c\u76f4\u63a5\u5c06\u5f53\u524d\u8282\u70b9\u7684\u5b50\u6bb5\u4f20\u5230\u67d0\u4e2a\u513f\u5b50\u5373\u53ef\uff0c\u5bf9\u4e8e\u524d\u4e00\u79cd\u60c5\u51b5\uff0c\u9700\u8981\u5148\u9009\u62e9\u8fd9 $m+1$ \u6bb5\u4e2d\u7684\u4e00\u6bb5\uff0c\u7136\u540e\u5c1d\u8bd5\u4e0e\u524d\u4e00\u4e2a\u513f\u5b50\u7684\u540e\u7f00\u548c\u540e\u4e00\u4e2a\u513f\u5b50\u7684\u524d\u7f00\u505a\u5408\u5e76\u3002\n\n\u8003\u8651 dp\uff0c\u8bbe $f(u,k,p\u2208\\{0,1\\},s\u2208\\{0,1\\})$  \u8868\u793a\u8003\u8651\u5230\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5f53\u524d\u8282\u70b9\u7684\u7956\u5148\u4f20\u4e0b\u6765 $k$ \u4e2a\u5b50\u6bb5\uff0c\u5f53\u524d\u8282\u70b9\u7684\u524d\u7f00\u662f\u5426\u8981\u548c\u524d\u9762\u5408\u5e76\uff0c\u5f53\u524d\u8282\u70b9\u7684\u540e\u7f00\u662f\u5426\u8981\u548c\u540e\u9762\u5408\u5e76\uff0c\u521d\u59cb\u72b6\u6001\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u53f6\u5b50 $u$\uff0c$f(u,0, 0, 0)=r_u-l_u$\uff08\u6700\u540e\u4e24\u4e2a\u7ef4\u5ea6\u662f $0$ \u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u7ef4\u5ea6\u8bbe\u4e3a $1$\uff0c\u8fd9\u4e00\u6bb5\u5c31\u6709\u53ef\u80fd\u5b8c\u5168\u88ab\u5b83\u7684\u7236\u4eb2\u4e0a\u9762\u7684\u67d0\u4e00\u4e2a\u5b50\u6bb5\u5305\u542b\uff0c\u4ece\u800c\u4e0d\u7b26\u5408\u9898\u76ee\u4e2d\u201c\u6bcf\u4e2a\u5b50\u6bb5\u975e\u7a7a\u201d\u7684\u8981\u6c42\uff09\u3002\n\n\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4f7f\u7528\u4e00\u4e2a dp \u5408\u5e76\u5f53\u524d\u70b9\u7684\u6240\u6709\u513f\u5b50\uff1a\u8bbe $g(i,k,p\u2208\\{0,1\\},s\u2208\\{0,1\\})$ \u8868\u793a\u8003\u8651\u5230\u7b2c $i$ \u4e2a\u513f\u5b50\uff0c\u524d $i$ \u4e2a\u513f\u5b50\u5171\u4f20\u4e0b\u53bb $k$ \u4e2a\u5b50\u6bb5\uff0c\u5f53\u524d\u8282\u70b9\u7684\u524d\u7f00\u662f\u5426\u8981\u548c\u524d\u9762\u5408\u5e76\uff0c\u7b2c $i$ \u4e2a\u513f\u5b50\u7684\u540e\u7f00\u662f\u5426\u8981\u548c\u540e\u9762\u5408\u5e76\uff0c\u521d\u59cb\u72b6\u6001\u4e3a $g(0, 0, 0, 0)=0$\u3002\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u513f\u5b50 $v_i$\uff0c\u679a\u4e3e\u5f53\u524d\u70b9\u5f80\u8fd9\u4e2a\u513f\u5b50\u4f20\u4e0b\u53bb\u591a\u5c11\u4e2a\u5b50\u6bb5\uff0c\u4e14\u8fd9\u4e2a\u513f\u5b50\u5de6\u8fb9\u7684\u6bb5\u662f\u5426\u4e0e\u8fd9\u4e2a\u513f\u5b50\u7684\u524d\u7f00\u5408\u5e76\uff0c\u53f3\u8fb9\u7684\u6bb5\u662f\u5426\u4e0e\u8fd9\u4e2a\u513f\u5b50\u7684\u540e\u7f00\u5408\u5e76\uff0c\u540c\u65f6\u679a\u4e3e\u8fd9\u4e2a\u513f\u5b50\u5de6\u8fb9\u7684\u6bb5\u662f\u5426\u88ab\u5b50\u6bb5\u8986\u76d6\uff0c\u8f6c\u79fb\u65b9\u5f0f\u5982\u4e0b\uff1a\n\n$$\ng(i,k,p,s) := \\max\\left(\ng(i,k,p,s), \\max_{p_1,s_1 \\in \\{0,1\\}}\\max_{k_1=0}^k(f(v_i, k_1, p, s_1)+g(i-1, k-k_1, p_1, s))\n\\right)\n$$\n$$\ng(i,k,p,s) := \\max\\left(\ng(i,k,p,s), \\max_{p_1,s_1 \\in \\{0,1\\}}\\max_{k_1=0}^{k-p_1+s_1-1}(f(v_i, k_1, p, s_1)+g(i-1, k-k_1+p_1+s_1-1, p_1, s))\n\\right)\n$$\n\n\u5176\u4e2d\u7b2c\u4e00\u4e2a\u8f6c\u79fb\u8868\u793a\u5f53\u524d\u513f\u5b50\u7684\u5de6\u8fb9\u4e00\u6bb5\u4e0d\u88ab\u9009\u62e9\u7684\u60c5\u51b5\uff0c\u7b2c\u4e8c\u4e2a\u8f6c\u79fb\u8868\u793a\u5f53\u524d\u513f\u5b50\u7684\u5de6\u8fb9\u4e00\u6bb5\u88ab\u9009\u62e9\u7684\u60c5\u51b5\uff08\u5982\u679c $i=1$ \u5219\u6700\u540e\u7684 $r_{v_{i-1}}$ \u8981\u6362\u6210 $l_u$\uff09\u3002\u63a5\u4e0b\u6765\uff0c\u8fd8\u9700\u8981\u8003\u8651\u6700\u540e\u4e00\u4e2a\u513f\u5b50\u53f3\u8fb9\u7684\u6bb5\uff0c\u540c\u6837\u4e5f\u662f\u4e24\u4e2a\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$g(m+1,k,p,0):=\\max\\left(g(m+1,k,p,0),\\max_{s_1\u2208\\{0,1\\}}g(m,k,p,s_1)\\right)\n$$\n\n$$\ng(m+1,k,p, 1):=\\max\\left(g(m+1,k,p, 1),\\max_{s_1\u2208{0,1}}(g(m, k-1+s_1,p,s_1)+(r_u-r_{v_m} )) \\right)\n$$\n\n\u6700\u540e\uff0c\u9700\u8981\u66f4\u65b0 $f$ \u7684\u503c\u3002\u9996\u5148\uff0c$f(u,k,p,s)$ \u53ef\u4ee5\u76f4\u63a5\u4ece $g(m+1,k+1,p,s)$ \u8f6c\u79fb\u800c\u6765\uff08\u4e4b\u6240\u4ee5\u8fd9\u91cc\u52a0 $1$\uff0c\u662f\u56e0\u4e3a\u5f53\u524d\u8282\u70b9\u5f80\u4e0b\u4f20\u7684\u5b50\u6bb5\u4e2d\u6709\u4e00\u6bb5\u662f\u5f53\u524d\u8282\u70b9\u8d21\u732e\u7684\uff0c\u6839\u636e\u5b9a\u4e49\uff0c\u8fd9\u4e00\u6bb5\u9700\u8981\u53bb\u6389\uff09\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e\u6240\u6709\u7684 $p_1\u2264p, s_1\u2264s$\uff0c\u90fd\u4e00\u5b9a\u6709 $f(u,k,p_1,s_1 )\u2265f(u,k,p,s)$\uff08\u56e0\u4e3a\u524d\u8005\u9650\u5236\u66f4\u5bbd\u677e\uff0c\u6240\u4ee5\u7b54\u6848\u4e00\u5b9a\u66f4\u5927\uff09\uff0c\u6240\u4ee5\u9700\u8981\u505a\u4e00\u6b21 $f(u,k,p_1,s_1 )  :=\\max(f(u,k,p_1,s_1 ),f(u,k,p,s))$ \u7684\u8f6c\u79fb\u3002\u4e3a\u4e86\u9632\u6b62\u5f53\u524d\u8fd9\u4e00\u6bb5\u88ab\u4e0a\u9762\u7684\u6bb5\u5b8c\u5168\u8986\u76d6\uff0c\u9700\u8981\u5c06 $f(u,0, 0, 1)$\u3001$f(u, 0, 1, 0)$\u3001$f(u, 0, 1, 1)$\u3001$f(u,1, 1, 1)$ \u8fd9\u56db\u4e2a\u72b6\u6001\u8bbe\u4e3a\u4e0d\u5408\u6cd5\u72b6\u6001\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7b97\u51fa\u6700\u5927\u7684\u957f\u5ea6\u4e4b\u548c\u4e86\u3002\u4f46\u662f\uff0c\u8fd9\u9898\u6709\u4e00\u4e2a\u5f88\u6076\u5fc3\u7684\u5730\u65b9\uff0c\u5c31\u662f\u8981\u8f93\u51fa\u65b9\u6848\u3002\n\n\u8003\u8651\u5728 dp \u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u8def\u5f84\uff0c\u7531\u4e8e\u73b0\u5728\u7684 dp \u72b6\u6001\u90fd\u662f\u7531\u4e24\u4e2a dp \u72b6\u6001\u5408\u5e76\u5f97\u5230\uff0c\u6240\u4ee5\u8f6c\u79fb\u7684\u8def\u5f84\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u539f\u6811\u4e0a\u7684\u4e00\u4e2a\u70b9\u4e0e\u8fd9\u4e2a\u70b9\u7684\u513f\u5b50\u7f16\u53f7\u7ec4\u6210\u7684\u4e8c\u5143\u7ec4 $(u,i)$\uff0c\u5176\u5de6\u513f\u5b50\u4e3a $(u,i\u22121)$\uff0c\u53f3\u513f\u5b50\u4e3a $(v_i, m+1)$\uff08\u5176\u4e2d $m$ \u4e3a $v_i$ \u7684\u513f\u5b50\u6570\u91cf\uff09\u3002\u5728\u5b58\u50a8\u8def\u5f84\u7684\u65f6\u5019\uff0c\u9700\u8981\u5b58\u50a8\u4ee5\u4e0b\u51e0\u4e2a\u503c\uff1a\n\n+ \u5f53\u524d\u72b6\u6001\u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\uff1b\n+ \u5f53\u524d\u72b6\u6001\u8f6c\u79fb\u65f6\u7684 $p_1$ \u548c $s_1$ \u7684\u503c\uff1b\n+ \u5f53\u524d\u72b6\u6001\u8f6c\u79fb\u7684\u6a21\u5f0f\uff08\u4e0d\u8986\u76d6\u8be5\u513f\u5b50\u7684\u5de6\u8fb9\u6bb5\u3001\u8986\u76d6\u8be5\u513f\u5b50\u7684\u5de6\u8fb9\u6bb5\u3001\u4ece $f(u,k,p,s)$ \u5230 $f(u,k,p_1,s_1 )$ \u7684\u8f6c\u79fb\uff0c\u5206\u522b\u7f16\u53f7\u4e3a $0, 1, 2$\uff09\u3002\n\n\u4e3a\u4e86\u5b58\u50a8\u65b9\u4fbf\uff0c\u6211\u4eec\u9700\u8981\u628a\u6240\u6709\u7684\u72b6\u6001\u7f16\u4e2a\u53f7\uff0c\u5c06\u72b6\u6001\u672c\u8eab\u5b58\u50a8\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff08\u8fd9\u6837\u5b58\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u7684\u65f6\u5019\u5c31\u53ea\u9700\u8981\u5b58\u4e24\u4e2a\u7f16\u53f7\u5c31\u884c\u4e86\uff09\u3002\u7ecf\u8ba1\u7b97\uff0c\u72b6\u6001\u7684\u6570\u91cf\u5927\u6982\u80fd\u8fbe\u5230 2.5e7 \u5de6\u53f3\uff0c\u800c\u6bcf\u4e2a\u72b6\u6001\u9700\u8981\u5b58\u4e24\u4e2a int \u548c\u4e09\u4e2a char\uff0c\u5171 11 \u5b57\u8282\uff08struct \u672c\u8eab\u53ef\u80fd\u8fd8\u6709\u7a7a\u95f4\u5e38\u6570\uff09\uff0c\u6240\u4ee5\u603b\u5171\u5360\u7528\u7684\u7a7a\u95f4\u5927\u6982\u4f1a\u8fbe\u5230 300MB \u5de6\u53f3\uff0c\u518d\u52a0\u4e0a dp \u6570\u7ec4\uff0c\u603b\u5171\u7684\u7a7a\u95f4\u53ef\u4ee5\u8fbe\u5230 440MB \u5de6\u53f3\uff0c\u6240\u4ee5\u72b6\u6001\u6700\u597d\u4e0d\u8981\u7528 vector \u5b58\uff0c\u7528\u6570\u7ec4\u5b58\uff0c\u56e0\u4e3a vector \u91cc\u9762\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u5bb9\u5668\u6ee1\u4e86\u4e4b\u540e vector \u5c31\u4f1a\u518d\u5206\u914d\u4e00\u4e2a\u4e24\u500d\u7a7a\u95f4\u7684\u5bb9\u5668\uff0c\u5c06\u539f\u5148\u5bb9\u5668\u4e2d\u7684\u5185\u5bb9\u79fb\u52a8\u8fc7\u53bb\uff0c\u6240\u4ee5\u77ac\u95f4\u7a7a\u95f4\u5e38\u6570\u6700\u591a\u53ef\u4ee5\u8fbe\u5230 3 \u500d\uff0c\u5e73\u5747\u7a7a\u95f4\u5e38\u6570\u53ef\u4ee5\u8fbe\u5230 2 \u500d\uff0c\u6709 MLE \u7684\u98ce\u9669\uff0c\u540c\u65f6\uff0c\u5f00\u7a7a\u95f4\u518d\u79fb\u52a8\u5185\u5bb9\u7684\u884c\u4e3a\u8fd8\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4 TLE\u3002\n\n\u8fdb\u884c\u5b8c dp \u4e4b\u540e\uff0c\u53ea\u9700\u8981\u5c06\u6240\u6709\u7684\u72b6\u6001\u8f6c\u79fb\u518d\u8d70\u4e00\u904d\uff0c\u5bf9\u4e8e\u6240\u6709\u6a21\u5f0f\u4e3a $1$ \u7684\u6bb5\uff0c\u8bbe\u8fd9\u4e00\u6bb5\u8868\u793a\u7684\u662f $(u,i)$\uff0c\u5219\u5c06 $[r_{v_{i-1} }, l_{v_i} ]$\uff08\u5982\u679c $i=0$ \u6216 $i=m+1$\uff0c\u9700\u8981\u5c06 $r_{v_{i-1}}$ \u6216 $l_{v_i}$ \u6362\u6210 $l_u$ \u6216 $r_u$\uff09\u52a0\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u540c\u65f6\u6839\u636e\u8bb0\u5f55\u7684\u8f6c\u79fb\u65f6 $p_1$ \u548c $s_1$ \u7684\u503c\uff0c\u5224\u65ad\u51fa\u8fd9\u4e00\u6bb5\u662f\u5426\u9700\u8981\u4e0e\u4e0a\u4e00\u6bb5\u6216\u4e0b\u4e00\u6bb5\u5408\u5e76\uff0c\u5982\u679c\u9700\u8981\uff0c\u5219\u5c06\u5b83\u4eec\u5408\u5e76\u8d77\u6765\u3002\u6700\u540e\uff0c\u4ece\u4e0b\u5f80\u4e0a\u4f9d\u6b21\u5c06\u8fd9\u4e9b\u533a\u95f4\u5206\u914d\u7ed9\u6bcf\u4e00\u4e2a\u7ebf\u6bb5\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\mathcal O(n^2 )$\uff0c\u5e38\u6570\u8f83\u5927\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define SZ(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define loop(i, a) for (int i = 0; i < (a); ++i)\n#define cont(i, a) for (int i = 1; i <= (a); ++i)\n#define circ(i, a, b) for (int i = (a); i <= (b); ++i)\n#define range(i, a, b, c) for (int i = (a); (c) > 0 ? i <= (b) : i >= (b); i += (c))\n#define parse(it, x) for (auto &it : (x))\n#define pub push_back\n#define pob pop_back\n#define emb emplace_back\n#define mak make_pair\n#define mkt make_tuple\ntypedef long long ll;\ntypedef long double lf;\nconst int Inf = 0x3f3f3f3f;\nconst ll INF = 0x3f3f3f3f3f3f3f3fll;\n \nstruct Segment {\n    int l, r, id;\n    Segment(int l = -Inf, int r = Inf, int id = 0) : l(l), r(r), id(id) { }\n    bool operator < (const Segment &s) const {\n        return mak(l, r) < mak(s.l, s.r);\n    }\n};\n \nstruct State {\n    bool p, s;\n    char mode;\n    int f1, f2;\n    State() : f1(-1), f2(-1) { }\n    State(bool p, bool s, char mode, int f1 = -1, int f2 = -1) : p(p), s(s), mode(mode), f1(f1), f2(f2) { }\n};\n \nbool inline upd(int &a, int b) {\n    if (a < b) return (a = b), 1;\n    else return 0;\n}\n \nState ss[27000000];\nint sis;\n \nvoid inline getsid(int &id, const State &s) {\n    assert(s.f1);\n    if (!~id) ss[id = ++sis] = s;\n    else ss[id] = s;\n    assert(ss[id].f1);\n}\n \nint l[2005], r[2005];\nint dp[2005][2005][2][2], tmp[2][4005][2][2];\nint fr[2005][2005][2][2], tfr[2][4005][2][2];\nint n;\nvector<Segment> seg;\nvector<int> nei[2005];\nint siz[2005];\n \nvoid dfs(int now) {\n    if (!SZ(nei[now])) {\n        siz[now] = 1;\n        dp[now][0][0][0] = r[now] - l[now];\n        getsid(fr[now][0][0][0], State(0, 0, 1));\n        return;\n    }\n    parse(to, nei[now]) dfs(to);\n    memset(tmp, -Inf, sizeof(tmp));\n    memset(tfr, -1, sizeof(tfr));\n    siz[now] = SZ(nei[now]) + 1;\n    int ths = 1, lst = 0;\n    tmp[0][0][0][0] = 0;\n    getsid(tfr[0][0][0][0], State());\n    loop(i, SZ(nei[now])) {\n        int to = nei[now][i];\n        int lp = i ? r[nei[now][i - 1]] : l[now], rp = l[to], len = rp - lp;\n        loop(k, siz[now] + 1) loop(nk, siz[to] + 1) if (k + nk <= n) {\n            loop(p, 2) loop(s, 2) loop(np, 2) loop(ns, 2) {\n                int pre = tmp[lst][k][p][s], cur = dp[to][nk][np][ns];\n                int prf = tfr[lst][k][p][s], cuf = fr[to][nk][np][ns];\n                if (upd(tmp[ths][k + nk][p][ns], pre + cur)) {\n                    getsid(tfr[ths][k + nk][p][ns], State(p, ns, 0, prf, cuf));\n                }\n                int kk = k + nk + 1 - s - np, pp = i ? p : 1;\n                if (kk >= 0 && upd(tmp[ths][kk][pp][ns], pre + len + cur)) {\n                    getsid(tfr[ths][kk][pp][ns], State(pp, ns, 1, prf, cuf));\n                }\n            }\n        }\n        siz[now] += siz[to]; siz[now] = min(siz[now], n);\n        swap(ths, lst);\n        memset(tmp[ths], -Inf, sizeof(tmp[ths]));\n        memset(tfr[ths], -1, sizeof(tfr[ths]));\n    }\n    int lp = r[nei[now].back()], rp = r[now], len = rp - lp;\n    loop(k, siz[now] + 1) loop(p, 2) loop(s, 2) {\n        int pre = tmp[lst][k][p][s], prf = tfr[lst][k][p][s];\n        if (upd(tmp[ths][k][p][0], pre)) {\n            getsid(tfr[ths][k][p][0], State(p, 0, 0, prf));\n        }\n        int kk = k + 1 - s;\n        if (kk >= 0 && upd(tmp[ths][kk][p][1], pre + len)) {\n            getsid(tfr[ths][kk][p][1], State(p, 1, 1, prf));\n        }\n    }\n    loop(k, siz[now]) loop(p, 2) loop(s, 2) {\n        if (upd(dp[now][k][p][s], tmp[ths][k + 1][p][s])) {\n            fr[now][k][p][s] = tfr[ths][k + 1][p][s];\n        }\n        loop(np, p + 1) loop(ns, s + 1) {\n            if (upd(dp[now][k][np][ns], dp[now][k][p][s])) {\n                getsid(fr[now][k][np][ns], State(np, ns, 2, fr[now][k][p][s]));\n            }\n        }\n    }\n    dp[now][0][0][1] = dp[now][0][1][0] = dp[now][0][1][1] = dp[now][1][1][1] = -Inf;\n    fr[now][0][0][1] = fr[now][0][1][0] = fr[now][0][1][1] = fr[now][1][1][1] = -1;\n}\n \nstruct Piece {\n    int l, r;\n    bool cl, cr;\n    Piece(int l = -1, int r = -1, int cl = 0, int cr = 0) : l(l), r(r), cl(cl), cr(cr) { }\n};\n \nvector<Piece> pcs;\nvector<Segment> segs;\n \nvoid dft(int now, int i, int sid) {\n    if (i < 0) return;\n    const State &st = ss[sid];\n    int s1 = st.f1, s2 = st.f2, mode = st.mode;\n    int lp, rp, f1 = ~s1 && !~ss[s1].f1 ? st.p : 0, f2 = st.s;\n    if (!SZ(nei[now])) {\n        lp = l[now], rp = r[now];\n    } else if (!i) {\n        lp = l[now], rp = l[nei[now][0]];\n    } else if (i == SZ(nei[now])) {\n        lp = r[nei[now].back()], rp = r[now];\n    } else {\n        lp = r[nei[now][i - 1]], rp = l[nei[now][i]];\n    }\n    if (~s1) dft(now, i - (mode != 2), s1);\n    if (mode == 1) pcs.emb(lp, rp, f1, f2);\n    if (mode == 2) pcs.back().cl &= f1, pcs.back().cr &= f2;\n    if (~s2) dft(nei[now][i], SZ(nei[nei[now][i]]), s2);\n}\n \nSegment sel[2005];\n \nvoid dfu(int now) {\n    parse(to, nei[now]) dfu(to);\n    loop(i, SZ(segs)) if (segs[i].l >= l[now] && segs[i].r <= r[now]) {\n        sel[now] = segs[i];\n        segs.erase(segs.begin() + i);\n        break;\n    }\n}\n \nint main() {\n    scanf(\"%d\", &n);\n    seg.emb();\n    cont(i, n) {\n        scanf(\"%d%d\", l + i, r + i);\n        seg.emb(l[i], r[i], i);\n    }\n    sort(all(seg));\n    vector<pair<int, int> > stk;\n    stk.emb(Inf, 0);\n    cont(i, n) {\n        while (stk.back().first < seg[i].l) stk.pob();\n        nei[stk.back().second].pub(seg[i].id);\n        stk.emb(seg[i].r, seg[i].id);\n    }\n    memset(dp, -Inf, sizeof(dp));\n    memset(fr, -1, sizeof(fr));\n    int ans = 0;\n    parse(bg, nei[0]) {\n        dfs(bg);\n        pcs.clear(); segs.clear();\n        ans += dp[bg][0][0][0];\n        dft(bg, SZ(nei[bg]), fr[bg][0][0][0]);\n        loop(i, SZ(pcs)) {\n            int lp = pcs[i].l, rp = pcs[i].r;\n            if (SZ(segs) && segs.back().r == lp && pcs[i].cl) segs.back().r = rp;\n            else if (SZ(segs) && i && pcs[i - 1].cr) segs.back().r = rp;\n            else segs.emb(lp, rp);\n        }\n        dfu(bg);\n    }\n    printf(\"%d\\n\", ans);\n    cont(i, n) printf(\"%d %d\\n\", sel[i].l, sel[i].r);\n    return 0;\n}\n```\n\n",
        "postTime": 1618890429,
        "uid": 60845,
        "name": "Acetyl",
        "ccfLevel": 9,
        "title": "CF1510H Hard Optimization \u9898\u89e3"
    }
]