[
    {
        "content": "\u6211\u7684\u535a\u5ba2\uff1ahttps://www.cnblogs.com/suxxsfe/p/15907152.html  \n\nhttps://www.luogu.com.cn/problem/CF1625E2  \n\n\u8003\u8651\u628a\u62ec\u53f7\u5e8f\u5217\u5bf9\u5e94\u7684\u6811\u5f62\u7ed3\u6784\u5efa\u51fa\u6765\uff08\u6309\u7167\u5728\u4e32\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\uff0c\u7ed9\u4e00\u4e2a\u70b9\u6240\u6709\u513f\u5b50\u4e5f\u5b9a\u4e00\u4e2a\u987a\u5e8f\uff09  \n\u8bbe $u$ \u6709 $son_u$ \u4e2a\u513f\u5b50\uff0c\u5219\u5982\u679c\u4e0d\u8003\u8651\u53ea\u53d6\u67d0\u4e2a\u513f\u5b50\u4e2d\u7684\u4e00\u90e8\u5206\u4f5c\u4e3a\u4e00\u4e2a\u5408\u6cd5\u5b57\u4e32\u7684\u60c5\u51b5\uff08\u4e5f\u5c31\u662f\u5fc5\u987b\u53d6\u67d0\u51e0\u4e2a\u8fde\u7eed\u7684\u513f\u5b50\uff09\uff0c\u90a3\u4e48\u65b9\u6848\u6570\u662f $f_u=\\dfrac{son_u\\cdot (son_u+1)}{2}$  \n\u518d\u52a0\u4e0a\u53ea\u53d6\u67d0\u4e2a\u513f\u5b50\u7684\u4e00\u90e8\u5206\u7684\u60c5\u51b5\uff0c\u5219 $u$ \u5bf9\u5e94\u7684\u7b54\u6848\u5c31\u662f $\\sum_{x\\in \\operatorname{subtree}(u)} f_x$  \n\u90a3\u4e48\u6574\u4e2a\u8be2\u95ee\u5c31\u662f\u6c42\u4e00\u6bb5\u8fde\u7eed\u7684\u513f\u5b50\u7684\u5b50\u6811 $f$ \u503c\u548c\uff0c\u82e5\u5171\u6709 $p$ \u4e2a\u513f\u5b50\uff0c\u5c31\u5728\u52a0\u4e0a $\\frac{p*(p+1)}{2}$  \n\n\u4fee\u6539\u7684\u65f6\u5019\u5bf9 $f$ \u7684\u5f71\u54cd\u53ea\u4f53\u73b0\u5728\u4fee\u6539\u70b9\u7684\u7236\u4eb2\u4e0a\uff0c\u653e\u5728 dfs \u5e8f\u4e0a\u5c31\u53d8\u6210\u4e86\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\uff0c\u6811\u72b6\u6570\u7ec4\u5373\u53ef  \n\u8003\u8651\u8be2\u95ee\u65f6\u5982\u4f55\u786e\u5b9a\u4e24\u4e2a\u5144\u5f1f\u8282\u70b9\u4e4b\u95f4\u6709\u591a\u5c11\u8282\u70b9\uff08\u5c31\u662f\u6c42\u4e0a\u9762\u7684 $p$\uff09  \n\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u518d\u5f00\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u5927\u5c0f\u4e3a\u513f\u5b50\u4e2a\u6570\uff0c\u4e00\u5f00\u59cb\u6bcf\u4e2a\u513f\u5b50\u5904\u90fd\u63d2\u5165 $1$\uff0c\u6bcf\u5220\u6389\u4e00\u4e2a\u513f\u5b50\u5c31\u628a\u5b83\u5728\u7236\u4eb2\u7684\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u6807\u6210 $0$\uff0c\u533a\u95f4\u67e5\u8be2\u5373\u53ef  \n\n\u5982\u679c\u628a\u7ef4\u62a4 $f$ \u7684\u6811\u72b6\u6570\u7ec4\u6362\u6210\u7ebf\u6bb5\u6811\u6765\u652f\u6301\u533a\u95f4\u8d4b\u503c\u4e3a $0$\uff0c\u8fd9\u4e2a\u505a\u6cd5\u53ef\u4ee5\u505a\u4fee\u6539\u65f6 $s[l\\cdots r]$ \u4e2d\u95f4\u4e0d\u4fdd\u8bc1\u5168\u4e3a `.` \u7684\u60c5\u51b5  \n\n```cpp  \n#define N 300006\n#define M 600006\nstruct Graph{\n\tint fir[N],nex[M],to[M],tot;\n\tinline void add(int u,int v){\n\t\tto[++tot]=v;\n\t\tnex[tot]=fir[u];fir[u]=tot;\n\t}\n\tinline void clear(){std::memset(fir,0,sizeof fir);tot=0;}\n}G;\nint n,m;\nchar s[N];\nint stack[N],top;\nint left[N],right[N];\nint L[N],R[N],id[N],tot;\nvoid build(int u,int l,int r){\n\tfor(int i=l+1;i<r;i++)if(right[i]){\n\t\tG.add(u,++tot);\n\t\tL[tot]=i;R[tot]=right[i];id[i]=id[right[i]]=tot;\n\t\tbuild(tot,i,right[i]);\n\t\ti=right[i];\n\t}\n}\nstruct BIT{\n\tint n;\n\tlong long *tree;\n\tinline void init(int size){n=size;tree=new long long[size+1];std::memset(tree,0,(size+1)*sizeof tree[0]);}\n\t#define lowbit(x) (x&(-x))\n\tinline void add(int pos,long long k){for(;pos<=n;pos+=lowbit(pos)) tree[pos]+=k;}\n\tinline long long ask(int pos){\n\t\tlong long ret=0;\n\t\tfor(;pos;pos-=lowbit(pos)) ret+=tree[pos];\n\t\treturn ret;\n\t}\n\t#undef lowbit\n}S,T[N];\nint dfn[N],dfscnt,end[N];\nint num[N],son[N],fa[N];\nvoid dfs(int u){\n\tdfn[u]=++dfscnt;\n\tfor(int i=G.fir[u];i;i=G.nex[i]) num[G.to[i]]=++son[u],fa[G.to[i]]=u,dfs(G.to[i]);\n\tend[u]=dfscnt;\n\tS.add(dfn[u],(long long)son[u]*(son[u]+1)/2);\n\tT[u].init(son[u]);\n\tfor(int i=G.fir[u];i;i=G.nex[i]) T[u].add(num[G.to[i]],1);\n}\nint main(){\n\tn=read();m=read();\n\tscanf(\"%s\",s+1);\n\tfor(int i=1;i<=n;i++){\n\t\tif(s[i]=='(') stack[++top]=i;\n\t\telse if(s[i]==')'&&top) left[i]=stack[top],right[stack[top--]]=i;\n\t}\n\ttot=1;//root=1\n\tfor(int i=1;i<=n;i++)if(right[i]){\n\t\tG.add(1,++tot);\n\t\tL[tot]=i;R[tot]=right[i];id[i]=id[right[i]]=tot;\n\t\tbuild(tot,i,right[i]);i=right[i];\n\t}\n\tS.init(tot);\n\tdfs(1);\n\twhile(m--){\n\t\tint op=read(),l=read(),r=read();\n\t\tif(op==1){\n\t\t\top=fa[id[l]];\n\t\t\tS.add(dfn[op],(long long)son[op]*(son[op]-1)/2-(long long)son[op]*(son[op]+1)/2);\n\t\t\tson[op]--;\n\t\t\tT[op].add(num[id[l]],-1);\n\t\t}\n\t\telse{\n\t\t\tl=id[l];r=id[r];op=fa[l];\n\t\t\tlong long numl=T[op].ask(num[l]),numr=T[op].ask(num[r]);\n\t\t\tprintf(\"\t\t%lld\\n\",S.ask(end[l])-S.ask(dfn[r]-1)+(long long)(numl-numr+1)*(numl-numr+2)/2);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1645143904,
        "uid": 164432,
        "name": "suxxsfe",
        "ccfLevel": 9,
        "title": "CF1625E2 Cats on the Upgrade"
    },
    {
        "content": "$\\rm rating = \\color{red}2800$ \u4e3a\u5565\u8fd9\u4e48\u9ad8\uff1f\n\n\u6211\u4eec\u5148\u628a\u62ec\u53f7\u5e8f\u5217\u6781\u957f\u7684\u80fd\u5339\u914d\u62ec\u53f7\u5b50\u4e32\u62ff\u51fa\u6765\uff0c\u6309\u7167\u5982\u4e0b\u7684\u65b9\u6cd5\u5efa\u7acb\u4e00\u68f5\u6811\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e9b\u5b50\u4e32\uff0c\u6211\u4eec\u628a\u5b83\u4eec\u53bb\u6389\u6700\u5de6\u8fb9\u6700\u53f3\u8fb9\u7684\u62ec\u53f7\uff0c\u7ed3\u679c\u4f1a\u5269\u4f59\u8bb8\u591a\u5e76\u5217\u7684\u62ec\u53f7\u5b50\u4e32\uff0c\u628a\u4ed6\u4eec\u7684\u7236\u4eb2\u8bbe\u7f6e\u4e3a\u5927\u7684\u4e32\u3002\n\n\u8bb0\u6811\u4e0a\u4e00\u4e2a\u70b9 $x$ \u7684\u7b54\u6848 $s_x=$ \u53ea\u9009\u62e9\u8fd9\u4e2a\u70b9\u7684\u513f\u5b50\u8282\u70b9\u7684\u7b54\u6848\uff0c$p_x$ \u4e3a $x$ \u7684\u513f\u5b50\u6570\u91cf\uff0c\u5219 $s_x=\\frac{p_x\\times (p_x+1)}{2}$\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u67e5\u8be2\u533a\u95f4 $[l,r]$\uff0c\u53ef\u4ee5\u628a\u5b83\u5212\u5206\u6210\u8bb8\u591a\u6811\u4e0a\u540c\u5c42\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u96c6\u5408\u8bb0\u4e3a $A$\u3002\n\n\u5219\u7b54\u6848\u5c31\u662f\uff1a\n\n\u6240\u6709\u4ee5 $A$ \u4e2d\u70b9\u4e3a\u7956\u5148\u7684\u70b9 $x$ \u7684 $s_x$ \u7684\u548c $ +\\frac{|A|\\times (|A|+1)}{2}$\u3002\n\n\u6211\u4eec\u628a\u6811\u6bcf\u4e2a\u8282\u70b9\u8d4b\u4e00\u4e2a\u6743\u503c $id$\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u6743\u503c\u7684\u5927\u5c0f\u5173\u7cfb\u5c31\u662f $\\tt dfs$ \u5e8f\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5bb9\u6613\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8868\u793a\u533a\u95f4 $[l,r]$ \u7684\u70b9 $x$\uff0c$id_x=l$ \u5c31\u884c\u4e86\u3002\u8bb0 $f_i$ \u4e3a $id_x=i$ \u7684 $x$ \u7684 $s_x$\uff0c\u5982\u679c $x$ \u4e0d\u5b58\u5728\uff0c\u5b9a\u4e49 $f_i=0$\u3002\n\n\u7b2c\u4e00\u90e8\u5206\u7684\u6743\u503c $=\\sum\\limits_{i=l}^{r} f_i$.\n\n\u7b2c\u4e8c\u90e8\u5206\u7684\u6743\u503c\u662f $\\frac{|A|\\times (|A|+1)}{2}$,\u6211\u4eec\u9700\u8981\u6c42\u51fa $|A|$\u3002\n\n\u5c06\u6bcf\u4e00\u5c42 $d$ \u7684\u6240\u6709\u8282\u70b9 $x$ \u6309\u7167 $id_x$ \u9012\u589e\u7684\u987a\u5e8f\u653e\u8fdb\u4e00\u4e2a\u6570\u7ec4 $g_d$ \u91cc\u3002\n\n\u6211\u4eec\u53d1\u73b0 $|A|=~(~g_d$ \u4e2d $r$ \u7684\u6392\u540d $-g_d$ \u4e2d $l-1$ \u7684\u6392\u540d $)$ \u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u4fee\u6539\uff0c\u6211\u4eec\u90fd\u8981\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u5bb9\u6613\u53d1\u73b0\uff0c\u6211\u4eec\u5220\u9664\u7684\u662f\u53f6\u5b50\u8282\u70b9\u3002\n\n\u5220\u9664\u8282\u70b9\u65f6\uff0c\u5047\u8bbe\u8fd9\u4e2a\u8282\u70b9\u4e3a $x$\uff0c\u4ed6\u7684\u7236\u4eb2\u4e3a $y$\uff0c\u5220\u9664\u64cd\u4f5c\u53ea\u4f1a\u5bf9 $s_y,p_y,f_{id_x},f_{id_y}$\uff0c\u8fd8\u6709 $x$ \u90a3\u4e00\u5c42\u7684 $g$\u3002\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e $f$ \u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff0c$g$ \u7528\u5e73\u8861\u6811\u7ef4\u62a4\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\u3002\n\n**Something fun:** I was hacked because of \"long long\".\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<assert.h>\n#include<random>\n#include<stack>\nstd::mt19937 seed(*new int);\nint getrd(int l,int r)\n{\n\tstd::uniform_int_distribution<int> rd(l,r);\n\treturn rd(seed);\n}\nnamespace node_pool\n{\n\tstruct node\n\t{\n\t\tint son[2],sz,s,p;\n\t\tnode(int s=0){this->s=s,this->son[0]=this->son[1]=this->sz=this->p=0;}\n\t};\n\tnode a[10000005];\n\tint cnt;\n\tint makenode(int s)\n\t{\n\t\tint x=++cnt;\n\t\ta[x]=node(s);\n\t\ta[x].sz=1;\n\t\ta[x].p=getrd(1,1000000000);\n\t\treturn x;\n\t}\n}\nstruct tree\n{\n\tint rt;\n\tvoid pushup(int k)\n\t{\n\t\tusing namespace node_pool;\n\t\ta[k].sz=a[a[k].son[0]].sz+a[a[k].son[1]].sz+1;\n\t}\n\tvoid split(int k,int &x,int &y,int val)\n\t{\n\t\tusing namespace node_pool;\n\t\tif (!k) return x=y=0,void();\n\t\tif (a[k].s<=val) return x=k,split(a[k].son[1],a[x].son[1],y,val),pushup(x),void();\n\t\telse return y=k,split(a[k].son[0],x,a[y].son[0],val),pushup(y),void();\n\t}\n\tint merge(int x,int y)\n\t{\n\t\tusing namespace node_pool;\n\t\tif (!x||!y) return x+y;\n\t\tif (a[x].p<a[y].p) return a[x].son[1]=merge(a[x].son[1],y),pushup(x),x;\n\t\telse return a[y].son[0]=merge(x,a[y].son[0]),pushup(y),y;\n\t}\n\tvoid insert(int val)\n\t{\n\t\tusing namespace node_pool;\n\t\tint x=0,y=0;\n\t\tsplit(rt,x,y,val);\n\t\trt=merge(x,merge(makenode(val),y));\n\t}\n\tvoid erase(int val)\n\t{\n\t\tusing namespace node_pool;\n\t\tint x=0,y=0,z=0;\n\t\tsplit(rt,y,z,val);\n\t\tsplit(y,x,y,val-1);\n\t\trt=merge(x,z);\n\t}\n\tint getrk(int k)\n\t{\n\t\tusing namespace node_pool;\n\t\tint x=0,y=0;\n\t\tsplit(rt,x,y,k-1);\n\t\tint s=a[x].sz;\n\t\trt=merge(x,y);\n\t\treturn s;\n\t}\n};\nstruct bit\n{\n\tint n;\n\tlong long s[500005];\n\tint lowbit(int x){return x&(-x);}\n\tvoid update(int k,long long w)\n\t{\n\t\tfor (;k<=n;k=k+lowbit(k)) s[k]=s[k]+w;\n\t}\n\tlong long ask(int k)\n\t{\n\t\tlong long ans=0;\n\t\tfor (;k>=1;k=k-lowbit(k)) ans=ans+s[k];\n\t\treturn ans;\n\t}\n\tlong long ask(int l,int r)\n\t{\n\t\tlong long ans=0;\n\t\tif (l>1) ans=ans-ask(l-1);\n\t\tans=ans+ask(r);\n\t\treturn ans;\n\t}\n\tbit(int n=0){this->n=n;}\n};\nbit t0;\ntree p[300005];\nint tr(char x)\n{\n\tif (x=='(') return 1;\n\tif (x==')') return -1;\n\treturn 0;\n}\nint read()\n{\n\tchar ch=0;\n\twhile (ch!='('&&ch!=')') ch=getchar();\n\treturn ch;\n}\nint n,q,s[300005],fa[300005],son[300005],col[300005];\nchar f[300005];\nstd::vector<int> a[300005];\nlong long val[300005];\nvoid add(int x,int y){a[x].push_back(y);}\nlong long calc(int x){return 1ll*x*(x+1)/2;}\nvoid make(int l,int r)\n{\n\tfor (int i=l;i<=r;i++) s[i]=(i==l?0:s[i-1])+tr(f[i]);\n\tfor (int i=l;i<=r;i++) if (tr(f[i])==1) p[s[i]].insert(i);\n\tstd::stack<int> st;\n\tst.push(0);\n\tfor (int i=l;i<=r;i++)\n\t{\n\t\tif (tr(f[i])==-1) st.pop();\n\t\telse if (tr(f[i])==1) add(st.top(),i),fa[i]=st.top(),++son[st.top()],st.push(i);\n\t}\n\tfor (int i=l;i<=r;i++) val[i]=calc(son[i]),t0.update(i,val[i]);\n}\nvoid del(int k)\n{\n\tp[s[k]].erase(k);\n\tif (fa[k]!=0)\n\t{\n\t\t--son[fa[k]];\n\t\tlong long w=calc(son[fa[k]]);\n\t\tt0.update(fa[k],w-val[fa[k]]);\n\t\tval[fa[k]]=w;\n\t}\n}\nlong long ask(int l,int r)\n{\n\tlong long ans=0;\n\tans=ans+t0.ask(l,r);\n\tint d=s[l],cnt=p[d].getrk(r)-p[d].getrk(l-1);\n\tans=ans+calc(cnt);\n\treturn ans;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);\n\tt0=bit(n);\n\tfor (int i=1;i<=n;i++) f[i]=read();\n\tstd::stack<int> st;\n\tfor (int i=1;i<=n;i++)\n\t\tif (tr(f[i])==1) st.push(i);\n\t\telse if (tr(f[i])==-1)\n\t\t{\n\t\t\tif (st.empty()) continue;\n\t\t\tcol[st.top()]=col[i]=1;\n\t\t\tst.pop();\n\t\t}\n\tint ll=1;\n\tfor (int i=1;i<=n;i++)\n\t\tif (!col[i])\n\t\t{\n\t\t\tif (ll<=i-1) make(ll,i-1);\n\t\t\tll=i+1;\n\t\t}\n\tif (ll<=n) make(ll,n);\n\twhile (q--)\n\t{\n\t\tint opt,l,r;\n\t\tscanf(\"%d%d%d\",&opt,&l,&r);\n\t\tif (opt==1) del(l);\n\t\telse if (opt==2) printf(\"%lld\\n\",ask(l,r));\n\t}\n\treturn 0;\n}\n```\n\n\u65f6\u95f4 $\\tt 18.93s$\uff0c\u5185\u5b58 $\\tt 212.13MB$\uff0c\u4ee3\u7801\u957f\u5ea6 $\\tt 3.61KB$\u3002",
        "postTime": 1642225815,
        "uid": 36957,
        "name": "RainFestival",
        "ccfLevel": 0,
        "title": "1625E2"
    },
    {
        "content": "\u975e\u5e38\u5de7\u5999\u7684\u4e00\u9053\u9898\u76ee\u3002\n\n\u9996\u5148\u8003\u8651easy version\uff0c\u53d1\u73b0\u6211\u4eec\u6bcf\u6b21\u8be2\u95ee\u90fd\u662f\u5bf9\u4e8e\u4e00\u4e2a**\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217**\u6765\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u51fa\u62ec\u53f7\u6811\uff0c**\u6ce8\u610f\u6709\u4e9b\u90e8\u5206\u7684\u62ec\u53f7\u5e76\u4e0d\u5408\u6cd5\uff0c\u9700\u8981\u53bb\u9664\u6389**\u3002\n\n\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u62ec\u53f7\u533a\u95f4\u6240\u5728\u7684\u4f4d\u7f6e\u4e00\u5b9a\u662f\u6811\u4e0a\u70b9 $u$ \u6240\u5728\u5b50\u6811\u513f\u5b50\u7684\u4e00\u4e2a\u8fde\u7eed\u6bb5\uff08\u5982\u679c\u6211\u4eec\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\u5b89\u6392\u5bf9\u5e94\u7684\u62ec\u53f7\u7684\u60c5\u51b5\u4e0b\uff09\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5148DP\u51fa\u4e00\u4e2a\u5b50\u6811\u7684\u8d21\u732e\u548c\uff0c\u8fd9\u90e8\u5206\u662f\u5f88\u7b80\u5355\u7684\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4ed6\u7684\u513f\u5b50\u7684\u8d21\u732e\u548c\u3002\n\n\u6bcf\u6b21\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee $[l,r]$ \uff0c\u6211\u4eec\u5148\u5b9a\u4f4d\uff0c\u7136\u540e\u627e\u51fa\u4ed6\u4eec\u7684\u7236\u4eb2\uff0c\u5728\u7236\u4eb2\u7684\u5bf9\u5e94\u513f\u5b50\u7684`vector`\u4e0a\u4e8c\u5206\u51fa\u8fd9\u4e24\u4e2a\u70b9\u5bf9\u5e94\u7684\u7f16\u53f7\uff0c\u7136\u540e\u5dee\u5206\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u590d\u6742\u5ea6 $O((n+q)\\log n)$ \u3002\n\n\u5f53\u7136\uff0c\u5bf9\u4e8eeasy version\uff0c\u524d\u7f00\u548c\u5373\u53ef\u3002\n\n\u73b0\u5728\u60f3\u6765\u5176\u5b9e\u4e0d\u7528\u4e8c\u5206\uff0c\u53ea\u6709\u5bf9\u6bcf\u4e00\u4e2a\u70b9 $u$ \u7ef4\u62a4\u4e00\u4e2a\u6807\u53f7\uff0c\u8868\u793a\u4ed6\u5728\u7236\u4eb2\u7684\u513f\u5b50\u4e2d\u7684\u7f16\u53f7\u5373\u53ef\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6 $O(n+q)$ \u3002\n\n\u5bf9\u4e8ehard version\uff0c\u6bcf\u6b21\u5220\u9664\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u3002\n\n\u663e\u7136\u4ed6\u4e0d\u4ec5\u4f1a\u5bf9\u4ed6\u7684\u7236\u4eb2\u6709\u8d21\u732e\uff08\u5220\u53bb\u8fd9\u4e2a\u70b9\u7684\u8d21\u732e\uff09\uff0c\u800c\u4e14\u8fd8\u4f1a\u5bf9\u6574\u6761\u94fe\u4ea7\u751f\u5f71\u54cd\uff0c\u6211\u4eec\u989d\u5916\u518d\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\uff08**\u94fe\u52a0\u5355\u70b9\u67e5\u53ef\u4ee5\u505a\u5230**  $O(n\\log n)$\uff09\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u662f $O((n+q)\\log n)$ \u3002\n\n\u5728\u6253\u7684\u65f6\u5019\uff0c\u6211\u628a\u4e8c\u5206\u7684\u4e0a\u754c\u5199\u9519\u4e86\uff0c\u7136\u540e\u4e00\u76f4\u8c03\u4e0d\u51fa\u6765\u3002\n\n\u6211\u597d\u60f3\u4e0d\u592a\u4f1a\u5b98\u65b9\u9898\u89e3\u4e2d\u7684 $O((n+q)\\sqrt n)$ \u7684\u505a\u6cd5\u3002\n\nbouns\uff1a\u5982\u679c\u5220\u9664\u7684\u662f\u4e00\u5bf9\u5339\u914d\u7684\u62ec\u53f7\u5bf9\uff0c\u800c\u4e0d\u662f\u4e2d\u95f4\u5168\u7a7a\u7684\u62ec\u53f7\u5bf9\u600e\u4e48\u505a\uff1f",
        "postTime": 1642218609,
        "uid": 333789,
        "name": "lory1608",
        "ccfLevel": 9,
        "title": "CF1625E2 Cats on the Upgrade (hard version) \u9898\u89e3"
    }
]