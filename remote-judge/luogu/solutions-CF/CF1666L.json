[
    {
        "content": "\u9898\u76ee\u8981\u6c42\u4ece\u70b9 $A$ \u51fa\u53d1\uff0c\u662f\u5426\u5b58\u5728\u53e6\u4e00\u4e2a\u7ec8\u70b9 $B$\uff0c\u4f7f\u5f97 $A$ \u5230 $B$ \u7684\u8def\u5f84\u4e0d\u91cd\u590d\u3002\n\n\u672c\u9898\u4e0e\u8def\u5f84\u6709\u5173\uff0c\u8003\u8651\u53ef\u4ee5\u904d\u5386\u8fb9\u7684\u7b97\u6cd5\uff0c\u540c\u65f6\u6ce8\u610f\u5230\uff0c\u9898\u76ee\u4e2d $0 \\leq m \\leq 2 \\cdot 10^{5}$\uff0c\u6545\u5e94\u8bbe\u8ba1\u51fa $O(m \\log m)$ \u53ca\u66f4\u5feb\u7684\u7b97\u6cd5\u3002\n\n------------\n\n\u53ef\u4ee5\u770b\u4e00\u4e0b\u6837\u4f8b\u4e00\uff0c\u627e\u627e\u7075\u611f\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2ddfd4wq.png)\n\n\u7b2c\u4e00\u6761\u8def\u5f84\uff1a$1 \\to 2 \\to 3$\u3002\n\n\u7b2c\u4e8c\u6761\u8def\u5f84\uff1a$1 \\to 4 \\to 3$\u3002\n\n\u627e\u5230\u7ec8\u70b9\u7684\u6807\u51c6\uff0c\u5c31\u662f\u7b2c\u4e00\u6761\u8def\u5f84\u4e0e\u7b2c\u4e8c\u6761\u8def\u5f84\u80fd\u5171\u540c\u904d\u5386\u5230\u8be5\u70b9\uff0c\u8fd9\u4e0d\u5c31\u662f\u641c\u7d22\u4e2d\u7684 $vis$ \u6807\u8bb0\u561b\u3002\u4f46\u662f\uff0c\u600e\u4e48\u56de\u6eaf\u5bfb\u627e\u7b54\u6848\u5462\uff1f\u5c06\u6ca1\u6709\u8def\u5f84\u538b\u7f29\u7684\u5e76\u67e5\u96c6\u4e2d\u7684 $fa$ \u9b54\u6539\u4e00\u4e0b\u5373\u53ef\u3002\u597d\u4e86\uff0c\u786e\u5b9a\u4f7f\u7528\u5e7f\u641c\u7b97\u6cd5\u3002\n\n------------\n\n\u4f46\u662f\uff0c\u51fa\u9898\u4eba\u975e\u5e38\u826f\u5fc3\uff0c\u6837\u4f8b\u4e8c\u4e0e\u6837\u4f8b\u4e09\u7ed9\u4e86\u6211\u4eec\u4e24\u79cd\u5751\u70b9\u3002\n\n\u5148\u770b\u6837\u4f8b\u4e8c\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2wdqi9cy.png)\n\n\u663e\u7136\uff0c\u5982\u679c\u6211\u4eec\u53ea\u7ef4\u62a4\u4e00\u4e2a $fa$ \u662f\u4e0d\u884c\u7684\uff0c\u867d\u7136\u662f\u6709\u4e24\u6761\u8def\u80fd\u5230\u8fbe $4$ \u53f7\u8282\u70b9\uff0c\u4f46\u662f\u4e0d\u96be\u53d1\u73b0 $2$ \u662f\u91cd\u590d\u7ecf\u5386\u7684\uff0c\u90a3\u4e48\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4\u6765\u7ef4\u62a4\u8def\u5f84\u7684\u7279\u5f81\u3002\u51fa\u53d1\u70b9\u662f\u6240\u6709\u90fd\u8981\u7ecf\u8fc7\u7684\uff0c\u8fd9\u4e2a\u7279\u5f81\u592a\u666e\u904d\u4e86\uff0c\u4f46\u662f\u6839\u636e\u5b9a\u4e49\uff0c\u51fa\u53d1\u70b9\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u6bcf\u6761\u6b63\u786e\u8def\u5f84\u72ec\u4e00\u65e0\u4e8c\u7684\u7279\u5f81\uff0c\u5f88\u597d\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 $root$\uff0c$root_i$ \u8868\u793a\u7ecf\u8fc7\u8282\u70b9 $i$ \u7684\u8def\u5f84\u7684\u51fa\u53d1\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u95ee\u9898\u4fbf\u89e3\u51b3\u4e86\u3002\n\n------------\n\n\u518d\u770b\u6837\u4f8b\u4e09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mxth8o0u.png)\n\n\u8fd9\u662f\u4e00\u4e2a\u73af\uff0c\u9700\u8981\u6211\u4eec\u5728\u539f\u7ef4\u62a4\u7684\u6570\u7ec4\u4e0a\u52a0\u70b9\u5c0f\u7ec6\u8282\u3002$s$ \u4e3a\u51fa\u53d1\u70b9\uff0c\u5b83\u4e0d\u80fd\u88ab\u585e\u5165\u961f\u5217\uff0c\u90a3\u4e48\u5c31\u628a$fa_s$ \u5728\u521d\u59cb\u65f6\u8d4b\u503c\u4e3a $-1$\u3002\uff08\u82e5\u4f60\u60f3\u51fa\u6765\u7684\u5199\u6cd5\u4e0e\u6211\u7684\u4e0d\u540c\uff0c\u53ef\u80fd\u4e0d\u7528\u8003\u8651\uff09\n\n------------\n\n\u5e7f\u641c\u65f6\uff0c\u6bcf\u6761\u8fb9\u81f3\u591a\u88ab\u904d\u5386\u4e00\u6b21\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(m)$ \u7684\u3002\n\n```\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#define MAXN 200005\nusing namespace std;\n\nint n, m, s;\nstruct edge\n{\n    int v, nxt;\n}G[MAXN];\nint head[MAXN], cntEdge;\nint fa[MAXN], root[MAXN];   // \u7ef4\u62a4\u7236\u8282\u70b9\u4e0e\u6839\u8282\u70b9\uff08\u641c\u7d22\u51fa\u53d1\u70b9\uff09\nint ans[MAXN], cnt;\n\nint read()\n{\n    int x = 0, f = 1; char ch = getchar();\n    while (ch < '0' || ch > '9')\n    {\n        if (ch == '-') f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 3) + (x << 1) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\n\nvoid addEdge(int u, int v)\n{\n    ++cntEdge;\n    G[cntEdge].v = v;\n    G[cntEdge].nxt = head[u];\n    head[u] = cntEdge;\n}\n\nvoid init()\n{\n    n = read(), m = read(), s = read();\n    for (int i = 1; i <= m; ++i)\n    {\n        int u = read(), v = read();\n        addEdge(u, v);\n    }\n}\n\nvoid outPut(int u, int v)\n{\n    printf(\"Possible\\n\");\n    while (fa[v] != -1)\n    {\n        ans[++cnt] = v;\n        v = fa[v];\n    }\n    ans[++cnt] = s;\n    printf(\"%d\\n\", cnt);\n    for (int i = cnt; i; --i)\n        printf(\"%d \", ans[i]);\n    printf(\"\\n\");\n\n    cnt = 1;    // ans[1] \u5373\u4e3a v\n    while (fa[u] != -1)\n    {\n        ans[++cnt] = u;\n        u = fa[u];\n    }\n    ans[++cnt] = s;\n    printf(\"%d\\n\", cnt);\n    for (int i = cnt; i; --i)\n        printf(\"%d \", ans[i]);\n    exit(0);\n}\n\nvoid BFS()\n{\n    queue <int> q;\n    fa[s] = -1;\n    for (int i = head[s]; i; i = G[i].nxt)\n    {\n        int v = G[i].v;\n        fa[v] = s;\n        root[v] = v;\n        q.push(v);\n    }\n    while (!q.empty())\n    {\n        int u = q.front(); q.pop();\n        for (int i = head[u]; i; i = G[i].nxt)\n        {\n            int v = G[i].v;\n            if (fa[v] > 0 && root[v] != root[u])    // \u82e5\u7236\u8282\u70b9\u4e3a-1\uff0c\u5219\u662f\u73af\uff0c\u82e5\u7236\u8282\u70b9\u662f0\uff0c\u5219\u8868\u793a\u672a\u904d\u5386\u3002\n                outPut(u, v);\n            if (fa[v] == 0)\n            {\n                fa[v] = u;\n                root[v] = root[u];\n                q.push(v);\n            }\n        }\n    }\n}\n\nvoid solve()\n{\n    BFS();\n    printf(\"Impossible\");\n}\n\nint main()\n{\n    init();\n    solve();\n    return 0;\n}\n```\n",
        "postTime": 1667378327,
        "uid": 556826,
        "name": "\u6668\u66e6\u58a8\u51dd",
        "ccfLevel": 4,
        "title": "CF1666L Labyrinth \u9898\u89e3"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u6c60\u7684\u5404\u4f4d\u5199\u7684\u90fd\u662fCF\u7684\u5b98\u65b9\u9898\u89e3~~\u522b\u6253\u6211\uff0c\u53ef\u80fd\u4e5f\u6709\u4e0d\u662f\u7684~~\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u57fa\u4e8e\u4e8c\u8fdb\u5236\u62c6\u5206\u7684\u601d\u8def\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u7ec4 $s$\u3001$t$\uff0c\u8981\u4ee4\u8def\u5f84\u5b8c\u5168\u4e0d\u540c\uff0c\u5fc5\u6709\u4ece $s$ \u51fa\u53d1\u540e\u5230\u8fbe\u7684\u7b2c\u4e00\u4e2a\u70b9\u5c31\u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u6839\u636e\u8fd9\u4e2a\u524d\u63d0\uff0c\u5c06\u4e0e\u70b9 $s$ \u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u8fdb\u884c\u4e8c\u8fdb\u5236\u5206\u7ec4\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u67d0\u4e00\u6b21\u5206\u7ec4\u65f6\uff0c\u5408\u6cd5\u7b54\u6848\u7684\u8def\u5f84\u88ab\u5206\u5165\u4e0d\u540c\u7ec4\u3002\n\n\u6240\u4ee5\u6bcf\u6b21\u5206\u7ec4\u540e\u68c0\u67e5\u4e24\u7ec4\u4e2d\u662f\u5426\u5404\u5b58\u5728\u4e00\u6761\u8def\u5f84\u80fd\u591f\u5230\u8fbe\u76f8\u540c\u7684\u70b9\uff0c\u5219\u8fd9\u4e2a\u70b9\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u70b9 $t$\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u8def\u5f84\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u516c\u5171\u70b9\u600e\u4e48\u627e\uff0c\u4ee5\u53ca\u8def\u5f84\u600e\u4e48\u8bb0\u5f55\uff0c\u67d3\u8272\u52a0\u53cc\u7aef\u961f\u5217\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log_2n)$\u3002\n\n---\n\n\u8865\u5145\u4e00\u4e0b\uff0c\u4e8c\u8fdb\u5236\u5206\u7ec4\u662f\u57fa\u4e8e\u4e0d\u540c\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u4e00\u5b9a\u4e0d\u76f8\u540c\u8fd9\u4e2a\u524d\u63d0\u8fdb\u884c\u7684\u5206\u7ec4\u65b9\u5f0f\u3002\u6240\u4ee5\u9010\u4f4d\u5224\u65ad\u67d0\u6570\u7684\u67d0\u4f4d\u662f`0`\u8fd8\u662f`1`\uff0c\u4ee5\u6b64\u8fdb\u884c\u5206\u7ec4\uff0c\u90a3\u4e48\u5fc5\u7136\u4e0d\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u6574\u6570\u5728\u6bcf\u4e00\u6b21\u5206\u7ec4\u65f6\u90fd\u5904\u4e8e\u540c\u4e00\u7ec4\u5185\uff08\u56e0\u4e3a\u5b83\u4eec\u7684\u5f02\u6216\u7ed3\u679c\u4e0d\u662f\u96f6\uff09\u3002\n\n---\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n//Labyrinth\nconst int maxn = (int)2e5 + 10;\nbool vis[maxn], siv[maxn];\nvector<int> ed[maxn];\nvector<int> op[maxn];\ndeque<int> pth;\nint n, m, s, t;\nint cnt;\n\nvoid dfs_1(int x) {\n\tif (vis[x] || x == s) return; vis[x] = true;\n\tfor (int i = 0; i < ed[x].size(); i++) dfs_1(ed[x][i]);\n}\n\nbool dfs_2(int x) {\n\tif (x == s || siv[x]) return false;\n\tpth.push_back(x);\n\tsiv[x] = true;\n\tif (vis[x]) {\n\t\tt = x;\n\t\treturn true;\n\t}\n\tfor (int i = 0; i < ed[x].size(); i++) \n\t\tif (dfs_2(ed[x][i])) return true;\n\tpth.pop_back();\n\treturn false;\n}\n\ninline bool ver_2(int x, int i) {\n\tif (cnt > 1) return false;\n\treturn x == t && op[x][i] == s;\n}\n\nbool dfs_3(int x) {\n\tsiv[x] = true;\n\tpth.push_back(x);\n\tif (x == s) return true;\n\tfor (int i = 0; i < op[x].size(); i++) {\n\t\tif (siv[op[x][i]] || vis[op[x][i]] || ver_2(x, i)) continue;\n\t\tif (dfs_3(op[x][i])) return true;\n\t}\n\tpth.pop_back();\n\treturn false;\n}\n\nbool check() {\n\tfor (int k = 0; k < 32; k++) {\n\t\tfor (int i = 0; i < ed[s].size(); i++) \n\t\t\tif (ed[s][i] & 1 << k) dfs_1(ed[s][i]);\n\t\tfor (int i = 0; i < ed[s].size(); i++) {\n\t\t\tif (ed[s][i] & 1 << k);\n\t\t\telse if (dfs_2(ed[s][i])) return true;\n\t\t}\n\t\tmemset(vis, false, sizeof vis);\n\t\tmemset(siv, false, sizeof siv);\n\t}\n\treturn false;\n}\n\nvoid out_put() {\n\tint ans[maxn];\n\t\n\twhile (pth.size()) {\n\t\tans[++cnt] = pth.front();\n\t\tpth.pop_front();\n\t}\n\t\n\tmemset(vis, false, sizeof vis);\n\tmemset(siv, false, sizeof siv);\n\t\n\tprintf(\"%d\\n%d \", cnt + 1, s);\n\tfor (int i = 1; i <= cnt; i++) printf(\"%d \", ans[i]);\n\tfor (int i = 1; i < cnt; i++)  vis[ans[i]] = true;\n\tprintf(\"\\n\");\n\t\n\tdfs_3(t);\n\tprintf(\"%d\\n\", pth.size());\n\twhile (pth.size()) {\n\t\tprintf(\"%d \", pth.back());\n\t\tpth.pop_back();\n\t}\n\t\n\treturn;\n}\n\nint main() {\n\tscanf(\"%d %d %d\", &n, &m, &s);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u, v;\n\t\tscanf(\"%d %d\", &u, &v);\n\t\ted[u].push_back(v);\n\t\top[v].push_back(u);\n\t}\n\t\n\tif (check()) {\n\t\tprintf(\"Possible\\n\");\n\t\tout_put();\n\t} else printf(\"Impossible\");\n\t\n\treturn 0;\n}\n```",
        "postTime": 1661866083,
        "uid": 445135,
        "name": "Duawieh",
        "ccfLevel": 6,
        "title": "CF1666L Labyrinth \u9898\u89e3"
    },
    {
        "content": "**\u9898\u76ee\u8981\u6c42\uff1a**\n\n\u4ece\u7ed9\u5b9a\u7684\u8d77\u70b9\u51fa\u53d1\uff0c\u5c1d\u8bd5\u627e\u5230\u4e00\u4e2a\u7ec8\u70b9\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u7684\u6761\u4ef6\uff1a\n\n1. \u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u6709\u4e24\u6761\u4e0d\u540c\u7684\u8def\u5f84\u3002\n\n2. \u9664\u4e86\u8d77\u70b9\u4e4b\u5916\uff0c\u8fd9\u4e24\u6761\u8def\u5f84\u4e0d\u5b58\u5728\u4efb\u4f55\u516c\u5171\u7684\u70b9\u3002\n\n3. \u6bcf\u6761\u8def\u5f84\u81ea\u8eab\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u70b9\u3002\n\n\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u7ec8\u70b9\uff0c\u8f93\u51fa possible\uff0c\u5e76\u4e14\u5206\u522b\u8f93\u51fa\u8fd9\u4e24\u6761\u8def\u5f84\uff0c\u5426\u5219\u8f93\u51fa impossible\n\n\n**\u601d\u8def\uff1a**\n\n\u4ece\u8d77\u70b9\u7684\u4e0b\u4e00\u4e2a\u70b9\u51fa\u53d1\uff0c\u8fd9\u4e2a\u70b9\u4f5c\u4e3a\u5f53\u524d\u8def\u5f84\u7684\u6839\u8282\u70b9\uff0c\u5f00\u59cb dfs\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u6839\u8282\u70b9\uff0c\u5982\u679c\u5230\u8fbe\u4e86\u540c\u4e00\u4e2a\u70b9\uff0c\u8bf4\u660e\u4e00\u5b9a\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u7ec8\u70b9\u3002\n\n**\u7279\u522b\u6ce8\u610f\u7684\u4e00\u70b9\u662f**\uff1a\u627e\u7b2c\u4e00\u4e2a\u4ece\u4e24\u4e2a\u6839\u90fd\u80fd\u5230\u8fbe\u7684\u7ec8\u70b9\uff0c\u4e0d\u662f\u7b2c\u4e00\u4e2a\u7684\u8bdd\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8def\u5f84\u91cd\u590d\u3002\n\n\u56e0\u4e3a\u662f\u4e24\u6761\u6ca1\u6709\u91cd\u590d\u70b9\u7684\u4e0d\u540c\u8def\u5f84\uff0c\u56e0\u6b64\u9664\u4e86\u7ec8\u70b9\u4e4b\u5916**\u8def\u5f84**\u4e0a\u7684\u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u53ea\u6709\u4e00\u4e2a\u7236\u8282\u70b9\u3002\n\n\u56e0\u6b64\uff0c\u603b\u4f53\u505a\u6cd5\uff1a\n\n\u5728 dfs \u7684\u8fc7\u7a0b\u4e2d\u53ea\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u7236\u8282\u70b9\u5c31\u597d\uff0c\u9047\u5230\u4e4b\u524d\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u70b9\uff0c\u770b\u8fd9\u4e2a\u70b9\u7684\u6839\u8282\u70b9\u662f\u4e0d\u662f\u5f53\u524d\u8fd9\u6761\u8def\u5f84\u7684\u6839\u8282\u70b9\uff0c\u662f\u7684\u8bdd\u5c31\u526a\u6389\u8fd9\u4e2a\u70b9\uff0c\u56e0\u4e3a\u8def\u5f84\u603b\u4e0d\u80fd\u6709\u91cd\u590d\u7684\u70b9\u3002\u4e0d\u662f\u7684\u8bdd\uff0c\u8fd9\u4e2a\u70b9\u5c31\u662f\u7b54\u6848\u4e86\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\uff0c\u4ed6\u6709\u4e24\u4e2a\u7236\u8282\u70b9\uff0c\u5355\u72ec\u5f00\u4e00\u4e2a\u53d8\u91cf\u5b58\u4e00\u4e0b\u5c31\u597d\uff0c\u5176\u4ed6\u70b9\u5c31\u53ea\u6709\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u7528\u9012\u5f52\u56de\u6eaf\u7b54\u6848\u5c31\u597d\u3002\n\n\u8fd8\u6709\u4e00\u70b9\u5f3a\u8c03\u7684\u5c31\u662f\uff0c\u5728 dfs \u627e\u70b9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7279\u5224\u4e00\u4e0b\u8d77\u70b9\u3002\n\n\n**\u4ee3\u7801\uff1a**\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n, m, s, another;\nint flag;//\u7ec8\u70b9\nvector<int> edge[200005];\nint R[200005];//\u6bcf\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\nint fa[200005];//\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\nvector<int>ans[2];//\u4e24\u6761\u8def\u5f84\nvoid fans(int s, int i, int way)//\u7b54\u6848\u56de\u6eaf\n{\n\tans[way].push_back(i);\n\tif(i == s) return;\n\tfans(s, fa[i], way);\n}\nvoid dfs(int i, int root, int f)//dfs \u627e\u70b9\n{\n\tif(i==s) return;//\u7279\u5224\u8d77\u70b9\n\tif(flag) return;//\u5df2\u7ecf\u627e\u5230\u7b54\u6848\u5c31\u4e0d\u9700\u8981\u4efb\u4f55\u64cd\u4f5c\u4e86\n\tif(R[i])//\u5f53\u524d\u70b9\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u4ed6\u5c31\u6709\u5e0c\u671b\u6210\u4e3a\u7b54\u6848\u8282\u70b9\n\t{\n\t\tif(R[i] != root)//\u4e0d\u662f\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u91cd\u590d\u8282\u70b9\uff0c\u90a3\u4ed6\u5c31\u662f\u7b54\u6848\u4e86\n\t\t{\n\t\t\tflag = i;\n\t\t\tanother = f;\n\t\t}\n\t\treturn ;\n\t}\n\tR[i] = root;\n\tfa[i] = f;\n\tfor(auto x : edge[i]) dfs(x, root, i);\n}\nint main()\n{\n\tcin.sync_with_stdio(false);\n\tcin >> n >> m >> s;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint f, t;\n\t\tcin >> f >> t;\n\t\tedge[f].push_back(t);\n\t}\n\tfor(int i = 0; i < (int)edge[s].size(); i++) dfs(edge[s][i], edge[s][i], s);\n\tif(flag)\n\t{\n\t\tcout << \"Possible\\n\";\n\t\tans[0].push_back(flag);\n\t\tans[1].push_back(flag);\n\t\tfans(s, fa[flag], 0);\n\t\tfans(s, another, 1);\n\t\treverse(ans[0].begin(), ans[0].end());\n\t\treverse(ans[1].begin(), ans[1].end());\n\t\tcout << ans[0].size() << '\\n';\n\t\tfor(auto x : ans[0]) cout << x << ' ';\n\t\tcout << '\\n' << ans[1].size() << '\\n';\n\t\tfor(auto x : ans[1]) cout << x << ' ';\n\t}\n\telse cout << \"Impossible\";\n\treturn 0;\n}\n\n```\n",
        "postTime": 1651721608,
        "uid": 448502,
        "name": "JCLinux",
        "ccfLevel": 0,
        "title": "CF1666L\u9898\u89e3"
    },
    {
        "content": "## \u9898\u76ee\u5206\u6790\n\n\u9898\u76ee\u8981\u627e\u7684\u662f\u4ece $s$ \u5230 $t$ \u7684\u4e24\u6761\u4e0d\u76f8\u4ea4\u8def\u5f84\uff0c\u5373\u4e24\u6761\u8def\u5f84\u4e2d\u95f4\u6ca1\u6709\u91cd\u590d\u9876\u70b9\u3002\u9996\u5148\u8003\u8651\u4ece $s$ \u51fa\u53d1\u7684\u8fb9\u5230\u8fbe\u7684\u9876\u70b9\uff0c\u90a3\u4e48\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u7684\u4e24\u6761\u8def\u5f84\u4e00\u5b9a\u4f1a\u5230\u8fbe\u4e24\u4e2a\u4e0d\u540c\u7684\u9876\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u5148\u904d\u5386\u4ee5 $s$ \u4e3a\u8d77\u70b9\u7684\u8fb9\uff0c\u4ee5\u6bcf\u4e2a\u7ec8\u70b9\u4e3a\u6839\u5206\u522b\u8fdb\u884c dfs\uff0c\u5404\u5f97\u5230\u4e00\u68f5\u751f\u6210\u6811\u3002\u5982\u679c\u6709\u4e24\u4e2a\u751f\u6210\u6811\u6709\u91cd\u590d\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u627e\u5230\u4e86\u95ee\u9898\u4e00\u4e2a\u89e3\uff0c\u5426\u5219\u5c31\u8bf4\u660e\u95ee\u9898\u65e0\u89e3\u3002\n\n\u53ef\u4ee5\u7528\u4e00\u4e2a parent \u6570\u7ec4\u4fdd\u5b58\u6bcf\u4e2a\u9876\u70b9\u5728\u751f\u6210\u6811\u4e0a\u7684\u7236\u8282\u70b9\u3002\u53e6\u5916\u7528\u4e00\u4e2a root \u6570\u7ec4\u8868\u793a\u6bcf\u4e2a\u9876\u70b9\u6240\u5728\u751f\u6210\u6811\u7684\u6839\u3002\u5728 dfs \u9047\u5230\u5df2\u6709 parent \u4e14 root \u4e0e\u5f53\u524d dfs \u4e0d\u540c\u7684\u9876\u70b9\u65f6\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2a\u89e3\uff0c\u6b64\u65f6\u5206\u522b\u8f93\u51fa\u8fd9\u4e2a\u9876\u70b9\u5728\u4e24\u68f5\u751f\u6210\u6811\u4e0a\u7684\u8def\u5f84\u5373\u53ef\u3002\n\n\u53e6\u5916\uff0c\u56e0\u4e3a\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u8def\u5f84\u4e0d\u53ef\u80fd\u56de\u5230\u8d77\u70b9 $s$\uff0cdfs \u6784\u5efa\u751f\u6210\u6811\u65f6\u9700\u8981\u6392\u9664\u9876\u70b9 $s$\u3002\n\n## \u4ee3\u7801\n\n```cpp\nint n, m, s, par[200001], root[200001];\nvector<int> g[200001];\n\nvoid output(int v, int p) {\n    stack<int> s1, s2;\n    s2.push(v);\n    while (v) {\n        s1.push(v);\n        v = par[v];\n    }\n    while (p) {\n        s2.push(p);\n        p = par[p];\n    }\n    // output s1 and s2\n}\n\nbool dfs(int v, int p, int r) {\n    if (root[v] == r) {\n        return false;\n    }\n    if (par[v]) {\n        output(v, p);\n        return true;\n    }\n    par[v] = p;\n    root[v] = r;\n    for (int i=0; i<g[v].size(); i++) {\n        if (dfs(g[v][i], v, r)) return true; \n    }\n    return false;\n}\n\nint main() {\n    cin >> n >> m >> s;\n    int a, b;\n    for (int i=0; i<m; i++) {\n        cin >> a >> b;\n        if (b == s) continue;\n        g[a].push_back(b);\n    }\n\n    for (int i=0; i<g[s].size(); i++) {\n        if (dfs(g[s][i], s, g[s][i])) {\n            return 0;\n        }\n    }\n    cout << \"Impossible\" << endl;\n}\n```\n",
        "postTime": 1650386248,
        "uid": 168229,
        "name": "dreamsky",
        "ccfLevel": 0,
        "title": "CF1666L\u9898\u89e3"
    },
    {
        "content": "# CF1666L\n\n~~\u8fd9\u9898\u5f88\u8be1\u5f02\u3002~~\n\n\u8fd9\u9898\u5927\u6982\u662f\u8fd9\u4e2a\u610f\u601d\uff0c\u5c31\u662f\u6211\u4eec\u4ece\u70b9\u51fa\u53d1\u968f\u4fbf\u627e\u4e24\u4e2a\u7b2c\u4e00\u6b65\u8d70\u7684\u662f\u4e0d\u4e00\u6837\u7684\u8282\u70b9\u7684\u8def\u5f84\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u8def\u5f84\u51fa\u73b0\u4e86\u4ea4\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53bb\u8fd9\u4e2a\u4ea4\u70b9\u4e3a\u7ec8\u70b9\u3002\u53ef\u4ee5\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5206\u522b\u6ca1\u4e3e\u7b2c\u4e00\u6b65\u8d70\u54ea\u4e9b\u70b9\uff0c\u7136\u540e dfs \u4e00\u904d\uff0c\u628a\u6240\u6709\u8fd9\u4e2a\u70b9\u80fd\u8d70\u5230\u7684\u76ee\u524d\u6ca1\u6709\u67d3\u8fc7\u8272\u7684\u70b9\u90fd\u67d3\u6210\u8fd9\u4e2a\u70b9\u7684\u6807\u53f7\uff0c\u5728\u8fd9\u91cc\u5982\u679c\u67d0\u4e00\u6b21 dfs \u5230\u4e86\u4e00\u4e2a\u67d3\u8fc7\u5176\u4ed6\u989c\u8272\u7684\u70b9\uff0c\u8bf4\u660e\u6211\u4eec\u5c31\u627e\u5230\u7b54\u6848\u4e86\u3002\n\n\u8fd9\u662f\u53ea\u8981\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u8bb0\u5f55\u4e00\u4e0b dfs \u662f\u4ece\u54ea\u513f\u8f6c\u79fb\u5230\u7684\uff0c\u5c31\u80fd\u7b97\u51fa\u7b54\u6848\u3002\n\n```c++\nvoid dfs(int u,int ty){\n\tfor(int i:v[u]){\n\t\tif(lst[i]!=0&&br[i]!=ty&&i!=s){\n\t\t\tvi path1;\n\t\t\tint x=i;\n\t\t\twhile(x!=s){\n\t\t\t\tpath1.pb(x);\n\t\t\t\tx=lst[x]-100;\n\t\t\t}\n\t\t\tpath1.pb(x);\n\t\t\treverse(all(path1));\n\t\t\tvi path2(1,i);\n\t\t\tx=u;\n\t\t\twhile(x!=s){\n\t\t\t\tpath2.pb(x);\n\t\t\t\tx=lst[x]-100;\n\t\t\t}\n\t\t\tpath2.pb(x);\n\t\t\treverse(all(path2));\n\t\t\tcout<<\"Possible\\n\"<<sz(path1)<<\"\\n\";\n\t\t\trep(j,sz(path1))cout<<path1[j]+1<<\" \";\n\t\t\tcout<<\"\\n\"<<sz(path2)<<\"\\n\";\n\t\t\trep(j,sz(path2))cout<<path2[j]+1<<\" \";\n\t\t\texit(0);\n\t\t}\n\t\telse if(lst[i]==0){\n\t\t\tlst[i]=u+100;\n\t\t\tbr[i]=ty;\n\t\t\tdfs(i,ty);\n\t\t}\n\t}\n}\nvoid run(){\n\tcin>>n>>m>>s;\n\ts--;\n\trep(i,m){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tx--,y--;\n\t\tv[x].pb(y);\n\t}\n\tlst[s]=100+s;\n\tbr[s]=-1;\n\trep(i,sz(v[s])){\n\t\tif(lst[v[s][i]]!=0){\n\t\t\tcout<<\"Possible\\n2\\n\"<<s+1<<\" \"<<v[s][i]+1<<\"\\n\";\n\t\t\tvi path(1,v[s][i]);\n\t\t\tint x=v[s][i];\n\t\t\twhile(x!=s){\n\t\t\t\tx=lst[x]-100;\n\t\t\t\tpath.pb(x);\n\t\t\t}\n\t\t\treverse(all(path));\n\t\t\tcout<<sz(path)<<\"\\n\";\n\t\t\trep(i,sz(path))cout<<path[i]+1<<\" \";\n\t\t\tcout<<\"\\n\";re;\n\t\t}\n\t\tlst[v[s][i]]=s+100;\n\t\tbr[v[s][i]]=i;\n\t\tdfs(v[s][i],i);\n\t}\n\tcout<<\"Impossible\\n\";\n}\n```",
        "postTime": 1650091222,
        "uid": 483879,
        "name": "hyman00",
        "ccfLevel": 0,
        "title": "CF1666L\u9898\u89e3"
    }
]