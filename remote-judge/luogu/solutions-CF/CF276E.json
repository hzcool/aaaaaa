[
    {
        "content": "## \u7b97\u6cd5\u6982\u8ff0\n\n \u663e\u7136\uff0c\u6811\u7684\u5f62\u6001\u5c31\u662f\u6839\u4e0a\u6302\u4e86\u5f88\u591a\u6761\u94fe\uff0c\u8003\u8651\u5229\u7528\u8fd9\u4e2a\u5f62\u6001\u7684\u7279\u6b8a\u6027\u3002\n\n\u9996\u5148\uff0c\u5982\u679c\u8ddd\u79bb $d$ \u4ee5\u5185\u7684\u70b9\u5747\u4e0e $u$ \u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u90a3\u4e48\u5f88\u597d\u5904\u7406\uff0c\u76f4\u63a5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u94fe\u4e0a\u7684\u533a\u95f4\u6743\u503c\u5373\u53ef\uff0c\u56e0\u4e3a\u540c\u4e00\u6761\u94fe\u4e0a\u7684\u70b9dfs\u5e8f\u662f\u8fde\u7eed\u7684\uff0c\u4ee5\u4e0b\u7528 $id[u]$ \u8868\u793a\u8282\u70b9 $u$ \u7684dfs\u5e8f\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u5e76\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\uff0c\u8fd9\u4e2a $d$ \u5b8c\u5168\u6709\u53ef\u80fd\u8d85\u8fc7 $dep[u]$\uff0c\u90a3\u4e48\u5c31\u4f1a\u7ed5\u8fc7\u6839\u5f71\u54cd\u5230 $u$ \u6240\u5728\u7684\u94fe\u4ee5\u5916\u7684\u70b9\uff0c\u5982\u679c\u76f4\u63a5\u5c06\u94fe\u4ee5\u5916\u7684\u70b9\u7684\u6743\u503c\u4e5f\u4e00\u540c\u5904\u7406\u4e86\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u4e0d\u884c\u3002\n\n\u8003\u8651\u5728\u6839\u4e0a\u6302\u6807\u8bb0\uff0c\u5c06\u9700\u8981\u589e\u52a0\u7684\u70b9\u6743\u6682\u65f6\u4fdd\u7559\u5728\u6839\u4e0a\u3002\u4ee5 $val[i]$ \u8868\u793a\u8ddd\u79bb\u6839 $i$ \u4ee5\u5185\u7684\u70b9\u9700\u8981\u52a0\u4e0a\u7684\u6743\u503c\uff0c\u8fd9\u4e2a\u5b9a\u4e49\u7b49\u4ef7\u4e8e\u6df1\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $i$ \u7684\u70b9\u9700\u8981\u52a0\u4e0a\u7684\u6743\u503c\uff08\u5b9a\u4e49\u6839\u8282\u70b9\u6df1\u5ea6\u4e3a0\uff09\u3002\n\n\u6211\u4eec\u7528 $dep[u]$ \u8868\u793a\u8282\u70b9 $u$ \u7684\u6df1\u5ea6\uff0c\u90a3\u4e48\u5728\u67e5\u8be2\u8282\u70b9 $u$ \u65f6\uff0c\u5176\u4fdd\u7559\u5728\u6839\u4e0a\u7684\u8fd8\u9700\u589e\u52a0\u7684\u70b9\u6743\u5373\u4e3a $val[dep[u],dep[u]+1,\u2026,n-1]$\uff08\u4e00\u5171 $n$ \u4e2a\u8282\u70b9\uff0c\u6df1\u5ea6\u6700\u5927\u4e3a $n-1$\uff09\uff0c\u4e5f\u5c31\u662f\u4e00\u6bb5\u540e\u7f00\u548c\uff0c\u6545\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5f88\u597d\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u7b97\u6cd5\uff1a\n\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff1a\u82e5 $d<dep[u]$\uff0c\u76f4\u63a5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\uff1b\u82e5 $d>=dep[u]$\uff0c\u5219\u5148\u5728\u6839\u4e0a\u52a0\u6807\u8bb0\uff0c$val[d-dep[u]]$ \u52a0\u4e0a $x$\uff0c\u7136\u540e\u5904\u7406\u94fe\uff0c\u7531\u4e8e\u5728\u6839\u4e0a\u52a0\u4e86\u6807\u8bb0\u4e4b\u540e\uff0c\u539f\u94fe\u4e0a\u8ddd\u79bb\u6839 $d-dep[u]$ \u4ee5\u5185\u7684\u70b9\u5df2\u7ecf\u88ab\u8986\u76d6\u4e86\uff0c\u6240\u4ee5\u8003\u8651\u6709\u6ca1\u6709\u8fc7\u591a\u8986\u76d6\uff08\u5373\u8986\u76d6\u7684\u8303\u56f4\u8d85\u51fa\u4e86\u672c\u6765\u9700\u8981\u4fee\u6539\u7684\u8303\u56f4\uff09\uff0c\u8fd9\u663e\u7136\u4e0d\u53ef\u80fd\uff08\u53cd\u8bc1\uff1a\u82e5\u8fc7\u591a\u8986\u76d6\uff0c\u5373 $d-dep[u]>dep[u]+d => dep[u]<0$\uff0c\u77db\u76fe\uff01\uff09\u3002\u6240\u4ee5\u5df2\u8986\u76d6\u7684\u8303\u56f4\u662f\u5fc5\u7136\u5c0f\u4e8e\u7b49\u4e8e\u6211\u4eec\u539f\u672c\u9700\u8981\u8986\u76d6\u7684\u8303\u56f4\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8003\u8651\u8fd8\u9700\u4fee\u6539\u7684\u8303\u56f4\uff08\u4f46\u662f\u5df2\u8986\u76d6\u7684\u8303\u56f4\u53ef\u80fd\u5df2\u7ecf\u5305\u62ec\u4e86\u94fe\u7684\u672b\u7aef\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u7279\u5224\uff09\u3002\u8fd9\u4e2a\u8303\u56f4\u7684\u9876\u7aef\u663e\u7136\u662f\u94fe\u9876\uff08$id[u]-dep[u]+1$\uff09\u52a0\u4e0a\u5df2\u8986\u76d6\u7684\u8303\u56f4\uff08$d-dep[u]$\uff09\uff0c\u5373 $id[u]-2*dep[u]+d+1$\uff0c\u800c\u672b\u7aef\u53ef\u80fd\u4e3a\u539f\u94fe\u7684\u94fe\u5c3e\uff08$id[u]+len[ch[u]]-dep[u]$\uff09\uff0c\u4e5f\u6709\u53ef\u80fd\u662f $id[u]+d$\uff0c\u4e24\u8005\u76f8\u6bd4\u8f83\u4e00\u4e0b\u53d6\u5c0f\u5373\u53ef\u3002\u7136\u540e\u5bf9\u4e8e\u8fd9\u4e2a\u8303\u56f4\uff0c\u7528\u7ebf\u6bb5\u6811\u505a\u4e00\u4e0b\u533a\u95f4\u4fee\u6539\u5373\u53ef\u3002\n\n\u4e3a\u4e86\u5feb\u901f\u5f97\u5230\u94fe\u5c3e\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u51fa $ch[u]$ \u8868\u793a\u8282\u70b9 $u$ \u6240\u5728\u7684\u94fe\u7684\u7f16\u53f7\uff0c$len[i]$ \u8868\u793a\u7f16\u53f7\u4e3a $i$ \u7684\u94fe\u7684\u957f\u5ea6\uff0c\u5373\u94fe\u5c3e\u8282\u70b9\u7684\u6df1\u5ea6\u3002\n\n\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff1a\u4e00\u90e8\u5206\u662f\u5df2\u4fee\u6539\u7684\u6743\u503c\uff0c\u76f4\u63a5\u7ebf\u6bb5\u6811\u5355\u70b9\u67e5\u8be2\u5373\u53ef\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u5f85\u4fee\u6539\u7684\u6743\u503c\uff0c\u88ab\u6211\u4eec\u6302\u5728\u6839\u4e0a\uff0c\u6545\u6811\u72b6\u6570\u7ec4\u533a\u95f4\u67e5\u8be2\u540e\u7f00\u548c\u5373\u53ef\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff0c\u7531\u4e8e\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u4e0b\u6807\u8303\u56f4\u662f\u4ece1\u5f00\u59cb\u7684\uff0c\u800c\u6211\u4eec\u7684\u6df1\u5ea6\u6700\u5c0f\u662f0\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728\u5bf9\u6811\u72b6\u6570\u7ec4\u6267\u884c\u64cd\u4f5c\u65f6\u7684\u4e0b\u6807\u6574\u4f53\u540e\u79fb\u4e00\u4f4d\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u662f $O(mlogn)$\u3002\n## \u53c2\u8003\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=1e5+10;\nstruct Edge{\n\tint to,next;\n}edge[N<<1];int idx;\nint h[N];\n\nvoid add_edge(int u,int v){edge[++idx]={v,h[u]};h[u]=idx;}\n\nstruct Segment_Tree{\n\tint l,r;\n\tll sum;\n\tll add;\n\t#define l(p) tree[p].l\n\t#define r(p) tree[p].r\n\t#define sum(p) tree[p].sum\n\t#define add(p) tree[p].add\n}tree[N<<2];\n\nvoid push_up(int p){sum(p)=sum(p<<1)+sum(p<<1|1);}\n\nvoid spread(int p)\n{\n\tif(add(p))\n\t{\n\t\tsum(p<<1)+=add(p)*(r(p<<1)-l(p<<1)+1);\n\t\tsum(p<<1|1)+=add(p)*(r(p<<1|1)-l(p<<1|1)+1);\n\t\tadd(p<<1)+=add(p);\n\t\tadd(p<<1|1)+=add(p);\n\t\tadd(p)=0; \n\t}\n}\n\nvoid build(int p,int l,int r)\n{\n\tl(p)=l,r(p)=r;\n\tif(l==r)return;\n\tint mid=l+r>>1;\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n}\n\nvoid change(int p,int l,int r,int v)\n{\n\tif(l<=l(p)&&r>=r(p))\n\t{\n\t\tsum(p)+=(ll)v*(r(p)-l(p)+1);\n\t\tadd(p)+=v;\n\t\treturn;\n\t}\n\tspread(p);\n\tint mid=l(p)+r(p)>>1;\n\tif(l<=mid)change(p<<1,l,r,v);\n\tif(r>mid)change(p<<1|1,l,r,v);\n\tpush_up(p);\n}\n\nint query(int p,int pos)\n{\n\tif(l(p)==r(p))return sum(p);\n\tspread(p);\n\tint mid=l(p)+r(p)>>1;\n\tif(pos<=mid)return query(p<<1,pos);\n\telse return query(p<<1|1,pos);\n}\n\nint dep[N],id[N];\nint len[N],ch[N];\nint timestamp,cnt;\n\nvoid dfs(int p,int f,int ch_id)\n{\n\tid[p]=++timestamp;\n\tdep[p]=dep[f]+1;\n\tch[p]=ch_id; //\u5904\u7406\u94fe\u7684\u7f16\u53f7 \n\tlen[ch_id]=max(len[ch_id],dep[p]); //\u6bcf\u6761\u94fe\u7684\u6700\u5927\u6df1\u5ea6 \n\tfor(int i=h[p];~i;i=edge[i].next)\n\t{\n\t\tint to=edge[i].to;\n\t\tif(to==f)continue;\n\t\tdfs(to,p,ch_id);\n\t}\n}\n\nvoid init()\n{\n\tdep[1]=0;\n\tid[1]=++timestamp;\n\tfor(int i=h[1];~i;i=edge[i].next)\n\t{\n\t\tint to=edge[i].to;\n\t\tdfs(to,1,++cnt);\n\t}\n}\n\nint tr[N];\nint n,m;\n\nint lowbit(int x){return x&-x;}\n\nvoid add_tree(int x,int y){for(;x<=n;x+=lowbit(x))tr[x]+=y;}\n\nint ask(int x)\n{\n\tint ans=0;\n\tfor(;x;x-=lowbit(x))ans+=tr[x];\n\treturn ans;\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tmemset(h,-1,sizeof h);\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tint u,v;scanf(\"%d%d\",&u,&v);\n\t\tadd_edge(u,v);\n\t\tadd_edge(v,u);\n\t}\n\tinit();\n\tbuild(1,1,n);\n\twhile(m--)\n\t{\n\t\tint tp;scanf(\"%d\",&tp);\n\t\tif(!tp) //\u4fee\u6539\u64cd\u4f5c \n\t\t{\n\t\t\tint u,x,d;scanf(\"%d%d%d\",&u,&x,&d);\n\t\t\tif(u==1)add_tree(d+1,x); //\u6839\u8282\u70b9\u76f4\u63a5\u7279\u6b8a\u5904\u7406\uff0cd+1\u662f\u4e0b\u6807\u540e\u79fb\u4e00\u4f4d \n\t\t\telse if(d<dep[u]) //\u5b8c\u5168\u5728\u94fe\u4e0a\u7684\u60c5\u51b5 \n\t\t\t\tchange(1,max(id[u]-d,id[u]-dep[u]+1),min(id[u]+len[ch[u]]-dep[u],id[u]+d),x); //\u9876\u7aef\u53d6max\uff0c\u672b\u7aef\u53d6min \n\t\t\telse //\u9700\u8981\u5728\u6839\u4e0a\u6302\u6807\u8bb0\u7684\u60c5\u51b5 \n\t\t\t{\n\t\t\t\tadd_tree(d-dep[u]+1,x); //\u5904\u7406\u6839\u4e0a\u7684\u6807\u8bb0\uff0c+1\u540c\u6837\u4e5f\u662f\u56e0\u4e3a\u4e0b\u6807\u540e\u79fb\u4e00\u4f4d \n\t\t\t\tif(id[u]+len[ch[u]]-dep[u]<id[u]+d-2*dep[u]+1)continue; //\u94fe\u5c3e<\u672a\u88ab\u8986\u76d6\u7684\u7b2c\u4e00\u4e2a\u70b9\uff0c\u5373\u94fe\u5c3e\u5df2\u88ab\u8986\u76d6 \n\t\t\t\tchange(1,id[u]+d-2*dep[u]+1,min(id[u]+len[ch[u]]-dep[u],id[u]+d),x); //\u672b\u7aef\u53d6min \n\t\t\t}\n\t\t}\n\t\telse //\u67e5\u8be2\u64cd\u4f5c \n\t\t{\n\t\t\tint u;scanf(\"%d\",&u);\n\t\t\tint ans=query(1,id[u]); //\u5df2\u7ecf\u88ab\u4fee\u6539\u7684\u90e8\u5206 \n\t\t\tint sum=ask(n)-ask(dep[u]); //\u8fd8\u4fdd\u7559\u5728\u6839\u4e0a\u7684\u5f85\u4fee\u6539\u90e8\u5206\uff0c\u8303\u56f4\u662f[dep[u],n-1]\uff0c\u4e0b\u6807\u540e\u79fb\u4e00\u4f4d[dep[u]+1,n]\n\t\t\t//\u7531\u4e8e\u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u7684\u662f\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u67e5\u8be21~n\u548c1~dep[u]\u76f8\u51cf\u5373\u53ef\u3002 \n\t\t\tprintf(\"%d\\n\",ans+sum); //\u4e24\u90e8\u5206\u76f8\u52a0\u5373\u4e3a\u7b54\u6848 \n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```\n\n",
        "postTime": 1597712450,
        "uid": 204937,
        "name": "\u7396\u68a6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF276E \u3010Little Girl and Problem on Trees\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u5947\u602a\u7684\u500d\u589e\u505a\u6cd5\uff0c\u4f46\u662f\u53ef\u7528\u4e8e\u5904\u7406\u6709\u8fb9\u6743\u7684\u60c5\u51b5\u3002\n\n\u9996\u5148\u5206\u6790\u9898\u76ee\u7684\u6761\u4ef6\uff0c\u53d1\u73b0\u5b83\u662f\u4e00\u4e2a\u83ca\u82b1\u4e0b\u9762\u6302\u4e86\u4e0d\u5c11\u6761\u94fe\u3002\n\n\u6211\u4eec\u53d1\u73b0\u4fee\u6539\u4e00\u4e2a\u64cd\u4f5c\uff0c\u6bd4\u8f83\u9ebb\u70e6\u5c1d\u8bd5\u628a\u5b83\u5206\u89e3\u6389\u3002\n\n\u4e00\u79cd\u60c5\u51b5\u662f\u4fee\u6539\u6839\u8282\u70b9\uff0c\u8fd9\u65f6\u5019\u76f4\u63a5\u628a\u6df1\u5ea6\u5c0f\u4e8e\u67d0\u4e2a\u503c\u7684\u5168\u90fd\u52a0\u4e0a\u53bb\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u662f\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u53e6\u5916\u4e00\u79cd\u60c5\u51b5\u7a0d\u5fae\u9ebb\u70e6\u4e00\u70b9\uff0c\u8003\u8651\u5b83\u6ca1\u6709\u8986\u76d6\u6839\u8282\u70b9\uff0c\u90a3\u548b\u529e\uff0c\u76f8\u5f53\u4e8e\u662f\u4e00\u6761\u94fe\u4e0a\u7684\u4fee\u6539\u3002\n\n\u94fe\u4e0a\u4fee\u6539\u53ef\u4ee5\u76f4\u63a5\u628a\u5b83\u62c6\u6210\u4e24\u6761\u94fe\uff0c\u5373 $[l,r]$ \u53d8\u6210 $[1,l-1]$ \u548c $[1,r]$ \u7684\u64cd\u4f5c\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u67e5\u8be2\u5b50\u6811\u548c\uff0c\u8fd9\u662f\u6811\u4e0a\u5dee\u5206\u7684\u57fa\u672c\u64cd\u4f5c\u3002\n\n\u5982\u679c\u8bf4\u5b83\u8986\u76d6\u4e86\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u8f6c\u5316\u4e3a\u7b2c\u4e00\u79cd\u60c5\u51b5\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8986\u76d6\u6839\u8282\u70b9\u53ef\u80fd\u4e5f\u4f1a\u8986\u76d6\u5f53\u524d\u7684\u94fe\u7684\u4e00\u90e8\u5206\uff0c\u8981\u628a\u5b83\u5148\u51cf\u53bb\u3002\n\n\u540c\u65f6\uff0c\u6211\u8fd9\u91cc\u7528\u4e86\u500d\u589e\u7684\u505a\u6cd5\uff0c\u53ef\u4ee5\u5904\u7406\u6709\u8fb9\u6743\u7684\u60c5\u51b5\u3002\n\n\u5373\uff0c\u5f53\u524d\u8df3\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u94fe\u5c3e\u548c\u94fe\u5934\u3002\n\n\u6ce8\u610f\u8fd9\u8fb9\u513f\u5b50\u4e5f\u8981\u8fdb\u884c\u500d\u589e\u3002\n\n\u5f53\u7136\u4f60\u4e5f\u5b8c\u5168\u53ef\u4ee5\u628a\u5b83\u53d8\u6210 DFS \u5e8f\uff0c\u7136\u540e\u5728 DFS \u5e8f\u4e0a\u76f4\u63a5\u4fee\u6539\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u6761\u94fe\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#define int long long \nusing namespace std;\nconst int INF=3e5+5;\nstruct _node_edge{\n\tint to_,next_;\n}edge[INF<<1];\nint n,q,head[INF],tot,dep[INF],pre[INF],dfn[INF],fa1[INF][25],son1[INF][25],sz[INF];\nvoid add_edge(int x,int y) {\n\tedge[++tot]=(_node_edge){y,head[x]};\n\thead[x]=tot;return ;\n}\nvoid DFS(int x,int fa) {\n\tfa1[x][0]=fa;sz[x]=1;\n\tdep[x]=dep[fa]+1;dfn[++dfn[0]]=x;pre[x]=dfn[0];\n//\tcout<<x<<\" \"<<pre[x]<<\" fadddddd\\n\";\n\tfor (int i=1;i<=23;i++)\n\t\tfa1[x][i]=fa1[fa1[x][i-1]][i-1];\n\tfor (int i=head[x];i;i=edge[i].next_) {\n\t\tint v=edge[i].to_;\n\t\tif (v==fa) continue;\n\t\tDFS(v,x);son1[x][0]=v;sz[x]+=sz[v];\n\t}\n\tfor (int i=1;i<=23;i++)\n\t\tson1[x][i]=son1[son1[x][i-1]][i-1];\n}\nstruct BIT{\n\tint tree[INF];\n\tvoid add(int x,int y) {for (int i=x;i<=1e5;i+=i&-i) tree[i]+=y;}\n\tint query(int x) {int sum=0;for (int i=x;i;i-=i&-i) sum+=tree[i];return sum;}\n}T1,T2;\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>n>>q;\n\tfor (int i=1;i<n;i++) {\n\t\tint x=0,y=0;cin>>x>>y;\n\t\tadd_edge(x,y);add_edge(y,x);\n\t}\n\tDFS(1,0);\n//\tcout<<pre[2]<<\" ????\\n\";\n\tfor (int i=1;i<=q;i++) {\n\t\tint op=0,x=0,y=0,z=0;cin>>op;\n\t\tif (op==0) {\n\t\t\tcin>>x>>z>>y;\n\t\t\tif (x==1) T1.add(y+1,z);\n\t\t\telse {\n\t\t\t\tif (dep[x]-y>=1) {\n//\t\t\t\t\tcout<<\" ok?\\n\";\n\t\t\t\t\tint xx=x,yy=dep[x]+y;\n\t\t\t\t\tfor (int i=23;i>=0;i--) {\n\t\t\t\t\t\tif (!son1[xx][i]) continue;\n\t\t\t\t\t\tif (dep[son1[xx][i]]>yy) continue;\n\t\t\t\t\t\txx=son1[xx][i];\n\t\t\t\t\t}\n\t\t\t\t\tT2.add(pre[xx],z);\n\t\t\t\t\t\n\t\t\t\t\txx=x,yy=dep[x]-y;\n\t\t\t\t\tfor (int i=23;i>=0;i--) {\n\t\t\t\t\t\tif (!fa1[xx][i]) continue;\n\t\t\t\t\t\tif (dep[fa1[xx][i]]<yy) continue;\n\t\t\t\t\t\txx=fa1[xx][i];\n\t\t\t\t\t}\n\t\t\t\t\txx=fa1[xx][0];\n\t\t\t\t\tif (xx) T2.add(pre[xx],-z);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tint xx=x,yy=dep[x]+y;\n\t\t\t\t\tfor (int i=23;i>=0;i--) {\n\t\t\t\t\t\tif (!son1[xx][i]) continue;\n\t\t\t\t\t\tif (dep[son1[xx][i]]>yy) continue;\n\t\t\t\t\t\txx=son1[xx][i];\n\t\t\t\t\t}\n//\t\t\t\t\tcout<<xx<<\" \"<<y-dep[x]+1<<\" over?\\n\";\n\t\t\t\t\tT2.add(pre[xx],z);\n\t\t\t\t\tT1.add(y-dep[x]+2,z);\n\t\t\t\t\txx=x,yy=y-dep[x]+2;int fl=0;\n\t\t\t\t\tif (dep[xx]>yy) fl=1;\n\t\t\t\t\tfor (int i=23;i>=0;i--) {\n\t\t\t\t\t\tif (!fa1[xx][i]) continue;\n\t\t\t\t\t\tif (dep[fa1[xx][i]]<=yy) continue;\n\t\t\t\t\t\txx=fa1[xx][i];\n\t\t\t\t\t}\n//\t\t\t\t\tcout<<fl<<\" faddd\\n\";\n\t\t\t\t\tif (fl) xx=fa1[xx][0];\n\t\t\t\t\tif (!fl) {\n\t\t\t\t\t\txx=x,yy=y-dep[x]+2;\n\t\t\t\t\t\tfor (int i=23;i>=0;i--) {\n\t\t\t\t\t\t\tif (!son1[xx][i]) continue;\n\t\t\t\t\t\t\tif (dep[son1[xx][i]]>yy) continue;\n\t\t\t\t\t\t\txx=son1[xx][i];fl=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n//\t\t\t\t\tif (!fl && dep[x]>=yy) continue;\n//\t\t\t\t\tcout<<xx<<\" fad?\\n\";\n\t\t\t\t\tT2.add(pre[xx],-z);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tint x=0;cin>>x;\n//\t\t\tcout<<T1.query(1e5)-T1.query(dep[x]-1)<<\" ??\\n\";\n\t\t\tcout<<T1.query(1e5)-T1.query(dep[x]-1)+T2.query(pre[x]+sz[x]-1)-T2.query(pre[x]-1)<<\"\\n\";\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1660042498,
        "uid": 208653,
        "name": "_edge_",
        "ccfLevel": 0,
        "title": "CF276E"
    },
    {
        "content": "\u633a\u6709\u8da3\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u5199\u5199\u9898\u89e3\u3002\u7528\u7684\u662f\u7ebf\u6bb5\u6811 qwq\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF276E)\n\n\u91cd\u65b0\u63cf\u8ff0\u4e00\u4e0b\u9898\u9762\uff0c\u8fd9\u9898\u76ee\u7ffb\u8bd1\u7ed9\u4e86\u4e2a\u9519\u7684\u3002\n\n\u7ed9\u4e00\u68f5\u6811\uff0c\u521d\u59cb\u70b9\u6743\u90fd\u4e3a $0$\uff0c\u4fdd\u8bc1\u9664\u4e86 $1$ \u53f7\u8282\u70b9\u4ee5\u5916\u7684\u8282\u70b9\u5ea6\u6570\u4e0d\u8d85\u8fc7 $2$\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u68f5\u6811\u5c31\u662f $1$ \u53f7\u8282\u70b9\u4e0b\u9762\u6302\u4e86\u82e5\u5e72\u6761\u94fe\u5f62\u6210\u7684\uff08\u4e0b\u6587\u63d0\u5230\u6839\u8282\u70b9\u4e0b\u6302\u7684\u94fe\u4e0d\u5305\u542b\u6839\u8282\u70b9\uff09\u3002\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n+ $(0,v,x,d)$\uff1a\u628a\u8ddd\u79bb $v$ \u53f7\u70b9\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $d$ \u7684\u70b9\u70b9\u6743\u52a0 $x$\u3002\n\n+ $(1,v)$\uff1a\u67e5\u8be2 $v$ \u53f7\u70b9\u7684\u70b9\u6743\u3002\n\n\u4e0d\u96be\u60f3\u5230 dfs \u8ba1\u7b97\u65f6\u95f4\u6233\u3002\u7531\u4e8e\u6b64\u9898\u6811\u7684\u5f62\u72b6\u7684\u7279\u6b8a\u6027\uff0c\u6839\u8282\u70b9\u4e0b\u6bcf\u4e00\u6761\u94fe\u4e0a\u7684\u65f6\u95f4\u6233\u90fd\u662f\u8fde\u7eed\u7684\uff0c\u5c31\u53ef\u4ee5\u628a\u6811\u4e0a\u7684\u4fee\u6539\u8f6c\u79fb\u5230\u5e8f\u5217\u4e0a\u7684\u533a\u95f4\u4fee\u6539\uff0c\u53c8\u60f3\u5230\u4e86\u5728\u65f6\u95f4\u6233\u4e0a\u5efa\u7acb\u7ebf\u6bb5\u6811\u3002\n\n\u5148\u8003\u8651\u4e24\u79cd\u6700\u7b80\u5355\u7684\u60c5\u51b5\u3002\n\n\u7b2c\u4e00\u79cd\u7b80\u5355\u60c5\u51b5\uff0c\u5982\u679c $x$ \u5411\u4e0a\u8d70 $d$ \u7684\u8ddd\u79bb\u4e4b\u540e\u8fd8\u5728\u8fd9\u6761\u94fe\u4e0a\uff0c\u90a3\u6211\u4eec\u76f4\u63a5\u8fdb\u884c\u4e00\u4e2a\u533a\u95f4\u52a0\u5373\u53ef\u3002\u4e3a\u4e86\u4e0d\u8d8a\u754c\uff0cdfs \u7684\u65f6\u5019\u53ef\u4ee5\u5904\u7406\u51fa\u6765\u6bcf\u4e2a\u70b9\u6240\u5728\u94fe\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\u3002\n\n\u9ebb\u70e6\u7684\u60c5\u51b5\u662f\u5411\u4e0a\u8d70 $d$ \u7684\u8ddd\u79bb\u5c31\u8d85\u8fc7\u94fe\u4e0a\u6700\u9ad8\u70b9\u4e86\uff0c\u6b64\u65f6\u9700\u8981\u8d70\u5230\u6839\u8282\u70b9\uff0c\u518d\u8fdb\u884c\u4e00\u4e2a\u62d0\u5f2f\u3002\n\n\u7b2c\u4e8c\u79cd\u7b80\u5355\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u59a8\u8003\u8651\u5bf9\u6839\u8282\u70b9\u6267\u884c\u7b2c\u4e00\u79cd\u64cd\u4f5c\u7684\u60c5\u51b5\uff0c\u4e0d\u96be\u53d1\u73b0\u4fee\u6539\u7684\u70b9\u5176\u5b9e\u662f\u4e00\u4e2a\u6df1\u5ea6\u8303\u56f4\u5185\u7684\u6240\u6709\u70b9\u3002\u4f8b\u5982\u8981\u4fee\u6539\u8ddd\u79bb\u6839\u8282\u70b9\u4e0d\u8d85\u8fc7 $114$ \u7684\u6240\u6709\u70b9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4fee\u6539\u6240\u6709\u6df1\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $115$ \u7684\u70b9\uff01\u6b64\u65f6\u6211\u4eec\u60f3\u8981\u4fee\u6539\u8fd9\u4e9b\u6240\u6709\u7684\u70b9\u5f88\u56f0\u96be\uff0c\u53ef\u4ee5\u518d\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u5efa\u7acb\u5728\u6df1\u5ea6\u4e0a\uff0c\u8868\u793a\u4e00\u4e2a\u6df1\u5ea6\u4e0a\u7684\u6240\u6709\u70b9\u88ab\u4e00\u8d77\u52a0\u4e86\u591a\u5c11\u3002\u67e5\u8be2\u7684\u65f6\u5019\u4e00\u4e2a\u70b9\u7684\u7b54\u6848\u5c31\u662f\u8bb0\u5f55\u5728\u7b2c\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e0a\u7684\u6743\u503c\u52a0\u4e0a\u5b83\u6240\u5728\u6df1\u5ea6\u5e94\u8be5\u52a0\u4e0a\u7684\u503c\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e24\u79cd\u7b80\u5355\u7684\u60c5\u51b5\u7ed3\u5408\u8d77\u6765\u4f3c\u4e4e\u5c31\u53ef\u4ee5\u5e94\u5bf9\u6240\u6709\u60c5\u51b5\u4e86\u3002\u4e5f\u5c31\u662f\u5148\u5728\u94fe\u4e0a\u533a\u95f4\u4fee\u6539\uff0c\u5982\u679c\u8fd8\u6ca1\u8d70\u5230\u5934\uff0c\u8ba1\u7b97\u4e00\u4e0b\u8d70\u5230\u6839\u8282\u70b9\u518d\u62d0\u5f2f\u4e0b\u6765\u8981\u4fee\u6539\u591a\u5c11\u6df1\u5ea6\u7684\u8282\u70b9\u3002\u6ce8\u610f\u4e24\u6b21\u7684\u64cd\u4f5c\u53ef\u80fd\u4f1a\u91cd\u590d\u4fee\u6539\u4e00\u6bb5\u8282\u70b9\uff0c\u6c42\u51fa\u6765\u9006\u64cd\u4f5c\u5373\u53ef\uff08\u533a\u95f4\u51cf\uff09\u3002\n\n\u8fb9\u754c\u4e4b\u7c7b\u7684\u8fd8\u662f\u633a\u7ec6\u8282\u7684\uff0c\u8981\u8c28\u614e\u3002\n\n\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100010;\nint n,m;\nint read(){\n\tint ss=0,ww=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-')\n\t\t\tww=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tss=ss*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn ss*ww;\n}\nint head[N],to[N*2],nex[N*2],cnt;\nvoid add(int x,int y){\n\tcnt++;\n\tto[cnt]=y;\n\tnex[cnt]=head[x];\n\thead[x]=cnt;\n}\nint tp[N],bt[N],dfn[N],tot,dep[N],id[N];\nvoid dfs(int x,int f){\n\ttot++;\n\tid[tot]=x;\n\tdfn[x]=tot;\n\tdep[x]=dep[f]+1;\n\tif(f==1)\n\t\ttp[x]=dfn[x];\n\telse\n\t\ttp[x]=tp[f];\n\tbool b=0;\n\tfor(int i=head[x];i;i=nex[i]){\n\t\tint y=to[i];\n\t\tif(y==f)\n\t\t\tcontinue;\n\t\tb=1;\n\t\tdfs(y,x);\n\t\tbt[x]=bt[y];\n\t}\n\tif(!b)\n\t\tbt[x]=dfn[x];\n}\nstruct ST1{\n\tint tag;\n\tint sum;\n}st1[N*4];//\u5efa\u7acb\u5728\u65f6\u95f4\u6233\u4e0a\nstruct ST2{\n\tint tag;\n\tint sum;\n}st2[N*4];//\u5efa\u7acb\u5728\u6df1\u5ea6\u4e0a\nint res1;\nvoid push_down1(int root,int l,int r){\n\tint k=st1[root].tag;\n\tint mid=(l+r)/2;\n\tst1[root].tag=0;\n\tst1[root*2].tag+=k;\n\tst1[root*2+1].tag+=k;\n\tst1[root*2].sum+=(mid-l+1)*k;\n\tst1[root*2+1].sum+=(r-mid)*k;\n}\nvoid add1(int root,int l,int r,int x,int y,int k){\n\tif(l>=x&&r<=y){\n\t\tst1[root].tag+=k;\n\t\tst1[root].sum+=(r-l+1)*k;\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tpush_down1(root,l,r);\n\tif(mid>=x)\n\t\tadd1(root*2,l,mid,x,y,k);\n\tif(mid+1<=y)\n\t\tadd1(root*2+1,mid+1,r,x,y,k);\n}\nvoid ask1(int root,int l,int r,int x){\n\tif(l==r){\n\t\tres1=st1[root].sum;\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tpush_down1(root,l,r);\n\tif(mid>=x)\n\t\task1(root*2,l,mid,x);\n\telse\n\t\task1(root*2+1,mid+1,r,x);\n}\nint res2;\nvoid push_down2(int root,int l,int r){\n\tint k=st2[root].tag;\n\tint mid=(l+r)/2;\n\tst2[root].tag=0;\n\tst2[root*2].tag+=k;\n\tst2[root*2+1].tag+=k;\n\tst2[root*2].sum+=(mid-l+1)*k;\n\tst2[root*2+1].sum+=(r-mid)*k;\n}\nvoid add2(int root,int l,int r,int x,int y,int k){\n\tif(l>=x&&r<=y){\n\t\tst2[root].tag+=k;\n\t\tst2[root].sum+=(r-l+1)*k;\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tpush_down2(root,l,r);\n\tif(mid>=x)\n\t\tadd2(root*2,l,mid,x,y,k);\n\tif(mid+1<=y)\n\t\tadd2(root*2+1,mid+1,r,x,y,k);\n}\nvoid ask2(int root,int l,int r,int x){\n\tif(l==r){\n\t\tres2=st2[root].sum;\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tpush_down2(root,l,r);\n\tif(mid>=x)\n\t\task2(root*2,l,mid,x);\n\telse\n\t\task2(root*2+1,mid+1,r,x);\n}\nint main(){\n\tn=read();\n\tm=read();\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tx=read();\n\t\ty=read();\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tdfs(1,1);\n\twhile(m--){\n\t\tint opt;\n\t\topt=read();\n\t\tif(opt==0){\n\t\t\tint x,y,k;\n\t\t\tx=read();\n\t\t\tk=read();\n\t\t\ty=read();\n\t\t\tif(x==1){\n\t\t\t\tadd2(1,1,n,1,y+1,k);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tadd1(1,1,n,dfn[x],min(dfn[x]+y,bt[x]),k);\n\t\t\tif(dep[x]-2>=y)\n\t\t\t\tadd1(1,1,n,dfn[x]-y,dfn[x]-1,k);\n\t\t\telse{\n\t\t\t\tif(tp[x]!=dfn[x])\n\t\t\t\t\tadd1(1,1,n,tp[x],dfn[x]-1,k);\n\t\t\t\tint DEP=y-(dep[x]-dep[id[tp[x]]]);\n\t\t\t\tadd2(1,1,n,1,DEP,k);\n\t\t\t\tif(DEP!=1)\n\t\t\t\t\tadd1(1,1,n,tp[x],min(tp[x]+DEP-2,bt[x]),-k);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tint x;\n\t\t\tx=read();\n\t\t\tres1=0;\n\t\t\task1(1,1,n,dfn[x]);\n\t\t\tres2=0;\n\t\t\task2(1,1,n,dep[x]);\n\t\t\tprintf(\"%d\\n\",res1+res2);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1651327794,
        "uid": 140360,
        "name": "LKawaii",
        "ccfLevel": 0,
        "title": "CF276E \u9898\u89e3"
    },
    {
        "content": "CF276E Little Girl and Problem on Trees\n\n\u4e00\u4e2a\u5927\u83ca\u82b1\uff0c\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff0c\u5bf9\u8ddd\u79bb\u67d0\u4e2a\u70b9\u4e0d\u8d85\u8fc7 $d$ \u7684\u70b9\u52a0 $x$ \uff0c\u67e5\u8be2\u67d0\u4e2a\u70b9\u7684\u503c\u3002\n\n\u8003\u8651 $dfs$ \u5e8f + \u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n$1$ \u64cd\u4f5c\u53ef\u4ee5\u5148\u7279\u6b8a\u5904\u7406\u6839\uff0c\u5bf9\u4e8e\u4e0d\u662f\u6839\u7684\u70b9\u6211\u4eec\u663e\u7136\u6709\uff0c\u5982\u679c\u5230\u6839\u7684\u8ddd\u79bb\u5c0f\u4e8e  $d$ \uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u52a0\uff0c\u5982\u679c\u5927\u4e8e\u7b49\u4e8e $d$ \uff08\u8bbe\u8fd9\u4e2a\u70b9\u7684\u6df1\u5ea6\u4e3a $dep$ \uff09\u5c31\u9700\u8981\u8ba9\u6df1\u5ea6\u4e0d\u8d85\u8fc7 $d-dep$ \u7684\u70b9\u90fd\u52a0\u4e0a\u4e00\u4e2a\u6570\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u53e6\u4e00\u9897\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u771f\u5b9e\u7684\u503c\u5c31\u662f\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7684\u548c\u3002\n",
        "postTime": 1632479430,
        "uid": 179600,
        "name": "shao0320",
        "ccfLevel": 8,
        "title": "CF276E Little Girl and Problem on Trees"
    },
    {
        "content": "\u6709\u70b9\u610f\u601d\u7684\u6570\u636e\u7ed3\u6784\u9898\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u77e5\u9053\u8fd9\u4e2a\u9898\u4e00\u79cd\u53ef\u4ee5\u5927\u529b\u52a8\u6001\u70b9\u5206\u6cbb\uff0c\u7136\u540e\u518d\u5bf9\u70b9\u5206\u6811\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\u5c31\u5b8c\u4e8b\u513f\u3002\n\n\u4f46\u662f\uff0c\u6211\u4eec\u518d\u8bfb\u4e00\u904d\u82f1\u6587\u9898\u9762\uff0c\u4f1a\u53d1\u73b0\u8fd9\u68f5\u6811\u6709\u4e00\u4e2a\u5f88\u7279\u6b8a\u7684\u6027\u8d28\uff1a\u9664\u4e86\u6839\u8282\u70b9\uff0c\u5176\u4ed6\u70b9\u5ea6\u6570\u4e0d\u8d85\u8fc72\u3002\u6240\u4ee5\u8fd9\u68f5\u6811\u662f\u4e00\u4e2a\u6ca1\u6709\u67c4\u7684\u626b\u628a\u578b\u3002\u5b83\u7531\u5f88\u591a\u6761\u94fe\u5728\u6839\u8282\u70b9\u76f8\u4ea4\u800c\u6210\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5bf9\u4e8e\u4e00\u4e2a\u70b9$u$\uff0c\u548c\u5b83\u8ddd\u79bb$d$\u7684\u70b9\uff0c\u53ea\u53ef\u80fd\u548c\u5b83\u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u6216\u8005\u7ed5\u8fc7\u6839\u8282\u70b9\u8dd1\u5230\u5176\u4ed6\u5b50\u6811\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5bf9\u94fe\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\u56e0\u4e3a\u94fe\u4e0a\u7684dfs\u5e8f\u8fde\u7eed\uff0c\u6240\u4ee5\u5f88\u597d\u7ef4\u62a4\u94fe\u7684\u60c5\u51b5\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4fee\u6539\u4e0e$u$\u8ddd\u79bb$d$\u7684\u70b9\uff0c\u6700\u8fdc\u4f1a\u5bf9\u6bcf\u6761\u94fe\u7684\u67d0\u4e00\u5c42\u8282\u70b9\u4ea7\u751f\u5f71\u54cd\u3002\u6240\u4ee5\u6211\u4eec\u8981\u518d\u7edf\u4e00\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e00\u5c42\u7684\u4fe1\u606f\u3002\u8fd9\u4e00\u90e8\u5206\uff0c\u5bf9\u5c42\u6570\u4e5f\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u5c06\u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\u8fdb\u884c\u7edf\u4e00\uff0c\u5c31\u80fd\u5f97\u5230\u6b63\u89e3\uff1a\u7528\u4e24\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4fee\u6539\u548c\u67e5\u8be2\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e00\u4e2a\u70b9\u4e0d\u80fd\u540c\u65f6\u88ab\u4e24\u79cd\u60c5\u51b5\u8986\u76d6\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u8fdb\u884c\u4e00\u4e9b\u66f4\u7ec6\u8282\u7684\u8ba8\u8bba\uff0c\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u4ee3\u7801\uff0c\u6216\u8005\u81ea\u5df1\u753b\u56fe\u611f\u53d7\u4e00\u4e0b\u3002\n\n```cpp\n// Author: 23forever\n#include <bits/stdc++.h>\n#define pb push_back\n#define lson p << 1\n#define rson p << 1 | 1\nconst int MAXN = 100000;\nusing namespace std;\n\nint n;\n\nstruct SegmentTree {\n  struct Node {\n    int sum, tag;\n  } s[MAXN * 4 + 5];\n  SegmentTree() {}\n\n  void add(int p, int val, int len) {\n    s[p].sum += val * len, s[p].tag += val;\n  }\n  void pd(int p, int len) {\n    if (s[p].tag) {\n      add(lson, s[p].tag, len - len / 2);\n      add(rson, s[p].tag, len / 2);\n      s[p].tag = 0;\n    }\n  }\n  void upd(int p) {\n    s[p].sum = s[lson].sum + s[rson].sum;\n  }\n  void modify(int p, int l, int r, int x, int y, int val) {\n    if (x <= l && y >= r) {\n      add(p, val, r - l + 1); return;\n    }\n    pd(p, r - l + 1);\n    int mid = (l + r) >> 1;\n    if (x <= mid) modify(lson, l, mid, x, y, val);\n    if (y > mid) modify(rson, mid + 1, r, x, y, val);\n    upd(p);\n  }\n  int query(int p, int l, int r, int x) {\n    if (l == r) return s[p].sum;\n    pd(p, r - l + 1);\n    int mid = (l + r) >> 1;\n    if (x <= mid) {\n      return query(lson, l, mid, x);\n    } else {\n      return query(rson, mid + 1, r, x);\n    }\n  }\n\n} Chain, D;\n\nnamespace tree {\nvector < int > adj[MAXN + 5];\nint sz[MAXN + 5], depth[MAXN + 5], dfn[MAXN + 5], idx;\n\nvoid addEdge(int u, int v) {\n  adj[u].pb(v), adj[v].pb(u);\n}\n\nvoid dfs(int u, int fa) {\n  dfn[u] = ++idx;\n  for (int v: adj[u]) {\n    if (v == fa) continue; \n    depth[v] = depth[u] + 1, dfs(v, u);\n    sz[u] = sz[v] + 1;\n  }\n}\n\nvoid modify(int u, int x, int d) {\n  if (u == 1) {\n    D.modify(1, 1, n, 1, min(d + 1, n), x);\n    return;                 \n  } \n  \n  int dis = d - depth[u], qr = dfn[u] + min(d, sz[u]);\n  if (dis > 0) {\n    D.modify(1, 1, n, 1, dis + 1, x);\n    Chain.modify(1, 1, n, dfn[u] - depth[u] + dis + 1, qr, x);\n  } else if (dis == 0) {\n    Chain.modify(1, 1, n, 1, 1, x);\n    Chain.modify(1, 1, n, dfn[u] - d + 1, qr, x);\n  } else {\n    Chain.modify(1, 1, n, dfn[u] - d, qr, x);\n  }\n}\n\nint query(int u) {\n  return Chain.query(1, 1, n, dfn[u]) + D.query(1, 1, n, depth[u] + 1);\n}\n}\n\nint m;\n\nvoid init() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n\n  cin >> n >> m;\n  for (int i = 1; i < n; ++i) {\n    int u, v; cin >> u >> v;\n    tree::addEdge(u, v);\n  }\n  tree::dfs(1, 0);\n}\n\nint main() {\n#ifdef forever23\n  freopen(\"test.in\", \"r\", stdin);\n  freopen(\"test.out\", \"w\", stdout);\n#endif\n  init();\n\n  while (m--) {\n    int opt, u; cin >> opt >> u;\n    if (opt == 0) {\n      int x, d; cin >> x >> d;\n      tree::modify(u, x, d);     \n    } else {\n      cout << tree::query(u) << endl;\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1583369182,
        "uid": 53567,
        "name": "23forever",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF276E \u3010Little Girl and Problem on Trees\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/CF276E)\n\n\u70b9\u6570\uff1a2100\n\n#### \u6807\u7b7e\uff1a\n\n\u6b27\u62c9\u5e8f\uff0c\u6811\u72b6\u6570\u7ec4\uff0c\u7ebf\u6bb5\u6811\n\n#### \u5206\u6790\uff1a\n\n\u6ce8\u610f\u5230 $n \\leq 10^5$ \u548c $q\\leq 10^5$\uff0c\u90a3\u4e48\u7a7a\u95f4\u590d\u6742\u5ea6\u6700\u591a $O(n\\log n)$ \u548c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u591a\u4e3a $O(n\\log n+q\\log n)$\u3002\u610f\u5473\u7740\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4fee\u6539\u548c\u67e5\u8be2\u6211\u4eec\u53ea\u80fd\u7528 $O(\\log n)$ \u7684\u8303\u56f4\u5185\u5b9e\u73b0\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u5bf9\u4e8e\u4e24\u4e2a\u64cd\u4f5c\u6765\u8bf4\u5c31\u662f\u7ef4\u62a4\u7b2c\u4e00\u4e2a\uff0c\u67e5\u8be2\u7b2c\u4e8c\u4e2a\u3002\u90a3\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5230\u7ef4\u62a4\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u4e0a\u9762\u3002\n\n\u4f3c\u4e4e\u5728\u4e00\u4e2a\u6811\u4e0a\u53bb\u7ef4\u62a4\u8fd9\u6837\u4e00\u4e2a\u4fee\u6539\u5e76\u4e0d\u597d\u641e\uff0c\u6211\u4eec\u8fd4\u56de\u9898\u76ee\u3002\u9898\u76ee\u4e2d\u63d0\u5230\u9664 1 \u53f7\u8282\u70b9\u5916\uff0c\u5176\u4ed6\u8282\u70b9\u7684\u5ea6\u5747\u4e3a 2\uff0c\u4e14\u8fd9\u662f\u4e00\u68f5\u6811\u3002\u7ffb\u8bd1\u6210\u4eba\u8bdd\uff1a\u4e00\u5806\u94fe\uff0c\u8d77\u59cb\u8282\u70b9\u90fd\u662f 1 \u53f7\u8282\u70b9\u3002\n\n\u56de\u5230\u64cd\u4f5c\u4e0a\uff0c\u4f60\u4f1a\u53d1\u73b0\u64cd\u4f5c 1 \u5176\u5b9e\u662f\u5bf9\u6240\u6709\u6df1\u5ea6\u4e3a $d-dep_v$ \u548c\u5728\u5f53\u524d\u94fe\u4e0a\u8ddd\u79bb\u5c0f\u4e8e $d$ \u7684\u8282\u70b9\u8fdb\u884c\u533a\u95f4\u52a0\u6cd5\u3002\u4e0d\u96be\u60f3\u5230\u6b27\u62c9\u5e8f + \u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u4e0d\u59a8\u7ef4\u62a4\u4e24\u4e2a\u6b27\u62c9\u5e8f\uff0c\u4e00\u4e2a\u662f\u5bf9\u6df1\u5ea6\u7684\uff0c\u53e6\u4e00\u4e2a\u662f\u5bf9\u94fe\u7684\u3002\n\n\u6ce8\u610f\u5728\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u65f6\uff0c\u5982\u679c\u6df1\u5ea6\u8d85\u8fc7\u4e86 $d$ \u4e5f\u5c31\u662f\u8bf4 $dep_u>d$ \u7684\u8bdd\u53ea\u4f1a\u66f4\u6539\u5f53\u524d\u94fe\u7684\u3002\n\n\u603b\u590d\u6742\u5ea6\uff1a$O(n+q\\log n)$\u3002\u4e3b\u8981\u662f\u6811\u72b6\u6570\u7ec4\u3002\n\n#### \u4ee3\u7801\u89e3\u91ca\uff1a\n\n$fir_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u8282\u70b9\u6240\u5728\u94fe\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff08\u4e0d\u5305\u62ec 1 \u53f7\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff09\n\n$las_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u8282\u70b9\u6240\u5728\u94fe\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff08\u4e0d\u5305\u62ec 1 \u53f7\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff09\n\n$lin_i$ \u662f\u6309\u7167 dfs \u5e8f\u7684\u7f16\u53f7\u3002\n\n$dfn_i$ \u662f\u6309\u7167 bfs \u5e8f\u7684\u7f16\u53f7\u3002\n\n$in_i$ \u8868\u793a\u7b2c $i$ \u5c42\u7684\u521d\u59cb\u8282\u70b9\u3002\n\n$out_i$ \u8868\u793a\u7b2c $i$ \u5c42\u7684\u7ed3\u675f\u8282\u70b9\u3002\n\n#### \u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>//author:Yuby163\n#define mem(a,b) memset(a,b,sizeof(a));//C++20+O2 2.69KB 10.11s 70.31MB\n#define pc putchar\nusing namespace std;\ntypedef long long ll;\nconst ll INF=ll(1e9+7);\ninline ll lowbit(ll x){return x&(-x);}\ninline ll read(){ll read_result=0,is_below_0=0;char now_ch=0;while(!isdigit(now_ch)){is_below_0|=now_ch=='-';now_ch=getchar();}while(isdigit(now_ch)){read_result=(read_result<<3)+(read_result<<1)+(now_ch^48);now_ch=getchar();}return is_below_0?-read_result:read_result;}\ninline void write(ll x){if(x<0){putchar('-');x=-x;}if(x>9){write(x/10);}putchar(x%10+'0');}\nconst ll MAXN=4e5+7,MAXM=4e5+7;\nll head[MAXN],edgenum;\nll n,q,dep[MAXN];\nvector<ll>pos[MAXN];\nll dfn[MAXN],dfncnt[MAXN],in[MAXN],out[MAXN];//\u5bf9\u6bcf\u4e00\u5c42\u7ef4\u62a4\nll lin[MAXN],dfnn,las[MAXN],fa[MAXN],fir[MAXN];//\u5bf9\u6bcf\u4e00\u6761\u94fe\u7ef4\u62a4\nstruct node\n{\n\tll u,v,nxt,w;\n}edge[MAXM];\nstruct TREE\n{\n\tll tree[MAXN];\n\tvoid add(ll x,ll k)\n\t{\n\t\tfor(ll i=x;i<=n;i+=lowbit(i))\n\t\t\ttree[i]+=k;\n\t}\n\tll sum(ll x)\n\t{\n\t\tll res=0;\n\t\tfor(ll i=x;i>0;i-=lowbit(i))\n\t\t\tres+=tree[i];\n\t\treturn res;\n\t}\n\tll get_ans(ll x)\n\t{\n\t\treturn sum(x);\n\t}\n}t1,t2;//t1\u662f\u5bf9\u6bcf\u4e00\u5c42\u7ef4\u62a4\uff0ct2\u662f\u5bf9\u6bcf\u6761\u94fe\u7ef4\u62a4\nvoid add_edge(ll u,ll v)\n{\n\tedge[++edgenum].nxt=head[u];\n\tedge[edgenum].v=v;\n\tedge[edgenum].u=u;\n\thead[u]=edgenum;\n}\nvoid dfs(ll u,ll fat)\n{\n\tdfn[u]=++dfncnt[dep[u]];\n\tlin[u]=++dfnn;\n\tpos[dep[u]].push_back(u);\n\tlas[u]=dfnn;\n\tfor(ll i=head[u];i;i=edge[i].nxt)\n\t{\n\t\tll v=edge[i].v;\n\t\tif(v==fat)continue;\n\t\tdep[v]=dep[u]+1;\n\t\tfa[v]=u;\n\t\tdfs(v,u);\n\t\tif(u==1)fir[v]=lin[v];\n\t\tlas[u]=dfnn;\n\t}\n}\nvoid dfs1(ll u,ll fat)\n{\n\tfor(ll i=head[u];i;i=edge[i].nxt)\n\t{\n\t\tll v=edge[i].v;\n\t\tif(v==fat)continue;\n\t\tif(u!=1)fir[v]=fir[u];\n\t\tdfs1(v,u);\n\t}\n}\nvoid solve(ll v,ll x,ll d)\n{\n\tif(v==1)\n\t{\n\t\tt1.add(in[0],x);\n\t\tt1.add(out[d]+1,-x);\n\t}\n\telse if(dep[v]<=d)\n\t{\n\t\tt1.add(1,x);t1.add(out[d-dep[v]]+1,-x);\n\t\tt2.add(min(las[v]+1,fir[v]+d-dep[v]),x);\n\t\tt2.add(min(las[v],lin[v]+d)+1,-x);\n\t}\n\telse\n\t{\n\t\tt2.add(max(fir[v],lin[v]-d),x);\n\t\tt2.add(min(las[v],lin[v]+d)+1,-x);\n\t}\n}\nint main()\n{\n \t//freopen(\".in\",\"r\",stdin);\n    //freopen(\".out\",\"w\",stdout);\n    n=read(),q=read();\n    for(ll i=1;i<n;i++)\n    {\n    \tll u=read(),v=read();\n    \tadd_edge(u,v);\n    \tadd_edge(v,u);\n\t}\n\tdfs(1,0);dfs1(1,0);//\u9884\u5904\u7406\u51fa\u6b27\u62c9\u5e8f\n\tll pre=0;\n\tfor(ll i=0;i<=n;i++)\n\t{\n\t\tif(!dfncnt[i])break;\n\t\tin[i]=INF;\n\t\tfor(ll j=0;j<pos[i].size();j++)//\u628a\u6240\u6709\u7684\u6b27\u62c9\u5e8f\u8fde\u8d77\u6765\n\t\t{\n\t\t\tll son=pos[i][j];\n\t\t\tdfn[son]+=pre;\n\t\t\tin[i]=min(in[i],dfn[son]);\n\t\t\tout[i]=max(out[i],dfn[son]);\n\t\t}\n\t\tpre+=dfncnt[i];\n\t}\n\tfor(ll i=0;i<=n;i++)\n\t{\n\t\tif(out[i])continue;\n\t\tout[i]=n+1;in[i]=n+1;\n\t}\n\twhile(q--)\n\t{\n\t\tll op=read();\n\t\tif(op)\n\t\t{\n\t\t\tll v=read();\n\t\t\twrite(t1.get_ans(dfn[v])+t2.get_ans(lin[v])),pc(10);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tll v=read(),x=read(),d=read();\n\t\t\tsolve(v,x,d);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1646666164,
        "uid": 395288,
        "name": "Yuby",
        "ccfLevel": 6,
        "title": "CF276E\u9898\u89e3"
    },
    {
        "content": "\u7531\u4e8e\u9664\u4e86\u6839\u8282\u70b9\uff0c\u5176\u4ed6\u8282\u70b9\u7684\u5ea6\u6570\u90fd\u6700\u591a\u4e3a $2$ \uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u6839\u8282\u70b9\u4e0a\u6302\u4e86\u5f88\u591a\u7684\u94fe\u3002\u8bbe\u94fe\u7684\u6570\u91cf\u4e3a $k$ \uff0c\u8003\u8651\u7ef4\u62a4 $k$ \u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u5305\u542b\u64cd\u4f5c\u533a\u95f4\u52a0\u548c\u5355\u70b9\u6c42\u503c\u64cd\u4f5c\uff08\u5176\u5b9e\u662f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5dee\u5206\uff09\uff1b\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u6807\u8bb0\uff0c\u4ee3\u8868\u6839\u8282\u70b9\u7684\u503c\n\n\u8bbe\u8282\u70b9 $x$ \u6240\u5728\u94fe\u7684\u7f16\u53f7\u4e3a $mp[x]$  ,\u4e14 $x$ \u4e3a\u8be5\u94fe\u4e2d\u4e0b\u6807\u503c\u4e3a $pos[x]$ \u7684\u8282\u70b9\u3002\u90a3\u4e48\u7684\u5bf9\u4e8e $pos[x]\\geq d$ \u7684\u60c5\u5f62\u5f88\u5bb9\u6613\u5c31\u80fd\u89e3\u51b3\uff0c\u5373\u76f4\u63a5\u5728\u7ef4\u62a4\u8be5\u94fe\u4e0a\u7684\u6811\u72b6\u6570\u7ec4\u4e0a\u4fee\u6539\u3002\u90a3\u4e48\u5bf9\u4e8e $pos[x]<d$ \u7684\u60c5\u5f62\u6709\u5e94\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u8bbe $td=d-pos[x]$\uff0c\u5728\u6700\u540e\u4e00\u4e2d\u60c5\u5f62\u4e0b\u4fee\u6539\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u662f\u8fd9\u6837\u7684\u4e24\u6bb5\uff1a\u4e00\u6bb5\u662f\u4fee\u6539**\u8be5\u94fe**\u4e0a\u7684\u503c\uff0c\u53e6\u4e00\u7aef\u662f\u4fee\u6539**\u9664\u4e86\u8be5\u94fe**\u7684\u5176\u4ed6\u94fe\u7684\u524d $td$ \u4e2a\u503c\uff08\u5176\u5b9e\u8fd8\u6709\u7b2c\u4e09\u6bb5\u5c31\u662f\u6839\u8282\u70b9\u5f97\u52a0\u4e00\u4e0b\uff09\u3002\u660e\u663e\uff0c\u7b2c\u4e00\u6bb5\u4e5f\u5305\u542b\u524d $td$ \u4e2a\uff0c\u6545\u5c06\u7b2c\u4e00\u6bb5\u62c6\u5f00\uff0c\u53d8\u6210\u4fee\u6539**\u8be5\u94fe**\u4e0a\u7684 $[1,td]$ \u548c**\u8be5\u94fe**\u4e0a\u7684 $[td+1,pos[x]+d]$\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u5c06\u539f\u6765\u6240\u9700\u4fee\u6539\u7684\u4e24\u6bb5\u8f6c\u5316\u6210\u4e86\u8fd9\u6837\u7684\u4e24\u6bb5\uff1a\n\n(1).\u5c06**\u6240\u6709\u94fe**\u7684\u524d $td$ \u4e2a\u503c\u8fdb\u884c\u4fee\u6539\n\n(2).\u5c06**\u8be5\u94fe**\u7684 $[td+1,pos[x]+d]$ \u8fdb\u884c\u4fee\u6539\n\n\u5bf9\u4e8e(2)\u76f4\u63a5\u4fee\u6539\u5c31\u884c\u4e86\uff0c\u5173\u952e\u662f(1)\u3002\u8fd9\u4f7f\u6211\u4eec\u60f3\u5230\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u6240\u6709\u5171\u540c\u52a0\u7684\u64cd\u4f5c\u5c31\u52a0\u5728\u8fd9\u4e2a\u6811\u72b6\u6570\u7ec4\u5c31\u884c\u4e86\u3002\n\n\u67e5\u8be2\u64cd\u4f5c\u5c31\u5f88\u663e\u800c\u6613\u89c1\u4e86\uff0c\u53ea\u8981\u7b97\u5168\u5c40\u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u503c+\u6240\u5728\u94fe\u7684\u67e5\u8be2\u503c\u5373\u53ef\u3002\n\n```\n#include <bits/stdc++.h>\n#define MAXN 100009\nusing namespace std;\nint mp[MAXN],pos[MAXN],ltn;\nint d0; // the value in node 1\ndeque<int> G[MAXN];\ninline int lowbit(int x){ return x&(-x); }\nclass bitree{\n    vector<int> c;\n    int size;\npublic:\n    bitree() : c(1,0),size(0){}\n    inline void grow(){ c.push_back(0);++size; }\n    inline void build(int n){ c.resize(n+1);size=n;}\n    inline int length(){ return size; }\n    int getval(int x){\n        int sum=0;\n        for(int i=x;i;i-=lowbit(i))\n            sum+=c[i];\n        return sum;\n    }\n    void updata(int x,int d){\n        if(x>size) return;\n        for(int i=x;i<=size;i+=lowbit(i))\n            c[i]+=d;\n    }\n    void updata(int l,int r,int d){\n        updata(l,d);\n        updata(r+1,-d);\n    }\n} path,lt[MAXN];\nvoid dfs(int u,int fa,int ltid){\n    lt[ltid].grow();\n    mp[u]=ltid;\n    pos[u]=lt[ltid].length();\n    for(auto v:G[u]){\n        if(v==fa) continue;\n        dfs(v,u,ltid);\n    }\n}\nint main(){\n    int n,q;\n    scanf(\"%d%d\",&n,&q);\n    pos[0]=mp[0]=mp[1]=pos[1]=-1;\n    for(int i=1;i<n;i++){\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for(auto rt:G[1]){\n        dfs(rt,1,ltn);\n        ++ltn;\n    }\n    path.build(n);\n    while(q--){\n        int op;\n        scanf(\"%d\",&op);\n        if(op==0){\n            int v,x,d;\n            scanf(\"%d%d%d\",&x,&v,&d);\n            if(x==1){\n                d0+=v;\n                path.updata(1,d,v);\n            }\n            else if(pos[x]>d)\n                lt[mp[x]].updata(pos[x]-d,pos[x]+d,v);\n            else if(pos[x]==d){\n                lt[mp[x]].updata(1,pos[x]+d,v);\n                d0+=v;\n            }\n            else {\n                int td=d-pos[x];\n                path.updata(1,td,v);\n                lt[mp[x]].updata(td+1,pos[x]+d,v);\n                d0+=v;\n            }\n        }\n        else if(op==1){\n            int x;\n            scanf(\"%d\",&x);\n            if(x==1)\n                printf(\"%d\\n\",d0);\n            else\n                printf(\"%d\\n\",path.getval(pos[x])+lt[mp[x]].getval(pos[x]));\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1636188688,
        "uid": 482921,
        "name": "meizhuhe",
        "ccfLevel": 6,
        "title": "CF276E Little Girl and Problem on Trees \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.com.cn/problem/CF276E)\n\n\u7ffb\u8bd1\u91cc\u5fd8\u8bf4\u4e86\uff0c\u9664\u4e86$1$\u53f7\u70b9\uff0c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u6700\u591a\u4e3a$2$\uff0c~~\u4e5f\u5c31\u662f\u4e00\u4e2a\u5927\u83ca\u82b1~~\n\n\u90a3\u4e48\u9664\u4e86$1$\u53f7\u8282\u70b9\uff0c\u5176\u4ed6\u7684\u8282\u70b9\u90fd\u5c5e\u4e8e\u5176\u4e2d\u4e00\u6761\u94fe\n\n\u601d\u8def\u5f88\u7b80\u5355\uff1a\u5bf9\u4e8e\u4fee\u6539\u7684\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5b83\u5ef6\u4f38\u7684\u8303\u56f4\u6ca1\u6709\u8d85\u8fc7\u5b83\u6240\u5728\u7684\u94fe\u7684\u8303\u56f4\uff0c\u5c31\u53ea\u7528\u4fee\u6539\u8fd9\u6761\u94fe\u4e0a\u7684\u67d0\u4e00\u4e2a\u533a\u95f4\uff1b\u5426\u5219\u5176\u4ed6\u7684\u94fe\u4e5f\u8981\u4fee\u6539\n\n\u601d\u8def\u90fd\u5927\u540c\u5c0f\u5f02\uff0c\u5173\u952e\u662f\u600e\u4e48\u5199\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u81ea\u8ba4\u4e3a\u8f83\u4e3a\u7b80\u5355\u7684\u5199\u6cd5\uff1a\n\n- \u8981\u7ef4\u62a4\u7684\u64cd\u4f5c\n\n\u56e0\u4e3a\u53ea\u9700\u8981\u533a\u95f4\u4fee\u6539\u3001\u5355\u70b9\u67e5\u8be2\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u7ef4\u62a4\u61d2\u6807\u8bb0\uff0c\u76f4\u63a5\u5728\u5f53\u524d\u533a\u95f4\u6743\u503c\u52a0\uff0c\u9012\u5f52\u5230\u4e0b\u4e00\u5c42\u65f6\u4f20\u4e0b\u53bb\uff08\u5176\u5b9e\u5c31\u662f\u61d2\u6807\u8bb0\u548c\u6743\u503c\u5408\u6210\u4e00\u4e2a\u4e86\uff09\u3002\u8fd9\u6837\u5199\u8d77\u6765\uff0c\u611f\u89c9\u6bd4\u5dee\u5206\u7684\u6811\u72b6\u6570\u7ec4\u8981\u597d\u4e00\u70b9\uff0c\u4ee3\u7801\u91cf\u90fd\u5dee\u4e0d\u591a\uff08\u800c\u4e14\u90fd\u662f\u677f\u5b50\uff09\uff0c\u4f46\u7ec6\u8282\u6bd4\u6811\u72b6\u6570\u7ec4\u8981\u5c11\n\n```cpp\nstruct tree\n{\n\tint val[4*N];\n\tinline void pushdown(int p)\n\t{\n\t\tif(val[p])\n\t\t{\n\t\t\tval[p*2]+=val[p];\n\t\t\tval[p*2+1]+=val[p];\n\t\t\tval[p]=0;\n\t\t}\n\t}\n\tinline void change(int p,int left,int right,int l,int r,int c)\n\t{\n\t\tif(l>r) return;\n\t\tif(l<=left&&r>=right){ val[p]+=c; return; }\n\t\tpushdown(p);\n\t\tint mid=(left+right)/2;\n\t\tif(l<=mid) change(p*2,left,mid,l,r,c);\n\t\tif(r>mid) change(p*2+1,mid+1,right,l,r,c);\n\t}\n\tinline int query(int p,int left,int right,int pos)\n\t{\n\t\tif(left==right) return val[p];\n\t\tpushdown(p);\n\t\tint mid=(left+right)/2;\n\t\tif(pos<=mid) return query(p*2,left,mid,pos);\n\t\telse return query(p*2+1,mid+1,right,pos);\n\t}\n}t1,t2;\n```\n\n\n- \u7ebf\u6bb5\u6811\u7684\u4e2a\u6570\n\n\u56e0\u4e3a\u6709\u591a\u6761\u94fe\uff0c\u5f53\u7136\u53ef\u4ee5\u9009\u62e9\u5bf9\u6bcf\u4e00\u6761\u94fe\u90fd\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u4fee\u6539\u591a\u6761\u94fe\u65f6\uff0c\u4e00\u6761\u6761\u4fee\u6539\uff1f\u590d\u6742\u5ea6\u7206\u70b8\uff01\n\n\u9996\u5148\u6ca1\u6709\u5fc5\u8981\u5f00\u591a\u68f5\u7ebf\u6bb5\u6811\uff0c\u53ea\u8981\u4fdd\u8bc1\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u7684\u8282\u70b9\uff0c\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u4e0a\u662f\u6328\u5728\u4e00\u8d77\u7684\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684$dfs$\u5e8f\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\n\n\u90a3\u600e\u4e48\u540c\u65f6\u4fee\u6539\u591a\u6761\u94fe\u5462\uff1f\u6ce8\u610f\u5230\uff0c\u4fee\u6539\u591a\u6761\u94fe\u65f6\u90fd\u662f\u4ece$1$\u53f7\u70b9\u51fa\u53d1\uff0c\u6bcf\u6761\u94fe\u90fd\u56fa\u5b9a\u5730\u4ece\u8d77\u70b9\u4fee\u6539$dis$\u957f\u5ea6\uff0c\u5c31\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u540c\u5fc3\u5706\u6269\u6563\u51fa\u53bb\uff0c\u4e00\u5c42\u5c42\u4fee\u6539\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u8981\u591a\u6761\u94fe\u540c\u65f6\u4fee\u6539\uff0c\u90a3\u4e48\u540c\u4e00\u6df1\u5ea6\uff08\u540c\u4e00\u5c42\uff09\u7684\u8282\u70b9\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u662f\u6328\u5728\u4e00\u8d77\u7684\u3002\u6240\u4ee5\u6211\u4eec\u518d\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684$bfs$\u5e8f\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\n\n- \u5173\u4e8e\u7f16\u53f7\n\n\u81ea\u5df1\u5728\u505a\u8fd9\u9053\u9898\u65f6\uff0c\u628a\u4e0a\u9762\u201c\u7ebf\u6bb5\u6811\u7684\u4e2a\u6570\u201d\u60f3\u597d\u540e\uff0c\u5c31\u6025\u51b2\u51b2\u5730\u60f3\u5f00\u6253$dfs$\u548c$bfs$\u3002\u7136\u540e\u610f\u8bc6\u5230\uff0c\u9664\u4e86\u8981\u77e5\u9053\u6bcf\u4e2a\u8282\u70b9\u7684$dfs,bfs$\u5e8f\uff0c\u8fd8\u8981\u77e5\u9053\u5b83\u5c5e\u4e8e\u54ea\u6761\u94fe\uff0c\u6bcf\u4e00\u6761\u94fe\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\u7684$dfs$\u5e8f\uff0c\u5e76\u4e14\u56e0\u4e3a\u6bcf\u6761\u94fe\u7684\u957f\u5ea6\u4e0d\u540c\uff0c\u4e00\u5c42\u5c42\u6269\u6563\u51fa\u53bb\u65f6\uff0c\u53ef\u80fd\u6709\u7684\u94fe\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u6709\u7684\u94fe\u5374\u8fd8\u80fd\u5f80\u540e\uff0c\u6240\u4ee5\u8fd8\u8981\u77e5\u9053\u6bcf\u4e00\u6df1\u5ea6$bfs$\u5e8f\u6700\u5927\u662f\u591a\u5c11\uff0c\u597d\u9ebb\u70e6\uff01\uff01\uff01\n\n\u800c\u8fd9\u4e00\u5207\u90fd\u53ea\u662f\u56e0\u4e3a\u4e00\u4e2a\u95ee\u9898\uff1a\u6bcf\u6761\u94fe\u7684\u957f\u5ea6\u4e0d\u540c\uff01\u65e2\u7136\u5982\u6b64\uff0c\u90a3\u6211\u4eec\u624b\u52a8\u628a\u6bcf\u4e00\u6761\u94fe\u90fd\u62c9\u6210\u4e00\u6837\u957f\u7684\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\u628a\u6bcf\u4e00\u6761\u94fe\u7684\u957f\u5ea6\u90fd\u62c9\u6210\u6700\u957f\u90a3\u6761\u94fe\u90a3\u4e48\u957f\u5c31\u53ef\u4ee5\u4e86\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5199\u4f1a\u5f88\u7b80\u5355\uff1f\u53ea\u8981\u77e5\u9053\u4e86\u94fe\u7684\u4e2a\u6570$cnt$\uff0c\u6700\u957f\u7684\u94fe\u7684\u957f\u5ea6$maxn$\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6$dep[p]$\uff08$1$\u53f7\u70b9\u7684\u6df1\u5ea6\u4e3a$0$\uff09\uff0c\u548c\u5b83\u6240\u5c5e\u7684\u94fe$col[p]$\uff08\u4ece$1$\u5f00\u59cb\u7f16\u53f7\uff09\uff0c\u5c31\u80fd\u5feb\u901f\u8ba1\u7b97\u51fa\u4e0a\u9762\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f\uff0c\u4e5f\u4e0d\u7528\u771f\u7684\u53bb\u7ed9\u6bcf\u6761\u94fe\u540e\u9762\u52a0\u4e0a\u4e00\u4e9b\u65b0\u7684\u70b9\u3002\u60f3\u4e00\u60f3\u5c31\u77e5\u9053\u4e86\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8ba1\u7b97$p$\u7684$dfs,bfs$\u5e8f\uff1a\n\n$dfs(p)=(col[p]-1)\\times maxn+dep[p]$\n\n$bfs(p)=(dep[p]-1)\\times cnt+col[p]$\n\n\u73b0\u5728\u53ea\u9700\u8981\u679a\u4e3e\u4ece$1$\u51fa\u53d1\u7684\u6bcf\u4e2a\u70b9$dfs$\u5c31\u597d\u4e86\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u4e0a\u9762\u9700\u8981\u7684\u56db\u4e2a\u4fe1\u606f\n\n```cpp\nfor(int i=fir[1];i;i=e[i].nxt)//\u94fe\u5f0f\u524d\u5411\u661f\n{\n\tint q=e[i].to;\n\tcnt++,dfs(q,1);\n\tmaxn=max(maxn,h[cnt]);\n}\n\ninline void dfs(int p,int fa)\n{\n\tdep[p]=dep[fa]+1;\n\tfor(int i=fir[p];i;i=e[i].nxt)\n\t\tif(e[i].to!=fa) dfs(e[i].to,p);\n\tcol[p]=cnt,h[cnt]=max(h[cnt],dep[p]);\n}\n```\n\n- \u4e00\u4e9b\u7ec6\u8282\n\n1\u3001\u7279\u5224$1$\u53f7\u70b9\u4fee\u6539\u548c\u67e5\u8be2\u7684\u60c5\u51b5\n\n2\u3001\u4fee\u6539\u65f6\u6ce8\u610f\u4fee\u6539\u7684\u53f3\u7aef\u70b9\u662f\u5426\u8d8a\u754c\uff1a\u4fee\u6539\u4e00\u6761\u94fe\u65f6\uff0c\u548c\u8fd9\u6761\u94fe\u7684\u7ed3\u5c3e\u7684$dfs$\u5e8f\u53d6$\\min$\uff08\u540c\u6837\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u51fa\u6765\uff09\uff1b\u4fee\u6539\u591a\u6761\u94fe\u65f6\uff0c\u548c\u6574\u4e2a\u6811\u7684\u5927\u5c0f\u53d6$\\min$\uff08\u5305\u62ec\u90a3\u4e9b\u865a\u7a7a\u52a0\u4e0a\u53bb\u7684\u70b9\uff09\n\n3\u3001\u6ce8\u610f\uff0c\u5982\u679c\u4fee\u6539\u67d0\u4e2a\u70b9\u80fd\u6269\u5c55\u5230\u5176\u4ed6\u7684\u94fe\uff0c\u90a3\u4e48\u4fee\u6539\u5b83\u672c\u8eab\u8fd9\u6761\u94fe\u548c\u6240\u6709\u94fe\u4e00\u8d77\u4fee\u6539\u65f6\u4f1a\u6709\u91cd\u590d\u4fee\u6539\u7684\u60c5\u51b5\uff0c\u7b97\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u8dd1\u5230$1$\u518d\u8dd1\u56de\u6765\u6700\u591a\u80fd\u8dd1\u5230\u54ea\u91cc,\u4fee\u6539\u8fd9\u6761\u94fe\u5c31\u4ece\u8fd9\u4e2a\u4f4d\u7f6e$+1$\u5f00\u59cb\uff0c\u4e0a\u9762\u7684\u5c31\u8ba9\u53e6\u5916\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u4fee\u6539\n\n$st=1+(col[p]-1)*maxn+(dep[b]-d)+1$\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nconst int N=2e5+10;\nint tot,cnt;\nint fir[N],dep[N],col[N],h[N];\nstruct edge\n{\n\tint to;\n\tint nxt;\n}e[2*N];\ninline void add(int x,int y)\n{\n\te[++tot].to=y; e[tot].nxt=fir[x]; fir[x]=tot;\n\te[++tot].to=x; e[tot].nxt=fir[y]; fir[y]=tot;\n}\ninline void dfs(int p,int fa)\n{\n\tdep[p]=dep[fa]+1;\n\tfor(int i=fir[p];i;i=e[i].nxt)\n\t\tif(e[i].to!=fa) dfs(e[i].to,p);\n\tcol[p]=cnt,h[cnt]=max(h[cnt],dep[p]);\n}\nstruct tree//\u7ebf\u6bb5\u6811\n{\n\tint val[4*N];\n\tinline void pushdown(int p)\n\t{\n\t\tif(val[p])\n\t\t{\n\t\t\tval[p*2]+=val[p];\n\t\t\tval[p*2+1]+=val[p];\n\t\t\tval[p]=0;\n\t\t}\n\t}\n\tinline void change(int p,int left,int right,int l,int r,int c)\n\t{\n\t\tif(l>r) return;\n\t\tif(l<=left&&r>=right){ val[p]+=c; return; }\n\t\tpushdown(p);\n\t\tint mid=(left+right)/2;\n\t\tif(l<=mid) change(p*2,left,mid,l,r,c);\n\t\tif(r>mid) change(p*2+1,mid+1,right,l,r,c);\n\t}\n\tinline int query(int p,int left,int right,int pos)\n\t{\n\t\tif(left==right) return val[p];\n\t\tpushdown(p);\n\t\tint mid=(left+right)/2;\n\t\tif(pos<=mid) return query(p*2,left,mid,pos);\n\t\telse return query(p*2+1,mid+1,right,pos);\n\t}\n}t1,t2;\nint main()\n{\n\tint n,m,opt,a,b,c,maxn=0;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tadd(a,b);\n\t}\n\tfor(int i=fir[1];i;i=e[i].nxt)\n\t{\n\t\tint q=e[i].to;\n\t\tcnt++,dfs(q,1);\n\t\tmaxn=max(maxn,h[cnt]);\n\t}\n\tn=cnt*maxn+1;//\u6ce8\u610f\u4fee\u6539\u6811\u7684\u5927\u5c0f\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&opt,&a);\n\t\tif(opt)\n\t\t{\n\t\t\tif(a==1){ printf(\"%d\\n\",t1.query(1,1,n,1)+t2.query(1,1,n,1)); continue; }//\u7279\u5224\u57281\u67e5\u8be2\u7684\u60c5\u51b5\n\t\t\tint id1=1+(col[a]-1)*maxn+dep[a];//dfs\u5e8f\n\t\t\tint id2=1+(dep[a]-1)*cnt+col[a];//bfs\u5e8f\n\t\t\tprintf(\"%d\\n\",t1.query(1,1,n,id1)+t2.query(1,1,n,id2));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d%d\",&c,&b);\n\t\t\tif(a==1){ t2.change(1,1,n,1,min(1+b*cnt,n),c); continue; }//\u7279\u5224\u57281\u4fee\u6539\u7684\u60c5\u51b5\n\t\t\tint id1=1+(col[a]-1)*maxn+dep[a];//dfs\u5e8f\n\t\t\tint id2=1+(col[a]-1)*maxn+(b-dep[a]);//\u91cd\u5408\u7684\u6700\u6df1\u7684\u70b9\n\t\t\tint len=1+col[a]*maxn;\n\t\t\tif(dep[a]>b) t1.change(1,1,n,id1-b,min(id1+b,len),c);\n\t\t\telse\n\t\t\t{\n\t\t\t\tt1.change(1,1,n,id2+1,min(id1+b,len),c);//id2+1\u5c31\u662f\u8fd9\u6761\u94fe\u4e0a\u4fee\u6539\u7684\u8d77\u70b9\n\t\t\t\tt2.change(1,1,n,1,min(1+(b-dep[a])*cnt,n),c);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1598154971,
        "uid": 81238,
        "name": "MCAdam",
        "ccfLevel": 7,
        "title": "CF276E \u3010Little Girl and Problem on Trees\u3011"
    },
    {
        "content": "KD\u6811\u6811\u4e0a\u67d3\u8272\u7ecf\u5178\u9898   \n\u9996\u5148\u9700\u8981\u652f\u6301\u8303\u56f4modify\u548c\u67e5\u8be2\u7684KD\u6811\u7684\u677f\u5b50\n\n\u9664\u6839\u8282\u70b9\u4ee5\u5916\u6bcf\u4e2a\u8282\u70b9\u5ea6\u6570\u6700\u591a\u4e3a2\uff0c\u5219\u753b\u56fe\u540e\u53ef\u4ee5\u770b\u51fa\u6811\u7684\u5f62\u72b6\u63a5\u8fd1\u4e8e\u4e00\u4e2a\u5404\u8fb9\u5ef6\u957f\u7248\u7684\u83ca\u82b1\u56fe\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\u5b9e\u9645\u67d3\u8272\u533a\u57df\u5c31\u628a\u53ef\u4ee5\u628a\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u5177\u4f53\u5206\u7c7b\u8ba8\u8bba\u7ec6\u8282\u770b\u4ee3\u7801\uff08~~\u7b97\u67d3\u8272\u533a\u57df\u7684\u5750\u6807\u7565\u5fae\u7e41\u7410~~\uff09\n\n\nAC\u4e3b\u4ee3\u7801\uff1a\n\n```cpp\narray<vector<int>, 310000> edge;\narray<int, 310000> B, E, deep, id, ans2;\narray<bool, 310000> vis;\nvector<tuple<int, int, int> > PP;\nint len = 0;\nvoid dfs(int a)\n{\n\tvis[a] = true;\n\tB[a] = ++len;\n\tid[len] = a;\n\tfor (auto &p : edge[a])\n\t\tif (!vis[p])\n\t\t\tdeep[p] = deep[a] + 1, dfs(p);\n\tE[a] = len;\n\tPP[a - 1] = make_tuple(B[a], deep[a], 0);\n}\nint32_t main()\n{\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin.tie(NULL);\n\tstd::cout.tie(NULL);\n\tint n, m, op, x, y, u, v, q,d;\n\tvis.fill(false);\n\tdeep[1] = 0;\n\tcin >> n >> q;\n\tPP.resize(n);\n\tfor (int i = 1; i < n; ++i)\n\t{\n\t\tcin >> u >> v;\n\t\tedge[u].push_back(v);\n\t\tedge[v].push_back(u);\n\t}\n\tdfs(1);\n\ttr.build(PP);\n\twhile (q--)\n\t{\n\t\tcin >> op;\n\t\tif (op == 0)\n\t\t{\n\t\t\tcin >> x >> y >> d;\n\t\t\tif (x == 1)\n\t\t\t{\n\t\t\t\tPoint l(B[x], deep[x]), r(E[x], deep[x] + d);\n\t\t\t\ttr.rt->add_sum(l, r, y);\n\t\t\t}\n\t\t\telse  if (deep[x] - d >= 1)\n\t\t\t{\n\t\t\t\tPoint l(B[x] - d, deep[x] - d), r(E[id[B[x] - d]], deep[x] + d);\n\t\t\t\ttr.rt->add_sum(l, r, y);\n\t\t\t}\n\t\t\telse if (deep[x] - d < 1)\n\t\t\t{\n\t\t\t\tint kkk = deep[1] + d - deep[x];\n\t\t\t\tPoint l(1, deep[1]), r(E[1], deep[1]+d-deep[x]), l2(B[x] - deep[x]+kkk+1,0), r2(E[id[B[x] - deep[x] + kkk +1]], deep[x] + d);\n\t\t\t\ttr.rt->add_sum(l, r, y);\n\t\t\t\tif(B[x] - deep[x] + kkk + 1<=E[x])\n\t\t\t\ttr.rt->add_sum(l2, r2, y);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcin >> x;\n\t\t\tcout << (tr.query(B[x], deep[x], B[x], deep[x])) << '\\n';\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1562938261,
        "uid": 154957,
        "name": "qiyue7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF276E \u3010Little Girl and Problem on Trees\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n\u7565\u3002\n\n### \u5206\u6790\n\n\u9996\u5148\u5904\u7406\u51fa\u6240\u6709\u94fe\uff0c\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u3002\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a $u$ \uff0c\u8ddd\u79bb\u4e3a $d$ \uff0c\u4f4d\u4e8e\u7b2c $num$ \u6761\u94fe\uff0c\u5728\u6839\u4ee5\u4e0b\u7b2c $depth$ \u5c42\u3002\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u82e5 $depth \\geq d$ \uff0c\u6b64\u65f6\u64cd\u4f5c\u4e0e\u5176\u5b83\u94fe\u65e0\u5173\u3002\u53ef\u4ee5\u7ed9\u6bcf\u6761\u94fe\u5efa\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u6bcf\u6b21\u7ed9\u533a\u95f4 $[depth-d,depth+d]$ \u7684\u8282\u70b9\u90fd\u52a0\u4e0a $x$ \u3002\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u82e5 $depth < d$ ,\u6b64\u65f6\u6240\u6709\u5728\u6839\u4ee5\u4e0b $[1,d-depth]$ \u5c42\u7684\u8282\u70b9\u90fd\u9700\u8981\u52a0\u4e0a $x$ \uff0c\u7531\u4e8e\u6bcf\u6b21\u90fd\u662f\u5bf9\u6574\u5c42\u7684\u8282\u70b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u6b64\u518d\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u6bcf\u4e00\u5c42\u52a0\u4e0a\u7684\u6743\u503c\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u81ea\u5df1\u94fe\u4e0a\u7684\u7b26\u5408\u8981\u6c42\u7684\u8282\u70b9\u4e5f\u9700\u8981\u52a0\uff0c\u5c31\u6309\u7167\u7b2c\u4e00\u79cd\u60c5\u51b5\u7684\u505a\u6cd5\u5c31\u884c\uff0c\u9700\u8981\u6ce8\u610f\u5228\u6389\u5728\u4e4b\u524d\u52a0\u8fc7\u7684\u51e0\u5c42\u91cc\u7684\u8282\u70b9\u3002\n\n\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u8f93\u51fa\u5b83\u6240\u5728\u5c42\u52a0\u7684\u6743\u503c\u52a0\u4e0a\u5728\u672c\u94fe\u4e2d\u52a0\u7684\u6743\u503c\uff0c\u9700\u8981\u6ce8\u610f\u7279\u5224\u4e00\u4e0b\u5927\u6839\u3002\n\n\u5f00\u7ebf\u6bb5\u6811\u65f6\u9700\u8981\u4f7f\u7528 vector \uff0c\u4e0d\u7136 $10^5 \\times 10^5$ \u80af\u5b9a\u4f1a MLE\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define mem(a,b) memset(a,b,sizeof(b))\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> Pair;\nconst int inf=2139062143;\nconst int MAXN=1e5+7;\ninline void qread(){}template<class T1,class ...T2>\ninline void qread(T1 &a,T2&... b)\n{\n    register T1 x=0;register bool f=false;char ch=getchar();\n    while(ch<'0') f|=(ch=='-'),ch=getchar();\n    while(ch>='0') x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n    x=(f?-x:x);a=x;qread(b...);\n}\ninline int qmax(const int &x,const int &y){return x>y?x:y;}\ninline int qmin(const int &x,const int &y){return x<y?x:y;}\nint n,q,cnt,dep[MAXN],mp[MAXN],sz[MAXN];\nvector<int>tree[MAXN];\nvector<int>b[MAXN];\nvoid dfs(int u,int fa,int x)\n{\n    int tmp=x;\n    if(fa==1) tmp=++cnt;\n    if(fa!=-1) b[tmp].push_back(u);\n    for(auto v:tree[u])\n    {\n        if(fa==v) continue;\n        if(fa==1||fa==-1) dfs(v,u,tmp);\n        else dfs(v,u,x);\n    }\n}\nstruct Seg_Tree\n{\n    vector<ll>Tree,tag;\n    inline ll ls(ll p){return p<<1;}\n    inline ll rs(ll p){return p<<1|1;}\n    inline void push_up(ll p){Tree[p]=Tree[ls(p)]+Tree[rs(p)];}\n    inline void f(ll p,ll l,ll r,ll k)\n    {\n        tag[p]+=k;\n        Tree[p]+=(r-l+1)*k;\n    }\n    void push_down(ll p,ll l,ll r)\n    {\n        ll mid=(l+r)>>1;\n        f(ls(p),l,mid,tag[p]);\n        f(rs(p),mid+1,r,tag[p]);\n        tag[p]=0;\n    }\n    void update(ll p,ll l,ll r,ll L,ll R,ll k)\n    {\n        if(L<=l&&r<=R) \n            Tree[p]+=(r-l+1)*k,tag[p]+=k;\n        else\n        {\n            ll mid=(l+r)>>1;\n            push_down(p,l,r);\n            if(L<=mid) update(ls(p),l,mid,L,R,k);\n            if(R>mid) update(rs(p),mid+1,r,L,R,k);\n            push_up(p);\n        }\n    }\n    ll query(ll p,ll l,ll r,ll L,ll R)\n    {\n        if(L<=l&&r<=R) return Tree[p];\n        else\n        {\n            ll mid=(l+r)>>1,res=0;\n            push_down(p,l,r);\n            if(L<=mid) res+=query(ls(p),l,mid,L,R);\n            if(R>mid) res+=query(rs(p),mid+1,r,L,R);\n            return res;\n        }\n    }\n}t1,t[MAXN];\nsigned main()\n{\n    qread(n,q);int i,j,mx=0,cnt1=0; // cnt1\u8bb0\u5f55\u7684\u662f\u5927\u6839\u52a0\u7684\u6743\u503c\n    for(i=0;i<n-1;i++)\n    {\n        int u,v;qread(u,v);\n        tree[u].push_back(v);\n        tree[v].push_back(u);\n    }\n    dfs(1,-1,0); // \u5904\u7406\u51fa\u6bcf\u6761\u94fe\n    for(i=1;i<=cnt;i++) \n    {\n        b[i].insert(b[i].begin(),0);\n        for(j=1;j<b[i].size();j++) \n        {\n            mp[b[i][j]]=i; // \u8bb0\u5f55\u8282\u70b9\u6240\u5728\u94fe\u7684\u7f16\u53f7\n            dep[b[i][j]]=j; // \u8bb0\u5f55\u8282\u70b9\u5728\u6839\u4e0b\u7684\u5c42\u6570\n        }\n        mx=qmax(mx,b[i].size()-1); // \u6700\u5927\u6df1\u5ea6\n        sz[i]=b[i].size()-1; // \u94fe\u7684\u957f\u5ea6\n    }\n    for(i=1;i<=cnt;i++)\n    {\n        t[i].Tree.resize(mx<<2);\n        t[i].tag.resize(mx<<2);\n    }\n    t1.tag.resize(mx<<2);t1.Tree.resize(mx<<2);\n    while(q--)\n    {\n        int op,u,x,d;qread(op,u);\n        int depth=dep[u],num=mp[u];\n        if(op) // \u67e5\u8be2\n        {\n            if(u==1) printf(\"%d\\n\",cnt1);\n            else printf(\"%d\\n\",t1.query(1,1,mx,depth,depth)+t[num].query(1,1,sz[num],depth,depth));\n        }\n        else\n        {\n            qread(x,d);\n            if(u==1) // \u7279\u522b\u5904\u7406\u4e3a\u5927\u6839\u7684\u60c5\u51b5\n            {\n                cnt1+=x;\n                t1.update(1,1,mx,1,qmin(d,mx),x);\n                continue;\n            }\n            if(depth-d>=0) // \u4e0d\u7275\u626f\u5176\u5b83\u94fe\n            {\n                t[num].update(1,1,sz[num],depth-d,qmin(depth+d,sz[num]),x);\n                if(depth==d) cnt1+=x;\n            }\n            else // \u7275\u626f\u5176\u5b83\u94fe\n            {\n                cnt1+=x;\n                if(d-depth+1<=sz[num]) t[num].update(1,1,sz[num],qmin(d-depth+1,sz[num]),qmin(depth+d,sz[num]),x);\n                t1.update(1,1,mx,1,qmin(d-depth,mx),x);\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1646655273,
        "uid": 225991,
        "name": "_lxy_",
        "ccfLevel": 6,
        "title": "CF276E Little Girl and Problem on Trees \u9898\u89e3"
    }
]