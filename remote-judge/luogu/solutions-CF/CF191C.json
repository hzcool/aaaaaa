[
    {
        "content": "#### \u95f2\u804a\n\n> \u5173\u4e8e\u6811\u5256\uff0c\u4ed6\u592a\u96be\u4e86\uff0c\u6240\u4ee5\u8981\u7528\u6811\u4e0a\u5dee\u5206\u6765\u89e3\u51b3\u3002\n\n---\n#### \u601d\u8def\n\u8fd9\u662f\u4e00\u9053\u6811\u4e0a\u5dee\u5206\u7684\u8f83\u6a21\u677f\u9898\u3002\u5728\u5b66\u4e60\u6811\u4e0a\u5dee\u5206\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u8bf4\u8bf4\u5dee\u5206\u7684\u57fa\u672c\u601d\u60f3\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\n\n1. \u94fe\u5f0f\u524d\u5411\u661f\u5b58\u6811 or \u56fe\n1. \u500d\u589e\u6c42 LCA\n1. \u524d\u7f00\u548c\u4e0e\u5dee\u5206\n\n---\n\u5dee\u5206\u662f\u4ec0\u4e48\u5462\uff1f\u5dee\u5206\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u6765\u8bb2\uff0c\u5c31\u662f\u524d\u7f00\u548c\u7684\u9006\u8fd0\u7b97\u3002~~(\u5982\u679c\u4f60\u8fde\u524d\u7f00\u548c\u90fd\u4e0d\u77e5\u9053\uff0c\u4e0d\u7528\u505a\u8fd9\u9053\u9898\u4e86)~~\u5b83\u4e3b\u8981\u5e94\u7528\u8303\u56f4\u65f6\u662f\u4ee5 $O(m)$ \u7684\u65f6\u95f4\u89e3\u51b3\u5f62\u5982\u201c$m$ \u6b21\u5c06 $[l,r]$ \u533a\u95f4\u4e2d\u7684\u6240\u6709\u6570\u52a0 $x$\uff0c\u6700\u540e\u8f93\u51fa\u6574\u4e2a\u5e8f\u5217\u201d\u3002\n\n\u662f\u4e0d\u662f\u5f88\u795e\u5947\uff1f\n\n\u6211\u4eec\u4ece\u66b4\u529b\u8bb2\u8d77\uff1a\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\uff0c\u5faa\u73af\u4ece $l\\rightarrow r$\uff0c\u7136\u540e\u628a $a_i$ \u52a0\u4e0a $x$ \u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7684\u7b97\u6cd5\u662f $O(nm)$ \u7684\uff0c\u51fa\u9898\u4eba\u968f\u4fbf\u5361\u5361\u4f60\u5c31 T \u98de\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8981\u600e\u4e48\u6539\u8fdb\u5462\uff1f\u5f88\u7b80\u5355\u3002\n\n---\n\u7ed9\u5b9a\u4e00\u4e2a $a$ \u5e8f\u5217\uff0c\u5148\u5b9a\u4e49\u4e00\u4e2a\u201c\u5dee\u5206\u6570\u7ec4\u201d(\u6211\u4e5f\u5fd8\u4e86\u53eb\u5565\u4e86\uff0c\u8fd9\u4e0d\u91cd\u8981) $d_i=a_i-a_{i-1}$\uff0c\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\uff1a$d$ \u6570\u7ec4\u7684\u524d\u7f00\u548c\u4e0d\u5c31\u662f $a$ \u6570\u7ec4\u5417\uff1f\uff01\n\n\u8fd9\u5c31\u662f\u5dee\u5206\u7684\u6838\u5fc3\u601d\u60f3\u4e86\uff0c\u5dee\u5206\u5dee\u5206\uff0c\u5c31\u662f\u5728 $d$ \u6570\u7ec4\u4e2d\u4fee\u6539\uff0c\u6700\u540e\u6c42\u51fa $a$ \u6570\u7ec4\u7684\u503c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u2014\u2014\u600e\u4e48\u5feb\u901f\u4fee\u6539 $d$ \u6570\u7ec4\u5462\uff1f\n\n---\n\u6839\u636e\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a\n```\nd[l]+=x;d[r+1]-=x;\n```\n\u4ec0\u4e48\u610f\u601d\u5462\uff1f\n\n\u6211\u4eec\u6839\u636e\u201c\u5dee\u5206\u6570\u7ec4\u201d\u7684\u5b9a\u4e49\uff0c$a_l\\rightarrow a_r$ \u5168\u90e8\u52a0 $1$\uff0c\u5219\u539f\u6765 $d_l=a_l-a_{l-1}$ \u53d8\u6210\u4e86 $a_l+1-a_{l-1}$ \u5373 $d_l$ \u88ab\u52a0\u4e0a\u4e86 $x$\u3002\n\n\u540c\u7406 $d_{r+1}$ \u88ab\u51cf\u6389\u4e86 $x$\uff0c\u800c $d_{l+1}\\rightarrow d_{r-1}$ \u90fd\u52a0\u4e86 $1$,\u4e00\u51cf\u62b5\u6d88\u4e86\uff0c\u6240\u4ee5\u4e0d\u7528\u66f4\u65b0\u3002\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5e38\u6570\u7ea7\u522b\u7684\uff0c\u975e\u5e38\u5feb\u3002\n\n\u8fd9\u5c31\u662f\u5dee\u5206\u7684\u57fa\u672c\u5185\u5bb9\u5566\uff0c\u6ce8\u610f\u505a\u5b8c\u6240\u6709\u4fee\u6539\u540e\u8981\u524d\u7f00\u548c\u8fd8\u539f $a$ \u6570\u7ec4\u624d\u662f\u7b54\u6848\u54e6\u3002\n\n---\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8981\u628a\u5dee\u5206\u642c\u5230\u6811\u4e0a\u505a\u3002\n\n\u600e\u4e48\u505a\u5462\uff1f\u5f88\u7b80\u5355\uff0c\u5047\u8bbe\u4ece $l\\rightarrow r$\uff0c\u7ecf\u8fc7\u7684\u6bcf\u4e2a\u70b9\u6743\u503c\u589e\u52a0 $x$\u3002\u90a3\u4e48\u66f4\u65b0\u7684\u65f6\u5019\uff0c\n```\nd[l]+=x;d[r]+=x;d[lca(l,r)]-=x;d[f[lca(l,r)]]-=x;\n```\n\u5176\u4e2d $\\operatorname{lca}(l,r)$ \u7684\u610f\u601d\u662f $l,r$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u7528\u500d\u589e\u6c42\uff0c\u8fd9\u91cc\u4e0d\u591a\u8bb2\u4e86\uff1b$f_i$ \u6570\u7ec4\u8868\u793a $i$ \u7684\u7236\u4eb2\u8282\u70b9\u7f16\u53f7\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86**\u70b9**\u7684\u6811\u4e0a\u5dee\u5206.\n\n\u4f46\u662f\u8fd9\u9053\u9898\u8981\u6211\u4eec\u6c42**\u8fb9**\u7684\u6811\u4e0a\u5dee\u5206\uff0c\u4e0a\u9762\u90a3\u4e2a\u516c\u5f0f\u4e0d\u518d\u9002\u7528\u4e86\u3002\u600e\u4e48\u529e\u5462\uff1f\n```\nd[l]+=x;d[y]+=x;d[lca(x,y)]-=2*x;\n```\n\u8fd9\u662f**\u8fb9**\u7684\u5dee\u5206\u516c\u5f0f\uff0c\u4ee5\u4e0a\u4e09\u4e2a\u516c\u5f0f\u5fc5\u987b\u8bb0\u7262\u3002\u6ce8\u610f\u505a\u5b8c\u4e4b\u540e\u8fd8\u8981\u4e00\u6b21 dfs \u5c06\u4ed6\u4eec\u524d\u7f00\u548c(\u5373 $d_u=d_u+d_v,v$ \u662f $u$ \u7684\u513f\u5b50\u8282\u70b9)\n\n\u5173\u4e8e\u8fd9\u9053~~\u6076\u5fc3~~\u5947\u5999\u7684\u8f93\u51fa\uff1a\u8981\u6c42\u6309\u8fb9\u7684\u8f93\u5165\u987a\u5e8f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u6761\u8fb9\u770b\u4f5c\u4ed6\u7684\u4e24\u4e2a\u9876\u70b9\u4e2d\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e2a\u70b9\u6765\u8f93\u51fa\u3002\u5373\u4fdd\u5b58\u4e00\u4e0b\u8f93\u5165\u7684 $x_i,y_i$\uff0c\u8f93\u51fa\u65f6\u6bd4\u8f83 $dep_{x_i}$ \u548c $dep_{y_i}$ \u7684\u5927\u5c0f(\u5176\u4e2d $dep_i$ \u8868\u793a\u6df1\u5ea6\uff0c\u4ece $1$ \u5f00\u59cb)\uff0c\u7136\u540e\u8f93\u51fa\u53eb\u5927\u70b9\u7684 $d$ \u503c\u5373\u53ef\u3002\n\n---\n#### \u4ee3\u7801\n\u56e0\u4e3a\u6211\u4e0d\u4f1a\u8ddf\u7b80\u77ed\u7684\u505a\u6cd5\uff0c\u4e8e\u662f\u6211\u7ed9\u51fa\u6211\u7684~~\u62d6\u6ce5\u5e26\u6c34~~\u7684\u8fa3\u9e21\u4ee3\u7801\u3002\n\n~~`limingye` \u7684\u540c\u5b66\uff1a`limingye` \u7684\u7801\u98ce\u4e11\u6b7b\u4e86\uff01~~\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nstruct Edge{\n\tint to;\n\tint nxt;\n\tint head;\n};\nEdge edge[200005];\nint n,m,u,v,lg[100005],x[100005],y[100005],point,anc[100005][20],depth[100005],diff[100005];\ninline void init_log(){\n\tlg[1]=1;\n\tfor(register int i=2;i<=n;i++){\n\t\tif(1<<lg[i-1]==i){\n\t\t\tlg[i]=1;\n\t\t}\n\t\tlg[i]+=lg[i-1]; \n\t}\n}\ninline void add_edge(int u,int v){\n\tpoint++;\n\tedge[point].to=v;\n\tedge[point].nxt=edge[u].head;\n\tedge[u].head=point;\n}\ninline void dfs_anc(int now,int father){\n\tanc[now][0]=father;\n\tdepth[now]=depth[father]+1;\n\tfor(register int i=1;i<=lg[depth[now]];i++){\n\t\tanc[now][i]=anc[anc[now][i-1]][i-1];\n\t}\n\tint tmp=edge[now].head;\n\twhile(tmp>0){\n\t\tint son=edge[tmp].to;\n\t\tif(son==father){\n\t\t\ttmp=edge[tmp].nxt;\n\t\t\tcontinue;\n\t\t}\n\t\tdfs_anc(son,now);\n\t\ttmp=edge[tmp].nxt;\n\t}\n}\ninline int lca(int a,int b){\n\tif(depth[a]<depth[b]){\n\t\tswap(a,b);\n\t}\n\twhile(depth[a]>depth[b]){\n\t\ta=anc[a][lg[depth[a]-depth[b]]-1];\n\t}\n\tif(a==b){\n\t\treturn b;\n\t}\n\tfor(register int i=lg[depth[a]]-1;i>=0;i--){\n\t\tif(anc[a][i]!=anc[b][i]){\n\t\t\ta=anc[a][i];\n\t\t\tb=anc[b][i];\n\t\t}\n\t}\n\treturn anc[a][0];\n}\ninline void dfs_answer(int now,int father){\n\tint tmp=edge[now].head;\n\twhile(tmp>0){\n\t\tint son=edge[tmp].to;\n\t\tif(son==father){\n\t\t\ttmp=edge[tmp].nxt;\n\t\t\tcontinue;\n\t\t}\n\t\tdfs_answer(son,now);\n\t\tdiff[now]+=diff[son];\n\t\ttmp=edge[tmp].nxt;\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tinit_log();\n\tfor(register int i=1;i<n;i++){\n\t\tscanf(\"%d%d\",&x[i],&y[i]);\n\t\tadd_edge(x[i],y[i]);\n\t\tadd_edge(y[i],x[i]);\n\t}\n\tdfs_anc(1,0);\n\tscanf(\"%d\",&m);\n\tfor(register int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tdiff[u]++;\n\t\tdiff[v]++;\n\t\tdiff[lca(u,v)]-=2;\n\t}\n\tdfs_answer(1,0);\n\tfor(register int i=1;i<n;i++){\n\t\tu=x[i],v=y[i];\n\t\tif(depth[u]>depth[v]){\n\t\t\tprintf(\"%d \",diff[u]);\n\t\t}\n\t\telse{\n\t\t\tprintf(\"%d \",diff[v]);\n\t\t}\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n---\n#### \u756a\u5916\n\n\u554a\u6211\u4e5f\u4e0d\u77e5\u9053\u6709\u4ec0\u4e48\u597d\u5199\u7684\uff0c\u795d\u5927\u5bb6 [CF \u4e0a\u5206\u6109\u5feb\uff01](https://moon-snow.blog.luogu.org/)",
        "postTime": 1586926876,
        "uid": 139956,
        "name": "MY_Lee",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF191C \u3010Fools and Roads\u3011"
    },
    {
        "content": "\u53bb\u770b\u9898\u89e3\u5927\u4f6c\u6253\u7684\u770b\u4e0d\u61c2...\u53ea\u597d\u81ea\u5df1\u52aa\u529b\uff08~~\u8fde\u8499\u5e26\u6284~~\uff09\u5199\u4e86\u597d\u4e45\u7ec8\u4e8e\u8fc7\u4e86\n\n\u7adf\u7136\u6ca1\u4eba\u53d1\u6811\u5256\uff1f\uff08~~\u5bb3\u6211\u8c03\u534a\u5929~~\uff09\u7ed3\u5408\u6211\u81ea\u5df1\u770b\u4e0d\u61c2\u9898\u89e3\u7684\u7ecf\u9a8c\uff0c\u6211\u5c3d\u91cf\u5199\u6e05\u695a\u4e9b\uff0c\u987a\u4fbf\u4ecb\u7ecd\u51e0\u4e2a\u8c03\u9519\u7684\u5c0f\u6280\u5de7hhh\n\n#### \u6811\u94fe\u5256\u5206\u7684\u601d\u60f3\uff1f\n\n\u6811\u5256\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5c06\u4e00\u68f5\u6811\u5206\u6210**\u7531\u8f7b\u8fb9\u8fde\u6210\u90fd\u91cd\u94fe**\uff0c\u4ece\u800c\u4f7f\u5f97\u95ee\u9898\u5927\u5927\u7b80\u5316\n\n\u6211\u4eec\u5047\u8bbe\u6bcf\u4e00\u4e2a\u8282\u70b9\u91cd\u91cf\u662f1\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff0c\u4ed6\u7684\u5b50\u6811\u4e2d\u66f4\u91cd\u7684\u90a3\u4e2a\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a**\u91cd\u5b69\u5b50**\uff0c\u5176\u4ed6\u90fd\u79f0\u4e4b\u4e3a**\u8f7b\u5b69\u5b50**\u3002\u6211\u4eec\u77e5\u9053\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4f1a\u6709\u4e00\u4e2a\u91cd\u5b69\u5b50\uff0c\u90a3\u4e48\u8fd9\u4e00\u4e32\u91cd\u5b69\u5b50\u94fe\u6211\u4eec\u79f0\u4e4b\u4e3a**\u91cd\u94fe**\uff0c\u53cd\u4e4b\u5462\uff0c\u8fde\u63a5\u8f7b\u5b69\u5b50\u7684\u8fb9\u79f0\u4e4b\u4e3a**\u8f7b\u8fb9**\n\n\u81ea\u5df1\u968f\u4fbf\u627e\u4e9b\u6811\u6765\u753b\u4e00\u753b\uff0c~~\u6613\u8bc1~~\u6bcf\u4e00\u68f5\u6811\u90fd\u53ef\u4ee5\u5206\u4e3a\u82e5\u5e72\u6761\u91cd\u94fe\uff0c\u91cd\u94fe\u4e0e\u91cd\u94fe\u95f4\u7531\u8f7b\u8fb9\u94fe\u63a5\n\n#### \u9996\u5148\u662f\u6bcf\u4e2a\u6570\u7ec4\u7684\u542b\u4e49\n```cpp\nint sz[N],hs[N],f[N],tp[N],dep[N];\n```\n* sz\u662f\u4ee5\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u91cd\u91cf\n* hs\u662f\u6bcf\u4e2a\u8282\u70b9\u7684\u91cd\u5b69\u5b50\n* f\u662f\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\n* tp\u662f\u6bcf\u4e2a\u8282\u70b9\u6240\u5904\u7684\u91cd\u94fe\u7684\u9876\n* dep\u662f\u6bcf\u4e2a\u8282\u70b9\u5728\u6811\u4e2d\u7684\u6df1\u5ea6\n\n#### \u8fd9\u91cc\u662f\u6811\u5256\u7684dfs\uff1a\n```cpp\nint sz[N],hs[N],f[N],tp[N],dep[N];\nvoid dfs1(int x,int fa){\n\tdep[x]=dep[fa]+1;\n\tsz[x]=1;\n\tf[x]=fa;\n\ths[x]=0;\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tint y=G[i];\n\t\tif(y==fa)\tcontinue;\n\t\tdfs1(y,x);\n\t\tsz[x]+=sz[y];\n\t\tif(sz[y]>sz[hs[x]])\n\t\t\ths[x]=y;\n\t}\n}\n\nvoid dfs2(int x,int t){\n\ttp[x]=t;\n\tif(hs[x])\n\t\tdfs2(hs[x],t);\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tint y=G[i];\n\t\tif(y==f[x] || y==hs[x])\tcontinue;\n\t\tdfs2(y,y);\n\t}\n}\n\n```\n#### \u7528\u6811\u5256\u6c42LCA\u7684\u601d\u60f3\u662f\uff1a\n\n* \u5bf9\u4e8e\u4e24\u4e2a\u70b9\uff0c\u5982\u679c\u4e0d\u5904\u4e8e\u540c\u4e00\u6761\u91cd\u94fe\uff0c\u5c31\u50cf\u4e0a\u8df3\u51fa\u5f53\u524d\u91cd\u94fe\u76f4\u5230\u5904\u4e8e\u540c\u4e00\u6761\uff0c\u90a3\u4e48\u6b64\u65f6\u4ed6\u4eec\u5fc5\u5b9a\u4e00\u4e2a\u9ad8\u4e00\u4e2a\u4f4e\n\n```cpp\ninline int LCA(int x,int y){\n\twhile(tp[x]!=tp[y]){\n\t\tif(dep[tp[x]]>=dep[tp[y]])\n\t\t\tx=f[tp[x]];\n\t\telse\ty=f[tp[y]];\n        //\u7279\u522b\u6ce8\u610f\uff0c\u5fc5\u987b\u8df3\u51fa\u91cd\u94fe\uff0c\u4e5f\u5c31\u662f\u8df3\u5230\u9876\u7684\u7236\u4eb2\u4e0a\n\t}\n\treturn dep[x]>dep[y]?y:x;\n}\n```\n\n#### \u8fd9\u9053\u9898\u5df2\u7ecf\u6709\u5927\u4f6c\u66f0\u8fc7\uff0c\u5dee\u5206\u505a\u6cd5\u662f\n```cpp\n++s[x],++s[y],s[LCA(x,y)]-=2;\n```\n\n\u90a3\u4e48\u6211\u4eec\u5728\u4e00\u4e2adfs\u4e2d\u5c06\u8fd9\u4e2a\u5f71\u54cd\u65bd\u52a0\u5230\u6574\u4e2a\u8def\u5f84\u4e0a\n```cpp\nint s[N],ans[N],id[N];\nvoid dfs3(int x){\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tint y=G[i];\n\t\tif(y==f[x])\tcontinue;\n\t\tdfs3(y);\n\t\ts[x]+=s[y];\n\t}\n\tans[id[x]]=s[x];\n}\n```\n\n\u611f\u89c9\u8fd9\u4e2a\u505a\u6cd5\u8fd8\u4e0d\u9519\uff0c\u6700\u6162\u4e5f\u4e0d\u8fc7300ms\n\n\n#### \u8fd9\u91cc\u662f\u6e90\u7801\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<cstdio>\nusing namespace std;\n\nconst int N=210000,M=N<<1;//\u8bf7\u6ce8\u610f2\u500d... \n\nstruct node{\n\tint x,y;\n\tnode(int x=0,int y=0):x(x),y(y){}\n};\nnode edge[N];//\u5355\u9879\u4e0d\u5f00\u4e8c\u500d \nint G[M],head[N],nxt[M],e_cnt=0;\ninline void add(int x,int y){\n\t//\u524d\u5411\u661f \n\tG[++e_cnt]=y;\n\tnxt[e_cnt]=head[x];head[x]=e_cnt;\n}\n\nint sz[N],hs[N],f[N],tp[N],dep[N];\n//\u6211\u731c\u4f60\u4eec\u8bb0\u4e0d\u4f4f\u6570\u7ec4\u7684\u542b\u4e49\uff0c\u5f80\u524d\u7ffb\u7ffb\u5427 \nvoid dfs1(int x,int fa){\n\tdep[x]=dep[fa]+1;\n\tsz[x]=1;\n\tf[x]=fa;\n\ths[x]=0;\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tint y=G[i];\n\t\tif(y==fa)\tcontinue;\n\t\tdfs1(y,x);\n\t\tsz[x]+=sz[y];\n\t\tif(sz[y]>sz[hs[x]])\n\t\t\ths[x]=y;\n\t}\n}\n\nvoid dfs2(int x,int t){\n\ttp[x]=t;\n\tif(hs[x])\n\t\tdfs2(hs[x],t);\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tint y=G[i];\n\t\tif(y==f[x] || y==hs[x])\tcontinue;\n\t\tdfs2(y,y);\n\t}\n}\n\ninline int LCA(int x,int y){\n\twhile(tp[x]!=tp[y]){\n\t\tif(dep[tp[x]]>=dep[tp[y]])\n\t\t\tx=f[tp[x]];\n\t\telse\ty=f[tp[y]];\n\t}\n\treturn dep[x]>dep[y]?y:x;\n}\n\nint s[N],ans[N],id[N];\nvoid dfs3(int x){\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tint y=G[i];\n\t\tif(y==f[x])\tcontinue;\n\t\tdfs3(y);\n\t\ts[x]+=s[y];\n\t}\n\tans[id[x]]=s[x];\n}\n\nint main(){\n\tios::sync_with_stdio(0);\n\t//\u5173\u95ed\u540c\u6b65 \n\tint n,k;//n\u4e2a\u70b9\u548ck\u6b21\u95ee\u8be2 \n\tcin>>n;\n\tfor(int i=1;i<n;++i){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tedge[i]=node(x,y);\n\t\tadd(x,y);\tadd(y,x);\n\t}\n\t\n\tdfs1(1,0); \n\tdfs2(1,1); \n\t//\u8fd9\u4e2a\u9898\u8981\u6309\u7167\u8fb9\u7684\u987a\u5e8f\u8f93\u51fa\uff0c\u5f88\u70e6\n\t//\u6211\u4eec\u5c06\u8fb9\u7684\u6743\u503c\u65bd\u52a0\u5230\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e2a\u70b9\u4e0a \n\tfor(int i=1;i<n;++i)\n\t\tif(dep[edge[i].x]>dep[edge[i].y])\n\t\t\tid[edge[i].x]=i;\n\t\telse\n\t\t\tid[edge[i].y]=i;\n\t\t\t\n\tcin>>k;\n\tfor(int i=1;i<=k;++i){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\t++s[x],++s[y],s[LCA(x,y)]-=2;\n\t\t//cout<<\"lca=\"<<LCA(x,y)<<endl;\n\t\t//\u8fd9\u91cc\u662f\u4e2adebug\u7684\u597d\u5730\u65b9\uff0c\u5bf9\u4e8e\u672c\u9898\u6765\u8bf4\u5dee\u5206\u96be\u5ea6\u4e0d\u5927\uff0c\u800clca\u76f4\u63a5\u662f\u6a21\u677f\n\t\t//\u5728\u8fd9\u91cc\u68c0\u67e5lca\u7ed3\u679c\u53ef\u4ee5\u8fc5\u901f\u786e\u5b9a\u51fa\u9519\u4f4d\u7f6e \n\t}\n\t\n\tdfs3(1);//\u5904\u7406\u6743\u503c\uff0c\u5dee\u5206\n\tfor(int i=1;i<n;++i)\n\t\t//\u8f93\u7b54\u6848\u8dd1\u8def \n\t\tcout<<ans[i]<<' '; \n\t\n\treturn 0;\n}\n\n```\n",
        "postTime": 1573460269,
        "uid": 148949,
        "name": "_H1kar1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF191C \u3010Fools and Roads\u3011"
    },
    {
        "content": "\u6811\u4e0a\u5dee\u5206\u6a21\u7248\u9898\uff0c\u8fd9\u9898\u6bcf\u6b21\u90fd\u662f\u56fa\u5b9a\u589e\u52a01.\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u5dee\u5206\u7684\u65f6\u5019\u4e24\u4e2a\u70b9\u7684\u516c\u5171\u7956\u5148\u4f1a\u88ab\u8fd9\u4e24\u4e2a\u70b9\u90fd\u52a0\u4e00\u6b21\u8981\uff0c\u6240\u4ee5\u8981-2.\n\n\uff08\u5982\u679c\u5b9e\u5728\u4e0d\u80fd\u7406\u89e3\u53ef\u4ee5\u753b\u5f20\u56fe\u770b\u4e00\u4e0b\uff0c\u9274\u4e8e\u672c\u4eba\u753b\u56fe\u80fd\u529b\u4e3a-INF\u5c31\u4e0d\u753b\u4e86QAQ\uff09\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200010;\ninline int read()\n{\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n\twhile(isdigit(c)){x=(x<<3)+(x<<1)+(c^48);c=getchar();}\n\treturn x*f;\n}\nstruct edge\n{\n\tint to,nxt,id;\n};\nedge e[N];\nint E;\nint dep[N],cnt[N],ans[N],head[N];\nint dp[N][22];\nint n,k,u,v;\ninline void init_st()\n{\n\tfor(int i=1;i<=20;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tdp[j][i]=dp[dp[j][i-1]][i-1];//\u9884\u5904\u7406\u500d\u589e\u6570\u7ec4\n\t\t}\n\t}\n}\ninline void init_e()\n{\n\tE=0;\n\tmemset(head,-1,sizeof(head));//\u521d\u59cb\u5316\n}\ninline void add(int u,int v,int id)\n{\n\te[++E].nxt=head[u];\n\te[E].to=v;\n\te[E].id=id;\n\thead[u]=E;\n}\ninline void dfs(int u,int fa)\n{\n\tdp[u][0]=fa;\n\tfor(int i=head[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa) continue;\n\t\tdep[v]=dep[u]+1;//\u5148dfs\u904d\u5386\u4e00\u904d\u5efa\u6811\n\t\tdfs(v,u);\n\t}\n}\ninline int lca(int x,int y)\n{\n\tif(dep[x]<dep[y]) swap(x,y);\n\tint del=dep[x]-dep[y];\n\tfor(int i=0;i<=20;i++)\n\t{\n\t\tif(del&(1<<i)) x=dp[x][i];\n\t}\n\tif(x==y) return x;\n\tfor(int i=20;i>=0;i--)\n\t{\n\t\tif(dp[x][i]!=dp[y][i])\n\t\t{\n\t\t\tx=dp[x][i];\n\t\t\ty=dp[y][i];\n\t\t}\n\t}\n\treturn dp[x][0];//\u500d\u589e\u6c42\u516c\u5171\u7956\u5148\n}\ninline void solve(int u,int fa)\n{\n\tfor(int i=head[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa) continue;\n\t\tsolve(v,u);\n\t\tcnt[u]+=cnt[v];\n\t\tans[e[i].id]=cnt[v];//\u6c42\u51fa\u6bcf\u4e00\u4e2a\u70b9\u7684\u503c\n\t}\n}\nint main()\n{\n\tinit_e();\n\tn=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u=read(),v=read();\n\t\tadd(u,v,i);add(v,u,i);\n\t}\n\tdfs(1,0);\n\tinit_st();\n\tk=read();\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tcnt[x]++,cnt[y]++;\n\t\tcnt[lca(x,y)]-=2;//\u5dee\u5206\n\t}\n\tsolve(1,0);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tcout<<ans[i]<<\" \";\n\t}\n}\n```\n",
        "postTime": 1590290135,
        "uid": 115779,
        "name": "\u6781\u5bd2\u795e\u51b0",
        "ccfLevel": 0,
        "title": "CF191C"
    },
    {
        "content": "\u7ec6\u8282\u5199\u6302\uff0c\u4ea4\u4e86\u4e24\u904d\uff0c\u5199\u7bc7\u9898\u89e3\uff0c\u63d0\u9192\u81ea\u5df1~~\n\n~~\u4e3b\u8981\u662f\u7acb\u4e0b\u4e86\u8fd9\u904d AC \u6211\u5c31\u5199\u9898\u89e3\u7684 flag~~\n\n\u539f\u9898\u8fde\u63a5[\u3010Fools and Roads\u3011](https://www.luogu.org/problem/CF191C)\n\n\u9898\u610f\n\n\t\t\u7ed9\u51fa\u4e00\u68f5\u6811\uff0c\u7ed9\u51fa m \u5bf9\u70b9\uff0c\n\n\t\t\u6bcf\u5bf9\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u5168\u90e8\u52a0\u4e00\uff0c\u6700\u540e\u8f93\u51fa\u6bcf\u6761\u8fb9\u7684\u503c\n\n\u8fd9\u4e00\u770b\u5c31\u662f~~\u6811\u4e0a\u5dee\u5206~~\u6811\u5256\u554a\n\n\u601d\u8def\n\n\t\t\u6811\u5256\uff0c\u5c06\u8fb9\u5bf9\u5e94\u5230\u6df1\u5ea6\u5927\u7684\u70b9\uff0c\u5dee\u5206\u7ef4\u62a4\u533a\u95f4\u52a0\n\n\u6ca1\u6709\u592a\u591a\u8981\u8bf4\u7684\uff0c\u4e3b\u8981\u5c31\u662f\u7ec6\u8282\n\n\u6211\u8e29\u7684\u5751\n\n\t\t1\u3001\u5dee\u70b9\u5199\u4e86\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u533a\u95f4\u52a0\uff0c\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u75c5\uff0c\u672c\u9898\u5dee\u5206\u5c31\u597d\u4e86\n\n\t\t2\u3001\u5173\u4e8e\u4ece\u8fb9\u5230\u70b9\u7684\u6570\u7ec4\u6620\u5c04\uff0c\u7528\u6df7\u4e86\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u6253\u9519\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u8c03\u4e86\u5341\u51e0\u5206\u949f\n\n\u6ca1\u4e86\uff0c\u53e6\u5916\u63a8\u8350\u4e00\u9053\u548c\u672c\u9898\u5f88\u50cf\u7684\u9898\uff0c\u601d\u8def\u4e00\u6a21\u4e00\u6837\uff0c\u800c\u4e14\u90a3\u9053\u9898\u662f\u7ef4\u62a4\u70b9\u6743\uff0c\u66f4\u597d\u5b9e\u73b0\n\n[\u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011](https://www.luogu.org/problem/P3128)\n\n\u7136\u540e\u662f\u672c\u9898\u7684\u4ee3\u7801\uff0c\u8dd1\u4e86 3.96 s\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\nconst int maxn = 1e5 + 10;\n\ninline int read() {\n    char c = getchar(); int x = 0, f = 1;\n    for (; c > '9' || c < '0'; c = getchar()) if (c == '-') f = -1;\n    for (; c >='0' && c <='9'; c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48);\n    return x * f;\n}\n\nint ver[maxn << 1], nxt[maxn << 1], rk[maxn << 1], head[maxn], rk_[maxn], tot;\nint dep[maxn], fa[maxn], son[maxn], size[maxn], maxson;\nint id[maxn], top[maxn], cnt_;\nint n, m, u, v;\n\nvoid add (int u, int v, int i) {\n    ver[++ tot] = v, nxt[tot] = head[u], head[u] = tot;\n    rk[tot] = i;\n}\n\nstruct djj_lxy_aa {\n    int a[maxn];\n\n    void change (int l, int r, int x) {\n        a[l] += x, a[r + 1] -= x;\n    }\n\n    void finish () {\n        for (register int i = 1; i <= n; i ++)\n            a[i] = a[i - 1] + a[i];\n    }\n} t;\n\nvoid dfs1 (int x, int f, int deep) {\n    dep[x] = deep, fa[x] = f;\n    size[x] = 1, maxson = -1;\n    for (register int i = head[x]; i; i = nxt[i]) {\n        if (ver[i] == f) continue ;\n        rk_[rk[i]] = ver[i];\n        dfs1 (ver[i], x, deep + 1);\n        size[x] += size[ver[i]];\n        if (size[ver[i]] > maxson)\n            maxson = size[ver[i]], son[x] = ver[i];\n    }\n}\n\nvoid dfs2 (int x, int topf) {\n    top[x] = topf, id[x] = ++ cnt_;\n    if (!son[x]) return ;\n    dfs2 (son[x], topf);\n    for (register int i = head[x]; i; i = nxt[i]) {\n        if (ver[i] == son[x] || ver[i] == fa[x])\n            continue ;\n        dfs2 (ver[i], ver[i]);\n    }\n}\n\nvoid solve (int u, int v) {\n    for (; top[u] != top[v]; ) {\n        if (dep[top[u]] < dep[top[v]])\n            swap (u, v);\n        if (u == top[u]) {\n            t.change (id[u], id[u], 1);\n            u = fa[u];\n        }\n        else {\n            t.change (id[top[u]] + 1, id[u], 1);\n            u = top[u];\n        }\n    }\n    if (dep[u] > dep[v]) swap (u, v);\n    t.change (id[u] + 1, id[v], 1);\n}\n\nvoid djj () {\n    n = read();\n    for (register int i = 1; i < n; i ++)\n        u = read(), v = read(), add (u, v, i), add (v, u, i);\n    dfs1 (1, 1, 1), dfs2 (1, 1);\n}\n\nvoid lxy () {\n    for (m = read(); m; m --) {\n        u = read(), v = read();\n        solve (u, v);\n    }\n    t.finish ();\n    for (register int i = 1; i < n; i ++)\n        printf (\"%d \", t.a[id[rk_[i]]]);\n}\n\nvoid djj_lxy () {\n    djj (), lxy ();\n}\n\nint main () {\n    djj_lxy ();\n}\n//\u4e2a\u4eba\u4e60\u60ef\uff0c\u628a\u6837\u4f8b\u7c98\u5230\u4ee3\u7801\u4e0b\u9762\uff0c\u7136\u540e\u5c31\u4e0d\u7528\u8fd4\u56de\u539f\u6765\u754c\u9762\u4e86\n/*\n5\n1 2\n1 3\n2 4\n2 5\n2\n1 4\n3 5\n\n2 1 1 1\n*/\n\n/*\n5\n3 4\n4 5\n1 4\n2 4\n3\n2 3\n1 3\n3 5\n\n3 1 1 1\n*/\n\n```\n\n\u5e38\u89c4\u9898\uff0c\u5927\u5bb6\u4e00\u5b9a\u8981\u6ce8\u610f\u7ec6\u8282\n\n\u6700\u597d\u662f\u80fd\u4e00\u904d AC, \u6bd5\u7adf\u8003\u573a\u4e0a\u53ea\u80fd\u4ea4\u4e00\u904d\n\n\u8ddd\u79bb\u65b0 Noip \u8fd8\u6709\u4e00\u4e2a\u591a\u6708\u65f6\u95f4\uff0c\u795d\u5927\u5bb6 rp ++\n\n\u4e5f\u5e0c\u671b\u81ea\u5df1\u80fd\u66f4\u52aa\u529b\u4e00\u4e9b\uff0c\u52a0\u6cb9\uff01",
        "postTime": 1569589606,
        "uid": 162867,
        "name": "shame_djj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF191C \u3010Fools and Roads\u3011"
    },
    {
        "content": "\u6211\u8bb0\u5f97\u6709\u4e00\u9053\u9898\u76ee\u53eb\u505a\u201c\u6700\u5927\u6d41\u201d\uff08\u53ef\u4e0d\u662f\u7f51\u7edc\u6d41\uff09\n\n\u90a3\u9053\u9898\u76ee\u662f\u8be2\u95ee\u6bcf\u4e2a\u70b9\u7ecf\u8fc7\u4e86\u51e0\u6b21\uff1b\u8fd9\u9053\u9898\u76ee\u662f\u6bcf\u6761\u8fb9\u7ecf\u8fc7\u4e86\u51e0\u6b21\n\n\u540c\u6837\u662f\u88f8\u7684\u6811\u4e0a\u5dee\u5206\uff0c\u4f46\u662f\u8fb9\u548c\u70b9\u7684\u5dee\u5206\u662f\u4e0d\u4e00\u6837\u7684\n\n\u8fb9\u662f```++power[u],++power[v],power[lca]-=2```\n\n\u70b9\u662f```++power[u],++power[v],--power[lca],--power[fa[lca]]```\n\n\u8fd9\u9053\u9898\u8fd8\u8981\u4e00\u4e2a**\u4ee5\u70b9\u4ee3\u8fb9**\u7684\u64cd\u4f5c\n\n\u662f\u4e0d\u662f\u7279\u522b\u6c34\u554a\n\nCode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 100010\nusing namespace std;\nstruct Edge{\n\tint to, next;\n}edge[maxn << 1];\nstruct Line{\n\tint x, y;\n}line[maxn];\nint num, head[maxn], d[maxn], fa[maxn][25], power[maxn], n, m, ans[maxn], id[maxn];\n\ninline int read(){\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n\tfor (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n\treturn s * w;\n} \n\nvoid addedge(int x, int y){ edge[++num] = (Edge){ y, head[x] }; head[x] = num; }\n\nvoid dfs(int u, int pre){\n\td[u] = d[pre] + 1, fa[u][0] = pre;\n\tfor (int i = 0; fa[u][i]; ++i) fa[u][i + 1] = fa[fa[u][i]][i];\n\tfor (int i = head[u]; i; i = edge[i].next){\n\t\tint v = edge[i].to;\n\t\tif (v != pre) dfs(v, u);\n\t}\n}\n\nint Lca(int u, int v){\n\tif (d[u] > d[v]) swap(u, v);\n\tfor (int i = 20; i >= 0; --i) if (d[u] <= d[v] - (1 << i)) v = fa[v][i];\n\tif (u == v) return u;\n\tfor (int i = 20; i >= 0; --i) if (fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i];\n\treturn fa[u][0];\n}\n\nvoid dfs(int u){\n\tfor (int i = head[u]; i; i = edge[i].next){\n\t\tint v = edge[i].to;\n\t\tif (v != fa[u][0]) dfs(v), power[u] += power[v];\n\t}\n\tans[id[u]] = power[u];\n}\n\nint main(){\n\tn = read();\n\tfor (int i = 1; i < n; ++i){\n\t\tline[i].x = read(), line[i].y = read();\n\t\taddedge(line[i].x, line[i].y); addedge(line[i].y, line[i].x);\n\t}\n\tdfs(1, 0);\n\tfor (int i = 1; i < n; ++i)\n\t\tif (d[line[i].x] > d[line[i].y]) id[line[i].x] = i; else id[line[i].y] = i;\n\tm = read();\n\twhile (m--){\n\t\tint x = read(), y = read(), lca = Lca(x, y);\n\t\t++power[x], ++power[y], power[lca] -= 2;\n\t}\n\tdfs(1);\n\tfor (int i = 1; i < n; ++i) printf(\"%d \", ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1564631266,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF191C \u3010Fools and Roads\u3011"
    },
    {
        "content": "\u9898\u610f : \u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u7136\u540e\u7ed9\u4f60m\u5bf9\u70b9\uff0c\u5c06\u6bcf\u5bf9\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u6bcf\u6761\u8fb9\u6743\u503c+1\uff0c\u6c42\u64cd\u4f5c\u5b8c\u6210\u540e\u6bcf\u6761\u8fb9\u7684\u6743\u503c\n\nsolution:\u6811\u4e0a\u5dee\u5206\uff08\u5176\u5b9e\u5982\u679c\u4f60\u662f\u6570\u636e\u7ed3\u6784\u5927\u5e08\u7684\u8bdd\u4e5f\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u505a\uff09\n\n\u6811\u4e0a\u5dee\u5206\u7684\u677f\u5b50\u662f\u8fd9\u6837\u7684\uff1a\n\u8bbe\u5dee\u5206\u6570\u7ec4p,\u5bf9\u4e8e\u8def\u5f84s->t\uff0cp[s]++,p[t]++,p[lca(s,t)]--,p[fa[lca[(s,t)]]]--;\n\n\u7136\u540e\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u5185\u5dee\u5206\u6570\u7ec4\u503c\u4e4b\u548c\u5373\u4e3a*\u8be5\u70b9*\u88ab\u8986\u76d6\u7684\u6b21\u6570\n\u7136\u800c\u8fd9\u9898\u8981\u6c42\u6211\u4eec\u5904\u7406\u8fb9\n\n\u90a3\u4e48\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5\n\n\u4e00\u79cd\u662f\u5bf9\u4e8e\u4e00\u6761\u8fb9\uff0c\u65b0\u5efa\u4e00\u4e2a\u70b9\u4ee3\u8868\u8fd9\u6761\u8fb9\uff0c\u7531\u8be5\u70b9\u5411\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u8fde\u8fb9\n\n\u66b4\u529b\u4f46\u5f88\u65e0\u8111\n\n\u53e6\u4e00\u79cd\u662f\u7528\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e2d\u6df1\u5ea6\u8f83\u5927\u7684\u7aef\u70b9\u4ee3\u8868\u8fd9\u6761\u8fb9\n\n\u4f46\u6b64\u65f6\u539f\u6765\u7684\u5dee\u5206\u64cd\u4f5c\u4f1a\u51fa\u9505\uff0c\u8981\u6539\u4e3ap[s]++,p[t]++,p[lca(s,t)]-=2\uff08\u81ea\u5df1\u7406\u89e3\uff09\n\n\u8d34\u4ee3\u7801\uff08\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u6b27\u62c9\u5e8fST\u8868\u6c42LCA\uff09\n\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<vector>\n#define N 400050\nusing namespace std;\nvector<int> G[N];\nint n,m;\nint dfn[N],pos[N],lg[N],dep[N];\nint id[N],ans[N];\nint st[35][N],cnt=0,plu[N],fa[N];\nvoid aux(int x,int ff) {\n\tdfn[++cnt]=x,pos[x]=cnt,fa[x]=ff;\n\tfor(int i=0; i<G[x].size(); i++) {\n\t\tint to=G[x][i];\n\t\tif(to==ff)continue;\n\t\tdep[to]=dep[x]+1;\n\t\taux(to,x);\n\t\tdfn[++cnt]=x;\n\t\t}\n\t}\nint mn(int a,int b) {\n\treturn (dep[a]<dep[b])?a:b;\n\t}\nvoid build() {\n\tlg[0]=-1;\n\tfor(int i=1; i<=N-10; i++)lg[i]=lg[i>>1]+1;\n\tfor(int i=1; i<=cnt; i++)st[0][i]=dfn[i];\n\tfor(int i=1; i<=lg[cnt]; i++)\n\t\tfor(int r=1; r+(1<<i)<=cnt; r++)\n\t\t\tst[i][r]=mn(st[i-1][r],st[i-1][r+(1<<(i-1))]);\n\t}\nint lca(int a,int b) {\n\tint x=pos[a],y=pos[b];\n\tif(x>y)swap(x,y);\n\tint p=lg[y-x+1];\n\treturn mn(st[p][x],st[p][y-(1<<p)+1]);\n\t}\nvoid add_edge(int a,int b) {\n\tG[a].push_back(b),G[b].push_back(a);\n\t}\nvoid all_last(int x,int ff) {\n\tfor(int i=0; i<G[x].size(); i++) {\n\t\tint to=G[x][i];\n\t\tif(to==ff)continue;\n\t\tall_last(to,x);\n\t\tplu[x]+=plu[to];\n\t\t}\n\tif(id[x])ans[id[x]]=plu[x];\n\t}\nint main() {\n\tscanf(\"%d\",&n);\n\tfor(int i=1; i<n; i++) {\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tadd_edge(a,i+n);\n\t\tadd_edge(i+n,b);\n\t\tid[i+n]=i;\n\t\t}\n\taux(1,0);\n\tbuild();\n\tscanf(\"%d\",&m);\n\tfor(int i=1; i<=m; i++) {\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tint poi=lca(a,b);\n\t\tplu[fa[poi]]--;\n\t\tplu[poi]--;\n\t\tplu[a]++,plu[b]++;\n\t\t}\n\tall_last(1,0);\n\tfor(int i=1; i<n; i++)printf(\"%d \",ans[i]);\n\t}\n\n```",
        "postTime": 1556785352,
        "uid": 67878,
        "name": "stepsys",
        "ccfLevel": 0,
        "title": "[CF191](Fools and Roads)"
    },
    {
        "content": "\u6811\u4e0a\u5dee\u5206\u534a\u88f8\u9898\n\n\u5e38\u89c4\u601d\u8def\u662f\u8fdb\u884c\u4e09\u6b21DFS\uff0c\u7136\u540e\u5e38\u89c4\u8fd0\u7b97\u5373\u53ef\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e24\u6b21dfs\u7684\u601d\u8def\uff08**wyz tql orz**\uff09\n\n\u6211\u4eec\u4ee5\u6837\u4f8b2\u4e3a\u4f8b\n![](https://i.loli.net/2019/02/21/5c6e936f5a219.png)\n\n\u6211\u4eec\u8003\u8651\u4efb\u610f\u4e00\u6761\u8def\u5f84\uff0c\u4ee4\u5176\u8d77\u70b9\u4e3au\u7ec8\u70b9\u4e3av\uff0c\u6bcf\u8d70\u4e00\u6b21\u5f53\u524d\u8def\u5f84\u5219v\u7684\u8bbf\u95ee\u6b21\u6570\u5fc5\u5b9a+1\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u6bcf\u4e00\u4e2a\u70b9\u8868\u793a\u8fde\u63a5\u5176\u4e0a\u7684\u4e00\u6761\u8fb9\u7684\u8bbf\u95ee\u6b21\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u4ee4\u8282\u70b9v\u7684\u8bbf\u95ee\u6b21\u6570+1;\n\n\u4e0e\u6b64\u540c\u65f6\uff0c\u8fc7\u7a0b\u4e2d\u7684\u8def\u5f84\u4e5f\u540c\u6837\u4f1a\u88ab\u8bbf\u95ee\uff0c\u4e14\u8fd9\u91cc\u662f\u53cc\u5411\u8fb9\uff0c\u4e8e\u662f\u4e0e\u6b64\u540c\u65f6\u7684\u6211\u4eec\u4e5f\u4ee4\u8282\u70b9u\u7684\u8bbf\u95ee\u6b21\u6570+1;\u5f53\u7136\u8bbf\u95ee\u5f53\u524d\u5b50\u6811\u4e0b\u6839\u8282\u70b9\u4e2d\u5305\u542b\u7684\u4e24\u4e2a\u70b9\u5e76\u4e0d\u4f1a\u8bbf\u95ee\uff0c\u800c\u6211\u4eec\u5728\u589e\u52a0u\u548cv\u7684\u8bbf\u95ee\u65f6\u540c\u65f6\u4e5f\u9519\u8bef\u5730\u589e\u52a0\u4e86\u5176\u516c\u5171\u7236\u8282\u70b9\u7684\u8bbf\u95ee\u91cf\uff0c\u4e8e\u662f\u6211\u4eec\u4ee4lca(u,v)\u7684\u8bbf\u95ee\u91cf-2\u5373\u53ef\u3002\n\n\u4f8b\u5982\u4e0a\u56fe\u4e2d\u6211\u4eec\u4ece\u8282\u70b95\u8d70\u5230\u8282\u70b93\uff0c\u6211\u4eec\u4ee4\u8282\u70b93\u4e0e\u8282\u70b95\u7684\u8bbf\u95ee\u6b21\u6570+1\uff0c\u540c\u65f6\u4f7f\u8282\u70b94\u7684\u8bbf\u95ee\u6b21\u6570-2\u3002\n\n\u5982\u4e0b\uff1a\n\n```cpp\nwhile(k--){\n    int u=read(),v=read();\n    diff[u]++,diff[v]++,diff[lca(u,v)]-=2;\n}\n```\n\n\u6700\u540e\u8f93\u51fa\u7b54\u6848\u65f6\u53ea\u9700\u8981\u5224\u65ad\u6bcf\u6761\u8fb9\u4e24\u7aef\u70b9\u7684\u6df1\u5ea6\u5927\u5c0f\u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define maxn 100005\nusing namespace std;\ninline char get(){\n    static char buf[30000],*p1=buf,*p2=buf;\n    return p1==p2 && (p2=(p1=buf)+fread(buf,1,30000,stdin),p1==p2)?EOF:*p1++;\n}\ninline int read(){\n    register char c=get();register int f=1,_=0;\n    while(c>'9' || c<'0')f=(c=='-')?-1:1,c=get();\n    while(c<='9' && c>='0')_=(_<<3)+(_<<1)+(c^48),c=get();\n    return _*f;\n}\nstruct edge{\n    int u,v,w,next;\n    int num=0;\n}E[maxn<<1];\nint n,k;\nint p[maxn],eid;\nint d[maxn], parent[maxn][20];\nint diff[maxn];\ninline void init(){\n    for(register int i=0;i<maxn;i++)p[i]=d[i]=-1;\n    eid=0;\n}\ninline void insert(int u,int v){\n    E[eid].u=u;\n    E[eid].v=v;\n    E[eid].next=p[u];\n    p[u]=eid++;\n}\ninline void insert2(int u,int v){\n    insert(u,v);\n    insert(v,u);\n}\nvoid dfs(int u){\n    for (register int i=p[u];~i;i=E[i].next) {\n        if (d[E[i].v]==-1){\n            d[E[i].v]=d[u]+1;\n            parent[E[i].v][0]=u;\n            dfs(E[i].v);\n        }\n    }\n}\nint lca(int x, int y) {\n    int i,j;\n    if(d[x]<d[y])swap(x,y);\n    for(i=0;(1<<i)<=d[x];i++);\n    i--;\n    for(register int j=i;j>=0;j--){\n        if (d[x]-(1<<j)>=d[y])x=parent[x][j];\n    }\n    if(x==y)return x;\n    for(register int j=i;j>=0;j--){\n        if(parent[x][j]!=parent[y][j]) {\n            x=parent[x][j];\n            y=parent[y][j];\n    \t}\n    }\n    return parent[x][0];\n}\nint dd[maxn];\nvoid dfs_(int u,int fa,int flag){\n\tdd[u]=flag;\n    for(register int i=p[u];~i;i=E[i].next){\n        int v=E[i].v;\n        if(fa==v)continue;\n        dfs_(v,u,flag+1);\n        diff[u]+=diff[v];\n    }\n}\nint u[maxn],v[maxn];\nsigned main(){\n    //freopen(\"1.txt\",\"r\",stdin);\n    init();\n    n=read();\n    for(register int i=2;i<=n;i++){\n        u[i]=read(),v[i]=read();\n        insert2(u[i],v[i]);\n    }\n    d[1]=0;\n    dfs(1);\n    for(register int level=1;(1<<level)<=n;level++){\n        for(register int i=1;i<=n;i++){\n            parent[i][level]=parent[parent[i][level-1]][level-1];\n        }\n    }\n    k=read();\n    while(k--){\n        int casu=read(),casv=read();\n        diff[casu]++,diff[casv]++,diff[lca(casu,casv)]-=2;\n    }\n    dfs_(1,-1,1);\n    for(register int i=2;i<=n;i++){\n    \tif(dd[u[i]]>=dd[v[i]])cout<<diff[u[i]]<<\" \";\n    \telse cout<<diff[v[i]]<<\" \";\n\t}\n    return 0;\n}\n```",
        "postTime": 1550752895,
        "uid": 76296,
        "name": "\u5f71\u8e2a\u6d3e\u6b66\u50e7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF191C \u3010Fools and Roads\u3011"
    },
    {
        "content": "\u663e\u7136\u6811\u4e0a\u5dee\u5206\uff0c\u90a3\u4e48\u914d\u5408 LCA\u3002  \n\u53cd\u6b63\u5728\u4e0b\u7528\u4e86\u6811\u5256\uff0c\u8fd8\u6709 BFS \u8d5b\u9ad8\uff01\n\n\u6240\u4ee5\u8bf8\u4f4d\u5927\u4f6c\u7684 DFS \u5b9e\u73b0\u7684\u64cd\u4f5c\u90fd\u88ab\u6211\u6362\u6210\u4e86\u7528 **BFS \u5e8f**\u5b9e\u73b0\u3002  \n\u505a\u4e00\u6b21 BFS \u5e76\u4fdd\u7559\u904d\u5386\u7684\u5e8f\u5217\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\nusing namespace std;\nconst int N = 2e5;\nint n,k;\nint to[(N << 1) + 10],pre[(N << 1) + 10],first[N + 10];\nint c[N + 10];\nint dep[N + 10],fa[N + 10],sz[N + 10],son[N + 10],top[N + 10];\nint q[N + 10],head,tail;\ninline void add(int u,int v)\n{\n\tstatic int tot = 0;\n\tto[++tot] = v;\n\tpre[tot] = first[u];\n\tfirst[u] = tot;\n}\ninline int getlca(int x,int y)\n{\n\twhile(top[x] ^ top[y])\n\t\tdep[top[x]] > dep[top[y]] ? x = fa[top[x]] : y = fa[top[y]];\n\treturn dep[x] < dep[y] ? x : y;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tint x,y;\n\tfor(register int i = 1;i < n;++i)\n\t\tscanf(\"%d%d\",&x,&y),add(x,y),add(y,x);\n\tq[++tail] = dep[1] = 1;\n\tint p;\n\twhile(head < tail)\n\t{\n\t\tp = q[++head];\n\t\tsz[p] = 1;\n\t\tfor(register int i = first[p];i;i = pre[i])\n\t\t\tif(to[i] ^ fa[p])\n\t\t\t{\n\t\t\t\tq[++tail] = to[i];\n\t\t\t\tdep[to[i]] = dep[p] + 1;\n\t\t\t\tfa[to[i]] = p;\n\t\t\t}\n\t}\n\tfor(register int i = n;i;--i)\n\t{\n\t\tsz[fa[q[i]]] += sz[q[i]];\n\t\tif(!son[fa[q[i]]] || sz[q[i]] > sz[son[fa[q[i]]]])\n\t\t\tson[fa[q[i]]] = q[i];\n\t}\n\tfor(register int i = 1;i <= n;++i)\n\t\ttop[q[i]] = son[fa[q[i]]] == q[i] ? top[fa[q[i]]] : q[i];\n\tscanf(\"%d\",&k);\n\twhile(k--)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tint lca = getlca(x,y);\n\t\t++c[x],++c[y],c[lca] -= 2;\n\t}\n\tfor(register int i = n;i;--i)\n\t\tc[fa[q[i]]] += c[q[i]];\n\tfor(register int i = 1;i < n;++i)\n\t\tprintf(\"%d \",c[dep[to[i * 2]] > dep[to[i * 2 - 1]] ? to[i * 2] : to[i * 2 - 1]]);\n}\n```",
        "postTime": 1546060925,
        "uid": 75840,
        "name": "deserter",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF191C \u3010Fools and Roads\u3011"
    },
    {
        "content": "\u76f4\u63a5\u6c42\u8fb9\u8d70\u8fc7\u7684\u6b21\u6570\u4e0d\u597d\u6c42\uff0c\u6211\u4eec\u5bf9\u6811\u8fdb\u884c\u4e00\u6b21 dfs\uff0c\u8003\u8651\u5230\u6bcf\u4e2a\u70b9\u53ea\u6709\u4e00\u4e2a\u7236\u4eb2\uff0c\u6211\u4eec\u7528\u70b9 $ u $ \u8868\u793a\u4ece\u5b83\u7236\u4eb2\u8fde\u5230\u5b83\u7684\u8fb9\uff0c\u6839\u8282\u70b9\u4e0d\u8868\u793a\u8fb9\n\n\u7528\u4e00\u4e2a\u6811\u4e0a\u5dee\u5206\u7ef4\u62a4\u6bcf\u6761\u8fb9\u7ecf\u8fc7\u7684\u6b21\u6570\u5373\u53ef\n\n```cpp\n#include <bits/stdc++.h>\n#define Fast_cin ios::sync_with_stdio(false), cin.tie(0);\n#define rep(i, a, b) for(register int i = a; i <= b; i++)\n#define per(i, a, b) for(register int i = a; i >= b; i--)\n#define DEBUG(x) cerr << \"DEBUG\" << x << \" >>> \" << endl;\nusing namespace std;\n\ntypedef unsigned long long ull;\ntypedef pair <int, int> pii;\ntypedef long long ll;\n\ntemplate <typename _T>\ninline void read(_T &f) {\n    f = 0; _T fu = 1; char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') fu = -1; c = getchar(); }\n    while(c >= '0' && c <= '9') { f = (f << 3) + (f << 1) + (c & 15); c = getchar(); }\n    f *= fu;\n}\n\ntemplate <typename T>\nvoid print(T x) {\n    if(x < 0) putchar('-'), x = -x;\n    if(x < 10) putchar(x + 48);\n    else print(x / 10), putchar(x % 10 + 48);\n}\n\ntemplate <typename T>\nvoid print(T x, char t) {\n    print(x); putchar(t);\n}\n\ntemplate <typename T>\nstruct hash_map_t {\n    vector <T> v, val, nxt;\n    vector <int> head;\n    int mod, tot, lastv;\n    T lastans;\n    bool have_ans;\n\n    hash_map_t (int md = 0) {\n        head.clear(); v.clear(); val.clear(); nxt.clear(); tot = 0; mod = md;\n        nxt.resize(1); v.resize(1); val.resize(1); head.resize(mod);\n        have_ans = 0;\n    }\n\n    bool count(int x) {\n        int u = x % mod;\n        for(register int i = head[u]; i; i = nxt[i]) {\n            if(v[i] == x) {\n                have_ans = 1;\n                lastv = x;\n                lastans = val[i];\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    void ins(int x, int y) {\n        int u = x % mod;\n        nxt.push_back(head[u]); head[u] = ++tot;\n        v.push_back(x); val.push_back(y);\n    }\n\n    int qry(int x) {\n        if(have_ans && lastv == x) return lastans;\n        count(x);\n        return lastans;\n    }\n};\n\nconst int N = 1e5 + 5;\n\nmap < pair <int, int>, int > wxw;\nvector <int> adj[N];\nint fa[N][20], d[N], s[N], id[N], ans[N];\nint n, m;\n\nvoid dfs1(int u, int father) {\n    fa[u][0] = father;\n    for(register int i = 1; i <= 18; i++) fa[u][i] = fa[fa[u][i - 1]][i - 1];\n    for(register unsigned i = 0; i < adj[u].size(); i++) {\n        int v = adj[u][i];\n        if(v != father) {\n            d[v] = d[u] + 1;\n            dfs1(v, u);\n            id[v] = wxw[make_pair(u, v)];\n        }\n    }\n}\n\nint LCA(int u, int v) {\n    if(d[u] < d[v]) swap(u, v);\n    for(register int i = 18; i >= 0; i--)\n        if(d[fa[u][i]] >= d[v])\n            u = fa[u][i];\n    // fprintf(stderr, \"u = %d, v = %d\\n\", u, v);\n    if(u == v) return u;\n    for(register int i = 18; i >= 0; i--)\n        if(fa[u][i] != fa[v][i])\n            u = fa[u][i], v = fa[v][i];\n    return fa[u][0];\n}\n\nvoid dfs2(int u, int father) {\n    for(register unsigned i = 0; i < adj[u].size(); i++) {\n        int v = adj[u][i];\n        if(v != father) {\n            dfs2(v, u);\n            s[u] += s[v];\n        }\n    }\n}\n\nint main() {\n    read(n);\n    for(register int i = 1; i < n; i++) {\n        int u, v;\n        read(u); read(v);\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n        wxw[make_pair(u, v)] = i;\n        wxw[make_pair(v, u)] = i;\n    }\n    d[1] = 1;\n    dfs1(1, 0);\n    read(m);\n    for(register int i = 1; i <= m; i++) {\n        int u, v;\n        read(u); read(v);\n        ++s[u]; ++s[v]; s[LCA(u, v)] -= 2;\n        // fprintf(stderr, \"LCA(%d, %d) = %d\\n\", u, v, LCA(u, v));\n    }\n    dfs2(1, 0);\n    for(register int i = 2; i <= n; i++) ans[id[i]] = s[i];\n    for(register int i = 1; i < n; i++) print(ans[i], ' ');\n    putchar('\\n');\n    return 0;\n}\n```",
        "postTime": 1554082176,
        "uid": 51815,
        "name": "LJC00118",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF191C \u3010Fools and Roads\u3011"
    },
    {
        "content": "## \u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u65b0\u601d\u8def\n**\u6811\u4e0a\u5dee\u5206**\n\n>Node[LCA] -= 2;\n\n>Node[u] ++;\n\n>Node[v] ++;\n\n**\u6c42\u5b50\u6811\u548c**\n\n>Node[u] += Node[v] (v is u's son)\n\n**\u6c42\u6811\u4e0a\u524d\u7f00\u548c**\n\n>F[u] = F[u's Father] + Node[u];\n\n**\u8be2\u95ee**\n\n>F[son] - F[father]\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\n\n>3\u904dDFS\uff0cLCA\n\n>$O(k\\ log_2n\\ +\\ n)$\n\n**\u4ee3\u7801**\n\n```cpp\n#include<bits/stdc++.h>\n#define N 100010\n#define LogN 20\nusing namespace std;\n\nstruct EDGE{\n\tint u, v;\n\tint Next;\n}G[N << 1];\n\nint tot = 0;\nint Head[N];\n\ninline void AddEdge(int u, int v)\n{\n\t++ tot;\n\tG[tot].u = u;\n\tG[tot].v = v;\n\tG[tot].Next = Head[u];\n\tHead[u] = tot;\n}\n\nint n;\nint BZ[N][LogN];\nint Dep[N];\n\ninline void DFS(int u)\n{\n\tDep[u] = Dep[BZ[u][0]] + 1;\n\tfor(int i = Head[u]; i; i = G[i].Next)\n\t{\n\t\tint v = G[i].v;\n\t\tif(v == BZ[u][0])\n\t\t\tcontinue;\n\t\tBZ[v][0] = u;\n\t\tDFS(v);\n\t}\n}\n\ninline void Cal()\n{\n\tfor(int i = 1; i < LogN; ++ i)\n\t\tfor(int j = 1; j <= n; ++ j)\n\t\t\tBZ[j][i] = BZ[BZ[j][i - 1]][i - 1];\n}\n\ninline int Get_LCA(int u, int v)\n{\n\tif(Dep[u] < Dep[v])\n\t\tswap(u, v);\n\tfor(int i = LogN - 1; i >= 0; -- i)\n\t\tif(Dep[BZ[u][i]] >= Dep[v])\n\t\t\tu = BZ[u][i];\n\tif(u == v)\n\t\treturn u;\n\tfor(int i = LogN - 1; i >= 0; -- i)\n\t\tif(BZ[u][i] != BZ[v][i])\n\t\t{\n\t\t\tu = BZ[u][i];\n\t\t\tv = BZ[v][i];\n\t\t}\n\treturn BZ[u][0];\n}\n\nint A[N];\nint B[N];\n\nint Node[N];\n\ninline void DFS2(int u)\n{\n\tfor(int i = Head[u]; i; i = G[i].Next)\n\t{\n\t\tint v = G[i].v;\n\t\tif(v == BZ[u][0])\n\t\t\tcontinue;\n\t\tDFS2(v);\n\t\tNode[u] += Node[v];\n\t}\n}\n\nint F[N];\n\ninline void DFS3(int u, int val)\n{\n\tF[u] = Node[u] + val;\n\tfor(int i = Head[u]; i; i = G[i].Next)\n\t{\n\t\tint v = G[i].v;\n\t\tif(v == BZ[u][0])\n\t\t\tcontinue;\n\t\tDFS3(v, F[u]);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i < n; ++ i)\n\t{\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tA[i] = u;\n\t\tB[i] = v;\n\t\tAddEdge(u, v);\n\t\tAddEdge(v, u);\n\t}\n\tDFS(1);\n\tCal();\n\tint k;\n\tscanf(\"%d\", &k);\n\tfor(int i = 1; i <= k; ++ i)\n\t{\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tint LCA = Get_LCA(u, v);\n\t\t++ Node[u];\n\t\t++ Node[v];\n\t\tNode[LCA] -= 2;\n\t}\n\t\n\tDFS2(1);\n\tDFS3(1, 0);\n\t\n\tfor(int i = 1; i < n; ++ i)\n\t{\n\t\tint u = A[i];\n\t\tint v = B[i];\n\t\tif(Dep[u] < Dep[v])\n\t\t\tswap(u, v);\n\t\tprintf(\"%d \", F[u] - F[v]);\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1523970186,
        "uid": 29519,
        "name": "qianfujia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF191C \u3010Fools and Roads\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u5176\u5b9e\u662f\u4e00\u4e2a\u7ecf\u5178\u6811\u4e0a\u5dee\u5206\u9898.\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5dee\u5206\u6570\u7ec4f.  \n\u5bf9\u4e8e\u4e00\u7ec4$u,v$\u4e0d\u76f8\u7b49\u7684\u8be2\u95ee,\u6211\u4eec\u8003\u8651\u627e\u5230$u,v$\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148$p$,\u628a$f[u]++,f[v]++$,\u7136\u540e\u628a$f[p]-=2$.\u5982\u679c\u5728\u7ebf\u6c42\u51fa\u5b83\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148,\u8fd9\u9898\u7684\u601d\u8def\u4f1a\u597d\u60f3\u4e00\u4e9b.  \n\u6700\u540e\u4e00\u904ddfs,\u628a\u5dee\u5206\u6570\u7ec4\u91cd\u65b0\u52a0\u8d77\u6765,\u5c31\u5f97\u5230\u4e86\u7b54\u6848.  \n\u4e0d\u8981\u5fd8\u8bb0\u52a0\u8fb9\u7684\u65f6\u5019\u52a0\u5165\u8fb9\u7684\u7f16\u53f7\u5c31\u53ef\u4ee5\u4e86.  \n\u4ee3\u7801\u5b9e\u73b0\u7528\u4e86**tarjan**\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148,\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u6b65\u9aa4\u548c\u5dee\u5206\u6df7\u5728\u4e86\u4e00\u8d77,\u6240\u4ee5\u770b\u8d77\u6765\u6bd4\u8f83\u8ff7.\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair<int,int> pii;//first\u662f\u8fb9\u6307\u5411\u7684\u70b9,second\u662f\u8fb9\u7684\u5e8f\u53f7\nconst int boss=1e5;\ntypedef int fuko[boss|10];\nvector<pii> lj[boss|10];\nvector<int> fo[boss|10];\nfuko fa,ans,f,vis;int n,k;\n\nint find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\n//\u7ed3\u5408tarjan\u6c42lca\u7684\u4ee3\u7801\u5e94\u8be5\u80fd\u8bfb\u61c2\u8fd9\u4e2adfs.\nvoid dfs(int x)\n{\nfa[x]=x,vis[x]=1;\nfor (int i:fo[x]) f[x]++,vis[i]?f[find(i)]-=2:0;\nfor (pii i:lj[x]) if (!vis[i.first]) \n  {\n  dfs(i.first);\n  f[x]+=ans[i.second]=f[i.first];\n  //ans[i.second]\u6700\u540e\u4e00\u6b21\u66f4\u65b0\u7684\u7ed3\u679c\u5c31\u662f\u7b54\u6848\u4e86,\u56e0\u4e3a\u6b64\u65f6\u8be2\u95ee\u5230\u7684\u8282\u70b9(i.first)\u6df1\u5ea6\u6700\u5c0f.\n  fa[find(i.first)]=x;\n  }\n}\n\nint main()\n{\nint i,u,v,k;\nscanf(\"%d\",&n);\nfor (i=1;i<n;i++) \n  {\n  scanf(\"%d%d\",&u,&v);\n  lj[u].push_back(pii(v,i));\n  lj[v].push_back(pii(u,i));\n  }\nscanf(\"%d\",&k);\nfor (i=1;i<=k;i++) \n  {\n  scanf(\"%d%d\",&u,&v);\n  if (u!=v) //\u5dee\u5206\u4e0d\u7528\u8003\u8651u=v\u7684\u60c5\u51b5\n    {\n    fo[u].push_back(v);\n\tfo[v].push_back(u); \n\t}\n  }dfs(1);\nfor (i=1;i<n;i++) printf(\"%d \",ans[i]);\n}\n```",
        "postTime": 1523079488,
        "uid": 49371,
        "name": "Fuko_Ibuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF191C \u3010Fools and Roads\u3011"
    }
]