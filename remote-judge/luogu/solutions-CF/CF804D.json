[
    {
        "content": "\u9996\u5148\u53d1\u73b0\u8fd9\u9053\u9898\u7684\u671f\u671b\u662f\u5047\u7684\uff0c\u6211\u4eec\u9700\u8981\u7b97\u4e24\u68f5\u6811 $x,y$ \u4e2d\u6240\u6709\u8fde\u8fb9\u65b9\u5f0f\u7684\u76f4\u5f84\u957f\u5ea6\u548c\u9664\u4ee5 $siz_x\\times siz_y$\u3002\n\n\u6211\u4eec\u90fd\u77e5\u9053\uff0c\u8ddd\u79bb\u6811\u4e0a\u4e00\u4e2a\u70b9\u6700\u8fdc\u7684\u70b9\u4e2d\uff0c\u4e00\u5b9a\u6709\u4e00\u4e2a\u662f\u76f4\u5f84\u7684\u7aef\u70b9\u3002\u6240\u4ee5\u627e\u51fa\u6bcf\u68f5\u6811\u7684\u76f4\u5f84\u7aef\u70b9\uff0c\u7136\u540e\u5c31\u53ef\u4ee5 dfs \u6c42\u51fa\u6240\u6709\u70b9\u7684\u6700\u8fdc\u8ddd\u79bb $mx_i$\u3002\n\n\u5982\u679c\u6211\u4eec\u5728\u4e24\u68f5\u6811 $x,y$ \u4e2d\u9009\u62e9\u4e86\u4e24\u4e2a\u70b9 $a,b$ \u8fdb\u884c\u8fde\u8fb9\uff0c\u90a3\u4e48\u76f4\u5f84\u7684\u957f\u5ea6\u663e\u7136\u662f $\\max(d_x,d_y,mx_a+mx_b+1)$\u3002\u5de6\u8fb9 $\\max(d_x,d_y)$ \u8fd9\u90e8\u5206\u5f88\u597d\u5904\u7406\uff0c\u96be\u7b97\u7684\u662f\u53f3\u8fb9 $mx_a+mx_b+1$ \u4ea7\u751f\u7684\u8d21\u732e\u3002\n\n\u4e00\u79cd\u6bd4\u8f83\u81ea\u7136\u7684\u601d\u8def\u662f\u5bf9\u4e8e $x$ \u6811\u7684\u6bcf\u4e2a\u70b9 $s$\uff0c\u627e\u5230 $y$ \u6811\u4e2d\u6240\u6709\u6ee1\u8db3 $mx_s\\ge \\max(d_x,d_y)-mx_t$ \u7684 $s$ \u7684\u4e2a\u6570\u4e0e\u8ddd\u79bb\u548c\u3002\u6ce8\u610f\u5230 $mx_s\\le siz_y$\uff0c\u800c $\\sum_ysiz_y=n$\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u524d\u7f00\u548c $O(n)$ \u9884\u5904\u7406\u5e76 $O(1)$ \u56de\u7b54\u6bcf\u4e2a\u8be2\u95ee\u3002\n\n\u8fd9\u6837\u6211\u4eec\u56de\u7b54\u4e00\u6b21\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53d8\u4e3a\u4e86 $\\min(siz_x,siz_y)$\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u7ed3\u70b9\u4e2a\u6570\u5c11\u7684\u90a3\u4e00\u68f5\u6811\u3002\u5982\u679c\u6211\u4eec\u7528 map \u8bb0\u5fc6\u5316\u6240\u6709\u7684\u8be2\u95ee\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\sqrt n)$ \u7684\uff08\u8fd9\u91cc\u9ed8\u8ba4 $n,q$ \u540c\u9636\uff09\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u8003\u8651\u5c06\u6240\u6709\u6811\u6309\u7167\u5927\u5c0f\u5206\u4e3a $\\le \\sqrt n$ \u548c $>\\sqrt n$ \u4e24\u4e2a\u90e8\u5206\u3002\n\n- \u5bf9\u4e8e\u5c0f\u6811\u548c\u4efb\u610f\u6811\u7684\u8be2\u95ee\uff0c\u7531\u4e8e\u5c0f\u6811\u7684\u5927\u5c0f $\\le \\sqrt n$\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt n)$\u3002\n- \u5bf9\u4e8e\u4e24\u68f5\u5927\u6811\u4e4b\u95f4\u7684\u8be2\u95ee\uff0c\u6ce8\u610f\u5230\u5927\u6811\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc7 $\\sqrt n$ \u4e2a\uff0c\u6240\u4ee5\u6bcf\u4e00\u68f5\u5927\u6811\u5bf9\u603b\u590d\u6742\u5ea6\u7684\u8d21\u732e\u6b21\u6570\u4e0d\u8d85\u8fc7 $\\sqrt n$\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt n)$\u3002\n\n\u7efc\u4e0a\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int Maxn=2e5;\n\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\n\nint n,m,q,fa[Maxn+5],siz[Maxn+5];\nint mx[Maxn+5],dis[Maxn+5],ans[Maxn+5];\nvector<int> v[Maxn+5],w[Maxn+5],cnt[Maxn+5];\nvector<ll> sum[Maxn+5];\nmap<pair<int,int>,double> mp;\ninline int Find(int x) {return fa[x]==x?x:fa[x]=Find(fa[x]);}\n\ninline void dfs(int x,int f,int d)\n{\n    mx[x]=max(mx[x],d),dis[x]=d;\n    for(auto y:v[x]) if(y!=f) dfs(y,x,d+1);\n}\ninline double Solve(int x,int y)\n{\n    int dx=max(ans[x],ans[y]); ll s1=1ll*siz[x]*siz[y],s2=0;\n    for(auto i:w[x]) if(dx-mx[i]<=siz[y])\n    {\n        if(!(dx-mx[i]))\n        {\n            s1-=cnt[y][siz[y]],s2+=sum[y][siz[y]];\n            s2+=1ll*mx[i]*cnt[y][siz[y]];\n        }\n        else\n        {\n            ll a=cnt[y][siz[y]]-cnt[y][dx-mx[i]-1];\n            ll b=sum[y][siz[y]]-sum[y][dx-mx[i]-1];\n            s1-=a,s2+=b+a*mx[i];\n        }\n    }\n    ll res=s1*dx+s2; return 1.0*res/(1ll*siz[x]*siz[y]);\n}\n\nint main()\n{\n    n=read(),m=read(),q=read();\n    For(i,1,n) fa[i]=i,siz[i]=1;\n    For(i,1,m)\n    {\n        int a=read(),b=read();\n        v[a].push_back(b),v[b].push_back(a);\n        a=Find(a),b=Find(b);\n        if(a!=b) fa[a]=b,siz[b]+=siz[a];\n    }\n    For(i,1,n) w[Find(i)].push_back(i);\n    For(i,1,n) if(fa[i]==i)\n    {\n        int rt=0; dfs(i,0,0);\n        for(auto j:w[i]) if(dis[j]>dis[rt]) rt=j;\n        dfs(rt,0,0);\n        for(auto j:w[i]) if(dis[j]>dis[rt]) rt=j;\n        dfs(rt,0,0);\n        sum[i].resize(siz[i]+3),cnt[i].resize(siz[i]+3);\n        for(auto j:w[i]) cnt[i][mx[j]]++,sum[i][mx[j]]+=mx[j]+1,ans[i]=max(ans[i],mx[j]);\n        For(j,1,siz[i]) cnt[i][j]+=cnt[i][j-1],sum[i][j]+=sum[i][j-1];\n    }\n    while(q--)\n    {\n        int a=read(),b=read(); a=Find(a),b=Find(b);\n        if(a==b) {printf(\"-1\\n\"); continue;}\n        if(siz[a]>siz[b]) swap(a,b);\n        if(mp[make_pair(a,b)]) printf(\"%.8lf\\n\",mp[make_pair(a,b)]);\n        else printf(\"%.8lf\\n\",mp[make_pair(a,b)]=Solve(a,b));\n    }\n    return 0;\n}\n```",
        "postTime": 1673770718,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF804D\u3010Expected diameter of a tree\u3011"
    },
    {
        "content": "### Expected diameter of a tree\n\n#### \u89e3\u6790\uff1a\n\n###### \u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u4e00\u7247\u68ee\u6797\uff0c$q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u4e24\u4e2a\u70b9\uff0c\u95ee\u5c06\u8fd9\u4e24\u4e2a\u70b9\u6240\u5728\u7684\u6811\u8fde\u63a5\u8d77\u6765\u7ec4\u6210\u7684\u65b0\u6811\uff0c\u5b83\u7684\u671f\u671b\u76f4\u5f84\u957f\u5ea6\u7684\u503c\u662f\u591a\u5c11\u3002\n\n--------------------------\n\n###### \u601d\u8def\uff1a\n\n\u5927\u5957\u8def\uff0c\u4f46\u7ec6\u8282\u5de8\u591a\uff0c\u8c03\u4e86\u4e00\u5929zbl\n\n\u8003\u8651\u76f4\u5f84\u7684\u671f\u671b\u600e\u4e48\u7b97\uff0c\u5f88\u660e\u663e\u4e3a$\\frac{\\text{\u76f4\u5f84\u7684\u603b\u957f\u5ea6}}{\\text{\u65b0\u6811\u7684\u4e2a\u6570}}$\uff0c\u5176\u4e2d\u80fd\u7ec4\u6210\u7684\u6570\u7684\u4e2a\u6570\u5f88\u660e\u663e\u5c31\u662f $siz_u\\times siz_v$ \uff0c\u8003\u8651\u600e\u4e48\u7b97\u4e0a\u9762\u7684\u90e8\u5206\u3002\n\n\u6211\u4eec\u8003\u8651\u6362\u6839dp\uff0c\u5148\u9884\u5904\u7406\u51fa\u6765\u6bcf\u4e2a\u70b9\u5230\u5f53\u524d\u6811\u4e2d\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\uff0c\u8bb0\u4e3a $dp_i$\uff08\u5176\u5b9e\u76f4\u63a5\u8003\u8651\u6811\u4e2d\u6bcf\u4e2a\u70b9\u5230\u76f4\u5f84\u4e24\u4e2a\u7aef\u70b9\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c\u5373\u53ef\uff09\uff0c\u6211\u4eec\u8bbe\u5f53\u524d\u9700\u8981\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e3a $u,v$ \uff0c\u90a3\u7ec4\u6210\u7684\u65b0\u6811\u7684\u76f4\u5f84\u4e3a $\\max (len_1,len_2,dp_u+dp_v+1)$\uff0c\u6211\u4eec\u8003\u8651\u628a $dp$ \u5904\u7406\u51fa\u6765\u5bf9\u4e8e\u6bcf\u68f5\u6811\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u6c42\u4e0b\u9762\u8fd9\u4e2a\u5f0f\u5b50\uff1a\n$$\nans=\\sum_{i\\in A,j\\in B}dp_i+dp_j+1(dp_i+dp_j+1\\geq mx)+\\max(len_1,len_2)\\times \\sum_{i\\in A,j\\in B}[dp_i+dp_j+1<mx]\n$$\n\u8868\u793a\u5bf9\u4e8e $u$ \u548c $v$ \u8fde\u63a5\u8d77\u6765\u4f1a\u5f71\u54cd\u5f71\u54cd\u76f4\u5f84\u7684 $dp_u+dp_v+1$ \u7684\u548c\u548c\u4e0d\u4f1a\u5f71\u54cd\u76f4\u5f84\u7684\u70b9\u5bf9 $(u,v)$ \u7684\u4e2a\u6570\u4e58 $\\max(len_1,len_2)$\u3002\n\n\u6211\u5728\u8fd9\u91cc\u5361\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u6700\u5f00\u59cb\u60f3\u5230\u6839\u53f7\u5206\u6cbb\u4ee5\u4e3a\u590d\u6742\u5ea6\u5047\u4e86\u6ca1\u6562\u5199\uff0c\u540e\u6765\u542c\u5de8\u4f6c\u5206\u6790\u4e86\u4e00\u4e0b\u89c9\u5f97\u5f88\u5bf9\uff0c\u6240\u4ee5\u8003\u8651\u5bf9\u6811\u7684\u5927\u5c0f\u8fdb\u884c\u6839\u53f7\u5206\u6cbb\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\u7684\u4e24\u68f5\u6811\uff0c\u5982\u679c\u6709\u4e00\u8005\u7684\u70b9\u6570\u5c0f\u4e8e $\\sqrt n$ \uff0c\u90a3\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u8fd9\u68f5\u6811\u4e0a\u7684\u6bcf\u4e2a\u70b9\uff0c\u5728\u7b2c\u4e8c\u68f5\u6811\u4e2d\u4e8c\u5206\u627e\u4f7f\u5f97\u4e0e\u5f53\u524d\u679a\u4e3e\u5230\u7684\u7b2c\u4e00\u68f5\u6811\u4e2d\u7684\u70b9\u76f8\u52a0\u5c0f\u4e8e $\\max(len_1,len_2)$ \u7684\u70b9\u7684\u4e2a\u6570\u548c\u5927\u4e8e\u5f53\u524d $\\max(len_1,len_2)$ \u7684\u8ddd\u79bb\u548c\uff0c\u8fd9\u91cc\u53ef\u4ee5\u524d\u7f00\u548c\u9884\u5904\u7406\u4e00\u4e0b\uff0c\u90a3\u4e48\u53ea\u8981\u4e8c\u5206\u627e\u5230\u4e86\u5f53\u524d\u70b9\u5c31\u53ef\u4ee5 $\\mathcal O(1)$ \u6c42\u8ddd\u79bb\u4e86\u3002\n\n\u5bf9\u4e8e\u4e24\u68f5\u6811\u90fd\u5927\u4e8e $\\sqrt n$ \u7684\u90e8\u5206\uff0c\u6211\u4eec\u8003\u8651\u9884\u5904\u7406\uff0c\u8003\u8651\u679a\u4e3e\u7b2c\u4e00\u68f5\u6811\uff0c\u518d\u679a\u4e3e\u5f53\u524d\u6811\u4e2d\u7684\u6bcf\u4e2a\u70b9\uff0c\u7136\u540e\u518d\u5f80\u540e\u627e\u6bcf\u68f5\u5927\u5c0f\u5927\u4e8e $\\sqrt n$ \u7684\u6811\uff0c\u5e76\u5728\u91cc\u9762\u4e8c\u5206\u3002\u8003\u8651\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u5e94\u8be5\u6709 $\\sqrt n$ \u68f5\u5927\u5c0f\u5728 $\\sqrt n$ \u7684\u6811\uff0c\u90a3\u679a\u4e3e\u9700\u8981\u9884\u5904\u7406\u7684\u6bcf\u5bf9\u6811\u7684\u7ec4\u5408\u662f $\\mathcal O((\\sqrt n)^2)=\\mathcal O(n)$ \u7684\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5728\u6bcf\u68f5\u6811\u4e2d\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff0c\u56e0\u4e3a\u6bcf\u68f5\u6811\u53ea\u4f1a\u904d\u5386\u4e00\u6b21\uff0c\u6240\u4ee5\u8fd9\u90e8\u5206\u662f\u5747\u644a $\\mathcal O(n)$ \u7684\uff0c\u6bcf\u68f5\u6811\u4e00\u5171\u6709 $\\sqrt n$ \u4e2a\u8282\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6211\u90fd\u9700\u8981\u5728\u540e\u9762\u7684\u6811\u4e2d\u4e8c\u5206\u627e\uff0c\u8fd9\u90e8\u5206\u662f $\\sqrt n\\log n$\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\sqrt n \\log n)$\u7684\u3002\n\n\u5177\u4f53\u7ec6\u8282\u8bf7\u770b\u4ee3\u7801\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\sqrt n\\log n+q\\sqrt n\\log n)$\uff0c\u5e38\u6570\u597d\u5c31\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n----------------------------------------------------\n\n#### code\uff1a\n\n```c++\n#include <bits/stdc++.h>\n#define int long long // \u6ce8\u610f\u5f00 long long\n#define pb push_back\n#define pob pop_back\n#define pf push_front\n#define pof pop_front\n#define lob lower_bound\n#define fi first\n#define se second\n#define mk make_pair\nusing namespace std;\nconst int N = 1e5 + 10;\nconst int SN = 400 + 10;\nconst int INF = INT_MAX;\ntypedef pair <int, int> pii;\ninline int read ( )\n{\n    int x = 0, f = 1;\n    char ch = getchar ( );\n    while (ch < '0' || ch > '9') {if (ch == '-') f = - 1; ch = getchar ( );}\n    while (ch >= '0' && ch <='9') {x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar ( );}\n    return x * f;\n}\nint n, m, q;\nstruct edge {\n    int ver, nxt;\n} e[N << 1];\nint head[N], tot;\nvoid add_edge (int u, int v) { e[++tot] = (edge) {v, head[u]}; head[u] = tot; }\nint cnt;\nbool vis[N];\nint belong[N], Dim, dim[N];\nint siz[N], len[N], len2[N], son[N];\nint block[N], bcnt, from[N];\nint f[SN][SN];\nvector <int> vec[N], sum[N];\nvoid dfs (int u, int f, int b)\n{\n    vis[u] = 1;\n    siz[b]++; len[u] = 0;\n    belong[u] = b;\n    for (int i = head[u]; i; i = e[i].nxt)\n    {\n        int v = e[i].ver;\n        if (v == f) continue;\n        dfs (v, u, b);\n        Dim = max (Dim, len[u] + len[v] + 1);\n        if (len[v] + 1 >= len[u]) { len2[u] = len[u]; len[u] = len[v] + 1; son[u] = v; }\n        else len2[u] = max (len2[u], len[v] + 1);\n    }\n}\nvoid dfs2 (int u, int f, int l)\n{\n    vis[u] = 1;\n    if (son[u]) dfs2 (son[u], u, max (len2[u], l) + 1);\n    for (int i = head[u]; i; i = e[i].nxt)\n    {\n        int v = e[i].ver;\n        if (v != f && v != son[u])\n            dfs2 (v, u, max (len[u], l) + 1);\n    }\n    len[u] = max (len[u], l);\n    vec[belong[u]].pb (len[u]);\n}\nvoid solve (int x)\n{\n    for (int i = 0; i < vec[block[x]].size (); i++) // \u5bf9\u4e8e\u5f53\u524d\u6811\u679a\u4e3e\u6bcf\u4e2a\u70b9\n    {\n        for (int j = x + 1; j <= bcnt; j++) // \u5f80\u540e\u627e\u9700\u8981\u5904\u7406\u7684\u6811\n        {\n            int y = block[j];\n            int mx = max (dim[block[x]], dim[y]), s = vec[y].size ();\n            int l = 0, r = s - 1, res = s;\n            while (l <= r)\n            {\n                int mid = (l + r) >> 1;\n                if (vec[block[x]][i] + vec[y][mid] + 1 < mx) l = mid + 1, res = mid;\n                else r = mid - 1;\n            }\n            if (vec[block[x]][i] + vec[y][0] + 1 >= mx)\n                f[x][j] += vec[block[x]][i] * s + sum[y][s - 1] + s;\n            else if (vec[block[x]][i] + vec[y][s - 1] + 1 < mx)\n                f[x][j] += mx * s;\n            else\n                f[x][j] += mx * (res + 1) + vec[block[x]][i] * (s - res - 1) + (sum[y][s - 1] - sum[y][res]) + (s - res - 1);\n        }\n    }\n}\nint getans (int x, int y)\n{\n    int mx = max (dim[x], dim[y]), ans = 0, s = vec[y].size ();\n    for (int i = 0; i < vec[x].size (); i++)\n    {\n        int l = 0, r = s - 1, res = s;\n        while (l <= r)\n        {\n            int mid = (l + r) >> 1;\n            if (vec[x][i] + vec[y][mid] + 1 < mx) l = mid + 1, res = mid;\n            else r = mid - 1;\n        }\n        if (vec[x][i] + vec[y][0] + 1 >= mx)\n            ans += vec[x][i] * s + sum[y][s - 1] + s;\n        else if (vec[x][i] + vec[y][s - 1] + 1 < mx) ans += mx * s;\n        else\n            ans += mx * (res + 1) + vec[x][i] * (s - res - 1) + (sum[y][s - 1] - sum[y][res]) + (s - res - 1);\n    }\n    return ans;\n}\nsigned main()\n{\n    n = read ( ), m = read ( ), q = read ( );\n    for (int i = 1, u, v; i <= m; i++)\n    {\n        u = read ( ), v = read ( );\n        add_edge (u, v);\n        add_edge (v, u);\n    }\n    for (int i = 1; i <= n; i++)\n        if (!vis[i])\n        {\n            Dim = 0;\n            dfs (i, 0, ++cnt);\n            dim[cnt] = Dim;\n        }\n    memset (vis, 0, sizeof (vis));\n    for (int i = 1; i <= n; i++) if (!vis[i]) dfs2 (i, 0, 0); // \u6362\u6839\n    for (int i = 1; i <= cnt; i++) sort (vec[i].begin (), vec[i].end ());\n    for (int i = 1; i <= cnt; i++)\n        for (int j = 0; j < vec[i].size (); j++)\n            sum[i].pb ((j > 0 ? sum[i][sum[i].size () - 1] : 0) + vec[i][j]); // \u524d\u7f00\u548c\uff0c\u65b9\u4fbf\u4e8c\u5206\n    int Block = sqrt (n);\n    for (int i = 1; i <= cnt; i++)\n        if (siz[i] > Block) block[++bcnt] = i, from[i] = bcnt;\n    for (int i = 1; i <= bcnt; i++) solve (i); // \u6839\u53f7\u5206\u6cbb >= sqrt(n) \u7684\u70b9\n    while (q--)\n    {\n        int x = read ( ), y = read ( );\n        if (from[belong[x]] > from[belong[y]]) swap (x, y);\n        if (belong[x] == belong[y]) printf (\"-1\\n\");\n        else if (f[from[belong[x]]][from[belong[y]]])\n            printf (\"%.6lf\\n\", double (f[from[belong[x]]][from[belong[y]]]) / double(siz[belong[x]] * siz[belong[y]]));\n        else\n        {\n            if (siz[belong[x]] > siz[belong[y]]) swap (x, y);\n            printf (\"%.6lf\\n\", double(getans (belong[x], belong[y])) / double(siz[belong[x]] * siz[belong[y]]));\n        }\n    }\n    return 0;\n}\n```\n\n### ",
        "postTime": 1646445449,
        "uid": 177837,
        "name": "violin_wyl",
        "ccfLevel": 6,
        "title": "CF804D Expected diameter of a tree"
    },
    {
        "content": "\u9898\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u68ee\u6797\uff0c\u6c42\u6bcf\u6b21\u9009\u62e9\u4e24\u68f5\u6811\uff0c\u6c42\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u70b9\u628a\u5b83\u4eec\u8fde\u8d77\u6765\uff0c\u65b0\u6811\u7684\u76f4\u5f84\u7684\u671f\u671b\uff1b\n\n\u8fd9\u4e2a\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e\u6bd4\u8f83\u6709\u610f\u601d\uff1b\n\n\u65b9\u6cd5\u662f\uff1a\u9884\u5904\u7406\u6bcf\u68f5\u6811\u7684\u76f4\u5f84\uff0c\u548c\u6bcf\u4e2a\u70b9\u5230\u6811\u4e0a\u7684\u6700\u8fdc\u8ddd\u79bb\uff0c\u5e76\u6c42\u51fa\u524d\u7f00\u548c\uff1b\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff08\u8bb0\u5fc6\u5316\uff09\uff1a\n\n\u6211\u4eec\u6bcf\u6b21\u679a\u4e3esz\u8f83\u5c0f\u7684\u6811\u4e0a\u7684\u70b9i\n\uff0c\u663e\u7136\u548c\u8fd9\u4e2a\u70b9\u8fde\u63a5\u4e4b\u540e\uff0c\u671f\u671b\u7684\u76f4\u5f84\u4e3a$\\max(dis_i+1+dis_v,\\max(diam))$\u6240\u4ee5\u4e00\u5b9a\u662f\u5bf9\u4e8edis\u5c0f\u7684\u4e00\u90e8\u5206\u70b9\u53d6diam\uff0c\u53e6\u4e00\u90e8\u5206\u53d6disv\uff1b\n\n\u5206\u7c7b\u8ba8\u8bba\u505a\u597d\u5c31\u884c\uff1b\n\n\u6ce8\u610f\u521d\u59cb\u76f4\u5f84\u4e3a\u4e24\u68f5\u6811\u7684diam\u7684max\uff1b\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<set>\n#include<list>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<deque>\nusing namespace std;\n#define ll long long\n// #define inf 0x3f3f3f3f\n#define ri register int\n#define il inline\n#define fi first\n#define se second\n#define mp make_pair\n#define pi pair<int,int>\n#define mem0(x) memset((x),0,sizeof (x))\n#define mem1(x) memset((x),0x3f,sizeof (x))\nil char gc() {\n\tstatic const int BS = 1 << 22;\n\tstatic unsigned char buf[BS], *st, *ed;\n\tif (st == ed) ed = buf + fread(st = buf, 1, BS, stdin);\n\treturn st == ed ? EOF : *st++;\n}\n#define gc getchar\ntemplate<class T>void in(T &x) {\n\tx = 0;\n\tbool f = 0;\n\tchar c = gc();\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = 1;\n\t\tc = gc();\n\t}\n\twhile ('0' <= c && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = gc();\n\t}\n\tif (f) x = -x;\n}\n#undef gc\n#define pb push_back\n#define N 100010\n#define M N<<1\n#define int ll\nint v[M], nx[M];\nint cnt, head[N];\nil void add(int uu, int vv) {\n\tv[++cnt] = vv, nx[cnt] = head[uu];\n\thead[uu] = cnt;\n}\nint n, m, cntq;\nint bel[N], cur;\nvector<int>sum[N];\nvoid dfs(int x, int k) {\n\tbel[x] = k;\n\tfor (ri i = head[x]; i; i = nx[i])\n\t\tif (!bel[v[i]]) dfs(v[i], k);\n}\npi q[N];\nint hd, tl;\nint vis[N], cnv;\nint diam[N];\npi getd(int k, int st) {\n\t++cnv;\n\tint mxd = 0, mxk = st;\n\thd = 1, tl = 0;\n\tvis[st] = cnv;\n\tq[++tl] = mp(st, 0);\n\twhile (hd <= tl) {\n\t\tpi x = q[hd++];\n\t\tif (x.se > mxd) mxd = x.se, mxk = x.fi;\n\t\tfor (ri i = head[x.fi]; i; i = nx[i]) {\n\t\t\tif (vis[v[i]] == cnv) continue;\n\t\t\tvis[v[i]] = cnv;\n\t\t\tq[++tl] = mp(v[i], x.se + 1);\n\t\t}\n\t}\n\t++cnv;\n\thd = 1, tl = 0;\n\tvis[mxk] = cnv;\n\tq[++tl] = mp(mxk, 0);\n\tint lst = mxk;\n\tmxd = 0;\n\twhile (hd <= tl) {\n\t\tpi x = q[hd++];\n\t\tif (x.se > mxd) mxd = x.se, mxk = x.fi;\n\t\tfor (ri i = head[x.fi]; i; i = nx[i]) {\n\t\t\tif (vis[v[i]] == cnv) continue;\n\t\t\tvis[v[i]] = cnv;\n\t\t\tq[++tl] = mp(v[i], x.se + 1);\n\t\t}\n\t}\n\tdiam[k] = mxd;\n\treturn mp(lst, mxk);\n}\nint dis[N];\nvector<int>hv[N];\nvector<int>sumlen[N];\nvoid getlen(int k, pi st) {\n\t++cnv;\n\thd = 1, tl = 0;\n\tvis[st.fi] = cnv;\n\tq[++tl] = mp(st.fi, 0);\n\twhile (hd <= tl) {\n\t\tpi t = q[hd++];\n\t\thv[k].pb(t.fi);\n\t\tdis[t.fi] = max(t.se, dis[t.fi]);\n\t\tfor (ri i = head[t.fi]; i; i = nx[i]) {\n\t\t\tif (vis[v[i]] == cnv) continue;\n\t\t\tvis[v[i]] = cnv;\n\t\t\tq[++tl] = mp(v[i], t.se + 1);\n\t\t}\n\t}\n\t++cnv;\n\thd = 1, tl = 0;\n\tvis[st.se] = cnv;\n\tq[++tl] = mp(st.se, 0);\n\tint mx = 0;\n\twhile (hd <= tl) {\n\t\tpi t = q[hd++];\n\t\tdis[t.fi] = max(t.se, dis[t.fi]);\n\t\tmx = max(dis[t.fi], mx);\n\t\tfor (ri i = head[t.fi]; i; i = nx[i]) {\n\t\t\tif (vis[v[i]] == cnv) continue;\n\t\t\tvis[v[i]] = cnv;\n\t\t\tq[++tl] = mp(v[i], t.se + 1);\n\t\t}\n\t}\n\tsum[k].resize(mx + 1);\n\tsumlen[k].resize(mx + 1);\n\tfor (ri i = 0; i < (int)hv[k].size(); ++i) {\n\t\t++sum[k][dis[hv[k][i]]];\n\t}\n\tfor (ri i = 1; i <= mx; ++i) {\n\t\tsumlen[k][i] = sum[k][i] * i + sumlen[k][i - 1];\n\t\tsum[k][i] += sum[k][i - 1];\n\t}\n}\nmap<pi, double>rem;\ndouble sol(int x, int y) {\n\tif (rem.count(mp(x, y))) return rem[mp(x, y)];\n\tint res = 0;\n\tint mxd = max(diam[x], diam[y]);\n\tfor (ri i = 0; i < (int)hv[x].size(); ++i) {\n\t\tif ((int)sum[y].size() + dis[hv[x][i]] <= mxd) {\n\t\t\tres += mxd * (int)hv[y].size();\n\t\t}\n\t\telse {\n\t\t\tif (mxd - dis[hv[x][i]] - 1 < 0) {\n\t\t\t\tres += (dis[hv[x][i]] + 1) * ((int)hv[y].size()) + sumlen[y][sum[y].size() - 1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres += mxd * sum[y][mxd - dis[hv[x][i]] - 1];\n\t\t\t\tres += (dis[hv[x][i]] + 1) * ((int)hv[y].size() - sum[y][mxd - dis[hv[x][i]] - 1]) + (sumlen[y][sum[y].size() - 1] - sumlen[y][mxd - dis[hv[x][i]] - 1]);\n\t\t\t}\n\t\t}\n\t}\n\tdouble tmp = (double)res / (hv[x].size() * hv[y].size());\n\trem[mp(x, y)] = tmp;\n\treturn tmp;\n}\nsigned main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.in\", \"r\", stdin);\n#endif\n\tin(n), in(m), in(cntq);\n\tint a, b;\n\tfor (ri i = 1; i <= m; ++i) {\n\t\tin(a), in(b);\n\t\tadd(a, b), add(b, a);\n\t}\n\tfor (ri i = 1; i <= n; ++i)\n\t\tif (!bel[i]) {\n\t\t\tdfs(i, ++cur);\n\t\t\tgetlen(cur, getd(cur, i));\n\t\t}\n\twhile (cntq--) {\n\t\tin(a), in(b);\n\t\tif (bel[a] == bel[b]) {\n\t\t\tputs(\"-1\");\n\t\t\tcontinue;\n\t\t}\n\t\tif (hv[bel[a]].size() > hv[bel[b]].size() || (hv[bel[a]].size() == hv[bel[b]].size() && bel[a] > bel[b])) swap(a, b);\n\t\tprintf(\"%.10f\\n\", sol(bel[a], bel[b]));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1534669005,
        "uid": 58302,
        "name": "i207M",
        "ccfLevel": 0,
        "title": "\u8fde\u63a5\u4e24\u68f5\u6811\u7684\u76f4\u5f84\u7684\u671f\u671b-CF804D-\u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u6807\u9898\u662f\u56e0\u4e3a\u5199\u8fd9\u9053\u9898\u7684\u65f6\u5019\u5728\u542c\u3002\n\n\u9996\u5148\u6839\u636e\u6811\u7684\u6027\u8d28\uff0c\u4e00\u4e2a\u70b9\u5230\u6811\u4e2d\u6700\u8fdc\u7684\u8ddd\u79bb\u53ef\u4ee5\u901a\u8fc7\u76f4\u5f84\u5f97\u51fa\u3002\u5177\u4f53\u7684\uff0c\u5982\u679c\u76f4\u5f84\u4e3a $(u,v)$ \u8fd9\u6761\u94fe\uff0c\u90a3\u4e48\u70b9 $c$ \u5230\u6811\u4e2d\u7684\u6700\u8fdc\u8ddd\u79bb\u5373\u4e3a $\\max(\\operatorname{dis}(u,c),\\operatorname{dis}(v,c))$\u3002\u8fd9\u4e2a\u6027\u8d28\u7684\u5b9e\u9645\u8fd0\u7528\u662f\u4e24\u6b21 DFS \u627e\u5230\u6811\u7684\u76f4\u5f84\uff0c\u5f53\u7136\u5728\u8fd9\u9898\u4e2d\u6709\u66f4\u76f4\u63a5\u7684\u8fd0\u7528\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u68f5\u6811\u90fd\u7ebf\u6027\u6c42\u51fa\u5b83\u4eec\u4e2d\u7684\u6240\u6709\u70b9\u5230\u6811\u4e2d\u6700\u8fdc\u7684\u8ddd\u79bb\uff0c\u8bb0\u4e3a $p_1,p_2,\\cdots ,p_n$\u3002\u73b0\u5728\u8fde\u63a5\u4e24\u68f5\u6811\uff0c\u5047\u8bbe\u8fde\u63a5\u5230\u4e86 $u,v$\uff0c\u90a3\u4e48\u76f4\u5f84\u5373\u4e3a $\\max(d_1,d_2,p_u+p_v+1)$\uff08\u5176\u4e2d $d_1$ \u8868\u793a\u7b2c\u4e00\u68f5\u6811\u539f\u6765\u7684\u76f4\u5f84\uff0c$d_2$ \u540c\u7406\uff09\u3002\n\n\u8fd9\u4e2a\u53d6 $\\max$ \u4e0d\u592a\u5408\u7406\u3002\u5148\u8003\u8651\u4e00\u6b21\u67e5\u8be2\uff0c\u5c06\u5b50\u6811\u91cc\u7684\u70b9\u6309 $p$ \u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u89e3\u51b3\u95ee\u9898\uff0c\u8d21\u732e\u62c6\u7b97\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u4f46\u662f\u603b\u5171\u6709 $q$ \u6b21\u8be2\u95ee\u3002\u52a0\u4e0a\u4e24\u4e2a\u7b80\u5355\u7684\u4f18\u5316\u5c31\u53ef\u4ee5\u505a\u5230 $O(n \\sqrt n \\log n + q \\sqrt n \\log n)$\uff1a\n\n1. \u8bb0\u5fc6\u5316\uff0c\u5373\u5bf9\u76f8\u540c\u7684\u4e24\u68f5\u5b50\u6811\uff0c\u7b97\u51fa\u7b54\u6848\u5e76\u8bb0\u5f55\uff08\u4f7f\u7528 `map`\uff09\uff1b   \n2. \u53cc\u6307\u9488\u7684\u65f6\u5019\u6307\u9488\u66b4\u529b\u79fb\u52a8\u6811\u5927\u5c0f\u5c0f\u7684\u90a3\u4e2a\uff0c\u53e6\u5916\u4e00\u4e2a\u6307\u9488\u5e94\u8be5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u3002\n\n\u5177\u4f53\u7684\u590d\u6742\u5ea6\u5206\u6790\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff1a\u6811\u5927\u5c0f\u4e0d\u5c0f\u4e8e $O(\\sqrt n)$ \u7684\u603b\u5171\u53ea\u6709 $O(\\sqrt n)$ \u4e2a\uff0c\u8fd9\u6837\u5c31\u53ea\u6709 $O(n)$ \u5bf9\u672c\u8d28\u4e0d\u540c\u7684\u8be2\u95ee\uff0c\u66b4\u529b\u505a\u5e76\u8bb0\u5fc6\u5316\u5c31\u662f $O(n \\sqrt n)$ \u6216\u8005 $O(n \\sqrt n \\log n)$\uff1b\u5bf9\u4e8e\u4e24\u4e2a\u5c0f\u4e8e $O(\\sqrt n)$ \u7684\u6811\uff0c\u66b4\u529b\u505a\u5c31\u662f $O(q \\sqrt n)$ \u6216\u8005 $O(q \\sqrt n \\log n)$ \u7684\uff1b\u5c0f\u5757\u5bf9\u5927\u5757\u53ef\u80fd\u4ea7\u751f\u5f88\u591a\u7ec4\u4e0d\u540c\u7684\u8be2\u95ee\uff0c\u6ce8\u610f\u5230\u5c0f\u5757\u5927\u5c0f\u53ea\u6709 $O(\\sqrt n)$\uff0c\u90a3\u4e48\u53e6\u5916\u4e00\u4e2a\u6811\u53ef\u4ee5\u4e8c\u5206\u5904\u7406\u6765\u5e73\u8861\u590d\u6742\u5ea6\u3002\n\n\u53ef\u662f emu \u5728\u5199\u8fd9\u4e2a\u9898\u7684\u65f6\u5019\u5fd8\u8bb0\u4e8c\u5206\u5e73\u8861\u590d\u6742\u5ea6\u4e86\uff01\u53ef\u662f\u8fd8\u662f\u8fc7\u4e86\uff0c\u53ef\u89c1\u8fd9\u4e2a\u5e38\u6570\u4e4b\u5c0f \u00d7\n\n\u90a3\u4e48\uff0c\u53ea\u6709\u4e00\u4efd\u590d\u6742\u5ea6\u9519\u8bef\u7684\u53c2\u8003\u5b9e\u73b0\u3002\u6539\u6210\u4e8c\u5206\u5e76\u4e0d\u56f0\u96be\uff0c\u90a3\u5c31\u4e0d\u6539\u4e86\u3002[\u8bc4\u6d4b\u94fe\u63a5](https://codeforces.com/contest/804/submission/176147268)\uff0c\u53ef\u89c1\u5b9e\u9645\u4e0a\u4ee3\u7801\u5e76\u4e0d\u957f\u3002",
        "postTime": 1665751211,
        "uid": 340163,
        "name": "OotoriEmu",
        "ccfLevel": 0,
        "title": "Daybreak Frontline"
    }
]