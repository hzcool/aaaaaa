[
    {
        "content": "### Preface\n\n~~H \u662f Hydro\uff0c\u4ee3\u8868\u6c34\u9898\uff08\u4e0d\u662f\uff09~~\n\n\u5206\u5757\u597d\u9898\uff08\u5176\u5b9e\u5e94\u8be5\u662f\u6839\u53f7\u5206\u6cbb\uff1f\uff09\n\n### Analysis\n\n\u8bbe $B=\\sqrt{n}$\u3002\n\n\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u6210\u6709\u5411\u56fe\uff0c\u53d1\u73b0\u662f\u591a\u4e2a\u73af\u3002\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $x$\uff0c\u4e0d\u4ec5\u5b58\u4e0b\u4e00\u4e2a\u662f $ne_x$\uff0c\u8fd8\u7ef4\u62a4\u4e0a\u4e00\u4e2a\u662f $pr_x$\u3001\u4ee5\u53ca\u4e0b $B$ \u4e2a\u662f $ju_x$\uff08jump\uff09\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c `1 x y`\uff0c\u6211\u4eec $O(1)$ \u4fee\u6539 $pr,ne$\uff0c\u53d1\u73b0 $ju$ \u6539\u53d8\u7684\u53ea\u6709 $x,y$ \u7684\u524d\u9a71 $B$ \u4e2a\uff08\u5305\u62ec\u672c\u8eab\uff09\u3002\u901a\u8fc7 $pr$ \u8ffd\u6eaf\u5230 $x$ \u7684\u4e0a $B-1$ \u4e2a\uff0c\u901a\u8fc7\u4e24\u4e2a\u6307\u9488 $O(B)$ \u6c42\u51fa\uff08\u5177\u4f53\u770b\u4ee3\u7801\uff09\uff0c$y$ \u540c\u7406\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee `2 i k`\uff0c\u5148\u5c06 $i$ \u5411\u524d\u7528 $ju$ \u6570\u7ec4 jump\uff0c\u518d\u4e00\u6b65\u4e00\u6b65\u8d70\uff0c$O(\\dfrac{n}{B})=O(B)$\u3002\n\n\u603b\u65f6\u95f4 $O(n\\sqrt{n})$ \u9884\u5904\u7406\u548c $O(q\\sqrt{n})$ \u7ef4\u62a4\u3001\u56de\u7b54\u3002\n\n### Code\n\n```cpp\n#define N 100010\nint pr[N],ne[N],ju[N];\nint n,b;\ninline int move(int x,int y){\n\twhile(y--) x=ne[x];\n\treturn x;\n}\nvoid calc(int x){\n\tint y=ne[x];\n\tFor(i,1,b-1) x=pr[x];\n\tFor(i,1,b){\n\t\tju[x]=y;\n\t\tx=ne[x];\n\t\ty=ne[y];\n\t}\n}\nsigned main(){\n\tint q;\n\tcin>>n>>q;\n\tb=sqrt(n);\n\tcerr<<\"b\"<<b<<endl;\n\tFor(i,1,n) cin>>ne[i];\n\tFor(i,1,n) pr[ne[i]]=i;\n\tFor(i,1,n) ju[i]=move(i,b);\n\tint opt,x,y;\n\twhile(q--){\n\t\tcin>>opt>>x>>y;\n\t\tif(opt==1){\n\t\t\tswap(pr[ne[x]],pr[ne[y]]);\n\t\t\tswap(ne[x],ne[y]);\n\t\t\tcalc(x);\n\t\t\tcalc(y);\n\t\t}else if(opt==2){\n\t\t\twhile(y>=b){\n\t\t\t\ty-=b;\n\t\t\t\tx=ju[x];\n\t\t\t}\n\t\t\tcout<<move(x,y)<<endl;\n\t\t}else assert(0);\n\t}\n    return 0;\n}\n```",
        "postTime": 1640791172,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "CF1619H Permutation and Queries"
    },
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6392\u5217 $p$\uff0c\u8981\u6c42\u652f\u6301\u4e00\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n- 1.\u4ea4\u6362\u6392\u5217\u4e2d\u7684\u4e24\u4e2a\u6570\n- 2.\u67e5\u8be2\u5982\u679c\u4ece $x$ \u5f00\u59cb\uff0c\u8fdb\u884c $y$ \u6b21 $x=p_x$ \u64cd\u4f5c\u540e\u7684\u7ed3\u679c\u3002\n\n### \u9898\u89e3\n\n\u8003\u8651\u5206\u6cbb\uff0c\u8bb0 $B=\\sqrt{n}$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6570\uff0c\u9884\u5904\u7406\u51fa $f(x)$ \u8868\u793a\u4ece $x$ \u5f80\u540e\u8d70 $B$ \u6b65\u7684\u7ed3\u679c\u3002\u6bcf\u6b21\u4ea4\u6362\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e $x,y$ \u4e24\u6570\u66b4\u529b\u4fee\u6539 $f(x)$ \u548c $f(y)$\uff0c\u5bf9 $x$ \u548c $y$ \u7684\u524d\u540e $\\sqrt{n}$ \u7684 $f$ \u53ef\u4ee5\u66b4\u529b\u9012\u63a8\u4fee\u6539\u3002\u67e5\u8be2\u65f6\uff0c\u5148\u6bcf\u6b21\u8df3 $B$ \u6b65\uff0c\u4e0d\u8db3 $B$ \u6b65\u7684\u66b4\u529b\u8df3\u3002\u7efc\u5408\u590d\u6742\u5ea6\u4e3a $n\\sqrt{n}$ \u3002\n\n### \u4ee3\u7801\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint base;\nint n,nxt[100010],lst[100010],q;\nint tmp[100010];\nvoid remake(int x)\n{\n\tint nw=x;\n\tfor(int i=1;i<=base;i++)\n\t\tnw=nxt[nw];\n\ttmp[x]=nw;\n\tnw=x;\n\tfor(int i=1;i<=base;i++)\n\t{\n\t\tnw=lst[nw];\n\t\ttmp[nw]=lst[tmp[nxt[nw]]];\n\t}\n\tnw=x;\n\tfor(int i=1;i<=base;i++)\n\t{\n\t\tnw=nxt[nw];\n\t\ttmp[nw]=nxt[tmp[lst[nw]]];\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);base=sqrt(n);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&nxt[i]),lst[nxt[i]]=i;\n\tfor(int i=1;i<=n;i++)\n\t\tremake(i);\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tint opt,x,y;\n\t\tscanf(\"%d%d%d\",&opt,&x,&y);\n\t\tif(opt==1)\n\t\t{\n\t\t\tswap(nxt[x],nxt[y]);\n\t\t\tswap(lst[nxt[x]],lst[nxt[y]]);\n\t\t\tremake(x);remake(y);\n\t\t}\n\t\telse if(opt==2)\n\t\t{\n\t\t\tint nw=x;\n\t\t\twhile(y>=base)\n\t\t\t\tnw=tmp[nw],y-=base;\n\t\t\twhile(y)\n\t\t\t\tnw=nxt[nw],y--;\n\t\t\tprintf(\"%d\\n\",nw);\n\t\t}\n\t}\n}\n```",
        "postTime": 1640586051,
        "uid": 133520,
        "name": "Retired_lvmao",
        "ccfLevel": 7,
        "title": "Sol"
    },
    {
        "content": "\u7c7b\u4f3c\u4e8e\u5206\u5757\u7684\u60f3\u6cd5\u3002\n\n\u8003\u8651\u628a\u6bcf\u4e2a\u73af\u62c6\u6210\u82e5\u5e72\u4e2a\u5927\u5c0f\u4e0d\u8d85\u8fc7 $B$ \u7684\u5757\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u5757\u5185\u7684\u70b9\u548c\u73af\u4e0a\u7684\u4e0b\u4e00\u4e2a\u5757\u3001\u6bcf\u4e2a\u70b9\u6240\u5c5e\u5757\u548c\u5728\u5757\u5185\u7684\u7f16\u53f7\uff1b\n\n\u5148\u770b\u4ea4\u6362\u64cd\u4f5c\uff1a\n\n- \u5982\u679c $x$ \u548c $y$ \u5728\u540c\u4e00\u4e2a\u5757\u5185\uff08\u4e0d\u59a8\u8bbe\u5757\u5185 $x$ \u5728 $y$ \u524d\uff09\uff0c\u5c31\u662f\u628a $(x, y]$ \u8fd9\u6bb5\u62c6\u51fa\u6765\u5355\u72ec\u6210\u5757\uff0c\u76f4\u63a5\u5728 vector \u91cc copy\u3001erase \u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(B)$\uff1b\n- \u5982\u679c $x$ \u548c $y$ \u4e0d\u5728\u540c\u4e00\u4e2a\u5757\u5185\uff0c\u5c31\u662f\u628a $x$ \u6240\u5728\u5757\u548c $y$ \u6240\u5728\u5757\u540e\u7684\u6240\u6709\u70b9\u4ee5\u53ca\u4e24\u4e2a\u5757\u7684 next \u4ea4\u6362\uff0c\u540c\u6837\u662f\u51e0\u6b21 copy\u3001erase \u7684\u4e8b\uff0c\u590d\u6742\u5ea6 $O(B)$\u3002\n\n\uff08\u70b9\u7684\u4fe1\u606f\u53ef\u4ee5\u5728\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u4e00\u8d77\u7ef4\u62a4\uff09\n\n\u4ea4\u6362\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u521a\u521a\u64cd\u4f5c\u7684\u5757\uff0c\u5982\u679c\u592a\u5927\uff08\u5927\u4e8e $B$\uff09\u6216\u8005\u592a\u5c0f\uff08\u548c\u4e0b\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\u4e4b\u548c\u4e0d\u8d85\u8fc7 $B$\uff09\u5c31\u62c6\u5f00 / \u5408\u5e76\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc7 $B$ \u4e14\u957f\u4e3a $l$ \u7684\u73af\u7684\u5757\u7684\u4e2a\u6570\u4e3a $O(\\frac{l}{B})$\u3002~~\uff08\u5176\u5b9e\u6ca1\u6709\u8fd9\u4e2a\u8c03\u6574\u64cd\u4f5c\u4e5f[\u80fd\u8fc7](https://codeforces.com/contest/1619/submission/144027676)\uff0c\u53ef\u80fd\u662f\u6570\u636e\u592a\u6c34\u4e86\uff09~~\n\n\u7136\u540e\u662f\u8be2\u95ee\uff0c\u76f4\u63a5\u4e00\u4e2a\u4e2a\u5757\u8df3\u5c31\u884c\uff0c\u590d\u6742\u5ea6 $O(\\frac{n}{B})$\u3002\n\n\u53d6 $B = \\sqrt{n}$\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O((n + q) \\sqrt{n})$\u3002\n\n---\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <iterator>\n#include <utility>\n#include <vector>\n\nconstexpr unsigned short MAX_BLOCK_SIZE = 316;\n\nstruct Block {\n  std::vector<unsigned long> nodes;\n  unsigned long next;\n};\n\nstruct Node {\n  unsigned long block;\n  unsigned short id;\n};\n\nint main() {\n  unsigned long n, q;\n  std::vector<bool> vis;\n  std::vector<unsigned long> p;\n  std::vector<Block> blocks;\n  std::vector<Node> nodes;\n  const auto adjustBlock = [&](unsigned long block) {\n    if (blocks[block].next == block)\n      return;\n    if (blocks[block].nodes.size() + blocks[blocks[block].next].nodes.size() <=\n        MAX_BLOCK_SIZE) {\n      for (const auto &u : blocks[blocks[block].next].nodes) {\n        nodes[u] = Node{\n            block, static_cast<unsigned short>(blocks[block].nodes.size())};\n        blocks[block].nodes.push_back(u);\n      }\n      blocks[block].next = blocks[blocks[block].next].next;\n      return;\n    }\n    if (blocks[block].nodes.size() > MAX_BLOCK_SIZE) {\n      const unsigned long newBlock = blocks.size();\n      blocks.push_back(Block{{}, blocks[block].next});\n      blocks[block].next = newBlock;\n      std::copy(blocks[block].nodes.cbegin() + MAX_BLOCK_SIZE,\n                blocks[block].nodes.cend(),\n                std::back_inserter(blocks[newBlock].nodes));\n      blocks[block].nodes.erase(blocks[block].nodes.cbegin() + MAX_BLOCK_SIZE,\n                                blocks[block].nodes.cend());\n      for (unsigned short i = 0; i < blocks[newBlock].nodes.size(); ++i)\n        nodes[blocks[newBlock].nodes[i]] = Node{newBlock, i};\n    }\n  };\n  std::ios::sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  std::cin >> n >> q;\n  p.resize(n);\n  for (auto &item : p) {\n    std::cin >> item;\n    --item;\n  }\n  vis.assign(n, false);\n  nodes.resize(n);\n  for (unsigned long i = 0; i < n; ++i) {\n    if (!vis[i]) {\n      unsigned long u = i, firstBlock, block = blocks.size();\n      blocks.push_back(Block{{}, block});\n      firstBlock = block;\n      do {\n        if (blocks[block].nodes.size() == MAX_BLOCK_SIZE) {\n          const unsigned long newBlock = blocks.size();\n          blocks.push_back(Block{{}, newBlock});\n          blocks[block].next = newBlock;\n          block = newBlock;\n        }\n        nodes[u].block = block;\n        nodes[u].id = blocks[block].nodes.size();\n        blocks[block].nodes.push_back(u);\n        vis[u] = true;\n        u = p[u];\n      } while (u != i);\n      blocks[block].next = firstBlock;\n    }\n  }\n  while (q--) {\n    unsigned short t;\n    std::cin >> t;\n    switch (t) {\n    case 1: {\n      unsigned long x, y;\n      std::cin >> x >> y;\n      --x;\n      --y;\n      if (nodes[x].block == nodes[y].block) {\n        const unsigned long block = blocks.size();\n        if (nodes[x].id > nodes[y].id)\n          std::swap(x, y);\n        blocks.push_back(Block{{}, block});\n        std::copy(blocks[nodes[x].block].nodes.cbegin() + nodes[x].id + 1,\n                  blocks[nodes[x].block].nodes.cbegin() + nodes[y].id + 1,\n                  std::back_inserter(blocks[block].nodes));\n        blocks[nodes[x].block].nodes.erase(\n            blocks[nodes[x].block].nodes.cbegin() + nodes[x].id + 1,\n            blocks[nodes[x].block].nodes.cbegin() + nodes[y].id + 1);\n        for (unsigned short i = 0; i < blocks[block].nodes.size(); ++i)\n          nodes[blocks[block].nodes[i]] = Node{block, i};\n        for (unsigned short i = nodes[x].id + 1;\n             i < blocks[nodes[x].block].nodes.size(); ++i)\n          nodes[blocks[nodes[x].block].nodes[i]].id = i;\n        adjustBlock(nodes[x].block);\n      } else {\n        std::vector<unsigned long> v1, v2;\n        std::copy(blocks[nodes[x].block].nodes.cbegin() + nodes[x].id + 1,\n                  blocks[nodes[x].block].nodes.cend(), std::back_inserter(v1));\n        std::copy(blocks[nodes[y].block].nodes.cbegin() + nodes[y].id + 1,\n                  blocks[nodes[y].block].nodes.cend(), std::back_inserter(v2));\n        blocks[nodes[x].block].nodes.erase(\n            blocks[nodes[x].block].nodes.cbegin() + nodes[x].id + 1,\n            blocks[nodes[x].block].nodes.cend());\n        blocks[nodes[y].block].nodes.erase(\n            blocks[nodes[y].block].nodes.cbegin() + nodes[y].id + 1,\n            blocks[nodes[y].block].nodes.cend());\n        for (const auto &u : v1) {\n          nodes[u] = Node{\n              nodes[y].block,\n              static_cast<unsigned short>(blocks[nodes[y].block].nodes.size())};\n          blocks[nodes[y].block].nodes.push_back(u);\n        }\n        for (const auto &u : v2) {\n          nodes[u] = Node{\n              nodes[x].block,\n              static_cast<unsigned short>(blocks[nodes[x].block].nodes.size())};\n          blocks[nodes[x].block].nodes.push_back(u);\n        }\n        std::swap(blocks[nodes[x].block].next, blocks[nodes[y].block].next);\n        adjustBlock(nodes[x].block);\n        adjustBlock(nodes[y].block);\n      }\n      break;\n    }\n    case 2: {\n      unsigned long u, k;\n      std::cin >> u >> k;\n      --u;\n      while (blocks[nodes[u].block].nodes.size() - nodes[u].id <= k) {\n        k -= blocks[nodes[u].block].nodes.size() - nodes[u].id;\n        u = blocks[blocks[nodes[u].block].next].nodes.front();\n      }\n      std::cout << blocks[nodes[u].block].nodes[nodes[u].id + k] + 1 << '\\n';\n      break;\n    }\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1643175489,
        "uid": 110634,
        "name": "zhanghengrui",
        "ccfLevel": 9,
        "title": "CF1619H Permutation and Queries \u9898\u89e3"
    },
    {
        "content": "\u53ef\u80fd\u6ca1\u4ec0\u4e48\u7528\u7684\u601d\u8003\u8fc7\u7a0b\uff08\u9762\u5411\u6211\u8fd9\u79cd\u4e0d\u80fd\u7406\u89e3\u5982\u4f55\u60f3\u5230\u5206\u5757\u7684\u5206\u5757\u5c0f\u767dQwQ\uff09\uff1a\n\n\u9996\u5148\u611f\u89c9\u770b\u5230\u8be2\u95ee\u7684\u5f62\u6001\u4f1a\u6bd4\u8f83\u81ea\u7136\u7684\u60f3\u5230\u5bf9\u6bcf\u4e2a $i$ \u9884\u5904\u7406/\u7ef4\u62a4\u4e00\u4e9b\u7279\u5b9a\u7684 $k$\uff0c\u7136\u540e\u7528\u5df2\u6709\u7684\u6570\u636e\u53bb\u51d1\u8be2\u95ee\u4e2d\u7684 $k$\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u5728\u7ef4\u62a4\u54ea\u4e9b\u503c\u4f7f\u5f97\u8be2\u95ee\u80fd\u5feb\u901f\u6c42\u51fa\u7b54\u6848\u4e14\u4fee\u6539\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u592a\u591a\u503c\u3002\n\n\u4e00\u5f00\u59cb\u60f3\u5230\u7684\u662f\u9884\u5904\u7406 $2$ \u7684\u82e5\u5e72\u6b21\u5e42\uff0c\u7136\u540e\u53d1\u73b0\u4fee\u6539\u4ee3\u4ef7\u6bd4 $O(n)$ \u8fd8\u5927qwq\u3002\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\uff0c\u8fd9\u6837\u5904\u7406\u9700\u8981\u7ef4\u62a4\u8bb8\u591a\u975e\u5e38\u5927\uff0c$k$ \u4e0e $n$ \u57fa\u672c\u540c\u9636\u7684\u6570\u636e\uff0c\u867d\u7136\u52a0\u5feb\u4e86\u51d1 $k$ \u7684\u8fc7\u7a0b\uff0c\u800c\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u4f1a\u5f71\u54cd\u5f88\u591a\u8fd9\u6837\u7684\u6570\u636e\uff0c\u590d\u6742\u5ea6\u5c31\u70b8\u4e86\u3002\u6240\u4ee5\u8fd9\u8ba9\u6211\u4eec\u53bb\u5c1d\u8bd5\u5e73\u8861\u8be2\u95ee\u548c\u4fee\u6539\u7684\u590d\u6742\u5ea6\uff0c$\\sqrt n$ \u5206\u5757\u6ee1\u8db3\u7684\u5c31\u662f\u8fd9\u6837\u4e00\u4ef6\u4e8b\u3002\n\n\u6b63\u89e3\uff1a\n\n\u8003\u8651\u5206\u5757\uff0c\u7ef4\u62a4\u6570\u7ec4 $a_i$\uff0c\u8868\u793a $i=p_i$ \u5171 $\\sqrt n$ \u6b21\u540e\u7684 $i$\u3002\u5bf9\u4e8e\u8be2\u95ee\uff0c\u53ea\u9700\u8981 $i$ \u5148\u5728 $a$ \u4e0a\u76f4\u63a5\u8df3 $\\left[\\dfrac{k}{\\sqrt n}\\right]$ \u6b21\uff0c\u5269\u4e0b\u7684\u5728 $p$ \u4e0a\u8df3\u3002\u5bf9\u4e8e\u4fee\u6539\uff0c$a$ \u4e2d\u4f1a\u88ab\u5f71\u54cd\u7684\u6570\u5b57\u6700\u591a\u53ea\u6709 $2\\times \\sqrt n$ \u4e2a\uff0c\u7528\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4 $q$ \u6ee1\u8db3 $q_{p_i}=i$ \u6765\u5bfb\u627e\u8fd9\u4e9b\u4f1a\u88ab\u5f71\u54cd\u7684\u6570\uff0c$p$ \u548c $q$ \u5219\u76f4\u63a5\u4fee\u6539\u5373\u53ef\u3002\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int N=100100;\nint p[N],q[N],a[N];\nint n,m;\nvoid update(int x){//update\u8868\u793a\u66f4\u65b0x\u4f1a\u5f71\u54cd\u7684sqrt(n)\u4e2a\u503c \n\tint tmp=x;\n\tfor(int i=1;i<m;i++)tmp=q[tmp]; \n\tfor(int j=p[x],f=1;f<=m;f++,tmp=p[tmp],j=p[j]){\n\t\ta[tmp]=j;\n\t}\n}\nvoid change(int x,int y){\n\tswap(p[x],p[y]);\n\tq[p[y]]=y;\n\tq[p[x]]=x;\n\tupdate(x);\n\tupdate(y);\n}\nint query(int i,int k){\n\tint ans=i;\n\tfor(int j=1;j<=k/m;j++)ans=a[ans];\n\tfor(int j=1;j<=k%m;j++)ans=p[ans];\n\treturn ans;\n}\nint main(){\n\tint qwq;\n\tscanf(\"%d%d\",&n,&qwq);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&p[i]),q[p[i]]=i;\n\tm=sqrt(n);\n\tfor(int i=1;i<=n;i++){\n\t\ta[i]=i;\n\t\tfor(int j=1;j<=m;j++)a[i]=p[a[i]];\n\t}\n\twhile(qwq--){\n\t\tint type,x,y;\n\t\tscanf(\"%d%d%d\",&type,&x,&y);\n\t\tif(type==1)change(x,y);\n\t\telse printf(\"%d\\n\",query(x,y));\n\t} \n} \n```\n",
        "postTime": 1642307979,
        "uid": 115159,
        "name": "laboba",
        "ccfLevel": 7,
        "title": "CF1619H \u9898\u89e3"
    }
]