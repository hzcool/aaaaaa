[
    {
        "content": "\n[\u6765\u6211\u7684\u535a\u5ba2\u770b\u770b\u5427](https://www.cnblogs.com/dysyn1314/p/13753738.html)\n\n# CF1416D Graph and Queries\n\n## \u9898\u76ee\u5927\u610f\n\n[\u9898\u76ee\u94fe\u63a5](https://codeforces.com/contest/1416/problem/D)\n\n\u7ed9\u4f60\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\u3002\u70b9\u6709\u70b9\u6743\uff0c\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743 $p_i$ \u662f $1$ \u5230 $n$ \u7684\u6b63\u6574\u6570\u4e14\u4e92\u4e0d\u76f8\u540c\u3002\n\n\u4f9d\u6b21\u8fdb\u884c $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u662f\u5982\u4e0b\u4e24\u79cd\u4e4b\u4e00\uff1a\n\n- $1\\ v$\uff1a\u67e5\u8be2 $v$ \u5728\u56fe\u4e0a\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\u91cc\uff08\u5305\u62ec $v$ \u81ea\u5df1\uff09\uff0c$p_u$ \u6700\u5927\u7684\u70b9 $u$\u3002\u8f93\u51fa $p_u$\u3002\u5e76\u5c06 $p_u$ \u7f6e\u4e3a $0$\u3002\n- $2\\ i$\uff1a\u5220\u9664\u7b2c $i$ \u6761\u8fb9\u3002\n\n\u7279\u522b\u5730\uff0c\u5f53\u6240\u6709 $v$ \u80fd\u5230\u8fbe\u7684\u70b9\u70b9\u6743\u90fd\u4e3a $0$ \u65f6\uff0c$u$ \u662f\u672a\u5b9a\u4e49\u7684\u3002\u4f46\u6b64\u65f6\u9009\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a $u$ \u7b54\u6848\u90fd\u662f $0$\uff0c\u6240\u4ee5\u4f60\u53ea\u9700\u8981\u8f93\u51fa $0$ \u5373\u53ef\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\leq n\\leq 2\\cdot10^5$\uff0c$1\\leq m\\leq 3\\cdot 10^5$\uff0c$1\\leq q\\leq 5\\cdot10^5$\u3002\n\n## \u672c\u9898\u9898\u89e3\n\n\u4e0d\u4f1a\u5220\u8fb9\u3002\u6240\u4ee5\u8003\u8651\u79bb\u7ebf\uff0c\u6309\u65f6\u95f4**\u5012\u5e8f**\u8fdb\u884c\u64cd\u4f5c\uff0c**\u5220\u8fb9\u53d8\u6210\u52a0\u8fb9**\u3002\n\n\u4f46\u662f\u9047\u5230\u7684\u9ebb\u70e6\u662f\uff0c\u64cd\u4f5c $1$ \u662f\u6b63\u5e8f\u8fdb\u884c\u7684\uff0c\u5982\u679c\u6211\u4eec\u5012\u5e8f\u64cd\u4f5c\uff0c\u5c31\u4e0d\u77e5\u9053\u5f53\u524d\u54ea\u4e9b\u70b9 $p_u = 0$ \u4e86\u3002\n\n\u89e3\u51b3\u65b9\u6cd5\u662f\uff0c\u5148\u5012\u5e8f\u904d\u5386\u4e00\u904d\u6240\u6709\u64cd\u4f5c\uff0c\u6309\u201c\u52a0\u8fb9\u201d\u7684\u987a\u5e8f\uff0c\u5efa\u51fa**\u91cd\u6784\u6811**\u3002\u91cd\u6784\u6811\u4f18\u7f8e\u7684\u6027\u8d28\u662f\uff0c\u5bf9\u4efb\u610f\u4e00\u4e2a\u8282\u70b9 $v$\uff0c\u5728\u67d0\u4e2a\u65f6\u523b\u4e4b\u524d\u548c\u5b83\u8fde\u901a\u7684\u8282\u70b9\uff0c\u6070\u597d\u662f\u91cd\u6784\u6811\u4e0a $v$ \u7684\u67d0\u4e2a\u7956\u5148\u7684\u5b50\u6811\u3002\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6811\u4e0a\u500d\u589e\uff0c\u5728 $O(\\log n)$ \u7684\u65f6\u95f4\u5185\u627e\u5230\u8fd9\u4e2a\u7956\u5148\u3002\n\n\u5efa\u51fa\u91cd\u6784\u6811\u540e\uff0c\u6211\u4eec\u56de\u5230\u6b63\u5411\u7684\u65f6\u95f4\u7ebf\u3002\u6309\u6b63\u5e8f\u5904\u7406\u6240\u6709\u8be2\u95ee\uff08\u64cd\u4f5c $1$\uff09\u3002\u524d\u9762\u8bf4\u8fc7\uff0c\u5728\u67d0\u4e2a\u65f6\u523b\u548c $v$ \u8fde\u901a\u7684\u8282\u70b9\uff0c\u662f $v$ \u67d0\u4e2a\u7956\u5148\u7684\u5b50\u6811\u3002\u5148\u500d\u589e\u627e\u5230\u8fd9\u4e2a\u7956\u5148\u3002\u5b83\u7684\u5b50\u6811\u662f dfs \u5e8f\u4e0a\u8fde\u7eed\u7684\u4e00\u6bb5\u3002\u6211\u4eec\u9884\u5904\u7406\u51fa\u91cd\u6784\u6811\u7684 dfs \u5e8f\uff0c\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u533a\u95f4\u6700\u5927\u503c\uff0c\u652f\u6301\u5355\u70b9\u4fee\u6539\u3002\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+m+q)\\log n)$\u3002\n\n## \u603b\u7ed3\n\n~~\u56e0\u4e3a LCT \u662f\u5783\u573e\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u8003\u8651\u5b83~~\u3002\u90a3\u4e48\u5bf9\u4e8e\u5220\u8fb9\u64cd\u4f5c\uff0c\u5176\u5b9e\u6211\u4eec\u80fd\u4f7f\u7528\u7684\u624b\u6bb5\u662f\u5f88\u6709\u9650\u7684\u3002\n\n\u4f8b\u5982\uff0c\u4e00\u4e2a\u7ecf\u5178\u7684\u601d\u8def\u662f\u628a\u8be2\u95ee\u5206\u5757\u3002\u53ea\u7ef4\u62a4\u8fdb\u5165\u672c\u5757\u4e4b\u524d\u7684\u8fde\u901a\u6027\uff0c\u5bf9\u672c\u5757\u5185\u7684\u8d21\u732e\u66b4\u529b\u8ba1\u7b97\u3002\u4e0d\u8fc7\u6211\u987a\u7740\u6b64\u601d\u8def\u601d\u8003\u672c\u9898\u5e76\u6ca1\u6709\u5f97\u5230\u5f88\u597d\u7684\u7ed3\u679c\u3002\n\n\u53e6\u4e00\u4e2a\u601d\u8def\u5c31\u662f\u5012\u5e8f\u3001\u5220\u8fb9\u53d8\u52a0\u8fb9\u4e86\u3002\u4f46\u662f\u672c\u9898\u7684\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u7684\u53e6\u4e00\u79cd\u64cd\u4f5c\uff08\u64cd\u4f5c $1$\uff09\u5f3a\u70c8\u4f9d\u8d56\u6b63\u5e8f\u7684\u65f6\u95f4\u7ebf\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u662f\u7b80\u5355\u7684\u5012\u5e8f\u64cd\u4f5c\uff0c\u800c\u662f\u5148**\u5012\u5e8f\u9884\u5904\u7406\u51fa\u4e00\u4e2a\u6570\u636e\u7ed3\u6784**\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u6b63\u5e8f\u5730\u64cd\u4f5c\u548c\u56de\u7b54\u8be2\u95ee\u3002\n\n\u987a\u4fbf\u626f\u4e00\u53e5\uff0c\u8fd9\u9053\u9898\u8ba9\u6211\u60f3\u5230\u4e86\u6700\u8fd1\u70ed\u6620\u7684\u4e00\u90e8\u7535\u5f71\uff1a\u300a\u4fe1\u6761\u300b\uff0c\u8bb2\u7684\u5c31\u662f\u4e00\u6761\u6b63\u5e8f\u65f6\u95f4\u7ebf\u3001\u4e00\u6761\u5012\u5e8f\u65f6\u95f4\u7ebf\uff0c\u4ea4\u7ec7\u5728\u4e00\u8d77\uff0c\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u800c\u672c\u9898\u91cc\u7684\u201c\u91cd\u6784\u6811\u201d\u8fd9\u4e2a\u5de5\u5177\uff0c\u5c31\u597d\u50cf\u662f\u300a\u4fe1\u6761\u300b\u91cc\u672a\u6765\u4eba\u4f20\u9001\u7ed9\u73b0\u4ee3\u4eba\u7684\u201c\u9006\u5411\u6b66\u5668\u201d\u548c\u201c\u7b97\u6cd5\u201d\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n\u5b9e\u9645\u63d0\u4ea4\u65f6\uff0c\u5efa\u8bae\u52a0\u4e0a\u8bfb\u5165\u4f18\u5316\uff0c\u8be6\u89c1\u672c\u535a\u5ba2\u516c\u544a\u3002\n\n```cpp\n// problem: CF1416D\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define pb push_back\n#define mk make_pair\n#define lob lower_bound\n#define upb upper_bound\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\n\ntemplate<typename T> inline void ckmax(T& x, T y) { x = (y > x ? y : x); }\ntemplate<typename T> inline void ckmin(T& x, T y) { x = (y < x ? y : x); }\n\nconst int MAXN = 2e5, MAXM = 3e5, MAXQ = 5e5;\nconst int LOG = 18;\n\nint n, m, q, val[MAXN + 5];\nbool init_in_map[MAXM + 5];\nstruct Edge_t {\n\tint u, v;\n};\nstruct Query_t {\n\tint op, x;\n};\n\nEdge_t edges[MAXM + 5], edges_sorted[MAXM + 5];\nQuery_t queries[MAXQ + 5];\nint cnt_e, tim[MAXQ + 5];\n\nint fa[MAXN * 2 + 5], cnt_node;\ninline int get_fa(int u) { return (u == fa[u]) ? u : (fa[u] = get_fa(fa[u])); }\ninline int new_node() {\n\t++cnt_node;\n\tfa[cnt_node] = cnt_node;\n\treturn cnt_node;\n}\n\nstruct EDGE { int nxt, to; } edge[MAXN * 2 + 5];\nint head[MAXN * 2 + 5], tot;\ninline void add_edge(int u, int v) { edge[++tot].nxt = head[u]; edge[tot].to = v; head[u] = tot; }\n\nint node_tim[MAXN * 2 + 5]; // \u6811\u4e0a\u8fd9\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u52a0\u8fb9\u65f6\u95f4\nint dfn[MAXN + 5], rev[MAXN + 5], min_dfn[MAXN * 2 + 5], max_dfn[MAXN * 2 + 5], cnt_dfn;\nint anc[MAXN * 2 + 5][LOG + 1];\n\nvoid dfs(int u) {\n\tfor(int i = 1; i <= LOG; ++i) {\n\t\tanc[u][i] = anc[anc[u][i - 1]][i - 1];\n\t}\n\tbool is_leaf = 1;\n\tmin_dfn[u] = n * 2;\n\tfor(int i = head[u]; i; i = edge[i].nxt) {\n\t\tint v = edge[i].to;\n\t\tis_leaf = 0;\n\t\tanc[v][0] = u;\n\t\tdfs(v);\n\t\tckmin(min_dfn[u], min_dfn[v]);\n\t\tckmax(max_dfn[u], max_dfn[v]);\n\t}\n\tif(is_leaf) {\n\t\t++cnt_dfn;\n\t\tmin_dfn[u] = max_dfn[u] = dfn[u] = cnt_dfn;\n\t\trev[cnt_dfn] = u;\n\t}\n}\nint get_anc(int u, int t) {\n\t// u \u7684\u6700\u9ad8\u7684 node_tim <= t \u7684\u7956\u5148\n\tint v = u;\n\tfor(int i = LOG; i >= 0; --i) {\n\t\tif(anc[v][i] && node_tim[anc[v][i]] <= t) {\n\t\t\tv = anc[v][i];\n\t\t}\n\t}\n\treturn v;\n}\n\nstruct SegmentTree {\n\tint mx[MAXN * 4 + 5], mx_pos[MAXN * 4 + 5];\n\tvoid push_up(int p) {\n\t\tif(mx[p << 1] > mx[p << 1 | 1]) {\n\t\t\tmx[p] = mx[p << 1];\n\t\t\tmx_pos[p] = mx_pos[p << 1];\n\t\t} else {\n\t\t\tmx[p] = mx[p << 1 | 1];\n\t\t\tmx_pos[p] = mx_pos[p << 1 | 1];\n\t\t}\n\t}\n\tvoid build(int p, int l, int r) {\n\t\tif(l == r) {\n\t\t\tmx[p] = val[rev[l]];\n\t\t\tmx_pos[p] = l;\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(p << 1, l, mid);\n\t\tbuild(p << 1 | 1, mid + 1, r);\n\t\tpush_up(p);\n\t}\n\tvoid point_modify(int p, int l, int r, int pos) {\n\t\tif(l == r) {\n\t\t\tmx[p] = 0;\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tif(pos <= mid) {\n\t\t\tpoint_modify(p << 1, l, mid, pos);\n\t\t} else {\n\t\t\tpoint_modify(p << 1 | 1, mid + 1, r, pos);\n\t\t}\n\t\tpush_up(p);\n\t}\n\tpii query(int p, int l, int r, int ql, int qr) {\n\t\tif(ql <= l && qr >= r) {\n\t\t\treturn make_pair(mx[p], mx_pos[p]);\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tpii res = mk(0, 0);\n\t\tif(ql <= mid) {\n\t\t\tres = query(p << 1, l, mid, ql, qr);\n\t\t}\n\t\tif(qr > mid) {\n\t\t\tckmax(res, query(p << 1 | 1, mid + 1, r, ql, qr));\n\t\t}\n\t\treturn res;\n\t}\n\tSegmentTree() {}\n}SegT;\n\nint main() {\n\tcin >> n >> m >> q;\n\tfor(int i = 1; i <= n; ++i) {\n\t\tcin >> val[i];\n\t}\n\tfor(int i = 1; i <= m; ++i) {\n\t\tcin >> edges[i].u >> edges[i].v;\n\t\tinit_in_map[i] = 1;\n\t}\n\tfor(int i = 1; i <= q; ++i) {\n\t\tcin >> queries[i].op >> queries[i].x;\n\t\tif(queries[i].op == 2) {\n\t\t\tassert(init_in_map[queries[i].x] == 1);\n\t\t\tinit_in_map[queries[i].x] = 0;\n\t\t}\n\t}\n\tfor(int i = 1; i <= m; ++i) {\n\t\tif(init_in_map[i]) {\n\t\t\t++cnt_e;\n\t\t\tedges_sorted[cnt_e] = edges[i];\n\t\t}\n\t}\n\tfor(int i = q; i >= 1; --i) {\n\t\tif(queries[i].op == 2) {\n\t\t\t++cnt_e;\n\t\t\tedges_sorted[cnt_e] = edges[queries[i].x];\n\t\t} else {\n\t\t\ttim[i] = cnt_e;\n\t\t}\n\t}\n\t\n\tassert(cnt_e == m);\n\tfor(int i = 1; i <= n; ++i) {\n\t\tnew_node();\n\t}\n\tfor(int i = 1; i <= m; ++i) {\n\t\tint u = get_fa(edges_sorted[i].u);\n\t\tint v = get_fa(edges_sorted[i].v);\n\t\tif(u != v) {\n\t\t\tint par = new_node();\n\t\t\tfa[u] = fa[v] = par;\n\t\t\tnode_tim[par] = i;\n\t\t\tadd_edge(par, u);\n\t\t\tadd_edge(par, v);\n\t\t}\n\t}\n\tfor(int i = 1; i <= cnt_node; ++i) {\n\t\tif(get_fa(i) == i) {\n\t\t\tdfs(i);\n\t\t}\n\t}\n\tassert(cnt_dfn == n);\n\tSegT.build(1, 1, n);\n\tfor(int i = 1; i <= q; ++i) {\n\t\tif(queries[i].op == 1) {\n\t\t\tint u = queries[i].x;\n\t\t\tint v = get_anc(u, tim[i]);\n\t\t\t\n\t\t\tpii qres = SegT.query(1, 1, n, min_dfn[v], max_dfn[v]);\n\t\t\tcout << qres.fi << endl;\n\t\t\tif(qres.fi) {\n\t\t\t\tSegT.point_modify(1, 1, n, qres.se);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1601304099,
        "uid": 100674,
        "name": "duyi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1416D \u3010Graph and Queries\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u795e\u5947\u7684\u89e3\u6cd5\uff0c\u5341\u5206\u597d\u5199\uff01\uff01\uff01\n\n\u9996\u5148\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u4e0d\u4f1a\u5f71\u54cd\u56fe\u7684\u8fde\u901a\u6027\uff0c\u90a3\u4e48\u4e0d\u4f1a\u9020\u6210\u5f71\u54cd\uff0c\u53ef\u4ee5\u5148\u4ece\u540e\u5f80\u524d\u627e\u5230\u6811\u8fb9\u3002\n\n\u5f53\u65ad\u6389\u4e00\u6761\u6811\u8fb9\u65f6\uff0c\u6574\u4e2a\u56fe\u4f1a\u53d8\u4e3a\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u6b64\u65f6\u7c7b\u6bd4\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u6211\u4eec\u5012\u8fc7\u6765\u505a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u5206\u6210\u7684\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u53ef\u4ee5\u66b4\u529b\u628a\u5c0f\u7684\u4e00\u4e2a\u4ece\u5927\u7684\u4e00\u4e2a\u5220\u9664\uff0c\u7528\u4e24\u4e2a priority_queue \u5373\u53ef\u3002\n\n\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u6709\u4e24\u4e2a $\\log$ \uff0c\u8fc7\u4e0d\u53bb\u3002\n\n\u8003\u8651\u4f18\u5316\u6389\u5806\u7684 $\\log$\u3002\n\n\u6211\u4eec\u628a\u5806\u6539\u6210 vector\uff0c\u5728\u91cc\u9762\u5b58\u4e0b\u6240\u6709\u7684\u8fde\u901a\u5757\u5185\u7684\u503c\uff0c\u521d\u59cb\u6211\u4eec\u4ee4\u6574\u4e2a vector \u6709\u5e8f\uff0c\u4e4b\u540e\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6253\u4e0a\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u6807\u8bb0\uff0c\u76f8\u5f53\u4e8e\u5728\u4e4b\u524d\u7684\u5757\u4e2d\u5220\u9664\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7c7b\u4f3c\u4e24\u4e2a\u4f18\u5148\u961f\u5217\u652f\u6301\u5220\u9664\u3002\n\n\u8fd9\u6837\u5c31\u662f $n\\log n$ \u7684\u3002\n\n\u5177\u4f53\u4ee3\u7801\u53ef\u4ee5\u89c1 Fee_cle6418 \u7684\u5b9e\u73b0\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nstruct Query{\n\tint opt,x,rx,ry;\n}q[500005];\nint n,m,Q,fa[200005],ex[300005],ey[300005],del[300005],sz[300005],bel[200005],a[200005],used[200005];\nvector<int> h[200005];\nint gf(int x){\n\treturn fa[x]==x?x:gf(fa[x]);\n}\nint Query(int x){\n\twhile(h[x].size()&&(bel[h[x].back()]!=x||used[h[x].back()]))h[x].pop_back();\n\tif(!h[x].size())return 0;\n\tint r=h[x].back();\n\treturn h[x].pop_back(),used[r]=1,r;\n}\nint main() {\n\tscanf(\"%d%d%d\",&n,&m,&Q);\n\tfor(int i=1,x;i<=n;i++)scanf(\"%d\",&x),h[fa[i]=i].push_back(a[i]=x),sz[i]=1;\n\tfor(int i=1;i<=m;i++)scanf(\"%d%d\",&ex[i],&ey[i]);\n\tfor(int i=1;i<=Q;i++){\n\t\tscanf(\"%d%d\",&q[i].opt,&q[i].x);\n\t\tif(q[i].opt==2)del[q[i].x]=1;\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tif(del[i])continue;\n\t\tint x=gf(ex[i]),y=gf(ey[i]);\n\t\tif(x==y)continue;\n\t\tif(sz[x]>sz[y])swap(x,y);\n\t\tfor(int j:h[x])h[y].push_back(j);\n\t\tfa[x]=y,sz[y]+=sz[x];\n\t}\n\tfor(int i=Q;i>=1;i--){\n\t\tint x=ex[q[i].x],y=ey[q[i].x];\n\t\tif(q[i].opt==1||gf(x)==gf(y))continue;\n\t\tx=gf(x),y=gf(y);\n\t\tif(sz[x]>sz[y])swap(x,y);\n\t\tq[i].rx=x,q[i].ry=y,fa[x]=y,sz[y]+=sz[x];\n\t\tfor(int j:h[x])h[y].push_back(j);\n\t}\n\tfor(int i=1;i<=n;i++)sort(h[i].begin(),h[i].end()),bel[a[i]]=gf(i);\n\tfor(int i=1,u;i<=Q;i++){\n\t\tif(q[i].opt==1)printf(\"%d\\n\",u=Query(gf(q[i].x)));\n\t\telse if(q[i].rx){\n\t\t\tfor(int j:h[q[i].rx])bel[j]=q[i].rx;\n\t\t\tfa[q[i].rx]=q[i].rx;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1601277332,
        "uid": 41476,
        "name": "gyh20",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1416D \u3010Graph and Queries\u3011"
    },
    {
        "content": "\u91cd\u6784\u6811\u3002\n\n\u770b\u5230\u5220\u8fb9\u64cd\u4f5c\u9a6c\u4e0a\u5012\u8fc7\u6765\u53d8\u6210\u52a0\u8fb9\u3002\u4f46\u53d1\u73b0\u6211\u4eec\u4e0d\u597d\u5904\u7406\u51fa\u6bcf\u4e2a\u8054\u901a\u5757\u5305\u542b\u54ea\u4e9b\u70b9\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u628a\u4ed6\u653e\u5230\u91cd\u6784\u6811\u4e0a\u3002\u5177\u4f53\u5730\uff0c\u6bcf\u6b21 merge \u90fd\u65b0\u5efa\u4e00\u4e2a\u70b9 $p$\uff0c\u5c06 $f_{u}$ \u4e0e $f_{v}$ \u5747\u8bbe\u4e3a $p$\uff0c\u5e76\u5728\u91cd\u6784\u6811\u4e0a\u5c06 $p$ \u7684\u513f\u5b50\u8bbe\u4e3a $u$ \u548c $v$\u3002\n\n\u90a3\u4e48\u4e00\u6b21\u64cd\u4f5c\u5728\u91cd\u6784\u6811\u4e0a\u5c31\u662f\u4e00\u4e2a\u5b50\u6811\u64cd\u4f5c\u3002\u968f\u4fbf\u6574\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7ef4\u62a4\u5c31\u884c\u3002\n\n\u63d0\u4ea4\u8bb0\u5f55\uff1ahttps://codeforces.com/contest/1416/submission/94040207\n\nC++11 \u6709\u4e2a feature \u5c31\u662f\u4f60\u5728\u7ed3\u6784\u4f53\u91cc\u5934\u5f00\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u7ec4\u4f1a CTLE\u3002\u89e3\u51b3\u65b9\u6848\u662f\u52a0\u4e00\u4e2a\u7a7a\u6784\u9020\u51fd\u6570\u3002",
        "postTime": 1601263643,
        "uid": 55078,
        "name": "YLWang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1416D \u3010Graph and Queries\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1416D)\n## \u9898\u76ee\u5927\u610f\n\u7ed9\u4e00\u5f20\u56fe\uff0c\u6709\u4e24\u79cd\u64cd\u4f5c\u3002\n1. \u67e5\u8be2\u4e0e\u4e00\u4e2a\u70b9 $v$ \u8054\u901a\u7684\u70b9\u4e2d\u6743\u503c\u7684\u6700\u5927\u503c\u3002\u8f93\u51fa\u540e\u6700\u5927\u503c\u8d4b\u4e3a $0$\u3002\n2. \u5220\u53bb\u4e00\u6761\u8fb9\u3002\n\n## Solution\n\u611f\u89c9\u9898\u89e3\u533a\u7528\u5012\u7740\u52a0\u8fb9\u505a\u7684\u4eba\u6bd4\u8f83\u591a\uff0c\u6211\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u6bd4\u8f83\u6b63\u5411\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\u6211\u644a\u724c\u4e86\uff0c\u6211\u662f\u4e3a\u4e86\u7ec3\u4e60\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u800c\u505a\u7684\uff0c\u56e0\u6b64\u6211\u62ff\u5230\u9898\u6211\u5c31\u5f80\u7740\u4e0a\u9762\u60f3\u4e86\u3002\n\n\u8fd8\u662f\u4e00\u6837\u7684\u5957\u8def\uff0c\u8003\u8651\u8fb9\u7684\u4f18\u52a3\u6027\u3002\u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u56fe\u5c3d\u53ef\u80fd\u8054\u901a\uff0c\u6240\u4ee5\u5728\u91cd\u6784\u6811\u7684\u65f6\u5019\uff0c\u8981\u9009\u62e9\u4e00\u6761\u6700\u665a\u88ab\u65ad\u5f00\u7684\u8def\u5f84\u624d\u4e0d\u4f1a\u5f71\u54cd\u6b63\u786e\u6027\u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u8fd9\u4e2a\u53ea\u5220\u4e0d\u589e\u7684\u7279\u6027\uff0c\u5148\u79bb\u7ebf\u6240\u6709\u8be2\u95ee\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e00\u6761\u8fb9\u5728\u56fe\u4e2d\u5b58\u5728\u7684\u6700\u665a\u65f6\u523b\u3002\u5bb9\u6613\u8bc1\u660e\uff0c\u5173\u4e8e\u8fd9\u4e2a\u505a\u6700\u5c0f\u751f\u6210\u6811\u7684\u7ed3\u679c\u6b63\u786e\u7684\u3002\n\n\u6240\u4ee5\u5f88\u663e\u7136\u7684\uff0c\u6784\u5efa\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\uff0c\u7136\u540e\u5411\u4e0a\u627e\u5230\u6700\u540e\u4e00\u4e2a\u6700\u665a\u65f6\u523b\u5c0f\u4e8e\u5f53\u524d\u65f6\u523b\u7684\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u5b50\u6811\u4e2d\u7684\u6240\u6709\u53f6\u8282\u70b9\uff0c\u5c31\u662f\u6240\u6709\u4e0e $v$ \u8054\u901a\u7684\u70b9\u3002\n\n\u63a5\u4e0b\u6765\u89e3\u51b3\u6bcf\u6b21\u8be2\u95ee\u540e\u628a\u6700\u503c\u8d4b\u503c\u4e3a $0$ \u7684\u9650\u5236\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u638f\u51fa\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u54e6\u5bf9\u4e86\u9898\u76ee\u4e2d\u4fdd\u8bc1\u6743\u503c\u662f $1\\sim n$ \u7684\u4e00\u4e2a\u6392\u5217\uff0c\u6240\u4ee5\u4e00\u4e2a\u6743\u503c\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u7ef4\u62a4\u628a\u6700\u5927\u503c\u8d4b\u503c\u4e3a $0$ \u7684\u64cd\u4f5c\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u6765\u505a\u52a8\u6001\u7684\u533a\u95f4\u6700\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n## Code\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define inf (1<<30)\n#define INF (1ll<<60)\nusing namespace std;\nconst int MAXN=5e5+10;\nstruct Tree{int l,r,mx;}tr[MAXN<<2];\n#define ls i<<1\n#define rs i<<1|1\nvoid pushup(int i){tr[i].mx=max(tr[ls].mx,tr[rs].mx);}\nvoid build(int i,int l,int r){\n\ttr[i].l=l;tr[i].r=r;tr[i].mx=0;\n\tif(l==r) return;int mid=l+r>>1;\n\tbuild(ls,l,mid);build(rs,mid+1,r);\n}\nvoid upd(int i,int x,int v){\n\tif(tr[i].l==x&&tr[i].r==x){\n\t\ttr[i].mx=v;return;\n\t}int mid=tr[i].l+tr[i].r>>1;\n\tif(x<=mid) upd(ls,x,v);\n\telse upd(rs,x,v);\n\tpushup(i);\n}\nint ask(int i,int l,int r){\n\tif(tr[i].l>=l&&tr[i].r<=r) return tr[i].mx;\n\tint mid=tr[i].l+tr[i].r>>1;\n\tif(r<=mid) return ask(ls,l,r);\n\telse if(l>mid) return ask(rs,l,r);\n\telse return max(ask(ls,l,mid),ask(rs,mid+1,r));\t\n}//segment tree\nstruct Edge{\n\tint u,v,w;\n\tvoid input(){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tw=inf;\n\t}bool friend operator<(Edge a,Edge b){\n\t\treturn a.w>b.w;\n\t}\n}E[MAXN];\nstruct Query{\n\tint opt,v;\n\tvoid input(int i){\n\t\tscanf(\"%d%d\",&opt,&v);\n\t\tif(opt==2) E[v].w=i;\n\t}\n}q[MAXN];\nint p[MAXN],f[MAXN],TL[MAXN],mp[MAXN];\n//TL \u8868\u793a\u8fb9\u7684\u6700\u665a\u5b58\u5728\u65f6\u523b\uff0cmp[i] \u8868\u793a\u6743\u503c\u4e3a i \u7684\u70b9\u7f16\u53f7\nint find(int x){return f[x]==x?x:f[x]=find(f[x]);}\nvector<int> e[MAXN];\nint fa[MAXN][20],lb[MAXN],rb[MAXN],tot;\nvoid dfs(int x,int fat){\n\tfa[x][0]=fat;\n\tfor(int i=1;i<20;i++)\n\t\tfa[x][i]=fa[fa[x][i-1]][i-1];\n\tlb[x]=tot;\n\tif(!e[x].size()){\n\t\tlb[x]=tot;rb[x]=++tot;\n\t\tupd(1,tot,p[x]);return;\n\t}\n\tfor(int i=0;i<e[x].size();i++)\n\t\tdfs(e[x][i],x);\n\trb[x]=tot;\n}\nint main()\n{\n\tint n,m,Q;\n\tscanf(\"%d%d%d\",&n,&m,&Q);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&p[i]),mp[p[i]]=i;\n\tfor(int i=1;i<=m;i++) E[i].input();\n\tfor(int i=1;i<=Q;i++) q[i].input(i);\n\tfor(int i=1;i<=n+m;i++) f[i]=i;\n\tsort(E+1,E+1+m);\n\tint cnt=n;\n\tfor(int i=1;i<=m;i++){\n\t\tint fx=find(E[i].u),fy=find(E[i].v);\n\t\tif(fx==fy) continue;\n\t\tf[fx]=f[fy]=++cnt;\n\t\te[cnt].push_back(fx);\n\t\te[cnt].push_back(fy);\n\t\tTL[cnt]=E[i].w;\n\t}build(1,1,n);\n\tfor(int i=1;i<=cnt;i++)\n\t\tif(find(i)==i)\n\t\t\tdfs(i,0);\n\tTL[0]=0;\n\tfor(int i=1;i<=Q;i++){\n\t\tint op=q[i].opt,x=q[i].v;\n\t\tif(op==1){\n\t\t\tfor(int j=19;j>=0;j--)\n\t\t\t\tif(TL[fa[x][j]]>=i&&fa[x][j])\n\t\t\t\t\tx=fa[x][j];\n\t\t\tint ans=ask(1,lb[x]+1,rb[x]);\n\t\t\tif(ans) upd(1,rb[mp[ans]],0);//\u8fd9\u91cc\u6700\u597d\u5224\u4e00\u4e0b ans==0\uff0c\u4e0d\u7136\u4f1a WA on test 5\n\t\t\t//\u54e6\u4f60\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\uff0c\u4f60\u8bf4\u5462\n\t\t\t//\u4e0d\u8fc7 build \u7684\u65f6\u5019\u4ece 0 \u5f00\u59cb\u5efa\u5927\u6982\u5c31\u4e0d\u7528\u5224\u4e86\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n}\n```\n## End",
        "postTime": 1631446747,
        "uid": 292315,
        "name": "ZCETHAN",
        "ccfLevel": 7,
        "title": "CF1416D Graph and Queries"
    },
    {
        "content": "\u5e26\u5220\u9664\u7ef4\u62a4\u6700\u5927\u503c\u663e\u7136\u4e0d\u597d\u505a\uff0c\u6240\u4ee5\u8003\u8651\u5148\u628a\u6700\u540e\u7684\u56fe\u5efa\u51fa\u6765\uff0c\u518d\u4ece\u540e\u5f80\u524d\u52a0\u8fb9\u3002\n\n\u4f46\u662f\u8be2\u95ee\u4e2d\u8fd8\u5e26\u4fee\u6539\uff08\u8ba9 $p_u=0$\uff09\uff0c\u8fd9\u6837\u4f1a\u5f71\u54cd\u540e\u9762\u7684\u8be2\u95ee\uff0c\u6240\u4ee5\u4e5f\u4e0d\u80fd\u52a0\u8fb9\u65f6\u5c31\u5f97\u5230\u7b54\u6848\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u5341\u5206\u7b80\u5355\u6613\u61c2\u7684\u505a\u6cd5\uff1a\n\n\u5728\u4ece\u540e\u5f80\u524d\u679a\u4e3e\u64cd\u4f5c\u7684\u65f6\u5019\uff1a\n\n1. \u5982\u679c\u662f\u52a0\u8fb9 $(u,v)$ \u4e14 $u$ \u548c $v$ \u4e0d\u8fde\u901a\uff08\u8bbe\u5b83\u4eec\u6240\u5728\u8fde\u901a\u5757\u7684\u6839\u5206\u522b\u4e3a $a$\u3001$b$\uff09\uff0c\u6211\u4eec\u5c31\u65b0\u5efa\u4e00\u4e2a\u865a\u70b9\u8fde\u5411 $a$\u3001$b$\uff0c\u5e76\u4e14\u628a\u8fd9\u4e2a\u865a\u70b9\u4f5c\u4e3a $a$\u3001$b$ \u7684\u7236\u4eb2\u3002\n\n2. \u5982\u679c\u662f\u8be2\u95ee $x$\uff0c\u4e5f\u5c31\u662f\u8be2\u95ee\u5f53\u524d $x$ \u6240\u5728\u8fde\u901a\u5757\u5185\u7684\u6700\u5927\u503c\uff0c\u6211\u4eec\u5c31\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d $x$ \u6240\u5728\u8fde\u901a\u5757\u7684\u6839\u3002\n\n\u5efa\u597d\u65b0\u56fe\u540e\uff0c\u6211\u4eec\u518d\u4ece\u524d\u5f80\u540e\u626b\u6bcf\u4e00\u4e2a\u8be2\u95ee\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u76f4\u63a5\u67e5\u8be2\u6211\u4eec\u5bf9\u8fd9\u4e2a\u8be2\u95ee\u8bb0\u5f55\u7684\u6839\u7684\u5b50\u6811\u5185\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u628a\u5b83\u7f6e\u96f6\u3002\u8fd9\u4e9b\u64cd\u4f5c\u5177\u4f53\u53ef\u4ee5\u7528 dfn \u5e8f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u5176\u5b9e\u8fd9\u4e2a\u505a\u6cd5\u7684\u5de7\u5999\u4e4b\u5904\u5c31\u5728\u4e8e\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u865a\u70b9\uff0c\u8fd9\u4e2a\u865a\u70b9\u8d77\u5230\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u53ef\u6301\u4e45\u5316\u8bb0\u5f55\u548c\u533a\u5206\u7248\u672c\u7684\u4f5c\u7528\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n\n#define N 200010\n#define M 300010\n#define K 500010\n\nusing namespace std;\n\nstruct Edge\n{\n\tint u,v;\n}e[M];\n\nstruct Query\n{\n\tint opt,x;\n}q[K];\n\nstruct data\n{\n\tint v,id;\n\tdata(){v=-1*1*1*1;}\n\tdata(int a,int b){v=a,id=b;}\n}maxn[(N+K)<<2];\n\nbool operator < (data a,data b)\n{\n\treturn a.v<b.v;\n}\n\nint n,m,Q,v[N+K],fa[N+K];\nint cnt,head[N+K],to[N+K],nxt[N+K];\nint node,idx,dfn[N+K],rk[N+K],size[N+K];\nbool del[M],vis[N+K];\n\nint find(int x)\n{\n\treturn x==fa[x]?x:(fa[x]=find(fa[x]));\n}\n\nvoid adde(int u,int v)\n{\n\tto[++cnt]=v;\n\tnxt[cnt]=head[u];\n\thead[u]=cnt;\n}\n\nvoid dfs(int u)\n{\n\tdfn[u]=++idx;\n\trk[idx]=u;\n\tsize[u]=1;\n\tfor(int i=head[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tdfs(v);\n\t\tsize[u]+=size[v];\n\t}\n}\n\nvoid up(int k)\n{\n\tmaxn[k]=max(maxn[k<<1],maxn[k<<1|1]);\n}\n\nvoid build(int k,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tmaxn[k]=data(v[rk[l]],l);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(k<<1,l,mid);\n\tbuild(k<<1|1,mid+1,r);\n\tup(k);\n}\n\ndata query(int k,int l,int r,int ql,int qr)\n{\n\tif(ql<=l&&r<=qr) return maxn[k];\n\tint mid=(l+r)>>1;\n\tdata ans;\n\tif(ql<=mid) ans=max(ans,query(k<<1,l,mid,ql,qr));\n\tif(qr>mid) ans=max(ans,query(k<<1|1,mid+1,r,ql,qr));\n\treturn ans;\n}\n\nvoid update(int k,int l,int r,int x)\n{\n\tif(l==r)\n\t{\n\t\tmaxn[k].v=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid) update(k<<1,l,mid,x);\n\telse update(k<<1|1,mid+1,r,x);\n\tup(k);\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&Q);\n\tnode=n;\n\tfor(int i=1;i<=n;i++) \n\t\tscanf(\"%d\",&v[i]);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d%d\",&e[i].u,&e[i].v);\n\tfor(int i=1;i<=Q;i++)\n\t{\n\t\tscanf(\"%d%d\",&q[i].opt,&q[i].x);\n\t\tif(q[i].opt==2) del[q[i].x]=1;\n\t}\n\tfor(int i=1;i<=n;i++) fa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(!del[i])\n\t\t{\n\t\t\tint a=find(e[i].u),b=find(e[i].v);\n\t\t\tif(a!=b)\n\t\t\t{\n\t\t\t\tfa[b]=a;\n\t\t\t\tadde(a,b);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=Q;i>=1;i--)\n\t{\n\t\tif(q[i].opt==1) q[i].x=find(q[i].x);\n\t\telse\n\t\t{\n\t\t\tint a=find(e[q[i].x].u),b=find(e[q[i].x].v);\n\t\t\tif(a!=b)\n\t\t\t{\n\t\t\t\t++node;//\u65b0\u5efa\u865a\u70b9\n\t\t\t\tfa[a]=fa[b]=fa[node]=node;\n\t\t\t\tadde(node,a),adde(node,b);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=node;i++)\n\t{\n\t\tint a=find(i);\n\t\tif(!vis[a])\n\t\t{\n\t\t\tvis[a]=true;\n\t\t\tdfs(a);\n\t\t}\n\t}\n\tbuild(1,1,node);\n\tfor(int i=1;i<=Q;i++)\n\t{\n\t\tif(q[i].opt==1)\n\t\t{\n\t\t\tdata ans=query(1,1,node,dfn[q[i].x],dfn[q[i].x]+size[q[i].x]-1);\n\t\t\tprintf(\"%d\\n\",ans.v);\n\t\t\tupdate(1,1,node,ans.id);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1611575686,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1416D \u3010Graph and Queries\u3011"
    },
    {
        "content": "\u64cd\u4f5c\u4e00\u7684\u610f\u601d\u662f\u6c42 $u$ \u6240\u5728\u8fde\u901a\u5757\u4e2d\u6700\u5c0f\u7684 $p$\uff0c\u7136\u540e\u6539\u6210 $0$\u3002\n\n\u64cd\u4f5c\u4e8c\u5c31\u662f\u5220\u8fb9\uff0c\u5e76\u4e14\u6ca1\u6709\u63d2\u5165\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u6761\u8fb9\u6700\u591a\u53ea\u4f1a\u88ab\u5220\u4e00\u6b21\uff0c\u90a3\u4e48\u53ef\u4ee5\u77e5\u9053\u6bcf\u6761\u8fb9\u7684\u5b58\u5728\u65f6\u95f4\u3002\n\n\u7ef4\u62a4\u8fde\u901a\u6027\u53ef\u4ee5\u6c42\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u51fa\u4e8e\u8d2a\u5fc3\u7684\u60f3\u6cd5\u80af\u5b9a\u662f\u8981\u5c3d\u53ef\u80fd\u5148\u52a0\u5165\u5b58\u5728\u65f6\u95f4\u957f\u7684\u8fb9\uff0c\u6240\u4ee5\u5c31\u662f\u6700\u5927\u751f\u6210\u6811\u3002\n\n\u987a\u7740\u601d\u8def\u60f3\u4e0b\u53bb\u7684\u8bdd\u4f1a\u60f3\u5230 $\\text{Kruscal}$ \u91cd\u6784\u6811\u3002\n\n\u67e5\u8be2\u76f8\u5f53\u4e8e\u662f\u627e\u5230\u6700\u6d45\u7684\u5b58\u5728\u65f6\u95f4\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\uff0c\u7136\u540e\u67e5\u8be2\u5b50\u6811\u6700\u5c0f\u503c\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u60f3\u6cd5\u662f\u4f7f\u7528 $\\text{LCT}$ \u7ef4\u62a4\uff0c\u5e94\u8be5\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\n\n```c++\n#include <map>\n#include <set>\n#include <cmath>\n#include <ctime> \n#include <queue>\n#include <stack>\n#include <bitset> \n#include <cstdio>\n#include <cstdlib>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\n#define fi first\n#define se second\n#define pb push_back\n#define MP std::make_pair\n#define PII std::pair<int, int>\n#define all(x) (x).begin(), (x).end()\n#define CL(a, b) memset(a, b, sizeof a)\n#define rep(i, l, r) for (int i = (l); i <= (r); ++ i)\n#define per(i, r, l) for (int i = (r); i >= (l); -- i)\n#define PE(x, a) for (int x = head[a]; x;x = edge[x].next)\n\ntypedef long long ll;\n\ntemplate <class T>\ninline void rd(T &x) {\n    char c = getchar(), f = 0; x = 0;\n    while (!isdigit(c)) f = (c == '-'), c = getchar();\n    while (isdigit(c)) x = x * 10 + c - '0', c = getchar();\n    x = f ? -x : x;\n}\n\nconst int MAXN = 1e6 + 7;\n\nint fa[MAXN], dfn[MAXN], sz[MAXN], f[MAXN][22], ans[MAXN], pos[MAXN];\nstd::vector<int> son[MAXN];\nint p[MAXN], n, m, tim[MAXN], q, seq[MAXN], wei[MAXN], tot;\nPII E[MAXN], Q[MAXN];\n\nint cmax(int x, int y) {\n    return p[x] == p[y] ? (x < y ? x : y) : (p[x] > p[y] ? x : y);\n}\n\nstruct Node {\n    int l, r;\n    #define mid (l + (r - l) / 2)\n    Node *lc, *rc;\n    int max;\n    Node(){}\n    Node(int l, int r, Node *lc, Node *rc) : l(l), r(r), lc(lc), rc(rc) {}\n\n    static Node *build(int l, int r) {\n        Node *ret;\n        if (l == r) {\n            ret = new Node(l, r, 0, 0);\n            ret->max = pos[l];\n        }\n        else {ret = new Node(l, r, build(l, mid), build(mid + 1, r)); ret->up();}\n        return ret;\n    }\n\n    void up() {\n        max = cmax(lc->max, rc->max);\n    }\n\n    void change(int p, int x) {\n        if (l == r) {\n            ::p[pos[l]] = x;\n            max = pos[l];\n            return;\n        }\n        if (p <= mid) lc->change(p, x);\n        else rc->change(p, x);\n        up();\n    }\n\n    int query(int L, int R) {\n        if (l == L && r == R) return max;\n        if (R <= mid) return lc->query(L, R);\n        else if (L > mid) return rc->query(L, R);\n        else return cmax(lc->query(L, mid), rc->query(mid + 1, R));\n    }\n} *root;\n\nbool cmp(int a, int b) {\n    return tim[a] > tim[b];\n}\n\ninline int find(int x) { return fa[x] == x ? x : fa[x] = find(fa[x]); }\n\nvoid dfs(int u) {\n    static int ts = 0;\n    dfn[u] = ++ts;\n    pos[ts] = u;\n    sz[u] = 1;\n    for (auto v: son[u]) dfs(v), sz[u] += sz[v], f[v][0] = u;\n}\n\nint get(int u, int val) {\n    per(i, 21, 0) {\n        if (f[u][i] && wei[f[u][i]] >= val) u = f[u][i];\n    }\n    return u;\n}\n\nint main() {\n    CL(ans, -1);\n\n    rd(n), rd(m), rd(q);\n    rep(i, 1, n) rd(p[i]), wei[i] = q + 1;\n    rep(i, 1, 2 * n + 5) fa[i] = i;\n    rep(i, 1, m) {\n        rd(E[i].fi); rd(E[i].se);\n        tim[i] = q + 1;\n        seq[i] = i;\n    }\n    rep(i, 1, q) rd(Q[i].fi), rd(Q[i].se);\n    rep(i, 1, q) {\n        if (Q[i].fi == 2) tim[Q[i].se] = i;\n    }\n\n    std::sort(seq + 1, seq + m + 1, cmp);\n    tot = n;\n    rep(i, 1, m) {\n        int u = E[seq[i]].fi, v = E[seq[i]].se, tt = tim[seq[i]];\n        if (find(u) == find(v)) continue;\n        wei[++tot] = tt;\n        u = find(u), v = find(v);\n        son[tot].pb(u), son[tot].pb(v);\n        fa[u] = fa[v] = tot;\n    }\n    per(i, tot, 1) if (!dfn[i]) dfs(i);\n    root = Node::build(1, tot);\n    rep(j, 1, 21) rep(i, 1, tot) f[i][j] = f[f[i][j - 1]][j - 1];\n    rep(i, 1, q) {\n        if (Q[i].fi == 1) {\n            int v = get(Q[i].se, i);\n            int tmp = root->query(dfn[v], dfn[v] + sz[v] - 1);\n            ans[i] = p[tmp];\n            if (ans[i])\n            root->change(dfn[tmp], 0);\n        }\n    }\n    rep(i, 1, q) if (ans[i] != -1) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1601273446,
        "uid": 52748,
        "name": "Logey",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1416D \u3010Graph and Queries\u3011"
    },
    {
        "content": "**\u559c\u63d0\uff08\u63a5\u8fd1\uff09\u6d1b\u8c37\u6700\u52a3\u89e3\u3002\u4f46\u662f\u5927\u6982\u6bd4 Kruskal \u91cd\u6784\u6811\u597d\u60f3\u4e00\u70b9\uff08\u6211\u592a\u83dc\u4e86\u5b8c\u5168\u60f3\u4e0d\u5230\uff09**\u3002\n\n## \u4e00\u3001\u524d\u7f6e\u77e5\u8bc6\uff1a\u7ebf\u6bb5\u6811\u5408\u5e76 & \u5206\u88c2\n\n\n\u8fd9\u91cc\u6211\u7528\u5230\u4e86\u6309\u503c\u57df\u5206\u88c2\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\u3002\n\n## \u4e8c\u3001\u89e3\u6cd5\n\n\u9996\u5148\u4ece\u540e\u5f80\u524d\u626b\u8be2\u95ee\uff0c\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u4e00\u4e0b\u54ea\u4e9b\u8fb9\u5220\u53bb\u540e\u4e00\u4e2a\u8fde\u901a\u5757\u53d8\u6210\u4e86\u4e24\u4e2a\uff0c\u800c\u5176\u4ed6\u88ab\u5220\u53bb\u7684\u8fb9\u6211\u4eec\u76f4\u63a5\u5728\u63a5\u4e0b\u6765\u7684\u6240\u6709\u64cd\u4f5c\u4e2d\u5ffd\u7565\u3002\u7136\u540e\u5bf9\u521d\u59cb\u65f6\u7684\u56fe\uff08\u5df2\u7ecf\u5220\u53bb\u4e00\u4e9b\u6ca1\u7528\u7684\u8fb9\u4e86\uff09\u8fdb\u884c $dfs$ \uff0c\u6c42\u51fa\u641c\u7d22\u6811\u4e0a\u6bcf\u4e2a\u70b9\u7684 $dfs$ \u5e8f\u548c\u5b50\u6811\u5927\u5c0f\u3002\n\n\u521d\u59cb\u65f6\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a $dfs$ \u5e8f\u7684\u8fde\u7eed\u533a\u95f4\u4e0a\u7684\u6700\u5927 $p_{dfn_i}$ \u548c\u5bf9\u5e94\u7684 $dfn_i$ \u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\uff1a\n\n1.\u5982\u679c\u662f\u5220\uff08\u6709\u7528\u7684\uff09\u8fb9 $(x,y)$ \u64cd\u4f5c\uff0c\u5047\u8bbe\u641c\u7d22\u6811\u4e0a $x$ \u662f $y$ \u7236\u7ed3\u70b9\uff0c\u90a3\u4e48\u5411\u4e0a\u500d\u589e\u627e\u5230 $x$ \u5f53\u524d\u6240\u5728\u7684\u6839\u8282\u70b9 $r$ \uff0c\u5728 $r$ \u6240\u4ee3\u8868\u7684\u7ebf\u6bb5\u6811\u4e0a\u5206\u88c2\u51fa\u6765 $[1,dfn_y-1]$ \u548c $[dfn_y+size_y,n]$ \u8fd9\u4e24\u4e2a\u533a\u95f4\u5e76\u628a\u5b83\u4eec\u5408\u5e76\u8d77\u6765\u5f52\u7ed9 $r$\uff0c\u5269\u4f59\u7684 $[dfn_y, dfn_y+size_y-1]$ \u5f52\u7ed9 $y$ \u5c31 ok \u4e86\u3002\n\n2.\u67e5\u8be2 $x$ \u7684\u64cd\u4f5c\u3002\u500d\u589e\u5411\u4e0a\u627e\u5230\u6700\u6d45\u7684\u7ed3\u70b9\uff08\u4e5f\u5c31\u662f\u5f53\u524d $x$ \u6240\u5728\u8fde\u901a\u5757\u7684\u6839\u8282\u70b9\uff09\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6743\u503c $val$\uff0c\u6bcf\u6b21\u5220\u8fb9 $(x,y)$\uff08$y$ \u662f\u7236\u8282\u70b9\uff09\u65f6\u7ed9 $y$ \u5b50\u6811 $+1$ \uff0c\u500d\u589e\u5230 $u$ \u65f6\u82e5 $val_u=val_x$ \u8bf4\u660e $u$ \u548c $x$ \u4ecd\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u662f\u53ef\u884c\u7684\uff1b\u5426\u5219\u8bf4\u660e\u4e0d\u53ef\u884c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(q\\log^2n)$ \uff0c\u74f6\u9888\u662f\u500d\u589e\u6c42\u6839\u8282\u70b9\uff0c\u8981\u5feb\u8bfb\u624d\u80fd\u8fc7\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(q\\log n)$ \uff0c\u6700\u597d\u5199\u4e00\u4e2a\u5783\u573e\u56de\u6536\u3002\n\n## \u4e09\u3001\u4ee3\u7801\n\n[\u63d0\u4ea4\u8bb0\u5f55](https://codeforces.com/contest/1416/submission/168470086)",
        "postTime": 1660634882,
        "uid": 131591,
        "name": "\u849f\u84bb\u541bHJT",
        "ccfLevel": 7,
        "title": "CF1416D Graph and Queries \u9898\u89e3"
    },
    {
        "content": "\\*2600\uff0c\u8fd9DS\u96be\u5ea6\u4e0d\u503c\u8fd9\u4e48\u9ad8\uff08\n\n\u9898\u89e3\u533a\u9664\u4e86\u4e24\u7bc7\u4e00\u773c\u5c31\u80fd\u770b\u61c2\u7684\u542f\u53d1\u5f0f\u5206\u88c2\u4ee5\u5916\uff0c\u5176\u4ed6\u7684\u5404\u79cd\u91cd\u6784\u6811\u90fd\u662f\u4ec0\u4e48\u5996\u9b54\u9b3c\u602a\uff1f\n\n\u672c\u6765\u4e00\u773c\u79d2\u4e86\u4e2a\u542f\u53d1\u5f0f\u5206\u88c2\uff0c\u60f3\u5230\u4e86\u4e2a\u590d\u6742\u5ea6\u53c8\u597d\u5feb\u53c8\u597d\u5199\u7684\u529e\u6cd5\uff0c\u6765\u8865\u4e00\u4e0b\u3002\n\n------------\n\n\u9996\u5148\uff0c\u5982\u679c\u4e0d\u542f\u53d1\u5f0f\u5206\u88c2\uff0c\u6211\u4eec\u5c31\u4e0d\u597d\u5728\u7ebf\u7684\u7ef4\u62a4\u5757\u5185\u5143\u7d20\uff0c\u8fd8\u662f\u8981\u5012\u5e8f\u52a0\u8fb9\u3002\n\n\u7136\u540e\u53d1\u73b0\u8be2\u95ee\u7684\u4e1c\u897f\u867d\u7136\u662f\u6b63\u5e8f\uff0c\u4f46\u5f88\u80fd\u52bf\u80fd\u5206\u6790\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u8003\u8651\u6b63\u5e8f\u5904\u7406\u8be2\u95ee\u3002\n\n\u6bd4\u8f83\u5173\u952e\u7684\u89c2\u5bdf\u662f\u6211\u4eec\u53ea\u9700\u8981\u8be2\u95ee\u65f6\u7684\u7ed3\u6784\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ea\u7528\u77e5\u9053\u8be2\u95ee\u7684\u65f6\u5019\u6709\u54ea\u4e9b\u5143\u7d20\uff0c\u5012\u5e8f\u52a0\u8fb9\u7684\u65f6\u5019\u91c7\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5408\u5e76\u53ef\u4ee5\u5c06\u7248\u672c\u4fe1\u606f\u4fdd\u5b58\u4e0b\u6765\u3002\n\n\u5bf9\u4e8e\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u52bf\u80fd\u5206\u6790\u81ea\u7136\u7684\u60f3\u5230[\u5957\u8def\u9898hlcpq](https://www.luogu.com.cn/blog/ICANTAKIOI/solution-p7712)\uff0c\u53d1\u73b0\u8fd9\u9053\u9898\u771f\u7684\u53ea\u662f\u627e\u4e00\u4e2a\u6570\u5220\u4e00\u4e2a\uff0c\u6ca1\u6709\u8fed\u4ee3\u7684\u8fc7\u7a0b\uff0c\u590d\u6742\u5ea6\u4e25\u683c\u5f31\u4e8e hlcpq\u3002\n\n\u76f8\u8f83\u4e8e hlcpq\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u5206\u6790\u65b9\u6cd5\uff1a\u5982\u679c\u80fd\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u4f1a\u82b1\u8d39 $O(\\log)$ \u7684\u4ee3\u4ef7\u56de\u9000\uff0c\u5426\u5219\u904d\u5386\u4e86\u53ef\u6301\u4e45\u5316\u6811\u4e0a\u4e00\u4e2a\u8282\u70b9\u6253\u4e0a\u6807\u8bb0\u4ee5\u540e\u4e0d\u518d\u904d\u5386\u3002\uff08\u7136\u540e\u53d1\u73b0\u5176\u5b9e\u548c hlcpq \u7684\u5206\u6790\u4e00\u6a21\u4e00\u6837\n\n\u4e8e\u662f\u6839\u636e\u52bf\u80fd\u5206\u6790\u904d\u5386\u6b21\u6570\u4e0e\u8be2\u95ee\u6b21\u6570\uff08$\\times \\log$\uff09\u548c\u53ef\u6301\u4e45\u5316\u7684\u8282\u70b9\u6570\u6709\u5173\uff0c\u590d\u6742\u5ea6 $O(n\\log n+q\\log n)$\u3002\n\n[\u4ee3\u7801](https://www.luogu.com.cn/paste/svxyn3md)\u548c hlcpq \u4e00\u6837\u77ed\u3002",
        "postTime": 1648458819,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "CF1416D Graph and Queries"
    },
    {
        "content": "\u611f\u89c9\u5012\u5e8f\u52a0\u8fb9\u53bb\u8003\u8651\u53cd\u800c\u7e41\u7410\u3002\n\n\u8fd9\u9898\u4e0a\u6765\uff0c\u5c31\u5f88\u50cf Kruskal \u91cd\u6784\u6811\u3002\u6211\u4eec\u6539\u6539\u9898\uff0c\u6539\u6210\u6bcf\u6761\u8fb9\u5e26\u4e2a\u8fb9\u6743\uff0c\u6bcf\u6b21\u7ed9\u5b9a\u4e00\u4e2a\u53c2\u6570 $x$ \u548c\u4e00\u4e2a\u70b9 $u$\uff0c\u5728\u8fb9\u6743 $\\le x$ \u7684\u56fe\u4e0a\uff0c$u$ \u6240\u5728\u8fde\u901a\u5757\u8fdb\u884c\u4fee\u6539\uff0c\u8fd9\u4e2a\u5c31\u662f Kruskal \u91cd\u6784\u6811\u677f\u5b50\u9898\uff0c\u53ea\u8981\u5efa\u51fa\u91cd\u6784\u6811\uff0c\u7136\u540e\u5316\u4e3a\u5b50\u6811\u67e5\u8be2\uff0c\u5b50\u6811\u4fee\u6539\uff0c\u6309\u7167 dfs \u5e8f\u7ef4\u62a4 segment tree \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8fd9\u9898\u6ca1\u8fb9\u6743\uff0c\u53ea\u6709\u65f6\u95f4\uff0c\u628a\u8fb9\u6743\u7f6e\u4e3a\u5b83\u7684\u5220\u9664\u65f6\u95f4\uff0c\u4e00\u76f4\u5b58\u5728\u7684\u8fb9\uff0c\u8fb9\u6743\u5c31\u662f INF\uff0c\u7136\u540e\u5c31\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u505a\u5b8c\u4e86...\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define op(x) ((x&1)?x+1:x-1)\n#define odd(x) (x&1)\n#define even(x) (!odd(x))\n#define lc(x) (x<<1)\n#define rc(x) (lc(x)|1)\n#define lowbit(x) (x&-x)\n#define Max(a,b) (a>b?a:b)\n#define Min(a,b) (a<b?a:b)\n#define next Cry_For_theMoon\n#define il inline\n#define pb(x) push_back(x)\n#define is(x) insert(x)\n#define sit set<int>::iterator\n#define mapit map<int,int>::iterator\n#define pi pair<int,int>\n#define ppi pair<int,pi>\n#define pp pair<pi,pi>\n#define fr first\n#define se second\n#define vit vector<int>::iterator\n#define mp(x,y) make_pair(x,y)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int uint;\ntypedef double db;\nusing namespace std;\nconst int MAXN=5e5+10;\nint n,m,q,p[MAXN*2],ord[MAXN],a[MAXN],b[MAXN],w[MAXN];\nint op[MAXN],u[MAXN],idx[MAXN];\nint fa[MAXN],val[MAXN],tot,faa[MAXN];\nvector<int>e[MAXN];\nint vis[MAXN],dfn[MAXN],orz[MAXN],sz[MAXN],dfntot;\nint top[MAXN][20];\nbool cmp(int x,int y){return (w[x]!=w[y])?(w[x]>w[y]):(x<y);}\nint Find(int x){\n    if(fa[x]==x)return x;\n    return fa[x]=Find(fa[x]);\n}\nvoid dfs(int u){\n    vis[u]=1;dfn[u]=++dfntot;sz[u]=1;orz[dfntot]=u;\n    rep(i,1,19)top[u][i]=top[top[u][i-1]][i-1];\n    for(auto v:e[u]){\n        if(v==faa[u])continue;\n        top[v][0]=u;\n        dfs(v);\n        sz[u]+=sz[v];\n    }\n}\nint leap(int u,int lim){\n    per(j,19,0){\n        if(!top[u][j])continue;\n        if(val[top[u][j]]<=lim)continue;\n        u=top[u][j];\n    }\n    return u;\n}\nstruct Seg{\n    int maxn[MAXN<<3];\n    void pushup(int x){maxn[x]=max(maxn[lc(x)],maxn[rc(x)]);}\n    void build(int x,int l,int r){\n        if(l==r){maxn[x]=p[orz[l]];return;}\n        int mid=(l+r)>>1;build(lc(x),l,mid);build(rc(x),mid+1,r);\n        pushup(x);\n    }\n    void upd(int x,int l,int r,int pos){\n        if(l==r){maxn[x]=0;return;}\n        int mid=(l+r)>>1;\n        if(pos<=mid)upd(lc(x),l,mid,pos);\n        else upd(rc(x),mid+1,r,pos);\n        pushup(x);\n    }\n    int qry(int x,int l,int r,int ql,int qr){\n        if(ql<=l && qr>=r)return maxn[x];\n        int mid=(l+r)>>1,ret=0;\n        if(ql<=mid)ret=max(ret,qry(lc(x),l,mid,ql,qr));\n        if(qr>mid)ret=max(ret,qry(rc(x),mid+1,r,ql,qr));\n        return ret;\n    }\n}t;\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&q);\n    rep(i,1,n)scanf(\"%d\",&p[i]),ord[p[i]]=i;\n    rep(i,1,m){scanf(\"%d%d\",&a[i],&b[i]);idx[i]=i;w[i]=q+1;}\n    rep(i,1,q){\n        scanf(\"%d%d\",&op[i],&u[i]);\n        if(op[i]==2)w[u[i]]=i;\n    }\n    sort(idx+1,idx+1+m,cmp);\n    rep(i,1,n)fa[i]=i;tot=n;\n    rep(u,1,m){\n        int i=idx[u];\n        if(Find(a[i])==Find(b[i]))continue;\n        tot++;fa[tot]=tot;val[tot]=w[i];\n        faa[Find(a[i])]=faa[Find(b[i])]=tot;\n        e[tot].pb(Find(a[i]));\n        e[tot].pb(Find(b[i]));\n        fa[Find(a[i])]=fa[Find(b[i])]=tot;\n    }\n    rep(i,1,tot){\n        if(faa[i])continue;\n        dfs(i);\n    }\n    t.build(1,1,tot);\n    rep(i,1,q){\n        if(op[i]==2)continue;\n        int p=leap(u[i],i);\n        int l=dfn[p],r=dfn[p]+sz[p]-1;\n        int val=t.qry(1,1,tot,l,r);\n        printf(\"%d\\n\",val);\n        if(val){\n            t.upd(1,1,tot,dfn[ord[val]]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1642547592,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010CF1416D\u3011Graph and Queries"
    },
    {
        "content": "\u53ef\u4ee5\u7528\u4e00\u4e2a\u5f88\u65b0\u9896\u7684\u7b97\u6cd5\u3002\u542f\u53d1\u5f0f\u5206\u88c2\uff01\uff01\uff01\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\u56fe\u7684\u9650\u5236\u662f\u5f88\u5f3a\u7684\uff0c\u6211\u4eec\u4e0d\u59a8\u5904\u7406\u4e00\u4e0b\u628a\u56fe\u53d8\u6210\u6811\uff0c\u81f3\u4e8e\u600e\u4e48\u53d8\u561b\uff0c\u5c31\u662f\u5012\u7740\u626b\u4e00\u8fb9\u7528\u5e76\u67e5\u96c6\u628a\u6709\u7528\u7684\u8fb9\u5b58\u8d77\u6765\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8981\u5220\u7684\u8fb9\uff0c\u82e5\u4ed6\u4e0d\u662f\u6811\u8fb9\uff0c\u90a3\u5c31\u4e0d\u7ba1\u4e86\uff0c\u5426\u5219\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u6761\u8fb9\u5728\u6811\u4e0a\u5220\u6389\uff0c\u800c\u8fd9\u6837\u7684\u8bdd\u590d\u6742\u5ea6\u65e0\u6cd5\u4fdd\u8bc1\uff0c\u8fd9\u65f6\u5c31\u8981\u7528\u5230 \u201c\u542f\u53d1\u5f0f\u5206\u88c2\u201d \u4e86\u3002\n\n\u6211\u4eec\u8003\u8651\u5148\u628a\u70b9\u6309\u70b9\u6743\u6392\u5e8f\uff0c\u5148\u76f4\u63a5\u6309 vector \u5b58\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u5220\u8fb9\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u66b4\u529b\u628a $siz$ \u5c0f\u7684\u8054\u901a\u5757\u7ed9\u66b4\u529b\u63d0\u51fa\u6765\uff0c\u8fd9\u6837\u7684\u8bdd\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u505a\u5230 $(n \\log n) $ \u4e86\u3002\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#define ll long long\n#define N 300005\nusing namespace std;\nstruct Query {\n\tint opt,x,xx,yy;\n} q[N<<1];\nint n,m,Q,fa[N],ex[N],ey[N],dd[N],sz[N],bb[N],a[N],ud[N];\nvector<int> hah[N];\ninline int read() {\n\tint s=0,f=0;\n\tchar ch=getchar();\n\twhile(ch<48||ch>57)f=(ch=='-'),ch=getchar();\n\twhile(ch>47&&ch<58)s=(s<<1)+(s<<3)+(ch^48),ch=getchar();\n\treturn f?-s:s;\n}\nint Getprt(int x) {\n\treturn fa[x]==x?x:Getprt(fa[x]);\n}\nint Query(int x) {\n\twhile(hah[x].size()&&(bb[hah[x].back()]!=x||ud[hah[x].back()]))hah[x].pop_back();\n\tif(!hah[x].size())return 0;\n\tint ans=hah[x].back();\n\treturn hah[x].pop_back(),ud[ans]=1,ans;\n}\nint main() {\n\tn=read(),m=read(),Q=read();\n\tfor(int i=1; i<=n; i++)hah[fa[i]=i].push_back(a[i]=read()),sz[i]=1;\n\tfor(int i=1; i<=m; i++)ex[i]=read(),ey[i]=read();\n\tfor(int i=1; i<=Q; i++) {\n\t\tq[i].opt=read(),q[i].x=read();\n\t\tif(q[i].opt==2)dd[q[i].x]=1;\n\t}\n\tfor(int i=1,x,y; i<=m; i++)\n\t\tif(!dd[i]&&(x=Getprt(ex[i]))!=(y=Getprt(ey[i]))) {\n\t\t\t((sz[x]>sz[y])?x^=y^=x^=y:0),fa[x]=y,sz[y]+=sz[x];\n\t\t\tfor(int j=0; j<hah[x].size(); ++j)hah[y].push_back(hah[x][j]);\n\t\t}\n\tfor(int i=Q,x,y; i>=1; i--)\n\t\tif(q[i].opt==2&&(x=Getprt(ex[q[i].x]))!=(y=Getprt(ey[q[i].x]))) {\n\t\t\t((sz[x]>sz[y])?x^=y^=x^=y:0),q[i].xx=x,q[i].yy=y,fa[x]=y,sz[y]+=sz[x];\n\t\t\tfor(int j=0; j<hah[x].size(); ++j)hah[y].push_back(hah[x][j]);\n\t\t}\n\tfor(int i=1; i<=n; i++)sort(hah[i].begin(),hah[i].end()),bb[a[i]]=Getprt(i);\n\tfor(int i=1,u; i<=Q; i++)\n\t\tif(q[i].opt==1)printf(\"%d\\n\",u=Query(Getprt(q[i].x)));\n\t\telse if(q[i].xx) {\n\t\t\tfor(int j=0; j<hah[q[i].xx].size(); ++j)bb[hah[q[i].xx][j]]=q[i].xx;\n\t\t\tfa[q[i].xx]=q[i].xx;\n\t\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1601278456,
        "uid": 112569,
        "name": "Time_tears",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1416D \u3010Graph and Queries\u3011"
    },
    {
        "content": "\u53ea\u6709\u5220\u8fb9\u64cd\u4f5c\u5957\u8def\u79bb\u7ebf\u53d8\u4e3a\u52a0\u8fb9\n\n\u7c7b\u4f3c kruskal \u91cd\u6784\u6811\u7684\u601d\u8def\uff0c\u52a0\u8fb9\u7684\u65f6\u5019\u5efa\u4e00\u4e2a\u865a\u70b9\u8fde\u5411\u4e24\u70b9\uff0c\u5219\u53ef\u4ee5\u628a\u8be2\u95ee\u6302\u5728\u67d0\u4e2a\u865a\u70b9\u4e0a\uff0c\u7136\u540e\u6309\u7167\u8be2\u95ee\u987a\u5e8f\u6bcf\u6b21\u627e\u5230\u8be5\u865a\u70b9\u5b50\u6811\u6700\u5927\u503c\u5e76\u5220\u9664\u5373\u53ef\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 dfs \u5e8f\u5b9e\u73b0\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+2,M=3e5+2,Q=5e5+2,O=4e5+2,P=1.6e6+2;\ntypedef pair<int,int> pa;\ntypedef long long ll;\nint lb[M][2],v[O],f[O],g[Q][2],fv[N],c[O][2],dfn[O],nfd[O],siz[O],l[P],r[P],ys[O],s[P];\nint n,cc,i,m,q,tp,cnt,x,y,z,ans;\nbool ed[O];\ninline void read(int &x)\n{\n\tcc=getchar();\n\twhile ((cc<48)||(cc>57)) cc=getchar();\n\tx=cc^48;cc=getchar();\n\twhile ((cc>=48)&&(cc<=57))\n\t{\n\t\tx=x*10+(cc^48);\n\t\tcc=getchar();\n\t}\n}\ninline int getf(register int x)\n{\n\tif (f[x]==x) return x;return f[x]=getf(f[x]);\n}\ninline void merge(register int x,register int y)\n{\n\tx=getf(x);y=getf(y);\n\tif (x==y) return;\n\tc[f[x]=f[y]=++n][0]=x;c[n][1]=y;\n}\nvoid dfs(int x)\n{\n\tsiz[nfd[dfn[x]=++cnt]=x]=1;\n\tif (c[x][0])\n\t{\n\t\tdfs(c[x][0]);dfs(c[x][1]);\n\t\tsiz[x]+=siz[c[x][0]]+siz[c[x][1]];\n\t}\n}\ninline void pushup(const int x)\n{\n\ts[x]=max(s[x<<1],s[x<<1|1]);\n}\nvoid build(const int x)\n{\n\tif (l[x]==r[x]) return fv[s[x]=v[nfd[l[x]]]]=x,void();\n\tconst int c=x<<1;\n\tl[c]=l[x];r[c]=l[x]+r[x]>>1;\n\tl[c|1]=r[c]+1;r[c|1]=r[x];\n\tbuild(c);build(c|1);\n\tpushup(x);\n}\ninline void sol(int x)\n{\n\tif ((z<=l[x])&&(r[x]<=y)) return ans=max(ans,s[x]),void();\n\tif (z<=r[x<<1]) sol(x<<1);if (y>r[x<<1]) sol(x<<1|1);\n}\ninline void mdf(register int x)\n{\n\ts[x]=0;while (x=x>>1) pushup(x);\n}\nint main()\n{\n\tread(n);read(m);read(q);\n\tfor (i=1;i<=n;i++) read(v[f[i]=i]);for (i=n+1;i<=n<<1;i++) f[i]=i;\n\tfor (i=1;i<=m;i++) {read(lb[i][0]);read(lb[i][1]);}\n\tfor (i=1;i<=q;i++) {read(g[i][0]);read(g[i][1]);if (g[i][0]==2) ed[g[i][1]]=1; else ++tp;}\n\tfor (i=1;i<=m;i++) if (!ed[i]) merge(lb[i][0],lb[i][1]);\n\tfor (i=q;i;i--) if (g[i][0]==2) merge(lb[g[i][1]][0],lb[g[i][1]][1]); else ys[tp--]=getf(g[i][1]);\n\tmemset(ed+1,0,n);\n\tfor (i=1;i<=n;i++) if (!ed[getf(i)]) {dfs(f[i]);ed[f[i]]=1;}\n\tr[l[1]=1]=n;build(1);\n\tfor (i=1;i<=q;i++) if (g[i][0]==1)\n\t{\n\t\tans=0;x=ys[++tp];y=(z=dfn[x])+siz[x]-1;\n\t\tsol(1);printf(\"%d\\n\",ans);mdf(fv[ans]);\n\t}\n}\n```",
        "postTime": 1601263448,
        "uid": 29826,
        "name": "SSerxhs",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1416D \u3010Graph and Queries\u3011"
    }
]