[
    {
        "content": "\u771f\u662f\u4e00\u9053\u5927\u6c34\u9898\n\n\u7b80\u5355\u8003\u8651\u4e00\u4e0b\u5c31\u662f\u53cd\u5f39\u662f\u6709\u89c4\u5f8b\u7684\u3002\n\n\u5c31\u50cf\u5207\u4e00\u5200\u4e00\u6837\u628a\u91cd\u590d\u90e8\u5206\u5207\u6389\uff0c\u7ffb\u4e2a\u9762\uff0c\u7ee7\u7eed\u5207\u3002\n\n\u76f4\u5230\u662f\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u65f6\u5019\u4e0a\u9762\u6574\u4e2a\u4e00\u6392\u662f\u90fd\u53ef\u4ee5\u5e03\u6ee1\u7684\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u8003\u8651\u5230\u4f7f\u7528\u8f97\u8f6c\u76f8\u9664\uff0c\u56e0\u4e3a\u5207\u9664\u91cd\u590d\u90e8\u5206\u7684\u8fc7\u7a0b\u5c31\u662f\u4e00\u4e2a\u8f97\u8f6c\u76f8\u9664\u7684\u8fc7\u7a0b\u3002\n\n\u63a5\u4e0b\u6765\u7b97\u51e0\u7ec4\u6837\u4f8b\uff0c\u51d1\u4e00\u4e0b\u6570\uff0c\u8003\u8651\u4e00\u4e0b\u5c31\u80fd\u51fa\u6765\u5f0f\u5b50\uff1a\n\n$ans=\\gcd(n-1,m-1)+1$\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ninline int GCD(int a,int b){return b==0?a:GCD(b,a%b);}\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    printf(\"%d\\n\",GCD(n-1,m-1)+1);\n    return 0;\n}\n```\n\n\u7ed3\u675f\u4e86\uff01",
        "postTime": 1668256284,
        "uid": 298132,
        "name": "Abel51qwq",
        "ccfLevel": 4,
        "title": "CF74C \u9898\u89e3"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\u7ed9\u4f60\u4e00\u4e2a $n\\times m$ \u5927\u5c0f\u7684\u68cb\u76d8\u3002\u4f60\u53ef\u4ee5\u5f80\u4e0a\u9762\u653e\u4e00\u4e9b\u201c\u8c61\u201d\uff08\u5c31\u662f\u8bf4\u8fd9\u4e9b\u68cb\u5b50\u90fd\u662f\u659c\u7740\u8d70\u7684\uff09\uff0c\u8fd9\u4e9b\u8c61\u4f1a\u671d\u7740\u4e00\u4e2a\u65b9\u5411\u8d70\uff08\u65b9\u5411\u968f\u4fbf\uff09\uff0c\u78b0\u5230\u8fb9\u7f18\u5c31\u8f6c 90\u00b0 \uff0c\u78b0\u5230\u89d2\u5c31\u8f6c 180\u00b0 \uff0c\u5728\u786e\u4fdd\u4efb\u4f55\u4e24\u4e2a\u68cb\u5b50\u90fd\u4e0d\u80fd\u4e92\u76f8\u5230\u8fbe\u7684\u60c5\u51b5\u4e0b\uff0c\u6c42\u6700\u591a\u53ef\u4ee5\u653e\u7f6e\u591a\u5c11\u4e2a\u8c61\u3002\n### \u6ce8\u610f\n\u8fd9\u91cc\u6240\u8bf4\u7684\u201c\u4e0d\u80fd\u4e92\u76f8\u5230\u8fbe\u201d\u6307\u7684\u662f\u5728\u4e00\u4e2a\u68cb\u5b50\u4e0d\u52a8\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u5426\u5230\u8fbe\u53e6\u4e00\u4e2a\u68cb\u5b50\u3002\n\n\u82e5\u4e24\u68cb\u5b50\u7684\u79fb\u52a8\u8def\u7ebf\u6709\u91cd\u5408\uff0c\u4f46\u662f\u5e76\u4e0d\u4ee3\u8868\u5b83\u4eec\u80fd\u4e92\u76f8\u5230\u8fbe\u3002\uff08\u5373\u8def\u7ebf\u4e0d\u5b8c\u5168\u91cd\u5408\uff0c\u53ea\u662f\u4ea4\u53c9\uff09\n## \u89e3\u6790\n### \u6570\u636e\u7c7b\u578b\n\u5f53\u65f6\u6211\u770b\u5230\u8fd9\u9053\u9898\u4e4b\u540e\uff0c\u7b2c\u4e00\u53cd\u5e94\u662f\u4e8c\u7ef4\u6570\u7ec4\u3002\u4f46\u662f $2\\le n,m\\le1000000$ \uff0c\u6240\u4ee5\u663e\u7136\u4e8c\u7ef4\u6570\u7ec4\u662f\u5b58\u4e0d\u4e0b\u7684\u3002\u90a3\u4e48\uff0c\u5230\u5e95\u7528\u4ec0\u4e48\u5b58\u6bd4\u8f83\u5408\u9002\u5462\uff1f\u6211\u4eec\u5728\u4e0b\u9762\u7684\u5206\u6790\u4e2d\u4f1a\u8bb2\u5230\u3002\n\n\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u4f8b\u5b50\uff1a\n![\u4e00\u4e2a 7 * 10 \u7684\u68cb\u76d8](https://cdn.luogu.com.cn/upload/image_hosting/yyj5e6b5.png)\n\n\u8fd9\u662f\u4e00\u4e2a $7\\times10$ \u7684\u68cb\u76d8\uff0c\u6211\u4eec\u7528\u4e86\u7ea2\u3001\u84dd\u3001\u9ec4\u3001\u7eff\u56db\u79cd\u989c\u8272\u6807\u8bb0\u51fa\u4e86\u56fe\u4e2d\u5b58\u5728\u7684\u56db\u6761\u8def\u7ebf\u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a\u56fe\u91cc\u6700\u591a\u80fd\u653e\u7f6e $4$ \u4e2a\u68cb\u5b50\u3002\n\n\u53ef\u80fd\u5404\u4f4d\u5df2\u7ecf\u53d1\u73b0\u4e86\uff0c\u5982\u679c\u89c2\u5bdf\u8fd9\u5e45\u56fe\u7684\u6700\u540e\u4e00\u884c\uff08\u6216\u8005\u7b2c\u4e00\u884c\uff09\u7684\u8bdd\uff0c**\u8fb9\u4e0a\u7684\u989c\u8272\u6570\u91cf\u5df2\u7ecf\u8db3\u4ee5\u4ee3\u8868\u6574\u5e45\u56fe\u7684\u989c\u8272\u6570\u91cf**\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u770b\u4e00\u6761\u8fb9\u5c31\u884c\u4e86\u3002\u800c**\u90a3\u4e00\u6761\u8fb9\u7684\u989c\u8272\u6570\u91cf\u5373\u4e3a\u7b54\u6848**\u3002\u5982\u679c\u518d\u4ed4\u7ec6\u89c2\u5bdf\u7684\u8bdd\uff0c\u6211\u4eec\u8fd8\u4f1a\u53d1\u73b0\uff0c\u8fb9\u4e0a\u989c\u8272\u7684\u51fa\u73b0\u662f\u6309\u7167\u56de\u6587\u987a\u5e8f\u6392\u5217\u7684\uff08\u7ea2\uff0c\u84dd\uff0c\u9ec4\uff0c\u7eff\uff0c\u9ec4\uff0c\u84dd\uff0c\u7ea2\u2026\u2026\uff09\uff0c\u8fd9\u4e00\u70b9\u540e\u9762\u4f1a\u7528\u5230\u3002\n\n\uff08\u5173\u4e8e\u4e3a\u4ec0\u4e48\u53ea\u8981\u6570\u8fb9\u4e0a\u7684\u989c\u8272\u6570\u91cf\u5c31\u884c\uff0c\u6211\u8fd9\u91cc\u5c31\u4e0d\u8bc1\u660e\u4e86\uff0c\u5404\u4f4d\u53ef\u4ee5\u81ea\u5df1\u7406\u89e3\u4e00\u4e0b\uff09\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6700\u591a $1000000$ \u4f4d\u7684\u6570\u7ec4\u53bb\u5b58\u5176\u4e2d\u4e00\u884c\u5373\u53ef\u3002\n### \u601d\u8def\n\u6709\u4e86\u521a\u624d\u7684\u5206\u6790\uff0c\u73b0\u5728\u8fd9\u9053\u9898\u76ee\u53d8\u5f97\u5bb9\u6613\u591a\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u77e5\u9053\u8fb9\u4e0a\u7684\u70b9\u90fd\u662f\u4ec0\u4e48\u989c\u8272\u7684\u5462\uff1f\n\n~~\uff08\u7531\u4e8e\u6211\u662f\u840c\u65b0\uff0c\u8fd8\u6bd4\u8f83\u83dc\uff0c\u6240\u4ee5\u6ca1\u6709\u60f3\u5230\u4ec0\u4e48\u80fd\u4e00\u6b65\u5224\u65ad\u51fa\u6765\u7684\u65b9\u6cd5\uff09~~\n\u6211\u4eec\u4e0d\u59a8\u53ef\u4ee5**\u6a21\u62df\u68cb\u5b50\u7684\u79fb\u52a8\u8f68\u8ff9**\uff0c\u5982\u679c\u68cb\u5b50\u5230\u8fbe\u4e86\u6211\u4eec\u6307\u5b9a\u7684\u90a3\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u68cb\u5b50\u6240\u5728\u7684\u683c\u5b50\u7684\u989c\u8272\u4e86\u3002\u6bcf\u4e00\u4e2a\u68cb\u5b50\u5728\u56de\u5230\u521d\u59cb\u4f4d\u7f6e\u4e4b\u540e\uff0c\u5c31\u505c\u6b62\u6a21\u62df\u3002\u5728\u6a21\u62df\u7ed3\u675f\u4e4b\u540e\uff0c\u5c06\u8bb0\u5f55\u989c\u8272\u7684\u90a3\u4e2a\u53d8\u91cf\u52a0\u4e00\uff0c\u5373\u53ef\u4ee3\u8868\u6362\u4e86\u4e00\u79cd\u989c\u8272\u3002\n\n\u5927\u81f4\u7684\u601d\u8def\u5df2\u7ecf\u60f3\u597d\u4e86\uff0c\u7136\u540e\u5c31\u662f\u5f00\u59cb\u548c\u7ed3\u675f\u6761\u4ef6\u7684\u7ec6\u8282\u95ee\u9898\u4e86\u3002\u5728\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u6240\u6709\u68cb\u5b50\u90fd**\u6446\u653e\u5728\u6211\u4eec\u6307\u5b9a\u7684\u90a3\u4e00\u6761\u8fb9\u4e0a**\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u6bd4\u653e\u5728\u522b\u7684\u5730\u65b9\u66f4\u65b9\u4fbf\u4e00\u4e9b\u3002\u7ed3\u675f\u6761\u4ef6\u5c31\u662f\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u884c\uff08\u6216\u8005\u7b2c\u4e00\u884c\uff09\u7684\u989c\u8272\u6210\u56de\u6587\u72b6\uff0c\u6240\u4ee5**\u5f53\u6211\u4eec\u51c6\u5907\u653e\u7f6e\u68cb\u5b50\u7684\u90a3\u4e00\u683c\u5df2\u7ecf\u6709\u68cb\u5b50\u4e86\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8fd9\u4e00\u884c\u5df2\u7ecf\u90fd\u88ab\u5360\u6ee1\u4e86**\uff0c\u6570\u4e00\u4e0b\u989c\u8272\u6570\u91cf\uff0c\u8f93\u51fa\u5373\u53ef\u3002\n### \u7b97\u6cd5\n\u5728\u8fd9\u9053\u9898\u76ee\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u5728\u6a21\u62df\u68cb\u5b50\u8fd0\u52a8\u7684\u65f6\u5019\uff0c\u7528\u4e24\u4e2a\u53d8\u91cf\u4ee3\u8868\u5750\u6807\uff0c\u4e00\u683c\u4e00\u683c\u5730\u79fb\u52a8\u7684\u8bdd\uff0c\u5f88\u660e\u663e\u5728\u6570\u636e\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u4f1a Time Limit Exceeded \u7684 ~~\uff08\u6211\u7b2c\u4e00\u6b21\u63d0\u4ea4\u5c31 TLE \u4e86\uff09~~ \u6240\u4ee5\u6211\u4eec\u5728\u6a21\u62df\u7684\u65f6\u5019\uff0c\u8981\u201c\u4e00\u6b65\u5230\u8fb9\u201d\uff0c\u901a\u8fc7\u4e00\u6b21\u8ba1\u7b97\u5c31\u8ba9\u68cb\u5b50\u7684\u5750\u6807\u79fb\u52a8\u5230\u4e00\u4e2a\u4e0d\u5f97\u4e0d\u6539\u53d8\u68cb\u5b50\u8fd0\u52a8\u65b9\u5411\u7684\u5730\u65b9\u3002\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e24\u4e2a\u53d8\u91cf $dx$ \u548c $dy$\uff0c\u4ee3\u8868\u6a2a\uff08\u7eb5\uff09\u5750\u6807\u7684\u79fb\u52a8\u65b9\u5411\u3002\u5982\u679c\u53d8\u91cf\u4e3a $1$ \uff0c\u5219\u4e0b\u4e00\u6b65\u68cb\u5b50\u5728\u6a2a\uff08\u7eb5\uff09\u5750\u6807\u4e0a\u5c31\u5f80\u53f3\uff08\u4e0b\uff09\u65b9\u5411\u632a\u52a8\uff0c\u53cd\u4e4b\uff0c\u5373\u53d8\u91cf\u4e3a $-1$ \uff0c\u5411\u5de6\uff08\u4e0a\uff09\u65b9\u5411\u79fb\u52a8\u3002\u53e6\u5916\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u659c\u7740\u8d70\u7684\uff0c\u6240\u4ee5\u4e24\u4e2a\u5750\u6807\u53d8\u91cf $x$ , $y$ \u6539\u53d8\u7684\u6570\u5b57\u5e94\u8be5\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u8fd9\u4e2a\u6570\u5b57\u8981\u53d6\u6a2a\uff08\u7eb5\uff09\u5750\u6807\u4e0a\u79bb\u8fb9\u7f18\u7684\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u3002\uff08\u4e0d\u7136\u53e6\u5916\u4e00\u4e2a\u5750\u6807\u53ef\u80fd\u5c31\u8d8a\u754c\u4e86\uff09\n```cpp\nint nx,ny;//\u6a2a\uff08\u7eb5\uff09\u5750\u6807\u4e0a\u79bb\u8fb9\u7f18\u7684\u8ddd\u79bb\nif(dx==1)nx=m-1-x;//\u5982\u679c\u5728\u5f80\u53f3\u8d70\nelse nx=x;//\u53cd\u4e4b\uff0c\u5728\u5f80\u5de6\u8d70\nif(dy==1)ny=n-1-y;//\u5982\u679c\u5728\u5f80\u4e0b\u8d70\nelse ny=y;//\u53cd\u4e4b\uff0c\u5728\u5f80\u4e0a\u8d70\n```\n\u79fb\u52a8\u6b65\u6570\u5373\u53d6 $\\min(nx,ny)$ \u5373\u53ef\u3002\n## AC\u4ee3\u7801\n\u5982\u679c\u521a\u624d\u7684\u5206\u6790\u6709\u70b9\u201c\u7eb8\u4e0a\u8c08\u5175\u201d\u7684\u611f\u89c9\u7684\u8bdd\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u914d\u5408\u7406\u89e3\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,a[1000006],col,ans;\n// n \u548c m \u5c31\u4e0d\u591a\u8bf4\u4e86\n//\u6570\u7ec4 a \u5c31\u662f\u9009\u5b9a\u7684\u90a3\u6761\u8fb9\uff08\u8fd9\u91cc\u662f\u6700\u540e\u4e00\u884c\uff09\n// col \u4e3a color \uff0c\u5373\u4e3a\u6807\u8bb0\u7684\u989c\u8272\n// ans \u4e3a\u7b54\u6848\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=0;a[i]==0&&i<m;i++){\n    //\u5faa\u73af\uff0c\u76f4\u5230\u6570\u7ec4\u88ab\u586b\u6ee1\n\t\tcol++;//\u6362\u4e0b\u4e00\u4e2a\u989c\u8272\n\t\ta[i]=col;//\u653e\u7f6e\u68cb\u5b50\u7684\u521d\u59cb\u70b9\u6807\u8bb0\n\t\tans++;//\u7b54\u6848+1,\u56e0\u4e3a\u591a\u4e86\u4e00\u79cd\u989c\u8272\n\t\tint y=n-2,x=i,dy=-1,dx=1;\n        //dy,dx\u4e3a\u65b9\u5411\uff0cy,x\u4e3a\u5750\u6807\n        //\u56e0\u4e3a\u5728\u6700\u540e\u4e00\u884c\uff0c\u53ea\u80fd\u5f80\u4e0a\u8d70\n        //\u6240\u4ee5y=n-1-1=n-2\uff08\u4e3a\u4e86\u79bb\u5f00\u521d\u59cb\u4f4d\u7f6e\uff09\n\t\tif(x==m-1)dx=-1;\n        //\u6211\u4eec\u5047\u5b9a\u6240\u6709\u68cb\u5b50\u90fd\u5f80\u53f3\u4e0a\u65b9\u8d70\n        //\u56e0\u4e3a\u4e4b\u524d\u5b9a\u4e49\u7684\u662f dy=-1,dx=1\n        //\u4f46\u662f\u5982\u679c\u521a\u597d\u5728\u53f3\u4e0b\u89d2\u7684\u8bdd\n        //\u5c31\u53ea\u80fd\u5f80\u5de6\u4e0a\u65b9\u8d70\n\t\tx+=dx;//x\u4e5f\u79bb\u5f00\u521d\u59cb\u4f4d\u7f6e\n\t\twhile(y!=n-1||x!=i){//\u5982\u679c\u6ca1\u56de\u5230\u539f\u70b9\n\t\t\tif(x==m-1||x==0)dx=-dx;\n            //\u5982\u679c\u5230\u4e86\u6700\u5de6/\u6700\u53f3\u8fb9\n            //\u53cd\u5f39\uff08\u5de6\u53f3\u65b9\u5411\u4ea4\u6362\uff09\n\t\t\tif(y==n-1||y==0){\n            //\u5982\u679c\u5230\u4e86\u6700\u4e0a/\u6700\u4e0b\u8fb9\n\t\t\t\tdy=-dy\uff1b\n            //\u53cd\u5f39\uff08\u4e0a\u4e0b\u65b9\u5411\u4ea4\u6362\uff09\n\t\t\t\tif(y==n-1)a[x]=col;\n            //\u5982\u679c\u5728\u6700\u4e0b\u9762\u4e00\u884c\uff0c\u505a\u6807\u8bb0\n\t\t\t}\n\t\t\tint nx,ny;\n            //\u6a2a\uff08\u7eb5\uff09\u5750\u6807\u4e0a\u79bb\u8fb9\u7f18\u7684\u8ddd\u79bb\n\t\t\tif(dx==1)nx=m-1-x;\n            //\u5982\u679c\u5728\u5f80\u53f3\u8d70\n\t\t\telse nx=x;\n            //\u53cd\u4e4b\uff0c\u5728\u5f80\u5de6\u8d70\n\t\t\tif(dy==1)ny=n-1-y;\n            //\u5982\u679c\u5728\u5f80\u4e0b\u8d70\n\t\t\telse ny=y;\n            //\u53cd\u4e4b\uff0c\u5728\u5f80\u4e0a\u8d70\n\t\t\tx+=dx*min(nx,ny);\n            //\u4e3a\u4ec0\u4e48\u662f\u6700\u5c0f\u503c\u89c1\u201c\u7b97\u6cd5\u201d\u677f\u5757\n            //x\u5750\u6807\u79fb\u52a8\n\t\t\ty+=dy*min(nx,ny);\n            //y\u5750\u6807\u79fb\u52a8\n\t\t}\n\t}\n\tprintf(\"%d\",ans);\n    //\u8f93\u51fa\u7b54\u6848\n\treturn 0;\n}\n```\n\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003",
        "postTime": 1661480594,
        "uid": 768577,
        "name": "Air_Color5",
        "ccfLevel": 0,
        "title": "CF74C"
    },
    {
        "content": "# \u4e00\u9053\u5e76\u67e5\u96c6\u7684\u597d\u9898\n\n\u5982\u679c\u4e24\u4e2a\u5c0f\u7403\u53ef\u4ee5\u5230\u8fbe\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u53ef\u4ee5\u5230\u8fbe\u540c\u4e00\u4e2a\u8fb9\u754c\u3002\u6545\u4e24\u4e2a\u5c0f\u7403\u53ef\u8fbe\u7684\u8fb9\u754c\u4f4d\u7f6e\u4e0d\u540c\u7b49\u4ef7\u4e8e\u8fd9\u4e24\u4e2a\u5c0f\u7403\u4e0d\u53ef\u8fbe\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6240\u6709\u8fb9\u754c\u4f4d\u7f6e\u7684\u5173\u7cfb\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u4e0d\u540c\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\u5373\u4e3a\u6700\u591a\u53ef\u4ee5\u653e\u7f6e\u7684\u5c0f\u7403\u6570\u3002\n\n$ Code $:\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nint n,m;\nint get(int x,int y){//\u7ed9\u6bcf\u4e2a\u8fb9\u754c\u8d4b\u4e0a\u7684\u7f16\u53f7\n\tif(x==1)\t\treturn y;//\u4e0a\u8fb9\u754c\n\telse if(x==n)\treturn 2*m+n-1-y;//\u4e0b\u8fb9\u754c\n\telse if(y==1)\treturn 2*m+2*n-2-x;//\u5de6\u8fb9\u754c\n\telse if(y==m)\treturn m+x-1;//\u6709\u8fb9\u754c\n}\nint f[4000005];\nvoid init(){for(int i=1;i<=2*(n+m)-4;i++)\tf[i]=i;}//\u521d\u59cb\u5316\u5e76\u67e5\u96c6\nint find(int x){return (f[x]==x)?x:f[x]=find(f[x]);}\nvoid link(int x,int y){if(find(x)!=find(y))\tf[find(x)]=find(y);}\nsigned main(){\n\tcin>>n>>m;\n\tinit();\n\tif(n<m)\tswap(n,m);\n\tfor(int i=1;i<=n;i++){\n\t\tif(i<=m)\n\t\t\tlink(get(i,1),get(1,i)),link(get(i,m),get(1,m-i+1));\n\t\telse\n\t\t\tlink(get(i,1),get(i-m+1,m)),link(get(i,m),get(i-m+1,1));\n\t\tif(i>=n-m+1)\n\t\t\tlink(get(i,1),get(n,n-i+1)),link(get(i,m),get(n,m-n+i));\n\t\telse\n\t\t\tlink(get(i,1),get(m+i-1,m)),link(get(i,m),get(m+i-1,1));\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=2*m+2*n-4;i++)\tif(f[i]==i)\tans++;//\u6570\u8054\u901a\u5206\u91cf\u4e2a\u6570\n\tcout<<ans<<endl;\n}\n```\n",
        "postTime": 1564479263,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF74C \u3010Chessboard Billiard\u3011"
    },
    {
        "content": "\u5206\u6790**\u78b0\u5230\u5148\u524d\u505c\u6b62\u8fd0\u52a8\u7684\u5f39\u7403**\u7684\u72b6\u6001\n\n\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\u7403\u4e00\u5b9a\u662f\u6cbf\u7740\u5148\u524d\u7684\u90a3\u9897\u7403**\u56db\u4e2a\u65b9\u5411\u4e2d\u7684\u67d0\u4e00\u4e2a\u65b9\u5411\u7684\u8fd0\u52a8\u5468\u671f\u8f68\u8ff9\u4e0a**\u7684\u67d0\u4e00\u70b9\u6cbf\u7740\u8f68\u8ff9\u51fa\u53d1\u7684\uff08\u53ef\u80fd\u6709\u70b9\u7ed5\uff0c~~\u53cd\u590d\u5480\u56bc\u4e00\u4e0b~~\uff09\n\n\u5176\u5b9e\u4e5f\u5c31\u662f\u89e6\u78b0\u8fb9\u754c\u7684\u4f4d\u7f6e\u4e00\u6837\uff08\u6bd5\u7adf\u53ea\u4f1a\u4ee545\u5ea6\u53cd\u5c04\u89d2\u53cd\u5f39\uff09\n\n\u8003\u8651 _\u5e76\u67e5\u96c6_ \u8868\u793a\u8fb9\u754c\u70b9\u4e0e\u8fb9\u754c\u70b9\u7684\u96c6\u5408\u5173\u7cfb\uff0c\u5982\u679c\u4ecea\u70b9\u53cd\u5f39\u4f1a\u843d\u5230b\u70b9\uff0c\u5c31\u628aa\u3001b\u4e24\u70b9\u6240\u5728\u96c6\u5408\u5408\u5e76\uff0c\u6700\u7ec8\u7edf\u8ba1\u96c6\u5408\u6570\u91cf\u5373\u53ef\n```cpp\n#include <stdio.h>\nusing namespace std;\n#define MAX 4000005\n#define Swap(x, y) do{x ^= y; y ^= x; x ^= y;}while(0)\nint n, m, pa[MAX];\n\ninline int read()\n{\n    int x = 0, f = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9'){if(ch == '-') f = -1; ch = getchar();}\n    while('0' <= ch && ch <= '9'){x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n    return x * f;\n}\n\ninline int id(int x, int y) //\u8fb9\u754c\u6807\u53f7 \n{\n    if(x == 1) return y;\n    if(x == n) return 2 * m + n - y - 1;\n    if(y == 1) return 2 * (m + n) - x - 2;\n    if(y == m) return m + x - 1;\n}\n\ninline int Find(int x)\n{\n    int r = x;\n    while(pa[r] != r) r = pa[r];\n    while(pa[x] != r)\n    {\n        int y = pa[x];\n        pa[x] = r;\n        x = y;\n    }\n    return r;\n}\n\ninline void Merge(int a, int b)\n{\n    int ax = Find(a), bx = Find(b);\n    if(ax != bx) pa[ax] = bx;\n}\n\nint main()\n{\n    int ans = 0;\n    n = read(), m = read(); \n    for(register int i = 1;i <= 2 * (n + m) - 4;i++) pa[i] = i;\n    if(n < m) Swap(n, m);\n    for(register int i = 1;i <= n;i++)\n    {\n        if(i <= m) Merge(id(i, 1), id(1, i)), Merge(id(i, m), id(1, m - i + 1));\n        else Merge(id(i, 1), id(i - m + 1, m)), Merge(id(i, m), id(i - m + 1, 1));\n        if(i + m - 1 < n) Merge(id(i, 1), id(m + i - 1, m)), Merge(id(i, m), id(m + i - 1, 1));\n        else Merge(id(i, 1), id(n, n - i + 1)), Merge(id(i, m), id(n, m - n + i));\n    }\n    for(register int i = 1;i <= 2 * (n + m) - 4;i++)\n    {\n        if(pa[i] == i) ans++;\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1586442721,
        "uid": 140515,
        "name": "\u95f2\u9c7c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF74C \u3010Chessboard Billiard\u3011"
    }
]