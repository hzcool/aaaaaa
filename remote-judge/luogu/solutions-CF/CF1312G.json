[
    {
        "content": "\u5f88\u660e\u663e\u6309\u7167\u9898\u610f\u5efa\u51fa\u6765\u7684\u4e1c\u897f\u662f\u4e00\u9897trie\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u8bbe$f[i]$\u8868\u793a\u5230\u8fbe\u5b57\u5178\u6811\u4e0a\u7b2c$i$\u4e2a\u70b9\u6700\u5c11\u6b65\u6570\u3002\n\n\u5219\u6211\u4eec\u5982\u679c\u8bbe$delta_i$\u8868\u793a$i$\u8282\u70b9\u662f\u6811\u4e0a\u5b57\u5178\u5e8f\u7b2c$delta_i$\u5c0f\u7684\u8282\u70b9\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$f[i]=\\max\\begin{cases}f[fa]+1\\\\f[anc]-delta_{anc}+delta_i\\end{cases}$$\n\n\u4e0a\u534a\u90e8\u53ef\u4ee5\u76f4\u63a5$O(1)$\u8f6c\u79fb\uff0c\u5173\u952e\u662f\u4e0b\u534a\u90e8\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06$f[anc]-delta_{anc}$\u538b\u5230\u4e00\u4e2a\u6808\u4e2d\uff0c\u5982\u679c\u53d1\u73b0\u65b0\u5230\u8fbe\u7684\u8fd9\u4e2a\u70b9\u7684$f[x]-delta_x$\u8981\u5c0f\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u5c31\u76f4\u63a5\u5165\u6808\u3002\u7136\u540e\u8f6c\u79fb\u65f6\u5c31\u76f4\u63a5\u4f7f\u7528\u6808\u9876\u5143\u7d20\u5373\u53ef\u3002\u5f53\u79bb\u5f00\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5f39\u51fa\u5b83\u5bf9\u5e94\u7684\u5143\u7d20\uff08\u5047\u5982\u90a3\u4e2a\u6570\u8fd8\u5728\u6808\u4e2d\u7684\u8bdd\uff09\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a$delta$\u6570\u7ec4\u5b9e\u9645\u4e0a\u90fd\u4e0d\u7528\u5efa\u51fa\u6765\uff0c\u76f4\u63a5\u7528\u4e00\u4e2a\u503c$delta$\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6$O(n)$\u3002\n\n\u4ee3\u7801\uff0829\u884c\u5c0f\u6e05\u65b0\u9a6c\u8702\uff0c\u4f60\u503c\u5f97\u62e5\u6709\uff09\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,delta,q[1001000];\nstruct trie{\n\tint ch[26],f;\n\tbool fin;\n}t[1001000];\nstack<pair<int,int> >s;\nvoid dfs(int x){\n\tif(s.empty()||t[x].f-delta<s.top().second)s.push(make_pair(x,t[x].f-delta));\n\tdelta+=t[x].fin;\n\tfor(int i=0;i<26;i++){\n\t\tif(!t[x].ch[i])continue;\n\t\tt[t[x].ch[i]].f=t[x].f+1;\n\t\tif(!s.empty()&&t[t[x].ch[i]].fin)t[t[x].ch[i]].f=min(t[t[x].ch[i]].f,s.top().second+delta+1);\n\t\tdfs(t[x].ch[i]);\n\t}\n\tif(!s.empty()&&s.top().first==x)s.pop();\n}\nchar str[2];\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1,x;i<=n;i++)scanf(\"%d%s\",&x,str),t[x].ch[str[0]-'a']=i;\n\tscanf(\"%d\",&m);\n\tfor(int i=1,x;i<=m;i++)scanf(\"%d\",&q[i]),t[q[i]].fin=true;\n\tdfs(0);\n\tfor(int i=1;i<=m;i++)printf(\"%d \",t[q[i]].f);\n\treturn 0;\n} \n```\n",
        "postTime": 1595465176,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1312G \u3010Autocompletion\u3011"
    },
    {
        "content": "\u65f6\u95f4\u590d\u6742\u5ea6\u7565\u52a3\u7684\u9898\u89e3\uff08\u7528 pbds \u7684 $\\mathcal O(1)$ \u63d2\u5165\u914d\u5bf9\u5806\u5199 dijkstra \u624d\u80fd\u8fc7\u7684\u90a3\u79cdXD\uff09\n\n---\n\n## \u9898\u610f\n\n\u7ed9\u4f60\u4e00\u9897 trie \u6811\u55b5\u3002\n\ntrie \u6811\u4e0a\u6709\u82e5\u5e72\u4e2a\u5173\u952e\u4e32 $T_1, T_2, \\cdots T_k$ \u55b5\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5173\u952e\u4e32\uff0c\u4f60\u8981\u6c42\u51fa\u4ece\u7a7a\u4e32 $S$ \u5f00\u59cb\u6253\u51fa\u5b83\u82b1\u8d39\u7684\u6700\u5c0f\u65f6\u95f4\u55b5\u3002\n\n\u4f60\u6709\u4e24\u79cd\u64cd\u4f5c\uff0c\u7b2c\u4e00\u79cd\u64cd\u4f5c\u662f\u5728 $S$ \u540e\u9762\u52a0\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26\u55b5\u3002\u82b1\u8d39 $1$ \u79d2\u55b5\u3002\n\n\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u662f\u81ea\u52a8\u8865\u5168\u55b5\u3002\u53ef\u4ee5\u82b1\u8d39 $i$ \u79d2\uff0c\u628a $S$ \u53d8\u4e3a\u96c6\u5408 $\\{T_i|S\\text{ is a prefix of }T_i\\}$ \u4e2d\u7684\u5b57\u5178\u5e8f\u7b2c $i$ \u5c0f\u7684\u4e32\u55b5\u3002\n\ntrie \u6811\u5927\u5c0f\u55b5\uff1f\u53ea\u6709 $10^6$ \u54e6\u55b5\u3002\n\n## \u89e3\u6cd5\n\n\u8003\u8651\u5efa\u56fe\u6700\u77ed\u8def\u3002\u9996\u5148 trie \u6811\u4e0a\u7684\u8fb9\u8981\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u8fd9\u6837\u53ef\u4ee5\u5904\u7406\u6389\u7b2c\u4e00\u79cd\u64cd\u4f5c\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u8282\u70b9\u5230\u6bcf\u4e2a\u53ef\u4ee5\u81ea\u52a8\u8865\u5168\u5230\u7684\u8282\u70b9\u8fde\u8fb9\u5f53\u7136\u662f\u53ef\u884c\u7684\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u5141\u8bb8\u3002\u8003\u8651\u6bcf\u4e2a\u8282\u70b9\u5229\u7528\u5176\u513f\u5b50\u7684\u4fe1\u606f\uff1a\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u8003\u8651\u5efa\u7acb\u5206\u5c42\u56fe\uff0c\u628a\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u7684\u8f6c\u79fb\u5728\u4e0a\u5c42\u505a\uff0c\u7b2c\u4e00\u79cd\u64cd\u4f5c\u7684\u8f6c\u79fb\u5728\u4e0b\u5c42\u505a\u3002\u4e00\u4e2a\u4e0b\u5c42\u8282\u70b9\u53ef\u4ee5\u76f4\u63a5\u82b1\u8d39 $0$ \u4ee3\u4ef7\u8f6c\u79fb\u5230\u5bf9\u5e94\u7684\u4e0a\u5c42\u8282\u70b9\uff0c\u4e00\u4e2a\u5bf9\u5e94\u7684\u4e0b\u5c42\u8282\u70b9\u662f\u5173\u952e\u4e32\u6240\u5728\u70b9\u7684\u4e0a\u5c42\u8282\u70b9\u53ef\u4ee5\u82b1\u8d39 $1$ \u4ee3\u4ef7\u8f6c\u79fb\u5230\u5bf9\u5e94\u7684\u4e0b\u5c42\u8282\u70b9\u3002\u8003\u8651\u4e00\u4e2a\u975e\u53f6\u5b50\u975e\u5173\u952e\u8282\u70b9\uff0c\u5176\u8d70\u5230\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u513f\u5b50\u4e0d\u9700\u8981\u82b1\u8d39\u4ee3\u4ef7\uff0c\u8d70\u5230\u5b57\u5178\u5e8f\u7b2c\u4e8c\u5c0f\u7684\u513f\u5b50\u9700\u8981\u82b1\u8d39\u7b49\u540c\u4e8e\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u513f\u5b50\u7684\u5b50\u6811\u4e2d\u7684\u5173\u952e\u4e32\u6570\u91cf\u7684\u4ee3\u4ef7\uff08\u81ea\u52a8\u8865\u5168\u65f6\uff0c\u8fd9\u4e9b\u4e32\u4f1a\u5728\u5b57\u5178\u5e8f\u7b2c\u4e8c\u5c0f\u7684\u513f\u5b50\u7684\u4e32\u7684\u524d\u9762\uff0c\u6545\u9700\u8981\u82b1\u8d39\u989d\u5916\u7684\u65f6\u95f4\uff09\u3002\u975e\u53f6\u5b50\u5173\u952e\u8282\u70b9\u53ea\u9700\u8981\u8ba9\u8fd9\u4e9b\u8f6c\u79fb\u8fb9\u7684\u4ee3\u4ef7\u90fd $+1$ \u5c31\u597d\u4e86\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n\u4f7f\u7528\u914d\u5bf9\u5806\u4f18\u5316 dijkstra \u6c42\u51fa\u6700\u77ed\u8def\uff0c\u603b\u590d\u6742\u5ea6 $\\mathcal O(n\\log n + m)$\u3002\n\n```cpp\n#pr\\\nagma optimize(\"Ofast\")\n\n#include<bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/priority_queue.hpp>\n#define f(i,x,y) for(int i=x, i##end=y; i<=i##end; ++i)\n#define d(i,x,y) for(int i=y, i##end=x; i>=i##end; --i)\n#define uf(i,x,y) for(int i=x, i##end=y; i<i##end; ++i)\n#define ll long long\n#define pir pair<int, int>\n#define fir first\n#define sec second\n#define mp make_pair\n#define pb push_back \nchar ch;\nint rd() {\n\tint f=1, x=0; ch=getchar();\n\twhile(!isdigit(ch)) { f=((ch=='-')?-1:f); ch=getchar(); }\n\twhile(isdigit(ch)) { x=x*10+ch-'0'; ch=getchar(); }\n\treturn x*f;\n}\nvoid rd(int& x) { x=rd(); }\nusing namespace std;\nconst int _ = 2e6 + 5;\nint tr[_][26], sz[_], n, k, inq[_], dis[_], q[_];\nvector< pair<int, int > > edge[_];\nvoid insert(int p, char ch, int id) {\n\ttr[p][ch - 'a'] = id;\n}\nvoid addedge(int u, int v, int w) {\n\t// cerr << \"add : \" << u << \" -> \" << v << \" \" << w << endl;\n\tedge[u].pb(mp(v, w));\n}\nvoid dfs(int u) {\n\tif(inq[u]) ++sz[u], addedge(u+n+1, u, 1);\n\tf(i,'a','z') {\n\t\tif(tr[u][i - 'a']) {\n\t\t\tdfs(tr[u][i - 'a']);\n\t\t\taddedge(u+n+1, tr[u][i - 'a']+n+1, sz[u]);\n\t\t\tsz[u] += sz[tr[u][i - 'a']];\n\t\t}\n\t}\n}\n__gnu_pbds::priority_queue< pir , greater< pir > , __gnu_pbds::pairing_heap_tag > Q;\nvoid dijkstra(int u) {\n\tmemset(dis, 0x3f, sizeof(dis)); dis[u] = 0; Q.push(mp(-dis[u], u));\n\twhile(Q.size()) {\n\t\tint u = Q.top().sec; Q.pop();\n\t\t// cerr << \"at \" << u << endl;\n\t\tfor(auto [v, w] : edge[u]) {\n\t\t\tif(dis[v] > dis[u]+w) {\n\t\t\t\tQ.push(mp(-dis[v], v));\n\t\t\t\tdis[v] = dis[u] + w;\n\t\t\t}\n\t\t}\n\t}\n}\nint main() {\n\tios :: sync_with_stdio(false);\n\tcin.tie(0); cout.tie(0);\n\trd(n); f(i,1,n) {\n\t\tint p = rd(); char c = 0; while(!(c >= 'a' && c <= 'z')) c=getchar();\n\t\t// cerr << p << ' ' << ch << endl;\n\t\tinsert(p, c, i);\n\t\taddedge(p, i, 1);\n\t\taddedge(i, i+n+1, 0);\n\t}\n\taddedge(0, n+1, 0);\n\trd(k); f(i,1,k) {\n\t\trd(q[i]); inq[q[i]] = 1;\n\t}\n\tdfs(0);\n\tdijkstra(0);\n\tf(i,1,k) cout << dis[q[i]] << \" \\n\"[i == k];\n\treturn 0;\n}\n```",
        "postTime": 1674982754,
        "uid": 133345,
        "name": "lightup37",
        "ccfLevel": 6,
        "title": "CF1312G \u9898\u89e3"
    },
    {
        "content": "\u5de8\u4f6c\u8bb2\u8bfe\u7528\u7684\u9898\u76ee qwq\u3002\n\n\u5f88\u660e\u663e\u6211\u4eec\u53ef\u4ee5\u5148\u628a Trie \u6811\u5efa\u51fa\u6765\uff0c\u76f4\u63a5\u8003\u8651 DP \u3002\u4e00\u4e2a\u5b50\u8282\u70b9 $x$ \u5728\u5176\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u5b57\u5178\u5e8f\u6392\u540d\u4e3a $dfn_x-dfn_u+1$\uff0c\u4e8e\u662f\uff0c\u6211\u4eec\u8bbe $f_x$ \u4e3a\u6253\u51fa\u7b2c $x$ \u4e2a\u4e32\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u5f88\u5bb9\u6613\u5f97\u5230\u4e0b\u9762\u8fd9\u4e2a\u8f6c\u79fb\uff1a\n\n$f_x=min\\{f_{fa}+1,f_u+dfn_x-dfn_u+1\\}$\uff0c\u5176\u4e2d $u$ \u4e3a $x$ \u7684\u67d0\u4e2a\u7236\u8282\u70b9\n\n\u8003\u8651\u4f18\u5316\uff0c\u6211\u4eec\u628a $f_u+dfn_x-dfn_u+1$ \u62c6\u6210\u53ea\u5173\u4e8e $x$ \u7684 $dfn_x$ \u548c\u53ea\u5173\u4e8e $u$ \u7684 $f_u-dfn_u+1$ \u4e24\u90e8\u5206\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u4e00\u4e2a $g_x$ \u6765\u7ef4\u62a4\u53ea\u5173\u4e8e $u$ \u7684\u90e8\u5206\u7684\u6700\u5c0f\u503c\u5373\u53ef\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0 $O(1)$ \u8f6c\u79fb\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n\u4ee3\u7801\u4e5f\u5f88\u6e05\u6670\u660e\u4e86\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int N=1e6+10;\ntemplate <class T>\ninline void read(T &x)\n{\n\tx=0;int f=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=1;ch=getchar();};\n    while(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    if(f)x=~x+1;\n}\ntemplate<class T,class ...T1>\ninline void read(T &x,T1 &...x1)\n{\n    read(x);\n    read(x1...);\n}\n\nint n,k;\nint ch[N][26],a[N],v[N];\nint cnt,dfn[N],f[N],g[N];\nvoid dfs(int x)\n{\n\tif(v[x])\n\t\tdfn[x]=++cnt;\n\tfor(int i=0;i<26;i++)\n\t\tif(ch[x][i])\n\t\t{\n\t\t\tdfs(ch[x][i]);\n\t\t\tdfn[x]=min(dfn[x],dfn[ch[x][i]]);//\u6ce8\u610f\u5bf9dfn[x]\u7684\u5904\u7406\n\t\t}\n}\nvoid dp(int x)\n{\n\tfor(int i=0;i<26;i++)\n\t{\n\t\tint ver=ch[x][i];\n\t\tif(!ver)continue;\n\t\tif(v[ver])\n\t\t\tf[ver]=min(f[x]+1,dfn[ver]+g[x]);\n\t\telse f[ver]=f[x]+1;\n\t\tg[ver]=min(g[x],f[ver]-dfn[ver]+1);\n\t\tdp(ver);\n\t}\n}\nint main()\n{\n\t\n\tread(n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x;\n\t\tchar s[10];\n\t\tread(x);\n\t\tscanf(\"%s\",s);\n\t\tch[x][s[0]-'a']=i;\n\t}\n\tread(k);\n\tfor(int i=1;i<=k;i++)\n\t\tread(a[i]),v[a[i]]=1;\n\tmemset(dfn,0x3f,sizeof(dfn));\n\tmemset(f,0x3f,sizeof(f));\n\tmemset(g,0x3f,sizeof(g));\n\tdfs(0);\n\tf[0]=g[0]=0;\n\tdp(0);\n\tfor(int i=1;i<=k;i++)\n\t\tprintf(\"%d \",f[a[i]]);\n\treturn 0;\n}\n```",
        "postTime": 1657891317,
        "uid": 109659,
        "name": "KevinLive",
        "ccfLevel": 0,
        "title": "CF1312G Autocompletion"
    },
    {
        "content": "\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u9898\u76ee\u7ed9\u7684\u6240\u6709\u5b57\u7b26\u5efa\u4e00\u4e2a Trie\u3002\n\n\u6211\u4eec\u8003\u8651\u5728\u8fd9\u4e2a Trie \u4e0a\u8fdb\u884c dp\u3002\n\n\u8bbe $ans_i$ \u8868\u793a\u6253\u51fa Trie \u4e0a\u7684 $i$ \u53f7\u7ed3\u70b9\u5230\u6839\u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32\u6240\u9700\u7684\u6700\u5c11\u65f6\u95f4\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u76f4\u63a5\u63a5\u4e0a\u4e00\u4e2a\u5b57\u7b26\u7684\u9012\u63a8\u5f0f\u662f $ans_v = \\min\\limits_{u \\in son(v)}\\{ans_u + 1\\}$\n\n\u4f46\u662f\u6211\u4eec\u8981\u8003\u8651\u201c\u81ea\u52a8\u8865\u5168\u201d\u7684\u64cd\u4f5c\u3002\n\n\u5728 Trie \u6811\u4e0a dp \u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u503c\uff0c\u8868\u793a\u6700\u5c0f\u7684\u901a\u8fc7\u81ea\u52a8\u8865\u5168\u7528\u7684\u65f6\u95f4\u3002\n\n\u9012\u63a8\u7684\u65f6\u5019\u6211\u4eec\u628a\u5b83\u4f20\u9012\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4f46\u8981\u52a0\u4e0a\u5176\u4ed6\u513f\u5b50\u5e26\u6765\u7684\u5728 \"List\" \u91cc\u7684\u7f16\u53f7\u53d8\u5316\u3002\n\n```cpp\nint dfs(int u, int candidates) {\n\tint rank = 0; // the rank of the word in the list\n\tif(tar[u]) {\n\t\tans[u] = std::min(ans[u], candidates);\n\t\t++rank;\n\t}\n\tfor(int i = 0; i < vec[u].size(); ++i) {\n\t\tint v = vec[u][i].nxt;\n\t\tans[v] = ans[u] + 1;\n\t\t// updateing v by using u (append a char)\n\t\trank += dfs(v, std::min(ans[v], candidates) + rank);\n\t}\n\treturn rank;\n}\n```\n\n[code](https://codeforces.ml/contest/1312/submission/73346310)\n\n```cpp\n#include <bits/stdc++.h>\n#define LL long long\n\nconst int oo = 0x3f3f3f3f;\nconst int N = 1e6 + 5;\n\nint n, m, q[N], tar[N], ans[N];\n\nstruct NODE {\n\tchar c;\n\tint nxt;\n\tbool operator<(const NODE &rhs) const {\n\t\treturn c < rhs.c;\n\t}\n\tNODE(char _c = '\\0', int _nxt = -1) {\n\t\tc = _c, nxt = _nxt;\n\t}\n};\n\nstd::vector <NODE> vec[N];\n\nint dfs(int u, int candidates) {\n\tint rank = 0; // the rank of the word in the list\n\tif(tar[u]) {\n\t\tans[u] = std::min(ans[u], candidates);\n\t\t++rank;\n\t}\n\tfor(int i = 0; i < vec[u].size(); ++i) {\n\t\tint v = vec[u][i].nxt;\n\t\tans[v] = ans[u] + 1;\n\t\t// updateing v by using u (append a char)\n\t\trank += dfs(v, std::min(ans[v], candidates) + rank);\n\t}\n\treturn rank;\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; ++i) {\n\t\tint fa; char ch[5];\n\t\tscanf(\"%d %s\", &fa, ch);\n\t\tvec[fa].push_back(NODE(ch[0], i));\n\t}\n\tfor(int i = 0; i < n; ++i) std::sort(vec[i].begin(), vec[i].end());\n\t// sorting is needed for the 'lexicographically' list\n\tscanf(\"%d\", &m);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tscanf(\"%d\", &q[i]);\n\t\ttar[ q[i] ] = 1;\n\t\t// offline all the queries\n\t}\n\tdfs(0, oo);\n\tfor(int i = 1; i <= m; ++i) printf(\"%d \", ans[ q[i] ]);\n\treturn 0;\n}\n\n```",
        "postTime": 1584364134,
        "uid": 78407,
        "name": "Clever_Jimmy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1312G \u3010Autocompletion\u3011"
    }
]