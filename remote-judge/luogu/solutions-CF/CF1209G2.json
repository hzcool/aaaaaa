[
    {
        "content": "\u8fd9\u9898\u662f\u771f\u7684????????\uff01\u662f\u5341\u5206\u6709\u8da3\u9898\u76ee\uff01\n\nxyx \u5199\u5728 CSDN \u91cc\u7684\u9898\u89e3\u662f\u4fe9 log \u7684\uff0c\u4f46\u5176\u5b9e\u53ea\u9700\u8981\u7528\u4e00\u70b9\u300c\u5154\u961f\u7ebf\u6bb5\u6811\u300d\u7684\u5c0f\u6280\u5de7\uff0c\u5c31\u53ef\u4ee5\u4f18\u5316\u5230\u4e00\u4e2a log\u3002\n\n\u5927\u6982\u9996\u5148\u662f\u8981\u5bf9\u4e0a\u9762\u90a3\u4e2a easy version \u7684\u4e00\u4e9b\u7ed3\u8bba\u8fdb\u884c\u5f62\u5f0f\u5316\u7684\u63d0\u70bc\u548c\u603b\u7ed3\u3002\u8003\u8651\u7b54\u6848\u7684\u672c\u8d28\u3002\u8003\u8651\u628a\u4e00\u4e2a\u989c\u8272 $c$ \u7684\u51fa\u73b0\u533a\u95f4\u5316\u6210\u5de6\u5f00\u53f3\u95ed\u7684\u5f62\u5f0f $[s_c,t_c)$\uff0c\u610f\u601d\u662f\u5bf9\u4e8e\u533a\u95f4\u4e2d\u7684\u6bcf\u4e2a $i$ \uff0c\u8981\u628a $i,i+1$ \u6d82\u6210\u4e00\u4e2a\u989c\u8272\u3002\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u5bf9\u6240\u6709 $c$ \u7684\u8be5\u533a\u95f4\u8fdb\u884c\u533a\u95f4 $+1$ \uff0c\u90a3\u4e48\u6700\u540e\u53ef\u4ee5\u4fdd\u7559\u7684\u989c\u8272\u6570\u5c31\u662f\u76f8\u90bb\u4e24\u4e2a $0$ \u4e4b\u95f4\u51fa\u73b0\u6700\u591a\u7684\u989c\u8272\u7684\u6570\u91cf\u548c\u3002\u6b63\u786e\u6027\u663e\u7136\u3002\u2026\u4f46\u8fd9\u4e2a\u8f6c\u5316\u786e\u5b9e\u5341\u5206\u795e\u5947\u3002\n\n\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u5feb\u901f\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u3002\u8003\u8651\u9700\u8981\u7ef4\u62a4\u4ec0\u4e48\u4fe1\u606f\uff1a\n\n1\u3001\u9700\u8981\u7ef4\u62a4\u5206\u754c\u70b9\u3002\u5373\u533a\u95f4\u4e2d\u88ab\u8986\u76d6\u6b21\u6570\u4e3a $0$ \u7684\u70b9\u3002\n\n2\u3001\u9700\u8981\u7ef4\u62a4\u989c\u8272\u6570\u3002\u5373\u533a\u95f4\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\u3002\n\n3\u3001\u4f46\u662f $2$ \u4e2d\u6709\u8981\u6c42\uff0c\u8981\u6c42\u5fc5\u987b\u662f\u8fde\u7eed\u6bb5\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\u3002\u800c\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u7684\u300c\u8fde\u7eed\u300d\u5bf9\u5e94\u4e8e\u4e00\u6bb5\u8fde\u7eed\u7684\u3001\u8986\u76d6\u6b21\u6570 $>0$ \u7684\u6bb5\u3002\n\n4\u3001\u6ce8\u610f\u5230\u8981\u7ef4\u62a4\u533a\u95f4\u4e2d\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5927\u503c\uff0c\u8fd8\u8981\u6c42\u8fde\u7eed\u4e14\u53ea\u6709\u5168\u5c40\u8be2\u95ee\u7684\u8bdd\uff0c\u6709\u4e2a\u5c0f\u6280\u5de7\u3002\u8003\u8651\u8ba9\u989c\u8272 $c$ \u7684\u51fa\u73b0\u6b21\u6570 $e(c)$ \u653e\u5230 $s_c$ \u5904\u7ef4\u62a4\uff0c\u8bb0\u4f5c $w_{s_c}$\uff0c\u8fd9\u6837\u5c31\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a $\\max \\{w_i,w_{i+1}\\}$ \u72b6\u7269\u3002\n\n\u53d1\u73b0\u96be\u4ee5\u7ef4\u62a4\u5206\u754c\u70b9\uff1f\u4f46\u662f\u8003\u8651\u5230**\u53ea\u6709\u5168\u5c40\u8be2\u95ee**\uff0c\u4e8e\u662f\u53ef\u4ee5\u501f\u9274\u5154\u961f\u7ebf\u6bb5\u6811\u91cc\u90a3\u4e2a\u7c7b\u4f3c\u7684\u601d\u60f3\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u53d1\u73b0\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\uff0c\u6709\u6548\u4fe1\u606f\u662f\u533a\u95f4 $[1,n]$ \uff0c\u800c $n$ \u8fd9\u4e2a\u70b9\u5fc5\u7136\u4e0d\u4f1a\u88ab\u4efb\u4f55\u4e00\u4e2a\u7ebf\u6bb5\u8986\u76d6\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u7edf\u8ba1\u5168\u5c40\u4fe1\u606f\uff0c\u90a3\u4e48\u5fc5\u7136\u4f1a\u5b58\u5728 $n$ \u4e3a $0$\u3002\u90a3\u4e48\u5c31\u597d\u529e\u4e86\uff0c\u8003\u8651\u7528\u7ef4\u62a4\u300c\u533a\u95f4\u6700\u5c0f\u503c\u300d\u6765\u4ee3\u66ff\u7ef4\u62a4\u300c\u533a\u95f4\u5206\u754c\u70b9\u300d\u3002\n\n\u5177\u4f53\u7ec6\u8282\u65b9\u9762\uff0c\u8003\u8651\u7ef4\u62a4\u533a\u95f4\u4e2d\u6bcf\u6bb5\u91cc\u989c\u8272\u51fa\u73b0\u6b21\u6570\u6700\u5927\u503c ${\\rm seg}_x$\uff0c\u5de6/\u53f3\u7aef\u70b9\u6240\u5728\u8fde\u7eed\u533a\u95f4\u7684\u6700\u5927\u503c $\\mathrm{lmax}_x,\\mathrm{rmax}_x$ \u3002\u8f6c\u79fb\u65f6\u8003\u8651\u4e24\u4e2a\u533a\u95f4\u7684 $\\min v$ \u7684\u5173\u7cfb\uff0c\u5176\u4e2d $v$ \u662f\u8986\u76d6\u6b21\u6570\u3002\n\n\u7136\u540e\u8003\u8651\u4fee\u6539\u64cd\u4f5c\uff0c\u53d1\u73b0\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u52a0\u518d\u52a0\u4e00\u4e2a\u5355\u70b9\u7ef4\u62a4\u3002\u6ce8\u610f\u5f53 $l=r$ \u65f6\uff0c\u6709\u4e9b\u91cf\u4e0d\u662f\u826f\u5b9a\u4e49\uff0c\u5f53\u4f5c\u4e0d\u77e5\u9053\u5c31\u597d\u4e86\uff08\u8d4b\u503c\u4e3a $0$\uff09 \u3002\n\n\u6ce8\u610f\u5230\u989c\u8272\u7684\u4fee\u6539\u53ef\u4ee5\u518d\u5355\u72ec\u62ff\u4e00\u4e2a set \u6765\u7ef4\u62a4\u3002\u6700\u7ec8\u590d\u6742\u5ea6 $O(n\\log n)$ \u3002\n\n\u7136\u540e\u5177\u4f53\u4e3a\u4ec0\u4e48\u80fd\u6bd4 xyx \u7684\u505a\u6cd5\u5c11\u6389\u4e00\u4e2a log\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u662f\u5145\u5206\u5229\u7528\u4e86\u300e\u53ea\u6709\u5168\u5c40\u8be2\u95ee\u300f\u8fd9\u4e2a\u6027\u8d28\uff0c\u5426\u5219\u662f\u4e0d\u80fd\u7528\u5154\u961f\u7ebf\u6bb5\u6811\u7684 trick \u7684\u3002\n\n```cpp\n#include <set>\n\n#include <cstdio>\n\nconst int N = 200005 ;\n\n#define _be begin\n#define _en rbegin\n\n#define era erase\n#define ins insert\n\nusing namespace std ;\n\nset <int> col[N] ;\n\nint seg[N * 3] ;\nint mnv[N * 3] ;\nint mxt[N * 3] ;\nint tag[N * 3] ;\nint lcon[N * 3] ;\nint rcon[N * 3] ;\n\n#define lc (rt << 1)\n#define rc (rt << 1 | 1)\n\ninline void _down(int rt){\n    if (tag[rt]){\n        mnv[lc] += tag[rt] ;\n        mnv[rc] += tag[rt] ;\n        tag[lc] += tag[rt] ;\n        tag[rc] += tag[rt] ;\n        tag[rt] = 0 ;\n    }\n}\ninline void _up(int rt){\n    int ls = rt << 1 ;\n    int rs = rt << 1 | 1 ;\n    mxt[rt] = max(mxt[ls], mxt[rs]) ;\n    mnv[rt] = min(mnv[ls], mnv[rs]) ;\n    if (mnv[ls] < mnv[rs]){\n        seg[rt] = seg[ls] ;\n        lcon[rt] = lcon[ls] ;\n        rcon[rt] = max(mxt[rs], rcon[ls]) ;\n        //\u6b64\u5904\u7531\u4e8e\u6700\u540e\u8981\u8986\u76d6\uff0c\u6240\u4ee5 max_Time(rc) \u672c\u8d28\u4e0a\u5c31\u662f\u5305\u542b\u53f3\u7aef\u70b9\u7684\u503c\u3002\n    }\n    else if (mnv[ls] > mnv[rs]){\n        seg[rt] = seg[rs] ;\n        rcon[rt] = rcon[rs] ;\n        lcon[rt] = max(mxt[ls], lcon[rs]) ;\n    }\n    else {\n        lcon[rt] = lcon[ls] ; rcon[rt] = rcon[rs] ;\n        seg[rt] = seg[ls] + seg[rs] + max(lcon[rs], rcon[ls]) ;\n    }\n}\nvoid upd(int rt, int l, int r, int ul, int ur, int v){\n    if (ul > ur) return ;\n    if (ul <= l && r <= ur)\n        return mnv[rt] += v, void(tag[rt] += v) ;\n    int mid = (l + r) >> 1 ; _down(rt) ;\n    if (ul <= mid) upd(lc, l, mid, ul, ur, v) ;\n    if (ur > mid)  upd(rc, mid + 1, r, ul, ur, v) ;\n    _up(rt) ;\n}\nvoid cov(int rt, int l, int r, int p, int v){\n    if (l == r)\n        return void(mxt[rt] = lcon[rt] = v) ;\n    int mid = (l + r) >> 1 ; _down(rt) ;\n    if (p <= mid) cov(lc, l, mid, p, v) ;\n    else cov(rc, mid + 1, r, p, v) ; _up(rt) ;\n}\nint n, q ;\nint base[N] ;\nvoid mdf(int c, int mk){\n    int w ;\n    if (!(w = col[c].size())) return ;\n//\tprintf(\"%d %d %d %d %d\\n\", c, mk, *col[c]._be(), *-- col[c]._en(), (int)col[c].size()) ;\n    cov(1, 1, n, *col[c]._be(), mk > 0 ? w : 0) ;\n    upd(1, 1, n, *col[c]._be(), *col[c]._en() - 1, mk) ;\n}\nint val_it(){ return n - seg[1] - lcon[1] - rcon[1] ; }\n\nint main(){\n    int x, y, z ;\n    scanf(\"%d%d\", &n, &q) ;\n    for (int i = 1 ; i <= n ; ++ i)\n        scanf(\"%d\", &base[i]), col[base[i]].ins(i) ;\n    for (int i = 1 ; i < N ; ++ i)\n        mdf(i, 1) ; printf(\"%d\\n\", val_it()) ;\n    while (q --){\n        scanf(\"%d%d\", &x, &y) ; z = base[x] ;\n        mdf(z, -1) ; col[z].era(x) ; mdf(z, 1) ;\n        mdf(y, -1) ; col[y].ins(x) ; mdf(y, 1) ;\n        printf(\"%d\\n\", val_it()) ; base[x] = y ;\n    }\n    return 0 ;\n}\n```\n\n",
        "postTime": 1592314148,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u300c\u627e\u6027\u8d28+\u7ebf\u6bb5\u6811(\u5154\u961f\u7ebf\u6bb5\u6811\u7684\u5e94\u7528)\u300d[Codeforces1209G2] Into Blocks (hard version)"
    },
    {
        "content": "# CF1209G2\n\n\u8fd9\u9898\u7684\u601d\u8def\u5f88\u795e\u5947\u3002\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5c06\u5e8f\u5217\u5206\u4e3a\u82e5\u5e72\u4e2a\u533a\u95f4\uff0c\u6ee1\u8db3\u540c\u4e00\u989c\u8272\u5728\u540c\u4e00\u5e8f\u5217\u4e2d\u3002\u6211\u4eec\u5c3d\u91cf\u8ba9\u5206\u51fa\u6765\u7684\u533a\u95f4\u6570\u6700\u591a\uff0c\u8fd9\u6837\u7b54\u6848\u6700\u5c0f\u3002\n\n\u90a3\u4e48\u7b54\u6848\u5373\u4e3a $n- \\sum_{i=1}^c max_i$ \uff0c$c$ \u4e3a\u6bb5\u6570\uff0c$max_i$ \u4e3a\u4e00\u6bb5\u4e2d\u540c\u989c\u8272\u51fa\u73b0\u6b21\u6570\u6700\u5927\u503c\u3002\uff08\u6ce8\u610f\u8fd9\u662f\u5728\u540c\u4e00\u989c\u8272\u5728\u540c\u4e00\u6bb5\u7684\u9650\u5236\u4e0b\uff09\u3002\n\n\u6211\u4eec\u8003\u8651\u600e\u6837\u8f6c\u5316\u4f7f\u5f97\u6211\u4eec\u5bf9\u4e8e\u201c\u533a\u95f4\u7684\u5212\u5206\u201d\u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u7ef4\u62a4\u5f62\u5f0f\u3002\n\n\u6ce8\u610f\u5230\u5bf9\u4e8e\u5305\u542b\u5355\u4e2a\u989c\u8272\u7684\u533a\u95f4 $[L_i,R_i]$ \uff0c\u5176\u4e2d\u7684\u989c\u8272\u4e00\u5b9a\u76f8\u7b49\uff0c\u800c\u5f62\u5f0f\u53ef\u4ee5\u662f\u6539\u53d8\u5f53\u524d\u989c\u8272\u6216\u6539\u53d8\u4e2d\u95f4\u7684\u989c\u8272\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u4e2d\u95f4\u7684\u989c\u8272\u4e00\u5b9a\u76f8\u7b49\u3002\n\n\u6700\u795e\u5947\u7684\u5730\u65b9\u6765\u4e86\uff1a\u6211\u4eec\u8003\u8651\u5c06 $[L_i,R_i]$ \u989c\u8272\u76f8\u540c\u8868\u793a\u4e3a $L_i$ \u4e0e $L_i+1$ ... $R_i-1,R_i$ \u76f8\u7b49\u7684\u5f62\u5f0f\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u5355\u4e00\u4f4d\u7f6e\u7684\u503c\u3002\n\n\u8bb0 $S_i$ \u4e3a\u6709\u591a\u5c11\u4e2a\u5305\u542b\u5355\u4e2a\u989c\u8272\u7684\u533a\u95f4\u8981\u6c42 $i$ \u4e0e $i+1$ \u989c\u8272\u76f8\u7b49\uff0c\u82e5 $S_i>0$ \u5219 $i$ \u4e0e $i+1$ \u4e0d\u80fd\u5728\u4e0d\u540c\u533a\u95f4\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u5212\u5206\u6bb5\u6570\u6700\u591a\u7684\u4e00\u5b9a\u662f\u5728\u4e24\u4e2a $S_i=0$ \u7684\u4f4d\u7f6e\u4e2d\u95f4\u5212\u5206\u4e00\u4e2a\u533a\u95f4\u3002\u73b0\u5728\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u4e1c\u897f\uff1a\n\n1.\u7ef4\u62a4\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5927\u503c\u3002\u56e0\u4e3a\u533a\u95f4\u4e00\u5b9a\u5305\u542b\u8be5\u989c\u8272\u7684\u6240\u6709\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u540c\u989c\u8272\u7684\u6b21\u6570\u653e\u5230\u4e00\u4e2a\u70b9\u4e0a\u67e5\u8be2\uff0c\u8fd9\u91cc\u6211\u4eec\u56fa\u5b9a\u5de6\u7aef\u70b9\u3002\n\n2.\u7ef4\u62a4 $S_i=0$ \u7684\u96c6\u5408\uff0c\u8981\u6c42\u540c\u65f6\u7ef4\u62a4\u5206\u5272\u51fa\u7684\u533a\u95f4\u7684\u7b54\u6848\u548c\u3002\n\n\u9996\u5148 $S_i=0$ \u7684\u96c6\u5408\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u7ef4\u62a4\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u4ec5\u9700**\u5168\u5c40\u67e5\u8be2**\uff0c\u8fd9\u610f\u5473\u7740\u533a\u95f4\u65e0\u6cd5\u88ab\u5206\u5272\u3002\u5982\u679c\u9700\u8981\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u4ec5\u9700\u5c06\u4e24\u7aef\u7684\u5269\u4f59\u533a\u95f4\u5408\u5e76\u5373\u53ef\u3002\n\n\u56e0\u4e3a $S_n=0$ ,\u6240\u4ee5\u8bf4 $0$ \u4e00\u5b9a\u4e3a\u6700\u5c0f\u503c\uff0c**\u7ef4\u62a4\u6700\u5c0f\u503c**\u5373\u53ef\u3002\n\n\u5177\u4f53\u7684\uff0c\u8003\u8651 $lm,rm$ \u4e3a\u4e0d\u5305\u542b $0$ \u7684\u5de6/\u53f3\u7aef\u70b9\u51fa\u53d1\u7684\u533a\u95f4\u7684\u6700\u5927\u503c\uff0c $z$ \u4e3a\u5df2\u786e\u5b9a\u7684\u533a\u95f4\u7684\u7b54\u6848\u548c\u3002\n\n\u8003\u8651\u5982\u4f55\u5408\u5e76\u3002\u82e5\u4e24\u533a\u95f4\u4ec5\u6709\u4e00\u4e2a\u533a\u95f4\u6709\u6700\u5c0f\u503c\uff0c\u65e0\u9700\u5408\u5e76\u533a\u95f4\uff1b\u82e5\u4e24\u533a\u95f4\u90fd\u6709\u6700\u5c0f\u503c\uff0c\u5408\u5e76\u5de6\u513f\u5b50 $rm$ \uff0c\u53f3\u513f\u5b50 $lm$ \u5373\u53ef\u3002\n\n\u66f4\u6539\u989c\u8272\u7528 $set$ \u7ef4\u62a4\u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=200022;\nint n,q,c[N],x,y;\nset<int> col[N];\nstruct ss{\n\tint z,lm,rm,mn,mx,tg;\n}t[4*N];\nvoid adtag(int k,int z) {t[k].mn+=z,t[k].tg+=z;}\nvoid p_d(int k){\n\tif(t[k].tg){\n\t\tadtag(k*2,t[k].tg),adtag(k*2+1,t[k].tg);\n\t\tt[k].tg=0;\n\t}\n}\nvoid upd(int k,int l,int r){\n\tt[k].mx=max(t[k*2].mx,t[k*2+1].mx);\n\tt[k].mn=min(t[k*2].mn,t[k*2+1].mn);\n\tif(t[k*2].mn<t[k*2+1].mn){\n\t\tt[k].z=t[k*2].z;\n\t\tt[k].lm=t[k*2].lm;\n\t\tt[k].rm=max(t[k*2+1].mx,t[k*2].rm);\n\t}\t\n\telse if(t[k*2].mn>t[k*2+1].mn){\n\t\tt[k].z=t[k*2+1].z;\n\t\tt[k].lm=max(t[k*2].mx,t[k*2+1].lm);\n\t\tt[k].rm=t[k*2+1].rm;\n\t}\n\telse{\n\t\tt[k].lm=t[k*2].lm,t[k].rm=t[k*2+1].rm;\n\t\tt[k].z=t[k*2].z+t[k*2+1].z+max(t[k*2].rm,t[k*2+1].lm);\n\t}\n}\nvoid add(int k,int l,int r,int L,int R,int z){\n\tif(L>R) return ;\n\tif(L<=l&&r<=R) {adtag(k,z); return ;}\n\tint mid=(l+r)/2;\n\tp_d(k);\n\tif(L<=mid) add(k*2,l,mid,L,R,z);\n\tif(mid<R) add(k*2+1,mid+1,r,L,R,z);\n\tupd(k,l,r); \n}\nvoid gx(int k,int l,int r,int wz,int z){\n\tif(l==r) {t[k].mx=t[k].lm=z; return ;}\n\tint mid=(l+r)/2;\n\tp_d(k);\n\tif(wz<=mid) gx(k*2,l,mid,wz,z);\n\telse gx(k*2+1,mid+1,r,wz,z);\n\tupd(k,l,r);\n}\nvoid modify(int x,int opt){\n\tint siz=(int)col[x].size();\n\tif(!siz) return ;\n\tgx(1,1,n,*col[x].begin(),(opt>0?siz:0));\n\tadd(1,1,n,*col[x].begin(),*col[x].rbegin()-1,opt);\n}\nsigned main(){\n\tios::sync_with_stdio(false);\n\tcin>>n>>q;\n\tfor(int i=1;i<=n;i++) cin>>c[i],col[c[i]].insert(i);\n\tfor(int i=1;i<N;i++) modify(i,1); \n\tcout<<n-t[1].z-t[1].lm-t[1].rm<<endl;\n\tfor(int i=1;i<=q;i++){\n\t\tcin>>x>>y;\n\t\tmodify(c[x],-1),col[c[x]].erase(col[c[x]].find(x)),modify(c[x],1);\n\t\tmodify(y,-1),col[y].insert(x),modify(y,1);\n\t\tc[x]=y;\n\t\tcout<<n-t[1].z-t[1].lm-t[1].rm<<endl;\t\t\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1663371096,
        "uid": 207241,
        "name": "MEKHANE",
        "ccfLevel": 0,
        "title": "CF1209G2 Into Blocks \u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\uff0c\u5b9a\u4e49\u4e00\u79cd\u989c\u8272 $c$\uff0c\u5728\u5e8f\u5217\u4e2d\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u5728 $l_c,r_c$\u3002\u90a3\u4e48 $[l_c,r_c]$ \u7684\u6240\u6709\u4e1c\u897f\u989c\u8272\u76f8\u540c\u3002\n\n\u56e0\u6b64\uff0c\u6240\u6709\u4ea4\u4e0d\u4e3a\u7a7a\u7684\u533a\u95f4\u53ef\u4ee5\u633c\u6210\u4e00\u4e2a\uff0c\u7136\u540e\u8fd9\u4e2a\u91cc\u9762\u90fd\u662f\u4e00\u6837\u7684\u3002\u73b0\u5728\u7684\u8bdd\u4e00\u4e2a\u5e8f\u5217\u5c31\u88ab\u5212\u5206\u6210\u4e86\u591a\u4e2a\u4e0d\u4ea4\u7684\u533a\u95f4\u3002\n\n\u6ce8\u610f\u5230\uff0c\u4e00\u4e2a\u533a\u95f4\u7684\u8d21\u732e\u4e3a\u5176\u957f\u5ea6\u51cf\u53bb\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\u7684\u6570\u91cf\u3002\u90a3\u4e48\u4e00\u4e2a\u5e8f\u5217\u7684\u8d21\u732e\u4e5f\u663e\u7136\u3002\n\n\u8003\u8651\u4fee\u6539\uff0c\u6ce8\u610f\u5230\u4e00\u4e2a\u533a\u95f4\u5185\u51fa\u73b0\u7684\u989c\u8272\u4e0d\u4f1a\u518d\u53e6\u5916\u4e00\u4e2a\u533a\u95f4\u51fa\u73b0\u3002\u6211\u4eec\u8bb0\u5f55\u4e00\u4e2a\u989c\u8272 $c$ \u51fa\u73b0\u7684\u6b21\u6570 $k_c$\uff0c\u5c06\u5176\u653e\u5728 $l_c$ \u7684\u4f4d\u7f6e\u4e0a\uff0c\u7b97\u8d21\u732e\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u7b97\u533a\u95f4\u6700\u5927\u503c\u7684\u4e1c\u897f\u3002\n\n\u6ce8\u610f\u5230 $b$ \u7684\u6700\u5c0f\u503c\u65f6\u523b\u4e3a $0$\u3002\u76f8\u5f53\u4e8e\u6211\u4eec\u6c42 $n$ \u51cf\u53bb\u6bcf\u4e24\u4e2a\u76f8\u90bb\u7684 $b_i=b_j=0$ \u95f4 $k$ \u7684\u6700\u5927\u503c\u4e4b\u548c\u3002\u8fd9\u4e2a\u4e1c\u897f\u7684\u5177\u4f53\u7ef4\u62a4\u65b9\u6cd5\u662f\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u65f6\u5019\u90fd\u7ef4\u62a4\u6700\u5c0f\u503c\u5b58\u5728\u7684\u90a3\u4e00\u8fb9\u7684\u7b54\u6848\uff08\u4e24\u8fb9\u90fd\u5b58\u5728\u5c31\u53ef\u4ee5\u5408\u5e76\u6210\u4e00\u4e2a\u533a\u95f4\u3002\u6ce8\u610f\u5230\u5982\u679c\u6700\u5c0f\u503c\u4e0d\u662f $0$ \u90a3\u4e48\u6700\u7ec8\u4e0d\u4f1a\u9020\u6210\u8d21\u732e\uff0c\u56e0\u4e3a\u6211\u4eec\u6700\u7ec8\u53ea\u9700\u8981\u67e5\u8be2\u6839\u8282\u70b9\u7684\u7b54\u6848\uff09\uff0c\u53ef\u4ee5\u770b\u4ee3\u7801\u6ce8\u91ca\u548c\u5199\u6cd5\u3002\n\n\u7136\u540e\u7ef4\u62a4 $l,c,k$ \u90fd\u662f\u8f7b\u677e\u6109\u5feb\u7684\u4e8b\u60c5\uff0c\u4fee\u6539 $k_c$ \u53ef\u4ee5\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\u3002\u5b9e\u73b0\u7ec6\u8282\u5de8\u5927\u559d\u6c34\u3002\n\n```cpp\nint cnt[200005];\nstruct SegmentTree{\n\t#define lc(x) (x<<1)\n\t#define rc(x) (lc(x)|1)\n\t#define Mm int mid=(l+r)>>1\n\t/*\n\t * \u5c06\u6bcf\u79cd\u989c\u8272 c \u7684\u6700\u5de6/\u6700\u53f3\u51fa\u73b0\u4f4d\u7f6e\u8bb0\u4e3a [lc,rc]\uff0c[lc,rc] \u8981\u88ab\u6539\u4e3a\u540c\u4e00\u989c\u8272\u3002\u6ce8\u610f\u5230\u8fd9\u4e9b\u533a\u95f4\u8981\u88ab\u5e76\u8d77\u6765\u3002\n\t * \u5b9a\u4e49 b[i] \u4e3a\u6709\u591a\u5c11\u4e2a\u533a\u95f4\u8de8\u8fc7 i~i+1 \u95f4\u7684\u7a7a\u9699\u3002\n\t * \u53c8\u5b9a\u4e49 k[lc] \u4e3a\u989c\u8272 c \u7684\u51fa\u73b0\u6b21\u6570\u3002\u8d21\u732e\u52a0\u5728 lc \u4e0a\u3002\n\t * \u7ef4\u62a4\u7684\u4e1c\u897f\u975e\u5e38\u6e05\u695a\u3002\u73b0\u5728\u8981\u6c42\u7684\u662f\uff0c\u5c06 b=0 \u7684\u4e24\u4e2a\u4e4b\u524d\u89c6\u4e3a\u4e00\u6bb5\uff0c\u6240\u6709\u6bb5\u95f4 k \u7684\u6700\u5927\u503c\u4e4b\u548c\u3002\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\n\t * \u5408\u5e76\u3002k \u662f\u4e0a\u9762\u7684 cnt\u3002\n\t * \u975e\u5e38\u7cbe\u5999\u7684\u4e00\u9053\u9898\u3002\n\t */\n\tint ret[800005];\n\tint minn[800005],tag[800005]; // \u533a\u95f4\u52a0\u51cf\u7684\u662f 'b'\uff0c\u6211\u4eec\u8981\u7ef4\u62a4\u8fd9\u4e2a b \u7684\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\tint maxn[800005],lmax[800005],rmax[800005]; // \u7ed3\u70b9\u8868\u793a\u7684\u533a\u95f4\uff0c\u5de6\u8fb9\u90a3\u4e00\u5768\u7684\u6700\u5927\u503c\uff0c\u53f3\u8fb9\u90a3\u4e00\u5768\u548c\u6700\u5927\u503c\uff0c\u7528\u4e8e\u5408\u5e76\u6bd4\u5982 --|-   -|----\uff0c---   -|- \u4e4b\u7c7b\u7684\u3002\u53ef\u4ee5\u770b\u4e0b\u9762\u7684\u5206\u8ba8\uff0c\u5176\u4e2d | \u8868\u793a\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e\u3002\n\tvoid push_down(int now)\n\t{\n\t\tif(tag[now])\n\t\t{\n\t\t\tminn[lc(now)]+=tag[now];\n\t\t\tminn[rc(now)]+=tag[now];\n\t\t\ttag[lc(now)]+=tag[now];\n\t\t\ttag[rc(now)]+=tag[now];\n\t\t\ttag[now]=0;\n\t\t}\n\t}\n\tvoid push_up(int now)\n\t{\n\t\tminn[now]=min(minn[lc(now)],minn[rc(now)]);\n\t\tmaxn[now]=max(maxn[lc(now)],maxn[rc(now)]);\n\t\tif(minn[lc(now)]<minn[rc(now)])\tlmax[now]=lmax[lc(now)],rmax[now]=max(rmax[lc(now)],maxn[rc(now)]),ret[now]=ret[lc(now)];\n\t\telse if(minn[lc(now)]>minn[rc(now)])\trmax[now]=rmax[rc(now)],lmax[now]=max(lmax[rc(now)],maxn[lc(now)]),ret[now]=ret[rc(now)];\n\t\telse\tlmax[now]=lmax[lc(now)],rmax[now]=rmax[rc(now)],ret[now]=ret[lc(now)]+ret[rc(now)]+max(rmax[lc(now)],lmax[rc(now)]);\n\t}\n\tvoid modify(int l,int r,int now,int x,int y,int val)\n\t{\n\t\tif(x>y)\treturn ;\n\t\tif(x<=l && r<=y)\n\t\t{\n\t\t\ttag[now]+=val;\n\t\t\tminn[now]+=val;\n\t\t\treturn ;\n\t\t}\n\t\tpush_down(now);\n\t\tMm;\n\t\tif(x<=mid)\tmodify(l,mid,lc(now),x,y,val);\n\t\tif(mid<y)\tmodify(mid+1,r,rc(now),x,y,val);\n\t\tpush_up(now);\n\t}\n\tvoid modify(int l,int r,int now,int x)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\tlmax[now]=cnt[x],rmax[now]=cnt[x+1],maxn[now]=max(lmax[now],rmax[now]);\n\t\t\treturn ;\n\t\t}\n\t\tMm;\n\t\tpush_down(now);\n\t\tif(x<=mid)\tmodify(l,mid,lc(now),x);\n\t\telse\tmodify(mid+1,r,rc(now),x);\n\t\tpush_up(now);\n\t}\n\tint getAns(){return ret[1];}\n\t#undef lc\n\t#undef rc\n\t#undef Mm\n}tr;\nset<int> S[200005];\nint n,q,a[200005];\nvoid inscol(int col)\n{\n\tif(S[col].empty())\treturn ;\n\tint L=*S[col].begin()+1,R=*S[col].rbegin();\n\ttr.modify(1,n+1,1,L,R,1);\n\tcnt[L]=int(S[col].size());\n\ttr.modify(1,n+1,1,L-1);\n\ttr.modify(1,n+1,1,L);\n}\nvoid delcol(int col)\n{\n\tif(S[col].empty())\treturn ;\n\tint L=*S[col].begin()+1,R=*S[col].rbegin();\n\ttr.modify(1,n+1,1,L,R,-1);\n\tcnt[L]=0;\n\ttr.modify(1,n+1,1,L-1);\n\ttr.modify(1,n+1,1,L);\n}\nvoid insnode(int i)\n{\n\tint col=a[i];\n\tdelcol(col);\n\tS[col].insert(i);\n\tinscol(col);\n}\nvoid delnode(int i)\n{\n\tint col=a[i];\n\tdelcol(col);\n\tS[col].erase(i);\n\tinscol(col);\n}\nint main(){\n\tfreopen(\"umi.in\",\"r\",stdin);\n\tfreopen(\"umi.out\",\"w\",stdout);\n\tn=read(),q=read();\n\tfor(int i=1;i<=n;++i)\ta[i]=read(),insnode(i);\n\twrite(n-tr.getAns()),puts(\"\");\n\twhile(q-->0)\n\t{\n\t\tint i=read(),x=read();\n\t\tdelnode(i),a[i]=x,insnode(i);\n\t\twrite(n-tr.getAns()),puts(\"\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1653568785,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u592a\u9633\u795e\u725b\u903c"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/mfeitveer/p/16755486.html)\n\n\u601d\u8def\u6bd4\u8f83\u56f0\u96be\u7684\u4e00\u9053\u7ebf\u6bb5\u6811\u9898\u76ee\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u6bb5\u4e00\u6bb5\u7684\u6df7\u5408\u989c\u8272\u533a\u95f4\uff0c\u6211\u4eec\u7684\u6700\u4f18\u7b56\u7565\u663e\u7136\u662f\u7559\u4e0b\u5176\u4e2d\u5143\u7d20\u6570\u91cf\u6700\u591a\u7684\u989c\u8272\u3002\n\n\u6bd4\u5982\uff1a\n\n```\n12221123343\n```\n\n\u8fd9\u5c31\u662f\u4e24\u4e2a\u989c\u8272\u533a\u95f4\uff0c\u4e00\u4e2a\u662f $1222112$\uff0c\u53e6\u4e00\u4e2a\u662f $3343$\u3002\n\n\u5176\u4e2d\u7b2c\u4e00\u4e2a\u7559\u4e0b $2$\uff0c\u7b2c\u4e8c\u4e2a\u7559\u4e0b $3$ \u663e\u7136\u662f\u6700\u4f18\u7684\u3002\n\n\u8003\u8651\u5229\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n\u6211\u4eec\u8003\u8651\u5c06\u6bcf\u4e2a\u5143\u7d20\u7ef4\u62a4 $s_i,t_i$ \u5206\u522b\u4e3a\u5143\u7d20\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u672b\u5c3e\u4f4d\u7f6e\u3002\n\n\u53ef\u4ee5\u5229\u7528 $\\text{set}$ \u6765\u7ef4\u62a4\u3002\n\n\u7ef4\u62a4\u4e00\u4e2a $b$ \u6570\u7ec4\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u989c\u8272\uff0c\u5c31\u5728 $b$ \u6570\u7ec4\u4e0a\u5bf9\u4e8e $[s_i,t_i)$ \u8303\u56f4\u5185\u5168\u90e8\u52a0 $1$\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c$b$ \u6570\u7ec4\u5185\u4e3a\u96f6\u7684\u6bcf\u4e00\u4f4d\u90fd\u662f\u4e00\u4e2a\u6df7\u5408\u989c\u8272\u533a\u95f4\u7684\u672b\u5c3e\u3002\n\n\u90a3\u4e48\u6211\u4eec\u540c\u65f6\u4e5f\u53ef\u4ee5\u5728\u6bcf\u4e00\u4e2a\u989c\u8272\u7684\u8d77\u59cb\u4f4d\u7f6e\u4e0a\u5b58\u653e\u8fd9\u4e2a\u989c\u8272\u7684\u5143\u7d20\u4e2a\u6570\u3002\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u7ef4\u62a4\u8fd9\u91cc\u9762\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u3002\n\n\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\n\n\u8bb2\u4e00\u4e0b\u5b9e\u73b0\u7ec6\u8282\u3002\n\n\u7ef4\u62a4\u4e00\u4e2a $ls,rs,sum,maxx,minn$\u3002\n\n$ls$ \u7ef4\u62a4\u7684\u662f\u9760\u5de6\u7684\u6700\u5927\u503c\u3002\n\n$rs$ \u7ef4\u62a4\u7684\u662f\u9760\u53f3\u7684\u6700\u5927\u503c\u3002\n\n$sum$ \u7ef4\u62a4\u7684\u662f\u6700\u5927\u503c\u4e4b\u548c\u3002\n\n$maxx$ \u7ef4\u62a4\u7684\u662f\u6574\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u4e4b\u548c\u3002\n\n$minn$ \u7ef4\u62a4\u7684\u662f\u8fd9\u4e2a\u533a\u95f4\u91cc\u9762 $b$ \u6570\u7ec4\u7684\u6700\u5c0f\u503c\u3002\n\n\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u91cc\u9762 $b$ \u6570\u7ec4\u6ca1\u6709\u96f6\uff0c\u90a3\u4e48\u5c31\u968f\u4fbf\u4e0a\u4f20\u6570\u636e\u3002\n\n\u968f\u610f\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6709\u96f6\u7684\u533a\u95f4\u6765\u8ba8\u8bba\u3002\n\n1. \u5982\u679c $minn_l < minn_r$ \u4e5f\u5c31\u662f\u96f6\u5728\u5de6\u8fb9\u3002\n\n\t\u90a3\u4e48\uff0c\u8fd9\u4e2a\u533a\u95f4\u9760\u53f3\u7684\u6700\u5927\u503c\u662f\u53f3\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u5de6\u533a\u95f4\u9760\u53f3\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\uff0c\u6700\u5927\u503c\u4e4b\u548c\u5c31\u662f\u5de6\u533a\u95f4\u7684\u6700\u5927\u503c\u4e4b\u548c\u3002\n\n2. \u5982\u679c $minn_l > minn_r$ \u4e5f\u5c31\u662f\u96f6\u5728\u53f3\u8fb9\u3002\n\n\t\u90a3\u4e48\uff0c\u8fd9\u4e2a\u533a\u95f4\u9760\u5de6\u7684\u6700\u5927\u503c\u662f\u5de6\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u53f3\u533a\u95f4\u9760\u5de6\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\uff0c\u6700\u5927\u503c\u4e4b\u548c\u5c31\u662f\u53f3\u533a\u95f4\u7684\u6700\u5927\u503c\u4e4b\u548c\u3002\n\n3. \u5982\u679c $minn_l = minn_r$ \u4e5f\u5c31\u662f\u4e24\u8fb9\u90fd\u6709\u96f6\u3002\n\n\t\u90a3\u4e48\uff0c\u6700\u5927\u503c\u4e4b\u548c\u5c31\u662f\u53f3\u533a\u95f4\u7684\u6700\u5927\u503c\u4e4b\u548c\u548c\u5de6\u533a\u95f4\u7684\u6700\u5927\u503c\u4e4b\u548c\u548c\u5de6\u533a\u95f4\u9760\u53f3\u7684\u6700\u5927\u503c\u4e0e\u53f3\u533a\u95f4\u9760\u5de6\u7684\u6700\u5927\u503c\u4e2d\u7684\u6700\u5927\u503c\u4e4b\u548c\u3002\n    \n\u5176\u4ed6\u7684\u5c31\u53ef\u4ee5\u76f4\u63a5\u770b\u4ee3\u7801\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 200010;\n\nint n , m , a[N];\nset<int> q[N];\n\nstruct Tree\n{\n    int l , r;\n    int ls , rs , sum;\n    int minn , maxx , tag;\n}t[N * 4];\n\ninline int read()\n{\n    int asd = 0 , qwe = 1; char zxc;\n    while(!isdigit(zxc = getchar())) if(zxc == '-') qwe = -1;\n    while(isdigit(zxc)) asd = asd * 10 + zxc - '0' , zxc = getchar();\n    return asd * qwe;\n}\n\ninline void build(int p , int l , int r)\n{\n    t[p].l = l , t[p].r = r;\n    if(l == r) return;\n    build(p * 2 , l , (l + r) / 2);\n    build(p * 2 + 1 , (l + r) / 2 + 1 , r);\n}\n\ninline void pushDown(int p)\n{\n    t[p * 2].minn += t[p].tag;\n    t[p * 2 + 1].minn += t[p].tag;\n    t[p * 2].tag += t[p].tag;\n    t[p * 2 + 1].tag += t[p].tag;\n    t[p].tag = 0;\n}\n\ninline void pushUp(int p)\n{\n    int l = p * 2 , r = p * 2 + 1;\n    t[p].minn = min(t[l].minn , t[r].minn);\n    t[p].maxx = max(t[l].maxx , t[r].maxx);\n    if(t[l].minn < t[r].minn)\n    {\n        t[p].ls = t[l].ls;\n        t[p].sum = t[l].sum;\n        t[p].rs = max(t[l].rs , t[r].maxx);\n    }\n    if(t[l].minn > t[r].minn)\n    {\n        t[p].rs = t[r].rs;\n        t[p].sum = t[r].sum;\n        t[p].ls = max(t[r].ls , t[l].maxx);\n    }\n    if(t[l].minn == t[r].minn)\n    {\n        t[p].rs = t[r].rs;\n        t[p].ls = t[l].ls;\n        t[p].sum = t[l].sum + t[r].sum + max(t[l].rs , t[r].ls);\n    }\n}\n\ninline void update1(int p , int l , int r , int k)\n{\n    if(l > r) return;\n    if(l <= t[p].l && t[p].r <= r)\n    {\n        t[p].minn += k;\n        t[p].tag += k;\n        return;\n    }\n    pushDown(p);\n    int mid = (t[p].l + t[p].r) / 2;\n    if(l <= mid) update1(p * 2 , l , r , k);\n    if(r > mid) update1(p * 2 + 1 , l , r , k);\n    pushUp(p);\n}\n\ninline void update2(int p , int x , int k)\n{\n    if(t[p].l == t[p].r)\n    {\n        t[p].maxx += k;\n        t[p].ls += k;\n        return;\n    }\n    pushDown(p);\n    int mid = (t[p].l + t[p].r) / 2;\n    if(x <= mid) update2(p * 2 , x , k);\n    if(x > mid) update2(p * 2 + 1 , x , k);\n    pushUp(p);\n}\n\ninline void updateUsed(int col , int k)\n{\n    int siz = q[col].size();\n    if(!siz) return;\n    update1(1 , *q[col].begin() , *(--q[col].end()) - 1 , k);\n    update2(1 , *q[col].begin() , k * siz);\n}\n\ninline int ask()\n{\n    return n - t[1].sum - t[1].ls - t[1].rs;\n}\n\nint main()\n{\n    int maxA = 0;\n    n = read() , m = read();\n    for(int i = 1;i <= n;i++)\n        a[i] = read() , q[a[i]].insert(i),\n        maxA = max(maxA , a[i]);\n    build(1 , 1 , n);\n    for(int i = 1;i <= maxA;i++)\n        if(!q[i].empty())\n            updateUsed(i , 1);\n    printf(\"%d\\n\" , ask());\n    for(int i = 1;i <= m;i++)\n    {\n        int x = read() , y = read();\n        int col = a[x];\n        updateUsed(col , -1) , q[col].erase(x);\n        updateUsed(col ,  1) , updateUsed(y , -1);\n        q[y].insert(x) , updateUsed(y ,  1) , a[x] = y;\n        printf(\"%d\\n\" , ask());\n    }\n    return 0;\n}\n```",
        "postTime": 1664949546,
        "uid": 320933,
        "name": "Mfeitveer",
        "ccfLevel": 0,
        "title": "CF1209G2 Into Blocks (hard version) \u9898\u89e3"
    }
]