[
    {
        "content": "\u633a\u6709\u610f\u601d\u7684dinic\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\n\n---\n\n### \u9898\u89e3\uff1a\n\n\u9996\u5148\u89c2\u5bdf\u6027\u8d28\uff0c$a_i\\ge 2$\uff0c\u6240\u4ee5\u4e24\u6570\u76f8\u52a0\u7684\u8d28\u6570\u4e0d\u5305\u62ec\u6570\u5b572\u8fd9\u4e2a\u4f8b\u5916\uff0c\u56e0\u6b64\u4e00\u5b9a\u90fd\u662f\u8981\u7528\u4e00\u5947\u4e00\u5076\u7ec4\u5408\u6210\u7684\n\n\u56e0\u6b64\u9898\u76ee\u8ba9\u6211\u4eec\u641e\u7684\u73af\u4e00\u5b9a\u662f\u5076\u73af\uff0c\u4e14\u73af\u5185\u5947\u6570\u4e0e\u5076\u6570\u4e2a\u6570\u76f8\u7b49\n\n\u5957\u8def\u5730\uff0c\u628a\u5947\u6570\u548c\u5076\u6570\u5206\u6210\u4e8c\u5206\u56fe\u7684\u5de6\u53f3\u90e8\uff0c\u66b4\u529b\u679a\u4e3e\uff0c\u6839\u636e\u548c\u662f\u5426\u4e3a\u8d28\u6570\u6765\u8fde\u5bb9\u91cf1\u7684\u8fb9\n\n\u7531\u4e8e\u662f\u73af\uff0c\u90a3\u4e48\u4e00\u4e2a\u6570\u80af\u5b9a\u8981\u6b63\u597d\u5339\u914d\u4e24\u4e2a\uff0c\u6240\u4ee5\u5de6\u53f3\u90e8\u5411\u4e24\u4e2a\u8d85\u7ea7\u70b9\u90fd\u8981\u8fde\u5bb9\u91cf\u4e3a2\u7684\u8fb9\n\n\u5047\u5982\u90fd\u80fd\u5339\u914d\u6210\u73af\uff0c\u90a3\u4e48\u6700\u5927\u6d41\u80af\u5b9a\u662f\u5de6\u90e8\u56fe\u7684\u5927\u5c0f\u4e582\uff08\u5373\u5bb9\u91cf\uff09\uff0c\u53c8\u56e0\u4e3a\u5947\u6570\u4e0e\u5076\u6570\u8981\u6ee1\u8db3\u6570\u91cf\u76f8\u540c\uff0c\u6240\u4ee5\u5de6\u90e8\u56fe\u7684\u5927\u5c0f\u5c31\u662f$\\frac{n}{2}$\uff0c\u6240\u4ee5\u6700\u5927\u6d41\u9700\u8981\u6ee1\u8db3\u7b49\u4e8e$n$\n\n\u5224\u5b9a\u5b8c\u540e\uff0c\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u8dd1dfs\u5c31\u53ef\u4ee5\u5f97\u5230\u5177\u4f53\u7684\u5339\u914d\u60c5\u51b5\u4e86\n\n---\n\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class t> inline t read(t &x){\n    char c=getchar();bool f=0;x=0;\n    while(!isdigit(c)) f|=c=='-',c=getchar();\n    while(isdigit(c)) x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    if(f) x=-x;return x;\n}\ntemplate<class t> inline void write(t x){\n    if(x<0) putchar('-'),write(-x);\n    else{if(x>9) write(x/10);putchar('0'+x%10);}\n}\n\nconst int N=205,M=3e5+5;\nint en=1,h[N],cur[N],d[N],n,m,a[N];\nvector<vector<int> > ans;\nvector<int> vec,odd,even;\nbool v[N];\n\nstruct edge{\n\tint n,v,w;\n}e[M<<1];\n\nvoid add(int x,int y,int z){\n\te[++en]=(edge){h[x],y,z};\n\th[x]=en;\n}\n\nbool bfs(int s,int aim){\n\tmemset(d,0,sizeof d);\n\tmemcpy(cur,h,sizeof cur);\n\tqueue<int> q;\n\tq.push(s);\n\td[s]=1;\n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=h[x];i;i=e[i].n){\n\t\t\tint y=e[i].v;\n\t\t\tif(!d[y]&&e[i].w){\n\t\t\t\td[y]=d[x]+1;\n\t\t\t\tif(y==aim) return 1;\n\t\t\t\tq.push(y);\n\t\t\t}\n\t\t}\n\t} \n\treturn 0;\n}\n\nint dfs(int x,int flow,int aim){\n\tif(x==aim) return flow;\n\tint rest=flow;\n\tfor(int &i=cur[x];i&&rest;i=e[i].n){\n\t\tint y=e[i].v;\n\t\tif(d[y]==d[x]+1&&e[i].w){\n\t\t\tint tp=dfs(y,min(rest,e[i].w),aim);\n\t\t\trest-=tp;\n\t\t\te[i].w-=tp;\n\t\t\te[i^1].w+=tp;\n\t\t}\n\t}\n\treturn flow-rest;\n}\n\nint dinic(int s,int t){\n\tint res=0;\n\twhile(bfs(s,t)) res+=dfs(s,INT_MAX,t);\n\treturn res;\n}\n\nvoid exadd(int x,int y,int f){\n\tadd(x,y,f);\n\tadd(y,x,0);\n}\n//\u4ee5\u4e0a\u4e3a\u6a21\u677f\nbool isprime(int x){ //\u66b4\u529b\u5224\u8d28\u6570\n\tfor(int i=2;i*i<=x;i++) if(x%i==0) return 0;\n\treturn 1;\n}\n\nvoid go(int x){\n\tv[x]=1;\n\tvec.push_back(x); //\u52a0\u5165\u5f53\u524d\u7684\u73af\n\tfor(int i=h[x];i;i=e[i].n){\n\t\tint y=e[i].v;\n\t\tif(v[y]) continue;\n\t\tif(!e[i^(a[x]&1)].w) continue; //\u5de6\u90e8\u70b9\u5411\u53f3\u8981\u770b\u76f8\u53cd\u8fb9\uff0c\u53f3\u90e8\u70b9\u5411\u5de6\u5219\u770b\u5f53\u524d\u8fb9\uff08\u8fd9\u53e5\u8bdd\u770b\u4e0d\u61c2\u53ef\u4ee5\u753b\u4e2a\u4e8c\u5206\u56fe\u7422\u78e8\u4e0b\uff09\n\t\tgo(y);\n\t\tbreak;\n\t}\n}\n\nsigned main(){\n\tread(n);\n\tfor(int i=1;i<=n;i++){\n\t\tread(a[i]);\n\t\tif(a[i]&1) odd.push_back(i),exadd(0,i,2);\n\t\telse even.push_back(i),exadd(i,n+1,2);\n\t}\n\tif(odd.size()!=even.size()){ //\u6839\u636e\u6027\u8d28\uff0c\u5947\u6570\u4e0e\u5076\u6570\u4e2a\u6570\u8981\u76f8\u7b49\n\t\tputs(\"Impossible\");\n\t\treturn 0;\n\t}\n\tfor(int x:odd) for(int y:even) if(isprime(a[x]+a[y])) exadd(x,y,1); //\u66b4\u529b\u679a\u4e3e\u5de6\u53f3\u90e8\u70b9\u770b\u770b\u80fd\u5426\u8fde\u8fb9\n\tif(dinic(0,n+1)!=n){ //n\u5728\u8fd9\u91cc\u8868\u793a\u5947\u6570\u70b9\u4e2a\u6570(n/2)\u4e582\n\t\tputs(\"Impossible\");\n\t\treturn 0;\n\t}\n\tv[0]=v[n+1]=1; //\u8d85\u7ea7\u70b9\u4e0d\u80fd\u8d70\n\tfor(int x:odd) if(!v[x]){ //\u679a\u4e3e\u5947\u6570\u70b9\n\t\tvec.clear();\n\t\tgo(x); //\u4ece\u5947\u6570\u70b9\u51fa\u53d1\u904d\u5386\u6b8b\u91cf\u7f51\u7edc\n\t\tans.push_back(vec);\n\t}\n\twrite(ans.size());puts(\"\"); //\u8f93\u51fa\n\tfor(auto a:ans){\n\t\twrite(a.size());putchar(' ');\n\t\tfor(int x:a) write(x),putchar(' ');puts(\"\");\n\t}\n}\n```",
        "postTime": 1590409217,
        "uid": 65735,
        "name": "yuzhechuan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF510E \u3010Fox And Dinner\u3011"
    },
    {
        "content": "$a_i\\geq2$\uff0c\u548c\u662f\u8d28\u6570\uff0c\u90a3\u4e48\u4ec5\u5f53\u4e00\u5947\u4e00\u5076\uff0c\u663e\u7136\u7684\u4e8c\u5206\u56fe\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u5408\u6cd5\u7684\u5750\u684c\u5b50\u65b9\u6848\u3002\u663e\u7136\u73af\u7684\u5927\u5c0f\u662f\u5076\u6570\uff0c\u53c8\u8981 $\\geq3$\uff0c\u90a3\u4e48 $\\geq4$\u3002\u90a3\u4e48\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u51fa\u5ea6\u90fd\u4e3a $1$\uff0c\u5e76\u4e14\u5165\u51fa\u4e0d\u76f8\u7b49\u3002\u8fd9\u4e2a\u5728\u4e8c\u5206\u56fe\u4e0a\u5c31\u5f88\u597d\u5efa\u4e86\uff0c\u7b49\u4ef7\u4e8e\u6bcf\u4e2a\u5de6\u90e8\u70b9\u90fd\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u51fa\u70b9\uff0c\u6bcf\u4e2a\u53f3\u90e8\u70b9\u90fd\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u5165\u70b9\u3002\u90a3\u5c31\u8fde\u8fb9\uff0c\u7136\u540e\u6e90\u6c47\u76f8\u8fde\u7684\u8fb9\u7684\u5bb9\u91cf\u662f $2$\uff0c\u4e2d\u95f4\u662f $1$\u3002\u8dd1\u6700\u5927\u6d41\uff0c\u770b\u662f\u5426\u6ee1\u6d41\u3002\n\n\u65b9\u6848\u968f\u4fbf\u6784\u9020\u3002",
        "postTime": 1610457785,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF510E \u3010Fox And Dinner\u3011"
    },
    {
        "content": "\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u89e3\u51b3\u8fd9\u4e2a\u9898\u3002\n\n\u6ce8\u610f\u5230$a_i \\geqslant 2$\uff0c\u6240\u4ee5\u5f53\u76f8\u90bb\u6570\u5b57\u8981\u548c\u4e3a\u8d28\u6570\u65f6\uff0c\u8fd9\u4e24\u4e2a\u6570\u8981\u4e00\u4e2a\u4e3a\u5947\u6570\uff0c\u4e00\u4e2a\u4e3a\u5076\u6570\u3002\n\n\u6240\u4ee5\u5c31\u5148\u5c06\u6240\u6709\u6570\u6309\u5947\u5076\u5206\u4e3a\u4e24\u5217\uff0c\u5176\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u4e8c\u5206\u56fe\u4e2d\u548c\u4e3a\u8d28\u6570\u7684\u4e24\u4e2a\u6570\u95f4\u8fde\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\uff0c\u8868\u793a\u53ea\u80fd\u5339\u914d\u4e00\u6b21\u3002\n\n\u56e0\u4e3a\u662f\u5706\u684c\uff0c\u6240\u4ee5\u4e00\u4e2a\u6570\u8981\u6070\u597d\u5339\u914d\u4e24\u4e2a\u6570\uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u5728\u548c\u6e90\u6c47\u70b9\u8fde\u8fb9\u65f6\uff0c\u5bb9\u91cf\u8981\u4e3a$2$\uff0c\u540c\u65f6\u8fd9\u4e5f\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u5706\u684c\u4e2d\u81f3\u5c11\u6709$3$\u4e2a\u72d0\u72f8\u3002\n\n\u65e0\u89e3\u7684\u60c5\u51b5\u5c31\u662f\u4e8c\u5206\u56fe\u4e24\u4e2a\u90e8\u5206\u5927\u5c0f\u4e0d\u662f\u90fd\u4e3a$\\frac{n}{2}$\u6216\u6700\u5927\u6d41\u7684\u7ed3\u679c\u4e0d\u4e3a$n$\u3002\n\n\u5728\u8dd1\u5b8c\u6700\u5927\u6d41\u540e\u7684\u6b8b\u91cf\u7f51\u7edc\u4e2d\u627e\u73af\u5373\u53ef\u786e\u5b9a\u6ee1\u8db3\u8981\u6c42\u7684\u5206\u914d\u65b9\u6848\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 400010\n#define all 20000\n#define inf 1000000000\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,tot,s,t,cnt1,cnt2,ans;\nint a[maxn],p1[maxn],p2[maxn],p[maxn],cur[maxn],d[maxn];\nbool tag[maxn],vis[maxn];\nvector<int> ve[maxn];\nstruct edge\n{\n    int to,nxt,v;\n}e[maxn];\nint head[maxn],edge_cnt=1;\nvoid add(int from,int to,int val)\n{\n    e[++edge_cnt]=(edge){to,head[from],val},head[from]=edge_cnt;\n    e[++edge_cnt]=(edge){from,head[to],0},head[to]=edge_cnt;\n}\nbool bfs()\n{\n\tqueue<int> q;\n\tfor(int i=s;i<=t;++i) cur[i]=head[i],d[i]=0;\n\tq.push(s),d[s]=1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[x];i;i=e[i].nxt)\n\t\t{\n\t\t\tint y=e[i].to,v=e[i].v;\n\t\t\tif(d[y]||!v) continue;\n\t\t\td[y]=d[x]+1,q.push(y);\n\t\t}\n\t}\n\treturn d[t];\n}\nint dfs(int x,int lim)\n{\n\tif(x==t) return lim;\n\tint res=lim,flow;\n\tfor(int &i=cur[x];i;i=e[i].nxt)\n\t{\n\t\tint y=e[i].to,v=e[i].v;\n\t\tif(d[y]!=d[x]+1||!v) continue;\n\t\tif(flow=dfs(y,min(res,v)))\n\t\t{\n\t\t\tres-=flow;\n\t\t\te[i].v-=flow;\n\t\t\te[i^1].v+=flow;\n\t\t\tif(!res) break;\n\t\t}\n\t}\n\treturn lim-res;\n}\nint dinic()\n{\n    int flow,v=0;\n    while(bfs())\n        while(flow=dfs(s,inf))\n            v+=flow;\n    return v;\n}\nvoid init()\n{\n    for(int i=2;i<=all;++i)\n    {\n        if(!tag[i]) p[++tot]=i;\n        for(int j=1;j<=tot;++j)\n        {\n            int k=i*p[j];\n            if(k>all) break;\n            tag[k]=true;\n            if(i%p[j]==0) break;\n        }\n    }\n}\nvoid dfs_ans(int x,int type)\n{\n    vis[x]=true,ve[ans].push_back(x);\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(e[i^type].v||vis[y]) continue;\n        dfs_ans(y,type^1);\n    }\n}\nint main()\n{\n    init(),read(n),t=n+1;\n    for(int i=1;i<=n;++i)\n    {\n        read(a[i]);\n        if(a[i]&1) p1[++cnt1]=i;\n        else p2[++cnt2]=i;\n    }\n    if(cnt1!=cnt2)\n    {\n        puts(\"Impossible\");\n        return 0;\n    }\n    for(int i=1;i<=n/2;++i)\n        for(int j=1;j<=n/2;++j)\n            if(!tag[a[p1[i]]+a[p2[j]]])\n                add(p1[i],p2[j],1);\n    for(int i=1;i<=n/2;++i) add(s,p1[i],2);\n    for(int i=1;i<=n/2;++i) add(p2[i],t,2);\n    if(dinic()!=n)\n    {\n        puts(\"Impossible\");\n        return 0;\n    }\n    vis[s]=vis[t]=true;\n    for(int i=1;i<=n/2;++i)\n    {\n        if(vis[p1[i]]) continue;\n        ans++,dfs_ans(p1[i],0);\n    }\n    printf(\"%d\\n\",ans);\n    for(int i=1;i<=ans;++i)\n    {\n        printf(\"%d \",ve[i].size());\n        for(int j=0;j<ve[i].size();++j)\n            printf(\"%d \",ve[i][j]);\n        puts(\"\");\n    }\n    return 0;\n}\n```",
        "postTime": 1591582839,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF510E \u3010Fox And Dinner\u3011"
    },
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff1a\u7531\u4e8e$a_i \\geq 2$\uff0c\u6240\u4ee5\u8d28\u6570\u80af\u5b9a\u662f\u88ab\u62c6\u6210\u4e00\u4e2a\u5947\u6570\u548c\u4e00\u4e2a\u5076\u6570\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u5f88\u7c7b\u4f3c\u4e00\u4e2a\u4e8c\u5206\u56fe\u6a21\u578b\uff0c\u6240\u4ee5\u8003\u8651\u7f51\u7edc\u6d41\u3002\n\n\u5f53$a_i$\u662f\u5947\u6570\u65f6\u8fde\u8fb9$(S, i, 2)$\uff0c\u5f53$a_i$\u662f\u5076\u6570\u65f6\u8fde\u8fb9$(i, T, 2)$\uff0c\u8868\u793a\u4e00\u4e2a\u70b9\u7684\u90bb\u5c45\u6700\u591a\u6709\u4e24\u4e2a\u70b9\u3002\n\n\u82e5$a_i$\u662f\u5947\u6570\uff0c$a_j$\u662f\u5076\u6570\uff0c$a_i + a_j$\u662f\u8d28\u6570\uff0c\u5219\u8fde\u8fb9$(i, j, 1)$\u3002\n\n\u8dd1\u51fa\u6765\u5982\u679c\u6700\u5927\u6d41\u4e0d\u662f$n$\u5219\u4e0d\u5408\u6cd5\uff0c\u5426\u5219\u76f4\u63a5\u66b4\u529b\u627e\u73af\u5373\u53ef\u3002\n\n\u4ee3\u7801\u89c1\u6211\u7684[$\\texttt{blog}$](https://www.cnblogs.com/cj-xxz/p/11234253.html)",
        "postTime": 1563885139,
        "uid": 46800,
        "name": "xgzc",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF510E \u3010Fox And Dinner\u3011"
    },
    {
        "content": "### \u5f62\u5f0f\u5316\u9898\u610f\n\n------------\n\n\u7ed9\u4f60 $n$ \u4e2a\u6574\u6570\uff0c\u9700\u8981\u5c06\u5b83\u4eec\u5206\u6210\u4efb\u610f\u4e2a\u81f3\u5c11\u5305\u542b $3$ \u4e2a\u6570\u7684\u73af\uff0c\u4f7f\u5f97\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u548c\u662f\u8d28\u6570\u3002\n\n## \u505a\u6cd5\n\n\u6ce8\u610f\u5230 $a_i\\ge2$\uff0c\u663e\u7136\u8d28\u6570\u662f\u9700\u8981\u4e00\u5947\u4e00\u5076\u6784\u6210\uff0c\u6240\u4ee5\u53ef\u4ee5\u6309\u5947\u5076\u6784\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u90a3\u4e48\u6bcf\u4e2a\u72d0\u72f8\u5c31\u8981\u548c\u4e24\u4e2a\u72d0\u72f8\u76f8\u90bb\uff08\u5339\u914d\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u6e90\u70b9\u548c\u6240\u6709\u5947\u6570\u72d0\u72f8\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $2$ \u7684\u8fb9\uff0c\u6240\u6709\u5076\u6570\u72d0\u72f8\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $2$ \u7684\u8fb9\uff0c\u6240\u6709\u80fd\u591f\u5339\u914d\u7684\u5947\u5076\u72d0\u72f8\u95f4\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u8dd1\u6700\u5927\u6d41\uff0c\u82e5\u6ee1\u6d41\u8bf4\u660e\u6709\u89e3\u3002\n\n\u8f93\u51fa\u65b9\u6848\uff1a\u6309\u7167\u6d41\u91cf\u5728\u7f51\u7edc\u4e0a\u641c\u5373\u53ef\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN=405;\nconst int MAXM=4e4+5;\nconst int MAXK=2e4+1;\nconst int INF=100;\nstruct EDGE\n{\n    int to,nxt,flow;\n}edge[MAXM];\nvector<int>ans[MAXN];\nint head[MAXN],tot=1;\nint d[MAXN],now[MAXN],a[MAXN];\nint n,s,t,maxflow,cnt;\nbool isprime[MAXK],vis[MAXN];\nvoid add(int x,int y,int z)\n{\n    edge[++tot]=(EDGE){y,head[x],z},head[x]=tot;\n    edge[++tot]=(EDGE){x,head[y],0},head[y]=tot;\n}\nvoid init()\n{\n    memset(isprime,true,sizeof(isprime));\n    for(int i=2;i*i<MAXK;++i)\n        if(isprime[i])\n            for(int j=i*2;j<MAXK;j+=i)\n                isprime[j]=0;\n}\nbool bfs()\n{\n    queue<int>q;\n    memset(d,0,sizeof(d));\n    d[s]=1,now[s]=head[s],q.push(s);\n    while(!q.empty())\n    {\n        int x=q.front();q.pop();\n        for(int i=head[x];i;i=edge[i].nxt)\n        {\n            int y=edge[i].to,z=edge[i].flow;\n            if(d[y] || !z) continue;\n            d[y]=d[x]+1,now[y]=head[y],q.push(y);\n            if(y==t) return 1;\n        }\n    }\n    return 0;\n}\nint dinic(int x,int flow)\n{\n    if(x==t) return flow;\n    int incf=0;\n    for(int i=now[x];i;i=edge[i].nxt)\n    {\n        now[x]=i;\n        int y=edge[i].to,z=edge[i].flow;\n        if(d[y]==d[x]+1 && z)\n        {\n            int tmp=dinic(y,min(flow-incf,z));\n            if(tmp) edge[i].flow-=tmp,edge[i^1].flow+=tmp,incf+=tmp;\n            else d[y]=0;\n            if(incf==flow) return incf;\n        }\n    }\n    return incf;\n}\nvoid output(int x)\n{\n    if(vis[x]) return;\n    ans[cnt].push_back(x),vis[x]=1;\n    for(int i=head[x];i;i=edge[i].nxt)\n    {\n        int y=edge[i].to;\n        if(y<=n && !vis[y] && (((a[x]&1) && !edge[i].flow) || (!(a[x]&1) && edge[i].flow)))\n        {\n            output(y);\n            break;\n        }\n    }\n}\nint main()\n{\n    init();\n    cin>>n;\n    s=n+1,t=n+2;\n    for(int i=1;i<=n;++i) scanf(\"%d\",&a[i]);\n    int cnt1=0,cnt2=0;\n    for(int i=1;i<=n;++i)\n        if(a[i]&1) add(s,i,2),++cnt1;\n        else add(i,t,2),++cnt2;\n    if(cnt1!=cnt2)\n    {\n        printf(\"Impossible\");\n        return 0;\n    }\n    for(int i=1;i<=n;++i)\n        if(a[i]&1)\n            for(int j=1;j<=n;++j)\n                if(!(a[j]&1) && isprime[a[i]+a[j]])\n                    add(i,j,1);\n    while(bfs()) maxflow+=dinic(s,INF);\n    if(maxflow==cnt1*2)\n    {\n        for(int i=1;i<=n;++i) if(!vis[i]) ++cnt,output(i);\n        printf(\"%d\\n\",cnt);\n        for(int i=1;i<=cnt;++i)\n        {\n            printf(\"%ld\",ans[i].size());\n            for(auto x:ans[i]) printf(\" %d\",x);\n            putchar('\\n');\n        }\n    }\n    else printf(\"Impossible\");\n    return 0;\n}\n```\n",
        "postTime": 1663769344,
        "uid": 513900,
        "name": "Wilson_Lee",
        "ccfLevel": 7,
        "title": "CF510E Fox And Dinner \u9898\u89e3"
    }
]