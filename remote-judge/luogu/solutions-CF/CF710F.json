[
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF710F)\n\n\u4e0b\u6587\u4ee4 $\\text{len}=\\sum|s|$\u3002\n\n\u9996\u5148\u5728\u67e5\u8be2\u65f6\u4e00\u4e2a\u5f88\u66b4\u529b\u7684\u601d\u8def\u5c31\u662f\u679a\u4e3e\u6a21\u677f\u4e32\u7684\u6240\u6709\u5b50\u4e32\uff0c\u5e76\u7edf\u8ba1\u5728\u96c6\u5408\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7528\u54c8\u5e0c\u4f18\u5316\u3002\u590d\u6742\u5ea6 $O(\\text{len}^2)$\u3002\n\n\u800c\u4f18\u5316\u8fd9\u4e2a\u66b4\u529b\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u53ea\u679a\u4e3e\u96c6\u5408\u4e2d\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4f5c\u4e3a\u5b50\u4e32\u7684\u957f\u5ea6\u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(\\text{len}\\sqrt{\\text{len}})$\u3002\n\n\u56e0\u4e3a\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u96c6\u5408\u4e2d\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5404\u4e0d\u76f8\u540c\u3002\u5f53\u5b57\u7b26\u4e32\u6700\u591a\u65f6\uff0c\u957f\u5ea6\u4e00\u5b9a\u662f $1,2,3,...$ \u4e00\u76f4\u5230\u67d0\u4e2a\u957f\u5ea6 $t$\u3002\u800c $1+2+\\cdots+t\\leq \\text{len}$\uff0c\u6240\u4ee5 $t\\leq \\sqrt{2\\text{len}}$\uff0c\u6700\u591a\u53ea\u4f1a\u6709 $\\sqrt{2\\text{len}}$ \u4e2a\u4e0d\u540c\u7684\u957f\u5ea6\u3002\u6240\u4ee5\u590d\u6742\u5ea6\u4e3a $O(\\text{len}\\sqrt{\\text{len}})$\u3002\n\n\u6ce8\u610f\u6b64\u9898\u5361\u81ea\u7136\u6ea2\u51fa\uff0c\u4f46\u662f\u6ca1\u5361\u975e\u81ea\u7136\u6ea2\u51fa\u7684\u5355\u54c8\u5e0c\uff08\n\n[Code](https://www.luogu.com.cn/paste/138aah6y)",
        "postTime": 1634483816,
        "uid": 150843,
        "name": "\u5510\u4e00\u6587",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF710F \u3010String Set Queries\u3011"
    },
    {
        "content": "\u89e3\u6cd5\uff1a\u4e8c\u8fdb\u5236\u5206\u7ec4 + AC\u81ea\u52a8\u673a\n\n\u5565\u662f\u4e8c\u8fdb\u5236\u5206\u7ec4\uff1f\n\n\u5c31\u662f\u628a\u6240\u6709\u7684\u64cd\u4f5c\u6309\u4e8c\u8fdb\u5236\u5206\u7ec4\uff0c\u6bcf\u4e00\u7ec4\u91cc\u9762\u5c31\u5f00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\n\n\u600e\u4e48\u5206\u7ec4\u5462\uff1f\n\n\u56e0\u4e3a\u662f\u5728\u7ebf\u7b97\u6cd5\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4e1c\u897f\u6709\u70b9\u50cf\u4e00\u4e2a\u53eb2048\u7684\u6e38\u620f\u3002\n\n\u5047\u8bbe\u4e4b\u524d\u5df2\u7ecf\u5206\u597d\u4e24\u7ec4\uff0c\u6bcf\u7ec4\u7684\u5927\u5c0f\u4e3a 4\uff0c2\uff08\u5927\u5c0f\u5c31\u662f\u91cc\u9762\u5305\u542b\u4e86\u591a\u5c11\u4e2a\u64cd\u4f5c\uff09\u3002\n\n\u52a0\u4e00\u4e2a\u64cd\u4f5c\uff0c\u90a3\u4e48\u5c31\u6709\u4e09\u7ec4 4\uff0c2\uff0c1\uff1b\u5982\u679c\u518d\u52a0\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5c31\u662f 4\uff0c2\uff0c1\uff0c1\u3002\n\n\u6b64\u65f6\u6709\u4e24\u4e2a 1\uff0c\u5c31\u8981\u628a\u90a3\u4e24\u7ec4\u66b4\u529b\u91cd\u6784\uff0c\u5408\u5e76\u6210\u4e00\u7ec4\uff0c\u5f97\u5230 4\uff0c2\uff0c2\uff1b\u518d\u5408\u5e76 ...... \u6700\u7ec8\u5269\u4f59\u4e00\u7ec4\uff0c\u5927\u5c0f\u4e3a 8 \u3002\n\n\u53ef\u4ee5\u5f97\u5230\uff0c\u5982\u679c\u6709 n \u4e2a\u64cd\u4f5c\uff0c\u90a3\u4e48\u81f3\u591a\u4f1a\u5206\u4e3a $\\log n$ \u7ec4\uff0c\u56e0\u4e3a\u5b83\u5206\u5f97\u7684\u7ec4\u6570\u6070\u597d\u5c31\u662f n \u5728\u4e8c\u8fdb\u5236\u7684\u8868\u793a\u4e0b 1 \u7684\u4e2a\u6570\u3002\uff08\u4f8b\u5982\u4e0a\u9762\u7684 7 \u4e2a\u64cd\u4f5c\u88ab\u5206\u6210\u4e86 3 \u7ec4\uff09\n\n\u90a3\u4e48\u66b4\u529b\u91cd\u6784\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5462\uff1f\n\n\u8003\u8651**\u6bcf\u4e2a\u70b9**\u4f1a\u88ab\u91cd\u6784\u591a\u5c11\u6b21\uff0c\u5982\u679c\u628a\u5408\u5e76\u7684\u8fc7\u7a0b\u753b\u51fa\u6765\u7684\u8bdd\uff08\u5982\u4e0b\u56fe\uff09\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u5f88\u50cf\u662f\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u6bcf\u4e2a\u70b9\u81f3\u591a\u88ab\u91cd\u6784 $\\log n$ \u6b21\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/l242p5zc.png)\n\n\u6700\u540e\u4e58\u4e0a\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5bf9\u5e94\u7684\u590d\u6742\u5ea6\u5c31\u662f\u91cd\u6784\u7684\u590d\u6742\u5ea6\u4e86\u3002\n\n\u56de\u5230\u8fd9\u9898\uff0c\u9996\u5148\u5f97\u4f1a `AC\u81ea\u52a8\u673a` \u5e76 A \u4e86\u8fd9\u9053\u6a21\u677f\u9898\uff1a[\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u4e8c\u6b21\u52a0\u5f3a\u7248\uff09](https://www.luogu.com.cn/problem/P5357)\n\n\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u8fd9\u9898\u53cd\u800c\u7b80\u5355\u70b9\u7684\uff0c\u6a21\u677f\u9898\u662f\u6c42\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u7684\u8d21\u732e\uff0c\u8fd9\u9898\u53ea\u9700\u6c42\u6240\u6709\u6a21\u5f0f\u4e32\u7684\u603b\u8d21\u732e\u3002\n\n\u6a21\u677f\u9898\u5e76\u6ca1\u6709\u6bcf\u6b21\u66b4\u529b\u8df3 $fail$ \u8fb9\u800c\u662f\u6253\u4e86\u4e2a\u6807\u8bb0\uff0c\u90a3\u6211\u4eec\u4e5f\u65e0\u9700\u66b4\u529b\u6c42\uff0c\u50cf\u5f04\u4e2a\u524d\u7f00\u548c\u4e00\u6837\u5728\u5efa\u6811\u65f6\u6cbf\u7740 $fail$ \u8fb9\u7d2f\u52a0\u5c31\u884c\u3002\n\n\u5bf9\u4e8e\u63d2\u5165\u64cd\u4f5c\uff0c\u5bf9\u5b83\u8fdb\u884c\u4e8c\u8fdb\u5236\u5206\u7ec4\uff0c**\u6bcf\u4e2a\u7ec4\u5efa\u4e00\u4e2aAC\u81ea\u52a8\u673a**\uff0c\u5230\u65f6\u5019\u67e5\u8be2\u5c31\u662f\u628a $\\log n$ \u4e2aAC\u81ea\u52a8\u673a $search$ \u4e00\u904d\u5c31\u597d\u4e86\u3002\n\n\u6700\u540e\u5c31\u662f\u5220\u9664\u64cd\u4f5c\uff0c\u53ef\u4ee5\u53d1\u73b0\u8d21\u732e**\u5177\u6709\u53ef\u51cf\u6027**\u3002\n\n\u4ec0\u4e48\u610f\u601d\uff1f\n\n\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u4e32\u7684\u8d21\u732e\uff0c\u7528\u5b83\u51cf\u53bb\u5df2\u5220\u9664\u4e32\u7684\u8d21\u732e\uff0c\u5f97\u5230\u7684\u5c31\u662f\u7b54\u6848\u3002\n\n\u8fd9\u6837\u4e00\u6765\u53ea\u8981\u5bf9\u63d2\u5165\uff0c\u5220\u9664\u7684\u5b57\u7b26\u4e32**\u5404\u81ea**\u8fdb\u884c\u4e8c\u8fdb\u5236\u5206\u7ec4\uff0c\u7136\u540e\u76f8\u51cf\u5373\u53ef\u3002\n\nAC\u81ea\u52a8\u673a\u7684\u5efa\u6811\u662f $O(n)$ \u7684\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(len \\log n)$ \uff0c $len$ \u8868\u793a\u8f93\u5165\u7684\u603b\u4e32\u957f\u3002\n\n\u7b2c\u4e00\u6b21\u5199\u5199\u4e11\u4e86\uff0c\u5e38\u6570\u6709\u70b9\u5927\u3002\n\n\u5982\u679c\u7528\u4e86 $printf$ \u7684\u8bdd\u5728\u540e\u9762\u8bb0\u5f97\u52a0\u4e0a\u8fd9\u53e5\u8bdd\uff1a`fflush(stdout);` ~~\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48~~\n\n$code:$\n\n```cpp\n// \u4e8c\u8fdb\u5236\u5206\u7ec4 + AC\u81ea\u52a8\u673a\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int maxn = 300005;\nstruct Group {\n    string data[maxn];\n    int tot,ch[maxn][26],cnt[maxn],n;\n    void insert(int r,char *s) {\n        int d=s[1]-'a',len=strlen(s+1),_r=r;\n        for(int i=1;i<=len;d=s[++i]-'a') {\n            if(ch[r][d]==_r) {\n                ch[r][d]=++tot;\n                for(int j=0;j<26;j++) ch[tot][j]=_r;\n            }\n            r=ch[r][d];\n        } ++cnt[r];\n    }\n    int fail[maxn];\n    void build(int r) {\n        fail[r]=r;\n        queue<int>q;\n        for(int i=0;i<26;i++)\n            if(ch[r][i]>r) q.push(ch[r][i]),fail[ch[r][i]]=r;\n        while(!q.empty()) {\n            int u=q.front(); q.pop();\n            for(int i=0;i<26;i++) {\n                int v=ch[u][i];\n                if(v==r) ch[u][i]=ch[fail[u]][i];\n                else {\n                    fail[v]=ch[fail[u]][i];\n                    cnt[v]+=cnt[ch[fail[u]][i]];\n                    q.push(v);\n                }\n            }\n        }\n    }\n    int search(int r,char *s) {\n        int d=s[1]-'a',len=strlen(s+1),res=0;\n        for(int i=1;i<=len;d=s[++i]-'a')\n            r=ch[r][d],res+=cnt[r];\n        return res;\n    }\n    int stk[maxn],fr[maxn],size[maxn],N;\n    void merge() {\n        --N,size[N]<<=1;\n        for(int i=stk[N];i<=tot;i++) {\n            cnt[i]=fail[i]=0;\n            for(int j=0;j<26;j++) ch[i][j]=0;\n        }\n        tot=stk[N];\n        for(int i=0;i<26;i++) ch[tot][i]=tot;\n        for(int L=fr[N];L<=n;L++) insert(stk[N],&data[L][0]);\n        build(stk[N]);\n    }\n    void Insert(char *s) {\n        stk[++N]=++tot;\n        for(int i=0;i<26;i++) ch[tot][i]=tot;\n        size[N]=1;\n        insert(tot,s),build(stk[N]);\n        int len=strlen(s+1);\n        data[fr[N]=++n]=\" \";\n        for(int i=1;i<=len;i++) data[n]+=s[i];\n        while(size[N]==size[N-1]) merge();\n    }\n    int Count(char *s) {\n        int ans=0;\n        for(int i=1;i<=N;i++)\n            ans+=search(stk[i],s);\n        return ans;\n    }\n}Add,Sub;\nchar tmp[maxn];\nint main() {\n    int T;\n    scanf(\"%d\",&T);\n    for(int i=1;i<=T;i++) {\n        int opt;\n        scanf(\"%d%s\",&opt,tmp+1);\n        if(opt==1) Add.Insert(tmp);\n        else if(opt==2) Sub.Insert(tmp);\n        else printf(\"%d\\n\",Add.Count(tmp)-Sub.Count(tmp));\n        fflush(stdout);\n    }\n    return 0;\n}\n```",
        "postTime": 1595511940,
        "uid": 52881,
        "name": "super\u849f\u84bb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF710F \u3010String Set Queries\u3011"
    },
    {
        "content": "\u9996\u5148\u8981\u7528AC\u81ea\u52a8\u673a\u8dd1\u5339\u914d\u3002\n\n\u7136\u540e\u5c31\u662f\u5220\u9664\u975e\u5e38\u5bb9\u6613\uff0c\u53ea\u8981\u518d\u5f00\u4e00\u4e2aAC\u81ea\u52a8\u673a\u8bb0\u5f55\u88ab\u5220\u9664\u5f97\u5230\u4e32\uff0c\u7136\u540e\u5728\u4e24\u4e2aAC\u81ea\u52a8\u673a\u4e2d\u8dd1\u4e24\u6b21\u5f97\u5230\u4e24\u4e2a\u7b54\u6848\u51cf\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u8bbe\u603b\u4e32\u957f\u662fS\uff0c\u64cd\u4f5c\u6570\u662fm\uff0c\u4e4b\u540e\u5c31\u6709\u5f88\u591a\u7684\u505a\u6cd5\u4e86\uff1a\n\n1. \u6839\u53f7\u5206\u6cbb\uff1a\u628a\u957f\u5ea6\u5927\u4e8e$\\sqrt{S}$\u7684\u4e32\u7528hash\u5339\u914d\uff0c\u5176\u4ed6\u7684\u4e32\u63d2\u5230\u4e00\u4e2atrie\u91cc\uff0c\u4e4b\u540ehash\u66b4\u529b\u5339\u914d\u957f\u7684\u4e32\uff0c\u800ctrie\u7684\u6df1\u5ea6\u4e0d\u8d85\u8fc7$\\sqrt{S}$\uff0c\u518d\u66b4\u529b\u679a\u4e3e\u540e\u7f00\u5339\u914dtrie\u5c31\u505a\u5b8c\u4e86\u3002\n2. \u6839\u53f7\u91cd\u6784\uff1a\u6bcf$\\sqrt{m}$\u4e2a\u4e32\u5f00\u4e00\u4e2aAC\u81ea\u52a8\u673a\uff0c\u6512\u591f$\\sqrt{m}$\u4e2a\u5c31\u65b0\u52a0\u8fdb\u6765\u4e00\u4e2a\uff0c\u76f4\u63a5\u505a\u3002\n3. AC\u81ea\u52a8\u673a+\u4e8c\u8fdb\u5236\u5206\u7ec4\uff0c\u8003\u8651\u5f53\u524d\u4e32\u7684\u4e2a\u6570\u662fn\uff0c\u5bf9\u4e8en\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u7b2ci\u4f4d\u6570\u5b57$s_i$\uff0c\u5c31\u7ef4\u62a4\u4e00\u4e2a\u6709$s_i\\times 2^i$\u4e2a\u4e32\u7684trie\uff0c\u52a0\u5165\u7684\u65f6\u5019\u4ece\u7b2c0\u4f4d\u5f00\u59cb\u505a\u4e8c\u8fdb\u5236\u52a0\u6cd5\uff0c\u7ed9n\u52a0\u4e00\u3002\u8fdb\u4f4d\u7684\u65f6\u5019\u628a\u5f53\u524d\u4f4d\u4e0a\u7684trie\u62ff\u51fa\u6765\u548c\u4e0a\u4e00\u4f4d\u4e0a\u6765\u7684trie\u5408\u5e76\uff0c\u4e4b\u540e\u52a0\u5230\u4e0b\u4e00\u4f4d\uff0c\u76f4\u5230\u6709\u4e00\u4f4d\u662f0\uff0c\u5c31\u505c\u5728\u8fd9\u91cc\uff0c\u628a\u4e00\u8def\u5408\u5e76\u4e0a\u6765\u7684trie\u5efa\u6210AC\u81ea\u52a8\u673a\u3002 \u67e5\u8be2\u7684\u65f6\u5019\u6bcf\u4e00\u4f4d\u8dd1\u4e00\u904d\uff0c\u7531\u4e8e\u6bcf\u4e2a\u4e32\u6700\u591a\u88ab\u91cd\u6784$log\\ n$\u6b21\u6240\u4ee5\u590d\u6742\u5ea6\u662f\u5bf9\u7684\u3002\n\n\u4e3a\u4e86\u590d\u4e60AC\u81ea\u52a8\u673a\uff0c\u6211\u5199\u4e86\u7b2c\u4e09\u79cd\u505a\u6cd5\uff0c\u53d1\u73b0AC\u81ea\u52a8\u673a\u5168\u5fd8\u4e86\u3002\u3002\u3002\n\n\u7531\u4e8e\u8981\u628atrie\u6811\u5408\u5e76\uff0c\u6240\u4ee5\u4ee5\u5f80\u76f4\u63a5\u5728ch\u6570\u7ec4\u4e0a\u8865trie\u56fe\u7684\u65b9\u6cd5\u884c\u4e0d\u901a\u4e86\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u53e6\u5f00\u4e00\u4e2ach2\u6570\u7ec4\u4e13\u95e8\u7528\u4e8e\u8865trie\u56fe\uff0c\u56e0\u4e3azz\u7ffb\u8bd1\u628a\u4e32\u957f\u4ece3e5\u9519\u5199\u62104e6\uff0c\u6240\u4ee5\u7a7a\u95f4\u5f00\u7684\u4e0b\u3002\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nstruct trie{\n\tint ch[26],fail,cnt,ch2[26],sum;\n}t[300001];\nchar ch[300001];\nint root[2][300001],tot,num[2],n,q;\nint head,tail,team[300001],dg[2][300001];\ninline void build_trie(int x,int z){\n\troot[z][x]=++tot; int u=tot;\n\tfor (int i=1; i<=n; i++){\n\t\tif (!t[u].ch[ch[i]-'a'])\n\t\t\tt[u].ch[ch[i]-'a']=++tot;\n\t\tu=t[u].ch[ch[i]-'a'];\n\t}\n\tt[u].cnt++;\n}\nint merge(int u,int v){\n\tif (!u||!v) return u|v;\n\tt[u].cnt+=t[v].cnt;\n\tfor (int i=0; i<26; i++)\n\t\tt[u].ch[i]=merge(t[u].ch[i],t[v].ch[i]);\n\treturn u;\n}\ninline void get_fail(int rt){\n\thead=1,tail=0;\n\tfor (int i=0; i<26; i++)\n\t\tif (t[rt].ch[i]){\n\t\t\tt[rt].ch2[i]=t[rt].ch[i];\n\t\t\tt[t[rt].ch[i]].fail=rt;\n\t\t\tteam[++tail]=t[rt].ch[i];\n\t\t}\n\t\telse t[rt].ch2[i]=rt;\n\twhile (head<=tail){\n\t\tint x=team[head];\n\t\tfor (int i=0; i<26; i++){\n\t\t\tif (t[x].ch[i]){\n\t\t\t\tt[x].ch2[i]=t[x].ch[i];\n\t\t\t\tt[t[x].ch[i]].fail=t[t[x].fail].ch2[i];\n\t\t\t\tteam[++tail]=t[x].ch2[i];\n\t\t\t}\n\t\t\telse t[x].ch2[i]=t[t[x].fail].ch2[i];\n\t\t}\n\t\tt[x].sum=t[x].cnt+t[t[x].fail].sum;\n\t\thead++;\n\t}\n}\nvoid insert(int z){\n\tbuild_trie(++num[z],z); dg[z][num[z]]=1;\n\twhile (dg[z][num[z]]==dg[z][num[z]-1]&&num[z]>1){\n\t\tnum[z]--; dg[z][num[z]]+=dg[z][num[z]+1];\n\t\troot[z][num[z]]=merge(root[z][num[z]],root[z][num[z]+1]);\n\t}\n\tget_fail(root[z][num[z]]);\n}\nint query(int z){\n\tint ans=0;\n\tfor (int i=1; i<=num[z]; i++){\n\t\tint u=root[z][i];\n\t\tfor (int j=1; j<=n; j++){\n\t\t\tu=t[u].ch2[ch[j]-'a'];\n\t\t\tans+=t[u].sum;\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tint op;\n\tscanf(\"%d\",&q);\nwhile (q--){\n\tscanf(\"%d\",&op);\n\tscanf(\"%s\",ch+1); n=strlen(ch+1);\n\tif (op==1||op==2) insert(op-1);\n\tif (op==3) printf(\"%d\\n\",query(0)-query(1));\n\tfflush(stdout);\n}\n\treturn 0;\n}\n```\n",
        "postTime": 1569574289,
        "uid": 63661,
        "name": "Taduro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF710F \u3010String Set Queries\u3011"
    },
    {
        "content": "[\u9898\u9762\u4f20\u9001\u95e8](https://codeforces.ml/contest/710/problem/F)\n\n\u9898\u610f\uff1a\u5f3a\u5236\u5728\u7ebf\u7684 AC \u81ea\u52a8\u673a\u3002\n$n,\\sum|s|\\leq 3\\times 10^5$\n\n[\u5b89\u5229\u4e2a\u4eba AC \u81ea\u52a8\u673a\u5b66\u4e60\u7b14\u8bb0](https://www.cnblogs.com/ET2006/p/ACAM.html)\n\n\u5982\u679c\u4e0d\u662f\u5f3a\u5236\u5728\u7ebf\u90a3\u6b64\u9898\u5c31\u662f\u9053 sb \u9898\uff0c\u52a0\u4e86\u5f3a\u5236\u5728\u7ebf\u5c31\u4e0d\u90a3\u4e48 sb \u4e86\u3002\n\n\u8fd9\u91cc\u4ecb\u7ecd\u4e24\u79cd\u505a\u6cd5\uff1a\n\n1. \u6839\u53f7\u5206\u6cbb\n\n\u8003\u8651\u5230 KMP \u64c5\u957f\u5904\u7406\u5355\u4e2a\u5b57\u7b26\u4e32\u5339\u914d\u7684\u60c5\u51b5\uff0c\u4f46\u5bf9\u4e8e\u591a\u6a21\u5f0f\u4e32\u7684\u60c5\u51b5\u590d\u6742\u5ea6\u5c31\u4e0d\u90a3\u4e48\u4f18\u79c0\u4e86\u3002\n\n\u800c AC \u81ea\u52a8\u673a\u64c5\u957f\u5904\u7406\u591a\u6a21\u5f0f\u4e32\u5339\u914d\u7684\u60c5\u51b5\uff0c\u4f46\u9884\u5904\u7406\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684\uff0c\u6bcf\u52a0\u8fdb\u6765\u4e00\u4e2a\u5b57\u7b26\u4e32\u90fd\u9884\u5904\u7406\u4e00\u904d\u590d\u6742\u5ea6\u663e\u7136\u5403\u4e0d\u6d88\u3002\n\n\u8003\u8651\u5c06\u4e8c\u8005\u7ed3\u5408\uff0c\u8bbe\u4e00\u4e2a\u4e34\u754c\u503c $B$\uff0c\u6bcf $B$ \u4e2a\u4e32\u5efa\u4e00\u4e2a AC \u81ea\u52a8\u673a\u3002\u5269\u4f59\u7684\u82e5\u5e72\u4e2a\u4e32\u66b4\u529b\u8dd1 KMP\u3002\n\n\u7b97\u4e0b\u590d\u6742\u5ea6\uff0c\u6700\u591a\u8981\u5728 AC \u81ea\u52a8\u673a\u4e0a\u5339\u914d $\\frac{n}{B}$ \u6b21\uff0c\u6bcf\u6b21\u5339\u914d\u90fd\u662f $|s|$ \u7684\uff0c\u6545 AC \u81ea\u52a8\u673a\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662f $\\frac{n}{B}\\times \\sum|s|$\u3002\n\n\u518d\u8003\u8651 KMP\uff0c\u5355\u6b21 KMP \u662f $\\mathcal O(n+m)$ \u7684\uff0c\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u6700\u591a\u8ddf $B$ \u4e2a\u8be2\u95ee\u4e32\u5339\u914d\uff0c\u800c\u6bcf\u4e2a\u8be2\u95ee\u4e32\u4e5f\u6700\u591a\u8ddf $B$ \u4e2a\u6a21\u5f0f\u4e32\u5339\u914d\uff0c\u6240\u4ee5\u8d21\u732e\u4e3a $B\\sum|s|$\u3002\n\n\u6700\u540e\u662f\u5220\u9664\u64cd\u4f5c\uff0c\u4f17\u6240\u5468\u77e5\uff0cAC \u81ea\u52a8\u673a\u662f\u4e0d\u652f\u6301\u5220\u9664\u64cd\u4f5c\u7684\uff0c\u4f46\u53d1\u73b0\u4e00\u52a0\u4e00\u51cf\uff0c\u8d21\u732e\u53ef\u4ee5\u62b5\u6d88\u6389\uff0c\u6240\u6709\u6211\u4eec\u53ef\u4ee5\u5efa\u4e24\u4e2a AC \u81ea\u52a8\u673a\uff0c\u4e00\u4e2a\u5904\u7406\u6240\u6709 $1$ \u64cd\u4f5c\u52a0\u5165\u8fdb\u6765\u7684\u5b57\u7b26\u4e32\uff0c\u4e00\u4e2a\u5904\u7406\u6240\u6709 $2$ \u64cd\u4f5c\u5220\u9664\u7684\u5b57\u7b26\u4e32\uff0c\u4e8c\u8005\u76f8\u51cf\u5373\u53ef\u3002\n\n\u603b\u590d\u6742\u5ea6 $\\mathcal O(\\sum|s|(B+\\frac{n}{B}))$\uff0c$3\\times 10^5$ $n\\sqrt{n}$ \u5927\u7ea6\u662f $2\\times 10^8$ \u7ea7\u522b\uff0c\u7406\u8bba\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u53ef\u60dc\u6211\u6ca1\u5361\u8fc7\u53bb qwq\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define fz(i,a,b) for(int i=a;i<=b;i++)\n#define fd(i,a,b) for(int i=a;i>=b;i--)\n#define ffe(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define fill0(a) memset(a,0,sizeof(a))\n#define fill1(a) memset(a,-1,sizeof(a))\n#define fillbig(a) memset(a,63,sizeof(a))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\ntemplate<typename T1,typename T2> void chkmin(T1 &x,T2 y){if(x>y) x=y;}\ntemplate<typename T1,typename T2> void chkmax(T1 &x,T2 y){if(x<y) x=y;}\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntemplate<typename T> void read(T &x){\n\tchar c=getchar();T neg=1;\n\twhile(!isdigit(c)){if(c=='-') neg=-1;c=getchar();}\n\twhile(isdigit(c)) x=x*10+c-'0',c=getchar();\n\tx*=neg;\n}\nconst int BLK=548;\nconst int MAXN=3e5+5;\nconst int ALPHA=26;\nchar buf[MAXN+5];\nstring reads(){\n\tscanf(\"%s\",buf+1);int len=strlen(buf+1);\n\tstring ret;for(int i=1;i<=len;i++) ret+=buf[i];\n\treturn ret;\n}\nclass solver{\npublic:\n\tstruct ACAM{\n\t\tint rt[BLK+5];\n\t\tint ch[MAXN+BLK+5][ALPHA+2],fail[MAXN+BLK+5],cnt[MAXN+BLK+5],ncnt=0;\n\t\tvoid insert(int r,string s){\n\t\t\tint cur=r;\n\t\t\tfor(int i=0;i<s.size();i++){\n\t\t\t\tif(!ch[cur][s[i]-'a']) ch[cur][s[i]-'a']=++ncnt;\n\t\t\t\tcur=ch[cur][s[i]-'a'];\n\t\t\t} cnt[cur]++;\n\t\t}\n\t\tvoid getfail(int r){\n\t\t\tqueue<int> q;\n\t\t\tfor(int i=0;i<ALPHA;i++){\n\t\t\t\tif(ch[r][i]) q.push(ch[r][i]),fail[ch[r][i]]=r;\n\t\t\t\telse ch[r][i]=r;\n\t\t\t}\n\t\t\twhile(!q.empty()){\n\t\t\t\tint x=q.front();q.pop();\n\t\t\t\tfor(int i=0;i<ALPHA;i++){\n\t\t\t\t\tif(ch[x][i]) fail[ch[x][i]]=ch[fail[x]][i],q.push(ch[x][i]),cnt[ch[x][i]]+=cnt[fail[ch[x][i]]];\n\t\t\t\t\telse ch[x][i]=ch[fail[x]][i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint query(int r,string s){\n\t\t\tint cur=r,ret=0;\n\t\t\tfor(int i=0;i<s.size();i++){\n\t\t\t\tcur=ch[cur][s[i]-'a'];ret+=cnt[cur];\n\t\t\t} return ret;\n\t\t}\n\t} a;\n\tint fail[MAXN+5];\n\tint getkmp(string s,string t){\n\t\tint ls=s.size(),lt=t.size();s=\" \"+s;t=\" \"+t;\n\t\tint pos=0,ret=0;\n\t\tfor(int i=2;i<=lt;i++){\n\t\t\twhile(pos&&t[pos+1]!=t[i]) pos=fail[pos];\n\t\t\tif(t[pos+1]==t[i]) pos++;fail[i]=pos;\n\t\t} pos=0;\n\t\tfor(int i=1;i<=ls;i++){\n\t\t\twhile(pos&&t[pos+1]!=s[i]) pos=fail[pos];\n\t\t\tif(t[pos+1]==s[i]) pos++;\n\t\t\tif(pos==lt) ret++;\n\t\t} return ret;\n\t}\n\tstring ss[MAXN+5];\n\tint num=0,pre=0,cnt=0;\n\tvoid insert(string s){\n\t\tss[++num]=s;\n\t\tif(num%BLK==0){\n\t\t\ta.rt[++cnt]=++a.ncnt;\n\t\t\tfor(int i=pre+1;i<=num;i++) a.insert(a.rt[cnt],ss[i]);\n\t\t\ta.getfail(a.rt[cnt]);pre=num;\n\t\t}\n\t}\n\tint query(string s){\n\t\tint ret=0;\n\t\tfor(int i=1;i<=cnt;i++) ret+=a.query(a.rt[i],s);\n\t\tfor(int i=pre+1;i<=num;i++) ret+=getkmp(s,ss[i]);\n\t\treturn ret;\n\t}\n} s1,s2;\nint T;\nint main(){\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tint opt;string s;scanf(\"%d\",&opt);s=reads();\n\t\tif(opt==1) s1.insert(s);\n\t\telse if(opt==2) s2.insert(s);\n\t\telse printf(\"%d\\n\",s1.query(s)-s2.query(s)),fflush(stdout);\n\t}\n\treturn 0;\n}\n```\n\n2. \u4e8c\u8fdb\u5236\u5206\u7ec4\n\u611f\u89c9\u8fd9\u5e94\u8be5\u662f\u6b63\u89e3\u5427\uff0c\u672c\u9898\u5b98\u65b9\u9898\u89e3\u7ed9\u7684\u5c31\u8fd9\u4e2a\u505a\u6cd5\u3002\n\n\u8fd8\u662f\u5c06\u52a0\u5165\u7684\u5b57\u7b26\u4e32\u5206\u6210\u82e5\u5e72\u7ec4\uff0c\u6bcf\u7ec4\u5efa\u4e00\u4e2a AC \u81ea\u52a8\u673a\u3002\n\n\u4e0d\u8fc7\u4e0e\u4e4b\u524d\u4e0d\u540c\u7684\u662f\u8fd9\u6b21\u6211\u4eec\u6309**\u4e8c\u8fdb\u5236**\u5206\u7ec4\uff0c\u5373\u6bcf\u7ec4\u7684\u5927\u5c0f\u90fd\u662f $2$ \u7684\u6574\u6570\u6b21\u5e42\u3002\n\n\u90a3\u4e48\u8fd9\u73a9\u610f\u513f\u600e\u4e48\u652f\u6301\u63d2\u5165\u64cd\u4f5c\u5462\uff1f\u5047\u8bbe\u6211\u4eec\u63d2\u5165\u5b57\u7b26\u4e32 $s$\uff0c\u6211\u4eec\u5148\u5efa\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u4e32\u7684 AC \u81ea\u52a8\u673a\uff0c\u7136\u540e\u4e0d\u65ad\u4e0e\u524d\u9762\u7684 AC \u81ea\u52a8\u673a\u50cf\u5408\u5e76\u5806\u4e00\u6837\u5408\u5e76\u3002\u6700\u540e\u66b4\u529b\u91cd\u6784\u4e00\u53d1\u3002\n\n\u662f\u4e0d\u662f\u6709\u70b9\u62bd\u8c61\uff1f\u6253\u4e2a\u5f62\u8c61\u7684\u6bd4\u55bb\uff0c2048\uff0c\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6709 $23$ \u4e2a\u4e32\uff0c\u90a3\u4e48\u4f1a\u5206\u4e3a $4$ \u7ec4\uff0c\u5927\u5c0f\u5206\u522b\u4e3a $16,4,2,1$\uff0c\u6b64\u65f6\u4f60\u518d\u52a0\u5165\u4e00\u4e2a\u4e32\uff0c\u5c31\u53d8\u4e3a $16,4,2,1,1$\uff0c\u6700\u540e\u4e24\u4e2a $1$ \u5408\u5e76\uff0c\u53d8\u4e3a\u4e00\u4e2a $2$\uff1b\u6700\u540e\u4e24\u4e2a $2$ \u5408\u5e76\uff0c\u53d8\u4e3a\u4e00\u4e2a $4$\u2026\u2026\u4ee5\u6b64\u7c7b\u63a8\u3002\u6700\u540e\u4f1a\u5f97\u5230 $16,8$\u3002\n\n\u7b97\u4e0b\u590d\u6742\u5ea6\uff0c\u66b4\u529b\u91cd\u6784\u590d\u6742\u5ea6\u662f $\\sum|s|$ \u7684\uff0c\u800c\u6211\u4eec\u6bcf\u4e2a\u5b57\u7b26\u4e32\u6700\u591a\u88ab\u91cd\u6784 $\\log n$ \u6b21\uff0c\u6545\u63d2\u5165\u7684\u603b\u590d\u6742\u5ea6\u662f $n\\log n$ \u7684\uff0c\u800c\u67e5\u8be2\u7684\u65f6\u5019\u4f60\u6700\u591a\u5728 $\\log n$ \u4e2a AC \u81ea\u52a8\u673a\u4e2d\u67e5\u8be2\uff0c\u6545\u603b\u590d\u6742\u5ea6\u4e3a $n\\log n$\uff0c\u78be\u538b\u7b97\u6cd5 1\u3002\n\u5b9e\u6d4b 1s\uff0c\u53ef\u80fd\u56e0\u4e3a\u6709\u4e2a $26$ \u7684\u5e38\u6570\u5427\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define fz(i,a,b) for(int i=a;i<=b;i++)\n#define fd(i,a,b) for(int i=a;i>=b;i--)\n#define ffe(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define fill0(a) memset(a,0,sizeof(a))\n#define fill1(a) memset(a,-1,sizeof(a))\n#define fillbig(a) memset(a,63,sizeof(a))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\ntemplate<typename T1,typename T2> void chkmin(T1 &x,T2 y){if(x>y) x=y;}\ntemplate<typename T1,typename T2> void chkmax(T1 &x,T2 y){if(x<y) x=y;}\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntemplate<typename T> void read(T &x){\n\tchar c=getchar();T neg=1;\n\twhile(!isdigit(c)){if(c=='-') neg=-1;c=getchar();}\n\twhile(isdigit(c)) x=x*10+c-'0',c=getchar();\n\tx*=neg;\n}\nconst int MAXN=3e5;\nconst int LOG_N=19;\nconst int ALPHA=26;\nclass solver{\npublic:\n\tint sz[LOG_N+3],rt[LOG_N+3],cnt=0;\n\tint oc[MAXN*2+5][ALPHA+2],ch[MAXN*2+5][ALPHA+2],ncnt=0,ed[MAXN*2+5],val[MAXN*2+5],fail[MAXN+5];\n\tvoid insert(char *s,int r){\n\t\tint len=strlen(s+1),cur=r;\n\t\tfor(int i=1;i<=len;i++){\n\t\t\tif(!oc[cur][s[i]-'a']) oc[cur][s[i]-'a']=++ncnt;\n\t\t\tcur=oc[cur][s[i]-'a'];\n\t\t} ed[cur]++;\n\t}\n\tvoid getfail(int r){\n\t\tqueue<int> q;\n\t\tfor(int i=0;i<ALPHA;i++){\n\t\t\tif(oc[r][i]){\n\t\t\t\tfail[oc[r][i]]=r;q.push(oc[r][i]);\n\t\t\t\tval[oc[r][i]]=ed[oc[r][i]];ch[r][i]=oc[r][i];\n\t\t\t} else ch[r][i]=r;\n\t\t}\n\t\twhile(!q.empty()){\n\t\t\tint x=q.front();q.pop();\n\t\t\tfor(int i=0;i<ALPHA;i++){\n\t\t\t\tif(oc[x][i]){\n\t\t\t\t\tch[x][i]=oc[x][i];\n\t\t\t\t\tfail[oc[x][i]]=ch[fail[x]][i];\n\t\t\t\t\tval[oc[x][i]]=val[fail[oc[x][i]]]+ed[oc[x][i]];\n\t\t\t\t\tq.push(oc[x][i]);\n\t\t\t\t} else ch[x][i]=ch[fail[x]][i];\n\t\t\t}\n\t\t}\n\t}\n\tint merge(int x,int y){\n\t\tif(!x||!y) return x+y;\n\t\ted[x]+=ed[y];\n\t\tfor(int i=0;i<ALPHA;i++) oc[x][i]=merge(oc[x][i],oc[y][i]);\n\t\treturn x;\n\t}\n\tvoid insert(char *s){\n\t\tsz[++cnt]=1;rt[cnt]=++ncnt;insert(s,rt[cnt]);\n\t\twhile(sz[cnt]==sz[cnt-1]){\n\t\t\trt[cnt-1]=merge(rt[cnt-1],rt[cnt]);\n\t\t\tsz[cnt-1]<<=1;sz[cnt]=0;cnt--;\n\t\t} getfail(rt[cnt]);\n\t}\n\tint query(char *s,int r){\n\t\tint len=strlen(s+1),cur=r,ret=0;\n\t\tfor(int i=1;i<=len;i++){\n\t\t\tcur=ch[cur][s[i]-'a'];\n\t\t\tret+=val[cur];\n\t\t} return ret;\n\t}\n\tint query(char *s){\n\t\tint ret=0;\n\t\tfor(int i=1;i<=cnt;i++) ret+=query(s,rt[i]);\n\t\treturn ret;\n\t}\n} s1,s2;\nchar buf[MAXN+5];\nint main(){\n\tint T;scanf(\"%d\",&T);\n\twhile(T--){\n\t\tint opt;scanf(\"%d%s\",&opt,buf+1);\n\t\tif(opt==1) s1.insert(buf);\n\t\telse if(opt==2) s2.insert(buf);\n\t\telse printf(\"%d\\n\",s1.query(buf)-s2.query(buf)),fflush(stdout);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1608208740,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF710F \u3010String Set Queries\u3011"
    },
    {
        "content": "\u6ca1\u770b\u61c2\u5176\u4ed6\u9898\u89e3\u4e3a\u4ec0\u4e48\u8981\u5efa\u4e24\u4e2a $\\texttt{ACAM}$ /yun\n\n## \u601d\u8def\n\n\u5982\u679c\u5148\u662f\u4e00\u4e32\u64cd\u4f5c\uff0c\u540e\u662f\u4e00\u4e32\u8be2\u95ee\uff0c\u5c31\u662f $\\texttt{ACAM}$ \u7684\u6a21\u677f\u9898\u3002\n\n\u53ef\u4ee5\u5efa\u51fa\u4e00\u4e2a $\\texttt{ACAM}$\uff0c\u628a\u6240\u6709\u52a0\u548c\u5220\u7684\u5b57\u7b26\u4e32\u63d2\u8fdb\u53bb\u3002\u52a0\u4e32\u6743\u503c\u4e3a $1$\uff0c\u5220\u4e32\u6743\u503c\u4e3a $-1$\u3002\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u5728 $\\texttt{ACAM}$ \u4e0a\u8d70\u4e00\u904d\u8fd9\u4e2a\u4e32\u5c31\u53ef\u4ee5\u7edf\u8ba1\u51fa\u7b54\u6848\u3002\n\n\u73b0\u5728\u5f3a\u5236\u5728\u7ebf\u4e86\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u8003\u8651\u3002\n\n\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u4e32\u5c31\u5fc5\u987b\u8981\u91cd\u6784 $\\texttt{fail}$ \u6811\uff0c\u8fd9\u6837\u80af\u5b9a\u4f1a\u8d85\u65f6\u3002\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u6839\u53f7\u5206\u6cbb\uff0c\u6bcf\u4e2a $\\texttt{ACAM}$ \u6700\u591a\u4fdd\u5b58 $\\sqrt{m}$ \u4e2a\u4e32\u7684\u4fe1\u606f\uff0c\u6700\u591a\u4f1a\u5efa\u51fa $\\sqrt{m}$ \u4e2a $\\texttt{ACAM}$\u3002\u6bcf\u6b21\u67e5\u8be2\u5230\u6bcf\u4e2a $\\texttt{ACAM}$ \u4e2d\u67e5\u8be2\u5e76\u6c42\u548c\u5373\u53ef\u3002\u8fd9\u79cd\u505a\u6cd5\u9700\u8981\u5361\u5e38\u3002\n\n\u8fdb\u4e00\u6b65\u5730\uff0c\u6211\u4eec\u8003\u8651\u4e8c\u8fdb\u5236\u5206\u7ec4\u3002\u6bd4\u5982\u5f53\u524d\u63d2\u5165\u4e86 $21$ \u4e2a\u4e32\uff0c$21=(10101)_2$\uff0c\u6240\u4ee5\u5f53\u524d\u6709 $3$ \u4e2a $\\texttt{ACAM}$\uff0c\u5206\u522b\u5b58\u4e86 $1$ \u4e2a\u3001$4$ \u4e2a\u3001$16$ \u4e2a\u4e32\u3002\n\n\u5728\u4ee3\u7801\u4e2d\u4f53\u73b0\u4e3a\uff1a\u6bcf\u65b0\u63d2\u5165\u4e00\u4e2a\u4e32\uff0c\u5148\u5efa\u51fa\u4e00\u4e2a\u53ea\u5b58\u4e86\u5f53\u524d\u4e32\u7684\u65b0 $\\texttt{ACAM}$\uff0c\u5982\u679c\u5b58\u5728\u53e6\u4e00\u4e2a\u4e0e\u5f53\u524d $\\texttt{ACAM}$ \u5927\u5c0f\u76f8\u540c\u7684 $\\texttt{ACAM}$ \u5c31\u4e0d\u65ad\u5408\u5e76\u3002\n\n\u6bcf\u6b21\u67e5\u8be2\u5728\u6bcf\u4e2a $\\texttt{ACAM}$ \u67e5\u4e4b\u540e\u6c42\u548c\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u6700\u591a\u6709 $\\log m$ \u4e2a $\\texttt{ACAM}$\uff0c\u6240\u4ee5\u67e5\u8be2\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n\\log m)$\u3002\n\n\u518d\u6765\u770b\u63d2\u5165\uff0c\u6bcf\u4e2a\u4e32\u4e00\u5b9a\u53ea\u4f1a\u7ecf\u5386 $\\log m$ \u6b21\u5408\u5e76\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5408\u5e76\u5927\u5c0f\u4e00\u5b9a\u4f1a $\\times2$\u3002\u6240\u4ee5\u6bcf\u4e2a\u4e32\u6700\u591a\u88ab\u91cd\u6784\u4e86 $\\log m$ \u6b21 $\\texttt{fail}$ \u6307\u9488\u3002\u6240\u4ee5\u63d2\u5165\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n\\log m)$\u3002\n\n\u603b\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log m)$\uff0c\u6709\u4e2a $26$ \u7684\u5e38\u6570\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int N = 2e6 + 5, S = 26;\n\nint n, type, lstans;\nchar s[N];\n\nint idx, tot, rt[N], siz[N], ch[N][S], go[N][S], fa[N], ed[N], sum[N];\nvoid ins(char *s, int val, int st) {\n\tint u = st, len = strlen(s + 1);\n\tfor (int i = 1; i <= len; i++) {\n\t\tint c = s[i] - 'a';\n\t\tif (!ch[u][c]) ch[u][c] = ++idx;\n\t\tu = ch[u][c];\n\t}\n\ted[u] += val;\n}\nvoid build(int st) {\n\tqueue<int> q;\n\tfa[st] = st;\n\tfor (int i = 0; i < S; i++) {\n\t\tif (ch[st][i]) {\n\t\t\tgo[st][i] = ch[st][i];\n\t\t\tfa[go[st][i]] = st;\n\t\t\tq.push(go[st][i]);\n\t\t}\n\t\telse go[st][i] = st;\n\t}\n\twhile (!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tsum[u] = sum[fa[u]] + ed[u];\n\t\tfor (int i = 0; i < S; i++) {\n\t\t\tif (ch[u][i]) {\n\t\t\t\tgo[u][i] = ch[u][i];\n\t\t\t\tfa[go[u][i]] = go[fa[u]][i];\n\t\t\t\tq.push(go[u][i]);\n\t\t\t}\n\t\t\telse go[u][i] = go[fa[u]][i];\n\t\t}\n\t}\n}\nint merge(int p, int q) {\n\tif (!p || !q) return p ^ q;\n\ted[p] += ed[q];\n\tfor (int i = 0; i < S; i++) ch[p][i] = merge(ch[p][i], ch[q][i]);\n\treturn p;\n}\nvoid upd(char *s, int val) {\n\trt[++tot] = ++idx;\n\tsiz[tot] = 1;\n\tins(s, val, rt[tot]);\n\twhile (siz[tot] == siz[tot - 1]) {\n\t\ttot--;\n\t\tsiz[tot] += siz[tot + 1];\n\t\trt[tot] = merge(rt[tot], rt[tot + 1]);\n\t}\n\tbuild(rt[tot]);\n}\nint query(char *s, int st) {\n\tint u = st, len = strlen(s + 1), res = 0;\n\tfor (int i = 1; i <= len; i++) {\n\t\tint c = s[i] - 'a';\n\t\tu = go[u][c];\n\t\tres += sum[u];\n\t}\n\treturn res;\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\twhile (n--) {\n\t\tint op;\n\t\tscanf(\"%d %s\", &op, s + 1);\n\t\tif (op == 1) upd(s, 1);\n\t\tif (op == 2) upd(s, -1);\n\t\tif (op == 3) {\n\t\t\tint res = 0;\n\t\t\tfor (int i = 1; i <= tot; i++) res += query(s, rt[i]);\n\t\t\tcout << res << endl;\n\t\t\tlstans = res;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1670921256,
        "uid": 365542,
        "name": "SDqwq",
        "ccfLevel": 7,
        "title": "CF710F String Set Queries"
    },
    {
        "content": "[$\\text{Link}$](https://www.luogu.com.cn/problem/CF710F)\n\n\u8fd9\u4e2a\u9898\u5e94\u8be5\u81f3\u5c11\u6709 *2700 \u5427/kel\n\n## \u9898\u610f\n\u7ef4\u62a4\u4e00\u4e2a\u5b57\u7b26\u4e32\u96c6\u5408\uff0c\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\u5171 $q$ \u6b21\uff1a\n1. \u52a0\u5165\u5b57\u7b26\u4e32 $s$\n2. \u5220\u9664\u5df2\u6709\u5b57\u7b26\u4e32 $s$\n3. \u67e5\u8be2\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32\u5728\u7ed9\u51fa\u7684\u6a21\u677f\u4e32 $s$ \u4e2d\u51fa\u73b0\u7684\u6b21\u6570\n\n\u5f3a\u5236\u5728\u7ebf\u3002\n\n$q,\\sum|s|\\le10^6$.\n## \u601d\u8def\n\u8001\u5e08\u8981\u6211\u5199\u9898\u89e3\u3002\n\n\u5220\u9664\u662f\u5047\u7684\uff0c\u53ef\u4ee5\u770b\u4e3a\u4e24\u4e2a\u96c6\u5408\u5206\u522b\u4ee3\u8868\u52a0\u5165\u548c\u5220\u9664\uff0c\u6c42\u4e24\u4e2a\u96c6\u5408\u7684\u7b54\u6848\u5dee\u3002\n\n\u8003\u8651\u8be2\u95ee\u5f62\u5f0f\u5f88\u50cf $\\text{ACAM}$\uff0c\u5982\u679c\u6ca1\u6709\u5f3a\u5236\u5728\u7ebf\uff0c\u76f4\u63a5\u628a\u6240\u6709\u7684\u52a0\u5165\u4e32\u62c9\u51fa\u6765\u5efa\u51fa $\\text{ACAM}$\uff0c\u52a0\u5165\u5c31\u662f\u5b50\u6811\u52a0\uff0c\u67e5\u8be2\u5c31\u662f\u5728 $\\text{Fail}$ \u6811\u4e0a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u8def\u5f84\u7684\u70b9\u6743\u548c\u3002\n\n\u73b0\u5728\u5f3a\u5236\u5728\u7ebf\u4e86\uff0c\u4f46\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e4b\u524d\u6240\u6709\u7684\u64cd\u4f5c\u6784\u6210\u7684 $\\text{ACAM}$ \u548c\u5bf9\u5e94\u7684\u6743\u503c\u4fbf\u53ef\u4ee5\u7b80\u5355\u67e5\u8be2\u3002\n\n\u8003\u8651\u5efa\u7acb $S$ \u4e2a $\\text{ACAM}$\uff0c\u5f53\u67d0\u4e2a $\\text{ACAM}$ \u8fbe\u5230\u67d0\u7279\u5b9a\u5927\u5c0f\u65f6\u4e0d\u518d\u52a0\u5165\u5b57\u7b26\u4e32\uff0c\u65b0\u5f00\u4e00\u4e2a $\\text{ACAM}$\uff0c\u5426\u5219\u5c06\u6b21\u4e32\u52a0\u5165 $\\text{ACAM}$ \u5e76\u91cd\u6784\u3002\u6bcf\u6b21\u8be2\u95ee\u904d\u5386\u6240\u6709 $\\text{ACAM}$ \u6c42\u5bf9\u5e94\u7b54\u6848\u3002\u53d1\u73b0\u6bcf\u4e2a\u5b57\u7b26\u4e32\u53ea\u4f1a\u5728\u91cd\u6784\u4e2d\u51fa\u73b0 $O(\\dfrac{n}S)$ \u6b21\uff0c\u8be2\u95ee\u6709 $O(S)$ \u4e2a $\\text{ACAM}$\uff0c\u4ee4 $S=O(\\sqrt n)$ \u5219\u590d\u6742\u5ea6\u662f $O(n\\sqrt n)$\uff0c\u65e0\u6cd5\u8fbe\u5230~~\u6211\u7684~~\u8981\u6c42\u3002\n\n\u8003\u8651\u5c06\u5927\u5c0f\u76f8\u540c\u7684 $\\text{ACAM}$ \u5408\u5e76\uff0c\u6bcf\u6b21\u5408\u5e76\u66b4\u529b\u5408\u5e76 $\\text{Trie}$\uff0c\u91cd\u5efa $\\text{Fail}$ \u6811\u5e76\u8ba1\u7b97\u5b50\u6811\u52a0\u5e26\u6765\u7684\u8d21\u732e\uff0c\u52a0\u5165\u5b57\u7b26\u4e32\u65f6\u76f4\u63a5\u5efa\u7acb\u5927\u5c0f\u4e3a $1$ \u7684 $\\text{ACAM}$\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e2a $\\text{ACAM}$ \u5927\u5c0f\u4e3a $2^i$\uff0c\u4e14 $i$ \u4e92\u4e0d\u76f8\u540c\u3002\u6bcf\u4e2a\u5b57\u7b26\u4e32\u53ea\u4f1a\u5408\u5e76 $O(\\log n)$ \u6b21\uff0c\u540c\u65f6\u53ea\u4f1a\u51fa\u73b0 $O(\\log n)$ \u4e2a $\\text{ACAM}$\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u4e00\u822c\u79f0\u8fd9\u79cd\u65b9\u6cd5\u4e3a**\u4e8c\u8fdb\u5236\u5206\u7ec4**\uff0c\u6709\u65f6\u4f1a\u6709\u5f3a\u5927\u7684\u4f5c\u7528\u3002\n\n\u4ee3\u7801\uff08\u5f3a\u5236\u5728\u7ebf\u65b9\u6cd5\u4e0e\u9898\u76ee\u63cf\u8ff0\u4e0d\u540c\uff0c\u4ec5\u4f9b\u53c2\u8003\uff09\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nnamespace IO{//by cyffff\n\t\n}\nconst int N=1e6+10;\nstruct ACAM{\n\tint cnt,rts,tr[N][26],tr2[N][26];\n\tint rt[N],fail[N],val[N],siz[N];\n\tint delcnt,del[N];\n\tll tmp[N];\n\tinline int newnode(){\n\t\treturn delcnt?del[delcnt--]:++cnt;\n\t}\n\tinline void insert(char *s,int &rt){\n\t\tif(!rt) rt=newnode();\n\t\tint n=strlen(s+1);\n\t\tint cur=rt;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tint c=s[i]-'a';\n\t\t\tif(!tr[cur][c])\n\t\t\t\ttr[cur][c]=newnode();\n\t\t\tcur=tr[cur][c];\n\t\t}\n\t\tval[cur]++;\n\t}\n\tinline void makefail(int rt){\n\t\tqueue<int>q;\n\t\tfail[rt]=rt;\n\t\tfor(int i=0;i<26;i++)\n\t\t\tif(tr[rt][i]){\n\t\t\t\ttr2[rt][i]=tr[rt][i];\n\t\t\t\tfail[tr[rt][i]]=rt;\n\t\t\t\tq.push(tr[rt][i]);\n\t\t\t}else{\n\t\t\t\ttr2[rt][i]=rt;\n\t\t\t}\n\t\twhile(!q.empty()){\n\t\t\tint cur=q.front();\n\t\t\tq.pop();\n\t\t\ttmp[cur]=val[cur]+tmp[fail[cur]];\n\t\t\tfor(int i=0;i<26;i++)\n\t\t\t\tif(tr[cur][i]){\n\t\t\t\t\ttr2[cur][i]=tr[cur][i];\n\t\t\t\t\tfail[tr[cur][i]]=tr2[fail[cur]][i];\n\t\t\t\t\tq.push(tr[cur][i]);\n\t\t\t\t}else{\n\t\t\t\t\ttr2[cur][i]=tr2[fail[cur]][i];\n\t\t\t\t}\n\t\t}\n\t}\n\tinline int merge(int x,int y){\n\t\tif(!x||!y) return x+y;\n\t\tval[x]+=val[y];\n//\t\ttmp[y]=0;\n//\t\tdel[++delcnt]=y;\n\t\tfor(int i=0;i<26;i++)\n\t\t\ttr[x][i]=merge(tr[x][i],tr[y][i]);//,tr[y][i]=0;\n\t\treturn x;\n\t}\n\tinline void insert(char *s){\n\t\tsiz[++rts]=1;\n\t\tinsert(s,rt[rts]);\n\t\twhile(siz[rts-1]==siz[rts]){\n\t\t\tsiz[rts-1]+=siz[rts];\n\t\t\trt[rts-1]=merge(rt[rts-1],rt[rts]);\n\t\t\trt[rts]=0;\n\t\t\trts--;\n\t\t}\n\t\tmakefail(rt[rts]);\n\t}\n\tinline ll query(char *s){\n\t\tint n=strlen(s+1);\n\t\tll ans=0; \n\t\tfor(int i=1;i<=rts;i++){\n\t\t\tint cur=rt[i];\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tcur=tr2[cur][s[j]-'a'];\n\t\t\t\tans+=tmp[cur];\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}add,del; \nint q;\nchar str[N];\nll last;\n/*\n6\n1 . 25\n1 ab 2\n3 abcab 2\n2 ab 0\n1 ab 2\n3 ababab 0\n*/\nint main(){\n\tq=read();\n\twhile(q--){\n\t\tint opt=read();\n\t\treadstr(str);\n\t\tint n=strlen(str+1);\n\t\tif(n==1&&str[1]=='.') n=0; \n\t\tll tmp=read()^last;\n\t\tstr[n+1]=tmp+'a',str[n+2]=0;\n\t\tif(opt==1) add.insert(str);\n\t\tif(opt==2) del.insert(str);\n\t\tif(opt==3) write(last=add.query(str)-del.query(str)),putc('\\n');\n\t}\n\tflush();\n}\n```\n\u518d\u89c1 qwq~",
        "postTime": 1645162785,
        "uid": 365127,
        "name": "cyffff",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF710F\u3010String Set Queries\u3011"
    },
    {
        "content": "\u5b57\u7b26\u4e32\uff1f\u54c8\u5e0c\uff01\n\n\u5bb9\u6613\u53d1\u73b0 $|s_i|$ \u7684\u957f\u5ea6\u6709 $O(\\sqrt{\\sum|s_i|})$ \u79cd\u3002\n\n\u5339\u914d\u6a21\u677f\u4e32 $S$ \u65f6\uff0c\u8003\u8651\u5176\u6240\u6709**\u957f\u5ea6\u4e3a** $k|\\exists s_i,|s_i|=k$ \u7684\u5b50\u4e32\uff08\u800c\u975e\u6240\u6709\u5b50\u4e32\uff09 $T$\uff08$O(\\sum|s_i|\\sqrt{\\sum|s_i|})$ \u79cd\uff09\uff0c\u7d2f\u8ba1 $T$ \u5728\u96c6\u5408\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u6ce8\u610f\u6b64\u7b97\u6cd5\u590d\u6742\u5ea6\u57fa\u4e8e $k$ \u7684\u79cd\u7c7b\u6570 $O(\\sqrt{\\sum|s_i|})$\uff0c\u800c\u4e0d\u662f $S$ \u7684\u5b50\u4e32\u957f\u5ea6\u79cd\u7c7b\u6570 $O(\\sum|s_i|)$\uff0c\u8fbe\u5230\u4f18\u5316\u76ee\u7684\u3002\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <unordered_map>\n#define B 233ll\n#define M 1000000007\nusing namespace std;\nchar s[300050];\nlong long b[300050];\nint n, m, o, x, z, f[300050], d[300050], r[300050];\nunordered_map<int, int> c[650];\nint main()\n{\n    scanf(\"%d\", &m);\n    for (int i = b[0] = 1; i <= 300000; ++i)\n        b[i] = b[i - 1] * B % M;\n    while (m--)\n    {\n        scanf(\"%d%s\", &o, s + 1);\n        n = strlen(s + 1);\n        for (int i = 1; i <= n; ++i)\n            f[i] = (f[i - 1] * B + s[i]) % M;\n        switch (o)\n        {\n        case 1:\n            r[x = d[n] ? d[n] : d[n] = ++z] = n;\n            ++c[x][f[n]];\n            break;\n        case 2:\n            --c[d[n]][f[n]];\n            break;\n        case 3:\n            x = 0;\n            for (int p = 1; p <= z; ++p)\n                for (int l = 1, k; l + r[p] - 1 <= n; ++l)\n                    x += c[p].count(k = (f[l + r[p] - 1] + M - f[l - 1] * b[r[p]] % M) % M) ? c[p][k] : 0;\n            printf(\"%d\\n\", x);\n            fflush(stdout);\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1675487411,
        "uid": 388651,
        "name": "5k_sync_closer",
        "ccfLevel": 7,
        "title": "CF710F String Set Queries \u9898\u89e3"
    },
    {
        "content": "\u672c\u849f\u84bb\u6765\u4ecb\u7ecd\u4e00\u4e0b\u4e09\u79cd\u65b9\u6cd5\u5427\n\n[codeforces \u4f20\u9001\u95e8](https://codeforces.com/contest/710/problem/F) & [\u6d1b\u8c37\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF710F)\n\n---\n\n## Solution 1\uff08\u66b4\u529b&\u54c8\u5e0c\uff09\n\n\u7b2c\u4e00\u79cd\u65b9\u6cd5\u6bd4\u8f83\u66b4\u529b\uff0c\u5b83\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff1a\n\n> \u6240\u6709\u5b57\u7b26\u4e32\u7684\u603b\u957f\u4e0d\u8d85\u8fc7 $m=3\\times10^5$\uff0c\u4e0d\u96be\u60f3\u5230\u6700\u591a\u6709\u4e0d\u8d85\u8fc7        $2\\sqrt m$ \u79cd\u4e0d\u540c\u7684\u957f\u5ea6\u3002\u5927\u6982\u662f\u4e0d\u8d85\u8fc7 800 \u7684\u3002\u6240\u4ee5\u904d\u5386\u5b50\u4e32\u65f6\u53ea\u9700\u8981\u904d\u5386 $\\operatorname O(\\sqrt m)$ \u79cd\u957f\u5ea6\u7684\u5b50\u4e32\u5c31\u884c\u4e86\u3002\n\n\u6839\u636e\u8fd9\u4e00\u7ed3\u8bba\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u5730\u7ef4\u62a4 $\\operatorname O(\\sqrt m)$ \u4e2a set\uff0c\u91cc\u9762\u5b58\u6240\u6709\u5bf9\u5e94\u957f\u5ea6\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c\u3002\n\n- \u63d2\u5165&\u5220\u9664\uff1a\u5bf9\u8be5\u957f\u5ea6\u7684 set \u8fdb\u884c\u76f8\u5e94\u64cd\u4f5c\u3002$\\operatorname O(\\log m)$.\n- \u8be2\u95ee\uff1a\u66b4\u529b\u7684\u904d\u5386\u6587\u672c\u4e32 $s$ \u6240\u6709\u51fa\u73b0\u8fc7\u7684\u957f\u5ea6\u7684\u5b50\u4e32\uff0c\u7528\u6eda\u52a8\u54c8\u5e0c\u6bcf\u6b21\u53bb\u5bf9\u5e94 set \u91cc\u67e5\u627e\u54c8\u5e0c\u503c\u3002$\\operatorname O(\\sqrt m \\log m)$.\n\n\u8fd9\u6837\u4e00\u6765\u5c31\u80fd\u66b4\u529b\u7684\u89e3\u51b3\u3002\u6ce8\u610f\u4e00\u4e0b\u54c8\u5e0c\u7684\u7ec6\u8282\uff0c\u6700\u597d\u5f00\u53cc\u54c8\u5e0c\u907f\u514d\u51b2\u7a81\uff0c~~\u56e0\u4e3a\u8fd9\u9898\u6570\u636e\u5f88\u5f3a\uff08\u771f\u5b9e\u4f53\u4f1a\uff09~~\u3002\n\n- \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\operatorname O(m\\sqrt m \\log m)$\n\n- \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$\\operatorname O(m)$\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define pb push_back\n#define pii pair<int,int>\n#define mp make_pair\n#define F first\n#define S second\nusing namespace std;\nconst ll p1=37,M1=998244353,p2=97,M2=1610612741;//\u53cc\u54c8\u5e0c\u5e38\u6570&\u6a21\u6570\nint q,id[300005],sz[805],num;\nll pw1[300005],pw2[300005];\nset<ll> se[805];//\u5b58\u4e0d\u540c\u957f\u5ea6\u54c8\u5e0c\u503c\u7684set\nint main()\n{\n\tios::sync_with_stdio(false),cin.tie(nullptr);\n\tcin>>q;\n\tmemset(id,-1,sizeof(id));\n\tpw1[0]=pw2[0]=1ll;\n\tfor(int i=1;i<=300000;i++)//\u9884\u5904\u7406\u54c8\u5e0c\u5e38\u6570\u7684\u5e42\n\t{\n\t\tpw1[i]=pw1[i-1]*p1%M1;\n\t\tpw2[i]=pw2[i-1]*p2%M2;\n\t}\n\twhile(q--)\n\t{\n\t\tint tp;string s;\n\t\tcin>>tp>>s;\n\t\tint len=s.size();\n\t\tif (tp==1)\n\t\t{\n\t\t\tll H1=0ll,H2=0ll;\n\t\t\tfor(int i=0;i<len;i++)//\u6c42\u53cc\u54c8\u5e0c\u503c\n\t\t\t{\n\t\t\t\tH1=(H1*p1+(ll)(s[i]-'a'))%M1;\n\t\t\t\tH2=(H2*p2+(ll)(s[i]-'a'))%M2;\n\t\t\t}\n\t\t\tif (id[len]==-1)\n\t\t\t{\n\t\t\t\tsz[num]=len;\n\t\t\t\tid[len]=num++;\n\t\t\t}\n\t\t\tse[id[len]].insert(H1<<31|H2);//\u63d2\u5165\n\t\t}\n\t\telse if (tp==2)\n\t\t{\n\t\t\tll H1=0ll,H2=0ll;\n\t\t\tfor(int i=0;i<len;i++)\n\t\t\t{\n\t\t\t\tH1=(H1*p1+(ll)(s[i]-'a'))%M1;\n\t\t\t\tH2=(H2*p2+(ll)(s[i]-'a'))%M2;\n\t\t\t}\n\t\t\tse[id[len]].erase(H1<<31|H2);//\u5220\u9664\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint n=s.size(),res=0;\n\t\t\tfor(int i=0;i<num;i++)//\u679a\u4e3e\u957f\u5ea6\n\t\t\t{\n\t\t\t\tint len=sz[i];\n\t\t\t\tif (len>n)\n\t\t\t\t\tcontinue;\n\t\t\t\tll H1=0ll,H2=0ll;\n\t\t\t\tfor(int j=0;j<len;j++)\n\t\t\t\t{\n\t\t\t\t\tH1=(H1*p1+(ll)(s[j]-'a'))%M1;\n\t\t\t\t\tH2=(H2*p2+(ll)(s[j]-'a'))%M2;\n\t\t\t\t}\n\t\t\t\tres+=se[i].count(H1<<31|H2);\n\t\t\t\tfor(int j=len;j<n;j++)//\u6eda\u52a8\u54c8\u5e0c\u904d\u5386\n\t\t\t\t{\n\t\t\t\t\tH1=(H1*p1+(ll)(s[j]-'a')+M1-pw1[len]*(ll)(s[j-len]-'a')%M1)%M1;\n\t\t\t\t\tH2=(H2*p2+(ll)(s[j]-'a')+M2-pw2[len]*(ll)(s[j-len]-'a')%M2)%M2;\n\t\t\t\t\tres+=se[i].count(H1<<31|H2);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout<<res<<endl;cout.flush();\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n---\n\n## Solution 2 \uff08\u66b4\u529b&trie \u6811&KMP\uff09\n\n\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u662f\u6211\u60f3\u7684\uff0c\u662f\u53e6\u4e00\u4f4d\u5de8\u4f6c\u5199\u51fa\u6765\u7684\u3002\u5f53\u65f6\u770b\u7684\u6211\u5927\u4e3a\u9707\u64bc\u3002\n\n\u4ed6\u7684\u66b4\u529b\u601d\u8def\u662f\uff1a\u5c06\u8f83\u5c0f\u7684\u6a21\u5f0f\u4e32\u90fd\u63d2\u5165\u5230 **trie \u6811**\u4e2d\uff0c\u8f83\u5927\u7684\u6a21\u5f0f\u4e32\u5355\u72ec\u6254\u5728\u4e00\u904d\u7528 **KMP** \u5339\u914d\u3002\n\n\u6bcf\u6b21\u67e5\u8be2\u65f6\uff0c\u5bf9\u6587\u672c\u4e32\u7684\u6240\u6709\u540e\u7f00\u6254\u5230 **trie** \u91cc\u67e5\u8be2\u5b50\u4e32\u5339\u914d\u4e2a\u6570\uff0c\u6c42\u603b\u548c\u3002\u518d\u628a\u6587\u672c\u4e32\u4e0e\u6240\u6709\u8f83\u5927\u6a21\u5f0f\u4e32\u5355\u72ec **KMP**\u3002\n\n~~\u770b\u5230\u8fd9\u4e2a\u65b9\u6cd5\u80fd\u8fc7\u7684\u65f6\u5019\uff0c\u6211\u751a\u81f3\u5f00\u59cb\u601d\u8003 AC \u81ea\u52a8\u673a\u89e3\u6cd5\u6709\u4ec0\u4e48\u5b58\u5728\u7684\u5fc5\u8981\u3002~~\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 300010;\n\nstruct Trie{//trie\u6811\u7684\u6784\u4f53\npublic:\n\tstatic const int maxn = 300010, maxc = 26;\n    int child[maxn][maxc], value[maxn];\n\tint cnttrie, root;\n\t\n    int newnode(){\n        cnttrie++; value[cnttrie] = 0;\n        memset(child[cnttrie], -1, sizeof(child[cnttrie]));\n        return cnttrie;\n    }\n    \npublic:\n\tvoid init(){\n        cnttrie = root = 0; value[root] = 0;\n        memset(child[root], -1, sizeof(child[root]));\n    }\n    void insert(char *s,int val){\n        int x = root;\n        for (int i = 0; s[i]; i++){\n            int d = s[i] - 'a';\n            if (child[x][d] == -1){\n                child[x][d] = newnode();\n            }\n            x = child[x][d];\n        }\n        value[x] += val;\n    }\n    int search(char *s){\n        int sum = 0, x = root;\n        for (int i = 0; s[i]; i++){\n            int d = s[i] - 'a';\n            if (child[x][d] == -1){\n                break;\n            }\n            x = child[x][d];\n            sum += value[x];\n        }\n        return sum;\n    }\n}trie;\n\nclass KMP{//KMP\u5339\u914d\u7684\u677f\u5b50\nprivate:\n\tstatic const int maxn = 300010;\n    int next[maxn];\n    void getnext(string s, int len){\n        memset(next, 0, sizeof(next));\n        int i = 0, j = -1; next[0] = -1;\n        while (i < len){\n            if (j == -1 || s[i] == s[j]){\n                next[++i] = ++j;\n            }else{\n                j = next[j];\n            }\n        }\n    }\npublic:\n    int search(string s, char *str){\n        int ret = 0, j = 0;\n\t\tint lens = s.size(), lenstr = strlen(str);\n        getnext(s, s.size());\n        for (int i = 0; i < lenstr; i++){\n            while (j > 0 && s[j] != str[i]){\n                j = next[j];\n            }\n            if (s[j] == str[i]){\n                j++;\n            }\n            if (j == lens){\n                ret++; j = next[j];\n            }\n        }\n        return ret;\n    }\n}kmp;\n\nstring lib[50];\nchar str[maxn];\nint cnt, cntx[50];\n\nint main(){\n\tint T = 1; //cin >> T;\n    int t, m;\n\tint len, val;\n    while (T--){\n    \tcin >> m;\n        trie.init();\n\t\tcnt = 0; memset(cntx, 0, sizeof(cntx));\n        for (int i = 1; i <= m; i++){\n            scanf(\"%d%s\", &t, str);\n            len = strlen(str);\n            if (t == 1 || t == 2){\n                val = (t == 1 ? 1 : -1);//\u5b57\u7b26\u4e32\u6743\u503c\uff0c\u63d2\u5165\u4e3a1\uff0c\u5220\u9664\u4e3a-1\n                if (len <= 1000){//\u6a21\u5f0f\u4e32\u957f\u5ea6<=1000\uff0c\u63d2\u5165trie\n                    trie.insert(str, val);\n                }else{//\u957f\u5ea6>1000,\u5355\u72ec\u6254\u5230\u4e00\u8fb9\n                    lib[cnt] = string(str);\n                    cntx[cnt++] = val;\n                }\n            }else{\n                long long ans = 0;\n                for (int i = 0; i < len; i++){//\u5bf9\u6240\u6709\u540e\u7f00\u5728trie\u4e0a\u67e5\u627e\n                    ans += trie.search(str + i);\n                }\n                for (int i = 0; i < cnt; i++){//\u5bf9\u6240\u6709\u5355\u72ec\u7684\u6a21\u5f0f\u4e32KMP\n                    if (lib[i].length() > len){ continue; }\n                    ans += kmp.search(lib[i], str)*cntx[i];\n                }\n                printf(\"%lld\\n\", ans);\n                fflush(stdout);\n            }\n        }\n    }\n    return 0;\n}\n```\n\n- \u5173\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u8fd9\u91cc\u4ee5 1000 \u4e3a\u6807\u51c6\u7ebf\u5206\u7c7b\u7684\u8bbe\u8ba1\u6bd4\u8f83\u5de7\u5999\uff0c\u80fd\u5f88\u597d\u7684\u63a7\u5236 trie \u4e0a\u64cd\u4f5c\u548c KMP \u7684\u590d\u6742\u5ea6\u90fd\u4e0d\u4f1a\u5f88\u9ad8\u3002\n\n- \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$\\operatorname O(26m)$\n\n---\n\n## Solution 3 \uff08\u4e8c\u8fdb\u5236\u5206\u7ec4 &AC \u81ea\u52a8\u673a\uff09\n\n\u8fd9\u4e2a\u89e3\u6cd5\u662f\u6700\u5e38\u89c4\u7684\uff0c\u5176\u4ed6\u9898\u89e3\u4ecb\u7ecd\u7684\u4e5f\u5dee\u4e0d\u591a\u4e86\u3002\u5927\u81f4\u601d\u60f3\u5c31\u662f\u56e0\u4e3a **AC \u81ea\u52a8\u673a**\u6bd4\u8f83\u96be\u652f\u6301\u5728\u7ebf\u7684\u4fee\u6539\u67e5\u8be2\uff0c\u90a3\u6837\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u6784\u9020 fail \u6307\u9488\uff0c\u590d\u6742\u5ea6\u4f1a\u5f88\u5927\u3002\u6240\u4ee5\u8003\u8651\u7ef4\u62a4\u4e0d\u8d85\u8fc7 $\\log m$ \u4e2a AC \u81ea\u52a8\u673a\u3002\u7b2c $i$ \u4e2a\u81ea\u52a8\u673a\u50a8\u5b58 $2^i$ \u4e2a\u6a21\u5f0f\u4e32\uff0c\u5982\u4e0b\uff1a\n\n> $8,4,1$\n>\n> \u63d2\u5165\u4e00\u4e2a\u65b0\u6a21\u5f0f\u4e32\uff0c\u5c31\u65b0\u5efa\u4e00\u7ec4 AC \u81ea\u52a8\u673a\u3002\n>\n> $8,4,1,1$\n>\n> \u7136\u540e\u53ea\u8981\u524d\u4e00\u4e2a\u81ea\u52a8\u673a\u5927\u5c0f\u4e0e\u5f53\u524d\u65b0\u81ea\u52a8\u673a\u76f8\u7b49\uff0c\u5c31\u4e0d\u65ad\u5411\u524d\u66b4\u529b\u5408\u5e76\u3002\n>\n> $8,4,2$\n>\n> \u5982\u679c\u518d\u63d2\u5165:\n>\n> $8,4,2,1$\n>\n> $8,4,2,1,1\\rightarrow 8,4,2,2\\rightarrow 8,4,4\\rightarrow 8,8 \\rightarrow 16$\n\n\u81f3\u4e8e\u5408\u5e76\u7684\u65b9\u5f0f\uff0c\u5bf9\u6bcf\u4e2a AC \u81ea\u52a8\u673a\u7ef4\u62a4\u4e00\u4e2a vector \u5bb9\u5668\u5b58\u91cc\u9762\u6240\u6709\u7684\u6a21\u5f0f\u4e32\uff0c\u7136\u540e\u53ea\u8981\u524d\u9762\u53ef\u4ee5\u5408\u5e76\uff0c\u5c31\u5c06\u5176\u4e2d\u6240\u6709\u6a21\u5f0f\u4e32\u62ff\u51fa\u6765\u5411\u524d\u5408\u5e76\u5373\u53ef\u3002\u6bcf\u6b21\u5408\u5e76\u7ed3\u675f\u53ea\u9700\u8981\u5bf9\u6700\u540e\u4e00\u4e2a\u88ab\u5408\u5e76\u7684 AC \u81ea\u52a8\u673a\u91cd\u65b0\u6784\u5efa fail \u6307\u9488\u3002\n\n> \u5220\u9664\u64cd\u4f5c\uff1a\u53ef\u4ee5\u89c6\u4e3a\u63d2\u5165\u4e86\u4e00\u4e2a\u6743\u503c\u4e3a -1 \u7684\u5b57\u7b26\u4e32\uff0c\u540c\u6837\u7528\u65b0\u5efa\u81ea\u52a8\u673a\u5411\u524d\u5408\u5e76\u7684\u65b9\u5f0f\u3002\n>\n> \u67e5\u8be2\u64cd\u4f5c\uff1a\u904d\u5386\u6240\u6709 AC \u81ea\u52a8\u673a\uff0c\u8fdb\u884c\u5339\u914d\uff0c\u7b54\u6848\u4e3a\u5339\u914d\u4e2a\u6570\u603b\u548c\u3002\n\n\u53ef\u4ee5\u770b\u51fa\u4e00\u4e2a\u6a21\u5f0f\u4e32\u6700\u591a\u88ab\u5411\u524d\u5408\u5e76 $\\log m$ \u6b21\uff0c\u4e14\u6700\u591a\u5b58\u5728 $\\log m$ \u7ec4 AC \u81ea\u52a8\u673a\u3002\n\n- \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\operatorname O(m\\log m)$\n\n- \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(26m)$\n\n\u4e00\u4e9b\u7ec6\u8282 ~~\uff08\u8840\u7684\u6559\u8bad\uff09~~\uff1a\n\n1. \u5982\u679c\u6bcf\u4e2a AC \u81ea\u52a8\u673a\u90fd\u662f\u7528\u6570\u7ec4\u7684\u5f62\u5f0f\uff0c\u90a3\u4e48\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $\\operatorname O(26m\\log m)$\uff0c\u662f\u4f1a **MLE** \u7684\u3002\u6240\u4ee5\u8fd9\u91cc\u8981\u7528**\u52a8\u6001\u5f00\u70b9**\u7684 AC \u81ea\u52a8\u673a\uff0c\u7528 vector \u5b58\u50a8\u6570\u636e\u3002\n2. \u5408\u5e76\u7684\u8fc7\u7a0b\u8981\u6ce8\u610f\u4fdd\u8bc1\u6bcf\u4e2a\u5b57\u7b26\u4e32\u53ea\u88ab\u62f7\u8d1d\u4e00\u6b21\uff0c\u5426\u5219\u590d\u6742\u5ea6\u6ca1\u6cd5\u63a7\u5236\u3002\n3. \u56e0\u4e3a\u672c\u9898\u6570\u636e\u8f83\u5f3a\uff0cAC \u81ea\u52a8\u673a\u90e8\u5206\u7684\u4ee3\u7801\u4e00\u5b9a\u8981\u63a7\u5236\u5e38\u6570\u3002\n4. AC \u81ea\u52a8\u673a\u67e5\u8be2\u7684\u51fd\u6570\u4e2d\uff0c\u4e0d\u80fd\u66b4\u529b\u8df3 fail \u6307\u9488\uff0c\u8d1f\u8d23\u4f1a\u88ab\u7b2c 27 \u7ec4\u6570\u636e\u5361\u6389\u3002\u8981\u6ce8\u610f\u5728\u6784\u5efa fail \u6307\u9488\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9884\u5904\u7406\u4e00\u4e2a\u70b9\u4ee5\u53ca\u5b83 fail \u6307\u9488\u540e\u9762\u7684\u6240\u6709\u70b9\u6743\u503c\u603b\u548c\uff0c\u8fd9\u6837\u80fd\u907f\u514d\u8df3 fail\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u67e5\u8be2\u8fc7\u7a0b\u4e2d\u53ea\u88ab\u904d\u5386\u4e00\u6b21\u3002\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define pb push_back\n#define pii pair<int,int>\n#define mp make_pair\n#define F first\n#define S second\nusing namespace std;\nint m,pr;\nstruct AC//AC\u81ea\u52a8\u673a\u7ed3\u6784\u4f53\n{\n\tint trienum;\n\tvector<int> cnt,tot,son[30],fail;//\u52a8\u6001\u5f00\u70b9\u6570\u7ec4\n\tvector<pair<string,int> > v; //\u50a8\u5b58\u5185\u90e8\u6240\u6709\u5b57\u7b26\u4e32\u53ca\u5176\u6743\u503c\u7684 vector\n\tvoid init()//\u521d\u59cb\u5316\n\t{\n\t\tv.clear();\n\t\tcnt.clear(),fail.clear(),tot.clear();\n\t\ttrienum=0;\n\t\tcnt.pb(0),fail.pb(0),tot.pb(0);\n\t\tfor(int i=0;i<26;i++)\n\t\t{\n\t\t\tson[i].clear();\n\t\t\tson[i].pb(0);\n\t\t}\n\t}\n\tvoid ins(string t,int x)//\u63d2\u5165\n\t{\n\t\tv.pb(mp(t,x));\n\t\tint p=0;\n\t\tfor(int i=0;i<(int)t.size();i++)\n\t\t{\n\t\t\tif (son[t[i]-'a'][p]<=0)\n\t\t\t{\n\t\t\t\tfor(int j=0;j<26;j++)\n\t\t\t\t\tson[j].pb(0);\n\t\t\t\tcnt.pb(0),fail.pb(0),tot.pb(0);\n\t\t\t\tson[t[i]-'a'][p]=++trienum;\n\t\t\t}\n\t\t\tp=son[t[i]-'a'][p];\n\t\t}\n\t\tcnt[p]+=x;\n\t}\n\tvoid build()//bfs\u6784\u5efafail\u6307\u9488\n\t{\n\t\ttot.clear();\n\t\ttot.resize(trienum+1,0);\n\t\tqueue<int> q;\n\t\tfor(int i=0;i<26;i++)\n\t\t\tif (son[i][0]>0)\n\t\t\t{\n\t\t\t\tq.push(son[i][0]);\n\t\t\t\ttot[son[i][0]]=cnt[son[i][0]];\n\t\t\t}\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint u=q.front();\n\t\t\tq.pop();\n\t\t\tfor(int i=0;i<26;i++)\n\t\t\t\tif (son[i][u]>0)\n\t\t\t\t{\n\t\t\t\t\tfail[son[i][u]]=abs(son[i][fail[u]]);\n\t\t\t\t\ttot[son[i][u]]=cnt[son[i][u]]+tot[fail[son[i][u]]];//cnt\u662f\u5355\u70b9\u6743\u503c\uff0ctot\u662f\u8fd9\u4e2a\u70b9\u548cfail\u6307\u9488\u4e4b\u540e\u7684\u6240\u6709\u70b9\u6743\u503c\u603b\u548c\n\t\t\t\t\tq.push(son[i][u]);\n\t\t\t\t}\n\t\t\t\telse//\u8fd9\u4e00\u6b65\u662f\u6784\u9020trie\u56fe\uff0c\u80fd\u65b9\u4fbf\u5931\u914d\u65f6\u4e00\u6b65\u5230\u8fbefail\u6307\u9488\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u8fd9\u91cc\u7528\u8d1f\u6570\u6807\u8bb0\uff0c\u8868\u793a\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u513f\u5b50\u662f\u4e0d\u5b58\u5728\u7684\n\t\t\t\t\tson[i][u]=-abs(son[i][fail[u]]);\n\t\t}\n\t}\n\tll query(string t)//\u67e5\u8be2\n\t{\n\t\tint u=0;\n\t\tll res=0ll;\n\t\tfor(int i=0;i<(int)t.size();i++)\n\t\t{\n\t\t\tu=abs(son[t[i]-'a'][u]);\n\t\t\tres+=tot[u];//\u907f\u514d\u4e86\u8df3fail\u7684\u8fc7\u7a0b\n\t\t}\n\t\treturn res;\n\t}\n}ac[25];\nint main()\n{\n\tint tp;\n\tchar s[300005];\n\tscanf(\"%d\",&m);\n\twhile(m--)\n\t{\n\t\tscanf(\"%d%s\",&tp,s);\n\t\tif (tp<3)\n\t\t{\n\t\t\tint val=(tp==1?1:-1);//\u5b57\u7b26\u4e32\u6743\u503c\uff0c\u63d2\u5165\u4e3a1\uff0c\u5220\u9664\u4e3a-1\n\t\t\tint cur=0,lst=pr;\n\t\t\tac[pr].init();\n\t\t\tac[pr].ins(s,val);\n\t\t\twhile(pr&&(int)ac[pr-1].v.size()==(int)ac[pr].v.size()+cur)//\u5411\u524d\u5408\u5e76\n\t\t\t\tcur+=(int)ac[pr--].v.size();\n\t\t\tfor(int i=pr+1;i<=lst;i++)\n\t\t\t\tfor(auto p:ac[i].v)\n\t\t\t\t\tac[pr].ins(p.F,p.S);\n\t\t\tac[pr++].build();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tll res=0ll;\n\t\t\tfor(int i=0;i<pr;i++)\n\t\t\t\tres+=ac[i].query(s);\n\t\t\tprintf(\"%lld\\n\",res);\n\t\t\tfflush(stdout);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1651633507,
        "uid": 209168,
        "name": "FelFa_1414666",
        "ccfLevel": 7,
        "title": "CF710F String Set Queries \u9898\u89e3"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ef4\u62a4\u4e00\u4e2a\u5b57\u7b26\u4e32\u96c6\u5408 $S$\uff0c\u521d\u59cb\u4e3a\u7a7a\u3002$m$ \u6b21\u64cd\u4f5c\uff1a\n\n- `1 s` \u63d2\u5165\u5b57\u7b26\u4e32 $s$ \u5230 $S$ \u4e2d\u3002\u4fdd\u8bc1\u6b64\u65f6 $s$ \u4e0d\u5728 $S$ \u4e2d\u3002\n- `2 s` \u5220\u9664\u5b57\u7b26\u4e32 $s$\u3002\u4fdd\u8bc1\u6b64\u65f6 $s$ \u5728 $S$ \u4e2d\u3002\n- `3 s` \u8be2\u95ee $S$ \u4e2d\u7684\u4e32\u5728 $s$ \u4e2d\u603b\u5171\u51fa\u73b0\u591a\u5c11\u6b21\u3002\n\n$\\texttt{Data Range:} m,\\sum|s|\\le 3\\times 10^5,s$ \u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\uff0c**\u5f3a\u5236\u5728\u7ebf**\u3002\n\n## \u9898\u89e3\n\n\u9664\u4e86 AC \u81ea\u52a8\u673a + \u4e8c\u8fdb\u5236\u5206\u7ec4\uff0c\u672c\u9898\u8fd8\u6709\u4e00\u4e2a \u5e7f\u4e49 SAM + LCT \u7684\u505a\u6cd5\u3002\n\n\u7c7b\u4f3c [P5212 SubString](https://www.luogu.com.cn/problem/P5212)\uff0c\u7528\u5e7f\u4e49 SAM \u7ef4\u62a4\u8f93\u5165\u7684\u6240\u6709\u4e32\uff0c\u7528 LCT \u7ef4\u62a4 SAM \u7684 fail \u6811\u3002\n\n\u4e8e\u662f $1,2$ \u64cd\u4f5c\u53d8\u6210 LCT \u4e0a\u5355\u70b9\u4fee\u6539\uff0c\n\n$3$ \u64cd\u4f5c\u53d8\u4e3a\u67e5\u8be2\u82e5\u5e72\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u7684\u6743\u503c\u548c\u3002\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta((\\sum|s|)\\log(\\sum|s|))$\u3002\n\n\u56e0\u4e3a\u57fa\u672c\u90fd\u662f\u677f\u5b50\uff0c\u6240\u4ee5\u601d\u7ef4\u96be\u5ea6\u8f83\u4f4e\u3002\n\n\n\n```cpp\n/*\nthis code is made by wangrx.\n2021.11.19 11:38\n*/\n#include<stdio.h>\n#include<string.h>\ntypedef unsigned long long ull;\ntypedef unsigned int word;\nconst word siz=600010;\nstruct splay{\n\tsplay *l,*r,*fa;\n\tword tag,val,sum;\n\tinline void rev(word id){\n\t\ttag=(tag&1)^id;}\n\tinline void pushup(){\n\t\tsum=val;\n\t\tif(l) sum+=l->sum;\n\t\tif(r) sum+=r->sum;\n\t}\n\tinline void pushdown(){\n\t\tif(l) l->rev(tag);\n\t\tif(r) r->rev(tag);\n\t\tif(tag&1){\n\t\t\tsplay *swap=l;\n\t\t\tl=r,r=swap,tag&=~1;\n\t\t}\n\t}\n\tinline void linepush(){\n\t\tif(fa) fa->linepush();\n\t\tpushdown();\n\t}\n}p[siz];\n#define cyc(root,l,r) [&](){\t\t\t\\\n\tsplay *rt=root,*l=rt->l,*lr=l->r;\t\\\n\tl->fa=rt->fa,(root)=l;\t\t\t\t\\\n\tl->r=rt,rt->fa=l;\t\t\t\t\t\\\n\tif((rt->l=lr)) lr->fa=rt;\t\t\t\\\n\trt->pushup();\t\t\t\t\t\t\\\n}()//\u65cb\u8f6c\n#define lcyc(root) cyc(root,l,r)\n#define rcyc(root) cyc(root,r,l)\n#define dbcyc() (rff->l==root->fa?\t\t\t\t\t\t\t\\\n\t(rff->l->l==root? lcyc(rff):rcyc(rff->l)),lcyc(rff):\t\\\n\t(rff->r->r==root? rcyc(rff):lcyc(rff->r)),rcyc(rff))//\u53cc\u65cb\n#define pos(p) ((p)->fa->l==(p)? (p)->fa->l:(p)->fa->r)\ninline void Splay(splay *root){//\u4f38\u5c55\n\tfor(root->linepush();root->fa;)\n\t\tif(root->fa->fa)\n\t\t\tif(root->fa->fa->fa){\n\t\t\t\tsplay *&rff=pos(root->fa->fa);dbcyc();\n\t\t\t}else{splay *rff=root->fa->fa;dbcyc();}\n\t\telse if(root->fa->l==root)\n\t\t\troot=root->fa,lcyc(root);\n\t\telse root=root->fa,rcyc(root);\n\troot->pushup();\n}\ninline void access(word id){\n\tsplay *root=0,*next;\n\tfor(;next=p+id,id;id=next->tag>>1){\n\t\tSplay(next),next->pushdown();\n\t\tif(next->r) next->r->rev(id<<1),next->r->fa=0;\n\t\tif((next->r=root)) root->fa=next;\n\t\tnext->pushup(),root=next;\n\t}\n}\nstruct SAM{\n\tword next[siz][26];\n\tword floor[siz],fail[siz];\n\tword size,last;\n\tinline SAM(){\n\t\tfail[1]=0xffffffff;\n\t\tsize=last=1;\n\t}\n\t#define split()\t[&](){\t\t\t\t\t\t\t\t\\\n\t\tword old=*num;\t\t\t\t\t\t\t\t\t\\\n\t\tfloor[++size]=floor[last]+1;\t\t\t\t\t\\\n\t\tmemcpy(next[size],next[old],sizeof(next[0]));\t\\\n\t\taccess(old),Splay(p+old),p[old].pushdown();\t\t\\\n\t\tif((p[size].l=p[old].l)) p[size].l->fa=p+size;\t\\\n\t\tp[size].r=p+old,p[old].fa=p+size;\t\t\t\t\\\n\t\tp[old].l=p[old].r=0;\t\t\t\t\t\t\t\\\n\t\tp[old].pushup(),p[size].pushup();\t\t\t\t\\\n\t\tfail[size]=fail[old],fail[old]=size;\t\t\t\\\n\t\tfor(;last!=0xffffffff;last=fail[last])\t\t\t\\\n\t\t\tif(*(num=next[last]+c)==old) *num=size;\t\t\\\n\t\t\telse break;\t\t\t\t\t\t\t\t\t\\\n\t}()//\u5206\u88c2\u7ed3\u70b9\n\tinline void operator+=(char c){//SAM \u63d2\u5165\u7ed3\u70b9\n\t\tword *num;\n\t\tif(*(num=next[last]+c)){\n\t\t\tif(floor[*num]==floor[last]+1)\n\t\t\t\treturn void(last=*num);\n\t\t\treturn split(),void(last=size);\n\t\t}\n\t\tfloor[++size]=floor[last]+1;\n\t\tfor(;last!=0xffffffff;last=fail[last])\n\t\t\tif(*(num=next[last]+c)==0) *num=size;\n\t\t\telse if(floor[*num]==floor[last]+1)\n\t\t\t\treturn p[size].rev((fail[last=size]=*num)<<1);\n\t\t\telse return split(),p[size-1].rev(\n\t\t\t\t(fail[last=size-1]=size)<<1);\n\t\treturn p[size].rev((fail[last=size]=1)<<1);\n\t}\n}sam;\nword m;\nchar s[siz];\nint main(){\n\tscanf(\"%u\",&m);\n\tfor(word opt;m;--m){\n\t\tscanf(\"%u%s\",&opt,s);\n\t\tif(opt==3){\n\t\t\tull out=0;sam.last=1;\n\t\t\tfor(char c:s)\n\t\t\t\tif('a'<=c&&c<='z'){\n\t\t\t\t\tsam+=c-'a',access(sam.last);\n\t\t\t\t\tSplay(p+sam.last),p[sam.last].pushdown();\n\t\t\t\t\tout+=p[sam.last].sum;\n\t\t\t\t}else break;//\u67e5\u8be2\u82e5\u5e72\u70b9\u5230\u6839\u8def\u5f84\u7684\u6743\u503c\u548c\n\t\t\tprintf(\"%llu\\n\",out),fflush(stdout);\n\t\t}else{\n\t\t\tsam.last=1;\n\t\t\tfor(char c:s)\n\t\t\t\tif('a'<=c&&c<='z') sam+=c-'a';\n\t\t\t\telse break;\n\t\t\taccess(sam.last),Splay(p+sam.last),p[sam.last].pushdown();\n\t\t\tif(opt==1) p[sam.last].val++,p[sam.last].sum++;\n\t\t\telse p[sam.last].val--,p[sam.last].sum--;\n\t\t}//\u5355\u70b9\u4fee\u6539\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1637291681,
        "uid": 104726,
        "name": "wangrx",
        "ccfLevel": 7,
        "title": "CF710F String Set Queries"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/orzz/p/15201535.html)\n\n\u6211\u7684\u7b2c\u4e00\u7bc7\u9ed1\u9898\u9898\u89e3\uff0c\u5e94\u8be5\u597d\u597d\u5e86\u795d\u3002\n\n# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u96c6\u5408\uff0c\u652f\u6301\u7684\u64cd\u4f5c\u6709\u63d2\u5165\uff0c\u5220\u9664\u548c\u67e5\u8be2\u7ed9\u5b9a\u5b57\u7b26\u4e32\u5728\u7ed9\u51fa\u7684\u6a21\u677f\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u64cd\u4f5c\u6570 $m \\leq 3 \\times 10^5$\uff0c\u8f93\u5165\u5b57\u7b26\u4e32\u603b\u957f\u5ea6 $\\sum |s_i| \\leq 3\\times 10^5$\u3002\n\n\u672c\u9898\u5f3a\u5236\u5728\u7ebf\u3002\n\n# \u89e3\u9898\u601d\u8def\n\n\u9996\u5148\u770b\u5230\u591a\u6a21\u5f0f\u5339\u914d\u5b57\u7b26\u4e32\u5e94\u8be5\u60f3\u5230 `AC` \u81ea\u52a8\u673a\u3002\n\n\u5173\u4e8e `AC` \u81ea\u52a8\u673a\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u535a\u5ba2\uff0c\u70b9[\u8fd9\u91cc](https://blog.csdn.net/qq_46258139/article/details/119918655)\u3002\n\n\u5148\u8003\u8651\u5220\u9664\u64cd\u4f5c\uff0c\u518d\u5f00\u4e00\u4e2a `AC` \u81ea\u52a8\u673a\u8bb0\u5f55\u5220\u9664\u7684\u4e32\uff0c\u4e24\u4e2a `query` \u7684\u7ed3\u679c\u76f8\u51cf\u5373\u53ef\uff08\u6ee1\u8db3\u76f8\u51cf\u6027\uff09\u3002\n\n\u518d\u8003\u8651\u63d2\u5165\u64cd\u4f5c\uff0c\u6bcf\u6b21\u63d2\u5165\u90fd\u8981\u6539 `fail` \u6307\u9488\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6bcf\u6b21\u63d2\u5165\u9700\u8981 $O(n)$\uff0c\u600e\u4e48\u529e\uff1f\n\n\u8003\u8651\u4f18\u5316\u6bcf\u6b21\u63d2\u5165\u5bf9\u5e94 `AC` \u81ea\u52a8\u673a\u7684\u8282\u70b9\u4e2a\u6570\uff0c\u53ef\u5c06 `AC` \u81ea\u52a8\u673a\u8fdb\u884c\u4e8c\u8fdb\u5236\u5206\u7ec4\u3002\n\n\u4f8b\uff0c\u5df2\u7ecf\u63d2\u5165 $15$ \u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u6709 $5$ \u4e2a `AC` \u81ea\u52a8\u673a\uff0c\u6bcf\u4e2a `AC` \u81ea\u52a8\u673a\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\u5206\u522b\u4e3a $8$\uff0c$4$\uff0c$2$\uff0c$1$\u3002\n\n\u5047\u8bbe\u73b0\u5728\u53c8\u8981\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219 `AC` \u81ea\u52a8\u673a\u4f1a\u5408\u5e76\u6210 $1$ \u4e2a\uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\u4e3a $16$\u3002\n\n\u8bf4\u5b9e\u8bdd\u8fd9\u6709\u70b9\u50cf\u90a3\u4e2a $2048$ \u5c0f\u6e38\u620f\u3002\n\n\u56e0\u4e3a\u4e8c\u8fdb\u5236\u5206\u7ec4\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u66f4\u65b0\u6b21\u6570\u53ea\u6709 $\\log n$ \u6b21\uff0c\u6700\u591a\u7ef4\u62a4 $\\log n$ \u4e2a\u5757\uff0c\u987e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m n \\log n)$\u3002\n\n# AC CODE\n\n\u5c0f\u7ec6\u8282\uff1a\u5e94\u5728\u6bcf\u6b21\u8f93\u51fa\u540e\u8c03\u7528 `fflush(stdout)`\uff08\u7136\u800c\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff09\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int _ = 6e5 + 5;\n\nstruct AC\n{\n    int tot, val[_], sum[_], fail[_], c[_][26], ch[_][26];\n    int id, cnt, rt[_], siz[_];\n\n    void ins(char *s, int len, int k)\n    {\n        int now = k;\n        for (int i = 0; i < len; i++)\n        {\n            int v = s[i] - 'a';\n            if (!c[now][v])\n                c[now][v] = ++tot;\n            now = c[now][v];\n        }\n        val[now]++;\n    }\n\n    void get_fail(int s)\n    {\n        fail[s] = s;\n        queue<int> q;\n        for (int i = 0; i < 26; i++)\n            if (c[s][i])\n            {\n                ch[s][i] = c[s][i];\n                q.push(c[s][i]);\n                fail[ch[s][i]] = s;\n            }\n            else\n                ch[s][i] = s;\n        while (!q.empty())\n        {\n            int k = q.front();\n            q.pop();\n            for (int i = 0; i < 26; i++)\n            {\n                if (c[k][i])\n                {\n                    ch[k][i] = c[k][i];\n                    fail[c[k][i]] = ch[fail[k]][i];\n                    q.push(c[k][i]);\n                }\n                else\n                    ch[k][i] = ch[fail[k]][i];\n            }\n            sum[k] = val[k] + sum[fail[k]];\n        }\n    }\n\n    int merge(int x, int y)\n    {\n        if (!x || !y)\n            return x + y;\n        val[x] += val[y];\n        for (int i = 0; i < 26; i++)\n            c[x][i] = merge(c[x][i], c[y][i]);\n        return x;\n    }\n\n    void insert(char *s, int len)\n    {\n        rt[++cnt] = ++id;\n        siz[cnt] = 1;\n        ins(s, len, rt[cnt]);\n        while (siz[cnt] == siz[cnt - 1])\n        {\n            cnt--;\n            siz[cnt] *= 2;\n            rt[cnt] = merge(rt[cnt], rt[cnt + 1]);\n        }\n        get_fail(rt[cnt]);\n    }\n\n    int query(char *s, int len)\n    {\n        int now = 0, ans = 0;\n        for (int i = 1; i <= cnt; i++)\n        {\n            now = rt[i];\n            for (int j = 0; j < len; j++)\n            {\n                now = ch[now][s[j] - 'a'];\n                ans += sum[now];\n            }\n        }\n        return ans;\n    }\n\n} A, B;\n\nint T, op, len;\nchar c[_];\n\nsigned main()\n{\n    A.tot = B.tot = 3e5 + 1;\n    scanf(\"%d\", &T);\n    while (T--)\n    {\n        scanf(\"%d%s\", &op, c);\n        len = strlen(c);\n        if (op == 1)\n            A.insert(c, len);\n        if (op == 2)\n            B.insert(c, len);\n        if (op == 3)\n            printf(\"%d\\n\", A.query(c, len) - B.query(c, len));\n        fflush(stdout);\n    }\n    return 0;\n}\n```",
        "postTime": 1630164279,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "CF710F String Set Queries"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u53d1\u73b0\u7b54\u6848\u5177\u6709\u53ef\u51cf\u6027\uff0c\u4e0d\u96be\u60f3\u5230\u5bf9\u4e8e\u63d2\u5165\u548c\u5220\u9664\u7684\u5b57\u7b26\u4e32\u5206\u522b\u5efa$AC$\u81ea\u52a8\u673a\u3002\n\n\u4f46\u662f$AC$\u81ea\u52a8\u673a\u5e76\u4e0d\u652f\u6301\u5728\u7ebf\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u8003\u8651\u4e8c\u8fdb\u5236\u5206\u7ec4\uff0c\u6bcf\u6b21\u66b4\u529b\u91cd\u6784\uff0c\u6ce8\u610f\u7531\u4e8e\u6709\u5408\u5e76\u64cd\u4f5c\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u641e\u51fa$trie$\u56fe\uff0c\u6211\u4eec\u5728\u539f\u6709\u7684$ch$\u6570\u7ec4\u4e0a\u5728\u65b0\u589e\u4e00\u4e2a\u6570\u7ec4\u5373\u53ef\u3002\n\n```cpp\nconst int N=3e5+5;\nconst int S=26;\n\nint T;\nchar s[N];\n\nstruct ac\n{\n    int tot,top;\n    int ch[N][S],tr[N][S],fail[N],cnt[N],end[N],rt[N],siz[N];\n\n    void getfail(int x)\n    {\n        queue<int>q;\n        for(int i=0;i<26;++i)\n        {\n            int v=ch[x][i];\n            if(v) fail[tr[x][i]=ch[x][i]]=x,q.push(v);\n            else tr[x][i]=x;\n        }\n        while(!q.empty())\n        {\n\n            int u=q.front();\n            q.pop();\n            for(int i=0;i<26;++i)\n            {\n                int v=ch[u][i];\n                if(v)\n                {\n                    tr[u][i]=v,fail[v]=tr[fail[u]][i];\n                    q.push(v);\n                }\n                else tr[u][i]=tr[fail[u]][i];\n            }\n            cnt[u]=end[u]+cnt[fail[u]];\n        }\n    }\n    int merge(int x,int y)\n    {\n        if(!x||!y) return x|y;\n        end[x]+=end[y];\n        for(int i=0;i<26;++i) ch[x][i]=merge(ch[x][i],ch[y][i]);\n        return x;\n    }\n    void insert(char *s)\n    {\n        rt[++top]=++tot,siz[top]=1;\n        int cur=rt[top],n=strlen(s+1);\n        for(int i=1;i<=n;++i)\n        {\n            int c=s[i]-'a';\n            if(!ch[cur][c]) ch[cur][c]=++tot;\n            cur=ch[cur][c];\n        }\n        end[cur]=1;\n        while(top&&siz[top]==siz[top-1])\n        {\n            --top;\n            rt[top]=merge(rt[top],rt[top+1]);\n            siz[top]+=siz[top+1];\n        }\n        getfail(rt[top]);\n    }\n    int query(char *s)\n    {\n        int res=0,n=strlen(s+1);\n        for(int i=1;i<=top;++i)\n        {\n            int cur=rt[i];\n            for(int j=1;j<=n;++j)\n            {\n                cur=tr[cur][s[j]-'a'];\n                res+=cnt[cur];\n            }\n        }\n        return res;\n    }\n}T1,T2;\nint main()\n{\n    fio();\n    gi(T);\n    while(T--)\n    {\n        int op;\n        gi(op),scanf(\"%s\",s+1);\n        if(op==1) T1.insert(s);\n        else if(op==2) T2.insert(s);\n        else print(T1.query(s)-T2.query(s)),pc(10),fflush(stdout);\n    }\n    end();\n}\n```",
        "postTime": 1583922759,
        "uid": 208081,
        "name": "MikukuOvO",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF710F \u3010String Set Queries\u3011"
    },
    {
        "content": "\u9898\u89e3\u540c\u6b65\u53d1\u5728[\u535a\u5ba2](https://foreverlasting1202.github.io/)\u91cc\u54e6\u3002\n\nAC\u81ea\u52a8\u673a+\u4e8c\u8fdb\u5236\u5206\u7ec4\u3002\n\n\u5bf9\u4e8e\u63d2\u5165\u5efa\u4e8c\u8fdb\u5236\u5206\u7ec4\u7684AC\u81ea\u52a8\u673a\u3002\n\n\u8003\u8651\u5982\u4f55\u5408\u5e76\u5757\uff0c\u76f4\u63a5\u66b4\u529b\u91cd\u6784\u518d\u5408\u5e76\u5c31\u884c\u4e86\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u56e0\u4e3a\u5757\u662f$log$\u7ea7\u522b\u7684\u6240\u4ee5\u4e5f\u662f\u4e00\u4e2a$log$\u7684\u3002\u5220\u9664\u548c\u63d2\u5165\u662f\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5220\u9664\u4e5f\u5efa\u4e8c\u8fdb\u5236\u5206\u7ec4\u7684AC\u81ea\u52a8\u673a\uff0c\u7136\u540e\u8be2\u95ee\u7684\u65f6\u5019\u63d2\u5165\u7684\u51cf\u53bb\u5220\u9664\u7684\u5c31\u597d\u4e86\u3002\n\n\u6700\u540e\u8fd9\u4e00\u9053\u9898\u83ab\u540d\u5176\u5999\u8f93\u51fa\u8981\u52a0\u4e0a$fflush(stdout)$\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u3002\n\ncode:\n```\n//2018.11.21 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline int read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y){\n    x^=y^=x^=y;\n}\ninline int _abs(const res &x){\n    return x>0?x:-x;\n}\ninline int _max(const res &x,const res &y){\n    return x>y?x:y;\n}\ninline int _min(const res &x,const res &y){\n    return x<y?x:y;\n}\nconst int N=3e5+10;\nnamespace MAIN{\n    char str[N];\n    int Q;\n    struct AC{\n        struct Ac{\n            int vis[26],fail,num,tot,son[26];\n        }ac[N];\n        int rt[N],top,cnt,siz[N];\n        int merge(const res &x,const res &y){\n            if(!x||!y)return x+y;\n            ac[x].tot+=ac[y].tot;\n            for(res i=0;i<26;i++)ac[x].son[i]=merge(ac[x].son[i],ac[y].son[i]);\n            return x;\n        }\n        int q[N*26],he,ta;\n        inline void get_fail(const res &rt){\n            he=1,ta=0;\n            for(res i=0;i<26;i++){\n                if(ac[rt].son[i])ac[ac[rt].vis[i]=ac[rt].son[i]].fail=rt,q[++ta]=ac[rt].vis[i];\n                else ac[rt].vis[i]=rt;\n            }\n            while(he<=ta){\n                res u=q[he++];\n                for(res i=0;i<26;i++){\n                    if(ac[u].son[i])ac[ac[u].vis[i]=ac[u].son[i]].fail=ac[ac[u].fail].vis[i],q[++ta]=ac[u].vis[i];\n                    else ac[u].vis[i]=ac[ac[u].fail].vis[i];\n                }\n                ac[u].num=ac[u].tot+ac[ac[u].fail].num;\n            }\n        }\n        inline void insert(const char *str){\n            rt[++top]=++cnt,siz[top]=1;\n            res now=rt[top];\n            for(res i=0,len=strlen(str);i<len;i++){\n                res x=str[i]-'a';\n                if(!ac[now].son[x])ac[now].son[x]=++cnt,now=cnt;\n                else now=ac[now].son[x];\n            }\n            ac[now].tot=1;\n            while(siz[top]==siz[top-1])top--,rt[top]=merge(rt[top],rt[top+1]),siz[top]+=siz[top+1];\n            get_fail(rt[top]);\n        }\n        inline int query(const char *str){\n            res ret=0,len=strlen(str);\n            for(res i=1;i<=top;i++)\n                for(res j=0,now=rt[i];j<len;j++)now=ac[now].vis[str[j]-'a'],ret+=ac[now].num;\n            return ret;\n        }\n    }A,B;\n    inline void MAIN(){\n        Q=read();\n        while(Q--){\n            res opt=read();\n            scanf(\"%s\",str);\n            if(opt==1)A.insert(str);\n            if(opt==2)B.insert(str);\n            if(opt==3)printf(\"%d\\n\",A.query(str)-B.query(str));\n        }\n    }\n}\nint main(){\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1542792803,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010CF710F\u3011String Set Queries"
    },
    {
        "content": "\u9996\u5148\u8fd9\u4e2a\u64cd\u4f5c\u5f88\u96be\u4e0d\u60f3\u5230 AC \u81ea\u52a8\u5bc4\uff0c\u76f4\u63a5\u5efa\u51fa\u6765\u4e24\u4e2a AC \u81ea\u52a8\u5bc4\uff0c1 \u64cd\u4f5c\u7684\u548c 2 \u64cd\u4f5c\u7684\uff0c\u7136\u540e\u76f8\u51cf\u5bc4\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8f6c\u5316\u4e3a\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u4e32\uff0c\u7ef4\u62a4 AC \u81ea\u52a8\u5bc4\u3002\n\n\u4f46\u662f\u53d1\u73b0\u6211\u4eec\u6bcf\u6b21\u90fd\u8981\u52a0\u4e00\u4e2a\u4e32\u5230 AC \u81ea\u52a8\u5bc4\u91cc\u9762\u53bb\u975e\u5e38\u9ebb\u70e6\uff0c\u590d\u6742\u5ea6\u76f4\u63a5\u7206\u70b8\u3002\n\n\u9996\u5148\u8981\u77e5\u9053\u7684\u662f\u5408\u5e76\u4e24\u4e2a AC \u81ea\u52a8\u5bc4\u7684\u65f6\u95f4\u662f\u4e24\u4e2a\u81ea\u52a8\u5bc4\u7684\u5927\u5c0f\u4e4b\u548c\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u628a\u4e00\u4e2a $k-1$ \u7684\u81ea\u52a8\u5bc4\u548c $1$ \u7684\u81ea\u52a8\u5bc4\u5408\u5e76\u4e86\u8d77\u6765\uff0c\u975e\u5e38\u7684\u4e8f\u554a\u3002\n\n\u4e8e\u662f\u6211\u4eec\u80fd\u8054\u60f3\u5230\u5206\u6cbb FFT\uff0c\u5c31\u662f\u628a\u5b83\u5206\u6210\u4e00\u534a\u518d\u5408\u5e76\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u8fbe\u5230\u590d\u6742\u5ea6\u6700\u5c0f\u5316\u3002\n\n\u4f46\u662f\u95ee\u9898\u53c8\u6765\u4e86\uff0c\u8fd9\u4e2a\u8981\u52a8\u6001\u52a0\u5165\uff0c\u600e\u4e48\u529e\u5462\u3002\n\n\u6211\u4eec\u6709\u4e00\u4e2a\u806a\u660e\u7684\u529e\u6cd5\uff0c\u53eb\u505a\u4e8c\u8fdb\u5236\u5206\u7ec4\uff0c\u53ef\u4ee5\u6bcf $2^k$ \u7ef4\u62a4\u4e00\u4e2a\u81ea\u52a8\u5bc4\u3002\n\n\u5c31\u6bd4\u5982\u8bf4\u73b0\u5728 \u662f\u7b2c $(1011)_2+1$ \u6b21\u52a0\u5165\uff0c\u6211\u4eec\u7684\u81ea\u52a8\u5bc4\u5c31\u662f $1$ \u5230 $2^3$ \u4e00\u7ec4\uff0c$2^3+1$ \u5230 $2^3+2^1 $ \u4e00\u7ec4\uff0c$2^3+2^1+1$ \u5230 $2^3+2^1+2^0$ \u4e00\u7ec4\uff08\u8fd9\u4e2a\u8fd8\u633a\u96be\u60f3\uff09\u3002\n\n\u90a3\u600e\u4e48\u52a0\u5165\u5462\uff0c\u6211\u4eec\u60f3\u5230\u4e8c\u8fdb\u5236\u52a0\u6cd5\uff0c\u4f60\u5e95\u4e0b\u52a0 1 \u600e\u4e48\u529e\uff0c\u662f\u4e0d\u662f\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u4f4d\u4e0a\u53bb\u77e5\u9053\u8fd9\u4f4d\u662f 0 \u8fdb\u4e0d\u4e86\u4f4d\u5bf9\u5427\uff0c\u4e8e\u662f\u6211\u4eec\u6a21\u62df\u8fd9\u4e2a\u64cd\u4f5c\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u4e3a\u4ec0\u4e48\u590d\u6742\u5ea6\u5bf9\u4e86\uff0c\u6211\u4eec\u4e0d\u7b97\u6bcf\u4e00\u6b21\u52a0\u5165\u7684\u590d\u6742\u5ea6\uff0c\u800c\u662f\u8003\u8651\u4e00\u4e2a\u70b9\u4f1a\u88ab\u5408\u5e76\u51e0\u6b21\uff0c\u5176\u5b9e\u53ea\u4f1a\u4ece\u4e0b\u5230\u4e0a $\\log n$ \u6b21\u5c31\u884c\u4e86\u3002\n\n\u800c\u5728\u67e5\u8be2\u7684\u65f6\u5019\u53ea\u4f1a\u6709 $\\log n $ \u4e2a AC \u81ea\u52a8\u5bc4\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(m\\log n)$\u3002\n\n",
        "postTime": 1667032362,
        "uid": 359952,
        "name": "_lbw_",
        "ccfLevel": 6,
        "title": "CF710 \u975e\u5e38 sd \u7684\u9898\u89e3"
    },
    {
        "content": "## CF710F String Set Queries\n\n### \u9898\u610f\n\n\u52a8\u6001\u652f\u6301\u52a0\u5165\u5220\u9664\u5b57\u7b26\u4e32\u548c\u5b57\u7b26\u4e32\u5339\u914d\n\n### \u601d\u8def\n\n~~\u52a8\u6001 AC\u81ea\u52a8\u673a~~\n\n\u5148\u4e0d\u8003\u8651\u52a8\u6001\u60c5\u51b5\u3002\u5bf9\u4e8e\u52a0\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u76f4\u63a5\u63d2\u5165\u5230\u81ea\u52a8\u673a\u5373\u53ef\u3002\n\n\u8003\u8651\u5220\u9664\u3002\u53d1\u73b0\u5bf9\u4e8e\u7b54\u6848\u5177\u6709\u53ef\u51cf\u6027\uff0c\u610f\u601d\u662f\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5339\u914d\u4e32\uff0c\u7b54\u6848\u53ef\u4ee5\u8868\u793a\u4e3a\u5728\u81ea\u52a8\u673a\u4e2d\u5339\u914d\u7684\u7b54\u6848\u51cf\u53bb\u5220\u53bb\u7684\u6240\u6709\u4e32\u5339\u914d\u7684\u7b54\u6848\u3002\u90a3\u6211\u4eec\u8003\u8651\u7ed9\u6240\u6709\u5220\u9664\u7684\u4e32\u4e5f\u5f00\u4e00\u4e2a AC \u81ea\u52a8\u673a\uff0c\u6bcf\u6b21\u8be2\u95ee\u5728\u4e24\u4e2a\u81ea\u52a8\u673a\u4e2d\u5339\u914d\u5c06\u7b54\u6848\u76f8\u51cf\u5373\u53ef\u3002\n\n\u73b0\u5728\u8003\u8651\u52a8\u6001\u60c5\u51b5\u3002\u56e0\u4e3a\u5f3a\u5236\u5728\u7ebf\uff0c\u4e14 AC \u81ea\u52a8\u673a\u662f\u79bb\u7ebf\u7684\uff0c\u6211\u4eec\u6bcf\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u76f8\u5f53\u4e8e\u91cd\u65b0\u5efa\u4e86\u4e00\u4e2a\u81ea\u52a8\u673a\uff0c\u6bcf\u6b21\u5728\u6240\u6709\u81ea\u52a8\u673a\u4e2d\u5339\u914d\u7ed3\u679c\u7684\u548c\u5373\u4e3a\u7b54\u6848\u3002\u51cf\u5c11\u65f6\u95f4\u6d88\u8017\u7684\u552f\u4e00\u9014\u5f84\u662f\u5bf9 AC \u81ea\u52a8\u673a\u8fdb\u884c\u5408\u5e76\u3002\n\n\u8003\u8651\u5982\u4f55\u5408\u5e76\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u4fdd\u8bc1\u4e14\u4f18\u79c0\u3002\u6709\u5f88\u591a\u529e\u6cd5\uff0c\u6bd4\u5982\u6839\u53f7\u91cd\u6784\u3001\u4e8c\u8fdb\u5236\u5206\u7ec4\u7b49\u3002\u540e\u8005\u6bd4\u8f83\u4f18\u79c0\u4e5f\u6bd4\u8f83\u597d\u5199\u3002\n\n### \u5b9e\u73b0\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#include<cstring>\n#include<cmath>\n#include<string>\nusing namespace std;\nnamespace star\n{\n\tconst int maxn=3e5+10;\n\tstruct ACmation{\n\t\tint tot,son[maxn][26],val[maxn],fail[maxn],st[maxn],N,n,siz[maxn],beg[maxn];\n\t\tstring S[maxn];\n\t\tinline void ins(string s,int ro){\n\t\t\tint x=ro;\n\t\t\tfor(auto t:s){\n\t\t\t\tt-='a';\n\t\t\t\tif(son[x][t]==ro){\n\t\t\t\t\tson[x][t]=++tot;\n\t\t\t\t\tfor(int j=0;j<26;j++) son[tot][j]=ro;\n\t\t\t\t}\n\t\t\t\tx=son[x][t];\n\t\t\t}\n\t\t\tval[x]++;\n\t\t}\n\t\tinline void build(int ro){\n\t\t\tfail[ro]=ro;\n\t\t\tstatic int q[maxn];\n\t\t\tint hd=0,tl=1;\n\t\t\tq[tl]=ro;\n\t\t\twhile(hd<tl){\n\t\t\t\tint x=q[++hd];\n\t\t\t\tfor(int t=0;t<26;t++){\n\t\t\t\t\tint u=son[x][t];\n\t\t\t\t\tif(u!=ro){\n\t\t\t\t\t\tfail[u]=x==ro?x:son[fail[x]][t];\n\t\t\t\t\t\tif(son[fail[x]][t]!=u) val[u]+=val[son[fail[x]][t]];\n\t\t\t\t\t\tq[++tl]=u;\n\t\t\t\t\t}else son[x][t]=son[fail[x]][t];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinline int query(string s,int x){\n\t\t\tint ans=0;\n\t\t\tfor(auto t:s)\n\t\t\t\tx=son[x][t-'a'],ans+=val[x];\n\t\t\treturn ans;\n\t\t}\n\t\tinline void merge(){\n\t\t\tsiz[--N]<<=1;\n\t\t\tfor(int i=st[N];i<=tot;i++){\n\t\t\t\tval[i]=fail[i]=0;\n\t\t\t\tfor(int j=0;j<26;j++) son[i][j]=0;\n\t\t\t}\n\t\t\ttot=st[N];\n\t\t\tfor(int i=0;i<26;i++) son[tot][i]=tot;\n\t\t\tfor(int i=beg[N];i<=n;i++) ins(S[i],st[N]);\n\t\t\tbuild(st[N]);\n\t\t}\n\t\tinline void insert(string s){\n\t\t\tst[++N]=++tot;\n\t\t\tfor(int i=0;i<26;i++) son[tot][i]=tot;\n\t\t\tsiz[N]=1;\n\t\t\tins(s,tot),build(st[N]);\n\t\t\tS[beg[N]=++n]=s;\n\t\t\twhile(siz[N]==siz[N-1]) merge();\n\t\t}\n\t\tinline int query(string s){\n\t\t\tint ans=0;\n\t\t\tfor(int i=1;i<=N;i++) ans+=query(s,st[i]);\n\t\t\treturn ans;\n\t\t}\n\t}a,b;\n\tinline void work(){\n\t\tint m;cin>>m;\n\t\twhile(m--){\n\t\t\tint op;string s;\n\t\t\tcin>>op>>s;\n\t\t\tswitch(op){\n\t\t\t\tcase 1:a.insert(s);break;\n\t\t\t\tcase 2:b.insert(s);break;\n\t\t\t\tcase 3:cout<<a.query(s)-b.query(s)<<endl;break;\n\t\t\t}\n\t\t}\n\t}\n}\nsigned main(){\n\tstar::work();\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1611546315,
        "uid": 280015,
        "name": "Star_Cried",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF710F \u3010String Set Queries\u3011"
    },
    {
        "content": "[\u9898\u9762\u6233\u8fd9\u91cc](https://www.luogu.com.cn/problem/CF710F)\n\n### \u9898\u610f\n\n\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u96c6\u5408\uff0c\u652f\u6301\u63d2\u5165\uff0c\u5220\u9664\uff0c\u67e5\u8be2\u7ed9\u5b9a\u5b57\u7b26\u4e32\u5728\u7ed9\u51fa\u7684\u6a21\u677f\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n$\\sum\\limits_{i = 1}^t |si| \\le 3e5$\n\n### \u601d\u8def\n\n\u591a\u6a21\u5f0f\u5339\u914d\u5b57\u7b26\u4e32\u9996\u9009 `AC \u81ea\u52a8\u673a` \u3002\n\n\u5220\u9664\uff1a\u4ece\u539f\u6765\u7684 AC \u81ea\u52a8\u673a\u91cc\u5220\u9664\u4e00\u4e2a\u4e32\u5f88\u96be\uff0c\u90a3\u4e48\u53ef\u4ee5\u8003\u8651\u518d\u5f00\u4e00\u4e2a AC \u81ea\u52a8\u673a\u8bb0\u5f55\u5220\u9664\u7684\u4e32\uff0c\u4e24\u4e2a query \u7684\u7ed3\u679c\u76f8\u51cf\u5373\u53ef\u3002\n\n\u63d2\u5165\uff1a\u6bcf\u6b21\u63d2\u5165\u90fd\u8981\u6539 fail \u6307\u9488\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6bcf\u6b21\u63d2\u5165\u9700\u8981 `O(n)`\uff0c\u600e\u4e48\u529e\u561e\uff1f\n\n\u6bcf\u6b21\u63d2\u5165\u90fd\u4f1a\u6d88\u8017 AC \u81ea\u52a8\u673a\u7684\u8282\u70b9\u4e2a\u6570\u9003\u4e0d\u6389\u7684\uff0c\u4e0d\u80fd\u4ece\u6c42 fail \u6307\u9488\u4f18\u5316\u5165\u624b\uff0c\u90a3\u4e48\u53ea\u80fd\u4f18\u5316\u6bcf\u6b21\u63d2\u5165\u5bf9\u5e94 AC \u81ea\u52a8\u673a\u7684\u8282\u70b9\u4e2a\u6570\u3002\n\n\u8003\u8651\u4e8c\u8fdb\u5236\u4f18\u5316\u3002\n\n\u5c06\u4e32\u7684\u4e2a\u6570\u4ee5\u4e8c\u8fdb\u5236\u5206\u5f00\uff0c\u52a0\u5165\u4e00\u4e2a\u4e32\u7684\u65f6\u5019\u5982\u679c\u5757\u7684\u5927\u5c0f\u4e0e\u524d\u9762\u5927\u5c0f\u4e00\u6837\u5c31\u4e0e\u524d\u9762\u5408\u5e76\uff0c\u6700\u540e\u518d `getfail` \u3002\uff08\u697c\u4e0b\u8bf4\u7c7b\u4f3c 2048 \u5f88\u5f62\u8c61\u7684\u6bd4\u55bb\uff09\n\n\u4e8c\u8fdb\u5236\u601d\u60f3\u6838\u5fc3\uff1a\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9**\u66f4\u65b0\u6b21\u6570\u53ea\u6709 $logn$ \u6b21**\uff0c**\u7ef4\u62a4 $logn$ \u4e2a\u5757**\u3002\n\n\u6ce8\u610f\u70b9\uff1a\n\n1.  \u53d1\u73b0\u5728 `getfail` \u7684\u65f6\u5019\u4e00\u90e8\u5206 trie \u88ab\u4fee\u6539\u8fc7\uff0c\u88ab\u4fee\u6539\u8fc7\u7684\u65e0\u6cd5\u53c2\u4e0e\u63a5\u4e0b\u6765\u7684 getfail\u3002 \u90a3\u4e48\u5f00\u4e24\u4e2a trie\uff0c \u4e00\u4e2a\u662f\u539f\u6765\u7684 trie\uff0c\u4e00\u4e2a\u662f getfail \u7684\u65f6\u5019\u4fee\u6539\u8fc7\u7684 trie\u3002\n\n2. \u53ef\u80fd\u6bcf\u4e2a\u70b9 root \u7f16\u53f7\u4f1a\u4e0e\u4e4b\u540e\u7684\u91cd\u590d\uff0c\u6211\u8fd9\u91cc\u5f00\u5927\u4e86 cnt \u7684\u5927\u5c0f\u3002\n\n\u5bf9\u6211\u7684\u7801\u98ce\u5e94\u8be5\u8fd8\u662f~~\u6bd4\u8f83\u81ea\u4fe1~~\u7684\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 6e5 + 5;\n\nclass Aho_C_Automaton{\nprivate:\n\tint tot, val[N], sum[N], fail[N], c[N][26], ch[N][26];\n\tint id, cnt, rt[N], sz[N];\n\t\npublic:\n\tvoid init(){\n\t\ttot = 3e5; cnt = id = 0;\n\t\tmemset(c, 0, sizeof(c));\n\t\tmemset(ch, 0, sizeof(ch));\n\t\tmemset(fail, 0, sizeof(fail));\n\t\tmemset(val, 0, sizeof(val));\n\t\tmemset(sum, 0, sizeof(sum));\n\t}\n\t\n\tvoid ins(char *s, int len, int k){\n\t\tint now = k;\n\t\tfor(int v, i = 1; i <= len; i++){\n\t\t\tif(!c[now][v = s[i] - 'a'])\n\t\t\t\tc[now][v] = ++tot;\n\t\t\tnow = c[now][v];\n\t\t}\n\t\tval[now]++;\n\t}\n\t\n\tvoid get_fail(int s){\n\t\tfail[s] = s;\n\t\tqueue<int> q;\n\t\tfor(int i = 0; i < 26; i++)\n\t\t\tif(c[s][i])\n\t\t\t\tq.push(c[s][i]), fail[ch[s][i] = c[s][i]] = s;\n\t\t\telse ch[s][i] = s;\n\t\twhile(!q.empty()){\n\t\t\tint k = q.front(); q.pop();\n\t\t\tfor(int i = 0; i < 26; i++){\n\t\t\t\tif(c[k][i]){\n\t\t\t\t\tch[k][i] = c[k][i];\n\t\t\t\t\tfail[c[k][i]] = ch[fail[k]][i];\n\t\t\t\t\tq.push(c[k][i]);\n\t\t\t\t}\n\t\t\t\telse ch[k][i] = ch[fail[k]][i];\n\t\t\t}\n\t\t\tsum[k] = val[k] + sum[fail[k]];\n\t\t}\n\t}\n\t\n\tint merge(int x, int y){\n\t\tif(!x || !y) return x | y;\n\t\tval[x] += val[y];\n\t\tfor(int i = 0; i < 26; i++)\n\t\t\tc[x][i] = merge(c[x][i], c[y][i]);\n\t\treturn x;\n\t}\n\t\n\tvoid insert(char *s, int len){\n\t\trt[++cnt] = ++id; sz[cnt] = 1;\n\t\tins(s, len, rt[cnt]);\n\t\twhile(sz[cnt] == sz[cnt - 1]){\n\t\t\tsz[--cnt] <<= 1;\n\t\t\trt[cnt] = merge(rt[cnt], rt[cnt + 1]);\n\t\t}\n\t\tget_fail(rt[cnt]);\n\t}\n\t\n\tint query(char *s, int len){\n\t\tint now = 0, ans = 0;\n\t\t\n\t\tfor(int i = 1; i <= cnt; i++){\n\t\t\tnow = rt[i];\n\t\t\tfor(int j = 1; j <= len; j++)\n\t\t\t\tans += sum[now = ch[now][s[j] - 'a']];\n//\t\t\t\tcout << now << ' ' << j << ' ' << val[now] << endl;\n\t\t}\n\t\treturn ans;\n\t}\n\t\n} A, B;\n\nint T, op, len;\nchar c[N];\n\nint main(){\n\tA.init(), B.init();\n\tscanf(\"%d\", &T);\n\twhile(T--){\n\t\tscanf(\"%d%s\", &op, c + 1);\n\t\tlen = strlen(c + 1);\n\t\tif(op == 1) A.insert(c, len);\n\t\tif(op == 2) B.insert(c, len);\n\t\tif(op == 3) cout << A.query(c, len) - B.query(c, len) << endl;\n\t}\n\tprintf(\"too_late \u6c38\u8fdc\u53ef\u7231\uff01\\n\");\n\treturn 0;\n}\n```\n\n---\n\ntoo_late \u6c38\u8fdc\u53ef\u7231\uff01",
        "postTime": 1599226861,
        "uid": 115857,
        "name": "resound_WANYI_13Ell",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF710F \u3010String Set Queries\u3011"
    },
    {
        "content": "\n\u4e00\u4e2a\u96c6\u5408\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\n+ \u63d2\u5165\u5b57\u7b26\u4e32\n+ \u5220\u9664\u5b57\u7b26\u4e32\n+ \u67e5\u8be2\u8be5\u5b57\u7b26\u4e32\u4e2d\u96c6\u5408\u5185\u5b57\u7b26\u4e32\u51fa\u73b0\u6b21\u6570\n\n\n\n\n\u5220\u9664\u548c\u63d2\u5165\u53ef\u4ee5\u5efa\u4e24\u4e2a$AC$\u81ea\u52a8\u673a\uff0c\u76f8\u51cf\u5373\u53ef\u3002\u5982\u679c\u67e5\u8be2\u5c11\uff0c\u5c31\u67e5\u8be2\u7684\u65f6\u5019\u5efa\u7acb$AC$\u81ea\u52a8\u673a\u3002\u5982\u679c\u63d2\u5165\u5c11\u5c31\u53ef\u4ee5\u66b4\u529b\u6bcf\u6b21\u5efa\u7acb\u591a\u4e2aAC\u81ea\u52a8\u673a\u3002\n\n\u53ef\u662f\u8fd9\u9053\u9898\u9700\u8981\u52a8\u6001\u7684\uff0c\u8003\u8651\u4e8c\u8fdb\u5236\u5206\u7ec4\u3002\u6bd4\u5982$11=1+2+8$,\u6709$11$\u4e2a\u5b57\u7b26\u4e32\u7684\u5c31\u53ef\u4ee5\u6839\u636e\u6709$1$\u4e2a\u4e32\u7684$AC$\u81ea\u52a8\u673a+\u6709$2$\u4e2a\u4e32\u7684$AC$\u81ea\u52a8\u673a+\u6709$8$\u4e2a\u4e32\u7684$AC$\u81ea\u52a8\u673a\u3002\u63d2\u5165\u7684\u65f6\u5019\u8003\u8651\u4e8c\u8fdb\u5236\u52a0\u6cd5\u7684\u5f62\u5f0f\uff0c\u8fdb\u4f4d\u5373\u5408\u5e76\u524d\u540e**\u5b57\u5178\u6811**\u3002\u7136\u540e\u66b4\u529b\u5efa\u7acb$AC$\u81ea\u52a8\u673a\u3002\n\n### \u590d\u6742\u5ea6\n\u7531\u4e8e$\\sum |S|\\leq4\\times 10^5$\uff0c\u5408\u5e76$O(|S_i|\\log |S_i|)$\u3002\u67e5\u8be2$O(S_q \\log |S_i|)$\n\n\n\n  \n```c++\n\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#include <cmath>\n#include <cstring>\n#include <vector>\n#include <map>\n#include <stack>\nusing namespace std;\ntypedef long long ll;\n#define pii pair<int, int>\n#define mk make_pair\nconst int N = 1e6 + 10;\nconst int mod = 1e9 + 7;\n\nconst int AN = 3e5 + 100;\nstruct ACAM\n{\n    int nxt[N][26], tmp[N][26], fail[AN], rt[30], end[N], sum[N], siz[30];\n    int top, acnt;\n    ACAM() { top = acnt = 0; }\n    void getfail(int root)\n    {\n        queue<int> q;\n        for (int i = 0; i < 26; i++)\n        {\n            int to = tmp[root][i];\n            if (!to)\n                nxt[root][i] = root;\n            else\n            {\n                nxt[root][i] = to;\n                fail[to] = root;\n                q.push(to);\n            }\n        }\n        while (!q.empty())\n        {\n            int u = q.front();\n            q.pop();\n            sum[u] = end[u] + sum[fail[u]];\n            for (int i = 0; i < 26; i++)\n            {\n                int to = tmp[u][i];\n                if (!to)\n                    nxt[u][i] = nxt[fail[u]][i];\n                else\n                {\n                    nxt[u][i] = to;\n                    fail[to] = nxt[fail[u]][i];\n                    q.push(to);\n                }\n            }\n        }\n    }\n    int merge(int x, int y)\n    {\n        if (!x || !y)\n            return x | y;\n        end[x] += end[y];\n        for (int i = 0; i < 26; ++i)\n            tmp[x][i] = merge(tmp[x][i], tmp[y][i]);\n        return x;\n    }\n    void insert(char *t)\n    {\n        int len = strlen(t + 1);\n        rt[++top] = ++acnt;\n        siz[top] = 1;\n        int u = acnt;\n        for (int i = 1; i <= len; i++)\n        {\n            int id = t[i] - 'a';\n            if (!tmp[u][id])\n                tmp[u][id] = ++acnt;\n            u = tmp[u][id];\n        }\n        end[u] = 1;\n        while (top && siz[top] == siz[top - 1])\n        {\n            top--;\n            rt[top] = merge(rt[top], rt[top + 1]);\n            siz[top] += siz[top + 1];\n            siz[top + 1] = rt[top + 1] = 0;\n        }\n        getfail(rt[top]);\n    }\n    int query(char *s)\n    {\n        int res = 0, n = strlen(s + 1);\n        for (int i = 1; i <= top; ++i)\n        {\n            int cur = rt[i];\n            for (int j = 1; j <= n; ++j)\n            {\n                cur = nxt[cur][s[j] - 'a'];\n                res += sum[cur];\n            }\n        }\n        return res;\n    }\n\n} t1, t2;\n\nint main()\n{\n    int q;\n    scanf(\"%d\", &q);\n    while (q--)\n    {\n        int op;\n        char t[N];\n        scanf(\"%d %s\", &op, t + 1);\n        if (op == 1)\n            t1.insert(t);\n        else if (op == 2)\n            t2.insert(t);\n        else\n        {\n            printf(\"%d\\n\", t1.query(t) - t2.query(t));\n        }\n        fflush(stdout);\n    }\n}\n",
        "postTime": 1593945188,
        "uid": 21031,
        "name": "NaCN",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF710F \u3010String Set Queries\u3011"
    },
    {
        "content": "\u5f88\u5bb9\u6613\u60f3\u5230AC\u81ea\u52a8\u673a\uff0c\u4f46\u662f\u5374\u53d1\u73b0\u4e0d\u600e\u4e48\u652f\u6301\u5220\u9664 (\u6211\u592a\u83dc\u4e86)\n\n\u5b8c\u86cb\uff0c\u600e\u4e48\u529e\uff1f\n\n\u601d\u8003\u5982\u4f55\u4f18\u5316\u66b4\u529b\n\n\u6709\u4e24\u79cd\u66b4\u529b\uff1a\u4e00\u79cd\u662fkmp\uff0c\u4e00\u79cd\u662ftrie\n\n\ntrie\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u79c0\uff0c\u4f46\u7a7a\u95f4\u4e0d\u884c\uff1b\n\nkmp\u65f6\u95f4\u4e0d\u884c\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4e92\u8865\u4e00\u4e0b\n\n\u5bf9\u4e8e\u957f\u5ea6\u5c0f\u4e8e $sqrt$ \u7684\uff0c\u6211\u4eec\u52a0\u5165 $trie$ \u4e2d\uff0c\u5426\u5219\u66b4\u529b $kmp$\uff0c\u8fd9\u6837\u80fd\u591f\u7ef4\u6301\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u603b\u957f\u4e0d\u5927\n\n\u5206\u5757\u601d\u60f3\u771f\u5999\uff01\n\n```cpp\n#include <map>\n#include <set>\n#include <ctime>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <vector>\n#include <bitset>\n#include <cstdio>\n#include <cctype>\n#include <string>\n#include <numeric>\n#include <cstring>\n#include <cassert>\n#include <climits>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std ;\n//#define int long long\n#define rep(i, a, b) for (int i = (a); i <= (b); i++)\n#define per(i, a, b) for (int i = (a); i >= (b); i--)\n#define loop(s, v, it) for (s::iterator it = v.begin(); it != v.end(); it++)\n#define cont(i, x) for (int i = head[x]; i; i = e[i].nxt)\n#define clr(a) memset(a, 0, sizeof(a))\n#define ass(a, sum) memset(a, sum, sizeof(a))\n#define lowbit(x) (x & -x)\n#define all(x) x.begin(), x.end()\n#define ub upper_bound\n#define lb lower_bound\n#define pq priority_queue\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define iv inline void\n#define enter cout << endl\n#define siz(x) ((int)x.size())\n#define file(x) freopen(#x\".in\", \"r\", stdin),freopen(#x\".out\", \"w\", stdout)\ntypedef long long ll ;\ntypedef unsigned long long ull ;\ntypedef pair <int, int> pii ;\ntypedef vector <int> vi ;\ntypedef vector <pii> vii ;\ntypedef queue <int> qi ;\ntypedef queue <pii> qii ;\ntypedef set <int> si ;\ntypedef map <int, int> mii ;\ntypedef map <string, int> msi ;\nconst int N = 300010 ;\nconst int Sqrt = 500 ;\nconst int M = N / Sqrt + 10 ;\nconst int INF = 0x3f3f3f3f ;\nconst int iinf = 1 << 30 ;\nconst ll linf = 2e18 ;\nconst int MOD = 1000000007 ;\nconst double eps = 1e-7 ;\nvoid print(int x) { cout << x << endl ; exit(0) ; }\nvoid PRINT(string x) { cout << x << endl ; exit(0) ; }\nvoid douout(double x){ printf(\"%lf\\n\", x + 0.0000000001) ; }\ntemplate <class T> void chmin(T &a, T b) { if (a > b) a = b ; }\ntemplate <class T> void chmax(T &a, T b) { if (a < b) a = b ; }\nvoid upd(int &a, int b) { (a += b) %= MOD ; }\nvoid mul(int &a, int b) { a = 1ll * a * b % MOD ; }\n\nchar s[N] ;\nstring st[M] ;\nint cost[M] ;\nint trie[N][29], value[N], nxt[N] ;\nint Q, op, tot = 1, cnt, len ;\n\nsigned main(){\n//\tfreopen(\"test.in\", \"r\", stdin) ;\n//\tfreopen(\"test.out\", \"w\", stdout) ;\n\tscanf(\"%d\", &Q) ;\n\twhile (Q--) {\n\t\tscanf(\"%d %s\", &op, s) ;\n\t\tlen = strlen(s) ;\n\t\tif (op < 3) {\n\t\t\tif (len <= Sqrt) {\n\t\t\t\tint now = 1 ;\n\t\t\t\trep(i, 0, len - 1) {\n\t\t\t\t\tint c = s[i] - 'a' ;\n\t\t\t\t\tif (!trie[now][c]) trie[now][c] = ++tot ;\n\t\t\t\t\tnow = trie[now][c] ;\n\t\t\t\t}\n\t\t\t\tvalue[now] += 3 - 2 * op ;\n\t\t\t} else {\n\t\t\t\tst[cnt] = \"\" ;\n\t\t\t\trep(j, 0, len - 1) st[cnt] += s[j] ;\n\t\t\t\tst[cnt] += '{' ;\n\t\t\t\tcost[cnt] = 3 - 2 * op ;\n\t\t\t\tcnt++ ;\n\t\t\t}\n\t\t} else {\n\t\t\tll ans = 0 ;\n\t\t\trep(j, 0, len - 1) {\n\t\t\t\tint now = 1 ;\n\t\t\t\trep(k, j, len - 1) {\n\t\t\t\t\tint c = s[k] - 'a' ;\n\t\t\t\t\tif (!trie[now][c]) break ;\n\t\t\t\t\tnow = trie[now][c] ;\n\t\t\t\t\tans += value[now] ;\n\t\t\t\t}\n\t\t\t}\n\t\t//\tcout << ans << endl ;\n\t\t\trep(id, 0, cnt - 1) {\n\t\t\t\tint Len = siz(st[id]) - 1 ; // \u6709\u4e00\u4e2a\u7ed3\u5c3e\u7b26\n\t\t\t\tif (Len > len) continue ;\n\t\t\t\tnxt[1] = 0 ;\n\t\t\t\tfor (int i = 2, j = 0; i <= Len; i++) {\n\t\t\t\t\twhile (j && st[id][i - 1] != st[id][j]) j = nxt[j] ;\n\t\t\t\t\tif (st[id][i - 1] == st[id][j]) j++ ;\n\t\t\t\t\tnxt[i] = j ;\n\t\t\t\t}\n\t\t\t\tfor (int i = 1, j = 0; i <= len; i++) {\n\t\t\t\t\twhile (j && s[i - 1] != st[id][j]) j = nxt[j] ;\n\t\t\t\t\tif (s[i - 1] == st[id][j]) j++ ;\n\t\t\t\t\tif (j == Len) ans += cost[id] ;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout << ans << endl ;\n\t\t}\n\t}\n\treturn 0 ;\n}\n\n/*\n\u5199\u4ee3\u7801\u65f6\u8bf7\u6ce8\u610f\uff1a\n\t1.ll\uff1f\u6570\u7ec4\u5927\u5c0f\uff0c\u8fb9\u754c\uff1f\u6570\u636e\u8303\u56f4\uff1f\n\t2.\u7cbe\u5ea6\uff1f\n\t3.\u7279\u5224\uff1f\n\t4.\u81f3\u5c11\u505a\u4e00\u4e9b\n\u601d\u8003\u63d0\u9192\uff1a\n\t1.\u6700\u5927\u503c\u6700\u5c0f->\u4e8c\u5206\uff1f\n\t2.\u53ef\u4ee5\u8d2a\u5fc3\u4e48\uff1f\u4e0d\u884cdp\u53ef\u4ee5\u4e48\n\t3.\u53ef\u4ee5\u4f18\u5316\u4e48\n\t4.\u7ef4\u62a4\u533a\u95f4\u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\uff1f\n\t5.\u7edf\u8ba1\u65b9\u6848\u662f\u7528dp\uff1f\u6a21\u4e86\u4e48\uff1f\n\t6.\u9006\u5411\u601d\u7ef4\uff1f\n*/\n\n\n\n```",
        "postTime": 1552829566,
        "uid": 54900,
        "name": "__Hacheylight__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF710F \u3010String Set Queries\u3011"
    }
]