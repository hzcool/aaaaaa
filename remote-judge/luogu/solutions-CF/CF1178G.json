[
    {
        "content": "[$$\\color{darkblue}{\\Huge\\texttt{My blog}}$$](https://dilute.xyz/2019/07/20/Solutions/Solution-CF1178G/)\n\n### \u5206\u5757 + \u659c\u7387\u4f18\u5316\n\n~~G\u771f\u7684\u6bd4F2\u6e05\u771f~~\n\n\u9996\u5148\uff0c\u770b\u5230\u6811\u4e0a + \u5b50\u6811\u64cd\u4f5c\uff0c\u7b2c\u4e00\u53cd\u5e94\u4f7f\u7528dfs\u5e8f\u62cd\u5e73\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u652f\u6301\uff1a\n\n- \u533a\u95f4$a_i += x$\n- \u8be2\u95ee\u533a\u95f4$\\max\\{|a_i| * |b_i|\\}$\n\n\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\u5982\u4f55\u89e3\u51b3\u3002\n\n\u53d1\u73b0$b_i$\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u9884\u5904\u7406\u51fa\u6765$|b_i|$\u3002\n\n\u4e4b\u540e\u8003\u8651\u5982\u4f55\u652f\u6301\u4fee\u6539$a$\uff0c\u8003\u8651\u659c\u7387\u4f18\u5316\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7ef4\u62a4$y = b_ix + a_i * b_i$\u7684\u76f4\u7ebf\uff1b\n\n\u5176\u4e2d$x$\u8868\u793a\u7684\u662f\u8fd9\u4e2a\u70b9\u7684$\\Delta a_i$\u3002\n\n\u4f46\u662f\u6211\u4eec\u6bcf\u6b21\u8be2\u95ee\u548c\u4fee\u6539\u7684\u90fd\u662f\u533a\u95f4\u3002\n\n\u90a3\u4e48\u8003\u8651\u5206\u5757\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5757\u5185\u7ef4\u62a4\u5bf9\u5e94\u7684\u51f8\u58f3\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\uff0c\u66b4\u529b\u91cd\u6784\u8fb9\u7f18\u6240\u5728\u7684\u5757\uff0c\u5bf9\u4e8e\u4e2d\u95f4\u5b8c\u6574\u8986\u76d6\u7684\u5757\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u4ee3\u8868\u8fd9\u4e2a\u5757\u5185\u6240\u6709\u4e1c\u897f\u7684$a_i$\u503c\u90fd\u52a0\u4e0a\u4e86\u4e00\u4e2a\u503c\uff0c\u8fd9\u6837\u4e00\u6765\u5bf9\u4e8e\u6bcf\u5757\u5185\u4ed6\u7684$\\Delta$\u5c31\u662f\u4e00\u4e2a\u76f8\u7b49\u7684\u503c\uff0c\u90a3\u4e48\u67e5\u8be2\u7684\u65f6\u5019\u8fb9\u7f18\u66b4\u529b\u505a\uff0c\u4e2d\u95f4\u53ef\u4ee5\u5728\u51f8\u58f3\u4e0a\u4e8c\u5206\u3002\n\n\u90a3\u4e48\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u8fd9\u4e2a\u7edd\u5bf9\u503c\u8fd8\u6ca1\u6709\u89e3\u51b3\u3002\n\n$b_i$\u7684\u95ee\u9898\u975e\u5e38\u597d\u89e3\u51b3\uff0c\u9884\u5904\u7406\u7684\u65f6\u5019\u53d6\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u5bf9\u4e8e$a_i$\u8fd9\u662f\u4e00\u4e2a\u53d6$\\max$\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u5982\u679c\u7edd\u5bf9\u503c\u53d6\u53cd\u662f\u80af\u5b9a\u4e0d\u4f18\u3002\u90a3\u4e48\u53ea\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u51f8\u58f3\u5206\u522b\u7ef4\u62a4$a_i$\u53d6\u53cd\u548c\u4e0d\u53d6\u53cd\u7684\u60c5\u51b5\u5373\u53ef\u3002\n\n\u6700\u7ec8\u590d\u6742\u5ea6$O(n \\sqrt{n} \\log n)$\uff0c\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u9ad8\u8d85\u7684\u5361\u5e38\u6280\u5de7\uff0c\u8fd9\u8fb9\u7ed9\u4e00\u4e9b\u5361\u5e38\u7684\u6280\u5de7\u597d\u4e86\u3002\n\n- \u5757\u5927\u5c0f\u5f00\u5c0f\u4e00\u70b9\uff08\u8fd9\u662f\u6700\u91cd\u8981\u7684\u4e00\u70b9\uff09\uff0c\u867d\u7136\u8be2\u95ee\u65f6\u5019\u590d\u6742\u5ea6\u662f$O(\\frac{n}{size} * \\log{size})$\uff0c\u7136\u540e\u4fee\u6539\u7684\u65f6\u5019\u66b4\u529b\u91cd\u6784\u662f$O(size * \\log size)$\u7684\uff0c\u4f46\u662f\u8be2\u95ee\u7684\u65f6\u5019\u90a3\u4e2a$\\log$\u4e25\u91cd\u8dd1\u4e0d\u6ee1\uff0c\u66b4\u529b\u91cd\u6784\u7684$\\log$\u662f\u6392\u5e8f\u7684\uff0c\u8fd8\u662f\u6bd4\u8f83\u6ee1\u7684\u3002\n- \u7ef4\u62a4\u51f8\u58f3\u7684\u65f6\u5019\u7528$vector$\uff0c\u4e0d\u8981\u7528\u6570\u7ec4\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u53cd\u6b63\u8fd9\u6837\u53d8\u5feb\u4e86\uff0c$\\color{black}{z} \\color{red}{xyhh}$\u5927\u7237\u8bf4\u8fd9\u662f\u9ad8\u901f\u7f13\u5b58\u7684\u95ee\u9898\uff09\u3002\n\n\u6700\u540e\u4e0a\u4e00\u6ce2\u4ee3\u7801\u5427...\n\n```cpp\n#include<bits/stdc++.h>\n \n#define SIZE 250\n#define ll long long\n#define INF 2147483647\n#define is_bad(a, m, c) ((m.b - c.b) * (m.k - a.k) <= (a.b - m.b) * (c.k - m.k))\n \nint inp(){\n    char c = getchar();\n    int neg = 1;\n    while(c < '0' || c > '9'){\n        if(c == '-')\n            neg = -1;\n        c = getchar();\n    }\n    int sum = 0;\n    while(c >= '0' && c <= '9'){\n        sum = sum * 10 + c - '0';\n        c = getchar();\n    }\n    return sum * neg;\n}\n \nint head[200010], nxt[200010], end[200010], dfn[200010], size[200010];\nll a2[200010], b2[200010], a[200010], b[200010];\n \nint cou = 0;\nvoid link(int a, int b){\n    nxt[++cou] = head[a];\n    head[a] = cou;\n    end[cou] = b;\n}\n \nstruct Node{\n    ll k;\n    ll b;\n    \n    ll get(int x){\n        return x * k + b;\n    }\n};\n \nbool cmp(Node a, Node b){\n    return a.k < b.k;\n}\n \nstruct Convex{\n    std::vector<Node> s;\n \n    void insert(Node x){\n        while(s.size() > 1 && is_bad(s[s.size() - 2], s[s.size() - 1], x))\n            s.resize(s.size() - 1);\n        s.push_back(x);\n    }\n \n    ll query(ll x){\n        if(s.size() == 0)\n            return -1e18;\n        int l = 0;\n        int r = s.size() - 1;\n        while(l < r){\n            int mid = (l + r) >> 1;\n            if(s[mid].get(x) <= s[mid + 1].get(x))\n                l = mid + 1;\n            else\n                r = mid;\n        }\n        return s[l].get(x);\n    }\n \n    void clear(){\n        s.clear();\n    }\n}c[1000], cf[1000];\n \nint ql[1000], qr[1000];\nll delta[1000];\nstd::vector<Node> vec;\n \nvoid rebuild(int x){\n    vec.clear();\n    c[x].clear();\n    cf[x].clear();\n    for(int i = ql[x]; i <= qr[x]; i++){\n        a[i] += delta[x];\n        vec.push_back((Node){b[i], a[i] * b[i]});\n    }\n    std::sort(vec.begin(), vec.end(), cmp);\n    for(int i = 0; i < vec.size(); i++)\n        c[x].insert(vec[i]);\n    for(int i = 0; i < vec.size(); i++)\n        cf[x].insert((Node){vec[i].k, -vec[i].b});\n    delta[x] = 0;\n}\n \nint idx = 0;\nvoid dfs(int cur){\n    dfn[cur] = ++idx;\n    size[cur] = 1;\n    for(int x = head[cur]; x != -1; x = nxt[x]){\n        a[end[x]] += a[cur];\n        b[end[x]] += b[cur];\n        dfs(end[x]);\n        size[cur] += size[end[x]];\n    }\n}\n \nint main(){\n    memset(head, -1, sizeof(head));\n    int n = inp();\n    int q = inp();\n    for(int i = 2; i <= n; i++){\n        int fa = inp();\n        link(fa, i);\n    }\n    for(int i = 1; i <= n; i++)\n        a[i] = inp();\n    for(int i = 1; i <= n; i++)\n        b[i] = inp();\n    dfs(1);\n    memcpy(a2, a, sizeof(a));\n    memcpy(b2, b, sizeof(b));\n    for(int i = 1; i <= n; i++){\n        a[dfn[i]] = a2[i];\n        b[dfn[i]] = abs(b2[i]);\n    }\n    qr[0] = 0;\n    int cur = 1;\n    while(qr[cur - 1] < n){\n        ql[cur] = qr[cur - 1] + 1;\n        qr[cur] = ql[cur] + SIZE - 1;\n        cur++;\n    }\n    qr[cur - 1] = n;\n    for(int i = 1; i < cur; i++)\n        rebuild(i);\n    while(q--){\n        int op = inp();\n        if(op == 1){\n            int v = inp();\n            ll x = inp();\n            int l = dfn[v];\n            int r = dfn[v] + size[v] - 1;\n            int lb = (l - 1) / SIZE + 1;\n            int rb = (r - 1) / SIZE + 1;\n            if(lb == rb){\n                for(int i = l; i <= r; i++)\n                    a[i] += x;\n                rebuild(lb);\n            } else {\n                for(int i = lb + 1; i < rb; i++)\n                    delta[i] += x;\n                for(int i = l; i <= qr[lb]; i++)\n                    a[i] += x;\n                for(int i = ql[rb]; i <= r; i++)\n                    a[i] += x;\n                rebuild(lb);\n                rebuild(rb);\n            }\n        } else {\n            int v = inp();\n            int l = dfn[v];\n            int r = dfn[v] + size[v] - 1;\n            int lb = (l - 1) / SIZE + 1;\n            int rb = (r - 1) / SIZE + 1;\n            ll ans = -1e18;\n            if(lb == rb){\n                for(int i = l; i <= r; i++)\n                    ans = std::max(ans, abs(a[i] + delta[lb]) * b[i]);\n            } else {\n                for(int i = lb + 1; i < rb; i++){\n                    ans = std::max(ans, c[i].query(delta[i]));\n                    ans = std::max(ans, cf[i].query(-delta[i]));\n                }\n                for(int i = l; i <= qr[lb]; i++)\n                    ans = std::max(ans, abs(a[i] + delta[lb]) * b[i]);\n                for(int i = ql[rb]; i <= r; i++)\n                    ans = std::max(ans, abs(a[i] + delta[rb]) * b[i]);\n            }\n            printf(\"%lld\\n\", ans);\n        }\n    }\n}\n```\n\n",
        "postTime": 1563863026,
        "uid": 36362,
        "name": "Dilute",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1178G \u3010The Awesomest Vertex\u3011"
    },
    {
        "content": "\u597d\u96be\u5199\u7684\u8bf4\uff0c\u5148\u5199\u505a\u6cd5\u518d\u7801\u5427\uff0c\u8fc7\u4e86\u518d\u8d34\u63d0\u4ea4\u8bb0\u5f55\u5230\u6587\u7ae0\u6700\u540e\u9762\u3002\n\n\u8fd9\u79cd\u5f14\u9898\u80fd\u81ea\u5df1\u60f3\u51fa\u6765\u8fd8\u662f\u5f88\u6709\u6210\u5c31\u611f\u7684\uff0c\u867d\u7136\u597d\u50cf\u60f3\u4e86\u4e09\u5929\u3002\n\n\u53d1\u73b0\u6bcf\u6b21\u4fee\u6539\u6240\u5f71\u54cd\u7684\u548c\u67e5\u8be2\u7684\u90fd\u662f\u5b50\u6811\uff0c\u6240\u4ee5\u5148\u628a $dfs$ \u5e8f\u641e\u51fa\u6765\uff0c\u6bcf\u6b21\u76f8\u5f53\u4e8e\u5bf9\u4e00\u4e2a\u533a\u95f4\u5904\u7406\u3002\n\n\u95ee\u9898\u8f6c\u6362\u4e3a\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a $a_i,b_i$ \uff0c\u6bcf\u6b21\u6709\u4e24\u79cd\u64cd\u4f5c\u3002\n\n$1.$ \u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\uff0c\u5c06\u8fd9\u4e2a\u533a\u95f4\u6bcf\u4e2a $a_i+=x$\u3002\n\n$2.$ \u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u5185 $|a_i|\\times|b_i|$ \u7684\u6700\u5927\u503c\u3002\n\n\u9996\u5148 $b_i$ \u662f\u56fa\u5b9a\u7684\uff0c\u74f6\u9888\u5728\u4e8e\u8fd9\u4e2a $a_i$ \u7684\u7edd\u5bf9\u503c\u3002\n\n\u6211\u4eec\u8003\u8651\u628a\u6bcf\u4e2a\u70b9\u8868\u793a\u4e3a $b_ix+c_i$ \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d $c_i=|a_i|\\times |b_i|$ \uff0c\u800c $x$ \u4e3a $|a_i|$ \u7684\u53d8\u5316\u91cf\u3002\n\n\u4e00\u79cd\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u7ef4\u62a4\u51f8\u5305\uff0c\u4f46\u662f\u7ebf\u6bb5\u6811\u6d89\u53ca\u5408\u5e76\u7684\u8bdd\u5408\u5e76\u51f8\u5305\u590d\u6742\u5ea6\u5f88\u5371\u9669\uff0c\u6240\u4ee5\u7528\u4e07\u80fd\u7684\u5206\u5757\u53bb\u7ef4\u62a4\uff0c\u6bcf\u4e00\u5757\u7ef4\u62a4\u4e00\u4e2a\u51f8\u5305\u3002\n\n\u8003\u8651\u8fd9\u4e2a\u51f8\u5305\u548b\u5f04\uff0c\u7edd\u5bf9\u503c\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28 $|x|=\\max(x,-x)$ \uff0c\u800c\u9898\u76ee\u67e5\u8be2\u7684\u521a\u597d\u53c8\u662f\u6700\u5927\u503c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u70b9\u5f04\u51fa\u4e24\u6761\u76f4\u7ebf\uff0c\u4e00\u4e2a\u662f $b_ix+a_ib_i$ \uff0c\u53e6\u4e00\u4e2a\u662f $-b_ix-a_ib_i$ \uff0c\u8fd9\u6837\u65e0\u8bba\u6b63\u8d1f\uff0c\u53d6 $\\max$ \u90fd\u662f\u5bf9\u7684\u3002\u53ef\u4ee5\u81ea\u5df1\u62bd\u8c61\u60f3\u4e00\u4e0b\u3002\n\n\u7136\u540e\u5206\u5757\u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u6574\u5757\u5c31\u53bb\u7ed9\u8fd9\u4e00\u5757\u6253\u4e2a $tag$ \uff0c\u5176\u5b9e\u5c31\u662f\u8fd9\u4e00\u5757\u6574\u4f53\u7684 $x$ \uff0c\u5bf9\u4e8e\u6563\u5757\uff0c\u628a $tag$ \u4e0b\u4f20\u540e\u66b4\u529b\u4fee\u6539\uff0c\u7136\u540e\u91cd\u6784\u90a3\u4e00\u5757\u7684\u51f8\u5305\u3002\n\n\u8003\u8651\u590d\u6742\u5ea6\uff0c\u5bf9\u4e8e\u4fee\u6539\u76f4\u63a5\u66b4\u529b\u5f04\uff0c\u91cd\u6784\u7684\u90e8\u5206\uff0c\u5bf9\u4e8e\u6bcf\u6761\u76f4\u7ebf $ax+b$ \uff0c\u6211\u4eec\u5728\u9884\u5904\u7406\u65f6\u6309\u7167 $a$ \u6392\u5e8f\u7136\u540e\u4f9d\u6b21\u63d2\u5165\u51f8\u5305\uff0c\u8fd9\u6837\u6563\u5757\u91cd\u6784\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u4e0b\u4f20\u7684 $tag$ \u53ea\u4f1a\u5f71\u54cd $b$ \u5e76\u4e0d\u5f71\u54cd\u6392\u5e8f\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u91cd\u6784\u662f\u590d\u6742\u5ea6\u662f $O(\\sqrt n)$ \u7684\u3002\n\n\u8003\u8651\u67e5\u8be2\uff0c\u5bf9\u4e8e\u6563\u5757\u76f4\u63a5\u679a\u4e3e\u5c31\u884c\uff0c\u5bf9\u4e8e\u6574\u5757\u8981\u67e5\u8be2\u8fd9\u5757\u7684\u51f8\u5305\u5728 $tag$ \u7684\u4f4d\u7f6e\uff0c\u4e8c\u5206\u505a\u7684\u8bdd\u4f1a\u591a\u4e2a $\\log$ \uff0c\u8003\u8651\u600e\u4e48\u4f18\u5316\u3002\n\n\u6211\u4eec\u540c\u65f6\u5bf9\u6bcf\u4e2a\u5757\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\uff0c\u5728\u4fee\u6539\u7684\u65f6\u5019\u53d1\u73b0 $tag$ \u4e00\u5b9a\u662f\u5728\u53d8\u5927\u7684\uff0c\u56e0\u4e3a $x>0$ \uff0c\u7136\u540e\u5c06\u6307\u9488\u5411\u53f3\u79fb\u4e00\u76f4\u79fb\u5230 $tag$ \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6563\u5757\u91cd\u6784\u65f6\u6307\u9488\u5f52\u96f6\uff0c\u67e5\u8be2\u65f6\u76f4\u63a5\u67e5\u8be2\u6574\u5757\u7684\u6307\u9488\u4f4d\u7f6e\u5373\u53ef\uff0c\u8fd9\u662f\u4e00\u4e2a\u7c7b\u4f3c\u53cc\u6307\u9488\u7684\u8fc7\u7a0b\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u590d\u6742\u5ea6\u5c31\u505a\u5230\u4e86\u4e25\u683c $O(n\\sqrt n)$ \u3002\n\n\u8fd9\u73a9\u610f\u80fd\u4e00\u6b21\u8fc7\u4e5f\u662f\u6709\u591f\u79bb\u8c31\u3002\n\nhttps://codeforces.ml/contest/1178/submission/156588400",
        "postTime": 1652165051,
        "uid": 115936,
        "name": "\u6cf7\u6cfd\u4e09\u6708",
        "ccfLevel": 0,
        "title": "CF1178G"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Jerry-Jiang/p/16576448.html)\n\n## \u524d\u8a00\n\u601d\u7ef4\u91cf\u8fd8\u53ef\u4ee5\uff08~~\u4e5f\u633a\u5927\u7684~~\uff09\u4f46\u662f\u4ee3\u7801\u91cf\u5de8\u5927\uff08\u5199\u8d77\u6765\u7279\u522b\u4e0d\u8212\u670d\uff09\u7684\u53c8\u4e00\u9053\u795e\u4ed9\u9898\u3002\n## \u6b63\u6587\n\u9898\u76ee\u5927\u610f\uff1a\u4e00\u68f5\u6811 $n$ \u4e2a\u8282\u70b9\uff0c\u4ee5 $1$ \u4e3a\u6839\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u5c5e\u6027 $(a,b)$\uff0c$R(v)$ \u4e3a $v$ \u7684\u7956\u5148\uff08\u5305\u62ec\u81ea\u5df1\uff09\uff1a\n$$\n|\\sum_{u\\in R(v)}a_u|\\cdot|\\sum_{u\\in R(v)}b_u|\n$$\n\u9700\u8981\u652f\u6301\uff1a\n+ \u5c06 $a_v$ \u52a0\u4e0a $x$\u3002\n+ \u67e5\u8be2 $v$ \u7684\u5b50\u6811\u91cc\u6700\u5927\u503c\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$n\\leq 2\\cdot 10^5,q\\leq 10^5$\n\n\u601d\u8def\u6bd4\u8f83\u7b80\u5355\u3002\n\n\u8003\u8651\u5c06 $|\\sum a|$ \u62c6\u6210 $\\max(\\sum a,-\\sum a)$\uff0c$b_i$ \u53ef\u4ee5\u9884\u5904\u7406\u3002\n\n\u7136\u540e\u4f60\u770b\u5230\u67ff\u5b50\u5f62\u5f0f $\\Delta x\\cdot b+ab$ \u76f4\u63a5\u659c\u7387\u4f18\u5316\u7ef4\u62a4\u51f8\u58f3\u3002\n\n\u51f8\u58f3\u653e\u5728\u7ebf\u6bb5\u6811\u91cc\u5408\u5e76\u5373\u53ef\u3002\n\n\u4e3b\u8981\u8fd8\u662f\u4ee3\u7801\u96be\u5199QAQ\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define sz(x) (int)(x.size())\nusing namespace std;\nconst int mod=1e9+7,Base=233,inf=0x3f3f3f3f;\nconst long long INF=0x3f3f3f3f3f3f3f3f;\ntemplate<typename T>inline void chmax(T &a, T b){a=max(a,b);}\ntemplate<typename T>inline void chmin(T &a, T b){a=min(a,b);}\ninline void trans(int &a,int b){a+=b;if(a>mod)a-=mod;}\nconst int maxn=4e5+5;\nint n,q,p[maxn];\nlong long a[maxn],b[maxn];\nvector<int> g[maxn];\nint in[maxn],out[maxn],tim=0;\nlong long ne[maxn<<2],d[maxn<<2];\nstruct line\n{\n\tlong long k,b;\n}val[maxn];\nstruct node\n{\n\tint l,r;\n\tlong long k,b;\n};\nstruct segtree\n{\n\tnode tree[maxn<<2];\n\tvoid pushup(int x)\n\t{\n\t\tint v=(tree[x<<1].b>=tree[x<<1|1].b?(x<<1):(x<<1|1));\n\t\ttree[x].k=tree[v].k;\n\t\ttree[x].b=tree[v].b;\n\t\tne[x]=min((tree[v].k>=tree[v^1].k?INF:(tree[v].b-tree[v^1].b)/(tree[v^1].k-tree[v].k)),min(ne[x<<1],ne[x<<1|1]));\n\t}\n\tvoid upd(int x,long long v)\n\t{\n\t\ttree[x].b+=tree[x].k*v;\n\t\tne[x]-=v;\n\t\td[x]+=v;\n\t}\n\tvoid pushdown(int x)\n\t{\n\t\tif(!d[x])\n\t\t\treturn;\n\t\tupd(x<<1,d[x]);\n\t\tupd(x<<1|1,d[x]);\n\t\td[x]=0;\n\t}\n\tvoid build(int x,int l,int r)\n\t{\n\t\ttree[x].l=l;\n\t\ttree[x].r=r;\n\t\tif(l==r)\n\t\t{\n\t\t\ttree[x].k=val[l].k;\n\t\t\ttree[x].b=val[l].b; \n\t\t\tne[x]=INF;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(x<<1,l,mid);\n\t\tbuild(x<<1|1,mid+1,r);\n\t\tpushup(x);\n\t}\n\tvoid update(int x,int l,int r,long long v)\n\t{\n\t\tif(!tree[x].r)\n\t\t\treturn;\n\t\tif(tree[x].l>=l&&tree[x].r<=r&&v<=ne[x])\n\t\t{\n\t\t\tupd(x,v);\n\t\t\treturn; \n\t\t}\n\t\tpushdown(x);\n\t\tint mid=(tree[x].l+tree[x].r)>>1;\n\t\tif(l<=mid)\n\t\t\tupdate(x<<1,l,r,v);\n\t\tif(r>mid)\n\t\t\tupdate(x<<1|1,l,r,v);\n\t\tpushup(x);\n\t}\n\tlong long query(int x,int l,int r)\n\t{\n\t\tif(tree[x].l>=l&&tree[x].r<=r)\n\t\t\treturn tree[x].b;\n\t\tpushdown(x);\n\t\tint mid=(tree[x].l+tree[x].r)>>1;\n\t\tlong long ret=-INF;\n\t\tif(l<=mid)\n\t\t\tret=query(x<<1,l,r);\n\t\tif(r>mid)\n\t\t\tchmax(ret,query(x<<1|1,l,r));\n\t\treturn ret;\n\t}\n}tr;\nvoid dfs(int u)\n{\n\tin[u]=++tim;\n\ta[u]+=a[p[u]];\n\tb[u]+=b[p[u]];\n\tlong long v=abs(b[u]);\n\tval[tim]={v,a[u]*v};\n\tfor(int i=0;i<sz(g[u]);i++)\n\t{\n\t\tint v=g[u][i];\n\t\tdfs(v);\n\t}\n\tout[u]=++tim;\n\tval[tim]={-v,-a[u]*v};\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",p+i);\n\t\tg[p[i]].push_back(i);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%lld\",a+i);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%lld\",b+i);\n\tdfs(1);\n\ttr.build(1,1,tim);\n\tint opt,v;\n\tlong long x;\n\twhile(q--)\n\t{\n\t\tscanf(\"%d%d\",&opt,&v);\n\t\tif(opt==1)\n\t\t{\n\t\t\tscanf(\"%lld\",&x);\n\t\t\ttr.update(1,in[v],out[v],x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"%lld\\n\",tr.query(1,in[v],out[v]));\n\t\t}\n\t}\n    return 0;\n}\n```",
        "postTime": 1660206163,
        "uid": 229669,
        "name": "Jerry__Jiang",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011CF1178G The Awesomest Vertex"
    },
    {
        "content": "# CF1178G The Awesomest Vertex\n\n[~~\u4e0d\u8981\u8138\u7684\u5b89\u5229\u81ea\u5df1\u7684\u535a\u5ba2~~](https://www.cnblogs.com/Zwaire/)\n\n## \u9898\u76ee\u63cf\u8ff0\uff1a \n\n[Link](https://www.luogu.com.cn/problem/CF1178G)\n\n## \u9898\u76ee\u5206\u6790\uff1a\n\n\u4e3b\u8981\u8bf4\u4e00\u4e0b\u90a3\u79cd\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u5427\u3002\uff08~~\u8dd1\u7684\u8d3c\u5feb~~\uff09\n\n\u9996\u5148\u770b\u5230\u8fd9\u79cd\u5b50\u6811\u7684\u95ee\u9898\uff0c\u76f4\u63a5 dfs \u5e8f\u5148\u8dd1\u4e0b\u6765\u3002\u8fd9\u6837\u7684\u8bdd\u5176\u5b9e\u5c31\u662f\u76f8\u5f53\u4e8e\u6c42\u4e00\u4e2a\u533a\u95f4\u5185\u90e8\u7684\u6700\u5927\u503c\u3002\u548c\u533a\u95f4\u4fee\u6539\u3002\u5f62\u5f0f\u5316\u7684\u6765\u8bf4\u3002\u8981\u6c42\u652f\u6301\u4e00\u4e0b\u4e24\u4e2a\u64cd\u4f5c\u3002\n\n1. \u5c06\u5b50\u6811 $x$ \u5185\u90e8\u7684\u70b9\u7684 $a_i$ \u503c\u5168\u90e8\u52a0 $x$\u3002\n2. \u6c42\u5b50\u6811 $x$ \u5185\u90e8\u7684 $b_i\\Delta+ a_i \\times b_i $ \u7684\u6700\u5927\u503c\u3002\n\n\u90a3\u4e48\u8fd9\u6837\u7684\u64cd\u4f5c\u53ef\u4ee5\u60f3\u5230\u5229\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u70b9\u770b\u6210\u4e00\u6761\u7ebf\u6bb5\u3002\u5373 $b_ix+a_i \\times b_i$,\u90a3\u4e48\u5176\u5b9e\u5c31\u662f\u7ef4\u62a4\u4e00\u4e2a\u51f8\u58f3\uff0c\u4f46\u662f\u8003\u8651\u4e00\u4e0b\u7ef4\u62a4\u51f8\u58f3\u7684\u8fc7\u7a0b\uff0c\u5176\u5b9e\u662f\u5bf9\u4e8e\u4e00\u6761\u76f4\u7ebf\u6765\u8bf4\uff0c\u627e\u5230\u6700\u65e9\u7684\u4e0e\u4ed6\u76f8\u4ea4\u7684\u70b9\u3002\u4e8e\u662f\u4e4e\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u8fd9\u4e2a\u4ea4\u70b9\u7684\u6a2a\u5750\u6807\u548c\u533a\u95f4\u7684\u6700\u5927\u503c\u7684\u90a3\u4e00\u6761\u7ebf\u6bb5\u662f\u4ec0\u4e48\u3002\u90a3\u4e48\u5728\u4fee\u6539\u7684\u65f6\u5019\u5462\uff1f\u4e3b\u8981\u5229\u7528\u7684\u662f\u5409\u53f8\u673a\u7ebf\u6bb5\u6811\u7684\u601d\u60f3\u3002\u5982\u679c\u8bf4\u5f53\u524d\u6211\u52a0\u7684\u6743\u503c\u4e0d\u591f\u8fbe\u5230\u6700\u5c0f\u7684\u76f8\u4ea4\u7684\u90a3\u4e2a\u70b9\uff08\u4e5f\u5c31\u662f\u53d1\u751f\u6700\u5927\u503c\u6539\u53d8\u7684\u90a3\u4e2a\u70b9\uff09\u7684\u8bdd\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6253\u4e0a\u61d2\u6807\u8bb0\uff0c\u4e5f\u5c31\u662f\u628a\u76f8\u4ea4\u7684\u70b9\u5411\u5de6\u79fb\u52a8\uff0c\u5728 `pushup` \u7684\u65f6\u5019\u8fdb\u884c\u66f4\u65b0\u7b54\u6848\u3002\u5426\u5219\u7684\u8bdd\u76f4\u63a5\u9012\u5f52\u8fdb\u5b50\u6811\u3002\n\n\u7531\u4e8e\u662f\u5e26\u7740\u7edd\u5bf9\u503c\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53e6\u5916\u8fdb\u884c\u7ef4\u62a4\u4e00\u4e2a\u8d1f\u7684\u6743\u503c\u7684\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log^3)$\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6548\u7387\u5f88\u9ad8\uff0c\u4ee3\u7801\u4e5f\u4e0d\u662f\u5f88\u96be\u5199\u3002\uff08~~\u81f3\u5c11\u6bd4\u5206\u5757\u597d\u5199\u591a\u4e86~~\uff09\n\n## Code\uff1a\n\n```cpp\n//editor : DRYAYST\n#include <bits/stdc++.h>\n#define g() getchar()\n#define il inline\n#define ull unsigned long long\n#define eps 1e-10\n#define ll long long\n#define pa pair<int, int>\n#define for_1(i, n) for(int i = 1; i <= (n); ++i)\n#define for_0(i, n) for(int i = 0; i < (n); ++i)\n#define for_xy(i, x, y) for(int i = (x); i <= (y); ++i)\n#define for_yx(i, y, x) for(int i = (y); i >= (x); --i)\n#define for_edge(i, x) for(int i = head[x]; i; i = nxt[i])\n#define int long long\n#define DB double\n#define ls (p<<1)\n#define rs (p<<1|1)\n#define m_p make_pair\n#define fi first\n#define se second\nusing namespace std;\nconst int N =  1e6 + 10, INF = 1e18, mod = 1e9 + 7;\nil int qpow(int x, int k) {\n    int ans = 1;\n\n    while (k) {\n        if (k & 1)\n            ans = ans * x % mod;\n\n        x = x * x % mod;\n        k >>= 1;\n    }\n\n    return ans;\n}\nil int Add(int x, int y) {\n    return (x += y) %= mod;\n}\nil int Del(int x, int y) {\n    return (x = x - y + mod) % mod;\n}\nil int Mul(int x, int y) {\n    return x * y % mod;\n}\nil int inv(int x) {\n    return qpow(x, mod - 2);\n}\ninline int re() {\n    int x = 0, p = 1;\n    char ch = getchar();\n\n    while (ch > '9' || ch < '0') {\n        if (ch == '-')\n            p = -1;\n\n        ch = getchar();\n    }\n\n    while (ch <= '9' and ch >= '0') {\n        x = (x << 3) + (x << 1) + (ch ^ 48);\n        ch = getchar();\n    }\n\n    return x * p;\n}\nint head[N], ver[N], nxt[N], tot;\nil void add(int x, int y) {\n    ver[++tot] = y;\n    nxt[tot] = head[x];\n    head[x] = tot;\n}\nint n, q, cnt;\nint fa[N], a[N], w[N], dfn[N], ed[N];\nvoid dfs(int x) {\n    dfn[x] = ++cnt;\n    for_edge(i, x)dfs(ver[i]);\n    ed[x] = cnt;\n}\nstruct Seg {\n    int a[N], b[N], lz[N], Fk[N];\n    struct Line {\n        int k, b;\n    } mx[N];\n    pair<Line, int> Max(Line a, Line b) {\n        if (a.b < b.b)\n            swap(a, b);\n\n        return m_p(a, b.k > a.k ? (a.b - b.b) / (b.k - a.k) : INF);\n    }\n    il void push_up(int p) {\n        pair<Line, int> tmp = Max(mx[ls], mx[rs]);\n        Fk[p] = min(min(Fk[ls], Fk[rs]), tmp.second);\n        mx[p] = tmp.first;\n    }\n    void Build(int p, int l, int r) {\n        lz[p] = 0;\n        Fk[p] = INF;\n\n        if (l == r) {\n            mx[p] = Line{b[l], a[l] *b[l]};\n            return;\n        }\n\n        int mid = (l + r) >> 1;\n        Build(ls, l, mid);\n        Build(rs, mid + 1, r);\n        push_up(p);\n    }\n    il void push_down(int p) {\n        mx[ls].b += mx[ls].k * lz[p];\n        mx[rs].b += mx[rs].k * lz[p];\n        Fk[ls] -= lz[p];\n        Fk[rs] -= lz[p];\n        lz[ls] += lz[p];\n        lz[rs] += lz[p];\n        lz[p] = 0;\n        return;\n    }\n    void Update(int p, int L, int R, int l, int r, int v) {\n        int mid = (L + R) >> 1;\n\n        if (l <= L and r >= R) {\n            if (v > Fk[p]) {\n                push_down(p);\n                Update(ls, L, mid, l, r, v);\n                Update(rs, mid + 1, R, l, r, v);\n                push_up(p);\n            } else\n                Fk[p] -= v, lz[p] += v, mx[p].b += mx[p].k * v;\n\n            return ;\n        }\n\n        push_down(p);\n\n        if (l <= mid)\n            Update(ls, L, mid, l, r, v);\n\n        if (r > mid)\n            Update(rs, mid + 1, R, l, r, v);\n\n        push_up(p);\n    }\n    int Query(int p, int L, int R, int l, int r) {\n        if (l <= L and r >= R)\n            return mx[p].b;\n\n        push_down(p);\n        int mid = (L + R) >> 1, res = -INF;\n\n        if (l <= mid)\n            res = max(res, Query(ls, L, mid, l, r));\n\n        if (r > mid)\n            res = max(res, Query(rs, mid + 1, R, l, r));\n\n        return res;\n    }\n} A, B;\nsigned main() {\n    n = re(), q = re();\n\n    for (int i = 2; i <= n; ++i)\n        fa[i] = re(), add(fa[i], i);\n\n    for_1(i, n) a[i] = re(), a[i] += a[fa[i]];\n    for_1(i, n) w[i] = re(), w[i] += w[fa[i]];\n    dfs(1);\n\n    for (int i = 1; i <= n; ++i)\n        A.b[dfn[i]] = w[i], B.b[dfn[i]] = -w[i], A.a[dfn[i]] = B.a[dfn[i]] = a[i];\n\n    A.Build(1, 1, n);\n    B.Build(1, 1, n);\n\n    while (q--) {\n        int op = re();\n        int x = re();\n\n        if (op == 1) {\n            int v = re();\n            A.Update(1, 1, n, dfn[x], ed[x], v);\n            B.Update(1, 1, n, dfn[x], ed[x], v);\n        } else\n            printf(\"%lld\\n\", max(A.Query(1, 1, n, dfn[x], ed[x]), B.Query(1, 1, n, dfn[x], ed[x])));\n    }\n\n}\n```\n\u7531\u4e8e\u539f\u6765\u7684\u4ee3\u7801\u538b\u884c\u6709\u70b9\u4e25\u91cd\u5bfc\u81f4\u4ee3\u7801\u9605\u8bfb\u6709\u70b9\u56f0\u96be\uff0c\u6240\u4ee5\u53bb loj \u683c\u5f0f\u5316\u4e86\u4e00\u4e0b\u3002\u3002\n",
        "postTime": 1649495307,
        "uid": 333580,
        "name": "Zwaire",
        "ccfLevel": 6,
        "title": "CF1178G The Awesomest Vertex"
    },
    {
        "content": "\u9898\u89e3\u600e\u4e48\u90fd\u662f\u51f8\u58f3\u554a\uff1f\u674e\u8d85\u53c8\u597d\u5199\u53c8\u4e0d\u5bb9\u6613\u6302\u3002\n\n\u9996\u5148\u662f\u5230\u6839\u6c42\u548c\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u663e\u7136\u5c31\u662f\u4e2a\u5b50\u6811\u4fee\u6539\u3002\n\n\u518d\u770b\u8be2\u95ee\u7684\u4e1c\u897f\uff0c\u6743\u503c $b$ \u4e00\u76f4\u6ca1\u53d8\uff0c\u90a3\u4e48\u6539 $a$ \u540e\u7684\u6743\u503c\u5c31\u662f\u4e00\u6761\u76f4\u7ebf $y=(a+x)\\cdot b$\u3002\n\n\u7531\u4e8e\u6709\u7edd\u5bf9\u503c\uff0c\u4e0e $y=-(a+x)\\cdot b$ \u53d6\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u4e00\u5806\u76f4\u7ebf\u6c42\u6700\u5927\u76f4\u63a5\u4e0a\u674e\u8d85\uff0c\u4f46\u4fee\u6539\u53ea\u5f71\u54cd\u5230\u4e00\u90e8\u5206\u7ebf\u6bb5\uff0c\u8f6c\u4e3a DFS \u5e8f\u5c31\u662f\u53ea\u5f71\u54cd\u4e00\u6bb5\u533a\u95f4\uff0c\u4e8e\u662f\u5728\u5916\u9762\u5957\u4e2a\u5206\u5757\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt{n}\\log{n})$\uff0c\u74f6\u9888\u5728\u674e\u8d85\u7684 log \u4e0a\u3002\n\n\u4f46\u6211\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n+Q\\sqrt{n})$ \u7684\uff0c\u56e0\u4e3a\u6211\u61d2\u5f97\u56de\u6536\u7a7a\u95f4\uff0c\u674e\u8d85\u6bcf\u6b21\u52a0\u7ebf\u6bb5\u81f3\u591a\u589e\u52a0 1 \u7684\u7a7a\u95f4\uff0c\u5982\u679c\u56de\u6536\u4e86\u8fd8\u662f $O(n)$ \u7684\u3002\n\n\u611f\u89c9\u6ca1\u600e\u4e48\u5361\u5e38\uff0c\u4f30\u8ba1\u662f\u674e\u8d85\u6df1\u5ea6\u4e0d\u6df1\uff0clog \u8dd1\u4e0d\u6ee1\u3002\n\n\u6ce8\u610f\u4e00\u4e0b\u4fee\u6539\u503c\uff0c\u5373 $y=(a+x)\\cdot b$ \u4e2d\u7684 $x$ \u53ef\u80fd\u4e3a 0 \u5373\u53ef\u3002\n\n~~\u4e3b\u8981\u662f\u770b\u4e0d\u60ef\u9898\u89e3\u533a\u88ab\u51f8\u58f3\u5360\u9886\u3002~~\n\n[\u4ee3\u7801](https://www.luogu.com.cn/paste/s8qjjn1j)(\u5e73\u51e1\u7684\u5206\u5757+\u674e\u8d85\uff0c\u6ca1\u4ec0\u4e48\u597d\u770b\u7684)",
        "postTime": 1625993557,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "CF1178G The Awesomest Vertex"
    },
    {
        "content": "**\u672c\u6587\u4e2d\u5047\u8bbe $n$ \u548c $q$ \u540c\u9636\u3002**\n\n\u697c\u4e0b\uff08\u597d\u50cf\u4e5f\u662f\u5927\u4f17\u505a\u6cd5\uff09\u7684 $O(n\\sqrt{n}\\log n)$ \u7684\u505a\u6cd5\u662f\u600e\u4e48\u5361\u8fc7\u53bb\u7684\u2026\u2026Orz %%%\n\n**\u8fd9\u91cc\u53d1\u4e00\u4e0b $O(n\\sqrt{n})$ \u7684\u505a\u6cd5\u3002**\n\n\u9996\u5148\u8fd8\u662f\u8981\u5148\u8bb2\u4e00\u4e0b $O(n\\sqrt{n}\\log n)$ \u7684\u505a\u6cd5\u3002\n\n\u5148\u628a\u6811\u53d8\u6210\u5e8f\u5217\uff0c\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u3002\u7136\u540e\u53d1\u73b0 $b$ \u4e00\u76f4\u4e0d\u53d8\uff0c\u5c31\u4e0d\u7ba1\u4e86\u3002\n\n\u90a3\u4e48\u5c31\u53d8\u6210\u4e86\uff1a\u533a\u95f4\u7684 $a$ \u52a0\u4e0a\u4e00\u4e2a\u6b63\u6570\uff0c\u8fd8\u6709\u533a\u95f4\u7684 $|a|\\times b$ \u7684\u6700\u5927\u503c\u3002\n\n\u8fd9\u4e2a\u7edd\u5bf9\u503c\u5f88\u96be\u53d7\uff0c\u4e0d\u59a8\u53d8\u6210 $\\max(a\\times b,-a\\times b)$\u3002\n\n\u662f\u65f6\u5019\u4e0a\u4f18\u7f8e\u7684\u5206\u5757\u4e86\u3002\n\n\u5206\u6210 $O(\\sqrt{n})$ \u5757\uff0c\u6bcf\u5757\u5927\u5c0f $O(\\sqrt{n})$\u3002\u5757\u7ef4\u62a4\u6240\u6709 $a\\times b$ \u7684\u6700\u5927\u503c\u3002\uff08\u628a $-a\\times b$ \u4e5f\u6254\u4e86\u8fdb\u53bb\uff0c\u4e0b\u6587\u4e3a\u4e86\u65b9\u4fbf\u5c31\u4e0d\u7ba1\u4e86\uff09\n\n\u4fee\u6539\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6574\u5757\u6253\u6807\u8bb0\u3002\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u5bf9\u4e8e\u6574\u5757\u8981\u6c42\u7684\u5c31\u662f $(a+tag)\\times b=b\\times tag+ab$ \u7684\u6700\u5927\u503c\u3002\u90a3\u4e48\u5bf9\u6bcf\u4e2a\u5757\u7ef4\u62a4\u4e00\u4e2a\u4e0a\u51f8\u5305\uff0c\u628a\u6240\u6709 $y=bx+ab$ \u90fd\u6254\u8fdb\u53bb\u3002\n\n\u4fee\u6539\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6574\u5757\u6253\u6807\u8bb0\uff0c\u5bf9\u4e8e\u96f6\u6563\u5757\u66b4\u529b\u91cd\u6784\u3002\n\n\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6574\u5757\u51f8\u5305\u4e0a\u4e8c\u5206\uff08$tag$ \u770b\u4f5c\u8be2\u95ee\u7684\u6a2a\u5750\u6807\uff09\uff0c\u5bf9\u4e8e\u96f6\u6563\u5757\u66b4\u529b\u3002\n\n\u8fd9\u65f6\u5c31\u6709\u4e86 $O(n\\sqrt{n}\\log n)$ \u7684\u505a\u6cd5\u4e86\u3002\n\n\u81f3\u4e8e\u600e\u4e48\u4f18\u5316\u2026\u2026\n\n\u8fd9\u4e2a $\\log$ \u8981\u7528\u6765\u5e72\u5565\uff1f\u4e00\u4e2a\u662f\u4fee\u6539\u65f6\u96f6\u6563\u5757\u66b4\u529b\u91cd\u6784\u8981\u7ed9\u7ebf\u6392\u5e8f\uff0c\u4e00\u4e2a\u662f\u8be2\u95ee\u65f6\u6574\u5757\u8981\u4e8c\u5206\u3002\n\n\u524d\u9762\u90a3\u4e2a $\\log$ \u5f88\u597d\u53bb\u6389\uff0c\u56e0\u4e3a\u6240\u6709\u7ebf\u7684\u659c\u7387\u90fd\u4e0d\u53d8\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\u4e5f\u662f\u4e0d\u53d8\u7684\uff0c\u9884\u5904\u7406\u65f6\u6392\u4e2a\u5e8f\uff0c\u540e\u9762\u5c31\u4e0d\u7528\u6392\u5e8f\u4e86\u3002\u4fee\u6539\u590d\u6742\u5ea6\u53d8\u6210\u4e25\u683c $O(\\sqrt{n})$\u3002\u5f53\u7136\u5982\u679c\u4f60\u6709\u95f2\u5fc3\uff0c\u5199\u7ebf\u6027\u6392\u5e8f\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\n\n\u540e\u9762\u90a3\u4e2a $\\log$\uff0c\u53d1\u73b0\u6bcf\u6b21\u52a0\u7684\u90fd\u662f\u6b63\u6570\uff0c\u6240\u4ee5 $tag$ \u4e0d\u6e05\u96f6\u7684\u8bdd\u662f\u4e0d\u964d\u7684\uff0c\u76f4\u63a5\u5f04\u4e2a\u6307\u9488\uff0c\u6bcf\u6b21\u7ed9\u6574\u5757\u4fee\u6539\u65f6\uff0c\u4e0d\u505c\u8bd5\u56fe\u5f80\u540e\u79fb\uff0c\u7ed9\u96f6\u6563\u5757\u4fee\u6539\u65f6\u628a\u6307\u9488\u91cd\u7f6e\uff0c\u8be2\u95ee\u65f6\u76f4\u63a5\u8c03\u7528\u5c31\u884c\u4e86\u3002\n\n\u8fd9\u4e2a\u66b4\u529b\u79fb\u6307\u9488\u770b\u8d77\u6765\u590d\u6742\u5ea6\u5f88\u8ff7\uff0c\u56e0\u4e3a\u8fd8\u8981\u91cd\u7f6e\uff0c\u4e5f\u5361\u4e86\u6211\u5f88\u4e45\u624d\u7406\u89e3\u3002\u8fd9\u91cc\u8bc1\u660e\u4e0b\u590d\u6742\u5ea6\u662f\u5747\u644a $O(1)$\u3002\n\n**\u590d\u6742\u5ea6\u8bc1\u660e\uff1a**\n\n\u5982\u679c\u53ea\u6709\u6574\u5757\u6574\u5757\u7684\u4fee\u6539\u64cd\u4f5c\uff0c\u590d\u6742\u5ea6\u660e\u663e\u662f\u5747\u644a $O(1)$\u3002\n\n\u56e0\u4e3a\u628a\u6307\u9488\u5f80\u53f3\u79fb\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u5750\u6807\u5f80\u53f3\u79fb\uff0c\u800c\u4e14\u4ee3\u7801\u5b9e\u73b0\u4e2d\u6bcf\u53f3\u79fb\u4e00\u6b21\uff0c\u6307\u9488\u53f3\u8fb9\u90fd\u81f3\u5c11\u5c11\u4e00\u6761\u7ebf\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5757\u603b\u590d\u6742\u5ea6\u5c31\u662f $O(size)$\uff0c\u5747\u644a\u4e0b\u6765\u5c31\u662f $O(1)$ \u4e86\u3002\n\n\u518d\u52a0\u5165\u96f6\u6563\u5757\u64cd\u4f5c\u3002\u7531\u4e8e\u52a0\u7684\u90fd\u662f\u6b63\u6570\uff0c\u6240\u4ee5\u6d89\u53ca\u5230\u7684\u7ebf\u6bd4\u5757\u5185\u5176\u5b83\u7684\u7ebf\u52a0\u7684\u66f4\u591a\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u5f80\u5de6\u79fb\u66f4\u591a\u3002\u6b64\u65f6\u91cd\u6784\u5757\u65f6\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6240\u6709\u7ebf\u548c\u6307\u9488\u90fd\u5f80\u5de6\u79fb\u4e00\u6bb5\u540e\uff0c\u5c06\u64cd\u4f5c\u6d89\u53ca\u5230\u7684\u7ebf\u7ee7\u7eed\u5f80\u5de6\u79fb\uff0c\u6240\u4ee5\u6307\u9488\u53f3\u8fb9\u7684\u7ebf\u8fd8\u662f\u4e0d\u4f1a\u53d8\u591a\u3002\n\n\uff08\u867d\u7136\u542c\u8d77\u6765\u50cf\u662f\u4fee\u6539\u8d8a\u591a\u5c31\u8d8a\u5feb\u4e00\u6837\u8352\u8c2c\uff0c\u4f46\u4e8b\u5b9e\u7684\u786e\u5982\u6b64\uff09\n\n\u8fd9\u6837\u603b\u590d\u6742\u5ea6\u5c31\u662f $O(n\\sqrt{n})$ \u4e86\u3002\n\n~~\u6839\u636e\u5b98\u65b9\u9898\u89e3\uff0c~~\u5757\u5927\u5c0f $\\sqrt{n/6}$ \u65f6\u6700\u4f18\uff0c\u6240\u4ee5\u6211\u5c31\u7528\u4e86\u3002\n\n~~\uff08\u5176\u5b9e\u662f\u56e0\u4e3a\u7528 $\\sqrt{n}$ \u88ab\u5361\u5e38\u4e86\uff09~~\n\n~~\uff08\u641e\u5f97\u6bd4\u5e26 $\\log$ \u7684\u8fd8\u6162\uff09~~\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=400040,bl=1111,sz=444;\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define ROF(i,a,b) for(int i=(a);i>=(b);i--)\n#define MEM(x,v) memset(x,v,sizeof(x))\ninline ll read(){\n\tchar ch=getchar();ll x=0,f=0;\n\twhile(ch<'0' || ch>'9') f|=ch=='-',ch=getchar();\n\twhile(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn f?-x:x;\n}\nstruct line{\n\tll k,b;\n\tint id;\n\tbool operator<(const line &l)const{return k<l.k;}\n}vec[bl][sz],hull[bl][sz];\nint n,q,el,head[maxn],to[maxn],nxt[maxn],in[maxn],out[maxn],dfs_cnt;\nll apre[maxn],bpre[maxn],a[maxn],b[maxn];\nint sq,lft[bl],rig[bl],bel[maxn],at[bl],vl[bl],hl[bl];\nll tag[bl];\ninline void add(int u,int v){\n\tto[++el]=v;nxt[el]=head[u];head[u]=el;\n}\ninline double interx(line l1,line l2){\n\treturn 1.0*(l1.b-l2.b)/(l2.k-l1.k);\n}\nvoid dfs(int u,int f){\n\tapre[u]+=apre[f];bpre[u]+=bpre[f];\n\tin[u]=++dfs_cnt;\n\ta[dfs_cnt]=apre[u];b[dfs_cnt]=bpre[u];\n\tfor(int i=head[u];i;i=nxt[i]) dfs(to[i],u);\n\tout[u]=dfs_cnt;\n}\nvoid move(int id){\n\twhile(at[id]<hl[id] && interx(hull[id][at[id]],hull[id][at[id]+1])<=tag[id]) at[id]++;\n}\nvoid build(int id){\n\thl[id]=0;\n\tFOR(i,1,vl[id]){\n\t\tif(a[vec[id][i].id]>=0 && vec[id][i].k<0) continue;\n\t\tint tmp;\n\t\tbool flag=false;\n\t\twhile((tmp=hl[id]) && hull[id][tmp].k==vec[id][i].k){\n\t\t\tif(hull[id][tmp].b<vec[id][i].b) hl[id]--;\n\t\t\telse{flag=true;break;}\n\t\t}\n\t\tif(flag) continue;\n\t\twhile((tmp=hl[id])>1 && interx(hull[id][tmp-1],vec[id][i])<=interx(hull[id][tmp-1],hull[id][tmp])) hl[id]--;\n\t\thull[id][++hl[id]]=vec[id][i];\n\t}\n\tat[id]=1;\n}\nvoid pushdown(int id){\n\tFOR(i,1,vl[id]){\n\t\tll k=vec[id][i].k,b=vec[id][i].b;\n\t\tvec[id][i]=(line){k,b+k*tag[id],vec[id][i].id};\n\t}\n\tFOR(i,lft[id],rig[id]) a[i]+=tag[id];\n\ttag[id]=0;at[id]=1;\n}\nvoid init(){\n\tsq=max(1.0,sqrt(n/6));\n\tFOR(i,1,n){\n\t\tbel[i]=i/sq;\n\t\tif(bel[i]!=bel[i-1]){\n\t\t\tlft[bel[i]]=i;\n\t\t\tif(i!=1) rig[bel[i-1]]=i-1;\n\t\t}\n\t}\n\trig[bel[n]]=n;\n\tFOR(i,1,n) b[i]=abs(b[i]);\n\tFOR(i,1,n){\n\t\tvec[bel[i]][++vl[bel[i]]]=(line){b[i],1ll*a[i]*b[i],i};\n\t\tvec[bel[i]][++vl[bel[i]]]=(line){-b[i],-1ll*a[i]*b[i],i};\n\t}\n\tFOR(i,bel[1],bel[n]){\n\t\tsort(vec[i]+1,vec[i]+vl[i]+1);\n\t\tbuild(i);\n\t}\n}\nvoid update_debris(int id,int l,int r,int v){\n\tpushdown(id);\n\tFOR(i,1,vl[id]){\n\t\tint x=vec[id][i].id;\n\t\tif(x>=l && x<=r) vec[id][i].b+=vec[id][i].k*v;\n\t}\n\tFOR(i,l,r) a[i]+=v;\n\tbuild(id);\n}\nvoid update(int l,int r,int v){\n\tif(bel[l]==bel[r]) return update_debris(bel[l],l,r,v);\n\tupdate_debris(bel[l],l,rig[bel[l]],v);\n\tupdate_debris(bel[r],lft[bel[r]],r,v);\n\tFOR(i,bel[l]+1,bel[r]-1) tag[i]+=v;\n}\nll query_debris(int id,int l,int r){\n\tll ans=0;\n\tFOR(i,l,r) ans=max(ans,abs(a[i]+tag[id])*b[i]);\n\treturn ans;\n}\nll query(int l,int r){\n\tif(bel[l]==bel[r]) return query_debris(bel[l],l,r);\n\tll ans=max(query_debris(bel[l],l,rig[bel[l]]),query_debris(bel[r],lft[bel[r]],r));\n\tFOR(i,bel[l]+1,bel[r]-1){\n\t\tmove(i);\n\t\tll k=hull[i][at[i]].k,b=hull[i][at[i]].b,x=tag[i];\n\t\tans=max(ans,k*x+b);\n\t}\n\treturn ans;\n}\nint main(){\n\tn=read();q=read();\n\tFOR(i,2,n) add(read(),i);\n\tFOR(i,1,n) apre[i]=read();\n\tFOR(i,1,n) bpre[i]=read();\n\tdfs(1,0);\n\tinit();\n\twhile(q--){\n\t\tint op=read(),x=read();\n\t\tif(op==1) update(in[x],out[x],read());\n\t\telse printf(\"%lld\\n\",query(in[x],out[x]));\n\t}\n}\n```\n\n",
        "postTime": 1570018906,
        "uid": 72118,
        "name": "AThousandSuns",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1178G \u3010The Awesomest Vertex\u3011"
    },
    {
        "content": "\u6709\u4e00\u4e2a\u795e\u4ed9\u7684\u4e09\u4e2a$log$\u7684\u505a\u6cd5\u3002\n<!--more-->\n\n\u9996\u5148\uff0c\u8f6c\u6362\u4e00\u4e0b\u9898\u76ee\uff0c\u5c31\u53d8\u6210\u4e86\n\n\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6709\u4e24\u4e2a\u5143\u7d20$a_i,b_i$\uff0c\u73b0\u6709\u4e24\u79cd\u64cd\u4f5c\u3002\n\n$1\\ l\\ r\\ x\\ $\uff0c$[l,r]$\u7684$a_i$\u53d8\u6210$a_i+b_i\\ast x,x>0$\u3002\n\n$2\\ l\\ r\\ $\uff0c\u8be2\u95ee$max(a[l],...,a[r])$\u3002\n\n\u663e\u7136\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u5206\u5757\uff0c\u7136\u540e\u6bcf\u4e2a\u5757\u7ef4\u62a4\u4e2a\u51f8\u5305\u5c31\u5b8c\u4e8b\u4e86\uff0c\u590d\u6742\u5ea6$O(n\\sqrt{n})$\u3002\n\n\u7136\u540e\u6709\u4e2a\u795e\u4ed9\u7684\u505a\u6cd5\uff0c\u5c31\u662f\u4f60\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u8bb0\u5f55\u4e00\u4e0b\u5b50\u6811\u91cc\u8fd9\u4e48\u591a\u6761\u76f4\u7ebf\u4ea4\u70b9\u7684\u6700\u5c0f$x$\u5750\u6807\u548c\u6700\u4e0a\u9762\u7684\u76f4\u7ebf\u3002\u7136\u540e\u4fee\u6539\u7684\u65f6\u5019\uff0c\u5982\u679c\u5f53\u524d\u4fee\u6539\u4e4b\u540e$x$\u5750\u6807\u8fd8\u5230\u4e0d\u4e86\u6700\u5c0f$x$\u5750\u6807\uff0c\u5c31\u76f4\u63a5\u4e0a\u61d2\u6807\u8bb0\uff0c\u5426\u5219\u518d\u9012\u5f52\u8fdb\u5b50\u6811\u3002\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f$O(nlog^3n)$\u3002\u8bc1\u660e\u5927\u6982\u50cf\u5409\u53f8\u673a\u7ebf\u6bb5\u6811\u90a3\u6837\u3002\n\n[\u8fd9\u91cc\u662f$CF$\u4e0a\u795e\u4ed9$Daniel\\ Zhang$\u7684\u8bc1\u660e](https://codeforces.com/blog/entry/68534?#comment-530346)\u3002\n\ncode:\n```cpp\n//2019.8.31 by ljz\n//email 573902690@qq.com\n//if you find any bug in my code\n//please tell me\n#include<bits/stdc++.h>\n//#include<ext/pb_ds/tree_policy.hpp>\n//#include<ext/pb_ds/assoc_container.hpp>\nusing namespace std;\n//using namespace __gnu_pbds;\n//using namespace __gnu_cxx;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define INF 0x3f3f3f3f3f3f3f\n#define unl __int128\n#define eps 5.6e-8\n#define RG register\n#define db double\n#define pc(x) __builtin_popcount(x)\n//#define pc(x) __builtin_popcountll(x)\ntypedef pair<int,int> Pair;\n#define mp make_pair\n#define fi first\n#define se second\n#define pi acos(-1.0)\n#define pb push_back\n#define ull unsigned LL\n#define gc getchar\n//template <class T>using Tree=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;\n//inline char gc() {\n//    static char buf[100000],*p1,*p2;\n//    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n//}\n//inline int read() {\n//    res s=0,ch=gc();\n//    while(ch<'0'||ch>'9')ch=gc();\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s;\n//}\ninline int read() {\n    res s=0,ch=gc(),w=1;\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=gc();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n    return s*w;\n}\n//inline LL Read() {\n//    RG LL s=0;\n//    res ch=gc();\n//    while(ch<'0'||ch>'9')ch=gc();\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s;\n//}\n//inline LL Read() {\n//    RG LL s=0;\n//    res ch=gc(),w=1;\n//    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=gc();}\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s*w;\n//}\n//inline void write(RG unl x){\n//    if(x>10)write(x/10);\n//    putchar(int(x%10)+'0');\n//}\ninline void swap(res &x,res &y) {\n    x^=y^=x^=y;\n}\n//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n//clock_t start=clock();\n//inline void ck(){\n//    if(1.0*(clock()-start)/CLOCKS_PER_SEC>0.1)exit(0);\n//}\nconst int N=2e5+10;\nnamespace MAIN{\n    int n,m;\n    vector<int> G[N];\n    int a[N],b[N];\n    int dfn[N],low[N],idx,pos[N];\n    void dfs(res x){\n        pos[dfn[x]=idx++]=x;\n        for(auto tox:G[x])a[tox]+=a[x],b[tox]+=b[x],dfs(tox);\n        low[x]=idx;\n    }\n    struct TR{\n        int k,b,laz;\n        LL mn;\n        TR() {}\n        TR(res k,res b,res laz,RG LL mn):k(k),b(b),laz(laz),mn(mn) {}\n        inline void change(const res &va){\n            b+=va,mn-=va,laz+=va;\n        }\n    }tr[N<<3];\n    inline void pushdown(const res &rt){\n        if(!tr[rt].laz)return;\n        tr[rt<<1].change(tr[rt].laz),tr[rt<<1|1].change(tr[rt].laz),tr[rt].laz=0;\n    }\n    inline void pushup(const res &rt){\n        res ls=rt<<1,rs=rt<<1|1;\n        res k=tr[ls].k,b=tr[ls].b,K=tr[rs].k,B=tr[rs].b;\n        RG LL r0=1LL*k*b,r1=1LL*K*B;\n        if(r0>r1||(r0==r1&&k>K))swap(k,K),swap(b,B),swap(r0,r1);\n        tr[rt]=TR(K,B,0,min(tr[ls].mn,tr[rs].mn));\n        if(k>K)tr[rt].mn=min(tr[rt].mn,(r1-r0)/(k-K));\n    }\n    void build(res rt,res l,res r){\n        if(l+1==r){\n            res p=pos[l>>1];\n            tr[rt]=TR(l&1?b[p]:-b[p],a[p],0,INF);\n            return;\n        }\n        res mid=(l+r)>>1;\n        build(rt<<1,l,mid),build(rt<<1|1,mid,r),pushup(rt);\n    }\n    void modify(res rt,res l,res r,const res &L,const res &R,const res &va){\n        if(r<=L||R<=l)return;\n        if(L<=l&&r<=R&&tr[rt].mn>=tr[rt].laz+va){tr[rt].change(va);return;}\n        pushdown(rt);\n        res mid=(l+r)>>1;\n        modify(rt<<1,l,mid,L,R,va),modify(rt<<1|1,mid,r,L,R,va),pushup(rt);\n    }\n    LL query(res rt,res l,res r,const res &L,const res &R){\n        if(r<=L||R<=l)return -INF;\n        if(L<=l&&r<=R)return 1LL*tr[rt].k*tr[rt].b;\n        pushdown(rt);\n        res mid=(l+r)>>1;\n        return max(query(rt<<1,l,mid,L,R),query(rt<<1|1,mid,r,L,R));\n    }\n    inline void MAIN(){\n        n=read(),m=read();\n        for(res i=2;i<=n;i++)G[read()].pb(i);\n        for(res i=1;i<=n;i++)a[i]=read();\n        for(res i=1;i<=n;i++)b[i]=read();\n        dfs(1),build(1,0,2*n);\n        while(m--){\n            res opt=read();\n            if(opt==1){\n                res x=read(),va=read();\n                modify(1,0,2*n,dfn[x]<<1,low[x]<<1,va);\n            }\n            else {\n                res x=read();\n                printf(\"%lld\\n\",query(1,0,2*n,dfn[x]<<1,low[x]<<1));\n            }\n        }\n    }\n}\nint main(){\n//    srand(19260817);\n//    freopen(\"zao.in\",\"r\",stdin);\n//    freopen(\"std.out\",\"w\",stdout);\n    MAIN::MAIN();\n    return 0;\n}\n```\n\n",
        "postTime": 1567219559,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1178G \u3010The Awesomest Vertex\u3011"
    }
]