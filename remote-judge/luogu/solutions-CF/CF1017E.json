[
    {
        "content": "\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u697c\u4e0a\u5df2\u7ecf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u5de8\u7684\u7b97\u6cd5\uff0c\u5728\u8fd9\u91cc\uff0c\u672c\u849f\u84bb\u4ee3\u4e00\u4f4d\u5927\u4f6c\u8bb2\u8ff0\u53e6\u4e00\u79cd\u65b9\u6cd5\u3002  \n\n\u672c\u9898\u6240\u9700\u7b97\u6cd5:\n\n- [\u4e8c\u7ef4\u51f8\u5305(Andrew or Graham)](https://www.luogu.com.cn/problem/P2742)  \n\n- [kmp](https://www.luogu.com.cn/problem/P3375)\n\n### \u601d\u8def\n\n\u6211\u4eec\u7ef4\u62a4\u51f8\u5305\u7684\u5404\u4e2a\u8fb9\u7684\u957f\u5ea6\u8fdb\u884c\u6bd4\u5bf9\uff0c\u4f46\u7531\u4e8e\u6211\u4eec\u90fd\u77e5\u9053\uff0c\u53ea\u6709\u8fb9\u662f\u4e0d\u80fd\u8bc1\u660e\u5168\u7b49\u7684\uff0c\u90a3\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6761\u4ef6\u3002\u7b2c\u4e00\u79cd\u53ef\u4ee5\u50cf\u697c\u4e0a\u8bb2\u7684\u4e00\u6837\uff0c**\u52a0\u89d2**\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u50cf\u849f\u84bb\u4e00\u6837**\u52a0\u4e00\u4e9b\u8fb9**\u3002\u6211\u4eec\u5c06\u51f8\u5305\u538b\u6210\u4e00\u4e2a\u4e32\uff0c\u6bcf\u6b21\u7ed9\u4e32\u6dfb\u4e09\u6761\u8fb9\u7684\u957f\u5ea6\uff0c\u5206\u522b\u4e3a\u51f8\u5305\u4e0a\u5df2\u6709\u7684\u4e24\u6761\u8fb9\uff0c\u4ee5\u53ca\u65b0\u8fde\u4e00\u6761\u8fb9\u8fde\u63a5\u4e24\u6761\u5df2\u6709\u8fb9\u7684\u975e\u516c\u5171\u7aef\u70b9\uff0c\u4e09\u6761\u8fb9\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u7531\u4e8e**\u4e09\u89d2\u5f62\u7684\u7a33\u5b9a\u6027**(\u8fb9\u8fb9\u8fb9\u8bc1\u5168\u7b49)\uff0c\u6240\u4ee5\u5982\u679c\u76f8\u7b49\u53ea\u6709\u4e00\u79cd\u60c5\u51b5\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/e84vjhua.png)\n\n\u5982\u56fe\uff0c\u4f8b\u5982\u4ece $4$ \u53f7\u70b9\u5f00\u59cb\uff0c\u6211\u4eec\u9010\u6b21\u538b\u5165 $\\text{dcC,cbB,baA,aeE,edD}$\u3002\n\n\u5bfb\u627e\u51f8\u5305\u65f6\u5982\u679c\u60a8\u7528 P2742 \u7b2c\u4e00\u7bc7\u9898\u89e3 Andrew \u4ee3\u7801\u7684\u505a\u6cd5\u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u6709\u95ee\u9898\uff0c~~\u522b\u95ee\u6211\u4e3a\u4ec0\u4e48~~\u3002\n\n\u5f53\u6211\u4eec\u538b\u6210\u4e24\u4e2a\u4e32\u540e\uff0c\u53ea\u9700\u5c06\u5176\u4e2d\u4e00\u6761\u6269\u6210\u4e24\u500d\uff0ckmp \u5bfb\u627e\u53e6\u4e00\u4e2a\u4e32\u662f\u5426\u51fa\u73b0\u5373\u53ef\u3002\n\n\u5bf9\u4e86\uff0c\u7ffb\u8bd1\u53ef\u80fd\u6709\u4e00\u70b9\u95ee\u9898\uff0c\u4e0d\u53ea\u6709\u51f8\u591a\u8fb9\u5f62\uff0c\u53ef\u80fd\u8fd8\u6709\u76f4\u7ebf\uff0c~~\u522b\u95ee\u6211\u4e3a\u4ec0\u4e48~~\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u5728 $O(n\\log n)$\u3002\n```cpp\n#include<bits/stdc++.h>\n#define int long long \n#define Debug if(true)\n#define db long double\n#define F(x) (x)*(x)\nusing namespace std;\n//typedef unsigned long long ull;\nconst int N=1e6+1e3;\n\nint read(){\n\tint res=0,f=1;char c;\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) res=(res<<1)+(res<<3)+(c^48);\n\treturn res*f;\n}\n\nstruct vec{\n\tdb x,y;\n\tbool operator < (const vec a){\n\t\tif(x!=a.x) return x<a.x;\n\t\treturn y>a.y;\n\t}\n\tvec(){}\n\tvec(int _x,int _y){x=_x,y=_y;}\n}st[N],p[N];\n\nint top;\n\ndb cross(vec A,vec B){return A.x*B.y-A.y*B.x;}\n\ndb check(vec a,vec b,vec c)\n{\n\tvec A=vec(b.x-a.x,b.y-a.y);\n\tvec B=vec(c.x-a.x,c.y-a.y);\n\treturn cross(A,B);\n}\n\nvoid Andrew(int n)\n{\n\tsort(p+1,p+n+1);\n\t/*Debug{\n\t\tcout<<endl<<\"*********************\"<<endl;\n\t\tfor(int i=1;i<=n;i++) cout<<p[i].x<<\" \"<<p[i].y<<endl;\n\t\tcout<<\"*****************\"<<endl; \n\t}*/\n\tst[1]=p[1],top=1;\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\twhile(top>=2&&check(st[top-1],st[top],p[i])<=0) top--;\n\t\tst[++top]=p[i];\n\t}\n\tint tt=top;\n\tfor(int i=n-1;i>=1;i--)\n\t{\n\t\twhile(top>=tt+1&&check(st[top-1],st[top],p[i])<=0) top--;\n\t\tst[++top]=p[i];\n\t}\n\tst[++top]=st[2];\n\t//if(top==5) top-=2;\n\t/*Debug cout<<endl<<\"/\"<<endl;\n\tDebug for(int i=1;i<=top;i++) cout<<st[i].x<<\" j \"<<st[i].y<<endl;\n\tDebug cout<<endl;*/\n}\n\nint cnt1,cnt2;\ndb a[N],b[N];\n\ndb _dis(vec a,vec b){return sqrt(F(a.x-b.x)+F(a.y-b.y));}\n\nvoid build1(int n)\n{\n\tfor(int i=3;i<=n;i++)\n\t{\n\t\ta[cnt1++]=_dis(st[i-1],st[i-2]);\n\t\ta[cnt1++]=_dis(st[i],st[i-1]);\n\t\ta[cnt1++]=_dis(st[i],st[i-2]);\n\t}\n}\n\nvoid build2(int n)\n{\n\tfor(int i=3;i<=n;i++)\n\t{\n\t\tb[cnt2++]=_dis(st[i-1],st[i-2]);\n\t\tb[cnt2++]=_dis(st[i],st[i-1]);\n\t\tb[cnt2++]=_dis(st[i],st[i-2]);\n\t}\n}\n\nint pi[N];\n\nbool comp(db a[],db b[])\n{\n\tfor(int i=0;i<cnt1;i++) a[i+cnt1]=a[i];\n\tfor(int i=1;i<cnt2;i++)\n\t{\n\t\tint j=pi[i-1];\n\t\twhile(j>0&&b[i]!=b[j]) j=pi[j-1];\n\t\tif(b[i]==b[j]) j++;\n\t\tpi[i]=j; \n\t}\n\tint j=0;\n\tfor(int i=0;i<cnt1*2;i++)\n\t{\n\t\twhile(j>0&&a[i]!=b[j]) j=pi[j-1];\n\t\tif(a[i]==b[j]) j++;\n\t\tif(j==cnt2) return true;\n\t}\n\treturn false;\n}\n\nint n,m;\ndb ans1,ans2;\n\nsigned main(){\n    n=read();m=read();\n    //first\n    for(int i=1;i<=n;i++) p[i].x=read(),p[i].y=read();\n\tAndrew(n);\n\tif(top==4) ans1=_dis(st[1],st[2]);\n\tbuild1(top);\n\t//second\n\tfor(int i=1;i<=m;i++) p[i].x=read(),p[i].y=read();\n\tAndrew(m);\n\tif(top==4) ans2=_dis(st[1],st[2]);\n\tint tot2=top;\n\tbuild2(top);\n\tif(cnt1!=cnt2){\n\t\tprintf(\"NO\\n\");\n\t\treturn 0;\n\t}\n\tif(ans1!=0||ans2!=0) \n\t{\n\t\t//cout<<ans1<<\" \"<<ans2<<endl;\n\t\tif(ans1==ans2) printf(\"YES\\n\");\n\t\telse printf(\"NO\\n\");\n\t\treturn 0;\n\t}\n\tif(comp(a,b)) printf(\"YES\\n\");\n\telse printf(\"NO\\n\");\n\treturn 0;\n}\n/*\n8 9\n4965 24651225\n0 0\n0 36000000\n5004 25040016\n4354 30107169\n1309 30107169\n2301 30107169\n5487 30107169\n30107169 513\n30107169 2849\n30107169 998\n25040016 996\n30107169 2249\n30107169 1567\n36000000 6000\n0 6000\n24651225 1035\n*/\n/*\nYES\n*/\n```",
        "postTime": 1657172145,
        "uid": 557385,
        "name": "cjlak1o1",
        "ccfLevel": 0,
        "title": "CF1017E The Supersonic Rocket \u9898\u89e3"
    },
    {
        "content": "\u4e2d\u89c4\u4e2d\u77e9\u7684\u505a\u6cd5\uff0c\u9898\u76ee\u8981\u6c42\u7684\u662f\u7ed9\u51fa\u4e24\u4e2a\u70b9\u96c6\uff0c\u6c42\u51fa\u5b83\u4eec\u7684\u51f8\u5305\u5e76\u5224\u65ad\u662f\u5426\u65cb\u8f6c\u540c\u6784\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n(0, 0) (1, 0) (0, 1)\n\n(1, 0) (1, 1) (0, 1)\n\n\u8fd9\u5c31\u662f\u4e00\u7ec4\u65cb\u8f6c\u540c\u6784\n\n\u5e76\u6ca1\u6709\u53c2\u52a0\u6bd4\u8d5b\uff0c\u4f46\u662fhyc\u5728\u7fa4\u91cc\u63d0\u4e86\u8fd9\u9053\u9898\uff0c\u8ba9\u6211\u4eec\u601d\u8003\n\n\u6c42\u89e3\u51f8\u5305\u76f4\u63a5\u4f7f\u7528\u57fa\u4e8e\u6c34\u5e73\u5e8f\u7684Andrew\u7b97\u6cd5\uff0c\u5177\u4f53\u505a\u6cd5\u8bf7\u53c2\u8003[\u51f8\u5305\u6a21\u677f](https://www.luogu.org/problemnew/show/P2742)\n\n\u6211\u4e00\u770b\uff0c\u65cb\u8f6c\u540c\u6784\uff1f\u5982\u679c\u80fd\u627e\u5230\u5bf9\u5e94\u70b9\uff0c\u62c6\u5f00\u6210\u4e00\u6761\u94fe\u591a\u597d\u5224\u554a\n\n\u5f53\u7136\uff0c\u6211\u5e76\u4e0d\u77e5\u9053\u600e\u4e48\u627e\u5bf9\u5e94\u70b9\uff0c\u5982\u679c\u6709\u5de8\u4f6c\u4f1a\u8bf7\u544a\u8bc9\u6211\n\n\u7136\u540e\u6211\u5c31\u4ece\u8fd9\u4e2a\u601d\u8def\u60f3\u5230\u4e86\u67d0\u4e2a\u5f88\u50cf\u7684\u4e1c\u897f\n\n\u6700\u5c0f\u5faa\u73af\u540c\u6784\uff01\u6216\u8005\u8bf4\u6700\u5c0f\u8868\u793a\u6cd5\n\n\u4f46\u662f\u548c\u8fd9\u9898\u8fd8\u662f\u6ca1\u4ec0\u4e48\u5173\u7cfb\uff0c\u4e0d\u8fc7\u7531\u8fd9\u4e2a\u70b9\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\u5f88\u591a\u4e1c\u897f\uff1a\u65cb\u8f6c\u540c\u6784\u8f6c\u5faa\u73af\u540c\u6784\n\n\u5b57\u7b26\u4e32\u7684\u5faa\u73af\u540c\u6784\u672c\u8eab\u5c31\u662f\u5c06\u5b57\u7b26\u4e32\u9996\u4f4d\u76f8\u63a5\u6210\u73af\uff0c\u4ece\u4e0d\u540c\u7684\u5730\u65b9\u65ad\u5f00\u5c31\u662f\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u6b64\u5f97\u5230\u7684\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u5faa\u73af\u540c\u6784\u7684\n\n\u90a3\u4e48\u600e\u6837\u5c06\u8fd9\u4e2a\u4e1c\u897f\u7528\u5728\u51f8\u5305\u4e0a\uff0c\u6216\u8005\u591a\u8fb9\u5f62\u4e0a\u5462\uff1f\n\n\u6211\u4eec\u8981\u4fdd\u8bc1\u51f8\u5305\u7684\u4fe1\u606f\u4e0d\u53d8\u4e14\u53ef\u4ee5\u8bc6\u522b\uff0c\u5e76\u4e14\u548c\u5b57\u7b26\u4e32\u5177\u6709\u67d0\u4e9b\u5171\u6027\u4ee5\u4fbf\u4e8e\u4ee5\u540e\u7684\u64cd\u4f5c\n\n\u51f8\u5305\u7684\u4fe1\u606f\u96c6\u4e2d\u5728\u70b9\u4e0a\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5b83\u540c\u65f6\u5c5e\u4e8e\u4e24\u6761\u8fb9\u548c\u4e00\u4e2a\u89d2\n\n\u6240\u4ee5\u5c06\u51f8\u5305\u62c6\u5206\u6210\u8fb9-\u89d2-\u8fb9-\u89d2-\u8fb9\u2026\u2026\u7684\u5f62\u5f0f\uff0c\u8fb9\u7528\u957f\u5ea6\u8868\u793a\uff0c\u89d2\u7528\u5f27\u5ea6\u8868\u793a\uff0c\u5c31\u662f\u4e00\u4e2a\u6570\u5217\u4e86\uff0c\u6bd4\u5982:(1, 0) (0, 1) (0, 0)\n\n\u6570\u5217\u5f62\u5f0f: 1.41421--Pi/4--1--Pi/2--1--Pi/4\n\n\u7136\u540e\u6211\u4eec\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5224\u65ad\u4e24\u4e2a\u6570\u5217\u5faa\u73af\u540c\u6784\n\n\u5c06\u5176\u4e2d\u4e00\u4e2a\u590d\u5236\u4e00\u500d\u63a5\u5728\u5c3e\u90e8\uff0c\u7528\u53e6\u4e00\u4e2a\u6570\u5217\u53bb\u5339\u914d\uff0c\u91c7\u7528KMP\u7b97\u6cd5\u5373\u53ef\u89e3\u51b3\n\n```cpp\n#include <bits/stdc++.h>\n#define eps 1e-8\n#define delta 0.98\n#define Get(a, b) atan2(a, b)\nusing namespace std;\n\nconst int MAXN = 100100;\n\nstruct Point {\n    double x, y;\n    Point () {}\n    Point (double _x, double _y) : x(_x), y(_y) {}\n};\n\ntypedef Point Vector;\ntypedef Point Polygon[MAXN];\n\ntemplate <typename T> inline void read(T &x) {\n    int c = getchar();\n    bool f = false;\n    for (x = 0; !isdigit(c); c = getchar()) {\n        if (c == '-') {\n            f = true;\n        }\n    }\n    for (; isdigit(c); c = getchar()) {\n        x = x * 10 + c - '0';\n    }\n    if (f) {\n        x = -x;\n    }\n}\n\nVector read_Vector() {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n    return Vector(x, y);\n} \n\nint dcmp(double x) {if(fabs(x) < eps) return 0; else return x < 0 ? -1 : 1;}\n\nVector operator + (Vector A, Vector B) {return Vector(A.x + B.x, A.y + B.y);}\n\nVector operator - (Vector A, Vector B) {return Vector(A.x - B.x, A.y - B.y);}\n\nVector operator * (Vector A, double B) {return Vector(A.x * B, A.y * B);}\n\nVector operator / (Vector A, double B) {return Vector(A.x / B, A.y / B);}\n\nbool operator == (const Vector&a, const Vector&b) {return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0;}\n\ndouble Dot(Vector A, Vector B) {return A.x * B.x + A.y * B.y;}\n\ndouble Length(Vector A) {return sqrt(A.x * A. x + A. y * A.y);}\n\ndouble Angle(Vector A, Vector B) {return acos(Dot(A, B) / Length(A) / Length(B));}\n\ndouble Cross(Vector A, Vector B) {return A.x * B.y - A.y * B.x;}\n\ndouble GetS(Vector A, Vector B, Vector C) {return Cross(B - A, C - A);}\n\nbool operator < (Point a, Point b) {\n    return a.x < b.x || (a.x == b.x && a.y < b.y);\n}\n\nint ConvexHull(Point * p, int N, Point * ch) {\n    sort(p, p + N);\n    int sum = 0;\n    for(int i = 0; i < N; i++) {\n        while(sum > 1 && dcmp(Cross(ch[sum - 1] - ch[sum - 2], p[i] - ch[sum - 2])) >= 0) sum--;\n        ch[sum++] = p[i];\n    }\n    int k = sum;\n    for(int i = N - 2; i >= 0; i--) {\n        while(sum > k && dcmp(Cross(ch[sum - 1] - ch[sum - 2], p[i] - ch[sum - 2])) >= 0) sum--;\n        ch[sum++] = p[i];\n    }\n    if(N > 1) sum--;\n    return sum;\n}\n\nbool chdb (double a, double b) {\n    return fabs(a - b) <= eps;\n}\n\nint nxt[MAXN << 1];\n\nbool KmpSearch(double * s, double * p, int sLen, int pLen) {  \n    int i = 0;  \n    int j = 0;    \n    while(i < sLen && j < pLen) {  \n        if(!chdb(s[i], p[j])) {\n            if(j == 0) i++;\t\t\t\n            j = nxt[j];\n        }\t\t  \n        while(j < pLen && chdb(s[i], p[j])) i++, j++;\n        if (j == pLen) return 1;\n    }  \n    return 0;      \n}  \n\nvoid GetNext(double * p, int Nxt[], int pLen) {  \n    Nxt[0] = -1;\n    Nxt[1] = 0;  \n    int j = 0, i = 1;\n    for(i = 1; i < pLen; i++) {  \n        while(j > 0 && !chdb(p[i], p[j])) j = Nxt[j];  \n        if(chdb(p[i], p[j])) j++;  \n        Nxt[i + 1] = j;\n    }\n}  \n\nint n, m;\nPolygon p1, p2, c1, c2;\nint sum1, sum2, cnts, cntt;\ndouble S[MAXN << 2], T[MAXN << 1];\n\nvoid print(double * s, int len) {\n    for(int i = 0; i < len; i++) {\n        printf(\"%.2lf%c\", s[i], i == len - 1 ? '\\n' : ' ');\n    }\n}\n\nsigned main() {\n    read(n), read(m);\n    for(int i = 0; i < n; i++) p1[i] = read_Vector();\n    for(int i = 0; i < m; i++) p2[i] = read_Vector();\n    sum1 = ConvexHull(p1, n, c1);\n    sum2 = ConvexHull(p2, m, c2);\n    if(sum1 != sum2) {\n        puts(\"NO\");\n        return 0;\n    }\n    c1[sum1] = c1[0]; c1[sum1 + 1] = c1[1];\n    c2[sum2] = c2[0]; c2[sum2 + 1] = c2[1];\n    for(int i = 0; i < sum1; i++) {\n        S[cnts++] = Length(c1[i + 1] - c1[i]);\n        S[cnts++] = Angle(c1[i + 2] - c1[i + 1], \n                    c1[i + 1] - c1[i]);\n    }\n    for(int i = 0; i < sum2; i++) {\n        T[cntt++] = Length(c2[i + 1] - c2[i]);\n        T[cntt++] = Angle(c2[i + 2] - c2[i + 1], \n                    c2[i + 1] - c2[i]);\n    }\n    for(int i = cnts; i < cnts * 2 - 1; i++) S[i] = S[i - cnts];\n    GetNext(T, nxt, cntt);\n    if(KmpSearch(S, T, cnts * 2 - 2, cntt - 1)) puts(\"YES\");\n    else puts(\"NO\");\n    return 0;\n} \n```",
        "postTime": 1533896918,
        "uid": 34332,
        "name": "KKarshilov",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1017E \u3010The Supersonic Rocket\u3011"
    }
]