[
    {
        "content": "## \u9898\u610f\n\u89c1[\u9898\u5e72](https://www.luogu.com.cn/problem/CF1184E1)\uff0ceasy version \u4e2d\u8981\u6c42\u7684\u662f\u5c06\u7b2c\u4e00\u6761\u8fb9\u6700\u5927\u4fee\u6539\u4e3a\u591a\u5c11\u80fd\u591f\u4f7f\u5176\u5b58\u5728\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\n## \u89e3\u6790\n\u9898\u76ee\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u76f8\u5173\uff0c\u53c8\u8981\u503c\u5c3d\u53ef\u80fd\u5927\uff0c\u5f88\u5bb9\u6613\u60f3\u5230 kruskal \u7b97\u6cd5\uff0c\u56e0\u4e3a\u8be5\u7b97\u6cd5\u662f\u5148\u5c06\u6743\u503c\u5c0f\u7684\u8fb9\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5e0c\u671b\u7b2c\u4e00\u6761\u8fb9\u80fd\u591f**\u5c3d\u53ef\u80fd\u665a**\u7684\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u8fd9\u6837\u624d\u80fd\u4f7f\u5176\u6743\u503c\u6700\u5927\u3002\n\n\u8003\u8651\u5230\u8981\u4f7f\u5176\u5c3d\u53ef\u80fd\u665a\u52a0\u5165\u800c\u4e14\u4e0d\u80fd\u4e0d\u52a0\u5165\uff0c\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u5728\u7b2c\u4e00\u6761\u8fb9\u7684\u4e24\u70b9\u8054\u901a\u4e4b\u524d\u8fde\u63a5\u5c3d\u53ef\u80fd\u591a\u7684\u8fb9\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u8fde\u63a5\u540e\uff0c\u7b2c\u4e00\u6761\u8fb9\u7684\u4e24\u70b9\u88ab\u8054\u901a\u4e86\uff0c\u663e\u7136\u7b2c\u4e00\u6761\u8fb9\u5c31\u65e0\u6cd5\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728\u8fd9\u4e2a**\u521a\u597d\u88ab\u8054\u901a**\u7684\u4e34\u754c\u70b9\u52a0\u5165\u7b2c\u4e00\u6761\u8fb9\uff0c\u5373\u5c06\u7b2c\u4e00\u6761\u8fb9\u7684\u6743\u503c\u4fee\u6539\u4e3a\u4e34\u754c\u8fb9\u7684\u6743\u503c\uff08\u9898\u76ee\u8981\u6c42**\u53ef\u80fd**\u51fa\u73b0\uff0c\u56e0\u6b64\u53ef\u4ee5\u7b49\u4e8e\u4e34\u754c\u8fb9\u7684\u6743\u503c\uff0c\u5373\u76f4\u63a5\u8d4b\u503c\uff09\u3002\n\n\u6211\u4eec\u53c8\u8003\u8651\u5230\uff0c\u53ef\u80fd\u5b58\u5728\u7b2c\u4e00\u6761\u8fb9\u4e3a**\u5272\u8fb9**\uff0c\u5373\u7b2c\u4e00\u6761\u8fb9\u5982\u679c\u4e0d\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u5176\u4ed6\u8fb9\u5c31\u65e0\u6cd5\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u5728\u7b2c\u4e00\u6761\u8fb9\u4e0d\u904d\u5386\u7684\u60c5\u51b5\u4e0b\uff0c $cnt$ \u65e0\u6cd5\u7b49\u4e8e $n-1$ \uff0c\u6b64\u65f6\u5c06\u7b2c\u4e00\u6761\u8fb9\u7684\u503c\u8d4b\u4e3a\u6700\u5927,\u5373\u9898\u9762\u6240\u8ff0\u7684 $10^9$ \u5373\u53ef\u3002\n\n\u800c\u6211\u4eec\u5c06\u8be5\u601d\u60f3\u8fdb\u884c\u4ee3\u7801\u5b9e\u73b0\u65f6\uff0c\u53ea\u9700\u8981\u5ffd\u7565\u7b2c\u4e00\u6761\u8fb9\uff0c\u8ba9\u5176\u4ed6\u8fb9\u6b63\u5e38\u8dd1 kruskal \u5373\u53ef\u3002\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define N 1000005\nusing namespace std;\nint n,m,fa[N],cnt;\nstruct edge{\n\tint u,v,val;\n}e[N];\ninline int find(int x){\n\tif(fa[x]==x) return x;\n\treturn fa[x]=find(fa[x]);\n}\ninline bool cmp(edge i,edge j){\n\treturn i.val<j.val;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].val);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfa[i]=i;\n\tsort(e+2,e+1+m,cmp);//\u5ffd\u7565\u7b2c\u4e00\u6761\u8fb9\u8dd1 kruskal \n\tfor(int i=2;i<=m&&cnt<n-1;i++){\n\t\tint u=e[i].u,v=e[i].v;\n\t\tif(find(u)==find(v)) continue;\n\t\tfa[find(u)]=find(v);\n\t\tcnt++;\n\t\tif(find(e[1].u)==find(e[1].v)){\n\t\t\tprintf(\"%d\\n\",e[i].val);\n\t\t\treturn 0;\n\t\t}\t\n\t}\n\tif(cnt<n-1){//\u5982\u679c\u662f\u5272\u8fb9 \n\t\tcout<<(int)1e9;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1596787302,
        "uid": 195229,
        "name": "water_tomato",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1184E1 \u3010Daleks' Invasion (easy)\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1184E1)\n\n\u6bd4\u8f83\u6709\u8da3\u7684\u601d\u7ef4\u9898\u3002\n\n\u9898\u76ee\u8981\u6c42\u6700\u5c0f\u751f\u6210\u6811**\u53ef\u80fd**\u5305\u542b\u7b2c\u4e00\u6761\u8fb9 $(u,v)$ \u65f6\uff0c\u7b2c\u4e00\u6761\u8fb9\u7684\u6700\u5927\u957f\u5ea6\u3002\n\n\u8003\u8651 Kruskal \u7b97\u6cd5\u7684\u5b9e\u73b0\u6d41\u7a0b\u662f\u4e0d\u65ad\u6dfb\u52a0\u6700\u5c0f\u7684\u8fb9\uff0c\u90a3\u4e48\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u5305\u542b\u7b2c\u4e00\u6761\u8fb9\u7684\u5145\u8981\u6761\u4ef6\u5c31\u662f\u7b2c\u4e00\u6761\u8fb9\u7684\u957f\u5ea6 $\\le$ \u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6700\u957f\u8fb9\u7684\u957f\u5ea6\u3002\n\n\u4f46\u662f\u8003\u8651\u5982\u679c\u8fde\u8fb9\u7684\u65f6\u5019\u628a $(u,v)$ \u8fde\u901a\u4e86\uff0c\u90a3\u7b2c\u4e00\u6761\u8fb9\u5c31\u6ca1\u6709\u610f\u4e49\u4e86\u3002\u6240\u4ee5\u5f53 $(u,v)$ \u8054\u901a\u65f6\uff0c\u7b2c\u4e00\u6761\u8fb9\u5e94\u8be5\u66f4\u65b0\u6210\u5f53\u524d\u751f\u6210\u6811\u4e2d\u7684\u6700\u957f\u8fb9\u3002\n\n\u6240\u4ee5\u5b9e\u73b0\u5c31\u662f\u629b\u5f00\u7b2c\u4e00\u6761\u8fb9\uff0c\u5bf9\u5269\u4e0b\u7684\u8fb9\u8dd1 Kruskal\uff0c\u5f53 $(u,v)$ \u8054\u901a\u65f6\u8f93\u51fa\u6b64\u65f6\u751f\u6210\u6811\u4e2d\u6700\u957f\u8fb9\u7684\u957f\u5ea6\u3002\n\n\u989d\u5916\u5730\uff0c\u5982\u679c\u629b\u5f00\u7b2c\u4e00\u6761\u8fb9\u540e\u65e0\u6cd5\u6784\u6210\u751f\u6210\u6811\uff0c\u90a3\u4e48\u7b2c\u4e00\u6761\u8fb9\u957f\u5ea6\u4e3a\u6700\u5927\u503c $10^9$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m log m)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define back return\n#define ri register int\nusing namespace std;\nll read()\n{\n\tll x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-')\n\t\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\tback x*f;\n}\nll n,m,cnt,maxx=-1,fa[100005];\nstruct node\n{\n\tll x,y,w;\n}a[1000005];\nll find(ll x)\n{\n\tif(fa[x]==x)\n\t\tback x;\n\tback fa[x]=find(fa[x]);\n}\nbool cmp(node a,node b)\n{\n\tback a.w<b.w;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(ri i=1;i<=n;i++)\n\t\tfa[i]=i;\n\tfor(ri i=1;i<=m;i++)\n\t\ta[i].x=read(),a[i].y=read(),a[i].w=read();\n\tsort(a+2,a+m+1,cmp);\n\tfor(ri i=2;i<=m;i++)\n\t{\n\t\tif(find(a[i].x)==find(a[i].y))\n\t\t\tcontinue;\n\t\telse\n\t\t{\n\t\t\tfa[find(a[i].x)]=find(a[i].y);\n\t\t\tcnt++;\n\t\t\tmaxx=max(maxx,a[i].w);\n\t\t\tif(find(a[1].x)==find(a[1].y))\n\t\t\t{\n\t\t\t\tcout<<maxx<<\"\\n\";\n\t\t\t\tback 0;\n\t\t\t}\n\n\t\t}\n\t}\n\tif(cnt<n-1)\n\t\tcout<<1000000000<<\"\\n\";\n\tback 0;\n}\n```\n",
        "postTime": 1632369321,
        "uid": 93266,
        "name": "\u65ad\u6e05\u79cb",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF1184E1 Daleks' Invasion (easy)"
    },
    {
        "content": "\u4e8c\u5206\u6781\u9650\u5361\u8fc7\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u7b2c\u4e00\u6761\u8fb9\u7684\u503c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(mlogmlogn)$ \uff0c\u6b64\u9898\u65f6\u96506s\uff0c\u521a\u597d\u5361\u8fc7\u3002\n\n\u7136\u540e\u6b64\u9898\u601d\u7ef4\u96be\u5ea6\u5c31\u4e3a0\u4e86\uff0c\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u7531\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u6761\u548c\u7b2c\u4e00\u6761\u8fb9\u76f8\u7b49\u7684\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728\u6392\u5e8f\u7684\u65f6\u5019\u8ba9\u7b2c\u4e00\u6761\u8fb9\u4f18\u5148\u51fa\u73b0\u4e8e\u5176\u4ed6\u548c\u4ed6\u76f8\u7b49\u7684\u503c\u7684\u8fb9\u3002\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6700\u4f18\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,l,r,mid,ans,idx;\nint fa[1000010],vis[1000010],temp[1000010];\nstruct node{\n\tint u,v,w,id;\n}edge[1000010],edge2[1000010];\nbool cmp(node a,node b)\n{\n\tif(a.w!=b.w) return a.w<b.w;\n\treturn a.id<b.id;//\u8ba91\u5148\u51fa\u73b0 \n}\nint find(int x)\n{\n\tif(x==fa[x]) return x;\n\treturn fa[x]=find(fa[x]); \n}\nbool check(int x)//nlogn\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfa[i]=i;\n\t}\n\tfor(int i=1;i<=idx;i++)\n\t{\n\t\tedge2[i].id=edge[i].id;\n\t\tedge2[i].u=edge[i].u;\n\t\tedge2[i].v=edge[i].v;\n\t\tedge2[i].w=edge[i].w;\n\t}\n\tedge2[1].w=x;\n\tsort(edge2+1,edge2+1+idx,cmp);\n\tfor(int i=1;i<=idx;i++)\n\t{\n\t\tint f1=find(edge2[i].u);\n\t\tint f2=find(edge2[i].v);\n\t\tif(f1==f2)\n\t\tcontinue;\n\t\tfa[f2]=f1;\n\t\tvis[edge2[i].id]=1;\n\t}\n\tif(vis[1]==1) return 1;\n\telse return 0;\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tedge[++idx].u=u;\n\t\tedge[idx].v=v;\n\t\tedge[idx].w=w;\n\t\tedge[idx].id=i;//\u7b2c\u51e0\u6761\u8fb9 \n\t}\n\tl=0,r=1e9;\n\twhile(l<=r)\n\t{\n\t\tvis[1]=0;\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid))\n\t\t{\n\t\t\tans=mid;\n\t\t\tl=mid+1;\n\t\t}\n\t\telse r=mid-1;\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}",
        "postTime": 1610332953,
        "uid": 250699,
        "name": "Herkaii",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF1184E1 \u3010Daleks' Invasion (easy)\u3011"
    },
    {
        "content": "kruskal \u597d\u9898\n## \u9898\u610f\n\u7ed9\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5e0c\u671b\u4fee\u6539\u7b2c\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u4f7f\u5f97\u7b2c\u4e00\u6761\u8fb9\u53ef\u4ee5\u5305\u542b\u5728\u8be5\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u6700\u5927\u5316\u8be5\u8fb9\u6743\u3002\n## $\\operatorname{Sol}$\n\u6211\u4eec\u8003\u8651 kruskal \u7684\u5b9e\u73b0\u8fc7\u7a0b\uff0c\u82e5\u4ec0\u4e48\u65f6\u5019\u4e0d\u9700\u8981\u5c06\u7b2c\u4e00\u6761\u8fb9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u4e86\uff0c\u5219\u7b2c\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u70b9\u5fc5\u5b9a\u5df2\u7ecf\u8054\u901a\u3002\u6362\u8a00\u4e4b\uff0c\u5047\u8bbe\u7b2c\u4e00\u6761\u8fb9\u4e3a $(u_1,v_1,w_1)$\uff0c\u5728\u52a0\u5165\u8fb9 $(u_i,v_i,w_i)$ \u540e $u_1$ \u548c $v_1$ \u5df2\u7ecf\u8054\u901a\uff0c\u5219\u8fde\u63a5\u8fb9 $(u_1,v_1,w_1)$ **\u5fc5\u987b\u62a2\u5728\u8fde\u63a5\u8fb9 $(u_i,v_i,w_i)$ \u524d\u8fdb\u884c\u3002** \n\n\u90a3\u4e48\u6211\u4eec\u4fbf\u6709\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u505a\u6cd5\uff1a\u5148\u5ffd\u7565\u7b2c\u4e00\u6761\u8fb9\u8dd1 kruskal\uff0c\u5728\u8dd1\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u8fde\u63a5\u4e00\u6761\u8fb9\uff0c\u4fbf\u5224\u65ad\u7b2c\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u662f\u5426\u8054\u901a\uff0c\u82e5\u8054\u901a\uff0c\u5219\u7b54\u6848\u5373\u4e3a\u6700\u540e\u8fde\u63a5\u7684\u8fb9\u7684\u8fb9\u6743\u3002\u7279\u522b\u5730\uff0c\u82e5\u7b97\u6cd5\u7ed3\u675f\u540e\u8fd8\u672a\u8054\u901a\uff08\u5373\u7b2c\u4e00\u6761\u8fb9\u4e3a\u5272\u8fb9\uff09\uff0c\u5c06\u5176\u8d4b\u4e3a\u65e0\u7a77\u5927\u5373\u53ef\uff08\u672c\u9898\u4e2d\u4e3a $10^9$\uff09\u3002\n\n## $\\operatorname{Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 5, M = 1e6 + 5;\nstruct edge{int u, v, w;}e[M];\nbool cmp(edge x, edge y){return x.w < y.w;}\nint fa[N];\nint find(int k){return k == fa[k] ? k : fa[k] = find(fa[k]);}\nint main (){\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    int a, b, c;\n    scanf(\"%d%d%d\", &a, &b, &c);//\u4e8b\u5148\u628a\u7b2c\u4e00\u6761\u8fb9\u62ce\u51fa\u6765\n    for (int i = 1; i < m; i++)scanf(\"%d%d%d\", &e[i].u, &e[i].v, &e[i].w);\n    sort(e + 1, e + m, cmp);\n    for (int i = 1; i <= n; i++)fa[i] = i;\n    int sum = 0, ans = 1e9;\n    for (int i = 1; i < m; i++){\n        int uf = find(e[i].u), vf = find(e[i].v);\n        if (uf != vf){\n            fa[uf] = vf;\n            sum++;\n            if (find(a) == find(b)){//\u82e5\u8fde\u63a5\u4e86\u4e00\u6761\u8fb9\u540e\u53d1\u73b0\n                ans = e[i].w;//       \u7b2c\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u5df2\u8054\u901a\n                break;\n            }\n            if (sum == n - 1)break;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```",
        "postTime": 1596712961,
        "uid": 180959,
        "name": "rouxQ",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1184E1 \u3010Daleks' Invasion (easy)\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u51fa$n$\u4e2a\u70b9$m$\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u7b2c\u4e00\u6761\u8fb9\u7684\u6743\u503c\uff0c\u4f7f\u5f97\u4ed6\u53ef\u80fd\u4f1a\u5904\u4e8e\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u95ee\u4f60\u7b2c\u4e00\u6761\u7684\u6743\u503c\u6700\u5927\uff08\u4e0d\u8d85\u8fc71e9)\u53ef\u4ee5\u6539\u4e3a\u591a\u5c11\u3002\n\n\u8fd9\u4e2a\u9898\u6211\u4eec\u4e0d\u53bb\u4f7f\u7528\u7b2c\u4e00\u6761\u8fb9\u53bb\u8dd1\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u5728\u8dd1\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u8054\u901a\u5206\u91cf\u4e0e\u7b2c\u4e00\u6761\u8fde\u63a5\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u8fd9\u6761\u8fb9\u7684\u6743\u503c\n\n\u5982\u679c\u6700\u540e\u6ca1\u529e\u6cd5\u8054\u901a\uff0c\u8bf4\u660e\u7b2c\u4e00\u6761\u8fb9\u662f\u5272\u8fb9\uff0c\u7b54\u6848\u662f1e9\u3002\n\n```cpp\n#define B cout << \"BreakPoint\" << endl;\n#define O(x) cout << #x << \" \" << x << endl;\n#define O_(x) cout << #x << \" \" << x << \" \";\n#define Msz(x) cout << \"Sizeof \" << #x << \" \" << sizeof(x)/1024/1024 << \" MB\" << endl;\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<set>\n#define fi first\n#define se second\n#define LL long long\nconst int inf = 1e9 + 9;\nconst int N = 2e6 + 5;\nusing namespace std;\ninline int read() {\n\tint s = 0,w = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9') {\n\t\tif(ch == '-')\n\t\t\tw = -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9') {\n\t\ts = s * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn s * w;\n}\nint fa[N];\nint find(int x){\n    return x == fa[x] ? x : fa[x] = find(fa[x]);\n}\nvector<pair<int,pair<int,int> > > e(N);\nint main(){\n    int n = read(),m = read();\n    for(int i = 0;i < m;i++){\n        e[i].se.fi = read();\n\t\te[i].se.se = read();\n\t\te[i].fi = read();\n    }  \n    sort(e.begin() + 1,e.end());\n    for(int i = 1;i <= n + 5;i++) fa[i] = i;\n    for(int i = 1;i < e.size();i++){\n        int u = find(e[i].se.fi),v = find(e[i].se.se);\n        if(u != v){\n            int x = find(e[0].se.fi),y = find(e[0].se.se);\n            if(x == u && y == v) printf(\"%d\\n\",e[i].fi),exit(0);\n            if(x == v && y == u) printf(\"%d\\n\",e[i].fi),exit(0);\n            fa[u] = v;\n        }\n    }\n    printf(\"%d\\n\",(int)1e9);\n}\n```",
        "postTime": 1584882852,
        "uid": 160811,
        "name": "\u4f18\u79c0\u7684\u6e23\u6e23\u79b9",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1184E1 \u3010Daleks' Invasion (easy)\u3011"
    }
]