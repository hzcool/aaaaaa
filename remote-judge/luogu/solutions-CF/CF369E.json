[
    {
        "content": "\n\u8fd9\u9898\u521a\u5f00\u59cb\u4ee5\u4e3a\u662f\u4e00\u4e2a\u7b80\u5355\u9898\uff0c\u540e\u6765\u8d8a\u60f3\u8d8a\u4e0d\u5bf9\u52b2\uff0c\u7136\u540e\u5c31\u5361\u4f4f\u4e86\u3002\n\n\u7785\u4e86\u4e00\u773c\u7f51\u4e0a\u7684\u9898\u89e3\uff08\u771f\u7684\u53ea\u7785\u4e86\u4e00\u773c\uff09\uff0c\u51e0\u4e2a\u5927\u5b57\u4ee4\u4eba\u4e3a\u4e4b\u4e00\u632f\uff1a\u6b63\u96be\u5219\u53cd\uff01\n\n\u6ca1\u9519\uff0c\u628a\u70b9\u770b\u6210\u533a\u95f4\uff0c\u6bd4\u59822, 5, 6, 9\u5c31\u662f[1, 1], [3, 4], [7, 8], [10, INF]\u3002\u7136\u540e\u53ea\u8981\u770b\u7ed9\u5b9a\u7684\u54ea\u4e9b\u7ebf\u6bb5\u5b8c\u5168\u5305\u542b\u5728\u8fd9\u4e9b\u533a\u95f4\u91cc\u4e86\u3002\n\n\u9884\u5904\u7406\u51fa\u8fd9\u4e9b\u533a\u95f4\u540e\uff0c\u79bb\u7ebf\u4e0b\u6765\uff0c\u6309\u5de6\u7aef\u70b9\u4ece\u5927\u5230\u5c0f\uff0c\u53f3\u7aef\u70b9\u4ece\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u9047\u5230\u4e00\u4e2a\u7ebf\u6bb5\u5c31\u52a0\u8fdb\u6811\u72b6\u6570\u7ec4\u91cc\uff0c\u9047\u5230\u4e00\u4e2a\u533a\u95f4\u5c31\u67e5\u4e00\u4e0bR\u7684\u524d\u7f00\u548c\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u5de6\u7aef\u70b9\u4ece\u5927\u5230\u5c0f\u626b\u7684\uff0c\u6240\u4ee5\u4e00\u5b9a\u4fdd\u8bc1\u52a0\u8fdb\u6811\u72b6\u6570\u7ec4\u7684\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u67e5\u8be2\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u3002\u6240\u4ee5\u53ea\u7528\u8003\u8651\u53f3\u7aef\u70b9\u5373\u53ef\u3002\n```c++\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cctype>\n#include<vector>\n#include<stack>\n#include<queue>\nusing namespace std;\n#define enter puts(\"\") \n#define space putchar(' ')\n#define Mem(a, x) memset(a, x, sizeof(a))\n#define In inline\ntypedef long long ll;\ntypedef double db;\nconst int INF = 0x3f3f3f3f;\nconst db eps = 1e-8;\nconst int maxn = 3e5 + 5;\nconst int maxN = 1e6 + 5;\ninline ll read()\n{\n  ll ans = 0;\n  char ch = getchar(), last = ' ';\n  while(!isdigit(ch)) last = ch, ch = getchar();\n  while(isdigit(ch)) ans = (ans << 1) + (ans << 3) + ch - '0', ch = getchar();\n  if(last == '-') ans = -ans;\n  return ans;\n}\ninline void write(ll x)\n{\n  if(x < 0) x = -x, putchar('-');\n  if(x >= 10) write(x / 10);\n  putchar(x % 10 + '0');\n}\n\nint n, m, Max = 0;\nstruct Seg\n{\n  int L, R, id;\n  In bool operator < (const Seg& oth)const\n  {\n    if(L ^ oth.L) return L > oth.L;\n    if(R ^ oth.R) return R < oth.R;\n    return id < oth.id;\n  }\n}t[maxn << 2];\n\nint cnt = 0, tp[maxn], ans[maxn];\n\nint c[maxN];\nIn int lowbit(int x) {return x & -x;}\nIn void add(int pos)\n{\n  for(; pos < maxN; pos += lowbit(pos)) ++c[pos];\n}\nIn int query(int pos)\n{\n  int ret = 0;\n  for(; pos; pos -= lowbit(pos)) ret += c[pos];\n  return ret;\n}\n\nint main()\n{\n  n = read(); m = read(); cnt = n;\n  for(int i = 1; i <= n; ++i) t[i].L = read(), t[i].R = read(), t[i].id = 0;\n  for(int i = 1; i <= m; ++i)\n    {\n      int tot = read();\n      for(int j = 1; j <= tot; ++j) tp[j] = read();\n      for(int j = 1; j <= tot; ++j)\n\tif(tp[j] > 1 && tp[j - 1] < tp[j] - 1) t[++cnt] = (Seg){tp[j - 1] + 1, tp[j] - 1, i};\n      t[++cnt] = (Seg){tp[tot] + 1, maxN - 5, i};\n    }\n  sort(t + 1, t + cnt + 1);\n  for(int i = 1; i <= cnt; ++i)\n    if(t[i].id) ans[t[i].id] += query(t[i].R);\n    else add(t[i].R);\n  for(int i = 1; i <= m; ++i) write(n - ans[i]), enter;\n  return 0;\n}\n```",
        "postTime": 1550301471,
        "uid": 55965,
        "name": "mrclr",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF369E \u3010Valera and Queries\u3011"
    },
    {
        "content": "### $0.$ \u524d\u8a00\n\u6b63\u96be\u5219\u53cd\uff0c\u56de\u53bb\u518d\u60f3\u60f3\u518d\u6765\u770b\u9898\u89e3\u3002\n\n### $1.$ \u9898\u610f\n\u7ed9\u5b9a $n$ \u6761\u7ebf\u6bb5\u4ee5\u53ca $m$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a $cnt$ \u4e2a\u70b9\uff0c\u95ee\u6709\u591a\u5c11\u6761\u7ebf\u6bb5\u81f3\u5c11\u8986\u76d6\u4e00\u4e2a\u70b9\u3002$n,m,\\sum cnt \\le 3 \\times 10^5$\u3002\n\n### $2.$ \u601d\u8def\n\u5f53\u6b63\u7740\u60f3\u600e\u4e48\u90fd\u4e0d\u5bf9\u65f6\uff0c\u8003\u8651\u6b63\u96be\u5219\u53cd\u3002\n\n\u56e0\u4e3a\u81f3\u5c11\u8986\u76d6\u4e00\u4e2a\u4e0d\u786e\u5b9a\u53ef\u80fd\u8986\u76d6\u51e0\u4e2a\uff0c\u8003\u8651\u6c42\u6709\u591a\u5c11\u6761\u7ebf\u6bb5\u5b8c\u5168\u4e0d\u8986\u76d6\u70b9\u3002\n\n\u5c06\u9898\u76ee\u4e2d\u7684\u95ee\u9898\u8f6c\u5316\uff0c\u7528\u7ed9\u5b9a\u8be2\u95ee\u7684\u70b9\u5206\u5272\u6570\u8f74\uff0c\u5047\u8bbe\u7ea2\u8272\u7684\u70b9\u4e3a\u4e00\u6b21\u8be2\u95ee\uff0c\u5982\u56fe\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tkl8t2s0.png)\n\n\u5f53\u4e00\u6761\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u5728\u4e24\u4e2a\u84dd\u8272\u7684\u533a\u95f4\u65f6\uff0c\u8fd9\u6761\u7ebf\u6bb5\u5c31\u81f3\u5c11\u8986\u76d6\u4e00\u4e2a\u70b9\u3002\u6240\u4ee5\u4e0d\u8986\u76d6\u70b9\u7684\u533a\u95f4\u4e00\u5b9a\u5305\u542b\u4e8e\u84dd\u8272\u533a\u95f4\u5185\u3002\uff08\u4e0e\u54c1\u9152\u5927\u4f1a\u67d0\u4e00\u6b65\u76f8\u4f3c\uff09\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u6709\u591a\u5c11\u6761\u7ed9\u5b9a\u7684\u7ebf\u6bb5\u5b8c\u5168\u5305\u542b\u4e0e\u6c42\u51fa\u7684\u533a\u95f4\u4e2d\uff0c\u8fd9\u6837\u7684\u7ebf\u6bb5\u4e00\u5b9a\u4e0d\u5305\u542b\u4efb\u610f\u4e00\u4e2a\u70b9\u3002\n\n\n### $3.$ \u4ee3\u7801\n\n\u4ee3\u7801\u5c31\u4e0d\u653e\u4e86\uff0c\u79bb\u7ebf\u8be2\u95ee\uff0c\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u67e5\u67e5\u5c31\u884c\u4e86\u3002",
        "postTime": 1661213303,
        "uid": 574842,
        "name": "Altwilio",
        "ccfLevel": 0,
        "title": "CF369E Valera and Queries \u9898\u89e3"
    },
    {
        "content": "## \u601d\u8def\n\n\u5bb9\u65a5\u4e00\u4e0b\uff0c\u8003\u8651\u6bcf\u6b21\u67e5\u8be2\u8f6c\u6362\u4e3a\u603b\u6570\u51cf\u53bb\u4e24\u4e24\u70b9\u4e4b\u95f4\u7684\u7ebf\u6bb5\u8986\u76d6\u7684\u7ebf\u6bb5\u7684\u6570\u91cf\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u8ba1\u7b97\u67d0\u6761\u7ebf\u6bb5\u8986\u76d6\u4e86\u591a\u5c11\u6761\u7ebf\u6bb5\u3002\n\n\u5148\u6309 $l$ \u6392\u9012\u51cf\u5e8f\uff0c\u7136\u540e\u6bcf\u6b21\u67e5\u8be2\u5c31\u67e5\u8be2 $l\\sim r$ \u4e4b\u95f4\u7684\u603b\u548c\uff0c\u6dfb\u52a0\u7ebf\u6bb5\u5219\u5728 $r$ \u4f4d\u7f6e\u52a0\u4e00\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u540e\u626b\u5230\u7684\u4e0d\u4f1a\u88ab\u5148\u626b\u5230\u7684\u8986\u76d6\uff0c\u540e\u626b\u5230\u7684\u8986\u76d6\u7684\u6240\u6709\u90fd\u8981\u6c42 $r'<r$\uff0c\u6545\u4e0a\u8ff0\u89e3\u6cd5\u662f\u6b63\u786e\u7684\u3002\n\n\u662f\u79bb\u7ebf\u7684\u3002\n\n\u590d\u6742\u5ea6 $O((n+q)\\log n)$\uff0c\u4f1a\u6709\u70b9\u5e38\u6570\uff0c\u968f\u4fbf\u641e\u4e2a\u5feb\u8bfb\u5c31\u80fd\u8fc7\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#pragma GCC optimize(2)\n#define int long long\n#define double long double\n#define mid ((l+r)>>1)\nusing namespace std;\nstruct node{\n\tint num,l,r,tp;\n}q[1000005];\nint top=0;\nbool cmp(node x,node y){\n\tif(x.l!=y.l) return x.l>y.l;\n\treturn x.r<y.r;\n}\nstruct sgt{\n\tint f[4000005];\n\tvoid change(int i,int l,int r,int pos){\n\t\tif(l==r) return f[i]++,void();\n\t\tif(pos<=mid) change(i*2,l,mid,pos);\n\t\telse change(i*2+1,mid+1,r,pos);\n\t\tf[i]=f[i*2]+f[i*2+1];\n\t}\n\tint qry(int i,int l,int r,int ql,int qr){\n\t\treturn ((ql<=l&&r<=qr)?(f[i]):((ql>r||qr<l)?0:(qry(i*2,l,mid,ql,qr)+qry(i*2+1,mid+1,r,ql,qr))));\n\t}\n}tree;\nint b[1000005],ans[1000005];\nvector<int> vc[300005];\nint read(){\n\tchar c; int ans=0; int z=1;\n\twhile(!isdigit(c=getchar()))z-=2*(c=='-');\n\tdo{ans=(ans*10+c-'0');}while(isdigit(c=getchar()));\n\treturn ans*z;\n}\nvoid print(int x){\n\tif(x<0) putchar('-');\n\tif(llabs(x)>=10) print(llabs(x)/10);\n\tputchar((llabs(x)%10)+'0');\n}\nsigned main(){\n\tint n=read(),m=read();\n\tint x[n+1],y[n+1];\n\tfor(int i=1;i<=n;i++) x[i]=read(),y[i]=read(),q[++top].l=x[i],q[top].r=y[i],q[top].tp=1;\n\tfor(int i=1;i<=m;i++){\n\t\tint cnt=read();\n\t\tint lst=0;\n\t\tfor(int j=1;j<=cnt;j++){\n\t\t\tint tt=read();\n\t\t\tif(tt!=lst+1){\n\t\t\t\tvc[i].push_back(++top);\n\t\t\t\tq[top].tp=2,q[top].num=top,q[top].l=lst+1,q[top].r=tt-1;\n\t\t\t}\n\t\t\tlst=tt;\n\t\t} \n\t\tif(1000001!=lst+1){\n\t\t\tvc[i].push_back(++top);\n\t\t\tq[top].tp=2,q[top].num=top,q[top].l=lst+1,q[top].r=1000000;\n\t\t}\n\t}\n\tsort(q+1,q+top+1,cmp);\n\tfor(int i=1;i<=top;i++){\n\t\tint fst=i;\n\t\tif(q[i].tp==1) tree.change(1,1,1000000,q[i].r);\n\t\twhile(q[i].l==q[i+1].l&&q[i].r==q[i+1].r){\n\t\t\ti++;\n\t\t\tif(q[i].tp==1) tree.change(1,1,1000000,q[i].r);\n\t\t}\n\t\tfor(int j=fst;j<=i;j++) if(q[j].tp==2) ans[q[j].num]=tree.qry(1,1,1000000,q[i].l,q[i].r);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint sum=n;\n\t\tfor(auto v:vc[i]){\n\t\t\tsum-=ans[v];\n\t\t}\n\t\tcout<<sum<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1667449838,
        "uid": 116664,
        "name": "Daniel_lele",
        "ccfLevel": 8,
        "title": "CF369E \u9898\u89e3"
    }
]