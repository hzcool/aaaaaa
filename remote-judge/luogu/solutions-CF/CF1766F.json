[
    {
        "content": "\u4e00\u4e2a\u81ea\u7136\u7684\u60f3\u6cd5\u662f\uff0c\u5bf9\u4e8e\u6240\u6709\u5bb9\u91cf\u4e3a\u5947\u6570\u7684\u8fb9\uff0c\u5b83\u7684\u6d41\u91cf\u81f3\u5c11\u4e3a $1$\u3002\u6211\u4eec\u94a6\u5b9a\u5b83\u6d41 $1$ \u5355\u4f4d\u6d41\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06\u539f\u56fe\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf\u53d8\u6210 $\\lfloor \\frac c 2\\rfloor$\uff0c\u8dd1\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\uff0c\u5219\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u4e3a\u5176\u65b0\u56fe\u6d41\u91cf\u7684\u4e24\u500d\uff0c\u52a0\u4e0a\u5b83\u7684\u5947\u5076\u6027\u3002\u95ee\u9898\u5728\u4e8e\u6ca1\u6709\u8003\u8651\u5230\u539f\u6765\u6bcf\u6761\u5947\u8fb9\u7684 $1$ \u6d41\u91cf\u7684\u5f71\u54cd\u3002\n\n\u7b80\u5355\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u4e3a $1$ \u6216 $n$ \u7684\u70b9\uff0c\u8bbe\u5b83\u5728\u4ec5\u8003\u8651\u5947\u8fb9\u7684 $1$ \u5355\u4f4d\u6d41\u91cf\u65f6\uff0c\u6d41\u5165\u6d41\u91cf\u51cf\u53bb\u6d41\u51fa\u6d41\u91cf\u4e3a $in_i$\u3002\u82e5 $in_i$ \u4e3a\u5947\u6570\uff0c\u663e\u7136\u65e0\u89e3\u3002\u5426\u5219\uff0c\u82e5 $in_i > 0$\uff0c\u8bf4\u660e\u6240\u6709\u5947\u8fb9\u5bf9 $i$ \u7684\u5f71\u54cd\u662f\u8ba9\u5b83\u591a\u51fa $in_i$ \u6ef4\u6d41\u91cf\u3002\u56e0\u6b64\uff0c\u5728\u65b0\u56fe\u4e0a\u4ece $s\\to i$ \u8fde\u5bb9\u91cf **\u4e0a\u4e0b\u754c** $\\frac {in_i} 2$ \u7684\u8fb9\u3002\u8d39\u7528\u4efb\u610f\uff0c\u53cd\u6b63\u94a6\u5b9a\u6d41\u6ee1\u4e86\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a **\u6709\u8d1f\u6743\u8fb9\u7684\u4e0a\u4e0b\u754c\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41**\u3002\u5c3d\u7ba1\u539f\u56fe\u4fdd\u8bc1\u65e0\u8d1f\u73af\uff0c\u4f46\u662f\u4e3a\u6c42\u53ef\u884c\u6d41\u800c\u8fde\u51fa\u7684 $t\\to s$ \u53ef\u80fd\u5bfc\u81f4\u65b0\u56fe\u4ea7\u751f\u8d1f\u73af\uff0c\u5982\u6837\u4f8b 1\u3002\u56e0\u6b64\uff0c\u8fd8\u9700\u4f7f\u7528\u8d1f\u73af\u8d39\u7528\u6d41\u7684\u6280\u5de7\uff0c\u94a6\u5b9a\u8d1f\u6743\u8fb9\u6d41\u6ee1\uff0c\u5728\u53cd\u8fb9\u4e0a\u9000\u6d41\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e00\u6b21\u8d39\u7528\u6d41\uff0c\u6ce8\u610f\u6784\u9020\u65b9\u6848\u7684\u7ec6\u8282\u3002[\u4ee3\u7801](https://codeforces.com/contest/1766/submission/185025112)\u3002",
        "postTime": 1670978389,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1766F MCF"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\u89e3\u51b3 $n\\ (n\\leq100)$ \u4e2a\u70b9\uff0c $m\\ (m\\leq200)$ \u6761\u5f27\u7684 **\u6709\u6e90\u6c47\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41** \u95ee\u9898\uff08\u4e0d\u8981\u88ab\u9898\u76ee\u7ffb\u8bd1\u8bef\u5bfc\uff09\uff0c\u8981\u6c42\u5bf9\u4e8e\u6bcf\u6761\u5f27\uff0c\u5bb9\u91cf\u4e0e\u6d41\u91cf\u7684\u5947\u5076\u6027\u76f8\u540c\u3002\n\n## \u9898\u76ee\u5206\u6790\n\u6ce8\u610f\u5230\u6bcf\u6761\u5f27\u7684\u6d41\u91cf $f$ \u53ef\u4ee5\u5206\u4e3a $f/2$ \u548c $f\\bmod2$ \u4e24\u90e8\u5206\uff0c\u5bb9\u91cf\u7684\u5947\u5076\u6027\u5bf9\u4e8e\u524d\u8005\u6ca1\u6709\u5f71\u54cd\uff0c\u800c\u5bf9\u4e8e\u540e\u8005\uff0c\u5bb9\u91cf\u4e3a\u5947\u6570\u4f1a\u5f3a\u5236\u6d41\u91cf\u4e3a $1$, \u5426\u5219\u5f3a\u5236\u4e3a $0$\u3002\n\n\u4e8e\u662f\u6211\u4eec\u4f7f\u7528\u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41\u7684\u65b9\u6cd5\uff0c\u5148\u5f3a\u5236\u8ba9\u5947\u6570\u5f27\u6d41\u8fc7 $0.5$, \u518d\u4ee4\u65b0\u56fe\u7684\u5bb9\u91cf $c'=c/2$\u3002\u4e3a\u4e86\u6784\u9020\u51fa\u53ef\u884c\u6d41\uff0c\u6839\u636e\u6bcf\u4e2a\u70b9\u5f53\u524d\u591a\u6d41\u5165\u6d41\u91cf\u7684\u6b63\u8d1f\uff08\u5982\u679c\u975e\u6574\u6570\u5219\u65e0\u89e3\uff09\uff0c\u8fde $s\\rightarrow i$ \u6216 $i\\rightarrow t$ \u7684\u8d39\u7528\u4e3a $-INF$ \u7684\u5f27\uff08\u8fd9\u91cc\u5e76\u4e0d\u9700\u8981\u5efa\u65b0\u7684\u6e90\u6c47\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u539f\u56fe\u4e0a\u7684 $s,t$ \u8fde\u8fb9\uff0c\u907f\u514d\u4ea7\u751f\u8d1f\u73af\uff09\u3002\n\n\u4e4b\u540e\u76f4\u63a5\u5728\u56fe\u4e0a\u8dd1 $s\\rightarrow t$ \u7684**\u6700\u5c0f\u8d39\u7528\u6d41**\u5373\u53ef\uff08\u6ce8\u610f\u9000\u51fa\u6761\u4ef6\u662f $dis>0$\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u6700\u5927\u6d41\uff09\uff0c\u6839\u636e\u662f\u5426\u6ee1\u6d41\u5224\u65e0\u89e3\u3002\u8bb0\u5f97\u52a0\u4e0a\u5947\u6570\u5f27\u7684\u521d\u59cb\u6d41\u91cf\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <cstdio>\n#include <cctype>\n#include <queue>\n#include <map>\n#include <cstdlib>\n#include <ctime>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n#define int long long\n\nint n,m,x[205],y[205],c[205],w[205],dy[105],ans[205],cnt,ncnt,head[105];\nint s,t,dis[105],dep[105];\nqueue <int> Q;\n\nstruct edge\n{\n\tint son;\n\tint val;\n\tint fey;\n\tint next;\n}edge[1005];\n\nvoid adde(int x,int y,int p,int q)\n{\n\tcnt++;\n\tedge[cnt].son=y;\n\tedge[cnt].val=p;\n\tedge[cnt].fey=q;\n\tedge[cnt].next=head[x];\n\thead[x]=cnt;\n}\n\nbool spfa()\n{\n\tmemset(dis,127,sizeof(dis));\n\tmemset(dep,127,sizeof(dep));\n\tdis[s]=dep[s]=0; Q.push(s);\n\twhile(!Q.empty())\n\t{\n\t\tint nr=Q.front();\n\t\tQ.pop();\n\t\tfor(int i=head[nr];i>0;i=edge[i].next)\n\t\t{\n\t\t\tif(edge[i].val)\n\t\t\t{\n\t\t\t\tif(dis[nr]+edge[i].fey<dis[edge[i].son])\n\t\t\t\t{\n\t\t\t\t\tdis[edge[i].son]=dis[nr]+edge[i].fey;\n\t\t\t\t\tdep[edge[i].son]=dep[nr]+1;\n\t\t\t\t\tQ.push(edge[i].son);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t]<0;//\u6ce8\u610f\n}\nint dfs(int now,int nowflow)\n{\n\tif(now==t) {return nowflow;}\n\tint nowuse=0;\n\tfor(int i=head[now];i>0;i=edge[i].next)\n\t{\n\t\tif(edge[i].val&&dis[now]+edge[i].fey==dis[edge[i].son]&&dep[now]+1==dep[edge[i].son])\n\t\t{\n\t\t\tint flw=dfs(edge[i].son,min(edge[i].val,nowflow-nowuse));\n\t\t\tnowuse+=flw;\n\t\t\tedge[i].val-=flw;\n\t\t\tedge[((i-1)^1)+1].val+=flw;\n\t\t}\n\t}\n\treturn nowuse;\n}\nvoid dinic()\n{\n\twhile(spfa())\n\t{\n\t\tint anss=dfs(1,100000000000000000);\n\t}\n}//dinic\n\nsigned main()\n{\n\tcin>>n>>m;\n\ts=1; t=n;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>x[i]>>y[i]>>c[i]>>w[i];\n\t\tif(c[i]&1)\n\t\t{\n\t\t\tdy[x[i]]--; dy[y[i]]++;\n\t\t}\n\t\tadde(x[i],y[i],c[i]/2,w[i]);\n\t\tadde(y[i],x[i],0,-w[i]);\n\t}\n\tncnt=cnt+1;\n\tfor(int i=2;i<=n-1;i++)\n\t{\n\t\tif(dy[i]&1) {cout<<\"Impossible\"<<endl; return 0;}\n\t\tif(dy[i]>0) \n\t\t{\n\t\t\tadde(1,i,dy[i]/2,-10000000000000000);\n\t\t\tadde(i,1,0,10000000000000000);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tadde(i,n,-dy[i]/2,-10000000000000000);\n\t\t\tadde(n,i,0,10000000000000000);\n\t\t}\n\t}\n\tdinic();\n\tfor(int i=ncnt;i<=cnt;i+=2)\n\t{\n\t\tif(edge[i].val) {cout<<\"Impossible\"<<endl; return 0;}\n\t}\n\tcout<<\"Possible\"<<endl;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcout<<edge[i*2].val*2+c[i]%2<<\" \";\n\t}\n}\n```\n",
        "postTime": 1672396825,
        "uid": 529697,
        "name": "PEKKA_l",
        "ccfLevel": 6,
        "title": "CF1766F\u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u4e2a**\u5e26\u6d41\u91cf\u5947\u5076\u9650\u5236\u7684\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41**\u3002\n\n\u6ce8\u610f\u5230\u5bf9\u4e8e $c_i$ \u4e3a\u5947\u6570\u7684\u60c5\u51b5\uff0c\u6700\u7ec8\u6d41\u91cf $\\geq 1$\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u8fb9\u5148\u7edf\u4e00\u6d41\u8d70 $1$ \u7684\u6d41\u91cf\uff0c\u7136\u540e\u5c06\u5bb9\u91cf\u9664\u4ee5 $2$ \u4e0b\u53d6\u6574\uff0c\u7136\u540e\u901a\u8fc7\u5728 $1, n$ \u4e0e\u6bcf\u4e2a\u70b9 $i$ \u52a0\u8fb9\u6765\u5e73\u8861\u6d41\u91cf\uff0c\u6700\u540e\u518d\u6765\u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002\n\n\u6700\u7ec8\u6bcf\u6761\u8fb9\u7684\u7b54\u6848\u4e3a\u8d39\u7528\u6d41\u8dd1\u51fa\u6765\u7684\u6d41\u91cf $\\times 2$\uff0c\u82e5\u5bb9\u91cf\u4e3a\u5947\u6570\u8fd8\u8981\u52a0 $1$\u3002\n\n\u5e73\u8861\u6d41\u91cf\u65f6\u5b58\u5728\u67d0\u4e2a\u70b9\u5c1a\u672a\u5e73\u8861\u7684\u6d41\u91cf\u4e3a\u5947\u6570\u6216\u6700\u7ec8\u8dd1\u51fa\u6765\u7684\u6d41\u4e0d\u80fd\u771f\u7684\u5e73\u8861\u65f6\u65e0\u89e3\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <queue>\n\nusing namespace std;\n\ntypedef long long ll;\n\ntypedef struct {\n\tint nxt;\n\tint end;\n\tint dis;\n\tint cost;\n} Edge;\n\nint cnt = 1;\nint x[207], y[207], deg[107], head[107], pos[207], pre_dot[107], pre_edge[107], flow[107], ans[207];\nll dis[107];\nbool mark[207], vis[107];\nEdge edge[797];\nqueue<int> q;\n\ninline void init(int n){\n\tfor (register int i = 1; i <= n; i++){\n\t\tdis[i] = 0x7fffffffffffffffll;\n\t\tvis[i] = false;\n\t}\n}\n\ninline void add_edge(int start, int end, int dis, int cost){\n\tcnt++;\n\tedge[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge[cnt].end = end;\n\tedge[cnt].dis = dis;\n\tedge[cnt].cost = cost;\n}\n\ninline void spfa(int start){\n\tdis[start] = 0;\n\tvis[start] = true;\n\tq.push(start);\n\twhile (!q.empty()){\n\t\tint cur = q.front();\n\t\tq.pop();\n\t\tvis[cur] = false;\n\t\tfor (register int i = head[cur]; i != 0; i = edge[i].nxt){\n\t\t\tif (edge[i].dis != 0){\n\t\t\t\tint x = edge[i].end;\n\t\t\t\tll y = dis[cur] + edge[i].cost;\n\t\t\t\tif (dis[x] > y){\n\t\t\t\t\tdis[x] = y;\n\t\t\t\t\tpre_dot[x] = cur;\n\t\t\t\t\tpre_edge[x] = i;\n\t\t\t\t\tif (!vis[x]){\n\t\t\t\t\t\tvis[x] = true;\n\t\t\t\t\t\tq.push(x);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline pair<int, ll> mincost_maxflow(int n, int start, int end){\n\tpair<int, ll> ans(0, 0);\n\twhile (true){\n\t\tinit(n);\n\t\tspfa(start);\n\t\tif (dis[end] >= 0) break;\n\t\tint flow = 0x7fffffff;\n\t\tfor (register int i = end; i != start; i = pre_dot[i]){\n\t\t\tflow = min(flow, edge[pre_edge[i]].dis);\n\t\t}\n\t\tfor (register int i = end; i != start; i = pre_dot[i]){\n\t\t\tedge[pre_edge[i]].dis -= flow;\n\t\t\tedge[pre_edge[i] ^ 1].dis += flow;\n\t\t}\n\t\tans.first += flow;\n\t\tans.second += flow * dis[end];\n\t}\n\treturn ans;\n}\n\nint main(){\n\tint n, m;\n\tcin >> n >> m;\n\tfor (register int i = 1; i <= m; i++){\n\t\tint c, w;\n\t\tcin >> x[i] >> y[i] >> c >> w;\n\t\tif (c % 2 == 1){\n\t\t\tc--;\n\t\t\tdeg[x[i]]--;\n\t\t\tdeg[y[i]]++;\n\t\t\tmark[i] = true;\n\t\t}\n\t\tc /= 2;\n\t\tadd_edge(x[i], y[i], c, w);\n\t\tadd_edge(y[i], x[i], 0, -w);\n\t\tpos[i] = cnt;\n\t}\n\tfor (register int i = 2; i < n; i++){\n\t\tif (deg[i] % 2 == 1){\n\t\t\tcout << \"Impossible\";\n\t\t\treturn 0;\n\t\t}\n\t\tdeg[i] /= 2;\n\t\tif (deg[i] > 0){\n\t\t\tadd_edge(1, i, deg[i], 0x80000001);\n\t\t\tadd_edge(i, 1, 0, 0x7fffffff);\n\t\t} else if (deg[i] < 0){\n\t\t\tadd_edge(i, n, -deg[i], 0x80000001);\n\t\t\tadd_edge(n, i, 0, 0x7fffffff);\n\t\t}\n\t}\n\tmincost_maxflow(n, 1, n);\n\tfor (register int i = 1; i <= m; i++){\n\t\tans[i] = edge[pos[i]].dis * 2 + (mark[i] ? 1 : 0);\n\t\tflow[x[i]] -= ans[i];\n\t\tflow[y[i]] += ans[i];\n\t}\n\tfor (register int i = 2; i < n; i++){\n\t\tif (flow[i] != 0){\n\t\t\tcout << \"Impossible\";\n\t\t\treturn 0;\n\t\t}\n\t}\n\tcout << \"Possible\" << endl;\n\tfor (register int i = 1; i <= m; i++){\n\t\tcout << ans[i] << \" \";\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1671411283,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1766F \u3010MCF\u3011"
    },
    {
        "content": "\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\uff0c\u4f46\u662f\u9650\u5236\u4e86\u8fb9\u6d41\u91cf\u5947\u5076\u6027\u4e0e\u5bb9\u91cf\u5947\u5076\u6027\u76f8\u540c\u3002\n\n\u8003\u8651\u5c06\u5bb9\u91cf\u4e3a\u5947\u6570\u7684\u8fb9\u62c6\u5206\uff0c\u5f3a\u5236\u6d41 $1$ \u7684\u6d41\u91cf\u3002\u8fd9\u6837\u5c31\u8f6c\u5316\u4e3a\u6240\u6709\u8fb9\u6d41\u91cf\u5747\u4e3a\u5076\u6570\u3002\n\n\u7136\u540e\u5c31\u7b80\u5355\u4e86\u3002\u6240\u6709\u8fb9\u5bb9\u91cf\u9664\u4ee5 $2$\uff0c\u65b0\u56fe\u4e0a\u6d41\u91cf $1$ \u4ee3\u8868\u539f\u56fe\u6d41\u91cf $2$\uff0c\u76f4\u63a5\u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002\n\n\u6ce8\u610f\u6d41\u5b8c\u540e\u518d check \u4e00\u4e0b\u662f\u5426\u771f\u7684\u7b26\u5408\u6761\u4ef6\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int maxn = 110, maxm = 1e3, inf = 1e7;\nstruct Edge{\n    int s, t, wei, cost, nxt;\n}edge[maxm];\nint n, m, cnt, ind[maxm], deg[maxn], h[maxn];\nbool odd[maxm], inq[maxn], qwq;\nvoid addedge(int s, int t, int wei, int cost){\n    edge[cnt] = {s, t, wei, cost, h[s]}, h[s] = cnt++;\n}\nvoid add(int s, int t, int wei, int cost){addedge(s, t, wei, cost), addedge(t, s, 0, -cost);}\nint s, t, pre[maxn], sum[maxn], ans[maxm];\nll mc, mf, dist[maxn];\nbool SPFA(){\n    fill(dist + 1, dist + n + 1, inf), fill(pre + 1, pre + n + 1, -1);\n    queue<int> q; dist[s] = 0, q.push(s), inq[s] = 1;\n    int cnt = 0;\n    while(!q.empty()){\n        int u = q.front(); q.pop(), inq[u] = 0;\n        for(int i = h[u]; ~i; i = edge[i].nxt) if(edge[i].wei){\n            cnt++;\n            int v = edge[i].t;\n            if(dist[v] > dist[u] + edge[i].cost){ \n                pre[v] = i, dist[v] = dist[u] + edge[i].cost;\n                if(!inq[v]) q.push(v), inq[v] = 1;\n            }\n        }\n    }\n    return dist[t] != inf;\n}\nsigned main(){\n    scanf(\"%d%d\", &n, &m), s = 1, t = n, fill(h + 1, h + n + 1, -1);\n    for(int i = 1, x, y, w, c; i <= m; i++){\n        scanf(\"%d%d%d%d\", &x, &y, &w, &c);\n        if(w & 1) w--, odd[i] = 1, deg[x]--, deg[y]++;\n        w >>= 1, ind[i] = cnt, add(x, y, w, c);\n    }\n    for(int i = 2; i < n; i++) if(deg[i] & 1) return puts(\"Impossible\"), 0;\n    for(int i = 2; i < n; i++) if(deg[i] >>= 1){\n        if(deg[i] > 0) add(s, i, deg[i], -inf);\n        else add(i, t, -deg[i], -inf);\n    }\n    int cnt = 0;\n    while(SPFA()){\n        int flow = inf; cnt++;\n        for(int i = t; i != s; i = edge[pre[i]].s) flow = min(flow, edge[pre[i]].wei);\n        if(1ll * flow * dist[t] > 0) break;\n        for(int i = t; i != s; i = edge[pre[i]].s) edge[pre[i]].wei -= flow, edge[pre[i] ^ 1].wei += flow;\n        mc += 1ll * flow * dist[t], mf += flow;\n    }\n    for(int i = 1; i <= m; i++){\n        ans[i] = (edge[ind[i] ^ 1].wei << 1) | odd[i];\n        sum[edge[ind[i]].s] -= ans[i], sum[edge[ind[i]].t] += ans[i];\n    }\n    for(int i = 2; i < n; i++) if(sum[i]) return puts(\"Impossible\"), 0;\n    puts(\"Possible\");\n    for(int i = 1; i <= m; i++) printf(\"%d \", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1671083049,
        "uid": 170890,
        "name": "Cxny",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1766F MCF"
    }
]