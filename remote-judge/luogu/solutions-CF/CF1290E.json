[
    {
        "content": "\u6807\u7b7e: \u7ebf\u6bb5\u6811beats, \u7b1b\u5361\u5c14\u6811.\n\n#### Part 1\n\n\u7b1b\u5361\u5c14\u6811\u4e2d\u7684\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811 \u5bf9\u5e94 \u6392\u5217\u4e2d\u4ee5 $a_i$ \u4e3a\u6700\u5927\u503c\u7684\u6781\u5927\u533a\u95f4(\u8bb0\u4e3a $(l_i,r_i)$, \u5176\u4e2d $l_i,r_i$ \u5206\u522b\u4e3a\u4f4d\u7f6e $i$ \u5de6\u8fb9, \u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6bd4 $a_i$ \u5927\u7684\u4f4d\u7f6e).\n\n\u90a3\u4e48\u6c42\u5b50\u6811\u5927\u5c0f\u548c\u7b49\u4ef7\u4e8e\u6c42\u533a\u95f4\u957f\u5ea6\u548c, \u5373 $s_x=\\sum_{a_i\\leqslant x}(r_i-l_i-1)$ , \u6ce8\u610f\u8fd9\u91cc $l,r$ \u662f\u5728\u53bb\u6389 $a_i>x$ \u540e\u7684\u5b50\u5e8f\u5217\u4e0a\u5b9a\u4e49\u7684, \u800c\u4e0d\u662f\u5728\u6574\u4e2a $a$ \u4e0a\u7684, \u6240\u4ee5\u53ea\u5728 $a_i\\leqslant x$ \u7684\u4f4d\u7f6e\u4e0a\u6709\u610f\u4e49.\n\n\u6240\u4ee5\u53ea\u8981\u80fd\u5728\u4ece\u5c0f\u5230\u5927\u63d2\u5165 $a$ \u7684\u8fc7\u7a0b\u4e2d\u7ef4\u62a4 $\\sum l$ \u548c $\\sum r$ \u5373\u53ef\u6c42\u7b54\u6848\u4e86, \u6c42 $\\sum l$ \u548c $\\sum r$ \u662f\u4e24\u4e2a\u76f8\u540c\u7684\u95ee\u9898, \u4e0b\u9762\u8003\u8651\u5982\u4f55\u6c42 $\\sum r$ .\n\n#### Part 2\n\n\u56e0\u4e3a\u63d2\u5165\u662f\u4ece\u5c0f\u5230\u5927\u7684, \u6240\u4ee5\u65b0\u63d2\u5165\u7684\u503c $x$ \u4f1a\u6210\u4e3a\u5e8f\u5217\u7684\u6700\u5927\u503c, \u8bbe\u8fd9\u4e2a\u4f4d\u7f6e\u5728\u539f\u6392\u5217\u4e2d\u4e3a $p$ .\n\n\u8003\u8651\u65b0\u5e8f\u5217 $r$ \u4e0e\u539f\u5e8f\u5217 $r$' \u7684\u5173\u7cfb:\n\n- $i>p\\wedge a_i<x$ , $r_i=r_i'+1$ .\n- $r_p=x+1$ ($r_p'$ \u65e0\u610f\u4e49).\n- $i<p\\wedge a_i<x$, $r_i=\\min\\{r'_i,p'\\}$ , \u5176\u4e2d $p'$ \u4e3a\u5b50\u5e8f\u5217\u4e2d $x$ \u7684\u4f4d\u7f6e. \n\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u5982\u4e0b\u64cd\u4f5c:\n\n- \u533a\u95f4\u52a0.\n- \u5355\u70b9\u4fee\u6539.\n- \u533a\u95f4\u5bf9\u4e00\u4e2a\u503c\u53d6 $\\min$ .\n\n\u540c\u65f6\u8981\u652f\u6301\u67e5\u8be2:\n\n- \u5168\u5c40\u548c.\n\n\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u901a\u8fc7 `\u7ebf\u6bb5\u6811beats` \u6765\u7ef4\u62a4.\n\n\u5177\u4f53\u6765\u8bb2, \u5bf9\u7ebf\u6bb5\u6811\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4: \u6700\u5927\u503c $v$ , \u6b21\u5927\u503c $s$ , \u6700\u5927\u503c\u4e2a\u6570 $len$ , \u975e\u6700\u5927\u503c\u7684\u4e2a\u6570 $slen$ , \u533a\u95f4\u548c $sum$ , \u540c\u65f6\u9700\u8981\u7ef4\u62a4\u6807\u8bb0: \u5bf9\u6700\u5927\u503c\u7684\u52a0\u51cf\u6807\u8bb0 $t$ \u548c\u5bf9\u975e\u6700\u5927\u503c\u7684\u52a0\u51cf\u6807\u8bb0 $st$ .\n\n\u540c\u65f6\u6211\u4eec\u9700\u8981\u652f\u6301\u67e5\u8be2 $p'$ \u8fd9\u4e2a\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u8282\u70b9\u4e0a\u7ef4\u62a4\u5df2\u7ecf\u63d2\u5165\u7684\u4f4d\u7f6e\u6570\u91cf $c$ (\u5176\u5b9e $c=len+slen$ , \u4e0d\u7ef4\u62a4\u4e5f\u53ef) .\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log^2 n)$ .\n\n#### Part 3 trick\n\n\u6211\u4eec\u6c42\u51fa $A_x=\\sum r$ \u540e\u53ef\u4ee5\u628a\u539f\u6392\u5217 `reverse` \u540e\u7528\u540c\u6837\u65b9\u6cd5\u6c42\u4e00\u904d\u53ef\u5f97 $B_x=\\sum x-l+1$ ,  \u5219\u6709 $s_x=\\sum r-l-1=A_x+B_x-x(x+2)$ .\n\n#### Part 4 Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint read();\nint n, a[200005], p[200005];\n\n#define root 1, n, 1\n#define ls l, mid, k << 1\n#define rs mid + 1, r, k << 1 | 1\nstruct Seg {\n    int c[1000006], v[1000006], s[1000006], tg[1000006], stg[1000006];\n    int len[1000006], slen[1000006];\n    long long sum[1000006];\n    void clear(int l, int r, int k) {\n        v[k] = s[k] = c[k] = tg[k] = stg[k] = len[k] = slen[k] = sum[k] = 0;\n        if (l == r) return;\n        int mid = l + r >> 1;\n        clear(ls), clear(rs);\n    }\n\n    void update(int k) {\n        int L = k << 1, R = k << 1 | 1;\n        c[k] = c[L] + c[R], len[k] = len[L] + len[R], sum[k] = sum[L] + sum[R];\n        if (v[L] > v[R]) {\n            v[k] = v[L], s[k] = max(s[L], v[R]);\n            len[k] = len[L], slen[k] = slen[L] + len[R] + slen[R];\n        } else if (v[L] < v[R]) {\n            v[k] = v[R], s[k] = max(v[L], s[R]);\n            len[k] = len[R], slen[k] = slen[R] + len[L] + slen[L];\n        } else {\n            v[k] = v[L], s[k] = max(s[L], s[R]);\n            len[k] = len[L] + len[R], slen[k] = slen[R] + slen[L];\n        }\n    }\n\n    void Tag(int k, int t1, int t2, int ctm) {\n        if (!ctm) t1 = t2;\n        v[k] += t1, tg[k] += t1, s[k] += t2, stg[k] += t2;\n        sum[k] += 1ll * t1 * len[k] + 1ll * t2 * slen[k];\n    }\n\n    void psd(int k) {\n        int L = k << 1, R = k << 1 | 1, mr = v[R] >= v[L];\n        Tag(L, tg[k], stg[k], v[L] >= v[R]);\n        Tag(R, tg[k], stg[k], mr), tg[k] = stg[k] = 0;\n    }\n\n    int add(int l, int r, int k, int st, int en) {\n        if (st > r || en < l) return 0;\n        if (st <= l && en >= r) return Tag(k, 1, 1, 1), c[k];\n        int mid = (psd(k), l + r >> 1), rt = 0;\n        rt = add(ls, st, en) + add(rs, st, en), update(k);\n        return rt;\n    }\n    void modi(int l, int r, int k, int p, int tv) {\n        if (l == r) return sum[k] = v[k] = tv, len[k] = c[k] = 1, void();\n        int mid = (psd(k), l + r >> 1);\n        p <= mid ? modi(ls, p, tv) : modi(rs, p, tv), update(k);\n    }\n    void pmin(int l, int r, int k, int st, int en, int tv) {\n        if (st > r || en < l || tv >= v[k]) return;\n        if (st <= l && en >= r && tv > s[k])\n            return Tag(k, min(tv - v[k], 0), 0, 1), void();\n        int mid = (psd(k), l + r >> 1);\n        pmin(ls, st, en, tv), pmin(rs, st, en, tv), update(k);\n    }\n} seg;\n\nlong long res[200005];\nint main() {\n    n = read();\n    for (int i = 1; i <= n; ++i) p[a[i] = read()] = i;\n    for (int t = 1; t <= 2; ++t) {\n        seg.clear(root);\n        for (int i = 1, x; i <= n; ++i) {\n            x = seg.add(root, p[i] + 1, n), seg.modi(root, p[i], i + 1);\n            seg.pmin(root, 1, p[i] - 1, i - x), res[i] += seg.sum[1];\n        }\n        for (int i = 1; i <= n; ++i) p[i] = n - p[i] + 1;\n    }\n\n    for (int i = 1; i <= n; ++i) printf(\"%lld\\n\", res[i] - 1ll * i * (i + 2));\n    return 0;\n}\n\nint read() {\n    int x = 0, f = 1;\n    char c = getchar();\n    while (c < '0' || c > '9') f = (c == '-') ? -1 : f, c = getchar();\n    while (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n```\n\n",
        "postTime": 1590579058,
        "uid": 51237,
        "name": "Kinandra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1290E \u3010Cartesian Tree \u3011"
    },
    {
        "content": "\u611f\u89c9\u8fd9\u4e2a\u9898\u6709 *3300 \u8fd8\u662f\u633a\u5947\u602a\u7684\uff0c\u4f46\u662f\u6bd5\u7adf\u662f\u7ecf\u8fc7\u65f6\u4ee3\u66f4\u8fed\u7684\u9898\uff0c\u5c31\u597d\u50cf\u82e5\u5e72\u5e74\u524d\u7684\u795e\u4ed9\u9898\u5230\u73b0\u5728\u90fd\u53d8\u6210\u677f\u5b50\u9898\u4e86\u4e00\u4e2a\u9053\u7406\u3002\n\n\u5176\u5b9e\u8001\u65e9\u5c31\u60f3\u4e2a\u5927\u6982\u4e86\uff0c\u4f46\u662f\u524d\u524d\u540e\u540e\u60a0\u54c9\u6e38\u54c9\u534a\u4e2a\u5c0f\u65f6\u6123\u662f\u521a\u521a\u624d\u60f3\u51fa\u6765\u600e\u4e48\u7ef4\u62a4\u3002\n\n\u8003\u8651\u7b1b\u5361\u5c14\u6811\u4e0a\u4e00\u4e2a\u70b9 $u$ \u7684\u5b50\u6811\u5927\u5c0f\u76f8\u5f53\u4e8e\u5728\u539f\u5e8f\u5217\u4e0a\u627e\u5230\u4e00\u4e2a $L$ \u548c $R$ \u6ee1\u8db3 $L$ \u662f\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u5927\u4e8e $a_u$ \u7684\u4f4d\u7f6e\uff0c$R$ \u662f\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u5927\u4e8e $a_u$ \u7684\u4f4d\u7f6e\u3002\u90a3\u4e48\u8fd9\u4e2a\u5b50\u6811\u5bf9\u5e94\u7684\u5c31\u662f\u533a\u95f4 $[L+1,R-1]$\uff0c\u6240\u4ee5\u8d21\u732e\u4e3a $R-L-1$\u3002\n\n\u95ee\u9898\u8f6c\u6362\u4e3a\u7ef4\u62a4\u8fd9\u4e2a $L$ \u548c $R$\uff0c\u8003\u8651\u6bcf\u6b21\u52a0\u70b9\u7684\u65f6\u5019\uff0c\u65b0\u52a0\u7684\u6570\u5b9e\u9645\u4e0a\u662f\u5f53\u524d\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4e00\u4e2a\u524d\u7f00\u7684 $R$ \u5bf9\u5f53\u524d\u4f4d\u7f6e\u53d6 $\\min$ \u548c\u4e00\u4e2a\u540e\u7f00\u7684 $L$ \u5bf9\u5f53\u524d\u4f4d\u7f6e\u53d6 $\\max$ \u5373\u53ef\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5409\u8001\u5e08\u7ebf\u6bb5\u6811\u53bb\u505a\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\u8fd9\u91cc\u7684 $[L,R]$ \u4e0d\u662f\u539f\u5e8f\u5217\u4e0a\u7684\u7f16\u53f7\uff0c\u800c\u662f\u5f53\u524d\u8fd9\u4e2a\u52a8\u6001\u52a0\u70b9\u7684\u5e8f\u5217\u3002\u8003\u8651\u6bcf\u6b21\u52a0\u70b9\u7684\u65f6\u5019\u5bf9\u8fd9\u4e2a\u7f16\u53f7\u7684\u5f71\u54cd\uff0c\u663e\u7136\u5bf9\u5de6\u8fb9\u6ca1\u5f71\u54cd\uff0c\u5bf9\u53f3\u8fb9\u96c6\u4f53 +1\u3002\n\n\u90a3\u4e48\u56e0\u4e3a\u524d\u7f00\u5bf9\u5f53\u524d\u70b9\u53d6 $\\min$ \u4e86\uff0c\u6240\u4ee5\u524d\u7f00\u7684 $R$ \u662f\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u7684\uff0c\u800c\u540e\u7f00\u7684 $R$ \u4e00\u5b9a\u5728\u5f53\u524d\u7684\u70b9\u7684\u540e\u9762\uff0c\u6240\u4ee5\u76f4\u63a5\u533a\u95f4\u52a0\u5373\u53ef\u3002\u540e\u7f00\u540c\u7406\uff0c\u6709\u5f71\u54cd\u7684\u662f\u540e\u7f00\u7684 $L$\uff0c\u4f46\u662f\u56e0\u4e3a\u53d6\u4e86 $\\max$\uff0c\u6240\u4ee5\u5168\u90e8\u90fd\u6709\u5f71\u54cd\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u533a\u95f4\u52a0\u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(n\\log^2n)$\u3002\n\n\u56e0\u4e3a\u6d89\u53ca\u5230\u8fd8\u672a\u52a0\u5165\u7684\u70b9\uff0c\u8fd9\u91cc\u6211\u9009\u62e9\u5e73\u8861\u6811\u5b9e\u73b0\u3002\n\n\u5e73\u8861\u6811\u6bd4\u7ebf\u6bb5\u6811\u6076\u5fc3\u7684\u5730\u65b9\u5728\u4e8e update \u7684\u65f6\u5019\u8bb0\u5f97\u8003\u8651\u8fd9\u4e2a\u70b9\u81ea\u5df1\u7684\u503c\u3002\n\nhttps://codeforces.com/contest/1290/submission/170455586",
        "postTime": 1662012093,
        "uid": 115936,
        "name": "\u6cf7\u6cfd\u4e09\u6708",
        "ccfLevel": 0,
        "title": "CF1290E"
    },
    {
        "content": "\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5217 $a$\uff0c\u5bf9\u4e8e $k\\in[1,n]$\uff0c\u6c42\u6240\u6709 $a_i\\leq k$ \u7684\u5b50\u5e8f\u5217\u6784\u6210\u5927\u6839\u7b1b\u5361\u5c14\u6811\u7684\u5b50\u6811\u5927\u5c0f\u548c\u3002\n\n$1\\leq n\\leq 1.5\\times 10^5$\u3002\n\n\u8003\u8651\u6bcf\u6b21\u65b0\u52a0\u5165\u4e00\u4e2a\u6570\u5217\u91cc\u5f53\u524d\u7684\u6700\u5927\u503c\u3002\n\n\u7ef4\u62a4 $l_i,r_i$ \u8868\u793a $i$ \u4f4d\u7f6e\u5de6/\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e $a_i$ \u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6709\u7b54\u6848\u4e3a $\\sum r_i-l_i-1=\\sum r-\\sum l -k$\uff0c\u5373\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u8ba1\u7b97\u5b83\u4f1a\u7ed9\u54ea\u4e00\u6bb5\u533a\u95f4\u8d21\u732e\u6df1\u5ea6 +1\uff0c\u5b50\u6811\u5927\u5c0f\u548c\u4e5f\u5c31\u662f\u6240\u6709\u70b9\u6df1\u5ea6\u7684\u548c\u3002\n\n\u8003\u8651\u5982\u4f55\u52a8\u6001\u7ef4\u62a4 $l,r$\uff0c\u6bcf\u6b21\u63d2\u5165\u7684\u4e00\u5b9a\u662f\u6700\u5927\u503c\uff0c\u5047\u8bbe\u5728 $p$ \u4f4d\u7f6e\u63d2\u5165\uff0c\u5b9e\u9645\u5728\u63d2\u5165\u540e\u5e8f\u5217\u7684\u4f4d\u7f6e\u662f $p'$\uff0c\u90a3\u4e48 $l_p=0,r_p=k+1$\u3002\n\n\u7531\u4e8e\u8fd9\u91cc\u7684 $l,r$ \u662f\u5bf9\u4e8e\u76ee\u524d\u7684\u5e8f\u5217\u800c\u8a00\u7684\uff0c\u6240\u4ee5\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u4e4b\u540e\u6709 $\\forall x\\in(p,n],l_x\\gets l_x+1,r_x\\gets r_x+1$\uff0c\u53e6\u5916\u6709 $\\forall x\\in[1,p),r_x\\gets \\min\\{r_x,p'\\}$\uff0c$\\forall x\\in(p,n]$\uff0c$l_x\\gets \\max\\{l_x,p'\\}$\u3002\n\n\u4e8e\u662f\u9700\u8981\u652f\u6301\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u53d6 $\\min$\uff0c\u533a\u95f4\u6c42\u548c\uff0c\u4e0a\u4e00\u624b beats \u7ef4\u62a4\u5c31\u597d\u4e86\u3002\n\n\u4e0d\u9700\u8981\u5199\u533a\u95f4\u53d6 $\\max$\uff0c\u7ef4\u62a4 $l$ \u7684\u65f6\u5019\u90fd\u7ef4\u62a4\u76f8\u53cd\u6570\u5c31\u597d\u4e86\u3002\n\n[code](https://www.luogu.com.cn/paste/hojewzni)\n\n",
        "postTime": 1628239896,
        "uid": 173685,
        "name": "\u6478\u9c7c\u9171",
        "ccfLevel": 8,
        "title": "CF1290E"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/CF1290E)\n\n[\u82f1\u6587\u9898\u9762](http://codeforces.com/problemset/problem/1290/E)\n\n\u9898\u610f\uff1a\n\n![](https://img2020.cnblogs.com/blog/1564093/202007/1564093-20200715221620018-764330244.png)\n\n\u7b1b\u5361\u5c14\u6811\u662f\u4e00\u79cd\u65e2\u6ee1\u8db3\u5806\u7684\u6027\u8d28\uff0c\u53c8\u6ee1\u8db3\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u7684\u6811\u3002\u53ef\u4ee5\u53d1\u73b0\u7684\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6392\u5217\uff0c\u5b83\u7684\u7b1b\u5361\u5c14\u6811\u662f\u552f\u4e00\u7684\u3002\n\n$n \\leq 2\\times 10^5$\u3002\n\n\u9898\u89e3\uff1a\u53d1\u73b0\u7b1b\u5361\u5c14\u6811\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u53ef\u4ee5\u8868\u793a\u4e3a$r_i-l_i+1$\u7684\u5f62\u5f0f\u3002\u5176\u4e2d$r_i$\u8868\u793a\u6700\u5c0f\u7684$p \\geq i$\uff0c\u4f7f\u5f97$a_{p+1}>a_i$\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u7ef4\u62a4$l_i$\u548c$r_i$\u3002\n\n\u8003\u8651\u52a0\u5165\u4e00\u4e2a\u6743\u503c\u6700\u5927\u7684\u70b9\u540e\uff0c$r_i$\u548c$l_i$\u4f1a\u51fa\u73b0\u54ea\u4e9b\u53d8\u5316\u3002\u8bbe\u5f53\u524d\u63d2\u5165\u7684\u662f\u6570\u5b57$i$\uff0c\u5b83\u5728\u6392\u5217\u4e2d\u7684\u4f4d\u7f6e\u662f$p$\uff0c\u5b83\u5728\u5f53\u524d\u7684\u75311\u5230$i$\u7ec4\u6210\u7684\u5b50\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u4e3a$q$\u3002\n\n- \u5bf9\u4e8e$\\forall_{k<p}$\uff0c$r_k=min(r_k,q-1)$\uff1b\n- \u5bf9\u4e8e$p$\uff0c$l_p=1,r_p=i$\u3002\n- \u5bf9\u4e8e$\\forall_{k>p},l_k++,r_k++,l_k=max(l_k,q+1)$\u3002\n\n\u6240\u4ee5\u76f8\u5f53\u4e8e\u662f\u533a\u95f4\u53d6min\uff0c\u533a\u95f4\u52a0\u548c\u5355\u70b9\u8d4b\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u52bf\u80fd\u7ebf\u6bb5\u6811\u7684\u601d\u60f3\uff0c\u7ef4\u62a4\uff1a\n\n- \u533a\u95f4\u548c\uff1b\n- \u6700\u5927\uff08\u5c0f\uff09\u503c\uff1b\n- \u6700\u5927\uff08\u5c0f\uff09\u503c\u51fa\u73b0\u6b21\u6570\uff1b\n- \u6b21\u5927\uff08\u5c0f\uff09\u503c\uff1b\n- \u533a\u95f4\u5408\u6cd5\u70b9\u4e2a\u6570\uff1b\n- \u52a0\u6cd5\u6807\u8bb0\u548c\u8d4b\u503c\u6807\u8bb0\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u53d6min\u64cd\u4f5c\uff0c\u6211\u4eec\u9012\u5f52\u5230\u4e00\u4e2a\u533a\u95f4\uff0c\u5176\u6700\u5927\u503c\u5c0f\u4e8e$w$\uff0c\u6b21\u5927\u503c\u5927\u4e8e\u7b49\u4e8e$w$\u65f6\u8fdb\u884c\u4fee\u6539\uff0c\u5426\u5219\u7ee7\u7eed\u9012\u5f52\u5b50\u6811\u3002\n\n\u4e0d\u4f1a\u52bf\u80fd\u7ebf\u6bb5\u6811\u533a\u95f4\u53d6min\u590d\u6742\u5ea6\u8bc1\u660e\u7684\u53ef\u4ee5\u51fa\u95e8\u53f3\u8f6c\u81ea\u884c\u767e\u5ea6\u3002\n\n\u6ce8\u610fpushup\u548cpushdown\u5404\u8981\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\uff0c\u8fd8\u8981\u6ce8\u610f\u6807\u8bb0\u7684\u4e0b\u4f20\u987a\u5e8f\u95ee\u9898\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(nlog^2n)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register int\n#define F(x,y,z) for(re x=y;x<=z;x++)\n#define FOR(x,y,z) for(re x=y;x>=z;x--)\ntypedef long long ll;\n#define I inline void\n#define IN inline int\n#define C(x,y) memset(x,y,sizeof(x))\n#define STS system(\"pause\")\ntemplate<class D>I read(D &res){\n\tres=0;register D g=1;register char ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-')g=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tres=(res<<3)+(res<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\tres*=g;\n}\nconst int INF=1e9+7;\nint n,m,a[202000],p[202000],t[202000];\nIN lbt(int x){return x&(-x);}\nI modi(int x,int w){while(x<=n)t[x]+=w,x+=lbt(x);}\nIN ques(int x){re res=0;while(x)res+=t[x],x-=lbt(x);return res;}\n#define all 1,1,n\n#define lt k<<1,l,mid\n#define rt k<<1|1,mid+1,r\nll sr[1606000],sl[1606000];int cntr[1606000],cntl[1606000];\nint mxr[1606000],mxl[1606000],smxr[1606000],smxl[1606000],cmxr[1606000],cmxl[1606000],snl[1606000],snr[1606000];\nint lazr[1606000],lazl[1606000],lmr[1606000],lml[1606000];\nI build(int k,int l,int r){\n\tsl[k]=sr[k]=cntr[k]=cntl[k]=cmxr[k]=cmxl[k]=lazr[k]=lazl[k]=lmr[k]=lml[k]=0;\n\tmxr[k]=smxr[k]=-INF;mxl[k]=smxl[k]=INF;\n\tif(l==r)return;\n\tre mid=(l+r)>>1;\n\tbuild(lt);build(rt);\n}\nI push_upl(int k){\n\tsl[k]=sl[k<<1]+sl[k<<1|1];cntl[k]=cntl[k<<1]+cntl[k<<1|1];\n\tif(mxl[k<<1]<mxl[k<<1|1]){\n\t\tsnl[k]=1;\n\t\tmxl[k]=mxl[k<<1];cmxl[k]=cmxl[k<<1];smxl[k]=min(smxl[k<<1],mxl[k<<1|1]);\n\t}\n\telse if(mxl[k<<1]>mxl[k<<1|1]){\n\t\tsnl[k]=2;\n\t\tmxl[k]=mxl[k<<1|1];cmxl[k]=cmxl[k<<1|1];smxl[k]=min(smxl[k<<1|1],mxl[k<<1]);\n\t}\n\telse{\n\t\tsnl[k]=3;\n\t\tmxl[k]=mxl[k<<1];cmxl[k]=cmxl[k<<1]+cmxl[k<<1|1];smxl[k]=min(smxl[k<<1],smxl[k<<1|1]);\n\t}\n}\nI push_upr(int k){\n\tsr[k]=sr[k<<1]+sr[k<<1|1];cntr[k]=cntr[k<<1]+cntr[k<<1|1];\n\tif(mxr[k<<1]>mxr[k<<1|1]){\n\t\tsnr[k]=1;\n\t\tmxr[k]=mxr[k<<1];cmxr[k]=cmxr[k<<1];smxr[k]=max(smxr[k<<1],mxr[k<<1|1]);\n\t}\n\telse if(mxr[k<<1]<mxr[k<<1|1]){\n\t\tsnr[k]=2;\n\t\tmxr[k]=mxr[k<<1|1];cmxr[k]=cmxr[k<<1|1];smxr[k]=max(smxr[k<<1|1],mxr[k<<1]);\n\t}\n\telse{\n\t\tsnr[k]=3;\n\t\tmxr[k]=mxr[k<<1];cmxr[k]=cmxr[k<<1]+cmxr[k<<1|1];smxr[k]=max(smxr[k<<1],smxr[k<<1|1]);\n\t}\n}\nI add_l(int k,int w){\n\tsl[k]+=(ll)cntl[k]*w;if(mxl[k]!=INF)mxl[k]+=w;if(smxl[k]!=INF)smxl[k]+=w;lazl[k]+=w;\n}\nI maxl(int k,int w){\n\tif(lazl[k]){\n\t\tadd_l(k<<1,lazl[k]);add_l(k<<1|1,lazl[k]);lazl[k]=0;\n\t}\n\tsl[k]+=(ll)cmxl[k]*(w-mxl[k]);mxl[k]=cmxl[k]?w:INF;lml[k]=w;\n}\nI push_downl(int k){\n\tif(lml[k]){\n\t\tif(snl[k]^2)maxl(k<<1,lml[k]);\n\t\tif(snl[k]^1)maxl(k<<1|1,lml[k]);\n\t\tlml[k]=0;\n\t}\n\tif(lazl[k]){\n\t\tadd_l(k<<1,lazl[k]);add_l(k<<1|1,lazl[k]);lazl[k]=0;\n\t}\n}\nI add_r(int k,int w){\n\tsr[k]+=(ll)cntr[k]*w;if(mxr[k]!=-INF)mxr[k]+=w;if(smxr[k]!=-INF)smxr[k]+=w;lazr[k]+=w;\n}\nI minr(int k,int w){\n\tif(lazr[k]){\n\t\tadd_r(k<<1,lazr[k]);add_r(k<<1|1,lazr[k]);lazr[k]=0;\n\t}\n\tsr[k]+=(ll)cmxr[k]*(w-mxr[k]);mxr[k]=cmxr[k]?w:-INF;lmr[k]=w;\n}\nI push_downr(int k){\n\tif(lmr[k]){\n\t\tif(snr[k]^2)minr(k<<1,lmr[k]);\n\t\tif(snr[k]^1)minr(k<<1|1,lmr[k]);\n\t\tlmr[k]=0;\n\t}\n\tif(lazr[k]){\n\t\tadd_r(k<<1,lazr[k]);add_r(k<<1|1,lazr[k]);lazr[k]=0;\n\t}\n}\nI modi_l(int k,int l,int r,int x,int w){\n\tif(l==r){\n\t\tsl[k]=mxl[k]=w;smxl[k]=INF;cmxl[k]=cntl[k]=1;\n\t\treturn;\n\t}\n\tpush_downl(k);\n\tre mid=(l+r)>>1;\n\tif(x<=mid)modi_l(lt,x,w);\n\telse modi_l(rt,x,w);\n\tpush_upl(k);\n}\nI modi_r(int k,int l,int r,int x,int w){\n\tif(l==r){\n\t\tsr[k]=mxr[k]=w;smxr[k]=-INF;cmxr[k]=cntr[k]=1;\n\t\treturn;\n\t}\n\tpush_downr(k);\n\tre mid=(l+r)>>1;\n\tif(x<=mid)modi_r(lt,x,w);\n\telse modi_r(rt,x,w);\n\tpush_upr(k);\n}\nI revi_l(int k,int l,int r,int x,int y,int w){\n\tif(x>r||y<l||!cntl[k])return;\n\tif(x<=l&&r<=y)return add_l(k,w),void();\n\tpush_downl(k);\n\tre mid=(l+r)>>1;\n\trevi_l(lt,x,y,w);revi_l(rt,x,y,w);\n\tpush_upl(k);\n}\nI revi_r(int k,int l,int r,int x,int y,int w){\n\tif(x>r||y<l||!cntr[k])return;\n\tif(x<=l&&r<=y)return add_r(k,w),void();\n\tpush_downr(k);\n\tre mid=(l+r)>>1;\n\trevi_r(lt,x,y,w);revi_r(rt,x,y,w);\n\tpush_upr(k);\n}\nI fill_max(int k,int l,int r,int x,int y,int w){\n\tif(x>r||y<l||!cntl[k]||mxl[k]>=w)return;\n\tif(x<=l&&r<=y){\n\t\tif(smxl[k]>=w){\n//\t\t\tcout<<\"#\"<<l<<\" \"<<r<<\" \"<<w<<endl;\n\t\t\treturn maxl(k,w),void();\n\t\t}\n\t\tpush_downl(k);\n\t\tre mid=(l+r)>>1;\n\t\tfill_max(lt,x,y,w);fill_max(rt,x,y,w);\n\t\treturn push_upl(k),void();\n\t}\n\tpush_downl(k);\n\tre mid=(l+r)>>1;\n\tfill_max(lt,x,y,w);fill_max(rt,x,y,w);\n\tpush_upl(k);\n}\nI fill_min(int k,int l,int r,int x,int y,int w){\n\tif(x>r||y<l||!cntr[k]||mxr[k]<=w)return;\n\tif(x<=l&&r<=y){\n\t\tif(smxr[k]<=w){\n//\t\t\tcout<<\"@\"<<l<<\" \"<<r<<\" \"<<w<<endl;\n\t\t\treturn minr(k,w),void();\n\t\t}\n\t\tpush_downr(k);\n\t\tre mid=(l+r)>>1;\n\t\tfill_min(lt,x,y,w);fill_min(rt,x,y,w);\n\t\treturn push_upr(k),void();\n\t}\n\tpush_downr(k);\n\tre mid=(l+r)>>1;\n\tfill_min(lt,x,y,w);fill_min(rt,x,y,w);\n\tpush_upr(k);\n}\nI getit(int k,int l,int r){\n\tcout<<\"!\"<<k<<\" \"<<l<<\" \"<<r<<\" \"<<sl[k]<<\" \"<<sr[k]<<\" \"<<mxl[k]<<\" \"<<mxr[k]<<\" \"<<smxl[k]<<\" \"<<smxr[k]<<\" \"<<cmxl[k]<<\" \"<<cmxr[k]<<endl;\n\tif(l==r)return ;//cout<<k<<\" \"<<l<<\" \"<<r<<\" \"<<sl[k]<<\" \"<<sr[k]<<endl,void();\n\tpush_downl(k);push_downr(k);\n\tre mid=(l+r)>>1;\n\tgetit(lt);getit(rt);\n}\nint main(){\n//\tfreopen(\"a.out\",\"w\",stdout);\n\tread(n);F(i,1,n)read(a[i]),p[a[i]]=i;build(all);\n\tF(i,1,n){\n\t\tmodi_l(all,p[i],1),modi_r(all,p[i],i);\n\t\tm=ques(p[i])+1;modi(p[i],1);revi_l(all,p[i]+1,n,1);revi_r(all,p[i]+1,n,1);\n\t\tfill_max(all,p[i]+1,n,m+1);fill_min(all,1,p[i]-1,m-1);\n\t\tprintf(\"%lld\\n\",sr[1]-sl[1]+i);\n//\t\tgetit(all);\n\t}\n\treturn 0;\n}\n/*\n5\n2 4 1 5 3\n6\n1 2 4 5 6 3\n10\n8 10 9 3 7 5 4 6 2 1\n15\n1 7 12 14 15 9 8 10 11 2 5 4 3 13 6\n*/\n\n```",
        "postTime": 1594822678,
        "uid": 93453,
        "name": "Purple_wzy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1290E \u3010Cartesian Tree \u3011"
    },
    {
        "content": "\u5f88\u5957\u8def\u7684\u4e00\u9053\u9898\u3002\n\n\u5148\u8003\u8651\u5bf9\u4e8e\u4e00\u68f5\u7b1b\u5361\u5c14\u6811\u5982\u4f55\u6c42\u51fa\u6240\u6709\u5b50\u6811\u5927\u5c0f\uff0c\u6211\u4eec\u7528\u5355\u8c03\u6808\u5efa\u6811\u7684\u8fc7\u7a0b\u4e2d\u662f\u53d1\u73b0\u4e00\u4e2a\u6bd4\u5f53\u524d\u6808\u9876\u5143\u7d20\u5927\u7684\u6570\u5c31\u5f39\u6808\uff0c\u4f5c\u4e3a\u4ed6\u7684\u7236\u4eb2\uff0c\u90a3\u4e48\u8bbe $pre_i$ \u8868\u793a\u7b2c\u4e00\u4e2a\u5411\u5de6\u6bd4 $a_i$ \u5927\u7684\u6570\u7684\u4f4d\u7f6e\uff0c $nxt_i$ \u8868\u793a\u5411\u53f3\u7b2c\u4e00\u4e2a\u6bd4 $a_i$ \u5927\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48 $i$ \u7684\u5b50\u6811\u5927\u5c0f\u662f $nxt_i-pre_i-1$ \u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5206\u5f00\u8003\u8651 $nxt$ \u548c $pre$ \u4e86\uff0c\u8003\u8651\u6c42 $pre$ \uff0c\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u679a\u4e3e $k$ \uff0c\u6bcf\u6b21\u63d2\u5165 $k$ \uff0c\u8bbe $k$ \u7684\u4f4d\u7f6e\u662f $pos_k$ \uff0c\u90a3\u4e48 $[1,pos_k-1]$ \u7684\u6570\u7684 $nxt$ \u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\u9700\u8981\u548c $pos_k'$ \u53d6min\uff08 $pos_k'$ \u662f $k$ \u5728\u65b0\u5e8f\u5217\u7684\u4f4d\u7f6e\uff09\uff0c\u800c $k$ \u7684\u52a0\u5165\u4f7f $[pos_k+1,n]$ \u7684\u6570\u7684\u4f4d\u7f6e\u52a0 $1$ \uff0c\u6240\u4ee5 $nxt$ \u8981\u52a0 $1$ \u3002\n\n\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528\u5409\u53f8\u673a\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\uff0c\u81f3\u4e8e\u63d2\u5165\u6570\uff0c\u6211\u4eec\u591a\u7ef4\u62a4\u51fa\u8fd9\u4e2a\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u6570\u63d2\u5165\u4e86\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5bf9\u4e8e $pre$ \uff0c\u76f4\u63a5\u628a\u5e8f\u5217\u7ffb\u8f6c\uff0c\u90a3\u4e48\u6211\u4eec\u6c42\u7684 $\\sum pre$ \u5c31\u53d8\u6210\u4e86 $\\sum i-pre+1$ \uff0c $i$ \u662f\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\uff0c\u6700\u540e\u628a\u591a\u7b97\u7684\u51cf\u6389\u5c31\u597d\u4e86\u3002\n\n**Code**\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nconst int N = 2e5;\nconst int inf = 1e9;\nusing namespace std;\nint n,a[N + 5],pos[N + 5],s[N + 5];\nlong long ans[N + 5];\nstruct node\n{\n    int mx,mxi,smx,s;\n    long long sm;\n    node operator +(const node &a)const\n    {\n        node c = {0,0,0,0,0};\n        c.sm = sm + a.sm;\n        c.s = s + a.s;\n        if (mx > a.mx)\n        {\n            c.mx = mx;\n            c.smx = smx;\n            c.mxi = max(a.mx,mxi);\n        }\n        if (mx < a.mx)\n        {\n            c.mx = a.mx;\n            c.smx = a.smx;\n            c.mxi = max(a.mxi,mx);\n        }\n        if (mx == a.mx)\n        {\n            c.mx = mx;\n            c.smx = a.smx + smx;\n            c.mxi = max(a.mxi,mxi);\n        }\n        return c;\n    }\n};\nstruct Seg\n{\n    node s[N * 4 + 5];\n    int tag[N * 4 + 5],ct[N * 4 + 5];\n    #define zrt k << 1\n    #define yrt k << 1 | 1\n    void build(int k,int l,int r)\n    {\n        s[k] = {0,-inf,0,0,0};tag[k] = 0;ct[k] = inf;\n        if (l == r)\n            return;\n        int mid = l + r >> 1;\n        build(zrt,l,mid);\n        build(yrt,mid + 1,r);\n    }\n    void add(int k,int l,int r,int z)\n    {\n        if (!s[k].s)\n            return;\n        s[k].sm += 1ll * s[k].s * z;\n        s[k].mx += z;\n        if (s[k].mxi != -inf)\n            s[k].mxi += z;\n        tag[k] += z;\n        if (ct[k] != inf)\n            ct[k] += z;\n    }\n    void cha(int k,int z)\n    {\n        if (!s[k].s)\n            return;\n        if (z >= s[k].mx)\n            return;\n        s[k].sm -= 1ll * s[k].smx * (s[k].mx - z);\n        s[k].mx = z;\n        ct[k] = z;\n    }\n    void pushdown(int k,int l,int r,int mid)\n    {\n        if (tag[k])\n        {\n            add(zrt,l,mid,tag[k]);\n            add(yrt,mid + 1,r,tag[k]);\n            tag[k] = 0;\n        }\n        if (ct[k] != inf)\n        {\n            cha(zrt,ct[k]);\n            cha(yrt,ct[k]);\n            ct[k] = inf;\n        }\n    }\n    void insert(int k,int l,int r,int x,int z)\n    {\n        if (l == r)\n        {\n            s[k] = (node){z,-inf,1,1,z};\n            return;\n        }\n        int mid = l + r >> 1;\n        pushdown(k,l,r,mid);\n        if (x <= mid)\n            insert(zrt,l,mid,x,z);\n        else\n            insert(yrt,mid + 1,r,x,z);\n        s[k] = s[zrt] + s[yrt];\n    }\n    void modify(int k,int l,int r,int x,int y,int z)\n    {\n        if (l >= x && r <= y)\n        {\n            add(k,l,r,z);\n            return;\n        }\n        int mid = l + r >> 1;\n        pushdown(k,l,r,mid);\n        if (x <= mid)\n            modify(zrt,l,mid,x,y,z);\n        if (y > mid)\n            modify(yrt,mid + 1,r,x,y,z);\n        s[k] = s[zrt] + s[yrt];\n    }\n    void getmin(int k,int l,int r,int x,int y,int z)\n    {\n        if (l >= x && r <= y)\n        {\n            if (z > s[k].mxi)\n            {\n                cha(k,z);\n                return;\n            }\n        }\n        int mid = l + r >> 1;\n        pushdown(k,l,r,mid);\n        if (x <= mid)\n            getmin(zrt,l,mid,x,y,z);\n        if (y > mid)\n            getmin(yrt,mid + 1,r,x,y,z);\n        s[k] = s[zrt] + s[yrt];\n    }\n    int query(int k,int l,int r,int x,int y)\n    {\n        if (l >= x && r <= y)\n            return s[k].s;\n        int mid = l + r >> 1;\n        pushdown(k,l,r,mid);\n        if (y <= mid)\n            return query(zrt,l,mid,x,y);\n        if (x > mid)\n            return query(yrt,mid + 1,r,x,y);\n        return query(zrt,l,mid,x,y) + query(yrt,mid + 1,r,x,y);\n    }\n}tree;\nvoid solve()\n{\n    for (int i = 1;i <= n;i++)\n        pos[a[i]] = i;\n    tree.build(1,1,n);\n    memset(s,0,sizeof(s));\n    for (int k = 1;k <= n;k++)\n    {\n        if (pos[k] + 1 <= n)\n            tree.modify(1,1,n,pos[k] + 1,n,1);\n        if (pos[k] - 1 >= 1)\n        {\n            int x = tree.query(1,1,n,1,pos[k] - 1) + 1;\n            tree.getmin(1,1,n,1,pos[k] - 1,x);\n        }\n        tree.insert(1,1,n,pos[k],k + 1);\n        ans[k] += tree.s[1].sm;\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for (int i = 1;i <= n;i++)\n        scanf(\"%d\",&a[i]);\n    solve();\n    reverse(a + 1,a + n + 1);\n    solve();\n    for (int i = 1;i <= n;i++)\n        printf(\"%lld\\n\",ans[i] - 1ll * i * (i + 2));\n    return 0;\n}\n```",
        "postTime": 1615029313,
        "uid": 73231,
        "name": "eee_hoho",
        "ccfLevel": 7,
        "title": "CF1290E Cartesian Tree"
    },
    {
        "content": "# CF1290E Solution\n\n## \u524d\u8a00\n\n\u8fd9\u9053\u9898\u4f60\u9700\u8981\u7684\u524d\u7f6e\u77e5\u8bc6\n\n- \u6811\u72b6\u6570\u7ec4\n- \u5409\u53f8\u673a\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u64cd\u4f5c\n\n## \u6b63\u6587\n\n**\u9898\u610f\u7ffb\u8bd1**\uff1a\u7ed9\u4f60\u4e00\u4e2a $1$ \u81f3 $n$ \u7684\u6392\u5217\uff0c\u6bcf\u6b21\u627e\u51fa\u5176\u4e2d\u4e0d\u5927\u4e8e $i$ \u7684\u6570\u5b57\uff0c\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u6210\u4e3a\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217\uff0c\u5728\u8fd9\u4e2a\u65b0\u7684\u5e8f\u5217\u4e0a\u5efa\u4e00\u68f5\u5927\u6839\u7b1b\u5361\u5c14\u6811\uff0c\u6c42\u8fd9\u4e2a\u7b1b\u5361\u5c14\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684 `size` \u4e4b\u548c\n\n\u66b4\u529b\u601d\u60f3 \u6bcf\u6b21 $O(n)$ \u5efa\u7b1b\u5361\u5c14\u6811\uff0c\u7136\u540e $O(n)$ \u7684 dfs \u5373\u53ef\u3002\u603b\u590d\u6742\u5ea6 $O(n^2)$\n\n\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u4e8b\u60c5\uff0c\u5728\u6211\u4eec\u5efa\u8fd9\u4e2a\u7b1b\u5361\u5c14\u6811\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u5e8f\u5217\u662f $1$ \u81f3 $i$ \u7684\u4e00\u4e2a\u6392\u5217\u3002\u5176\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\u4ed6\u4eec\u7684\u7f16\u53f7\u5fc5\u5b9a\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u8fd9\u662f\u56e0\u4e3a\u7b1b\u5361\u5c14\u6811\u6ee1\u8db3\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u6027\u8d28\u3002\n\n\u6211\u4eec\u8bb0 $r_i$ \u4e3a\u4ee5\u7f16\u53f7\u4e3a $i$ \u7684\u7ed3\u70b9\u7684\u5b50\u6811\u91cc\u7684\u7ed3\u70b9\u7684\u6700\u5927\u7f16\u53f7\uff0c\u540c\u6837\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 $l_i$\u3002\u90a3\u4e48\u6bcf\u4e2a\u5b50\u6811\u7684 `size` \u5373\u4e3a $r_i-l_i+1$\n\n\u6211\u4eec\u53ea\u8981\u6c42\u51fa\u6765 $\\sum_{a_j\\le i}r_i-l_i+1$ \u5e76\u52a8\u6001\u7ef4\u62a4\u4ed6\u3002\n\n\u8003\u8651\u73b0\u5728\u5df2\u7ecf\u8ba1\u7b97\u4e86 $1$ \u81f3 $i-1$ \u5373\u53ef\u3002\u8003\u8651\u6dfb\u52a0\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ed6\u7684\u503c\u662f $i$\uff0c\u8fd9\u4e2a\u63a5\u5f85\u4f60\u7684\u7f16\u53f7\u662f $p$\uff0c\u5728\u5df2\u7ecf\u6dfb\u52a0\u7684\u5e8f\u5217\u91cc\u662f\u7b2c $q$ \u4e2a\u3002\n\n- $1\\le j <p$ \u7684\u7ed3\u70b9\uff0c**\u5982\u679c\u5728\u5e8f\u5217\u91cc**\uff0c$r_i=\\min(r_i,q-1)$\n- $j=p$ \u7684\u7ed3\u70b9\uff0c$l_i=1,r_i=i$\n- $p< j \\le n$ \u7684\u7ed3\u70b9\uff0c**\u5982\u679c\u5728\u5e8f\u5217\u91cc**\uff0c$l_i++,r_i++,l_i=\\max(l_i,q+1)$\n\n\u8fd9\u6837\u5b50\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u8981\u6bcf\u6b21\u67e5\u8be2\u6574\u4f53\u5e8f\u5217\u548c\u5373\u53ef\u3002\n\n\u5982\u4f55\u5224\u65ad\u662f\u5426\u5728\u5e8f\u5217\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u6bcf\u4e2a\u7ed3\u70b9\u6253\u4e00\u4e2a $flag$\uff0c\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u91cc\u6709\u591a\u5c11\u4e2a\u6709\u7528\u8282\u70b9\uff0c\u4e3a $0$ \u76f4\u63a5\u8fd4\u56de\u5373\u53ef\uff0c\u5426\u5219\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u9012\u5f52\u3002\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u5b8c\u6210\u51e0\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u67e5\u8be2\u4e0a\u6587\u6240\u8ff0\u7684 $p, q$\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u6620\u5c04\u548c\u6811\u72b6\u6570\u7ec4\u5b8c\u6210\u3002\n2. \u5409\u53f8\u673a\u7ebf\u6bb5\u6811\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\n\n- \u533a\u95f4\u52a0\n- \u533a\u95f4\u548c\u67e5\u8be2\n- \u533a\u95f4 $\\min$ / $\\max$\n- \u5355\u70b9\u8d4b\u503c\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u7ef4\u62a4 $l$ \u548c $r$\uff0c\u8fd9\u6837\u5b50\u9700\u8981\u5199\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e00\u68f5\u7ef4\u62a4 $l$ \uff0c\u652f\u6301\u533a\u95f4 $\\max$\uff1b\u4e00\u68f5\u7ef4\u62a4 $r$\uff0c\u652f\u6301\u533a\u95f4 $\\min$\uff0c\u5c3d\u7ba1\u6709\u4e0d\u540c\uff0c\u4f46\u662f\u4ec5\u6709\u7ec6\u5c0f\u5dee\u522b\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u89c1[\u4ee3\u7801](https://paste.ubuntu.com/p/f7r6jhq8tV/)\n\n",
        "postTime": 1599277953,
        "uid": 232125,
        "name": "SiRiehn_nx",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1290E \u3010Cartesian Tree \u3011"
    },
    {
        "content": "## Description\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5217 $a$\uff0c\u5c06\u7531 $a_i\\leq k$ \u7684\u9879\u6784\u6210\u7684\u5b50\u5e8f\u5217\u6784\u6210\u7684\u7b1b\u5361\u5c14\u6811\u7684\u5b50\u6811\u5927\u5c0f\u548c\u8bb0\u4e3a $f(k)$\uff0c\u6c42 $\\sum_{k=1}^{n}f(k)$\u3002\n\n\u8fd9\u91cc\u7684\u7b1b\u5361\u5c14\u6811\u662f\u5927\u6839\u5806\u7684\u7ed3\u6784\u3002\n\n$n\\leq 1.5\\times 10^5$\n\n## Solution\n\n\u53ef\u4ee5\u770b\u505a\u5c06 $a_i=1,2,...,n$ \u4f9d\u6b21\u63d2\u5165\u5230\u5e8f\u5217\u4e2d\uff0c\u52a8\u6001\u5730\u7ef4\u62a4\u7b1b\u5361\u5c14\u6811\u3002\n\n\u76f4\u63a5\u7ef4\u62a4\u7b1b\u5361\u5c14\u6811\u7684\u5c31\u76f8\u5f53\u4e8e\u505a\u975e\u65cb $\\text{Treap}$ \u7684 $\\text{split}$ \u64cd\u4f5c\uff0c\u8fd9\u4f9d\u8d56\u539f\u6811\u7684\u9ad8\u5ea6\u4e0d\u9ad8\u2014\u2014\u800c\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n\n\u7b1b\u5361\u5c14\u6811\u4e0a\u7684\u6bcf\u4e2a\u5b50\u6811\u90fd\u5bf9\u5e94\u4e00\u6bb5\u8054\u7cfb\u7684\u533a\u95f4\uff0c\u5b50\u6811\u5927\u5c0f\u5c31\u662f\u8fd9\u6bb5\u533a\u95f4\u5305\u542b\u7684\u5df2\u7ecf\u63d2\u5165\u7684\u70b9\u3002\u5047\u8bbe\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u533a\u95f4\u4e3a $[L_i,R_i]$\uff0c\u90a3\u4e48\u5c06 $a_x=k$ \u63d2\u5165\u7684\u65f6\u5019\u5c31\u76f8\u5f53\u4e8e\u8fdb\u884c\u4e86\u8fd9\u6837\u7684\u64cd\u4f5c\uff1a\n\n$$R_i=\\min\\{R_i,x-1\\}\\ \\ i<x $$\n\n$$L_i=\\max\\{L_i,x+1\\}\\ \\ i>x $$\n\n\n\u8fd9\u4e24\u4e2a\u4fe1\u606f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5409\u53f8\u673a\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\uff0c\u4f46\u662f\u9700\u8981\u7ef4\u62a4\u7684\u662f\u533a\u95f4\u5185\u7684\u5df2\u63d2\u5165\u70b9\u7684\u4e2a\u6570\uff0c\u8fd9\u5c31\u4e0d\u80fd\u76f4\u63a5\u63cf\u8ff0\u4e86\u3002\n\n\u8bb0 $cnt_i$ \u8868\u793a\u524d\u7f00 $i$ \u4e2d\u6709\u591a\u5c11\u4e2a\u5df2\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 $\\sum cnt_R-\\sum cnt_{L-1}$ \u6765\u63cf\u8ff0\uff0c\u5bf9 $L,R$ \u53d6 $\\min,\\max$ \u4e5f\u53ef\u4ee5\u63cf\u8ff0\u4e3a\u5bf9 $cnt_L,cnt_R$ \u53d6 $\\min,\\max$\u3002\u63d2\u5165\u5143\u7d20\u4e4b\u540e\u5c31\u76f8\u5f53\u4e8e\u5bf9\u540e\u7f00\u7684 $cnt$ \u90fd $+1$\u3002\n\n\u53ef\u4ee5\u62c6\u89e3\u6210\u72ec\u7acb\u7684\u4e24\u4e2a\u524d\u540e\u7f00\u53d6 $\\min,\\max$\uff0c\u540e\u7f00\u52a0\u7684\u95ee\u9898\uff0c\u7528\u5409\u53f8\u673a\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u662f $O(nlog^2n)$ \u7684\u3002\n\n\u5b9e\u73b0\u65b9\u9762\uff0c\u56e0\u4e3a\u95ee\u9898\u662f\u5bf9\u79f0\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u53ea\u9700\u8981\u5199\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\n\n\u5982\u679c\u662f\u6309\u7167\u8fd9\u79cd\u5199\u6cd5\uff0c\u5c31\u53ea\u6709\u524d\u7f00\u53d6 $\\min$\uff0c\u540e\u7f00\u52a0\u4e24\u79cd\u64cd\u4f5c\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u590d\u6742\u5ea6\u8c8c\u4f3c\u53ef\u4ee5\u644a\u5230 $O(nlogn)$\uff08\u6211\u6ca1\u644a\u51fa\u6765\uff09\u3002\n\n~~\u8fd9\u4e2a\u63d2\u5165\u5199\u5f97\u597d\u4e11\u554a~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define I inline int\n#define V inline void\n#define B inline bool\n#define ll long long int\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\nconst int N=15e4+1,INF=0x3f3f3f3f;\nll ans[N];\nint n,a[N],b[N],c[N];\nI lowbit(int x){return x&-x;}\nV add(int x){while(x<=n)c[x]++,x+=lowbit(x);}\nI ask(int x){return!x?0:(c[x]+ask(x^lowbit(x)));}\nstruct ele{\n\tstruct node{\n\t\tint val,cnt;\n\t\tV set(int x,int y){val=x,cnt=y;}\n\t\tB operator<(const node&u)const{return val<u.val;}\n\t\tnode operator+(const node&u)const{\n\t\t\treturn(val==u.val)?(node){val,cnt+u.cnt}:max(*this,u);\n\t\t}\n\t}x,y;\n\tll sum;int tag_max,tag_sum,siz;\n\tI val(){return x.val;}\n\tV add_max(int w){sum+=1ll*w*x.cnt,x.val+=w,tag_max+=w;}\n\tV add_sum(int w){\n\t\tsum+=1ll*w*siz,tag_sum+=w;\n\t\tif(x.cnt)x.val+=w;\n\t\tif(y.cnt)y.val+=w;\n\t}\n\tV clean(){sum=tag_max=tag_sum=siz=0,x.set(0,0),y.set(-INF,0);}\n}t[N<<2];\n#define lc p<<1\n#define rc lc|1\n#define root 1,1,n\n#define lson lc,L,mid\n#define rson rc,mid+1,R\n#define tree int p,int L,int R\nV upd(int p){\n\tt[p].sum=t[lc].sum+t[rc].sum,t[p].x=t[lc].x+t[rc].x;\n\tif(t[lc].val()==t[rc].val())t[p].y=t[lc].y+t[rc].y;\n\telse t[p].y=t[lc].y+t[rc].y+min(t[lc].x,t[rc].x);\n}\nV psd(int p){\n\tint tmp=max(t[lc].val(),t[rc].val());\n\tif(t[lc].val()==tmp)t[lc].add_max(t[p].tag_max);\n\tif(t[rc].val()==tmp)t[rc].add_max(t[p].tag_max);\n\tt[lc].add_sum(t[p].tag_sum),t[rc].add_sum(t[p].tag_sum);\n\tt[p].tag_max=t[p].tag_sum=0;\n}\nV input(){scanf(\"%d\",&n);FOR(i,1,n)scanf(\"%d\",a+i);}\nV build(tree){\n\tt[p].clean();\n\tif(L==R)return;\n\tint mid=L+R>>1;\n\tbuild(lson),build(rson),upd(p);\n}\nV dfs(int p,int x){\n\tif(t[p].val()<=x)return;\n\tif(t[p].y.val<x)\n\t\treturn t[p].add_max(x-t[p].val());\n\tpsd(p),dfs(lc,x),dfs(rc,x),upd(p);\n}\nV modify(tree,int l,int r,int x){\n\tif(l==L&&R==r)return dfs(p,x);\n\tint mid=L+R>>1;psd(p);\n\tif(r<=mid)modify(lson,l,r,x);\n\telse if(l>mid)modify(rson,l,r,x);\n\telse modify(lson,l,mid,x),modify(rson,mid+1,r,x);\n\tupd(p);\n}\nV ins(tree,int l,int r,int x,int flag){\n\tt[p].siz+=flag;\n\tif(l==L&&R==r){\n\t\tif(flag)t[p].x.cnt=1;\n\t\treturn t[p].add_sum(x);\n\t}\n\tint mid=L+R>>1;psd(p);\n\tif(r<=mid)ins(lson,l,r,x,flag);\n\telse if(l>mid)ins(rson,l,r,x,flag);\n\telse ins(lson,l,mid,x,flag),ins(rson,mid+1,r,x,flag);\n\tupd(p);\n}\nV init(){\n\tbuild(1,1,n),memset(c,0,n+1<<2);\n\tFOR(i,1,n)b[a[i]]=i;\n}\nV solve(){\n\tinit();\n\tFOR(i,1,n){\n\t\tmodify(root,1,b[i],ask(b[i])),ins(root,b[i],b[i],i-1,1);\n\t\tins(root,b[i],n,1,0),add(b[i]),ans[i]+=t[1].sum;\n\t}\n}\nV work(){\n\tsolve(),reverse(a+1,a+1+n),solve();\n\tFOR(i,1,n)cout<<ans[i]-1ll*i*i<<'\\n';\n}\nint main(){\n\tinput();\n\twork();\n\treturn 0;\n}\n```\n",
        "postTime": 1581087778,
        "uid": 109236,
        "name": "Fuyuki",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1290E \u3010Cartesian Tree \u3011"
    },
    {
        "content": "## \u524d\u7f6e\u829d\u58eb\uff1a\u5409\u53f8\u673a\u7ebf\u6bb5\u6811\n\n\u56e0\u4e3a\u672c\u9898\u51fa\u73b0\u5728\u4e86\u6821\u5185\u7684\u4e13\u9898\u8bad\u7ec3\u4e2d\uff0c\u56e0\u6b64\u4f1a\u5c3d\u529b\u8ba9\u548c\u8fd9\u4e2a\u849f\u84bb\u4e00\u6837\u83dc\u7684\u4eba\u770b\u61c2\uff08~~\u8bdd\u8bf4\u5e94\u8be5\u6ca1\u4eba\u4f1a\u95f2\u7740\u6ca1\u4e8b\u505a\u4e00\u9053`3300`\u7684DS\u5427~~\uff09\n\n\u672c\u4eba\u5e76\u4e0d\u4f1a\u7528\u67d0\u4e9btrick\uff0c\u6240\u4ee5\u672c\u9898\u89e3\u9700\u89813\u68f5\u7ebf\u6bb5\u6811\uff08\u6ca1\u9519\u8fd9\u4e2a\u849f\u84bb\u8fde\u6811\u72b6\u6570\u7ec4\u90fd\u4e0d\u4f1a\uff09\u3002\n\n\u672c\u9898\u7684\u64cd\u4f5c\u660e\u663e\u4e0d\u662f\u5728\u6811\u4e0a\u63d2\u5165\uff08\u89c1@Fuyuki \u5946\u4f6c\u7684\u9898\u89e3\uff09\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u601d\u8003\u5173\u4e8e\u7b1b\u5361\u5c14\u6811\u7684\u6027\u8d28\u3002\n\n> \u201c\u7b1b\u5361\u5c14\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u6811\u3002\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7531\u4e00\u4e2a\u952e\u503c\u4e8c\u5143\u7ec4 $(k,w)$ \u6784\u6210\u3002\u8981\u6c42 $k$ \u6ee1\u8db3\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u800c $w$ \u6ee1\u8db3\u5806\u7684\u6027\u8d28\u3002\u5982\u679c\u7b1b\u5361\u5c14\u6811\u7684 $k,w$ \u952e\u503c\u786e\u5b9a\uff0c\u4e14 $k$ \u4e92\u4e0d\u76f8\u540c\uff0c $w$ \u4e92\u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b1b\u5361\u5c14\u6811\u7684\u7ed3\u6784\u662f\u552f\u4e00\u7684\u3002\u201d\u2014\u2014OI wiki\n\n\u7531\u9898\u610f\u53ef\u5f97\uff0c\u672c\u9898\u7684\u7b1b\u5361\u5c14\u6811\u7684\u952e\u503c $k$ \u4e3a\u6570\u636e\u5728\u6bcf\u4e00\u4e2a\u8be2\u95ee\u4e2d\u7684\u5b50\u5e8f\u5217\u7684\u4f4d\u7f6e\uff0c\u800c $w$ \u663e\u7136\u662f\u552f\u4e00\u7684\u3002\u5bf9\u4e8e\u8fd9\u79cd\u7279\u6b8a\u7684\u7b1b\u5361\u5c14\u6811\uff0c\u6709\u4ee5\u4e0b\u7684\u6027\u8d28\uff1a\u4e00\u68f5\u5b50\u6811\u5185\u7684\u4e0b\u6807\u662f\u8fde\u7eed\u7684\u4e00\u4e2a\u533a\u95f4\uff08\u8fd9\u6837\u624d\u80fd\u6ee1\u8db3[\u4e8c\u53c9\u641c\u7d22\u6811](https://oi-wiki.org/ds/bst/)\u7684\u6027\u8d28\uff09\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u5411\u6837\u4f8b\u3002\n\na:`2 4 1 5 3`\u3002\n\n\u4ee5\u4e0b\u7684 $k$ \u5747\u4e3a\u9898\u76ee\u4e2d\u7684 $k$\uff0c\u800c\u4e0d\u662f\u7b1b\u5361\u5c14\u6811\u7684\u952e\u503c\u3002\n\n$k=1$ \u65f6\uff1a\n\n$1$ \u7684\u5b50\u6811\u5bf9\u5e94\u533a\u95f4 $[1,1]$\uff0c\u5373`1`\u3002\n\n$k=2$ \u65f6\uff1a\n\n$1$ \u7684\u5b50\u6811\u5bf9\u5e94\u533a\u95f4 $[2,2]$\uff0c\u5373`1`\u3002  \n$2$ \u7684\u5b50\u6811\u5bf9\u5e94\u533a\u95f4 $[1,2]$\uff0c\u5373`2 1`\u3002\n\n\u4ee5\u4e0b\u7701\u7565\u82e5\u5e72\u884c\u3002\u4f60\u4eec\u53ef\u4ee5\u81ea\u5df1\u63a8\u4e00\u4e0b\u3002\n\n\u6700\u540e\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u6027\u8d28\u3002\u8bbe\u6392\u5217\u4e2d $\\le k$ \u7684\u9879\u6784\u6210\u7684\u5b50\u5e8f\u5217\u4e3a $a^{\\prime}$\uff0c$i$ \u7684\u5b50\u6811\u5bf9\u5e94\u533a\u95f4 $[l,r]$\uff0c\u5219\n\n$$l=\\max\\limits_{1 \\le j \\lt i \\land a^{\\prime}_{j}>a^{\\prime}_{i}}{j+1}$$\n\n$$r=\\min\\limits_{i \\gt j \\le k \\land a^{\\prime}_{j}>a^{\\prime}_{i}}{j-1}$$\n\n\u5373\u4e3a\uff1a$l$ \u662f $i$ \u5de6\u4fa7\u7b2c\u4e00\u4e2a\u5927\u4e8e $a^{\\prime}_{i}$ \u7684\u4f4d\u7f6e\u3002$r$ \u540c\u7406\u3002\n\n\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019\u6211\u4eec\u76f4\u63a5\u7edf\u8ba1 $\\sum r-\\sum l + k$ \u5373\u53ef\u3002\n\n\u4f46\u662f\u76f4\u63a5\u7edf\u8ba1 $l$ \u548c $r$ \u662f $\\Theta(n)$ \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u9700\u8981\u8003\u8651\u6bcf\u6b21\u5728\u6392\u5217\u4e2d\u63d2\u5165\u4e86\u4e00\u4e2a\u6700\u5927\u7684\u5143\u7d20\uff08\u8bbe\u5176\u5728\u6392\u5217\u4e2d\u7684\u4f4d\u7f6e\u4e3a $i$\uff09\u540e\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\u3002\uff08\u5176\u5b9e\u5df2\u7ecf\u6709\u5946\u4f6c\u63d0\u5230\u4e86\uff09\n\n- $\\forall j \\lt i$\uff0c$r_j \\leftarrow \\min(r_j,i-1)$\n\n- $l_i \\leftarrow 1,r_i \\leftarrow i$\uff08\u56e0\u4e3a $a^{\\prime}_{i}$ \u662f\u6700\u5927\u7684\uff09\n\n- $\\forall j \\gt i$\uff0c$l_j \\leftarrow \\max(l_j+1,i+1),r_j \\leftarrow r_j+1$\n\n\u628a $j \\gt i$ \u7684\u60c5\u51b5\u8f6c\u6362\u4e00\u4e0b\uff0c\u5c31\u662f $l_j \\leftarrow l_j+1,r_j \\leftarrow r_j+1,l_j \\leftarrow \\max(l_j,i+1)$\u3002\n\n\u6b64\u5904 $j \\gt i$ \u7684\u60c5\u5f62\u4e2d\uff0c\u5bf9 $l_j$ \u7684\u5904\u7406\u8fd0\u7528\u5206\u7c7b\u8ba8\u8bba\u601d\u60f3\u3002\u82e5 $l_j \\gt i$\uff0c\u5219 $l_j$ \u7684\u5de6\u8fb9\u4f1a\u591a\u51fa\u4e00\u4e2a\u70b9\u3002\u5426\u5219 $l_j$ \u5411\u5de6\u8fb9\u7684\u62d3\u5c55\u4f1a\u88ab $i$ \u963b\u6321\u3002\n\n\u4e8e\u662f\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n- \u533a\u95f4\u52a01\n- \u533a\u95f4\u53d6 $\\min / \\max$\n- \u5355\u70b9\u8d4b\u503c\n\n\u8fd9\u662f\u5409\u53f8\u673a\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u3002\u5409\u53f8\u673a\u7ebf\u6bb5\u6811\u7684\u4f8b\u9898\u89c1 ~~`\u7206\u70b8OJ`~~ `BZOJ4695 \u6700 fAKe \u5973\u9009\u624b`\uff08\u56e0\u4e3a `BZOJ` \u5b83\u6b7b\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u627e\u4e00\u4e2a\u955c\u50cf\uff0c\u6216\u8005\u76f4\u63a5\u70b9[\u8fd9\u91cc](https://oi-wiki.org/ds/seg-beats/)\uff09\u3002\u590d\u6742\u5ea6\u4e3a $\\Theta(n \\log^2 n)$ \uff0c\u8bc1\u660e\u53ef\u4ee5\u89c12016\u5e74\u96c6\u8bad\u961f\u8bba\u6587\u3002\uff08\u611f\u6027\u7406\u89e3\u5373\u53ef\uff09\n\n\u56e0\u4e3a\u5927\u90e8\u5206\u65f6\u5019\u6570\u5217\u90fd\u662f\u4e0d\u5b8c\u6574\u7684\uff0c\u6240\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e2d\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u4e2d**\u5408\u6cd5\u70b9**\uff08\u5373 $\\le k$ \u7684\u70b9\uff09\u7684\u4e2a\u6570\u3002\u5728\u5408\u6cd5\u70b9\u4e2a\u6570\u4e3a`0`\u65f6\u76f4\u63a5\u9000\u51fa\u9012\u5f52\u3002\n\n\u8bb0\u5f97\u5728\u5355\u70b9\u4fee\u6539\u65f6\u5c06\u5408\u6cd5\u70b9\u4e2a\u6570\u6539\u4e3a`1`\uff0c\u4e0a\u4f20\u65f6\uff08`pushup`\u6216`update`\uff09\u5904\u7406\u5408\u6cd5\u70b9\u4e2a\u6570\u3002\n\n\u90a3\u4e48\u6211\u4eec\u7528\u4e86\u4e24\u68f5\u5409\u53f8\u673a\u7ebf\u6bb5\u6811\u3002\u5269\u4e0b\u7684\u90a3\u68f5\u6811\u7684\u7528\u5904\u5c31\u662f\u5728\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u70b9\u65f6\u786e\u5b9a\u6240\u6709\u70b9\u5728\u5b50\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u3002\u5b9e\u73b0\u8d77\u6765\u5f88\u7b80\u5355\u3002\u8bbe\u8be5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u5e8f\u5217\u4e3a $pos$\uff0c\u5f53\u524d\u63d2\u5165\u7684\u5143\u7d20\u4e3a $a_i$\uff0c$\\forall j \\gt i$\uff0c$pos_j \\leftarrow pos_j+1$ \u5373\u53ef\u3002\n\nCode:\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define neinf 0xcfcfcfcf\n#define inf 0x3f3f3f3f\n#define uint unsigned int\n#define reg register\n#define il inline\n#define len 150000\n#define siz (len << 1)\n#define mid ((l + r) >> 1)\n\nil int umax(int a, int b) {return a > b ? a : b;}\n\nil int umin(int a, int b) {return a < b ? a : b;}\n\nil int rd()\n{\n\treg int res = 0; reg char ch = getchar();\n\twhile (ch < '0' || ch > '9')\n\t\tch = getchar();\n\twhile (ch >= '0' && ch <= '9')\n\t\tres = res * 10 + (ch & 15), ch = getchar();\n\treturn res;\n}\n\nil void prt(ll x, char t)\n{\n\tif (x < 0) putchar('-'), x = -x;\n\tif (x > 9) prt(x / 10, 0), x %= 10;\n\tputchar(x | 48);\n\tif (t) putchar(t);\n}\nint n, a[len + 5], rf[len + 5];\n#define mnl(i) ((SGTL::tl + (i)) -> __v1)\n#define smnl(i) ((SGTL::tl + (i)) -> __v2)\n#define cmnl(i) ((SGTL::tl + (i)) -> __v3)\n#define tmxl(i) ((SGTL::tl + (i)) -> __v4)\n#define tqll(i) ((SGTL::tl + (i)) -> __v5)\n#define suml(i) ((SGTL::tl + (i)) -> __v6)\n#define clgl(i) ((SGTL::tl + (i)) -> __v7)\n#define mxr(i) ((SGTR::tr + (i)) -> __v1)\n#define smxr(i) ((SGTR::tr + (i)) -> __v2)\n#define cmxr(i) ((SGTR::tr + (i)) -> __v3)\n#define tmnr(i) ((SGTR::tr + (i)) -> __v4)\n#define tqlr(i) ((SGTR::tr + (i)) -> __v5)\n#define sumr(i) ((SGTR::tr + (i)) -> __v6)\n#define clgr(i) ((SGTR::tr + (i)) -> __v7)\n#define sump(i) ((SGTP::tp + (i)) -> __v1)\n#define tagp(i) ((SGTP::tp + (i)) -> __v2)\n\nnamespace SGTL\n{\n\tstruct node\n\t{\n\t\tint __v1, __v2, __v3, __v4, __v5;\n\t\tll __v6;\n\t\tint __v7;\n\t} tl[siz + 5];\n\tint ls[siz + 5], rs[siz + 5], cnt;\n\til void pushup(int i)\n\t{\n\t\treg int sl = *(ls + i), sr = *(rs + i);\n\t\tsuml(i) = suml(sl) + suml(sr);\n\t\tclgl(i) = clgl(sl) + clgl(sr);\n\t\tif (mnl(sl) == mnl(sr))\n\t\t{\n\t\t\tmnl(i) = mnl(sl);\n\t\t\tcmnl(i) = cmnl(sl) + cmnl(sr);\n\t\t\tsmnl(i) = umin(smnl(sl), smnl(sr));\n\t\t}\n\t\telse if (mnl(sl) < mnl(sr))\n\t\t{\n\t\t\tmnl(i) = mnl(sl);\n\t\t\tcmnl(i) = cmnl(sl);\n\t\t\tsmnl(i) = umin(smnl(sl), mnl(sr));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmnl(i) = mnl(sr);\n\t\t\tcmnl(i) = cmnl(sr);\n\t\t\tsmnl(i) = umin(mnl(sl), smnl(sr));\n\t\t}\n\t}\n\til void tagplus(int i, int l, int r, int v)\n\t{\n\t\tsuml(i) += 1ll * clgl(i) * v;\n\t\tmnl(i) += v;\n\t\tif (smnl(i) != inf)\n\t\t\tsmnl(i) += v;\n\t\tif (tmxl(i) != neinf)\n\t\t\ttmxl(i) += v;\n\t\ttqll(i) += v;\n\t}\n\til void tagmax(int i, int v)\n\t{\n\t\tif (v <= mnl(i)) return;\n\t\tsuml(i) += (v - mnl(i)) * cmnl(i);\n\t\tmnl(i) = v;\n\t\ttmxl(i) = v;\n\t}\n\til void pushdown(int i, int l, int r)\n\t{\n\t\treg int sl = *(ls + i), sr = *(rs + i);\n\t\tif (tqll(i))\n\t\t{\n\t\t\ttagplus(sl, l, mid, tqll(i));\n\t\t\ttagplus(sr, mid + 1, r, tqll(i));\n\t\t\ttqll(i) = 0;\n\t\t}\n\t\tif (tmxl(i) != neinf)\n\t\t{\n\t\t\ttagmax(sl, tmxl(i));\n\t\t\ttagmax(sr, tmxl(i));\n\t\t\ttmxl(i) = neinf;\n\t\t}\n\t}\n\tvoid build(int i, int l, int r)\n\t{\n\t\tsmnl(i) = inf;\n\t\ttmxl(i) = neinf;\n\t\tclgl(i) = mnl(i) = cmnl(i) = tqll(i) = suml(i) = 0;\n\t\t++cnt;\n\t\tif (l == r) return;\n\t\tif (l <= mid)\n\t\t\tbuild((*(ls + i) = cnt + 1), l, mid);\n\t\tif (r > mid)\n\t\t\tbuild((*(rs + i) = cnt + 1), mid + 1, r);\n\t\tpushup(i);\n\t}\n\tvoid add(int i, int l, int r, int lt, int rt, int v)\n\t{\n\t\tif (lt > rt || !clgl(i)) return;\n\t\tif (l >= lt && r <= rt)\n\t\t{\n\t\t\ttagplus(i, l, r, v); return;\n\t\t}\n\t\tpushdown(i, l, r);\n\t\tif (mid >= lt)\n\t\t\tadd(ls[i], l, mid, lt, rt, v);\n\t\tif (mid < rt)\n\t\t\tadd(rs[i], mid + 1, r, lt, rt, v);\n\t\tpushup(i);\n\t}\n\tvoid modify(int i, int l, int r, int p, int v)\n\t{\n\t\tif (l == r)\n\t\t{\n\t\t\tmnl(i) = suml(i) = v;\n\t\t\tcmnl(i) = clgl(i) = 1;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(i, l, r);\n\t\tif (mid >= p)\n\t\t\tmodify(ls[i], l, mid, p, v);\n\t\tif (mid < p)\n\t\t\tmodify(rs[i], mid + 1, r, p, v);\n\t\tpushup(i);\n\t}\n\tvoid mmax(int i, int l, int r, int lt, int rt, int v)\n\t{\n\t\tif (lt > rt || !clgl(i)) return;\n\t\tif (v <= mnl(i)) return;\n\t\tif (l >= lt && r <= rt && v < smnl(i))\n\t\t{\n\t\t\ttagmax(i, v); return;\n\t\t}\n\t\tpushdown(i, l, r);\n\t\tif (mid >= lt)\n\t\t\tmmax(ls[i], l, mid, lt, rt, v);\n\t\tif (mid < rt)\n\t\t\tmmax(rs[i], mid + 1, r, lt, rt, v);\n\t\tpushup(i);\n\t}\n}\n\nnamespace SGTR\n{\n\tstruct node\n\t{\n\t\tint __v1, __v2, __v3, __v4, __v5;\n\t\tll __v6;\n\t\tint __v7;\n\t} tr[siz + 5];\n\tint ls[siz + 5], rs[siz + 5], cnt;\n\til void pushup(int i)\n\t{\n\t\treg int sl = *(ls + i), sr = *(rs + i);\n\t\tsumr(i) = sumr(sl) + sumr(sr);\n\t\tclgr(i) = clgr(sl) + clgr(sr);\n\t\tif (mxr(sl) == mxr(sr))\n\t\t{\n\t\t\tmxr(i) = mxr(sl);\n\t\t\tcmxr(i) = cmxr(sl) + cmxr(sr);\n\t\t\tsmxr(i) = umax(smxr(sl), smxr(sr));\n\t\t}\n\t\telse if (mxr(sl) > mxr(sr))\n\t\t{\n\t\t\tmxr(i) = mxr(sl);\n\t\t\tcmxr(i) = cmxr(sl);\n\t\t\tsmxr(i) = umax(smxr(sl), mxr(sr));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxr(i) = mxr(sr);\n\t\t\tcmxr(i) = cmxr(sr);\n\t\t\tsmxr(i) = umax(mxr(sl), smxr(sr));\n\t\t}\n\t}\n\til void tagplus(int i, int l, int r, int v)\n\t{\n\t\tsumr(i) += 1ll * clgr(i) * v;\n\t\tmxr(i) += v;\n\t\tif (smxr(i) != neinf)\n\t\t\tsmxr(i) += v;\n\t\tif (tmnr(i) != inf)\n\t\t\ttmnr(i) += v;\n\t\ttqlr(i) += v;\n\t}\n\til void tagmin(int i, int v)\n\t{\n\t\tif (v >= mxr(i)) return;\n\t\tsumr(i) -= (mxr(i) - v) * cmxr(i);\n\t\tmxr(i) = v;\n\t\ttmnr(i) = v;\n\t}\n\til void pushdown(int i, int l, int r)\n\t{\n\t\treg int sl = *(ls + i), sr = *(rs + i);\n\t\tif (tqlr(i))\n\t\t{\n\t\t\ttagplus(sl, l, mid, tqlr(i));\n\t\t\ttagplus(sr, mid + 1, r, tqlr(i));\n\t\t\ttqlr(i) = 0;\n\t\t}\n\t\tif (tmnr(i) != inf)\n\t\t{\n\t\t\ttagmin(sl, tmnr(i));\n\t\t\ttagmin(sr, tmnr(i));\n\t\t\ttmnr(i) = inf;\n\t\t}\n\t}\n\tvoid build(int i, int l, int r)\n\t{\n\t\tsmxr(i) = neinf;\n\t\ttmnr(i) = inf;\n\t\tclgr(i) = mxr(i) = cmxr(i) = tqlr(i) = sumr(i) = 0;\n\t\t++cnt;\n\t\tif (l == r) return;\n\t\tif (l <= mid)\n\t\t\tbuild((*(ls + i) = cnt + 1), l, mid);\n\t\tif (r > mid)\n\t\t\tbuild((*(rs + i) = cnt + 1), mid + 1, r);\n\t\tpushup(i);\n\t}\n\tvoid add(int i, int l, int r, int lt, int rt, int v)\n\t{\n\t\tif (lt > rt || !clgr(i)) return;\n\t\tif (l >= lt && r <= rt)\n\t\t{\n\t\t\ttagplus(i, l, r, v);\n\t\t\treturn;\n\t\t}\n\t\tpushdown(i, l, r);\n\t\tif (mid >= lt)\n\t\t\tadd(ls[i], l, mid, lt, rt, v);\n\t\tif (mid < rt)\n\t\t\tadd(rs[i], mid + 1, r, lt, rt, v);\n\t\tpushup(i);\n\t}\n\tvoid modify(int i, int l, int r, int p, int v)\n\t{\n\t\tif (l == r)\n\t\t{\n\t\t\tmxr(i) = sumr(i) = v;\n\t\t\tcmxr(i) = clgr(i) = 1;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(i, l, r);\n\t\tif (mid >= p)\n\t\t\tmodify(ls[i], l, mid, p, v);\n\t\tif (mid < p)\n\t\t\tmodify(rs[i], mid + 1, r, p, v);\n\t\tpushup(i);\n\t}\n\tvoid mmin(int i, int l, int r, int lt, int rt, int v)\n\t{\n\t\tif (lt > rt || !clgr(i)) return;\n\t\tif (v >= mxr(i)) return;\n\t\tif (l >= lt && r <= rt && v > smxr(i))\n\t\t{\n\t\t\ttagmin(i, v); return;\n\t\t}\n\t\tpushdown(i, l, r);\n\t\tif (mid >= lt)\n\t\t\tmmin(ls[i], l, mid, lt, rt, v);\n\t\tif (mid < rt)\n\t\t\tmmin(rs[i], mid + 1, r, lt, rt, v);\n\t\tpushup(i);\n\t}\n}\n\nnamespace SGTP\n{\n\tstruct node\n\t{\n\t\tint __v1, __v2;\n\t} tp[siz + 5];\n\tint ls[siz + 5], rs[siz + 5], cnt;\n\til void pushup(int i)\n\t{\n\t\treg int sl = *(ls + i), sr = *(rs + i);\n\t\tsump(i) = sump(sl) + sump(sr);\n\t}\n\tvoid build(int i, int l, int r)\n\t{\n\t\ttagp(i) = sump(i) = 0;\n\t\t++cnt;\n\t\tif (l == r)\n\t\t\treturn;\n\t\tif (l <= mid)\n\t\t\tbuild((*(ls + i) = cnt + 1), l, mid);\n\t\tif (r > mid)\n\t\t\tbuild((*(rs + i) = cnt + 1), mid + 1, r);\n\t\tpushup(i);\n\t}\n\tvoid add(int i, int l, int r, int lt, int rt, int v)\n\t{\n\t\tif (l >= lt && r <= rt) { tagp(i) += v; return; }\n\t\tif (mid >= lt)\n\t\t\tadd(ls[i], l, mid, lt, rt, v);\n\t\tif (mid < rt)\n\t\t\tadd(rs[i], mid + 1, r, lt, rt, v);\n\t\tpushup(i);\n\t}\n\tint query(int i, int l, int r, int p)\n\t{\n\t\tif (l == r) { return sump(i) + tagp(i); }\n\t\tif (mid >= p)\n\t\t\treturn query(ls[i], l, mid, p) + tagp(i);\n\t\tif (mid < p)\n\t\t\treturn query(rs[i], mid + 1, r, p) + tagp(i);\n\t\treturn 0;\n\t}\n}\n\nint main()\n{\n\tn = rd();\n\tSGTL::build(1, 1, n);\n\tSGTR::build(1, 1, n);\n\tSGTP::build(1, 1, n);\n\tSGTP::add(1, 1, n, 1, n, 1);\n\tfor (int i = 1; i <= n; ++i) a[i] = rd(), rf[a[i]] = i;\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\treg int rfc = *(rf + i), pos;\n\t\tSGTP::add(1, 1, n, rfc + 1, n, 1);\n\t\tpos = SGTP::query(1, 1, n, rfc);\n\t\tSGTL::modify(1, 1, n, rfc, 1);\n\t\tSGTR::modify(1, 1, n, rfc, i);\n\t\tSGTR::mmin(1, 1, n, 1, rfc - 1, pos - 1);\n\t\tSGTL::add(1, 1, n, rfc + 1, n, 1);\n\t\tSGTR::add(1, 1, n, rfc + 1, n, 1);\n\t\tSGTL::mmax(1, 1, n, rfc + 1, n, pos + 1);\n\t\tprt(sumr(1) - suml(1) + i, '\\n');\n\t}\n}\n```\n\n\u7279\u522b\u63d0\u9192\uff1a\u5b8f\u5b9a\u4e49\u5c5e\u4e8e\u9884\u5904\u7406\u8bed\u53e5\uff0c\u5b83**\u4e0d\u533a\u5206 `namespace` **\uff0c\u65e0\u89c6\u751f\u547d\u57df\u3002`SGTL::sum(balabala)` \u4e4b\u7c7b\u7684\u90fd\u662f\u4f1a `CE` \u7684\u3002\n\n~~\u8bdd\u8bf4\u4e3a\u5565 Dev-C++ \u7684 AStyle \u4e0d\u4f1a\u8c03\u6574\u5b8f\u5b9a\u4e49\u7684\u683c\u5f0f\u554a\u3002~~",
        "postTime": 1608795897,
        "uid": 224991,
        "name": "Presentation_Emitter",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1290E \u3010Cartesian Tree \u3011"
    }
]