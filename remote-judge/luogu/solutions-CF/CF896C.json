[
    {
        "content": "## 0x00 \u524d\u8a00\n\n\u4e8b\u60c5\u662f\u8fd9\u6837\u7684\uff0c\u6709\u4e00\u5929\uff0c\u6559\u7ec3\u7fa4\u91cc\u9762\u8ba8\u8bba\u8fd9\u9053\u9898\uff0c\u6211\u8bf4\u8fd9\u9053\u9898\u6392\u540d\u524d $10$ \u7684\u9898\u89e3\u91cc\u9762\uff0c\u6709 $7$ \u4e2a\u90fd\u662f\u9519\u7684\uff0c\u6211\u6253\u7b97\u5199\u4e00\u4e2a\u5bf9\u7684\uff0c\u907f\u514d\u540c\u5b66\u4eec\u88ab\u8bef\u5bfc\u3002\u8fd9\u65f6\u5019\uff0c\u7fa4\u91cc\u7684 lxl \u9ed8\u9ed8\u7684\u6765\u4e86\u4e00\u53e5\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9vd7ykl9.png)\n\n\u597d\u7684\uff0c\u65e2\u7136\u662f lxl \u5927\u795e\u51fa\u7684\u9898\uff0c\u6211\u5c31\u66f4\u6709\u5fc5\u8981\u5199\u4e00\u7bc7\u6b63\u786e\u7684\u9898\u89e3\uff0c\u6765\u8868\u8fbe\u6211\u5bf9\u4ed6\u7684\u819c\u62dc\u4e86\u3002\n\n## 0x01 \u4e3a\u4ec0\u4e48\u5f88\u591a\u9898\u89e3\u4e0d\u5bf9\uff0c\u7167\u7740\u5199\u4f1aRE\n\u56e0\u4e3a\u5982\u679c\u8981\u7528 `split` \u64cd\u4f5c\uff0c\u622a\u53d6\u4e00\u6bb5\u533a\u95f4\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u8981\u5148 `split(r+1)` \uff0c\u518d `split(l)` \uff0c\u5426\u5219\u4f1a\u6709 RE \uff0c\u5177\u4f53\u539f\u56e0\u6211\u540e\u9762\u4f1a\u7ec6\u8bf4\u3002\u8bf7\u5927\u5bb6\u53c2\u8003\u5176\u4ed6\u9898\u89e3\u6216\u8005\u8d44\u6599\u7684\u65f6\u5019\uff0c\u4e5f\u6ce8\u610f\u8fd9\u4e00\u70b9\u3002\n\n## 0x02 \u4ec0\u4e48\u662f\u73c2\u6735\u8389\u6811\n\n\u73c2\u6735\u8389\u6811\uff0c\u8fd8\u6709\u4e2a\u540d\u5b57\u53eb\u8001\u53f8\u673a\u6811\uff08Old Driver Tree, ODT\uff09\uff0c\u662f\u4e00\u4e2a\u66b4\u529b\u6570\u636e\u7ed3\u6784\u3002\u751a\u81f3\u90fd\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5c06\u5176\u79f0\u4e4b\u4e3a\u6570\u636e\u7ed3\u6784\u4e86\uff0c\u6211\u4eec\u4e0d\u59a8\u8ba4\u4e3a\u5b83\u662f\u4e00\u7c7b\u9898\u76ee\u7684\u66b4\u529b\u505a\u6cd5\uff0c\u5bf9\u4e8e\u968f\u673a\u6570\u636e\u6bd4\u8f83\u6709\u6548\u3002\n\n## 0x03 \u73c2\u6735\u8389\u6811\u53ef\u4ee5\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\n\n\u6709\u4e00\u7c7b\u95ee\u9898\uff0c\u5bf9\u4e00\u4e2a\u5e8f\u5217\uff0c\u8fdb\u884c\u4e00\u4e2a**\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c**\u3002\u5c31\u662f\u628a\u4e00\u4e2a\u8303\u56f4\u5185\uff0c\u6bd4\u5982 $[l,r]$ \u8303\u56f4\u5185\u7684\u6570\u5b57\u53d8\u6210\u540c\u4e00\u4e2a\u3002\u53ef\u80fd\u9664\u4e86\u63a8\u5e73\u4ee5\u5916\uff0c\u8fd8\u5939\u6742\u5176\u4ed6\u64cd\u4f5c\u3002\u5982\u679c\u6570\u636e\u662f\u968f\u673a\u7684\uff0c\u5c31\u53ef\u4ee5\u7528\u73c2\u6735\u8389\u6811\u5566\u3002\u6bd4\u5982\u8fd9\u9053\u9898\u4e2d\u7684\u64cd\u4f5c $2$ \uff0c\u5c06 $[l,r]$ \u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u90fd\u6539\u6210 $x$ \uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\u3002\n\n## 0x04 \u73c2\u6735\u8389\u6811\u7684\u57fa\u672c\u539f\u7406\n\u66b4\u529b\u7684\u5730\u65b9\u6765\u55bd\uff0c\u521a\u624d\u4e0d\u662f\u63d0\u5230\u6709\u63a8\u5e73\u64cd\u4f5c\u4e48\uff1f\u90a3\u4e48\u63a8\u5e73\u64cd\u4f5c\u7ed3\u675f\u4ee5\u540e\uff0c\u88ab\u63a8\u5e73\u7684\u533a\u95f4\u5185\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u662f\u76f8\u540c\u7684\u3002\u5176\u5b9e\u7ecf\u8fc7\u82e5\u5e72\u6b21\u63a8\u5e73\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u6210\uff0c\u8fd9\u4e2a\u5e8f\u5217\u4e0a\u7684\u6570\u5b57\u662f\u4e00\u6bb5\u4e00\u6bb5\u7684\uff0c\u6bcf\u4e00\u5c0f\u6bb5\u91cc\u9762\u6570\u5b57\u76f8\u540c\uff0c\u6574\u4e2a\u533a\u95f4\u7531\u82e5\u5e72\u4e2a\u5c0f\u6bb5\u7ec4\u6210\u3002\u7c7b\u4f3c\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/k4fik6l0.png)\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u6765\u8868\u793a\u6bcf\u4e2a\u6570\u5b57\u76f8\u540c\u7684\u6bb5\u3002\n\n```cpp\nstruct Node {\n    ll l, r;//l\u548cr\u8868\u793a\u8fd9\u4e00\u6bb5\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\n    mutable ll v;//v\u8868\u793a\u8fd9\u4e00\u6bb5\u4e0a\u6240\u6709\u5143\u7d20\u76f8\u540c\u7684\u503c\u662f\u591a\u5c11\n\n    Node(ll l, ll r = 0, ll v = 0) : l(l), r(r), v(v) {}\n\n    bool operator<(const Node &a) const {\n        return l < a.l;//\u89c4\u5b9a\u6309\u7167\u6bcf\u6bb5\u7684\u5de6\u7aef\u70b9\u6392\u5e8f\n    }\n};\n```\n\n\u76f8\u5173\u53d8\u91cf\u7684\u542b\u4e49\uff0c\u6ce8\u91ca\u91cc\u9762\u5df2\u7ecf\u89e3\u91ca\u4e86\u3002\u8fd9\u91cc\u6709\u4e2a\u7ec6\u8282\u662f\uff0c `v` \u53d8\u91cf\u524d\u9762\u52a0\u4e2a\u4e86 `mutable` \u5173\u952e\u5b57\u3002 `mutable` \u7684\u610f\u601d\u662f\uff0c\u5373\u4f7f\u5b83\u662f\u4e2a\u5e38\u91cf\uff0c\u4e5f\u5141\u8bb8\u4fee\u6539v\u7684\u503c\uff0c\u5177\u4f53\u6211\u5728\u4e0b\u9762\u533a\u95f4\u4fee\u6539\u7684\u5730\u65b9\u89e3\u91ca\u3002\n\n\u5f53\u6bcf\u4e2a\u6570\u5b57\u76f8\u540c\u7684\u533a\u95f4\u90fd\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\u8868\u793a\u4ee5\u540e\uff0c\u6211\u4eec\u628a\u8fd9\u56db\u6bb5\u63d2\u5165\u5230\u4e00\u4e2a `set` \u91cc\u9762\uff0c `set` \u4f1a\u6309\u7167\u6bcf\u6bb5\u7684\u5de6\u7aef\u70b9\u987a\u5e8f\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u6837\u8fd9\u4e2a\u5e8f\u5217\u5c31\u7ef4\u62a4\u597d\u4e86\uff0c\u7c7b\u4f3c\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/nd7klccn.png)\n\n\u5f53\u7136\uff0c\u5bf9\u4e8e\u672c\u9898\uff0c\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6bcf\u6bb5\u90fd\u53ea\u6709\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u7684set\u91cc\u9762\u7ef4\u62a4n\u4e2a\u957f\u5ea6\u4e3a1\u7684\u6bb5\u3002\n\n## 0x05 \u6838\u5fc3\u64cd\u4f5c `split`\n\u5929\u4e0b\u5927\u52bf\uff0c\u5206\u4e45\u5fc5\u5408\uff0c\u5408\u4e45\u5fc5\u5206\uff0c\u73c2\u6735\u8389\u6811\u4e5f\u4e00\u6837\u3002\u968f\u7740\u63a8\u5e73\u64cd\u4f5c\u7684\u8fdb\u884c\uff0c\u6709\u4e00\u4e9b\u4f4d\u7f6e\u88ab\u5408\u5e76\u5230\u4e86\u4e00\u4e2a `Node` \u91cc\u9762\uff0c\u4f46\u662f\u4e5f\u6709\u53ef\u80fd\u4e00\u4e2a `Node` \u8981\u88ab\u62c6\u5f00\uff0c\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u8981\u88ab\u6539\u53d8\u503c\u3002\n\n`split` \u64cd\u4f5c\u5c31\u662f\u5e72\u8fd9\u4e2a\u7528\u7684\uff0c\u53c2\u6570\u662f\u4e00\u4e2a\u4f4d\u7f6e `pos` \uff0c\u4ee5 `pos` \u53bb\u505a\u5207\u5272\uff0c\u627e\u5230\u4e00\u4e2a\u5305\u542b `pos` \u7684\u533a\u95f4\uff0c\u628a\u5b83\u5206\u6210 `[l,pos-1]` , `[pos,r]` \u4e24\u534a\u3002\u5f53\u7136\uff0c\u5982\u679c `pos` \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u7684\u5f00\u5934\uff0c\u5c31\u4e0d\u7528\u5207\u5272\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u533a\u95f4\u3002\n\n\u5148\u770b\u4ee3\u7801\n\n```cpp\nset<Node>::iterator split(int pos) {\n    set<Node>::iterator it = s.lower_bound(Node(pos));\n    if (it != s.end() && it->l == pos) {\n        return it;\n    }\n    it--;\n    if (it->r < pos) return s.end();\n    ll l = it->l;\n    ll r = it->r;\n    ll v = it->v;\n    s.erase(it);\n    s.insert(Node(l, pos - 1, v));\n    //insert\u51fd\u6570\u8fd4\u56depair\uff0c\u5176\u4e2d\u7684first\u662f\u65b0\u63d2\u5165\u7ed3\u70b9\u7684\u8fed\u4ee3\u5668\n    return s.insert(Node(pos, r, v)).first;\n}\n```\n\n\u9996\u5148\uff0c\u7b2c\u4e00\u884c\u91cc\u9762\u7684 `s` \u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u662f\u90a3\u4e2a\u88c5 `node` \u7684 `set` \u3002\u5927\u5bb6\u77e5\u9053 `set` \u91cc\u9762\u6709\u4e2a\u51fd\u6570\u53eb `lower_bound` \uff0c\u5b83\u7684\u4f5c\u7528\u662f\u8fd4\u56de\u8ddf\u53c2\u6570\u76f8\u7b49\u7684\uff0c\u6216\u8005\u6bd4\u53c2\u6570\u66f4\u5927\u7684\u7b2c\u4e00\u4e2a `set` \u4e2d\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6309\u7167 `pos` \u521b\u5efa\u4e00\u4e2a `node` \uff0c\u7136\u540e\u53bb\u67e5\u8be2\uff0c\u5c31\u627e\u5230\u4e86 `it` \u8fd9\u4e2a\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u65f6\u5019\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u6211\u4eec\u6b63\u597d\u627e\u5230\u4e86\u4e00\u4e2a\u533a\u95f4\uff0c\u5b83\u662f\u4ee5 `pos` \u5f00\u5934\u7684\uff0c\u6240\u4ee5\u5c31\u5bf9\u5e94\u4e86\u4ee3\u7801\u4e2d\u7684\u7b2c\u4e00\u4e2a `if` \u5224\u65ad\uff0c\u8fd9\u65f6\u5019\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u533a\u95f4\u7684\u8fed\u4ee3\u5668 `it`\u3002\n\n\u8fd8\u6709\u4e24\u79cd\u60c5\u51b5\u662f\uff0c\u6211\u4eec\u627e\u5230\u7684\u8fd9\u4e2a\u533a\u95f4\u662f\u6b63\u597d\u6bd4\u5305\u542b `pos` \u7684\u533a\u95f4\u5927\u4e00\u70b9\u70b9\u7684\uff0c\u6216\u8005`pos`\u592a\u5927\u4e86\uff0c\u8d85\u8fc7\u4e86\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u3002\u4e0d\u7ba1\u600e\u6837\u5148\u628a`it`\u5f80\u524d\u632a\u4e00\u4e2a\u683c\uff0c\u7136\u540e\u8fd9\u65f6\u5019\u770b\u770b`it`\u7684\u53f3\u7aef\u70b9\uff0c\u5982\u679c\u6bd4`pos`\u5c0f\uff0c\u8bf4\u660e\u662f`pos`\u592a\u5927\u4e86\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de`s`\u7684`end()`\u8fed\u4ee3\u5668\u3002\u5426\u5219\u7684\u8bdd\uff0c\u73b0\u5728`it`\u5c31\u662f\u5e94\u8be5\u5305\u542b\u4e86`pos`\u7684\u90a3\u4e2a\u533a\u95f4\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u8981\u628a\u5b83\u4e00\u5206\u4e3a\u4e8c\uff0c\u628a\u539f\u6765\u7684\u90a3\u4e2a\u533a\u95f4\u5220\u6389\uff0c\u7136\u540e\u63d2\u5165\u4e24\u4e2a\u65b0\u533a\u95f4\uff0c\u5206\u522b\u662f`[l,pos-1]`\u548c`[pos,r]`\u3002\n\n\u8fd9\u91cc\u8fd8\u6709\u4e2a\u5c0f\u6280\u5de7\uff0c`insert`\u8fd9\u4e2a\u51fd\u6570\u662f\u6709\u8fd4\u56de\u503c\u7684\uff0c\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a`pair`\uff0c`pair`\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u6b63\u597d\u662f\u65b0\u63d2\u5165\u7684\u90a3\u4e2a`node`\u7684\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5`return`\u90a3\u4e2a\u4e1c\u897f\u5c31\u884c\u4e86\u3002\n\n## 0x06 \u63a8\u5e73\u64cd\u4f5c`assign`\n\u521a\u521a\u7684`split`\u4f5c\u7528\u662f\u5206\uff0c\u73b0\u5728\u8fd8\u9700\u8981\u4e00\u4e2a\u76f8\u53cd\u7684\u64cd\u4f5c\uff0c\u5c31\u662f\u5408\u5e76\u3002\u5f53\u51fa\u73b0\u5bf9\u533a\u95f4\u7684\u63a8\u5e73\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6574\u4e2a`set`\u4e2d\u6240\u6709\u8981\u88ab\u5408\u5e76\u6389\u7684`node`\u90fd\u5220\u6389\uff0c\u7136\u540e\u63d2\u5165\u4e00\u4e2a\u65b0\u533a\u95f4\u8868\u793a\u63a8\u5e73\u4ee5\u540e\u7684\u7ed3\u679c\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/y63fx4wt.png)\n\n\u5982\u56fe\uff0c\u6309\u7167\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c`set`\u91cc\u9762\u6709$4$\u4e2a`node`\uff0c\u6b64\u65f6\u6211\u4eec\u60f3\u8fdb\u884c\u4e00\u6b21\u63a8\u5e73\u64cd\u4f5c\uff0c\u628a`[2,8]`\u533a\u95f4\u5185\u7684\u5143\u7d20\u90fd\u6539\u6210$666$.\u9996\u5148\u6211\u4eec\u53d1\u73b0\uff0c`[8,10]`\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u90a3\u4e48\u9700\u8981\u5148`split(9)`\uff0c\u628a`[8,8]`\u548c`[9,10]`\u62c6\u6210\u4e24\u4e2a\u533a\u95f4\u3002\u540c\u7406\uff0c\u539f\u6765\u7684`[1,2]`\u533a\u95f4\uff0c\u4e5f\u9700\u8981\u62c6\u6210`[1,1]`\u548c`[2,2]`\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a\u8981\u88ab\u5408\u5e76\u7684\u4ece$2$\u5230$8$\u7684\u6240\u6709`node`\u90fd\u4ece`set`\u91cc\u9762\u5220\u6389\uff0c\u518d\u91cd\u65b0\u63d2\u5165\u4e00\u4e2a`[2,8]`\u533a\u95f4\u5c31\u884c\u4e86\u3002\u5220\u9664\u67d0\u4e2a\u8303\u56f4\u5185\u7684\u5143\u7d20\u53ef\u4ee5\u7528`set`\u7684`erase`\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u8fed\u4ee3\u5668`s`\u548c`t`\uff0c\u628a`[s,t)`\u8303\u56f4\u5185\u7684\u4e1c\u897f\u90fd\u5220\u6389\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nvoid assign(ll l, ll r, ll x) {\n    set<Node>::iterator itr = split(r + 1), itl = split(l);\n    s.erase(itl, itr);\n    s.insert(Node(l, r, x));\n}\n```\n\n## 0x07 \u63a8\u5e73\u64cd\u4f5c\u91cc\u9762RE\u7684\u5751\n\n\u73b0\u5728\u8bf4\u4e00\u4e0b\u4e3a\u5565\u5927\u90e8\u5206\u9898\u89e3\u90fd\u4e0d\u5bf9\uff0c\u6ce8\u610f\u521a\u521a`assign`\u51fd\u6570\u91cc\u9762\u8c03\u7528\u7684\u90a3\u4e24\u6b21`split`\uff0c\u6211\u662f\u5148`split(r+1)`\uff0c\u8ba1\u7b97\u51fa`itr`\uff0c\u7136\u540e\u518d`split(l)`\uff0c\u8ba1\u7b97`itl`\u7684\u3002**\u8fd9\u4e2a\u987a\u5e8f\u4e0d\u80fd\u53cd**\u3002\n\n\u4e3a\u5565\u4e0d\u80fd\u53cd\uff1f\u4e3e\u4e2a\u5177\u4f53\u4f8b\u5b50\uff0c\u6bd4\u5982\u73b0\u5728\u6709\u4e2a\u533a\u95f4\u662f`[1,4]`\uff0c\u6211\u4eec\u60f3\u4ece\u91cc\u9762\u622a\u53d6`[1,1]`\u51fa\u6765\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u8c03\u7528\u4e24\u6b21`split`\uff0c\u5206\u522b\u662f`split(2)`\u548c`split(1)`\u3002\n\n\u5047\u8bbe\u5148\u8c03\u7528`split(1)`\uff0c\u5982\u56fe\u4e2d\u95f4\u7684\u7ed3\u679c\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/igxn8u1h.png)\n\n\u73b0\u5728\u7684`itl`\u6307\u5411\u7684\u8fd8\u662f\u539f\u6765\u7684\u90a3\u4e2a`node`\uff0c\u6ca1\u6709\u4ec0\u4e48\u53d8\u5316\u3002\u4f46\u662f\u5f53\u6211\u4eec\u540e\u7eed\u8c03\u7528`itr`\u7684\u65f6\u5019\uff0c\u51fa\u4e8b\u513f\u4e86\u3002\u56e0\u4e3a\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u628a\u539f\u6765\u7684`[1,4]`\u533a\u95f4\u5220\u6389\u4e86\uff0c\u62c6\u6210\u4e86\u4e24\u4efd\uff0c`itr`\u6307\u5411\u7684\u662f\u540e\u9762\u90a3\u4e2a\uff0c\u4f46\u662f\u539f\u6765`itl`\u6307\u5411\u7684\u90a3\u4e2a\u5df2\u7ecf\u88ab`erase`\u6389\u4e86\u3002\u8fd9\u65f6\u5019\u7528`itl`\u548c`itr`\u8c03\u7528`s.erase`\u7684\u65f6\u5019\u5c31\u4f1a\u51fa\u95ee\u9898\uff0c\u76f4\u63a5RE\u3002\n\n\u6709\u540c\u5b66\u8bf4\u6211\u987a\u5e8f\u53cd\u4e86\u6ca1RE\u554a\uff0c\u4e5fAC\u3002\u606d\u559c\u4f60\uff0c\u4f60\u4eba\u54c1\u597d\u3002\u8fd9\u4e1c\u897f\u7406\u8bba\u4e0a\u4f1aRE\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6982\u7387\u4e0d\u5927\uff0c\u6211\u5bf9\u62cd\u4e86\u4e00\u4e0b\uff0c\u5927\u69821%\u7684\u6982\u7387RE\u5427\u3002\u4f46\u662f\u4eba\u54c1\u4e0d\u597d\u7684\u540c\u5b66\uff0c\u53ef\u80fd\u4e0a\u6765\u5c31RE\u4e00\u7247\uff0c\u800c\u4e14\u662f\u968f\u673aRE\uff0c\u540c\u4e00\u4e2a\u6570\u636e\uff0c\u4e00\u4f1a\u513f\u80fd\u8fc7\uff0c\u4e00\u4f1a\u513f\u8fc7\u4e0d\u4e86\u3002\u6240\u4ee5\uff0c\u8fd8\u662f\u522b\u7ed9\u81ea\u5df1\u627e\u9ebb\u70e6\u4e86\u3002\n\n## 0x08 \u4fee\u6539\u64cd\u4f5c`add`\n\u533a\u95f4\u5185\u6bcf\u4e2a\u6570\u90fd\u52a0\u4e0a`x`\uff0c\u8fd9\u4e2a\u5b9e\u73b0\u65b9\u5f0f\u548c\u524d\u9762\u7684\u63a8\u5e73\u5dee\u4e0d\u591a\uff0c\u6211\u4eec\u8fd8\u662f\u627e\u5230\u8fd9\u4e2a\u533a\u95f4\u7684\u9996\u5c3e\uff0c\u7136\u540e\u5faa\u73af\u4e00\u904d\u533a\u95f4\u5185\u7684\u6bcf\u4e2a`node`\uff0c\u628a\u6bcf\u4e2a`node`\u7684`v`\u90fd\u52a0\u4e0a`x`\u5c31\u884c\n```cpp\nvoid add(ll l, ll r, ll x) {\n    set<Node>::iterator itr = split(r + 1), itl = split(l);\n    for (set<Node>::iterator it = itl; it != itr; ++it) {\n        it->v += x;\n    }\n}\n```\n\n\u8fd9\u91cc\u662f\u7528\u4e00\u4e2a\u8fed\u4ee3\u5668`it`\u904d\u5386\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u628a\u6bcf\u4e2a\u4f4d\u7f6e\u7684`v`\u90fd\u52a0`x`\u3002\u5927\u5bb6\u53d1\u73b0\u524d\u9762\u63d0\u5230\u7684`mutable`\u7684\u4f5c\u7528\u4e86\u4e48\uff1f\u56e0\u4e3a\u8fd9\u91cc`it`\u662f\u4e2a\u5e38\u91cf\u8fed\u4ee3\u5668\uff0c\u5b83\u4e0d\u80fd\u4fee\u6539\u5b83\u6307\u5411\u7684\u90a3\u4e2a`node`\uff0c\u800c\u6211\u4eec\u8fd9\u91cc\u8981\u6539`node`\u91cc\u9762\u7684`v`\uff0c\u6240\u4ee5\u5c31\u628a`v`\u58f0\u660e\u4e3a`mutable`\uff0c\u5c31\u53ef\u4ee5\u6539\u4e86\u3002\u5426\u5219\u4f1a\u5f97\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u7f16\u8bd1\u9519\u8bef\uff1a\n`error: cannot assign to return value\n      because function 'operator->' returns a const value`\n      \n## 0x09 \u5176\u4ed6\u64cd\u4f5c\n\u5176\u4ed6\u64cd\u4f5c\u90fd\u662f\u7c7b\u4f3c\u7684\u66b4\u529b\u64cd\u4f5c\u3002\u6bd4\u5982\u8981\u627e\u533a\u95f4\u7b2c$k$\u5c0f\uff0c\u90a3\u4e48\u5c31\u628a\u533a\u95f4\u5185\u6240\u6709\u7684`node`\u62ff\u51fa\u6765\uff0c\u6309\u7167`v`\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u628a\u6bcf\u4e2a`node`\u91cc\u9762\u7684\u533a\u95f4\u957f\u5ea6\u76f8\u52a0\uff0c\u770b\u770b\u5565\u65f6\u5019\u52a0\u591f\u4e3a\u6b62\u3002\u8fd9\u91cc\u5c31\u4e0d\u7ec6\u81f4\u5c55\u5f00\uff0c\u6709\u95ee\u9898\u53ef\u4ee5\u53bb\u770b\u4ee3\u7801\u3002\n\n## 0x0A \u590d\u6742\u5ea6\n\u56e0\u4e3a\u672c\u9898\u6570\u636e\u662f\u968f\u673a\u7684\uff0c\u6240\u4ee5\u6bcf\u6b21`assign`\u64cd\u4f5c\u7684\u533a\u95f4\u957f\u5ea6\u5927\u6982\u5728$vmax/3$\uff0c\u6240\u4ee5\u7ecf\u8fc7\u5f88\u591a\u6b21`assign`\u4ee5\u540e\uff0c\u533a\u95f4\u4e2a\u6570\u4e0d\u4f1a\u592a\u591a\uff0c\u5927\u6982\u5728`log`\u8fd9\u4e2a\u6570\u91cf\u7ea7\u4e0a\u3002\u8fd9\u6837\u6bcf\u6b21\u66b4\u529b\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u5dee\u4e0d\u591a\u4e5f\u662f\u8fd9\u4e2a\u6570\u91cf\u7ea7\u3002\u8be6\u7ec6\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u535a\u5ba2\uff1a\n\nhttps://www.luogu.com.cn/blog/blaze/solution-cf896c\n\n## 0x0B \u4ee3\u7801\u65f6\u95f4\n\n```cpp\n#include <iostream>\n#include <set>\n#include <algorithm>\n#include <vector>\n#include <cstdio>\n\nusing namespace std;\n\ntypedef long long ll;\nconst ll MOD = 1000000007;\nconst ll MAXN = 100005;\n\nstruct Node {\n    ll l, r;//l\u548cr\u8868\u793a\u8fd9\u4e00\u6bb5\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\n    mutable ll v;//v\u8868\u793a\u8fd9\u4e00\u6bb5\u4e0a\u6240\u6709\u5143\u7d20\u76f8\u540c\u7684\u503c\u662f\u591a\u5c11\n\n    Node(ll l, ll r = 0, ll v = 0) : l(l), r(r), v(v) {}\n\n    bool operator<(const Node &a) const {\n        return l < a.l;//\u89c4\u5b9a\u6309\u7167\u6bcf\u6bb5\u7684\u5de6\u7aef\u70b9\u6392\u5e8f\n    }\n};\n\nll n, m, seed, vmax, a[MAXN];\nset<Node> s;\n\n//\u4ee5pos\u53bb\u505a\u5207\u5272\uff0c\u627e\u5230\u4e00\u4e2a\u5305\u542bpos\u7684\u533a\u95f4\uff0c\u628a\u5b83\u5206\u6210[l,pos-1],[pos,r]\u4e24\u534a\nset<Node>::iterator split(int pos) {\n    set<Node>::iterator it = s.lower_bound(Node(pos));\n    if (it != s.end() && it->l == pos) {\n        return it;\n    }\n    it--;\n    if (it->r < pos) return s.end();\n    ll l = it->l;\n    ll r = it->r;\n    ll v = it->v;\n    s.erase(it);\n    s.insert(Node(l, pos - 1, v));\n    //insert\u51fd\u6570\u8fd4\u56depair\uff0c\u5176\u4e2d\u7684first\u662f\u65b0\u63d2\u5165\u7ed3\u70b9\u7684\u8fed\u4ee3\u5668\n    return s.insert(Node(pos, r, v)).first;\n}\n\n/*\n * \u8fd9\u91cc\u6ce8\u610f\u5fc5\u987b\u5148\u8ba1\u7b97itr\u3002\n * \u6bd4\u5982\u73b0\u5728\u533a\u95f4\u662f[1,4]\uff0c\u5982\u679c\u8981add\u7684\u662f[1,2],\u5982\u679c\u5148split(1)\n * \u90a3\u4e48\u8fd4\u56de\u7684itl\u662f[1,4]\uff0c\u4f46\u662f\u4e0b\u4e00\u6b65\u8ba1\u7b97itr\u7684\u65f6\u5019\u4f1a\u628a\u8fd9\u4e2a\u533a\u95f4\u5220\u6389\u62c6\u6210[1,2]\u548c[3,4]\n * \u90a3\u4e48itl\u8fd9\u4e2a\u6307\u9488\u5c31\u88ab\u91ca\u653e\u4e86\n * */\nvoid add(ll l, ll r, ll x) {\n    set<Node>::iterator itr = split(r + 1), itl = split(l);\n    for (set<Node>::iterator it = itl; it != itr; ++it) {\n        it->v += x;\n    }\n}\n\nvoid assign(ll l, ll r, ll x) {\n    set<Node>::iterator itr = split(r + 1), itl = split(l);\n    s.erase(itl, itr);\n    s.insert(Node(l, r, x));\n}\n\nstruct Rank {\n    ll num, cnt;\n\n    bool operator<(const Rank &a) const {\n        return num < a.num;\n    }\n\n    Rank(ll num, ll cnt) : num(num), cnt(cnt) {}\n};\n\nll rnk(ll l, ll r, ll x) {\n    set<Node>::iterator itr = split(r + 1), itl = split(l);\n    vector<Rank> v;\n    for (set<Node>::iterator i = itl; i != itr; ++i) {\n        v.push_back(Rank(i->v, i->r - i->l + 1));\n    }\n    sort(v.begin(), v.end());\n    int i;\n    for (i = 0; i < v.size(); ++i) {\n        if (v[i].cnt < x) {\n            x -= v[i].cnt;\n        } else {\n            break;\n        }\n    }\n    return v[i].num;\n}\n\nll ksm(ll x, ll y, ll p) {\n    ll r = 1;\n    ll base = x % p;\n    while (y) {\n        if (y & 1) {\n            r = r * base % p;\n        }\n        base = base * base % p;\n        y >>= 1;\n    }\n    return r;\n}\n\nll calP(ll l, ll r, ll x, ll y) {\n    set<Node>::iterator itr = split(r + 1), itl = split(l);\n    ll ans = 0;\n    for (set<Node>::iterator i = itl; i != itr; ++i) {\n        ans = (ans + ksm(i->v, x, y) * (i->r - i->l + 1) % y) % y;\n    }\n    return ans;\n}\n\nll rnd() {\n    ll ret = seed;\n    seed = (seed * 7 + 13) % MOD;\n    return ret;\n}\n\nint main() {\n    cin >> n >> m >> seed >> vmax;\n    for (int i = 1; i <= n; ++i) {\n        a[i] = (rnd() % vmax) + 1;\n        s.insert(Node(i, i, a[i]));\n    }\n    for (int i = 1; i <= m; ++i) {\n        ll op, l, r, x, y;\n        op = (rnd() % 4) + 1;\n        l = (rnd() % n) + 1;\n        r = (rnd() % n) + 1;\n        if (l > r) swap(l, r);\n        if (op == 3) {\n            x = (rnd() % (r - l + 1)) + 1;\n        } else {\n            x = (rnd() % vmax) + 1;\n        }\n        if (op == 4) {\n            y = (rnd() % vmax) + 1;\n        }\n        if (op == 1) {\n            add(l, r, x);\n        } else if (op == 2) {\n            assign(l, r, x);\n        } else if (op == 3) {\n            cout << rnk(l, r, x) << endl;\n        } else {\n            cout << calP(l, r, x, y) << endl;\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1624434325,
        "uid": 43206,
        "name": "\u6ce5\u571f\u7b28\u7b28",
        "ccfLevel": 0,
        "title": "\u73c2\u6735\u8389\u6811\u6a21\u677fCF896C Willem, Chtholly and Seniorious\u9898\u89e3"
    },
    {
        "content": "\u73c2\u6735\u8389\u6811\u6a21\u677f\u9898\u3002\n\n## \u4e00\u3001\u4ec0\u4e48\u662f\u73c2\u6735\u8389\u6811\n\n\u73c2\u6735\u8389\u6811\uff0c\u53c8\u79f0Old Driver Tree(ODT)\u3002\u662f\u4e00\u79cd\u57fa\u4e8e```std::set```\u7684\u66b4\u529b\u6570\u636e\u7ed3\u6784\u3002B\u7ad9\u4e0a\u6709UESTC\u7684[\u8bb2\u89e3\u89c6\u9891](https://www.bilibili.com/video/av21651173)\u3002\n\n## \u4e8c\u3001\u4ec0\u4e48\u65f6\u5019\u7528\u73c2\u6735\u8389\u6811\n\n\u5173\u952e\u64cd\u4f5c\uff1a\u63a8\u5e73\u4e00\u6bb5\u533a\u95f4\uff0c\u4f7f\u4e00\u6574\u6bb5\u533a\u95f4\u5185\u7684\u4e1c\u897f\u53d8\u5f97\u4e00\u6837\u3002\u4fdd\u8bc1\u6570\u636e\u968f\u673a\u3002\n\n\u5c31\u50cf\u8fd9\u9053\u9898\u3002\n\n$n$\u4e2a\u6570\uff0c$m$\u6b21\u64cd\u4f5c$(n,m\\leq10^5)$\u3002\n\n\u64cd\u4f5c\uff1a\n\n1. \u533a\u95f4\u52a0\n2.  **\u533a\u95f4\u8d4b\u503c**\n3. \u533a\u95f4\u7b2ck\u5c0f\n4. \u6c42\u533a\u95f4\u5e42\u6b21\u548c\n\n**\u6570\u636e\u968f\u673a**\uff0c\u65f6\u96502s\u3002\n\n## \u4e09\u3001\u73c2\u6735\u8389\u6811\u7684\u521d\u59cb\u5316\n\n\u8fd9\u9053\u9898\u91cc\uff0c\u8fd9\u6837\u5b9a\u4e49\u73c2\u6735\u8389\u6811\u7684\u8282\u70b9\uff1a\n```\nstruct node\n{\n\tint l,r;\n\tmutable LL v;\n\tnode(int L, int R=-1, LL V=0):l(L), r(R), v(V) {}\n\tbool operator<(const node& o) const\n\t{\n\t\treturn l < o.l;\n\t}\n};\n```\n\u8fd9\u6837\u7684\u4e00\u4e2a\u8282\u70b9\u8868\u793a$[l,r]$\u5185\u7684\u6240\u6709\u6570\u90fd\u662fv\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f```mutable```\uff0c\u610f\u4e3a\u6613\u53d8\u7684\uff0c\u4e0d\u5b9a\u7684\u3002\u5b83\u5bf9```v```\u7684\u4fee\u9970\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728```add```\u64cd\u4f5c\u4e2d\u4fee\u6539```v```\u7684\u503c\u3002\u6ca1\u6709\u5b83\u7684\u4fee\u9970\u4f1a\u5728```add```\u51fd\u6570\u91cc\u5bfc\u81f4CE\u3002\n\n\u6211\u4eec\u628a\u8282\u70b9\u5b58\u5728```set```\u91cc\u3002\n```\nset<node> s;\n```\n\n\u50cfCF896C\u8fd9\u9053\u9898\u5c31\u8fd9\u6837\u521d\u59cb\u5316\u3002\n```\ncin>>n>>m>>seed>>vmax;\nfor (int i=1; i<=n; ++i)\n{\n\ta[i] = (rnd() % vmax) + 1;\n\ts.insert(node(i,i,a[i]));\n}\n```\n\n\u521d\u59cb\u5316\u5b8c\u4e86\uff1f\u521d\u59cb\u5316\u5b8c\u4e86\u3002\n\n## \u56db\u3001\u73c2\u6735\u8389\u6811\u7684\u6838\u5fc3\u64cd\u4f5c\uff1asplit\n\n```split(pos)```\u64cd\u4f5c\u662f\u6307\u5c06\u539f\u6765\u542b\u6709pos\u4f4d\u7f6e\u7684\u8282\u70b9\u5206\u6210\u4e24\u90e8\u5206\uff1a$[l,pos-1]$\u548c$[pos,r]$\u3002\n\n\u770b\u8fd9\u4e2a\u64cd\u4f5c\u7684\u4ee3\u7801\uff1a\n\n```\n#define IT set<node>::iterator\nIT split(int pos)\n{\n\tIT it = s.lower_bound(node(pos));\n\tif (it != s.end() && it->l == pos) return it;\n\t--it;\n\tint L = it->l, R = it->r;\n\tLL V = it->v;\n\ts.erase(it);\n\ts.insert(node(L, pos-1, V));\n\treturn s.insert(node(pos, R, V)).first;\n}\n```\n\n\u4e00\u884c\u4e00\u884c\u6765\u770b\u3002\n\n```\n#define IT set<node>::iterator\n```\n\n\u5b8f\u5b9a\u4e49\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u8bb0\u4f4fNOI\u7cfb\u5217\u8d5b\u4e8b\u4e0d\u80fd\u7528```auto```\u3002```auto```\u4e00\u65f6\u723d\uff0c\u8bc4\u6d4b\u706b\u846c\u573a\u3002\n\n```\nIT it = s.lower_bound(node(pos));\n```\n\n\u627e\u5230\u9996\u4e2a$l$\u4e0d\u5c0f\u4e8epos\u7684\u8282\u70b9\u3002\n\n```\nif (it != s.end() && it->l == pos)\n\treturn it;\n```\n\n\u5982\u679c\u65e0\u9700```split```\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\n\n```\n--it;\n```\n\n\u5426\u5219pos\u4e00\u5b9a\u5728\u524d\u4e00\u4e2a\u533a\u95f4\u4e2d\u3002\n\n```\nint L = it->l, R = it->r;\n```\n$[L,R]$\u5c31\u662f\u8981\u88ab\u5206\u5272\u7684\u533a\u95f4\u3002\n\n```\nLL V = it->v;\n```\n\u53d6\u51fa\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\u3002\n\n```\ns.erase(it);\n```\n\u5220\u9664\u539f\u8282\u70b9\u3002\n\n```\ns.insert(node(L, pos-1, V));\n```\n\u63d2\u5165\u524d\u534a\u6bb5\u3002\n\n```\nreturn s.insert(node(pos, R, V)).first;\n```\n\u63d2\u5165\u540e\u534a\u6bb5\uff0c\u8fd4\u56de\u540e\u534a\u6bb5\u7684\u8fed\u4ee3\u5668\u3002\u8fd9\u91cc\u5229\u7528\u4e86```pair<iterator,bool> insert (const value_type& val)```\u7684\u8fd4\u56de\u503c\u3002\n\n## \u4e94\u3001\u73c2\u6735\u8389\u6811\u7684\u63a8\u5e73\u64cd\u4f5c\uff1aassign\n\n\u8981\u662f\u53ea\u6709```split```\u8fd8\u4e0d\u5f97\u590d\u6742\u5ea6\u7206\u70b8\uff1f\u6211\u4eec\u9700\u8981```assign```\u64cd\u4f5c\u8fc5\u901f\u51cf\u5c0f```set```\u7684\u89c4\u6a21\u3002\n\n```\nvoid assign(int l, int r, LL val=0)\n{\n\tIT itl = split(l),itr = split(r+1);\n\ts.erase(itl, itr);\n\ts.insert(node(l, r, val));\n}\n```\n\n\u4e00\u4e9b\u840c\u65b0\u53ef\u80fd\u6ca1\u6709\u89c1\u8fc7```erase```\u7684\u8fd9\u79cd\u7528\u6cd5\uff0c\u4f60\u4eec\u5e94\u8be5\u5b66\u4e60\u4e00\u4e2a\u3002C++98\u4e2d```void erase (iterator first, iterator last)```\u53ef\u5220\u9664$[first,last)$\u533a\u95f4\u3002\u8fd9\u91cc\u5c31\u662f\u628a$[l,r+1)$\u5185\u7684\u90e8\u5206\u63a8\u6210\u4e00\u6bb5\u3002\n\n\u73c2\u6735\u8389\u6811\u7684\u590d\u6742\u5ea6\u662f\u7531```ass```\u2642```ign```\u4fdd\u8bc1\u7684\u3002\u7531\u4e8e\u6570\u636e\u968f\u673a\uff0c\u6709$\\frac{1}{4}$\u7684\u64cd\u4f5c\u4e3a```assign```\u3002```set```\u7684\u5927\u5c0f\u5feb\u901f\u4e0b\u964d\uff0c\u6700\u7ec8\u8d8b\u4e8e$\\log n$\uff0c\u4f7f\u5f97\u8fd9\u79cd\u770b\u4f3c\u66b4\u529b\u65e0\u6bd4\u7684\u6570\u636e\u7ed3\u6784\u590d\u6742\u5ea6\u63a5\u8fd1$m\\log n$\u3002\n\n## \u516d\u3001\u5176\u4ed6\u64cd\u4f5c\uff1a\u4e00\u4e2a\u6bd4\u4e00\u4e2a\u66b4\u529b\n\n\u533a\u95f4\u52a0\uff1a\n```\nvoid add(int l, int r, LL val=1)\n{\n\tIT itl = split(l),itr = split(r+1);\n\tfor (; itl != itr; ++itl) itl->v += val;\n}\n```\n\n\u5206\u88c2\u51fa\u6765\u6328\u4e2a\u52a0\u4e00\u4e0b\u5c31\u884c\u3002\n\n\u533a\u95f4\u7b2ck\u5c0f\uff1a\n```\nLL rank(int l, int r, int k)\n{\n\tvector<pair<LL, int> > vp;\n\tIT itl = split(l),itr = split(r+1);\n\tvp.clear();\n\tfor (; itl != itr; ++itl)\n\t\tvp.push_back(pair<LL,int>(itl->v, itl->r - itl->l + 1));\n\tsort(vp.begin(), vp.end());\n\tfor (vector<pair<LL,int> >::iterator it=vp.begin();it!=vp.end();++it)\n\t{\n\t\tk -= it->second;\n\t\tif (k <= 0) return it->first;\n\t}\n\treturn -1LL;\n}\n```\n\u66b4\u529b\u53d6\u51fa\u6392\u5e8f\u5c31\u597d\u4e86\uff0c\u53cd\u6b63\u4e5f\u6ca1\u6709\u591a\u5c11\u6bb5\u3002\n\n```\nLL sum(int l, int r, int ex, int mod)\n{\n\tIT itl = split(l),itr = split(r+1);\n\tLL res = 0;\n\tfor (; itl != itr; ++itl)\n\t\tres = (res + (LL)(itl->r - itl->l + 1) * pow(itl->v, LL(ex), LL(mod))) % mod;\n\treturn res;\n}\n```\n\u66b4\u529b\u904d\u5386\uff0c\u5feb\u901f\u5e42\uff0c\u7136\u540e\u52a0\u8d77\u6765\u3002\n\n\u90a3\u4e48\uff0c\u8fd9\u9053\u9898\u5c31\u53ef\u505a\u4e86\u3002\u800c\u4e14\u6211\u4eec\u4ea4\u4e86\u4e00\u53d1\uff0c\u53d1\u73b0\u8fd9\u73a9\u610f\u8dd1\u5f97\u5b8c\u5168\u4e0d\u50cf\u66b4\u529b\uff0c\u6700\u6162\u7684\u70b9\u662f500\u591ams\u3002\n\n## \u4e03\u3001\u4e00\u4e9b\u4e60\u9898\n\nUESTC\u7684B\u7ad9\u8bb2\u89e3\u91cc\u8fd8\u6709\u53e6\u4e24\u9053\u9898\uff0c\u4e00\u9053\u662f[CF915E](https://www.luogu.org/problemnew/show/CF915E)\uff0c\u53e6\u4e00\u9053\u662f[BZOJ4293\u5272\u8349](http://ruanx.pw/bzojch/p/4293.html)(\u6743\u9650\u9898)\u3002\u8fd9\u4e24\u9053\u9898\u7684\u4e3b\u6d41\u505a\u6cd5\u90fd\u662f\u7ebf\u6bb5\u6811\uff0c\u73c2\u6735\u8389\u6811\u4e5f\u53ef\u505a\u3002\u4f46\u73c2\u6735\u8389\u6811\u4ecd\u80fd\u4f53\u73b0\u51fa\u4ee3\u7801\u91cf\u8f83\u5c0f\u3001\u6613\u67e5\u9519\u7684\u4f18\u52bf\uff0c\u9002\u5408\u4f5c\u4e3a\u73c2\u6735\u8389\u6811\u7684\u7ec3\u4e60\u9898\u3002\n\n```\n#include<cstdio>\n#include<set>\n#include<vector>\n#include<utility>\n#include<algorithm>\n#define IT set<node>::iterator\n\nusing std::set;\nusing std::vector;\nusing std::pair;\n\ntypedef long long LL;\nconst int MOD7 = 1e9 + 7;\nconst int MOD9 = 1e9 + 9;\nconst int imax_n = 1e5 + 7;\n\nLL pow(LL a, LL b, LL mod)\n{\n\tLL res = 1;\n\tLL ans = a % mod;\n\twhile (b)\n\t{\n\t\tif (b&1) res = res * ans % mod;\n\t\tans = ans * ans % mod;\n\t\tb>>=1;\n\t}\n\treturn res;\n}\n\nstruct node\n{\n\tint l,r;\n\tmutable LL v;\n\tnode(int L, int R=-1, LL V=0):l(L), r(R), v(V) {}\n\tbool operator<(const node& o) const\n\t{\n\t\treturn l < o.l;\n\t}\n};\n\nset<node> s;\n\nIT split(int pos)\n{\n\tIT it = s.lower_bound(node(pos));\n\tif (it != s.end() && it->l == pos) return it;\n\t--it;\n\tint L = it->l, R = it->r;\n\tLL V = it->v;\n\ts.erase(it);\n\ts.insert(node(L, pos-1, V));\n\treturn s.insert(node(pos, R, V)).first;\n}\n\nvoid add(int l, int r, LL val=1)\n{\n\tIT itl = split(l),itr = split(r+1);\n\tfor (; itl != itr; ++itl) itl->v += val;\n}\n\nvoid assign_val(int l, int r, LL val=0)\n{\n\tIT itl = split(l),itr = split(r+1);\n\ts.erase(itl, itr);\n\ts.insert(node(l, r, val));\n}\n\nLL rank(int l, int r, int k)\n{\n\tvector<pair<LL, int> > vp;\n\tIT itl = split(l),itr = split(r+1);\n\tvp.clear();\n\tfor (; itl != itr; ++itl)\n\t\tvp.push_back(pair<LL,int>(itl->v, itl->r - itl->l + 1));\n\tstd::sort(vp.begin(), vp.end());\n\tfor (vector<pair<LL,int> >::iterator it=vp.begin();it!=vp.end();++it)\n\t{\n\t\tk -= it->second;\n\t\tif (k <= 0) return it->first;\n\t}\n\treturn -1LL;\n}\n\nLL sum(int l, int r, int ex, int mod)\n{\n\tIT itl = split(l),itr = split(r+1);\n\tLL res = 0;\n\tfor (; itl != itr; ++itl)\n\t\tres = (res + (LL)(itl->r - itl->l + 1) * pow(itl->v, LL(ex), LL(mod))) % mod;\n\treturn res;\n}\n\nint n, m;\nLL seed, vmax;\n\nLL rnd()\n{\n\tLL ret = seed;\n\tseed = (seed * 7 + 13) % MOD7;\n\treturn ret;\n}\n\nLL a[imax_n];\n\nint main()\n{\n\tscanf(\"%d %d %lld %lld\",&n,&m,&seed,&vmax);\n\tfor (int i=1; i<=n; ++i)\n\t{\n\t\ta[i] = (rnd() % vmax) + 1;\n\t\ts.insert(node(i,i,a[i]));\n\t}\n\ts.insert(node(n+1, n+1, 0));\n\tint lines = 0;\n\tfor (int i =1; i <= m; ++i)\n\t{\n\t\tint op = int(rnd() % 4) + 1;\n\t\tint l = int(rnd() % n) + 1;\n\t\tint r = int(rnd() % n) + 1;\n\t\tif (l > r)\n\t\t\tstd::swap(l,r);\n\t\tint x, y;\n\t\tif (op == 3)\n\t\t\tx = int(rnd() % (r-l+1)) + 1;\n\t\telse\n\t\t\tx = int(rnd() % vmax) +1;\n\t\tif (op == 4)\n\t\t\ty = int(rnd() % vmax) + 1;\n\t\tif (op == 1)\n\t\t\tadd(l, r, LL(x));\n\t\telse if (op == 2)\n\t\t\tassign_val(l, r, LL(x));\n\t\telse if (op == 3)\n\t\t\tprintf(\"%lld\\n\",rank(l, r, x));\n\t\telse\n\t\t\tprintf(\"%lld\\n\",sum(l, r, x, y));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1532489185,
        "uid": 53374,
        "name": "SuperJvRuo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF896C \u3010Willem, Chtholly and Seniorious\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u73c2\u6735\u8389\u6811\u662f\u76ee\u524d\u4e3a\u6b62\uff08\u6211\u5b66\u8fc7\u7684\uff09\u552f\u4e00\u4e00\u4e2a\u53ef\u4ee5\u7ef4\u62a4\u533a\u95f4x\u6b21\u65b9\u548c\u67e5\u8be2\u7684\u9ad8\u6548\u6570\u636e\u7ed3\u6784\u3002\n\n\u4f46\u662f\u8fd9\u73a9\u610f\u6709\u4e2a\u5f88\u5927\u7684\u6bdb\u75c5\uff0c\u5c31\u662f\u5b83\u7684**\u9ad8\u6548**\u5efa\u7acb\u5728\u6570\u636e\u968f\u673a\u7684\u524d\u63d0\u4e0b\u3002\n\n\u5728\u6570\u636e\u968f\u673a\u7684\u65f6\u5019assign\u64cd\u4f5c\u6bd4\u8f83\u591a\uff0c\u6240\u4ee5\u5b83\u7684\u590d\u6742\u5ea6\u4f1a\u8d8b\u8fd1\u4e8emlogn\uff08m\u4e3a\u8be2\u95ee\u6b21\u6570\uff09\u3002\u5047\u5982\u51fa\u9898\u4eba\u60f3\u8981\u5361\u73c2\u6735\u8389\u6811\u7684\u8bdd\uff0c\u90a3\u80af\u5b9a\u662f\u4f1aT\u5f97\u6ca1\u8fb9\u3002\n\n\u56e0\u6b64\u4e0d\u8981\u6307\u671b\u4ec0\u4e48\u9898\u76ee\u90fd\u5957\u73c2\u6735\u8389\u6811\uff08\u867d\u7136\u5b83\u80fd\u6c34\u8fc7\u5f88\u591a\u6570\u636e\u7ed3\u6784\u9898\uff09\uff0c\u7279\u522b\u662f\u5728\u6570\u636e\u975e\u968f\u673a\u7684\u60c5\u51b5\u4e0b\u4e0d\u8981\u4f7f\u7528\u3002\n\n\u5f53\u7136\uff0c\u5982\u679c\u9898\u76ee\u8ba9\u4f60\u6c42\u533a\u95f4x\u6b21\u65b9\u548c\u800c\u5728\u9898\u76ee\u6761\u4ef6\u4e0b\u4f60\u60f3\u4e0d\u51fa\u5de7\u7b97\uff0c\u90a3\u5199\u4e00\u9897\u73c2\u6735\u8389\u6811\u8fd8\u662f\u5f88OK\u7684\u3002\n\n------------\n\n\u4e0d\u5f97\u4e0d\u8bf4\u73c2\u6735\u8389\u6811\u7684\u535a\u5ba2\u6211\u4e5f\u770b\u4e86\u5f88\u591a\u7bc7\u4e86\uff0c\u5927\u5bb6\u5374\u4e00\u7b14\u5e26\u8fc7\uff08\u53ef\u80fd\u662f\u6211\u592a\u5f31\u4e86\uff09\u7ec6\u8282\u53ea\u8bb2\u5927\u81f4\u6846\u67b6\uff0c\u800c\u67d0\u5927\u4f6c\u5728B\u7ad9\u4e0a\u7684\u89c6\u9891\u8bb2\u89e3\u88ab\u67d0\u4e0d\u77e5\u540d\u7684\u7ba1\u7406\u5458noip\u5927\u4f6c\u55b7\u4e86\u6240\u4ee5\u6ca1\u6562\u53bb\u770b\uff0c\u53ea\u597d\u4e00\u4e2a\u4eba\u9893\u4ee3\u7801\u3002\n\n\u6211\u8bb2\u7684\u4e5f\u4e0d\u4e00\u5b9a\u591a\u6807\u51c6\uff0c\u6709\u4ec0\u4e48\u9519\u8bef\u9ebb\u70e6\u5404\u4f4d\u6307\u6b63\u3002\n\n\u53e6\uff1a\u4e0d\u592a\u719f\u6089set\u7684\u53ef\u4ee5\u53c2\u8003[\u8fd9\u7bc7\u535a\u5ba2](https://www.cnblogs.com/omelet/p/6627667.html)\n\n------------\n\n**\u73c2\u6735\u8389\u6811\u7684\u6838\u5fc3\u64cd\u4f5c\u5728\u4e8e\u63a8\u5e73\u4e00\u4e2a\u533a\u95f4\u3002**\n\n\uff08\u8c8c\u4f3c\u6bcf\u7bc7\u535a\u5ba2\u90fd\u8bf4\u8fd9\u53e5\u8bdd\uff09\n\n\u5f53\u7136\u4e8b\u5b9e\u4e0a\u73c2\u6735\u8389\u6811\u662f\u5c06\u6240\u6709\u8981\u64cd\u4f5c\u7684\u533a\u95f4\u6574\u5408\u5230\u4e00\u8d77\u53bb\u505a\u7684\uff0c\u5b9e\u73b0\u4e5f\u53ef\u4ee5\u4e0d\u4f9d\u8d56set\uff0c\u6bd4\u5982\u81ea\u5df1\u5199\u4e00\u9897fhq Treap\u4e4b\u7c7b\u7684\u3002\n\n\u5148\u8bb2\u4e00\u4e0b\u5927\u4f53\u601d\u8def\uff1a\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u91cc\u9762\u6709\u4e00\u4e2a\u64cd\u4f5c\u662f\u63a8\u5e73\u4e00\u6574\u6bb5\u533a\u95f4\u3002\n\n\u56e0\u6b64\u6211\u4eec\u8ba9\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u5bf9\u4e8e2\u53f7\u64cd\u4f5c\u6e05\u7a7a\u533a\u95f4[l,r]\u91cc\u7684\u6240\u6709\u533a\u95f4\uff0c\u7528\u4e00\u4e2a\u5927\u533a\u95f4[l,r]\u53d6\u4ee3\u4ed6\u4eec\u3002\n\n\u5bf9\u4e8e1,3,4\u53f7\u64cd\u4f5c\uff0c\u6211\u4eec\u66b4\u529b\u5730\u627e\u5230\u6bcf\u4e00\u4e2a[l,r]\u91cc\u9762\u7684\u533a\u95f4\uff0c\u7136\u540e\u5bf9\u5b83\u4eec\u5404\u4e2a\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bc1\u660e\u53ef\u4ee5\u53c2\u8003\u53d1\u660e\u8005\u7684\u539f\u8bdd\uff1a[\u4f20\u9001\u95e8](http://codeforces.com/blog/entry/56135)(\u6ce8\u610f\u662f\u7b2c\u4e94\u6761)\n\n------------\n\n\u73c2\u6735\u8389\u6811\u7684\u8282\u70b9\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\uff1a\n\n```cpp\nstruct node{\n\tint l,r;mutable ll v;\n\tnode(int L,int R=-1,ll V=0):l(L),r(R),v(V){}\n\tbool operator < (const node &o)const{\n\t\treturn l<o.l;\n\t}\n};\n```\n\n\u8fd9\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u533a\u95f4[l,r]\uff0c\u91cc\u9762\u7684\u6bcf\u4e2a\u6570\u90fd\u521d\u59cb\u5316\u4e3av\u3002\n\n------------\n\n\u6709\u4e86\u57fa\u672c\u7684\u8282\u70b9\u4e4b\u540e\uff0c\u901a\u8fc7set\u5efa\u7acb\u4e00\u68f5\u6811\u3002\n\n\uff08set\u662fC++\u81ea\u5e26\u7684\u5e73\u8861\u6811\uff0c\u4f46\u662f\u6162\u5230\u4e00\u79cd\u5883\u754c\u3002\u53ea\u6709\u5728\u5237\u65f6\u9650\u7ed9\u529b\u7684\u9898\u76ee\u65f6\u63a8\u8350\uff09\n\n```cpp\nset<node> s;\n```\n\n------------\n\n\u7136\u540e\u662f\u5f88\u6838\u5fc3\u7684split\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5982\u540c\u5b83\u7684\u540d\u5b57\uff0c\u5c06\u4e00\u4e2a\u533a\u95f4\u62c6\u5206\u5f00\u6765\u3002\n\n```cpp\n#define IT set<node>::iterator\nIT split(int pos){\n\tIT it=s.lower_bound(node(pos));\n\tif(it!=s.end()&&it->l==pos)return it;\n\tit--;\n\tint L=it->l,R=it->r;ll V=it->v;s.erase(it),s.insert(node(L,pos-1,V));\n\treturn s.insert(node(pos,R,V)).first;\n}\n```\n\nIT\u4ee3\u8868\u7684\u73a9\u610f\u5efa\u8bae\u7528\u5b8f\uff0c\u624b\u6253\u53ef\u4ee5\u8ba9\u4f60\u6000\u7591\u4eba\u751f\u3002\n\n\u7b2c\u4e00\u884c\u4f7f\u7528\u4e86lower_bound\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u662f\u6c42\u524d\u9a71\u3002\n\n\u7136\u540e\u6211\u4eec\u5148\u770b\u662f\u5426\u9700\u8981split\u8fd9\u4e2a\u533a\u95f4\uff0c\u5982\u679c\u4e0d\u9700\u8981\u5c31\u76f4\u63a5\u8fd4\u56deit\u3002\n\n\u5047\u5982\u73b0\u5728\u7a0b\u5e8f\u8fd8\u5728\u8fd0\u884c\uff0c\u90a3\u8bf4\u660e\u6211\u4eec\u9700\u8981split\u3002\n\n\u56e0\u6b64pos\u80af\u5b9a\u5728\u4e0a\u4e00\u4e2a\u533a\u95f4\u91cc\uff08\u663e\u7136\uff09\uff0c\u90a3\u6211\u4eec\u628a\u524d\u4e00\u4e2a\u5f7b\u5e95\u62b9\u6389\uff0c\u7136\u540e\u518d\u63d2\u5165\u4e24\u6bb5\u533a\u95f4\u3002\n\n\u73b0\u5728\u770b\u6765\u6211\u4eec\u4ec0\u4e48\u4e8b\u60c5\u90fd\u6ca1\u6709\u505a\uff0c\u5220\u6389\u4e86\u533a\u95f4\u53c8\u628a\u5b83\u653e\u56de\u6765\u4e86\u3002\n\n\u6ce8\u610f\uff0c\u5176\u5b9e\u6211\u4eec\u5e76\u4e0d\u662f\u4ec0\u4e48\u4e8b\u60c5\u90fd\u6ca1\u6709\u505a\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u62ff\u5230\u4e86\u9700\u8981\u7684\u4e1c\u897f\uff1a\u540e\u534a\u6bb5\u533a\u95f4\u7684\u8fed\u4ee3\u5668\uff08\u4ec0\u4e48\u7528\u540e\u9762\u8bf4\uff09\n\n\u6700\u540e\u7684\u8fd4\u56de\u8bed\u53e5\u53ef\u80fd\u6bd4\u8f83\u7384\u5b66\uff0c\u4e8b\u5b9e\u4e0a\uff0cset\u7684insert\u64cd\u4f5c\u8fd4\u56de\u4e00\u4e2a<iterator,bool>\u7684pair\uff0c\u6211\u4eec\u53ea\u62ff\u8d70\u7b2c\u4e00\u4e2a\u3002\n\nsplit\u64cd\u4f5c\u5c31\u8fd9\u6837\u7ed3\u675f\u4e86\uff0c\u5b83\u7684\u590d\u6742\u5ea6\u5e94\u8be5\u662flog\u7ea7\u7684\uff08set\u901a\u8fc7\u7ea2\u9ed1\u6811\u5b9e\u73b0\uff0c\u800c\u90a3\u73a9\u610f\uff08\u6211\u6ca1\u5199\u8fc7\uff09\u7684\u64cd\u4f5c\u636e\u8bf4\u662f\u8fd1\u4f3clogn\u7684\uff09\u3002\n\n------------\n\n\u540c\u6837\u6838\u5fc3\u7684assign\u64cd\u4f5c\uff0c\u662f\u5c06\u4e00\u4e2a\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u8bbe\u4e3a\u4e00\u4e2a\u503c\u3002\n\n```cpp\nvoid assign(int l,int r,int val=0){\n\tIT itl=split(l),itr=split(r+1);\n\ts.erase(itl,itr),s.insert(node(l,r,val));\n}\n```\n\nval\u9ed8\u8ba4\u4e3a0\uff08\u56e0\u4e3a\u5f88\u591a\u65f6\u5019\u6211\u4eec\u76f4\u63a5\u63a8\u5e73\uff09\u3002\n\n\u9996\u5148\u6211\u4eec\u62ff\u5230itl\u548citr\uff0c\u8fd9\u4e24\u4e2a\u4e1c\u897f\u5206\u522b\u662fsplit(l)\u4e0esplit(r+1)\u7684\u8fd4\u56de\u503c\uff0c\u770b\u8d77\u6765\u53ef\u80fd\u4e0d\u592a\u597d\u7406\u89e3\uff0c\u4f46\u662f\u753b\u4e2a\u56fe\u4f3c\u4e4e\u633a\u660e\u4e86\u7684\u3002\n\n![\u4e11\u964b\u7684\u914d\u56fe](https://cdn.luogu.com.cn/upload/pic/29324.png)\n\n\u7136\u540e\u6211\u4eec\u628a\u4e2d\u95f4\u7684\u90fd\u5220\u9664\uff08\u8fd9\u662ferase\u7684\u53e6\u4e00\u79cd\u7528\u6cd5\uff0c\u5220\u9664\u533a\u95f4\u5185\u7684\u6240\u6709\u5143\u7d20\uff09\uff0c\u7528\u4e00\u4e2a\u5927\u533a\u95f4\u4ee3\u66ff\u6240\u6709\u5c0f\u533a\u95f4\u3002\n\n\u6ca1\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u80fd\u63a5\u53d7\u3002\n\n------------\n\nadd\u64cd\u4f5c\uff0c\u7ed9\u533a\u95f4\u6bcf\u4e2a\u6570\u52a0\u4e0aval\u3002\n\n```cpp\nvoid add(int l,int r,ll val=1){\n\tIT itl=split(l),itr=split(r+1);\n\tfor(;itl!=itr;++itl)itl->v+=val;\n}\n```\n\n\u50cf\u6211\u4eec\u4e4b\u524d\u8bf4\u7684\u90a3\u6837\uff0c\u5bf9\u4e8e[l,r]\u5185\u7684\u6240\u6709\u5c0f\u533a\u95f4\uff0c\u66b4\u529b\u904d\u5386\u4e00\u904d\uff0c\u7ed9\u4ed6\u4eec\u6bcf\u4e00\u4e2a\u90fd\u52a0\u4e0aval\u3002\n\n\u53ef\u80fd\u6709\u4eba\u4f1a\u95ee\uff1a\u4e0d\u4f1a\u6709\u52a0\u91cd\u590d\u6216\u8005\u6f0f\u52a0\u7684\u60c5\u51b5\u5417\uff1f\n\n\u4e8b\u5b9e\u4e0a\u4e0d\u4f1a\u3002\n\n\u6f0f\u52a0\u8fd9\u4e2a\u5f88\u660e\u663e\u662f\u6ca1\u6709\u7684\uff0c\u800c\u91cd\u590d\u52a0\u4e4b\u6240\u4ee5\u6ca1\u6709\u662f\u56e0\u4e3a\n\n1. \u6700\u5f00\u59cb\u6ca1\u6709\u91cd\u590d\u3002\n\n2. \u6bcf\u4e00\u6b21\u63a8\u5e73\u4e0d\u4f1a\u4ea7\u751f\u91cd\u590d\u3002\n\n------------\n\n\u63a5\u4e0b\u6765\u662f\u6c42\u533a\u95f4k\u5c0f\u503c\u3002\n\n```cpp\nll rank(int l,int r,int k){\n\tvector<pair<ll,int> >vp;vp.clear();\n\tIT itl=split(l),itr=split(r+1);\n\tfor(;itl!=itr;++itl)vp.push_back(pair<ll,int>(itl->v,itl->r-itl->l+1));\n\tsort(vp.begin(),vp.end());\n\tfor(vector<pair<ll,int> >::iterator it=vp.begin();it!=vp.end();++it){\n\t\tk-=it->second;\n\t\tif(k<=0)return it->first;\n\t}\n\treturn -1ll;\n}\n```\n\n\u6211\u4eec\u91c7\u53d6\u7c7b\u4f3c\u7684\u601d\u8def\uff1a\u628a[l,r]\u91cc\u9762\u7684\u6240\u6709\u5143\u7d20\u53d6\u51fa\u6765\uff0c\u6254\u5230\u4e00\u4e2avector\u91cc\u9762\u53bb\u3002\n\n\u7136\u540e\u7ed9\u8fd9\u4e2avector\u6392\u4e2a\u5e8f\u3002\n\n\u4fbf\u5229\u4e00\u904d\u5c31\u53ef\u4ee5\u627e\u5230\u6700\u5c0f\u503c\u4e86\u3002\n\n\u6700\u540e\u7684return -1ll;\u662f\u7279\u5224\u627e\u4e0d\u5230\u7684\u60c5\u51b5\uff0c\u5f53\u7136\u672c\u9898\u4fdd\u8bc1\u627e\u5f97\u5230\u3002\n\n------------\n\n\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u662f\u533a\u95f4x\u6b21\u65b9\u548c\uff0c\u8fd9\u4e2a\u4e5f\u5341\u5206\u66b4\u529b\uff1a\n\n```cpp\nll sum(int l,int r,int ex,int mod){\n\tIT itl=split(l),itr=split(r+1);ll res=0;\n\tfor(;itl!=itr;++itl)res=(res+(ll)(itl->r-itl->l+1)*power(itl->v,(ll)ex,(ll)mod))%mod;\n\treturn res;\n}\n```\n\n\u5bf9\u4e8e[l,r]\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u66b4\u529bx\u6b21\u65b9\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u8fc7\u5feb\u901f\u5e42\u5b9e\u73b0\u3002\n\n------------\n\n\u7136\u540e\u73c2\u6735\u8389\u6811\u7684\u64cd\u4f5c\u57fa\u672c\u5c31\u5b8c\u4e86\u3002\n\n\u6709\u4eba\u95ee\u6211\u4e3a\u4ec0\u4e48\u4ee3\u7801\u90fd\u8fd9\u4e48\u4e00\u6837\u3002\n\n\u6211\u4e5f\u5f88\u65e0\u5948\u554a\uff0c\u53ea\u80fd\u8bf4\u6211\u5b66\u4e60\u7684\u90a3\u7bc7\u535a\u5ba2\u548c\u5927\u5bb6\u91cd\u590d\u4e86qwq\u3002",
        "postTime": 1534582450,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF896C \u3010Willem, Chtholly and Seniorious\u3011"
    },
    {
        "content": "~~\u8fd9\u9053\u9898\u6839\u636e\u7ed9\u7684\u56fe\u7247\u80fd\u660e\u663e\u770b\u51fa\u662f\u4e00\u9053\u73c2\u6735\u8389\u6811~~\n\n\u7ecf\u5178\u7684\u73c2\u6735\u8389\u6811\u4f8b\u9898\uff01\n## \u540d\u79f0\u7b80\u4ecb\n\n\u8001\u53f8\u673a\u6811\uff0cODT\uff08Old Driver Tree\uff09\uff0c\u53c8\u540d\u73c2\u6735\u8389\u6811\uff08 Chtholly Tree \uff09\u3002\u8d77\u6e90\u81ea  CF896C \uff08\u672c\u9898\uff09\u3002\n\n## \u524d\u7f6e\u7684\u5fc5\u4f1a\u77e5\u8bc6\n\u7531\u4e8e\u4f7f\u7528\u5230 STL \u7684\u96c6\u5408\uff0c\u9700\u8981\u4f60\u4f1a\u4f7f\u7528 `set`\u3002\n\n## \u6838\u5fc3\u601d\u60f3\n\u628a\u503c\u76f8\u540c\u7684\u533a\u95f4\u5408\u5e76\u6210\u4e00\u4e2a\u7ed3\u70b9\u4fdd\u5b58\u5728 `set` \u91cc\u9762\u3002\n\u7c7b\u4f3c\u4e8e lazytag\u3002\n\n## \u7528\u5904\n~~\u9ad8\u60c5\u5546\uff1a\u66b4\u529b\uff0c\u4f4e\u60c5\u5546\uff1a\u9a97\u5206\u3002~~\n\n\u53ea\u8981\u662f\u6709\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u9898\u90fd\u53ef\u4ee5\u7528\u6765\u9a97\u5206\u3002\u5728\u6570\u636e\u968f\u673a\u7684\u60c5\u51b5\u4e0b\u4e00\u822c\u6548\u7387\u8f83\u9ad8\uff0c\u4f46\u5728\u4e0d\u4fdd\u8bc1\u6570\u636e\u968f\u673a\u7684\u573a\u5408\u4e0b\uff0c\u4f1a\u88ab\u7cbe\u5fc3\u6784\u9020\u7684\u7279\u6b8a\u6570\u636e\u5361\u5230\u8d85\u65f6\u3002\n\n\u5982\u679c\u8981\u4fdd\u8bc1\u590d\u6742\u5ea6\u6b63\u786e\uff0c\u5fc5\u987b\u4fdd\u8bc1\u6570\u636e\u968f\u673a\u3002\u8be6\u89c1 [CF(Codeforces) \u4e0a\u5173\u4e8e\u73c2\u6735\u8389\u6811\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bc1\u660e](http://codeforces.com/blog/entry/56135?#comment-398940).\n\n\u66f4\u8be6\u7ec6\u7684\u4e25\u683c\u8bc1\u660e\u89c1 \u73c2\u6735\u8389\u6811\u7684\u590d\u6742\u5ea6\u5206\u6790\u3002\u5bf9\u4e8e  `add`, `assign` \u548c `sum` \u64cd\u4f5c\uff0c\u7528 `set` \u5b9e\u73b0\u7684\u73c2\u6735\u8389\u6811\u7684\u590d\u6742\u5ea6\u4e3a $O(n \\log \\log n)$ \uff0c\u800c\u7528\u94fe\u8868\u5b9e\u73b0\u7684\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$.\n\n# \u6b63\u6587\n\u9996\u5148\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u4e00\u822c\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9\u7ed3\u6784\u4f53\uff1a\n```cpp\nstruct Node\n{\n    int l,r;\n    mutable int v;\n    Node(const int &il, const int &ir, const int &iv) : l(il), r(ir), v(iv) {}//\u6784\u9020\u51fd\u6570\n    inline bool operator<(const Node &o) const { return l < o.l; }\n};\n```\n> `mutable` \u5173\u952e\u5b57\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f\n\n\n> `mutable` \u662f\u4e00\u4e2a\u82f1\u8bed\u5355\u8bcd\u3002\u4ed6\u7684\u4e2d\u6587\u610f\u601d\u662f`\u53ef\u53d8\u7684`\uff0c\u7531\u4e8e `set` \u672c\u8eab\u4e0d\u53ef\u4ee5\u4fee\u6539\u503c\uff0c\u6211\u4eec\u52a0\u4e0a `mutable` \u5173\u952e\u5b57\u540e\u8ba9\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e2a\u503c\u3002\u5728 C++ \u4e2d\uff0c`mutable` \u7684\u5b58\u5728\u5176\u5b9e\u662f\u4e3a\u4e86\u7a81\u7834 `const` \u7684\u9650\u5236\u800c\u8bbe\u7f6e\u7684\u3002\u88ab `mutable` \u4fee\u9970\u7684\u53d8\u91cf\uff08`mutable` \u53ea\u80fd\u7528\u4e8e\u4fee\u9970\u7c7b\u4e2d\u7684\u975e\u9759\u6001\u6570\u636e\u6210\u5458\uff09\uff0c\u5c06\u6c38\u8fdc\u5904\u4e8e\u53ef\u53d8\u7684\u72b6\u6001\uff0c\u5373\u4f7f\u5728\u4e00\u4e2a `const` \u51fd\u6570\u4e2d\u3002\n\n\u5728\u8fd9\u4e4b\u540e\uff0c\u6211\u4eec\u6709\u4e86\u8282\u70b9\u7ed3\u6784\u4f53\u4e86\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408\u5b58\u50a8\u5e76\u7ef4\u62a4\u8fd9\u4e9b\u8282\u70b9\u3002\n```cpp\nset<Node> ct;//Chtholly Tree\n```\n\u4e3a\u4e86\u7b80\u5316\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec`typedef`\u4e00\u4e2a`it`\u7c7b\u578b\uff1a\n```cpp\ntypedef set<Node>::iterator it;\n```\n\u5176\u4e2d `iterator` \u662f\u8fed\u4ee3\u5668\u7684\u610f\u601d\u3002\u5f53\u7136\u4e86\uff0c\u5982\u679c\u9898\u76ee\u50cf\u672c\u9898\u4e00\u6837\u652f\u6301 C++11\uff0c\u4f7f\u7528 `auto` \u4e5f\u662f\u53ef\u4ee5\u7684\u3002\n> `iterator`(\u8fed\u4ee3\u5668)\u5c0f\u77e5\u8bc6\n\n> \u5728 STL \u4e2d\uff0c\u8fed\u4ee3\u5668\uff08Iterator\uff09\u7528\u6765\u8bbf\u95ee\u548c\u68c0\u67e5 STL \u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u5bf9\u8c61\uff0c\u5b83\u7684\u884c\u4e3a\u6a21\u5f0f\u548c\u6307\u9488\u7c7b\u4f3c\uff0c\u4f46\u662f\u5b83\u5c01\u88c5\u4e86\u4e00\u4e9b\u6709\u6548\u6027\u68c0\u67e5\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u8bbf\u95ee\u683c\u5f0f.\u7c7b\u4f3c\u7684\u6982\u5ff5\u5728\u5176\u4ed6\u5f88\u591a\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u90fd\u5b58\u5728\uff0c\u5982 Python \u7684 `__iter__` \u51fd\u6570\uff0cC# \u7684 `IEnumerator`\u3002\n\n## split\n`split` \u662f\u6700\u6838\u5fc3\u7684\u64cd\u4f5c\u4e4b\u4e00\uff0c\u5b83\u7528\u4e8e\u5c06\u539f\u672c\u5305\u542b\u70b9 $x$ \u7684\u533a\u95f4\uff08 \u5148\u5c06\u5176\u8bbe\u4e3a $[l,r]$ \uff09\u5206\u88c2\u4e3a\u4e24\u4e2a\u533a\u95f4 $[l,x)$ \u548c $[x,r]$ \u5e76\u8fd4\u56de\u6307\u5411\u540e\u8005\u7684\u8fed\u4ee3\u5668\u3002\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nit split(int x) \n{\n  if (x > n) return ct.end();\n  it iter = --ct.upper_bound((Node){x, 0, 0});\n  if (iter->l == x) return iter;\n  int l = iter->l, r = iter->r, v = iter->v;\n  ct.erase(iter);\n  ct.insert(Node(l, x - 1, v));\n  return ct.insert(Node(x, r, v)).first;\n}\n```\n\u90a3\u4e48 `split` \u51fd\u6570\u7684\u5177\u4f53\u4f5c\u7528\u662f\u4ec0\u4e48\u5462\uff1f\n\u4efb\u4f55\u5bf9\u4e8e $[l,r]$ \u7684\u533a\u95f4\u64cd\u4f5c\uff0c\u90fd\u53ef\u4ee5\u8f6c\u6362\u6210 `set` \u4e0a $[split(l),split(r+1)]$  \u7684\u64cd\u4f5c\u3002\n## assign\n\u521a\u624d\u63d0\u5230\u4e86\u533a\u95f4\u8d4b\u503c\uff0c\u8fd9\u5c31\u662f `assign` \u51fd\u6570\u7684\u4f5c\u7528\u3002\n\u5bf9\u4e8e ODT \u6765\u8bf4\uff0c\u533a\u95f4\u64cd\u4f5c\u53ea\u6709\u8fd9\u4e2a\u6bd4\u8f83\u7279\u6b8a\uff0c\u4e5f\u662f\u4fdd\u8bc1\u590d\u6742\u5ea6\u7684\u5173\u952e\u3002\u5982\u679c ODT \u91cc\u5168\u662f\u957f\u5ea6\u4e3a $1$ \u7684\u533a\u95f4\uff0c\u5c31\u6210\u4e86\u66b4\u529b\uff0c\u4f46\u662f\u6709\u4e86 `assign`\uff0c\u53ef\u4ee5\u4f7f ODT \u7684\u5927\u5c0f\u4e0b\u964d\u3002\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nvoid assign(int l, int r, int v) \n{\n  it itr = split(r + 1), itl = split(l);\n  ct.erase(itl, itr);\n  ct.insert(Node(l, r, v));\n}\n```\n## \u5176\u4ed6\u64cd\u4f5c\n\u4e00\u822c\u66f4\u6539\u4ee5\u4e0b\u6a21\u677f\u5c31\u597d\u5566\uff01\u53c2\u8003\u6a21\u677f\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nvoid performance(int l, int r) \n{\n  it itr = split(r + 1), itl = split(l);\n  for (; itl != itr; ++itl) \n  {\n    // Puts your code here!\n    //\u8fd9\u4e2a\u5faa\u73af\u8fed\u4ee3 [split(l),split(r+1)] \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\n  }\n}\n```\n\u6ce8\uff1a\u73c2\u6735\u8389\u6811\u5728\u8fdb\u884c\u6c42\u53d6\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u64cd\u4f5c\u65f6\uff0c\u5fc5\u987b\u5148 `split` \u53f3\u7aef\u70b9\uff0c\u518d `split` \u5de6\u7aef\u70b9\u3002\u82e5\u5148 `split` \u5de6\u7aef\u70b9\uff0c\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u53ef\u80fd\u5728 `split` \u53f3\u7aef\u70b9\u7684\u65f6\u5019\u5931\u6548\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4 RE\u3002\n## \u5bf9\u4e8e\u672c\u9898\u7684\u5176\u4ed6\u64cd\u4f5c\n### 1.\u533a\u95f4+\n\u76f4\u63a5\u6539\u6a21\u677f\u5c31\u597d\u5566\uff01\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a\n```cpp\nvoid add(int l, int r,int v) \n{\n  it itr = split(r + 1), itl = split(l);\n  for (; itl != itr; ++itl) \n  {\n    itl->v += v;//\u7531\u4e8e\u6211\u4eec\u7684v\u58f0\u660e\u65f6\u4f7f\u7528\u4e86mutable\u5173\u952e\u5b57\uff0c\u76f4\u63a5\u66f4\u6539\u5373\u53ef\n  }\n}\n```\n### 2.\u533a\u95f4\u7b2ck\u5c0f\n\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u5148\u5b9a\u4e49\u4e00\u4e2a `vector` \u52a8\u6001\u6570\u7ec4\u5b58\u50a8\u533a\u95f4 $[l,r]$ \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c \u4e4b\u540e\u76f4\u63a5\u5bf9\u8fd9\u4e2a `vector` \u6570\u7ec4\u6392\u5e8f\uff0c\u7136\u540e\u8bbf\u95ee\u7b2ck\u5c0f\u5143\u7d20\u5373\u53ef\u3002\u5bf9\u4e8e `vector` \u5b58\u50a8\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u5b58 `pair`\uff0c`first` \u5b58\u503c\uff0c`second` \u5b58\u8fd9\u4e2a\u5143\u7d20\u5728\u73c2\u6735\u8389\u6811\u91cc\u7684\u4f4d\u7f6e\uff0c\u521a\u597d\u53ef\u4ee5\u4f7f\u7528 STL \u7684 `sort` \u51fd\u6570\uff08\u7b97\u6cd5\u5934\u6587\u4ef6\u6709\u5b9a\u4e49 `pair` \u7684\u5c0f\u4e8e\u53f7,\u6bd4\u8f83 `first` \u5143\u7d20\u7684\u5927\u5c0f \uff09\u3002 \u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\ninline int kth(int l,int r,int k)\n{\n   vector< pair<int,int> > a;\n   it itr=split(r+1),itl=split(l);\n   for(it iter=itl;iter!=itr;iter++)\n      a.push_back(pair<int,int>(iter->v,(iter->r)-(iter->l)+1));//\u4f7f\u7528pair\u7684\u6784\u9020\u51fd\u6570\n   sort(a.begin(),a.end());\n   for(vector< pair<int,int> >::iterator iter=a.begin();iter!=a.end();iter++)\n   {\n      k-=iter->second;\n      if(k<=0)return iter->first;\n   }\n   return -1;\n}\n```\n### 3.\u533a\u95f4\u6b21\u5e42\u548c\n\u540c\u6837\u8fd8\u662f\u66b4\u529b\uff0c\u4e0d\u8fc7\u6bd4\u533a\u95f4\u7b2ck\u5c0f\u76f8\u5bf9\u7b80\u5355\uff0c\u6211\u4eec\u76f4\u63a5\u53d6\u51fa\u6bcf\u4e2a\u503c\u4e4b\u540e\u76f8\u52a0\u5c31\u53ef\u4ee5\u3002  \u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nlong long fpow(long long x,long long y,long long mod)\n{\n    long long ans=1;\n    x%=mod;\n    while(y) //\u5feb\u901f\u5e42\n    {\n        if(y&1)ans=ans*x%mod;\n        x=x*x%mod;\n        y>>=1;\n    }\n    return ans;\n}\nint sum(int l,int r,int x,int y)\n{\n   int ans=0;\n   it itr=split(r+1),itl=split(l);\n   for(it it=itl;it!=itr;it++)\n      ans=(ans+fpow(it->v,x,y)*((it->r)-(it->l)+1))%y;//\u6ce8\u610f\u4f7f\u7528fpow\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u5feb\u901f\u5e42\u3002\n   return ans;\n}\n```\n## \u6ce8\u610f\u4e8b\u9879\n\u6211\u4eec\u7684\u533a\u95f4\u64cd\u4f5c\u90fd\u662f\u76f4\u63a5\u5bf9\u503c\u76f8\u540c\u7684\u8fde\u7eed\u6bb5\u8fdb\u884c\u5904\u7406\uff0c\u5f53\u6bb5\u6570\u8f83\u591a\u7684\u65f6\u5019\uff0c\u6548\u7387\u5c31\u4f1a\u964d\u4f4e\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n```cpp\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n#define int long long \nstruct Node\n{\n    int l,r;\n    mutable int v;\n    Node(const int &il, const int &ir, const int &iv) : l(il), r(ir), v(iv) {}//\u6784\u9020\u51fd\u6570\n    inline bool operator<(const Node &o) const { return l < o.l; }\n};\nset<Node> ct;//Chtholly Tree\n#define S ct\nlong long n, m, seed, vmax;\ntypedef set<Node>::iterator it;\nit split(int x)\n{\n    if (x > n) return ct.end();\n    it iter = --ct.upper_bound((Node){x, 0, 0});\n    if (iter->l == x) return iter;\n    int l = iter->l, r = iter->r, v = iter->v;\n    ct.erase(iter);\n    ct.insert(Node(l, x - 1, v));\n    return ct.insert(Node(x, r, v)).first;\n}\nvoid assign(int l, int r, int v) \n{\n    it itr = split(r + 1), itl = split(l);\n    ct.erase(itl, itr);\n    ct.insert(Node(l, r, v));\n}\nvoid add(int l, int r,int v) \n{\n    it itr = split(r + 1), itl = split(l);\n    for (; itl != itr; ++itl) \n    {\n        itl->v += v;//\u7531\u4e8e\u6211\u4eec\u7684v\u58f0\u660e\u65f6\u4f7f\u7528\u4e86mutable\u5173\u952e\u5b57\uff0c\u76f4\u63a5\u66f4\u6539\u5373\u53ef\n    }\n}\ninline int kth(int l,int r,int k)\n{\n    vector< pair<int,int> > a;\n    it itr=split(r+1),itl=split(l);\n    for(it iter=itl;iter!=itr;iter++)\n        a.push_back(pair<int,int>(iter->v,(iter->r)-(iter->l)+1));//\u4f7f\u7528pair\u7684\u6784\u9020\u51fd\u6570\n    sort(a.begin(),a.end());\n    for(vector< pair<int,int> >::iterator iter=a.begin();iter!=a.end();iter++)\n    {\n        k-=iter->second;\n        if(k<=0)return iter->first;\n    }\n    return -1;\n}\nlong long fpow(long long x,long long y,long long mod)\n{\n    long long ans=1;\n    x%=mod;\n    while(y) //\u5feb\u901f\u5e42\n    {\n        if(y&1)ans=ans*x%mod;\n        x=x*x%mod;\n        y>>=1;\n    }\n    return ans;\n}\nint sum(int l,int r,int x,int y)\n{\n    int ans=0;\n    it itr=split(r+1),itl=split(l);\n    for(it it=itl;it!=itr;it++)\n        ans=(ans+fpow(it->v,x,y)*((it->r)-(it->l)+1))%y;//\u6ce8\u610f\u4f7f\u7528fpow\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u5feb\u901f\u5e42\u3002\n    return ans;\n}\n\nlong long a[100010];\ninline long long rnd() \n{\n    long long ret = seed;\n    seed = (seed * 7LL + 13) % 1000000007LL;\n    return ret;\n}\nsigned main()\n{\n    ct.clear();\n    cin>>n>>m>>seed>>vmax;\n    for(int i = 1; i <= n; ++i)\n    {\n        a[i] = (rnd()%vmax) + 1;\n        S.insert(Node(i, i, a[i]));\n    }\n    S.insert(Node(n+1,n+1,0));\n    for(int i = 1; i <= m; ++i)\n    {\n        long long op = rnd()%4 + 1;\n        long long l = rnd() % n + 1, r = rnd() % n + 1;\n        if(l > r)\n        {\n            long long tmp = l;\n            l = r;\n            r = tmp;\n        }\n        long long x, y;\n        if(op == 3)\n        {\n            x = rnd() % (r - l + 1) + 1;\n        }\n        else\n        {\n            x = rnd() % vmax + 1;\n        }\n        if(op == 4)\n        {\n            y = rnd() % vmax + 1;\n        }\n        if(op == 1)  add(l, r, x);\n        else if(op == 2)  assign(l, r, x);\n        else if(op == 3)  printf(\"%lld\\n\", kth(l, r, x));\n        else if(op == 4)  printf(\"%lld\\n\", sum(l, r, x, y));\n    }\n    return 0;\n}\n```\n\n## \u5199\u5728\u6700\u540e\n\u4ee5\u4e0a\u5c31\u662f\u5173\u4e8e\u672c\u9053 ODT/\u73c2\u6735\u8389\u6811 \u6a21\u677f\u9898\u9898\u89e3\u7684\u5168\u90e8\u5185\u5bb9\u5566\uff01\u795d\u4f60\u80fd\u591f\u901a\u8fc7\u81ea\u5df1\u7684\u80fd\u529b\u901a\u8fc7\u672c\u9898\uff0c\u4e0d\u8981\u6284\u88ad\u3002\n\n\u65b0\u4eba\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u82e5\u6709\u4e0d\u8db3\u8bf7\u89c1\u8c05\u3002",
        "postTime": 1626239982,
        "uid": 344700,
        "name": "calabash_love_hmz",
        "ccfLevel": 6,
        "title": "CF896C Willem, Chtholly and Seniorious \u9898\u89e3"
    },
    {
        "content": "\u6765\u4e00\u7bc7\u6bd4\u8f83\u6c34\u7684\u9898\u89e3\n\n~~\u636e\u8bf4\u672c\u9898\u662fODT\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u5f00\u7aef,\u51fa\u9898\u4eba\u5c45\u7136\u80fd\u81ea\u9020\u6570\u636e\u7ed3\u6784\u4e5f\u662f\u591f\u5f3a\u7684\u4e86~~\n\n~~\u8bf4\u5b9e\u8bdd\uff0c\u770b\u9898\u89e3\u524d\u6211\u4ee5\u4e3a\u8fd9\u662f\u5e26\u4fee\u83ab\u961f\uff0c\u4e0d\u8fc7\u8fd9\u90fd\u662f\u5f88\u4e45\u4ee5\u524d\u7684\u4e8b\u4e86~~\n\n\u54b3\u54b3\uff0c\u8a00\u5f52\u6b63\u4f20\n\n\u8fd9\u9898\u4e00\u5171\u67094\u79cd\u64cd\u4f5c\n\n1.\u533a\u95f4\u52a0\n\n2.\u533a\u95f4\u8d4b\u503c\n\n3.\u533a\u95f4\u7b2cK\u5927\n\n4.\u533a\u95f4N\u6b21\u65b9\u548c\uff1f\n\n\u5982\u679c\u53ea\u770b\u524d\u4e09\u79cd\u64cd\u4f5c\uff0c\u4f30\u8ba1\u6709\u540c\u5b66\u4f1a\u60f3\u5230\u7528\u4e3b\u5e2d\u6811\u6765\u7ef4\u62a4~~\u4f46\u6211\u4e0d\u4f1aQAQ~~\uff0c\u4f46\u5bf9\u4e8e\u7b2c\u56db\u79cd\u64cd\u4f5c\u6211\u4eec\u5374\u65e0\u4ece\u4e0b\u624b\u3002\n\n\u4e8e\u662f......~~\u66b4\u529b\u554a~~\n\n\u76f4\u63a5\u66b4\u529b\u4e71\u641e\uff0c\u8fd9\u6837\u4f1a\u62ff\u5230\u4e00\u4e2a\u8fd8\u770b\u5f97\u4e0b\u53bb\u7684\u5206\u6570\n\n\u4f46\u6709\u6ca1\u6709\u65b9\u6cd5\u4f18\u5316\u4e00\u4e0b\u66b4\u529b\u5462\uff1f\n\n\u4e8e\u662f\uff0c\u8bf8\u591a\u795e\u4ed9\u5c31\u53d1\u660e\u4e86\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u2014\u2014\u2014\u2014\u73c2\u6735\u8389\u6811\n\n\u5b66\u5b8c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u540e\uff0c\u4f60\u5e94\u8be5\u4f1a\u638c\u63e1\uff1a\n\n1.\u80fd\u591f\u5feb\u901f\u89e3\u51b3\u8be2\u95ee\u533a\u95f4N\u6b21\u65b9\u548c\u7684\u95ee\u9898\n\n2.\u5728\u6570\u636e\u968f\u673a\u5e76\u5e26\u6709\u533a\u95f4\u8d4b\u503c\u7684\u60c5\u51b5\u4e0b\u7528\u5b83\u6765A\u9898\n\n3.\u4f18\u5316\u66b4\u529b\uff0c\u9a97\u53d6\u4e00\u70b9\u5206\u6570\n\n~~4.\u5728\u6784\u9020\u6570\u636e\u4e0b\u4e0d\u8981\u7528\u8fd9\u4e2a\u73a9\u610f\u513f~~\n\n\u5f00\u59cb\u5427\n\n## \u4e00\u3001\u8282\u70b9\n\n\u73c2\u6735\u8389\u6811\u9996\u5148\u8282\u70b9\u975e\u5e38\u7384\u5b66,\u5b83\u50a8\u5b58\u7684\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u5e76\u4e14\u8fd9\u4e2a\u533a\u95f4\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u76f8\u540c\n\n\u6bd4\u5982\uff1a\n\n$l:1 \\ r:4 \\ val:4$\n\n$l:5 \\ r:5 \\ val:1$\n\n\u8fd9\u5c31\u662f\u4e24\u4e2a\u8282\u70b9\n\n\u770b\u4e0a\u53bb\u597d\u50cf\u548c\u6811\u6ca1\u6709\u4e00\u70b9\u5173\u7cfb\uff0c\u4f46\u56e0\u4e3a\u5b83\u7684\u8282\u70b9\u662f\u50a8\u5b58\u5728$set$\u91cc\u9762\u7684\uff0c\u800c$set$\u53c8\u662f\u5e73\u8861\u6811\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u5b83\u4e5f\u662f\u6811\u8fa3\n\n\u7ed3\u6784\u4f53\u5c31\u8fd9\u6837\n\n```cpp\nstruct node {\n\tint lft,rht;\n\tmutable ll val;\n\tnode (int l,int r=-1,ll v=0) :lft(l),rht(r),val(v) {}\n\tbool operator < (node a) const {\n\t\treturn lft<a.lft;\n\t}\n};\n```\n\n\u5c0f\u4e8e\u7b26\u53f7\u662f\u5f04$set$\u5fc5\u5907\u7684\uff0c\u8fd9\u662f\u6307\u6bcf\u4e2a\u533a\u95f4\u6309\u5de6\u7aef\u70b9\u9012\u589e\u6765\u6392\u6210\u7684\n\n```cpp\nset <node> s;\n```\n\n## \u4e8c\u3001\u521d\u59cb\u5316\n\n\u8fd9\u4e2a\u9898\u7684\u521d\u59cb\u5316\u5f88\u7b80\u5355\n\n\u76f4\u63a5\u628a\u6bcf\u4e2a\u8282\u70b9\u5148\u5b64\u7acb\u8d77\u6765\uff0c\u76f4\u63a5\u63d2\u5165$set$\u5c31\u597d\u4e86\n\n```cpp\nfor(register int i=1 ; i<=n ; ++i) s.insert(node(i,i,rnd()%vmax+1));\n```\n\n## \u4e09\u3001split\u64cd\u4f5c\n\n```cpp\n#define IT set<node>::iterator\n```\n\n\u8fd9\u4e2a\u51fd\u6570$split(pos)$\u7684\u610f\u601d\u5c31\u662f\u628a\u5305\u542bpos\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u8282\u70b9\u5206\u6210\u5de6\u6bb5$l$\u5230$pos-1$,\u53f3\u6bb5$pos$\u5230$r$\uff0c\u5e76\u8fd4\u56de\u53f3\u6bb5\u5730\u5740\n\n\u8fd9\u4e2a\u5e94\u5f53\u4e00\u53e5\u4e00\u53e5\u89e3\u91ca\n\n```cpp\ninline IT split(int pos) {\n\tIT it=s.lower_bound(node(pos));//\u627e\u5230\u7b2c\u4e00\u4e2a\u5de6\u7aef\u70b9\u5927\u4e8e\u7b49\u4e8epos\u7684\u8282\u70b9\n\tif(it!=s.end()&&it->lft==pos) return it;//\u8fd9\u662f\u6307\u8fd9\u4e2a\u8282\u70b9\u5728set\u5185\u5e76\u4e14\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u7aef\u70b9\u4e0b\u6807\u5c31\u662fpos\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u8be5\u8282\u70b9\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5fc5\u518d\u5206\u6210\u4e24\u6bb5\uff0c\u5df2\u7ecf\u5206\u597d\u4e86\n\t--it;//\u5426\u5219pos\u5c31\u5728\u5b83\u524d\u9762\u7684\u90a3\u4e2a\u8282\u70b9\n\tint l=it->lft,r=it->rht;\n\tll v=it->val;\n\ts.erase(it);//\u5148\u5728set\u91cc\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\n\ts.insert(node(l,pos-1,v));//\u7136\u540e\u518d\u63d2\u5165\u8282\u70b9l\u5230pos-1\n\treturn s.insert(node(pos,r,v)).first;//\u6700\u540e\u63d2\u5165\u8282\u70b9pos\u5230r\u5e76\u8fd4\u56de\u4e0b\u6807\n}\n```\n\u8fd9\u6bb5\u4ee3\u7801\u662f\u501f\u9274\u4e86 SuperJvRuo \u7684\n\n\u5269\u4e0b\u7684\u4e00\u5207\u533a\u95f4\u64cd\u4f5c\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5f88\u5bb9\u6613\u89e3\u51b3\u4e86\n\n1.\u533a\u95f4\u8d4b\u503c\n\n\u5148\u5206\u79bb\u51fal\u5230r\u7684\u6240\u6709\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u5b83\u4eec\uff0c\u518d\u65b0\u5efa\u4e00\u4e2al\u5230r\uff0c\u6743\u503c\u4e3av\u7684\u8282\u70b9\n\n```cpp\ninline void assign(int l,int r,ll v) {\n\tIT itr=split(r+1),itl=split(l);\n\ts.erase(itl,itr);\n\ts.insert(node(l,r,v));\n}\n```\n2.\u533a\u95f4\u52a0\n\n\u540c\u6837\uff0c\u5148\u5206\u79bb\u51fal\u5230r\u7684\u6240\u6709\u8282\u70b9\uff0c\u7136\u540e\u628a\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u90fd\u52a0\u4e0av\n\n```cpp\ninline void add(int l,int r,ll v) {\n\tIT itr=split(r+1),itl=split(l);\n\twhile(itl!=itr) itl->val+=v,++itl;\n}\n```\n\n3.\u533a\u95f4\u7b2ck\u5c0f\n\n\u5148\u5206\u79bb\uff0c\u518d\u628a\u8282\u70b9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\uff0c\u6bcf\u904d\u5386\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u5c06k\u51cf\u53bb\u5b83\u7684\u957f\u5ea6\uff0c\u5982\u679ck\u5c0f\u4e8e\u7b49\u4e8e0\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u5373\u662f\u7b2ck\u5c0f\u503c\n\n\u521a\u5f00\u59cb\u56e0\u6253\u4e86\u4e07\u80fd\u5934\u4e14\u5c06r\u5c0f\u5199\uff0c\u6211\u5c31\u6302\u4e86\uff0cCE\u4e86\uff0c\u8fd8\u88ab\u8fd9\u4e2a\u5de8\u4f6c\u5632\u8bbd\u4e86\uff0c@ThomasX\n\n```cpp\ninline ll Rank(int l,int r,int k) {\n\tvector < pair<ll,int> > v;\n\tIT itr=split(r+1),itl=split(l);\n\tv.clear();\n\twhile(itl!=itr) v.push_back(make_pair(itl->val,(itl->rht)-(itl->lft)+1)),++itl;\n\tsort(v.begin(),v.end());\n\tfor(register vector< pair<ll,int> >::iterator it=v.begin() ;it!=v.end() ; ++it) {\n\t\tk-=it->second;\n\t\tif(k<=0) return it->first;\n\t}\n\treturn -1;\n}\n```\n\n4.\u533a\u95f4N\u6b21\u65b9\u548c\n\n\u5148\u5206\u79bb\uff0c\u518d\u904d\u5386\u8282\u70b9\uff0c\u5c06ans\u52a0\u4e0a\u6743\u503c\u7684N\u6b21\u65b9\u4e58\u4ee5\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u957f\u5ea6\uff0c\u8f93\u51fa\u5373\u53ef\n\n\u8981\u7528\u5feb\u901f\u5e42\u54e6~~\u672c\u849f\u84bb\u56e0\u5feb\u901f\u5e42\u5199\u9519\u800c\u8c03\u4e86\u534a\u5c0f\u65f6~~\n\n```cpp\ninline ll sum(int l,int r,ll x,ll y) {\n\tIT itr=split(r+1),itl=split(l);\n\tll ans=0;\n\twhile(itl!=itr) {\n\t\tans+=((itl->rht)-(itl->lft)+1)*qpow(itl->val,x,y)%y;\n\t\tans%=y;++itl;\n\t}\n\treturn ans;\n}\n```\n \n## \u5b8c\u7ed3 hhh\uff0c\u633a\u6c34\u7684\n \n```cpp\n#include<bits/stdc++.h>\n#include<vector>\n#include<set>\n#include<algorithm>\n#define IT set<node>::iterator\n#define ll long long\nusing namespace std;\n\ninline ll read() {\n\tll res=0,f=1;char ch;\n\twhile(!isdigit(ch=getchar())) if(ch=='-') f=-1;\n\tdo {\n\t\tres=res*10+ch-'0';\n\t} while(isdigit(ch=getchar()));\n\treturn res*f;\n}\n\ninline ll qpow(ll a,ll b,ll p) {\n\tll ans=1,base=a%p;\n\twhile(b) {\n\t\tif(b&1) ans=(ans*base)%p;\n\t\tbase=(base*base)%p;\n\t\tb>>=1;\n\t}\n\treturn ans;\n}\n\nll seed,vmax,mod=1e9+7;\n\ninline int rnd() {\n\tll ret=seed;\n\tseed=(seed*7+13)%mod;\n\treturn ret;\n}\n\nstruct node {\n\tint lft,rht;\n\tmutable ll val;\n\tnode (int l,int r=-1,ll v=0) :lft(l),rht(r),val(v) {}\n\tbool operator < (node a) const {\n\t\treturn lft<a.lft;\n\t}\n};\n\nset <node> s;\n\ninline IT split(int pos) {\n\tIT it=s.lower_bound(node(pos));\n\tif(it!=s.end()&&it->lft==pos) return it;\n\t--it;\n\tint l=it->lft,r=it->rht;\n\tll v=it->val;\n\ts.erase(it);\n\ts.insert(node(l,pos-1,v));\n\treturn s.insert(node(pos,r,v)).first;\n}\n\ninline void assign(int l,int r,ll v) {\n\tIT itr=split(r+1),itl=split(l);\n\ts.erase(itl,itr);\n\ts.insert(node(l,r,v));\n}\n\ninline void add(int l,int r,ll v) {\n\tIT itr=split(r+1),itl=split(l);\n\twhile(itl!=itr) itl->val+=v,++itl;\n}\n\ninline ll Rank(int l,int r,int k) {\n\tvector < pair<ll,int> > v;\n\tIT itr=split(r+1),itl=split(l);\n\tv.clear();\n\twhile(itl!=itr) v.push_back(make_pair(itl->val,(itl->rht)-(itl->lft)+1)),++itl;\n\tsort(v.begin(),v.end());\n\tfor(register vector< pair<ll,int> >::iterator it=v.begin() ;it!=v.end() ; ++it) {\n\t\tk-=it->second;\n\t\tif(k<=0) return it->first;\n\t}\n\treturn -1;\n}\n\ninline ll sum(int l,int r,ll x,ll y) {\n\tIT itr=split(r+1),itl=split(l);\n\tll ans=0;\n\twhile(itl!=itr) {\n\t\tans+=((itl->rht)-(itl->lft)+1)*qpow(itl->val,x,y)%y;\n\t\tans%=y;++itl;\n\t}\n\treturn ans;\n}\n\nint main() {\n\tll n=read(),m=read();seed=read(),vmax=read();\n\tfor(register int i=1 ; i<=n ; ++i) s.insert(node(i,i,rnd()%vmax+1));\n\twhile(m--) {\n\t\tll op=(rnd()%4)+1,l=(rnd()%n)+1,r=(rnd()%n)+1,x,y;\n\t\tif(l>r) swap(l,r);\n\t\tif(op==1) {\n\t\t\tx=(rnd()%vmax)+1;\n\t\t\tadd(l,r,1LL*x);\n\t\t}\n\t\telse if(op==2) {\n\t\t\tx=(rnd()%vmax)+1;\n\t\t\tassign(l,r,1LL*x);\n\t\t}\n\t\telse if(op==3) {\n\t\t\tx=(rnd()%(r-l+1))+1;\n\t\t\tprintf(\"%lld\\n\",Rank(l,r,x));\n\t\t}\n\t\telse {\n\t\t\tx=(rnd()%vmax)+1,y=(rnd()%vmax)+1;\n\t\t\tprintf(\"%lld\\n\",sum(l,r,x,y));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1561874837,
        "uid": 79075,
        "name": "mzgwty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF896C \u3010Willem, Chtholly and Seniorious\u3011"
    },
    {
        "content": "## \u57fa\u4e8e\u94fe\u8868\u5b9e\u73b0\u7684\u73c2\u6735\u8389\u6811\n\n\u73c2\u6735\u8389\u6811\u5b9e\u8d28\u4e0a\u662f\u4e00\u79cd\u53ef\u4ee5\u7ef4\u62a4\u533a\u95f4\u4e0a\u7684\u5206\u88c2\u4e0e\u5408\u5e76\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u8981\u6c42\u6570\u636e\u662f\u968f\u673a\u7684\uff0c\u6216\u8005\u6709\u5927\u91cf\u7684\u968f\u673a\u5408\u5e76\u64cd\u4f5c\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u7ef4\u62a4\u7684\u533a\u95f4\u4e2a\u6570\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u503c\u3002\n\n\u4e00\u5f00\u59cb\uff0c\u6211\u4eec\u7528\u4e0d\u540c\u7684\u8282\u70b9\u8868\u793a $[1,1],[2,2],...,[n,n]$ \u4ee5\u53ca\u8be5\u533a\u95f4\u4e0a\u7684\u503c\u3002\n\n\u672c\u9898\u4e2d\u7684\u201c\u628a\u533a\u95f4 $[l,r]$ \u8d4b\u503c\u4e3a $x$\u201d\u5bf9\u5e94\u7740\u4e00\u4e2a\u5408\u5e76\u64cd\u4f5c\uff0c\u82e5\u968f\u673a\u5230\u7684 $[l,r]$ \u8303\u56f4\u6bd4\u8f83\u5927\uff0c\u5219\u610f\u5473\u7740\u6709\u5927\u91cf\u7684\u8282\u70b9\u4f1a\u5408\u5e76\u6210\u4e00\u4e2a\u8282\u70b9\u3002\u7ecf\u6d4b\u8bd5\uff0c\u5728\u82e5\u5e72\u6b21\u968f\u673a\u5408\u5e76\u540e\uff0c**\u533a\u95f4\u4e2a\u6570\u4f1a\u9aa4\u964d\u81f3\u4e00\u4e2a\u7a33\u5b9a\u7684\u8303\u56f4**\uff08\u5927\u7ea6\u51e0\u5341\u4e2a\uff09\uff0c\u8fd9\u662f\u7406\u89e3\u73c2\u6735\u8389\u6811\u7684\u5173\u952e\u3002\n\n\u56fe\u4f8b\uff1a\u6a2a\u8f74\u4e3a\u64cd\u4f5c\u6b21\u6570\uff0c\u7eb5\u8f74\u4e3a\u533a\u95f4\u4e2a\u6570\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/y5roe0d7.png)\n\n### \u6570\u636e\u5b9a\u4e49\n\n\u76ee\u524d\u4e3b\u6d41\u7684\u5b9e\u73b0\u662f\u57fa\u4e8e `set` \u6765\u7ef4\u62a4\u8282\u70b9\uff0c\u4f46\u7531\u4e8e\u5e73\u5747\u7ef4\u62a4\u7684\u533a\u95f4\u4e2a\u6570\u5f88\u5c0f\uff0c`set` \u7684\u4f18\u52bf\u5e76\u4e0d\u660e\u663e\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u94fe\u8868\uff08\u6216\u6570\u7ec4\uff09\u80fd\u66f4\u7b80\u6d01\u5730\u7ef4\u62a4\u5206\u88c2\u4e0e\u5408\u5e76\u64cd\u4f5c\u3002\n```cpp\ntypedef long long int64;\n\nstruct Block {\n    Block *next; // \u94fe\u8868\u4e0b\u4e00\u8282\u70b9\n    int l, r; // \u533a\u95f4\u8303\u56f4\n    int64 val; // \u533a\u95f4\u4e0a\u7684\u503c\n\n    Block(Block *next, int l, int r, int64 val): next(next), l(l), r(r), val(val) {}\n    bool operator<(const Block &b) const { return val < b.val; }\n} *root;\n```\n\n## \u57fa\u672c\u64cd\u4f5c\n\n### \u5206\u88c2\u533a\u95f4\n\n```cpp\n// \u8fd4\u56de\u5de6\u7aef\u70b9\u4e3a mid+1 \u7684\u533a\u95f4\nBlock *split(int mid) {\n    for (Block *b = root; b; b = b->next) { // \u904d\u5386\u94fe\u8868\n        if (b->l == mid + 1) { // \u5de6\u7aef\u70b9\u4e3a mid+1\n            return b;\n        }\n        // \u5bfb\u627e\u80fd\u5305\u542b mid \u548c mid+1 \u7684\u533a\u95f4 [l, r]\uff0c\u5c06\u5176\u88ab\u62c6\u5206\u6210 [l, mid] \u548c [mid+1, r]\n        if (b->l <= mid && mid + 1 <= b->r) {\n            b->next = new Block(b->next, mid + 1, b->r, b->val);\n            b->r = mid;\n            return b->next;\n        }\n    }\n    return nullptr; // \u672a\u627e\u5230\uff0c\u8fd4\u56de\u7a7a\n}\n```\n\n\u5728\u64cd\u4f5c\u533a\u95f4\u65f6\uff0c\u7531\u4e8e\u4e0d\u80fd\u53ea\u7ef4\u62a4\u533a\u95f4\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u64cd\u4f5c\u8fdb\u884c\u4e4b\u524d\u90fd\u9700\u8981\u9884\u5148\u5206\u88c2\u533a\u95f4\uff0c\u518d\u5b8c\u6210\u76f8\u5e94\u64cd\u4f5c\u3002\n\n```cpp\nBlock *lb, *rb;\n\n// \u9884\u5206\u88c2\uff0c\u4fdd\u8bc1\u540e\u7eed\u64cd\u4f5c\u5728 [l, r] \u5185\u90e8\nvoid prepare(int l, int r) {\n    lb = split(l - 1);\n    rb = split(r);\n}\n```\n\n### \u5408\u5e76\u533a\u95f4\n\n```cpp\nvoid merge(int l, int r, int64 val) {\n    prepare(l, r);\n    lb->r = r; // \u5c06\u533a\u95f4 [lb.l, lb.r] \u4fee\u6539\u6210 [lb.l, r]\n    lb->val = val;\n    lb->next = rb; // \u5c06 [lb.l, r] \u94fe\u81f3\u5176\u53f3\u4fa7\u76f8\u90bb\u533a\u95f4\n}\n// \u6ce8\uff1a\u8fd9\u91cc\u6ca1\u6709\u91ca\u653e\u88ab\u5220\u9664\u8282\u70b9\u7684\u5185\u5b58\uff0c\u82e5\u6709\u9700\u8981\u53ef\u81ea\u884c\u6dfb\u52a0\n```\n\n### \u533a\u95f4\u4fee\u6539\u4e0e\u8ba1\u7b97\n\n\u904d\u5386\u7edf\u8ba1 $[l,r]$ \u5373\u53ef\u3002\n\n```cpp\n// \u533a\u95f4\u66f4\u65b0\nvoid add(int l, int r, int64 val) {\n    prepare(l, r);\n    for (Block *b = lb; b != rb; b = b->next)\n        b->val += val;\n}\n\n// \u533a\u95f4\u7b2c k \u5c0f\nint64 kth(int l, int r, int k) {\n    prepare(l, r);\n    vector<Block> blocks;\n    for (Block *b = lb; b != rb; b = b->next)\n        blocks.emplace_back(*b);\n    sort(blocks.begin(), blocks.end());\n    k--;\n    for (Block b: blocks) {\n        int cnt = b.r - b.l + 1;\n        if (k >= cnt) k -= cnt;\n        else return b.val;\n    }\n}\n\n// \u5feb\u901f\u5e42\nint64 quick_pow(int64 x, int n, int64 mod) {\n    x %= mod;\n    int64 res = 1 % mod;\n    for (; n; n >>= 1) {\n        if (n & 1) res = res * x % mod;\n        x = x * x % mod;\n    }\n    return res;\n}\n\n// \u533a\u95f4\u5e42\u548c\nint64 pow_sum(int l, int r, int n, int64 mod) {\n    prepare(l, r);\n    int64 sum = 0;\n    for (Block *b = lb; b != rb; b = b->next)\n        sum += int64(b->r - b->l + 1) * quick_pow(b->val, n, mod);\n    return sum % mod;\n}\n```\n\n## AC \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\ntypedef long long int64;\n\nint64 seed;\n\n// \u751f\u6210 [0, n-1] \u7684\u968f\u673a\u6570\nint rand(int n) {\n    int64 ret = seed;\n    seed = (seed * 7 + 13) % int64(1e9 + 7);\n    return int(ret) % n;\n}\n\nstruct Block {\n    Block *next;\n    int l, r;\n    int64 val;\n\n    Block(Block *next, int l, int r, int64 val): next(next), l(l), r(r), val(val) {}\n    bool operator<(const Block &b) const { return val < b.val; }\n} *root, *lb, *rb;\n\nBlock *split(int mid) {\n    for (Block *b = root; b; b = b->next) {\n        if (b->l == mid + 1) {\n            return b;\n        }\n        if (b->l <= mid && mid + 1 <= b->r) {\n            b->next = new Block(b->next, mid + 1, b->r, b->val);\n            b->r = mid;\n            return b->next;\n        }\n    }\n    return nullptr;\n}\n\nvoid prepare(int l, int r) {\n    lb = split(l - 1);\n    rb = split(r);\n}\n\nvoid add(int64 val) {\n    for (Block *b = lb; b != rb; b = b->next)\n        b->val += val;\n}\n\nvoid merge(int r, int64 val) {\n    lb->r = r;\n    lb->val = val;\n    lb->next = rb;\n}\n\nint64 kth(int k) {\n    vector<Block> blocks;\n    for (Block *b = lb; b != rb; b = b->next)\n        blocks.emplace_back(*b);\n    sort(blocks.begin(), blocks.end());\n    k--;\n    for (Block b: blocks) {\n        int cnt = b.r - b.l + 1;\n        if (k >= cnt) k -= cnt;\n        else return b.val;\n    }\n}\n\nint64 quick_pow(int64 x, int n, int64 mod) {\n    x %= mod;\n    int64 res = 1 % mod;\n    for (; n; n >>= 1) {\n        if (n & 1) res = res * x % mod;\n        x = x * x % mod;\n    }\n    return res;\n}\n\nint64 pow_sum(int n, int64 mod) {\n    int64 sum = 0;\n    for (Block *b = lb; b != rb; b = b->next)\n        sum += int64(b->r - b->l + 1) * quick_pow(b->val, n, mod);\n    return sum % mod;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int n, m, v_max;\n    cin >> n >> m >> seed >> v_max;\n    root = new Block(nullptr, 0, 0, rand(v_max) + 1);\n    Block *b = root;\n    for (int i = 1; i < n; i++) {\n        b->next = new Block(nullptr, i, i, rand(v_max) + 1);\n        b = b->next;\n    }\n\n    for (; m; m--) {\n        int op = rand(4) + 1;\n        int l = rand(n), r = rand(n);\n        if (l > r) swap(l, r);\n        int x = op == 3 ? rand(r - l + 1) + 1 : rand(v_max) + 1;\n        prepare(l, r); // \u6240\u6709\u64cd\u4f5c\u524d\u9884\u5206\u88c2\u533a\u95f4\n        switch (op) {\n            case 1:\n                add(x);\n                break;\n            case 2:\n                merge(r, x);\n                break;\n            case 3:\n                cout << kth(x) << '\\n';\n                break;\n            default:\n                int64 y = rand(v_max) + 1;\n                cout << pow_sum(x, y) << '\\n';\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1572359533,
        "uid": 266651,
        "name": "\u7075\u8336\u5c71\u827e\u5e9c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF896C \u3010Willem, Chtholly and Seniorious\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u8bf7\u70b9\u8fd9\u91cc](https://www.cnblogs.com/BrianPeng/p/12356392.html)\n\n### Intro: \n\n~~\u73c2\u6735\u8389\u6811\u6a21\u677f\u9898~~\n\n\u600e\u4e48\u6240\u6709\u9898\u89e3\u90fd\u662f\u73c2\u6735\u8389\u6811\u554a\u554a\u554a\u554a\n\n### \u4e8e\u662f\u672c\u849f\u84bb\u51b3\u5b9a\u6765\u4e00\u53d1\u4e2d(feng)\u89c4(kuang)\u4e2d(luan)\u77e9(gao)\u7684\u7ebf\u6bb5\u6811\n\n\u9996\u5148\u8fd9\u68f5\u7ebf\u6bb5\u6811**\u53ea\u7ef4\u62a4\u61d2\u6807\u8bb0**\n\n### \u6765\u4e00\u53d1\u5b9a\u4e49\n\n\u7ebf\u6bb5\u6811\u8282\u70b9$u$\u7ef4\u62a4\u533a\u95f4$[l_u,r_u]$\u7684\u5185\u5bb9\n\n**\u61d2\u6807\u8bb0**$t_u$\uff1a\u5f53$t_u\\not=0$\u65f6\u8868\u793a\u533a\u95f4$[l_u,r_u]$\u5168\u662f$t_u$\uff0c$t_u=0$\u5c31\u662f\u6ca1\u6709\u61d2\u6807\u8bb0\n\n---\n\n### \u5efa\u7acb\u7ebf\u6bb5\u6811\n\n\u5728\u5efa\u7acb\u65f6\u987a\u4fbf\u5904\u7406$l_u,r_u$\uff0c\u53ea\u8981\u5f53$l_u=r_u$\u65f6\u5c31\u6253\u4e0a\u6807\u8bb0\n\nP.s $Ls=2u,Rs=2u+1$\n\n```cpp\nvoid bld(int u){\n\tif(t[u].l==t[u].r){t[u].v=rnd()%vmx+1;return;}\n\tt[Ls].l=t[u].l,t[Rs].l=(t[Ls].r=(t[u].l+t[u].r)>>1)+1,t[Rs].r=t[u].r;\n\tbld(Ls),bld(Rs);\n}\n```\n\n### \u533a\u95f4\u52a0\n\n\u627e\u5230\u6240\u6709\u88ab\u8986\u76d6\u4e14\u6709\u6807\u8bb0\u7684\u533a\u95f4\uff0c\u8ba9$t_u$\u52a0\u4e0a$x$\n\nP.s Don't forget **pushdown()**.\n\n```cpp\nvoid pd(int u){if(t[u].v)t[Ls].v=t[Rs].v=t[u].v,t[u].v=0;}\nvoid mdfa(int u){\n\tif(r<t[u].l||t[u].r<l)return;\n\tif(l<=t[u].l&&t[u].r<=r&&t[u].v)t[u].v+=x;\n\telse pd(u),mdfa(Ls),mdfa(Rs);\n}\n```\n### \u533a\u95f4\u8bbe\u7f6e\n\n\u4e0e\u4e00\u822c\u61d2\u6807\u8bb0\u64cd\u4f5c\u6700\u4e3a\u7c7b\u4f3c\uff0c\u627e\u5230\u8986\u76d6\u533a\u95f4\uff0c\u6253\u4e0a\u6807\u8bb0\u5373\u53ef\n\n```cpp\nvoid mdfs(int u){\n\tif(r<t[u].l||t[u].r<l)return;\n\tif(l<=t[u].l&&t[u].r<=r)t[u].v=x;\n\telse pd(u),mdfs(Ls),mdfs(Rs);\n}\n```\n\n### \u533a\u95f4\u67e5\u8be2\n\n\u5728\u8fd9\u91cc\u6211\u4eec\u501f\u52a9\u4e00\u4e2a vector\n\n```cpp\nstruct Q{int v,s;};\nvector<Q>q;\n```\n\u5176\u4e2d$v$\u8868\u793a\u533a\u95f4\u503c\uff0c$s$\u8868\u793a\u533a\u95f4\u957f\u5ea6\n\n\u9996\u5148\u628a\u6240\u6709**\u6709\u4ea4\u96c6**\u4e14\u6709\u6807\u8bb0\u7684\u533a\u95f4\u5168\u90e8\u5b58\u5230\u8fd9\u4e2a vector \u91cc\uff08\u6ce8\u610f$s$\u7684\u5904\u7406\uff09\n\n```cpp\nvoid qry(int u){\n\tif(r<t[u].l||t[u].r<l)return;\n\tif(t[u].v)q.push_back({t[u].v,min(t[u].r,r)-max(t[u].l,l)+1});\n\telse qry(Ls),qry(Rs);\n}\n```\n\n\u90a3\u4e48\u5bf9\u4e8e\u533a\u95f4\u7b2c$x$\u5c0f\uff0c\u5c06$q$\u6309$v$\u6392\u5e8f\uff0c\u7136\u540e\u66b4\u529b\u5373\u53ef ~~\uff08vector \u771f\u597d\u7528\uff09~~\n\n```cpp\nq.clear(),qry(1);\nsort(q.begin(),q.end(),[](Q a,Q b){return a.v<b.v;});\nfor(Q i:q){\n\tif(x<=i.s){wr(i.v),Pe;break;}\n\tx-=i.s;\n}\n```\n\n\u5bf9\u4e8e\u533a\u95f4\u5e42\u6b21\u548c\uff0c\u6392\u5e8f\u90fd\u4e0d\u7528\u4e86\uff0c**\u76f4\u63a5\u66b4\u626b** ~~\uff08\u8fd9\u4e48\u611f\u89c9\u548c\u73c2\u6735\u8389\u6811\u4e00\u526f\u5fb7\u884c\uff09~~\n\n```cpp\nans=0,y=rnd()%vmx+1,q.clear(),qry(1);\nfor(Q i:q)ans=(ans+i.s*fpw(i.v,x)%y)%y;\nwr(ans),Pe;\n```\n\n**Time complexity:** $O($\u7384\u5b66$)$\uff08\u5927\u96fe\n\n**Memory complexity:** $O(n)$\n\n\u9644\u4e0a\u603b\u4ee3\u7801\uff08$10.60$s / $9.05$MB\uff09\n\n~~\uff08\u6253\u7684\u6bd4\u73c2\u6735\u8389\u6811\u96be\uff0c\u7a7a\u95f4\u6bd4\u73c2\u6735\u8389\u6811\u5927\uff0c\u8dd1\u7684\u6bd4\u73c2\u6735\u8389\u6811\u6162\uff09~~\n\n```cpp\n//This program is written by Brian Peng.\n#pragma GCC optimize(\"Ofast\",\"inline\",\"no-stack-protector\")\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define Rd(a) (a=read())\n#define Gc(a) (a=getchar())\n#define Pc(a) putchar(a)\nint read(){\n\tint u;char c(getchar());bool k;\n\twhile(!isdigit(c)&&c^'-')if(Gc(c)==EOF)exit(0);\n\tif(c^'-')k=1,u=c&15;else k=u=0;\n\twhile(isdigit(Gc(c)))u=(u<<1)+(u<<3)+(c&15);\n\treturn k?u:-u;\n}\nvoid wr(int a){\n\tif(a<0)Pc('-'),a=-a;\n\tif(a<=9)Pc(a|'0');\n\telse wr(a/10),Pc((a%10)|'0');\n}\nsigned const INF(0x3f3f3f3f),NINF(0xc3c3c3c3);\nlong long const LINF(0x3f3f3f3f3f3f3f3fLL),LNINF(0xc3c3c3c3c3c3c3c3LL);\n#define Ps Pc(' ')\n#define Pe Pc('\\n')\n#define Frn0(i,a,b) for(int i(a);i<(b);++i)\n#define Frn1(i,a,b) for(int i(a);i<=(b);++i)\n#define Frn_(i,a,b) for(int i(a);i>=(b);--i)\n#define Mst(a,b) memset(a,b,sizeof(a))\n#define File(a) freopen(a\".in\",\"r\",stdin),freopen(a\".out\",\"w\",stdout)\n#define N (262150)\n#define Ls (u<<1)\n#define Rs (Ls|1)\nint n,m,sd,vmx,op,l,r,x,y,ans;\nstruct SgT{int l,r,v;}t[N];\nstruct Q{int v,s;};\nvector<Q>q;\nint rnd(){int r(sd);sd=(sd*7+13)%1000000007;return r;}\nvoid pd(int u){if(t[u].v)t[Ls].v=t[Rs].v=t[u].v,t[u].v=0;}\nvoid bld(int u);\nvoid mdfa(int u);\nvoid mdfs(int u);\nvoid qry(int u);\nint fpw(int a,int b){int r(1);a%=y;while(b)b&1?r=r*a%y:0,a=a*a%y,b>>=1;return r;}\nsigned main(){\n\tt[1].l=1,t[1].r=Rd(n),Rd(m),Rd(sd),Rd(vmx);\n\tbld(1);\n\twhile(m--){\n\t\top=rnd()%4+1,l=rnd()%n+1,r=rnd()%n+1;\n\t\tif(l>r)swap(l,r);\n\t\tx=rnd()%(op==3?r-l+1:vmx)+1;\n\t\tswitch(op){\n\t\t\tcase 1:mdfa(1);break;\n\t\t\tcase 2:mdfs(1);break;\n\t\t\tcase 3:q.clear(),qry(1);\n\t\t\t\tsort(q.begin(),q.end(),[](Q a,Q b){return a.v<b.v;});\n\t\t\t\tfor(Q i:q){\n\t\t\t\t\tif(x<=i.s){wr(i.v),Pe;break;}\n\t\t\t\t\tx-=i.s;\n\t\t\t\t}break;\n\t\t\tcase 4:ans=0,y=rnd()%vmx+1,q.clear(),qry(1);\n\t\t\t\tfor(Q i:q)ans=(ans+i.s*fpw(i.v,x)%y)%y;\n\t\t\t\twr(ans),Pe;break;\n\t\t}\n\t}\n\texit(0);\n}\nvoid bld(int u){\n\tif(t[u].l==t[u].r){t[u].v=rnd()%vmx+1;return;}\n\tt[Ls].l=t[u].l,t[Rs].l=(t[Ls].r=(t[u].l+t[u].r)>>1)+1,t[Rs].r=t[u].r;\n\tbld(Ls),bld(Rs);\n}\nvoid mdfa(int u){\n\tif(r<t[u].l||t[u].r<l)return;\n\tif(l<=t[u].l&&t[u].r<=r&&t[u].v)t[u].v+=x;\n\telse pd(u),mdfa(Ls),mdfa(Rs);\n}\nvoid mdfs(int u){\n\tif(r<t[u].l||t[u].r<l)return;\n\tif(l<=t[u].l&&t[u].r<=r)t[u].v=x;\n\telse pd(u),mdfs(Ls),mdfs(Rs);\n}\nvoid qry(int u){\n\tif(r<t[u].l||t[u].r<l)return;\n\tif(t[u].v)q.push_back({t[u].v,min(t[u].r,r)-max(t[u].l,l)+1});\n\telse qry(Ls),qry(Rs);\n}\n```\n\n---\n\n### Conclusion: \n\n\u4ed4\u7ec6\u60f3\u60f3\u5176\u5b9e\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u4e5f\u662f\u5229\u7528**\u968f\u673a\u6570\u636e\u7684\u591a\u6b21\u533a\u95f4\u8bbe\u7f6e**\uff0c**\u51cf\u5c11\u6709\u6548\u61d2\u6807\u8bb0\u7684\u6570\u91cf**\u4ee5\u4f18\u5316\u67e5\u8be2\u590d\u6742\u5ea6\n\n\u5982\u679c\u6ca1\u6709\u533a\u95f4\u8bbe\u7f6e\uff0c\u7167\u6837$O(nm)$\u7206\u70b8\n\n~~\u6240\u4ee5**\u4ee5\u540e\u770b\u89c1\u7ebf\u6bb5\u6811\u662f\u8fd9\u4e48\u6784\u9020\u7684\uff0c\u5c31\u679c\u65ad\u4f7f\u7528\u73c2\u6735\u8389\u6811\u5427**~~\uff08\u5927\u96fe\n\n### Special announcement\n\n\u867d\u7136\u8fd9\u9898\u6211\u6ca1\u6253\u73c2\u6735\u8389\u6811\uff0c\u4f46\u662f\n\n## \u6211\u6c38\u8fdc\u559c\u6b22\u73c2\u6735\u8389\uff01\uff01\uff01\uff01\uff01\n\n\u6709\u8f93\u5165\u6cd5\u4e3a\u8bc1\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lrmebcd7.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/xhugky1p.png)\n\n",
        "postTime": 1582518243,
        "uid": 66199,
        "name": "Bring",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF896C \u3010Willem, Chtholly and Seniorious\u3011"
    },
    {
        "content": "\u73c2\u6735\u8389\u6811\uff08Chtholly Tree\uff09\uff0c\u53c8\u540d\u8001\u53f8\u673a\u6811\uff08Old Driver Tree, ODT\uff09\uff0c\u662f\u4e00\u79cd\u975e\u5e38\u66b4\u529b\u7684\u7ef4\u62a4\u5e8f\u5217\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u5176\u901a\u8fc7\u7ef4\u62a4\u503c\u76f8\u540c\u7684\u8fde\u7eed\u6bb5\u6765\u4fdd\u8bc1\u6548\u7387\uff0c\u5728\u7279\u6b8a\u6784\u9020\u7684\u6570\u636e\u4e0b\u4f1a\u9000\u5316\u4e3a\u666e\u901a\u66b4\u529b\u7b97\u6cd5\u3002\n\n**\u6ce8\uff1a\u4e0b\u5217\u4ee3\u7801\u5747\u53ef\u4ee5\u5728 `C++14` \u6807\u51c6\u4e0b\u7f16\u8bd1\u3002**\n\n## 1 \u524d\u7f6e\u77e5\u8bc6\n\n1. \u719f\u7ec3\u638c\u63e1 `std::set` \u7684\u7528\u6cd5\u3002\n\n\u6ca1\u4e86\uff1f\u6ca1\u9519\u3002\n\n## 2 \u4e00\u4e2a\u4f8b\u5b50\n\n[CF896C](http://codeforces.com/problemset/problem/896/C) \u662f\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u6a21\u677f\u9898\uff0c\u73c2\u6735\u8389\u6811\u4e5f\u6b63\u662f\u6765\u6e90\u4e8e\u672c\u9898\u3002\n\n\u4e0b\u9762\u662f\u9898\u9762\u90e8\u5206\uff1a\n\n> \u4f60\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\uff0c\u5e76\u652f\u6301\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a\n>\n> 1. \u7ed9\u533a\u95f4 $ [l,r] $ \u5185\u7684\u6240\u6709\u6570\u5b57\u52a0\u4e0a $ x $ \u3002\n> 2. \u5c06\u533a\u95f4 $ [l,r] $ \u5185\u7684\u6240\u6709\u6570\u5b57\u8d4b\u503c\u4e3a $ x $ \u3002\n> 3. \u6c42\u533a\u95f4 $ [l,r] $ \u5185\u6240\u6709\u6570\u5b57\u4e2d\u7b2c $ x $ \u5c0f\u7684\u6570\u5b57\uff08\u91cd\u590d\u6570\u5b57\u591a\u6b21\u8ba1\u7b97\uff09\u3002\n> 4. \u6c42 $ \\sum_{i=l}^{r} a_i^x \\bmod y $ \u7684\u503c\u3002\n>\n> \u9898\u76ee\u4fdd\u8bc1\u6570\u636e\u968f\u673a\u3002\n\n\u524d\u4e09\u4e2a\u64cd\u4f5c\u90fd\u4e0d\u7b97\u592a\u96be\uff0c\u4f7f\u7528\u5e38\u89c4\u7684\u6570\u636e\u7ed3\u6784\uff08\u4e3b\u5e2d\u6811\uff09\u90fd\u53ef\u4ee5\u5706\u6ee1\u89e3\u51b3\u3002\n\n\u95ee\u9898\u5728\u4e8e\u7b2c\u56db\u4e2a\u64cd\u4f5c\u3002\u4e3a\u4ec0\u4e48\u5e38\u89c4\u7684\u6570\u636e\u7ed3\u6784\u5728\u7b2c\u56db\u4e2a\u64cd\u4f5c\u9762\u524d\u65e0\u80fd\u4e3a\u529b\u5462\uff1f\u4e3b\u8981\u5728\u4e8e\u5176\u5e76\u4e0d\u80fd\u65b9\u4fbf\u5730\u5206\u89e3\u4e3a\u4e24\u4e2a\u5b50\u533a\u95f4\u7684\u95ee\u9898\u3002\n\n\u8fd9\u65f6\u5019\u73c2\u6735\u8389\u6811\u5c31\u8981\u51fa\u573a\u4e86\u3002\n\n## 3 ODT \u7684\u57fa\u672c\u64cd\u4f5c\n\n### 3.1 \u8282\u70b9\u7ed3\u6784\n\n\u6211\u4eec\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e2a\u73c2\u6735\u8389\u6811\u7684\u8282\u70b9\uff1a\n\n```cpp\nstruct node\n{\n int l,r;//\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\n mutable long long val;\n //mutable \u4fee\u9970\u8be5\u53d8\u91cf\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728 set \u4e2d\u4fee\u6539\u8be5\u53d8\u91cf\u7684\u503c\uff0c\u800c\u4e0d\u662f\u53d6\u51fa\u5143\u7d20\u4fee\u6539\u540e\u518d\u91cd\u65b0\u63d2\u5165 set\n node(int L,int R=-1,long long Val=0)\n {\n  l=L,r=R,val=Val;\n }\n bool operator<(const node&a)const\n {\n  return l<a.l;\n }\n};\n```\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a `set<node> odt` \u6765\u7ef4\u62a4\u4e00\u68f5 ODT\u3002\n\n### 3.2 \u5206\u5272\u533a\u95f4\u64cd\u4f5c\uff1asplit\n\n\u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4 $ [l,r] $ \u548c\u4e00\u4e2a\u4f4d\u7f6e $ pos $ \uff0c\u600e\u4e48\u628a\u8fd9\u4e2a\u533a\u95f4\u5206\u5272\u4e3a $ [l,pos-1] $ \u548c $ [pos,r] $ \u4e24\u4e2a\u533a\u95f4\u5462\uff1f\n\n\u5927\u81f4\u6d41\u7a0b\u5f88\u7b80\u5355\uff1a\n\n1. \u5148\u5728 ODT \u4e2d\u627e\u5230\u542b\u6709 $ pos $ \u4f4d\u7f6e\u7684\u533a\u95f4\u3002\n2. \u5982\u679c $ pos $ \u5df2\u7ecf\u662f\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u5219\u65e0\u9700\u5206\u5272\u3002\n3. \u5426\u5219\u6211\u4eec\u628a\u539f\u6765\u7684\u533a\u95f4\u5220\u9664\uff0c\u63d2\u5165\u4e24\u4e2a\u65b0\u533a\u95f4\u3002\n\n\u8be6\u7ec6\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nauto split(int pos)\n{\n auto it=odt.lower_bound(node(pos));//\u627e\u5230\u5de6\u7aef\u70b9\u4e0d\u5c0f\u4e8e pos \u7684\u533a\u95f4\n if(it!=odt.end()&&it->l==pos)return it;//pos \u662f\u533a\u95f4\u5de6\u7aef\u70b9\u65f6\u65e0\u9700\u5206\u5272\n it--;//pos \u4e00\u5b9a\u5728\u524d\u4e00\u4e2a\u533a\u95f4\u4e2d\n int l=it->l,r=it->r;\n long long val=it->val;\n odt.erase(it);//\u5220\u9664\u539f\u6765\u7684\u533a\u95f4\n odt.insert(node(l,pos-1,val));\n return odt.insert(node(pos,r,val)).first;//\u63d2\u5165\u4e24\u4e2a\u65b0\u533a\u95f4\n //\u8fd9\u91cc\u7684\u8fd4\u56de\u503c\u662f\u540e\u534a\u6bb5\u533a\u95f4\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\n}\n```\n\n\u7ecf\u8fc7\u8fd9\u6837\u7684\u5206\u5272\u64cd\u4f5c\u540e\uff0c\u5bb9\u6613\u53d1\u73b0\u4efb\u610f\u4e24\u4e2a\u533a\u95f4\u6ca1\u6709\u76f8\u4ea4\u7684\u90e8\u5206\uff0c\u8fd9\u662f\u4fdd\u8bc1\u6211\u4eec\u63a5\u4e0b\u6765\u64cd\u4f5c\u6b63\u786e\u6027\u7684\u524d\u63d0\u3002\n\n### 3.3 \u5408\u5e76\u533a\u95f4\u64cd\u4f5c\uff1aassign\n\n\u5982\u679c\u5149\u5206\u5272\u533a\u95f4\u800c\u4e0d\u5408\u5e76\u7684\u8bdd\uff0c\u6211\u4eec\u4e8b\u5b9e\u4e0a\u5c31\u662f\u5bf9\u4e00\u5806\u957f\u5ea6\u4e3a $ 1 $ \u7684\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\uff0c\u73c2\u6735\u8389\u6811\u4e5f\u5c31\u4f1a\u9000\u5316\u4e3a\u666e\u901a\u66b4\u529b\u7b97\u6cd5\u3002\n\n\u901a\u8fc7\u5408\u5e76\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u8fc5\u901f\u964d\u4f4e\u73c2\u6735\u8389\u6811\u7684\u5927\u5c0f\uff0c\u4fdd\u8bc1\u73c2\u6735\u8389\u6811\u7684\u6548\u7387\u3002\n\n\u8fd9\u91cc\u5148\u7ed9\u51fa\u5408\u5e76\u64cd\u4f5c\u7684\u4ee3\u7801\uff1a\n\n```cpp\nvoid assign(int l,int r,long long val)\n{\n auto itr=split(r+1),itl=split(l);\n odt.erase(itl,itr);//\u5220\u9664[itl,itr)\u533a\u95f4\u5185\u7684\u6240\u6709\u5143\u7d20\uff08\u6ce8\u610f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff09\n odt.insert(node(l,r,val));//\u5c06\u539f\u6765\u7684\u8bf8\u591a\u5c0f\u533a\u95f4\u7528\u4e00\u4e2a\u5927\u533a\u95f4\u4ee3\u66ff\n}\n```\n\n\u6ce8\u610f\uff1a**\u5728\u6267\u884c `split` \u64cd\u4f5c\u65f6\uff0c\u5e94\u5148 `split` \u53f3\u7aef\u70b9\uff0c\u518d `split` \u5de6\u7aef\u70b9**\uff0c\u5426\u5219\u53ef\u80fd\u4f1a RE\u3002\n\n\u901a\u8fc7\u4e24\u6b21 `split` \u64cd\u4f5c\uff0c $ [l,r] $ \u533a\u95f4\u5185\u4e00\u5b9a\u90fd\u662f\u6574\u6bb5\u533a\u95f4\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u5220\u9664\u539f\u6765\u7684\u96f6\u6563\u533a\u95f4\uff0c\u7528\u5927\u533a\u95f4\u4ee3\u66ff\u3002\n\n\u7ecf\u8fc7 `assign` \u64cd\u4f5c\u540e\uff0cODT \u7684\u89c4\u6a21\u4f1a\u4e0b\u964d\u4e0d\u5c11\uff0c\u4ece\u800c\u4fdd\u8bc1 ODT \u7684\u5b9e\u9645\u8fd0\u884c\u6548\u7387\u3002\n\n### 3.4 \u5176\u4ed6\u64cd\u4f5c\n\n\u6240\u6709\u533a\u95f4\u64cd\u4f5c\u90fd\u53ef\u4ee5\u5957\u8fd9\u6837\u7684\u4e00\u4e2a\u6a21\u677f\uff1a\n\n1. \u5148 `split` \u53f3\u7aef\u70b9\uff0c\u518d `split` \u5de6\u7aef\u70b9\uff0c\u83b7\u5f97\u4e24\u4e2a\u7aef\u70b9\uff08\u5de6\u95ed\u53f3\u5f00\uff09\u7684\u8fed\u4ee3\u5668\u3002\n2. \u5bf9\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u533a\u95f4\u66b4\u529b\u66f4\u6539\u3002\n\n\u4ee3\u7801\u5dee\u4e0d\u591a\u957f\u8fd9\u6837\uff1a\n\n```cpp\nvoid update(int l,int r)\n{\n auto itr=split(r+1),itl=split(l);\n for(auto it=itl;it!=itr;it++)\n  //do something\n}\n```\n\n\u6211\u4eec\u56de\u5230\u90a3\u9053\u6a21\u677f\u9898\u3002\n\n\u9996\u5148\u662f\u533a\u95f4\u52a0\u4e00\u4e2a\u503c\uff1a\n\n```cpp\nvoid add(int l,int r,long long val)\n{\n auto itr=split(r+1),itl=split(l);\n for(auto it=itl;it!=itr;it++)\n  it->val+=val;//\u56e0\u4e3a val \u88ab mutable \u5173\u952e\u5b57\u4fee\u9970\uff0c\u4ece\u800c\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 set \u91cc\u5143\u7d20\u7684\u503c\n}\n```\n\n\u63a5\u4e0b\u6765\u662f\u533a\u95f4\u7b2c $ k $ \u5c0f\uff0c\u66b4\u529b\u53d6\u51fa\u533a\u95f4\u5185\u6240\u6709\u6bb5\u6392\u5e8f\u4e00\u904d\u5373\u53ef\uff1a\n\n```cpp\ntypedef pair<long long,int> pii;\nlong long kth(int l,int r,int k)\n{\n vector<pii> a;\n auto itr=split(r+1),itl=split(l);\n for(auto it=itl;it!=itr;it++)\n  a.push_back(pii(it->val,(it->r)-(it->l)+1));\n sort(a.begin(),a.end());\n for(auto it=a.begin();it!=a.end();it++)\n {\n  k-=it->second;\n  if(k<=0)return it->first;\n }\n return -1;\n}\n```\n\n\u7136\u540e\u662f\u533a\u95f4\u5e42\u6b21\u548c\uff0c\u8fd8\u662f\u66b4\u529b\uff0c\u53d6\u51fa\u533a\u95f4\u5185\u6240\u6709\u6bb5\u7d2f\u52a0\u6c42\u548c\uff1a\n\n```cpp\nlong long sum(int l,int r,int x,int y)\n{\n long long ans=0;\n auto itr=split(r+1),itl=split(l);\n for(auto it=itl;it!=itr;it++)\n  ans=(ans+fpow(it->val,x,y)*((it->r)-(it->l)+1))%y;\n return ans;\n}\n```\n\n**\u6ce8\u610f\u5230\u6211\u4eec\u7684\u533a\u95f4\u64cd\u4f5c\u90fd\u662f\u76f4\u63a5\u5bf9\u503c\u76f8\u540c\u7684\u8fde\u7eed\u6bb5\u8fdb\u884c\u5904\u7406\uff0c\u5f53\u6bb5\u6570\u8f83\u591a\u7684\u65f6\u5019\uff0c\u6548\u7387\u5c31\u4f1a\u964d\u4f4e\u3002**\n\n\u6a21\u677f\u9898\u7684\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <set>\n#include <vector>\n#define MOD 1000000007\nusing namespace std;\nstruct node\n{\n int l,r;\n mutable long long val;\n node(int L,int R=-1,long long Val=0)\n {\n  l=L,r=R,val=Val;\n }\n bool operator<(const node&a)const\n {\n  return l<a.l;\n }\n};\ntypedef pair<long long,int> pii;\nset<node> odt;\nlong long a[100005],n,m,seed,vmax;\nlong long rnd()\n{\n long long ret=seed;\n seed=(seed*7+13)%MOD;\n return ret;\n}\nlong long fpow(long long x,long long y,long long mod)\n{\n long long ans=1;\n x%=mod;\n while(y)\n {\n  if(y&1)ans=ans*x%mod;\n  x=x*x%mod;\n  y>>=1;\n }\n return ans;\n}\nauto split(int pos)\n{\n auto it=odt.lower_bound(node(pos));\n if(it!=odt.end()&&it->l==pos)return it;\n it--;\n int l=it->l,r=it->r;\n long long val=it->val;\n odt.erase(it);\n odt.insert(node(l,pos-1,val));\n return odt.insert(node(pos,r,val)).first;\n}\nvoid assign(int l,int r,long long val)\n{\n auto itr=split(r+1),itl=split(l);\n odt.erase(itl,itr);\n odt.insert(node(l,r,val));\n}\nvoid add(int l,int r,long long val)\n{\n auto itr=split(r+1),itl=split(l);\n for(auto it=itl;it!=itr;it++)\n  it->val+=val;\n}\nlong long kth(int l,int r,int k)\n{\n vector<pii> a;\n auto itr=split(r+1),itl=split(l);\n for(auto it=itl;it!=itr;it++)\n  a.push_back(pii(it->val,(it->r)-(it->l)+1));\n sort(a.begin(),a.end());\n for(auto it=a.begin();it!=a.end();it++)\n {\n  k-=it->second;\n  if(k<=0)return it->first;\n }\n return -1;\n}\nlong long sum(int l,int r,int x,int y)\n{\n long long ans=0;\n auto itr=split(r+1),itl=split(l);\n for(auto it=itl;it!=itr;it++)\n  ans=(ans+fpow(it->val,x,y)*((it->r)-(it->l)+1))%y;\n return ans;\n}\nint main()\n{\n cin>>n>>m>>seed>>vmax;\n for(int i=1;i<=n;i++)\n {\n  a[i]=rnd()%vmax+1;\n  odt.insert(node(i,i,a[i]));\n }\n for(int i=1;i<=m;i++)\n {\n  int op=rnd()%4+1,l=rnd()%n+1,r=rnd()%n+1,x,y;\n  if(l>r)swap(l,r);\n  if(op==3)x=rnd()%(r-l+1)+1;\n  else x=rnd()%vmax+1;\n  if(op==4)y=rnd()%vmax+1;\n  if(op==1)add(l,r,x);\n  else if(op==2)assign(l,r,x);\n  else if(op==3)cout<<kth(l,r,x)<<endl;\n  else cout<<sum(l,r,x,y)<<endl;\n }\n return 0;\n}\n```\n\n## 4 \u6548\u7387\uff1f\n\nODT \u7684\u505a\u6cd5\u770b\u8d77\u6765\u975e\u5e38\u66b4\u529b\uff0c\u4f46\u662f\u5728\u968f\u673a\u6570\u636e\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u7684\u8868\u73b0\u5176\u5b9e\u975e\u5e38\u4f18\u79c0\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff0c\u4e00\u4e2a\u6709 $n$ \u4e2a\u6570\u7684\u5e8f\u5217\uff0c\u5728\u7ecf\u8fc7 $k$ \u6b21**\u968f\u673a\u7684**\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\u540e\uff0c\u671f\u671b\u6bb5\u6570\u5927\u7ea6\u5728 $O(\\dfrac{n}{k})$ \u7684\u7ea7\u522b\u3002\n\n\u8bc1\u660e\u53ef\u4ee5\u70b9\u51fb [\u8fd9\u91cc](https://codeforces.com/blog/entry/56135?#comment-398940) \u67e5\u770b\uff0c\u8fd9\u91cc\u4e0d\u518d\u5c55\u5f00\u3002\n\n\u5728\u6a21\u677f\u9898\u4e2d\uff0c\u56e0\u4e3a\u6570\u636e\u968f\u673a\uff0c\u6709 $\\dfrac{1}{4}$ \u7684\u64cd\u4f5c\u5747\u4e3a**\u968f\u673a\u7684**\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\uff0c\u56e0\u6b64 ODT \u7684\u5b9e\u9645\u6bb5\u6570\u5f88\u4f4e\uff0c\u6548\u7387\u5f53\u7136\u4e0d\u9519\u3002\n\n## 5 \u4e00\u70b9\u6269\u5c55\n\n\u73c2\u6735\u8389\u6811\u5e76\u4e0d\u5355\u5355\u53ea\u80fd\u89e3\u51b3\u5e8f\u5217\u95ee\u9898\uff0c\u5bf9\u4e8e\u6811\u4e0a\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u94fe\u5256\u5206\u540e\u8f6c\u5316\u4e3a\u5e8f\u5217\u95ee\u9898\uff0c\u518d\u8003\u8651\u7528\u73c2\u6735\u8389\u6811\u89e3\u9898\u3002\n\n\u5f53\u7136\u73c2\u6735\u8389\u6811\u867d\u7136\u540d\u4e3a\u6811\uff0c\u4e5f\u5e76\u4e0d\u4e00\u5b9a\u5fc5\u987b\u7528\u5e73\u8861\u6811\uff08`std::set`\uff09\u5b9e\u73b0\u3002\n\n\u6211\u4eec\u53d1\u73b0\u533a\u95f4\u5206\u88c2\u64cd\u4f5c\u5c31\u662f\u5220\u9664\u4e00\u4e2a\u533a\u95f4\uff0c\u518d\u63d2\u5165\u4e24\u4e2a\u5c0f\u533a\u95f4\uff1b\u533a\u95f4\u5408\u5e76\u64cd\u4f5c\u5c31\u662f\u5c06\u4e00\u4e9b\u533a\u95f4\u5220\u6389\uff0c\u518d\u63d2\u5165\u4e00\u4e2a\u66f4\u5927\u7684\u533a\u95f4\u3002\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u94fe\u8868\u6765\u5b9e\u73b0\uff0c\u6548\u7387\u4e5f\u5f88\u4e0d\u9519\u3002\n\n## 6 \u603b\u7ed3\n\n\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u4e0d\u8fc7\u8981\u6ce8\u610f\u7684\u662f\uff1a\u4f7f\u7528\u73c2\u6735\u8389\u6811\u7684\u524d\u63d0\u662f\u9898\u76ee\u6709\u533a\u95f4\u8d4b\u503c\u7684\u6027\u8d28\uff0c\u4e14\u6570\u636e\u968f\u673a\u3002\n\n**\u5728\u6570\u636e\u4e2d\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\u8f83\u591a\u7684\u65f6\u5019\uff0c\u73c2\u6735\u8389\u6811\u7684\u5b9e\u9645\u8fd0\u884c\u6548\u7387\u8f83\u9ad8**\u3002\u4f46\u7279\u6b8a\u6784\u9020\u7684\u6570\u636e\u5f80\u5f80\u5e76\u4e0d\u5177\u6709\u8fd9\u6837\u7684\u6027\u8d28\uff0c\u5bfc\u81f4\u5176\u9000\u5316\u4e3a\u666e\u901a\u66b4\u529b\u7b97\u6cd5\uff0c\u56e0\u6b64\u8981\u7ed3\u5408\u9898\u76ee\u6027\u8d28\u6765\u8003\u8651\u662f\u5426\u4f7f\u7528\u73c2\u6735\u8389\u6811\u6765\u89e3\u9898\u3002\n\n\u867d\u7136\u4e8b\u5b9e\u4e0a\u73c2\u6735\u8389\u6811\u5728\u5f88\u591a\u9898\u76ee\u4e2d\u90fd\u53ef\u4ee5\u7528\u5176\u4ed6\u5e38\u89c4\u6570\u636e\u7ed3\u6784\u4ee3\u66ff\uff0c\u4f46\u5176\u7b80\u5355\u76f4\u63a5\uff0c\u6613\u4e8e\u8c03\u8bd5\u7684\u7279\u70b9\u8ba9\u5b83\u6210\u4e3a\u4e86\u4e00\u4e2a\u89e3\u51b3\u4e0d\u5c11\u9898\u76ee\u7684\u7b2c\u4e8c\u9009\u62e9\u3002",
        "postTime": 1564667938,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u73c2\u6735\u8389\u6811\u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "# \u73c2\u6735\u8389\u6811 \n\n\u73c2\u6735\u8389\u6811\u662f\u4e00\u79cd\u57fa\u4e8e\u5e73\u8861\u6811\u7684\u66b4\u529b\u6570\u636e\u7ed3\u6784\u3002\u4e00\u822c\u7528std::set\u6765\u5b9e\u73b0\u3002\n\n## \u4ec0\u4e48\u65f6\u5019\u7528\u73c2\u6735\u8389\u6811\uff1a\n\n1. \u5f53\u6709\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\u65f6\n2. \u5f53\u6709\u533a\u95f4\u5e42\u6b21\u548c\u7b49\u7ebf\u6bb5\u6811\u6811\u72b6\u6570\u7ec4\u663e\u7136\u4e0d\u80fd\u80dc\u4efb\u7684\u64cd\u4f5c\u65f6\n\n## \u5b9a\u4e49\n\n\u73c2\u6735\u8389\u6811\u662f\u628a\u8fde\u7eed\u7684\u4e00\u6bb5\u503c\u76f8\u540c\u7684\u533a\u95f4\u5f53\u4f5c\u4e00\u4e2a\u8282\u70b9\u5bf9\u5f85\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u8282\u70b9\u7684\u5b9a\u4e49\n\n```c++\ntypedef long long ll;\nstruct node\n{\n\tint l,r;//\u8282\u70b9\u7684\u5de6\u3001\u53f3\u7aef\u70b9\n\tmutable ll v;//\u5982\u679c\u4e0d\u52a0mutable\u4fee\u9970\u7b26\uff0c\u90a3\u4e48v\u53d8\u91cf\u521d\u59cb\u5316\u540e\u5c31\u4e0d\u80fd\u4fee\u6539\u4e86\u3002\n\tnode (int l,int r=-1,ll v=0):l(l),r(r),v(v) {}//\u6784\u9020\u51fd\u6570\n\tbool operator <(const node &rhs) const\n\t{\n\t    return l<rhs.l;\n\t}\n};\nset<node> s;\n```\n\n## \u57fa\u672c\u64cd\u4f5c\n\n### \u521d\u59cb\u5316\n\n```c++\nfor (int i=1;i<=n;i++) s.insert(node(i,i,a[i]));\n```\n\n### \u91cd\u8981\uff1a\u533a\u95f4\u5206\u88c2\n\n\u5c31\u662f\u628a\u5305\u542bmid\u7684\u533a\u95f4[l,r]\u5206\u88c2\u6210[l,mid-1]\u548c[mid,r]\uff0c\u5e76\u8fd4\u56de[mid,r]\u7684\u6307\u9488\u3002\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u662f\u5148\u628a\u533a\u95f4[l,r]\u5220\u53bb\uff0c\u518d\u5206\u522b\u628a\u533a\u95f4[l,mid),\u548c[mid,r]\u52a0\u5165\u3002\n\n![](https://i.loli.net/2019/02/03/5c56eb626b143.png)\n\n```c++\ntypedef set<node>::iterator IT;\nIT split(int mid)\n{\n    IT it=s.lower_bound(node(mid));//\u5bfb\u627e\u7b2c\u4e00\u4e2a\u5de6\u7aef\u70b9\u5927\u4e8e\u7b49\u4e8ek\u7684\u533a\u95f4\u3002\n    if (it!=s.end()&&it->l==mid) return it; //\u5982\u679c\u627e\u5230\u7684\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5c31\u662fmid\u90a3\u4e48\u5c31\u8fd4\u56de\u8fd9\u4e2a\u533a\u95f4\u7684\u6307\u9488\u3002\n    --it;//\u5426\u5219mid\u4e00\u5b9a\u5728\u4e0a\u4e00\u4e2a\u533a\u95f4\u91cc\n    int l=it->l,r=it->r;\n    ll v=it->v;\n    s.erase(it);//\u5220\u6389\u533a\u95f4[l,r]\n    s.insert(node(l,mid-1,v));//\u63d2\u5165\u533a\u95f4[l,mid-1]\n    return s.insert(node(mid,r,v)).first; //s.insert()\u8fd4\u56de\u7684\u5176\u5b9e\u662f\u4e00\u4e2apair\uff0c\u5176\u4e2d\u7684first\u662f\u53d8\u91cf\u7684\u6307\u9488\u3002\n}\n```\n\n\n\n### \u6838\u5fc3\uff1a\u533a\u95f4\u8d4b\u503c\n\n\u5c31\u662f\u628a\u533a\u95f4[l,r]\u7684\u503c\u5168\u90fd\u6539\u4e3av\u3002\n\n![](https://i.loli.net/2019/02/03/5c56ecd2e058f.png)\n\n\u533a\u95f4\u8d4b\u4e3a5\u540e\n\n![](https://i.loli.net/2019/02/03/5c56edab6e31d.png)\n\n```c++\nvoid assign(int _l,int _r,ll v)\n{\n    IT r=split(_r+1),l=split(_l); //\u91cd\u70b9\uff01\u4e00\u5b9a\u8981\u6309\u7167\u8fd9\u4e2a\u6b21\u5e8f\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6307\u9488\u5931\u6548\u800cRE\uff0c\u4e0b\u540c\n    s.erase(l,r); //\u5220\u9664\u533a\u95f4[l,r+1)\uff0c\u662f\u4e00\u4e2a\u65b9\u4fbf\u4f46\u6bd4\u8f83\u5c11\u89c1\u7684\u64cd\u4f5c\n    s.insert(node(_l,_r,v));\n}\n```\n\n\u8fd9\u4e2a\u64cd\u4f5c\u76f4\u63a5\u4f7fset\u7684\u5927\u5c0f\u63a5\u8fd1logn\uff0c\u628a\u6574\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u51cf\u5c0f\u81f3\u63a5\u8fd1mlogn\n\n\n\n\u5176\u4ed6\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u7528\u66b4\u529b\u4e86\uff0c\u8fd9\u91cc\u8bb2\u51e0\u4e2a\u5e38\u89c1\u7684\u3002\n\n\n\n### \u533a\u95f4\u52a0\n\n\u76f4\u63a5\u52a0\u5c31\u884c\u4e86\uff0c\u5341\u5206\u66b4\u529b\n\n```c++\nvoid add(int _l,int _r,ll v)\n{\n    IT r=split(_r+1),l=split(_l);\n    for (;l!=r;l++) l->v+=v;\n}\n```\n\n### \u533a\u95f4k\u5c0f\u503c\n\n\u628a\u533a\u95f4\u91cc\u6bcf\u6bb5\u62ff\u51fa\u6765\u6392\u4e2a\u5e8f\u5c31\u884c\u4e86\u3002\n\n```c++\nll kth(int _l,int _r,int k)\n{\n    IT r=split(_r+1),l=split(_l); //\u628a\u533a\u95f4\u91cc\n    vector<pair<ll,int> > v;\n    v.clear();\n    for (;l!=r;l++) v.push_back(pair<ll,int>(l->v,l->r-l->l+1));// \u6bcf\u6bb5\u62ff\u51fa\u6765\n    sort(v.begin(),v.end());// \u6392\u4e2a\u5e8f\n    for (vector<pair<ll,int> >::iterator it=v.begin();it!=v.end();it++)\n    {\n        k-=it->second;\n        if (k<=0) return it->first; //\u5c31\u884c\u4e86\n    }\n}\n```\n\n### \u533a\u95f4\u5e42\u6b21\u548c\n\n\u76f4\u63a5\u5feb\u901f\u5e42\u5c31\u884c\u4e86\u3002\n\n```c++\nll sum(int _l,int _r,int x,int y)\n{\n    IT r=split(_r+1),l=split(_l);\n    ll ans=0;\n    for (;l!=r;l++) \n    {\n        ans=((ans+(ll)(l->r-l->l+1)*qpow(l->v,(ll)x,(ll)y))%y+y)%y;\n    }\n    return ans;\n}\n```\n\n\n\n\u4ece\u4ee5\u4e0a\u51e0\u4e2a\u64cd\u4f5c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u73c2\u6735\u8389\u6811\u4e0d\u4ec5\u6709\u4ee3\u7801\u91cf\u5c0f\uff0c\u6613\u8c03\u8bd5\u7684\u4f18\u70b9\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u89e3\u51b3\u8bb8\u591a\u7ebf\u6bb5\u6811\u6811\u72b6\u6570\u7ec4\u7b49\u6570\u636e\u7ed3\u6784\u65e0\u6cd5\u80dc\u4efb\u7684\u95ee\u9898\u3002\n\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/CF896C) \n\n\u4ee3\u7801\uff1a\n\n```c++\n#include <bits/stdc++.h>\n#define IT set<node>::iterator\nusing namespace std;\ntypedef long long ll;\nint p=1000000007;\nll qpow(ll a,ll k,ll p)\n{\n    a%=p;\n    ll ans=1;\n    while (k)\n    {\n        if (k&1) ans=ans*a%p;\n        a=a*a%p;\n        k>>=1;\n    }\n    return ans;\n}\nstruct node\n{\n\tint l,r;\n\tmutable ll v;\n\tnode (int l,int r=-1,ll v=0):l(l),r(r),v(v) {}\n\tbool operator <(const node &rhs) const\n\t{\n\t    return l<rhs.l;\n\t}\n};\nset<node> s;\nIT split(int k)\n{\n    IT it=s.lower_bound(node(k));\n    if (it!=s.end()&&it->l==k) return it;\n    --it;\n    int l=it->l,r=it->r;\n    ll v=it->v;\n    s.erase(it);\n    s.insert(node(l,k-1,v));\n    return s.insert(node(k,r,v)).first;\n}\nvoid add(int _l,int _r,ll v)\n{\n    IT r=split(_r+1),l=split(_l);\n    for (;l!=r;l++) l->v+=v;\n}\nvoid assign(int _l,int _r,ll v)\n{\n    IT r=split(_r+1),l=split(_l);\n    s.erase(l,r);\n    s.insert(node(_l,_r,v));\n}\nll kth(int _l,int _r,int k)\n{\n    IT r=split(_r+1),l=split(_l);\n    vector<pair<ll,int> > v;\n    v.clear();\n    for (;l!=r;l++) v.push_back(pair<ll,int>(l->v,l->r-l->l+1));\n    sort(v.begin(),v.end());\n    for (vector<pair<ll,int> >::iterator it=v.begin();it!=v.end();it++)\n    {\n        k-=it->second;\n        if (k<=0) return it->first;\n    }\n}\nll sum(int _l,int _r,int x,int y)\n{\n    IT r=split(_r+1),l=split(_l);\n    ll ans=0;\n    for (;l!=r;l++) \n    {\n        ans=((ans+(ll)(l->r-l->l+1)*qpow(l->v,(ll)x,(ll)y))%y+y)%y;\n    }\n    return ans;\n}\nint n,m;\nll seed,vmax;\nll a[100005];\nll rnd()\n{\n    ll ans=seed;\n    seed=(seed*7+13)%p;\n    return ans;\n}\nint main()\n{\n    cin>>n>>m>>seed>>vmax;\n    for (int i=1;i<=n;i++) a[i]=(rnd()%vmax)+1,s.insert(node(i,i,a[i]));\n\ts.insert(node(n+1,n+1,0));\n\tfor (int i=1;i<=m;i++)\n    {\n        int op=int(rnd()%4)+1,l=int(rnd()%n)+1,r=int(rnd()%n)+1,x,y;\n        if (l>r) swap(l,r);\n        if (op==3) x=int(rnd()%(r-l+1))+1;\n        else x=int(rnd()%vmax)+1;\n        if (op==4) y=int(rnd()%vmax)+1;\n        if (op==1) add(l,r,ll(x));\n        else if (op==2) assign(l,r,ll(x));\n        else if (op==3) cout<<kth(l,r,x)<<endl;\n        else cout<<sum(l,r,x,y)<<endl;\n    }\n    return 0;\n}\n```\n\n\n\n\n\n\u5b8c\u7ed3\u6492\u82b1\uff01\uff01\uff01*\u2605,\u00b0*:.\u2606(\uffe3\u25bd\uffe3)/$:*.\u00b0\u2605* \u3002",
        "postTime": 1549345152,
        "uid": 107935,
        "name": "Thomasguo666",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF896C \u3010Willem, Chtholly and Seniorious\u3011"
    },
    {
        "content": "\u4ece\u9898\u76ee\u540d\u5b57\u53ef\u4ee5\u770b\u51fa\u8fd9\u9898\u8981\u4f7f\u7528\u4e00\u79cd\u795e\u5947\u7684\u6570\u636e\u7ed3\u6784\u5c31\u662f**\u73c2\u6735\u8389\u6811**\uff01\n\n### 1. \u73c2\u6735\u8389\u6811\u7684\u539f\u7406\n\n**\u5c06\u5e8f\u5217\u62c6\u6210\u533a\u95f4\u6765~~\u66b4\u529b~~\u7ef4\u62a4\u3002**\n\n\u5982: $1, 3, 3, 4, 7, 2, 2, 2$\n\n\u4f1a\u88ab\u62c6\u6210(\u5176\u4e2d\u4e00\u79cd\u62c6\u6cd5)\uff1a\n\n$[1,1]:1,[2,3]:3,[4,4]:4,[5,5]:7,[6,8]:2$\n\n\u4f46\u4e5f\u6709\u53ef\u80fd\u4f1a\u4f1a\u88ab\u62c6\u6210(\u8fd9\u4e5f\u6b63\u662f\u73c2\u6735\u8389\u6811\u4f1a\u88ab\u5361\u7684\u539f\u56e0\u4e4b\u4e00)\uff1a\n\n$[1,1]:1,[2,2]:3,[3,3]:3,[4,4]:4,[5,5]:5,[6,6]:2,[7,7]:2,[8,8]:8$\n### 2. \u73c2\u6735\u8389\u6811\u7684\u9002\u7528\u8303\u56f4\n\n**\u9898\u76ee\u6570\u636e\u968f\u673a\u4e14\u6709\u533a\u95f4\u4fee\u6539\u64cd\u4f5c(\u5982\u672c\u9898)\u6216\u8005\u5bf9\u62cd(\u56e0\u4e3a\u597d\u6253)~~\u4ee5\u53ca\u9a97\u5206~~\u3002**\n### 3. \u73c2\u6735\u8389\u6811\u7684\u8282\u70b9\n\n```cpp\ntemplate<typename _Tp> //\u8981\u7ef4\u62a4\u4fe1\u606f\u7684\u7c7b\u578b\nstruct chtholly_node   //\u73c2\u6735\u8389\u6811\u7684\u8282\u70b9\n{\n  typedef _Tp value;   //\u91cd\u547d\u540d_Tp\u4e3avalue\n  mutable int l, r;    //\u8981\u7ef4\u62a4\u7684\u533a\u95f4[l, r]\n  mutable value v;     //\u6574\u4e2a\u533a\u95f4[l, r]\u4e0a\u5e8f\u5217\u6240\u5171\u6709\u7684\u503c\n  chtholly_node(int L, int R, value x) : l(L), r(R), v(x) { };\n  bool operator<(const chtholly_node &x) const\n  { return l < x.l; }  //\u6309\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n};\n```\n\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u6bb5\u533a\u95f4$[l,r]$\u53ca\u5176\u4e0a\u7684\u503c$v$(\u6ce8\u610f\u533a\u95f4\u4e0d\u80fd\u76f8\u4ea4)\u3002(\u6ce8\uff1a\u4e0b\u9762\u4e0d\u518d\u533a\u5206\u8282\u70b9\u548c\u533a\u95f4\uff0c\u5373\u533a\u95f4\u6709\u53ef\u80fd\u662f\u8282\u70b9\uff0c\u8282\u70b9\u4e5f\u6709\u53ef\u80fd\u662f\u533a\u95f4\uff0c\u9700\u7ed3\u5408\u81ea\u5df1\u7406\u89e3\u3002)\n\n### 4. \u73c2\u6735\u8389\u6811\u7684\u6784\u9020\n\n```cpp\ntemplate<typename _Tp> //\u8981\u7ef4\u62a4\u4fe1\u606f\u7684\u7c7b\u578b\nstruct chtholly_tree : public set<chtholly_node<_Tp> >\n{\n  //\u91cd\u547d\u540d\n  typedef _Tp value;\n  typedef chtholly_node<value> node;\n  typedef typename set<chtholly_node<value> >::iterator it;\n  //\u64cd\u4f5c\n  it split(int pos);\n  void assign(int l, int r, value x);\n};\n```\n\u73c2\u6735\u8389\u6811\u7ee7\u627f\u4e86set,\u4f7f\u5f97\u53ef\u4ee5\u50cf\u4f7f\u7528set\u4e00\u6837\u4f7f\u7528\u5b83\uff0c\u5e76\u91cd\u547d\u540d\u4e86\u4e00\u4e9b\u5197\u957f\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ee5\u53ca\u9644\u52a0\u4e86\u4e24\u4e2a\u65b0\u64cd\u4f5c\u3002\n\n### 5. \u73c2\u6735\u8389\u6811\u7684\u64cd\u4f5c\n\n1. **it split(int pos)**\n\n ```cpp\n template<typename _Tp>\n typename chtholly_tree<_Tp>::it chtholly_tree<_Tp>::split(int pos)\n {\n     it itl = this->lower_bound(node(pos, -1, value()));\n     if(itl != this->end() && itl->l == pos) return itl; --itl;\n     it itr = this->insert(node(pos, itl->r, itl->v)).first; itl->r = pos - 1;\n     return itr;\n }\n ```\n \u4f5c\u7528\uff1a\u5c06$pos$\u6240\u5728\u7684\u533a\u95f4$[l,r]$\u5206\u6210$[l,pos-1]$\u548c$[pos,r]$\u5e76\u8fd4\u56de$[pos,r]$\u6240\u5728\u7684\u8fed\u4ee3\u5668(\u82e5$pos = l$\u5219\u8fd4\u56de$[l,r]$\u6240\u5728\u7684\u8fed\u4ee3\u5668)\u3002\n\n \u5185\u5bb9\uff1a\u9996\u5148 **lower_bound(node(pos, -1, value())** \u8fd4\u56de\u5de6\u7aef\u70b9\u5927\u4e8e\u7b49\u4e8e$pos$\u4e14\u6700\u5c0f\u7684\u533a\u95f4\u6240\u5728\u7684\u8fed\u4ee3\u5668\u5e76\u8d4b\u7ed9\u8fed\u4ee3\u5668$itl$\uff0c\u7136\u540e\u5224\u65ad$itl$\u6240\u6307\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u662f\u5426\u7b49\u4e8e$pos$\uff0c\u5982\u679c\u662f\u7684\u5c31\u76f4\u63a5\u8fd4\u56de$itl$\u5373\u533a\u95f4$[l,r]$\u6240\u5728\u7684\u8fed\u4ee3\u5668\uff0c\u5426\u5219\u5c31\u8df3\u5230\u4e0a\u4e00\u4e2a\u8fed\u4ee3\u5668(\u5373\u5de6\u7aef\u70b9\u5c0f\u4e8e$pos$\u4e14\u6700\u5927\u7684\u533a\u95f4\u6240\u5728\u7684\u8fed\u4ee3\u5668)\uff0c\u63a5\u7740 **insert(node(pos, itl->r, itl->v)).first** \u4f1a\u590d\u5236\u533a\u95f4$[l,r]$\u4e0a\u7684$[pos,r]$\u5e76\u63d2\u5165\u4e14\u8fd4\u56de$[pos,r]$\u6240\u5728\u7684\u8fed\u4ee3\u5668\u8d4b\u7ed9$itr$\uff0c\u6b64\u65f6\u53ea\u9700\u5c06$itl$\u6240\u6307\u7684\u533a\u95f4$[l,r]$\u6539\u4e3a$[l,pos-1]$\u5373\u5c06$r$\u6539\u4e3a$pos-1$\u5373\u53ef\uff0c\u6700\u540e\u8fd4\u56de$itr$\u5373$[pos,r]$\u6240\u5728\u7684\u533a\u95f4\u3002\n\n2. **void assign(int l, int r, value x)**\n\n ```cpp\n template<typename _Tp>\n void chtholly_tree<_Tp>::assign(int l, int r, value x)\n {\n     it itl = this->split(l), itr = this->split(r + 1);\n     this->erase(itl, itr); this->insert(node(l, r, x));\n }\n ```\n \u4f5c\u7528\uff1a\u5c06\u533a\u95f4$[l,r]$\u4e0a\u7684\u5e8f\u5217\u6240\u5171\u6709\u7684\u503c\u4fee\u6539\u4e3a$x$\u3002\n\n \u5185\u5bb9\uff1a\u9996\u5148 **split(l)** \u8fd4\u56de\u4e00\u4e2a\u4ee5$l$\u4e3a\u5de6\u7aef\u70b9\u7684\u533a\u95f4\u7684\u8fed\u4ee3\u5668\u8d4b\u7ed9$itl$, **split(r + 1)** \u8fd4\u56de\u4e00\u4e2a\u4ee5$r + 1$\u4e3a\u5de6\u7aef\u70b9\u7684\u533a\u95f4\u7684\u8fed\u4ee3\u5668\u8d4b\u7ed9$itr$, \u7136\u540e **erase(itl, itr)** \u4f1a\u5220\u9664\u6240\u6709\u5de6\u7aef\u70b9\u5728\u533a\u95f4$[l,r + 1)$\u5373$[l,r]$\u7684\u533a\u95f4\u5373\u5220\u9664\u533a\u95f4$[l,r]$\u4e0a\u7684\u6574\u4e2a\u5e8f\u5217\uff0c \u63a5\u7740 **insert(node(l, r, x))** \u4f1a\u63d2\u5165\u4e00\u4e2a\u5e8f\u5217\u6240\u5171\u6709\u7684\u503c\u4e3a$x$\u7684\u533a\u95f4$[l,r]$\u3002\n\n**\u6ce8\u610f\uff1a\u8bf7\u786e\u4fdd\u8c03\u7528 split \u548c assign \u65f6 chtholly_tree \u4e0d\u4e3a\u7a7a\u3002**\n\n### 6.\u73c2\u6735\u8389\u6811\u7684\u58f0\u660e\n\n\u4e00\u7ef4\uff1a\n```cpp\n//\u91cd\u547d\u540d\ntypedef long long value;\ntypedef chtholly_tree<value> tree;\ntypedef tree::node node;\ntypedef tree::it it;\n//\u58f0\u660e\ntree T;\n```\n\u4e8c\u7ef4\uff1a\n```cpp\n//\u91cd\u547d\u540d\ntypedef long long value;\ntypedef chtholly_tree<chtholly_tree<value> > tree;\n//\u58f0\u660e\ntree T; //\u8ddf\u4e00\u7ef4\u5dee\u4e0d\u591a\u7684\u7528\u6cd5\n```\n### 7. \u73c2\u6735\u8389\u6811\u7684\u521d\u59cb\u5316\n\n```cpp\nfor(int i = 1; i <= n; i++)\n  T.insert(node(i, i, rnd() % vmax + 1));\n```\n\u6ce8\uff1a\u5982\u679c\u4e00\u5f00\u59cb\u5e8f\u5217\u662f\u7a7a\u7684\u90a3\u4e48\u5c31 **T.insert(l, r, v)** \u5176\u4e2d$[l,r]$\u4e3a\u5168\u57df\u5927\u5c0f\uff0c$v$\u4e3a\u4e00\u4e2a\u7a7a\u503c\uff0c\u5982 **T.insert(0, (int)1e9, 0)** \u3002\n\n### 8. \u73c2\u6735\u8389\u6811\u7684~~\u66b4\u529b~~\u7ef4\u62a4\n\n1. **\u533a\u95f4\u52a0**\n\n ```cpp\n //\u5c06[l,r]\u533a\u95f4\u6240\u6709\u6570\u52a0\u4e0ax\n void add(int l, int r, value x)\n {\n     it itl = T.split(l), itr = T.split(r + 1);\n     for(; itl != itr; ++itl) itl->v += x;\n }\n ```\n \u76f4\u63a5\u5c06\u5de6\u7aef\u70b9\u5728$[l,r)$\u7684\u533a\u95f4\u4e2d\u6700\u5de6\u8fb9\u7684\u533a\u95f4\u4f9d\u6b21\u52a0\u5230\u6700\u53f3\u8fb9\u7684\u533a\u95f4\u3002\n\n2. **\u533a\u95f4\u4fee\u6539**\n\n ```cpp\n //\u5c06[l,r]\u533a\u95f4\u6240\u6709\u6570\u6539\u6210x\n void change(int l, int r, value x)\n { T.assign(l, r, x); }\n```\n \n \u8c03\u7528 **assign** \u76f4\u63a5\u4fee\u6539\n\n3. **\u533a\u95f4\u7b2ck\u5c0f**\n\n ```cpp\n //\u5c06[l,r]\u533a\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u7684\u7b2cx\u4e2a\u6570\u662f\u7684\u591a\u5c11\n value select(int l, int r, value x)\n {\n     it itl = T.split(l), itr = T.split(r + 1);\n     vector<pair<value, int> > vp;\n     for (; itl != itr; ++itl)\n       vp.push_back(pair<value,int>(itl->v, itl->r - itl->l + 1));\n      std::sort(vp.begin(), vp.end());\n     for(vector<pair<value,int> >::iterator it = vp.begin(); it != vp.end(); ++it)\n       if((x -= it->second) <= 0)\n         return it->first;\n     return -1;\n }\n```\n\n \u5c06\u5de6\u7aef\u70b9\u5728$[l,r)$\u7684\u533a\u95f4\u4e2d\u6700\u5de6\u8fb9\u7684\u533a\u95f4\u5230\u6700\u53f3\u8fb9\u7684\u533a\u95f4\u4f9d\u6b21\u590d\u5236\u5230 **vector** \u91cc\uff0c\u6392\u5e8f\uff0c\u987a\u6b21\u627e\u5230\u7b2ck\u5c0f(\u6ce8\u610f\uff1a**vector** \u91cc\u4fdd\u5b58\u7684\u662f\u533a\u95f4)\u3002\n\n4. **\u533a\u95f4\u5e42\u6b21\u548c**\n\n ```cpp\n //\u5feb\u901f\u5e42\n value pow(value x, value y, value m)\n {\n     value res = 1, ans = x % m;\n     while(y)\n     {\n       if(y & 1) res = res * ans % m;\n       ans = ans * ans % m;\n       y >>= 1;\n     }\n     return res;\n }\n //\u8fd4\u56de[l,r]\u533a\u95f4\u6bcf\u4e2a\u6570\u5b57\u7684x\u6b21\u65b9\u7684\u548c\u6a21y\u7684\u503c\n value sum(int l, int r, value x, value y)\n {\n     it itl = T.split(l), itr = T.split(r + 1);\n     value res = 0;\n     for(; itl != itr; ++itl)\n       res = (res + (itl->r - itl->l + 1) * pow(itl->v, x, y)) % y;\n     return res;\n }\n ```\n\n \u5c06\u5de6\u7aef\u70b9\u5728$[l,r)$\u7684\u533a\u95f4\u4e2d\u6700\u5de6\u8fb9\u7684\u533a\u95f4\u5230\u6700\u53f3\u8fb9\u7684\u533a\u95f4\u4f9d\u6b21\u5feb\u901f\u5e42\u7d2f\u52a0\u5373\u53ef\u3002\n\n### 9. \u73c2\u6735\u8389\u6811\u7684\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u8bb0 $m$\u4e3a\u533a\u95f4\u6570\u5373**T.size()**\u3002\n\n1. \u5bf9\u4e8e\u968f\u673a\u7684$l$\u548c$r$\u5176\u533a\u95f4$[l,r]$\u7684\u5e73\u5747\u957f\u5ea6\u4e3a$\\frac{n-1}{3}$\n\n \u8bc1\u660e\uff1a$\\overline{x} = \\frac{\\sum_{l=1}^{n}\\sum_{r=l}^{n}(r-l)}{\\sum_{l=1}^{n}\\sum_{r=l}^{n}1}=\\frac{\\frac{1}{2}\\sum_{l=1}^{n}(\\sum_{l=1}^{n}l^2-(2n+1)\\sum_{l=1}^{n}l+n^3+n^2)}{\\frac{1}{2}n(n+1)} =\\frac{\\frac{2}{3}n(n+1)(n-1)}{\\frac{1}{2}n(n+1)}=\\frac{n-1}{3}$\n\n2. $m$(\u5e73\u5747\u503c)\u7684\u4e0a\u754c\u4e3a$(log_\\frac{3}{2}4)(log_2n)$~~\u56e0\u4e3a\u51c6\u786e\u754c\u6211\u6c42\u4e0d\u51fa\u6765~~\n \n \u7531\u4e8e$m$\u4e0e$n$\u5bf9\u5e94\uff0c\u6bcf\u6b21 **assign** \u5747\u4f1a\u4f7f\u5f97$m$\u53d8\u4e3a$\\frac{2}{3}m+\\frac{2}{3}$\u4e14\u6709\u6982\u7387\u5728$l$\u53ca$r$\u4e0a\u5206\u88c2\u51fa\u4e24\u4e2a\u65b0\u533a\u95f4\uff0c\u53c8\u56e0\u4e3a\u53ea\u9700\u6c42\u51fa$m$(\u5e73\u5747\u503c)\u7684\u4e0a\u754c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97\u6bcf\u6b21 **assign** \u5747\u4f1a\u4f7f\u5f97$m$\u53d8\u4e3a$\\frac{2}{3}m$\uff0c\u4e14\u6c38\u4e45\u5730\u589e\u52a0\u4e24\u4e2a\u533a\u95f4\uff0c\u53ef\u77e5\u8fdb\u884c$k$\u6b21\u64cd\u4f5c\u540e$m$\u53d8\u4e3a$(\\frac{2}{3})^km$\u6709$1=(\\frac{2}{3})^km$\u5373$k=log_\\frac{3}{2}m$\uff0c\u4e8e\u662f\u6700\u7ec8\u4f1a\u6709$2k$\u5373$2log_\\frac{3}{2}m$\u4e2a\u533a\u95f4\uff0c\u7531\u521d\u59cb\u6761\u4ef6$m=n$\u5f97\u51fa\u5728\u8fdb\u884c\u8db3\u591f\u591a\u7684 **assign** \u60c5\u51b5\u4e0b$m$(\u5e73\u5747\u503c)\u7684\u4e0a\u754c\u4e3a$2log_\\frac{3}{2}n$\u5373$(log_\\frac{3}{2}4)(log_2n)$\u3002(\u7ecf\u8fc7\u6d4b\u8bd5$m$\u7684\u6536\u655b\u901f\u5ea6\u8fdc\u6ca1\u6709\u4e0a\u8ff0\u90a3\u4e48\u5feb($n=1e8$\u65f6\u5927\u7ea6\u8981$1e6$\u6b21 **assign** \u64cd\u4f5c$m$(\u5e73\u5747\u503c)\u624d\u4f1a\u57fa\u672c\u4e0a\u4e0d\u4f1a\u53d8\u52a8)\uff0c\u53e6\u5916$m$(\u5e73\u5747\u503c)\u7684\u503c\u5927\u7ea6\u5728$\\frac{3}{2}log_2n$\u5de6\u53f3)\u3002\n\n3. **split** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2log_2n)$\n\n \u7531 **split** \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2m)$\u53ef\u77e5 **split** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2log_2n)$\u3002\n\n4. **assign** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2log_2n)$\n\n \u7531 **assign** \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2m)$\u53ef\u77e5 **assign** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2log_2n)$\u3002\n\n5. **add** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2n)$\n\n \u7531 **add** \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(m)$\u53ef\u77e5 **add** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2n)$\u3002\n\n6. **change** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2log_2n)$\n\n \u7531 **change** \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2m)$\u53ef\u77e5 **change** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2log_2n)$\u3002\n\n7. **select** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O((log_2n)(log_2log_2n))$\n\n \u7531 **select** \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(mlog_2m)$\u53ef\u77e5 **select** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O((log_2n)(log_2log_2n))$\u3002\n\n8. **sum** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2n)$\n\n \u7531 **pow** \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(1)$(\u5168\u57df\u4e3a$[1,1e9]$)\uff0c\n \n \u53ca **sum** \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(m)$\u53ef\u77e5 **sum** \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2n)$\u3002\n\n**\u4ece\u6b64\u53ef\u4ee5\u770b\u51fa\u73c2\u6735\u8389\u6811\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u5168\u662f\u7531\u968f\u673a\u7684 assign \u64cd\u4f5c\u4fdd\u8bc1\u7684\uff0c\u8fd9\u4e5f\u5c31\u5bfc\u81f4\u4e86\u73c2\u6735\u8389\u6811\u7684\u9002\u7528\u8303\u56f4\u72ed\u5c0f\u3002**\n\n### 10.\u73c2\u6735\u8389\u6811\u7684\u53c2\u8003\u7a0b\u5e8f\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<vector>\n#include<set>\nusing namespace std;\n\n//\u73c2\u6735\u8389\u6811\u7684\u8282\u70b9\ntemplate<typename _Tp>\nstruct chtholly_node\n{\n  typedef _Tp value;\n  mutable int l, r;\n  mutable value v;\n  chtholly_node(int L, int R, value x) : l(L), r(R), v(x) { }\n  bool operator<(const chtholly_node& x) const { return l < x.l; }\n};\n\n//\u73c2\u6735\u8389\u6811\u7684\u6784\u9020\ntemplate<typename _Tp>\nstruct chtholly_tree : public set<chtholly_node<_Tp> >\n{\n  typedef _Tp value;\n  typedef chtholly_node<value> node;\n  typedef typename set<chtholly_node<value> >::iterator it;\n  \n  //\u73c2\u6735\u8389\u6811\u7684\u64cd\u4f5c\n  it split(int pos)\n  {\n    it itl = this->lower_bound(node(pos, -1, value()));\n    if(itl != this->end() && itl->l == pos) return itl; --itl;\n    it itr = this->insert(node(pos, itl->r, itl->v)).first; itl->r = pos - 1;\n    return itr;\n  }\n  void assign(int l, int r, value x)\n  {\n    it itl = this->split(l), itr = this->split(r + 1);\n    this->erase(itl, itr); this->insert(node(l, r, x));\n  }\n};\n\n//\u73c2\u6735\u8389\u6811\u7684\u58f0\u660e\ntypedef long long value;\ntypedef chtholly_tree<value> tree; typedef tree::node node; typedef tree::it it;\ntree T;\n\n//\u73c2\u6735\u8389\u6811\u7684\u7ef4\u62a4\nvoid add(int l, int r, value x)\n{\n  it itl = T.split(l), itr = T.split(r + 1);\n  for(; itl != itr; ++itl) itl->v += x;\n}\nvoid change(int l, int r, value x)\n{ T.assign(l, r, x); }\nvalue select(int l, int r, value x)\n{\n  it itl = T.split(l), itr = T.split(r + 1);\n  vector<pair<value, int> > vp;\n  for (; itl != itr; ++itl)\n    vp.push_back(pair<value, int>(itl->v, itl->r - itl->l + 1));\n  std::sort(vp.begin(), vp.end());\n  for(vector<pair<value, int> >::iterator it = vp.begin(); it != vp.end(); ++it)\n    if((x -= it->second) <= 0)\n      return it->first;\n  return -1;\n}\nvalue pow(value x, value y, value m)\n{\n  value res = 1, ans = x % m;\n  while(y)\n  {\n    if(y & 1) res = res * ans % m;\n    ans = ans * ans % m;\n    y >>= 1;\n  }\n  return res;\n}\nvalue sum(int l, int r, value x, value y)\n{\n  it itl = T.split(l), itr = T.split(r + 1);\n  value res = 0;\n  for(; itl != itr; ++itl)\n    res = (res + (itl->r - itl->l + 1) * pow(itl->v, x, y)) % y;\n  return res;\n}\n\nvalue n, m, seed, vmax;\nvalue rnd()\n{ value ret = seed; seed = (seed * 7 + 13) % 1000000007; return ret; }\n\nint main(int argc, char* argv[])\n{\n  cin >> n >> m >> seed >> vmax;\n  value op, l, r, x, y;\n  \n  //\u73c2\u6735\u8389\u6811\u7684\u521d\u59cb\u5316\n  for(int i = 1; i <= n; i++) T.insert(node(i, i, rnd() % vmax + 1));\n  \n  for(int i = 1; i <= m; i++)\n  {\n    op = rnd() % 4 + 1; l = rnd() % n + 1; r = rnd() % n + 1;\n    if(l > r) swap(l, r);\n    if(op == 3) x = rnd() % (r - l + 1) + 1;\n    else x = (rnd() % vmax) + 1;\n    if(op == 4) y = rnd() % vmax + 1;\n    switch(op)\n    {\n    case 1:\n      add(l, r, x);\n      break;\n    case 2:\n      change(l, r, x);\n      break;\n    case 3:\n      cout << select(l, r, x) << endl;\n      break;\n    case 4:\n      cout << sum(l, r, x, y) << endl;\n      break;\n    }\n  }\n  return 0;\n}\n```\n",
        "postTime": 1541044867,
        "uid": 111767,
        "name": "Blaze",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF896C \u3010Willem, Chtholly and Seniorious\u3011"
    },
    {
        "content": "# \u73c2\u6735\u8389\u6811\n\n## 100%\u7684\u89c2\u5f71\u4f53\u9a8c\u8bf7\u53bb: [\u8fd9\u91cc......](https://www.cnblogs.com/blackhuaji/p/11113022.html)\n\n~~\u73c2\u6735\u8389\u6700\u73c2\u7231\u4e86\u4e0d\u63a5\u53d7\u53cd\u9a73~~\n\n\u597d\u4e86\u6211\u4eec\u8fdb\u5165\u6b63\u9898......\n\n## \u4e00\u4e9b\u5fc5\u987b\u77e5\u9053\u7684\u4e1c\u897f\n\n1. \u73c2\u6735\u8389\u6811**\u4e0d\u662f\u6811!!!**\n   1. \u73c2\u6735\u8389\u6811\u53ea\u662f\u4e00\u79cd\u57fa\u4e8e\u5e73\u8861\u6811\u7684\u6570\u636e\u7ed3\u6784.\n2. \u73c2\u6735\u8389\u6811\u7684\u4f7f\u7528\u9700\u8981\u4e24\u4e2a\u6761\u4ef6\n   1. \u6570\u636e\u968f\u673a\n   2. \u6709**\u533a\u95f4\u8d4b\u503c**\u64cd\u4f5c\n3. \u73c2\u6735\u8389\u6811\u9002\u7528\u8303\u56f4\u5e76\u4e0d\u662f\u5f88\u5927, \u4f46\u662f\u73c2\u4ee5\u89e3\u51b3\u4e00\u4e9b\u5947\u602a\u7684\u95ee\u9898, \u6bd4\u5982\u8bf4:\n   1. [T43829](https://www.luogu.org/problemnew/show/T43829)\u975e\u5e38\u96be\u81f3\u4eca\u6211\u53ea\u62ff\u4e8690\u5206\u5269\u4e0bWA\u4e86......\n   2. [CF896C](https://codeforces.com/contest/896/problem/C)\n   3. [CF915E](https://codeforces.com/contest/915/problem/E)\n4. \u73c2\u6735\u8389\u6811\u8f83\u597d\u8c03\u8bd5, \u4f46\u662f\u6709\u65f6\u73c2\u4ee5\u628a\u4f60RE\u51fa\u5c4e......\n5. \u73c2\u6735\u8389\u6811\u7684\u53d8\u79cd\u6570\u91cf\u5b9e\u5728\u592a\u591a, \u6240\u4ee5\u6211\u4eec\u4e0d\u4f1a\u5427\u5b83\u5c01\u88c5\u8d77\u6765.\n6. \u73c2\u6735\u8389\u6811\u662f\u4e00\u79cd**\u66b4\u529b\u6570\u636e\u7ed3\u6784**\n\n\u597d\u4e86\u5dee\u4e0d\u591a\u5c31\u662f\u8fd9\u4e48\u591a\u4e86, \u5927\u5bb6\u770b\u7740\u529e\u5427......\n\n## \u73c2\u6735\u8389\u7684\u7ed3\u6784\n\n\u5148\u770b\u4e00\u9053\u4f8b\u9898, \u4ee5CF896C\u4e3a\u4f8b.\n\n\u6211\u4eec\u8981\n\n1. \u533a\u95f4\u52a0\u6cd5\n2. **\u533a\u95f4\u8d4b\u503c**\n3. \u533a\u95f4\u7b2cx\u5c0f\n4. \u533a\u95f4k\u6b21\u65b9\u548c......\n\n\u6570\u636e\u4fdd\u8bc1\u968f\u673a(\u968f\u673a\u6570\u751f\u6210\u5668\u90fd\u7ed9\u4f60\u4e86\u4f60\u8fd8\u8bf4\u4ed6\u4e0d\u968f\u673a?)\n\n\u548b\u4e00\u770b\u662f\u4e00\u9053\u6bd2\u7624, \u4f46\u662f\u4e00\u770b\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6bd4\u8f83\u597d, \u4ece\u5b83\u5165\u624b\n\n\u7136\u540e\u7ecf\u8fc7\u4e00\u4e9b\u968f\u673a\u64cd\u4f5c\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u6570\u7ec4\u4e0d\u96be\u770b, \u6bd4\u5982\u8bf4:\n\n`1, 1, 5, 5, 5, 5, 12, 7, 7, 7, 15`\n\n\u5982\u679c\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u7ed3\u6784, \u4f7f\u5f97\u5b83\u91cc\u9762\u5b58\u50a8\u7684\u662f\u5927\u91cf\u7684\u533a\u95f4, \u90a3\u4e48\u6211\u4eec\u6bcf\u4e00\u6b212\u53f7\u64cd\u4f5c, [L,R]\u91cc\u9762\u7684\u533a\u95f4\u5c31\u53ea\u5269\u4e00\u4e2a\u4e86.\n\n\u6211\u4eec\u6700\u540e\u51b3\u5b9a\u7528\u5e73\u8861\u6811\u6765\u5b58\u50a8\u533a\u95f4, \u56e0\u4e3a\u6211\u4eec\u9700\u8981\u8fdb\u884c\u4e8c\u5206\u64cd\u4f5c.\n\n\u6bcf\u4e00\u6b21\u64cd\u4f5c\u65f6\u628a\u9700\u8981\u533a\u95f4\u6700\u5de6\u53f3\u7684\u5143\u7d20\u6240\u5728\u7684\u533a\u95f4\u5207\u5f00, \u7136\u540e\u5bf9\u4e2d\u95f4\u7684\u6bcf\u4e00\u4e2a\u533a\u95f4\u64cd\u4f5c.\n\n\u6700\u7ec8\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a$O(\\sqrt{n})$\u7684\u6570\u636e\u7ed3\u6784.\n\n\u4f7f\u7528`stl::set`\u6765\u4ee3\u66ff\u4e00\u4e2a\u624b\u5199\u7684\u5e73\u8861\u6811, \u7136\u540e\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u4e00\u4e2a\u4e1c\u897f:\n\n```cpp\nclass kotree {\n\tclass node {\n\tpublic:\n\t\tint l, r;\n\t\tmutable long long val;// mutable \u8868\u793a\"\u4e0d\u80fd\u4e3aconst\", \u56e0\u4e3aiterator\u52a0\u4e0a*\u8fd0\u7b97\u7b26\u540e\u4f1a\u8fd4\u56deconst\u503c, \u8fd9\u91cc\u52a0\u4e0amutablr\u5c31\u73c2\u4ee5\u8fdb\u884c\u4fee\u6539.\n\t\tbool operator < (const node& ot)const {\n\t\t\treturn l < ot.l;\n\t\t}//\u5e73\u8861\u6811\u9700\u8981\u7684\u6bd4\u8f83\u64cd\u4f5c\n\t};\n\tset<node>odt;\n};\n```\n\n\u597d\u4e86\u6211\u4eec\u5148\u6765\u770b\u6700\u57fa\u672c\u7684\u64cd\u4f5c: \u5207\u5206, \u628a\u4e00\u4e2a\u533a\u95f4\u780d\u6210\u4e24\u4e2a\n\n\u6211\u4eec\u5148\u627e\u5230\u8981\u780d\u90a3\u4e2a\u533a\u95f4, \u7136\u540e\u780d\u5b83\u5c31\u662f\u4e86......\n\n```cpp\nauto split(int x) {// \u627e\u5230x\u6240\u5728\u7684\u533a\u95f4, \u7136\u540e\u628a\u5b83\u5207\u6210\u4e24\u534a\u5e76\u8fd4\u56de\u53f3\u4fa7\u7684\u8fed\u4ee3\u5668(x\u5728\u53f3\u9762\u7684\u90a3\u4e00\u534a)\n\tauto it = odt.lower_bound({ x,0,0 });// \u5bfb\u627e\u5207\u5206\u76ee\u6807\u53f3\u9762\u7684\u90a3\u4e2a\n\tif (it != odt.end() && it->l == x)return it;// \u5982\u679c\u5bfb\u627e\u5230\u7684\u6070\u597d\u5de6\u7aef\u70b9\u5c31\u662fx\u90a3\u4e48\u65e0\u9700\u5207\u5206, \u76f4\u63a5\u8fd4\u56de\u5373\u73c2\n\tit--;// x\u5728\u5de6\u9762\u7684\u533a\u95f4\u91cc\n\tint l = it->l, r = it->r;\n\tlong long val = it->val;\n\todt.erase(it);\n\todt.insert({ l,x - 1,val });\n\treturn odt.insert({ x,r,val }).first; //insert\u7684\u8fd4\u56de\u503c\u5305\u542b\u4e24\u90e8\u5206: first:\u8fed\u4ee3\u5668  second: \u6210\u529f\u4e0e\u5426\n}\n```\n\n\u7136\u540e**\u5168\u90e8**\u90fd\u662f\u66b4\u529b\u64cd\u4f5c\u554a......\n\n```cpp\nvoid add(int l, int r, long long x) {\n\tauto rb = split(r + 1), lb = split(l);\n\twhile (lb != rb)lb->val += x, lb++;//\u904d\u5386\u533a\u95f4\u7684\u65e5\u5e38\u65b9\u5f0f\n}\nvoid assign(int l, int r, long long x) {\n\tauto rb = split(r + 1), lb = split(l);\n\todt.erase(lb, rb);//\u60f3\u4e0d\u5230\u5427\u4e00\u6b21\u5168\u5220\n\todt.insert({ l,r,x });\n}\nlong long kth(int l, int r, int x) {\n\tvector<mp>ygy;\n\tauto rb = split(r + 1), lb = split(l);\n\twhile (lb != rb)ygy.push_back(mp(lb->val, lb->r - lb->l + 1)), lb++;\n\tsort(ygy.begin(), ygy.end());\n\tfor (auto it : ygy) {\n\t\tx -= it.second;\n\t\tif (x <= 0)return it.first;\n\t}\n\treturn -1;\n}\nlong long sum(int l, int r, int k, long long m) {\n\tauto rb = split(r + 1), lb = split(l);\n\tlong long ans = 0;\n\twhile (lb != rb)ans = (ans + 1ll * ksm(lb->val, k, m) * (1ll * lb->r - lb->l + 1) % m) % m, lb++;\n\treturn ans;\n}\n```\n\n\u662f\u7684\u4f60\u6ca1\u770b\u9519\u5c31\u662f\u8fd9\u4e48\u66b4\u529b......\n\n~~\u73c2\u6735\u8389: \u6211\u8fd9\u4e48\u73c2\u7231\u600e\u4e48\u4f1a\u66b4\u529b\u5462?......~~\n\n\u7136\u540e\u6574\u68f5\u6811\u957f\u6210\u8fd9\u6837:\n\n```cpp\ntypedef pair<long long, int>mp;\nclass kotree {\n\tclass node {\n\tpublic:\n\t\tint l, r;\n\t\tmutable long long val;\n\t\tbool operator < (const node& ot)const {\n\t\t\treturn l < ot.l;\n\t\t}\n\t};\n\tset<node>odt;\n\tauto split(int x) {\n\t\tauto it = odt.lower_bound({ x,0,0 });\n\t\tif (it != odt.end() && it->l == x)return it;\n\t\tit--;\n\t\tint l = it->l, r = it->r;\n\t\tlong long val = it->val;\n\t\todt.erase(it);\n\t\todt.insert({ l,x - 1,val });\n\t\treturn odt.insert({ x,r,val }).first;\n\t}\npublic:\n\tkotree(int n = 0) {\n\t\todt.clear();\n\t\todt.insert({ 1,n,0 });\n\t}\n\tvoid add(int l, int r, long long x) {\n\t\tauto rb = split(r + 1), lb = split(l);\n\t\twhile (lb != rb)lb->val += x, lb++;\n\t}\n\tvoid assign(int l, int r, long long x) {\n\t\tauto rb = split(r + 1), lb = split(l);\n\t\todt.erase(lb, rb);\n\t\todt.insert({ l,r,x });\n\t}\n\tlong long kth(int l, int r, int x) {\n\t\tvector<mp>ygy;\n\t\tauto rb = split(r + 1), lb = split(l);\n\t\twhile (lb != rb)ygy.push_back(mp(lb->val, lb->r - lb->l + 1)), lb++;\n\t\tsort(ygy.begin(), ygy.end());\n\t\tfor (auto it : ygy) {\n\t\t\tx -= it.second;\n\t\t\tif (x <= 0)return it.first;\n\t\t}\n\t\treturn -1;\n\t}\n\tlong long sum(int l, int r, int k, long long m) {\n\t\tauto rb = split(r + 1), lb = split(l);\n\t\tlong long ans = 0;\n\t\twhile (lb != rb)ans = (ans + 1ll * ksm(lb->val, k, m) * (1ll * lb->r - lb->l + 1) % m) % m, lb++;\n\t\treturn ans;\n\t}\n}ygy;\n```\n\n\u7136\u540e\u5c06\u9898\u76ee\u4e3b\u4f53(main)\u8865\u5145\u4e00\u4e0b\u5c31\u73c2\u4ee5\u4e86...... \u9898\u76ee\u8fde\u4f2a\u4ee3\u7801\u90fd\u7ed9\u4f60\u4e86......\n\n\u603b\u4e4b\u4ee3\u7801\u5982\u4e0b:\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<stack>\n#include<algorithm>\n#include<set>\nusing namespace std;\nnamespace fio {\n\tstreambuf* in = cin.rdbuf();\n\tchar bb[1000000], * s = bb, * t = bb;\n#define gc() (s==t&&(t=(s=bb)+in->sgetn(bb,1000000),s==t)?EOF:*s++)\n\tinline int read() {\n\t\tint x = 0; char ch = gc();\n\t\twhile (ch < 48)ch = gc();\n\t\twhile (ch >= 48)x = x * 10 + ch - 48, ch = gc();\n\t\treturn x;\n\t}\n}using namespace fio;\nlong long ksm(long long a, long long b, long long k) {\n\tlong long ans = 1;\n\tfor (a %= k; b; a = a * a % k, b >>= 1)if (b & 1)ans = ans * a % k;\n\treturn ans;\n}\ntypedef pair<long long, int>mp;\nclass kotree {\n\tclass node {\n\tpublic:\n\t\tint l, r;\n\t\tmutable long long val;\n\t\tbool operator < (const node& ot)const {\n\t\t\treturn l < ot.l;\n\t\t}\n\t};\n\tset<node>odt;\n\tauto split(int x) {\n\t\tauto it = odt.lower_bound({ x,0,0 });\n\t\tif (it != odt.end() && it->l == x)return it;\n\t\tit--;\n\t\tint l = it->l, r = it->r;\n\t\tlong long val = it->val;\n\t\todt.erase(it);\n\t\todt.insert({ l,x - 1,val });\n\t\treturn odt.insert({ x,r,val }).first;\n\t}\npublic:\n\tkotree(int n = 0) {\n\t\todt.clear();\n\t\todt.insert({ 1,n,0 });\n\t}\n\tvoid add(int l, int r, long long x) {\n\t\tauto lb = split(l), rb = split(r + 1);\n\t\twhile (lb != rb)lb->val += x, lb++;\n\t}\n\tvoid assign(int l, int r, long long x) {\n\t\tauto rb = split(r + 1), lb = split(l);\n\t\todt.erase(lb, rb);\n\t\todt.insert({ l,r,x });\n\t}\n\tlong long kth(int l, int r, int x) {\n\t\tvector<mp>ygy;\n\t\tauto rb = split(r + 1), lb = split(l);\n\t\twhile (lb != rb)ygy.push_back(mp(lb->val, lb->r - lb->l + 1)), lb++;\n\t\tsort(ygy.begin(), ygy.end());\n\t\tfor (auto it : ygy) {\n\t\t\tx -= it.second;\n\t\t\tif (x <= 0)return it.first;\n\t\t}\n\t\treturn -1;\n\t}\n\tlong long sum(int l, int r, int k, long long m) {\n\t\tauto rb = split(r + 1), lb = split(l);\n\t\tlong long ans = 0;\n\t\twhile (lb != rb)ans = (ans + 1ll * ksm(lb->val, k, m) * (1ll * lb->r - lb->l + 1) % m) % m, lb++;\n\t\treturn ans;\n\t}\n}ygy;\nint n, m, k, d;\nclass rng {\n\tint seed, vmax;\npublic:\n\tint rand(int mod = 4) {\n\t\tint ret = seed;\n\t\tseed = (1ll * seed * 7 + 13) % 1000000007;\n\t\treturn ret % mod;\n\t}\n\trng(int seed = 0, int vmax = 0) :seed(seed), vmax(vmax) {}\n}rnd;\nint main() {\n\tcin >> n >> m >> k >> d;\n\trnd = rng(k, d);\n\tygy = kotree(n);\n\tfor (int i = 1; i <= n; i++)ygy.assign(i, i, 1ll * rnd.rand(d) + 1);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint op = rnd.rand() + 1;\n\t\tint l = rnd.rand(n) + 1, r = rnd.rand(n) + 1;\n\t\tif (l > r)swap(l, r);\n\t\tint x, y;\n\t\tif (op == 3)x = rnd.rand(r - l + 1) + 1;\n\t\telse x = rnd.rand(d) + 1;\n\t\tif (op == 4)y = rnd.rand(d) + 1;\n\t\tswitch (op) {\n\t\tcase 1:\n\t\t\tygy.add(l, r, x);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tygy.assign(l, r, x);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcout << ygy.kth(l, r, x) << endl;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tcout << ygy.sum(l, r, x, y) << endl;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\n\u770b\u5b8c\u4e86, \u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9:\n\n1. \u4e00\u5b9a\u8981\u8bb0\u4f4f\u8fd9\u4e2a\u7ec6\u8282:```auto rb = split(r + 1), lb = split(l);```\u4e0d\u7136\u5c06\u4f60<font color=#9966FF>RE\u51fa\u5c4e\u5c31\u662f\u8fd9\u91cc! \u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48.~~\u4f46\u662f\u73b0\u5728\u5e02\u9762\u4e0a\u5927\u591a\u6570\u73c2\u6735\u8389\u6811\u90fd\u662f\u8fd9\u4e48\u5199\u7684\u5929\u77e5\u9053\u5b83\u4eec\u662f\u600e\u4e48\u8fc7\u7684......~~\n2. `split`\u51fd\u6570\u4e00\u5b9a\u4e00\u5b9a\u4e0d\u8981\u5199\u9519! \u662f\u6574\u4e2a\u73c2\u6735\u8389\u6811\u7684\u6839\u57fa\u51fd\u6570.\n3. \u8bb0\u4f4f\u73c2\u6735\u8389\u6811\u7684\u5e94\u7528\u6761\u4ef6\u6709\u6570\u636e\u968f\u673a\u4e00\u9879......\n\n\u6211\u4eec\u518d\u6765\u770b\u4e00\u9053CF915E, \u539f\u5219\u4e0a\u8981\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811, \u4f46\u662f\u73c2\u6735\u8389\u6811\u4e5f\u662f\u968f\u4fbf\u79d2...... \u56e0\u4e3a...... **\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u533a\u95f4\u8d4b\u503c\u4f60\u60f3\u8ba9\u6211\u5e72\u4ec0\u4e48?!**\n\n\u4f46\u662f\u6ce8\u610f\u4e00\u4e0b\u8fd9\u4e48\u51e0\u70b9: \u8fd9\u4e00\u9898\u4e0d\u80fd\u76f4\u63a5\u533a\u95f4\u8d4b\u503c\u7136\u540e\u8ba1\u7b97, \u5c0f\u5fc330\u70b9<font color=#00CCFF>TLE\u6389.\n\n\u8ba1\u7b97\u7684\u65f6\u5019\u8981\u52a0\u4e00\u4e2a\u4f18\u5316(\u6c42\u548c)\n\n\u55ef\u5bf9\u5dee\u4e0d\u591a\u5c31\u662f\u8fd9\u6837\u4e86.\n\n```cpp\n#include\"pch.h\"\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<stack>\n#include<algorithm>\n#include<set>\nusing namespace std;\nnamespace fio {\n\tstreambuf* in = cin.rdbuf();\n\tchar bb[1000000], * s = bb, * t = bb;\n#define gc() (s==t&&(t=(s=bb)+in->sgetn(bb,1000000),s==t)?EOF:*s++)\n\tinline int read() {\n\t\tint x = 0; char ch = gc();\n\t\twhile (ch < 48)ch = gc();\n\t\twhile (ch >= 48)x = x * 10 + ch - 48, ch = gc();\n\t\treturn x;\n\t}\n}using fio::read;\nint n, m, k;\nclass kotree {\nprotected:\n\tclass node {\n\tpublic:\n\t\tint l, r;\n\t\tbool val;\n\t\tbool operator < (const node ot)const {\n\t\t\treturn l < ot.l;\n\t\t}\n\t};\n\tset<node>odt;\n\tauto split(int x) {\n\t\tauto nex = odt.lower_bound({ x,0,0 });\n\t\tif (nex != odt.end() && nex->l == x)return nex;\n\t\tnex--;\n\t\tint l = nex->l, r = nex->r;\n\t\tbool val = nex->val;\n\t\todt.erase(nex), odt.insert({ l,x - 1,val });\n\t\treturn odt.insert({ x,r,val }).first;\n\t}\n\tint ans;\npublic:\n\tkotree(int n = 0) { odt.clear(), odt.insert({ 1,n,1 }), ans = n; }\n\tvoid assign(int l, int r, bool val) {\n\t\tauto rb = split(r + 1), lb = split(l);\n\t\tfor (auto it = lb; it != rb; it++)ans -= it->val * (it->r - it->l + 1);\n\t\tans += (r - l + 1) * val;\n\t\todt.erase(lb, rb), odt.insert({ l,r,val });\n\t}\n\tint total() { return ans; }\n}ygy;\nvoid w(int x) {\n\tif (x > 9)w(x / 10);\n\tputchar(x % 10 + 48);\n}\nint main() {\n\tn = read(), m = read();\n\tygy = kotree(n);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint a = read(), b = read(), c = read();\n\t\tygy.assign(a, b, (c - 1) != 0);\n\t\tw(ygy.total()), putchar('\\n');\n\t}\n}\n```\n\n\u7b80\u5355, \u9738\u6c14, **\u5feb**!\n\n\u7136\u800c\u8fd9\u662f\u4e00\u79cd\u66b4\u529b(?)\u6570\u636e\u7ed3\u6784. \u53ea\u80fd\u5e94\u5bf9\u968f\u673a\u6570\u636e, \u8fd9\u6837\u73c2\u4ee5\u6709\u6548\u5730\u9650\u5236\u533a\u95f4\u6570\u91cf.\n\nemmm\u5c31\u662f\u8fd9\u4e48\u591a\u4e86...... \u5982\u679c\u6709\u4ec0\u4e48\u95ee\u9898\u8bf7\u79c1\u4fe1\u63d0\u51fa(\u7136\u800c\u6211\u73c2\u80fd\u4e0d\u770b......)",
        "postTime": 1561951222,
        "uid": 38485,
        "name": "Erina",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF896C \u3010Willem, Chtholly and Seniorious\u3011"
    },
    {
        "content": "ODT \u6a21\u7248\u9898\n\n### 1.\u4ec0\u4e48\u662fODT\n\nODT\u662f\u4e00\u79cd\u57fa\u4e8eset __\u5728\u6709\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\uff0c\u4e14\u662f\u968f\u673a\u6570\u636e\u4e0b\u590d\u6742\u5ea6\u6709\u4fdd\u8bc1__ \u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u7ef4\u62a4\u5f88\u591a\u4e1c\u897f\uff08\u56e0\u4e3a\u64cd\u4f5c\u57fa\u672c\u90fd\u662f\u66b4\u529b\uff09\u3002\n\n### 2.ODT\u7684\u5b9e\u73b0\n1.split\n\nODT\u4f7f\u7528 set \u7ef4\u62a4\u6570\u503c\u76f8\u540c\u7684\u533a\u95f4\uff0c\u5f53\u6570\u503c\u53d1\u751f\u6539\u53d8\u65f6\uff0c\u5c31\u9700\u8981\u628a\u4e00\u4e2a\u533a\u95f4\u67e5\u770b\uff0c\u4f7f\u7528```set.lower_bound```\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5b9e\u73b0\u3002\n```cpp\n\nIT split(int pos){\n    IT it=st.lower_bound(node(pos));\n    if(it!=st.end()&&it->ll==pos)return it;\n    --it;\n    int ll=it->ll,rr=it->rr;\n    lt val=it->val;\n    st.erase(it);\n    st.insert(node(ll,pos-1,val));\n    return st.insert(node(pos,rr,val)).first;\n}\n```\n\n2.assign\n\n\u8fd9\u662f\u4e00\u4e2a\u80fd\u4fdd\u8bc1ODT\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\uff0c\u533a\u95f4\u8d4b\u503c\uff0c\u5373\u628a\u591a\u4e2a\u6570\u503c\u76f8\u540c\u7684\u533a\u95f4\u5408\u5e76\uff0c\u4f7f\u7528 ```split``` \u628a\u533a\u95f4\u4e24\u4fa7\u62c6\u5f00\uff0c\u7136\u540e\u5220\u9664\u4e2d\u95f4\u7684\u6240\u6709\u5143\u7d20\uff0c\u6700\u540e\u63d2\u5165\u5373\u53ef\u3002\n\n```cpp\nvoid assign(int ll,int rr,lt val){\n    IT itr=split(rr+1),itl=split(ll);\n    st.erase(itl,itr);\n    st.insert(node(ll,rr,val));\n}\n```\n\n3.\u5269\u4e0b\u7684\u64cd\u4f5c\n\n\u66b4\u529b\u5373\u53ef\n\n### 3.\u590d\u6742\u5ea6\u8bc1\u660e\n\n\u6211\u4e0d\u4f1a\uff08\n\n### 4.\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n//\u73c2\u6735\u8389\u6811\u6a21\u677f\n#include<bits/stdc++.h>\nusing namespace std;\n#define  lt long long\n#define IT set<node>::iterator\n#define pir pair<lt,int>\n#define mkp(x,y) make_pair(x,y)\nlt seed,vmax;\nlt rnd(){\n    lt res=seed;\n    seed=(seed*7+13)%1000000007;\n    return res;\n}\n\nconst int maxn=100010;\nint n,m;\nlt  a[maxn];\nstruct node{\n    int ll,rr;\n    mutable lt val;\n    node(int L,int R=-1,lt V=0): ll(L),rr(R),val(V){}\n    bool operator <(const node &tt)const {return ll<tt.ll;}\n};\nset<node> st;\n\nlt qpow(lt a,lt k,lt p){\n    lt res=1;a%=p;\n    while(k>0){\n        if(k&1)res=(res*a)%p;\n        a=(a*a)%p; k>>=1;\n    }\n    return res;\n}\nIT split(int pos){\n    IT it=st.lower_bound(node(pos));\n    if(it!=st.end()&&it->ll==pos)return it;\n    --it;\n    int ll=it->ll,rr=it->rr;\n    lt val=it->val;\n    st.erase(it);\n    st.insert(node(ll,pos-1,val));\n    return st.insert(node(pos,rr,val)).first;\n}\n\nvoid assign(int ll,int rr,lt val){\n    IT itr=split(rr+1),itl=split(ll);\n    st.erase(itl,itr);\n    st.insert(node(ll,rr,val));\n}\nvoid add(int ll,int rr,int val){\n    IT itr=split(rr+1),itl=split(ll);\n    for(;itl!=itr;++itl)itl->val+=val;\n}\nlt kth(int ll,int rr,int k){\n    vector<pir>vec;\n    IT itr=split(rr+1),itl=split(ll);\n    for(;itl!=itr;++itl)\n    vec.push_back(pir(itl->val,itl->rr-itl->ll+1));\n    sort(vec.begin(),vec.end());\n    for(vector<pir>::iterator it=vec.begin();it!=vec.end();++it){\n        k-=it->second;\n        if(k<=0)return it->first;\n    }\n    return -1;\n}\n\nlt qsum(int ll,int rr,lt x,lt y){\n    lt res=0;\n    IT itr=split(rr+1),itl=split(ll);\n    for(;itl!=itr;++itl)\n    res+=(qpow(itl->val,x,y)*((itl->rr-itl->ll+1)%y))%y,res%=y;\n    return res;\n}\nint main(){\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&m);\n    scanf(\"%lld\",&seed);\n    scanf(\"%lld\",&vmax);\n    for(int i=1;i<=n;i++){\n        a[i]=(rnd()%vmax)+1;\n        st.insert(node(i,i,a[i]));\n    }\n    for(int i=1;i<=m;i++){\n        int op=(rnd()%4)+1;\n        int ll=(rnd()%n)+1,rr=(rnd()%n)+1;\n        lt x,y;\n        if(ll>rr)swap(ll,rr);\n        if(op==3)x=(rnd()%(rr-ll+1))+1;\n        else x=(rnd()%vmax)+1;\n        if(op==4) y=(rnd()%vmax)+1;\n\n        if(op==1)add(ll,rr,x);\n        else if(op==2)assign(ll,rr,x);\n        else if(op==3)printf(\"%lld\\n\",kth(ll,rr,x));\n        else if(op==4)printf(\"%lld\\n\",qsum(ll,rr,x,y));\n    }\n    #ifdef WIN32\n    system(\"pause\");\n    #endif\n}\n```\n",
        "postTime": 1581650007,
        "uid": 183154,
        "name": "swiftc",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF896C \u3010Willem, Chtholly and Seniorious\u3011"
    },
    {
        "content": "#### \u6211\u4eec\u5148\u6765\u770b\u4e00\u9053\u9898\uff1a[CF896C Willem, Chtholly and Seniorious](https://www.luogu.org/problem/CF896C)\n\n\u9898\u76ee\u5927\u6982\u662f\uff1a**\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4e4b\u524d\u533a\u95f4\u52a0\uff08$[L,R] \\space + \\space x$\uff09\uff0c\u533a\u95f4\u4fee\u6539\u503c\uff08$[L,R] \\space = \\space x$\uff09,\u533a\u95f4$k$\u5c0f\u503c\u548c\u533a\u95f4\u6bcf\u4e2a\u6570\u5b57\u7684$\nx$\u6b21\u65b9$mod \\space y$\u7684\u503c\uff08$(\\sum^R_{i=R}) \\space mod \\space y$\uff09\u3002**\n\n### \u4e0b\u9762\u6211\u4eec\u6765\u6b63\u5f0f\u5730\u5f00\u59cb\u8bb2\u89e3\u73c2\u6735\u8389\u6811\u3002\n#### \u73c2\u6735\u8389\u6811\u662f\u4ec0\u4e48\uff1f\n\n\u73c2\u6735\u8389\u6811\uff0c\u53c8\u79f0\u8001\u53f8\u673a\u6811\uff08$Old\\space Diver\\space Tree , ODT$),\u662f\u4e00\u79cd\u57fa\u4e8e\u7ea2\u9ed1\u6811\uff08$std::set$\uff09\u7684\u7b97\u6cd5\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u6311\u9009$set$\u5462\uff1f~~\u90a3\u5f53\u7136\u662f\u56e0\u4e3a$STL$ \u81ea\u5e26\u554a\uff01~~ \u662f\u56e0\u4e3a$set$\u652f\u6301$split$\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5212\u5206\u5f00\u6765\uff08\u8981\u662f\u4f60\u7528$FHQ\\space Treap, \\space Splay,\\space Red \\space Black\\space Tree$\u5199\u6211\u4e5f\u65e0\u8bdd\u53ef\u8bf4~~\u6bd5\u7adf\u6211\u4e00\u4e2a\u90fd\u4e0d\u4f1a~~\uff09\u3002\n\n\u5148\u6765\u5eb7\u5eb7\u4e24\u4e2a**\u57fa\u2022\u672c\u2022\u7684**\u64cd\u4f5c\n\n\u5148\u653e\u4ee3\u7801\n\n(\u6211\u7684\u4ee3\u7801\u975e\u00b7\u5e38\u00b7\u4e4b\u00b7\u4e11\uff0c\u6c42\u539f\u8c05)\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nclass ChthollyTree\n{\nprotected:\n#define Maxn 200000001\n\tstruct Node // set\u4e2d\u7528\u4e8e\u5b58\u50a8\u6bcf\u6bb5\u533a\u95f4\u7684\u7c7b\u578b \n\t{\n\t\tint l, r;\n      //\u8be5\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\n\t\tmutable long long val;\n       //\u50a8\u5b58\u4e86\u8be5\u6bb5\u533a\u95f4\u7684\u503c\n       //matable\u610f\u4e3a\u201c\u53ef\u53d8\u7684\u201d\uff0c\u548c\u201cconst\u201d\u4e92\u4e3a\u53cd\u4e49\u8bcd\uff0c\n       //\u7528\u4e8e\u58f0\u660e\u4e00\u4e2a\u65e0\u8bba\u4f55\u65f6\u90fd\u53ef\u53d8\u7684\u53d8\u91cf\n       //\uff08\u5373\u4f7f\u5728\u4e00\u4e2a\u7c7b\u4e2d\u662fprotected\u7684\uff0c\u5728\u5916\u90e8\u4e5f\u53ef\u4ee5\u4fee\u6539\u5176\u503c\uff09\n\t\tbool operator<(const Node &t) const \n       // \u7528\u5de6\u7aef\u70b9\uff08l\uff09\u6765\u6bd4\u8f83\uff0c\u5339\u914d\u533a\u95f4\n\t\t{\n\t\t\treturn l < t.l;\n\t\t};\n\t};\n\tset<Node> st;//\u5b9a\u4e49\u4e00\u4e2a\u5b58\u50a8Node\u7c7b\u578b\u7684set\n\tset<Node>::iterator split(int pos);\n\npublic:\n\tvoid assign(int l, int r, long long val);\n};\n\nset<ChthollyTree::Node>::iterator ChthollyTree::split(int pos)\n{\n\tset<Node>::iterator it = st.lower_bound(Node{pos, -1, 0});\n\tif (it != st.end() && it->l == pos)\n\t\treturn it;\n\tit--;\n\tNode tmp = *it;\n\tst.erase(it);\n\tst.insert(Node{tmp.l, pos - 1, tmp.val});\n\treturn st.insert(Node{pos, tmp.r, tmp.val}).first;\n}\n\nvoid ChthollyTree::assign(int l, int r, long long val)\n{\n\tset<Node>::iterator it_r = split(r + 1), it_l = split(l);\n\tst.erase(it_l, it_r);\n\tst.insert(Node{l, r, val});\n}\n\nclass T : protected ChthollyTree\n{\nprivate:\n\tlong long power(long long a, long long b, long long mod)\n\t{\n\t\tlong long ans = 1;\n\t\ta %= mod;\n\t\twhile (b)\n\t\t{\n\t\t\tif (b & 1)\n\t\t\t\tans = ans * a % mod;\n\t\t\ta = a * a % mod;\n\t\t\tb >>= 1;\n\t\t}\n\t\treturn ans;\n\t}\n\npublic:\n\tvoid assign(int l, int r, long long val)\n\t{\n\t\tset<Node>::iterator it_r = split(r + 1), it_l = split(l);\n\t\tst.erase(it_l, it_r);\n\t\tst.insert(Node{l, r, val});\n\t}\n\tvoid insert(int l, int r, long long val)\n\t{\n\t\tst.insert(Node{l, r, val});\n\t}\n\tvoid add(int l, int r, int val)\n\t{\n\t\tset<Node>::iterator it_r = split(r + 1), it_l = split(l);\n\t\tfor (; it_l != it_r; it_l++)\n\t\t\tit_l->val += val;\n\t}\n\tlong long find_kth(int l, int r, int k)\n\t{\n\t\tset<Node>::iterator it_r = split(r + 1), it_l = split(l);\n\t\tvector<pair<long long, int>> vec;\n\t\tfor (; it_l != it_r; it_l++)\n\t\t\tvec.push_back(make_pair(it_l->val, it_l->r - it_l->l + 1));\n\t\tsort(vec.begin(), vec.end());\n\t\tfor (vector<pair<long long, int>>::iterator it = vec.begin(); it != vec.end(); it++)\n\t\t{\n\t\t\tk -= it->second;\n\t\t\tif (k <= 0)\n\t\t\t\treturn it->first;\n\t\t}\n\t\treturn -1LL;\n\t}\n\tlong long power(int l, int r, int x, int mod)\n\t{\n\t\tset<Node>::iterator it_r = split(r + 1), it_l = split(l);\n\t\tlong long ans = 0;\n\t\tfor (; it_l != it_r; it_l++)\n\t\tans = (ans + ((long long)(it_l->r - it_l->l + 1)) * power(it_l->val, (long long)x, (long long)mod)) % mod;\n\t\treturn ans;\n\t}\n};\n\nT t;\n\ntypedef long long LL;\nconst int MOD7 = 1e9 + 7;\nconst int MOD9 = 1e9 + 9;\nconst int imax_n = 1e5 + 7;\nint n, m;\nLL seed, vmax;\n\nLL rnd()\n{\n\tLL ret = seed;\n\tseed = (seed * 7 + 13) % MOD7;\n\treturn ret;\n}\n\nLL a[imax_n];\n\nint main()\n{\n\tauto aaa=1;\n\tscanf(\"%d %d %lld %lld\", &n, &m, &seed, &vmax);\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\ta[i] = (rnd() % vmax) + 1;\n\t\tt.insert(i, i, a[i]);\n\t}\n\tt.insert(n+1, n+1, 0);\n\tint lines = 0;\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\tint op = int(rnd() % 4) + 1;\n\t\tint l = int(rnd() % n) + 1;\n\t\tint r = int(rnd() % n) + 1;\n\t\tif (l > r)\n\t\t\tstd::swap(l, r);\n\t\tint x, y;\n\t\tif (op == 3)\n\t\t\tx = int(rnd() % (r - l + 1)) + 1;\n\t\telse\n\t\t\tx = int(rnd() % vmax) + 1;\n\t\tif (op == 4)\n\t\t\ty = int(rnd() % vmax) + 1;\n\t\tif (op == 1)\n\t\t\tt.add(l, r, LL(x));\n\t\telse if (op == 2)\n\t\t\tt.assign(l, r, LL(x));\n\t\telse if (op == 3)\n\t\t\tcout << t.find_kth(l, r, x) << '\\n';\n\t\telse\n\t\t\tcout << t.power(l, r, x, y) << '\\n';\n\t}\n\treturn 0;\n}\n```\n\nPS\uff1a\u4e00\u5b9a\u8981\u5148\u628a\u4e0a\u9762\u7684\u53d8\u91cf\u5b9a\u4e49\u770b\u5b8c\n\u662f\u4e0d\u662f\u770b\u8d77\u6765\u5f88\u590d\u6742\uff1f\n\u6211\u4eec\u4e00\u4e2a\u4e2a\u6765\u5206\u89e3\uff0c\u60a8\u5c31\u4f1a\u77e5\u9053\u73c2\u6735\u8389\u6811\u662f\u591a\u4e48\u7684**\u66b4\u2022\u529b**\n\n\n### $split$\n\n#### \u6839\u636e$pos$\uff0c\u628a$set$\u5206\u6210$[L,pos-1],\\space [pos,R]$\u533a\u95f4\uff08\u62bd\u8c61\u610f\u4e49\u4e0a\u7684\u90a3\u79cd\uff09\n\n\n```cpp\nset<ChthollyTree::Node>::iterator ChthollyTree::split(int pos)\n{\n\tset<Node>::iterator it = st.lower_bound(Node{pos, -1, 0});\n\tif (it != st.end() && it->l == pos)\n\t\treturn it;\n\tit--;\n\tNode tmp = *it;\n\tst.erase(it);\n\tst.insert(Node{tmp.l, pos - 1, tmp.val});\n\treturn st.insert(Node{pos, tmp.r, tmp.val}).first;\n}\n}\n```\n\n\n\u53ef\u80fd\u4e00\u5f00\u59cb\u770b\u7684\u65f6\u5019\u6bd4\u8f83\u590d\u6742\uff08\u86ee\u591a\u662f\u8fed\u4ee3\u5668\u7684\u64cd\u4f5c\uff09~~\u6211\u4e00\u5f00\u59cb\u770b\u7684\u65f6\u5019\u4e5f\u662f\u770b\u4e0d\u61c2\u7136\u540e\u5c31\u653e\u5f03\u4e86~~\u3002\u6211\u4eec\u4e00\u53e5\u53e5\u6765\u5206\u6790\u3002\n\n```cpp\nset<Node>::iterator it = st.lower_bound(Node{pos, -1, 0});\n```\n\n\u58f0\u660e\u4e00\u4e2a$Node$\u7c7b\u578b\u7684$set$\u7684\u8fed\u4ee3\u5668\n\n\u7528$set$\u81ea\u5e26\u7684\u4e8c\u5206\u67e5\u627e\u67e5\u627e\u7b2c\u4e00\u4e2a$l$\u5c0f\u4e8e\u7b49\u4e8e$pos$\u7684\u5730\u65b9\uff0c\u5e76\u8fd4\u56de\u5176\u8fed\u4ee3\u5668\u5e76\u4f20\u5230$it$\n\n\nPS:\u5982\u679c\u6709\uff0c\u7528$STL$\u4e2d\u81ea\u5e26\u7684\u4e8c\u5206\u67e5\u627e\u4f1a\u6bd4$algorithm$\u4e2d\u7684\u4e8c\u5206\u67e5\u627e\u5feb\u8bb8\u591a\n\n\n```cpp\nif (it != st.end() && it->l == pos)\n\treturn it;\n```\n\n\u5982\u679c\u5982\u679c\u4e8c\u5206\u67e5\u627e\u5230\u7684$it$\u4e0d\u662f$st.end()$\uff08\u8bf4\u660e\u6ca1\u627e\u5230\uff08$set$\u7b49$STL$\u5bb9\u5668\u7684\u8fed\u4ee3\u5668\u90fd\u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff08$[L,R+1)$\uff09\uff09\uff09\u4e14$it->l\\space =\\space pos$\uff08\u8bf4\u660e\u627e\u5230\u4e86$pos$\u8fd9\u4e2a\u8282\u70b9\uff09\uff0c\u5c31\u76f4\u63a5$return$\u597d\u4e86\u3002\n\n```cpp\nit--;\nNode tmp = *it;\nst.erase(it);\nst.insert(Node{tmp.l, pos - 1, tmp.val});\nreturn st.insert(Node{pos, tmp.r, tmp.val}).first;\n```\n\n\u5426\u5219\uff0c$it$\u6307\u5411\u4e0a\u4e00\u4e2a\u8fed\u4ee3\u5668\uff08\u56e0\u4e3a\u662f\u7528$l$\u5339\u914d\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4f4d\u7f6e\u4e0d\u5728$it$\u5c31\u5728$it-1$\uff09\uff0c\u7528\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf$tmp$\u5b58\u50a8$it$\u7684\u503c\u3002\n\u7136\u540e\uff0c\u76f4\u63a5\u628a\u5b83\u4ece$st$\u91cc\u9762\u5220\u6389\uff0c\u5e76\u4e14\u5206\u5f00\u50a8\u5b58\uff08\u5728$st$\u4e2d\u5206\u5f00\u52a0\u5165\uff09\u3002\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6700\u540e\u4e00\u884c\u7528\u4e86$std::pair<iterator,bool>\\space insert(const\\space value\\_type\\&\\space value)$\u7684\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a$pair$\uff0c\u5176\u7b2c\u4e00\u4e2a\u5c31\u662f\u63d2\u5165\u4f4d\u7f6e\u8fed\u4ee3\u5668\uff0c\u7701\u5f97\u518d\u4e8c\u5206\u4e00\u6b21\u3002\n\n\n### $assign$\n\n$ODT$\u7684\u7cbe\u9ad3\u5c31\u5728\u4e8e$assign$\u64cd\u4f5c\u3002\u5b83\u8ba9\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528**\u533a\u95f4\u63a8\u5e73**\uff08\u533a\u95f4\u4fee\u6539\u4e3a\u67d0\u4e2a\u503c\uff09\u7684\u64cd\u4f5c\u3002\n```cpp\n\nvoid ChthollyTree::assign(int l, int r, long long val)\n{\n\tset<Node>::iterator it_r = split(r + 1), it_l = split(l);\n\tst.erase(it_l, it_r);\n\tst.insert(Node{l, r, val});\n}\n```\n\u7b2c\u4e00\u53e5\uff0c\u4ece$st$\u4e2d\u628a$[L,R]$\u7ed9$split$\u51fa\u6765\uff08\u5206\u6210$[L,l-1],\\space [l,r],\\space [r+1,R]$\u4e09\u90e8\u5206\uff09\n\n\u7b2c\u4e8c\u53e5\uff0c\u628a[$l,r]$\u4e2d\u7684\u5168\u90e8\u5220\u6389\u3002\u8fd9\u91cc\u7528\u5230\u4e86$iterator\\space erase( const\\_iterator\\space first,\\space const\\_iterator\\space last )$\uff0c\u53ef\u4ee5\u628a$it_l$\u5230$it_r$\u4e4b\u95f4\u7684\u5168\u90e8\u5220\u6389\u3002\n\n\u7b2c\u4e09\u53e5\uff0c\u76f4\u63a5\u628a$Node\\{l,\\space r,\\space val\\}$\u76f4\u63a5\u63d2\u56de\u53bb\u3002\n\n\u8fd9\u91cc\u4e00\u5b9a\u8981\u6ce8\u610f\u4e86\uff1a**\u5728\u8fdb\u884cset<Node>::iterator it_r = split(r + 1), it_l = split(l)\u7684\u64cd\u4f5c\u65f6\uff0c\u4e0d\u80fd\u628ait_r\u548cit_l\u4f4d\u7f6e\u8c03\u6362\uff01** \u56e0\u4e3a\u5982\u679c\u5148\u641eit_l\u518d\u641eit_r\uff0c\u5c31\u4f1a\u4f7fit_l\u5931\u6548\u3002\n\n\u770b\u5230\u8fd9\u91cc\uff0c\u600e\u4e48\u6837\uff1f\u591f\u4e0d\u591f\u66b4\u529b?\n\n\u5269\u4e0b\u7684\u64cd\u4f5c\u66f4\u52a0\u66b4\u529b\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u62d6\u51fa\u6765\u8fc7\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\n```cpp\nvoid insert(int l, int r, long long val)\n{\n\tst.insert(Node{l, r, val});\n}\n```\n\u76f4\u63a5\u63d2\n\n```cpp\nvoid add(int l, int r, int val)\n{\n\tset<Node>::iterator it_r = split(r + 1), it_l = split(l);\n\tfor (; it_l != it_r; it_l++)\n\t\tit_l->val += val;\n}\n```\n\n\u628a$[l,r]$\u5265\u51fa\u6765\uff0c\u7136\u540e\u904d\u5386\u6bcf\u4e2a\u533a\u95f4\u5e76\u52a0\u4e0a$val$\n\n```cpp\nlong long find_kth(int l, int r, int k)\n{\n\tset<Node>::iterator it_r = split(r + 1), it_l = split(l);\n\tvector<pair<long long, int>> vec;\n\tfor (; it_l != it_r; it_l++)\n\t\tvec.push_back(make_pair(it_l->val, it_l->r - it_l->l + 1));\n\tsort(vec.begin(), vec.end());\n\tfor (vector<pair<long long, int>>::iterator it = vec.begin(); it != vec.end(); it++)\n\t{\n\t\tk -= it->second;\n\t\tif (k <= 0)\n\t\t\treturn it->first;\n\t}\n\treturn -1LL;\n}\n```\n\n\u4e0d\u8981\u770b\u7740\u4e00\u5927\u5806\u4ee3\u7801\u5806\u5728\u4e00\u8d77\u5f88\u590d\u6742\uff0c\u8010\u5fc3\u5f80\u4e0b\u770b~~~\n\u5148\u5b9a\u4e49\u4e00\u4e2a$vector$\uff0c\u50a8\u5b58\u4e86\u4e00\u4e2a$pair<long long,int>$\u5206\u522b\u4ee3\u8868\u533a\u95f4\u7684\u503c\u548c\u5176\u5927\u5c0f\u3002\n\u7136\u540e\u628a$[l,r]$\u4e2d\u7684\u6bcf\u4e00\u6bb5\u533a\u95f4\u7ed9\u4e22\u8fdb\u53bb\uff08\u6ce8\u610f\u5176\u533a\u95f4\u5927\u5c0f\uff01\uff09\u3002\u518d\u7136\u540e\u76f4\u63a5$sort$\u4e00\u904d\uff0c\u7136\u540e\u518d\u6bcf\u4e2a\u626b\u8fc7\u53bb\u3002\n\n\n```cpp\nlong long power(int l, int r, int x, int mod)\n{\n\tset<Node>::iterator it_r = split(r + 1), it_l = split(l);\n\tlong long ans = 0;\n\tfor (; it_l != it_r; it_l++)\n\tans = (ans + ((long long)(it_l->r - it_l->l + 1)) * power(it_l->val, (long long)x, (long long)mod)) % mod;\n\treturn ans;\n}\n```\n\u628a$[l,r]$\u5185\u6bcf\u6bb5\u533a\u95f4\u7684$val$\u62d6\u51fa\u6765\u5feb\u901f\u5e42\uff0c\u7136\u540e\u4e58\u4e0a\u8be5\u533a\u95f4\u5927\u5c0f\u5e76\u7d2f\u52a0\u4e0a\u53bb\n\n\n\u8bb2\u5b8c\u4e86\uff01\u6492\u82b1\uff01*\u2605,\u00b0*:.\u2606(\uffe3\u25bd\uffe3)/$:*.\u00b0\u2605* \u3002\u273f\u273f\u30fd(\u00b0\u25bd\u00b0)\u30ce\u273f\n\n\nUpd: 2019.11.7\n\n\u4e0a\u4e2a\u6708\u6709\u4e00\u9053\u9898[\u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4](https://www.luogu.org/problem/P2787),\u8c03\u4e86\u597d\u4e45\u8c03\u4e0d\u51fa\u6765\u3002\u4eca\u5929\u7a81\u7136\u60f3\u8d77\uff0c\u6539\u4e86\u5f88\u4e45\u3002\u672c\u6765\u60f3\u53d1\u8d34\u6c42\u52a9\uff0c\u7136\u540e\u7a81\u7136\u53d1\u73b0\u5728\u8ba8\u8bba\u7248\u91cc\u6709\u548c\u6211\u4e00\u6837\u95ee\u9898\u7684\u4eba\u3002\u56e0\u6b64\uff1a**\u5728\u8fdb\u884cset<Node>::iterator it_r = split(r + 1), it_l = split(l)\u7684\u64cd\u4f5c\u65f6\uff0c\u4e0d\u80fd\u628ait_r\u548cit_l\u4f4d\u7f6e\u8c03\u6362\uff01** \u56e0\u4e3a\u5982\u679c\u5148\u641eit_l\u518d\u641eit_r\uff0c\u5c31\u4f1a\u4f7fit_l\u5931\u6548\u3002\u6211\u770b\u5f88\u591a\u672c\u9898\u9898\u89e3\u90fd\u5199\u9519\u4e86\uff08\u5982\u7b2c\u4e00\u3001\u4e8c\u3001\u4e09\u7bc7\uff09\u90fd\u6ca1\u6709\u63d0\u5230\u8fd9\u4e2a\uff0c\u800c\u4e14\u8fd9\u4e2a\u9519\u8bef\u5728\u672c\u9898\u91cc\u9762\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002\u6240\u4ee5\u4ee5\u540e\u5199\u73c2\u6735\u8389\u6811\u65f6\u8981\u52a1\u5fc5\u6ce8\u610f\u4e86\uff01\uff08be copied to the text\uff09\n",
        "postTime": 1564390565,
        "uid": 84788,
        "name": "Jeblqr",
        "ccfLevel": 5,
        "title": "\u73c2\u6735\u8389\u6811"
    },
    {
        "content": "\u58f0\u660e\uff1a\u5bf9\u4e8e\u8fd9\u90e8\u5206\u77e5\u8bc6\u6211\u4e5f\u662f\u4ece\u7f51\u4e0a\u5b66\u4e60\u7684\uff0c\u82e5\u6709\u96f7\u540c\u7edd\u975e\u6709\u610f\u6284\u88ad\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\uff0c\u8981\u60f3\u5b8c\u6210\u8fd9\u9053\u9898\u7684\u7b2c 4 \u4e2a\u64cd\u4f5c\uff0c\u6700\u7b80\u5355\u7684\u529e\u6cd5\u4fbf\u662f**\u73c2\u6735\u8389\u6811**\u3002\n\n## 0x01 \u73c2\u6735\u8389\u6811\u7b80\u4ecb\n\n**\u73c2\u6735\u8389\u6811**\uff0c\u53c8\u540d ODT\uff0c\u6070\u662f\u51fa\u81ea[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/CF896C)\u7684\u6b63\u89e3\u3002\u4e3b\u8981\u5904\u7406\u533a\u95f4\u4fee\u6539\u3001\u67e5\u8be2\u95ee\u9898\u3002\n\n\u662f\u4e00\u79cd\u57fa\u4e8e`std::set`\u7684 \u201d\u6307\u4ee3\u4e00\u79cd\u7279\u5b9a\u7684\u57fa\u4e8e\u6570\u636e\u968f\u673a\u7684\u7b97\u6cd5\u201c\uff0c\u5b83**\u4e0d\u662f\u6570\u636e\u7ed3\u6784**\uff0c\u8fd9\u70b9 lxl \u5148\u751f[\u672c\u4eba\u4e5f\u627f\u8ba4\u4e86](https://www.zhihu.com/question/377469286)\u3002\n\n\u5b83\u7684\u9002\u7528\u8303\u56f4\u72ed\u5c0f\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ee5\u4e0b\u60c5\u51b5\u5168\u90e8\u6ee1\u8db3\u65f6\u624d\u53ef\u4ee5\u4f7f\u7528\uff1a\n\n1. \u6709\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\u3002\n2. \u6570\u636e\u4fdd\u8bc1\u5b8c\u5168\u968f\u673a\u3002\u5728\u6570\u636e\u968f\u673a\u7684\u524d\u63d0\u4e0b\u6709\u7740\u4f18\u79c0\u7684\u590d\u6742\u5ea6\u3002\n\n\u5173\u4e8e **ODT \u7684\u65f6\u95f4\u590d\u6742\u5ea6**\u8bc1\u660e\u8f83\u4e3a\u590d\u6742\uff0c\u672c\u4eba\u4e0d\u592a\u4f1a\u8ba1\u7b97\uff0c\u8fd8\u8bf7\u5230\u7f51\u4e0a\u81ea\u884c\u5b66\u4e60\u5427\u3002\n\n## 0x02 \u7ed3\u6784\u4f53\u521d\u59cb\u5316\n\n```cpp\nstruct ct{\n    int l,r;\n    mutable ll v;\n    ct(int L,int R=-1,ll V=0){\n        l=L,r=R,v=V;\n    }\n    bool operator <(const ct &a)const{\n        return l<a.l;\n    }\n};\nset<ct> s;\n```\n\n\u5176\u4e2d\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c$v$ \u88ab mutable \u4fee\u9970\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u76f4\u63a5\u5728 set \u4e2d\u4fee\u6539\u8be5\u53d8\u91cf\u7684\u503c\u3002\n\n\u4f46\u662f\u6211\u4eec\u67e5\u8be2\u7684\u65f6\u5019\u4e0d\u80fd\u4fdd\u8bc1\u67e5\u8be2\u7684\u533a\u95f4\u7aef\u70b9\u4e00\u5b9a\u4e0e\u8fd9\u4e9b\u8282\u70b9\u7684\u7aef\u70b9\u91cd\u5408\uff0c\u5982\u679c\u91c7\u7528\u5206\u5757\u601d\u60f3\u80af\u5b9a\u884c\u4e0d\u901a\uff0c\u56e0\u4e3a\u4f1a\u9000\u5316\u6210\u66b4\u529b\u3002\u6240\u4ee5\u6211\u4eec\u6709\u4e86\u4e0b\u4e00\u6b65\u3002\n\n## 0x03 \u5206\u5272\u533a\u95f4\u64cd\u4f5c\n\n\u8fd9\u662f\u73c2\u6735\u8389\u6811\u7684\u6838\u5fc3\u3002\n\n```cpp\n#define str set<ct>::iterator//\u592a\u957f\u4e86\u554aqwq\ninline str split(int pos){\n    str it=s.lower_bound(ct(pos));\n    if(it!=s.end()&&it->l==pos)\n        return it;\n    it--;\n    int l=it->l,r=it->r,v=it->v;\n    s.erase(it);\n    s.insert(ct(l,pos-1,v));\n    return s.insert(ct(pos,r,val)).first;\n}\n```\n\n\u6ce8\u610f\uff0c\u4e00\u4e9b\u4eba\u53ef\u80fd\u4f1a\u7528\u5230 **auto** \u3002\u5728\u4ee5\u524d\u7684 NOI \u7cfb\u5217\u8d5b\u4e8b\u4e2d\u4e0d\u53ef\u4ee5\u7528 auto\uff0c\u4f46\u65f6\u4ee3\u53d8\u4e86\uff0c\u6240\u4ee5**\u53ef\u4ee5\u7528**\u4e86\u3002\n\n\u8fd9\u4e00\u90e8\u5206\u5bf9\u4e8e $pos$ \u8282\u70b9\u5206\u4e3a $[l,pos)$ \u548c $(pos,r]$ \u4e24\u90e8\u5206\uff0c\u5e76\u4e14\u5bf9\u6240\u9009\u53d6\u7684\u8282\u70b9 $it$ \u8fdb\u884c\u5224\u65ad\u3002\u5f53\u4e3a $(pos,r]$ \u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\uff1b\u5f53\u4e3a $[l,pos)$ \u65f6\uff0c\u518d\u6b21\u5206\u88c2\u5e76\u5220\u53bb\u539f\u6765\u7684\u533a\u95f4\u3002\u4f46\u5f53 $pos$ \u6070\u4e3a\u4e24\u8fb9\u754c\u4e4b\u4e00\u65f6\uff0c\u4f1a\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u4f4d\u7f6e\u3002\n\n\u8bf7\u6ce8\u610f\uff0c\u4ee3\u7801\u4e2d split \u7684\u987a\u5e8f\u4e00\u5b9a\u8981\u662f\u5148 `split(r+1)`\uff0c\u518d `split(l)`\uff0c\u5426\u5219\u4f1a\u968f\u673a RE\u3002\n\n## 0x04 \u5408\u5e76\u533a\u95f4\u64cd\u4f5c\n\n\u6709\u5206\u88c2\u5c31\u8981\u6709\u5408\u5e76\u3002\n\n```cpp\ninline void assign(int l,int r,int v) {\n\tstr it2=split(r+1),it1=split(l);//\u6ce8\u610f\uff0c\u8fd9\u91cc\u4e00\u5b9a\u8981\u5148split(r+1)\u518dsplit(l)\n\ts.erase(it1,it2);\n\ts.insert(ct(l,r,v));\n}\n```\n\nassign \u7684\u672c\u8d28\u5c31\u662f\u5206\u79bb\u51fa $l$ \u5230 $r$ \u7684\u6240\u6709\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u5b83\u4eec\uff0c\u518d\u65b0\u5efa\u4e00\u4e2a $l$ \u5230 $r$\uff0c\u6743\u503c\u4e3a $v$ \u7684\u8282\u70b9\u3002\u770b\u4f3c\u66b4\u529b\uff0c\u5374\u80fd\u5927\u5927\u4f18\u5316\u590d\u6742\u5ea6\u3002\n\nassign \u7684\u4f5c\u7528\u5f88\u5927\uff1a\u4fdd\u8bc1\u73c2\u6735\u8389\u6811\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u9000\u5316\uff0c\u540c\u65f6\u4e5f\u662f\u4fdd\u8bc1\u5176\u5728\u968f\u673a\u6570\u636e\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u4f4e\uff08\u8d8b\u8fd1\u4e8e $O(m\\log n)$\uff09\u7684\u6839\u6e90\u3002\n\n## 0x05 \u533a\u95f4\u52a0\u64cd\u4f5c\n\n```cpp\ninline void add(int l,int r,ll val){\n    str it2=split(r+1),it1=split(l);\n    for(;it1!=it2;it1++)\n        itl->v+=val;\n}\n```\n\n\u5148\u5206\u79bb\u51fa $l$ \u5230 $r$ \u7684\u6240\u6709\u8282\u70b9\uff0c\u7136\u540e\u628a\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u90fd\u52a0\u4e0a $v$\u3002\n\n## 0x06 \u533a\u95f4\u7b2c $k$ \u5c0f\n\n```cpp\ninline ll rank(int l,int r,int k){\n    vector<pair<ll,int>> p;\n    str it2=split(r+1),it1=split(l);\n    p.clear();\n    for (;it1!=it2;it1++)\n        p.push_back(pair<ll,int>(it1->v,it1->r-it1->l+1));\n    sort(p.begin(),p.end());\n    for(vector<pair<ll,int>>:iterator  it=p.begin();it!=p.end();it++){\n        k-=it->second;\n        if(k<=0) \n            return it->first;\n    }\n}\n```\n\n\u5206\u79bb\u540e\u628a\u8282\u70b9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6bcf\u904d\u5386\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u5c06 $k$ \u51cf\u53bb\u5b83\u7684\u957f\u5ea6\u3002\u5982\u679c $k\\leqslant 0$\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u5373\u4e3a\u7b2c $k$ \u5c0f\u503c\u3002\n\n## 0x07 \u533a\u95f4\u5e42\u6b21\u548c\n\n```cpp\ninline ll sum(int l, int r, int x, int y){\n    str it2=split(r+1),it1=split(l);\n    ll res=0;\n    for(;it1!=it2;it1++)\n        res=(res+(ll)(it1->r-it1->l+1)*qpow(it1->v,ll(x),ll(y)))%y;\n    return res;\n}\n```\n\n\u66b4\u529b\u904d\u5386\u627e\u5230\u5143\u7d20\uff0c\u5de6\u7aef\u70b9\u5728 $[l,r)$ \u7684\u533a\u95f4\u4e2d\u6700\u5de6\u8fb9\u7684\u533a\u95f4\u5230\u6700\u53f3\u8fb9\u7684\u533a\u95f4\u4f9d\u6b21\u4f7f\u7528**\u5feb\u901f\u5e42**\u52a0\u5165 $res$ \u3002\n\n\u4f2a\u4ee3\u7801\u90fd\u5df2\u7ecf\u7ed9\u4f60\u4e86\uff0c\u79cd\u5b50\u751f\u6210\u5668\u5f88\u597d\u5199\uff0c\u5176\u4f59\u7684\u4e3b\u51fd\u6570\u5185\u5bb9\u4e5f\u5f88\u7b80\u5355\u3002\n\nView code\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n//#define int long long\n#define ll long long\n#define ri register int\n#define il inline\n#define str set<ct>::iterator\n\nconst int MOD=1e9+7;\nint n,m;\nll seed,vmax;\nstruct ct{\n    int l,r;\n    mutable ll v;\n    ct(int L,int R=-1,ll V=0){\n        l=L,r=R,v=V;\n    }\n    bool operator <(const ct &a)const{\n        return l<a.l;\n    }\n};\nset<ct> s;\n\nil ll read(){\n    ll x=0,y=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){\n        if(c=='-')\n            y=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return x*y;\n}\n\nil str split(int pos){\n    str it=s.lower_bound(ct(pos));\n    if(it!=s.end()&&it->l==pos) \n        return it;\n    it--;\n    int l=it->l,r=it->r;\n    ll v=it->v;\n    s.erase(it);\n    s.insert(ct(l,pos-1,v));\n    return s.insert(ct(pos,r,v)).first;\n\n}\n\nil void assign(int l,int r,ll v) {\n\tstr it2=split(r+1),it1=split(l);\n    s.erase(it1,it2);\n    s.insert(ct(l,r,v));\n}\n\nil void add(int l,int r,ll val){\n    str it2=split(r+1),it1=split(l);\n    for(;it1!=it2;it1++)\n        it1->v+=val;\n}\n\nil ll rk(int l,int r,int k){\n    vector<pair<ll,int>> p;\n    str it2=split(r+1),it1=split(l);\n    p.clear();\n    for(;it1!=it2;it1++)\n        p.push_back(pair<ll,int>(it1->v,it1->r-it1->l+1));\n    sort(p.begin(),p.end());\n    for(vector<pair<ll,int>>::iterator it=p.begin();it!=p.end();it++){\n        k-=it->second;\n        if(k<=0) \n            return it->first;\n    }\n    return -1;\n}\n\nil ll qpow(ll x,ll y,ll p){\n    ll res=1,ans=x%p;\n    while(y){\n        if(y&1) \n            res=res*ans%p;\n        ans=ans*ans%p;\n        y>>=1;\n    }\n    return res;\n}\n\nil ll sum(int l,int r,int x,int y){\n    str it2=split(r+1),it1=split(l);\n    ll res=0;\n    for(;it1!=it2;it1++)\n        res=(res+1ll*(it1->r-it1->l+1)*qpow(it1->v,1ll*x,1ll*y))%y;\n    return res;\n}\n\nil ll rnd(){\n    ll ret=seed;\n    seed=(seed*7+13)%MOD;\n    return ret;\n}\n\nsigned main(){\n    n=read(),m=read(),seed=read(),vmax=read();\n    for(ri i=1;i<=n;i++)\n        s.insert(ct(i,i,rnd()%vmax+1));\n    s.insert(ct(n+1,n+1,0));\n    for(ri i=1;i<=m;i++){\n        int op=int(rnd()%4)+1,l=int(rnd()%n)+1,r=int(rnd()%n)+1,x,y;\n        if(l>r)\n            swap(l,r);\n        if(op==3){\n            x=int(rnd()%(r-l+1))+1;\n            printf(\"%lld\\n\",rk(l,r,x));\n        }\n        else\n            x=int(rnd()%vmax) +1;\n        if(op==1)\n            add(l,r,1ll*x);\n        if(op==2)\n            assign(l,r,1ll*x);\n        if(op==4){\n            y=int(rnd()%vmax)+1;\n            printf(\"%lld\\n\",sum(l,r,x,y));\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1627139915,
        "uid": 425672,
        "name": "BF_AlphaShoot",
        "ccfLevel": 0,
        "title": "CF896C Willem, Chtholly and Seniorious \u9898\u89e3"
    },
    {
        "content": "## [CF896C]Willem, Chtholly and Seniorious\n\n------------\n\n\u6839\u636e\u9898\u76ee\u80cc\u666f\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u9898\u8981\u7528\u73c2\u6735\u8389\u6811\u5199\u3002\uff08/doge )\n\n\u7136\u800c\u73c2\u6735\u8389\u6811\u662f\u4e00\u79cd\u5efa\u7acb\u5728 set \u57fa\u7840\u4e0a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u751a\u81f3\u66f4\u504f\u5411\u4e8e\u4e00\u79cd\u505a\u6cd5\uff0c\u4e0d\u662f\u5f88\u80fd\u4f53\u73b0 C \u8279\u9762\u5411\u5bf9\u8c61\u7684\u7279\u70b9\u3002\uff08~~\u778e\u626f~~\uff09\n\n\u4e3a\u4e86\u63a8\u5e7f\u73c2\u5b66\uff0c\u4e3a\u4e86\u5145\u5206\u663e\u793a\u73c2\u6735\u8389\u6811\u9762\u5411\u5bf9\u8c61\u7684\u7279\u5f81\uff0c\uff08~~\u4e3a\u4e86\u6c34\u4e00\u7bc7\u9898\u89e3~~\uff09\uff0c\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u73c2\u6735\u8389\u6811\uff0c\u5e76\u63d0\u4f9b\u4e00\u7bc7set\u7ee7\u627f\u5c01\u88c5\u7684\u73c2\u6735\u8389\u6811\u9898\u89e3\u3002\n\n------------\n\n\n## \u9898\u610f\u5206\u6790\n\n\u8df3\u8fc7\u82b1\u91cc\u80e1\u54e8\u7684\u8f93\u5165\uff0c\u9898\u76ee\u53ef\u4ee5\u603b\u7ed3\u4e3a\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u6570\u5217\uff0c\u5e76\u652f\u6301 4 \u79cd\u64cd\u4f5c\uff1a\n\n##### 1.\u533a\u95f4\u52a0\n##### 2.\u533a\u95f4\u63a8\u5e73\n##### 3.\u533a\u95f4\u7b2c k \u5927\n##### 4.\u533a\u95f4 k \u6b21\u65b9\u548c\n\n\u5176\u4e2d\u533a\u95f4\u63a8\u5e73\u770b\u8d77\u6765\u975e\u5e38\u53cb\u597d\uff0c\u63a8\u5e73\u7684\u4e00\u5927\u6bb5\u6570\u53ef\u4ee5\u540c\u8fc7\u8bb0\u5f55\u76f8\u540c\u7684\u503c\u548c\u8d77\u70b9\u7ec8\u70b9\u4f4d\u7f6e\u8bb0\u5f55\u8fd9\u6bb5\u6570\u7684\u6240\u6709\u4fe1\u606f\uff0c\u5e76\u4ee5\u4e00\u4e2a\u975e\u5e38\u53cb\u597d\u7684\u590d\u6742\u5ea6\u652f\u6301\u53e6\u5916\u4e09\u79cd\u64cd\u4f5c\u3002\n\n\u800c\u4e14\u6570\u636e\u53c8\u662f\u968f\u673a\u7684\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u64cd\u4f5c\u4e2d\u4f1a\u6709\u5f88\u591a\u7684 2 \u64cd\u4f5c\uff0c\u671f\u671b\u4e0a\u80fd\u5c06\u6570\u5217\u63a8\u5e73\u6210\u5f88\u5c11\u7684\u51e0\u6bb5\uff0c\u7136\u540e\u5c31\u80fd\u9ad8\u6548\u7684\u7ef4\u62a4\u8fd9\u4e2a\u6570\u5217\u3002\n\n\u987a\u7740\u8fd9\u4e2a\u601d\u60f3\uff0c\u73c2\u6735\u8389\u6811\u5c31\u8bde\u751f\u4e86\u3002\n\n------------\n\n\n## \u89e3\u6cd5\n\n\u8003\u8651\u5c06\u63a8\u5e73\u64cd\u4f5c\u5206\u6210\u7684\u6bb5\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u7528\u4e00\u4e2a set \u7ef4\u62a4\n\n\u5f00\u59cb\u65f6\u6bcf\u4e2a\u6570\u90fd\u5355\u72ec\u5c5e\u4e8e\u4e00\u6bb5\u3002\n\n\u6bcf\u5f53\u6709\u64cd\u4f5c 2 \u65f6\uff0c\u5c06\u8986\u76d6\u5230\u7684\u6bb5\u6311\u51fa\u6765\u5408\u5e76\u6210\u4e00\u6bb5\uff0c\u585e\u8fdb set \u91cc\uff0c\u539f\u6709\u7684\u533a\u95f4\u5168\u90e8\u5220\u6389\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c 1\uff0c\u5c06\u8986\u76d6\u5230\u7684\u6bb5\u6311\u51fa\u6765\uff0c\u6bcf\u6bb5\u7684\u503c\u90fd\u52a0\u4e0a x\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c 3\uff0c\u5c06\u8986\u76d6\u5230\u7684\u6bb5\u6311\u51fa\u6765\uff0c\u5206\u522b\u628a\u6bcf\u6bb5\u4e22\u8fdb\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0csort \u4e00\u4e0b\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u7b2ck\u4e2a\u6570\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c 4\uff0c\u5c06\u8986\u76d6\u5230\u7684\u6bb5\u8df3\u51fa\u6765\uff0c\u5feb\u901f\u5e42\u5206\u522b\u53d6\u51fa $x^k$ \u4e58\u4e0a\u6bb5\u5185\u6570\u7684\u4e2a\u6570\uff0c\u7136\u540e\u52a0\u8d77\u6765\u8f93\u51fa\u3002\n\n\u7531\u4e8e\u64cd\u4f5c 2 \u5e2e\u6211\u4eec\u628a\u6570\u5217\u5212\u6210\u7684\u6bb5\u6570\u662f\u5f88\u5c11\u7684\uff0c\u64cd\u4f5c 1\uff0c3\uff0c4 \u5747\u53ef\u4ee5\u5728\u8f83\u9ad8\u7684\u6548\u7387\u4e0b\u5904\u7406\u3002\n\n\u8c8c\u4f3c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u2026\u2026\n\n\u5982\u4f55\u5c06\u4e00\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u6bb5\u53d6\u51fa\uff1f\n\n\u627e\u7684\u8bdd\u53ef\u4ee5\u901a\u8fc7 set \u81ea\u5e26\u7684 lower_bound() \u4e8c\u5206\u627e\u5230\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u6240\u5728\u7684\u6bb5\uff0c\u7136\u540e\u904d\u5386\u4e2d\u95f4\u7684\u6bb5\u3002\n\n\u4f46\u662f\u2026\u2026\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u53ef\u80fd\u662f\u4f1a\u5361\u5728\u4e00\u6bb5\u7684\u4e2d\u95f4\u7684\u2026\u2026\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u6240\u5728\u7684\u6bb5\u62c6\u6210\u4e24\u6bb5\uff0c\u4f7f\u5de6\u7aef\u70b9\u4f5c\u4e3a\u4e00\u6bb5\u7684\u5f00\u5934\uff0c\u53f3\u7aef\u70b9\u4f5c\u4e3a\u4e00\u6bb5\u7684\u7ed3\u5c3e\u3002\n\n\u7136\u540e\u518d\u904d\u5386\u4e2d\u95f4\u7684\u6bb5\u3002\n\n\u8fd9\u4e2a\u5206\u88c2\u6bb5\u6765\u7684\u6bb5\uff0c\u518d\u4ee5\u5206\u754c\u70b9\u5411\u4e24\u8fb9\u91cd\u5efa\u4e24\u6bb5\u5b9e\u73b0\uff0c\u7136\u540e\u5c06\u8fd9\u4e24\u6bb5\u585e\u56de\u5230 set \u91cc\u3002\n\n\u8fd8\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u7684\u662f\u5728\u5206\u88c2\u5de6\u53f3\u7aef\u70b9\u65f6\u8981\u5148\u5206\u88c2\u53f3\u7aef\u70b9\u518d\u5206\u88c2\u5de6\u7aef\u70b9\u3002\n\n\u5f53\u5de6\u53f3\u7aef\u70b9\u4f4d\u4e8e\u540c\u4e00\u5757\u65f6\uff0c\u82e5\u5148\u5206\u88c2\u5de6\u7aef\u70b9\uff0c\u5206\u88c2\u53f3\u7aef\u70b9\u65f6\u4f1a\u5bf9\u5de6\u7aef\u70b9\u6240\u5728\u7684\u5757\u8fdb\u884c\u4fee\u6539\uff0c\u5bfc\u81f4\u7a0b\u5e8f RE\uff0c\u800c\u5148\u5206\u88c2\u53f3\u7aef\u70b9\u53ef\u4ee5\u907f\u514d\u8fd9\u4e00\u60c5\u51b5\u3002\n\n\u8fd9\u70b9\u697c\u4e0a\u5de8\u4f6c\u5df2\u7ecf\u63d0\u8fc7\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n------------\n\n## \u5173\u4e8e\u7ee7\u627f\n\n\n###### \u7c7b\u7684\u7ee7\u627f\uff0c\u662f\u65b0\u7684\u7c7b\u4ece\u5df2\u6709\u7c7b\u90a3\u91cc\u5f97\u5230\u5df2\u6709\u7684\u7279\u6027\u3002\u4ece\u5df2\u6709\u7c7b\u4ea7\u751f\u65b0\u7c7b\u7684\u8fc7\u7a0b\u5c31\u662f\u7c7b\u7684\u6d3e\u751f\u3002\n\n###### \u901a\u8fc7\u7c7b\u7684\u6d3e\u751f\u53ef\u4ee5\u5efa\u7acb\u5177\u6709\u5171\u540c\u5173\u952e\u7279\u5f81\u7684\u5bf9\u8c61\u5bb6\u65cf\uff0c\u4ece\u800c\u5b9e\u73b0\u4ee3\u7801\u7684\u91cd\u7528\u3002\n\n###### \u2014\u2014\u300a C++ \u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u300b\n\n------------\n\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5728\u539f\u6709\u7684\u7c7b\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u5185\u5bb9\uff0c\u5982\u51fd\u6570\uff0c\u6210\u5458\u7b49\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u7c7b\n\n\u4f17\u6240\u5468\u77e5\uff0cstl \u91cc\u597d\u4e1c\u897f\u5f88\u591a\uff0c\u4f46 stl \u7ec8\u7a76\u662f\u6709\u6781\u9650\u7684\uff0c\u597d\u591a\u6709\u7528\u7684\u5185\u5bb9 stl \u7684\u6a21\u677f\u5e93\u672c\u8eab\u4e0d\u80fd\u5b9e\u73b0\n\n\u6bd4\u5982 stl \u91cc\u6709 set \u7684\u6a21\u677f\uff0c\u4f46\u662f\u6ca1\u6709\u73c2\u6735\u8389\u6811\u7684\u6a21\u677f\u2026\u2026\n\n\u4f46\u8981\u662f\u4ece\u5934\u81ea\u5df1\u5b9e\u73b0\uff0c\u53c8\u663e\u5f97\u592a\u9ebb\u70e6\u4e86\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u7684\u65b9\u5f0f\u4ece stl \u91cc\u5957\u53d6\u5230\u6211\u4eec\u60f3\u8981\u7684\uff0c\u5e76\u628a\u6211\u4eec\u60f3\u8981\u52a0\u8fdb\u53bb\u7684\u5185\u5bb9\u4ee5\u6210\u5458\u548c\u6210\u5458\u51fd\u6570\u7684\u5f62\u5f0f\u52a0\u8fdb\u53bb\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u7c7b\u3002\n\n\u4f8b\u5982\u73c2\u6735\u8389\u6811\uff0c\u5c31\u53ef\u4ee5\u5728\u7ee7\u627f set \u7684\u57fa\u7840\u4e0a\u52a0\u5165 assign\uff08\u63a8\u5e73\uff09\uff0cadd\uff08\u533a\u95f4\u52a0\uff09\uff0ckth\uff08\u533a\u95f4\u7b2c k \u5927\uff09\u7b49\u65b0\u7684\u6210\u5458\u51fd\u6570\uff0c\u4e00\u4e2a vector \u6210\u5458\u4f5c\u4e3a\u6392\u5e8f\u65f6\u7684\u8f85\u52a9\u6570\u7ec4\uff0c\u5f97\u5230\u73c2\u6735\u8389\u6811\u8fd9\u4e2a\u65b0\u7c7b\n\n\u53e6\u5916\u5728\u5199\u7ee7\u627f\u65f6\u8981\u6ce8\u610f\u591a\u6001\u6027\u548c\u5bf9\u8c61\u7684\u4f5c\u7528\u57df\u7b49\u95ee\u9898\uff0c\u8fd9\u4e9b\u5c31\u4e0d\u518d\u8d58\u8ff0\uff0cdebug \u591a\u4e86\u81ea\u7136\u5c31\u4f1a\u4e86\u2026\u2026\n\n\u9644\u4e0a\u4ee3\u7801\u2026\u2026\n\n------------\n\n\n## \u4ee3\u7801\uff08\u9644\u7b80\u5355\u6ce8\u91ca\uff09\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#include<set>\n#define mmo 1000000007\nusing namespace std;\nint n,m,ma,op,in1,in2,in3,in4,mo;\nint seed;\n//\u53d6\u6a21\ninline long long moo(long long x)\n{\n    return x%mo;\n}\n//\u5feb\u901f\u5e42\ninline long long poww(long long x,int y)\n{\n    long long r=1;x=moo(x);\n    while(y)\n    {\n        if(y&1)r=moo(r*x);\n        x=moo(x*x);\n        y>>=1;\n    }\n    return r;\n}\n//\u8bb0\u5f55\u6bb5\u7684\u7c7b\nclass node\n{\n    private:\n        friend bool operator <(const node &x,const node &y)\n        {\n            return x.l<y.l;\n        }\n    public:\n        int l,r;\n        mutable long long dat;\n        node(int l,int r=-1,long long dat=0):l(l),r(r),dat(dat){}\n};\n//set\u7ee7\u627f\u7684\u73c2\u6735\u8389\u6811\u7c7b\nclass odt:public set<node>\n{\n    private:\n        //\u5206\u88c2\n        set<node>::iterator splt(int x)\n        {\n            set<node>::iterator ite=lower_bound(node(x));\n            if(ite!=end()&&ite->l==x)return ite;ite--;\n            int nl=ite->l,nr=ite->r;long long nv=ite->dat;\n            erase(ite);\n            insert(node(nl,x-1,nv));\n            return insert(node(x,nr,nv)).first;\n        }\n        vector<pair<long long,int> >no;//\u6392\u5e8f\u7528\u7684\u8f85\u52a9\u6570\u7ec4\n    public:\n        //\u8fd9\u4e2a\u58f0\u660e\u53ef\u4ee5\u4f7f\u5b50\u7c7b\u968f\u610f\u8c03\u7528\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u7701\u53bb\u4e00\u4e2a\u4e2a\u5199\u7684\u9ebb\u70e6\n        //\u4f46\u6709\u65f6\u4f1a\u4ea7\u751fbug\uff0c\u89c6\u5b9e\u9645\u60c5\u51b5\u4f7f\u7528\n        using set<node>::set;\n        //\u533a\u95f4\u52a0\n        void add(int l,int r,long long dd)\n        {\n            set<node>::iterator rit=splt(r+1),lit=splt(l);\n            while(lit!=rit){lit->dat+=dd;lit++;}\n        }\n        //\u533a\u95f4\u63a8\u5e73\n        void assn(int l,int r,long long dd)\n        {\n            set<node>::iterator rit=splt(r+1),lit=splt(l);\n            erase(lit,rit);insert(node(l,r,dd));\n        }\n        //\u533a\u95f4\u7b2ck\u5927\n        void kth(int l,int r,int id)\n        {\n            set<node>::iterator rit=splt(r+1),lit=splt(l);no.clear();\n            while(lit!=rit)\n            {\n                no.push_back(pair<long long,int>(lit->dat,lit->r-lit->l+1));\n                lit++;\n            }\n            sort(no.begin(),no.end());int now=0;\n            for(vector<pair<long long,int> >::iterator ite=no.begin();ite!=no.end();ite++)\n            {\n                if(now+ite->second<id){now+=ite->second;continue;}\n                printf(\"%lld\\n\",ite->first);return;\n            }\n        }\n        //\u533a\u95f4k\u6b21\u5e42\u548c\n        void poor(int l,int r,int t)\n        {\n            set<node>::iterator rit=splt(r+1),lit=splt(l);long long ans=0;\n            while(lit!=rit){ans=moo(1ll*ans+moo(1ll*poww(lit->dat,t)*moo(lit->r-lit->l+1)));lit++;}\n            printf(\"%lld\\n\",ans);\n        }\n};\nodt se;//\u96be\u5f97\u4e00\u6b21\u6ca1\u7528\u6307\u9488\n//\u9898\u76ee\u4e2d\u7ed9\u7684\u4f2a\u968f\u673a\u751f\u6210\ninline int rnd()\n{\n    int ret=seed;\n    seed=(1ll*seed*7+13)%mmo;\n    return ret;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&seed,&ma);\n    for(int i=1;i<=n;i++)\n    {\n        se.insert(node(i,i,rnd()%ma+1));\n    }\n    for(int i=1;i<=m;i++)\n    {\n        //\u6570\u636e\u751f\u6210\n        op=rnd()%4+1;\n        in1=rnd()%n+1;in2=rnd()%n+1;\n        if(in1>in2)swap(in1,in2);\n        if(op==3)in3=rnd()%(in2-in1+1)+1;\n        else in3=rnd()%ma+1;\n        if(op==4)mo=rnd()%ma+1;\n        //4\u4e2a\u64cd\u4f5c\n        switch(op)\n        {\n            case 1:\n                se.add(in1,in2,in3);\n                break;\n            case 2:\n                se.assn(in1,in2,in3);\n                break;\n            case 3:\n                se.kth(in1,in2,in3);\n                break;\n            case 4:\n                se.poor(in1,in2,in3);\n                break;\n        }\n    }\n    return 0;\n}\n```\n\n\n## **end**",
        "postTime": 1626700076,
        "uid": 261290,
        "name": "ISYRHH",
        "ccfLevel": 9,
        "title": "\u73c2\u5b66\u7814\u7a76"
    }
]