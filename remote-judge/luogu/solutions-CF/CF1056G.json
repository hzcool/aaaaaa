[
    {
        "content": "## \u524d\u8a00\n\u4e0d\u53ef\u53d1\u9001\u5355\u4e2a\u6807\u70b9\u7b26\u53f7\u3002\n## \u601d\u8def\n\u8bf7\u5148\u770b\u770b\u522b\u7684\u9898\u89e3\u7684 3KB \u53ef\u6301\u4e45\u5316 treap\uff0c\u7136\u540e\u6d4f\u89c8\u4e0b\u9762\u8fd9\u4efd **787B** \u7684\u4ee3\u7801\u3002\n\n\u8fd9\u4efd\u4ee3\u7801\u53ea\u6a21\u62df\u4ee5\u4e0b\u8fc7\u7a0b\uff1a\n\n* \u66b4\u529b\u6839\u636e\u9898\u610f\u8df3\u4e00\u6b65\u3002\n* \u5982\u679c\u6b64\u65f6\u5bf9\u5e94\u7684 $(s,t\\bmod n)$ \u90fd\u51fa\u73b0\u8fc7\uff0c\u6b64\u65f6\u4e00\u5b9a\u5b58\u5728\u5faa\u73af\u8282\uff0c\u6263\u6389\u5faa\u73af\u8282\u7ee7\u7eed\u8df3\u5373\u53ef\u3002\n* \u5982\u679c\u5b58\u5728\u5faa\u73af\u8282\uff0c\u90a3\u4e48\u5176\u5404\u8d70\u82e5\u5e72\u6b65\u4e4b\u540e\u8fd8\u5728\u5faa\u73af\u8282\u91cc\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u7279\u5b9a\u7684 $t\\bmod n$ \u6c42\u5c31\u53ef\u4ee5\u53ef\u4ee5\u89c4\u907f\u54c8\u5e0c\u8868\u7684\u5927\u5e38\u6570\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(nS)$ \u7684\uff0c\u5176\u4e2d $S$ \u4e3a\u5faa\u73af\u8282\u3002\n\n\u5728\u6240\u6709\u7684\u6d4b\u8bd5\u4e2d\uff0c\u5faa\u73af\u8282\u5747\u4e0d\u8d85\u8fc7 $50$\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\uff1f\n\n~~\u51fa\u9898\u4eba\u4e5f\u4e0d\u4f1a\u8bc1\uff0c\u6240\u4ee5\u5927\u5bb6\u5c31\u5f53\u4e2a\u5927\u91cf\u6d4b\u8bd5\u540e\u7684\u4e8b\u5b9e\u5427\u3002~~\n\n\u6211\u5728\u8bc4\u8bba\u533a\u770b\u5230\u4e00\u4e2a\u8001\u54e5\u7ed9\u4e86\u4e00\u4e9b\u611f\u6027\u7684\u7406\u89e3\uff0c\u7ed9\u5927\u5bb6\u7ffb\u8bd1\u4e00\u4e0b\u3002\n\n\u6ce8\u610f\u5230 $m=O(n)$\uff0c\u751a\u81f3\u53ea\u662f $O(\\sqrt n)$ \u7684\u65f6\u5019\u5faa\u73af\u8282\u5c31 $\\leq 3$ \u4e86\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\n\n\u6211\u4eec\u8003\u8651\u6700\u540e $m$ \u6b65\u7684\u65f6\u5019\uff0c\u4e00\u6b21\u524d\u8fdb\u6216\u540e\u9000\u4e0d\u53ef\u80fd\u8ba9\u6211\u4eec\u8de8\u8d8a\u6574\u4e2a\u524d\u8fdb\u6216\u540e\u9000\u533a\uff0c\u6211\u4eec\u8bb0\u5206\u754c\u7ebf\u4e3a $0$\uff0c\u53ef\u4ee5\u5199\u51fa\u4ee5\u4e0b\u4f2a\u4ee3\u7801\uff1a\n\n```cpp\nfor (int i = m; i > 0; --i) {\n   if (s > 0) s -= i;\n   else s += i;\n}\n```\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4e0d\u8d85\u8fc7 $\\frac{m^2}{2}$ \u7684\u6570\u5728\u8fd9\u4e9b\u64cd\u4f5c\u540e\u7edd\u5bf9\u503c\u90fd\u53d8\u6210\u4e86 $0$ \u6216 $1$\uff0c\u591a\u505a\u51e0\u6b21\u5c31\u51fa\u73b0\u5faa\u73af\u4e86\u3002\n\n\u90a3 $k$ \u5f88\u5c0f\u7684\u65f6\u5019\u5462\uff1f\n\n\u6211\u4eec\u8003\u8651\u524d\u9762\u51e0\u6b21\u778e\u8d70\uff0c\u5927\u591a\u6570\u90fd\u8d70\u5230\u540c\u4e00\u4e2a\u65b9\u5411\uff0c\u800c\u6709\u5f88\u5c0f\u7684\u51e0\u7387\u8d70\u53e6\u4e00\u4e2a\u65b9\u5411\u3002\u6211\u4eec\u5927\u529b\u731c\u6d4b\u8fd9\u4e9b\u6270\u52a8\u662f\u968f\u673a\u7684\uff0c\u90a3\u4e48\u6839\u636e\u751f\u65e5\u6096\u8bba\uff0c\u671f\u671b $\\sqrt n$ \u6b21\u5c31\u4f1a\u8fdb\u73af\u3002\n\n\u4e8e\u662f\u6211\u4eec\u4e00\u901a\u778e\u626f\u626f\u51fa\u6765\u5faa\u73af\u8282\u5927\u6982\u662f $O(\\sqrt n)$\u3002\n\n## \u4ee3\u7801\n\u771f\u7684\u53ea\u6709 787B\uff01\n\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\nusing namespace std;\n#define int long long\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nint mp[100003];\nsigned main()\n{\n\tint n=read(),m=read(),s=read()-1,t=read();\n\tfor(int i=t; i; --i)\n\t{\n\t\tif(i%n==t%n)\n\t\t{\n\t\t\tif(mp[s])\n\t\t\t{\n\t\t\t\tt=i%(mp[s]-i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse mp[s]=i;\n\t\t}\n\t\tif(s<m) s=(s+i)%n;\n\t\telse s=((s-i)%n+n)%n;\n\t\tif(i==1) printf(\"%lld\\n\",s+1),exit(0);\n\t}\n\tfor(int i=t; i; --i)\n\t\tif(s<m) s=(s+i)%n;\n\t\telse s=((s-i)%n+n)%n;\n\tprintf(\"%lld\\n\",s+1);\n\treturn 0;\n}\n```",
        "postTime": 1646311557,
        "uid": 111055,
        "name": "dead_X",
        "ccfLevel": 8,
        "title": "\u9898\u89e3/\u4e71\u641e CF1056G"
    },
    {
        "content": "CF1056G \u3010Take Metro\u3011\n\n\u4f5c\u4e3a\u4e00\u9053CF\u9898\uff0c\u5b83\u5c24\u5176\u6bd2\u7624\u7684\u5730\u65b9\u5728\u4e8e\u5b83\u7684\u5b98\u65b9\u9898\u89e3QAQ  \n\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b98\u65b9\u9898\u89e3\u662f\u600e\u4e48\u8bf4\u7684\u3002\n\nThere were a variety of approaches to this problem. In all of them you first have to note that there are only $n^2$ different positions describes as pairs (station, T mod n). Now if you manually perform several first steps to make T mod n = 0, you will have to perform T/n large steps, each of them is to have n rides with T=n, T=n\u22121, ..., T=1. If you compute for each station the station you will end up after a large step, you will get a functional graph where you will easily find the answer, computing a period and a pre-period. The question is how to get the graph.\n\nThe first approach is to be strong and code a persistent treap (or any other persistent data structure that supports split and merge). This approach is O(nlog(n)).//\u8fd9\u4e00\u6bb5\u662f\u6700\u5173\u952e\u7684\u90e8\u5206\uff0c\u7136\u800c\u53ea\u6709\u4e24\u53e5\u8bddQAQ  \nThe second approach is... to rely that the cycle is not large and compute all large tests in a straightforward way. This also works fast, but we don't have a proof for that.\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u8fd9\u9053\u9898\u91cc\u6bcf\u4e00\u6b65\u7684\u8ddd\u79bb\u76f8\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u500d\u589e\u9884\u5904\u7406\u505a\u5230O(nlog(n))\u3002\u7136\u800c\u8fd9\u9053\u9898\u91cc\u8ddd\u79bb\u662f\u9012\u51cf\u7684\u3002  \n\u63a5\u7740\u6211\u4eec\u53d1\u73b0\uff0c\u6bcf\u4e00\u6b65\u7684\u6548\u679c\u53ea\u4e0eT mod n\u6709\u5173\u3002\u4e8e\u662f\u6709\u4e86\u89e3\u9898\u601d\u8def\uff1a  \n1.\u66b4\u529b\u8d70\u76f4\u5230T mod n = 0  \n2.\u628aT\u6b65\u5206\u89e3\u4e3aT/n\u7ec4\uff0c\u6bcf\u4e00\u7ec4\u5728mod n\u610f\u4e49\u4e0b\u662f\u76f8\u540c\u7684\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u628a\u6bcfn\u6b65\u770b\u4f5c\u4e00\u201c\u5927\u6b65\u201d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u500d\u589e\u89e3\u51b3\u4e86\u3002  \n\n\u4e4b\u540e\u662f\u91cd\u70b9\u90e8\u5206\uff1a\u5982\u4f55\u8ba1\u7b97\u4ece\u6bcf\u4e2a\u8f66\u7ad9\u8d70\u4e00\u5927\u6b65\u540e\u7684\u76ee\u7684\u5730\uff1f\u7136\u800c\u9898\u89e3\u5728\u8fd9\u90e8\u5206\u53ea\u6709\u4e24\u53e5\u8bddQAQ  \n\u9898\u89e3\u6307\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53ef\u6301\u4e45\u5316treap\uff08\u6216\u8005\u7528\u5176\u5b83\u652f\u6301split\u548cmerge\u64cd\u4f5c\u7684\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u4ee3\u66ff\u5b83\uff0c\u7136\u800c\u6211\u4e0d\u77e5\u9053\u8fd8\u6709\u4ec0\u4e48\u5176\u5b83\u6570\u636e\u7ed3\u6784\u652f\u6301\u8fd9\u4e2aqaq\uff09\u3002\u7ecf\u8fc7\u5bf9AC\u4ee3\u7801\u7684\u7814\u7a76\uff0c\u6211\u7ec8\u4e8e\u660e\u767d\u4e86\u5230\u5e95\u662f\u5982\u4f55\u5229\u7528treap\u89e3\u51b3\u95ee\u9898\u7684\u3002  \n\n\u9996\u5148\u8003\u8651\u4e00\u4e2adp\uff0c\u4ee4$f_{i}[j]$\u8868\u793a\u4ece j \u7ed3\u70b9\u5f00\u59cb\uff0c\u8d70\u6b65\u957f\u4f9d\u6b21\u4e3ai, i-1, i-2 ... 1\u7684 i \u6b65\u6240\u5230\u8fbe\u7684\u4f4d\u7f6e\u3002\u90a3\u4e48\uff0c\u82e5 j \u2264 m\uff0c$f_{i}[j]=f_{i-1}[j+i]$\uff0c\u5426\u5219$f_{i}[j]=f_{i-1}[j-i]$\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316treap\u6765\u52a0\u901f\u9012\u63a8\uff08\u6216\u8005\u8bf4\u201c\u6574\u4f53\u201d\u9012\u63a8\uff09\u3002   \n\u6211\u4eec\u7ef4\u62a4\u4e00\u53ean\u4e2a\u7ed3\u70b9\u7684treap\uff0c\u4e00\u5f00\u59cb\uff0c\u4ee4\u7b2ci\u4e2a\u7ed3\u70b9\u7684\u6570\u503c\u4e3ai\u3002\u4e4b\u540e\u7684\u64cd\u4f5c\u5982\u4e0b\u6240\u793a  \n```\nfor (int i = 1; i < N; i++)\n\tp = merge(get(1 + i, M + i), get(M + 1 - i, N - i));\n/*\np\u6307\u5411treap\u7684\u6839\u8282\u70b9\uff0cget(l, r)\u5f97\u5230\u4e00\u53ea\u5305\u542b\n\u539ftreap\u7684\u7b2cl\u5230r\u4e2a\u7ed3\u70b9\u7684treap\u3002\u7531\u4e8e\u662f\u53ef\u6301\u4e45\u5316treap,\nget()\u4e0d\u4f1a\u6539\u53d8\u539f\u59cb\u7684treap\n*/\n```\n\u8fd9\u5176\u5b9e\u662f\u5229\u7528treap\u52a0\u901f\u4e4b\u524d\u63d0\u5230\u7684dp\u3002\u5faa\u73af\u5b8c\u6210\u540e\uff0ctreap\u7684\u7b2ci\u4e2a\u7ed3\u70b9\u7684\u6570\u503c\u5373\u4e3a\u7b2ci\u4e2a\u8f66\u7ad9\u51fa\u53d1\u8d70\u4e00\u5927\u6b65\u540e\u7684\u76ee\u7684\u5730\u3002  \n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u7531\u4e8e\u64cd\u4f5c\u4e2d\u6d89\u53ca\u4e86\u5408\u5e76\u4e24\u4e2a\u5b9e\u9645\u4e0a\u76f8\u540c\uff08\u6216\u8005\u6709\u90e8\u5206\u76f8\u540c\uff09\u7684treap\u8fd9\u6837\u5947\u602a\u7684\u64cd\u4f5c\uff0c\u6700\u540e\u7684treap\u53ef\u80fd\u5305\u542b\u5927\u91cf\u7684\u76f8\u540c\u7ed3\u70b9\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u901a\u8fc7\u4e00\u5f00\u59cb\u8d4b\u968f\u673a\u503c\u6765\u4fdd\u8bc1\u6811\u7684\u5e73\u8861\u4e86\uff0c\u5fc5\u987b\u91c7\u53d6\u968f\u673a\u5316\u5408\u5e76\u7684\u7b56\u7565\u3002\u8fd8\u6709\uff0c\u4e0d\u77e5\u4e3a\u4f55\uff08\u6216\u8bb8\u662f\u56e0\u4e3aRAND_MAX\u592a\u5c0f\u4e86\uff09\uff0c\u6709\u65f6\u6811\u9ad8\u4f1a\u98d9\u5347\u5230\u4e00\u4e8c\u767e\u751a\u81f3\u4e09\u767e\u591aQAQ\uff0c\u6240\u4ee5\u8fd8\u5fc5\u987b\u52a0\u4e0a\u4e00\u4e2a\u91cd\u6784qwq(\u4e0d\u8fc7\u5b9e\u6d4b\u5f88\u5c11\u7528\u5230\u91cd\u6784\uff0c\u6ee1\u6570\u636e\u4e5f\u6700\u591a\u4e00\u4e24\u6b21)  \n\u5177\u4f53\u770b\u4ee3\u7801\u5427QwQ\n```\n#include <cstdlib>\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <cstring>\n#include <time.h>\n#include <complex>\n#include <algorithm>\n#include <queue>\n#include <stack>\n\n#pragma warning(disable:4996)\n#define lowbit(a) ((a)&-(a))\n\ntemplate<typename T> T min(T x, T y)\n{\n\treturn x < y ? x : y;\n}\ntemplate<typename T> T max(T x, T y)\n{\n\treturn x > y ? x : y;\n};\n\nconst long long MAXN = 500005;\nconst int INF = 2000000005;\n\nstruct node {\n\tint key;\n\tint size;\n\tnode *lson;\n\tnode *rson;\n\tnode()\n\t{\n\t\tkey = 0;\n\t\tsize = 1;\n\t\tlson = rson = NULL;\n\t}\n\tvoid fixup()\n\t{\n\t\tsize = (lson ? lson->size : 0) + (rson ? rson->size : 0) + 1;\n\t}\n};\n\nstruct pair {\n\tnode *fir;\n\tnode *sec;\n\tpair(node *x = NULL, node *y = NULL)\n\t{\n\t\tfir = x;\n\t\tsec = y;\n\t}\n};\n\nnode pool[40000000];\nint pointer = 0;\nnode *newnode(int k = 0)\n{\n\tpool[pointer].key = k;\n\treturn &pool[pointer++];\n}\n\nint z;\nbool shouldleft(int a, int b)\n{\n\treturn rand() % (a + b) < a;\n}\nnode *merge(node *T1, node *T2)\n{\n\tif (!T1)\n\t\treturn T2;\n\tif (!T2)\n\t\treturn T1;\n\tnode *t = newnode();\n\tif (shouldleft(T1->size, T2->size))\n\t{\n\t\t*t = *T1; z++;\n\t\tt->rson = merge(t->rson, T2);\n\t\tt->fixup();\n\t\treturn t;\n\t}\n\t*t = *T2; z++;\n\tt->lson = merge(T1, t->lson);\n\tt->fixup();\n\treturn t;\n}\npair split(node *T, int k)\n{\n\tif (!T)\n\t\treturn pair();\n\tnode *t = newnode();\n\t*t = *T; z++;\n\tint r = (T->lson ? T->lson->size : 0) + 1;\n\tif (k < r)\n\t{\n\t\tpair pa = split(T->lson, k);\n\t\tt->lson = pa.sec;\n\t\tt->fixup();\n\t\treturn pair(pa.fir, t);\n\t}\n\tpair pa = split(T->rson, k - r);\n\tt->rson = pa.fir;\n\tt->fixup();\n\treturn pair(t, pa.sec);\n}\n\nint next[51][MAXN], ns;\nvoid dfs(node *T, int *a, int &cur)\n{\n\tif (T->lson)\n\t\tdfs(T->lson, a, cur);\n\ta[++cur] = T->key;\n\tif (T->rson)\n\t\tdfs(T->rson, a, cur);\n}\n\nnode *build(int *a, int L, int R)\n{\n\tif (L > R)\n\t\treturn NULL;\n\tint mid = (L + R) / 2;\n\tnode *p = newnode(a[mid]);\n\tp->lson = build(a, L, mid - 1);\n\tp->rson = build(a, mid + 1, R);\n\tp->fixup();\n\treturn p;\n}\n\nint temp[MAXN], ts;\nnode *rebuild(node *T)\n{\n\tts = 0;\n\tdfs(T, temp, ts);\n\treturn build(temp, 1, ts);\n}\n\nint N, M, S;\nlong long T;\nnode *p;\n\nvoid brute()\n{\n\tif (S <= M)\n\t\tS = (S + T) % N;\n\telse\n\t\tS = ((S - T) % N + N) % N;\n\tif (S == 0)\n\t\tS = N;\n\tT--;\n}\n\nnode *get(int l, int r)\n{\n\twhile (l <= 0)\n\t{\n\t\tl += N;\n\t\tr += N;\n\t}\n\twhile (l > N)\n\t{\n\t\tl -= N;\n\t\tr -= N;\n\t}\n\tif (r > N)\n\t\treturn merge(get(l, N), get(N + 1, r));\n\tpair t1 = split(p, r);\n\tpair t2 = split(t1.fir, l - 1);\n\treturn t2.sec;\n}\n\nvoid init()\n{\n\tscanf(\"%d %d %d %lld\", &N, &M, &S, &T);\n\tfor (int i = 1; i <= N; i++)\n\t\tp = merge(p, newnode(i));\n\tfor (int i = 1; i < N; i++)\n\t{\n\t\tint Z = z;\n\t\tp = merge(get(1 + i, M + i), get(M + 1 - i, N - i));\n\t\tif (z - Z > 1000)\n\t\t\tp = rebuild(p);\n\t}\n\tdfs(p, next[0], ns);\n\tfor (int i = 1; i <= 50; i++)\n\t\tfor (int j = 1; j <= N; j++)\n\t\t\tnext[i][j] = next[i - 1][next[i - 1][j]];\n}\n\nint main()\n{\n\tinit();\n\n\twhile (T%N)\n\t\tbrute();\n\n\tT /= N;\n\tfor (int i = 50; i >= 0; i--)\n\t\tif (T&(1ll << i))\n\t\t\tS = next[i][S];\n\n\tprintf(\"%d\", S);\n\n\treturn 0;\n}\n```",
        "postTime": 1549217464,
        "uid": 64366,
        "name": "ddwqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1056G \u3010Take Metro\u3011"
    },
    {
        "content": "&emsp;&emsp;[\u6765\u8fd9\u91cc\u770b\u53ed~](https://www.cnblogs.com/rainybunny/p/14502044.html).\n\n# $\\mathcal{Description}$\n\n&emsp;&emsp;[Link](https://www.luogu.com.cn/problem/CF1056G).\n\n&emsp;&emsp;\u6709 $n$ \u4e2a\u7ad9\u53f0\u5728\u4e00\u4e2a\u5706\u73af\u4e0a\uff0c\u987a\u65f6\u9488\u7f16\u53f7 $1\\sim n$\uff0c\u5176\u4e2d $1\\sim m$ \u53f7\u7ad9\u53f0\u53ea\u80fd\u4e58\u5750\u987a\u65f6\u9488\u8f6c\u7684\u73af\u7ebf\uff0c\u5176\u4ed6\u8f66\u7ad9\u53ea\u80fd\u4e58\u5750\u9006\u65f6\u9488\u8f6c\u7684\u73af\u7ebf\u3002\u7ed9\u5b9a\u8d77\u70b9 $s$ \u548c\u53c2\u6570 $t$\uff0c\u8fd0\u52a8\u89c4\u5219\u4e3a\uff1a\n\n1. \u4e58\u5750\u5728 $s$ \u7ad9\u7684\u73af\u7ebf\uff0c\u5750 $t$ \u7ad9\uff0c\u4ee4 $s$ \u4e3a\u5230\u8fbe\u7684\u7ad9\u70b9\uff1b\n\n2. \u4ee4 $t\\leftarrow t-1$\uff0c\u82e5 $t>0$\uff0c\u8fd4\u56de\u7b2c\u4e00\u6b65\u3002\n\n&emsp;&emsp;\u6c42 $s$ \u6700\u7ec8\u7684\u503c\u3002\n\n&emsp;&emsp;$3\\le n\\le10^5$\uff0c$1\\le t\\le 10^{12}$\u3002\n\n# $\\mathcal{Solution}$\n\n&emsp;&emsp;\u60f3\u8981\u500d\u589e\uff1f\u53c2\u6570 $t$ \u6bcf\u65f6\u6bcf\u523b\u5728\u53d8\u5316\uff0c\u4e0d\u53ef\u80fd\u76f4\u63a5\u500d\u589e\u3002\n\n&emsp;&emsp;\u4f46\u6ce8\u610f\u5230\u8fd0\u52a8\u662f\u5728\u73af\u4e0a\uff0c\u6240\u4ee5 $t$ \u548c $(t\\bmod n)$ \u5728\u5f53\u524d\u4e00\u6b65\u8fd0\u52a8\u6240\u8fbe\u5230\u7684\u6548\u679c\u662f\u7b49\u4ef7\u7684\uff0c\u800c\u4e14 $n$ \u7684\u8303\u56f4\u80fd\u591f\u63a5\u53d7\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u6a21\u62df\u76f4\u5230 $t$ \u6210\u4e3a $n$ \u7684\u500d\u6570\u3002\n\n&emsp;&emsp;\u63a5\u7740\u518d\u7528\u500d\u589e\uff0c\u6211\u4eec\u9700\u8981\u6c42\u51fa\u4ece $i~(i=1,2,\\cdots,n)$ \u51fa\u53d1\uff0c\u53c2\u6570 $t=n$\uff0c\u8fd0\u52a8\u5b8c\u6210\u540e\u5230\u8fbe\u7684\u70b9\u3002\u4e0d\u653e\u4ee4\u6240\u6709\u70b9\u7f16\u53f7 $-1$ \u65b9\u4fbf\u63a5\u4e0b\u6765\u4f7f\u7528 DP\uff0c\u4ee4 $f(i,j)$ \u8868\u793a\u4ece $i$ \u51fa\u53d1\uff0c\u53c2\u6570 $t=j$\uff0c\u8fd0\u52a8\u5b8c\u6210\u540e\u5230\u8fbe\u7684\u70b9\u3002\u663e\u7136\u6709\u8f6c\u79fb\n$$\nf(i,j)=\\begin{cases}\ni&j=0\\\\\nf(i+j,j-1)&i\\in[0,m)\\land j>0\\\\\nf(i-j,j-1)&i\\in[m,n)\\land j>0\n\\end{cases}\n$$\n\u5176\u4e2d\u7b2c\u4e00\u7ef4\u9ed8\u8ba4\u53d6$\\bmod n$ \u610f\u4e49\u4e0b\u7684\u975e\u8d1f\u503c\u3002\u53ef\u89c1\uff0c\u6211\u4eec\u4ec5\u9700\u8981\u652f\u6301\u5bf9 $f(i)$ \u8fd9\u4e00\u7ef4\u72b6\u6001\u8fdb\u884c\u6574\u6bb5\u7684\u63d0\u53d6\u548c\u62fc\u63a5\uff0c\u5c31\u80fd\u201c\u6574\u4f53 DP\u201d\u51fa $f(i+1)$ \u7684\u72b6\u6001\u3002\n\n&emsp;&emsp;\u7528\u53ef\u6301\u4e45\u5316 treap \u7ef4\u62a4\u8fd9\u4e00\u8fc7\u7a0b\u5373\u53ef\u3002\u6ce8\u610f DP \u4e2d\u63d0\u53d6\u51fa\u7684\u4e24\u6bb5\u533a\u95f4\u53ef\u80fd\u6709\u5927\u9762\u79ef\u91cd\u53e0\uff0c\u9700\u8981\u4f7f\u7528\u968f\u673a\u5408\u5e76\u7684\u65b9\u6cd5\u5b9e\u73b0 merge \u64cd\u4f5c\uff0c\u5e76\u4e14\u5b9a\u671f\u91cd\u6784\u6811\u5e76\u56de\u6536\u6389\u6240\u6709\u7528\u4e8e\u6301\u4e45\u5316\u7684\u7ed3\u70b9\u3002\n\n&emsp;&emsp;\u6c42\u51fa $f(i,n)$ \u540e\uff0c\u5bf9\u5176\u5904\u7406\u500d\u589e\u6570\u7ec4\u5373\u53ef\u56de\u7b54\u8be2\u95ee\u3002\n\n&emsp;&emsp;\u590d\u6742\u5ea6 $\\mathcal O(n\\log t)$\uff0c\u5e38\u6570\u8f83\u5927\u3002\n\n## $\\mathcal{Code}$\n\n```cpp\n/* Clearink */\n\n#include <cstdio>\n#include <cassert>\n#include <cstdlib>\n\n#define rep( i, l, r ) for ( int i = l, rpbound##i = r; i <= rpbound##i; ++i )\n#define per( i, r, l ) for ( int i = r, rpbound##i = l; i >= rpbound##i; --i )\n\ntypedef long long LL;\n\nconst int MAXN = 1e5, MAXLG = 39;\nint n, m, s, f[MAXN + 5][MAXLG + 5], tf[MAXN + 5];\nLL turn;\n\nstruct PersistentTreap {\n\tstatic const int MAXND = 4e7;\n\tint node, val[MAXND + 5], ch[MAXND + 5][2], siz[MAXND + 5];\n\t// nodes's id are 0-based.\n\n\tPersistentTreap() { srand( 20120712 ); }\n\n\tinline int crtnd( const int v ) {\n\t\tint u = node++;\n\t\tval[u] = v, ch[u][0] = ch[u][1] = -1, siz[u] = 1;\n\t\treturn u;\n\t}\n\n\tinline void copy( const int u, const int v ) {\n\t\tval[u] = val[v], ch[u][0] = ch[v][0], ch[u][1] = ch[v][1];\n\t\tsiz[u] = siz[v];\n\t}\n\n\tinline void pushup( const int u ) {\n\t\tsiz[u] = 1 + ( ~ch[u][0] ? siz[ch[u][0]] : 0 )\n\t\t\t+ ( ~ch[u][1] ? siz[ch[u][1]] : 0 );\n\t}\n\n\tinline bool goleft( const int a, const int b ) {\n\t\treturn rand() % ( a + b ) < a;\n\t}\n\n\tinline int merge( const int u, const int v ) {\n\t\tif ( !~u || !~v ) return ~u ? u : v;\n\t\tint w = crtnd( 0 );\n\t\tif ( goleft( siz[u], siz[v] ) ) {\n\t\t\tcopy( w, u ), ch[w][1] = merge( ch[w][1], v );\n\t\t} else {\n\t\t\tcopy( w, v ), ch[w][0] = merge( u, ch[w][0] );\n\t\t}\n\t\treturn pushup( w ), w;\n\t}\n\n\tinline void rsplit( const int u, const int k, int& x, int& y ) {\n\t\tif ( !~u ) return void( x = y = -1 );\n\t\tif ( !k || ( ~ch[u][0] && k <= siz[ch[u][0]] ) ) {\n\t\t\tassert( node < MAXND );\n\t\t\tcopy( y = crtnd( 0 ), u );\n\t\t\trsplit( ch[y][0], k, x, ch[y][0] );\n\t\t\tpushup( y );\n\t\t} else {\n\t\t\tassert( node < MAXND );\n\t\t\tcopy( x = crtnd( 0 ), u );\n\t\t\trsplit( ch[x][1],\n\t\t\t\tk - ( ~ch[u][0] ? siz[ch[u][0]] : 0 ) - 1, ch[x][1], y );\n\t\t\tpushup( x );\n\t\t}\n\t}\n\n\tinline int rebuild( const int l, const int r, const int* arr ) {\n\t\tif ( l > r ) return -1;\n\t\tint mid = l + r >> 1, u = crtnd( arr[mid] );\n\t\tch[u][0] = rebuild( l, mid - 1, arr );\n\t\tch[u][1] = rebuild( mid + 1, r, arr );\n\t\treturn pushup( u ), u;\n\t}\n\n\tinline void travel( const int u, int& idx, int* arr ) {\n\t\tif ( !~u ) return ;\n\t\ttravel( ch[u][0], idx, arr );\n\t\tarr[idx++] = val[u];\n\t\ttravel( ch[u][1], idx, arr );\n\t}\n} trp;\n\ninline int extract( const int rt, int l, int r ) {\n\tl = ( l % n + n ) % n, r = ( r % n + n ) % n;\n\tint x, y, z;\n\tif ( l <= r ) {\n\t\ttrp.rsplit( rt, l, x, y );\n\t\tassert( trp.siz[y] >= r - l + 1 );\n\t\ttrp.rsplit( y, r - l + 1, y, z );\n\t\treturn y;\n\t} else {\n\t\ttrp.rsplit( rt, r + 1, x, y );\n\t\tassert( trp.siz[y] >= l - r - 1 );\n\t\ttrp.rsplit( y, l - r - 1, y, z );\n\t\treturn trp.merge( z, x );\n\t}\n}\n\nint main() {\n\tscanf( \"%d %d %d %lld\", &n, &m, &s, &turn ), --s;\n\tfor ( ; turn % n; --turn ) {\n\t\ts = ( s + ( s < m ? turn : -turn ) % n + n ) % n;\n\t}\n\tturn /= n;\n\tint rt = -1;\n\trep ( i, 0, n - 1 ) rt = trp.merge( rt, trp.crtnd( i ) );\n\trep ( i, 1, n ) {\n\t\trt = trp.merge( extract( rt, i, i + m - 1 ),\n\t\t\textract( rt, m - i, n - i - 1 ) );\n\t\tif ( !( i % 5000 ) ) {\n\t\t\tint tmp = 0;\n\t\t\ttrp.travel( rt, tmp, tf );\n\t\t\ttrp.node = 0, rt = trp.rebuild( 0, tmp - 1, tf );\n\t\t}\n\t}\n\tint tmp = 0;\n\ttrp.travel( rt, tmp, tf );\n\trep ( i, 0, n - 1 ) f[i][0] = tf[i];\n\tfor ( int j = 1; 1ll << j <= turn; ++j ) {\n\t\trep ( i, 0, n - 1 ) {\n\t\t\tf[i][j] = f[f[i][j - 1]][j - 1];\n\t\t}\n\t}\n\tfor ( int j = 39; ~j; --j ) if ( ( turn >> j ) & 1 ) s = f[s][j];\n\tprintf( \"%d\\n\", s + 1 );\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1615207345,
        "uid": 123807,
        "name": "Rainybunny",
        "ccfLevel": 9,
        "title": "Solution -\u300cCF 1056G\u300dTake Metro"
    },
    {
        "content": "\u5ba3\u4f20\u535a\u5ba2 $\\to$ [link](https://www.cnblogs.com/Plozia/p/16875410.html)\n\n*2900 \u7684\u9898\uff0c\u8bc4\u5230\u9ed1\u9898\u662f\u56e0\u4e3a std \u505a\u6cd5\u8981\u7528\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\uff0c\u7136\u800c\u6709\u4e00\u79cd\u66f4\u7b80\u6d01\u7684\u505a\u6cd5\u3002\n\n\u6ce8\u610f\u5230 $t$ \u5f88\u5927\uff0c\u7136\u540e\u6bcf\u4e00\u6b65\u53ea\u548c $t\\bmod n$ \u7684\u5927\u5c0f\u6709\u5173\u7cfb\uff0c\u56e0\u6b64\u4f60\u60f3\u5148\u6c42\u51fa $t=n$ \u65f6\u6bcf\u4e00\u4e2a\u70b9\u6700\u540e\u4f1a\u8d70\u5230\u54ea\u4e9b\u70b9\uff0c\u7136\u540e\u500d\u589e\u5904\u7406\uff0c\u81f3\u4e8e\u5269\u4e0b\u7684\u4e0d\u80fd\u6574\u9664 $n$ \u7684\u90e8\u5206\u66b4\u529b\u8dd1\u5373\u53ef\uff08\u4e0b\u9762\u8ba4\u4e3a $t$ \u5df2\u7ecf\u66b4\u529b\u9884\u5904\u7406\u6389\u4e86\u4e0d\u80fd\u6574\u9664 $n$ \u7684\u90e8\u5206\uff09\u3002\n\n\u7136\u540e\u4f60\u60f3\u63a8\u6027\u8d28\u63a8\u51fa\u8fd9\u4e2a\u8d70\u5230\u7684\u70b9\uff0c\u7ed3\u679c\u4f60\u53d1\u73b0\u4f60\u63a8\u4e0d\u51fa\u6765\uff0c\u6ca1\u6709\u8f68\u8ff9\u53ef\u5faa\u3002\n\n\u7136\u540e\u4f60\u60f3\u6253\u4e2a\u66b4\u529b\u8f93\u51fa\u6765\u770b\u4e00\u773c\uff0c\u7136\u540e\u53d1\u73b0\u4f3c\u4e4e\u6700\u540e\u6bcf\u4e2a\u70b9\u80fd\u591f\u8d70\u5230\u7684\u70b9\u6784\u6210\u7684\u96c6\u5408\u5e76\u4e0d\u5927\uff0c\u4e0d\u8fc7\u6700\u5927\u7684\u4e5f\u4f1a\u6709 $\\dfrac{n}{5}$ \u5de6\u53f3\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b $n=10^5$ \u65f6\u5927\u6982\u6709 $4000$ \u4e2a\u5de6\u53f3\u3002\n\n\u4f46\u662f\u8fd9\u6837\u8fd8\u662f\u6ca1\u6cd5\u5904\u7406\uff0c\u7531\u4e8e\u6700\u540e\u7684\u70b9\u9ad8\u5ea6\u91cd\u5408\uff0c\u4e8e\u662f\u4f60\u6000\u7591\u6240\u6709\u70b9\u6700\u540e\u4f1a\u8d70\u5230\u4e00\u4e2a\u73af\u91cc\u9762\uff0c\u4e8e\u662f\u4f60\u51b3\u5b9a\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u8d70\u5230\u54ea\u4e2a\u70b9\u4e4b\u540e\u73af\u957f\u5927\u5c0f\u3002\n\n\u7136\u540e\u4f60\u53d1\u73b0\u73af\u957f\u7279\u522b\u5c0f\uff0c\u81ea\u5df1\u624b\u9020\u65f6\u6700\u5927\u503c\u4e5f\u624d 10\u3002\n\n\u7136\u540e\u4f60\u731c\u6d4b\u8fd9\u4e2a\u73af\u5f88\u5c0f\uff0c\u5b8c\u5168\u53ef\u4ee5\u4ece\u8d77\u70b9\u76f4\u63a5\u9884\u5904\u7406\u51fa\u8fd9\u4e2a\u73af\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u73af\u4e0a\u904d\u5386\uff0c\u56e0\u4e3a $t$ \u6bcf\u7ecf\u8fc7\u73af\u957f $\\times n$ \u7684\u65f6\u95f4\u5c31\u4f1a\u56de\u5230\u8fd9\u4e2a\u70b9\uff0c\u4e8e\u662f\u53ef\u4ee5\u8ba9 $t$ \u5bf9\u8fd9\u4e2a\u503c\u53d6\u6a21\uff0c\u7136\u540e $t$ \u5c31\u5f88\u5c0f\u4e86\uff0c\u53c8\u53ef\u4ee5\u66b4\u529b\u8dd1\u4e86\uff0c\u5f53\u7136\u4f60\u4f1a\u53d1\u73b0\u8d77\u70b9\u4e0d\u4e00\u5b9a\u5728\u73af\u5185\uff0c\u8981\u5148\u62c9\u5230\u73af\u91cc\u9762\u518d\u8dd1\uff0c\u540c\u65f6\u8bb0\u5f97\u5c06 $t$ \u5f00\u6210 long long\u3002\n\n\u7136\u540e\u4f60\u8fc7\u4e86\uff0c\u4e14\u5b9e\u73b0\u5341\u5206\u4f18\u79c0\uff0c\u8dd1\u7684\u8fd8\u633a\u5feb\u3002\n\n\u5b9e\u9645\u4e0a\u6700\u5927\u73af\u957f\u67d0\u4f4d\u8bc4\u8bba\u533a\u8001\u54e5\u80e1\u51fa\u6765\u671f\u671b\u662f $O(\\sqrt{n})$\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u4e0a\u9650\u5c31\u662f $O(n\\sqrt{n})$\uff0c\u7136\u800c\u51fa\u9898\u4eba\u6ca1\u60f3\u5230\u8fd9\u4e2a\u505a\u6cd5\uff0c\u4ee5\u53ca CF \u7684\u673a\u5b50\u5feb\u6240\u4ee5\u5e26\u4e2a\u6839\u53f7\u7167\u6837\u80fd\u8fc7\u3002\n\n~~\u5199\u7684\u5168\u65b0\u98ce\u683c\u7684\u9898\u89e3\uff1f\u6211\u4ee5\u524d\u9898\u89e3\u57fa\u672c\u4e0a\u770b\u4e0d\u5230\u201c\u4f60\u201d\u8fd9\u4e2a\u5b57\uff08~~\n\nCode\uff1a\n\n```cpp\n/*\n========= Plozia =========\n\tAuthor:Plozia\n\tProblem:CF1056G Take Metro\n\tDate:2022/11/9\n========= Plozia =========\n*/\n\n#include <bits/stdc++.h>\ntypedef long long LL;\n\nconst int MAXN = 1e5 + 5;\nint n, m, s, Next[MAXN];\nLL t;\n\nint Solve(int x, int p) { return ((x + p) > n) ? (x + p - n) : (x + p); }\n\nvoid Brute(int s, LL t)\n{\n\tfor (LL i = t; i >= 1; --i)\n\t{\n\t\ts = Solve(s, (s <= m) ? (i % n) : (n - (i % n)));\n\t}\n\tprintf(\"%d\\n\", s);\n}\n\nint main()\n{\n\tstd::cin >> n >> m >> s >> t; int x = 0;\n\tfor (int i = t % n; i >= 1; --i, --t) { s = Solve(s, (s <= m) ? i : (n - i)); }\n\tif (t == 0) { printf(\"%d\\n\", s); return 0; }\n\tfor (x = s; !Next[x]; x = Next[x])\n\t{\n\t\tint tmp = x;\n\t\tfor (int i = n; i >= 1; --i) tmp = Solve(tmp, (tmp <= m) ? i : (n - i));\n\t\tNext[x] = tmp;\n\t}\n\tint cnt = 0; for (int pz = s; pz != x; pz = Next[pz]) ++cnt;\n\tif (t <= 1ll * cnt * n) { Brute(s, t); return 0; }\n\tt -= 1ll * cnt * n; cnt = 1; s = x; for (int pz = Next[x]; pz != x; pz = Next[pz]) ++cnt;\n\tt %= 1ll * cnt * n; Brute(s, t); return 0;\n}\n```",
        "postTime": 1668003854,
        "uid": 134000,
        "name": "Plozia",
        "ccfLevel": 7,
        "title": "CF1056G Take Metro \u9898\u89e3"
    }
]