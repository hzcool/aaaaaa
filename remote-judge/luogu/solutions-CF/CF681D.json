[
    {
        "content": "## \u9898\u610f\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/CF681D)\n\n\u9700\u8981\u5bfb\u627e\u4e00\u79cd\u53ef\u884c\u7684\u5019\u9009\u4eba\u5217\u8868\u5e76\u8f93\u51fa\uff0c\u6ce8\u610f\u6bcf\u4e2a\u4eba\u5728\u5019\u9009\u4eba\u5217\u8868\u627e\u51fa\u7b2c\u4e00\u4e2a\u81ea\u5df1\u7684\u7956\u5148\u5c31\u4f1a\u9001\u51fa\u793c\u7269\u3002\n## \u89e3\u6790\n\u9996\u5148\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u662f\u67d0\u4e00\u4e2a\u4eba\u7684\u9001\u793c\u7269\u76ee\u6807\uff0c\u5219\u8fd9\u4e2a\u4eba\u5c31**\u4e00\u5b9a\u4f1a\u51fa\u73b0\u5728\u7b54\u6848\u5e8f\u5217\u91cc**\u3002\n\n\u800c\u5982\u679c\u4e00\u4e2a\u4eba\u7684\u7956\u5148\u5df2\u7ecf\u51fa\u73b0\u5728\u540d\u5355\u91cc\u4e86\u7684\u8bdd\uff0c\u5219\u8fd9\u4e2a\u7956\u5148\u7684\u6240\u6709\u513f\u5b50\u5373\u4f7f\u540e\u7eed\u518d\u5728\u5217\u8868\u4e2d\u51fa\u73b0\uff0c\u4e5f\u662f**\u65e0\u610f\u4e49**\u7684\u3002\u56e0\u6b64\u6211\u4eec\u8003\u8651**\u62d3\u6251\u6392\u5e8f**\uff0c\u5efa\u4e00\u5f20**\u53cd\u56fe**\uff0c\u5e76\u5f97\u51fa\u8be5\u56fe\u7684\u62d3\u6251\u5e8f\uff0c\u518d\u9664\u53bb\u5176\u4e2d**\u4e0d\u6210\u4e3a\u4efb\u4f55\u4eba\u7684\u793c\u7269\u76ee\u6807**\u7684\u65e0\u610f\u4e49\u5e8f\u53f7\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u5f20\u56fe\uff0c\u6839\u636e\u4e0a\u8ff0\u6027\u8d28\uff0c\u5982\u679c\u5f53\u524d\u6839\u636e\u62d3\u6251\u62df\u5b9a\u7684\u65b9\u6848\u65e0\u6cd5\u6ee1\u8db3\u6bcf\u4e2a\u4eba\u7684\u8981\u6c42\uff0c\u5219**\u4e00\u5b9a\u4e0d\u5b58\u5728\u4e00\u79cd\u65b9\u6848\u80fd\u591f\u6ee1\u8db3**\uff0c\u56e0\u4e3a\u8be5\u65b9\u6848\u5df2\u7ecf\u8ba9\u9700\u8981\u8f83\u65e9\u51fa\u73b0\u7684\u70b9\u5c3d\u53ef\u80fd\u65e9\u51fa\u73b0\u4e86\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u8be5\u65b9\u6848\u80fd\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u82e5\u4e0d\u80fd\uff0c\u8f93\u51fa $-1$\u3002\n\n\u6211\u4eec\u7528\u62d3\u6251\u5e8f\uff08\u5df2\u53bb\u6389\u4e0d\u9700\u8981\u7684\u70b9\uff09\uff0c\u5373\u76ee\u524d\u7684\u65b9\u6848\u904d\u5386\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6bcf\u4e00\u6b21\u5c06\u8be5\u70b9\u4ee5\u53ca\u8be5\u70b9\u8dd1**\u6b63\u56fe**\u80fd\u591f\u5230\u8fbe\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u8be5\u70b9\u7684\u6240\u6709\u513f\u5b50\u7684\u5b9e\u9645\u9001\u793c\u7269\u76ee\u6807\u90fd\u6807\u8bb0\u4e3a\u8fd9\u4e2a\u70b9\u3002\u5f53\u7136\uff0c\u5df2\u7ecf\u6807\u8bb0\u8fc7\u7684\u70b9\u4e0d\u4f1a\u88ab\u8986\u76d6\u3002\n\n\u6700\u540e\u518d\u5c06\u5f97\u5230\u7684\u8fd9\u4e2a\u76ee\u6807\u4e0e\u6bcf\u4e2a\u4eba\u7684\u539f\u59cb\u8981\u6c42\u4e00\u4e00\u5bf9\u6bd4\uff0c\u82e5\u51fa\u73b0\u4e0d\u7b26\u5408\u7684\uff0c\u8f93\u51fa $-1$ ,\u5426\u5219\u8f93\u51fa\u8be5\u65b9\u6848\u5373\u53ef\u3002\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+5;\nint n,m;\nstruct edge{\n\tint to,next,from,pre;\n}e[N<<1];\nint head[N],cnt,prehead[N];\ninline void add(int x,int y){//\u53cd\u56fe\u4e3a next\uff0c\u6b63\u56fe\u4e3a pre\u3002 \n\te[++cnt].to=y;\n\te[cnt].next=head[x];\n\te[cnt].from=x;\n\te[cnt].pre=prehead[y];\n\thead[x]=cnt;\n\tprehead[y]=cnt;\n}\nint a[N],ru[N];\nbool inans[N];\nint tp[N],tot,Cnt;//tp[]\u8868\u793a\u62d3\u6251\u5e8f \nint ans[N];\ninline void topo(){//\u627e\u62d3\u6251\u5e8f \n\tqueue<int> q;\n\tfor(int i=1;i<=n;i++){\n\t\tif(!ru[i]) q.push(i);\n\t}\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\ttp[++tot]=u;\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].to;\n\t\t\tru[v]--;\n\t\t\tif(!ru[v]) q.push(v);\n\t\t}\n\t}\n}\nint fa[N];//\u8868\u793a\u6bcf\u4e2a\u70b9\u5b9e\u9645\u7684\u9001\u793c\u7269\u76ee\u6807 \nvoid dfs(int u, int f) {\n    if (fa[u]) {\n        return;\n    }\n    fa[u] =f;\n    for (int i=prehead[u];i;i=e[i].pre) {\n        int v=e[i].from;\n        dfs(v,f);\n    }\n}\n \nint main() {\n   scanf(\"%d%d\",&n,&m);\n    for (int i=1,x,y;i<=m;i++) {\n        scanf(\"%d%d\",&x,&y);\n        add(y,x);\n        ru[x]++;\n    }\n    for (int i=1;i<=n;i++) {//\u7edf\u8ba1\u90a3\u4e9b\u70b9\u9700\u8981\u51fa\u73b0\u5728\u7b54\u6848\u91cc \n        scanf(\"%d\",&a[i]);\n        inans[a[i]]=true;\n    }\n    topo();\n    for (int i=1;i<=n;i++) {\n        if (inans[tp[i]]) {//\u53ea\u6709\u9700\u8981\u6210\u4e3a\u76ee\u6807\u7684\u70b9\u624d\u9700\u8981\u904d\u5386\u3002 \n            dfs(tp[i],tp[i]);\n            ans[++Cnt]=tp[i];//\u8bb0\u5f55\u7b54\u6848\u65b9\u6848 \n        }\n    }\n    for (int i=1;i<=n;i++) {//\u5c06\u5b9e\u9645\u76ee\u6807\u4e0e\u9700\u6c42\u76ee\u6807\u5bf9\u6bd4 \n        if (fa[i]!=a[i]) {\n            cout<<-1;\n            return 0;\n        }\n    }\n    printf(\"%d\\n\",Cnt);\n    for (int i=1;i<=Cnt;i++) \n\t\tprintf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n",
        "postTime": 1597564595,
        "uid": 195229,
        "name": "water_tomato",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF681D \u3010Gifts by the List\u3011"
    },
    {
        "content": "\u6211\u611f\u89c9\u73b0\u6709\u7684\u90a3\u4e00\u7bc7\u9898\u89e3\u7684\u505a\u6cd5\u590d\u6742\u4e86\u3002\n\n\u9898\u610f:\n\n\u4e00\u4e2a\u5bb6\u65cf\u6709 $n$ \u4e2a\u4eba\uff0c $m$ \u79cd\u5173\u7cfb\uff0c\u6bcf\u4e00\u79cd\u5173\u7cfb\u8868\u793a $x$ \u662f $y$ \u7684\u7956\u5148\uff0c\u7956\u5148\u5177\u6709\u4f20\u9012\u6027\uff0c\u7136\u540e\u6709 $n$ \u4e2a\u6570\uff0c\u8868\u793a\u7b2c $i$ \u4e2a\u4eba\u60f3\u628a\u793c\u7269\u9001\u7ed9 $a[i]$ , \u4f60\u9700\u8981\u6784\u9020\u4e00\u5f20\u8868\u8fd9\u5f20\u8868\u4e0a\u7684\u4eba\u4ee3\u8868\u6536\u793c\u7269\u7684\u4eba\uff0c\u5e76\u4e14\u5176\u4ed6\u4eba\u9001\u793c\u7269\u662f\u6309\u8868\u4e0a\u7684\u987a\u5e8f\u627e\uff0c\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u7956\u5148\u5c31\u662f\u4ed6\u8981\u9001\u793c\u7684\u4eba\uff0c\u540c\u65f6\u9700\u8981\u6ee1\u8db3\u8fd9\u4e2a\u4eba\u662f\u4ed6\u60f3\u9001\u793c\u7684\u4eba\uff0c\u5982\u679c\u5b58\u5728\u8fd9\u5f20\u8868\u8f93\u51fa\u4eba\u6570\u53ca\u7f16\u53f7\uff0c\u5426\u5219\u8f93\u51fa $-1$ \uff08\u9898\u610f\u4e2d\u81ea\u5df1\u4e5f\u7b97\u662f\u81ea\u5df1\u7684\u4e00\u4e2a\u7956\u5148\uff09\u3002\n\n---\n\n\u9898\u89e3\uff1a\n\n\u7a0d\u5fae\u8bfb\u4e00\u8bfb\u9898\u76ee\uff0c\u53cd\u590d\u7406\u89e3\u4e00\u4e0b\u9898\u610f\uff0c\u5c31\u4f1a\u53d1\u73b0\u5176\u5b9e\u8fd9\u4e2a\u9898\u76ee\u8fd9\u4e48\u957f\u5176\u5b9e\u8bf4\u7684\u5c31\u662f\u4e00\u4ef6\u4e8b\u60c5\uff1a\n\n\u5bf9\u4e8e\u7532\u7684\u7956\u5148\u91cc\u548c\u7532\u4e0d\u662f\u540c\u4e00\u4e2a\u76ee\u6807\u7684\u4eba\u4e59\u5fc5\u6709\u7532\u7684\u76ee\u6807\u4e0d\u662f\u4e59\u7684\u7956\u5148\u3002\n\n\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff1a\n\n\u82e5\u7532\u7684\u76ee\u6807\u662f\u4e59\u7684\u7956\u5148\uff0c\u90a3\u4e48\u8981\u662f\u7532\u9001\u7ed9\u4ed6\u7684\u76ee\u6807\u793c\u7269\uff0c\u4e59\u4e5f\u5fc5\u987b\u9001\u7ed9\u8fd9\u4e2a\u4eba\u793c\u7269\u800c\u4e0d\u662f\u4ed6\u539f\u6765\u7684\u76ee\u6807\u3002\n\n\u5982\u4f55\u7528\u7a0b\u5e8f\u6765\u89e3\u51b3\u8fd9\u4e2a\u4e8b\u60c5\u3002\n\n\u5efa\u56fe\u65f6\u5148\u5c06\u6240\u6709\u7956\u5148\u5411\u4ed6\u513f\u5b50\u5efa\u91cc\u5355\u5411\u53d8\uff0c\u7136\u540e\u4ece\u96f6\u5165\u5ea6\u7684\u70b9\u5f00\u59cb\u904d\u5386\u3002\n\n\u4f7f\u5f97\u5bf9\u4e8e\u6240\u6709\u70b9\u90fd\u6709 \u4ed6\u7684\u76ee\u6807\u4e3a\u4ed6\u81ea\u5df1 \u6216 \u4ed6\u7684\u7236\u4eb2\u548c\u4ed6\u662f\u540c\u4e00\u4e2a\u76ee\u6807\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u4e2a\u5408\u7406\u7684\u65b9\u6848\u3002\n\n\u5230\u8fd9\u91cc\uff0c\u9898\u76ee\u5df2\u7ecf\u53ef\u4ee5\u89e3\u51b3\u4e86\uff0c\u4f46\u662f\u5176\u5b9e\u4e0a\u9762\u90a3\u4e2a\u6761\u4ef6\u6211\u8fd9\u91cc\u53ea\u8bc1\u660e\u4e86\u4ed6\u662f\u6709\u5408\u7406\u65b9\u6848\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u800c\u8fd9\u4e2a\u6761\u4ef6\u7684\u5145\u5206\u6027\u53ef\u4ee5\u7559\u7ed9\u8bfb\u8005\u81ea\u5df1\u601d\u8003\uff0c\u8fd9\u91cc\u4e0d\u591a\u8d58\u8ff0\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define For(pos) for(int k=First[pos];k;k=Next[k]) \ninline int R(){char c;int res,sign=1;while((c=getchar())>'9'||c<'0') if(c=='-') sign=-1;res=c-'0';while((c=getchar())>='0'&&c<='9') res=res*10+c-'0';return res*sign;}\nint n,m,First[Maxn],Next[Maxn*2],to[Maxn*2],cnt,ind[Maxn],aim[Maxn],ans[Maxn],top;\ninline void add(int z,int y){Next[++cnt]=First[z];First[z]=cnt;to[cnt]=y;++ind[y];}\nusing namespace std;\nconst int Maxn=1e5+5;\ninline void dfs(int pos,int father)\n{\n    For(pos) dfs(to[k],pos); \n    if(aim[pos]==pos) ans[++top]=pos;\n    else if(aim[pos]!=aim[father])//\u6211\u7236\u4eb2\u7684\u7956\u5148\u4e0d\u80fd\u6bd4\u6211\u7684\u7956\u5148\u8fd1 \n    {puts(\"-1\");exit(0);}\n}\nint main()\n{\n    n=R();m=R();int x,y;\n    for(int i=1;i<=m;i++)\n    {\n        x=R();y=R();\n        add(x,y);//\u7956\u5148\u5230\u81ea\u5df1 \n    }\n    for(int i=1;i<=n;i++) aim[i]=R();\n    for(int i=1;i<=n;i++) if(!ind[i]) dfs(i,0);\n    printf(\"%d\\n\",top);\n    for(int i=1;i<=top;i++) printf(\"%d\\n\",ans[i]);\n}\n\n\n```",
        "postTime": 1602585555,
        "uid": 288460,
        "name": "xzggzh1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF681D \u3010Gifts by the List\u3011"
    }
]