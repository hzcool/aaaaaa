[
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u95ee\u662f\u5426\u5b58\u5728**\u552f\u4e00**\u7684\u957f\u5ea6\u4e3a $n$ \u7684\u6392\u5217 $p$\uff0c\u6ee1\u8db3 $a_i \\le p_i \\le b_i \\; (1 \\le i \\le n)$\u3002\n\n**\u6570\u636e\u4fdd\u8bc1\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u7b26\u5408\u9898\u610f\u7684\u6392\u5217\u3002**\n\n\u5982\u679c\u552f\u4e00\uff0c\u8f93\u51fa\u8fd9\u4e2a\u6392\u5217\uff1b\u5426\u5219\u8f93\u51fa**\u4efb\u610f\u4e24\u79cd**\u4e0d\u540c\u7684\u6ee1\u8db3\u9898\u610f\u7684\u6392\u5217\u3002\n\n**\u6570\u636e\u8303\u56f4**\uff1a$1 \\le n \\le 2 \\times 10^5$\n\n## \u5206\u6790 + \u9898\u89e3\n\n\u9996\u5148\u8003\u8651\u5982\u4f55\u6c42\u51fa\u4e00\u4e2a\u53ef\u884c\u7684\u6392\u5217\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u53ef\u4ee5**\u8f6c\u5316\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u8d2a\u5fc3\u95ee\u9898**\u2014\u2014 \n\n$n$ \u4e2a\u70b9\u4e0e $n$ \u6761\u7ebf\u6bb5\u5339\u914d\uff0c\u4ece\u5de6\u5f80\u53f3\u7b2c $i$ \u4e2a\u70b9\u4e0e\u7b2c $j$ \u6761\u7ebf\u6bb5\u5339\u914d\u7684\u6761\u4ef6\u4e3a\u8fd9\u4e2a\u70b9\u4f4d\u4e8e\u8be5\u7ebf\u6bb5\u4e0a\uff08\u5373 $a_j \\le i \\le b_j$\uff09\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5**\u628a\u7ebf\u6bb5\u6309\u5de6\u7aef\u70b9\u6392\u5e8f**\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u679a\u4e3e $i$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $i$\uff0c\u5148\u5c06\u5de6\u7aef\u70b9\u4e3a $i$ \u7684\u7ebf\u6bb5\u4e22\u8fdb\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\u91cc\uff0c\u7136\u540e\u4ece\u4e2d**\u53d6\u51fa\u53f3\u7aef\u70b9\u6700\u5c0f\u7684\u7ebf\u6bb5**\uff0c\u4e0e $i$ \u53f7\u70b9\u5339\u914d\u5373\u53ef\u3002\n\n\u7531\u4e8e\u6211\u4eec\u5728\u8ba8\u8bba $i$ \u53f7\u70b9\u4e4b\u524d\uff0c\u6240\u6709\u5305\u542b $i$ \u53f7\u70b9\u4e14\u672a\u5339\u914d\u7684\u7ebf\u6bb5\u5747\u5728\u5806\u4e2d\uff0c\u56e0\u6b64\u6211\u4eec\u8d2a\u5fc3\u9009\u53d6\u5176\u4e2d\u53f3\u7aef\u70b9\u6700\u5c0f\u7684\u7b56\u7565\u662f\u6b63\u786e\u7684\u3002\n\n\uff08\u53f3\u7aef\u70b9\u8d8a\u9760\u53f3\uff0c\u8fd9\u6761\u7ebf\u6bb5\u5c31\u6709\u8d8a\u591a\u7684\u9009\u62e9\u7684\u673a\u4f1a\uff09\n\n\u90a3\u4e48\u5982\u4f55\u6c42\u51fa\u53e6\u5916\u4e00\u4e2a\u6ee1\u8db3\u9898\u610f\u7684\u6392\u5217\u5462\uff1f\uff08\u6216\u8005\u53d1\u73b0\u65e0\u89e3\uff09\n\n\n------------\n\n\n\u5f15\u7406\uff1a**\u82e5\u5b58\u5728\u53e6\u5916\u4e00\u4e2a\u6ee1\u8db3\u9898\u610f\u7684\u6392\u5217\uff0c\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u901a\u8fc7\u4ea4\u6362\u5df2\u77e5\u6392\u5217\u4e2d\u7684\u5176\u4e2d\u4e24\u4e2a\u6570\u6765\u8f6c\u5316\u6210\u5b83\u3002**\n\n\u8bc1\u660e\uff1a\n\n\u5728\u4e0a\u8ff0\u6761\u4ef6\u4e0b\uff0c\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6 $\\ge 2$ \u7684\u5faa\u73af\u3002\uff08\u8fd9\u662f\u4fee\u6539\u6392\u5217\u4ee5\u4fdd\u8bc1\u4ecd\u7136\u6ee1\u8db3\u9898\u610f\u7684\u5145\u8981\u6761\u4ef6\uff09\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u8bc1\u660e\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6 $=2$ \u7684\u5faa\u73af\u3002\n\n\u5047\u8bbe\u4e0d\u5b58\u5728\u957f\u5ea6 $=2$ \u7684\u5faa\u73af\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a**\u6700\u77ed\u7684**\u957f\u5ea6 $\\ge 3$ \u7684\u5faa\u73af\u3002\n\n\u8bbe $y$ \u4e3a\u8fd9\u4e2a\u5faa\u73af\u4e2d\u6700\u5de6\u8fb9\u7684\u4e00\u4e2a\u70b9\uff0c$x$ \u662f $y$ \u7684\u524d\u9a71\uff0c$z$ \u662f $y$ \u7684\u540e\u7ee7\uff08\u5373 $y$ \u53ef\u4ee5\u6539\u4e3a\u5339\u914d $x$ \u5f53\u524d\u5bf9\u5e94\u7684\u7ebf\u6bb5\uff0c$z$ \u53ef\u4ee5\u6539\u4e3a\u5339\u914d $y$ \u5f53\u524d\u5bf9\u5e94\u7684\u7ebf\u6bb5\uff09\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3teeb84e.png)\n\n\u8bf7\u6ce8\u610f $y$ \u5f53\u524d\u5bf9\u5e94\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u4e00\u5b9a\u5728 $x$ \u5de6\u4fa7\uff0c\u5426\u5219 $x$ \u548c $y$ \u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a $2$ \u7684\u5faa\u73af\u3002\n\n\u800c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6b64\u65f6\u79fb\u9664 $y$ \u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u56e0\u4e3a $z$ \u53ef\u4ee5\u6539\u4e3a\u5339\u914d $x$ \u5f53\u524d\u5bf9\u5e94\u7684\u7ebf\u6bb5\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u66f4\u5c0f\u7684\u73af\uff0c\u8fd9\u4e0e\u5047\u8bbe\u77db\u76fe\uff0c\u6545\u5f15\u7406\u6210\u7acb\u3002\n\n\n------------\n\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u9700\u8981\u4ea4\u6362\u7684 $p_i$ \u548c $p_j$\uff0c\u4ee5\u6ee1\u8db3 $a_i \\le p_j \\le b_i$\uff0c\u4e14 $a_j \\le p_i \\le b_j$\u3002\n\n\u4e0d\u59a8\u8bbe $p_i < p_j$\uff0c\u5219\u6761\u4ef6\u8f6c\u5316\u4e3a $a_j \\le p_i < p_j \\le b_i$\u3002\u679a\u4e3e $i$\uff0c\u53d1\u73b0\u53ea\u9700\u67e5\u8be2\u662f\u5426\u5b58\u5728 $j$ \u6ee1\u8db3 $a_j \\le p_i$\uff08$p_i$ \u4e3a\u5b9a\u503c\uff09\u4e14 $p_i < p_j \\le b_i$\uff08$p_i,b_i$ \u4e3a\u5b9a\u503c\uff09\u3002\n\n\u6211\u4eec\u8bbe $id$ \u4e3a $p$ \u7684\u9006\u6620\u5c04\uff0c\u5373 $id_{p_i}=i$\uff0c\u5c06 $i$ \u7684\u679a\u4e3e\u987a\u5e8f\u6539\u4e3a $id_1$\uff0c$id_2$\uff0c$\\cdots$\uff0c$id_n$\uff0c\u6bcf\u6b21\u5148\u628a $a_j=p_i$ \u7684 $j$ \u5bf9\u5e94\u7684 $p_j$ \u6254\u8fdb set\uff0c\u7136\u540e\u67e5\u8be2 set \u4e2d\u662f\u5426\u5b58\u5728\u503c $\\in (p_i,b_i]$\uff0c\u4e8c\u5206\u67e5\u627e\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n\u67e5\u8be2\u65b9\u6cd5\u89c1\u6ce8\u91ca\u3002\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int max_n=2e5+5;\nstruct node\n{\n\tint a,b,id;\n}c[max_n];\nvector<node> v[max_n];\ninline bool operator > (const node &x,const node &y)//\u91cd\u8f7d\u8fd0\u7b97\u7b26\u4ee5\u5728\u5c0f\u6839\u5806\u4e2d\u6bd4\u8f83 \n{\n\treturn x.b>y.b;\n}\npriority_queue<node,vector<node>,greater<node> > q;\nint p[max_n],id[max_n];\nset<int> s;\nset<int>::iterator it;\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%d%d\",&c[i].a,&c[i].b);\n\t\tc[i].id=i;\n\t\tv[c[i].a].push_back(c[i]);//\u628a c[i] \u4e22\u8fdb\u5de6\u7aef\u70b9\u7f16\u53f7\u5bf9\u5e94\u7684 vector \u4e2d \n\t}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tfor(int j=0;j<int(v[i].size());++j)\n\t\t\tq.push(v[i][j]);//\u5148\u52a0\u5165 \n\t\tid[i]=q.top().id;//\u518d\u53d6\u51fa \n\t\tp[id[i]]=i;\n\t\tq.pop();\n\t}\n\tfor(int x=1;x<=n;++x)\n\t{\n\t\tfor(int j=0;j<int(v[x].size());++j)\n\t\t\ts.insert(p[v[x][j].id]);//\u5148\u52a0\u5165 \n\t\tint i=id[x];//\u679a\u4e3e x \u83b7\u5f97\u5bf9\u5e94 i \n\t\tit=s.upper_bound(x);//\u518d\u67e5\u8be2\n\t\tif(it!=s.end()&&*it<=c[i].b)\n\t\t{\n\t\t\tint j=id[*it];\n\t\t\tputs(\"NO\");\n\t\t\tfor(int k=1;k<=n;++k)\n\t\t\t\tprintf(\"%d%c\",p[k],k<n?' ':'\\n');\n\t\t\tswap(p[i],p[j]);\n\t\t\tfor(int k=1;k<=n;++k)\n\t\t\t\tprintf(\"%d%c\",p[k],k<n?' ':'\\n');\n\t\t\treturn 0;\n\t\t}//\u67e5\u8be2\u65b9\u6cd5\uff1a\u4e8c\u5206\u627e\u5230\u5927\u4e8e p[i] \u7684\u7b2c\u4e00\u4e2a\u6570\uff0c\u5224\u65ad\u5176\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e b[i] \n\t}\n\tputs(\"YES\");\n\tfor(int k=1;k<=n;++k)\n\t\tprintf(\"%d%c\",p[k],k<n?' ':'\\n');\n\treturn 0;\n}\n```",
        "postTime": 1608037738,
        "uid": 145355,
        "name": "wsyhb",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF1348F Phoenix and Memory"
    },
    {
        "content": "\u9996\u5148\u8003\u8651\u5982\u4f55\u6784\u9020\u4e00\u7ec4\u53ef\u884c\u89e3\u3002\n\n\u8003\u8651 $i$ \u7684\u4f4d\u7f6e\uff0c\u8bbe\u4e3a $p$\uff0c\u90a3\u4e48\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u679a\u4e3e $i$\uff0c\u7136\u540e\u53ea\u8003\u8651\u6240\u6709 $l_p\\leq i$ \u4e14\u672a\u88ab\u5176\u4ed6\u503c\u5360\u7528\u7684\u4f4d\u7f6e $p$\uff0c\u4ece\u4e2d\u9009\u51fa\u53f3\u7aef\u70b9\u6700\u5c0f\u7684\u4e00\u4e2a $p$ \u4f5c\u4e3a $i$ \u7684\u4f4d\u7f6e\u5373\u53ef\uff08\u4e00\u5b9a\u6ee1\u8db3\u6761\u4ef6\uff0c\u5426\u5219\u5c31\u8bf4\u660e\u4e0d\u5b58\u5728\u5408\u6cd5\u6392\u5217\uff0c\u4e0e\u9898\u76ee\u77db\u76fe\uff09\u3002\n\n\u518d\u8003\u8651\u80fd\u5426\u6784\u9020\u51fa\u53e6\u4e00\u7ec4\u89e3\uff0c\u5bb9\u6613\u53d1\u73b0\u53ea\u9700\u8003\u8651\u5bf9\u6392\u5217\u8fdb\u884c\u4e00\u6b21\u5bf9\u6362\u540e\u5f97\u5230\u7684\u6392\u5217\u80fd\u5426\u6ee1\u8db3\u8981\u6c42\u5373\u53ef\u3002\n\n\u679a\u4e3e\u5bf9\u6362\u4e2d\u8f83\u5927\u7684\u6570 $j$\uff0c\u7528\u4e00\u4e2a set \u7ef4\u62a4\u6240\u6709\u6ee1\u8db3 $r_{pos_i}\\ge j$ \u7684 $i$\uff0c\u8003\u8651 set \u4e2d\u6240\u6709\u5143\u7d20\u7684\u6700\u5927\u503c $x$\uff0c\u5982\u679c $x\\ge l_j$\uff0c\u90a3\u4e48\u4ea4\u6362 $x,j$ \u540e\u5c31\u53ef\u4ee5\u6ee1\u8db3\u6761\u4ef6\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=200010;\nstruct P {\n\tint l,r,id;\n}p[MAXN];\nstruct cmp {\n\tbool operator () (P a,P b) {return a.r>b.r;}\n};\nint n,a[MAXN],b[MAXN],xl[MAXN],xr[MAXN],rev[MAXN];\nbool cmp1 (P a,P b) {return a.l<b.l;}\nbool cmp2 (P a,P b) {return a.r>b.r;}\npriority_queue <P,vector<P>,cmp> q,q2;\nmultiset <int> ms;\nint main () {\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++) {\n\t\tscanf(\"%d%d\",&p[i].l,&p[i].r);\n\t\tp[i].id=i;\n\t}\n\tmultiset<int>::iterator it;\n\tsort(p+1,p+n+1,cmp1);\n\tint cur=1,flg=0;\n\tfor (int i=1;i<=n;i++) {\n\t\twhile (cur<=n&&p[cur].l<=i) {\n\t\t\tq.push(p[cur]);\n\t\t\tcur++;\n\t\t}\n\t\tP tmp=q.top();\n\t\tq.pop();\n\t\ta[tmp.id]=b[tmp.id]=i,xl[tmp.id]=tmp.l,xr[tmp.id]=tmp.r,rev[i]=tmp.id;\n\t\tq2.push(tmp);\n\t\twhile (!q2.empty()&&q2.top().r<i) {\n\t\t\tP tmp2=q2.top();\n\t\t\tq2.pop();\n\t\t\tit=ms.find(a[tmp2.id]);\n\t\t\tms.erase(it);\n\t\t}\n\t\tif (!ms.empty()&&!flg) {\n\t\t\tit=ms.end();\n\t\t\tit--;\n\t\t\tif (*it>=tmp.l) {\n\t\t\t\tflg=1;\n\t\t\t\tswap(b[tmp.id],b[rev[*it]]);\n\t\t\t}\n\t\t}\n\t\tms.insert(i);\n\t}\n\tif (flg) {\n\t\tprintf(\"NO\\n\");\n\t\tfor (int i=1;i<=n;i++) {printf(\"%d \",a[i]);}\n\t\tprintf(\"\\n\");\n\t\tfor (int i=1;i<=n;i++) {printf(\"%d \",b[i]);}\n\t\tprintf(\"\\n\");\n\t} else {\n\t\tprintf(\"YES\\n\");\n\t\tfor (int i=1;i<=n;i++) {printf(\"%d \",a[i]);}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1588856937,
        "uid": 113546,
        "name": "ix35",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1348F \u3010Phoenix and Memory\u3011"
    },
    {
        "content": "\u518d\u591a $10$ \u5206\u949f\u5c31 ak \u4e86 QAQ\n\n\u9996\u5148\u6211\u4eec\u6765\u8003\u8651\u5982\u4f55\u6784\u9020\u4e00\u7ec4\u53ef\u884c\u89e3\u3002\n\n\u5bf9\u6bcf\u4e00\u4e2a $r$\uff0c\u5f00\u4e00\u4e2a ``` set<pair<int,int> > pos[r] ``` \u6765\u5b58\u50a8\u6240\u6709\u53f3\u7aef\u70b9\u4e3a $r$ \u7684\u533a\u95f4\uff0c\u5176\u4e2d\u7b2c\u4e00\u5173\u952e\u5b57\u4e3a\u5de6\u7aef\u70b9\u7684\u503c\u3002\u4ece\u5927\u5230\u5c0f\u679a\u4e3e $r$ \u7684\u503c\uff0c\u6bcf\u6b21\u4ece ``` pos[r] ``` \u4e2d\u53d6\u51fa\u5de6\u7aef\u70b9\u6700\u5927\u7684\u533a\u95f4\uff0c\u5c06\u5176\u5bf9\u5e94\u4f4d\u7f6e\u7684\u7b54\u6848\u8bbe\u4e3a $r$ \u3002\u5bf9\u4e8e ``` pos[r] ``` \u4e2d\u7684\u5176\u4ed6\u533a\u95f4\uff0c\u7531\u4e8e $r$ \u5df2\u7ecf\u88ab\u5360\u7528\uff0c\u6240\u4ee5\u5b83\u4eec\u7b49\u4ef7\u4e8e\u4e00\u7cfb\u5217\u53f3\u7aef\u70b9\u4e3a $r-1$ \u7684\u533a\u95f4\uff0c\u4e8e\u662f\u53ea\u8981\u548c ``` pos[r-1] ``` \u505a\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u4e00\u5b9a\u80fd\u6784\u9020\u51fa\u4e00\u7ec4\u89e3\uff08\u611f\u6027\u7406\u89e3\u5c31\u662f\uff0c\u56e0\u4e3a\u6bcf\u6b21\u90fd\u9009\u6700\u5927\u7684\u5de6\u7aef\u70b9\uff0c\u6240\u4ee5\u5269\u4e0b\u7684\u533a\u95f4\u90fd\u662f\u5c3d\u91cf\u201c\u5bbd\u677e\u7684\u201d\uff0c\u5c31\u53ef\u4ee5\u5c3d\u91cf\u6784\u9020\u51fa\u89e3\uff09\u3002\u6211\u4eec\u79f0\u8fd9\u4e00\u7ec4\u89e3\u4e3a\u7279\u89e3\u3002\n\n\u7136\u540e\u8003\u8651\u5982\u4f55\u5224\u65ad\u89e3\u7684\u552f\u4e00\u6027\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u89e3\u4e0d\u552f\u4e00\uff0c\u5219\u4e00\u5b9a\u6709\u4e00\u7ec4\u5176\u4ed6\u7684\u89e3\u53ef\u4ee5\u7531\u4ea4\u6362\u7279\u89e3\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u5f97\u5230\u3002\n\n\u5728\u6784\u9020\u7279\u89e3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5047\u8bbe\u5f53\u524d $r$ \u88ab\u5206\u914d\u7ed9\u4e86 $i$ \u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u8003\u5bdf\u6240\u6709 $[i+1,b_i]$ \u4e0a\u7684 $r'$ \u6240\u5bf9\u5e94\u7684\u4f4d\u7f6e $i'$\uff0c\u53ea\u8981\u8fd9\u4e9b $i'$ \u4e2d\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u6ee1\u8db3 $a_{i'}<r$ \uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u4ea4\u6362\u7279\u89e3\u4e2d $i,i'$ \u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4\u65b0\u89e3\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u53ea\u8981\u6c42\u4f7f\u5f97 $r'$ \u6700\u5c0f\u7684 $i'$ \u5373\u53ef\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(n\\log^2 n)$\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4efd\u4ee3\u7801\u4ec5\u6709\u5728 ``` -std=c++11 ``` \u6216\u66f4\u9ad8\u65f6\u590d\u6742\u5ea6\u6b63\u786e\uff0c\u56e0\u4e3a\u5b83\u6d89\u53ca\u5230 ``` swap ``` \u4e24\u4e2a ``` set ```\uff0c\u800c\u5728\u65e9\u4e8e C++11 \u7684\u6807\u51c6\u4e2d\u8fd9\u5c06\u82b1\u8d39 $O(size)$ \u7684\u65f6\u95f4\u3002\n\n\u4ee3\u7801:\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <algorithm>\n#include <set> \n#define pii pair<int,int>\n#define mp make_pair\n#define fi first\n#define se second\n\nusing namespace std;\ntypedef long long ll;\nconst int MAXN = 200005;\ninline int readint()\n{\n\tint res = 0, f = 1;\n\tchar c = 0;\n\twhile(!isdigit(c))\n\t{\n\t\tc = getchar();\n\t\tif(c=='-')\n\t\t\tf = -1;\n\t}\n\twhile(isdigit(c))\n\t\tres = res*10+c-'0', c = getchar();\n\treturn res*f;\n}\nint n,a[MAXN],b[MAXN],ans[MAXN];\nset<pii> pos[MAXN];\nset<pii>::iterator it,it1;\nint x,y;\nstruct Node\n{\n\tint minn;\n}t[MAXN<<2];\ninline void buildTree(int id, int l, int r)\n{\n\tt[id].minn = 0;\n\tif(l==r)\n\t\treturn;\n\tint mid = (l+r)>>1;\n\tbuildTree(id<<1,l,mid);\n\tbuildTree(id<<1|1,mid+1,r);\n}\ninline void modify(int id, int ql, int qr, int pos, int d)\n{\n\tif(ql==pos&&qr==pos)\n\t{\n\t\tt[id].minn = d;\n\t\treturn;\n\t}\n\tint mid = (ql+qr)>>1;\n\tif(pos<=mid)\n\t\tmodify(id<<1,ql,mid,pos,d);\n\telse\n\t \tmodify(id<<1|1,mid+1,qr,pos,d);\n\tt[id].minn = a[t[id<<1].minn]<a[t[id<<1|1].minn]?t[id<<1].minn:t[id<<1|1].minn;\n}\ninline int query(int id, int ql, int qr, int l, int r)\n{\n\tif(ql==l&&qr==r)\n\t\treturn t[id].minn;\n\tint mid = (ql+qr)>>1;\n\tif(r<=mid)\n\t\treturn query(id<<1,ql,mid,l,r);\n\telse if(l>mid)\n\t\treturn query(id<<1|1,mid+1,qr,l,r);\n\telse\n\t{\n\t\tint x = query(id<<1,ql,mid,l,mid), y = query(id<<1|1,mid+1,qr,mid+1,r);\n\t\treturn a[x]<a[y]?x:y; \n\t}\n}\n\nint main()\n{\n\tn = readint();\n\ta[0] = 1<<30;\n\tbool flag = true;\n\tfor(int i = 1; i<=n; i++)\n\t\ta[i] = readint(), b[i] = readint();\n\tfor(int i = n; i>=1; i--)\n\t{\n\t\tpii now = mp(a[i],i);\n\t\tpos[b[i]].insert(now);\n\t}\n\tbuildTree(1,1,n);\n\tfor(int i = n; i>=1; i--)\n\t{\n\t\tit = pos[i].end();\n\t\tit--;\n\t\tans[it->se] = i;\n\t\tif(i+1<=b[it->se])\n\t\t{\n\t\t\tint t = query(1,1,n,i+1,b[it->se]);\n\t\t\tif(t&&a[t]<=i)\n\t\t\t\tflag = false, x = it->se, y = t;\n\t\t}\n\t\tmodify(1,1,n,i,it->se);\n\t\tpos[i].erase(it);\n\t\tif(i>1)\n\t\t{\n\t\t\tif(pos[i].size()>pos[i-1].size())\n\t\t\t\tswap(pos[i],pos[i-1]);\n\t\t\tfor(it = pos[i].begin(); it!=pos[i].end(); it++)\n\t\t\t\tpos[i-1].insert(*it);\n\t\t}\n\t\tpos[i].clear();\n\t}\n\tif(flag)\n\t{\n\t\tcout << \"YES\" << endl;\n\t\tfor(int i = 1; i<=n; i++)\n\t\t\tcout << ans[i] << \" \";\n\t\tcout << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"NO\" << endl;\n\t\tfor(int i = 1; i<=n; i++)\n\t\t\tcout << ans[i] << \" \";\n\t\tcout << endl;\n\t\tswap(ans[x],ans[y]);\n\t\tfor(int i = 1; i<=n; i++)\n\t\t\tcout << ans[i] << \" \";\n\t\tcout << endl;\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1590401612,
        "uid": 31098,
        "name": "Caro23333",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1348F \u3010Phoenix and Memory\u3011"
    },
    {
        "content": "\u53d1\u4e2a\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u7684\u9898\u89e3\u3002    \n\u9996\u5148\u7ed9\u51fa\u4e00\u7ec4\u7b54\u6848\u662f\u4e2a common problem, \u96be\u7684\u662f\u5224\u65ad\u552f\u4e00\u6027\u3002    \n\u6211\u4eec\u5bf9\u6240\u6709\u533a\u95f4\u6309\u7167\u53f3\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u586b\u6bcf\u4e2a\u533a\u95f4\u672a\u88ab\u9009\u8fc7\u7684\u6700\u5c0f\u6570\u5373\u53ef\u6784\u9020\u4e00\u7ec4\u7b54\u6848\u3002   \n\u6613\u8bc1\u6b63\u786e\u3002   \n\u5bf9\u4e0e\u552f\u4e00\u6027\uff0c\u6211\u4eec\u601d\u7d22\u4e00\u4e0b\u5b83\u7684\u6761\u4ef6\u3002    \n\u5f53 $l_j \\leq p(i) < p(j) \\leq r_i$ \u65f6\uff0c$i$ \u548c $j$ \u662f\u53ef\u4ee5\u4e92\u76f8\u4ea4\u6362\u7684\u3002   \n\u4e5f\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a![](https://cdn.luogu.com.cn/upload/image_hosting/khfbtlbk.png)      \n\u663e\u7136\u4ea4\u6362\u5b8c\u4e4b\u540e $j$ \u6ee1\u8db3\u6761\u4ef6\uff0c$i$ \u6362\u5b8c\u4e4b\u540e\u5927\u4e8e\u5f53\u524d\u7684\u5750\u6807\uff0c\u800c\u56e0\u4e3a\u4fdd\u8bc1\u4e86 $p(j) \\leq r_i$ \u6240\u4ee5\u4e5f\u662f\u7b26\u5408\u6761\u4ef6\u7684\u3002   \n\u4e8e\u662f\u53ef\u4ee5\u8f6c\u5316\u4e00\u4e0b\u95ee\u9898\uff1a    \n\u5bf9\u4e0e\u4e00\u4e2a $i$ \u5bfb\u627e\u4e00\u4e2a\u53ef\u80fd\u53ef\u4ee5\u4ea4\u6362\u7684 $j$\uff0c\u4e5f\u5c31\u662f\u627e\u5230$[i+1,r_{p_i}]$ \u4e2d $l$ \u6700\u5c0f\u7684\u503c\uff0c\u5e76\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u4ea4\u6362\u5373\u53ef\u3002    \n\u663e\u7136\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002  \n\u590d\u6742\u5ea6 $\\mathcal{O}(n \\log n)$     \n```cpp\n#include <bits/stdc++.h>\n\nconst int N = 2e5 + 10;\nconst int inf = 0x3f3f3f3f;  \n\nint n, m, i, j, k;\nint l[N], r[N];\nint a[N], rev[N], pos[N], senq[N];  \n\nstruct Segment_Tree1 {\n  int mn[N << 2]; \n  inline void push_up(int u) {\n    mn[u] = std::min(mn[u << 1], mn[u << 1 | 1]);\n  }\n  void build(int l, int r, int u) {\n    if (l == r) {\n      mn[u] = l;\n      return;\n    }\n    int mid = (l + r) >> 1;\n    build(l, mid, u << 1);\n    build(mid + 1, r, u << 1 | 1);\n    push_up(u);\n  }\n  int range_min(int ql, int qr, int l, int r, int u) {\n    //printf(\"%d %d %d %d %d\\n\", ql, qr, l, r, u);   \n    if (ql <= l && r <= qr) {\n      return mn[u];\n    }\n    int mid = (l + r) >> 1, res = inf;\n    if (ql <= mid) {\n      res = std::min(res, range_min(ql, qr, l, mid, u << 1));\n    }\n    if (mid < qr) {\n      res = std::min(res, range_min(ql, qr, mid + 1, r, u << 1 | 1));\n    }\n    return res;\n  }   \n  void modify(int pos, int l, int r, int u, int val) {\n    if (l == r) {\n      mn[u] = val;  \n      return;\n    }\n    int mid = (l + r) >> 1;\n    if (pos <= mid) {\n      modify(pos, l, mid, u << 1, val);\n    } else {\n      modify(pos, mid + 1, r, u << 1 | 1, val);   \n    }\n    push_up(u);  \n  }\n} st1;\n\nstruct Segment_Tree2 {\n  int mn[N << 2];  \n  inline int cmpl(int a, int b) {\n    return l[rev[a]] < l[rev[b]] ? a : b;\n  }\n  inline void push_up(int u) {\n    mn[u] = cmpl(mn[u << 1], mn[u << 1 | 1]);\n  }\n  void build(int l, int r, int u) {\n    if (l == r) {\n      mn[u] = l;\n      return;\n    }\n    int mid = (l + r) >> 1;\n    build(l, mid, u << 1);\n    build(mid + 1, r, u << 1 | 1);\n    push_up(u);\n  }\n  int range_min(int ql, int qr, int l, int r, int u) {\n    if (ql <= l && r <= qr) {\n      return mn[u];\n    }\n    int mid = (l + r) >> 1, res = 0;  \n    if (ql <= mid) {\n      res = cmpl(res, range_min(ql, qr, l, mid, u << 1));  \n    }\n    if (mid < qr) {\n      res = cmpl(res, range_min(ql, qr, mid + 1, r, u << 1 | 1));\n    }\n    return res;  \n  }\n} st2;\n\nint main() {\n  scanf(\"%d\", &n);\n  for (int i = 1; i <= n; i++) {\n    scanf(\"%d %d\", l + i, r + i);\n    senq[i] = i;\n  }\n  std::sort(senq + 1, senq + n + 1, [](int a, int b) {\n    return r[a] < r[b];\n  });\n  l[0] = inf;   \n  st1.build(1, n, 1);\n  for (int i = 1; i <= n; i++) {\n    pos[senq[i]] = st1.range_min(l[senq[i]], r[senq[i]], 1, n, 1);  \n    //printf(\"___%d %d %d %d\\n\", senq[i], l[senq[i]], r[senq[i]], pos[senq[i]]);  \n    rev[pos[senq[i]]] = senq[i];\n    st1.modify(pos[senq[i]], 1, n, 1, n);\n  } \n  st2.build(1, n, 1);    \n  int x = -1, y = -1;\n  bool flag = 0;\n  for (int i = 1, cur; i <= n; i++) {\n    //printf(\"__%d %d %d\\n\", i + 1, r[rev[i]], rev[st2.range_min(i + 1, r[rev[i]], 1, n, 1)]);    \n    if (l[cur = rev[st2.range_min(i + 1, r[rev[i]], 1, n, 1)]] <= i) {\n      x = rev[i];\n      y = cur;\n      flag = 1;\n      break;  \n    }\n  }\n  if (!flag) {\n    puts(\"YES\");\n    for (int i = 1; i <= n; i++) {\n      printf(\"%d%c\", pos[i], \" \\n\"[i == n]);\n    }\n  } else {\n    puts(\"NO\");\n    for (int i = 1; i <= n; i++) {\n      printf(\"%d%c\", pos[i], \" \\n\"[i == n]);\n    }\n    std::swap(pos[x], pos[y]);\n    for (int i = 1; i <= n; i++) {\n      printf(\"%d%c\", pos[i], \" \\n\"[i == n]);\n    }\n  }\n  return 0; \n}\n```\n\n",
        "postTime": 1590078921,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1348F \u3010Phoenix and Memory\u3011"
    }
]