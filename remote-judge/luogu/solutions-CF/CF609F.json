[
    {
        "content": "[$$\\huge\\texttt{\u5728\u672c\u4ebablog\u98df\u7528\u66f4\u4f73}$$](https://dilute.xyz/2019/04/22/Solutions/Solution-CF609F/)\n\n## set\u200b\u778e\u641e\n\n#### \u9884\u5904\u7406\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e0b\uff0c\u4e00\u53ea\u9752\u86d9\u80fd\u591f\u5f71\u54cd\u7684\u533a\u95f4\u662f\u4ec0\u4e48\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5c06\u6bcf\u53ea\u9752\u86d9\u80fd\u591f\u5403\u5230\u7684\u6587\u5b57\u533a\u95f4$[l, r]$\u6309\u7167\u5de6\u7aef\u70b9$l$\u6392\u5e8f\uff0c\u7136\u540e\u628a\u540e\u9762\u7684\u533a\u95f4\u548c\u524d\u9762\u7684\u533a\u95f4\u7684\u91cd\u590d\u90e8\u5206\u53bb\u6389\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u9752\u86d9\u771f\u6b63\u53ef\u4ee5\u5403\u5230\u7684\u868a\u5b50\u7684\u8303\u56f4\u533a\u95f4\n\n\u6211\u89c9\u5f97\u4e0b\u9762\u8fd9\u5f20\u56fe\u8bb2\u7684\u5f88\u6e05\u695aw\n\n![](http://dilute.xyz/images/2.png)\n\n\u597d\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u9884\u5904\u7406\u5c31\u8fd9\u4e48\u5b8c\u4e86\u3002\n\n#### \u52a0\u5165\u868a\u5b50\n\n\u6211\u4eec\u91c7\u7528$set$\u7ef4\u62a4\u6240\u6709\u9752\u86d9\u80fd\u591f\u771f\u6b63\u5403\u5230\u7684\u868a\u5b50\u7684\u8303\u56f4\u533a\u95f4\uff0c\u90a3\u4e48\u5728\u52a0\u5165\u4e00\u53ea\u868a\u5b50\u7684\u65f6\u5019\uff0c\u53ef\u4ee5lower\\_bound\u5feb\u901f\u6c42\u51fa\u8fd9\u53ea\u868a\u5b50\u4f1a\u4e0d\u4f1a\u88ab\u5403\u6389\uff0c\u5982\u679c\u5b83\u88ab\u5403\u6389\u4e86\uff0c\u662f\u88ab\u54ea\u53ea\u9752\u86d9\u5403\u6389\u4e86\u3002\n\n\u663e\u7136\uff0c\u5982\u679c\u4e00\u53ea\u868a\u5b50\u88ab\u5403\u6389\u4e86\uff0c\u90a3\u4e48\u5403\u6389\u5b83\u7684\u54ea\u53ea\u9752\u86d9\u548c\u5176\u4ed6\u9752\u86d9\u53ef\u4ee5\u5403\u5230\u7684\u868a\u5b50\u7684\u8303\u56f4\u533a\u95f4\u90fd\u4f1a\u53d8\u5316\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u4ece\u5f53\u524d\u66f4\u65b0\u8fc7\u7684\u54ea\u53ea\u9752\u86d9\u7684\u8303\u56f4\u5411\u540e\u627e\uff0c\u628a\u6240\u6709\u88ab\u5f53\u524d\u533a\u95f4\u6240\u5305\u542b\u7684\u533a\u95f4\u5168\u90fd\u5220\u9664\uff0c\u6700\u540e\u518d\u8c03\u6574\u4e00\u4e0b\u6ca1\u6709\u88ab\u5b8c\u5168\u8986\u76d6\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u3002\n\n#### \u8fd8\u6709\u4e00\u70b9\n\n\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u975e\u5e38\u6076\u5fc3\u7684\u8bbe\u5b9a\uff1a\u868a\u5b50\u5982\u679c\u6ca1\u6709\u88ab\u5403\u6389\uff0c\u5b83\u4f1a\u5f85\u5728\u539f\u5730\uff0c\u76f4\u5230\u88ab\u67d0\u53ea\u9752\u86d9\u5403\u6389\u4e3a\u6b62\u3002\n\n\u8fd9\u8ba9\u6211\u4eec\u518d\u7528\u4e00\u4e2a$set$\u7ef4\u62a4\u5f53\u524d\u6ca1\u6709\u88ab\u5403\u6389\u7684\u868a\u5b50\uff0c\u7136\u540e\u5728\u524d\u9762\u5403\u6389\u4e00\u53ea\u868a\u5b50\uff0c\u533a\u95f4\u53d8\u957f\u7684\u65f6\u5019\uff0c\u5728\u50a8\u5b58\u868a\u5b50\u7684\u90a3\u4e2a$set$\u91cc\u9762lower_bound\u4e00\u4e0b\u5224\u65ad\u662f\u5426\u80fd\u591f\u518d\u5403\u6389\u5176\u4ed6\u7684\u868a\u5b50\uff0c\u7b49\u786e\u5b9a\u6ca1\u6709\u868a\u5b50\u53ef\u5403\u7684\u65f6\u5019\u518d\u53bb\u5224\u65ad\u540e\u9762\u7684\u533a\u95f4\u662f\u5426\u88ab\u66f4\u65b0\u3002\n\n#### \u4ee3\u7801\n\n\u6211\u5b9e\u73b0\u7684\u4e11\u7684\u8981\u547d\uff0c\u53cd\u6b63\u8dd1\u5f97\u8fc7\u53bb\u5c31\u884c\uff0c\u8f7b\u55b7...\n\n```cpp\n#include<bits/stdc++.h>\n\n#define ll long long\n#define INF 2147483647\n\nint inp(){\n    char c = getchar();\n    while(c < '0' || c > '9')\n        c = getchar();\n    int sum = 0;\n    while(c >= '0' && c <= '9'){\n        sum = sum * 10 + c - '0';\n        c = getchar();\n    }\n    return sum;\n}\n\nstruct Node{\n    int l;\n    int r;\n    int id;\n    bool operator < (const Node &b) const {\n        if(l == b.l)\n            return r > b.r;\n        return l < b.l;\n    }\n};\nstd::set<Node> s;\nstd::multiset<std::pair<int, int> > s2;\nint ans[200010], x[200010], t[200010], p[200010], b[200010];\n\nstd::set<Node>::iterator operator + (std::set<Node>::iterator it, const int &b){\n    it++;\n    return it;\n}\n\nstd::set<Node>::iterator operator - (std::set<Node>::iterator it, const int &b){\n    it--;\n    return it;\n}\nint id[200010];\n\nbool cmp(int a, int b){\n    return x[a] < x[b];\n}\n\nint main(){\n    int n = inp();\n    int m = inp();\n    for(int i = 1; i <= n; i++){\n        x[i] = inp();\n        t[i] = inp();\n        id[i] = i;\n    }\n    std::sort(id + 1, id + n + 1, cmp);\n    s.insert((Node){x[id[1]], x[id[1]] + t[id[1]], id[1]});\n    for(int i = 2; i <= n; i++)\n        if(std::max(s.rbegin()->r + 1, x[id[i]]) <= x[id[i]] + t[id[i]])\n            s.insert((Node){std::max(s.rbegin()->r + 1, x[id[i]]), x[id[i]] + t[id[i]], id[i]});\n    for(int i = 1; i <= m; i++){\n        p[i] = inp();\n        b[i] = inp();\n        std::set<Node>::iterator it = s.upper_bound((Node){p[i], p[i]});\n        it--;\n        if(it->r >= p[i] && it->l <= p[i]){\n            t[it->id] += b[i];\n            ans[it->id]++;\n            Node nxt = *it;\n            s.erase(it);\n            s.insert((Node){nxt.l, nxt.r + b[i], nxt.id});\n            it = s.find((Node){nxt.l, nxt.r + b[i], nxt.id});\n            std::multiset<std::pair<int, int> >::iterator it2 = s2.lower_bound(std::make_pair(it->l, 1));\n            while(it2 != s2.end() && it2->first <= it->r){\n                t[it->id] += it2->second;\n                ans[it->id]++;\n                Node nxt = *it;\n                s.erase(it);\n                s.insert((Node){nxt.l, nxt.r + it2->second, nxt.id});\n                it = s.find((Node){nxt.l, nxt.r + it2->second, nxt.id});\n                s2.erase(it2);\n                it2 = s2.lower_bound(std::make_pair(it->l, 1));\n            }\n            while((it + 1) != s.end() && it->r >= (it + 1)->r)\n                s.erase(it + 1);\n            if((it + 1) != s.end()){\n                Node nxt = *(it + 1);\n                s.erase(it + 1);\n                s.insert((Node){std::max(nxt.l, it->r + 1), nxt.r, nxt.id});\n            }\n        } else\n            s2.insert(std::make_pair(p[i], b[i]));\n    }\n    for(int i = 1; i <= n; i++)\n        printf(\"%d %d\\n\", ans[i], t[i]);\n}\n```\n\n",
        "postTime": 1555944901,
        "uid": 36362,
        "name": "Dilute",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF609F \u3010Frogs and mosquitoes\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u9053\u4e00\u904d\u8fc7\u7684\u7d2b\u9898\uff0c\u5199\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\u3002\n\n### \u9898\u610f\n\n\u6709 $n$ \u53ea\u9752\u86d9\uff0c\u7b2c $i$ \u53ea\u9752\u86d9\u53ef\u4ee5\u5403\u5230 $[x_i, x_i + l_i]$ \u533a\u95f4\u5185\u7684\u6240\u6709\u868a\u5b50\u3002\u6bcf\u4e2a\u868a\u5b50\u4f1a\u88ab\u6240\u6709\u80fd\u5403\u6389\u5b83\u7684\u9752\u86d9\u4e2d $x_i$ \u6700\u5c0f\u7684\u90a3\u53ea\u9752\u86d9\u5403\u6389\u3002\u6bcf\u4e2a\u868a\u5b50\u8fd8\u5e26\u6709\u4e00\u4e2a\u5c5e\u6027 $t_i$\uff0c\u8868\u793a\u5982\u679c\u8fd9\u53ea\u868a\u5b50\u88ab\u5403\u6389\uff0c\u5403\u6389\u5b83\u7684\u9752\u86d9\u7684 $l_i$ \u4f1a\u52a0\u4e0a $t_i$\u3002\u6bcf\u4e00\u65f6\u523b\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ca1\u6709\u868a\u5b50\u80fd\u88ab\u5403\u6389\u6216\u6240\u6709\u868a\u5b50\u90fd\u88ab\u5403\u6389\u65f6\uff0c\u4e0b\u4e00\u53ea\u868a\u5b50\u624d\u4f1a\u51fa\u73b0\u3002\u95ee\u6bcf\u4e00\u53ea\u9752\u86d9\u5403\u4e86\u51e0\u53ea\u868a\u5b50\uff0c\u6700\u540e\u7684 $l_i$ \u4e3a\u591a\u5c11\u3002  \n\n$x_i$ \u4e92\u4e0d\u76f8\u540c\u3002\n\n### \u601d\u8def  \n\n\u9996\u5148\u79bb\u6563\u5316 $x_i$\uff0c\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u79bb\u6563\u5316\u540e\u7684 $\\max\\limits_{i = l}^{r}\\{x_i + l_i\\}$\u3002\u67e5\u627e $p$ \u80fd\u88ab\u54ea\u53ea\u9752\u86d9\u5403\u6389\u65f6\uff0c\u4f7f\u7528\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u4e8c\u5206\u7684\u505a\u6cd5\uff1a\n\n- \u82e5\u5de6\u8fb9\u7ef4\u62a4\u7684\u503c\u5927\u4e8e\u7b49\u4e8e $p$\uff0c\u5f80\u5de6\u8d70\n- \u53cd\u4e4b\uff0c\u5f80\u53f3\u8d70\u3002  \n\n\u5176\u5b9e\u8fd9\u91cc\u4e5f\u662f\u4e00\u4e2a\u8d2a\u5fc3\uff1a\u5982\u679c\u5f80\u5de6\u8fb9\u8d70\u53ea\u80fd\u8d70\u5230\u4e00\u4e2a $x_i > p$ \u7684\u70b9\uff0c\u8868\u793a\u5f80\u53f3\u8fb9\u8d70\u4e00\u5b9a\u4e0d\u4f1a\u51fa\u73b0 $x_i \\leqslant p$ \u7684\u60c5\u51b5\u3002\u5982\u679c\u8d70\u5230\u4e86\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u4f46\u662f\u4e0d\u548c\u6761\u4ef6\uff0c\u8bf4\u660e\u8fd9\u53ea\u868a\u5b50\u6682\u65f6\u4e0d\u80fd\u88ab\u5403\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5904\u7406\u6682\u65f6\u4e0d\u80fd\u88ab\u5403\u7684\u868a\u5b50\u3002\u628a\u5b83\u4eec\u653e\u5728\u4e00\u4e2a\u53ef\u91cd\u96c6\u5185\uff0c\u6bcf\u4e00\u6b21\u5982\u679c\u6709\u9752\u86d9\u5403\u4e86\u868a\u5b50\uff0c\u5c31\u53bb\u770b\u770b\u5b83\u80fd\u4e0d\u80fd\u5403\u6389\u67d0\u4e9b\u96c6\u5408\u91cc\u7684\u65e7\u868a\u5b50\u3002\u76f4\u63a5 while \u5faa\u73af lower_bound \u67e5\u627e\uff0c\u80fd\u5403\u5c31\u5403\u5373\u53ef\u3002  \n\n\u6392\u5e8f\u6709\u4e00\u6b21\uff0c\u6bcf\u53ea\u868a\u5b50\u53ea\u4f1a\u8fdb\u5165\u96c6\u5408\u4e00\u6b21\uff0c\u6240\u6709\u9752\u86d9\u6700\u591a\u4e00\u5171\u66f4\u6539 $m$ \u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n + m\\log m + m\\log n)$\u3002$n, m$ \u662f\u540c\u4e00\u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u8fd1\u4f3c\u770b\u6210 $O(n\\log n)$\u3002  \n\n[AC code \u8bb0\u5f55](https://www.luogu.com.cn/record/70050929)\n```cpp\n#include <bits/stdc++.h>\n#define rep1(i, l, r) for (int i = l; i <= int(r); ++i)\n#define rep2(i, l, r) for (int i = l; i >= int(r); --i)\n#define ......\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\nconst int MAXN = 2e5 + 10, inf = ~0U >> 2, INF = ~0U >> 1;\nconst int dx[] = {0, 0, 1, -1}, dy[] = {1, -1, 0, 0};\nnamespace stupid_lrc\n{\n\ttemplate <typename T>\n\til void read(T &x)\n\n    il int read()\n    \n\ttemplate <typename T, typename ...L>\n\til void read(T &x, L &...y)\n\n\ttemplate <typename T>\n\til void write(T x)\n\n\n\ttemplate <typename T>\n\til T my_max(const T &x, const T &y)\n}\nusing namespace stupid_lrc;\n// \u5947\u5999\u7f3a\u7701\u6e90\nint n, m, pre[MAXN], x[MAXN], p[MAXN], b[MAXN], ate[MAXN], uni[MAXN];\nll len[MAXN]; pii nuf[MAXN];\nmultiset <pii> mt;\n\nstruct setr\n{\n\tll mx;\n} t[MAXN << 2];\n\nil void pushup(int x)\n{\n\tt[x].mx = my_max(t[ls(x)].mx, t[rs(x)].mx);\n}\n\nil void build(int rt, int l, int r)\n{\n\tif (l == r) return t[rt].mx = x[pre[l]] + len[pre[l]], void();\n\tint mid = l + r >> 1;\n\tbuild(ls(rt), l, mid); build(rs(rt), mid + 1, r);\n\tpushup(rt);\n}\n\nil void upd(int rt, int l, int r, int k, int del) // \u7b2c k \u53ea\u9752\u86d9\u7684 t \u589e\u52a0 del\n{\n\tif (r < k || l > k) return;\n\tif (l == r && r == k) return len[pre[l]] += del, t[rt].mx += del, void();\n\tint mid = l + r >> 1;\n\tupd(ls(rt), l, mid, k, del); upd(rs(rt), mid + 1, r, k, del);\n\tpushup(rt);\n}\n\nil int wc(int rt, int l, int r, int pos) // \u627e\u5230\u6700\u5de6\u4fa7\u7684\u80fd\u5403\u4f4d\u7f6e\u5728 pos \u7684\u868a\u5b50\u7684\u9752\u86d9\n{\n\tif (l == r) return x[pre[l]] <= pos && x[pre[l]] + len[pre[l]] >= pos ? pre[l] : -1;\n\tint mid = l + r >> 1;\n\tif (pos <= t[ls(rt)].mx) return wc(ls(rt), l, mid, pos);\n\treturn wc(rs(rt), mid + 1, r, pos);\n}\n\nil int get(int x)\n{\n\treturn lower_bound(nuf + 1, nuf + 1 + n, mp(x, -1)) - nuf;\n}\n\nint main()\n{\n\tread(n, m);\n\trep1(i, 1, n) read(x[i], len[i]), nuf[i] = mp(x[i], i);\n\tsort(nuf + 1, nuf + 1 + n);\n\trep1(i, 1, n) pre[i] = nuf[i].snd;\n\tbuild(1, 1, n);\n\trep1(i, 1, m)\n\t{\n\t\tread(p[i], b[i]); int eat = wc(1, 1, n, p[i]);\n\t\tif (!~eat)\n\t\t{\n\t\t\tmt.insert(mp(p[i], b[i]));\n\t\t\tcontinue;\n\t\t}\n\t\tupd(1, 1, n, get(x[eat]), b[i]); ate[eat]++;\n\t\t\n\t\tauto it = mt.lower_bound(mp(x[eat], -1));\n\t\twhile (it != mt.end() && (*it).fst <= x[eat] + len[eat])\n\t\t{\n\t\t\tupd(1, 1, n, get(x[eat]), (*it).snd);\n\t\t\tate[eat]++; mt.erase(it);\n\t\t\tit = mt.lower_bound(mp(x[eat], -1));\n\t\t}\n\t}\n\trep1(i, 1, n) write(ate[i], ' '), write(len[i], '\\n');\n\trout;\n}\n```",
        "postTime": 1645806627,
        "uid": 409236,
        "name": "StayAlone",
        "ccfLevel": 6,
        "title": "CF609F Frogs and mosquitoes C++\u9898\u89e3"
    },
    {
        "content": "\u5bf9\u4e8e\u6bcf\u53ea\u9752\u86d9\u79bb\u6563\u5316\u540e\u6254\u7ebf\u6bb5\u6811\u4e0a\uff0c\u6743\u503c\u4e3a\u80fd\u5230\u8fbe\u7684\u6700\u8fdc\u5904\u3002\u7136\u540e\u6211\u4eec\u53d1\u73b0max\uff08$a_1$~$a_i$\uff09\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e8c\u5206\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u627e\u5230\u6bcf\u4e2a\u868a\u5b50\u80fd\u88ab\u5403\u5230\u7684\u6700\u5de6\u8fb9\u7684\u9752\u86d9\u3002\n\n\u4e0d\u4f1a\u88ab\u5403\u5230\u7684\u6254set\u91cc\uff0c\u7136\u540e\u5f53\u67d0\u53ea\u9752\u86d9\u820c\u5934\u53d8\u957f\u4e86\u518d\u5c06set\u91cc\u80fd\u88ab\u5403\u6389\u7684\u5168\u5403\u6389\uff08\u91cd\u590d\u8fdb\u884c\u627e\u5230\u80fd\u88ab\u5403\u6389\u7684\u6700\u5c0f\u7684p\u5c06\u5b83\u5403\u6389\u7684\u64cd\u4f5c\uff09\u3002\n\n\u56e0\u4e3a\u6211set\u5c5e\u4e8e\u666e\u53ca-\u6c34\u5e73\uff08\u751a\u81f3\u6e05\u7a7a\u53d8\u91cf\u586b\u7684\u662f\u6743\u503c\u8fd8\u8c03\u4e86\u534a\u5929\uff09\u6240\u4ee5\u9009\u62e9\u4e86\u964d\u7ef4\uff0c\u53ef\u4ee5\u88abhack\uff0c\u4f46\u6bd4\u8f83\u5e78\u8fd0\u6ca1\u88abhack\uff0c\u4e0d\u4f1aset\u7684\u5927\u6982\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\u3002\u6216\u8005\u6539\u6210\u4e8c\u7ef4\n\n```\n#include <iostream>\n#include <cstdio>\n#include <set>\n#include <algorithm>\nusing namespace std;\nconst int N = 2e5 + 10;\nint n, m;\nint tree[N << 2], maxs[N << 2];\nint x[N], t[N], p[N], b[N], num[N];\nmultiset<long long>s;\nvoid opt1(int o, int l, int r, int i, int x)\n{\n\tif(l == r)\n\t{\n\t\tmaxs[o] = x;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(mid >= i)opt1(o << 1, l, mid, i, x);\n\telse opt1(o << 1 | 1, mid + 1, r, i, x);\n\tmaxs[o] = max(maxs[o << 1], maxs[o << 1 | 1]);\n}\nbool opt2(int o, int l, int r, int L, int R, int x)\n{\n\t//printf(\"%d\\n\", o);\n\tif(l >= L && r <= R)\n\t{\n\t\treturn maxs[o] >= x;\n\t}\n\tint mid = (l + r) >> 1, ans = 0;\n\tif(mid >= L) ans |= opt2(o << 1, l, mid, L, R, x);\n\tif(mid < R)  ans |= opt2(o << 1 | 1, mid + 1, r, L, R, x);\n\treturn ans;\n}\nbool pd(int i, int j)\n{\n\treturn x[i] < x[j];\n}\nint ans[N], dy[N];\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= n; ++ i)\n\t{\n\t\tscanf(\"%d%d\", &x[i], &t[i]);\n\t\tnum[i] = i;\n\t}\n\tfor (int i = 1; i <= m; ++ i)\n\t{\n\t\tscanf(\"%d%d\", &p[i], &b[i]);\n\t}\n\tsort(num + 1, num + 1 + n, pd);\n\tfor (int i = 1; i <= n; ++ i)\n\t{\n\t\topt1(1, 1, n, i, x[num[i]] + t[num[i]]);\n\t}\n\tlong long y;\n\ty = 9223372036854775800;\n\ts.insert(y);\n\tfor (int i = 1; i <= m; ++ i)\n\t{\n\t\tint l = 1, r = n;\n\t\tfor(; l < r;)\n\t\t{\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tif(x[num[mid]] > p[i]) r = mid;\n\t\t\telse l = mid + 1;\n\t\t}\n\t\twhile(x[num[r]] > p[i]) -- r;\n\t\tl = 1;\n\t\tif(r < 1 || !opt2(1, 1, n, 1, r, p[i]))\n\t\t{\n\t\t\ts.insert((long long)p[i] * 1000000000LL + (long long)b[i]);\n\t\t\tcontinue;\n\t\t}\n\t\tfor(; l < r;)\n\t\t{\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tif(opt2(1, 1, n, 1, mid, p[i]))r = mid;\n\t\t\telse l = mid + 1;\n\t\t}\n\t\twhile(l <= n && !opt2(1, 1, n, 1, l, p[i])) ++ l;\n\t\twhile(l > 1 && opt2(1, 1, n, l - 1, l - 1, p[i])) -- l;\n\t\t++ ans[num[l]];\n\t\tt[num[l]] += b[i];\n\t\topt1(1, 1, n, l, x[num[l]] + t[num[l]]);\n\t\twhile(!s.empty())\n\t\t{\n\t\t\tlong long y;\n\t\t\ty = (long long)x[num[l]] * 1000000000LL;\n\t\t\t__typeof(s.begin()) i = s.lower_bound(y);\n\t\t\ty = *i;\n\t\t\tif(y / 1000000000LL <= (long long)(x[num[l]] + t[num[l]]))\n\t\t\t{\n\t\t\t\t++ ans[num[l]];\n\t\t\t\ts.erase(i);\n\t\t\t\tt[num[l]] += (int)(y % 1000000000LL);\n\t\t\t}\n\t\t\telse\n\t\t\tbreak;\n\t\t}\n\t\topt1(1, 1, n, l, x[num[l]] + t[num[l]]);\n\t}\n\tfor (int i = 1; i <= n; ++ i)\n\t{\n\t\tprintf(\"%d %d\\n\", ans[i], t[i]);\n\t}\n}\n```\n",
        "postTime": 1599749525,
        "uid": 111728,
        "name": "\u5e7b\u5f71\u661f\u575a\u5f3a",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF609F \u3010Frogs and mosquitoes\u3011"
    },
    {
        "content": "## \u5927\u610f\n\n\u5728\u5750\u6807\u8f74\u4e0a\u6709 $ n $ \u4e2a\u9752\u86d9\uff0c\u6bcf\u4e00\u53ea\u9752\u86d9\u90fd\u6709\u4e00\u4e2a\u53ef\u4ee5\u5403\u868a\u5b50\u7684\u533a\u95f4 $ [x_i,x_i + t_i] $ ( $ x_i $ \u4e92\u4e0d\u76f8\u540c)\uff0c\u6709 $ m $ \u53ea\u868a\u5b50\uff0c\u6bcf\u4e00\u53ea\u868a\u5b50\u4f9d\u6b21\u964d\u843d\u5728 $ p_i $ \uff0c\u6700\u9760\u5de6\u7684\u80fd\u5403\u5230\u5b83\u7684\u9752\u86d9\u4f1a\u5403\u4e86\u5b83\uff0c\u5e76\u4f7f\u5176 $ t_i $ \u589e\u52a0\u868a\u5b50\u7684\u53c2\u6570 $ b_i $ \u3002\u868a\u5b50\u4e0d\u88ab\u5403\u6389\u65f6\u4f1a\u505c\u7559\u5728\u539f\u4f4d\u3002\n\n\u6c42\u6bcf\u4e00\u53ea\u9752\u86d9\u6700\u7ec8\u7684 $ t_i $ \u548c\u5403\u5230\u868a\u5b50\u7684\u6570\u91cf\u3002\n\n## \u601d\u8def\n\n\u5982\u679c $ x_i < x_j $ \uff0c\u5e76\u4e14 $ x_i + t_i \\geq x_j + t_j $ \uff0c\u90a3\u4e48\u9752\u86d9 $ j $ \u5c31\u6c38\u8fdc\u65e0\u8bba\u5982\u4f55\u90fd\u5403\u4e0d\u5230\u868a\u5b50\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4ee5\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u53bb\u6389\u8fd9\u4e9b\u5403\u4e0d\u5230\u868a\u5b50\u7684\u9752\u86d9\uff0c\u90a3\u4e48\u8fd9\u4e9b\u9752\u86d9\u7684\u53f3\u7aef\u70b9\u5c31\u662f\u5355\u8c03\u9012\u589e\u7684\u3002\n\n\u6709\u4e00\u53ea\u868a\u5b50\u964d\u843d\u4e0b\u6765\u4e86\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u5728\u9752\u86d9\u5e8f\u5217\u4e2d\u4e8c\u5206\u6700\u5de6\u7684\u53f3\u7aef $ > $ \u868a\u5b50\u4f4d\u7f6e\u7684\u9752\u86d9\uff0c\u5982\u679c\u8fd9\u53ea\u9752\u86d9\u53ef\u4ee5\u5403\u5230\uff0c\u90a3\u4e48\u8fd9\u53ea\u9752\u86d9\u5c31\u4f1a\u5403\u5230\u8fd9\u53ea\u868a\u5b50\uff0c\u5426\u5219\u8fd9\u53ea\u868a\u5b50\u5c06\u505c\u7559\u5728\u8fd9\u91cc\u3002\n\n\u5982\u679c\u8fd9\u53ea\u868a\u5b50\u505c\u7559\u5728\u539f\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a`multiset`\u5b58\u8d77\u6765\uff0c\u65b9\u4fbf\u4ee5\u540e\u7684\u67e5\u627e\u3002\n\n\u5982\u679c\u80fd\u5403\u5230\u8fd9\u53ea\u868a\u5b50\uff0c\u5b83\u7684 $ t_i $ \u5c31\u4f1a\u589e\u52a0\uff0c**\u5c31\u6709\u53ef\u80fd\u5403\u5230\u66f4\u591a\u7684\u868a\u5b50**\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u5355\u72ec\u5bf9\u8fd9\u53ea\u9752\u86d9\u67e5\u627e\u80fd\u5403\u5230\u7684\u868a\u5b50\uff0c\u6ce8\u610f\u8981\u4e00\u4e2a\u4e2a\u5730\u627e\uff0c\u627e\u5b8c\u4e4b\u540e\u589e\u52a0 $ t_i $ \u7136\u540e\u91cd\u590d\u8fc7\u7a0b\u3002\n\n\u67e5\u627e\u7684\u65b9\u6cd5\u5c31\u662f\u7528`multiset`\u81ea\u5e26\u7684`lower_bound`\uff0c\u627e\u5728\u5de6\u7aef\u70b9\u53f3\u7684\u6700\u5de6\u868a\u5b50\u3002\n\n\u5f53\u627e\u5b8c\u4e4b\u540e\u6ca1\u6709\u5269\u4e0b\u7684\u868a\u5b50\u53ef\u4ee5\u5403\u540e\uff0c\u8981\u6e05\u9664\u5403\u4e0d\u5230\u868a\u5b50\u7684\u9752\u86d9\uff0c\u4e0d\u7136\u53ef\u80fd\u5bf9\u4e8c\u5206\u4ea7\u751f\u5f71\u54cd\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define inf 1000000000\n#define mp(a,b) (pair<int,int>){a,b}\n#define mk(a,b,c) (hm){a,b,c}\n#define se second\n#define fi first\nusing namespace std;\nint n,m,k,ansl[200005],ansc[200005];\nmultiset<pair<int,int> >s; \nstruct hm{\n\tint x,t,id;\n}a[200005];\nvector<hm>t;\nbool cmp(hm a,hm b){\n\treturn a.x==b.x?a.t<b.t:a.x<b.x;\n}\nint ask(int x){\n\tint l=1,r=k,mid;\n\twhile(l<r){\n\t\tmid=l+r>>1;\n\t\tif(t[mid].x+t[mid].t>=x) r=mid;\n\t\telse l=mid+1;\n\t}\n\tif(t[l].x<=x&&t[l].x+t[l].t>=x) return l;\n\treturn 0;\n}\nvoid clr(int x){\n\tfor(;x<k;){\n\t\tif(t[x+1].x+t[x+1].t<=t[x].x+t[x].t) t.erase(t.begin()+x+1),k--;\n\t\telse break;\n\t}\n}\nsigned main(){\n\tt.push_back(mk(0,0,0));\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++) scanf(\"%lld %lld\",&a[i].x,&a[i].t),a[i].id=i,ansl[i]=a[i].t;\n\tsort(a+1,a+n+1,cmp);\n\tfor(int i=1,mx=0;i<=n;i++){\n\t\tif(a[i].x+a[i].t>mx){\n\t\t\tt.push_back(a[i]);\n\t\t\tk++;\n\t\t\tmx=a[i].x+a[i].t;\n\t\t}\n\t}\n\tfor(int i=1,l,sz;i<=m;i++){\n\t\tscanf(\"%lld %lld\",&l,&sz);\n\t\tint p=ask(l);\n\t\tif(p){\n\t\t\tansl[t[p].id]+=sz;\n\t\t\tt[p].t+=sz;\n\t\t\tansc[t[p].id]++;\n\t\t\twhile(!s.empty()){\n\t\t\t\tauto it=s.lower_bound(mp(t[p].x,-192));\n\t\t\t\tif((it==s.end())||(t[p].x+t[p].t<(it->fi))) break;\n\t\t\t\tansl[t[p].id]+=(it->se);\n\t\t\t\tt[p].t+=(it->se);\n\t\t\t\tansc[t[p].id]++; \n\t\t\t\ts.erase(it);\n\t\t\t}\n\t\t\tclr(p);\n\t\t}\n\t\telse s.insert(mp(l,sz));\n\t}\n\tfor(int i=1;i<=n;i++) printf(\"%lld %lld\\n\",ansc[i],ansl[i]);\n\treturn 0;\n}\n```",
        "postTime": 1643428982,
        "uid": 429147,
        "name": "hxhhxh",
        "ccfLevel": 0,
        "title": "CF609F"
    },
    {
        "content": "## **\u9898\u610f\u7b80\u8ff0**\n\n\u7ed9\u5b9a\u6570\u8f74\u975e\u8d1f\u534a\u8f74\u4e0a\u7684 $n$ \u53ea\u9752\u86d9\u7684\u4f4d\u7f6e $x_i$ \u4ee5\u53ca\u820c\u5934\u957f\u5ea6 $l_i$\uff0c\u8fd8\u6709\u4f9d\u6b21\u843d\u4e0b\u6765\u7684 $m$ \u53ea\u868a\u5b50\u7684\u4f4d\u7f6e $p_i$ \u4ee5\u53ca\u5927\u5c0f $b_i$\u3002\n\n\u6bcf\u53ea\u868a\u5b50 $j$ \u4ec5\u4f1a\u88ab\u6ee1\u8db3 $x_i \\le p_j \\land x_i + l_i \\ge p_j$\uff0c\u4e14 $i$ \u6700\u5c0f\u7684\u9752\u86d9\u5403\u6389\uff0c\u5403\u4e4b\u540e $l_i \\gets l_i + b_j$\u3002\n\n\u95ee\u6700\u540e\u6bcf\u53ea\u9752\u86d9\u5403\u6389\u7684\u868a\u5b50\u7684\u6570\u91cf\u4ee5\u53ca\u6700\u540e\u6bcf\u53ea\u9752\u86d9\u820c\u5934\u7684\u957f\u5ea6[^1]\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1 \\le n, m \\le 2\\cdot 10^5$\uff0c$1 \\le x_i, l_i, p_i, b_i \\le 10^9$\u3002\n\n## **\u89e3\u9898\u601d\u8def**\n\n\u6211\u4eec\u5b9e\u9645\u4e0a\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u662f\u6bcf\u53ea\u868a\u5b50\u843d\u4e0b\u6765\u4e86\u4e4b\u540e\uff0c\u88ab\u54ea\u53ea\u9752\u86d9\u5403\u6389\u3002\n\n\u9996\u5148\u79bb\u6563\u5316\uff0c\u7136\u540e\u7ef4\u62a4\u533a\u95f4\u4e2d $x_i + l_i$ \u7684\u6700\u5927\u503c $\\textrm{dat}(p)$\u3002\n\n\u6ce8\u610f\u5230\u4e00\u53ea\u868a\u5b50\u53ef\u80fd\u843d\u4e0b\u6765\u7684\u65f6\u5019\u6ca1\u6709\u9752\u86d9\u80fd\u5403\u5230\uff0c\u4f46\u662f\u4e4b\u540e\u67d0\u53ea\u9752\u86d9\u7684\u820c\u5934\u53d8\u957f\u4e86\uff0c\u80fd\u5403\u5230\u5b83\u4e86\uff1b\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u4e2a `multiset` \u6765\u7ef4\u62a4\u6ca1\u5403\u6389\u7684\u868a\u5b50\u3002\n\n\u5f53\u5728\u7ebf\u6bb5\u6811\u4e0a\u4f4d\u4e8e\u4e00\u4e2a $\\textrm{dat}(p) < p_i$ \u7684\u8282\u70b9\u65f6\uff0c\u80af\u5b9a\u8fd9\u53ea\u868a\u5b50\u662f\u5403\u4e0d\u6389\u7684\u4e86\uff0c\u628a\u5b83\u4e22\u8fdb\u4e00\u4e2a `multiset` \u91cc\u5b58\u7740\u4ee5\u540e\u5403\u3002\n\n\u5982\u679c\u5f53\u524d\u8282\u70b9\u6ee1\u8db3 $\\textrm{dat}(p) \\ge p_i$\uff1a\n\n- \u5982\u679c $\\textrm{dat}(2p) \\ge p_i$\uff0c\u5373\u5de6\u513f\u5b50\u8282\u70b9\u6709\u9752\u86d9\u53ef\u4ee5\u5403\u6389\u8fd9\u53ea\u868a\u5b50\uff0c\u90a3\u80af\u5b9a\u662f\u4f18\u5148\u9009\u66f4\u9760\u5de6\u7684\u9752\u86d9\u5403\u6389\uff0c\u5411\u5de6\u513f\u5b50\u9012\u5f52\uff1b\n- \u5426\u5219\u5982\u679c $\\textrm{dat}(2p + 1) \\ge p_i$\uff0c\u5373\u53f3\u513f\u5b50\u8282\u70b9\u6709\u9752\u86d9\u53ef\u4ee5\u5403\u6389\u8fd9\u53ea\u868a\u5b50\uff0c\u90a3\u5c31\u5f80\u53f3\u513f\u5b50\u9012\u5f52\u3002\n- \u5982\u679c\u5230\u4e86\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u8bf4\u660e\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u7684\u9752\u86d9\u8981\u5403\u6389\u5f53\u524d\u868a\u5b50\u4e86\uff0c\u66f4\u65b0 $l_i$\uff0c$\\textrm{eat}(p)$\uff08\u8868\u793a\u8fd9\u53ea\u9752\u86d9\u5403\u4e86\u591a\u5c11\u53ea\u868a\u5b50\uff09\u4ee5\u53ca $\\textrm{dat}(p)$\u3002\n\n\u5728\u66f4\u65b0 $l_i$ \u7684\u65f6\u5019\uff0c\u770b\u5f53\u524d\u7684\u9752\u86d9\u5728 `multiset` \u91cc\u80fd\u4e0d\u80fd\u5403\u66f4\u591a\u7684\u868a\u5b50\uff1b\u5b9e\u73b0\u4e0a\u5c31\u662f\u5728 `multiset` \u91cc `lower_bound`\uff0c\u627e $p_j$ \u5927\u4e8e\u7b49\u4e8e $x_i$ \u7684\u7b2c\u4e00\u53ea\u868a\u5b50 $j$ \u80fd\u5426\u88ab $i$ \u5403\u6389\uff0c\u987a\u7740\u5403\u3002\n\n## **\u4ee3\u7801\u5b9e\u73b0**\n\n``` cpp\n#include <bits/stdc++.h>\n#define LL long long\n\nnamespace io {\n\ttemplate <typename T> inline void read(T & _x) {\n        int f = 0, ch; _x = 0;\n        while(!isdigit(ch = getchar())) f |= ch == '-';\n        while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar();\n\t        if(f) _x = -_x;\n\t    }\n\t    template <typename T, typename ... Args> inline void read(T &_f, Args& ... args) {\n\t        read(_f), read(args ...);\n\t    }\n\t    inline void _deal(char ch) { putchar(ch); }\n\t    template <typename T> inline void _deal(T _x) {\n\t        if (_x < 0) putchar('-'), _x = -_x;\n\t        if (_x > 9) _deal(_x / 10);\n\t        putchar(_x % 10 + '0');\n\t    }\n\t    inline void write() {}\n\t    template <typename T, typename ... Args> inline void write(T _f, Args ... args) {\n\t        _deal(_f), write(args...);\n\t    }\n\t}\n\nconst int N = 2e5 + 5;\nconst int M = 2e5 + 5;\n\nint n, m, x[N], t[N], rk[N];\n\nstd::multiset<std::pair<int, int> > ms;\nstd::pair<int, LL> ans[M];\n\nbool cmp(int aa, int bb) {\n\treturn x[aa] < x[bb];\n}\n\nstruct SEGTREE {\n\tstatic const int MS = N * 4;\n\tLL dat[MS];\n\tint eat[MS], frm[MS];\n\tvoid pushup(int p) {\n\t\tdat[p] = std::max(dat[p << 1], dat[p << 1 | 1]);\n\t}\n\tvoid build(int p, int L, int R) {\n\t\tif(L == R) {\n\t\t\tdat[p] = x[rk[L]] + t[rk[L]];\n\t\t\teat[p] = 0;\n\t\t\tfrm[p] = x[rk[L]];\n\t\t\treturn;\n\t\t}\n\t\tint MID = L + R >> 1;\n\t\tbuild(p << 1, L, MID), build(p << 1 | 1, MID + 1, R);\n\t\tpushup(p);\n\t}\n\tvoid solve(int p, int L, int R, int pos, int siz) {\n\t\tif(dat[p] < pos) {\n\t\t\tms.insert(std::make_pair(pos, siz));\n\t\t\treturn;\n\t\t}\n\t\tif(L == R) {\n\t\t\tif(frm[p] > pos)\n\t\t\t\tms.insert(std::make_pair(pos, siz));\n\t\t\telse {\n\t\t\t\tdat[p] += siz, ++eat[p];\n\t\t\t\tfor(std::multiset<std::pair<int, int> >::iterator it = ms.lower_bound(std::make_pair(frm[p], -1)); it != ms.end();) {\n\t\t\t\t\tif(it->first > dat[p])\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse {\n\t\t\t\t\t\tdat[p] += it->second;\n\t\t\t\t\t\t++eat[p];\n\t\t\t\t\t\tstd::multiset<std::pair<int, int> >::iterator tmp = it;\n\t\t\t\t\t\t++it;\n\t\t\t\t\t\tms.erase(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tint MID = L + R >> 1;\n\t\tif(dat[p << 1] >= pos)\n\t\t\tsolve(p << 1, L, MID, pos, siz);\n\t\telse if(dat[p << 1 | 1] >= pos)\n\t\t\tsolve(p << 1 | 1, MID + 1, R, pos, siz);\n\t\tpushup(p);\n\t}\n\tstd::pair<int, LL> query(int p, int L, int R, int x) {\n\t\tif(L == R)\n\t\t\treturn std::make_pair(eat[p], dat[p] - frm[p]);\n\t\tint MID = L + R >> 1;\n\t\tif(x <= MID)\n\t\t\treturn query(p << 1, L, MID, x);\n\t\telse\n\t\t\treturn query(p << 1 | 1, MID + 1, R, x);\n\t}\n} tr;\n\nint32_t main() {\n\tio::read(n, m);\n\tfor(int i = 1; i <= n; ++i) {\n\t\tio::read(x[i], t[i]);\n\t\trk[i] = i;\n\t}\n\tstd::sort(rk + 1, rk + n + 1, cmp);\n\ttr.build(1, 1, n);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tint ttp, ttb;\n\t\tio::read(ttp, ttb);\n\t\ttr.solve(1, 1, n, ttp, ttb);\n\t}\n\tfor(int i = 1; i <= n; ++i)\n\t\tans[rk[i]] = tr.query(1, 1, n, i);\n\tfor(int i = 1; i <= n; ++i)\n\t\tprintf(\"%d %lld\\n\", ans[i].first, ans[i].second);\n\treturn 0;\n}\n```\n\n\u539f\u9898\u94fe\u63a5: [F. Frogs and mosquitoes](https://codeforces.com/problemset/problem/609/F)\n",
        "postTime": 1598604670,
        "uid": 78407,
        "name": "Clever_Jimmy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF609F \u3010Frogs and mosquitoes\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u6709n\u53ea\u9752\u86d9\uff0cm\u53ea\u868a\u5b50\uff0c\u5750\u6807\u5206\u522b\u4e3ax[i],p[j],\u7b2ci\u53ea\u9752\u86d9\u820c\u5934\u957f\u5ea6t[i],\u7b2cj\u53ea\u868a\u5b50\u5927\u5c0f\u4e3ab[j],\u9752\u86d9\u4f1a\u4ece\u5de6\u5230\u53f3\u5403\u5b83\u591f\u5f97\u5230\u7684\u868a\u5b50\uff0c\u5403\u5b8c\u540e\uff0c\u820c\u5934\u4f1a\u589e\u957f\u5403\u7684\u868a\u5b50\u7684\u4f53\u79ef\u7684\u957f\u5ea6\uff0c\u6c42\u6700\u7ec8\u6bcf\u53ea\u9752\u86d9\u5403\u5230\u7684\u868a\u5b50\u6570\u548c\u820c\u5934\u957f\u5ea6\u3002\n\n\u6b64\u9898\u4e00\u770b\u4fbf\u77e5\u662f\u7ebf\u6bb5\u6811+multiset,\u5148\u5c06\u9752\u86d9\u4ece\u5de6\u5230\u53f3\u6392\u5e8f\uff0c\u518d\u63d2\u5165\u5230\u7ebf\u6bb5\u6811\u4e2d\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u53ea\u868a\u5b50\uff0c\u5148\u67e5\u8be2\u662f\u5426\u6709\u9752\u86d9\u80fd\u76f4\u63a5\u5403\u6389\u5b83\uff0c\u82e5\u4e0d\u884c\uff0c\u538b\u5165multiset\u4e2d\uff0c\u4f9b\u540e\u7eed\u8fdb\u884clower_bound\u64cd\u4f5c\uff0c\u5e76\u5c06\u65b0\u7684\u9752\u86d9\u820c\u5934\u957f\u5ea6\u518d\u6b21\u63d2\u5165\u7ebf\u6bb5\u6811\u4e2d\uff0c\u5faa\u73af\u5f80\u590d\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nll read(){\n\tll a=0,b=getchar(),c=1;\n\twhile(!isdigit(b))c=b=='-'?-1:1,b=getchar();\n\twhile(isdigit(b))a=a*10+b-'0',b=getchar();\n\treturn a*c;\n}\nconst int N=200005; \nint n,m,x[N],t[N],c[N],d[N],a[N*4];\nmultiset<pair<int,int> > st;\nbool cmp(int u,int v){\n\treturn x[u]<x[v];\n}\nint add(int p,int v,int w,int l,int r){\n\tif(p<l or p>=r)return a[w];\n\tif(l+1==r)return a[w]=x[d[p]]+v;\n\tint mid=(l+r)>>1;\n\treturn a[w]=max(add(p,v,w*2,l,mid),add(p,v,w*2+1,mid,r));\n}\nint query(int p,int w,int l,int r){\n\tif(l+1==r)return (a[w]>=p and x[d[l]]<=p)?l:-1;\n\tint mid=(l+r)>>1;\n\treturn a[w*2]>=p?query(p,w*2,l,mid):query(p,w*2+1,mid,r);\n}\nint main(){\n\tn=read(),m=read();\n\tfor(int i=0;i<n;i++)\n\t\tx[i]=read(),t[i]=read(),d[i]=i;\n\tsort(d,d+n,cmp);\n\tfor(int i=0;i<n;i++)\n\t\tadd(i,t[d[i]],1,0,n);\n\twhile(m--){\n\t\tint p=read(),b=read();\n\t\tint i,k=query(p,1,0,n);\n\t\tif(k==-1)st.insert({p,b});\n\t\telse{\n\t\t\ti=d[k],c[i]++,t[i]+=b;\n\t\t\twhile(st.size()){\n\t\t\t\tmultiset<pair<int,int> >::iterator it=st.lower_bound({x[i],-1});\n\t\t\t\tif(it==st.end() or x[i]+t[i]<it->first)break;\n\t\t\t\tc[i]++,t[i]+=it->second,st.erase(it);\n\t\t\t}\n\t\t\tadd(k,t[i],1,0,n);\n\t\t}\n\t}\n\tfor(int i=0;i<n;i++)\n\t\tprintf(\"%d %d\\n\",c[i],t[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1581254489,
        "uid": 74787,
        "name": "jzh817",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF609F \u3010Frogs and mosquitoes\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n~~\u81ea\u5df1\u770b\u7ffb\u8bd1~~\u3002\n\n## \u601d\u8def\n\u4f3c\u4e4e\u6ca1\u6709\u4eba\u8c22\u6211\u8fd9\u79cd ~~sb~~  \u505a\u6cd5\u3002\n\n\u9996\u5148\u53d1\u73b0\u9898\u76ee\u6240\u8981\u6c42\u7684\u6700\u5de6\u8fb9\u7684\u9752\u86d9\u5148\u5403\u662f\u975e\u5e38\u5bb9\u6613\u5b9e\u73b0\u7684\uff0c\u5c31\u7ef4\u62a4\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u8868\u793a\u5f53\u524d\u533a\u95f4\u5f52\u54ea\u53ea\u9752\u86d9\u7ba1\uff0c\u6309 $x_i$ \u5927\u7684\u5148\u6267\u884c\u533a\u95f4\u8d4b\u503c\uff0c\u7136\u540e\u4f1a\u53d1\u73b0\u8fd9\u6837\u6b63\u597d\u5c31\u6ee1\u8db3\u7684\u9898\u76ee\u7684\u8981\u6c42\uff0c\u7136\u540e\u8fd9\u6837\u4e00\u9897\u7ebf\u6bb5\u6811\u5c31\u80fd\u652f\u6301\u6211\u4eec\u5b8c\u6210\u9898\u76ee\u7684\u6240\u6709\u8981\u6c42\u4e86\uff0c\u7531\u4e8e $p_i$ \u6700\u5927\u503c\u662f $10^9$ \u5c31\u5199\u4e00\u4e2a\u8fb9\u754c\u5f00\u5230 $10^9$ \u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5c31\u884c\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u868a\u5b50\uff0c\u6211\u4eec\u5148\u8981\u627e\u5230\u662f\u54ea\u4e00\u4e2a\u9752\u86d9\u5403\u4e86\u5b83\uff0c\u8fd9\u4e2a\u5c31\u662f\u7ebf\u6bb5\u6811\u5355\u70b9\u8be2\u95ee\uff0c\u76f4\u63a5\u8be2\u95ee\u5373\u53ef\uff0c\u5982\u679c\u6ca1\u6709\u9752\u86d9\u80fd\u7ba1\u5230\u5f53\u524d\u868a\u5b50\uff0c\u5c31\u4e0d\u7ba1\uff0c\u5426\u5219\u5c31\u8981\u6269\u5927\u8fd9\u53ea\u9752\u86d9\u7684\u7ba1\u8f96\u8303\u56f4\u4e86\uff0c\u5148\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u51fa\u6765\u5f53\u524d\u9752\u86d9\u6240\u7ba1\u5230\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6309\u7167\u66f4\u65b0\u540e\u7684\u820c\u5934\u957f\u5ea6\u91cd\u65b0\u8fdb\u884c\u533a\u95f4\u8d4b\u503c\uff08\u5176\u5b9e\u6839\u672c\u4e0d\u9700\u8981\uff0c\u76f4\u63a5\u4ece\u868a\u5b50\u6240\u5728\u7684\u4f4d\u7f6e\u5f00\u59cb\u5c31\u884c\u4e86\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5c11\u5199\u4e00\u4e2a\u51fd\u6570\uff09\uff0c\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u7136\u540e\u53d1\u73b0\u7b2c\u4e00\u4e2a\u6837\u4f8b\u90fd\u8fc7\u4e0d\u53bb\uff0c\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u53d1\u73b0\u662f\u56e0\u4e3a\u4e0d\u80fd\u88ab\u5403\u7684\u868a\u5b50\u5e76\u6ca1\u6709\u6d88\u5931\uff0c\u800c\u540e\u9762\u6709\u9752\u86d9\u820c\u5934\u53d8\u957f\u4e86\u8fd8\u80fd\u6765\u5403\u8fd9\u4e2a\u868a\u5b50\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e0b\u6ca1\u6709\u88ab\u5403\u868a\u5b50\u7684\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u6709\u9752\u86d9\u66f4\u65b0\u8fc7\u540e\u5c31\u770b\u770b\u65b0\u533a\u95f4\u4e2d\u6709\u6ca1\u6709\u868a\u5b50\uff0c\u6709\u5c31\u63a5\u7740\u5403\uff0c\u8fd9\u4e2a\u868a\u5b50\u7528\u4e00\u4e2a muliset \u7ef4\u62a4\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u672c\u6765\u53ef\u4ee5\u5bf9\u7684\uff0c\u4f46\u662f\u7ebf\u6bb5\u6811\u533a\u95f4\u8d4b\u503c\u7684 tag \u5fd8\u8bb0\u6e05\u7a7a\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u7136\u540e\u5c31\u8c03\u597d\u4e45\u3002\n\n\u5199\u9898\u89e3\u7684\u65f6\u5019\u53d1\u73b0\u7ebf\u6bb5\u6811\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u53ea\u6709\u533a\u95f4\u590d\u5236\u5355\u70b9\u8be2\u95ee\uff0c\u7528\u73c2\u6735\u8389\u6811\u5c31\u884c\u4e86\u3002\n\n## \u4ee3\u7801\n\u4e0a\u4e2a\u73c2\u6735\u8389\u6811\u7684\u5427\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\ntemplate<typename T>\ninline void cmax(T& a,const T& b){a<b?a=b:0;}\ntemplate<typename T>\ninline void cmin(T& a,const T& b){b<a?a=b:0;}\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef unsigned long long ull;\ntypedef unsigned int ui;\ntypedef vector<int> vi;\ntypedef vector<vector<int> >vii;\n#define X first\n#define Y second\nconst int mod=998244353;\nconst int  MAXN=2e5+10;\nstruct node\n{\n\tint l,r, w;\n\tinline node(int L=-1,int R=0,int val=0):l(L),r(R),w(val){}\n\tinline bool operator<(const node &b)const\n\t{\n\t\treturn l<b.l;\n\t}\n\tinline bool operator==(const node &b)const\n\t{\n\t\treturn l==b.l;\n\t}\n};\nstruct Chtholly:set<node>\n{\n\t#define IT set<node>::iterator\n\tinline IT split(int pos)\n\t{\n\t\tIT ii=lower_bound(node(pos));\n\t\tif(ii!=end()&&ii->l==pos)return ii;ii--;\n\t\tnode w=*ii;\n\t\terase(ii),insert(node(w.l,pos-1,w.w));\n\t\treturn insert(node(pos,w.r,w.w)).first;\n\t}\n\tinline void assign(int l,int r,int k)\n\t{\n\t\tIT rr=split(r+1);\n\t\terase(split(l),rr);\n\t\tinsert(node(l,r,k));\n\t}\n\tinline int at(int x)\n\t{\n\t\tIT ii=lower_bound(node(x));\n\t\tif(ii!=end()&&ii->l==x)return ii->w;ii--;\n\t\treturn ii->w;\n\t}\n\t#undef IT\n};\nChtholly ss;\nconst int N=2e9;\nsigned main()\n{\n\tios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);cout<<fixed<<setprecision(20);\n\tint n,m;cin>>n>>m;\n\tvector<array<int,3> >a(n+1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x,t;cin>>x>>t;\n\t\ta[i]=(array<int,3>){x,t,i};\n\t}\n\tss.insert(node(0,N+10,0));\n\tsort(a.begin()+1,a.end(),[&](const array<int,3>&a,const array<int,3>&b){return a[0]<b[0];});\n\tint rt=0;vi w(n+1);\n\tfor(int i=n;i>=1;i--)\n\t{\n\t\tint x,t,id;\n\t\tx=a[i][0],t=a[i][1],id=a[i][2];\n\t\tw[i]=id;\n\t\tss.assign(x,min(N,x+t),i);\n\t}\n\tvi cnt(n+1);\n\tauto eat=[&](int p,int x)->int\n\t{\n\t\tint id=ss.at(p);\n\t\tif(id==0)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\tint u,v,w;\n\t\ta[id][1]+=x;\n\t\tif(p<=min(N,a[id][0]+a[id][1]))ss.assign(p,min(N,a[id][0]+a[id][1]),id);\n\t\tcnt[id]++;\n\t\treturn id;\n\t};\n\tmultiset<pair<int,int> >s;\n\twhile(m--)\n\t{\n\t\tint p,x;cin>>p>>x;\n\t\tint id=eat(p,x);\n\t\tif(id==-1)\n\t\t{\n\t\t\ts.emplace(p,x);\n\t\t\tcontinue;\n\t\t}\t\n\t\twhile(1)\n\t\t{\n\t\t\tint w=a[id][0]+a[id][1];\n\t\t\tauto ii=s.lower_bound({a[id][0],-2e9});\n\t\t\tif(ii==s.end()||w<(ii->X))break;\n\t\t\teat(ii->X,ii->Y);\n\t\t\ts.erase(ii);\n\t\t}\n\t}\n\tvi ans1(n+1),ans2(n+1);\n\tfor(int i=1;i<=n;i++)ans1[w[i]]=cnt[i];\n\tfor(int i=1;i<=n;i++)ans2[w[i]]=a[i][1];\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcout<<ans1[i]<<' '<<ans2[i]<<'\\n';\n\t}\n\t return 0;\n}\n```\n",
        "postTime": 1661840476,
        "uid": 571229,
        "name": "__stick",
        "ccfLevel": 7,
        "title": "CF609F"
    },
    {
        "content": "# \u524d\u8a00\n[\u535a\u5ba2\u56ed\u4f53\u9a8c\u66f4\u4f73](https://www.cnblogs.com/C202202chenkelin/p/15034131.html)\n\n[\u9898\u76ee\u94fe\u63a5\uff1aCodeForces](https://codeforces.com/problemset/problem/609/F)\n# \u9898\u610f\n\u6709 $n$ \u4e2a\u533a\u95f4\uff0c\u6bcf\u4e2a\u533a\u95f4\u4e3a $[x_i,x_i+t_i]$\uff0c\u6709 $m$ \u4e2a\u4e8b\u4ef6\uff0c\u4e8b\u4ef6\u7684\u4f4d\u7f6e\u4e3a $p_j$,\u6bcf\u4e2a\u4e8b\u4ef6\u4f1a\u88ab $x_i+t_i\\geq p_j$ \u7684\u533a\u95f4\u4e2d\uff0c $x_i$ \u6700\u5c0f\u7684\u533a\u95f4\u6240\u5904\u7406\uff0c\u5904\u7406\u540e $t_i$ \u4f1a\u589e\u52a0 $b_j$\u3002\u4e8b\u4ef6\u5982\u679c\u6ca1\u6709\u5904\u7406\uff0c\u5219\u4e0d\u4f1a\u6d88\u5931\u3002\u4e0b\u4e00\u4e2a\u4e8b\u4ef6\u51fa\u73b0\u65f6\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ca1\u6709\u53ef\u4ee5\u5904\u7406\u7684\u4e8b\u4ef6\u3002\n\n\u8f93\u51fa\u6bcf\u4e2a\u533a\u95f4\u5904\u7406\u7684\u4e8b\u4ef6\uff0c\u548c\u6700\u7ec8\u7684 $t_i$\u3002\n# \u601d\u8def\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e9b\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u90fd\u662f\u4e0d\u53d8\u7684\uff0c\u56e0\u4e3a\u9898\u76ee\u60f3\u8981\u6700\u5c0f\u7684 $x_i$\uff0c\u6240\u4ee5\u5bf9\u4e8e\u8fd9\u4e9b\u533a\u95f4\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u524d\u7b54\u6848\u8fd9\u4e00\u4f4d\u4e3a $k$\uff0c\u5219\u524d $k-1$ \u4e2a\u533a\u95f4\u4e2d\u5fc5\u6ca1\u6709\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\uff0c\u800c $p(p\\geq k)$\uff0c\u524d $p$ \u4e2a\u533a\u95f4\u81f3\u5c11\u6709\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e8e\u662f\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\u3002\n\n\u800c\u627e\u5230\u8fd9\u4e2a\u5206\u754c\u70b9\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u80fd\u5904\u7406\u8fd9\u4e2a\u4e8b\u4ef6\u7684\u533a\u95f4\uff0c\u53ea\u9700\u8981\u627e\u5230\u80fd\u591f\u5904\u7406\u533a\u95f4\u6700\u5927\u503c\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u7ebf\u6bb5\u6811\u3002\u7b2c\u4e00\u4e2a\u4e8c\u5206\uff0c\u4e8c\u5206\u51fa $x_i$ \u5927\u4e8e $p_j$ \u7684\u6570\u5b57\u7684\u524d\u9a71\uff0c\u8bbe\u4e3a $rmax$\u3002\u7136\u540e\u518d $[1,rmax]$ \u4e2d\u4e8c\u5206\u5f53\u524d\u7b54\u6848\u3002\u82e5 $[1,mid]$ \u4e2d\uff0c\u6700\u5927\u7684 $x_i+t_i$ \u5927\u4e8e $p_j$ \u5219\u4ee3\u8868\u524d $mid$ \u4e2a\u533a\u95f4\u53ef\u4ee5\u5904\u7406\u8fd9\u4e2a\u4e8b\u4ef6\u3002\n\n\u82e5\u6ca1\u6709\u533a\u95f4\u53ef\u4ee5\u5904\u7406\u8fd9\u4e2a\u4e8b\u4ef6\uff0c\u5219\u7528\u4e00\u4e2a multiset \u6765\u7ef4\u62a4\u6ca1\u6709\u88ab\u5904\u7406\u7684\u4e8b\u4ef6\uff0c\u6309\u7167 $p_j$ \u6765\u8fdb\u884c\u6392\u5e8f\uff0c\u65b9\u4fbf\u4ee5\u540e\u7684\u533a\u95f4\u589e\u957f\u540e\u6765\u5904\u7406\u3002\n\n\u5426\u5219\u5904\u7406\u5b8c\u5f53\u524d\u7684\u4e8b\u4ef6\uff0c\u533a\u95f4\u53d8\u957f\u4e86\uff0c\u7531\u4e8e\u53ea\u6709\u8fd9\u4e00\u4e2a\u533a\u95f4\u53d8\u957f\uff0c\u6240\u4ee5\u53ea\u6709\u8fd9\u4e2a\u533a\u95f4\u53ef\u80fd\u5904\u7406\u4e4b\u524d\u6ca1\u5904\u7406\u8fc7\u7684\u4e8b\u4ef6\u3002\n\n\u56e0\u4e3a\u7528\u4e86 multiset \uff0c\u6240\u4ee5\u6309\u987a\u5e8f\u679a\u4e3e multiset \u4e2d\u7684\u5143\u7d20\u3002\u77e5\u9053\u4e0d\u80fd\u5904\u7406\u4e0b\u4e00\u4e2a\u4e8b\u4ef6\u6216\u662f\u6ca1\u6709\u4e8b\u4ef6\u53ef\u4ee5\u5904\u7406\u4e3a\u6b62\u3002\n\n\u6bcf\u5904\u7406\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u90fd\u653e\u5165 $slay$ \u8fd9\u4e2a multiset \u4e2d\uff0c\u6240\u6709\u53ef\u5904\u7406\u7684\u4e8b\u4ef6\u5904\u7406\u5b8c\u4e4b\u540e\uff0c\u5728\u8fdb\u884c\u5220\u9664\uff0c\u5426\u5219\u4f1a\u70b8\u3002\n\n\u6bcf\u6b21\u5904\u7406\u540e $slay$ \u6570\u7ec4\u9700\u8981\u6e05\u7a7a\u3002\n# Code\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\u3002\n```cpp\n#include <set>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n#define LL long long\nconst int MAXN = 2e5 + 5;\nmultiset<pair<int, int> > st, slay;\nstruct Node {\n\tint l, r, id;\n\tfriend bool operator < (Node x, Node y) {\n\t\treturn x.l < y.l;\n\t}\n};\nbool cmp(Node x, Node y) {\n\treturn x.id < y.id;\n}\nNode a[MAXN];\nint ans[MAXN], p[MAXN], b[MAXN], n, m;\nLL len[MAXN];\nstruct Segment_Node {\n\tint l, r;\n\tLL maxdata;\n\t#define ls (pos << 1)\n\t#define rs (pos << 1 | 1)\n};\nstruct Segment_Tree {\n\tSegment_Node t[MAXN << 2];\n\tvoid Push_Up(int pos) {\n\t\tt[pos].maxdata = max(t[ls].maxdata, t[rs].maxdata);\n\t}\n\tvoid Build(int pos, int l, int r) {\n\t\tt[pos].l = l, t[pos].r = r;\n\t\tif (l == r) {\n\t\t\tt[pos].maxdata = a[l].r;\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tBuild(ls, l, mid);\n\t\tBuild(rs, mid + 1, r);\n\t\tPush_Up(pos);\n\t}\n\tvoid Update(int pos, int x, int d) {\n\t\tif (t[pos].l == t[pos].r) {\n\t\t\tt[pos].maxdata = d;\n\t\t\treturn;\n\t\t}\n\t\tif (t[ls].r >= x)\n\t\t\tUpdate(ls, x, d);\n\t\telse\n\t\t\tUpdate(rs, x, d);\n\t\tPush_Up(pos);\n\t}\n\tint Query_Max(int pos, int l, int r) {\n\t\tif (l <= t[pos].l && t[pos].r <= r)\n\t\t\treturn t[pos].maxdata;\n\t\tint res = 0;\n\t\tif (l <= t[ls].r)\n\t\t\tres = max(res, Query_Max(ls, l, r));\n\t\tif (r >= t[rs].l)\n\t\t\tres = max(res, Query_Max(rs, l, r));\n\t\treturn res;\n\t}\n};\nSegment_Tree tree;\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\tfor (int i = 1, x, t; i <= n; i++) {\n\t\tscanf(\"%d %d\", &x, &t);\n\t\ta[i].l = x, a[i].r = x + t, a[i].id = i;\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tlen[i] = a[i].r;\n\tsort(a + 1, a + 1 + n);\n\ttree.Build(1, 1, n);\n\tfor (int i = 1; i <= m; i++) {\n\t\tscanf(\"%d %d\", &p[i], &b[i]);\n\t\tint l = 1, r = n, rmax = -1, res = -1;\n\t\twhile (l <= r) {\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tif (a[mid].l <= p[i])\n\t\t\t\tl = mid + 1, rmax = mid;\n\t\t\telse\n\t\t\t\tr = mid - 1;\n\t\t}\n\t\tl = 1, r = rmax;\n\t\twhile (l <= r) {\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tif (tree.Query_Max(1, 1, mid) >= p[i])\n\t\t\t\tr = mid - 1, res = mid;\n\t\t\telse\n\t\t\t\tl = mid + 1;\n\t\t}\n\t\tif (res == -1)\n\t\t\tst.insert(make_pair(p[i], b[i]));\n\t\telse {\n\t\t\tLL maxlen = len[a[res].id] + b[i];\n\t\t\tans[a[res].id]++;\n\t\t\tfor (multiset<pair<int, int> >::iterator it = st.upper_bound(make_pair(a[res].l, 0)); it != st.end(); it++) {\n\t\t\t\tif (it->first <= maxlen) {\n\t\t\t\t\tmaxlen += it->second;\n\t\t\t\t\tans[a[res].id]++;\n\t\t\t\t\tslay.insert(*it);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (multiset<pair<int, int> >::iterator it = slay.begin(); it != slay.end(); it++) \n\t\t\t\tst.erase(*it);\n\t\t\tslay.clear();\n\t\t\tlen[a[res].id] = maxlen;\n\t\t\ttree.Update(1, res, maxlen);\n\t\t}\n\t}\n\tsort(a + 1, a + 1 + n, cmp);\n\tfor (int i = 1; i <= n; i++)\n\t\tprintf(\"%d %lld\\n\", ans[i], len[i] - a[i].l);\n\treturn 0;\n}\n```",
        "postTime": 1626752746,
        "uid": 254733,
        "name": "Night_Bringer",
        "ccfLevel": 0,
        "title": "[\u9898\u89e3] CF609F Frogs and mosquitoes"
    }
]