[
    {
        "content": "> [CF590E Birthday](https://codeforces.com/contest/590/problem/E)\n\n## \u9898\u610f\n\n- \u7ed9\u5b9a $n$ \u4e2a\u4ec5\u5305\u542b `a,b` \u7684\u5b57\u7b26\u4e32\u3002\n- \u4f60\u9700\u8981\u53bb\u6389\u5c3d\u53ef\u80fd\u5c11\u7684\u5b57\u7b26\u4e32\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5b58\u5728\u67d0\u4e00\u4e2a\u4e32\u662f\u53e6\u4e00\u4e2a\u4e32\u7684\u5b50\u4e32\u3002\n- $n \\le 750$\uff0c$\\sum_{i=1}^n |s_i| \\le 10^7$\u3002\n\n## \u9898\u89e3\n\n\u8bbe $\\sum_{i=1}^n |s_i| = m$\u3002\n\n\u9996\u5148\u53ef\u4ee5 $\\mathcal O(m)$ \u5efa AC \u81ea\u52a8\u673a\u7136\u540e\u6c42\u51fa\u6240\u6709\u7684\u5b50\u4e32\u5173\u7cfb\u3002\n\n\u663e\u7136\u6211\u4eec\u4e0d\u80fd\u66b4\u529b\u8df3 fail\uff0c\u8fd9\u6837\u663e\u7136\u4f1a T \u98de\u3002\n\n\u6ce8\u610f\u5230\u5b50\u4e32\u5173\u7cfb\u662f\u4e00\u4e2a**\u504f\u5e8f\u5173\u7cfb**\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u8df3\u5230\u6700\u8fd1\u7684\u7ed3\u5c3e\u540c\u65f6\u8def\u5f84\u538b\u7f29\u5373\u53ef\uff0c\u90a3\u4e48\u6b64\u65f6\u53ef\u4ee5\u5efa\u51fa\u4e00\u4e2a DAG\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f [P4298 [CTSC2008]\u796d\u7940](https://www.luogu.com.cn/problem/P4298)\u4e86\uff0c\u4e0d\u8fc7\u8fd8\u662f\u5728\u8fd9\u513f\u5b8c\u6574\u7684\u5199\u4e00\u904d\u3002\n\n\u9898\u76ee\u8981\u6c42\u7684\u5b9e\u9645\u4e0a\u662f\u8fd9\u4e2a\u504f\u5e8f\u5173\u7cfb\u7684**\u6700\u957f\u53cd\u94fe**\uff0c\u901a\u8fc7 Dilworth \u5b9a\u7406\u53ef\u4ee5\u53d1\u73b0\u5c31\u662f DAG \u7684**\u6700\u5c0f\u53ef\u91cd\u590d\u8def\u5f84\u70b9\u8986\u76d6**\u3002\n\n\u6700\u5c0f\u53ef\u91cd\u590d\u8def\u5f84\u70b9\u8986\u76d6\u53c8\u53ef\u4ee5\u901a\u8fc7 $\\mathcal O(n^3)$ \u7684\u4f20\u9012\u95ed\u5305\u8f6c\u5316\u4e3a**\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6**\u3002\n\n\u53c8 DAG \u7684\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5305\u542b\u7684\u8def\u5f84\u6761\u6570 $= n -$ \u5176**\u62c6\u70b9\u4e8c\u5206\u56fe**\u7684\u6700\u5927\u5339\u914d\u6570\u3002\n\n\u4f7f\u7528**\u5308\u7259\u5229\u7b97\u6cd5**\u5373\u53ef\u5728 $\\mathcal O(n^3)$ \u7684\u65f6\u95f4\u6c42\u51fa\u7b54\u6848\u3002\n\n\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u662f\u5982\u4f55\u6784\u9020\u65b9\u6848\u3002\n\n\u6211\u4eec\u5148\u6c42\u51fa\u4f20\u9012\u95ed\u5305\u540e\u7684\u56fe\u7684\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5305\u542b\u7684\u8def\u5f84\u96c6\u5408 $path$\uff1a\n\n1. \u8bbe\u5728\u62c6\u70b9\u4e8c\u5206\u56fe\u4e2d\u5de6\u90e8\u70b9 $x$ \u5bf9\u5e94\u7684\u53f3\u90e8\u70b9\u4e3a $x^{\\prime}$\uff0c\u82e5 $x,y$ \u5339\u914d\u5219\u6709 $f_x = y, f_y = x$\u3002\n2. \u4f9d\u6b21\u8003\u8651\u5de6\u90e8\u7684\u6bcf\u4e00\u4e2a\u975e\u5339\u914d\u70b9 $x_0$\u3002\n3. \u4ece $x_0$ \u51fa\u53d1\uff0c\u6bcf\u6b21\u4ece $x$ \u8d70\u5230 $f_{x^{\\prime}}$\uff0c\u76f4\u81f3\u5230\u8fbe\u4e00\u4e2a\u5de6\u90e8\u70b9 $y_0$\uff0c\u6ee1\u8db3 $y_0^{\\prime}$ \u662f\u975e\u5339\u914d\u70b9\u3002\n4. \u90a3\u4e48\u7ecf\u8fc7\u7684\u6240\u6709\u70b9\u6784\u6210\u4e00\u6761\u4ee5 $y_0$ \u4e3a\u8d77\u70b9 $x_0$ \u4e3a\u7ec8\u70b9\u7684\u8def\u5f84\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u4ece $path$ \u7684\u6bcf\u6761\u8def\u5f84\u4e0a\u9009\u51fa\u4e00\u4e2a\u70b9\u6784\u6210\u539f\u56fe\u7684\u6700\u957f\u53cd\u94fe\uff1a\n\n1. \u5c06\u6240\u6709\u7684\u7ec8\u70b9 $x_0$ \u653e\u5230\u4e00\u8d77\u6784\u6210\u4e00\u4e2a\u96c6\u5408 $E$\u3002\n2. \u6c42\u51fa\u4ece $E$ \u4e2d\u7684\u6240\u6709\u8282\u70b9\u51fa\u53d1\uff0c\u8d70\u4e00\u6761\u8fb9\uff0c\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9 $next(E)$\u3002\n3. \u6839\u636e\u4f20\u9012\u95ed\u5305\u7684\u6027\u8d28\uff0c\u82e5 $E$ \u4e0e $next(E)$ \u6ca1\u6709\u4ea4\uff0c\u90a3\u4e48 $E$ \u5373\u4e3a\u6240\u6c42\u3002\n4. \u5426\u5219\u8003\u8651 $E \\cap next(E)$ \u7684\u6240\u6709\u8282\u70b9 $e$\uff0c\u6cbf\u7740 $e$ \u6240\u5728\u7684\u8def\u5f84\u53cd\u7740\u8d70\uff0c\u76f4\u5230\u4e00\u4e2a\u8282\u70b9 $e^{\\prime} \\notin next(E)$\uff0c\u5728 $E$ \u4e2d\u5c06 $e$ \u66ff\u6362\u4e3a $e^{\\prime}$\u3002\n5. \u56de\u5230\u7b2c $3$ \u6b65\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(m + n^3)$\u3002\n\n\u6ce8\u610f\u672c\u9898\u4efb\u4f55\u4e0e AC \u81ea\u52a8\u673a\u76f8\u5173\u7684\u9012\u5f52\u5747\u4f1a\u7206\u6808\u3002\n\n## \u4ee3\u7801\n\n```cpp\nconst int N = 757, M = 1e7 + 7;\nint n, len[N], ed[N], trie[M][2], fail[M], fa[M], gt[M], tot = 1;\nint d[N][N], v[N], f[N];\nchar s[M];\nqueue<int> q;\n\nbool dfs(int x) {\n\tfor (int i = 1; i <= n; i++)\n\t\tif (d[x][i] && !v[i]) {\n\t\t\tv[i] = 1;\n\t\t\tif (!f[i] || dfs(f[i])) return (f[i] = x);\n\t\t}\n\treturn 0;\n}\n\nint main() {\n\trd(n);\n\tfor (int i = 1; i <= n; i++) {\n\t\trds(s, len[i]);\n\t\tint p = 1;\n\t\tfor (int j = 1; j <= len[i]; j++) {\n\t\t\tint c = s[j] - 'a';\n\t\t\tif (!trie[p][c]) trie[p][c] = ++tot, fa[tot] = p;\n\t\t\tp = trie[p][c];\n\t\t}\n\t\ted[i] = p, gt[p] = i;\n\t}\n\tfor (int i = 0; i < 2; i++)\n\t\tif (trie[1][i]) fail[trie[1][i]] = 1, q.push(trie[1][i]);\n\t\telse trie[1][i] = 1;\n\twhile (q.size()) {\n\t\tint x = q.front();\n\t\tq.pop();\n\t\tfor (int i = 0; i < 2; i++)\n\t\t\tif (trie[x][i])\n\t\t\t\tfail[trie[x][i]] = trie[fail[x]][i], q.push(trie[x][i]);\n\t\t\telse trie[x][i] = trie[fail[x]][i];\n\t}\n\tgt[1] = -1;\n\tvi o;\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = ed[i]; j != 1; j = fa[j]) {\n\t\t\tint x = fail[j];\n\t\t\to.clear();\n\t\t\twhile (!gt[x]) o.pb(x), x = fail[x];\n\t\t\twhile (o.size()) fail[o.back()] = x, o.pop_back();\n\t\t\tfail[j] = x;\n\t\t\tif (j != ed[i] && gt[j]) x = j;\n\t\t\tif (x != 1) d[i][gt[x]] = 1;\n\t\t}\n\tfor (int k = 1; k <= n; k++)\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfor (int j = 1; j <= n; j++)\n\t\t\t\td[i][j] |= d[i][k] & d[k][j];\n\tfor (int i = 1; i <= n; i++) d[i][i] = 0;\n\tint ans = n;\n\tfor (int i = 1; i <= n; i++) ans -= dfs(i), memset(v, 0, sizeof(v));\n\tprint(ans);\n\tfor (int i = 1; i <= n; i++) v[f[i]] = 1;\n\tvi s;\n\tfor (int i = 1; i <= n; i++) if (!v[i]) s.pb(i);\n\tmemset(v, 0, sizeof(v));\n\tbool ok = 1;\n\twhile (ok) {\n\t\tok = 0;\n\t\tfor (int x : s)\n\t\t\tfor (int y = 1; y <= n; y++)\n\t\t\t\tif (d[x][y]) v[y] = 1;\n\t\tfor (int &x : s)\n\t\t\tif (v[x]) {\n\t\t\t\tok = 1;\n\t\t\t\twhile (v[x]) x = f[x];\n\t\t\t}\n\t}\n\tfor (auto x : s) print(x, ' ');\n\treturn 0;\n}\n```",
        "postTime": 1580119982,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF590E \u3010Birthday\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u5b9a $n$ \u4e2a\u4ec5\u5305\u542b $a,b$ \u7684\u5b57\u7b26\u4e32\uff0c\u4fdd\u8bc1\u5b83\u4eec\u4e24\u4e24\u4e0d\u540c\u3002\n\n\n\u4f60\u9700\u8981\u53bb\u6389\u5c3d\u53ef\u80fd\u5c11\u7684\u5b57\u7b26\u4e32\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5b58\u5728\u67d0\u4e00\u4e2a\u4e32\u662f\u53e6\u4e00\u4e2a\u4e32\u7684\u5b50\u4e32\u3002\n\n## \u6570\u636e\u8303\u56f4\n$n\\leqslant750$ \uff0c $\\sum_{i=1}^n \\vert s_i\\vert\\leqslant10^7$\u3002\n\n## \u9898\u76ee\u5206\u6790\n\u5982\u679c\u505a\u8fc7[P4298[CTSC2008]\u796d\u7940](https://www.luogu.com.cn/problem/P4298)\u548c[CF1483F Exam](https://www.luogu.com.cn/problem/CF1483F)\u7684\u8bdd\u8fd9\u9053\u9898\u5c31\u5f88\u7b80\u5355\u4e86\u3002\n\n\n\u5982\u679c\u628a\u5b50\u4e32\u5173\u7cfb\u89c6\u4f5c\u4e00\u79cd\u504f\u5e8f\u5173\u7cfb\uff0c\u8fd9\u6837\u7684\u504f\u5e8f\u5173\u7cfb\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a DAG\uff0c\u90a3\u4e48\u9898\u76ee\u5c31\u662f\u8981\u6c42\u51fa\u8fd9\u4e2a\u504f\u5e8f\u96c6\u7684**\u6700\u957f\u53cd\u94fe**\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a DAG \u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\u7531 Dilworth \u5b9a\u7406\uff0cDAG \u7684\u6700\u5927\u72ec\u7acb\u96c6\u7b49\u4e8e\u6700\u5c0f\u53ef\u91cd\u94fe\u8986\u76d6\uff0c\u7528\u5f17\u6d1b\u4f0a\u5fb7 $O(n^3)$ \u5730\u6c42\u51fa\u4f20\u9012\u95ed\u5305\u4e4b\u540e\u5c31\u7b49\u4e8e\u6700\u5c0f\u4e0d\u53ef\u91cd\u94fe\u8986\u76d6\u3002\n\n\n\u6839\u636e\u56fe\u8bba\u77e5\u8bc6 DAG \u7684\u6700\u5c0f\u94fe\u8986\u76d6 $=n-$ \u62c6\u70b9\u540e\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u6240\u4ee5\u6c42\u51fa\u5b50\u4e32\u5173\u7cfb\u540e\u6c42\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u6c42\u51fa $n$ \u4e2a\u4e32\u7684\u5b50\u4e32\u5173\u7cfb\uff0c\u5982\u679c\u76f4\u63a5\u5bf9\u6bcf\u4e2a\u70b9\u904d\u5386 Fail \u6811\u6765\u8fde DAG \u7684\u8fb9\u7684\u8bdd\u662f $O(nlen)$ \u7684\uff0c\u5b8c\u5168\u65e0\u6cd5\u901a\u8fc7\uff0c\u6211\u4eec\u8003\u8651\u53ea\u904d\u5386\u4e00\u904d Fail \u6811\u600e\u4e48\u505a\uff1a\n\u5bf9\u6bcf\u4e2a\u70b9\u7528\u4e00\u4e2a vector \u6765\u4fdd\u5b58\u5728 **Trie \u6811\u4e0a\u7ecf\u8fc7\u5b83\u7684\u4e32\u7684\u7f16\u53f7**\uff0c\u5728\u904d\u5386 Fail \u6811\u65f6\uff0c\u7ef4\u62a4**\u7ec8\u6b62\u8282\u70b9\u79bb\u5f53\u524d\u70b9\u6700\u8fd1\u7684\u4e00\u4e2a\u4e32**\uff0c\u7528\u8fd9\u4e2a\u4e32\u5411\u5f53\u524d\u70b9\u7684 vector \u4e2d\u7684\u4e32\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u4e4b\u540e\u7528\u5f17\u6d1b\u4f0a\u5fb7\u6c42\u51fa\u4f20\u9012\u95ed\u5305\uff0c\u5c31\u5f97\u5230\u6240\u6709\u7684\u5b50\u4e32\u5173\u7cfb\u4e86\u3002\n\n\u6700\u540e\u7528\u5b50\u4e32\u5173\u7cfb\u62c6\u70b9\u540e\u5efa\u51fa\u4e8c\u5206\u56fe\uff0c\u6c42 DAG \u6700\u5c0f\u94fe\u8986\u76d6\u548c\u6700\u5927\u72ec\u7acb\u96c6\u5373\u53ef\u3002\u5177\u4f53\u5730\uff0c\u8dd1\u5b8c\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u540e\uff0c\u6709\u4ee5\u4e0b\u4e24\u70b9\uff1a\n\n1. \u539f\u56fe\u6700\u5c0f\u94fe\u8986\u76d6 $=n-$ \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\n\n\n2. \u6211\u4eec\u4ece\u5de6\u8fb9\u5de6\u8fb9\u6240\u6709\u672a\u5339\u914d\u7684\u70b9\u5f00\u59cb dfs\uff0c\u6bcf\u6b21\u4ece\u5de6\u5f80\u53f3\u53ea\u8d70\u672a\u5339\u914d\u8fb9\uff0c\u4ece\u53f3\u5f80\u5de6\u5219\u53ea\u8d70\u5339\u914d\u8fb9\uff0c\u5e76\u6807\u8bb0\u6240\u6709\u7684\u70b9\u3002\u4e8c\u5206\u56fe\u7684\u4e00\u79cd\u6700\u5c0f\u70b9\u8986\u76d6\u5c31\u662f\u5de6\u4fa7\u7684\u672a\u8bbf\u95ee\u70b9\u52a0\u4e0a\u53f3\u4fa7\u7684\u5df2\u8bbf\u95ee\u70b9\uff1b\u4e8c\u5206\u56fe\u7684\u4e00\u79cd\u6700\u5927\u72ec\u7acb\u96c6\u5c31\u662f\u8fd9\u4e9b\u70b9\u7684\u8865\u96c6\uff08\u5bf9\u4e8e\u4e8c\u5206\u56fe\u6240\u6709\u70b9\u5168\u96c6\uff09\uff1b\u800c\u539f\u56fe\u7684\u4e00\u79cd\u6700\u5927\u72ec\u7acb\u96c6\u5c31\u662f\u7531\u6240\u6709\u5176\u7f16\u53f7\u5bf9\u5e94\u7684\u4e8c\u5206\u56fe\u5de6\u4fa7\u70b9\u548c\u53f3\u4fa7\u70b9\u90fd\u5728\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u4e2d\u7684\u70b9\u7ec4\u6210\uff08\u6216\u8005\u8bf4\u7531\u6240\u6709\u5176\u7f16\u53f7\u5bf9\u5e94\u7684\u4e8c\u5206\u56fe\u5de6\u4fa7\u70b9\u5df2\u8bbf\u95ee\u4e14\u53f3\u4fa7\u70b9\u672a\u8bbf\u95ee\u7684\u70b9\u7ec4\u6210\uff09\u3002\uff08\u5f15\u81ea [CTSC2008]\u796d\u7940 Piwry \u7684\u9898\u89e3\uff09\n\n\n\u8bc1\u660e\u53ef\u4ee5\u770b[CTSC2008]\u796d\u7940\u90a3\u9053\u9898\uff0c\u5728\u6b64\u4e0d\u8fc7\u591a\u8d58\u8ff0\u3002\n\n\n\u6700\u540e\u7b54\u6848\u5c31\u662f DAG \u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\n## \u6ce8\u610f\u4e8b\u9879\n\u672c\u9898\u7a7a\u95f4\u5361\u5f97\u8f83\u7d27\uff0c\u6700\u597d\u5728\u5efa Fail \u6811\u7684\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u904d\u5386\uff0c\u4e0d\u8981\u5b58\u8fb9\u518d\u904d\u5386\u4e00\u6b21\uff0c\u4e14\u9012\u5f52\u53ef\u80fd\u7206\u6808\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define PB push_back\n#define FOR(i,a,b) for(register int i=a;i<=b;i++)\n#define ROF(i,b,a) for(register int i=b;i>=a;i--)\n#define REP(i,x) for(int i=adj[x];i;i=e[i].next)\nusing namespace std;\n\nstruct edge{int to,next;};\nstruct node{int pon,x;};\n\nconst int N=10000011,N1=761;\nint n,len,top,tot,ccnt,ans,adj[N1],vis[2*N1],M[2*N1],G[N1][N1];\nbool book[2*N1];\nedge e[N1*N1];\nchar s[N];\n\nvoid creat(int x,int y){e[++tot].to=y,e[tot].next=adj[x];adj[x]=tot;}\nstruct ACAM{\n\tint cnt,ch[N][2],fail[N],las[N];\n\tshort int pos[N];\n\tvector<short int>T[N];\n\tvoid Ins(int x){\n\t\tcin>>s+1;\n\t\tlen=strlen(s+1);\n\t\tint p=0;\n\t\tFOR(i,1,len){int t=s[i]-'a';if(!ch[p][t])ch[p][t]=++cnt;p=ch[p][t];T[p].PB(x);}\n\t\tpos[p]=x;\n\t}\n\tvoid build(){\n\t\tqueue<int>q;\n\t\tFOR(i,0,1)if(ch[0][i])q.push(ch[0][i]);\t\n\t\twhile(!q.empty()){//\u5efa\u6811\u540c\u65f6\u904d\u5386fail\u6811 \n\t\t\tint tp=q.front();q.pop();\t\n\t\t\t\n\t\t\tlas[tp]=las[fail[tp]];\n\t\t\tif(pos[tp]){G[las[tp]][pos[tp]]=1,las[tp]=pos[tp];for(int t:T[tp])G[las[tp]][t]=1;}\n\t\t\telse if(las[tp])for(int t:T[tp])G[las[tp]][t]=1;\n\t\t\t\n\t\t\tFOR(i,0,1){\n\t\t\t\tint t=ch[tp][i];\n\t\t\t\tif(t)fail[t]=ch[fail[tp]][i],q.push(t);\n\t\t\t\telse ch[tp][i]=ch[fail[tp]][i];\n\t\t\t}\n\t\t}\n\t\tFOR(i,1,n)G[i][i]=0;//\u6ce8\u610f\u81ea\u5df1\u4e0d\u80fd\u5411\u81ea\u5df1\u8fde\u8fb9 \n\t\tFOR(k,1,n)FOR(i,1,n)FOR(j,1,n)G[i][j]|=(G[i][k]&G[k][j]);//\u6c42\u4f20\u9012\u95ed\u5305 \n\t\tFOR(i,1,n)FOR(j,1,n)if(G[i][j])creat(i,j+n);\n\t}\n};\n\nACAM AC;\n\nbool match(int x,int now){//\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d \n\tREP(i,x){\n\t\tint t=e[i].to;\n\t\tif(vis[t]==now)continue;vis[t]=now;\n\t\tif(!M[t]||match(M[t],now)){M[x]=t,M[t]=x;return 1;}\n\t}\n\treturn 0;\n}\nvoid dfs(int x){//\u6807\u8bb0\u4e8c\u5206\u56fe\u4e2d\u70b9 \n\tbook[x]=1;\n\tREP(i,x){\n\t\tint t=e[i].to;\n\t\tif(!book[t]){book[t]=1;if(M[t])dfs(M[t]);}\t\n\t}\n}\n\nint main(){\n\tcin>>n;\n\tFOR(i,1,n)AC.Ins(i);\n\tAC.build();\t\n\t\n\tans=n;\n\tFOR(i,1,n)if(match(i,++ccnt))ans--;\n\tcout<<ans<<'\\n';\n\tFOR(i,1,n)if((!M[i])&&(!book[i]))dfs(i);\n\tFOR(i,1,n)if(book[i]&&(!book[n+i]))cout<<i<<' ';\n\t\n\treturn 0;\n} \n/*\n5\nabab\naba\naabab\nababb\nbab\n*/ \n```\n\n\n",
        "postTime": 1631878172,
        "uid": 99748,
        "name": "GuanYunchang_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF590E Birthday"
    },
    {
        "content": "[CF590E Birthday](https://www.luogu.com.cn/problem/CF590E)\n\n\u5efa\u51fa$AC$\u81ea\u52a8\u673a$.$\n\n\u8003\u8651\u5efa\u51fa\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u5305\u542b\u5173\u7cfb\u56fe$.$\n\n\u56e0\u4e3a$\\sum\\limits_{i=1}^n |s_i| \\leq  10^7,$\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u5728$AC$\u81ea\u52a8\u673a\u4e0a\u66b4\u529b\u8df3$,$\u800c\u662f\u5728$AC$\u81ea\u52a8\u673a\u4e0a\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4$fail$\u6811\u4e0a\u7684\u4e0a\u4e00\u4e2a\u70b9$,$\u7136\u540e\u66b4\u529b\u8df3$trie$\u6811\u4e0a\u7684\u7236\u4eb2\u76f4\u5230\u8df3\u5230\u4e00\u4e2a\u5b58\u5728\u7684\u5b57\u7b26\u4e32\u5373\u53ef$.$\n\n\u7136\u540e$O(n^3)$\u628a\u591a\u4f59\u7684\u8fb9\u5efa\u51fa\u6765$,$\u76f4\u63a5\u6c42\u6700\u957f\u53cd\u94fe\u65b9\u6848\u5373\u53ef$.$\n\n\u6700\u957f\u53cd\u94fe\u65b9\u6848\u600e\u4e48\u6c42$?$\n\n\u5efa\u51fa\u62c6\u70b9\u4e8c\u5206\u56fe\u5e76\u6c42\u51fa\u5176\u6700\u5927\u5339\u914d$.$\n\n\u8003\u8651\u6c42\u51fa\u62c6\u70b9\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6$,$\u5177\u4f53\u64cd\u4f5c\u662f$:$\n\n\u4ece\u6bcf\u4e2a\u6ca1\u6709\u5339\u914d\u7684\u5de6\u90e8\u70b9\u5f00\u59cb$dfs,$\n\n\u5de6->\u53f3\u7684\u8fb9\u53ea\u8d70\u6ca1\u6709\u5339\u914d\u7684\u8fb9$,$\n\n\u53f3->\u5de6\u7684\u8fb9\u53ea\u8d70\u5339\u914d\u7684\u8fb9$,$\n\n\u7136\u540e**\u6240\u6709$dfs$\u5230\u7684\u5de6\u90e8\u70b9\u548c\u672a$dfs$\u5230\u7684\u53f3\u90e8\u70b9**\u5c31\u7ec4\u6210\u4e86\u6700\u5927\u72ec\u7acb\u96c6$.$\n\n\u7136\u540e$,$\u5de6\u53f3\u90fd\u5728\u6700\u5927\u72ec\u7acb\u96c6\u91cc\u7684\u70b9$i$\u5c31\u5728\u6700\u957f\u53cd\u94fe\u91cc$.$\n\n$O(n^3+\\sum\\limits_{i=1}^n |s_i|).$\n\n\n\u4ee3\u7801$:$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename T> void read(T &x){\n\tx = 0; int f = 1; char ch = getchar();\n\twhile (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}\n\twhile (isdigit(ch)) {x = x * 10 + ch - '0'; ch = getchar();}\n\tx *= f;\n}\ninline void write(int x){if (x > 9) write(x/10); putchar(x%10+'0'); }\n\nconst int V = 10000005,N = 760;\n\nint n; bool G[N][N];\n\nchar s[V];\nstruct Trie{\n\tint ch[V][2],id[V],cnt,pos[N],fa[V];\n\tinline void Insert(char *s,int n,int Id){\n\t\tint now = 1,i,c;\n\t\tfor (i = 0; i < n; ++i,now = ch[now][c])\n\t\t\tif (!ch[now][c=s[i]-'a']){ ch[now][c] = ++cnt; fa[cnt] = now; }\n\t\tid[now] = Id; pos[Id] = now;\n\t}\n\tqueue<int>q; int fail[V];\n\tinline void buildfail(){\n\t\tint x; fail[1] = 1;\n\t\tif (ch[1][0]) fail[ch[1][0]] = 1,q.push(ch[1][0]); else ch[1][0] = 1;\n\t\tif (ch[1][1]) fail[ch[1][1]] = 1,q.push(ch[1][1]); else ch[1][1] = 1;\n\t\twhile (!q.empty()){\n\t\t\tx = q.front(),q.pop();\n\t\t\tif (ch[x][0]) fail[ch[x][0]] = ch[fail[x]][0],q.push(ch[x][0]); else ch[x][0] = ch[fail[x]][0];\n\t\t\tif (ch[x][1]) fail[ch[x][1]] = ch[fail[x]][1],q.push(ch[x][1]); else ch[x][1] = ch[fail[x]][1];\n\t\t}\n\t}\n\tint tfa[V];\n\tinline int Find(int x){ return x == tfa[x] ? x : (tfa[x] = Find(tfa[x])); }\n\tinline void buildtrans(){\n\t\tint i,x;\n\t\tfor (i = 1; i <= cnt; ++i) tfa[i] = id[i] ? i : fail[i];\n\t\tfor (i = 1; i <= n; ++i){\n\t\t\tx = pos[i];\n\t\t\tif (id[Find(fail[x])]) G[i][id[Find(fail[x])]] = 1; \n\t\t\tx = fa[pos[i]];\n\t\t\twhile (x){\n\t\t\t\tif (id[x]){ G[i][id[x]] = 1; break; }\n\t\t\t\tif (id[Find(x)]) G[i][id[Find(x)]] = 1; \n\t\t\t\tx = fa[x];\n\t\t\t}\n\t\t}\n\t}\n}T;\n\nint match[N];\nint match2[N]; \nbool vis[N];\ninline int Find(int x){\n\tif (vis[x]) return 0; vis[x] = 1;\n\tfor (int i = 1; i <= n; ++i) if (G[x][i] && (!match[i] || Find(match[i]))){\n\t\tmatch[i] = x; return 1;\n\t}\n\treturn 0;\n}\nbool vis1[N],vis2[N];\ninline void dfs(int x){\n\tif (vis1[x]) return; vis1[x] = 1; \n\tfor (int i = 1; i <= n; ++i) if (G[x][i] && match2[x] != i && !vis2[i]){\n\t\tvis2[i] = 1; if (match[i]) dfs(match[i]);\n\t} \n}\n\nint ans[N],lans;\nint main(){\n\tregister int i,j,k;\n\tscanf(\"%d\",&n);\n\tfor (T.cnt = i = 1; i <= n; ++i) scanf(\"%s\",s),T.Insert(s,strlen(s),i); \n\tT.buildfail(); T.buildtrans();\n\tfor (k = 1; k <= n; ++k) for (i = 1; i <= n; ++i) for (j = 1; j <= n; ++j) G[i][j] |= G[i][k] && G[k][j];\n\tfor (i = 1; i <= n; ++i) memset(vis,0,n+1),Find(i);\n\tfor (i = 1; i <= n; ++i) if (match[i]) match2[match[i]] = i;\n\tfor (i = 1; i <= n; ++i) if (!match2[i]) dfs(i);\n\tfor (i = 1; i <= n; ++i) if (vis1[i] && !vis2[i]) ans[++lans] = i;\n\tprintf(\"%d\\n\",lans);\n\tfor (i = 1; i <= lans; ++i) printf(\"%d \",ans[i]);\n\tputs(\"\");\n\treturn 0;\n}\n```\n",
        "postTime": 1596283593,
        "uid": 52518,
        "name": "s_r_f",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF590E \u3010Birthday\u3011"
    },
    {
        "content": "### [\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/CF590E)\n\n## Update:\u662f\u6700\u5c0f\u94fe\u8986\u76d6\u800c\u4e0d\u662f\u6700\u5c0f\u5272\n### \u6ce8\uff1a\u4e0b\u6587\u7684is_end[x]\u90fd\u4ee3\u8868x\u8282\u70b9\u662f\u54ea\u4e2a\u70b9\u7684\u7ec8\u6b62\u8282\u70b9\uff0c\u4e0d\u662f\u5219\u4e3a0\u3002\u6700\u597d\u5c06\u6b63\u6587\u548c\u5173\u4e8e\u5176\u4f59\u7ec6\u8282\u540c\u65f6\u98df\u7528\uff0c\u6548\u679c\u66f4\u4f73\u3002\n\n\u9898\u76ee\u5927\u610f $:$\u53d6\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u96c6\u5408\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u5b57\u7b26\u4e32A,B,A\u4e0d\u662fB\u7684\u5b50\u4e32,B\u4e0d\u662fA\u7684\u5b50\u4e32 \uff08\u4f8b\u5982aa,aaa ,aa\u5c31\u662faaa\u7684\u5b50\u4e32\uff0c\u5219\u4e0d\u80fd\u540c\u65f6\u5728\u9009\u4e2d\u7684\u96c6\u5408\u4e2d\uff09\uff0c\u4e14\u8981\u6c42\u96c6\u5408\u5143\u7d20\u6700\u5927\uff0c\u5e76\u7ed9\u51fa\u4e00\u79cd\u65b9\u6848\u3002\n\n\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u7684\u662f\u5904\u7406\u51fa\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5305\u542b\u54ea\u4e9b\u5b57\u7b26\u4e32\uff0c\u6216\u8005\u88ab\u54ea\u4e9b\u5305\u542b\uff0c\u5305\u542b\u6216\u88ab\u5305\u542b\u7684\u5c31\u4e0d\u80fd\u548c\u8fd9\u4e2a\u540c\u65f6\u9009\uff0c\u7136\u540e\u5c31\u50cf\u6700\u5c0f\u5272\u4e00\u6837\u8fde\u8fb9\uff0c\u8dd1\u7f51\u7edc\u6d41\u5c31\u597d\u4e86\u3002\n\n**\u5177\u4f53\u5b9e\u73b0**\uff1a\u8bfb\u5165\u65f6\uff0c\u5c06\u6bcf\u4e2a\u6570\u5efa\u5230Tire\u6811\u4e0a\uff0c\u90a3\u4e48\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u5b9e\u9645\u4e0a\u5c31\u662f\u4ee3\u8868\u4e86\u4e00\u4e2a\u524d\u7f00\uff0c\u7136\u540e\u8dd1AC\u81ea\u52a8\u673a\uff0c\u5f97\u5230fail\u6570\u7ec4\uff0c\u5c31\u662f\u8bb0\u5f55\u4efb\u610f\u4e00\u4e2a\u524d\u7f00\u7684\u6700\u957f\u540e\u7f00\u7684\u8282\u70b9\uff0c\u8fd9\u6837\u518d\u5c06\u6bcf\u4e2a\u4e32\u5728Tire\u6811\u4e0a\u8dd1\u4e00\u904d\uff0c\u4e0d\u505c\u8df3fail\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u67d0\u4e2a\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c\u8fde\u4e00\u6761\u8fb9\uff0c\u6700\u540e\u8dd1\u6700\u5927\u6d41\u5373\u53ef\uff08\u5982\u679c\u4e0d\u662f\u7528\u7684\u5308\u7259\u5229\uff0c\u8fd8\u8981\u6309\u6700\u5c0f\u5272\u7684\u65b9\u5f0f\u62c6\u70b9\uff0c\u8fde\u8fb9\uff09\n\n**\u7136\u800c**\uff1a\u56e0\u4e3aTire\u6811\u4e0a\u6700\u574f\u6709$M$\u4e2a\u8282\u70b9\uff08$M<=1e7$\uff09\uff0c\u7136\u540e\u6700\u574f\u6bcf\u4e2a\u8282\u70b9\u53ef\u80fd\u8df3fail\u8981\u8df3n\u6b21\uff08n<=750,\u5373$s_{i}$\u4e32\u662f$i$\u4e2a$a$\uff08\u6216$b$\uff09\uff09\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(M*n)$\uff0c\u8fd9\u80af\u5b9a\u8fc7\u4e0d\u4e86\u5566\u3002\n\n**\u4f18\u5316**\uff1a\u4e0d\u96be\u60f3\u5230\uff0c\u5982\u679cA\u662fB\u7684\u5b50\u4e32\uff0c\u5219\u5982\u679cC\u662fA\u7684\u5b50\u4e32\uff0c\u90a3\u4e48C\u4e5f\u662fB\u7684\u5b50\u4e32\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u8bb0\u5f55\u4e0bfail\u8df3\u7684\u6700\u8fd1\u7684\u4e00\u4e2ais_end\u4e0d\u4e3a0\u7684\u4e0d\u5c31\u597d\u4e86\uff01\u8dd1\u5b8c\u6240\u6709\u4e32\u540e\uff0c\u518d\u7528floyd\u5c06\u6240\u6709\u5173\u7cfb\u4f20\u9012\u4e00\u4e0b\uff08\u8bf7\u81ea\u884c\u8111\u8865\u4e00\u4e0b\uff09\uff0c\u6211\u5c31\u4e0d\u7528\u6bcf\u4e2a\u8282\u70b9\u8df3n\u6b21\uff0c\u6700\u574f\u8df31\u6b21\uff0c\u52a0\u4e0a\u7f51\u7edc\u6d41Dinic\u590d\u6742\u5ea6\uff0c\u603b\u590d\u6742\u5ea6$O(M+n^{2}*m)$(M\u4e3aTirs\u6811\u4e0a\u8282\u70b9\u6570<=1e7,n\u4e3a\u4e32\u7684\u4e2a\u6570\uff0cm\u4e3a\u8fb9\u6570)\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u6109\u5feb\u7684A\u4e86\u6b64\u9898\n\n**\u5173\u4e8e\u5176\u4f59\u7ec6\u8282**\uff1a\u4e0a\u9762\u8bb2\u7684\u90fd\u53ea\u662f\u9898\u76ee\u601d\u8def\uff0c\u5982\u679c\u6709\u7591\u60d1\u53ef\u4ee5\u8fb9\u770b\u4e0a\u9762\u8fb9\u770b\u8fd9\u91cc.\n\n1. \u6700\u540e\u5199\u7684\u65f6\u5019\u5176\u5b9e\u5e76\u4e0d\u7528\u627e\u5305\u542b\u81ea\u5df1\u7684\u5b57\u7b26\u4e32\uff0c\u53ea\u7528\u627e\u81ea\u5df1\u5305\u542b\u54ea\u4e9b\u4e32\u3002\u56e0\u4e3a\u81ea\u5df1\u88ab\u5305\u542b\u4e8e\u7684\u4e32\u4f1a\u8003\u8651\u5230\u8fd9\u4e2a\u4e32\uff0c\u90a3\u4e48\u6240\u6709\u60c5\u51b5\u90fd\u88ab\u8003\u8651\u5230\u4e86\uff0c\u4e5f\u5c31\u53ea\u9700\u8981\u627e\u81ea\u5df1\u5305\u542b\u7684\u4e32\u3002\n2. \u5173\u4e8e\u90a3\u4e2afloyd\u5c06\u5173\u7cfb\u4f20\u9012:\u5b9e\u9645\u4e0a\u4f60\u53ef\u4ee5\u53d1\u73b0\u6700\u540e\u56fe\u4e0a\u4f1a\u8fde\u51fa\u5f88\u591a\u94fe\uff0c\u539f\u9898\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u6bcf\u6761\u94fe\u4e0a\u53ea\u80fd\u9009\u4e00\u4e2a\u70b9\uff08\u5355\u5411\u7684\uff09\uff0c\u90a3\u4e48\u53ef\u4ee5\u7406\u89e3\u4e3ai\u548cj\u80fd\u4e0d\u80fd\u8fde\u901a,\u80fd\u8fde\u901a\uff0c\u8bf4\u660e\u4e0d\u80fd\u540c\u65f6\u9009,\u90a3\u4e48floyd\u6c42\u51fa\u4e86\u524dn\u4e2a\u70b9\u7684\u8fde\u901a\u6027\uff08floyd\u53ef\u4ee5\u7406\u89e3\u4e3a\u5916\u5c42k,\u5c31\u4ee3\u8868\u662f\u524dk\u4e2a\u70b9\u7684\u8fde\u901a\u6027\u5173\u7cfb\u548c\u51fa\u793a\u7ed9\u5b9a\u7684\u8fde\u901a\u6027\u5173\u7cfb\uff0c\u5982\u679c\u505a\u8fc7\u7c7b\u4f3c\u7684\u9898\uff0c\u5e94\u8be5\u5f88\u597d\u7406\u89e3\uff09\n3. \u5b58\u5b57\u7b26\u4e32\u65f6\uff0c\u7528vector\u6216\u8005\u6570\u7ec4\u5b58\uff08\u8bb0\u6bcf\u4e2a\u4e32\u521d\u59cb\u4f4d\u7f6e\uff0c\u7ed3\u675f\u4f4d\u7f6e\uff09\u5176\u5b9e\u901f\u5ea6\u5dee\u522b\u5e76\u4e0d\u5927\uff0c\u770b\u4e2a\u4eba\u4e60\u60ef\n4. \u5904\u7406\u6700\u8fd1\u7684\u4e00\u4e2ais_end\u4e0d\u4e3a0\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u4ee3\u7801\u7684get_pre\u51fd\u6570\u548cdfs\u51fd\u6570\n5. \u5047\u8bbe\u5904\u7406\u5230now\u8fd9\u4e2a\u8282\u70b9\uff0c\u8981\u8003\u8651is_end[now]\u662f\u5426\u4e3a0\uff0c\u56e0\u4e3a\u4e4b\u524d\u5904\u7406\u7684is_end\u4e0d\u80fd\u662f\u81ea\u5df1\uff0c\u5426\u5219\u5982\u679c\u662f\u5355\u8bcd\u672b\u5c3e\uff0c\u8fd9\u6761\u94fe\u5c31\u7ec8\u6b62\u4e86\uff0c\u5c31\u4f1a\u4e00\u76f4\u8df3\u81ea\u5df1...\u6240\u4ee5\u8981\u7a0d\u52a0\u5904\u7406\uff0c\u8fd8\u8981\u5224\u65adis_end\u662f\u4e0d\u662f\u5c31\u662f\u5f53\u524d\u5b57\u7b26\u4e32\u7f16\u53f7\uff0c\u5982\u679c\u662f\u90a3\u8981\u518d\u8df3\u4e00\u6b21\uff0c\u5426\u5219\u94fe\u4e5f\u65ad\u4e86\uff0c\u5177\u4f53\u8bf7\u770b\u4ee3\u7801\n6. \u6b64\u9898\u53ef\u4ee5\u7528\u5308\u7259\u5229\u7b97\u6cd5\uff0cDinic,ISAP,EK\uff0c\u6700\u540e\u6c42\u65b9\u6848\u7684\u8bdd\uff0c\u53ef\u4ee5\u53c2\u8003\u4e00\u4e9b\u5927\u795e\u7684\u8bba\u6587\uff0c\u6211\u5e76\u4e0d\u662f\u5f88\u61c2\uff0c\u4e5f\u53ea\u662f\u5957\u7528\u522b\u4eba\u7684\u5224\u65ad\u65b9\u6cd5\u3002\u5982\u679c\u6709\u4eba\u6709\u597d\u7684\u89e3\u91ca\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u63d0\u51fa\u3002\n\n\n### \u5982\u679c\u8fd8\u6709\u4ec0\u4e48\u4e0d\u61c2\u7684\uff0c\u6216\u8005\u662f\u6211\u54ea\u91cc\u5199\u9519\u4e86\uff0c\u8bf7\u63d0\u51fa\n\u6700\u540e\u4e0a\u4ee3\u7801\uff08\u56e0\u4e3a\u6211\u7528\u7684Dinic,\u6240\u4ee5\u6211\u4e0d\u662f\u6700\u5feb\u7684\uff09\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <queue>\nusing namespace std;\nconst int N=10000007,M=760;\nchar s[N];\nint cnt,ch[N][2];\nint is_end[N];\nint S[N],st[M],en[M];\ninline void insert(int x){\n    int len=strlen(s+1),now=1;\n    st[x]=en[x-1]+1;en[x]=st[x]+len-1;\n    for(int i=1;i<=len;++i){\n        int u=s[i]-'a';\n        S[++S[0]]=u;\n        if(!ch[now][u])ch[now][u]=++cnt;\n        now=ch[now][u];\n    }\n    is_end[now]=x;\n}\nint fail[N];\nqueue<int>q;\ninline void get_nxt(){\n    for(int i=0;i<2;++i)ch[0][i]=1;\n    fail[1]=0;\n    q.push(1);\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        for(int i=0;i<2;++i){\n            int u=ch[x][i];\n            if(!u)ch[x][i]=ch[fail[x]][i];\n            else {\n                int p=fail[x];\n                q.push(u);\n                fail[u]=ch[p][i];\n            }\n        }\n    }\n}\nint d[M<<1],nxt[1000000],to[1000000],flow[1000000],tot,pre[M<<1],qd,zd;\ninline void add(int a,int b,int c){\n    to[++tot]=b;nxt[tot]=d[a];d[a]=tot;flow[tot]=c;\n}\ninline void ins(int a,int b,int c){\n    add(a,b,c);add(b,a,0);\n}\nconst int inf=(1<<30);\nint dep[M<<1];\nint n,cur[M<<1];\ninline bool spfa(){\n    memset(dep,0x7f,sizeof(dep));\n    memcpy(cur,d,sizeof(cur));\n    q.push(qd);\n    dep[qd]=1;\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        for(int i=d[x];i!=-1;i=nxt[i]){\n            int u=to[i];\n            if(dep[u]>inf&&flow[i]){\n                dep[u]=dep[x]+1;\n                q.push(u);\n            }\n        }\n    }\n    return dep[zd]<inf;\n}\nint son[N];\ninline int dfs(int x){\n    if(!x||x==1)return -1;\n    if(is_end[x])return x;\n    if(son[x])return son[x];\n    return son[x]=dfs(fail[x]);\n}\nbool vis[N];\ninline void get_pre(){\n    q.push(1);\n    vis[1]=1;\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        if(!son[x])son[x]=dfs(fail[x]);\n        for(int i=0;i<2;++i){\n            int u=ch[x][i];\n            if(!vis[u]){\n                vis[u]=1;q.push(u);\n            }\n        }\n    }\n}\nint dist[M][M];\ninline void bfs(int x){\n    int now=1;\n    for(int i=st[x];i<=en[x];++i){\n    \tint u=S[i];\n    \tnow=ch[now][u];\n    \tint p=is_end[now]?now:son[now];\n    \twhile(p!=-1&&is_end[p]==x){\n    \t\tp=son[p];\n        }\n    \tif(p!=-1){\n    \t\tdist[x][is_end[p]]=1;\n        }\n    }\n}\ninline int get(int now,int end,int limit){\n    if(now==end||!limit)return limit;\n    int fl=0,f;\n    for(int i=cur[now];i!=-1;i=nxt[i]){\n        int u=to[i];\n        cur[now]=i;\n        if(dep[u]==dep[now]+1&&(f=(get(u,end,min(limit,flow[i]))))){\n            limit-=f;\n            fl+=f;\n            flow[i]-=f;\n            flow[i^1]+=f;\n            if(!limit)break;\n        }\n    }\n    return fl;\n}\ninline int Dinic(){\n    int maxflow=0;\n    while(spfa()){\n        maxflow+=get(qd,zd,inf);\n    }\n    return maxflow;\n}\nint main(){\n    memset(d,-1,sizeof(d));tot=-1;\n    cnt=1;\n    scanf(\"%d\",&n);\n    qd=0;zd=(n<<1)|1;\n    for(int i=1;i<=n;++i)ins(qd,i,1);\n    for(int i=1;i<=n;++i)ins(n+i,zd,1);\n    for(int i=1;i<=n;++i)scanf(\"%s\",s+1),insert(i);\n    get_nxt();get_pre();\n    for(int i=1;i<=n;++i)bfs(i);\n    for(int k=1;k<=n;++k){\n        for(int i=1;i<=n;++i){\n            if(i==k)continue;\n            for(int j=1;j<=n;++j){\n                if(j==i||j==k)continue;\n                dist[i][j]|=(dist[i][k]&dist[k][j]);\n            }\n        }\n    }\n    for(int i=1;i<=n;++i){\n        for(int j=1;j<=n;++j){\n            if(i==j||!dist[i][j])continue;\n            ins(i,j+n,1);\n        }\n    }\n    printf(\"\u590d\u5236\u9898\u89e3\u4ee3\u7801\u540e\u679c\u81ea\u8d1f\\n\");\n    printf(\"%d\\n\",n-Dinic());\n    for(int i=1;i<=n;++i){\n        if(dep[i]<inf&&dep[i+n]>inf){\n            printf(\"%d \",i);\n        }\n    }\n    printf(\"\u8bf7\u81ea\u884c\u5199\u51fa\u6b64\u9898\\n\"); \n    return 0;\n}\n\n```\n### \u5927\u5e74\u521d\u4e8c\u4f11\u95f2\u65f6\u523b\u5199\u9898\u89e3\u7684\u611f\u89c9\u771f\u597d",
        "postTime": 1549429587,
        "uid": 54113,
        "name": "ecnerwaIa",
        "ccfLevel": 0,
        "title": "Birthday"
    },
    {
        "content": "\u5b89\u5229\u4e2a\u4eba blog\uff1ahttps://www.cnblogs.com/ET2006/\n\n[\u9898\u9762\u4f20\u9001\u95e8](https://codeforces.ml/contest/590/problem/E)\n\n~~AC \u81ea\u52a8\u673a\u6709\u65f6\u53ea\u662f\u8f85\u52a9\u5efa\u56fe\u7684\u5de5\u5177\uff0c\u771f\u7684~~\n\n\u9996\u5148\u770b\u5230\u591a\u4e32\u95ee\u9898\uff0c\u679c\u65ad\u5efa\u51fa AC \u81ea\u52a8\u673a\u3002\u8bbe $m=\\sum|s_i|$\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u5b50\u4e32\u7684\u5305\u542b\u5173\u7cfb\u6784\u6210\u4e86\u4e00\u4e2a\u504f\u5e8f\u96c6\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u8f6c\u5316\u4e3a\u56fe\u8bba\uff0c\u82e5 $s_j$ \u5305\u542b\u4e8e $s_i$ \u5219\u8fde\u4e00\u6761 $i\\to j$ \u7684\u8fb9\u3002\u663e\u7136\u5229\u7528 AC \u81ea\u52a8\u673a\u53ef\u5b9e\u73b0 $\\mathcal O(m)$ \u5efa\u56fe\u3002\n\n\u9898\u76ee\u8981\u6211\u4eec\u6c42\u7684\u5b9e\u9645\u4e0a\u662f\u8be5\u504f\u5e8f\u96c6\u7684\u6700\u5927\u53cd\u94fe\u5927\u5c0f\uff0c\u6839\u636e Dilworth \u5b9a\u7406\u53ef\u5c06\u5176\u8f6c\u5316\u4e3a\u6700\u5c0f\u53ef\u76f8\u4ea4\u8986\u76d6\u7684\u5927\u5c0f\u3002\n\n\u800c\u6700\u5c0f\u53ef\u76f8\u4ea4\u94fe\u8986\u76d6\u7684\u5927\u5c0f\u53c8\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u95ed\u5305\u8f6c\u5316\u4e3a\u6700\u5c0f\u4e0d\u53ef\u76f8\u4ea4\u94fe\u8986\u76d6\u7684\u95ee\u9898\uff0c\u6700\u5c0f\u4e0d\u53ef\u76f8\u4ea4\u95ee\u9898\u53c8\u53ef\u901a\u8fc7\u62c6\u70b9\u4e8c\u5206\u56fe\u6c42\u51fa\u3002\u6545\u7b2c\u4e00\u95ee\u7b54\u6848\u5c31\u662f $n-$ \u62c6\u70b9\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u8fd9\u4e2a\u60f3\u600e\u4e48\u641e\u600e\u4e48\u641e\uff0c\u7f51\u7edc\u6d41\u3001\u5308\u7259\u5229\u7686\u53ef\uff08\u7136\u9e45 wtcl \u4e0d\u4f1a\u5308\u7259\u5229\u53ea\u597d\u8dd1\u7f51\u7edc\u6d41\u4e86\uff09\u3002\n\n\u81f3\u4e8e\u8f93\u51fa\u65b9\u6848\u2026\u2026\u8fd9\u4e2a\u561b\uff0c\u8003\u8651\u6211\u4eec\u5f53\u65f6\u6c42\u6700\u5c0f\u8fb9\u8986\u76d6\u662f\u5982\u4f55\u6784\u9020\u65b9\u6848\u7684\uff0c\u5c31\u4e00\u904d DFS \u6c42\u51fa\u6e90\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u90a3\u4e48\u6700\u5c0f\u8fb9\u8986\u76d6\u5c31\u662f\u4e8c\u5206\u56fe\u5de6\u90e8\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9 $+$ \u4e8c\u5206\u56fe\u53f3\u90e8\u80fd\u5230\u8fbe\u7684\u70b9\u3002\u6700\u5927\u72ec\u7acb\u96c6\u5c31\u6c42\u4e2a\u8865\u96c6\u5c31\u884c\u4e86\u3002\n\n \u503c\u5f97\u6ce8\u610f\u7684\u4e00\u70b9\u662f\u6b64\u9898 $m$ \u9ad8\u8fbe $10^7$\uff0c\u9012\u5f52\u663e\u7136\u4f1a\u7206\u6808\uff0c\u6545\u4e0d\u80fd\u901a\u8fc7\u5efa\u51fa fail \u6811\u5e76\u5728 fail \u6811\u4e0a\u4e00\u904d DFS \u5b9e\u73b0\u5efa\u56fe\u3002\u8003\u8651\u5728\u6c42 fail \u6570\u7ec4\u7684\u65f6\u5019\u518d\u8bb0\u5f55\u4e00\u4e2a $pos_i$ \u8868\u793a $i$ \u5728 fail \u6811\u7684\u7956\u5148\u4e2d\u79bb\u5b83\u6700\u8fd1\u7684\u662f\u67d0\u4e2a\u4e32\u7ed3\u5c3e\u4f4d\u7f6e\u7684\u8282\u70b9\uff0c\u5efa\u56fe\u7684\u65f6\u5019\u5c31\u679a\u4e3e\u5b57\u7b26\u4e32 $s_i$ \u5e76\u904d\u5386\u6839\u5230 $s_i$ \u7ed3\u5c3e\u4f4d\u7f6e\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\uff0c\u82e5\u53d1\u73b0\u67d0\u4e2a\u70b9\u7684 $pos$ \u503c\u975e\u96f6\u5c31\u8fde\u4e00\u6761 $i\\to pos_x$ \u7684\u8fb9\uff0c\u5982\u679c $fail_i$ \u7684 $pos$ \u503c\u975e\u96f6\u90a3\u4e5f\u8fde\u4e00\u6761 $i\\to pos_{fail_i}$ \u7684\u8fb9\uff0c\u518d $n^3$ \u6c42\u904d\u4f20\u9012\u95ed\u5305\u5373\u53ef\u5efa\u51fa\u56fe\u6765\uff0c\u6b63\u786e\u6027\u663e\u7136\uff0c\u5e76\u4e14\u5de7\u5999\u5730\u907f\u5f00\u4e86\u9012\u5f52\u7206\u6808\u7684\u95ee\u9898\u3002\n\n\u4ee3\u7801~~\uff08\u8363 \u81ba \u6700 \u52a3 \u89e3\uff09~~\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define fz(i,a,b) for(int i=a;i<=b;i++)\n#define fd(i,a,b) for(int i=a;i>=b;i--)\n#define ffe(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define fill0(a) memset(a,0,sizeof(a))\n#define fill1(a) memset(a,-1,sizeof(a))\n#define fillbig(a) memset(a,63,sizeof(a))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\ntemplate<typename T1,typename T2> void chkmin(T1 &x,T2 y){if(x>y) x=y;}\ntemplate<typename T1,typename T2> void chkmax(T1 &x,T2 y){if(x<y) x=y;}\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntemplate<typename T> void read(T &x){\n\tx=0;char c=getchar();T neg=1;\n\twhile(!isdigit(c)){if(c=='-') neg=-1;c=getchar();}\n\twhile(isdigit(c)) x=x*10+c-'0',c=getchar();\n\tx*=neg;\n}\nconst int MAXN=750;\nconst int MAXLEN=1e7;\nconst int MAXV=1502;\nconst int MAXE=1.5e6;\nconst int INF=0x3f3f3f3f;\nint n;string s[MAXN+5];\nint ch[MAXLEN+5][2],fail[MAXLEN+5],pos[MAXLEN+5],ncnt=0;\nbool d[MAXN+5][MAXN+5];\nvoid insert(string s,int id){\n\tint cur=0;\n\tfor(int i=0;i<s.size();i++){\n\t\tif(!ch[cur][s[i]-'a']) ch[cur][s[i]-'a']=++ncnt;\n\t\tcur=ch[cur][s[i]-'a'];\n\t} pos[cur]=id;\n}\nvoid getfail(){\n\tqueue<int> q;\n\tfor(int i=0;i<2;i++) if(ch[0][i]) q.push(ch[0][i]);\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=0;i<2;i++){\n\t\t\tif(ch[x][i]){\n\t\t\t\tfail[ch[x][i]]=ch[fail[x]][i];q.push(ch[x][i]);\n\t\t\t\tif(!pos[ch[x][i]]) pos[ch[x][i]]=pos[fail[ch[x][i]]]; \n\t\t\t} else ch[x][i]=ch[fail[x]][i];\n\t\t}\n\t}\n}\nint S=1501,T=1502;\nint hd[MAXV+5],to[MAXE+5],cap[MAXE+5],nxt[MAXE+5],ec=1; \nvoid adde(int u,int v,int f){\n\tto[++ec]=v;cap[ec]=f;nxt[ec]=hd[u];hd[u]=ec;\n\tto[++ec]=u;cap[ec]=0;nxt[ec]=hd[v];hd[v]=ec;\n}\nint dep[MAXV+5],now[MAXV+5];\nbool getdep(){\n\tmemset(dep,-1,sizeof(dep));dep[S]=0;\n\tqueue<int> q;q.push(S);now[S]=hd[S];\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();\n\t\tfor(int e=hd[x];e;e=nxt[e]){\n\t\t\tint y=to[e],z=cap[e];\n\t\t\tif(!~dep[y]&&z){dep[y]=dep[x]+1;now[y]=hd[y];q.push(y);}\n\t\t}\n\t} return ~dep[T];\n}\nint getflow(int x,int f){\n\tif(x==T) return f;int ret=0;\n\tfor(int &e=now[x];e;e=nxt[e]){\n\t\tint y=to[e],z=cap[e];\n\t\tif(z&&dep[y]==dep[x]+1){\n\t\t\tint w=getflow(y,min(f-ret,z));\n\t\t\tret+=w;cap[e]-=w;cap[e^1]+=w;\n\t\t\tif(f==ret) return ret;\n\t\t}\n\t} return ret;\n}\nint dinic(){\n\tint ret=0;\n\twhile(getdep()) ret+=getflow(S,INF);\n\treturn ret;\n}\nbool vis[MAXV+5];\nvoid dfs(int x){\n\tif(vis[x]) return;vis[x]=1;\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e],z=cap[e];\n\t\tif(z) dfs(y);\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) cin>>s[i],insert(s[i],i);\n\tgetfail();\n//\tfor(int i=1;i<=ncnt;i++) printf(\"%d\\n\",pos[i]);\n\tfor(int i=1;i<=n;i++){\n\t\tint cur=0;\n\t\tfor(int j=0;j<s[i].size();j++){\n\t\t\tif(pos[cur]) d[i][pos[cur]]=1;\n\t\t\tcur=ch[cur][s[i][j]-'a'];\n\t\t} if(pos[fail[cur]]) d[i][pos[fail[cur]]]=1;\n\t}\n\tfor(int k=1;k<=n;k++) for(int i=1;i<=n;i++) for(int j=1;j<=n;j++)\n\t\td[i][j]|=d[i][k]&d[k][j];\n\tfor(int i=1;i<=n;i++) for(int j=1;j<=n;j++){\n\t\tif(d[i][j]&&i!=j) adde(i,j+n,1);\n\t}\n\tfor(int i=1;i<=n;i++) adde(S,i,1),adde(i+n,T,1);\n\tprintf(\"%d\\n\",n-dinic());dfs(S);vector<int> ans;\n\tfor(int i=1;i<=n;i++) if(vis[i]&&!vis[i+n]) ans.pb(i);\n\tsort(ans.begin(),ans.end());ffe(it,ans) printf(\"%d \",*it);\n\treturn 0;\n}\n```",
        "postTime": 1613789443,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF590E\u3010Birthday\u3011"
    },
    {
        "content": " [$$ \\Large \\texttt{My Blog} $$](http://blog.flyinthesky.win/Codeforces590E/)\n\n------------\n\n\n\u9898\u610f\uff1a\u7ed9\u5b9a$n$\u4e2a\u5b57\u7b26\u4e32\uff0c\u6c42\u51fa\u6700\u5927\u7684\u96c6\u5408\u4f7f\u5f97\u6ca1\u6709\u4efb\u610f\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5305\u542b\u5173\u7cfb\u3002\n\n\u7b2c\u4e00\u9898Div1E...\n\n\u591a\u6a21\u5f0f\u4e32\u53ef\u4ee5\u60f3\u5230\u7528AC\u81ea\u52a8\u673a\uff0c\u7136\u540e**\u5305\u542b\u5173\u7cfb\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u504f\u5e8f\u5173\u7cfb**\uff0c\u90a3\u4e48\u9898\u610f\u5c31\u662f\u6c42\u6700\u957f\u53cd\u94fe\u3002\n\n\u6700\u957f\u53cd\u94fe\u7b49\u4e8e\u6700\u5c0f\u94fe\u8986\u76d6\uff0c\u4f20\u9012\u95ed\u5305\u540e\u4e8c\u5206\u56fe\u5339\u914d\u3002\u6ce8\u610f\u8f93\u51fa\u65b9\u6848\uff0c\u5373\u4e3a\u6700\u5c0f\u70b9\u8986\u76d6\u53d6\u53cd\uff0c\u5177\u4f53\u65b9\u6cd5\u53ef\u4ee5\u770b\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b\u4e0a\u7684\u505a\u6cd5\u4e5f\u53ef\u4ee5\u7ed3\u5408\u4ee3\u7801\u770b\u3002\n\n\u8f93\u51fa\u65b9\u6848\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u53c2\u8003[P4298](https://www.luogu.org/problemnew/show/P4298)\u7684\u505a\u6cd5\n\nAC\u81ea\u52a8\u673a\u6ce8\u610f\u8981\u6cbf\u7740`fail`\u6307\u9488\u627e\u5b50\u4e32\u5426\u5219\u4e0d\u80fd\u627e\u5168\uff0c\u5e76\u4e14\u627e\u5230\u6700\u8fd1\u7684\u5373\u53ef\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u4f20\u9012\u95ed\u5305\uff0c\u627e\u591a\u4e2a\u4f1aTLE\n\n```c++\n#include<cstdio> \n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<queue>\n#include<vector>\n#include<string>\n#define ms(i, j) memset(i, j, sizeof i)\n#define LL long long\n#define db double\n#define fir first\n#define sec second\n#define mp make_pair\nusing namespace std;\n\nnamespace flyinthesky {\n\n\tconst int MAXN = 750 + 5, MAXV = 10000000 + 5;\n\t\n\tint n, sz, G[MAXN][MAXN], ch[MAXV][2], id[MAXV], f[MAXV];\n\tchar s[MAXV];\n\tstring str[MAXN];\n\t\n\tvoid ins(int ith) {\n\t\tint now = 0, len = strlen(s);\n\t\tfor (int i = 0; i < len; ++i) {\n\t\t\tint c = s[i] - 'a';\n\t\t\tif (!ch[now][c]) ch[now][c] = ++sz;\n\t\t\tnow = ch[now][c];\n\t\t\tif (i == len - 1) id[now] = ith;\n\t\t}\n\t}\n\tvoid getFail() {\n\t\tqueue<int > q;\n\t\tf[0] = 0;\n\t\tfor (int c = 0; c < 2; ++c) {\n\t\t\tint v = ch[0][c];\n\t\t\tif (v) q.push(v), f[v] = 0;\n\t\t}\n\t\twhile (!q.empty()) {\n\t\t\tint u = q.front(); q.pop();\n\t\t\tfor (int c = 0; c < 2; ++c) {\n\t\t\t\tint v = ch[u][c];\n\t\t\t\tif (!ch[u][c]) {ch[u][c] = ch[f[u]][c]; continue ;}\n\t\t\t\tq.push(v);\n\t\t\t\tint j = f[u];\n\t\t\t\twhile (j && !ch[j][c]) j = f[j];\n\t\t\t\tf[v] = ch[j][c];\n\t\t\t\tif (!id[v]) id[v] = id[f[v]];\n\t\t\t}\n\t\t}\n\t}\n\tvoid find(int ith) {\n\t\tint now = 0;\n\t\tfor (int i = 0; i < (int)str[ith].length(); ++i) {\n\t\t\tint c = str[ith][i] - 'a';\n\t\t\tnow = ch[now][c];\n\t\t\tif (id[now]) G[ith][id[now]] = 1;\n\t\t\tif (id[f[now]]) G[ith][id[f[now]]] = 1;\n\t\t}\n\t}\n\t\n\tint vis[MAXN], lk[MAXN], to[MAXN], cnt;\n\t\n\tbool hungary(int u) {\n\t\tfor (int v = 1; v <= n; ++v) if (G[u][v]) {\n\t\t\tif (vis[v] != cnt) {\n\t\t\t\tvis[v] = cnt;\n\t\t\t\tif (!lk[v] || hungary(lk[v])) {\n\t\t\t\t\tlk[v] = u, to[u] = v;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tint mx[MAXN], my[MAXN];\n\tvoid dfs(int u) {\n\t\tif (mx[u]) return ;\n\t\tmx[u] = 1;\n\t\tfor (int v = 1; v <= n; ++v) if (G[u][v]) {\n\t\t\tif (!my[v]) my[v] = 1, dfs(lk[v]);\n\t\t}\n\t}\n\t\n    void clean() {\n    }\n    int solve() {\n\t\t\n    \tclean();\n    \tscanf(\"%d\", &n);\n    \tfor (int i = 1; i <= n; ++i) scanf(\"%s\", s), ins(i), str[i] = s;\n    \tgetFail();\n    \tfor (int i = 1; i <= n; ++i) find(i);\n\n\t\tfor (int k = 1; k <= n; ++k)\n\t\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= n; ++j) if (i != j && i != k && j != k)\n\t\t\tG[i][j] |= G[i][k] && G[k][j];\n\n\t\tfor (int i = 1; i <= n; ++i) G[i][i] = 0;\n\n\t\t//for (int i = 1; i <= n; ++i, putchar('\\n'))\n\t\t//for (int j = 1; j <= n; ++j) printf(\"%d \", G[i][j]); \n\n\t\tint ans = 0;\n\t\tfor (int i = 1; i <= n; ++i) ans += hungary(cnt = i);\n\t\t\n\t\tprintf(\"%d\\n\", n - ans);\n\t\t\n\t\tfor (int i = 1; i <= n; ++i) if (!to[i]) dfs(i);\n\t\tfor (int i = 1; i <= n; ++i) if (mx[i] && !my[i]) printf(\"%d \", i);\n\n        return 0;\n    } \n}\nint main() {\n\tflyinthesky::solve();\n    return 0;\n}\n\n```",
        "postTime": 1552190257,
        "uid": 12943,
        "name": "FlyInTheSky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF590E \u3010Birthday\u3011"
    },
    {
        "content": "\u8003\u8651 $n \\leq 750$\uff0c\u5c06\u5177\u6709\u5305\u542b\u5173\u7cfb\u7684\u5b57\u7b26\u4e32\u4e4b\u95f4\u8fde\u8fb9\u540e\u8be2\u95ee\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u5373\u53ef\u3002                       \n\n\u8003\u8651 $m = \\sum |S| \\leq 10 ^ 7$\uff0c\u5f97\u60f3\u5230\u4e00\u79cd\u6bd4\u8f83\u5feb\u7684\u65b9\u6cd5\u8fde\u8fb9\u3002            \n\n\u4f7f\u7528 AC \u81ea\u52a8\u673a\u4f18\u5316\u5efa\u56fe\uff0c\u5047\u8bbe\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u70b9\u5728 $p_i$\uff0c\u5c06\u6240\u6709 $p_i$ \u7f6e\u4e3a\u5173\u952e\u70b9\u540e\u538b\u7f29\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u538b\u7f29\u8def\u5f84\u505a\u5230 $O(m\\alpha(m))$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002               \n\n\u7531\u4e8e\u538b\u7f29\u6811\u6bd4\u8f83\u5c0f\uff0c\u6839\u636e AC \u81ea\u52a8\u673a\u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u7b2c $i$ \u4e2a\u5b57\u7b26\u96c6 $s_i$\uff0c\u5411\u7956\u5148\u4e2d\u6700\u8fd1\u7684\u4e00\u4e2a $p_x$ \u4ee5\u53ca $p_x$ \u4e0e $p_i$ \u4e4b\u95f4\u70b9 fail \u6307\u9488\u6700\u5148\u627e\u5230\u7684\u5b57\u7b26\u4e32\u8fde\u8fb9\uff0c\u6700\u540e\u4f20\u9012\u95ed\u5305\u5373\u53ef\u505a\u5230 $O(n ^ 3)$ \u5efa\u8fb9\uff0c\u4f7f\u7528 bitset \u53ef\u4ee5\u505a\u5230 $O(\\frac{n ^ 3}{w})$\u3002           \n\n\u6700\u540e\u5c31\u662f\u5728\u4e8c\u5206\u56fe\u4e0a\u6784\u9020\u6700\u5927\u72ec\u7acb\u96c6\u3002\u8003\u8651\u627e\u5230\u6700\u5927\u5339\u914d\uff0c\u5c06\u5de6\u8fb9\u672a\u88ab\u5339\u914d\u7684\u70b9\u90fd\u5148\u5047\u8bbe\u5728\u72ec\u7acb\u96c6\u5185\uff0c\u4f46\u6b64\u65f6\u672a\u5224\u65ad\u4e8c\u5206\u56fe\u53f3\u8fb9\u7684\u70b9\u662f\u5426\u5408\u6cd5\uff08\u56e0\u4e3a\u5de6\u53f3\u4e24\u8fb9\u70b9\u7684\u9009\u62e9\u610f\u4e49\u662f\u4e00\u6837\u7684\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5de6\u8fb9\u7684\u6bcf\u4e2a\u672a\u88ab\u5339\u914d\u7684\u70b9\u90fd\u62c9\u51fa\u53bb\u6309\u7167\u5de6\u5f80\u53f3\u6cbf\u672a\u5339\u914d\u8fb9\uff0c\u53f3\u5f80\u5de6\u6309\u5339\u914d\u8fb9\u7684\u987a\u5e8f dfs \u4e00\u904d\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u73b0\u5728\u53ef\u4ee5\u77e5\u9053\u5b83\u5728\u5de6/\u53f3\u56fe\u4e2d\u662f\u5426\u88ab\u4e8c\u6b21 dfs \u5230\u8fc7\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u5728\u5de6\u56fe\u4e2d\u88ab\u904d\u5386\u5230\u4e14\u5728\u53f3\u56fe\u4e2d\u672a\u88ab\u904d\u5386\u5230\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u5728\u6700\u5927\u72ec\u7acb\u96c6\u4e2d\u3002      \n\n\u56e0\u4e3a\u5339\u914d\u7684\u8fb9\u8868\u793a\u7740\u4e24\u8fb9\u7684\u70b9\u90fd\u4e0d\u80fd\u88ab\u9009\u62e9\uff0c\u800c\u672a\u5339\u914d\u7684\u8fb9\u5c31\u76f8\u5f53\u4e8e\u6ca1\u6709\u786e\u5b9a\u3002\u6240\u4ee5\u6309\u7167\u672a\u88ab\u5339\u914d\u7684\u8fb9\u8d70\u5c31\u76f8\u5f53\u4e8e\u786e\u5b9a\u4e86\u8d70\u51fa\u70b9\u4e3a\u9009\u62e9\u70b9\uff0c\u8d70\u5165\u70b9\u4e3a\u4e0d\u80fd\u9009\u62e9\u70b9\uff0c\u53c8\u7531\u4e8e\u8d70\u5165\u70b9\u4e0d\u80fd\u88ab\u9009\u62e9\u4e86\uff0c\u6240\u4ee5\u539f\u6765\u7684\u5339\u914d\u4f5c\u5e9f\uff0c\u53ef\u4ee5\u91cd\u65b0\u8003\u8651\u9009\u62e9\uff0c\u6240\u4ee5\u8981\u4ece\u53f3\u8fb9\u6309\u7167\u539f\u6765\u7684\u5339\u914d\u8fb9\u8d70\u56de\u5de6\u8fb9\u3002           \n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\frac{n^3}{w} + m\\alpha(m))$\u3002",
        "postTime": 1646664596,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF590E Birthday"
    }
]