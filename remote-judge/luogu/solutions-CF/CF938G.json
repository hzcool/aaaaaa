[
    {
        "content": "[$$\\large \\color{purple} My\\; Blog$$](https://www.cnblogs.com/p-b-p-b/p/10358109.html)\n\n----------\n\n\u5206\u6cbb\u7684\u9898\u76ee\uff0c\u6216\u8005\u8bf4\u5206\u6cbb\u7684\u601d\u60f3\uff0c\u662f\u975e\u5e38\u7075\u6d3b\u591a\u53d8\u7684\u3002\n\n~~\u6240\u4ee5\u5bf9\u6211\u8fd9\u79cd\u667a\u5546\u4f4e\u7684\u9009\u624b\u7279\u522b\u4e0d\u53cb\u597d~~\n\n\u8111\u5b50\u4e0d\u597d\u4f7f\u600e\u4e48\u529e\uff1f\u591a\u505a\u9898\u5427\u2026\u2026\n\n---------------\n\n## \u524d\u7f6e\u77e5\u8bc6\n\n\u7ebf\u6027\u57fa\u662f\u4f60\u5fc5\u987b\u4f1a\u7684\uff0c\u4e0d\u7136\u8fd9\u9898\u4e0d\u53ef\u505a\u3002\n\n\u63a8\u8350\u518d\u53bb\u770b\u770b\u6d1b\u8c37P4151\u3002\n\n--------\n\n## \u601d\u8def\n\n\u770b\u5230\u5f02\u6216\u6700\u77ed\u8def\uff0c\u663e\u7136\u7ebf\u6027\u57fa\u3002\n\n\u505a\u9898\u591a\u4e00\u4e9b\u7684\u540c\u5b66\u60f3\u5fc5\u5df2\u7ecf\u60f3\u5230\u4e86\u201c\u6d1b\u8c37P4151 [WC2011]\u6700\u5927XOR\u548c\u8def\u5f84\u201d\u4e86\u3002\n\n\u5148\u8003\u8651\u6ca1\u6709\u52a0\u8fb9\u5220\u8fb9\u7684\u505a\u6cd5\uff1a\n\n1. \u505a\u51fa\u539f\u56fe\u7684\u4efb\u610f\u4e00\u68f5\u751f\u6210\u6811\uff1b\n2. \u628a\u6bcf\u4e2a\u975e\u6811\u8fb9\u548c\u6811\u8fb9\u5f62\u6210\u7684\u73af\u4e22\u8fdb\u7ebf\u6027\u57fa\u91cc\uff1b\n3. \u8be2\u95ee\u65f6\u628a\u4e24\u70b9\u5728\u6811\u4e0a\u7684\u8def\u5f84\u5f02\u6216\u548c\u4e22\u8fdb\u7ebf\u6027\u57fa\u91cc\u6c42\u6700\u5c0f\u5f02\u6216\u548c\u3002\n\n\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\uff1f\u89c1\u6d1b\u8c37P4151\u9898\u89e3\u3002\n\n\u6709\u52a0\u8fb9\u5462\uff1f\n\n\u5176\u5b9e\u5dee\u4e0d\u4e86\u591a\u5c11\u2026\u2026\u52a0\u4e00\u6761\u8fb9\u5c31\u5f80\u7ebf\u6027\u57fa\u91cc\u4e22\u4e2a\u73af\u5c31\u597d\u4e86\u3002\n\n\u8fd8\u6709\u5220\u8fb9\u5462\uff1f\n\n\u6211\u4eec\u6309\u65f6\u95f4\u5206\u6cbb\uff0c\u7528\u7ebf\u6bb5\u6811\u5b58\u50a8\u6bcf\u4e00\u6bb5\u65b0\u52a0\u4e86\u54ea\u4e9b\u8fb9\u3002\n\n\u6bcf\u5230\u4e00\u4e2a\u70b9\uff0c\u628a\u8fb9\u90fd\u8fde\u4e0a\uff0c\u7136\u540e\u5206\u6cbb\u5de6\u53f3\u3002\u9000\u51fa\u65f6\u64a4\u9500\u5373\u53ef\u3002\n\n\u7136\u800c\u6b64\u65f6\u56fe\u53ef\u80fd\u4e0d\u8fde\u901a\uff0c\u8fde\u8fb9\u53ef\u80fd\u8fde\u4e86\u4e24\u68f5\u4e0d\u540c\u7684\u6811\uff0c\u6b64\u65f6\u9700\u8981\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u5b58\u50a8\u6811\u7684\u7ed3\u6784\u548c\u6bcf\u4e00\u4e2a\u70b9\u5230\u6839\u7684\u5f02\u6216\u548c\u3002\u7531\u4e8e\u5f02\u6216\u6709\u7740\u5f88\u597d\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e24\u70b9\u8fde\u8fb9\u6539\u4e3a\u4e24\u68f5\u6811\u7684\u6839\u8fde\u8fb9\uff0c\u800c\u7b54\u6848\u4e0d\u53d8\u3002\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86~\n\n-----------\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nnamespace my_std{\n\tusing namespace std;\n\t#define pii pair<int,int>\n\t#define fir first\n\t#define sec second\n\t#define MP make_pair\n\t#define rep(i,x,y) for (int i=(x);i<=(y);i++)\n\t#define drep(i,x,y) for (int i=(x);i>=(y);i--)\n\t#define go(x) for (int i=head[x];i;i=edge[i].nxt)\n\t#define sz 202020\n\ttypedef long long ll;\n\ttemplate<typename T>\n\tinline void read(T& t)\n\t{\n\t\tt=0;char f=0,ch=getchar();\n\t\tdouble d=0.1;\n\t\twhile(ch>'9'||ch<'0') f|=(ch=='-'),ch=getchar();\n\t\twhile(ch<='9'&&ch>='0') t=t*10+ch-48,ch=getchar();\n\t\tif(ch=='.')\n\t\t{\n\t\t\tch=getchar();\n\t\t\twhile(ch<='9'&&ch>='0') t+=d*(ch^48),d*=0.1,ch=getchar();\n\t\t}\n\t\tt=(f?-t:t);\n\t}\n\ttemplate<typename T,typename... Args>\n\tinline void read(T& t,Args&... args){read(t); read(args...);}\n\tvoid file()\n\t{\n\t\t#ifndef ONLINE_JUDGE\n\t\tfreopen(\"a.txt\",\"r\",stdin);\n\t\t#endif\n\t}\n//\tinline ll mul(ll a,ll b){ll d=(ll)(a*(double)b/mod+0.5);ll ret=a*b-d*mod;if (ret<0) ret+=mod;return ret;}\n}\nusing namespace my_std;\n\nint n,m,Q;\nmap<pii,int>M;\nstruct hh{int f,t,w;hh(int ff=0,int tt=0,int ww=0){f=ff,t=tt,w=ww;}}edge[sz<<1];\nint bg[sz<<1],ed[sz<<1];\n\nstruct HH\n{\n\tint w[34];\n\tvoid ins(int x)\n\t{\n\t\tdrep(i,30,0) if (x&(1<<i))\n\t\t{\n\t\t\tif (!w[i]) return (void)(w[i]=x);\n\t\t\tx^=w[i];\n\t\t}\n\t}\n\tint query(int x){ drep(i,30,0) if ((x^w[i])<x) x^=w[i]; return x; }\n}_;\n\nvector<hh>v[sz<<2];\n#define ls k<<1\n#define rs k<<1|1\n#define lson ls,l,mid\n#define rson rs,mid+1,r\nvoid insert(int k,int l,int r,int x,int y,hh e)\n{\n\tif (x<=l&&r<=y) return (void)v[k].push_back(e);\n\tint mid=(l+r)>>1;\n\tif (x<=mid) insert(lson,x,y,e);\n\tif (y>mid) insert(rson,x,y,e);\n}\nint qx[sz],qy[sz];\nint fa[sz],f[sz],dep[sz];\nint getfa(int x){return x==fa[x]?x:getfa(fa[x]);}\nint getdis(int x){return x==fa[x]?0:f[x]^getdis(fa[x]);}\nstruct hhh{int x,y;bool s;};\nvoid solve(int k,int l,int r,HH G)\n{\n\tstack<hhh>S;\n\trep(i,0,(int)v[k].size()-1)\n\t{\n\t\tint x=v[k][i].f,y=v[k][i].t,w=v[k][i].w;\n\t\tint fx=getfa(x),fy=getfa(y);\n\t\tw^=getdis(x)^getdis(y);\n\t\tif (fx==fy) G.ins(w);\n\t\telse\n\t\t{\n\t\t\tif (dep[fx]>dep[fy]) swap(fx,fy),swap(x,y);\n\t\t\thhh cur=(hhh){fx,fy,0};\n\t\t\tfa[fx]=fy;f[fx]=w;\n\t\t\tif (dep[fx]==dep[fy]) ++dep[fy],cur.s=1;\n\t\t\tS.push(cur);\n\t\t}\n\t}\n\tif (l==r) printf(\"%d\\n\",G.query(getdis(qx[l])^getdis(qy[l])));\n\telse\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tsolve(lson,G);solve(rson,G);\n\t}\n\twhile (!S.empty()) f[fa[S.top().x]=S.top().x]=0,dep[S.top().y]-=S.top().s,S.pop();\n}\n\nint main()\n{\n\tfile();\n\tint x,y,z;\n\tread(n,m);\n\trep(i,1,n) fa[i]=i;\n\tint c=m,tim=1;\n\trep(i,1,m) read(x,y,z),M[MP(x,y)]=i,bg[i]=1,ed[i]=-1,edge[i]=hh(x,y,z);\n\tread(Q);\n\trep(i,1,Q)\n\t{\n\t\tread(z,x,y);\n\t\tif (z==1)\n\t\t{\n\t\t\tread(z);\n\t\t\tM[MP(x,y)]=++c;bg[c]=tim;ed[c]=-1;\n\t\t\tedge[c]=hh(x,y,z);\n\t\t}\n\t\telse if (z==2) ed[M[MP(x,y)]]=tim-1;\n\t\telse qx[tim]=x,qy[tim]=y,++tim;\n\t}\n\t--tim;\n\trep(i,1,c) if (ed[i]==-1) ed[i]=tim;\n\trep(i,1,c) if (bg[i]<=ed[i]) insert(1,1,tim,bg[i],ed[i],edge[i]);\n\tsolve(1,1,tim,_);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1549723433,
        "uid": 76481,
        "name": "p_b_p_b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF938G \u3010Shortest Path Queries\u3011"
    },
    {
        "content": "## CF938G Shortest Path Queries\n> \u7ed9\u51fa $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9 \u7684\u8fb9\u5e26\u6743\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u548c $q$ \u6b21\u64cd\u4f5c\uff1a\n> - \u52a0\u5165\u4e00\u6761 $x,y$ \u4e4b\u95f4\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a $z$\uff0c\u4fdd\u8bc1\u4e4b\u524d\u8fd9\u6761\u8fb9\u4e0d\u5b58\u5728\u3002\n> - \u5220\u53bb $x,y$ \u4e4b\u95f4\u7684\u8fb9\uff0c\u4fdd\u8bc1\u8fd9\u6761\u8fb9\u5b58\u5728\uff0c\u4e14\u5220\u53bb\u540e\u539f\u56fe\u4ecd\u7136\u8fde\u901a\u3002\n> - \u8be2\u95ee $x,y$ \u4e4b\u95f4\u7684\u5f02\u6216\u6700\u77ed\u8def\u5f84\uff0c\u8def\u5f84\u4e0d\u4e00\u5b9a\u662f\u7b80\u5355\u8def\u5f84\u3002\n>\n> ($1\\le n,m,q\\le 2\\times10^5,0\\le z<2^{30}$)\n\n\u6ce8\u610f\u5230\u672c\u9898\u7684\u8def\u5f84\u4e0d\u4e00\u5b9a\u662f\u7b80\u5355\u8def\u5f84\uff0c\u4e14\u8def\u5f84\u7b97\u6743\u503c\u662f\u5f02\u6216\u7b97\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u82b1\u8d39\u4efb\u4f55\u4ee3\u4ef7\u62ff\u5230\u4e00\u4e2a\u73af\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u4ece\u5f53\u524d\u8d70\u7684\u9053\u8def\u5206\u53c9\u53bb\u90a3\u4e2a\u73af\uff0c\u7136\u540e\u7ed5\u7740\u73af\u8f6c\u4e00\u5708\u540e\u539f\u8def\u8fd4\u56de\uff0c\u9664\u4e86\u73af\u7684\u591a\u4f59\u8fb9\u90fd\u4f1a\u8d70\u4e24\u6b21\u4ece\u800c\u88ab\u6d88\u53bb\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u627e\u4e00\u6761\u8def\u5f84\uff0c\u7136\u540e\u7528\u4e00\u4e9b\u73af\u6765\u589e\u5e7f\u5b83\u3002\uff08\u80fd\u4efb\u610f\u627e\u8def\u5f84\u662f\u56e0\u4e3a\uff0c\u5047\u5982\u8def\u5f84 $1$ \u6bd4\u8def\u5f84 $2$ \u66f4\u4f18\uff0c\u90a3\u9009\u62e9\u8fd9\u4e24\u6761\u8def\u5f84\u6784\u6210\u7684\u73af\u5373\u53ef\u4ea4\u6362\u8fc7\u53bb\uff09\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u4e09\u4e2a\u90e8\u5206\uff1a\n- \u627e\u5230\u6240\u6709\u73af\uff0c\u5e76\u80fd\u67e5\u8be2\u4e24\u70b9\u4e4b\u95f4\u7684\u4efb\u610f\u4e00\u6761\u5f02\u6216\u8def\u5f84\u3002\n- \u67e5\u8be2\u67d0\u4e2a\u96c6\u5408\u5185\u7684\u503c\u4e0e\u67d0\u4e2a\u503c\u7684\u5f02\u6216\u6700\u5c0f\u503c\u3002\n- \u5220\u9664\u96c6\u5408\u5185\u7684\u503c\u3002\n\n\u5bf9\u4e8e\u627e\u73af\uff0c\u8003\u8651\u627e\u51fa\u539f\u8fde\u901a\u56fe\u7684\u67d0\u4e2a\u751f\u6210\u6811\uff0c\u5bf9\u4e8e\u65b0\u52a0\u5165\u7684\u8fb9\uff0c\u5c31\u5728\u751f\u6210\u6811\u4e0a\u627e\u5230\u5bf9\u5e94\u7684\u73af\uff0c\u5c06\u5b83\u7684\u6743\u503c\u52a0\u5165\u96c6\u5408\u4e2d\u3002\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u80fd\u7ec4\u5408\u51fa\u4efb\u4f55\u7684\u73af\uff0c\u611f\u6027\u8bc1\u660e\uff1a\n- \u5bf9\u4e8e\u4ec5\u7531\u4e00\u6761\u975e\u6811\u8fb9\u6784\u6210\u7684\u73af\uff0c\u5df2\u7ecf\u88ab\u8bb0\u5f55\u4e86\u3002\n- \u5bf9\u4e8e\u7531\u591a\u6761\u975e\u6811\u8fb9\u6784\u6210\u7684\u73af\uff0c\u5c06\u8fd9\u4e9b\u6811\u8fb9\u5728\u751f\u6210\u6811\u4e0a\u7684\u6784\u6210\u7684\u73af\u5f02\u6216\u7ec4\u5408\u8d77\u6765\u5c31\u80fd\u5f97\u5230\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u4e00\u4e2a\u5e26\u6743\u5e76\u67e5\u96c6\u5b9e\u73b0\uff0c\u987a\u4fbf\u4e5f\u80fd\u652f\u6301\u67e5\u8be2\u5f02\u6216\u8def\u5f84\u3002\n\n\u7136\u540e\u6211\u4eec\u8981\u77e5\u9053\u7ebf\u6027\u57fa\u600e\u4e48\u67e5\u8be2\u548c\u67d0\u4e2a\u503c\u7684\u5f02\u6216\u6700\u5c0f\u503c\u3002\u7c7b\u4f3c\u5f02\u6216\u6700\u5927\u503c\uff0c\u8003\u8651\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u8d2a\u5fc3\uff0c\u80fd\u6d88\u6389\u8fd9\u4e00\u4f4d\u7684 $1$ \u5c31\u6d88\u6389\u8fd9\u4e00\u4f4d\u7684 $1$\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u7b54\u6848\u5373\u5f02\u6216\u6700\u5c0f\u503c\u3002\n\n\u6700\u540e\uff0c\u4e5f\u662f\u672c\u9898\u7684\u96be\u70b9\uff0c\u5c31\u662f\u5220\u9664\u96c6\u5408\u5185\u7684\u503c\u4e86\u3002\u6709\u4e00\u79cd\u9ed1\u79d1\u6280\u53ef\u4ee5\u5728 $\\mathcal{O}(\\log z+n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u4fee\u6539\u96c6\u5408\u5185\u5143\u7d20\uff08\u5176\u4e2d $n$ \u662f\u96c6\u5408\u5143\u7d20\u4e2a\u6570\uff09\uff0c\u5f53 $n,\\log z$ \u540c\u9636\u65f6\uff0c\u8fd9\u79cd\u505a\u6cd5\u975e\u5e38\u597d\u7528\u3002\uff08\u5177\u4f53\u53ef\u4ee5\u770b\u6211\u4e00\u9053\u975e\u5e38\u7c7b\u4f3c\u7684\u9898 [P3733 [HAOI2017]\u516b\u7eb5\u516b\u6a2a](https://www.luogu.com.cn/problem/P3733) \u7684\u9898\u89e3\uff09\u4f46\u672c\u9898\u4e2d\uff0c$n$ \u8fdc\u5927\u4e8e $\\log z$\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u7528\u53e6\u4e00\u79cd\u65b9\u6cd5\uff0c\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\n\n\u7ebf\u6bb5\u6811\u5206\u6cbb\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u4e00\u7c7b DS \u7684\u5220\u9664\u95ee\u9898\uff0c\u8fd9\u7c7b DS \u652f\u6301\u52a0\u5165\uff0c\u652f\u6301\u64a4\u9500\uff0c\u4f46\u5f88\u96be\u652f\u6301\u5220\u9664\u3002\uff08\u6ce8\u610f\u533a\u5206\u5220\u9664\u548c\u64a4\u9500\uff09\u8003\u8651\u9884\u5904\u7406\u51fa\u6bcf\u6761\u8fb9\u7684\u5b58\u5728\u533a\u95f4\uff0c\u5e76\u628a\u8fd9\u4e9b\u533a\u95f4\u6302\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u4e4b\u540e\u8bbf\u95ee\u6574\u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u8fdb\u5165\u4e00\u4e2a\u7ed3\u70b9\u5c31\u52a0\u5165\u8fd9\u4e2a\u7ed3\u70b9\u5bf9\u5e94\u7684\u8fb9\uff0c\u5230\u53f6\u5b50\u65f6\uff0c\u5982\u679c\u6709\u8be2\u95ee\u5c31\u56de\u7b54\u8be2\u95ee\u3002\u79bb\u5f00\u4e00\u4e2a\u7ed3\u70b9\u65f6\uff0c\u628a\u5728\u8fd9\u4e2a\u7ed3\u70b9\u8fdb\u884c\u4e00\u5207\u64cd\u4f5c\u64a4\u9500\u5373\u53ef\u3002\uff08\u53ef\u4ee5\u7528\u4e2a\u6808\u8bb0\u5f55\u90fd\u5e72\u4e86\u70b9\u5565\uff09\u518d\u4e0a\u4e2a `std::bitset` \u4f18\u5316\u4e00\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(\\frac{q\\log z\\log q}{w}+n\\log n)$\u3002\n```cpp\n#include <cstdio>\n#include <bitset>\n#include <vector>\n#include <cstring>\n#include <unordered_map>\nconst int N = 5e5 + 10, L = 31; typedef std::bitset<L> bs;\nstd::unordered_map<int, int> mp[N]; int sta[N], top;\nstruct edge{ int x, y; bs z; edge(int x = 0, int y = 0, bs z = 0) : x(x), y(y), z(z) { } }E[N];\nstruct query{ int x, y; }Q[N];\nstruct Linear_basis\n{\n    bs c[L]; int st[N], tp;\n    inline void insert(bs x)\n    {\n        for (int i = L - 1; ~i; --i)\n        {\n            if (!x[i]) continue;\n            if (c[i].none()) { st[++tp] = i; c[i] = x; break; }\n            x ^= c[i];\n        }\n    }\n    inline bs query(bs x)\n    {\n        bs ret = x;\n        for (int i = L - 1; ~i; --i)\n            if (ret[i] && c[i].any()) ret ^= c[i];\n        return ret;\n    }\n    inline void del(int pos) { while (tp != pos) c[st[tp--]].reset(); }\n}lb;\nstruct DSU\n{\n    int f[N], size[N], tp; bs dis[N];\n    struct mem{ int x, y, s; mem(int x = 0, int y = 0, int s = 0) : x(x), y(y), s(s) { } }st[N];\n    void init(int n) { for (int i = 1; i <= n; ++i) f[i] = i, size[i] = 1; }\n    int getf(int x) { return x == f[x] ? x : getf(f[x]); }\n    bs getdis(int x) { return x == f[x] ? dis[x] : dis[x] ^ getdis(f[x]); }\n    inline void merge(int x, int y, bs w)\n    {\n        int t1, t2;\n        if ((t1 = getf(x)) == (t2 = getf(y))) return lb.insert(getdis(x) ^ getdis(y) ^ w);\n        if (size[t1] > size[t2]) std::swap(t1, t2); \n        st[++tp] = mem(t1, t2, size[t2]); dis[t1] = getdis(x) ^ getdis(y) ^ w;\n        size[t2] += size[t1]; f[t1] = t2;\n    }\n    inline void del(int pos) { while (tp != pos) f[st[tp].x] = st[tp].x, size[st[tp].y] = st[tp].s, dis[st[tp--].x].reset(); }\n}dsu;\nstruct SegTee\n{\n    #define ls(k) (k << 1)\n    #define rs(k) (k << 1 | 1)\n    struct node{ int l, r; std::vector<edge> e; }h[N << 2];\n    void build(int k, int l, int r)\n    {\n        h[k].l = l; h[k].r = r; if (l == r) return ;\n        int mid = (l + r) >> 1; build(ls(k), l, mid); build(rs(k), mid + 1, r);\n    }\n    void change(int k, int x, int y, edge v)\n    {\n        if (x <= h[k].l && h[k].r <= y) return h[k].e.emplace_back(v), void();\n        int mid = (h[k].l + h[k].r) >> 1; \n        if (x <= mid) change(ls(k), x, y, v);\n        if (mid < y) change(rs(k), x, y, v);\n    }\n    void query(int k)\n    {\n        int mem1 = lb.tp, mem2 = dsu.tp;\n        for (auto d : h[k].e) dsu.merge(d.x, d.y, d.z);\n        if (h[k].l == h[k].r && Q[h[k].l].x) \n        {\n            int u = Q[h[k].l].x, v = Q[h[k].l].y;\n            int z = (lb.query(dsu.getdis(u) ^ dsu.getdis(v))).to_ulong();\n            printf(\"%d\\n\", z);\n        }\n        else if (h[k].l != h[k].r) query(ls(k)), query(rs(k));\n        lb.del(mem1); dsu.del(mem2);\n    }\n}sgt;\nint main()\n{\n    int n, m; scanf(\"%d%d\", &n, &m); memset(sta, -1, sizeof (sta)); dsu.init(n);\n    for (int i = 1, x, y, z; i <= m; ++i) \n        scanf(\"%d%d%d\", &x, &y, &z), E[++top] = edge(x, y, z), sta[top] = 0, mp[x][y] = mp[y][x] = top;\n    int q; scanf(\"%d\", &q); sgt.build(1, 0, q);\n    for (int i = 1, opt, x, y, z, id; i <= q; ++i)\n    {\n        scanf(\"%d%d%d\", &opt, &x, &y);\n        if (opt == 1) scanf(\"%d\", &z), E[++top] = edge(x, y, z), sta[top] = i, mp[x][y] = mp[y][x] = top;\n        else \n        {\n            if (opt == 2) id = mp[x][y], sgt.change(1, sta[id], i - 1, E[id]), sta[id] = -1;\n            else Q[i].x = x, Q[i].y = y;\n        }\n    }\n    for (int i = 1; i <= top; ++i) if (~sta[i]) sgt.change(1, sta[i], q, E[i]);\n    sgt.query(1); return 0;\n}\n```",
        "postTime": 1646975203,
        "uid": 137603,
        "name": "zhiyangfan",
        "ccfLevel": 9,
        "title": "CF938G Shortest Path Queries \u9898\u89e3"
    },
    {
        "content": "1. \u6807\u7b7e: \u7ebf\u6027\u57fa, \u7ebf\u6bb5\u6811\u5206\u6cbb, \u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6.\n2. \u9996\u5148\u4e0d\u8003\u8651\u5220\u9664\u7684\u60c5\u51b5, \u5e76\u4e14\u8ba4\u4e3a\u56fe\u662f\u4e00\u68f5**\u6811**, \u6211\u4eec\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u6bcf\u4e2a\u70b9 $x$ \u5230\u6839\u8282\u70b9(\u5373\u5e76\u67e5\u96c6\u7956\u5148)\u7684\u8def\u5f84\u7684\u503c $w_x$, \u6839\u636e\u5f02\u6216\u7684\u6027\u8d28, \u6613\u77e5\u4e24\u70b9 $x,y$ \u8ddd\u79bb\u7b49\u4e8e $w_x$ xor $w_y$.\n3.  \u82e5\u56fe\u4e0d\u662f\u4e00\u68f5\u6811, \u5373\u6211\u4eec\u52a0\u5165\u67d0\u6761\u8fb9$(x, y, d)$ \u7684\u65f6\u5019 $x, y$ \u53ef\u80fd\u5df2\u7ecf\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u5185\u4e86, \u90a3\u4e48\u6211\u4eec\u52a0\u5165\u8fd9\u6761\u8fb9\u65f6\u4f1a\u4ea7\u751f\u4e00\u6761\u957f\u5ea6\u4e3a $w_x$ xor $w_y$ xor $d$ \u7684\u4e00\u4e2a\u73af, \u6211\u4eec\u53d1\u73b0\u5982\u679c\u4ece\u67d0\u4e2a\u8d77\u70b9\u8d70\u5230\u67d0\u4e2a\u73af\u4e0a, \u7136\u540e\u8d70\u4e00\u904d\u8fd9\u4e2a\u73af, \u518d\u8d70\u56de\u8d77\u70b9, \u6211\u4eec\u957f\u5ea6\u4f1a xor \u4e0a\u4e00\u4e2a\u73af\u957f $w$, \u4e14\u8d77\u70b9\u4e0d\u53d8. \u4e8e\u662f\u6211\u4eec\u60f3\u5230\u5c06\u73af\u7684\u957f\u5ea6\u653e\u5165\u7ebf\u6027\u57fa\u5185, \u67e5\u8be2\u65f6\u5148\u67e5\u51fa\u4e24\u70b9\u5728\u6811\u4e0a\u8def\u5f84\u7684\u957f\u5ea6, \u7136\u540e\u5728\u7ebf\u6027\u57fa\u4e0a\u8dd1\u6700\u5c0f\u503c\u5c31\u597d\u4e86.\n4. \u7531\u4e8e\u4e0a\u8ff0\u505a\u6cd5\u4e0d\u652f\u6301\u5220\u9664\u64cd\u4f5c, \u6211\u4eec\u60f3\u5230\u4f7f\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u6765\u907f\u514d\u5220\u9664\u64cd\u4f5c, \u6ce8\u610f\u5230\u8def\u5f84\u538b\u7f29\u5e76\u67e5\u96c6\u63d2\u5165\u4e00\u6761\u8fb9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u591a\u4e2a\u70b9\u4fdd\u5b58\u7684\u4fe1\u606f(\u7236\u4eb2\u8282\u70b9, \u5230\u7236\u4eb2\u8282\u70b9\u7684\u8ddd\u79bb)\u6539\u53d8, \u6240\u4ee5\u8fd9\u91cc\u5e94\u5f53\u4f7f\u7528**\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6**(\u6ce8\u610f\u4e0d\u8981\u8bef\u8ba4\u4e3a\u662f**\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6**, \u5982\u679c\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O(n\\log^3n)$ \u7684, \u7a7a\u95f4\u590d\u6742\u5ea6\u662f$\\mathcal O(n\\log^2n)$\u7684, \u4ee3\u7801\u590d\u6742\u5ea6\u662f$\\mathcal O($**\u7092\u9e21\u96be\u6253**$)$\u7684), \u90a3\u4e48\u63d2\u5165\u4e00\u6761\u8fb9\u65f6\u4fdd\u8bc1\u53ea\u4f1a\u6539\u53d8\u4e24\u4e2a\u70b9\u7684\u4fe1\u606f(\u5176\u5b9e\u8fd9\u4e24\u7684\u70b9\u6539\u53d8\u7684\u4fe1\u606f\u4e92\u4e0d\u76f8\u4ea4, \u53ef\u4ee5\u770b\u6210\u53ea\u6539\u53d8\u4e86\u4e00\u4e2a\u70b9\u7684\u4fe1\u606f).\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <map>\n#include <vector>\nusing namespace std;\nint read();\nint n, m, q, cnt, ecnt, pcnt;\nmap<int, int> mp[200005];\n\nstruct Edge {\n    int x, y, l, r, w;\n    void init(int xx, int yy, int d, int L) { x = xx, y = yy, w = d, l = L; }\n} e[400005];\n\nstruct P {\n    int x, y;\n};\nvector<P> vp[200005];\n\nstruct liner_Base {\n    int b[31];\n    void ins(int w) {\n        for (int i = 29; i >= 0; --i) {\n            if (!(w >> i)) continue;\n            if (!b[i]) {\n                b[i] = w;\n                break;\n            }\n            w ^= b[i];\n        }\n    }\n    int work(int w) {\n        for (int i = 29; i >= 0; --i) {\n            if (!((w >> i) & 1)) continue;\n            w ^= b[i];\n        }\n        return w;\n    }\n} lb[20];\n\nstruct T {\n    int fa, w, sz;\n};\n\nstruct Dsu {\n    T t[200005];\n    int find(int x, int &w) {\n        while (x != t[x].fa) w ^= t[x].w, x = t[x].fa;\n        return x;\n    }\n    void merge(int x, int y, int w, int id) {\n        if (x == y) return lb[id].ins(w);\n        if (t[x].sz > t[y].sz) swap(x, y);\n        t[x].fa = y, t[x].w = w, t[y].sz += t[x].sz;\n    }\n\n    int qry(int x, int y, int id) {\n        int w = 0;\n        find(x, w), find(y, w);\n        int t;\n        return lb[id].work(w);\n    }\n} dsu;\n\nint ppcnt;\n\nstruct Seg {\n    vector<Edge> te[800005];\n    void ins_edge(int l, int r, int k, Edge &e) {\n        if (e.l > r || e.r < l) return;\n        if (e.l <= l && e.r >= r) return ++ppcnt, te[k].push_back(e);\n        int mid = l + r >> 1;\n        ins_edge(l, mid, k << 1, e), ins_edge(mid + 1, r, k << 1 | 1, e);\n    }\n\n    T stt[800005];\n    int st[800005], tag[20], top;\n\n    void ins(int k, int d) {\n        lb[d] = lb[d - 1], tag[d] = top;\n        for (int i = 0; i < te[k].size(); ++i) {\n            int x = te[k][i].x, y = te[k][i].y, wx = 0, wy = 0;\n            x = dsu.find(x, wx), y = dsu.find(y, wy);\n            st[++top] = x, stt[top] = dsu.t[x];\n            st[++top] = y, stt[top] = dsu.t[y];\n            dsu.merge(x, y, wx ^ wy ^ te[k][i].w, d);\n        }\n    }\n\n    void del(int d) {\n        while (top > tag[d]) dsu.t[st[top]] = stt[top], top--;\n    }\n\n    void work(int l, int r, int k, int d) {\n        ins(k, d);\n        if (l == r) {\n            for (int i = 0; i < vp[l].size(); ++i)\n                printf(\"%d\\n\", dsu.qry(vp[l][i].x, vp[l][i].y, d));\n            return del(d);\n        }\n        int mid = l + r >> 1;\n        work(l, mid, k << 1, d + 1), work(mid + 1, r, k << 1 | 1, d + 1);\n        del(d);\n    }\n} seg;\n\nint main() {\n    n = read(), m = read();\n    for (int i = 1; i <= n; ++i) dsu.t[i] = (T){i, 0, 1};\n    for (int i = 1, x, y; i <= m; ++i)\n        x = read(), y = read(),\n        e[mp[x][y] = mp[y][x] = i].init(x, y, read(), 1);\n    q = read();\n    ecnt = m, cnt = 1;\n    for (int i = 1, op, x, y; i <= q; ++i) {\n        op = read(), x = read(), y = read();\n        if (op == 1) e[mp[x][y] = mp[y][x] = ++ecnt].init(x, y, read(), ++cnt);\n        if (op == 2) e[mp[x][y]].r = cnt++;\n        if (op == 3) vp[cnt].push_back((P){x, y});\n    }\n    for (int i = 1; i <= ecnt; ++i) {\n        if (!e[i].r) e[i].r = cnt;\n        seg.ins_edge(1, cnt, 1, e[i]);\n    }\n    seg.work(1, cnt, 1, 1);\n    return 0;\n}\n\nint read() {\n    int x = 0, f = 1;\n    char c = getchar();\n    while (c < '0' || c > '9') f = (c == '-') ? -1 : f, c = getchar();\n    while (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n```\n",
        "postTime": 1570022606,
        "uid": 51237,
        "name": "Kinandra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF938G \u3010Shortest Path Queries\u3011"
    },
    {
        "content": "## \u524d\u7f6e\u829d\u58eb I : \u7ebf\u6027\u57fa\n\n\u4e00\u7ec4\u6570\u7684\u7ebf\u6027\u57fa\u662f\u53e6\u4e00\u7ec4\u6570 $a_1,a_2,a_3,a_4,\\dots,a_n$ \u5176\u4e2d $a_x$ \u6700\u9ad8\u4f4d\u7684 1 \u5728 $x$ \u4f4d\uff0c\u8fd9\u4e9b\u6570\u5f02\u6216\u51fa\u7684\u503c\u57df\u4e0e\u539f\u6765\u7684\u4e00\u7ec4\u6570\u76f8\u540c\u3002\n\n\u5728\u8fd9\u9053\u9898\u91cc\uff0c\u663e\u7136\u4e00\u6761\u8fb9\u662f\u4e0d\u80fd\u91cd\u590d\u8d70\u7684\uff0c\u56e0\u4e3a\u91cd\u590d\u8d70\u5c31\u7b49\u4ef7\u4e8e\u4e0d\u8d70\uff0c\u56e0\u6b64\u6211\u4eec\u628a\u6bcf\u4e2a\u73af\u63d0\u51fa\u6765\u6784\u9020\u7ebf\u6027\u57fa(\u663e\u7136\u6bcf\u8d70\u4e00\u6b21\u503c\u5c31\u53ef\u4ee5\u5f02\u6216\u8fd9\u4e2a\u73af\u8fb9\u6743\u7684\u5f02\u6216\u548c).\n\n### \u7ebf\u6027\u57fa\u7684\u6784\u9020\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6570 $a_i$\uff0c\u6211\u4eec\u5c1d\u8bd5\u8ba9\u5b83\u52a0\u5165\u7ebf\u6027\u57fa\uff0c\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u5224\u65ad\uff0c\u82e5 $a_i$ \u7684\u4e8c\u8fdb\u5236\u4e0b\u7b2c $k$ \u4f4d\u4e3a $1$\uff0c\u6211\u4eec\u5219\u67e5\u770b\u7ebf\u6027\u57fa\u7684\u7b2c $k$ \u4f4d\u662f\u5426\u6709\u503c\uff0c\u82e5\u6709\uff0c\u6211\u4eec\u8ba9 $a_i$ \u5f02\u6216\u4e0a $a_k$ \u5426\u5219\u76f4\u63a5\u8ba9 $a_k$ = $a_i$\u3002\n\n\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nfor(int j = 30;j >= 0; -- j)\n\tif(w & (1 << j))\n\t\tif(base[dep][j] == 0)\n\t\t{\n\t\t\tbase[dep][j] = w;\n\t\t\tfor(int k = 30;k > j; -- k)\n\t\t\t\tif(base[dep][k] & (1 << j)) base[dep][k] ^= w;\n\t\t\tbreak;\n\t\t}\n\t\telse w ^= base[dep][j];\n```\n\n\u4ee3\u7801\u4e2d $w$ \u5c31\u662f\u8981\u63d2\u5165\u7684\u6570\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8be2\u95ee\u62ff\u51fa\u6765\u5206\u6cbb\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u5904\u7406\u51fa\u5b83\u5b58\u5728\u7684\u65f6\u95f4 $[s,t]$\uff0c\u8bbe\u5f53\u524d\u5206\u6cbb\u5230 $[l,r]$ \u533a\u95f4\uff0c\u82e5 $s \\leq l,r \\leq t$ \u5c31\u628a\u8fd9\u6761\u8fb9\u52a0\u8fdb\u53bb\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u5b9e\u73b0\u3002\n\n## \u524d\u7f6e\u829d\u58eb II : \u53ef\u64a4\u9500\u5e76\u67e5\u96c6\n\n\u6211\u4eec\u77e5\u9053\uff0c\u8def\u5f84\u538b\u7f29\u5e76\u67e5\u96c6\u662f\u4e0d\u80fd\u64a4\u9500\u7684\uff0c\u8981\u5b9e\u73b0\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\uff0c\u6211\u4eec\u9996\u5148\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 $sz$\uff0c\u5728\u5408\u5e76\u65f6\u76f4\u63a5\u628a $sz$ \u5c0f\u7684\u63a5\u5230 $sz$ \u5927\u7684\u5373\u53ef\u3002\n\n\u8fd9\u6837\u505a\u770b\u4f3c\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u5927\uff0c\u5b9e\u5219\u5747\u644a $log n$ (\u7b14\u8005\u5e76\u6ca1\u6709\u4e25\u683c\u8bc1\u660e\u8fc7\u8fd9\u4e2a\u590d\u6742\u5ea6\uff0c\u4e5f\u8bb8\u4f1a\u66f4\u5c0f\u6216\u66f4\u5927)\n\n\u5728\u5408\u5e76\u4e24\u4e2a\u70b9\u65f6\uff0c\u5c06\u513f\u5b50\u8282\u70b9\u538b\u5165\u6808\uff0c\u64a4\u9500\u65f6\u76f4\u63a5\u628a\u513f\u5b50\u8282\u70b9\u7684\u8d21\u732e\u5220\u9664\u5373\u53ef\u3002\n\n\u7136\u540e\u8fd9\u9053\u9898\u5c31\u89e3\u51b3\u5566~\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <map>\n\nusing namespace std;\n\nstruct edge\n{\n\tint u,v,w,x,y;\n}e[400050];\n\nvector<edge> g[800050];\nmap<pair<int,int>,int> mp;\nint val[200050],fa[200050],sz[200050];\nint stk[400050],top;\n\nvoid Update(int rt,int l,int r,edge a)\n{\n\tif(a.x > a.y) return ;\n\tif(l > r || l > a.y || r < a.x) return ;\n\tif(a.x <= l && r <= a.y)\n\t{\n\t\tg[rt].push_back(a);\n\t\treturn ;\n\t}\n\tif(l == r) return ;\n\tint mid = (l + r) >> 1;\n\tUpdate(rt << 1,l,mid,a);\n\tUpdate(rt << 1 | 1,mid + 1,r,a);\n}\n\nint find_fa(int rt)\n{\n\treturn fa[rt] == rt ? rt : find_fa(fa[rt]);\n}\n\nint find_val(int rt)\n{\n\treturn fa[rt] == rt ? 0 : val[rt] ^ find_val(fa[rt]);\n}\n\nint base[75][35];\n\nvoid ins(int k,int dep)\n{\n\tfor(int i = 0;i < g[k].size(); ++ i)\n\t{\n\t\tedge e = g[k][i];\n\t\tint u = e.u,v = e.v,w = e.w,x = u,y = v;\n\t\tu = find_fa(u); v = find_fa(v);\n\t\tif(u != v)\n\t\t{\n\t\t\tif(sz[u] > sz[v]) swap(u,v),swap(x,y);\n\t\t\tfa[u] = v;\n\t\t\tsz[v] += sz[u];\n\t\t\tval[u] = 0;\n\t\t\tval[u] = find_val(x) ^ find_val(y) ^ w;\n\t\t\tstk[++ top] = u;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tw = find_val(x) ^ find_val(y) ^ e.w;\n\t\t\tfor(int j = 30;j >= 0; -- j)\n\t\t\t\tif(w & (1 << j))\n\t\t\t\t\tif(base[dep][j] == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbase[dep][j] = w;\n\t\t\t\t\t\tfor(int k = 30;k > j; -- k)\n\t\t\t\t\t\t\tif(base[dep][k] & (1 << j)) base[dep][k] ^= w;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse w ^= base[dep][j];\n\t\t}\n\t}\n}\n\nvoid reset(int to)\n{\n\twhile(top > to)\n\t{\n\t\tint u = stk[top --];\n\t\tsz[fa[u]] -= sz[u];\n\t\tval[u] = 0;\n\t\tfa[u] = u;\n\t}\n}\n\nstruct qqq\n{\n\tint u,v;\n}qst[200050];\n\nvoid solv(int k,int l,int r,int dep)\n{\n\tif(l > r) return ;\n\tint tmp = top;\n\tins(k,dep);\n\tif(l == r)\n\t{\n\t\tint x = qst[l].u,y = qst[l].v;\n\t\tint ans = find_val(x) ^ find_val(y);\n\t\tfor(int i = 30;i >= 0; -- i)\n\t\t\tif(base[dep][i])\n\t\t\t\tans = min(ans,ans ^ base[dep][i]);\n\t\tprintf(\"%d\\n\",ans);\n\t\treset(tmp);\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tfor(int i = 0;i <= 30; ++ i) base[dep + 1][i] = base[dep][i];\n\tsolv(k << 1,l,mid,dep + 1);\n\tfor(int i = 0;i <= 30; ++ i) base[dep + 1][i] = base[dep][i];\n\tsolv(k << 1 | 1,mid + 1,r,dep + 1);\n\treset(tmp);\n}\n\nint n,m,q;\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tint totq = 0,ecnt = 0;\n\tfor(int i = 1;i <= m; ++ i)\n\t{\n\t\tecnt ++;\n\t\tint u,v,w; scanf(\"%d%d%d\",&u,&v,&w);\n\t\te[ecnt] = (edge){u,v,w,1,-1};\n\t\tmp[make_pair(u,v)] = ecnt;\n\t}\n\tscanf(\"%d\",&q);\n\tfor(int i = 1;i <= q; ++ i)\n\t{\n\t\tint op,x,y,d;\n\t\tscanf(\"%d\",&op);\n\t\tif(op == 1)\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&x,&y,&d);\n\t\t\te[++ ecnt] = (edge){x,y,d,totq + 1,-1};\n\t\t\tmp[make_pair(x,y)] = ecnt;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tif(op == 2)\n\t\t\t{\n\t\t\t\te[mp[make_pair(x,y)]].y = totq;\n\t\t\t\tmp[make_pair(x,y)] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tqst[++ totq] = (qqq){x,y};\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1;i <= ecnt; ++ i) if(e[i].y == -1) e[i].y = totq;\n\tfor(int i = 1;i <= ecnt; ++ i) Update(1,1,totq,e[i]);\n\tfor(int i = 1;i <= n; ++ i) fa[i] = i,sz[i] = 1;\n\tsolv(1,1,totq,0);\n}\n```",
        "postTime": 1544746672,
        "uid": 25308,
        "name": "Wen_kr",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF938G \u3010Shortest Path Queries\u3011"
    },
    {
        "content": "**\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\uff1a\u7ebf\u6bb5\u6811\u5206\u6cbb+\u6309\u79e9\u5408\u5e76+\u7ebf\u6027\u57fa**\n\n### \u524d\u7f6e\u95ee\u9898\n\n> \u8fd9\u662f\u7ebf\u6027\u57fa\u7684\u4e00\u4e2a\u57fa\u672c\u5e94\u7528\n\n**[[WC2011]\u6700\u5927XOR\u548c\u8def\u5f84](https://www.luogu.com.cn/problem/P4151)**\n\n### solution\n\n\u5148\u4e0d\u8003\u8651$1,2$\u64cd\u4f5c\uff0c\u90a3\u4e48\u8be5\u9898\u4e0e\u524d\u7f6e\u95ee\u9898\u53ea\u6709\u6700\u5927\u548c\u6700\u5c0f\u7684\u4e00\u70b9\u533a\u522b\n\n\u5177\u4f53\u505a\u6cd5\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u68f5\u751f\u6210\u6811\uff0c\u6bcf\u6210\u4e00\u4e2a\u73af\uff0c\u628a\u73af\u4e22\u8fdb\u7ebf\u6027\u57fa\u91cc\n\n\u8fd9\u4e2a\u505a\u6cd5\u7684\u6b63\u786e\u6027\u5229\u7528\u4e86\u5f02\u6216\u7684\u4f18\u79c0\u6027\u8d28\uff0c\u53ef\u4ee5\u53bb\u524d\u7f6e\u95ee\u9898\u8be6\u7ec6\u5b66\u4e60\n\n\u8003\u8651$1$\u64cd\u4f5c\u52a0\u8fb9\uff0c\u6211\u4eec\u505a\u6cd5\u4e0d\u53d8\n\n\u8003\u8651$2$\u64cd\u4f5c\u5220\u8fb9\uff0c\u6211\u4eec\u77e5\u9053\u7ebf\u6027\u57fa\u662f\u4e0d\u652f\u6301\u5220\u9664\u7684\uff0c\u5e76\u67e5\u96c6\u60f3\u652f\u6301\u5220\u9664\u4e00\u5b9a\u8981\u7528\u6309\u79e9\u5408\u5e76\n\n\u7ebf\u6027\u57fa\u4e0d\u652f\u6301\u5220\u9664\u600e\u4e48\u529e\n\n\u6211\u4eec\u6362\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\u5f85\u6b64\u9898\n\n\u4e0d\u96be\u53d1\u73b0\u6bcf\u4e00\u6761\u8fb9\u90fd\u51fa\u73b0\u4e86**\u4e00\u6bb5\u65f6\u95f4**\uff0c\u7136\u540e\u88ab\u5220\u9664\n\n\u6211\u4eec\u7531\u4e8e\u5e94\u907f\u514d\u7ebf\u6027\u57fa\u9700\u8981\u5220\u9664\u64cd\u4f5c\uff0c\u8003\u8651**\u7ebf\u6bb5\u6811\u5206\u6cbb**\n\n\u7ebf\u6bb5\u6811\u5206\u6cbb\u662f\u4e00\u79cd\u4e0e\u65f6\u95f4\u6709\u5173\u7684\u4f18\u79c0\u7684\u79bb\u7ebf\u7b97\u6cd5\n\n\u53ef\u4ee5\u53bb[blog](https://juju527.blog.luogu.org/solution-p4585)\u5b66\u4e60\u4e00\u4e0b\n\n### \u5e76\u67e5\u96c6\u90e8\u5206\u7684\u5b9e\u73b0\n\u7531\u4e8e\u5e76\u67e5\u96c6\u7ecf\u5e38\u7528\u6765\u7ef4\u62a4\u4e00\u4e2a\u56fe\u7684\u5404\u79cd\u5947\u602a\u8054\u901a/\u8ddd\u79bb\u95ee\u9898\uff0c\u6309\u79e9\u5408\u5e76\u4e5f\u662f\u5220\u8fb9\u6709\u5173\u5e76\u67e5\u96c6\u7684\u552f\u4e00\u9009\u62e9\n\n\u849f\u84bb\u6211\u4e00\u76f4\u4e0d\u592a\u4f1a\u7528\u6309\u79e9\u5408\u5e76\uff0c\u8fd9\u91cc\u8bb2\u89e3\u4e00\u4e0b\u6309\u79e9\u5408\u5e76\u7684\u5b9e\u73b0\n```cpp\nint update(int k,int *p){\n\tint siz=0;\n\tfor(int i=0;i<upd[k].size();i++){\n\t\tint id=upd[k][i];//\u52a0\u8fb9\u64cd\u4f5c\u7f16\u53f7\n\t\tint u=e[id].x,v=e[id].y;//\u8fb9\u7684\u4e24\u7aef\u70b9\n\t\tint x=find(u),y=find(v),d=e[id].d;\n\t\td^=(getd(u)^getd(v));//\u5728\u540e\u9762\u4f1a\u63d0\u5230\n\t\tif(rk[x]>rk[y])swap(x,y);//\u6309\u79e9\u5408\u5e76\n\t\tif(x!=y){\n\t\t\ttp++;\n\t\t\tpx[tp]=x;//\u5728\u6808\u91cc\u5b58\u50a8\u4fe1\u606f\u4ee5\u4fbf\u64a4\u9500\u64cd\u4f5c\n\t\t\tpd[tp]=dis[x];dis[x]=d;\n\t\t\tf[x]=y;\n\t\t\tpr[tp]=rk[y];\n\t\t\tif(rk[x]==rk[y])rk[y]++;//\u6309\u79e9\u5408\u5e76\n\t\t\tsiz++;\n\t\t}\n\t\telse\n\t\t\tins(d,p);\n\t}\n\treturn siz;\n}\n\n```\n\u7531\u4e8e\u6211\u4eec\u5e76\u67e5\u96c6\u5e76\u6ca1\u6709\u6309\u539f\u56fe\u8fde\u8fb9\n\n\u8bb0$x,y$\u5206\u522b\u4e3a$u,v$\u7684\u7956\u5148\u8282\u70b9\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9$(u,v,w)$\uff0c\u5728\u5e76\u67e5\u96c6\u4e0a\u4f1a\u53d8\u6210$(x,y)$\n\n![](https://s1.ax1x.com/2020/06/10/tTOZnI.png)\n\n\u8bb0$d_i$\u8868\u793a$i$\u70b9\u5230\u7956\u5148\u7684\u5f02\u6216\u8ddd\u79bb\n\n$(x,y)$\u4e4b\u95f4\u7684\u6743\u503c\u5e94\u4e3a$d_u\\bigoplus d_v\\bigoplus w$\n\n\u8be5\u64cd\u4f5c\u80fd\u4f7f\u4efb\u610f$d_i$\u8ba1\u7b97\u65e0\u8bef\n\n\u4e0a\u56fe\u5e94\u8be5\u753b\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u4e0d\u518d\u8d58\u8ff0\n\n### \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=2e5+5,maxm=2e5+5,maxq=2e5+5;\nstruct edge{\n\tint x,y,d;\n}e[maxm+maxq];\nint len=0;\nint s[maxn+maxq],t[maxn+maxq];\nint q[maxq][3];\nint f[maxn],rk[maxn],dis[maxn];\nint ans[maxq];\nmap<long long,int>mp;\nvector<int>upd[maxq<<2];\nvector<int>que[maxq<<2];\nint read(){\n    int x=0,y=1;\n    char ch=getchar();\n    while(ch<48||ch>57){if(ch==45)y=-1;ch=getchar();}\n    while(ch>=48&&ch<=57)x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n    return x*y;\n}\nvoid modify1(int k,int l,int r,int x,int y,int id){\n\tif(l>y||r<x)return ;\n\tif(l>=x&&r<=y){\n\t\tupd[k].push_back(id);\n\t\treturn ;\n\t}\n\tint mid=l+((r-l)>>1);\n\tmodify1(k<<1,l,mid,x,y,id);\n\tmodify1(k<<1|1,mid+1,r,x,y,id);\n\treturn ;\n}\nvoid modify2(int k,int l,int r,int x,int id){\n\tif(l>x||r<x)return ;\n\tif(l==r){\n\t\tque[k].push_back(id);\n\t\treturn ;\n\t}\n\tint mid=l+((r-l)>>1);\n\tmodify2(k<<1,l,mid,x,id);\n\tmodify2(k<<1|1,mid+1,r,x,id);\n\treturn ;\n}\nvoid ins(int x,int *p){\n\tfor(int i=29;i>=0;i--){\n\t\tif(!x)return ;\n\t\tif(!(x&(1<<i)))continue;\n\t\tif(!p[i]){\n\t\t\tp[i]=x;\n\t\t\treturn ;\n\t\t}\n\t\tx^=p[i];\n\t}\n\treturn ;\n}\nint query(int val,int *p){\n\tint ans=val;\n\tfor(int i=29;i>=0;i--)\n\t\tif((ans^p[i])<ans)\n\t\t\tans^=p[i];\n\treturn ans;\n}\nint find(int x){\n\tif(f[x]==x)return x;\n\treturn find(f[x]);\n}\nint getd(int x){\n\tif(f[x]==x)return 0;\n\treturn dis[x]^getd(f[x]);\n}\nint tp=0;\nint px[maxn],pd[maxn],pr[maxn];\nint update(int k,int *p){\n\tint siz=0;\n\tfor(int i=0;i<upd[k].size();i++){\n\t\tint id=upd[k][i];\n\t\tint u=e[id].x,v=e[id].y;\n\t\tint x=find(u),y=find(v),d=e[id].d;\n\t\td^=(getd(u)^getd(v));\n\t\tif(rk[x]>rk[y])swap(x,y);\n\t\tif(x!=y){\n\t\t\ttp++;\n\t\t\tpx[tp]=x;\n\t\t\tpd[tp]=dis[x];dis[x]=d;\n\t\t\tf[x]=y;\n\t\t\tpr[tp]=rk[y];\n\t\t\tif(rk[x]==rk[y])rk[y]++;\n\t\t\tsiz++;\n\t\t}\n\t\telse\n\t\t\tins(d,p);\n\t}\n\treturn siz;\n}\nvoid clear(int k,int siz){\n\twhile(siz--){\n\t\tint x=px[tp],y=f[x];\n\t\tf[x]=x;\n\t\tdis[x]=pd[tp];\n\t\trk[y]=pr[tp];\n\t\ttp--;\n\t}\n\treturn ;\n}\nvoid solve(int k,int l,int r,int *p){\n\tint siz=update(k,p);\n\tif(l==r){\n\t\tfor(int i=0;i<que[k].size();i++){\n\t\t\tint id=que[k][i];\n\t\t\tans[id]=query(getd(q[id][1])^getd(q[id][2]),p);\n\t\t}\n\t\tclear(k,siz);\n\t\treturn ;\n\t}\n\tint mid=l+((r-l)>>1);\n\tint h[30];\n\tfor(int i=0;i<=29;i++)h[i]=p[i];\n\tsolve(k<<1,l,mid,h);\n\tfor(int i=0;i<=29;i++)h[i]=p[i];\n\tsolve(k<<1|1,mid+1,r,h);\n\tclear(k,siz);\n\treturn ;\n}\nint main(){\n    freopen(\"CF938GShortestPathQueries.in\",\"r\",stdin);\n    freopen(\"CF938GShortestPathQueries.out\",\"w\",stdout);\n    long long n,m,qq;\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++){\n\t\tlong long x,y,d;\n\t\tx=read();y=read();d=read();\n\t\tif(x>y)swap(x,y);\n\t\tmp[x*n+y]=i;\n\t\te[i].x=x;e[i].y=y;e[i].d=d;\n\t\ts[i]=1;\n\t}\n\tlen=m;\n\tqq=read();\n\tint tim=1,Q=0;\n\tfor(int i=1;i<=qq;i++){\n\t\tlong long opt,x,y,d;\n\t\topt=read();x=read();y=read();\n\t\tif(x>y)swap(x,y);\n\t\tif(opt==1){\n\t\t\td=read();\n\t\t\tmp[x*n+y]=++len;\n\t\t\te[len].x=x;e[len].y=y;e[len].d=d;\n\t\t\ts[len]=++tim;\n\t\t}\n\t\telse if(opt==2){\n\t\t\tint id=mp[x*n+y];\n\t\t\tt[id]=tim++;\n\t\t}\n\t\telse{\n\t\t\tQ++;\n\t\t\tq[Q][0]=tim;q[Q][1]=x;q[Q][2]=y;\n\t\t}\n\t}\n\tfor(int i=1;i<=len;i++){\n\t\tif(!t[i])t[i]=tim;\n\t\tmodify1(1,1,tim,s[i],t[i],i);\n\t}\n\tfor(int i=1;i<=Q;i++)\n\t\tmodify2(1,1,tim,q[i][0],i);\n\tfor(int i=1;i<=n;i++)f[i]=i,dis[i]=0,rk[i]=1;\n\tint p[30];\n\tfor(int i=0;i<=29;i++)p[i]=0;\n\tfor(int i=1;i<=Q;i++)ans[i]=1<<30;\n\tsolve(1,1,tim,p);\n\tfor(int i=1;i<=Q;i++)\n\t\tprintf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1591790785,
        "uid": 98527,
        "name": "juju527",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF938G \u3010Shortest Path Queries\u3011"
    },
    {
        "content": "# Shortest Path Queries\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF938G)\n## \u524d\u7f6e\u77e5\u8bc6\n1. \u6309\u79e9\u5408\u5e76\u5e76\u67e5\u96c6\n\n2. \u7ebf\u6027\u57fa\n\n3. \u7ebf\u6bb5\u6811\u5206\u6cbb\n\n## \u601d\u8def\n$\\ \\ \\ \\ \\ $ \u5982\u679c\u4f60\u505a\u8fc7[P4151](https://www.luogu.com.cn/problem/P4151)\u53ef\u80fd\u4f1a\u6709\u4e9b\u5e2e\u52a9\uff0c\u5f53\u7136\u6ca1\u505a\u8fc7\u4e5f\u53ef\u4ee5\u505a\u3002\n\n$\\ \\ \\ \\ \\ $ \u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u6811\u600e\u4e48\u6c42\u51fa\u4efb\u610f\u4e24\u4e2a\u70b9\u7684\u7b54\u6848\u3002\u6211\u4eec\u53ef\u4ee5\u7528$dis[u]$\u8bb0\u5f55$u$\u5230\u6839\u7684\u6743\u503c\u5f02\u6216\u548c\uff0c\u7136\u540e\u5bf9\u4e8e$(u,v)$,\u7b54\u6848\u5c31\u662f$dis[u] \\text { xor } dis[v]$\u3002\u8003\u8651\u5982\u4f55\u62d3\u5c55\u5230\u8054\u901a\u65e0\u5411\u56fe\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u56fe\u4e0a\u7684\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u5982\u679c\u4ece\u8d77\u70b9\u8d70\u8fd9\u4e2a\u73af\u518d\u8d70\u56de\u8d77\u70b9\uff0c\u7b54\u6848\u76f8\u5f53\u4e8e\u5f02\u6216\u4e0a\u4e86\u8fd9\u4e2a\u73af\u7684\u5f02\u6216\u548c\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u4e8e\u8fd9\u4e2a\u56fe\u4e0a\u7684\u6bcf\u4e2a\u73af\u7684\u5f02\u6216\u548c\u90fd\u63d0\u51fa\u6765\uff0c\u4e22\u8fdb\u7ebf\u6027\u57fa\u91cc\u9762\uff0c\u7136\u540e\u7528$dis[u] \\text { xor } dis[v]$\u53bb\u67e5\u8be2\u5c31\u597d\u4e86\u3002\n\n$\\ \\ \\ \\ \\ $ \u56de\u5230\u8fd9\u9053\u9898\uff0c\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\u5c31\u662f\u6bcf\u6761\u8fb9\u53ea\u4f1a\u5728\u67d0\u4e00\u6bb5\u65f6\u95f4\u51fa\u73b0\uff0c\u719f\u6089\u5957\u8def\u7684\u540c\u5b66\u5c31\u4e0d\u96be\u60f3\u5230\u4f7f\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\u6211\u4eec\u76f4\u63a5\u6309\u65f6\u95f4\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u7528\u6309\u79e9\u5408\u5e76\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u6811\u7684\u5f62\u6001\u7684$\\forall \\text {u's } dis[u]$,\u518d\u987a\u4fbf\u6c42\u4e00\u4e0b\u56fe\u4e2d\u7684\u73af\u7684\u5f02\u6216\u548c\u5c31\u597d\u4e86\u3002\n\n$\\ \\ \\ \\ \\ $ \u8fd9\u9053\u9898\u8fd8\u662f\u6709\u4e00\u4e9b\u6bd4\u8f83$\\text {naive}$\u7684\u5c0f\u6280\u5de7\uff0c\u5c31\u662f\u7ebf\u6027\u57fa\u8981\u6bcf\u4e00\u5c42\u90fd\u5efa\u4e00\u4e2a\uff0c\u56e0\u4e3a\u4f60\u63d2\u5165\u4e86\u6570\u503c\u4e4b\u540e\u5c31\u4e0d\u597d\u5220\u9664\uff0c\u800c\u4e14\u5728\u540c\u4e00\u5c42\u5185\u4e0d\u540c\u6bb5\u7684\u503c\u4e24\u4e24\u4e0d\u5e72\u6270\uff0c\u5c31\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u4e86\u3002\n## $\\text {Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define Int register int\n#define MAXN 200005\n\nint read ()\n{\n\tint x = 0;char c = getchar();int f = 1;\n\twhile (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}\n\twhile (c >= '0' && c <= '9'){x = (x << 3) + (x << 1) + c - '0';c = getchar();}\n\treturn x * f;\n}\n\nvoid write (int x)\n{\n\tif (x < 0){x = -x;putchar ('-');}\n\tif (x > 9) write (x / 10);\n\tputchar (x % 10 + '0');\n}\n\nclass Line_Base//\u7ebf\u6027\u57fa\n{\n\tprivate:\n\t\tint b[31];\n\tpublic:\n\t\tvoid Insert (int w)\n\t\t{\n\t\t\tfor (Int i = 29;i >= 0;-- i)\n\t\t\t{\n\t\t\t\tif (!(w >> i)) continue;\n\t\t\t\tif (!b[i])\n\t\t\t\t{\n\t\t\t\t\tb[i] = w;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tw ^= b[i];\n\t\t\t}\n\t\t}\n\t\tint query (int w)\n\t\t{\n\t\t\tfor (Int i = 29;i >= 0;-- i)\n\t\t\t{\n\t\t\t\tif (!((w >> i) & 1)) continue;\n\t\t\t\tw ^= b[i];\n\t\t\t}\n\t\t\treturn w;\n\t\t}\n}Lb[20]; \n\nstruct T{int fa,w,size;};//\u6309\u79e9\u5408\u5e76\u5e76\u67e5\u96c6\u7684\u4e00\u4e2a\u8282\u70b9 \n\nstruct Dsu\n{\n\tT t[MAXN];\n\tint findSet (int x,int &w)\n\t{\n\t\twhile (x != t[x].fa) w ^= t[x].w,x = t[x].fa;\n\t\treturn x;\n\t}\n\tvoid Merge (int x,int y,int w,int id)\n\t{\n\t\tif (x == y) return Lb[id].Insert (w);\n\t\tif (t[x].size > t[y].size) swap (x,y);\n\t\tt[x].fa = y,t[x].w = w,t[y].size += t[x].size; \n\t}\n\tint query (int x,int y,int id)\n\t{\n\t\tint w = 0;\n\t\tfindSet (x,w),findSet (y,w);\n\t\treturn Lb[id].query (w);\n\t}\n}dsu;\n\nstruct Node{int x,y;};\n\nvector <Node> Que[MAXN];\n\nstruct Edge{int x,y,l,r,w;}e[MAXN << 1];\n\nclass Segment\n{\n\tprivate:\n\t\tT stt[MAXN << 2];\n\t\tint top,tag[20],st[MAXN << 2];//tag\u662f\u6bcf\u4e00\u5c42\u539f\u5148\u7684\u5e76\u67e5\u96c6\u4e2d\u9700\u8981\u64a4\u9500\u7684\u70b9\u7684\u4e2a\u6570 \n\t\tvector <Edge> tree[MAXN << 2];\n\tpublic:\n\t\tvoid update (int k,int l,int r,Edge e)\n\t\t{\n\t\t\tif (l > e.r || e.l > r) return ;\n\t\t\tif (e.l <= l && r <= e.r) return tree[k].push_back (e);\n\t\t\tint mid = (l + r) >> 1; \n\t\t\tupdate (k << 1,l,mid,e);\n\t\t\tupdate (k << 1 | 1,mid + 1,r,e);\n\t\t}\n\t\tvoid Insert (int k,int d)//k\u8fd9\u4e2a\u70b9\uff0c\u7b2cd\u5c42 \n\t\t{\n\t\t\tLb[d] = Lb[d - 1],tag[d] = top;\n\t\t\tfor (Int i = 0;i < tree[k].size();++ i)\n\t\t\t{\n\t\t\t\tint x = tree[k][i].x,y = tree[k][i].y,wx = 0,wy = 0;\n\t\t\t\tx = dsu.findSet (x,wx),y = dsu.findSet (y,wy);\n\t\t\t\tst[++ top] = x,stt[top] = dsu.t[x];\n\t\t\t\tst[++ top] = y,stt[top] = dsu.t[y];\n\t\t\t\tdsu.Merge (x,y,wx ^ wy ^ tree[k][i].w,d);\n\t\t\t}\n\t\t}\n\t\tvoid Delete (int d)//\u5bf9\u4e8ed\u8fd9\u4e00\u5c42\u8fdb\u884c\u5e76\u67e5\u96c6\u7684\u64a4\u9500\n\t\t{\n\t\t\twhile (top > tag[d]) dsu.t[st[top]] = stt[top],top --;\n\t\t} \n\t\tvoid Divide (int k,int l,int r,int d)\n\t\t{\n\t\t\tInsert (k,d);\n\t\t\tif (l == r)\n\t\t\t{\n\t\t\t\tfor (Int i = 0;i < Que[l].size();++ i)\n\t\t\t\t\twrite (dsu.query (Que[l][i].x,Que[l][i].y,d)),putchar ('\\n');\n\t\t\t\treturn Delete (d);\n\t\t\t}\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tDivide (k << 1,l,mid,d + 1);\n\t\t\tDivide (k << 1 | 1,mid + 1,r,d + 1);\n\t\t\tDelete (d);\n\t\t}\n}Tree;\n\nmap <int,int> mp[MAXN];\n\nsigned main()\n{\n\tint n = read (),m = read ();\n\tfor (Int i = 1;i <= n;++ i) dsu.t[i] = T{i,0,1};\n\tfor (Int i = 1;i <= m;++ i)\n\t{\n\t\tint u = read (),v = read (),w = read ();\n\t\te[mp[u][v] = mp[v][u] = i] = Edge {u,v,1,0,w};\n\t}\n\tint q = read ();\n\tint ecnt = m,cnt = 1;\n\tfor (Int i = 1;i <= q;++ i)\n\t{\n\t\tint type = read (),x = read (),y = read ();\n\t\tif (type == 1) e[mp[x][y] = mp[y][x] = ++ ecnt] = Edge {x,y,++ cnt,0,read ()};\n\t\telse if (type == 2) e[mp[x][y]].r = cnt ++;\n\t\telse Que[cnt].push_back (Node {x,y}); \n\t}\n\tfor (Int i = 1;i <= ecnt;++ i)\n\t{\n\t\tif (e[i].r == 0) e[i].r = cnt;\n\t\tTree.update (1,1,cnt,e[i]);\n\t}\n\tTree.Divide (1,1,cnt,1);\n\treturn 0;\n}\n```",
        "postTime": 1584453677,
        "uid": 124781,
        "name": "Walking_Dead",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF938G \u3010Shortest Path Queries\u3011"
    },
    {
        "content": "\u624b\u6253\u56db\u767e\u884c\u7136\u540e\u76f4\u63a5\u8fc7\u4e86\uff0c\u6709\u70b9\u5c0f\u6fc0\u52a8\u3002\n\n\u8003\u8651\u6700\u5c0f\u975e\u7a7a\u5b50\u96c6\u5f02\u6216\u548c\u7684\u6a21\u578b\uff0c\u5efa\u7acb\u51fa\u7ebf\u6027\u57fa\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u5982\u679c\u786c\u70b9\u4e86\u9009\u4e00\u4e2a\u6570 $x$\uff0c\u4ece\u7ebf\u6027\u57fa\u91cc\u63d0\u53d6\uff0c\u5c3d\u53ef\u80fd\u5730\u628a $x$ \u7684 $1$ \u6d88\u6389\u5373\u53ef\u3002\n\n\u90a3\u4e48\u8fd9\u91cc\u663e\u7136\u7ebf\u6bb5\u6811\u5206\u6cbb\u4e00\u4e0b\uff0c\u7136\u540e[\u7167\u732b\u753b\u864e](https://www.luogu.com.cn/problem/P4151)\uff0c\u5206\u6cbb\u7684\u65f6\u5019\u628a\u6240\u6709\u7684\u73af\u90fd\u4e22\u8fdb\u7ebf\u6027\u57fa\u91cc\uff0c\u6700\u540e\u968f\u4fbf\u53d6\u4e00\u6761\u8def\u5f84\u4f5c\u4e3a\u521d\u59cb\u503c\u5373\u53ef\u3002\n\n$\\text{LCT}$ \u7ef4\u62a4\u3002\n\n\u590d\u6742\u5ea6 $\\mathrm O(n\\log^2n)$ \u3002\n\n```cpp\n#pragma GCC optimize(\"Ofast,inline,unroll-loops,fast-math\")\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <map>\n#include <utility>\n#include <tuple>\n#define N 200020\n#define M 30\nusing namespace std;\n\nclass Linear\n{\npublic:\n    int f[M];\n\n    Linear(void)\n    {\n        memset(f, 0, sizeof(f));\n\n        return;\n    }\n\n    void InsertLinear(int x)\n    {\n        int i, j;\n\n        for(i = M - 1; i > -1; i --)\n            if(x & (1 << i))\n            {\n                if(f[i])\n                {\n                    x ^= f[i];\n                    continue;\n                }\n\n                for(j = 0; j < i; j ++)\n                    if(x & (1 << j))\n                        x ^= f[j];\n                for(j = i + 1; j < M; j ++)\n                    if(f[j] & (1 << i))\n                        f[j] ^= x;\n                f[i] = x;\n                break;\n            }\n\n        return;\n    }\n};\n\nclass Node\n{\npublic:\n    Node *s[2];\n    Node *p;\n    Node *q;\n    int v;\n    int x;\n    bool f;\n\n    Node(int _v = 0) : v(_v), x(_v), f(false)\n    {\n        s[0] = s[1] = p = q = NULL;\n\n        return;\n    }\n\n    bool Relation(void)\n    {\n        return this == p -> s[1];\n    }\n\n    void Maintain(void)\n    {\n        x = v;\n        if(s[0])\n        {\n            x ^= s[0] -> x;\n            s[0] -> f ^= f;\n        }\n        if(s[1])\n        {\n            x ^= s[1] -> x;\n            s[1] -> f ^= f;\n        }\n        if(f)\n        {\n            swap(s[0], s[1]);\n            f = false;\n        }\n\n        return;\n    }\n\n    void Pushdown(void)\n    {\n        if(p)\n            p -> Pushdown();\n        Maintain();\n\n        return;\n    }\n};\n\nNode f[N];\nvector<tuple<int, int, int> > g[N << 2];\npair<int, int> q[N << 2];\nint o[N];\n\nvoid RotateLCT(Node *x)\n{\n    Node *p;\n    int k;\n\n    p = x -> p;\n    k = x -> Relation();\n\n    x -> q = p -> q;\n    p -> q = NULL;\n\n    x -> p = p -> p;\n    if(x -> p)\n        x -> p -> s[p -> Relation()] = x;\n\n    p -> s[k] = x -> s[!k];\n    if(p -> s[k])\n        p -> s[k] -> p = p;\n\n    x -> s[!k] = p;\n    p -> p = x;\n\n    p -> Maintain();\n    x -> Maintain();\n\n    return;\n}\n\nvoid SplayLCT(Node *x)\n{\n    x -> Pushdown();\n    while(x -> p)\n        if(x -> p -> p)\n        {\n            if(x -> p -> Relation() == x -> Relation())\n                RotateLCT(x -> p);\n            else\n                RotateLCT(x);\n            RotateLCT(x);\n        }\n        else\n            RotateLCT(x);\n\n    return;\n}\n\nvoid ExposeLCT(Node *x)\n{\n    SplayLCT(x);\n    if(x -> s[1])\n    {\n        x -> s[1] -> q = x;\n        x -> s[1] -> p = NULL;\n        x -> s[1] = NULL;\n    }\n\n    return;\n}\n\nbool SpliceLCT(Node *x)\n{\n    SplayLCT(x);\n    if(!x -> q)\n        return false;\n\n    ExposeLCT(x -> q);\n    x -> q -> s[1] = x;\n    x -> p = x -> q;\n    x -> q = NULL;\n\n    return true;\n}\n\nvoid AccessLCT(Node *x)\n{\n    for(ExposeLCT(x); SpliceLCT(x); )\n        ;\n\n    return;\n}\n\nvoid EvertLCT(Node *x)\n{\n    AccessLCT(x);\n    x -> f ^= 1;\n\n    return;\n}\n\nNode *FindLCT(Node *x)\n{\n    AccessLCT(x);\n    SplayLCT(x);\n    for(; x -> s[0]; x = x -> s[0])\n        ;\n    SplayLCT(x);\n\n    return x;\n}\n\nvoid LinkLCT(Node *x, Node *y)\n{\n    EvertLCT(x);\n    x -> q = y;\n\n    return;\n}\n\nvoid CutLCT(Node *x, Node *y)\n{\n    EvertLCT(x);\n    AccessLCT(y);\n    SplayLCT(x);\n    if(x -> s[1] != y || x -> s[1] -> s[0])\n    {\n        // puts(\"while cutting\");\n        throw;\n    }\n    x -> s[1] -> p = NULL;\n    x -> s[1] = NULL;\n\n    return;\n}\n\nint XorLCT(Node *x, Node *y)\n{\n    EvertLCT(x);\n    AccessLCT(y);\n    SplayLCT(x);\n\n    return x -> x;\n}\n\nvoid InsertSegment(int x, int l, int r, int s, int t, tuple<int, int, int> v)\n{\n    int m;\n\n    if(l > t || r < s)\n        return;\n    if(l >= s && r <= t)\n    {\n        if(get<2>(v) == -1)\n            q[x] = make_pair(get<0>(v), get<1>(v));\n        else\n            g[x].push_back(v);\n\n        return;\n    }\n\n    m = (l + r) >> 1;\n    InsertSegment(x << 1    , l    , m, s, t, v);\n    InsertSegment(x << 1 | 1, m + 1, r, s, t, v);\n\n    return;\n}\n\nvoid UndoSegment(vector<pair<Node *, bool> > &t, vector<tuple<int, int, int> > &g)\n{\n    int i;\n\n    for(i = 0; i < (signed)t.size(); i ++)\n        if(t[i].second)\n        {\n            // printf(\"cut %d-%d\\n\", get<0>(g[i]), get<1>(g[i]));\n            CutLCT(&f[get<0>(g[i])], t[i].first);\n            CutLCT(&f[get<1>(g[i])], t[i].first);\n        }\n\n    return;\n}\n\nvoid DFSSegment(int x, int l, int r, Linear h)\n{\n    int u, v, w;\n    int i, m;\n    vector<pair<Node *, bool> > t;\n\n    for(i = 0; i < (signed)g[x].size(); i ++)\n    {\n        tie(u, v, w) = g[x][i];\n        t.push_back(make_pair(new Node(w), true));\n        if(FindLCT(&f[u]) == FindLCT(&f[v]))\n        {\n            h.InsertLinear(XorLCT(&f[u], &f[v]) ^ w);\n            t.back().second = false;\n        }\n        else\n        {\n            LinkLCT(&f[u], t.back().first);\n            LinkLCT(&f[v], t.back().first);\n            // printf(\"linked %d-%d\\n\", u, v);\n        }\n    }\n\n    if(l == r)\n    {\n        if(q[x].first)\n        {\n            tie(u, v) = q[x];\n            // printf(\"ask %d-%d\\n\", u, v);\n            if(FindLCT(&f[u]) != FindLCT(&f[v]))\n                throw;\n            w = XorLCT(&f[u], &f[v]);\n\n            for(i = M - 1; i > -1; i --)\n                if(w & (1 << i))\n                    w ^= h.f[i];\n            o[l] = w;\n        }\n        UndoSegment(t, g[x]);\n\n        return;\n    }\n\n    m = (l + r) >> 1;\n    DFSSegment(x << 1    , l    , m, h);\n    DFSSegment(x << 1 | 1, m + 1, r, h);\n    UndoSegment(t, g[x]);\n\n    return;\n}\n\nint main(void)\n{\n    int n, m, u, v, w;\n    int i;\n    map<pair<int, int>, pair<int, int> > f;\n    map<pair<int, int>, pair<int, int> >::iterator t;\n\n    scanf(\"%d %d\", &n, &m);\n    while(m --)\n    {\n        scanf(\"%d %d %d\", &u, &v, &w);\n        if(u > v)\n            swap(u, v);\n        f[make_pair(u, v)] = make_pair(w, 0);\n    }\n\n    scanf(\"%d\", &m);\n    for(i = 1; i <= m; i ++)\n    {\n        scanf(\"%d %d %d\", &w, &u, &v);\n        if(u > v)\n            swap(u, v);\n        if(w == 1)\n        {\n            scanf(\"%d\", &w);\n            f[make_pair(u, v)] = make_pair(w, i);\n        }\n        else if(w == 2)\n        {\n            InsertSegment(1, 0, m, f[make_pair(u, v)].second, i - 1, make_tuple(u, v, f[make_pair(u, v)].first));\n            f.erase(make_pair(u, v));\n        }\n        else\n            InsertSegment(1, 0, m, i, i, make_tuple(u, v, -1));\n    }\n    for(t = f.begin(); t != f.end(); ++ t)\n        InsertSegment(1, 0, m, t -> second.second, m, make_tuple(t -> first.first, t -> first.second, t -> second.first));\n\n    memset(o, -1, sizeof(o));\n    DFSSegment(1, 0, m, Linear());\n    for(i = 1; i <= m; i ++)\n        if(o[i] != -1)\n            printf(\"%d\\n\", o[i]);\n\n    return 0;\n}\n\n```",
        "postTime": 1590625398,
        "uid": 34354,
        "name": "gorokokoro",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF938G \u3010Shortest Path Queries\u3011"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u8003\u8651\u539f\u56fe\u4e2d\u7684\u4e00\u4e2a\u73af\uff0c\u5728\u539f\u6765\u7684\u8def\u5f84\u57fa\u7840\u4e0a\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u73af\u6765\u8fdb\u884c\u589e\u5e7f\uff0c\u800c\u8def\u5f84\u5230\u8fd9\u4e2a\u73af\u4e4b\u95f4\u7684\u6743\u503c\u7531\u4e8e\u5f02\u6216\u4e24\u904d\u5c31\u6ca1\u6709\u8d21\u732e\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u5982\u679c\u6211\u4eec\u5bf9\u4e8e$u$\uff0c$v$\u786e\u5b9a\u7684\u4efb\u610f\u8def\u5f84\uff0c\u6709\u610f\u4e49\u7684\u589e\u5e7f\u53ea\u6709\u73af\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f\u4efb\u610f\u8def\u5f84\u8bfb\u8005\u53ef\u4ee5\u81ea\u884c\u601d\u8003\u4e0b\u3002\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u4e0d\u96be\u4e86\uff0c\u6211\u4eec\u8003\u8651\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u8bb0\u5f55\u4e00\u4e2a\u5b58\u6d3b\u65f6\u95f4\uff0c\u538b\u5230\u7ebf\u6bb5\u6811\u4e2d\uff0c\u5bf9\u4e8e\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u4efb\u610f\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u540c\u65f6\u7ef4\u62a4\u4e00\u4e0b$u$\u5230$fa_u$\u7684\u6743\u503c\uff0c\u5bf9\u4e8e\u73af\u6211\u4eec\u538b\u5230\u7ebf\u6027\u57fa\u4e2d\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\nconst int N=2e5+5;\n\nstruct edge\n{\n    int u,v,w;\n};\nstruct node\n{\n    int x,y;\n    bool operator<(const node&a)const\n    {\n        return (x==a.x)?y<a.y:x<a.x;\n    }\n};\nstruct rt\n{\n    int p[32];\n\n    void insert(int x)\n    {\n        for(int i=29;i>=0;--i)\n        {\n            if(!((x>>i)&1)) continue;\n            if(!p[i])\n            {\n                p[i]=x;\n                break;\n            }\n            x^=p[i];\n        }\n    }\n    int query(int x)\n    {\n        for(int i=29;i>=0;--i) if((x^p[i])<x) x^=p[i];\n        return x;\n    }\n}sr;\n\nint n,m,q,top,sig;\nint anc[N],dis[N],d[N],be[N<<1],ed[N<<1];\nint qu[N],qv[N];\nedge e[N<<1];\nvc<int>t[N<<2];\nnode stk[N<<4];\nbool isq[N];\nmap<node,int>s;\n\nvoid update(int x,int y,int l,int r,int i,int o)\n{\n    if(l>=x&&r<=y)\n    {\n        t[o].pub(i);\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(x<=mid) update(x,y,l,mid,i,o<<1);\n    if(y>mid) update(x,y,mid+1,r,i,o<<1|1);\n}\nvoid undo()\n{\n    int x=stk[top].x,y=stk[top].y;\n    --top;\n    d[anc[x]]-=y,anc[x]=x,dis[x]=0;\n}\nint find(int x)\n{\n    if(anc[x]==x) return x;\n    return find(anc[x]);\n}\nint getdis(int x)\n{\n    if(anc[x]==x) return 0;\n    return dis[x]^getdis(anc[x]);\n}\nvoid solve(int l,int r,int o,rt g)\n{\n    int num=top;\n    for(auto i:t[o])\n    {\n        int u=e[i].u,v=e[i].v,w=e[i].w;\n        int fx=find(u),fy=find(v);\n        w^=getdis(u)^getdis(v);\n        if(fx==fy) g.insert(w);\n        else\n        {\n            if(d[fx]>d[fy]) swap(fx,fy);\n            anc[fx]=fy,dis[fx]=w,d[fy]+=d[fx]==d[fy];\n            stk[++top]={fx,d[fx]==d[fy]};\n        }\n    }\n    if(l==r)\n    {\n        if(isq[l]) \n        {\n            int t=getdis(qu[l])^getdis(qv[l]);\n            print(g.query(t)),pc(10);\n        }\n    }\n    else\n    {\n        int mid=(l+r)>>1;\n        solve(l,mid,o<<1,g),solve(mid+1,r,o<<1|1,g);\n    }\n    while(top>num) undo();\n}\nint main()\n{\n    fio();\n    gi(n,m);\n    for(int i=1;i<=m;++i) gi(e[i].u,e[i].v,e[i].w);\n    gi(q);\n    for(int i=1;i<=m;++i) be[i]=1,ed[i]=q,s[{e[i].u,e[i].v}]=i;\n    for(int i=1,op,x,y,z;i<=q;++i)\n    {\n        gi(op,x,y);\n        if(op==1)\n        {\n            gi(z),++m;\n            e[m].u=x,e[m].v=y,e[m].w=z;\n            be[m]=i,ed[m]=q,s[{x,y}]=m;\n        }\n        else if(op==2) ed[s[{x,y}]]=i-1;\n        else\n        {\n            isq[i]=true;\n            qu[i]=x,qv[i]=y;\n        }\n    }\n    for(int i=1;i<=m;++i) if(be[i]<=ed[i]) update(be[i],ed[i],1,q,i,1);\n    for(int i=1;i<=n;++i) anc[i]=i;\n    solve(1,q,1,sr);\n    end();\n}\n```",
        "postTime": 1582263905,
        "uid": 208081,
        "name": "MikukuOvO",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF938G \u3010Shortest Path Queries\u3011"
    },
    {
        "content": "\u9898\u76ee\u8ba9\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u8fb9\u6709\u8fb9\u6743\uff0c\u652f\u6301\u52a0\u8fb9\u5220\u8fb9\u548c\u8be2\u95ee\u4ece$x$\u5230$y$\u7684\u5f02\u6216\u6700\u77ed\u8def\u3002\n\n\u8003\u8651\u5230\u6709\u5220\u8fb9\u8fd9\u6837\u7684\u64a4\u9500\u64cd\u4f5c\uff0c\u90a3\u4e48\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u6765\u5b9e\u73b0\uff0c\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u8be2\u95ee\u7684\u65f6\u95f4\u8f74\u3002\n\n\u5c06\u6bcf\u4e00\u6761\u8fb9\u7684\u51fa\u73b0\u65f6\u95f4\u6bb5\u6807\u8bb0\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u8868\u793a\u5728\u8fd9\u4e00\u6bb5\u8be2\u95ee\u4e2d\u8fd9\u6761\u8fb9\u5b58\u5728\u3002\n\n\u5f02\u6216\u6700\u77ed\u8def\u7684\u5904\u7406\u65b9\u6cd5\u4e0e[\u6700\u5927XOR\u548c\u8def\u5f84](https://www.luogu.com.cn/problem/P4151)\u7c7b\u4f3c\uff0c\u7ed9\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a\u7ebf\u6027\u57fa\uff0c\u627e\u51fa\u5f53\u524d\u6240\u6709\u7684\u73af\uff0c\u63d2\u5165\u8be5\u8282\u70b9\u7684\u7ebf\u6027\u57fa\uff0c\u67e5\u8be2\u65f6\u4efb\u610f\u627e\u51fa\u4e00\u6761\u4ece$x$\u5230$y$\u7684\u8def\u5f84\uff0c\u5230\u7ebf\u6027\u57fa\u4e2d\u67e5\u8be2\uff0c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u65f6\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\uff0c\u91c7\u7528\u6309\u79e9\u5408\u5e76\u6765\u4f18\u5316\uff0c\u56e0\u4e3a\u8def\u5f84\u538b\u7f29\u4f1a\u7834\u574f\u6811\u7684\u7ed3\u6784\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u770b\u4ee3\u7801\u5427\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 400010\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n\tx=0;char c=getchar();bool flag=false;\n\twhile(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n\twhile(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\tif(flag)x=-x;\n}\nint n,m,q,num,tree_cnt,edge_cnt,root,top;\nint ls[maxn],rs[maxn],pre[maxn],nxt[maxn],ans[maxn];\nmap<pair<int,int>,int> mp;\nstruct Edge\n{\n    int x,y,v;\n}e[maxn];\nstruct node\n{\n    int x,y,deep;\n}st[maxn];\nstruct query\n{\n    int x,y;\n}qu[maxn];\nvoid build(int l,int r,int &cur)\n{\n    if(!cur) cur=++tree_cnt;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    build(l,mid,ls[cur]);\n    build(mid+1,r,rs[cur]);\n}\nvector<int> v[maxn];\nvoid insert(int L,int R,int l,int r,int id,int cur)\n{\n    if(L<=l&&R>=r)\n    {\n        v[cur].push_back(id);\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(L<=mid) insert(L,R,l,mid,id,ls[cur]);\n    if(R>mid) insert(L,R,mid+1,r,id,rs[cur]);\n}\nint a[maxn][40];\nvoid ins(int x,int cur)\n{\n    for(int i=30;i>=0;--i)\n    {\n        if(x&(1<<i))\n        {\n            if(!a[cur][i])\n            {\n                a[cur][i]=x;\n                break;\n            }\n            else x^=a[cur][i];\n        }\n    }\n}\nint get(int x,int cur)\n{\n    for(int i=30;i>=0;--i)\n        if((x^a[cur][i])<x)\n            x^=a[cur][i];\n    return x;\n}\nint fa[maxn],de[maxn],dis[maxn];\nint find(int x)\n{\n    return fa[x]==x?x:find(fa[x]);\n}\nint xor_dis(int x)\n{\n    return fa[x]==x?dis[x]:dis[x]^xor_dis(fa[x]);\n}\nvoid merge(int x,int y,int v)\n{\n    if(de[x]<de[y]) swap(x,y);\n    st[++top]=(node){x,y,de[x]};\n    fa[y]=x,dis[y]=v,de[x]=max(de[x],de[y]+1);\n}\nvoid del(int id)\n{\n    int x=st[id].x,y=st[id].y;\n    fa[y]=y,dis[y]=0,de[x]=st[id].deep;\n}\nvoid copy(int x,int y)\n{\n    for(int i=0;i<=30;++i) a[y][i]=a[x][i];\n}\nvoid dfs(int l,int r,int cur)\n{\n    int now=top,size=v[cur].size();\n    for(int i=0;i<size;++i)\n    {\n        int id=v[cur][i],x=e[id].x,y=e[id].y,v=e[id].v;\n        v^=xor_dis(x)^xor_dis(y),x=find(x),y=find(y);\n        if(x==y) ins(v,cur);\n        else merge(x,y,v);\n    }\n    if(l==r)\n    {\n        int x=qu[l].x,y=qu[l].y;\n        ans[l]=get(xor_dis(x)^xor_dis(y),cur);\n    }\n    else\n    {\n        int mid=(l+r)>>1;\n        copy(cur,ls[cur]),dfs(l,mid,ls[cur]);\n        copy(cur,rs[cur]),dfs(mid+1,r,rs[cur]);\n    }\n    while(top>now) del(top--);\n}\nint main()\n{\n    read(n),read(m),edge_cnt=m;\n    for(int i=1;i<=n;++i) fa[i]=i;\n    for(int i=1;i<=m;++i)\n    {\n        read(e[i].x),read(e[i].y),read(e[i].v);\n        mp[make_pair(e[i].x,e[i].y)]=i,pre[i]=1,nxt[i]=-1;\n    }\n    read(q);\n    while(q--)\n    {\n        int opt,x,y,v;\n        read(opt);\n        if(opt==1)\n        {\n            read(x),read(y),read(v);\n            e[++edge_cnt]=(Edge){x,y,v};\n            mp[make_pair(x,y)]=edge_cnt;\n            pre[edge_cnt]=num+1,nxt[edge_cnt]=-1;\n        }\n        if(opt==2)\n        {\n            read(x),read(y);\n            nxt[mp[make_pair(x,y)]]=num;\n        }\n        if(opt==3)\n        {\n            read(x),read(y);\n            qu[++num]=(query){x,y};\n        }\n    }\n    build(1,num,root);\n    for(int i=1;i<=edge_cnt;++i)\n    {   \n        if(nxt[i]<0) nxt[i]=num;\n        if(pre[i]<=nxt[i]) insert(pre[i],nxt[i],1,num,i,root);\n    }\n    dfs(1,num,root);\n    for(int i=1;i<=num;++i)\n        printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1580099895,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF938G \u3010Shortest Path Queries\u3011"
    },
    {
        "content": "> \u9898\u76ee\u94fe\u63a5\uff1a[Shortest Path Queries](https://www.luogu.com.cn/problem/CF938G)\n\n\u9996\u5148\u6211\u4eec\u90fd\u77e5\u9053\u5bf9\u4e8e\u4e00\u4e2a\u56fe\uff0c\u4e24\u70b9\u4e4b\u95f4\u7684\u5f02\u6216\u6700\u77ed/\u6700\u957f\u8def\u5c31\u662f\uff1a\u968f\u4fbf\u62ce\u4e00\u6761\u8def\u5f84\u51fa\u6765\uff0c\u8bbe\u8fd9\u6761\u8def\u5f84\u4e0a $\\text{xor}$ \u548c\u4e3a $w$\uff0c\u628a $w$ \u6254\u8fdb\u56fe\u4e2d\u6240\u6709\u73af\u7684\u73af\u4e0a\u8fb9\u6743\u5f02\u6216\u548c\u7ec4\u6210\u7684\u96c6\u5408\u7684\u7ebf\u6027\u57fa\uff0c\u4efb\u610f\u5f02\u6216\u4e4b\u540e\u5f97\u5230\u7684\u6700\u5927/\u6700\u5c0f\u503c\u3002\u73af\u7684\u4e2a\u6570\u53ef\u4ee5\u662f\u6307\u6570\u7ea7\uff0c\u4f46\u5b9e\u9645\u4e0a\u968f\u4fbf\u62ce\u4e00\u68f5\u751f\u6210\u6811\u540e\u9009\u53d6\u6bcf\u6761\u975e\u6811\u8fb9\u4e0e\u975e\u6811\u8fb9\u4e2d\u90a3\u6761\u94fe\u6784\u6210\u7684\u73af\u4e0a\u9762\u7684\u8fb9\u6743\u5f02\u6216\u548c\uff0c\u6c42\u4e00\u4e0b\u7ebf\u6027\u57fa\uff0c\u5f97\u5230\u7684\u7ebf\u6027\u57fa\u5c31\u662f\u6b63\u786e\u7684\u3002\n\n\u4e0a\u9762\u8fd9\u4e9b\u90fd\u662f\u524d\u7f6e\u77e5\u8bc6\uff0c\u4e0d\u61c2\u8fd9\u4e9b\u53ef\u4ee5\u5148\u53bb\u505a\u505a P4151\u3002\u4e0b\u9762\u8bf4\u4e00\u4e0b\u672c\u9898\u7684\u91cd\u70b9\n\n\u6309\u7167\u4e4b\u524d\u7684\u5957\u8def\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u68f5 dfs \u751f\u6210\u6811\uff0c\u5c3d\u7ba1\u9898\u76ee\u4fdd\u8bc1\u4e86\u56fe\u4e00\u76f4\u8fde\u901a\uff0c\u4f46\u662f\u5982\u679c\u5220\u9664\u7684\u8fb9\u6070\u597d\u662f\u4e00\u6761\u6811\u8fb9\u6211\u4eec\u53d1\u73b0\u5c31\u5bc4\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u7ef4\u62a4\u751f\u6210\u6811\u662f\u4e0d\u53ef\u884c\u7684\uff08\u6216\u8bb8\u5199 LCT \u662f\u53ef\u884c\u7684\n\n\u90a3\u8fd9\u79cd\u9898\u4e0d\u60f3\u5199 LCT \u4e00\u822c\u4e5f\u5c31\u662f\u7ebf\u6bb5\u6811\u5206\u6cbb\u4e86\u3002\u8003\u8651\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u90a3\u4e48\u73b0\u5728\u9700\u8981\u652f\u6301\u52a0\u8fb9\u548c\u64a4\u9500\u3002\n\n\u7528\u5e76\u67e5\u96c6\u53ef\u4ee5\u8f7b\u677e\u7ef4\u62a4\u8fde\u901a\u6027\u3002\u5047\u8bbe\u73b0\u5728\u52a0\u4e86\u4e00\u6761\u8fb9 $(x,y)$\uff0c\u5982\u679c $x,y$ \u5df2\u7ecf\u8fde\u901a\u90a3\u4e48\u610f\u5473\u7740\u591a\u4e86\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053 $x,y$ \u5728\u6b64\u65f6\u6811\u4e0a\u7684\u8def\u5f84\u5f02\u6216\u548c\u3002\u90a3\u4e48\u53ea\u9700\u8981\u7ef4\u62a4\u68ee\u6797\u4e2d\u6bcf\u68f5\u6811\u4e0a\u6bcf\u4e2a\u70b9\u5230\u5404\u81ea\u6839\u8def\u5f84\u4e0a\u8fb9\u6743\u5f02\u6216\u548c\u5373\u53ef\u3002\u8bb0\u8fd9\u4e2a\u503c\u4e3a $f(i)$\uff0c\u90a3\u4e48\u65b0\u589e\u7684\u73af\u7684\u8fb9\u6743\u5f02\u6216\u548c\u5c31\u662f $f(x)\\oplus f(y)\\oplus w$\uff0c\u5176\u4e2d $\\oplus$ \u8868\u793a\u5f02\u6216\u3002\n\n\u4f46\u95ee\u9898\u5728\u4e8e\u5f53 $x,y$ \u5c5e\u4e8e\u68ee\u6797\u4e2d\u4e0d\u540c\u7684\u6811\u65f6\uff0c\u6709\u8bb8\u591a\u70b9\u7684 $f$ \u503c\u90fd\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u600e\u4e48\u529e\u5462\n\n\u6211\u4eec\u53d1\u73b0\u5f53\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u65f6\uff0c\u5982\u679c\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u6070\u597d\u662f\u4e24\u8fb9\u8fde\u901a\u5757\u7684\u6811\u6839\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fb9\u5e26\u6743\u7684\u5e76\u67e5\u96c6\u8fdb\u884c\u7ef4\u62a4\u3002\u5f53\u8fd9\u4e24\u4e2a\u70b9\u4e0d\u662f\u6811\u6839\u65f6\uff0c\u8bbe\u4e24\u8fb9\u6811\u6839\u5206\u522b\u4e3a $r_1,r_2$\uff0c\u4e24\u4e2a\u70b9\u4e3a $x_1,x_2$\u3002\u82e5\u65b0\u589e\u7684\u8fb9\u8fb9\u6743\u4e3a $w$\uff0c\u53ef\u4ee5\u8bc1\u660e\uff1a\n\n- \u5728 $x_1,x_2$ \u95f4\u52a0\u8fb9\u6743\u4e3a $w$ \u7684\u8fb9\u7b49\u4ef7\u4e8e\u5728 $r_1,r_2$ \u4e4b\u95f4\u52a0\u8fb9\u6743\u4e3a $w\\oplus d(x_1,r_1)\\oplus d(x_2,r_2)$ \u7684\u8fb9\u3002\n\n\u5176\u4e2d $d(i,j)$ \u8868\u793a\u6811\u4e0a $i,j$ \u4e24\u70b9\u95f4\u8fb9\u6743\u5f02\u6216\u548c\u3002\u8fd9\u4e2a\u8bc1\u660e\u5b9e\u5728\u975e\u5e38\u663e\u7136\uff0c\u7559\u7ed9\u8bfb\u8005\u3002\n\n\u90a3\u4e48\u73b0\u5728\u5c31\u53ef\u4ee5\u4f7f\u7528\u5e26\u64a4\u9500\u7684\u8fb9\u5e26\u6743\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e86\u3002\u540c\u65f6\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u652f\u6301\u64a4\u9500\u7684\u7ebf\u6027\u57fa\uff0c\u8fd9\u4e2a\u53ea\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u4e0a dfs \u7684\u65f6\u5019\u8bb0\u5f55\u4e0b\u6bcf\u5c42\u7684\u7ebf\u6027\u57fa\u5f62\u6001\u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\tfor(;(c<'0'||c>'9');c=getchar()){if(c=='-')f=-1;}\n\tfor(;(c>='0'&&c<='9');c=getchar())x=x*10+(c&15);\n\treturn x*f;\n}\n\nconst int N=4e5+5;\nconst int D=30,LG=20;\n\nstruct Edge{\n\tint u,v,w;\n\tEdge(int U,int V,int W):u(U),v(V),w(W){}\n\tEdge(){}\n};\nvector<Edge>vec[N<<2];\nint bas[D],tmp[LG][D];\nint fa[N],dis[N],sz[N];\n\nint find(int x){return x==fa[x]?x:find(fa[x]);}\nint getdis(int x){return fa[x]==x?0:(dis[x]^getdis(fa[x]));}\n\nvoid ins(int x){\n\tfor(int i=D-1;i>=0;i--){\n\t\tint c=((x>>i)&1);\n\t\tif(!c)continue;\n\t\tif(bas[i]){x^=bas[i];continue;}\n\t\telse{bas[i]=x;return ;}\n\t}\n}\nint get(int w){\n\tfor(int i=D-1;i>=0;i--)if((w^bas[i])<w)w^=bas[i];\n\treturn w;\n}\n\npair<int,int>stk[N<<1];\nint top=0;\n\n#define fi first\n#define se second\n#define mk make_pair\n\nvoid addEdge(Edge t){\n\tint u=t.u,v=t.v,w=t.w;\n\tint fu=find(u),fv=find(v);\n\tif(fu==fv){ins(getdis(u)^getdis(v)^w);return ;}\n\tw^=getdis(u)^getdis(v);if(sz[fu]>sz[fv])swap(fu,fv);\n\tfa[fu]=fv,dis[fu]=w,stk[++top]=mk(fu,fv),sz[fv]+=sz[fu];\n}\nvoid del(int id){\n\tint u=stk[id].fi,v=stk[id].se;\n\tfa[u]=u,dis[u]=0,sz[v]-=sz[u];\n}\n\nint ans[N];\nstruct Node{\n\tint x,y,id;\n\tNode(int X,int Y,int I):x(X),y(Y),id(I){}\n\tNode(){}\n};\nNode q[N];\n\n#define ls(p) (p<<1)\n#define rs(p) (p<<1|1)\nvoid add(int l,int r,Edge t,int ql,int qr,int p){\n\tif(l<=ql&&qr<=r){vec[p].emplace_back(t);return ;}\n\tint mid=(ql+qr)>>1;\n\tif(l<=mid)add(l,r,t,ql,mid,ls(p));\n\tif(r>mid)add(l,r,t,mid+1,qr,rs(p));\n}\nvoid dfs(int l,int r,int p,int d){\n\tmemcpy(tmp[d],bas,sizeof(tmp[d]));int now=top;\n\tfor(auto t:vec[p])addEdge(t);\n\tif(l==r){\n\t\tauto t=q[l];ans[t.id]=get(getdis(t.x)^getdis(t.y));\n\t\tmemcpy(bas,tmp[d],sizeof(bas));while(top>now)del(top--);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tdfs(l,mid,ls(p),d+1),dfs(mid+1,r,rs(p),d+1);\n\tmemcpy(bas,tmp[d],sizeof(bas));while(top>now)del(top--);\n}\n\nint n,m,st[N],ed[N],Q;\nEdge E[N];\nbool used[N];\n\nmap<pair<int,int>,int>Map;\n\nsigned main(void){\n\n\tn=read(),m=read();int tot=m,T=1,qtot=0;\n\tfor(int i=1;i<=n;i++)sz[i]=1,fa[i]=i;\n\tfor(int i=1;i<=m;i++)E[i].u=read(),E[i].v=read(),E[i].w=read(),st[i]=1,Map[mk(E[i].u,E[i].v)]=i;\n\tint Q=read();for(int i=1;i<=Q;i++){\n\t\tint op=read(),x=read(),y=read();\n\t\tif(op==1){int w=read();E[++tot]=Edge(x,y,w);st[tot]=T,Map[mk(x,y)]=tot;}\n\t\tif(op==2){\n\t\t\tauto it=Map.find(mk(x,y));\n\t\t\tassert(it!=Map.end());int id=it->second;ed[id]=T-1,used[id]=1,Map.erase(it);\n\t\t}\n\t\tif(op==3)q[T++]=Node(x,y,++qtot);\n\t}\n\tfor(int i=1;i<=tot;i++)if(!used[i])ed[i]=T;\n\tfor(int i=1;i<=tot;i++)if(st[i]<=ed[i])add(st[i],ed[i],E[i],1,T,1);\n\tassert(T==qtot+1);\n\tdfs(1,T,1,0);for(int i=1;i<=qtot;i++)cout<<ans[i]<<'\\n';\n\n\treturn 0;\n}\n```\n",
        "postTime": 1670991556,
        "uid": 307453,
        "name": "\u4e91\u6d45\u77e5\u5904",
        "ccfLevel": 6,
        "title": "\u585e\u5f17\u9152\u5220\u634c\u5bc4"
    },
    {
        "content": "~~\u7136\u800c\u6700\u7ec8\u6b7b\u5728\u4e86\u5e76\u67e5\u96c6\u4e0a\uff0c\u4ee4\u4eba\u611f\u53f9\u3002\u3002\u3002~~  \n**\u8003\u8651\u5168\u5c40\u9759\u6001\u600e\u4e48\u505a\u7ed9\u56fe\u8be2\u95ee xor \u6700\u77ed\u8def**  \n\u8fd9\u91cc\u662f\u4e00\u6761\u975e\u7b80\u5355\u8def\u5f84\uff0c\u6211\u4eec\u8003\u8651\u5b83\u7531\u82e5\u5e72\u4e2a\u5708\u52a0\u94fe\u6784\u6210\uff08\u7531 xor \u7684\u6027\u8d28\uff0c\u7528\u5230\u5708\u53ea\u7b97\u4e00\u5708)\u3002  \n\u7531 xor \u6027\u8d28\uff0c\u6211\u4eec\u53d1\u73b0\u5f88\u591a\u94fe\u7684\u90e8\u5206\u88ab\u62b5\u6d88\u4e86\uff0c\u65e0\u8bba\u56fe\u7684\u5f62\u6001\u5982\u4f55\uff0c\u6700\u7ec8\u7559\u4e0b\u7684\u662f\u4e00\u6761\u76f4\u8fbe\u7684\u94fe\uff08\u7b80\u5355\u8def\u5f84\uff09\u548c\u5708\u3002  \n\u6613\u77e5\u539f\u56fe\u4e2d\u7684\u6240\u6709\u5708\u90fd\u53ef\u4ee5\u8ba1\u5165\u8d21\u732e\uff0c\u7531\u4e8e\u8fde\u901a\uff0c\u4ece\u94fe\u6761\u8d70\u4e00\u6761\u7b80\u5355\u8def\u5230\u5708\u518d\u539f\u8def\u8fd4\u56de\u5373\u53ef\u3002  \n\u8fd9\u6761\u8def\u5f84\u7684\u9009\u53d6\u65b9\u5f0f\u770b\u8d77\u6765\u5f88\u62bd\u8c61\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u968f\u4fbf\u9009\u4e00\u6761\uff1a\u5982\u679c\u5b58\u5728\u66f4\u4f73\u7684\u9009\u62e9\uff0c\u4e00\u5b9a\u4e0e\u539f\u5148\u9009\u7684\u6784\u6210\u4e00\u4e2a\u73af\uff0c\u8fd9\u4e2a\u73af\u4f1a\u88ab\u8ba1\u5165\u8d21\u732e\u3002  \n**\u7528\u7ebf\u6027\u57fa\u7ef4\u62a4\u6240\u6709\u73af\uff0c\u6c42\u4efb\u610f\u7b80\u5355\u8def\u4e0e\u4e4b\u7684\u5f02\u6216 $\\min$ \u5373\u53ef\u3002**  \n**\u8003\u8651\u52a8\u6001\u52a0\u8fb9\u5220\u8fb9\u505a\u8fd9\u4e2a\u4e1c\u897f\uff1a**  \n\u4e00\u6761\u8fb9\u4ec5\u4f5c\u7528\u4e8e\u4e00\u6bb5\u8fde\u7eed\u7684\u65f6\u95f4\uff0c**\u5bf9\u65f6\u95f4\u7ebf\u6bb5\u6811\u5206\u6cbb**\uff0c\u53d8\u6210\uff1a**\u52a0\u8fb9\u64a4\u56de\u7ef4\u62a4\u73af\u7684\u8d21\u732e**\u3002  \n\u5e76\u67e5\u96c6\u7ef4\u62a4\u6c42\u73af\uff0c\u4e0d\u5e26\u8def\u5f84\u538b\u7f29\u662f\u652f\u6301\u64a4\u56de\u7684\uff0c\u52a0\u8fb9\u590d\u6742\u5ea6 $\\mathcal{O}(\\log n)$\uff0c\u64a4\u56de $\\mathcal{O}(1)$\u3002\u7ebf\u6027\u57fa\u63d2\u5165\u548c\u590d\u5236\u7684\u4ee3\u4ef7\u662f $\\mathcal{O}(\\log w)$ \u7684\u3002\u56e0\u6b64\u53ef\u4ee5\u7ef4\u62a4\u7ebf\u6bb5\u6811\u5206\u6cbb\u8fc7\u7a0b\u4e2d\u6240\u9700\u7684\u4fe1\u606f\u3002  \n\u590d\u6742\u5ea6 $\\mathcal{O}((n + q) \\log (n + q) (\\log n + \\log w))$ \u3002  \n~~\u5173\u4e8e\u6807\u9898\u662f\u600e\u4e48\u6765\u7684\u53ef\u4ee5\u770b\u52a8\u6001\u3002~~  \n```cpp\n#include <bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);++i)\n\nusing namespace std;\n\nconst int maxn = 2e5 + 10;\n\nstruct xorBase {\n\t#define dig 30\n\tint p[dig + 1];\n\tbool zero;\n\txorBase() { memset(p, 0, sizeof(p)); zero = false; }\n\tvoid insert(int x) {\n\t\tfor(int i = dig; ~i; -- i)\n\t\t\tif(x & (1 << i)) {\n\t\t\t\tif(p[i]) x ^= p[i];\n\t\t\t\telse { p[i] = x; return ; }\n\t\t\t}\n\t\tzero = true;\n\t}\n\tint totmin(int ans = 0) {\n\t\tfor(int i = dig; ~i; -- i)\n\t\t\tif((ans & (1 << i)) && p[i]) ans ^= p[i];\n\t\treturn ans;\n\t}\n} xb;\n\ninline void copy(xorBase &lhs, xorBase &rhs) {\n\tlhs.zero = rhs.zero;\n\tmemcpy(lhs.p, rhs.p, sizeof(lhs));\n}\n\nstruct DSU {\n\tvector<int> fa, dis, rank;\n\tvector< pair<int, bool> > hist;\n\tvoid init(int n) {\n\t\tfa.resize(n + 1, 0); rep(i,1,n) fa[i] = i;\n\t\tdis.resize(n + 1, 0); rep(i,1,n) dis[i] = 0;\n\t\trank.resize(n + 1, 0); rep(i,1,n) rank[i] = 1;\n\t}\n\tint find(int x, int &disCnt) {\n\t\tif(x == fa[x]) return x;\n\t\tint ret = find(fa[x], disCnt);\n\t\tdisCnt ^= dis[x];\n\t\treturn ret;\n\t}\n\tbool link(int x, int y, int w) {\n\t\tint dx = 0, dy = 0;\n\t\tx = find(x, dx);\n\t\ty = find(y, dy);\n\t\tif(x == y) return false;\n\t\tif(rank[x] < rank[y]) swap(x, y), swap(dx, dy);\n\t\tpair<int, bool> h = {y, 0};\n\t\tif(rank[x] == rank[y]) ++ rank[x], h.second = true;\n\t\tfa[y] = x, dis[y] = w ^ dx ^ dy;\n\t\thist.push_back(h);\n\t\treturn true;\n\t}\n\tvoid undo() {\n\t\tauto &it = hist.back();\n\t\tif(it.second) -- rank[fa[it.first]];\n\t\tfa[it.first] = it.first;\n\t\tdis[it.first] = 0;\n\t\thist.pop_back();\n\t}\n} dsu;\n\nstruct edge {\n\tint x, y;\n\tbool operator < (const edge &o) const {\n\t\treturn x < o.x || x == o.x && y < o.y;\n\t}\n};\n\nstruct ed {\n\tint x, y, w;\n};\n\nstruct segTdiv {\n\tvector<ed> opr[maxn << 2];\n\tvector< pair<int, int> > qry[maxn];\n\tvector<int> ans;\n\n\tvoid insert(int p, int lp, int rp, int l, int r, ed e) {\n\t\tif(l <= lp && rp <= r) {\n\t\t\topr[p].push_back(e);\n\t\t\treturn ;\n\t\t}\n\t\tregister int mid = (lp + rp) >> 1, ls = p << 1, rs = ls | 1;\n\t\tif(l <= mid) insert(ls, lp, mid, l, r, e);\n\t\tif(r > mid) insert(rs, mid + 1, rp, l, r, e);\n\t}\n\n\tvoid dfs(int p, int lp, int rp) {\n\t\tfor(ed &e : opr[p]) {\n\t\t\tint w = e.w;\n\t\t\tif(dsu.link(e.x, e.y, w) == false) {\n\t\t\t\tdsu.find(e.x, w); dsu.find(e.y, w);\n\t\t\t\txb.insert(w);\n\t\t\t}\n\t\t}\n\t\tif(lp == rp) {\n\t\t\tfor(auto it : qry[lp]) {\n\t\t\t\tint dis = 0;\n\t\t\t\tdsu.find(it.first, dis);\n\t\t\t\tdsu.find(it.second, dis);\n\t\t\t\tans.push_back(xb.totmin(dis));\n\t\t\t}\n\t\t\treturn ;\n\t\t}\n\t\tregister int mid = (lp + rp) >> 1;\n\t\tint sz = dsu.hist.size();\n\t\txorBase tmp; copy(tmp, xb);\n\t\tdfs(p << 1, lp, mid);\n\t\twhile(dsu.hist.size() > sz) dsu.undo();\n\t\tcopy(xb, tmp);\n\t\tdfs(p << 1 | 1, mid + 1, rp);\n\t}\n} tree;\n\nmap< edge, pair<int, pair<int, int> > > mp;\n\nint main() {\n\tint n, m; \n\tscanf(\"%d %d\", &n, &m);\n\tdsu.init(n);\n\tint opt, x, y, w;\n\tint timer = 1;\n\trep(i,1,m) {\n\t\tscanf(\"%d %d %d\", &x, &y, &w);\n\t\tif(x > y) swap(x, y);\n\t\tmp[{x, y}] = {w, {1, 0}};\n\t}\n\tint q;\n\tscanf(\"%d\", &q);\n\trep(qr,1,q) {\n\t\tscanf(\"%d\", &opt);\n\t\tif(opt != 3) ++ timer;\n\t\tif(opt == 1) {\n\t\t\tscanf(\"%d %d %d\", &x, &y, &w);\n\t\t\tif(x > y) swap(x, y);\n\t\t\tmp[{x, y}] = {w, {timer, 0}};\n\t\t} else if(opt == 2) {\n\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\tif(x > y) swap(x, y);\n\t\t\tmp[{x, y}].second.second = timer - 1;\n\t\t} else {\n\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\tif(x > y) swap(x, y);\n\t\t\ttree.qry[timer].push_back({x, y});\n\t\t}\n\t}\n\tfor(auto &it : mp) {\n\t\tif(it.second.second.second == 0) it.second.second.second = timer;\n\t\ttree.insert(1, 1, timer, it.second.second.first, it.second.second.second, {it.first.x, it.first.y, it.second.first});\n\t}\n\ttree.dfs(1, 1, timer);\n\tfor(int a : tree.ans) printf(\"%d\\n\", a);\n\treturn 0;\n}\n```",
        "postTime": 1645459865,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u6709\u732a"
    },
    {
        "content": "### \u524d\u7f6e\u829d\u58eb&\u9898\u76ee\uff1a\n\n\u7ebf\u6bb5\u6811\u3001\u7ebf\u6027\u57fa\u3002\n\n[P4151 [WC2011]\u6700\u5927XOR\u548c\u8def\u5f84](https://www.luogu.com.cn/problem/P4151)\n\n---\n\n\u56de\u987e\u4e00\u4e0b P4151 \u600e\u4e48\u5904\u7406\u7684\uff1a\n\n- \u4efb\u610f\u5f97\u5230\u4e00\u6761 $1 - n$ \u7684\u8def\u5f84\u957f\u3002\n\n- \u5904\u7406\u51fa\u6240\u6709\u73af\u957f\uff0c\u52a0\u5165\u7ebf\u6027\u57fa\u3002\n\n- \u6240\u6709\u7684\u73af\u90fd\u662f\u53ef\u9009\u53ef\u4e0d\u9009\uff0c\u7528\u7ebf\u6027\u57fa\u6c42\u6700\u5927\u5f02\u6216\u503c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8fd9\u9053\u9898\u9700\u8981\u652f\u6301\uff1a\n\n1. \u52a8\u6001\u7ef4\u62a4\u4e24\u70b9\u4e4b\u95f4\u4efb\u610f\u4e00\u6761\u5f02\u6216\u8def\u5f84\u957f\u3002\n\n2. \u52a0\u8fb9\u540e\u627e\u5230\uff08\u53ef\u80fd\u51fa\u73b0\u7684\uff09\u73af\u957f\uff0c\u52a0\u5165\u7ebf\u6027\u57fa\u3002\n\n\u5bf9\u4e8e 1. \u53ef\u4ee5\u7528\u5e26\u6743\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u9897\u751f\u6210\u6811\uff08\u9898\u76ee\u4fdd\u8bc1\u4efb\u610f\u65f6\u523b\u8fde\u901a\uff09\uff0c2. \u5219\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u51fa\u73b0\u4e86\u73af\u3002\u8fd9\u4fe9\u90fd\u4e0d\u597d\u76f4\u63a5\u8fdb\u884c\u5220\u9664\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u8bb0\u5f55\u6bcf\u6b21\u7684\u64cd\u4f5c\u6765\u9010\u6b21\u64a4\u56de\uff0c\u6240\u4ee5\u4e0a\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u64cd\u4f5c\uff0c\u5206\u6cbb\u9012\u5f52\u5230\u5f53\u524d\u65f6\u95f4\u65f6\u76f4\u63a5\u5728\u7ebf\u6027\u57fa\u4e2d\u67e5\u8be2\u5373\u53ef\u3002\n\nCode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\ntemplate <class T> inline void read(T &x)\n{\n\tx = 0;\n\tint f = 0;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\n\t{\n\t\tf |= ch == '-';\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9')\n\t{\n\t\tx = x * 10 + (ch - 48);\n\t\tch = getchar();\n\t}\n\tx = f ? -x : x;\n\treturn;\n}\n#define N 200005\nint n, m, q;\nstruct edge\n{\n\tint u, v, w;\n};\nstruct linebase\n{\n\tint p[35];\n\tstack<int> st;\n\tinline void insert(int v)\n\t{\n\t\tfor(int i = 30; i >= 0; i--)\n\t\t{\n\t\t\tif(!(v >> i))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(!p[i])\n\t\t\t{\n\t\t\t\tst.push(i);\n\t\t\t\tp[i] = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tv ^= p[i];\n\t\t}\n\t\treturn;\n\t}\n\tinline int query(int v)\n\t{\n\t\tint ret = v;\n\t\tfor(int i = 30; i >= 0; i--)\n\t\t{\n\t\t\tif((ret ^ p[i]) < ret)\n\t\t\t{\n\t\t\t\tret ^= p[i];\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tinline void del(int size)\n\t{\n\t\twhile((int)st.size() != size)\n\t\t{\n\t\t\tp[st.top()] = 0;\n\t\t\tst.pop();\n\t\t}\n\t\treturn;\n\t}\n};\nlinebase LB;\nstruct mergeset\n{\n\tint fa[N], dep[N], dis[N];\n\tstruct node\n\t{\n\t\tint f1, f2, dep;\n\t};\n\tstack<node> st;\n\tinline void init()\n\t{\n\t\tfor(int i = 1; i <= n; i++)\n\t\t{\n\t\t\tfa[i] = i;\n\t\t\tdep[i] = 1;\n\t\t}\n\t\treturn;\n\t}\n\tinline int getfa(int x)\n\t{\n\t\twhile(x != fa[x])\n\t\t{\n\t\t\tx = fa[x];\n\t\t}\n\t\treturn x;\n\t}\n\tinline int qdis(int x)\n\t{\n\t\tint ret = 0;\n\t\twhile(x != fa[x])\n\t\t{\n\t\t\tret ^= dis[x];\n\t\t\tx = fa[x];\n\t\t}\n\t\treturn ret;\n\t}\n\tinline void merge(edge x)\n\t{\n\t\tint f1 = getfa(x.u), f2 = getfa(x.v);\n\t\tif(f1 == f2)\n\t\t{\n//\t\t\tprintf(\"\\nupd:%d %d %d\\n\", x.u, x.v, qdis(x.u) ^ qdis(x.v) ^ x.w);\n\t\t\tLB.insert(qdis(x.u) ^ qdis(x.v) ^ x.w);\n\t\t\treturn;\n\t\t}\n\t\tif(dep[f1] < dep[f2])\n\t\t{\n\t\t\tswap(f1, f2);\n\t\t}\n\t\tst.push((node){f1, f2, dep[f1]});\n\t\tdis[f2] = qdis(x.u) ^ qdis(x.v) ^ x.w;\n\t\tfa[f2] = f1;\n\t\tdep[f1] = max(dep[f1], dep[f2] + 1);\n\t\treturn;\n\t}\n\tinline void del(int size)\n\t{\n\t\twhile((int)st.size() != size)\n\t\t{\n\t\t\tfa[st.top().f2] = st.top().f2;\n\t\t\tdep[st.top().f1] = st.top().dep;\n\t\t\tdis[st.top().f2] = 0;\n\t\t\tst.pop();\n\t\t}\n\t\treturn;\n\t}\n};\nmergeset MS;\nvector<edge> tmp[N << 2];\nvoid update(int root, int l, int r, int L, int R, edge x)\n{\n\tif(L > R)\n\t{\n\t\treturn;\n\t}\n\tif(L <= l && r <= R)\n\t{\n\t\ttmp[root].emplace_back(x);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(L <= mid)\n\t{\n\t\tupdate(root << 1, l, mid, L, R, x);\n\t}\n\tif(mid < R)\n\t{\n\t\tupdate(root << 1 | 1, mid + 1, r, L, R, x);\n\t}\n\treturn;\n}\nstruct question\n{\n\tint x, y;\n};\nquestion que[N];\nvoid dfs(int root, int l, int r)\n{\n\tint mem1 = MS.st.size(), mem2 = LB.st.size();\n\tfor(auto x : tmp[root])\n\t{\n\t\tMS.merge(x);\n\t}\n\tif(l == r)\n\t{\n\t\tif(que[l].x)\n\t\t{\n\t\t\tprintf(\"%d\\n\", LB.query(MS.qdis(que[l].x) ^ MS.qdis(que[l].y)));\n//\t\t\tprintf(\"%d %d %d %d\\n\", que[l].x, que[l].y, MS.qdis(que[l].x), MS.qdis(que[l].y));\n\t\t}\n\t}\n\telse\n\t{\n\t\tint mid = (l + r) >> 1;\n\t\tdfs(root << 1, l, mid), dfs(root << 1 | 1, mid + 1, r);\n\t}\n\tMS.del(mem1), LB.del(mem2);\n\treturn;\n}\nmap<pair<int, int>, pair<int, int>> ti;\nsigned main()\n{\n\tread(n), read(m);\n\tMS.init();\n\tint u, v, w;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tread(u), read(v), read(w);\n\t\tti[make_pair(u, v)] = make_pair(1, w);\n\t}\n\tread(q);\n\tint op;\n\tfor(int i = 1; i <= q; i++)\n\t{\n\t\tread(op);\n\t\tif(op == 1)\n\t\t{\n\t\t\tread(u), read(v), read(w);\n\t\t\tti[make_pair(u, v)] = make_pair(i, w);\n\t\t}\n\t\telse if(op == 2)\n\t\t{\n\t\t\tread(u), read(v);\n\t\t\tpair<int, int> last = ti[make_pair(u, v)];\n\t\t\tupdate(1, 1, q, last.first, i - 1, (edge){u, v, last.second});\n\t\t\tti[make_pair(u, v)] = make_pair(0, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tread(que[i].x), read(que[i].y);\n\t\t}\n\t}\n\tfor(auto x : ti)\n\t{\n\t\tif(x.second.first)\n\t\t{\n\t\t\tupdate(1, 1, q, x.second.first, q, (edge){x.first.first, x.first.second, x.second.second});\n\t\t}\n\t}\n\tdfs(1, 1, q);\n\treturn 0;\n}\n```",
        "postTime": 1643069980,
        "uid": 90027,
        "name": "GG_jok_er",
        "ccfLevel": 0,
        "title": "CF938G Shortest Path Queries \u9898\u89e3"
    },
    {
        "content": "# CF938G Shortest Path Queries\n\n~~\u51fa\u73b0\u4e86!\u878d\u5408\u602a\uff01~~\n\n\u505a\u672c\u9898\u4e4b\u524d\u5efa\u8bae\u5148\u505a\u6389 [\u6700\u5927XOR\u548c\u8def\u5f84](https://www.luogu.com.cn/problem/P4151) \u548c [\u4e8c\u5206\u56fe](https://www.luogu.com.cn/problem/P5787) \u4e24\u9898\u3002\n\n~~\u5176\u5b9e\u8fd9\u9898\u5c31\u662f\u8fd9\u4e24\u9898\u878d\u5408\u4e00\u4e0b~~\n\n\u6211\u4eec\u6765\u8bb2\u89e3\u6cd5\u3002\u9996\u5148\u6211\u4eec\u770b\u5230\u4e86\u8fd9\u4e2a XOR \u7684\u6700\u5c0f\u503c\u95ee\u9898\uff0c\u53ef\u4ee5\u501f\u9274`\u6700\u5927XOR\u548c\u8def\u5f84`\u8fd9\u9053\u9898\u7684\u601d\u8def\u3002\u5176\u6b21\u6211\u4eec\u6709\u5220\u8fb9\uff0c\u52a0\u8fb9\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u601d\u8def\u3002\u4f46\u662f\u5f88\u663e\u7136\uff0c\u8fd9\u4e2d\u95f4\u8fd8\u6709\u5f88\u591a\u6709\u5f85\u601d\u8003\u7684\u95ee\u9898\u3002\u6bd4\u5982\uff0c\u5982\u4f55\u5b9e\u73b0\u7ebf\u6027\u57fa\u64a4\u9500\uff1f\u600e\u6837\u5408\u5e76\u8fb9\uff0c\u5e76\u7ef4\u62a4\u7ebf\u6027\u57fa\uff1f\u6211\u4eec\u6765\u4e00\u4e00\u653b\u7834\u3002\n\n## \u7ebf\u6027\u57fa\u64a4\u9500\n\n\u8fd9\u4e2a\u6211\u662f\u6ca1\u600e\u4e48\u597d\u597d\u60f3\u8fc7\uff0c\u53cd\u6b63\u6211\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u90fd\u5efa\u4e86\u4e00\u4e2a\u7ebf\u6027\u57fa\uff0c\u6bcf\u6b21\u4e0b\u4f20\u5373\u53ef\u3002\u633a\u66b4\u529b\u7684\uff0c\u4f46\u662f\u7a7a\u95f4\u53ef\u4ee5\u5361\u8fc7\u7684\u3002\n\n## \u8fb9\u7684\u5408\u5e76\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3\u3002\u5982\u679c\u6b64\u65f6\u4e24\u4e2a\u70b9\u4e0d\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e24\u6761\u8fb9\u4e4b\u95f4\u52a0\u4e00\u6761\u8fb9\u3002\u4f46\u662f\u8fd9\u4e2a\u8fdd\u53cd\u4e86\u5e76\u67e5\u96c6\u7684\u89c4\u5219\u3002\u5e76\u67e5\u96c6\u53ea\u80fd\u5c06\u4e24\u4e2a\u96c6\u5408\u7684\u6839\u8282\u70b9\u5408\u5e76\u3002\u6211\u4eec\u5c31\u9700\u8981\u7528\u5230`\u4e8c\u5206\u56fe`\u4e2d\u7684\u4e00\u4e2a\u601d\u8def\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![1](http://image.qingtengbc.com/2021/03/12/808b079d953ad.png)\n\n\uff08\u7531\u4e8e\u7ed8\u56fe\u4e0d\u652f\u6301 $\\LaTeX$\uff0c\u6240\u4ee5\u4e0b\u5212\u7ebf\u5c31\u6807\u5728\u90a3\u91cc\u4e86\uff0c\u4e0d\u662f\u56fe\u70b8\u4e86\uff09\n\n\u6211\u4eec\u73b0\u5728\u8981\u5728 $2$ \u548c $6$ \u4e4b\u95f4\u6dfb\u4e00\u6761\u8fb9\uff0c\u6743\u503c\u4e3a $val_6$\u3002\u6211\u4eec\u5e94\u8be5\u5f97\u5230\u4e0b\u56fe\uff1a\n\n![2](http://image.qingtengbc.com/2021/03/12/41a6d6b048e0c.png)\n\n\u4f46\u662f\u5b9e\u9645\u4e0a\u6211\u4eec\u4e0d\u80fd\u8fd9\u4e48\u505a\uff0c\u6211\u4eec\u7684\u5e76\u67e5\u96c6\u53ea\u652f\u6301\u6839\u8282\u70b9\u5408\u5e76\u3002\u90a3\u4e48\u600e\u4e48\u529e\uff1f\u6211\u4eec\u4ee4\u8282\u70b9 $i$ \u5230\u5b83\u6240\u5c5e\u7684\u5e76\u67e5\u96c6\u7684\u6839\u7684\u8ddd\u79bb\u4e3a $dis_i$\u3002\u90a3\u4e48\u82e5\u6211\u4eec\u8fde\u63a5 $u,v$ \u4e24\u70b9\uff0c\u6743\u503c\u4e3a $w$\uff0c\u6211\u4eec\u5c31\u76f8\u5f53\u4e8e\u5728\u8fd9\u4e24\u4e2a\u70b9\u5206\u522b\u6240\u5c5e\u7684\u5e76\u67e5\u96c6\u7684\u6839\u8282\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a $dis_u \\operatorname{xor} dis_v \\operatorname{xor} w$ \u7684\u8fb9\u3002\u6bd4\u5982\u5bf9\u4e8e\u6211\u4eec\u4e3e\u7684\u4f8b\u5b50\uff0c\u5c31\u662f\u8fd9\u4e2a\u6548\u679c\uff1a\n\n![3](http://image.qingtengbc.com/2021/03/12/bbd1988f140d0.png)\n\n\u8fd9\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u5462\uff1f\u5176\u5b9e\u5c31\u662f\u8fd0\u7528\u4e86 $x\\operatorname{xor} x=0$ \u7684\u6027\u8d28\u3002\u6211\u4eec\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u5bf9\u4e8e\u539f\u56fe\uff0c$3->6$ \u7684\u8def\u5f84\u6743\u503c\u4e3a $val_2\\operatorname{xor}val_1\\operatorname{xor} val_6$\u3002\u800c\u73b0\u5728\u662f $val_2\\operatorname{xor}\\ (val_1\\operatorname{xor}val_4\\operatorname{val_6})\\operatorname{val_4}$\u3002\u5c45\u7136\u662f\u4e00\u6837\u7684\u3002\n\n\u5982\u679c\u8fde\u7684\u8fb9\u4e24\u4e2a\u7aef\u70b9\u672c\u6765\u5c31\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\uff0c\u5c31\u628a\u73af\u6254\u5230\u7ebf\u6027\u57fa\u91cc\uff0c\u548c WC \u90a3\u9898\u4e00\u6837\u3002\n\n\u597d\u4e86\uff0c\u7136\u540e\u5c31\u5230\u4e86\u5199\u4ee3\u7801\u65f6\u95f4\u3002\u3002\u3002\u3002\n\n\u53cd\u6b63\u6211\u5199\u4e86 208 \u884c\uff0c\u8c03\u4e86 4 \u5929\uff0c\u7ed3\u679c\u53d1\u73b0\u6570\u7ec4\u5f00\u5c0f\u4e86\u3002\u3002\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n//Don't act like a loser.\n//This code is written by huayucaiji\n//You can only use the code for studying or finding mistakes\n//Or,you'll be punished by Sakyamuni!!!\n#include<bits/stdc++.h>\n#define int long long\n#define pr pair<int,int>\nusing namespace std;\n\nint read() {\n\tchar ch=getchar();\n\tint f=1,x=0;\n\twhile(ch<'0'||ch>'9') {\n\t\tif(ch=='-')\n\t\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn f*x;\n}\n\nconst int MAXN=2e5+10;\n\nint n,m,q,cnt;\nint father[MAXN],dis[MAXN],size[MAXN],lb[MAXN<<2][32];\n\nstruct ege {\n\tint u,v,w;\n}e[MAXN<<1];\n\nmap<pr,int> mp,index;\nset<int> s;\nvector<ege> edge[MAXN<<2];\nvector<pr > qry[MAXN<<2];\nstack<pr > stk;\n\npr make_edge(int x,int y) {\n\treturn make_pair(min(x,y),max(x,y));\n}\nvoid insert(int x,int p) {\n\tfor(int i=30;i>=0;i--) {\n\t\tif(x&(1<<i)) {\n\t\t\tif(lb[p][i]) {\n\t\t\t\tx^=lb[p][i];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlb[p][i]=x;\n\t\t\t\treturn ;\n\t\t\t}\n\t\t}\n\t}\n}\nint find(int x) {\n\tif(x!=father[x]) {\n\t\treturn find(father[x]);\n\t}\n\treturn x;\n}\nint findis(int x) {\n\tif(x!=father[x]) {\n\t\treturn dis[x]^findis(father[x]);\n\t}\n\treturn 0;\n}\nvoid merge(ege s,int p) {\n\tint x=find(s.u);\n\tint y=find(s.v);\n\tif(x==y) {\n\t\tinsert(findis(s.u)^findis(s.v)^s.w,p);\n\t\tstk.push(make_pair(-1,-1));\n\t\treturn ;\n\t}\n\tif(size[x]>size[y]) {\n\t\tswap(x,y);\n\t}\n\tdis[x]=findis(s.u)^findis(s.v)^s.w;\n\tfather[x]=y;\n\tsize[y]+=size[x];\n\tstk.push(make_pair(x,y));\n}\nvoid del() {\n\tint x=stk.top().first;\n\tint y=stk.top().second;\n\tstk.pop();\n\tif(x==-1) {\n\t\treturn ;\n\t}\n\tfather[x]=x;\n\tdis[x]=0;\n\tsize[y]-=size[x];\n}\n\nvoid modify(int l,int r,int p,int x,int y,ege s) {\n\tif(x>y||r<x||y<l) {\n\t\treturn ;\n\t}\n\tif(x<=l&&r<=y) {\n\t\tedge[p].push_back(s);\n\t\treturn ;\n\t}\n\t\n\tint mid=(l+r)>>1;\n\tmodify(l,mid,p<<1,x,y,s);\n\tmodify(mid+1,r,p<<1|1,x,y,s);\n}\nvoid modqry(int l,int r,int p,int x,int y,pr s) {\n\tif(x>y||r<x||y<l) {\n\t\treturn ;\n\t}\n\tif(x<=l&&r<=y) {\n\t\tqry[p].push_back(s);\n\t\treturn ;\n\t}\n\t\n\tint mid=(l+r)>>1;\n\tmodqry(l,mid,p<<1,x,y,s);\n\tmodqry(mid+1,r,p<<1|1,x,y,s);\n}\n\nvoid query(int l,int r,int p) {\n\tint sz=edge[p].size();\n\tfor(int i=0;i<sz;i++) {\n\t\tmerge(edge[p][i],p);\n\t}\n\tif(l==r) {\n\t\tint qsz=qry[p].size();\n\t\tfor(int i=0;i<qsz;i++) {\n\t\t\tint ans=0;\n\t\t\tif(find(qry[p][i].first)!=find(qry[p][i].second)) {\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tans=findis(qry[p][i].first)^findis(qry[p][i].second);\n\t\t\tfor(int j=30;j>=0;j--) {\n\t\t\t\tans=min(ans,ans^lb[p][j]);\n\t\t\t}\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t}\n\telse {\n\t\tint mid=(l+r)>>1;\n\t\tfor(int i=0;i<=30;i++) {\n\t\t\tlb[p<<1][i]=lb[p][i];\n\t\t\tlb[p<<1|1][i]=lb[p][i];\n\t\t}\n\t\tquery(l,mid,p<<1);\n\t\tquery(mid+1,r,p<<1|1);\n\t} \n\twhile(sz--) {\n\t\tdel();\n\t}\n}\n\nsigned main() {\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++) {\n\t\tfather[i]=i;\n\t\tsize[i]=1;\n\t\tdis[i]=0;\n\t}\n\tfor(int i=1;i<=m;i++) {\n\t\te[i].u=read();e[i].v=read();e[i].w=read();\n\t\tpr tmp=make_edge(e[i].u,e[i].v);\n\t\ts.insert(i);\n\t\tmp[tmp]=1;\n\t\tindex[tmp]=i;\n\t}\n\tcnt=m;\n\t\n\tcin>>q;\n\tfor(int i=1;i<=q;i++) {\n\t\tint opt,u,v,w;\n\t\topt=read();u=read();v=read();\n\t\tif(opt==1) {\n\t\t\tw=read(); \n\t\t\tpr tmp=make_edge(u,v);\n\t\t\te[++cnt].u=u;\n\t\t\te[cnt].v=v;\n\t\t\te[cnt].w=w;\n\t\t\ts.insert(cnt);\n\t\t\tmp[tmp]=i;\n\t\t\tindex[tmp]=cnt;\n\t\t}\n\t\tif(opt==2) {\n\t\t\tpr tmp=make_edge(u,v);\n\t\t\tmodify(1,q,1,mp[tmp],i-1,e[index[tmp]]);\n\t\t\ts.erase(s.find(index[tmp]));\n\t\t\tmp[tmp]=index[tmp]=0;\n\t\t}\n\t\tif(opt==3) {\n\t\t\tmodqry(1,q,1,i,i,make_edge(u,v));\n\t\t}\n\t}\n\t\n\tfor(set<int>::iterator it=s.begin();it!=s.end();it++) {\n\t\tmodify(1,q,1,mp[make_edge(e[(*it)].u,e[*it].v)],q,e[*it]);\n\t}\n\t\n\tquery(1,q,1);\n\treturn 0;\n}\n/*\n5 6\n1 2 31\n1 5 0\n2 3 30\n2 4 0\n3 4 1\n3 5 30\n5\n2 2 3\n2 2 4\n1 2 3 1\n1 2 4 1\n3 1 2\n\n\n5 6\n1 2 31\n1 5 0\n2 3 30\n2 4 0\n3 4 1\n3 5 30\n8\n3 1 2\n2 3 5\n1 3 5 30\n2 2 3\n2 2 4\n1 2 3 1\n1 2 4 1\n3 1 2\n*/ \n```",
        "postTime": 1615551246,
        "uid": 132976,
        "name": "huayucaiji",
        "ccfLevel": 6,
        "title": "CF938G Shortest Path Queries"
    }
]