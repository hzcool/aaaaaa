[
    {
        "content": "# CF\u7684\u4e00\u9053\u5178\u578b\u641c\u7d22\u6c34\u9898\n## 1.\u9898\u9762\u7ffb\u8bd1&&\u9898\u610f\u5206\u6790\n**\u3010\u95ee\u9898\u63cf\u8ff0\u3011**\nldxxx\u5df2\u7ecf\u586b\u5b8c\u4e86\u6240\u6709\u7684\u5751\uff0c\u73b0\u5728\u4ed6\u8981\u7ed9\u571f\u5730\u6d47\u6c34\u6765\u4fdd\u8bc1\u5e7c\u82d7\u7684\u8301\u58ee\u6210\u957f\u3002\u7136\u800c\u4ed6\u521a\u8981\u6d47\u6c34\uff0c\u5c31\u8fce\u6765\u4e86\u74e2\u6cfc\u5927\u96e8\uff0c\u7531\u4e8e\u571f\u5730\u6e17\u900f\u6027\u4e0d\u4e00\uff0c\u6240\u4ee5\u6709\u7684\u571f\u5730\u4e0a\u5b58\u5728\u79ef\u6c34\uff0c\u8fde\u5728\u4e00\u8d77\u7684\u79ef\u6c34\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u5c0f\u6e56\u6cca\uff08\u53ea\u6709\u56db\u5468\u88ab\u9646\u5730\u5b8c\u5168\u5305\u56f4\u7684\u624d\u7b97\u6e56\u6cca\uff0c\u53ea\u8981\u548c\u8fb9\u754c\u6709\u4ea4\u70b9\u5c31\u4e0d\u7b97\u6e56\u6cca\uff09\uff0c\u8fd9\u65f6cs\u544a\u8bc9ldxxx\u8bf4\u5982\u679c\u80fd\u5c06\u6e56\u6cca\u7684\u6570\u91cf\u7f29\u5c0f\u5230\u4e00\u4e2a\u503ck\u7684\u8bdd\uff0c\u4ed6\u7684\u5e84\u7a3c\u957f\u5f97\u5e94\u8be5\u6700\u8302\u76db\u3002\u4f46\u662f\u7531\u4e8eldxxx\u5f88\u7b28\uff0c\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u586b\uff0c\u6240\u4ee5ldxxx\u628a\u6d47\u6c34\u7684\u4efb\u52a1\u7ed9\u4e86cs\uff0c\u7531\u4e8e\u8fd9\u6b21\u662f\u4e49\u52a1\u52b3\u52a8\uff0c\u6240\u4ee5cs\u5f88\u61d2\uff0c\u60f3\u586b\u6700\u5c11\u7684\u6c34\u4f7f\u5f97\u6e56\u6cca\u6570\u91cf\u4e3ak\u4f60\u9700\u8981\u544a\u8bc9\u4ed6\u628a\u6e56\u6cca\u6570\u964d\u5230\u4e0d\u5927\u4e8ek\u81f3\u5c11\u9700\u8981\u586b\u591a\u5c11\u5757\uff0c\u5e76\u4e14\u628a\u586b\u597d\u540e\u7684\u571f\u5730\u79ef\u6c34\u60c5\u51b5\u7ed9\u4ed6\u6253\u5370\u51fa\u6765\u3002\n\u6ce8\u610f\uff1a\u53ea\u6709\u56db\u5468\u88ab\u9646\u5730\u5b8c\u5168\u5305\u56f4\u7684\u624d\u7b97\u6e56\u6cca\uff0c\u53ea\u8981\u548c\u8fb9\u754c\u6709\u4ea4\u70b9\u5c31\u4e0d\u7b97\u6e56\u6cca\u3002\n\n//\u9898\u9762\u7ffb\u8bd1\u6765\u81eaaccoders\n\n**\u3010\u8f93\u5165\u683c\u5f0f\u3011**\n\u7b2c\u4e00\u884c\u4e09\u4e2a\u7528\u7a7a\u683c\u5206\u79bb\u7684\u6b63\u6574\u6570 n\uff0cm\u548ck\uff0c\u4ee3\u8868\u571f\u5730\u7684\u957f\u548c\u5bbd\u3002\n\u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884cm\u4e2a\u5b57\u7b26\uff0c**'*'\u4ee3\u8868\u9646\u5730\uff0c'.'\u4ee3\u8868\u6c34\u3002\u6570\u636e\u4fdd\u8bc1\u81f3\u5c11\u542b\u6709k\u4e2a\u6e56\u3002**\n\n**\u3010\u8f93\u51fa\u683c\u5f0f\u3011**\n\u8f93\u51fa\u5171n+1\u884c\u3002\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u628a\u6e56\u6cca\u6570\u964d\u5230k\u4ee5\u4e0b\u81f3\u5c11\u9700\u8981\u586b\u591a\u5c11\u5757\u3002\n\u63a5\u4e0b\u6765n\u884c\u6bcf\u884cm\u4e2a\u5b57\u7b26\uff0c**'*'\u4ee3\u8868\u9646\u5730\uff0c'.'\u4ee3\u8868\u6c34\u3002**\n _\u6ce8\uff1a\u8f93\u5165\u548c\u8f93\u51fa \u6bcf\u884c\u7684\u5b57\u7b26\u4e4b\u95f4\u4e0d\u542b\u7a7a\u683c\u3002_ \n\n**\u3010\u6570\u636e\u8303\u56f4\u3011**\n( **1<=n,m<=50** **0<=k<=50** )\n\n\n\n------------\n### \u901a\u8fc7\u5206\u6790\u9898\u9762\u53ef\u4ee5\u5f97\u77e5\uff0c\u6b64\u9898\u5e94\u4e3a\u4e00\u4e2a\u641c\u7d22+\u8d2a\u5fc3\u7684\u9898\uff0c\u76ee\u6807\u5c31\u662f\u8981\u6c42\u51fa\u81f3\u5c11\u586b\u6ee1\u51e0\u4e2a\u6e56\uff0c\u624d\u80fd\u4f7f\u5f97\u6e56\u7684\u6570\u91cf\u4e0d\u591a\u4e8ek\u3002\n## 2.\u6b63\u89e3\u6b65\u9aa4\u89e3\u6790\n### \u56e0\u4e3a\u6211\u4eec\u9700\u8981\u586b\u6389\u4e00\u4e9b\u6e56\u624d\u80fd\u4f7f\u5f97\u6e56\u7684\u603b\u6570\u4e0d\u591a\u4e8ek\uff0c\u90a3\u4e48\u5c31\u6709\u4e00\u79cd\u8d2a\u5fc3\u601d\u8def\uff0c\u6211\u4eec\u4ece\u6700\u5c0f\u7684\u6e56\u5f00\u59cb\u586b\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u586b\u7684\u5751\u662f\u6700\u5c11\u7684\u3002\n\n#### Subtask1\uff1a\u6211\u4eec\u9700\u8981\u4e00\u4e2adfs\u51fd\u6570\u6765\u7edf\u8ba1\u51fa\u6e56\u7684\u4fe1\u606f\uff08\u6e56\u7684\u5927\u5c0f\uff0c\u6e56\u7684\u4f4d\u7f6e\u4e0e\u6e56\u7684\u6570\u91cf\uff09\u3002\n#### Subtask2\uff1a\u6211\u4eec\u9700\u8981\u53e6\u4e00\u4e2adfs\u51fd\u6570\u6765\u66b4\u529b\u5728\u56fe\u4e0a\u586b\u6389\u6e56\u3002\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int MAXN=100;\nint n,m,k,num=1,lake_total=0,ans=0,kk=1;\nchar graph[MAXN][MAXN];\nbool mark[MAXN][MAXN],is=false;\nint dx[6]={0,0,1,-1};\nint dy[6]={1,-1,0,0};\n//\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u7528\u6765\u5b58\u50a8\u6e56\u7684\u5927\u5c0f\u53ca\u4f4d\u7f6e\nstruct st{\n\tint x,y,size;\n}lake[MAXN*MAXN];\n//dfs\u51fd\u6570\uff0c\u7528\u6765\u7edf\u8ba1\u6e56\u7684\u6570\u91cf\uff0c\u5927\u5c0f\u53ca\u4f4d\u7f6e\nvoid dfs(int x,int y){\n\t//\u5982\u679c\u8fd9\u4e2a\u6e56\u6709\u4e00\u90e8\u5206\u5728\u8fb9\u754c\uff0c\u90a3\u4e48\u76f4\u63a5\u6807\u8bb0\u5b83\u4e0d\u662f\u6e56\n\tif(x==1||x==n||y==1||y==m) is=true;\n\tlake[num].size++;\n\tmark[x][y]=true;\n\t//\u56db\u5411\u6570\u7ec4\u641c\u7d22\n\tfor(int i=0;i<=3;i++){\n\t\tint xx=x+dx[i],yy=y+dy[i];\n\t\tif(x<1||x>n||y<1||y>m) continue;\n\t\tif(mark[xx][yy]==false&&graph[xx][yy]=='.'){\n\t\t\tdfs(xx,yy);\n\t\t}\n\t}\n}\n//\u7528\u6765\u586b\u6e56\u8f93\u51fa\u7684dfs2\u51fd\u6570\nvoid dfs2(int x,int y){\n\tgraph[x][y]='*';\n\tfor(int i=0;i<=3;i++){\n\t\tint xx=x+dx[i],yy=y+dy[i];\n\t\tif(x<1||x>n||y<1||y>m) continue;\n\t\tif(graph[xx][yy]=='.'){\n\t\t\tdfs2(xx,yy);\n\t\t}\n\t}\n}\n//\u7ed3\u6784\u4f53\u6392\u5e8f\uff0c\u91cd\u8f7d\u8fd0\u7b97\u7b26\nbool operator < (const st &x,const st &y){\n\treturn x.size<y.size;\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=n;i++) scanf(\"%s\",graph[i]+1);\n\t//\u66b4\u529b\u5bfb\u627e\u6e56\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\t//\u5982\u679c\u5f53\u524d\u70b9\u662f\u6e56\uff0c\u5e76\u4e14\u4e0d\u662f\u5176\u4ed6\u6e56\u7684\u4e00\u90e8\u5206\uff0c\u5f00\u59cb\u641c\u7d22\u3002\n\t\t\tif(graph[i][j]=='.'&&mark[i][j]==false){\n\t\t\t\t//\u6807\u8bb0\u8fb9\u754c\u201c\u6e56\u201d\u7684\u53d8\u91cf\u521d\u59cb\u5316\n\t\t\t\tis=false;\n\t\t\t\tdfs(i,j);\n\t\t\t\t//\u5982\u679c\u8fd9\u4e2a\u6e56\u662f\u8fb9\u754c\u2018\u6e56\u2019\uff0c\u6211\u4eec\u91cd\u7f6e\u6e56\u7684\u5927\u5c0f\uff0c\u8df3\u8fc7\n\t\t\t\tif(is==true){\n\t\t\t\t\tlake[num].size=0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//\u5982\u679c\u5b83\u662f\u6e56\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u7684\u4f4d\u7f6e\u4e0e\u5927\u5c0f\u6807\u8bb0\u4e0a\n\t\t\t\tlake[num].x=i;\n\t\t\t\tlake[num].y=j;\n\t\t\t\tlake_total++;\n\t\t\t\tnum++;\n\t\t\t}\n\t\t}\n\t}\n\t//\u5bf9\u6e56\u7684\u5927\u5c0f\u6392\u5e8f\uff0c\u5f00\u59cb\u8d2a\u5fc3\n\tsort(lake+1,lake+1+lake_total);\n\t//\u4e0d\u505c\u7684\u586b\u6e56\uff0c\u76f4\u5230\u6e56\u7684\u4e2a\u6570\u4e0d\u591a\u4e8ek\u4e2a\n\twhile(lake_total>k){\n\t\tlake_total--;\n\t\tans+=lake[kk].size;\n\t\tdfs2(lake[kk].x,lake[kk].y);\n\t\tkk++;\n\t}\n\t//\u8f93\u51fa\u586b\u6389\u7684\u6e56\u7684\u5927\u5c0f\u603b\u6570\n\tprintf(\"%d\\n\",ans);\n\t//\u8f93\u51fa\u586b\u5b8c\u7684\u56fe\n\tfor(int i=1;i<=n;i++){\n\t\tprintf(\"%s\\n\",graph[i]+1);\n\t}\n\treturn 0;\n}\n```\n## \u603b\u7684\u6765\u8bf4\uff0c\u8fd8\u662f\u4e00\u9053\u8f83\u4e3a\u57fa\u7840\u7684\u641c\u7d22\u9898\uff0c\u5f88\u5bb9\u6613\u53ef\u4ee5\u60f3\u5230\u3002\n## \u65b0\u4eba\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u795d\u5927\u5bb6CSP2019\u8003\u8bd5\u6210\u529f\uff01\n",
        "postTime": 1571039166,
        "uid": 140255,
        "name": "\u4e91\u96c0\u9171",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF723D"
    },
    {
        "content": "\u9898\u610f\u5c31\u662f\u7ed9\u4e00\u4e2a $n \\times m$ \u7684\u5730\u56fe\uff0c\u5176\u4e2d\u8fb9\u7f18\u5730\u533a\u90bb\u63a5\u7740\u6d77\uff0c\u4e0d\u80fd\u7b97\u4e00\u4e2a\u6e56\uff0c\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u90fd\u7b97\u4e00\u4e2a\u6e56\uff0c\u6c42\u6700\u5c11\u586b\u6389\u591a\u5c11\u5757\u5c0f\u683c\u5b50\u4f7f\u5f97\u6e56\u7684\u6570\u91cf\u53d8\u6210 $k$ (\u8d77\u59cb\u6e56\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e $k$)\n\n\u5148 DFS \u6c42\u4e0d\u90bb\u63a5\u5927\u6d77\u7684\u8fde\u901a\u5757\uff08\u8fd9\u91cc\u5982\u679c\u7528\u5e76\u67e5\u96c6\u6c42\u8fde\u901a\u5757\u5c31\u5224\u65ad\u90bb\u63a5\u5927\u6d77\u5c31\u6ca1\u6709 DFS \u8fd9\u4e48\u7b80\u4fbf\uff09\uff0c\u7136\u540e\u628a\u6bcf\u4e00\u5757\u4e2d DFS \u7684\u8d77\u59cb\u70b9\u5750\u6807\u548c\u6e56\u7684\u9762\u79ef\u7ec4\u6210\u7ed3\u6784\u4f53\u8bb0\u5f55\u5e76\u6309\u7167\u6e56\u7684\u9762\u79ef\u6392\u5e8f\uff0c\u518d\u8d2a\u5fc3\u5730\u518d\u5199\u4e00\u4e2a DFS \u586b\u5145\u9762\u79ef\u5c0f\u7684\u6e56\u3002\n```cpp\n#include <stdio.h>\n#include <bits/stdc++.h>\nusing namespace std;\n#define INF 0x3f3f3f3f\n#define CLR(arr,val) memset(arr,val,sizeof(arr))\n#define LC(x) (x<<1)\n#define RC(x) ((x<<1)+1)\n#define MID(x,y) ((x+y)>>1)\ntypedef pair<int,int> pii;\ntypedef long long LL;\nconst double PI=acos(-1.0);\nconst int N=55;\nstruct info\n{\n    int need;\n    int x,y;\n    bool operator<(const info &t)const\n    {\n        return need>t.need;\n    }\n};\npriority_queue<info>Q;\n\nchar pos[N][N];\nint vis[N][N];\nint n,m;\nint dir[4][2]={{1,0},{-1,0},{0,1},{0,-1}};\nint is_lake,once;\n\ninline bool check(int x,int y)\n{\n    return x>=0&&x<n&&y>=0&&y<m&&pos[x][y]=='.'&&!vis[x][y];\n}\nvoid dfs(int x,int y)\n{\n    vis[x][y]=1;\n    ++once;\n    if(x==0||y==0||x==n-1||y==m-1)\n        is_lake=0;\n    for (int i=0; i<4; ++i)\n    {\n        int xx=x+dir[i][0];\n        int yy=y+dir[i][1];\n        if(check(xx,yy))\n            dfs(xx,yy);\n    }\n}\nvoid kuosan(int x,int y)\n{\n    pos[x][y]='*';\n    for (int i=0; i<4; ++i)\n    {\n        int xx=x+dir[i][0];\n        int yy=y+dir[i][1];\n        if(xx>=0&&xx<n&&yy>=0&&yy<m&&pos[xx][yy]=='.')\n            kuosan(xx,yy);\n    }\n}\nint main(void)\n{\n    int i,j,k;\n    while (~scanf(\"%d%d%d\",&n,&m,&k))\n    {\n        CLR(vis,0);\n        for (i=0; i<n; ++i)\n            scanf(\"%s\",pos[i]);\n        int sc=0;\n        for (i=0; i<n; ++i)\n        {\n            for (j=0; j<m; ++j)\n            {\n                if(pos[i][j]=='.'&&!vis[i][j])\n                {\n                    is_lake=1;\n                    once=0;\n                    dfs(i,j);\n                    if(is_lake)\n                        Q.push((info){once,i,j}),++sc;\n                }\n            }\n        }\n        int r=0;\n        info now;\n        while (sc>k)\n        {\n            now=Q.top();\n            Q.pop();\n            kuosan(now.x,now.y);\n            r+=now.need;\n            --sc;\n        }\n        printf(\"%d\\n\",r);\n        for (i=0; i<n; ++i)\n            printf(\"%s\\n\",pos[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1669720997,
        "uid": 529458,
        "name": "_xyz_",
        "ccfLevel": 0,
        "title": "DSFD"
    },
    {
        "content": "**\u9996\u5148\u5c06\u8fb9\u754c\u7684\u6c34\u7528bfs\u5904\u7406\u6389**\n\n**\u518d\u5c06\u4e2d\u95f4\u7684\u6bcf\u4e00\u4e2a\u6e56\u6cca\u5904\u7406\u51fa\u6765\uff0c\u5b58\u5165\u4e00\u4e2a\u7ed3\u6784\u4f53\u5185\uff0c\u7ed3\u6784\u4f53\u91cc\u8bb0\u5f55\u6e56\u6cca\u5927\u5c0f\u548c\u5f00\u59cb\u70b9**\n\n**\u5c06\u6e56\u6cca\u6392\u5e8f\u4ece\u5c0f\u5f80\u5927\u586b\u6ee1\uff0c\u5e76\u5229\u7528\u5f00\u59cb\u70b9\u8fdb\u884cbfs\u6539\u53d8\u5730\u56fe**\n\n# \u7ec6\u8282\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,k;\nint vis[100][100],mapp[100][100];\nint dx[5]={0,-1,0,1,0};\nint dy[5]={0,0,1,0,-1},cnt;\nstruct SYM{\n    int cc,sx,sy;\n}lake[10000];\nvoid bfs(int x,int y,int opt){\n     queue<int> qx,qy;int siz=0;\n     if(opt==1){                      //\u5904\u7406\u8fb9\u754c\n        vis[x][y]=1;qx.push(x);qy.push(y);\n        while(!qx.empty()){\n              int xx=qx.front(),yy=qy.front();qx.pop();qy.pop();\n              for(int i=1;i<=4;i++){\n                  int nx=xx+dx[i],ny=yy+dy[i];\n                  if(nx==0||ny==0||nx==n+1||ny==m+1) continue;\n                  if(vis[nx][ny]) continue;\n                  vis[nx][ny]=1;\n                  qx.push(nx);qy.push(ny);\n              }\n        }\n     }\n     if(opt==0){                     //\u5904\u7406\u6e56\u6cca\n        vis[x][y]=1;qx.push(x);qy.push(y);\n        while(!qx.empty()){\n              int xx=qx.front(),yy=qy.front();qx.pop();qy.pop();\n              siz++;\n              for(int i=1;i<=4;i++){\n                  int nx=xx+dx[i],ny=yy+dy[i];\n                  if(nx==0||ny==0||nx==n+1||ny==m+1) continue;\n                  if(vis[nx][ny]) continue;\n                  vis[nx][ny]=1;\n                  qx.push(nx);qy.push(ny);\n              }\n        }\n        lake[++cnt].cc=siz;lake[cnt].sx=x;lake[cnt].sy=y; //\u5b58\u5165\u6e56\u6cca\u5927\u5c0f\u548c\u5f00\u59cb\u70b9\n     }\n     if(opt==2){                //\u6539\u53d8\u5730\u56fe\n        mapp[x][y]=1;qx.push(x);qy.push(y);\n        while(!qx.empty()){\n              int xx=qx.front(),yy=qy.front();qx.pop();qy.pop();\n              siz++;\n              for(int i=1;i<=4;i++){\n                  int nx=xx+dx[i],ny=yy+dy[i];\n                  if(nx==0||ny==0||nx==n+1||ny==m+1) continue;\n                  if(mapp[nx][ny]) continue;\n                  mapp[nx][ny]=1;\n                  qx.push(nx);qy.push(ny);\n              }\n        }\n     }\n}\nbool cmp(const SYM &a,const SYM &b){\n     return a.cc>b.cc;\n}\nint main(){\n\tchar c[1000];\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=n;i++){\n        scanf(\"%s\",c);\n        for(int j=0;j<m;j++)\n            mapp[i][j+1]=vis[i][j+1]=(c[j]=='*');\n    }\n    for(int i=1;i<=n;i++){                       //\u5904\u7406\u8fb9\u754c\u6c34\n        if(mapp[i][1]==0&&vis[i][1]==0) bfs(i,1,1);\n        if(mapp[i][m]==0&&vis[i][m]==0) bfs(i,m,1);\n    }\n    for(int i=1;i<=m;i++){\n        if(mapp[1][i]==0&&vis[1][i]==0) bfs(1,i,1);\n        if(mapp[n][i]==0&&vis[n][i]==0) bfs(n,i,1);\n    }\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            if(!vis[i][j]) bfs(i,j,0);\n    sort(lake+1,lake+cnt+1,cmp);                  //\u6e56\u6cca\u6309\u5927\u5c0f\u6392\u5e8f\n    int ans=0;\n    while(cnt>k){                           //\u586b\u6e56\u6cca\n          ans+=lake[cnt].cc;\n          bfs(lake[cnt].sx,lake[cnt].sy,2);       //\u6539\u5730\u56fe\n          cnt--;\n    }     \n    printf(\"%d\\n\",ans);\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            if(mapp[i][j]==1) printf(\"*\");\n            else printf(\".\");\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```\n\n\n",
        "postTime": 1571920785,
        "uid": 66416,
        "name": "\u4f18\u5c11",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF723D \u3010Lakes in Berland\u3011"
    },
    {
        "content": "\u597d\u4e45\u6ca1\u505a\u5230\u8fd9\u4e48\u6c34\u7684\u7eff\u9898\u4e86...\n## \u601d\u8def\n\u4ece\u56fe\u4e2d\u662f\u6c34\u7684\u70b9\u51fa\u53d1\u704c\u6c34\uff0c\u540c\u65f6\u8bb0\u5f55\u8fd9\u4e2a\u5757\u7684\u5927\u5c0f\u53ca\u7f16\u53f7\uff0c**\u6ce8\u610f\u8981\u5224\u6389\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5**\u3002\u518d\u628a\u8fd9\u4e9b\u5757\u7684\u5927\u5c0f\u6254\u8fdb\u4e00\u4e2a\u7ed3\u6784\u4f53\u91cc\uff0c\u7136\u540e\u6392\u5e8f\uff08\u6309\u8fde\u901a\u5757\u5927\u5c0f\uff09\uff0c\u53d6\u524d $q-k$ \u4e2a\u8fde\u901a\u5757\u67d3\u6210\u9646\u5730\uff0c\u5e76\u4f7f\u7d2f\u52a0\u5668\u52a0\u4e0a\u8fd9\u4e9b\u8fde\u901a\u5757\u7684\u5927\u5c0f\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint const N=5e1+5;\nint n,m,tag,a[N][N],vis[N*N],ans,anc,tagen;\nstring s[N];\nint dx[4]={0,0,1,-1};\nint dy[4]={1,-1,0,0};\nstruct node{int x,y;}qa[N*N];\ninline bool cmp(node a,node b){return a.x<b.x;}\ninline void dfs(int x,int y,int tagg){\n\tif (tag) return;\n\ta[x][y]=tagg;++tagen;\n\tfor (int i=0;i<4;++i){\n\t\tint tx=x+dx[i];\n\t\tint ty=y+dy[i];\n\t\tif (a[tx][ty]==1 || a[tx][ty]==tagg) continue;\n\t\tif (tx<1 || tx>n || ty<1 || ty>m){tag=1;return;}\n\t    dfs(tx,ty,tagg);\n\t}\n}\nsigned main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0),cout.tie(0);\n\tint k;cin>>n>>m>>k;\n\tfor (int i=1;i<=n;++i){\n\t\tcin>>s[i];\n\t\ts[i]=\" \"+s[i];\n\t\tfor (int j=1;j<=m;++j)\n\t\t    a[i][j]=(s[i][j]=='*');\n\t}\n\tint cnt=1,q=0;\n\tfor (int i=1;i<=n;++i)\n\t    for (int j=1;j<=m;++j)\n\t        if (a[i][j]==0){\n\t        \ttag=0,++cnt,\n\t        \ttagen=0;\n\t        \tdfs(i,j,cnt);\n\t        \tif (!tag){\n\t        \t\tqa[++q].x=tagen,qa[q].y=cnt;\n\t\t\t\t}\n\t\t\t}\n\tsort(qa+1,qa+q+1,cmp);\n\tfor (int i=1;i<=(q-k);++i) vis[qa[i].y]=1,ans+=qa[i].x;\n\tcout<<ans<<'\\n';\n\tfor (int i=1;i<=n;++i){\n\t    for (int j=1;j<=m;++j)\n\t        if (vis[a[i][j]]) cout<<'*';\n\t        else cout<<s[i][j];\n\t    cout<<'\\n';\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1658566093,
        "uid": 253608,
        "name": "Tx_Lcy",
        "ccfLevel": 7,
        "title": "CF723D Lakes in Berland"
    }
]