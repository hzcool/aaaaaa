[
    {
        "content": "[\u4f20\u9001\u95e8](https://codeforces.ml/contest/1550/problem/F)\n\nD\uff0cE\uff0cF\u7684 difficulty \u662f\u4e0d\u662f\u4e71\u6253\u7684\u554a\n\n\u5e94\u8be5\u662f\u6bd4\u8f83\u6c34\u7684 2700* \u4e86\u3002\n\n##### \u9898\u610f\uff1a\n\n\u7ed9\u5b9a\u82e5\u5e72\u4e2a\u70b9\u7684\u5750\u6807 $a_1<a_2<...<a_n$ \u8fd8\u6709\u5e38\u6570 $d$. \u5982\u679c\u53c2\u6570\u4e3a $k$\uff0c\u5219\u4e00\u6b21\u53ef\u4ee5\u8df3\u8dc3 $t-k \\sim t+k$ \u7684\u8ddd\u79bb.\n\n$q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u5b9a\u7ec8\u70b9 $ed$ \u548c\u53c2\u6570 $k$\uff0c\u8be2\u95ee\u80fd\u5426\u4ece\u8d77\u70b9 $st$\uff08\u56fa\u5b9a\u70b9\uff0c\u4e00\u5f00\u59cb\u7ed9\u51fa\uff09\u8df3\u5230 $ed$ \u70b9\u3002\n\n$n \\le 2\\,\\times 10^5,q,a_i \\le 10^6.$\n\n##### \u5206\u6790\uff1a\n\n\u5bb9\u6613\u53d1\u73b0\u4e00\u4e2a\u57fa\u672c\u6027\u8d28\uff1a\n\n\u82e5 $st \\rightarrow ed$ \u5728 $k$ \u4e3a\u53c2\u6570\u65f6\u53ef\u884c\uff0c\u5219\u5728 $k+1$ \u4e3a\u53c2\u6570\u65f6\u4e00\u5b9a\u4e5f\u884c\u3002\u6362\u8a00\u4e4b\u8df3\u8dc3\u8303\u56f4\u6ee1\u8db3**\u5355\u8c03\u6027**\u3002\n\n\u4f46\u662f\u7531\u4e8e\u672c\u6765\u5c31\u662f\u82e5\u5e72\u5224\u5b9a\u6027\u95ee\u9898\u6240\u4ee5\u4e0d\u592a\u53ef\u80fd\u5229\u7528\u5355\u8c03\u6027\u4e8c\u5206\u3002\u8003\u8651\u8df3\u8dc3\uff0c\u53ef\u8fbe\u6027\uff0c\u5bb9\u6613\u8ba9\u4eba\u60f3\u5230\u56fe\u8bba\u8fde\u8fb9\u3002\n\n\u7531\u4e8e\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u6211\u4eec\u5bf9\u6240\u6709 $(i,j)$ \u8fde\u8fb9\uff0c\u8fb9\u6743\u662f $i$ \u76f4\u63a5\u8df3\u5230 $j$ \u6240\u9700\u8981\u7684\u6700\u5c0f\u7684\u53c2\u6570\u503c $w$. \u6839\u636e\u5355\u8c03\u6027\uff0c\u53ea\u8981 $st \\rightarrow ed$ \u6709\u4e00\u6761\u8def\u5f84\uff0c\u6ee1\u8db3\u8def\u5f84\u6700\u5927\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8e\u7ed9\u5b9a\u7684 $k$ \u5c31\u6709\u89e3\uff1b\u53cd\u4e4b\u65e0\u89e3\u3002\n\n~~$n^2$ \u7ea7\u522b\u8fb9\u6570\uff08\u4e0d\u53ef\u505a\uff09+ \u6709\u7279\u70b9\u7684\u8fb9\u6743 = \u53ef\u505a\u9898(\u66b4\u8bba)~~\n\n\u5bb9\u6613\u53d1\u73b0\u8fb9\u6743 $w$ \u5e94\u8be5\u8bbe\u4e3a $||a_i-a_j|-d|$.  \u518d\u6709\u8fdb\u4e00\u6b65\u7684\u505a\u6cd5\u4e4b\u524d\u6211\u4eec\u5148\u4e0d\u52a8\u8fd9\u4e2a\u5f0f\u5b50\u3002\n\n\u201d\u8def\u5f84\u6700\u5927\u6743\u503c\u201c\u5c0f\u4e8e\u7b49\u4e8e\u7ed9\u5b9a\u7684 $k$. \u5c31\u662f 2013 \u63d0\u9ad8\u7ec4\u90a3\u9053\u7ecf\u5178\u7684\u8d27\u8f66\u8fd0\u8f93\uff0c\u5373\u6700\u5c0f\u74f6\u9888\u751f\u6210\u6811\u3002\u5df2\u7ecf\u70c2\u5927\u8857\u7684\u4e00\u4e2a trick \u5c31\u662f\uff0c\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u552f\u4e00\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u503c\uff0c\u4e00\u5b9a\u662f\u6574\u5f20\u56fe\u4e0a\uff0c\u8fd9\u4e24\u70b9\u4e4b\u95f4\u4efb\u610f\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u3002\u5982\u679c\u8fd8\u4e0d\u4f1a\uff0c\u53ef\u4ee5\u53bb\u5148\u770b\u770b\u8d27\u8f66\u8fd0\u8f93\uff0c\u6216\u8005[\u8fd9\u9898](https://www.luogu.com.cn/problem/P2245) .\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u662f\u8981\u6c42\u4e00\u4e2a $O(n^2)$ \u7ea7\u522b\u7684\uff0c\u6bcf\u4e24\u70b9\u7684\u8fb9\u6743\u90fd\u662f\u4e00\u4e2a\u5173\u4e8e\u8fd9\u4e24\u4e2a\u70b9\u7684\u4e00\u6b21\u7684\u5f0f\u5b50\u7684\uff0c\u4e00\u5f20\u56fe\u7684\u751f\u6210\u6811\uff08\u83ab\u540d\u60f3\u5230\u53bb\u5e74B\u5377\u7684\u4e01\u9999\u4e4b\u8def\uff09\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u62c6\u5f0f\u5b50\u5206\u6790\u4e86\uff1a\n$$\nw=\\begin{cases}|a_i-a_j-d|,i>j \\\\\n|a_j-a_i-d|=|a_i+d-a_j|,i\\le j\n\\end{cases}\n$$\n\u4ec5\u5dee\u5728\u4e86 $d$ \u7684\u6b63\u8d1f\uff08\u66f4\u8fd1\u4e00\u6b65\u7684\u5316\u7b80\u5c31\u6bd4\u8f83\u9ebb\u70e6\u4e86\u6240\u4ee5\u5148\u4e0d\u62c6\u5b8c\uff0c\u76f4\u63a5\u8003\u8651\u6b64\u65f6\u7684\u505a\u6cd5\uff09\u3002\n\n\u70b9\u6570\u8fb9\u6570\u90fd\u662f $O(n^2)$ \u6240\u4ee5\u76f4\u63a5 kruskal / prim \u662f\u4e0d\u884c\u7684\u3002\u8003\u8651 boruvka \u7b97\u6cd5\uff1a\n\n\u6bcf\u8f6e\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u627e\u5230\u5176\u6700\u77ed\u7684\u8fde\u5411\u5176\u5b83\u8fde\u901a\u5757\u7684\u8fb9\uff0c\u5168\u90e8\u627e\u5b8c\u4ee5\u540e\u628a\u8fd9\u4e9b\u8fb9\u4e24\u7aef\u7684\u8fde\u901a\u5757\u5168\u90e8\u5408\u5e76\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u53ea\u4f1a\u6267\u884c $O(\\log n)$ \u6b21\uff0c\u91cd\u70b9\u662f\u6bcf\u6b21\u627e\u5230\u6bcf\u4e2a\u8fde\u901a\u5757\u8fde\u5411\u5176\u5b83\u8fde\u901a\u5757\u7684\u8fb9\u3002\n\n\u663e\u7136\u6211\u4eec\u628a\u6bcf\u4e2a\u8fde\u901a\u5757\u653e\u5728\u4e00\u8d77\u8003\u8651\uff0c\u5bf9\u4e8e\u4e0a\u9762 $w$ \u7684\u5f0f\u5b50\uff0c\u5bb9\u6613\u53d1\u73b0 $j$ \u662f\u975e\u8be5\u8fde\u901a\u5757\u4e2d\u7684\u70b9\u4e2d\uff0c$a_j$ \u8ddd\u79bb $a_i+d$ \u6216\u8005 $a_i-d$ \u6700\u8fd1\u7684\uff0c\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\uff0c\u4f46\u662f\u8fd9\u6837\u65e0\u6cd5\u5904\u7406 $j$ \u4e0e $i$ \u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u7684\u9650\u5236\uff0c\u8003\u8651 lower_bound \u8fd8\u53ef\u4ee5\u653e\u5728 set \u4e0a\uff0c\u540c\u65f6\u5b83\u4e5f\u652f\u6301\u5feb\u901f\u7684\u63d2\u5165\u5220\u9664\u3002\u6240\u4ee5\u6bcf\u6b21\u5904\u7406\u8fde\u901a\u5757\u7684\u65f6\u5019\u5148\u628a\u8be5\u8fde\u901a\u5757\u7684\u70b9\u4ece set \u4e2d\u5220\u53bb\uff0c\u5904\u7406\u5b8c\u518d\u52a0\u5165\u5373\u53ef\u3002\u81f3\u4e8e\u4e8c\u5206\u7684\u65f6\u5019\uff0c\u8981\u8003\u8651 $a_j$ \u662f\u5c0f\u4e8e\u8fd8\u662f\u5927\u4e8e\u5b83\u8981\u201c\u6700\u8fd1\u201d\u7684\u90a3\u4e2a\u503c\u3002\u6240\u4ee5\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a set\uff0c\u4e00\u4e2a\u4ece\u5c0f\u5230\u5927\u4e00\u4e2a\u53cd\u4e4b\uff0c\u8fd9\u6837\u5c31\u6bd4\u8f83\u65b9\u4fbf\u3002\n\n\u6700\u70e6\u7684\u627e\u8fb9\u5b8c\u6210\u4e86\uff0c\u5269\u4e0b\u7684\u5408\u5e76\u5c31\u90fd\u662f\u5e73\u51e1\u7684\u4e86\u3002\u603b\u590d\u6742\u5ea6\u4e3a $O(n \\log^2 n)$. \u7531\u4e8e\u51fa\u9898\u4eba\u826f\u5fc3\u6240\u4ee5\u4e0d\u9700\u8981\u8fdb\u4e00\u6b65\u4f18\u5316\uff08\u4e0d\u4f1a\uff09\u662f\u53ef\u4ee5\u76f4\u63a5\u8fc7\u53bb\u7684\u3002\n\n\u6700\u4f18\u89e3\u5012\u6570\u7b2c\u4e00\u4f4d\uff0c\u552f\u4e00\u7684\u603b\u65f6\u95f4\u8d85\u8fc7 $1$min\uff0c\u6bd4\u5012\u6570\u7b2c\u4e8c\u6162\u4e86\u4e00\u500d\u7684 code\uff1a\n\n```c++\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(ll i=(a);i<=(b);i++)\n#define per(i,a,b) for(ll i=(a);i>=(b);i--)\n#define op(x) ((x&1)?x+1:x-1)\n#define odd(x) (x&1)\n#define even(x) (!odd(x))\n#define lc(x) (x<<1)\n#define rc(x) (lc(x)|1)\n#define lowbit(x) (x&-x)\n#define Max(a,b) (a>b?a:b)\n#define Min(a,b) (a<b?a:b)\n#define next Cry_For_theMoon\n#define il inline\n#define pb(x) push_back(x)\n#define is(x) insert(x)\n#define sit set<int>::iterator\n#define mapit map<int,int>::iterator\n#define pi pair<int,int>\n#define ppi pair<int,pi>\n#define pp pair<pi,pi>\n#define fr first\n#define se second\n#define vit vector<int>::iterator\n#define mp(x,y) make_pair(x,y)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int uint;\ntypedef double db;\nusing namespace std;\nconst int MAXN=2e5+10;\nll n,q,st,d,ed,k;\nll a[(int)1e6+10],fa[MAXN],num[(int)1e6+10];\nll nxt[MAXN];\npi gnxt[MAXN];\nvector<ll>group[MAXN];\nvector<pair<ll,ll>>e[MAXN];\nset<ll>s1;\nset<ll,greater<ll>>s2;\nll maxw[MAXN];\nll getdis(int x,int y){return abs(d-abs(a[x]-a[y]));}\nint Find(int x){\n\tif(fa[x]==x)return x;\n\treturn fa[x]=Find(fa[x]);\n}\nvoid Merge(int x,int y){\n\tif(Find(x)==Find(y))return;\n\tfa[Find(y)]=Find(x);\n\te[x].pb(mp(y,getdis(x,y)));\n\te[y].pb(mp(x,getdis(x,y)));\n}\nint check(){\n\trep(i,2,n)if(Find(1)!=Find(i))return 1;\n\treturn 0;\n}\nvoid check(int x,int y){\n\tif(!nxt[x])nxt[x]=y;\n\telse if(getdis(x,y) < getdis(x,nxt[x]))nxt[x]=y;\n}\nvoid dfs(int u,int fa){\n\tfor(vector<pair<ll,ll>>::iterator it=e[u].begin();it!=e[u].end();it++){\n\t\tpair<ll,ll>nxt=*it;\n\t\tif(fa==nxt.fr)continue;\n\t\tmaxw[nxt.fr]=max(maxw[u],nxt.se);\n\t\tdfs(nxt.fr,u);\n\t}\n}\nint main(){\n\tcin>>n>>q>>st>>d;\n\trep(i,1,n){\n\t\tcin>>a[i];\n\t\tnum[a[i]]=i;\n\t\tfa[i]=i;\n\t\ts1.is(a[i]);\n\t\ts2.is(a[i]);\n\t}\n\twhile(check()){\n\t\trep(i,1,n){nxt[i]=0;gnxt[i]=mp(0,0);group[i].clear();}\n\t\trep(i,1,n){group[Find(i)].pb(i);}\n\t\trep(i,1,n){\n\t\t\tint sz=group[i].size();\n\t\t\trep(j,0,sz-1){\n\t\t\t\ts1.erase(a[group[i][j]]);\n\t\t\t\ts2.erase(a[group[i][j]]);\n\t\t\t}\n\t\t\trep(j,0,sz-1){\n\t\t\t\t//u<v\n\t\t\t\tif(s1.lower_bound(a[group[i][j]]+d)!=s1.end()){\n\t\t\t\t\tll v=*s1.lower_bound(a[group[i][j]]+d);\n\t\t\t\t\tv=num[v];\n\t\t\t\t\tif(group[i][j]<v)check(group[i][j],v);\n\t\t\t\t}\n\t\t\t\tif(s2.lower_bound(a[group[i][j]]+d)!=s2.end()){\n\t\t\t\t\tll v=*s2.lower_bound(a[group[i][j]]+d);\n\t\t\t\t\tv=num[v];\n\t\t\t\t\tif(group[i][j]<v)check(group[i][j],v);\n\t\t\t\t}\n\t\t\t\t//u>v \n\t\t\t\tif(s1.lower_bound(a[group[i][j]]-d)!=s1.end()){\n\t\t\t\t\tll v=*s1.lower_bound(a[group[i][j]]-d);\n\t\t\t\t\tv=num[v];\n\t\t\t\t\tif(group[i][j]>v)check(group[i][j],v);\n\t\t\t\t}\n\t\t\t\tif(s2.lower_bound(a[group[i][j]]-d)!=s2.end()){\n\t\t\t\t\tll v=*s2.lower_bound(a[group[i][j]]-d);\n\t\t\t\t\tv=num[v];\n\t\t\t\t\tif(group[i][j]>v)check(group[i][j],v);\n\t\t\t\t}\n\t\t\t\t//\u66f4\u65b0\n\t\t\t\tif(gnxt[i].se==0 || getdis(gnxt[i].fr,gnxt[i].se)>getdis(group[i][j],nxt[group[i][j]]))gnxt[i]=\n\t\t\t\tmp(group[i][j],nxt[group[i][j]]); \n\t\t\t}\n\t\t\trep(j,0,sz-1){\n\t\t\t\ts1.is(a[group[i][j]]);\n\t\t\t\ts2.is(a[group[i][j]]);\n\t\t\t}\n\t\t}\n\t\trep(i,1,n){\n\t\t\tif(gnxt[i].se==0)continue;\n\t\t\tint u=gnxt[i].fr,v=gnxt[i].se;\n\t\t\tMerge(u,v);\n\t\t}\n\t}\n\tdfs(st,0);\n\trep(i,1,q){\n\t\tcin>>ed>>k;\n\t\tif(maxw[ed]<=k)printf(\"Yes\\n\");\n\t\telse printf(\"No\\n\");\n\t}\n\treturn 0;\n}\n```\n\n\n\n\n\n ",
        "postTime": 1626598586,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010CF1550F\u3011Jumping Around"
    },
    {
        "content": "\u5199\u5728\u524d\u9762\uff1a\u672c\u7bc7\u9898\u89e3\u7684\u91cd\u70b9\u662f\u7b2c\u4e09\u79cd\u505a\u6cd5\u3002\u524d\u9762\u7684\u4e24\u79cd\u505a\u6cd5\u5982\u679c\u6709\u6f0f\u6d1e\u70e6\u8bf7\u6307\u51fa\u3002\uff08\u56e0\u4e3a\u4f1e\u5175\u4f5c\u8005\u81ea\u5df1\u5e76\u6ca1\u6709\u53bb\u5b9e\u73b0/lengh\uff09\n\n\u611f\u8c22 @\u6ed1\u5946\u7a3d \u5bf9\u8fd9\u4e2a\u5373\u5c06\u9000\u5f79\u7684\u83dc\u9e21\u4f5c\u8005\u7684\u6307\u5bfc\u3002\n\n___\n\n\u505a\u6cd5\u4e00\uff1a\u7eaf\u7ebf\u6bb5\u6811\uff0c$O(n\\log n)$\u3002\uff08\u4f5c\u8005\u672a\u5b9e\u73b0\uff09\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u4e00\u4e2a\u601d\u8def\u5982\u4e0b\uff1a\u6309\u7167 $k$ \u5347\u5e8f\u5904\u7406\u6240\u6709\u8be2\u95ee\uff0c\u7ef4\u62a4\u5f53\u524d\u4e0e $s$ \u76f8\u8fde\u7684\u8fde\u901a\u5757\u4fe1\u606f\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u53ea\u8981\u80fd\u4fdd\u8bc1\u6211\u4eec\u7684\uff08\u6570\u636e\u7ed3\u6784\uff09\u64cd\u4f5c\u6b21\u6570**\u53ea\u4e0e\u6269\u5c55\u8fde\u901a\u5757\u7684\u6b21\u6570**\u6709\u5173\uff0c\u6211\u4eec\u7684\u590d\u6742\u5ea6\u5c31\u662f\u6b63\u786e\u7684\u3002\n\n- \u6362\u8a00\u4e4b\uff0c\u6bcf\u6b21\u626b\u4e00\u904d\u8fde\u901a\u5757\u8bd5\u56fe\u6269\u5c55\u5230\u65b0\u70b9\u662f\u9519\u7684\uff0c\u626b\u65b0\u70b9\u540c\u7406\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6362\u4e00\u79cd\u60f3\u6cd5\u7ef4\u62a4\u2014\u2014\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0d\u5728\u8fde\u901a\u5757\u4e2d\u7684\u70b9\uff0c**\u7ef4\u62a4\u6700\u5c0f\u7684\u80fd\u4f7f\u5f97\u5176\u8fde\u5165\u8fde\u901a\u5757\u7684 $k$**\u3002 \n\n\u8003\u8651\u52a0\u70b9\u7684\u5f71\u54cd\u3002\u8bbe\u70b9 $p$ \u521a\u88ab\u52a0\u5165\u4e86\u8fde\u901a\u5757\uff0c\u6b64\u65f6\u7684\u64cd\u4f5c\u5e94\u5f53\u662f\u2014\u2014\u4e24\u4e2a\u4e2d\u5fc3\u70b9\u5206\u522b\u4e3a $a_p-d$,$a_p+d$ \u7684 **\u201c\u8c37\u201d\u72b6\u7684\u5bf9\u4e00\u6b21\u51fd\u6570\u53d6 $\\min$**\u3002\n\n\u6ce8\u610f\u5230\u4e00\u6b21\u51fd\u6570\u7684\u659c\u7387\u53ea\u6709 $\\pm1$\uff0c\u4e8e\u662f\u6211\u4eec\u5f00\u4e24\u9897\u7ebf\u6bb5\u6811\u540e\u7ef4\u62a4\u6700\u5c0f\u7684 $b$ \u4e5f\u53ef\u4ee5\u8fbe\u5230\u76f8\u540c\u7684\u6548\u679c\u3002\uff08$b$ \u6307 $kx+b$ \u4e2d\u7684 $b$\uff09\n\n\u8003\u8651\u56de\u7b54\u8be2\u95ee\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u91cd\u590d\u4ee5\u4e0b\u8fc7\u7a0b\uff1a\u53d6\u51fa\u7ebf\u6bb5\u6811\u4e2d\u6700\u5c0f\u503c\uff0c\u5982\u679c\u5176 $\\le k$\uff0c\u90a3\u5c31\u5c06\u8fd9\u4e2a\u4f4d\u7f6e\u5220\u9664\uff08\u8d4b\u503c\u4e3a $+\\text{inf}$\uff09\uff0c\u5728\u5e76\u67e5\u96c6\u4e2d\u52a0\u5165\u8fde\u901a\u5757\uff0c\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c\u3002\u663e\u7136\u7ebf\u6bb5\u6811\u64cd\u4f5c\u53ea\u6709 $O(n)$ \u6b21\uff0c\u4e8e\u662f\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n\n~~\u4f46\u662f\u6709\u70b9\u96be\u5199\uff0c\u5e38\u6570\u4e5f\u6709\u70b9\u5927~~\u3002\u540c\u65f6\u4e5f\u4e0d\u597d\u5904\u7406 $s$ \u4e0d\u56fa\u5b9a\u7684\u60c5\u51b5\u3002\n\n___\n\n\u505a\u6cd5\u4e8c\uff1aBoruvka \u6c42 MST\u3002$O(n\\log^2 n)$\u3002\n\n\u8003\u8651\u4f7f\u5f97 $s\\to t$ \u7684\u8fb9\u5b58\u5728\u7684\u6700\u5c0f $k$\uff08$\\min(|a_s+d-a_t|,|a_s-d-a_t|$\uff09\uff0c\u6211\u4eec\u4e0d\u59a8\u5c06\u8fd9\u4e2a\u503c\u8bbe\u4e3a $s,t$ \u95f4\u7684**\u8fb9\u6743**\u3002\n\n\u90a3\u4e48\u8fd9\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u56fe\u4e0a\u95ee\u9898\u3002\u6211\u4eec\u4ece\u4e0a\u9762\u7684\u6269\u5c55\u8fde\u901a\u5757\u7684\u601d\u8def\u62bd\u51fa\u8eab\u6765\uff0c\u8003\u8651\u53e6\u5916\u4e00\u79cd\u7b49\u4ef7\u7684\u95ee\u9898\u95ee\u6cd5\uff1a\n\n- $k$ \u81f3\u5c11\u8981\u591a\u5927\u624d\u80fd\u4f7f\u5f97 $s,t$ \u8fde\u901a\uff1f\u6216\u8005\u6362\u8a00\u4e4b\uff0c$s,t$ **\u6240\u6709\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff1f**\n\n~~\u5b8c\u4e86 dna \u52a8\u4e86~~\u3002\u4e8e\u662f\u8fd9\u662f\u7b80\u5355\u7684**\u74f6\u9888\u8def\u95ee\u9898**\uff0c\u5e7f\u4e3a\u4eba\u77e5\u7684\u7ed3\u8bba\u662f\u7b54\u6848\u5c31\u662f MST \u4e0a\u4e24\u70b9\u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u6743\u3002\n\n- \u56de\u7b54\u8be2\u95ee\u8fd8\u662f\u9700\u8981\u79bb\u7ebf\u4f7f\u5f97 $k\\uparrow$\uff0c\u6c42\u51fa MST \u8fc7\u540e\u5bf9 MST \u4e0a\u8fb9\u4e5f\u6392\u5e8f\uff0c\u53cc\u6307\u9488\u5373\u53ef\u3002\n\n\u95ee\u9898\u53d8\u6210\u6c42**\u5b8c\u5168\u56fe MST**\uff0c\u5e7f\u4e3a\u4eba\u77e5\u7684\u5957\u8def\u662f\u8003\u8651 Boruvka\u3002\n\n\u95ee\u9898\u53d8\u6210\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6c42\u7ec8\u70b9\u4e0e\u5b83\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u7684\u6700\u5c0f\u8fb9\u3002\n\n\u5904\u7406 \u201c\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u201d \u8003\u8651\u6b63\u53cd\u626b\u8fde\u901a\u5757\u5e8f\u5217\uff0c\u5206\u522b\u8ba1\u7b97\u524d\u7f00\u8d21\u732e\u3002\u7528 set \u7ef4\u62a4\u503c\u57df\u5373\u53ef\u652f\u6301\u6700\u5c0f\u503c\u67e5\u8be2\u3002\n\nBoruvka 1log\uff0cset 1log\uff0c\u4e8e\u662f\u590d\u6742\u5ea6 $O(n\\log ^2 n)$\u3002\n\n\u8fd9\u4e2a\u505a\u6cd5\u975e\u5e38\u53ef\uff01\u4f46\u662f Boruvka \u592a\u96be\u5199\u4e86\uff01\u8fd8\u6709\u6ca1\u6709\u66f4\u52b2\u7206\u7684\u554a\uff1f\uff08\u8feb\u771f\uff09\n\n___\n\n\u505a\u6cd5\u4e09\uff1a\u5947\u6280\u6deb\u5de7\u6c42\u5b8c\u5168\u56fe MST\uff0c$O(n\\log^2 n)$\u3002\n\n\uff08\u542c\u8bf4\u662f\uff09\u5e38\u89c1\u7684 trick\uff1a\u5b8c\u5168\u56fe\u7684 MST \u53ef\u4ee5\u8003\u8651**\u5206\u6cbb**\uff0c\u6c42\u6bcf\u6b21\u5206\u6cbb\u5f97\u5230\u7684\u5b8c\u5168\u4e8c\u5206\u56fe\u7684 MST\uff0c\u7136\u540e\u5c06\u8fb9\u96c6\u5e76\u8d77\u6765\u8dd1 Kruskal\uff0c$O(n\\log^2 n)$\u3002\n\n- \u6b63\u786e\u6027\u53e3\u80e1\uff1a\u8003\u8651\u4e00\u6761\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u5206\u56fe\u7684 MST \u4e2d\u7684\u8fb9\u3002\u8003\u8651 Kruskal \u7684\u8fc7\u7a0b\uff0c\u5b83\u7edd\u65e0\u53ef\u80fd\u88ab\u52a0\u5165\u539f\u56fe MST\u3002\n\n\u5b8c\u5168\u4e8c\u5206\u56fe MST \u600e\u4e48\u505a\uff1f~~Boruvka\uff01~~ \u4e0d Boruvka \u6ca1\u6cd5\u505a\u3002\n\n\u8003\u8651\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u6c42\u51fa MST\u3002\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6c42\u51fa\u4e00\u4e2a**\u4e0e\u70b9\u6570\u540c\u9636\u7684 MST \u7684\u8d85\u96c6**\u3002\n\n- \u5177\u4f53\u5730\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5de6\u90e8\u70b9 $p$\uff0c\u8fde\u5411\u53f3\u8fb9 $a_p+d$ \u7684\u524d\u9a71\u540e\u7ee7\uff1b\u53f3\u8fb9\u540c\u7406\u8fde\u5411\u5de6\u8fb9 $a_p-d$ \u7684\u524d\u9a71\u540e\u7ee7\u3002\n\n\u6211\u4eec\u9700\u8981\u8bc1\u660e\u8fd9\u662f MST \u7684\u8d85\u96c6\u3002\n\n- \u8fde\u901a\u6027\uff1a\n\t- \u8003\u8651\u5c06\u5de6\u90e8\u70b9\u7684 $a_p+d$\uff0c\u53f3\u90e8\u70b9\u7684 $a_p$ \u5347\u5e8f\u653e\u4e00\u4e2a\u5e8f\u5217\u4e2d\u3002\uff08\u5f53\u7136\u5de6\u90e8 $a_p$\uff0c\u53f3\u90e8 $a_p-d$ \u4e5f\u662f\u8fd9\u4e2a\u5e8f\u5217\uff09\n    - \u8003\u8651\u6781\u957f\u7684\u5de6\u90e8\u53f3\u90e8\u8fde\u7eed\u6bb5\uff0c\u5185\u90e8\u5fc5\u7136\u8fde\u901a\uff0c\u56e0\u4e3a\u90fd\u8fde\u5411\u540c\u4e00\u4e2a\u524d\u9a71\u6216\u8005\u540e\u7ee7\u3002\n    - \u6bcf\u4e00\u4e2a\u8fde\u7eed\u6bb5\u95f4\u5fc5\u7136\u5728\u8fb9\u754c\u5904\u8fde\u901a\u3002\u8bc1\u6bd5\u3002\n\n- \u5305\u542b MST\uff1a\u7c7b\u4f3c\u4e8e\u4e0a\u9762\uff0c\u8003\u8651 Kruskal \u7684\u8fc7\u7a0b\u3002 \n\n\u597d\u5199\uff0c\u597d\u8c03\uff0c\u597d\u7406\u89e3\uff0c\u4e0d\u6bd2\u7624\uff0c\u8dd1\u5f97\u5feb\u3002\u5927\u5bb6\u5feb\u6765\u5199\uff01\n\nupd\uff1a\n\u8003\u8651\u5c06\u7ef4\u514b\u66f2\u513f\u4e8c\u5206\u6362\u6210\u53cc\u6307\u9488\uff0c\u6392\u5e8f\u7528\u9e21\u6392\u5c31\u53ef\u4ee5\u8ba9\u8fd9\u4e2a\u505a\u6cd5\u4e5f\u8fbe\u5230 $O(n\\log n)$\u3002\n\nupd2\uff1a\n\n- \u9996\u5148\uff0c\u9e21\u6392\u662f\u4e0d\u9700\u8981\u7684\uff0c\u56e0\u4e3a\u503c\u57df\u591f\u5c0f\u6876\u6392\u5c31\u884c\u3002\n\n- \u5176\u6b21\uff0c\u6211\u4eec\u5176\u5b9e\u540e\u9762\u90a3\u4e00\u8fb9 Kruskal \u662f\u4e0d\u9700\u8981\u8dd1\u7684\u3002\u56e0\u4e3a\u7528 MST \u7684\u8d85\u96c6\u53cc\u6307\u9488\u5e76\u4e0d\u5f71\u54cd\u6b63\u786e\u6027\u3002\n___\n\n\u505a\u6cd5\u4e09\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nconst int maxn = 2e5+5;\nint n,m,S,D,a[maxn],ans[maxn],ecnt;\nstruct E{int x,y,z;}e[maxn*25],mst[maxn];\nstd :: vector <int> V;\nvoid lnk(int p,int s,int l){\n\tauto it = std::lower_bound(V.begin(),V.end(),p);int P = it-V.begin();\n\tif(it != V.end())e[++ecnt] = (E){s,l+P,*it-p};\n\tif(it != V.begin())--it,e[++ecnt] = (E){s,l+P-1,p-*it};\n}\nvoid Div(int l,int r){\n\tif(l != r){\n\t\tint mid = l+r>>1;\n\t\tDiv(l,mid);for(int i=mid+1;i<=r;++i)lnk(a[i]-D,i,l);\n\t\tDiv(mid+1,r);for(int i=l;i<=mid;++i)lnk(a[i]+D,i,mid+1);\n\t}\n\tV.clear();for(int i=l;i<=r;++i)V.push_back(a[i]);\n}\nstruct DSU{\n\tint fa[maxn];\n\tvoid init(){for(int i=1;i<=n;++i)fa[i] = i;}\n\tint getfa(int x){return fa[x] == x ? x : fa[x] = getfa(fa[x]);}\n\tvoid merge(int x,int y){x = getfa(x),y = getfa(y),fa[x] = y;}\n}dsu;\nvoid Kruskal(){\n\tauto cmp = [](E a,E b){return a.z<b.z;};\n\tstd :: sort(e+1,e+ecnt+1,cmp);\n\tint cnt = 0;dsu.init();\n\tfor(int i=1;cnt<n-1;++i){\n\t\tint fx = dsu.getfa(e[i].x),fy = dsu.getfa(e[i].y);\n\t\tif(fx != fy)dsu.fa[fx] = fy,mst[++cnt] = e[i];\n\t}\n\tstd :: sort(mst+1,mst+cnt+1,cmp);\n}\nstruct Q{int k,t,id;}q[maxn];\nint main(){\n\tscanf(\"%d %d %d %d\",&n,&m,&S,&D);\n\tfor(int i=1;i<=n;++i)scanf(\"%d\",&a[i]);\n\tDiv(1,n),Kruskal();\n\tfor(int i=1;i<=m;++i)scanf(\"%d %d\",&q[i].t,&q[i].k),q[i].id = i;\n\tstd :: sort(q+1,q+m+1,[](Q a,Q b){return a.k<b.k;}),dsu.init();\n\tfor(int i=1,j=1;i<=m;++i){\n\t\twhile(j<n&&mst[j].z<=q[i].k)dsu.merge(mst[j].x,mst[j].y),++j;\n\t\tans[q[i].id] = (dsu.getfa(S) == dsu.getfa(q[i].t));\n\t}\n\tfor(int i=1;i<=m;++i)puts(ans[i]?\"Yes\":\"No\");\n\treturn 0;\n}\n```\n",
        "postTime": 1649837144,
        "uid": 114153,
        "name": "Sali\u0435ri",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1550F"
    },
    {
        "content": "\u53ea\u8981\u5bf9\u4e8e\u6bcf\u4e2a $i$\uff0c\u6c42\u51fa\u4e00\u4e2a\u5230\u8fbe\u5b83\u7684\u6700\u5c0f\u7075\u6d3b\u7a0b\u5ea6 $t_i$ \u5c31\u53ef\u4ee5 $O(1)$ \u56de\u7b54\u6240\u6709\u8be2\u95ee\n   \n\u8003\u8651\u8fdb\u884c\u6574\u4f53\u4e8c\u5206\uff0c\u73b0\u5728\u6709\u4e00\u4e9b\u70b9\uff0c\u6211\u4eec\u77e5\u9053\u5b83\u4eec\u7684 $t_i$ \u5728 $[L,R]$ \u4e4b\u95f4\uff0c\u6211\u4eec\u5e0c\u671b\u77e5\u9053\u6bcf\u4e2a\u70b9\u7684 $t_i$ \u4e0e $m = \\dfrac{L+R}{2}$ \u7684\u5927\u5c0f\u5173\u7cfb\n   \n\u8003\u8651\u54ea\u4e9b\u70b9\u7684 $t_i \\le m$\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u4e24\u7c7b\u60c5\u51b5\n   \n- 1. \u5728 $k = m$ \u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u70b9\u76f4\u63a5\u53ef\u4ee5\u8df3\u5230\u67d0\u4e2a $t_i < L$  \u7684\u70b9\n   \n- 2. \u5728 $k = m$ \u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u5230\u8fbe\u67d0\u4e2a\u70b9\u96c6\u5185\u5df2\u7ecf\u88ab\u786e\u8ba4\u53ef\u884c\u7684\u70b9\n   \n\u4e8b\u5b9e\u4e0a\u7531\u4e8e\u6574\u4f53\u4e8c\u5206\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u5728\u5904\u7406 $[L,R]$ \u65f6\u5df2\u7ecf\u786e\u5b9a\u4e86\u54ea\u4e9b\u70b9 $t_i < L$\uff0c\u6240\u4ee5 1. \u662f\u7b80\u5355\u7684\u3002\u6211\u4eec\u76f4\u63a5\u7528\u4e00\u4e2a `set`\uff0c\u79f0\u4e3a $P$\uff0c\u91cc\u9762\u5b58\u50a8\u6240\u6709 $t_i < L$ \u7684\u70b9\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u4e8c\u5206\u4e00\u4e0b\u5373\u53ef\n\n\u6211\u4eec\u628a\u7531\u4e8e 1. \u53ef\u884c\u7684\u70b9\u5b58\u50a8\u5728\u4e00\u4e2a `vector` \u91cc\u9762\uff0c\u628a\u5f53\u524d\u8fd8\u4e0d\u53ef\u884c\u7684\u70b9\u5b58\u50a8\u5728\u4e00\u4e2a `set` \u91cc\u9762\n\n\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u4ece `vector` \u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u7528\u5b83\u53bb\u5c1d\u8bd5\u66f4\u65b0 `set` \u5185\u7684\u70b9\uff0c\u5982\u679c\u8fd9\u6837\u4f7f\u5f97\u4e00\u4e9b\u70b9\u53ef\u884c\u4e86\uff0c\u5c31\u628a\u8fd9\u4e9b\u70b9\u4ece `set` \u91cc\u9762\u5220\u6389\uff0c\u7136\u540e\u653e\u5165 `vector`\n\n\u6700\u7ec8 `vector` \u88ab\u6e05\u7a7a\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u54ea\u4e9b\u70b9\u7684 $t_i$ \u5728 $[L,m]$ \u95f4\uff0c\u54ea\u4e9b\u70b9\u7684 $t_i$ \u5728 $[m+1,R]$ \u95f4\uff0c\u9012\u5f52\u5904\u7406\u5373\u53ef\n\n\u6ce8\u610f\uff1a\u5728\u5904\u7406\u5b8c $[L,m]$ \u540e\uff0c\u6211\u4eec\u8981\u628a $t_i$ \u5728 $[L,m]$ \u7684\u70b9\u52a0\u5165 $P$\uff0c\u7136\u540e\u518d\u5904\u7406 $[m+1,R]$\n\n```cpp\n#include <cstdio>\n#include <set>\n#include <vector>\nusing namespace std;\nint n,q,s,d;\nint a[200005],t[200005];\n\nstruct node{\n\tint id,val;\n};\n\nset <int> P;\nset <int>::iterator it;\nset <node> Q;\nset <node>::iterator iter;\n\nbool operator <(node a,node b){\n\treturn a.val < b.val;\n}\n\nvoid solve(vector <int> S,int L,int R){\n\tvector <int> t1,t2;\n\tt1.clear();\n\tt2.clear();\n\tif(L == R){\n\t\tfor(int i = 0;i < S.size();i++){\n\t\t\tt[S[i]] = L;\n\t\t\tP.insert(a[S[i]]);\n\t\t}\n\t\treturn;\n\t}\n    int m = (L + R) / 2;\n    for(int i = 0;i < S.size();i++) Q.insert({S[i],a[S[i]]});\n    for(int i = 0;i < S.size();i++){\n        int id = S[i];\n        it = P.lower_bound(a[id] - (d + m));\n        if(it != P.end() && (*it) <= a[id] - d + m){\n            t1.push_back(id);\n            Q.erase({id,a[id]});\n            continue;\n        }\n        it = P.lower_bound(a[id] + d - m);\n        if(it != P.end() && (*it) <= a[id] + d + m){\n        \tt1.push_back(id);\n        \tQ.erase({id,a[id]});\n        }\n    }\n    while(!t1.empty()){\n    \tint id = t1.back();\n    \tt1.pop_back();\n    \titer = Q.lower_bound({0,a[id] - (d + m)});\n    \twhile(iter != Q.end() && (iter->val) <= a[id] - d + m){\n    \t\tt1.push_back(iter->id);\n    \t\titer = Q.erase(iter);\n    \t}\n    \titer = Q.lower_bound({0,a[id] + d - m});\n    \twhile(iter != Q.end() && (iter->val) <= a[id] + d + m){\n    \t\tt1.push_back(iter->id);\n    \t\titer = Q.erase(iter);\n    \t}\n    }\n    for(int i = 0;i < S.size();i++){\n    \tif(Q.count({S[i],a[S[i]]})){\n    \t\tt2.push_back(S[i]);\n    \t}else{\n    \t\tt1.push_back(S[i]);\n    \t}\n    }\n    solve(t1,L,m);\n    solve(t2,m+1,R);\n}\n\nint main(){\n    scanf(\"%d%d%d%d\",&n,&q,&s,&d);\n    for(int i = 1;i <= n;i++) scanf(\"%d\",&a[i]);\n    t[s] = 0;\n    P.insert(a[s]);\n    vector <int> tmp;\n    tmp.clear();\n    for(int i = 1;i <= n;i++) if(i != s) tmp.push_back(i);\n    solve(tmp,0,1000000);\n    //for(int i = 1;i <= n;i++) printf(\"%d \",t[i]);\n    //printf(\"\\n\");\n    for(int i = 1;i <= q;i++){\n    \tint x,y;\n    \tscanf(\"%d%d\",&x,&y);\n    \tif(y >= t[x]) printf(\"Yes\\n\");\n    \telse printf(\"No\\n\");\n    }\n\treturn 0;\n}\n```\n",
        "postTime": 1633675891,
        "uid": 330759,
        "name": "\u56e7\u4ed9",
        "ccfLevel": 0,
        "title": "CF1550F \u9898\u89e3"
    },
    {
        "content": "- \u6570\u8f74\u4e0a\u987a\u6b21\u6709 $n$ \u4e2a\u70b9 $a_1 < a_2 < \\cdots < a_n$\u3002\n- \u6709\u4e00\u53ea\u5c0f\u9752\u86d9\uff0c\u521d\u59cb\u65f6\u5728 $a_s$ \u5904\u3002\u5c0f\u9752\u86d9\u6709\u4e24\u4e2a\u53c2\u6570\uff1a\u6b65\u957f $d$ \u548c\u7075\u6d3b\u7a0b\u5ea6 $k$\u3002\u5176\u4e2d\uff0c\u6b65\u957f $d$ \u662f\u786e\u5b9a\u7684\uff0c\u800c\u7075\u6d3b\u7a0b\u5ea6 $k$ \u662f\u53ef\u4ee5\u8c03\u6574\u7684\u3002\n- \u5c0f\u9752\u86d9\u53ef\u4ee5\u4ece\u67d0\u4e2a\u70b9\u8df3\u5230\u53e6\u4e00\u4e2a\u70b9\u3002\u4f46\u8fd9\u662f\u6709\u8981\u6c42\u7684\uff1a\u5c0f\u9752\u86d9\u80fd\u4ece $a_i$ \u8df3\u5230 $a_j$\uff0c\u5f53\u4e14\u4ec5\u5f53 $d-k\\leq |a_i-a_j|\\leq d+k$\u3002\n- \u7ed9\u5b9a $a_1,...,a_n$ \u548c $d$\u3002\u4f60\u9700\u8981\u56de\u7b54 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a\u4e00\u4e2a\u7075\u6d3b\u7a0b\u5ea6 $k$ \u548c\u4e00\u4e2a\u4e0b\u6807 $i$\uff0c\u4f60\u9700\u8981\u56de\u7b54\uff1a\u6b64\u65f6\u7684\u5c0f\u9752\u86d9\u80fd\u5426\u8df3\u5230 $a_i$\uff1f\n- \u4fdd\u8bc1 $1\\leq n,q\\leq 2\\times 10^5$\uff0c$1\\leq s,i\\leq n$\uff0c$1\\leq a_i,d,k\\leq 10^6$\uff0c$a_1 < a_2 < \\cdots < a_n$\u3002\n\n\u521d\u6b65\u5206\u6790\uff0c\u8ba4\u4e3a\u6a21\u578b\u662f\u6700\u77ed\u8def\uff0c\u5373\u6c42\u51fa\u5230\u6bcf\u4e2a $a_i$ \u6240\u9700\u7684 $k_{\\min}$\uff0c\u4f46\u662f\u53d1\u73b0\u8f6c\u79fb\u5b9e\u9645\u4e0a\u9700\u8981\u7684 $k$ \u662f **\u8def\u5f84\u4e0a\u6bcf\u6761\u8fb9\u5bf9\u5e94 $k$ \u7684\u6700\u5927\u503c**\uff0c\u6240\u4ee5\u5176\u5b9e\u662f\u4e00\u4e2a Kruskal \u91cd\u6784\u6811\u6a21\u578b\u3002\n\n\u73b0\u5728\u9762\u4e34\u7684\u95ee\u9898\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a **\u5b8c\u5168\u56fe MST**\uff0c\u5e38\u89c1\u7684\u505a\u6cd5\u6709 Boruvka \u7b97\u6cd5\uff0c\u5148\u8003\u8651\u8fd9\u4e2a\u600e\u4e48\u505a\u3002\u5176\u5b9e\u5c31\u662f\u8981\u6c42\u6bcf\u4e2a\u70b9\uff08\u4e0d\u65b9\u4fbf\u5bf9\u4e8e\u8fde\u901a\u5757\u6574\u4f53\u8003\u8651\uff09\u8fde\u51fa\u53bb\u7684\u6700\u77ed\u975e\u540c\u8272\u8fb9\uff0c\u4e5f\u5c31\u662f\u5728 $a_i+d,a_i-d$ \u627e\u5230\u524d\u9a71\u540e\u7ee7\u4e2d\u7b2c\u4e00\u4e2a\u548c\u81ea\u5df1\u4e0d\u540c\u8272\u7684\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u8f85\u52a9\u5de5\u5177\u662f **\u5e76\u67e5\u96c6\u542f\u53d1\u5f0f\u5408\u5e76+\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u5185\u989c\u8272\u7684 $\\min,\\max$ \u5e76\u652f\u6301\u7ebf\u6bb5\u6811\u4e8c\u5206**\uff0c\u8fd9\u6837\u5c31\u80fd\u505a\u5230 2log\uff0c\u4f46\u662f\u74f6\u9888\u6709\u4e00\u4e2a\u542f\u53d1\u5f0f\u5408\u5e76+\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\uff0c\u8fd8\u6709\u4e00\u4e2a Boruvka+\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u5e38\u6570\u8f83\u5927\uff1b\u53e6\u4e00\u4e2a\u6613\u4e8e\u5b9e\u73b0\u5f97\u591a\u7684\u505a\u6cd5\u5c31\u662f\uff0c\u6bcf\u8f6e\u628a\u6bcf\u4e2a\u70b9\u6240\u5c5e\u8fde\u901a\u5757\u7f16\u53f7\u5199\u6210\u5e8f\u5217\uff0c\u53ea\u9700\u8981\u627e\u67d0\u4e2a\u4f4d\u7f6e\u5411\u524d\u5411\u540e\u7b2c\u4e00\u4e2a\u4e0d\u540c\u8272\u7684\uff0c\u90a3\u4e48\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u53ef\u7528\u70b9\u7684 `std::set`\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u989c\u8272\u5148\u5220\u6389\u5176\u4e2d\u6240\u6709\u8fd9\u4e2a\u989c\u8272\u7684\u70b9\uff0c\u518d\u5bf9\u6bcf\u4e2a\u8be5\u8272\u70b9\u8fdb\u53bb\u627e\u5bf9\u5e94\u4f4d\u7f6e\u7684\u524d\u9a71\u540e\u7ee7\uff0c\u5b8c\u4e8b\u518d\u91cd\u65b0\u585e\u56de\u53bb\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4e5f\u662f 2log\uff0c\u590d\u6742\u5ea6\u74f6\u9888\u53ea\u6709 Boruvka+set \u4e00\u5904\uff0c\u4f46\u662f  set \u7684\u5e38\u6570\u4e5f\u6bd4\u8f83\u5927\u3002\n\n\u53e6\u5916\uff0c\u5b8c\u5168\u56fe MST \u8fd8\u6709\u4e00\u4e2a\u5206\u6cbb\u6c42\u6cd5\uff1a\u6c42 $G=(V,E)$ \u7684 MST\uff0c\u628a $V$ \u5212\u5206\u4e3a $S,T$\uff0c\u53ea\u4fdd\u7559 $S,T$ \u4e4b\u95f4\u7684 MST \u9700\u8981\u7684\u8fb9\uff08\u4e22\u6389 Kruskal \u8fc7\u7a0b\u4e2d\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u4f7f\u7528\u7684\u8fb9\uff09\uff0c\u7136\u540e\u518d\u4fdd\u7559 $S,T$ \u5185\u90e8\u7684 MST\uff0c\u8fd9\u4e9b\u8fb9\u4e00\u5b9a\u5305\u542b\u539f\u56fe\u7684 MST\u3002\u6ce8\u610f\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u53ef\u4ee5\u9012\u5f52\u5904\u7406\u7684\uff0c\u9664\u975e\u80fd\u65b9\u4fbf\u5730\u6c42\u51fa $S,T$ \u5185\u90e8\u7684 MST\u3002\u540c\u65f6\uff0c\u6c42\u51fa\u4e4b\u95f4 MST \u7684\u8d85\u96c6\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u5728\u672c\u9898\u4e2d\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $i\\in S$\uff0c\u627e\u5230 $a_i+d$ \u524d\u540e\u7b2c\u4e00\u4e2a\u548c\u81ea\u5df1\u4e0d\u540c\u70b9\u96c6\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9\u5e76\u4fdd\u7559\uff0c\u5bf9\u6bcf\u4e2a $j$ \u627e $a_j-d$ \u7684\u524d\u9a71\u540e\u7ee7\uff0c\u8fd9 $2n$ \u6761\u8fb9\u4e00\u5b9a\u662f MST \u7684\u8d85\u96c6\u3002\u7528\u8fd9\u79cd\u65b9\u6cd5\u627e\u5230\u7684\u8fb9\u8db3\u591f\u5c0f\uff0c\u56e0\u4e3a\u6839\u636e Kruskal \u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u8bc1\u660e\u4e86\u8fde\u901a\u6027\uff0c\u90a3\u4e48\u66f4\u8fdc\u7684\u8fb9\u6743\u503c\u66f4\u5927\u4e00\u5b9a\u4f1a\u88ab\u4e22\u6389\u3002\u8fde\u901a\u6027\u7684\u8bc1\u660e\u8003\u8651\u628a $i\\in S$ \u7684 $a_i+d$ \u548c $j\\in T$ \u7684 $a_j$ \u653e\u5728\u4e00\u8d77\u6392\u5e8f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u76f8\u540c\u7c7b\u578b\u7684\u4e00\u6bb5 $i$\uff0c\u5176\u627e\u5230\u7684 $j$ \u662f\u540c\u4e00\u4e2a\uff1b$a_i$ \u548c $a_j-d$ \u4e5f\u662f\u540c\u4e00\u4e2a\u5e8f\u5217\uff0c\u90a3\u4e48\u540c\u4e00\u6bb5 $j$ \u627e\u5230\u7684 $i$ \u4e5f\u662f\u540c\u4e00\u4e2a\uff0c\u6240\u4ee5\u5185\u90e8\u8054\u901a\uff0c\u76f8\u90bb\u6bb5\u8fde\u901a\uff0c\u6574\u56fe\u8054\u901a\u3002\u4f9d\u7136\u662f 2log\uff0c\u4f46\u662f\u5e38\u6570\u6bd4\u8f83\u5c0f\u3002\u590d\u6742\u5ea6\u74f6\u9888\u4e4b\u4e00\u5728\u4e8e\u628a\u627e\u5230\u7684 $O(n\\log n)$ \u6761\u8fb9\u6392\u5e8f\u5e76\u5efa\u7acb Kruskal \u91cd\u6784\u6811/\u6700\u5c0f\u751f\u6210\u6811\uff0c\u53ef\u4ee5\u6876\u6392+\u79bb\u7ebf\u53cc\u6307\u9488\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u53ef\u4ee5\u62d3\u5c55\u5230 $s$ \u4e0d\u56fa\u5b9a\u7684\u60c5\u51b5\uff1b\u53e6\u4e00\u4e2a\u74f6\u9888\u662f\u5982\u4f55\u5feb\u901f\u5bf9\u6bcf\u4e2a $i$ \u627e\u5230\u5bf9\u5e94\u7684 $j$\uff0c\u53d1\u73b0\u6309\u7167\u4e0a\u9762\u7684\u6d41\u7a0b\u5f52\u5e76\u5c31\u597d\u4e86\uff0c\u8fd9\u6837\u6bd4 2log \u96be\u5199\u4e00\u4e9b\uff0c\u4f46\u662f\u505a\u5230\u4e86 1log\u3002[Submission](https://codeforces.com/contest/1550/submission/204185717)",
        "postTime": 1683036247,
        "uid": 447750,
        "name": "luogubot",
        "ccfLevel": 0,
        "title": "CF1550F"
    },
    {
        "content": "\u9898\u4e0d\u9519\uff0c\u4f46\u662f\u82b1\u4e86\u5f88\u4e45\u554a\uff0c\u5b8c\u5168\u6bd4\u4e0d\u8fc7\u8d3a\u9898\u602a\u3002\n\n\u7b54\u6848\u6709\u5355\u8c03\u6027\uff0c\u8f6c\u5316\u6c42\u6bcf\u4e2a\u70b9\u88ab\u8df3\u5230\u6240\u9700\u7684\u6700\u5c0f $k_i$\uff0c\u5bb9\u6613\u60f3\u5230\u7528\u6574\u4f53\u4e8c\u5206\u7ef4\u62a4\u4e00\u4e2a\u6709 $s$ \u7684\u8fde\u901a\u5757\uff0c\u6bcf\u6b21\u62d3\u5c55\u7684\u65f6\u5019\u5c31\u8003\u8651\u5728\u503c\u57df\u8303\u56f4\u5185\u7684\u70b9\u80fd\u4e0d\u80fd\u5728 $k$ \u53d6 $(l+r)/2$ \u7684\u65f6\u5019\u8df3\u51fa\u53bb\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5c31\u662f\u770b\u80fd\u4e0d\u80fd\u4ee5 $k=(l+r)/2$ \u8df3\u5230 $k_i<l$ \u7684\u70b9\u4e0a\uff081\uff09\u3002\n\n\u4f46\u662f\u8fd9\u6837\u4f1a\u5c11\u70b9\uff0c\u56e0\u4e3a\u503c\u57df\u8303\u56f4\u5185\u7684\u70b9\u80fd\u591f\u8df3\u51fa\u53bb\uff0c\u800c\u503c\u57df\u8303\u56f4\u5185\u6709\u4e9b\u4e0d\u80fd\u8df3\u51fa\u53bb\u7684\u70b9\u53ef\u4ee5\u85c9\u7531\u8fd9\u4e9b\u70b9\u95f4\u63a5\u8df3\u51fa\u53bb\uff082\uff09\u3002\n\n\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u7ef4\u62a4\uff081\uff09\u7c7b\u70b9\u3002\u6211\u4eec\u5728\u6267\u884c\u6574\u4f53\u4e8c\u5206\u7684\u65f6\u5019\u5148\u9012\u5f52\u5de6\u5b50\u6811\uff0c\u8fd9\u6837\u8dd1\u5230\u53f6\u5b50\u7684\u65f6\u5019\u628a\u53f6\u5b50\u52a0\u5165\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff08`std::set` is enough\uff09\uff0c\u8fd9\u6837\u6211\u4eec\u9012\u5f52\u5230\u540e\u9762\u7684\u7ed3\u70b9\u65f6\u6570\u636e\u7ed3\u6784\u4e2d\u5b58\u653e\u7684\u5c31\u662f\u6240\u6709\u7684\uff081\uff09\u7c7b\u70b9\uff0c\u8dd1\u5b8c\uff081\uff09\u7c7b\u70b9\u518d\u628a\u503c\u57df\u8303\u56f4\u5185\u5269\u4e0b\u7684\u70b9\u4f9d\u6b21\u5224\u65ad\u80fd\u5426\u95f4\u63a5\u8df3\u51fa\u53bb\u5373\u53ef\u3002\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nusing P = pair<int, int>;\nint n, Q, st, d, a[200100], ans[200100], q[200100];\nint q1[200100], q2[200100];\nset<int> s;\nvoid solve(int l, int r, int lq, int rq) {\n    if (l == r) {\n        for (int i=lq; i<=rq; ++i) {\n            ans[q[i]] = l;\n            s.insert(a[q[i]]);\n        }\n        return;\n    }\n    set<P> now;\n    for (int i=lq; i<=rq; ++i) {\n        now.emplace(a[q[i]], q[i]);\n    }\n    int mid = (l+r)/2, tl = 0, tr = 0;\n    for (int i=lq; i<=rq; ++i) {\n        auto it = s.lower_bound(a[q[i]]-d-mid);\n        if (it != s.end() && (*it) <= a[q[i]]-d+mid) {\n            q1[++tl] = q[i];\n            now.erase(P(a[q[i]], q[i]));\n        }\n        else {\n            it = s.lower_bound(a[q[i]]+d-mid);\n            if (it != s.end() && (*it) <= a[q[i]]+d+mid) {\n                q1[++tl] = q[i];\n                now.erase(P(a[q[i]], q[i]));\n            }\n        }\n    }\n    for (int i; tl;) {\n        i = q1[tl--];\n        auto it = now.lower_bound(P(a[i]-d-mid, 0));\n        while (it != now.end() && it->first <= a[i]-d+mid) {\n            q1[++tl] = it->second;\n            it = now.erase(it);\n        }\n        it = now.lower_bound(P(a[i]+d-mid, 0));\n        while (it != now.end() && it->first <= a[i]+d+mid) {\n            q1[++tl] = it->second;\n            it = now.erase(it);\n        }\n    }\n    tl = 0;\n    for (int i=lq; i<=rq; ++i) {\n        if (now.count(P(a[q[i]], q[i]))) {\n            q2[++tr] = q[i];\n        }\n        else {\n            q1[++tl] = q[i];\n        }\n    }\n    for (int i=1; i<=tl; ++i) q[lq+i-1] = q1[i];\n    for (int i=1; i<=tr; ++i) q[lq+tl+i-1] = q2[i];\n    solve(l, mid, lq, lq+tl-1);\n    solve(mid+1, r, lq+tl, rq);\n}\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin >> n >> Q >> st >> d;\n    int cnt = 0;\n    for (int i=1; i<=n; ++i) {\n        cin >> a[i];\n        if (i != st) {\n            q[++cnt] = i;\n        }\n    }\n    s.insert(a[st]);\n    solve(0, 1e6, 1, cnt);\n    for (int i, k; Q--;) {\n        cin >> i >> k;\n        if (ans[i] <= k) {\n            cout << \"yEs\\n\";\n        }\n        else {\n            cout << \"nO\\n\";\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1656304474,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u602a"
    },
    {
        "content": "# \u9898\u76ee\u63cf\u8ff0\n\n[\u4f20\u9001\u95e8 to Luogu](https://www.luogu.com.cn/problem/CF1550F).\n\n# [\u9898\u89e3](https://www.cnblogs.com/Arextre/p/15032161.html)\n\n\u9996\u5148\u660e\u767d\uff0c\u5982\u679c\u4f60\u60f3\u4ece $i$ \u8df3\u5230 $j$\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u7684\u4fee\u6b63\u503c\u4e3a\n$$\nw_{ij}=|d-|a_i-a_j||\n$$\n\u5982\u679c\u6211\u4eec\u60f3\u4ece $s$ \u8d70\u5230 $t$\uff0c\u5047\u8bbe\u6211\u4eec\u7ecf\u8fc7\u7684\u8def\u5f84\u4e3a $\\{p_0,p_1,p_2,...,p_x|p_0=s,p_x=t\\}$\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u7684\u4fee\u6b63\u503c\u5373\u4e3a\n$$\nreq_t=\\max_{i=1}^n w_{p_{i-1}p_i}\n$$\n\u7136\u540e\u6bd4\u8f83 $req_t$ \u4e0e\u5b83\u7ed9\u7684 $k$ \u5373\u53ef\uff0c\u5982\u679c $k<req_t$\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a $\\tt nO$\uff0c\u5426\u5219\u4e3a $\\tt yEs$.\n\n\u73b0\u5728\u95ee\u9898\u53d8\u6210\uff0c\u5982\u4f55\u6c42 $req_t$\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u5c06 $w_{ij}$ \u770b\u6210\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\uff0c\u73b0\u5728\u6211\u4eec\u9762\u4e34\u7684\u5c31\u662f\u4e00\u5f20\u6709 $n$ \u4e2a\u70b9\uff0c$n(n-1)\\over 2$ \u6761\u8fb9\u7684\u56fe\uff0c\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u8981\u4ece\u7ed9\u5b9a\u8d77\u70b9 $s$ \u5230\u67d0\u4e2a\u70b9\u7684\u7ecf\u8fc7\u7684\u6700\u5927\u8fb9\u6700\u5c0f\uff0c\u8fd9\u4e0d\u96be\u8ba9\u6211\u4eec\u60f3\u5230\u4e86\u4e8c\u5206\u7b54\u6848\u3002\n\n\u4e0d\u8fc7\uff0c\u8fd9\u53c8\u662f\u53e6\u4e00\u4e2a\u95ee\u9898 \u2014\u2014 \u4e8c\u5206\u7b54\u6848\u4e4b\u540e\uff0c\u5982\u4f55\u68c0\u67e5\uff1f\u4e00\u4e2a\u6bd4\u8f83\u666e\u904d\u7684\u60f3\u6cd5\u5c31\u662f\uff0c\u5c06\u6240\u6709\u6743\u5c0f\u4e8e\u7b49\u4e8e $mid$ \u7684\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u66b4\u529b\u5408\u5e76\u5230\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\uff0c\u6700\u540e\u770b $s,t$ \u662f\u5426\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u6837\u505a\uff0c\u4f3c\u4e4e\u4e8c\u5206\u7b54\u6848\u6709\u70b9\u591a\u4e8e\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8d2a\u5fc3\u5730\u5c06\u5f53\u524d\u6743\u6700\u5c0f\u7684\u8fb9\u8fde\u63a5\u7684\u4fe9\u70b9\u52a0\u5165\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\uff0c\u67d0\u4e2a\u65f6\u523b $s,t$ \u4f4d\u4e8e\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u65f6\uff0c\u6700\u540e\u52a0\u5165\u7684\u8fd9\u6761\u8fb9\u5c31\u662f\u7b54\u6848\u3002\n\n\u4f46\u662f\u8fd9\u6837\u505a\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\n\n- \u8fb9\u6700\u591a\u8fbe\u5230 $n^2$ \u7ea7\u522b\uff1b\n- \u6bcf\u4e2a\u8be2\u95ee\u90fd\u53cd\u590d\u52a0\u8fb9\u5b9e\u5728\u592a\u91cd\u590d\uff1b\n\n\u6211\u4eec\u91cd\u65b0\u601d\u8003\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u53d1\u73b0\u5b83\u4f3c\u4e4e\u548c\u6700\u5c0f\u751f\u6210\u6811\u6bd4\u8f83\u76f8\u4f3c\uff0c\u6211\u4eec\u4ece\u751f\u6210\u6811\u65b9\u5411\u8003\u8651\u3002\n\n\u6211\u4eec\u5c06\u7b2c\u4e00\u6b21\u8fde\u63a5\u4e24\u4e2a\u5e76\u67e5\u96c6\u7684\u8fb9\u4fdd\u7559\uff0c\u4e0d\u96be\u53d1\u73b0\u5b83\u6700\u540e\u5c31\u4f1a\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u800c\u4ece $s$ \u5230\u67d0\u4e2a $t$ \u6240\u9700\u7684\u4fee\u6b63\u503c\u5c31\u662f\u6811\u4e0a\u4ece $s$ \u5230 $t$ \u7684\u8def\u5f84\u4e2d\u7ecf\u8fc7\u7684\u6700\u5927\u8fb9\u7684\u6743\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u73b0\u5728\u7684\u76ee\u7684\u662f \u2014\u2014 \u5982\u4f55\u5feb\u901f\u5730\u6c42\u51fa\u539f\u56fe\u7684 \u201c\u6700\u5c0f\u751f\u6210\u6811\u201d\uff1b\n\n\u5982\u679c\u662f\u4f7f\u7528\u666e\u904d\u7684 $\\rm Prim$ \u6216\u8005 $\\rm Kruskal$ \u4f3c\u4e4e\u90fd\u6bd4\u8f83\u56f0\u96be\uff0c\u524d\u8005\u56e0\u4e3a\u590d\u6742\u5ea6\u4e3a $\\mathcal O((|V|+|E|)\\log |V|)$\uff0c\u800c $m$ \u8f83\u5927\uff0c\u540e\u8005\u4e5f\u662f\u56e0\u4e3a\u9700\u8981\u5bf9 $|E|={n(n-1)\\over 2}$ \u6761\u8fb9\u8fdb\u884c\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u4e5f\u4e0d\u90a3\u4e48\u597d\u770b\uff0c\u6211\u4eec\u5f97\u627e\u4e00\u79cd\u66f4\u5148\u8fdb\u7684\uff0c\u53ef\u4ee5\u5c06\u8fb9\u7684\u6570\u91cf\u964d\u4e0b\u6765\u7684\u65b9\u6cd5\u3002\n\n\u6b64\u5904\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u540d\u4e3a $\\rm Boruvka$ \u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff0c\u5b83\u7684\u590d\u6742\u5ea6\u4e3a $\\mathcal O(|E|\\log |V|)$\uff0c\u4f46\u662f\u5b83\u7684\u597d\u5904\u5728\u4e8e \u2014\u2014 \u5728\u5df2\u77e5\u4ec0\u4e48\u8fb9\u6700\u4f18\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u5c06\u6240\u6709\u7684\u8fb9\u90fd\u6c42\u51fa\u6765\u3002\u66f4\u5f3a\u5730\uff0c\u5b83\u751a\u81f3\u53ef\u4ee5\u89e3\u51b3\u4e00\u4e9b\u4e8c\u8fdb\u5236\u751f\u6210\u6811\u95ee\u9898\uff0c\u800c\u5e7f\u5927 $\\rm OIer$ \u90fd\u6df1\u611f\u5176\u4f18\u52bf\u3002\n\n![img](https://z3.ax1x.com/2021/07/19/WJjUAA.png)\n\n~~\uff08\u4e0d\u77e5\u9053\u5982\u4f55\u6253\u7801\uff0c\u5c31\u624b\u52a8\u4e0a\u4e00\u4e2a\u4e86\uff09~~\n\n\u5176\u5177\u4f53\u8fc7\u7a0b\u53ef\u4ee5\u8fd9\u6837\u63cf\u8ff0\uff1a\uff08\u4ee5\u4e0b\u5185\u5bb9\u6458\u81ea [**OI Wiki**](https://oi-wiki.org/)\uff09\n\n>\u4e3a\u4e86\u63cf\u8ff0\u8be5\u7b97\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u4e00\u4e9b\u5b9a\u4e49\uff1a\n>\n>1. \u5b9a\u4e49 $E'$ \u4e3a\u6211\u4eec\u5f53\u524d\u627e\u5230\u7684\u6700\u5c0f\u751f\u6210\u68ee\u6797\u7684\u8fb9\u3002\u5728\u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u9010\u6b65\u5411 $E'$ \u52a0\u8fb9\uff0c\u5b9a\u4e49 **\u8fde\u901a\u5757** \u8868\u793a\u4e00\u4e2a\u70b9\u96c6 $V'\\subseteq V$\uff0c\u4e14\u8fd9\u4e2a\u70b9\u96c6\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u70b9 $u,v$\uff0c \u5728 $E'$ \u4e2d\u7684\u8fb9\u6784\u6210\u7684\u5b50\u56fe\u4e0a\u662f\u8fde\u901a\u7684\uff08\u4e92\u76f8\u53ef\u8fbe\uff09\u3002\n>2. \u5b9a\u4e49\u4e00\u4e2a\u8fde\u901a\u5757\u7684 **\u6700\u5c0f\u8fb9** \u4e3a\u5b83\u8fde\u5411\u5176\u5b83\u8fde\u901a\u5757\u7684\u8fb9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u90a3\u4e00\u6761\u3002\n>\n>\u521d\u59cb\u65f6\uff0c$E'=\\emptyset$\uff0c\u6bcf\u4e2a\u70b9\u5404\u81ea\u662f\u4e00\u4e2a\u8fde\u901a\u5757\uff1a\n>\n>1. \u8ba1\u7b97\u6bcf\u4e2a\u70b9\u5206\u522b\u5c5e\u4e8e\u54ea\u4e2a\u8fde\u901a\u5757\u3002\u5c06\u6bcf\u4e2a\u8fde\u901a\u5757\u90fd\u8bbe\u4e3a\u201c\u6ca1\u6709\u6700\u5c0f\u8fb9\u201d\u3002\n>2. \u904d\u5386\u6bcf\u6761\u8fb9 $(u,v)$\uff0c\u5982\u679c $u$ \u548c $v$ \u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5c31\u7528\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u5206\u522b\u66f4\u65b0 $u$ \u548c $v$ **\u6240\u5728\u8fde\u901a\u5757**\u7684\u6700\u5c0f\u8fb9\u3002\n>3. \u5982\u679c\u6240\u6709\u8fde\u901a\u5757\u90fd\u6ca1\u6709\u6700\u5c0f\u8fb9\uff0c\u9000\u51fa\u7a0b\u5e8f\uff0c\u6b64\u65f6\u7684 $E'$ \u5c31\u662f\u539f\u56fe\u6700\u5c0f\u751f\u6210\u68ee\u6797\u7684\u8fb9\u96c6\u3002\u5426\u5219\uff0c\u5c06\u6bcf\u4e2a\u6709\u6700\u5c0f\u8fb9\u7684\u8fde\u901a\u5757\u7684\u6700\u5c0f\u8fb9\u52a0\u5165 $E'$\uff0c\u8fd4\u56de\u7b2c\u4e00\u6b65\u3002\n>\n>\u4e0b\u9762\u662f\u4f2a\u4ee3\u7801\uff1a\n>$$\n>\\begin{array}{ll} 1 & \\textbf{Input. } \\text{A graph }G\\text{ whose edges have distinct weights. } \\\\ 2 & \\textbf{Output. } \\text{The minimum spanning forest of }G . \\\\ 3 & \\textbf{Method. } \\\\ 4 & \\text{Initialize a forest }F\\text{ to be a set of one-vertex trees} \\\\ 5 & \\textbf{while } \\text{True} \\\\ 6 & \\qquad \\text{Find the components of }F\\text{ and label each vertex of }G\\text{ by its component } \\\\ 7 & \\qquad \\text{Initialize the cheapest edge for each component to \"None\"} \\\\ 8 & \\qquad \\textbf{for } \\text{each edge }(u, v)\\text{ of }G \\\\ 9 & \\qquad\\qquad \\textbf{if } u\\text{ and }v\\text{ have different component labels} \\\\ 10 & \\qquad\\qquad\\qquad \\textbf{if } (u, v)\\text{ is cheaper than the cheapest edge for the component of }u \\\\ 11 & \\qquad\\qquad\\qquad\\qquad\\text{ Set }(u, v)\\text{ as the cheapest edge for the component of }u \\\\ 12 & \\qquad\\qquad\\qquad \\textbf{if } (u, v)\\text{ is cheaper than the cheapest edge for the component of }v \\\\ 13 & \\qquad\\qquad\\qquad\\qquad\\text{ Set }(u, v)\\text{ as the cheapest edge for the component of }v \\\\ 14 & \\qquad \\textbf{if }\\text{ all components'cheapest edges are \"None\"} \\\\ 15 & \\qquad\\qquad \\textbf{return } F \\\\ 16 & \\qquad \\textbf{for }\\text{ each component whose cheapest edge is not \"None\"} \\\\ 17 & \\qquad\\qquad\\text{ Add its cheapest edge to }F \\\\ \\end{array}\n>$$\n\n\u5341\u5206\u4f69\u670d $\\text{OI Wiki}$ \u7684\u540c\u5fd7\u76f4\u63a5\u4f7f\u7528 $\\LaTeX$ \u800c\u4e0d\u7528\u4efb\u4f55\u5b8f\u5305\u4e66\u5199\u4f2a\u4ee3\u7801\uff0c\u8fd9\u8ba9\u6211\u6709\u4e86[\u5171\u4ea7\u4e3b\u4e49](https://www.cnblogs.com/Arextre/p/15005336.html)\u7684\u7a7a\u95f4\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4f2a\u4ee3\u7801\u4e2d\uff0c\u6709\u4e24\u53e5\u5224\u65ad\u662f\n$$\n\\begin{aligned}\n\\textbf{if } (u, v)\\text{ is cheaper than the cheapest edge for the component of }u \\\\\n\\textbf{if } (u, v)\\text{ is cheaper than the cheapest edge for the component of }v\n\\end{aligned}\n$$\n\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u627e\u5230\u8fd9\u6837\u7684\u8fb9\uff0c\u90a3\u662f\u6700\u597d\u4e0d\u8fc7\u3002\n\n\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $u$\uff0c\u5982\u679c\u5b83\u8fde\u63a5\u7684\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u70b9\u4e0e $a_u\\pm d$ \u5dee\u6700\u5c0f\uff0c\u90a3\u4e48\u6240\u9700\u7684\u4fee\u6b63\u503c\u4e5f\u8d8a\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 $\\tt lower\\_bound()$ \u5728\u4e00\u4e2a\u50a8\u5b58\u4e86\u5750\u6807\u7684 $\\tt set$ \u4e2d\u89e3\u51b3\u95ee\u9898\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u679a\u4e3e\u4e00\u4e2a\u70b9\u8fde\u51fa\u53bb\u7684\u6240\u6709\u8fb9\u4e86\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4ee3\u7801\u4e86\uff0c\u4ee3\u7801\u4e2d\u6709\u4e00\u4e9b\u7ec6\u8282\uff0c\u81ea\u5df1\u5eb7\u5eb7\u7f62\u3002\n\n\u8be5\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u5e94\u8be5\u662f $\\mathcal O(|V|\\log^2|V|)$ \u7684\u7f62\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528 $\\tt set$\uff0c\u5e94\u8be5\u662f\u53ef\u4ee5\u964d\u4f4e\u81f3 $\\mathcal O(|V|\\log|V|)$ \u7684\u3002\u6ce8\u610f\uff0c\u542f\u53d1\u5f0f\u5408\u5e76\u7684 $\\mathcal O(|V|\\log|V|)$ \u662f\u72ec\u7acb\u7684\uff0c\u4e0d\u548c $\\rm Boruvka$ \u7b97\u6cd5\u7684\u4e3b\u4f53\u90e8\u5206\u76f8\u4e58\u3002\u81f3\u4e8e\u4f60\u95ee\u54ea\u91cc\u7528\u5230\u4e86\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u770b\u770b\u4ee3\u7801\u7f62\u3002\n\n# \u53c2\u8003\u4ee3\u7801\n\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<set>\nusing namespace std;\n\n// #define NDEBUG\n#include<cassert>\n\nnamespace Elaina{\n    #define rep(i, l, r) for(int i=(l), i##_end_=(r); i<=i##_end_; ++i)\n    #define drep(i, l, r) for(int i=(l), i##_end_=(r); i>=i##_end_; --i)\n    #define fi first\n    #define se second\n    #define mp(a, b) make_pair(a, b)\n    #define Endl putchar('\\n')\n    #define mmset(a, b) memset(a, b, sizeof a)\n    // #define int long long\n    typedef long long ll;\n    typedef unsigned long long ull;\n    typedef pair<int, int> pii;\n    typedef pair<ll, ll> pll;\n    template<class T>inline T fab(T x){ return x<0? -x: x; }\n    template<class T>inline void getmin(T& x, const T rhs){ x=min(x, rhs); }\n    template<class T>inline void getmax(T& x, const T rhs){ x=max(x, rhs); }\n    template<class T>inline T readin(T x){\n        x=0; int f=0; char c;\n        while((c=getchar())<'0' || '9'<c) if(c=='-') f=1;\n        for(x=(c^48); '0'<=(c=getchar()) && c<='9'; x=(x<<1)+(x<<3)+(c^48));\n        return f? -x: x;\n    }\n    template<class T>inline void writc(T x, char s='\\n'){\n        static int fwri_sta[1005], fwri_ed=0;\n        if(x<0) putchar('-'), x=-x;\n        do fwri_sta[++fwri_ed]=x%10, x/=10; while(x);\n        while(putchar(fwri_sta[fwri_ed--]^48), fwri_ed);\n        putchar(s);\n    }\n}\nusing namespace Elaina;\n\nconst int maxn=2e5;\nconst int inf=0x3f3f3f3f;\n\nstruct edge{\n    int u, v, w;\n    inline bool operator <(const edge rhs) const{\n        return w<rhs.w;\n    }\n};\n\nset<int>plane;\nvector< vector<int> >compo;\nvector<int>a, fa, refl;\n\ninline int findrt(int u){\n    return fa[u]==u? u: fa[u]=findrt(fa[u]);\n}\ninline bool merge(int u, int v){\n    u=findrt(u), v=findrt(v);\n    if(u==v) return 0;\n    if(compo[u]<compo[v]) swap(u, v);\n    for(int x: compo[v]){\n        compo[u].push_back(x);\n        fa[refl[x]]=u;\n    }\n    compo[v].clear();\n    return 1;\n}\n\nint n, q, s, d;\n\ninline void input(){\n    n=readin(1), q=readin(1), s=readin(1)-1, d=readin(1);\n    fa.resize(n), a.resize(n);\n    for(int i=0; i<n; ++i){\n        fa[i]=i, a[i]=readin(1);\n        plane.insert(a[i]);\n    }\n}\n\nvector<pii>g[maxn+5]; int req[maxn+5];\ninline void add_edge(int u, int v, int w){\n    g[u].push_back({v, w}); g[v].push_back({u, w});\n}\nvoid dfs(int u, int par, int mx){\n    req[u]=mx;\n    for(pii e: g[u]) if(e.fi!=par)\n        dfs(e.fi, u, max(mx, e.se));\n}\n\nsigned main(){\n    input();\n    compo.resize(n), refl=vector<int>(a[n-1]+1);\n    for(int i=0; i<n; ++i){\n        compo[i]=vector<int>(1, a[i]);\n        refl[a[i]]=i;\n    }\n    int cnt=n;\n    while(cnt>1){\n        vector<edge>Es; edge mn;\n        for(auto cur: compo) if(!cur.empty()){\n            mn={-1, -1, inf};\n            for(int x: cur) plane.erase(x);\n            for(int x: cur){\n                for(int dir: {-d, d}){\n                    auto it=plane.lower_bound(x+dir);\n                    if(it!=plane.end()) mn=min(mn, {refl[x], refl[*it], fab(d-fab(x-(*it)))});\n                    if(it!=plane.begin()){\n                        --it;\n                        mn=min(mn, {refl[x], refl[*it], fab(d-fab(x-(*it)))});\n                    }\n                }\n            }\n            for(int x: cur) plane.insert(x);\n            Es.push_back(mn);\n        }\n        for(auto e: Es) if(merge(e.u, e.v))\n            --cnt, add_edge(e.u, e.v, e.w);\n    }\n    dfs(s, -1, -1);\n    while(q--){\n        int i=readin(1)-1, k=readin(1);\n        if(req[i]<=k) printf(\"yEs\\n\");\n        else printf(\"nO\\n\");\n    }\n    return 0;\n}\n```\n                     \n\n# \u6269\u5c55\n\n\u8fd8\u8bb0\u5f97\u4e0a\u6587\u63d0\u5230\u7684 *\u66f4\u5f3a\u5730\uff0c\u5b83\u751a\u81f3\u53ef\u4ee5\u89e3\u51b3\u4e00\u4e9b\u4e8c\u8fdb\u5236\u751f\u6210\u6811\u95ee\u9898* \u5417\uff1f\u8fd9\u91cc\u6709\u4e00\u9053\u9898\uff0c\u5c31\u662f\u8fd9\u6837\u7684\u95ee\u9898\uff08\u5f53\u7136\u88ab\u4e00\u4e9b\u59b9\u59b9\u7528\u5b50\u96c6\u5207\u6389\u4e86\uff09\u3002\n\n[\u4f20\u9001\u95e8 to *\u65b0\u5e74\u7684\u7e41\u8363*](https://www.cnblogs.com/Arextre/p/15032259.html).\n",
        "postTime": 1626700945,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "Jumping Around"
    },
    {
        "content": "#### [CF1550F](https://codeforces.ml/contest/1550/problem/F)\n\n\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9 $i$ \u7b97\u51fa\u6700\u5c0f\u7684\u6ee1\u8db3\u6761\u4ef6\u7684 $k$\uff0c\u8bb0\u4e3a $d_i$\u3002\n\n\u5bf9\u4e8e\u4e24\u4e2a\u7ed3\u70b9 $u,v$\uff0c\u5982\u679c $u$ \u53ef\u4ee5\u76f4\u63a5\u5230 $v$\uff0c\u90a3\u4e48 $k=|d-|a_u-a_v||$\u3002\u5bf9\u4e8e\u6240\u6709\u7684 $(u,v)$ \u8fde\u4e00\u6761 $|d-|a_u-a_v||$ \u7684\u8fb9\uff0c\u90a3\u4e48 $s \\to i$ \u7684\u6700\u5c0f\u6ee1\u8db3\u6761\u4ef6\u7684 $k$ \u5c31\u662f\u6700\u5c0f\u7684 $k$ \u6ee1\u8db3\u5b58\u5728 $s \\to i$ \u7684\u8def\u5f84\u4e14\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u4e0d\u5927\u4e8e $k$\u3002\n\n\u6839\u636e\u6700\u5c0f\u751f\u6210\u6811\u7684\u6027\u8d28\uff0c\u5b9e\u9645\u4e0a\u5efa\u51fa\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c$d_i$ \u5c31\u662f $s \\to i$ \u7684\u8def\u5f84\u4e2d\u6700\u5927\u7684\u6743\u503c\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u627e\u5230\u8fd9\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u8fb9\u6570\u4e3a $n^2$ \u7ea7\u522b\u7684\uff0c\u76f4\u63a5\u4f7f\u7528 kruskal \u548c prim \u663e\u7136\u4f1a\u8d85\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u53e6\u5916\u4e00\u79cd\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff1aboruvka \u3002\n\n\u8fd9\u4e2a\u4e1c\u897f\u5c31\u662f\u7ef4\u62a4\u6bcf\u4e2a\u8054\u901a\u5757\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u8fed\u4ee3\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8054\u901a\u5757\u627e\u5230\u4ed6\u8fde\u51fa\u53bb\u7684\u6700\u5c0f\u7684\u8fb9\uff0c\u7136\u540e\u5168\u90e8\u627e\u5b8c\u4e4b\u540e\u5408\u5e76\u3002\u56e0\u4e3a\u6bcf\u6b21\u8054\u901a\u5757\u7684\u6b21\u6570\u4f1a\u81f3\u5c11\u51cf\u534a\uff0c\u6240\u4ee5\u8fed\u4ee3\u7684\u6b21\u6570\u662f $\\log n$ \u7ea7\u522b\u7684\u3002\n\n\u867d\u7136\u8fb9\u6570\u4ecd\u7136\u662f $n^2$ \u7ea7\u522b\uff0c\u4f46\u662f\u5bf9\u4e8e\u8054\u901a\u5757\u7684\u6bcf\u4e00\u4e2a\u70b9 $u$\uff0c\u53ea\u8981\u5feb\u901f\u627e\u5230\u8054\u901a\u5757\u4ee5\u5916\u6700\u5c0f\u7684\u8fb9\uff0c\u5373 $|d-|a_u-a_v|||$ \u6700\u5c0f\u3002\n\n- $a_u < a_v$\uff0c\u5373 $|d+a_u-a_v|$ \u6700\u5c0f\uff0c\u5373 $a_v$ \u6700\u63a5\u8fd1\u4e8e $a_u+d$\u3002\n- $a_u \\ge a_v$\uff0c\u5373 $|d-a_u+a_v|=|a_u-d-a_v|$ \u6700\u5c0f\uff0c\u5373 $a_v$ \u6700\u63a5\u8fd1\u4e8e $a_u-d$\u3002\n\n\u90a3\u4e48\u5229\u7528\u4e00\u4e2a `set` \u7ef4\u62a4\u6240\u6709\u7684\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8054\u901a\u5757\uff0c\u5148\u5220\u53bb\u8fd9\u4e2a\u8054\u901a\u5757\u4e2d\u7684\u6240\u6709\u70b9\uff0c\u7136\u540e\u518d\u904d\u5386\u6240\u6709\u70b9\uff0c\u7528 `lower_bound` \u5feb\u901f\u627e\u5230\u6700\u63a5\u8fd1\u4e8e\u4e0a\u9762\u4e24\u4e2a\u6570\u7684\u70b9\uff0c\u7136\u540e\u5728\u904d\u5386\u5b8c\u6210\u540e\u8fde\u4e0a\u6700\u5c0f\u7684\u8fb9\u5c31\u53ef\u4ee5\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5728 $\\mathcal{O}(n \\log^2 n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u627e\u5230\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u7136\u540e\u518d\u6309\u7167\u4e0a\u9762\u6240\u8bf4\u7684\u5728\u8fd9\u4e2a\u6811\u4e0a `dfs` \u4e00\u6b21\u5373\u53ef\u3002\n\n[AC link](https://codeforces.ml/contest/1550/submission/122587603)\u3002",
        "postTime": 1626494828,
        "uid": 141179,
        "name": "pigstd",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1550F"
    }
]