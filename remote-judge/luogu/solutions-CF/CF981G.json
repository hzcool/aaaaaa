[
    {
        "content": "[$\\tt Link$](/problem/CF981G)\u3002\n\n\u8003\u8651\u4e00\u4e2a\u96c6\u5408\u7684 $\\tt size$ \u5728\u4e00\u6b21\u64cd\u4f5c\u540e\u53d1\u751f\u7684\u53d8\u5316\n\n+ \u5982\u679c\u96c6\u5408\u539f\u6765\u5c31\u6709\u8fd9\u4e2a\u6570\uff1a$\\mathtt{size}\\gets\\mathtt{size}\\times2$\u3002\n+ \u5982\u679c\u96c6\u5408\u539f\u6765\u6ca1\u6709\u8fd9\u4e2a\u6570\uff1a$\\mathtt{size}\\gets\\mathtt{size}+1$\u3002\n\n\u533a\u95f4 $+1$ \u533a\u95f4 $\\times2$\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u73b0\u5728\u95ee\u9898\u5c31\u662f\u5728 $[L,R]$ \u4e2d\u6309\u7167\u539f\u6765\u662f\u5426\u6709 $x$ \u5206\u6210\u4e00\u4e9b\u5b50\u533a\u95f4\uff0c\u7136\u540e\u5206\u522b\u5904\u7406\u3002\n\n\u8003\u8651\u5bf9\u6bcf\u4e2a\u989c\u8272\u7ef4\u62a4\u4e00\u68f5 $\\tt ODT$ \u5176\u503c\u57df\u4e3a $v\\in\\{0,1\\}$\uff08\u7528\u8fd9\u4e2a\u6765\u627e\u5230\u6bcf\u4e2a\u533a\u95f4\u662f\u9700\u8981 $+1$ \u8fd8\u662f $\\times2$\uff09\u3002\n\n+ \u7b2c $x$ \u68f5 $\\tt ODT$ \u7684\u8282\u70b9 $\\{l,r,0\\}$ \u4ee3\u8868 $[l,r]$ \u7684\u96c6\u5408\u90fd\u4e0d\u5305\u542b $x$\u3002\n+ \u7b2c $x$ \u68f5 $\\tt ODT$ \u7684\u8282\u70b9 $\\{l,r,1\\}$ \u4ee3\u8868 $[l,r]$ \u7684\u96c6\u5408\u90fd\u5305\u542b $x$ \u3002\n\n\u521d\u59cb\u5316\u6bcf\u68f5 $\\tt ODT$ \u90fd\u662f $\\{1,n,0\\}$\u3002\n\n\u4fee\u6539\uff1a\u5148\u5b8c\u6210 $\\tt split$\uff0c\u7136\u540e\u5bf9\u4e8e $v=0$ \u5728\u7ebf\u6bb5\u6811\u4e0a $+1$\uff0c$v=1$ \u5c31\u5728\u7ebf\u6bb5\u6811\u4e0a $\\times2$\u3002\n\n\u5176\u5b9e\u633a\u597d\u5199\u7684\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nusing ll = long long;\n\nconst int N = 2e5 + 5;\nconst int S = N << 2;\nconst int mod = 998244353;\n\nint n,q;\n\nnamespace sgt{\n\tint T[S];\n\tint tag0[S],tag1[S];\n\t\n\t#define lc (i << 1)\n\t#define rc (i << 1 | 1)\n\t#define mid (L + R >> 1)\n\t#define ls lc,L,mid\n\t#define rs rc,mid + 1,R\n\t#define cur i,L,R\n\t#define id int i = 1,int L = 1,int R = n\n\t\n\t#define psu T[i] = (T[lc] + T[rc]) % mod\n\t\n\tvoid chg0(int i,int x){\n\t\tT[i] = 1LL * T[i] * x % mod;\n\t\ttag0[i] = 1LL * tag0[i] * x % mod;\n\t\ttag1[i] = 1LL * tag1[i] * x % mod;\n\t}\n\t\n\tvoid chg1(int i,int L,int R,int x){\n\t\tT[i] = (0LL + T[i] + 1LL * x * (R - L + 1) % mod) % mod;\n\t\ttag1[i] = (tag1[i] + x) % mod;\n\t}\n\t\n\tvoid psd(id){\n\t\tif(tag0[i] != 1){\n\t\t\tchg0(lc,tag0[i]);\n\t\t\tchg0(rc,tag0[i]);\n\t\t\ttag0[i] = 1;\n\t\t}\n\t\tif(tag1[i] != 0){\n\t\t\tchg1(ls,tag1[i]);\n\t\t\tchg1(rs,tag1[i]);\n\t\t\ttag1[i] = 0;\n\t\t}\n\t}\n\t\n\tvoid build(id){\n\t\ttag0[i] = 1,tag1[i] = 0;\n\t\tif(L == R) return;\n\t\tbuild(ls); build(rs);\n\t}\n\t\n\tvoid upd0(int l,int r,id){\n\t\tif(l <= L && R <= r) return chg0(i,2),void();\n\t\tpsd(cur); if(l <= mid) upd0(l,r,ls);\n\t\tif(r > mid) upd0(l,r,rs); psu;\n\t}\n\t\n\tvoid upd1(int l,int r,id){\n\t\tif(l <= L && R <= r) return chg1(cur,1),void();\n\t\tpsd(cur); if(l <= mid) upd1(l,r,ls);\n\t\tif(r > mid) upd1(l,r,rs); psu;\n\t}\n\t\n\tll qry(int l,int r,id){\n\t\tif(l <= L && R <= r) return T[i]; psd(cur);\n\t\tll res = 0;\n\t\tif(l <= mid) res = qry(l,r,ls);\n\t\tif(r > mid) (res += qry(l,r,rs)) %= mod;\n\t\treturn res;\n\t}\n}\n\nnamespace odt{\n\tstruct node{\n\t\tint l,r;\n\t\tmutable bool v;\n\t\tnode(int l,int r = 0,int v = 0) : l(l),r(r),v(v){}\n\t\tbool operator<(const node& p) const { return l < p.l; }\n\t};\n\t\n\tset<node> s[N];\n\t\n\tvoid build(){\n\t\tfor(int i = 1;i <= n;++i)\n\t\t\ts[i].insert(node(1,n,0));\n\t}\n\t\n\tset<node>::iterator split(int p,int i){\n\t\tauto it = s[i].upper_bound(node(p));\n\t\t--it;\n\t\tif(it->l > p || it->r < p) return s[i].end();\n\t\tif(it->l == p) return it;\n\t\tint l = it->l,r = it->r; bool v = it->v;\n\t\ts[i].erase(it);\n\t\ts[i].insert(node(l,p - 1,v));\n\t\treturn s[i].insert(node(p,r,v)).first;\n\t}\n\t\n\tvoid upd(int l,int r,int x){\n\t\tauto ir = split(r + 1,x),il = split(l,x);\n\t\tfor(auto it = il;it != ir;++it)\n\t\t\tit->v ? sgt::upd0(it->l,it->r) : sgt::upd1(it->l,it->r);\n\t\ts[x].erase(il,ir); s[x].insert(node(l,r,1));\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&q);\n\tsgt::build();\n\todt::build();\n\tint t = 0;\n\twhile(q--){\n\t\tint op,l,r,x;\n\t\tscanf(\"%d%d%d\",&op,&l,&r);\n\t\tif(op == 1){\n\t\t\tscanf(\"%d\",&x);\n\t\t\todt::upd(l,r,x);\n\t\t} else printf(\"%lld\\n\",sgt::qry(l,r));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1658814399,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "CF981G Magic multisets"
    },
    {
        "content": "## \u9898\u610f\n\n\u6709 $n$ \u4e2a\u53ef\u91cd\u96c6\uff0c\u4fee\u6539\u548c\u8be2\u95ee\u64cd\u4f5c\u4e3a\uff1a\n\n1. \u64cd\u4f5c\u8868\u793a\u4e3a $1\\ l\\ r\\ x$\uff0c\u5bf9\u4e8e\u5728 $l$ \u5230 $r$ \u7684\u6bcf\u4e00\u4e2a\u53ef\u91cd\u96c6\uff0c\u5982\u679c\u5b58\u5728 $x$\uff0c\u5219\u6240\u6709\u5143\u7d20\u7684\u6570\u91cf\u7ffb\u500d\uff0c\u5426\u5219\u52a0\u5165 $x$\n\n2. \u8be2\u95ee\u8868\u73b0\u4e3a $2\\ l\\ r$\uff0c\u67e5\u8be2 $l$ \u5230 $r$ \u7684\u53ef\u91cd\u96c6\u5927\u5c0f\u4e4b\u548c\u3002\n\n$n \\le 2 \\times 10^5,\\ q\\le 2 \\times 10^5$\n\n## \u5206\u6790\n\n\u4e4d\u770b\u4e0a\u53bb\uff0c\u8fd9\u9053\u9898\u7684\u7a7a\u95f4\u4f3c\u4e4e\u8981 $O(n^2)$ \u624d\u80fd\u5b58\u7684\u4e0b\u6574\u6574 $n$ \u4e2a\u53ef\u91cd\u96c6\u7684\u7a7a\u95f4\u3002\u90a3\u4e48\uff0c\u6709\u4ec0\u4e48\u4e0d\u9700\u8981 $O(n^2)$ \u7a7a\u95f4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u80fd\u591f\u5b58\u4e0b\u8fd9\u4e9b\u4fe1\u606f\u5462\uff1f\u663e\u7136\u6709\u73c2\u6735\u8389\u6811\u548c\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002\u5728\u8fd9\u9053\u9898\u4e2d\uff0c\u6211\u7528\u7684\u662f\u73c2\u6735\u8389\u6811\uff08\u52a8\u6001\u5f00\u70b9\u4f3c\u4e4e\u4e5f\u80fd\u505a\uff0c\u4f46\u7ec6\u8282\u66f4\u591a\uff0c\u597d\u50cf\u6ca1\u4eba\u5199\uff09\u3002\n\n\u5f00 $n$ \u68f5\u73c2\u6735\u8389\u6811\uff0c\u6bcf\u68f5\u73c2\u6735\u8389\u6811\u7ef4\u62a4\u4e00\u4e2a\u503c\u5728\u4e00\u6bb5\u533a\u95f4\u7684\u53ef\u91cd\u96c6\u5185\u7684\u51fa\u73b0\u60c5\u51b5\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u63d2\u5165\u64cd\u4f5c\u5c31\u4f1a\u53d8\u6210\u533a\u95f4\u628a\u4e00\u4e2a\u503c\u8d4b\u4e3a $1$\u3002\u4e8e\u662f\uff0c\u5982\u4f55\u7ef4\u62a4\u4fee\u6539\u5c31\u5f88\u660e\u663e\u4e86\uff1a\u5728\u7b2c $x$ \u73c2\u6735\u8389\u6811\u4e0a\u904d\u5386\u4e00\u6bb5\u533a\u95f4\uff0c\u5982\u679c\u5f53\u524d\u7684\u8fde\u7eed\u533a\u95f4\u503c\u4e3a $1$\uff0c\u90a3\u4e48\u8fd9\u6bb5\u533a\u95f4\u5728\u6240\u6709\u73c2\u6735\u8389\u6811\u4e0a\u7684\u5927\u5c0f\u5c31\u90fd\u4e58\u4e0a $2$\uff0c\u5426\u5219\u8fd9\u6bb5\u533a\u95f4\u5728\u6240\u6709\u73c2\u6735\u8389\u6811\u4e0a\u7684\u5927\u5c0f\u90fd\u52a0\u4e0a $1$\u3002\u81f3\u4e8e\u8fd9\u4e2a\u4e58 $2$ \u548c\u52a0 $1$ \u7684\u64cd\u4f5c\u561b\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5c31\u53ef\u4ee5\u4e86\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <math.h>\n#include <set>\nusing std::set;\n#define lld long long\ntemplate<typename Tp>\ninline const Tp &min(register const Tp &x, register const Tp &y) { return x < y ? x : y; }\ntemplate<typename Tp>\ninline const Tp &max(register const Tp &x, register const Tp &y) { return x < y ? y : x; }\ntemplate<typename Tp>\ninline void swap(register Tp &x, register Tp &y) { static Tp t; t = x, x = y, y = t; }\nint n, q;\nstruct node { int l, r, v; };\ninline bool operator < (const node &x, const node &y) { return x.l < y.l; }\n#define iter set<node>::iterator\nconst lld mod = 998244353;\nset<node> s[200010];\niter split(int id, int x) {\n\titer it = s[id].lower_bound((node){x, 0, 0});\n\tif (it != s[id].end() && it -> l == x) return it;\n\t-- it;\n\tint l = it -> l, r = it -> r, v = it -> v;\n\ts[id].erase(it);\n\ts[id].insert((node){l, x - 1, v});\n\tit = s[id].insert((node){x, r, v}).first;\n\treturn it;\n}\nstruct segment {\n\tint l, r;\n\tlld s, add, mul;\n} tr[800010];\nvoid pushup(int k) {\n\ttr[k].s = (tr[k << 1].s + tr[k << 1 | 1].s) % mod;\n}\nvoid update1(int k, lld add) {\n\ttr[k].s = (tr[k].s + add * (tr[k].r - tr[k].l + 1)) % mod;\n\ttr[k].add = (tr[k].add + add) % mod;\n}\nvoid update2(int k, lld mul) {\n\ttr[k].s = (tr[k].s * mul) % mod;\n\ttr[k].add = (tr[k].add * mul) % mod;\n\ttr[k].mul = (tr[k].mul * mul) % mod;\n}\nvoid update(int k, lld add, lld mul) {\n\tupdate2(k, mul);\n\tupdate1(k, add);\n}\nvoid pushdown(int k) {\n\tif (tr[k].l != tr[k].r) {\n\t\tupdate(k << 1, tr[k].add, tr[k].mul);\n\t\tupdate(k << 1 | 1, tr[k].add, tr[k].mul);\n\t\ttr[k].add = 0, tr[k].mul = 1;\n\t}\n}\nvoid build(int k, int l, int r) {\n\ttr[k].l = l, tr[k].r = r, tr[k].add = 0, tr[k].mul = 1;\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tbuild(k << 1, l, mid);\n\tbuild(k << 1 | 1, mid + 1, r);\n}\nvoid modify1(int k, int l, int r, lld s) {\n\tif (l <= tr[k].l && tr[k].r <= r) {\n\t\ttr[k].add = (tr[k].add + s) % mod;\n\t\ttr[k].s = (tr[k].s + s * (tr[k].r - tr[k].l + 1) % mod) % mod;\n\t\treturn;\n\t}\n\tpushdown(k);\n\tint mid = (tr[k].l + tr[k].r) >> 1;\n\tif (l <= mid) modify1(k << 1, l, r, s);\n\tif (mid < r) modify1(k << 1 | 1, l, r, s);\n\tpushup(k);\n}\nvoid modify2(int k, int l, int r, lld s) {\n\tif (l <= tr[k].l && tr[k].r <= r) {\n\t\ttr[k].add = (tr[k].add * s) % mod;\n\t\ttr[k].mul = (tr[k].mul * s) % mod;\n\t\ttr[k].s = (tr[k].s * s) % mod;\n\t\treturn;\n\t}\n\tpushdown(k);\n\tint mid = (tr[k].l + tr[k].r) >> 1;\n\tif (l <= mid) modify2(k << 1, l, r, s);\n\tif (mid < r) modify2(k << 1 | 1, l, r, s);\n\tpushup(k);\n}\nvoid assign(int l, int r, int id) {\n\titer itr = split(id, r + 1), itl = split(id, l), tl = itl;\n\tfor (; itl != itr; ++ itl) {\n\t\tif (itl -> v) modify2(1, itl -> l, itl -> r, 2);\n\t\telse modify1(1, itl -> l, itl -> r, 1);\n\t}\n\ts[id].erase(tl, itr);\n\ts[id].insert((node){l, r, 1});\n}\nlld query(int k, int l, int r) {\n\tif (l <= tr[k].l && tr[k].r <= r) return tr[k].s;\n\tint mid = (tr[k].l + tr[k].r) >> 1;\n\tlld res = 0;\n\tpushdown(k);\n\tif (l <= mid) res = query(k << 1, l, r);\n\tif (mid < r) res = (res + query(k << 1 | 1, l, r)) % mod;\n\treturn res;\n}\nint main() {\n\tscanf(\"%d%d\", &n, &q);\n\tbuild(1, 1, n);\n\tfor (int i = 1; i <= n; ++ i) s[i].insert((node){1, n, 0});\n\tfor (int op, l, r, k; q --; ) {\n\t\tscanf(\"%d%d%d\", &op, &l, &r);\n\t\tif (r < l) swap(l, r);\n\t\tif (op == 1) {\n\t\t\tscanf(\"%d\", &k);\n\t\t\tassign(l, r, k);\n\t\t} else printf(\"%d\\n\", query(1, l, r));\n\t}\n}\n```",
        "postTime": 1658881978,
        "uid": 228486,
        "name": "SunsetSamsara",
        "ccfLevel": 7,
        "title": "CF981G Magic multisets \u9898\u89e3"
    },
    {
        "content": "$\\texttt{update 2022.10.25}$\n\u4fee\u6539\u4e86\u4e0b\u683c\u5f0f\u3002\n\n[$\\texttt{link}$](https://www.luogu.com.cn/problem/CF981G)\n\n## \u9898\u610f\n\n\u7ed9\u5b9a $n$ \u4e2a\u53ef\u91cd\u96c6\uff0c\u521d\u59cb\u4e3a\u7a7a\u3002\u5411\u53ef\u91cd\u96c6\u4e2d\u52a0\u5165\u4e00\u4e2a\u6b63\u6574\u6570 $x$\uff0c\u5982\u679c  $x$ \u5df2\u7ecf\u5728\u8be5\u53ef\u91cd\u96c6\u51fa\u73b0\uff0c\u5219\u53ef\u91cd\u96c6\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u51fa\u73b0\u6b21\u6570\u7ffb\u500d\uff0c\u5426\u5219\u76f4\u63a5\u52a0\u5165\u3002\n\n$q$ \u6b21\u64cd\u4f5c\uff1a\n- \u4e0b\u6807\u5728 $\\left[l,r\\right]$ \u7684\u53ef\u91cd\u96c6\u52a0\u5165\u6570 $x$\n\n- \u67e5\u8be2\u4e0b\u6807\u5728 $\\left[l,r\\right]$ \u7684\u53ef\u91cd\u96c6\u5927\u5c0f\u7684\u548c\uff0c\u5bf9 $998244353$ \u53d6\u6a21\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\le n,q\\le2\\times 10^5,1\\le x\\le n$\n\n## \u9898\u89e3\n\n\u8fd9\u4e2a\u9898\u8ddf [P8416](https://www.luogu.com.cn/problem/P8146) \u5904\u7406\u65b9\u6cd5\u6709\u70b9\u50cf\u3002\n\n\u6709 $1\\le x\\le n$\uff0c\u8003\u8651\u6bcf\u4e2a $x$ \u5206\u5f00\u5904\u7406\uff0c\u7528 $0$ \u548c $1$ \u8868\u793a\u53ef\u91cd\u96c6\u4e2d\u6709\u6ca1\u6709 $x$\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u52a0\u5165\u6570 $x$ \u76f8\u5f53\u4e8e\u628a\u5e8f\u5217\u533a\u95f4\u63a8\u5e73\u6210 $1$\u3002\n\n\u8fd9\u79cd\u533a\u95f4\u63a8\u5e73\u95ee\u9898\u5f88\u81ea\u7136\u5730\u60f3\u5230\u989c\u8272\u6bb5\u5747\u644a\uff0c\u5373 ODT\u3002\n\n\u6709\u4e2a\u5f88\u7ecf\u5178\u7684 trick \u5c31\u662f\u7528 ODT \u628a\u533a\u95f4\u63a8\u5e73\u8f6c\u6210\u533a\u95f4\u52a0\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f00 $n$ \u68f5\u73c2\u6735\u8389\u6811\u7ef4\u62a4\u96c6\u5408\u662f\u5426\u6709 $x$\uff0c\u518d\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u96c6\u5408\u5927\u5c0f\u7684\u548c\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u9898\u53ef\u4ee5\u5148\u628a\u533a\u95f4\u7684\u96c6\u5408\u5927\u5c0f\u4e58 $2$\uff0c\u518d\u628a\u5e8f\u5217\u4e0a\u4e3a $0$ \u7684\u6570\u9664\u4ee5 $2$ \u518d\u52a0 $1$\uff0c\u6240\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4e58\u533a\u95f4\u52a0\u5373\u53ef\u3002\n\n\u7136\u540e\u8fd9\u4e2a\u590d\u6742\u5ea6\u7684\u6b63\u786e\u6027\uff0c\u56e0\u4e3a\u989c\u8272\u6bb5\u5747\u644a\u6bcf\u6b21 `split` \u6700\u591a\u589e\u52a0 $O(1)$ \u4e2a\u533a\u95f4\uff0c\u6bcf\u4e2a\u533a\u95f4\u5220\u9664 $O(1)$ \u6b21\uff0c\u56e0\u4e3a\u6700\u591a $q$ \u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u533a\u95f4\u603b\u6570\u662f $O(q)$ \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n+q\\log n)$\u3002\n\n\u6ce8\u610f `split` \u8981\u5148\u5206\u88c2 $r+1$\uff0c\u4e0d\u7136\u53ef\u80fd\u4f1a\u8d8a\u754c\uff0c\u7ecf\u5178\u9519\u8bef\u4e86\u5c5e\u4e8e\u662f\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 10, mod = 998244353, inv2 = mod + 1 >> 1;\nint n, q;\nnamespace segment_tree {\n\t#define ls x << 1\n\t#define rs x << 1 | 1\n\tint tagm[N << 2], taga[N << 2], sum[N << 2];\n\tvoid build(int x, int l, int r) {\n\t\tif(l == r) return;\n\t\tint mid = l + r >> 1;\n\t\ttaga[x] = 0, tagm[x] = 1;\n\t\tbuild(ls, l, mid), build(rs, mid + 1, r);\n\t}\n\tvoid pushup(int x) { sum[x] = (sum[ls] + sum[rs]) % mod; }\n\tvoid pusha(int x, int l, int r, int v) {\n\t\tif(!v) return;\n\t\ttaga[x] = (taga[x] + v) % mod;\n\t\tsum[x] = (sum[x] + 1ll * (r - l + 1) * v) % mod;\n\t}\n\tvoid pushm(int x, int v) {\n\t\tif(v == 1) return;\n\t\ttagm[x] = 1ll * tagm[x] * v % mod;\n\t\ttaga[x] = 1ll * taga[x] * v % mod;\n\t\tsum[x] = 1ll * sum[x] * v % mod;\n\t}\n\tvoid pushdown(int x, int l, int r) {\n\t\tint mid = l + r >> 1;\n\t\tpushm(ls, tagm[x]), pushm(rs, tagm[x]);\n\t\ttagm[x] = 1;\n\t\tpusha(ls, l, mid, taga[x]), pusha(rs, mid + 1, r, taga[x]);\n\t\ttaga[x] = 0;\n\t}\n\tvoid updatea(int x, int l, int r, int L, int R, int v) {\n\t\tif(L <= l && r <= R) { pusha(x, l, r, v); return; }\n\t\tpushdown(x, l, r);\n\t\tint mid = l + r >> 1;\n\t\tif(mid >= L) updatea(ls, l, mid, L, R, v);\n\t\tif(mid < R) updatea(rs, mid + 1, r, L, R, v);\n\t\tpushup(x);\n\t}\n\tvoid updatem(int x, int l, int r, int L, int R, int v) {\n\t\tif(L <= l && r <= R) { pushm(x, v); return; }\n\t\tpushdown(x, l, r);\n\t\tint mid = l + r >> 1;\n\t\tif(mid >= L) updatem(ls, l, mid, L, R, v);\n\t\tif(mid < R) updatem(rs, mid + 1, r, L, R, v);\n\t\tpushup(x);\n\t}\n\tint query(int x, int l, int r, int L, int R) {\n\t\tif(L <= l && r <= R) return sum[x];\n\t\tpushdown(x, l, r);\n\t\tint mid = l + r >> 1, res = 0;\n\t\tif(mid >= L) res = (res + query(ls, l, mid, L, R)) % mod;\n\t\tif(mid < R) res = (res + query(rs, mid + 1, r, L, R)) % mod;\n\t\treturn res;\n\t}\n} using namespace segment_tree;\nstruct old_driver_tree {\n\tstruct odt {\n\t\tint l, r;\n\t\tmutable int v;\n\t\todt(int L = 0, int R = 0, int V = 0) { l = L, r = R, v = V; }\n\t\tfriend bool operator < (const odt &qwq, const odt &awa) {\n\t\t\treturn qwq.l < awa.l;\n\t\t}\n\t};\n\tset<odt> s;\n\tvoid init() { s.insert(odt(1, n)); }\n\t#define IT set<odt>::iterator\n\t#define pii pair<int, int>\n\tIT split(int x) {\n\t\tIT it = s.lower_bound(odt(x, 0, 0));\n\t\tif(it != s.end() && it -> l == x) return it;\n\t\t--it;\n\t\tint L = it -> l, R = it -> r, V = it -> v;\n\t\ts.erase(it);\n\t\ts.insert(odt(L, x - 1, V));\n\t\treturn s.insert(odt(x, R, V)).first;\n\t}\n\tvoid assign(int l, int r) {\n\t\tupdatem(1, 1, n, l, r, 2);\n\t\tIT itr = split(r + 1), itl = split(l);\n\t\tfor(IT it = itl; it != itr; ++it)\n\t\t\tif(!(it -> v))\n           updatem(1, 1, n, it -> l, it -> r, inv2),\n\t\t\t\tupdatea(1, 1, n, it -> l, it -> r, 1);\n\t\ts.erase(itl, itr);\n\t\ts.insert(odt(l, r, 1));\n\t}\n} t[N];\nint main() {\n\tscanf(\"%d%d\", &n, &q);\n\tbuild(1, 1, n);\n\tfor(int i = 1; i <= n; i++)\n\t\tt[i].init();\n\twhile(q--) {\n\t\tint opt, l, r, x;\n\t\tscanf(\"%d%d%d\", &opt, &l, &r);\n\t\tif(opt == 1) {\n\t\t\tscanf(\"%d\", &x);\n\t\t\tt[x].assign(l, r); \n\t\t}\n\t\t\n\t\telse printf(\"%d\\n\", query(1, 1, n, l, r));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1654673087,
        "uid": 365107,
        "name": "Terac",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF981G Magic multisets"
    },
    {
        "content": "\u533a\u95f4\u4fee\u6539+\u533a\u95f4\u67e5\u8be2\u2014\u2014\u7ebf\u6bb5\u6811\u6ca1\u5f97\u8dd1\u4e86\u3002\n\n\u9996\u5148\u5148\u641e\u4e00\u4e2a\u6700\u66b4\u529b\u7684\u505a\u6cd5\uff1a\u5f00\u4e00\u4e2a $n^2$ \u7684\u5927 bool \u6570\u7ec4\uff0c\u6216\u8005 $n$ \u4e2a\u957f\u5ea6\u4e3a $n$ \u7684 bitset\uff0c\u4e00\u884c\u8868\u793a\u4e00\u4e2a\u6570\u5728\u54ea\u4e9b\u533a\u95f4\u6709\u54ea\u4e9b\u533a\u95f4\u6ca1\u6709\u3002\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\u4f9d\u6b21\u53bb\u67e5\u8fd9\u4e2a\u533a\u95f4\u6709\u6ca1\u6709\u8fd9\u4e2a\u6570\uff0c\u6765\u51b3\u5b9a\u5230\u5e95\u662f $\\times 2$ \u8fd8\u662f $+1$\u3002\uff08\u90a3\u4f60\u8fd9\u8fd8\u4e0d\u5982\u4e0d\u7528\u7ebf\u6bb5\u6811\u76f4\u63a5\u66b4\u529b\u4fee\u6539\u5f97\u4e86\uff0c\u53cd\u6b63\u90fd\u8981\u843d\u5b9e\u5230\u53f6\u8282\u70b9\u7684\uff0c\u590d\u6742\u5ea6\u8fd8\u5c11\u4e00\u4e2a $\\log n$\uff09\u3002\n\n\u66b4\u529b\u80af\u5b9a\u662f\u4e0d\u7528\u7ee7\u7eed\u5f80\u4e0b\u60f3\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u66f4\u4f18\u5316\u7684\u65b9\u6cd5\u3002\u6ce8\u610f\u5230\u6211\u4eec\u90fd\u662f\u533a\u95f4\u64cd\u4f5c\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u53ea\u7528**\u533a\u95f4\u7aef\u70b9**\u8868\u793a\u4e00\u4e2a\u6570\u7684\u6709\u65e0\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5bf9\u4e8e\u6570\u5b57$5$\uff0c\u5982\u679c\u6211\u4eec\u6709\u533a\u95f4 $[1,3],[5,7],[9,9]$\uff0c\u8fd9\u8868\u793a\u6211\u4eec\u5728\u533a\u95f4 $[1,3],[5,7],[9,9]$ \u4e0a\u90fd\u6709\u6570\u5b57 $5$\uff0c\u800c\u7b2c $4,8$ \u4e2a\u96c6\u5408\u6ca1\u6709\u6570\u5b57 $5$\u3002\u90a3\u4e48\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a pair \u6765\u8bb0\u5f55\u4e00\u4e2a\u533a\u95f4\u800c\u975e\u5f88\u591a\u4e2a 01 \u4f4d\uff0c\u540c\u65f6\u7528\u4e00\u4e2a set \u53bb\u5b58\u50a8\u3001\u7ef4\u62a4\u8fd9\u4e9b\u533a\u95f4\u3002\u6240\u4ee5\u6211\u4eec\u4e00\u5171\u9700\u8981\u7ef4\u62a4 $n$ \u4e2a set \u91cc\u9762\u7684\u82e5\u5e72\u7684\u533a\u95f4\u3002\n\n\n\n\u533a\u95f4\u67e5\u8be2\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u7ebf\u6bb5\u6811\u4e00\u62c9\u5c31\u597d\u4e86\u3002\u4e3b\u8981\u662f\u4fee\u6539\u600e\u4e48\u529e\u3002\n\n\u663e\u7136\u6211\u4eec\u4e0b\u6765\u7684\u4e5f\u662f\u4e2a\u533a\u95f4\uff0c\u90a3\u4e48\u5c31\u4f1a\u548c\u6211\u4eec\u5bf9\u5e94\u7684 set \u91cc\u5df2\u7ecf\u6709\u7684\u533a\u95f4\u4ea7\u751f\u4ea4\u96c6\u5173\u7cfb\u3002\u4e4b\u540e\u6211\u4eec\u5f97\u8ba9\u8fd9\u6b21\u4fee\u6539\u7684\u533a\u95f4\u53bb\u548c\u5df2\u7ecf\u6709\u7684\u533a\u95f4\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\u3002\u8fd9\u662f\u5b98\u65b9\u9898\u89e3\u7684\u601d\u8def\uff0c\u7528\u7684\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\u4e2a\u4eba\u89c9\u5f97\u8fd9\u4e2a\u65b9\u6cd5\u8fc7\u4e8e\u7e41\u7410\uff0c\u56e0\u800c\u8bb2\u53e6\u5916\u4e00\u4e2a\u65b9\u6cd5\u3002\n\n\u8fd9\u6b21\u6211\u4eec\u53cd\u9009\u2014\u2014\u6211\u4eec\u8bb0\u5f55\u5c1a\u672a\u6709\u8fd9\u4e2a\u6570\u7684\u533a\u95f4\u3002\u521d\u59cb\u7684\u65f6\u5019\u6240\u6709\u7684\u90fd\u662f$[1,n]$\u8868\u793a\u5168\u90e8\u90fd\u662f\u7a7a\u96c6\u3002\u6765\u4e86\u4e00\u4e2a\u533a\u95f4\uff0c\u76f8\u5f53\u4e8e\u6267\u884c\u7684\u662f\u533a\u95f4\u62c6\u5206\u64cd\u4f5c\u2014\u2014\u5c06\u5df2\u7ecf\u6709\u7684\u533a\u95f4\u65ad\u5f00\u3002\u867d\u7136\u4e00\u822c\u610f\u4e49\u4e0a\u62c6\u5206\u6bd4\u5408\u5e76\u8981\u9ebb\u70e6\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u60c5\u51b5\u521a\u597d\u662f\u53cd\u8fc7\u6765\u3002\n\n\u8003\u8651\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff08\u4e0b\u6587\u7528\u6570\u5b57\u6765\u4ee3\u8868\u5bf9\u5e94\u4f4d\u7f6e\uff09\uff1a\n\n1\u3001\u533a\u95f4\u4e0d\u5b8c\u5168\u5305\u542b\uff1a\n\n$$\\cdots a_4\\overbrace{a_5a_6a_7a_8}^\\text{ \u539f\u59cb\u533a\u95f4}a_9 a_{10} \\cdots$$\n\n\u6b64\u65f6\u9700\u8981\u6dfb\u52a0 $[7,10]$\u3002\u8003\u8651\u5c06\u539f\u59cb\u533a\u95f4\u62c6\u5206\u6210 $[5,6]$ \u4e0e $[7,8]$\u3002\u7136\u540e\u73b0\u5728\u6240\u6709\u6709\u7684\u533a\u95f4\u8981\u4e48\u6ca1\u6709\u4ea4\u96c6\u8981\u4e48\u5b8c\u6574\u8986\u76d6\uff0c\u8f6c\u8fdb\u4e0b\u4e00\u79cd\u60c5\u51b5\uff1a\n\n2\u3001\u533a\u95f4\u5b8c\u5168\u5305\u542b\uff1a\u76f4\u63a5\u4ece set \u91cc\u79fb\u8d70\u8fd9\u4e2a\u533a\u95f4\u5373\u53ef\u3002\n\n\u5728\u5177\u4f53\u5b9e\u73b0\u4e0a\uff0c\u6211\u4eec\u5148\u5bf9\u533a\u95f4\u6574\u4f53 $\\times 2$\uff0c\u7136\u540e\u5bf9\u4e8e\u5b58\u5728\u7684\u533a\u95f4\uff0c\u8be5\u6bb5 $/2 +1$ \uff0c\u7136\u540e\u5c06\u533a\u95f4\u5220\u9664\u3002\u8fd9\u6837\u4ee3\u7801\u5b9e\u73b0\u4f1a\u7b80\u5355\u5f88\u591a\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <set>\n#include <utility>\nusing namespace std;\nconst long long mod = 998244353LL, inv = 499122177LL;\nstruct node\n{\n    long long sum;\n    long long addtag;\n    long long multag;\n};\nstruct node t[800005];\nset<pair<int, int>> noexist[200005];//set\u7ef4\u62a4\u7684\u533a\u95f4\n\n//\u7ebf\u6bb5\u6811\uff0c\u6ca1\u5565\u597d\u8bf4\u7684\nvoid build(int place,int left,int right)\n{\n    t[place].multag = 1;\n    if(left==right)\n        return;\n    int mid = (left + right) >> 1;\n    build(place << 1, left, mid);\n    build(place << 1 | 1, mid + 1, right);\n    t[place].sum = (t[place << 1].sum + t[place << 1 | 1].sum) % mod;\n}\nvoid pushdown(int place,int left,int right)\n{\n    if(t[place].multag!=1)\n    {\n        t[place << 1].multag = (t[place << 1].multag * t[place].multag) % mod;\n        t[place << 1 | 1].multag = (t[place << 1 | 1].multag * t[place].multag) % mod;\n        t[place << 1].addtag = (t[place << 1].addtag * t[place].multag) % mod;\n        t[place << 1 | 1].addtag = (t[place << 1 | 1].addtag * t[place].multag) % mod;\n        t[place << 1].sum = (t[place << 1].sum * t[place].multag) % mod;\n        t[place << 1 | 1].sum = (t[place << 1 | 1].sum * t[place].multag) % mod;\n        t[place].multag = 1;\n    }\n    if(t[place].addtag)\n    {\n        t[place << 1].addtag = (t[place << 1].addtag + t[place].addtag) % mod;\n        t[place << 1 | 1].addtag = (t[place << 1 | 1].addtag + t[place].addtag) % mod;\n        int mid = (left + right) >> 1;\n        t[place << 1].sum = (t[place << 1].sum + (mid - left + 1) * t[place].addtag) % mod;\n        t[place << 1 | 1].sum = (t[place << 1 | 1].sum + (right - mid) * t[place].addtag) % mod;\n        t[place].addtag = 0;\n    }\n    return;\n}\nvoid change(int place,int left,int right,int start,int end,long long mulx,long long addx)//\u4e58+\u52a0\u4e00\u4f53\u7684\u4fee\u6539\u64cd\u4f5c\uff0c\u5148\u4e58\u540e\u52a0\u3002\u5982\u679c\u53ea\u4e582\u5c31*2+0\uff0c\u5982\u679c\u53ea\u52a01\u4e0d\u4e58\u5c31*1+1\n{\n    if(start<=left && right<=end)\n    {\n        t[place].multag = (t[place].multag * mulx) % mod;\n        t[place].sum = (t[place].sum * mulx) % mod;\n        t[place].addtag = (t[place].addtag * mulx) % mod;\n        t[place].sum = (t[place].sum + (long long)(right - left + 1) * addx % mod) % mod;\n        t[place].addtag = (t[place].addtag + addx) % mod;\n        return;\n    }\n    pushdown(place, left, right);\n    int mid = (left + right) >> 1;\n    if(start<=mid)\n        change(place << 1, left, mid, start, end, mulx, addx);\n    if(end>mid)\n        change(place << 1 | 1, mid + 1, right, start, end, mulx, addx);\n    t[place].sum = (t[place << 1].sum + t[place << 1 | 1].sum) % mod;\n}\nlong long query(int place,int left,int right,int start,int end)\n{\n    if(left>right)\n        return 0;\n    if(start<=left && right<=end)\n        return t[place].sum;\n    pushdown(place, left, right);\n    int mid = (left + right) >> 1;\n    long long ans = 0;\n    if(start<=mid)\n        ans = (ans + query(place << 1, left, mid, start, end)) % mod;\n    if(end>mid)\n        ans = (ans + query(place << 1 | 1, mid + 1, right, start, end)) % mod;\n    return ans;\n}\nvoid split(int x,int place)//\u65ad\u5f00\u533a\u95f4\u7684\u64cd\u4f5c\uff0c\u5373\u7c7b\u578b1\u3002\n{\n    auto iter = lower_bound(noexist[x].begin(), noexist[x].end(), make_pair(place, place));//\u7531\u4e8elower_bound\u7684\u7279\u6027\uff0c\u627e\u5230\u7684\u662f\u5f85\u4fee\u6539\u7684\u540e\u4e00\u4e2a\uff0c\u56e0\u800c\u8981\u5f80\u524d\u8df3\u4e00\u4e2a\n    if(iter==noexist[x].begin())\n        return;\n    iter--;\n    pair<int, int> temp = *(iter);\n    if(temp.second>=place)\n    {\n        noexist[x].erase(iter);//\u539f\u59cb\u533a\u95f4\u8bb0\u5f97\u5220\u9664\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5206\u88c2\u6210\u4e24\u4e2a\u5b50\u533a\u95f4\u4e86\n        if(temp.first<place)\n            noexist[x].insert(make_pair(temp.first, place - 1));//\u5982\u679c\u5f00\u5934\u533a\u95f4\u90fd\u4e0d\u6bd4place\u5c0f\uff0c\u90a3\u4e48\u8bc1\u660e\u8fd9\u4e2a\u533a\u95f4\u4e00\u4e2a\u6570\u90fd\u4e0d\u542b\uff0c\u76f4\u63a5\u5220\u53bb\u4e0d\u5fc5\u518d\u6dfb\u52a0\u5230set\u4e2d\n        noexist[x].insert(make_pair(place, temp.second));//\u540e\u6bb5\u533a\u95f4\u5fc5\u52a0\n    }\n}\nint main()\n{\n    int n, q, op, l, r, x;\n    scanf(\"%d%d\", &n, &q);\n    build(1, 1, n);\n    for (int i = 1; i <= n;i++)\n        noexist[i].insert(make_pair(1, n));\n    while(q--)\n    {\n        scanf(\"%d\", &op);\n        if(op==1)\n        {\n            scanf(\"%d%d%d\", &l, &r, &x);\n            split(x, l);\n            split(x, r + 1);\n            change(1, 1, n, l, r, 2, 0);\n            while(1)//\u4ece\u524d\u5230\u540e\u627e\u672c\u6b21\u5f85\u4fee\u6539\u533a\u95f4\u4e2d\u6709\u54ea\u4e9bset\u91cc\u7684\u533a\u95f4\u662f\u5b8c\u6574\u8986\u76d6\u7684\uff0c\u8fd9\u4e9b\u533a\u95f4\u6267\u884c\u5b8c+1\u540e\u8981\u5168\u90e8\u5220\u9664\n            {\n                auto iter = lower_bound(noexist[x].begin(), noexist[x].end(), make_pair(l, l));\n                if(iter==noexist[x].end() || iter->first>r)\n                    break;\n                change(1, 1, n, iter->first, iter->second, inv, 1);\n                noexist[x].erase(iter);\n            }\n        }\n        else//\u6734\u7d20\u7684\u533a\u95f4\u67e5\u8be2\n        {\n            scanf(\"%d%d\", &l, &r);\n            printf(\"%lld\", query(1, 1, n, l, r));\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1621572852,
        "uid": 80026,
        "name": "walk_alone",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 CF981G Magic multisets"
    },
    {
        "content": "### CF981G Magic multisets\n\n\u8fd1\u4f3c\u67d0\u6708\u8d5b `E` \u9898 `risrqnis`\u3002\n\n\u9996\u5148\u60f3\u5230\u6811\u5957\u6811\uff0c\u7a7a\u95f4\u7206\u70b8\uff0c\u6392\u9664\u3002\n\n\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u96c6\u5408\u7b54\u6848\uff0c\u652f\u6301 $\\times 2$ \u548c $+1$ \u64cd\u4f5c\u3002\n\n\u600e\u6837\u7ef4\u62a4\u533a\u95f4\u96c6\u5408\u6dfb\u52a0\u64cd\u4f5c\u5462\uff0c\u89c2\u5bdf\u5230\u52a0\u7684\u6570\u90fd\u662f\u540c\u4e00\u4e2a\u6570\uff0c\u8003\u8651\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5efa $n$ \u4e2a\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u989c\u8272\u7684\u51fa\u73b0\u533a\u95f4\uff0c\u52a0\u6570\u5373\u533a\u95f4\u63a8\u5e73\u3002\n\n\u8003\u8651\u5230\u7ecf\u5178 `trick` \u989c\u8272\u7aef\u5747\u644a\uff0c\u5373 `ODT`\uff0c\u6bcf\u6b21\u63a8\u5e73\u6700\u591a\u589e\u52a0 $\\mathcal O(1)$ \u4e2a\u533a\u95f4\uff0c\u6bcf\u4e2a\u533a\u95f4\u5220\u9664 $\\mathcal O(1)$ \u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u644a\u6b63\u786e\u3002\n\n\u7efc\u4e0a\uff0c`ODT` \u7ef4\u62a4\u989c\u8272\u7684\u51fa\u73b0\u533a\u95f4\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n#define he putchar('\\n')\n#define ha putchar(' ')\n\nnamespace Fread\n{\n    const int SIZE = 1 << 23;\n    char buf[SIZE], *S, *T;\n    inline char getchar()\n    {\n        if (S == T)\n        {\n            T = (S = buf) + fread(buf, 1, SIZE, stdin);\n            if (S == T)\n                return '\\n';\n        }\n        return *S++;\n    }\n}\n\nnamespace Fwrite\n{\n    const int SIZE = 1 << 23;\n    char buf[SIZE], *S = buf, *T = buf + SIZE;\n    inline void flush()\n    {\n        fwrite(buf, 1, S - buf, stdout);\n        S = buf;\n    }\n    inline void putchar(char c)\n    {\n        *S++ = c;\n        if (S == T)\n            flush();\n    }\n    struct NTR\n    {\n        ~NTR()\n        {\n            flush();\n        }\n    } ztr;\n}\n\n#ifdef ONLINE_JUDGE\n#define getchar Fread::getchar\n#define putchar Fwrite::putchar\n#endif\n\ninline int read()\n{\n\tint x = 0;\n\tchar c = getchar();\n\twhile(c < '0' || c > '9')\n\t\tc = getchar();\n\twhile(c >= '0' && c <= '9')\n\t{\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn x;\n}\n\ninline void write(int x)\n{\n\tif(x < 0)\n\t{\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif(x > 9) write(x / 10);\n\tputchar(x % 10 + 48);\n}\n\nconst ll _ = 2e5 + 1, mod = 998244353;\n\nint n, q;\n\nint tr[_ << 2], t1[_ << 2], t2[_ << 2];\n\nvoid build(int o, int l, int r)\n{\n\tif(l == r) return;\n\tint mid = (l + r) >> 1;\n\tt1[o] = 0, t2[o] = 1;\n\tbuild(o << 1, l, mid), build(o << 1 | 1, mid + 1, r);\n}\n\nvoid push1(int o, int l, int r, ll v)\n{\n\tif(!v) return;\n\tt1[o] = (t1[o] + v) % mod;\n\ttr[o] = (tr[o] + 1ll * (r - l + 1) * v) % mod;\n}\n\nvoid push2(int o, ll v)\n{\n\tif(v == 1) return;\n\tt1[o] = 1ll * t1[o] * v % mod;\n\tt2[o] = 1ll * t2[o] * v % mod;\n\ttr[o] = 1ll * tr[o] * v % mod;\n}\n\nvoid pushdown(int o, int l, int r)\n{\n\tint mid = (l + r) >> 1;\n\tpush2(o << 1, t2[o]), push2(o << 1 | 1, t2[o]), t2[o] = 1;\n\tpush1(o << 1, l, mid, t1[o]), push1(o << 1 | 1, mid + 1, r, t1[o]), t1[o] = 0;\n}\n\nvoid upd(int o, int l, int r, int L, int R, int v, int id)\n{\n\tif(L <= l && r <= R)\n\t{\n\t\tif(id == 1) push1(o, l, r, v);\n\t\telse push2(o, v);\n\t\treturn;\n\t}\n\tpushdown(o, l, r);\n\tint mid = (l + r) >> 1;\n\tif(L <= mid) upd(o << 1, l, mid, L, R, v, id);\n\tif(R > mid) upd(o << 1 | 1, mid + 1, r, L, R, v, id);\n\ttr[o] = (tr[o << 1] + tr[o << 1 | 1]) % mod;\n}\n\nint qry(int o, int l, int r, int L, int R)\n{\n\tif(L <= l && r <= R) return tr[o];\n\tpushdown(o, l, r);\n\tint mid = (l + r) >> 1, res = 0;\n\tif(L <= mid) res = qry(o << 1, l, mid, L, R);\n\tif(R > mid) res = (res + qry(o << 1 | 1, mid + 1, r, L, R)) % mod;\n\treturn res % mod;\n}\n\nstruct Odt\n{\n\t#define It set<odt>::iterator\n\tstruct odt\n\t{\n\t\tint l, r, v;\n\t\todt(int L = 0, int R = 0, int V = 0) { l = L, r = R, v = V; }\n\t\tfriend bool operator < (const odt &a, const odt &b) { return a.l < b.l; }\n\t};\n\tset<odt> s;\n\tvoid init() { s.insert(odt(1, n, 0)); }\n\tIt split(int x)\n\t{\n\t\tIt it = s.lower_bound(odt(x, 0, 0));\n\t\tif(it != s.end() && it -> l == x) return it;\n\t\t--it;\n\t\tint L = it -> l, R = it -> r, V = it -> v;\n\t\ts.erase(it), s.insert(odt(L, x - 1, V));\n\t\treturn s.insert(odt(x, R, V)).first;\n\t}\n\tvoid assign(int l, int r)\n\t{\n\t\tIt itr = split(r + 1), itl = split(l);\n\t\tfor(It it = itl; it != itr; ++it)\n\t\t\tif(!(it -> v)) upd(1, 1, n, it -> l, it -> r, 1, 1);\n\t\t\telse upd(1, 1, n, it -> l, it -> r, 2, 0);\n\t\ts.erase(itl, itr), s.insert(odt(l, r, 1));\n\t}\n} t[_];\n\nsigned main()\n{\n\tn = read(), q = read();\n\tbuild(1, 1, n);\n\tfor(int i = 1; i <= n; ++i) t[i].init();\n\tint opt, l, r, x;\n\twhile(q--)\n\t{\n\t\topt = read(), l = read(), r = read();\n\t\tif(opt == 1)\n\t\t\tx = read(), t[x].assign(l, r);\n\t\telse\n\t\t\twrite(qry(1, 1, n, l, r)), he;\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1658821621,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "CF981G Magic multisets"
    },
    {
        "content": "# \u9898\u89e3\n\n- \u8fd9\u662f\u4e00\u9053\u7ebf\u6bb5\u6811\u7ed3\u5408 ODT \u7684\u9898\u3002\n\n- \u5bf9\u4e8e\u5411\u533a\u95f4\u4e2d\u7684\u96c6\u5408\u4e2d\u52a0\u5165 `x`\uff0c\u6211\u4eec ODT \u6765\u7ef4\u62a4\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u96c6\u5408\uff0c\u52a0\u5165 `x` \u662f\u5bf9\u96c6\u5408\u5927\u5c0f\u8fdb\u884c $+1$ \u8fd8\u662f $\\times 2$ \u64cd\u4f5c\u3002\n\n- \u5bf9\u4e8e\u8fd9\u4e2a $+1,\\times 2$ \u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n- ODT \u4e2d `v` \u7684\u503c\u57df\u4e3a $\\{1,0\\}$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u96c6\u5408\u7684\u521d\u59cb\u5316\u4e3a $\\{1,n,0\\}$\uff08\u6211\u66fe\u56e0\u4e3a\u6f0f\u5199\u534a\u5929\u627e\u4e0d\u51fa\u9519\uff09\u3002\n\n- \u4ee3\u7801\u4e5f\u5341\u5206\u597d\u4e9b\uff0cODT \u53ea\u6709 `split` \u548c\u4e00\u4e2a\u7b80\u5355\u7684\u5224\u65ad\u51fd\u6570\uff0c\u7ebf\u6bb5\u6811\u51e0\u4e4e\u5c31\u662f\u6a21\u677f\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i, a, b) for(register int i = a; i <= b; ++i)\n\nusing namespace std;\n \nconst int maxn = 2e5 + 5, mod = 998244353;\n\nstruct node\n{\n    int l; mutable int r, v;\n    node(int L = 0, int R = -1, int V = 0){l = L, r = R, v = V;}\n    inline bool operator <(const node &x) const{return l < x.l;} \n}; set <node> t[maxn];\n\nint n, q;\n\nstruct segment_tree\n{\n    #define ls (x<<1)\n    #define rs (x<<1|1)\n    #define m(x) a[x].ml\n    #define d(x) a[x].ad\n    #define s(x) a[x].sum\n    struct tree\n    {\n        int sum, ml, ad;\n    }a[maxn << 2];\n    inline void up(int x)\n    {\n        a[x].sum = (a[ls].sum + a[rs].sum) % mod;\n    }\n    inline void build(int x, int l, int r)\n    {\n        a[x].ml = 1; \n\t\tif(l == r)\n\t\t\treturn;\n        int mid = l + r >> 1;\n        build(ls, l, mid), build(rs, mid + 1, r);\n    }\n    inline void dw(int x, int l, int r)\n    {\n        if(m(x) != 1)\n        {\n            m(ls) = 1ll * m(ls) * m(x) % mod, m(rs) = 1ll * m(rs) * m(x) % mod;\n            d(ls) = 1ll * d(ls) * m(x) % mod, d(rs) = 1ll * d(rs) * m(x) % mod;\n            s(ls) = 1ll * s(ls) * m(x) % mod, s(rs) = 1ll * s(rs) * m(x) % mod;\n            m(x) = 1;\n        } \n        if(d(x))\n        { int mid = l + r >> 1;\n            d(ls) = (d(ls) + d(x)) % mod, d(rs) = (d(rs) + d(x)) % mod;\n            s(ls) = (s(ls) + 1ll * d(x) * (mid - l + 1) % mod) % mod;\n            s(rs) = (s(rs) + 1ll * d(x) * (r - mid) % mod) % mod;   \n            d(x) = 0;\n        }\n    }\n    inline void add(int x, int l, int r, int L, int R)\n    {\n        if(l >= L and r <= R)\n        {\n            d(x) = (d(x) + 1) % mod, s(x) = (s(x) + r - l + 1) % mod; return;\n        } \n        int mid = l + r >> 1; dw(x, l, r);\n        if(L <= mid)\n\t\t\tadd(ls, l, mid, L, R); \n\t\tif(R > mid) \n\t\t\tadd(rs, mid + 1, r, L, R);\n        up(x);\n    }\n    inline void mul(int x, int l, int r, int L, int R)\n    {\n        if(l >= L and r <= R)\n        {\n            m(x) = 2ll * m(x) % mod, s(x) = 2ll * s(x) % mod, d(x) = 2ll * d(x) % mod;\n            return;\n        } \n        int mid = l + r >> 1; dw(x, l, r);\n        if(L <= mid) \n\t\t\tmul(ls, l, mid, L, R); \n\t\tif(R > mid) \n\t\t\tmul(rs, mid + 1, r, L, R);\n        up(x);\n    }\n    inline int qry(int x, int l, int r, int L, int R)\n    {\n        if(l >= L and r <= R) \n\t\t\treturn s(x);\n        int mid = l + r >> 1, ans = 0; dw(x, l, r);\n        if(L <= mid) \n\t\t\tans = (ans + qry(ls, l, mid, L, R)) % mod; \n        if(R > mid) \n\t\t\tans = (ans + qry(rs, mid + 1, r, L, R)) % mod;\n        up(x); \n\t\treturn ans;\n    }\n}T;\n \nset <node> :: iterator split(int pos, int k)\n{\n    set <node> :: iterator it = t[k].lower_bound(node(pos));\n    if(it != t[k].end() and it->l == pos) \n\t\treturn it;\n    it--; \n    int v = it->v, r = it->r; it->r = pos - 1;\n    return t[k].insert(node(pos, r, v)).first;\n}\n \ninline void mdf(int k, int l, int r)\n{\n    set <node> :: iterator itr = split(r + 1, k), itl = split(l, k);\n    for(set <node> :: iterator it = itl; it != itr; ++it)\n        if(it->v) \n\t\t\tT.mul(1, 1, n, it->l, it->r);\n        else \n\t\t\tT.add(1, 1, n, it->l, it->r);\n    t[k].erase(itl, itr);\n\tt[k].insert(node(l, r, 1));\n}\n \nint main()\n{\n    scanf(\"%d%d\", &n, &q);\n    rep(i, 1, n)\n\t\tt[i].insert(node(1, n + 1));\n    T.build(1, 1, n);\n    while(q--)\n    { \n        int opt, l, r, k;\n        scanf(\"%d%d%d\", &opt, &l, &r);\n        if(opt == 1)\n\t\t\tscanf(\"%d\", &k), mdf(k, l, r);\n        else\n\t\t\tprintf(\"%d\\n\", T.qry(1, 1, n, l, r));      \n    }\n    return 0;\n}\n```\n",
        "postTime": 1658892269,
        "uid": 342868,
        "name": "Ted_hjl",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF981G\u3010Magic multisets\u3011"
    }
]