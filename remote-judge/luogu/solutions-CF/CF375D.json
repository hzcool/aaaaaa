[
    {
        "content": "\u8fd9\u9053\u9898dsu on tree\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u50cf\u697c\u4e0a\u8bf4\u7684\u518d\u5957\u4e0a\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u7684\n\n#### \u601d\u8def\n\ndsu on tree\u7684\u677f\u5b50\uff0c\u53ef\u60dc\u4eba\u50bb\u628a\n\n```cpp\nfor(int i=fir[u];i;i=nxt[i])\n```\n\n\u6253\u6210\n\n```cpp\nfor(int i=fir[u];i<=n;i++)\n```\n\n\u8c03\u4e86\u4e24\u4e2a\u5c0f\u65f62333\n\n#### \u7b80\u5355\u4e14\u66b4\u529b\u7684\u601d\u8def\n\n\u8fd9\u9898\u8981\u6c42\u7ef4\u62a4>=k\u7684\u989c\u8272\u6570\u91cf\n\n\u6240\u4ee5\u548c\u6a21\u677f\u7c7b\u4f3c\u7684\u8003\u8651\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\n\n\u663e\u7136\u662f>=k\u7684\u70b9\u6570\u4f1a\u4ea7\u751f\u8d21\u732e\uff0c\u6240\u4ee5\u7528VAL\u8bb0\u5f55\u6bcf\u4e2a\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7136\u540e\u989d\u5916\u5f00\u4e00\u4e2ad[k]\u6570\u7ec4\u8868\u793a>=k\u7684\u989c\u8272\u6570\u91cf\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u4f18\u96c5\u7684\u8dd1\u8fc7\u53bb\u4e86\n\n#### \u539a\u989c\u65e0\u803b\u7684\u5e7f\u544a\n\n\u6b22\u8fce\u6765\u6211\u7684\u535a\u5ba2\u8f6c\u4e00\u8f6c\u554a\n\n[cnblogs](http://www.cnblogs.com/dreagonm)\n\n[hexo\u535a\u5ba2](https://dreagonm.github.io/)\n\n#### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\nusing namespace std;\nint sz[100100],val[100100],heason[100100],u[100100<<1],v[100100<<1],w_p[100100],fir[100100],nxt[100100<<1],d[100100],vis[100100],cnt,n,m,ans[100100];\nstruct query{\n    int num,ansid;\n};\nvector<query> Q[100100];\nvoid addedge(int ui,int vi){\n    ++cnt;\n    u[cnt]=ui;\n    v[cnt]=vi;\n    nxt[cnt]=fir[ui];\n    fir[ui]=cnt;\n}\nvoid dfs1(int u,int f){\n    sz[u]=1;\n    for(int i=fir[u];i;i=nxt[i]){\n        if(v[i]==f)\n            continue;\n        dfs1(v[i],u);\n        sz[u]+=sz[v[i]];\n        if(heason[u]==0||sz[heason[u]]<sz[v[i]])\n            heason[u]=v[i];\n    }\n}\nvoid solve(int u,int f,int c){\n    if(c==-1)\n        d[val[w_p[u]]]+=c;\n    val[w_p[u]]+=c;\n    if(c==1)\n        d[val[w_p[u]]]+=c;\n    for(int i=fir[u];i;i=nxt[i]){\n        if(v[i]==f||vis[v[i]])\n            continue;\n        solve(v[i],u,c);\n    }\n}\nvoid dfs2(int u,int f,int islight){\n    for(int i=fir[u];i;i=nxt[i]){\n        if(v[i]==f||v[i]==heason[u])\n            continue;\n        dfs2(v[i],u,1);\n    }\n    if(heason[u])\n        dfs2(heason[u],u,0),vis[heason[u]]=true;\n    solve(u,f,1);\n    for(int i=0;i<Q[u].size();i++)\n        ans[Q[u][i].ansid]=d[Q[u][i].num];\n    if(heason[u])\n        vis[heason[u]]=false;\n    if(islight)\n        solve(u,f,-1);\n}\nint main(){\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&w_p[i]);\n    for(int i=1;i<n;i++){\n        int x,y;\n        scanf(\"%d %d\",&x,&y);\n        addedge(x,y);\n        addedge(y,x);\n    }\n    for(int i=1;i<=m;i++){\n        query x;\n        int u;\n        scanf(\"%d %d\",&u,&x.num);\n        x.ansid=i;\n        Q[u].push_back(x);\n    }\n    dfs1(1,0);\n    dfs2(1,0,1);\n    for(int i=1;i<=m;i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1544888193,
        "uid": 75392,
        "name": "dreagonm",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u5b50\u6811\u4e0a\u7684\u67e5\u8be2\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7$DFS$\u5e8f\u8f6c\u4e3a\u5e8f\u5217\u95ee\u9898\n\n\u518d\u4e00\u770b\uff0c\u6ca1\u6709\u4fee\u6539\uff0c\u53ef\u4ee5\u79bb\u7ebf\uff0c\u8fd9\u4e0d\u5c31\u662f\u83ab\u961f\u5417\uff1f\n\n\u6211\u4eec\u7528$sum_i$\u8868\u793a\u51fa\u73b0\u6b21\u6570$\\geq i$\u7684\u4e2a\u6570\n\n\u7528$val_i$\u8868\u793a\u7b2c$i$\u79cd\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\n\n\u90a3\u4e48\u6bcf\u6b21\u4fee\u6539\u65f6\u53ea\u8981$O(1)$\u4fee\u6539$sum$\u548c$val$\u5373\u53ef\n\n\u8be6\u89c1\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nconst int MaxN = 100010;\nstruct node\n{\n    int val, dfn, r, id;\n};\nstruct query\n{\n    int l, r;\n    int pos, id, k;\n};\nstruct edge\n{\n    int next, to;\n};\nnode a[MaxN];\nquery q[MaxN];\nedge e[MaxN << 1];\nint n, m, cnt, dfscnt, size;\nint head[MaxN], ans[MaxN], sum[MaxN], val[MaxN];\ninline int comp(node a, node b) { return a.dfn < b.dfn; }\ninline int cmp(query a, query b)\n{\n    if (a.pos != b.pos)\n        return a.pos < b.pos;\n    return a.r < b.r;\n}\ninline void add_edge(int u, int v)\n{\n    ++cnt;\n    e[cnt].to = v;\n    e[cnt].next = head[u];\n    head[u] = cnt;\n}\ninline void dfs(int u)\n{\n    a[u].dfn = ++dfscnt;\n    for (int i = head[u]; i; i = e[i].next)\n    {\n        int v = e[i].to;\n        if (!a[v].dfn)\n            dfs(v);\n    }\n    a[u].r = dfscnt;\n}\ninline int read()\n{\n    int x = 0;\n    char ch = getchar();\n    while (ch > '9' || ch < '0')\n        ch = getchar();\n    while (ch <= '9' && ch >= '0')\n        x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    return x;\n}\ninline void add(int x) { ++val[a[x].val], ++sum[val[a[x].val]]; }\ninline void del(int x) { --sum[val[a[x].val]], --val[a[x].val]; }\ninline void solve()\n{\n    int l = 1, r = 0;\n    for (int i = 1; i <= m; i++)\n    {\n        while (l > q[i].l)\n            --l, add(l);\n        while (r < q[i].r)\n            ++r, add(r);\n        while (l < q[i].l)\n            del(l), ++l;\n        while (r > q[i].r)\n            del(r), --r;\n        ans[q[i].id] = sum[q[i].k];\n    }\n}\nint main()\n{\n    n = read(), m = read();\n    size = pow(n, 0.55);\n    for (int i = 1; i <= n; i++)\n        a[i].val = read(), a[i].id = i;\n    for (int i = 1; i <= n - 1; i++)\n    {\n        int u = read(), v = read();\n        add_edge(u, v);\n        add_edge(v, u);\n    }\n    dfs(1);\n    for (int i = 1; i <= m; i++)\n    {\n        int v, k;\n        v = read(), k = read();\n        q[i].l = a[v].dfn, q[i].r = a[v].r, q[i].k = k;\n        q[i].id = i, q[i].pos = (q[i].l - 1) / size + 1;\n    }\n    std::sort(q, q + m + 1, cmp);\n    std::sort(a + 1, a + n + 1, comp);\n    solve();\n    for (int i = 1; i <= m; i++)\n        printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1549347497,
        "uid": 61966,
        "name": "little_sun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u76ee\u524d\u6700\u4f18\u89e3\uff0c\u6ca1\u5f00O2\u548cfread\u3002\n\n\u53ef\u4ee5\u60f3\u5230\u7528DSU on tree\u89e3\u51b3\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u7528\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u6876\uff0c\u6240\u4ee5\u6211\u7684\u590d\u6742\u5ea6\u662f\uff1a$O(nlog_2n)$ \u7684\u3002\n\n\u8054\u60f3\u5230\u83ab\u961f\u7684\u201c\u6570\u989c\u8272\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 $col[x]$ \u8868\u793a\u8fd9\u4e2a\u989c\u8272\u51fa\u73b0\u4e86\u51e0\u6b21\uff0c\u7528 $sum[x]$ \u8868\u793a\u6709\u591a\u5c11\u989c\u8272\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e $\uff58$ \u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u6709\u4e86\u5982\u4e0b\uff0c\u50cf\u83ab\u961f\u79fb\u6307\u9488\u4e00\u6837\u7684\u4fee\u6539\u51fd\u6570\uff1a\n\n```cpp\ninline void add(int u) { col[c[u]]++; sum[col[c[u]]]++; }\ninline void del(int u) { sum[col[c[u]]]--; col[c[u]]--; }\n```\n\n\u968f\u540e\u5c31\u662f\u5e38\u89c4\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u627e\u91cd\u513f\u5b50\uff0c\u5212\u5206\u5b50\u6811\u3002\n\n2. \u5bfb\u627e\u7b54\u6848\uff0c\u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u6211\u7684\u5199\u6cd5\u662f\u79bb\u7ebf\u7684\uff0c\u628a\u8be2\u95ee\u8bb0\u5f55\u5728 $vector$ \u4e2d\u3002\n\ncode:\n\n```cpp\n// Program written by Liu Zhaozhou ~~~\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline char gc(void) {\n\tstatic char buf[100000], *p1 = buf, *p2 = buf;\n\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n}\n\n#define gc() getchar()\n\ntemplate <class T> inline void read(T &x) {\n\tT f = 1; x = 0; static char c = gc();\n\tfor (; !isdigit(c); c = gc()) if (c == '-') f = -f;\n\tfor (; isdigit(c); c = gc()) x = (x << 1) + (x << 3) + (c & 15);\n\tx *= f;\n}\n\ninline void readstr(char *s) {\n\tdo *s = gc(); while ((*s == ' ') || (*s == '\\n') || (*s == '\\r'));\n\tdo *(++s) = gc(); while ((~*s) && (*s != ' ') && (*s != '\\n') && (*s != '\\r'));\n\t*s = 0; return;\n}\n\ninline void readch(char&x) { while (isspace(x = gc())); }\n\nchar pf[100000], *o1 = pf, *o2 = pf + 100000;\n#define ot(x) (o1 == o2 ? fwrite(pf, 1, 100000, stdout), *(o1 = pf) ++= x : *o1 ++= x)\ntemplate <class T>\ninline void println(T x, char c = '\\n') {\n\tif (x < 0) ot(45), x = -x;\n\tstatic char s[15], *b; b = s;\n\tif (!x) *b ++= 48;\n\tfor (; x; * b ++= x % 10 + 48, x /= 10);\n\tfor (; b-- != s; ot(*b)); ot(c);\n}\n\ntemplate <class T> inline void write(T x) {\n\tif (x < 0) x = -x, putchar('-');\n\tif (x > 9) write(x / 10);\n\tputchar(x % 10 + 48);\n}\n\ntemplate <class T> inline void writeln(T x, char c = '\\n') { write(x); putchar(c); }\ntemplate <class T> inline void chkmax(T &x, const T y) { x > y ? x = x : x = y; }\ntemplate <class T> inline void chkmin(T &x, const T y) { x < y ? x = x : x = y; }\n\ninline void file(string str) {\n\tfreopen((str + \".in\").c_str(), \"r\", stdin);\n\tfreopen((str + \".out\").c_str(), \"w\", stdout);\n}\n\n#define Ms(arr, opt) memset(arr, opt, sizeof(arr))\n#define Mp(x, y) make_pair(x, y)\n\ntypedef long long ll;\ntypedef pair <int, int> pii;\n\nconst int Maxn = 1e5 + 5, Maxm = 2e5 + 5;\nint n, m, cnt, c[Maxn], head[Maxn], ver[Maxm], nxt[Maxm];\ninline void AddEdge(int u, int v) {\n\tver[++cnt] = v, nxt[cnt] = head[u], head[u] = cnt;\n\tver[++cnt] = u, nxt[cnt] = head[v], head[v] = cnt;\n}\n\nint fat[Maxn], sze[Maxn], son[Maxn];\nint L[Maxn], R[Maxn], rev[Maxn], tot;\ninline void DfsFir(int u) {\n\tsze[u] = 1; L[u] = ++tot; rev[tot] = u;\n\tfor (int i = head[u]; i; i = nxt[i]) {\n\t\tif (ver[i] == fat[u]) continue;\n\t\tfat[ver[i]] = u; DfsFir(ver[i]);\n\t\tsze[u] += sze[ver[i]];\n\t\tif (sze[son[u]] < sze[ver[i]]) son[u] = ver[i];\n\t} R[u] = tot;\n}\n\nvector <pii> vec[Maxn]; \nint col[Maxn], sum[Maxn], ans[Maxn];\n\ninline void add(int u) { col[c[u]]++; sum[col[c[u]]]++; }\ninline void del(int u) { sum[col[c[u]]]--; col[c[u]]--; }\n\ninline void DfsSec(int u, bool iss) {\n\tfor (int i = head[u]; i; i = nxt[i]) {\n\t\tif (ver[i] == fat[u] || ver[i] == son[u]) continue;\n\t\tDfsSec(ver[i], false);\n\t} if (son[u]) DfsSec(son[u], true); add(u);\n\t\n\tfor (int i = head[u]; i; i = nxt[i]) {\n\t\tif (ver[i] == fat[u] || ver[i] == son[u]) continue;\n\t\tfor (int j = L[ver[i]]; j <= R[ver[i]]; j++) {\n\t\t\tint x = rev[j]; add(x);\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < (int) vec[u].size(); i++) {\n\t\tint idx = vec[u][i].first, k = vec[u][i].second;\n\t\tans[idx] = sum[k];\n\t}\n\t\n\tif (!iss) for (int i = L[u]; i <= R[u]; i++) del(rev[i]);\n}\n\nsigned main(void) {\n\tread(n), read(m);\n\tfor (int i = 1; i <= n; i++) read(c[i]);\n\tfor (int i = 1, u, v; i < n; i++)\n\t\tread(u), read(v), AddEdge(u, v);\n\tfor (int i = 1, u, k; i <= m; i++)\n\t\tread(u), read(k), vec[u].push_back(Mp(i, k));\n\tDfsFir(1); DfsSec(1, true);\n\tfor (int i = 1; i <= m; i++) writeln(ans[i]);\n//\tfwrite(pf, 1, o1 - pf, stdout);\n\treturn 0;\n}\n\n/**/\n\n```\n",
        "postTime": 1606200979,
        "uid": 50925,
        "name": "EternalEpic",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u9898\u89e3\u91cc\u8c8c\u4f3c\u5199\u7684\u90fd\u662f DSU on tree \u6216\u8005\u83ab\u961f\u7684\u505a\u6cd5\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n + m \\log n)$ \u7684\u505a\u6cd5\n\n\u5bf9\u4e8e $u$ \u8282\u70b9\u7684\u5b50\u6811\uff0c\u7ef4\u62a4\u4e24\u9897\u7ebf\u6bb5\u6811 $T1_u,T2_u$\uff0c$T1_u$ \u4e0b\u6807 $i$ \u5bf9\u5e94\u7684\u503c\u8868\u793a\u989c\u8272\u4e3a $i$ \u7684\u70b9\u5728\u5b50\u6811 $u$ \u5185\u7684\u4e2a\u6570\uff0c$T2_u$ \u4e0b\u6807 $i$ \u5bf9\u5e94\u7684\u503c\u8868\u793a\u6709\u591a\u5c11\u989c\u8272\u51fa\u73b0\u6b21\u6570\u4e3a $i$\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u4ece $u$ \u7684\u5b50\u8282\u70b9 $v_1,v_2...v_k$ \u8f6c\u79fb\u5230 $u$\n\n$T1_u$ \u7684\u503c\u5b9e\u9645\u4e0a\u5c31\u662f\u5c06\u6240\u6709 $T1_{v_1},T1_{v_2}...T1_{v_k}$ \u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\u540e\uff0c\u518d\u5728 $c_u$ \u7684\u4f4d\u7f6e\u52a0\u4e0a $1$\n\n$T2_u$ \u4f3c\u4e4e\u6bd4\u8f83\u68d8\u624b\u4e86\n\n\u5bf9\u4e8e\u4e00\u79cd\u989c\u8272 $col$\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4e24\u7c7b\u5206\u7c7b\n\n- \u5728\u5b50\u6811 $u$ \u4e2d\uff0c\u989c\u8272\u4e3a $col$ \u7684\u70b9\u90fd\u5c5e\u4e8e $u$ \u7684\u4e00\u4e2a\u513f\u5b50 $v$ \u7684\u5b50\u6811\n\n  \u5bf9\u4e8e\u8fd9\u7c7b\u60c5\u51b5\uff0c\u5728\u5b50\u6811 $u$ \u4e2d $col$ \u7684\u51fa\u73b0\u6b21\u6570\u4e0e\u5728\u5b50\u6811 $v$ \u4e2d\u662f\u76f8\u540c\u7684\uff0c\u5bf9\u4e8e\u8fd9\u7c7b\u60c5\u51b5\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e $T2$ \u4e5f\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\n  \n- \u5728\u5b50\u6811 $u$ \u4e2d\uff0c\u989c\u8272\u4e3a $col$ \u7684\u70b9\u5c5e\u4e8e $u$ \u7684\u591a\u4e2a\u513f\u5b50 $v_1,v_2..v_k$ \u7684\u5b50\u6811\n\n  \u5bf9\u4e8e\u8fd9\u7c7b\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u66b4\u529b\u4fee\u6539 $T2$ \u4e86\n  \n\u90a3\u4e48\u5b9e\u9645\u4e0a\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u5feb\u901f\u627e\u51fa\u54ea\u4e9b\u989c\u8272\u662f\u60c5\u51b5\u4e00\uff0c\u54ea\u4e9b\u989c\u8272\u662f\u60c5\u51b5\u4e8c\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u5728 $T1$ \u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\u65f6\uff0c\u627e\u5230\u6240\u6709\u88ab\u5408\u5e76\u7684\u53f6\u5b50\u8282\u70b9\u5e76\u8bb0\u5f55\u5b83\u4eec\u5bf9\u5e94\u7684\u989c\u8272\uff0c\u8fd9\u6837\u5c31\u627e\u51fa\u4e86\u6240\u6709\u7684\u60c5\u51b5\u4e8c\n\n\u7531\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u590d\u6742\u5ea6\u5206\u6790\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u60c5\u51b5\u4e8c\u6700\u591a\u53ea\u4f1a\u51fa\u73b0 $O(n)$ \u6b21\uff0c\u6240\u4ee5\u66b4\u529b\u4fee\u6539\u7684\u590d\u6742\u5ea6\u662f\u5bf9\u7684\n\n\u90a3\u4e48\u8be5\u5982\u4f55\u53ea\u5bf9\u6240\u6709\u60c5\u51b5\u4e00\u7684\u989c\u8272\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\u5462\uff1f\n\n\u7b54\u6848\u662f\u628a\u6240\u6709\u60c5\u51b5\u90fd\u88c5\u4f5c\u662f\u60c5\u51b5\u4e00\uff0c\u7136\u540e\u5bf9\u4e8e\u60c5\u51b5\u4e8c\u7684\u989c\u8272\uff0c\u5220\u53bb\u5404\u4e2a\u5b50\u6811 $v$ \u5185\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u52a0\u5165\u5b50\u6811 $u$ \u5185\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\n\n\u8fd9\u91cc\u53ef\u80fd\u6709\u4e00\u70b9\u7ec6\u8282\u95ee\u9898\uff0c\u5c31\u662f\u5982\u4f55\u6c42\u51fa\u6240\u6709\u542b\u6709\u8fd9\u79cd\u989c\u8272\u7684\u5b50\u6811 $v$ \u5185\u7684\u51fa\u73b0\u6b21\u6570\n\n\u4e5f\u662f\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u53f6\u8282\u70b9\u65f6\u7279\u5224\u4e00\u4e0b\uff0c\u653e\u5230\u4e00\u4e2a `vector` \u91cc\n\n\u4f46\u662f\u8fd9\u4e9b\u90e8\u5206\u6211\u4eec\u90fd\u6ca1\u6709\u8ba8\u8bba $u$ \u8282\u70b9\u7684\u989c\u8272\u8be5\u5982\u4f55\u5904\u7406\n\n\u5176\u5b9e\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u8981\u628a $u$ \u8282\u70b9\u7684\u989c\u8272\u5f53\u4f5c\u662f\u5b83\u81ea\u5df1\u4e00\u4e2a\u7279\u6b8a\u7684\u5b50\u8282\u70b9\u7684\u989c\u8272\u5c31\u884c\u4e86\n\n\u5bf9\u4e8e\u67e5\u8be2\uff0c\u5176\u5b9e\u5c31\u662f\u5728 $T2$ \u4e0a\u8fdb\u884c\u4e00\u4e0b\u533a\u95f4\u6c42\u548c\uff0c\u5982\u679c\u8ffd\u6c42\u5728\u7ebf\u7b97\u6cd5\u7684\u8bdd\u53ef\u4ee5\u9009\u62e9\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u4f46\u662f\u6211\u61d2\u5f97\u5199\u4e86\uff0c\u5c31\u5199\u4e86\u79bb\u7ebf\u7b97\u6cd5\n\ncode\uff1a\n\n```cpp\n#include <cstdio>\n#include <vector>\nusing namespace std;\nint n,m;\nint a[100005];\n\nint cnt;\nint head[100005];\nstruct eg{\n\tint to,nxt;\n}edge[200005];\n\nvoid make(int u,int v){\n\tedge[++cnt].to = v;\n\tedge[cnt].nxt = head[u];\n\thead[u] = cnt;\n}\n\nint T1[100005],T2[100005];\nstruct node{\n\tint val,l,r;\n}tree[5000005];\n\nint tag[100005];\n\n#define ls(x) tree[x].l\n#define rs(x) tree[x].r\n\nvoid fx(int &x){\n    if(x == 0){\n     \tx = ++cnt;\n     \ttree[x].val = ls(x) = rs(x) = 0;\n    }\n}\n\nvector <int> S,T;\n\nvoid upload(int rt,int l,int r,int id,int C){\n\ttree[rt].val += C;\n\tif(l == r) return;\n\tint mid = l + r >> 1;\n\tif(id <= mid){\n\t\tfx(ls(rt));\n\t\tupload(ls(rt),l,mid,id,C);\n\t}else{\n\t\tfx(rs(rt));\n\t\tupload(rs(rt),mid+1,r,id,C);\n\t}\n}\n\nint query(int rt,int l,int r,int L,int R){\n\tif(!rt) return 0;\n\tif(l == L && r == R) return tree[rt].val;\n\tint mid = l + r >> 1;\n\tif(R <= mid) return query(ls(rt),l,mid,L,R);\n\telse if(L > mid) return query(rs(rt),mid+1,r,L,R);\n\telse return query(ls(rt),l,mid,L,mid) + query(rs(rt),mid+1,r,mid+1,R);\n}\n\nint Merge(int x,int y,int l,int r){\n\tif(!x || !y) return x + y;\n\tif(l == r){\n\t\tif(!tag[l] && tree[x].val > 0){\n\t\t\ttag[l] = 1;\n\t\t\tS.push_back(l);\n\t\t\tT.push_back(tree[x].val);\n\t\t}\n\t\tif(tree[y].val > 0) T.push_back(tree[y].val);\n\t}\n\ttree[x].val += tree[y].val;\n\tint mid = l + r >> 1;\n\tls(x) = Merge(ls(x),ls(y),l,mid);\n\trs(x) = Merge(rs(x),rs(y),mid+1,r);\n\treturn x;\n}\n\nint res[100005];\nstruct ask{\n\tint k,id;\n};\nvector <ask> Q[100005];\n\nvoid dfs(int now,int fa){\n\tfor(int i = head[now];i;i = edge[i].nxt){\n\t\tif(edge[i].to == fa) continue;\n\t\tdfs(edge[i].to,now);\t\n\t}\n\tS.clear();\n\tT.clear();\n\tfx(T1[now]);\n\tupload(T1[now],1,100000,a[now],1);\n\tfor(int i = head[now];i;i = edge[i].nxt){\n\t\tif(edge[i].to == fa) continue;\n\t\tT1[now] = Merge(T1[now],T1[edge[i].to],1,100000);\t\n\t}\n\tfx(T2[now]);\n\tupload(T2[now],1,100000,1,1);\n\tfor(int i = 0;i < T.size();i++) upload(T2[now],1,100000,T[i],-1);\n\tfor(int i = 0;i < S.size();i++) upload(T2[now],1,100000,query(T1[now],1,100000,S[i],S[i]),1);\n\tfor(int i = head[now];i;i = edge[i].nxt){\n\t\tif(edge[i].to == fa) continue;\n\t\tT2[now] = Merge(T2[now],T2[edge[i].to],1,100000);\t\n\t}\n\tfor(int i = 0;i < S.size();i++) tag[S[i]] = 0;\n\tfor(int i = 0;i < Q[now].size();i++) res[Q[now][i].id] = query(T2[now],1,100000,Q[now][i].k,100000);\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i = 1;i <= n;i++) scanf(\"%d\",&a[i]);\n\tfor(int i = 1;i < n;i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tmake(u,v);make(v,u);\n\t}\n\tfor(int i = 1;i <= m;i++){\n\t\tint u,k;\n\t\tscanf(\"%d%d\",&u,&k);\n\t\tQ[u].push_back({k,i});\n\t}\n\tcnt = 0;\n\tdfs(1,0);\n\tfor(int i = 1;i <= m;i++) printf(\"%d\\n\",res[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1605790698,
        "uid": 49776,
        "name": "chenxinyang2006",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u9053\u6811\u4e0a\u83ab\u961f\u6a21\u677f\u9898\n\n\u9996\u5148\u8003\u8651\u628a\u6811\u8f6c\u5316\u4e3a\u6b27\u62c9\u5e8f\uff0c\u8fd9\u6837\u5c31\u628a\u4e66\u4e0a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u533a\u95f4\u95ee\u9898\uff0c\u7136\u540e\u76f4\u63a5\u5957\u83ab\u961f\u3002\n\n\u5bf9\u4e8e\u7b54\u6848\u7684\u5904\u7406\uff0c\u6211\u7528\u4e86\u4e24\u4e2a\u6570\u7ec4$cnt[i]$,\u8868\u793a\u533a\u95f4\u91cci\u8fd9\u4e2a\u6570\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u7684$dcnt[i]$\u8868\u793a\u51fa\u73b0\u6b21\u6570 $\u2265i $\u7684\u989c\u8272\u6709\u591a\u5c11\u79cd,\u7b54\u6848\u76f4\u63a5\u4ece\u540e\u8005\u4e2d\u53d6\u5f97\u3002\n\n\n\u8fd9\u91cc\u8fd8\u8981\u60f3\u4e00\u4e0b\u6bcf\u4e2a\u8be2\u95ee\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u5bf9\u4e8e\u8282\u70b9$i$\uff0c$i$\u5728\u6b27\u62c9\u5e8f\u91cc\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u5230\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u6570,\u5c31\u662f\u5b83\u6240\u6709\u7684\u5b50\u6811\u8282\u70b9\uff0c\uff08\u53ef\u4ee5\u81ea\u5df1\u4e3e\u4f8b\uff09\uff0c\u8fd9\u6837\u5de6\u53f3\u7aef\u70b9\u5c31\u662f$first[i]$\u548c$last[i]$\u3002\n\n\u6ce8\u610f\u6bcf\u4e2a\u8282\u70b9\u8981\u5728\u6b27\u62c9\u5e8f\u91cc\u51fa\u73b0\u4e24\u6b21\uff0c\u90a3\u4e48\u5bf9\u4e8e\u95ee\u9898\u8be2\u95ee\u7684$k$\u6b21\u5c31\u8981\u53d8\u4e3a$2*k$\u6b21\uff0c\u8fd8\u8981\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u5c3d\u91cf\u5f00\u591f.\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=4e5+5;\nint head[N],ver[N],net[N],tot; \nint n,m,len,dt[N],w[N],cnt[N],dcnt[N],ans[N];\nint seq[N],top,first[N],last[N];\nstruct nod{\n\tint id,l,r,k;\n}q[N];\nvoid add_edge(int a,int b){\n\tnet[++tot]=head[a];\n\thead[a]=tot;\n\tver[tot]=b;\n}\nbool cmp(nod x,nod y){\n\tint i=dt[x.l],j=dt[y.l];\n\tif(i!=j)return i<j;\n\treturn x.r<y.r;\n}\nvoid dfs(int x,int fa){//\u9884\u5904\u7406\u6b27\u62c9\u5e8f \n\tseq[++top]=x;\n\tfirst[x]=top;\n\tfor(int i=head[x];i;i=net[i]){\n\t\tint v=ver[i];\n\t\tif(v==fa)continue;\n\t\tdfs(v,x);\n\t}\t\n\tseq[++top]=x;\n\tlast[x]=top;\n}\nvoid add(int x){//\u7ef4\u62a4\u5e8f\u5217 \n\tcnt[w[x]]++; \n\tdcnt[cnt[w[x]]]++;\n}\nvoid del(int x){\n\tdcnt[cnt[w[x]]]--;\n\tcnt[w[x]]--;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tlen=sqrt(n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&w[i]);\n\t}\n\tfor(int i=1;i<n;i++){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tadd_edge(a,b);\n\t\tadd_edge(b,a);\n\t}\n\tdfs(1,0);\n\tfor(int i=1;i<=top;i++){\n\t\tdt[i]=(i-1)/len+1;\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint u,k;\n\t\tscanf(\"%d%d\",&u,&k);\n\t\tq[i].l=first[u],q[i].r=last[u];//\u5904\u7406\u5de6\u53f3\u7aef\u70b9 \n\t\tq[i].id=i,q[i].k=k;\n\t}\n\tsort(q+1,q+m+1,cmp);\n\tint l=1,r=0;\n\tfor(int i=1;i<=m;i++){//\u83ab\u961f\u6a21\u677f \n\t\tint k=q[i].k;\n\t\twhile(l>q[i].l)add(seq[--l]);\n\t\twhile(l<q[i].l)del(seq[l++]);\n\t\twhile(r>q[i].r)del(seq[r--]);\n\t\twhile(r<q[i].r)add(seq[++r]);\n\t\tans[q[i].id]=dcnt[k*2];//\u6ce8\u610f\u662fk*2 \n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tprintf(\"%d\\n\",ans[i]);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1612410217,
        "uid": 277664,
        "name": "\u968f\u4fbfAK",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "$$\\text{CF375D Tree and Queries}$$\n\n$\\quad$\u9898\u76ee\u94fe\u63a5\uff1a[CF375D Tree and Queries](https://www.luogu.com.cn/problem/CF375D)(\u6d1b\u8c37\u7684\u94fe\u63a5)\n\n### \u601d\u8def\n\n$\\quad$\u6807\u51c6\u505a\u6cd5\u662f\u52a8\u6001\u89c4\u5212\uff0c\u4f46\u770b\u5230 $4.5s$ \u7684\u65f6\u9650\uff0c\u4f3c\u4e4e\u53ef\u4ee5\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u6c34\u8fc7\u53bb\uff0c\u53ea\u8981\u7528 $num_i$ \u548c $cnt_k$ \u7684\u6570\u7ec4\u6765\u8bb0\u5f55\u51fa\u73b0\u989c\u8272 $i$ \u7684\u6570\u91cf\u53ca\u8d85\u8fc7 $k$ \u7684\u989c\u8272\u6570\u91cf\u5373\u53ef\u3002\n\n$\\quad$\u4e0b\u9762\u5c31\u7b80\u5355\u8bb2\u8bb2\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 (Dsu on Tree)\u7b97\u6cd5\uff0c\u5982\u679c\u6709\u4e0d\u61c2\u7684\u53ef\u4ee5\u63d0\u51fa\u6765\uff0c\u5982\u679c\u5df2\u7ecf\u5b66\u8fc7\u4e86\u7684\u53ef\u4ee5\u76f4\u63a5\u770b\u6700\u540e\u7684\u5b8c\u6574\u4ee3\u7801\u3002\n\n$$\\text{\u524d\u7f6e\u77e5\u8bc6}$$\n\n$\\quad$\u5b66\u8fd9\u4e2a\u4e4b\u524d\u9700\u8981\u5bf9\u6811\u4e0a\u64cd\u4f5c\u3001 $dfs$ \u5e8f\u548c\u8f7b\u91cd\u94fe\u5256\u5206\u7b49\u77e5\u8bc6\u6709\u4e00\u5b9a\u4e86\u89e3\uff0c\u6700\u597d\u5df2\u7ecf\u638c\u63e1\u4e86\u6811\u94fe\u5256\u5206\u3002\n\n$$\\text{\u7b97\u6cd5\u601d\u60f3}$$\n\n$\\quad$\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 (Dsu on Tree)\uff0c\u662f\u4e00\u4e2a\u5728 $O(n\\log n)$ \u65f6\u95f4\u5185\u89e3\u51b3\u8bb8\u591a\u6811\u4e0a\u95ee\u9898\u7684\u6709\u529b\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u6811\u4e0a\u79bb\u7ebf\u95ee\u9898\u53ef\u4ee5\u901f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u5927\u90e8\u5206\u7b97\u6cd5\u4e14\u66f4\u6613\u4e8e\u7406\u89e3\u548c\u5b9e\u73b0\u3002\n\n$\\quad$\u5148\u60f3\u4e00\u4e0b\u66b4\u529b\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\u90fd\u904d\u5386\u6574\u68f5\u5b50\u6811\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\uff0c\u6700\u540e\u518d\u6e05\u7a7a $cnt$ \u6570\u7ec4\uff0c\u6700\u574f\u60c5\u51b5\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2)$ \uff0c\u5bf9\u4e8e $10^5$ \u7684\u6570\u636e\u80af\u5b9a\u662f\u8fc7\u4e0d\u53bb\u7684\u3002\n\n$\\quad$\u73b0\u5728\u8003\u8651\u4f18\u5316\u7b97\u6cd5\uff0c\u66b4\u529b\u7b97\u6cd5\u8dd1\u5f97\u6162\u7684\u539f\u56e0\u5c31\u662f\u591a\u6b21\u904d\u5386\uff0c\u591a\u6b21\u6e05\u7a7a\u6570\u7ec4\uff0c\u4e00\u4e2a\u663e\u7136\u7684\u4f18\u5316\u5c31\u662f\u5c06\u8be2\u95ee\u540c\u4e00\u4e2a\u5b50\u6811\u7684\u8be2\u95ee\u653e\u5728\u4e00\u8d77\u5904\u7406\uff0c\u4f46\u8fd9\u6837\u8fd8\u662f\u6ca1\u6709\u5904\u7406\u5230\u5173\u952e\uff0c\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f $O(n^2)$\uff0c\u8003\u8651\u5230\u8be2\u95ee $x$ \u8282\u70b9\u65f6\uff0c$x$ \u7684\u5b50\u6811\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u6e05\u7a7a\u6570\u7ec4\uff0c\u5148\u7edf\u8ba1 $x$ \u7684\u5b50\u6811\u4e2d\u7684\u7b54\u6848\uff0c\u518d\u7edf\u8ba1 $x$ \u7684\u7b54\u6848\uff0c\u8fd9\u6837\u5c31\u9700\u8981\u63d0\u524d\u5904\u7406\u597d $dfs$ \u5e8f\u3002\n\n$\\quad$\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u4f18\u5316\uff0c\u904d\u5386\u5230\u6700\u540e\u4e00\u4e2a\u5b50\u6811\u65f6\u662f\u4e0d\u7528\u6e05\u7a7a\u7684\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u4ea7\u751f\u5bf9\u5176\u4ed6\u8282\u70b9\u5f71\u54cd\u4e86\uff0c\u6839\u636e\u8d2a\u5fc3\u7684\u601d\u60f3\u6211\u4eec\u5f53\u7136\u8981\u628a\u8282\u70b9\u6570\u6700\u591a\u7684\u5b50\u6811\uff08\u5373\u91cd\u513f\u5b50\u5f62\u6210\u7684\u5b50\u6811\uff09\u653e\u5728\u6700\u540e\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u770b\u4f3c\u6bd4\u8f83\u5feb\u7684\u7b97\u6cd5\uff0c\u5148\u904d\u5386\u6240\u6709\u7684\u8f7b\u513f\u5b50\u8282\u70b9\u5f62\u6210\u7684\u5b50\u6811\uff0c\u7edf\u8ba1\u7b54\u6848\u4f46\u662f\u4e0d\u4fdd\u7559\u6570\u636e\uff0c\u7136\u540e\u904d\u5386\u91cd\u513f\u5b50\uff0c\u7edf\u8ba1\u7b54\u6848\u5e76\u4e14\u4fdd\u7559\u6570\u636e\uff0c\u6700\u540e\u518d\u904d\u5386\u8f7b\u513f\u5b50\u4ee5\u53ca\u7236\u8282\u70b9\uff0c\u5408\u5e76\u91cd\u513f\u5b50\u7edf\u8ba1\u8fc7\u7684\u7b54\u6848\u3002\n\n$\\quad$\u5173\u952e\u4ee3\u7801\n```cpp\nil void add(int x){num[col[x]]++;cnt[num[col[x]]]++;}//\u5355\u70b9\u589e\u52a0\u8d21\u732e\nil void raise(int x)//\u589e\u52a0x\u7684\u5b50\u6811\u7684\u8d21\u732e\n{\n  for(re i=seg[x];i<=seg[x]+size[x]-1;i++)\n    add(rev[i]);\n}\nil void clear(int x)//\u6e05\u7a7a\u5b50\u6811\n{\n  for(re i=seg[x];i<=seg[x]+size[x]-1;i++)\n    {\n      int y=rev[i];\n      cnt[num[col[y]]]--;num[col[y]]--;\n    }\n}\nil void dfs1(int x,int fa)//\u9884\u5904\u7406\n{\n  size[x]=1;seg[x]=++seg[0];rev[seg[x]]=x;father[x]=fa;\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==fa)continue;dfs1(y,x);\n      size[x]+=size[y];\n      if(size[y]>size[son[x]])son[x]=y;\n    }\n}\nil void dfs2(int x,int flag)//flag\u8868\u793a\u662f\u5426\u4e3a\u91cd\u513f\u5b50\uff0c1\u8868\u793a\u91cd\u513f\u5b50\uff0c0\u8868\u793a\u8f7b\u513f\u5b50\n{\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==father[x]||y==son[x])continue;\n      dfs2(y,0);//\u5148\u904d\u5386\u8f7b\u513f\u5b50\n    }if(son[x])dfs2(son[x],1);//\u518d\u904d\u5386\u91cd\u513f\u5b50\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==father[x]||y==son[x])continue;\n      raise(y);//\u66f4\u65b0\u8f7b\u513f\u5b50\u7684\u8d21\u732e\n    }add(x);//\u52a0\u4e0ax\u7ed3\u70b9\u672c\u8eab\u7684\u8d21\u732e\n  for(re i=0;i<q[x].size();i++)//\u66f4\u65b0\u7b54\u6848\n    ans[q[x][i].id]=cnt[q[x][i].k];\n  if(!flag)clear(x);//\u5982\u679c\u662f\u8f7b\u513f\u5b50\uff0c\u5c31\u6e05\u7a7a\n}\n```\n$\\quad$\u5b8c\u6574 $AC$ \u4ee3\u7801\uff0c\u5efa\u8bae\u81ea\u5df1\u5199\u51fa\u6765\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<map>\n#include<vector>\nusing namespace std;\n#define re register int\n#define int long long\n#define LL long long\n#define il inline\n#define next nee\n#define inf 1e18\nil int read()\n{\n  int x=0,f=1;char ch=getchar();\n  while(!isdigit(ch)&&ch!='-')ch=getchar();\n  if(ch=='-')f=-1,ch=getchar();\n  while(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n  return x*f;\n}\nil void print(int x)\n{\n  if(x<0)putchar('-'),x=-x;\n  if(x/10)print(x/10);\n  putchar(x%10+'0');\n}\nconst int N=1e5+5;\nint n,m,next[N<<1],go[N<<1],head[N],tot,seg[N],col[N];\nint rev[N],size[N],son[N],father[N],cnt[N],ans[N],num[N];\nstruct node{int k,id;};\nvector<node>q[N];\nil void Add(int x,int y)\n{\n  next[++tot]=head[x];\n  head[x]=tot;go[tot]=y;\n}\nil void add(int x){num[col[x]]++;cnt[num[col[x]]]++;}\nil void raise(int x)\n{\n  for(re i=seg[x];i<=seg[x]+size[x]-1;i++)\n    add(rev[i]);\n}\nil void clear(int x)\n{\n  for(re i=seg[x];i<=seg[x]+size[x]-1;i++)\n    {\n      int y=rev[i];\n      cnt[num[col[y]]]--;num[col[y]]--;\n    }\n}\nil void dfs1(int x,int fa)\n{\n  size[x]=1;seg[x]=++seg[0];rev[seg[x]]=x;father[x]=fa;\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==fa)continue;dfs1(y,x);\n      size[x]+=size[y];\n      if(size[y]>size[son[x]])son[x]=y;//\u91cd\u513f\u5b50\n    }\n}\nil void dfs2(int x,int flag)//flag\u8868\u793a\u662f\u5426\u4e3a\u91cd\u513f\u5b50\uff0c1\u8868\u793a\u91cd\u513f\u5b50\uff0c0\u8868\u793a\u8f7b\u513f\u5b50\n{\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==father[x]||y==son[x])continue;\n      dfs2(y,0);//\u5148\u904d\u5386\u8f7b\u513f\u5b50\n    }if(son[x])dfs2(son[x],1);//\u518d\u904d\u5386\u91cd\u513f\u5b50\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==father[x]||y==son[x])continue;\n      raise(y);//\u66f4\u65b0\u8f7b\u513f\u5b50\u7684\u8d21\u732e\n    }add(x);//\u52a0\u4e0ax\u7ed3\u70b9\u672c\u8eab\u7684\u8d21\u732e\n  for(re i=0;i<q[x].size();i++)//\u66f4\u65b0\u7b54\u6848\n    ans[q[x][i].id]=cnt[q[x][i].k];\n  if(!flag)clear(x);//\u5982\u679c\u662f\u8f7b\u513f\u5b50\uff0c\u5c31\u6e05\u7a7a\n}\nsigned main()\n{\n  n=read();m=read();\n  for(re i=1;i<=n;i++)col[i]=read();\n  for(re i=1,x,y;i<n;i++)x=read(),y=read(),Add(x,y),Add(y,x);\n  for(re i=1,x,y;i<=m;i++)x=read(),y=read(),q[x].push_back((node){y,i});\n  dfs1(1,0);dfs2(1,1);\n  for(re i=1;i<=m;i++)print(ans[i]),putchar('\\n');\n  return 0;\n}\n```",
        "postTime": 1605770283,
        "uid": 109220,
        "name": "Farkas_W",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u4e2a\u7d2b\u9898\u9898\u89e3\uff0c\u6709\u70b9\u5c0f\u6fc0\u52a8 qwq  \n~~\u521a\u597d\u66b4\u9732\u51fa\u6211\u7684\u83dc\uff0c\u5bb3~~  \n\u95f2\u8bdd\u5c11\u8bf4\uff0c\u5207\u5165\u6b63\u9898\u3002  \n\n---\n\u770b\u7740 $n\\le m\\le 10^5$ \u8fd9\u6837\u53cb\u597d\u7684\u6570\u636e\u8303\u56f4\uff0c\u770b\u7740\u6570\u989c\u8272\uff0c\u770b\u7740\u6ca1\u6709\u4fee\u6539\u7684\u51c9\u5fc3\u64cd\u4f5c\uff0c\u663e\u7136\u662f\u7528\u83ab\u961f\u561b~  \n\u4f46\u662f\u8fd9\u662f\u5728\u6811\u4e0a\u9e2d\uff0c\u83ab\u961f\u662f\u7ef4\u62a4\u5e8f\u5217\u7684\uff0c\u90a3\u8be5\u600e\u4e48\u529e\uff1f~~\u7528\u83ab\u961f\u7ef4\u62a4\u6811\u5256\uff1f~~  \n\n\u9996\u5148\u6211\u4eec\u8981\u5173\u6ce8\u5230\u4e00\u70b9\uff0c\u6211\u4eec\u8981\u6c42\u7684\u662f **$u$ \u7684\u5b50\u6811**\u7684\u989c\u8272\u3002  \n\u5b66\u8fc7 dfs \u7684\u540c\u5b66\u4eec\u90fd\u77e5\u9053\uff0cdfs \u5e8f\u4e2d**\u6bcf\u4e2a\u5b50\u6811\u7684\u5e8f\u5217\u5fc5\u7136\u8fde\u7eed**\uff0c\u8fd9\u4e2a\u662f dfs \u7684\u4e00\u5927\u663e\u8457\u7279\u70b9\uff0c\u56e0\u4e3a\u5b83\u4f18\u5148\u641c\u7d22\u5b50\u6811\u3002\u5982\u679c\u4e0d\u7406\u89e3\u7684\u8bdd\u53ef\u4ee5\u753b\u4e2a\u56fe\u624b\u52a8\u6a21\u62df\u4e00\u4e0b dfs \u7684\u8fc7\u7a0b\u3002~~\u4f46\u662f\u6211\u61d2\u6240\u4ee5\u6211\u4e0d\u60f3\u753b\u56fe~~  \n\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e dfs \u5e8f\uff0c\u628a\u4e00\u68f5\u6811\u7684\u989c\u8272\u6620\u5c04\u5230\u4e00\u4e2a\u5e8f\u5217\u4e0a\uff01  \n\u5177\u4f53\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u628a $u$ \u7684\u5b50\u6811\u8f6c\u5316\u6210\u4e00\u4e2a\u533a\u95f4\u3002\u5de6\u7aef\u70b9\u5219\u662f $u$ \u7684 dfs \u5e8f\uff0c\u53f3\u7aef\u70b9\u5219\u662f\u904d\u5386\u5b8c $u$ \u7684\u5b50\u6811\u540e\u7684\u7f16\u53f7\u3002\n\n---\n\u7136\u540e\u6211\u4eec\u5e94\u8be5\u6c42\u89e3\u7b54\u6848\u4e86\u3002  \n\u83ab\u961f\u561b\uff0c\u8003\u8651\u65b0\u589e\u548c\u5220\u9664\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u4ee5 $awa_i$ \u4f5c\u4e3a $i$ \u8fd9\u4e2a\u989c\u8272\u51fa\u73b0\u6570\u91cf\uff0c$ovo_i$ \u4e3a\u51fa\u73b0\u6b21\u6570 $\\ge i$ \u7684\u989c\u8272\u6570\u3002  \n\u7136\u540e\u65b0\u589e\u5c31\u662f $awa_{nc_v} +1,ovo_{awa_{nc_v}}+1$  \n\u5220\u9664\u5c31\u662f $ovo_{awa_{nc_v}}-1,awa_{nc_v}-1$  \n\u6211\u4eec\u4f1a\u5f88\u60ca\u5947\u7684\u53d1\u73b0\u65b0\u589e\u548c\u5220\u9664\u7684\u987a\u5e8f\u662f\u53cd\u7740\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u5220\u9664\u7684\u65f6\u5019\uff0c\u5931\u53bb\u7684\u4e0d\u662f $awa_{nc_v}-1$ \u8fd9\u4e2a\u989c\u8272\u6570\uff0c\u800c\u662f $awa_{nc_v}$\uff0c\u8fd9\u5e94\u8be5\u4e5f\u662f\u6709\u4e9b\u4eba WAon4 \u7684\u539f\u56e0\u3002  \n\n---\n\u7136\u540e\u5269\u4e0b\u7684\u5c31\u662f\u83ab\u961f\u677f\u5b50\u4e86\u3002~~\u5982\u679c\u4f60\u4e0d\u4f1a\u83ab\u961f\u4f60\u4e3a\u4ec0\u4e48\u8981\u505a\u8fd9\u9053\u9898~~\uff0c\u4e0a\u4ee3\u7801\uff01\n\n```cpp\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cmath> \nusing namespace std;\nvector<int>gra[100010];\nint dfn[100010],C,cl[100010];\nint nc[100010],ans[100010];\nint awa[100010],ovo[100010];\nint l[100010],r[100010];\nstruct node{//\u67e5\u8be2\n\tint l,r,cl,ind,k;\n}in[100010];\nvoid dfs(int u,int fa)//dfs \u4e00\u904d\uff0c\u6811\u8f6c\u5316\u6210\u5e8f\u5217\n{\n\tl[u]=++C,nc[C]=cl[u];//l \u662f u \u7684\u5de6\u7aef\u70b9\uff0cnc \u662f\u6811\u4e0a\u7684\u989c\u8272\u8f6c\u5316\u6210\u5e8f\u5217\u540e\u7684\u989c\u8272\n\tfor(int p=0;p<gra[u].size();p++)\n\t{\n\t\tint v=gra[u][p];\n\t\tif(v!=fa)\n\t\t\tdfs(v,u);\n\t}\n\tr[u]=C;//r \u662f u \u7684\u53f3\u7aef\u70b9\n}\nbool cmp(node &x,node &y)//\u6392\u5e8f\uff0c\u662f\u5947\u5076\u5757\u6392\u5e8f\n{\n\treturn ((x.cl!=y.cl)?(x.l<y.l):((x.cl&1)?(x.r<y.r):(x.r>y.r)));\n}\nvoid add(int v){++awa[nc[v]],++ovo[awa[nc[v]]];}//\u83ab\u961f\u65b0\u589e\nvoid del(int v){--ovo[awa[nc[v]]],--awa[nc[v]];}//\u83ab\u961f\u5220\u9664\nint main()\n{\n\tint n,m;\n\tcin>>n>>m;\n\tint len=sqrt(n);//\u5757\u957f\n\tfor(int p=1;p<=n;p++)\n\t\tcin>>cl[p];\n\tfor(int p=1,x,y;p<n;p++)\n\t\tcin>>x>>y,gra[x].push_back(y),gra[y].push_back(x);\n\tdfs(1,0);\n\tfor(int p=1,qwq;p<=m;p++)\n\t\tcin>>qwq>>in[p].k,in[p].l=l[qwq],in[p].r=r[qwq],in[p].ind=p,in[p].cl=(l[qwq]-1)/len+1;\n\tsort(in+1,in+m+1,cmp);\n\tint l=1,r=0;\n\tfor(int p=1;p<=m;p++)//\u83ab\u961f\u677f\u5b50\n\t{\n\t\twhile(l<in[p].l)del(l++);\n\t\twhile(l>in[p].l)add(--l);\n\t\twhile(r<in[p].r)add(++r);\n\t\twhile(r>in[p].r)del(r--); \n\t\tans[in[p].ind]=ovo[in[p].k];\n\t}\n\tfor(int p=1;p<=m;p++)\n\t\tcout<<ans[p]<<endl;\n}\n```",
        "postTime": 1612921796,
        "uid": 298549,
        "name": "SIXIANG32",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF375D)\n# \u9898\u76ee\u5927\u610f\n\u7ed9\u51fa\u4e00\u4e2a\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u989c\u8272\uff0c\u6709 $m$ \u6b21\u67e5\u8be2\uff0c\u6bcf\u6b21\u67e5\u8be2\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\u51fa\u73b0\u6b21\u6570 $\\ge k$ \u7684\u989c\u8272\u6709\u591a\u5c11\u4e2a\u3002\n\n$n,m\\le 10^5$\n# \u601d\u8def\n\u4f5c\u4e3a\u622a\u6b62\u81f3 2020-09-07 \u7684\u6700\u4f18\u89e3\uff0c\u8fd9\u91cc\u53d1\u4e00\u7bc7\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\u3002\n\n\u5176\u5b9e\u4e0d\u662f\u5f88\u96be\uff0c\u5c31\u662f\u4e00\u4e2a $\\text{dsu on tree}$ \u7684\u677f\u5b50\uff0c\u5177\u4f53\u64cd\u4f5c\u7684\u65f6\u5019\u9700\u8981\u81ea\u5df1\u60f3\u4e00\u4e0b\uff0c\u7136\u540e\u4f60\u53d1\u73b0\u4f60\u5176\u5b9e\u53ef\u4ee5\u8bb0\u5f55\u5f53\u524d\u5b50\u6811\u5185\u51fa\u73b0\u6b21\u6570 $\\ge k$ \u7684\u989c\u8272\u4e2a\u6570\uff0c\u8fd9\u4e2a\u89c1\u4ee3\u7801\u3002\u7136\u540e\u5c31\u662f\u677f\u5b50\u4e86\u3002\n\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u81ea\u5df1\u8fd9\u4e48\u77ed\u8fd8\u8fd9\u4e48\u5feb\u3002\u3002\u3002\n# $\\texttt{Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define Int register int\n#define MAXN 100005\n\ntemplate <typename T> inline void read (T &t){t = 0;char c = getchar();int f = 1;while (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}while (c >= '0' && c <= '9'){t = (t << 3) + (t << 1) + c - '0';c = getchar();} t *= f;}\ntemplate <typename T,typename ... Args> inline void read (T &t,Args&... args){read (t);read (args...);}\ntemplate <typename T> inline void write (T x){if (x < 0){x = -x;putchar ('-');}if (x > 9) write (x / 10);putchar (x % 10 + '0');}\n\nstruct node{int k,ind;};\nvector <node> que[MAXN];\nint n,m,rt,ind,toop = 1,tot[MAXN],dfn[MAXN],tur[MAXN],col[MAXN],siz[MAXN],son[MAXN],res[MAXN],ans[MAXN],to[MAXN << 1],nxt[MAXN << 1],head[MAXN];\n\nvoid Add_Edge(int u,int v){\n\tto[++ toop] = v,nxt[toop] = head[u],head[u] = toop;\n\tto[++ toop] = u,nxt[toop] = head[v],head[v] = toop;\n}\n\nvoid dfs1 (int u,int fa){\n\tsiz[u] = 1,dfn[u] = ++ ind,tur[ind] = u;\n\tfor (Int i = head[u];i;i = nxt[i]){\n\t\tint v = to[i];\n\t\tif (v == fa) continue;\n\t\tdfs1 (v,u),siz[u] += siz[v];\n\t\tif (siz[v] > siz[son[u]]) son[u] = v;\n\t}\n}\n\nvoid Add (int u){++ res[++ tot[col[u]]];}\n\nvoid dfs2 (int u,int fa,int k){\n\tfor (Int i = head[u];i;i = nxt[i]){\n\t\tint v = to[i];\n\t\tif (v == fa || v == son[u]) continue;\n\t\tdfs2 (v,u,0);\n\t}\n\tif (son[u]) dfs2 (son[u],u,1);\n\tAdd (u);\n\tfor (Int i = head[u];i;i = nxt[i]){\n\t\tint v = to[i];\n\t\tif (v == fa || v == son[u]) continue;\n\t\tfor (Int j = dfn[v];j <= dfn[v] + siz[v] - 1;++ j) Add (tur[j]); \n\t}\n\tfor (node q : que[u]) ans[q.ind] = res[q.k];\n\tif (!k){\n\t\tfor (Int i = 1;i <= siz[u];++ i) res[i] = 0;\n\t\tfor (Int i = dfn[u];i <= dfn[u] + siz[u] - 1;++ i) tot[col[tur[i]]] = 0;\n\t}\n}\n\nsigned main(){\n\tread (n,m);\n\tfor (Int i = 1;i <= n;++ i) read (col[i]);\n\tfor (Int i = 2,u,v;i <= n;++ i) read (u,v),Add_Edge (u,v);\n\tfor (Int i = 1,u,k;i <= m;++ i) read (u,k),que[u].push_back (node {k,i});\n\tdfs1 (1,0),dfs2 (1,0,1);\n\tfor (Int i = 1;i <= m;++ i) write (ans[i]),putchar ('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1599480631,
        "uid": 124781,
        "name": "Walking_Dead",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u9996\u5148\u662f TLE \u89e3\u6cd5\u3002\n\n### **TLE \u89e3\u6cd5**\n\n\u8fd9\u662f\u4e00\u4e2a\u79bb\u7ebf\u7b97\u6cd5\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528 `vector` \u8fd9\u4e2a\u4e1c\u897f\u5b58\u50a8\u6240\u6709\u7684\u8be2\u95ee\u3002\n\n\u6211\u4eec\u8bbe\u5f53\u524d\u989c\u8272 $x$ \u7684\u4e2a\u6570\u4e3a $cnt(x)$ \u3002\u53e6\u5916\uff0c\u8fd8\u53ef\u4ee5\u5047\u8bbe\u6709 $sum(x)$ \u79cd\u989c\u8272\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e86 $x$ \u3002\n\n\u5f53 $cnt(x)$ \u589e\u52a0 1 \u65f6\uff0c$sum(cnt(x)+1)$ \u4e5f\u4f1a\u589e\u52a0 1 \u3002\n\n\u5904\u7406\u7ed3\u70b9 $x$ \u5b50\u6811\u5185\u7684\u6240\u6709\u8be2\u95ee\u53ef\u4ee5\u7528\u4e00\u6b21 `dfs` \u6765\u89e3\u51b3\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#include<vector>\n#define Maxn int(1e5)\nusing namespace std;\ntypedef pair<int,int> Pair;\n\nstruct Node\n{\n\tint to,nxt;\n} Edge[(Maxn<<1)+5];\nint tot,Head[Maxn+5];\n\ninline void Addedge(int x,int y)\n{\n\tEdge[++tot].to=y;\n\tEdge[tot].nxt=Head[x];\n\tHead[x]=tot;\n}\n\nvector<Pair> q[Maxn+5];//\u7528\u4e8e\u5b58\u50a8\u8be2\u95ee \nint n,m,col[Maxn+5],ans[Maxn+5],fa[Maxn+5];\nint cnt[Maxn+5],sum[Maxn+5];\n\ninline void predfs(int x,int f)//\u5148\u7528\u4e00\u6b21dfs\u6c42\u51fa\u7ed3\u70b9\u7684\u7236\u4eb2 \n{\n\tfa[x]=f;\n\tfor(register int i=Head[x];i;i=Edge[i].nxt)\n\t{\n\t\tint y=Edge[i].to;\n\t\tif(y==f) continue;\n\t\tpredfs(y,x);\n\t}\n}\n\ninline void dfs(int x)//\u8fd9\u4e2adfs\u7528\u4e8e\u8ba1\u7b97\u7b54\u6848 \n{\n\tsum[cnt[col[x]]+1]++;\n\tcnt[col[x]]++;\n\tfor(register int i=Head[x];i;i=Edge[i].nxt)\n\t{\n\t\tint y=Edge[i].to;\n\t\tif(y==fa[x]) continue;\n\t\tdfs(y);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);//\u8f93\u5165 \n\tfor(register int i=1;i<=n;++i)\n\t\tscanf(\"%d\",&col[i]);\n\tfor(register int i=1;i<n;++i)\n\t{\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tAddedge(a,b);\n\t\tAddedge(b,a);\n\t}\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tq[a].push_back(make_pair(b,i));\n\t}\n\tpredfs(1,0);\n\tfor(register int i=1;i<=n;++i)//\u5206\u522b\u5904\u7406\u6240\u6709\u8be2\u95ee \n\t{\n\t\tmemset(cnt,0,sizeof(cnt));\n\t\tmemset(sum,0,sizeof(sum));\n\t\tdfs(i);\n\t\tfor(register int j=0;j<q[i].size();++j)//\u79bb\u7ebf\u56de\u7b54\u8be2\u95ee \n\t\t{\n\t\t\tint a=q[i][j].first;\n\t\t\tans[q[i][j].second]=sum[a];\n\t\t}\n\t}\n\tfor(register int i=1;i<=m;++i)\n\t\tprintf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n\n### **AC \u89e3\u6cd5**\n\n\u8fd9\u5c31\u9700\u8981\u7528\u5230 `dsu on tree` \u7684\u601d\u60f3\u3002\n\n\u4e4b\u524d `TLE` \u89e3\u6cd5\u4e2d\u7684\u8bb8\u591a\u4e1c\u897f\u5f88\u503c\u5f97\u6211\u4eec\u501f\u9274\uff0c\u6bd4\u5982\uff1a$sum(x)$ \u548c $cnt(x)$ , \u7528 `vector` \u79bb\u7ebf\u5904\u7406\u8be2\u95ee\uff0c\u7528 `dfs` \u4e00\u904d\u5904\u7406\u67d0\u4e2a\u7ed3\u70b9\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8be2\u95ee\u3002\n\n\u628a\u8fd9\u4e9b\u4e1c\u897f\u642c\u5230 `dsu on tree` \u7684\u6a21\u677f\u4e0a\uff0c\u518d\u7a0d\u5fae\u6539\u52a8\u4e00\u70b9\uff0c\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#include<vector>\n#define Maxn int(1e5)\nusing namespace std;\ntypedef pair<int,int> Pair;\n\nstruct Node\n{\n\tint to,nxt;\n} Edge[(Maxn<<1)+5];\nint tot,Head[Maxn+5];\n\ninline void Addedge(int x,int y)\n{\n\tEdge[++tot].to=y;\n\tEdge[tot].nxt=Head[x];\n\tHead[x]=tot;\n}\n\nvector<Pair> q[Maxn+5];//\u7528\u4e8e\u5904\u7406\u8be2\u95ee \nint n,m,col[Maxn+5],ans[Maxn+5];\nint siz[Maxn+5],son[Maxn+5];\nint cnt[Maxn+5],sum[Maxn+5];\n\ninline void predfs(int x,int f)//\u4e4b\u524d\u7684dfs\u7528\u4e8e\u6c42\u91cd\u513f\u5b50 \n{\n\tsiz[x]=1;\n\tfor(register int i=Head[x];i;i=Edge[i].nxt)\n\t{\n\t\tint y=Edge[i].to;\n\t\tif(y==f) continue;\n\t\tpredfs(y,x);\n\t\tsiz[x]+=siz[y];\n\t\tif(siz[y]>siz[son[x]])\n\t\t\tson[x]=y;\n\t}\n}\n\nint flag;\ninline void Count(int x,int f,int k)\n{\n\tif(k==1)//\u8fd9\u91cc\u7684\u5206\u7c7b\u8ba8\u8bba\u9700\u8981\u6ce8\u610f \n\t{\n\t\tsum[cnt[col[x]]+k]++;\n\t}\n\tif(k==-1)\n\t{\n\t\tsum[cnt[col[x]]]--;\n\t}\n\tcnt[col[x]]+=k;\n\tfor(register int i=Head[x];i;i=Edge[i].nxt)\n\t{\n\t\tint y=Edge[i].to;\n\t\tif(y==f || y==flag)\n\t\t\tcontinue;\n\t\tCount(y,x,k);\n\t}\n}\n\ninline void dfs(int x,int f,int typ)//dsu on tree\n{\n\tfor(register int i=Head[x];i;i=Edge[i].nxt)\n\t{\n\t\tint y=Edge[i].to;\n\t\tif(y==f || y==son[x])\n\t\t\tcontinue;\n\t\tdfs(y,x,0);\n\t}\n\tif(son[x])\n\t{\n\t\tdfs(son[x],x,1);\n\t\tflag=son[x];\n\t}\n\tCount(x,f,1);\n\tflag=0;\n\tfor(register int i=0;i<q[x].size();++i)//\u79bb\u7ebf\u56de\u7b54\u8be2\u95ee \n\t{\n\t\tint y=q[x][i].first;\n\t\tans[q[x][i].second]=sum[y];\n\t}\n\tif(typ==0)\n\t{\n\t\tCount(x,f,-1);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=n;++i)\n\t\tscanf(\"%d\",&col[i]);\n\tfor(register int i=1;i<n;++i)\n\t{\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tAddedge(a,b);\n\t\tAddedge(b,a);\n\t}\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tq[a].push_back(make_pair(b,i));\n\t}\n\tpredfs(1,0);\n\tdfs(1,0,0);\n\tfor(register int i=1;i<=m;++i)\n\t\tprintf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1594818045,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u6709\u4e00\u79cd\u6781\u5176\u9ebb\u70e6\u7684\u65b9\u6cd5\u2026\u2026\n\n\u9996\u5148\u770b\u4e86\u9898\u5c31\u77e5\u9053\u662f\u83ab\u961f\u3002\u6211\u592a\u83dc\u4e0d\u77e5\u9053\u600e\u4e48\u7ef4\u62a4\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u7b49\u4e8e $x$ \u7684\u503c\u7684\u4e2a\u6570\uff0c\u7ed3\u679c\u7528\u4e86\u4e00\u79cd\u9ebb\u70e6\u5e38\u6570\u53c8\u5927\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u503c\u57df\u5206\u5757\u3002\n\n\u4f46\u662f\u6ce8\u610f\uff0c\u5206\u7684\u5757\u662f\u9488\u5bf9\u201c\u51fa\u73b0\u6b21\u6570\u201d\u800c\u8a00\u7684\u3002\u5177\u4f53\u5730\uff0c\u6211\u4eec\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u5148\u5728\u5206\u5757\u7ed3\u6784\u4e0a\u8ba9 $cnt_{s_x}$ \u51cf\u4e00\uff0c\u7136\u540e\u5728\u5206\u5757\u7ed3\u6784\u4e0a\u8ba9 $cnt_{news_x}$ \u52a0\u4e00\u3002\u89c6\u60c5\u51b5\uff0c$news_x=s_x+1$ \u6216 $-1$\u3002\n\n\u7136\u540e\u83ab\u961f\u7684\u65f6\u5019\u53c8\u5f88 sb \u5730\u5199\u9519\u4e86\u8fd9\u4e2a\u5730\u65b9\u5bfc\u81f4 TLE\uff0c\u8fd8\u4ee5\u4e3a\u662f\u5e38\u6570\u5927\u4e86\uff0c\u8c03\u4e86\u5f88\u4e45\uff1a\n\n```cpp\nstruct Query{\n\tint l,r,k,id;\n\tbool operator <(const Query yy) const {\n\t\treturn bel[l]==bel[yy.l]?bel[l]>bel[yy.l]:r<yy.r;\n\t}\n}q[100005];\n```\n\n\u6781\u5176\u4e11\u964b\u3001\u9ebb\u70e6\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<queue>\n#include<cstring> \nusing namespace std;\nstruct Edge{\n\tint to,next;\n}e[200005];\nint cnt,h[100005],n,m,val[100005],to[100005],ccnt[100005],fk[100005],st[100005],ed[100005];\nint vp[100005],sign,ans[100005],L[100005],R[100005],bel[100005],cntt[100005],ALL;\nstruct Query{\n\tint l,r,k,id;\n\tbool operator <(const Query yy) const {\n\t\treturn bel[l]==bel[yy.l]?bel[l]>bel[yy.l]:r<yy.r;\n\t}\n}q[100005];\nvoid Add_Edge(int x,int y) {\n\te[++cnt].next=h[x];\n\te[cnt].to=y;\n\th[x]=cnt;\n}\nvoid DFS(int now,int fa){\n\tL[now]=++sign,vp[sign]=val[now];\n\tfor(int i=h[now];i;i=e[i].next){\n\t\tint y=e[i].to;\n\t\tif(y^fa)DFS(y,now);\n\t}\n\tR[now]=sign;\n}\nvoid Add(int x){\n\tccnt[cntt[vp[x]]]--;\n\tfk[bel[cntt[vp[x]]]]--;\n\tcntt[vp[x]]++;\n\tccnt[cntt[vp[x]]]++;\n\tfk[bel[cntt[vp[x]]]]++;\n}\nvoid Del(int x){\n\tccnt[cntt[vp[x]]]--;\n\tfk[bel[cntt[vp[x]]]]--;\n\tcntt[vp[x]]--;\n\tccnt[cntt[vp[x]]]++;\n\tfk[bel[cntt[vp[x]]]]++;\n}\nint Query(int k){\n\tint ret=0;\n\tfor(int i=k;i<=ed[bel[k]];i++)ret+=ccnt[i];\n\tfor(int i=bel[k]+1;i<=ALL;i++)ret+=fk[i];\n\treturn ret;\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tint blk=sqrt(n);\n\tALL=n/blk;\n\tfor(int i=1;i<=ALL;i++){\n\t\tst[i]=(i-1)*blk+(i!=1),ed[i]=(i==ALL?n:i*blk);\n\t\tfor(int j=st[i];j<=ed[i];j++)bel[j]=i;\n\t}\n\tfor(int i=1,tot=0;i<=n;i++){\n\t\tscanf(\"%d\",&val[i]);\n\t\tif(to[val[i]])val[i]=to[val[i]];\n\t\telse to[val[i]]=++tot,val[i]=to[val[i]];\n\t}\n\t\n\tfor(int i=1,x,y;i<n;i++){\n\t\tscanf(\"%d%d\",&x,&y),Add_Edge(x,y),Add_Edge(y,x);\n\t}\n\tDFS(1,0);\n\tfor(int i=1,x;i<=m;i++)scanf(\"%d%d\",&x,&q[i].k),q[i].l=L[x],q[i].r=R[x],q[i].id=i;\n\tsort(q+1,q+m+1);\n\tint l=1,r=0;\n\tccnt[0]=n;\n\tfor(int i=1;i<=m;i++){\n\t\twhile(l<q[i].l)Del(l++);\n\t\twhile(r>q[i].r)Del(r--);\n\t\twhile(l>q[i].l)Add(--l);\n\t\twhile(r<q[i].r)Add(++r);\n\t\tans[q[i].id]=Query(q[i].k);\n\t}\n\tfor(int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1583847902,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u6811\u4e0a\u6570\u989c\u8272\uff0c\u56e0\u4e3a\u662f\u67e5\u8be2\u5b50\u6811\uff0c\u6240\u4ee5\u7528 $dfn$ \u5e8f\u5c06\u6811\u4e0a\u95ee\u9898\u8f6c\u5316\u4e3a\u5e8f\u5217\u95ee\u9898\uff0c\u7136\u540e\u5c31\u662f\u88f8\u7684\u83ab\u961f\u6570\u989c\u8272\u4e86\u3002\n\n\u7edf\u8ba1\u7b54\u6848\u65f6\u8fd8\u9700\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff0c\u5b9e\u73b0\u5c31\u770b\u4ee3\u7801\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt{n})$\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 200010\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n\tx=0;char c=getchar();bool flag=false;\n\twhile(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n\twhile(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\tif(flag)x=-x;\n}\nint n,m,block,l=1,r,tot;\nint a[maxn],c[maxn],cnt[maxn],ans[maxn],num[maxn];\nstruct query\n{\n    int l,r,id,pos,ask;\n}q[maxn];\nbool cmp(query a,query b)\n{   \n    return a.pos==b.pos?(a.pos&1?a.r<b.r:a.r>b.r):a.pos<b.pos;\n}\nstruct edge\n{\n    int to,nxt;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to)\n{\n    e[++edge_cnt]=(edge){to,head[from]};\n    head[from]=edge_cnt;\n}\nint dfn_cnt;\nint siz[maxn],dfn[maxn];\nvoid dfs(int x)\n{\n    siz[x]=1;\n    dfn[x]=++dfn_cnt;\n    c[dfn_cnt]=a[x];\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(dfn[y]) continue;\n        dfs(y);\n        siz[x]+=siz[y];\n    }\n}\nvoid update(int x,int p)\n{\n    x=c[x];\n    cnt[x]+=p;\n    if(~p) num[cnt[x]]++;\n    else num[cnt[x]+1]--;\n}\nint main()\n{\n\tread(n),read(m);\n    block=sqrt(n);\n    for(int i=1;i<=n;++i) read(a[i]);\n    for(int i=1;i<n;++i)\n    {\n        int a,b;\n        read(a),read(b);\n        add(a,b),add(b,a);\n    }\n    dfs(1);\n    for(int i=1;i<=m;++i)\n    {\n        int root;\n        read(root),read(q[i].ask);\n        q[i].l=dfn[root],q[i].r=dfn[root]+siz[root]-1;\n        q[i].id=i,q[i].pos=q[i].l/block;\n    }\n    sort(q+1,q+m+1,cmp);\n    for(int i=1;i<=m;++i)\n    {\n        int ql=q[i].l,qr=q[i].r,id=q[i].id,ask=q[i].ask;\n        while(l<ql) update(l++,-1);\n        while(r>qr) update(r--,-1);\n        while(l>ql) update(--l,1);\n        while(r<qr) update(++r,1);\n        ans[id]=num[ask];\n    }\n    for(int i=1;i<=m;++i) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n\n```",
        "postTime": 1576314326,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u6bcf\u6b21\u67e5\u8be2\u5b50\u6811\u5185\u7684\u4fe1\u606f\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528 $\\text{DFS}$ \u5e8f\u628a\u5b83\u8f6c\u5316\u6210\u5e8f\u5217\u7684\u95ee\u9898\u3002\n\n\u6211\u4eec\u8003\u8651\u6bcf\u6b21\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u5185\u51fa\u73b0\u6b21\u6570 $\\geq k$ \u7684\u989c\u8272\u6570\uff0c\u663e\u7136\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u7528\u83ab\u961f\u6c42\u89e3\n\n\u6211\u4eec\u7528 $\\text{cnt[k]}$ \u8868\u793a\u51fa\u73b0\u6b21\u6570 $\\geq k$ \u7684\u989c\u8272\u6570\uff0c\u7528 $v[i]$ \u4ee3\u8868\u989c\u8272 $i$ \u51fa\u73b0\u7684\u6b21\u6570\n\n\u663e\u7136\u6211\u4eec\u5728\u83ab\u961f\u79fb\u52a8\u4e00\u6b21\u6307\u9488\u65f6\u53ef\u4ee5\u5728 $O(1)$ \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u66f4\u65b0\uff0c\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt{n})$\n\n\u6ce8\u610f\u6211\u4eec\u4e4b\u540e\u7684\u66f4\u65b0\u90fd\u662f\u5728\u5b57\u5178\u5e8f\u4e0a\uff0c\u8981\u7edf\u8ba1\u51fa\u5728\u5b57\u5178\u5e8f\u4e0a\u5bf9\u5e94\u6bcf\u4e2a\u8282\u70b9\u7684\u989c\u8272\n\n**Code:**\n\n```cpp\n#include<bits/stdc++.h>\n \n#define rd(x) x=read()\n \n#define N 200005\n \nusing namespace std;\n\nint n,m;\nvector<int>e[N];\nint l[N],r[N];\nint c[N],d[N];\nint bel[N],cnt[N],v[N],ans[N];\n\nstruct Q{\n\tint l,r,k,id;\n\tQ(int _l=0,int _r=0,int _k=0,int _id=0){l=_l,r=_r,k=_k,id=_id;}\n}q[N];\nint dfn;\n\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\n \ninline void write(int x)\n{\n    if(x<0){putchar('-');x=-x;}\n    if(x>=10)write(x/10);\n    putchar(x%10+'0');\n}\n\nvoid dfs(int u,int fa)\n{\n\tl[u]=++dfn,d[dfn]=c[u];\n\tfor(int i=0;i<e[u].size();i++)\n\t{\n\t\tint v=e[u][i];\n\t\tif(v==fa)continue;\n\t\tdfs(v,u);\n\t}\n\tr[u]=dfn;\n}\n\ninline bool cmp(Q s,Q t){if(bel[s.l]!=bel[t.l])return bel[s.l]<bel[t.l];return s.r<t.r;}\n \ninline void add(int i){++v[d[i]],++cnt[v[d[i]]];}\n \ninline void del(int i){--cnt[v[d[i]]],--v[d[i]];}\n\ninline void addEdge(int u,int v){e[u].push_back(v);}\n \nint main()\n{\n\trd(n),rd(m);for(int i=1;i<=n;i++)rd(c[i]);\n\tint size=(int)sqrt(n);for(int i=1;i<=n;i++)bel[i]=(i-1)/size+1;\n\tfor(int i=1,u,v;i<n;i++)rd(u),rd(v),addEdge(u,v),addEdge(v,u);dfs(1,0);\n\tfor(int i=1,x,k;i<=m;i++)rd(x),rd(k),q[i]=Q(l[x],r[x],k,i);sort(q+1,q+m+1,cmp);\n\tint l=1,r=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\twhile(l<q[i].l)del(l++);while(l>q[i].l)add(--l);\n\t\twhile(r<q[i].r)add(++r);while(r>q[i].r)del(r--);\n\t\tans[q[i].id]=cnt[q[i].k];\n\t}\n\tfor(int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n \n \n    return 0;\n}\n```",
        "postTime": 1574511919,
        "uid": 53807,
        "name": "Erusel",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u5e7f\u544a\uff1a\u6211\u7684[\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u603b\u7ed3](https://blog.csdn.net/pb122401/article/details/84648993)\n\n\u8fde\u7740\u4e24\u7bc7\u83ab\u961f\u9898\u89e3\uff0c\u90a3\u6211\u6765\u53d1\u4e00\u7bc7\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\n\n\u8fd9\u9898\u4e00\u770b\u6570\u989c\u8272\uff1a\u65e0\u8111\u542f\u53d1\u5f0f\u5408\u5e76\u641e\u4e0a\u53bb\uff01\u518d\u4e00\u770b\uff1a\u5927\u4e8e\u7b49\u4e8ek\u7684\uff1f\uff1f\u61f5\u903c\u4e86\n\n\u601d\u8003\u4e00\u4e0b\uff0c\u53d1\u73b0\u8fd9\u9898\u53ea\u9700\u8981\u518d\u5957\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4sum\u5373\u53ef\uff0c\u6811\u72b6\u6570\u7ec4\u6216\u7ebf\u6bb5\u6811\u5747\u53ef\n\n\u9119\u4eba\u4e0d\u624d\uff0c\u8111\u5b50\u4e00\u62bd\uff0c\u5199\u4e86\u53c8\u957f\u53c8\u6162\u7684\u7ebf\u6bb5\u6811\n\n```cpp\n#include<bits/stdc++.h>\n#define sz 100020\n#define mod 998244353\nusing namespace std;\ntypedef long long ll;\nint n;\nint col[sz];\nstruct hh{int t,nxt;}edge[sz<<1];\nint head[sz],ecnt;\nvoid make_edge(int f,int t)\n{\n\tedge[++ecnt]=(hh){t,head[f]};\n\thead[f]=ecnt;\n\tedge[++ecnt]=(hh){f,head[t]};\n\thead[t]=ecnt;\n}\n#define go(x) for (int i=head[x];i;i=edge[i].nxt)\n#define v edge[i].t\nint tr[sz<<2];\n#define lson k<<1,l,mid\n#define rson k<<1|1,mid+1,r\nvoid add(int k,int l,int r,int x,int w)\n{\n\ttr[k]+=w;\n\tif (l==r) return;\n\tint mid=(l+r)>>1;\n\tif (x<=mid) add(lson,x,w);\n\telse add(rson,x,w);\n}\nint query(int k,int l,int r,int x,int y)\n{\n\tif (x<=l&&r<=y) return tr[k];\n\tint mid=(l+r)>>1,ret=0;\n\tif (x<=mid) ret+=query(lson,x,y);\n\tif (y>mid) ret+=query(rson,x,y);\n\treturn ret;\n}\nint size[sz],son[sz];\nvoid dfs1(int x,int fa)\n{\n\tsize[x]=1;\n\tgo(x) if (v!=fa)\n\t{\n\t\tdfs1(v,x);\n\t\tsize[x]+=size[v];\n\t\tif (size[v]>size[son[x]]) son[x]=v;\n\t}\n}\n#define pii pair<int,int>\n#define MP make_pair\n#define fir first\n#define sec second\nvector<pii>q[sz];\nint ans[sz];\nint cnt[sz];\nint S;\nvoid add(int x,int fa,int t)\n{\n\tadd(1,1,n,cnt[col[x]]+1,-1);\n\tcnt[col[x]]+=t;\n\tadd(1,1,n,cnt[col[x]]+1,1);\n\tgo(x) if (v!=fa&&v!=S) add(v,x,t);\n}\nvoid dfs2(int x,int fa,bool keep)\n{\n\tgo(x) if (v!=fa&&v!=son[x]) dfs2(v,x,0);\n\tif (son[x]) dfs2(son[x],x,1);\n\tS=son[x];\n\tadd(x,fa,1);\n\tfor (int i=0;i<(int)q[x].size();i++) ans[q[x][i].fir]=query(1,1,n,q[x][i].sec+1,n);\n\tS=0;\n\tif (!keep) add(x,fa,-1);\n}\nint main()\n{\n\tios::sync_with_stdio(0);\n\tint i,x,y,m;\n\tcin>>n>>m;\n\tfor (i=1;i<=n;i++) cin>>col[i];\n\tfor (i=1;i<n;i++) cin>>x>>y,make_edge(x,y);\n\tfor (i=1;i<=m;i++) cin>>x>>y,q[x].push_back(MP(i,y));\n\tdfs1(1,0);dfs2(1,0,1);\n\tfor (i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);\n}\n```\n\n\u9644\uff1a\u81f4\u5c0a\u656c\u7684\u7ba1\u7406\u5458\uff1a\u53e6\u4e24\u7bc7\u90fd\u662f\u83ab\u961f\uff0c\u8fd9\u5c31\u7ed9\u4e2a\u901a\u8fc7\u5457",
        "postTime": 1543323588,
        "uid": 76481,
        "name": "p_b_p_b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u56e0\u4e3a\u8981\u5904\u7406\u5b50\u6811\u4fe1\u606f\uff0c\u6240\u4ee5\u7528[\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76](https://oi-wiki.org/graph/dsu-on-tree/)\u3002\n\n\u7136\u540e\u5c31\u548c\u677f\u5b50\uff08\u6c42\u5b50\u6811\u4e0a\u51fa\u73b0\u6700\u591a\u7684\u989c\u8272\uff09\u5dee\u4e0d\u591a\u3002\n\n\u56e0\u4e3a\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u662f\u79bb\u7ebf\uff0c\u6240\u4ee5\u628a\u8be2\u95ee\u653e\u5230\u70b9\u4e0a\uff0c\u904d\u5386\u5230\u7684\u65f6\u5019\u628a\u7b54\u6848\u5b58\u4e0b\u6765\u3002\n\n\u8bb0\u5f55\u4e24\u4e2a\u503c\uff0c\u4e00\u4e2a\u662f\u989c\u8272$i$\u51fa\u73b0\u7684\u6b21\u6570\uff08$vst[i]$\uff09\uff0c\u4e00\u4e2a\u662f\u51fa\u73b0\u6b21\u6570$\\geq i$\u7684\u989c\u8272\u7684\u79cd\u6570\uff08$f[i]$\uff09\u3002\n\n**\u5982\u4f55\u6c42$f[i]$\uff1a** \u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u904d\u5386$vst[i]$\uff0c\u6240\u4ee5\u5c31\u8003\u8651\u5728\u6bcf\u6b21\u4fee\u6539$vst[c]$\uff08c\uff1a\u5f53\u524d\u8282\u70b9\u989c\u8272\uff09\u65f6\u6539\uff0c\u8bbe\u4fee\u6539\u540e\u7684\u503c\u662fk\uff0c\u6240\u4ee5$f[1]$~$f[k]$\u90fd\u5e94\u8be5\u5305\u542bc\uff0c\u4f46\u4e0a\u4e00\u6b21\u4fee\u6539$vst[c]$\u65f6\u5df2\u7ecf\u8ba9$f[1]$~$f[k-1]$\u5305\u542bc\u4e86\uff0c\u6240\u4ee5\u8fd9\u6b21\u8ba9$f[k]$\u5305\u542bc\u5c31\u884c\u4e86\u3002\u8fd9\u6837\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u91cd\u590d\u3002\n\nAC\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int M=1e5+5;\nint Head[M],Nxt[M*2],To[M*2],TOT,sz[M],son[M];ll c[M];\nvector<pair<int,int> > ques[M];\nint ADD(int x,int y){\n\tNxt[++TOT]=Head[x];Head[x]=TOT;To[TOT]=y;\n}\nvoid dfs_basic(int x,int fa){//\u6c42\u51fasz[x]\u548cson[x]\n\tsz[x]=1;\n\tfor(int i=Head[x];i;i=Nxt[i]){\n\t\tif(To[i]==fa)continue;\n\t\tdfs_basic(To[i],x);\n\t\tsz[x]+=sz[To[i]];\n\t\tif(sz[To[i]]>sz[son[x]])son[x]=To[i];\n\t}\n}\nint vst[M],ans[M],f[M];\nvoid search(int x,int fa,int opt,int notto){//\u66b4\u529b\u5730\u904d\u5386\u8f7b\u513f\u5b50\n\tif(opt){\n\t\tvst[c[x]]++;f[vst[c[x]]]++;\n   //}else vst[c[x]]=0,f[vst[c[x]]]=0;//f[]\u8981\u4e00\u4e2a\u4e00\u4e2a\u5220\n\t}else f[vst[c[x]]]=0,vst[c[x]]--;\n\tfor(int i=Head[x];i;i=Nxt[i]){\n\t\tint y=To[i];if(y==fa||y==notto)continue;\n\t\tsearch(y,x,opt,notto);\n\t}\n}\nvoid dfs_main(int x,int fa,int opt){//\u904d\u5386x\uff0c\u6c42\u7b54\u6848\n\tfor(int i=Head[x];i;i=Nxt[i]){\n\t\tint y=To[i];if(y==fa)continue;\n\t\tif(y!=son[x])dfs_main(y,x,0);\n\t}\n\tif(son[x])dfs_main(son[x],x,1);\n\tsearch(x,fa,1,son[x]);for(int i=0;i<ques[x].size();i++)ans[ques[x][i].second]=f[ques[x][i].first];\n\tif(!opt)search(x,fa,0,0);\n}\nll cc[M];\nvoid lsh(int n){//\u79bb\u6563\u5316\n\tfor(int i=1;i<=n;i++)cc[i]=c[i];\n\tsort(cc+1,cc+n+1);int nn=unique(cc+1,cc+n+1)-cc-1;\n\tfor(int i=1;i<=n;i++)c[i]=lower_bound(cc+1,cc+nn+1,c[i])-cc;\n}\nint main(){\n\tint n,m,a,b;scanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)scanf(\"%lld\",&c[i]);\n\tlsh(n);\n\tfor(int i=1;i<=n-1;i++)scanf(\"%d%d\",&a,&b),ADD(a,b),ADD(b,a);\n\tfor(int i=1;i<=m;i++)scanf(\"%d%d\",&a,&b),ques[a].push_back(make_pair(b,i));\n\tdfs_basic(1,0);\n\tdfs_main(1,0,1);\n\tfor(int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n} \n```",
        "postTime": 1613989858,
        "uid": 151712,
        "name": "\u4e00\u67b6\u98de\u673a",
        "ccfLevel": 0,
        "title": "CF375D Tree and Queries \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF375D)\n\n---\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u591a\u4eba\u5199\u83ab\u961f~~\u6839\u53f7\u4e07\u5c81~~\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u9898\u76ee\u4e0d\u9700\u8981\u4fee\u6539\uff0c\u53ef\u4ee5\u79bb\u7ebf\u5904\u7406\u3002\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u7528 $\\text{DSU on tree}$ \u6765\u7ef4\u62a4\u989c\u8272\u51fa\u73b0\u6b21\u6570\u3002\n\n\u4f46\u9898\u76ee\u8981\u6c42\u8981\u627e\u51fa\u73b0\u6b21\u6570\u6bd4 $\\text k$ \u5927\u7684\u6b21\u6570\u3002\n\n\u81ea\u7136\uff0c\u4f60\u53ef\u4ee5\u66b4\u529b\uff0c\u4f46\u8fd9\u6837\u4f1a\u8d85\u65f6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528 $\\text{BIT}$ \u6765\u7ef4\u62a4\u51fa\u73b0\u6b21\u6570~~\u8c8c\u4f3c\u53ef\u4ee5\u503c\u57df\u5206\u5757~~\u3002\n\n```cpp\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define lowbit(x) (x & -x)\nusing namespace std;\ntemplate<typename T>void read(T &x) {\n\tx = 0;T f = 1;char ch = getchar();\n\twhile (!isdigit(ch)) {if (ch == '-') f = -1;ch = getchar();}\n\twhile (isdigit(ch)) {x = (x << 3) + (x << 1) + ch - '0';ch = getchar();}\n\tx *= f;\n}\ntemplate<typename T>void print(T x) {\n\tif (x < 0) putchar('-'),x = -x;\n\tif (x > 9) print(x / 10);\n\tputchar(x % 10 + '0');\n}\ntemplate<typename T>T Min(T x,T y) {return x < y ? x : y;}\ntemplate<typename T>T Max(T x,T y) {return x > y ? x : y;}\ntemplate<typename T>T Abs(T x) {return x < 0 ? -x : x;}\n\nconst int maxn = 1e5 + 5;\n\nint nxt[maxn << 1],ver[maxn << 1],head[maxn],tot;\nvoid addEdge(int u,int v) {\n\tnxt[++ tot] = head[u];ver[tot] = v;head[u] = tot;\n}\nvector<pair<int,int> > q[maxn];\nint n,m,col[maxn],sz[maxn],son[maxn],cnt[maxn],ans[maxn],dep[maxn],tree[maxn],sum,maxx,Son;\nvoid update(int x,int y) {\n\tfor ( ; x <= n + 1 ; x += lowbit(x)) tree[x] += y;\n}\nint query(int x) {\n\tint res = 0;\n\tfor ( ; x ; x -= lowbit(x)) res += tree[x];\n\treturn res;\n}\nvoid dfs1(int u,int f) {\n\tsz[u] = 1;\n\tint maxson = -1;\n\tfor(int i = head[u] ; i ; i = nxt[i]) {\n\t\tint v = ver[i];\n\t\tif (v == f) continue;\n\t\tdfs1(v,u);\n\t\tsz[u] += sz[v];\n\t\tif(sz[v] > maxson) maxson = sz[v],son[u] = v;\n\t}\n}\nvoid change(int u,int fa,int val) {\n\tupdate(cnt[col[u]] + 1,-1);\n\tcnt[col[u]] += val;\n\tupdate(cnt[col[u]] + 1,1);\n\tfor (int i = head[u] ; i ; i = nxt[i]) {\n\t\tint v = ver[i];\n\t\tif (v == Son || v == fa) continue;\n\t\tchange(v,u,val);\n\t}\n}\nvoid dfs2(int u,int fa,int op) {\n\tfor (int i = head[u] ; i ; i = nxt[i]) {\n\t\tint v = ver[i];\n\t\tif (v == son[u] || v == fa) continue;\n\t\tdfs2(v,u,0);\n\t}\n\tif (son[u]) dfs2(son[u],u,1),Son = son[u];\n\tchange(u,fa,1);\n\tfor (int i = 0 ; i < q[u].size() ; ++ i) ans[q[u][i].second] = query(n + 1) - query(q[u][i].first);\n\tSon = 0;\n\tif (!op) change(u,fa,-1);\n}\nsigned main () {\n\tread(n);read(m);\n\tint u,v;\n\tfor (int i = 1 ; i <= n ; ++ i) read(col[i]);\n\tfor (int i = 1 ; i < n ; ++ i) {\n\t\tread(u);read(v);\n\t\taddEdge(u,v);\n\t\taddEdge(v,u);\n\t}\n\tfor (int i = 1 ; i <= m ; ++ i) {\n\t\tread(u);read(v);\n\t\tq[u].push_back(make_pair(v,i));\n\t}\n\tdfs1(1,0);\n\tdfs2(1,0,0);\n\tfor (int i = 1 ; i <= m ; ++ i) print(ans[i]),putchar('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1599481588,
        "uid": 163516,
        "name": "Strelitzia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "\u6709\u4eba\u8bf4\uff1a\u6211\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u5408\u5e76\n\n\u6709\u4eba\u8bf4\uff1a\u6211\u4e0d\u4f1a\u6811\u5256\n\n~~\uff08\u8fd9\u79cd\u4eba\u5168\u4e16\u754c\u5c31\u6211\u4e00\u4e2a\u5427\uff09~~\n\n\u6240\u4ee5\u6211\n### \u63d0\u4f9b\u4e00\u79cd dsu on tree \u505a\u6cd5\n\n\u4e0d\u61c2dsu on tree\u7684\u8bf7\u6233[\u8fd9\u91cc](https://www.luogu.com.cn/blog/Feliks-YB/solution-cf600e)\n\n\u8fd9\u9898\u6c42\u7684\u662f\u8282\u70b9\u6700\u503c\uff0c\u7c7b\u4f3cdsu on tree\n\n\u4f46dsu on tree\u9002\u7528\u4e8e\u5b50\u6811\u6700\u503c\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u628a\u8282\u70b9\u6700\u503c\u8f6c\u5316\u4e3a\u5b50\u6811\u6700\u503c\u2014\u2014**\u6811\u4e0a\u5dee\u5206**\uff01\n\n\u5373\n\n\u628a$i$\u5230$j$\u8def\u5f84\u4e0a\u7684\u70b9 $ + x$ \u53d8\u6210\u5bf9 $i,j+x$,\u5bf9 $lca(i,j)$ \u548c $fa_{lca(i,j)}-x$\n\n\u8fd9\u6837\u6bcf\u4e2a\u70b9\u6700\u7ec8\u7684\u7b54\u6848\u5c31\u662f\u5176**\u5b50\u6811\u7684\u548c**\uff08\u624b\u52a8\u6a21\u62df\u5373\u53ef\u7406\u89e3\uff09\n\n\u7136\u540e\u5c31\u662f\u88f8\u7684 dsu on tree \u4e86\n\n### \u6ce8\u610f\n\n\u7ef4\u62a4\u6700\u5927\u503c\u65f6\u8981\u683c\u5916\u5c0f\u5fc3\uff0c\u56e0\u4e3a\u6811\u4e0a\u5dee\u5206\u53ef\u80fd\u4e3a\u8d1f\uff0c\u7edf\u8ba1\u7269\u8d44\u8fc7\u7a0b\u4e2d\u67d0\u7269\u8d44\u7684\u5b50\u6811\u548c\u53ef\u80fd\u51cf\u5c0f\uff0c\u51cf\u5c0f\u65f6\u5e94\u8fdb\u884c\u7279\u5224\uff0c\u5982\u679c\u6700\u5927\u503c\u51cf\u5c0f\uff0c\u8981 --mx \n\u76f4\u81f3\u5b58\u5728\u4e2a\u6570\u4e3a mx \u7684\u7269\u8d44\n\n\u65f6\u95f4\u8f83\u5bbd\u88d5\uff0c\u6211 ~~\uff08\u8111\u62bd\uff09~~ \u7528\u4e86\u4e00\u5806 STL\uff0c\u603b\u590d\u6742\u5ea6  $O((n+m)log^2n)$\n\n```cpp\n//coder: Feliks a Hacker of IOI == GM-YB an AKer of IMO\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+5;\nint n,m;\ninline int read(){\n\tint x=0;char ch=getchar();\n\twhile(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n\treturn x;\n}int v[N],nex[N],first[N],tot;\nqueue<int> q;\nint d[N],fa[21][N>>1],t;\ninline void adde(int x,int y){\n\tv[++tot]=y;\n\tnex[tot]=first[x];\n\tfirst[x]=tot;\n}namespace LCA{\n\tinline void bfs(){\n\t\twhile(!q.empty()){\n\t\t\tint x=q.front();q.pop();\n\t\t\tfor(int i=first[x];i;i=nex[i]){\n\t\t\t\tint y=v[i];if(d[y])continue;\n\t\t\t\td[y]=d[x]+1;q.push(y);fa[0][y]=x;\n\t\t\t\tfor(int j=1;j<=t;j++)\n\t\t\t\t\tfa[j][y]=fa[j-1][fa[j-1][y]];\n\t\t\t}\n\t\t}\n\t}inline int lca(int x,int y){\n\t\tif(x==y)return x;\n\t\tif(d[x]<d[y])swap(x,y);\n\t\t//d[x] > d[y]\n\t\tfor(int i=t;i>=0;i--)\n\t\t\tif(d[fa[i][x]]>=d[y])x=fa[i][x];\n\t\tif(x==y)return x;\n\t\tfor(int i=t;i>=0;i--)\n\t\t\tif(fa[i][x]!=fa[i][y])x=fa[i][x],y=fa[i][y];\n\t\treturn fa[0][x];\n\t}\n}using namespace LCA;\nbool gson[N];//\u91cd\u513f\u5b50\u6807\u8bb0 \nint sz[N]; //\u5b50\u6811\u5927\u5c0f \nvoid getg(int x,int f){//work out the great-sons\n    int mxx=0,p=0;sz[x]=1;\n    for(int i=first[x];i;i=nex[i]){\n        int y=v[i];if(y==f)continue;\n        getg(y,x);sz[x]+=sz[y];\n        if(sz[y]>mxx)mxx=sz[y],p=y;\n    }if(p)gson[p]=1;\n}map<int,int> cf[N];//\u6811\u4e0a\u5dee\u5206\nmap<int,int> mp;//hash the items\nint num;//the number of the variety of the items (for hash)\nint anti[N];//\u53cd\u6620\u5c04\nint cnt[N],ans[N],mx;\n//cnt[i]: the current number of the i-th item during dfs\nset<int> st[N];//st[i]\u8bb0\u5f55\u6240\u6709cnt[j]=i\u7684j \ninline void add(int x,int s){\n\tfor(map<int,int>::iterator it=cf[x].begin();it!=cf[x].end();it++){\n\t\tint a=(*it).first,b=cnt[a];\n\t\tif(b>=0)st[b].erase(anti[a]);\n\t\tcnt[a]+=s*((*it).second);\n\t\tif(cnt[a]>=0)st[cnt[a]].insert(anti[a]);\n\t\tif(cnt[a]>=b)if(cnt[a]>mx)mx=cnt[a];\n\t\tif(cnt[a]<b && b==mx)while(mx && st[mx].empty())mx--;\n\t}\n}void init(int x,int f){\n    for(int i=first[x];i;i=nex[i]){\n        int y=v[i];if(y==f)continue;\n        init(y,x);\n    }add(x,-1);\n}inline void getans(int x,int f,int p){\n    for(int i=first[x];i;i=nex[i]){\n        int y=v[i];if(y==f || y==p)continue;\n        getans(y,x,p);\n    }add(x,1);\n}void dfs(int x,int f){\n    int p=0;\n\tfor(int i=first[x];i;i=nex[i]){\n        int y=v[i];if(y==f)continue;\n        if(gson[y]){p=y;continue;}\n        dfs(y,x);init(y,x);mx=0;\n    }if(p)dfs(p,x);\n    getans(x,f,p);\n    if(mx>0)ans[x]=*st[mx].begin();\n    else ans[x]=0;\n}int main(){\n\tn=read(),m=read();\n\tt=(int)(log(n)/log(2.0))+1;\n\tfor(int i=1;i<n;i++){\n\t\tint x=read(),y=read();\n\t\tadde(x,y),adde(y,x);\n\t}d[1]=1,q.push(1);bfs();getg(1,0);\n\tfor(int i=1;i<=m;i++){\n\t\tint x=read(),y=read(),z=read(),f=lca(x,y);\n\t\tif(mp.find(z)==mp.end()){\n\t\t\tmp.insert(make_pair(z,++num));\n\t\t\tanti[num]=z;\n\t\t}z=mp[z];\n\t\t//\u6811\u4e0a\u5dee\u5206 \n\t\tcf[x][z]++,cf[y][z]++,cf[f][z]--,cf[fa[0][f]][z]--;\n\t}for(int i=1;i<=num;i++)st[0].insert(anti[i]);\n\tdfs(1,0);\n    //cout<<\"ILOVEYUKIJZY\"<<endl;\n\tfor(int i=1;i<=n;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1581153152,
        "uid": 104292,
        "name": "YellowBean_Elsa",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4556 \u3010[Vani\u6709\u7ea6\u4f1a]\u96e8\u5929\u7684\u5c3e\u5df4 /\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811\u5408\u5e76\u3011"
    },
    {
        "content": "\u5199\u70b9\u5947\u602a\u7684\u9898\u89e3......\n\n\u7531\u4e8e\u8fd9\u9898\u5141\u8bb8\u79bb\u7ebf\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u7528dsu on tree\u79bb\u7ebf\u5904\u7406\u6240\u6709\u8be2\u95ee\uff08\u5982\u679c\u9700\u8981\u5f3a\u5236\u5728\u7ebf\u90a3\u4e48\u6211\u4eec\u9700\u8981\u4e24\u9897\u53ef\u6301\u4e45\u5316\u7684\u7ebf\u6bb5\u6811\u540c\u6b65\u7ef4\u62a4\uff09\n\n   \u6211\u4eec\u77e5\u9053\u5728\u7ecf\u5178\u7684dsu on tree\u4e2d\u5982\u679c\u8981\u5408\u5e76\u4e00\u4e2a\u6570\u636e\u51fa\u73b0\u7684\u6b21\u6570\u90a3\u4e48\u53ef\u4ee5\u7528hash_map\u6765\u542f\u53d1\u5f0f\u5408\u5e76\u8fdb\u884c\u8ba1\u6570\uff0c\u590d\u6742\u5ea6O(nlogn)\u3002\u4f46\u662f\u8fd9\u9898\u6bd4\u8f83\u7279\u6b8a\uff0c\u8fd8\u8981\u6c42\u4e2a\u6392\u540d\uff08\u6c42\u5927\u4e8e\u7b49\u4e8ek\u7684\u79cd\u7c7b\u6570\u5373\u8f6c\u5316\u4e3a\u6c42\uff08k+1\uff09\u7684\u79cd\u7c7b\u6570\u7684rank\uff09\uff08\u624b\u5199\u4e2a\u5e73\u8861\u6811\u4f3c\u4e4e\u6709\u70b9\u9ebb\u70e6\uff09\n   \u4e0d\u8fc7pb_ds\u91cc\u9762\u5df2\u7ecf\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684hash_map\u4ee5\u53ca\u7ea2\u9ed1\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u66b4\u529bdsu on tree \u540c\u6b65\u7ef4\u62a4\u5c31\u884c\u4e86\u3002\n\n\uff08\u4e0d\u8fc7\u8fd9\u4e2a\u4e1c\u897f\u867d\u7136\u6bd4\u624b\u5199\u6570\u636e\u7ed3\u6784\u7701\u4e8b\u800c\u4e14\u8fd8\u5feb\uff0c\u4f46\u662f\u8fd8\u662f\u8981\u770b\u5bf9STL\u7684\u719f\u7ec3\u7a0b\u5ea6\u624d\u80fd\u8bf4\u597d\u4e0d\u597d\u5199\uff0c\u4ee3\u7801\u7ec6\u8282\u6bd4\u8f83\u591a\uff0c\u800c\u4e14\u5305\u542b\u4e86\u5f88\u591a\u5c0f\u6280\u5de7\uff0c1A\u4e86\u6211\u4e2a\u4eba\u8fd8\u662f\u6bd4\u8f83\u60ca\u8bb6\u7684\u3002\uff09\n\nAC\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/hash_policy.hpp>\n#include<ext/pb_ds/exception.hpp>\n#include<ext/pb_ds/list_update_policy.hpp>\n#include<ext/pb_ds/priority_queue.hpp>\n#include<ext/pb_ds/tag_and_trait.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\n#include<ext/pb_ds/trie_policy.hpp>\nusing namespace __gnu_pbds;\nusing namespace std;\nconst int N=220000;\ngp_hash_table<int,int> *cnt[N];\ntree<pair<int,int>,null_type,less<pair<int,int>>,rb_tree_tag,tree_order_statistics_node_update> *tree2[N];\nvector<int> edge[N];\narray<int,N> ans;\narray<bool,N> vis;\nlist<pair<int,int> > query[N];\nint L=0;\nvoid merge(int a,int b)\n{\n    int k=a;\n    if(cnt[a]->size()<cnt[b]->size())\n        swap(a,b);\n        for(auto &s:*cnt[b])\n        {\n            if(cnt[a]->find(s.first)==cnt[a]->end())\n            {\n                tree2[a]->insert({-s.second,++L});\n                (*cnt[a])[s.first]=s.second;\n            }\n            else\n            {\n                auto it=tree2[a]->lower_bound({-(*cnt[a])[s.first]+1,0});\n                --it;\n                tree2[a]->erase(it);\n                (*cnt[a])[s.first]+=s.second;\n                tree2[a]->insert({-(*cnt[a])[s.first],++L});\n            }\n        }\n    tree2[b]->clear(),cnt[b]->clear();\n    if(k==b)\n        cnt[k]=cnt[a],tree2[k]=tree2[a];\n}\nvoid dfs(int a)\n{\n    vis[a]=true;\n    for(auto &s:edge[a])\n        if(vis[s]==false)\n        {\n            dfs(s);\n            merge(a,s);\n        }\n    while(!query[a].empty())\n        {\n            ans[query[a].front().second]=tree2[a]->order_of_key({-query[a].front().first+1,0});\n            query[a].pop_front();\n        }\n}\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n    cout.tie(NULL);\n    int n,m,u,v,q,k;\n    cin>>n>>q;\n    for(int i=1;i<=n;++i)\n    {\n        cnt[i]=new gp_hash_table<int,int>();\n        tree2[i]=new tree<pair<int,int>,null_type,less<pair<int,int>>,rb_tree_tag,tree_order_statistics_node_update>();\n        cin>>k;\n        (*cnt[i])[k]=1;\n        tree2[i]->insert({-1,++L});\n    }\n    for(int i=0;i<n-1;++i)\n        {\n            cin>>u>>v;\n            edge[u].push_back(v);\n            edge[v].push_back(u);\n        }\n    for(int i=1;i<=q;++i)\n    {\n        cin>>u>>v;\n        query[u].push_back({v,i});\n    }\n    dfs(1);\n    for(int i=1;i<=q;++i)\n        cout<<ans[i]<<'\\n';\n    return 0;\n}\n\n```\n",
        "postTime": 1556543887,
        "uid": 154957,
        "name": "qiyue7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": "### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/9954741.html)\n\n#### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/CF375D)\n\n#### \u83ab\u961f\u597d\u9898\n\n\u6211\u4e00\u4e0a\u6765\u60f3\u5199\u7ebf\u6bb5\u6811\uff0c\u968f\u540e\u89c9\u5f97\u4e0d\u597d\u5199\u5e76\u5f03\u5751\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u89c1\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\uff0c\u94a6\u5b9a\u83ab\u961f\n\n\u4f46\u8fd9\u662f\u5728\u6811\u4e0a\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u7528\u83ab\u961f~~\uff08\u5e9f\u8bdd\uff09~~\n\n\u6211\u4eec\u8981\u6811\u94fe\u5256\u5206\uff0c\u4f7f\u5f97\u8282\u70b9\u548c\u8282\u70b9\u7684\u5b50\u6811\u80fd\u5728\u4e00\u4e2a\u533a\u95f4\u91cc\uff08\u4e0d\u4f1a\u6811\u94fe\u5256\u5206\u7684\u51fa\u95e8\u5de6\u8f6c[\u6d1b\u5495\u6811\u94fe\u5256\u5206\u6a21\u677f](https://www.luogu.org/problemnew/show/P3384)\uff09\n\n\u5269\u4e0b\u7684\u5c31\u662f\u6700\u57fa\u7840\u7684\u83ab\u961f\uff0c\u4f46\u662f\u524d\u7f6e\u548c\u540e\u7f6e++\uff0c--\u8981\u6ce8\u610fqaq\uff0c\u6211\u4ee5\u524d\u5199\u83ab\u961f\u7ecf\u5e38\u56e0\u4e3a++\uff0c--\u7684\u95ee\u9898\u51fa\u9505qaq\n\n#### \u5269\u4e0b\u4e00\u4e9b\u7ec6\u8282\u89c1\u7a0b\u5e8f\n\n```cpp\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\n#define N 100005\nusing namespace std;\ninline int read() //io\u4f18\u5316\n{\n\tregister int x=0,f=1;register char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n\treturn x*f;\n}\ninline void write(register int x)\n{\n\tif(!x)putchar('0');if(x<0)x=-x,putchar('-');\n\tstatic int sta[36];int tot=0;\n\twhile(x)sta[tot++]=x%10,x/=10;\n\twhile(tot)putchar(sta[--tot]+48);\n}\nstruct edge{\n\tint to,next;\n}e[N<<1];\nint head[N],cnt;\nstruct query{\n\tint l,r,id,bl,k;\n}q[N];\nint n,m,blocksize;\nint c[N];\nint in[N],out[N],w[N];\ninline void dfs(register int x,register int fa)\n{\n\tin[x]=++cnt;\n\tw[cnt]=c[x];\n    for (register int i=head[x];i;i=e[i].next)\n\t{\n        int y=e[i].to;\n\t\tif (y==fa) \n\t\t\tcontinue;\n\t\tdfs(y,x);\n    }\n\tout[x]=cnt;\n}\ninline bool cmp(register query a,register query b)\n{\n\treturn a.bl==b.bl?a.r<b.r:a.bl<b.bl;\n}\nint ans[N],f[N],res[N]; //f[i]\u8868\u793a\u5f53\u524d\u989c\u8272\u4e3ai\u7684\u8282\u70b9\u7684\u4e2a\u6570\uff0cans[i]\u8868\u793a\u5f53\u524d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u7b49\u4e8ei\u7684\u989c\u8272\u6570\u91cf\uff0cres\u662f\u6700\u540e\u7684\u7ed3\u679c\nbool inq[N];\ninline void update(register int x)\n{\n\tif(inq[x])\n\t\t--ans[f[w[x]]--];\n\telse\n\t\t++ans[++f[w[x]]];\n\tinq[x]^=1;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(register int i=1;i<=n;++i)\n\t\tc[i]=read();\n\tfor(register int i=1;i<n;++i)\n\t{\n\t\tint x=read(),y=read(); //\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u56fe\n\t\te[++cnt]=(edge){y,head[x]};\n\t\thead[x]=cnt;\n\t\te[++cnt]=(edge){x,head[y]};\n\t\thead[y]=cnt;\n\t}\n\tcnt=0;\n\tdfs(1,1); //\u6811\u5256\n\tblocksize=sqrt(n); //\u83ab\u961f\u5757\u7684\u5927\u5c0f\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint v=read(),k=read();\n\t\tq[i]=(query){in[v],out[v],i,(in[v]-1)/blocksize+1,k};\n\t}\n\tsort(q+1,q+1+m,cmp);\n\tint l=1,r=0;\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint ll=q[i].l,rr=q[i].r;\n\t\twhile(l<ll)\n\t\t\tupdate(l++);\n\t\twhile(l>ll)\n\t\t\tupdate(--l);\n\t\twhile(r>rr)\n\t\t\tupdate(r--);\n\t\twhile(r<rr)\n\t\t\tupdate(++r);\n\t\tres[q[i].id]=ans[q[i].k];\n\t}\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\twrite(res[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n } \n```",
        "postTime": 1542114636,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    },
    {
        "content": " http://www.elijahqi.win/2018/03/01/codeforces-375d/ \n http://blog.csdn.net/elijahqi/article/details/79408693\n \u9898\u610f\u7ffb\u8bd1\n\n\u7ed9\u51fa\u4e00\u68f5 n \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e00\u4e2a\u989c\u8272 c i \u3002 \u8be2\u95ee q \u6b21\uff0c\u6bcf\u6b21\u8be2\u95ee\u4ee5 v \u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u51fa\u73b0\u6b21\u6570 \u2265k \u7684\u989c\u8272\u6709\u591a\u5c11\u79cd\u3002\n\n\u8003\u8651\u5b50\u6811\u4e00\u5b9a\u662fdfs\u5e8f\u5217\u4e0a\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4 \u90a3\u4e48\u6bcf\u6b21\u5bf9\u5b50\u6811\u64cd\u4f5c\u603b\u76f8\u5f53\u4e8e\u9488\u5bf9dfs\u5e8f\u4e0a\u7684\u4e00\u6bb5\u8fde\u7eed\u533a\u95f4\u64cd\u4f5c\n\n\u5c31\u53ef\u4ee5\u83ab\u961f\u4e86 \u8bbeans\u8868\u793a\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7i\u6b21\u7684\u989c\u8272\u6570 f[i]\u8868\u793ai\u53f7\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570 Ans\u76f8\u5bf9\u5e94\u7684\u8bb0\u5f55\u6bcf\u4e2a\u8be2\u95ee\u7684\u7b54\u6848 \u90a3\u4e48\u8003\u8651\u6bcf\u4e2a\u989c\u8272\u51fa\u73b0\u4e00\u5b9a\u662f\u4ece0~xx \u90a3\u4e48\u6211\u6bcf\u51fa\u73b0\u4e00\u6b21 \u6211\u5373\u5bf9ans\u8fdb\u884c\u4fee\u6539\u5373\u53ef \u5e76\u4e0d\u9700\u8981\u533a\u95f4\u4fee\u6539 \u7136\u540e\u76f8\u5e94\u7684\u51cf\u53bb\u7684\u65f6\u5019 \u4e5f\u662f\u8fd9\u65f6\u5019\u7684\u51fa\u73b0\u6b21\u6570-1 \u00a0\u7136\u540e\u5bf9\u5e94\u7684ans\u6570\u7ec4\u518d\u51cf1\u5373\u53ef\n```\n#include<cmath>\n#include<cstdio>\n#include<algorithm>\n#define N 110000\nusing namespace std;\ninline char gc(){\n    static char now[1<<16],*S,*T;\n    if (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n    return *S++;\n}\ninline int read(){\n    int x=0,f=1;char ch=gc();\n    while(ch<'0'||ch>'9') {if (ch=='-') f=-1;ch=gc();}\n    while(ch<='9'&&ch>='0') x=x*10+ch-'0',ch=gc();\n    return x*f;\n}\nstruct node1{\n    int y,next;\n}data[N<<1];\nstruct node{\n    int l,r,id,bl,k;\n}qr[N];bool visit[N];\nint num,h[N],in[N],out[N],w[N],c[N],ans[N],Ans[N],f[N],nn,n,m;\ninline bool cmp(const node &a,const node &b){\n    return a.bl==b.bl?a.r<b.r:a.bl<b.bl;\n}\ninline void dfs(int x,int fa){\n    in[x]=++num;w[num]=c[x];\n    for (int i=h[x];i;i=data[i].next){\n        int y=data[i].y;if (y==fa) continue;dfs(y,x);\n    }out[x]=num;\n}\ninline void update(int x){\n    if (visit[x]) --ans[f[w[x]]--];\n    else ++ans[++f[w[x]]];\n    visit[x]^=1;\n}\nint main(){\n//\tfreopen(\"cf375d.in\",\"r\",stdin);\n    n=read();m=read();for (int i=1;i<=n;++i) c[i]=read();\n    for (int i=1;i<n;++i){\n        int x=read(),y=read();\n        data[++num].y=y;data[num].next=h[x];h[x]=num;\n        data[++num].y=x;data[num].next=h[y];h[y]=num;\n    }num=0;dfs(1,1);nn=sqrt(n);\n    for (int i=1;i<=m;++i) {\n        qr[i].id=i;int x=read();qr[i].l=in[x];qr[i].r=out[x];qr[i].k=read();\n        qr[i].bl=(qr[i].l-1)/nn+1;\n    }sort(qr+1,qr+m+1,cmp);\n    int cl=1,cr=0;\n    for (int i=1;i<=m;++i){\n        int l=qr[i].l,r=qr[i].r;\n        while(cl<l) update(cl++);\n        while(cl>l) update(--cl);\n        while(cr>r) update(cr--);\n        while(cr<r) update(++cr);\n        Ans[qr[i].id]=ans[qr[i].k];\n    }\n    for (int i=1;i<=m;++i) printf(\"%d\\n\",Ans[i]);\n    return 0;\n}\n```",
        "postTime": 1519870172,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF375D \u3010Tree and Queries\u3011"
    }
]