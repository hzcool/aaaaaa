[
    {
        "content": "\u5173\u4e8e\u57fa\u7840\u7684WQS\u4e8c\u5206\u6211\u4eec\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0,\u5173\u4e8e\u849f\u84bb\u5bf9WQS\u7684\u7406\u89e3\u53ef\u4ee5\u770b\u849f\u84bb\u7684[\u535a\u5ba2](https://prutekoi.github.io/post/xue-xi-bi-ji-wqs-er-fen-tu-you-hua/)\u3002\n\nEndSaH\u5927\u4f6c\u5df2\u7ecfhack\u4e86\u663e\u7136\u4e0d\u5bf9\u7684\u4e00\u4e9bWQS\u4e8c\u5206,\u5e76\u7ed9\u51fa\u4e86\u81ea\u5df1\u7684\u4e00\u79cd\u6784\u9020\u65b9\u6848,\u4e0d\u8fc7\u662f\u5229\u7528\u4e86\u8fd9\u9898\u9650\u52361\u7684\u5ea6\u6570\u7684\u4e00\u4e9b\u6027\u8d28\u3002\n\n\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u7ed9\u51fa\u8fd9\u9898\u7684\u8d85\u96c6[P2619 [\u56fd\u5bb6\u96c6\u8bad\u961f2]Tree I ](https://www.luogu.com.cn/problem/P2619)\u7684\u65b9\u6848\u6784\u9020\u65b9\u5f0f\u3002\n\n> \u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u5e26\u6743\u8fde\u901a\u56fe\uff0c\u6bcf\u6761\u8fb9\u662f\u9ed1\u8272\u6216\u767d\u8272\u3002\u8ba9\u4f60\u6c42\u4e00\u68f5\u6700\u5c0f\u6743\u7684\u6070\u597d\u6709need\u6761\u767d\u8272\u8fb9\u7684\u751f\u6210\u6811\u3002\n\n\u7528WQS\u4e8c\u5206\u53ef\u4ee5\u4e8c\u5206\u51fa\u4e00\u4e2a\u659c\u7387 $k$,\u5df2\u77e5need\u8fd9\u4e2a\u70b9\u4e5f\u5728\u8fd9\u6761\u76f4\u7ebf\u4e0a\u3002\u4e8e\u662f\u628a\u6240\u6709\u767d\u8fb9\u90fd\u52a0\u4e0a\u6743\u503c $k$\u3002\uff08\u6ce8\u610fWQS\u4e8c\u5206\u7684\u8fc7\u7a0b\u5df2\u7ecf\u7ed3\u675f\u4e86,\u4e0b\u9762\u662f\u6784\u9020\u65b9\u6848\uff09\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u6700\u591a\u767d\u8fb9\u548c\u6700\u5c11\u767d\u8fb9\u7b56\u7565\u5206\u522b\u8dd1\u4e00\u904d\u514b\u9c81\u65af\u5361\u5c14\u3002\n\n\u9996\u5148\u901a\u8fc7\u62df\u9635\u7684\u4e00\u4e9b\u6027\u8d28\u53ef\u4ee5\u5f97\u51fa\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u767d\u8fb9\u6570\u91cf\u7684\u53ef\u80fd\u60c5\u51b5\u662f\u8fde\u7eed\u7684\u3002\u6709\u4e86\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5224\u662f\u5426\u65e0\u89e3\u4e86\uff08\u533a\u95f4\u4e0d\u5305\u542b $need$ \u5373\u65e0\u89e3\uff09\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u662f\u5982\u4f55\u6784\u9020\u65b9\u6848\u3002\n\n\u6211\u4eec\u77e5\u9053\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u4e4b\u95f4\u624d\u4f1a\u4e92\u76f8\u66ff\u6362,\u4e14\u540c\u4e00\u8fb9\u6743\u7684\u8fb9\u7528\u7684\u6570\u91cf\u662f\u56fa\u5b9a\u7684\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u5206\u6279\u6b21\u5730\u8003\u8651\u8fd9\u4e9b\u8fb9\u3002\u4e0d\u540c\u6279\u6b21\u4e4b\u95f4\u7684\u8fb9\u76f8\u5f53\u4e8e\u662f\u72ec\u7acb\u7684\u3002\n\n\u5728\u4e0a\u9762\u6c42\u6700\u5c11\u767d\u8fb9\u65f6\u6211\u4eec\u53ef\u4ee5\u987a\u5e26\u6c42\u51fa\u5728\u6bcf\u4e00\u6279\u6b21\u4e2d\u4e00\u5b9a\u9700\u8981\u9009\u7684\u767d\u8fb9\u6709\u54ea\u4e9b,\u90a3\u4e48\u6211\u4eec\u6784\u9020\u65f6\u5c31\u5148\u628a\u8fd9\u4e9b\u8fb9\u8fde\u4e0a(\u4e0d\u7136\u6784\u4e0d\u6210\u6700\u5c0f\u751f\u6210\u6811)\u3002\n\n\u5f53\u524d\u6279\u6b21\u4e2d\u5269\u4e0b\u7684\u8fb9\u53ef\u4ee5\u5168\u90fd\u9009\u9ed1\u8fb9(\u4f46\u662f\u6709\u53ef\u80fd\u4e4b\u540e\u9009\u6700\u591a\u6570\u91cf\u7684\u767d\u8fb9\u4e5f\u51d1\u4e0d\u591f $need$ \u6761\u767d\u8fb9\u4e86)\u3002\u5982\u4f55\u6289\u62e9\u5269\u4e0b\u7684\u8fb9\u600e\u4e48\u9009\u5462?\n\n\u6211\u4eec\u4e4b\u524d\u6c42\u6700\u591a\u767d\u8fb9\u65f6\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8fb9\u6743 $x$,\u6c42\u51fa\u5728\u6ee1\u8db3\u6700\u5c0f\u751f\u6210\u6811\u6761\u4ef6\u4e0b\u8fb9\u6743\u5927\u4e8e $x$ \u7684\u8fb9\u6700\u591a\u9009\u591a\u5c11\u767d\u8fb9,\u8bbe\u4e3a $R[x]$\u3002\n\n\u90a3\u4e48\u5728\u6784\u9020\u65f6\u5bf9\u4e8e $x$ \u8fb9\u6743\u7684\u4e0d\u5fc5\u8981\u7684\u767d\u8fb9\u53ea\u8981\u52a0\u5230 $now+R[x]==need$ \u5373\u53ef,\u7136\u540e\u8fd9\u6279\u6b21\u5c31\u53ef\u4ee5\u53ea\u52a0\u9ed1\u8fb9\u3002\n\n\u8fd9\u6837\u6784\u9020\u5230\u6240\u6709\u6279\u6b21\u90fd\u7ed3\u675f\u4e4b\u540e\u5373\u53ef\u5f97\u5230\u5408\u6cd5\u7684\u89e3\u3002\n\n\u5e94\u8be5\u5bf9\u4e8e\u4e00\u822c\u7684WQS\u4e8c\u5206\u4e5f\u53ef\u4ee5\u5957\u7528\u8fd9\u6837\u7684\u601d\u8def\u6784\u9020\u65b9\u6848\u3002\n\n\u6211\u7684\u4ee3\u7801\u53ef\u4ee5\u8fc7\u6389\u6240\u6709\u7684hack\u6570\u636e\u5466,\u8bf7\u653e\u5fc3\u98df\u7528\u3002\n\n\u4ee3\u7801\u5f88\u4e11...\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+50;\nint n,m,need,n1,n2,x[N],y[N],z[N],c1[N],c2[N],f[N],s[N],R[N],ll,rr;bool flag;\nbool cmp(int x,int y){return z[x]<z[y];}\nint find(int x){return f[x]==x?x:f[x]=find(f[x]);}\nvector<int>v[N],Ans;\nbool merge(int id){\n    int fx=find(x[id]),fy=find(y[id]);\n    if(fx==fy)return 0;\n    if(flag)Ans.push_back(id);\n    if(s[fx]>s[fy])swap(fx,fy);\n    f[fx]=fy;s[fy]+=s[fx];return 1;\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&need);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&x[i],&y[i],&z[i]);\n        (x[i]==1||y[i]==1?c1[++n1]:c2[++n2])=i;\n    }\n    sort(c1+1,c1+n1+1,cmp);sort(c2+1,c2+n2+1,cmp);\n    int l=-5e8,r=5e8,ans=-1e9;\n    while(l<=r){\n        int mid=(l+r)>>1,i=1,j=1,now=0;\n        for(int k=1;k<=n;k++)f[k]=k,s[k]=1;\n        while(i<=n1||j<=n2)\n            if(i>n1||(j<=n2&&z[c2[j]]<z[c1[i]]+mid))merge(c2[j++]);\n            else now+=merge(c1[i++]);\n        if(now>=need)ans=mid,l=mid+1;\n        else r=mid-1;\n    }\n    if(ans==-1e9)puts(\"-1\");\n    for(int i=1;i<=n1;i++)z[c1[i]]+=ans;\n    int i=1,j=1,now=0;\n    for(int k=1;k<=n;k++)f[k]=k,s[k]=1;\n    for(int k=-1e9;i<=n1||j<=n2;){\n        if(i>n1||(j<=n2&&z[c2[j]]<=z[c1[i]])){\n            if(z[c2[j]]!=k)k=z[c2[j]];\n            merge(c2[j++]);\n        }\n        else{\n            if(z[c1[i]]!=k)k=z[c1[i]];\n            if(merge(c1[i])){\n                if(k>=1&&k<=1e5)v[k].push_back(c1[i]);\n                now++;\n            }\n            i++;\n        }\n    }\n    ll=now;now=0;i=j=1;if(ll>need)puts(\"-1\"),exit(0);\n    for(int k=1;k<=n;k++)f[k]=k,s[k]=1;\n    for(int k=-1e9;i<=n1||j<=n2;){\n        if(i>n1||(j<=n2&&z[c2[j]]<z[c1[i]])){\n            if(z[c2[j]]!=k){\n                if(k>=1&&k<=1e5)R[k]=now;\n                k=z[c2[j]];if(k>=1&&k<=1e5)R[k]=1e9;\n            }\n            merge(c2[j++]);\n        }\n        else{\n            if(z[c1[i]]!=k){\n                if(k>=1&&k<=1e5)R[k]=now;\n                k=z[c1[i]];if(k>=1&&k<=1e5)R[k]=1e9;\n            }\n            now+=merge(c1[i++]);\n        }\n    }\n    rr=now;now=0;i=j=1;flag=1;\n    for(int k=1;k<=1e5;k++)R[k]=max(0,rr-R[k]);\n    for(int k=1;k<=n;k++)f[k]=k,s[k]=1;\n    for(int k=-1e9;i<=n1&&j<=n2;){\n        k=min(z[c1[i]],z[c2[j]]);\n        if(k<1||k>1e5){\n            while(i<=n1&&z[c1[i]]==k)\n                now+=merge(c1[i++]);\n        }\n        else{\n            for(int l=0;l<v[k].size();l++)now+=merge(v[k][l]);\n            while(now+R[k]<need)now+=merge(c1[i++]);\n            while(j<=n2&&z[c2[j]]==k)merge(c2[j++]);\n            while(i<=n1&&z[c1[i]]==k)now+=merge(c1[i++]);\n        }\n    }\n    while(i<=n1)now+=merge(c1[i++]);\n    while(j<=n2)merge(c2[j++]);\n    printf(\"%d\\n\",n-1);\n    for(int i=0;i<Ans.size();i++)printf(\"%d \",Ans[i]);\n    return 0;\n}\n```",
        "postTime": 1576315287,
        "uid": 142099,
        "name": "jiqimao",
        "ccfLevel": 0,
        "title": "CF125E\u9898\u89e3"
    },
    {
        "content": "[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://endsah.cf/blog/CF125E-MST-Company/#more)\n\n# Solution\n\n## hack\n\n\u5f3a\u70c8\u8c34\u8d23\u9898\u76ee\u6570\u636e\u592a\u6c34...\n\n\u9996\u5148\u5927\u90e8\u5206\u7684\u51f8\u4f18\u5316\uff08\u6216\u8005\u8bf4 wqs/\u5e26\u6743\u4e8c\u5206\uff09\u7684\u505a\u6cd5\u90fd\u9519\u4e86\u3002\u8fd9\u6837\u53ea\u80fd\u6b63\u786e\u7684\u5f97\u5230\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\uff0c\u4f46\u662f\u8981\u4ee5\u6b64\u4e3a\u57fa\u7840\u6784\u9020\u65b9\u6848\u4f1a\u9519\u3002\u6bd4\u5982\u4e0b\u9762\u4e24\u7ec4\u6570\u636e\uff1a\n\n```\n5 8 3\n1 2 7\n1 4 8\n1 5 7\n1 3 3\n2 3 1\n3 5 1\n3 4 10\n4 5 3\n```\n\n```\n7 9 3\n1 2 8\n1 7 4\n1 4 3\n1 5 6\n3 6 1\n3 4 4\n4 7 1\n4 6 3\n5 6 1\n```\n\n\u4e0a\u9762\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u662f 19\uff0c\u4e0b\u9762\u7684\u662f 20\u3002\u7edd\u5927\u591a\u6570\u7a0b\u5e8f\u4f1a\u8f93\u51fa 20 \u548c -1...\n\n[\u53ef\u4ee5\u8bc1\u660e](https://www.cnblogs.com/CreeperLKF/p/9045491.html) \u5728\u8fd9\u79cd\u7b56\u7565\u4e0b\u505a\u51fa\u7684\u6700\u5c0f\u751f\u6210\u6811\u5373\u4f7f\u5ea6\u6570\u8d85\u8fc7 $k$\uff0c\u4e5f\u5fc5\u7136\u53ef\u4ee5\u901a\u8fc7\u6362\u8fb9\u6765\u5f97\u5230\u5ea6\u6570\u6070\u597d\u4e3a $k$ \u7684\u751f\u6210\u6811\uff0c\u5e76\u4e14\u6743\u503c\u4e00\u6837\uff08\u51f8\u5305\u4e0a\u591a\u70b9\u5171\u7ebf\uff09\u3002\u7136\u800c\u76f4\u63a5\u6839\u636e\u6392\u5e8f\u987a\u5e8f\u5e76\u9650\u5236\u5ea6\u6570\u518d\u53bb\u6784\u9020\u65b9\u6848\uff0c\u5f88\u53ef\u80fd\u5f97\u5230\u4e0d\u8fde\u901a\u6216\u9519\u8bef\u7684\u7ed3\u679c\u3002\n\n## \u7834\u5708\n\n\u4e0d\u59a8\u8003\u8651\u4e00\u4e2a\u66b4\u529b\u4e00\u70b9\u7684\u601d\u8def\uff08$n$ \u7684\u8303\u56f4\u8f83\u5c0f\uff09\uff1a\n\n\u9996\u5148\u53bb\u6389 1 \u53f7\u70b9\u8dd1\u6700\u5c0f\u751f\u6210\u68ee\u6797\u3002\n\n\u73b0\u5728\u52a0\u5165 1 \u53f7\u70b9\u3002\u8bbe\u6b64\u65f6\u9664 1 \u53f7\u70b9\u5916\u7684\u8054\u901a\u5757\u4e2a\u6570\u4e3a $x$\uff0c\u82e5 $k < x$\uff0c\u5fc5\u7136\u65e0\u89e3\u3002\n\n\u5426\u5219\u5bf9\u4e8e\u6bcf\u4e2a\u8054\u901a\u5757\u52a0\u5165\u80fd\u8054\u901a\u8fd9\u4e2a\u8054\u901a\u5757\u7684\u6700\u5c0f\u7684\u8fb9\uff0c\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u4e00\u68f5\u5f3a\u5236 $x$ \u5ea6\u751f\u6210\u6811\u3002\n\n\u73b0\u5728\u4f9d\u7136\u8003\u8651\u7ecf\u5178\u7684\u7834\u5708\u7b97\u6cd5\uff1a\n\n\u5bf9\u4e8e\u4e00\u6761\u4e0d\u5728\u751f\u6210\u6811\u4e0a\u7684\u4e0e 1 \u76f8\u8fde\u7684\u8fb9\uff0c\u82e5\u5c06\u5176\u52a0\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u5176\u53ef\u4ee5\u66ff\u6362\u6240\u4ea7\u751f\u7684\u73af\u4e0a\u7684\u4e00\u6761\u6700\u5927\u7684\u8fb9\uff0c\u4f1a\u4f7f\u6743\u503c\u53d8\u5c0f $maxEdge - w$\uff0c\u5176\u4e2d $maxEdge$ \u662f\u6700\u5927\u8fb9\u8fb9\u6743\uff0c$w$ \u662f\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u3002\n\n\u5728\u6240\u6709 $maxEdge - w$ \u627e\u5230\u5176\u6700\u5927\u503c\u5e76\u66ff\u6362\uff0c\u5728\u6240\u66ff\u6362\u7684\u6700\u5927\u8fb9\u4e0d\u4e0e 1 \u76f8\u8fde\u7684\u524d\u63d0\u4e0b\uff0c\u5c31\u80fd\u5f97\u5230\u4e00\u68f5\u5f3a\u5236 $x + 1$ \u5ea6\u751f\u6210\u6811\u3002\n\n\u5c06\u8fd9\u4e2a\u8fc7\u7a0b\u8fdb\u884c $k - x$ \u6b21\uff0c\u5c31\u80fd\u5f97\u5230\u9898\u76ee\u6240\u8981\u6c42\u7684\u5f3a\u5236 $k$ \u5ea6\u751f\u6210\u6811\u3002\n\n\u627e\u5230\u4e0d\u4e0e 1 \u76f8\u8fde\u7684\u6700\u5927\u8fb9\u7531\u4e8e\u6570\u636e\u8303\u56f4\u539f\u56e0\u53ef\u4ee5\u66b4\u529b\u7b97\u3002\u8bbe $maxE _i$ \u8868\u793a\u5728\u5f53\u524d\u751f\u6210\u6811\u4e0a\u4ece 1 \u51fa\u53d1\u5230 $i$ \u8282\u70b9\u7684\u8def\u5f84\u4e0a**\u5ffd\u7565\u4e0e 1 \u76f8\u8fde\u7684\u8fb9**\u7684\u6700\u5927\u8fb9\uff0c\u6bcf\u6b21 DFS \u4e00\u904d $O(n)$ \u7b97\u5c31\u884c\u3002\n\n$O(m \\log m + nk)$\n\n## \u4e8c\u5206\n\n**\u867d\u7136\u6211\u672c\u4eba\u611f\u89c9\u662f\u5bf9\u7684\uff0c\u5e76\u4e14\u7ecf\u8fc7\u4e86\u4e0a\u4e07\u7ec4\u6570\u636e\u7684\u5bf9\u62cd\uff0c\u4f46\u662f\u56e0\u4e3a\u6570\u636e\u6e7f\u5ea6\uff0c\u8fd9\u4e2a\u505a\u6cd5\u4f9d\u7136\u53ef\u80fd\u4f1a\u5047\uff0c\u8bf7\u8c28\u614e\u9605\u8bfb**\u3002\n\n\u73b0\u5728\u8fd9\u4e2a\u6784\u9020\u6cd5\u5e94\u8be5\u53ea\u80fd\u505a\u8fd9\u4e2a\u9898\uff08\u5f3a\u5236 $k$ \u5ea6\uff09\uff0c\u53e6\u4e00\u9053\u4e5f\u9700\u8981\u4e8c\u5206\u7684\u9898\uff08\u6070\u597d\u6709 $k$ \u6761\u767d\u8272\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\uff09\u65e0\u6cd5\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6784\u9020\u3002\n\n\u4e4b\u524d\u5df2\u7ecf\u8bf4\u4e86\uff0c\u4e8c\u5206\u6700\u540e\u5f97\u5230\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d 1 \u7684\u5ea6\u6570\u4f1a\u5927\u4e8e\u7b49\u4e8e $k$\u3002\n\n\u5148\u901a\u8fc7\u4e8c\u5206\u628a\u8fd9\u4e2a\u751f\u6210\u6811\u5efa\u51fa\u6765\uff0c\u5e76\u56fa\u5b9a 1 \u53f7\u70b9\u4e3a\u6839\u3002\n\n\u8003\u8651\u679a\u4e3e\u751f\u6210\u6811\u4e4b\u5916\u7684\u6240\u6709\u8fb9\u7528\u6765\u66ff\u6362\u90a3\u4e9b\u4e0e 1 \u76f8\u8fde\u7684\u8fb9\uff0c\u76f4\u5230 1 \u53f7\u70b9\u5ea6\u6570\u4e3a $k$\u3002\u5047\u8bbe\u5f53\u524d\u8fb9\u4e3a $(u, v)$\uff0c\u6743\u503c\u4e3a $w$\uff0c\u4ee5\u53ca $u$ \u5f52\u5c5e\u4e8e 1 \u53f7\u70b9\u7684\u513f\u5b50\u4e2d $p$ \u7684\u5b50\u6811\uff0c$v$ \u5f52\u5c5e\u4e8e 1 \u53f7\u70b9\u7684\u513f\u5b50\u4e2d $q$ \u7684\u5b50\u6811\u3002\n\n\u5982\u679c $p = q$ \u81ea\u7136\u65e0\u53ef\u66ff\u6362\u3002\u5426\u5219\uff0c\u5982\u679c $p, q$ \u4e2d\u4efb\u610f\u4e00\u4e2a\u70b9\u4e0e 1 \u76f8\u8fde\u7684\u8fb9\u6743\u662f $w$\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9 $(1, p/q)$ \u5c31\u53ef\u4ee5\u88ab $(u, v)$ \u66ff\u6362\u3002\u4e0d\u59a8\u8bbe\u53ef\u66ff\u6362\u7684\u8fb9\u662f $(1, p)$\uff0c\u90a3\u4e48 $p$ \u5b50\u6811\u5185\u7684\u70b9\u9700\u8981\u5168\u90e8\u63a5\u5165 $q$\uff08\u4e5f\u5373\u4e0b\u4e00\u6b21\u67e5\u8be2 $p$ \u5b50\u6811\u5185\u7684\u70b9\uff0c\u5f97\u5230\u7ed3\u679c\u5e94\u5f53\u4e3a $q$\uff09\u3002\u8fd9\u662f\u7b80\u5355\u5e76\u67e5\u96c6\u64cd\u4f5c\u3002\n\n\u53e6\u5916\u8fb9\u6743**\u5fc5\u987b**\u6070\u597d\u662f $w$\uff0c\u624d\u53ef\u4ee5\u66ff\u6362\u3002\u5b9e\u9645\u4e0a\u56e0\u4e3a\u5df2\u7ecf\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e86\uff0c\u4e0d\u53ef\u80fd\u66ff\u6362\u4e4b\u540e\u8fb9\u6743\u66f4\u5c0f\uff0c\u8bc1\u660e\u4e2d\u4e5f\u63d0\u5230\u4e86\u4e00\u5b9a\u662f\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u5bfc\u81f4\u4e86 1 \u7684\u5ea6\u6570\u8d85\u51fa\u4e86 $k$\uff0c\u6240\u4ee5\u5fc5\u987b\u4e25\u683c\u7b49\u4e8e\u3002\n\n\u590d\u6742\u5ea6\u7684\u8bdd\uff0c\u4e8c\u5206\u90e8\u5206\u4e3a $O(m \\log m \\log SIZE)$\uff0c\u5176\u4e2d $SIZE$ \u4e3a\u503c\u57df\u5927\u5c0f\u3002\u5982\u679c\u5c06\u4e0e 1 \u76f8\u8fde\u7684\u8fb9\u4e0e\u5176\u4ed6\u8fb9\u6bcf\u6b21\u5f52\u5e76\u6392\u5e8f\u6216\u8005\u6876\u6392\u53ef\u4ee5\u4f18\u5316\u53d8\u4e3a $O(m \\log SIZE)$\u3002\u6362\u8fb9\u6784\u6811\u90e8\u5206\u4e3a $O(m \\log n)$\u3002\n\n# Code\n\n## gen\n\n```python\nfrom random import randint\nfrom cyaron import *\nimport os\nn = 200\nm = randint(n - 1, min(1e5, n * (n - 1) / 2))\nk = randint(1, n - 1)\nouts = \"%d %d %d\\n\" % (n, m, k)\ngraph = Graph.UDAG(n, m, weight_limit = 1e2, self_loop=False, repeated_edges=False)\nouts += graph.to_str();\nprint(outs, file = open(\"tmp.in\", \"w\"))\n```\n\n## spj\n\n\u9700\u642d\u914d std \u548c gen \u98df\u7528\n\n\u53e6\u5916\u7531\u4e8e python \u7384\u5b66\u539f\u56e0\uff0c\u6bcf\u6b21\u53ea\u80fd\u8fd0\u884c 340 \u6b21...\n\n```cpp\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\nusing ptr = FILE*;\n\nconst int maxN = 5e3 + 5;\nconst int maxM = 1e5 + 5;\n\nint n, m, _ans, num, k;\nint fa[maxN], size[maxN];\n\nstruct Edge\n{ int u, v, w; }\nedge[maxM];\n\nint Find(int x)\n{ return fa[x] == x ? x : fa[x] = Find(fa[x]); }\n\ninline bool Merge(int u, int v)\n{\n    int fu = Find(u), fv = Find(v);\n    if (fu == fv)\n        return false;\n    if (size[fu] > size[fv])\n        swap(fu, fv);\n    fa[fu] = fv, size[fv] += size[fu];\n    return true;\n}\n\ninline void Err(const char* str)\n{ fprintf(stderr, \"%s\\n\", str); exit(0); }\n\nint main()\n{\n    for (int cnt = 1; ; ++cnt)\n    {\n        system(\"python3 gen.py && ./tmp && ./std\");\n        ptr in = fopen(\"tmp.in\", \"r\"), out = fopen(\"tmp.out\", \"r\"), ans = fopen(\"tmp.ans\", \"r\");\n        int tmp;\n        fscanf(in, \"%d %d %d\", &n, &m, &k);\n        for (int i = 1; i <= n; ++i)\n            fa[i] = i, size[i] = 1;\n        for (int i = 1; i <= m; ++i)\n            fscanf(in, \"%d %d %d\", &edge[i].u, &edge[i].v, &edge[i].w);\n        if (fscanf(out, \"%d\", &_ans) != 1)\n            Err(\"No ans.\");\n        if (fscanf(ans, \"%d\", &num) != 1)\n            Err(\"Invalid output.\");\n        if (num == -1 and _ans != -1)\n            Err(\"No solution.\");\n        if (num != -1 and _ans == -1)\n            Err(\"Not.\");\n        if (num == -1 and _ans == -1)\n        {\n            printf(\"AC %d times!\\n\", cnt);\n            continue;\n        }\n        if (num != n - 1)\n            Err(\"edges' number wrong!\");\n        int curans = 0, c = 0;\n        for (int i = 1; i <= num; ++i)\n        {\n            if (fscanf(ans, \"%d\", &tmp) != 1)\n                Err(\"Invalid output.\");\n            if (!Merge(edge[tmp].u, edge[tmp].v))\n                Err(\"Not tree.\");\n            curans += edge[tmp].w;\n            if (edge[tmp].u == 1 or edge[tmp].v == 1)\n                ++c;\n        }\n        if (curans != _ans)\n            Err(\"Wrong answer!\");\n        if (c != k)\n            Err(\"1's degree isn't k!\");\n        printf(\"AC %d times!\\n\", cnt);\n    }\n    return 0;\n}\n```\n\n## std\n\n### \u7834\u5708\n\n```cpp\n#include<bits/stdc++.h>\n\n#define mp make_pair\n#define pb push_back\n#define x first\n#define y second\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int,int> pii;\n\ntemplate <typename T> inline T read()\n{\n    T sum=0, fl=1; char ch=getchar();\n    for(; !isdigit(ch); ch=getchar()) if(ch=='-') fl=-1;\n    for(; isdigit(ch); ch=getchar()) sum=(sum<<3)+(sum<<1)+ch-'0';\n    return sum*fl;\n}\n\nconst int maxn=5000+5;\nconst int maxm=1e5+5;\n\nint n, m, k, c;\nLL mx[maxn]; bool del[maxm<<1], no[maxm];\nint fa[maxn], id[maxm<<1]; vector<int>vec, E;\nint he[maxn], ne[maxm<<1], to[maxm<<1], w[maxm<<1];\nstruct EDGE { int u, v, w, id; } e[maxm];\n\nbool operator<(const EDGE&a, const EDGE&b) { return a.w<b.w; }\n\nvoid add_edge(int u, int v, int val)\n{\n    ne[++c]=he[u]; he[u]=c; to[c]=v; w[c]=val;\n    ne[++c]=he[v]; he[v]=c; to[c]=u; w[c]=val;\n}\n\nint find(int x) { return fa[x]==x ? x : fa[x]=find(fa[x]); }\nvoid forest()\n{\n    for(int i=1; i<=n; ++i) fa[i]=i;\n    sort(e+1, e+m+1); \n    for(int i=1; i<=m; ++i)\n    {\n        int u=find(e[i].u), v=find(e[i].v);\n        if(u==v || u==1 || v==1) continue;\n        fa[u]=v; E.pb(e[i].id);\n        add_edge(e[i].u, e[i].v, e[i].w); id[c]=id[c-1]=e[i].id;\n    }\n}\n\nvoid get_max(int p, int f)\n{\n    for(int i=he[p]; i; i=ne[i])\n    {\n        if(to[i]==f || del[i] || to[i]==1) continue;\n        if(w[i]>=w[mx[p]]) mx[to[i]]=i;\n        else mx[to[i]]=mx[p];\n        get_max(to[i], p);\n    }\n}\n\nvoid Solve()\n{\n    n=read<int>(), m=read<int>(), k=read<int>(); c=1;\n    for(int i=1; i<=m; ++i) e[i]=(EDGE){read<int>(), read<int>(), read<int>(), i};\n    forest(); \n\n    for(int i=1; i<=m; ++i) \n    {\n        if(e[i].u!=1 && e[i].v!=1) continue;\n        int u=find(e[i].u), v=find(e[i].v);\n        if(u == v) vec.pb(i);\n        else fa[u]=v, add_edge(e[i].u, e[i].v, e[i].w), E.pb(e[i].id), --k; \n    }\n\n    for(int i=2; i<=n; ++i) if(find(i)!=find(i-1)) return (void) printf(\"-1\");\n    if(k<0) return (void) printf(\"-1\");\n\n    for(int i=1; i<=k; ++i)\n    {\n        if(!vec.size()) return (void) printf(\"-1\"); /**/\n        memset(mx, 0, sizeof(mx));\n        for(int j=he[1]; j; j=ne[j]) get_max(to[j], 1);\n        int now=-1, ans=2147483647;\n        for(int j=vec.size()-1; j>=0; --j) \n        {\n            int p=vec[j], var=max(e[p].u, e[p].v);\n            if(e[p].w-w[mx[var]]<ans) ans=e[p].w-w[mx[var]], now=j;\n        }\n        int p=vec[now], var=e[p].u==1?e[p].v:e[p].u;\n        add_edge(e[p].v, e[p].u, e[p].w); E.pb(e[p].id); \n        no[id[mx[var]]]=1; del[mx[var]]=del[mx[var]^1]=1;\n        vec.erase(vec.begin()+now);\n    }\n\n    printf(\"%d\\n\", n-1);\n    for(int i=E.size()-1; i>=0; --i) if(!no[E[i]]) printf(\"%d \", E[i]);\n}\n\nint main()\n{\n\n    //  freopen(\"125e.in\",\"r\",stdin);\n    //  freopen(\"125e.out\",\"w\",stdout);\n\n    Solve();\n\n    return 0;\n}\n```\n\n### \u4e8c\u5206\n\n```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n#include <bitset>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxN = 5e3 + 5;\nconst int maxM = 1e5 + 5;\n\nint n, m, k, maxw, ans;\nint fa[maxN], size[maxN], val[maxN], id[maxN];\nset<int> out;\nvector<struct Edge> G[maxN];\nbitset<maxM> vis;\n\nstruct Edge\n{\n    int u, v, w, id;\n\n    Edge() { }\n\n    Edge(int _u, int _v, int _w, int _id) : u(_u), v(_v), w(_w), id(_id) { }\n} edge[maxM];\n\nbool operator<(const Edge& x, const Edge& y)\n{ return x.w == y.w ? x.u < y.u : x.w < y.w; }\n\nint Find(int x)\n{ return fa[x] == x ? x : fa[x] = Find(fa[x]); }\n\ninline bool Merge(int u, int v)\n{\n    int fu = Find(u), fv = Find(v);\n    if (fu == fv)\n        return false;\n    if (size[fu] > size[fv])\n        swap(fu, fv);\n    fa[fu] = fv, size[fv] += size[fu];\n    return true;\n}\n\nvoid Init()\n{\n    for (int i = 1; i <= n; ++i)\n        fa[i] = i, size[i] = 1;\n}\n\nbool Check()\n{\n    Init();\n    int deg = 0;\n    for (int i = 1; i <= m; ++i)\n        if (edge[i].u != 1)\n            Merge(edge[i].u, edge[i].v);\n        else\n            ++deg;\n    if (deg < k)\n        return false;\n    int cnt = 0;\n    for (int i = 2; i <= n; ++i)\n        if (Find(i) == i)\n            ++cnt;\n    if (cnt > k)\n        return false;\n    for (int i = 1; i <= m; ++i)\n        if (edge[i].u == 1)\n            Merge(edge[i].u, edge[i].v);\n    cnt = 0;\n    for (int i = 1; i <= n; ++i)\n        if (Find(i) == i)\n            ++cnt;\n    return cnt == 1;\n}\n\nvoid DFS(int u, int father)\n{\n    fa[u] = fa[father];\n    for (const auto& v : G[u]) if (v.u != father)\n        DFS(v.u, u);\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"tmp.in\", \"r\", stdin);\n    freopen(\"tmp.ans\", \"w\", stdout);\n#endif\n    ios::sync_with_stdio(false);\n    cin >> n >> m >> k;\n    if (n == 1)\n    { cout << 0 << endl; return 0; }\n    for (int i = 1; i <= m; ++i)\n    {\n        Edge& o = edge[i];\n        cin >> o.u >> o.v >> o.w;\n        o.id = i;\n        if (o.u > o.v)\n            swap(o.u, o.v);\n        maxw = max(maxw, o.w);\n    }\n    if (!Check())\n    {\n        cout << \"-1\" << endl;\n        return 0;\n    }\n    int l = -maxw, r = maxw, p, ecnt, cnt;\n    while (l <= r)\n    {\n        p = (l + r) >> 1;\n        ecnt = cnt = 0;\n        Init();\n        for (int i = 1; i <= m; ++i)\n            if (edge[i].u == 1)\n                edge[i].w += p;\n        sort(edge + 1, edge + m + 1);\n        for (int i = 1; i <= m; ++i)\n            if (Merge(edge[i].u, edge[i].v))\n            {\n                ++ecnt;\n                if (edge[i].u == 1)\n                    ++cnt;\n                if (ecnt == n - 1)\n                    break;\n            }\n        for (int i = 1; i <= m; ++i)\n            if (edge[i].u == 1)\n                edge[i].w -= p;\n        if (cnt >= k)\n            ans = p, l = p + 1;\n        else\n            r = p - 1;\n    }\n    Init(), cnt = 0;\n    for (int i = 1; i <= m; ++i)\n        if (edge[i].u == 1)\n            edge[i].w += ans;\n    sort(edge + 1, edge + m + 1);\n    for (int i = 1; i <= m; ++i)\n        if (Merge(edge[i].u, edge[i].v))\n        {\n            vis.set(i);\n            if (edge[i].u == 1)\n                ++cnt;\n            out.insert(edge[i].id);\n            G[edge[i].u].emplace_back(edge[i].v, 0, edge[i].w, edge[i].id);\n            G[edge[i].v].emplace_back(edge[i].u, 0, edge[i].w, edge[i].id);\n        }\n    for (const auto& v : G[1])\n    {\n        val[v.u] = v.w, id[v.u] = v.id;\n        fa[1] = v.u, DFS(v.u, 1);\n    }\n    for (int i = 1; i <= m and cnt > k; ++i) if (edge[i].u != 1 and !vis[i])\n    {\n        int fu = Find(edge[i].u), fv = Find(edge[i].v);\n        if (fu == fv)\n            continue;\n        if (val[fu] == edge[i].w)\n        {\n            fa[fu] = fv, --cnt;\n            out.insert(edge[i].id);\n            out.erase(id[fu]);\n            continue;\n        }\n        if (val[fv] == edge[i].w)\n        {\n            fa[fv] = fu, --cnt;\n            out.insert(edge[i].id);\n            out.erase(id[fv]);\n            continue;\n        }\n    }\n    if (cnt == k)\n    {\n        cout << n - 1 << endl;\n        for (int i : out)\n            cout << i << ' ';\n        cout << endl;\n    }\n    else\n        cout << \"-1\" << endl;\n    return 0;\n}\n```",
        "postTime": 1569421828,
        "uid": 91252,
        "name": "EndSaH",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF125E \u3010MST Company\u3011"
    },
    {
        "content": "### P.S.\n[\u5b89\u5229\u81ea\u5df1\u7684wqs\u4e8c\u5206\u5b66\u4e60\u7b14\u8bb0](https://www.luogu.com.cn/blog/daniu/wqs-er-fen)  \n\u672c\u7740\u590d\u4e60 wqs\u4e8c\u5206 \u7684\u76ee\u7684\uff0c\u6211\u70b9\u5f00\u4e86\u8fd9\u9053\u9898\uff0c\u7ed3\u679c\u5462\u3002\u3002\u3002\u3002\u3002\u3002  \n![](https://cdn.luogu.com.cn/upload/image_hosting/5uqt0gom.png)  \n\u4e3a\u4e86\u7eaa\u5ff5\u6765\u4e4b\u4e0d\u6613\u7684 AC\uff0c\u6211\u6253\u7b97\u5199\u4e00\u7bc7\u9898\u89e3\u3002  \n\u4e0d\u8fc7\u770b\u9898\u89e3\u533a\u5435\u5730\u5f88\u5389\u5bb3\uff0c\u6211\u4e5f\u4e0d\u6562\u80af\u5b9a\u8fd9\u7bc7\u9898\u89e3\u4e00\u5b9a\u662f\u5bf9\u7684\uff0c\u5982\u679c\u4f2a\u4e86\u8fd8\u8bf7\u539f\u8c05\u3002  \n### Description.\n[\u6b64\u9898](https://www.luogu.com.cn/problem/P5633) \u8f93\u51fa\u65b9\u6848\u3002  \n\n### Solution.\nwqs \u4e8c\u5206\u6a21\u677f\u9898\u3002  \n\u6211\u4eec\u628a\u548c 1 \u8fde\u8fb9\u7684\u70b9\u5f53\u4f5c\u7279\u6b8a\u7269\u54c1\u3002  \n\u7136\u540e\u6309\u7167\u5957\u8def\u4e8c\u5206\u659c\u7387\uff0c\u6bcf\u6b21\u5224\u5b9a\u5bf9\u4e8e\u548c 1 \u76f8\u8fde\u7684\u8fb9\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u3002  \n\u7531\u4e0a\u6587\uff0c\u6211\u4eec\u6bcf\u6b21\u76f4\u63a5\u5bf9\u548c 1 \u76f8\u90bb\u8fb9\u7684\u6743\u503c\u52a0\u4e0a\u5f53\u524d\u4e8c\u5206\u7684 `mid`\u3002  \n\u5224\u65ad\u6709\u51e0\u6761\u8fb9\u548c 1 \u76f8\u8fde\uff0c\u76f4\u63a5\u6839\u636e\u8fd9\u4e2a\u6570\u91cf\u7ee7\u7eed\u4e8c\u5206\u5c31\u597d\u4e86\u3002  \n\u5c0f tips\uff1a\u6bcf\u6b21\u4e8c\u5206\u9700\u8981\u6c42\u4e00\u4e2a `Kruskra`\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5bf9\u4e8e\u6bcf\u6b21\u4e8c\u5206\u91cd\u65b0\u6392\u5e8f\u8fb9\u3002  \n\u6211\u4eec\u53ea\u9700\u8981\u521a\u5f00\u59cb\u6392\u5e8f\u4e00\u904d\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u4e8c\u5206\u76f4\u63a5\u5f52\u5e76\u4e00\u4e0b\u5c31\u597d\u4e86\u3002  \n\u4e8e\u662f\uff0c\u6210\u529f\u628a\u590d\u6742\u5ea6\u4ece $O(n\\log n\\log V)$ \u964d\u81f3 $O(n(\\log n+\\log V))$  \nUpDate: \u7b14\u8005\u5077\u61d2\uff0c\u61d2\u5f97\u5199\u5f52\u5e76\uff0c\u76f4\u63a5sort\uff0c\u590d\u6742\u5ea6\u4e24\u53ea $\\log$\u3002  \n\u7136\u540e\u4ee5 904ms \u7684~~\u4f18\u5f02~~\u6210\u7ee9\u901a\u8fc7\u4e86\u6b64\u9898\u3002  \n\n\u4e3b\u8981\u8fd8\u9700\u8981\u4ecb\u7ecd\u4e00\u4e9b\u7b14\u8005\u51fa\u9519\u7684\u5730\u65b9\u3002  \n1. \u6ce8\u610f\u4e8c\u5206\u7cbe\u5ea6\uff0c\u5efa\u8bae\u4e8c\u5206\u5230 double\n2. \u5f00 long long\n3. \u6570\u636e\u8303\u56f4\uff0c\u8fb9\u6570\u91cf\u548c\u70b9\u6570\u91cf\u4e0d\u540c ~~\u4e0d\u8fc7\u6ca1\u4eba\u548c\u7b14\u8005\u8fd9\u6837sb\u5427~~\n4. \u4e8c\u5206\u4e5f\u9700\u8981\u4e8c\u5206\u5230 +/-\uff0c\u503c\u57df\u9700\u8981\u5927\u4e00\u70b9\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\u3002  \n~~\u6709\u5c11\u91cf\u6ce8\u91ca\u3002~~\n\n### Coding.\n```cpp\n//\u613f\u4f60\u548c\u4f60\u91cd\u8981\u7684\u4eba\u80fd\u591f\u518d\u6b21\u91cd\u9022\uff01\n#include<bits/stdc++.h>\nusing namespace std;typedef long long ll;\ntemplate<typename T>inline void read(T &x)\n{\n\tx=0;char c=getchar(),f=0;\n\tfor(;c<48||c>59;c=getchar()) if(!(c^45)) f=1;\n\tfor(;c>=48&&c<=57;c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tf?x=-x:0;\n}\nstruct node{int x,y;double w;int id;bool operator<(node b) {return w<b.w;}}e[100005],e1[100005],e2[100005];\nint n,m,K,fa[10005],t1,t2;\ninline int getf(int x) {return fa[x]==x?x:fa[x]=getf(fa[x]);}\ninline char mrg(int x,int y) {x=getf(x),y=getf(y);if(x^y) return fa[x]=y,1;else return 0;}\n//\u2191\u5e76\u67e5\u96c6\ninline char check(ll w)\n{\n\tfor(int i=1;i<=t1;i++) e[i]=e1[i],e[i].w+=w/100000.0;\n\tint cnt=0;for(int i=1;i<=t2;i++) e[i+t1]=e2[i];\n\tsort(e+1,e+m+1);for(int i=1;i<=n;i++) fa[i]=i;//\u66b4\u529b\u6392\u5e8f\n\tfor(int i=1;i<=m;i++) if(mrg(e[i].x,e[i].y)) cnt+=(e[i].x==1||e[i].y==1);\n\treturn cnt<=K;//\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u70b9\u4e0e 1 \u76f8\u8fde\n}//\u2191\u4e8c\u5206check\u51fd\u6570\nint main()\n{\n\tread(n),read(m),read(K),assert(0);ll le=-1e16-7,ri=1e16+7,rs=1e16+7;//\u503c\u57df\uff0c\u5c3d\u91cf\u5927 \uff08assert(0)\u4e0d\u89e3\u91ca\n\tfor(int i=1,x,y,w;i<=m;i++) {read(x),read(y),read(w);if(x==1||y==1) e1[++t1]=(node){x,y,w,i};else e2[++t2]=(node){x,y,w,i};}\n\t//\u2191\u628a\u8fb9\u5206\u7c7b   \u2193wqs\u4e8c\u5206\u4e3b\u4f53\uff08\u4e00\u884c\n\twhile(le<=ri) {ll md=(le+ri)/2;if(check(md)) rs=md,ri=md-1;else le=md+1;}\n\tif(!check(rs)) return puts(\"-1\"),0;else printf(\"%d\\n\",n-1);\n\tfor(int i=1;i<=t1;i++) e[i]=e1[i],e[i].w+=rs/100000.0;\n\tfor(int i=1;i<=t2;i++) e[i+t1]=e2[i];\n\tsort(e+1,e+m+1);for(int i=1;i<=n;i++) fa[i]=i;\n\tfor(int i=1;i<=m;i++) if(mrg(e[i].x,e[i].y)) printf(\"%d \",e[i].id);\n\treturn putchar('\\n'),0;//\u2191\u8f93\u51fa\u65b9\u6848\uff0ccheck \u76f4\u63a5\u8d4b\u503c\u4e00\u904d\uff08\n}\n```",
        "postTime": 1612186895,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "CF125E MST Company\uff08\u9898\u89e3\uff09"
    },
    {
        "content": "\u8fd9\u91cc\u4e3b\u8981\u8bb2\u4e0b wqs \u4e8c\u5206\u6ca1\u6cd5\u6b63\u597d\u4e8c\u5206\u51fa\u9700\u8981\u7684\u6700\u5c0f\u751f\u6210\u6811\u65b9\u6848\u65f6\u8be5\u5982\u4f55\u6784\u9020\u65b9\u6848\n\n## \u89e3\u6790\n\n\u9898\u610f\u4ee5\u53ca\u524d\u9762\u57fa\u672c\u7684 wqs \u4e8c\u5206\u90e8\u5206\u5c31\u76f4\u63a5\u7565\u8fc7\u4e86\n\n\u8003\u8651\u4e3a\u4ec0\u4e48\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u4e8c\u5206\u51fa\u9700\u8981\u7684\u6700\u5c0f\u751f\u6210\u6811\u65b9\u6848\uff1a\u6b64\u65f6\u51fd\u6570\u7684\u6700\u5c0f\u503c\u5b9e\u9645\u4e0a\u4e0d\u518d\u662f\u4e00\u4e2a\u70b9\uff0c\u800c\u662f**\u4e00\u6bb5\u533a\u95f4**\uff0c\u8bbe\u5176\u4e3a $[l, r]$\n\n\u8fd9\u5b9e\u9645\u4e0a\u5c31\u4ee3\u8868\uff0c\u5728**\u5f53\u524d**\u7684\u56fe\u4e0a\uff08\u6240\u6709\u4e0e $1$ \u76f8\u8fde\u7684\u8fb9\u7684\u8fb9\u6743\u52a0\u4e0a\u8be5\u6b21\u4e8c\u5206\u7684 $C$ \u503c\u540e\u7684\u56fe\uff09\uff0c\u9009\u62e9 $k, l\\leq k\\leq r$ \u6761\u4e0e $1$ \u76f8\u8fde\u7684\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u65b9\u6848**\u90fd\u662f\u5b58\u5728\u7684**\n\n\u63a5\u7740\u6211\u4eec\u76f4\u63a5\u7ed9\u51fa\uff08\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u7531\u751f\u6210\u6811\u7684\u6027\u8d28\u800c\u542f\u53d1\u5f97\u5230\u7684...\uff09\u6784\u9020\u7684\u65b9\u6cd5\uff1a\n\n\uff08\u4e0b\u9762\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5747\u5c06 \u201c\u4e0e $1$ \u7ed3\u70b9\u76f8\u8fde\u7684\u8fb9\u201d \u79f0\u4e3a \u201c\u7279\u6b8a\u8fb9\u201d\uff09\n\n\u8bbe\u8981\u6c42\u6784\u9020\u7684\u65b9\u6848\u9700\u8981 $k$ \u6761\u7279\u6b8a\u8fb9\uff0c\u5728 \u201c\u5f53\u524d\u56fe\u201d \u4e0a\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6bcf\u79cd\u8fb9\u6743 $val$ \u81f3\u5c11\u8981\u7528 $c_{val}$ \u6761\u7279\u6b8a\u8fb9\uff08\u82e5\u8981\u5f97\u5230 $c_{val}$\uff0c\u53ea\u9700\u5728\u6392\u5e8f\u4e0a\u52a8\u624b\u811a\uff1a\u4f7f\u76f8\u540c\u8fb9\u6743\u7684\u5176\u5b83\u8fb9\u6392\u5728\u7279\u6b8a\u8fb9\u524d\u9762\uff0c\u8fd9\u6837\u5c31**\u5c3d\u91cf\u907f\u514d**\u4e86\u9009\u7279\u6b8a\u8fb9\uff09\n\n\u5728\u505a Kruskal \u65f6\uff08\u5c1a\u4e0d\u6e05\u695a\u662f\u5426\u6709\u57fa\u4e8e prim \u7684\u6784\u9020\u65b9\u6cd5...\uff09\uff0c\u6211\u4eec\u8bb0\u5f55\u5df2\u7ecf\u9009\u62e9\u7684\u7279\u6b8a\u8fb9\u7684\u6570\u91cf $\\text{cnt}$\uff08\u8865\u5145\uff1a\u5728\u7b2c\u4e8c\u79cd\u65b9\u6848\u4e2d\u7684\u5b9a\u4e49\u53ef\u80fd\u6709\u4e9b\u4e0d\u540c...\uff09\uff0c\u5e76\u4ee5\u76f8\u540c\u8fb9\u6743\u7684\u8fb9\u4e3a\u4e00\u7ec4\n\n\u4e00\u79cd\u65b9\u6848\u662f\uff1a\u5728\u505a\u6bcf\u4e00\u7ec4\u65f6\uff0c\u5148\u5c1d\u8bd5\u4f7f\u7528\u7279\u6b8a\u8fb9\uff0c\u5982\u679c\u53ef\u884c\uff0c\u4e14 $k-\\sum\\limits_{val} c_{val}+c_{now}-(\\text{cnt}-\\sum\\limits_{val\\in Pre} c_{val})>0$\uff08\u5176\u4e2d $Pre$ \u6307\u5df2\u7ecf\u5904\u7406\u8fc7\uff08\u4e0d\u542b\u5f53\u524d\uff09\u7684\u7ec4\u7684\u8fb9\u6743\u96c6\u5408\uff0c$c_{now}$ \u6307\u5f53\u524d\u6b63\u5904\u7406\u7684\u989c\u8272\u7684 $c$\uff09\uff0c\u5c31\u9009\u62e9\u8fd9\u6761\u8fb9\u3002\u5904\u7406\u5b8c\u7279\u6b8a\u8fb9\u540e\u518d\u5c1d\u8bd5\u4f7f\u7528\u975e\u7279\u6b8a\u8fb9\n\n\u53e6\u4e00\u79cd\u65b9\u6848\u662f\uff1a\u5148\u627e\u51fa\u4e00\u79cd\u9009\u62e9\u7279\u6b8a\u8fb9\u6700\u5c11\u7684\u6700\u5c0f\u751f\u6210\u6811\u65b9\u6848 $S$\u3002\u5728\u505a\u6bcf\u4e00\u7ec4\u65f6\uff0c\u6211\u4eec\u5148\u5c06 $S$ \u4e2d\u5b58\u5728\u7684\u7279\u6b8a\u8fb9\u5148\u8fde\u4e0a\uff08\u6ce8\u610f\u4e0d\u8981\u8fde\u975e\u7279\u6b8a\u8fb9\uff09\uff0c\u5e76\u4e14**\u4e0d\u8ba1\u5165** $\\text{cnt}$\uff0c\u4e4b\u540e\u4f9d\u7136\u5148\u5c1d\u8bd5\u4f7f\u7528\u7279\u6b8a\u8fb9\uff1b\u5982\u679c\u53ef\u884c\uff0c\u4e14 $k-\\text{cnt}>0$\uff0c\u90a3\u4e48\u5c31\u9009\u62e9\u8fd9\u6761\u8fb9\u3002\u5904\u7406\u5b8c\u7279\u6b8a\u8fb9\u540e\u518d\u5c1d\u8bd5\u4f7f\u7528\u975e\u7279\u6b8a\u8fb9\u3002\u8fd9\u79cd\u6784\u9020\u65b9\u5f0f\u5e94\u8be5\u4f1a\u66f4\u597d\u7406\u89e3\n\n\u6700\u540e\u8003\u8651\u8bc1\u660e\u8fd9\u79cd\u6784\u9020\u65b9\u5f0f\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u79cd\u6784\u9020\u65b9\u5f0f\u548c\u539f\u6765\u7684 Kruskal \u7b97\u6cd5\u662f\u6ca1\u6709\u672c\u8d28\u533a\u522b\u7684...\uff1b\u4e14\u76ee\u6807\u7684\u751f\u6210\u6811\u65b9\u6848\u5df2\u7ecf\u4fdd\u8bc1\u5b58\u5728\uff0c\u56e0\u6b64\u8be5\u6784\u9020\u65b9\u5f0f\u4e00\u5b9a\u6709\u89e3\n\n## CODE\n\n\u4ee3\u7801\u91cc\u53ef\u80fd\u663e\u5f0f\u6216\u9690\u5f0f\u5730\u5c06 \u4e0e $1$ \u7ed3\u70b9\u76f8\u8fde\u7684\u8fb9 \u79f0\u4e3a \u201c\u767d\u8fb9\u201d\uff0c\u5c06 \u9664\u6b64\u4ee5\u5916\u7684\u5176\u5b83\u8fb9 \u79f0\u4e3a \u201c\u9ed1\u8fb9\u201d\n\n\u53e6\u5916\u4ee3\u7801\u91cc\u7528\u7684\u662f\u540e\u4e00\u79cd\u6784\u9020\u65b9\u5f0f\n\n\u4ec5\u4f9b\u53c2\u8003\uff0c~~\u6709\u4e9b\u5730\u65b9\u7684\u5b9e\u73b0\u53ef\u80fd\u5f88\u70c2~~\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing std::sort;\n\nconst int MAXN =5e3+20, MAXM =1e5+20;\n\n/*------------------------------Disjoint Set------------------------------*/\n\nint fa[MAXN], rank[MAXN];\n\nint get_root(const int &x){\n\tif(fa[x] == x)\n\t\treturn x;\n\telse\n\t\treturn fa[x] =get_root(fa[x]);\n}\n\ninline void merge(int x, int y){\n\tx =get_root(x), y =get_root(y);\n\tif(rank[x] == rank[y])\n\t\t++rank[x];\n\telse if(rank[x] < rank[y])\n\t\trank[y] ^=rank[x] ^=rank[y] ^=rank[x];\n\tfa[y] =x;\n}\n\nvoid clear_disjointSet(const int &n){\n\tfor(int i =1; i <= n; ++i)\n\t\tfa[i] =i, rank[i] =0;\n}\n\n/*------------------------------Kruskal------------------------------*/\n\nstruct edge{\n\tint u, v, w, id;\n\tbool col;\n}e_b[MAXM], e_w[MAXM], e_qaq[MAXM];\nint totb, totw, tot;\n\nbool cmp(const edge &A, const edge &B){\n\treturn A.w < B.w;\n}\n\nint edge_chosen_id[MAXN];\n\n#define e e_qaq\n\nint debug_val;/*\u6700\u5c0f\u751f\u6210\u6811\u6743*/\nint calc(const int &n, const int &C){\n\tdebug_val =0;\n\t\n\ttot =0;\n\tfor(int i =0, j =0; i < totb || j < totw;){\n\t\tif(i < totb && j < totw){\n\t\t\tif(e_b[i].w <= e_w[j].w+C)/*\u4f18\u5148\u9ed1\u8fb9 -> \u5c3d\u53ef\u80fd\u5c11\u9009\u767d\u8fb9 ( -> \u6700\u5c0f\u503c\u533a\u95f4\u5de6\u7aef\u70b9 )*/\n\t\t\t\te[tot++] =e_b[i++];\n\t\t\telse\n\t\t\t\te[tot] =e_w[j++], e[tot++].w +=C;\n\t\t}\n\t\telse if(i < totb)\n\t\t\te[tot++] =e_b[i++];\n\t\telse\n\t\t\te[tot] =e_w[j++], e[tot++].w +=C;\n\t}\n\t\n\tclear_disjointSet(n);\n\tint cnt =0, ret =0;\n\tfor(int i =0; cnt < n-1 && i < tot; ++i)\n\t\tif(get_root(e[i].u) != get_root(e[i].v)){\n\t\t\tdebug_val +=e[i].w;\n\t\t\tif(e[i].col == 0)\n\t\t\t\t++ret;\n\t\t\tmerge(e[i].u, e[i].v);\n\t\t\tedge_chosen_id[cnt] =e[i].id;\n\t\t\t++cnt;\n\t\t}\n\t\n\treturn ret;\n}\n\n#undef e\n\n/*------------------------------Wrok------------------------------*/\n\nbool check_illegal(const int &n, const int &k){/*\u6784\u9020\u751f\u6210\u6811\u65f6\u5c3d\u53ef\u80fd\u5730\u4e0d\u9009\u767d\u8fb9*/\n\tclear_disjointSet(n);\n\tint cnt =0, cnt_w =0;\n\tfor(int i =0; i < totb && cnt < n-1; ++i)\n\t\tif(get_root(e_b[i].u) != get_root(e_b[i].v)){\n\t\t\tmerge(e_b[i].u, e_b[i].v);\n\t\t\t++cnt;\n\t\t}\n\tfor(int i =0; i < totw && cnt < n-1; ++i)\n\t\tif(get_root(e_w[i].u) != get_root(e_w[i].v)){\n\t\t\tmerge(e_w[i].u, e_w[i].v);\n\t\t\t++cnt_w;\n\t\t\t++cnt;\n\t\t}\n\treturn (k < cnt_w || cnt != n-1);\n}\n\nedge e_backup[MAXM];\nint tmp_backup, C_backup, debug_val_backup;\n\nint cnt_l[MAXM], cnt_r[MAXM], tot_cnt;\nbool e_chosen[MAXM];/*\u6807\u8bb0\u6bcf\u79cd\u4e0d\u540c\u7684\u8fb9\u6743\u4e2d\uff0c\u9009\u6700\u5c11\u767d\u8fb9\u65b9\u6848 ( \u53ef\u80fd\u662f\u591a\u79cd\u65b9\u6848\u4e2d\u7684\u4e00\u79cd ) \u4e2d\u7684\u767d\u8fb9*/\n\nint e_ans[MAXN], tote_ans;\n\n#define e e_backup\n\n/*->>\u8fd9\u91cc\u548c wqs \u4e8c\u5206\u57fa\u672c\u65e0\u5173*/\n/*\u89e3\u5e94\u5f53\u4e00\u5b9a\u5b58\u5728*/\nvoid find_a_solution(const int &n, const int &m, const int &k){\n\tfor(int i =0; i < m; ++i){\n\t\tif(i == 0){\n\t\t\tcnt_l[0] =0;\n\t\t\t++tot_cnt;\n\t\t}\n\t\telse if(e[i].w != e[i-1].w){\n\t\t\tcnt_r[tot_cnt-1] =i-1;\n\t\t\tcnt_l[tot_cnt] =i;\n\t\t\t++tot_cnt;\n\t\t}\n\t\tif(i == m-1)\n\t\t\tcnt_r[tot_cnt-1] =m-1;\n\t}\n\t\n\t/*\u627e\u51fa\u4e00\u79cd\u6700\u5c0f\u751f\u6210\u6811\u65b9\u6848\uff0c\u4f7f\u5f97\u767d\u8fb9\u6700\u5c11*/\n\tclear_disjointSet(n);\n\tint cnt =0;\n\tfor(int i =0; cnt < n-1; ++i){\n\t\tif(get_root(e[i].u) != get_root(e[i].v)){\n\t\t\tif(e[i].col == 0)\n\t\t\t\te_chosen[i] =1;\n\t\t\tmerge(e[i].u, e[i].v);\n\t\t\t++cnt;\n\t\t}\n\t\t++i;\n\t}\n\t\n\tclear_disjointSet(n);\n\tcnt =0;\n\tint delta_w =k-tmp_backup;/*\u8fd8\u5dee\u591a\u5c11\u767d\u8fb9*/\n\tfor(int chunk =0; chunk < tot_cnt && cnt < n-1; ++chunk){/*\u6ce8\u610f\u53ea\u6709\u540c\u8fb9\u6743\u7684\u8fb9\u4e4b\u95f4\u4f1a \" \u66ff\u6362 \" ( \u5f71\u54cd )*/\n\t\tfor(int i =cnt_l[chunk]; i <= cnt_r[chunk]; ++i)/*\u5148\u9009 \" \u767d\u8fb9\u6700\u5c11\u7684\u65b9\u6848 \" \u4e2d\u7684\u767d\u8fb9*/\n\t\t\tif(e_chosen[i]){\n\t\t\t\tmerge(e[i].u, e[i].v);\n\t\t\t\te_ans[tote_ans++] =e[i].id;\n\t\t\t\t++cnt;\n\t\t\t}\n\t\tif(delta_w > 0)/*\u8fd8\u9700\u8981\u591a\u9009\u4e00\u4e9b\u767d\u8fb9*/\n\t\t\tfor(int i =cnt_l[chunk]; delta_w > 0 && i <= cnt_r[chunk]; ++i)\n\t\t\t\tif(!e_chosen[i] && e[i].col == 0){\n\t\t\t\t\tif(get_root(e[i].u) != get_root(e[i].v)){\n\t\t\t\t\t\tmerge(e[i].u, e[i].v);\n\t\t\t\t\t\te_ans[tote_ans++] =e[i].id;\n\t\t\t\t\t\t--delta_w;\n\t\t\t\t\t\t++cnt;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\tfor(int i =cnt_l[chunk]; i <= cnt_r[chunk]; ++i)/*\u6700\u540e\u9009\u9ed1\u8fb9*/\n\t\t\tif(e[i].col == 1){\n\t\t\t\tif(get_root(e[i].u) != get_root(e[i].v)){\n\t\t\t\t\tmerge(e[i].u, e[i].v);\n\t\t\t\t\te_ans[tote_ans++] =e[i].id;\n\t\t\t\t\t++cnt;\n\t\t\t\t}\n\t\t\t}\n\t}\n}\n\n#undef e\n\n/*------------------------------Main------------------------------*/\n\nint read(){\n\tint x =0; char c =getchar();\n\twhile(c < '0' || c > '9') c =getchar();\n\twhile(c >= '0' && c <= '9') x =(x<<1)+(x<<3)+(48^c), c =getchar();\n\treturn x;\n}\n\nint main(){\n\tint n =read(), m =read(), k =read();\n\tfor(int i =0; i < m; ++i){\n\t\tint s =read(), t =read(), c =read();\n\t\tif(s == 1 || t == 1){\n\t\t\te_w[totw].u =s;\n\t\t\te_w[totw].v =t;\n\t\t\te_w[totw].w =c;\n\t\t\te_w[totw].col =0;\n\t\t\te_w[totw].id =i+1;\n\t\t\t++totw;\n\t\t}\n\t\telse{\n\t\t\te_b[totb].u =s;\n\t\t\te_b[totb].v =t;\n\t\t\te_b[totb].w =c;\n\t\t\te_b[totb].col =1;\n\t\t\te_b[totb].id =i+1;\n\t\t\t++totb;\n\t\t}\n\t}\n\tsort(e_b, e_b+totb, cmp);\n\tsort(e_w, e_w+totw, cmp);\n\t\n\t/*\u68c0\u67e5 k \u662f\u5426\u5408\u6cd5 ( \u51fd\u6570\u53d6\u503c\u5728 k \u662f\u5426\u4e0d\u5b58\u5728 )*/\n\tif(k > n-1 || k > totw){/*\u4e0a\u754c\u68c0\u67e5 - \u8fb9\u4e0d\u8db3*/\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}\n\telse if(check_illegal(n, k)){/*\u4e0b\u754c\u68c0\u67e5 - \u6700\u5c11\u53ef\u9009\u7684\u767d\u8fb9\u8fc7\u591a\uff1b\u4ee5\u53ca\u987a\u4fbf\u68c0\u67e5\u662f\u5426\u8054\u901a*/\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}\n\t\n\tint l =-5e8, r =5e8;\n\twhile(l <= r){/*wqs*/\n\t\tint mid =(l+r)>>1;\n\t\tint tmp =calc(n, mid);\n\t\tif(tmp < k){\n\t\t\tdebug_val_backup =debug_val;\n\t\t\ttmp_backup =tmp;\n\t\t\tC_backup =mid;\n\t\t\tfor(int i =0; i < tot; ++i)\n\t\t\t\te_backup[i] =e_qaq[i];\n\t\t}\n\t\tif(tmp < k)\n\t\t\tr =mid-1;\n\t\telse if(tmp > k)\n\t\t\tl =mid+1;\n\t\telse\n\t\t\tbreak;\n\t}\n\t\n\tif(l <= r){/*\u76f4\u63a5\u627e\u5230\u4e86\u7b54\u6848*/\n\t\tprintf(\"%d\\n\", n-1);\n\t\tfor(int i =0; i < n-1; ++i)\n\t\t\tprintf(\"%d \", edge_chosen_id[i]);\n\t\treturn 0;\n\t}\n\telse{/*\u9700\u8981\u6784\u9020\u65b9\u6848*/\n\t\tfind_a_solution(n, m, k);\n\t//\tprintf(\"%d\\n\", debug_val_backup-C_backup*k);/*\u6700\u5c0f\u751f\u6210\u6811\u6743*/\n\t\tprintf(\"%d\\n\", n-1);\n\t\tfor(int j =0; j < n-1; ++j)\n\t\t\tprintf(\"%d \", e_ans[j]);\n\t}\n}\n```\n\n## \u4e00\u4e9b\u8bdd\n\n\u539f\u672c\u662f\u6253\u7b97\u597d\u597d\u8bc1\u660e\u4e0b\u8fd9\u79cd\u6784\u9020\u65b9\u5f0f\u7684\u6b63\u786e\u6027\u7684...\n\n\u7ed3\u679c\u5199\u7740\u5199\u7740\u53d1\u73b0\u4e0e\u5176\u5199\u8fd9\u4e48\u4e00\u5927\u6bb5\u8fd8\u4e0d\u5982\u76f4\u63a5\u5f52\u7ea6\u5230 Kruskal \u4e0a...\uff08\u5f53\u7136\u4e5f\u6ca1\u5199\u5b8c\uff0c\u56e0\u4e3a\u65f6\u95f4\u7b49\u7b49\u539f\u56e0 \\fad\uff09\n\n\u5982\u679c\u6709\u4eba\u60f3\u7ee7\u7eed\u63a2\u7d22\u8fd9\u79cd\u6784\u9020\u65b9\u6848\u7684\u6027\u8d28\u7684\u8bdd\uff0c\u8fd9\u91cc\u5c31\u653e\u51e0\u4e2a\u4e4b\u524d\u5199\u5728\u6b63\u6587\u7684\u5f15\u7406\uff1a\n\n---\n\n\u5f15\u7406 $1.$ \u5bf9\u4e8e\u8fb9\u6743\u5747\u4e0d\u76f8\u7b49\u7684\u65e0\u5411\u56fe\uff0c\u5176\u6700\u5c0f\u751f\u6210\u6811\u552f\u4e00\n\n\u8bc1\u660e\u53ea\u9700\u8003\u8651\u53cd\u8bc1\u6cd5\u5373\u53ef\uff08\u4ee5\u4e0b\u8bc1\u660e\u642c\u81ea\u7ef4\u57fa\uff09\uff1a\n\n![\u8bc1\u660e1](https://cdn.luogu.com.cn/upload/image_hosting/yf9psj08.png)\n\n\u5f15\u7406 $2.$ \u82e5\u65e0\u5411\u56fe\u6709\u591a\u79cd\u6700\u5c0f\u751f\u6210\u6811\u65b9\u6848\uff0c\u5219\u6240\u6709\u65b9\u6848\u7684\u6bcf\u79cd\u8fb9\u6743\u7684\u8fb9\u6570\u90fd\u662f\u76f8\u7b49\u7684\n\n\u53ea\u9700\u5957\u7528\u8bc1\u660e \u5f15\u7406 $1.$ \u7684\u6a21\u5f0f\u5373\u53ef\n\n\u5f15\u7406 $3.$ \u5728\u65e0\u5411\u56fe\u7684\u591a\u79cd\u6700\u5c0f\u751f\u6210\u6811\u65b9\u6848\u4e4b\u95f4\uff0c\u82e5\u4e00\u6761\u8fb9 $e_1$ \u80fd \u201c\u66ff\u6362\u201d \u53e6\u4e00\u6761\u540c\u8fb9\u6743\u7684\u8fb9 $e_2$\uff0c\u90a3\u4e48\u5b83\u4eec\u4e00\u5b9a\u540c\u65f6\u5728\u67d0\u4e2a\u73af\u4e0a\n\n\uff08\u201c\u66ff\u6362\u201d \u8fd9\u4e2a\u8bcd\u53ef\u80fd\u6709\u70b9\u4e0d\u4e25\u8c28...\u8fd9\u6837\u5199\u611f\u89c9\u6bd4\u8f83\u7b80\u6d01\uff0c\u89c1\u8c05X\uff09\n\n\u8bc1\u660e\u5f88\u663e\u7136\u3002\u5426\u5219 \u201c\u66ff\u6362\u201d \u540e\u7684\u65b9\u6848\u5c31\u4e0d\u518d\u662f\u751f\u6210\u6811\u4e86\n\n---\n\n\u5e0c\u671b\u6709\u6240\u5e2e\u52a9X",
        "postTime": 1603672842,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF125E \u3010MST Company\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\u8fd9\u9053\u9898\u9700\u8981\u6211\u4eec\u6c42\u4e00\u79cd\u7279\u6b8a\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\u7ed9\u5b9a\u4e00\u4e2a\u6709$n$\u4e2a\u8282\u70b9\u548c$m$\u6761\u8fb9\u7684\u56fe\uff0c\u627e\u51fa\u4e00\u4e2a\u751f\u6210\u6811\u6ee1\u8db3\u4ece\u6839\u8282\u70b9$1$\u76f4\u63a5\u8fde\u5411\u5176\u4f59\u8282\u70b9\u7684\u8fb9\u8981\u6070\u597d\u662f$k$\u6761\uff0c\u5728\u6b64\u6761\u4ef6\u4e0b\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u6700\u5c0f\u3002\n\n## \u5206\u6790\n### \u7b97\u6cd51\n\u7406\u8bba\u4e0a\u597d\u50cf\u62d3\u5c55\u6b21\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\uff08$k$\u5c0f\u751f\u6210\u6811\uff09\u662f\u53ef\u4ee5\u5199\u51fa\u6765\u7684\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u5927\u7ea6\u662f$O(n^3)$\uff0c\u6240\u4ee5\u4e0d\u80fd\u901a\u8fc7\u3002\uff08\u5982\u679c\u6709dalao\u7528\u8fd9\u79cd\u65b9\u6cd5\u5199\u51fa\u590d\u6742\u5ea6\u66f4\u4f4e\u7684\uff0c\u90a3\u4e48\u5c31\u5f53\u6211\u8fd9\u53e5\u8bdd\u6ca1\u8bf4\uff09\u3002\n\n### \u7b97\u6cd52\n\u6211\u4eec\u8003\u8651\u4f7f\u7528\u6700\u5c0f\u751f\u6210\u6811\u7684`Kruskal`\u7b97\u6cd5\u4f5c\u4e3a\u57fa\u7840\u3002`Kruskal`\u9700\u8981\u5bf9\u8fb9\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u8d2a\u5fc3\u9009\u62e9\u3002\u4e3a\u4e86\u4fdd\u8bc1\u4e0e\u6839\u7684\u8fde\u8fb9\u6570\u91cf\u7b26\u5408\u6761\u4ef6\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u8003\u8651\u5bf9\u8fd9\u4e9b\u8fb9\u201c\u52a8\u4e00\u4e9b\u624b\u811a\u201d\u5462\uff1f\n\n\u4e8e\u662f\u6211\u4eec\u628a\u6240\u6709\u7684\u8fb9\u5206\u6210\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u4e0e\u6839\u6709\u8054\u7cfb\u7684\u8fb9\u96c6$E_1$\uff0c\u53e6\u4e00\u7c7b\u662f\u5176\u4ed6\u666e\u901a\u8fb9\u6784\u6210\u7684\u8fb9\u96c6$E_2$\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7ed9$E_1$\u4e2d\u7684\u8fb9\u5168\u90e8\u52a0\u4e0a\u4e00\u4e2a\u6216\u6b63\u6216\u8d1f\u503c$p$\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6539\u53d8\u8fd9\u4e9b\u8fb9\u6392\u5e8f\u65f6\u539f\u6709\u7684\u6b21\u5e8f\u3002\n\n\u6bd4\u5982\uff0c\u5982\u679c\u6211\u4eec\u7ed9\u6bcf\u4e00\u6761\u8fb9\u90fd\u52a0\u4e0a$-100001$\u7684\u6743\u503c\uff0c\u90a3\u4e48\u6240\u6709$E_1$\u4e2d\u7684\u8fb9\u90fd\u6392\u5728$E_2$\u7684\u8fb9\u4e4b\u524d\uff08\u6570\u636e\u8303\u56f4$1\\le w_i\\le 10^5$\uff09\uff1b\u5982\u679c\u52a0\u4e0a$100001$\u7684\u6743\u503c\uff0c\u90a3\u4e48\u6240\u6709$E_1$\u4e2d\u7684\u8fb9\u90fd\u6392\u5728$E_2$\u7684\u8fb9\u4e4b\u540e\u3002\u5982\u679c\u8fd9\u4e2a$p$\u7684\u7edd\u5bf9\u503c\u8f83\u5c0f\uff0c\u90a3\u4e48\u5c31\u6709\u53ef\u80fd\u4f7f$E_1$\u4e2d\u8fb9\u7684\u6392\u540d\u7a0d\u5fae\u9760\u524d\u6216\u9760\u540e\u4e00\u70b9\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u8fd9\u4e2a\u503c$p$\uff0c\u4f7f\u5f97\u5b83\u521a\u597d\u4e0e\u6839\u7684\u8fde\u8fb9\u6709$k$\u6761\u3002\u4e8c\u5206\u7684\u5355\u8c03\u6027\u662f\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u540c\u65f6\u7ed9$E_1$\u4e2d\u7684\u8fb9\u52a0\u4e0a$p$\u4e4b\u540e\uff0c$E_1$\u5185\u548c$E_2$\u5185\u5404\u81ea\u7684\u8fb9\u76f8\u5bf9\u987a\u5e8f\u4e0d\u53d8\uff0c\u5e76\u4e14\u628a$E_1$\u8fb9\u6743\u53d8\u5c0f\u4e4b\u540e\u6392\u540d\u4e0d\u4f1a\u53d8\u540e\u3002\u6240\u4ee5\u8fd9\u4e2a\u7ed3\u679c\u662f\u5177\u6709\u5355\u8c03\u6027\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u67e5\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684$p$\u662f\u7684\u6839\u8282\u70b9\u5ea6\u9650\u5236\u6070\u597d\u4e3a$k$\u3002\u4f46\u662f\u6ce8\u610f\u5230\u6709\u7684\u65f6\u5019\u8fd9\u4e2a\u7b97\u6cd5\u4e8c\u5206\u51fa\u7684\u7ed3\u679c\u5e76\u4e0d\u662f\u6070\u597d$k$\u6761\uff0c\u800c\u6211\u4eec\u8981\u4f18\u5148\u4fdd\u8bc1\u6709\u89e3\u3002\u6240\u4ee5\u6211\u4eec\u6700\u597d\u8981\u7279\u5224\u4e00\u4e0b\uff0c\u7136\u540e\u6309\u7167\u4e0a\u9762\u7684\u7b97\u6cd5\u9009\u62e9\uff0c\u540c\u65f6\u52a0\u5165\u201c\u5982\u679c\u5df2\u7ecf\u5927\u4e8e$k$\uff0c\u90a3\u4e48\u5c31\u7565\u8fc7\u6b64\u8fb9\u201d\u3002\u6700\u540e\u4ee3\u7801\u4e2d\u7279\u5224\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u5373\u53ef\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nconst int MAXN=5010;\nconst int MAXM=100010;\n\nstruct edge{\n    int u,v;double w;\n    void adde(int u,int v,double w){\n        this->u=u;\n        this->v=v;\n        this->w=w;\n    }\n}e[MAXM];\nstruct vect{\n    int val[MAXM],tp;\n    vect(){\n        tp=0;\n    }\n    void clear(){\n        tp=0;\n    }\n    void push(int v){\n        val[++tp]=v;\n    }\n}res;\n\nint n,m,k,p,ans=2147483647;\nint ord[MAXM],cap;\n\nstruct ufs{\n    int father[MAXN],sz;\n    void resize(int n){\n        sz=n;\n        for(int i=1;i<=n;i++)\n            father[i]=i;\n    }\n    int getfather(int x){\n        if(x==father[x])\n            return father[x];\n        return father[x]=getfather(father[x]);\n    }\n}sol;\n\ndouble wet;//weight\nbool cmp_wet(const int &l,const int &r){\n    double lans=e[l].w,rans=e[r].w;\n    if(e[l].u==1)\n        lans+=wet;\n    if(e[r].u==1)\n        rans+=wet;\n    return lans<rans;\n}\nvoid check(){//kruscal\n    sol.resize(n);res.clear();cap=0;\n    std::sort(ord+1,ord+m+1,cmp_wet);//\u6309\u7167\u6743\u91cd\u6392\u5e8f.\n    for(int i=1;i<=m;i++){\n        int a=sol.getfather(e[ord[i]].u),b=sol.getfather(e[ord[i]].v);\n        if(a==b)\n            continue;\n        sol.father[a]=b;\n        if(e[ord[i]].u==1)\n            cap++;\n        res.push(ord[i]);\n        if(--sol.sz==1)\n            return;\n    }\n}\nvoid calc(){\n    sol.resize(n);res.clear();cap=0;\n    std::sort(ord+1,ord+m+1,cmp_wet);//\u6309\u7167\u6743\u91cd\u6392\u5e8f.\n    for(int i=1;i<=m;i++){\n        int a=sol.getfather(e[ord[i]].u),b=sol.getfather(e[ord[i]].v);\n        if(a==b)\n            continue;\n        if(e[ord[i]].u==1)\n            cap++;\n        if(cap>k){\n            cap--;\n            continue;\n        }\n        sol.father[a]=b;\n        res.push(ord[i]);\n        if(--sol.sz==1)\n            return;\n    }\n}\n\nint main(){\n//\tfreopen(\"test.in\",\"r\",stdin);\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=m;i++){\n        int u,v;double w;scanf(\"%d%d%lf\",&u,&v,&w);\n        if(u>v)\n            std::swap(u,v);\n        e[i].adde(u,v,w);\n        if(u==1)\n            p++;\n    }\n    if(p<k||(n>1&&!k)){\n        puts(\"-1\");\n        return 0;\n    }\n    for(int i=1;i<=m;i++)\n        ord[i]=i;\n        \n    check();\n    if(sol.sz>1)//\u4e0d\u8fde\u901a \n    {\n        puts(\"-1\");\n        return 0;\n    }\n    double l=-1e5,r=1e5+0.5;\n    for(;;)\n    {\n        if(cap==k)\n            break;\n        if(l+0.1>r&&cap>k)\n            break;\n        \n        double mid=(l+r)/2.0;\n        wet=mid;check();\n        \n        if(cap<k)\n            r=mid;\n        else\n            l=mid;\n    }\n    if(cap!=k)\n    \tcalc();\n    printf(\"%d\\n\",res.tp);\n    for(int i=1;i<=res.tp;i++)\n    \tprintf(\"%d \",res.val[i]);\n    return 0;\n} \n```",
        "postTime": 1522040092,
        "uid": 23398,
        "name": "frankchenfu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF125E \u3010MST Company\u3011"
    },
    {
        "content": "[**\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u3002**](https://www.cnblogs.com/mfeitveer/p/16852540.html)\n\n\u4ee3\u7801\u5199\u7684\u53ef\u80fd\u6bd4\u8f83\u7e41\u7410\uff0c\u8bf7\u89c1\u8c05\u3002\n\n### \u601d\u8def\n\n\u9996\u5148\u8003\u8651 $\\text{wqs}$ \u4e8c\u5206\u3002\n\n\u5bf9\u6240\u6709\u8fde\u5411 $s$ \u7684\u8fb9\u8fdb\u884c\u5b9a\u91cf\u504f\u79fb\u3002\n\n\u5373\u6240\u6709\u8fde\u5411 $s$ \u7684\u8fb9\u7684\u8fb9\u6743 $q$ \u52a0\u4e0a\u4e8c\u5206\u7684\u5b9a\u91cf $\\Delta$\u3002\n\n\u5c31\u53ef\u4ee5\u5c06\u8fd9\u4e00\u4e2a\u95ee\u9898\u53d8\u6210\u4e00\u4e2a\u53ef\u884c\u6027\u95ee\u9898\u3002\n\n\u53ef\u80fd\u6bd4\u8f83\u56f0\u96be\u7684\u4e00\u70b9\u5c31\u662f\u5f53 $\\Delta$ \u4e00\u5b9a\u65f6\uff0c\u53ef\u80fd\u62e5\u6709\u4e0d\u540c\u7684 $k$ \u7684\u65b9\u6848\u3002\n\n\u672c\u7bc7\u4e3b\u8981\u8bb2\u8ff0\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u6b63\u786e\u7684\u65b9\u6848\u3002\n\n\u9996\u5148\u5224\u65ad\u4e00\u4e2a\u65e0\u89e3\u7684\u60c5\u51b5\u3002\n\n1. \u4ece $s$ \u7684\u51fa\u8fb9\u4e0d\u8db3 $k$\u3002\n2. \u539f\u56fe\u4e0d\u8054\u901a\u3002\n3. \u4f7f\u539f\u56fe\u8054\u901a $s$ \u5fc5\u987b\u8fde\u7684\u51fa\u8fb9\u8d85\u8fc7 $k$\u3002\n\n\u9664\u53bb\u4e0a\u9762\u4e09\u79cd\u60c5\u51b5\uff0c\u6240\u6709\u7684\u60c5\u51b5\u5fc5\u7136\u4f1a\u6709\u4e00\u4e2a\u89e3\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u504f\u79fb\u91cf\u5982\u4f55\u6784\u9020\u51fa\u8fd9\u6837\u7684\u4e00\u4e2a\u89e3\u3002\n\n\u9996\u5148\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u7ec4 $s$ \u51fa\u8fb9\u6700\u5c11\u7684\u89e3\u3002\n\n\u8003\u8651\u5728\u6b64\u57fa\u7840\u4e0a\u5c06\u5176\u589e\u52a0\u81f3 $k$ \u6761\u51fa\u8fb9\u3002\n\n\u5bf9\u4e8e\u76f8\u540c\u6743\u503c\u7684\u8fb9\uff0c\u6211\u4eec\u5148\u5c06\u539f\u65b9\u6848\u4e2d\u6240\u8fde\u7684\u51fa\u8fb9\u8fdb\u884c\u8fde\u63a5\u3002\n\n\u7136\u540e\u5982\u679c\u4e0d\u8db3 $k$ \u6761\u51fa\u8fb9\uff0c\u518d\u53bb\u8003\u8651\u76f8\u540c\u6743\u503c\u4e0b\u7684\u5176\u4ed6\u51fa\u8fb9\u3002\n\n\u6700\u540e\u518d\u53bb\u8003\u8651\u76f8\u540c\u6743\u503c\u4e0b\u7684\u5176\u4ed6\u8fb9\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u539f\u65b9\u6848\u4e2d\u6240\u8fde\u7684\u51fa\u8fb9\u4e00\u5b9a\u8fd8\u4f1a\u5728\u65b0\u65b9\u6848\u4e2d\u88ab\u8fde\u3002\n\n\u8fd9\u662f\u7531\u4e8e\u867d\u7136\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e9b\u8fb9\uff0c\u4f46\u5bf9\u4e8e\u539f\u65b9\u6848\u4e2d\u6240\u8fde\u7684\u51fa\u8fb9\u6240\u66f4\u6539\u7684\u8054\u901a\u6027\u662f\u4e0d\u4f1a\u8fdb\u884c\u6539\u53d8\u7684\uff08\u4e0d\u7136\u5c31\u4f1a\u51fa\u73b0\u5728\u539f\u65b9\u6848\u4e2d\uff09\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u4e5f\u4e00\u5b9a\u4e0d\u4f1a\u6bd4\u539f\u65b9\u6848\u66f4\u52a3\uff08\u539f\u7406\u5927\u81f4\u4e0e\u6734\u7d20\u7684 $\\text{kruskal}$ \u5dee\u4e0d\u591a\uff09\uff0c\u5e76\u4e14\u4e00\u5b9a\u6709\u89e3\u3002\n\n\u8fd9\u6837\u5c31\u6709\u4e86\u4e00\u4e2a\u5927\u81f4\u7684\u7b97\u6cd5\u6d41\u7a0b\u3002\n\n\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\n\nconst int N = 1000010;\n\nint n, m, k, s, kl, top, fa[N], vis[N], ans[N];\n\nclass Graph\n{\n    public:\n        int cnt;\n        struct edge { int to, nxt, val, id; }e[N];\n        inline edge &operator[](int tmp) { return e[tmp]; }\n        inline void init(int x) { for (int i = 1;i <= cnt;i++) e[i].val += x; }\n        inline void add(int x , int y , int z , int i) { e[++cnt] = {x, y, z, i}; }\n        inline void mySort() { sort(e + 1, e + cnt + 1, [](edge a, edge b) { return a.val < b.val; }); }\n} graBlack, graWhite;\n\ninline int read()\n{\n    int asd = 0 , qwe = 1; char zxc;\n    while(!isdigit(zxc = getchar())) if(zxc == '-') qwe = -1;\n    while(isdigit(zxc)) asd = asd * 10 + zxc - '0' , zxc = getchar();\n    return asd * qwe;\n}\n\ninline bool check(int x , int y) { return (x == s || y == s); }\ninline int gf(int x) { return (fa[x] == x ? fa[x] : fa[x] = gf(fa[x])); }\n\ninline bool merge(int x , int y) \n{ \n    int fx = gf(x), fy = gf(y); \n    if(fx == fy) return 0;\n    fa[fx] = fy; return 1;\n}\n\ninline int kruskal()\n{\n    int num = 0; top = 0;\n    iota(fa + 1, fa + n + 1, 1);\n    for (int i = 1, l = 1, r = 1; i <= m; i++)\n        if (l <= graBlack.cnt && graBlack[l].val < graWhite[r].val)\n            merge(graBlack[l].to, graBlack[l].nxt) , l++;\n        else num += merge(graWhite[r].to, graWhite[r].nxt), r++;\n    return num;\n}\n\ninline void checkSol()\n{\n    int cnt = 0 , sum = 0;\n    for (int i = 1; i <= graBlack.cnt;i++)\n        cnt += merge(graBlack[i].to, graBlack[i].nxt);\n    for (int i = 1; i <= graWhite.cnt; i++)\n        if(merge(graWhite[i].to, graWhite[i].nxt)) cnt++, sum++;\n    if (cnt != n - 1 || sum > k || graWhite.cnt < k)\n        puts(\"-1\"), exit(0);\n}\n\ninline void makeSol(int mid)\n{\n    graWhite.init(mid), top = 0;\n    iota(fa + 1, fa + n + 1, 1);\n    int sum = 0, l = 1, r = 1, i, j;\n    for (i = 1; i <= m; i++)\n        if (l <= graBlack.cnt && graBlack[l].val <= graWhite[r].val)\n            merge(graBlack[l].to, graBlack[l].nxt), l++;\n        else \n        {\n            if (merge(graWhite[r].to, graWhite[r].nxt))\n                vis[r] = 1, k--;\n            r++;\n        };\n    l--, r--, top = 0;\n    iota(fa + 1, fa + n + 1, 1);\n    for (i = 1, j = 1; i <= graBlack.cnt;i++)\n    {\n        while(j <= r && graWhite[j].val <= graBlack[i].val)\n        {\n            int ls = j, rs = j;\n            int x = graWhite[j].val;\n            while(rs < r && graWhite[rs + 1].val == x)\n                rs++;\n            for (int j = ls; j <= rs;j++)\n                if (vis[j] && merge(graWhite[j].to, graWhite[j].nxt))\n                    sum += graWhite[j].val, ans[++top] = graWhite[j].id;\n            for (int j = ls; j <= rs && k; j++)\n                if(merge(graWhite[j].to, graWhite[j].nxt))\n                    sum += graWhite[j].val, k--, ans[++top] = graWhite[j].id;\n            j = rs + 1;\n        }\n        if(merge(graBlack[i].to, graBlack[i].nxt))\n            sum += graBlack[i].val, ans[++top] = graBlack[i].id;\n    }\n    while (j <= r)\n    {\n        int ls = j, rs = j;\n        int x = graWhite[j].val;\n        while (rs < r && graWhite[rs + 1].val == x)\n            rs++;\n        for (int j = ls; j <= rs; j++)\n            if (vis[j] && merge(graWhite[j].to, graWhite[j].nxt))\n                sum += graWhite[j].val, ans[++top] = graWhite[j].id;\n        for (int j = ls; j <= rs && k; j++)\n            if (merge(graWhite[j].to, graWhite[j].nxt))\n                sum += graWhite[j].val, k--, ans[++top] = graWhite[j].id;\n        j = rs + 1;\n    }\n    cout << n - 1 << endl;\n    for (i = 1; i <= top;i++)\n        cout << ans[i] << \" \";\n    cout << endl;\n}\n\ninline void wqsDichotomous()\n{\n    int l = -1e9, r = 1e9;\n    graBlack.mySort(), graWhite.mySort();\n    while (l <= r)\n    {\n        int mid = (l + r) >> 1;\n        graWhite.init(mid);\n        int x = kruskal();\n        graWhite.init(-mid);\n        if (x > k) l = mid + 1;\n        if (x < k) r = mid - 1;\n        if (x == k) break;\n    }\n    makeSol((l + r) >> 1);\n}\n\nsigned main()\n{\n    n = read(), m = read(), s = 1, kl = k = read();\n    iota(fa + 1, fa + n + 1, 1);\n    for (int i = 1; i <= m; i++)\n    {\n        int x = read(), y = read(), z = read();\n        if (check(x, y)) graWhite.add(x, y, z, i);\n        else graBlack.add(x, y, z, i);\n    }\n    checkSol(), wqsDichotomous();\n    return 0;\n}\n```\n",
        "postTime": 1667395553,
        "uid": 320933,
        "name": "Mfeitveer",
        "ccfLevel": 0,
        "title": "CF125E MST Company \u9898\u89e3"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.org/problemnew/show/CF125E)\n\n\u51f8\u4f18\u5316\u3002\uff08\u5176\u5b9e\u53ea\u662f$wqs$\u4e8c\u5206\uff09\n\n\u8fd9\u9898\u4e0e[\u8fd9\u9053\u9898](https://www.luogu.org/problemnew/show/P2619)\u57fa\u672c\u4e00\u81f4\uff0c\u6240\u4ee5\u76f4\u63a5\u4e0a$wqs$\u4e8c\u5206\u5c31\u597d\u4e86\u3002\u4e0d\u8fc7\u8fd9\u91cc\u8981\u6ce8\u610f\u4e24\u4e2a\u5c0f\u7ec6\u8282\uff0c\u9996\u5148\u5224\u65ad\u8fd9\u6761\u8fb9\u7684\u7aef\u70b9\u662f\u5426\u6709$1$\uff0c\u8fd9\u5f53\u7136\u597d\u89e3\u51b3\uff0c\u7aef\u70b9\u5c06\u5c0f\u7684\u7f16\u53f7\u653e\u524d\u9762\u5c31\u884c\u4e86\u3002\u7b2c\u4e8c\u70b9\uff0c\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\u7b56\u7565\uff1a\u8fb9\u7aef\u70b9\u6700\u5c0f\u7684\u7f16\u53f7\u8d8a\u5927\u8d8a\u5148\u8003\u8651\u3002\u8fd9\u663e\u7136\u662f\u5bf9\u7684\uff0c\u56e0\u4e3a$1$\u53f7\u70b9\u662f\u6700\u5c0f\u7684\u7f16\u53f7\uff0c\u6240\u4ee5\u5b83\u6700\u540e\u653e\u80af\u5b9a\u6ca1\u9519\u3002\u5176\u4ed6\u5c31\u662f\u57fa\u672c\u5957\u8def\u4e86\u3002\n\ncode:\n```\n//2018.9.14 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline int read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y){\n    x^=y^=x^=y;\n}\ninline int _abs(const res &x){\n    return x>0?x:-x;\n}\ninline int _max(const res &x,const res &y){\n    return x>y?x:y;\n}\ninline int _min(const res &x,const res &y){\n    return x<y?x:y;\n}\nconst int M=1e5+10;\nconst int N=5e3+10;\nnamespace MAIN{\n    int n,m,k;\n    struct E{\n        int u,v,w,id;\n        E() {}\n        E(res u,res v,res w,res id):u(u),v(v),w(w),id(id) {}\n        inline bool operator < (const E &b) const {\n            return w!=b.w?w<b.w:u>b.u;\n        }\n    }edge[M],ed0[M];\n    int fa[N];\n    inline int find(res x){\n        while(x!=fa[x])x=fa[x]=fa[fa[x]];\n        return x;\n    }\n    int cnt;\n    int ED[M],sum;\n    inline void init(res lim){\n        for(res i=1;i<=n;i++)fa[i]=i;\n        cnt=sum=0;\n        for(res i=1;i<=m;i++){\n            res u=edge[i].u,v=edge[i].v,w=u==1?edge[i].w+lim:edge[i].w;\n            ed0[i]=E(u,v,w,i);\n        }\n        sort(ed0+1,ed0+1+m);\n    }\n    inline void calc(res lim){\n        init(lim);\n        for(res i=1;i<=m;i++){\n            res u=ed0[i].u,v=ed0[i].v,fu=find(u),fv=find(v);\n            if(fu==fv||(u==1&&cnt==k))continue;\n            fa[fu]=fv;\n            ED[++sum]=ed0[i].id;\n            if(u==1)cnt++;\n            if(sum==n-1)break;\n        }\n    }\n    inline void MAIN(){\n        n=read(),m=read(),k=read();\n        for(res i=1;i<=m;i++){\n            res u=read(),v=read(),w=read();\n            if(u>v)_swap(u,v);\n            edge[i]=E(u,v,w,i);\n        }\n        res l=-m,r=m;\n        while(l<r){\n            res mid=(l+r+1)>>1;\n            calc(mid);\n            if(cnt>=k)l=mid;\n            else r=mid-1;\n        }\n        calc(l);\n        if(sum!=n-1||cnt<k)puts(\"-1\");\n        else {\n            printf(\"%d\\n\",sum);\n            for(res i=1;i<=sum;i++)printf(\"%d \",ED[i]);\n        }\n    }\n}\nint main(){\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1536930116,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010CF125E\u3011MST Company"
    }
]