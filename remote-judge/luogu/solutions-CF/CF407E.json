[
    {
        "content": "## \u601d\u8def\n\n\u8981\u7d20\u5bdf\u89c9\uff1a\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u516c\u5dee\u4e3a $d$ \u7684\u7b49\u5dee\u6570\u5217\u3002\n\n### \u7279\u5224\n\n\u9996\u5148\u8981\u7279\u5224\u6389 $d=0$ \u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\u5c31\u662f\u8981\u5bfb\u627e\u6700\u957f\u7684\u4e00\u6bb5\u6570\u5b57\u76f8\u540c\u7684\u533a\u95f4\uff0c\u627e\u5230\u4e4b\u540e\u8f93\u51fa\u5de6\u53f3\u7aef\u70b9\u5373\u53ef\uff08\u53ef\u4ee5 $O(n)$ \u626b\u4e00\u904d\uff09\u3002\n\n### \u5176\u4ed6\u60c5\u51b5\n\n\u518d\u6765\u770b\u522b\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4 $[l,r]$\uff0c\u5982\u679c\u8981\u6ee1\u8db3\u662f\u4e00\u4e2a\u516c\u5dee\u4e3a $d$ \u7684\u7b49\u5dee\u5e8f\u5217\uff0c\u90a3\u4e48\uff1a\n\n- \u8fd9\u4e2a\u7b49\u5dee\u6570\u5217\u91cc\u7684\u6240\u6709\u6570 $\\bmod d$ \u7684\u7ed3\u679c\u5e94\u8be5\u4e00\u6837.\n- \u533a\u95f4\u5185\u6ca1\u6709\u91cd\u590d\u7684\u6570.\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u5b9e\u73b0\u4e0a\u8ff0\u6761\u4ef6\uff1a\n\n- \u9996\u5148\u5c06\u5e8f\u5217\u5206\u6210\u82e5\u5e72\u4e2a $x \\bmod d$ \u90fd\u4e00\u6837\u7684\u5b50\u533a\u95f4\u3002\n\n  \u5728\u4ece\u5de6\u5f80\u53f3\u626b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u9047\u5230\u4e86\u4e0e\u524d\u9762 $x\\bmod d$ \u7684\u503c\u4e0d\u540c\u7684\u6570\uff0c\u5c31\u5c06\u5de6\u8fb9 $x\\bmod d$ \u503c\u76f8\u540c\u7684\u6570\u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684\u533a\u95f4\u6765\u5904\u7406\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u5e8f\u5217\u5206\u6210\u82e5\u5e72\u4e2a $x \\bmod d$ \u90fd\u4e00\u6837\u7684\u533a\u95f4\u3002\n\n- \u5bf9\u4e8e\u4e00\u4e2a\u6ee1\u8db3 $x\\bmod d=c$ \u7684\u6570\u5217\uff0c\u628a\u6240\u6709\u7684 $x$ \u53d8\u6210 $\\dfrac{x-c}{d}$ \uff08\u56e0\u4e3a\u6574\u5f62\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u76f4\u63a5\u9664\uff09\u3002\n\n  \u8fd9\u4e00\u6b65\u79f0\u4e4b\u4e3a\u5f52\u4e00\u5316\uff0c\u5b9e\u73b0\u4e86\u5c06\u4e00\u4e2a\u533a\u95f4\u7684\u7684\u516c\u5dee\u5316\u4e3a $1$\uff0c\n  \n  \u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u52a0\u5165 $k$ \u4e2a\u6570\uff0c\u4f7f\u533a\u95f4\u6392\u5e8f\u540e\u516c\u5dee\u4e3a $1$\u3002\n\n- \u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4 $[L,R]$\uff0c\u7b97\u51fa\u6700\u5c11\u52a0\u51e0\u4e2a\u6570\u3002\n\n  \u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\u663e\u7136\u5c31\u662f\u4e0d\u80fd\u6709\u91cd\u590d\uff0c\u90a3\u4e48\u6700\u5c11\u52a0\u7684\u6570\u7684\u4e2a\u6570\u5c31\u662f $\\max(L,R)-\\min(L,R)+1-(R-L+1)$\u3002\n\n- \u4ece\u5c0f\u5230\u5927\u679a\u4e3e $R$\u3002\n\n  \u90a3\u4e48\u95ee\u9898\u5c31\u76f8\u5f53\u4e8e\u6c42\u6700\u5c0f\u7684 $L$\uff0c\u4f7f\u5f97\n\n  - $[L,R]$ \u65e0\u91cd\u590d\u3002\n\n    \u4ece\u5c0f\u5230\u5927\u679a\u4e3e $R$,\u5bf9\u4e8e\u65b0\u7684 $a[R]$ \u5f88\u5bb9\u6613\u77e5\u9053\u5b83\u524d\u9762\u4e00\u4e2a\u548c\u4ed6\u76f8\u7b49\u7684\u6570 $a[T]$ \uff08\u53ef\u4ee5\u7528$map$\u5b9e\u73b0\uff09\uff0c\u90a3\u4e48 $L$ \u81f3\u5c11\u8981\u5927\u4e8e $T$\u3002\n\n  - \u52a0\u7684\u6570\u4e0d\u80fd\u591a\u4e8e $k$ \u4e2a\u3002\n\n    \u4e5f\u5c31\u662f $\\max(L,R)-\\min(L,R)+1-(R-L+1)\\le k$\uff0c\u8f6c\u5316\u4e00\u4e0b\u5373 $\\max(L,R)-\\min(L,R)+L\\le k + R$\uff0c\n\n    \u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 $w[L]=\\max(L,R)-\\min(L,R)+L$\uff0c\n\n    \u5047\u5982 $L$ \u7684\u4e0b\u754c\u662f $T$\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5728 $[T+1,R]$ \u4e2d\u627e\u6700\u5de6\u7684\u4f4d\u7f6e\u4f7f\u5f97 $w\\le k + R$\u3002\n\n\u5982\u679c\u80fd\u5b8c\u6210\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86\uff0c\u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u5982\u4f55\u7ef4\u62a4 $w$\u3002\n\n#### \u7ef4\u62a4 $w$\u7684\u65b9\u6cd5\n\n\u7528\u5355\u8c03\u6808\u3002\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u9012\u51cf\u7684\u6808\u548c\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u6808\uff0c\u4e24\u4e2a\u6808\u7684\u7ef4\u62a4\u65b9\u6cd5\u662f\u540c\u7406\u7684\uff0c\u6b64\u5904\u4ee5\u5355\u8c03\u9012\u51cf\u7684\u6808\u4e3a\u4f8b\u8fdb\u884c\u8bb2\u89e3\u3002\n\n\u56e0\u4e3a\u5355\u8c03\u6808\u9012\u51cf\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u5f53\u4e00\u4e2a\u5927\u4e8e\u6808\u9876\u7684\u5143\u7d20\u52a0\u5165\u65f6\uff0c\u4f1a\u4e0d\u65ad\u5730\u5f39\u51fa\u6808\u9876\uff0c\u76f4\u5230\u6808\u9876\u5143\u7d20\u5927\u4e8e\u6b64\u5143\u7d20\u4e3a\u6b62\uff0c\u518d\u5c06\u6b64\u5143\u7d20\u5165\u6808\uff0c\u7531\u6b64\uff0c**\u5355\u8c03\u6808\u53ef\u4ee5\u5c06 $\\max(L,R)$ \u5206\u6210\u9012\u51cf\u7684\u82e5\u5e72\u6bb5**\uff0c\u8003\u8651\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1a\n\n1. \u5982\u56fe\u6240\u793a\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u5355\u8c03\u9012\u51cf\u7684\u5355\u8c03\u6808\uff0c\u5176\u4e2d $S1> S2> S3$\uff0c$S3$ \u4e3a\u6808\u9876\u5143\u7d20\u3002\n\n   ![1](https://cdn.luogu.com.cn/upload/image_hosting/t2ijx361.png)\n\n2. \u7531\u4e8e\u5355\u8c03\u6808\u7684\u6027\u8d28\uff0c$S1$ \u548c\u6808\u4e2d\u4e0a\u4e00\u4e2a\u5143\u7d20\u4e4b\u95f4\u53ef\u80fd\u662f\u6709\u522b\u7684\u5143\u7d20\u7684\uff0c\u6240\u4ee5 $S1,S2,S3$ \u5176\u5b9e\u4ee3\u8868\u4e86\u4e09\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u3002\n\n   ![2](https://cdn.luogu.com.cn/upload/image_hosting/ygxa0sv4.png)\n\n3. \u6b64\u65f6\uff0c\u5355\u8c03\u6808\u4e2d\u6765\u4e86\u4e00\u4e2a\u65b0\u7684\u5143\u7d20 $a$\uff0c\u663e\u7136 $a>S1>S2>S3$\uff0c\u4e3a\u4e86\u7ef4\u62a4\u5355\u8c03\u6808\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5c06 $S1,S2,S3$ \u5f39\u6808\u3002\n\n   ![3](https://cdn.luogu.com.cn/upload/image_hosting/d9smyt4p.png)\n\n4. \u5728\u5f39\u6808\u65f6\uff0c\u56e0\u4e3a\u6b64\u65f6\u8fd9\u4e09\u4e2a\u5143\u7d20\u7684\u503c\u4e0d\u80fd\u4ee3\u8868\u4e0a\u8ff0\u4e09\u4e2a\u6bb5\u7684\u6700\u5927\u503c\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06\u4e09\u4e2a\u6bb5\u7684\u8d21\u732e\u4ece\u7ebf\u6bb5\u6811\u4e2d\u51cf\u53bb\u3002\n\n   ![4](https://cdn.luogu.com.cn/upload/image_hosting/al5zxa69.png)\n\n5. \u540c\u65f6\uff0c\u65b0\u7684\u5143\u7d20 $a$ \u5c31\u52a0\u8fdb\u6765\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u53d1\u73b0\u539f\u6765\u4e09\u4e2a\u6bb5\u7684\u4ee3\u8868\u5143\u7d20\u88ab\u5f39\u51fa\u4e4b\u540e\uff0c\u5176\u5b9e\u5c31\u88ab\u65b0\u5143\u7d20\u6240\u63a5\u7ba1\u4e86\uff0c\u6574\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u53d8\u6210 $a$ \u5143\u7d20\u7684\u503c\uff0c\u6240\u4ee5\u518d\u5bf9\u4e00\u6574\u4e2a\u533a\u95f4\u8fdb\u884c\u533a\u95f4\u52a0\u64cd\u4f5c\u3002\n\n   ![5](https://cdn.luogu.com.cn/upload/image_hosting/qg3k2one.png)\n\n\u8fd9\u6837\u5355\u8c03\u6808\u5c31\u5b9e\u73b0\u4e86\u5c06 $\\max(L,R)$ \u5206\u6210\u4e86\u9012\u51cf\u7684\u82e5\u5e72\u6bb5\uff0c\u7531\u6b64\u5c31\u53ef\u4ee5\u4e0d\u65ad\u8fdb\u884c\u6bb5\u6811\u7684\u533a\u95f4\u52a0\u3001\u533a\u95f4\u51cf\u3002\n\n$\\min$ \u7684\u7ef4\u62a4\u4e0e $\\max$ \u540c\u7406\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\n/*\nAuthor:loceaner\n\u7ebf\u6bb5\u6811\uff0c\u5355\u8c03\u6808 \n*/\n#include <map>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define lson rt << 1\n#define rson rt << 1 | 1\nusing namespace std;\n\nconst int A = 2e5 + 11;\nconst int B = 1e6 + 11;\nconst int mod = 1e9;\nconst int inf = 0x3f3f3f3f;\n\ninline int read() {\n  char c = getchar();\n  int x = 0, f = 1;\n  for ( ; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n  for ( ; isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n  return x * f;\n}\n\nbool flag;\nmap <int, int> last;\nint sl[A], topl, sr[A], topr;\nstruct tr { int l, r, lazy, w; } t[A << 2];\nint n, k, d, ansl = 1, ansr = 1, a[A], ans;\n\ninline void pushup(int rt) {\n  t[rt].w = min(t[lson].w, t[rson].w);\n}\n\ninline void calc(int rt, int x) {\n  t[rt].lazy += x, t[rt].w += x;\n}\n\ninline void pushdown(int rt) {\n  if (t[rt].lazy && t[rt].l < t[rt].r) {\n    calc(lson, t[rt].lazy), calc(rson, t[rt].lazy);\n    t[rt].lazy = 0;\n  }\n}\n\nvoid build(int rt, int l, int r) {\n  t[rt].l = l, t[rt].r = r, t[rt].lazy = 0, t[rt].w = 0;\n  if (l == r) { t[rt].w = l; return; }\n  int mid = (l + r) >> 1;\n  build(lson, l, mid), build(rson, mid + 1, r);\n  pushup(rt);\n}\n\nvoid insert(int rt, int l, int r, int k) {\n  if (l <= t[rt].l && t[rt].r <= r) return calc(rt, k);\n  pushdown(rt);\n  int mid = (t[rt].l + t[rt].r) >> 1;\n  if (l <= mid) insert(lson, l, r, k);\n  if (r > mid) insert(rson, l, r, k);\n  pushup(rt);\n}\n\nint work(int rt, int k) {\n  if (t[rt].l == t[rt].r) return t[rt].l;\n  pushdown(rt);\n  if (t[lson].w <= k) return work(lson, k);\n  else return work(rson, k);\n}\n\nvoid query(int rt, int l, int r, int k) {\n  if (l <= t[rt].l && t[rt].r <= r) {\n    if (t[rt].w <= k) flag = 1, ans = work(rt, k);\n    return;\n  }\n  pushdown(rt);\n  int mid = (t[rt].l + t[rt].r) >> 1;\n  if (l <= mid && !flag) query(lson, l, r, k);\n  if (r > mid && !flag) query(rson, l, r, k);\n}\n\nvoid del(int rt, int x) {\n  if (x < t[rt].l || x > t[rt].r) return;\n  pushdown(rt);\n  if (t[rt].l == x && t[rt].r == x) { t[rt].w = 0; return; }\n  del(lson, x), del(rson, x);\n  pushup(rt);\n}\n\nint main() {\n  n = read(), k = read(), d = read();\n  for (int i = 1; i <= n; i++) a[i] = read() + inf;\n  if (d == 0) {\n    for (int i = 1; i <= n; i++) {\n      int l = i;\n      while (a[i] == a[i + 1] && i < n) i++;\n      if (ansr - ansl < i - l) ansl = l, ansr = i;\n    }\n    cout << ansl << ' ' << ansr << '\\n';\n    return 0;\n  }\n  build(1, 1, n);\n  //\u679a\u4e3e\u53f3\u7aef\u70b9 \n  for (int i = 1, L = 1; i <= n; i++) {\n    int tmp = L;\n    if (a[i] % d == a[i - 1] % d) L = max(L, last[a[i]] + 1);\n    else L = i;\n    last[a[i]] = i;\n    while (tmp < L) del(1, tmp++);\n    //\u9012\u589e\u6808 \n    while (topl && sl[topl] >= L && a[sl[topl]] >= a[i]) {\n      insert(1, max(L, sl[topl - 1] + 1), sl[topl], a[sl[topl]] / d);\n      topl--;\n    }\n    insert(1, max(L, sl[topl] + 1), i, -a[i] / d);\n    sl[++topl] = i;\n    //\u9012\u51cf\u6808\n    while (topr && sr[topr] >= L && a[sr[topr]] <= a[i]) {\n      insert(1, max(L, sr[topr - 1] +1), sr[topr], -a[sr[topr]] / d);\n      topr--;\n    }\n    insert(1, max(L, sr[topr] + 1), i, a[i] / d);\n    sr[++topr] = i;\n    flag = 0, ans = 0;\n    query(1, L, i, k + i); //\u601d\u8def\u4e2d\u7684\u5f0f\u5b50 \n    if (ansr - ansl < i - ans) ansl = ans, ansr = i;\n  }\n  cout << ansl << \" \" << ansr << '\\n';\n  return 0;\n}\n```",
        "postTime": 1597216718,
        "uid": 198323,
        "name": "loceaner",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF407E \u3010k-d-sequence\u3011"
    },
    {
        "content": "CF407E\u3002\n\n\u5176\u5b9e\u6ca1\u6709 3100 \u96be\u5ea6\u7684\uff0c\u867d\u7136\u6211\u61a8\u4e86\u7ef4\u62a4\u7b80\u5355\u7684\u4e1c\u897f\u5c45\u7136\u53bb\u60f3\u5409\u53f8\u673a\uff0c\u4f46\u662f\u786e\u5b9e\u662f\u6ca1\u6709\u8fd9\u4e2a\u96be\u5ea6\u3002\n\n\u6211\u4eec\u8003\u8651\u4e24\u4e2a\u57fa\u7840\u7684\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\uff0c\u5982\u4f55\u7528\u5c3d\u91cf\u5c11\u7684\u4fe1\u606f\u5224\u65ad\u5b83\u662f\u4e00\u4e2a\u53ef\u63d2\u5165\u7684\u533a\u95f4\u5e76\u8ba1\u7b97\u533a\u95f4\u81f3\u5c11\u9700\u8981\u63d2\u5165\u7684\u5143\u7d20\u4e2a\u6570\u3002\n\n\u7b2c\u4e00\u95ee\u5f88\u7b80\u5355\uff0c\u663e\u7136\u7b49\u5dee\u6570\u5217\u4e2d\u7684\u6bcf\u4e2a\u6570 $\\text{mod}$ $d$ \u7684\u503c\u76f8\u7b49\uff0c\u5e76\u4e14\u4e0d\u80fd\u6709\u6570\u91cd\u590d\uff0c\u4e24\u4e2a\u6761\u4ef6\u5373\u53ef\u9650\u5236\u7b2c\u4e00\u95ee\u4e86\u3002\n\n\u7b2c\u4e8c\u95ee\u5bf9\u4e8e\u533a\u95f4 $[l,r]$ \u6211\u4eec\u76f4\u63a5\u7528 $\\frac{\\max_{i = l} ^ r a_i - \\min_{i = l} ^ r a_i}{d} + 1 - (r - l + 1)$ \u5373\u53ef\u8ba1\u7b97\uff0c\u5373\u6570\u5217\u603b\u9879\u51cf\u53bb\u6570\u5217\u4e2d\u5df2\u6709\u7684\u9879\u6570\u3002\n\n\u7136\u540e\u5c31\u677f\u4e86\u3002\u5bf9\u4e8e\u7b2c\u4e00\u95ee\u6211\u4eec\u5148\u9650\u5236\u7b2c\u4e00\u4e2a\u6761\u4ef6\uff0c\u5c06\u5e8f\u5217\u5206\u6210\u8bb8\u591a\u6a21\u610f\u4e49\u4e0b\u503c\u76f8\u540c\u7684\u989c\u8272\u6bb5\u5904\u7406\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u989c\u8272\u6bb5\u6211\u4eec\u626b\u63cf\u7ebf\uff0c\u6bcf\u6b21\u5904\u7406 $r$ \u4e3a\u53f3\u7aef\u70b9\u7684\u7b54\u6848\uff0c\u7ef4\u62a4 $\\text{lst}_i$ \u8868\u793a\u4e00\u4e2a\u989c\u8272 $i$ \u4e0a\u4e00\u6b21\u5728\u5e8f\u5217\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u6eda\u4e00\u4e2a $\\text{lst}$ \u7684\u524d\u7f00 $\\text{max}$ \u5373\u53ef\u7ef4\u62a4\u5728\u505a $r$ \u65f6\uff0c$l$ \u81f3\u591a\u80fd\u9009\u5230\u54ea\u91cc\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u533a\u95f4\u7684\u70b9\u4e5f\u4e0d\u5b8c\u5168\u5408\u6cd5\u3002\u6211\u4eec\u8fd8\u9700\u8981\u627e\u5230\u6700\u9760\u5de6\u7684 $l$ \u6ee1\u8db3\u81f3\u591a\u586b\u5165 $k$ \u4e2a\u6570\u5c31\u5c06\u533a\u95f4 $[l,r]$ \u91cd\u6392\u6210\u516c\u5dee\u4e3a $d$ \u7684\u7b49\u5dee\u6570\u5217\u3002\n\n\u8003\u8651\u4e0a\u8ff0\u7684\u8ba1\u7b97\u5f0f\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u8ba9 $a_i$ \u5728\u6a21\u610f\u4e49\u4e0b\u503c\u76f8\u540c\u65f6\u7edf\u4e00\u53d8\u6210 $\\lfloor \\frac{a_i}{d} \\rfloor$\uff0c\u8bb0\u4e3a $b_i$\uff0c\u5219\u539f\u5173\u7cfb\u5199\u6210\uff1a\n\n- $\\max_{i = l} ^ r b_i - \\min_{i = l} ^ r b_i + 1 - (r - l + 1) \\leq k$\n\n\u79fb\u9879\u4e00\u4e0b\u5c31\u53d8\u6210\uff1a\n\n- $\\max_{i = l} ^ r b_i - \\min_{i = l} ^ r b_i + l \\leq k + r$\n\n\u53f3\u5f0f $r$ \u56fa\u5b9a\u65f6\u53ef\u8ba1\u7b97\uff0c\u5bf9\u4e8e\u5de6\u5f0f\u8bb0 $p_l = \\max_{i = l} ^ r b_i - \\min_{i = l} ^ r b_i + l$\u3002\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5f00\u5355\u8c03\u9012\u589e\u548c\u5355\u8c03\u9012\u51cf\u7684\u5355\u8c03\u6808\uff0c\u7136\u540e\u5c31\u5c06 $\\max$ \u4e0e $\\min$ \u505a\u6210\u533a\u95f4\u52a0\u7684\u95ee\u9898\u4e86\uff0c\u5177\u4f53\u6765\u8bf4\u6211\u4eec\u6808\u5185\u5b58\u7684\u8282\u70b9\u5c06\u5f53\u524d\u5904\u7406\u7684\u6bb5\u5206\u6210\u4e00\u4e9b\u5c0f\u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684 $\\max(l,r)$ \u6216 $\\min(l,r)$ \u662f\u76f8\u7b49\u7684\uff08\u5373\u5c06 $l$ \u4f5c\u4e3a\u53d8\u5143\u7684\u610f\u4e49\u4e0b\uff09\uff0c\u5728\u5f39\u51fa\u548c\u52a0\u5165\u65f6\u90fd\u53ef\u4ee5\u76f4\u63a5\u64a4\u9500/\u52a0\u5165\u8d21\u732e\uff0c\u95ee\u9898\u81ea\u7136\u4e5f\u5c31\u53d8\u6210\u4e86\u533a\u95f4\u52a0\u3002\n\n\u7ef4\u62a4\u533a\u95f4 $p$ \u503c\u7684 $\\min$\uff0c\u6bcf\u4e2a $r$ \u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4e8c\u5206\u627e\u5176\u6700\u9760\u5de6\u7684\u5408\u6cd5 $l$ \u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\u3002\u6ce8\u610f\u989c\u8272\u6bb5\u9009\u53d6\u65f6\u5224\u76f8\u7b49\u65f6\u5e94\u7528\u7edd\u5bf9\u503c\u5224\u3002\n\n```cpp\n/*\n\u663e\u7136\u6211\u4eec\u5148\u627e\u51fa\u6765\u533a\u95f4\u6700\u5c0f\u6570\u3002\n\u8bf6\u5440\u8fd9\u9053\u9898\u975e\u5f97 dp \u5417\u3002\n\u6211\u4eec\u77e5\u9053\u7684\u662f\u63d2\u5165\u4e0d\u5f71\u54cd false\uff0c\u6240\u4ee5\u4e00\u5b9a\u6709\u4e00\u4e2a\u5355\u8c03 limit \u4f7f\u5f97\u540e\u9762\u7684\u90fd\u4e0d\u884c\u3002\n\u627e\u5230\u5b83\uff0c\u7136\u540e\u76f4\u63a5\u5dee\u5206\u7b97\u7b54\u6848\uff1f\n\u7136\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u9700\u6c42\u5143\u7d20\u5c31\u662f (maxn - minn) / k - len\n\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u53ef\u505a\u5427\uff0c\u626b\u63cf\u7ebf\u7136\u540e\u5409\u53f8\u673a\uff1f \n\u968f\u4fbf\u7784\u4e86\u4e0b\u9898\u89e3\u611f\u89c9\u601d\u8def\u5f88\u4e0d\u4e00\u6837\uff0c\u4e5f\u8bb8\u5bc4\u4e86\u3002 \nsb\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u5355\u8c03\u6808\uff0c\u8fd9\u90fd\u770b\u4e0d\u51fa\u6765\u5417\u8111\u762b\u3002 \n*/\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 2e5 + 5;\ninline int read() {\n    char ch = getchar();\n    int x = 0, f = 1;\n    while (ch < '0' || ch > '9') {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while ('0' <= ch && ch <= '9') {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x * f;\n}\ninline void write(int x) {\n    if (x < 0)\n        putchar('-'), x = -x;\n    if (x > 9)\n        write(x / 10);\n    putchar(x % 10 + '0');\n}\n#define ls(p) (p << 1)\n#define rs(p) (p << 1 | 1)\nint mn[Len << 2],tag[Len << 2];\nvoid push_up(int x){mn[x] = min(mn[ls(x)] , mn[rs(x)]);}\nvoid push_down(int p)\n{\n\tif(tag[p])\n\t{\n\t\ttag[ls(p)] += tag[p] , tag[rs(p)] += tag[p];\n\t\tmn[ls(p)] += tag[p] , mn[rs(p)] += tag[p];\n\t\ttag[p] = 0;\n\t}\n}\nvoid build(int p,int l,int r)\n{\n\tif(l == r) \n\t{\n\t\tmn[p] = l;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(ls(p) , l , mid);\n\tbuild(rs(p) , mid + 1 , r);\n\tpush_up(p);\n}\nvoid update(int p,int l,int r,int nl,int nr,int w)\n{\n\tif(nl <= l && nr >= r){tag[p] += w , mn[p] += w;return;}\n\tpush_down(p);\n\tint mid = (l + r) >> 1;\n\tif(nl <= mid) update(ls(p) , l , mid , nl , nr , w);\n\tif(nr > mid) update(rs(p) , mid + 1 , r , nl , nr , w);\n\tpush_up(p);\t\n}\nint idx(int p,int l,int r,int nl,int nr,int w)\n{\n\tif(r < nl || l > nr || mn[p] > w) return 0; \n\tif(l == r) return l;\n\tpush_down(p);\n\tint mid = (l + r) >> 1 , res = 0;\n\tres = idx(ls(p) , l , mid , nl , nr , w);\n\tif(res) return res;\n\treturn idx(rs(p) , mid + 1 , r , nl , nr , w);\n}\nint n,k,d,lst[Len],a[Len],b[Len],lsh[Len],cnt,Ansl,len;\nint stkmx[Len],topmx,stkmn[Len],topmn;\nvoid push_mx(int x)\n{\n\twhile(topmx && a[stkmx[topmx]] < a[x])\n\t{\n\t\tupdate(1 , 1 , n , stkmx[topmx - 1] + 1 , stkmx[topmx] , -a[stkmx[topmx]]);\n\t\ttopmx --;\n\t}\n\tstkmx[++ topmx] = x;\n\tupdate(1 , 1 , n , stkmx[topmx - 1] + 1 , stkmx[topmx] , a[stkmx[topmx]]);\n}\nvoid push_mn(int x)\n{\n\twhile(topmn && a[stkmn[topmn]] > a[x])\n\t{\n\t\tupdate(1 , 1 , n , stkmn[topmn - 1] + 1 , stkmn[topmn] , a[stkmn[topmn]]);\n\t\ttopmn --;\n\t}\n\tstkmn[++ topmn] = x;\n\tupdate(1 , 1 , n , stkmn[topmn - 1] + 1 , stkmn[topmn] , -a[stkmn[topmn]]);\n}\nvoid Work(int L,int R)\n{\n\tstkmx[0] = stkmn[0] = L - 1;int Ll = L - 1;\n\tfor(int i = L ; i <= R ; i ++) a[i] /= d;\n\tfor(int i = L ; i <= R ; i ++)\n\t{\n\t\tint fd = k + i;\n\t\tpush_mx(i) , push_mn(i);\n\t\tLl = max(Ll , lst[b[i]]);\n\t\tint ll = idx(1 , 1 , n , Ll + 1 , i , fd) , rr = i , las = rr - ll + 1;\n\t\t//printf(\"%d %d\\n\",ll,rr);\n\t\tif(las > len || las == len && (ll < Ansl))\n\t\t{\n\t\t\tAnsl = ll;\n\t\t\tlen = las;\n\t\t}\n\t\tlst[b[i]] = i;\n\t}\n\ttopmx = topmn = 0;\n\tfor(int i = L ; i <= R ; i ++) lst[b[i]] = 0;\n}\nint main()\n{\n\tn = read() , k = read() , d = read();\n\tfor(int i = 1 ; i <= n ; i ++) a[i] = lsh[i] = read();\n\tif(!d)\n\t{\n\t\tint lst = 1;\n\t\tfor(int i = 1 ; i <= n ; i ++) \n\t\t{\n\t\t\tif(a[i] != a[lst])\n\t\t\t{\n\t\t\t\tint ll = lst , rr = i - 1 , las = rr - ll + 1;\n\t\t\t\tif(las > len){Ansl = ll;len = las;} \n\t\t\t\tlst = i;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d %d\\n\",Ansl,Ansl + len - 1);\n\t\treturn 0;\n\t}\n\tsort(lsh + 1 , lsh + 1 + n);\n\tcnt = unique(lsh + 1 , lsh + 1 + n) - lsh - 1;\n\tfor(int i = 1 ; i <= n ; i ++) b[i] = lower_bound(lsh + 1 , lsh + 1 + cnt , a[i]) - lsh;\n\tint lst = 1;build(1 , 1 , n);\n\tfor(int i = 2 ; i <= n ; i ++)\n\t{\n\t\tif((a[lst] % d + d) % d != (a[i] % d + d) % d)\n\t\t{\n\t\t\tWork(lst , i - 1);\n\t\t\tlst = i;\n\t\t}\n\t}\n\tWork(lst , n);\n\tprintf(\"%d %d\\n\",Ansl,Ansl + len - 1);\n\treturn 0;\n}\n```",
        "postTime": 1658734394,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u673a\u623f\u6559\u7ec3\u4e0d\u77e5\u9053 steam \u662f\u6e38\u620f\u8f6f\u4ef6\u3002"
    },
    {
        "content": "\u9898\u610f\uff1a\u6c42\u6700\u957f\u533a\u95f4\u4f7f\u5f97\u52a0\u5165 $k$ \u4e2a\u6570\u540e sort \u540e\u6700\u540e\u4e3a\u4e00\u4e2a\u516c\u5dee\u4e3a $d$ \u7684\u7b49\u5dee\u6570\u5217\u3002\u591a\u89e3\u8f93\u51fa $l$ \u6700\u5c0f\u7684\u7b54\u6848\u3002\n\n$n,k\\leq 2\\times 10^5,0\\leq d\\leq 10^9$\n\n- $d=0$ \u7684\u60c5\u51b5\u7279\u5224\u4e00\u4e0b\uff0c\u627e\u6700\u957f\u7684\u503c\u90fd\u76f8\u540c\u7684\u6bb5\u5373\u53ef\n\n- $d\\neq 0$ \u7684\u60c5\u51b5\uff1a\n\n\u662f\u516c\u5dee\u4e3a $d$ \u7b49\u5dee\u6570\u5217\u9700\u8981\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n- $\\bmod\\ d$ \u76f8\u540c\uff1b\n- \u503c\u4e24\u4e24\u4e0d\u540c\u3002\n\n\u53ef\u4ee5\u5355\u72ec\u5904\u7406\u6bcf\u4e2a\u6781\u957f\u7684\u540c\u4f59\u7684\u6bb5\uff0c\u7136\u540e\u5206\u5f00\u5904\u7406\uff1a\n\n\u5148\u90fd\u6574\u9664\u4e00\u4e0b $d$\uff0c\u95ee\u9898\u90fd\u8f6c\u5316\u6210\u5904\u7406\u516c\u5dee $d$ \u4e3a $1$ \u7684\u60c5\u51b5\u3002\n\n\u8fd9\u4e2a\u533a\u95f4\u5408\u6cd5\u8981\u6c42 $\\max-\\min+1-(R-L+1)\\leq k$\uff0c\u679a\u4e3e $r$ \u7edf\u8ba1\u6700\u5c0f\u7684 $l$ \u4f7f\u5f97\uff1a\n\n- $[L,R]$ \u5185\u5143\u7d20\u65e0\u91cd\u590d\uff1b\n\n- $\\max-\\min+1-(R-L+1)\\leq k$\u3002\n\n\u5176\u4e2d $\\max$/$\\min$ \u4e3a\u533a\u95f4 $[L,R]$ \u7684\u6700\u5927/\u5c0f\u503c\n\n\u65e0\u91cd\u590d\u7684\u6761\u4ef6\u5f88\u597d\u505a\uff0c\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u503c\u4e0a\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u8bb0\u5f55\u4e00\u4e0b $l$ \u7684\u4e0b\u754c $T$\u3002\n\n\u8bbe $w_L=\\max(L,R)-\\min(L,R)+L$\n\n\u6c42 $[T+1,R]$ \u4e2d\u6700\u5de6\u7684 $L$ \u4f7f\u5f97 $w_L\\leq k+R$\uff0c\u5047\u5982\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u7ef4\u62a4 $w$ \uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u600e\u6837\u7ef4\u62a4 $w$\uff1f\n\n\u6ce8\u610f $\\max(L,R)$ \u662f\u9012\u51cf\u7684\uff0c$\\min$ \u4e5f\u7c7b\u4f3c\u3002$\\max(L,R)$ \u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6808\uff0c\u6808\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u4ee3\u8868\u4e00\u6bb5\u533a\u95f4\uff0c\u5b83\u4eec\u7684 $\\max(L,R)$ \u662f\u8fd9\u4e2a\u6808\u4e2d\u7684\u8fd9\u4e2a\u5143\u7d20\u3002\u90a3\u4e48\u6bcf\u6b21\u5f39\u51fa\u7684\u65f6\u5019\u4fee\u6539\u8fd9\u4e2a\u533a\u95f4\u7684 $w$ \u5373\u53ef\u3002\n\n\u64cd\u4f5c\u662f\u533a\u95f4\u52a0\u51cf\uff0c\u9700\u8981\u652f\u6301\u7684\u67e5\u8be2\u4e3a\u533a\u95f4\u6700\u5de6\u4fa7\u5c0f\u4e8e\u7b49\u4e8e\u67d0\u4e2a\u6570\u7684\u4f4d\u7f6e\uff0c\u8fd9\u662f\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u8bb0\u5f55\u4e00\u4e0b\u533a\u95f4\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u5747\u644a\u4e0b\u6765\u590d\u6742\u5ea6\u662f\u5bf9\u7684\uff0c\u64cd\u4f5c\u6570\u4ec5\u6709 $\\mathcal{O}(n)$ \u4e2a\u3002\n\n\u5b9e\u73b0\u4e0a\u6709\u51e0\u4e2a\u5c0f\u7ec6\u8282\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u540c\u4f59\u6bb5\u91cd\u65b0\u5efa\u4e00\u68f5\u5927\u5c0f\u4e3a\u8fd9\u4e2a\u6bb5\u957f\u5ea6\u7684\u6811\uff0c\u5982\u679c\u6bcf\u6b21\u90fd $\\mathcal{O}(n)$ \u5efa\u6811\uff0c\u590d\u6742\u5ea6\u662f\u9519\u8bef\u7684\u3002$a_i$ \u6709\u8d1f\u6570\uff0c\u63d0\u524d\u5168\u52a0\u4e0a $10^9$ \u8f6c\u5316\u6210\u975e\u8d1f\u6570\uff0c\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5b8c\u7f8e\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\n\n```cpp\n//Code by do_while_true\n#include<iostream>\n#include<cstdio>\n#include<map>\ntemplate <typename T> T Max(T x, T y) { return x > y ? x : y; }\ntemplate <typename T> T Min(T x, T y) { return x < y ? x : y; }\ntemplate <typename T>\nT &read(T &r) {\n\tr = 0; bool w = 0; char ch = getchar();\n\twhile(ch < '0' || ch > '9') w = ch == '-' ? 1 : 0, ch = getchar();\n\twhile(ch >= '0' && ch <= '9') r = (r << 3) + (r <<1) + (ch ^ 48), ch = getchar();\n\treturn r = w ? -r : r;\n}\nconst int N = 200010;\nconst int INF = 0x7fffffff;\nint n, k, d;\nint a[N];\nstd::map<int, int>pre; \n#define tl tree[x].l\n#define tr tree[x].r\n#define ls tree[x].lson\n#define rs tree[x].rson\nint trnt;\nstruct SGT {\n\tint l, r, sum, mn, tag, lson, rson;\n}tree[N << 1];\ninline void pushup(int x) { tree[x].mn = Min(tree[ls].mn, tree[rs].mn); }\ninline void pushdown(int x) {\n\tif(tree[x].tag) {\n\t\tint &p = tree[x].tag;\n\t\ttree[ls].mn += p; tree[rs].mn += p;\n\t\ttree[ls].tag += p; tree[rs].tag += p;\n\t\tp = 0; \n\t}\n}\nint build(int l, int r) {\n\tint x = ++trnt; tl = l; tr = r;\n\ttree[x].mn = tree[x].tag = tree[x].lson = tree[x].rson = 0;\n\tif(l == r) return x;\n\tls = build(l, (l + r) >> 1); rs = build(tree[ls].r+1, r);\n\treturn x;\n}\nvoid modify(int x, int l, int r, int v) {\n\tif(tree[x].l >= l && tree[x].r <= r) {\n\t\ttree[x].mn += v;\n\t\ttree[x].tag += v;\n\t\treturn ;\n\t}\n\tpushdown(x);\n\tint mid = (tr + tl) >> 1;\n\tif(mid >= l) modify(ls, l, r, v);\n\tif(mid < r) modify(rs, l, r, v);\n\tpushup(x); \n}\nint query(int x, int l, int r, int v) {\n\tif(tree[x].mn > v) return INF;\n\tif(tl >= l && tr <= r) {\n\t\tif(tl == tr) return tl;\n\t\tpushdown(x); int sumq = 0;\n\t\tif(tree[ls].mn <= v) sumq = query(ls, l, r, v);\n\t\telse sumq = query(rs, l, r, v);\n\t\tpushup(x);\n\t\treturn sumq;\n\t}\n\tpushdown(x);\n\tint mid = (tl + tr) >> 1, sumq;\n\tif(r <= mid) sumq = query(ls, l, r, v);\n\telse if(l > mid) sumq = query(rs, l, r, v);\n\telse {\n\t\tsumq = query(ls, l, r, v);\n\t\tif(sumq == INF) sumq = query(rs, l, r, v);\n\t}\n\tpushup(x);\n\treturn sumq;\n}\n#undef tl\n#undef tr\n#undef ls\n#undef rs\nint L[N], R[N], bcnt, ansl = 1, ansr = 1;\nint st1p[N], st1x[N], top1;\nint st2p[N], st2x[N], top2;\nint down;\nsigned main() {\n//\tfreopen(\"in.txt\", \"r\", stdin);\n\tread(n); read(k); read(d);\n\tif(!d) {\n\t\tfor(int i = 1; i <= n; ++i) read(a[i]);\n\t\tint l = 1;\n\t\tfor(int i = 2; i <= n; ++i) {\n\t\t\tif(a[i] != a[i-1]) {\n\t\t\t\tif(i - l > ansr - ansl + 1) ansl = l, ansr = i-1;\n\t\t\t\tl = i;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d %d\\n\", ansl, ansr);\n\t\treturn 0;\n\t}\n\tfor(int i = 1; i <= n; ++i) read(a[i]), a[i] += 1000000000;\n\tL[bcnt = 1] = 1;\n\tfor(int i = 2; i <= n; ++i) {\n\t\tif(a[i] % d != a[i-1] % d) {\n\t\t\tR[bcnt] = i-1;\n\t\t\tL[++bcnt] = i;\n\t\t}\n\t}\n\tR[bcnt] = n;\n\tfor(int i = 1; i <= bcnt; ++i) {\n\t\tif(R[i] - L[i] == 0) continue ;\n\t\tint nowl = 1, nowr = 0;\n\t\tpre.clear();\n\t\ttop1 = top2 = 0; trnt = 0; down = 1;\n\t\tbuild(1, R[i] - L[i] + 1);\n\t\tfor(int j = L[i]; j <= R[i]; ++j) a[j] /= d;\n\t\tfor(int j = L[i]; j <= R[i]; ++j) {\n\t\t\tif(pre[a[j]]) down = Max(down, pre[a[j]]-L[i]+2);\n\t\t\tpre[a[j]] = j;\n\t\t\twhile(top1 && st1x[top1] <= a[j]) modify(1, st1p[top1-1]+1, st1p[top1], -st1x[top1]), --top1;\n\t\t\twhile(top2 && st2x[top2] >= a[j]) modify(1, st2p[top2-1]+1, st2p[top2], st2x[top2]), --top2;\n\t\t\tst1x[++top1] = a[j]; st1p[top1] = j-L[i]+1;\n\t\t\tst2x[++top2] = a[j]; st2p[top2] = j-L[i]+1;\n\t\t\tmodify(1, st1p[top1-1]+1, st1p[top1], st1x[top1]);\n\t\t\tmodify(1, st2p[top2-1]+1, st2p[top2], -st2x[top2]);\n\t\t\tmodify(1, j-L[i]+1, j-L[i]+1, j);\n\t\t\tint pl = query(1, down, j-L[i]+1, k+j);\n\t\t\tif(pl != INF && j - (pl+L[i]-1) + 1 > nowr - nowl + 1) nowl = pl+L[i]-1, nowr = j;\n\t\t}\n\t\tif(nowr - nowl + 1 > ansr - ansl + 1) ansl = nowl, ansr = nowr; \n\t}\n\tprintf(\"%d %d\\n\", ansl, ansr);\n\treturn 0;\n} \n```",
        "postTime": 1625366885,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300dCodeforces 407E k-d-sequence"
    },
    {
        "content": "\u5e7f\u544a\uff1a[\u672c\u849f\u84bb\u7684Blog](https://www.chnxuzhiyuan.cn/2019/03/14/%E3%80%8CZJOI%E6%A8%A1%E6%8B%9F%E8%B5%9B%E3%80%8DBug%E7%BA%A7%E7%9A%84%E5%AD%98%E5%9C%A8-Solution/)\n\n### \u9898\u89e3\n\u9996\u5148\u4e00\u4e2a\u533a\u95f4\u6ee1\u8db3\u6761\u4ef6\uff0c\u5fc5\u987b\u8981\u6709\u6574\u4e2a\u533a\u95f4\u5185\u7684$A_i$\u6a21$d$\u540c\u4f59\uff0c\u5e76\u4e14\u6ca1\u6709\u76f8\u540c\u5143\u7d20\uff0c\u6682\u65f6\u5148\u4e0d\u8003\u8651\u9700\u8981\u8865\u4e0a\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u679a\u4e3e\u53f3\u7aef\u70b9$head$\uff0c\u518d\u7528\u4e00\u4e2a\u6307\u9488$tail$\u6765\u63a7\u5236\u5408\u6cd5\u7684\u5de6\u7aef\u70b9\u6240\u5728\u533a\u95f4\uff0c\u5982\u679c$[head,tail]$\u8fd9\u4e2a\u533a\u95f4\u4e0d\u5408\u6cd5\uff0c\u90a3\u4e48\u5c31\u8ba9$tail++$\uff0c\u6b64\u65f6\u5982\u679c\u5de6\u7aef\u70b9$L$\u5728$[head,tail]$\u533a\u95f4\u5185\u6784\u6210\u7684\u6240\u6709\u533a\u95f4$[L,head]$\u90fd\u5408\u6cd5\u3002\u800c\u4e14\u5f88\u663e\u7136\u5f53$head$\u53d8\u5927\u65f6\uff0c$tail$\u5355\u8c03\u4e0d\u5c06\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u5de6\u7aef\u70b9$L (L\\in[tail,head])$\uff0c\u8003\u8651\u9700\u8981\u8865\u4e0a\u7684\u5143\u7d20\u4e2a\u6570\u662f\u5426\u4f1a\u8d85\u8fc7$k$\uff0c\u63a8\u4e00\u4e0b\u5f0f\u5b50\uff0c\u79fb\u4e00\u4e0b\u9879\uff0c\u53d1\u73b0\u5f53\u6ee1\u8db3\u4ee5\u4e0b\u5f0f\u5b50\u65f6\u7684\u5de6\u7aef\u70b9$L$\u5c31\u662f\u5408\u6cd5\u7684\uff1a\n\n$\\frac{\\max_{i=L}^{R}{a_i}-\\min_{i=L}^{R}{a_i}}{d}+L\\leq R+k$\n\n\u6b64\u65f6\u5f53\u53f3\u7aef\u70b9\u786e\u5b9a\u65f6\uff0c\u5f0f\u5b50\u7684\u53f3\u8fb9\u4e5f\u662f\u786e\u5b9a\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u627e\u4e00\u4e2a\u6ee1\u8db3\u4e0a\u5f0f\u7684\u4e14\u6700\u9760\u5de6\u7684\u5de6\u7aef\u70b9$L$\u3002\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u529e\u6cd5\u7ef4\u62a4\u6bcf\u4e2a\u5de6\u7aef\u70b9$L$\u5230\u5f53\u524d\u679a\u4e3e\u5230\u7684\u53f3\u7aef\u70b9\u533a\u95f4\u5185\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\n\n\u5f53\u53f3\u7aef\u70b9\u5411\u53f3\u79fb\u52a8\u7684\u65f6\u5019\uff0c\u8003\u8651\u7ef4\u62a4\u4e24\u4e2a\u5355\u8c03\u6808\uff0c\u4e00\u4e2a\u5355\u8c03\u589e\uff0c\u4e00\u4e2a\u5355\u8c03\u964d\uff0c\u5c31\u62ff\u5355\u8c03\u589e\u7684\u6765\u4e3e\u4f8b\u3002\u7531\u5355\u8c03\u6808\u7684\u6027\u8d28\u53ef\u4ee5\u5f97\u51fa\uff0c\u533a\u95f4$[stack[top-1]+1,stack[top]]$\u5185\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u503c\u90fd\u5927\u4e8e$stack[top]$\u7684\u503c\uff0c\u6240\u4ee5\u5f53\u6808\u9876\u8981\u88ab\u5f39\u51fa\u65f6\uff0c\u5c06\u533a\u95f4$[stack[top-1]+1,stack[top]]$\u5185\u7684\u6bcf\u4e00\u4e2a\u5de6\u7aef\u70b9\u7684\u6700\u5c0f\u503c\u90fd\u51cf\u53bb\u5f53\u524d\u503c\u4e0e\u6808\u9876\u7684\u5dee\u503c\u3002\u6700\u5927\u503c\u540c\u7406\u3002\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u6765\u627e\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u9760\u5de6\u7684\u5de6\u7aef\u70b9\uff0c\u5982\u679c\u5f53\u524d\u904d\u5386\u5230\u7684\u8282\u70b9\u7684\u5de6\u8282\u70b9\u6240\u7ba1\u8f96\u7684\u533a\u95f4\u5185\u4e2d\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u8282\u70b9\u5c31\u5f80\u5de6\u8d70\uff0c\u5426\u5219\u5c31\u5f80\u53f3\u8d70\u3002\n### \u4ee3\u7801\n```cpp\n#include<map>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long LL;\nconst int maxn=200005;const LL inf=0x3F3F3F3F3F3F3F3Fll;\nint n,k,d,A[maxn],Area[maxn],num,hed,til,top1,stk1[maxn],top2,stk2[maxn],ans,ansL,ansR;map<int,int> H;\ninline int read()\n{\n\tint ret=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){ret=ret*10+ch-'0';ch=getchar();}\n\treturn ret*f;\n}\nstruct SegmentTree\n{\n\tstruct Node{LL Mi,Ma,TagMi,TagMa,Val;}Tree[maxn*4];\n\tvoid PushUp(int rt)\n\t{\n\t\tTree[rt].Mi=min(Tree[rt*2].Mi,Tree[rt*2+1].Mi);\n\t\tTree[rt].Ma=max(Tree[rt*2].Ma,Tree[rt*2+1].Ma);\n\t\tTree[rt].Val=min(Tree[rt*2].Val,Tree[rt*2+1].Val);\n\t}\n\tvoid PushDown(int rt)\n\t{\n\t\tTree[rt*2].Mi+=Tree[rt].TagMi;Tree[rt*2].TagMi+=Tree[rt].TagMi;Tree[rt*2].Val-=Tree[rt].TagMi;\n\t\tTree[rt*2].Ma+=Tree[rt].TagMa;Tree[rt*2].TagMa+=Tree[rt].TagMa;Tree[rt*2].Val+=Tree[rt].TagMa;\n\t\tTree[rt*2+1].Mi+=Tree[rt].TagMi;Tree[rt*2+1].TagMi+=Tree[rt].TagMi;Tree[rt*2+1].Val-=Tree[rt].TagMi;\n\t\tTree[rt*2+1].Ma+=Tree[rt].TagMa;Tree[rt*2+1].TagMa+=Tree[rt].TagMa;Tree[rt*2+1].Val+=Tree[rt].TagMa;\n\t\tTree[rt].TagMi=Tree[rt].TagMa=0;\n\t}\n\tvoid RangeUpdateMin(int LL,int RR,int delta,int L=1,int R=n,int rt=1)\n\t{\n\t\tif(LL<=L&&R<=RR){Tree[rt].Mi+=delta;Tree[rt].TagMi+=delta;Tree[rt].Val-=delta;return;}\n\t\tPushDown(rt);\n\t\tint M=(L+R)/2;\n\t\tif(LL<=M) RangeUpdateMin(LL,RR,delta,L,M,rt*2);\n\t\tif(M<RR) RangeUpdateMin(LL,RR,delta,M+1,R,rt*2+1);\n\t\tPushUp(rt);\n\t}\n\tvoid RangeUpdateMax(int LL,int RR,int delta,int L=1,int R=n,int rt=1)\n\t{\n\t\tif(LL<=L&&R<=RR){Tree[rt].Ma+=delta;Tree[rt].TagMa+=delta;Tree[rt].Val+=delta;return;}\n\t\tPushDown(rt);\n\t\tint M=(L+R)/2;\n\t\tif(LL<=M) RangeUpdateMax(LL,RR,delta,L,M,rt*2);\n\t\tif(M<RR) RangeUpdateMax(LL,RR,delta,M+1,R,rt*2+1);\n\t\tPushUp(rt);\n\t}\n\tvoid Delete(int P,int L=1,int R=n,int rt=1)\n\t{\n\t\tif(L==P&&R==P){Tree[rt].Val=inf;return;}\n\t\tPushDown(rt);\n\t\tint M=(L+R)/2;\n\t\tif(P<=M) Delete(P,L,M,rt*2);\n\t\tif(M<P) Delete(P,M+1,R,rt*2+1);\n\t\tPushUp(rt);\n\t}\n\tvoid Build(int L=1,int R=n,int rt=1)\n\t{\n\t\tif(L==R){Tree[rt].Val=L;Tree[rt].Mi=Tree[rt].Ma=A[L];return;}\n\t\tint M=(L+R)/2;\n\t\tBuild(L,M,rt*2);\n\t\tBuild(M+1,R,rt*2+1);\n\t\tPushUp(rt);\n\t}\n\tLL Query(int num,int L=1,int R=n,int rt=1)\n\t{\n\t\tif(L==R) return L;\n\t\tint M=(L+R)/2;\n\t\tPushDown(rt);\n\t\tif(Tree[rt*2].Val<=num) return Query(num,L,M,rt*2);\n\t\telse return Query(num,M+1,R,rt*2+1);\n\t}\n}T;\nint main()\n{\n\tn=read();k=read();d=read();\n\tfor(int i=1;i<=n;i++) A[i]=read()+1000000000;\n\tif(!d)\n\t{\n\t\tfor(int i=1,j;i<=n;)\n\t\t{\n\t\t\tj=i;\n\t\t\twhile(j<n&&A[j+1]==A[i]) j++;\n\t\t\tif(j-i+1>ans){ans=j-i+1;ansL=i;ansR=j;}\n\t\t\ti=j+1;\n\t\t}\n\t\tprintf(\"%d %d\\n\",ansL,ansR);\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=n;)\n\t{\n\t\tint j=i;Area[i]=i;\n\t\twhile(j<n&&A[j+1]%d==A[i]%d){j++;Area[j]=i;}\n\t\ti=j+1;\n\t}\n\ttil=1;T.Build();\n\twhile(hed<n)\n\t{\n\t\thed++;H[A[hed]]++;\n\t\twhile(H[A[hed]]>1||Area[hed]!=Area[til]){T.Delete(til);H[A[til]]--;til++;}\n\t\twhile(top1>0&&A[hed]<=A[stk1[top1]])\n\t\t{\n\t\t\tT.RangeUpdateMin(stk1[top1-1]+1,stk1[top1],A[hed]/d-A[stk1[top1]]/d);\n\t\t\ttop1--;\n\t\t}\n\t\tstk1[++top1]=hed;\n\t\twhile(top2>0&&A[hed]>=A[stk2[top2]])\n\t\t{\n\t\t\tT.RangeUpdateMax(stk2[top2-1]+1,stk2[top2],A[hed]/d-A[stk2[top2]]/d);\n\t\t\ttop2--;\n\t\t}\n\t\tstk2[++top2]=hed;\n\t\tLL L=T.Query(hed+k);\n\t\tif(L>=til&&hed-L+1>ans){ans=hed-L+1;ansL=L;ansR=hed;}\n\t}\n\tprintf(\"%d %d\\n\",ansL,ansR);\n\treturn 0;\n}\n```",
        "postTime": 1552719717,
        "uid": 42392,
        "name": "\u5f90\u81f4\u8fdc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF407E \u3010k-d-sequence\u3011"
    },
    {
        "content": "\u7ed9\u5b9a\u5e8f\u5217 $a_{1\\cdots n}$\uff0c\u627e\u4e00\u4e2a\u6700\u957f\u7684\u5b50\u533a\u95f4\u4f7f\u5f97\u8be5\u5b50\u533a\u95f4\u52a0\u5165\u81f3\u591a $k$ \u4e2a\u6570\u4e4b\u540e\uff0c\u6392\u5e8f\u540e\u662f\u4e00\u4e2a\u516c\u5dee\u4e3a $d$ \u7684\u7b49\u5dee\u6570\u5217\u3002\u591a\u4e2a\u89e3\u8f93\u51fa $l$ \u6700\u5c0f\u7684\u3002\n\n$n,k\\leq 2\\times 10^5$\uff0c$|a_i|,d\\leq 10^9$\u3002\n\n\u7279\u5224\u6389 $d=0$\uff0c\u5219\u533a\u95f4 $[l,r]$ \u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\uff1a\n\n- \u76f8\u90bb\u4e24\u4e2a\u6570\u7684 $\\Delta$ \u662f $d$ \u7684\u500d\u6570\u3002\n- \u6ca1\u6709\u91cd\u590d\u5143\u7d20\u3002\n- $r-l+k\\ge\\frac{\\max-\\min}{d}$\u3002\n\n\u6ce8\u610f\u5230\u7b54\u6848\uff08\u957f\u5ea6\uff09\u662f\u6ca1\u6709\u5355\u8c03\u6027\u7684\uff0c\u6240\u4ee5\u4e0d\u8981\u4e8c\u5206\u3002\n\n\u524d\u4e24\u4e2a\u9650\u5236\u662f\u5bb9\u6613\u5904\u7406\u7684\uff0c\u5bf9\u4e8e\u7b2c\u4e09\u4e2a\u9650\u5236\uff0c\u53d8\u5f62\u4e3a $\\max-\\min-Rd\\leq (k-L)d$\uff0c\u5f53\u6211\u4eec\u56fa\u5b9a $L$ \u65f6\u53f3\u8fb9\u662f\u5e38\u6570\uff0c\u5de6\u8fb9\u7684 $\\max-\\min$ \u5173\u4e8e $R$ \u5355\u8c03\u3002 \u5bf9\u4e8e\u5355\u4e2a $L$\uff0c\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u7ed3\u7b97 $\\max-\\min$ \u7684\u65b9\u5f0f\uff1a\u8bb0 $s_R$ \u8868\u793a $[L,R]$ \u7684 $\\max-\\min$\uff0c\u627e\u5230 $L$ \u540e\u7b2c\u4e00\u4e2a\u6bd4 $a_L$ \u5927\u7684\u4f4d\u7f6e $a_x$\uff0c\u5219 $s_{x\\cdots n}$ \u90fd\u5e94\u8be5\u52a0\u4e0a $a_x-a_L$\uff0c\u518d\u5f80\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4 $a_x$ \u5927\u7684\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff1b$\\min$ \u90e8\u5206\u540c\u7406\u3002\n\n\u4e00\u4e2a\u60f3\u6cd5\u662f\u5411\u540e\u9762\u7b2c\u4e00\u4e2a\u6bd4\u81ea\u5df1\u5927/\u5c0f\u7684\u70b9\u8fde\u7236\u8fb9\uff0c\u4f46\u8fd9\u9898\u4e2d\u4f1a\u5efa\u7acb\u4e24\u68f5\u6811\uff0c\u4fe1\u606f\u4e0d\u65b9\u4fbf\u5408\u5e76\uff0c\u4e8e\u662f\u53ea\u80fd\u6574\u4f53\u7ef4\u62a4\uff08$\\max-\\min$\uff09\u3002\u53e6\u5916\u53d1\u73b0\uff0c\u672c\u8d28\u662f\u4ece\u540e\u5f80\u524d\u7ef4\u62a4\u4e86\u4e24\u4e2a\u5355\u8c03\u6808\uff0c\u6808\u4e2d\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u4f1a\u6709 $s$ \u7684\u540e\u7f00\u52a0\u3002\n\n\u5bf9\u4e8e\u524d\u4e24\u4e2a\u9650\u5236\uff0c\u5408\u6cd5\u7684 $R$ \u662f\u4e00\u4e2a $L$ \u5f00\u59cb\u7684\u524d\u7f00 $[L,r]$\uff0c\u4e8c\u5206\u51fa\u8fd9\u4e2a $r$\uff0c\u7136\u540e\u9700\u8981\u67e5\u8be2 $L\\leq R\\leq r$\uff0c\u6ee1\u8db3 $s_R-Rd\\leq (k-L)d$ \u7684\u6700\u5927\u7684 $R$\uff0c\u4e0d\u59a8\u6574\u4f53\u7ef4\u62a4 $s_R-Rd$\uff0c\u4e8e\u662f\u672c\u8d28\u662f\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217 $val$\uff0c\u652f\u6301\u533a\u95f4\u52a0\uff0c\u67e5\u8be2\u533a\u95f4\u6700\u9760\u540e\u4e00\u4e2a\u6ee1\u8db3 $val_i\\leq x$ \u7684 $i$\uff0c\u7ebf\u6bb5\u6811\u4e8c\u5206\u53ef\u4ee5 $O(n\\log n)$ \u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u3002\n\n",
        "postTime": 1666336738,
        "uid": 447750,
        "name": "luogubot",
        "ccfLevel": 0,
        "title": "CF407E"
    },
    {
        "content": "~~\u8fd9\u53ef\u80fd\u662f\u672c\u9898\u8dd1\u7684\u6700\u6162\u7684\u9898\u89e3~~\n\n\u9996\u5148\u7279\u5224\u6389 $d=0$ \u7684\u60c5\u51b5\uff0c\u8fd9\u4e2a\u5c31\u662f\u6700\u957f\u7684\u76f8\u540c\u5b50\u4e32\u3002\n\n\u7136\u540e\u8003\u8651 $d>0$\u3002\u5982\u679c\u76f4\u63a5\u679a\u4e3e\u5de6\u7aef\u70b9\u627e\u53f3\u7aef\u70b9\u7684\u8bdd\u4f3c\u4e4e\u4e0d\u592a\u597d\u5904\u7406\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u5206\u6cbb\u3002\n\n\u5982\u679c\u5206\u6cbb\u533a\u95f4\u7684\u957f\u5ea6 $\\le 2$\uff0c\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u3002\u5982\u679c $>2$ \u7684\u8bdd\uff0c\u8003\u8651\u5de6\u7aef\u70b9\u5728 $[l,mid]$\uff0c\u53f3\u7aef\u70b9\u5728 $(mid,r]$ \u7684\u8d21\u732e\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u5728 $O(m\\log m)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u73b0\uff08$m$ \u4e3a\u533a\u95f4\u957f\u5ea6\uff09\uff0c\u90a3\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u964d\u81f3 $O(n\\log^2n)$\u3002\n\n\u8bbe\u5408\u6cd5\u7684\u533a\u95f4\u4e3a $[u,v]$ \u8fd9\u4e2a\u533a\u95f4\u81f3\u5c11\u8981\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n- $\\forall i\\in [u,v],\\ a_i\\equiv a_{mid}\\pmod d$\n\n- $\\forall i,j\\in [u,v]\\ (i\\not=j),\\ a_i\\not=a_j$\n\n\u53ef\u4ee5\u76f4\u63a5\u626b\u4e00\u904d\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u957f\u524d\u7f00\u548c\u540e\u7f00\u3002\uff08\u8fd9\u91cc\u7684\u524d\u7f00\u6307\u7684\u662f $mid+1$ \u5f80\u540e\u7684\u90e8\u5206\uff0c\u540e\u7f00\u6307\u7684\u662f $mid$ \u53ca\u4ee5\u524d\u7684\u90e8\u5206\uff09\n\n\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u53cc\u6307\u9488\u4e86\u3002\u4ece\u5de6\u5f80\u53f3\u679a\u4e3e\u5de6\u7aef\u70b9\uff0c\u663e\u7136\u5408\u6cd5\u7684\u53f3\u7aef\u70b9\u662f\u9012\u589e\u7684\u3002\n\n\u4e00\u76f4\u5230\u8fd9\u91cc\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a $O(m\\log m)$\u3002\n\n\u5982\u679c\u4e00\u4e2a\u4e0d\u91cd\u7684\uff0c\u6a21 $d$ \u540c\u4f59\u7684\u6570\u5217 $l$ \u52a0\u5165\u81f3\u591a $k$ \u4e2a\u6570\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\uff0c\u5145\u8981\u6761\u4ef6\u5c31\u662f\n\n$$\n|l|+k-1\\ge \\frac{\\max_l-\\min_l}{d}\n$$\n\n\u653e\u5230\u4e00\u6bb5\u533a\u95f4 $[l,r]$ \u4e2d\uff0c\u5c31\u662f\n\n$$\n\\begin{aligned}\nr-l+k &\\ge \\frac{\\max_{[l,r]}-\\min_{[l,r]}}{d}\\\\\nd(r-l+k) &\\ge \\max_{[l,r]}-\\min_{[l,r]}\n\\end{aligned}\n$$\n\n\u56de\u5230\u53cc\u6307\u9488\u3002\u8bbe\u5f53\u524d\u7684\u540e\u7f00\u6700\u5927\u503c\u4e3a $smax$\uff0c\u6700\u5c0f\u503c\u4e3a $smin$\uff0c\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ptdqmzwa.png)\n\n\u7531\u4e8e\u6709\u591a\u4e2a\u5408\u6cd5\u53f3\u7aef\u70b9\uff0c\u6240\u4ee5\u6709\u591a\u4e2a\u524d\u7f00\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\u4ed6\u4eec\u7ec4\u6210\u4e86\u4e00\u6761\u5411\u4e0a\u7684\u76f4\u7ebf\u548c\u4e00\u6761\u5411\u4e0b\u7684\u76f4\u7ebf\uff0c\u8bbe\u5b83\u4eec\u5206\u522b\u4e3a $pmax$ \u548c $pmin$\u3002\n\n1. $[pmin,pmax]\\subseteq [smin,smax]$\uff0c\u4e5f\u5c31\u662f\u56fe\u4e2d\u7684 $[mid+1,p]$ \u6bb5\u3002\u8fd9\u4e1c\u897f\u53ef\u4ee5\u4e8c\u5206\u6c42\u3002\u6b64\u65f6\u5e8f\u5217\u7684\u6700\u5927\u503c\u5c31\u662f $smax$\uff0c\u6700\u5c0f\u503c\u5c31\u662f $smin$\uff0c\u6240\u4ee5\u4e0d\u7b49\u5f0f\u53d8\u4e3a $d(r-l+k)\\ge smax-smin$\uff0c\u663e\u7136 $r$ \u8d8a\u5927\u8d8a\u597d\uff0c\u6240\u4ee5\u68c0\u67e5 $p$ \u662f\u5426\u5408\u6cd5\u5373\u53ef\u3002\n\n2. $[smin,smax]\\subset [pmin,pmax]$\uff0c\u4e5f\u5c31\u662f\u56fe\u4e2d\u7684 $(q,r]$ \u6bb5\u3002\u8fd9\u4e1c\u897f\u4e5f\u53ef\u4ee5\u4e8c\u5206\u6c42\u3002\u6b64\u65f6\u5e8f\u5217\u7684\u6700\u5927\u503c\u662f $pmax_r$\uff0c\u6700\u5c0f\u503c\u662f $pmin_r$\uff0c\u4e0d\u7b49\u5f0f\u53d8\u4e3a $d(k-l)\\ge pmax_r-pmin_r-dr$\uff0c\u53d1\u73b0\u5de6\u8fb9\u662f\u5b9a\u503c\uff0c\u53f3\u8fb9\u53ef\u4ee5\u76f4\u63a5\u9884\u5904\u7406\u3002\u89c2\u5bdf\u5230\u4e00\u70b9\uff1a\u7531\u4e8e\u5de6\u7aef\u70b9\u662f\u4ece\u5de6\u5230\u53f3\u626b\u63cf\u7684\uff0c\u6240\u4ee5 $[smin,smax]$ \u8fd9\u4e2a\u533a\u95f4\u4f1a\u8d8a\u6765\u8d8a\u9760\u62e2\uff0c$q$ \u5c31\u4f1a\u9012\u51cf\u3002\u6240\u4ee5\u5229\u7528\u53cc\u6307\u9488\u5c31\u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4\u8fd9\u4e00\u6bb5\u533a\u95f4\u5bf9\u5e94\u7684\u4fe1\u606f\u3002\u4e0d\u7b49\u5f0f\u53ef\u4ee5\u7528 fhqTreap \u6765\u7ef4\u62a4\uff0c\u800c\u4e14\u8fd9\u5c31\u662f\u6a21\u677f\u3002\n\n3. \u4e5f\u5c31\u662f\u56fe\u4e2d\u7684 $(p,q]$ \u6bb5\u3002\u8fd9\u4e00\u6bb5\u8981\u4e48\u662f $pmax>smax$\uff0c\u8981\u4e48\u662f $pmin<smin$\u3002\u8fd9\u91cc\u4ee5 $pmax>smax$ \u4e3a\u4f8b\uff0c\u4e0d\u7b49\u5f0f\u5316\u4e3a $d(k-l)+smin\\ge pmax_r-dr$\uff0c\u7528\u4e0e\u60c5\u51b5\u4e8c\u76f8\u540c\u7684\u529e\u6cd5\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u7136\u662f $O(m\\log m)$\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2n)$\u3002\u4ee3\u7801\u96be\u5ea6\u8f83\u5927\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int Maxn=4e5,inf=1e9;\n\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\n\nstruct Tree\n{\n    struct Node{int l,r,key,idx,num; ll val;} t[Maxn+5];\n    int tot=0,rt=0;\n    #define ls(x) t[x].l\n    #define rs(x) t[x].r\n    inline int NewNode(ll x,int y)\n    {\n        t[++tot]=(Node){0,0,rand(),y,y,x};\n        return tot;\n    }\n    inline void push_up(int p) {t[p].num=max(t[ls(p)].num,max(t[rs(p)].num,t[p].idx));}\n    inline void Split(int now,ll val,int idx,int &x,int &y)\n    {\n        if(!now) {x=y=0; return;}\n        if(t[now].val<val || (t[now].val==val && t[now].idx<=idx))\n            x=now,Split(rs(now),val,idx,rs(now),y);\n        else y=now,Split(ls(now),val,idx,x,ls(now));\n        push_up(now);\n    }\n    inline int Merge(int x,int y)\n    {\n        if(!x || !y) return x+y;\n        if(t[x].key<=t[y].key) {rs(x)=Merge(rs(x),y),push_up(x); return x;}\n        else {ls(y)=Merge(x,ls(y)),push_up(y); return y;}\n    }\n    inline void Insert(ll x,int y)\n    {\n        int a,b; x=NewNode(x,y); Split(rt,t[x].val,y,a,b);\n        rt=Merge(a,Merge(x,b));\n    }\n    inline void Delete(ll x,int y)\n    {\n        int a,b,c; Split(rt,x,y,a,c),Split(a,x,y-1,a,b);\n        rt=Merge(a,Merge(Merge(ls(b),rs(b)),c));\n    }\n    inline int Count(ll x)\n    {\n        int a,b,c; Split(rt,x,inf,a,b); c=t[a].num;\n        rt=Merge(a,b); return c;\n    }\n    inline void Clear() {rt=tot=0;}\n} T1,T2,T3;\n\nint n,k,d,a[Maxn+5],ans,ansl;\nint Max[Maxn+5],Min[Maxn+5];\nll vals[Maxn+5],vall[Maxn+5],valr[Maxn+5];\nint al,ar,bl,br,cl,cr;\nmap<int,int> mp;\n\ninline void Check(int x,int y)\n{\n    if(ans<x) ans=x,ansl=y;\n    else if(ans==x && y<ansl) ansl=y;\n}\ninline int Stage1(int ql,int p,int qr)\n{\n    if(Max[p+1]>Max[ql] || Min[p+1]<Min[ql]) return p;\n    int l=p+1,r=qr;\n    while(l<r)\n    {\n        int mid=(l+r+1)/2;\n        if(Max[ql]>=Max[mid] && Min[ql]<=Min[mid]) l=mid;\n        else r=mid-1;\n    }\n    if(1ll*d*(l-ql+k)>=Max[ql]-Min[ql]) Check(l-ql+1,ql);\n    return l;\n}\ninline int Stage3(int ql,int p,int qr)\n{\n    if(Max[ql]>=Max[qr] || Min[ql]<=Min[qr]) return qr+1;\n    int l=p+1,r=qr;\n    while(l<r)\n    {\n        int mid=(l+r)/2;\n        if(Max[mid]>Max[ql] && Min[mid]<Min[ql]) r=mid;\n        else l=mid+1;\n    }\n    if(!cl && !cr)\n    {\n        cl=l,cr=qr;\n        For(i,l,qr) T3.Insert(vals[i],i);\n    }\n    else\n    {\n        while(cl>l) --cl,T3.Insert(vals[cl],cl);\n        while(cr<qr) ++cr,T3.Insert(vals[cr],cr);\n    }\n    int res=T3.Count(1ll*d*(k-ql));\n    if(res) Check(res-ql+1,ql);\n    return l;\n}\ninline void Stage2(int ql,int p,int nl,int nr)\n{\n    if(Min[nl]<Min[ql])\n    {\n        if(!al && !ar)\n        {\n            al=nl,ar=nr;\n            For(i,al,ar) T1.Insert(vall[i],i);\n        }\n        else\n        {\n            while(nl<al) al--,T1.Insert(vall[al],al);\n            while(ar<nr) ar++,T1.Insert(vall[ar],ar);\n            while(nl>al) T1.Delete(vall[al],al),al++;\n            while(ar>nr) T1.Delete(vall[ar],ar),ar--;\n        }\n        int res=T1.Count(1ll*d*(k-ql)-1ll*Max[ql]);\n        if(res) Check(res-ql+1,ql);\n    }\n    else\n    {\n        if(!bl && !br)\n        {\n            bl=nl,br=nr;\n            For(i,bl,br) T2.Insert(valr[i],i);\n        }\n        else\n        {\n            while(nl<bl) bl--,T2.Insert(valr[bl],bl);\n            while(br<nr) br++,T2.Insert(valr[br],br);\n            while(nl>bl) T2.Delete(valr[bl],bl),bl++;\n            while(br>nr) T2.Delete(valr[br],br),br--;\n        }\n        int res=T2.Count(1ll*d*(k-ql)+1ll*Min[ql]);\n        if(res) Check(res-ql+1,ql);\n    }\n}\ninline void Count(int l,int r,int mid)\n{\n    int typ=a[mid]%d,ql=mid,qr=mid+1;\n    al=ar=bl=br=cl=cr=0;\n    T1.Clear(),T2.Clear(),T3.Clear();\n    if(a[mid]%d!=a[mid+1]%d) return;\n    if(a[mid]==a[mid+1]) return;\n    Min[mid]=Max[mid]=a[mid];\n    Min[mid+1]=Max[mid+1]=a[mid+1];\n    mp.clear(); mp[a[mid]]=1;\n    Rof(i,mid-1,l)\n    {\n        if(a[i]%d!=typ) break;\n        if(mp[a[i]]) break;\n        ql=i,Min[i]=min(a[i],Min[i+1]),Max[i]=max(a[i],Max[i+1]),mp[a[i]]=1;\n    }\n    mp.clear(); mp[a[mid+1]]=1;\n    For(i,mid+2,r)\n    {\n        if(a[i]%d!=typ) break;\n        if(mp[a[i]]) break;\n        qr=i,Min[i]=min(a[i],Min[i-1]),Max[i]=max(a[i],Max[i-1]),mp[a[i]]=1;\n    }\n    For(i,mid+1,qr) vals[i]=-1ll*d*i+Max[i]-Min[i],\n                    vall[i]=-1ll*d*i-Min[i],valr[i]=-1ll*d*i+Max[i];\n    mp.clear();\n    For(i,ql,mid) mp[a[i]]=1;\n    int nr=mid;\n    For(i,ql,mid)\n    {\n        if(i-1>=ql) mp.erase(a[i-1]);\n        while(nr<qr && mp.find(a[nr+1])==mp.end()) nr++;\n        if(nr>mid)\n        {\n            int p1=Stage1(i,mid,nr);\n            int p3=Stage3(i,mid,nr);\n            if(p1+1<=p3-1) Stage2(i,mid,p1+1,p3-1);\n        }\n    }\n}\ninline void dfs(int l,int r)\n{\n    if(l==r) {Check(1,l); return;}\n    if(r==l+1)\n    {\n        if(a[r]%d==a[l]%d && a[l]!=a[r] && abs(a[r]-a[l])/d+1<=k+2) Check(2,l);\n        dfs(l,l),dfs(r,r); return;\n    }\n    int mid=(l+r)>>1;\n    Count(l,r,mid);\n    dfs(l,mid),dfs(mid+1,r);\n}\ninline void Run0()\n{\n    int pre=1;\n    For(i,1,n)\n        if(a[i]!=a[pre])\n        {\n            Check(i-pre,pre);\n            pre=i;\n        }\n    Check(n-pre+1,pre);\n    printf(\"%d %d\\n\",ansl,ansl+ans-1);\n}\n\nsigned main()\n{\n    srand(time(0));\n    n=read(),k=read(),d=read();\n    int Min=0;\n    For(i,1,n) a[i]=read(),Min=min(Min,a[i]);\n    For(i,1,n) a[i]+=abs(Min);\n    if(d==0) {Run0(); return 0;}\n    dfs(1,n);\n    printf(\"%d %d\\n\",ansl,ansl+ans-1);\n    return 0;\n}\n```",
        "postTime": 1662731007,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF407E\u3010k-d-sequence\u3011"
    },
    {
        "content": "# \u626b\u63cf\u7ebf \u533a\u95f4\u5b50\u533a\u95f4\u95ee\u9898\n\n\u663e\u7136 \u53ea\u6709 $\\mod d$ \u540c\u4f59\u7684\u624d\u6709\u53ef\u80fd\u6210 $d$ \u7b49\u5dee\u6570\u5217\n\n\u5206\u6bb5 \u5c06\u8fde\u7eed\u4e14 $\\mod d$ \u540c\u4f59\u7684\u5206\u5728\u4e00\u6bb5 \u526a\u6389\u4f59\u6570\u9664\u4ee5 d \u5224\u65ad  $max - min - r + l - k$ \u662f\u5426\u5c0f\u4e8e $0$\n\n\u5206\u522b\u89e3\u51b3\u6bcf\u6bb5\u7684\u5b50\u95ee\u9898 \u8003\u8651\u5e73\u9762\u8868\u793a\u533a\u95f4 \u505a\u6cd5\u540c[CF997E](https://www.luogu.com.cn/problem/CF997E)\n\n[\u6211\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/hl2021hcj/solution-cf997e)\n\n\u7136\u540e\u5462\u8fd8\u662f\u50bb\u50bb\u7684\u628a\u6240\u6709\u73a9\u610f\u90fd\u8868\u793a\u6210\u77e9\u5f62\u52a0\n\n\u6709\u4e00\u4e2a\u663e\u7136\u7684\u6027\u8d28\u662f\u4e00\u4e2a\u533a\u95f4\u6ee1\u8db3\u5219\u5176\u5b50\u533a\u95f4\u6ee1\u8db3 \u56e0\u6b64\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u7b2c\u4e00\u4e2a\u5c0f\u4e8e $ 0 $ \u7684\u5373\u53ef \u53ef\u4ee5\u5e73\u51e1\u5730\u7ef4\u62a4\n\n**\u5751\u70b9 \u7279\u5224 $d=0$** ljdl \u9898\n\n\u65f6\u95f4\u7a7a\u95f4\u7a33\u7a33\u5012\u6570\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define oo 10000000000\nusing namespace std;\nmap<int,int>pre;\nconst int N=2e5+3;\nint n,k,d,a[N],cntl,cntq;\nstruct _b\n{\n\tint l,r;\n}block[N],lim_max[N],lim_min[N];\nstruct _ans\n{\n\tint l,r,len;\n}ans,qwq_ans;\nstruct _stc\n{\n\tint id;\n\tint key;\n\tbool friend operator < (const _stc a,const _stc b)\n\t{\n\t\treturn a.key<b.key;\n\t}\n\tbool friend operator > (const _stc a,const _stc b)\n\t{\n\t\treturn a.key>b.key;\n\t}\n\tbool friend operator <= (const _stc a,const _stc b)\n\t{\n\t\treturn a.key<=b.key;\n\t}\n\tbool friend operator >= (const _stc a,const _stc b)\n\t{\n\t\treturn a.key>=b.key;\n\t}\n};\ninline int read()\n{\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(c>'9'||c<'0')\n\t{\n\t\tif(c=='-')f=1;\n\t\tc=getchar();\n\t}\n\twhile(c<='9'&&c>='0')\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\n\ninline void stc_max(int l,int r)\n{\n\tstack<_stc>stc;\n\tstc.push({l-1,100000000});\n\tfor(int i=l;i<=r;i++)\n\t{\n\t\t_stc sa={i,a[i]};\n\t\tif(stc.top()>sa)\n\t\t{\n\t\t\tlim_max[i].l=stc.top().id;\n\t\t\tstc.push(sa);\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile(stc.top()<=sa&&stc.top().id!=l-1)\n\t\t\t{\n\t\t\t\tlim_max[stc.top().id].r=i;\n\t\t\t\tstc.pop();\n\t\t\t}\n\t\t\tlim_max[i].l=stc.top().id;\n\t\t\tstc.push(sa);\n\t\t}\n\t}\n\twhile(stc.top().id!=l-1)\n\t{\n\t\tlim_max[stc.top().id].r=r+1;\n\t\tstc.pop();\n\t}\n}\n\ninline void stc_min(int l,int r)\n{\n\tstack<_stc>stc;\n\tstc.push({l-1,-1});\n\tfor(int i=l;i<=r;i++)\n\t{\n\t\t_stc sa={i,a[i]};\n\t\tif(stc.top()<sa)\n\t\t{\n\t\t\tlim_min[i].l=stc.top().id;\n\t\t\tstc.push(sa);\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile(stc.top()>=sa&&stc.top().id!=l-1)\n\t\t\t{\n\t\t\t\tlim_min[stc.top().id].r=i;\n\t\t\t\tstc.pop();\n\t\t\t}\n\t\t\tlim_min[i].l=stc.top().id;\n\t\t\tstc.push(sa);\n\t\t}\n\t}\n\twhile(stc.top().id!=l-1)\n\t{\n\t\tlim_min[stc.top().id].r=r+1;\n\t\tstc.pop();\n\t}\n}\n\nstruct node\n{\n\tint l_l,l_r,r,v;\n\tbool friend operator < (const node a,const node b)\n\t{\n\t\treturn a.r<b.r;\n\t}\n}line[N<<4];\n\nstruct seg\n{\n\tint key;\n\tint tag;\n}\nt[N<<2];\n#define ls p<<1\n#define rs p<<1|1\ninline void update(int p)\n{\n\tt[p].key=min(t[ls].key,t[rs].key);\n}\ninline void pushdown(int p)\n{\n\tif(t[p].tag!=0)\n\t{\n\t\tt[ls].tag+=t[p].tag;\n\t\tt[rs].tag+=t[p].tag;\n\t\tt[ls].key+=t[p].tag;\n\t\tt[rs].key+=t[p].tag;\n\t\tt[p].tag=0;\n\t}\n}\nvoid modify(int l,int r,int ql,int qr,int dx,int p)\n{\n\tif(ql<=l&&r<=qr)\n\t{\n\t\tt[p].key+=dx;\n\t\tt[p].tag+=dx;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tpushdown(p);\n\tif(ql<=mid)modify(l,mid,ql,qr,dx,ls);\n\tif(qr>mid)modify(mid+1,r,ql,qr,dx,rs);\n\tupdate(p);\n}\n\nint query(int l,int r,int ql,int qr,int p,bool &type)\n{\n\tif(type)\n\t{\n\t\tif(l==r)\n\t\treturn l;\n\t\tpushdown(p);\n\t\tint mid=l+r>>1;\n\t\tif(t[ls].key<=0)return query(l,mid,ql,qr,ls,type);\n\t\treturn query(mid+1,r,ql,qr,rs,type);\n\t}\n\tif(ql<=l&&r<=qr)\n\t{\n\t\tif(t[p].key<=0)\n        {\n            type=1;\n\t\t    return query(l,r,ql,qr,p,type);\n        }\n\t\treturn oo;\n\t}\n\tint mid=l+r>>1;\n\tpushdown(p);\n\tint res=oo;\n\tif(ql<=mid)res=query(l,mid,ql,qr,ls,type);\n\tif(type)return res;\n\tif(qr>mid)res=query(mid+1,r,ql,qr,rs,type);\n\treturn res;\n}\n\ninline void solve(int l,int r)\n{\n\tans={0,0,0};\n\tstc_max(l,r);\n\tstc_min(l,r);\n\tfor(int i=l;i<=r;i++)\n\t{\n\t\tline[++cntl]={1,n,i,-1};\n\t\tline[++cntl]={lim_max[i].l+1,i,i,a[i]};\n\t\tline[++cntl]={lim_max[i].l+1,i,lim_max[i].r,-a[i]};\n\t\tline[++cntl]={lim_min[i].l+1,i,i,-a[i]};\n\t\tline[++cntl]={lim_min[i].l+1,i,lim_min[i].r,a[i]};\n\t}\n\tsort(line+cntq,line+cntl+1);\n\tfor(int i=l;i<=r;i++)\n\t{\n\t\twhile(line[cntq].r<=i&&cntq<=cntl)\n\t\t{\n\t\t\tmodify(1,n,line[cntq].l_l,line[cntq].l_r,line[cntq].v,1);\n\t\t\tcntq++;\n\t\t}\n\t\tif(pre[a[i]]>=l)\n\t\tmodify(1,n,l,pre[a[i]],oo,1);\n\t\tpre[a[i]]=i;\n\t\tbool ttt=0;\n\t\tans.l=query(1,n,l,i,1,ttt);\n\t\tans.r=i;\n\t\tans.len=ans.r-ans.l+1;\n\t\tif(qwq_ans.len<ans.len)\n\t    qwq_ans=ans;\n\t}\n}\nint cntb;\nsigned main()\n{\n\tn=read();\n\tk=read();\n\td=read();\n\tif(d==0)\n\t{\n\t    int cnt=1;\n\t    a[1]=read();\n\t    int l,r=1;\n\t    int tcnt=1;\n\t    l=1;\n\t    int tl;\n\t    for(int i=2;i<=n;i++)\n\t    {\n\t        a[i]=read();\n\t        if(a[i]==a[i-1])tcnt++;\n\t        else\n\t        {\n\t            if(cnt<tcnt)\n\t            {\n\t                cnt=tcnt;\n\t                l=tl;\n\t                r=i-1;\n                }\n\t            tcnt=1;\n\t            tl=i;\n            }\n        }\n        cnt=max(cnt,tcnt);\n        cout<<l<<\" \"<<r;\n        return 0;\n    }\n\ta[1]=read();\n\tcntb=1;\n\tblock[cntb].l=1;\n\tint rest[2];\n\trest[0]=a[1]%d;\n\tif(rest[0]<0)rest[0]+=d;\n\tint w=1;\n\tfor(int i=2;i<=n;i++,w^=1)\n\t{\n\t\ta[i]=read();\n\t\trest[w]=a[i]%d;\n\t\tif(rest[w]<0)rest[w]+=d;\n\t\tif(rest[w]!=rest[w^1])\n\t\t{\n\t\t\tblock[cntb].r=i-1;\n\t\t\tblock[++cntb].l=i;\n\t\t}\n\t\ta[i-1]=(a[i-1]-rest[w^1])/d;\n\t}\n\tfor(int i=1;i<=n;i++)pre[a[i]]=0;\n\ta[n]=(a[n]-rest[w^1])/d;\n\tblock[cntb].r=n;\n\tcntq=1;\n\tqwq_ans.len=-oo;\n\tfor(int i=1;i<=n;i++)line[++cntl]={i,i,1,i-k};\n\tfor(int i=1;i<=cntb;i++)\n\t{\n\t\tsolve(block[i].l,block[i].r);\n\t}\n\tprintf(\"%lld %lld\",qwq_ans.l,qwq_ans.r);\n\treturn 0;\n}\n```\n",
        "postTime": 1642267462,
        "uid": 223560,
        "name": "_HL_",
        "ccfLevel": 0,
        "title": "CF407E k-d-sequence \u9898\u89e3"
    },
    {
        "content": "\u5148\u7279\u5224\u6389 $d=0$ \u7684\u60c5\u51b5\n\n\u663e\u7136\u5982\u679c\u4e00\u6bb5\u8fde\u7eed\u7684\u6570\u91cc\u9762 $\\%d$ \u7684\u503c\u4e0d\u552f\u4e00\uff0c\u90a3\u8fd9\u4e2a\u533a\u95f4\u65e0\u8bba\u5982\u4f55\u4e5f\u65e0\u6cd5\u88ab\u586b\u6210\u7b49\u5dee\u6570\u5217\u3002\n\n\u90a3\u4e48\u8003\u8651\u5c06 $\\%d$  \u7684\u503c\u76f8\u540c\u7684\u6570\u653e\u5728\u4e00\u8d77\u8ba8\u8bba\u3002\u6211\u4eec\u53ea\u4f1a\u8003\u8651\u8fde\u7eed\u4e00\u6bb5 $\\%d$ \u76f8\u540c\u7684\u6570\u3002\n\n\u5148\u5c06\u6240\u6709\u6570\u52a0\u6210\u6b63\u6570\uff0c\u7136\u540e\u9664\u4ee5 $d$\uff0c\u628a $d$ \u8f6c\u5316\u4e3a1\u5904\u7406\u3002\n\n\u9996\u5148\u53d1\u73b0\uff0c\u4e00\u4e2a\u533a\u95f4 $[l,r]$ \u662f\u5408\u6cd5\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a\n\n1. \u533a\u95f4\u5185\u65e0\u76f8\u540c\u7684\u6570\u5b57\n2. $\\max[l,r]-min[l,r]-(r-l) \\leq m$\n\n\u6761\u4ef61\u5f88\u663e\u7136\uff0c\u6761\u4ef62\u7684\u610f\u601d\u5c31\u662f\u8fd9\u4e2a\u533a\u95f4\u4ee3\u8868\u7684\u503c\u57df\u957f\u5ea6\u4e3a $max[l,r]-min[l,r]+1$\uff0c \u6211\u4eec\u9700\u8981\u628a\u4e2d\u95f4\u7684\u7a7a\u7f3a\u8865\u6ee1\uff0c\u800c\u6211\u4eec\u73b0\u5728\u503c\u57df\u4e2d\u5df2\u7ecf\u6709\u4e86 $r-l+1$ \u4e2a\u6570\u5b57\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u586b\u7684\u6570\u5b57\u4e2a\u6570\u5c31\u662f\u4e24\u8005\u4e4b\u5dee\u3002\u90a3\u4e48\u6839\u636e\u9898\u610f\uff0c\u53ea\u8981\u4e0d\u8d85\u8fc7 $m$ \u5373\u53ef\u3002\n\n\u73b0\u5728\uff0c\u53ea\u8003\u8651\u4e00\u6bb5\u8fde\u7eed\u7684 $\\%d$ \u76f8\u540c\u7684\u6570\uff0c\u5176\u957f\u5ea6\u4e3a $len$.\n\n\u5bf9\u4e8e\u4e00\u6bb5\u6570\u5b57\uff0c\u6211\u4eec\u8981\u7edf\u8ba1\u6ee1\u8db3\u4ee5\u4e0a\u4e24\u4e2a\u6761\u4ef6\u7684\uff0c\u5e76\u4e14\u957f\u5ea6\u6700\u957f\u7684\u533a\u95f4\uff0c\u663e\u7136\u53ef\u4ee5\u5f88\u5957\u8def\u5730\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u5de6\u7aef\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5de6\u7aef\u70b9\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u7684\u53f3\u7aef\u70b9\u3002\n\n\u9996\u5148\uff0c\u5148\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u627e\u4ee5\u5b83\u4e3a\u5de6\u7aef\u70b9\uff0c\u6781\u5927\u7684\u4e00\u4e2a\u53f3\u7aef\u70b9\u4f7f\u5f97\u5b83\u4eec\u4e4b\u95f4\u6ca1\u6709\u91cd\u590d\u6570\u5b57\uff0c\u8bb0\u4e3a $rpos_i$\n\n\u5f53 $l$ \u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u628a\u6761\u4ef62\u5199\u6210 $\\max[l,r]-min[l,r]- r \\leq m + l$\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4 $\\max[l,r]-min[l,r]- r$, \u5bf9\u4e8e\u6bcf\u4e2a $l$ \u5728\u8fdb\u884c\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u627e\u5230\u6ee1\u8db3\u7ef4\u62a4\u7684\u503c $\\leq m+l$ \u7684\u6700\u5927\u7684 $r$.\n\n\u8003\u8651\u5982\u4f55\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u8fd9\u4e2a\u503c\u3002 \u5f53 $l$ \u5de6\u79fb\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5f00\u4e24\u4e2a\u5355\u8c03\u6808\uff0c\u7ef4\u62a4\u4ece $l$ \u5230 $len$ \u7684\u4e00\u4e2a\u5355\u8c03\u9012\u51cf\u548c\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u6570\u5217\u3002 \n\n\u5728\u5355\u8c03\u9012\u589e\u7684\u6808\u91cc\uff0c\u6bcf\u5f53\u52a0\u5165\u4e00\u4e2a\u6570 $x$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1apop\u6389\u6bd4\u5b83\u5c0f\u7684\u6570\u3002 \u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2apop\u6389\u7684\u6570 $v$\uff0c\u5b83\u539f\u6765\u7ba1\u8f96\u7684\u533a\u95f4(\u5b83\u5230\u6808\u4e2d\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u7684\u6240\u6709\u53f3\u7aef\u70b9)\u7684\u6700\u5927\u503c\u672c\u6765\u662f\u5b83\uff0c\u4f46\u662f\u73b0\u5728 $x$ \u628a\u5b83\u66ff\u4ee3\u6389\u4e86\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u6570\u7ba1\u8f96\u7684\u533a\u95f4\uff0c\u6211\u4eec\u7ef4\u62a4\u7684\u503c\u5c31\u4f1a\u589e\u52a0 $x-v$\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u533a\u95f4\u52a0\u5373\u53ef\u3002 \u5355\u8c03\u9012\u51cf\u7684\u6808\u540c\u7406\u3002\n\n\u518d\u8003\u8651\u4e0d\u91cd\u590d\u7684\u9650\u5236\u3002 \u5728\u8ba8\u8bba\u7684\u5de6\u7aef\u70b9\u4e3a $l$ \u65f6\uff0c\u53ef\u4ee5\u5f3a\u5236\u628a\u7ebf\u6bb5\u6811\u4e0a $[rpos_l+1,len]$ \u8fd9\u4e2a\u533a\u95f4\u52a0\u6210\u65e0\u7a77\u5927\uff0c\u8fd9\u6837\u7ebf\u6bb5\u6811\u4e8c\u5206\u65f6\u5c31\u4e0d\u53ef\u80fd\u627e\u5230 $rpos_l$ \u540e\u9762\u7684\u4f4d\u7f6e\u3002\n\n\u8fd9\u6837\uff0c\u5904\u7406\u4e00\u6bb5\u8fde\u7eed\u7684\u6570\u7684\u590d\u6742\u5ea6\u4fbf\u662f $O(Len* log\\ Len)$ \u7684\uff0c\u6211\u4eec\u5904\u7406\u7684\u6240\u6709\u8fde\u7eed\u533a\u95f4\u663e\u7136\u662f\u6ca1\u6709\u4ea4\u7684\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u5c31\u662f $O(nlogn)$ \u7684\u3002\n\n------\n\n\u8d34\u4e0a\u4ee3\u7801\n\n```\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<map>\n#define ll long long\n#define ls (p<<1)\n#define rs (p<<1|1)\n#define maxn 200005\nusing namespace std;\nint n,m,k,a[maxn];\nll val[maxn<<2],lz[maxn<<2];\nmap<int,int> mp; int tot;\nvector<int> vec[maxn];\nvoid Putdown(int p)\n{\n\tif(lz[p])\n\t{\n\t\tval[ls]+=lz[p],lz[ls]+=lz[p];\n\t\tval[rs]+=lz[p],lz[rs]+=lz[p];\n\t\tlz[p]=0;\n\t}\n}\nvoid Add(int p,int l,int r,int x,int y,ll v)\n{\n\tif(x<=l&&r<=y) return (void)(val[p]+=v,lz[p]+=v);\n\tPutdown(p);\n\tint mid=(l+r)>>1;\n\tif(x<=mid&&y>=l) Add(ls,l,mid,x,y,v);\n\tif(y>mid&&x<=r) Add(rs,mid+1,r,x,y,v);\n\tval[p]=min(val[ls],val[rs]);\n}\nint Query(int p,int l,int r,int d)\n{\n\tif(l==r) return l;\n\tPutdown(p);\n\tint mid=(l+r)>>1;\n\tif(val[rs]<=d) return Query(rs,mid+1,r,d);\n\treturn Query(ls,l,mid,d);\n}\nvoid Init(int p,int l,int r)\n{\n\tlz[p]=0;\n\tif(l==r) return (void)(val[p]=-l);\n\tint mid=(l+r)>>1;\n\tInit(ls,l,mid),Init(rs,mid+1,r);\n\tval[p]=min(val[ls],val[rs]);\n}\nstack<int> sinc,sdec;\nmap<int,int> vis;\nint rpos[maxn]; int ansl=1,ansr=0;\nvoid GetAns(int l,int r)\n{\n\tint L=r-l+1;\n\tInit(1,1,L);\t\n\tvis.clear(),rpos[r]=r;\n\tvis[a[r]]=r;\n\tfor(int i=r-1;i>=l;i--)\n\t{\n\t\trpos[i]=min(rpos[i+1],(vis.find(a[i])==vis.end()?r:vis[a[i]]-1));\n\t\tvis[a[i]]=i;\n\t}\n\tfor(int i=r;i>=l;i--)\n\t{\n\t\twhile(sinc.size()&&a[sinc.top()]<=a[i])\n\t\t{\n\t\t\tint nw=sinc.top(); sinc.pop();\n\t\t\tAdd(1,1,L,nw-l+1,(sinc.size()?sinc.top():r+1)-l,-a[nw]);\n\t\t}\n\t\twhile(sdec.size()&&a[sdec.top()]>=a[i])\n\t\t{\n\t\t\tint nw=sdec.top(); sdec.pop();\n\t\t\tAdd(1,1,L,nw-l+1,(sdec.size()?sdec.top():r+1)-l,a[nw]);\n\t\t}\n\t\tAdd(1,1,L,i-l+1,(sinc.size()?sinc.top():r+1)-l,a[i]);\n\t\tAdd(1,1,L,i-l+1,(sdec.size()?sdec.top():r+1)-l,-a[i]);\n\t\t\n\t\tif(rpos[i]!=r) Add(1,1,L,rpos[i]-l+2,r-l+1,2e9);\n\t\tif(i!=l) Add(1,1,L,1,i-l,2e9);\n\t\t\n\t\tint rp=Query(1,1,L,m-(i-l+1))+l-1;\n\t\tif(rp-i>ansr-ansl) ansr=rp,ansl=i;\n\t\telse if(rp-i==ansr-ansl&&ansl>i) ansr=rp,ansl=i;\n\t\t\n\t\tif(rpos[i]!=r) Add(1,1,L,rpos[i]-l+2,r-l+1,-2e9);\n\t\tif(i!=l) Add(1,1,L,1,i-l,-2e9);\n\t\t\n\t\tsinc.push(i),sdec.push(i);\n\t}\n\twhile(sinc.size()) sinc.pop();\n\twhile(sdec.size()) sdec.pop();\n}\nvoid Solve(int id)\n{\n\tint pre=vec[id][0];\n\tfor(int i=1;i<vec[id].size();i++)\n\t\tif(vec[id][i-1]+1!=vec[id][i]) GetAns(pre,vec[id][i-1]),pre=vec[id][i];\n\tGetAns(pre,vec[id][vec[id].size()-1]);\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]),a[i]+=1e9;\n\tif(k==0)\n\t{\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tint tl=i;\n\t\t\twhile(a[i]==a[i+1]) i++;\n\t\t\tif(i-tl>ansr-ansl) ansl=tl,ansr=i;\n\t\t}\n\t\tprintf(\"%d %d\\n\",ansl,ansr);\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=n;vec[mp[a[i]%k]].push_back(i),i++)\n\t\tif(mp.find(a[i]%k)==mp.end()) mp[a[i]%k]=++tot;\n\tfor(int i=1;i<=n;i++) a[i]/=k;\n\tfor(int i=1;i<=tot;i++) Solve(i);\n\tprintf(\"%d %d\\n\",ansl,ansr);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1572019459,
        "uid": 20815,
        "name": "PhantasmDragon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF407E \u3010k-d-sequence\u3011"
    },
    {
        "content": "\u505a\u8fd9\u9898\u7684\u65f6\u5019\u8111\u5b50\u5f88\u7cca\uff0c\u4e0d\u77e5\u9053\u5728\u60f3\u5565\u3002\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/dsaftktk.png)\n\n---\n\n\u9996\u5148\u5148\u6709\u4e00\u4e2a\u5927\u6982\u7684\u601d\u8def\uff1a\n\n\u6211\u4eec\u6bcf\u6b21\u80af\u5b9a\u662f\u5bf9\u4e8e\u4e00\u6bb5\u6a21 $d$ \u540c\u4f59\u7684\u533a\u95f4\u6c42\u7b54\u6848\uff0c\u7136\u540e\u518d\u53d6\u6700\u5927\u503c\u3002\n\n\u90a3\u4e48\u8fd9\u91cc\u5c31\u8981\u7279\u5224\u4e00\u4e2a\u5730\u65b9\uff1a$d=0$.\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u662f\u6c42\u6700\u957f\u7684\u6743\u503c\u76f8\u540c\u7684\u533a\u95f4\u3002\u76f4\u63a5\u626b\u4e00\u904d\u5c31\u51fa\u6765\u4e86\u3002\n\n\u7136\u540e\u7ee7\u7eed\u8003\u8651 $d>0$ \u7684\u60c5\u51b5\uff1a\n\n\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u6ee1\u8db3\u8981\u6c42\u7684\u533a\u95f4\u5e94\u8be5\u6ee1\u8db3\u4e0b\u9762\u8fd9\u4e2a\u5145\u8981\u6761\u4ef6\uff1a\n\n$$ \\frac{max-min}{d} \\leq R - L + 1 + k\\ \\ \\ \\ \\text{\u4e14\u533a\u95f4\u5185\u65e0\u91cd\u590d\u5143\u7d20}$$\n\n\u5565\u610f\u601d\u5462\uff1f\n\n\u4e0d\u8003\u8651\u52a0\u5165\u5143\u7d20\uff0c\u6784\u6210\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\u7684\u8bdd\uff0c\u533a\u95f4\u4e2d \u6700\u5927\u503c \u51cf\u53bb \u6700\u5c0f\u503c \u9664\u4ee5 \u516c\u5dee \u5c31\u7b49\u4e8e \u533a\u95f4\u957f\u5ea6\u3002\n\n\u4f46\u662f\u8003\u8651\u5230\u53ef\u4ee5\u52a0\u5165 $k$ \u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u662f\u628a\u533a\u95f4\u957f\u5ea6\u6269\u5145\u81f3 $R-L+1+k$\uff0c\u4f46\u662f\u6269\u5145\u7684\u5143\u7d20\u53ef\u80fd\u4f1a\u53d8\u6210\u6700\u5927\u503c\u6216\u8005\u6700\u5c0f\u503c\uff0c\u90a3\u4e48 \u6700\u5927\u503c \u51cf\u53bb \u6700\u5c0f\u503c \u9664\u4ee5 \u516c\u5dee \u5c31\u6709\u53ef\u80fd\u5c0f\u4e8e\u533a\u95f4\u957f\u5ea6\u3002\u90a3\u4e48\u5c31\u662f\u4e0a\u9762\u90a3\u4e2a\u4e0d\u7b49\u5f0f\u4e86\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5e76\u4e0d\u662f\u7279\u522b\u597d\u7ef4\u62a4\u7684\u3002\u8fd8\u9700\u8981\u4e00\u4e9b\u6280\u5de7\u3002\n\n\u9996\u5148\u6211\u4eec\u79fb\u4e2a\u9879\uff1a\n\n$$ \\frac{max-min}{d} + L - R - 1 \\leq k $$\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u52a8\u6001\u7ef4\u62a4\u5176\u4f5c\u4e3a\u533a\u95f4\u5de6\u7aef\u70b9\u7684\u4e0a\u5f0f\u5de6\u4fa7\u7684\u503c\u3002\n\n\u90a3\u4e48 $+L-1$ \u5c31\u53ef\u4ee5\u76f4\u63a5\u89e3\u51b3\u3002 $-R$ \u53ef\u4ee5\u5728\u79fb\u52a8\u53f3\u7aef\u70b9\u7684\u65f6\u5019\u6574\u4f53 $-1$ \u7ef4\u62a4\u3002\n\n\u4f46\u662f\u73b0\u5728\u7684\u95ee\u9898\u662f\u5982\u4f55\u7ef4\u62a4 \u6700\u5927\u503c \u548c \u6700\u5c0f\u503c\u3002\n\n\u8003\u8651\u4f7f\u7528\u5355\u8c03\u6808\uff1a\n\n\u6211\u4eec\u5206\u522b\u7ef4\u62a4\u4e00\u4e2a \u5355\u8c03**\u9012\u589e** \u7684\u5355\u8c03\u6808\u8868\u793a \u6700**\u5c0f**\u503c \u548c\u4e00\u4e2a \u5355\u8c03**\u9012\u51cf** \u7684\u5355\u8c03\u6808\u8868\u793a \u6700**\u5927**\u503c\u3002(\u6ce8\u610f\u522b\u5f04\u53cd\u4e86)\n\n\u7136\u540e\u5bf9\u4e8e\u5355\u8c03\u6808\u91cc\u5934\u7684\u5143\u7d20\uff0c\u7b2c $i$ \u4e2a\u5143\u7d20\u6240\u7ba1\u8f96\u7684\u6700\u5927/\u5c0f\u503c\u7684\u533a\u95f4\u662f\u5f53\u524d\u8fd9\u4e2a\u5143\u7d20\u4e0e\u4e0a\u4e00\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684 \u5de6\u5f00\u53f3\u95ed \u533a\u95f4\u3002\u90a3\u4e48\u5165\u6808\u548c\u51fa\u6808\u5c31\u53ef\u4ee5\u7528\u652f\u6301 \u533a\u95f4\u52a0\u51cf \u7684\u7ebf\u6bb5\u6811\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002\n\n\u518d\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u53f3\u7aef\u70b9\uff0c\u600e\u4e48\u627e\u5230\u6700\u9760\u5de6\u7684\u5408\u6cd5\u5de6\u7aef\u70b9\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u5224\u65ad\u5408\u6cd5\u7684\u6761\u4ef6\u662f\u5c0f\u4e8e\u67d0\u4e00\u4e2a\u9608\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u6765\u5224\u65ad\u533a\u95f4\u5185\u662f\u5426\u5b58\u5728\u5408\u6cd5\u70b9\u3002\u90a3\u4e48\u7528\u8be2\u95ee\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u89e3\u51b3\u4e86\u3002\n\n\u6700\u540e\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u4e0d\u80fd\u6709\u91cd\u590d\u5143\u7d20\u3002\u8fd9\u4e2a\u4e5f\u5f88\u597d\u89e3\u51b3\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u4e0a\u4e2a\u51fa\u73b0\u91cd\u590d\u5143\u7d20\u7684\u5730\u65b9\u4ee5\u524d\u7684\u4f4d\u7f6e\u52a0\u4e0a\u4e00\u4e2a\u5f88\u5927\u7684\u6570\uff0c\u5c31\u53ef\u4ee5\u786e\u4fdd\u9009\u51fa\u6765\u7684\u533a\u95f4\u4e0d\u4f1a\u6709\u91cd\u590d\u5143\u7d20\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#if By_CYJian\n\u4e3a\u4ec0\u4e48 CYJian \u90a3\u4e48\u83dc\u554a...\n#endif\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define FILE(Name) freopen(Name\"in\", \"r\", stdin), freopen(\"out\", \"w\", stdout)\n\nnamespace io {\n\tconst int __SIZE = (1 << 21) + 1;\n\tchar ibuf[__SIZE], *iS, *iT, obuf[__SIZE], *oS = obuf, *oT = oS + __SIZE - 1, __c, qu[55]; int __f, qr, _eof;\n\t#define Gc() (iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, __SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)\n\tinline void flush () { fwrite (obuf, 1, oS - obuf, stdout), oS = obuf; }\n\tinline void gc (char &x) { x = Gc(); }\n\tinline void pc (char x) { *oS ++ = x; if (oS == oT) flush (); }\n\tinline void pstr (const char *s) { int __len = strlen(s); for (__f = 0; __f < __len; ++__f) pc (s[__f]); }\n\tinline void gstr (char *s) { for(__c = Gc(); __c < 32 || __c > 126 || __c == ' ';)  __c = Gc();\n\t\tfor(; __c > 31 && __c < 127 && __c != ' '; ++s, __c = Gc()) *s = __c; *s = 0; }\n\ttemplate <class I> inline bool gi (I &x) { _eof = 0;\n\t\tfor (__f = 1, __c = Gc(); (__c < '0' || __c > '9') && !_eof; __c = Gc()) { if (__c == '-') __f = -1; _eof |= __c == EOF; }\n\t\tfor (x = 0; __c <= '9' && __c >= '0' && !_eof; __c = Gc()) x = x * 10 + (__c & 15), _eof |= __c == EOF; x *= __f; return !_eof; }\n\ttemplate <class I> inline void print (I x) { if (!x) pc ('0'); if (x < 0) pc ('-'), x = -x;\n\t\twhile (x) qu[++ qr] = x % 10 + '0',  x /= 10; while (qr) pc (qu[qr --]); }\n\tstruct Flusher_ {~Flusher_(){flush();}}io_flusher_;\n} using io::pc; using io::gc; using io::pstr; using io::gstr; using io::gi; using io::print;\n\ntemplate<typename T> inline void chkmax(T&a, T b) { a = a > b ? a : b; }\ntemplate<typename T> inline void chkmin(T&a, T b) { a = a < b ? a : b; }\n\ntypedef unsigned uit;\ntypedef long long ll;\ntypedef double db;\n\nconst int MAXN = 200100;\n\nint n, k, d;\nint a[MAXN];\n\nint res = 1;\nint res_l = 1;\nint res_r = 1;\n\nstruct Segment_Tree {\n#define ls (x << 1)\n#define rs (x << 1 | 1)\n\n\tstruct Node { ll v, t; } T[MAXN << 2];\n\n\tinline void pushup(int x) { T[x].v = min(T[ls].v, T[rs].v); }\n\tinline void pushdown(int x) {\n\t\tll&t = T[x].t; if(!t) return ;\n\t\tT[ls].v += t, T[ls].t += t;\n\t\tT[rs].v += t, T[rs].t += t;\n\t\tt = 0;\n\t}\n\n\tinline void build(int x, int l, int r) {\n\t\tT[x].v = T[x].t = 0; if(l == r) return ;\n\t\tint mid = (l + r) >> 1; build(ls, l, mid), build(rs, mid + 1, r);\n\t}\n\n\tinline void Modify(int x, int l, int r, int L, int R, ll v) {\n\t\tif(L <= l && r <= R) return T[x].v += v, T[x].t += v, void();\n\t\tint mid = (l + r) >> 1; pushdown(x);\n\t\tif(L <= mid) Modify(ls, l, mid, L, R, v);\n\t\tif(mid < R) Modify(rs, mid + 1, r, L, R, v);\n\t\tpushup(x);\n\t}\n\n\tinline int Find(int x, int l, int r, int p) {\n\t\tif(l == r) return T[x].v <= k ? l : -1;\n\t\tint mid = (l + r) >> 1; pushdown(x);\n\t\tif(T[ls].v <= k) return Find(ls, l, mid, p);\n\t\tif(mid < p) return Find(rs, mid + 1, r, p);\n\t\treturn -1;\n\t}\n\n#undef ls\n#undef rs\n}seg;\n\nint b[MAXN];\nmap<int, int>pos;\nstack<int>up, down;\n\ninline void solve(int l, int r) {\n\tfor(int i = l; i <= r; i++) a[i - l + 1] = b[i] / d;\n\tint n = r - l + 1, las = 0; seg.build(1, 1, n), pos.clear();\n\tfor(int i = 1; i <= n; i++) {\n\t\tint v = a[i];\n\t\tif(pos.count(v)) {\n\t\t\tseg.Modify(1, 1, n, las + 1, pos[v], 1000000000);\n\t\t\tlas = pos[v];\n\t\t} pos[v] = i;\n\t\tseg.Modify(1, 1, n, 1, n, -1);\n\t\tseg.Modify(1, 1, n, i, i, i);\n\t\twhile(up.top() && a[up.top()] > v) {\n\t\t\tint p = up.top(); up.pop();\n\t\t\tseg.Modify(1, 1, n, up.top() + 1, p, a[p]);\n\t\t} seg.Modify(1, 1, n, up.top() + 1, i, -v); up.push(i);\n\t\twhile(down.top() && a[down.top()] < v) {\n\t\t\tint p = down.top(); down.pop();\n\t\t\tseg.Modify(1, 1, n, down.top() + 1, p, -a[p]);\n\t\t} seg.Modify(1, 1, n, down.top() + 1, i, v); down.push(i);\n\t\tint L = seg.Find(1, 1, n, i);\n\t\tif((~L) && res < i - L + 1) res = i - L + 1, res_l = L + l - 1, res_r = i + l - 1;\n\t} while(up.top()) up.pop(); while(down.top()) down.pop();\n}\n\nint main() {\n\tgi(n), gi(k), gi(d);\n\tif(d == 0) {\n\t\tint len = 1, now = -1, x = 0, pos = 0, L = 1, R = 1;\n\t\tfor(int i = 1; i <= n; i++) {\n\t\t\tgi(x);\n\t\t\tif(x != now) {\n\t\t\t\tif(len < i - pos)\n\t\t\t\t\tlen = i - pos, L = pos, R = i - 1;\n\t\t\t\tnow = x, pos = i;\n\t\t\t}\n\t\t} if(len < n - pos + 1) L = pos, R = n;\n\t\tprint(L), pc(' '), print(R), pc('\\n');\n\t\treturn 0;\n\t} int mi = 2147483647;\n\tfor(int i = 1; i <= n; i++) gi(b[i]), chkmin(mi, b[i]);\n\tfor(int i = 1; i <= n; i++) b[i] -= mi - 1;\n\tint las = b[1] % d, pos = 1;\n\tup.push(0), down.push(0);\n\tfor(int i = 2; i <= n + 1; i++)\n\t\tif(las != b[i] % d || i == n + 1)\n\t\t\tsolve(pos, i - 1), pos = i, las = b[i] % d;\n\tprint(res_l), pc(' '), print(res_r), pc('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1571978059,
        "uid": 20782,
        "name": "CYJian",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF407E \u3010k-d-sequence\u3011"
    }
]