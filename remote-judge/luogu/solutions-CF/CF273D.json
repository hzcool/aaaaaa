[
    {
        "content": "## \u9898\u610f\n+ \u4ece$N*M$\u7684\u65b9\u683c\u4e2d\u9009\u51fa\u4e00\u4e2a\u8fde\u901a\u7684\u683c\u5b50\u96c6\uff0c\u6ee1\u8db3\u4efb\u610f\u4e24\u4e2a\u540c\u884c/\u5217\u7684\u96c6\u5408\u5185\u7684\u683c\u5b50\u4e4b\u95f4\u7684\u4ecd\u7136\u662f\u96c6\u5408\u5185\u7684\u3002\u6c42\u8fd9\u6837\u7684\u96c6\u5408\u4e2a\u6570\u3002\n   \n## $Solution:$\n+ \u6761\u4ef6\u7b49\u4ef7\u4e8e\u683c\u5b50\u96c6\u5408\u662f\u51f8\u7684\uff0c\u5373\u5de6\u53f3\u8fb9\u754c\u662f\u51f8\u7684\u3002\u7b49\u4ef7\u4e8e\uff1a\u5de6\u8fb9\u754c\u5148\u51cf\u540e\u589e\uff0c\u53f3\u8fb9\u754c\u5148\u589e\u540e\u51cf\u3002\u5982\u56fe\u6240\u793a\u3002\n![hhh](https://cdn.luogu.com.cn/upload/image_hosting/6r85yuow.png)\n+ \u663e\u7136$dp$\u7edf\u8ba1\u7b54\u6848\n+ $f[i][l][r][0/1][0/1]$\u8868\u793a\u7b2c$i$\u884c\u5de6\u8fb9\u754c\u662f$l$\uff0c\u53f3\u8fb9\u754c\u662f$r$\u7684\u7b54\u6848\uff0c\u5de6\u53f3\u8fb9\u754c\u662f\u5426\u4e3a\u51f8\u7684\u65b9\u6848\u6570\u3002\n+ \u7b2c\u4e00\u7ef4\u53ef\u4ee5\u6eda\u6389\uff0c\u8003\u8651\u6bcf\u4e00\u884c\u7684$f$\u7684\u8d21\u732e\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e00\u884c\u4e00\u76f4\u62c9\u5230\u5e95\uff0c\u8bbe\n$$sum =\\sum_l^{l<=m}\\sum_r^{l<=r<=m}f[l][r][0/1][0/1]$$\n+ \u90a3\u4e48\u7edf\u8ba1\u7b54\u6848\u65f6\u8d21\u732e$sum*(n-i+1)$\uff08\u5982\u4e0a\uff0c\u53ef\u4ee5\u4e00\u76f4\u62c9\u5230\u5e95\uff09\n+ \u7edf\u8ba1\u7b54\u6848\u6bd4\u8f83\u663e\u7136\uff0c\u66f4\u65b0$dp$\u9700\u8981\u8ba8\u8bba\u56db\u79cd\u60c5\u51b5\n\t1. \u5de6\u8fb9\u754c$l$\u4e3a\u51f9\n\t+ \u5bf9\u4e8e\u5f53\u524d\u72b6\u6001$f[l][r][0][0/1]$\uff0c\u5c31\u6709\u4e24\u79cd\u8f6c\u79fb\uff0c\u53ef\u4ee5\u662f\u4ece\u51f8\u8f6c\u6362\u6210\u51f9\uff0c\u4e5f\u53ef\u4ee5\u4e00\u76f4\u51f9\u3002\uff08\u81ea\u5df1\u753b\u56fe\u770b\u770b\uff09\u3002\n   + $$f[l][r][0][0/1] = \\sum_{l'}^{l'<=l}f[l'][r][0][0/1]+\\sum_{l'}^{l'<=l}f[l'][r][1][0/1]$$\n   + \u9700\u8981\u524d\u7f00\u548c\uff1f\u5176\u5b9e\u6ca1\u5fc5\u8981\uff0c\u53d1\u73b0\u8f6c\u79fb$l'$\u7684\u65f6\u5019\uff0c\u628a$dp$\u503c\u7d2f\u52a0\u8fc7\u6765\u5c31\u53ef\u4ee5\u4e86\uff0c\u6240\u4ee5\u679a\u4e3e\u987a\u5e8f\u5f88\u91cd\u8981\u3002\n   + \u5f53\u524d\u72b6\u6001\u7684\u8f6c\u79fb\u662f\u6ca1\u6709\u8f6c\u79fb\u5b8c\u7684\uff0c\u53ea\u662f\u5148\u7edf\u8ba1\u5de6\u8fb9\u6765\u7684\u8d21\u732e\uff08\u56e0\u4e3a\u662f\u51f9\u7684\uff0c\u6240\u4ee5\u662f\u4ece\u5de6\u8fb9\u52a0\u8fc7\u6765\uff09\u3002\n\t2. \u53f3\u8fb9\u754c$r$\u4e3a\u51f9\n\t+ \u548c\u2460\u540c\u7406\uff0c\u53f3\u8fb9\u754c\u51f9\uff0c\u8f6c\u79fb\u8fc7\u6765\u7684\u72b6\u6001\u53ef\u4ee5\u51f9\u4e5f\u53ef\u4ee5\u51f8\u3002\n   + \u540c\u6837\u628a\u53f3\u8fb9\u7684$dp$\u503c\u7d2f\u52a0\u8fc7\u6765\uff0c\u56e0\u4e3a\u662f\u7d2f\u52a0\uff0c\u679a\u4e3e$r'$\u7684\u987a\u5e8f\u5f97\u4ece\u53f3\u5230\u5de6\u3002\n\t3. \u5de6\u8fb9\u754c$l$\u4e3a\u51f8\n\t+ \u56e0\u4e3a\u662f\u51f8\u7684\uff0c\u6240\u4ee5\u7d2f\u52a0\u5c31\u5f97\u4ece\u53f3\u8fb9\u7d2f\u52a0\u8d77\u8d70\uff0c\u5e76\u4e14\u53ea\u80fd\u4ece\u4e4b\u524d\u7684\u51f8\u7684\u72b6\u6001\u8f6c\u79fb\uff08\u524d\u9762\u8bf4\u8fc7\u4e86\u5148\u51f8\u518d\u51f9\uff09\u3002\n\t+ $$f[l][r][1][0/1] = \\sum_{l'}^{l<=l'<=m}f[l'][r][1][0/1]$$\n   + \u6ce8\u610f\u4e00\u4e0b\u8fb9\u754c\u95ee\u9898\u3002\n\t4. \u53f3\u8fb9\u754c$r$\u4e3a\u51f8\n\t+ \u548c\u2460\u540c\u7406\uff0c\u53f3\u8fb9\u754c\u51f9\uff0c\u8f6c\u79fb\u8fc7\u6765\u7684\u72b6\u6001\u53ef\u4ee5\u51f9\u4e5f\u53ef\u4ee5\u51f8\u3002\n   + \u56e0\u4e3a\u53f3\u8fb9\u754c\u662f\u51f8\u7684\uff0c\u8f6c\u79fb$r'$\u5c31\u5f97\u4ece\u5de6\u8fb9\u52a0\u8d77\u8d70\n\n+ \u8fd9\u6837\u5c31\u6109\u5feb\u5730\u66f4\u65b0\u5b8c\u4e86$dp$\uff0c\u5176\u5b9e\u624b\u5199\u524d\u7f00\u548c\u4e5f\u53ef\u4ee5\uff0c\u7801\u91cf\u5927\uff0c\u601d\u7ef4\u91cf\u5c0f\u3002\n\n\n------------\n\n~~\u8fd9\u9053\u9898\u7ec6\u8282\u8fd8\u662f\u6709\u70b9\u6076\u5fc3\u7684\u3002~~\n   \n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\n#define rr int\nusing namespace std;\ntypedef long long ll;\ninline ll read() {\n    char i = getchar();\n    ll f = 1, res = 0;\n    while (i < '0' || i > '9') {\n        if (i == '-') f = -1;\n        i = getchar();\n    }\n    while (i >= '0' && i <= '9') {\n        res = res * 10 + i - '0';\n        i = getchar();\n    }\n    return res * f;\n}\nconst int mod = 1000000007;\nconst int N = 155;\nll f[N][N][2][2];  // \u5de6\u8fb9\u754c\u662f\u5426\u51f8\uff0c\u53f3\u8fb9\u754c\u662f\u5426\u51f8\nint n, m;\ninline void upd(ll &a, ll b) { a = (a + b) % mod; }\nint main() {\n    n = read(), m = read();\n    for (rr i = 1; i <= m; ++i) {\n        for (rr j = i; j <= m; ++j) {\n            f[i][j][1][1] = 1;\n        }\n    }\n    ll ans = 0;\n    for (rr i = 1; i <= n; ++i) {\n        ll res = 0;\n        for (rr l = 1; l <= m; ++l)\n            for (rr r = l; r <= m; ++r)\n                for (rr kl = 0; kl <= 1; ++kl)\n                    for (rr kb = 0; kb <= 1; ++kb)\n                        res = (res + f[l][r][kl][kb]) % mod;\n        ans = (ans + res * (n - i + 1)) % mod;\n        for (rr l = 1; l <= m; ++l)\n            for (rr r = l + 1; r <= m; ++r)\n                for (rr kr = 0; kr <= 1;\n                     ++kr) {  //\u524d\u7f00\u53e0\u52a0 \u6ce8\u610f\u987a\u5e8f \u51f9\u7684\u65f6\u5019\u53e6\u5916\u4e00\u8fb9\u51f8\u51f9\u90fd\u53ef\u4ee5\n                    upd(f[l + 1][r][0][kr], f[l][r][0][kr]);\n                    upd(f[l + 1][r][0][kr], f[l][r][1][kr]);\n                }\n        for (rr l = 1; l <= m; ++l)\n            for (rr r = m; r >= l + 1; --r)\n                for (rr kl = 0; kl <= 1; ++kl) {\n                    upd(f[l][r - 1][kl][0], f[l][r][kl][0]);\n                    upd(f[l][r - 1][kl][0], f[l][r][kl][1]);\n                }\n        for (rr l = m; l >= 2; --l)\n            for (rr r = l; r <= m; ++r)\n                for (rr kr = 0; kr <= 1; ++kr) {\n                    upd(f[l - 1][r][1][kr], f[l][r][1][kr]);\n                }\n        for (rr l = m; l >= 1; --l)\n            for (rr r = l; r < m; ++r)\n                for (rr kl = 0; kl <= 1; ++kl) {\n                    upd(f[l][r + 1][kl][1], f[l][r][kl][1]);\n                }\n    }\n    printf(\"%lld\\n\", ans);\n}\n```\n\n",
        "postTime": 1570074372,
        "uid": 19905,
        "name": "DarkMoon_Dragon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF273D \u3010Dima and Figure\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://duanyll.com/2019/10/03/Codeforces-273D.html)\n\n## \u9898\u610f\n\n\u5728$n\\times m, (n, m \\leq 150)$\u7684\u65b9\u683c\u7eb8\u4e0a\u9009\u62e9\u4e00\u4e2a\u56db\u8fde\u5757, \u8981\u6c42\u5bf9\u4e8e\u56db\u8fde\u5757\u4e2d\u7684\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f\u79fb\u52a8\u8ddd\u79bb\u7b49\u4e8e\u4ed6\u4eec\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb. \u95ee\u6709\u591a\u5c11\u79cd\u9009\u6cd5.\n\n## \u5206\u6790\n\n\u6761\u4ef6\u7684\u610f\u601d\u662f\u9009\u51fa\u7684\u683c\u5b50\u96c6\u662f\u51f8\u7684, \u5373: **\u5de6\u8fb9\u754c\u5148\u51cf\u540e\u589e, \u53f3\u8fb9\u754c\u5148\u589e\u540e\u51cf**\n\n\u53ef\u4ee5\u5b9a\u4e49$dp[i][l][r][ls][rs]$, \u8868\u793a\u8003\u8651\u524d$i$\u884c, \u5de6\u8fb9\u754c\u4e3a$l$, \u53f3\u8fb9\u754c\u4e3a$r$, $ls$\u8868\u793a\u5de6\u8fb9\u754c\u662f\u5426\u53ef\u4ee5\u51cf\u5c11, $rs$\u8868\u793a\u53f3\u8fb9\u754c\u662f\u5426\u53ef\u4ee5\u589e\u52a0. \u4e0d\u96be\u53d1\u73b0\u7b2c\u4e00\u7ef4\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4.\n\n\u5f97\u5230\u5927\u91cf\u8f6c\u79fb\u65b9\u7a0b, \u5177\u4f53\u5206\u7c7b\u8ba8\u8bba\u89c1\u4ee3\u7801.\n\n## \u4ee3\u7801\n\n```cpp\n#include <algorithm>\n#include <cassert>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <fstream>\n#include <iostream>\nusing namespace std;\n\ntypedef long long int64;\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 155;\nconst int MOD = 1e9 + 7;\n\nint64 dp[MAXN][MAXN][2][2];\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    for (int l = 1; l <= m; l++) {\n        for (int r = l; r <= m; r++) {\n            dp[l][r][1][1] = 1;\n        }\n    }\n    int64 ans = 0;\n    for (int i = 1; i <= n; i++) {\n        int64 sum = 0;\n        for (int l = 1; l <= m; l++) {\n            for (int r = l; r <= m; r++) {\n                for (int sl = 0; sl <= 1; sl++) {\n                    for (int sr = 0; sr <= 1; sr++) {\n                        sum += dp[l][r][sl][sr];\n                        sum %= MOD;\n                    }\n                }\n            }\n        }\n        ans += sum * (n - i + 1);  // \u7edf\u8ba1\u7684\u662f\u4e0a\u4e00\u884c\u7684\u7b54\u6848\n        ans %= MOD;\n\n        // \u5de6\u4fa7\u6536\u7f29\n        for (int l = 1; l < m; l++) {\n            for (int r = l + 1; r <= m; r++) {\n                for (int sl = 0; sl <= 1; sl++) {\n                    for (int sr = 0; sr <= 1; sr++) {\n                        dp[l + 1][r][0][sr] += dp[l][r][sl][sr];\n                        dp[l + 1][r][0][sr] %= MOD;\n                    }\n                }\n            }\n        }\n\n        // \u53f3\u4fa7\u6536\u7f29\n        for (int l = m - 1; l >= 1; l--) {\n            for (int r = m; r >= l + 1; r--) {\n                for (int sl = 0; sl <= 1; sl++) {\n                    for (int sr = 0; sr <= 1; sr++) {\n                        dp[l][r - 1][sl][0] += dp[l][r][sl][sr];\n                        dp[l][r - 1][sl][0] %= MOD;\n                    }\n                }\n            }\n        }\n\n        // \u5de6\u4fa7\u6269\u5f20\n        for (int l = m; l >= 2; l--) {\n            for (int r = m; r >= l; r--) {\n                for (int sr = 0; sr <= 1; sr++) {\n                    dp[l - 1][r][1][sr] += dp[l][r][1][sr];\n                    dp[l - 1][r][1][sr] %= MOD;\n                }\n            }\n        }\n\n        // \u53f3\u4fa7\u6269\u5c55\n        for (int l = 1; l < m; l++) {\n            for (int r = l; r < m; r++) {\n                for (int sl = 0; sl <= 1; sl++) {\n                    dp[l][r + 1][sl][1] += dp[l][r][sl][1];\n                    dp[l][r + 1][sl][1] %= MOD;\n                }\n            }\n        }\n    }\n    cout << ans << endl;\n}\n```",
        "postTime": 1570074690,
        "uid": 48256,
        "name": "duanyll",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF273D \u3010Dima and Figure\u3011"
    },
    {
        "content": "\u91cd\u5851\u9898\u76ee\u4e2d\u6240\u63d0\u5230\u7684\u6a21\u578b\uff1a\u5982\u679c\u8054\u901a\u5757\u7684\u4e0a\u4e0b\u5de6\u53f3\u90fd\u662f\u4e00\u4e2a\u5411\u5916\u51f8\u51fa\u7684\u5f62\u72b6\n\n\u90a3\u4e48\u5f97\u5230\u4e00\u4e2a\u7b80\u5355\u7684 $\\rm{DP}$ \u5b9a\u4e49\uff1a$f_{i,l,r,0/1,0/1}$ \u8868\u793a\u5230\u4e86\u7b2c $i$ \u884c\u8868\u793a\uff0c\u9009\u62e9\u7684\u65b9\u683c\u8986\u76d6\u4e86\u672c\u884c $[l,r]$ \u8fd9\u4e00\u8fde\u7eed\u6bb5\uff0c\u5411\u5de6\uff0c\u53f3\u4fa7\u662f\u5426\u8fd8\u53ef\u4ee5\u6269\u5c55\n\n\u7531\u4e8e\u7528\u884c\u6570\u8868\u793a\u4e0a\u4e0b\uff0c\u6240\u4ee5\u5e76\u4e0d\u5728\u72b6\u6001\u4e2d\u8fdb\u884c\u4f53\u73b0\n\n\u672c\u9898\u89e3\u7684\u8f6c\u79fb\u548c\u5176\u5b83\u9898\u89e3\u6240\u63d0\u5230\u7684\u6309\u7167\u4e00\u5b9a\u987a\u5e8f\u8fdb\u884c\u6269\u5c55\u6709\u6240\u4e0d\u540c\uff0c\u800c\u662f\u76f4\u63a5\u4f7f\u7528\u524d\u7f00\u548c\u5bf9 $dp$ \u6570\u7ec4\u8fdb\u884c\u7ef4\u62a4\n\n\u5177\u4f53\u800c\u8a00\uff0c$sum_{i,j,k,l}$ \u8868\u793a\u533a\u95f4\u5de6\u7aef\u70b9\u4e0d\u5927\u4e8e $i$ \u53f3\u7aef\u70b9\u4e0d\u5927\u4e8e $i$ \u65f6\u540e\u4e24\u7ef4\u4e3a $k,l$ \u65f6\u7684 $dp$ \u503c\u4e4b\u548c\uff0c\u8be5\u6570\u7ec4\u6bcf\u884c\u6c42\u51fa $\\rm{DP}$ \u503c\u4e4b\u540e\u8fdb\u884c\u66f4\u65b0\n\n\u8f6c\u79fb\u66f4\u591a\u6839\u636e\u5b9e\u9645\u542b\u4e49\u800c\u6765\uff0c\u5de6\u7aef\u70b9\u80fd\u6269\u5c55\u7684\u90e8\u5206\u7ee7\u627f\u7684\u662f\u539f\u6765\u5de6\u7aef\u70b9\u5927\u4e8e\u4e4b\u7684\uff0c\u5426\u5219\u7ee7\u627f\u5de6\u7aef\u70b9\u5c0f\u4e8e\u4e4b\u7684\uff0c\u53f3\u7aef\u70b9\u540c\u7406\n\n\u90a3\u4e48\u8fd9\u4e24\u4e2a\u53d6\u503c\u90fd\u662f\u8fde\u7eed\u533a\u95f4\uff0c\u751a\u81f3\u90fd\u662f\u524d\u540e\u7f00\uff0c\u76f4\u63a5\u4f7f\u7528 $sum$ \u8fd9\u4e2a\u4e8c\u7ef4\u524d\u7f00\u548c\u8fdb\u884c\u66f4\u65b0\u5373\u53ef\n\n\u5173\u4e8e\u662f\u5426\u6269\u5c55\u8fc7\u8fd9\u4e2a\u9650\u5236\u4e4b\u95f4\u7684\u8f6c\u79fb\u4ecd\u7136\u662f\u6839\u636e\u5b9e\u9645\u542b\u4e49\uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u53bb\u9664\u91cd\u590d\uff1a\u53f3\u7aef\u70b9\u6269\u5c55\u8fc7 $l,r,x,1$ \u5411\u4e0d\u518d\u80fd\u6269\u5c55\u7684 $l',r',y,0$ \u8f6c\u79fb\u7684\u65f6\u5019\u9700\u8981\u6ee1\u8db3 $r>r'$ \u4e0d\u80fd\u53d6\u7b49\uff0c\u5426\u5219\u548c\u540e\u4e24\u7ef4\u5168 $1$ \u7684\u8f6c\u79fb\u5c31\u91cd\u590d\u4e86\n\n**\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5728\u540e\u4e24\u7ef4\u76f8\u540c\u7684\u65f6\u5019\u4e0d\u7528\u7ba1**\n\n\u7eb8\u4e0a\u5f97\u6765\u7ec8\u89c9\u6d45\uff0c\u7edd\u77e5\u6b64\u4e8b\u8981\u8eac\u884c\uff0c\u65b9\u7a0b\u8fd8\u662f\u8981\u81ea\u5df1\u6162\u6162\u6478\u7d22\u7684\uff0c\u8fd9\u91cc\u4e0d\u518d\u7ed9\u51fa\u5177\u4f53\u5f0f\u5b50\n\n- \u53ef\u80fd\u7684\u4e00\u4e2a\u7591\u60d1\uff1a\u5728\u4e24\u884c\u4e4b\u95f4 $(l,r,s_1,s_2)$ \u4ece\u4e0a\u4e00\u884c\u76f4\u63a5\u52a0\u5230\u4e0b\u4e00\u884c\u4e0a\u7684\u540c\u4e00\u72b6\u6001\u4e0a\uff0c\u8be5\u8f6c\u79fb\u7684\u542b\u4e49\u662f\u5c06\u4e0a\u9762\u5f97\u5230\u7684\u8054\u901a\u5757\u6574\u4f53\u5411\u4e0b\u5e73\u79fb\u4e00\u4e2a\n\n\t\u8fd9\u91cc\u4e0d\u518d\u7528 $+1$ \u6765\u8ba1\u7b97\u4e0a\u9762\u5168\u662f\u7a7a\u7684\uff0c$(l,r)$ \u4ece\u8fd9\u884c\u624d\u5f00\u59cb\n\n\u4e0b\u9644\u4ee3\u7801\u4f9b\u6709\u9700\u8981\u7684\u540c\u5b66\u53d6\u7528\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define sec second\n#define fir first\n#define int long long\n#define pb push_back\n#define rep(i,a,b) for(int i=a;i<=b;++i) \n#define Down(i,a,b) for(int i=a;i>=b;--i)\ntemplate<typename T>inline void ckmax(T &x,T y){x=x<y?y:x; return ;}\ntemplate<typename T>inline void ckmin(T &x,T y){x=x<y?x:y; return ;}\nnamespace FastIO{\n    template<typename T>inline T read(){\n        T res=0,f=1; char k;\n        while(!isdigit(k=getchar())) if(k=='-') f=-1;\n        while(isdigit(k)) res=res*10+k-'0',k=getchar();\n        return res*f;\n    }\n    char OPUT[100];\n    template<typename T>inline void print(T x){\n        if(x<0) putchar('-'),x=-x; \n        int cnt=0; do OPUT[++cnt]=x%10,x/=10; while(x); \n        Down(i,cnt,1) putchar(OPUT[i]+'0'); putchar('\\n'); return ;\n    }\n}using namespace FastIO;\nconst int mod=1e9+7;\ninline int add(int x,int y){return x+y>=mod?x+y-mod:x+y;}\ninline int del(int x,int y){return x-y<0?x-y+mod:x-y;}\ninline int mul(int x,int y){return x*y-x*y/mod*mod;}\ninline void ckadd(int &x,int y){x=x+y>=mod?x+y-mod:x+y;}\ninline void ckdel(int &x,int y){x=x-y<0?x-y+mod:x-y;}\ninline void ckmul(int &x,int y){x=x*y-x*y/mod*mod;}\nint ans,n,m,dp[2][151][151][2][2],cur,sum[151][151][2][2];\ninline int get(int sx,int sy,int ex,int ey,int e1,int e2){\n    if(sx>ex||ey<sy||sx==0||sy==0||ex>m||ey>m) return 0;\n    return del(add(sum[ex][ey][e1][e2],sum[sx-1][sy-1][e1][e2]),add(sum[sx-1][ey][e1][e2],sum[ex][sy-1][e1][e2]));\n}\nsigned main(){\n    n=read<int>(); m=read<int>(); \n    for(int i=1;i<=m;++i) for(int j=i;j<=m;++j) dp[cur][i][j][1][1]=1;\n    rep(i,1,m) rep(j,1,m) sum[i][j][1][1]=sum[i-1][j][1][1]+sum[i][j-1][1][1]-sum[i-1][j-1][1][1]+dp[cur][i][j][1][1];\n    for(int lin=1;lin<=n;++lin){\n        int res=0;\n        rep(i,1,m) rep(j,i,m) rep(k,0,1) rep(l,0,1) ckadd(res,dp[cur][i][j][k][l]);\n        ckadd(ans,mul(res,n-lin+1)); if(lin==n) break;\n        rep(i,1,m) rep(j,i,m){\n            if(i>1) dp[cur^1][i][j][0][1]=add(get(1,i,i,j,0,1),get(1,i,i-1,j,1,1));\n\n            if(j<m) dp[cur^1][i][j][1][0]=add(get(i,j,j,m,1,0),get(i,j+1,j,m,1,1));\n            \n            if(i>1&&j<m){\n                rep(k,0,1) rep(l,0,1) dp[cur^1][i][j][0][0]+=get(1,j,i,m,k,l);\n                \n                dp[cur^1][i][j][0][0]-=get(1,j,i,j,0,1);\n                \n                dp[cur^1][i][j][0][0]-=get(i,j,i,m,1,0);\n                \n                \n                dp[cur^1][i][j][0][0]-=get(1,j,i,j,1,1)+get(i,j,i,m,1,1)-dp[cur][i][j][1][1];\n                \n                dp[cur^1][i][j][0][0]=(dp[cur^1][i][j][0][0]%mod+mod)%mod;\n            }\n            dp[cur^1][i][j][1][1]=get(i,i,j,j,1,1);\n        }\n        rep(i,1,m) rep(j,1,m) rep(k,0,1) rep(l,0,1){\n            sum[i][j][k][l]=del(add(sum[i-1][j][k][l],sum[i][j-1][k][l]),sum[i-1][j-1][k][l]);\n            ckadd(sum[i][j][k][l],dp[cur^1][i][j][k][l]);\n            dp[cur][i][j][k][l]=0;\n        }cur^=1;\n    } print(ans); return 0;\n}\n```",
        "postTime": 1636451852,
        "uid": 97448,
        "name": "yspm",
        "ccfLevel": 9,
        "title": "Solution to CF273D"
    }
]