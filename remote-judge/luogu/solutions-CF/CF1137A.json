[
    {
        "content": "# \u79bb\u6563\u5316\n\u6211\u4eec\u628a\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u62ff\u51fa\u6765\u62ff\u51fa\u6765\u79bb\u6563\u5316\u5904\u7406\u597d\u4e4b\u540e\u76f4\u63a5\u4e8c\u5206\u4e00\u4e0b\u8fd9\u4e2a\u5143\u7d20\u5728\u884c\u548c\u5217\u4e2d\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u6bd4\u5b83\u5927\uff0c\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u6bd4\u5b83\u5c0f\u3002 \u5728\u8fd9\u4e00\u884c\u4e00\u5217\u4e2d\u6700\u591a\u6709 $\\max\\left(xa,ya\\right)$ \u4e2a\u6bd4\u5b83\u5c0f\u7684\u6570\u3002\u6700\u591a\u6709    $\\max\\left(xb,yb\\right)$ \u4e2a\u6bd4\u5b83\u5927\u7684\u6570\u3002\u6240\u4ee5\u6700\u540e\u8f93\u51fa    $\\max\\left(xa,ya\\right)+\\max\\left(xb,yb\\right)$ \u5c31\u597d\u5566QVQ \uff08\u53d8\u91cf\u4ee3\u8868\u4ec0\u4e48\u90fd\u5728\u4ee3\u7801\u4e2d\uff09\u3002\n\n## Code:\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=1e3+10;\nint a[MAXN][MAXN],b[MAXN][MAXN],n,m,x[MAXN][MAXN],va[MAXN],vb[MAXN],xa,ya;\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            scanf(\"%d\",&x[i][j]);//\u8f93\u5165\u539f\u77e9\u9635 \u6ce8\u610f \u4e00\u5b9a\u8981\u7528scanf \u7528cin\u4f1a\u8d85\u65f6\n            a[i][j]=x[i][j];//\u884c\u79bb\u6563\u5316\u6570\u7ec4\n            b[j][i]=x[i][j];//\u5217\u79bb\u6563\u5316\u6570\u7ec4\n        }\n    }\n    for(int i=1;i<=n;i++){//\u79bb\u6563\u5316\u7b2c 1......n \u884c\n        sort(a[i]+1,a[i]+m+1);//\u5c06\u7b2ci\u884c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n        va[i]=unique(a[i]+1,a[i]+m+1)-a[i]-1;//\u5c06\u53bb\u91cd\u5b8c\u7684\u957f\u5ea6\u5b58\u8fdbva[i]\n    }\n    for(int i=1;i<=m;i++){//\u79bb\u6563\u5316\u7b2c 1......m \u5217\n        sort(b[i]+1,b[i]+n+1);//\u5c06\u7b2ci\u5217\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n        vb[i]=unique(b[i]+1,b[i]+n+1)-b[i]-1;//\u5c06\u53bb\u91cd\u5b8c\u7684\u957f\u5ea6\u5b58\u8fdbvb[i]\n    }\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            xa=lower_bound(a[i],a[i]+va[i],x[i][j])-a[i];//\u4e8c\u5206\u67e5\u627ex[i][j]\u5728\u8fd9\u4e00\u884c\u4ece\u5c0f\u5230\u5927\u6392\u7b2c\u51e0\n            ya=lower_bound(b[j],b[j]+vb[j],x[i][j])-b[j];//\u4e8c\u5206\u67e5\u627ex[i][j]\u5728\u8fd9\u4e00\u5217\u4ece\u5c0f\u5230\u5927\u6392\u7b2c\u51e0\n            int xb=va[i]-xa;//xb\u8868\u793a\u5728\u8fd9\u4e00\u884c\u6709\u591a\u5c11\u4e2a\u6bd4x[i][j]\u5927\u7684\u6570\n            int yb=vb[j]-ya;//yb\u8868\u793a\u5728\u8fd9\u4e00\u5217\u6709\u591a\u5c11\u4e2a\u6bd4x[i][j]\u5927\u7684\u6570\n            printf(\"%d \",max(xa,ya)+max(xb,yb));//\u8f93\u51fa\u6700\u7ec8\u7ed3\u679c \n        }\n        cout<<endl;\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1651757946,
        "uid": 522383,
        "name": "CE_Prince",
        "ccfLevel": 0,
        "title": "CF1137A Skyscrapers \u9898\u89e3"
    },
    {
        "content": "## \u6392\u5e8f+\u6570\u636e\u7ed3\u6784\n\n\u5c06\u6bcf\u4e00\u884c\uff08\u6bcf\u4e00\u5217\uff09\u90fd\u6392\u4e2a\u5e8f\uff0c\u5e76\u5c06\u539f\u4f4d\u7f6e\u7684\u5728\u8fd9\u4e00\u884c\uff08\u5217\uff09\u4e2d\u7684\u6392\u884c\u8bb0\u5f55\u5728\u4e00\u4e2a\u6570\u7ec4\u91cc\n\n\u6ce8\u610f\uff0c\u8981\u5c06\u697c\u9ad8\u5ea6\u76f8\u540c\u7684\u5143\u7d20\u770b\u4f5c\u4e00\u4e2a\u5143\u7d20\n\n> \u5982 1 1 4 5 6 8 8\uff0c\u5219\u6392\u884c\u662f\n\n>     1 1 2 3 4 5 5\n\n\u5904\u7406\u597d\u540e\uff0c\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\uff0c\n\n\u82e5\u5f53\u524d\u7684\u5904\u5728\u7684\u884c\u7684\u6392\u884c\u5927\u4e8e\u5217\u7684\u6392\u884c\uff0c\u5219\u5f53\u524d\u8fd9\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u5217\u4e2d\u5143\u7d20\u5e94\u4ee5\u884c\u7684\u6392\u884c\u5f00\u59cb\u4f9d\u6b21\u9012\u589e\uff0c\n\n\u82e5\u5f53\u524d\u7684\u5904\u5728\u7684\u884c\u7684\u6392\u884c\u5c0f\u4e8e\u5217\u7684\u6392\u884c\uff0c\u5219\u5f53\u524d\u8fd9\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u884c\u4e2d\u5143\u7d20\u5e94\u4ee5\u5217\u7684\u6392\u884c\u5f00\u59cb\u4f9d\u6b21\u9012\u589e\uff0c\n\n\u6ce8\u610f\uff0c\u82e5\u5f53\u524d\u7684\u5904\u5728\u7684\u884c\u7684\u6392\u884c\u7b49\u4e8e\u5217\u7684\u6392\u884c\u65f6\uff0c\u5219\u8981\u4ece\u5982\u4e0a\u4e24\u4e2a\u65b9\u9762\u540c\u65f6\u8003\u8651\uff0c\u53d6\u6700\u5927\u503c\u3002\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,a[1010][1010],hh[1010][1010],ll[1010][1010];\nint mh[1500],ml[1500];\nstruct node\n{\n    int wh,num;\n};\nvector <node> h[1010],l[1010];\nbool cmp(node a,node b)\n{\n    return a.num<b.num;//\u4ee5\u9ad8\u5ea6\u964d\u5e8f\u6392\u5e8f\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++)\n    {\n        for (int j=1;j<=m;j++)\n        {\n            scanf(\"%d\",&a[i][j]);\n        }\n    }\n    for (int i=1;i<=n;i++)//\u5904\u7406\u884c\u7684\u60c5\u51b5\n    {\n        node t;\n        for (int j=1;j<=m;j++)\n        {\n            t.num=a[i][j];\n            t.wh=j;\n            h[i].push_back(t);\n        }\n        sort(h[i].begin(),h[i].end(),cmp);\n        int how=0;\n        for (int j=0;j<m;j++)\n        {\n            if (j!=0)\n            {\n                if (h[i][j-1].num==h[i][j].num)\n                  how++;//\u91cd\u590d\u7684\u6709\u591a\u5c11\u4e2a\n            }\n            hh[i][h[i][j].wh]=j+1-how;//\u8bb0\u5f55\u6392\u884c\n        }\n        mh[i]=m-how;//\u6700\u5927\u503c\n    }\n    for (int j=1;j<=m;j++)//\u5904\u7406\u5217\u7684\u60c5\u51b5\n    {\n        node t;\n        for (int i=1;i<=n;i++)\n        {\n            t.num=a[i][j];\n            t.wh=i;\n            l[j].push_back(t);\n        }\n        sort(l[j].begin(),l[j].end(),cmp);\n        int how=0;\n        for (int i=0;i<n;i++)\n        {\n            if (i!=0)\n            {\n                if (l[j][i-1].num==l[j][i].num)\n                  how++;\n            }\n            ll[l[j][i].wh][j]=i+1-how;\n        }\n        ml[j]=n-how;\n    }\n    for (int i=1;i<=n;i++)\n    {\n        for (int j=1;j<=m;j++)\n        {\n            int cha;\n            if (hh[i][j]==ll[i][j])//\u5982\u4e0a\n            {\n                int cha1;\n                cha1=mh[i]-hh[i][j];\n                cha=ml[j]-ll[i][j];\n                printf(\"%d \",max(max(hh[i][j]+cha,mh[i]),max(ll[i][j]+cha1,ml[j])));\n            }\n            else\n            if (hh[i][j]>ll[i][j])\n            {\n                cha=ml[j]-ll[i][j];\n                printf(\"%d \",max(hh[i][j]+cha,mh[i]));\n            }\n            else\n            if (hh[i][j]<ll[i][j])\n            {\n                cha=mh[i]-hh[i][j];\n                printf(\"%d \",max(ll[i][j]+cha,ml[j]));\n            }\n        }\n        printf(\"\\n\");\n    }\n}\n```",
        "postTime": 1555215881,
        "uid": 40198,
        "name": "FP\u00b7\u8377\u5170\u732a",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1137A \u3010Skyscrapers\u3011"
    },
    {
        "content": "\u8d2a\u5fc3\u5373\u53ef  \n\u6211\u4eec\u628a\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u5355\u72ec\u62ff\u51fa\u6765\u6392\u5e8f\u53bb\u91cd  \n\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\u70b9$(i,j)$\uff0c\u76f4\u63a5\u4e8c\u5206\u4e00\u4e0b\u4ed6\u5728\u884c\u548c\u5217\u4e2d\u7684\u4f4d\u7f6e  \n\u884c\u4e2d\u6bd4\u8fd9\u4e2a\u6570\u5c0f\u7684\u6570\u6709$x$\u4e2a\uff0c\u6bd4\u8fd9\u4e2a\u6570\u5927\u7684\u6570\u6709$totx-x$\u4e2a  \n\u5217\u4e2d\u6bd4\u8fd9\u4e2a\u6570\u5c0f\u7684\u6570\u6709$y$\u4e2a\uff0c\u6bd4\u8fd9\u4e2a\u6570\u5927\u7684\u6570\u6709$toty-y$\u4e2a  \n\u4e8e\u662f\u8981\u60f3\u8868\u793a\u51fa\u6240\u6709\u6bd4\u8fd9\u4e2a\u6570\u5c0f\u7684\u6570\uff0c\u6211\u4eec\u9700\u8981\u81f3\u5c11$min(x, y)$\u4e2a  \n\u8981\u60f3\u8868\u793a\u51fa\u6240\u6709\u6bd4\u8fd9\u4e2a\u6570\u5c0f\u7684\u6570\uff0c\u6211\u4eec\u9700\u8981\u81f3\u5c11$max(totx - x, toty-y)$\u4e2a  \n\u76f4\u63a5\u8f93\u51fa\u4ed6\u4eec\u7684\u548c\u5c31\u597d\u4e86\n```cpp\n#pragma GCC optimize(\"fast-math,unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n#include <bits/stdc++.h>\n#define lowbit(x) (x&-x)\n#define jh(x, y) x^=y^=x^=y\n#define rg register\n#define inl inline\ntypedef long long ll;\nconst int N = 1e3 + 5, mod = 998244353, INF = 0x3f3f3f3f;\nusing namespace std;\nnamespace fast_IO {\n    inl ll read() {\n        rg char c;\n        rg ll x = 0;\n        rg bool flag = false;\n        while ((c = getchar()) == ' ' || c == '\\n' || c == '\\r');\n        if (c == EOF)return c; if (c == '-')flag = true; else x = c ^ 48;\n        while ((c = getchar()) != ' ' && c != '\\n' && c != '\\r'&&~c)\n            x = (x << 1) + (x << 3) + (c ^ 48);\n        if (flag)return -x; return x;\n    }\n    inl ll max(rg ll a, rg ll b) { if (a > b)return a; return b; }\n    inl ll min(rg ll a, rg ll b) { if (a < b)return a; return b; }\n    void write(rg ll x) { if (x < 0)putchar('-'), x = -x; if (x >= 10)write(x / 10); putchar(x % 10 ^ 48); }\n}\nint ans[N][N], a[N << 1][N];\n\nint main(void)\n{\n    rg int n = fast_IO::read(), m = fast_IO::read();\n    for (rg int i = 1; i <= n; ++i)\n        for (rg int j = 1; j <= m; ++j)\n            ans[i][j] = a[i][j] = a[j + n][i] = fast_IO::read();\n    for (rg int i = 1; i <= n + m; ++i)\n    {\n        if (i <= n)\n        {\n            sort(a[i] + 1, a[i] + m + 1);\n            *a[i] = unique(a[i] + 1, a[i] + m + 1) - a[i] - 1;\n        }\n        else\n        {\n            sort(a[i] + 1, a[i] + n + 1);\n            *a[i] = unique(a[i] + 1, a[i] + n + 1) - a[i] - 1;\n        }\n    }\n    for (rg int i = 1; i <= n; ++i)\n    {\n        for (rg int j = 1; j <= m; ++j)\n        {\n            rg int x = lower_bound(a[i] + 1, a[i] + *a[i] + 1, ans[i][j]) - a[i] - 1;\n            rg int y = lower_bound(a[j + n] + 1, a[j + n] + *a[j + n] + 1, ans[i][j]) - a[j + n] - 1;\n            fast_IO::write(fast_IO::max(x, y) + fast_IO::max(*a[i] - x, *a[j + n] - y)); putchar(' ');\n        }\n        putchar('\\n');\n    }\n    return 0;\n}\n\n\n```\n",
        "postTime": 1552218403,
        "uid": 87283,
        "name": "Zechariah",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1137A \u3010Skyscrapers\u3011"
    }
]