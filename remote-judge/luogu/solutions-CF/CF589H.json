[
    {
        "content": "### \u9898\u610f\uff1a\n\u6709\u4e00\u4e2an\u4e2a\u70b9m\u6761\u8fb9\u7684\u56fe\uff0c\u6307\u5b9ak\u4e2a\u70b9\u4e3a\u5173\u952e\u70b9\u3002\n\n\u6bcf\u6b21\u4f60\u53ef\u4ee5\u9009\u62e9\u4e24\u4e2a\u672a\u88ab\u9009\u62e9\u8fc7\u7684\u5728\u56fe\u4e0a\u8054\u901a\u7684\u5173\u952e\u70b9\uff0c\u9009\u62e9\u5b83\u4eec\u4e4b\u95f4\u7684\u4e00\u6761\u7b80\u5355\u8def\u5f84\uff0c\u5c06\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u5220\u9664\u3002\n\n\u4f60\u9700\u8981\u8f93\u51fa\u6700\u591a\u80fd\u9009\u591a\u5c11\u5bf9\u70b9\uff0c\u5e76\u4e14\u8f93\u51fa\u6bcf\u5bf9\u70b9\u4f60\u5220\u9664\u8def\u5f84\u957f\u5ea6\u548c\u8fd9\u6761\u8def\u5f84\u7ecf\u8fc7\u7684\u70b9\u3002\n\n### \u9898\u89e3\uff1a\n\u601d\u7ef4\u9898\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u56fe\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u6211\u4eec\u5206\u5f00\u8003\u8651\uff0c\u82e5\u4e00\u4e2a\u8054\u901a\u5757\u4e2d\u6709$x$\u4e2a\u5173\u952e\u70b9\uff0c \u90a3\u4e48\u663e\u7136\u6700\u591a\u53ea\u80fd\u9009\u62e9$\\lfloor \\frac{x}{2} \\rfloor$\u5bf9\u5173\u952e\u70b9\u3002\n\u4e0b\u9762\u8bc1\u660e\u4e00\u5b9a\u80fd\u9009\u62e9$\\lfloor \\frac{x}{2} \\rfloor$\u5bf9\u5173\u952e\u70b9\uff1a\n\u5982\u679c\u5b58\u5728\u4e24\u5bf9\u5173\u952e\u70b9\u7684\u8def\u5f84\u6709\u91cd\u5408\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8fd9\u6bb5\u91cd\u5408\u7684\u8def\u5f84\u4e00\u4fa7\u7684\u4e24\u4e2a\u5173\u952e\u70b9\u4f5c\u4e3a\u4e00\u5bf9\uff0c\u53e6\u4e00\u4fa7\u7684\u4e24\u4e2a\u5173\u952e\u70b9\u4f5c\u4e3a\u4e00\u5bf9\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u91cd\u5408\u3002\n\u4e8e\u662f\u6211\u4eec\u5c31\u4e00\u5b9a\u80fd\u627e\u5230\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u9009\u62e9\u7684\u6240\u6709\u5173\u952e\u70b9\u5bf9\u7684\u8def\u5f84\u4e0d\u4f1a\u91cd\u5408\u3002\n\n\u8003\u8651\u5982\u4f55\u6784\u9020\u65b9\u6848\uff0c\u6211\u4eec\u5728\u539f\u56fe\u7684\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u751f\u6210\u6811\u4e0a\u8dd1\u4e00\u904ddfs\uff0c\u8fd9\u4e2adfs\u8fd4\u56de\u503c\u4e3a\u8fd9\u68f5\u5b50\u6811\u5185\u8fd8\u672a\u5339\u914d\u7684\u5173\u952e\u70b9\u7684\u7f16\u53f7\uff08\u5982\u679c\u5168\u5339\u914d\u5b8c\u4e86\u5c31\u662f-1\uff09\u3002\n\u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e2adfs\u5462\uff1f\u5bf9\u4e8e\u4e00\u4e2a\u513f\u5b50\uff0c\u5982\u679c\u5b83\u7684dfs\u8fd4\u56de\u503c\u4e3a-1\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u8003\u8651\u4e86\u3002\u5426\u5219\u9009\u62e9\u53e6\u4e00\u4e2adfs\u8fd4\u56de\u503c\u4e0d\u4e3a-1\u7684\u513f\u5b50\uff0c\u5c06\u8fd9\u4e24\u68f5\u5b50\u6811\u5185\u672a\u5339\u914d\u7684\u5173\u952e\u70b9\u8bbe\u4e3a\u5339\u914d\u3002\u5f88\u663e\u7136\u8fd9\u6837\u6700\u7ec8\u53ea\u4f1a\u5269\u4e0b0\u4f1a1\u4e2a\u5173\u952e\u70b9\u6ca1\u6709\u5339\u914d\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de-1\u6216\u8005\u76f8\u5bf9\u5e94\u7684\u5173\u952e\u70b9\u7f16\u53f7\u5373\u53ef\u3002\n\n\u8fd9\u6837\u4e00\u5b9a\u4f1a\u6709$\\lfloor \\frac{x}{2} \\rfloor$\u5bf9\u5173\u952e\u70b9\u88ab\u8bbe\u4e3a\u5339\u914d\uff0c\u5e76\u4e14\u5f88\u663e\u7136\uff0c\u8fd9\u4e9b\u8def\u5f84\u4e0d\u4f1a\u91cd\u5408\u3002\u8f93\u51fa\u65f6\u5c31\u66b4\u529b\u627elca\u8f93\u51fa\u8def\u5f84\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing std::vector;\n\n#define MAXN 50010\n\nint n,m,k,tot,dep[MAXN],fa[MAXN],matched[MAXN],left[MAXN],right[MAXN],lcnt,rcnt;\nbool visit[MAXN],tag[MAXN];\nvector<int> edge[MAXN];\n\nint dfs(int u,int father)\n{\n\tint match;\n\tif(tag[u])match=u;else match=-1;\n\tvisit[u]=true;\n\tfa[u]=father;\n\tfor(auto v:edge[u])\n\t{\n\t\tif(visit[v])continue;\n\t\tdep[v]=dep[u]+1;\n\t\tint tomatch=dfs(v,u);\n\t\tif(~tomatch)\n\t\t\tif(~match)\n\t\t\t{\n\t\t\t\tmatched[tomatch]=match;\n\t\t\t\tmatched[match]=tomatch;\n\t\t\t\tmatch=-1;\n\t\t\t\t++tot;\n\t\t\t}\n\t\t\telse match=tomatch;\n\t}\n\treturn match;\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tedge[u].push_back(v);\n\t\tedge[v].push_back(u);\n\t}\n\tfor(int i=1;i<=k;++i)\n\t{\n\t\tint u;\n\t\tscanf(\"%d\",&u);\n\t\ttag[u]=1;\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tif(!visit[i])dfs(i,0);\n\tprintf(\"%d\\n\",tot);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(!matched[i])continue;\n\t\tint u=i,v=matched[i];\n\t\tmatched[u]=matched[v]=false;\n\t\tleft[lcnt=1]=u;\n\t\tright[rcnt=1]=v;\n\t\twhile(u^v)if(dep[u]<dep[v])right[++rcnt]=v=fa[v];else left[++lcnt]=u=fa[u];\n\t\tprintf(\"%d \",lcnt+rcnt-2);\n\t\tfor(int i=1;i<lcnt;++i)printf(\"%d \",left[i]);\n\t\tfor(int i=rcnt;i>=1;--i)printf(\"%d \",right[i]);\n\t\tputs(\"\");\n\t}\n}\n```\n",
        "postTime": 1540888666,
        "uid": 34886,
        "name": "ezoixx130",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF589H \u3010Tourist Guide\u3011"
    },
    {
        "content": "# \u3010CF589H\u3011Tourist Guide\n\n\u5148\u8003\u8651\u4e00\u68f5\u6811\u7684\u60c5\u51b5\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u53ea\u8981\u5173\u952e\u70b9\u6570\u91cf\u4e3a\u5076\u6570\u4e2a\uff0c\u90a3\u4e00\u5b9a\u5b58\u5728\u67d0\u79cd\u5339\u914d\u65b9\u5f0f\uff0c\u80fd\u5c06\u5b83\u4eec\u4e24\u4e24\u5339\u914d\u6210\u529f\u3002\u6811\u5df2\u5982\u6b64\uff0c\u56fe\u5c31\u66f4\u5e94\u8be5\u5982\u6b64\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8f7b\u6613\u7b97\u51fa\u5339\u914d\u5bf9\u6570\u3002\u4ee4size\\[p\\]\u8868\u793a\u7b2cp\u4e2a\u8054\u901a\u5757\u4e2d\u5173\u952e\u70b9\u7684\u6570\u91cf\uff0c\u5219\u7b54\u6848\u4e3a\u03a3(size\\[p\\] / 2)\n\n\u8003\u8651\u5230\u56fe\u4e0a\u65b9\u6848\u5f88\u96be\u8f93\u51fa\uff0c\u6811\u4e0a\u76f8\u5bf9\u5bb9\u6613\u4e00\u4e9b\uff0c\u800c\u628a\u56fe\u53d8\u6210\u6811\u5e76\u4e0d\u5f71\u54cd\u4e24\u4e24\u5339\u914d\u6210\u529f\u7684\u4e8b\u5b9e\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u56fe\u7684\u751f\u6210\u6811\u9020\u51fa\u6765\uff0c\u968f\u4fbf\u751f\u6210\u4e00\u68f5\u6811\u5373\u53ef\n\n\u7136\u540e\u76f4\u63a5\u641c\u7d22\u5373\u53ef\u3002\u8bb0fuck\\[x\\]\u8868\u793a\u8282\u70b9x\u53ca\u5176\u4e0b\u65b9\u7b2c\u4e00\u4e2a\u672a\u5339\u914d\u7684\u70b9\uff0c\u7136\u540e\u5728\u5b50\u6811\u4e2d\u9047\u5230\u4e00\u4e2a\u53ef\u5339\u914d\u7684\u70b9\u5c31\u5339\u914d\u4e0a\u53bb\u3002\u5982\u679c\u5b50\u6811\u4e2d\u4ecd\u7136\u5b58\u5728\u672a\u5339\u914d\u7684\u70b9\uff0c\u5c31\u5c06fuck\\[x\\]\u4f20\u7ed9\u5b83\u7684\u7236\u4eb2\n\n\u8def\u5f84\u7684\u8f93\u51fa\u76f4\u63a5\u66b4\u529b\u8df3\u5230LCA\u5373\u53ef\uff0c\u6cbf\u9014\u8bb0\u5f55\u7ecf\u8fc7\u7684\u70b9\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nnamespace IO\n{\n    const int S=(1<<20)+5;\n    char buf[S],*H,*T;\n    inline char Get()\n    {\n        if(H==T) T=(H=buf)+fread(buf,1,S,stdin);\n        if(H==T) return -1;return *H++;\n    }\n    inline int read()\n    {\n        int x=0;char c=Get();\n        while(!isdigit(c)) c=Get();\n        while(isdigit(c)) x=x*10+c-'0',c=Get();\n        return x;\n    }\n    char obuf[S],*oS=obuf,*oT=oS+S-1,c,qu[55];int qr;\n    inline void flush(){fwrite(obuf,1,oS-obuf,stdout);oS=obuf;}\n    inline void putc(char x){*oS++ =x;if(oS==oT) flush();}\n    template <class I>inline void print(I x)\n    {\n        if(!x) putc('0');\n        while(x) qu[++qr]=x%10+'0',x/=10;\n        while(qr) putc(qu[qr--]);\n    }\n}\n\nusing IO::read;\nusing IO::print;\nusing IO::putc;\nconst int N=50010;\nstruct Edge{int to,next;} e[N<<1];\nint h[N],sum=0,n,m,tot;\nint dep[N],fa[N],fuck[N];\nint ffa[N],sz[N];\nbool spd[N];\n\nint find(int x){return ffa[x]==x?x:ffa[x]=find(ffa[x]);}\n\nvoid add_edge(int u,int v)\n{\n    e[++sum].to=v;\n    e[sum].next=h[u];\n    h[u]=sum;\n}\n\nvoid getpath(int x,int y)\n{\n    static int path1[N],path2[N];\n    int tot1=0,tot2=0;\n    while(x!=y)\n    {\n        if(dep[x]>dep[y]) path1[++tot1]=x,x=fa[x];\n        else path2[++tot2]=y,y=fa[y];\n    }\n    path1[++tot1]=x;\n    print(tot1+tot2-1);putc(' ');\n    for(int i=1;i<=tot1;i++) print(path1[i]),putc(' ');\n    for(int i=tot2;i>=1;i--) print(path2[i]),putc(' ');\n    putc('\\n');\n}\n\nvoid dfs(int u,int la)\n{\n    fuck[u]=spd[u]?u:0;\n    for(int t=h[u];t;t=e[t].next)\n    {\n        int v=e[t].to;\n        if(v==la) continue;\n        dep[v]=dep[u]+1;\n        fa[v]=u;dfs(v,u);\n        if(!fuck[v]) continue;\n        if(!fuck[u]) fuck[u]=fuck[v];\n        else getpath(fuck[u],fuck[v]),fuck[u]=0;\n    }\n}\n\nint main()\n{\n    n=read();m=read();tot=read();\n    for(int i=1;i<=n;i++) ffa[i]=i;\n    for(int i=1,u,v;i<=m;i++)\n    {\n        u=read();v=read();\n        if(find(u)==find(v)) continue;\n        ffa[find(u)]=find(v);\n        add_edge(u,v);\n        add_edge(v,u);\n    }\n    for(int i=1,x;i<=tot;i++)\n        x=read(),spd[x]=1,sz[find(x)]++;\n    int ans=0;\n    for(int i=1;i<=n;i++)\n        if(ffa[i]==i) ans+=sz[i]/2;\n    print(ans);putc('\\n');\n    for(int i=1;i<=n;i++)\n        if(ffa[i]==i) dfs(i,0);\n    IO::flush();\n    return 0;\n}\n```\n\n",
        "postTime": 1540904637,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF589H \u3010Tourist Guide\u3011"
    }
]