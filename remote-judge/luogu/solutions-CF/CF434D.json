[
    {
        "content": "\u8003\u8651\u7f51\u7edc\u6d41\uff0c\u5bf9\u6bcf\u4e2a\u51fd\u6570\u90fd\u5efa\u7acb$[l_i,r_i]$\u7684\u70b9\uff0c\u70b9$(i,j)$\u8868\u793a\u51fd\u6570$f_i$\u5f53$x_i=j$\u65f6\u7684\u70b9\u3002\n\n\u6211\u4eec\u8003\u8651\u6700\u5c0f\u635f\u5931\u3002\u8bbe\u4e00\u4e2a\u6781\u5927\u503c$lim$\uff08\u5927\u4e8e\u6240\u6709\u7684$f_i(x)$\uff09\uff0c\u5c06\u4e5f\u5c31\u662f\u8981\u6c42$lim-f_i(x)$\u7684\u6700\u5c0f\u503c\u3002\n\n\u6211\u4eec\u4ece\u70b9$(i,j)$\u5411\u70b9$(i,j+1)$\uff08\u5982\u679c$j=r_i$\u90a3\u5c31\u662f\u8d85\u6c47$T$\uff09\u6d41$lim - f_i(j)$\uff0c\u4ece\u8d85\u6e90$S$\u5411\u70b9$(i,l_i)$\u6d41$\\infty$\u3002\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u4e00\u5f20\u56fe\uff1a\n\n![](https://pufanyi.github.io/CF434D/flow1.svg)\n\n\u5982\u679c\u8fd9\u4e9b\u51fd\u6570\u7684\u53d6\u503c\u4e92\u8865\u5e72\u6d89\uff0c\u90a3\u4e48$n\\times lim-\\text{\u6700\u5c0f\u5272}$\u5c31\u662f\u7b54\u6848\u3002\n\n\u6211\u4eec\u8003\u8651\u5982\u4f55\u52a0\u5165\u8fd9\u4e9b\u9650\u5236\u3002\n\n\u5982\u679c\u73b0\u5728\u6709\u9650\u5236$x_u\\le x_v+d$\uff0c\u4e5f\u5c31\u662f$x_v\\ge x_u-d$\u3002\u5982\u679c\u6211\u4eec\u5272\u4e86$x_u$\u8fd9\u6761\u8fb9\uff0c\u5728$v$\u8fd9\u6761\u94fe\u4e0a\u6211\u4eec\u53ea\u80fd\u5272$x_u-d$\u4ee5\u540e\u7684\u8fb9\u3002\u90a3\u5c31\u4e0d\u59a8\u4ece$u$\u8fd9\u6761\u8868\u4e0a\u6240\u6709\u7684$x$\u5411$v$\u8fd9\u6761\u8fb9\u4e0a\u6240\u6709\u7684$x-d$\u8fde\u4e00\u6761$\\infty$\u7684\u8fb9\u3002\n\n\u5982\u679c\u5272\u7eff\u8272\u7684\u90a3\u4e24\u6761\u7ebf\uff1a\n\n![](https://pufanyi.github.io/CF434D/flow.svg)\n\n\u5f88\u5f00\u5fc3\u5730\u6d4b\u4e00\u4e0b\u6837\u4f8b\uff0c\u70b8\u4e86\u2026\u2026\n\n\u6211\u4eec\u6765\u770b\u8fd9\u79cd\u60c5\u5f62\uff08\u5bf9\u6837\u4f8b1\u7565\u6709\u6539\u52a8\uff09\uff1a\n\n```plain\n2 2\n0 1 0\n0 1 1\n2 3\n1 2\n1 2 0\n2 1 0\n```\n\n\u5efa\u51fa\u6765\u7684\u56fe\u5927\u6982\u662f\u957f\u8fd9\u6837\u7684\uff1a\n\n![](https://pufanyi.github.io/CF434D/flow4.svg)\n\n\u6700\u5c0f\u5272\u662f\u9009$(1,3)\\to T$\u548c$(2,3)\\to T$\u3002\n\n\u4f46\u663e\u7136$(1,3)\\to T$\u662f\u4e0d\u80fd\u9009\u7684\u3002\u56e0\u4e3a\u7531$x_1\\le x_2$\u548c$x_2\\le x_1$\u53ef\u77e5$x_1=x_2$\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u5f97\u518d\u5efa\u4e00\u4e2a$(i,r_i+1)$\u70b9\uff0c$(i,r_i)\\to (i,r_i+1)$\u6d41$f_i(r_i)$\uff0c$(i,r_i+1)\\to T$\u6d41$\\infty$\u3002\n\n![](https://pufanyi.github.io/CF434D/flow5.svg)\n\n\u8fd9\u6837\u5c31\u5b8c\u7f8e\u4e86\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst LL maxn = 10005;\nconst LL maxm = 5000005;\nconst LL inf = 0x3f3f3f3f3f3f3f3f;\nconst LL lim = 1000000000000;\n\nstruct Edge\n{\n    LL to, nxt, cap;\n} e[maxm << 1];\n\nLL first[maxn], first_bak[maxn];\n\ninline void add_edge(LL from, LL to, LL cap)\n{\n    static LL cnt = -1;\n    e[++cnt].nxt = first[from];\n    first[from] = cnt;\n    e[cnt].to = to;\n    e[cnt].cap = cap;\n    e[++cnt].nxt = first[to];\n    first[to] = cnt;\n    e[cnt].to = from;\n    e[cnt].cap = 0;\n}\n\nLL n, m, S, T;\n\nLL bh[105][205];\nLL a[maxn], b[maxn], c[maxn];\nLL ll[maxn];\nLL rr[maxn];\nLL dep[maxn];\n\ninline LL getans(LL I, LL x)\n{\n    return a[I] * x * x + b[I] * x + c[I];\n}\n\ninline bool bfs()\n{\n    memset(dep, 0x3f, sizeof(dep));\n    queue<LL> q;\n    q.push(S);\n    dep[S] = 0;\n    for(int i = S; i <= T; ++i)\n        first[i] = first_bak[i];\n    while(!q.empty())\n    {\n        LL now = q.front();\n        q.pop();\n        for(int i = first[now]; ~i; i = e[i].nxt)\n        {\n            LL to = e[i].to;\n            if(dep[to] >= inf && e[i].cap > 0)\n            {\n                dep[to] = dep[now] + 1;\n                q.push(to);\n            }\n        }\n    }\n    return dep[T] < inf;\n}\n\ninline LL dfs(LL now, LL lim)\n{\n    if(!lim || now == T)\n        return lim;\n    LL flow = 0;\n    for(int i = first[now]; ~i; i = e[i].nxt)\n    {\n        first[now] = i;\n        register LL to = e[i].to, f;\n        if(dep[to] == dep[now] + 1 && (f = dfs(to, min(lim, e[i].cap))) > 0)\n        {\n            lim -= f;\n            flow += f;\n            e[i].cap -= f;\n            e[i ^ 1].cap += f;\n            if(lim <= 0)\n                break;\n        }\n    }\n    return flow;\n}\n\ninline LL dinic()\n{\n    LL flow = 0;\n    while(bfs())\n        flow += dfs(S, inf);\n    return flow;\n}\n\nint main()\n{\n    memset(first, 0xff, sizeof(first));\n    scanf(\"%lld%lld\", &n, &m);\n    for(int i = 1; i <= n; ++i)\n        scanf(\"%lld%lld%lld\", &a[i], &b[i], &c[i]);\n    for(int i = 1; i <= n; ++i)\n    {\n        scanf(\"%lld%lld\", &ll[i], &rr[i]);\n        add_edge(S, T + 1, inf);\n        for(LL j = ll[i] + 100; j <= rr[i] + 101; ++j)\n        {\n            bh[i][j] = ++T;\n            if(j != ll[i] + 100)\n                add_edge(bh[i][j - 1], bh[i][j], lim - getans(i, j - 1 - 100));\n        }\n    }\n    T++;\n    for(LL i = 1; i <= n; ++i)\n        add_edge(bh[i][rr[i] + 101], T, inf);\n    for(int i = 1, u, v, d; i <= m; ++i)\n    {\n        scanf(\"%d%d%d\", &u, &v, &d);\n        for(int j = ll[u]; j <= rr[u] + 1; ++j)\n            if(ll[v] <= j - d && j - d <= rr[v] + 1)\n                add_edge(bh[u][j + 100], bh[v][j - d + 100], inf);\n    }\n    for(int i = S; i <= T; ++i)\n        first_bak[i] = first[i];\n    printf(\"%lld\\n\", n * lim - dinic());\n    return 0;\n}\n```\n",
        "postTime": 1552802279,
        "uid": 84088,
        "name": "pufanyi",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF434D \u3010Nanami's Power Plant\u3011"
    },
    {
        "content": "debug 1 week\uff0c\u7cbe\u795e\u5d29\u6e83\uff0c\u540e\u6765\u53d1\u73b0\u662f\u7a7a\u95f4\u5f00\u5c0f\u4e86\u2026\u2026\n\n------\n\n\u867d\u7136\u8fd9\u4e2a\u5947\u5947\u602a\u602a\u7684\u9650\u5236\u8ba9\u4eba\u5f88\u96be\u4e0d\u5f80**\u5dee\u5206\u7ea6\u675f**\u53bb\u60f3\uff0c\u4f46\u662f\u5982\u679c\u5dee\u5206\u7ea6\u675f\u7684\u8bdd\u5c31\u4e0d\u65b9\u4fbf\u6c42\u51fa\u6700\u5927\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u5f97\u4e0d\u601d\u8003\u5176\u5b83\u7684\u7b97\u6cd5\u3002\n\n\u8003\u8651\u5c06\u65b9\u6848\u62bd\u8c61\u51fa\u6765\u2014\u2014\u7ed9\u4f60\u8bb8\u591a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u5404\u6709\u4e00\u4e9b\u53d6\u503c\uff0c\u4e14\u5176\u4e2d\u67d0\u4e9b\u7269\u54c1\u5bf9\u4e0d\u80fd\u53d6\u67d0\u4e9b\u503c\u5bf9\uff0c\u6c42\u6700\u4f18\u7684\u53d6\u503c\u3002\n\n\u518d\u8fdb\u4e00\u6b65\u89c2\u5bdf\uff0c\u53d1\u73b0\u5b9e\u9645\u4e0a\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c\u4e2d\uff0c\u5747**\u80fd\u4e14\u53ea\u80fd**\u9009\u4e00\u4e2a\uff1b\u6240\u6709\u4e0d\u5408\u6cd5\u503c\u5bf9\u4e2d\uff0c\u5747**\u81f3\u591a**\u9009\u4e00\u4e2a\u3002\u5e76\u4e14\uff0c\u8fd9\u4e24\u4e2a\u662f\u552f\u4e8c\u7684\u9650\u5236\u3002\n\n\u591a\u9009\u4e00\u95ee\u9898\uff0c\u56e0\u4e3a\u672c\u9898\u662f\u5e26\u6743\u7684\u6240\u4ee5\u4e0d\u80fd\u7b80\u5355\u7528SAT\u95ee\u9898\u89e3\u51b3\uff0c\u6240\u4ee5\u8003\u8651**\u6700\u5c0f\u5272**\u3002\n\n\u56e0\u4e3a\u6bcf\u4e2a\u7269\u54c1\u7684\u6240\u6709\u53d6\u503c\u4e2d\u9009\u4e14\u4ec5\u9009\u4e00\u4e2a\uff0c\u653e\u5230\u6700\u5c0f\u5272\u4e0a\u5c31\u662f\u4e00\u6761\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u6837\u5728\u6700\u5c0f\u5272\u4e2d\u5c31\u5272\u4e14\u4ec5\u5272\u4e00\u6761\u3002\n\n\u53ef\u662f\u6211\u4eec\u8981\u7684\u662f\u6700\u5927\u6743\u503c\uff0c\u8fd9\u6837\u5efa\u56fe\u7684\u8bdd\u6c42\u51fa\u6765\u7684\u5e94\u8be5\u662f\u6700\u5c0f\u6743\u503c\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u5efa\u56fe\u4f1a\u5272\u4e14\u4ec5\u5272 $n$ \u6761\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u53d6\u503c\u4e3a $k$ \u7684\u7269\u54c1\uff0c\u5b9e\u9645\u8fde\u4e0a\u4e00\u6761\u8fb9\u6743\u4e3a $lim-k$ \u7684\u8fb9\uff0c\u5176\u4e2d $lim$ \u662f\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u503c\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u5b58\u5728\u8d1f\u6743\u8fb9\u3002\u5b9e\u9645\u53d6 $10^6$ \u8db3\u77e3\u3002\n\n\u8fd9\u6837\uff0c\u82e5\u6700\u5c0f\u5272\u662f $cut$\uff0c\u5219\u7b54\u6848\u5373\u4e3a $n\\times lim-cut$\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8bbe $id_{i,j}$ \u8868\u793a\u7b2c $i$ \u4e2a\u51fd\u6570\u53d6\u503c\u4e3a $j$ \u65f6\u4ee3\u8868\u7684\u8282\u70b9\uff0c$f_{i,j}$ \u8868\u793a\u53d6\u503c\u4e3a $j$ \u65f6\u7684\u6536\u76ca\uff0c\u540c\u65f6\u8bbe\u5176\u53d6\u503c\u8303\u56f4\u4e3a $[L_i,R_i]$\u3002\n\n\u5219\u5728\u6211\u4eec\u4e0a\u8ff0\u65b9\u6848\u4e2d\uff0c\u5c31\u8981\u8fde\u8fb9 $(S,id_{i,L_i},lim-f_{i,j})$\uff0c$(id_{i,j-1},id_{i,j},lim-f_{i,j}),\\text{where }j\\in(L_i,R_i]$\uff0c$(id_{i,R_i},T,\\infty)$\u3002\n\n\u8fd9\u6837\u4e0b\u6765\u8003\u8651\u9650\u5236 $x_u\\leq x_v+d$\u3002\u663e\u7136\uff0c\u8be5\u9650\u5236\u4e0d\u6210\u7acb\uff0c\u5f53\u4e14\u4ec5\u5f53 $x_v<x_u-d$\u3002\u4e8e\u662f\u6211\u4eec\u679a\u4e3e $x_u$ \u7684\u53d6\u503c\uff0c\u8003\u8651\u4f7f\u5f97\u6240\u6709 $x_v$ \u7684\u53d6\u503c $<x_u-d$ \u7684\u5272\u4e0d\u5408\u6cd5\u3002\n\n\u660e\u663e\uff0c$x_v<x_u-d$ \u662f\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u8def\u5f84\u4e0a\u4e00\u6bb5\u524d\u7f00\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8fde\u8fb9 $(id_{u,x_u},id_{v,x_u-d},\\infty)$\uff0c\u8fd9\u6837\u6240\u6709\u4e0a\u8ff0\u7684\u5272\u90fd\u4e0d\u5408\u6cd5\u4e86\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u67d0\u4e9b $x_u$ \u6216\u8005 $x_v$\uff0c\u53ef\u80fd\u538b\u6839\u4e0d\u5b58\u5728\u4efb\u4f55\u5bf9\u5e94\u7684\u53e6\u4e00\u4e2a\u53d8\u91cf\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u624b\u52a8\u7981\u6389\u8fd9\u4e9b\u53d6\u503c\uff0c\u5177\u4f53\u6765\u8bf4\u662f\u4ece $S$ \u8fde\u6765\u65e0\u7a77\u7684\u8fb9\u6216\u8005\u8fde\u5230 $T$ \u65e0\u7a77\u7684\u8fb9\uff0c\u89c6\u60c5\u51b5\u800c\u5b9a\uff0c\u5177\u4f53\u81ea\u5df1\u7a0d\u5fae\u753b\u753b\u56fe\u63a8\u63a8\u5c31\u51fa\u6765\u4e86\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u3002\n\n\u82e5\u8bbe $V$ \u4e3a\u503c\u57df\u5927\u5c0f\u7684\u8bdd\uff0c\u8003\u8651\u70b9\u6570\uff0c\u53d1\u73b0\u5176\u4e3a $nV$ \u7ea7\u522b\u7684\uff1b\u518d\u8003\u8651\u8fb9\u6570\uff0c\u662f $mV$ \u7684\uff0c\u90fd\u5728\u63a5\u53d7\u8303\u56f4\u5185\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6240\u6709\u7684\u9650\u5236\u90fd\u5df2\u7ecf\u88ab\u8003\u8651\u5230\u4e86\uff0c\u6545\u8fd9\u5c31\u662f\u6b63\u89e3\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int LIM=1000000;\nint n,m,a[110],b[110],c[110],L[110],R[110],id[110][2100],tot;\nnamespace MaxFlow{\n\tconst int N=201000,M=2001000;\n\tint head[N],cur[N],dep[N],cnt,S,T,res;\n\tstruct node{int to,next,val;}edge[M];\n\tvoid ae(int u,int v,int w){\n//\t\tprintf(\"%d %d %d\\n\",u,v,w);\n\t\tedge[cnt].next=head[u],edge[cnt].to=v,edge[cnt].val=w,head[u]=cnt++;\n\t\tedge[cnt].next=head[v],edge[cnt].to=u,edge[cnt].val=0,head[v]=cnt++;\n\t}\n\tqueue<int>q;\n\tinline bool bfs(){\n\t\tmemset(dep,0,sizeof(dep)),q.push(S),dep[S]=1;\n\t\twhile(!q.empty()){\n\t\t\tregister int x=q.front();q.pop();\n\t\t\tfor(register int i=cur[x]=head[x];i!=-1;i=edge[i].next)if(edge[i].val&&!dep[edge[i].to])dep[edge[i].to]=dep[x]+1,q.push(edge[i].to);\n\t\t}\n\t\treturn dep[T]>0;\n\t}\n\tbool reach;\n\tinline int dfs(int x,int flow){\n\t\tif(x==T){res+=flow,reach=true;return flow;}\n\t\tint used=0;\n\t\tfor(register int &i=cur[x];i!=-1;i=edge[i].next){\n\t\t\tif(!edge[i].val||dep[edge[i].to]!=dep[x]+1)continue;\n\t\t\tregister int ff=dfs(edge[i].to,min(edge[i].val,flow-used));\n\t\t\tif(ff){edge[i].val-=ff,edge[i^1].val+=ff,used+=ff;if(used==flow)break;}\n\t\t}\n\t\treturn used;\n\t}\n\tinline void Dinic(){while(bfs()){reach=true;while(reach)reach=false,dfs(S,0x3f3f3f3f);}}\n}\nusing namespace MaxFlow;\n#define ID(x,y) id[x][(y)+L[x]]\n#define VL(x,y) (a[x]*(y)*(y)+b[x]*(y)+c[x])\nint main(){\n\tscanf(\"%d%d\",&n,&m),S=1,T=2,tot=2,memset(head,-1,sizeof(head));\n\tfor(int i=1;i<=n;i++)scanf(\"%d%d%d\",&a[i],&b[i],&c[i]);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%d\",&L[i],&R[i]);\n\t\tfor(int j=L[i];j<=R[i];j++)ID(i,j)=++tot;\n\t\tae(S,ID(i,L[i]),LIM-VL(i,L[i]));\n\t\tfor(int j=L[i]+1;j<=R[i];j++)ae(ID(i,j-1),ID(i,j),LIM-VL(i,j));\n\t\tae(ID(i,R[i]),T,0x3f3f3f3f);\n\t}\n\tfor(int i=1,u,v,d;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&u,&v,&d);\n\t\tif(L[v]<=L[u]-d-1&&L[u]-d-1<=R[v])ae(S,ID(v,L[u]-d-1),0x3f3f3f3f);\n\t\tfor(int j=L[u];j<=R[u];j++){\n\t\t\tif(j-d<L[v])continue;\n\t\t\tif(j-d<=R[v])ae(ID(u,j),ID(v,j-d),0x3f3f3f3f);\n\t\t\telse ae(ID(u,j),T,0x3f3f3f3f);\n\t\t}\n\t}\n\tDinic();\n\tprintf(\"%d\\n\",LIM*n-res);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1613992053,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF434D \u3010Nanami's Power Plant\u3011"
    }
]