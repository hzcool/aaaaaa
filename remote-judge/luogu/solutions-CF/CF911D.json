[
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u8fd8\u662f\u633a\u504f\u601d\u7ef4\u9898\u7684\uff0c\u6211\u770b\u7f51\u4e0a\u6709\u5f88\u591a\u5f88\u591a\u7684\u5927\u4f6c\u5199\u4e86\u8d85\u7ea7\u8d85\u7ea7\u957f\u7684\u5e76\u4e14\u6709\u70b9\u5197\u6742\u4ee3\u7801 ~~\u6211\u662f\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u770b\u4e0d\u61c2\u7684~~ \u3002\n\n\u6240\u4ee5\u6211\u5728\u8fd9\u653e\u4e0a\u6211\u81ea\u5df1\u7684\u4ee3\u7801\u4ee5\u53ca\u4e00\u4e9b\u601d\u8def\n\n\u9996\u5148\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u9053\u9898\u7684\u6570\u636e\u8303\u56f4\u662f\u5f88\u5927\u7684\uff0c\u76f4\u63a5\u66b4\u529b\u4f1a\u8f7b\u8f7b\u677e\u677e\u7684T\u6389~~\u6211T\u4e86\u4e24\u53d1~~\u518d\u4e00\u770b\u8fd9\u4e2a\u9898\u76ee\u7684\u96be\u5ea6\u5206\u7c7b\uff0c\u8c8c\u4f3c\u4e0d\u7528\u6253\u90a3\u4e9b\u5e73\u8861\u6811\u7b49\u7b49\u9ad8\u6df1\u7684\u7b97\u6cd5~~\u53cd\u6b63\u6211\u4e5f\u4e0d\u4f1a~~\uff0c\u518d\u4e00\u60f3\u7b54\u6848\u53ea\u9700\u8981\u8f93\u51fa\u5947\u5076\u6027\uff0c\u4e8e\u662f\u60f3\u51fa\u4e86\u7b54\u6848\u3002\n\n\u9898\u610f\u662f\u5c06\u4e00\u6bb5\u533a\u95f4\u7ffb\u8f6c\uff0c\u6211\u4eec\u4f1a\u975e\u5e38\u8f7b\u6613\u5730\u53d1\u73b0 **\u539f\u5148\u662f\u6b63\u5e8f\u7684\u7ffb\u8f6c\u540e\u53d8\u6210\u4e86\u9006\u5e8f\u7684\uff0c\u5e76\u4e14\u7ffb\u8f6c\u7684\u90e8\u5206\u53ea\u5bf9\u8be5\u533a\u95f4\u8d77\u4f5c\u7528** \uff0c\u6240\u4ee5\u7ffb\u8f6c\u540e\u9006\u5e8f\u5bf9\u6570\u91cf\u7684\u5947\u5076\u6027\u4e5f\u5c31\u662f\u7ffb\u8f6c\u524d\u6b63\u5e8f\u5bf9\u7684\u6570\u91cf\u7684\u5947\u5076\u6027\uff0c\u4f46\u4ed6\u4eec\u4e24\u8005\u7684\u5947\u5076\u6027\u662f\u4e0d\u597d\u6c42\u7684 ~~\u5176\u5b9e\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u4ed6\u4eec\u4e24\u8005\u7684\u5947\u5076\u6027\uff0c\u4f46\u6211\u4e0d\u662f\u8fd9\u4e48\u505a\u7684~~ \uff0c\u6240\u4ee5\u6211\u5c1d\u8bd5\u4e86\u53e6\u4e00\u79cd\u65b9\u6cd5\n\n\u6211\u4eec\u5148\u8bbe\u8be5\u7ed9\u5b9a\u533a\u95f4\u7684\u957f\u5ea6\u4e3a**lenth**\uff0c\u5219\u8be5\u533a\u95f4\u5185\u6240\u6709\u6570\u5bf9\u6570\u91cf\u4e3a\n\n**lenth(lenth-1)/2** \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\u662f\u6240\u6709\u6570\u5bf9\u6570\u91cf\u800c\u4e0d\u662f\u4ec0\u4e48\u9006\u5e8f\u5bf9\u6570\u91cf\n\n\u6211\u4eec\u518d\u8bbe\u7ffb\u8f6c\u540e\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\u4e3a**part** \u6240\u4ee5\u7ffb\u8f6c\u524d\u7684\u6b63\u5e8f\u5bf9\u6570\u91cf\u4e5f\u4e3apart\uff0c\u8fd9\u4e2a\u524d\u9762\u63d0\u5230\u8fc7\u4e86\uff0c\u4e0d\u61c2\u7684\u5f80\u524d\u627e\uff0c\u6240\u4ee5\u7ffb\u8f6c\u524d\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\u5c31\u4e3a\n\n**lenth(lenth-1)/2-part**\n\n\u7136\u540e\u73b0\u5728\u662f\u6700\u91cd\u8981\u7684\u4e00\u6b65\uff1a**\u7ffb\u8f6c\u524d\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\u51cf\u53bb\u7ffb\u8f6c\u524d\u540e\u9006\u5e8f\u5bf9\u6570\u91cf\u5dee\u5c31\u662f\u7ffb\u8f6c\u540e\u9006\u5e8f\u5bf9\u7684\u6570\u91cf\uff0c\u6240\u4ee5\u5982\u679c\u8981\u5224\u65ad\u7ffb\u8f6c\u540e\u9006\u5e8f\u5bf9\u6570\u91cf\u7684\u5947\u5076\u6027\u53ea\u9700\u8981\u5224\u65ad\u53cd\u8f6c\u524d\u540e\u9006\u5e8f\u5bf9\u6570\u91cf\u5dee\u7684\u5947\u5076\u6027\u5373\u53ef**\n\n\u8fd9\u4e00\u90e8\u611f\u89c9\u8fd8\u662f\u633a\u96be\u7406\u89e3\u7684\uff0c\u5404\u4f4d\u6709\u4e0d\u61c2\u7684\u53ef\u4ee5\u79c1\u4fe1\u6211\n\n\u8fd9\u4e2a\u6570\u91cf\u5dee\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a\n\n**lenth(lenth-1)/2-part-part**\n\n\u4e5f\u5c31\u662f\uff1a\n\n**lenth(lenth-1)/2-part*2**\n\n\u5176\u4e2d**part*2**\u4e00\u5b9a\u662f\u5076\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u5224\u65ad**lenth(lenth-1)/2**\u5c31\u53ef\u4ee5\u4e86\uff0c\u800c\u8fd9\u4e2a\u592a\u7b80\u5355\u4e0d\u8fc7\u4e86\n\n\u76f4\u63a5\u4e0a\u4ee3\u7801\uff0c\u4ee3\u7801\u91cc\u4e5f\u4f1a\u6709\u4e00\u4e9b\u89e3\u91ca\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\nint n,m;\nint lenth,part;\nint l,r;\nint f;\nint a[1550];\nint main()\n{\n\twhile(~scanf(\"%d\",&n))\n\t{\n\t\tfor(int i=1;i<=n;i++)\n            scanf(\"%d\",&a[i]);\n\t\tscanf(\"%d\",&m);\n\t\tlenth=0;\n\t\tfor(int i=1;i<n;i++)\n\t\t\tfor(int j=i+1;j<=n;j++)\n\t\t\t\tif(a[i]>a[j]) lenth++;//\u66b4\u529b\u6c42\u8fd9\u4e2a\u533a\u95f4\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\uff0c\u672c\u4eba\u4e0d\u4f1a\u66f4\u9ad8\u7ea7\u7684\u7b97\u6cd5\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u8fc7\n\t\tif(lenth%2==0) f=1;\n\t\telse f=0;//\u8fd9\u4e24\u884c\u662f\u6c42\u539f\u6765\u533a\u95f4\u6240\u6709\u6570\u5bf9\u7684\u6570\u91cf\u4e5f\u5c31\u662flenth\u7684\u5947\u5076\u6027\n\t\twhile(m--)\n\t\t{\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tpart=r-l+1;\n\t\t\tif((part*(part-1)/2)%2==1)\n\t\t\t    f=!f;\n\t\t\tif(f)\n\t\t\t   printf(\"even\\n\");\n\t\t\telse\n\t\t\t    printf(\"odd\\n\");//\u8f93\u51fa\u7b54\u6848\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\u6492\u4e2a\u82b1\u7ed3\u675f\uff0c\u8bf7\u7ba1\u7406\u5458\u5927\u5927\u8ba9\u6211\u901a\u8fc7\uff0c\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u5199\u5f97\u53ef\u8ba4\u771f\u4e86\u3002\n\n\u5404\u4f4d\u5927\u4f6c\u8981\u662f\u6709\u4e0d\u61c2\u5f97\u53ef\u4ee5\u79c1\u4fe1\u95ee\u6211\u5440",
        "postTime": 1565596189,
        "uid": 39643,
        "name": "Muruski",
        "ccfLevel": 0,
        "title": "CF911D Inversion Counting\u9898\u89e3"
    },
    {
        "content": "\u9664\u53bb\u9006\u5e8f\u5bf9\u8be2\u95ee\uff0c\u8fd9\u4e2a\u9898\u9762\u5f88\u5bb9\u6613\u8ba9\u4eba\u60f3\u5230 Splay \u7ffb\u8f6c\u533a\u95f4\u64cd\u4f5c\u3002\n\n~~\u4f46 Codeforces \u84dd\u9898\u54ea\u4e2a\u6709\u7528\u5230\u5e73\u8861\u6811\u7684\uff1f~~\n\n\u6211\u4eec\u53d1\u73b0\u9006\u5e8f\u5bf9\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u6027\u8d28\uff1a\n\n- \u5f53\u524d\u533a\u95f4\u6240\u6709\u6570\u5bf9\u7684\u4e2a\u6570\u5982\u679c\u662f\u5076\u6570\uff0c\u6574\u4e2a\u5e8f\u5217\u9006\u5e8f\u5bf9\u4e2a\u6570\u5c31\u80af\u5b9a\u4e0d\u53d8\uff1b\u5982\u679c\u662f\u5947\u6570\uff0c\u6574\u4e2a\u9006\u5e8f\u5bf9\u4e2a\u6570\u80af\u5b9a\u6539\u53d8\u3002\n\n\u8bc1\u660e\u5f88\u7b80\u5355\uff0c\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\u3002\n\n1. \u82e5\u5f53\u524d\u6570\u5bf9\u4e2a\u6570\u4e3a\u5076\u6570\uff1a\n- \u82e5\u6b63\u5e8f\u5bf9\u4e2a\u6570\u4e3a**\u5947\u6570**\uff0c\u9006\u5e8f\u5bf9\u4e2a\u6570\u5c31\u662f**\u5947\u6570**\uff0c**\u7ffb\u8f6c\u540e\u4e5f\u662f\u5947\u6570**\u3002\n- \u82e5\u6b63\u5e8f\u5bf9\u4e2a\u6570\u4e3a**\u5076\u6570**\uff0c\u9006\u5e8f\u5bf9\u4e2a\u6570\u5c31\u662f**\u5076\u6570**\uff0c**\u7ffb\u8f6c\u540e\u4e5f\u662f\u5076\u6570**\u3002\n\n2. \u82e5\u5f53\u524d\u6570\u5bf9\u4e2a\u6570\u4e3a\u5947\u6570\uff1a\n- \u82e5\u6b63\u5e8f\u5bf9\u4e2a\u6570\u4e3a**\u5947\u6570**\uff0c\u9006\u5e8f\u5bf9\u4e2a\u6570\u5c31\u662f**\u5076\u6570**\uff0c**\u7ffb\u8f6c\u540e\u5c31\u662f\u5947\u6570**\u3002\n- \u82e5\u6b63\u5e8f\u5bf9\u4e2a\u6570\u4e3a**\u5076\u6570**\uff0c\u9006\u5e8f\u5bf9\u4e2a\u6570\u5c31\u662f**\u5947\u6570**\uff0c**\u7ffb\u8f6c\u540e\u5c31\u662f\u5076\u6570**\u3002\n\n\u6240\u4ee5\u5224\u65ad\u4e00\u4e0b\u6570\u5bf9\u4e2a\u6570\u5947\u5076\u6027\uff0c\u5982\u679c\u5076\u6570\u5c31\u4e0d\u53d8\uff0c\u5426\u5219\u53d6\u53cd\u3002\n\n\u5bf9\u4e8e\u4e00\u5f00\u59cb\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u5f52\u5e76\u6392\u5e8f\u3001\u6811\u72b6\u6570\u7ec4\u4ec0\u4e48\u7684\u5957\u4e0a\u53bb\u5c31\u884c\u3002\n\n$\\color{grey}\\mathtt{main\\ code:}$\n\n```cpp\nint mergesort(int l, int r, int s[], int q[]) {// \u5f52\u5e76\u6392\u5e8f\u6c42\u9006\u5e8f\u5bf9\n\tint res = 0;\n\tif (l == r) return 0;\n\tint mid = (l + r) >> 1;\n\tres += mergesort(l, mid, s, q);\n\tres += mergesort(mid + 1, r, s, q);\n\tint i = l, j = mid + 1, k = l;\n\twhile (i <= mid && j <= r) {\n\t\tif (s[i] <= s[j]) q[k++] = s[i++];\n\t\telse {\n\t\t\tq[k++] = s[j++];\n\t\t\tres += mid - i + 1;\n\t\t}\n\t}\n\twhile (i <= mid) q[k] = s[i], k++, i++;\n\twhile (j <= r) q[k] = s[j], k++, j++;\n\tfor (int i = l; i <= r; i++) s[i] = q[i];\n\treturn res;\n}\n\nint main() {\n\tn = read();\n\tfor (int i = 1; i <= n; i++) s[i] = read();\n\tcnt = mergesort(1, n, s, q);\n\tflag = !(cnt % 2);// \u521d\u59cb\u9006\u5e8f\u5bf9\u5947\u5076\u6027\n\tm = read();\n\tfor (int i = 1; i <= m; i++) {\n\t\tint l = read(), r = read();\n\t\tint t = (r - l + 1) * (r - l) / 2;// \u6570\u5bf9\u4e2a\u6570\n\t\tif (t % 2 == 1) flag = !flag;\n\t\tif (flag == 0) puts(\"odd\");\n\t\telse puts(\"even\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1620197432,
        "uid": 306573,
        "name": "Ender32k",
        "ccfLevel": 0,
        "title": "CF911D Inversion Counting \u9898\u89e3"
    },
    {
        "content": "# CF911D Inversion Counting\n\n**\u9898\u610f**\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 $a_1......a_n$ \uff0c\u6bcf\u4e2a\u64cd\u4f5c\u5c06 $a_l......a_r$ \u53cd\u8f6c\uff0c\u6c42\u6b64\u65f6\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002\n\n**\u6b63\u89e3**\n\n\u6211\u4eec\u77e5\u9053\uff0c\u6c42\u51fa\u4e00\u4e2a\u7cfb\u5217\u4e2d\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u7684\u590d\u6742\u5ea6\u6700\u597d\u60c5\u51b5\u4e0b\u662f $\\mathcal{O}(n\\log n)$ \u7684\uff0c\u82e5\u6bcf\u6b21\u5747\u53cd\u8f6c\u540e\u8ba1\u7b97\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u662f $\\mathcal{O}(mn\\log n)$ \u7684\uff0c\u663e\u7136\u4e0d\u53ef\u8fc7\u3002\u6240\u4ee5\u6b64\u9898\u6b63\u89e3\u6bcf\u6b21\u5224\u65ad\u5c06\u662f $\\mathcal{O}(1)$ \u7684\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e $i, j\\in[l,r], i<j$ \uff0c\u6bcf\u4e2a $a_i, a_j$\n\n* \u82e5\u518d\u53cd\u8f6c\u524d\u4e3a\u9006\u5e8f\u5bf9\uff0c\u5373 $a_i>a_j$ \uff0c\u90a3\u4e48\u53cd\u8f6c\u540e $a_i'(a_j)<a_j'(a_i)$ \uff0c\u5373\u4e0d\u662f\u9006\u5e8f\u5bf9\u3002\n\n* \u82e5\u518d\u53cd\u8f6c\u524d\u4e3a\u4e0d\u662f\u9006\u5e8f\u5bf9\uff0c\u5373 $a_i<a_j$ \uff0c\u90a3\u4e48\u53cd\u8f6c\u540e $a_i'(a_j)>a_j'(a_i)$ \uff0c\u5373\u662f\u9006\u5e8f\u5bf9\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6bcf\u6b21\u53cd\u8f6c\u4f1a\u5c06\u539f\u6765\u7684\u9006\u5e8f\u5bf9\u53d8\u4e3a\u975e\u9006\u5e8f\u5bf9\uff0c\u539f\u6765\u7684\u975e\u9006\u5e8f\u5bf9\u53d8\u6210\u9006\u5e8f\u5bf9\u3002\n\n\u8bbe $[1,n]$ \u4e2d\u521d\u59cb\u6709 $s$ \u4e2a\u9006\u5e8f\u5bf9\u3002\u663e\u7136\uff0c\u6bcf\u6b21\u53cd\u8f6c\u533a\u95f4 $[l,r]$ \u4e2d\u9009\u4e24\u4e2a\u6570 $a_i, a_j$ \u7ec4\u5bf9\uff08\u4e0d\u540c\u987a\u5e8f\u7b97\u4e00\u79cd\uff09\u5171\u6709 $\\frac{(l-r+1)\\times (l-r)}{2}$ \u79cd\uff0c\u8bbe\u8be5\u533a\u95f4\u4e2d\u9006\u5e8f\u5bf9\u4e2a\u6570\u4e3a $x$ \uff0c\u5219\u53cd\u8f6c\u540e\u4e2a\u6570\u53d8\u4e3a\u4e86 $s-x+(\\frac{(l-r+1)\\times (l-r)}{2}-x)=s+\\frac{(l-r+1)\\times (l-r)}{2}-2x$ \uff0c\u6a21 $2$ \u540c\u4f59\u4e8e $s+\\frac{(l-r+1)\\times (l-r)}{2}$ \uff0c\u53ea\u9700\u5224\u65ad\u8fd9\u4e2a\u6570\u7684\u5947\u5076\u5373\u53ef\u3002\n\n\u9884\u5904\u7406 $s$ \u53ef\u5728 $\\mathcal{O}(n^2)\\ or\\ \\mathcal{O}(n\\log n)$ \u4e2d\u5b8c\u6210\uff0c\u67e5\u8be2\u53ef\u5728 $\\mathcal{O}(1)\\times m=\\mathcal{O}(m)$ \u4e2d\u5b8c\u6210\uff0c\u603b\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log n+m)\\ or\\ \\mathcal{O}(n^{2}+m)$ \u3002\n\n**\u4ee3\u7801 $\\mathcal{O}(n^{2}+m)$ \u7248\u672c**\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int NR = 1500 + 5;\nint cnt, a[NR], n, m, l, r;\n\ninline void Init()\n{\n    for (int i = 1; i <= n; ++i)\n        for (int j = i + 1; j <= n; ++j)\n            if (a[j] < a[i])\n                cnt += 1;\n    return;\n}\n\nint main()\n{\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; ++i)\n        scanf(\"%d\", &a[i]);\n    Init();\n    scanf(\"%d\\n\", &m);\n    for (int i = 1; i <= m; ++i)\n    {\n        scanf(\"%d%d\", &l, &r);\n        cnt += (r - l + 1) * (r - l) / 2;\n        cnt %= 2;\n        cnt == 0 ? printf(\"even\\n\") : printf(\"odd\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1622969800,
        "uid": 384498,
        "name": "soweak",
        "ccfLevel": 0,
        "title": "CF911D Inversion Counting"
    },
    {
        "content": "\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u5bf9\u5927\u4f6c\u6765\u8bf4\u53ef\u80fd\u6709\u70b9\u5570\u55e6\n\n\u9996\u5148\u6211\u4eec\u8981\u4ed4\u7ec6\u770b\u9898\uff0c\u8981\u6c42\u7684\u662f[L, R]\u7ffb\u8f6c\u540e\u6574\u4e2a\u5e8f\u5217\u4e2d\u9006\u5e8f\u5bf9\u7684\u5947\u5076\u6027\uff0c\u4e0d\u662f[L, R]\u4e2d\u9006\u5e8f\u5bf9\u7684\u5947\u5076\u6027\uff0c\u4e5f\u4e0d\u662f\u9006\u5e8f\u5bf9\u7684\u603b\u6570\n\n\u63a5\u7740\u6211\u4eec\u5c31\u53ef\u4ee5\u601d\u8003[L, R]\u4e2d\u7684\u9006\u5e8f\u5bf9\u4e0e\u6574\u4e2a\u5e8f\u5217\u9006\u5e8f\u5bf9\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u4f1a\u60ca\u5947\u5730\u53d1\u73b0\uff0c\u7531\u4e8e[L, R]\u4e2d\u7684\u6570\u7ffb\u8f6c\u4e4b\u540e\u4e0e[L, R]\u533a\u95f4\u4e4b\u5916\u7684\u6570\u7684\u76f8\u5bf9\u4f4d\u7f6e\u5e76\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u6240\u4ee5\u9664\u4e86$a$, $b$\u4e24\u4e2a\u6570\u90fd\u5c5e\u4e8e[L, R]\u7684\u6570\u5bf9$(a, b)$\uff0c\u5176\u4ed6\u7684\u6570\u5bf9\u90fd\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u53ea\u8981\u77e5\u9053\u533a\u95f4[L, R]\u4e2d\u9006\u5e8f\u5bf9\u5947\u5076\u6027\u7684\u53d8\u5316\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u6574\u4e2a\u5e8f\u5217\u4e2d\u5947\u5076\u6027\u7684\u53d8\u5316\n\n\u90a3\u5982\u4f55\u6c42\u51fa\u8fd9\u4e2a\u53d8\u5316\u5462? \u601d\u8003\u4e00\u4e0b\u9006\u5e8f\u5bf9\u7684\u5b9a\u4e49: \n\n> \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e00\u6bb5\u6b63\u6574\u6570\u5e8f\u5217\uff0c\u9006\u5e8f\u5bf9\u5c31\u662f\u5e8f\u5217\u4e2d$a_i>a_j$\u4e14$i<j$\u7684\u6709\u5e8f\u5bf9 \u2014\u2014[P1908 \u9006\u5e8f\u5bf9](https://www.luogu.org/problem/P1908)\n\n\u63a5\u4e0b\u6765\u662f\u672c\u9053\u9898\u7684\u4e3b\u8981\u96be\u70b9:\n\n\u5bf9\u4e8e\u4efb\u610f\u6570\u5bf9$(a_i, a_j)\\, (i<j)$\uff0c\u53ea\u5b58\u5728\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5:\n\n$a_i>a_j$(\u9006\u5e8f\u5bf9)\uff0c$a_i =b_j$(\u76f8\u7b49\u7684\u6570\u5bf9)\uff0c$a_i<a_j$(\u987a\u5e8f\u5bf9?)(\u6d1b\u8c37\u7684$LaTeX$\u600e\u4e48\u6253\u5927\u62ec\u53f7\u554aQWQ)\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u7b49\u5f0f: \u9006\u5e8f\u5bf9\u6570\u91cf + \u76f8\u7b49\u7684\u6570\u5bf9\u7684\u6570\u91cf + \u987a\u5e8f\u5bf9\u6570\u91cf = \u6570\u5bf9\u603b\u6570\n\n\u5176\u4e2d\u9006\u5e8f\u5bf9\u5728\u533a\u95f4\u7ffb\u8f6c\u540e\u4f1a\u53d8\u6210\u987a\u5e8f\u5bf9\uff0c\u987a\u5e8f\u5bf9\u4f1a\u53d8\u6210\u9006\u5e8f\u5bf9\uff0c\u800c\u76f8\u7b49\u7684\u6570\u5bf9\u8fd8\u662f\u76f8\u7b49\u7684\u6570\u5bf9\n\n\u8bbe$m =  $ \u9006\u5e8f\u5bf9\u6570 + \u7ffb\u8f6c\u4e4b\u540e\u7684\u9006\u5e8f\u5bf9\u6570 = \u6570\u5bf9\u603b\u6570 - \u76f8\u7b49\u7684\u6570\u5bf9\u6570\u91cf\uff0c\u90a3\u4e48\u5982\u679c$m\\&1 == 1$\uff0c\u5947\u5076\u6027\u6539\u53d8\uff1b\u5982\u679c$m\\&1 == 0$\uff0c\u5947\u5076\u6027\u4e0d\u53d8\n\n\u6570\u5bf9\u603b\u6570\u7528\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u7b97\u51fa$ = \\frac {n(n-1)}{2} \\;\\; (n = R - L + 1)$\uff0c\u90a3\u4e48\u76f8\u7b49\u7684\u6570\u5bf9\u4e2a\u6570\u600e\u4e48\u6c42\u5462\uff1f\n\n\u7b54\u6848\u662f\u4e0d\u7528\u6c42~~\uff0c\u8fd9\u662f\u6211\u7ecf\u8fc7\u5bf9\u4eba\u751f\u548c\u793e\u4f1a\u7684\u5927\u601d\u8003\u540e\u5f97\u51fa\u7684\u7ed3\u8bba~~\uff0c\u5176\u5b9e\u8fd9\u662f\u7ffb\u8bd1\u7684\u9505\uff0c\u4ed4\u7ec6\u770b\u4e00\u773c\u82f1\u6587\u9898\u9762\uff0c\u8bf4\u7684\u662f\uff1a\n\n> A permutation of size $n$ is an array of size $n$ such that each integer from $1$ to $n$ occurs exactly once in this array\n\n\u5bf9\uff0cpermutation\u5c31\u662f`next_permutation();`\u91cc\u7684\u90a3\u4e2apermutation\uff0c\u6392\u5217\u7684\u610f\u601d\uff0c\u4e5f\u5c31\u662f\u8bf4$1$~$n$\u90fd\u5404\u51fa\u73b0\u4e00\u6b21\uff0c\u4e92\u4e0d\u91cd\u590d\uff0c\u90a3\u4e48\u53ea\u8981\u6c42\u51fa\u521d\u59cb\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec$O(1)$\u5730\u6c42\u51fa[L, R]\u5185\u6570\u5bf9\u603b\u6570\u7684\u5947\u5076\u6027\u5c31\u53ef\u4ee5\u4e86\n\n\u4ee3\u7801$\\downarrow$\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n\nusing namespace std;\n\nint m, x, y, num;\n\nint read() {\n\tint x = 0; char ch = getchar();\n\twhile(!isdigit(ch)) ch = getchar();\n\twhile(isdigit(ch)) x = x * 10 + ch - 48, ch = getchar();\n\treturn x;\n}\n\n#define lowbit(x) x&-x\n\nint n, a[600000], b[600000], c[600000];\n\nvoid add(int x) {\n\tfor(int i = x; i <= n; i += lowbit(i)) ++c[i];\n} \n\nlong long sum(int x) {\n\tlong long ans = 0;\n\tfor(int i = x; i; i -= lowbit(i)) ans += c[i];\n\treturn ans;\n}\n\nint main(void) {\n\tlong long ans = 0;\n\tcin >> n;\n\tfor(int i = 1; i <= n; ++i) a[i] = b[i] = read();\n\tsort(b + 1, b + n + 1);\n\tfor(int i = 1; i <= n; ++i) a[i] = n - (lower_bound(b + 1, b + n + 1, a[i]) - b) + 1; \n\tfor(int i = 1; i <= n; ++i) {\n\t\tans += sum(a[i] - 1);\n\t\tadd(a[i]);\n\t}\n    //\u4e0a\u9762\u662f\u6811\u72b6\u6570\u7ec4\u6c42\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u8fd9\u9898\u5f52\u5e76\u751a\u81f3\u66b4\u529b\u6c42\u9006\u5e8f\u5bf9\u56e0\u8be5\u4e5f\u662f\u53ef\u4ee5\u7684\n\tans &= 1;\n    m = read();\n    while(m--)\n    {\n        x = read();\n        y = read();\n        num = y-x+1;\n        num = num*(num-1)/2;//\u6c42\u6570\u5bf9\u603b\u6570\n        if((num)&1) ans = (ans+1)&1;//\u5224\u65ad\u5947\u5076\u6027\u662f\u5426\u6539\u53d8\n        if(ans) puts(\"odd\");\n        else puts(\"even\");\n    }\n}\n```",
        "postTime": 1565594846,
        "uid": 56501,
        "name": "\u26a1current\u26a1",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF911D \u3010Inversion Counting\u3011"
    },
    {
        "content": "### 1 \u601d\u8def\n\n\u9996\u5148\uff0c\u5728\u8be2\u95ee\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u6c42\u51fa\u6574\u4e2a\u5e8f\u5217\u7684\u9006\u5e8f\u5bf9\u6570\u3002\n\n\u4e3a\u4e86\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u8fc7\u9ad8\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u6765\u6c42\u9006\u5e8f\u5bf9\u3002\n\n\u8fd9\u662f\u5f52\u5e76\u6392\u5e8f\u7684\u4ee3\u7801\uff1a\n\n```\nvoid work(int l,int mid,int r){\n\tint i=l;\n\tint j=mid+1;\n\tint k=l;\n\twhile(i<=mid&&j<=r){\n\t\tif(a[i]<=a[j])b[k++]=a[i++];\n\t\telse{\n\t\t\tb[k++]=a[j++];\n\t\t\tcnt+=mid-i+1;\n\t\t}\n\t}\n\twhile(i<=mid)b[k++]=a[i++];\n\twhile(j<=r)b[k++]=a[j++];\n\tfor(i=l;i<=r;++i)a[i]=b[i];\n}\nvoid ask(int l,int r){\n\tif(l>=r)return;\n\tint mid=(l+r)>>1;\n\task(l,mid);\n\task(mid+1,r);\n\twork(l,mid,r);\n}\n```\n\n\u5176\u4e2d\u8c03\u7528 `ask(1,n)` \u540e\uff0c`cnt` \u8868\u793a\u6574\u4e2a\u6570\u5217\u7684\u9006\u5e8f\u5bf9\u6570\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u65e0\u8bba\u600e\u4e48\u7ffb\u8f6c\uff0c\u90fd\u6709\u4e00\u4e2a\u6027\u8d28\uff1a\n\n\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u539f\u6765\u7684\u9006\u5e8f\u5bf9\uff0c\u5982\u679c\u5b83\u7684\u4e24\u4e2a\u6570\u6709\u4e00\u4e2a\u4e0d\u5728\u7ffb\u8f6c\u8303\u56f4\u5185\uff0c\u5219\u8fd9\u4e2a\u9006\u5e8f\u5bf9\u4f9d\u7136\u5b58\u5728\uff0c\u53ea\u662f\u6539\u4e86\u4e00\u70b9\u4f4d\u7f6e\u3002\n\n\u6bd4\u5982\u8bf4\uff0c\u6709\u4e2a\u6570\u5217\u662f $4,3,2,1$\uff0c\u7ffb\u8f6c\u4ece $4$ \u5230 $2$ \u7684\u8303\u56f4\uff0c\u90a3\u4e48 $4$ \u548c $1$ \u7ec4\u6210\u7684\u9006\u5e8f\u5bf9\u4e0d\u4f1a\u6539\u53d8\u3002\n\n\u4f46\u662f\uff0c\u5728\u7ffb\u8f6c\u8303\u56f4\u5185\uff0c\u7ffb\u8f6c\u540e\u9006\u5e8f\u5bf9\u7684\u6570\u91cf\u7b49\u4e8e\u539f\u6765\u6b63\u5e8f\u5bf9\u7684\u6570\u91cf\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u5f88\u660e\u663e\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709 $m$ \u4e2a\u6570\u7684\u5b50\u4e32\uff0c\u91cc\u9762\u4e00\u5171\u6709 $\\dfrac{m\\times(m-1)}{2}$ \u4e2a\u6570\u5bf9\u3002\u56e0\u4e3a\u8fd9\u4e9b\u6570\u4e24\u4e24\u4e0d\u540c\uff0c\u6240\u4ee5\uff0c\u8bbe\u6709 $k$ \u4e2a\u9006\u5e8f\u5bf9\uff0c\u5219\u6709 $\\dfrac{m\\times(m-1)}{2}-k$ \u4e2a\u6b63\u5e8f\u5bf9\u3002\n\n\u7ffb\u8f6c\u8fc7\u540e\uff0c\u6b63\u5e8f\u5bf9\u548c\u9006\u5e8f\u5bf9\u5bf9\u8c03\uff0c\u5c31\u6709\u4e86\u4e0a\u9762\u7684\u6027\u8d28\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9996\u5148\u6c42\u51fa\u6570\u5217\u6ca1\u6709\u7ffb\u8f6c\u4e4b\u524d\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\u7684\u5947\u5076\u6027\u3002\u5982\u679c\u7ffb\u8f6c\u65f6\uff0c\u7ffb\u8f6c\u8303\u56f4\u5185\u7684\u6570\u5bf9\u6570\u91cf\uff08\u5c31\u662f $\\dfrac{(r-l+1)\\times(r-l)}{2}$\uff09\u662f\u5947\u6570\u7684\uff0c\u90a3\u4e48\u5947\u5076\u6027\u603b\u9006\u5e8f\u5bf9\u6570\u91cf\u7684\u5947\u5076\u6027\u5c31\u4f1a\u88ab\u6539\u53d8\uff0c\u65e0\u8bba\u7ffb\u8f6c\u8303\u56f4\u5185\u6709\u591a\u5c11\u9006\u5e8f\u5bf9\uff1b\u5426\u5219\u4e0d\u4f1a\u6539\u53d8\u3002\n\n\u8bbe\u6570\u5217\u957f\u5ea6\u4e3a $n$\uff0c\u64cd\u4f5c\u6b21\u6570\u4e3a $q$\uff0c\u5219\u6211\u4eec\u7684\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\operatorname{log}n+q)$\uff0c\u9876\u591a $20$ \u4e07\u5de6\u53f3\u3002\n\n### 2 \u4ee3\u7801\u4e0e\u8bb0\u5f55\n\n```cpp\n#include<cstdio>\nusing namespace std;\n#define max_n 1500\nint n;\nint a[max_n+2];\nint b[max_n+2];\nint cnt=0;\nint q;\nbool ans;\nvoid work(int l,int mid,int r){\n\tint i=l;\n\tint j=mid+1;\n\tint k=l;\n\twhile(i<=mid&&j<=r){\n\t\tif(a[i]<=a[j])b[k++]=a[i++];\n\t\telse{\n\t\t\tb[k++]=a[j++];\n\t\t\tcnt+=mid-i+1;\n\t\t}\n\t}\n\twhile(i<=mid)b[k++]=a[i++];\n\twhile(j<=r)b[k++]=a[j++];\n\tfor(i=l;i<=r;++i)a[i]=b[i];\n}\nvoid ask(int l,int r){\n\tif(l>=r)return;\n\tint mid=(l+r)>>1;\n\task(l,mid);\n\task(mid+1,r);\n\twork(l,mid,r);\n}\nint main(){\n\t#ifndef ONLINE_JUDGE\n\tfreopen(\"CF0911D_1.in\",\"r\",stdin);\n\tfreopen(\"CF0911D_1.out\",\"w\",stdout);\n\t#endif\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d\",a+i);\n\t}\n\task(1,n);\n\tif(cnt&1)ans=false;\n\telse ans=true;\n\tscanf(\"%d\",&q);\n\tfor(int i=1,l,r,x;i<=q;++i){\n\t\tscanf(\"%d%d\",&l,&r);\n\t\tx=r-l+1;\n\t\tif((x*(x-1)/2)&1)ans^=1;\n\t\tif(!ans)puts(\"odd\");\n\t\telse puts(\"even\");\n\t}\n\treturn 0;\n}\n```\n\n[\u8bb0\u5f55\u4f20\u9001\u95e8](https://www.luogu.com.cn/record/61991686)\n\nBy **dengziyue**",
        "postTime": 1636278566,
        "uid": 387840,
        "name": "happy_dengziyue",
        "ccfLevel": 6,
        "title": "CF911D\u9898\u89e3"
    },
    {
        "content": "## \u3010\u9898\u610f\u3011\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\n\n\u6bcf\u6b21\u64cd\u4f5c\u7ffb\u8f6c\u4e00\u4e2a\u533a\u95f4 $[l,r]$\n\n\u6c42**\u6bcf\u6b21**\u7ffb\u8f6c\u540e**\u6574\u4e2a\u5e8f\u5217**\u9006\u5e8f\u5bf9\u7684\u5947\u5076\u6027\n\n## \u3010\u601d\u8def\u5206\u6790\u3011\n\n\u9996\u5148\u770b\u5230\u7ffb\u8f6c\u533a\u95f4\u6211\u4eec\u53ef\u4ee5\u60f3\u5230Splay\u53ef\u4ee5\u80dc\u4efb\n\n\u770b\u5230\u9006\u5e8f\u5bf9\u53ef\u4ee5\u60f3\u5230\u5f52\u5e76\u6392\u5e8f\n\n\u4f46\u662f\u6839\u636e ~~\uff08CF\u7684\u9898\u76ee\u90fd\u662f\u601d\u7ef4\u9898\uff09~~ **\u65f6\u95f4\u590d\u6742\u5ea6**\u53ef\u4ee5\u5f88\u8f7b\u6613\u5730\u5224\u65ad\u51fa\u8fd9\u663e\u7136\u662f\u4e0d\u884c\u7684\n\n**\u8003\u8651\u8fd9\u9053\u9898\u76ee\u8ba9\u6211\u4eec\u6c42\u4ec0\u4e48**\n\n\u663e\u7136\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u6c42\u51fa\u9006\u5e8f\u5bf9\u7684\u6570\u76ee\uff0c\u800c\u53ea\u9700\u8981\u6c42\u5b83\u7684**\u5947\u5076\u6027**\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8981\u88ab\u7ffb\u8f6c\u7684\u533a\u95f4 $[l,r]$\n\n\u663e\u7136\u957f\u5ea6 $len=r-l+1$\n\n\u5176**\u5168\u90e8\u6570\u5bf9**\u7684\u6570\u76ee\u662f\uff1a$num=\\frac{len(len-1)}{2}$\n\n**\u5bf9\u4e8e\u8fd9\u4e2a\u533a\u95f4\uff1a**\n\n- **\u5176\u5168\u90e8\u7684\u6b63\u5e8f\u5bf9\u5728\u7ffb\u8f6c\u540e\u4f1a\u53d8\u6210\u9006\u5e8f\u5bf9**\n\n- **\u5176\u5168\u90e8\u7684\u9006\u5e8f\u5bf9\u5728\u7ffb\u8f6c\u540e\u4f1a\u53d8\u6210\u6b63\u5e8f\u5bf9**\n\n### \u91cd\u70b9\u6765\u4e86\n\n\u5982\u679c $num$ \u662f\u4e00\u4e2a\u5076\u6570\uff0c\u5206\u7c7b\u8ba8\u8bba\u5176\u9006\u5e8f\u5bf9\u7684\u5947\u5076\u6027\u7684\u4e24\u79cd\u60c5\u51b5\n\n- **\u5947\u6570**\uff0c\u90a3\u4e48\u5176\u6b63\u5e8f\u5bf9\u7684\u6570\u76ee\u4e5f\u662f**\u5947\u6570**\uff0c\u7ffb\u8f6c\u540e\u5947\u5076\u6027**\u4e0d\u53d8**\n\n- \u5076\u6570\uff0c\u663e\u7136\u7ffb\u8f6c\u540e\u5947\u5076\u6027\u4e0d\u53d8\n\n\u5982\u679c $num$ \u662f\u4e00\u4e2a\u5947\u6570\uff0c\u5176\u9006\u5e8f\u5bf9\u7684\u5947\u5076\u6027\u4e5f\u6709\u4e24\u79cd\u60c5\u51b5\n\n- **\u5947\u6570**\uff0c\u90a3\u4e48\u5176\u6b63\u5e8f\u5bf9\u7684\u6570\u76ee\u662f**\u5076\u6570**\uff0c\u7ffb\u8f6c\u540e\u5947\u5076\u6027**\u6539\u53d8**\n\n- **\u5076\u6570**\uff0c\u90a3\u4e48\u5176\u6b63\u5e8f\u5bf9\u7684\u6570\u76ee\u662f**\u5947\u6570**\uff0c\u7ffb\u8f6c\u540e\u5947\u5076\u6027**\u6539\u53d8**\n\n## \u3010\u603b\u7ed3\u3011\n**\u5982\u679c $num$ \u662f\u5076\u6570\uff0c\u90a3\u4e48\u4e0d\u7ba1\u600e\u6837\u5947\u5076\u6027\u90fd\u4e0d\u53d8\uff0c\u5982\u679c\u662f\u5947\u6570\uff0c\u90a3\u4e48\u4e0d\u7ba1\u600e\u4e48\u6837\u5947\u5076\u6027\u90fd\u4f1a\u6539\u53d8**\n\n## \u3010\u4ee3\u7801\u5b9e\u73b0\u3011\n\n```\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint a[500001],r[500001],len,ans,e,L,R,t,num;\nvoid msort(int s,int e){\n\tif(s==e) return;\n\tlong long int mid=(s+e)/2;\n\tmsort(s,mid);msort(mid+1,e);\n\tint i=s,j=mid+1,k=s;\n\twhile(i<=mid&&j<=e){\n\t\tif(a[i]<=a[j]){\n\t\t\tr[k]=a[i];\n\t\t\tk+=1;i+=1;\n\t\t}\n\t\telse{\n\t\t\tr[k]=a[j];\n\t\t\tk+=1;j+=1;\n\t\t\tans+=mid-i+1;\n\t\t}\n\t}\n\twhile(i<=mid){\n\t\tr[k]=a[i];\n\t\tk+=1;i+=1;\n\t}\n\twhile(j<=e){\n\t\tr[k]=a[j];\n\t\tk+=1;j+=1;\n\t}\n\tfor(int i=s;i<=e;i++)\n\t\ta[i]=r[i];\n}\nint main(){\n\tcin>>num;\n\tfor(int i=1;i<=num;i++){\n\t\tcin>>a[i];\n\t}\n\tmsort(1,num);\n\tif(ans%2==0) e=1;\n\tcin>>t;\n\twhile(t--){\n\t\tcin>>L>>R;\n\t\tlen=R-L+1;\n\t\tif(len*(len-1)/2%2){\n\t\t\te=!e;\n\t\t}\n\t\tcout<<(e?\"even\\n\":\"odd\\n\");\n\t}\n}\n```\n\n~~**\u4e3a\u4ec0\u4e48\u6211\u7684\u5f52\u5e76\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\u5047\u4e86QAQ**~~",
        "postTime": 1600161692,
        "uid": 215573,
        "name": "zythonc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF911D \u3010Inversion Counting\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u770b\u4f3c\u590d\u6742\u5176\u5b9e\u4e5f\u4e0d\u7b80\u5355\u7684\u601d\u7ef4\u9898\u3002\n\n------------\n\n\u5176\u5b9e\u601d\u8def\u5f88\u660e\u663e\u3002\n\n\u56e0\u4e3a\u8fd9\u9053\u9898\u7684\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5927\uff0c\u67091e5\u7684\u8be2\u95ee\uff0c\u5982\u679c\u66b4\u529b\uff08\u50cf\u6211\u8003\u573a\u4e0a\u90a3\u6837\u6253\u5e73\u8861\u6811\uff09\u7684\u8bdd\u53ef\u4ee5\u505a\u5230mnlogn\u3002\n\n\u4f46\u90a3\u6837\u4e5f\u662f\u7a33T\u3002\n\n\u7ecf\u8fc7\u601d\u8003\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u9053\u9898\u5fc5\u5b9a\u8981\u4f7f\u7528m\u7684\u89e3\u6cd5\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95eeO1\u6c42\u89e3\u3002\uff08\u603b\u4e0d\u53ef\u80fdmlogn\u6c42\u89e3\uff09\n\n\u90a3\u4e48\u600e\u4e48O1\u5462\uff1f\n\n------------\n\n\u4f17\u6240\u5468\u77e5\uff0cO1\u7b97\u6cd5\u81ea\u53e4\u4ee5\u6765\u5c31\u548c\u6570\u5b66\u8131\u4e0d\u5f00\u5173\u7cfb\u3002\n\n\u800c\u672c\u9898\u4e2d\u6709\u54ea\u4e9b\u91cf\u53ef\u4ee5\u626f\u4e0a\u6765\u641e\u4e00\u641e\u5462\uff1f\n\n\u5177\u4f53\u7684\u503c\uff1f\u80af\u5b9a\u4e0d\u73b0\u5b9e\u3002\n\n\u90a3\u4e5f\u5c31\u53ea\u5269\u4e0b\u533a\u95f4\u957f\u5ea6\u4e86\u3002\n\n------------\n\n\u9488\u5bf9\u533a\u95f4\u957f\u5ea6\u8fdb\u884c\u8003\u5bdf\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u7684\u4e00\u4ef6\u4e8b\uff1a\n\n\u5982\u679c\u533a\u95f4\u4e2d\u6570\u5bf9\u4e2a\u6570\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u7ffb\u8f6c\u4e4b\u540e\u7b54\u6848\u4e0d\u53d8\u3002\n\n\u5426\u5219\u53d8\u5316\u3002\n\n\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u5f88\u663e\u7136\uff0c\u7ffb\u8f6c\u64cd\u4f5c\u662f\u5177\u6709\u5c01\u95ed\u6027\u7684\u3002\u6362\u8a00\u4e4b\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u5916\u9762\u7684\u5143\u7d20\u3002\n\n\u800c\u6839\u636e\u6211\u4eec\u7684\u624b\u52a8\u6a21\u62df\uff0c\u7ffb\u8f6c\u540e\u9006\u5e8f\u5bf9\u4e2a\u6570=\u6570\u5bf9\u6570-\u7ffb\u8f6c\u524d\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002\n\n\u4e8e\u662f\u4e4e\u6b63\u89e3\u5c31\u51fa\u6765\u4e86\u3002\n\n------------\n\n\n\u6211\u4eec\u5148\u7528\u6811\u72b6\u6570\u7ec4\u641e\u4e00\u641e\u539f\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u8be2\u95ee\uff0c\u5f02\u6216\u4e00\u4e0b\u5224\u5947\u5076\u5373\u53ef\u3002\n\n------------\n\n\nAC\u4ee3\u7801\u5982\u4e0b\uff1a\n\n`797ms 24kb`\n\n```cpp\n// By Ilverene\n\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nnamespace StandardIO{\n\n\ttemplate<typename T>inline void read(T &x){\n\t\tx=0;T f=1;char c=getchar();\n\t\tfor(;c<'0'||c>'9';c=getchar())if(c=='-')f=-1;\n\t\tfor(;c>='0'&&c<='9';c=getchar())x=x*10+c-'0';\n\t\tx*=f;\n\t}\n\n\ttemplate<typename T>inline void write(T x){\n\t\tif(x<0)putchar('-'),x*=-1;\n\t\tif(x>=10)write(x/10);\n\t\tputchar(x%10+'0');\n\t}\n\n}\n\nusing namespace StandardIO;\n\nnamespace Solve{\n\n\t// Define your constants here.\n\tconst int N=1515;\n\n\t// Define your global variables here.\n\tint n,m,s=0,a[N],b[N];\n\t// Define your main functions here.\n\ttemplate<typename _Tp>inline _Tp query(_Tp x){\n\t    int res=0;\n\t    for(int i=x;i;i-=i&-i)res+=b[i];\n\t    return res;\n\t}\n\tvoid update(int x){\n\t\tfor(int i=x;i<=n;i+=i&-i)++b[i];\n\t}\n\t\n\tinline void solve(){\n\t\t// Write your main logic here.\n\t\tread(n);\n\t    for(int i=1;i<=n;++i)read(a[i]);\n\t    for(int i=n;i>=1;--i){\n\t        s=(s+query(a[i]-1))&1;\n\t        update(a[i]);\n\t    }\n\t    read(m);\n\t    while(m--){\n\t    \tint l,r;\n\t    \tread(l),read(r);\n\t        if(((r-l+1)*(r-l)/2)&1)s^=1,printf(s?\"odd\":\"even\");\n\t        else printf(s?\"odd\":\"even\");\n\t        putchar('\\n');\n\t    }\t\t\n\t}\n}\n\nusing namespace Solve;\n\nint main(){\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tsolve();\n}\n\n//\n```",
        "postTime": 1538827754,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF911D \u3010Inversion Counting\u3011"
    },
    {
        "content": "\u601d\u7ef4\u8981\u6c42\u6bd4\u8f83\u9ad8\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u628a\u539f\u56fe\u7684\u9006\u5e8f\u5bf9q\u7b97\u51fa\u6765\u3002\n\n\u8fd9\u4e2a\u6811\u72b6\u6570\u7ec4\u6216\u5f52\u5e76\u6392\u5e8f\u90fdok\uff08\u6811\u72b6\u6570\u7ec4\u4e0d\u7528\u79bb\u6563\u5316\u597d\u8bc4\uff09\n\n\u90a3\u4e48\u7ffb\u8f6c$[l,r]$\u4e2d\u7684\u6570\u600e\u4e48\u505a\u5462\uff1f\n\n\u66b4\u529b\u8fc7\u4e0d\u4e86\uff0c\u6211\u8bd5\u8fc7\u4e86\u3002\n\n\u8bbe$ t=r-l+1 $\u5373\u4e3a\u533a\u95f4\u957f\u5ea6\n\n\u90a3\u4e48\u533a\u95f4\u6570\u5bf9\u6570\u91cf\uff08\u770b\u597d\u662f\u6240\u6709\u6570\u5bf9\uff0c\u4e0d\u662f\u9006\u5e8f\u5bf9\uff09\u7684\u6570\u91cf\u5c31\u662f$  k =\\frac{n\\times(n-1)}{2}$\n\n\u65b9\u6cd5\u662f\u6211\u4eec\u5224\u65ad\u4e00\u4e0b\u6570\u91cfk\u7684\u5947\u5076\u6027\uff0c\u5982\u679c\u662f\u5947\u6570\u7684\uff0c\u90a3\u4e48\u5c31\u628a$ q $\u7684\u5947\u5076\u6027\u53d8\u4e00\u53d8\u3002\n\n\u7136\u540e\u5224\u65adq\u7684\u5947\u5076\u6027\u8f93\u51fa\u5c31\u884c\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u662f\u5bf9\u7684\u5462\uff1f\n\n\u9996\u5148\u7ffb\u8f6c\u533a\u95f4\u53ea\u5f71\u54cd\u5230\u4e86\u4e24\u4e2a\u6570\u90fd\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\u9762\u7684\u9006\u5e8f\u5bf9\uff0c\u4e0d\u5e72\u6d89\u5176\u4ed6\u7684\u6570\u5bf9\u3002 **\u7ffb\u8f6c\u533a\u95f4\u540e\uff0c\u9006\u5e8f\u5bf9\u53d8\u6210\u4e86\u6b63\u5e8f\u5bf9\uff0c\u6b63\u5e8f\u5bf9\u53d8\u6210\u4e86\u9006\u5e8f\u5bf9\u3002** \n\n\u90a3\u4e48\u5982\u679ck\u662f\u5076\u6570\uff0c\u90a3\u4e48\u65e0\u8bba\u533a\u95f4\u91cc\u9762\u7684\u9006\u5e8f\u5bf9\u7684\u5947\u5076\u6027\u5982\u4f55\uff0c\u7ffb\u8f6c\u540e\u5947\u5076\u6027\u90fd\u4e0d\u53d8\u3002\u6bd4\u5982k=8,\u533a\u95f4\u91cc\u9762\u7684\u9006\u5e8f\u5bf9\u6570\u91cfp=3\uff0c\u7ffb\u8f6c\u540e\u9006\u5e8f\u5bf9\u6570\u91cfp=5\uff0c\u4e0d\u6539\u53d8\u5947\u5076\u6027\u3002p\u4e3a\u5076\u6570\u65f6\u4e5f\u540c\u7406\u3002\n\n\u90a3\u4e48\u5982\u679ck\u662f\u5947\u6570\u5462\uff1f\u6bd4\u5982k=9, p=3\uff0c\u7ffb\u8f6c\u540ep=6\uff0c\u5947\u5076\u6027\u6539\u53d8\u4e86\u3002\u800cp\u4e3a\u5076\u6570\u65f6\u4e5f\u540c\u7406\u3002\n\n\u7efc\u4e0a\uff0c\u53ea\u8981\u533a\u95f4\u6570\u5bf9\u6570\u91cfk\u4e3a\u5947\u6570\uff0c\u539f\u5e8f\u5217\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\u5947\u5076\u6027\u5c31\u6539\u53d8\uff0c\u5426\u5219\u5219\u4e0d\u6539\u53d8\u3002\n\n\u4ee3\u7801\u633a\u4e11\uff0c\u5c31\u4e0d\u653e\u5728\u8fd9\u91cc\u4e86\uff0c\u5982\u679c\u60f3\u770b\u6765[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/noblex/p/9510814.html)\u770b\u5427\u3002",
        "postTime": 1534829279,
        "uid": 36281,
        "name": "noble_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF911D \u3010Inversion Counting\u3011"
    }
]