[
    {
        "content": "##### \u9898\u610f\u7b80\u8ff0\n\t\u7ed9\u4f60\u4e00\u4e2an\u4e2a\u70b9\uff0cm\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u8fde\u63a5\u70b9u\u3001v\uff0c\u5e76\u4e14\u6709\u4e2a\u957f\u5ea6w\u3002\n    \u6709q\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u4f60\u4e00\u5bf9t\u3001x,\u8868\u793a\u4ec5\u5f53\u524d\u8be2\u95ee\u4e0b\uff0c\u5c06t\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u4fee\u6539\u4e3ax,\u8bf7\u4f60\u8f93\u51fa\u5f53\u524d1\u5230n\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n\t\u6570\u636e\u8303\u56f4\n\n\t2 \u2264 n \u2264 2e5\n  \t1 \u2264 m, q \u2264 2e5 \n  \t1 \u2264 wi,xi \u2264 1e9\n    \n### \u9898\u76ee\u5206\u6790\n\t\u6211\u4eec\u5148\u4e0d\u8003\u8651\u4fee\u6539\uff0c\u8003\u8651\u7ed9\u51fa\u6307\u5b9a\u7684\u8fb9\uff0c\u6c42\u51fa\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\n    \u8bbe\u8fd9\u6761\u8fb9\u8fde\u63a5u,v,\u5f88\u5bb9\u6613\u60f3\u5230\u8fd9\u6837\u7684\u8bdd\u53ea\u9700\u8981\u4ece1\u4e0en\u5206\u522b\u8dd1\u4e00\u904dDijkstra,\u6700\u77ed\u8def\u957f\u5ea6\u5c31\u662f min(1\u5230u\u7684\u8ddd\u79bb+\u8fb9\u957f+v\u5230n\u7684\u8ddd\u79bb,1\u5230v\u7684\u8ddd\u79bb+\u8fb9\u957f+u\u5230n\u7684\u8ddd\u79bb)\u3002\n    \n    \u6211\u4eec\u53ef\u4ee5\u628a\u4fee\u6539\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a\n       *1.\u4fee\u6539\u7684\u8fb9\u57281\u5230n\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u7684\u957f\u5ea6\u53d8\u5927\u4e86\u3002\n       *2.\u4fee\u6539\u7684\u8fb9\u57281\u5230n\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u7684\u957f\u5ea6\u53d8\u5c0f\u4e86\u3002\n       *3.\u4fee\u6539\u7684\u8fb9\u4e0d\u57281\u5230n\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u7684\u957f\u5ea6\u53d8\u5927\u4e86\u3002\n       *4.\u4fee\u6539\u7684\u8fb9\u4e0d\u57281\u5230n\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u7684\u957f\u5ea6\u53d8\u5c0f\u4e86\u3002\n    \n    \u5f88\u5bb9\u6613\u77e5\u9053\uff1a\n    \t\u5bf9\u4e8e*2\uff0c \u539f\u6700\u77ed\u8def\u957f\u5ea6-\u539f\u8fb9\u957f+\u65b0\u8fb9\u957f \u5c31\u662f\u7b54\u6848\u3002\n    \t\u5bf9\u4e8e*3\uff0c \u539f\u6700\u77ed\u8def\u957f\u5ea6 \u5c31\u662f\u7b54\u6848\u3002\n    \t\u5bf9\u4e8e*4\uff0c \u7531\u524d\u9762\u7684\u601d\u8003\u5f97 min(\u539f\u6700\u77ed\u8def\u957f\u5ea6\uff0cmin(1\u5230u\u7684\u8ddd\u79bb+\u65b0\u8fb9\u957f+v\u5230n\u7684\u8ddd\u79bb,1\u5230v\u7684\u8ddd\u79bb+\u65b0\u8fb9\u957f+u\u5230n\u7684\u8ddd\u79bb) \u5c31\u662f\u7b54\u6848\u3002\n    \n    \u90fd\u662fO(1)\u5f97\u51fa\u7b54\u6848\n    \n    \n    \u4e8e\u662f\u53ea\u5269\u4e0b*1\u4e86\u3002\n    \u5bf9\u4e8e\u539f\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e9b\u7b80\u5355\u7684\u7ed3\u8bba\u3002\n    \u4ee4\u539f\u6700\u77ed\u8def\u4e3aE,\u5176\u8def\u5f84\u4e3aE1,E2,E3\u2026\u2026Ek.\n\t\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u662fE\u4e0a\u7684\u70b9u,1\u5230u\u7684\u6700\u77ed\u8def\u5fc5\u5b9a\u4f1a\u4f7f\u7528E\u7684\u4e00\u6bb5\u524d\u7f00\uff08\u53ef\u4ee5\u4e3a\u7a7a\uff09\u3002\n    \u4ee4\u8fd9\u4e2a\u524d\u7f00\u4e3aLu,1\u5230u\u7684\u6700\u77ed\u8def\u7ecf\u8fc7E1,E2,\u2026\u2026E(Lu)\u3002\n    \n    \u540c\u7406\u53ef\u5f97u\u5230n\u7684\u6700\u77ed\u8def\u5fc5\u5b9a\u4f1a\u4f7f\u7528E\u7684\u4e00\u6bb5\u540e\u7f00\uff08\u53ef\u4ee5\u4e3a\u7a7a\uff09\u3002\n    \u4ee4\u8fd9\u4e2a\u540e\u7f00\u4e3aRu,u\u5230n\u7684\u6700\u77ed\u8def\u7ecf\u8fc7E1,E2,\u2026\u2026E(Ru)\u3002\n    \n    \u7279\u522b\u5730\uff0c\u5bf9\u4e8eE\u4e0a\u7684\u70b9u\uff0c\u4ee4\u5176L\u4e3aE\u4e0a\u8fde\u63a5\u81ea\u5df1\u7684\u8fb9\u7684\u7f16\u53f7\uff0cR\u4e3a\u81ea\u5df1\u8fde\u5230\u4e0b\u4e00\u4e2aE\u4e0a\u70b9\u7684\u8fb9\u7684\u7f16\u53f7\n    \n##### \u89e3\u6cd5\n    \u5173\u4e8e\u5982\u4f55\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684L\u4e0eR,\u6211\u4eec\u53ef\u4ee5\u5148\u4ecen\u52301\u8dd1\u4e00\u904dDijkstra,\u6c42\u51faE\u7684\u8def\u5f84\u3002\n    \u7136\u540e\u5206\u522b\u4ece1\u5230n,n\u52301\u5404\u8dd1\u4e00\u904dDijkstra,\u8fc7\u7a0b\u4e2d\u5206\u522b\u66f4\u65b0\u6bcf\u4e2a\u975eE\u4e0a\u70b9\u7684L,R\u3002\n    \n    \u6709\u4e86\u6bcf\u4e2a\u70b9\u7684L,R\u540e\uff0c\u8003\u8651\u5982\u4f55\u89e3\u51b3*1\u3002\n    *1\u5c31\u662f\u6c42min(E\u7684\u957f\u5ea6-\u539f\u8fb9\u957f+\u65b0\u8fb9\u957f\uff0c\u4e0d\u7ecf\u8fc7\u4fee\u6539\u7684\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\u957f\u5ea6)\n    \n    \u95ee\u9898\u4ece\u800c\u8f6c\u5316\u6210\u5982\u4f55\u5feb\u901f\u6c42\u51fa \u4e0d\u7ecf\u8fc7E\u4e0a\u67d0\u6761\u8fb9\u7684\u6700\u77ed\u8def\u957f\u5ea6\n    \n    \u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u6811\u4e0a\u7684\u6bcf\u6bb5\u533a\u95f4 l,r \u7684\u503c\u8868\u793a \u6574\u4e2a\u56fe\u4e0d\u7ecf\u8fc7E\u4e0al\u5230r\u8fd9\u6bb5\u7684\u6700\u77ed\u8def\u957f\u5ea6\n    \n    \u6709\u4e86\u6bcf\u4e2a\u70b9\u7684L,R\u6211\u4eec\u5f88\u5bb9\u6613\u7528\u56fe\u4e2d\u975eE\u4e0a\u7684\u8fb9\u66f4\u65b0\u7ebf\u6bb5\u6811\n    \n    \u4f8b\u5982\uff1a\u4e00\u6761\u8fb9\u8fde\u63a5\u70b9u,v,\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u4e3alen\uff0c\n         \u6211\u4eec\u53ef\u4ee5\u628a\u6811\u4e0a Lu+1,Rv \u7684\u533a\u95f4\u7528len\u66f4\u65b0,\u6bd4\u4e2amin,\n         \u540c\u6837\u5730\uff0c\u53ef\u4ee5\u628a Lv+1,Ru \u7684\u533a\u95f4\u7528len\u66f4\u65b0\n         **\u7531\u4e8e\u4ee3\u7801\u4e2d\u70b91\u7684l,r\u4e3a0\uff0c\u4e14l=r,\u6240\u4ee5l\u8981\u52a01\n         **\u5982\u679c\u56fe\u65b9\u4fbf\uff0c\u53ef\u4ee5\u628al[1]=1,r[1]=0,\u6bcf\u4e2a\u70b9\u7684l\u6bd4r\u59271\n         **\u4e0d\u61c2\u7684\u8bdd\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u6bd4\u5212\u6bd4\u5212\n         \n    \u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u5728O(logn)\u7684\u65f6\u95f4\u5185\u56de\u7b54\u6bcf\u4e2a\u95ee\u9898\n    \u603b\u7684\u590d\u6742\u5ea6\u4e3aO((m+n+q)logn)\n    \n   ```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int MAXN=2e5+5;\nconst int MAXM=2e5+5;\nconst ll Inf=1e18;\n\nstruct Original_Edge{\n\tint u,v;ll len;\n}oe[MAXM];\nstruct Node{\n\tint pos;\n\tll dis;\n\tinline bool operator<(const Node &x)const{\n\t\treturn x.dis<dis;\n\t}\n}; \nstruct Edge{\n\tint id,to,nxt;\n\tll len;\n}e[MAXM<<1];\nint cnt,head[MAXN];\ninline void add_edge(int id,int u,int v,ll len){\n\te[++cnt].id=id;e[cnt].to=v;e[cnt].nxt=head[u];e[cnt].len=len;head[u]=cnt;\n}\nint n,m,q;\nint ind[MAXN];\nint lstvis[MAXN];\n\nint path_cnt,l[MAXN],r[MAXN];\nbool On_path[MAXN];\n\nll disS[MAXN],disT[MAXN];\npriority_queue<Node> pq;\n\nll t[MAXM<<4];\ninline void Dijkstra(int s,ll dis[],int f=0){\n\tfor(int i=1;i<=n;++i) dis[i]=Inf;\n\tdis[s]=0;\n\tpq.push((Node){s,0});\n\twhile(!pq.empty()){\n\t\tNode fa=pq.top();pq.pop();\n\t\t\n\t\tint x=fa.pos;\n\t\tif(fa.dis>dis[x]) continue;\n\t\tfor(int i=head[x],y;i;i=e[i].nxt){\n\t\t\ty=e[i].to;\n\t\t\tif(dis[y]>fa.dis+e[i].len){\n\t\t\t\tlstvis[y]=e[i].id;\n\t\t\t\tdis[y]=fa.dis+e[i].len;\n\t\t\t\tif(f==1&&!On_path[y]) l[y]=l[x];\n\t\t\t\tif(f==2&&!On_path[y]) r[y]=r[x];\n\t\t\t\tpq.push((Node){y,dis[y]});\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline void Trace(){\n\tOn_path[1]=true;\n\tl[1]=r[1]=0;\n\t\n\tint cur=1;\n\tfor(int i=1;cur!=n;++i){\n\t\tint Edge_id=lstvis[cur];\n\t\tind[Edge_id]=i;\n\t\t++path_cnt;\n\t\tcur=oe[Edge_id].u^oe[Edge_id].v^cur;\n\t\tOn_path[cur]=true;\n\t\tl[cur]=r[cur]=i;\n\t}\n}\n\ninline void Build(int k,int l,int r){\n\tt[k]=Inf;\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tBuild(k<<1,l,mid);\n\tBuild(k<<1|1,mid+1,r);\n}\ninline void Update(int k,int l,int r,int x,int y,ll v){\n\tif(x>y) return;\n\tif(x<=l&&r<=y){\n\t\tt[k]=min(t[k],v);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid) Update(k<<1,l,mid,x,y,v);\n\tif(y>mid) Update(k<<1|1,mid+1,r,x,y,v);\n}\n\ninline ll Query(int k,int l,int r,int x){\n\tif(l==r) return t[k];\n\tint mid=(l+r)>>1;\n\tll res=t[k];\n\tif(x<=mid) res=min(res,Query(k<<1,l,mid,x));\n\telse res=min(res,Query(k<<1|1,mid+1,r,x));\n\treturn res;\n}\nint main(){\n\tios::sync_with_stdio(0);\n\tcin>>n>>m>>q;\n\tfor(int i=1;i<=m;++i){\n\t\tcin>>oe[i].u>>oe[i].v>>oe[i].len;\n\t\tadd_edge(i,oe[i].u,oe[i].v,oe[i].len);\n\t\tadd_edge(i,oe[i].v,oe[i].u,oe[i].len);\n\t\tind[i]=-1;\n\t}\n\t\n\tDijkstra(n,disT);\n\tTrace();\n\tDijkstra(1,disS,1);\n\tDijkstra(n,disT,2);\n\n\tBuild(1,1,path_cnt);\n\tfor(int i=1;i<=m;++i){\n\t\tif(ind[i]==-1){\n\t\t\tUpdate(1,1,path_cnt,l[oe[i].u]+1,r[oe[i].v],disS[oe[i].u]+oe[i].len+disT[oe[i].v]);\n\t\t\tUpdate(1,1,path_cnt,l[oe[i].v]+1,r[oe[i].u],disS[oe[i].v]+oe[i].len+disT[oe[i].u]);\n\t\t}\n\t}\n\tfor(int i=1;i<=q;++i){\n\t\tint Edge_id;ll New_len,ans=disS[n];\n\t\tcin>>Edge_id>>New_len;\n\t\tif(ind[Edge_id]!=-1){\n\t\t\tans=disS[n]-oe[Edge_id].len+New_len;\n\t\t\tif(New_len>oe[Edge_id].len)\n\t\t\t\tans=min(ans,Query(1,1,path_cnt,ind[Edge_id]));\n\t\t}\n\t\telse{\n\t\t\tif(New_len<oe[Edge_id].len){\n\t\t\t\tans=min(ans,disS[oe[Edge_id].u]+New_len+disT[oe[Edge_id].v]);\n\t\t\t\tans=min(ans,disS[oe[Edge_id].v]+New_len+disT[oe[Edge_id].u]);\n\t\t\t}\n\t\t}\n\t\tcout<<ans<<endl;\n\t} \n\treturn 0;\n}\n```\n",
        "postTime": 1557636754,
        "uid": 36220,
        "name": "LIdox1536513344",
        "ccfLevel": 0,
        "title": "CF1163F Indecisive Taxi Fee"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u4e00\u4e2a\u53ea\u9700\u8981\u4e24\u6b21\u6700\u77ed\u8def\uff0c\u4e0d\u9700\u8981\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u3002\n\n\u5148\u4efb\u610f\u627e\u51fa\u4e00\u6761 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u3002\n\n\u5982\u679c\u4fee\u6539\u7684\u8fb9\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u7b54\u6848\u4e3a min(\u539f\u6765\u7684\u6700\u77ed\u8def\uff0c\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\uff09\u3002\n\n\u5982\u679c\u4fee\u6539\u7684\u8fb9\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u7b54\u6848\u4e3a min\uff08\u539f\u6700\u77ed\u8def + \u65b0\u8fb9\u6743 - \u539f\u8fb9\u6743\uff0c\u4e0d\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\uff09\u3002\n\n\u7ecf\u8fc7\u8fb9 $(u,v)$ \u7684\u6700\u77ed\u8def\u5f88\u5bb9\u6613\u6c42\uff0c\u5373\u4e3a $min(d_{1,u}+d_{v,n},d_{1,v}+d_{u,n})+w_{u,v}$\u3002\n\n\u73b0\u5728\u53ea\u9700\u8981\u6c42\u5220\u6389\u539f\u6700\u77ed\u8def\u4e0a\u67d0\u6761\u8fb9\u4e4b\u540e\u7684\u6700\u77ed\u8def\u3002\n\n\u8bbe\u627e\u51fa\u7684\u6700\u77ed\u8def\u4e3a $E$\uff0c\u5171\u6709 $k$ \u6761\u8fb9\uff0c\u5206\u522b\u4e3a $e_1,e_2...e_k$\u3002\n\n\u7ed3\u8bba\uff1a\u5220\u6389\u4efb\u610f\u4e00\u6761\u8fb9\u540e\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u6761 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u6709\u4e00\u4e2a\u524d\u7f00\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\u548c $E$ \u91cd\u5408\uff0c\u6709\u4e00\u4e2a\u540e\u7f00\uff08\u4e5f\u53ef\u80fd\u4e3a\u7a7a\uff09\u548c $E$ \u91cd\u5408\uff0c\u4e2d\u95f4\u7684\u90e8\u5206\u90fd\u4e0d\u5728 $E$ \u4e0a\u3002\n\n\u8bc1\u660e\uff1a\u5047\u8bbe $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u6709\u591a\u6bb5\u4e0d\u5728 $E$ \u4e0a\uff0c\u8bbe\u4e3a $1\\to a\\to b\\to c\\to d\\to n$\uff0c\u5176\u4e2d $a\\to b$ \u548c $c\\to d$ \u90fd\u4e0d\u5728 $E$ \u4e0a\uff0c\u5176\u5b83\u90e8\u5206\u90fd\u5728 $E$ \u4e0a\u3002\u7531\u5047\u8bbe\u53ef\u77e5 $a,b,c,d$ \u90fd\u662f $E$ \u4e0a\u7684\u70b9\u3002\u56e0\u4e3a\u53ea\u4f1a\u5220\u4e00\u6761\u8fb9\uff0c\u6240\u4ee5 $E$ \u4e0a $a\\to b$ \u548c $c\\to d$ \u7684\u8def\u5f84\u4e00\u5b9a\u53ea\u6709\u81f3\u591a\u4e00\u6bb5\u6709\u8fb9\u88ab\u5220\u3002\u4e0d\u59a8\u8bbe $a\\to b$ \u6709\u8fb9\u88ab\u5220\uff0c\u90a3\u4e48 $1\\to a\\to b\\to n$\uff08\u5176\u4e2d $a\\to b$ \u4e0d\u5728 $E$ \u4e0a\uff09\u5c31\u662f\u4e00\u6761\u7b26\u5408\u4e0a\u8ff0\u7ed3\u8bba\u7684\u6700\u77ed\u8def\u3002\u56e0\u4e3a\u5c06 $c\\to d$ \u66ff\u6362\u4e3a $E$ \u4e0a\u7684\u8def\u5f84\u4e00\u5b9a\u4e0d\u4f1a\u4f7f\u7b54\u6848\u53d8\u5927\u3002\n\n\u6211\u4eec\u679a\u4e3e\u4e0d\u5728 $E$ \u4e0a\u7684\u8fb9 $(u,v)$\uff0c\u7528\u7ecf\u8fc7\u8fb9 $(u,v)$ \u7684\u6700\u77ed\u8def\u66f4\u65b0\u7b54\u6848\u3002\u7531\u7ed3\u8bba\u53ef\u77e5\uff0c\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u60c5\u51b5\u6ee1\u8db3 $1\\to u$ \u548c $E$ \u53ea\u6709\u4e00\u4e2a\u524d\u7f00\u91cd\u5408\uff0c $v\\to n$ \u548c $E$ \u53ea\u6709\u4e00\u4e2a\u540e\u7f00\u91cd\u5408\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $x$\uff0c\u8bbe $l_x$ \u8868\u793a\u6700\u5c0f\u7684 $i$\uff0c\u4f7f\u5f97\u5728\u67d0\u6761 $1\\to x$ \u7684\u6700\u77ed\u8def\u4e0a\uff0c$e_i$ \u662f\u7b2c\u4e00\u6761 $E$ \u4e0a\u7684\u4e0d\u5728\u5176\u4e2d\u7684\u8fb9\u3002\u8bbe $r_x$ \u8868\u793a\u6700\u5927\u7684 $i$\uff0c\u4f7f\u5f97\u5728\u67d0\u6761 $x\\to n$ \u7684\u6700\u77ed\u8def\u4e0a\uff0c$e_i$ \u662f\u6700\u540e\u4e00\u6761 $E$ \u4e0a\u7684\u4e0d\u5728\u5176\u4e2d\u7684\u8fb9\u3002\n\n\u6ce8\u610f\u8fd9\u91cc $l_x$ \u548c $r_x$ \u7684\u5b9a\u4e49\u548c\u5927\u90e8\u5206\u7f51\u4e0a\u7684\u9898\u89e3\u4e0d\u540c\u3002\u5927\u90e8\u5206\u9898\u89e3\u4e2d $l_x$ \u662f\u4efb\u610f\u4e00\u4e2a $i$\uff0c\u800c\u4e0d\u662f\u6700\u5c0f\u7684 $i$\u3002\u5982\u679c\u6709\u4eba\u4f1a\u8bc1\u660e\u5176\u5b83\u9898\u89e3\u505a\u6cd5\u7684\u6b63\u786e\u6027\u6216\u8005\u4f1a\u6784\u9020 hack \u6570\u636e\uff0c\u6b22\u8fce\u5728\u8bc4\u8bba\u533a\u56de\u590d\u3002\n\n\u5982\u4f55\u6c42 $l_x$ \u548c $r_x$\uff1f\u9996\u5148\u4ee5 $1$ \u548c $n$ \u4e3a\u6e90\u70b9\uff0c\u5206\u522b\u6c42\u4e00\u904d\u6700\u77ed\u8def\uff0c\u7136\u540e\u627e\u51fa\u4e00\u6761\u6700\u77ed\u8def $E$\u3002\u5bf9\u4e8e $E$ \u4e0a\u7684\u7b2c $i$ \u4e2a\u70b9 $x$\uff0c\u521d\u59cb\u5316 $l_x=i,r_x=i-1$\u3002\n\n\u4ee5 $l$ \u4e3a\u4f8b\uff0c\u6309\u7167\u6700\u77ed\u8def\u7684\u987a\u5e8f dp\uff0c\u82e5\u8fb9 $(u,v)$ \u6ee1\u8db3 $d_{1,u}+w_{u,v}=d_{1,v}$\uff0c\u5219 $l_v=\\min(l_v,l_u)$\u3002\u53ef\u4ee5\u5c06\u70b9\u6309 $d$ \u503c\u6392\u5e8f\uff0c\u5c31\u4e0d\u7528\u91cd\u65b0\u8dd1\u6700\u77ed\u8def\u4e86\u3002\n\n\u56e0\u4e3a\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u60c5\u51b5\u6ee1\u8db3 $1\\to x$ \u548c $E$ \u53ea\u6709\u4e00\u4e2a\u524d\u7f00\u91cd\u5408\uff0c\u6240\u4ee5\u4e0d\u4f7f\u7528 $E$ \u4e0a\u7684\u8fb9\u66f4\u65b0 dp \u503c\uff08\u8fd9\u91cc\u4e5f\u548c\u5176\u5b83\u9898\u89e3\u4e0d\u540c\uff0c\u5176\u5b83\u9898\u89e3\u662f\u4e0d\u5bf9 $E$ \u4e0a\u7684\u70b9\u66f4\u65b0 dp \u503c\uff09\u3002\n\n\u8bbe $a_i$ \u4e3a\u5220\u6389 $e_i$ \u4e4b\u540e\u7684\u7b54\u6848\u3002\n\n\u6c42\u51fa $l$ \u548c $r$ \u4ee5\u540e\uff0c\u679a\u4e3e\u4e0d\u5728 $E$ \u4e0a\u7684\u8fb9 $(u,v)$\uff0c\u7528 $d_{1,u}+w_{u,v}+d_{v,n}$ \u66f4\u65b0 $[a_{l_u},a_{r_v}]$\uff0c\u7528 $d_{1,v}+w_{u,v}+d_{u,n}$ \u66f4\u65b0 $[a_{l_v},a_{r,u}]$\u3002\u9700\u8981\u652f\u6301\u533a\u95f4\u53d6 min\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u56e0\u4e3a\u67e5\u8be2\u90fd\u5728\u4fee\u6539\u4e4b\u540e\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528 multiset \u7ef4\u62a4\uff0c\u5728\u5de6\u7aef\u70b9\u63d2\u5165\uff0c\u53f3\u7aef\u70b9\u5220\u9664\uff0c\u67e5\u8be2\u6700\u5c0f\u503c\u5373\u53ef\u3002\u6ce8\u610f\u53bb\u6389\u5de6\u7aef\u70b9\u5927\u4e8e\u53f3\u7aef\u70b9\u7684\u60c5\u51b5\u3002\n\n\u81f3\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u6b63\u786e\u6027\u5e94\u8be5\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log n+q)$ \u7684\u505a\u6cd5\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=4e5+3;\nusing ll=long long;\nusing ar=int[N];\nar he,to,len,ne,u,v,w,l,r,c,p;\nll d1[N],dn[N],a[N];\nbool b[N];\nint t=1;\npriority_queue<pair<ll,int>>q;\nbasic_string<ll>g[N],h[N];\nmultiset<ll>s;\nvoid add(int x,int y,int z){ne[++t]=he[x],to[t]=y,len[t]=z,he[x]=t;}\nvoid dij(int s,ll*d){\n\tint i,j,k;\n\tll l;\n\tmemset(d,9,N*8),d[s]=0,q.push({0,s}),memset(b,0,N);\n\twhile(!q.empty()){\n\t\tif(i=q.top().second,q.pop(),b[i])continue;\n\t\tfor(b[i]=1,j=he[i];j;j=ne[j])if(d[k=to[j]]>(l=d[i]+len[j]))d[k]=l,q.push({-l,k});\n\t}\n}\nint main(){\n\tint n,m,q,i,j,k;\n\tll o;\n\tscanf(\"%d%d%d\",&n,&m,&q),memset(a,9,N*8),memset(l,9,N*4);\n\tfor(i=1;i<=m;++i)scanf(\"%d%d%d\",u+i,v+i,w+i),add(u[i],v[i],w[i]),add(v[i],u[i],w[i]);\n\tdij(1,d1),dij(n,dn);\n\tfor(i=1,t=0;l[i]=t+1,r[i]=t,i!=n;i=k,p[j/2]=++t)for(j=he[i];dn[k=to[j]]+len[j]!=dn[i];j=ne[j]);\n\tfor(i=1;i<=n;++i)c[i]=i;\n\tfor(sort(c+1,c+n+1,[](int x,int y){return d1[x]<d1[y];}),i=1;i<=n;++i)for(j=he[c[i]];j;j=ne[j])if(!p[j/2]&&d1[k=to[j]]==d1[c[i]]+len[j])l[k]=min(l[k],l[c[i]]);\n\tfor(sort(c+1,c+n+1,[](int x,int y){return dn[x]<dn[y];}),i=1;i<=n;++i)for(j=he[c[i]];j;j=ne[j])if(!p[j/2]&&dn[k=to[j]]==dn[c[i]]+len[j])r[k]=max(r[k],r[c[i]]);\n\tfor(i=1;i<=m;++i)if(!p[i]){\n\t\tif(l[j=u[i]]<=r[k=v[i]])o=d1[j]+w[i]+dn[k],g[l[j]]+=o,h[r[k]]+=o;\n\t\tif(l[k]<=r[j])o=d1[k]+w[i]+dn[j],g[l[k]]+=o,h[r[j]]+=o;\n\t}\n\tfor(i=1;i<=t;++i){\n\t\tfor(ll o:g[i])s.insert(o);\n\t\tif(s.size())a[i]=*s.begin();\n\t\tfor(ll o:h[i])s.erase(s.find(o));\n\t}\n\twhile(q--){\n\t\tscanf(\"%d%d\",&i,&j);\n\t\tif(p[i])printf(\"%lld\\n\",min(d1[n]+j-w[i],a[p[i]]));\n\t\telse printf(\"%lld\\n\",min(d1[n],min(d1[u[i]]+dn[v[i]],d1[v[i]]+dn[u[i]])+j));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1615602971,
        "uid": 221955,
        "name": "panyf",
        "ccfLevel": 10,
        "title": "CF1163F Indecisive Taxi Fee\uff08\u5220\u8fb9\u6700\u77ed\u8def\uff09"
    },
    {
        "content": "\u5047\u8bbe\u4e0d\u7ecf\u8fc7\u8fb9 $t$ \u7684\u6700\u77ed\u8def\u4e3a $D_t$\uff0c\u7ecf\u8fc7\u7684\u4e3a $B_t$\uff0c\u90a3\u4e48\u7b54\u6848\u663e\u7136\u4e3a $\\min(D_t,B_t-w_t+x)$\u3002\u6211\u4eec\u53ea\u8981\u5bf9\u6bcf\u6761\u8fb9\u628a\u8fd9\u4e24\u8005\u6c42\u51fa\u6765\u5373\u53ef\u3002\n\ndij \u6c42\u51fa $1\\to n$ \u7684\u4efb\u610f\u4e00\u6761\u6700\u77ed\u8def $p_{1\\sim s}$\uff0c\u5982\u679c $t$ \u4e0d\u5728\u5176\u4e0a\u7684\u8bdd\uff0c\u663e\u7136\u5fc5\u6709 $D_t=\\mathrm{dis}(1,n)$\uff0c$B_t=\\min(\\mathrm{dis}(1,a_t)+w_t+\\mathrm{dis}(b_t,n),\\mathrm{dis}(1,b_t)+w_t+\\mathrm{dis}(a_t,n))$\u200b\u200b\uff0c\u200b\u800c $\\mathrm{dis}(1,\\cdot),\\mathrm{dis}(\\cdot,n)$ \u53ef\u4ee5\u4e24\u904d dij \u6c42\u51fa\u3002\u5982\u679c $t$ \u5728\u5176\u4e0a\uff0c\u90a3\u4e48\u663e\u7136 $B_t=\\mathrm{dis}(1,n)$\uff0c\u800c $D_t$ \u662f\u6574\u5f20\u56fe\u5220\u6389 $t$ \u4e4b\u540e\u7684\u6700\u77ed\u8def\uff08\u4e8b\u91cd\u5934\u620f\uff09\u3002\n\n\u4e0b\u9762\u6765\u4ecb\u7ecd\u4e00\u4e0b\u5220\u8fb9\u6700\u77ed\u8def\u7684\u79d1\u6280\uff08\u79f0\u4e3a\u79d1\u6280\u662f\u56e0\u4e3a\u611f\u89c9\u51ed\u81ea\u5df1\u60f3\u4e0d\u51fa\u6765/kk\uff09\u3002\u9996\u5148\uff0c$p$ \u65e2\u662f $1\\to n$ \u7684\u6700\u77ed\u8def\u4e5f\u4e8b $n\\to 1$ \u7684\u6700\u77ed\u8def\uff0c\u56fa\u5b9a\u4f4f\u5b83\u53ea\u8003\u8651\u5220\u5176\u4e0a\u7684\u8fb9\u3002\u663e\u7136\u6709\u7ed3\u8bba\uff1a$1\\to x$\u200b \u7684\u6240\u6709\u6700\u77ed\u8def\u4e2d\u5fc5\u5b9a\u5b58\u5728\u4e00\u6761\u4e0e $p$ \u5171\u4eab\u4e14\u4ec5\u5171\u4eab\u4e00\u4e2a\u524d\u7f00\uff08\u53ef\u4ee5\u53d6\u6700\u540e\u4e00\u4e2a\u4ea4\u70b9\uff0c\u4e5f\u53ef\u7528\u6700\u77ed\u8def\u751f\u6210\u6811\u8bc1\uff09\uff0c$x\\to n$\u3001\u540e\u7f00\u4e5f\u5982\u6b64\u3002\u5047\u8bbe\u524d\u540e\u7f00\u7aef\u70b9\u5728 $p$ \u4e0a\u7684\u4e0b\u6807\u4e3a $pre_x,suf_x$\uff0c\u8fd9\u663e\u7136\u53ef\u4ee5\u5efa\u51fa\u6700\u77ed\u8def\u6811 dfs \u4e00\u904d\u6c42\u51fa\u3002\u4f46\u8981\u6c42 $1$ \u4e3a\u8d77\u70b9\u3001$n$ \u4e3a\u8d77\u70b9\u7684\u6700\u77ed\u8def\u6811\u4e2d $1\\leftrightarrow n$ \u8def\u5f84\u90fd\u662f $p$\uff0c\u8fd9\u53ef\u4ee5\u5728\u5efa $n$ \u6811\u65f6\u5bf9\u4e8e\u6700\u77ed\u8def\u4e0a\u7684\u70b9\u5f3a\u5236\u8fde\u8fb9\u3002\n\n\u4ee5\u53ca\u663e\u7136\u5730\uff0c\u5220\u9664 $t$ \u540e\u7684\u6700\u77ed\u8def\u4e00\u5b9a\u662f\u5148\u5171\u4eab $p$ \u7684\u4e00\u6bb5\u524d\u7f00\uff08\u4f46\u4e0d\u8de8\u8fc7 $t$\uff09\uff0c\u7136\u540e\u817e\u7a7a\u4e00\u6bb5\u5f27\u7ed5\u8fc7 $t$\uff0c\u6700\u540e\u56de\u5230 $p$ \u4e0a\u5171\u4eab $p$ \u7684\u540e\u7f00\uff08\u5f88\u597d\u8bc1\uff0c$t$ \u4e24\u8fb9\u53d6\u6700\u8fdf\u3001\u65e9\u7684\u4ea4\u70b9\u8c03\u6574\uff09\u3002\u63a5\u4e0b\u6765\u662f\u6700\u5173\u952e\u7684\u7ed3\u8bba\uff1a\u4e2d\u95f4\u8fd9\u6bb5\u817e\u7a7a\u7684\u5f27\u91cc\uff0c\u6070\u597d\u6709\uff08\u663e\u7136\u81f3\u5c11\u6709\uff09\u4e00\u6761\u975e\u6700\u77ed\u8def\u6811\u8fb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8bbe\u5f27\u7684\u4e24\u7aef\u5728 $p$ \u4e0a\u7684\u4e0b\u6807\u4e3a $x,y$\uff0c\u6070\u597d\u5b58\u5728\u8fb9 $e$ \u4f7f\u5f97 $pre_{a_e}=x,suf_{b_e}=y$\uff08\u5f53\u7136 $a,b$ \u6709\u53ef\u80fd\u4e92\u6362\uff09\u3002\n\n\u8003\u8651\u53cd\u8bc1\u3002\u5047\u8bbe\u6709\u81f3\u5c11\u4e24\u6761\u975e\u6811\u8fb9\uff0c\u53d6\u4efb\u610f\u76f8\u90bb\u7684\u4e24\u6761 $e,f$\u200b\u200b\uff0c\u200b\u5982\u4e0b\u56fe\uff1a\n\n![](https://z3.ax1x.com/2021/11/15/IghFhV.png)\n\n\u6211\u4eec\u8003\u8651 $1\\to b_e$ \u7684\u6700\u77ed\u8def\uff0c$pre_{b_e}$ \u5fc5\u7136\u4e0d\u53ef\u80fd\u5728 $t$ \u5de6\u4fa7\uff0c\u90a3\u6837\u76f4\u63a5\u8d70 $1\\to b_e$ \u7684\u6700\u77ed\u8def\u800c\u975e $1\\to a_e\\overset{e}{\\to} b_e$ \u663e\u7136\u4f1a\u66f4\u4f18\uff1b$n\\to a_f$ \u4e5f\u4e8b\u5982\u6b64\uff0c$suf_{a_f}$ \u4e00\u5b9a\u5728 $t$ \u5de6\u4fa7\u3002\u5982\u4e0b\u56fe\uff1a\n\n![](https://z3.ax1x.com/2021/11/15/IgHdsK.png)\n\n\u8003\u8651\u8bc1\u660e\u8fd9\u79cd\u60c5\u51b5\u4e0d\u5b58\u5728\u3002\u6211\u4eec\u77e5\u9053 $D$\u200b \u662f\u4e24\u7aef\u7684\u6700\u77ed\u8def\uff08\u56e0\u4e3a $e,f$\u200b \u4e4b\u95f4\u4e0d\u518d\u6709\u975e\u6811\u8fb9\uff09\uff0c\u8ddf\u636e\u6700\u77ed\u8def\u7684\u62fc\u63a5\u5b9a\u7406\u53ef\u77e5 $\\mathrm{dis}(1,a_f)=D+\\mathrm{dis}(1,b_e)=\\mathrm{dis}(1,suf_{a_f})+C+B+D$\u200b\u3002\u800c\u53e6\u4e00\u6761\u8def $\\mathrm{dis}(1,suf_{a_f})+A$\u200b \u4e0d\u662f\u6700\u77ed\u8def\uff0c\u8bf4\u660e $C+B+D\\leq A$\u200b\u3002\u540c\u7406\uff0c\u8003\u8651 $b_e\\to n$\u200b \u6700\u77ed\u8def\u53ef\u5f97 $C+A+D\\leq B$\u200b\u3002\u53ef\u77e5 $A-B$\u200b \u548c $B-A$\u200b \u90fd\u5927\u4e8e\u7b49\u4e8e $C+D$\u200b\uff0c\u800c $C+D$\u200b \u4e8b\u6b63\u6570\uff0c\u4e8b\u4e0d\u53ef\u80fd\u540c\u65f6\u88ab\u4e00\u4e2a\u6570\u548c\u5b83\u7684\u76f8\u53cd\u6570\u5927\u4e8e\u7b49\u4e8e\u7684\uff0c\u77db\u76fe\uff01\u8bc1\u6bd5\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u679a\u4e3e\u6240\u6709\u975e $p$\u200b \u4e2d\u8fb9\u4f5c\u4e3a\u5f27\u4e0a\u7684\u552f\u4e00\u975e\u6811\u8fb9 $e$\u200b\uff0c\u8d21\u732e\u5230 $p$\u200b \u4e0a\u7684\u4e0b\u6807\u533a\u95f4 $[pre_{a_e},suf_{b_e}]$\u200b\uff0c\u8d21\u732e\u503c\u4e3a $\\mathrm{dis}(1,a_e)+w_e+\\mathrm{dis}(b_e,n)$\u200b\uff1b\u4ee5\u53ca\u9700\u8981\u4ea4\u6362 $a,b$ \u518d\u505a\u4e00\u6b21\u3002\u8fd9\u53ef\u4ee5\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u4e8b\u9759\u6001\u7684\u53ef\u4ee5\u76f4\u63a5\u5dee\u5206 multiset\u3002\u4e8e\u662f\u5220\u8fb9\u6700\u77ed\u8def\u5c31\u505a\u5b8c\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define mp make_pair\n#define X first\n#define Y second\n#define pb push_back\nconst int inf=0x3f3f3f3f3f3f3f3f;\nconst int N=2e5+10;\nint n,m,qu;\nint a[N],b[N],w[N];\nvector<pair<int,int> > nei[N];\nint d1[N],dn[N];\nint vis[N];\nvoid dij(int st,int d[]){\n\tfor(int i=1;i<=n;i++)d[i]=inf;\n\tmemset(vis,0,sizeof(vis));\n\tpriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q;\n\tq.push(mp(d[st]=0,st));\n\twhile(q.size()){\n\t\tint x=q.top().Y;q.pop();\n\t\tif(vis[x])continue;vis[x]=true;\n\t\tfor(int i=0;i<nei[x].size();i++){\n\t\t\tint y=nei[x][i].X,len=w[nei[x][i].Y];\n\t\t\tif(d[x]+len<d[y])d[y]=d[x]+len,q.push(mp(d[y],y));\n\t\t}\n\t}\n}\nint fa1[N];\nvector<int> son1[N],sonn[N];\nint ord[N];\nbool cmp(int x,int y){return d1[x]<d1[y];}\nbool cmp0(int x,int y){return dn[x]<dn[y];}\nvector<int> ton;int id[N];\nint pre[N],suf[N];\nvoid dfs(int x,int las,int p[],vector<int> vec[]){\n\tif(~id[x])las=id[x];\n\tp[x]=las;\n\tfor(int i=0;i<vec[x].size();i++){\n\t\tint y=vec[x][i];\n\t\tdfs(y,las,p,vec);\n\t}\n}\nint del_dis[N];\nvector<int> add[N],del[N];\nsigned main(){\n\tcin>>n>>m>>qu;\n\tfor(int i=1;i<=m;i++)scanf(\"%lld%lld%lld\",a+i,b+i,w+i),nei[a[i]].pb(mp(b[i],i)),nei[b[i]].pb(mp(a[i],i));\n\tdij(1,d1),dij(n,dn);\n\tfor(int i=1;i<=n;i++)ord[i]=i;\n\tsort(ord+1,ord+n+1,cmp);\n\tfor(int _i=2;_i<=n;_i++){\n\t\tint i=ord[_i];\n\t\tfor(int j=0;j<nei[i].size();j++){\n\t\t\tint x=nei[i][j].X,len=w[nei[i][j].Y];\n\t\t\tif(d1[x]+len==d1[i]){fa1[i]=x,son1[x].pb(i);break;}\n\t\t}\n\t}\n\tint x=n;\n\twhile(true){\n//\t\tif(n==2e5)cout<<x<<\"!!\\n\";\n\t\tton.pb(x);\n\t\tif(x==1)break;\n\t\tx=fa1[x];\n\t}\n\treverse(ton.begin(),ton.end());\n\tmemset(id,-1,sizeof(id));\n\tfor(int i=0;i<ton.size();i++)id[ton[i]]=i;\n\tdfs(1,-1,pre,son1);\n\tsort(ord+1,ord+n+1,cmp0);\n\tfor(int _i=2;_i<=n;_i++){\n\t\tint i=ord[_i];\n\t\tif(~id[i])sonn[ton[id[i]+1]].pb(i);\n\t\telse for(int j=0;j<nei[i].size();j++){\n\t\t\tint x=nei[i][j].X,len=w[nei[i][j].Y];\n\t\t\tif(dn[x]+len==dn[i]){sonn[x].pb(i);break;}\n\t\t}\n\t}\n\tdfs(n,-1,suf,sonn);\n\tmemset(vis,-1,sizeof(vis));\n\tfor(int i=0;i+1<ton.size();i++){\n\t\tint x=ton[i],y=ton[i+1];\n\t\tfor(int j=0;j<nei[x].size();j++){\n\t\t\tint z=nei[x][j].X,len=w[nei[x][j].Y];\n\t\t\tif(z==y&&d1[x]+len==d1[y]){vis[nei[x][j].Y]=i;break;}\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)if(!~vis[i]){\n\t\tint l=pre[a[i]],r=suf[b[i]],v=d1[a[i]]+w[i]+dn[b[i]];\n\t\tif(l<r)add[l].pb(v),del[r].pb(v);\n\t\tswap(a[i],b[i]);\n\t\tl=pre[a[i]],r=suf[b[i]],v=d1[a[i]]+w[i]+dn[b[i]];\n\t\tif(l<r)add[l].pb(v),del[r].pb(v);\n\t}\n\tmultiset<int> st;\n\tfor(int i=0;i+1<ton.size();i++){\n\t\tfor(int j=0;j<add[i].size();j++)st.insert(add[i][j]);\n\t\tfor(int j=0;j<del[i].size();j++)st.erase(st.find(del[i][j]));\n\t\tdel_dis[i]=st.empty()?inf:*st.begin();\n\t}\n\twhile(qu--){\n\t\tint x,v;\n\t\tscanf(\"%lld%lld\",&x,&v);\n\t\tif(!~vis[x])printf(\"%lld\\n\",min(d1[n],min(d1[a[x]]+v+dn[b[x]],d1[b[x]]+v+dn[a[x]])));\n\t\telse printf(\"%lld\\n\",min(d1[n]-w[x]+v,del_dis[vis[x]]));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1636952227,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "cf1163f"
    },
    {
        "content": "\u6211\u4eec\u627e\u5230\u4e00\u6761 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def $L$ \u3002\n\n\u82e5 $t\\in L$ \uff0c\u90a3\u4e48\u82e5 $x$ \u6bd4\u539f\u5148\u503c\u53ea\u8981\u51cf\u53bb\u51cf\u5c11\u91cf\uff0c\u800c $x$ \u6bd4\u539f\u6765\u503c\u5927\u76f8\u5f53\u4e8e\u8ba8\u8bba $t$ \u662f\u5426\u9009\u62e9\uff0c\u9700\u8981\u77e5\u9053\u5220\u53bb $t$ \u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002\n\n\u82e5 $t\\notin L$ \uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u8003\u8651\u5f53\u524d\u6700\u77ed\u8def\u4e0e\u7ecf\u8fc7\u8fd9\u6761\u8def\u7684\u6700\u5c0f\u503c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u90a3\u4e48\u53ea\u8981\u77e5\u9053\u5220\u8fb9\u6700\u77ed\u8def\u5373\u53ef\u3002\u4e00\u4e2a\u505a\u6cd5\u662f\u6211\u4eec\u5bf9\u4e8e\u6bcf\u6761\u8fb9 $(u,v)$ \u627e\u5230\u4e00\u6761 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\uff0c\u5c06\u5176\u66f4\u65b0\u5728\u672a\u51fa\u73b0\u5728\u5f53\u524d\u6700\u77ed\u8def\u4f46\u5728 $L$ \u4e2d\u7684\u8fb9\u3002\n\n\u6211\u4eec\u9700\u8981\u8bc1\u660e **\u5728\u5220\u53bb $(u,v)$ \u540e\u7684\u6700\u4f18\u8def\u5f84\u4e3a $I$ \uff0c\u90a3\u4e48 $(i,j)\\in I$ \u4e14\u5f3a\u5236\u8d70 $(i,j)$ \u7684\u6700\u77ed\u8def\u4e3a $I$ \u3002**\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u8bc1\u660e\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $i$ \u6211\u4eec\u8bb0\u5411\u524d\u6700\u4f18\u4e3a $pre_i$ \uff0c\u5411\u540e\u6700\u4f18\u4e3a $suf_i$ \uff0c\u5411\u524d\u6700\u4f18\u6307\u5728 $1-n$ \u7684\u6700\u77ed\u8def\u4e2d\u4ece $pre_i$ \u79bb\u5f00\u3002\n\n\u5219 $pre_1=suf_1=1,pre_n=suf_n=n$ \u3002\u8fd9\u91cc\u7684 $1,n$ \u8868\u793a\u70b9\u7684\u7f16\u53f7\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c06 $I$ \u4e2d\u70b9\u53d6\u51fa\uff0c\u8bb0\u4e3a $x_1,x_2,\u2026x_k$ \uff0c\u5fc5\u6709 $pre_{x_1}\\leq pre_{x_2}\\leq\u2026\\leq pre_{x_k},suf_{x_1}\\leq suf_{x_2}\\leq \u2026\\leq suf_{x_k}$ \uff0c\u5426\u5219\u82e5\u5b58\u5728 $pre_{x_t}>pre_{x_{t+1}}$ \uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9 $pre_{x_{t+1}}$ \u7684\u8def\u5f84\u3002\n\n\u6211\u4eec\u82e5\u53ef\u4ee5\u627e\u5230 $(x,y)$ \u9700\u8981\u6ee1\u8db3 $pre_x\\leq i,suf_y\\geq j$ \u5373\u53ef\u3002\n\n\u8003\u8651\u5bf9\u4e8e $\\forall p$ \u4e0d\u4f1a\u51fa\u73b0 $pre_p\\geq j,suf_p\\leq i$ \uff0c\u8bc1\u660e\u8003\u8651\u8bbe $pre_p=u,suf_p=v$ \uff0c\u5219 $len(1-u)+len(u-x)\\leq len(1-v)+len(v-x)$ \uff0c$len(n-v)+len(v-x)\\leq len(n-u)+len(u-x)$ \u3002 $len(x-y)$ \u8868\u793a\u4ece $x$ \u81f3 $y$ \u7684\u6700\u77ed\u8def\u3002\n\n\u62c6\u5f00\u53ef\u5f97 $len(v-u)+len(u-x)\\leq len(v-x),len(u-v)+len(v-x)\\leq len(u-x)$ \u3002 \n\n\u5f97 $len(u,v)\\leq 0$ \uff0c\u4e0d\u7b26\u5408\u9898\u610f\u3002 **\u6ce8\u610f\uff0c\u6211\u4eec\u94a6\u5b9a\u4e86 $len(n-v)=len(v,n)$ \u6545\u5728\u6709\u5411\u56fe\u6216\u5e26\u8d1f\u6743\u56fe\u4e2d\u4e0d\u6210\u7acb** \n\n\u6211\u4eec\u6574\u7406\u53ef\u5f97 $pre,suf$ \u5177\u6709\u5355\u8c03\u6027\uff0c$pre_1=suf_1=1,pre_n=suf_n=n$ \u4e14\u4e0d\u4f1a\u51fa\u73b0 $pre_x\\geq j,suf_x\\leq i$ \u7684\u60c5\u51b5\u3002\n\n\u90a3\u4e48\u82e5 $pre$ \u8de8\u8fc7 $i-j$ \uff0c\u5219 $suf$ \u4e5f\u80af\u5b9a\u8de8\u8fc7 $i-j$ \uff0c\u90a3\u4e48\u6211\u4eec\u53d6 $x$ \u6ee1\u8db3 $pre_x\\leq i$ \u4e14 $\\max x$ \u4e0e $y$ \u6ee1\u8db3 $pre_y\\geq j$ \u4e14 $\\min y$ \u5373\u53ef\u3002\n\n\u5f97\u8bc1\u3002\u5199\u4e2a\u626b\u63cf\u7ebf\u7ef4\u62a4\u5373\u53ef\u3002\n",
        "postTime": 1611982664,
        "uid": 293177,
        "name": "sry_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1163F \u3010Indecisive Taxi Fee\u3011"
    },
    {
        "content": "\u7ed9\u4f60\u4e00\u4e2a$n$\u4e2a\u70b9\uff0c$m$\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u8fde\u63a5\u70b9$u\u3001v$\uff0c\u5e76\u4e14\u6709\u4e2a\u957f\u5ea6$w$\u3002\n\u6709$q$\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u4f60\u4e00\u5bf9$t\u3001x$,\u8868\u793a\u4ec5\u5f53\u524d\u8be2\u95ee\u4e0b\uff0c\u5c06t\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u4fee\u6539\u4e3a$x$,\u8bf7\u4f60\u8f93\u51fa\u5f53\u524d$1$\u5230$n$\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n**\u6700\u66b4\u529b\u6253\u6cd5**\n\n~~\u76f4\u63a5\u6bcf\u6b21\u628a\u5bf9\u5e94\u8fb9\u5220\u6389\u8dd1\u5355\u6e90\u6700\u77ed\u8def~~  \n\n```cpp\nwhile(Q--){\n\t\tid = read(); x = read();\n\t\tint w1 = e[id<<1].w,w2 = e[(id<<1)-1].w;\n\t\te[id<<1].w = x; e[(id<<1)-1].w = x;\n\t\tdijkstra();\n\t\tprintf(\"%lld\\n\",d[n]);\n\t\te[id<<1].w = w1; e[(id<<1)-1].w = w2;\n\t}\n```\n\n$O(Q(m+n)\\log n)$\n\n**\u7565\u5fae\u4f18\u5316\u6253\u6cd5**\n\n\u5148\u5728\u539f\u56fe\u627e\u51fa\u4e00\u6761\u6700\u77ed\u8def\uff0c\u5206\u56db\u7c7b\u8ba8\u8bba\uff0c\u6700\u77ed\u8def\u4e0a\u8fb9\u6539\u5c0f\uff0c\u975e\u6700\u77ed\u8def\u8fb9\u6539\u5927\u90fd\u4e0d\u5f71\u54cd\u7b54\u6848\n\n\u975e\u6700\u77ed\u8def\u4e0a\u8fb9\u6539\u5c0f\u5224\u65ad\u5f3a\u5236\u7ecf\u8fc7\u6b64\u8fb9\u662f\u5426\u66f4\u4f18(\u5efa\u53cc\u56fe\uff0c\u8dd1\u4e24\u6b21\u6700\u77ed\u8def\uff0c\u4ece$1$\u5230$u$\uff0c$n$\u5230$v$)\uff0c$len=d1[u]+dn[v]+1$\n\n\u6700\u77ed\u8def\u8fb9\u6539\u5927\uff0c\u6bd4\u8f83\u5f3a\u5236\u7ecf\u8fc7\u8fd9\u6761\u88ab\u4fee\u6539\u7684\u8fb9\u957f\u5ea6\u548c\u539f\u56fe\u5220\u53bb\u8fb9\u540e\u6700\u77ed\u8def\u957f\u5ea6\n\n\u77ed\u8def\u7ecf\u8fc7\u7684\u8def\u5f84\u6761\u6570\u5728$logn$\u7ea7\u522b\n\n\u6240\u4ee5\u6211\u4eec\u628a\u539f\u56fe\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u5206\u522b\u5220\u6389\u5e76\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u6700\u540e\u6bcf\u6b21\u8be2\u95ee\u6309\u7167\u4e0a\u9762\u7684\u5206\u7c7b\u6765\u8ba1\u7b97\u5373\u53ef\u3002\n\n\u4fe1\u4ef0$spfa$  $O(kn\\log n+Q\u4fe1\u4ef0)$  \n\n**\u6b63\u89e3**\n\n\u4e0a\u9762\u7684\u74f6\u9888\u5728\u4e8e\u4fee\u6539\u7684\u8fb9\u5728$1$\u5230$n$\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u6743\u53d8\u5927\n\n\u4ee4\u6700\u77ed\u8def\u4e3a$G$\uff0c\u7ecf\u8fc7\u7684\u70b9\u6570\u4e3a$G_1,G_2,G_3...G_k$\n\n\u5bf9\u4e8e\u4e0d\u662f$G$\u4e0a\u7684\u70b9$u$\uff0c$1$\u5230$u$\u6700\u77ed\u8def\u5fc5\u5b9a\u4f1a\u7528$G$\u7684\u4e00\u6bb5\u524d\u7f00\uff0c\u540c\u7406\u5fc5\u5b9a\u7ecf\u8fc7\u4e00\u6bb5\u540e\u7f00\uff0c\n\n\u5bf9\u4e8e$G$\u4e0a\u7684\u70b9$u$\uff0c\u4ee4$L$\u4e3a$G$\u4e0a\u8fde\u63a5\u81ea\u5df1\u8fb9\u7684\u7f16\u53f7\uff0c$R$\u4e3a\u8fde\u5230\u4e0b\u4e00\u4e2a$G$\u4e0a\u70b9\u7f16\u53f7\n\n\n\n\u5982\u4f55\u6c42$L$\u548c$R$\uff0c\u5148\u8dd1$n$\u5230$1$\u7684\u6700\u77ed\u8def\u6c42$G$\u8def\u5f84\n\n\u518d\u4ece$1$\u5230$n$ $n$\u5230$1$\u8dd1\u4e24\u904d$dij$\uff0c\u66f4\u65b0\u6bcf\u4e2a\u975e$G$\u7684$L,R$\n\n\u95ee\u9898\u8f6c\u5316\u6c42$\\min\\{G-\u539f\u957f+\u65b0\u957f,\u4e0d\u7ecf\u8fc7\u4fee\u6539\u8fb9\u7684\u6700\u77ed\u8def\\}$\n\n\u5982\u4f55\u5feb\u901f\u6c42\u51fa\u4e0d\u7ecf\u8fc7$G$\u4e0a\u67d0\u6761\u8fb9\u7684\u6700\u77ed\u8def\u957f\u5ea6\uff1f\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4 \u533a\u95f4 $l,r$ \u7684\u503c\u8868\u793a \u4e0d\u7ecf\u8fc7$G$\u4e0a$l$\u5230$r$\u8fd9\u6bb5\u7684\u6700\u77ed\u8def\u957f\u5ea6\n\n$O(n\\log n+m\\log n+q\\log n)$\n\n```cpp\nstruct edge{\n\tint id,to,next; long long w;\n}q[400101];\nstruct lss{\n\tint u,v; long long w;\n}r[401001];\nstruct ls{\n\tint id; long long dis;\n\tbool operator<(const ls &x)const{\n\t\treturn x.dis<dis;\n\t}\n};\nint head[201010],cnt,n,m,qaq;\nlong long rd[201010],ld[201010],disl[210101],disr[201010];\nint pre[210101];//\u5de6\u53f3\u6700\u77ed\u8def\nint idest[201010],pcnt,visp[210101];//\u6700\u77ed\u8def \nlong long dist[201010];\nvoid add(int x,int y,long long z,int a){\n\tq[++cnt] = (edge){a,y,head[x],z}; head[x] = cnt;\n}\npriority_queue<ls> qq;\nvoid dij(int u,long long dis[],int flag){\n\tfor(int i=1;i<=n;++i)\n\t  dis[i]=1e18;\n\tdis[u]=0;\n\tqq.push((ls){u,0});\n\twhile(!qq.empty()){\n\t\tls tmp=qq.top();\n\t\tqq.pop();\n\t\tint x=tmp.id;\n\t\tlong long dw=tmp.dis;\n\t\tif(dw>dis[x]) continue;\n\t\tfor(int i=head[x];i;i=q[i].next){\n\t\t\tint v=q[i].to;\n\t\t\tif(dis[v]>q[i].w+dw){\n\t\t\t\tpre[v]=q[i].id;\n\t\t\t\tdis[v]=q[i].w+dw;\n\t\t\t\tif(flag==1&&!visp[v]) ld[v]=ld[x];//\u66f4\u65b0ld\uff0cld\u4e00\u5b9a\u6307\u5411\u81ea\u5df1\u7684\u524d\u9a71\n\t\t\t\tif(flag==2&&!visp[v]) rd[v]=rd[x];//\u540c\u7406\uff08\u7b2c\u4e8c\u904d\u662f\u4eceN\u52301\uff09\n\t\t\t\tqq.push((ls){v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\n#define ls (rt<<1)\n#define rs (rt<<1|1)\n#define mid (l+r>>1)\n#define lson ls,l,mid\n#define rson rs,mid+1,r\nlong long tr[1101010];\nvoid build(int rt,int l,int r){\n\ttr[rt]=1e18;\n\tif(l==r) return;\n\tbuild(lson); build(rson);\n}\nvoid update(int rt,int l,int r,int L,int R,long long x){\n\tif(L>R) return;\n\tif(L<=l&&r<=R){\n\t\ttr[rt]=min(tr[rt],x);\n\t\treturn;\n\t}\n\tif(L<=mid) update(lson,L,R,x);\n\tif(R>mid) update(rson,L,R,x);\n}\nlong long query(int rt,int l,int r,int x){\n\tif(l==r) return tr[rt];\n\tlong long res=tr[rt];\n\tif(x<=mid) res=min(res,query(lson,x));\n\tif(x>mid) res=min(res,query(rson,x));\n\treturn res;\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&qaq);\n\tfor(int i=1;i<=m;++i){\n\t  \tscanf(\"%d%d%d\",&r[i].u,&r[i].v,&r[i].w);//\u8bb0\u5f55\u8fb9\u7684ID\uff0c\u5c31\u4e0d\u7528\u518d\u5f02\u6216\u641e\u4e86!!!\u8bfb\u5165\u65f6\u4e3a\u4e86\u65b9\u4fbf\uff08\u53ef\u80fd\u4e5f\u662f\u8feb\u4e0d\u5f97\u5df2\uff09\u4eba\u4e3a\u5730\u89c4\u5b9a\u6210\u6709\u5411\u8fb9\uff1b\n\t  \tadd(r[i].u,r[i].v,r[i].w,i);\n\t  \tadd(r[i].v,r[i].u,r[i].w,i);\n\t  \tidest[i]=-1;//\u5148\u90fd\u7f6e\u4e3a-1\uff1b\n\t  }\n  dij(n,dist,10);//\u5148\u8dd1\u4e00\u904d\u6c42\u6700\u77ed\u8def\n\tvisp[1]=1;//visp\u6307\u662f\u5426\u5728\u6700\u77ed\u8def\u4e0a\uff08\u70b9\uff09\n\tld[1]=rd[1]=0;//\n\tint v=1;\n\tfor(int i=1;v!=n;++i){\n\t  \tint ve=pre[v];//pre\u662f\u7531\u4e0b\u6807\uff08\u70b9\uff09 \u6307\u5411\u6570\u503c\uff08\u8fb9\uff09\n\t  \tpcnt++;//\u8bb0\u5f55\u6700\u77ed\u8def\u5f84\u7684\u8fb9\u6570\n\t  \tidest[ve]=i;///idin\u6307\u6700\u77ed\u8def\u5f84\u4e0a\u8fb9\u7684\u7f16\u53f7(\u8fb9)\n\t  \tv=r[ve].v^v^r[ve].u;//\u5411\u524d\u627e\u6700\u77ed\u8def\u5f84\uff01\uff01\uff01\u56e0\u4e3a\u7ed3\u6784\u4f53\u5b58\u6210\u4e86\u65e0\u5411\u8fb9\uff0c\u6240\u4ee5\u6709\u53ef\u80fd\u5728\u6700\u77ed\u8def\u4e0a\u4e71\u8df3\uff0c\n\t  \t//\u800cv\u4e00\u5b9a\u4e0er[ve].u\u548cr[ve].v\u5176\u4e2d\u7684\u4e00\u4e2a\u76f8\u540c\uff0c\u6240\u4ee5\u5f02\u6216\u64cd\u4f5c\u540e\u4e00\u5b9a\u662f\u5269\u4e0b\u7684\u4e00\u4e2a\uff0c\u5373v\u6307\u5411\u7684\u70b9\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u627e\u8def\u5f84\u4e86\u3002\n\t  \tvisp[v]=1;//\u5728\u6700\u77ed\u8def\u4e0a\u4e86\n\t  \tld[v]=rd[v]=i;//ld,rd\u5b58\u7684\u90fd\u662f\u7f16\u53f7(\u8fb9)\uff0c\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u4e00\u5b9a\u6307\u5411\u7684\u662f\u6700\u77ed\u8def\u4e0a.\n\t  }\n\tdij(1,disl,1);//\u66f4\u65b0ld\u5de6\n\tdij(n,disr,2);//\u66f4\u65b0rd\u53f3\n\tbuild(1,1,pcnt);//\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u5efa\u6811\n\tfor(int i=1;i<=m;++i){\n\t\tif(idest[i]==-1){//\u5bf9\u4e8e\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\n\t\t\n\t\t\tupdate(1,1,pcnt,ld[r[i].u]+1,rd[r[i].v],disl[r[i].u]+r[i].w+disr[r[i].v]);//\u56e0\u4e3ald,rd\u8868\u793a\u94fe\u63a5\u5230\u6b64\u8fb9\u7684\u7f16\u53f7\uff0c\u6240\u4ee5\u662f\u8dd1\u5b8cld\uff0c\u8dd1\u5230lr\uff0c\u6240\u4ee5\u5de6\u5f00\u53f3\u95ed\uff1b\n\t\t\tupdate(1,1,pcnt,ld[r[i].v]+1,rd[r[i].u],disl[r[i].v]+r[i].w+disr[r[i].u]);\n\t\t}\n\t}\n\twhile(qaq--){\n\t\tint t;\n\t\tlong long lent,ans=disl[n];\n\t\tscanf(\"%d%lld\",&t,&lent);\n\t\tif(~idest[t]){\n\t\t\tans=disl[n]-r[t].w+lent;\n\t\t\tif(lent>r[t].w)\n\t\t\t  ans=min(ans,query(1,1,pcnt,idest[t])); \n\t\t}\n\t\telse {\n\t\t\tif(lent<r[t].w)\n\t\t\t\tans=min(ans,min(disr[r[t].u]+disl[r[t].v]+lent,disl[r[t].u]+disr[r[t].v]+lent));\t\t\t\n\t\t}\n\t  printf(\"%lld\\n\",ans);\n\t}\n}\n\n```\n\n",
        "postTime": 1602891851,
        "uid": 262212,
        "name": "\u662f\u4e2a\u59b9\u5b50\u5566",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1163F \u3010Indecisive Taxi Fee\u3011"
    },
    {
        "content": "[\u6d1b\u8c37\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1163F)\t[CF\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1163F)\n\n### Solution\n\n~~\u8fd9\u9898\u5728\u6691\u5047\u5c31\u8bb2\u4e86\uff0c\u7b49\u6a21\u62df\u8d5b\u51fa\u4e86\u8fd8\u6ca1\u505a\uff0c\u53ea\u80fd\u4ea1\u7f8a\u8865\u7262(\uffe3\u25bd\uffe3)\"~~\n\n\u5148\u8003\u8651\u5982\u679c\u6307\u5b9a\u7ecf\u8fc7\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u600e\u4e48\u6c42\uff1f\n\n\u8bbe\u6b64\u8fb9\u4e3a $(u, v)$ \uff0c\u90a3\u4e48\u8003\u8651\u4ece $1$ \u548c $n$ \u5f00\u59cb\u5206\u522b\u8dd1\u4e24\u6b21\u6700\u77ed\u8def \u3002\u8bbe $disS_i$ \u4e3a $1$ \u5230 $i$ \u7684\u6700\u77ed\u8def\uff0c $disT$ \u540c\u7406\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $\\min(disS_u+dis_{u,v}+disT_{v},disS_v+dis_{u,v}+disT_{u})$ \n\n\u73b0\u5728\u628a\u4fee\u6539\u5206\u62104\u79cd\uff1a\n\n1. \u4fee\u6539\u7684\u8fb9\u4e0d\u5728 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u7684\u957f\u5ea6\u53d8\u5927\u4e86\n2. \u4fee\u6539\u7684\u8fb9\u4e0d\u5728 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u7684\u957f\u5ea6\u53d8\u5c0f\u4e86\n3. \u4fee\u6539\u7684\u8fb9\u5728 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u7684\u957f\u5ea6\u53d8\u5c0f\u4e86\n4. \u4fee\u6539\u7684\u8fb9\u5728 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u7684\u957f\u5ea6\u53d8\u5927\u4e86\n\n\u53ef\u5f97\u539f\u6700\u77ed\u8def\u957f\u5ea6\u4e3a $disS_n$ \uff0c\u8bbe\u4fee\u6539\u7684\u8fb9\u4e3a $(u,v)$ \uff0c\u5bf9\u4e8e1\uff0c $disS_n$ \u5c31\u662f\u7b54\u6848\uff1b\u5bf9\u4e8e2\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $\\min\\{disS_n,disS_u+dis_{u,v}+disT_{v},disS_v+dis_{u,v}+disT_{u}\\}$ \uff1b\u5bf9\u4e8e3\uff0c\u7b54\u6848\u662f $disS_n-dis_{u,v}+w$ \uff1b\n\n\u4f46\u662f\u5bf9\u4e8e4\uff0c\u6211\u4eec\u8981\u8fdb\u4e00\u6b65\u8ba8\u8bba\u3002\n\n\u8bbe\u6700\u77ed\u8def\u4e3a $G$ \uff0c\u5219\u8def\u5f84\u4e0a\u7684\u8fb9\u4e3a $G_1,G_2,G_3,\\cdots ,G_k$ \u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u662f $G$ \u4e0a\u7684\u70b9\uff0c $1$ \u5230 $u$ \u7684\u6700\u77ed\u8def\u5fc5\u5b9a\u4f1a\u7ecf\u8fc7\u4e00\u6bb5 $G$ \u7684\u524d\u7f00\uff08\u53ef\u4ee5\u4e3a\u7a7a\uff09\u3002\u8bbe $L_u$ \u8868\u793a\u8fd9\u4e2a\u524d\u7f00\uff0c\u90a3\u4e48 $disS_u$ \u7ecf\u8fc7 $G_1.G_2,\\cdots G_{L_u}$ \u3002\n\n\u5bf9\u4e8e $u$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u540c\u7406\uff0c\u53ef\u4ee5\u5f97\u5230 $R_u$ \u8868\u793a\u7684\u540e\u7f00\u3002\n\n\u56de\u5230\u95ee\u98984\uff0c\u5c31\u662f\u6c42 $\\min(disS_n-dis_{u,v}+w,\u4e0d\u7ecf\u8fc7\u4fee\u6539\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\u957f\u5ea6)$ \u3002\n\n\u90a3\u4e48\u600e\u4e48\u5feb\u901f\u6c42\u51fa\u4e0d\u7ecf\u8fc7 $G$ \u4e0a\u67d0\u6761\u8fb9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u533a\u95f4 $(l,r)$ \u8868\u793a\u4e0d\u7ecf\u8fc7 $G_l,\\cdots ,G_r$ \u8fd9\u6bb5\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n\u800c\u6b64\u65f6 $L,R$ \u7684\u7528\u5904\u5c31\u6765\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u7ecf\u8fc7 $(u,v)$ \u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u66f4\u65b0 $(L_u+1,R_v),(L_v+1,R_u)$ \u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a $O(n\\log n+m\\log n+q\\log n)$ \n\n```c++\n#include<bits/stdc++.h>\n#define ll long long\n#define ls rt<<1\n#define rs rt<<1|1\n\nusing namespace std;\nconst int N=2e5+10,M=2e5+10;\nconst ll INF=1e18;\nstruct id_edge{\n    int u,v;\n    ll w;\n}ie[M<<1];\nint n,m,q,dist;\nint in_dist[N],l[N],r[N];\nbool road[N];\n\ntemplate <typename T> void read(T &x){\n    int f=1;x=0;\n    char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-') f=-1;ch=getchar();}\n    while(isdigit(ch)){x=x*10+(ch^48);ch=getchar();}\n    x*=f;\n}\n\nstruct edge{\n    int to,nxt,id;\n    ll w;\n}e[M<<1];\nint head[N],cnt;\ninline void add(int id,int u,int v,ll w){\n    e[++cnt].to=v;\n    e[cnt].id=id;\n    e[cnt].w=w;\n    e[cnt].nxt=head[u];\n    head[u]=cnt;\n}\n\nint lst_vis[N];\nll dis_S[N],dis_T[N];\nstruct node{\n    int pos;\n    ll dis;\n    inline bool operator < (const node &x) const {\n        return x.dis<dis;\n    }\n};\npriority_queue<node> pq;\ninline void dijkstral(int s,ll dis[],int f=0){\n    for(int i=1;i<=n;i++) dis[i]=INF;\n    dis[s]=0;\n    pq.push(node{s,0});\n    while(!pq.empty()){\n        node x=pq.top();pq.pop();\n        int u=x.pos;\n        if(x.dis>dis[u]) continue;\n        for(int i=head[u];i;i=e[i].nxt){\n            int v=e[i].to;\n            if(dis[v]>x.dis+e[i].w){\n                lst_vis[v]=e[i].id;\n                dis[v]=x.dis+e[i].w;\n                if(f==1&&!road[v]) l[v]=l[u];\n                if(f==2&&!road[v]) r[v]=r[u];\n                pq.push(node{v,dis[v]});\n            }\n        }\n    }\n}\n\ninline void init_dist(){\n    int now=1;\n    road[now]=true;\n    l[now]=r[now]=0;\n    for(int i=1;now!=n;i++){\n        int now_id=lst_vis[now];\n        in_dist[now_id]=i;\n        ++dist;\n        now=ie[now_id].u^ie[now_id].v^now;\n        road[now]=true;\n        l[now]=r[now]=i;\n    }\n}\n\nll minn_dis[N<<4];\nvoid build(int rt,int l,int r){\n    minn_dis[rt]=INF;\n    if(l==r) return ;\n    int mid=(l+r)>>1;\n    build(ls,l,mid);build(rs,mid+1,r);\n}\n\nvoid update(int rt,int l,int r,int L,int R,ll k){\n    if(L>R) return ;\n    if(L<=l&&r<=R){\n        minn_dis[rt]=min(minn_dis[rt],k);\n        return ;\n    }\n    int mid=(l+r)>>1;\n    if(L<=mid) update(ls,l,mid,L,R,k);\n    if(R>mid) update(rs,mid+1,r,L,R,k);\n}\n\nll query(int rt,int l,int r,int x){\n    if(l==r) return minn_dis[rt];\n    int mid=(l+r)>>1;\n    ll res=minn_dis[rt];\n    if(x<=mid) res=min(res,query(ls,l,mid,x));\n    else res=min(res,query(rs,mid+1,r,x));\n    return res;\n}\n\nint main(){\n    // freopen(\"fee.in\",\"r\",stdin);\n    // freopen(\"fee.out\",\"w\",stdout);\n    read(n);read(m);read(q);\n    for(int i=1;i<=m;i++){\n        read(ie[i].u);read(ie[i].v);read(ie[i].w);\n        add(i,ie[i].u,ie[i].v,ie[i].w);add(i,ie[i].v,ie[i].u,ie[i].w);\n        in_dist[i]=-1;\n    }\n    dijkstral(n,dis_T);\n    init_dist();\n    dijkstral(1,dis_S,1);\n    dijkstral(n,dis_T,2);\n    build(1,1,dist);\n    for(int i=1;i<=m;i++)\n        if(in_dist[i]==-1){\n            update(1,1,dist,l[ie[i].u]+1,r[ie[i].v],dis_S[ie[i].u]+ie[i].w+dis_T[ie[i].v]);\n            update(1,1,dist,l[ie[i].v]+1,r[ie[i].u],dis_S[ie[i].v]+ie[i].w+dis_T[ie[i].u]);\n        }\n    for(int i=1,id,x;i<=q;i++){\n        read(id);read(x);\n        ll ans=dis_S[n];\n        if(in_dist[id]==-1){\n            if(x<ie[id].w){\n                ans=min(ans,dis_S[ie[id].u]+x+dis_T[ie[id].v]);\n                ans=min(ans,dis_S[ie[id].v]+x+dis_T[ie[id].u]);\n            }\n        }\n        else{\n            ans=ans-ie[id].w+x;\n            if(x>ie[id].w){\n                ans=min(ans,query(1,1,dist,in_dist[id]));\n            }\n        }\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1604497356,
        "uid": 272143,
        "name": "\u662f\u4e2a\u6c49\u5b50",
        "ccfLevel": 4,
        "title": "CF1163F Indecisive Taxi Fee"
    },
    {
        "content": "### [CF1163F] Indecisive Taxi Fee \u9898\u89e3\n\n#### \u524d\u8a00\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u4f46\u662f\u601d\u7ef4\u96be\u5ea6\u6bd4\u8f83\u5c0f\u7684\u9898\u89e3\n\n#### \u5206\u6790\n\n\u5e26\u4fee\u7684\u6700\u77ed\u8def\u6bd4\u8f83\u68d8\u624b\uff0c\u6211\u4eec\u5148\u5c06\u4ece $1$ \u5f00\u59cb\u7684\u6700\u77ed\u8def\u56fe\u5efa\u51fa\u6765\uff1a\u5bf9\u4e8e\u4e00\u6761\u6709\u5411\u8fb9 $(u,v,w)$ \u5982\u679c\u6709 $dis_v=dis_u+w$\uff0c\u6211\u4eec\u5c31\u5c06 $(u,v,w)$ \u52a0\u5165\u6700\u77ed\u8def\u56fe\n\n\u63a5\u4e0b\u6765\u6ce8\u610f\u5230\u6211\u4eec\u53ef\u4ee5\u628a\u7b54\u6848\u62c6\u6210\u4e24\u90e8\u5206\uff1a\u5bf9\u4e8e\u4e00\u6b21\u4fee\u6539\u5c06\u8fb9 $t:(u,v)$ \u7684\u6743\u6539\u4e3a $x$\uff0c\u6211\u4eec\u5206\u522b\u8ba1\u7b97\u5f3a\u5236\u7ecf\u8fc7 $t$ \u7684\u6700\u77ed\u8def\u548c\u5f3a\u5236\u4e0d\u7ecf\u8fc7 $t$ \u7684\u6700\u77ed\u8def\uff0c\u524d\u4e00\u90e8\u5206\u5f88\u597d\u6c42\uff1a\u5206\u522b\u4ee5 $1$ \u548c $n$ \u4e3a\u6e90\u6c42\u6700\u77ed\u8def\uff0c\u5219\u7b54\u6848\u4e3a $min(dis_{1,u}+dis_{v,n}+x,dis_{1,v}+dis_{u,n}+x)$\uff0c\u8003\u8651\u5982\u4f55\u6c42\u7b2c\u4e8c\u90e8\u5206\uff1a\n\n\u5982\u679c\u5220\u53bb $t$ \u540e\u6700\u77ed\u8def\u56fe\u4e2d $1,n$ \u4ecd\u7136\u8054\u901a\uff0c\u5219\u7b2c\u4e8c\u90e8\u5206\u7684\u7b54\u6848\u4f9d\u7136\u662f\u539f\u6700\u77ed\u8def\uff0c\u5426\u5219\u6211\u4eec\u79f0 $t$ \u662f\u4e00\u6761\u5272\u8fb9\uff0c\u5220\u53bb\u6240\u6709\u5272\u8fb9\u540e\uff0c\u5bb9\u6613\u8bc1\u660e\u539f\u56fe\u4f1a\u53d8\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\uff0c\u5982\u679c\u5c06\u8fd9\u4e9b\u8fde\u901a\u5757\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u518d\u628a\u5272\u8fb9\u52a0\u56de\u6765\uff0c\u4f1a\u5f62\u6210\u4e00\u6761\u94fe\u3002\u5047\u5982 $t$ \u662f\u5272\u8fb9\uff0c\u5bb9\u6613\u8bc1\u660e\u5c06 $t$ \u53bb\u6389\u540e\u65b0\u7684\u6700\u77ed\u8def\u53ea\u4f1a\u7ecf\u8fc7\u4e00\u6761\u975e\u6700\u77ed\u8def\u56fe\u4e0a\u7684\u8fb9\uff0c\u5426\u5219\u7531\u6700\u77ed\u8def\u56fe\u7684\u6027\u8d28\u4e00\u5b9a\u80fd\u627e\u5230\u66f4\u77ed\u7684\u4e00\u6761\u8def\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u5f3a\u5236\u7ecf\u8fc7\u5b83\u7684\u6700\u77ed\u8def\u53ef\u4ee5\u8d21\u732e\u5230\u5728\u6700\u77ed\u8def\u56fe\u4e2d\u5b83\u8de8\u8d8a\u7684\u5272\u8fb9\u4e0a\u53bb\u3002\u6211\u4eec\u6309\u7167\u7f29\u6210\u7684\u94fe\u7ed9\u5272\u8fb9\u6807\u53f7\uff0c\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\n\n\u81f3\u4e8e\u5982\u4f55\u627e\u5272\u8fb9\uff0c\u5982\u679c\u5bf9\u4e8e\u8fb9 $(u,v)$\uff0c$1\\rightarrow u$ \u8def\u5f84\u6570\u91cf\u4e58\u4ee5 $1\\rightarrow v$ \u8def\u5f84\u6570\u91cf\u7b49\u4e8e $1\\rightarrow n$ \u8def\u5f84\u6570\u91cf\uff0c\u5219 $(u,v)$ \u662f\u5272\u8fb9\uff0c\u6b63\u53cd\u4e24\u8fb9\u62d3\u6251\u6392\u5e8f dp \u5373\u53ef\n\n#### \u5177\u4f53\u5b9e\u73b0\n\n\u6700\u77ed\u8def\uff1a\n\n```cpp\ninline void dijstra(int s, int t, ll *d) {\n    priority_queue<node> q; \n    d[s] = 0, q.push({s, -1, d[s]});\n    while (!q.empty()) {\n        node v = q.top();\n        q.pop();\n        if (v.val != d[v.to]) continue;\n        int p = v.to;\n        for (node i : nxt[p])\n            if (d[i.to] > d[p] + i.val) d[i.to] = d[p] + i.val, q.push({i.to, -1, d[i.to]});\n    }\n}\n```\n\n\u5efa\u6700\u77ed\u8def\u56fe\uff1a\n\n```cpp\nfor (int i = 1; i <= n; i++)\n    for (node j : nxt[i])\n        if (d1[j.to] == d1[i] + j.val) swp[i].push_back(j),         iwp[j.to].push_back({i, j.id, j.val}), i1[j.to]++, in[i]++;\n```\n\n\u627e\u5272\u8fb9\uff1a\n\n```cpp\ns1[1][0] = s1[1][1] = s1[1][2] = 1, qu.push(1);\n    while (!qu.empty()) {\n        int p = qu.front();\n        qu.pop();\n        for (node i : swp[p]) {\n            for (int j = 0; j < 3; j++) s1[i.to][j] = (s1[i.to][j] + s1[p][j]) % P[j];\n            if (!(--i1[i.to])) qu.push(i.to);\n        }\n    }\n    sn[n][0] = sn[n][1] = sn[n][2] = 1;\n    for (int i = 1; i <= n; i++)\n        if (!in[i]) qu.push(i);\n    while (!qu.empty()) {\n        int p = qu.front();\n        qu.pop();\n        for (node i : iwp[p]) {\n            for (int j = 0; j < 3; j++) sn[i.to][j] = (sn[i.to][j] + sn[p][j]) % P[j];\n            if (!(--in[i.to])) qu.push(i.to);\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (node v : swp[i]) {\n            int j = ((cut[v.id] = 1), v.to);\n            for (int k = 0; k < 3; k++)\n                if (s1[i][k] * sn[j][k] % P[k] != s1[n][k]) cut[v.id] = 0;\n        }\n    }\n```\n\n\u8ba1\u7b97\u6bcf\u6761\u8fb9\u5bf9\u7b2c\u4e8c\u79cd\u60c5\u51b5\u7684\u8d21\u732e + \u6c42\u7b54\u6848\uff1a\n\n```cpp\nfor (int i = 1; i <= m; i++)\n        if (cl[ed[i].to] && cl[ed[i].id] && !cut[i]) {\n            if (cl[ed[i].to] == cl[ed[i].id]) continue;\n            if (cl[ed[i].to] > cl[ed[i].id]) swap(ed[i].to, ed[i].id);\n            modify(1, 1, cx - 1, cl[ed[i].to], cl[ed[i].id] - 1, d1[ed[i].to] + dn[ed[i].id] + ed[i].val);\n        }\n    for (int i = 1, t, x; i <= q; i++)\n        scanf(\"%d%d\", &t, &x), tt = min(d1[ed[t].to] + dn[ed[t].id] + x, dn[ed[t].to] + d1[ed[t].id] + x),\n                               printf(\"%lld\\n\", ev[t] ? min(tt, query(1, 1, cx - 1, ev[t])) : min(tt, dn[1]));\n```\n\n\n\n\u5168\u90e8\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int M = 201000;\nint n, m, q;\nstruct node {\n    int to, id;\n    ll val;\n} ed[M];\nbool operator<(node a, node b) { return a.val > b.val; }\nconst ll P[3] = {998244353, 1000000007, 1999999973}, inf = LONG_LONG_MAX;\nll d1[M], dn[M], s1[M][3], sn[M][3], tree[M << 2], tag[M << 2], tt;\nint i1[M], in[M], cl[M], cx, ev[M];\nbool cut[M];\nvector<node> nxt[M], swp[M], iwp[M];\ninline void dijstra(int s, int t, ll *d) {\n    priority_queue<node> q;\n    d[s] = 0, q.push({s, -1, d[s]});\n    while (!q.empty()) {\n        node v = q.top();\n        q.pop();\n        if (v.val != d[v.to]) continue;\n        int p = v.to;\n        for (node i : nxt[p])\n            if (d[i.to] > d[p] + i.val) d[i.to] = d[p] + i.val, q.push({i.to, -1, d[i.to]});\n    }\n}\nqueue<int> qu;\nvoid dfs(int n, int d) {\n    if (cl[n]) return;\n    cx = max(cx, cl[n] = d);\n    for (node i : swp[n]) cut[i.id] ? (ev[i.id] = d, dfs(i.to, d + 1)) : dfs(i.to, d);\n}\n#define lc (n << 1)\n#define rc (n << 1 | 1)\n#define mid (l + r >> 1)\ninline void pushup(int n) { tree[n] = min(tree[lc], tree[rc]); }\ninline void upd(int n, ll v) { tree[n] = min(tree[n], v), tag[n] = min(tag[n], v); }\ninline void pushdown(int n) { upd(lc, tag[n]), upd(rc, tag[n]), tag[n] = inf; }\nvoid modify(int n, int l, int r, int dl, int dr, ll v) {\n    if (l == dl && r == dr) return upd(n, v);\n    pushdown(n);\n    if (dr <= mid) modify(lc, l, mid, dl, dr, v);\n    else if (dl > mid) modify(rc, mid + 1, r, dl, dr, v);\n    else modify(lc, l, mid, dl, mid, v), modify(rc, mid + 1, r, mid + 1, dr, v);\n    pushup(n);\n}\nll query(int n, int l, int r, int u) {\n    if (l == r) return tree[n];\n    pushdown(n);\n    if (u <= mid) return query(lc, l, mid, u);\n    return query(rc, mid + 1, r, u);\n}\nint main() {\n    scanf(\"%d%d%d\", &n, &m, &q);\n    memset(d1, 0x3f, sizeof(d1)), memset(dn, 0x3f, sizeof(dn));\n    memset(tree, 0x3f, sizeof(tree)), memset(tag, 0x3f, sizeof(tree));\n    for (int i = 1, u, v, w; i <= m; i++) scanf(\"%d%d%d\", &u, &v, &w), nxt[u].push_back({v, i, w}), nxt[v].push_back({u, i, w}), ed[i] = {u, v, w};\n    dijstra(1, n, d1), dijstra(n, 1, dn);\n    for (int i = 1; i <= n; i++)\n        for (node j : nxt[i])\n            if (d1[j.to] == d1[i] + j.val) swp[i].push_back(j), iwp[j.to].push_back({i, j.id, j.val}), i1[j.to]++, in[i]++;\n    s1[1][0] = s1[1][1] = s1[1][2] = 1, qu.push(1);\n    while (!qu.empty()) {\n        int p = qu.front();\n        qu.pop();\n        for (node i : swp[p]) {\n            for (int j = 0; j < 3; j++) s1[i.to][j] = (s1[i.to][j] + s1[p][j]) % P[j];\n            if (!(--i1[i.to])) qu.push(i.to);\n        }\n    }\n    sn[n][0] = sn[n][1] = sn[n][2] = 1;\n    for (int i = 1; i <= n; i++)\n        if (!in[i]) qu.push(i);\n    while (!qu.empty()) {\n        int p = qu.front();\n        qu.pop();\n        for (node i : iwp[p]) {\n            for (int j = 0; j < 3; j++) sn[i.to][j] = (sn[i.to][j] + sn[p][j]) % P[j];\n            if (!(--in[i.to])) qu.push(i.to);\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (node v : swp[i]) {\n            int j = ((cut[v.id] = 1), v.to);\n            for (int k = 0; k < 3; k++)\n                if (s1[i][k] * sn[j][k] % P[k] != s1[n][k]) cut[v.id] = 0;\n        }\n    }\n    dfs(1, 1);\n    for (int i = 1; i <= m; i++)\n        if (cl[ed[i].to] && cl[ed[i].id] && !cut[i]) {\n            if (cl[ed[i].to] == cl[ed[i].id]) continue;\n            if (cl[ed[i].to] > cl[ed[i].id]) swap(ed[i].to, ed[i].id);\n            modify(1, 1, cx - 1, cl[ed[i].to], cl[ed[i].id] - 1, d1[ed[i].to] + dn[ed[i].id] + ed[i].val);\n        }\n    for (int i = 1, t, x; i <= q; i++)\n        scanf(\"%d%d\", &t, &x), tt = min(d1[ed[t].to] + dn[ed[t].id] + x, dn[ed[t].to] + d1[ed[t].id] + x),\n                               printf(\"%lld\\n\", ev[t] ? min(tt, query(1, 1, cx - 1, ev[t])) : min(tt, dn[1]));\n    return 0;\n}\n```\n\n",
        "postTime": 1668155600,
        "uid": 369207,
        "name": "Watware",
        "ccfLevel": 5,
        "title": "[CF1163F] Indecisive Taxi Fee \u9898\u89e3"
    },
    {
        "content": "# CF1163F Indecisive Taxi Fee\n\u4e00\u9053\u65ad\u8fb9\u6700\u77ed\u8def\u7684\u9898\u76ee     \n\n------------------------------ \n\u9898\u76ee\u5927\u610f\uff1a    \n\u7ed9\u5b9a\u4e00\u5f20n\u70b9m\u8fb9\u7684\u65e0\u5411\u56fe   \n\u6709Q\u4e2a\u8be2\u95ee \uff08\u8be2\u95ee\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\uff09    \n\u6bcf\u6b21\u628a\u4e00\u6761\u8fb9\u6539\u53d8\u6743\u503c     \n\u8be2\u95ee\u6539\u53d8\u540e1~n\u7684\u6700\u77ed\u8def     \n\n------------------------------\n\u8fd9\u9053\u9898\u7684\u8fd0\u7528\u4e4b\u4e00\u662f\u6700\u77ed\u8def\u6811     \n\u6211\u4eec\u77e5\u9053\uff0c\u5047\u8bbe1~n\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u6700\u77ed\u8def\u7ebf\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8fb9\u5206\u7c7b\uff1a     \n```\n1.\u5728\u6700\u77ed\u8def\u4e0a\n2.\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\n```\n![](https://cdn.luogu.com.cn/upload/image_hosting/uu96vw9d.png)      \n\u5982\u56fe\u6837\u4f8b\u4e00\uff0c\u4e24\u6761\u7ea2\u8fb9\u5c31\u662f\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9     \n\u8fd9\u4e2a\u4e1c\u897f\u600e\u4e48\u6c42\u5462\uff1f    \n\u6211\u4eec\u4e5f\u4e0d\u7740\u6025\u3002\n\n----------------------------\n\u5148\u53ef\u4ee5\u5bf91\u4e3a\u8d77\u70b9\u548cn\u4e3a\u8d77\u70b9\u5efa\u7acb\u6700\u77ed\u8def\u6811     \n\u5efa\u51fa\u6765\u5927\u6982\u662f\u8fd9\u6837\uff1a   \n#### \u4ee5\u4e00\u4e3a\u6839\n![](https://cdn.luogu.com.cn/upload/image_hosting/01shwkm7.png)\n#### \u4ee5n\u4e3a\u6839\n![](https://cdn.luogu.com.cn/upload/image_hosting/dwjr7okl.png)     \n\u5224\u65ad\uff1a    \n\u5982\u679c(u,v)\u5728\u6700\u77ed\u8def\u5f84\u4e0a\uff1a     \n$min(1->u+|u,v|+v->n,1->v+|v,u|+u->n) = 1->n$    \n\u5176\u4e2dx->y\u8868\u793ax->y\u7684\u6700\u77ed\u8def     \n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u4e24\u4e2a\u6700\u77ed\u8def\u6811\u6765\u5224\u65ad\u6bcf\u6761\u8fb9\u5728\u4e0d\u5728\u6700\u77ed\u8def\u4e0a       \n### \u5f53\u7136\uff0c\u6700\u77ed\u8def\u6811\u5728\u8fd9\u9053\u9898\u4e2d\u7684\u8fd0\u7528\u4e0d\u6b62\u5982\u6b64      \n\u73b0\u5728\u6211\u4eec\u5bf9\u4e8e\u8be2\u95ee\u81ea\u7136\u6709\u4e00\u4e2a\u6734\u7d20\u7684\u60f3\u6cd5\uff1a     \n\u6539\u8fb9\u540e\u518d\u8dd1\u6700\u77ed\u8def     \n\u4f46\u662f\u5176\u5b9e\u8bb8\u591a\u8fb9\u6539\u53d8\u540e\u6ca1\u6709\u5f71\u54cd    \n\u6211\u4eec\u6839\u636e\u6743\u503c\u548c\u5c5e\u6027\uff08\u5728\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff09\u5206\u7c7b      \n## 1.(u,v)\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u53d8\u5927\u4e86    \n\u5f88\u660e\u663e\uff0c\u7b54\u6848\u6ca1\u6709\u6539\u53d8    \n## 2.(u,v)\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u53d8\u5c0f\u4e86    \n\u90a3\u4e48\u6211\u4eec\u8981\u5224\u65ad\u7ecf\u8fc7(u,v)\u7684\u8def\u5f84\u4f1a\u4e0d\u4f1a\u6bd4\u5f53\u524d\u6700\u77ed\u8def\u66f4\u4f18  \n\u90a3\u4e48\u6211\u4eec\u6709\u4e24\u79cd\u505a\u6cd5\uff1a    \n```\n1.1->u (u,v)  v->n\n2.1->v (v,u)  u->n \n```\n\u548c\u5f53\u524d\u6700\u77ed\u8def\u6bd4\u8f83\u4e00\u4e0b\u5373\u53ef     \n## 3.(u,v)\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u53d8\u5c0f\u4e86    \n\u8fd9\u4e2a\u4e5f\u5f88naive      \n\u76f4\u63a5\u5728\u5f53\u524d\u6700\u77ed\u8def\u57fa\u7840\u4e0a\u51cf     \n## 4.(u,v)\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u53d8\u5927\u4e86\n\u8fd9\u4e2a\u662f\u6700\u9ebb\u70e6\u7684\u60c5\u51b5   \n(u,v)\u53d8\u5316\u4f1a\u5bfc\u81f4\u539f\u6700\u77ed\u8def\u6539\u53d8    \n\u6211\u4eec\u5148\u628a\u6539\u53d8\u540e\u539f\u6700\u77ed\u8def\u957f\u5ea6\u7b97\u51fa\u6765    \n\u7136\u540e\u6211\u4eec\u5c31\u8981\u627e\u5176\u5b83\u4e0d\u662f\u539f\u6700\u77ed\u8def\u7684\u8def\u7ebf    \n\u8fd9\u65f6\u80af\u5b9a\u6709\u4eba\u8981\u8bf4\uff1a\u4e0d\u662f\u6b21\u77ed\u8def\u5c31\u597d\u4e86   \n\u4f46\u662f\u6b21\u77ed\u8def\u4e5f\u662f\u6709\u53ef\u80fd\u8fc7(u,v)\u7684    \n\u8fd9\u65f6\u5c31\u8981\u7528\u4e0a\u6700\u77ed\u8def\u6811\u4e86     \n![](https://cdn.luogu.com.cn/upload/image_hosting/oak9ctiv.png)     \n\u5982\u56fe    \n\u6211\u4eec\u601d\u8003\u7684\u662f\uff0c\u5bf9\u4e8e(u,v)\u4e0d\u5728\u539f\u6700\u77ed\u8def\u4e0a\uff0cTA\u80fd\u66f4\u65b0\u4ec0\u4e48\uff1f    \n\u9996\u5148\uff0c\u539f\u6700\u77ed\u8def**\u4e00\u5b9a\u5728\u4e24\u9897\u6700\u77ed\u8def\u6811\u4e0a**    \n\u663e\u7136   \n\u5176\u6b21\uff0c(u,v)\u4e00\u5b9a\u5bf9\u5e94\u4e86\u539f\u6700\u77ed\u8def\u4e0a\u4e24\u4e2a\u70b9u'\u548cv'      \n\u90a3\u4e48\uff0c\u5982\u679c\u6539\u53d8\u957f\u5ea6\u7684\u662f\u539f\u6700\u77ed\u8def\u4e0au'\u548cv'\u4e4b\u95f4\u7684\u6700\u77ed\u8def    \n\u6211\u4eec\u7684u,v\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\uff0c\u7ed5\u8fc7\u6539\u53d8\u957f\u5ea6\u7684\u8fb9     \n\u4e5f\u5c31\u662f\u8bf4\uff1a   \n\u6211\u4eec\u628a\u539f\u6700\u77ed\u8def\u770b\u505a\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u4e00\u6761\u4e0d\u5728\u539f\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u90fd\u53ef\u4ee5\u66f4\u65b0\u5b83\u5bf9\u5e94\u6700\u77ed\u8def\u533a\u95f4\u4e0a\u6240\u6709\u8fb9     \n\u8fd9\u4e2a\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4min          \n\u5177\u4f53\u95ee\u9898\u8fd8\u6709\u4e00\u4e2a\uff1a\u600e\u4e48\u627eu,v\u5bf9\u5e94\u5e8f\u5217\u4e0a\u7684u'\u548cv'?    \n\u53ef\u4ee5\u76f4\u63a5dfs\u4e24\u68f5\u6811\uff0c\u4ee51\u4e3a\u4f8b\uff1a   \n![](https://cdn.luogu.com.cn/upload/image_hosting/8ikbjj6b.png)     \n\u8282\u70b9\u4e0a\u7684\u6570\u5b57\u8868\u793a\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u6700\u77ed\u8def\u6811\u4e0a\u7684\u5de6\u533a\u95f4    \n\u627e\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u76f4\u63a5\u4ece1dfs\uff0c\u5982\u679c\u513f\u5b50\u4e0d\u662f\u6700\u77ed\u8def\u4e0a\u7684\u70b9\uff0c\u90a3\u4e48l\u5c31\u662f\u81ea\u5df1\u7236\u4eb2\u7684l    \n\u5982\u679c\u662f\uff0c\u90a3\u4e48l\u6539\u4e3a\u81ea\u5df1    \n\u7136\u540e\u6574\u4e2a\u64cd\u4f5c\u6d41\u7a0b\u5c31\u662f\uff1a   \n```\n1.\u4e24\u904ddijkstra\u627e\u51fa\u6700\u77ed\u8def\u6811   \n2.\u79bb\u6563\u5316\u539f\u6700\u77ed\u8def\u4e0a\u7684\u70b9\n3.\u679a\u4e3e\u975e\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u66f4\u65b0\u5e8f\u5217   \n4.\u5bf9\u4e8e\u539f\u6700\u77ed\u8def\u4e0a\u7684\u70b9\uff0c\u627e\u5230\u4e0d\u7ecf\u8fc7ta\u7684\u6700\u77ed\u8def    \n5.\u8bfb\u5165\u8be2\u95ee\uff0c\u5206\u7c7b\u8ba8\u8bba  \n```\nlast:    \n\u6211\u4e00\u5f00\u59cb\u6c42(u,v)\u5bf9\u5e94\u7684\u70b9u' v'\u7528\u4e86\u6839\u4e3a1\u7684lca(u,n)\u548c\u6839\u4e3an\u7684lca(v,1)\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u9519\u4e86\uff0c\u4e0d\u77e5\u9053\u6709\u6ca1\u6709dalao\u53ef\u4ee5\u89e3\u7b54    \nPS:\n\u6211\u4ee3\u7801\u5199\u7740\u5199\u7740\u4e0d\u7ecf\u610f\u95f4\u5c31\u53d8\u957f\u4e86\uff0c\u4f1a\u4f24\u773c\u775b\uff0c\u7406\u6027\u89c2\u770b   \n(\u4e3a\u4ec0\u4e48\u4f1a\u6709268\u884c\uff1f\uff01)\n# UPDATE 8.20   \n\u611f\u8c22 @zythonc \u63d0\u4f9b\u7684hack\u6570\u636e\uff1a   \n```\n5 5 1\n1 2 1\n2 3 2\n3 5 2\n2 4 2\n4 5 2\n2 3\n```\n\u8c03\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u6811\u5224\u65ad\u8fb9\u7684\u95ee\u9898    \n\u6539\u4e86\u4e00\u4e0b\u5c31\u597d\u4e86   \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=500005;\nstruct line{\n\tint x,y;\n\tll z;\n}s[N];\nll t[N<<2];\nint n,m,q;\nint hed1[N],tal1[N<<1];\nll val1[N<<1];\nint nxt1[N<<1],cnt1=0;\nint hed2[N],tal2[N<<1];\nll val2[N<<1];\nint nxt2[N<<1],cnt2=0;\nint hed3[N],tal3[N<<1];\nll val3[N<<1];\nint nxt3[N<<1],cnt3=0;\nint pre2[N],pre3[N];\nbool used2[N];\nll dis2[N];\nbool used3[N];\nll dis3[N];\nint vl2[N],vl3[N];\nbool isx[N]={0};\nstruct aa{ll v;int pos;};  \nbool operator<(const aa &a,const aa &b){return a.v>b.v;}\npriority_queue<aa> q2,q3;\nint nod[N]={0};\nint fa1[N][21],fa2[N][21];\nint dep1[N],dep2[N];\nll valop[N];\nint lll[N],rrr[N]; \nbool is[N]={0};\nvoid addege1(int x,int y,ll z){\n\tcnt1++;\n\ttal1[cnt1]=y;\n\tval1[cnt1]=z;\n\tnxt1[cnt1]=hed1[x];\n\thed1[x]=cnt1;\n}\nvoid addege2(int x,int y,ll z){\n\tcnt2++;\n\ttal2[cnt2]=y;\n\tval2[cnt2]=z;\n\tnxt2[cnt2]=hed2[x];\n\thed2[x]=cnt2;\n}\nvoid addege3(int x,int y,ll z){\n\tcnt3++;\n\ttal3[cnt3]=y;\n\tval3[cnt3]=z;\n\tnxt3[cnt3]=hed3[x];\n\thed3[x]=cnt3;\n}\nvoid push2(ll v,int pos){aa a;a.pos=pos,a.v=v;q2.push(a);}  \nvoid push3(ll v,int pos){aa a;a.pos=pos,a.v=v;q3.push(a);}  \nvoid dijkstra2(){\n\tmemset(used2,0,sizeof(used2));\n    memset(dis2,-1,sizeof(dis2));\n    for(int i=1;i<=n;i++)\n    {\n        dis2[i]=2147483647000000;\n        used2[i]=0;\n    }\n    dis2[1]=0;\n    push2(0,1);\n    while(!q2.empty())\n    {\n        aa u=q2.top();\n        q2.pop();\n        if(used2[u.pos]==1) continue;\n        used2[u.pos]=1;\n        for(int i=hed1[u.pos];i;i=nxt1[i])\n        {\n            int v=tal1[i];\n            if(used2[v]==0&&dis2[v]>u.v+val1[i])\n            {\n            \tpre2[v]=u.pos;\n            \tvl2[v]=val1[i];\n                dis2[v]=dis2[u.pos]+val1[i];\n                push2(dis2[v],v);\n            }\n        }\n    }\n    for(int i=1;i<=n;i++){\n    \tif(i!=1){\n    \t\taddege2(i,pre2[i],vl2[i]);\n    \t\taddege2(pre2[i],i,vl2[i]);\n\t\t}\n\t}\n}\nvoid dijkstra3(){\n\tmemset(used3,0,sizeof(used3));\n    memset(dis3,-1,sizeof(dis3));\n    for(int i=1;i<=n;i++)\n    {\n        dis3[i]=2147483647000000;\n        used3[i]=0;\n    }\n    dis3[n]=0;\n    push3(0,n);\n    while(!q3.empty())\n    {\n        aa u=q3.top();\n        q3.pop();\n        if(used3[u.pos]==1) continue;\n        used3[u.pos]=1;\n        for(int i=hed1[u.pos];i;i=nxt1[i])\n        {\n            int v=tal1[i];\n            if(used3[v]==0&&dis3[v]>u.v+val1[i])\n            {\n            \tpre3[v]=u.pos;\n            \tvl3[v]=val1[i];\n                dis3[v]=dis3[u.pos]+val1[i];\n                push3(dis3[v],v);\n            }\n        }\n    }\n    for(int i=1;i<=n;i++){\n    \tif(i!=n){\n    \t\taddege3(i,pre3[i],vl3[i]);\n    \t\taddege3(pre3[i],i,vl3[i]);\n\t\t}\n\t}\n}\nvoid dfs1(int u,int fa,int vv){\n\tlll[u]=vv;\n\tfor(int i=hed2[u];i;i=nxt2[i]){\n\t\tint v=tal2[i],val=val2[i];\n\t\tif(v==fa) continue;\n\t\tdep1[v]=dep1[u]+1;\n\t\tfa1[v][0]=u;\n\t\tif(nod[v]==-1) dfs1(v,u,vv); \n\t\telse dfs1(v,u,nod[v]); \n\t}\n}\nvoid dfs2(int u,int fa,int vv){\n\trrr[u]=vv;\n\tfor(int i=hed3[u];i;i=nxt3[i]){\n\t\tint v=tal3[i],val=val3[i];\n\t\tif(v==fa) continue;\n\t\tdep2[v]=dep2[u]+1;\n\t\tfa2[v][0]=u;\n\t\tif(nod[v]==-1) dfs2(v,u,vv);\n\t\telse dfs2(v,u,nod[v]); \n\t}\n}\nvoid build(int l,int r,int num){\n\tt[num]=2147483647000000ll;\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,num<<1);\n\tbuild(mid+1,r,num<<1|1);\n}\nvoid modify(int l,int r,int num,int L,int R,ll SUM){\n\tif(l>R||r<L) return;\n\tif(l>=L&&r<=R){\n\t\tt[num]=min(t[num],SUM);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tmodify(l,mid,num<<1,L,R,SUM);\n\tmodify(mid+1,r,num<<1|1,L,R,SUM);\n}\nll ask(int l,int r,int num,int K){\n\tif(l>K||r<K) return 2147483647000000ll;\n\tif(l==r) return t[num];\n\tint mid=(l+r)>>1;\n\treturn min(t[num],min(ask(l,mid,num<<1,K),ask(mid+1,r,num<<1|1,K)));\n}\nint lca1(int x,int y){\n\tif(dep1[x]>dep1[y]) swap(x,y);\n\tfor(int i=20;i>=0;i--)\n\t\tif(dep1[fa1[y][i]]>=dep1[y])\n\t\t\ty=fa1[y][i];\n\tif(x==y) return x;\n\tfor(int i=20;i>=0;i--)\n\t\tif(fa1[x][i]!=fa1[y][i])\n\t\t\tx=fa1[x][i],y=fa1[y][i];\n\treturn fa1[x][0];\n}\nint lca2(int x,int y){\n\tif(dep2[x]>dep2[y]) swap(x,y);\n\tfor(int i=20;i>=0;i--)\n\t\tif(dep2[fa2[y][i]]>=dep2[y])\n\t\t\ty=fa2[y][i];\n\tif(x==y) return x;\n\tfor(int i=20;i>=0;i--)\n\t\tif(fa2[x][i]!=fa2[y][i])\n\t\t\tx=fa2[x][i],y=fa2[y][i];\n\treturn fa2[x][0];\n}\nint cnt;\nvoid calc(int u,int v,ll valve){\n\t//if(L>R) swap(L,R);\n\t//cout<<L<<\" \"<<R<<\" \"<<dis3[u]+valve+dis2[v]<<endl;\n\tmodify(1,cnt,1,lll[u],rrr[v]-1,dis2[u]+valve+dis3[v]);\n}\nll len;\nbool check(int i){\n\tif(is[s[i].x]==0||is[s[i].y]==0) return 0; \n\tif(min(dis2[s[i].x]+dis3[s[i].y]+s[i].z,dis3[s[i].x]+dis2[s[i].y]+s[i].z)==len) return 1;\n\treturn 0; \n}\nint main(){\n\tmemset(nod,0,sizeof(nod));\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y;ll z;\n\t\tscanf(\"%d%d%lld\",&x,&y,&z);\n\t\ts[i].x=x,s[i].y=y,s[i].z=z;\n\t\taddege1(x,y,z);\n\t\taddege1(y,x,z); \n\t} \n\tdijkstra2();\n\tdijkstra3();\n\tmemset(nod,-1,sizeof(nod));\n\tint u=1;\n\tcnt=1;\n\tnod[1]=1,is[1]=1;\n\twhile(pre3[u]!=n) u=pre3[u],nod[u]=++cnt,is[u]=1;\n\tnod[n]=++cnt,is[n]=1;\n\tdep1[1]=1,fa1[1][0]=1;\n\tdfs1(1,1,nod[1]);\n\tdep2[n]=1,fa2[n][0]=n;\n\tdfs2(n,n,nod[n]);\n\tbuild(1,cnt,1);\n\tfor(int i=1;i<=20;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tfa1[i][j]=fa1[fa1[i][j-1]][j-1];\n\t\t\tfa2[i][j]=fa2[fa2[i][j-1]][j-1];\n\t\t}\n\t}\n\tlen=dis2[n];\n\tfor(int i=1;i<=m;i++){\n\t\tif(check(i)) continue;\n\t\tcalc(s[i].x,s[i].y,s[i].z);\n\t\tcalc(s[i].y,s[i].x,s[i].z);\n\t}\n\tfor(int i=1;i<cnt;i++) valop[i]=ask(1,cnt,1,i);\n\t//cout<<\"((()))\"<<endl;\n\tfor(int w=1;w<=q;w++){\n\t\tint t;ll X;\n\t\tscanf(\"%d%lld\",&t,&X);\n\t\tif(check(t)){\n\t\t\tif(X<s[t].z){\n\t\t\t\tprintf(\"%lld\\n\",len-s[t].z+X);\n\t\t\t}\n\t\t\telse{\n\t\t\t\t\n\t\t\t//\tif(nod[s[t].x]==-1||nod[s[t].y]==-1) cout<<\"&&&&&\"<<s[t].x<<\" \"<<s[t].y<<endl;\n\t\t\t\tll sum1=len-s[t].z+X;\n\t\t\t\tint p=min(nod[s[t].x],nod[s[t].y]);\n\t\t\t\tprintf(\"%lld\\n\",min(sum1,valop[p]));\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(X<s[t].z){\n\t\t\t\tint x=s[t].x,y=s[t].y;\n\t\t\t\tprintf(\"%lld\\n\",min(len,min(dis2[x]+dis3[y]+X,dis3[x]+dis2[y]+X)));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tprintf(\"%lld\\n\",len);\n\t\t\t}\n\t\t}\n\t} \n\treturn 0;\n} \n```",
        "postTime": 1595637012,
        "uid": 61757,
        "name": "Seanq",
        "ccfLevel": 0,
        "title": "\u96f6\u70b9\u8ba1\u52121-CF1163F Indecisive Taxi Fee"
    },
    {
        "content": "## \u9898\u610f\n\n\u52a8\u6001\u4fee\u6539\u8fb9\u6743\uff0c\u6c42\u4ece $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u3002\n\n## \u5206\u6790\n\n\u9996\u5148\u6c42\u51fa\u4ece $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u4fee\u6539\uff0c\u6709 $2$ \u79cd\u60c5\u51b5\uff1a\n\n1. \u4fee\u6539\u7684\u8fb9\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\n\n\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u5fc5\u5b9a\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\u548c\u539f\u6700\u77ed\u8def\u7684\u6700\u5c0f\u503c\u3002\u81f3\u4e8e\u5982\u4f55\u6c42\u5fc5\u5b9a\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\uff0c\u5c31\u53cd\u5411\u8dd1\u4e00\u8fb9 `Dijkstra`\uff0c\u6700\u77ed\u8def\u957f\u5ea6\u5c31\u662f $\\min\\{\\operatorname{dis}_ u + \\operatorname{rdis}_ v + w, \\operatorname{dis}_ v + \\operatorname{rdis}_ u + w\\}$\uff0c\u5176\u4e2d $\\operatorname{rdis}_ u$ \u8868\u793a $n$ \u5230 $u$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n2. \u4fee\u6539\u7684\u8fb9\u5728\u6700\u77ed\u8def\u4e0a\n\n\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u539f\u6700\u77ed\u8def\u73b0\u5728\u7684\u957f\u5ea6\u4e0e\u4e0d\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u7684\u6700\u5c0f\u503c\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u5f3a\u5236\u7ecf\u8fc7\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u5c31\u662f $1 \\rightarrow p$, $p \\rightarrow u$, $u \\rightarrow v$, $v \\rightarrow q$, $q \\rightarrow n$\uff0c\u5176\u4e2d $p$ \u8868\u793a\u4ece $1$ \u5230 $n$ \u6700\u77ed\u8def\u5f84\u4e0a\u8ddd\u79bb $u$ \u6700\u8fd1\u7684\u70b9\uff0c$q$ \u8868\u793a\u4ece $1$ \u5230 $n$ \u6700\u77ed\u8def\u5f84\u4e0a\u8ddd\u79bb $v$ \u6700\u8fd1\u7684\u70b9\u3002\u5206\u522b\u6c42\u51fa\u4ece $1$ \u548c $n$ \u4e3a\u51fa\u53d1\u70b9\u7684\u6700\u77ed\u8def\u5f84\u6811\uff0c\u90a3\u4e48 $p$ \u5c31\u662f\u6700\u77ed\u8def\u5f84\u4e2d $u$ \u5728 $1$ \u5f00\u59cb\u7684\u6811\u4e0a\u6700\u8fd1\u7684\u7236\u4eb2\uff0c\u800c $q$ \u5c31\u662f\u6700\u77ed\u8def\u5f84\u4e2d $v$ \u5728 $n$ \u5f00\u59cb\u7684\u6811\u4e0a\u6700\u8fd1\u7684\u7236\u4eb2\u3002\n\n\u4f46\u662f\uff0c\u8981\u6c42\u7684\u662f**\u4e0d\u7ecf\u8fc7**\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u4e0d\u5728\u6700\u77ed\u8def\u5f84\u4e2d\u7684\u8fb9 $(u, v)$\uff0c\u8981\u5c1d\u8bd5\u4e00\u904d\u5fc5\u5b9a\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u5fc5\u5b9a\u7ecf\u8fc7\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u53ea\u80fd\u66f4\u65b0\u4e0d\u7ecf\u8fc7\u4ece $p$ \u5230 $q$ \u7684\u4e00\u6761\u8fb9\u65f6\u7684\u6700\u77ed\u8def\u3002\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\u7528\u4e8e\u7ef4\u62a4\u4e0d\u7ecf\u8fc7\u6700\u77ed\u8def\u5f84\u4e0a\u4e00\u6761\u8fb9\u65f6\u7684\u6700\u77ed\u8def\uff0c\u64cd\u4f5c\u65f6\u7684\u7b54\u6848\u5c31\u662f $\\min\\{\\operatorname{dis}_ n + y - w, \\operatorname{query}(e)\\}$\n\n## \u4ee3\u7801\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#define lld long long\n#define cst(x) const x\n#define cref(x) const x&\n#define reg(x) register x\nusing namespace std;\ncst(int) prec=6;\ntemplate<class T>inline void writeInt(reg(T)x){x=(x<0?(putchar('-'),-x):x);reg(char)c=0;static char s[50];do{s[++c]=x%10,x/=10;}while(x);for(reg(int)i=c;i;--i)putchar(s[i]^48);}\ntemplate<class T>inline void readInt(reg(T&)x){x=0;reg(T)fl=1;reg(char)ch;for(;(ch=getchar(),ch=='-'&&(fl=-1),ch)<48||ch>57;);for(x=ch&15;(ch=getchar())>=48&&ch<=57;x=(x<<3)+(x<<1)+(ch&15));x*=fl;}\ntemplate<class T>inline void writeFloat(reg(T)x){x=(x<0?(putchar('-'),-x):x);reg(T)cpy=x,add=0.5;for(reg(int)i=prec;i;--i)add/=10;writeInt((lld)(cpy+=add)),putchar('.'),cpy-=(lld)cpy;for(reg(int)i=prec;i;--i)putchar((int)(cpy=(cpy-(int)cpy)*10)+'0');}\ntemplate<class T>inline void readFloat(reg(T&)x){x=0;reg(char)ch;reg(T)fl=1,val=0.1;for(;(ch=getchar(),ch=='-'&&(fl=-1),ch)<48||ch>57;);for(x=ch&15;((ch=getchar())>=48&&ch<=57);)x=x*10+(ch&15);if(ch=='.')for(;((ch=getchar())>=48&&ch<=57);val/=10)x+=(ch&15)*val;x*=fl;}\ninline void writeStr(reg(cst(char*))str){for(reg(cst(char*))p=str;*p;++p)putchar(*p);}\ninline void readStr(reg(char*)str){reg(char*)p=str;for(;(*p=getchar())==' '||*p=='\\n'&&~*p;);for(;*p!=' '&&*p!='\\n'&&~*p;*(++p)=getchar());*p=0;}\nconst int N = 200010;\nint n, m, q;\nint u[N], v[N], w[N];\nstruct edge { int to, val, id; };\nvector<edge> es[N];\ninline void addedge(int u, int v, int w, int id) {\n\tes[u].emplace_back(edge{v, w, id});\n}\nvector<int> path;\nstruct SGT {\n\tlld tr[N << 2];\n\tSGT() { memset(tr, 0x3f, sizeof(tr)); }\n\tinline void modify(int k, int L, int R, int l, int r, lld val) {\n\t\tif (l > r) return;\n\t\tif (l <= L && R <= r) return void(tr[k] = min(tr[k], val));\n\t\tint mid = (L + R) >> 1;\n\t\tif (l <= mid) modify(k << 1, L, mid, l, r, val);\n\t\tif (mid < r) modify(k << 1 | 1, mid + 1, R, l, r, val);\n\t}\n\tinline lld query(int k, int L, int R, int p) {\n\t\tif (L == R) return tr[k];\n\t\tint mid = (L + R) >> 1;\n\t\tif (p <= mid) return min(tr[k], query(k << 1, L, mid, p));\n\t\treturn min(tr[k], query(k << 1 | 1, mid + 1, R, p));\n\t}\n} tr;\npriority_queue<pair<lld, int>, vector<pair<lld, int> >, greater<pair<lld, int> > > pq;\nlld dis[N], rdis[N];\nint idx[N], eid2nd[N], pre[N], nxt[N], eid[N];\ninline int findpre(int u) { return pre[u] == u ? u : pre[u] = findpre(pre[u]); }\ninline int findnxt(int u) { return nxt[u] == u ? u : nxt[u] = findnxt(nxt[u]); }\ninline void Dijkstra() {\n\tfor (int i = 2; i <= n; ++ i) dis[i] = 0x3f3f3f3f3f3f3f3fll;\n\tpre[1] = 1, pq.push(make_pair(0, 1));\n\tfor (; pq.size(); ) {\n\t\tlld d = pq.top().first; int u = pq.top().second; pq.pop();\n\t\tif (dis[u] != d) continue;\n\t\tfor (const auto &[v, w, id] : es[u]) {\n\t\t\tlld ndis = d + w;\n\t\t\tif (ndis < dis[v]) {\n\t\t\t\tpq.push(make_pair(dis[v] = ndis, v));\n\t\t\t\tpre[v] = u, eid[v] = id;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = n; i ^ 1; i = pre[i]) path.push_back(i);\n\treverse(path.begin(), path.end());\n\tfor (int i : path) pre[i] = i;\n\tfor (int i = 0; i < path.size(); ++ i) idx[path[i]] = i + 1, eid2nd[eid[path[i]]] = i + 1;\n\tmemset(rdis, 0x3f, sizeof(rdis));\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tfindpre(i);\n\t\tif (i == pre[i]) pq.push(make_pair(rdis[i] = dis[n] - dis[i], nxt[i] = i));\n\t}\n\tfor (; pq.size(); ) {\n\t\tlld d = pq.top().first; int u = pq.top().second; pq.pop();\n\t\tif (rdis[u] != d) continue;\n\t\tfor (const auto &[v, w, id] : es[u]) {\n\t\t\tlld ndis = d + w;\n\t\t\tif (ndis < rdis[v]) {\n\t\t\t\tpq.push(make_pair(rdis[v] = ndis, v));\n\t\t\t\tnxt[v] = u;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; ++ i) findnxt(i);\n}\nint main() {\n\treadInt(n), readInt(m), readInt(q);\n\tfor (int i = 1; i <= m; ++ i) {\n\t\treadInt(u[i]), readInt(v[i]), readInt(w[i]);\n\t\taddedge(u[i], v[i], w[i], i);\n\t\taddedge(v[i], u[i], w[i], i);\n\t}\n\tDijkstra();\n\tfor (int i = 1; i <= n; ++ i)\n\t\tfor (const auto &[v, w, id] : es[i])\n\t\t\tif (!eid2nd[id]) {\n\t\t\t\tlld val = dis[i] + rdis[v] + w;\n\t\t\t\ttr.modify(1, 1, path.size(), idx[pre[i]] + 1, idx[nxt[v]], val);\n\t\t\t}\n\tfor (int x, y; q --; ) {\n\t\treadInt(x), readInt(y);\n\t\tlld ans;\n\t\tif (eid2nd[x]) ans = min(dis[n] + y - w[x], tr.query(1, 1, path.size(), eid2nd[x]));\n\t\telse ans = min(dis[n], min(dis[u[x]] + y + rdis[v[x]], dis[v[x]] + y + rdis[u[x]]));\n\t\twriteInt(ans);\n\t\tputchar('\\n');\n\t}\n}\n```",
        "postTime": 1666178839,
        "uid": 228486,
        "name": "SunsetSamsara",
        "ccfLevel": 7,
        "title": "CF1163F Indecisive Taxi Fee \u9898\u89e3"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Coros-Trusds/p/16336257.html)\n\n$\\rm update:$ \u6dfb\u52a0\u4e86\u4ee3\u7801\u3002\n\n# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u4f60\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u8fde\u63a5\u70b9 $u, v$\uff0c\u5e76\u4e14\u6709\u4e2a\u957f\u5ea6 $w$\u3002\n\n\u6709 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u4f60\u4e00\u5bf9 $t, x$\uff0c\u8868\u793a\u4ec5\u5f53\u524d\u8be2\u95ee\u4e0b\uff0c\u5c06 $t$ \u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u4fee\u6539\u4e3a $x$\uff0c\u8bf7\u4f60\u8f93\u51fa\u5f53\u524d $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n# \u9898\u76ee\u5206\u6790\n\n\u9996\u5148\u6211\u4eec\u5148\u7528 $\\verb!Dijkstra!$ \u6c42\u51fa\u4ece $1$ \u5f00\u59cb\u7684\u6700\u77ed\u8def $dis[i]$\u3002\n\n\u7136\u540e\u63a5\u4e0b\u6765\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff08\u6211\u4eec\u6ce8\u610f\u5230\u6bcf\u6b21\u8be2\u95ee\u76f8\u4e92\u72ec\u7acb\uff09\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a $4$ \u79cd\u60c5\u51b5\uff1a\n\n+ $t$ \u4e0d\u5728\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u8fb9\u6743\u53d8\u5927\uff1a\n\n\u672c\u6765\u5c31\u4e0d\u5728\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u8fb9\u6743\u8fd8\u53d8\u5927\u4e86\uff0c\u7b54\u6848\u4e0d\u4f1a\u53d8\uff0c\u8fd8\u662f $dis[n]$\u3002\n\n+ $t$ \u4e0d\u5728\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u8fb9\u6743\u53d8\u5c0f\uff1a\n\n\u5047\u8bbe\u8fd9\u6761\u8fb9\u53ef\u4ee5\u8868\u793a\u4e3a $(u,v)$\uff0c\u7b54\u6848\u5c31\u662f $\\min\\{dist(1,u)+dist(v,n)+x',dist(1,v)+dist(u,n)+x'\\}$\u3002\n\n$dist(1,u),dist(1,v)$ \u662f\u7b49\u4ef7\u4e8e $dis[u],dis[v]$ \u7684\uff0c\u800c $dist(u,n),dist(v,n)$ \u5462\uff1f**\u6211\u4eec\u6700\u5f00\u59cb\u4e5f\u4ece $n$ \u5f00\u59cb\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u5b58\u50a8\u5230 $dis'[i]$ \u4e2d\u5c31\u597d\u4e86\u3002** \u8fd9\u6837 $dist(u,n),dist(v,n)$ \u7b49\u4ef7\u4e8e $dis'[u],dis'[v]$\u3002\n\n+ $t$ \u5728\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u4e14\u8fb9\u6743\u53d8\u5c0f\uff1a\n\n\u8fd9\u4e2a\u7b80\u5355\u3002\u672c\u6765\u5c31\u662f\u6700\u77ed\u8def\u5f84\u4e86\uff0c\u8fb9\u6743\u8fd8\u53d8\u5c0f\u4e86\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u80af\u5b9a\u8fd8\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u3002\u6b64\u65f6\u7684\u7b54\u6848\u662f $dis[n]-x+x'$\uff0c$x$ \u662f\u539f\u6743\u503c\uff0c$x'$ \u662f\u73b0\u6743\u503c\u3002\n\n+ $t$ \u5728\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u4e14\u8fb9\u6743\u53d8\u5927\uff1a\n\n\u4e0d\u59a8\u4ee4\u6700\u77ed\u8def\u4e0a\u7684\u6240\u6709\u8fb9\u7684\u6bcf\u4e2a\u5143\u7d20\u5206\u522b\u4e3a $e_1,e_2,\\cdots,e_k$\uff08\u8fde\u7740\u7684\uff09\u3002\n\n\u5f15\u51fa\u7ed3\u8bba\uff1a\u7ecf\u8fc7\u4e00\u6761\u8fb9 $(u,v)$ \u7684\u6700\u77ed\u8def\u5f84\uff0c$1\\to u$ \u7684\u6700\u77ed\u8def\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u4e00\u6bb5 $e$ \u7684\u524d\u7f00\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\uff0c$v\\to n$ \u7684\u6700\u77ed\u8def\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u4e00\u6bb5 $e$ \u7684\u540e\u7f00\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\u3002\u5373 **\u4e0e\u6700\u77ed\u8def\u4e0d\u91cd\u5408\u7684\u90e8\u5206\u6700\u591a\u53ea\u6709\u4e00\u6bb5\u3002**\n\n~~\u8bc1\u660e\u4e0d\u96be\u7559\u4f5c\u4e60\u9898\u3002~~\n\n\u7b80\u5355\u8bc1\u660e\u4e00\u4e0b\uff1a\n\n\u53cd\u8bc1\u6cd5\u3002\u5982\u679c\u591a\u4e8e\u4e00\u6bb5\u4e0d\u91cd\u5408\uff0c\u90a3\u4e48\u4e00\u6761\u8fb9\u4e0d\u53ef\u80fd\u5305\u542b\u4e8e\u591a\u4e2a\u4e0d\u91cd\u5408\u7684\u6bb5\u4e2d\uff0c\u5219\u5176\u4ed6\u6bb5\u53d6\u6700\u77ed\u8def\u4f1a\u66f4\u4f18\u3002\n\n------\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u70b9 $u$\uff0c\u8bbe $1\\to u$ \u7684\u6700\u77ed\u8def\u5fc5\u7ecf\u8fc7\u7684\u524d\u7f00\u4e3a $e_1,e_2,\\cdots,e_{L[u]}$\uff0c\u540e\u7f00\u662f $e_{R[u]},\\cdots,e_k$\u3002\n\n\n\u95ee\u9898\u8f6c\u6362\u4e3a\u6c42\u4e0d\u7ecf\u8fc7 $e$ \u4e0a\u67d0\u6761\u8fb9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u662f\u591a\u5c11\u3002\n\n\u4e0d\u7ecf\u8fc7 $(u,v)$ \u65f6 $1\\to n$ \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u5373\u4e0d\u7ecf\u8fc7 $e_{L[u]+1},\\cdots,e_{R[v]-1}$ \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n\n\u7ebf\u6bb5\u6811\u6c42\u89e3\uff0c$[l,r]$ \u8868\u793a\u4e0d\u7ecf\u8fc7 $e_l\\sim e_r$ \u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\uff0c\u7136\u540e\u62ff\u7ecf\u8fc7 $(u,v)$ \u7684\u6700\u77ed\u8def\u957f\u5ea6 $dis[u]+dis'[v]+x$ \u66f4\u65b0\u7ebf\u6bb5\u6811\u3002\n\n\n# \u4ee3\u7801\n\n```cpp\n// Problem: CF1163F Indecisive Taxi Fee\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/CF1163F\n// Memory Limit: 500 MB\n// Time Limit: 2000 ms\n// Date:2022-05-30 22:27\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include <iostream>\n#include <cstdio>\n#include <climits>//need \"INT_MAX\",\"INT_MIN\"\n#include <cstring>//need \"memset\"\n#include <numeric>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <utility>\n#define int long long\n#define enter putchar(10)\n#define debug(c,que) std::cerr << #c << \" = \" << c << que\n#define cek(c) puts(c)\n#define blow(arr,st,ed,w) for(register int i = (st);i <= (ed); ++ i) std::cout << arr[i] << w;\n#define speed_up() std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)\n#define mst(a,k) memset(a,k,sizeof(a))\n#define stop return(0)\nconst int mod = 1e9 + 7;\ninline int MOD(int x) {\n\tif(x < 0) x += mod;\n\treturn x % mod;\n}\nnamespace Newstd {\n\tinline int read() {\n\t\tint ret = 0,f = 0;char ch = getchar();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif(ch == '-') f = 1;\n\t\t\tch = getchar();\n\t\t}\n\t\twhile (isdigit(ch)) {\n\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\tch = getchar();\n\t\t}\n\t\treturn f ? -ret : ret;\n\t}\n\tinline double double_read() {\n\t\tlong long ret = 0,w = 1,aft = 0,dot = 0,num = 0;\n\t\tchar ch = getchar();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif (ch == '-') w = -1;\n\t\t\tch = getchar();\n\t\t}\n\t\twhile (isdigit(ch) || ch == '.') {\n\t\t\tif (ch == '.') {\n\t\t\t\tdot = 1;\n\t\t\t} else if (dot == 0) {\n\t\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\t} else {\n\t\t\t\taft = (aft << 3) + (aft << 1) + ch - '0';\n\t\t\t\tnum ++;\n\t\t\t}\n\t\t\tch = getchar();\n\t\t}\n\t\treturn (pow(0.1,num) * aft + ret) * w;\n\t}\n\tinline void write(int x) {\n\t\tif(x < 0) {\n\t\t\tputchar('-');\n\t\t\tx = -x;\n\t\t}\n\t\tif(x > 9) write(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nusing namespace Newstd;\nusing PII = std::pair<int,int>;\n\nconst int INF = 0x3f3f3f3f3f3f3f3f;\nconst int N = 2e5 + 5;\nstruct Graph {\n\tint v,w,nxt;\n} gra[N << 1];\nint head[N],dis_s[N],dis_t[N],L[N],R[N],pre[N],ind[N];//ind:\u6700\u77ed\u8def\u4e0a\u6bcf\u6761\u8fb9\u7684\u7f16\u53f7 \nbool vis[N],path[N];\nint n,m,q,len,idx = 1;\ninline void add(int u,int v,int w) {\n\tgra[++ idx].v = v,gra[idx].w = w,gra[idx].nxt = head[u],head[u] = idx;\n}\ninline void dijkstra(int dis[],int st,int type = 0) {\n\tmst(vis,false);\n\tfor (register int i = 1;i <= n; ++ i) dis[i] = INF;\n\tdis[st] = 0;\n\tstd::priority_queue<PII,std::vector<PII>,std::greater<PII> >q;\n\tq.push(std::make_pair(dis[st],st));\n\twhile (!q.empty()) {\n\t\tint u = q.top().second;q.pop();\n\t\tif (vis[u]) continue;\n\t\tvis[u] = true;\n\t\tfor (register int i = head[u];i;i = gra[i].nxt) {\n\t\t\tint v = gra[i].v,w = gra[i].w;\n//\t\t\tdebug(v,',');debug(w,'\\n');\n//\t\t\tdebug(dis[v],',');debug(dis[u] + w,'\\n');\n\t\t\tif (dis[v] > dis[u] + w) {\n\t\t\t\tdis[v] = dis[u] + w,pre[v] = i;\n\t\t\t\tq.push(std::make_pair(dis[v],v));\n\t\t\t\tif (type == 1 && path[v] == false) L[v] = L[u];\n\t\t\t\telse if (type == 2 && path[v] == false) R[v] = R[u];\n\t\t\t}\n\t\t}\n\t}\n}\nstruct Segment_Tree {\n\tstruct Node {\n\t\tint l,r;\n\t\tint Min;\n\t} node[N << 2];\n\t#define lson (p << 1)\n\t#define rson (p << 1 | 1)\n\tinline void pushup(int p) {\n\t\tnode[p].Min = std::min(node[lson].Min,node[rson].Min);\n\t}\n\tinline void build(int p,int l,int r) {\n\t\tnode[p].l = l,node[p].r = r,node[p].Min = INF;\n\t\tif (l == r) {\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tbuild(lson,l,mid),build(rson,mid + 1,r);\n\t\tpushup(p);\n\t}\n\tinline void update(int x,int y,int p,int k) {\n\t\tif (x <= node[p].l && node[p].r <= y) {\n\t\t\tnode[p].Min = std::min(node[p].Min,k);\n\t\t\treturn;\n\t\t}\n\t\tint mid = node[p].l + node[p].r >> 1;\n\t\tif (x <= mid) update(x,y,lson,k);\n\t\tif (y > mid) update(x,y,rson,k);\n\t\t// pushup(p); \n\t}\n\tinline int query(int x,int y,int p) {\n\t\tif (x <= node[p].l && node[p].r <= y) {\n\t\t\treturn node[p].Min;\n\t\t}\n\t\tint mid = node[p].l + node[p].r >> 1,res = node[p].Min;\n\t\tif (x <= mid) res = std::min(res,query(x,y,lson));\n\t\tif (y > mid) res = std::min(res,query(x,y,rson));\n\t\treturn res;\n\t}\n\t#undef lson\n\t#undef rson \n} seg; \nsigned main(void) {\n\tn = read(),m = read(),q = read();\n\tfor (register int i = 1;i <= m; ++ i) {\n\t\tint u = read(),v = read(),w = read();\n\t\tadd(u,v,w),add(v,u,w);\n\t}\n\tdijkstra(dis_t,n);\n\tL[1] = R[1] = 0,path[1] = true;\n\tint ver = 1;\n\tfor (register int i = 1;ver != n; ++ i) {\n\t\tint id = pre[ver];\n\t\tind[id / 2] = i;\n\t\tlen ++;\n\t\tver = gra[id].v ^ gra[id ^ 1].v ^ ver;\n\t\tpath[ver] = true,L[ver] = R[ver] = i;\n\t}\n\tdijkstra(dis_s,1,1),dijkstra(dis_t,n,2);\n\tseg.build(1,1,len);\n\tfor (register int i = 1;i <= m; ++ i) {\n\t\tif (!ind[i]) {\n\t\t\tint u = gra[i * 2].v,v = gra[i * 2 + 1].v,w = gra[i * 2].w;\n\t\t\tif (L[u] + 1 <= R[v]) seg.update(L[u] + 1,R[v],1,dis_s[u] + dis_t[v] + w);\n\t\t\tif (L[v] + 1 <= R[u]) seg.update(L[v] + 1,R[u],1,dis_s[v] + dis_t[u] + w);\n\t\t}\n\t}\n\twhile (q --) {\n\t\tint t = read(),x = read();\n\t\tint u = gra[t * 2].v,v = gra[t * 2 + 1].v,w = gra[t * 2].w;\n\t\t// for (register int i = 1;i <= len; ++ i) printf(\"%lld,\",seg.query(ind[i],ind[i],1));\n\t\t// puts(\"\");\n\t\tif (!ind[t]) {\n\t\t\tif (x > w) {\n\t\t\t\tprintf(\"%lld\\n\",dis_s[n]);\n\t\t\t} else if (x <= w) {\n\t\t\t\tprintf(\"%lld\\n\",std::min(dis_s[n],std::min(dis_s[u] + dis_t[v] + x,dis_s[v] + dis_t[u] + x)));\n\t\t\t}\n\t\t} else {\n\t\t\tif (x > w) {\n\t\t\t\tprintf(\"%lld\\n\",std::min(dis_s[n] - w + x,seg.query(ind[t],ind[t],1)));\n\t\t\t} else if (x <= w) {\n\t\t\t\tprintf(\"%lld\\n\",dis_s[n] - w + x);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1653923307,
        "uid": 430409,
        "name": "Coros_Trusds",
        "ccfLevel": 6,
        "title": "CF1163F Indecisive Taxi Fee"
    },
    {
        "content": "> [CF1163F Indecisive Taxi Fee](https://www.luogu.com.cn/problem/CF1163F) *3000\n\n\u8001\u9898\u65b0\u505a\u3002\n\n\u9996\u5148\u6c42\u51fa $1\\to n$ \u7684\u6700\u77ed\u8def $P = p_0(= 1)\\xrightarrow {e_1} p_1 \\xrightarrow {e_2} \\cdots \\xrightarrow {e_L} p_L(= n)$\u3002\u8bbe $t = (u, v)$\u3002\n\n\u5f53 $t\\notin P$ \u65f6\uff0c\u65b0\u7684\u6700\u77ed\u8def\u8981\u4e48\u4e0d\u53d8\uff0c\u8981\u4e48\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u3002\u5f88\u663e\u7136\uff0c\u5f3a\u5236\u7ecf\u8fc7\u67d0\u6761\u8fb9 $(u, v)$ \u7684\u6700\u77ed\u8def\u7b49\u4e8e $1$ \u5230 $u$ \u7684\u6700\u77ed\u8def\uff0c\u52a0\u4e0a $v$ \u5230 $n$ \u7684\u6700\u77ed\u8def\uff0c\u518d\u52a0\u4e0a $w_t$\uff1b\u6216\u8005\u4ea4\u6362 $u, v$ \u7684\u5730\u4f4d\uff0c\u4e24\u79cd\u60c5\u51b5\u53d6\u4e2a\u6700\u5c0f\u503c\u3002\u8bbe $1$ \u5230 $u$ \u7684\u6700\u77ed\u8def\u4e3a $pre(u)$\uff0c$v$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u4e3a $suf(v)$\uff0c\u5219\u7b54\u6848\u53ef\u5199\u4e3a\n$$\n\\min(w(P), w(u, v) + \\min(pre(u) + suf(v), suf(u) + pre(v))\n$$\n\u5f53 $t\\in P$ \u65f6\uff0c\u65b0\u7684\u6700\u77ed\u8def\u8981\u4e48\u662f $w(P) - w_t + x$\uff0c\u8981\u4e48\u662f\u5f3a\u5236\u4e0d\u7ecf\u8fc7 $t$ \u7684\u6700\u77ed\u8def\uff08\u5f53 $x \\leq w_t$ \u65f6\u5fc5\u7136\u662f\u524d\u8005\uff0c\u4f46\u662f\u5206\u7c7b\u8ba8\u8bba\u592a\u9ebb\u70e6\u4e86\uff0c\u4e0d\u5982\u4e24\u79cd\u60c5\u51b5\u76f4\u63a5\u53d6 $\\min$\uff09\u3002\u73b0\u5728\u552f\u4e00\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u5bf9\u6bcf\u6761\u8fb9 $t$\uff0c\u6c42\u89e3 $L(t)$ \u8868\u793a\u5f3a\u5236\u4e0d\u7ecf\u8fc7 $t$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n\u8003\u8651\u6c42\u51fa\u539f\u56fe\u7684\u4efb\u610f\u4e00\u68f5\u4ece $1$ \u548c\u4ece $n$ \u5f00\u59cb\u7684\u6700\u77ed\u8def\u6811 $T_1$ \u548c $T_n$\u3002\u9700\u4fdd\u8bc1\u8fd9\u4e24\u68f5\u6811\u4e0a $1$ \u4e0e $n$ \u4e4b\u95f4\u7684\u8def\u5f84\u5b8c\u5168\u76f8\u7b49\uff0c\u5373\u8bbe $P = T_1(1\\to n)$\uff0c\u90a3\u4e48 $P$ \u5e94\u5f53\u7b49\u4e8e $T_n(1\\to n)$\u3002\u8fd9\u53ef\u4ee5\u5148\u6c42\u51fa $T_1$ \u4ee5\u53ca\u5bf9\u5e94\u7684 $P$\uff0c\u518d\u6839\u636e $P$ \u6c42 $T_n$\u3002\u663e\u7136\uff0c$pre(u)$ \u7b49\u4e8e $T_1$ \u4e0a $u$ \u7684\u6df1\u5ea6\uff0c$suf(v)$ \u7b49\u4e8e $T_n$ \u4e0a $v$ \u7684\u6df1\u5ea6\u3002\n\n\u8bbe $pr(u)$ \u8868\u793a $T_1(1\\to u)$ \u4e0e $P$ \u7684\u6700\u540e\u4e00\u4e2a\u4ea4\u70b9\uff08\u6216\u8005\u8bf4\uff0c$pr(u)$ \u7b49\u4e8e $T_1$ \u4e0a $n$ \u548c $u$ \u7684 LCA\uff09\uff0c$su(v)$ \u8868\u793a $T_n(v\\to n)$ \u4e0e $P$ \u7684\u7b2c\u4e00\u4e2a\u4ea4\u70b9\u3002\u6362\u79cd\u89d2\u5ea6\u7406\u89e3\uff0c$pr(u)$ \u5c31\u662f\u4ece $1$ \u5f00\u59cb\u5230 $u$ \u7684\u6700\u77ed\u8def\u4e0a\uff0c\u6700\u540e\u4e00\u4e2a\u4e0e\u4ece $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u5f84\u91cd\u5408\u7684\u8282\u70b9\uff0c\u5bf9\u4e8e $su(v)$ \u540c\u7406\u3002\n\n\u5bf9\u4e8e\u4e00\u6761\u4e0d\u5c5e\u4e8e $P$ \u7684\u8fb9 $(u, v)$\uff0c\u6211\u4eec\u5c1d\u8bd5\u5f3a\u5236\u7ecf\u8fc7\u8fd9\u6761\u8fb9\uff08\u4e24\u4e2a\u65b9\u5411\u90fd\u8981\u8bd5\uff0c\u4ee5\u4e0b\u4ec5\u8ba8\u8bba\u4e00\u4e2a\u65b9\u5411\uff09\u3002\u5bf9\u4e8e\u4ece $u\\to v$ \u800c\u8a00\uff0c\u6839\u636e\u4e0a\u8ff0\u5206\u6790\uff0c\u6700\u77ed\u8def\u4e3a $T_1(1\\to u) \\cup (u, v) \\cup T_n(v\\to n)$\uff0c\u5176\u957f\u5ea6\u4e3a $C(u, v) = pre(u) + w(u, v) + suf(v)$\uff08\u5b9a\u4e49 $C(e)$ \u8868\u793a\u5f3a\u5236\u7ecf\u8fc7 $e$ \u7684\u6700\u77ed\u8def\uff09\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c$C(u, v)$ \u8fd9\u4e2a\u6570\u503c\u53ef\u4ee5\u7528\u4e8e\u66f4\u65b0\u6240\u6709\u8def\u5f84 $P$ \u4e0a\u4ece $pr(u)$ \u5230 $su(u)$ \u4e4b\u95f4\u6240\u6709\u8fb9 $e_i$ \u5bf9\u5e94\u7684 $L(e_i)$\uff0c\u56e0\u4e3a $C(u, v)$ \u5bf9\u5e94\u7684\u8def\u5f84\u6ca1\u6709\u7ecf\u8fc7\u8fd9\u4e9b\u8fb9\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6761\u4e0d\u5c5e\u4e8e $P$ \u7684\u8fb9\uff0c\u5176 $C$ \u503c\u4f1a\u5bf9\u4e00\u6bb5 $P$ \u4e0a\u5bf9\u5e94\u7684\u8def\u5f84\u4ea7\u751f\u8d21\u732e\u3002\u79bb\u7ebf\u626b\u63cf\u7ebf\u7528 `multiset` \u7ef4\u62a4\u5373\u53ef\u6c42\u51fa\u6bcf\u4e2a $L(e_i)$\u3002\n\n\u56e0\u6b64\uff0c\u5bf9\u4e8e $t\\in P$ \u7684\u60c5\u51b5\uff0c\u7b54\u6848\u4e3a $\\min(w(P) - w_t + x, L(t))$\u3002\n\n\u7b49\u7b49\uff1f\u662f\u4e0d\u662f\u6709\u4e9b\u4e0d\u4e25\u8c28\uff1f\u7b14\u8005\u5728\u601d\u8003\u672c\u9898\u65f6\uff0c\u9047\u5230\u7684\u4e00\u4e2a\u6700\u5927\u7684\u95ee\u9898\u662f\u5982\u4f55\u8bc1\u660e\u5bf9\u4e8e\u53bb\u6389\u67d0\u6761 $e_i$ \u540e\uff0c\u65b0\u7684\u6700\u77ed\u8def $P'$ \u4e0a\u5fc5\u7136\u5b58\u5728\u4e00\u6761\u8fb9 $e'_j = (p'_{j - 1}, p'_j)$ \u4f7f\u5f97 $e_i$ \u5728 $pr(p'_{j - 1})$ \u548c $su(p'_j)$ \u4e4b\u95f4\u3002\u8fd9\u4e2a\u547d\u9898\u7b49\u4ef7\u4e8e $P'$ \u4e0a\u81f3\u5c11\u5b58\u5728\u4e00\u6761\u8fb9 $(u, v)$ \u4f7f\u5f97 $1\\to u$ \u7684\u8def\u5f84\u7b49\u4e8e $T_1(1\\to u)$\uff0c$v\\to n$ \u7684\u8def\u5f84\u7b49\u4e8e $T_n(v\\to n)$\uff0c\u4e14 $e_i$ \u4e0d\u5728 $pr(u)$ \u548c $su(v)$ \u4e4b\u95f4 \u3002\u5176\u8bc1\u660e\u8fc7\u4e8e\u590d\u6742\uff0c\u7565\u53bb\u3002\u8be6\u89c1 [cf1163f - ycx's blog](https://www.luogu.com.cn/blog/Chenxiao-Yan/solution-cf1163f)\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nusing pll = pair<long long, long long>;\nconst int N = 2e5 + 5;\nint n, m, q;\nint u[N], v[N], w[N];\nvector<int> P;\nstruct Segtree {\n  long long val[N << 2];\n  Segtree() {memset(val, 0x3f, sizeof(val));}\n  void modify(int l, int r, int ql, int qr, int x, long long v) {\n    if(ql > qr) return;\n    if(ql <= l && r <= qr) return val[x] = min(val[x], v), void();\n    int m = l + r >> 1;\n    if(ql <= m) modify(l, m, ql, qr, x << 1, v);\n    if(m < qr) modify(m + 1, r, ql, qr, x << 1 | 1, v);\n  }\n  long long query(int p) {\n    int l = 1, r = P.size(), x = 1;\n    long long ans = val[1];\n    while(l < r) {\n      int m = l + r >> 1;\n      if(p <= m) r = m, x <<= 1;\n      else l = m + 1, x = x << 1 | 1;\n      ans = min(ans, val[x]);\n    }\n    return ans; // add this line\n  }\n} tr;\nstruct edge {\n  int v, w, id;\n};\nvector<edge> e[N];\nint index[N], tag[N];\nint pr[N], su[N], eid[N];\nlong long pre[N], suf[N];\nvoid dijkstra() {\n  priority_queue<pll, vector<pll>, greater<pll>> q;\n  memset(pre, 0x3f, sizeof(pre));\n  q.push({pre[1] = 0, pr[1] = 1});\n  while(!q.empty()) {\n    pll t = q.top();\n    q.pop();\n    int id = t.second;\n    if(pre[id] != t.first) continue;\n    for(edge _ : e[id]) {\n      int it = _.v;\n      long long d = t.first + _.w;\n      if(d < pre[it]) {\n        q.push({pre[it] = d, it});\n        pr[it] = id, eid[it] = _.id;\n      }\n    }\n  }\n  for(int i = n; i != 1; i = pr[i]) P.push_back(i);\n  for(int it : P) pr[it] = it;\n  reverse(P.begin(), P.end());\n  for(int i = 1; i <= P.size(); i++) index[P[i - 1]] = i, tag[eid[P[i - 1]]] = i;\n  function<int(int)> findp = [&](int id) {return pr[id] == id ? id : pr[id] = findp(pr[id]);};\n  memset(suf, 0x3f, sizeof(suf));\n  for(int i = 1; i <= n; i++) {\n    pr[i] = findp(i);\n    if(i == pr[i]) q.push({suf[i] = pre[n] - pre[i], su[i] = i});\n  }\n  while(!q.empty()) {\n    pll t = q.top();\n    q.pop();\n    int id = t.second;\n    if(suf[id] != t.first) continue;\n    for(edge _ : e[id]) {\n      int it = _.v;\n      long long d = t.first + _.w;\n      if(d < suf[it]) {\n        assert(su[it] != it);\n        q.push({suf[it] = d, it});\n        su[it] = id;\n      }\n    }\n  }\n  function<int(int)> finds = [&](int id) {return su[id] == id ? id : su[id] = finds(su[id]);};\n  for(int i = 1; i <= n; i++) su[i] = finds(i);\n}\nint main() {\n  // freopen(\"1.in\", \"r\", stdin);\n  // freopen(\"1.out\", \"w\", stdout);\n  cin >> n >> m >> q;\n  for(int i = 1; i <= m; i++) {\n    scanf(\"%d%d%d\", &u[i], &v[i], &w[i]);\n    e[u[i]].push_back({v[i], w[i], i});\n    e[v[i]].push_back({u[i], w[i], i});\n  }\n  dijkstra();\n  for(int i = 1; i <= n; i++)\n    for(edge _ : e[i]) {\n      if(tag[_.id]) continue;\n      int it = _.v;\n      long long val = pre[i] + suf[it] + _.w;\n      tr.modify(1, P.size(), index[pr[i]] + 1, index[su[it]], 1, val);\n    }\n  for(int i = 1; i <= q; i++) {\n    int t, x;\n    scanf(\"%d%d\", &t, &x);\n    long long ans = 1e18;\n    if(tag[t]) {\n      ans = min(ans, pre[n] + x - w[t]);\n      ans = min(ans, tr.query(tag[t]));\n    }\n    else {\n      ans = min(ans, pre[n]);\n      ans = min(ans, pre[u[t]] + x + suf[v[t]]); // i -> t\n      ans = min(ans, pre[v[t]] + x + suf[u[t]]); // i -> t\n    }\n    printf(\"%lld\\n\", ans);\n  }\n  return 0;\n}\n/*\n2022/5/24\n*/\n```",
        "postTime": 1653188393,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "CF1163F Indecisive Taxi Fee"
    },
    {
        "content": "**\u6bcf\u5468\u6587\u7ae0\u8ba1\u5212 2021.12 \u7b2c\u4e09\u5468**\n\n\u7ba1\u7406\u6c42\u8fc7\n\n**\u5b9a\u4e49**\uff1a\n\n$dis_i$ \uff1a $1 \\sim i$ \u7684\u6700\u77ed\u8def\n\n$dist_i$ \uff1a $n \\sim i$ \u7684\u6700\u77ed\u8def\n \n$u,v,w$ \uff1a\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4ee5\u53ca\u8fb9\u6743\n\n$pre_u$ \uff1a$u$ \u5728\u6700\u77ed\u8def\u4e0a\u7684\u524d\u9a71\u70b9\n\n$preedge_u$ \uff1a$u$ \u5728\u6700\u77ed\u8def\u4e0a\u7684\u524d\u9a71\u8fb9\n\n$l_u,r_u$ \uff1a\u7ecf\u8fc7 $u$ \u70b9\u7684\u6700\u77ed\u8def\u4e0e\u539f\u6700\u77ed\u8def\u91cd\u5408\u7684\u524d\u7f00\u957f\u5ea6\uff0c\u7ecf\u8fc7 $u$ \u70b9\u7684\u6700\u77ed\u8def\u4e0e\u539f\u6700\u77ed\u8def\u91cd\u5408\u7684\u540e\u7f00\u957f\u5ea6\u3002\n\n-----\n\n**\u9898\u76ee\u5927\u610f**\n\n\u7ed9\u4f60\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u8fde\u63a5\u70b9 $u$\u3001$v$\uff0c\u5e76\u4e14\u6709\u4e2a\u957f\u5ea6 $w$ \u3002\n\n\u6709$q$\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u4f60\u4e00\u5bf9 $t$\u3001$x$, \u8868\u793a\u4ec5\u5f53\u524d\u8be2\u95ee\u4e0b\uff0c\u5c06 $t$ \u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u4fee\u6539\u4e3a $x$\uff0c\u8bf7\u4f60\u8f93\u51fa\u5f53\u524d $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n**\u6570\u636e\u8303\u56f4**\n\n$2 \\le n \\le 2\\times10^5$\n\n$1 \\le m, q \\le 2\\times10^5$\n\n$1 \\le w_i,x_i \\le 10^9$\n\n\u9996\u5148\u7531\u4e8e\u8fd9\u662f\u6700\u77ed\u8def\u95ee\u9898\uff0c\u6211\u4eec\u5148\u6c42\u51fa $1 \\sim n$ \u7684\u6700\u77ed\u8def\u3002\n\n\u7136\u540e\u8003\u8651\u4fee\u6539\uff0c\u6211\u4eec\u5c06\u4fee\u6539\u5206\u4e3a\u56db\u79cd\uff1a\n\n### 1. \u4fee\u6539\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u6743\u53d8\u5c0f\n\n\u8fd9\u79cd\u662f\u6700\u597d\u89e3\u51b3\u7684\uff0c\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u6743\u53d8\u5c0f\u80af\u5b9a\u8fd8\u662f\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u76f4\u63a5\u8f93\u51fa\u65b0\u7684\u6700\u77ed\u8def $(dis_n-w_{last}+w_{new})$ \u5373\u53ef\u3002\n\n### 2. \u4fee\u6539\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u6743\u53d8\u5927\n\n\u8fd9\u79cd\u4e5f\u597d\u89e3\u51b3\uff0c\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u7684\u8fb9\u6743\u53d8\u5927\uff0c\u6700\u77ed\u8def\u80af\u5b9a\u8fd8\u662f\u539f\u6765\u7684\u6700\u77ed\u8def\uff0c\u8f93\u51fa $dis_n$ \u5373\u53ef\u3002\n\n### 3.\u4fee\u6539\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u6743\u53d8\u5c0f\n\n\u8fd9\u4e2a\u9700\u8981\u7a0d\u5fae\u60f3\u4e00\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece $n \\sim 1$ \u518d\u505a\u4e00\u904d\u6700\u77ed\u8def\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528 $dis_u+dist_v+w_{new}$ \u548c $dis_v+dist_u+w_{new}$ \u6765\u66f4\u65b0\u7b54\u6848\uff0c\u8fd9\u4e24\u4e2a\u4e2d\u4e00\u5b9a\u6709\u4e00\u4e2a\u662f\u7ecf\u8fc7 $\\{u,v\\}$ \u8fb9\u7684\u65b0\u6700\u77ed\u8def\n\n### 4.\u4fee\u6539\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u8fb9\u6743\u53d8\u5927\n\n\u8fd9\u4e2a\u5c31\u662f\u6700\u96be\u60f3\u7684\u60c5\u51b5\u4e86\uff0c\u8fd9\u6837\u4fee\u6539\u539f\u6765\u7684\u6700\u77ed\u8def\u6709\u53ef\u80fd\u4e0d\u662f\u6700\u77ed\u8def\uff0c\u4f46\u5982\u679c\u7528\u6700\u77ed\u8def\u4e4b\u5916\u7684\u8fb9\u4fee\u6539\u53c8\u4e0d\u77e5\u9053\u7528\u54ea\u6761\u8fb9\u4fee\u6539\u3002\n\n~~\u5f53\u7136\u662f\u4e22\u56de\u53bb\u91cd\u65b0\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u554a~~\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5148\u7ed9\u51fa\u4e00\u4e2a\u7ed3\u8bba:\n\n**\u4ece $1 \\sim n$ \uff0c\u7ecf\u8fc7\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u80af\u5b9a\u6709\u4e00\u6bb5\u524d\u7f00\u4ee5\u53ca\u4e00\u6bb5\u540e\u7f00\u548c\u6700\u77ed\u8def\u91cd\u5408**\n\n\u6362\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u4e0e\u6700\u77ed\u8def\u4e0d\u91cd\u5408\u7684\u90e8\u5206\u6700\u591a\u53ea\u6709\u4e00\u6bb5\uff0c\u4e14\u662f\u8fde\u7eed\u7684\u3002\n\n**\u8bc1\u660e\uff1a** \u5982\u679c\u6709\u591a\u4e8e\u4e00\u6bb5\u4e0e\u539f\u6700\u77ed\u8def\u4e0d\u91cd\u5408\uff0c\u90a3\u4e48\u8fd9\u4e9b\u6bb5\u4e2d\u5fc5\u7136\u53ea\u6709\u4e00\u6bb5\u5305\u542b $\\{u,v\\}$ \uff0c\u5176\u4ed6\u6bb5\u6539\u6210\u539f\u6700\u77ed\u8def\u4e0a\u7684\u8def\u5f84\u5c31\u4f1a\u4f7f\u603b\u8def\u7a0b\u66f4\u5c0f\uff0c\u5219\u5047\u8bbe\u4e0d\u6210\u7acb\n\n\u90a3\u4e48\u5f97\u77e5\u4e86\u8fd9\u4e2a\u7ed3\u8bba\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7ecf\u8fc7 $u$ \u70b9\u7684\u6700\u77ed\u8def\uff0c\u5c31\u662f\u4e0d\u7ecf\u8fc7\u7b2c $[l_u+1,r_u-1]$ \u7684\u6700\u77ed\u8def\uff0c\u6362\u7b97\u5230\u8fb9 $\\{u,v\\}$ \u4e0a\uff0c\u5c31\u662f\u4e0d\u7ecf\u8fc7\u8fb9 $[l_u+1,r_v-1]$ \u548c $[l_v+1,r_u-1]$ \u7684\u8fb9\n\n\u770b\u5230\u533a\u95f4\u64cd\u4f5c\uff0c\u7b2c\u4e00\u53cd\u5e94\u5fc5\u7136\u662f\u7528\u7ebf\u6bb5\u6811 ~~\u4e0d\u4f1a\u662f\u5e73\u8861\u6811\u5427~~ \uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u9897\u975e\u5e38\u77ed\u7684\u7ef4\u62a4\u6700\u5c0f\u503c\u7684\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u7ef4\u62a4\u4e0d\u7ecf\u8fc7\u6700\u77ed\u8def\u4e0a\u6bcf\u6761\u8fb9\u65f6\u7684\u6700\u77ed\u8def\uff0c\u5728\u8baf\u95ee\u65f6\u67e5\u8be2\u4e0d\u7ecf\u8fc7\u8fb9 $\\{u,v\\}$ \u7684\u6700\u77ed\u8def\u662f\u5426\u6bd4 $dis_n-w_{last}+w_{new}$ \u77ed\u5373\u53ef\u3002\n\n## \u5177\u4f53\u5b9e\u73b0\n\n\u9996\u5148\u662f\u8bb0\u4e0b\u6700\u77ed\u8def\uff0c\u6211\u4eec\u4ece $n$ \u8df3 $pre$ ,\u4e00\u76f4\u8df3\u5230 $1$ \uff0c\u8bb0\u5f55\u4e0b $preedge$ \u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6700\u77ed\u8def\u4e0a\u7684\u6bcf\u4e2a\u70b9\uff0c$l_u$ \u4e3a\u6700\u77ed\u8def\u4e0a\u94fe\u63a5\u5230\u81ea\u5df1\u7684\u8fb9\uff0c$r_u$ \u4e3a\u6700\u77ed\u8def\u4e0a\u81ea\u5df1\u5ef6\u4f38\u51fa\u53bb\u7684\u8fb9\u3002\n\n\u7136\u540e\u505a\u4e24\u904d Dij \uff0c\u4e00\u904d\u4ece $1 \\sim n$\uff0c\u4e00\u904d\u4ece $n \\sim 1$\uff0c$l_u$ \u548c $r_u$ \u5206\u522b\u4ece\u7b2c\u4e00\u904d\u548c\u7b2c\u4e8c\u904d\u7684\u524d\u9a71\u7ee7\u627f\u5373\u53ef\u3002\n\nCF\u65f6\u9650\u5361\u5f97\u7d27\uff0c\u8bb0\u5f97\u52a0\u5feb\u8bfb\u3002\n\n\u81f3\u6b64\u672c\u9053\u9898\u5b8c\u5168\u505a\u5b8c\u3002",
        "postTime": 1639920670,
        "uid": 124918,
        "name": "LinkyChristian",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011CF1163F Indecisive Taxi Fee"
    },
    {
        "content": "\u6559\u7ec3\u4e0a\u8bfe\u7684\u65f6\u5019\u8bb2\u4e86\u4e2a\u5de8\u5927\u9ebb\u70e6\u7684\u505a\u6cd5\uff0c\u81ea\u5df1\u4e0d\u60f3\u5199\u4e8e\u662f\u7814\u53d1\u4e86\u4e2a\u7ec6\u8282\u5c11\u5f88\u591a\u7684\u8fc7\u4e86\u8fd9\u9898\uff08\n\n\u5728\u6539\u8fb9\u6743\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u8def\u5f84\u5206\u4e3a\u7ecf\u8fc7\u4fee\u6539\u7684\u8fb9\u548c\u4e0d\u7ecf\u8fc7\u4fee\u6539\u7684\u8fb9\u4e24\u79cd\u3002\u7ecf\u8fc7\u4fee\u6539\u7684\u8fb9\u7684\u6240\u6709\u8def\u5f84\u7684\u6700\u5c0f\u503c\u662f\u5bb9\u6613\u8ba1\u7b97\u7684\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u8bbe\u4fee\u6539\u7684\u8fb9\u4e3a $(u,v)$\uff0c\u4fee\u6539\u540e\u7684\u6743\u503c\u4e3a $w$\uff0c\u5219\u9884\u5148\u4ece $1$ \u548c $n$ \u5206\u522b\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u5047\u8bbe\u6c42\u51fa\u7684\u6570\u7ec4\u5206\u522b\u4e3a $d_1$ \u548c $d_n$\uff0c\u7136\u540e\u7b54\u6848\u5c31\u662f $\\min\\{d_{1,u}+w+d_{n,v},d_{1,v}+w+d_{n,u}\\}$\u3002\n\n\u56e0\u6b64\u53ea\u9700\u8981\u8003\u8651\u4e0d\u7ecf\u8fc7\u4fee\u6539\u7684\u8fb9\u5982\u4f55\u505a\uff0c\u8f6c\u5316\u4e3a\u5220 1 \u6761\u8fb9\u3002\n\n\u9996\u5148\u80af\u5b9a\u8981\u653e\u5230\u6700\u77ed\u8def\u6811\u4e0a\u8003\u8651\u3002\u5982\u679c\u65ad\u8fb9\u4e0d\u5728\u6240\u6709 $1-n$ \u7684\u6700\u77ed\u8def\u7684\u4ea4\u4e0a\u5219\u76f4\u63a5\u53d6\u6700\u77ed\u8def\uff1b\u5426\u5219\u4e00\u5b9a\u8981\u7ecf\u8fc7\u4e00\u6761\u4e0d\u5728\u4ea4\u4e0a\u7684\u8fb9\u3002\u800c\u4e24\u6761\u8fd9\u6837\u7684\u8fb9\u663e\u7136\u6ca1\u7528\uff0c\u63d0\u793a\u4e86\u8fd9\u6837\u4e00\u4e2a\u505a\u6cd5\uff1a\u4ee5 $1$ \u548c $n$ \u4e3a\u6839\u5404\u4efb\u53d6\u4e00\u68f5\u6700\u77ed\u8def\u6811\uff0c\u5206\u522b\u8bbe\u4e3a $T_1$ \u548c $T_n$\uff1b\u5982\u679c\u65ad\u8fb9\u4e0d\u540c\u65f6\u5728\u4e24\u68f5\u6811\u7684 $1-n$ \u7684\u8def\u5f84\u4e0a\u5219\u76f4\u63a5\u8fd4\u56de\u539f\u56fe\u6700\u77ed\u8def\uff1b\u5426\u5219\u7b54\u6848\u4e00\u5b9a\u662f\u5148\u5728 $T_1$ \u4e0a\u8d70\u5230 $u$\uff0c\u7136\u540e\u7ecf\u8fc7\u4e00\u6761\u4e0d\u540c\u65f6\u5728\u4e24\u6761\u8def\u5f84\u4e0a\u7684\u8fb9\u5230 $v$\uff0c\u7136\u540e\u518d\u5728 $T_n$ \u4e0a\u8d70\u5230 $n$\u3002\u7136\u540e\u66b4\u529b\u679a\u4e3e\u8fd9\u6761\u8fb9\u662f\u4ec0\u4e48\u3002\n\n\u5c1d\u8bd5\u4f18\u5316\u3002\u8003\u8651\u5230\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\u6240\u5904\u7684\u70b9\u96c6\u662f\u6574\u4e2a\u6811\u65ad\u6389\u4e00\u6761\u8fb9\u4e4b\u540e\u4ecd\u548c\u6839\u8fde\u901a\u7684\u90e8\u5206\uff0c\u5373\u6316\u53bb\u4e00\u68f5\u5b50\u6811\uff1b\u7ec8\u70b9\u540c\u7406\u3002dfs \u5e8f\u5904\u7406\u8fd9\u7c7b\u95ee\u9898\u5f88\u8f7b\u677e\uff0c\u56e0\u6b64\u5728\u4e24\u68f5\u6700\u77ed\u8def\u6811\u4e0a\u5747\u641c\u51fa\u4e00\u4e2a dfs \u5e8f\uff0c\u5206\u522b\u8bbe\u4e3a $x_1$ \u548c $x_n$\u3002\u5bf9\u4e8e\u6240\u6709\u4e0d\u540c\u65f6\u5728\u4e24\u6761\u6700\u77ed\u8def\u4e0a\u7684\u8fb9 $(u,v,w)$\uff0c\u4e8e\u4e8c\u7ef4\u5e73\u9762\u4e0a\u6dfb\u52a0\u4e24\u70b9\uff1a\u4f4d\u4e8e $(x_{1,u},x_{n,v})$ \u7684\u6743\u503c\u4e3a $d_{1,u}+w+d_{n,v}$ \u7684\u70b9\uff0c\u548c\u4f4d\u4e8e $(x_{1,v},x_{n,u})$ \u7684\u6743\u503c\u4e3a $d_{1,v}+w+d_{n,u}$ \u7684\u70b9\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u77e9\u5f62\u6c42 min \u6765\u6c42\u51fa\u6700\u5c0f\u503c\u4e86\u3002\u4e00\u822c\u7684\u77e9\u5f62\u6c42 min \u4e0d\u597d\u505a\uff0c\u4f46\u662f\u8fd9\u9898\u4e2d\u662f 4 \u4e2a\u77e9\u5f62\uff0c\u4e14\u4e24\u7ef4\u5747\u8981\u4e48\u662f\u524d\u7f00\u8981\u4e48\u662f\u540e\u7f00\u3002\u56e0\u6b64\u5bf9\u4e8e\u6240\u6709\u70b9\uff0c\u5efa\u4e24\u68f5\u4e3b\u5e2d\u6811\uff08\u4e00\u4e2a\u524d\u7f00\u7684\u4e00\u4e2a\u540e\u7f00\u7684\uff09\uff0c\u7136\u540e\u5206\u522b\u67e5\u8be2\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log m+m\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(m\\log n)$\u3002\n\n\u4f46\u662f\u76f4\u63a5\u786c\u4e0a\u8fd9\u4e2a\u505a\u6cd5\u4f1a\u7206\u7a7a\u95f4\uff0c\u56e0\u6b64\u79bb\u7ebf\u4e0b\u6765\uff0c\u5206\u522b\u5bf9\u4e8e\u524d\u7f00\u4e3b\u5e2d\u6811\u548c\u540e\u7f00\u4e3b\u5e2d\u6811\u8dd1\u4e00\u904d\u6240\u6709\u8be2\u95ee\u3002\u8fd9\u6837\u540c\u4e00\u65f6\u95f4\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u68f5\u4e3b\u5e2d\u6811\uff0c\u7a7a\u95f4\u76f4\u63a5\u51cf\u534a\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e86\u3002\n\n\u662f\u4e0d\u662f\u542c\u8d77\u6765\u5c31\u975e\u5e38\u597d\u5199\uff1f\uff08~~\u6307 5.5KB\uff0c\u4f46\u662f\u7ec6\u8282\u771f\u7684\u4e0d\u591a~~\uff09\n\n```cpp\nconst int N = 200005;\nconst long long INF = 0x3f3f3f3f3f3f3f3f;\nstruct Edge {\n\tint to, nxt;\n\tlong long len;\n\tEdge() {\n\t\tnxt = -1;\n\t}\n};\nEdge e[N << 1];\nint n, hd[N], pnt, m, q, dfn[2][N], pst[2][N], _time, prever[N], sufver[N];\nlong long dis[2][N], ans[N], qt[N], qx[N];\nbool tr[2][N << 1], vis[N], onRoute[2][N << 1];\npriority_queue <pair <long long, int>, vector <pair <long long, int> >, greater <pair <long long, int> > > que;\nvector <pair <int, long long> > adj[N];\n\n#define Minv(p) (p ? p->mnv : INF)\n#define Lc(p) (p ? p->l : NULL)\n#define Rc(p) (p ? p->r : NULL)\nstruct Node {\n\tlong long mnv;\n\tNode *l, *r;\n\tinline void Update() {\n\t\tmnv = min(Minv(l), Minv(r));\n\t}\n\tinline Node() {\n\t\tmnv = INF;\n\t\tl = r = NULL;\n\t}\n};\nNode nd[N * 50];\nint top;\nstruct Segtree {\n\tNode *_root[N << 1];\n\tinline void Modify(Node *&p1, Node *p2, int pl, int pr, int idx, long long val) {\n\t\tp1 = &nd[++top];\n\t\tif (p2) nd[top] = *p2;\n\t\telse nd[top] = Node();\n\t\tif (pl == pr) {\n\t\t\tp1->mnv = min(p1->mnv, val);\n\t\t\treturn;\n\t\t}\n\t\tint mid = pl + pr >> 1;\n\t\tif (mid >= idx) Modify(p1->l, Lc(p2), pl, mid, idx, val);\n\t\telse Modify(p1->r, Rc(p2), mid + 1, pr, idx, val);\n\t\tp1->Update();\n\t}\n\tinline long long Query(Node *p, int pl, int pr, int l, int r) {\n\t\tif (l > r) return INF;\n\t\tif (pl == l && pr == r) return Minv(p);\n\t\tint mid = pl + pr >> 1;\n\t\tif (mid >= r) return Query(Lc(p), pl, mid, l, r);\n\t\telse if (mid + 1 <= l) return Query(Rc(p), mid + 1, pr, l, r);\n\t\telse return min(Query(Lc(p), pl, mid, l, mid), Query(Rc(p), mid + 1, pr, mid + 1, r));\n\t}\n};\nSegtree sgt[2];\n\ninline void AddEdge(int u, int v, long long w) {\n\te[++pnt].to = v;\n\te[pnt].len = w;\n\te[pnt].nxt = hd[u];\n\thd[u] = pnt;\n}\n\ninline void Read() {\n\tn = qread(); m = qread(); q = qread();\n\tfor (int i = 1;i <= m;i++) {\n\t\tint u = qread(), v = qread(), w = qread();\n\t\tAddEdge(u, v, w);\n\t\tAddEdge(v, u, w);\n\t}\n\tfor (int i = 1;i <= q;i++) {\n\t\tqt[i] = qread(); qx[i] = qread();\n\t}\n}\n\ninline void Dijkstra(int x) {\n\tmemset(dis[x], 0x3f, sizeof(dis[x]));\n\tif (x) que.push(make_pair(dis[x][n] = 0, n));\n\telse que.push(make_pair(dis[x][1] = 0, 1));\n\twhile (!que.empty()) {\n\t\tint u = que.top().second;\n\t\tif (dis[x][u] < que.top().first) {\n\t\t\tque.pop();\n\t\t\tcontinue;\n\t\t}\n\t\tque.pop();\n\t\tfor (int i = hd[u];~i;i = e[i].nxt) {\n\t\t\tif (dis[x][e[i].to] > dis[x][u] + e[i].len) {\n\t\t\t\tdis[x][e[i].to] = dis[x][u] + e[i].len;\n\t\t\t\tque.push(make_pair(dis[x][e[i].to], e[i].to));\n\t\t\t}\n\t\t}\n\t}\n\tmemset(vis, 0, sizeof(vis));\n\tfor (int i = 1;i <= n;i++) {\n\t\tfor (int j = hd[i];~j;j = e[j].nxt) {\n\t\t\tif (dis[x][e[j].to] == dis[x][i] + e[j].len && !vis[e[j].to]) {\n\t\t\t\ttr[x][j] = 1;\n\t\t\t\tvis[e[j].to] = 1;\n\t\t\t} \n\t\t}\n\t}\n}\n\ninline bool Dfs(int x, int u) {\n\tdfn[x][u] = ++_time;\n\tbool flag = 0;\n\tif (x == 0 && u == n) flag = 1;\n\tif (x == 1 && u == 1) flag = 1;\n\tfor (int i = hd[u];~i;i = e[i].nxt) {\n\t\tif (tr[x][i]) {\n\t\t\tbool res = Dfs(x, e[i].to);\n\t\t\tonRoute[x][i] = res;\n\t\t\tflag |= res;\n\t\t}\n\t}\n\tpst[x][u] = _time;\n\treturn flag;\n}\n\ninline void Prefix() {\n\tfor (int i = 1;i <= pnt;i += 2) {\n\t\tint u = e[i].to, v = e[i + 1].to;\n\t\tif ((onRoute[0][i] && onRoute[1][i + 1]) || (onRoute[0][i + 1] && onRoute[1][i])) continue;\n\t\tint w = e[i].len;\n\t\tadj[dfn[0][u]].push_back(make_pair(dfn[1][v], dis[0][u] + w + dis[1][v]));\n\t\tadj[dfn[0][v]].push_back(make_pair(dfn[1][u], dis[0][v] + w + dis[1][u]));\n\t}\n\t\n}\n\ninline void BuildPre() {\n\tfor (int i = 1;i <= n;i++) {\n\t\tint siz = adj[i].size();\n\t\tprever[i] = prever[i - 1];\n\t\tfor (int j = 0;j < siz;j++) {\n\t\t\tsgt[0].Modify(sgt[0]._root[prever[i] + 1], sgt[0]._root[prever[i]], 1, n, adj[i][j].first, adj[i][j].second);\n\t\t\tprever[i]++;\n\t\t}\n\t}\n}\n\ninline void BuildSuf() {\n\tfor (int i = n;i >= 1;i--) {\n\t\tint siz = adj[i].size();\n\t\tsufver[i] = sufver[i + 1];\n\t\tfor (int j = 0;j < siz;j++) {\n\t\t\tsgt[1].Modify(sgt[1]._root[sufver[i] + 1], sgt[1]._root[sufver[i]], 1, n, adj[i][j].first, adj[i][j].second);\n\t\t\tsufver[i]++;\n\t\t}\n\t}\n}\n\ninline void Solve() {\n\tBuildPre();\n\tfor (int i = 1;i <= q;i++) {\n\t\tint t = 2 * qt[i] - 1, x = qx[i], u = e[t].to, v = e[t + 1].to;\n\t\tif (!((onRoute[0][t] && onRoute[1][t + 1]) || (onRoute[1][t] && onRoute[0][t + 1]))) {\n\t\t\tans[i] = min(dis[0][n], min(dis[0][u] + x + dis[1][v], dis[1][u] + x + dis[0][v]));\n\t\t\tcontinue;\n\t\t}\n\t\tif (dis[0][u] > dis[0][v]) swap(u, v);\n\t\tans[i] = min(dis[0][u] + x + dis[1][v], dis[1][u] + x + dis[0][v]);\n\t\tans[i] = min(ans[i], sgt[0].Query(sgt[0]._root[prever[dfn[0][v] - 1]], 1, n, 1, dfn[1][u] - 1));\n\t\tans[i] = min(ans[i], sgt[0].Query(sgt[0]._root[prever[dfn[0][v] - 1]], 1, n, pst[1][u] + 1, n));\n\t}\n\ttop = 0;\n\tBuildSuf();\n\tfor (int i = 1;i <= q;i++) {\n\t\tint t = 2 * qt[i] - 1, x = qx[i], u = e[t].to, v = e[t + 1].to;\n\t\tif (!((onRoute[0][t] && onRoute[1][t + 1]) || (onRoute[1][t] && onRoute[0][t + 1]))) continue;\n\t\tif (dis[0][u] > dis[0][v]) swap(u, v);\n\t\tans[i] = min(ans[i], sgt[1].Query(sgt[1]._root[sufver[pst[0][v] + 1]], 1, n, 1, dfn[1][u] - 1));\n\t\tans[i] = min(ans[i], sgt[1].Query(sgt[1]._root[sufver[pst[0][v] + 1]], 1, n, pst[1][u] + 1, n));\n\t}\n\tfor (int i = 1;i <= q;i++) cout << ans[i] << '\\n';\n}\n\nint main() {\n\tstd::ios::sync_with_stdio(0);\n\tmemset(hd, -1, sizeof(hd));\n\tRead();\n\tDijkstra(0); Dijkstra(1);\n\t_time = 0; Dfs(0, 1); _time = 0; Dfs(1, n);\n\tPrefix();\n\tSolve();\n\treturn 0;\n}\n```",
        "postTime": 1636384337,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1163F \u3010Indecisive Taxi Fee\u3011"
    },
    {
        "content": "#### CF1163F Indecisive Taxi Fee\n\n\n\u6211\u613f\u79f0\u4e4b\u4e3a\u7f1d\u5408\u602a\u9898\u3002\n\n\u5927\u529b\u5206\u7c7b\u8ba8\u8bba+\u6700\u77ed\u8def+\u7ebf\u6bb5\u6811~~\uff0c\u8fd9\u8c01\u9876\u5f97\u4f4f\u554a~~\n\n\u9996\u5148\u8003\u8651\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u5f71\u54cd\uff0c\u90a3\u4e48\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\n\n1\u3001\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u53d8\u5927\u4e86\u3002\n\n2\u3001\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u53d8\u5c0f\u4e86\u3002\n\n3\u3001\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u53d8\u5c0f\u4e86\u3002\n\n4\u3001\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u53d8\u5927\u4e86\u3002\n\n\u5bf9\u4e8e1\uff0c\u5bf9\u6700\u77ed\u8def\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u5bf9\u4e8e2\uff0c\u53ea\u9700\u8981\u8ba9\u6700\u77ed\u8def\u5f3a\u5236\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u548c\u539f\u6700\u77ed\u8def\u53d6$\\min$\u5373\u53ef\uff0c\u5bf9\u4e8e3\uff0c\u76f4\u63a5\u51cf\u6389\u5dee\u503c\u5373\u53ef\uff0c\u5bf9\u4e8e4\uff0c\u5c31\u4e0d\u592a\u53cb\u5584\u4e86\u3002\n\n\u60c5\u51b54\u8fd8\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0c\u8981\u4e48\u662f\u76f4\u63a5\u8d70\u8fd9\u6761\u8fb9\uff0c\u8981\u4e48\u662f\u907f\u5f00\u8fd9\u6761\u8fb9\uff0c\u524d\u8005\u663e\u7136\u597d\u7b97\uff0c\u8003\u8651\u540e\u8005\u5982\u4f55\u8ba1\u7b97\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u6761\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9$(u,v)$\uff0c\u90a3\u4e48\u5f3a\u5236\u7ecf\u8fc7$(u,v)$\u7684\u6700\u77ed\u8def,\u5176\u957f\u5ea6\u4e0d\u96be\u5f97\u5230\uff1a$\\min(dis(S,u)+w(u,v)+dis(v,T),dis(u,T)+w(u,v)+dis(S,v))$\uff0c\u90a3\u4e48\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u8fd9\u6761\u8def\u7684\u8bdd\u4ed6\u4e00\u5b9a\u662f\u8fd9\u6837\u6784\u6210\u7684\uff1a\u5148\u8d70\u4e00\u90e8\u5206\u4ece$S$\u5230$T$\u7684\u6700\u77ed\u8def\uff0c\u518d\u8d70\u4e00\u90e8\u5206\u5176\u4ed6\u7684\u8def\uff0c\u518d\u8d70\u4e00\u90e8\u5206$S$\u5230$T$\u7684\u6700\u77ed\u8def\uff0c\u5176\u4ed6\u5728\u6700\u77ed\u8def\u548c\u975e\u6700\u77ed\u8def\u4e0a\u8fb9\u53cd\u590d\u6a2a\u8df3\u7684\u65b9\u6cd5\u663e\u7136\u90fd\u662f\u4e0d\u4f18\u7684\uff0c\u56e0\u6b64\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u70b9$u$\u8ba1\u7b97\u51fa$S-u$\u7684\u6700\u77ed\u8def\u548c$S-T$\u7684\u6700\u77ed\u8def\u7684\u6700\u540e\u4e00\u4e2a\u4ea4\u8fb9$L_u$\u548c$u-T$\u7684\u6700\u77ed\u8def\u548c$S-T$\u7684\u6700\u77ed\u8def\u7684\u7b2c\u4e00\u4e2a\u4ea4\u8fb9$R_u$\u3002\n\n\u56e0\u4e3a\u8981\u89c4\u907f\u6389\u67d0\u6761\u8fb9\uff0c\u6240\u4ee5\u8003\u8651\u8bbe$f(l,r)$\u8868\u793a\u5bf9\u4e8e\u6700\u77ed\u8def\uff0c\u89c4\u907f\u6389\u5176\u7b2c$l$\u8fb9\u5230\u7b2c$r$\u6761\u8fb9\u4e4b\u95f4\u7684\u90e8\u5206\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u6761\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9$(u,v)$\uff0c\u53ef\u4ee5\u66f4\u65b0$f(L_{u+1},R_v)$\u548c$f(L_{v+1,Ru})$\uff0c\u7279\u6b8a\u5904\u7406\u4e00\u4e0b$1$\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u7b2c\u56db\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u4ed6\u5728\u6700\u77ed\u8def\u4e0a\u7684\u6807\u53f7\u4e3a$x$,\u4e0d\u89c4\u907f\u6389\u4ed6\u7684\u7b54\u6848\u663e\u7136\u5c31\u662f\u6240\u6709\u5305\u542b$x$\u7684\u533a\u95f4\u6743\u503c\u53d6$\\min$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define N 200005\n#define mp make_pair\n#define INF 1e16\n#define int long long\nusing namespace std;\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint n,m,q,u[N*2],v[N*2],w[N*2],head[N*2],nxt[N*2],id[N*2],cnt,disS[N],disT[N],L[N],R[N],vis[N],on[N],pre[N],in_dist[N],len,U[N],V[N],W[N];\nstruct Segment_Tree\n{\n\tint v[N<<2];\n\tvoid init(){memset(v,0x3f,sizeof(v));}\n\tvoid modify(int k,int l,int r,int x,int y,int val)\n\t{\n\t\tif(x>y)return; \n\t\tif(l>=x&&r<=y)\n\t\t{\n\t\t\tv[k]=min(v[k],val);\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\t//printf(\"%d %d %d %d %d %d %d\\n\",k,l,r,x,y,val,mid);\n\t\tif(x<=mid)modify(k*2,l,mid,x,y,val);\n\t\tif(y>mid)modify(k*2+1,mid+1,r,x,y,val);\n\t}\n\tint query(int k,int l,int r,int x)\n\t{\n\t\tif(l==r)return v[k];\n\t\tint res,mid=(l+r)>>1;\n\t\tif(x<=mid)res=query(k*2,l,mid,x);\n\t\telse res=query(k*2+1,mid+1,r,x);\n\t\treturn min(res,v[k]);\n\t}\n}T;\nvoid add(int a,int b,int c,int Id)\n{\n\tv[++cnt]=b;\n\tu[cnt]=a;\n\tw[cnt]=c;\n\tid[cnt]=Id;\n\tnxt[cnt]=head[a];\n\thead[a]=cnt;\n}\nvoid dij(int s,int dis[],int f)\n{\n\tpriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >q;\n\tfor(int i=1;i<=n;i++)dis[i]=INF,vis[i]=0;\n\t//puts(\"\");\n\tdis[s]=0;q.push(mp(0,s));\n\twhile(!q.empty())\n\t{\n\t\tint c=q.top().second;q.pop();\n\t\tif(vis[c])continue;vis[c]=1;\n\t\t//cout<<\"!!!!!!!!\"<<c<<\" \"<<dis[c]<<endl;\n\t\tfor(int i=head[c];i;i=nxt[i])\n\t\t{\n\t\t\t//cout<<c<<\" \"<<v[i]<<\" \"<<w[i]<<\" \"<<dis[c]<<\" \"<<dis[v[i]]<<endl;\n\t\t\tif(dis[v[i]]>dis[c]+w[i])\n\t\t\t{\n\t\t\t\tdis[v[i]]=dis[c]+w[i];\n\t\t\t\tpre[v[i]]=id[i];\n\t\t\t\tif(f==1&&!on[v[i]])L[v[i]]=L[c];\n\t\t\t\tif(f==2&&!on[v[i]])R[v[i]]=R[c];\n\t\t\t\tq.push(mp(dis[v[i]],v[i]));\n\t\t\t}\n\t\t}\n\t}\n}\nvoid init()\n{\n    int now=1;\n    on[now]=1;\n    L[now]=R[now]=0;\n    for(int i=1;now!=n;i++)\n\t{\n        int now_id=pre[now];\n        in_dist[now_id]=i;\n        ++len;\n        now=U[now_id]^V[now_id]^now;\n        on[now]=true;\n        L[now]=R[now]=i;\n    }\n}\nsigned main()\n{\n\tn=read();m=read();q=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read(),z=read();U[i]=x;V[i]=y;W[i]=z;\n\t\tadd(x,y,z,i);add(y,x,z,i);in_dist[i]=-1;\n\t}\n\tdij(n,disT,0);\n\t//return 0;\n\tinit();\n\tdij(1,disS,1);\n\tdij(n,disT,2);\n\t//for(int i=1;i<=m;i++)\n\t//{\n\t//\tprintf(\"%d\\n\",in_dist[i]);\n\t///}\n\t//for(int i=1;i<=n;i++)\n\t//{\n\t///\tprintf(\"%d %d\\n\",L[i],R[i]);\n\t//}\n\t//return 0;\n\tT.init();\t\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(in_dist[i]==-1)\n\t\t{\n\t\t\tT.modify(1,1,len,L[U[i]]+1,R[V[i]],disS[U[i]]+W[i]+disT[V[i]]);\n\t\t\t//puts(\"QWQ\");\n\t\t\tT.modify(1,1,len,L[V[i]]+1,R[U[i]],disT[U[i]]+W[i]+disS[V[i]]);\n\t\t\t//puts(\"QWQ\");\n\t\t\t\n\t\t}\n\t}//puts(\"!!!!!!!!!\");\n\twhile(q--)\n\t{\n\t\tint Id=read(),x=read();\n\t\tint ans=disS[n];\n\t\tif(in_dist[Id]==-1)\n\t\t{\n\t\t\tif(x<W[Id])\n\t\t\t{\n\t\t\t\tans=min(ans,disS[U[Id]]+x+disT[V[Id]]);\n\t\t\t\tans=min(ans,disT[U[Id]]+x+disS[V[Id]]);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tans=ans-W[Id]+x;\n\t\t\tif(x>W[Id])ans=min(ans,T.query(1,1,len,in_dist[Id]));\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1611929575,
        "uid": 179600,
        "name": "shao0320",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1163F \u3010Indecisive Taxi Fee\u3011"
    },
    {
        "content": "\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u7528 $u\\rightarrow v$ \u8868\u793a $u$ \u5230 $v$ \u7684\u6700\u77ed\u8def\uff0c$dis(u,v)$ \u8868\u793a $u$ \u5230 $v$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n\u6211\u4eec\u5148\u5efa\u51fa\u201c\u6700\u77ed\u8def\u6811\u201d$G'$\uff0c\u8fd9\u68f5\u6811\u4e0a\u5305\u542b\u4e86\u539f\u56fe\u4e0a $1$ \u5230\u4efb\u610f\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u5982\u679c\u6709\u591a\u6761\u6700\u77ed\u8def\uff0c\u6211\u4eec\u53ea\u8bb0\u5f55\u4e00\u6761\u3002\n\n\u600e\u4e48\u6c42\u51fa\u6700\u77ed\u8def\u6811\u5462\uff1f\u6211\u4eec\u518d\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u70b9 $u$ \u662f\u4ece\u90a3\u4e2a\u70b9\u8d70\u8fc7\u6765\u7684\uff0c\u7136\u540e\u5728\u6811\u4e0a\u5efa\u8fd9\u4e48\u4e00\u6761\u8fb9\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba\u4fee\u6539\u7684\u64cd\u4f5c\uff1a\n\n- \u5982\u679c\u4fee\u6539\u7684\u8fb9 $u-v $ \u5728 $1\\rightarrow n$ \u4e0a\uff0c\u5e76\u4e14\u5c06\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u53d8\u5c0f\u4e86\uff0c\u7b54\u6848\u663e\u7136\u5c31\u662f $dis(1,n)-$ \u51cf\u5c0f\u7684\u8fb9\u6743\u3002\n- \u5982\u679c\u4fee\u6539\u7684\u8fb9 $u-v $ \u5728 $1\\rightarrow n$ \u4e0a\uff0c\u5e76\u4e14\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u53d8\u5927\u4e86\uff0c\u8fd9\u79cd\u60c5\u51b5\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u4eec\u540e\u9762\u5355\u72ec\u8ba8\u8bba\u3002\n- \u5982\u679c\u4fee\u6539\u7684\u8fb9 $u-v $ \u4e0d\u5728 $1\\rightarrow n$ \u4e0a\uff0c\u5e76\u4e14\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u53d8\u5c0f\u4e86\uff0c\u7b54\u6848\u663e\u7136\u662f $\\min(dis(1,n),\\min(dis(1,u)+dis(v,n),dis(1,v)+dis(u,n))+$ \u8fd9\u6761\u8fb9\u7684\u6743\u503c $)$\u3002\n- \u5982\u679c\u4fee\u6539\u7684\u8fb9 $u-v $ \u4e0d\u5728 $1\\rightarrow n$ \u4e0a\uff0c\u5e76\u4e14\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u53d8\u5927\u4e86\uff0c\u663e\u7136\u4e0d\u4f1a\u5bf9\u6700\u77ed\u8def\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\uff0c\u7b54\u6848\u5c31\u662f $dis(1,n)$\u3002\n\n\uff08\u5bf9\u4e8e\u4e0a\u4f8b\uff0c\u6211\u4eec\u6240\u8bf4\u7684 $1\\rightarrow n$ \u662f\u5728\u6700\u77ed\u8def\u6811\u4e0a\u7684\u552f\u4e00\u90a3\u6761\u8def\u5f84\uff09\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002\n\n\u5982\u679c\u6211\u4eec\u8fd8\u6309\u7167\u539f\u6765 $1\\rightarrow n$ \u8d70\uff0c\u6700\u77ed\u8def\u957f\u5ea6\u5c31\u662f $dis(1,n)+$ \u589e\u52a0\u7684\u6743\u503c\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5269\u4e0b\u7684\u60c5\u51b5\uff0c\u8003\u8651\u8d70 $1\\rightarrow n$ \u5916\u7684\u4e00\u6761\u8fb9\u6743\u4e3a $w'$ \u7684\u8fb9 $u'-v'$\uff0c\u5176\u6700\u77ed\u8def\u957f\u5ea6\u4e3a $dis(1,u')+w'+dis(v',n)$\u3002\n\n\u6211\u4eec\u4ee4 $dis'(u)$\uff0c\u8868\u793a\u65ad\u6389\u6700\u77ed\u8def\u4e0a $u$ \u548c\u5176\u7236\u4eb2\u7684\u8fb9\u540e\u80fd\u5f97\u5230\u7684\u6700\u77ed\u8def\u3002\n\n\u6211\u4eec\u8003\u8651 $1\\rightarrow n$ \u5916\u7684\u8fb9\u6743\u4e3a $w'$ \u7684\u8fb9 $u'-v'$ \u4f1a\u5bf9 $G'$ \u4e0a $\\operatorname{lca}(u',n)\\rightarrow \\operatorname{lca}(v',n)$ \u4e0a\u7684 $dis'$ \u6709\u5f71\u54cd\uff08\u6211\u4eec\u5047\u8bbe $\\operatorname{lca}(u',n)$ \u7684\u6df1\u5ea6\u6bd4 $\\operatorname{lca}(v',n)$ \u66f4\u5c0f\uff09\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u5462\uff1f\n\n\u9996\u5148\uff0c\u662f $1\\rightarrow \\operatorname{lca}(u',n)$\uff0c\u8fd9\u4e48\u8d70\u4e00\u5b9a\u662f\u6700\u77ed\u7684\uff0c\u5982\u679c\u6709\u5176\u4ed6 $1\\rightarrow u'$ \u7684\u8def\u5f84\u4e5f\u662f\u6700\u77ed\u8def\uff0c\u4e00\u5b9a\u4f1a\u6709\u4e0d\u5728\u6811\u4e0a\u7684\u8fb9\uff0c\u6211\u4eec\u4f1a\u901a\u8fc7\u8fd9\u4e9b\u975e\u6811\u8fb9\u66f4\u65b0 $1\\rightarrow \\operatorname{lca}(u',n)$\uff0c\u540c\u6837\uff0c\u6211\u4eec\u4f1a\u5728 $\\operatorname{lca}(u',n)$ \u4e4b\u540e\u8d70\u548c\u6811\u4e0a $1\\rightarrow n$ \u4e0d\u4e00\u6837\u7684\u4e00\u6761\u8def\uff0c\u6700\u65e9\u7684\u548c $1\\rightarrow n$ \u7684\u6c47\u5408\u70b9\u4f1a\u662f $\\operatorname{lca}(v',n)$\uff0c\u540c\u6837\u5730\uff0c\u5982\u679c\u4e0d\u6c47\u5408\u7684\u8bdd\uff0c\u4e00\u5b9a\u4f1a\u8d70\u522b\u7684\u8fb9\uff0c\u8fd9\u6837 $\\operatorname{lca}(v',n)\\rightarrow n$ \u5c31\u4f1a\u88ab\u522b\u7684\u8fb9\u66f4\u65b0\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u53ea\u66f4\u65b0\u4e00\u5b9a\u4f1a\u88ab\u66f4\u65b0\u7684\u8fb9\uff0c\u5982\u679c\u5728\u4e24\u4e2a $\\operatorname{lca}$ \u4e4b\u540e\u6ca1\u6709\u8d70\u6811\u8fb9\u53cd\u800c\u66f4\u77ed\uff0c\u66f4\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u5c06\u4f1a\u7ee7\u7eed\u66f4\u65b0\u6811\u4e0a\u7684\u4fe1\u606f\uff0c\u4ece\u800c\u4fdd\u8bc1\u6b63\u786e\u6027\u3002\n\n\u66f4\u65b0\u662f\u53d6 $\\min$\uff0c\u4e8e\u662f\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u603b\u7684\u590d\u6742\u5ea6 $O(n\\log n+m\\log n+q\\log n)$\u3002\n\n\u7ec6\u8282\u8f83\u5c11\uff0c\u60f3\u660e\u767d\u4e86\u90fd\u662f\u677f\u5b50\uff0c\u4f46 20min AC \u7684\u5c31\u5f88\u79bb\u8c31\uff0c\u6211\u8c03\u4e86\u4e00\u4e2a\u4e0b\u5348...\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <queue>\n#include <map>\n\nusing namespace std;\n\n#define vc vector\n#define pq priority_queue\n#define pb push_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<ll, ll> pll;\ntypedef pair<int, int> pii;\ntypedef pair<pii, ll> pil;\n\nconst int N = 2e5 + 5;\nconst ll INF = 1e18;\n\nstruct Node {\n\tint left, right;\n\tll mini, tag;\n};\n\nvc<pll> adj[N], tr[N];\nvc<int> path;\nint n, m, q;\nll dis1[N], disn[N];\nint fa1[N], inq[N];\nint fa[N][20], dep[N], pos[N];\npil eg[N];\nNode tree[N << 2];\n\nvoid Tag(int cur, ll x) {\n\ttree[cur].mini = min(tree[cur].mini, x);\n\ttree[cur].tag = min(tree[cur].tag, x);\n}\n\nvoid PushUp(int cur) {\n\ttree[cur].mini = min(tree[cur << 1].mini, tree[cur << 1 | 1].mini);\n}\n\nvoid PushDown(int cur) {\n\tTag(cur << 1, tree[cur].tag), Tag(cur << 1 | 1, tree[cur].tag);\n\ttree[cur].tag = INF;\n}\n\nvoid Build(int cur, int l, int r) {\n\ttree[cur].left = l, tree[cur].right = r;\n\ttree[cur].tag = tree[cur].mini = INF;\n\tif(l == r) {\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tBuild(cur << 1, l, mid), Build(cur << 1 | 1, mid + 1, r);\n\tPushUp(cur);\n}\n\nvoid Modify(int cur, int l, int r, ll x) {\n\tif(l <= tree[cur].left && tree[cur].right <= r) {\n\t\tTag(cur, x);\n\t\treturn;\n\t}\n\tPushDown(cur);\n\tint mid = tree[cur].left + tree[cur].right >> 1;\n\tif(l <= mid) {\n\t\tModify(cur << 1, l, r, x);\n\t}\n\tif(mid < r) {\n\t\tModify(cur << 1 | 1, l, r, x);\n\t}\n\tPushUp(cur);\n}\n\nll Min(int cur, int l, int r) {\n\tif(l <= tree[cur].left && tree[cur].right <= r) {\n\t\treturn tree[cur].mini;\n\t}\n\tPushDown(cur);\n\tint mid = tree[cur].left + tree[cur].right >> 1;\n\tll res = INF;\n\tif(l <= mid) {\n\t\tres = min(res, Min(cur << 1, l, r));\n\t}\n\tif(mid < r) {\n\t\tres = min(res, Min(cur << 1 | 1, l, r));\n\t}\n\treturn res;\n}\n\nbool Relax(int u, int v, ll w, ll dis[]) {\n\tif(dis[u] + w < dis[v]) {\n\t\tdis[v] = dis[u] + w;\n\t\tfa1[v] = u;\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nvoid Dij(int s, ll dis[]) {\n\tpq<pll, vc<pll>, greater<pll> > q;\n\tfor(int i = 1; i <= n; i++) {\n\t\tdis[i] = INF, inq[i] = 0;\n\t}\n\tq.push(mp(dis[s] = 0, s));\n\twhile(!q.empty()) {\n\t\tint u = q.top().second;\n\t\tq.pop();\n\t\tif(inq[u]) {\n\t\t\tcontinue;\n\t\t}\n\t\tinq[u] = 1;\n\t\tfor(auto x : adj[u]) {\n\t\t\tint v = x.first;\n\t\t\tll w = x.second;\n\t\t\tif(Relax(u, v, w, dis)) {\n\t\t\t\tq.push(mp(dis[v], v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid Dfs(int u, int f) {\n\tfa[u][0] = f;\n\tdep[u] = dep[f] + 1;\n\tfor(int i = 1; i < 20; i++) {\n\t\tfa[u][i] = fa[fa[u][i-1]][i-1];\n\t}\n\tfor(auto x : tr[u]) {\n\t\tint v = x.first;\n\t\tll w = x.second;\n\t\tif(v != f) {\n\t\t\tDfs(v, u);\n\t\t}\n\t}\n}\n\nvoid Pre() {\n\tfor(int i = 2; i <= n; i++) {\n\t\tint u = fa1[i], v = i;\n\t\tll w = dis1[v] - dis1[u];\n\t\ttr[u].pb(mp(v, w)), tr[v].pb(mp(u, w));\n\t}\n\tDfs(1, 0);\n}\n\nint LCA(int x, int y) {\n\tif(dep[x] < dep[y]) {\n\t\tswap(x, y);\n\t}\n\tfor(int i = 19; i > -1; i--) {\n\t\tif(dep[fa[x][i]] >= dep[y]) {\n\t\t\tx = fa[x][i];\n\t\t}\n\t}\n\tif(x == y) {\n\t\treturn x;\n\t}\n\tfor(int i = 19; i > -1; i--) {\n\t\tif(fa[x][i] != fa[y][i]) {\n\t\t\tx = fa[x][i], y = fa[y][i];\n\t\t}\n\t}\n\treturn fa[x][0];\n}\n\nbool ontree(int u, int v, ll w) {\n\treturn (fa1[u] == v || fa1[v] == u) && (dis1[u] + w == dis1[v] || dis1[v] + w == dis1[u]);\n}\n\nint main() {\n\tscanf(\"%d%d%d\", &n, &m, &q);\n\tfor(int i = 1; i <= m; i++) {\n\t\tint u, v;\n\t\tll w;\n\t\tscanf(\"%d%d%lld\", &u, &v, &w);\n\t\teg[i] = mp(mp(u, v), w);\n\t\tadj[u].pb(mp(v, w)), adj[v].pb(mp(u, w));\n\t}\n\tDij(n, disn), Dij(1, dis1);\n\tPre();\n\tfor(int i = n; i != 1; i = fa1[i]) {\n\t\tpath.pb(i);\n\t}\n\tpath.pb(1);\n\tpath.pb(0);\n\treverse(path.begin(), path.end());\n\tfor(int i = 1; i < path.size(); i++) {\n\t\tpos[path[i]] = i;\n\t}\n\tBuild(1, 1, n);\n\tfor(int i = 1; i <= m; i++) {\n\t\tint u = eg[i].first.first, v = eg[i].first.second;\n\t\tll w = eg[i].second;\n\t\tint lca1 = LCA(u, n), lca2 = LCA(v, n);\n\t\tint l = pos[lca1], r = pos[lca2];\n\t\tif(l > r) {\n\t\t\tswap(l, r);\n\t\t}\n\t\tif(l == r) { //\u5982\u679c\u4e24\u4e2alca\u4e00\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u80fd\u66f4\u65b0\u7684\u8fb9\u53ea\u6709lca\u4e0b\u9762\u7684\u4e00\u6761\u8fb9\uff0c\u8fd9\u662f\u6211\u4eec\u552f\u4e00\u4fdd\u8bc1\u4e0d\u4f1a\u8d70\u8fc7\u7684\u8fb9\n\t\t\tl++, r++;\n\t\t} else {\n\t\t\tl++;\n\t\t}\n\t\tif(ontree(u, v, w)) {\n\t\t\tcontinue;\n\t\t}\n\t\tModify(1, l, r, min(dis1[u] + disn[v] + w, dis1[v] + disn[u] + w));\n\t}\n\tfor(int i = 1; i <= q; i++) {\n\t\tint t;\n\t\tll x;\n\t\tscanf(\"%d%lld\", &t, &x);\n\t\tint u = eg[t].first.first, v = eg[t].first.second;\n\t\tll w = eg[t].second;\n\t\tif(dis1[u] > dis1[v]) {\n\t\t\tswap(u, v);\n\t\t}\n\t\tif(pos[u] && pos[v] && dis1[u] + w == dis1[v]) {\n\t\t\tif(x < w) {\n\t\t\t\tprintf(\"%lld\\n\", dis1[n] - w + x);\n\t\t\t} else {\n\t\t\t\tll mini = Min(1, pos[v], pos[v]);\n\t\t\t\tprintf(\"%lld\\n\", min(dis1[n] - w + x, mini));\n\t\t\t}\n\t\t} else {\n\t\t\tif(x < w) {\n\t\t\t\tprintf(\"%lld\\n\", min(dis1[n], min(dis1[u] + x + disn[v], dis1[v] + x + disn[u])));\n\t\t\t} else {\n\t\t\t\tprintf(\"%lld\\n\", dis1[n]);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u8fb9\uff0c\u8fd9\u4e2a solution \u5c31\u4f1a\u6302\u6389\uff0c\u6bd4\u5982\u50cf\uff1a\n\n```\n2 3 3\n1 2 114514\n1 2 114514\n1 2 114514\n1 1919810\n2 1919810\n3 1919810\n```\n\u4e0d\u77e5\u9053\u8fd9\u7ec4\u6570\u636e\u5408\u4e0d\u5408\u6cd5\u3002\n\n\u5224\u6811\u8fb9\u7684\u65f6\u5019\u7279\u5224\u4e00\u4e0b\u5c31\u884c\u4e86\uff08\u53cd\u6b63\u4ed6 AC \u4e86\u7ba1\u4ed6\u5462\uff1f",
        "postTime": 1600179817,
        "uid": 95103,
        "name": "KellyFrog",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1163F \u3010Indecisive Taxi Fee\u3011"
    },
    {
        "content": "# CF1163F Indecisive Taxi Fee\n\n## UPD\uff1a2020.09.09\n\n## \u524d\u8a00\n\n**\u56fe\u7247\u52a0\u8f7d\u4e0d\u51fa\u8bf7\u70b9\u51fb\u4e0b\u65b9\u94fe\u63a5**\n\n**\u5982\u6709\u9519\u8bef\u6b22\u8fce\u6307\u6b63\uff01**\n\n**\u6b22\u8fceHack\uff01**\n\n**\u535a\u5ba2\u98df\u7528\uff1a[\u70b9\u6211\u70b9\u6211\uff01\uff01](https://www.cnblogs.com/zythonc/p/13541700.html)**\n\n## \u3010\u4e3b\u8981\u5185\u5bb9\u76ee\u5f55\u3011\n- **\u5206\u6790\u8fc7\u7a0b**\n- **\u4ee3\u7801**\n- **\u7b54\u7591\u89e3\u60d1\uff08\u907f\u514d\u8e29\u96f7\uff1f\uff09**\n\n### \u3010\u53d8\u91cf\u542b\u4e49\u3011\n```posdis[i]```\uff1ai\u70b9\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8def\n\n```invdis[i]```\uff1ai\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\n\n```dis[i]```\uff1a1\u5230i\u7684\u6700\u77ed\u8def\n\n```fr[i]```\uff1ai\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\n\n```to[i]```\uff1ai\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\n\n```w[i]```\uff1ai\u8fd9\u6761\u8fb9\u7684\u6743\u503c\n\n### \u3010\u5206\u6790\u8fc7\u7a0b\u3011\n\n**\u5bf9\u4e8e\u539f\u56fe**\uff0c\u5f53\u67d0\u6761\u8fb9\u7684\u6743\u503c\u88ab\u4fee\u6539\u4e4b\u540e\uff0c\u56fe\u5185\u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\n\n\u9996\u5148\u601d\u8003\u66b4\u529b\u505a\u6cd5\n\u5f88\u7b80\u5355\uff0c\u4fee\u6539\u4e4b\u540e\u8dd1\u6700\u77ed\u8def\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7206\u70b8\n\n------------------------------------\n\n**\u8003\u8651\u4e00\u9053\u56fe\u8bba\u9898\uff1a\u6c42\u56fe\u4e0a\u7ecf\u8fc7\u67d0\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u5f84**\n\n\u5f88\u7b80\u5355\u5427\uff1f\u6b63\u5411\u5efa\u8fb9+\u53cd\u5411\u5efa\u8fb9\uff0c\u5206\u522b\u4ece\u8d77\u70b9\u4e0e\u7ec8\u70b9\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0e\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\n\n\u7b54\u6848\u5c31\u662f\uff1a$min(posdis[fr[i]]+invdis[to[i]]+w[i],posdis[to[i]]+inv[fr[i]]+w[i])$\n\n---------------------------------\n\n\u4f3c\u4e4e\u8fd9\u4e2a\u9898\u53ef\u80fd\u7528\u5230\u8fd9\u4e2a\u601d\u60f3\n\n\u8003\u8651\u7279\u6b8a\u60c5\u51b5\uff0c\u5f53\u4fee\u6539\u7684\u8fb9\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u5e76\u4e14\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u88ab\u4fee\u6539\u5c0f\u4e86\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6bd4\u4e2a\u5927\u5c0f\uff0c\u7b54\u6848\u5c31\u51fa\u6765\u4e86\n\n\u8fd9\u662f\u4e00\u79cd\u60c5\u51b5\n\u4e00\u63d0\u5230\u201c\u60c5\u51b5\u201d\u8fd9\u4e2a\u8bcd\uff0c\u4e0d\u96be\u53d1\u73b0\u8fd9\u9053\u9898\u53ef\u4ee5**\u5206\u7c7b\u8ba8\u8bba**\n\n---------------------------------\n\n**\u3010\u60c5\u51b5\u4e00\u3011\u5f53\u4fee\u6539\u7684\u8fb9\u5728\u6700\u77ed\u8def\u7684\u8def\u5f84\u4e0a\uff0c\u5e76\u4e14\u6743\u503c\u88ab\u4fee\u6539\u5c0f\u4e86**\n\n\u3010\u505a\u6cd5\u3011\u76f4\u63a5\u8f93\u51fa\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u51cf\u53bb\u5dee\u503c\n\n\u3010\u6b63\u786e\u6027\u3011\n- \u672c\u6765\u5c31\u662f\u6700\u77ed\u8def\u4e86\uff0c\u8def\u5f84\u8fd8\u88ab\u4fee\u6539\u5c0f\u4e86\uff0c\u90a3\u5f53\u7136\u662f\u6700\u5c0f\u7684\n\n**\u3010\u60c5\u51b5\u4e8c\u3011\u5f53\u4fee\u6539\u7684\u8fb9\u4e0d\u5728\u6700\u77ed\u8def\u7684\u8def\u5f84\u4e0a\uff0c\u5e76\u4e14\u6743\u503c\u88ab\u4fee\u6539\u5c0f\u4e86**\n\n\u3010\u505a\u6cd5\u3011\u6bd4\u8f83\u8fd9\u4e24\u6761\u8def\u5f84\u5373\u53ef\uff1a$min(dis[n],min(posdis[fr[i]]+invdis[to[i]]+w[i],posdis[to[i]]+inv[fr[i]]+w[i]))$\n\n\u3010\u6b63\u786e\u6027\u3011\n- \u6ca1\u88ab\u4fee\u6539\u4e4b\u524d\u6240\u6709\u7684\u8def\u5f84\u80af\u5b9a\u90fd\u662f\u5927\u4e8e\u7b49\u4e8e\u6700\u77ed\u8def\u7684\u503c\u7684\uff0c\u4fee\u6539\u4e4b\u540e\u53ea\u6709\u5b58\u5728\u88ab\u4fee\u6539\u7684\u8fd9\u6761\u8fb9\u7684\u8def\u5f84\u7684\u6700\u77ed\u8def\u5f84\u7684\u503c\u53d1\u751f\u4e86\u53d8\u5316\n- \u8fd9\u4e2a\u8def\u5f84\u6709\u5f88\u591a\uff0c\u4f46\u662f\u6211\u4eec\u5173\u5fc3\u7684\u53ea\u662f\u6700\u5c0f\u503c\uff0c\u5373\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\uff0c\u7531\u4e0a\u53ef\u5f97\u505a\u6cd5\u6b63\u786e\n\n**\u3010\u60c5\u51b5\u4e09\u3011\u5f53\u4fee\u6539\u7684\u8fb9\u4e0d\u5728\u6700\u77ed\u8def\u7684\u8def\u5f84\u4e0a\uff0c\u5e76\u4e14\u6743\u503c\u88ab\u4fee\u6539\u5927\u4e86**\n\n\u3010\u505a\u6cd5\u3011\u8f93\u51fa$dis[n]$\u5373\u53ef\n\n\u3010\u6b63\u786e\u6027\u3011\n- \u663e\u7136\n\n**\u3010\u60c5\u51b5\u56db\u3011\u5f53\u4fee\u6539\u7684\u8fb9\u5728\u6700\u77ed\u8def\u7684\u8def\u5f84\u4e0a\uff0c\u5e76\u4e14\u6743\u503c\u88ab\u4fee\u6539\u5927\u4e86**\n\n\u8fd9\u79cd\u662f\u6700\u9ebb\u70e6\u7684\uff0c\u672c\u6765\u4ee5\u4e3a\u548ck\u77ed\u8def\u505a\u6cd5\u5dee\u4e0d\u591a\uff0c\u7136\u540e\u8d2a\u5fc3\u5c31\u884c\u4e86\n\n\u7ed3\u679c\u53d1\u73b0\u8fd8\u662f\u6211\u592a\u5f31\u4e86\uff0c**\u56e0\u4e3a\u6b21\u77ed\u8def\uff0c\u6b21\u6b21\u77ed\u8def\u90fd\u6709\u53ef\u80fd\u7ecf\u8fc7\u8fd9\u6761\u8fb9**\n\n\u5f53\u8fd9\u6761\u8fb9\u88ab\u4fee\u6539\u7684\u65f6\u5019\uff0c\u4f1a\u5f71\u54cd\u5f88\u591a\u8def\u5f84\n\n\u8003\u8651\u4ece\u6700\u7ec8\u7ed3\u679c\u9006\u63a8\uff0c\u6700\u540e\u8f93\u51fa\u7684\u7b54\u6848\u80af\u5b9a\u662f$dis[n]$\u52a0\u4e0a\u5dee\u503c\uff0c\u7136\u540e\u4e0e\u4e0d\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\u6bd4\u4e2a\u5927\u5c0f\n\u533a\u95f4\u64cd\u4f5c\u554a...\u80af\u5b9a\u662f\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5566\n\n\u6211\u4eec\u6307\u5b9a**\u4e00\u6761**\u6700\u77ed\u8def\u5f84\uff0c\u7136\u540e\u7528\u4e0d\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u8fb9\u53bb\u66f4\u65b0$[l,r]$\n\n\u4f8b\u5982\u8fb9$2\\to4$\uff0c\u5c31\u53ef\u4ee5\u66f4\u65b0\u84dd\u8272\u533a\u95f4\uff1a\n\n\u7ea2\u8272\u8fb9\u4e3a\u6700\u77ed\u8def\u5f84\n\n![](https://images.cnblogs.com/cnblogs_com/zythonc/1644059/o_200821091629s.png)\n\n**\u90a3$l$\u548c$r$\u662f\uff1f**\n\n\u5bf9\u4e8e\u4e00\u6761**\u7ed5\u8fc7\u4e00\u6761\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9**\u7684\u8def\u5f84\n\n\u5b83\u80af\u5b9a\u662f\u5728\u5728\u539f\u6765\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u67d0\u4e2a\u70b9$p_1$\u5206\u53c9\uff0c\u7ecf\u8fc7\u8fd9\u6761\u8fb9\uff0c\u7136\u540e\u53c8\u5728\u5728\u539f\u6765\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u67d0\u4e2a\u70b9$p_2$\u56de\u6765\uff0c\u4f8b\u5982\uff1a\n\n![](https://images.cnblogs.com/cnblogs_com/zythonc/1644059/o_200821093000ss.png)\n\n\uff08\u7ea2\u8272\u8fb9\u8def\u5f84\u4e3a\u6700\u77ed\u8def\uff09\n\n\u5f53\u4e0d\u7ecf\u8fc7\u8fb9$2\\to6$\n**\u53ef\u80fd\u4ece6\u5206\u53c9\uff0c\u6cbf\u6a59\u8272\u8def\u5f84\u52305\u6c47\u5408\uff0c\u4e5f\u53ef\u80fd\u76f4\u63a5\u6cbf\u84dd\u8272\u8def\u5f84\u4ece\u7ec8\u70b9\u6c47\u5408**\n\n\u89c4\u5b9a\uff1a\n- \u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u7684\u65b9\u5411\u4e3a\u5230\u7ec8\u70b9\u7684\u65b9\u5411\n- \u8fd9\u91cc\u6240\u8bf4\u7684\u5165\u8fb9\u4e3a\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\n\n**$l$\u5c31\u662f$p_1$\u7684\u5165\u8fb9\uff0c$r$\u5c31\u662f$p_2$\u7684\u5165\u8fb9**\n\n\u5f53\u4ece$5$\u6c47\u5408\u65f6\uff0c\u8fb9$5\\to8$\u5c31\u80fd\u66f4\u65b0\u8def\u5f84$1\\to6\\to2\\to3\\to4\\to5$\n\u4e5f\u5c31\u662f$p_1\\to p_2$\n\n\u6ca1\u6709\u5199\u5177\u4f53\u6570\u503c\u5c31\u662f\u4e3a\u4e86\u4e00\u56fe\u591a\u7528\uff0c\u80fd\u591f\u6a21\u62df\u66f4\u591a\u60c5\u51b5\n\n**\u8bf6\uff0c\u53d1\u73b0\u4e86\u6ca1\u6709\uff0c\u8fd9\u5c31\u662f\u95ee\u4f60\u7ecf\u8fc7\u67d0\u6761\u6307\u5b9a\u8fb9\u7684\u6700\u77ed\u8def\u7684\u65f6\u5019\u987a\u4fbf\u505a\u7684\u4e8b\u60c5**\n\n\u6700\u540e\u67e5\u8be2\u5373\u53ef\n### \u3010\u4ee3\u7801\u5b9e\u73b0\u3011\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#define int long long\n#define N 1000001\n#define INF 999999999999999\nusing namespace std;\nint n,m,q,fr[N],to[N],w[N],bf,head[N],num,posdis[N],invdis[N],now,pathnum,ce,cv,ans,redge[N],pathnumrc[N],*toa,l[N],r[N];\nbool on[N],vis[N];\npriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >qu;\nstruct seg {int v;} t[N];\nstruct Edge {int fp,na,np,w;} e[N<<2];\ninline int min(int a,int b){return a>b?b:a;}\ninline void add(int f,int t,int w){\n\te[++num].na=head[f];\n\te[num].fp=f;e[num].np=t;e[num].w=w;\n\thead[f]=num;\n}\ninline void dij(int s,int *pa,short sta){\n\tfor(int i=1;i<=n;i++) *(pa+i)=INF,vis[i]=0;\n\t*(pa+s)=0;\n\tqu.push(make_pair(0,s));\n\twhile(!qu.empty()){\n\t\tbf=qu.top().second;qu.pop();\n\t\tif(vis[bf]) continue;\n\t\tvis[bf]=1;\n\t\tfor(int i=head[bf];i;i=e[i].na){\n\t\t\tif(*(pa+bf)+e[i].w<*(pa+e[i].np)){\n\t\t\t\tredge[e[i].np]=i;\n\t\t\t\t*(pa+e[i].np)=*(pa+bf)+e[i].w;\n\t\t\t\tqu.push(make_pair(*(pa+e[i].np),e[i].np));\n\t\t\t\tif(!on[e[i].np]){\n\t\t\t\t\tif(sta==1) l[e[i].np]=l[bf];\n\t\t\t\t\telse if(sta==2) r[e[i].np]=r[bf];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\ninline void build(int node,int l,int r){\n\tt[node].v=INF;\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tbuild(node<<1,l,mid);\n\tbuild(node<<1|1,mid+1,r);\n}\ninline void upd(int node,int fl,int fr,int ul,int ur,int v){\n\tif(ul>ur) return;\n\tif(ul<=fl&&fr<=ur){\n\t\tt[node].v=min(t[node].v,v);\n\t\treturn;\n\t}\n\tint mid=(fl+fr)>>1;\n\tif(ul<=mid) upd(node<<1,fl,mid,ul,ur,v);\n\tif(mid<ur) upd(node<<1|1,mid+1,fr,ul,ur,v);\n}\ninline int query(int node,int l,int r,int rc){\n\tif(l==r) return t[node].v;\n\tint mid=(l+r)>>1,rans=t[node].v;\n\tif(rc<=mid) rans=min(rans,query(node<<1,l,mid,rc));\n\telse rans=min(rans,query(node<<1|1,mid+1,r,rc));\n\treturn rans;\n}\nsigned main(){\n\tscanf(\"%lld%lld%lld\",&n,&m,&q);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%lld%lld%lld\",&fr[i],&to[i],&w[i]);\n\t\tadd(fr[i],to[i],w[i]);\n\t\tadd(to[i],fr[i],w[i]);\n\t\tpathnumrc[i]=pathnumrc[m+i]=-1;\n\t}\n\ttoa=invdis;dij(n,toa,0);\n\ton[1]=1;pathnum=l[1]=r[1]=0;now=1;\n\twhile(now!=n){\n\t\tpathnumrc[redge[now]]=pathnum+1;\n\t\tif(redge[now]%2) pathnumrc[redge[now]+1]=pathnum+1;\n\t\telse pathnumrc[redge[now]-1]=pathnum+1;\n\t\tpathnum+=1;\n\t\tnow=e[redge[now]].fp^e[redge[now]].np^now;\n\t\ton[now]=1;l[now]=r[now]=pathnum;\n\t}\n\ttoa=posdis;dij(1,toa,1);\n\ttoa=invdis;dij(n,toa,2);\n\tbuild(1,1,pathnum);\n\tfor(int i=1;i<=num;i++)\n\t\tif(pathnumrc[i]==-1)\n\t\t\tupd(1,1,pathnum,l[e[i].fp]+1,r[e[i].np],posdis[e[i].fp]+invdis[e[i].np]+e[i].w);\n\tfor(int i=1;i<=q;i++){\n\t\tscanf(\"%lld%lld\",&ce,&cv);\n\t\tans=posdis[n];\n\t\tif(pathnumrc[ce<<1]==-1){\n\t\t\tif(cv<w[ce])\n\t\t\t\tans=min(ans,min(posdis[fr[ce]]+invdis[to[ce]],posdis[to[ce]]+invdis[fr[ce]])+cv);\n\t\t}\n\t\telse{\n\t\t\tans=ans-w[ce]+cv;\n\t\t\tif(cv>w[ce]) ans=min(ans,query(1,1,pathnum,pathnumrc[ce<<1]));\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n}\n```\n### \u3010\u7b54\u7591\u89e3\u60d1\u3011\n**\u9488\u5bf9\u9605\u8bfb\u4ee3\u7801\u7684\u65f6\u5019\u53ef\u80fd\u4ea7\u751f\u7684\u95ee\u9898\u8fdb\u884c\u56de\u7b54\uff1a**\n- \u6ce8\u610f\u5230\u6211\u4eec\u5c06\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u8fdb\u884c\u4e86**\u8fde\u7eed\u7684**\u6807\u53f7\u5904\u7406\uff0c\u6240\u4ee5\u533a\u95f4$[2,5]$\u6307\u7684\u662f**\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u7b2c\u4e8c\u6761\u8fb9\u5230\u7b2c\u4e94\u6761\u8fb9**\n- \u56e0\u4e3a\u6709\u7684\u65f6\u5019\u8fb9\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9\u662f\u53cd\u7684\uff0c\u6839\u636e**\u4e24\u4e2a\u76f8\u540c\u7684\u6570\u5f02\u6216\u7ed3\u679c\u4e3a0\uff0c0\u4e0e\u4efb\u4f55\u6570\u5f02\u6216\u90fd\u4e3a\u539f\u6570**\u8fd9\u4e9b\u6027\u8d28\uff0c\u6211\u4eec\u81ea\u7136\u80fd\u591f\u6b63\u786e\u7684\u627e\u5230\u4e0b\u4e00\u4e2a$now$\u7684\u4f4d\u7f6e\n- \u56e0\u4e3a\u662f\u53cc\u5411\u8fb9\u81ea\u7136\u8981\u6709\u9009\u62e9\u6027\u7684\u8fdb\u884c\u5904\u7406\uff0c\u4f8b\u5982\u4e58\u4e8c\uff0c\u5224\u65ad\u5947\u5076\u7b49\u7b49\n- \u7b2c\u4e00\u904d\u4e3a\u5565\u662f\u53cd\u7740\u641c\uff1f\u2014\u2014\u4f60\u6b63\u7740\u8bd5\u8bd5\n\n### \u3010\u540e\u8bb0\u3011\n\u771f\u6b63\u7406\u89e3\u4e86\u8fd9\u9053\u9898\uff0c\u4f60\u662f\u4e0d\u662f\u89c9\u5f97\u5f88\u7b80\u5355\u5462\uff1f\n\u603b\u7ed3\u7ecf\u9a8c\u4e0e\u6559\u8bad\uff0c\u4f1a\u5bf9\u4f60\u6709\u5f88\u5927\u7684\u5e2e\u52a9\n\n# \u6b22\u8fceHack\uff01\uff01",
        "postTime": 1598006189,
        "uid": 215573,
        "name": "zythonc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1163F \u3010Indecisive Taxi Fee\u3011"
    },
    {
        "content": "\u8f6c\u6362\u601d\u8def\u5f88nb\u3002\n\n\u8bbe\u4fee\u6539\u7684\u8fb9\u4e3a $(x,y)$\uff0c\u8fb9\u6743\u4e3a z\n\n\u4e0d\u59a8\u8bbe\u8d77\u70b9\u4e3a 1\uff0c\u7ec8\u70b9\u4e3a n\u3002\n\n\u5efa\u51fa\u6700\u77ed\u8def\u5f84\u6811\uff0c\u641e\u51fa $1-n$ \u7684\u4e00\u6761\u94fe\uff08\u4e0b\u6587\u7b80\u79f0\u201c\u94fe\u201d\uff09\u3002\n\n\u8bbe\u8fb9\u6570\u4e3alen\uff0c\u8bb0\u5f55\u94fe\u7ecf\u8fc7\u7684\u8fb9\u5206\u522b\u4e3a $a_i(i\\in[1,len])$\n\n\u9884\u5904\u7406 1 \u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb $dis_{1,i}$ \u548c $n$ \u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb $dis_{n,i}$\n\n\u8003\u8651\u5bf9\u4fee\u6539\u7684\u8fb9\u8fdb\u884c\u5206\u7c7b:\n\n1. \u4fee\u6539\u8fb9\u4e0d\u5728\u94fe\u4e0a\n\t\n    \u660e\u663e\u7b54\u6848\u4e3a $min\\{dis_{1,n},dis_{1,x}+z+dis_{y,n},dis_{1,y}+z+dis_{x,n}\\}$\n\n2. \u4fee\u6539\u8fb9\u5728\u94fe\u4e0a\n\n\t\u4e0d\u59a8\u5047\u8bbe\u6700\u77ed\u8def\u5f84 $1->n$ \u4e2d\u4e3a $x->y$\n\n\t\u8003\u8651\u4ece\u56fe\u4e0a\u5220\u9664\u8fd9\u6761\u8fb9\u518d\u6c42\u6700\u77ed\u8def\u3002\n\n\t\u8fd9\u7b49\u4ef7\u4e8e\u6c42\u51fa\u5bf9\u4e8e\u6240\u6709 $u\\in[1,x]$\uff0c$v\\in[y,n]$\uff0c\u5148\u6cbf\u94fe $1->u$\uff0c\u518d\u79bb\u5f00\u94fe $u->v$\uff0c\u6700\u540e\u6cbf\u94fe $v->n$ \u7684\u5408\u6cd5\u8def\u5f84\u7684\u957f\u5ea6\u6700\u5c0f\u503c\u3002(\u6b64\u5904\u7684 $[1,x],[y,n]$ \u5747\u4e3a\u94fe\u4e0a\u70b9)\n    \n\t![image](https://cdn.luogu.com.cn/upload/image_hosting/toamtx2r.png)\n\n\t\u5047\u8bbe $c$ \u4e3a\u8d77\u70b9\uff0c$v$ \u4e3a\u7ec8\u70b9\uff0c\u6700\u77ed\u8def\u5f84\u4e3a $c->x->y->v$ \n\t\u90a3\u4e48 $c->x$\uff0c$x->b$\uff0c$b->w$\uff0c$w->y$\uff0c$y->v$ \u5c31\u662f\u5408\u6cd5\u7684\u3002\n\n\t\u8fd9\u73a9\u610f\u770b\u8d77\u6765\u975e\u5e38\u96be\u641e\uff0c\u590d\u6742\u5ea6\u8d77\u98de\u3002\u60f3\u60f3\u529e\u6cd5\u8f6c\u5316\u4e00\u4e0b\u3002\n\t\n   \u8003\u8651\u975e\u94fe\u8fb9\u5bf9\u6b64\u7684\u5f71\u54cd\u3002\n\t\n    \u82e5\u6211\u4eec\u5f3a\u5236\u7ecf\u8fc7\u4e00\u6761\u975e\u94fe\u8fb9 $(u,v,w)$\uff0c\u5219\u8d21\u732e\u4e3a$min\\{dis_{1,u}+w+dis_{v,n},dis_{1,v}+w+dis_{u,n}\\}$\n\t\n    \u8003\u8651\u54ea\u4e9b\u94fe\u8fb9\u80fd\u591f\u83b7\u5f97\u6b64\u8d21\u732e\u3002\n\t\n    \u8bbe 1->u \u7ecf\u8fc7\u7684\u94fe\u4e0a\u7684\u8fb9\u7684\u6700\u5927\u7f16\u53f7\u4e3a a\uff0cv->n \u7ecf\u8fc7\u7684\u94fe\u4e0a\u7684\u8fb9\u7684\u6700\u5c0f\u7f16\u53f7\u4e3a b\n\n\t\u8bbe a \u7684\u76f8\u5bf9\u9760\u8fd1 n \u7684\u7aef\u70b9\u4e3a p\uff0cb \u7684\u76f8\u5bf9\u9760\u8fd1 1 \u7684\u7aef\u70b9\u4e3a q\u3002\t\n\n\t\u7ed3\u8bba\uff1a**$(u,v,w)$\u5bf9\u7f16\u53f7\u4e3a$i\\in[a+1,b-1]$\u7684\u8fb9\u6709\u8d21\u732e**\n\n\t\u8bc1\u660e\uff1a~~\u663e\u7136~~\n\n\t\u624b\u6478\u53ef\u4ee5\u53d1\u73b0\u5e76\u4e0d\u4f1a\u5728 $p->q$ \u7684\u8fc7\u7a0b\u4e2d\u7ecf\u8fc7\u94fe\u4e0a\u7684\u8fb9\u3002\n\n\t\u53cd\u8bc1\uff1a\u8bbe $p->r->s->q$,\u4e3a\u6700\u4f18\u65b9\u5f0f,\u5176\u4e2d $r->s$ \u4e3a\u94fe\u8fb9\u3002\n\t\n    \u82e5 $p->r->s->q$ \u66f4\u4f18\uff0c\u5219\u5e94\u6709\u6700\u77ed\u8def $1->p->r->s->q->n$ \u800c\u975e\u539f\u94fe\uff0c\u8bc1\u6bd5\u3002\n\n\t\u90a3\u4e48\u94fe\u4e0a\u4ece p \u5230 q \u7684\u8fb9\u90fd\u90fd\u53ef\u4ee5\u88ab\u66f4\u65b0\u3002\n\t\n    \u5982\u679c\u6709\u7b49\u4ef7\u8def\u5f84\u5219\u5c3d\u91cf\u79bb\u5f00\u94fe\u3002\n\n\n\t\u5b9e\u73b0\u4e2d\u8fd9\u73a9\u610f\u5176\u5b9e\u4e0d\u4e00\u5b9a\u662f\u4e00\u6bb5\u8fde\u7eed\u524d\u540e\u7f00\n\n\t\u6bd4\u5982\u8fd9\u6837\uff1a\n\n\t![image](https://cdn.luogu.com.cn/upload/image_hosting/uy3a5bb9.png)\n\n\t\u5728\u6709\u591a\u6761\u6700\u77ed\u8def\u5f84\u65f6\u53ef\u4ee5\u770b\u5230\u4e0d\u4e00\u5b9a\u8981\u6cbf\u7740\u94fe\u8d70\u3002\n\n\t\u6bd4\u5982\u8003\u8651\u7ecf\u8fc7 $(6,8,2)$ \u65f6 $1->2->4->5->6->8$ \u53ef\u884c\u3002\n\n\t\u6240\u4ee5\u624d\u91c7\u53d6\u6700\u5927 a\uff0c\u6700\u5c0f b \u7684\u5f62\u5f0f\u3002\n\n---\n## code\n~~no such code~~\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nstruct edge{\n\tint y,z,nxt;\n}e[400010];\nint head[200010],cnt;\nll dis[200010];\nll dis1[200010];\nll dis2[200010];\nstruct data{\n\tint x;\n\tbool operator <(const data &v)const{\n\t\treturn dis[x]>dis[v.x];\n\t}\n};\npriority_queue<data>q;\nint in[400010];\nbool inq[200010];\nint pr1[200010];\nint pr2[200010];\nint fr[200010];\nll tree[800010];\nll laz[800010];\nint n,m,Q,len;\nll ans;\nvoid add(int x,int y,int z){\n\tcnt++;\n\te[cnt].y=y;\n\te[cnt].z=z;\n\te[cnt].nxt=head[x];\n\thead[x]=cnt;\n}\nvoid dij1(){\n\tfor(int i=2;i<=n;i++)\n\tdis[i]=2e18;\n\tq.push((data){1});\n\tinq[1]=true;\n\twhile(q.size()){\n\t\tint x=q.top().x; \n\t\tq.pop(),inq[x]=0;\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tint y=e[i].y,z=e[i].z;\n\t\t\tif(dis[y]>dis[x]+z){\n\t\t\t\tdis[y]=dis[x]+z;\n\t\t\t\tfr[y]=i;\n\t\t\t\tif(inq[y]==0){\n\t\t\t\t\tq.push((data){y});\n\t\t\t\t\tinq[y]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\tdis1[i]=dis[i];\n\tans=dis[n];\n\tint x=n;\n\twhile(x!=1){\n\t\t//cout<<x<<\" \";\n\t\tint i=fr[x]&1?fr[x]+1:fr[x]-1;\n\t\tin[fr[x]]=in[i]=++len;\n\t\tx=e[i].y;\n\t}\n\t//cout<<1<<endl<<endl;\n}\nvoid dij2(){\n\tfor(int i=1;i<=n;i++)\n\tdis[i]=2e18,pr2[i]=n+1;\n\tdis[n]=0;\n\tpr2[n]=0;\n\tq.push((data){n});\n\tinq[n]=true;\n\twhile(q.size()){\n\t\tint x=q.top().x; \n\t\tq.pop(),inq[x]=0;\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tint y=e[i].y,z=e[i].z;\n\t\t\tif(dis[y]>dis[x]+z||(dis[y]==dis[x]+z&&pr2[y]>max(pr2[x],in[i]))){\n\t\t\t\tdis[y]=dis[x]+z;\n\t\t\t\tpr2[y]=max(pr2[x],in[i]);\n\t\t\t\tif(inq[y]==0){\n\t\t\t\t\tq.push((data){y});\n\t\t\t\t\tinq[y]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\tdis2[i]=dis[i];/*,cout<<pr2[i]<<\" \";cout<<endl;\n\tfor(int i=1;i<=n;i++)\n\tcout<<dis2[i]<<\" \";\n\tcout<<endl<<endl;*/\n}\nvoid dij3(){\n\tfor(int i=1;i<=n;i++)\n\tdis[i]=2e18;\n\tdis[1]=0;\n\tpr1[1]=len+1;\n\tq.push((data){1});\n\tinq[1]=true;\n\twhile(q.size()){\n\t\tint x=q.top().x; \n\t\tq.pop(),inq[x]=0;\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tint y=e[i].y,z=e[i].z;\n\t\t\tif(dis[y]>dis[x]+z||(dis[y]==dis[x]+z&&pr1[y]<min(pr1[x],in[i]==0?n+1:in[i]))){\n\t\t\t\tdis[y]=dis[x]+z;\n\t\t\t\tpr1[y]=min(pr1[x],in[i]==0?n+1:in[i]);\n\t\t\t\tif(inq[y]==0){\n\t\t\t\t\tq.push((data){y});\n\t\t\t\t\tinq[y]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t/*for(int i=1;i<=n;i++)\n\tcout<<pr1[i]<<\" \";cout<<endl;\n\tfor(int i=1;i<=n;i++)\n\tcout<<dis1[i]<<\" \";\n\tcout<<endl<<endl;*/\n}\nvoid pushdown(int id){\n\tif(laz[id]!=2e18){\n\t\ttree[id<<1]=min(tree[id<<1],laz[id]);\n\t\ttree[id<<1|1]=min(tree[id<<1|1],laz[id]);\n\t\tlaz[id<<1]=min(laz[id<<1],laz[id]);\n\t\tlaz[id<<1|1]=min(laz[id<<1|1],laz[id]);\n\t\tlaz[id]=2e18;\n\t}\n}\nvoid update(int id,int l,int r,int ul,int ur,ll x){\n\tif(ul<=l&&r<=ur){\n\t\ttree[id]=min(tree[id],x);\n\t\tlaz[id]=min(laz[id],x);\n\t\treturn;\n\t}\n\tpushdown(id);\n\tint mid=(l+r)>>1;\n\tif(ul<=mid) update(id<<1,l,mid,ul,ur,x);\n\tif(ur>mid) update(id<<1|1,mid+1,r,ul,ur,x);\n\ttree[id]=min(tree[id<<1],tree[id<<1|1]);\n}\nll query(int id,int l,int r,int d){\n\tif(l==r) return tree[id];\n\tint mid=(l+r)>>1;\n\tpushdown(id);\n\tif(d<=mid) return query(id<<1,l,mid,d);\n\telse return query(id<<1|1,mid+1,r,d);\n}\nint main(){\n\tint x,y,z;\n\tscanf(\"%d%d%d\",&n,&m,&Q);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z),add(y,x,z);\n\t}\n\t//cout<<endl;\n\tdij1(),dij2(),dij3();\n\t//cout<<endl;\n\tfor(int i=1;i<=4*len;i++)\n\ttree[i]=laz[i]=2e18; \n\tfor(int i=1;i<=2*m;i+=2)\n\tif(in[i]==0){\n\t\tx=e[i].y,y=e[i+1].y,z=e[i].z;\n\t\t//cout<<x<<\" \"<<y<<\" \"<<z<<\" \"<<pr1[x]<<\" \"<<pr2[x]<<\" \"<<pr1[y]<<\" \"<<pr2[y]<<\" \"<<dis1[x]<<\" \"<<dis2[x]<<\" \"<<dis1[y]<<\" \"<<dis2[y]<<endl;\n\t\tif(pr2[x]+1<=pr1[y]-1) update(1,1,len,pr2[x]+1,pr1[y]-1,dis2[x]+dis1[y]+z);\n\t\tif(pr2[y]+1<=pr1[x]-1) update(1,1,len,pr2[y]+1,pr1[x]-1,dis2[y]+dis1[x]+z);\n\t}\n\t//cout<<endl;\n\tfor(int i=1;i<=Q;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tint u=e[2*x].y;\n\t\tint v=e[2*x-1].y;\n\t\tint w=e[2*x].z;\n\t\t//cout<<u<<\" \"<<v<<\" \"<<w<<endl;\n\t\tif(in[2*x]) printf(\"%lld\\n\",min(ans-w+y,query(1,1,len,in[2*x])));\n\t\telse printf(\"%lld\\n\",min(ans,min(dis1[u]+dis2[v]+y,dis1[v]+dis2[u]+y)));\n\t}\n}\n```\n\n\n",
        "postTime": 1632837007,
        "uid": 90869,
        "name": "tylon2006",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1163F Indecisive Taxi Fee"
    }
]