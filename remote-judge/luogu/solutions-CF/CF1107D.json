[
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u4f60\u4e00\u4e2a01\u77e9\u9635\uff0c\u95ee\u4f60\u6700\u5927\u53ef\u4ee5\u538b\u7f29\u591a\u5c11\u500d\u3002\n\n## \u89e3\n\n\u9996\u5148\u8003\u8651\u4e00\u884c\u5185\u7684\u538b\u7f29\u5e45\u5ea6\u3002\n\n\u4e00\u884c\u91cc\u9762\u663e\u7136\u662f\u7531\u5f88\u591a\u4e2a`0`\u6bb5\u548c`1`\u6bb5\u6784\u6210\u7684\u3002\n\n\u6bd4\u65b9\u8bf4`0001110001110010`\u75314\u4e2a`0`\u6bb5\u548c3\u4e2a`1`\u6bb5\u6784\u6210\u3002\n\n\u5bf9\u4e8e\u4e00\u884c\u6765\u8bf4\uff0c\u6700\u5927\u7684\u538b\u7f29\u5e45\u5ea6\u662f\u6240\u6709`01`\u6bb5\u7684\u957f\u5ea6\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002\n\n\u518d\u6765\u770b\u884c\u4e0e\u884c\u4e4b\u95f4\u7684\u538b\u7f29\u5e45\u5ea6\u3002\n\n\u53ea\u8981\u8bb0\u5f55\u4e00\u4e0b\u76f8\u7b49\u7684\u884c\u7684\u6570\u91cf\uff0c\u53d6\u6700\u5927\u516c\u7ea6\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6700\u540e\u53ea\u8981\u53d6\u884c\u5185\u7684\u6700\u5927\u538b\u7f29\u5e45\u5ea6\uff0c\u548c\u884c\u95f4\u6700\u5927\u538b\u7f29\u5e45\u5ea6\u7684\u6700\u5927\u516c\u7ea6\u6570\u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n## \u4ee3\u7801\n\n\u91c7\u7528\u4e0a\u8ff0$\\gcd$\u89e3\u6cd5\uff0c\u5b9e\u73b0\u4f1a\u53d8\u5f97\u975e\u5e38\u786c\u6838\u3002\n\n\u597d\u5728\u6700\u540e\u8dd1\u5f97\u4e5f\u5feb\u3002\n\n78ms, \u81f3\u4eca\u8fd8\u662fcf\u4e0a\u6700\u5feb\u7684\u89e3\u3002\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\nusing namespace std;\n\ntypedef long long ll;\n\nint n;\nbool bad[128];\n\ninline int __gcd(int a, int b) {\n    // return __gcd(b, a % b);\n    int temp;\n    while (b) {\n        temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\nvoid test(int x, int n) {\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            printf(\"%d %d -> %d %d\\n\", i, j, (int)ceil(i * 1. / x), (int)ceil(j * 1. / x));\n        }\n    }\n}\n\nvoid init() {\n    const char s[] = \"24569ABD\";\n    for (int i = 0; i < 8; ++i) bad[s[i]] = true;\n}\n\nchar cur[1305], last[1305];\nint line, column;\n\nint leading[16] = {4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0};\nint trailing[16] = {4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0};\n\nint count_leading(unsigned int x, bool reverse) {\n    if (x >= 'A') x -= 'A', x += 10;\n    else x -= '0';\n    if (reverse) x = 15 - x;\n    return leading[x];\n}\n\nint count_trailing(unsigned int x) {\n    if (x >= 'A') x -= 'A', x += 10;\n    else x -= '0';\n    if (x & 1) x = 15 - x;\n    return trailing[x];\n}\n\nbool is_odd(char x) {\n    if (x >= 'A') return (x - 'A') & 1;\n    else return (x - '0') & 1;\n}\n\nint process_line() {\n    int n_4 = n >> 2;\n    int gcd;\n    int last_cnt;\n    bool last_bit;\n    switch(cur[0]) {\n        case '0': gcd = 4; break;\n        case '1': gcd = 3; break;\n        case '2': gcd = 1; break;\n        case '3': gcd = 2; break;\n        case '4': gcd = 1; break;\n        case '5': gcd = 1; break;\n        case '6': gcd = 1; break;\n        case '7': gcd = 1; break;\n        case '8': gcd = 1; break;\n        case '9': gcd = 1; break;\n        case 'A': gcd = 1; break;\n        case 'B': gcd = 1; break;\n        case 'C': gcd = 2; break;\n        case 'D': gcd = 1; break;\n        case 'E': gcd = 3; break;\n        case 'F': gcd = 4; break;\n    }\n    if (gcd == 1) return 1;\n    switch(cur[0]) {\n        case '0': last_cnt = 4, last_bit = 0; break;\n        case '1': last_cnt = 1, last_bit = 1; break;\n        case '3': last_cnt = 2, last_bit = 1; break;\n        case 'C': last_cnt = 2, last_bit = 0; break;\n        case 'E': last_cnt = 1, last_bit = 0; break;\n        case 'F': last_cnt = 4, last_bit = 1; break;\n    }\n    int i = 1;\n    if (cur[0] == '0' || cur[0] == 'F') {\n        for (; i < n_4; ++i) {\n            if (cur[i] == cur[i - 1]) {\n                gcd += 4;\n            } else {\n                gcd += count_leading(cur[i], last_bit), last_cnt = count_trailing(cur[i]), last_bit = is_odd(cur[i]);\n                ++i;\n                break;\n            }\n        }\n    }\n    if (i == n_4) {\n        if (cur[0] == '0' || cur[0] == 'F') {\n            return gcd;\n        } else if (cur[0] == '3' || cur[0] == 'C') {\n            return 2;\n        } else {\n            return 1;\n        }\n    }\n    for (; i < n_4 && gcd != 1; ++i) {\n        if (cur[i] == '0') {\n            if (last_bit) {\n                gcd = __gcd(gcd, last_cnt);\n                last_bit = 0;\n                last_cnt = 4;\n            } else {\n                last_cnt += 4;\n            }\n        } else if (cur[i] == 'F') {\n            if (!last_bit) {\n                gcd = __gcd(gcd, last_cnt);\n                last_bit = 1;\n                last_cnt = 4;\n            } else {\n                last_cnt += 4;\n            }\n        } else {\n            last_cnt += count_leading(cur[i], last_bit);\n            gcd = __gcd(last_cnt, gcd);\n            last_bit = is_odd(cur[i]);\n            last_cnt = count_trailing(cur[i]);\n        }\n        if (bad[cur[i]]) gcd = 1;\n    }\n    gcd = __gcd(last_cnt, gcd);\n    // printf(\"gcd: %d\\n\", gcd);\n    return gcd;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    int cnt = 1;\n    scanf(\"%s\", cur);\n    int line = process_line();\n    memcpy(last, cur, sizeof last);\n    bool first_col = true;\n    for (int i = 1; i < n && line != 1; ++i) {\n        scanf(\"%s\", cur);\n        if (strcmp(cur, last) == 0) {\n            ++cnt;\n        } else {\n            line = __gcd(line, process_line());\n            memcpy(last, cur, sizeof last);\n            if (first_col) column = cnt, first_col = false;\n            else column = __gcd(column, cnt);\n            cnt = 1;\n        }\n    }\n    if (first_col) column = cnt;\n    // printf(\"%d %d\\n\", line, column);\n    printf(\"%d\\n\", __gcd(line, column));\n}\n```",
        "postTime": 1549691088,
        "uid": 68936,
        "name": "__DICS",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1107D \u3010Compression\u3011"
    },
    {
        "content": "\u8fd9\u9898\u636e\u8bf4\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u505a  \n\u6211\u7684\u601d\u60f3\u662f\u7528bitset  \n\u7528bitset\u5224\u65ad\u6bcf\u4e00\u884c\u7684\u76f8\u5e94\u4f4d\u7f6e\u662f\u5426\u4e00\u6837  \n\u8ba9\u540e\u518d\u66b4\u529b\u5224\u6bcf\u4e00\u5217\u662f\u5426\u4e00\u6837  \n\u8ba9\u540e\u5c31A\u4e86\n```\n#include <algorithm>\n#include <cctype>\n#include <climits>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <bitset>\n#define LL long long\n#define P pair<int,int>\nusing namespace std;\ntemplate <typename T>\ninline void read(T &t)\n{\n    int f = 0, c = getchar();\n    t = 0;\n    while (!isdigit(c))\n        f |= c == '-', c = getchar();\n    while (isdigit(c))\n        t = t * 10 + c - 48, c = getchar();\n    if (f)\n        t = -t;\n}\ntemplate <typename T, typename... Args>\ninline void read(T &t, Args &... args)\n{\n    read(t);\n    read(args...);\n}\nconst int maxn = 5220;\nbitset<maxn> b[maxn];\nint main(){\n    int n;\n    read(n);\n    for(int i=1;i<=n;i++){\n        for (int j = 1; j < n;j+=4){\n            char ch=getchar();\n            while(isspace(ch))\n                ch = getchar();\n            if(ch=='8' || ch=='9' || ch=='A' || ch=='B' || ch=='C' || ch=='D' || ch=='E' || ch=='F')\n                b[i][j] = 1;\n            if(ch=='4' || ch=='5' || ch=='6' || ch=='7' || ch=='C' || ch=='D' || ch=='E' || ch=='F')\n                b[i][j+1] = 1;\n            if(ch=='2' || ch=='3' || ch=='6' || ch=='7' || ch=='A' || ch=='B' || ch=='E' || ch=='F')\n                b[i][j+2] = 1;\n            if(ch=='1' || ch=='3' || ch=='5' || ch=='7' || ch=='9' || ch=='B' || ch=='D' || ch=='F')\n                b[i][j+3] = 1;\n        }\n    }\n    for (int ans = n; ans >= 2;ans--){\n        if (n % ans != 0)\n            continue;\n        bool ok=true;\n        for (int i = 1; i < n;i+=ans){\n            for (int j = i+1; j < i + ans;j++){\n                ok &= (b[j] == b[i]);\n            }\n            if(!ok)\n                break;\n            for (int j = 1; j < n;j+=ans){\n                for (int k = j+1; k < j + ans;k++)\n                    ok &= (b[i][k] == b[i][k - 1]);\n                if(!ok)\n                    break;\n            }\n        }\n        if(ok){\n            cout << ans << endl;\n            return 0;\n        }\n    }\n    puts(\"1\");\n}\n```",
        "postTime": 1548526311,
        "uid": 31228,
        "name": "ciwomuli",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1107D \u3010Compression\u3011"
    }
]