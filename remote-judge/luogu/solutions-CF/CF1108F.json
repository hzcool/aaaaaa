[
    {
        "content": "# \u539f\u9898\u94fe\u63a5\n\n[\u6d1b\u8c37\u7684](https://www.luogu.com.cn/problem/CF1108F)\n\n[CF\u7684](http://codeforces.com/problemset/problem/1108/F)\n\n[VJ\u7684](https://vjudge.net/problem/CodeForces-1108F)\n\n# \u9898\u76ee\u63cf\u8ff0\n\nQwQ\u53c8\u662f\u88ab\u6d1b\u8c37\u7ffb\u8bd1\u6309\u5728\u5730\u4e0a\u6469\u64e6\u7684\u4e00\u5929\u3002\u3002\u3002\u76f4\u63a5\u5f15\u7528\n\n>\u7ed9\u5b9a\u4e00\u4e2a\u6709n\u4e2a\u70b9\uff0cm\u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u8fb9\u6743\u3002 \u5b9a\u4e49\u4e00\u6b21\u64cd\u4f5c\u4e3a\uff1a\u9009\u62e9\u4e00\u6761\u56fe\u4e2d\u7684\u8fb9\uff0c\u5e76\u5c06\u5176\u6743\u503c+1\u3002\u8bd5\u6c42\u6700\u5c0f\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u4f7f\u5f97\u64cd\u4f5c\u540e\u7684\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u662f\u552f\u4e00\u7684\u3002\n\n# \u89e3\u9898\u601d\u8def\n## \u6cd5\u4e00\n\u8fd9\u79cd\u548c\u6700\u5c0f\u751f\u6210\u6811\u6709\u5173\u7684\u9898\uff0c\u65e0\u975e\u5c31\u662f\u4e0a\u6765\u5148\u6c42\u4e00\u4e0b\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u518d\u4ed4\u7ec6\u94bb\u7814\u6700\u5c0f\u751f\u6210\u6811\u7684\u6027\u8d28\u600e\u4e48\u5957\u4e0a\u6765\u3002\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8003\u8651\u52a0\u4e0a\u4e00\u6761\u975e\u6811\u8fb9\u4e4b\u540e\u4f1a\u5982\u4f55\u3002\u52a0\u4e0a\u4e00\u6761\u8fb9\u540e\u4f1a\u7ec4\u6210\u4e00\u4e2a\u73af\uff0c\u6839\u636e\u6700\u5c0f\u751f\u6210\u6811\u7684\u6027\u8d28\uff08\u5728\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u8bc1\u660e\u4e86\uff09\uff0c\u6211\u4eec\u8ba9\u8fd9\u6761\u8fb9\u6700\u5927\u5c31\u4e0d\u4f1a\u6709\u5176\u4ed6\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\u5982\u679c\u8fd9\u6761\u8fb9\u5df2\u7ecf\u662f\u6700\u5927\u4e86\u5c31\u76f4\u63a5\u5ffd\u7565\uff0c\u53cd\u4e4b\u5219\u4e00\u5b9a\u4f1a\u7b49\u4e8e\u73af\u4e0a\u9664\u53bb\u8fd9\u6761\u8fb9\u7684\u8fb9\u4e2d\u6700\u957f\u7684\u4e00\u6761\u7684\u6743\u503c\uff0c\u76f4\u63a5\u7ed9\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u52a0\u4e00\u5373\u53ef\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u89e3\u51b3\u627e\u8fd9\u4e2a\u73af\u4e0a\u7684\u6700\u5927\u503c\u4e86\uff0c\u7136\u800c\u8fd9\u53c8\u521a\u597d\u662f\u6811\u4e0a\u8def\u5f84\u6c42\u6700\u957f\u8fb9\uff0c\u76f4\u63a5\u500d\u589e\u5c31\u884c\u4e86\u3002\u6700\u540e\uff0c\u7528\u8fd9\u4e2a\u8def\u5f84\u4e2d\u7684\u6700\u957f\u8fb9\u548c\u65b0\u52a0\u7684\u8fd9\u6761\u8fb9\u6bd4\u8f83\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\u3002\n\n\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6$\\Theta(m\\log m+n\\log n+m\\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NN=2e5+4;\nstruct node\n{\n\tint u,v,w;\n\tbool use;\n\tbool operator<(const node&it)const\n\t{\n\t\treturn w<it.w;\n\t}\n}edge[NN];\nint fa[NN],d[NN],up[24][NN],maxw[24][NN];\nvector<pair<int,int> >g[NN];\nint find(int x)\n{\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\nvoid dfs(int u,int f,int w)\n{\n\td[u]=d[f]+1;\n\tup[0][u]=f;\n\tmaxw[0][u]=w;\n\tfor(int i=1;i<=20;i++)\n\t{\n\t\tup[i][u]=up[i-1][up[i-1][u]];\n\t\tmaxw[i][u]=max(maxw[i-1][u],maxw[i-1][up[i-1][u]]);\n\t}\n\tfor(int i=0;i<g[u].size();i++)\n\t{\n\t\tint v=g[u][i].first;\n\t\tif(v==f)\n\t\t\tcontinue;\n\t\tdfs(v,u,g[u][i].second);\n\t}\n}\nint maxedge(int x,int y)\n{\n\tif(d[x]<d[y])\n\t\tswap(x,y);\n\tint res=0;\n\tfor(int i=20;~i;i--)\n\t\tif(d[up[i][x]]>=d[y])\n\t\t{\n\t\t\tres=max(res,maxw[i][x]);\n\t\t\tx=up[i][x];\n\t\t}\n\tif(x==y)\n\t\treturn res;\n\tfor(int i=20;~i;i--)\n\t\tif(up[i][x]!=up[i][y])\n\t\t{\n\t\t\tres=max(res,max(maxw[i][x],maxw[i][y]));\n\t\t\tx=up[i][x];\n\t\t\ty=up[i][y];\n\t\t}\n\treturn max(res,max(maxw[0][x],maxw[0][y]));\n}\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tfa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&edge[i].u,&edge[i].v,&edge[i].w);\n\tsort(edge+1,edge+1+m);\n\tint cnt=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint fu=find(edge[i].u),fv=find(edge[i].v);\n\t\tif(fu!=fv)\n\t\t{\n\t\t\tcnt++;\n\t\t\tfa[fv]=fu;\n\t\t\tedge[i].use=true;\n\t\t\tg[edge[i].u].push_back(make_pair(edge[i].v,edge[i].w));\n\t\t\tg[edge[i].v].push_back(make_pair(edge[i].u,edge[i].w));\n\t\t\tif(cnt==n-1)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tdfs(1,0,0);\n\tint ans=0;\n\tfor(int i=1;i<=m;i++)\n\t\tif(!edge[i].use&&edge[i].w==maxedge(edge[i].u,edge[i].v))\n\t\t\tans++;\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n## \u6cd5\u4e8c\n\n\u521a\u521a\u6cd5\u4e00\u7ed9\u51fa\u4e86\u4e00\u4e2a\u601d\u8def\uff1a\u627e\u4e00\u6761\u80fd\u5728\u6811\u4e0a\u7ec4\u6210\u73af\u4e14\u8fd9\u4e2a\u73af\u7684\u6700\u5927\u503c\u4e0d\u6b62\u4e00\u4e2a\u7684\u8fb9\uff0c\u6211\u4eec\u73b0\u5728\u76f4\u63a5\u5728\u8fd9\u4e2a\u601d\u8def\u4e0a\u505a\u5de5\u4f5c\u3002\u4e4b\u524d\u6211\u4eec\u53d1\u73b0\uff0c\u4e24\u4e2a\u8fb9\u53ea\u6709\u5728\u6743\u76f8\u7b49\u7684\u60c5\u51b5\u4e0b\u624d\u6709\u53ef\u80fd\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u8fb9\u6743\u76f8\u7b49\u7684\u8fb9\u653e\u5728\u4e00\u8d77\u5904\u7406\u3002\u53ef\u4ee5\u5148\u5047\u8bbe\u6240\u6709\u7684\u8fb9\u52a0\u4e0a\u4e4b\u540e\u90fd\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u7136\u540e\u9664\u53bb\u6ca1\u6709\u8d21\u732e\u7684\u8fb9\u3002\u5728\u5408\u5e76\u65f6\uff0c\u5982\u679c\u4e4b\u524d\uff08\u8fd8\u6ca1\u6709\u52a0\u5165\u67d0\u4e2a\u6743\u7684\u8fb9\u4e4b\u524d\uff09\u4e24\u4e2a\u8fde\u901a\u5757\u5c31\u5df2\u7ecf\u5408\u5e76\u4e86\uff0c\u5c31\u4e00\u5b9a\u4e0d\u4f1a\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u56e0\u4e3a\u52a0\u4e0a\u8fd9\u6761\u8fb9\u4e4b\u540e\u7ec4\u6210\u7684\u73af\u5176\u4ed6\u8fb9\u90fd\u66f4\u5c0f\u3002\u7136\u540e\u8003\u8651\u76f8\u540c\u8fb9\u6743\u4e4b\u95f4\u7684\u51b2\u7a81\uff0c\u5982\u679c\u4e24\u4e2a\u8fde\u901a\u5757\u9700\u8981\u5408\u5e76\u5219\u52a0\u5165\u8fd9\u6761\u8fb9\u4e4b\u524d\u6ca1\u6709\u76f8\u540c\u7684\u8fb9\u6743\u52a0\u5165\uff0c\u4e00\u5b9a\u6ca1\u6709\u8d21\u732e\uff0c\u4f46\u662f\u5408\u5e76\u4e4b\u540e\u6240\u6709\u8fde\u901a\u8fd9\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u76f8\u540c\u8fb9\u6743\u7684\u8fb9\u90fd\u4f1a\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u8fb9\u505a$Kruskal$\u8fb9\u7b97\u7b54\u6848\u3002\n\n\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6$\\Theta(m\\log m)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NN=2e5+4;\nstruct node\n{\n\tint u,v,w;\n\tbool use;\n\tbool operator<(const node&it)const\n\t{\n\t\treturn w<it.w;\n\t}\n}edge[NN];\nint fa[NN],maxx[NN];\nint find(int x)\n{\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tfa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&edge[i].u,&edge[i].v,&edge[i].w);\n\tsort(edge+1,edge+1+m);\n\tint ans=0,i=1;\n\twhile(i<=m)\n\t{\n\t\tint j=i;\n\t\twhile(edge[i].w==edge[j].w)\n\t\t\tj++;\n\t\tfor(int k=i;k<j;k++)\n\t\t\tif(find(edge[k].u)!=find(edge[k].v))\n\t\t\t\tans++;\n\t\tfor(int k=i;k<j;k++)\n\t\t{\n\t\t\tint fu=find(edge[k].u),fv=find(edge[k].v);\n\t\t\tif(fu!=fv)\n\t\t\t{\n\t\t\t\tans--;\n\t\t\t\tfa[fv]=fu;\n\t\t\t}\n\t\t}\n\t\ti=j;\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1616066686,
        "uid": 132424,
        "name": "\u826f\u5fc3WA\u9898\u4eba",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1108F \u3010MST Unification\u3011"
    },
    {
        "content": "\u8003\u8651\u4ec0\u4e48\u60c5\u51b5\u4f1a\u51fa\u73b0\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u552f\u4e00\u7684\u60c5\u51b5\uff0c\u663e\u7136\u81f3\u5c11\u6709\u5bf9\u4e8e\u4e00\u4e2a\u6811\u8fb9\uff0c\u5b58\u5728\u81f3\u5c11\u4e00\u6761\u975e\u6811\u8fb9\u4e0e\u5176\u6743\u503c\u76f8\u540c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u5728 $\\text{Kruskal}$ \u7684\u8fc7\u7a0b\u4e2d\u5bfb\u627e\u8fb9\u6743\u76f8\u540c\u7684**\u5408\u6cd5\u8fb9\uff08\u4e0d\u6210\u73af\uff09**\uff0c\u540c\u65f6\u5c06\u5269\u4e0b\u7684\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u8fb9\u6743\u52a0\u4e00\uff0c\u5e76\u7d2f\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u7d2f\u8ba1\u7b54\u6848\u7684\u8fb9\u4e00\u5b9a\u662f\u4e0e\u5f53\u524d\u8fb9\u96c6\u4e0d\u6210\u73af\u7684\u3002\n\n\u539f\u56e0\u662f\uff0c\u6210\u73af\u65f6\u4e00\u5b9a\u5b58\u5728**\u4e00\u6761\u8fb9\u88ab\u9009\u4e2d\u5728\u8fb9\u96c6\u4e2d**\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06**\u5176\u4ed6\u8fb9**\u7684\u8fb9\u6743\u6539\u53d8\u5c31\u53ef\u4ee5\u8fbe\u5230\u76ee\u7684\u3002\n\n\u6216\u8005\u6211\u4eec\u53cd\u8fc7\u6765\u60f3\uff0c\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u4e0d\u6210\u73af\u65f6\u624d\u8fdb\u884c\u4e0a\u8ff0\u64cd\u4f5c\u3002\u5047\u8bbe\u6211\u4eec\u5f53\u524d\u9009\u62e9\u7684\u8fb9\u662f $x$\uff0c\u6211\u4eec\u5c06\u5176\u52a0\u5165\u8fb9\u96c6\uff0c\u4e0b\u4e00\u6b21\u518d\u9009\u62e9\u7684\u8fb9\u662f $y$\uff0c\u4e14 $ y$ \u4e0e $ x$ \u8fb9\u6743\u76f8\u7b49\uff0c\u5219\u7531\u4e8e**\u4e24\u6761\u8fb9\u4e0d\u4f1a\u6784\u6210\u73af**\uff0c**\u6545 $ y$ \u8981\u88ab\u6dfb\u52a0\u5230\u540c\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u4e2d**\uff0c\u6240\u4ee5\u4e0d\u6784\u6210\u591a\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u5177\u4f53\u5730\uff0c\u6211\u4eec\u5148\u628a\u6240\u6709\u7684\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u8fdb\u884c\u7edf\u8ba1\uff0c\u7edf\u8ba1\u7ed3\u675f\u540e\u518d\u5224\u65ad\u662f\u5426\u6210\u73af\uff0c\u82e5\u6210\u73af\uff0c\u5219\u4ece\u5408\u6cd5\u8fb9\u4e2d\u51cf\u53bb\u4e0d\u5408\u6cd5\u7684\u6570\u91cf\uff08\u5373\u7b54\u6848\u51cf\u4e00\uff09\uff0c\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define awa 2147483647\n#define zhale exit(0)\n#define re register\n#define rint re int\nusing namespace std;\n/*Shioiri Kukuri*/\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double qwq;\ntypedef pair<int,int> P;\ntypedef pair<ll,ll> llP;\n#define rll re ll\n#define rqwq re qwq\n\n/*Otho Ai*/\n\ntemplate<class T>\nvoid Swap(T &x,T &y)\n{\n    T z=x;\n    x=y;\n    y=z;\n}\n\n//#define PairOP\n#ifdef PairOP\ntemplate<class T1,class T2>\ninline const pair<T1,T2> operator + (const pair<T1,T2> &p1,const pair<T1,T2> &p2){\n    return pair<T1,T2>(p1.first+p2.first,p1.second+p2.second);\n}\n\ntemplate<class T1,class T2>\ninline const pair<T1,T2> operator - (const pair<T1,T2> &p1,const pair<T1,T2> &p2){\n    return pair<T1,T2>(p1.first-p2.first,p1.second-p2.second);\n}\n#endif\n\n//#define FastIO\n#ifdef FastIO\n    char buf[1<<21],*p1,*p2;\n    #define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\n\ntemplate<class T>\nT Read()\n{\n    T x=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-')\n        f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        x=(x<<1)+(x<<3)+(ch^'0');\n        ch=getchar();\n    }\n    return x*f;\n}\n//int (*read)()=Read<int>;\nll (*readll)()=Read<ll>;\n#define read Read<int>\n\nconst int N=2e5+5;\n\nint n,m;\nclass Edge{\n    public:\n        int x,y,z;\n        Edge(){}\n        inline friend bool operator < (const Edge &a,const Edge &b){\n            return a.z<b.z;\n        }\n        inline void In(){\n            x=read(),y=read(),z=read();\n        }\n}e[N];\n\nnamespace Dsu{\n    int fa[N];\n    inline int Find(rint x){\n        return fa[x]==0?fa[x]=x:fa[x]==x?x:fa[x]=Find(fa[x]);\n    }\n    inline void Merge(rint x,rint y){\n        fa[Find(x)]=Find(y);\n    }\n}\nusing Dsu::Find;\nusing Dsu::Merge;\n\ninline int True()\n{\n//#define Freopen\n#ifdef Freopen\n    freopen(\".in\",\"r\",stdin);\n    freopen(\".out\",\"w\",stdout);\n#endif\n\n//#define Clock\n#ifdef Clock\n    rint STR=clock();\n#endif\n\n    n=read(),m=read();\n    for(rint i=1;i<=m;++i)\n    e[i].In();\n    sort(e+1,e+1+m);\n    rint i=1,ans=0;\n    while(i<=m)\n    {\n        rint ok=0,j=i;\n        while(e[i].z==e[j].z) ++j;\n        for(rint k=i;k<j;++k)\n        {\n            rint x=Find(e[k].x),y=Find(e[k].y);\n            if(x^y) ++ok;\n        }\n        for(rint k=i;k<j;++k)\n        {\n            rint x=Find(e[k].x),y=Find(e[k].y);\n            if(x^y) Merge(x,y),--ok;\n        }\n        i=j,ans+=ok;\n    }\n    printf(\"%d\\n\",ans);\n\n#ifdef Clock\n    rint END=clock();\n    printf(\"Time:%dms\\n\",int((END-STR)/(qwq)CLOCKS_PER_SEC*1000));\n    printf(\"Time:%ds\\n\",int((END-STR)/(qwq)CLOCKS_PER_SEC));\n#endif\n    return (0-0);//q(0-0)p q(>-<)p\n}\n\nint Love=True();\n\nsigned main(){;}\n```",
        "postTime": 1629631547,
        "uid": 105833,
        "name": "\u6a31\u6d1bCHANGE",
        "ccfLevel": 0,
        "title": "CF1108F\u9898\u89e3"
    },
    {
        "content": "\u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u6ca1\u88ab\u9009\u4e2d\u7684\u8fb9$(u,v)$\uff0c\u6211\u4eec\u8bbe\u6700\u5c0f\u751f\u6210\u6811\u4e2d$u$\u5230$v$\u7684\u8def\u5f84\u4e3a$S$,\u7531\u4e8e\u8981\u4fdd\u8bc1\u6700\u5c0f\u751f\u6210\u6811\u552f\u4e00\u786e\u5b9a\uff0c\u6211\u4eec\u8981\u4f7f$(u,v)$\u4e0d\u80fd\u66ff\u6362$S$\u8def\u5f84\u4e2d\u7684\u4efb\u4f55\u4e00\u6761\u8fb9\u3002\u56e0\u6b64\uff0c\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u4e2d$(u,v)$\u8def\u5f84\u4e2d\u8fb9\u6743\u6700\u5927\u7684\u8fb9$e$\u3002\u53ea\u8981\u8ba9\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743$>v_e$\u5373\u53ef\u3002\u53ef\u884c\u6027\u4e0e\u6700\u4f18\u6027\u4e0d\u96be\u8bc1\u660e\uff0c\u8bf7\u81ea\u884c\u601d\u8003\u3002\n\n\u81f3\u4e8e\u600e\u4e48\u6c42\uff0c\u6211\u4eec\u7528\u500d\u589eLCA\u5b9e\u73b0\u3002\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nlgn)$\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define MAXN 200005\n#define LL long long\n\nstruct edge{\n\tint x, y, v; bool c;\n\tinline void input(){ scanf( \"%d%d%d\", &x, &y, &v ); c = 0; }\n\tbool operator < ( const edge &t )const{ return v < t.v; }\n}a[MAXN];\n\nint N, M;\nint fa[MAXN];\nint hd[MAXN], nxt[MAXN << 1], to[MAXN << 1], val[MAXN << 1], tot;\nint ft[MAXN][20], mx[MAXN][20], dep[MAXN];\n\nvoid Add( int x, int y, int z ){\n\tnxt[++tot] = hd[x]; hd[x] = tot; to[tot] = y; val[tot] = z;\n\tnxt[++tot] = hd[y]; hd[y] = tot; to[tot] = x; val[tot] = z;\n}\n\nint find( int x ){ return fa[x] == x ? x : ( fa[x] = find(fa[x]) ); }\n//LCA\u548c\u5e76\u67e5\u96c6\u90fd\u4e0d\u4f1a\u7684\u53bb\u95ee\u5ea6\u5a18\nvoid DFS( int x ){\n\tdep[x] = dep[ft[x][0]] + 1;\n\tfor ( int i = 1; i <= 17; ++i ) ft[x][i] = ft[ft[x][i - 1]][i - 1], mx[x][i] = max( mx[x][i - 1], mx[ft[x][i - 1]][i - 1] );\n\tfor ( int i = hd[x]; i; i = nxt[i] ) if ( to[i] != ft[x][0] ) ft[to[i]][0] = x, mx[to[i]][0] = val[i], DFS(to[i]);\n}\n\nint LCA( int x, int y ){\n\tint ans(INT_MIN);\n\tif ( dep[x] < dep[y] ) swap( x, y );\n\tfor ( int i = 17; i >= 0; --i ) if ( dep[ft[x][i]] > dep[y] ) ans = max( ans, mx[x][i] ), x = ft[x][i];\n\tif ( dep[x] > dep[y] ) ans = max( ans, mx[x][0] ), x = ft[x][0];\n\tfor ( int i = 17; i >= 0; --i ) if ( ft[x][i] != ft[y][i] ) ans = max( ans, max( mx[x][i], mx[y][i] ) ), x = ft[x][i], y = ft[y][i];\n\tif ( x != y ) ans = max( ans, max( mx[x][0], mx[y][0] ) ), x = ft[x][0], y = ft[y][0];\n\treturn ans;\n}\n\nint main(){\n\tscanf( \"%d%d\", &N, &M );\n\tfor ( int i = 1; i <= M; ++i ) a[i].input(), fa[i] = i;//\u8bfb\u5165\u5e76\u521d\u59cb\u5316\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7528\u7684\u5e76\u67e5\u96c6\n\tsort( a + 1, a + M + 1 );//\u6392\u5e8f\n\tint c(0);\n\tfor ( int i = 1; i <= M; ++i ){\n\t\tint x(find(a[i].x)), y(find(a[i].y));\n\t\tif ( x != y ){\n\t\t\tfa[x] = y; c++; a[i].c = 1; Add( a[i].x, a[i].y, a[i].v );//\u6700\u5c0f\u751f\u6210\u6811\u90e8\u5206\u3002a[i].c\u8868\u793a\u662f\u5426\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\n\t\t\tif ( c >= N - 1 ) break;//\u5df2\u6784\u6210\u751f\u6210\u6811\uff0c\u9000\u51fa\n\t\t}\n\t}\n\tft[1][0] = 1; mx[1][0] = INT_MIN; DFS(1);//\u6df1\u641c\u9884\u5904\u7406ft\u7236\u4eb2\u4e0e\u6700\u5927\u8fb9\u6743mx\n\tLL ans(0);//\u6ce8\u610f\u5f00long long\n\tfor ( int i = 1; i <= M; ++i ){\n\t\tif ( !a[i].c ){//\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u8fdb\u884c\u5904\u7406\n\t\t\tint t(LCA( a[i].x, a[i].y ));\n\t\t\tif ( a[i].v <= t ) ans += t + 1 - a[i].v;//\u53ef\u4ee5\u66ff\u6362\u67d0\u4e00\u6761\u8fb9\uff0c\u589e\u5927\u5b83\n\t\t}\n\t}\n\tprintf( \"%lld\\n\", ans );\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1548329279,
        "uid": 70786,
        "name": "_louhc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1108F \u3010MST Unification\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1108F)\n\n[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://chenyu-w.github.io./2023/01/10/CF1108F%20MST%20Unification/)\n\n## \u524d\u8a00\n\n\u4e00\u79cd MST \u88ab\u51fa\u70c2\u7684\u5957\u8def\u3002\n\n## \u5206\u6790\n\n\u8003\u8651\u5148\u7528 Kruscal \u968f\u4fbf\u5efa\u4e00\u68f5 MST \u51fa\u6765\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\u4e00\u6761\u975e\u6811\u8fb9 $(u, v, w)$ \u5728\u4ec0\u4e48\u65f6\u5019\u53ef\u80fd\u4f1a\u5728 MST \u4e2d\u3002\n\n\u663e\u7136\u5730\uff0c\u82e5\u8fde $(u, v, w)$\uff0c\u90a3\u4e48\u539f\u6765\u7684 MST \u4e0a\u4f1a\u591a\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u8981\u5728\u73af\u4e0a\u6362\u4e00\u6761\u8fb9\uff0c\u7531\u4e8e\u6211\u4eec\u5efa\u51fa\u6765\u7684\u5df2\u7ecf\u662f MST\uff0c\u6240\u4ee5\u88ab\u6362\u7684\u53ea\u53ef\u80fd\u662f $w$ \u6700\u5927\u7684\u90a3\u6761\uff0c\u6240\u4ee5\u5982\u679c\u5f53\u524d\u8fb9\u7684 $w$ \u548c MST \u4e0a $u \\rightarrow v$ \u7684\u6700\u5927\u8fb9\u6743\u76f8\u7b49\u7b54\u6848\u5c31\u52a0\u4e00\uff0c\u7528\u6811\u5256\u7ef4\u62a4\u8def\u5f84\u8fb9\u6743\u6700\u5927\u503c\u5373\u53ef\u3002\n\n```c++\n#include <bits/stdc++.h>\n \nusing namespace std;\nconst int N = 2e5 + 10;\nint h[N], e[N << 1], ne[N << 1], w[N << 1], idx;\nint a[N], b[N], fa[N], dep[N], sz[N], son[N], top[N], dfn[N], tt;\nstruct node {\n\tint x, y, z;\n\tbool operator<(const node &e) const {\n\t\treturn z < e.z;\n\t}\n} edges[N];\nstruct tree {\n\tint l, r, max;\n} t[N << 2];\nint n, m;\nint vis[N], p[N];\n \ninline int read() {\n\tint x = 0, y = 1; char c = getchar();\n\twhile (c < '0' || c > '9') {if (c == '-') y = -1; c = getchar();}\n\twhile (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * y;\n}\n \ninline void add(int a, int b, int c) {\n\te[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;\n}\n \ninline int find(int x) {\n\treturn p[x] == x ? x : p[x] = find(p[x]);\n}\n \ninline void dfs1(int u, int p) {\n\tfa[u] = p, dep[u] = dep[p] + 1, sz[u] = 1;\n\tfor (int i = h[u]; ~i; i = ne[i]) {\n\t\tint v = e[i];\n\t\tif (v == p) continue;\n\t\ta[v] = w[i], dfs1(v, u);\n\t\tsz[u] += sz[v];\n\t\tif (sz[v] > sz[son[u]]) son[u] = v;\n\t}\n}\n \ninline void dfs2(int u, int t) {\n\ttop[u] = t, dfn[u] = ++tt, b[tt] = a[u];\n\tif (!son[u]) return;\n\tdfs2(son[u], t);\n\tfor (int i = h[u]; ~i; i = ne[i]) {\n\t\tint v = e[i];\n\t\tif (v == fa[u] || v == son[u]) continue;\n\t\tdfs2(v, v);\n\t}\n}\n \ninline void build(int p, int l, int r) {\n\tt[p].l = l, t[p].r = r;\n\tif (l == r) {\n\t\tt[p].max = b[l];\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(p << 1, l, mid);\n\tbuild(p << 1 | 1, mid + 1, r);\n\tt[p].max = max(t[p << 1].max, t[p << 1 | 1].max); \n}\n \ninline int query(int p, int l, int r) {\n\tif (l <= t[p].l && t[p].r <= r) return t[p].max;\n\tint mid = (t[p].l + t[p].r) >> 1, res = 0;\n\tif (l <= mid) res = max(res, query(p << 1, l, r));\n\tif (r > mid) res = max(res, query(p << 1 | 1, l, r));\n\treturn res;\n}\n \ninline int query_path(int u, int v) {\n\tint res = 0;\n\twhile (top[u] != top[v]) {\n\t\tif (dep[top[u]] < dep[top[v]]) swap(u, v);\n\t\tres = max(res, query(1, dfn[top[u]], dfn[u]));\n\t\tu = fa[top[u]];\n\t}\n\tif (dep[u] > dep[v]) swap(u, v);\n\treturn res = max(res, query(1, dfn[u] + 1, dfn[v]));\n}\n \nint main() {\n\tmemset(h, -1, sizeof h);\n\tn = read(), m = read();\n\tfor (int i = 1; i <= m; i++) {\n\t\tint x = read(), y = read(), z = read();\n\t\tedges[i] = {x, y, z};\n\t}\n\tsort(edges + 1, edges + m + 1);\n\tfor (int i = 1; i <= n; i++) p[i] = i;\n\tint k = 0;\n\tfor (int i = 1; i <= m; i++) {\n\t\tint px = find(edges[i].x), py = find(edges[i].y);\n\t\tif (px == py) continue;\n\t\tp[px] = py, vis[i] = true;\n\t\tadd(edges[i].x, edges[i].y, edges[i].z), add(edges[i].y, edges[i].x, edges[i].z);\n\t\tif (++k == n - 1) break;\n\t}\n\tdfs1(1, 0);\n\tdfs2(1, 1);\n\tbuild(1, 1, n);\n\tint res = 0;\n\tfor (int i = 1; i <= m; i++) {\n\t\tif (vis[i]) continue;\n\t\tres += edges[i].z == query_path(edges[i].x, edges[i].y);\n\t}\n\tprintf(\"%d\\n\", res);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1673328340,
        "uid": 587248,
        "name": "wcywcywcywcy",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF1108F"
    },
    {
        "content": "\u5bf9xht37\u7684[\u9898\u89e3](https://xht37.blog.luogu.org/cf1108f-mst-unification)\u7684\u8865\u5145\u3002\n\n\u9996\u5148\u5206\u4eab\u4e00\u7bc7\u5199\u7684\u4e0d\u9519\u7684[\u9898\u89e3](https://blog.csdn.net/Floraqiu/article/details/86630053)\n\n\n\u5728MST\u6784\u9020\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u7cfb\u5217\u5f85\u9009\u7684\u8fb9\uff0c**\u5982\u679c\u4ed6\u4eec\u7684\u6743\u503c\u90fd\u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u6784\u9020\u7684MST\u662f\u4e0d\u552f\u4e00\u7684**\u3002\n\n\u6240\u4ee5\u8981\u4f7f\u5176**\u552f\u4e00**\uff0c\u5728\u5904\u7406\u65f6\u5c31\u8981\u5bf9\u76f8\u540c\u6743\u503c\u7684\u4e00\u7ec4\u8fb9\u505a\u51fa\u5982\u4e0b**\u51b3\u7b56**\uff1a**\u9009\u5b9a\u4e00\u6761\u8fb9\u4e14\u4e0d\u4f1a\u6210\u73af\uff0c\u5176\u4ed6\u6240\u6709\u76f8\u540c\u6743\u503c\u7684\u8fb9+1**\n\n\u4e8e\u662f\u5c31\u6709\u4e86\u5982\u4e0b\u601d\u8def\u3002\n\n\u5728\u6734\u7d20\u7684Kruskal\u6784\u9020\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8981\u5e72\u4ee5\u4e0b\u7684\u4e8b\uff1a\n\n1.\u5bfb\u627e\u6743\u503c\u76f8\u540c\u7684\u8fb9\uff0c\u7d2f\u8ba1\u6570\u91cf\u3002\n\n2.\u5224\u65ad\u51c6\u5907\u52a0\u5165\u7684\u8fb9\u662f\u5426\u6210\u73af\u3002\u5982\u679c\u662f\uff0c\u7b54\u6848-1\n\n3.\u5bf9\u76f8\u540c\u6743\u503c\u7684\u8fb9\u96c6\u8fdb\u884c\u4e00\u6b21\u51b3\u7b56\u3002\n\n\u6211\u7684\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 200005\n#define rep0(i,l,k) for(int i=(l);i<=(k);i++)\n#define rep1(i,l,k) for(int i=(l);i<(k);i++)\n#define hack! I AK IOI\ntemplate <typename A, typename B> inline bool Min(A &a,B b){if(a>b) {a=b; return true;} return false;}\ntemplate <typename A, typename B> inline bool Max(A &a,B b){if(a<b) {a=b; return true;} return false;}\nstruct Node{int u,v,w;}E[N];\nbool comp(Node a,Node b){return a.w<b.w;}\nint n,m,fa[N];\nint fd(int x){return x==fa[x]?x:fa[x]=fd(fa[x]);}\nvoid mg(int x,int y){x=fd(x),y=fd(y);if(x!=y) fa[x]=y;}\nvoid init(){rep0(i,1,n) fa[i]=i;}\nint ip(){\n    int x=0,w=0;char ch=0;\n    while(!isdigit(ch)) w|=ch=='-',ch=getchar();\n    while(isdigit(ch)) x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return w?-x:x;\n}\nint main(){\n    while(scanf(\"%d%d\",&n,&m)!=EOF){\n        rep1(i,0,m) E[i].u=ip(),E[i].v=ip(),E[i].w=ip();init();\n        sort(E,E+m,comp);int ans=0;\n        for(int i=0;i<m;){\n            int sum=0,j=i;\n            while(E[i].w==E[j].w) j++;\n            rep1(k,i,j) {int x=fd(E[k].u),y=fd(E[k].v);if(x!=y) sum++;}\n            rep1(k,i,j) {int x=fd(E[k].u),y=fd(E[k].v);if(x!=y) mg(x,y),sum--;}\n            i=j;ans+=sum;\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1558788413,
        "uid": 83906,
        "name": "_stellar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1108F \u3010MST Unification\u3011"
    },
    {
        "content": "\u9898\u76ee\u8981\u6c42\u6700\u5c0f\u751f\u6210\u6811\n\n\u9996\u5148\u7528kruskal\u7b97\u6cd5\u6216\u5e26\u5806prim\u7b97\u6cd5\u6c42\u51fa\u8fd9\u4e2a\u56fe\u7684\u4efb\u610f\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\n\n\u679a\u4e3e\u4e0d\u5728\u8fd9\u9897\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9(u,v,w)\n\n\u82e5\u52a0\u5165\u8fd9\u6761\u8fb9 \uff0c\u5219\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\uff0c\n\n\u82e5\u73af\u4e0a\u7684\u8fb9\u6743\u9664\u8fd9\u6761\u8fb9\u5916\u7684\u6700\u5927\u503c=w\uff0c\n\n\u90a3\u4e48\u8bf4\u660e\u53ef\u4ee5\u7528\u8fd9\u6761\u8fb9\u66ff\u6362\u73af\u4e0a\u6743\u503c=w\u7684\u8fb9\uff0c\n\n\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u52a0\u4e00\uff0c\u5426\u5219\u7740\u4e24\u6761\u8fb9\u53ef\u4ee5\u4e92\u76f8\u66ff\u6362\n\n\u5982\u4f55\u6c42\u89e3\u5462\uff1f\u500d\u589e\u5373\u53ef\uff0clca\u540c\u65f6\u8bb0\u5f55u\u5230fa[u][i]\u7684\u8fb9\u6743\u6700\u5927\u503c\u4e3amx[u][i]\n\n\u65f6\u95f4\u590d\u6742\u5ea6 : O((N + M)logN)\n\n\u653e\u4e00\u4e0b\u6211\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 200005, M = N << 1;\nstruct edge {\n\tint u, v, w;\n} e[M];\nint fa[N][21], mx[N][21], depth[N], f[N], fir[N], nxt[M], to[M], len[M], ecnt;\nlong long ans = 0;\nbool intr[N];\nbool cmp(edge a, edge b) {return a.w < b.w;}\nvoid ae(int u, int v, int w) {\n\tto[++ecnt] = v; len[ecnt] = w; nxt[ecnt] = fir[u]; fir[u] = ecnt;\n\tto[++ecnt] = u; len[ecnt] = w; nxt[ecnt] = fir[v]; fir[v] = ecnt;\n}\nint find(int u) {return f[u] = f[u] == u ? u : find(f[u]);}\nvoid dfs(int u, int dep, int f) {\n\tint i, v;\n\tdepth[u] = dep; fa[u][0] = f;\n\tfor (i = 1; i <= 20; ++i) {\n\t\tfa[u][i] = fa[fa[u][i - 1]][i - 1];\n\t\tmx[u][i] = max(mx[u][i - 1], mx[fa[u][i - 1]][i - 1]);\n\t}\n\tfor (i = fir[u]; i; i = nxt[i])\n\t\tif ((v = to[i]) != f) {\n\t\t\tmx[v][0] = len[i];\n\t\t\tdfs(v, dep + 1, u);\n\t\t}\n}\nint calc(int u, int v) {\n\tint i, res = 0;\n\tif (depth[u] < depth[v]) swap(u, v);\n\tfor (i = 20; ~i; --i) if (depth[fa[u][i]] >= depth[v]) res = max(res, mx[u][i]), u = fa[u][i];\n\tif (u == v) return res;\n\tfor (i = 20; ~i; --i)\n\t\tif (fa[u][i] != fa[v][i]) {\n\t\t\tres = max(res, max(mx[u][i], mx[v][i]));\n\t\t\tu = fa[u][i]; v = fa[v][i]; \n\t\t}\n\treturn max(res, max(mx[u][0], mx[v][0]));\n}\nint main() {\n\tint i, n, m;\n\tscanf(\"%d%d\", &n, &m);\n\tfor (i = 1; i <= m; ++i) scanf(\"%d%d%d\", &e[i].u, &e[i].v, &e[i].w);\n\tsort(e + 1, e + m + 1, cmp);\n\tfor (i = 1; i <= n; ++i) f[i] = i;\n\tfor (i = 1; i <= m; ++i) {\n\t\tint u = find(e[i].u), v = find(e[i].v);\n\t\tif (u != v) {\n\t\t\tae(e[i].u, e[i].v, e[i].w);\n\t\t\tintr[i] = true; f[u] = v;\n\t\t}\n\t}\n\tdfs(1, 1, 0);\n\tfor (i = 1; i <= m; ++i)\n\t\tif (!intr[i]) {\n\t\t\tint u = e[i].u, v = e[i].v, w = e[i].w, l = calc(u, v);\n\t\t\tif (l >= w) ans += l + 1 - w;\n\t\t}\n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n}\n\n```",
        "postTime": 1549183412,
        "uid": 30817,
        "name": "muller",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1108F \u3010MST Unification\u3011"
    },
    {
        "content": "[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/Memory-of-winter/p/10335626.html)\n\n**\u9898\u76ee\u5927\u610f\uff1a**\u7ed9\u4e00\u5f20$n(n\\leqslant2\\times10^5)$\u4e2a\u70b9$m(m\\leqslant2\\times10^5)$\u6761\u8fb9\u7684\u65e0\u5411\u5e26\u6743\u56fe\uff0c\u5b9a\u4e49\u4e00\u6b21\u64cd\u4f5c\u4e3a\u628a\u4e00\u6761\u8fb9\u8fb9\u6743\u52a0\u4e00\uff0c\u6c42\u8981\u4f7f\u6700\u5c0f\u751f\u6210\u6811\u552f\u4e00\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u3002\n\n**\u9898\u89e3\uff1a**\u5148\u6c42\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u53ea\u6709\u5f53\u5b83\u8fde\u4e0a\u540e\u5f62\u6210\u7684\u73af\u4e0a\u6709\u548c\u5b83\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u65f6\uff0c\u6700\u5c0f\u751f\u6210\u6811\u624d\u662f\u4e0d\u552f\u4e00\u7684\uff0c\u8fd9\u662f\u5c31\u8981\u628a\u8fd9\u6761\u8fb9\u8fb9\u6743\u52a0\u4e00\uff0c\u5e76\u4e14\uff0c\u76f8\u540c\u7684\u90a3\u4e00\u6761\u8fb9\u4e00\u5b9a\u662f\u8fd9\u4e2a\u73af\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u3002\u6240\u4ee5\u53ef\u4ee5\u7528\u6811\u4e0a\u500d\u589e\u6c42\u8fd9\u6761\u8fb9\uff0c\u7136\u540e\u6bd4\u8f83\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\n\n**C++ Code\uff1a**\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#define maxn 200010\n\nint head[maxn], cnt;\nstruct Edge {\n\tint to, nxt, w;\n\tinline bool operator < (const Edge &rhs) const {\n\t\treturn w < rhs.w;\n\t}\n} e[maxn << 1], E[maxn];\ninline void addedge(int a, int b, int c) {\n\te[++cnt] = (Edge) { b, head[a], c }; head[a] = cnt;\n\te[++cnt] = (Edge) { a, head[b], c }; head[b] = cnt;\n}\n\nint n, m;\nint f[maxn];\nint find(int x) { return x == f[x] ? x : (f[x] = find(f[x])); }\nbool used[maxn];\n\n#define M 17\nint fa[maxn][M + 1], Mx[maxn][M + 1], dep[maxn];\nvoid dfs(int u) {\n\tfor (int i = 1; i <= M; ++i) {\n\t\tfa[u][i] = fa[fa[u][i - 1]][i - 1];\n\t\tMx[u][i] = std::max(Mx[u][i - 1], Mx[fa[u][i - 1]][i - 1]);\n\t}\n\tfor (int i = head[u]; i; i = e[i].nxt) {\n\t\tint v = e[i].to;\n\t\tif (v != *fa[u]) {\n\t\t\t*fa[v] = u;\n\t\t\t*Mx[v] = e[i].w;\n\t\t\tdep[v] = dep[u] + 1;\n\t\t\tdfs(v);\n\t\t}\n\t}\n}\n#define chkmin(x, i) res = std::max(res, Mx[x][i]), x = fa[x][i]\ninline int calc(int x, int y) {\n\tint res = 0;\n\tif (dep[x] < dep[y]) std::swap(x, y);\n\tfor (int i = dep[x] - dep[y]; i; i &= i - 1) chkmin(x, __builtin_ctz(i));\n\tif (x == y) return res;\n\tfor (int i = M; ~i; --i) if (fa[x][i] != fa[y][i]) chkmin(x, i), chkmin(y, i);\n\treturn std::max(res, std::max(*Mx[x], *Mx[y]));\n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 0; i < m; ++i) scanf(\"%d%d%d\", &E[i].to, &E[i].nxt, &E[i].w);\n\tstd::sort(E, E + m);\n\tfor (int i = 1; i <= n; ++i) f[i] = i;\n\t{\n\t\tint num = n - 1;\n\t\tfor (int i = 0; i < m && num; ++i) {\n\t\t\tint u = E[i].to, v = E[i].nxt, x = find(u), y = find(v);\n\t\t\tif (x != y) {\n\t\t\t\tf[x] = y;\n\t\t\t\t--num;\n\t\t\t\tused[i] = true;\n\t\t\t\taddedge(u, v, E[i].w);\n\t\t\t}\n\t\t}\n\t}\n\tdfs(1);\n\tint ans = 0;\n\tfor (int i = 0; i < m; ++i) if (!used[i]) ans += E[i].w == calc(E[i].to, E[i].nxt);\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1548762659,
        "uid": 22072,
        "name": "Memory_of_winter",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1108F \u3010MST Unification\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u6bd4\u8d5b\u7684\u65f6\u5019\u8111\u5b50\u5361\u4f4f\u4e86\u6ca1\u505a\u51fa\u6765......\u6211\u771f\u662f\u83dc\u7206\n\n\u7136\u540e\u73b0\u5728\u8ba9\u6211\u6765\u53e3\u80e1\u4e00\u4e2a\u9898\u89e3\u5427\n\n### \u7b97\u6cd5\u6d41\u7a0b\uff1a\n\n\u9996\u5148\u8dd1\u4e00\u904dkruskal\uff0c\u6c42\u51fa\u5728\u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09\u4e2d\u51fa\u73b0\u7684\u6bcf\u79cd\u8fb9\u6743\u5404\u51fa\u73b0\u4e86\u51e0\u6b21\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u8bb0cnt[i]\u4e3aMST\u4e0a\u8fb9\u6743\u4e3ai\u7684\u8fb9\u7684\u6570\u91cf\u3002\n\n\u5bb9\u6613\u8bc1\u660e\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u5176\u4efb\u610f\u4e0d\u540c\u7684\u751f\u6210\u6811\u4e2dc[i]\u7684\u503c\u90fd\u662f\u4e0d\u53d8\u7684\u3002\n\n\u7136\u540e\u518d\u8dd1\u4e00\u904dkruskal\uff0c\u4f46\u8fd9\u6b21\u9700\u8981\u6ce8\u610f\u5e76\u67e5\u96c6\u7ef4\u62a4\u7684\u987a\u5e8f\u3002\u6211\u4eec\u5e76\u4e0d\u662f\u6bcf\u904d\u5386\u4e00\u6761\u8fb9\u5c31\u5728\u5e76\u67e5\u96c6\u4e2d\u5c06\u4e24\u4e2a\u9876\u70b9\u8fde\u8d77\u6765\uff0c\u800c\u662f\u627e\u51fa\u6240\u6709\u8fb9\u6743\u76f8\u540c\uff08\u6bd4\u5982\u8bbe\u4e3ak\u5427\uff09\u7684\u8fb9\uff0c\u518d\u5c06\u5b83\u4eec\u4e00\u8d77\u52a0\u5165\u5e76\u67e5\u96c6\u3002\n\n\u5728\u5c06\u8fd9\u4e9b\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\u4e4b\u524d\uff0c\u8981\u627e\u5230\u5176\u4e2d\u6709\u591a\u5c11\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u4e0d\u5728\u5df2\u6709\u7684\u540c\u4e00\u4e2a\u8054\u901a\u5757\u5185\uff0c\u8fd9\u6837\u7684\u8fb9\u6570\u91cf\u8bb0\u4e3atcnt[k]\u3002\n\u90a3\u4e48\u8fd9\u6837\uff0c\u7b54\u6848\u5c31\u8981\u52a0\u4e0atcnt[k]-cnt[k]\u3002\n\n\u5982\u679c\u4e0a\u9762\u7684\u6587\u5b57\u4e0d\u592a\u5bb9\u6613\u7406\u89e3\u7684\u8bdd\uff0c\u53ef\u4ee5\u8003\u8651\u5982\u4e0b\u7684\u6837\u4f8b\uff1a\n\n5 6\n\n1 3 1\n\n2 3 1\n\n2 4 2\n\n1 5 3\n\n1 2 3\n\n3 5 3\n\n\u5f53k\u4e3a3\u65f6\uff0c\u5e76\u67e5\u96c6\u4e2d\u5df2\u7ecf\u8fde\u7684\u8fb9\u662f\u6240\u6709\u8fb9\u6743\u5c0f\u4e8e3\u7684\u8fb9\uff0c\u4e5f\u5c31\u662f(1,3),(2,3),(2,4)\u4e09\u6761\u8fb9\u3002\n\n\u6211\u4eec\u53ea\u8981\u5728\u8fd9\u4e2a\u5e76\u67e5\u96c6\u4e2d\u67e5\u627e\u6240\u6709\u8fb9\u6743\u4e3a3\u7684\u8fb9\u4e2d\u6709\u591a\u5c11\u6761\u8fb9\u4e24\u4e2a\u7aef\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5757\u5185\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u6837\u4f8b\u6765\u8bf4\u5c31\u662f(1,5\uff09\u548c(3,5)\u4e24\u6761\u8fb9\uff0c\u6240\u4ee5tcnt[3]\u5c31\u7b49\u4e8e2\u3002\n\n### \u6b63\u786e\u6027\u8bc1\u660e\uff1a\n\n\u4e0d\u4f1a\u3002\u53cd\u6b63\u5b83\u8fc7\u4e86\uff0c\u800c\u4e14\u6211\u8ba4\u4e3a\u5b83\u6781\u5927\u6982\u7387\u662f\u5bf9\u7684\u3002\n\n### \u4e00\u4e9b\u7ec6\u8282\uff1a\n\n\u9700\u8981\u628a\u8fb9\u6743\u79bb\u6563\u5316\uff0c\u8fd9\u6837\u624d\u80fd\u7528O(1)\u7684\u6876\u6765\u50a8\u5b58cnt\u548ctcnt\uff0cO(logn)\u7684map\u6709\u4e00\u5b9atle\u5371\u9669\u3002\n\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <algorithm>\n\nusing namespace std;\nconst int MAXN = 200005;\nint n,m,p[MAXN],cnt = 0;\nstruct Edge\n{\n    int u,v,c;\n    bool operator<(const Edge t) const\n    {\n        return c<t.c;\n    }\n}s[MAXN];\nint fa[MAXN];\ninline int getFather(int v)\n{\n    if(v==fa[v]) return v;\n    return fa[v] = getFather(fa[v]);\n}\nint mp[MAXN];\ninline int binarySearch(int x)\n{\n    int left = 1, right = cnt, mid,res = -1;\n    while(left<=right)\n    {\n        mid = (left+right)>>1;\n        if(p[mid]<x) left = mid+1;\n        else\n        {\n            right = mid-1;\n            res = mid;\n        }\n    }\n    return res;\n}\n\nint main()\n{\n    //freopen(\"data.in\",\"r\",stdin);\n    cin >> n >> m;\n    for(int i = 1; i<=m; i++)\n    {\n        scanf(\"%d%d%d\",&s[i].u,&s[i].v,&s[i].c);\n        p[++cnt] = s[i].c;\n    }\n    sort(p+1,p+cnt+1);\n    cnt = unique(p+1,p+cnt+1)-p;\n    for(int i = 1; i<=m; i++)\n        s[i].c = binarySearch(s[i].c);\n    //cout << \"test\" << endl; \n    for(int i = 1; i<=n; i++)\n        fa[i] = i;\n    sort(s+1,s+m+1);\n    int tmpcnt = 0;\n    s[m+1].c = -1, s[m+1].u = s[m+1].v = 1;\n    for(int i = 1; i<=m+1; i++)\n    {\n        if(s[i].c!=s[i-1].c)\n        {\n            if(i>1) mp[s[i-1].c] = tmpcnt;\n            tmpcnt = 0;\n        }\n        if(i==m+1) break;\n        int fu = getFather(s[i].u), fv = getFather(s[i].v);\n        if(fu!=fv)\n        {\n            tmpcnt++;\n            fa[fu] = fv;\n        }\n    }\n    tmpcnt = 0;  \n    //cout << \"test1\" << endl;\n    for(int i = 1; i<=n; i++)\n        fa[i] = i;\n    int lpos = 1, rpos,ans = 0;\n    for(int i = 1; i<=m; i++)\n    {\n    \tint fu = getFather(s[i].u), fv = getFather(s[i].v);\n        if(fu!=fv)\n            tmpcnt++;\n        if(s[i].c!=s[i+1].c)\n        {\n            rpos = i;\n            for(int j = lpos; j<=rpos; j++)\n            {\n                int fx = getFather(s[j].u), fy = getFather(s[j].v);\n                if(fx!=fy)\n                    fa[fx] = fy;\n            }\n            ans += tmpcnt-mp[s[i].c];\n            tmpcnt = 0;\n            lpos = i+1;\n        }\n    }\n    cout << ans << endl;\n \treturn 0;\n}\n```\n",
        "postTime": 1548325285,
        "uid": 31098,
        "name": "Caro23333",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1108F \u3010MST Unification\u3011"
    }
]