[
    {
        "content": "\u53d1\u73b0\u5982\u679c\u5b58\u5728\u67d0\u4e2a\u70b9\u80fd\u627e\u51fa\u4ee5\u5b83\u5f00\u59cb\u7684\uff0c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u86c7\u7684\u4e09\u6761\u4e0d\u76f8\u4ea4\u8def\u5f84\uff0c\u5e76\u4e14\u86c7\u80fd\u5230\u8fbe\u8be5\u70b9\uff0c\u90a3\u4e48\u86c7\u5c31\u53ef\u4ee5\u5728\u6b64\u5904\u8c03\u5934\uff0c\u6240\u4ee5\u5c31\u80fd\u9996\u5c3e\u4e92\u6362\n\n\u7b26\u5408\u8981\u6c42\u7684\u70b9\u53ef\u4ee5\u7528\u4e00\u6b21DFS\u548c\u4e00\u6b21\u6362\u6839DP\u5b8c\u6210\n\n\u5e76\u4e14\u56e0\u4e3a\u6811\u8fde\u901a\uff0c\u6240\u4ee5\u53ea\u8981\u80fd\u5230\u8fbe\u4efb\u610f\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684\u70b9\uff0c\u90a3\u4e48\u5176\u4ed6\u7684\u5c31\u90fd\u80fd\u8fbe\u5230\n\n\u5224\u5b9a\u86c7\u662f\u5426\u80fd\u5230\u8fbe\uff0c\u4ee4\u4efb\u610f\u4e00\u4e2a\u7b26\u5408\u7684\u70b9\u4e3a\u6839\uff0c\u53ef\u4ee5\u8ba9\u86c7\u8f6e\u6d41\u5411\u5934\u5c3e\u65b9\u5411\u7684\u6700\u6df1\u7684\u70b9\u79fb\u52a8\uff0c\u5982\u679c\u86c7\u7684\u4e00\u7aef\u6210\u4e3a\u53e6\u4e00\u7aef\u7684\u7236\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5230\u8fbe\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nint t,n,S,T,tot,head[100005],dep[100005],maxlen[100005][2],maxdep[100005][2],cnt[100005],fa[100005][21],d[100005],root,temp;\nbool vst[100005];\nstruct Edge\n{\n\tint to,nxt;\n}edge[200005];\ninline int read()\n{\n\tint f=1,w=0;\n\tchar ch=0;\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') w=(w<<1)+(w<<3)+ch-'0',ch=getchar();\n\treturn f*w;\n}\nvoid dfs1(int k,int f)\n{\n\tdep[k]=dep[f]+1;\n\tfor(int i=head[k];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v!=f) dfs1(v,k);\n\t}\n}\nvoid dfs2(int k,int f)\n{\n\tmaxdep[k][0]=maxdep[k][1]=k,maxlen[k][0]=maxlen[k][1]=0;\n\tfor(int i=head[k];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v!=f)\n\t\t{\n\t\t\tdfs2(v,k);\n\t\t\tif(maxlen[v][0]+1>maxlen[k][1]) maxlen[k][1]=maxlen[v][0]+1,maxdep[k][1]=maxdep[v][0];\n\t\t\tif(maxlen[k][0]<maxlen[k][1]) swap(maxlen[k][0],maxlen[k][1]),swap(maxdep[k][0],maxdep[k][1]);\n\t\t\tif(maxlen[v][0]+1>=dep[T]-1) cnt[k]++;\n\t\t}\n\t}\n}\nvoid dfs3(int k,int f)\n{\n\tfor(int i=head[k];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v!=f)\n\t\t{\n\t\t\tif(maxdep[v][0]==maxdep[k][0])\n\t\t\t{\n\t\t\t\tif(maxlen[k][1]+1>=dep[T]-1) cnt[v]++;\n\t\t\t\tif(maxlen[k][1]+1>maxlen[v][1]) maxlen[v][1]=maxlen[k][1]+1,maxdep[v][1]=maxdep[k][1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(maxlen[k][0]+1>=dep[T]-1) cnt[v]++;\n\t\t\t\tif(maxlen[k][0]+1>maxlen[v][1]) maxlen[v][1]=maxlen[k][0]+1,maxdep[v][1]=maxdep[k][0];\n\t\t\t}\n\t\t\tif(maxlen[v][1]>maxlen[v][0]) swap(maxlen[v][1],maxlen[v][0]),swap(maxdep[v][1],maxdep[v][0]);\n\t\t\tdfs3(v,k);\n\t\t}\n\t}\n}\nbool check()\n{\n\tfor(int i=1;i<=n;i++) if(cnt[i]>=3) return root=i,true;\n\treturn false;\n}\nvoid dfs4(int k,int f)\n{\n\td[k]=k,fa[k][0]=f,dep[k]=dep[f]+1;\n\tfor(int i=head[k];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v!=f)\n\t\t{\n\t\t\tdfs4(v,k);\n\t\t\tif(dep[d[v]]>dep[d[k]]) d[k]=d[v];\n\t\t}\n\t}\n}\nint lca(int x,int y)\n{\n\tif(dep[x]<dep[y]) swap(x,y);\n\tfor(int i=20;~i;i--) if(dep[fa[x][i]]>=dep[y]) x=fa[x][i];\n\tif(x==y) return x;\n\tfor(int i=20;~i;i--) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\nbool check2()\n{\n\tif(temp==S||temp==T) return true;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x=d[S],s=dep[x]-dep[S];\n\t\tif(vst[x]) return false;\n\t\tif(s>=dep[T]-dep[temp]) return true;\n\t\tfor(int j=20;~j;j--) if((1<<j)<=s) T=fa[T][j],s-=(1<<j);\n\t\tS=x,vst[x]=true,swap(S,T);\n\t}\n\treturn false;\n}\nint main()\n{\n\t//freopen(\"data.txt\",\"r\",stdin);\n\t//freopen(\"B.txt\",\"w\",stdout);\n\tt=read();\n\tfor(;t;t--)\n\t{\n\t\tmemset(head,0,sizeof(head));\n\t\tmemset(vst,false,sizeof(vst));\n\t\tmemset(cnt,0,sizeof(cnt));\n\t\ttot=0;\n\t\tn=read(),S=read(),T=read();\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tint u=read(),v=read();\n\t\t\tedge[++tot]=(Edge){v,head[u]},head[u]=tot;\n\t\t\tedge[++tot]=(Edge){u,head[v]},head[v]=tot;\n\t\t}\n\t\tdfs1(S,0);\n\t\tdfs2(S,0);\n\t\tdfs3(S,0);\n\t\tif(!check())\n\t\t{\n\t\t\tputs(\"NO\");continue;\n\t\t}\n\t\tdfs4(root,0);\n\t\tfor(int i=1;i<=20;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tfa[j][i]=fa[fa[j][i-1]][i-1];\n\t\ttemp=lca(S,T);\n\t\tif(check2()) puts(\"YES\");\n\t\telse puts(\"NO\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1606572669,
        "uid": 231743,
        "name": "QDK_Storm",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1381D \u3010The Majestic Brown Tree Snake\u3011"
    },
    {
        "content": "\u5b9a\u4e49\u5173\u952e\u70b9\uff1a\u5bf9\u4e8e\u67d0\u4e2a\u70b9\uff0c\u5982\u679c\u4ece\u8be5\u70b9\u51fa\u53d1\u7684\u4e09\u6761\u4e0d\u76f8\u4ea4\u7684\u8def\u5f84\u957f\u5ea6\u5747\u5927\u4e8e\u86c7\u7684\u957f\u5ea6 $len$ \uff0c\u5219\u79f0\u8be5\u70b9\u4e3a\u5173\u952e\u70b9\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\u86c7\u7684\u4e00\u7aef\u80fd\u591f\u5230\u8fbe\u5173\u952e\u70b9\uff0c\u662f\u8fd9\u6761\u86c7\u80fd\u591f\u6389\u5934\u7684\u5145\u8981\u6761\u4ef6\u3002\n\u7ed3\u8bba\u7684\u5145\u5206\u6027\u662f\u663e\u7136\u7684\uff0c\u5fc5\u8981\u6027\u53ef\u4ee5\u901a\u8fc7\u5047\u8bbe\u86c7\u4e0d\u80fd\u5230\u5173\u952e\u70b9\uff0c\u7136\u540e\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\u3002\n\n\u5173\u952e\u8282\u70b9\u53ef\u4ee5\u7528\u4e00\u6b21\u6811\u5f62 $\\text{dp}$ \u548c\u4e00\u6b21\u6362\u6839 $\\text{dp}$ $O(n)$ \u6c42\u51fa\u3002\n\n\u5982\u679c\u4e0d\u5b58\u5728\u5173\u952e\u70b9\uff0c\u90a3\u4e48\u86c7\u4e00\u5b9a\u4e0d\u80fd\u6389\u5934\uff0c\u8fd9\u79cd\u60c5\u51b5\u76f4\u63a5\u8f93\u51fa\"NO\"\u5373\u53ef\u3002\n\n\u5982\u679c\u5b58\u5728\u5173\u952e\u70b9\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u662f\u5224\u65ad\u86c7\u80fd\u4e0d\u80fd\u5230\u8fbe\u5173\u952e\u70b9\u3002\n\n\u5148\u8bf4\u7ed3\u8bba\uff1a\u5982\u679c\u5b58\u5728\u5173\u952e\u70b9\uff0c\u90a3\u4e48\u86c7\u80fd\u5230\u8fbe\u5173\u952e\u70b9\u7684\u5145\u8981\u6761\u4ef6\u662f\u86c7\u7684\u5934\u548c\u5c3e\u80fd\u5230\u8fbe\u7684\u70b9\u96c6\u6709\u91cd\u5408\u3002\n- \u8bc1\u660e\u5145\u5206\u6027\uff1a\n\u56e0\u4e3a\u86c7\u7684\u5934\u548c\u5c3e\u80fd\u5230\u8fbe\u7684\u70b9\u96c6\u6709\u91cd\u5408\uff0c\u6240\u4ee5\u663e\u7136\u86c7\u80fd\u591f\u62d0\u8fdb\u4efb\u610f\u4e00\u4e2a\u5c94\u8def\uff0c\u56e0\u6b64\u86c7\u7684\u7aef\u70b9\u80fd\u591f\u5230\u8fbe\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u4e5f\u5c31\u80fd\u5230\u8fbe\u5173\u952e\u70b9\u3002\n\n- \u8bc1\u660e\u5fc5\u8981\u6027\uff1a\n\u56e0\u4e3a\u86c7\u80fd\u5230\u8fbe\u5173\u952e\u70b9\uff0c\u6240\u4ee5\u86c7\u80fd\u591f\u6389\u5934\uff0c\u56e0\u6b64\u86c7\u7684\u5934\u548c\u5c3e\u80fd\u5230\u8fbe\u7684\u70b9\u96c6\u6709\u91cd\u5408\u3002\n\n\u4e3a\u4e86\u8ba9\u86c7\u5934\u548c\u5c3e\u80fd\u5230\u8fbe\u7684\u70b9\u96c6\u6709\u91cd\u5408\uff0c\u91c7\u7528\u8d2a\u5fc3\u7b56\u7565\u6bcf\u6b21\u8ba9\u86c7\u5934\u548c\u86c7\u5c3e\u8d70\u5230\u6700\u6df1\u7684\u5730\u65b9\u3002\n\u6700\u591a\u8fdb\u884c $O(\\sqrt n)$ \u6b21\u79fb\u52a8\u5c31\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\u3002\n\u8bc1\u660e\u5982\u4e0b\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/2020081311002317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzIzOTYw,size_16,color_FFFFFF,t_70#pic_center)\n\n\u6700\u574f\u60c5\u51b5\u5982\u56fe\u6240\u793a\uff0c\u5047\u8bbe\u86c7\u7684\u957f\u5ea6\u4e3a $l$ (\u8fb9\u6570)\uff0c\u5219\u70b9\u7684\u6570\u91cf $n=l+1+\\frac{(l+1)l}{2}=\\frac{(l+1)(l+2)}{2}$ \uff0c\u56e0\u6b64\u86c7\u7684\u957f\u5ea6 $l$ \u4e3a $O(\\sqrt n)$ \u7ea7\u522b\u7684\u3002\u800c\u79fb\u52a8\u6b21\u6570\u4e3a $l$ \uff0c\u56e0\u6b64\u6700\u591a\u8fdb\u884c $O(\\sqrt n)$ \u6b21\u79fb\u52a8\u5c31\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\u3002\n\u5b98\u65b9\u6807\u7a0b\u662f\u7528\u53cc\u6307\u9488\u6a21\u62df\u6c42\u89e3\uff0c\u590d\u6742\u5ea6\u4e3a $O(n)$ \uff0c\u4f46\u662f\u53ef\u4ee5\u5229\u7528\u5355\u8c03\u6808 $O(\\sqrt n)$ \u9884\u5904\u7406\u7136\u540e $O(1)$ \u67e5\u8be2\u3002\n\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n+\\sqrt n)$ \u3002\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\nconst int N = 1e5 + 10;\nint head[N], ver[N << 1], Next[N << 1], tot;\nint n, a, b, T, d[N], f[N][3], len;\nvector<int> seq, stl, str;\n\ninline void add(int x, int y) {\n    ver[++tot] = y;\n    Next[tot] = head[x];\n    head[x] = tot;\n}\n\ninline void init() {\n    memset(head + 1, 0, sizeof(int) * n);\n    for (int i = 1; i <= n; ++i)\n        for (int j = 0; j <= 2; ++j)\n            f[i][j] = 0;\n    tot = 0, seq.clear(), stl.clear(), str.clear();\n}\n\ninline void addv(int x, int v) {\n    int pos = -1;\n    for (int i = 0; i <= 2; ++i)\n        if (v >= f[x][i]) {\n            pos = i;\n            break;\n        }\n    if (pos == -1)return;\n    for (int i = 2; i >= pos + 1; --i)\n        f[x][i] = f[x][i - 1];\n    f[x][pos] = v;\n}\n\nvoid dfs1(int x, int fa, int dep) {\n    d[x] = 0;\n    if (x == b)len = dep;\n    for (int i = head[x]; i; i = Next[i]) {\n        int y = ver[i];\n        if (y == fa)continue;\n        dfs1(y, x, dep + 1);\n        addv(x, d[y] + 1);\n        d[x] = max(d[x], d[y] + 1);\n    }\n}\n\nbool dfs2(int x, int fa) {\n    if (f[x][2] >= len)return true;\n    for (int i = head[x]; i; i = Next[i]) {\n        int y = ver[i];\n        if (y == fa)continue;\n        addv(y, f[x][d[y] + 1 == f[x][0]] + 1);\n        if (dfs2(y, x))return true;\n    }\n    return false;\n}\n\nbool dfs3(int x, int fa) {\n    bool flag = (x == b);\n    d[x] = 0;\n    for (int i = head[x]; i; i = Next[i]) {\n        int y = ver[i];\n        if (y == fa)continue;\n        if (dfs3(y, x))flag = true;\n        else d[x] = max(d[x], d[y] + 1);\n    }\n    if (flag)seq.push_back(x);\n    return flag;\n}\n\nint main() {\n    scanf(\"%d\", &T);\n    while (T--) {\n        scanf(\"%d%d%d\", &n, &a, &b);\n        init();\n        for (int i = 1, x, y; i <= n - 1; ++i)\n            scanf(\"%d%d\", &x, &y), add(x, y), add(y, x);\n        dfs1(a, 0, 0);\n        if (!dfs2(a, 0)) {\n            puts(\"NO\");\n            continue;\n        }\n        dfs3(a, 0);\n        for (int i = 0; i <= len; ++i) {\n            stl.push_back(stl.empty() || d[seq[i]] - i > stl.back() ? d[seq[i]] - i : stl.back());\n            str.push_back(str.empty() || d[seq[len - i]] - i > str.back() ? d[seq[len - i]] - i : str.back());\n        }\n        reverse(str.begin(), str.end());\n        int l = 0, r = len;\n        while (l < r) {\n            if (l < str[r])l = str[r];\n            else if (len - r < stl[l])r = len - stl[l];\n            else break;\n        }\n        puts(l >= r ? \"YES\" : \"NO\");\n    }\n    return 0;\n}\n```\n",
        "postTime": 1629348249,
        "uid": 265616,
        "name": "sky_123",
        "ccfLevel": 0,
        "title": "CF1381D The Majestic Brown Tree Snake"
    },
    {
        "content": "## CF1381D\n\n\u8bbe $len = dis(a, b)$\u3002\n\n\u6709\u89e3\u7684\u5fc5\u8981\u6761\u4ef6\u4e3a\uff1a\n\n - \u5b58\u5728\u4e00\u4e2a\u7279\u6b8a\u70b9\uff0c\u5177\u6709\u4e09\u6761\u4e0e\u5176\u76f8\u8fde\u7684\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e $len$ \u7684\u4e0d\u4ea4\u94fe\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4e0d\u5145\u5206\uff0c\u662f\u56e0\u4e3a\u53ef\u80fd\u5b58\u5728\u8fd9\u6761\u86c7\u88ab\u5361\u5728\u4e24\u4e2a\u53f6\u5b50\u800c\u52a8\u5f39\u4e0d\u5f97\u7684\u60c5\u51b5\u3002\n\n\u6240\u4ee5\u9700\u8981\u9996\u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\u7279\u6b8a\u70b9\uff0c\u4efb\u53d6\u4e00\u4e2a\uff0c\u4ee5\u8be5\u70b9\u4e3a\u6839\uff0c\u4f7f\u5f97$a,b$ \u8f6e\u6d41\u5411\u53f6\u5b50\u79fb\u52a8\uff0c\u5f53 $a, b$ \u5176\u4e2d\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u7956\u5148\u65f6\u5373\u53ef\u5224\u65ad\u5408\u6cd5\u3002\n\n\u82e5\u79fb\u52a8 $n$ \u6b21\u4ee5\u4e0a\u4f9d\u7136\u4e0d\u5408\u6cd5\uff0c\u5373\u4e3a\u65e0\u89e3\u3002\n\n\u8bfb\u5b8c\u4e0a\u8ff0\u6d41\u7a0b\u4f60\u60f3\u95ee\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4efb\u9009\u4e00\u4e2a\u7279\u6b8a\u70b9\u3002\n\n\u8fd9\u662f\u56e0\u4e3a\u7279\u6b8a\u70b9\u4e4b\u95f4\u662f\u5f7c\u6b64\u53ef\u8fbe\u7684\uff0c\u5176\u4e2d\u4e00\u4e2a\u65e0\u89e3\u5176\u4ed6\u7684\u4e5f\u90fd\u4f1a\u65e0\u89e3\u3002\n",
        "postTime": 1602200643,
        "uid": 52748,
        "name": "Logey",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1381D \u3010The Majestic Brown Tree Snake\u3011"
    },
    {
        "content": "\u4e0b\u6587\u4e2d\u7684 $\\text{len}$ \u5747\u4ee3\u6307\u86c7\u7684\u957f\u5ea6\u3002\n\n\u9996\u5148\u8003\u8651\u86c7\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u6389\u5934\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u86c7\u6389\u5934\u7684\u65b9\u5f0f\u6709\u4e14\u4ec5\u6709\u4e00\u79cd\uff1a\u5f53\u4e14\u4ec5\u5f53\u86c7\u5934\u7684\u4f4d\u7f6e\u6709\u4e24\u6761\u76f8\u4ea4\u7684\u672a\u88ab\u86c7\u8eab\u5360\u636e\u7684\u957f\u5ea6\u81f3\u5c11\u4e3a $\\text{len}$ \u7684\u94fe\u65f6\uff0c\u86c7\u53ef\u4ee5\u5148\u53bb\u5176\u4e2d\u4e00\u6761\u94fe\uff0c\u518d\u53bb\u53e6\u4e00\u6761\u94fe\u4ee5\u8fbe\u5230\u6389\u5934\u7684\u76ee\u7684\u3002\u5982\u679c\u4e0d\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u86c7\u5c31\u4f1a\u88ab\u81ea\u5df1\u7684\u8eab\u4f53\u5361\u4f4f\u3002\n\n\u63a5\u7740\u8003\u8651\u86c7\u5934\u80fd\u5426\u4ee5\u6b63\u786e\u7684\u72b6\u6001\u5230\u8fbe\u5177\u6709\u4e0a\u8ff0\u6027\u8d28\u7684\u8282\u70b9\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u5f53\u86c7\u7684\u4e00\u7aef\u79fb\u52a8\u65f6\uff0c\u53e6\u4e00\u7aef\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u4f1a\u589e\u52a0\u86c7\u79fb\u5f00\u8282\u70b9\u7684\u5b50\u6811\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u86c7\u53d8\u6210\u4e00\u4e2a\u5e8f\u5217\uff0c\u7528\u53cc\u6307\u9488\u7ef4\u62a4\u86c7\u5934\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u3002\u5177\u4f53\u5730\uff0c\u5982\u679c\u4e00\u4e2a\u4f4d\u7f6e\u5728\u53cc\u6307\u9488\u5916\uff0c\u5219\u5b83\u7684\u5b50\u6811\u5747\u80fd\u88ab\u5230\u8fbe\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u8f83\u591a\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n)$\u3002",
        "postTime": 1646748003,
        "uid": 414210,
        "name": "Iam1789",
        "ccfLevel": 0,
        "title": "CF1381D The Majestic Brown Tree Snake \u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\uff0c\u89c2\u5bdf\u6837\u4f8b\u90a3\u4e2a\u56fe\u7684\u65b9\u6848\u4e2d\u70b9 $1$ \u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a\n\n> \u7ed3\u8bba $\\tt1$\uff1a`\u86c7\u80fd\u591f\u6210\u529f\u8c03\u5934` \u7684 **\u5145\u5206\u5fc5\u8981\u6761\u4ef6** \u662f\uff1a\u6709\u4e00\u4e2a `\u4e2d\u8f6c\u7ad9`\uff0c\u5176\u5ea6\u6570 $\\ge3$ \u5e76\u4e14\u53ef\u4ee5\u5ef6\u4f38\u51fa\u53bb\u4e09\u6761\u957f\u5ea6 $\\ge$ \u86c7\u957f\u5ea6\u7684\u8def\u5f84\u3002\u4f7f\u5f97\u86c7\u53ef\u4ee5\u901a\u8fc7\u79fb\u52a8\uff0c\u6765\u8ba9\u86c7\u5934/\u86c7\u5c3e\u5230\u8fbe\u4e2d\u8f6c\u7ad9\u7684\u4f4d\u7f6e\u3002\n\n\u8bc1\u660e\uff1a\u611f\u6027\u7406\u89e3\u3002\n\n`\u4e2d\u8f6c\u7ad9` \u53ef\u4ee5\u901a\u8fc7\u6362\u6839 $\\tt dp$ \u6765\u627e\u5230\u3002\u5982\u679c\u4e0d\u5b58\u5728\u80af\u5b9a\u8f93\u51fa $\\tt NO$\u3002\n\n> \u7ed3\u8bba $\\tt2$\uff1a\u5982\u679c\u86c7\u80fd\u591f\u5230\u8fbe\u4e00\u4e2a `\u4e2d\u8f6c\u7ad9`\uff0c\u5c31\u4e00\u5b9a\u53ef\u4ee5\u5230\u8fbe\u6240\u6709 `\u4e2d\u8f6c\u7ad9`\u3002\n\n\u8bc1\u660e\uff1a\u8003\u8651\u4e24\u4e2a\u4e2d\u8f6c\u7ad9 $p_1,p_2$\uff0c\u86c7\u5934\u90e8\u53ef\u4ee5\u5230\u8fbe $p_1$\u3002\u5728 $p_1$ \u5ef6\u4f38\u51fa\u53bb\u4e09\u4e2a\u65b9\u5411\u4e2d\uff1a\n\n+ \u5982\u679c\u86c7\u548c $p_2$ \u662f\u540c\u4e00\u4e2a\u65b9\u5411\uff0c\u76f4\u63a5\u8ba9\u86c7\u5c3e\u90e8\u5411\u7740 $p_2$ \u7684\u65b9\u5411\u524d\u8fdb\u5373\u53ef\u3002\n+ \u8ba9\u86c7\u7684\u5c3e\u90e8\u5230\u8fbe $p_1$\uff0c\u5934\u90e8\u8fdb\u5165\u4e09\u4e2a\u65b9\u5411\u4e2d\uff0c\u9664\u4e86\u4e4b\u524d\u7684\u5b83\u81ea\u5df1\u548c $p_2$ \u7684\u5269\u4e0b\u90a3\u4e2a\u65b9\u5411\u3002\u8fd9\u65f6\u8ba9\u86c7\u7684\u5c3e\u90e8\u5411\u7740 $p_2$ \u65b9\u5411\u524d\u8fdb\u5373\u53ef\u3002\n\n> \u7ed3\u8bba $\\tt3$\uff1a\u5982\u679c\u86c7\u80fd\u5230\u8fbe\u4e00\u4e2a `\u4e2d\u8f6c\u7ad9`\uff0c\u5c31\u4e00\u5b9a\u53ef\u4ee5\u5b8c\u6210\u8c03\u5934\u3002\n\n\u8bc1\u660e\uff1a\u86c7\u53ef\u4ee5\u5148\u5230\u8fbe\u4e2d\u8f6c\u7ad9\uff0c\u5728\u6b64\u5b8c\u6210\u8c03\u5934\uff0c\u518d\u539f\u8def\u8fd4\u56de\u3002\n\n> \u7ed3\u8bba $\\tt4$\uff1a\u86c7\u5934\u80fd\u5230\u8fbe\u7684\u70b9\u548c\u5c3e\u80fd\u5230\u8fbe\u7684\u70b9\u6709\u4ea4\u96c6\uff0c\u662f\u86c7\u53ef\u4ee5\u5230\u8fbe\u4e00\u4e2a\u4e2d\u8f6c\u7ad9\u7684 **\u5145\u5206\u5fc5\u8981\u6761\u4ef6**\u3002\n\n+ \u8bc1\u660e **\u5fc5\u8981\u6027**\uff1a\u65e2\u7136\u86c7\u90fd\u80fd\u8c03\u5934\uff0c\u90a3\u80af\u5b9a\u5934\u548c\u5c3e\u6709\u4ea4\u96c6\u3002\n+ \u8bc1\u660e **\u5145\u5206\u6027**\uff1a\u6b64\u65f6\u86c7\u4e0d\u4f1a\u9677\u5165\u201c\u5361\u4f4f\u201d\u7684\u72b6\u6001\uff0c\u53ef\u4ee5\u81ea\u7531\u6d3b\u52a8\uff0c\u4e00\u5b9a\u53ef\u4ee5\u8d70\u904d\u5168\u6811\uff0c\u4e5f\u53ef\u4ee5\u5230\u8fbe\u4e00\u4e2a\u4e2d\u8f6c\u7ad9\u3002\n\n---\n\n\u6709\u4e86\u56db\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u63d0\u51fa $s\\to t$ \u7684\u8def\u5f84\uff0c\u7136\u540e\u7ed9\u4e0a\u9762\u6bcf\u4e2a\u70b9\u4e00\u4e2a\u6743\u503c $a_i$\uff0c\u4ee3\u8868\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\uff0c\u53ef\u4ee5\u5ef6\u4f38\u51fa\u53bb\u7684\u6700\u957f\u8def\u5f84\u957f\u5ea6\u3002\u7136\u540e **\u5c3d\u53ef\u80fd\u7684\u8ba9\u5934\u548c\u5c3e\u80fd\u5230\u7684\u70b9\u53c8\u4ea4\u96c6**\u3002\n\n![](https://img-blog.csdnimg.cn/img_convert/68f3fb282ada6987585fa5d3b016ad12.png#pic_center)\n\n>  \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d $\\{a\\}=\\{0,2,4,5,3,1\\}$\u3002\n\n\u6211\u4eec\u4ece $s,t$ \u5f00\u59cb\u8df3\uff0c\u201c\u8df3\u201d\u5b9a\u4e49\u4e3a\u8ba9\u5f53\u524d\u70b9\uff08$s$ \u6216 $t$\uff09\u4e0d\u505c\u5f80\u4e0b\u8d70\uff0c\u53e6\u4e00\u4e2a\u70b9\u8ddf\u7740\u52a8\u3002\n\n+ \u7b2c\u4e00\u6b65 $s$ \u8df3\u4e0d\u52a8\uff0c\u6240\u4ee5\u8df3 $t$\uff0c\u8df3\u5b8c\u540e $s\\gets p_2,t\\gets e_1$\u3002\n+ \u7b2c\u4e8c\u6b65 $t$ \u8df3\u4e0d\u52a8\uff0c\u6240\u4ee5\u8df3 $s$\uff0c\u8df3\u5b8c\u540e $s\\gets a_2,t\\gets p_5$\u3002\n+ \u7b2c\u4e09\u6b65 $s$ \u8df3\u4e0d\u52a8\uff0c\u6240\u4ee5\u8df3 $t$\uff0c\u8df3\u5b8c\u540e $s\\gets p_3,t\\gets d_3$\u3002\n+ \u4ee5\u6b64\u7c7b\u63a8 $\\dots$\n+ \u4e0d\u77e5\u9053\u591a\u5c11\u6b65\u540e\uff1a$s,t$ \u6765\u5230 $c_1,c_5$ \u7684\u4f4d\u7f6e\uff0c\u8fd9\u65f6\u5934\u548c\u5c3e\u7684\u8def\u5f84\u51fa\u73b0\u91cd\u5408\u3002\n\n\u6211\u4eec\u53d1\u73b0\u201c\u5934\u548c\u5c3e\u8def\u5f84\u51fa\u73b0\u91cd\u5408\u201d\u5c31\u662f **\u5f53\u524d $s,t$ \u5728\u94fe\u4e0a\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u7b49**\uff0c\u6bd4\u5982 $s,t$ \u6765\u5230 $c_1,c_5$\uff0c\u5b83\u4eec\u90fd\u5bf9\u5e94 $p_4$\u3002\u800c\u5982\u679c\u8df3\u5230\u4e00\u534a\u8df3\u4e0d\u52a8\u4e86\uff08\u81ea\u5df1\u5c1d\u8bd5\u6784\u9020\uff1f\uff09\uff0c\u8fd9\u65f6\u5c31\u662f $\\tt NO$\u3002\n\n\u66b4\u529b\u6a21\u62df\u53ea\u9700\u8981\u77e5\u9053 $a_i$ \u7684\u503c\u4ee5\u53ca $s,t$ \u5b9e\u65f6\u5728\u94fe\u4e0a\u7684\u5bf9\u5e94\u4f4d\u7f6e\u3002\u53ef\u4ee5\u5173\u4e8e\u94fe\u957f\u505a\u5230\u7ebf\u6027\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(\\sum n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e5 + 5;\n\nint n,T,s,t,len,mxd[N],fa[N];\nvector<int> G[N],f[N],path;\n\nvoid dfs1(int u,int ft,int dep){\n\tf[u].assign(3,0); mxd[u] = 0;\n\tif(u == t) len = dep;\n\tfor(int v : G[u]) if(v != ft){\n\t\tdfs1(v,u,dep + 1);\n\t\tf[u].push_back(mxd[v] + 1);\n\t\tmxd[u] = max(mxd[u],mxd[v] + 1);\n\t}\n}\n\nvoid dfs2(int u,int ft){\n\tranges::partial_sort(f[u],begin(f[u]) + 3,greater<>());\n\tfor(int v : G[u]) if(v != ft)\n\t\tf[v].push_back(f[u][mxd[v] + 1 == f[u][0]] + 1),dfs2(v,u);\n}\n\nbool dfs3(int u,int ft){\n\tbool flg = u == t; mxd[u] = 0; fa[u] = ft;\n\tfor(int v : G[u]) if(v != ft)\n\t\tdfs3(v,u) ? flg = 1 : mxd[u] = max(mxd[u],mxd[v] + 1);\n\treturn flg;\n}\n\nvoid sol(){\n\tscanf(\"%d%d%d\",&n,&s,&t);\n\tfor(int i = 1;i <= n;++i) G[i].clear(),G[i].shrink_to_fit();\n\tfor(int i = 1,x,y;i < n;++i)\n\t\tscanf(\"%d%d\",&x,&y),G[x].push_back(y),G[y].push_back(x);\n\tdfs1(s,0,0); dfs2(s,0);\n\tbool flg = 0;\n\tfor(int i = 1;i <= n;++i) if(f[i][2] >= len) flg = 1;\n\tif(!flg) return printf(\"NO\\n\"),void();\n\tdfs3(s,0);\n\tpath.clear();\n\tfor(int j = t;j;j = fa[j]) path.push_back(mxd[j]);\n\tint l = 0,r = len,L = path.back(),R = len - path.front();\n\twhile(l < r){\n\t\tif(l < L) ++l,R = min(R,len - path[l] + l);\n\t\telse if(r > R) --r,L = max(L,path[r] - len + r);\n\t\telse break;\n\t}\n\tprintf(l == r ? \"YES\\n\" : \"NO\\n\");\n}\n\nint main(){\n\tfor(scanf(\"%d\",&T);T--;) sol();\n\treturn 0;\n}\n```",
        "postTime": 1673787954,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "CF1381D / [NOI2023] 4C"
    }
]