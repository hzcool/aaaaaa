[
    {
        "content": "\u770b\u5b8cuniverse\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u81ea\u7136\u80fd\u60f3\u5230\u4e00\u79cd\u6734\u7d20\u7684\u5206\u6cbb\u505a\u6cd5\uff1a\u66b4\u529b\u627e\u5230\u4e00\u6761\u201c\u7f1d\u9699\u201d\uff0c\u4e4b\u540e\u628a\u70b9\u96c6\u5212\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u5206\u522b\u89e3\u51b3\u3002\u4e0b\u9762\u7684\u9012\u5f52\u5f0f\u53ef\u4ee5\u63cf\u8ff0\u6734\u7d20\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$$\\text{T}(n)=\\text{max}(\\text{T}(i)+\\text{T}(n-i)+\\text{O}(i)),i\\in[1,n]$$  \nT(n)\u663e\u7136\u53ef\u4ee5\u9000\u5316\u5230O($n^2$)\u3002\u4e8e\u662f\u6211\u4eec\u60f3\u529e\u6cd5\u4f18\u5316\u8fd9\u4e2a\u5f0f\u5b50\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u628a\u4e0a\u9762\u7684\u5f0f\u5b50\u4e2d$i$\u7684\u8303\u56f4\u63a7\u5236\u5728$[1,n/2]$\u4e2d\uff0c\u5c31\u53ef\u4ee5\u8fbe\u5230\u7406\u60f3\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u7ecf\u8fc7\u66b4\u529b\u68c0\u9a8c\uff0c\u5e94\u8be5\u662fO(nlogn)\u7684\uff09\u3002\u4e8e\u662f\u6211\u4eec\u60f3\u529e\u6cd5\u5b9e\u73b0\u8fd9\u4e2a\u5f0f\u5b50\u3002  \n\u5176\u4e2d\u4e00\u79cd\u65b9\u6848\u662f\u7528\u7ebf\u6bb5\u6811\u5feb\u901f\u786e\u5b9a\u67d0\u4e2a\u201c\u7f1d\u9699\u201d\u7684\u4f4d\u7f6e\uff0c\u63a5\u7740\u628a\u201c\u7f1d\u9699\u201d\u4e00\u4fa7\uff08\u70b9\u6570\u8f83\u5c11\u7684\u4e00\u4fa7\uff09\u7684\u70b9\u4ece\u70b9\u96c6\u4e2d\u79fb\u9664\u5e76\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u70b9\u96c6\uff0c\u63a5\u7740\u9012\u5f52\u89e3\u51b3\u3002  \n\u53e6\u4e00\u79cd\u5de7\u5999\u7684\u65b9\u6848\u662f\uff0c\u540c\u65f6\u4ece\u4e24\u7aef\u5f00\u59cb\u626b\u63cf\u70b9\u96c6\u4e2d\u6240\u6709\u7684\u70b9\uff0c\u5e76\u5728\u7b2c\u4e00\u4e2a\u53d1\u73b0\u7684\u201c\u7f1d\u9699\u201d\u5904\u5212\u5206\u70b9\u96c6\u3002\u5982\u6b64\uff0c\u627e\u201c\u7f1d\u9699\u201d\u548c\u5212\u5206\u70b9\u96c6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(i),$i\\in[1,n/2]$\u7684\uff08\u5ffd\u7565\u70b9\u96c6\u4e2d\u7684\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff09\u3002  \n\u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\u6216\u8005\u5e73\u8861\u6811\u7b49\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u70b9\u96c6\u3002  \nPS\uff1a\u6ce8\u610f\u5e38\u6570\uff0c\u6211\u7b2c\u4e00\u6b21\u63d0\u4ea4\u7528\u4e86\u4e24\u4e2a\u7ebf\u6bb5\u6811\u548c\u516b\u4e2a\u5806\uff0c\u7ed3\u679c......  \n\u4ee3\u7801\uff1a\n```\n#include <cstdlib>\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <cstring>\n#include <time.h>\n#include <complex>\n#include <algorithm>\n#include <queue>\n#include <stack>\n\n#pragma warning(disable:4996)\n#define lowbit(a) ((a)&-(a))\n\ntemplate<typename T> T min(T x, T y)\n{\n    return x < y ? x : y;\n}\ntemplate<typename T> T max(T x, T y)\n{\n    return x > y ? x : y;\n};\n\nconst int MAXN = 300005;\nconst int INF = 2000000005;\n\nstruct pos {\n    int x;\n    int y;\n    pos(int X = 0, int Y = 0)\n    {\n        x = X;\n        y = Y;\n    }\n};\nbool cmp1(pos a, pos b)\n{\n    if (a.x == b.x)\n        return a.y <= b.y;\n    return a.x < b.x;\n}\nbool cmp2(pos a, pos b)\n{\n    if (a.y == b.y)\n        return a.x <= b.x;\n    return a.y < b.y;\n}\n\nstruct tree {\n    pos w;\n    int size;\n    tree *lson;\n    tree *rson;\n    tree(pos data = pos())\n    {\n        w = data;\n        size = 1;\n        lson = rson = NULL;\n    }\n    void fixup()\n    {\n        size = (lson ? lson->size : 0) + (rson ? rson->size : 0) + 1;\n    }\n};\nstruct pair {\n    tree *fir;\n    tree *sec;\n    pair(tree *F = NULL, tree *S = NULL)\n    {\n        fir = F;\n        sec = S;\n    }\n};\n\nbool shouldleft(int a, int b)\n{\n    return (rand() * 10000 + rand()) % (a + b) < a;\n}\ntree *merge(tree *T1, tree *T2)\n{\n    if (!T1)\n        return T2;\n    if (!T2)\n        return T1;\n    if (shouldleft(T1->size, T2->size))\n    {\n        T1->rson = merge(T1->rson, T2);\n        T1->fixup();\n        return T1;\n    }\n    T2->lson = merge(T1, T2->lson);\n    T2->fixup();\n    return T2;\n}\npair split(tree *T, int k)\n{\n    if (!T)\n        return pair();\n    int r = (T->lson ? T->lson->size : 0) + 1;\n    if (r <= k)\n    {\n        pair t = split(T->rson, k - r);\n        T->rson = t.fir;\n        T->fixup();\n        return pair(T, t.sec);\n    }\n    pair t = split(T->lson, k);\n    T->lson = t.sec;\n    T->fixup();\n    return pair(t.fir, T);\n}\nint LorE(tree *T, pos p, bool(*cmp)(pos, pos))\n{\n    if (!T)\n        return 0;\n    return cmp(T->w, p) ? (T->lson ? T->lson->size : 0) + 1 + LorE(T->rson, p, cmp)\n        : LorE(T->lson, p, cmp);\n}\n\ntree *insert(tree *T, pos p, bool(*cmp)(pos, pos))\n{\n    pair t = split(T, LorE(T, p, cmp));\n    return merge(t.fir, merge(new tree(p), t.sec));\n}\ntree *del(tree *T, pos p, bool(*cmp)(pos, pos))\n{\n    int n = LorE(T, p, cmp);\n    pair t = split(T, n);\n    pair t2 = split(t.fir, n - 1);\n    return merge(t2.fir, t.sec);\n}\ntree *get(tree *T, int k)\n{\n    int r = (T->lson ? T->lson->size : 0) + 1;\n    if (r == k)\n        return T;\n    if (k < r)\n        return get(T->lson, k);\n    return get(T->rson, k - r);\n}\n\nint solve(tree *T1, tree *T2)\n{\n    int n = T1->size;\n    for (int i = 1; i <= n - 1; i++)\n    {\n        if (get(T1, i + 1)->w.x > get(T1, i)->w.x + 1)\n        {\n            pair t1 = split(T1, i), t2;\n            for (int j = 1; j <= i; j++)\n            {\n                pos p = get(t1.fir, j)->w;\n                t2.fir = insert(t2.fir, p, cmp2);\n                T2 = del(T2, p, cmp2);\n            }\n            t2.sec = T2;\n            return solve(t1.fir, t2.fir) + solve(t1.sec, t2.sec);\n        }\n        if (get(T2, i + 1)->w.y > get(T2, i)->w.y + 1)\n        {\n            pair t1, t2 = split(T2, i);\n            for (int j = 1; j <= i; j++)\n            {\n                pos p = get(t2.fir, j)->w;\n                t1.fir = insert(t1.fir, p, cmp1);\n                T1 = del(T1, p, cmp1);\n            }\n            t1.sec = T1;\n            return solve(t1.fir, t2.fir) + solve(t1.sec, t2.sec);\n        }\n        if (get(T1, n - i + 1)->w.x > get(T1, n - i)->w.x + 1)\n        {\n            pair t1 = split(T1, n - i), t2;\n            for (int j = 1; j <= i; j++)\n            {\n                pos p = get(t1.sec, j)->w;\n                t2.sec = insert(t2.sec, p, cmp2);\n                T2 = del(T2, p, cmp2);\n            }\n            t2.fir = T2;\n            return solve(t1.fir, t2.fir) + solve(t1.sec, t2.sec);\n        }\n        if (get(T2, n - i + 1)->w.y > get(T2, n - i)->w.y + 1)\n        {\n            pair t1, t2 = split(T2, n - i);\n            for (int j = 1; j <= i; j++)\n            {\n                pos p = get(t2.sec, j)->w;\n                t1.sec = insert(t1.sec, p, cmp1);\n                T1 = del(T1, p, cmp1);\n            }\n            t1.fir = T1;\n            return solve(t1.fir, t2.fir) + solve(t1.sec, t2.sec);\n        }\n    }\n    return 1;\n}\n\nint N;\ntree *T1, *T2;\n\nint main()\n{\n    pos p;\n\n    scanf(\"%d\", &N);\n    for (int i = 1; i <= N; i++)\n    {\n        scanf(\"%d %d\", &p.x, &p.y);\n        T1 = insert(T1, p, cmp1);\n        T2 = insert(T2, p, cmp2);\n    }\n\n    int ans = solve(T1, T2);\n    printf(\"%d\", ans);\n\n    //system(\"pause\");\n    return 0;\n}\n```",
        "postTime": 1549961316,
        "uid": 64366,
        "name": "ddwqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF475F \u3010Meta-universe\u3011"
    },
    {
        "content": "\u66b4\u529b\u5c31\u662f\u76f4\u63a5\u6a21\u62df\u5206\u88c2\u8fc7\u7a0b\uff0c\u53d1\u73b0\u627e\u5168 $0$ \u7684\u884c\uff0c\u5217\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4ee3\u66ff\uff0c\u4f46\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u70b8\u3002\n\n\u6bcf\u6b21\u65e2\u7136\u662f\u628a\u591a\u91cd\u5b87\u5b99\u5206\u88c2\u6210\u4e24\u4e2a\u5c0f\u7684\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u542f\u53d1\u5f0f\u5206\u88c2\uff0c\u628a\u8f83\u5c0f\u7684\u4ece\u539f\u96c6\u5408\u4e2d\uff08\u7ebf\u6bb5\u6811\uff09\u5220\u9664\u51fa\u53bb\uff0c\u52a0\u5165\u65b0\u7684\u96c6\u5408\uff08\u7ebf\u6bb5\u6811\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log ^2 n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u6ce8\u610f\u5b9e\u73b0\uff0c\u4e0d\u80fd\u626b\u63cf\u5f53\u524d\u7684\u591a\u91cd\u5b87\u5b99\uff0c\u5426\u5219\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u3002",
        "postTime": 1677655152,
        "uid": 615348,
        "name": "zhouershan",
        "ccfLevel": 7,
        "title": "Meta-universe \u9898\u89e3"
    }
]