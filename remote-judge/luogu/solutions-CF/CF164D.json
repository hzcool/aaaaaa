[
    {
        "content": "TLDR: \u641c\u7d22+\u526a\u679d\u4f18\u5316\n\n\u5bb9\u6613\u53d1\u73b0\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u56e0\u6b64\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\n\n\u4e8c\u5206\u4e24\u4e24\u95f4\u6700\u5927\u8ddd\u79bb $x$, \u5c06\u8ddd\u79bb\u5927\u4e8e $x$ \u7684\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u5efa\u56fe\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u8981\u4f7f\u6700\u5927\u8ddd\u79bb\u662f $x$\uff0c\u56fe\u4e0a\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u53ea\u80fd\u4fdd\u7559\u6700\u591a\u4e00\u4e2a\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u56fe\u4e0a\u6309\u7167\u4e0b\u5217\u89c4\u5219\u8fdb\u884c\u641c\u7d22\uff1a\n\n- \u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u5b83\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u5219\u5220\u9664\u6240\u6709\u548c\u5b83\u76f8\u8fde\u7684\u8fb9\u3002\n\n\u7136\u800c\u8fd9\u6837\u505a\u4f1a\u8d85\u65f6\uff0c\u56e0\u6b64\u9700\u8981\u526a\u679d\u3002\n\n\u5bb9\u6613\u770b\u5230\uff0c\u5220\u53bb\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff08\u5373\u5ea6\u6570\u4e3a $1$ \u7684\u8282\u70b9\uff09\u603b\u6ca1\u6709\u5220\u9664\u4e0e\u8fd9\u4e2a\u8282\u70b9\u76f8\u8fde\u7684\u90a3\u4e2a\u8282\u70b9\u4f18\u3002\u8fd9\u662f\u56e0\u4e3a\u5220\u53bb\u53e6\u5916\u4e00\u4e2a\u8282\u70b9\u540c\u65f6\u4e5f\u4f7f\u5176\u4ed6\u7684\u4e00\u4e9b\u4e0e\u4e4b\u76f8\u8fde\u7684\u8282\u70b9\u6ee1\u8db3\u4e86\u6761\u4ef6\u3002\n\n\u5728\u5220\u6389\u6240\u6709\u548c\u53f6\u5b50\u76f8\u8fde\u7684\u8282\u70b9\u540e\uff0c\u6211\u4eec\u6309\u7167\u4e0b\u9762\u7684\u987a\u5e8f\u8bd5\u56fe\u5220\u6389\u5176\u4ed6\u8282\u70b9\u3002\n\n1. \u5220\u5ea6\u6570\u6700\u5927\u7684\n2. \u56de\u6eaf\u540e\uff0c\u5220\u4e0e\u8fd9\u4e2a\u5ea6\u6570\u6700\u5927\u7684\u76f8\u8fde\u7684\n\n\u6613\u8bc1\u8fd9\u6837\u9012\u5f52\u4e0b\u53bb\u6700\u7ec8\u80fd\u591f\u7ed3\u675f\uff0c\u5e76\u5f97\u51fa\u5728\u8fd9\u4e2a $x$ \u4e0b\u7684\u6700\u4f18\u89e3\u662f\u5426\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nlong long qread() {\n    char c = getchar();\n    int neg = 1;\n    long long val = 0;\n    while (c != '-' && !isdigit(c)) c = getchar();\n    if (c == '-') c = getchar(), neg = -1;\n    while (isdigit(c)) val = (val << 3) + (val << 1) + c - '0', c = getchar();\n    return neg * val;\n}\nstruct Point {\n    int x, y;\n    Point(int x = 0, int y = 0): x(x), y(y) {}\n};\nvector <Point> p;\nconst int N = 1003;\nint ans[N], del[N];\nint n, k; \n#define s(x) ((x) * (x))\ninline int dist(Point x, Point y) {return s(x.x - y.x) + s(x.y - y.y);}\nvector <int> g[N];\nint deg[N];\nvoid remove(int u) {\n //   cerr << \"rm \" << u << endl;\n    del[u] = true;\n    for (auto v: g[u]) {\n        deg[u]--;\n        --deg[v];\n    }\n}\nvoid restore(int u) {\n    del[u] = false;\n    for (auto v: g[u]) {\n        deg[u]++;\n        ++deg[v];\n    }\n}\nint dfs(int k) {\n    int leaf = -1;\n    for (int i = 0; i < n; i++) {\n        if (!del[i] && deg[i] == 1) {\n            leaf = i;\n            break;\n        }\n    }\n    // we need to remove nodes furthest away from the center\n    // but it is not profitable to remove leaves\n    // so we remove their parents\n    if (leaf != -1) {\n        int w = -1;\n        for (auto v: g[leaf]) {\n            if (!del[v]) {\n                w = v;\n                break;\n            }\n        }\n        assert(w != -1);\n        remove(w);\n        if (k > 0 && dfs(k - 1)) return true;\n        restore(w);\n        return false;\n        \n    }\n\n    int maxd = 0, maxi = -1;\n    for (int i = 0; i < n; i++) {\n        if (!del[i] && deg[i] > maxd) {\n            maxd = deg[i];\n            maxi = i;\n        }\n    }\n    if (!maxd) return true;\n    if (!k) return false;\n    remove(maxi);\n    if (dfs(k - 1)) return true;\n    restore(maxi);\n    if (1 < maxd && maxd <= k) {\n        vector <int> adj;\n        for (auto v: g[maxi]) if (!del[v]) adj.push_back(v);\n        for (auto v: adj) remove(v);\n        if (dfs(k - maxd)) return true;\n        for (auto v: adj) restore(v);\n    }\n    return false;\n}\nbool check(int x) {\n    for (int i = 0; i < n; i++) g[i].clear();\n    memset(deg, 0, sizeof(deg));\n    memset(del, 0, sizeof(del));\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            if (dist(p[i], p[j]) > x) {\n                g[i].push_back(j);\n                deg[i]++;\n            }\n    return dfs(k);\n}\nint main() {\n//    ios::sync_with_stdio(false); \n    n = qread(); k = qread();\n    for (int i = 0; i < n; i++) {\n        Point _;\n        _.x = qread();\n        _.y = qread();\n        p.push_back(_);\n    }\n    int L = -1, R = 2100000000;\n    while (L + 1 < R) {\n        int mid = (L + R) >> 1;\n        if (check(mid)) {\n            for (int i = 0; i < n; i++) ans[i] = del[i];\n            R = mid;\n        } else L = mid;\n    }\n    int rem = k;\n    for (int i = 0; i < n; i++) if (ans[i]) rem--;\n    for (int i = 0; i < n; i++) {\n        if (rem > 0 && !ans[i]) {\n            ans[i] = 1;\n            rem--;\n        }\n    }\n    for (int i = 0; i < n; i++) if (ans[i])\n        cout << i + 1 << ' ';\n    cout << endl;\n}\n\n```\n",
        "postTime": 1597826909,
        "uid": 87696,
        "name": "Lily_White",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF164D \u3010Minimum Diameter\u3011"
    }
]