[
    {
        "content": "\u8fdc\u53e4\u9898\u5c45\u7136\u6ca1\u6709\u4eba\u53d1\u9898\u89e3\uff0c\u90a3\u6211\u53d1\u4e00\u7bc7\u3002\n\n## \u505a\u6cd5\u4e00(\u5927\u4f17\u505a\u6cd5)\n\u4e8c\u5206 $p[x]$ \u7684\u503c\u7136\u540e\u7528\u4f18\u5148\u961f\u5217\u6a21\u62df\u5c31\u597d\u4e86\uff0c\u601d\u8def\u8fd8\u662f\u5f88\u597d\u60f3\u7684\u3002\n\n## \u505a\u6cd5\u4e8c\uff08\u672c\u4eba\u7684\u505a\u6cd5\uff09\n### 1. \u82e5\u6ca1\u6709 $p[x] = -1$\n\n\u8003\u8651\u628a\u6bcf\u4e2a\u65f6\u523b\u8fde\u6210\u4e00\u6bb5\u533a\u95f4\uff0c\u65f6\u523b\u770b\u6210\u4e00\u4e2a\u4e2a\u6574\u70b9\uff0c\u8bbe\u5f00\u59cb\u65f6\u95f4\u4e3a\u521d\u59cb\u503c\uff0c\u5c06\u6240\u9700\u8981\u7684\u65f6\u95f4\u53d8\u4e3a\u6240\u9700\u8981\u7684\u6574\u70b9\u6570\u91cf\uff0c\u6240\u4ee5\u9898\u76ee\u610f\u601d\u5c31\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6709 $n$ \u4e2a\u7ed3\u6784\u4f53\uff0c\u8fd9 $n$ \u4e2a\u7ed3\u6784\u4f53\u6709\u4e00\u4e2a\u521d\u59cb\u503c\u548c\u6240\u9700\u8981\u7684\u6574\u70b9\u6570\u91cf\uff0c\u4f60\u8981\u4ece $[x+1,\\infty ]$ \u4e2d\u9009\u53d6\u4e00\u4e9b\u70b9\uff0c\u70b9\u7684\u4f4d\u7f6e\u8d8a\u5c0f\u8d8a\u597d\uff0c\u5176\u6b21\u8fd8\u8981\u8003\u8651\u4f18\u5148\u5ea6\uff0c\u4f18\u5148\u5ea6\u5927\u7684\u5148\u9009\u70b9\uff0c\u4f18\u5148\u7684\u5c0f\u7684\u540e\u9009\u70b9\uff0c\u6c42\u6bcf\u7ed3\u6784\u4f53\u7684\u6700\u540e\u6240\u9009\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u505a\u6cd5\u5982\u4e0b\uff1a\n\n\u5148\u5c06\u70b9\u6309\u4f18\u5148\u5ea6\u5927\u5c0f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u628a\u6240\u6709 $[1,\\infty ]$ \u4e0a\u7684\u70b9\u6743\u8bbe\u4e3a\u4e00\uff0c\u5982\u679c\u7528\u8fc7\u4e86\u5c31\u8bbe\u4e3a\u96f6\uff0c\u7136\u540e\u627e\u70b9\u586b\u5165\u5c31\u597d\u4e86\uff0c\u5b9e\u73b0\u7528\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n### 2. \u82e5\u6709 $p[x] = -1$ \n\n\u4e3a\u4e86\u7b80\u5355\u8868\u8ff0\u9898\u610f\uff0c\u6211\u5c06 $p[x] = -1$ \u7684\u7ed3\u6784\u4f53\u8bbe\u4e3a\u76ee\u6807\u7ed3\u6784\u4f53\u3002\n\n\u6309\u7167\u4e0a\u9762\u7684\u505a\u6cd5\uff0c\u4f46\u8981\u52a0\u4e00\u6761\u67e5\u8be2\u7684\u64cd\u4f5c\uff0c\u770b\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u76ee\u6807\u7ed3\u6784\u4f53\u662f\u5426\u80fd\u6210\u7acb\uff0c\u5982\u679c\u6210\u7acb\u5c31\u53ef\u4ee5\u5bfb\u627e\u76ee\u6807\u7684\u4f18\u5148\u5ea6\u4e86\u3002\n\n\u9996\u5148\u4f18\u5148\u5ea6\u4e00\u5b9a\u662f\u6bd4\u4e0a\u4e00\u6b21\u64cd\u4f5c\u7684\u8981\u5c0f\uff0c\u6bd4\u4e0b\u4e00\u6b21\u6d89\u53ca\u5230\u76ee\u6807\u6240\u9009\u533a\u95f4\u7684\u64cd\u4f5c\u8981\u5927\uff0c\u8fd9\u6837\u5c31\u76f4\u63a5\u679a\u4e3e\u5c31\u597d\u4e86\uff0c\u6bd4\u5982\u8bf4\u4e0a\u4e00\u6b21\u64cd\u4f5c\u4f18\u5148\u5ea6\u5927\u5c0f\u51cf\u4e00\uff0c\u5f53\u7136\u7279\u6b8a\u60c5\u51b5\u8981\u7279\u6b8a\u5224\u65ad\u3002\n\n\n\u6ce8\u610f\uff1a\u5982\u679c\u8981\u5f00\u6574\u6574\u4e00\u68f5\u7ebf\u6bb5\u6811\u7684\u8bdd\u660e\u663e\u5c31\u4f1a\u7206\u7a7a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7528\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\u3002\n```cpp\n#include<cstring>\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#include<iostream>\nusing namespace std;\nlong long read(){char c;int sign=1;\n    while((c=getchar())<'0'||c>'9')if(c=='-')sign=-1;long long res=c-'0';\n    while((c=getchar())>='0'&&c<='9')res=res*10+c-'0';return res*sign;\n}\nconst int N=5e4+7;\nint n,m;\nlong long ans[N];\nstruct node{\n    long long t,s,p; int id;\n    bool operator < (const node &other){return p<other.p;}\n} task[N];\nlong long id,maxs,sum;int rt;\nstruct Tree{\n    long long tr[N*160];\n    int ls[N*160],rs[N*160],cnt;\n    long long len(long long l,long long r){return r-l+1;}\n    void pushup(int k,long long l,long long r){\n        if(tr[k]==0)return ;// \u7528\u8fc7\u4e86\u7684\u70b9\u5c31\u4e0d\u8981\u8ba9\u4ed6\u5728\u7528\u4e86\n        long long mid=(l+r)/2,ans1=0,ans2=0;\n        if(!ls[k]) ans1=len(l,mid);\n        if(!rs[k]) ans2=len(mid+1,r);\n        tr[k]=tr[ls[k]]+tr[rs[k]]+ans1+ans2;\n    }\n    long long query(int &k,long long l,long long r,long long x,long long y){\n        if(!k){\n            k=++cnt;\n            tr[k]=len(l,r);\n        }\n        if(tr[k]==0)return 0;\n        if(l>=x&&r<=y)return tr[k];\n        long long mid=(l+r)/2,ans=0;\n        if(x<=mid&&(!ls[k]||tr[ls[k]]!=0))ans+=query(ls[k],l,mid,x,y);\n        if(mid<y&&(!rs[k]||tr[rs[k]]!=0))ans+=query(rs[k],mid+1,r,x,y);\n        return ans;\n    }\n    void change_0(int &k,long long l,long long r,long long x,long long y){\n        if(l>y||r<x)return ;\n        if(!k){ k=++cnt; tr[k]=len(l,r); }\n        if(l==r){ tr[k]=0; ans[id]=l; return ; }\n        long long mid=(l+r)/2;\n        if(l>=x&&r<=y){ tr[k]=0; return ; }\n        if(x<=mid)change_0(ls[k],l,mid,x,y);\n        if(mid<y)change_0(rs[k],mid+1,r,x,y);\n        pushup(k,l,r);\n    }\n    void change(int &k,long long l,long long r,long long x,long long y,long long v,int id){\n        if(!k){ k=++cnt; tr[k]=len(l,r); }\n        if(l==r){ tr[k]=0; ans[id]=l; return ; }\n        if(v==0){ ans[id]=l; tr[k]=0; return ; }\n        long long mid=(l+r)/2;\n        long long ssum=query(ls[k],l,mid,x,y);\n        if(ssum<v){\n            change_0(ls[k],l,mid,x,y);\n            change(rs[k],mid+1,r,x,y,v-ssum,id);\n        }\n        if(ssum>=v) change(ls[k],l,mid,x,y,v,id);\n        pushup(k,l,r);\n    }\n}Tr; // \u7ebf\u6bb5\u6811\u90e8\u5206\u5e94\u8be5\u5f88\u597d\u7406\u89e3\u7684\u5427\nint main(){\n    freopen(\"input.txt\",\"r\",stdin);\n    freopen(\"output.txt\",\"w\",stdout);\n    n=read();\n    for(int i=1;i<=n;++i){\n        task[i].id=i;\n        task[i].t=read();\n        task[i].s=read();\n        task[i].p=read();\n        sum+=task[i].s+task[i].t;//\u9009\u53d6\u8303\u56f4\n    }\n    long long T=read();\n    bool flag=true;//\u7528\u6765\u5224\u65ad\u76ee\u6807\u7ed3\u6784\u4f53\u662f\u5426\u5df2\u7ecf\u88ab\u9009\u8fc7\u4e86\n    sort(task+1,task+1+n);//\u6309\u7167\u4f18\u5148\u5ea6\u6392\u5e8f\n    for(int i=n;i>1;--i){\n        if(flag){\n            if(Tr.query(rt,1,sum,task[1].t+1,T)==task[1].s){//\u5982\u679c\u5f53\u524d\u521a\u521a\u597d\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u5bfb\u627e p[x] \u7684\u503c\u4e86\n                if(i==n) task[1].p=task[n].p+1;//\u7279\u6b8a\u60c5\u51b5\n                else {\n                    for(int j=i;j>1;--j){\n                        if(task[j].p!=task[j+1].p-1){\n                            task[1].p=task[j+1].p-1;\n                            break;\n                        }\n                    }\n                }\n                Tr.change(rt,1,sum,task[1].t+1,sum,task[1].s,task[1].id);//\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\n                flag=false;\n            }\n        }\n        Tr.change(rt,1,sum,task[i].t+1,sum,task[i].s,task[i].id);//\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\n    }\n    if(flag){\n        if(task[2].p)task[1].p=task[2].p-1;\n        else task[1].p=1;\n        ans[task[1].id]=T;\n    }//\u5230\u6700\u540e\u4e86\u5982\u679c\u8fd8\u6ca1\u6709\u5c31\u76f4\u63a5\u5199\u7b54\u6848\uff0c\u4f18\u5148\u5ea6\u4ec0\u4e48\u7684\u76f4\u63a5\u5c31\u53ef\u4ee5\u51fa\u6765\u4e86\uff0c\u53ef\u80fd\u4e0d\u9700\u8981\u8fd9\u6837\u5199\uff0c\u4f46\u6211\u8fd8\u662f\u8981\u5199\n    printf(\"%lld\\n\",task[1].p);\n    for(int i=1;i<=n;++i)printf(\"%lld \",ans[i]);puts(\"\");\n    return 0;\n}\n\n```\n",
        "postTime": 1676940872,
        "uid": 395825,
        "name": "AThls123",
        "ccfLevel": 0,
        "title": "CF253E Printer \u9898\u89e3"
    }
]