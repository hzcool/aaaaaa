[
    {
        "content": "\u9898\u76ee\u94fe\u63a5\uff1a[1033E - Hidden Bipartite Graph](https://codeforces.com/contest/1033/problem/E \"1033E - Hidden Bipartite Graph\")\n\n\u9898\u76ee\u5927\u610f\uff1a\u4ea4\u4e92\u9898\uff0c\u6709\u4e00\u4e2a\u70b9\u6570\u4e3a $n\\le 600$ \u7684\u65e0\u5411\u8fde\u901a\u56fe\uff08$n$ \u7ed9\u5b9a\uff09\uff0c\u6709 $20000$ \u6b21\u8be2\u95ee\u673a\u4f1a\u3002\u6bcf\u6b21\u8be2\u95ee\u53ef\u4ee5\u7ed9\u51fa\u4e00\u4e2a\u70b9\u96c6\uff0c\u8fd4\u56de\u70b9\u96c6\u5185\u7684\u70b9\u4e24\u4e24\u4e4b\u95f4\u4e00\u5171\u6709\u591a\u5c11\u6761\u8fb9\u3002\u8981\u6c42\u5224\u65ad\u56fe\u662f\u5426\u4e3a\u4e8c\u5206\u56fe\uff0c\u82e5\u662f\u5219\u8f93\u51fa\u5176\u4e2d\u4e00\u8fb9\uff0c\u82e5\u4e0d\u662f\u5219\u8f93\u51fa\u5176\u4e2d\u4e00\u4e2a\u5947\u73af\u3002\n\n\u8003\u8651\u5c06\u56fe\u5206\u5c42\uff0c\u4e00\u5f00\u59cb\u7b2c\u4e00\u5c42\u5bf9\u5e94\u70b9\u96c6 $S_1={1}$\uff0c\u4e4b\u540e\u5982\u679c\u5bf9\u6bcf\u4e00\u5c42 $S_i$\uff0c\u90fd\u80fd\u627e\u5230\u6240\u6709\u4e0e $S_i$ \u6709\u8fb9\u76f8\u8fde\u7684\u70b9\uff0c\u90a3\u4e48\u5c31\u80fd\u6709\u4e00\u4e2a\u65b0\u7684\u70b9\u96c6 $S_{i+1}$\uff0c\u4e00\u76f4\u8fd9\u6837\u4e0b\u53bb\u5c31\u80fd\u5efa\u8d77\u4e00\u68f5\u751f\u6210\u6811\uff0c\u5b9e\u73b0\u5bf9\u56fe\u7684\u5206\u5c42\u3002\n\n\u90a3\u4e48\u73b0\u5728\u5c31\u9700\u8981\u5904\u7406\u82e5\u5e72\u4e2a\u8fd9\u6837\u7684\u5b50\u95ee\u9898\uff1a\u6709\u70b9\u96c6 $S,T$\uff0c\u8981\u6c42\u5728 $T$ \u4e2d\u627e\u5230\u6240\u6709\u4e0e $S$ \u6709\u8fb9\u76f8\u8fde\u7684\u70b9\u3002\n\n\u8003\u8651\u5206\u6cbb\uff0c\u5bf9\u70b9\u96c6 $T$ \uff0c\u53ef\u4ee5\u628a\u6240\u6709\u70b9\u90fd\u5b58\u5728 `vector` \u4e2d\uff0c\u8fd9\u6837\u6bcf\u4e2a\u533a\u95f4\u5c31\u5bf9\u5e94\u7740 $T$ \u4e2d\u7684\u4e00\u4e2a\u5b50\u96c6\u3002\u6211\u4eec\u628a $T$ \u5206\u6210\u4e24\u90e8\u5206 $T_L=[l,mid],T_R=(mid,r]$\uff0c\u5982\u679c\u6211\u4eec\u80fd\u5224\u65ad\u51fa $T_L,T_R$ \u4e0e $S$ \u4e4b\u95f4\u7684\u8fde\u8fb9\u5173\u7cfb\uff0c\u5bf9\u6709\u8fb9\u7684\u533a\u95f4\u7ee7\u7eed\u8be2\u95ee\u4e0b\u53bb\uff0c\u5c31\u80fd\u591f\u8fdb\u884c\u9012\u5f52\u6c42\u89e3\u6c42\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u3002\n\n\u73b0\u5728\u76f8\u5f53\u4e8e\u6211\u4eec\u9700\u8981\u5224\u65ad\u4e24\u4e2a\u70b9\u96c6 $S,t$ \u4e4b\u95f4\u662f\u5426\u6709\u8fde\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053\uff0c\u5f53\u8be2\u95ee\u7684\u70b9\u96c6\u4e3a $S\\cup t$ \u65f6\uff0c\u8fd4\u56de\u7684\u8fb9\u6570\u91cc\u5305\u542b\u4e86 $S$ \u5185\u90e8\u4ee5\u53ca $t$ \u5185\u90e8\u81ea\u8eab\u7684\u8fde\u8fb9\u3002\u6240\u4ee5\u6211\u4eec\u76f8\u5f53\u4e8e\u8981\u5224\u65ad $Ask(S\\cup t)-Ask(S)-Ask(t)$ \u7684\u503c\u3002\u800c\u7531\u4e8e\u5728\u6bcf\u4e00\u5c42\uff0c$S$ \u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u63d0\u524d\u5b58\u4e0b $Ask(S)$ \u7684\u503c\uff0c\u5c31\u53ef\u4ee5\u505a\u5230\u4e24\u6b21\u8be2\u95ee\u5b9e\u73b0\u5224\u65ad\u4e86\u3002\n\n\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u8fd9\u6837\u505a\u9700\u8981\u8017\u8d39\u7684\u8be2\u95ee\u6b21\u6570\u3002\u5176\u5b9e\u53ef\u4ee5\u7c7b\u6bd4\u7ebf\u6bb5\u6811\u7684\u5355\u70b9\u4fee\u6539\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\uff0c\u4e0e\u4e4b\u76f8\u5173\u7684\u533a\u95f4\u90fd\u53ea\u4f1a\u6709 $O(\\log n)$ \u4e2a\uff0c\u4e8e\u662f\u53ef\u4ee5\u5f97\u51fa\u603b\u7684\u8be2\u95ee\u6b21\u6570\u5c31\u662f $O(n\\log n)$ \u7684\u3002\n\n\u73b0\u5728\u6211\u4eec\u6c42\u51fa\u4e86\u6bcf\u4e00\u5c42\u6709\u54ea\u4e9b\u70b9\uff0c\u63a5\u4e0b\u53bb\u5c31\u53ef\u4ee5\u8fdb\u884c\u5224\u65ad\u3002\u53ea\u9700\u8981\u628a\u5947\u6570\u5c42\u548c\u5076\u6570\u5c42\u5206\u522b\u653e\u5230\u4e00\u8d77\uff0c\u5224\u65ad\u5185\u90e8\u662f\u5426\u6709\u8fde\u8fb9\u5373\u53ef\u3002\u90a3\u4e48\u662f\u4e8c\u5206\u56fe\u7684\u60c5\u51b5\u975e\u5e38\u597d\u5f04\uff0c\u76f4\u63a5\u8f93\u51fa\u5c31\u597d\uff0c\u4e0d\u662f\u4e8c\u5206\u56fe\u7684\u60c5\u51b5\u5c31\u4e0d\u662f\u5f88\u597d\u641e\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5947\u73af\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u51fa\u73b0\u77db\u76fe\u662f\u56e0\u4e3a\u5947\u6570\u5c42\uff08\u6216\u5076\u6570\u5c42\uff09\u5185\u90e8\u6709\u8fb9\u76f8\u8fde\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u80fd\u591f\u627e\u5230\u8fd9\u6761\u8fb9 $(x,y)$\uff0c\u5e76\u627e\u5230 $x$ \u4e0e $y$ \u5230\u8fd9\u68f5\u751f\u6210\u6811\u4e0a $\\operatorname{LCA}(x,y)$ \u7684\u8def\u5f84\uff0c\u5c31\u76f8\u5f53\u4e8e\u627e\u5230\u4e86\u4e00\u4e2a\u5947\u73af\u3002\n\n\u90a3\u4e48\u8fd9\u91cc\u5c31\u9762\u4e34\u7740\u4e24\u4e2a\u95ee\u9898\uff1a\n\n- \u600e\u4e48\u627e\u5230 $(x,y)$\uff1b\n- \u600e\u4e48\u627e\u5230 $\\operatorname{LCA}(x,y)$\uff0c\u6216\u8005\u600e\u4e48\u627e\u4e00\u4e2a\u70b9 $x$ \u5728\u751f\u6210\u6811\u4e0a\u7684\u7236\u4eb2\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u96c6\u5408\u5185\u90e8\u7684\u70b9 $i$\uff0c\u5e76\u5224\u65ad $i$ \u4e0e\u96c6\u5408\u5185\u5176\u4ed6\u70b9\u662f\u5426\u6709\u8fde\u8fb9\u627e\u5230\u5176\u4e2d\u7684\u4e00\u4e2a\u7aef\u70b9 $x$\u3002\u627e\u5230 $x$ \u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u5269\u4e0b\u7684\u96c6\u5408\u4e2d\u627e\u5230\u4e00\u4e2a\u4e0e $x$ \u76f8\u90bb\u7684\u70b9\u5373\u53ef\u3002\n\n\u800c\u5173\u4e8e\u627e $x$ \u5728\u751f\u6210\u6811\u4e0a\u7684\u7236\u4eb2\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5206\u5c42\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u5c42\u6570 $v_x $\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5728 $v_x-1$ \u5c42\u7684\u4e00\u4e2a\u70b9\u4e0e $x$ \u76f8\u90bb\u5373\u53ef\u3002\u5982\u679c\u80fd\u5b9e\u73b0\u8fd9\u4e00\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u4e00\u6b65\u6b65\u5f80\u4e0a\u8df3\u66b4\u529b\u627e\u5230\u4e24\u4e2a\u70b9\u7684 $\\operatorname{LCA}$\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e24\u4e2a\u95ee\u9898\u6700\u7ec8\u90fd\u9700\u8981\u6211\u4eec\u5904\u7406\u4e00\u4e2a\u64cd\u4f5c\uff1a\u7ed9\u5b9a\u96c6\u5408 $T$ \u4e0e\u70b9 $x$\uff0c\u627e\u5230 $T$ \u4e2d\u4efb\u610f\u4e00\u4e2a\u4e0e $x$ \u6709\u8fb9\u76f8\u8fde\u7684\u70b9\u3002\u53ef\u4ee5\u5957\u7528\u4e4b\u524d\u7684\u505a\u6cd5\u5206\u6cbb\uff0c\u4f46\u662f\u56e0\u4e3a\u8fd9\u91cc\u53ea\u9700\u8981\u627e\u5230\u4efb\u610f\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\uff0c\u4e8c\u5206\u67e5\u627e\u5c31\u8db3\u591f\u4e86\uff0c\u8fd9\u4e00\u90e8\u5206\u6240\u9700\u8981\u7684\u8be2\u95ee\u6b21\u6570\u4e5f\u662f $O(n\\log n)$ \u7684\u3002\n\n\u4e8e\u662f\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u64cd\u4f5c\u90fd\u9700\u8981\u8017\u8d39\u4e24\u4e2a\u8be2\u95ee\u6b21\u6570\uff0c\u5927\u6982\u9700\u8981\u8be2\u95ee $4n\\log n$ \u6b21\uff0c\u6b63\u597d\u5361\u5728 $20000$ \u4ee5\u5185\uff0c\u6700\u540e\u672c\u4eba\u4ee3\u7801\u7684\u6700\u591a\u8be2\u95ee\u6b21\u6570\u4e3a $16675$\uff0c\u8fd8\u662f\u6bd4\u8f83\u5145\u88d5\u7684\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 666\nint n,cnt,v[N],t;\nvector<int>d,s,tmp,O,E,f[N];\nint Ask(vector<int>D)//\u8be2\u95ee \n{\n\tif(D.size()<2)return 0;//\u70b9\u96c6\u5927\u5c0f\u4e0d\u8d85\u8fc72\u65f6\uff0c\u53ef\u4ee5\u4e0d\u7528\u8be2\u95ee \n\tprintf(\"? %d\\n\",(int)D.size());\n\tfor(auto i:D)printf(\"%d \",i);\n\tprintf(\"\\n\");\n\tfflush(stdout);\n\tint res;\n\tscanf(\"%d\",&res);\n\treturn res;\n}\nint Count(int l,int r)//\u8ba1\u7b97S\u548c\u533a\u95f4[l,r]\u5185\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9\u6570 \n{\n\ttmp.clear();\n\tfor(int i=l;i<=r;i++)tmp.push_back(d[i]);\n\tint Self=Ask(tmp);//\u8ba1\u7b97[l,r]\u5185\u90e8\u8fb9\u6570 \n\tfor(auto i:s)tmp.push_back(i);\n\tint Sum=Ask(tmp);//\u8ba1\u7b97\u5e76\u96c6\u7684\u603b\u8fb9\u6570 \n\treturn Sum-Self-t;//t\u7684\u503c\u5728\u4e4b\u524d\u5df2\u7ecf\u63d0\u524d\u6c42\u8fc7\u4e86\uff0c\u662fS\u5185\u90e8\u7684\u8fb9\u6570 \n}\nvoid Find(int l,int r)//\u5229\u7528\u5206\u6cbb\u7684\u601d\u60f3\u627e\u5230\u6bcf\u4e2a\u4e0eS\u6709\u8fde\u8fb9\u7684\u70b9 \n{\n\tif(l==r){\n\t\tif(Count(l,r)){//\u5355\u72ec\u5224\u65add[l]\u4e0eS\u662f\u5426\u6709\u8fde\u8fb9 \n\t\t\tv[d[l]]=cnt;//v[i]\u8868\u793ai\u53f7\u7ed3\u70b9\u5728\u7b2c\u51e0\u5c42 \n\t\t\tf[cnt].push_back(d[l]);//\u628a\u6bcf\u4e00\u5c42\u7684\u7ed3\u679c\u5b58\u4e0b\u6765\uff0c\u540e\u9762\u627e\u7236\u4eb2\u8981\u7528 \n\t\t}\n\t\treturn;\n\t}\n\tint mid=l+r>>1;//\u8fd9\u91cc\u7684\u64cd\u4f5c\u548c\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\u7c7b\u4f3c \n\tif(Count(l,mid))Find(l,mid);\n\tif(Count(mid+1,r))Find(mid+1,r);\n}\nint Find2()//\u5df2\u77e5\u70b9x\u4e0ed\u5185\u7684\u70b9\u6709\u8fde\u8fb9\uff0c\u4e8c\u5206\u627e\u51fa\u4e00\u4e2a\u4e0ex\u6709\u8fde\u8fb9\u7684\u70b9 \n{\n\tint l=0,r=d.size()-1;\n\twhile(l<r){\n\t\tint mid=l+r>>1;\n\t\tif(Count(l,mid))r=mid;\n\t\telse l=mid+1;\n\t}\n\treturn d[l];\n}\nint getf(int x)//\u5bf9\u4e8e\u70b9x\uff0c\u5728\u6811\u4e0a\u7684\u7236\u4eb2\u4e00\u5b9a\u5728v[x]-1\u8fd9\u4e00\u5c42 \n{\n\tt=0;\n\td=f[v[x]-1];\n\ts.clear();\n\ts.push_back(x);\n\treturn Find2();\n}\nvoid rua(vector<int>D)//\u627e\u5947\u73af \n{\n\tint m=D.size(),x,y;\n\tfor(int i=0;i<m;i++){//\u901a\u8fc7\u679a\u4e3e\u627e\u5230\u4e00\u4e2a\u4e0e\u5176\u4ed6\u70b9\u6709\u8fde\u8fb9\u7684x \n\t\ttmp.clear();\n\t\tfor(int j=0;j<m;j++)\n\t\t\tif(j!=i)tmp.push_back(D[j]);\n\t\tif(Ask(tmp)<t){\n\t\t\tx=D[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tt=0;\n\td=tmp;\n\ts.clear();\n\ts.push_back(x);\n\ty=Find2();//\u627e\u5230\u4e00\u4e2a\u4e0ex\u6709\u8fde\u8fb9\u7684y \n\tvector<int>ansx,ansy;//\u5206\u522b\u5b58\u50a8x,y\u5230\u5176\u7956\u5148\u7684\u8def\u5f84\uff0c\u76f4\u63a5\u66b4\u529b\u627eLCA \n\tansx.push_back(x);\n\tansy.push_back(y);\n\twhile(v[x]<v[y]){\n\t\tx=getf(x);\n\t\tansx.push_back(x);\n\t}\n\twhile(v[y]<v[x]){\n\t\ty=getf(y);\n\t\tansy.push_back(y);\n\t}\n\twhile(x!=y){\n\t\tx=getf(x);\n\t\ty=getf(y);\n\t\tansx.push_back(x);\n\t\tansy.push_back(y);\n\t}\n\tprintf(\"N %d\\n\",ansx.size()+ansy.size()-1);\n\tfor(auto i:ansx)printf(\"%d \",i);\n\tansy.pop_back();\n\treverse(ansy.begin(),ansy.end());//\u56e0\u4e3a\u4e4b\u524d\u8f93\u51fa\u7684\u662fx\u5230LCA\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u8981\u7ffb\u8f6c \n\tfor(auto i:ansy)printf(\"%d \",i);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tv[1]=++cnt;\n\ts.push_back(1);\n\tf[1].push_back(1);\n\tfor(int i=2;i<=n;i++)d.push_back(i);\n\twhile(!d.empty()){\n\t\tcnt++;\n\t\tt=Ask(s);//\u63d0\u524d\u8ba1\u7b97S\u5185\u90e8\u7684\u8fde\u8fb9\uff0c\u51cf\u5c11\u8be2\u95ee\u6b21\u6570 \n\t\tFind(0,d.size()-1);\n\t\td.clear(),s.clear();\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(!v[i])d.push_back(i); //\u6240\u6709\u8fd8\u6ca1\u8bbf\u95ee\u8fc7\u7684\u70b9\u4f5c\u4e3a\u96c6\u5408T\n\t\t\tif(v[i]==cnt)s.push_back(i);//\u628a\u5f53\u524d\u5c42\u7684\u70b9\u4f5c\u4e3a\u65b0\u7684S \n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)//\u5947\u5076\u5206\u522b\u5b58\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u5947\u73af \n\t\tif(v[i]&1)O.push_back(i);\n\t\telse E.push_back(i);\n\tt=Ask(O);\n\tif(t){\n\t\trua(O);\n\t\treturn 0;\n\t}\n\tt=Ask(E);\n\tif(t){\n\t\trua(E);\n\t\treturn 0;\n\t}\n\tprintf(\"Y %d\\n\",(int)O.size());\n\tfor(auto i:O)printf(\"%d \",i);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1658581273,
        "uid": 4672,
        "name": "DeaphetS",
        "ccfLevel": 3,
        "title": "Codeforces 1033E. Hidden Bipartite Graph"
    },
    {
        "content": "### P.S.  \n\u534a\u4e2a\u4e0a\u5348\u548c\u534a\u4e2a\u4e0b\u5348\u88ab\u8fd9\u9898\u6298\u78e8\u5149\u5149\u4e86/ll /ll /ll  \n\u672c\u6587\u5171\u51fa\u73b0\u4e86 10 \u6b21 **binary search** /tuu  \n\u8fd9\u4e2a\u505a\u6cd5\u53ef\u80fd\u6bd4\u8f83\u83dc\uff0c\u6700\u5927\u7684\u70b9\u7528\u4e86 **18729** \u4e2a\u8be2\u95ee\u3002  \n![](https://z3.ax1x.com/2021/10/27/5HuiHx.png \"\u6c42\u8d5e /kel --xtw\")  \n\n### Description.\n\u4ea4\u4e92\uff0c\u6709\u5f20 $n(n\\le 600)$ \u7684\u8054\u901a\u56fe\uff0c\u6bcf\u6b21\u4f60\u7ed9\u4e00\u4e2a\u70b9\u96c6\uff0c\u4ea4\u4e92\u5e93\u8fd4\u56de\u5bfc\u51fa\u5b50\u56fe\u8fb9\u6570\u3002  \n\u5728 $20000$ \u6b21\u5185\u5224\u65ad\u56fe\u662f\u5426\u662f\u4e8c\u5206\u56fe\uff0c\u5982\u679c\u662f\u5c31\u8f93\u51fa\u4e00\u4fa7\u7684\u6240\u6709\u70b9\uff0c\u5426\u5219\u5c31\u8f93\u51fa\u4efb\u610f\u4e00\u4e2a\u5947\u73af\u3002  \n\n### Solution.\n**Stop learning useless algorithms, go and solve some problems, learn how to use binary search.**  \n\u8fd9\u9898\u57fa\u672c\u4ece\u4e0a\u5230\u4e0b\u6709\u65e0\u6570\u4e2a **binary search**\u3002  \n\n\u6316\u4e00\u4e9b\u8be2\u95ee\u65b9\u5f0f\n1. $\\text{qry}(S\\cup\\{x\\})-\\text{qry}(S)$ \u53ef\u4ee5\u8be2\u95ee\u51fa $x$ \u5230 $S$ \u7684\u8fb9\u6570\u3002  \n2. $\\text{qry}(S\\cup T)-\\text{qry}(S)-\\text{qry}(T)$ \u53ef\u4ee5\u8be2\u95ee\u51fa $S$ \u548c $T$ \u96c6\u5408\u4e4b\u95f4\u7684\u8fb9\u3002  \n\n\u9996\u5148\uff0c\u6211\u4eec\u8003\u8651\u5047\u8bbe\u7ed9\u4e86\u4e00\u6761\u94fe\u600e\u4e48\u505a\u3002  \n\u627e\u5230\u4e00\u4e2a\u8d77\u70b9\uff0c\u6bcf\u6b21\u5f80\u4e24\u7aef\u6269\u5c55\uff0c\u603b\u5171\u9700\u8981\u6269\u5c55 $O(n)$ \u6b21\u3002  \n\u6bcf\u6b21\u76f8\u5f53\u4e8e\u8981\u4ece\u5269\u4e0b\u7684\u96c6\u5408\u4e2d\u627e\u5230\u4e00\u4e2a\u548c\u5f53\u524d\u7aef\u70b9\u76f8\u90bb\u7684\u70b9\u96c6\uff0c\u5e76\u6269\u5c55\u3002  \n\u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u7528 **binary search** \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002  \n\u6bcf\u6b21\u67e5\u5bfb\u524d\u7f00\u548c\u5f53\u524d\u7aef\u70b9\u6709\u51e0\u6761\u8fde\u8fb9\uff0c\u5177\u6709\u5355\u8c03\u6027\uff0c\u53ef\u4ee5 **binary search**\u3002  \n\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\n\n**\u6ce8\uff1a\u8fd9\u4e00\u6bb5\u505a\u6cd5\u53ef\u80fd\u4e0d\u591f\u4f18\u79c0\uff0c\u4f46\u662f\u6700\u540e\u7684\u80fd AC \u7684\u505a\u6cd5\u662f\u57fa\u4e8e\u8fd9\u4e2a\u505a\u6cd5\u4f18\u5316\u7684**  \n\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u6269\u5c55\uff0c\u53ef\u4ee5\u628a **binary search** \u6269\u5c55\u6210\u5206\u6cbb\u3002  \n\u6211\u4eec\u5148\u628a\u5f53\u524d\u6240\u6709\u7684\u6ca1\u88ab\u6269\u5c55\u7684\u70b9\u62ff\u51fa\u6765\uff0c\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u3002  \n\u6211\u4eec\u6bcf\u6b21\u8be2\u95ee\uff0c\u53ef\u4ee5\u8be2\u95ee\u7684\u662f\u5f53\u524d\u6269\u5c55\u7684**\u70b9\u96c6**\u548c\u5e8f\u5217\u4e2d\u7684\u82e5\u5e72\u70b9\u6709\u65e0\u8fde\u8fb9\u3002  \n\u53ef\u4ee5\u8003\u8651\u5206\u6cbb\uff0c\u5982\u679c\u5f53\u524d\u8fd9\u6bb5\u533a\u95f4\u6709\u5c31\u7ee7\u7eed\uff0c\u5426\u5219\u5c31\u6ca1\u6709\u3002  \n\u590d\u6742\u5ea6\u5206\u6790\u4e00\u4e0b\u53d1\u73b0\u662f $O(\\min(n,cnt\\times \\log n))$ \u7684\uff0c\u548c\u7ebf\u6bb5\u6811\u7684\u5355\u70b9\u67e5\u8be2\u6709\u70b9\u7c7b\u4f3c\u3002  \n\u5176\u4e2d $cnt$ \u8868\u793a\u7684\u662f\u548c\u5f53\u524d**\u70b9\u96c6**\u76f8\u90bb\u7684\u70b9\u6570\u91cf\u3002  \n\u6bcf\u6b21\u627e\u5230\u548c\u5f53\u524d\u76f8\u90bb\u7684\u70b9\u96c6\uff0c\u5224\u65ad\u5185\u90e8\u6709\u65e0\u8fde\u8fb9\uff0c\u7136\u540e\u7ee7\u7eed\u6269\u5c55\u3002  \n\u53d1\u73b0\u5747\u644a\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u53ea\u53ef\u80fd\u88ab\u6269\u5c55\u4e00\u6b21\uff0c\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\u3002  \n\n\u7136\u540e\u53d1\u73b0\u6709\u4e00\u4e2a\u91cd\u8981\u95ee\u9898\u6ca1\u6709\u8003\u8651\uff1a\u600e\u4e48\u8f93\u51fa\u5947\u73af\u3002  \n\u53ef\u4ee5\u8003\u8651\u5efa\u51fa\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u7136\u540e\u627e\u5230\u5947\u5076\u76f8\u540c\u5c42\u4e4b\u95f4\u7684\u8fde\u8fb9\u3002  \n\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5 **binary search**\uff0c\u5c31\u4e8c\u5206\u5e8f\u5217\u3002  \n\u5982\u679c\u5de6\u8fb9\u5185\u90e8\u6709\u8fb9\uff0c\u5c31\u4e8c\u5206\u5de6\u8fb9\uff0c\u5426\u5219\u5982\u679c\u53f3\u8fb9\u6709\u8fb9\uff0c\u5c31\u4e8c\u5206\u53f3\u8fb9\u3002  \n\u5426\u5219\u5fc5\u7136\u662f\u5de6\u53f3\u8fde\u7684\u8fb9\uff0c\u5c31 **binary search** \u627e\u5230\u5de6\u8fb9\u7684\u548c\u53f3\u8fb9\u6709\u8fb9\u7684\u70b9\uff0c\u7136\u540e **binary search** \u627e\u5230\u53f3\u8fb9\u7684\u548c\u5de6\u8fb9\u6709\u8fde\u8fb9\u7684\u70b9\u3002  \n\u7136\u540e\u8fd9\u4e24\u4e2a\u70b9\u80af\u5b9a\u6784\u6210\u4e00\u4e2a\u5947\u73af\uff0c\u76f4\u63a5\u8f93\u51fa\u751f\u6210\u6811\u4e0a\u4e24\u70b9\u94fe\u5c31\u884c\u4e86\u3002  \n\n\u7136\u540e\u751f\u6210\u6811\u600e\u4e48\u5efa\uff1a\u7c7b\u4f3c\u4e8e bfs \u4e00\u6837\u4e00\u5c42\u4e00\u5c42\u6269\u5c55\u3002  \n\u6bcf\u6269\u5c55\u5230\u4e0b\u4e00\u5c42\uff0c\u5728\u5206\u6cbb\u8fb9\u7f18\uff0c\u9700\u8981\u628a\u65b0\u70b9\u52a0\u5230\u5f53\u524d\u6811\u4e2d\u3002  \n\u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u7528 **binary search** \u627e\u5230\u4efb\u610f\u4e00\u4e2a\u548c\u5f53\u524d\u8fd9\u4e2a\u70b9\u6709\u8fde\u8fb9\u7684\u70b9\u3002  \n\u7136\u540e\u8ba9\u5f53\u524d\u65b0\u6269\u5c55\u5230\u7684\u70b9\u7684\u7236\u4eb2\u662f\u4ed6\u5c31\u884c\u4e86\u3002  \n\n\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c\u627e\u7236\u4eb2\u6bcf\u4e2a\u70b9\u8981\u627e\u4e00\u904d $O(n\\log n)$\u3002  \n\u5206\u6cbb\u603b\u590d\u6742\u5ea6\u662f $O(n\\log n)$\uff0c\u627e\u5947\u73af\u603b\u590d\u6742\u5ea6\u662f $O(\\log n)$\u3002  \n\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u5728 $600$ \u4e0b\u8dd1\u5728 $20000$ \u4ee5\u5185**\u5e94\u8be5**\u5f88\u7a33\u3002  \n\n[\u51b2\u4e86\u4e00\u53d1](https://codeforces.com/contest/1033/submission/133222400)  \n\u6b21\u6570\u8d85\u4e86\uff01\uff01\uff01\u89c2\u5bdf\u4e0a\u9762\u4ee3\u7801\u7684\u5206\u6cbb\u8fc7\u7a0b\u3002  \n\u53d1\u73b0\u6bcf\u6b21\u5206\u6cbb\u9700\u8981 $2.5$ \u7684\u5e38\u6570\uff0c\u6bcf\u4e2a\u70b9\u4e8c\u5206\u7236\u4eb2\u65f6\u5927\u6982\u9700\u8981 $2$ \u7684\u5e38\u6570\u3002  \n\u603b\u8be2\u95ee\u6b21\u6570\u4e0a\u9650\u662f $4.5n\\log n \\approx 24917$\u3002  \n\u6240\u4ee5\u4f60\u88ab\u5361\u5e38\u4e86\uff01\uff01\uff01\u672c\u5730\u6d4b\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0 $600$ \u7684\u73af\u5927\u6982\u9700\u8981 $21530$ \u6b21\u3002  \n\u800c\u4e14\u8fd9\u4e2a\u4e5f\u6ca1\u529e\u6cd5\u4f18\u5316\uff0c\u5e38\u6570\u5de8\u5927\uff0c\u77ac\u95f4\u7206\u6bd9\u3002  \n\n\u8003\u8651\u80fd\u4e0d\u80fd\u4ece\u65b9\u6cd5\u4e0a\u4f18\u5316\u8fd9\u4e2a\u4e1c\u897f\uff0c\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u672c\u8d28\u4e0a\u5c31\u662f\u5728\u505a `bfs`\u3002  \n\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u679a\u4e3e\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u7236\u4eb2\u8ba9\u4ed6\u6765\u6269\u5c55\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5728\u5e95\u5c42\u4e8c\u5206\u4e86\uff0c\u53bb\u6389\u4e86 $2$ \u7684\u5e38\u6570\u3002  \n\u540c\u65f6\u5206\u6cbb\u65f6\u4e5f\u4e0d\u9700\u8981\u67e5\u5bfb\u4e09\u6b21\u53ea\u9700\u8981\u67e5\u5bfb\u4e24\u6b21\u4e86\uff0c\u53c8\u51cf\u5c11\u4e86 $1$ \u7684\u5e38\u6570\u3002  \n\u8fd9\u6837\u5c31\u80fd\u8fc7\u4e86\u3002  \n\n### Coding.\n\u7a0d\u5fae\u5199\u4e86\u70b9\u6ce8\u91ca  \n[\u6709\u4e00\u5927\u5806\u8c03\u8bd5\u4fe1\u606f\u7684\u4ee3\u7801\uff08\u6709\u70b9\u7cbe\u6c61\uff0c\u5c31\u4e0d\u653e\u5728\u7248\u9762\u4e0a\u4e86](https://codeforces.com/contest/1033/submission/133225550)  \n\n```cpp\n//Coded by leapfrog on 2021.10.27 {{{\n//\u662f\u554a\uff0c\u4f60\u5c31\u662f\u90a3\u53ea\u9b3c\u4e86\uff0c\u6240\u4ee5\u88ab\u4f60\u78b0\u5230\u4ee5\u540e\uff0c\u5c31\u8f6e\u5230\u6211\u53d8\u6210\u9b3c\u4e86\n#include<bits/stdc++.h>\nusing namespace std;typedef long long ll;\ntemplate<typename T>inline void read(T &x)\n{\n\tx=0;char c=getchar(),f=0;\n\tfor(;c<48||c>57;c=getchar()) if(!(c^45)) f=1;\n\tfor(;c>=48&&c<=57;c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tf?x=-x:x;\n}\ntemplate<typename T,typename...L>inline void read(T &x,L&...l) {read(x),read(l...);}//}}}\nconst int N=605;typedef vector<int>vi;int n,fa[N],dep[N];char vs[N];\ninline int qry(vi q)\n{//\u8be2\u95ee\n\tint x=0;if((int)q.size()<2) return 0;\n\tprintf(\"? %d\\n\",(int)q.size());for(auto x:q) printf(\"%d \",x);\n\tputchar('\\n'),fflush(stdout);read(x);if(x==-1) exit(0);else return x;\n}\ninline vi split(const vi &a,int l,int r)\n{//\u53d6\u4e00\u4e2a vector \u7684\u533a\u95f4\n\tvi rs;for(int i=l;i<=r;i++) rs.push_back(a[i]);\n\treturn rs;\n}\ninline vi merge(const vi &a,const vi &b)\n{//\u5408\u5e76\u4e24\u4e2a vector\n\tvi r;if(a.size()>b.size()) {r=a;for(auto x:b) r.push_back(x);}\n\telse {r=b;for(auto x:a) r.push_back(x);}\n\treturn r;\n}\ninline vi solve(const vi &x,int ls,int l,int r)\n{//\u5206\u6cbb\n\tint md=(l+r)>>1,vl;vi rs,tmp;\n\tif(l==r) return rs.push_back(x[l]),dep[x[l]]=dep[fa[x[l]]=ls]+1,rs;\n\ttmp=split(x,l,md),vl=qry(tmp),tmp.push_back(ls),vl=qry(tmp)-vl;\n\tfor(int i=l;i<=md;i++) vl-=vs[x[i]];\n\tif(vl) rs=merge(rs,solve(x,ls,l,md));\n\ttmp=split(x,md+1,r),vl=qry(tmp),tmp.push_back(ls),vl=qry(tmp)-vl;\n\tfor(int i=md+1;i<=r;i++) vl-=vs[x[i]];\n\tif(vl) rs=merge(rs,solve(x,ls,md+1,r));\n\treturn rs;\n}\ninline int LCA(int x,int y)\n{//\u66b4\u8df3\u6c42 LCA\n\tif(dep[x]<dep[y]) swap(x,y);\n\twhile(dep[x]>dep[y]) x=fa[x];\n\twhile(x!=y) x=fa[x],y=fa[y];\n\treturn x;\n}\ninline void NOT(vi v)\n{//\u8f93\u51fa\u5947\u73af\n\tint l=0,r=v.size()-1,md=(l+r)>>1;\n\tfor(;l<=r;md=(l+r)>>1)\n\t{//\u7b2c\u4e00\u6b21\u4e8c\u5206\n\t\tif(qry(split(v,l,md))) r=md;\n\t\telse if(qry(split(v,md+1,r))) l=md+1;\n\t\telse break;\n\t}int rsl=-1,rsr=-1;//\u540e\u4e24\u6b21\u4e8c\u5206\u2193\u2193\n\tfor(int L=l,R=md,mid=(L+R)>>1;L<=R;mid=(L+R)>>1)\n\t\tif(qry(merge(split(v,l,mid),split(v,md+1,r)))) rsl=mid,R=mid-1;else L=mid+1;\n\tfor(int L=md+1,R=r,mid=(L+R)>>1;L<=R;mid=(L+R)>>1)\n\t\tif(qry(merge(split(v,rsl,rsl),split(v,L,mid)))) rsr=mid,R=mid-1;else L=mid+1;\n\tint x=v[rsl],y=v[rsr],lc=LCA(x,y);printf(\"N %d\\n\",dep[x]+dep[y]-dep[lc]*2+1);\n\tvector<int>tp;while(x!=lc) printf(\"%d \",x),x=fa[x];\n\tprintf(\"%d \",lc);while(y!=lc) tp.push_back(y),y=fa[y];\n\treverse(tp.begin(),tp.end());for(auto w:tp) printf(\"%d \",w);\n\tputchar('\\n'),fflush(stdout),exit(0);\n}\nint main()\n{\n\tqueue<int>q;read(n),vs[1]=1,q.push(1);\n\twhile(!q.empty())\n\t{//bfs\n\t\tint x=q.front();q.pop();vi nw;\n\t\tfor(int i=1;i<=n;i++) if(!vs[i]) nw.push_back(i);\n\t\tint qwq=qry(nw);nw.push_back(x),qwq=qry(nw)-qwq,nw.pop_back();if(!qwq) continue;\n\t\tvi tp=solve(nw,x,0,nw.size()-1);for(auto x:tp) q.push(x),vs[x]=1;\n\t}\n\tvi tp;for(int i=1;i<=n;i++) if(dep[i]&1) tp.push_back(i);\n\tif(qry(tp)) return NOT(tp),0;else tp.clear();\n\tfor(int i=1;i<=n;i++) if(!(dep[i]&1)) tp.push_back(i);\n\tif(qry(tp)) return NOT(tp),0;else printf(\"Y %d\\n\",(int)tp.size());\n\tfor(auto x:tp) printf(\"%d \",x);\n\treturn putchar('\\n'),fflush(stdout),0;\n}\n```",
        "postTime": 1635323305,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "CF1033E Hidden Bipartite Graph \u9898\u89e3"
    },
    {
        "content": "~~\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u4e45\u8fdc\u7684\u9898\u6ca1\u4eba\u505a~~\n\n\u6211\u4eec\u8003\u8651\u56fe\u662f\u5426\u662f\u4e8c\u5206\u56fe\uff0c\u5176\u5b9e\u53ef\u4ee5\u627e\u51fa\u4efb\u610f\u4e00\u68f5\u751f\u6210\u6811\uff0c\u7136\u540e\u628a\u5b83\u67d3\u8272\uff0c\u95ee\u4e00\u4e0b\u9ed1\u70b9\u96c6\u5408\u548c\u767d\u70b9\u96c6\u5408\u5185\u90e8\u662f\u5426\u6709\u8fb9\u5373\u53ef\u5224\u65ad\u3002\n\n\u6211\u4eec\u8003\u8651\u5f00\u59cb\u67091\u53f7\u70b9\uff0c\u968f\u540e\u5f80\u91cc\u4f9d\u6b21\u52a0\u4e00\u4e2a\u4e0d\u5728\u5f53\u524d\u8054\u901a\u5757\u7684\u70b9\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u8003\u8651\u4e8c\u5206\uff0c\u6211\u4eec\u9996\u5148\u8981\u786e\u5b9a\u4e00\u4e2a\u4e0e\u8054\u901a\u5757\u6709\u8fb9\u76f8\u8fde\u7684\u70b9\uff0c\u6211\u4eec\u5148\u8be2\u95ee\u8054\u901a\u5757\u5185\u90e8\u6709\u591a\u5c11\u8fb9\uff0c\u7136\u540e\u628a\u5916\u90e8\u70b9\u5e73\u5206\u6210\u4e24\u90e8\u5206\uff0c\u8be2\u95ee\u5176\u4e2d\u4e00\u90e8\u5206\u7684\u5185\u90e8\u8fb9\u6570\uff0c\u518d\u5c06\u8fd9\u4e00\u90e8\u5206\u4e0e\u73b0\u6709\u8054\u901a\u5757\u4e00\u8d77\u518d\u95ee\u4e00\u6b21\uff0c\u5982\u679c\u524d\u4e24\u8005\u7684\u548c\u7b49\u4e8e\u540e\u4e00\u4e2a\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u8054\u901a\u5757\u4e0e\u8be5\u96c6\u5408\u4e2d\u81f3\u5c11\u6709\u4e24\u70b9\u76f8\u8fde\uff0c\u6211\u4eec\u5c31\u7ee7\u7eed\u5bf9\u8fd9\u4e00\u90e8\u5206\u6267\u884c\u8be5\u8fc7\u7a0b\uff0c\u5426\u5219\u4e00\u5b9a\u6ca1\u6709\u8fb9\uff0c\u6211\u4eec\u5c31\u820d\u5f03\u8fd9\u4e00\u90e8\u5206\uff0c\u5bf9\u53e6\u4e00\u90e8\u5206\u7ee7\u7eed\u5904\u7406\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u70b9\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u8fd8\u8981\u786e\u5b9a\u5b83\u4e0e\u8054\u901a\u5757\u4e2d\u54ea\u4e00\u4e2a\u70b9\u6709\u8fb9\u76f8\u8fde\uff0c\u6211\u4eec\u7ee7\u7eed\u4e8c\u5206\uff0c\u628a\u8054\u901a\u5757\u5206\u6210\u4e24\u90e8\u5206\uff0c\u8be2\u95ee\u5176\u4e2d\u4e00\u90e8\u5206\u5185\u90e8\u7684\u8fb9\u6570\u4e0e\u52a0\u4e0a\u8be5\u70b9\u5185\u90e8\u7684\u8fb9\u6570\u662f\u5426\u76f8\u7b49\uff0c\u7531\u6b64\u5224\u65ad\u8be5\u70b9\u4e0e\u8fd9\u4e00\u90e8\u5206\u662f\u5426\u6709\u8fb9\u76f8\u8fde\uff0c\u6709\u5219\u5bf9\u8fd9\u4e00\u90e8\u5206\u7ee7\u7eed\u4e8c\u5206\uff0c\u6ca1\u6709\u5219\u5bf9\u53e6\u4e00\u90e8\u5206\u4e8c\u5206\uff0c\u56e0\u4e3a\u56fe\u662f\u8054\u901a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u80af\u5b9a\u80fd\u52a0\u5165\u4e00\u4e2a\u70b9\uff0c\u8be2\u95ee\u6b21\u6570\u5c31\u662fnlogn\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u786e\u5b9a\u539f\u56fe\u7684\u4e00\u68f5\u751f\u6210\u6811\uff0c\u5bf9\u4e8e\u4e8c\u5206\u56fe\u5c31\u5f88\u597d\u529e\u4e86\uff0c\u4f46\u975e\u4e8c\u5206\u56fe\u6211\u4eec\u8fd8\u8981\u5728\u540c\u8272\u70b9\u4e2d\u627e\u5230\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u968f\u673a\u4e00\u4e0b\uff0c\u6bcf\u4e2a\u70b9\u4ee51/2\u7684\u6982\u7387\u9009\u62e9\uff0c\u5982\u679c\u8be2\u95ee\u5f97\u5230\u9009\u62e9\u7684\u70b9\u4e4b\u95f4\u6709\u8fb9\u6216\u975e\u9009\u62e9\u7684\u70b9\u4e4b\u95f4\u6709\u8fb9\u5c31\u9009\u62e9\u8be5\u96c6\u5408\uff0c\u8fd9\u6837\u6bcf\u6b21\u6211\u4eec\u671f\u671b\u8be2\u95ee\u4e24\u6b21\u5373\u53ef\u7f29\u5c0f\u70b9\u96c6\uff0c\u5e76\u4e14\u671f\u671b\u7f29\u5c0f\u5230\u539f\u6765\u76841/2\uff0c\u671f\u671b\u8be2\u95ee\u6b21\u6570logn\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5728\u603b\u8be2\u95ee\u6b21\u6570nlogn\u6b21\u89e3\u51b3\u6b64\u9898\n\n```cpp\n#include<bits/stdc++.h>  \nusing namespace std;\ntypedef long long ll;\n#define ri register int\nint n,m,g[605][605],f[605],c[605],col[605],a[605],p,q,b[605],l,r,tmp[605],vis[605],pos,sta[605],top,ans[605],anss,i,j,k,query,ep[605];\nbool flag;\nint Find(int x)\n{\n\tif(f[x]==0)\n\t\treturn x;\n\treturn f[x]=Find(f[x]);\n}\nvoid uniot(int u,int v)\n{\n\tint x=Find(u),y=Find(v);\n\tif(x!=y)\n\t\tf[x]=y;\n}\nint Ask(int a[],int n)\n{\n\tquery++;\n\tif(n==0||n==1)\n\t\treturn 0;\n\tint i;\n\tprintf(\"? %d\\n\",n);\n\tfor(i=1;i<=n;i++)\n\t\tprintf(\"%d \",a[i]);\n\tprintf(\"\\n\");\n\tfflush(stdout);\n\tint ans;\n\tscanf(\"%d\",&ans);\n\treturn ans;\n}\nvoid dfs2(int i,int s)\n{\n\tint j;\n\tif(col[i]==-1)\n\t\tcol[i]=s;\n\telse\n\t\treturn;\n\tfor(j=1;j<=n;j++)\n\t\tif(g[i][j])\n\t\t\tdfs2(j,s^1);\n}\nvoid Find3(int a[],int n)\n{\n\tif(n==2)\n\t{\n\t\tg[a[1]][a[2]]=g[a[2]][a[1]]=1;\n\t\tcol[a[1]]=col[a[2]]=-1;\n\t\tuniot(a[1],a[2]);\n\t\treturn;\n\t}\n\tif(n<=4)\n\t{\n\t\tint i,j,t[3];\n\t\tfor(i=1;i<=n;i++)\n\t\t\tfor(j=i+1;j<=n;j++)\n\t\t\t{\n\t\t\t\tt[1]=a[i];\n\t\t\t\tt[2]=a[j];\n\t\t\t\tif(Ask(t,2))\n\t\t\t\t{\n\t\t\t\t\tg[t[1]][t[2]]=g[t[2]][t[1]]=1;\n\t\t\t\t\tcol[t[1]]=col[t[2]]=-1;\n\t\t\t\t\tuniot(t[1],t[2]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\treturn;\n\t}\n\tint i,j,p=0,t[605],e[605];\n\tfor(i=0;;i++)\n\t{\n\t\tp=0;\n\t\tfor(i=1;i<=n;i++)\n\t\t\te[i]=rand()%2;\n\t\tfor(j=1;j<=n;j++)\n\t\t\tif(e[j])\n\t\t\t\tt[++p]=a[j];\n\t\tif(p>=2&&Ask(t,p))\n\t\t{\n\t\t\tFind3(t,p);\n\t\t\treturn;\n\t\t}\n\t\tp=0;\n\t\tfor(j=1;j<=n;j++)\n\t\t\tif(!e[j])\n\t\t\t\tt[++p]=a[j];\n\t\tif(p>=2&&Ask(t,p))\n\t\t{\n\t\t\tFind3(t,p);\n\t\t\treturn;\n\t\t}\n\t}\n}\nvoid dfs3(int i,int fa)\n{\n\tint j;\n\tif(vis[i]==1)\n\t{\n\t\tfor(j=top;sta[j]!=i;j--)\n\t\t\tans[++anss]=sta[j];\n\t\tans[++anss]=i;\n\t\tprintf(\"N %d\\n\",anss);\n\t\tfor(i=1;i<=anss;i++)\n\t\t\tprintf(\"%d \",ans[i]);\n\t\tfflush(stdout);\n\t\texit(0);\n\t}\n\tvis[i]=1;\n\tsta[++top]=i;\n\tfor(j=1;j<=n;j++)\n\t\tif(g[i][j]&&j!=fa)\n\t\t\tdfs3(j,i);\n\ttop--;\n}\nint main()\n{\n\tsrand(time(0));\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<n;i++)\n\t{\n\t\tp=q=0;\n\t\tfor(j=1;j<=n;j++)\n\t\t\tif(Find(1)==Find(j))\n\t\t\t\ta[++p]=j;\n\t\t\telse\n\t\t\t\tb[++q]=j;\n\t\tint aa=Ask(a,p);\n\t\tl=1,r=q;\n\t\twhile(l<r)\n\t\t{\n\t\t\tint mid=(l+r)/2;\n\t\t\tfor(k=l;k<=mid;k++)\n\t\t\t\ttmp[k-l+1]=b[k];\n\t\t\tint ty=Ask(tmp,mid-l+1);\n\t\t\tfor(k=l;k<=mid;k++)\n\t\t\t\ttmp[k-l+1+p]=b[k];\n\t\t\tfor(k=1;k<=p;k++)\n\t\t\t\ttmp[k]=a[k];\n\t\t\tif(ty+aa!=Ask(tmp,p+mid-l+1))\n\t\t\t\tr=mid;\n\t\t\telse\n\t\t\t\tl=mid+1;\n\t\t}\n\t\tint s=b[l];\n\t\tl=1,r=p;\n\t\twhile(l<r)\n\t\t{\n\t\t\tint mid=(l+r)/2;\n\t\t\tfor(k=l;k<=mid;k++)\n\t\t\t\ttmp[k-l+1]=a[k];\n\t\t\tint ty=Ask(tmp,mid-l+1);\n\t\t\ttmp[mid-l+2]=s;\n\t\t\tif(Ask(tmp,mid-l+2)!=ty)\n\t\t\t\tr=mid;\n\t\t\telse\n\t\t\t\tl=mid+1;\n\t\t}\n\t\tuniot(s,a[l]);\n\t\tg[s][a[l]]=g[a[l]][s]=1;\n\t}\n\tmemset(col,-1,sizeof(col));\n\tdfs2(1,0);\n\tp=0;\n\tfor(i=1;i<=n;i++)\n\t\tif(col[i]==0)\n\t\t\ta[++p]=i;\n\tif(Ask(a,p))\n\t{\n\t\tFind3(a,p);\n\t\tdfs3(1,0);\n\t}\n\tp=0;\n\tfor(i=1;i<=n;i++)\n\t\tif(col[i]==1)\n\t\t\ta[++p]=i;\n\tif(Ask(a,p))\n\t{\n\t\tFind3(a,p);\n\t\tdfs3(1,0);\n\t}\n\tprintf(\"Y %d\\n\",p);\n\tfor(i=1;i<=p;i++)\n\t\tprintf(\"%d \",a[i]);\n\tfflush(stdout);\n}\n```\n",
        "postTime": 1566035990,
        "uid": 17974,
        "name": "\u2468_Cirno_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1033E \u3010Hidden Bipartite Graph\u3011"
    },
    {
        "content": "[\u9898\u610f](https://www.luogu.com.cn/paste/zja2tt3d)\n\n\u5148\u8003\u8651\u600e\u4e48\u5224\u65ad\u4e8c\u5206\u56fe\u3002\n\n\u53ef\u4ee5\u76f4\u63a5\u6784\u9020\u4e00\u68f5\u751f\u6210\u6811\uff0c\u7136\u540e\u5224\u65ad\u4e00\u4e0b\u5947\u6570\u5c42\u5185\u662f\u5426\u6709\u8fb9\uff0c\u5076\u6570\u5c42\u5185\u662f\u5426\u6709\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5728\u751f\u6210\u6811\u4e0a bfs\uff0c\u8bbe\u5f53\u524d bfs \u7684\u8282\u70b9\u662f $u$\uff0c\u8003\u8651\u5bf9\u4e8e\u5f53\u524d\u672a\u52a0\u5165\u751f\u6210\u6811\u4e2d\u7684\u70b9\uff0c\u6709\u54ea\u4e9b\u53ef\u4ee5\u6210\u4e3a $u$ \u7684\u513f\u5b50\u3002\n\n\u53ef\u4ee5\u5728\u672a\u52a0\u5165\u751f\u6210\u6811\u4e2d\u7684\u70b9\u91cc\u5206\u6cbb\uff0c\u5982\u679c $[l,r]$ \u4e0e $u$ \u6709\u8fb9\uff0c\u5c31\u5206\u6210 $[l,mid]$ \u548c $[mid+1,r]$\uff0c\u5426\u5219\u76f4\u63a5 return\u3002\u81f3\u4e8e\u5982\u4f55\u5224\u65ad\u6709\u8fb9\uff0c\u70b9\u96c6 $s_1$ \u548c\u70b9\u96c6 $s_2$ \u4e4b\u95f4\u7684\u8fb9\u6570\u53ef\u4ee5\u8868\u793a\u6210 $query(s_1 \\cup s_2)-query(s_1)-query(s_2)$\n\n\u6bdb\u4f30\u4f30\u4e00\u4e0b\uff0c\u4ea4\u4e92\u6b21\u6570\u5927\u6982\u662f $n\\log n$ \u7ea7\u522b\u7684\uff0c\u53ef\u4ee5\u8fc7\u3002\n\n\u90a3\u4e48\u8003\u8651\u5982\u4f55\u8f93\u51fa\u65b9\u6848\u3002\u5982\u679c\u662f\u4e8c\u5206\u56fe\u7684\u8bdd\uff0c\u76f4\u63a5\u8f93\u51fa\u5947\u6570\u5c42\u7684\u70b9\u5c31\u884c\u4e86\u3002\n\n\u5982\u679c\u4e0d\u662f\u4e8c\u5206\u56fe\uff0c\u5c31\u9700\u8981\u5224\u65ad\u5947\u6570\u5c42/\u5076\u6570\u5c42\u91cc\u8fde\u7740\u7684\u90a3\u6761\u8fb9\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u79cd\u6bd4\u8f83\u597d\u5199\u7684\u505a\u6cd5\u3002\n\n\u5982\u679c\u76f4\u63a5\u50cf\u4e0a\u9762\u4e00\u6837\u5bf9\u7740\u70b9\u96c6\u5206\u6cbb\uff0c\u6709\u53ef\u80fd\u5206\u51fa\u7684\u4e24\u4e2a\u70b9\u96c6\u91cc\u90fd\u6ca1\u6709\u8fde\u7740\u7684\u8fb9\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u53ef\u4ee5\u76f4\u63a5\u5bf9\u70b9\u96c6\u968f\u673a\u5206\u6cbb\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u70b9\u96c6\u6709\u8fde\u7740\u7684\u8fb9\uff0c\u671f\u671b\u6b21\u6570\u5927\u6982\u662f $2$\u3002\n\n\u8fd9\u6837\u5c31\u4ee5 $2$ \u7684\u4ee3\u4ef7\u5c06\u70b9\u96c6\u7f29\u5c0f\u4e00\u534a\uff08\u56e0\u4e3a\u53ea\u9700\u8981\u627e\u5230\u4e00\u6761\u8fde\u7740\u7684\u8fb9\uff09\uff0c\u671f\u671b\u64cd\u4f5c\u6b21\u6570\u662f$n\\log n$\uff0c\u53ef\u4ee5\u8fc7\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=605;\nint query(vector<int> vec){\n    int n=vec.size();\n    if(n<=1) return 0;\n    cout<<\"? \"<<n<<endl;\n    for(int i=0;i<n;++i)\n        cout<<vec[i]<<((i==n)?\"\\n\":\" \");\n    fflush(stdout);\n    int ans;\n    cin>>ans;\n    return ans;\n}\nqueue<int> q;\nint vis[N],dep[N],fa[N];\nvoid add(int u,int f){\n    if(vis[u]) return;\n    vis[u]=1; dep[u]=dep[f]+1; fa[u]=f;\n    q.push(u);\n}\nvoid calc(int u,vector<int> v){\n    if(v.size()==0) return;\n    int m1=query(v),m2;\n    v.push_back(u); m2=query(v);\n    if(m2==m1) return;\n    v.pop_back();\n    if(v.size()==1) return add(v.front(),u);\n    int mid=v.size()/2;\n    vector<int> v1,v2;\n    for(int i=0;i<mid;++i) v1.push_back(v[i]);\n    for(int i=mid;i<v.size();++i) v2.push_back(v[i]);\n    calc(u,v1),calc(u,v2);\n}\nvoid find(int u,int v){\n    int lca=0,a=u,b=v;\n    while(a^b){\n        if(dep[a]<dep[b]) swap(a,b);\n        a=fa[a];\n    }\n    lca=a;\n    vector<int> ans;\n    for(int i=u;i;i=fa[i]){\n        ans.push_back(i);\n        if(i==lca) break;\n    }\n    reverse(ans.begin(),ans.end());\n    for(int i=v;i^lca;i=fa[i])\n        ans.push_back(i);\n    cout<<\"N \"<<ans.size()<<endl;\n    for(int v:ans) cout<<v<<\" \";\n    exit(0);\n}\nvoid solve(vector<int> v){\n    if(v.size()<=1) return;\n    if(v.size()==2) return find(v.front(),v.back());\n    while(1){\n        random_shuffle(v.begin(),v.end());\n        int mid=(v.size()+1)/2;\n        vector<int> v1=v; v1.resize(mid);\n        if(query(v1)) return solve(v1);\n    }\n}\nsigned main(){\n    ios::sync_with_stdio(false);\n    srand(time(0));\n    int n;\n    cin>>n;\n    add(1,0);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        vector<int> v;\n        for(int i=1;i<=n;++i)\n            if(!vis[i]) v.push_back(i);\n        calc(u,v);\n    }\n    vector<int> vec[2];\n    for(int i=1;i<=n;++i)\n        vec[dep[i]&1].push_back(i);\n    if(query(vec[0])) solve(vec[0]);\n    else if(query(vec[1])) solve(vec[1]);\n    cout<<\"Y \"<<vec[0].size()<<endl;\n    for(auto v:vec[0]) cout<<v<<\" \";\n    return 0;\n}\n```\n",
        "postTime": 1615508565,
        "uid": 344016,
        "name": "wurzang",
        "ccfLevel": 7,
        "title": "CF1033E \u9898\u89e3"
    },
    {
        "content": "### [\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/CF1033E \"\u9898\u76ee\u94fe\u63a5\")\r\n**[my cnblogs](https://www.cnblogs.com/Oier-GGG/p/16496384.html)**\r\n\r\n\u8fd9\u9898\u770b\u4e0a\u53bb\u4e00\u8138\u4e0d\u53ef\u505a\uff0c\u5bf9\uff0c\u6211\u770b\u4ec0\u4e48\u9898\u90fd\u4e0d\u53ef\u505a\u3002\u3002\u3002\r\n\r\n\u7136\u540e\u7784\u4e00\u773c\u9898\u89e3\uff0c\u53d1\u73b0\u4e00\u4e2a\u5c0f $\\tt Trick$ \uff1a\r\n\r\n**\u5224\u5b9a\u4e8c\u5206\u56fe\u53ef\u4ee5\u5148\u62c9\u51fa\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u5bfe\u751f\u6210\u6811\u8fdb\u884c\u67d3\u8272\u7136\u540e\u770b\u76f8\u540c\u989c\u8272\u5185\u6709\u6ca1\u6709\u8fde\u8fb9\u3002**\r\n\r\n\u6240\u4ee5\u73b0\u5728\u7684\u7b2c\u4e00\u6b65\u662f\u62c9\u51fa\u4e00\u4e2a\u751f\u6210\u6811\u3002\r\n\r\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u628a\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u4ea4\u4e92\u51fd\u6570\u5199\u51fa\u6765\uff0c\u6211\u7528\u4e00\u4e2a $\\tt vector$ \u8bb0\u5f55\u67e5\u8be2\u7684\u70b9\u96c6\u3002\r\n\r\n\u540c\u65f6\u5728\u6211\u81ea\u5df1\u6d4b\u8bd5\u65f6\u53d1\u73b0\u53ef\u80fd\u4f1a\u8be2\u95ee\u91cd\u590d\u7684\u70b9\u96c6\uff0c\u6240\u4ee5\u7528\u4e00\u4e2a $\\tt map$ \u6765\u8bb0\u5f55\u5df2\u7ecf\u67e5\u8fc7\u7684\u7b54\u6848\u3002\r\n\r\n```cpp\r\ninline int ask(std::vector<int> chose) {\r\n  if (chose.size() == 1) return 0;\r\n  std::sort(chose.begin(), chose.end());\r\n  if (ma[chose]) return ma[chose];\r\n  printf(\"? \");\r\n  write(chose.size()), Enter;\r\n  for (int t : chose) write(t), quad; Enter;\r\n  fflush(stdout);\r\n  int ret; read(ret); \r\n  ma[chose] = ret; return ret;\r\n}\r\n```\r\n\r\n\u63a5\u4e0b\u6765\u5c31\u6309\u7167\u751f\u6210\u6811\u7684\u89d2\u5ea6\u8fdb\u884c\u601d\u8003\u3002\r\n\r\n\u9996\u5148\u6211\u4eec\u9700\u8981\u5e76\u67e5\u96c6\uff0c\u8fd9\u4e2a\u975e\u5e38\u7b80\u5355\u4e0d\u5728\u7d2f\u8ff0\uff0c\u7136\u540e\u6211\u4eec\u4f1a\u53d1\u73b0\u8981\u8fdb\u884c $n-1$ \u6b21\u8fde\u8fb9\u64cd\u4f5c\u3002\r\n\r\n\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u8fb9\u64cd\u4f5c\uff0c\u6211\u4eec\u90fd\u8981\u627e\u5230\u4e00\u4e2a\u548c\u6839\u8282\u70b9\u6240\u5728\u96c6\u5408\u6709\u8fb9\u7684\u70b9 $p$ \u7136\u540e\u8fde\u8fb9\u3002\r\n\r\n\u90a3\u4e48\u600e\u4e48\u627e\u5230\u8fd9\u6837\u7684\u70b9 $p$ \u5462\uff1f\u8fd9\u91cc\u6709\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff1a\r\n\r\n> \u5bf9\u4e8e\u70b9\u96c6 $A$ \u548c $B$ \uff0c\u5982\u679c $A$ \u548c $B$ \u4e2d\u7684\u70b9\u6709\u8fb9\u76f8\u8fde\uff0c\u90a3\u4e48\u6ee1\u8db3 $ask(A)+ask(B)<ask(A\\cup B)$\r\n\r\n\r\n\u8fd0\u7528\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u627e\u5230\u4e0a\u6587\u6240\u8bb2\u7684 $p$ \u3002\r\n\r\n\r\n\u6211\u4eec\u4ee4\u6839\u8282\u70b9\u6240\u5728\u7684\u70b9\u96c6\u4e3a $A$ \uff0c\u5176\u4ed6\u7684\u70b9\u6784\u6210\u7684\u70b9\u96c6\u4e3a $B$ \u3002\r\n\r\n\u540c\u65f6\u6211\u4eec\u4ee4\u4e0a\u6587\u7ed3\u8bba\u4e2d\u7684\u67e5\u8be2\u65b9\u5f0f\u4e3a $check(A,B)$ \uff0c\u53ca\u8c03\u7528 $check(A,B)$ \u5c31\u53ef\u4ee5\u77e5\u9053\u662f\u5426\u6709\u8fb9\u3002\r\n\r\n\u56e0\u4e3a\u8be2\u95ee\u6b21\u6570\u63a7\u5236\u8f83\u4e3a\u4e25\u683c\uff0c\u6211\u4eec\u8003\u8651 $O(n\\log n)$ \u7684\u8f83\u5927\u5e38\u6570\u505a\u6cd5\u3002\r\n\r\n\u76f4\u63a5\u80fd\u591f\u60f3\u5230\u7684\u662f\u4e8c\u5206\u505a\u6cd5\uff1a\uff08\u5047\u8bbe $B$ \u96c6\u5408\u7684\u5927\u5c0f\u4e3a $L$\uff09\r\n\r\n* \u6211\u4eec\u628a $B$ \u6309\u7167\u5927\u5c0f\u5e73\u5747\u5206\u6210\u4e24\u4e2a\u96c6\u5408 $B_1$ \u548c $B_2$ \u3002\r\n\r\n* \u5206\u522b\u67e5\u8be2 $check(B_1,A)$ \u548c $check(B_2,A)$ \uff0c\u5982\u679c\u4e00\u4e2a\u4e3a\u771f\u5219\u53d6\u4e3a\u771f\u7684\uff0c\u5426\u5219\u4efb\u610f\u53d6\u4e00\u4e2a\u3002\r\n\r\n* \u4e0d\u96be\u53d1\u73b0\uff0c\u6700\u540e\u96c6\u5408 $B$ \u53ea\u4f1a\u5269\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e2a\u8282\u70b9\u5c31\u662f $p$ \u3002\u590d\u6742\u5ea6 $O(\\log n)$ \u3002\r\n\r\n\u627e\u5230\u4e86 $p$ \uff0c\u6211\u4eec\u8fd8\u8981\u77e5\u9053 $p$ \u548c\u6839\u8282\u70b9\u96c6\u5408\u4e2d\u7684\u54ea\u4e00\u4e2a\u70b9\u6709\u8fb9\uff0c\u6309\u7167\u76f8\u4f3c\u7684\u65b9\u6cd5\u5373\u53ef\u3002\r\n\r\n\u53ea\u4e0d\u8fc7\u6b64\u6b21\u67e5\u8be2\u7684 $check$ \u64cd\u4f5c\u66f4\u4e3a\u7b80\u6d01\uff0c\u590d\u6742\u5ea6\u8fd8\u662f $O(\\log n)$ \u3002\r\n\r\n\u91cd\u590d $n-1$ \u6b21\u4e0a\u8ff0\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u63a5\u4e0b\u6765\u5bf9\u6811\u67d3\u8272\u975e\u5e38\u7b80\u5355\u3002\r\n\r\n\u6211\u4eec\u4ee4\u67d3\u4e3a\u767d\u8272\u548c\u9ed1\u8272\u7684\u70b9\u96c6\u5206\u522b\u4e3a $white$ \u548c $black$ \uff0c\u8fdb\u884c\u4e00\u6b21 $check(white,black)$ \u5373\u53ef\u5224\u65ad\u4e8c\u5206\u56fe\u3002\r\n\r\n\u5982\u679c\u662f\u4e8c\u5206\u56fe\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u975e\u5e38\u7b80\u5355\uff0c\u73b0\u5728\u6765\u8ba8\u8bba\u975e\u4e8c\u5206\u56fe\u7684\u60c5\u51b5\u3002\r\n\r\n\u6211\u7684\u505a\u6cd5\u662f\u968f\u673a\u5316\uff0c\u6bcf\u4e00\u6b21\u5bf9\u96c6\u5408\u8fdb\u884c\u4e00\u6b21 $\\tt random\\_shuffle$ \uff0c\u7136\u540e\u53d6 $\\frac{L}{2}$ \u3002\r\n\r\n\u8fdb\u884c\u67e5\u8be2\uff0c\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\u8ba9\u70b9\u96c6\u5927\u5c0f\u76f4\u63a5\u51cf\u534a\uff0c~~\u4e0d\u77e5\u9053\u5bf9\u4e0d\u5bf9\uff0c\u53cd\u6b63\u6211\u8fc7\u4e86~~\r\n\r\n\u6240\u4ee5\u8fd9\u6837\u4e0b\u6765\uff0c\u590d\u6742\u5ea6\u7ea6\u4e3a $O(n\\log n)$ \u5e26\u4e0a $3\\sim 5$ \u500d\u5e38\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\r\n\r\n\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\uff1a\r\n```cpp\r\n#include <set>\r\n#include <map>\r\n#include <cmath>\r\n#include <queue>\r\n#include <string>\r\n#include <cstdio>\r\n#include <cctype>\r\n#include <vector>\r\n#include <cstring>\r\n#include <iostream>\r\n#include <algorithm>\r\n#include <unordered_map>\r\n\r\n#define File(a) freopen(a\".in\", \"r\", stdin), freopen(a\".out\", \"w\", stdout)\r\n#define quad putchar(' ')\r\n#define Enter putchar('\\n')\r\n\r\nusing std::abs;\r\nusing std::pair;\r\nusing std::string;\r\nusing std::make_pair;\r\n\r\n// #define int long long\r\n\r\ntemplate <class T> void read(T &a);\r\ntemplate <class T> void write(T x);\r\n\r\ntemplate <class T, class ...rest> void read(T &a, rest &...x);\r\ntemplate <class T, class ...rest> void write(T x, rest ...a);\r\n\r\nconst int N = 1005;\r\n\r\nint n, root_edge, tot, ok[N], edgetot, col[N];\r\nint deep[N], fa[N][15], sta[N], top;\r\nstd::vector <int> now, rt, white, black;\r\nstd::vector <int> dis[N];\r\n\r\nstd::map <std::vector<int>, int> ma;\r\n\r\nstruct Edge {\r\n  int x, y;\r\n  Edge (int _x = 0, int _y = 0) {x = _x; y = _y;}\r\n} edge[N * N];\r\nnamespace UFST {\r\nint fa[N], siz[N];\r\ninline int find(int);\r\ninline void rebuild(int);\r\ninline void merge(int, int);\r\n}\r\n\r\ninline int ask(std::vector<int> chose) {\r\n  if (chose.size() == 1) return 0;\r\n  std::sort(chose.begin(), chose.end());\r\n  if (ma[chose]) return ma[chose];\r\n  printf(\"? \");\r\n  write(chose.size()), Enter;\r\n  for (int t : chose) write(t), quad; Enter;\r\n  fflush(stdout);\r\n  int ret; read(ret); \r\n  ma[chose] = ret; return ret;\r\n}\r\ninline bool check(int l, int r) {\r\n  now.clear();\r\n  for (int i = l; i <= r; i++) now.emplace_back(ok[i]);\r\n  int edge1 = ask(now);\r\n  for (int t : rt) now.emplace_back(t);\r\n  int edge2 = ask(now);\r\n  if (edge1 + root_edge < edge2) return true;\r\n  return false;\r\n}\r\ninline bool check2(int l, int r, int p) {\r\n  now.clear();\r\n  for (int i = l; i <= r; i++) now.emplace_back(ok[i]);\r\n  int edge1 = ask(now);\r\n  now.emplace_back(p);\r\n  int edge2 = ask(now);\r\n  if (edge1 < edge2) return true;\r\n  return false;\r\n}\r\n\r\ninline void DFS(int, int);\r\ninline int LCA(int, int);\r\n\r\nsigned main(void) {\r\n  read(n); UFST::rebuild(n);\r\n  if (n == 1) {\r\n    printf(\"Y 1 \\n1\");\r\n    return 0;\r\n  }\r\n  now.emplace_back(1); \r\n  root_edge = ask(now);\r\n  rt = now;\r\n  for (int edgenum = 1, rootteam; edgenum < n; edgenum++) {\r\n    root_edge = ask(rt);\r\n    tot = 0, rootteam = UFST::find(1);\r\n    for (int i = 1; i <= n; i++)\r\n      if (UFST::find(i) != rootteam) ok[++tot] = i;\r\n    int left = 1, right = tot, mid;\r\n    while (left < right) {\r\n      mid = (left + right) / 2;\r\n      if (check(left, mid)) right = mid;\r\n      else left = mid + 1; \r\n    }\r\n    int point = ok[left];\r\n    tot = 0;\r\n    for (int t : rt) ok[++tot] = t;\r\n    left = 1; right = tot;\r\n    while (left < right) {\r\n      mid = (left + right) / 2;\r\n      if (check2(left, mid, point)) right = mid;\r\n      else left = mid + 1;\r\n    }\r\n    UFST::merge(ok[left], point);\r\n    edge[++edgetot] = Edge(ok[left], point);\r\n    rt.emplace_back(point);\r\n  }\r\n  for (int i = 1; i <= edgetot; i++) {\r\n    Edge p = edge[i];\r\n    dis[p.x].emplace_back(p.y);\r\n    dis[p.y].emplace_back(p.x);\r\n  }\r\n  DFS(1, 0);\r\n  for (int i = 1; i <= n; i++) {\r\n    if (col[i] == 0) white.emplace_back(i);\r\n    else black.emplace_back(i);\r\n  }\r\n  // for (int num : white) write(num), quad; Enter;\r\n  // for (int num : black) write(num), quad; Enter;\r\n  int edge1 = ask(white), edge2 = ask(black);\r\n  // printf(\"!!!\");write(white.size(), edge1);\r\n  int p1, p2;\r\n  if (edge1 == 0 && edge2 == 0) {\r\n    printf(\"Y \"); write(white.size()), Enter;\r\n    for (int num : white) write(num), quad; Enter;\r\n    return 0;\r\n  } else if (edge1 != 0) {\r\n    tot = 0;\r\n    for (int num : white) ok[++tot] = num;\r\n    while (1) {\r\n      now.clear();\r\n      std::random_shuffle(ok + 1, ok + 1 + tot);\r\n      for (int i = 1; i * 2 - 1 <= std::max(tot, 3); i++) now.emplace_back(ok[i]);\r\n      // for (int t : now) write(t), quad; Enter; write(ask(now)); Enter;\r\n      if (ask(now)) { \r\n        if (now.size() == 2) {p1 = ok[1]; p2 = ok[2]; break;}\r\n        tot = (tot + 1) / 2;\r\n      }\r\n    }\r\n  } else if (edge2 != 0) {\r\n    tot = 0;\r\n    for (int num : black) ok[++tot] = num;\r\n    while (1) {\r\n      now.clear();\r\n      std::random_shuffle(ok + 1, ok + 1 + tot);\r\n      for (int i = 1; i * 2 - 1 <= tot; i++) now.emplace_back(ok[i]);\r\n      if (ask(now)) { \r\n        if (now.size() == 2) {p1 = ok[1]; p2 = ok[2]; break;}\r\n        tot = (tot + 1) / 2;\r\n      }\r\n    }\r\n  }\r\n  printf(\"N \"); \r\n  int lca = LCA(p1, p2);\r\n  write(deep[p1] + deep[p2] - 2 * deep[lca] + 1); Enter;\r\n  while (1) {\r\n    write(p1), quad;\r\n    p1 = fa[p1][0];\r\n    if (p1 == lca) break;\r\n  } \r\n  while (1) {\r\n    sta[++top] = p2;\r\n    if (p2 == lca) break;\r\n    p2 = fa[p2][0];\r\n  }\r\n  while (top) write(sta[top]), quad, top --; Enter;\r\n  return 0;\r\n}\r\n\r\ninline void DFS(int now, int father) {\r\n  deep[now] = deep[father] + 1;\r\n  col[now] = 1 - col[father];\r\n  for (int i = 0; i <= 12; i++) fa[now][i + 1] = fa[fa[now][i]][i];\r\n  for (int t : dis[now]) {\r\n    if (t == father) continue;\r\n    fa[t][0] = now;\r\n    DFS(t, now);\r\n  }\r\n}\r\ninline int LCA(int x, int y) {\r\n  if (deep[x] < deep[y]) std::swap(x, y);\r\n  for (int i = 13; i >= 0; i--)\r\n    if (deep[fa[x][i]] >= deep[y]) x = fa[x][i];\r\n  if (x == y) return x;\r\n  for (int i = 13; i >= 0; i--)\r\n    if (fa[x][i] != fa[y][i]) x = fa[x][i], y = fa[y][i];\r\n  return fa[x][0];\r\n}\r\n\r\nnamespace UFST {\r\ninline int find(int x) {\r\n  return x == fa[x] ? x : fa[x] = find(fa[x]);\r\n}\r\ninline void rebuild(int n) {\r\n  for (int i = 1; i <= n; i++) fa[i] = i, siz[i] = 1;\r\n}\r\ninline void merge(int x, int y) {\r\n  x = find(x); y = find(y);\r\n  if (x == y) return ;\r\n  if (siz[x] > siz[y]) std::swap(x, y);\r\n  fa[x] = y; siz[y] += siz[x];\r\n}\r\n}\r\n\r\ntemplate <class T> void read(T &a) {\r\n  int s = 0, t = 1;\r\n  char c = getchar();\r\n  while (!isdigit(c) && c != '-') c = getchar();\r\n  if (c == '-') c = getchar(), t = -1;\r\n  while (isdigit(c)) s = s * 10 + c - '0', c = getchar();\r\n  a = s * t;\r\n}\r\ntemplate <class T> void write(T x) {\r\n  if (x == 0) putchar('0');\r\n  if (x < 0) putchar('-'), x = -x;\r\n  int top = 0, sta[50] = {0};\r\n  while (x) sta[++top] = x % 10, x /= 10;\r\n  while (top) putchar(sta[top] + '0'), top --;\r\n  return ;\r\n}\r\n\r\ntemplate <class T, class ...rest> void read(T &a, rest &...x) {\r\n  read(a); read(x...);\r\n}\r\ntemplate <class T, class ...rest> void write(T x, rest ...a) {\r\n  write(x); quad; write(a...);\r\n}\r\n```\r\n``",
        "postTime": 1659160416,
        "uid": 47531,
        "name": "Aonynation",
        "ccfLevel": 0,
        "title": "CF1033E \u505a\u9898\u4f53\u9a8c"
    }
]