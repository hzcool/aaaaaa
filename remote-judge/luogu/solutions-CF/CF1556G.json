[
    {
        "content": "### Solution\n\n\u9996\u5148\u5bf9\u4e8e\u8fd9\u79cd\u8fde\u901a\u6027\u5224\u65ad\uff0c\u5e26\u4e0a\u5220\u9664\u64cd\u4f5c\u7684\uff0c\u5927\u591a\u53ef\u4ee5\u65f6\u5149\u5012\u6d41\uff0c\u4f7f\u5220\u9664\u88ab\u63d2\u5165\u53d6\u4ee3\uff0c\u65b9\u4fbf\u540e\u671f\u5e76\u67e5\u96c6\u3002\n\n\u5957\u7528\u7ebf\u6bb5\u6811\u6a21\u578b\uff08\u603b\u533a\u95f4 $[0, 2^n-1]$\uff09\uff0c\u5047\u8bbe\u6811\u662f\u6ee1\u7684\uff0c\u8003\u8651\u5728\u6bcf\u4e2a\u975e\u53f6\u7ed3\u70b9\u4e0a\uff0c\u90fd\u5c06\u5de6\u53f3\u5b50\u6811\u201c\u53e0\u5408\u201d\u5e76\u4f7f\u5bf9\u5e94\u4f4d\u76f8\u8fde\u3002\u4e0d\u8fc7\u76f4\u63a5\u5efa\u51fa\u6ee1\u4e8c\u53c9\u6811\u7684\u8bdd\uff0c\u8fb9\u7684\u590d\u6742\u5ea6\u662f $O(2^n\\cdot n)$\u200b \u7684\uff0c\u4e0d\u592a\u80fd\u63a5\u53d7\u3002\n\n\u8003\u8651\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u4ec5\u4fdd\u7559\u7ebf\u6bb5\u6811\u4e0a\u6211\u4eec\u64cd\u4f5c\u4e2d\u66fe\u6d89\u53ca\u7684\u4f4d\u7f6e\u3002\u8f93\u5165\u6ee1\u8db3\u4e00\u4e2a\u4f4d\u7f6e\u4e0d\u4f1a\u88ab\u5220\u9664\u4e24\u6b21\uff0c\u8fd9\u63d0\u4f9b\u4e86\u5f88\u5927\u7684\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5957\u7528\u533a\u95f4\u8986\u76d6\u7684\u65b9\u6cd5\uff0c\u65f6\u95f4 $i$\u200b \u7684\u64cd\u4f5c\u5c31\u6253\u4e0a\u6807\u8bb0 $i$\u200b\u3002\u5728\u64cd\u4f5c\u524d\u8bb0\u5f97\u5148\u5bf9\u6574\u68f5\u7ebf\u6bb5\u6811\u6253\u4e0a $m+1$\u200b\u200b \u7684\u6807\u8bb0\u8868\u793a\u9ed8\u8ba4\u7559\u5b58\u5230\u6700\u540e\uff0c\u5982\u679c\u4e4b\u540e\u88ab\u5220\u9664\u4e86\u5c31\u4f1a\u88ab\u8986\u76d6\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u6b63\u5e38\u7684\u6807\u8bb0\u4e0b\u4f20\uff0c\u5728\u4e0b\u4f20\u524d\u8865\u5168\u7f3a\u7684\u7ed3\u70b9\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u4f1a\u662f\u4e00\u4e2a\u201c\u5b8c\u6ee1\u4e8c\u53c9\u6811\u201d\uff08\u5373\u6bcf\u4e2a\u975e\u53f6\u7ed3\u70b9\u90fd\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u4e0d\u6e05\u695a\u662f\u4e0d\u662f\u8fd9\u4e48\u53eb\uff1f\uff09\uff0c\u5e76\u4e14\u6807\u8bb0\u90fd\u5728\u53f6\u5b50\u5904\u3002\u8fd9\u65b9\u4fbf\u4e86\u6211\u4eec\u7684\u540e\u7eed\u64cd\u4f5c\u3002\n\n\u601d\u8003\u6211\u4eec\u901a\u8fc7\u7ebf\u6bb5\u6811\u5b9e\u9645\u4e0a\u5728\u505a\u4ec0\u4e48\u3002\u539f\u9898\u4e2d\u7684\u5220\u9664\u533a\u95f4 $[l,r]$ \u7684\u64cd\u4f5c\uff0c\u5176\u5b9e\u5c31\u662f\u5c06 $[l,r]$ \u7684\u70b9\u9694\u79bb\u51fa\u6765\u3002\u6211\u4eec\u5b9e\u9645\u4e0a\u5c06\u533a\u95f4\u62c6\u6210\u4e86 $O(\\log (r-l+1))=O(n)$\u200b \u4e2a\u70b9\uff0c\u76f8\u5f53\u4e8e\u201c\u538b\u7f29\u201d\u4e86\u539f\u56fe\u3002\u538b\u7f29\u70b9\u5185\u90e8\u5f88\u663e\u7136\u662f\u5168\u90e8\u8fde\u901a\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u4f7f\u6bcf\u4e2a\u975e\u53f6\u7ed3\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u201c\u5bf9\u5e94\u4f4d\u7f6e\u8fde\u8fb9\u201d\u3002\u5728\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\u4e0a\uff0c\u6211\u4eec\u201c\u53e0\u5408\u201d\u4e86\u4e24\u68f5\u5b50\u6811\u3002\u7531\u4e8e\u7ebf\u6bb5\u6811\u4e0d\u6ee1\uff0c\u53ef\u80fd\u53f6\u5b50\u95f4\u6ca1\u6709\u5bf9\u5e94\uff0c\u5373\u5176\u4e2d\u4e00\u68f5\u5728\u8f83\u6d45\u5904\u5c31\u662f\u53f6\u5b50\u4e86\uff0c\u53e6\u4e00\u68f5\u4e0b\u9762\u8fd8\u6709\u513f\u5b50\u3002\u8fd9\u662f\u56e0\u4e3a\u8f83\u6d45\u7684\u90a3\u4e2a\u88ab\u538b\u7f29\u4e86\uff0c\u6211\u4eec\u53ea\u8981\u5c06\u90a3\u4e2a\u8f83\u6d45\u7684\u53f6\u5b50\u548c\u53e6\u4e00\u68f5\u6811\u7684\u66f4\u6df1\u7684\u53f6\u5b50\u76f8\u8fde\u5373\u53ef\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u5e94\u4f4d\u76f8\u8fde\u7684\u6548\u679c\u3002\u7531\u4e8e\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\u662f\u201c\u5b8c\u6ee1\u201d\u7684\uff0c\u4e8e\u662f\u5e76\u4e0d\u7528\u62c5\u5fc3\u7f3a\u513f\u5b50\u7684\u95ee\u9898\u3002\n\n\u8fb9\u6570\u7684\u590d\u6742\u5ea6\u662f\u548c\u7ebf\u6bb5\u6811\u5c42\u6570\u4ee5\u53ca\u53f6\u5b50\u6570\u76f8\u5173\u7684\uff0c\u4e3a $O(n^2 m)$\u200b\u3002\u4e00\u6761\u8fb9\u88ab\u52a0\u5165\u5f53\u4e14\u4ec5\u5f53\u5f53\u524d\u65f6\u95f4\u5012\u6d41\u5230\u6240\u8fde\u4e24\u70b9\u7684\u5220\u9664\u65f6\u95f4\u7684\u8f83\u5c0f\u503c\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\uff0c\u53ea\u8981\u627e\u5230\u5176\u6240\u5728\u538b\u7f29\u70b9\uff0c\u518d\u67e5\u8be2\u538b\u7f29\u70b9\u95f4\u7684\u8fde\u901a\u6027\u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(n^2 m\\cdot \\alpha)$\u200b\uff0c\u5176\u4e2d $\\alpha$ \u4ee3\u8868\u5e76\u67e5\u96c6\u7684\u65f6\u95f4\u3002\n\n### Code\n\n\u5e7f\u544a\uff1ahttps://www.cnblogs.com/-Wallace-/p/sol-deltix-round-summer-2021.html\n\n```cpp\n#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <string>\n#include <utility>\n#include <vector>\ntypedef long long ll;\nconst int M = 5e4 + 5;\nconst int N = M << 6;\n\nint n, m;\nint ans[M];\nll U;\n\nstruct query {\n  std::string opt;\n  ll x, y;\n} qry[M];\nstd::vector<std::pair<int, int>> edge[M];\n\nint tot = 1, lc[N], rc[N];\nint rec[N], uset[N];\nint find(int x) {\n  return x == uset[x] ? x : uset[x] = find(uset[x]);\n}\n\n#define mid ((l + r) >> 1)\n#define leaf(x) (!lc[x] && !rc[x])\nvoid pushdown(int x) {\n  if (!lc[x]) lc[x] = ++tot;\n  if (!rc[x]) rc[x] = ++tot;\n  if (rec[x]) rec[lc[x]] = rec[rc[x]] = rec[x], rec[x] = 0;\n}\nvoid insert(int x, ll l, ll r, ll ql, ll qr, int t) {\n  if (ql > r || l > qr) return;\n  if (ql <= l && r <= qr) { rec[x] = t; return; }\n  pushdown(x);\n  insert(lc[x], l, mid, ql, qr, t);\n  insert(rc[x], mid + 1, r, ql, qr, t);\n}\nvoid connect(int x, int y) {\n  if (leaf(x) && leaf(y))\n    return (void)edge[std::min(rec[x], rec[y])].emplace_back(x, y);\n  if (leaf(x))\n    return connect(x, lc[y]), connect(x, rc[y]);\n  if (leaf(y))\n    return connect(lc[x], y), connect(rc[x], y);\n  connect(lc[x], lc[y]), connect(rc[x], rc[y]);\n}\nint locate(int x, ll l, ll r, ll p) {\n  if (leaf(x)) return x;\n  if (p <= mid) return locate(lc[x], l, mid, p);\n  else return locate(rc[x], mid + 1, r, p);\n}\n#undef mid\n\nsigned main() {\n  std::ios::sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  std::cout.tie(nullptr);\n\n  std::cin >> n >> m;\n  U = (1ll << n) - 1;\n\n  rec[1] = m + 1;\n  for (int i = 1; i <= m; i++) {\n    std::cin >> qry[i].opt >> qry[i].x >> qry[i].y;\n    if (qry[i].opt == \"block\")\n      insert(1, 0, U, qry[i].x, qry[i].y, i);\n  }\n  for (int i = 1; i <= tot; i++)\n    if (!leaf(i)) connect(lc[i], rc[i]);\n  for (int i = 1; i <= tot; i++)\n    uset[i] = i;\n  for (auto [x, y] : edge[m + 1])\n    uset[find(x)] = find(y);\n  for (int i = m; i; --i) {\n    for (auto [x, y] : edge[i])\n      uset[find(x)] = find(y);\n    if (qry[i].opt == \"ask\")\n      ans[i] = find(locate(1, 0, U, qry[i].x)) == find(locate(1, 0, U, qry[i].y));\n  }\n\n  for (int i = 1; i <= m; i++)\n    if (qry[i].opt == \"ask\")\n      std::cout << ans[i] << \"\\n\";\n  return 0;\n}\n```",
        "postTime": 1630567068,
        "uid": 61430,
        "name": "_Wallace_",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF1556G \u3010Gates to Another World\u3011"
    }
]