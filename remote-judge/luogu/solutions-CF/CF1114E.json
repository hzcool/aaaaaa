[
    {
        "content": "\u5728\u6211\u7684\u535a\u5ba2\u4e0a\u770b\u6548\u679c\u66f4\u4f73\uff1a[\u70b9\u8fd9\u91cc](https://www.cnblogs.com/1000Suns/p/10362096.html)\n\n\u770b\uff0c\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\uff0c\u660e\u663e\u6697\u793a\u6211\u4eec\u8981\u4e8c\u5206\u6700\u5927\u503c\u3002\uff08\u9664\u4e86\u8fd9\u4e2a\u4e5f\u6ca1\u5565\u7528\u4e86\u5427\uff1f\uff09\n\n\u7528\u6389 $\\log 10^9=30$ \u4e2a\u64cd\u4f5c\u3002\n\n\u4ee4 $mx$ \u4e3a\u6211\u4eec\u4e8c\u5206\u51fa\u7684\u6700\u5927\u503c\u3002\n\n\u8bbe\u516c\u5dee\u4e3a $d$\uff0c\u90a3\u4e48 $\\forall 1\\le i\\le n,d|(mx-a_i)$\u3002\n\n\u4e5f\u5c31\u662f\u5982\u679c\u6211\u4eec\u77e5\u9053\u7684 $a_i$ \u6709 $x_1,x_2,x_3\\dots,x_k$\uff0c\u90a3\u4e48 $d|\\gcd(mx-x_1,mx-x_2,mx-x_3\\dots,mx-x_k)$\u3002\n\n\u4f46\u8fd9\u6837\u5c31\u6709\u4e00\u4e2a\u4e25\u5cfb\u7684\u95ee\u9898\uff1a\u5982\u679c $k$ \u4e0d\u591f\u5927\uff0c\u76f4\u63a5 $\\gcd$ \u5f97\u5230\u7684\u53ef\u80fd\u4e0d\u662f\u7b54\u6848\uff01\n\n\u65e0\u8def\u53ef\u8d70\u4e86\uff0c\u53ea\u6709\u4e00\u4e2a\u60f3\u6cd5\uff1a\u968f\u673a\uff01\n\n\u6211\u4eec\u968f\u673a $30$ \u4e2a $i$\uff0c\u8be2\u95ee\u8fd9\u4e9b $a_i$ \u7684\u503c\u3002\uff08\u4e3a\u4ec0\u4e48\u8981\u968f\u673a\u5462\uff1f\u56e0\u4e3a\u5982\u679c\u76f4\u63a5\u53d6\u524d $30$ \u4e2a $a_i$ \u5f88\u53ef\u80fd\u4f1a\u88ab\u6bd2\u7624\u5361\u6389\uff09\n\n$d$ \u5c31\u662f\u6240\u6709 $mx-a_i$ \u7684 $\\gcd$ \u4e86\u3002\n\n\uff1f\uff1f\uff1f\u8fd9\u6837\u4e0d\u4f1a\u9519\u5417\uff1f\n\n\u5206\u6790\u4e00\u4e0b\uff0c\u6211\u4eec\u8bbe $a_1=mx-k_1d,a_2=mx-k_2d\\dots a_n=mx-k_nd$\u3002\u90a3\u4e48\u6211\u4eec\u6c42\u51fa\u7684 $\\gcd$ \u5c31\u662f\u968f\u673a\u51fa\u7684 $30$ \u4e2a $k_i$ \u7684 $\\gcd$\u3002\n\n\u5728 $10^6$ \u4e2d\u968f\u673a\u9009 $30$ \u4e2a\u6570\uff0c$\\gcd$ \u4e0d\u4e3a $1$ \u7684\u6982\u7387\u5c31\u662f\u51fa\u9519\u7684\u6982\u7387\u3002\n\n\u5927\u81f4\u4f30\u7b97\u4e00\u4e0b\uff1a\n\n\u9009\u51fa\u7684 $k$ \u90fd\u662f $2$ \u7684\u500d\u6570\u7684\u6982\u7387\u662f $\\frac{1}{2^{30}}$\u3002\n\n\u9009\u51fa\u7684 $k$ \u90fd\u662f $3$ \u7684\u500d\u6570\u7684\u6982\u7387\u662f $\\frac{1}{3^{30}}$\u3002\n\n\u7b49\u7b49\u7b49\u7b49\u2026\u2026\n\n\u8fd9\u6837\u4f30\u7b97\u7684\u8bdd\uff0c\u51fa\u9519\u6982\u7387\u662f\u4e0d\u4f1a\u8d85\u8fc7 $10^{-8}$ \u7684\u3002\n\n\u5176\u5b9e\u6709\u66f4\u51c6\u786e\u7684\u6c42\u6cd5\uff0c\u5c31\u662f\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\uff0c\u4f46\u7531\u4e8e\u6211\u4eec\u53ea\u662f\u6765\u8bc1\u660e\u6b63\u786e\u6027\u7684\uff0c\u5c31\u4e0d\u8bb2\u4e86\u3002\n\n\u76f4\u63a5\u5f15\u7528\u5b98\u65b9\u9898\u89e3\uff1a\n\nBy some maths, we can find out the probability of our solution to fail being relatively small \u2014 approximately $1.86185\\times 10^{-9}$.\n\n\u76f4\u63a5\u4e0arand()\u5c31\u505a\u5b8c\u4e86\u2026\u2026\n\n\u4e86\u5417\uff1f\n\n![](https://img2018.cnblogs.com/blog/1418922/201902/1418922-20190211160716776-296734885.png)\n\n\u5bf9\u4e86\uff0c\u8fd9\u5c31\u662f\u51fa\u9898\u4eba\u6076\u6bd2\u6240\u5728\u4e86\u2026\u2026\n\nrand()\u548crandom_shuffle()\u7684\u4e0a\u754c\u90fd\u662f32767\uff0c\u8bbf\u95ee\u4e0d\u5230\u540e\u9762\u5927\u90e8\u5206\u7684\u5143\u7d20\u3002\n\n\u4e8e\u662f\u51fa\u9898\u4eba\u5c31\u628a\u6076\u6bd2\u7684\u6570\u653e\u5728\u4e86\u524d\u9762\u2026\u2026\n\n\u90a3\u5c31\u7528\u81ea\u5df1\u7684rand()\u554a\uff01\u5199\u8fc7treap\u5417\uff1f\u628a\u90a3\u4e2arand\u642c\u8fc7\u6765\u5c31\u80fd\u7528\u4e86\uff01\n\n**\uff08\u6ce8\uff1a\u8fd9\u6837\u5728CF\u5bb9\u6613\u88ab\u5361\u6389\uff0c\u6700\u8fd1\u53d1\u73b0\u4e86\u4e00\u4e2a\u53eb\u505amt19937\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u5728[\u8fd9\u91cc](http://codeforces.com/blog/entry/61587)\u770b\uff09**\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst int maxn=1000100;\n#define MP make_pair\n#define PB push_back\n#define lson o<<1,l,mid\n#define rson o<<1|1,mid+1,r\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define ROF(i,a,b) for(int i=(a);i>=(b);i--)\n#define MEM(x,v) memset(x,v,sizeof(x))\ninline int read(){\n    char ch=getchar();int x=0,f=0;\n    while(ch<'0' || ch>'9') f|=ch=='-',ch=getchar();\n    while(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n    return f?-x:x;\n}\nint n,cnt,pt[maxn];\ninline int rnd(){    //\u81ea\u5df1\u7684rand\n    static int seed=2333;\n    return seed=(((seed*666666ll+20050818)%998244353)^1000000007)%1004535809;\n}\nint gcd(int x,int y){\n    return y?gcd(y,x%y):x;\n}\nint main(){\n    n=read();\n    if(n<=60){    //n<=60\uff0c\u968f\u4fbf\u73a9\n        int mx=0,mn=INT_MAX;\n        FOR(i,1,n){\n            printf(\"? %d\\n\",i);\n            fflush(stdout);\n            int x=read();\n            mx=max(mx,x);\n            mn=min(mn,x);\n        }\n        printf(\"! %d %d\\n\",mn,(mx-mn)/(n-1));\n        fflush(stdout);\n        return 0;\n    }\n    int l=0,r=1e9;\n    while(l<r){    //\u4e8c\u5206\u6700\u5927\u503c\n        int mid=(l+r)>>1;\n        printf(\"> %d\\n\",mid);\n        cnt++;\n        fflush(stdout);\n        int ver=read();\n        if(ver) l=mid+1;\n        else r=mid;\n    }\n    int mx=r,ans=0;\n    FOR(i,1,n) pt[i]=i;\n    FOR(i,1,n) swap(pt[i],pt[rnd()%n+1]);\n    FOR(i,1,min(n,60-cnt)){    //\u968f\u673a60-cnt\u4e2a\u5143\u7d20\n        printf(\"? %d\\n\",pt[i]);\n        fflush(stdout);\n        int x=read();\n        ans=gcd(ans,mx-x);    //\u53d6gcd\n    }\n    printf(\"! %d %d\\n\",mx-(n-1)*ans,ans);    //\u9996\u9879=\u672b\u9879-(\u9879\u6570-1)*\u516c\u5dee\n    fflush(stdout);\n}\n```",
        "postTime": 1551430043,
        "uid": 72118,
        "name": "AThousandSuns",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1114E \u3010Arithmetic Progression\u3011"
    },
    {
        "content": "**Solution**\n\n\u795e\u9898\u3002\n\n\u53ef\u4ee5\u901a\u8fc7\u8be2\u95ee $30$ \u6b21\u5de6\u53f3\u4e8c\u5206\u6c42\u51fa\u7b49\u5dee\u6570\u5217\u7684\u6700\u5927\u503c\u3002\n\n\u5269\u4e0b\u7684 $30$ \u6b21\u8be2\u95ee\u968f\u673a\u9009\u62e9 $30$ \u4e2a\u4f4d\u7f6e\u6c42\u51fa\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u503c\uff0c\u7136\u540e\u7528\u6700\u5927\u503c\u51cf\u53bb\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u503c\uff0c\u6c42 $\\gcd$ \u5373\u53ef\u3002\n\n\u770b\u8d77\u6765\u5f88\u7384\u5b66\u3002\n\n\u8bc1\u660e\uff1a\u4e8c\u5206\u7684\u6b21\u6570\u662f $\\log$ \u7ea7\u522b\u7684\uff0c\u8be2\u95ee\u7684\u6b21\u6570\u4e00\u5b9a\u4e0d\u4f1a\u8d85\u8fc7 $30$ \u6b21\u3002\u5269\u4e0b\u7684\u968f\u673a\u9009\uff0c\u4e5f\u5c31\u662f\u5728\u8fd9 $10^6$ \u4e2a\u6570\u4e2d\u968f\u673a\u9009\u62e9 $30$ \u4e2a\uff0c$\\gcd = 1$ \u7684\u6982\u7387\u3002\u8fd9\u4e2a\u5176\u4ed6\u9898\u89e3\u5df2\u7ecf\u8bb2\u8fc7\u4e86\uff0c\u8fd9\u91cc\u4e0d\u8bc1\u660e\u3002\uff08\u5b9e\u9645\u4e0a\u662f\u6211\u4e0d\u4f1a\uff09\n\n\u4f46\u662f\u5982\u4f55\u968f\u673a\uff1f\n\n`rand()` \u662f\u4e00\u4e2a\u968f\u673a\u51fd\u6570\u3002\n\n\u4f46\u662f `rand()` \u6bcf\u4e00\u6b21\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8fd4\u56de\u7684\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002\n\n\u6240\u4ee5\u8fd9\u6837\u5f88\u5bb9\u6613\u88ab\u5361\u3002\n\n\u53ef\u4ee5\u4f7f\u7528 `srand(time(0))` \u6765\u521d\u59cb\u5316\u79cd\u5b50\uff0c\u8fd9\u6837\u6bcf\u4e00\u6b21\u8fd0\u884c\u7a0b\u5e8f\u8fd4\u56de\u7684\u503c\u90fd\u662f\u4e0d\u4e00\u6837\u7684\u3002\n\n\u4f46\u662f\uff0c`rand()` \u5728 `windows` \u7cfb\u7edf\u4e0b\u503c\u57df\u4e3a $[0, 32767]$\uff0c\u5728 `linux` \u7cfb\u7edf\u4e0b\u503c\u57df\u4e3a $[0, 2148473647]$\u3002\u7ecf\u8fc7\u6d4b\u8bd5\uff0c`codeforces` \u7684\u8bc4\u6d4b\u73af\u5883\u662f `windows`\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728 $10^6$ \u4e2a\u6570\u4e2d\uff0c`rand()` \u51fd\u6570\u53ea\u80fd\u968f\u673a\u524d $32768$ \u4e2a\u6570\u3002\n\n\u90a3\u4e48\u4e5f\u662f\u5f88\u5bb9\u6613\u88ab\u5361\u7684\u3002\n\n\u6240\u4ee5\u5e94\u8be5\u4f7f\u7528\u9ed1\u79d1\u6280 `mt19937` \u6765\u968f\u673a\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u968f\u673a\u4efb\u610f\u7684\u503c\u57df\u3002\u5177\u4f53\u770b[\u8fd9\u91cc](https://codeforces.com/blog/entry/61587)\u3002\n\n\u4e0d\u4f1a\u4ea4\u4e92\u9898\uff1f[\u8fd9\u91cc](https://codeforces.com/blog/entry/45307)\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u9898\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u89e3\u51b3\u4e86\uff01\n\n**Code**\n\n```cpp\n// Think twice, code once.\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nsigned main() {\n    mt19937 gen(chrono::system_clock::now().time_since_epoch().count());\n    int n;\n    cin >> n;\n    uniform_int_distribution <int> rnd(1, n);\n    vector <int> a;\n    int l = 0, r = 1e9;\n    int best = -1;\n    while (l <= r) {\n        int mid = l + r >> 1;\n        cout << \"> \" << mid << '\\n';\n        cout.flush();\n        int x;\n        cin >> x;\n        if (x == 0)\n            r = mid - 1, best = mid;\n        else\n            l = mid + 1;\n    }\n    for (int i = 1; i <= 400000; i ++)\n        a.emplace_back(rnd(gen));\n    auto it = unique(begin(a), end(a));\n    a.erase(it, end(a));\n    vector <int> b;\n    for (int i = 0; i < 30; i ++) {\n        int p = a[i];\n        cout << \"? \" << p << '\\n';\n        cout.flush();\n        int x;\n        cin >> x;\n        b.emplace_back(x);\n    }\n    sort (begin(b), end(b));\n    auto it2 = unique(begin(b), end(b));\n    b.erase(it2, end(b));\n    int g = b[1] - b[0];\n    for (int i = 1; i < 29; i ++)\n        g = __gcd(g, b[i + 1] - b[i]);\n    int mi = best - (n - 1) * g;\n    cout << \"! \" << mi << ' ' << g << '\\n';\n    cout.flush();\n    return 0;\n}\n\n```\n\n\n\n",
        "postTime": 1659003836,
        "uid": 378467,
        "name": "willem248",
        "ccfLevel": 5,
        "title": "CF1114E"
    },
    {
        "content": "\u8868\u793a\u849f\u84bb\u6ca1\u60f3\u5230 $\\gcd$ \u3002\u3002\u3002\n\n\u63d0\u4f9b\u4e00\u79cd\u4e0d\u9700\u8981 $\\gcd$ \u7684\u89e3\u6cd5\uff0c\u7136\u800c\u4e8b\u5b9e\u4e0a\u66f4\u52a3\uff0c~~\u800c\u4e14\u6b63\u786e\u6027\u6211\u81ea\u5df1\u4e5f\u6ca1\u4e25\u683c\u8bc1\u51fa\u6765~~\u3002\n\n## \u3010\u601d\u8def\u3011\n\u6211\u4eec\u6709\u4e24\u79cd\u8be2\u95ee\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u8be2\u95ee\uff0c\u663e\u7136\u6211\u4eec\u662f\u968f\u673a\u83b7\u53d6\u4e86\u539f\u5e8f\u5217\u4e2d\u7684\u4e00\u4e9b\u6570\uff0c\u800c\u4e14\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u4ec0\u4e48\u5c31\u6709\u4ec0\u4e48\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u5c31\u662f\u968f\u673a\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u8be2\u95ee\uff0c\u663e\u7136\u662f\u62ff\u8fc7\u6765\u4e8c\u5206\u7528\u7684\uff0c\u800c\u4e14\u9650\u5236\u4e86\u53ea\u80fd\u6c42\u51fa\u6765\u672b\u9879\u3002\n\n\u90a3\u6211\u4eec\u5c31\u76f8\u4fe1\u4e00\u6b21\u51fa\u9898\u4eba\uff0c\u5bf9 $10^9$ \u4e8c\u5206\uff0c\u6c42\u51fa\u672b\u9879\n\n\u53cd\u6b63\u6211\u4eec\u8981\u6c42\u516c\u5dee\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u672b\u9879\u5f97\u51fa\u9996\u9879\u3002\n\n\u7136\u800c\u4e8c\u5206\u4f3c\u4e4e\u5c31\u9700\u8981 $30$ \u6b21\u8be2\u95ee\uff0c\u8fd9\u8981\u6c42\u6211\u4eec\u5728 $30$ \u6b21\u8be2\u95ee\u4ee5\u5185\u6c42\u51fa\u516c\u5dee\u3002\n\n\u6211\u662f\u8fd9\u4e48\u505a\u7684\uff1a\n\n\u628a\u7b49\u5dee\u6570\u5217\u8868\u793a\u6210\u4e00\u4e2a\u4e00\u6b21\u51fd\u6570\u7684\u5f62\u5f0f\u3002\n\n\u8bbe\n$$\nf(x)=kx+b\n$$\n\u800c\u8fd9\u4e2a $k$ \u5373\u662f\u516c\u5dee\uff0c $f(1)$ \u5373\u662f\u9996\u9879\u3002\n\n\u8003\u8651\u600e\u4e48\u5229\u7528\u8fd9\u4e2a\u5f0f\u5b50\u3002\n\n\u7531\u4e8e\u6211\u4eec $f(n)$ \u5df2\u77e5\uff0c\u4e8e\u662f\u6211\u4eec\u5df2\u77e5\u4e00\u4e2a\u5b9a\u70b9 \n$$\nf(n)=kn+b\n$$\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u679a\u4e3e\u8fd9\u4e2a $k$ \uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u7b97\u51fa\u552f\u4e00\u786e\u5b9a\u7684 $b$ \uff0c\u518d\u8003\u8651\u5b83\u662f\u5426\u5408\u6cd5\u3002\n\n\u8fd9\u4e00\u90e8\u5206\u6211\u4eec\u8981\u679a\u4e3e $f(n)/n$ \u4e2a $k$ \uff0c\u82e5 $n$ \u6bd4\u8f83\u5c0f\u65f6\u95f4\u4f1a\u70b8\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651 $n\\le 60$ \u65f6\u66b4\u529b\u8be2\u95ee\u6bcf\u4e00\u4e2a\u70b9\uff08\u663e\u7136\u53ef\u4ee5\u5f97\u51fa\u6b63\u89e3\uff09\uff0c$n>60$ \u65f6\u518d\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u68c0\u9a8c\u8fd9\u4e00\u7ec4 $(k, b)$ \u3002\n\n\u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5269\u4e0b $30$ \u6b21\u8be2\u95ee\u77e5\u9053 $30$ \u4e2a $f(x)$ \u3002\n\n\u6211\u4eec\u53ef\u4ee5\u59d1\u4e14\u8ba4\u4e3a\u5b83\u4eec\u5206\u5e03\u5747\u5300\uff0c\u8fd9\u91cc\u5efa\u8bae\u968f\u673a\u53d6\u70b9\u9632\u6b62\u88ab $\\text{hack}$ \uff0c\u7528\u4e86 $\\text{C++}$ \u81ea\u5e26\u7684 `rand()` \u4e0d\u8fc7\u6ca1\u88ab\u5361\u6389\u4e00\u904d $\\text A$ \u4e86\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e00\u4e9b $f(x)$ \u90fd\u5e94\u8be5\u8981\u80fd\u627e\u5230\u4e00\u4e2a\u6b63\u6574\u6570 $x\\in[1, n]$ \uff0c\u6ee1\u8db3 $f(x)=kx+b$\n\n\u8fd9\u4e2a $x$ \u663e\u7136\u662f\u552f\u4e00\u786e\u5b9a\u7684\uff0c\u5224\u65ad $x$ \u662f\u5426\u662f\u6574\u6570\u4ee5\u53ca $x$ \u662f\u5426\u5728 $[1, n]$ \u4e4b\u5185\u5373\u53ef\uff0c\u82e5\u4e0d\u6ee1\u8db3\u76f4\u63a5\u8fd4\u56de\u4e0d\u53ef\u884c\u3002\n\n\u6211\u662f\u91c7\u7528\u4e86\u770b\u5bf9 $k$ \u53d6\u6a21\u540e\u6a21\u6570\u662f\u5426\u4e0e $b$ \u6a21\u6570\u76f8\u540c\u7684\u65b9\u5f0f\uff0c\u4e8b\u5b9e\u4e0a\u76f4\u63a5\u89e3\u51fa\u6765\u4f3c\u4e4e\u66f4\u76f4\u89c2\u3002\n\n\u90a3\u4e48\u8fd9\u6837\u5b50\u4e3a\u4ec0\u4e48\u662f\u6b63\u786e\u7684\u5462\uff1f\u6211\u81ea\u5df1\u4e5f\u4e0d\u4f1a\u8bc1\uff08\u5927\u96fe\uff09\u3002\n\n\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u3002\uff08\u4e0b\u9762\u5168\u662f\u53e3\u80e1\uff09\n\n\u6211\u4eec\u6709\u4e00\u4e2a\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c\u4e0a\u9762\u6709\u4e00\u4e2a\u5b9a\u70b9\uff0c\u6211\u4eec\u6709\u4e00\u6761\u76f4\u7ebf\u8fc7\u8fd9\u4e2a\u5b9a\u70b9\uff0c\u800c\u4e14\u8fd8\u4e0e $30$ \u6761\u5e73\u884c\u4e0e $x$ \u8f74\u7684\u76f4\u7ebf\u6709\u6a2a\u5750\u6807\u4e5f\u4e3a\u6574\u6570\u7684\u4ea4\u70b9\u3002\n\n\u6bdb\u4f30\u4f30\u4e00\u4e0b\uff0c\u8fd9\u6761\u76f4\u7ebf\u57fa\u672c\u4e0a\u5c31\u662f\u552f\u4e00\u786e\u5b9a\u7684\u4e86\u3002\n\n~~\u6709\u4e25\u683c\u8bc1\u660e\u7684\u8bf7\u52a1\u5fc5\u544a\u8bc9\u6211~~\n\n~~\u800c\u4e14\u5b9e\u6d4b\u968f\u673a15\u4e2a\u70b9\u90fd\u80fd\u8fc7~~ \n\n## \u3010\u4ee3\u7801\u3011\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n;\nint a[65];\nint main(){\n    scanf(\"%d\", &n);\n    if(n <= 60){\n        for (register int i = 1;i <= n;i ++){\n            printf(\"? %d\\n\", i);\n            fflush(stdout);\n            scanf(\"%d\", &a[i]);\n        }\n        sort(a + 1, a + n + 1);\n        printf(\"! %d %d\\n\", a[1], a[2] - a[1]);\n        fflush(stdout);\n        return 0;\n    }\n    int l = 0, r = 1000000000;\n    int tot = 60, ans = 1000000000;\n    while(l <= r){\n        int mid = (l + r) >> 1;\n        printf(\"> %d\\n\", mid);\n        tot --;\n        fflush(stdout);\n        int res;scanf(\"%d\", &res);\n        if(!res) ans = mid, r = mid - 1;\n        else l = mid + 1;\n    }\n    srand(time(NULL));\n    tot = 15;\n    for (register int i = 1;i <= tot;i ++){\n        printf(\"? %d\\n\", rand() % n + 1);\n        fflush(stdout);\n        scanf(\"%d\", &a[i]);\n    }\n    if(a[1] == a[2] && a[2] == a[3] && a[3] == a[6] && a[6] == a[11]){\n        printf(\"! 0 %d\\n\", ans);\n        fflush(stdout);\n        return 0;\n    }\n    for (register int i = 1;i <= ans / (n - 1);i ++){\n        int b = ans - (i * n);\n        int c = (b % i + i) % i;\n        bool ck = 1;\n        for (register int j = 1;j <= tot;j ++){\n            if(a[j] % i != c || ((a[j] - b) / i) <= 0){\n                ck = 0;\n                break;\n            }\n        }\n        if(ck){\n            printf(\"! %d %d\\n\", i + b, i);\n            fflush(stdout);\n            return 0;\n        }\n    }\n}\n```",
        "postTime": 1606219523,
        "uid": 66511,
        "name": "DPair",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1114E \u3010Arithmetic Progression\u3011"
    },
    {
        "content": "\u9996\u5148\u89c2\u5bdf\u9898\u76ee\u7ed9\u7684\u4e24\u4e2a\u64cd\u4f5c\u6709\u4ec0\u4e48\u7528\u3002\n\n\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u80fd\u5b8c\u6210\u7684\u4e8b\u60c5\u5c31\u662f\u6c42\u51fa\u6574\u4e2a\u7b49\u5dee\u6570\u5217\u7684\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u5728 30 \u6b21\u8be2\u95ee\u5185\u89e3\u51b3\u3002\n\n\u8bbe\u6700\u5927\u503c\u4e3a mx\u3002\n\n\u7b2c\u4e8c\u4e2a\u8be2\u95ee\u76f4\u63a5\u4e86\u5f53\uff0c\u76f4\u63a5\u7528\u3002**\u968f\u673a**\u8be2\u95ee\u4e09\u5341\u4e2a\u6570\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u76f4\u63a5\u628a\u6392\u5e8f\u540e\u7684\u6570\u76f8\u90bb\u4f5c\u5dee\u5f97\u5230\u7684\u6240\u6709\u6570\u7684 $\\text{gcd}$ \u5c31\u662f\u7b54\u6848\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u53ef\u4ee5\u8bbe\u6211\u4eec\u8be2\u95ee\u7684\u6570\u5f97\u5230\u7684\u6570\u5217\u4e3a $A$\u3002\u90a3\u4e48\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a\n\n$A_1=mx-k_1d,A_2=mx-k_2d,\u2026\u2026,A_{30}=mx-k_{30}d$\u3002\n\n\u53d1\u73b0\u51fa\u9519\u7684\u60c5\u51b5\u5c31\u662f\u6240\u6709 k \u7684 $\\text{gcd}$ \u4e0d\u4e3a 1 \u7684\u65f6\u5019\u3002\n\n\u4e5f\u5c31\u662f\u4ece n \u4e2a\u6570\u4e2d\u9009 30 \u4e2a\u6570\uff0c\u5b83\u4eec\u7684 $\\text{gcd}$ \u4e0d\u4e3a 1 \u7684\u6982\u7387\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e2a\u6982\u7387\u662f\u975e\u5e38\u5c0f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u6211\u4eec\u73b0\u5728\u8003\u8651\u5982\u4f55\u8bc1\u660e\u8fd9\u4e2a\u7ed3\u8bba\uff1a\n\n1. $n\\le10^6$ \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u4ece $1\\sim10^6$ \u968f\u673a\u9009\u53d6 30 \u4e2a\u6570\uff0c$\\text{gcd}$ \u4e0d\u4e3a 1 \u7684\u6982\u7387\u3002\n\n1. $\\text{gcd}=2$ \u65f6\uff0c\u5373 30 \u4e2a\u6570\u90fd\u662f 2 \u7684\u500d\u6570\uff0c\u6982\u7387\u5927\u7ea6\u4e3a $\\dfrac{1}{2^{30}}$\uff0c\u540c\u7406 $\\text{gcd}=k$ \u65f6\uff0c\u6982\u7387\u5927\u7ea6\u4e3a $\\dfrac{1}{k^{30}}$\u3002\n\n1. \u5373\u603b\u6982\u7387\u5927\u7ea6\u4e3a $\\sum\\limits_{k=1}^n\\dfrac{1}{k^{30}}$\u3002\n\n\u7531\u4e8e\u6211\u4eec\u53ea\u662f\u8981\u8bc1\u660e\u8fd9\u4e2a\u6982\u7387\u5f88\u5c0f\uff0c\u6240\u4ee5\u4e00\u4e9b\u5173\u4e8e\u8fb9\u754c\u7684\u95ee\u9898\u6682\u4e14\u5ffd\u7565\u4e0d\u8ba1\u3002\n\n\u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u4f60\u53ef\u4ee5\u7528\u4f60\u9ad8\u8d85\u7684\u6570\u5b66\u6280\u5de7\u7ee7\u7eed\u5316\u89e3\uff0c\u4f46\u6211\u89c9\u5f97\u5316\u6210\u8fd9\u6837\uff0c\u4f60\u5c31\u5b8c\u5168\u53ef\u4ee5\u7528\u66b4\u529b\u6765\u8ba1\u7b97\u5566\uff01~~\u5199\u4e00\u4e2a\u5206\u6570\u6a21\u677f+\u9ad8\u7cbe\u5ea6~~\n\n~~\u4e5f\u53ef\u4ee5\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u8fd9\u4e2a\u5f0f\u5b50\u7684\u503c\u5f88\u5c0f~~\n\n\u5b98\u65b9\u9898\u89e3\u4e5f\u540c\u6837\u7ed9\u51fa\u8fd9\u79cd\u968f\u673a\u7684\u7b56\u7565\u51fa\u9519\u7684\u6982\u7387\u5927\u7ea6\u4e3a $1.86185\\times{10^{-9}}$\uff0c\u8bc1\u6bd5\u3002\n\n\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u5730\u65b9\u5c31\u662f rand() \u4e0a\u754c\u6709\u9650\uff0c\u6240\u4ee5\u76f4\u63a5\u7528 rand() \u4f1a\u88ab\u51fa\u9898\u4eba\u7528\u7279\u6b8a\u6570\u636e\u5361\u6389\uff0c\u5efa\u8bae\u81ea\u5199 rand \u51fd\u6570\u3002\n\n**code**\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\nconst int x=1e9+7,y=1e9+9;\nint n,a[31],mx,d,p[1000010];\nbool check(int x)\n{\n\tprintf(\"> %d\\n\",x);\n\tfflush(stdout);\n\tscanf(\"%d\",&x);\n\treturn x;\n}\nint random()\n{\n\treturn ((1ll*rand()*x+y+rand())&1048575)%n+1;\n}\nint ask(int x)\n{\n\tprintf(\"? %d\\n\",x);\n\tfflush(stdout);\n\tscanf(\"%d\",&x);\n\treturn x;\n}\nint gcd(int x,int y){return !y?x:gcd(y,x%y);}\nint main()\n{\n\tsrand(time(0));\n\tscanf(\"%d\",&n);\n\tint l=0,r=1e9;\n\twhile (l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif (check(mid)) l=mid+1;\n\t\telse r=mid-1,mx=mid;\n\t}\n\tfor (int i=1;i<=n;i++) p[i]=i;\n\tfor (int i=1;i<=n;i++) swap(p[i],p[random()]);\n\tfor (int i=1;i<=min(n,30);i++) a[i]=ask(p[i]);\n\tsort(a+1,a+min(n,30)+1);\n\td=a[2]-a[1];\n\tfor (int i=2;i<min(n,30);i++)\n\t\td=gcd(d,a[i+1]-a[i]);\n\tprintf(\"! %d %d\\n\",mx-d*(n-1),d);\n\tfflush(stdout);\n\treturn 0;\n}\n```\n",
        "postTime": 1636891096,
        "uid": 157857,
        "name": "ImmortalWatcher",
        "ccfLevel": 6,
        "title": "CF1114E Arithmetic Progression \u9898\u89e3"
    },
    {
        "content": "\u4e00\u9053\u4ea4\u4e92\u9898\uff0c\u601d\u8def\u6bd4\u8f83\u7b80\u5355\n\n\u5148\u4e8c\u5206\u627e\u51fa\u5e8f\u5217\u6700\u5927\u503c\uff0c\u5927\u6982\u9700\u8981$30$\u6b21\n\n\u5269\u4e0b\u7684$30$\u6b21\u968f\u673a\u8be2\u95ee\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u5c06$30$\u4e2a\u6570\u5b58\u5165\u6570\u7ec4\u4e2d\uff0c\u6392\u5e8f\u540e\uff0c\u6c42\u51fa\u4e24\u4e24\u95f4\u5dee\u503c\u7684$gcd$\u5373\u53ef\u5f97\u5230\u516c\u5dee\n\n\u4e0d\u80fd\u7528$rand$\uff0c$windows$\u91cc$rand$\u6700\u5927\u4e3a$32767$\uff0c\u8981\u6539\u6210$rand()<<15|rand()\\%n$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint now[37],cnt,p[4000010];\nint gcd(int a,int b)\n{\n\treturn a==0?b:gcd(b%a,a);\n}\nint main()\n{\n    srand(19260817);\n\tint n;\n\tcin>>n;\n\tint l=0,r=1e9;\n\twhile(l<r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tcout<<\"> \"<<mid<<endl;fflush(stdout);\n\t\tint x;\n\t\tcin>>x;\n\t\tif(x==0)\n\t\t{\n\t\t\tr=mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl=mid+1;\n\t\t}\n\t} \n\tcout<<\"> \"<<l<<endl;fflush(stdout);\n\tint x;\n\tcin>>x;\n\tif(x==0)\n\t{\n\t\tl--;\n\t} \n\tfor(int i=1;i<=min(29,n);i++)\n\t{\n\t\tint x=(rand()<<15|rand())%n+1;\n\t\twhile(p[x])\n\t\t{\n\t\t\tx=(rand()<<15|rand())%n+1;\n\t\t}\n\t\tp[x]=1;\n\t\tcout<<\"? \"<<x<<endl;fflush(stdout);\n\t\tint pwp;\n\t\tcin>>pwp;\n\t\tnow[++cnt]=pwp;\n\t}\n\tsort(now+1,now+cnt+1);\n\tint d=now[2]-now[1];\n\tfor(int i=3;i<=cnt;i++)\n\t{\n\t\td=gcd(d,abs(now[i]-now[i-1]));\n\t}\n\tl=l-(n-1)*d;\n\tcout<<\"! \"<<l+1<<\" \"<<d<<endl;fflush(stdout);\n}\n```\n[\u8fd9\u4e00\u573acf\u7684\u9898\u89e3\uff0c\u6253\u4e2a\u5e7f\u544a](https://decorationqwq.com/archives/324/)",
        "postTime": 1551450447,
        "uid": 48265,
        "name": "decoqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1114E \u3010Arithmetic Progression\u3011"
    }
]