[
    {
        "content": "\u5728\u6211\u7684\u535a\u5ba2\u4e0a\u770b\u6548\u679c\u66f4\u4f73\uff1a[\u70b9\u8fd9\u91cc](https://www.cnblogs.com/1000Suns/p/10362224.html)\n\n\u660e\u663e\u7ebf\u6bb5\u6811\u3002\n\n\u6709\u4e00\u4e2a\u60f3\u6cd5\u662f\u7ef4\u62a4\u533a\u95f4\u79ef\u7684\u6b27\u62c9\u51fd\u6570\uff0c\u4f46\u662f\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u4ee3\u7801\u590d\u6742\u5ea6\u90fd\u5f88\u9ad8\u2026\u2026\n\n\u6211\u7684\u505a\u6cd5\u662f\u7ef4\u62a4\u533a\u95f4\u79ef\u3002\u800c\u6b27\u62c9\u51fd\u6570\uff0c\u5c31\u662f\u770b\u770b\u533a\u95f4\u4e2d\u5305\u542b\u4ec0\u4e48\u8d28\u56e0\u5b50\uff0c\u7136\u540e\u9664\u4e00\u4e0b\u4e58\u4e00\u4e0b\u597d\u4e86\u3002\n\n\u533a\u95f4\u79ef\u5c31\u4e0d\u7528\u8bf4\u4e86\u3002\n\n\u5305\u542b\u4ec0\u4e48\u8d28\u56e0\u5b50\uff1f\u96be\u9053\u8981\u5f00bool\u6570\u7ec4\u5417\uff1f\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u9ad8\u2026\u2026\n\n\u7ecf\u8fc7\u540e\u53f0\u9ed1\u79d1\u6280\u64cd\u4f5c\u53d1\u73b0 $300$ \u4ee5\u5185\u7684\u8d28\u6570\u53ea\u6709 $62$ \u4e2a\u3002\u660e\u6446\u7740\u72b6\u538b\u7684\u8282\u594f\uff01\n\n\u597d\u7684\uff0c\u8fd9\u9898\u505a\u5b8c\u4e86\u3002\u7ec6\u8282\u7684\u4e1c\u897f\u5728\u4ee3\u7801\u4e2d\u90fd\u6709\u3002\n\n\u5bf9\u4e8e\u6211\u7684\u4ee3\u7801\u5b9e\u73b0\u6765\u8bf4\uff1a\uff08\u4ee5\u4e0b\u4ee4 $k=62$\uff09\n\n\u5efa\u6811 $O(kn)$\u3002\n\n\u5408\u5e76\u8282\u70b9 $O(1)$\u3002\n\n\u4e0b\u63a8\u6807\u8bb0 $O(\\log n)$\u3002\n\n\u533a\u95f4\u4e58 $O(\\log^2 n+k)$\u3002\n\n\u67e5\u8be2\u6b27\u62c9\u51fd\u6570 $O(\\log n+k)$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O((n+q)k+q\\log^2n)$\u3002\u5176\u5b9e\u8dd1\u5f97\u4e0d\u6162\uff0c\u6211\u8dd1\u5f97\u6700\u6162\u7684\u70b9\u662f1934ms\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=400040,mod=1000000007;\n#define lson o<<1,l,mid\n#define rson o<<1|1,mid+1,r\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define ROF(i,a,b) for(int i=(a);i>=(b);i--)\n#define MEM(x,v) memset(x,v,sizeof(x))\ninline int read(){\n    char ch=getchar();int x=0,f=0;\n    while(ch<'0' || ch>'9') f|=ch=='-',ch=getchar();\n    while(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n    return f?-x:x;\n}\nint n,q,pri[66],pl,a[maxn],inv[333],f[66],tag1[maxn*4];    //tag1\u8868\u793a\u533a\u95f4\u8981\u4e58\u591a\u5c11\nll tag2[maxn*4];    //tag2\u8868\u793a\u533a\u95f4\u4f1a\u591a\u51fa\u54ea\u4e9b\u8d28\u56e0\u5b50\uff08\u4e5f\u662f\u538b\u7f29\u8fc7\u7684\uff09\n//\u4e3a\u4ec0\u4e48\u8981\u4e24\u4e2a\u6807\u8bb0\u5462\uff1f\u4e0d\u80fd\u76f4\u63a5\u5bf9tag1\u5206\u89e3\u8d28\u56e0\u5b50\u5417\uff1f\n//\u56e0\u4e3atag1\u4e58\u51e0\u904d\u5c31\u4f1a\u88ab\u53d6\u6a21\uff0c\u8fd9\u6837\u770b\u8d77\u6765\u8d28\u56e0\u5b50\u5c31\u53d8\u4e86\u3002\u6240\u4ee5\u989d\u5916\u52a0\u4e00\u4e2atag2\u8868\u793a\u771f\u7684\u8d28\u56e0\u5b50\u96c6\u5408\u3002\nbool vis[333];\nvoid init(){\n    FOR(i,2,300){\n        if(!vis[i]) pri[++pl]=i;\n        for(int j=1;j<=pl && i*pri[j]<=300;j++){\n            vis[i*pri[j]]=true;\n            if(i%pri[j]==0) break;\n        }\n    }\n    inv[1]=1;\n    FOR(i,2,300) inv[i]=mod-1ll*(mod/i)*inv[mod%i]%mod;\n    FOR(i,1,pl) f[i]=1ll*inv[pri[i]]*(pri[i]-1)%mod;\n    //f[i]\u8868\u793a\u9664\u4ee5p[i]\uff0c\u518d\u4e58\u4e0ap[i]-1\uff0c\u4fbf\u4e8e\u8ba1\u7b97\u6b27\u62c9\u51fd\u6570\n}\ninline int qpow(int a,int b){\n    int ans=1;\n    for(;b;b>>=1,a=1ll*a*a%mod) if(b&1) ans=1ll*ans*a%mod;\n    return ans;\n}\nstruct node{\n    int pro;ll has;\n}nd[maxn*4];    //\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\uff0cpro\u662f\u533a\u95f4\u79ef\uff0chas\u662f\u533a\u95f4\u5305\u542b\u54ea\u4e9b\u8d28\u56e0\u5b50\uff08\u538b\u7f29\u8fc7\u7684\uff09\nvoid pushup(node &o,node l,node r){    //\u5408\u5e76\n    o.has=l.has|r.has;    //\u76f4\u63a5\u53d6\u6216\n    o.pro=1ll*l.pro*r.pro%mod;\n}\nvoid setmult(int o,int l,int r,int x,ll y){    //\u5bf9\u7b2co\u4e2a\u8282\u70b9\uff08\u7ba1\u8f96[l,r]\uff09\u533a\u95f4\u4e58x\uff0c\u8d28\u56e0\u5b50\u591a\u4e86y\n    tag1[o]=1ll*tag1[o]*x%mod;\n    tag2[o]|=y;\n    nd[o].pro=1ll*nd[o].pro*qpow(x,r-l+1)%mod;    //\u8bb0\u5f97\u4e58r-l+1\u6b21\u65b9\n    nd[o].has|=y;\n}\nvoid pushdown(int o,int l,int r){    //\u4e0b\u4f20\u6807\u8bb0\n    if(!tag2[o]) return;\n    int mid=(l+r)>>1;\n    setmult(lson,tag1[o],tag2[o]);\n    setmult(rson,tag1[o],tag2[o]);\n    tag1[o]=1;tag2[o]=0;    //\u8bb0\u5f97tag1\u95f2\u7f6e\u65f6\u662f1\n}\nvoid build(int o,int l,int r){\n    tag1[o]=1;tag2[o]=0;\n    if(l==r){\n        nd[o].pro=a[l];\n        FOR(i,1,pl)    //\u8bb0\u5f55\u8d28\u56e0\u5b50\u96c6\u5408\n            if(a[l]%pri[i]==0) nd[o].has|=1ll<<(i-1);\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(lson);build(rson);\n    pushup(nd[o],nd[o<<1],nd[o<<1|1]);\n}\nvoid mult(int o,int l,int r,int ql,int qr,int x,ll y){    //\u5916\u9762\u8c03\u7528\u65f6\u5148\u628a\u8d28\u56e0\u5b50\u96c6\u5408\u5f04\u597d\uff0c\u4f1a\u7701\u65f6\u95f4\n    if(l>=ql && r<=qr){\n        setmult(o,l,r,x,y);    //\u76f4\u63a5\u8bbe\u4e0a\n        return;\n    }\n    pushdown(o,l,r);\n    int mid=(l+r)>>1;\n    if(mid>=ql) mult(lson,ql,qr,x,y);\n    if(mid<qr) mult(rson,ql,qr,x,y);\n    pushup(nd[o],nd[o<<1],nd[o<<1|1]);\n}\nnode query(int o,int l,int r,int ql,int qr){\n    if(l>=ql && r<=qr) return nd[o];\n    pushdown(o,l,r);\n    int mid=(l+r)>>1;\n    if(mid<ql) return query(rson,ql,qr);\n    if(mid>=qr) return query(lson,ql,qr);\n    node ans;\n    pushup(ans,query(lson,ql,qr),query(rson,ql,qr));    //\u5408\u5e76\u4e24\u8fb9\n    return ans;\n}\nint main(){\n    init();\n    n=read();q=read();\n    FOR(i,1,n) a[i]=read();\n    build(1,1,n);\n    FOR(i,1,q){\n        char op[11];\n        scanf(\"%s\",op);\n        int l=read(),r=read();\n        if(op[0]=='M'){    //\u4e58\u64cd\u4f5c\n            int x=read();ll y=0;\n            FOR(i,1,pl) if(x%pri[i]==0) y|=1ll<<(i-1);    //\u5148\u5904\u7406\u8d28\u56e0\u5b50\u96c6\u5408\n            mult(1,1,n,l,r,x,y);\n        }\n        else{    //\u6c42\u6b27\u62c9\u51fd\u6570\u64cd\u4f5c\n            node ans=query(1,1,n,l,r);\n            int s=ans.pro;    //\u533a\u95f4\u79ef\n            FOR(i,1,pl) if(ans.has&(1ll<<(i-1))) s=1ll*s*f[i]%mod;    //\u533a\u95f4\u542b\u6709\u7b2ci\u4e2a\u8d28\u6570\uff0c\u90a3\u5c31\u8981\u9664\u4ee5p[i]\uff0c\u518d\u4e58\u4e0ap[i]-1\n            printf(\"%d\\n\",s);\n        }\n    }\n}\n```",
        "postTime": 1551429755,
        "uid": 72118,
        "name": "AThousandSuns",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1114F \u3010Please, another Queries on Array?\u3011"
    },
    {
        "content": "### CF1114F Please, another Queries on Array?\n\n----\n\n### Part 0 \u6709\u8da3\u7684\u4e8b\u60c5\n\n- \u8fd9\u9898\u6211\u5728\u505a\u7684\u65f6\u5019\u67d0\u5904 $l$ \u548c $r$ \u5199\u53cd\u4e86\uff0c\u8c03\u4e86\u4e24\u4e2a\u591a\u5c0f\u65f6\u3002\n- \u4f60\u9700\u8981\u6709\u8db3\u591f\u7684\u8010\u5fc3\u7b49\u5f85\u672c\u9898\u8bc4\u6d4b\u7ed3\u675f\uff0c\u672c\u9898\u5171\u6709 $100$ \u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u70b9 $3$ \u79d2\u5de6\u53f3\u3002\n\n\u90a3\u5c31\u5f00\u59cb\u5427\uff01\n\n---\n\n### Part 1 \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5217\u3001\u4e24\u79cd\u64cd\u4f5c\u3002\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff0c\u5bf9 $[l, r]$ \u5185\u7684\u6240\u6709\u6570\u540c\u4e58\u4ee5 $m$\uff1b\u7b2c\u4e8c\u79cd\u64cd\u4f5c\uff0c\u6c42\u51fa $\\varphi(\\prod\\limits_{i=l}^{r}a_i) \\bmod 1000000007$ \u7684\u503c\u3002\n\n---\n\n### Part 2 \u9898\u76ee\u5206\u6790\n\n\u7531\u533a\u95f4\u4fee\u6539\u3001\u67e5\u8be2\u60f3\u5230\u7ebf\u6bb5\u6811\u3002\n\n\u533a\u95f4\u4e58\u662f\u5f88\u5e38\u89c1\u7684\u4e00\u79cd\u7ebf\u6bb5\u6811\u64cd\u4f5c\uff0c\u4f46 \u6c42\u533a\u95f4\u79ef\u7684\u6b27\u62c9\u51fd\u6570 \u6bd4\u8f83\u96be\u5904\u7406\u3002\n\n----\n\n#### \u96be\u70b9 1: \u5982\u4f55\u6c42\u6b27\u62c9\u51fd\u6570\n\n\u4f5c\u4e3a\u4e00\u4e2a\u5565\u6570\u8bba\u90fd\u4e0d\u4f1a\u7684\u83dc\u9e21\uff0c\u6211\u770b\u4e86\u4e00\u4e0b\u6b27\u62c9\u516c\u5f0f\u7684\u5b9a\u4e49\uff1a\n\n> $\\varphi(n)$ \u4e3a $1\\dots n$ \u4e2d\u4e0e $n$ \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u800c\u968f\u4fbf bdfs \u5373\u53ef\u5f97\u5230\u6b27\u62c9\u516c\u5f0f\u7684\u6c42\u6cd5\uff1a\n\n$$\\varphi(x)=x\\cdot\\prod_{i=1}^n(\\dfrac{p_i-1}{p_i})\\ (p_1, p_2, \\dots p_n \\text{\u4e3a } x \\text{ \u7684\u6240\u6709\u8d28\u56e0\u6570})$$\n\n\u56e0\u4e3a\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c$x$ \u9700\u8981\u53d6\u6a21\uff0c\u6700\u7ec8\u5f97\u5230\u7684 $x$ \u5e76\u4e0d\u662f\u539f\u6765\u7684 $x$\uff0c\u4e0d\u80fd\u4fdd\u8bc1 $p$ \u4e00\u5b9a\u80fd\u88ab $x$ \u6574\u9664\u3002\u6240\u4ee5\u540e\u9762\u7684\u6bcf\u4e2a $\\dfrac{p - 1}{p}$ \u9700\u8981\u63d0\u524d\u8fdb\u884c\u8ba1\u7b97\uff0c\u5f53\u8fdb\u884c\u67e5\u8be2\u64cd\u4f5c\u7684\u65f6\u5019\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u6709\u7406\u6570\u53d6\u6a21\u7684\u95ee\u9898\u4e86\uff0c\u4e0d\u4e86\u89e3\u7684\u53ef\u4ee5\u8f6c\u5230  [P2613](https://www.luogu.com.cn/problem/P2613)\u3002\n\n----\n\n#### \u96be\u70b9 2: \u5982\u4f55\u627e\u51fa\u4e00\u4e2a\u6570\u7684\u6240\u6709\u8d28\u56e0\u6570\n\n\u627e\u51fa\u6240\u6709\u7684\u8d28\u56e0\u6570\uff0c\u624d\u80fd\u8fdb\u884c\u6b27\u62c9\u51fd\u6570\u7684\u8ba1\u7b97\u3002\n\n\u5176\u5b9e\u5927\u4f53\u601d\u8def\u6bd4\u8f83\u597d\u60f3\uff0c\u5c31\u662f\u9664\u4e86\u533a\u95f4\u4e58\u79ef\u4ee5\u5916\uff0c\u7ebf\u6bb5\u6811\u5185\u518d\u7ef4\u62a4\u4e00\u4e9b\u6570\u636e\u2014\u2014\u533a\u95f4\u4e58\u79ef\u5305\u62ec\u54ea\u4e9b\u8d28\u56e0\u6570\u3002\u5177\u4f53\u5b9e\u73b0\u7684\u8bdd\uff0c\u4f7f\u7528\u72b6\u6001\u538b\u7f29\u7684\u6982\u5ff5\u4f1a\u6bd4\u8f83\u5bb9\u6613\u3002$300$ \u5185\u6709 $62$ \u4e2a\u8d28\u6570\uff0c\u800c $2^{62}$ \u6070\u597d\u5728 `long long` \u7684\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u4e00\u4e2a\u6570\u7684\u8d28\u56e0\u6570\u7684\u60c5\u51b5\u538b\u7f29\u5230\u4e00\u4e2a `long long` \u5185\uff08\u6682\u4e14\u53eb\u8fd9\u4e2a\u6570\u4e3a\u201c\u8d28\u56e0\u6570\u72b6\u6001\u201d\u5427\uff09\u3002\n\n\u5f53\u7136\uff0c\u540c\u65f6\u4e5f\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u76f8\u5e94\u7684 lazytag\u3002\u8fd9\u4e00\u5757\u4ee3\u7801\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742\uff0c\u4e00\u5b9a\u4e0d\u8981\u628a\u7ec6\u8282\u5199\u9519\u4e86\u3002\n\n### Part 3 \u653e\u8fdb\u7ebf\u6bb5\u6811\u677f\u5b50\u91cc\u91cd\u65b0\u6574\u7406\u601d\u8def\u548c\u6ce8\u610f\u70b9\n\n#### \u521d\u59cb\u5316\n\n- \u6240\u6709\u4e58\u6cd5 lazytag \u4e3a 1\uff1b\n- \u6240\u6709\u8d28\u56e0\u6570\u72b6\u6001\u76f8\u5173\u7684\u53d8\u91cf\u5168\u90fd\u8bbe\u4e3a 0\u3002\n- \u53ef\u4ee5\u63d0\u524d\u7b97\u597d $300$ \u4ee5\u5185\u7684\u8d28\u6570\u3002\n\n#### update \u64cd\u4f5c\n\n- update \u64cd\u4f5c\u91cc\uff0c\u9664\u4e86\u66f4\u65b0\u5f53\u524d\u533a\u95f4\u7684\u4e58\u79ef\u4ee5\u5916\uff0c\u8fd8\u8981\u66f4\u65b0\u5176\u4e58\u79ef\u6240\u542b\u7684\u8d28\u56e0\u6570\u72b6\u6001\uff1b\n- \u53ef\u4ee5\u65b0\u52a0\u4e00\u4e2a\u53c2\u6570\u201c\u8d28\u56e0\u6570\u72b6\u6001\u201d\uff0c\u65b9\u4fbf\u64cd\u4f5c\u3002\n\n#### query \u64cd\u4f5c\n\n- query \u64cd\u4f5c\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\uff08\u56e0\u4e3a\u8ba1\u7b97\u6b27\u62c9\u51fd\u6570\u65f6\u65e2\u9700\u8981\u7528\u4e58\u79ef\u4e5f\u9700\u8981\u7528\u8d28\u56e0\u6570\uff0c\u4e0d\u80fd\u53ea\u8fd4\u56de\u4e00\u4e2a\uff09\n\n#### pushUp \u64cd\u4f5c\n\n- \u7236\u4eb2\u7684\u4e58\u79ef $=$ \u5de6\u513f\u5b50\u4e58\u79ef $\\times$ \u53f3\u513f\u5b50\u4e58\u79ef\uff1b\n- \u7236\u4eb2\u7684\u8d28\u56e0\u6570\u72b6\u6001 $=$ \u5de6\u513f\u5b50\u8d28\u56e0\u6570\u72b6\u6001 \u6309\u4f4d\u6216 \u53f3\u513f\u5b50\u8d28\u56e0\u6570\u72b6\u6001\uff1b\n\n#### pushDown \u64cd\u4f5c\n\n- \u5b50\u6811\u7684\u4e58\u79ef\u4e58\u4ee5\u7236\u4eb2\u7684\u4e58\u6cd5 lazytag \u7684\u5b50\u6811\u533a\u95f4\u957f\u5ea6\u6b21\u65b9\uff0c\u5b50\u6811\u7684\u4e58\u6cd5 lazytag \u4e58\u4ee5\u7236\u4eb2\u7684\u4e58\u6cd5 lazytag\uff1b\n- \u5b50\u6811\u7684\u8d28\u56e0\u6570\u72b6\u6001\u548c\u5b83\u7684 lazytag \u90fd\u6309\u4f4d\u6216\u4e0a\u7236\u4eb2\u7684\u8d28\u56e0\u6570\u72b6\u6001 lazytag\uff1b\n- \u4e58\u6cd5\u7684 lazytag \u7f6e 1\uff0c\u8d28\u56e0\u6570\u72b6\u6001\u7684 lazytag \u7f6e 0\u3002\n- \u53d6\u6a21\u522b\u5fd8\u4e86\u3002\n\n#### \u4e3b\u7a0b\u5e8f\n\n- \u9700\u8981\u63d0\u524d\u9884\u5904\u7406\u8ba1\u7b97\u6b27\u62c9\u51fd\u6570\u6240\u9700\u7684\u503c\uff1b\n- \u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\u4e4b\u524d\uff0c\u5148\u627e\u51fa\u4e58\u4e0a\u7684\u90a3\u4e2a\u6570\u7684\u6240\u6709\u7684\u8d28\u56e0\u6570\uff0c\u538b\u7f29\u6210\u4e00\u4e2a\u72b6\u6001\uff0c\u4f20\u5165 update \u51fd\u6570\uff1b\n- \u8fdb\u884c\u67e5\u8be2\u64cd\u4f5c\u4e4b\u540e\uff0c\u8981\u7b97\u51fa\u6b27\u62c9\u51fd\u6570\u7684\u503c\u3002\n\n\n### Part 4 Code\n\n```cpp\n#include <cstdio>\n#define int long long\n#define MOD 1000000007\nint mi(int a, int b, int mo); // \u5feb\u901f\u5e42\uff0c\u4e0d\u8d34\u4ee3\u7801\u4e86\nint read(); // \u5feb\u8bfb\uff0c\u4e0d\u8d34\u4ee3\u7801\u4e86\nint readOpt() { // \u8bfb\u64cd\u4f5c\u7c7b\u578b\uff08\u4fee\u6539\u64cd\u4f5c\u8fd4\u56de 1\uff0c\u67e5\u8be2\u64cd\u4f5c\u8fd4\u56de 2\uff09\n\tchar ch = getchar(); int ans;\n\twhile (ch < 'A' || ch > 'Z') ch = getchar();\n\tif (ch == 'T') return 2;\n\telse return 1;\n}\nstruct Node {\n\tint val; int p;\n\tint lazy, lazyP;\n\tNode() { val = 1; lazy = 1; p = 0; lazyP = 0; }\n} xds[1600007]; // \u7ebf\u6bb5\u6811\u7ed3\u70b9\nint n, q;\nint a[1600007];\nint f[1001], inv[1001];\nint prime[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293};\nvoid pushUp(int x) {\n\txds[x].val = xds[x * 2].val * xds[x * 2 + 1].val % MOD;\n\txds[x].p = xds[x * 2].p | xds[x * 2 + 1].p;\n}\nvoid pushDown(int x, int l, int m, int r) {\n\t// \u66f4\u65b0\u5b50\u6811\u4e58\u79ef\n    xds[x * 2].val = xds[x * 2].val * mi(xds[x].lazy, m - l + 1, MOD) % MOD;\n    xds[x * 2 + 1].val = xds[x * 2 + 1].val * mi(xds[x].lazy, r - m, MOD) % MOD;\n    // \u66f4\u65b0\u5b50\u6811\u4e58\u6cd5 lazytag\n    xds[x * 2].lazy = xds[x * 2].lazy * xds[x].lazy % MOD;\n    xds[x * 2 + 1].lazy = xds[x * 2 + 1].lazy * xds[x].lazy % MOD;\n    // \u66f4\u65b0\u5b50\u6811\u8d28\u56e0\u6570\u72b6\u6001\n    xds[x * 2].p |= xds[x].lazyP;\n    xds[x * 2 + 1].p |= xds[x].lazyP;\n    // \u66f4\u65b0\u5b50\u6811\u8d28\u56e0\u6570\u72b6\u6001 lazytag\n    xds[x * 2].lazyP |= xds[x].lazyP;\n    xds[x * 2 + 1].lazyP |= xds[x].lazyP;\n\txds[x].lazy = 1;\n\txds[x].lazyP = 0;\n}\nvoid build(int l, int r, int x) {\n\tif (l == r) {\n\t\txds[x].val = a[l];\n\t\tfor (int i = 0; i < 62; ++i)\n\t\t\tif (a[l] % prime[i] == 0)\n\t\t\t\txds[x].p |= (1ll) << i; // \u627e\u51fa\u6240\u6709\u8d28\u56e0\u6570\n\t\treturn;\n\t}\n\tconst int m = (l + r) >> 1;\n\tbuild(l, m, x * 2);\n\tbuild(m + 1, r, x * 2 + 1);\n\tpushUp(x);\n}\nvoid update(int x, int l, int r, int delta /* \u4e58\u4e0a\u7684\u6570 */, int prime /* \u5373\u8d28\u56e0\u6570\u72b6\u6001 */, int cl, int cr) {\n\tif (cl > r || cr < l) return;\n\tif (l <= cl && cr <= r) {\n\t\txds[x].val = xds[x].val * mi(delta, cr - cl + 1, MOD) % MOD;\n\t\txds[x].lazy = xds[x].lazy * delta % MOD;\n\t\txds[x].p |= prime;\n\t\txds[x].lazyP |= prime;\n\t\treturn;\n\t}\n\tconst int m = (cl + cr) >> 1;\n\tpushDown(x, cl, m, cr);\n\tupdate(x * 2, l, r, delta, prime, cl, m);\n\tupdate(x * 2 + 1, l, r, delta, prime, m + 1, cr);\n\tpushUp(x);\n}\nNode query(int x, int l, int r, int cl, int cr) {\n\tif (cl > r || cr < l) return Node();\n\tif (l <= cl && r >= cr) { return xds[x]; }\n\tconst int m = (cl + cr) >> 1;\n\tpushDown(x, cl, m, cr);\n\tNode n; Node ll = query(x * 2, l, r, cl, m); Node rr = query(x * 2 + 1, l, r, m + 1, cr);\n\tn.val = ll.val * rr.val % MOD;\n\tn.p = ll.p | rr.p;\n\treturn n;\n}\nsigned main() {\n\tn = read(), q = read();\n\tfor (int i = 1; i <= n; ++i) a[i] = read();\n\tbuild(1, n, 1);\n\t\n\t// \u8ba1\u7b97\u6bcf\u4e2a (p - 1) / p \u7684\u7ed3\u679c\n\tinv[1] = 1;\n\tfor (int i = 2; i <= 300; ++i)\n\t\tinv[i] = MOD - (MOD / i) * inv[MOD % i] % MOD;\n\tfor (int i = 0; i < 62; ++i)\n\t\tf[i] = inv[prime[i]] * (prime[i] - 1) % MOD;\n\n\tfor (int i = 1; i <= q; i += 1) {\n\t\tint opt = readOpt(), x = read(), y = read();\n\t\tif (opt == 1) {\n\t\t\tint k = read();\n\t\t\tint t = 0;\n\t\t\tfor (int i = 0; i < 62; ++i)\n\t\t\t\tif (k % prime[i] == 0)\n\t\t\t\t\tt |= (1ll) << i; // \u627e\u51fa\u6240\u6709\u8d28\u56e0\u6570\n\t\t\tupdate(1, x, y, k, t, 1, n);\n\t\t} else {\n\t\t\tNode ans = query(1, x, y, 1, n);\n\t\t\t// \u7b97\u6b27\u62c9\u51fd\u6570\n\t\t\tint phi = ans.val;\n\t\t\tfor (int i = 0; i < 62; ++i) {\n\t\t\t\tif (ans.p >> i & 1) {\n\t\t\t\t\tphi = phi * f[i] % MOD;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%lld\\n\", phi % MOD);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1619962539,
        "uid": 357545,
        "name": "CGDGAD",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1114F \u3010Please, another Queries on Array?\u3011"
    },
    {
        "content": "[$\\tt Link$](/problem/CF1114F \"CF1114F Please, another Queries on Array?\")\u3002\n\n\u795e\u4ed9\u9898/se/se\n\n\u6211\u4eec\u6709 $\\varphi$ \u7684\u516c\u5f0f\uff1a\u8bbe $n=\\alpha_1^{\\beta_1}\\alpha_2^{\\beta_2}\\cdots \\alpha_n^{\\beta_n}$\uff0c  \u90a3\u4e48\n\n$$\\varphi(n)=n\\times\\prod_{i=1}\n^n\\dfrac{\\alpha_i-1}{\\alpha_i}$$\n\n\u90a3\u4e48\u7b54\u6848\u53ef\u4ee5\u5206\u6210\u4e24\u90e8\u5206\uff1a\u533a\u95f4\u4e58\u79ef\u4ee5\u53ca\u540e\u9762\u7684 $\\displaystyle\\prod_{i=1}\n^n\\dfrac{\\alpha_i-1}{\\alpha_i}$\u3002\n\n\u524d\u8005\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4e58\u79ef\uff0c\u540e\u8005\u600e\u4e48\u529e\uff1f\n\n\u56e0\u4e3a $a_i$ \u4ee5\u53ca\u4e58\u6cd5\u64cd\u4f5c\u7684 $x$ \u90fd $\\le300$\uff0c\u6240\u4ee5\u5206\u89e3\u51fa\u6765\u7684 $\\alpha_i\\le300$\u3002\n\n$300$ \u4ee5\u5185\u7684\u8d28\u6570\u6709 $62$ \u4e2a\uff0c\u53ef\u4ee5\u4f7f\u7528 `long long` \u8fdb\u884c\u72b6\u6001\u538b\u7f29\uff0c\u6bcf\u4f4d\u4ee3\u8868\u6709\u6ca1\u6709\u3002\n\n\u90a3\u4e48\u8fd8\u662f\u5728\u521a\u521a\u7684\u90a3\u68f5\u7ebf\u6bb5\u6811\u4e0a\uff0c\u7ef4\u62a4\u533a\u95f4\u7684\u8d28\u56e0\u6570\u72b6\u538b\u96c6\u5408\uff0c\u7136\u540e\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u6309\u4f4d\u6216\u533a\u95f4\u6309\u4f4d\u6216\u7684\u7ed3\u679c\uff0c\u7ebf\u6bb5\u6811\u505a\u5b8c\u4e86\u3002\n\n---\n\n> \u4e00\u5e74\u524d\uff0c\u6211\u6298\u621f\u6c89\u6c99\u3002\n> \n> \u4e00\u5e74\u540e\uff0c\u6211\u5728\u722c\u8d77\u7684\u5730\u65b9\u5012\u4e0b\u3002\n\n[![](https://img-blog.csdnimg.cn/67af2b0312de466a956f8b13c58d10e2.png)](https://www.luogu.com.cn/record/list?pid=CF1114F&user=368107 \"\u6d1b\u8c37\u63d0\u4ea4\u8bb0\u5f55\")\n\n[$\\tt CF\\ submission$](https://codeforces.com/contest/1114/submission/137883911 \"CF \u63d0\u4ea4\u8bb0\u5f55\")\u3002\n\n\u4e3a\u4ec0\u4e48\u4e00\u5e74\u524d\u7684 Code \u53c8\u81ed\u53c8\u957f\u554a\uff08\u5927\u60b2\uff09\u3002",
        "postTime": 1663991386,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "CF1114F \u7ebf\u6bb5\u6811+\u6570\u5b66"
    },
    {
        "content": "- \u9898\u76ee\u5927\u610f\uff1a\n\n1. \u533a\u95f4\u4fee\u6539\uff1a$a_i=a_i\\times c,i\\in[l,r]$\n2. \u533a\u95f4\u8be2\u95ee\uff1a$\\varphi(\\prod\\limits_{i=l}^{r}a_i)\\mod (10^9+7)$\n\n- $\\mathtt{Solution:}$\n\n\u53bb [oi wiki](https://oi-wiki.org//math/number-theory/euler/) \u4e0a\u9762\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a $\\varphi$ \u7684\u6c42\u6cd5\uff1a\n\n$$\\varphi(n)=n\\prod\\limits_{i=1}^{m}\\frac{p_i-1}{p_i}$$\n\n$m$ \u8868\u793a $n$ \u8d28\u56e0\u5b50\u4e2a\u6570\uff0c$p$ \u7684\u957f\u5ea6\u4e3a $m$\uff0c\u8868\u793a $n$ \u7684\u6240\u6709\u8d28\u56e0\u5b50\u3002\n\n\u4ee5\u4e0a\u67ff\u5b50\u7684\u8bc1\u660e\u7701\u7565\uff0c\u5fc5\u8981\u7684\u53ef\u4ee5\u53bb\u4e0a\u9762\u7684\u94fe\u63a5\u770b\u3002\n\n\u65e2\u7136\u662f\u548c\u8d28\u56e0\u5b50\u6709\u5173\uff0c\u90a3\u5c31\u5148\u628a\u8d28\u6570\u7b5b\u51fa\u6765\u3002\n\n\u7531\u4e8e\u9898\u76ee\u8bf4 $a_i,x\\le 300$ \u4e8e\u662f\u6211\u4eec\u53d1\u73b0 $300$ \u4ee5\u5185\u7684\u8d28\u6570\u53ea\u6709 $62$ \u4e2a\uff0c\u8003\u8651\u538b\u7f29\u6210\u4e8c\u8fdb\u5236\u6570\u7684\u8bdd\u6b63\u597d\u5728 `long long` \u7684\u8303\u56f4\u4e4b\u5185\u3002\u6240\u4ee5\u5148\u9884\u5904\u7406\u51fa $p_i,inv_i,tp_i=\\frac{p_i-1}{p_i}\\mod (10^9+7)$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u8868\u793a $k$ \u7684\u8d28\u56e0\u5b50\u72b6\u6001\uff0c\u5982\u679c $k$ \u6709\u8fd9\u4e2a\u8d28\u56e0\u5b50\u90a3\u5c31\u6253\u4e0a $1$\uff0c\u5426\u5219\u662f $0$\u3002\u4e24\u4e2a\u6570\u76f8\u4e58\u7684\u65f6\u5019\u7531\u4e8e\u4e0d\u8003\u8651\u67d0\u4e2a\u8d28\u56e0\u5b50\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u628a\u5b83\u4eec\u7684\u8d28\u56e0\u5b50\u7ec4\u6210\u7684 $01$ \u4e8c\u8fdb\u5236\u6570\u6309\u4f4d\u6216\u5373\u53ef\u3002\n\n\u4e8e\u662f\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\u7ef4\u62a4 $4$ \u4e2a\u4fe1\u606f\uff1a\u533a\u95f4\u4e58\u79ef\uff0c\u4e58\u79ef\u7684 `lazy tag` \uff0c\u533a\u95f4\u4e58\u79ef\u7684\u8d28\u56e0\u5b50\u60c5\u51b5\uff0c\u4ee5\u53ca\u533a\u95f4\u4e58\u79ef\u7684\u8d28\u56e0\u5b50\u60c5\u51b5\u7684 `lazy tag` \uff0c\u533a\u95f4\u4e58\u6570\u7684\u65f6\u5019\u533a\u95f4\u4e58\u79ef\u548c\u4e58\u79ef\u7684 `tag` \u5f88\u597d\u7ef4\u62a4\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u4e58\u4e0a\u7684\u6570\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u7b97\u51fa\u8fd9\u4e2a\u6570\u7684\u8d28\u56e0\u5b50\u60c5\u51b5\u548c\u5f53\u524d\u533a\u95f4\u7684\u8d28\u56e0\u5b50\u60c5\u51b5\u6309\u4f4d\u6216\u8d77\u6765\uff0c\u6700\u540e\u6253\u4e0a\u6807\u8bb0\u5c31\u884c\u4e86\u3002\n\n- $\\mathtt{Pay\\ attention:}$\n\n1. \u521d\u59cb\u5316 `tr[x].pd = tr[x].lz = 1, tr[x].fc = tr[x].lf = 0`\uff1a`pd` \u8868\u793a\u8282\u70b9\u4ee3\u8868\u533a\u95f4\u7684\u4e58\u79ef\uff08product\uff09\uff0c`lz` \u4e3a\u4e58\u79ef\u7684 tag \uff0c `fc` \u4e3a\u8d28\u56e0\u5b50\u60c5\u51b5\uff08factor\uff09\uff0c`lf` \u4e3a\u8d28\u56e0\u5b50\u60c5\u51b5\u7684 tag \u3002\u7531\u4e8e\u662f\u533a\u95f4\u4e58\u6cd5\uff0c `pd` \u548c `lz` \u4e00\u5f00\u59cb\u8d4b $1$ \uff1b\u7531\u4e8e\u662f\u533a\u95f4\u6216\uff0c `fc` \u4e0e `lf` \u4e00\u5f00\u59cb\u8d4b $0$\u3002\n2. \u5f00 `long long` \uff0c\u5de6\u79fb\u548c\u53f3\u79fb\u8981\u5199\u6210 `(1ll) << k` \u6216 `(1ll) >> k` \uff0c\u5426\u5219\u7206 `int`\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\n\ninline int read() {\n    int w = 1, q = 0;\n    char ch = ' ';\n    while (ch != '-' && (ch < '0' || ch > '9')) ch = getchar();\n    if (ch == '-') w = -1, ch = getchar();\n    while (ch >= '0' && ch <= '9') q = q * 10 + ch - '0', ch = getchar();\n    return w * q;\n}\n\ninline void write(int x) {\n    if (x < 0) {\n        x = ~(x - 1);\n        putchar('-');\n    }\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + '0');\n}\n\nint ksm(int p, int q, int mod) {\n\tint res = 1;\n\twhile (q) {\n\t\tif (q & 1) res = res * p % mod;\n\t\tp = p * p % mod;\n\t\tq >>= 1;\n\t}\n\treturn res;\n}\n\nconst int maxp = 1010;\nconst int maxn = 4e5 + 400;\nconst int mod = 1e9 + 7;\nint n, m, cnt, s[maxn], pr[maxp], inv[maxp], tp[maxp];\nbool v[maxp];\n\nvoid init() {// \u9884\u5904\u7406\u3002\n\tinv[1] = 1;\n\tfor (int i = 2; i <= 300; i++) {\n\t\tif (!v[i]) pr[cnt++] = i;\n\t\tfor (int j = 0; j <= cnt - 1 && i * pr[j] <= 300; j++) {\n\t\t\tv[i * pr[j]] = 1;\n\t\t\tif (i % pr[j] == 0) break;\n\t\t}\n\t}\n\tfor (int i = 2; i <= 300; i++) inv[i] = (mod - mod / i) * inv[mod % i] % mod;\n\tfor (int i = 0; i <= cnt - 1; i++) tp[i] = inv[pr[i]] * (pr[i] - 1) % mod;\n}\n\n#define ls (x << 1)\n#define rs (x << 1 | 1)\n\nstruct segtree {\n\tint pd, lz, fc, lf;\n\tsegtree () { pd = lz = 1, fc = lf = 0; }// \u521d\u59cb\u5316\u3002\n} tr[maxn << 2];\n\nvoid pushup(int x) { tr[x].pd = tr[ls].pd * tr[rs].pd % mod, tr[x].fc = tr[ls].fc | tr[rs].fc; }// \u4e0a\u4f20\u4fe1\u606f\u3002\nvoid pushdown(int l, int r, int x) {// \u4e0b\u4f20 lazy tag\u3002\n\tint mid = (l + r) >> 1;\n\ttr[ls].pd = tr[ls].pd * ksm(tr[x].lz, mid - l + 1, mod) % mod;\n\ttr[rs].pd = tr[rs].pd * ksm(tr[x].lz, r - mid, mod) % mod;\n\ttr[ls].lz = tr[ls].lz * tr[x].lz % mod;\n\ttr[rs].lz = tr[rs].lz * tr[x].lz % mod;\n\ttr[ls].fc |= tr[x].lf, tr[rs].fc |= tr[x].lf;\n\ttr[ls].lf |= tr[x].lf, tr[rs].lf |= tr[x].lf;\n\ttr[x].lz = 1, tr[x].lf = 0;\n}\n\nvoid build(int l, int r, int x) {// \u5efa\u6811\u3002\n\tif (l == r) {\n\t\ttr[x].pd = s[l];\n\t\tfor (int i = 0; i <= cnt - 1; i++) {// \u5206\u6790\u8d28\u56e0\u5b50\u60c5\u51b5\uff0c\u4e0b\u540c\u3002\n\t\t\tif (s[l] % pr[i] == 0) tr[x].fc |= ((1ll) << i);\n\t\t}\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(l, mid, ls);\n\tbuild(mid + 1, r, rs);\n\tpushup(x);\n}\n\nvoid update(int l, int r, int s, int t, int c, int f, int x) {// \u533a\u95f4\u66f4\u65b0\u3002\n\tif (s <= l && r <= t) {\n\t\ttr[x].pd = tr[x].pd * ksm(c, r - l + 1, mod) % mod;\n\t\ttr[x].lz = tr[x].lz * c % mod;\n\t\ttr[x].fc |= f, tr[x].lf |= f;\n\t\treturn;\n\t}\n\tpushdown(l, r, x);\n\tint mid = (l + r) >> 1;\n\tif (s <= mid) update(l, mid, s, t, c, f, ls);\n\tif (t > mid) update(mid + 1, r, s, t, c, f, rs);\n\tpushup(x);\n}\n\nsegtree query(int l, int r, int s, int t, int x) {// \u533a\u95f4\u67e5\u8be2\u3002\n\tif (s <= l && r <= t) return tr[x];\n\tpushdown(l, r, x);\n\tint mid = (l + r) >> 1;\n\tif (s <= mid && t <= mid) return query(l, mid, s, t, ls);\n\tif (s > mid && t > mid) return query(mid + 1, r, s, t, rs);\n\tif (s > mid && t <= mid) return segtree();\n\tif (s <= mid && t > mid) {\n\t\tsegtree res = segtree(), lres = query(l, mid, s, t, ls), rres = query(mid + 1, r, s, t, rs);\n\t\tres.pd = lres.pd * rres.pd % mod;\n\t\tres.fc = lres.fc | rres.fc;\n\t\treturn res;\n\t} \n}\n\nsigned main() {\n\tinit();\n\tn = read();\n\tm = read();\n\tfor (int i = 1; i <= n; i++) s[i] = read();\n\tbuild(1, n, 1);\n\tfor (int i = 1, x, y, z, f; i <= m; i++) {\n\t\tchar op[20]; scanf(\"%s\", op + 1);\n\t\tx = read(), y = read();\n\t\tif (op[1] == 'M') {\n\t\t\tz = read(), f = 0;\n\t\t\tfor (int j = 0; j <= cnt - 1; j++) {\n\t\t\t\tif (z % pr[j] == 0) f |= ((1ll) << j);\n\t\t\t}\n\t\t\tupdate(1, n, x, y, z, f, 1);\n\t\t} else {\n\t\t\tsegtree ress = query(1, n, x, y, 1);\n\t\t\tint ans = ress.pd;\n\t\t\tfor (int j = 0; j <= cnt - 1; j++) {\n\t\t\t\tif ((ress.fc >> j) & 1) ans = ans * tp[j] % mod;\n\t\t\t}\n\t\t\twrite(ans);\n\t\t\tputs(\"\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1637278158,
        "uid": 306573,
        "name": "Ender32k",
        "ccfLevel": 0,
        "title": "CF1114F Please, another Queries on Array? \u9898\u89e3"
    },
    {
        "content": "# \u524d\u7f6e\u829d\u58eb\n\n1. \u6b27\u62c9\u51fd\u6570\u7684\u8ba1\u7b97\u65b9\u6cd5\n2. \u7ebf\u6bb5\u6811\n3. \u5feb\u901f\u5e42\n4. ~~\u5361\u5e38\u6280\u5de7~~\n\n# \u89e3\u9898\u601d\u8def\n\n\u9996\u5148\u8981\u77e5\u9053\u6b27\u62c9\u51fd\u6570\u7684\u8ba1\u7b97\u65b9\u5f0f\u3002\n\n$\u03c6(n)=n\\times\\prod\\limits_{i=1}^k\\dfrac{p_i-1}{p_i}$\n\n\u5176\u4e2d $p$ \u4e3a $n$ \u5168\u90e8\u8d28\u56e0\u5b50\u7ec4\u6210\u7684\u5e8f\u5217\uff0c$k$ \u4e3a $n$ \u4e0d\u540c\u8d28\u56e0\u5b50\u7684\u4e2a\u6570\u3002\n\n\u73b0\u5728\u9898\u76ee\u8ba9\u6211\u4eec\u8ba1\u7b97 $\u03c6(a_l\\times a_{l+1}\\dots \\times a_r)$\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97 $((a_l\\times a_{l+1}\\dots \\times a_r)\\times\\prod\\limits_{i=1}^k\\dfrac{p_i-1}{p_i}) \\bmod 10^9+7$\uff0c\u540c\u65f6\u6709\u533a\u95f4\u4e58\u6cd5\u4fee\u6539\u64cd\u4f5c\u3002\n\n\u663e\u7136\u524d\u9762\u7684 $(a_l\\times a_{l+1}\\dots \\times a_r)$ \u8fd9\u4e00\u5806\u4e1c\u897f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u5c31\u5728\u4e8e\u600e\u4e48\u6c42 $(\\prod\\limits_{i=1}^k\\dfrac{p_i-1}{p_i})\\bmod 10^9+7$\u3002\u663e\u7136 \uff1a\n$$\n(\\prod\\limits_{i=1}^k\\dfrac{p_i-1}{p_i})\\bmod 10^9+7=(\\prod\\limits_{i=1}^k(\\dfrac{p_i-1}{p_i}\\bmod 10^9+7))\\bmod 10^9+7\n$$\n\n\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e00\u5806\u4e1c\u897f\u53ea\u4e0e\u533a\u95f4\u4e58\u79ef\u7684\u8d28\u56e0\u5b50\u662f\u54ea\u51e0\u4e2a\u6709\u5173\uff0c\u4e0e\u6bcf\u4e2a\u8d28\u56e0\u5b50\u6709\u51e0\u4e2a\u65e0\u5173\u3002\u540c\u65f6\u9898\u76ee\u7ea6\u675f $a_i\\le 300$\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u4f1a\u51fa\u73b0\u8d85\u8fc7 300 \u7684\u8d28\u6570\u30021 \u5230 300 \u4e2d\u4e00\u5171\u670962\u4e2a\u8d28\u6570\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a `long long` \u628a\u72b6\u6001\u538b\u7f29\uff08\u76f8\u5f53\u4e8e\u4ee5\u65f6\u95f4\u6362\u7a7a\u95f4\uff0c\u6bd5\u7adf\u628a\u8fd9\u4e2a\u538b\u7f29\u72b6\u6001\u518d\u8fd8\u539f\u9700\u8981 $\\log$ \u7ea7\u522b\u7684\u65f6\u95f4\uff0c\u4f46\u80fd\u8282\u7701\u5927\u91cf\u7a7a\u95f4\uff09\u3002\u6bd4\u5982 $(000\\dots 01011)_2$ \u5c31\u8868\u793a\u8fd9\u4e2a\u6570\u6709\u8d28\u56e0\u5b50 2\u30013\u30017\u3002\n\n\u90a3\u4e48\u73b0\u5728\u7b2c\u4e8c\u5806\u4e1c\u897f\u5982\u4f55\u7ef4\u62a4\u5c31\u5f88\u660e\u6717\u4e86\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u6bb5\u533a\u95f4\u6709\u54ea\u51e0\u4e2a\u8d28\u56e0\u5b50\uff0c\u533a\u95f4\u4e58\u6cd5\u4fee\u6539\u7684\u65f6\u5019\u5c31\u628a\u8fd9\u4e00\u6bb5\u533a\u95f4\u7684\u6240\u6709\u538b\u7f29\u72b6\u6001\u5168\u90e8 $or$ \u4e0a $x$ \u7684\u538b\u7f29\u72b6\u6001\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f $or$\uff0c\u56e0\u4e3a\u4e24\u4e2a\u538b\u7f29\u72b6\u6001\u5408\u5e76\u7684\u65f6\u5019\uff08\u6211\u4eec\u5047\u8bbe\u6570 $a$ \u548c\u6570 $b$ \u5408\u5e76\uff09\uff0c\u5982\u679c\u8d28\u6570 $p$ \u662f $a$ \u7684\u8d28\u56e0\u6570\u6216\u8005\u662f $b$ \u7684\u8d28\u56e0\u6570\uff0c\u90a3\u4e48\u5408\u5e76\u540e\u80af\u5b9a\u4e5f\u6709 $p$ \u8fd9\u4e2a\u8d28\u56e0\u6570\u3002\u53cd\u4e4b\u5982\u679c\u8d28\u6570 $p$ \u65e2\u4e0d\u662f $a$ \u7684\u8d28\u56e0\u6570\uff0c\u4e5f\u4e0d\u662f $b$ \u7684\u8d28\u56e0\u6570\uff0c\u90a3\u4e48\u5408\u5e76\u540e\u80af\u5b9a\u6ca1\u6709 $p$ \u8fd9\u4e2a\u8d28\u56e0\u6570\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u653e\u5230\u538b\u7f29\u72b6\u6001\u8fd0\u7b97\u91cc\u9762\u53bb\u5c31\u662f $or$\u3002 \n\n# \u5361\u5e38\u5c0f\u6280\u5de7\n\n\u7531\u4e8e\u6211\u4eec\u5728\u8ba1\u7b97\u6700\u7ec8\u7ed3\u679c\u7684\u65f6\u5019\u4f1a\u7528\u5230\u9006\u5143\uff0c\u5982\u679c\u6bcf\u6b21\u8ba1\u7b97\u67d0\u4e2a\u8d28\u6570\u7684\u8d21\u732e\u90fd\u8981\u7528\u4e00\u904d\u5feb\u901f\u5e42\u53bb\u8ba1\u7b97\u5c31\u4f1a~~\u51ed\u7a7a~~\u591a\u4e58 $\\log(mod)$ ($mod$ \u4e3a\u53d6\u6a21\u7684\u6570\uff0c\u9898\u76ee\u89c4\u5b9a\u5176\u4e3a $10^9+7$\uff0c\u4e0b\u6587\u4e2d\u518d\u6b21\u51fa\u73b0\u4e5f\u662f\u4e00\u6837\u7684\u610f\u4e49) \u7684\u590d\u6742\u5ea6\uff0c\u4e8e\u662f\u6211\u4eec\u8981\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u8d28\u6570\u7684\u8d21\u732e\u3002~~\u6211\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u4eec\u6211\u56e0\u4e3a\u6ca1\u8fd9\u4e48\u505a\u8c03\u4e86tle\u4e00\u4e2a\u5c0f\u65f6\u3002~~\n\n# \u65f6\u95f4\u590d\u6742\u5ea6\n\n\u7ebf\u6bb5\u6811\u81ea\u5e26 $O(m\\times \\log(n))$\uff0c\u533a\u95f4\u4fee\u6539\u7684\u65f6\u5019\u4f1a\u5e26\u4e2a $O(\\log(n))$ (\u6c42\u5feb\u901f\u5e42\u5e26\u6765\u7684)\uff0c\u533a\u95f4\u67e5\u8be2\u7684\u65f6\u5019\u9700\u8981\u7d2f\u4e58\uff0c\u4f1a\u5e26\u4e2a $O(k)$\uff08\u5176\u4e2d $k$ \u8868\u793a\u8d28\u56e0\u6570\u4e2a\u6570\uff0c\u8fd9\u91cc\u4e3a62\uff09\u3002\u9884\u5904\u7406\u6bcf\u4e2a\u8d28\u6570\u7684\u8d21\u732e\uff0c\u590d\u6742\u5ea6\u4e3a $O(k\\times \\log(mod))$\u3002\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u5c31\u662f $O(k\\times \\log(mod)+m\\times \\log(n)\\times (\\log(n)+k))$\uff0c\u8db3\u4ee5\u901a\u8fc7\u672c\u9898\u3002~~\u751a\u81f3\u62a2\u4e86\u4e2a\u6700\u4f18\u89e3rk3\u3002~~\n\n# \u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define LL long long\n\nconst LL N=4e5+10,mod=1e9+7;\n\nLL n,q,a[N],b[N],lq,rq,xq,p[N],t,inv[100];\n\ninline LL read(){\n    char ch=getchar();LL x=0,f=0;\n    while(ch<'0' || ch>'9') f|=ch=='-',ch=getchar();\n    while(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n    return f?-x:x;\n}\n\nchar s[100];\n\nbool bl[301];\n\nstruct Tree{\n\tLL times;//\u533a\u95f4\u4e58\u6cd5\n\tLL sor;//\u533a\u95f4\u538b\u7f29\u72b6\u6001\u6216\n\tLL lazy;//\u533a\u95f4\u4e58\u6cd5\u61d2\u6807\u8bb0 \n\tLL lazy2;//\u533a\u95f4\u538b\u7f29\u72b6\u6001\u6216 \u7684\u61d2\u6807\u8bb0 \n}tree[N<<2];\n\nLL ass(LL w){//\u624b\u5199\u53d6\u6a21\u4f1a\u5feb\u4e00\u70b9 \n\treturn (w<mod)?w:w%mod;\n}\n\nLL get(LL x){//\u628ax\u8fd9\u4e2a\u6570\u72b6\u6001\u538b\u7f29 \n\tLL ans=0;\n\tfor(LL i=0;i<=t;i++){\n\t\tif(x%p[i]==0){\n\t\t\tans|=((LL)1<<i);\n\t\t}\n\t}\n\treturn ans;\n}\n\nLL qsm(LL a,LL b){//\u5feb\u901f\u5e42\u6a21\u677f \n    LL ans=1;\n    for(;b;b>>=1,a=1ll*a*a%mod) if(b&1) ans=1ll*ans*a%mod;\n    return ans;\n}\n\nvoid init(){//\u9884\u5904\u7406\u51faa[i]\u7684\u538b\u7f29\u72b6\u6001\u548c\u6240\u6709\u8d28\u6570\u7684\u9006\u5143\uff08\u6c42\u9006\u5143\u662f\u4e3a\u4e86\u540e\u9762\u8ba1\u7b97\u8d21\u732e\uff0c\u5982\u679c\u8fb9\u7b97\u8d21\u732e\u8fb9\u8ba1\u7b97\u9006\u5143\uff0c\u5c31\u4f1a\u591a\u4e00\u4e2alog\u7684\u590d\u6742\u5ea6\uff09 \n\tbl[0]=bl[1]=true;\n\tt=-1;\n\tfor(LL i=2;i<=300;i++){//\u7b5b\u8d28\u6570 \n\t\tif(bl[i]==false){\n\t\t\tp[++t]=i;\n\t\t}\n\t\tfor(LL j=2*i;j<=300;j+=i) bl[j]=true;\n\t}\n\tfor(LL i=0;i<=t;i++) inv[i]=qsm(p[i],mod-2);\n\tfor(LL i=1;i<=n;i++){\n\t\tb[i]=get(a[i]);\n\t}\n\treturn ;\n}\n\nvoid pushup(LL w,LL l,LL r){\n\tLL mid=(l+r)>>1;\n\ttree[w].sor=tree[w<<1].sor|tree[w<<1|1].sor;\n\ttree[w].times=(tree[w<<1].times*tree[w<<1|1].times)%mod;\n\treturn ;\n}\n\nvoid pushdown(LL w,LL l,LL r){\n\tLL mid=(l+r)>>1;\n\tif(tree[w].lazy!=1){\n\t\t//\u5e38\u89c4\u533a\u95f4\u4e58\u6cd5\u4e0b\u653e\uff0c\u4f46\u56e0\u4e3a\u5361\u5e38\uff0c\u6240\u4ee5\u9605\u8bfb\u6548\u679c\u4f1a\u5dee\u4e00\u70b9 \n\t\ttree[w<<1].lazy=ass(tree[w<<1].lazy*tree[w].lazy);\n\t\ttree[w<<1|1].lazy=ass(tree[w<<1|1].lazy*tree[w].lazy);\n\t\tLL ss=qsm(tree[w].lazy,r-mid);\n\t\ttree[w<<1].times=ass(ass(tree[w<<1].times*ss)*((mid-l+1==r-mid)?1:tree[w].lazy));\n\t\ttree[w<<1|1].times=ass(tree[w<<1|1].times*ss);\n\t}\n\tif(tree[w].lazy2!=0){\n\t\t//\u533a\u95f4\u538b\u7f29\u72b6\u6001\u6216 \u7684\u4e0b\u653e \n\t\ttree[w<<1].lazy2|=tree[w].lazy2;\n\t\ttree[w<<1|1].lazy2|=tree[w].lazy2;\n\t\ttree[w<<1].sor|=tree[w].lazy2;\n\t\ttree[w<<1|1].sor|=tree[w].lazy2;\n\t}\n\ttree[w].lazy=1;\n\ttree[w].lazy2=0; \n\treturn ;\n}\n\nvoid build(LL l,LL r,LL w){\n\ttree[w].lazy=1;\n\ttree[w].sor=0;\n\ttree[w].times=1;\n\ttree[w].lazy2=0;\n\tif(l==r){\n\t\ttree[w].sor=b[l];\n\t\ttree[w].times=a[l];\n\t\treturn ;\n\t}\n\tLL mid=(l+r)>>1;\n\tbuild(l,mid,w<<1);\n\tbuild(mid+1,r,w<<1|1);\n\tpushup(w,l,r);\n\treturn ;\n}\n\nvoid change(LL l,LL r,LL w,LL lx,LL rx,LL x,LL y){\n\tif(l>=lx&&r<=rx){\n\t\ttree[w].sor|=x;\n\t\ttree[w].lazy2|=x;\n\t\ttree[w].times=ass(tree[w].times*qsm(y,r-l+1));\n\t\ttree[w].lazy=ass(tree[w].lazy*y);\n\t\treturn ;\n\t}\n\tpushdown(w,l,r);\n\tLL mid=(l+r)>>1;\n\tif(mid>=lx){\n\t\tchange(l,mid,w<<1,lx,rx,x,y);\n\t}\n\tif(mid<rx){\n\t\tchange(mid+1,r,w<<1|1,lx,rx,x,y);\n\t}\n\tpushup(w,l,r);\n\treturn ;\n}\n\nLL query_times(LL l,LL r,LL w,LL lx,LL rx){//\u8be2\u95ee\u533a\u95f4\u4e58\u6cd5\u503c \n\tif(l>=lx&&r<=rx){\n\t\treturn ass(tree[w].times);\n\t}\n\tpushdown(w,l,r);\n\tLL mid=(l+r)>>1,sum=1;\n\tif(mid>=lx){\n\t\tsum=ass(sum*query_times(l,mid,w<<1,lx,rx));\n\t}\n\tif(mid<rx){\n\t\tsum=ass(sum*query_times(mid+1,r,w<<1|1,lx,rx));\n\t}\n\treturn sum;\n}\n\nLL query_or(LL l,LL r,LL w,LL lx,LL rx){//\u8be2\u95ee\u533a\u95f4\u538b\u7f29\u72b6\u6001\u6216 \u503c \n\tif(l>=lx&&r<=rx){\n\t\treturn tree[w].sor;\n\t}\n\tpushdown(w,l,r);\n\tLL mid=(l+r)>>1,ans=0;\n\tif(mid>=lx){\n\t\tans|=query_or(l,mid,w<<1,lx,rx);\n\t}\n\tif(mid<rx){\n\t\tans|=query_or(mid+1,r,w<<1|1,lx,rx);\n\t}\n\treturn ans;\n}\n\ninline LL answ(LL l,LL r){//\u9898\u76ee\u4e2d\u7684\u67e5\u8be2\u64cd\u4f5c \n\tLL ans1=query_times(1,n,1,l,r);\n\tLL ans2=query_or(1,n,1,l,r);\n\tLL st=0,sum=1,sz=ans2;\n\twhile(sz){\n\t\tif(sz&1){\n\t\t\tsum=ass((ass(sum*(p[st]-1)))*inv[st]);\n\t\t}\n\t\tsz>>=1;\n\t\tst++;\n\t}\n\treturn ass(ans1*sum);\n}\n\nint main(){\n\tn=read();\n\tq=read();\n\tcin.tie(0);\n\tfor(LL i=1;i<=n;i++) a[i]=read();\n\tinit();\n\tbuild(1,n,1);\n\twhile(q--){\n\t\tcin>>s;\n\t\tif(s[0]=='T'){\n\t\t\tlq=read();\n\t\t\trq=read();\n\t\t\tprintf(\"%lld\\n\",answ(lq,rq));\n\t\t}\n\t\telse{\n\t\t\tlq=read();\n\t\t\trq=read();\n\t\t\txq=read();\n\t\t\tchange(1,n,1,lq,rq,get(xq),xq);\n\t\t}\n\t} \n\treturn 0;\n}\n```\n\n\u6700\u540e\u653e\u5f20\u56fe\u8ba9\u5927\u4f19\u4e50\u4e00\u4e0b\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/xh1dlma2.png)",
        "postTime": 1668228908,
        "uid": 298994,
        "name": "small_peter",
        "ccfLevel": 6,
        "title": "CF1114F Please, another Queries on Array? \u9898\u89e3"
    },
    {
        "content": "$F$\n\n\u8003\u8651\u5230\u6570\u5b57\u90fd\u5728$300$\u4ee5\u5185\uff0c\u5373\u8d28\u56e0\u6570\u6700\u591a$62$\u4e2a\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u51fa\u73b0\u7684\u8d28\u6570\u5373\u53ef\uff0c$\\varphi (p)=p\\times \\prod\\limits_{i=1}^k(1-\\frac{1}{p_i})$\n\n\u6ce8\u610f\u5230\u5185\u5b58\u5f00\u4e0d\u4e0b\uff0c\u7528$long long$\u72b6\u538b\u4e00\u4e0b\u51fa\u73b0\u4e86\u7684\u8d28\u6570\u5373\u53ef\n\n```cpp\n#include <bits/stdc++.h> \nusing namespace std;\n#define ll long long\nconst int mod=1e9+7;\n#define mymaxn 400400\nint fpow(int a,int b)\n{\n\tint s=1;if(a==1)return 1;\n\twhile(b)\n\t{\n\t\tif(b&1)\n\t\t{\n\t\t\ts=1ll*s*a%mod;\n\t\t}\n\t\ta=1ll*a*a%mod;\n\t\tb>>=1;\n\t}\n\treturn s;\n}\nll qaqaq[mymaxn];\nbool vis[mymaxn];int prime[mymaxn],cnt;\nint n,Q,a[mymaxn];\nint t[mymaxn<<2];\nll qwqwqwqwqwq[mymaxn<<2];\nint tagt[mymaxn<<2];\nll pwpwpw[mymaxn<<2];\nvoid Build(int now,int l,int r)\n{\n\tt[now]=1;\n\tqwqwqwqwqwq[now]=0;\n\ttagt[now]=1;\n\tif(l==r)\n\t{\n\t\tt[now]=a[l];\n\t\tqwqwqwqwqwq[now]=qaqaq[a[l]];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild((now<<1),l,mid);\n\tBuild((now<<1|1),mid+1,r);\n\tt[now]=1ll*t[(now<<1)]*t[(now<<1|1)]%mod;\n\tqwqwqwqwqwq[now]=qwqwqwqwqwq[(now<<1)]|qwqwqwqwqwq[(now<<1|1)];\n}\nvoid modify(int now,int l,int r,int L,int R,int w,ll W)\n{\n\tif(L==l&&r==R)\n\t{\n\t\ttagt[now]=1ll*tagt[now]*w%mod;pwpwpw[now]|=W;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(L>mid)\n\t{\n\t\tmodify((now<<1|1),mid+1,r,L,R,w,W);\n\t}\n\telse if(R<=mid)\n\t{\n\t\tmodify((now<<1),l,mid,L,R,w,W);\n\t}\n\telse \n\t{\n\t\tmodify((now<<1),l,mid,L,mid,w,W);\n\t\tmodify((now<<1|1),mid+1,r,mid+1,R,w,W);\n\t}\n\tqwqwqwqwqwq[now]|=W;\n\tt[now]=1ll*t[now]*fpow(w,R-L+1)%mod;\n}\nint queryqwq(int now,int l,int r,int L,int R)\n{\n\tif(L==l&&r==R)\n\t{\n\t\treturn 1ll*t[now]*fpow(tagt[now],r-l+1)%mod;\n\t}\n\tint mid=(l+r)>>1;\n\tif(R<=mid)\n\t{\n\t\treturn 1ll*queryqwq((now<<1),l,mid,L,R)*fpow(tagt[now],R-L+1)%mod;\n\t}\n\tif(L>mid)\n\t{\n\t\treturn 1ll*queryqwq((now<<1|1),mid+1,r,L,R)*fpow(tagt[now],R-L+1)%mod;\n\t}\n\treturn 1ll*queryqwq((now<<1),l,mid,L,mid)*queryqwq((now<<1|1),mid+1,r,mid+1,R)%mod*fpow(tagt[now],R-L+1)%mod;\n}\nll queryqaq(int now,int l,int r,int L,int R)\n{\n\tif(L<=l&&r<=R)\n\t{\n\t\treturn qwqwqwqwqwq[now]|pwpwpw[now];\n\t}\n\tll ret=pwpwpw[now];\n\tint mid=(l+r)>>1;\n\tif(L<=mid)\n\t{\n\t\tret|=queryqaq((now<<1),l,mid,L,R);\n\t}\n\tif(R>mid)\n\t{\n\t\tret|=queryqaq((now<<1|1),mid+1,r,L,R);\n\t}\n\treturn ret;\n}\nint inv[500];\nint main()\n{\n\tcin>>n>>Q;\n\tfor(int i=2;i<=300;++i)\n\t{\n\t\tif(!vis[i])\n\t\t{\n\t\t\tprime[++cnt]=i;\n\t\t\tinv[cnt]=fpow(i,mod-2);\n\t\t}\n\t\tfor(int j=i+i;j<=300;j+=i)\n\t\t{\n\t\t\tvis[j]=true;\n\t\t}\n\t}\n\tfor(int i=2;i<=300;++i)\n\t{\n\t\tfor(int j=1;j<=cnt;++j)\n\t\t{\n\t\t\tif(i%prime[j]==0)\n\t\t\t{\n\t\t\t\tqaqaq[i]|=1ll<<(j-1);\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tBuild(1,1,n);\n\tchar ch[50];\n\twhile(Q--)\n\t{\n\t\tscanf(\"%s\",ch);\n\t\tint l,r;\n\t\tscanf(\"%d%d\",&l,&r);\n\t\tif(ch[0]=='M')\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tmodify(1,1,n,l,r,x,qaqaq[x]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tll S=queryqaq(1,1,n,l,r);\n\t\t\tint v=queryqwq(1,1,n,l,r);\n\t\t\tfor(int i=0;i<cnt;++i)\n\t\t\t{\n\t\t\t\tif(S&(1ll<<i))\n\t\t\t\t{\n\t\t\t\t\tv=1ll*v*inv[i+1]%mod*(prime[i+1]-1)%mod;\n\t\t\t\t}\t\n\t\t\t}\t\t\n\t\t\tprintf(\"%d\\n\",v);\n\t\t}\n\t}\n\treturn 0;\n}\n``` \n\n[\u8fd9\u4e00\u573acf\u7684\u9898\u89e3\uff0c\u6253\u4e2a\u5e7f\u544a](https://decorationqwq.com/archives/324/)\n",
        "postTime": 1551450276,
        "uid": 48265,
        "name": "decoqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1114F \u3010Please, another Queries on Array?\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5\u3002](https://www.luogu.com.cn/problem/CF1114F)\n\n\u6c42 $\\varphi(\\prod\\limits_{i=l}^{r}a_i)\\bmod (10^9+7)$ \u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42 $\\prod\\limits_{i=l}^{r}a_i\\times \\prod\\limits\\dfrac{p_i-1}{p_i}$\uff0c\u5176\u4e2d $p_i$ \u8868\u793a\u539f\u5f0f\u7684\u8d28\u56e0\u5b50\u3002\n\n\u53d1\u73b0\u8fd9\u91cc\u9762\u6709\u4e00\u4e2a\u5f88\u7279\u6b8a\u7684\u9650\u5236\u4e3a $a_i,x\\le 300$\uff0c\u7136\u540e $300$ \u4ee5\u5185\u5171\u6709 $62$ \u4e2a\u7d20\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u538b\u7f29\u6210\u4e00\u4e2a\u6570\uff0c\u8bb0\u538b\u7f29\u6210\u7684\u6570\u4e3a $f_x$\u3002\u4f8b\u5982\u5bf9\u4e8e $84=2^2\\times 3\\times 7$\uff0c\u8868\u793a\u4e3a $1011$\uff0c\u56e0\u4e3a $2,3,7$ \u5206\u522b\u662f\u7b2c $1,2,4$ \u4e2a\u8d28\u6570\u6240\u4ee5\u53f3\u6570\u7b2c $1,2,4$ \u4f4d\u4e3a $1$\uff0c\u8bb0\u4e3a\u8d28\u56e0\u5b50\u72b6\u6001\u3002\u56e0\u6b64\u9700\u8981\u5b9a\u4e49\u4e24\u4e2a $\\text{tag}$ \u5206\u522b\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u6574\u4f53\u4e58\u4e0a\u7684\u503c\u3001\u8fd9\u4e2a\u533a\u95f4\u6574\u4f53\u6309\u4f4d\u6216\u7684\u8fd9\u4e2a\u503c\uff0c\u8bb0\u4e3a $\\text{lazy1}$ \u548c $\\text{lazy2}$\u3002\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u533a\u95f4\uff0c\u5b9a\u4e49 $\\text{mul}_x$ \u548c $\\text{res}_x$ \u8868\u793a\u533a\u95f4\u4e58\u79ef\u3001\u533a\u95f4\u8d28\u56e0\u5b50\u538b\u7f29\u540e\u7684\u7ed3\u679c\u3002\n\n\u4e8e\u662f\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u533a\u95f4\u4e58 $x$ \u65f6\uff0c$\\text{mul}_x\\gets \\text{mul}_x\\times \\large x^{\\text{len}}$\uff08$\\text{len}$ \u8868\u793a\u8be5\u533a\u95f4\u7684\u957f\u5ea6\uff09\uff0c\n$\\text{res}_x\\gets \\text{res}_x\\ \\text{or}\\ f_x$\u3002\u540c\u65f6\u7ef4\u62a4\u4e0a\u9762\u63d0\u5230\u7684\u4e24\u4e2a $\\text{tag}$\u3002Pushup \u4e2d $\\text{mul}_x$ \u5c31\u662f\u4e24\u4e2a\u513f\u5b50\u7684 $\\text{mul}$ \u4e58\u79ef\uff0c$\\text{res}_x$ \u5c31\u662f\u4e24\u4e2a\u513f\u5b50 $\\text{res}$ \u6309\u4f4d\u6216\u7684\u503c\u3002Pushdown \u4e2d $\\text{mul}$ \u9700\u8981\u4e58\u4e0a\u7236\u4eb2\u7684 $\\text{lazy1}$ \u7684\u533a\u95f4\u957f\u5ea6\u6b21\u65b9\uff0c$\\text{res}$ \u76f4\u63a5\u6309\u4f4d\u6216\u7236\u4eb2\u7684 $\\text{lazy2}$ \u5373\u53ef\u3002\n\n\u540c\u65f6\uff0c\u8fd8\u9700\u8981\u6ce8\u610f\u8981\u63d0\u524d\u9884\u5904\u7406\u9006\u5143\uff0c\u5426\u5219\u6c42\u9006\u5143\u591a\u4e00\u4e2a $\\log$ \u663e\u7136\u4f1a `TLE`\u3002\n\n[\u63d0\u4ea4\u8bb0\u5f55\u3002](https://codeforces.com/contest/1114/submission/189390683)",
        "postTime": 1673839898,
        "uid": 678965,
        "name": "EXCRT",
        "ccfLevel": 0,
        "title": "Please, another Queries on Array? - Solution"
    },
    {
        "content": "> 2021-11-28 $\\phi\\to\\varphi$\n\n# \u9898\u610f\n\n\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217 $a_{1\\cdots n}$\uff0c\u652f\u6301\uff1a\n\n- \u533a\u95f4\u4e58\n\n- \u6c42\u533a\u95f4\u4e58\u79ef\u7684 $\\varphi$\n\n## \u5173\u4e8e $\\varphi$\n\n\u9898\u9762\u91cc\u7ed9\u7684 $\\varphi(n)$ \u7684\u5b9a\u4e49\u662f\u5c0f\u4e8e $n$ \u4e14\u4e0e $n$ \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u8bbe $n$ \u7684\u8d28\u56e0\u6570\u5206\u89e3\u4e3a $p_1^{e_1}p_2^{e_2}\\cdots p_k^{e_k}$. \n\n\u6211\u4eec\u7531\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u53ef\u77e5\uff0c\u4e00\u4e2a $0\\le x<n$ \u552f\u4e00\u5bf9\u5e94\u5b83\u6a21 $p_i^{e_i}$ \u7684\u4f59\u6570\uff0c\u800c $\\gcd(x,n)=1$ \u5f53\u4e14\u4ec5\u5f53 $\\forall i,\\gcd(n,p_i^{e_i})=1$. \u8fd9\u6837\uff0c$x$ \u6a21 $p_i^{e_i}$ \u7684\u4f59\u6570\u5c31\u6709 $p_i^{e_i}-p_i^{e_i-1}=p_i^{e_i}(1-\\frac{1}{p_i})$ \u79cd\u9009\u62e9\u3002\u6240\u4ee5 $\\varphi(n)=\\prod p_i^{e_i}(1-\\frac{1}{p_i})=n\\prod (1-\\frac{1}{p_i})$.\n\n# \u505a\u6cd5\n\n\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u4e58\uff0c\u533a\u95f4\u4e58\u79ef\uff0c\u548c\u533a\u95f4\u91cc\u6bcf\u4e2a\u6570\u6709\u54ea\u4e9b\u8d28\u56e0\u5b50\u3002\u9898\u76ee\u544a\u8bc9\u6211\u4eec $a_i\\le300$\uff0c\u6240\u4ee5\u8d28\u56e0\u5b50\u53ea\u80fd\u662f $[2,300]$ \u4e2d\u7684\u8d28\u6570\u3002\u800c\u8fd9\u6837\u7684\u8d28\u6570\u53ea\u6709 $62$ \u4e2a\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u72b6\u538b\u5230\u4e00\u4e2a long long \u4e2d\u3002\n\n\u7ef4\u62a4\u4e24\u9897\u7ebf\u6bb5\u6811\uff1a\n\n- \u7b2c\u4e00\u9897\u7528\u4e8e\u4fdd\u5b58\u6570\u672c\u8eab\uff0c\u652f\u6301\u533a\u95f4\u4e58\uff0c\u533a\u95f4\u67e5\u4e58\u79ef\n\n- \u7b2c\u4e8c\u9897\u7528\u4e8e\u4fdd\u5b58\u6570\u7684\u56e0\u5b50\u72b6\u538b\uff0c\u652f\u6301\u533a\u95f4\u6309\u4f4d\u6216\uff0c\u533a\u95f4\u67e5\u6309\u4f4d\u6216\n\n# Code\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#include <utility>\n\n#ifdef ONLINE_JUDGE\n#define debug(...) 0\n#else\n#define debug printf\n#endif\n\ntypedef long long ll;\nconst int N = 4e5 + 5, MOD = 1e9 + 7;\n\ninline ll qpow(ll x, int k)\n{\n    if (k == 0) return 1;\n    ll ans = qpow(x, k >> 1); ans = (ans * ans) % MOD;\n    if (k & 1) ans = (ans * x) % MOD;\n    return ans;\n}\n\nnamespace times\n{\n    struct node\n    {\n        int l, r;\n        ll prod, lazy;\n\n        inline node() {prod = lazy = 1;}\n    };\n    struct segtree\n    {\n        node a[N << 2];\n\n        #define u a[i]\n        #define lc a[i << 1]\n        #define rc a[i << 1 | 1]\n        #define mid (u.l + u.r) >> 1\n        #define len(v) (v.r - v.l)\n\n        inline void pushup(int i)\n        {\n            u.prod = lc.prod * rc.prod; u.prod %= MOD;\n        }\n\n        inline void pushdown(int i)\n        {\n            if (u.lazy == 1) return;\n            lc.prod *= qpow(u.lazy, len(lc)); lc.prod %= MOD;\n            lc.lazy *= u.lazy;                lc.lazy %= MOD;\n            rc.prod *= qpow(u.lazy, len(rc)); rc.prod %= MOD;\n            rc.lazy *= u.lazy;                rc.lazy %= MOD;\n            u.lazy = 1;\n        }\n\n        inline void build(ll *init, int i, int l, int r)\n        {\n            debug(\"times::QwQ.build(%d, %d, %d) called\\n\", i, l, r);\n            u.l = l, u.r = r, u.lazy = 1;\n            if (r - l == 1)\n            {\n                u.prod = init[l] % MOD;\n                return;\n            }\n            build(init, i << 1, l, mid);\n            build(init, i << 1 | 1, mid, r);\n            pushup(i);\n        }\n\n        inline ll query(int i, int l, int r)\n        {\n            debug(\"times::QwQ.query(%d, %d, %d) called\\n\", i, l, r);\n            if (l <= u.l && r >= u.r) return u.prod % MOD;\n            if (r <= u.l || l >= u.r) return 1;\n            pushdown(i);\n            return (query(i << 1, l, r) * query(i << 1 | 1, l, r)) % MOD;\n        }\n\n        inline void modify(int i, int l, int r, ll k)\n        {\n            debug(\"times::QwQ.modify(%d, %d, %d, %lld) called\\n\", i, l, r, k);\n            if (l <= u.l && r >= u.r)\n            {\n                u.prod *= qpow(k, len(u)); u.prod %= MOD;\n                u.lazy *= k;               u.lazy %= MOD;\n                return;\n            }\n            if (r <= u.l || l >= u.r) return;\n            pushdown(i);\n            modify(i << 1, l, r, k); modify(i << 1 | 1, l, r, k);\n            pushup(i);\n        }\n\n        #undef u\n        #undef lc\n        #undef rc\n        #undef mid\n        #undef len\n    }\n    QwQ;\n}\n\nnamespace bit_or\n{\n    struct node\n    {\n        int l, r;\n        ll ans, lazy;\n\n        inline node() {ans = lazy = 0;}\n    };\n    struct segtree\n    {\n        node a[N << 2];\n\n        #define u a[i]\n        #define lc a[i << 1]\n        #define rc a[i << 1 | 1]\n        #define mid (u.l + u.r) >> 1\n        #define len(v) (v.r - v.l)\n\n        inline void pushup(int i)\n        {\n            u.ans = lc.ans | rc.ans;\n        }\n\n        inline void pushdown(int i)\n        {\n            if (u.lazy == 0) return;\n            lc.ans  |= u.lazy;\n            lc.lazy |= u.lazy;\n            rc.ans  |= u.lazy;\n            rc.lazy |= u.lazy;\n            u.lazy = 0;\n        }\n\n        inline void build(ll *init, int i, int l, int r)\n        {\n            debug(\"bit_or::QwQ.build(%d, %d, %d) called\\n\", i, l, r);\n            u.l = l, u.r = r, u.lazy = 0;\n            if (r - l == 1)\n            {\n                u.ans = init[l];\n                return;\n            }\n            build(init, i << 1, l, mid);\n            build(init, i << 1 | 1, mid, r);\n            pushup(i);\n        }\n\n        inline ll query(int i, int l, int r)\n        {\n            debug(\"bit_or::QwQ.query(%d, %d, %d) called\\n\", i, l, r);\n            if (l <= u.l && r >= u.r) return u.ans;\n            if (r <= u.l || l >= u.r) return 0;\n            pushdown(i);\n            return query(i << 1, l, r) | query(i << 1 | 1, l, r);\n        }\n\n        inline void modify(int i, int l, int r, ll k)\n        {\n            if (l <= u.l && r >= u.r)\n            {\n                u.ans  |= k;\n                u.lazy |= k;\n                return;\n            }\n            if (r <= u.l || l >= u.r) return;\n            pushdown(i);\n            modify(i << 1, l, r, k); modify(i << 1 | 1, l, r, k);\n            pushup(i);\n        }\n\n        #undef u\n        #undef lc\n        #undef rc\n        #undef mid\n        #undef len\n    }\n    QwQ;\n}\n\nint prime[305], rank[305];\ninline void QwQ()\n{\n    prime[0] = 2; rank[2] = 0;\n    prime[1] = 3; rank[3] = 1;\n    prime[2] = 5; rank[5] = 2;\n    prime[3] = 7; rank[7] = 3;\n    prime[4] = 11; rank[11] = 4;\n    prime[5] = 13; rank[13] = 5;\n    prime[6] = 17; rank[17] = 6;\n    prime[7] = 19; rank[19] = 7;\n    prime[8] = 23; rank[23] = 8;\n    prime[9] = 29; rank[29] = 9;\n    prime[10] = 31; rank[31] = 10;\n    prime[11] = 37; rank[37] = 11;\n    prime[12] = 41; rank[41] = 12;\n    prime[13] = 43; rank[43] = 13;\n    prime[14] = 47; rank[47] = 14;\n    prime[15] = 53; rank[53] = 15;\n    prime[16] = 59; rank[59] = 16;\n    prime[17] = 61; rank[61] = 17;\n    prime[18] = 67; rank[67] = 18;\n    prime[19] = 71; rank[71] = 19;\n    prime[20] = 73; rank[73] = 20;\n    prime[21] = 79; rank[79] = 21;\n    prime[22] = 83; rank[83] = 22;\n    prime[23] = 89; rank[89] = 23;\n    prime[24] = 97; rank[97] = 24;\n    prime[25] = 101; rank[101] = 25;\n    prime[26] = 103; rank[103] = 26;\n    prime[27] = 107; rank[107] = 27;\n    prime[28] = 109; rank[109] = 28;\n    prime[29] = 113; rank[113] = 29;\n    prime[30] = 127; rank[127] = 30;\n    prime[31] = 131; rank[131] = 31;\n    prime[32] = 137; rank[137] = 32;\n    prime[33] = 139; rank[139] = 33;\n    prime[34] = 149; rank[149] = 34;\n    prime[35] = 151; rank[151] = 35;\n    prime[36] = 157; rank[157] = 36;\n    prime[37] = 163; rank[163] = 37;\n    prime[38] = 167; rank[167] = 38;\n    prime[39] = 173; rank[173] = 39;\n    prime[40] = 179; rank[179] = 40;\n    prime[41] = 181; rank[181] = 41;\n    prime[42] = 191; rank[191] = 42;\n    prime[43] = 193; rank[193] = 43;\n    prime[44] = 197; rank[197] = 44;\n    prime[45] = 199; rank[199] = 45;\n    prime[46] = 211; rank[211] = 46;\n    prime[47] = 223; rank[223] = 47;\n    prime[48] = 227; rank[227] = 48;\n    prime[49] = 229; rank[229] = 49;\n    prime[50] = 233; rank[233] = 50;\n    prime[51] = 239; rank[239] = 51;\n    prime[52] = 241; rank[241] = 52;\n    prime[53] = 251; rank[251] = 53;\n    prime[54] = 257; rank[257] = 54;\n    prime[55] = 263; rank[263] = 55;\n    prime[56] = 269; rank[269] = 56;\n    prime[57] = 271; rank[271] = 57;\n    prime[58] = 277; rank[277] = 58;\n    prime[59] = 281; rank[281] = 59;\n    prime[60] = 283; rank[283] = 60;\n    prime[61] = 293; rank[293] = 61;\n}\n\ninline ll factor(int n)\n{\n    debug(\"factor(%d) called\\n\", n);\n    ll ans = 0;\n    for (register int i = 2; i * i <= n; i++)\n        while (n % i == 0)\n            n /= i, ans |= (1 << rank[i]);\n    if (n > 1)\n        ans |= (1ll << rank[n]);\n    debug(\"factor(%d) = %d\\n\", n, ans);\n    return ans;\n}\n\nll init[N], facinit[N];\nchar rsg23[100];\n\nint main()\n{\n    QwQ();\n    int n, q;\n    scanf(\"%d %d\", &n, &q);\n    for (int i = 1; i <= n; i++)\n        scanf(\"%d\", &init[i]), facinit[i] = factor(init[i]);\n    times::QwQ.build(init, 1, 1, n + 1);\n    bit_or::QwQ.build(facinit, 1, 1, n + 1);\n\n    while (q--)\n    {\n        int l, r; ll x;\n        scanf(\"%s\", rsg23);\n        if (rsg23[0] == 'M')\n        {\n            scanf(\"%d %d %lld\", &l, &r, &x);\n            times::QwQ.modify(1, l, r + 1, x);\n            bit_or::QwQ.modify(1, l, r + 1, factor(x));\n        }\n        if (rsg23[0] == 'T')\n        {\n            scanf(\"%d %d\", &l, &r);\n            ll ans = times::QwQ.query(1, l, r + 1); debug(\"ans = %lld\\n\", ans);\n            ll fac = bit_or::QwQ.query(1, l, r + 1); debug(\"fac = %d\\n\", fac);\n            for (int i = 0; i < 64; i++)\n                if ((fac >> i) & 1)\n                {\n                    debug(\"ans has prime factor %d\\n\", prime[i]);\n                    ans *= (prime[i] - 1);          ans %= MOD;\n                    ans *= qpow(prime[i], MOD - 2); ans %= MOD;\n                }\n            printf(\"%lld\\n\", ans);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1637924434,
        "uid": 384214,
        "name": "esquigybcu",
        "ccfLevel": 0,
        "title": "CF1114F Please, another Queries on Array?"
    },
    {
        "content": "# Please, another Queries on Array?\n\n**\u9898\u610f**\n\n\u4e00\u4e2a\u5e8f\u5217 $a_{[1, n]}$ \uff0c\u652f\u6301\u6539\u53d8 / \u67e5\u8be2\n\n* $\\forall l\\le i\\le r,a_i\\leftarrow a_i\\times x$\n* $\\varphi(\\prod_{i = l}^{r}a_i)$\n\n**\u524d\u7f6e\u77e5\u8bc6**\n\n$\\text{Phi}$ / $\\varphi$ \u7684\u6c42\u6cd5\uff1a\n\n\u8bb0 $n = p_1^{a_1}\\times p_2^{a_2}\\cdots \\times p_k^{a_k}$ \uff0c\u5219 $\\varphi(n)=n\\times \\prod_{i = 1}^{k}\\frac{p_i - 1}{p_i}$ \u3002\n\n**\u601d\u8def**\n\n\u663e\u7136\uff0c\u8fd9\u662f\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u8003\u8651\u7ebf\u6bb5\u6811\n\n* $\\text{Naive Solution}$\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u533a\u95f4\u4e58 $x$ \uff0c\u533a\u95f4\u4e58\u79ef\u3002\n\n\u6bcf\u6b21\u5982\u679c\u662f\u64cd\u4f5c $1$ \u5c31 `modify(1, 1, n, l, r, x)` \uff0c\u5426\u5219 `printf(\"%lld\\n\", calcphi(query(1, 1, n, l, r)))` \u3002\n\n\u8fd9\u4e2a\u505a\u6cd5\u6709\u4e2a\u975e\u5e38\u660e\u663e\u7684\u95ee\u9898\uff1a\u4f1a\u7206 `long long` \uff0c\u5982\u679c\u9ad8\u7cbe\u5ea6\u7684\u8bdd\u65f6\u95f4\u7a7a\u95f4\u90fd\u4f1a\u7206\u70b8\u3002\n\n* $\\text{Correct Solution}$\n\n\u6ce8\u610f\u5230 $\\forall l\\le i\\le r,a_i\\le 300, x\\le 300$ \uff0c$300$ \u4ee5\u5185\u7684\u8d28\u6570\u4e2a\u6570\u4e3a $62$ \uff0c\u6211\u4eec\u8003\u8651\u5c06\u533a\u95f4\u7684\u7684\u8d28\u6570\u56e0\u5b50\u7684\u4e8c\u8fdb\u5236\u72b6\u6001\u538b\u7f29\uff0c\u7ef4\u62a4\u533a\u95f4\u4e58\u79ef**\u6a21 $10^9+7$** \uff0c\u4ee5\u53ca\u533a\u95f4\u7684\u8d28\u6570\u56e0\u5b50\u7684\u72b6\u538b\u3002\n\n\u6bcf\u6b21\u8be2\u95ee\u6211\u4eec\u5148\u7b97\u51fa\u533a\u95f4\u4e58\u79ef $x$ \u548c\u533a\u95f4\u4e8c\u8fdb\u5236\u72b6\u538b $y$ \uff0c\u5219\u7b54\u6848\u53ef\u4ee5\u901a\u8fc7 $x$ \u548c $x$ \u5728\u53d6\u6a21\u524d\u7684\u8d28\u56e0\u5b50(\u7531 $y$ \u63a8\u51fa)\u8ba1\u7b97 $\\varphi$ \u800c\u6765\uff0c\u6b64\u5904\u9700\u4f7f\u7528\u6709\u7406\u6570\u53d6\u4f59\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u7ec6\u8282\uff1a\n\n1. \u72b6\u6001\u538b\u7f29\u9700\u8981\u4f7f\u7528 `long long` \u3002\n2. \u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f \u533a\u95f4\u4e58 $x$ \u533a\u95f4\u67e5\u8be2\u4e58\u79ef \u548c \u533a\u95f4 $\\text{or\\ binary\\_of\\_divisors}\\ (x)$ \u533a\u95f4\u67e5\u8be2 $\\text{or}$ \u3002\n3. \u8bb0\u5f97\u53d6\u6a21\n4. \u4e58\u79ef\u7684\u7ebf\u6bb5\u6811 $\\text{lazy\\ \\&\\ sum}$ \u521d\u503c\u4e3a $1$ \uff0c$\\text{or}$ \u7684\u7ebf\u6bb5\u6811 $\\text{lazy\\ \\&\\ sum}$ \u521d\u503c\u4e3a $0$ \u3002\n5. \u89c1\u4ee3\u7801\n\n**\u590d\u6742\u5ea6**\n\nTime $\\mathcal{O}(q\\log^2 n)$\n\nMemory $\\mathcal{O}(n)$\n\n**\u4ee3\u7801**\n\n\u5efa\u8bae\u5ffd\u7565\u8d28\u6570\u6253\u8868\u90e8\u5206\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm> \n\n#define int long long\n\nusing namespace std;\n\nconst int MOD = 1000000007;\n\nint mp[300], pm[300], pw[300];\n\ninline int qpow(int x, int y) {\n    if (!y) return 1;\n    int t = qpow(x, y >> 1);\n    t = t * t % MOD;\n    if (y & 1) t =  t * x % MOD;\n    return t;\n} // \u5feb\u901f\u5e42\uff0c\u6709\u7406\u6570\u53d6\u4f59\u7528\n\ninline int zy(int x) {\n    int ret = 0;\n    for (int i = 2; i * i <= x; ++i) {\n        if (!(x % i)) ret |= pw[mp[i]];\n        while (!(x % i)) x /= i;\n    }\n    if (x > 1) ret |= pw[mp[x]];\n    return ret;\n} // \u72b6\u538b\n\ntemplate < int SIZE > \nstruct SegmentTreeTimes {\n    int sum[SIZE << 2], lazy[SIZE << 2];\n\n    inline void pushup(int p) {\n        sum[p] = sum[p << 1] * sum[p << 1 | 1] % MOD;\n    }\n\n    inline void pushdown(int p, int l, int r) {\n        if (lazy[p] == 1) return;\n        int mid = l + r >> 1;\n        sum[p << 1] = sum[p << 1] * qpow(lazy[p], mid - l + 1) % MOD;\n        lazy[p << 1] = lazy[p << 1] * lazy[p] % MOD;\n        sum[p << 1 | 1] = sum[p << 1 | 1] * qpow(lazy[p], r - mid) % MOD;\n        lazy[p << 1 | 1] = lazy[p << 1 | 1] * lazy[p] % MOD;\n        lazy[p] = 1;\n    }\n\n    inline void build(int p, int l, int r) {\n        lazy[p] = sum[p] = 1;\n        if (l == r) return;\n        int mid = l + r >> 1;\n        build(p << 1, l, mid);\n        build(p << 1 | 1, mid + 1, r);\n        pushup(p);\n    }\n\n    inline void modify(int p, int l, int r, int a, int b, int v) {\n        if (r < a || l > b) return;\n        if (a <= l && r <= b) {\n            sum[p] = sum[p] * qpow(v, r - l + 1) % MOD, lazy[p] = lazy[p] * v % MOD;\n            return;\n        }\n        pushdown(p, l, r);\n        int mid = l + r >> 1;\n        modify(p << 1, l, mid, a, b, v);\n        modify(p << 1 | 1, mid + 1, r, a, b, v);\n        pushup(p);\n    }\n\n    inline int query(int p, int l, int r, int a, int b) {\n        if (r < a || l > b) return 1;\n        if (a <= l && r <= b) return sum[p];\n        pushdown(p, l, r);\n        int mid = l + r >> 1;\n        return query(p << 1, l, mid, a, b) * query(p << 1 | 1, mid + 1, r, a, b) % MOD;\n    }\n}; // times segtree\n\ntemplate < int SIZE > \nstruct SegmentTreeOr {\n    int sum[SIZE << 2], lazy[SIZE << 2];\n    \n    inline void pushup(int p) {\n        sum[p] = sum[p << 1] | sum[p << 1 | 1];\n    }\n\n    inline void pushdown(int p) {\n        if (lazy[p] == 0) return;\n        sum[p << 1] = sum[p << 1] | lazy[p];\n        lazy[p << 1] = lazy[p << 1] | lazy[p];\n        sum[p << 1 | 1] = sum[p << 1 | 1] | lazy[p];\n        lazy[p << 1 | 1] = lazy[p << 1 | 1] | lazy[p];\n        lazy[p] = 0;\n    }\n\n    inline void build(int p, int l, int r) {\n        if (l == r) {\n            sum[p] = 0, lazy[p] = 0;\n            return;\n        }\n        int mid = l + r >> 1;\n        build(p << 1, l, mid);\n        build(p << 1 | 1, mid + 1, r);\n        pushup(p);\n    }\n\n    inline void modify(int p, int l, int r, int a, int b, int v) {\n        if (r < a || l > b) return;\n        if (a <= l && r <= b) {\n            sum[p] = sum[p] | v, lazy[p] = lazy[p] | v;\n            return;\n        }\n        pushdown(p);\n        int mid = l + r >> 1;\n        modify(p << 1, l, mid, a, b, v);\n        modify(p << 1 | 1, mid + 1, r, a, b, v);\n        pushup(p);\n    }\n\n    inline int query(int p, int l, int r, int a, int b) {\n        if (r < a || l > b) return 0;\n        if (a <= l && r <= b) return sum[p];\n        pushdown(p);\n        int mid = l + r >> 1;\n        return query(p << 1, l, mid, a, b) | query(p << 1 | 1, mid + 1, r, a, b);\n    }\n}; // or segtree\n\nconst int NR = 4e5 + 5;\n\nSegmentTreeTimes < NR > st;\nSegmentTreeOr < NR > st1;\n\nint n, a[NR], q;\nchar op[20];\n\nvoid init() {\n\tpw[0] = 1;\n\tfor (int i = 1; i <= 62; ++i) pw[i] = pw[i - 1] * 2;\n    mp[2] = 0;\n    mp[3] = 1;\n    mp[5] = 2;\n    mp[7] = 3;\n    mp[11] = 4;\n    mp[13] = 5;\n    mp[17] = 6;\n    mp[19] = 7;\n    mp[23] = 8;\n    mp[29] = 9;\n    mp[31] = 10;\n    mp[37] = 11;\n    mp[41] = 12;\n    mp[43] = 13;\n    mp[47] = 14;\n    mp[53] = 15;\n    mp[59] = 16;\n    mp[61] = 17;\n    mp[67] = 18;\n    mp[71] = 19;\n    mp[73] = 20;\n    mp[79] = 21;\n    mp[83] = 22;\n    mp[89] = 23;\n    mp[97] = 24;\n    mp[101] = 25;\n    mp[103] = 26;\n    mp[107] = 27;\n    mp[109] = 28;\n    mp[113] = 29;\n    mp[127] = 30;\n    mp[131] = 31;\n    mp[137] = 32;\n    mp[139] = 33;\n    mp[149] = 34;\n    mp[151] = 35;\n    mp[157] = 36;\n    mp[163] = 37;\n    mp[167] = 38;\n    mp[173] = 39;\n    mp[179] = 40;\n    mp[181] = 41;\n    mp[191] = 42;\n    mp[193] = 43;\n    mp[197] = 44;\n    mp[199] = 45;\n    mp[211] = 46;\n    mp[223] = 47;\n    mp[227] = 48;\n    mp[229] = 49;\n    mp[233] = 50;\n    mp[239] = 51;\n    mp[241] = 52;\n    mp[251] = 53;\n    mp[257] = 54;\n    mp[263] = 55;\n    mp[269] = 56;\n    mp[271] = 57;\n    mp[277] = 58;\n    mp[281] = 59;\n    mp[283] = 60;\n    mp[293] = 61;\n    pm[0] = 2;\n    pm[1] = 3;\n    pm[2] = 5;\n    pm[3] = 7;\n    pm[4] = 11;\n    pm[5] = 13;\n    pm[6] = 17;\n    pm[7] = 19;\n    pm[8] = 23;\n    pm[9] = 29;\n    pm[10] = 31;\n    pm[11] = 37;\n    pm[12] = 41;\n    pm[13] = 43;\n    pm[14] = 47;\n    pm[15] = 53;\n    pm[16] = 59;\n    pm[17] = 61;\n    pm[18] = 67;\n    pm[19] = 71;\n    pm[20] = 73;\n    pm[21] = 79;\n    pm[22] = 83;\n    pm[23] = 89;\n    pm[24] = 97;\n    pm[25] = 101;\n    pm[26] = 103;\n    pm[27] = 107;\n    pm[28] = 109;\n    pm[29] = 113;\n    pm[30] = 127;\n    pm[31] = 131;\n    pm[32] = 137;\n    pm[33] = 139;\n    pm[34] = 149;\n    pm[35] = 151;\n    pm[36] = 157;\n    pm[37] = 163;\n    pm[38] = 167;\n    pm[39] = 173;\n    pm[40] = 179;\n    pm[41] = 181;\n    pm[42] = 191;\n    pm[43] = 193;\n    pm[44] = 197;\n    pm[45] = 199;\n    pm[46] = 211;\n    pm[47] = 223;\n    pm[48] = 227;\n    pm[49] = 229;\n    pm[50] = 233;\n    pm[51] = 239;\n    pm[52] = 241;\n    pm[53] = 251;\n    pm[54] = 257;\n    pm[55] = 263;\n    pm[56] = 269;\n    pm[57] = 271;\n    pm[58] = 277;\n    pm[59] = 281;\n    pm[60] = 283;\n    pm[61] = 293;\n} // \u6253\u51fa\u8d28\u6570\u8868\n\nsigned main() {\n    init();\n    scanf(\"%lld %lld\", &n, &q);\n    st.build(1, 1, n), st1.build(1, 1, n);\n    for (int i = 1; i <= n; ++i) \n        scanf(\"%lld\", &a[i]), st.modify(1, 1, n, i, i, a[i]), st1.modify(1, 1, n, i, i, zy(a[i]));\n    while (q --) {\n        int l, r, x; scanf(\" %s\", op);\n        if (op[0] == 'M') {\n            scanf(\"%lld %lld %lld\", &l, &r, &x);\n            st.modify(1, 1, n, l, r, x);\n            st1.modify(1, 1, n, l, r, zy(x)); // \u66f4\u65b0\n        }\n        else {\n            scanf(\"%lld %lld\", &l, &r);\n            int cj = st.query(1, 1, n, l, r) % MOD;\n            int yz = st1.query(1, 1, n, l, r);\n            for (int i = 61; i >= 0; --i)\n                if (pw[i] <= yz) {\n                    int tmp = pm[i];\n                    cj = cj * (tmp - 1) % MOD * qpow(tmp, MOD - 2) % MOD;\n                    yz -= pw[i];\n                } // \u8ba1\u7b97 phi\n            printf(\"%lld\\n\", cj % MOD);\n        }\n    }\n    return 0;\n}\n```\n\n**\u9898\u5916\u8bdd**\n\n\u63a8\u8350\u4e0b\u5927\u4f6c @pzq_loves_qwq \u7684[\u6570\u8bba blog](https://www.luogu.com.cn/blog/alexcoderakioi/nt-huge-hole\n) \u3002",
        "postTime": 1636974604,
        "uid": 384498,
        "name": "soweak",
        "ccfLevel": 0,
        "title": "CF1114F Please, another Queries on Array?"
    },
    {
        "content": "\u9898\u610f\uff1a\u533a\u95f4\u4e58\uff0c\u533a\u95f4\u6c42\u79ef\u7684\u6b27\u62c9\u51fd\u6570\u3002\n\n\u4e58\u7684\u6570\u548c\u539f\u5e8f\u5217\u7684\u6bcf\u4e2a\u6570\u4e0d\u8d85\u8fc7 $300$\u3002\n\n$300$\u3002\u3002\u3002\n\n\u6211\u4eec\u4e8e\u662f\u6709\u4e00\u4e2a\u521d\u7ea7\u7684\u60f3\u6cd5\uff0c\u5c31\u662f\u679a\u4e3e\u6bcf\u4e2a\u8d28\u56e0\u5b50\uff08\u4e0d\u8d85\u8fc7 $62$ \u4e2a\uff09\uff0c\u7136\u540e\u505a\u4e00\u4e2a\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u505a\u5230 $O(wn\\log n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c$O(wn)$ \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\n\n\u5982\u679c\u4f60\u5bf9\u6bcf\u4e2a\u8d28\u56e0\u5b50\u90fd\u5904\u7406\u4e00\u904d\u7684\u8bdd\uff0c\u53ef\u4ee5\u505a\u5230 $O(n)$ \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u53d8\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u505a\u6cd5\u4e0d\u5927\u9ad8\u660e\uff0c\u6211\u4eec\u8003\u8651\u6b27\u62c9\u51fd\u6570\u7684\u6027\u8d28\u3002\n\n\u90a3\u4e48\u4f60\u53ea\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u4e58\u79ef\uff0c\u518d\u7ef4\u62a4\u4e00\u4e0b\u533a\u95f4\u54ea\u4e9b\u8d28\u56e0\u6570\u51fa\u73b0\u8fc7\u5373\u53ef\uff0c\u51fa\u73b0\u8fc7\u5c31\u4e58\u4e0a\u4e00\u4e2a $\\dfrac{p-1}p$\u3002\n\n\u7ef4\u62a4\u8d28\u56e0\u6570\u662f\u5426\u51fa\u73b0\uff0c\u53ef\u4ee5\u538b\u5230\u4e00\u4e2a $\\text{long long}$ \u91cc\u9762\u3002\n\n\u4f18\u5316\uff1a\u6ce8\u610f\u5230\u6709\u4e9b\u5feb\u901f\u5e42\u7684\u5e95\u6570\u4e0d\u8d85\u8fc7 $300$\uff0c\u8fd9\u4e9b\u5149\u901f\u5e42\u3002\u3002\u3002\n\n\u5206\u89e3\u8d28\u56e0\u6570\u65f6\u53ef\u4ee5\u6bcf\u6b21\u9664\u4ee5\u8fd9\u4e2a\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u8fd9\u6837\u5206\u89e3 $n$ \u7684\u590d\u6742\u5ea6\u5c31\u662f $(\\log n)$ \u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff0c$w$ \u6307 $300$\uff0c$O(w\\sqrt p+n(\\log n+\\log w)+m\\log n\\log c)$\n```cpp\n#define maxn 400010\nconst int p=1e9+7;\ntemplate<class _Tp,class _tp>void add(_Tp&x,const _tp& y){((x+=y)>=p)&&(x-=p);}template<class _Tp,class _tp>_Tp Add(_Tp x,const _tp y){add(x,y);return x;}\ntemplate<class _Tp,class _tp>void sub(_Tp&x,const _tp&y){((x-=y)<0)&&(x+=p);}template<class _Tp,class _tp>_Tp Sub(_Tp x,const _tp y){sub(x,y);return x;}\ntemplate<class _Tp,class _tp>void mul(_Tp&x,const _tp&y){x=1ll*x*y%p;}template<class _Tp,class _tp>_Tp Mul(const _Tp x,const _tp y){return 1ll*x*y%p;}\ntemplate<class _Tp,class _tp>_Tp ksm(_Tp a,_tp b){_Tp ans(1);for(;b;b>>=1,mul(a,a))if(b&1)mul(ans,a);return ans;} \ntemplate<class _Tp>_Tp div2(_Tp a){if(a&1)a+=p;return a>>1;}\nint n,m;\nchar ch[16];\nint l,r,x;\nstruct prpr{\n\tint l,r;\n\tlong long tag,u;\n\tint sm,g;\n}tree[maxn<<2];\nint pri[maxn],tot,to[maxn],lpf[maxn];\nint gsm[322][32769][2];\nvoid shai(int n){\n\tfor(int i=2;i<=n;i++){\n\t\tif(!lpf[i])pri[lpf[i]=++tot]=i,to[i]=tot;\n\t\tfor(int j=1;j<=lpf[i]&&i*pri[j]<=n;j++)lpf[i*pri[j]]=j;\n\t}\n\tfor(int i=2;i<=300;i++){\n\t\tgsm[i][0][0]=gsm[i][0][1]=1;\n\t\tfor(int j=1;j<=32768;j++)gsm[i][j][0]=Mul(gsm[i][j-1][0],i);\n\t\tfor(int j=1;j<=32768;j++)gsm[i][j][1]=Mul(gsm[i][j-1][1],gsm[i][32768][0]);\n\t}\n}\nint Ksm(int i,int j){\n\tif(i==1)return 1;\n\treturn Mul(gsm[i][j>>15][1],gsm[i][j&32767][0]);\n}\nvoid pushup(int x){\n\ttree[x].sm=Mul(tree[x<<1].sm,tree[x<<1|1].sm);\n\ttree[x].u=tree[x<<1].u|tree[x<<1|1].u;\n}\nvoid pushdown(int x){\n\tif(tree[x].g!=1){\n\t\tmul(tree[x<<1].g,tree[x].g);\n\t\ttree[x<<1].tag|=tree[x].tag;\n\t\ttree[x<<1].u|=tree[x].tag;\n\t\tmul(tree[x<<1|1].g,tree[x].g);\n\t\ttree[x<<1|1].tag|=tree[x].tag;\n\t\ttree[x<<1|1].u|=tree[x].tag;\n\t\tmul(tree[x<<1].sm,ksm(tree[x].g,tree[x<<1].r-tree[x<<1].l+1));\n\t\tmul(tree[x<<1|1].sm,ksm(tree[x].g,tree[x<<1|1].r-tree[x<<1|1].l+1));\n\t\ttree[x].g=1;tree[x].tag=0;\n\t}\n}\nvoid build(int l,int r,int o=1){\n\ttree[o].l=l,tree[o].r=r;\n\ttree[o].g=1;\n\tif(l==r){\n\t\tcin>>tree[o].sm;x=tree[o].sm;\n\t\twhile(x-1)tree[o].u|=1ll<<lpf[x],x/=pri[lpf[x]];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,o<<1),build(mid+1,r,o<<1|1);\n\tpushup(o);\n}\nint xxy;\nvoid change(int l,int r,long long _,int o=1){\n\tif(tree[o].l>=l&&tree[o].r<=r){\n\t\ttree[o].u|=_,tree[o].tag|=_;\n\t\tmul(tree[o].sm,Ksm(xxy,tree[o].r-tree[o].l+1));\n\t\tmul(tree[o].g,xxy);\n\t\treturn;\n\t}pushdown(o);\n\tint mid=(tree[o].l+tree[o].r)>>1;\n\tif(l<=mid)change(l,r,_,o<<1);\n\tif(r>mid)change(l,r,_,o<<1|1);\n\tpushup(o);\n}\nvoid work(pair<int,long long>&a,pair<int,long long>b){\n\tmul(a.first,b.first);\n\ta.second|=b.second;\n}\npair<int,long long>ask(int l,int r,int x=1){\n\tif(tree[x].l>=l&&tree[x].r<=r)return make_pair(tree[x].sm,tree[x].u);\n\tpushdown(x);\n\tint mid=(tree[x].l+tree[x].r)>>1;\n\tpair<int,long long>ans(1,0);\n\tif(l<=mid)work(ans,ask(l,r,x<<1));\n\tif(r>mid)work(ans,ask(l,r,x<<1|1));\n\treturn ans;\n}\nlong long gg;\nint ans;\nsigned main(){\n#ifndef ONLINE_JUDGE\n\tfreopen(\"testdata.in\",\"r\",stdin);\n#endif\n\tcin>>n>>m;\n\tshai(300);\n\tbuild(1,n);\n\twhile(m--){\n\t\tcin>>ch>>l>>r;\n\t\tif(ch[0]=='M'){\n\t\t\tcin>>x;\n\t\t\txxy=x;\n\t\t\tgg=0;\n\t\t\twhile(x-1)gg|=1ll<<lpf[x],x/=pri[lpf[x]];\n\t\t\tchange(l,r,gg);\n\t\t}else{\n\t\t\tpair<int,long long>u=ask(l,r);\n\t\t\tans=u.first;\n\t\t\tfor(int i=1;i<=tot;i++)\n\t\t\tif(u.second>>i&1)mul(ans,Mul(pri[i]-1,Ksm(pri[i],p-2)));\n\t\t\tcout<<ans<<endl;\n\t\t}\n\t}\n#ifndef ONLINE_JUDGE\n\tcerr<<endl<<(double)clock()/CLOCKS_PER_SEC;\n#endif\n}\n```\n\u6211\u7684 $\\text{ask}$ \u662f\u7528 $\\text{pair}$ \u5b58\u7684\uff0c\u4e0d\u5927\u9ad8\u660e\uff0c\u800c\u4e14\u5feb\u901f\u4e5f\u6ca1 $\\text{rk1}$ \u9ad8\uff0c\u88ab\u6253\u7206\u4e86\uff0c\u53ea\u6709 $\\text{rk2}$\u3002",
        "postTime": 1633678160,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "CF1114F Please, another Queries on Array? \u8bb0\u5f55"
    }
]