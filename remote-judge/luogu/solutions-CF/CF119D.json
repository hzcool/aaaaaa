[
    {
        "content": "## \u89e3\u6790\n\n\u8003\u8651\u679a\u4e3e $i$\n\n\u9996\u5148\u8003\u8651 $A[0..i]$ \u7684\u9650\u5236\uff0c\n\n\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e1c\u897f\u603b\u662f $R(A)$ \u7684\u524d\u7f00\u548c $R(B)$ \u7684\u524d\u7f00\u5339\u914d\uff0c\u4e8e\u662f\u76f4\u63a5\u6a21\u62df\u6c42\u51fa $i$ \u7684\u6700\u5927\u503c\u5373\u53ef\n\n\u63a5\u7740\u8003\u8651 $A[(i+1)..(j-1)]$ \u7684\u9650\u5236\uff0c\n\n\uff08\u8981\u6c42 $A[(i+1)..(j-1)]$ \u548c $B[0..((j-1)-(i+1)+1-1)]=B[0..(j-i-2)]$ \u662f\u5339\u914d\u7684\uff09\n\n\u53d1\u73b0\u4e24\u4e2a\u5b50\u4e32\u5728\u4e24\u4e2a\u5b57\u7b26\u4e32\uff08$A, B$\uff09\u5185\u7684**\u8d77\u70b9**\u90fd\u662f\u56fa\u5b9a\uff0c\u4e8e\u662f\u4e0d\u96be\u60f3\u5230 z-algorithm\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u8bbe $z[i]$ \u8868\u793a $B$ \u7684\u524d\u7f00\u548c $A$ \u4ece $i$ \u5f00\u59cb\u7684\u5b50\u4e32\u7684\u6700\u957f\u516c\u5171\u4e32\u957f\uff1b\u63a5\u7740\u53ea\u9700\u68c0\u67e5\u4e0b\u662f\u5426\u6ee1\u8db3\u6709 $j-i-1\\leq z[i+1]$ \u5373\u53ef\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $i$\uff0c\u4ec5\u5728 $A[(i+1)..(j-1)]$ \u7684\u9650\u5236\u4e0b\uff0c$j-i-1$ \u7684\u53d6\u503c\u53ea\u8981\u4e0d\u8d85\u8fc7\uff08**\u6700\u5927\u503c**\uff09$z[i+1]$ \u5373\u53ef\uff08\u5373\u53d6\u503c\u8303\u56f4\u4e3a $[0, z[i+1]]$\uff09\n\n\u6700\u540e\u8003\u8651 $A[j..(n-1)]$ \u7684\u9650\u5236\uff0c\n\n\u4e00\u4e2a\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\uff0c\u5148\u8003\u8651\u4e5f\u679a\u4e3e $j$\uff0c\u7136\u540e\u518d\u4f18\u5316\u679a\u4e3e\u3002\u5bf9\u4e8e\u786e\u5b9a\u7684 $i, j$\uff0c\u8981\u6c42 $A[j..(n-1)]$ \u548c $B[(j-i-1)..(n-i-2)]$ \u662f\u5339\u914d\u7684\uff0c\u800c\u60f3\u4f18\u5316\u8fd9\u4e2a\u975e\u5e38\u9ebb\u70e6\uff08\u4e14\u6700\u540e\u5f97\u5230\u7684\u590d\u6742\u5ea6\u4e5f\u4e0d\u662f\u5f88\u4f18\uff09\n\n\u8003\u8651\u6362\u4e00\u4e2a\u601d\u8def\u3002\u56e0\u4e3a\u521a\u624d\u7ed9\u51fa\u7684 $j$ \u7684\u53d6\u503c\u90fd\u662f**\u8fde\u7eed\u7684**\uff0c\u4e14\u4e0b\u754c\u5c31\u662f $j$ **\u6309\u7167\u5b9a\u4e49\u7ed9\u51fa\u7684\u4e0b\u754c**\uff08\u5373$j=i+1$\uff09\uff0c\u56e0\u6b64\u8003\u8651\u76f4\u63a5\u6c42\u51fa $j$ \u7684**\u6700\u5c0f\u503c**\u3002\u53d1\u73b0\u4e24\u4e2a\u5b50\u4e32\u5728\u4e24\u4e2a\u5b57\u7b26\u4e32\u5185\u7684**\u7ec8\u70b9**\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u518d\u8054\u60f3\u4e00\u4e0b\uff0c\u53ef\u4ee5\u60f3\u5230\u7528 kmp\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u8bbe $\\pi[i]$ \u8868\u793a $R(A)$ \u7684\u524d\u7f00\u548c $B$ \u5728 $i$ \u7ed3\u675f\u7684\u5b50\u4e32\u7684\u6700\u957f\u516c\u5171\u4e32\u957f\uff1b\u63a5\u7740 $(n-i-2)-\\pi[n-i-2]+1$ \u5373\u4e3a $i-j-1$ \u7684\u6700\u5c0f\u503c\n\n\u6b64\u5916\u8fd8\u6709\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u8981\u6ce8\u610f\uff08\u4f8b\u5982 $i$ \u7684\u6700\u5927\u503c\u4e3a $n-2$ \u7b49\uff09\n\n## CODE\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing std::vector;\nusing std::min;\nusing std::max;\n\nconst int MAXN =1e6+20;\n\n/*------------------------------IO------------------------------*/\n\nvoid write(const int &x){\n\tif(x/10)\n\t\twrite(x/10);\n\tputchar('0'+x%10);\n}\n\nstruct string{\n\tchar data[MAXN];\n\tint len;\n\t\n\tint size() const{\n\t\treturn len;\n\t}\n\tvoid reverse(){\n\t\tstd::reverse(data, data+len);\n\t}\n\t\n\tchar & operator [] (const int &index){\n\t\treturn data[index];\n\t}\n\tchar operator [] (const int &index) const{\n\t\treturn data[index];\n\t}\n};\n\nvoid read_string(string &s){\n\tchar ch =getchar();\n\twhile(ch < 32 || ch > 126)\n\t\tch =getchar();\n\ts.len =0;\n\twhile(ch >= 32 && ch <= 126)\n\t\ts[s.len++] =ch, ch =getchar();\n}\n\n/*------------------------------Kmp------------------------------*/\n\nvector<int> kmp(const string &s1, const string &s2, const vector<int> &pi_s2_init =vector<int>(1, -1)){\n\tconst int n1 =s1.size(), n2 =s2.size();\n\tvector<int> pi(n1, 0);\n\tconst vector<int> &pi_s2 =(pi_s2_init[0] != -1) ? pi_s2_init : pi;\n\tpi[0] =(&s1 == &s2) ? 0 : (s1[0] == s2[0]);\n\tfor(int i =1; i < n1; ++i){\n\t\tint j =pi[i-1];\n\t\tif(j == n2)\n\t\t\tj =pi_s2[0+j-1];\n\t\twhile(j && s2[0+j-1+1] != s1[i])\n\t\t\tj =pi_s2[0+j-1];\n\t\tpi[i] =j+(s2[0+j-1+1] == s1[i]);\n\t}\n\treturn pi;\n}\n\n/*------------------------------Z-Algorithm------------------------------*/\n\nvector<int> z_algorithm(const string &s1, const string &s2, const vector<int> &z_s2_init =vector<int>(1, -1)){\n\tconst int n1 =s1.size(), n2 =s2.size();\n\tvector<int> z(n1, 0);\n\tconst vector<int> &z_s2 =(z_s2_init[0] != -1) ? z_s2_init : z;\n\twhile(z[0] < n2 && s1[z[0]] == s2[z[0]])\n\t\t++z[0];\n\tfor(int i =1, l =0, r =0; i < n1; ++i){\n\t\tif(i < r)\n\t\t\tz[i] =min(r-i, z_s2[i-l]);\n\t\twhile(z[i] < n2 && i+z[i] < n1 && s1[i+z[i]] == s2[z[i]])\n\t\t\t++z[i];\n\t\tif(r < i+z[i])\n\t\t\tl =i, r =i+z[i];\n\t}\n\treturn z;\n}\n\n/*------------------------------Main------------------------------*/\n\nint main(){\n\tstring A, B;\n\tread_string(A), read_string(B);\n\t\n\tauto Ans =[&](const int &i, const int &j){\n\t\tif(i == -1)\n\t\t\tputs(\"-1 -1\");\n\t\telse\n\t\t\twrite(i), putchar(' '), write(j);\n\t\treturn 0;\n\t};\n\t\n\tif(A.size() != B.size())\n\t\treturn Ans(-1, -1);\n\tconst int n =A.size();\n\t\n\tstring RA =A;\n\tRA.reverse();\n\tconst vector<int> z_A_B =z_algorithm(A, B, z_algorithm(B, B)), pi_B_RA =kmp(B, RA, kmp(RA, RA));\n\t/**\n\t *  z_A_B[i+1]: \u6700\u957f\u7684 A[i..j] \u7684\u957f\u5ea6 //\n\t *  pi_B_RA[n-1-(i+1)]: \u6700\u957f\u7684 A[j..(n-1)] \u7684\u957f\u5ea6 //\n\t**/\n\t\n\tint init_i =0;\n\twhile(init_i < n && A[init_i] == B[n-1-init_i])\n\t\t++init_i;\n\tfor(int i =min(n-2, init_i-1); i >= 0; --i){\n\t\tconst int len_pre =i+1;\n\t\t// \u8fd9\u91cc\u7684 \"j\" \u662f\u6307 j \u5bf9\u5e94\u7684\u5728 B \u7684\u4e0b\u6807 //\n\t\t// \u5373 \"j\" =j-len_pre //\n\t\tconst int j_min =(n-1-len_pre)-pi_B_RA[n-1-len_pre]+1;\n\t\tconst int j_max =0+z_A_B[i+1];\n\t\tif(j_max >= j_min)\n\t\t\treturn Ans(i, i+((j_min-1)-0+1)+1);\n\t}\n\t\n\treturn Ans(-1, -1);\n}\n```",
        "postTime": 1609074341,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF119D \u3010String Transformation\u3011"
    },
    {
        "content": "\u4e00\u9053 kmp+hash \u7684\u597d\u9898\uff0c\u503c\u5f97\u4e00\u505a\u3002\n\n\u5148\u5b9a\u4e49\u51e0\u4e2a\u51fd\u6570 $\\operatorname{Z(a,b)}$ \u8868\u793a\u5b57\u7b26\u4e32 $\\operatorname{a}$ \u7684\u524d\u7f00\u4e0e\u5b57\u7b26\u4e32 $\\operatorname{b}$ \u7684\u540e\u7f00\u76f8\u540c\u7684\u6700\u5927\u957f\u5ea6\uff08\u4e5f\u5c31\u662f\u6c42\u4e00\u4e2a\u6700\u5927\u957f\u5ea6 $len$ \u4f7f\u5f97\u5b57\u7b26\u4e32 $\\operatorname{a}$ \u7684\u957f\u5ea6\u4e3a $len$ \u7684\u524d\u7f00\u4e0e\u5b57\u7b26\u4e32 $\\operatorname{b}$ \u7684\u957f\u5ea6\u4e3a $len$ \u7684\u540e\u7f00\u76f8\u7b49\uff09\uff0c\u89c4\u5b9a\u5b57\u7b26\u4e32\u7684\u7f16\u53f7\u4ece $1$ \u5f00\u59cb\uff0c\u4e14\u9898\u76ee\u4e2d\u7684\u51fd\u6570\u4e3a ~~(\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u5b50\u89c4\u5b9a\uff0c\u9898\u76ee\u539f\u6765\u7684\u770b\u8d77\u6765\u4e0d\u723d)~~\uff1a\n\n$$\n\\operatorname{F(s,i,j)=s[i...j]+R(s[j+1...n])+R(s[1..i-1])}\n$$\n\n\u521d\u770b\u9898\u76ee\u770b\u8d77\u6765\u5f88\u6076\u5fc3\uff0c\u8fd9\u4e2a $\\operatorname{R}$ \u51fd\u6570\u5bfc\u81f4\u8fd9\u4e2a\u9898\u76ee\u76f4\u63a5\u505a\u4e00\u70b9\u4e5f\u4e0d\u597d\u505a\u3002\n\n\u663e\u7136\u5982\u679c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u540c\u80af\u5b9a\u65e0\u89e3\u3002\n\n\u8003\u8651\u628a\u4e32 $\\operatorname{A}$ \u7ffb\u8f6c\u5f97\u5230\u5b57\u7b26\u4e32 $\\operatorname{C}$\uff0c\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e9b\u795e\u5947\u7684\u4e1c\u897f\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5c31\u62ff\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\uff0c\n\n\u4e32 `A`\uff1aDie Polizei untersucht eine Straftat im IT-Bereich.   \n\u4e32 `B`\uff1auntersucht eine Straftat.hciereB-TI mi  ieziloP eiD    \n\u4e32 `C`\uff1a.hciereB-TI mi tatfartS enie thcusretnu ieziloP eiD\n\n\u4f60\u4f1a\u53d1\u73b0\u9898\u76ee\u4e2d\u7684 $\\operatorname{R(s[1\u2026i-1])}$ \u5c31\u53ea\u80fd\u4e3a\u4e32 `B` \u4e0e\u4e32 `C` \u6700\u957f\u540e\u7f00\u7684\u4efb\u610f\u4e00\u4e2a\u540e\u7f00\u3002\n\n\u8003\u8651\u679a\u4e3e\u4e32 `B` \u7684\u4e00\u4e2a\u4f4d\u7f6e $i(i\\lt |B|)$\uff0c\u53d1\u73b0\u8fd9\u4e2a\u4f4d\u7f6e\u6ee1\u8db3\u6761\u4ef6\u5f53\u4e14\u4ec5\u5f53 $\\operatorname{Z(C[1...i],B[1...i])}\\ge1$ \u4e14 $\\operatorname{B[1....i-Z(C[1...i],B[1...i])]=R(C[Z(C[1...i],B[1...i])+1...i])}$ \u4e14 $\\operatorname{B[1....i-Z(C[1...i],B[1...i])]=R(C[Z(C[1...i],B[1...i])+1...i])}$\u3002\n\n\u53d1\u73b0 $\\operatorname{Z(C[1...i],B[1...i])}$ \u53ef\u4ee5\u7528 kmp \u7b97\u51fa\u6765\uff0c\u4e8e\u662f\u76f4\u63a5\u679a\u4e3e\u957f\u5ea6 $i$\uff0c\u7528 hash \u68c0\u9a8c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4e0d\u8fc7\u4f60\u4f1a\u53d1\u73b0\u8fd9\u8fc7\u4e0d\u4e86\u6837\u4f8b\u4e8c\uff0c\u56e0\u4e3a $\\operatorname{Z(C[1...i],B[1...i])}=i$ \u7684\u65f6\u5019\u4f1a\u70b8\uff0c$\\operatorname{F(s,i,j)}$ \u4e2d\u7684 $i$ \u4e0d\u80fd\u7b49\u4e8e $1$\uff0c\u5c06 $\\operatorname{Z(C[1...i],B[1...i])}$ \u7f6e\u4e3a $1$ \u5373\u53ef\u3002\n\n\u4e0b\u9762\u662f\u559c\u95fb\u4e50\u89c1\u7684\u4ee3\u7801\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#define ull unsigned long long\nchar a[1000005], b[1000005], c[1000005];\null p = 131, P[1000005], A[1000005], B[1000005], C[1000005];\null hasha(int l, int r) { return A[r] - A[l - 1] * P[r - l + 1]; }\null hashb(int l, int r) { return B[r] - B[l - 1] * P[r - l + 1]; }\null hashc(int l, int r) { return C[r] - C[l - 1] * P[r - l + 1]; }\nint len1, len2, ans1 = -1, ans2 = -1, Nxt[1000005], Nxt2[1000005];\nvoid Ckans(int a, int b) {\n    if (ans1 == -1 && ans2 == -1)\n        ans1 = a, ans2 = b;\n    else {\n        if (a > ans1)\n            ans1 = a, ans2 = b;\n        else if (a == ans1 && ans2 > b)\n            ans2 = b;\n    }\n}\nsigned main() {\n    gets(a + 1), gets(b + 1);\n    len1 = strlen(a + 1), len2 = strlen(b + 1);\n    if (len1 != len2)\n        return printf(\"-1 -1\") & 0;\n    reverse(a + 1, a + len1 + 1);\n    for (int i = 1; i <= len1; i++) c[i] = a[i];\n    puts(c+1);\n    reverse(a + 1, a + len1 + 1);\n    P[0] = 1;\n    for (int i = 1; i <= len1; i++) P[i] = P[i - 1] * p;\n    for (int i = 1; i <= len1; i++) {\n        A[i] = A[i - 1] * p + a[i];\n        B[i] = B[i - 1] * p + b[i];\n        C[i] = C[i - 1] * p + c[i];\n    }\n    for (int i = 2, j = 0; i <= len1; i++) {\n        while (j && c[j + 1] != c[i]) j = Nxt[j];\n        if (c[j + 1] == c[i])\n            j++;\n        Nxt[i] = j;\n    }\n    for (int i = 1, j = 0; i <= len1; i++) {\n        while (j && c[j + 1] != b[i]) j = Nxt[j];\n        if (c[j + 1] == b[i])\n            j++;\n        Nxt2[i] = j;\n    }\n    for (int i = 1; i < len1; i++) {\n        int now = Nxt2[i];\n        if (now == 0)\n            continue;\n        if (now == i)\n            now = 1;\n        int beginc = now + 1, endc = i;\n        if (hashb(1, i - now) == hasha(len1 - endc + 1, len1 - beginc + 1) &&\n            hashb(i + 1, len1) == hashc(i + 1, len1))\n            Ckans(len1 - i - 1, len1 - now);\n    }\n    printf(\"%d %d\\n\", ans1, ans2);\n    return 0;\n}\n```",
        "postTime": 1598257346,
        "uid": 154560,
        "name": "Silver187",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF119D \u3010String Transformation\u3011"
    }
]