[
    {
        "content": "**\u9898\u610f** : (\u548c\u539f\u9898\u9762\u672c\u8d28\u76f8\u540c)\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\u3002 \n\n\u63a5\u4e0b\u6765 $q$ \u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fa\u4e00\u4e2a\u5e38\u6570 $k$\u3002\n\n\u6c42\u6700\u5c11\u628a\u5e8f\u5217\u5206\u4e3a\u591a\u5c11\u6bb5\u4f7f\u5f97\u6bcf\u6bb5\u5e8f\u5217\u4e2d\u6570\u7684\u6781\u5dee\u4e0d\u8d85\u8fc7 $k$\u3002\n\n\u5141\u8bb8\u79bb\u7ebf\u3002\n\n$n,q\\leq 10^5$ ,\u65f6\u9650$\\texttt{7s}$\u3002\n\n------------\n\n\u9996\u5148\u4e0d\u96be\u9488\u5bf9\u5355\u7ec4\u8be2\u95ee\u60f3\u5230\u66b4\u529b : \u6bcf\u6b21\u8d2a\u5fc3\u5212\u5206\uff0c\u80fd\u4e0d\u5206\u5c31\u4e0d\u5206\u3002\u6b63\u786e\u6027\u8f83\u4e3a\u663e\u7136\u3002\n\n\u4f3c\u4e4e\u96be\u4ee5\u5f97\u51fa\u66f4\u5f3a\u7684\u6027\u8d28\uff0c\u8003\u8651\u4f18\u5316\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\n\u8bbe $t[i]$ \u4e3a\u7b2c $i$ \u4e2a\u4f4d\u7f6e\u5206\u51fa\u4e00\u6bb5\uff0c\u6700\u8fdc\u80fd\u5230\u8fbe\u54ea\u91cc\u3002\n\n\u8fd9\u6837\uff0c\u82e5\u5728 $(i,t[i])$ \u4e4b\u95f4\u8fde\u8fb9\uff0c$dis(1,n+1)$ \u5c31\u662f\u7b54\u6848\u3002\n\n\u8fd9\u4e9b\u8fb9\u4f1a\u65b0\u6210\u4e00\u68f5\u6811\uff0c\u4e0d\u96be\u60f3\u5230\u4f7f\u7528 $\\rm LCT$ \u6765\u7ef4\u62a4\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u6309\u6781\u5dee\u7ea6\u675f\u4ece\u5c0f\u5230\u5927\u6765\u56de\u7b54\u3002\n\n\u663e\u7136 $t[i]$ \u4f1a\u9010\u6e10\u53d8\u5927\uff0c\u4f46\u662f\u603b\u53d8\u5316\u6b21\u6570\u53ef\u80fd\u9ad8\u8fbe $O(n^2)$\uff0c\u4e0d\u80fd\u627f\u53d7\u3002\n\n\u8003\u8651\u6839\u53f7\u5206\u6cbb\u3002\n\n\u82e5 $t[i]\\leq \\sqrt{n}$ \u624d\u4f7f\u7528 $\\rm LCT$ \u7ef4\u62a4\u3002\n\n\u7531\u4e8e $t$ \u53ea\u4f1a\u589e\u52a0\uff0c\u8fd9\u90e8\u5206\u7684\u603b\u53d8\u5316\u6b21\u6570\u4e3a $O(n\\sqrt{n})$\u3002\n\n\u8fd9\u6837\u4f1a\u5f62\u6210\u68ee\u6797\u800c\u975e\u5355\u68f5\u6811\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u7531\u4e8e\u8d85\u8fc7 $\\sqrt{n}$ \u7684\u8fb9\u624d\u4f1a\u5bfc\u81f4\u65ad\u5f00\uff0c\u68ee\u6797\u4e2d\u6811\u7684\u603b\u6570\u4e0d\u8d85\u8fc7 $O(\\sqrt{n})$\u3002\n\n\u6211\u4eec\u5229\u7528 $\\rm LCT$ \u6bcf\u6b21\u8df3\u8fc7\u4e00\u68f5\u6811\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u5c31\u662f $O(n\\sqrt{n})$ \u4e2a\u5355\u70b9\u6c42\u89e3 $t$ \u7684\u8be2\u95ee\u3002\n\n\u8fd9\u91cc\u4f7f\u7528 $\\rm ST$ \u8868\u914d\u5408\u4e8c\u5206\uff0c\u5199\u6210\u500d\u589e\u5e38\u6570\u4f1a\u5c0f\u4e00\u4e9b\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(n\\sqrt{n}\\log n)$\u3002\n\n\u4e0b\u9762\u662f\u5b9e\u73b0\u7ec6\u8282 :\n\n- $t[i]\\leq \\sqrt{n}$ \u7684 $O(n\\sqrt{n})$ \u6b21\u53d8\u5316\u5982\u4f55\u627e\u5230\u3002\n\n  \u6bcf\u6b21 $t[i]$ \u53d8\u5316\u540e\uff0c\u4e8c\u5206\u51fa\u4e0b\u4e00\u6b21\u53d8\u5316\u6240\u9700\u7684\u6781\u5dee,\u7136\u540e\u7528 `vector` \u6765\u5206\u914d\u7ed9\u6bcf\u4e2a\u8be2\u95ee\u3002\n  \n- \u600e\u4e48\u7528 $\\rm LCT$ \u6bcf\u6b21\u8df3\u8fc7\u4e00\u68f5\u6811\u3002\n\n  $\\rm LCT$ \u4e2d\u7f16\u53f7\u5927\u7684\u70b9\u603b\u662f\u4e3a\u7236\u4eb2\uff0c\u8fd9\u6837 $\\access$ \u4e00\u4e0b\u5c31\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u8def\u5f84\u4e86\u3002\n  \n```cpp\n#include<algorithm>\n#include<vector>\n#include<cstdio>\n#define pb push_back\n#define ll long long\n#define MaxN 101000\nusing namespace std;\nint read(){\n  int X=0;char ch=0;\n  while(ch<48||ch>57)ch=getchar();\n  while(ch>=48&&ch<=57)X=X*10+(ch^48),ch=getchar();\n  return X;\n}\nstruct LCT{\n  struct Node{int l,r,f,c;}a[MaxN];\n  void Init(int n)\n  {for (int i=1;i<=n;i++)a[i].c=1;}\n  inline bool nrt(int u)\n  {return a[a[u].f].l==u||a[a[u].f].r==u;}\n  inline void up(int u)\n  {a[u].c=a[a[u].l].c+a[a[u].r].c+1;}\n  void rot(int u)\n  {\n    int fa=a[u].f,gf=a[fa].f;\n    if (a[gf].l==fa)a[gf].l=u;\n    if (a[gf].r==fa)a[gf].r=u;\n    a[a[fa].f=u].f=gf;\n    if (a[fa].l==u){\n      a[a[fa].l=a[u].r].f=fa;\n      a[u].r=fa;\n    }else {\n      a[a[fa].r=a[u].l].f=fa;\n      a[u].l=fa;\n    }up(fa);up(u);\n  }\n  void splay(int u){\n    while(nrt(u)){\n      int fa=a[u].f,gf=a[fa].f;\n      if (nrt(fa)&&(a[fa].l==u)==(a[gf].l==fa))\n        rot(fa);\n      rot(u);\n    }\n  }\n  void access(int u){\n    int sav=u;\n    for (int v=0;u;u=a[v=u].f)\n      {splay(u);a[u].r=v;up(u);}\n    splay(sav);\n  }\n  int findrt(int u){\n    access(u);\n    while(a[u].l)u=a[u].l;\n    splay(u);return u;\n  }\n  void link(int u,int v)\n  {access(u);a[u].f=v;}\n  void cut(int u,int v){\n    access(u);splay(v);\n    a[u].f=a[v].r=0;up(v);\n  }\n}T;\nconst int INF=2100000000;\nint x[MaxN];\nstruct ST\n{\n  int t0[20][MaxN],t1[20][MaxN],lg2[MaxN];\n  void Init(int n,int *x){\n    for (int i=2;i<=n;i++)lg2[i]=lg2[i>>1]+1;\n    reverse(lg2+1,lg2+n+1);\n    for (int i=1;i<=n;i++)\n      t0[0][i]=t1[0][i]=x[i];\n    for (int j=0;(1<<j+1)<=n;j++)\n      for (int i=1;i+(1<<j+1)-1<=n;i++){\n        t0[j+1][i]=min(t0[j][i],t0[j][i+(1<<j)]);\n        t1[j+1][i]=max(t1[j][i],t1[j][i+(1<<j)]);\n      }\n  }\n  int qry(int u,int lim,int &l,int &r){\n    l=INF;r=0;\n    for (int k=lg2[u];~k;k--)\n      if (k<=lg2[u]&&max(r,t1[k][u])-min(l,t0[k][u])<=lim){\n        r=max(r,t1[k][u]);\n        l=min(l,t0[k][u]);\n        u+=(1<<k);\n      }\n    return u;\n  }\n  int qry2(int u,int lim){\n    int l,r;\n    return qry(u,lim,l,r);\n  }\n}S;\nstruct Qry{int l,p;}sq[MaxN];\nbool cmpQ(const Qry &A,const Qry &B)\n{return A.l<B.l;}\nvector<int> tb[MaxN];\nint n,BS,q,t[MaxN];\nvoid upd(int u,int lim)\n{\n  if (t[u])T.cut(u,t[u]);\n  int l,r,sav=S.qry(u,lim,l,r);\n  t[u]=sav;\n  if (t[u]-u<=BS){\n    T.link(u,t[u]);\n    if (t[u]<=n){\n      int nxt=max(r,x[t[u]])-min(l,x[t[u]]),\n          tim=lower_bound(sq+1,sq+q+1,(Qry){nxt,0},cmpQ)-sq;\n      if (tim<=q)tb[tim].pb(u);\n    }\n  }\n}\nint solve(int i,vector<int> &b)\n{\n  int lim=sq[i].l;\n  for (int i=0;i<b.size();i++)\n    upd(b[i],lim);\n  b.clear();\n  int ret=0;\n  for (int p=1;p<=n;){\n    int rt=T.findrt(p);\n    ret+=T.a[rt].c-1;\n    if (rt>n)break;\n    p=S.qry2(rt,lim);ret++;\n  }return ret;\n}\nint w,ans[MaxN];\nint main()\n{\n  n=read();w=read();q=read();\n  while(BS*BS<n)BS++;\n  for (int i=1;i<=n;i++)x[i]=read();\n  x[n+1]=INF;S.Init(n+1,x);\n  for (int i=1;i<=q;i++){\n    sq[i].l=w-read();\n    sq[i].p=i;\n  }sort(sq+1,sq+q+1,cmpQ);\n  T.Init(n+1);\n  for (int i=1;i<=n;i++)tb[1].pb(i);\n  for (int i=1;i<=q;i++)\n    ans[sq[i].p]=solve(i,tb[i]);\n  for (int i=1;i<=q;i++)\n    printf(\"%d\\n\",ans[i]-1);\n  return 0;\n}\n```\n  \n\u542c\u8bf4\u8fd8\u6709 $O(n^{5/3}+n^{4/3}\\log n)$ \u7684\u505a\u6cd5? Orz\n\n",
        "postTime": 1602993082,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1039E \u3010Summer Oenothera Exhibition\u3011"
    },
    {
        "content": "[CF1039E Summer Oenothera Exhibition](https://www.luogu.com.cn/problem/CF1039E)\n\n\u4e00\u8138\u4e0d\u53ef\u505a\u7684\u4e9a\u5b50  \n\u65f6\u96507s\uff0c\u4e00\u770b\u5c31\u4e0d\u662fpolylog\u7684\u9898  \n\u9996\u5148\u4ee4$k_i=w-k_i$,\u7136\u540e$w$\u5c31\u6ca1\u7528\u4e86  \n\u8003\u8651\u5bf9\u4e00\u4e2a$k$\u600e\u4e48\u505a  \n\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u53d1\u73b0\u76f4\u63a5\u8d2a\u5fc3\u5c31\u53ef\u4ee5\u4e86  \n\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u6bcf\u6b21\u5c3d\u91cf\u5f80\u53f3\u53d6\uff0c\u80fd\u53d6\u5c31\u53d6  \n\n\u4e8e\u662f\u5f97\u5230\u4e86\u4e00\u4e2a$O(nq)$\u7684\u505a\u6cd5  \n\u8be2\u95ee\u53ef\u4ee5\u79bb\u7ebf  \n\u4e8e\u662f\u628a\u5b83\u4eec\u4ece\u5c0f\u5230\u5927\u6392\u5e8f  \n\u50cf\u5f39\u98de\u7ef5\u7f8a\u90a3\u6837 \u8bb0$nxt[i]$\u4e3a\u4ee5$i$\u4e3a\u5de6\u7aef\u70b9\uff0c\u53f3\u7aef\u70b9\u6700\u6709\u80fd\u5ef6\u4f38\u5230\u54ea\u91cc  \n\u7136\u540e\u5c31\u8f6c\u6362\u4e3a\u6c42\u4ece$1$\u8df3\u5230$n+1$\u7684\u6b21\u6570  \n\u8fd9\u4e2a\u7528LCT\u7ef4\u62a4\u5c31\u597d\u4e86  \n\u7136\u800c\u53d1\u73b0\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u66f4\u65b0\u4e00\u4e0b$nxt$ ......$O(n^2logn)$\u8fde\u66b4\u529b\u90fd\u8dd1\u4e0d\u8fc7  \n\n\u8003\u8651**\u6839\u53f7\u5206\u6cbb**  \n\u5bf9\u4e8e\u957f\u5ea6$nxt[i]-i<=sqrt(n)$\u7684\u76f4\u63a5\u7528LCT\u7ef4\u62a4  \n\u5bf9\u4e8e\u957f\u5ea6$nxt[i]-i>sqrt(n)$\u7684\u66b4\u529b\u8df3\uff0c\u6700\u591a\u8df3$sqrt(n)$\u6b21\n\n\u7136\u540e\u5c31\u884c\u4e86  \n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\sqrt n \\ \\log n)$  \n\u5173\u4e8e\u533a\u95f4\u6781\u5dee\u6700\u597d\u7528$st$\u8868\uff0c\u4f1a\u5feb\u4e00\u4e9b  \n\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u5427  \ncode:\n```cpp\n#include<bits/stdc++.h>\n#define N 400050\n#define INF 1e9\nusing namespace std;\nint ch[N][2], size[N], rev[N], fa[N];\nvoid update(int x) {\n\tsize[x] = size[ch[x][0]] + size[ch[x][1]] + 1;\n}\nvoid pushr(int x) {\n\tswap(ch[x][0], ch[x][1]), rev[x] ^= 1;\n}\nvoid pushdown(int x) {\n\tif(rev[x]) {\n\t\tif(ch[x][0]) pushr(ch[x][0]);\n\t\tif(ch[x][1]) pushr(ch[x][1]);\n\t\trev[x] = 0;\n\t}\n}\nint nroot(int x) {\n\treturn ch[fa[x]][0] == x || ch[fa[x]][1] == x;\n}\nint get(int x) {\n\treturn ch[fa[x]][1] == x;\n}\nvoid rotate(int x) {\n\tint f = fa[x], gf = fa[f], k = get(x);\n\tif(nroot(f)) ch[gf][get(f)] = x; fa[x] = gf;\n\tif(ch[x][!k]) fa[ch[x][!k]] = f; ch[f][k] = ch[x][!k]; \n\tch[x][!k] = f, fa[f] = x;\n\tupdate(f), update(x);\n}\nint sta[N];\nvoid splay(int x) {\n\tint now = x, top = 0;\n\tsta[++ top] = now;\n\twhile(nroot(now)) sta[++ top] = now = fa[now];\n\twhile(top) pushdown(sta[top --]);\n\twhile(nroot(x)) {\n\t\t\n\t\tint f = fa[x];\n\t\tif(nroot(f))\n\t\t\trotate(get(x) == get(f)? f : x);\n\t\trotate(x);\n\t}\n\tupdate(x);\n}\nvoid access(int x) {\n\tfor(int y = 0; x; x = fa[y = x])\n\t\tsplay(x), ch[x][1] = y, pushdown(x);\n}\nint getroot(int x) {\n\taccess(x), splay(x);\n\tfor(; ch[x][0];) pushdown(x), x = ch[x][0];\n\tsplay(x);\n\treturn x;\n}\nvoid link(int x, int y) { \n\taccess(x); //\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u6362\u6839\uff0c\u56e0\u4e3a\u662f\u5f80\u540e\u8df3 \n\tfa[x] = y;\n}\nvoid cut(int x, int y) {\n\taccess(x), splay(y); // \u540c\u4e0a \n\tfa[x] = ch[y][1] = 0;\n\tupdate(y);\n}\n//-------------------------------LCT \u677f\u5b50-------------------------- \nint logg[N], mi[N][22], ma[N][22], n, w, qq, a[N], ls[N], ANS[N], nxt[N], vis[N];\nvector<int> ha[N];\nint getmi(int l, int r) {\n\tint k = logg[r - l + 1];\n\treturn min(mi[l][k], mi[r - (1 << k) + 1][k]);\n}\nint getma(int l, int r) {\n\tint k = logg[r - l + 1];\n\treturn max(ma[l][k], ma[r - (1 << k) + 1][k]);\n}\nint calc(int l, int r) {//st\u8868\u6c42\u6781\u5dee \n\treturn getma(l, r) - getmi(l, r);\n}\nstruct Q {\n\tint v, id;\n} q[N];\nint cmp(Q x, Q y) {\n\treturn x.v < y.v;\n}\nint gnxt(int x, int k) { // \u5927\u4e8esqrt(n)\u7684 \u66b4\u529b\u5f80\u540e\u8df3 \n\tint l = x, r = n + 1;\n\twhile(l + 1 < r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif(calc(x, mid) > k) r = mid;\n\t\telse l = mid;\n\t}\n\treturn r;\n}\nint main() {\n\tscanf(\"%d%d%d\", &n, &w, &qq);\n\tint blo = sqrt(n);\n\tfor(int i = 1; i <= n; i ++) scanf(\"%d\", &a[i]);\n\tfor(int i = 1; i <= n; i ++) mi[i][0] = ma[i][0] = a[i], size[i] = 1;\n\tlogg[1] = 0;\n\tfor(int i = 2; i <= n; i ++) logg[i] = logg[i >> 1] + 1;\n\tmi[n + 1][0] = - INF, ma[n + 1][0] = INF;\n\tfor(int j = 1; j <= 17; j ++)\n\t\tfor(int i = 1; i <= n + 1; i ++)\n\t\t\tmi[i][j] = min(mi[i][j - 1], mi[i + (1 << (j - 1))][j - 1]), \n\t\t\tma[i][j] = max(ma[i][j - 1], ma[i + (1 << (j - 1))][j - 1]);//st\u8868\u9884\u5904\u7406 \n\t\t\t\n\tfor(int i = 1; i <= qq; i ++) {\n\t\tscanf(\"%d\", &q[i].v); q[i].v = w - q[i].v; //\u628a k \u8f6c\u6362\u4e00\u624b \n\t\tq[i].id = i;\n\t}\n\tsort(q + 1, q + 1 + qq, cmp);\n\tfor(int i = 1; i <= qq; i ++) ls[i] = q[i].v;\n\t\n\tfor(int i = 1; i <= n; i ++) \n\t\tnxt[i] = i, ha[1].push_back(i); // \u5148\u628a\u5168\u90e8\u7684\u5de6\u7aef\u70b9\u4e22\u5230\u7b2c\u4e00\u4e2a\u8be2\u95ee\u90a3\u91cc \n\tfor(int i = 1; i <= qq; i ++) {\n\t\tfor(int ii = 0; ii < ha[i].size(); ii ++) {\n\t\t\tint pos = ha[i][ii], j = nxt[pos] + 1;\n\t\t\tcut(pos, nxt[pos]);// \u5de6\u7aef\u70b9\u4e3apos\u7684\u8fd9\u6761\u8fb9\u53ef\u4ee5\u5f80\u540e\u5ef6\u4f38\uff0c\u5148\u65ad\u5f00\u548c\u539f\u6765\u8fde\u7684 \n\t\t\twhile(j <= n && j - pos <= blo && calc(pos, j) <= q[i].v) j ++;//\u5f80\u540e\u5ef6\u4f38 \n\t\t\tif(j - pos > blo)//\u5982\u679c >sqrt(n)\u5c31\u6807\u8bb0\u4e00\u4e0b\uff0c\u66b4\u529b\u8df3 \n\t\t\t\tvis[pos] = 1;\n\t\t\telse { //\u5426\u5219\u5c31\u66f4\u65b0\u4e00\u4e0bnxt\uff0cLCT\u4e0a\u8fde\u8fb9\uff0c\u4e22\u5230\u4e0b\u4e00\u4e2a\u53ef\u80fd\u4f1a\u8ba9\u5b83\u53f3\u7aef\u70b9\u5ef6\u4f38\u7684\u8be2\u95ee\u90a3\u91cc \n\t\t\t\tnxt[pos] = j;\n\t\t\t\tlink(pos, nxt[pos]);\n\t\t\t\tint jj = lower_bound(ls + 1, ls + 1 + qq, calc(pos, nxt[pos])) - ls;\n\t\t\t\tha[jj].push_back(pos);\n\t\t\t}\n\t\t}\n\t\tint gs = 0;\n\t\tfor(int j = 1; j <= n; j = gnxt(j, q[i].v)) {//\u5927\u529b\u8df3 \n\t\t\tif(!vis[j])//\u5982\u679c\u8fb9\u957f <= sqrt(n) \u5c31\u5728LCT\u4e0a\u627eROOT\uff0c \u7136\u540e\u7b54\u6848\u52a0\u4e0a\u8fd9\u6761\u94fe\u7684\u957f\u5ea6 \n\t\t\t\taccess(j), splay(j), gs += size[j] - 1, j = getroot(j);\n\t\t\tif(j > n) break;\t\n\t\t\tgs ++;\n\t\t}\t\t\n\t\tANS[q[i].id] = gs - 1;//\u66f4\u65b0\u7b54\u6848 \n\t}\n\tfor(int i = 1; i <= qq; i ++) printf(\"%d\\n\", ANS[i]);\n\treturn 0;\n}\n```\n\u6ce8\u610f\u4e00\u4e0b\u7ec6\u8282\uff0c\u60f3\u6e05\u695a\u518d\u5199\u5c31\u597d\u4e86",
        "postTime": 1606398241,
        "uid": 31656,
        "name": "lomit",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1039E \u3010Summer Oenothera Exhibition\u3011"
    },
    {
        "content": "\u9898\u89e3\u533a\u4e2d\u6ca1\u6709\u4eba\u5199 $O(n^{\\frac{5}{3}}+n^{\\frac{4}{3}}\\log n)$ \u7684\u5206\u5757\u505a\u6cd5\uff0c\u90a3\u6211\u5c31\u5f25\u8865\u4e00\u4e0b\u7a7a\u767d\u5427\u3002\u4e0d\u8fc7\u6211\u7684\u535a\u5ba2\u91cc\u4e24\u79cd\u505a\u6cd5\u90fd\u6709\u6574\u7406\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u53bb\u770b\u770b\uff1f\n\n\u535a\u5ba2\uff1a [CF1039E Summer Oenothera Exhibition](https://www.cnblogs.com/Neal-lee/p/15091553.html)\n\n### \u9898\u89e3\n\n\u4e0d\u96be\u60f3\u5230\u8d2a\u5fc3\u505a\u6cd5\uff0c\u6211\u4eec\u4ece $a_1$\u200b \u5f00\u59cb\uff0c\u5f80\u540e\u80fd\u53d6\u5c31\u53d6\uff0c\u82e5\u53d6\u4e0d\u4e86\u5c31\u53ea\u80fd\u518d\u5206\u4e00\u6bb5\u3002\u8fd9\u6837\u6734\u7d20\u5730\u505a\u662f $O(nq)$ \u7684\uff0c\u7136\u540e\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u770b\u8d77\u6765\u975e\u5e38\u53ef\u4ee5\u5206\u5757\uff0c\u4e8e\u662f\u6709\u5982\u4e0b\u601d\u8def\uff1a\n\n\u8bbe $nxt_i$ \u4e3a\u5728\u5f53\u524d $k$ \u4e0b\uff0c\u4ece $a_i$ \u5f80\u540e\u7684\u7b2c\u4e00\u4e2a\u4e0d\u53ef\u4ee5\u4ece $i$\u200b \u5230\u8fd9\u91cc\u5206\u4e3a\u4e00\u6bb5\u7684\u4f4d\u7f6e\uff0c\u800c\u521a\u624d\u7684\u8d2a\u5fc3\u8fc7\u7a0b\u5c31\u76f8\u5f53\u4e8e\u4ece $1$ \u5f00\u59cb\u4e0d\u65ad\u8df3 $nxt_i$\u200b \u76f4\u5230\u5e8f\u5217\u672b\u5c3e\uff0c\u800c\u7b54\u6848\u5373\u4e3a\u8df3\u7684\u6b21\u6570\u3002\u4e3a\u4e86\u5904\u7406\u65b9\u4fbf\uff0c\u5c06 $k$ \u6309\u7167 $w-k$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1 $nxt_i$\u200b \u662f\u4e00\u76f4\u5f80\u524d\u5ef6\u4f38\u7684\u3002\n\n\u8bbe\u4e00\u4e2a\u5757\u957f $A$\u200b\uff0c\u6211\u4eec\u628a\u4e00\u4e2a\u5757\u5185\u7684 $nxt$\u200b\u200b \u538b\u7f29\u8d77\u6765\uff0c\u8bb0 $suf_i$\u200b \u4e3a\u5728 $i$\u200b \u4e00\u76f4\u8df3 $nxt$\u200b \u7684\u8fd9\u6761\u94fe\u4e0a\uff0c\u6700\u540e\u4e00\u4e2a $<i+A$\u200b \u7684\u4f4d\u7f6e\uff0c\u5373 $suf_i-i<A$\u200b\uff0c$nxt_{suf_i}-i\\geq A$\u200b\uff0c\u4e14 $suf_i$\u200b \u548c $i$\u200b \u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u53e6\u8bbe $cnt_i$ \u4e3a\u4ece $i$ \u8df3\u5230 $suf_i$ \u4e00\u5171\u8df3\u4e86\u591a\u5c11\u6b21\uff0c\u8fd9\u6837\u67e5\u8be2\u7b54\u6848\u65f6\u76f4\u63a5\u8df3 $suf_i$ \u5373\u53ef\uff0c\u6bcf\u6b21\u7b54\u6848\u52a0\u4e0a $cnt_i$\u3002\u7531\u4e8e\u53ea\u9700\u8981\u5173\u6ce8 $[i,i+A)$ \u5185\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u7684 $nxt_i$ \u4e5f\u53ea\u5904\u7406\u8fd9\u4e48\u591a\uff0c\u5f53 $nxt_i\\geq i+A$ \u65f6\u5c31\u4e0d\u7ba1\u5b83\u4e86\u3002\n\n\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684 $nxt_i\\in[i,i+A)$\uff0c\u6240\u4ee5\u5b83\u6700\u591a\u4f1a\u88ab\u4fee\u6539 $A$ \u6b21\uff0c\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\u76f8\u5f53\u4e8e $i$ \u4ee5\u53ca\u5b83\u5f80\u524d\u7684\u94fe\uff08\u5b9e\u9645\u4e0a\u662f\u4e00\u68f5 $i$ \u4e3a\u5b50\u8282\u70b9\uff0c$nxt_i$ \u4e3a\u7236\u4eb2\u7684\u6811\uff09\u4ece\u4e00\u6761\u94fe\u4e0a\u62c6\u4e0b\u6765\uff0c\u62fc\u5230\u53e6\u4e00\u6761\u94fe\u4e0a\uff0c\u6240\u4ee5 $(i-A,i]$ \u4e2d\u548c $i$ \u5728\u540c\u4e00\u94fe\u4e0a\u7684\u70b9\u7684 $suf_i$ \u548c $cnt_i$\u200b\u200b \u90fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u4e2a\u53ef\u4ee5 $O(A)$ \u5730\u8fdb\u884c\u4fee\u6539\u3002\u4ece\u800c\u603b\u53d8\u5316\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(nA^2)$ \u7684\u3002\n\n\u56de\u5230\u67e5\u8be2\uff0c\u6ce8\u610f\u5230\u8df3 $suf_i$\u200b \u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0 $suf_i=i$\u200b \u7684\u60c5\u51b5\uff0c\u5373 $nxt_i\\geq i+A$\u200b\uff0c\u8fd9\u91cc\u7684 $nxt$\u200b \u6211\u4eec\u6ca1\u6709\u53bb\u7ef4\u62a4\uff0c\u90a3\u5c31\u7528\u500d\u589e\u7684\u65b9\u5f0f\u53bb\u627e $nxt_i$\u200b\uff0c\u7528 $ST$\u200b \u8868\u6765\u7ef4\u62a4\u533a\u95f4\u6781\u5dee\u3002\u800c\u73b0\u5728\u6211\u4eec\u6bcf\u4e00\u6b65\u7684\u8ddd\u79bb\u90fd\u81f3\u5c11\u4e3a $A$\u200b\uff0c\u4ece\u800c\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(q\\frac{n}{A}\\log n)$\u200b \u7684\u3002\n\n\u76ee\u524d\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(nA^2+q\\frac{n}{A}\\log n)$\uff0c\u628a $n$ \u548c $q$ \u5f53\u6210\u540c\u9636\u7684\uff0c\u53d6 $A=n^{\\frac{1}{3}}$ \u4f1a\u6709\u8f83\u5c0f\u503c $O(n^{\\frac{5}{3}}+n^{\\frac{5}{3}}\\log n)$\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\u4e0d\u53d6 $A=\\sqrt[3] {n\\log n}$\uff09\uff0c\u7136\u800c\u8fd9\u4e2a\u8fde $O(n^2)$ \u200b\u7684\u66b4\u529b\u90fd\u4e0d\u5982\u8bf6\uff01\n\n\u89c2\u5bdf\u5f0f\u5b50\uff0c\u5de6\u8fb9\u7684 $O(n^{\\frac{5}{3}})$\u200b\u200b\u200b \u5df2\u7ecf\u591f\u901a\u8fc7\u6b64\u9898\u4e86\uff0c\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u53f3\u8fb9\u7684\u500d\u589e\u67e5\u8be2\uff0c\u90a3\u548b\u529e\u5462\uff1f\u76ee\u524d\u53ef\u884c\u7684\u505a\u6cd5\u4f3c\u4e4e\u53ea\u6709\u51cf\u5c11\u500d\u589e\u6b21\u6570\u4e86\uff0c\u89c2\u5bdf\u5148\u524d\u7684\u7b97\u6cd5\uff0c\u5bf9\u4e8e $nxt_i\\geq i+A$\u200b \u7684\u90e8\u5206\uff0c\u6211\u4eec\u662f\u76f4\u63a5\u5f03\u7597\u7684\uff0c\u95ee\u9898\u5c31\u51fa\u5728\u8fd9\u91cc\uff0c\u5982\u679c\u6211\u4eec\u518d\u591a\u7ef4\u62a4\u4e00\u70b9 $nxt_i$\u200b \u5462\uff1f\n\n\u6ce8\u610f\u5230\u5f53 $nxt_i\\geq i+A$ \u65f6\uff0c$nxt_i$ \u7684\u53d8\u5316\u5c31\u4e0d\u4f1a\u5f71\u54cd\u4efb\u4f55\u4e00\u4e2a\u70b9\u7684 $suf$ \u6216 $cnt$ \u4e86\uff0c\u5c31\u662f\u8bf4\u5982\u679c\u8981\u7ef4\u62a4\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5 $O(1)$\u200b \u5730\u505a\u3002\n\n\u4e8e\u662f\u518d\u8bbe\u4e00\u4e2a\u5757\u957f $B$\uff0c\u5f53 $i+A\\leq nxt_i<i+B$ \u65f6\uff0c\u6211\u4eec\u4f9d\u7136\u7ef4\u62a4 $nxt_i$\uff0c\u56e0\u4e3a\u662f $O(1)$ \u7684\uff0c\u4e14 $nxt_i$ \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6700\u591a\u88ab\u4fee\u6539 $O(B)$ \u6b21\uff0c\u6240\u4ee5\u8fd9\u4e00\u5757\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(nB)$ \u7684\u3002\u73b0\u5728\u9700\u8981\u500d\u589e\u7684\u6b21\u6570\u5c31\u964d\u5230\u4e86 $O(\\frac{n}{B})$\uff0c\u4ece\u800c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u6210\u4e86 $O(nA^2+\\frac{n^2}{A}+nB+\\frac{n^2}{B}\\log n)$\uff0c\u53d6 $A=n^{\\frac{1}{3}},B=n^{\\frac{2}{3}}$\u200b\uff0c\u6211\u4eec\u83b7\u5f97\u4e86 $O(n^{\\frac{5}{3}}+n^{\\frac{4}{3}}\\log n)$ \u7684\u4f18\u79c0\u590d\u6742\u5ea6\u3002\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\uff0c\u603b\u7ed3\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u5206\u5757\u7684\u505a\u6cd5\u662f\u4e00\u79cd\u5206\u4e09\u7c7b\u7684\u5206\u6cbb\uff1a\n\n1. $nxt_i-i<n^{\\frac{1}{3}}$\uff1a\u5757\u5185\u8def\u5f84\u538b\u7f29\u52a0\u901f\n2. $n^{\\frac{1}{3}}\\leq nxt_i-i<n^{\\frac{2}{3}}$\uff1a\u66b4\u529b\u7ef4\u62a4  $nxt_i$ \u7684\u8df3\u8f6c\u60c5\u51b5\n3. $nxt_i-i\\leq n^{\\frac{2}{3}}$\u200b\uff1a\u7528\u500d\u589e\u914d\u5408 $ST$ \u8868\u627e\u5230\u4e0b\u4e00\u4e2a\u8df3\u8f6c\u4f4d\u7f6e\n\n### \u5b9e\u73b0\u7ec6\u8282\n\n* \u53ef\u4ee5\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\u7ef4\u62a4 $i$ \u5230 $nxt_i$ \u4e4b\u95f4\u7684\u6781\u5dee\uff0c\u65b9\u4fbf\u6bcf\u6b21 $k$ \u53d8\u5316\u65f6\u66f4\u65b0\u5bf9\u5e94\u7684 $nxt_i$\u3002\n* \u5f53 $A\\leq nxt_i-i<B$ \u65f6\u4e0d\u8981\u628a $i$ \u4e22\u5c0f\u6839\u5806\u91cc\uff0c\u5426\u5219\u8fd9\u6837\u5b50\u603b\u5171\u8981\u66f4\u65b0\u7684 $nxt_i$ \u662f $O(n^{\\frac{5}{3}}\\log n)$ \u7ea7\u522b\u7684\uff0c\u52a0\u4e4b C++ \u7684 priority_queue \u5e38\u6570\u5927\uff0c\u662f\u4e0d\u53ef\u80fd\u5361\u8fc7\u53bb\u7684\uff0c\u7b14\u8005\u66fe\u56e0\u4e3a\u8fd9\u4e2a $TLE$ \u5230\u6000\u7591\u4eba\u751f\u3002\u6b63\u786e\u7684\u5904\u7406\u65b9\u5f0f\u662f\u7b49\u8981\u7528\u5230 $nxt_i$ \u65f6\uff0c\u518d\u66f4\u65b0\u8fd9\u7c7b\u60c5\u51b5\u7684 $nxt$\u200b \u503c\u3002\n\n### Code\n\n```cpp\n// Decomposition solution \n// O(n^(5/3)+n^(4/3)logn)\n\n#pragma GCC optimize(\"O3\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\n#pragma GCC optimize(\"inline\",\"fast-math\",\"unroll-loops\",\"no-stack-protector\")\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<vector>\n#include<fstream>\n#define rep(i,a,b) for(int i = (a); i <= (b); i++)\n#define per(i,b,a) for(int i = (b); i >= (a); i--)\n#define N 100100\n#define A 47    // N^(1/3)\n#define B 2155  // N^(2/3)\n#define LOG 18\n#define PII pair<int, int>\n#define fr first\n#define sc second\n#define Inf 0x3f3f3f3f\nusing namespace std;\n\ninline int read(){\n    int s = 0, w = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9'){ if(ch == '-') w = -1; ch = getchar(); }\n    while(ch >= '0' && ch <= '9') s = (s<<3)+(s<<1)+(ch^48), ch = getchar();\n    return s*w;\n}\n\nstruct query{\n    int diff, id;\n    bool operator < (const query b) const{ return diff < b.diff; }\n} ask[N];\n\nint a[N], ans[N];\nint n, w, qy;\n\nint stmx[LOG][N], stmn[LOG][N], log[1<<LOG];\n\nint mn[N], mx[N], nxt[N], suf[N], cnt[N];\nint chain[N];\npriority_queue<PII, vector<PII>, greater<PII> > q;\nvector<int> frward, backward;\n\nvoid init(){\n    per(i,n+1,1){\n        stmn[0][i] = stmx[0][i] = a[i];\n        rep(p,1,LOG) if(i+(1<<p) <= n+2){\n            stmn[p][i] = min(stmn[p-1][i], stmn[p-1][i+(1<<(p-1))]);\n            stmx[p][i] = max(stmx[p-1][i], stmx[p-1][i+(1<<(p-1))]);\n        }\n    }\n    rep(i,0,LOG-1) log[1<<i] = i;\n    rep(i,2,n) if(!log[i]) log[i] = log[i-1];\n}\n\nint extreme_diff(int l, int r){\n    int p = log[r-l+1];\n    return max(stmx[p][l], stmx[p][r-(1<<p)+1]) - min(stmn[p][l], stmn[p][r-(1<<p)+1]);\n}\n\nint dis(int j, int i){ return max(abs(a[j]-mn[i]), abs(a[j]-mx[i])); }\n\nbool ok(int j, int i, int d){\n    if(dis(j, i) <= d)\n        mn[i] = min(mn[i], a[j]), mx[i] = max(mx[i], a[j]);\n    else return false;\n    return true;\n}\n\nvoid update_chain(int i, int d){\n    frward.clear(), backward.clear();\n    int tmp = nxt[i];\n    while(tmp <= n && tmp-i < B && ok(tmp, i, d)) tmp++;\n    nxt[i] = tmp; \n    tmp = i, cnt[i] = 0, frward.push_back(i);\n    while(tmp <= n && nxt[tmp]-i < A) cnt[i]++, tmp = nxt[tmp], frward.push_back(tmp);\n    suf[i] = tmp;\n    chain[i] = 1, backward.push_back(i);\n\n\n    int num = cnt[i];\n    per(j, i, max(1, i-A+1)) if(chain[nxt[j]]){\n        backward.push_back(j);\n        while(!frward.empty() && frward.back()-j >= A) frward.pop_back(); \n        if(frward.empty()) break;\n        cnt[j] = chain[nxt[j]]+frward.size()-1;\n        chain[j] = chain[nxt[j]]+1;\n        suf[j] = frward.back();\n    }\n    for(int j : backward) chain[j] = 0;\n}\n\nint main(){\n    n = read(), w = read(), qy = read();\n    rep(i,1,n) a[i] = read();\n    a[n+1] = Inf;\n    rep(i,1,qy) ask[i].diff = w-read(), ask[i].id = i;\n\n    sort(ask+1, ask+qy+1);\n    rep(i,1,n){\n        nxt[i] = i+1, suf[i] = min(i+A-1, n+1);\n        cnt[i] = min(n+1, suf[i]) - i, q.push({abs(a[nxt[i]]-a[i]), -i});\n        mn[i] = mx[i] = a[i];\n    }\n    init();\n\n    rep(p,1,qy){\n        int d = ask[p].diff;\n        while(!q.empty() && d >= q.top().fr){\n            int i = -q.top().sc; q.pop();\n            if(nxt[i]-i >= B || nxt[i] > n) continue;\n\n            if(nxt[i]-i < A) update_chain(i, d);\n            else while(nxt[i] < i+B && ok(nxt[i], i, d)) nxt[i]++;\n            if(nxt[i] < i+A) q.push({dis(nxt[i], i), -i});\n        }\n\n        int i = 1, tot = 0;\n        while(i <= n)\n            if(suf[i] > i) tot += cnt[i], i = suf[i];\n            else{\n                tot++;\n                while(nxt[i] < i+B && ok(nxt[i], i, d)) nxt[i]++;\n                if(nxt[i]-i < B) i = nxt[i];\n                else{\n                    int j = i;\n                    per(p,LOG-1,0){\n                        int up = j+(1<<p);\n                        if(up <= n+1 && extreme_diff(i, up) <= d) j = up;\n                    }\n                    i = j+1;\n                }\n            }\n        ans[ask[p].id] = tot-1;\n    }\n\n    rep(i,1,qy) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1627988349,
        "uid": 108244,
        "name": "Neal_lee",
        "ccfLevel": 7,
        "title": "CF1039E Summer Oenothera Exhibition"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4ece\u5f00\u5934\u5f00\u59cb\u8d2a\u5fc3\u7684\u80fd\u4e0d\u5206\u5c31\u4e0d\u5206\u5212\u5206\u51fa\u6765\u7684\u4e00\u5b9a\u662f\u6700\u5c11\u7684\uff0c\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u6765\u8003\u8651\u5982\u4f55\u628a\u8fd9\u4e2a\u66b4\u529b\u4f18\u5316\u4e00\u4e0b\u3002\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u79bb\u7ebf\u6392\u5e8f\u505a\uff0c\u7136\u540e\u6211\u4eec\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u5b83\u5f80\u53f3\u7b2c\u4e00\u4e2a\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u5c31\u76f8\u5f53\u4e8e\u8fde\u4e86\u4e00\u6761\u8fb9\uff0c\u663e\u7136\u8fd9\u662f\u68f5\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u6bcf\u8df3\u4e00\u6761\u8fb9\u5c31\u5fc5\u987b\u8981\u5212\u5206\u4e00\u6bb5\uff0c\u5c31\u76f8\u5f53\u4e8e\u67e5\u8be21\u5230$n+1$\u7684\u8ddd\u79bb\uff0c\u8fd9\u4e2a\u53ef\u4ee5LCT\u7ef4\u62a4\u3002\n\n\u7136\u800c\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u505a\u8fd8\u662f\u66b4\u529b\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u4ece\u5c0f\u5230\u5927\u5904\u7406\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u6bcf\u4e2a\u70b9\u7684\u8fde\u8fb9\u60c5\u51b5\u5728\u6bcf\u4e2a\u65f6\u523b\u90fd\u4f1a\u88ab\u6539\u53d8\u3002\u4f46\u662f\u6ce8\u610f\u5230\u6211\u4eec**\u4ec5\u8003\u86511\u5230$n+1$\u7684\u8def\u5f84**\uff0c\u6211\u4eec\u5c31\u662f\u4e3a\u4e86\u4f18\u5316\u8df3\u8fd9\u4e2a\u8def\u5f84\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528LCT\u7ef4\u62a4$<\\sqrt n$\u7684\u8fb9\uff0c\u8fd9\u6837\u7684\u8bdd1\u5230$n+1$\u6700\u591a\u53ea\u4f1a\u6709$\\sqrt n$\u6bb5\u65ad\u5f00\u7684\u8def\u5f84\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u66b4\u529b\u4e8c\u5206\uff08\u8981\u7528ST\u8868\uff09\u8df3\u5230\u4e0b\u4e00\u6bb5\u8def\u5f84\u5373\u53ef\uff0c\u8fd9\u6837\u662f$O(n\\sqrt n\\log n)$\u7684\u3002\n\n\u7136\u540e\u4e00\u4ea4\u53d1\u73b0T\u4e86\u3002\u6211\u662f\u8fd9\u4e48\u505a\u7684\uff0c\u5904\u7406\u8be2\u95ee\u7684\u65f6\u5019\u7ef4\u62a4\u4e00\u4e2a\u5c0f\u6839\u5806\u5b58\u9700\u8981\u4fee\u6539\u7684\u8fb9\uff0c\u4e00\u65e6\u5f53\u524d\u8be2\u95ee\u5927\u4e8e\u7b49\u4e8e\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u5c31\u628a\u8fd9\u6761\u8fb9\u4fee\u6539\u91cd\u8fde\u3002\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u8be2\u95ee\u4e0a\u5f00\u4e2avector\u7136\u540e\u628a\u8fb9\u901a\u8fc7\u4e8c\u5206\u5b58\u5230\u9700\u8981\u4fee\u6539\u8fd9\u6761\u8fb9\u7684\u65f6\u523b\u7684vector\u4e0a\uff0c\u8fd9\u6837\u7531\u4e8evector\u5bf9\u7f13\u5b58\u6bd4\u8f83\u53cb\u597d\u4e8e\u662f\u5c31\u80fd\u8fc7\u4e86\uff08\u771f\u7684\u8fd9\u5feb\u7684\u4e0d\u662f\u4e00\u70b9\u534a\u70b9\u7684\u2026\u2026\uff09\u3002\u53e6\u5916ST\u8868\u628a\u5c0f\u7684\u4e00\u7ef4\u653e\u5230\u524d\u9762\u4e5f\u4f1a\u6709\u5f88\u597d\u7684\u5e38\u6570\u4f18\u5316\u2026\u2026\uff08\u522b\u95ee\u6211\u4e3a\u5565\u2026\u2026\uff09\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#define blo 250\n#define opp(_o) (_o == ch[fa[_o]][1])\n#define isroot(_o) (_o != ch[fa[_o]][1] && _o != ch[fa[_o]][0])\nusing namespace std;\nnamespace ywy {\n\tinline int get() {\n\t    int n = 0;\n\t    char c;\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            break;\n\t        if (c == '-')\n\t            goto s;\n\t    }\n\t    n = c - '0';\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\ts:\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 - c + '0';\n\t        else\n\t            return (n);\n\t    }\n\t}\n\tint ints[111111], ch[111111][2], fa[111111], size[111111], frt[111111];\n\tinline void up(int tree) {\n\t    size[tree] = size[ch[tree][0]] + size[ch[tree][1]] + 1;\n\t    if (!ch[tree][0])\n\t        frt[tree] = tree;\n\t    else\n\t        frt[tree] = frt[ch[tree][0]];\n\t}\n\tinline void xuan(int me) {\n\t    int tree = fa[me], cjr = fa[tree], op = opp(me), ls = ch[me][op ^ 1];\n\t    fa[ls] = tree;\n\t    ch[tree][op] = ls;\n\t    ch[me][op ^ 1] = tree;\n\t    if (!isroot(tree))\n\t        ch[cjr][opp(tree)] = me;\n\t    fa[me] = cjr;\n\t    fa[tree] = me;\n\t    up(tree);\n\t    up(me);\n\t}\n\tinline void splay(int tree) {\n\t    while (!isroot(tree)) {\n\t        int cjr = fa[tree];\n\t        if (!isroot(cjr))\n\t            xuan((opp(cjr) == opp(tree)) ? cjr : tree);\n\t        xuan(tree);\n\t    }\n\t}\n\tinline void access(int tree) {\n\t    splay(tree);\n\t    ch[tree][1] = 0;\n\t    up(tree);\n\t    while (fa[tree]) {\n\t        int cjr = fa[tree];\n\t        splay(cjr);\n\t        ch[cjr][1] = tree;\n\t        up(cjr);\n\t        splay(tree);\n\t    }\n\t}\n\tint stmax[17][111111], stmin[17][111111], lg[111111];\n\tint findroot(int tree) {\n\t    access(tree);\n\t    splay(tree);\n\t    tree = frt[tree];\n\t    return (tree);\n\t}\n\ttypedef struct _b {\n\t    int pos;\n\t    int yuan;\n\t    int val;\n\t    friend bool operator<(const _b &a, const _b &b) { return (a.val > b.val); }\n\t} bian;\n\tvector<bian> vec[300001];\n\tinline int qmax(int l, int r) {\n\t    int g = lg[r - l + 1];\n\t    return (max(stmax[g][l], stmax[g][r - (1 << g) + 1]));\n\t}\n\tinline int qmin(int l, int r) {\n\t    int g = lg[r - l + 1];\n\t    return (min(stmin[g][l], stmin[g][r - (1 << g) + 1]));\n\t}\n\ttypedef struct _n {\n\t    int id;\n\t    int val;\n\t    friend bool operator<(const _n &a, const _n &b) { return (a.val < b.val); }\n\t} node;\n\tnode memchi[1000001];\n\tint anss[111111];\n\tvoid ywymain() {\n\t    int n = get(), w = get(), q = get();\n\t    for (register int i = 1; i <= n; i++) ints[i] = get();\n\t    for (register int i = 1; i <= q; i++) {\n\t        memchi[i].id = i;\n\t        memchi[i].val = w - get();\n\t    }\n\t    sort(memchi + 1, memchi + 1 + q);\n\t    lg[0] = -1;\n\t    for (register int i = 1; i <= n; i++) {\n\t        lg[i] = lg[i - 1] + (i == (i & -i));\n\t        stmax[0][i] = stmin[0][i] = ints[i];\n\t        if (i != n) {\n\t            bian cjr;\n\t            cjr.pos = i;\n\t            cjr.yuan = i + 1;\n\t            cjr.val = max(ints[i], ints[i + 1]) - min(ints[i], ints[i + 1]);\n\t            vec[1].push_back(cjr);\n\t        }\n\t        size[i] = 1;\n\t        fa[i] = i + 1;\n\t        frt[i] = i;\n\t    }\n\t    size[n + 1] = 1;\n\t    frt[n + 1] = n + 1;\n\t    for (register int i = 1; i <= lg[n]; i++) {\n\t        for (register int j = 1; j + (1 << i) - 1 <= n; j++) {\n\t            stmax[i][j] = max(stmax[i - 1][j], stmax[i - 1][j + (1 << (i - 1))]);\n\t            stmin[i][j] = min(stmin[i - 1][j], stmin[i - 1][j + (1 << (i - 1))]);\n\t        }\n\t    }\n\t    anss[0] = n;\n\t    for (register int i = 1; i <= q; i++) {\n\t        for (register int j = 0; j < vec[i].size(); j++) {\n\t            int she = vec[i][j].yuan;\n\t            int me = vec[i][j].pos;\n\t            access(me);\n\t            splay(she);\n\t            ch[she][1] = fa[me] = 0;\n\t            up(she);\n\t            int ans = she;\n\t            while (ans <= n && qmax(me, ans) - qmin(me, ans) <= memchi[i].val && ans - me <= blo) ans++;\n\t            if (ans == n + 1) {\n\t                splay(me);\n\t                splay(ans);\n\t                fa[me] = ans;\n\t                continue;\n\t            }\n\t            if (ans - me <= blo) {\n\t                splay(me);\n\t                splay(ans);\n\t                fa[me] = ans;\n\t                if (ans != n + 1) {\n\t                    bian cjr;\n\t                    cjr.yuan = ans;\n\t                    cjr.pos = me;\n\t                    cjr.val = qmax(me, ans) - qmin(me, ans);\n\t                    int ans = -1, l = i + 1, r = q;\n\t                    while (l <= r) {\n\t                        int mid = (l + r) >> 1;\n\t                        if (memchi[mid].val >= cjr.val)\n\t                            ans = mid, r = mid - 1;\n\t                        else\n\t                            l = mid + 1;\n\t                    }\n\t                    if (ans != -1)\n\t                        vec[ans].push_back(cjr);\n\t                }\n\t            }\n\t        }\n\t        int tot = 0, cur = 1;\n\t        while (1) {\n\t            int cjr = findroot(cur);\n\t            access(cur);\n\t            splay(cur);\n\t            tot += (size[cur] - 1);\n\t            if (cjr == n + 1)\n\t                break;\n\t            cur = cjr;\n\t            int ans = cur, l = cur, r = n;\n\t            while (l <= r) {\n\t                int mid = (l + r) >> 1;\n\t                if (qmax(cur, mid) - qmin(cur, mid) <= memchi[i].val)\n\t                    ans = mid, l = mid + 1;\n\t                else\n\t                    r = mid - 1;\n\t            }\n\t            tot++;\n\t            if (ans == n)\n\t                break;\n\t            cur = ans + 1;\n\t        }\n\t        anss[memchi[i].id] = tot - 1;\n\t    }\n\t    for (register int i = 1; i <= q; i++) printf(\"%d\\n\", anss[i]);\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1559791349,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1039E \u3010Summer Oenothera Exhibition\u3011"
    }
]