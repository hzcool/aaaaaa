[
    {
        "content": "**UPD\uff1a\u539f\u56fe\u7247 4 \u6709\u8bef\uff0c\u73b0\u5df2\u4fee\u590d\u3002**\n\n----\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u65e0\u8bba\u539f\u672c\u5e73\u9762\u4e0a\u7684\u70b9\u662f\u957f\u6210\u5565\u6837\u3001\u539f\u672c\u6392\u5217\u662f\u957f\u6210\u5565\u6837\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u79cd\u65b9\u6848\uff0c\u5982\u4e0b\u3002\n\n\u5206\u6790\u5e73\u9762\u4e0a\u7684\u70b9\u7684\u4f4d\u7f6e\u663e\u7136\u6bd4\u5206\u6790\u6392\u5217\u8981\u590d\u6742\u5f97\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u59a8\u4ece\u6392\u5217\u5165\u624b\uff0c\u505a\u8fd9\u4e48\u4e24\u4ef6\u4e8b\uff1a\n\n1. \u6240\u6709 $a_i = i$ \u7684\u70b9\u90fd\u53ef\u4ee5\u88ab\u5ffd\u7565\u6389\uff08\u663e\u7136\uff09\u3002\n2. \u628a $i \\to a_i$ \u8fde\u8fb9\uff0c\u6392\u5217\u4f1a\u88ab\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u7f6e\u6362\u73af\u3002\n\n\u63a5\u4e0b\u6765\u53ef\u4ee5\u5173\u6ce8\u5230\u5982\u4e0b\u4e8b\u5b9e\uff1a\n\n**\u6027\u8d28 1**\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u70b9 $u$\uff0c\u4e0d\u65ad $\\operatorname{swap}(u, a_u)$\uff0c\u6700\u7ec8\u6240\u6709\u7684\u6807\u7b7e\u90fd\u4f1a\u5f52\u4f4d\uff0c\u5e76\u4e14\u8fd9\u4e48\u505a\u5e76\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u4ea4\u70b9\u3002\u6700\u7ec8\u4ea7\u751f\u7684\u5c06\u662f\u4e00\u5f20\u83ca\u82b1\u56fe\uff0c$u$\u00a0\u662f\u83ca\u82b1\u56fe\u7684\u82b1\u5fc3\u3002\n\n\u90a3\u4e48\uff0c\u5982\u679c\u8fd9\u6574\u5f20\u56fe\u90fd\u53ea\u6709\u4e00\u4e2a\u73af\u7684\u8bdd\uff0c\u9898\u76ee\u5c31\u5df2\u7ecf\u89e3\u51b3\u4e86\u3002\u73b0\u5728\u5c1d\u8bd5\u89e3\u51b3\u591a\u4e2a\u73af\u7684\u60c5\u51b5\u3002\n\n**\u6027\u8d28 2**\uff1a\u5982\u679c\u6211\u4eec\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u73af\uff0c$u$ \u5c5e\u4e8e\u7b2c\u4e00\u4e2a\u73af\u4e2d\uff0c$v$ \u5c5e\u4e8e\u7b2c\u4e8c\u4e2a\u73af\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u6267\u884c $\\operatorname{swap}(u, v)$\uff0c\u8fd9\u4e24\u4e2a\u73af\u5c31\u4f1a\u88ab\u7f29\u4e3a\u4e00\u4e2a\u73af\u3002\n\n![image.png](https://i.loli.net/2021/05/08/DtnmEswyPhgpxOG.png)\n\n\u901a\u8fc7\u7efc\u5408\u5229\u7528\u4e0a\u9762\u4e24\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u822c\u7684\u5904\u7406\u65b9\u5f0f\uff1a\n\n1. \u9996\u5148\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u73af\u4e4b\u95f4\u8fdb\u884c $\\text{swap}$\uff0c\u76f4\u5230\u5b83\u4eec\u7f29\u4e3a\u4e00\u4e2a\u73af\u3002\n2. \u7136\u540e\uff0c\u518d\u5229\u7528\u6027\u8d28 1 \u7684\u65b9\u5f0f\uff0c\u628a\u6240\u6709\u7684\u6807\u7b7e\u5f52\u4f4d\u3002\n\n\u63a5\u4e0b\u6765\u9700\u8981\u5904\u7406\u7684\u95ee\u9898\u662f\uff0c\u5982\u4f55\u4f7f\u5f97\u4ea4\u6362\u4ea7\u751f\u7684\u8fb9\u4e92\u4e0d\u76f8\u4ea4\u3002\u4e0d\u59a8\u4ece\u8fd9\u4e9b\u70b9\u6784\u6210\u4e00\u4e2a\u51f8\u591a\u8fb9\u5f62\u7684\u60c5\u51b5\u7740\u624b\u5206\u6790\u3002\n\n![image.png](https://i.loli.net/2021/05/08/2H8nwtFicmyB5lh.png)\n\n\u4efb\u610f\u9009\u53d6\u4e00\u4e2a\u4e2d\u67a2\u70b9 $\\text{pivot}$\uff0c\u73b0\u5728\uff0c\u628a\u5176\u4ed6\u6240\u6709\u70b9\u6309\u7167\u548c\u4e2d\u67a2\u70b9\u7684\u8fde\u7ebf\u659c\u7387\u6392\u5e8f\uff0c\u7528 $\\text{Border Segments}$\uff08\u8fb9\u754c\u7ebf\u6bb5\uff09\u8868\u793a\u4e24\u4e2a\u76f8\u90bb\u70b9\u4e4b\u95f4\u7684\u8fde\u7ebf\uff0c\u7528 $\\text{Central Segments}$\uff08\u4e2d\u5fc3\u7ebf\u6bb5\uff09\u8868\u793a\u4e2d\u67a2\u70b9\u548c\u5176\u4ed6\u70b9\u7684\u8fde\u7ebf\u3002\u73b0\u5728\u53ea\u4f7f\u7528\u8fb9\u754c\u7ebf\u6bb5\u6765\u5408\u5e76\u73af\uff0c\u7528\u4e2d\u5fc3\u7ebf\u6bb5\u6765\u8fd8\u539f\u6392\u5217\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\u3002\n\n\u8fd9\u4e2a\u505a\u6cd5\u5bf9\u4e8e\u975e\u51f8\u591a\u8fb9\u5f62\u9002\u4e0d\u9002\u7528\u5462\uff1f\n\n![image.png](https://i.loli.net/2021/05/09/aeCyZ2PXNRAxs5Y.png)\n\n\u597d\u50cf\u4e5f\u53ef\u4ee5\uff01\n\n\u4f46\u4e2d\u67a2\u70b9\u771f\u7684\u4e5f\u53ef\u4ee5\u968f\u4fbf\u9009\u53d6\u5417\uff1f\n\n![image.png](https://i.loli.net/2021/05/09/o3DgzhrViQYfGUK.png)\n\n\u4e0a\u56fe\u4fbf\u662f\u4e00\u4e2a\u53cd\u4f8b\uff0c\u51fa\u73b0\u8fb9\u76f8\u4ea4\u7684\u539f\u56e0\u5176\u5b9e\u662f\uff0c\u51fa\u73b0\u4e86\u4e24\u4e2a\u70b9\u7684\u5939\u89d2\u5927\u5c0f $>180^{\\circ}$\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u94a6\u5b9a\u6700\u5de6\u4e0b\u65b9\u7684\u90a3\u4e2a\u70b9\u4e3a\u4e2d\u67a2\u70b9\u5373\u53ef\u3002\n\n\u5728\u5b9e\u73b0\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u5e76\u67e5\u96c6\u7ef4\u62a4\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u73af\u4e2d\u3002\u56e0\u4e3a\u9700\u8981\u6781\u89d2\u6392\u5e8f\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define pb push_back\n#define mp make_pair\n#define fir first\n#define sec second\nusing namespace std;\nconst int N = 2005;\nint n, m, pos[N];\nvector<pair<int, int>> ans;\nstruct disjoint_sets_union {\n\tint fa[N];\n\tvoid Init() {\n\t\tfor(int i = 1; i <= n; i++) {\n\t\t\tfa[i] = i;\n\t\t}\n\t}\n\tint Query(int p) {\n\t\tif(fa[p] == p) return p;\n\t\treturn fa[p] = Query(fa[p]);\n\t}\n\tvoid Merge(int p, int q) {\n\t\tfa[p] = q;\n\t}\n} dsu;\nint pvtx, pvty, pvt;\nstruct point {\n\tint x, y, a, id;\n\tdouble agl;\n\tbool operator < (const point &oth) const {\n\t\treturn agl < oth.agl;\n\t}\n} p[N], q[N];\nint main() {\n\tios::sync_with_stdio(false);\n\tcin >> n;\n\tfor(int i = 1; i <= n; i++) {\n\t\tcin >> p[i].x >> p[i].y >> p[i].a;\n\t\tp[i].id = i;\n\t\tif(p[i].a != i) {\n\t\t\tq[++m] = p[i];\t\n\t\t}\n\t}\n\tif(!m) {\n\t\tcout << \"0\\n\";\n\t\treturn 0;\n\t}\n\tdsu.Init();\n\tpvtx = q[1].x;\n\tpvty = q[1].y;\n\tpvt = 1;\n\tfor(int i = 2; i <= m; i++) {\n\t\tif(q[i].x < pvtx) {\n\t\t\tpvtx = q[i].x;\n\t\t\tpvty = q[i].y;\n\t\t\tpvt = i;\n\t\t} else if(q[i].x == pvtx && q[i].y < pvty) {\n\t\t\tpvty = q[i].y;\n\t\t\tpvt = i;\n\t\t}\n\t}\n\tif(pvt != 1) {\n\t\tswap(q[1], q[pvt]);\n\t}\n\tfor(int i = 2; i <= m; i++) {\n\t\tq[i].agl = atan2(q[i].y - pvty, q[i].x - pvtx);\n\t}\n\tsort(q + 2, q + m + 1);\n\tfor(int i = 1; i <= m; i++) {\n\t\tint u = dsu.Query(q[i].id);\n\t\tint v = dsu.Query(q[i].a);\n\t\tif(u != v) {\n\t\t\tdsu.Merge(u, v);\n\t\t}\n\t}\n\tfor(int i = 2; i < m; i++) {\n\t\tint u = dsu.Query(q[i].id);\n\t\tint v = dsu.Query(q[i + 1].id);\n\t\tif(u != v) {\n\t\t\tans.pb(mp(q[i].id, q[i + 1].id));\n\t\t\tswap(q[i].a, q[i + 1].a);\n\t\t\tdsu.Merge(u, v);\n\t\t}\n\t}\n\tfor(int i = 1; i <= m; i++) {\n\t\tpos[q[i].id] = i;\n\t}\n\twhile(q[1].a != q[1].id) {\n\t\tint u = pos[q[1].a];\n\t\tans.pb(mp(q[1].id, q[u].id));\n\t\tswap(q[1].a, q[u].a);\n\t}\n\tcout << ans.size() << endl;\n\tfor(unsigned i = 0; i < ans.size(); i++) {\n\t\tcout << ans[i].fir << ' ' << ans[i].sec << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1620493302,
        "uid": 51971,
        "name": "syksykCCC",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1508D \u3010Swap Pass\u3011"
    },
    {
        "content": "\u628a\u6392\u5217\u770b\u6210\u82e5\u5e72\u4e2a\u73af\uff0c\u5047\u5982\u6574\u4e2a\u6392\u5217\u662f\u4e00\u4e2a\u73af\uff0c\u90a3\u4e48\u4efb\u610f\u94a6\u5b9a\u4e00\u4e2a\u70b9\uff0c\u5269\u4e0b\u7684\u70b9\u4f9d\u6b21\u548c\u8fd9\u4e2a\u70b9\u4ea4\u6362\uff0c\u5f62\u6210\u4e00\u4e2a\u83ca\u82b1\u72b6\uff0c\u5219\u4e00\u5b9a\u6709\u89e3\u3002\n\n\u4f46\u662f\u6392\u5217\u53ef\u80fd\u6709\u82e5\u5e72\u4e2a\u73af\uff0c\u60f3\u529e\u6cd5\u628a\u4e24\u4e2a\u4e0d\u662f\u81ea\u73af\u7684\u73af\u5e76\u6210\u4e00\u4e2a\u73af\u5e76\u4e14\u4fdd\u8bc1\u4e0d\u4f1a\u5f71\u54cd\u6700\u540e\u201c\u5f00\u82b1\u201d\u7684\u64cd\u4f5c\uff0c\u53d1\u73b0\u5e76\u6210\u4e00\u4e2a\u73af\u53ea\u9700\u8981\u5728\u4e24\u4e2a\u73af\u4e2d\u5404\u4efb\u610f\u9009\u4e00\u4e2a\u70b9\u4ea4\u6362\u4f4d\u7f6e\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u73af\u3002\n\n\u4fdd\u8bc1\u4e0d\u5f71\u54cd\u5f00\u82b1\u64cd\u4f5c\u4e5f\u5f88\u7b80\u5355\uff1a\u5bf9\u4e8e\u94a6\u5b9a\u7684\u70b9\u628a\u5269\u4e0b\u7684\u70b9\u8fdb\u884c\u6781\u89d2\u6392\u5e8f\uff0c\u7136\u540e\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u8fdb\u884c\u64cd\u4f5c\uff1a\u5982\u679c\u4e24\u4e2a\u70b9\u6240\u5728\u7684\u73af\u8fd8\u6ca1\u6709\u5e76\u5728\u4e00\u8d77\u5c31\u4ea4\u6362\u8fd9\u4e24\u4e2a\u70b9\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u4efb\u610f\u94a6\u5b9a\u4e00\u4e2a\u70b9\u8fd9\u6837\u6784\u9020\u90fd\u662f\u4e00\u5b9a\u6709\u89e3\u7684\uff0c\u4f46\u662f\u4e3a\u4e86\u4fdd\u8bc1\u76f8\u90bb\u4e24\u70b9\u5939\u89d2\u5c0f\u4e8e $180$ \uff0c\u5efa\u8bae\u9009\u6700\u5de6\u8fb9\u70b9\u4e3a\u94a6\u5b9a\u70b9\u3002\n\n\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define mk make_pair\nconst int inf=(int)1e9;\nconst ll INF=(ll)5e18;\nconst int MOD=998244353;\nint _abs(int x){return x<0 ? -x : x;}\nint add(int x,int y){x+=y; return x>=MOD ? x-MOD : x;}\nint sub(int x,int y){x-=y; return x<0 ? x+MOD : x;}\n#define mul(x,y) (ll)(x)*(y)%MOD\nvoid Add(int &x,int y){x+=y; if(x>=MOD) x-=MOD;}\nvoid Sub(int &x,int y){x-=y; if(x<0) x+=MOD;}\nvoid Mul(int &x,int y){x=mul(x,y);}\nint qpow(int x,int y){int ret=1; while(y){if(y&1) ret=mul(ret,x); x=mul(x,x); y>>=1;} return ret;}\nvoid checkmin(int &x,int y){if(x>y) x=y;}\nvoid checkmax(int &x,int y){if(x<y) x=y;}\nvoid checkmin(ll &x,ll y){if(x>y) x=y;}\nvoid checkmax(ll &x,ll y){if(x<y) x=y;}\n#define out(x) cerr<<#x<<'='<<x<<' '\n#define outln(x) cerr<<#x<<'='<<x<<endl\n#define sz(x) (int)(x).size()\ninline int read(){\n    int x=0,f=1; char c=getchar();\n    while(c>'9'||c<'0'){if(c=='-') f=-1; c=getchar();}\n    while(c>='0'&&c<='9') x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    return x*f;\n}\nconst int N=2005;\nstruct node{\n    int x,y;\n}p[N];\nint a[N],n,m,top=0,bel[N],id[N],pos;\nnamespace DSU{\n    int fa[N];\n    void init(){for(int i=1;i<=top;i++) fa[i]=i;}\n    int getfather(int x){return fa[x]==x ? x : fa[x]=getfather(fa[x]);} \n    void unite(int x,int y){fa[getfather(x)]=getfather(y);}\n    bool same(int x,int y){return getfather(x)==getfather(y);}\n}\nvector<pii> ans;\nvoid Swap(int x,int y){\n    swap(a[x],a[y]);\n    ans.push_back(mk(x,y));\n}\nbool cmp(int x,int y){\n    return atan2(p[x].y-p[pos].y,p[x].x-p[pos].x)<\n            atan2(p[y].y-p[pos].y,p[y].x-p[pos].x);\n}\n \nint main()\n{\n    n=read();\n    for(int i=1;i<=n;i++) p[i].x=read(),p[i].y=read(),a[i]=read();\n    for(int i=1;i<=n;i++) if(!bel[i]){\n        int x=a[i]; bel[i]=++top;\n        while(!bel[x]) bel[x]=top,x=a[x];\n    }\n    pos=-1;\n    for(int i=1;i<=n;i++) if(a[i]!=i&&(pos==-1||p[i].x<p[pos].x)){\n        pos=i;\n    }\n    if(pos==-1){puts(\"0\"); return 0;}\n    int cnt=0;\n    for(int i=1;i<=n;i++) if(i!=pos) id[++cnt]=i;\n    sort(id+1,id+n,cmp); DSU::init();\n    int pre=-1;\n    for(int i=1;i<n;i++) if(a[id[i]]!=id[i]){\n        if(pre!=-1){\n            if(!DSU::same(bel[id[i]],bel[id[pre]])){\n                Swap(id[i],id[pre]);\n                DSU::unite(bel[id[i]],bel[id[pre]]);\n            }\n        }\n        pre=i;\n    }\n    while(a[pos]!=pos){Swap(pos,a[pos]);}\n    for(int i=1;i<=n;i++) assert(a[i]==i);\n    printf(\"%d\\n\",sz(ans));\n    for(auto &u : ans) printf(\"%d %d\\n\",u.first,u.second);\n    return 0;\n}\n```",
        "postTime": 1619360963,
        "uid": 69107,
        "name": "_tourist_",
        "ccfLevel": 0,
        "title": "CF1508D \u3010Swap Pass\u3011"
    },
    {
        "content": "\u5510\u7237\u7237\u592a\u5f3a\u4e86 ORZ\n\n\u9996\u5148\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u95ee\u9898\u662f\u5728\u4e00\u4e2a\u5e73\u9762\u4e0a\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u559c\u6b22\u8ba8\u538c\u7684\u8ba1\u7b97\u51e0\u4f55\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e00\u4e9b\u65e0\u8bba\u4ec0\u4e48\u60c5\u51b5\u90fd\u53ef\u4ee5\u7684\u8fde\u8fb9\u65b9\u6848\u3002\n\n\u9898\u76ee\u91cc\u8bf4\u5728\u7aef\u70b9\u76f8\u4ea4\u662f\u4e0d\u7b97\u76f8\u4ea4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u800c\u7136\u60f3\u5230\uff0c\u94a6\u5b9a\u4e00\u4e2a\u70b9\uff08\u540e\u9762\u53eb\u505a\u9876\u70b9\uff09\uff0c\u7136\u540e\u8ba9\u5b83\u548c\u5176\u5b83\u6240\u6709\u70b9\u8fde\u8fb9\uff0c\u8fd9\u6837\u80af\u5b9a\u6ee1\u8db3\u4e0d\u76f8\u4ea4\u3002\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\u4ec0\u4e48\u65f6\u5019\u80fd\u591f\u6210\u529f\u5f97\u5230\u89e3\u3002\u6ce8\u610f\u5230\u6700\u540e\u6240\u6709\u70b9\u7684\u6743\u503c\u90fd\u7b49\u4e8e\u5b83\u7684\u7f16\u53f7\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u9020\u4e00\u4e2a\u56fe\uff0c$i$ \u5230 $a_i$ \u4e4b\u95f4\u6709\u4e00\u6761**\u6709\u5411**\u8fb9\uff0c\u663e\u7136\u5b83\u6784\u6210\u51e0\u4e2a\u73af\u3002\u5982\u679c\u5b83\u53ea\u6784\u6210\u4e00\u4e2a\u5927\u73af\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5c31\u662f\u6709\u89e3\u7684\u3002\u5982\u679c\u662f\u4e00\u4e2a\u5927\u73af\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4e00\u76f4\u4ea4\u6362 $1$ \u548c $a_1$\uff0c\u53ef\u4ee5\u8bc1\u660e\u8fd9\u662f\u6b63\u786e\u7684\u2014\u2014\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u770b\u4e3a\u5728\u56fe\u4e0a\u4ece $1$ \u53f7\u70b9\u5f00\u59cb\u6cbf\u7740\u56fe\u4e0a\u7684\u8fb9\u8d70\uff08\u6bd5\u7adf\u53ea\u6709\u4e00\u6761\uff09\u3002\u6ce8\u610f\u5230\u8d70\u5230\u70b9 $i$ \u5c31\u80fd\u8ba9 $i$ \u7684\u6743\u503c\u6b63\u786e\uff0c\u800c\u6211\u4eec\u4ece $a_i$ **\u4e00\u5b9a**\u80fd\u8d70\u5230\u522b\u7684\u6240\u6709\u70b9\uff0c\u4e5f\u5c31\u662f\u8ba9\u6240\u6709\u70b9\u6743\u503c\u6b63\u786e\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u6b63\u786e\u7b54\u6848\u3002\u4e0e\u5176\u5bf9\u7acb\u7684\uff0c\u5982\u679c\u4e0d\u662f\u4e00\u4e2a\u5927\u73af\uff0c\u90a3\u4e48\u4ece $a_i$ **\u4e00\u5b9a**\u8d70\u4e0d\u5230\u5176\u4ed6\u7684\u6240\u6709\u70b9\uff0c\u4e5f\u5c31\u4e0d\u662f\u6b63\u786e\u7b54\u6848\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4q55lzko.png)\n\n\u8fd9\u600e\u4e48\u529e\u5462\uff1f\u4e0d\u6025\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4ea4\u6362\u4e0d\u5728\u540c\u4e00\u4e2a\u73af\u7684\u4e24\u4e2a\u70b9\u7684\u6743\u503c\uff0c\u5c31\u53ef\u4ee5\u628a\u5b83\u4eec\u8fde\u5230\u4e00\u4e2a\u73af\u91cc\u3002\u6bd4\u5982\u4e0a\u56fe\uff0c\u6211\u4eec\u628a $3$ \u8fde\u5230 $a_5$\uff0c\u5c31\u76f8\u5f53\u7ed9\u73af $1-2-5$ \u63a5\u4e86\u4e00\u4e2a\u5c0f\u94fe\uff0c\u6b64\u65f6\u5c06 $5$ \u8fde\u5230 $a_3$\uff0c\u5f53\u5f53\u5f53\u5f53\uff0c\u6211\u4eec\u4ece $3$ \u5f00\u59cb\u8d70\uff0c\u8def\u5f84\u4e3a $3-a_5-a_{a_5}- \\cdots -5-a_3-a_{a_3}-\\cdots-3$\uff0c\u6b63\u597d\u628a $3$ \u6240\u5728\u7684\u73af\u548c $5$ \u6240\u5728\u7684\u73af\u8fde\u6210\u4e86\u4e00\u4e2a\u5927\u73af\uff01\u8fd9\u6837\uff0c\u901a\u8fc7\uff08\u5728\u5e73\u9762\u4e0a\uff09\u8fde\u63a5\u4e24\u4e2a\u975e\u9876\u70b9\u7684\u70b9\uff0c\u5c31\u53ef\u4ee5\u8fde\u63a5\u8fd9\u4e24\u4e2a\u975e\u9876\u70b9\u70b9\u6240\u5728\u7684\u73af\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2z6ex40c.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/6ombxcvb.png)\n\n\u8003\u8651\u4e00\u4e0b\uff0c\u6211\u4eec\u9664\u4e86\u9876\u70b9\u5230\u5176\u5b83\u70b9\u7684\u8fb9\uff0c\u8fd8\u80fd\u6709\u4ec0\u4e48\u8fb9\u5462\uff1f\u89c2\u5bdf\u4e00\u4e0b\u753b\u597d\u7684\u5e73\u9762\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u4e24\u4e2a \u201c\u76f8\u90bb\u201d \u7684\u8fb9\u4e4b\u95f4\u7684 \u201c\u5939\u8fb9\u201d \u8fde\u8d77\u6765\u662f\u548c\u5176\u5b83\u7ebf\u6bb5\u6ca1\u6709\u4ea4\u7684\u3002\u8fd9\u4e2a\u63cf\u8ff0\u597d\u62bd\u8c61\u554a\uff0c\u80fd\u4e0d\u80fd\u5177\u4f53\u4e00\u70b9\uff1f\n\n\u9996\u5148\u6211\u4eec\u4ee5\u9876\u70b9\u4e3a\u6781\u70b9\uff0c\u8fc7\u9876\u70b9\u4e14\u4e0e $x$ \u8f74\u5e73\u884c\u7684\u76f4\u7ebf\u4e3a\u6781\u8f74\u4f5c\u6781\u5750\u6807\u7cfb\uff0c\u4f5c\u51fa\u6bcf\u4e2a\u70b9\u7684\u6781\u5750\u6807 $(\\rho,\\theta)$\uff0c\u7136\u540e\u5bf9\u90a3\u4e9b\u4e0d\u662f\u9876\u70b9\u7684\u70b9\u4ee5 $\\theta$ \u6392\u5e8f\uff0c\u6392\u5e8f\u540e\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u5c31\u53ef\u4ee5\u8fde\u8fb9\uff0c\u6c42 $\\theta$ \u7528\u53cd\u6b63\u5207\u5c31\u597d\u4e86\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u63cf\u8ff0\u8fd8\u662f\u592a\u7406\u60f3\u4e86\uff0c\u53cd\u6b63\u5207\u53ea\u4f1a\u8fd4\u56de\u8fd9\u4e2a\u89d2\u7684\u4e3b\u503c\uff0c\u4f1a\u5bfc\u81f4\u5206\u8fa8\u4e0d\u51fa $\\alpha$ \u548c $\\alpha+\\pi$\uff0c\u600e\u4e48\u529e\u5462\uff1f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e5f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u5c06\u9876\u70b9\u8bbe\u4e3a\u6700\u5de6\u4e0b\u7684\u70b9\u5c31\u597d\u5566\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u6240\u6709\u7684 $\\theta$ \u90fd\u5728 $(-\\frac\\pi2,\\frac\\pi2]$ \u4e4b\u95f4\uff0c\u975e\u5e38\u7684\u8212\u9002\u3002\n\n\u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u77e5\u9053\u90a3\u4e9b\u70b9\u53ef\u4ee5\u8fde\u8fb9\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u4ed6\u4eec\u5728\u4e0d\u5728\u540c\u4e00\u4e2a\u73af\u91cc\u4ece\u800c\u5224\u65ad\u9700\u4e0d\u9700\u8981\u8fde\u8fb9\uff0c\u6700\u540e\u6211\u4eec\u6309\u7167\u5927\u73af\u7684\u505a\u6cd5\u5c31\u597d\u4e86\u3002\u73af\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\nCode\uff1a\n\n```cpp\n#include <iostream>\n#include <cmath> //We use arctangent to sort angle\n#include <vector>\n#include <utility>\n#include <algorithm>\nusing namespace std;\nint pa[114514],id[114514];\nint find(int x) {\n\tif(pa[x] == x) return x;\n\treturn (pa[x] = find(pa[x]));\n}\nvoid merge(int x,int y) {\n\tx = find(x);\n\ty = find(y);\n\tpa[x] = y;\n}\nint n;\nstruct point {\n\tint x,y,a,id;\n\tdouble angle;\n\tbool operator<(point b) const {\n\t\treturn angle < b.angle;\n\t}\n}P[114514],q[114514],O;\nvector<pair<int,int> > ans;\nint main() {\n\tint w,cnt = 0;\n\tint x0,y0,plc;\n\tcin >> w;\n\tfor(int i = 1; i <= w; i++) {\n\t\tpoint pic;\n\t\tcin >> pic.x >> pic.y >> pic.a;\n\t\tpic.id = i;\n\t\tif(pic.a != i) q[++cnt] = pic;\n\t\tpa[i] = i;\n\t}\n\tif(cnt == 0) {\n\t\tcout << 0;\n\t\treturn 0;\n\t}\n\tx0 = q[1].x;\n\ty0 = q[1].y;\n\tplc = 1;\n\tfor(int i = 2; i <= cnt; i++) {\n\t\tif(x0 > q[i].x || (x0 == q[i].x && y0 > q[i].y)) x0 = q[i].x,y0 = q[i].y,plc = i;\n\t}\n\tswap(q[plc],q[1]);\n\tn = cnt;\n\tP[1] = q[1];\n\tO = P[1];\n\tfor(int i = 2; i <= n; i++) {\n\t\tP[i] = q[i];\n\t\tP[i].angle = atan2(P[i].x-O.x,P[i].y-O.y);\n\t}\n\t\n\tsort(P+2,P+1+n);\n\tfor(int i = 1; i <= n; i++) merge(P[i].id,P[i].a);\n\tfor(int i = 2; i < n; i++) {\n\t\tif(find(P[i].id) != find(P[i+1].id)) {\n\t\t\tans.push_back(make_pair(P[i].id,P[i+1].id));\n\t\t\tswap(P[i].a,P[i+1].a);\n\t\t\tmerge(P[i].id,P[i+1].id);\n\t\t}\n\t\tid[P[i].id] = i;\n\t}\n\tid[P[1].id] = 1;\n\tid[P[n].id] = n;\n\twhile(P[1].a != P[1].id) {\n\t\tint k = id[P[1].a];\n\t\tans.push_back(make_pair(P[1].id,P[k].id));\n\t\tswap(P[1].a,P[k].a);\n\t}\n\t\n\tcout << ans.size() << endl;\n\tfor(int i = 0; i < ans.size(); i++) {\n\t\tcout << ans[i].first << ' ' << ans[i].second << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1682741709,
        "uid": 676055,
        "name": "eggegg185",
        "ccfLevel": 0,
        "title": "CF1508D"
    }
]