[
    {
        "content": "\u675c\u795e\uff1a\n\n>\u6211\u4eec\u522b\u5b66\u7b97\u6cd5\u4e86\uff0c\u5b66\u6253\u8868\u5427\u3002\n\n---\n\n\u7ecf\u5178\u7684\u201c\u53cd\u8f6c\u68cb\u5b50\u95ee\u9898\u201d\u7684\u6bcf\u4e2a\u683c\u5b50\u53ef\u4ee5\u89c6\u4e3a\u4e00\u4e2a\u5b50\u6e38\u620f\uff0c\u6240\u4ee5\u6574\u4e2a\u5c40\u9762\u7684 $SG$ \u51fd\u6570\u503c\u5c31\u662f\u6240\u6709\u9ed1\u683c\u5b50\u7684 $SG$ \u51fd\u6570\u503c\u5f02\u6216\u8d77\u6765\u7684\u503c\u3002\n\n\u53e3\u80e1\u4e00\u4e2a\u8bc1\u660e\uff1a\n\n\u5047\u8bbe\u73b0\u5728\u53cd\u8f6c\u7684\u4f4d\u7f6e\u4e3a $p$\uff0c\u4ed6\u5f71\u54cd\u5230\u4e86 $G_1,G_2,\\cdots,G_m$ \u8fd9 $m$ \u4e2a\u5b50\u6e38\u620f\uff0c\u82e5\u67d0\u4e2a $G_k$ \u4e00\u5f00\u59cb\u5c31\u5b58\u5728\uff0c\u90a3\u4e48\u7531\u4e8e $SG(G_k)\\operatorname{xor}SG(G_k)=0$\uff0c\u4e24\u4e2a\u76f8\u540c\u7684\u6e38\u620f\u62b5\u6d88\u6389\u4e86\u3002\uff08\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u628a\u7ed3\u8bba\u8bb0\u4f4f\u5c31\u884c\u4e86\uff09\n\n---\n\n\u73b0\u5728\u7684\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u6c42\u6bcf\u4e2a\u683c\u5b50\u7684 $SG$ \u51fd\u6570\u503c\u3002\n\n\u6839\u636e $SG$ \u51fd\u6570\u7684\u5b9a\u4e49\u548c $SG$ \u5b9a\u7406\u53ef\u4ee5\u5f97\u5230\uff1a\n\n$$SG(x,y)=\\mathop{\\operatorname{mex}}\\limits_{1\\leq p\\leq\\min\\{x,y,k\\}}\\left\\{\\mathop{\\operatorname{xor}}\\limits_{0\\leq i,j<  p}SG(x-i,y-j)\\right\\}$$\n\n\u663e\u7136\u6709\u4e00\u79cd $\\mathcal{O}(n^2k)$ \u7684\u505a\u6cd5\uff0c\u7ef4\u62a4 $SG$ \u503c\u7684\u4e8c\u7ef4\u524d\u7f00\u548c\u5373\u53ef\u3002\n\n\u4e0d\u8fc7\u8fd9\u9898 $n\\leq 10^9$\uff0c\u6240\u4ee5\u3002\u3002\u6253\u8868\u5927\u6cd5\u597d\u3002\n\n~~\u4e0d\u96be\u53d1\u73b0\uff1a~~\n\n$$SG(x,y)=\\min\\{\\operatorname{lowbit}(x),\\operatorname{lowbit}(y),\\operatorname{greatbit}(k)\\}$$\n\n\u4ec0\u4e48\uff0c\u8bc1\u660e\uff1f\u6211\u4e0d\u662f\u5f88\u4f1a\u4e0d\u8fc7\u6211\u627e\u4e86\u4e00\u4e2a\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u770b\u770b\uff1a[here\u8bc1\u660e](https://www.luogu.com.cn/paste/ra2bg35w)\n\n---\n\n\u90a3\u4e48 $SG(x,y)$ \u53ea\u53ef\u80fd\u5f62\u5982 $2^c$ \uff0c\u4e00\u5171\u4e0d\u5230 $\\log n $ \u79cd\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u79cd\u5206\u522b\u6c42\u4e2a\u6570\u3002\n\n\u5355\u72ec\u6c42\u4e0d\u662f\u5f88\u597d\u6c42\uff0c\u53ef\u4ee5\u8003\u8651\u5bb9\u65a5\u3002\u7b49\u4e8e $2^c$ \u7684\u4f4d\u7f6e\u4e2a\u6570\u53ef\u4ee5\u8f6c\u5316\u4e3a $\\geq 2^c$ \u7684\u4f4d\u7f6e\u4e2a\u6570\u51cf\u53bb $\\geq 2^{c+1}$ \u7684\u4f4d\u7f6e\u4e2a\u6570\u3002\n\n\u8003\u8651\u5982\u4f55\u6c42 $\\geq2^c$ \u7684\u4f4d\u7f6e\u4e2a\u6570\uff1a\n\n\u628a\u6bcf\u4e2a\u77e9\u5f62 $(x_1,y_1,x_2,y_2)$ \u8f6c\u5316\u6210 $(\\lceil x_1/2^c\\rceil,\\lceil y_1/2^c\\rceil,\\lfloor x_2/2^c\\rfloor,\\lfloor y_2/2^c\\rfloor)$ \uff0c\u7136\u540e\u7b54\u6848\u5c31\u662f\u6240\u6709\u8f6c\u5316\u540e\u7684\u77e9\u5f62\u7684\u9762\u79ef\u5e76\uff0c\u7528\u626b\u63cf\u7ebf\u89e3\u51b3\u5373\u53ef\u3002\n\n\u65f6\u95f4\uff1a$\\mathcal{O}(n\\log^2n)$\n\n\u7a7a\u95f4\uff1a$\\mathcal{O}(n)$\n\n\u5176\u5b9e\u7531\u4e8e\u53ea\u7528\u77e5\u9053\u6bcf\u4e00\u4e2a $2^c$ \u7684\u4e2a\u6570\u7684\u5947\u5076\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u6240\u6709 $c$ \u4e00\u8d77\u8003\u8651\uff0c\u7528\u4e00\u6b21\u626b\u63cf\u7ebf\u5373\u53ef\uff0c\u65f6\u95f4\u5c31\u4f18\u5316\u6210\u4e86 $\\mathcal{O}(n\\log n)$\u3002\uff08\u6709\u5174\u8da3\u53ef\u4ee5\u5199\u4e00\u4e0b\uff09\n\n---\n\n***code:***\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\n#define N 200010\nint n,m,k,tot,g[N],qwq;\nll ans[40];\nstruct Rec{\n\tint X1,Y1,X2,Y2;\n}a[N];\nstruct Border{\n\tint l,r,pos,type;\n}b[N]; \nvoid Insert(int X1,int Y1,int X2,int Y2){\n\tif(X1>X2||Y1>Y2)return;\n\tg[++qwq]=X1-1,g[++qwq]=X2;\n\tb[++tot]={X1,X2,Y1,1};\n\tb[++tot]={X1,X2,Y2+1,-1};\n}\nbool cmp(Border a,Border b){\n\treturn a.pos<b.pos;\n}\n\n//\u7ebf\u6bb5\u6811\u57fa\u672c\u64cd\u4f5c\nstruct node{\n\tint l,r,cov,sum;\n}tree[N<<2];\n#define ls i<<1\n#define rs i<<1|1\nvoid build(int i,int l,int r){\n\ttree[i].cov=tree[i].sum=0;\n\ttree[i].l=l;\n\ttree[i].r=r;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n}\ninline void update(int i){\n\tif(tree[i].cov>0){\n\t\ttree[i].sum=g[tree[i].r]-g[tree[i].l-1];\n\t}\n\telse{\n\t\ttree[i].sum=tree[ls].sum+tree[rs].sum;\n\t}\n}\nvoid Change(int i,int l,int r,int d){\n\tif(tree[i].l>=l&&tree[i].r<=r){\n\t\ttree[i].cov+=d;\n\t\tupdate(i);\n\t\treturn;\n\t}\n\tint mid=(tree[i].l+tree[i].r)>>1;\n\tif(l<=mid){\n\t\tChange(ls,l,r,d);\n\t}\n\tif(r>mid){\n\t\tChange(rs,l,r,d);\n\t}\n\tupdate(i);\n}\nll Solve(int num){\n\tqwq=tot=0;\n\tll ans=0;\n\tfor(int i=1;i<=m;++i){\n\t\tInsert((a[i].X1-1)/num+1,(a[i].Y1-1)/num+1,a[i].X2/num,a[i].Y2/num);    //\u8f6c\u5316\u77e9\u5f62\n\t}\n\tif(!qwq)return 0;\n\tsort(g+1,g+qwq+1);\n\tqwq=unique(g+1,g+qwq+1)-g-1;\n\tfor(int i=1;i<=tot;++i){\n\t\tb[i].l=lower_bound(g+1,g+qwq+1,b[i].l)-g;\n\t\tb[i].r=lower_bound(g+1,g+qwq+1,b[i].r)-g;\n\t}\n\tbuild(1,1,qwq);\n\tsort(b+1,b+tot+1,cmp);\n\tfor(int i=1,j=1;i<=tot;i=j){              //\u626b\u63cf\u7ebf\n\t\tans+=tree[1].sum*(b[i].pos-b[i-1].pos);\n\t\twhile(b[i].pos==b[j].pos&&j<=tot){\n\t\t\tChange(1,b[j].l,b[j].r,b[j].type);\n\t\t\t++j;\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tn=read(),m=read(),k=read();\n\tfor(int i=1;i<=m;++i){\n\t\ta[i].X1=read(),a[i].Y1=read(),a[i].X2=read(),a[i].Y2=read();\n\t}\n\tfor(int i=0;i<=30;++i){\n\t\tans[i]=Solve(1<<i);          //\u5206\u522b\u8003\u8651\u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\n\t}\n\tint myh=0;                         //\u6211npy\u7684\u7f29\u5199rp++ (\u5927\u96fe\n\twhile((1LL<<(myh+1))<=k)++myh;\n\tans[myh+1]=0;\n\tfor(int i=0;i<=myh;++i){        \n\t\tif((ans[i]-ans[i+1])&1){    //\u5bb9\u65a5\n\t\t\tprintf(\"Hamed\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"Malek\\n\");\n\treturn 0;\n}\n\n```\n\n[*Froggy's blog*](https://www.luogu.org/blog/1445353309froggy/)\n\n#### \u5471!!",
        "postTime": 1589425703,
        "uid": 100285,
        "name": "Froggy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF494E \u3010Sharti\u3011"
    },
    {
        "content": "\u5957\u8def\u9898\uff0c\u68cb\u76d8\u535a\u5f08\u5957\u77e9\u5f62\u5e76\u3002\n\n---\n\n\u68cb\u76d8\u535a\u5f08\u6709\u4e2a\u7ed3\u8bba\uff0c\u6bcf\u4e2a\u53ef\u4ee5\u7ffb\u7684\u68cb\u5b50\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5355\u72ec\u4e00\u4e2a\u4e92\u4e0d\u5f71\u54cd\u7684\u5b50\u6e38\u620f\u3002\n\n\u6362\u8a00\u4e4b\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u67d3\u4e86\u8272\u7684\u68cb\u5b50\uff0c\u53ea\u8981\u8003\u8651\u4e00\u4e2a\u4ec5\u5305\u542b\u8be5\u68cb\u5b50\u7684\u6e38\u620f\u5c40\u9762\uff0c\u6c42\u51fa\u8be5\u5c40\u9762\u7684 SG \u503c\uff0c\u7136\u540e\u5c06\u6240\u6709\u8fd9\u6837\u7684 SG \u503c\u5f02\u6216\u8d77\u6765\u5c31\u662f\u6574\u4e2a\u6e38\u620f\u7684 SG \u503c\u3002\n\n---\n\n\u8003\u8651\u6c42\u51fa\u4ec5\u542b\u4e00\u4e2a\u67d3\u8272\u68cb\u5b50 $(x, y)$ \u7684 SG \u503c\uff08\u4ee5\u4e0b\u90e8\u5206\u6ca1\u6709\u8bc1\u660e\uff09\u3002\n\n\u5148\u5ffd\u7565 $k$ \u7684\u9650\u5236\u3002\n\n\u6709\u4e2a\u88ab\u51fa\u70c2\u7684\u535a\u5f08\u7ed3\u8bba\uff1a\n\n- \u5047\u8bbe\u68cb\u76d8\u662f\u4e00\u4e2a\u957f\u6761\uff0c\u90a3\u4e48\u5728\u7b2c $x$ \u4e2a\u70b9\u7684\u68cb\u5b50\u5176 SG \u503c\u4e3a $lowbit(x)$ \u3002\n\n\u5c06\u8fd9\u4e2a\u7ed3\u8bba\u63a8\u5e7f\u5230\u4e8c\u7ef4\uff0c\u52a0\u4ee5\u5f52\u7eb3\uff0c\u53ef\u4ee5\u53d1\u73b0\u5ffd\u7565 $K$ \u7684\u524d\u63d0\u4e0b\uff0c\u68cb\u5b50 $(x, y)$ \u7684 SG \u503c\u5c31\u662f $min(lowbit(x), lowbit(y))$ \u3002\n\n\u800c\u52a0\u4e0a $K$ \u7684\u9650\u5236\u540e\uff0c\u7b2c $x$ \u4e2a\u70b9\u7684\u68cb\u5b50 SG \u503c\u4e3a $min(lowbit(x), lowbit(y), greatbit(k))$ \u3002\n\nps: \u8fd9\u91cc\u4e24\u4e2a\u7ef4\u5ea6\u4e0d\u662f\u72ec\u7acb\u7684\uff0c\u4e0d\u80fd\u7528 Nim \u79ef\uff08\u6211\u7b2c\u4e00\u773c\u628a\u8fd9\u9898\u770b\u6210\u4e86 Boring Game \u7684\u7ffb\u7248\uff09\n\n---\n\n\u73b0\u5728\u7684\u95ee\u9898\u662f\u5bf9\u4e8e\u4e00\u4e2a\u77e9\u5f62\u5e76\u6c42\u51fa\u5176 SG \u503c\u7684\u5f02\u6216\u548c\u3002\n\n\u7c7b\u4f3c\u4e8e\u77e9\u5f62\u9762\u79ef\u5e76\uff0c\u7528\u626b\u63cf\u7ebf + \u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u6ce8\u610f\u5230 $lowbit$ \u90fd\u662f 2 \u7684\u6574\u6b21\u5e42\uff0c\u79cd\u7c7b\u6570\u662f $O(logN)$ \u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u5728\u7ebf\u6bb5\u6811\u4e2d\u7ef4\u62a4\u6bcf\u4e2a $lowbit$ \u7684\u6570\u91cf\u3002\n\n\u7136\u540e\u626b\u63cf\u7ebf\u626b\u8fc7\u4e00\u6bb5\u65f6\uff0c\u540c\u6837\u6c42\u51fa\u8fd9\u6bb5\u533a\u95f4\u6bcf\u4e2a $lowbit$ \u7684\u6570\u91cf\uff0c\u7edf\u8ba1\u7b54\u6848\u65f6\u53ea\u9700\u8981\u5728\u4e24\u4e2a\u7ef4\u5ea6 $O(log^2N)$ \u5206\u522b\u679a\u4e3e $lowbit$ \uff0c\u4e0e $greatbit(k)$ \u4e00\u8d77\u53d6 min \u5373\u53ef\u7b97\u8fdb\u7b54\u6848\u3002\n\n\u81f3\u4e8e\u6c42\u4e00\u6bb5\u533a\u95f4\u7684 $lowbit$ \u5206\u5e03\uff0c\u9996\u5148\u8f6c\u6362\u4e3a\u6c42\u4e00\u6bb5\u524d\u7f00 $[0, n]$ \u7684 $lowbit$ \u5206\u5e03\uff0c\u6570\u4f4d DP \u4e00\u4e0b\u6216\u8005\u901a\u8fc7\u903c\u8fd1\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u7684\u65b9\u6cd5\u53ef\u4ee5 $O(logN)$ \u5b9e\u73b0\uff0c\u4e0d\u5728\u8ba8\u8bba\u91cd\u70b9\u3002\n\n---\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(mlog^2N)$ \u3002\n\n\u7a7a\u95f4\u590d\u6742\u5ea6 $O(mlogN)$ \u3002\n\n\u53c2\u8003\u5b9e\u73b0\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cassert>\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n\ntypedef long long ll;\nstruct {\n\tinline operator int () { int x; return scanf(\"%d\", &x), x; }\n\tinline operator ll () { ll x; return scanf(\"%lld\", &x), x; }\n} read;\n\nconst int maxn = 100005, maxk = 30;\nstruct\tTree {\n\tint cover, low[maxk];\n} pool[maxn << 2];\n#define self pool[now]\n#define lt (now << 1)\n#define rt (now << 1 | 1)\nint pre[maxn][maxk];\n\nvoid update(int now, int L, int R) {\n\tif(self.cover)\n\t\tfor(int k = 0; k < maxk; k ++)\n\t\t\tself.low[k] = pre[R][k] - pre[L - 1][k];\n\telse if(L == R)\n\t\tfor(int k = 0; k < maxk; k ++)\n\t\t\tself.low[k] = 0;\n\telse\n\t\tfor(int k = 0; k < maxk; k ++)\n\t\t\tself.low[k] = pool[lt].low[k] + pool[rt].low[k];\n}\n\nvoid modify(int now, int L, int R, int l, int r, int x) {\n\tif(r < L or l > R) return;\n\tif(l <= L and R <= r) return self.cover += x, update(now, L, R);\n\tint M = (L + R) >> 1;\n\tmodify(lt, L, M, l, r, x);\n\tmodify(rt, M + 1, R, l, r, x);\n\tupdate(now, L, R);\n}\n\nint get[maxk];\nvoid getlow(int n) {\n\tstd::fill(get, get + maxk, 0);\n\tfor(int k = maxk - 1; k; k --) {\n\t\tget[k - 1] += get[k] << 1;\n\t\tif(n >> k & 1)\n\t\t\t++ get[k - 1];\n\t}\n\tfor(int k = 0; k < maxk; k ++)\n\t\tif(n >> k & 1)\n\t\t\t++ get[k];\n}\n\nstruct Operation {\n\tint l, r, t, o;\n} op[maxn];\nint tmp[maxn], tp;\n\nint main() {\n\tread.operator int();\n\tint n = 0, m = read, K = read;\n\tfor(int k = 0; k < maxk + 1; k ++)\n\t\tif((1 << k) > K) {\n\t\t\tK = 1 << k >> 1;\n\t\t\tbreak;\n\t\t}\n\n\tfor(int i = 1; i <= m; i ++) {\n\t\tint lx = read, ly = read;\n\t\tint rx = read, ry = read;\n\t\top[i * 2 - 1] = {ly, ry, lx, 1};\n\t\top[i * 2] = {ly, ry, rx + 1, -1};\n\t\ttmp[++ n] = ly - 1;\n\t\ttmp[++ n] = ry;\n\t}\n\n\tstd::sort(tmp + 1, tmp + n + 1);\n\tn = int(std::unique(tmp + 1, tmp + n + 1) - tmp - 1);\n\tfor(int i = 1; i <= n; i ++) {\n\t\tgetlow(tmp[i]);\n\t\tstd::copy(get, get + maxk, pre[i]);\n\t}\n\n\tstd::sort(op + 1, op + m * 2 + 1, [](Operation a, Operation b) {\n\t\t\t\treturn a.t < b.t;\n\t\t\t});\n\n\tint sg = 0;\n\tfor(int i = 1; i <= m * 2; i ++) {\n\t\tint shit[maxk];\n\t\tgetlow(op[i].t - 1);\n\t\tstd::copy(get, get + maxk, shit);\n\t\tgetlow(op[i - 1].t - 1);\n\t\tfor(int k = 0; k < maxk; k ++)\n\t\t\tshit[k] -= get[k];\n\t\tfor(int k1 = 0; k1 < maxk; k1 ++)\n\t\t\tif(shit[k1] & 1)\n\t\t\t\tfor(int k2 = 0; k2 < maxk; k2 ++)\n\t\t\t\t\tif(pool[1].low[k2] & 1)\n\t\t\t\t\t\tsg ^= std::min({1 << k1, 1 << k2, K});\n\t\tint l = int(std::lower_bound(tmp + 1, tmp + n + 1, op[i].l - 1) - tmp) + 1;\n\t\tint r = int(std::lower_bound(tmp + 1, tmp + n + 1, op[i].r) - tmp);\n\t\tmodify(1, 1, n, l, r, op[i].o);\n\t}\n\n\tif(sg) puts(\"Hamed\");\n\telse puts(\"Malek\");\n}\n```",
        "postTime": 1584243559,
        "uid": 52232,
        "name": "Kewth",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF494E \u3010Sharti\u3011"
    },
    {
        "content": "\u53d1\u73b0\u672c\u9898\u4e3a\u516c\u5e73\u7ec4\u5408\u6e38\u620f\uff0c\u8003\u8651\u7528 $\\text{SG}$ \u51fd\u6570\u6765\u89e3\u51b3\u3002\n\n\u5bf9\u4e8e\u7ffb\u786c\u5e01\u6e38\u620f\uff0c\u4e00\u4e2a\u72b6\u6001\u7684 $\\text{SG}$ \u503c\u4e3a\u5f53\u524d\u72b6\u6001\u7684\u6bcf\u4e2a\u6b63\u9762\u671d\u4e0a\u7684\u786c\u5e01\u5355\u4e00\u5b58\u5728\u65f6\u7684 $\\text{SG}$ \u503c\u7684\u5f02\u6216\u548c\u3002\n\n\u53ef\u4ee5\u7528\u5f52\u7eb3\u6cd5\u5f97\u5230\u4f4d\u7f6e $(x,y)$ \u7684 $\\text{SG}$ \u503c\uff1a\n$$\n\\large\\text{SG}(x,y)=\\min\\{\\text{lowbit}(x),\\text{lowbit}(y) ,\\text{greatbit}(k)\\}\n$$\n\u90a3\u4e48\u6bcf\u4e2a\u4f4d\u7f6e\u7684 $\\text{SG}$ \u503c\u90fd\u662f $2^t$ \u7684\u5f62\u5f0f\u3002\n\n\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u533a\u95f4 $[l,r]$ \u7684 $\\text{lowbit}$ \u7684\u5f02\u6216\u548c\uff0c\u5f97 $i$ \u4f5c\u4e3a $\\text{lowbit}$ \u7684\u8d21\u732e\u6b21\u6570\u4e3a\uff1a\n$$\n\\large\\frac{r}{i}-\\frac{l-1}{i}-\\left(\\frac{r}{2i}-\\frac{l-1}{2i}\\right)\n$$\n\u524d\u4e00\u9879\u4e3a\u6240\u6709\u60c5\u51b5\uff0c\u540e\u4e00\u9879\u4e3a $i$ \u4e0d\u4e3a $\\text{lowbit}$ \u7684\u60c5\u51b5\u3002\n\n\u53ef\u4ee5\u7528\u626b\u63cf\u7ebf\u6765\u5206\u522b\u7edf\u8ba1\u884c\u548c\u5217\u7684\u7b54\u6848\uff0c\u7136\u540e\u518d\u5408\u5e76\u3002\u76f4\u63a5\u7b97 $\\text{SG}$ \u503c\u7b49\u4e8e $2^t$ \u7684\u4e2a\u6570\u4e0d\u597d\u7b97\uff0c\u53ef\u4ee5\u7b97\u51fa $\\geqslant2^t$ \u7684\u4e2a\u6570\uff0c\u7b49\u4e8e $2^t$ \u7684\u4e2a\u6570\u4f5c\u5dee\u5373\u53ef\u6c42\u5f97\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 100010\n#define maxm 3000010\n#define mid ((l+r)>>1)\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,m,k,lim=1,t,ans,root,tot,cnt;\nint num[maxn],ls[maxm],rs[maxm],tag[maxm],sum[maxm],val[maxm];\nstruct node\n{\n    int x,l,r,v;\n}p[maxn];\nbool cmp(const node &a,const node &b)\n{\n    return a.x<b.x;\n}\nint get(int l,int r)\n{\n    int v=0;\n    for(int i=1;i<=k;i<<=1)\n        v|=(((r/i-(l-1)/i)-(i*2<=k?r/i/2-(l-1)/i/2:0))&1)*i;\n    return v;\n}\nvoid pushup(int cur,int l,int r)\n{\n    if(tag[cur]) sum[cur]=val[cur];\n    else sum[cur]=sum[ls[cur]]^sum[rs[cur]];\n}\nvoid modify(int L,int R,int l,int r,int v,int &cur)\n{\n    if(!cur) cur=++tot;\n    val[cur]=get(l,r);\n    if(L<=l&&R>=r)\n    {\n        tag[cur]+=v,pushup(cur,l,r);\n        return;\n    }\n    if(L<=mid) modify(L,R,l,mid,v,ls[cur]);\n    if(R>mid) modify(L,R,mid+1,r,v,rs[cur]);\n    pushup(cur,l,r);\n}\nint main()\n{\n    read(n),read(m),read(k);\n    while(lim<=k) lim<<=1,t++;\n    for(int i=1;i<=m;++i)\n    {\n        int u,d,l,r;\n        read(l),read(u),read(r),read(d);\n        p[++cnt]={l,u,d,1},p[++cnt]={r+1,u,d,-1};\n    }\n    sort(p+1,p+cnt+1,cmp);\n    for(int i=1;i<=cnt;++i)\n    {\n        if(p[i-1].x!=p[i].x)\n        {\n            int v1=sum[root],v2=get(p[i-1].x,p[i].x-1),s1=0,s2=0;\n            for(int j=lim,l=t;j;j>>=1,l--)\n                s1+=((v1&j)!=0),s2+=((v2&j)!=0),num[l]+=s1*s2;\n        }\n        modify(p[i].l,p[i].r,1,n,p[i].v,root);\n    }\n    for(int i=0,j=1;i<t;++i,j<<=1)\n        if((num[i]-num[i+1])&1)\n            ans^=j;\n    if(ans) puts(\"Hamed\");\n    else puts(\"Malek\");\n    return 0;\n}\n```",
        "postTime": 1600946966,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF494E \u3010Sharti\u3011"
    }
]