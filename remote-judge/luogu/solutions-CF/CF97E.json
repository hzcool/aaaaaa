[
    {
        "content": "[CF97E](https://www.luogu.com.cn/problem/CF97E)\n\n\u6211\u771f\u7684\u8c03\u8fd9\u9898\u8c03\u5230\u5410\u8840\uff0c\u6211\u4e00\u5b9a\u8981\u5199\u4e00\u7bc7\u9898\u89e3\u8868\u8fbe\u6211\u590d\u6742\u7684\u5fc3\u60c5\uff01\n\n* \u5148\u968f\u4fbf\u627e\u4e00\u68f5\u751f\u6210\u6811\u51fa\u6765\uff0c\u4e24\u70b9\u95f4\u6811\u4e0a\u8ddd\u79bb\u5982\u679c\u662f\u5947\u6570\u5219\u663e\u7136\u53ef\u884c\uff1b\n* \u5982\u679c\u6811\u4e0a\u8ddd\u79bb\u662f\u5076\u6570\uff0c\u5219\u5224\u65ad\u6811\u4e0a\u8def\u5f84\u4e2d\u662f\u5426\u6709\u8fb9\u5728\u539f\u56fe\u7684\u5947\u73af\u4e2d\u3002\u5047\u8bbe\u6811\u4e0a(u,v)\u4e4b\u95f4\u5b58\u5728\u70b9a\u548cb\u6ee1\u8db3a\u5230b\u7684\u8def\u5f84\u662f\u5947\u73af\u7684\u4e00\u90e8\u5206\uff0c\u5219\u5947\u73af\u7684\u201c\u53e6\u4e00\u90e8\u5206\u201d\u7684\u5947\u5076\u6027\u4e00\u5b9a\u4e0ea\u5230b\u8ddd\u79bb\u7684\u5947\u5076\u6027\u76f8\u53cd\u3002\u90a3\u4e48\u7528\u201c\u53e6\u4e00\u90e8\u5206\u201d\u4ee3\u66ffa\u5230b\u7684\u8def\u5f84\u53ef\u4ee5\u6539\u53d8(u,v)\u8def\u5f84\u7684\u5947\u5076\u6027\uff0c\u56e0\u6b64\u53ef\u884c\u3002\n* \u9664\u4e86\u4e0a\u8ff0\u60c5\u51b5\uff0c\u5176\u4ed6\u60c5\u51b5\u5747\u4e0d\u53ef\u884c\u3002\n* \u6ce8\u610f\u5224\u65ad\u56fe\u4e0d\u8fde\u901a\u7684\u60c5\u51b5\n\n* \u5982\u4f55\u5224\u65ad\u4e00\u6761\u8fb9\u662f\u5426\u5728\u5947\u73af\u4e0a\uff1f\u7ed3\u8bba\u662f\uff0c\u4e00\u6761\u8fb9\u5728\u5947\u73af\u4e0a\u7684\u5145\u8981\u6761\u4ef6\u662f\u5b83\u6240\u5728\u7684\u70b9\u53cc\u5b58\u5728\u5947\u73af\u3002\n\n  \u8bc1\u660e\uff1a\u4e00\u4e2a\u5947\u73af\u5411\u5916\u6269\u5c55\u51fa\u7684\u8fb9\u4e00\u5b9a\u662f\u5947\u73af\u3002\u4e00\u4e2a\u5b58\u5728\u5947\u73af\u7684\u70b9\u53cc\u53ef\u4ee5\u901a\u8fc7\u4ece\u5b83\u7684\u5947\u73af\u6269\u5c55\u5f97\u5230\u3002\u4e14\u70b9\u53cc\u4e4b\u95f4\u4e0d\u53ef\u80fd\u5b58\u5728\u73af\u3002\n\n\uff08\u4e0b\u9762\u624d\u662f\u91cd\u70b9\uff09\n\n\u5f53\u6211\u5199\u8fd9\u9898\u5199\u4e86\u4e94\u4efd\u4ee3\u7801\u5e76\u5168\u6302\u4e86\u60f3\u770b\u770b\u9898\u89e3\u7684\u65f6\u5019\uff0c\u6211\u7684\u5185\u5fc3\u662f***\u7684\uff01\n\n**\u8fd9\u9053\u9898\u7684\u9898\u89e3\u9664\u4e86\u5706\u65b9\u6811\u548c\u6811\u5256\u7684\u4e24\u7bc7\uff0c\u5176\u4ed6\u7f29\u8fb9\u53cc\u7684\u90fd\u662f\u80fdA\u9898\u7684\u5047\u9898\u89e3\uff08\u5305\u62ec\u90a3\u7bc7\u6587\u5b57\u8bf4\u662f\u70b9\u53cc\u4ee3\u7801\u5199\u4e86\u8fb9\u53cc\u7684\u9898\u89e3\uff09\uff01\u5f3a\u70c8\u5efa\u8bae\u7ba1\u7406\u5458\u64a4\u4e0b\u9519\u8bef\u9898\u89e3\uff01**\n\nHack\u8fb9\u53cc\u7684\u6570\u636e\uff1a6 7 1 2 2 3 3 4 4 1 3 5 5 6 6 3 1 2 4\n\n\u6b63\u786e\u7b54\u6848\u5e94\u8be5\u662f No\n\n\u90a3\u5b83\u4eec\u4e3a\u4ec0\u4e48\u80fdAC\u5462\uff1f\u56e0\u4e3a\u8fd9\u9053\u9898\u7684\u6570\u636e\u662f*\u9020\u7684\uff01\u751a\u81f3\u53ef\u4ee5\u7528\u968f\u673a\u5316\u7b97\u6cd5\u8fc7\u6389\uff01\u800c\u4e14CF\u4e0a\u8fd8\u6ca1\u6709\u8fd9\u9898\u7684\u9898\u89e3\uff01~~\uff08\u6240\u4ee5\u5176\u5b9e\u8fd9\u7bc7\u9898\u89e3\u662f\u7528\u6765\u9a82\u8fd9\u9053\u9898\u7684\uff09~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nnamespace FGF\n{\n\tint n,m;\n\tconst int N=5e5+5;\n\tstruct edg{\n\t\tint to,nxt,id;\n\t}e[N<<1];\n\tint cnt=1,head[N],s;\n\tint rt[N],dfn[N],low[N],st[N],bel[N],col[N],num,tp,dcc,siz[N],sum[N],dep[N],fa[N][20];\n\tbool vis[N],is[N],fl;\n\tvector<int> V[N],E[N];\n\tvoid add(int u,int v,int id)\n\t{\n\t\tcnt++;\n\t\te[cnt].to=v;\n\t\te[cnt].nxt=head[u];\n\t\thead[u]=cnt;\n\t\te[cnt].id=id;\n\t}\n\tvoid tarjan(int u,int f)\n\t{\n\t\tdfn[u]=low[u]=++num;\n\t\tdep[u]=dep[e[f^1].to]+1,fa[u][0]=e[f^1].to,rt[u]=rt[e[f^1].to];\n\t\tfor(int i=1;i<=18;i++)\n\t\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tif(vis[i]||i==(f^1))continue;\n\t\t\tst[++tp]=i;\n\t\t\tif(!dfn[v])\n\t\t\t{\n\t\t\t\ttarjan(v,i);\n\t\t\t\tlow[u]=min(low[u],low[v]);\n\t\t\t\tif(low[v]>=dfn[u])\n\t\t\t\t{\n\t\t\t\t\t++dcc;\n\t\t\t\t\tint x=-1;\n\t\t\t\t\tV[dcc].push_back(u);\n\t\t\t\t\tdo{\n\t\t\t\t\t\tx=st[tp--];\n\t\t\t\t\t\tbel[x]=bel[x^1]=dcc;\n\t\t\t\t\t\tvis[x]=vis[x^1]=1;\n\t\t\t\t\t\tV[dcc].push_back(e[x].to);\n\t\t\t\t\t\tE[dcc].push_back(x);\n\t\t\t\t\t}while(x!=i);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse low[u]=min(low[u],dfn[v]);\n\t\t}\n\t}\n\tvoid dfs(int u,int f)\n\t{\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tif(vis[v]||i==(f^1))continue;\n\t\t\tsum[v]=sum[u]+is[i],dfs(v,i);\n\t\t}\n\t}\n\tbool dfs2(int u,int fro)\n\t{\n\t\tif(vis[u])\n\t\t{\n\t\t\tif(col[u]==col[e[fro^1].to])return 1;\n\t\t\telse return 0;\n\t\t}\n\t\tvis[u]=1;col[u]=col[e[fro^1].to]^1;\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tif((i==(fro^1))||bel[i]!=bel[fro])continue;\n\t\t\tif(dfs2(v,i))return 1;\n\t\t}\n\t\treturn 0;\n\t}\n\tint getlca(int u,int v)\n\t{\n\t\tif(dep[u]<dep[v])swap(u,v);\n\t\tint d=dep[u]-dep[v];\n\t\tfor(int i=18;i>=0;i--)\n\t\t\tif(d&(1<<i))u=fa[u][i];\n\t\tif(u==v)return u;\n\t\tfor(int i=18;i>=0;i--)\n\t\t\tif(fa[u][i]!=fa[v][i])u=fa[u][i],v=fa[v][i];\n\t\treturn fa[u][0];\n\t}\n\tvoid work()\n\t{\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tint u,v;\n\t\tfor(int i=1;i<=m;i++)\t\n\t\t{\n\t\t\tscanf(\"%d%d\",&u,&v);\n\t\t\tadd(u,v,i),add(v,u,i);\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(!dfn[i])rt[0]=i,tarjan(i,0);\t\n\t\tmemset(vis,0,sizeof(vis));\n\t\tfor(int i=1;i<=dcc;i++)\n\t\t{\n\t\t\tfor(int sz=V[i].size(),j=0;j<sz;j++)\n\t\t\t\tvis[V[i][j]]=0;\n\t\t\tif(dfs2(e[E[i][0]].to,E[i][0]))\n\t\t\t\tfor(int sz=E[i].size(),j=0;j<sz;j++)\n\t\t\t\t\tis[E[i][j]]=is[E[i][j]^1]=1;\n\t\t}\n\t\tmemset(vis,0,sizeof(vis));\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(!vis[i])dfs(i,0);\n\t\tint Q;\n\t\tscanf(\"%d\",&Q);\n\t\twhile(Q--)\n\t\t{\n\t\t\tscanf(\"%d%d\",&u,&v);\n\t\t\tif(rt[u]!=rt[v])puts(\"No\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tint lca=getlca(u,v);\n\t\t\t\tif((dep[u]+dep[v]-2*dep[lca])&1)puts(\"Yes\");\n\t\t\t\telse if(sum[u]+sum[v]-2*sum[lca])puts(\"Yes\");\n\t\t\t\telse puts(\"No\");\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tFGF::work();\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1606401020,
        "uid": 224403,
        "name": "\u6728xx\u6728\u5927",
        "ccfLevel": 9,
        "title": "CF97E Leaders \uff08\u70b9\u53cc+\u5224\u5947\u73af+\u6811\u4e0a\u5dee\u5206\uff09"
    },
    {
        "content": "# [Portal](https://www.luogu.com.cn/problem/CF97E)\n\n\u8fd9\u91cc\u662f\u67d0\u79cd\u5947\u602a\u7684\u4e8c\u5206\u56fe+\u5706\u65b9\u6811\u89e3\u6cd5\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u6210\u51e0\u79cd\u60c5\u51b5\u6765\u8003\u8651\u3002\n\n1. \u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u3002\n\n\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u8f93\u51fa ```No``` \u5373\u53ef\u3002\n\n2. \u4e24\u70b9\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u3002\n\n\u8fd9\u65f6\u6211\u4eec\u5c31\u8981\u63d0\u53d6\u51fa\u4efb\u610f\u4e00\u6761\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u51fa\u6765\u3002\n\n\uff08\u5173\u4e8e\u5982\u4f55\u63d0\u53d6\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4efb\u610f\u4e00\u4e2a\u70b9\u51fa\u53d1\u8dd1\u4e00\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u51fa\u6765\uff0c\u7136\u540e\u53d6\u4e24\u70b9\u5230\u6e90\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u7684**\u5f02\u6216\u548c**\u4f5c\u4e3a\u4e24\u70b9\u95f4\u8def\u5f84\u957f\u5ea6\u2014\u2014\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3\u8def\u5f84\u957f\u5ea6\u7684\u5947\u5076\u6027\uff0c\u6545\u8fd9\u4e24\u6761\u5230\u6e90\u70b9\u7684\u8def\u5f84\u4e2d\uff0c\u91cd\u53e0\u7684\u90e8\u5206\u4f1a\u88ab\u5f02\u6216\u4e24\u6b21\u65e0\u6548\u6389\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u4e24\u70b9\u95f4\u8def\u5f84\u957f\u5ea6\uff09\n\n2.1. \u8def\u5f84\u957f\u5ea6\u662f\u5947\u6570\u3002\n\n\u76f4\u63a5\u8f93\u51fa ```Yes``` \u5373\u53ef\u3002\n\n2.2. \u8def\u5f84\u957f\u5ea6\u662f\u5076\u6570\u3002\n\n\u5219\u6211\u4eec\u63a5\u4e0b\u6765\u5c31\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u6761\u5947\u8def\u5f84\u3002\n\n\u5f88\u663e\u7136\u8fd9\u6761\u5947\u8def\u5f84\uff0c\u4e0e\u6211\u4eec\u4e00\u5f00\u59cb\u9009\u51fa\u7684\u90a3\u6761\u5076\u8def\u5f84\uff0c\u662f\u6709\u4e0d\u91cd\u53e0\u7684\u90e8\u5206\u7684\u3002\u6211\u4eec\u6311\u51fa\u4e0d\u91cd\u53e0\u7684\u90e8\u5206\u4e00\u770b\uff0c\u53d1\u73b0\u5176\u4e2d\u5fc5\u5b9a\u5305\u542b\u4e00\u4e2a**\u5947\u73af**\u3002\u56e0\u4e3a\uff0c\u53ea\u6709\u5947\u73af\u4e0a\u4e24\u70b9\uff0c\u624d\u4f1a\u540c\u65f6\u5b58\u5728\u4e00\u6761\u5947\u8def\u5f84\u548c\u4e00\u6761\u5076\u8def\u5f84\u3002\n\n\u4e8e\u662f\u6211\u4eec\u73b0\u5728\u5c31\u8981\u5224\u65ad\u4e24\u70b9\u95f4\u662f\u5426\u5b58\u5728\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e00\u4e2a\u5947\u73af\u3002\n\n\u5219\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u4e24\u70b9\u95f4\u6240\u6709\u8def\u5f84\u7684**\u5e76\u96c6**\u6240\u6784\u6210\u7684\u5b50\u56fe\u4e2d\uff0c\u6709\u6ca1\u6709\u5947\u73af\u3002\n\n\u660e\u663e\u8fd9\u662f**\u5706\u65b9\u6811**\u7684\u5185\u5bb9\uff08\u4e0d\u4f1a\u5706\u65b9\u6811\u7684\u53ef\u4ee5\u53c2\u89c1\u672c\u4eba\u7684[\u5706\u65b9\u6811\u5b66\u4e60\u7b14\u8bb0](https://www.luogu.com.cn/blog/Troverld/yuan-fang-shu-xian-ren-zhang-xue-xi-bi-ji)\uff09\u3002\u6545\u6211\u4eec\u5efa\u51fa\u5706\u65b9\u6811\uff0c\u7136\u540e\u5224\u65ad\u6bcf\u4e2a\u65b9\u70b9\u6240\u4ee3\u8868\u7684\u70b9\u53cc\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5947\u73af\uff08\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u4e8c\u5206\u56fe\u67d3\u8272\u5224\u5b9a\u51fa\u6765\uff09\uff0c\u5982\u679c\u5b58\u5728\u5c31\u6253\u4e0a\u6807\u8bb0\u3002\u5219\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u5706\u65b9\u6811\u4e0a\u4e24\u70b9\u95f4\u8def\u5f84\u4e2d\u662f\u5426\u6709\u6253\u4e0a\u6807\u8bb0\u7684\u8282\u70b9\u5373\u53ef\u3002\n\n\u4e0b\u9762\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\u3002\n\n\u660e\u663e\u5706\u65b9\u6811\u7684\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\uff1b\u7136\u540e\u6c42\u5355\u6e90\u6700\u77ed\u8def\u56e0\u4e3a\u65e0\u8fb9\u6743\uff0c\u53ef\u4ee5\u4f7f\u7528bfs\uff08\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86Dijkstra\uff09\uff1b\u6c42\u8def\u5f84\u4e0a\u6709\u65e0\u6253\u6807\u8bb0\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u6811\u4e0a\u500d\u589e\uff1b\u6545\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n[\u4ee3\u7801\u6233\u8fd9\u513f](https://www.luogu.com.cn/record/37523338)",
        "postTime": 1598172528,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF97E \u3010Leaders\u3011"
    },
    {
        "content": "\u6628\u5929\u8003\u8bd5\u8003\u4e86\u8fd9\u9053\u9898\uff0c\u8003\u573a\u4e0a\u5199\u4e86\u4e2a\u6811\u5256\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff0c\u4f46\u662f\u7531\u4e8e\u672c\u4eba\u4ee3\u7801\u80fd\u529b\u592a\u5dee\u5bfc\u81f4\u6302\u6210\u4e860\u5206\uff08\u4f24\u5fc3\uff09/kk\uff08\u597d\u6b79\u662f\u53ea\u6709\u4e00\u4e2aAC\u554a\uff09\n\n\u4e0b\u9762\u8bb2\u4e0b\u4e3b\u8981\u601d\u8def\uff1a\n\n\u9996\u5148\u8fd9\u4e2a\u9898\u5f88\u660e\u663e\u662f\u8ba9\u6211\u4eec\u53bb\u627e\u4e00\u4e2a\u8def\u5f84\u4e0a\u6709\u6ca1\u6709\u8fb9\u5728\u5947\u73af\u4e0a\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u5148\u628a\u8fd9\u4e2a\u56fe\u7684DFS\u6811\u5efa\u51fa\u6765\u3002\n\n\u90a3\u4e48\u6b64\u65f6\uff0c\u5bf9\u4e8e\u4e00\u6761\u6307\u5411\u4e00\u4e2a\u70b9\u7956\u5148\u7684\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u4e0e\u8fd9\u6761\u8def\u5f84\u6784\u6210\u7684\u662f\u5947\u73af\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8def\u5f84\u4e0a\u7684\u8fb9\u90fd\u5728\u5947\u73af\u4e0a\uff0c\u6211\u4e48\u5c31\u8981\u628a\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u6807\u8bb0\u6210\u5728\u5947\u73af\u4e0a\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u6811\u5256\u6765\u7ef4\u62a4\n\n\u5982\u679c\u5bf9\u4e8e\u4e00\u6761\u6307\u5411\u7956\u5148\u7684\u8fb9\uff0c\u5b83\u4e0e\u8fd9\u6761\u8def\u5f84\u6784\u6210\u7684\u662f\u5076\u73af\uff0c\u4f46\u662f\u8fd9\u6761\u8def\u5f84\u4e0a\u6709\u8fb9\u5728\u5947\u73af\u4e0a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5076\u73af\u4e00\u5b9a\u80fd\u4e0e\u90a3\u4e2a\u5947\u73af\u7ec4\u6210\u4e00\u4e2a\u65b0\u7684\u5947\u73af\uff0c\u6b64\u65f6\u518d\u628a\u8fd9\u4e2a\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u66f4\u65b0\uff0c\u8fd9\u4e2a\u4ecd\u7136\u7528\u6811\u5256\u7ef4\u62a4\u3002\n\n\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u5176\u4ed6\u9898\u89e3\u8bb2\u7684\u5df2\u7ecf\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\n\ncode:\n\n```\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\nusing std::vector;\n#define ls rt<<1\n#define rs rt<<1|1\n#define mid ((l+r)>>1)\n#define rep(a,b,c) for(int a=b;a<=c;a++) \nconst int maxn=1e5+1;\nstruct Edge {\n\tint u,v;\n}e[maxn<<1];\nint head[maxn],ecnt;\ninline void addedge(int u,int v) { e[++ecnt].v=v;e[ecnt].u=head[u];head[u]=ecnt; }\ninline void add(int u,int v) { addedge(u,v); addedge(v,u); }\nint fa[maxn],dep[maxn],top[maxn],son[maxn],siz[maxn],vis[maxn],val[maxn<<2],idx[maxn],id,n,m,a,b,q,bcj[maxn],fx,fy;\ninline int find(int x) { return bcj[x]==x?x:bcj[x]=find(bcj[x]); }\ninline void jh(int &x,int &y) { x^=y^=x^=y; }\ninline void pushdown(int rt,int l,int r) { if(val[rt]!=(r-l+1)) return; val[ls]=(mid-l+1); val[rs]=(r-mid); }\ninline void pushup(int rt) { val[rt]=val[ls]+val[rs]; }\ninline void update(int rt,int l,int r,int L,int R) {\n\tif(L<=l&&r<=R) return(void)(val[rt]=r-l+1);\n\tpushdown(rt,l,r);\n\tif(L<=mid) update(ls,l,mid,L,R);\n\tif(R>mid) update(rs,mid+1,r,L,R);\n\tpushup(rt);\n}\ninline int query(int rt,int l,int r,int L,int R) {\n\tif(L<=l&&r<=R) return val[rt];\n\tpushdown(rt,l,r);\n\tint ANS=0;\n\tif(L<=mid) ANS+=query(ls,l,mid,L,R);\n\tif(R>mid) ANS+=query(rs,mid+1,r,L,R);\n\treturn ANS;\n}\ninline void upd(int x,int y) {\n\twhile(top[x]!=top[y]) {\n\t\tif(dep[top[x]]<dep[top[y]]) jh(x,y);\n\t\tupdate(1,1,n,idx[top[x]],idx[x]);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[y]<dep[x]) jh(x,y);\n\tupdate(1,1,n,idx[x]+1,idx[y]);\n}\ninline int qry(int x,int y) {\n\tint cnt=0;\n\twhile(top[x]!=top[y]) {\n\t\tif(dep[top[x]]<dep[top[y]]) jh(x,y);\n\t\tcnt+=query(1,1,n,idx[top[x]],idx[x]);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[y]<dep[x]) jh(x,y);\n\tcnt+=query(1,1,n,idx[x],idx[y]);\n\treturn cnt;\n}\ninline void dfs1(int x,int f) {\n\tsiz[x]=1; dep[x]=dep[f]+1; fa[x]=f;\n\tfor(int i=head[x],v;i;i=e[i].u) {\n\t\tv=e[i].v; if(dep[v]) continue;\n\t\tdfs1(v,x);\n\t\tsiz[x]+=siz[v];\n\t\tif(siz[v]>siz[son[x]]) son[x]=v;\n\t}\n}\ninline void dfs2(int x,int topf) {\n\tidx[x]=++id; top[x]=topf; if(!son[x]) return;\n\tdfs2(son[x],topf);\n\tfor(int i=head[x],v;i;i=e[i].u) {\n\t\tv=e[i].v; if(dep[v]<dep[x]||v==son[x]) continue;\n\t\tif(fa[v]==x) dfs2(v,v);\n\t}\n}\ninline void dfs3(int x) {\n\tfor(int i=head[x],v;i;i=e[i].u) {\n\t\tv=e[i].v; if(v==fa[x]) continue;\n\t\tif(fa[v]==x) dfs3(v);\n\t\telse if(dep[v]>dep[x]) continue;\n\t\telse if(!((dep[x]-dep[v])&1)) upd(x,v);\n\t}\n}\ninline void dfs4(int x) {\n\tfor(int i=head[x],v;i;i=e[i].u) {\n\t\tv=e[i].v; if(v==fa[x]) continue;\n\t\tif(fa[v]==x) dfs4(v);\n\t\telse if(dep[v]>dep[x]) continue;\n\t\telse if((dep[x]-dep[v])&1) {\n\t\t\tint cnt=qry(x,v)-query(1,1,n,idx[v],idx[v]);\n\t\t\tif(cnt>0) upd(x,v);\n\t\t}\n\t}\n}\ninline int LCA(int x,int y) {\n\twhile(top[x]!=top[y]) dep[top[x]]>dep[top[y]]?x=fa[top[x]]:y=fa[top[y]];\n\treturn dep[x]<dep[y]?x:y;\n}\ninline int dis(int x,int y) {\n\treturn (dep[x]+dep[y]-(dep[LCA(x,y)]<<1));\n}\nint main() {\n\tscanf(\"%d %d\",&n,&m);\n\trep(i,1,n) bcj[i]=i;\n\trep(i,1,m) {\n\t\tscanf(\"%d %d\",&a,&b); add(a,b);\n\t\tfx=find(a); fy=find(b);\n\t\tbcj[fy]=fx;\n\t}\n\trep(i,1,n) {\n\t\tif(dep[i]) continue;\n\t\tdfs1(i,0); dfs2(i,i); dfs3(i); dfs4(i);\n\t}\n\tscanf(\"%d\",&q);\n\trep(i,1,q) {\n\t\tscanf(\"%d %d\",&a,&b);\n\t\tint lca=LCA(a,b);\n\t\tif(find(a)!=find(b)) puts(\"No\");\n\t\telse {\n\t\t\tif(dis(a,b)&1) puts(\"Yes\");\n\t\t\telse if((qry(a,b)-query(1,1,n,idx[lca],idx[lca]))>0) puts(\"Yes\");\n\t\t\telse puts(\"No\");\n\t\t}\n\t}\n}\n```",
        "postTime": 1598236854,
        "uid": 64729,
        "name": "KJGKMTZB",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF97E \u3010Leaders\u3011"
    },
    {
        "content": "\u8003\u8651\u8dd1\u51fa dfs \u6811\u3002\u5982\u679c\u4e24\u4e2a\u70b9\u5728 dfs \u6811\u4e0a\u8def\u5f84\u672c\u8eab\u957f\u5ea6\u5c31\u662f\u5947\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u8d70\u8fc7\u53bb\u3002\n\n\u5426\u5219\uff0c\u76f8\u5f53\u4e8e\u53ef\u4ee5\u5728\u8fd9\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u6709\u4e24\u4e2a\u70b9 $u,v$ \uff0c\u53ef\u4ee5\u901a\u8fc7\u5728 $u$ \u79bb\u5f00 dfs \u6811\u4e0a\u7684\u8def\u5f84\u7136\u540e\u4ece $v$ \u56de\u6765\u7ee7\u7eed\u8d70\u5230\u53e6\u4e00\u4e2a\u70b9\u7684\u65b9\u5f0f\u6539\u53d8\u5947\u5076\u6027\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u4e2a\u6761\u4ef6\u7b49\u4ef7\u4e8e $u,v$ \u4e4b\u95f4\u7684\u8def\u5f84\u5b58\u5728\u4e8e\u4e00\u4e2a\u5947\u73af\u4e0a\u3002\u540c\u65f6\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u7ed3\u8bba\uff0c\u4e00\u4e2a\u70b9\u53cc\uff08\u56e0\u4e3a\u8fd9\u9898\u8981\u6c42\u70b9\u4e0d\u76f8\u4ea4\uff09\u5185\u90e8\u5982\u679c\u6709\u4e00\u4e2a\u5947\u73af\uff0c\u90a3\u4e48\u70b9\u53cc\u5185\u90e8\u4efb\u4f55\u4e24\u4e2a\u70b9\u90fd\u5904\u5728\u4e00\u4e2a\u5947\u73af\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u7ed9\u6240\u6709\u70b9\u53cc\u5185\u6709\u5947\u73af\u7684\u70b9\u6253\u4e2a\u6807\u8bb0\uff0c\u7136\u540e\u6811\u4e0a\u5dee\u5206\uff0c\u8be2\u95ee\u7684\u65f6\u5019\u5c31\u8be2\u95ee\u4e00\u4e0b\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u662f\u5426\u6709\u70b9\u5904\u4e8e\u70b9\u53cc\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd8\u662f\u4f1a\u51fa\u73b0\u4e00\u4e9b\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u592a\u5bf9\u7684\u60c5\u51b5\u3002\n\n![4YW71N@8_JFEUOTY_3__4JX.png](https://i.loli.net/2020/06/09/W5apnxLPhXVNY24.png)\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fdb\u5165\u4e00\u4e2a\u70b9\u53cc\u4e86\u4e4b\u540e\u6ca1\u529e\u6cd5\u901a\u8fc7\u4e0d\u7ecf\u8fc7\u91cd\u590d\u70b9\u8dd1\u51fa\u6765\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u8fdb\u5165\u4e00\u4e2a\u70b9\u53cc\u7684\u70b9\u4e0d\u6807\u8bb0\u4e3a\u5728\u8fd9\u4e2a\u70b9\u53cc\u4e4b\u5185\u3002\u8fd9\u6837\u64cd\u4f5c\u540e dfs \u6811\u8def\u5f84\u4e0a\u7684\u90a3\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u8d21\u732e\u3002\u56e0\u4e3a\u8fd9\u662f dfs \u6811\uff0c\u505a tarjan \u7684\u65f6\u5019\u5fc5\u7136\u5148\u4f1a\u8dd1 dfs \u6811\u8fb9\uff0c\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u90a3\u4e2a\u70b9\u53cc\u4e00\u5b9a\u662f\u5728\u8dd1\u8fd9\u4e2a\u70b9\u8bbf\u95ee\u5230\u7684\u3002\n\n\u4e8e\u662f\u5728\u4e0a\u9762\u90a3\u79cd\u60c5\u51b5\uff0c\u8def\u5f84\u4e0a\u7684\u70b9\u4e0d\u4f1a\u9020\u6210\u8d21\u732e\u3002\u4f46\u662f\u5982\u679c\u4e00\u4e2a\u5947\u73af\u80fd\u4f5c\u4e3a\u8ba9\u957f\u5ea6\u53d8\u6210\u5947\u6570\u7684\uff0c\u4e5f\u5c31\u662f\u5728\u8def\u5f84\u4e0a\u65e2\u53ef\u4ee5\u8fdb\u6709\u53ef\u4ee5\u51fa\uff0c\u90a3\u4e48\u5728\u8fd9\u4e2a\u8def\u5f84\u4e0a\u80af\u5b9a\u5b58\u5728\u81f3\u5c11\u4e24\u4e2a\u70b9\uff0c\u5728\u8fd9\u4e2a\u70b9\u53cc\u5185\u90e8\uff0c\u6240\u4ee5\u80af\u5b9a\u662f\u6709\u8d21\u732e\u7684\u3002\n\n\u540c\u65f6\u8fd8\u5f97\u9664\u53bb LCA \u7684\u8d21\u732e\uff1a\n\n![image.png](https://i.loli.net/2020/06/09/KDwzVdoTqBxeA32.png)\n\n\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\uff0cLCA \u786e\u5b9e\u4e0d\u662f\u8bbf\u95ee\u5230\u6240\u5728\u70b9\u53cc\u7684\u70b9\uff0c\u4f46\u662f\u4e00\u6837\u4e0d\u80fd\u901a\u8fc7\u4e0a\u9762\u90a3\u4e2a\u8def\u5f84\u6539\u53d8\u5947\u5076\u3002\u8fd9\u79cd\u60c5\u51b5\u5f88\u597d\u89e3\u51b3\uff0c\u4e0d\u8ba1\u7b97 LCA \u7684\u8d21\u732e\u5373\u53ef\u3002\u5982\u679c\u4e00\u4e2a\u4e0e LCA \u6709\u5173\u7684\u5947\u73af\u53ef\u4ee5\u88ab\u7528\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\u4e00\u5b9a\u4e5f\u8fd8\u6709\u4e00\u4e2a\u70b9\u5728\u8def\u5f84\u4e0a\u3002\n\n\uff08\u597d\u50cf\u8fd8\u6709\u4e0d\u9700\u8981 tarjan \u6c42\u70b9\u53cc\u76f4\u63a5\u6574\u5947\u73af\u7684\u505a\u6cd5\uff0c\u4f46\u7ec6\u8282\u611f\u89c9\u53ef\u80fd\u6bd4\u8fd9\u4e2a\u8fd8\u591a\uff09\n\n```cpp\n#include \"iostream\"\n#include \"algorithm\"\n#include \"cstring\"\n#include \"cstdio\"\n#include \"cmath\"\n#include \"vector\"\n#include \"map\"\n#include \"set\"\n#include \"queue\"\nusing namespace std;\n#define MAXN 1000006\n//#define int long long\n#define rep(i, a, b) for (int i = (a), i##end = (b); i <= i##end; ++i)\n#define per(i, a, b) for (int i = (a), i##end = (b); i >= i##end; --i)\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define vi vector<int>\n#define all(x) (x).begin() , (x).end()\n#define mem( a ) memset( a , 0 , sizeof a )\ntypedef long long ll;\nint n , m , q;\nvi G[MAXN];\n \nint dfn[MAXN] , low[MAXN] , g[MAXN][19] , clo , stk[MAXN] , top , ins[MAXN] , dep[MAXN] , odd[MAXN];\nint od[MAXN] , bel[MAXN];\nvoid tarjan( int u , int f ) {\n\tbel[u] = bel[f];\n\tdfn[u] = low[u] = ++ clo , ins[u] = 1;\n\tstk[++ top] = u;\n\tfor( int v : G[u] ) {\n\t\tif( v == f ) continue;\n\t\tif( !dfn[v] ) {\n\t\t\tg[v][0] = u;\n\t\t\trep( k , 1 , 18 ) if( g[g[v][k-1]][k-1] ) g[v][k] = g[g[v][k-1]][k-1]; else break;\n\t\t\tdep[v] = dep[u] + 1;\n\t\t\ttarjan( v , u ) , low[u] = min( low[u] , low[v] );\n\t\t}\n\t\telse if( ins[v] ) low[u] = min( low[u] , dfn[v] ) , odd[u] |= ( ~( dep[v] + dep[u] ) & 1 );\n\t}\n\tif( dfn[u] == low[u] ) {\n\t\tint flg = 0 , t = top;\n\t\twhile( stk[t] != u && !flg ) flg = odd[stk[t]] , -- t;\n\t\twhile( stk[top] != u ) {\n\t\t\tod[stk[top]] |= flg;\n\t\t\tins[stk[top]] = 0;\n\t\t\t-- top;\n\t\t}\n\t\t-- top , ins[u] = 0;\n\t}\n}\n \ninline int lca( int u , int v ) {\n\tif( dep[u] < dep[v] ) u ^= v ^= u ^= v;\n\tif( dep[u] != dep[v] ) per( k , 18 , 0 ) if( dep[g[u][k]] >= dep[v] ) u = g[u][k];\n\tif( u == v ) return u;\n\tper( k , 18 , 0 ) if( g[u][k] != g[v][k] ) u = g[u][k] , v = g[v][k];\n\treturn g[u][0];\n}\n \nint S[MAXN];\nvoid dfs( int u , int f ) {\n\tS[u] += od[u];\n\tfor( int v : G[u] ) if( v != f && dep[v] == dep[u] + 1 ) S[v] += S[u] , dfs( v , u );\n}\n \ninline bool fuck( int u , int v ) {\n\tif( bel[u] != bel[v] || u == v ) return false;\n\tif( dep[u] + dep[v] & 1 ) return true;\n\treturn S[u] + S[v] - 2 * S[lca( u , v )] > 0;\n}\n \nvoid solve() {\n\tcin >> n >> m;\n\tint u , v;\n\trep( i , 1 , m ) {\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tG[u].pb( v ) , G[v].pb( u );\n\t}\n\trep( i , 1 , n ) if( !dfn[i] ) bel[i] = i , dep[i] = 1 , tarjan( i , i ) , dfs( i , i );\n\tcin >> q;\n\trep( i , 1 , q ) scanf(\"%d%d\",&u,&v) , puts( fuck( u , v ) ? \"Yes\" : \"No\" );\n}\n \nsigned main() {\n//    int T;cin >> T;while( T-- ) solve();\n    solve();\n}\n```\n\n",
        "postTime": 1591683395,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF97E \u3010Leaders\u3011"
    },
    {
        "content": "# CF97E Leaders\n\n## \u7b80\u8981\u9898\u610f\n\n\u7ed9\u4e00\u4e2a\u7b80\u5355\u65e0\u5411\u56fe\uff0c\u8be2\u95ee\u4e24\u4e2a\u70b9\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u7b80\u5355\u8def\u5f84\u3002\u7b80\u5355\u8def\u5f84\u5b9a\u4e49\u4e3a\u6ca1\u6709\u91cd\u590d\u70b9\u7684\u8def\u5f84\uff0c\u8def\u5f84\u957f\u5ea6\u5b9a\u4e49\u4e3a\u8fb9\u6570\u3002\n\n## \u70b9\u53cc\n\n\u8fd9\u91cc\u7b80\u5355\u8def\u5f84\u7684\u5b9a\u4e49\u662f\u6bcf\u4e2a\u70b9\u51fa\u73b0\u6700\u591a\u4e00\u6b21\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u4f18\u5148\u8003\u8651\u70b9\u53cc\u3002\u53d1\u73b0\u70b9\u53cc\u91cc\u9762\uff0c\u53ea\u8981\u6709\u81f3\u5c11\u4e00\u4e2a\u5947\u73af\uff0c\u4efb\u610f\u4e24\u70b9\u95f4\u90fd\u5b58\u5728\u5947\u8def\u5f84\u3002\n\n## \u70b9\u7684\u7c7b\u578b\n\n\u7ee7\u7eed\u63a2\u7d22\u53d1\u73b0\u5982\u679c\u6bcf\u4e2a\u70b9\u53cc\u5bf9\u5e94\u7684\u65b9\u70b9\u7684\u7236\u4eb2\u79f0\u4e3a \"\u4e3b\u5272\u70b9\"\uff0c\u90a3\u4e48\u4e00\u4e2a\u70b9\u53cc\u5185\uff0c\u9664\u4e86\u4e3b\u5272\u70b9\uff0c\u4e00\u4e2a\u70b9\u5230\u4e3b\u5272\u70b9\u6709\u4e09\u79cd\u72b6\u6001\uff0c\u6ca1\u6709\u5947\u8def\u5f84\uff0c\u5b58\u5728\u5947\u5076\u8def\u5f84\uff0c\u4ec5\u6709\u5947\u8def\u5f84\u3002\u5206\u522b\u79f0\u4e09\u79cd\u7c7b\u578b\u7684\u8282\u70b9\u4e3a\u5076\u70b9\uff0c\u5947\u5076\u70b9\uff0c\u5947\u70b9\u3002\n\n## \u6c42\u6bcf\u4e2a\u70b9\u7684\u7c7b\u578b\n\n\u53d1\u73b0\u6709\u5947\u73af\u7684\u70b9\u53cc\u91cc\uff0c\u4efb\u610f\u4e24\u70b9\u95f4\u90fd\u65e2\u6709\u5947\u8def\u5f84\uff0c\u4e5f\u6709\u5076\u8def\u5f84\uff0c\u6240\u4ee5\u9664\u4e3b\u5272\u70b9\u5916\u7684\u70b9\u90fd\u662f\u5947\u5076\u70b9\u3002\n\n\u5982\u679c\u6ca1\u6709\u5947\u73af\uff0c\u5219 BFS \u627e\u5230\u6bcf\u4e2a\u70b9\u5230\u4e3b\u70b9\u7684\u6700\u77ed\u8def\uff0c\u6700\u77ed\u8def\u7684\u5947\u5076\u6027\u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u5947\u5076\u6027\u3002\n\n\u5bf9\u4e8e\u627e\u5947\u73af\u548c\u6700\u77ed\u8def\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u4f1a\u88ab\u83ca\u82b1\u56fe\u5361\u5230 $O(n^2)$\uff0c\u501f\u52a9 [Calvincheng1231](https://www.luogu.com.cn/user/253946) \u7684\u9898\u89e3\u4e2d\u7684\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u5efa\u4e00\u4e2a\u65b0\u7684\u70b9\u53cc\u8fde\u901a\u56fe\u3002\n\n## \u70b9\u53cc\u5185\u7684\u8def\u5f84\n\n\u5bf9\u4e8e\u70b9\u53cc\u5185\u7684\u60c5\u51b5\uff0c\u4e24\u4e2a\u975e\u4e3b\u5272\u70b9\u7684\u70b9\u4e4b\u95f4\u6709\u7b80\u5355\u5947\u8def\u5f84\uff0c\u5f53\u4e14\u4ec5\u5f53\u6709\u81f3\u5c11\u4e00\u4e2a\u70b9\u662f\u5947\u5076\u70b9\uff0c\u6216\u6709\u4e00\u4e2a\u70b9\u662f\u5947\u70b9\u3002\n\n\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u53d6\u4e24\u4e2a\u70b9\u5230\u4e3b\u5272\u70b9\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u603b\u548c\u4e3a\u5947\u6570\uff0c\u628a\u91cd\u5408\u90e8\u5206\u5220\u9664\uff0c\u56e0\u4e3a\u5220\u9664\u4e00\u6761\u8fb9\uff0c\u76f8\u5f53\u4e8e\u5b83\u4e24\u6b21\u7ecf\u8fc7\u7684\u8d21\u732e\u90fd\u5220\u9664\u4e86\uff0c\u6240\u4ee5\u5947\u5076\u6027\u4e0d\u53d8\u3002\n\n\u5bf9\u4e8e\u70b9\u53cc\u5185\uff0c\u9664\u4e3b\u5272\u70b9\u5916\u7684\u4e00\u70b9\u5230\u4e3b\u5272\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u70b9\u53ea\u8981\u662f\u5947\u5076\u70b9\u6216\u5947\u70b9\uff0c\u5c31\u80fd\u627e\u5230\u4e00\u6761\u7b80\u5355\u5947\u8def\u5f84\u3002\n\n## \u70b9\u53cc\u95f4\u7684\u8def\u5f84\n\n\u63a5\u4e0b\u6765\u8ba8\u8bba\u4e00\u822c\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u70b9\u53cc\u95f4\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u7684\u5272\u70b9\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4f9d\u6b21\u8ba8\u8bba\u7aef\u70b9\u548c\u5272\u70b9\u95f4\u8def\u5f84\u7684\u60c5\u51b5\u5373\u53ef\u3002\u8fd9\u4e9b\u70b9\u5c06\u8def\u5f84\u5206\u6210\u4e86\u51e0\u6bb5\u3002\n\n\u56e0\u4e3a\u8fd9\u51e0\u6bb5\u5206\u522b\u5728\u4e0d\u540c\u7684\u70b9\u53cc\u5185\uff0c\u6240\u4ee5\u6bcf\u4e00\u6bb5\u7684\u60c5\u51b5\u5c31\u53ef\u4ee5\u5f53\u4f5c\u70b9\u53cc\u5185\u90e8\u7684\u60c5\u51b5\u6765\u8ba8\u8bba\uff0c\u5bf9\u4e8e\u65e2\u6709\u5947\u6570\u53c8\u6709\u5076\u6570\u8def\u5f84\u7684\u6bb5\uff0c\u6211\u4eec\u79f0\u5176\u4e3a\u5947\u5076\u6bb5\uff0c\u5bf9\u4e8e\u53ea\u6709\u5947\u6570\u8def\u5f84\u7684\u6bb5\uff0c\u79f0\u5947\u6bb5\uff0c\u6ca1\u6709\u5947\u6570\u8def\u5f84\u7684\u6bb5\uff0c\u79f0\u5076\u6bb5\u3002\n\n\u7c7b\u4f3c\u5730\uff0c\u6574\u6761\u8def\u7ecf\u5b58\u5728\u5947\u8def\u5f84\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e9b\u6bb5\u4e2d\u6709\u5947\u5076\u6bb5\uff0c\u6216\u8005\u8fd9\u4e9b\u6bb5\u4e2d\u7684\u5947\u6bb5\u6570\u91cf\u4e3a\u5947\u6570\u3002\n\n\u5bf9\u4e8e\u4e00\u6bb5\u8def\u5f84\uff0c\u5982\u679c\u5b83\u7684\u4e24\u7aef\u6709\u4e00\u7aef\u662f\u8def\u5f84\u6240\u5728\u70b9\u53cc\u7684\u4e3b\u5272\u70b9\uff0c\u90a3\u4e48\u53e6\u4e00\u4e2a\u7aef\u70b9\u7684\u7c7b\u578b\u5c31\u662f\u8fd9\u4e00\u6bb5\u7684\u7c7b\u578b\u3002\n\n\u5982\u679c\u4e24\u7aef\u90fd\u4e0d\u662f\u8def\u5f84\u6240\u5728\u70b9\u53cc\u7684\u4e3b\u5272\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e00\u6bb5\u5206\u6210\u4e24\u7aef\uff0c\u4e24\u6bb5\u7c7b\u578b\u5206\u522b\u662f\u4e24\u4e2a\u70b9\u7684\u7c7b\u578b\u3002\n\n## \u6811\u94fe\u5256\u5206\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u67e5\u8be2\u5706\u65b9\u6811\u4e0a\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u4e0d\u540c\u7c7b\u578b\u7684\u5706\u70b9\u6570\u91cf (\u9664\u53bb LCA)\u3002\u5c31\u80fd\u5f97\u5230\u8fd9\u4e9b\u6bb5\u7684\u7c7b\u578b\u6570\u91cf\uff0c\u7136\u540e $O(1)$ \u5224\u65ad\u5373\u53ef\u3002\n\n\u7528\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u5706\u65b9\u6811\uff0c\u652f\u6301\u67e5\u8be2\u8def\u5f84\u4e09\u79cd\u7c7b\u578b\u7684\u70b9\u7684\u6570\u91cf (\u5176\u5b9e\u5076\u70b9\u6570\u91cf\u548c\u7b54\u6848\u65e0\u5173\uff0c\u65e0\u9700\u7ef4\u62a4)\u3002\u7531\u4e8e\u65e0\u9700\u4fee\u6539\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u7528\u524d\u7f00\u548c\u67e5\u8be2\u533a\u95f4\u548c\u5373\u53ef\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(n + m + q\\log n)$\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\nunsigned m, M, n, q, Bd;\nunsigned A, B, C, D, t;\nunsigned STop(0), ETop(0), Hd, Tl;\nunsigned Cnt(0), CntCo(0), Ans[3];\nunsigned Sum[200005][2], Tmp(0);\nstruct Node;\nstruct NNode;\nstruct Edge {\n  Node* To, * Frm;\n  Edge* Nxt;\n}E[200005], *EStack[200005];\nstruct Node {\n  Edge* Fst;\n  NNode* Last;\n  Node* Fa, * Bro, * Son, * Heavy, * Top;\n  unsigned DFSr, Low, Dep, Size, BelC;\n  char Type;\n}N[200005], * Stack[100005], * CntN;\nstruct NEdge {\n  NNode* To;\n  NEdge* Nxt;\n}NE[400005], *CntNE(NE);\nstruct NNode{\n  NEdge* Fst;\n  Node* Old;\n  char Col, Dist;\n}NN[200005], * Q[200005], *CntNN(NN);\ninline void Tarjan(Node* x) {\n  x->Low = x->DFSr = ++Cnt, x->BelC = CntCo, Stack[++STop] = x;\n  Edge* Sid(x->Fst);\n  while (Sid) {\n    EStack[++ETop] = Sid;\n    if(Sid->To->DFSr) {\n      if(Sid->To->Fa) --ETop;\n      x->Low = min(x->Low, Sid->To->DFSr);\n    }\n    else {\n      unsigned LastTop(ETop);\n      Tarjan(Sid->To), x->Low = min(x->Low, Sid->To->Low);\n      if(Sid->To->Low == x->DFSr) {\n        Node* Cur(++CntN);\n        Cur->Fa = x, Cur->Bro = x->Son, x->Son = Cur;\n        x->Last = Cur->Last = ++CntNN, CntNN->Old = x; \n        do {\n          Stack[STop]->Bro = Cur->Son, Cur->Son = Stack[STop];\n          Stack[STop]->Last = ++CntNN, (CntNN->Old = Stack[STop])->Fa = Cur;\n        } while (Stack[STop--] != Sid->To);\n        NNode * LiF, * LiT;\n        do {\n          LiF = EStack[ETop]->Frm->Last, LiT = EStack[ETop]->To->Last;\n          (++CntNE)->Nxt = LiF->Fst, LiF->Fst = CntNE, CntNE->To = LiT;\n          (++CntNE)->Nxt = LiT->Fst, LiT->Fst = CntNE, CntNE->To = LiF;\n        } while ((ETop--) ^ LastTop);\n      }\n    }\n    Sid = Sid->Nxt;\n  }\n}\ninline void BFS(Node* x) {\n  char Flg(0);\n  Hd = Tl = 0, (Q[++Tl] = x->Last)->Col = 1, x->Last->Dist = 1;\n  while (Hd ^ Tl) {\n    NNode* Cur(Q[++Hd]);\n    NEdge* Sid(Cur->Fst);\n    while (Sid) {\n      Sid->To->Col |= (Cur->Col ^ 3);\n      if(Sid->To->Col == 3) {Flg = 1; break;}\n      if(!(Sid->To->Dist)) (Q[++Tl] = Sid->To)->Dist = Cur->Dist + 1;\n      Sid = Sid->Nxt;\n    }\n    if(Flg) break;\n  } \n  if(Flg) x->Type = 2;\n  else\n    for (unsigned i(2); i <= Hd; ++i)\n      Q[i]->Old->Type = ((Q[i]->Dist & 1) ? 0 : 1);\n}\ninline void PreDFS (Node* x) {\n  x->Size = 1;\n  Node* Cur(x->Son);\n  unsigned Mx(0);\n  while (Cur) {\n    Cur->Dep = x->Dep + 1, PreDFS(Cur), x->Size += Cur->Size;\n    if(Cur->Size > Mx) x->Heavy = Cur, Mx = Cur->Size;\n    Cur = Cur->Bro;\n  }\n}\ninline void DFS (Node* x) {\n  x->DFSr = ++Cnt;\n  if(x->Type) Sum[Cnt][x->Type - 1] = 1;\n  if(!(x->Heavy)) return;\n  x->Heavy->Top = x->Top, DFS(x->Heavy);\n  Node* Cur(x->Son);\n  while (Cur) {\n    if(Cur != x->Heavy) Cur->Top = Cur, DFS(Cur);\n    Cur = Cur->Bro;\n  }\n}\ninline char Ask(Node* x, Node* y) {\n  Ans[1] = Ans[2] = 0;\n  while (x->Top != y->Top) {\n    if(x->Top->Dep < y->Top->Dep) swap(x, y);\n    C = x->Top->DFSr, D = x->DFSr, x = x->Top->Fa;\n    Ans[1] += Sum[D][0] - Sum[C - 1][0];\n    Ans[2] += Sum[D][1] - Sum[C - 1][1];\n  }\n  if(x->Dep < y->Dep) swap(x, y);\n  C = y->DFSr, D = x->DFSr, x = y;\n  Ans[1] += Sum[D][0] - Sum[C - 1][0];\n  Ans[2] += Sum[D][1] - Sum[C - 1][1];\n  --Ans[x->Type];\n  if(Ans[2] || (Ans[1] & 1)) return 1;\n  return 0;\n}\nsigned main() {\n  n = RD(), M = ((m = RD()) << 1), CntN = N + n;\n  for (unsigned i(0); i < M; i += 2) {\n    A = RD(), B = RD();\n    E[i].Nxt = N[A].Fst, N[A].Fst = E + i;\n    E[i ^ 1].Nxt = N[B].Fst, N[B].Fst = E + (i ^ 1);\n    E[i].To = N + B, E[i].Frm = N + A;\n    E[i ^ 1].To = N + A, E[i ^ 1].Frm = N + B;\n  }\n  for (unsigned i(1); i <= n; ++i) if(!(N[i].DFSr)) ++CntCo, Tarjan(N + i);\n  Cnt = 0;\n  for (Node* i(N + n + 1); i <= CntN; ++i) BFS(i);\n  for (unsigned i(1); i <= n; ++i) if(N[i].Fa && N[i].Fa->Type) N[i].Type = 2;\n  for (unsigned i(1); i <= n; ++i) if(!N[i].Size) N[i].Dep = 1, PreDFS(N + i);\n  for (unsigned i(1); i <= n; ++i) if(!N[i].Top) N[i].Top = N + i, DFS(N + i);\n  for (unsigned i(1); i <= Cnt; ++i) Sum[i][0] += Sum[i - 1][0], Sum[i][1] += Sum[i - 1][1];\n  for (unsigned i(RD()); i; --i) {\n    A = RD(), B = RD(), --q;\n    if(A == B) {printf(\"No\\n\");continue;}\n    if(N[A].BelC ^ N[B].BelC) {printf(\"No\\n\");continue;}\n    printf(Ask(N + A, N + B) ? \"Yes\\n\" : \"No\\n\");\n  } \n  return Wild_Donkey;\n}\n```",
        "postTime": 1632623427,
        "uid": 143771,
        "name": "\u6bd4\u5229\u2642\u6d77\u7075\u987f",
        "ccfLevel": 8,
        "title": "CF97E Leaders"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://blog.calvincheng1231.org.cn/sols/193.html)\n\n## \u5206\u6790\n\u9996\u5148\u6bd4\u8f83\u663e\u7136\u7684\u60f3\u6cd5\u662f\u968f\u4fbf\u627e\u4e00\u68f5\u751f\u6210\u6811\uff0c\u7136\u540e $u$ \u548c $v$ \u4e4b\u95f4\u5b58\u5728\u5947\u6570\u957f\u5ea6\u8def\u5f84\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3\u4e0b\u5217\u4e24\u4e2a\u6761\u4ef6\u4e4b\u4e00\uff1a\n\n* $u$ \u548c $v$ \u5728\u751f\u6210\u6811\u4e0a\u7684\u8def\u5f84\u957f\u5ea6\u4e3a\u5947\u6570\n* $u$ \u548c $v$ \u5728\u751f\u6210\u6811\u4e0a\u7684\u8def\u5f84\u4e2d\uff0c\u5b58\u5728\u4e00\u6761\u8fb9\u5728\u539f\u56fe\u4e2d\u7684\u4e00\u4e2a\u5947\u73af\u4e2d\u3002\n\n\u53ea\u8981\u63d0\u524d\u77e5\u9053\u751f\u6210\u6811\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u662f\u5426\u5728\u5947\u73af\u4e2d\uff0c\u7136\u540e\u5728\u6811\u4e0a\u5c31\u968f\u4fbf\u7528\u4ec0\u4e48\u7b97\u6cd5\u5904\u7406\u90fd\u884c\u3002\n\n\u5982\u4f55\u5224\u65ad\u4e00\u6761\u8fb9\u662f\u5426\u5728\u5947\u73af\u4e2d\u5462\uff1f\n\n\u9996\u5148\uff0c\u4e24\u4e2a\u70b9\u53cc\u4e4b\u95f4\u80af\u5b9a\u6ca1\u6709\u73af\u3002\n\n\u800c\u5982\u679c\u4e00\u4e2a\u70b9\u53cc\u4e2d\u5b58\u5728\u4e00\u4e2a\u5947\u73af\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u53cc\u4e2d\u4efb\u610f\u4e00\u6761\u8fb9\u90fd\u5728\u4e00\u4e2a\u5947\u73af\u4e2d\uff01\n\n\u9009\u53d6\u4e24\u4e2a\u5947\u73af\u4e0a\u7684\u4e24\u70b9 $x,y$\uff0c\u5411\u5916\u6269\u5c55\u51fa\u4e00\u6761\u8def\u5f84\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/cyar66g6.png)\n\n\u6bd4\u5982\u4e0a\u9762\u8fd9\u5f20\u56fe\u4e2d\uff0c\u5947\u73af\u4e3a 1-4-5-1\uff0c\u9009\u53d6 $x=1,y=4$\uff0c\u5411\u5916\u6269\u5c55\u51fa\u8def\u5f84 1-2-3-4\u3002\n\n\u4e00\u5b9a\u5b58\u5728\u4e00\u6761\u540c\u65f6\u7ecf\u8fc7 $x$ \u548c $y$ \u7684\u5947\u73af\u3002\u6240\u4ee5\uff0c\u5b58\u5728\u4e24\u6761 $x$ \u5230 $y$ \u7684\u8def\u5f84\uff0c\u4e00\u6761\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u4e00\u6761\u957f\u5ea6\u4e3a\u5947\u6570\u3002\n\n\u65b0\u6269\u5c55\u51fa\u7684\u8def\u5f84\u4e00\u5b9a\u53ef\u4ee5\u548c\u7740\u4e24\u6761\u8def\u5f84\u4e2d\u7684\u4e00\u6761\u7ec4\u6210\u4e00\u4e2a\u5947\u73af\u3002\u5728\u4e0a\u56fe\u4e2d\uff0c\u8fd9\u4e2a\u73af\u662f 1-2-3-4-5-1\u3002\n\n\u6545\u4e00\u6761\u8fb9\u5728\u5947\u73af\u4e2d\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u6240\u5728\u7684\u70b9\u53cc\u4e2d\u5b58\u5728\u5947\u73af\u3002\n\n\u53ef\u4ee5\u5728 Tarjan \u65f6\u627e\u5230\u70b9\u53cc\u4e2d\u7684\u6240\u6709\u8fb9\uff0c\u91c7\u7528\u4e8c\u5206\u56fe\u7684\u65b9\u5f0f\u5224\u65ad\u5947\u73af\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u3002\n\n## update: \u89e3\u51b3\n\u5224\u65ad\u7684\u65f6\u5019\u5e94\u8be5\u8981\u628a V-DCC \u5355\u72ec\u62ff\u51fa\u6765\u5efa\u65b0\u56fe\u5224\u65ad\uff0c\u66b4\u529b\u904d\u5386\u51fa\u8fb9\u53ef\u4ee5\u88ab\u5361\u6210\u5e73\u65b9\uff0c\u4e0b\u9762\u662f\u6570\u636e\u751f\u6210\u5668\uff1a\n\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    freopen(\"CF97E.in\", \"w\", stdout);\n    puts(\"66667 99999\");\n    for (int i = 1; i <= 33333; i++)\n        printf(\"1 %d\\n1 %d\\n%d %d\\n\", i * 2, i * 2 + 1, i * 2, i * 2 + 1);\n    puts(\"0\");\n    return 0;\n}\n```\n\n\u8fd9\u4efd\u4ee3\u7801\u4f1a\u751f\u6210 33333 \u4e2a\u4e09\u5143\u73af\u3002\n\n\u88ab hack \u7684\u9898\u89e3\uff1a\n\n* [\u6728xx\u6728\u5927\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/flyingfan/cf97e-leaders-dian-shuang-pan-ji-huan-shu-shang-ci-fen-post)\uff0c\u5f00 O2 \u540e\u8981\u8dd1 5s\n* [whhsteven\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/118109/cf97e)\uff0c\u5f00 O2 \u540e\u8981\u8dd1 4s\n\n\u4e0b\u9762\u7ed9\u51fa\uff08\u6211\u8ba4\u4e3a\uff09\u6b63\u786e\u7684\u5b9e\u73b0\uff1a\n\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n\nusing namespace std;\n\nconst int N = 100005, M = 200005, LOG = 17;\nint n, m, q;\nint head[N], ver[M], nxt[M], tot = 1, v[N];\nint _head[N], _ver[M], _nxt[M], _tot = 1;\nint dfn[N], low[N], dfsNum, stkNode[N], topNode, stkEdge[M >> 1][3], topEdge, color[N], checkNum;\nint dep[N], fa[N][LOG], rt[N], root;\nbool ok[M >> 1], flag[N][LOG], vis[M >> 1];\n\nvoid addedge(int x, int y) { ver[++tot] = y, nxt[tot] = head[x], head[x] = tot; }\nvoid _addedge(int x, int y) { _ver[++_tot] = y, _nxt[_tot] = _head[x], _head[x] = _tot; }\n\nbool check(int cur)\n{\n    v[cur] = checkNum;\n    for (int i = _head[cur]; i; i = _nxt[i])\n    {\n        int to = _ver[i];\n        if (v[to] == checkNum)\n        {\n            if (color[to] == color[cur])\n                return false;\n            continue;\n        }\n        color[to] = 3 - color[cur];\n        if (!check(to))\n            return false;\n    }\n    return true;\n}\n\nvoid Tarjan(int cur)\n{\n    low[cur] = dfn[cur] = ++dfsNum, stkNode[++topNode] = cur;\n    for (int i = head[cur]; i; i = nxt[i])\n    {\n        int curTop = topEdge, to = ver[i];\n        if (!vis[i >> 1])\n            vis[i >> 1] = true, topEdge++, stkEdge[topEdge][0] = (i >> 1), stkEdge[topEdge][1] = cur, stkEdge[topEdge][2] = to;\n        if (!dfn[to])\n        {\n            Tarjan(to);\n            low[cur] = min(low[cur], low[to]);\n            if (low[to] >= dfn[cur])\n            {\n                _head[cur] = _head[to] = 0, _tot = 1;\n                while (stkNode[topNode] != to)\n                    _head[stkNode[topNode]] = 0, topNode--;\n                topNode--;\n                for (int j = curTop + 1; j <= topEdge; j++)\n                    _addedge(stkEdge[j][1], stkEdge[j][2]);\n                color[cur] = 1, checkNum++;\n                if (!check(cur))\n                    for (int j = curTop + 1; j <= topEdge; j++)\n                        ok[stkEdge[j][0]] = true;\n                topEdge = curTop;\n            }\n        }\n        else\n            low[cur] = min(low[cur], dfn[to]);\n    }\n}\n\nvoid Tarjan()\n{\n    for (int i = 1; i <= n; i++)\n        if (!dfn[i])\n            Tarjan(i);\n}\n\nvoid dfs(int cur)\n{\n    rt[cur] = root;\n    for (int i = head[cur]; i; i = nxt[i])\n    {\n        int to = ver[i];\n        if (rt[to])\n            continue;\n        dep[to] = dep[cur] + 1, fa[to][0] = cur, flag[to][0] = ok[i >> 1];\n        for (int j = 1; j < LOG; j++)\n            fa[to][j] = fa[fa[to][j - 1]][j - 1], flag[to][j] = flag[to][j - 1] || flag[fa[to][j - 1]][j - 1];\n        dfs(to);\n    }\n}\n\nbool query(int x, int y)\n{\n    if (rt[x] != rt[y] || x == y)\n        return false;\n    if ((dep[x] + dep[y]) & 1)\n        return true;\n    if (dep[x] < dep[y])\n        swap(x, y);\n    for (int i = LOG - 1; i >= 0; i--)\n        if (dep[fa[x][i]] >= dep[y])\n        {\n            if (flag[x][i])\n                return true;\n            x = fa[x][i];\n        }\n    if (x == y)\n        return false;\n    for (int i = LOG - 1; i >= 0; i--)\n        if (fa[x][i] != fa[y][i])\n        {\n            if (flag[x][i] || flag[y][i])\n                return true;\n            x = fa[x][i], y = fa[y][i];\n        }\n    return flag[x][0] || flag[y][0];\n}\n\ntemplate <class T>\nvoid read(T &ret)\n{\n    ret = 0;\n    char ch = getchar(), flag = 0;\n    while ((ch < '0' || ch > '9') && ch != '-')\n        ch = getchar();\n    if (ch == '-')\n        ch = getchar(), flag = 1;\n    while (ch >= '0' && ch <= '9')\n        ret = ret * 10 + ch - '0', ch = getchar();\n    if (flag)\n        ret = -ret;\n}\n\nint main()\n{\n    read(n), read(m);\n    for (int i = 1; i <= m; i++)\n    {\n        int x, y;\n        read(x), read(y);\n        addedge(x, y), addedge(y, x);\n    }\n    Tarjan();\n    for (int i = 1; i <= n; i++)\n    {\n        if (rt[i])\n            continue;\n        for (int j = 0; j < LOG; j++)\n            fa[i][j] = 1;\n        root = i;\n        dfs(i);\n    }\n    read(q);\n    while (q--)\n    {\n        int x, y;\n        read(x), read(y);\n        if (query(x, y))\n            puts(\"Yes\");\n        else\n            puts(\"No\");\n    }\n    return 0;\n}\n```",
        "postTime": 1630411082,
        "uid": 253946,
        "name": "ClHg2",
        "ccfLevel": 7,
        "title": "CF97E \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9898\u8c03\u5f97\u771f\u7684\u4eba\u90fd\u9ebb\u6389\u4e86\u3002\u6574\u6574 $156$ \u884c\u6123\u662f\u7ed9\u8c03\u4e86 $2h$\u3002\n\n\u9996\u5148\u53ef\u4ee5\u8003\u8651\u6574\u4e00\u68f5\u751f\u6210\u6811\uff0c\u8dd1\u6811\u4e0a\u8def\u5f84\u3002\n\n\u5982\u679c\u6811\u4e0a\u8def\u5f84\u672c\u8eab\u5c31\u662f\u5947\u6570\u76f4\u63a5\u8fc7\uff0c\u53cd\u4e4b\u5219\u5fc5\u5b9a\u6709\u81f3\u5c11\u4e00\u4e2a\u5947\u73af\u8986\u76d6\u4e86\u81f3\u5c11\u4e00\u6761\u6811\u8fb9\uff08\u6539\u53d8\u5947\u5076\u6027\uff09\u3002\u53c8\u8003\u8651\u5230\u5947\u73af\u5fc5\u7136\u662f\u70b9\u53cc\uff0c\u6240\u4ee5\u4e0a\u70b9\u53cc\u3002\u81f3\u4e8e\u5224\u65ad\u8fd9\u4e2a\u70b9\u53cc\u6709\u6ca1\u6709\u5947\u73af\u53ef\u4ee5\u501f\u9274\u4e8c\u5206\u56fe\u5224\u5b9a\u7684\u505a\u6cd5\uff08\u6ce8\u610f\u5230\u6709\u5947\u73af\u7684\u70b9\u53cc\u5411\u5916\u62d3\u5c55\u4f1a\u65f6\u6bcf\u6761\u8fb9\u90fd\u5728\u4e00\u4e2a\u5947\u73af\u91cc\uff09\uff0c\u7528\u67d3\u8272\u5224\u65ad\uff0c\u7136\u540e\u5728 LCA \u91cc\u987a\u8def\u628a\u662f\u5426\u5728\u5947\u73af\u4e5f\u500d\u589e\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u505a\u70b9\u53cc\u7684\u5854\u5c16\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u9664\u4e86\u70b9\u6808\u4e4b\u5916\u53ef\u4ee5\u989d\u5916\u5f00\u4e00\u4e2a\u8fb9\u6808\u8bb0\u5f55\u8fb9\u3002\n\n\u5751\u70b9\uff1a\u8be2\u95ee\u4e00\u5b9a\u8981\u5224\u8054\u901a\uff0c\u4e0d\u7136\u5c31\u5bc4\uff08\u8fd9\u91cc\u6211\u8c03\u4e86\u51e0\u4e2a\u4e16\u7eaa\uff08bushi\uff09\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,low[100005],dfn[100005],tot,root,cnt,sum,d[100005],dp[100005][20];\nvector<pair<int,int> >nbr[100005];\nvector<int>nbr2[100005];\nstruct node{\n\tint e,s,t;\n}; //\u8bb0\u5f55\u8fb9\uff08\u6808\uff09\nstack<int>stk;//\u70b9\u6808\nstack<node>stk2;//\u8fb9\u6808\nint col[100005],a[100005];//\u67d3\u8272\u548c\u8fde\u901a\u5757\nbool tag[200005][21],tagg[200005],vis[100005];//\u5224\u65ad\u662f\u5426\u5728\u5947\u73af \nbool check(int cur){//\u4e8c\u5206\u56fe\u67d3\u8272\n\ta[cur]=sum;\n\tfor(int i=0;i<nbr2[cur].size();++i){\n\t\tint to=nbr2[cur][i];\n\t\tif(a[to]==sum){\n\t\t\tif(col[to]==col[cur])return 0;\n\t\t\tcontinue;\n\t\t}\n\t\tcol[to]=3-col[cur];\n\t\tif(!check(to))return 0;\n\t}\n\treturn 1;\n}   \nvoid tarjan(int cur){\n\tdfn[cur]=low[cur]=++tot;\n\tstk.push(cur);\n\tfor(int i=0;i<nbr[cur].size();++i){\n\t\tint to=nbr[cur][i].first,e=nbr[cur][i].second;\n\t\tnode crr=stk2.top();\n\t\tif(!vis[e]){\n\t\t\tstk2.push({e,cur,to});\n\t\t\tvis[e]=1;\n\t\t}\n\t\tif(!dfn[to]){\n\t\t\ttarjan(to);\n\t\t\tlow[cur]=min(low[cur],low[to]);\n\t\t\tif(low[to]<dfn[cur])continue;\n\t\t\tint x=0;\n\t\t\tnbr2[cur].clear();\n\t\t\tnbr2[to].clear();\n\t\t\twhile(!stk.empty()&&x!=to){\n\t\t\t\tx=stk.top();\n\t\t\t\tstk.pop();\n\t\t\t\tnbr2[x].clear();\n\t\t\t}//\u5efa\u65b0\u56fe\u8dd1\u4e8c\u5206\u56fe\n\t\t\tnode y;\n\t\t\tqueue<node>q;\n\t\t\twhile(!stk2.empty()){\n\t\t\t\ty=stk2.top();\n\t\t\t\tif(y.e==crr.e&&y.s==crr.s&&y.t==crr.t)break;\n\t\t\t\tstk2.pop();\n\t\t\t\tq.push(y);\n\t\t\t\tnbr2[y.s].push_back(y.t);\n\t\t\t\tnbr2[y.t].push_back(y.s);\n\t\t\t}\n\t\t\tsum++;\n\t\t\tif(!check(cur)){//\u6253\u6807\u8bb0\uff0c\u5728\u5947\u73af\u91cc\n\t\t\t\twhile(!q.empty()){\n\t\t\t\t\tnode xx=q.front();\n\t\t\t\t\ttagg[xx.e]=1;\n\t\t\t\t\tq.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tlow[cur]=min(low[cur],dfn[to]);\t\n\t\t}\n\t} \n}   \nvoid before(int cur){\n\ta[cur]=sum;//\u5e38\u89c4LCA\n\tfor(int i=0;i<nbr[cur].size();++i){\n\t\tpair<int,int>to=nbr[cur][i];\n\t\tif(a[to.first])continue;\n\t\td[to.first]=d[cur]+1;\n\t\tdp[to.first][0]=cur;\n\t\tif(tagg[to.second])tag[to.first][0]=1;\n\t\tfor(int j=1;j<=19;++j){\n\t\t\tdp[to.first][j]=dp[dp[to.first][j-1]][j-1];\n\t\t\ttag[to.first][j]=tag[to.first][j-1]|tag[dp[to.first][j-1]][j-1];//\u987a\u8def\u7ef4\u62a4tag\n\t\t}\n\t\tbefore(to.first);\n\t}\n\treturn;\n}   \nint LCA(int u,int v){\n\tif(d[u]>d[v])swap(u,v);\n\tfor(int i=19;i>=0;i--){\n\t\tif((1<<i)<=d[v]-d[u]){\n\t\t\tv=dp[v][i];\n\t\t}\n\t}\n\tif(u==v)return u;\n\tfor(int i=19;i>=0;i--){\n\t\tif(dp[u][i]!=dp[v][i]){\n\t\t\tu=dp[u][i];\n\t\t\tv=dp[v][i];\n\t\t}\n\t}\n\treturn dp[u][0];\n}   \nint calc(int u,int v){//\u7b97\u8ddd\u79bb\uff0c\u8bb0\u5f97\u5224\u8054\u901a\u4e0d\u5408\u6cd5\uff01\n\tif(a[u]!=a[v]||u==v)return 0;\n\tint lca=LCA(u,v);\n\treturn d[u]+d[v]-2*d[lca];\n}   \nbool ask(int u,int v){//\u5224\u5947\u73af\n\tif(a[u]!=a[v]||u==v)return 0;\n\tif(d[u]>d[v])swap(u,v);\n\tfor(int i=19;i>=0;i--){\n\t\tif((1<<i)<=d[v]-d[u]){\n\t\t\tif(tag[v][i])return 1;\n\t\t\tv=dp[v][i];\n\t\t}\n\t}\n\tif(u==v)return 0;\n\tfor(int i=19;i>=0;i--){\n\t\tif(dp[u][i]!=dp[v][i]){\n\t\t\tif(tag[u][i]||tag[v][i])return 1;\n\t\t\tu=dp[u][i];\n\t\t\tv=dp[v][i];\n\t\t}\n\t}\n\treturn tag[u][0]|tag[v][0];\n}   \nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;++i){\n\t\tint u,v;\n\t\tcin>>u>>v;\n\t\tif(u==v)continue;\n\t\tnbr[u].push_back(make_pair(v,i));\n\t\tnbr[v].push_back(make_pair(u,i));\n\t}\n\tstk2.push({0,0,0});//\u5148\u52a0\uff0c\u4e0d\u7136\u76f4\u63a5\u53d6top\u4f1aRE\n\tfor(int i=1;i<=n;++i){\n\t\tif(!dfn[i])tarjan(i);//\u4e0d\u4e00\u5b9a\u8054\u901a\n\t}\n\tmemset(a,0,sizeof(a));\n\tsum=0;\n\tfor(int i=1;i<=n;++i)if(!d[i])++sum,d[i]=1,before(i);\n\tint q;\n\tcin>>q;\n\tfor(int i=1;i<=q;++i){\n\t\tint u,v;\n\t\tcin>>u>>v;\n\t\tif(calc(u,v)%2==1||ask(u,v)){\n\t\t\tcout<<\"Yes\\n\";\n\t\t}\n\t\telse cout<<\"No\\n\";\n\t}\n\treturn 0;\n}   \n```\n",
        "postTime": 1667964662,
        "uid": 359614,
        "name": "Forever1507",
        "ccfLevel": 6,
        "title": "CF97E\u9898\u89e3"
    },
    {
        "content": "### \u9898\u76ee\u94fe\u63a5\n\n\u6d1b\u8c37\uff1a[CF97E](https://www.luogu.com.cn/problem/CF97E)\n\nCodeforces\uff1a[CF97E](https://codeforces.com/problemset/problem/97/E)\n\n&nbsp;\n\n### \u9898\u610f\u7b80\u8ff0\n\n- \u7ed9\u5b9a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6ca1\u6709\u91cd\u8fb9\u548c\u81ea\u73af\u3002\n\n- \u6bcf\u6b21\u8be2\u95ee\u70b9 $u,v$ \u95f4\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u7b80\u5355\u8def\u5f84\u3002\n\n- \u8fd9\u91cc\u7b80\u5355\u8def\u5f84\u5b9a\u4e49\u4e3a\u4e0d\u7ecf\u8fc7\u91cd\u590d\u70b9\u7684\u8def\u5f84\u3002\n\n&nbsp;\n\n### \u9898\u89e3\n\n**\u9996\u5148 % FGF \u5b66\u957f\u5e76\u795d\u5979\u5728\u4f59\u59da\u53d6\u5f97\u4f73\u7ee9\uff01**\n\n\u672c\u7bc7\u9898\u89e3\u4e0e FGF \u5b66\u957f\u7684\u9898\u89e3\u601d\u8def\u4e00\u81f4\uff0c\u5bf9\u5177\u4f53\u5b9e\u73b0\u7684\u8bf4\u660e\u66f4\u8be6\u7ec6\u4e00\u4e9b\uff0c\u4ee5\u671f\u6709\u52a9\u4e8e\u7406\u89e3\uff0c\u540c\u65f6\u4e5f\u4e3a\u81ea\u5df1\u4f5c\u4e00\u7b14\u8bb0\u3002\n\n&nbsp;\n\n\u4efb\u610f\u53d6\u4e00\u68f5\u751f\u6210\u6811\uff0c\u5982\u679c $u,v$ \u4e4b\u95f4\u7684\u6811\u4e0a\u8def\u5f84\u957f\u5ea6\u4e3a\u5947\u6570\u5219\u663e\u7136\u53ef\u884c\u3002\n\n\u5f53 $u,v$ \u4e4b\u95f4\u6811\u4e0a\u8def\u5f84\u4e3a\u5076\u6570\u65f6\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5176\u4e2d\u7684\u4e00\u6bb5\u5e76\u7528\u4e0e\u4e4b**\u4e24\u7aef\u70b9\u76f8\u540c\u3001\u5947\u5076\u6027\u76f8\u53cd**\u7684\u4e00\u6bb5\u975e\u6811\u8fb9\u8def\u5f84\u5c06\u5176\u66ff\u6362\u3002\u8fd9\u6837\u7684\u66ff\u6362\u80fd\u591f\u5b9e\u73b0\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e00\u6bb5**\u6709\u4e0d\u5c11\u4e8e $1$ \u6761\u8fb9\u5b58\u5728\u4e8e\u67d0\u4e2a\u5947\u73af\u4e0a**\u3002\n\n\u5e94\u8be5\u5982\u4f55\u5224\u65ad\u4efb\u610f\u4e00\u6761\u8fb9\u662f\u5426\u5728\u67d0\u4e2a\u5947\u73af\u4e0a\u5462\uff1f\n\n\u4e00\u6761\u8fb9\u5728\u67d0\u4e2a\u5947\u73af\u4e0a\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u6240\u5728\u7684**\u70b9\u53cc\u8fde\u901a\u5206\u91cf**\uff08\u4ee5\u4e0b\u7b80\u79f0 NDCC\uff09\u4e2d\u5b58\u5728\u5947\u73af\u3002\n\n- **\u5145\u5206\u6027\uff1a** \u5728\u4e00\u4e2a\u5947\u73af\u4e0a\u4efb\u53d6\u4e24\u70b9\uff0c\u5219\u8fd9\u4e24\u70b9\u95f4\u7684\u4e24\u6761\u8def\u5f84\u4e3a\u4e00\u5947\u4e00\u5076\u3002\u4ece\u8fd9\u4e24\u70b9\u5411\u5916\u8fde\u51fa\u4e00\u4e2a\u73af\uff0c\u5e76\u79f0\u4e4b\u4e3a\u4e00\u6b21**\u6269\u5c55**\uff0c\u5219\u65b0\u8fde\u7684\u8fd9\u4e00\u6bb5\u5fc5\u7136\u80fd\u591f\u4e0e\u8fd9\u4e24\u70b9\u95f4\u7684\u8fd9\u4e24\u6761\u8def\u5f84\u4e4b\u4e00\u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u5947\u73af\u3002\u800c\u5728\u4e00\u4e2a\u70b9\u6570\u5927\u4e8e $1$ \u7684 NDCC \u4e2d\u4efb\u610f\u4e00\u8fb9\u5747\u5728\u73af\u4e0a\uff0c\u4ece\u800c\u53ef\u77e5\u8fd9\u4e2a NDCC \u53ef\u4ee5\u7531\u5176\u67d0\u4e00\u4e2a\u5947\u73af\u6269\u5c55\u5f97\u5230\uff0c\u5e76\u4e14**\u4efb\u610f\u4e00\u6761\u8fb9\u5747\u5b58\u5728\u4e8e\u67d0\u4e2a\u5947\u73af\u4e0a**\u3002\n\n- **\u5fc5\u8981\u6027\uff1a** \u6613\u89c1\uff0c\u4e24\u4e2a NDCC \u4e4b\u95f4\u4e0d\u5b58\u5728\u73af\uff0c\u5426\u5219\u5176\u5c06\u76f4\u63a5\u6210\u4e3a\u4e00\u4e2a\u5927\u7684 NDCC\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a NDCC \u6c42\u51fa\u5176\u662f\u5426\u6709\u5947\u73af\u3002\u8fd9\u91cc\uff0c\u901a\u8fc7**\u4e8c\u5206\u67d3\u8272**\uff0c\u5373\u53ef\u5224\u5b9a\u4e00\u4e2a NDCC \u4e2d\u5947\u73af\u5b58\u5728\u4e0e\u5426\u3002\n\n&nbsp;\n\n\u53e6\u5916\u6ce8\u610f\uff0c\u9700\u8981\u5224\u65ad\u56fe\u7684\u8fde\u901a\u6027\u3002\n\n&nbsp;\n\n### \u4ee3\u7801\n\n\u5171\u5b9e\u73b0\u4e86 $3$ \u4e2a DFS \u51fd\u6570\uff1a\n\n- `Tarjan`\uff1a\u6c42\u51fa\u56fe\u4e2d\u7684 NDCC\uff0c\u5e76\u987a\u4fbf\u5f97\u5230\u56fe\u7684 DFS \u6811\uff08\u5373\u4e3a\u4e00\u68f5\u53ef\u884c\u7684\u751f\u6210\u6811\uff09\uff1b\n\n- `color`\uff1a\u901a\u8fc7\u4e8c\u5206\u67d3\u8272\u5224\u65ad\u5947\u73af\u5b58\u5728\u6027\uff1b\n\n- `count`\uff1a\u5728\u56fe\u7684\u751f\u6210\u6811\u4e0a\u7edf\u8ba1\uff0c\u6bcf\u4e00\u4e2a\u70b9\u5230\u6839\u7684\u6811\u4e0a\u8def\u5f84\u4e0a\uff0c\u5b58\u5728\u4e8e\u67d0\u4e2a\u5947\u73af\u4e4b\u4e0a\u7684\u8fb9\u7684\u6761\u6570\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nnamespace acah\n{\n\ttemplate<typename T> inline void qread(T &x)\n\t{\n\t\tx = 0; char ch = getchar();\n\t\twhile(!isdigit(ch)) ch = getchar();\n\t\twhile(isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n\t}\n\t\n\tconst int maxn = 1e5 + 7;\n\t\n\tint N, M, Q;\n\tint ac[maxn << 1];\n\t\n\tstruct edge {\n\t\tint to, nt;\n\t} e[maxn << 1];\n\tint hd[maxn], _ = 1;\n\t\n\tinline void ins(int u, int v)\n\t{e[++_].to = v, e[_].nt = hd[u], hd[u] = _;}\n\t\n\tint ind, dfn[maxn], low[maxn], bel[maxn << 1];\n\tint st[maxn << 1], tp, ndcc;\n\tint fa[maxn][20], rt[maxn], dep[maxn];\n\tbool vis[maxn << 1];\n\tvector<int> C[maxn], E[maxn];\n\t\n\tvoid Tarjan(int u, int f)\n\t{\n\t\tdfn[u] = low[u] = ++ind;\n\t\tfa[u][0] = e[f ^ 1].to, rt[u] = rt[fa[u][0]],\n\t\tdep[u] = dep[fa[u][0]] + 1;\n\t\tfor(int i = 1; i <= 18; i++)\n\t\t\tfa[u][i] = fa[fa[u][i - 1]][i - 1];\n\t\tfor(int i = hd[u]; i; i = e[i].nt) {\n\t\t\tif(vis[i] || i == (f ^ 1)) continue;\n\t\t\tst[++tp] = i;\n\t\t\tint v = e[i].to;\n\t\t\tif(!dfn[v]) {\n\t\t\t\tTarjan(v, i);\n\t\t\t\tlow[u] = min(low[u], low[v]);\n\t\t\t\tif(low[v] >= dfn[u]) {\n\t\t\t\t\tint cur;\n\t\t\t\t\tC[++ndcc].push_back(u);\n\t\t\t\t\tdo {\n\t\t\t\t\t\tcur = st[tp--];\n\t\t\t\t\t\tbel[cur] = bel[cur ^ 1] = ndcc;\n\t\t\t\t\t\tvis[cur] = vis[cur ^ 1] = true;\n\t\t\t\t\t\tC[ndcc].push_back(e[cur].to);\n\t\t\t\t\t\tE[ndcc].push_back(cur); //\u53ea\u5b58\u5355\u5411\u8fb9\u5373\u53ef\n\t\t\t\t\t} while(cur != i);\n\t\t\t\t}\n\t\t\t} else low[u] = min(low[u], dfn[v]);\n\t\t}\n\t}\n\t\n\tint col[maxn];\n\t\n\tbool color(int u, int f)\n\t{\n\t\tint fath = e[f ^ 1].to;\n\t\tif(vis[u]) return (col[u] == col[fath]);\n\t\tvis[u] = true, col[u] = col[fath] ^ 1;\n\t\tfor(int i = hd[u]; i; i = e[i].nt) {\n\t\t\tif(bel[i] != bel[f] || i == (f ^ 1)) continue;\n\t\t\tint v = e[i].to;\n\t\t\tif(color(v, i)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tint cnt[maxn];\n\t\n\tvoid count(int u, int f)\n\t{\n\t\tvis[u] = true;\n\t\tfor(int i = hd[u]; i; i = e[i].nt) {\n\t\t\tint v = e[i].to;\n\t\t\tif(vis[v] || i == (f ^ 1)) continue;\n\t\t\tcnt[v] = cnt[u] + ac[i];\n\t\t\tcount(v, i);\n\t\t}\n\t}\n\t\n\tint lca(int u, int v)\n\t{\n\t\tif(dep[u] < dep[v]) swap(u, v);\n\t\tint dif = dep[u] - dep[v];\n\t\tfor(int i = 18; i >= 0; i--)\n\t\t\tif(dif & (1 << i))\n\t\t\t\tu = fa[u][i];\n\t\tif(u == v) return u;\n\t\tfor(int i = 18; i >= 0; i--)\n\t\t\tif(fa[u][i] != fa[v][i])\n\t\t\t\tu = fa[u][i], v = fa[v][i];\n\t\treturn fa[u][0];\n\t}\n\t\n\tint work()\n\t{\n\t\tqread(N), qread(M);\n\t\tfor(int i = 1, u, v; i <= M; i++)\n\t\t\tqread(u), qread(v), ins(u, v), ins(v, u);\n\t\t\n\t\tfor(int i = 1; i <= N; i++)\n\t\t\tif(!dfn[i]) rt[0] = i, Tarjan(i, 0);\n\t\t\n\t\tmemset(vis, 0, sizeof vis);\n\t\tfor(int i = 1; i <= ndcc; i++) {\n\t\t\tfor(int s = C[i].size(), j = 0; j < s; j++)\n\t\t\t\tvis[C[i][j]] = false;\n\t\t\tif(color(e[E[i][0]].to, E[i][0]))\n\t\t\t\tfor(int s = E[i].size(), j = 0; j < s; j++)\n\t\t\t\t\tac[E[i][j]] = ac[E[i][j] ^ 1] = 1;\n\t\t}\n\t\t\n\t\tmemset(vis, 0, sizeof vis);\n\t\tfor(int i = 1; i <= N; i++)\n\t\t\tif(!vis[i]) count(i, 0);\n\t\t\n\t\tqread(Q);\n\t\tfor(int q = 1, u, v; q <= Q; q++) {\n\t\t\tqread(u), qread(v);\n\t\t\tif(rt[u] != rt[v]) puts(\"No\");\n\t\t\telse {\n\t\t\t\tint l = lca(u, v);\n\t\t\t\tif((dep[u] + dep[v] - (dep[l] << 1)) & 1) puts(\"Yes\");\n\t\t\t\telse if(cnt[u] + cnt[v] - (cnt[l] << 1)) puts(\"Yes\");\n\t\t\t\telse puts(\"No\");\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n}\n\nint main() {return acah::work();}\n```",
        "postTime": 1626955322,
        "uid": 118109,
        "name": "whhsteven",
        "ccfLevel": 7,
        "title": "CF97E Leaders"
    },
    {
        "content": "\u9996\u5148\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\n\n1.\u4e24\u70b9\u5728\u56fe\u4e2d\u8ddd\u79bb\u662f\u5947\u6570\u3002\n\n2.\u4e24\u70b9\u5728\u56fe\u4e2d\u8ddd\u79bb\u4e3a\u5076\u6570\uff0c\u4f46\u662f\u5728\u8def\u5f84\u4e0a\u6709\u4e00\u4e9b\u8fb9\u5728\u73af\u4e0a\uff0c\u90a3\u4e48\u53ef\u4ee5\u8d70\u73af\u4e0a\u7684\u53e6\u5916\u4e00\u6761\u8fb9\uff0c\u6539\u53d8\u5947\u5076\u6027\u3002\u5f53\u524d\u8ddd\u79bb\u4e3a\u5076\u6570\uff0c\u56e0\u4e3a\u5076+\u5076=\u5076\uff0c\u5076+\u5947=\u5947\u3002\u6240\u4ee5\u5fc5\u987b\u8981\u8d70\u5947\u73af\u624d\u80fd\u6539\u53d8\u5947\u5076\u6027\u3002\n\n\u5982\u679c\u4e00\u4e2a\u70b9\u53cc\u4e2d\u6709\u5947\u73af\uff0c\u5c31\u7ed9\u8fd9\u4e2a\u5947\u73af\u4e0a\u7684\u70b9\u6253\u4e0a\u6807\u8bb0\uff0c\u7136\u540e\u6811\u4e0a\u5dee\u5206\uff0c\u8be2\u95ee\u65f6\u5c31\u8be2\u95ee\u4e24\u4e2a\u70b9\u4e4b\u95f4\u662f\u5426\u5904\u4e8e\u70b9\u53cc\u5373\u53ef\u3002\n\n---------------------------\u5206\u5272\u7ebf---------------------------------------------------------------------------------------\n\n\n\u539f\u6765\u7684\u4ee3\u7801\u5199\u6302\u4e86\uff0c\u4e0b\u6b21\u6709\u65f6\u95f4\u518d\u8c03\u51fa\u6765(\n\n\u4e8b\u5b9e\u4e0a\u7531\u4e8e\u662f\u65e0\u5411\u56fe\u6240\u4ee5\u5e76\u4e0d\u9700\u8981\u8054\u901a\u5206\u91cf\uff0c\u76f4\u63a5\u5e76\u67e5\u96c6\u7ef4\u62a4\u5373\u53ef\n\n```\n#include<bits/stdc++.h>\n#define ld long double\n#define tset puts(\"qwq\");\n#define test puts(\"QAQ\");\n#define pb(a) push_back(a)\n#define pii pair<int,int> \n#define mkp make_pair\n#define bg begin()\n#define ed end()\n#define FR(i,a,b) for(int i=(a),i##E=(b);i<i##E;i++)\n#define FL(i,a,b) for(int i=(b)-1,i##E=(a-1);i>i##E;i--)\n#define R(i,a,b) for(int i=(a),i##E=(b);i<=i##E;i++)\n#define L(i,a,b) for(int i=(b),i##E=(a);i>=i##E;i--)\n#define sz(a) int((a).size())\n#define us unsigned \n#define int long long\n#define Swap(x,y) (x^=y^=x^=y)\nusing namespace std;\nconst int inf=0x7f7f7f7f7f7f;\nint mod;\nconst ld eps=1e-8;\ninline int add(int x) {return x >= mod ? x - mod : x;}\ninline int sub(int x) {return x < 0 ? x + mod : x;}\ninline void Add(int &x, int y) {if ((x += y) >= mod) x -= mod;}\ninline void Sub(int &x, int y) {if ((x -= y) < 0) x += mod;}\n//#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n//char buf[1<<21], *p1 = buf, *p2 = buf;\nint read()\n{\n    int x=0,f=1;\n    char c=getchar();\n    while(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n    while(isdigit(c)){x=(x<<3)+(x<<1)+(c^48);c=getchar();}\n    return x*f;\n}\nconst int N=1e5+10;\nint n,m,q;\nint fa[N];\nint bz[18][N];\nint dep[N],s[N],a[N];\nstd::vector<int>e[N];\ninline int find_r(int x){\n\treturn x==fa[x]?x:fa[x]=find_r(fa[x]);\n}\nvoid dfs1(int u)\n{\n\tdep[u]=dep[bz[0][u]]+1;\n\tfor(int v:e[u])\n\t{\n\t\tif(!dep[v])\n\t\t{\n\t\t\tbz[0][v]=u;\n\t\t\tdfs1(v);\n\t\t\tif(find_r(u)==find_r(v)) a[u]|=a[v];\n\t\t}\n\t\telse if(dep[v]<dep[u]-1)\n\t\t{\n\t\t\tif((dep[u]+dep[v]+1)&1) a[u]=1;\n\t\t\tfor(int x=find_r(u);dep[x]>dep[v]+1;x=find_r(x)) fa[x]=bz[0][x];\n\t\t}\n\t}\n}\nvoid dfs2(int u)\n{\n\ts[u]+=a[u];\n\tfor(int v:e[u])\n\t{\n\t\tif(dep[v]==dep[u]+1)\n\t\t{\n\t\t\tif(find_r(u)==find_r(v)) a[v]|=a[u];\n\t\t\ts[v]=s[u];\n\t\t\tdfs2(v);\n\t\t}\n\t}\n}\nint LCA(int x,int y)\n{\n\tif(dep[x]<dep[y]) swap(x,y);\n\tL(i,0,16) if(dep[bz[i][x]]>=dep[y]) x=bz[i][x];\n\tif(x==y) return x;\n\tL(i,0,16) if(bz[i][x]!=bz[i][y]) x=bz[i][x],y=bz[i][y];\n\treturn bz[0][x];\n}\nsigned main()\n{\n\tn=read(),m=read();\n\tR(i,1,m)\n\t{\n\t\tint u=read(),v=read();\n\t\te[u].pb(v),e[v].pb(u);\n\t}\n\tR(i,1,n) fa[i]=i;\n\tR(i,1,n) if(!dep[i]) dfs1(i),dfs2(i);\n\tR(j,1,16)\n\t\tR(i,1,n) bz[j][i]=bz[j-1][bz[j-1][i]];\n\tq=read();\n\twhile(q--)\n\t{\n\t\tint u=read(),v=read();\n\t\tint l_a=LCA(u,v);\n\t\t//if(q==2) printf(\"%lld\\n\",l_a);\n\t\tif(!l_a) puts(\"No\");\n\t\telse if(((dep[u]+dep[v])&1)||s[u]+s[v]-2*s[l_a]) puts(\"Yes\");\n\t\telse puts(\"No\");\n\t}\n}\n```\n\n",
        "postTime": 1594996770,
        "uid": 115779,
        "name": "\u6781\u5bd2\u795e\u51b0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF97E \u3010Leaders\u3011"
    }
]