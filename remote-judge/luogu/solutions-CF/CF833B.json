[
    {
        "content": "**\u8fd9\u9053\u9898\u5f88\u597d\u5217\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0cdp[i][j]=max{dp[k][j-1]+cnt[k+1][i]}**\n\n**dp[i][j]\u610f\u4e3a1~i\u4e4b\u95f4\u5206\u5272j\u6b21\u6240\u4ea7\u751f\u7684\u6700\u5927\u503c\u3002cnt[i][j]\u8868\u793ai-j\u4e4b\u95f4\u4e0d\u540c\u7684\u989c\u8272\u4e2a\u6570\u3002**\n\n**\u770b\u5230max\u53ef\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u4f18\u5316\uff0c\u4e5f\u5c31\u662f\u5982\u679c\u6211\u4eec\u6709\u529e\u6cd5\u5728O(logn)\u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51facnt[i][j]\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\uff0c\u8003\u8651\u4e00\u79cd\u989c\u8272\u80fd\u591f\u4ea7\u751f\u8d21\u732e\u7684\u8303\u56f4\uff0c\u4e3a\u4ed6\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u5230\u4ed6\u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u4ea7\u751f\u8d21\u732e\u4e3a1\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u533a\u95f4\u52a0\uff0c\u7ed9pre[i]~i\u90fd\u52a0\u4e0a1\uff0c\u4ece1\u5230n\u8fdb\u884c\u679a\u4e3e\uff0c\u9010\u6e10\u8fdb\u884c\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6362\u4e0b\u4e00\u5c42\u7684\u65f6\u5019\u91cd\u6784\u7ebf\u6bb5\u6811\uff0c\u8fd9\u6837\u8ba1\u7b97cnt[i][j]\u7684\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86logn\u7684 orz**\n\n**\u603b\u590d\u6742\u5ea6\u662fO(nklogn)\uff0c\u65f6\u96502500ms\u5b8c\u5168\u4e0d\u865a~**\n\n**\u4ee3\u7801\u5982\u4e0b**\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define lson root<<1\n#define rson root<<1|1 \nusing namespace std;\n\nstruct node\n{\n\tint l,r,sum,lazy;\n}tr[140010];\nint dp[60][40000],pre[35010],pos[35010];\n\nvoid init()\n{\n\tmemset(tr,0,sizeof(tr));\n}\n\nvoid push_up(int root)\n{\n\ttr[root].sum=max(tr[lson].sum,tr[rson].sum);\n}\n\nvoid push_down(int root)\n{\n\ttr[lson].sum+=tr[root].lazy;\n\ttr[lson].lazy+=tr[root].lazy;\n\ttr[rson].sum+=tr[root].lazy;\n\ttr[rson].lazy+=tr[root].lazy;\n\ttr[root].lazy=0;\n}\n\nvoid build(int root,int l,int r,int now)\n{\n\tif(l==r)\n\t{\n\t\ttr[root].l=l;\n\t\ttr[root].r=r;\n\t\ttr[root].sum=dp[now][l-1];\n\t\treturn ;\n\t}\n\ttr[root].l=l;\n\ttr[root].r=r;\n\tint mid=(l+r)>>1;\n\tbuild(lson,l,mid,now);\n\tbuild(rson,mid+1,r,now);\n\tpush_up(root);\n}\n\nvoid update(int root,int l,int r,int val)\n{\n\tif(tr[root].l==l&&tr[root].r==r)\n\t{\n\t\ttr[root].sum+=val;\n\t\ttr[root].lazy+=val;\n\t\treturn ;\n\t}\n\tif(tr[root].lazy)\n\t{\n\t\tpush_down(root);\n\t}\n\tint mid=(tr[root].l+tr[root].r)>>1;\n\tif(mid<l)\n\t{\n\t\tupdate(rson,l,r,val);\n\t}\n\telse\n\t{\n\t\tif(mid>=r)\n\t\t{\n\t\t\tupdate(lson,l,r,val);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tupdate(lson,l,mid,val);\n\t\t\tupdate(rson,mid+1,r,val);\n\t\t}\n\t}\n\tpush_up(root);\n}\n\nint query(int root,int l,int r)\n{\n\tif(tr[root].l==l&&tr[root].r==r)\n\t{\n\t\treturn tr[root].sum;\n\t}\n\tif(tr[root].lazy)\n\t{\n\t\tpush_down(root);\n\t}\n\tint mid=(tr[root].l+tr[root].r)>>1;\n\tif(mid<l)\n\t{\n\t\treturn query(rson,l,r);\n\t}\n\telse\n\t{\n\t\tif(mid>=r)\n\t\t{\n\t\t\treturn query(lson,l,r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn max(query(lson,l,mid),query(rson,mid+1,r));\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint n,k,t;\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&t);\n\t\tpre[i]=pos[t]+1;\n\t\tpos[t]=i;\n\t}\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tinit();\n\t\tbuild(1,1,n,i-1);\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tupdate(1,pre[j],j,1);\n\t\t\tdp[i][j]=query(1,1,j);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",dp[k][n]);\n}\n```",
        "postTime": 1525736686,
        "uid": 48740,
        "name": "Styx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF833B \u3010The Bakery\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u9053DP\u9898\u3002          \n\u5148\u8d34\u4e0a\u6211\u7684\u7ffb\u8bd1\uff08~~\u7a0d\u5fae\u6bd4\u9ed8\u8ba4\u7ffb\u8bd1\u4f18\u7f8e\u4e00\u70b9~~\uff09:\n```\n\u7531\u4e8e\u8fd9\u9053\u9898\u6765\u81eaCF\uff0c\u6211\u63d0\u4f9b\u4e00\u4e0b\u7ffb\u8bd1:\n\u9898\u76ee\u5927\u610f:\nSlastyona\u5f00\u4e86\u4e00\u4e2a\u86cb\u7cd5\u5e97\uff0c\u5979\u53d1\u73b0\u628a\u86cb\u7cd5\u88c5\u8fdb\u76d2\u5b50\u91cc\u53ef\u4ee5\u76c8\u5229\uff0c\u4e14\u4e00\u4e2a\u76d2\u5b50\u91cc\u88c5\u7684\u86cb\u7cd5\u79cd\u7c7b\u8d8a\u591a\uff0c\u5c31\u53ef\u4ee5\u5356\u7684\u8d8a\u8d35\u3002\n\u9898\u76ee\u89c4\u5b9a\u4e00\u4e2a\u76d2\u5b50\u7684\u4ef7\u503c\u4e3a\u5176\u4e2d\u88c5\u86cb\u7cd5\u7684\u79cd\u7c7b\u3002\n\u5979\u4eca\u5929\u9700\u8981\u8ba9k\u4e2a\u76d2\u5b50\u4e2d\u88ab\u88c5\u4e0a\u86cb\u7cd5\uff0c\u800c\u4e14\u5979\u7684\u76d2\u5b50\u4e0d\u80fd\u4e3a\u7a7a\u3002\n\u88c5\u7684\u86cb\u7cd5\u5fc5\u987b\u662f\u53d6\u81ea\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\u3002\nSlastyona\u5e0c\u671b\u6700\u5927\u5316\u6240\u6709\u86cb\u7cd5\u76d2\u7684\u603b\u4ef7\u503c\u3002\u5e2e\u52a9\u5979\u786e\u5b9a\u8fd9\u4e2a\u53ef\u80fd\u7684\u6700\u5927\u503c\u3002\n\u8f93\u5165\u683c\u5f0f:\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570n,k\uff0c\u5206\u522b\u4ee3\u8868\u86cb\u7cd5\u7684\u4e2a\u6570\u548c\u76d2\u5b50\u7684\u4e2a\u6570\u3002\n\u7b2c\u4e8c\u884c\u5305\u542bn\u4e2a\u6b63\u6574\u6570\uff0c\u7b2ci\u4e2a\u6570\u4ee3\u8868\u7b2ci\u4e2a\u86cb\u7cd5\u7684\u7c7b\u522b\n\n\u8f93\u51fa\u683c\u5f0f:\n\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u4ee3\u8868\u76d2\u5b50\u7684\u603b\u4ef7\u503c\u3002\n\n\u8303\u56f4:\n\u4fdd\u8bc1n\u2208[1\uff0c35000]\u4e14\u4e3a\u6574\u6570\uff0ck\u2208[1\uff0cmin(n,50)]\u4e14\u4e3a\u6574\u6570\u3002\n\u4fdd\u8bc1\u86cb\u7cd5\u7684\u603b\u79cd\u7c7b\u6570\u2208[1\uff0cn]\u4e14\u4e3a\u6574\u6570\u3002\n```\n\u7ffb\u8bd1\u5c31\u5230\u8fd9\u91cc\u3002         \n\u8fd9\u4e00\u9898\u5176\u5b9e\u8fd8\u662f\u633a\u8003\u9a8c\u601d\u7ef4\u7684\uff0c\u672c\u9898\u662f\u4e00\u4e2a\u5178\u578b\u7684\u5206\u7ec4\u95ee\u9898,\u4f7f\u7528\u533a\u95f4\u52a8\u6001\u89c4\u5212\u6c42\u89e3(\u7b97\u6cd5\u6807\u7b7e\u4e0a\u6ca1\u6709\u5199\u52a8\u89c4 orz)\u3002    \n\u6211\u4eec\u5148\u6765\u5b9a\u4e49\u4e00\u4e0bf\u6570\u7ec4\u3002       \n\u7531\u4e8e\u6211\u4eec\u53ea\u80fd\u53d6\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u6211\u4eec\u4e0d\u59a8\u5b9a\u4e49```f[i][j]```\u4e3a\u5728i\u4e2a\u76d2\u5b50\u4e2d\u88c5\u4e0b1-j\u7684\u6240\u6709\u86cb\u7cd5\u65f6\u7684\u6700\u5927\u4ef7\u503c\u548c\u3002         \n\u4ece\u8fd9\u4e2a\u5b9a\u4e49\u4e2d\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u8fb9\u754c\u6761\u4ef6:       \n```cpp\nf[1][i]=col[1][i]\n```\n\u5176\u4e2d```col[i][j]```\u4ee3\u8868\u4ecei->j\u4e2d\u7684\u989c\u8272\u79cd\u7c7b\u548c\u3002    \n\u4e3a\u4e86\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u5728\u539f\u6709\u7684\u57fa\u7840\u4e0a\u591a\u5207\u4e00\u5200\u7684\u60c5\u51b5\u3002         \n```\n\u6211\u4eec\u8bbe\u8981\u5206\u7684\u90a3\u4e00\u5200\u7684\u4f4d\u7f6e\u4e3ak\u3002\n\u90a3\u4e48\u603b\u4ef7\u503c\u7684\u503c\u5c31\u4e3af[j-1][k]+col[i][j]\u3002\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u66f4\u65b0j\u503c\uff0c\u679a\u4e3e\u6bcf\u4e00\u4e2ak\uff0c\u53d6\u5176\u6700\u5927\u503c\uff0c\u5373\u4e3a\u6240\u6c42\u3002\n\u6700\u7ec8\u5f97\u8f6c\u79fb\u65b9\u7a0b:f[i][j]=max{f[j-1][k]+col[i][k+1]}\n```\n\u6839\u636e\u8fd9\u4e2a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u7684\u7a0b\u5e8f\u4e86~~\uff0c\u8fd9\u4e00\u9898\u5c31\u7ed3\u675f\u4e86~~\u3002       \n\u7ed3\u675f\u4e86\u5c31\u597d\u4e86\uff0c\u53ea\u53ef\u60dc```n\u2208[1\uff0c35000]```\uff0c\u8fd9\u4e48\u505a\u8981\u679a\u4e3e\u4e24\u8fb9n\uff0c\u4e00\u904dk\uff0c\u590d\u6742\u5ea6\u4e3a```O(k*n^2)```\uff0c\u4f1a\u76f4\u63a5\u7206\u70b8\u3002          \n\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u7684\u8bdd\uff0c\u6211\u4eec\u9700\u8981\u4f18\u5316\u6389\u4e00\u4e2alog\u3002    \n\u600e\u4e48\u529e\u5462?\u4e0a\u7ebf\u6bb5\u6811\u3002      \n\u5728\u4ecb\u7ecd\u8fd9\u4e00\u9898\u4e2d\u7ebf\u6bb5\u6811\u7684\u5199\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u63a2\u7d22\u4e00\u4e2a\u4e1c\u897f:      \n```cpp\n\u54ea\u4e00\u4e9b\u70b9\u5bf9\u6211\u4eec\u7684\u603b\u4ef7\u503c\u662f\u6709\u76ca\u7684\u5462?\n```\n\u5b9e\u9645\u4e0a\uff0c\u4e00\u4e2a\u70b9\u7684\u6709\u4ef7\u503c\u7684\u8303\u56f4\u53ef\u4ee5\u4ec5\u7531\u524d\u4e00\u4e2a\u4e0e\u5b83\u540c\u989c\u8272\u7684\u70b9\u51b3\u5b9a\u3002     \n\u4f8b:\u6837\u4f8b3(\u6bcf\u4e00\u4e2a\u989c\u8272\u4ee3\u8868\u6709\u6548\u8303\u56f4)\n![](https://i.loli.net/2018/12/06/5c08deb35c5fd.jpg)       \n\u6240\u4ee5\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u6765\u5b58\u50a8\u533a\u95f4\u6700\u503c\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5728```O(k*n*logn)```\u7684\u65f6\u95f4\u5185\u505a\u5b8c\u4e86\u3002      \n\u4e0b\u9762\u6765\u8fc7\u4e00\u904d\u7b97\u6cd5\u6d41\u7a0b:       \n\u6211\u4eec\u5148\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u4e2a\u70b9\u7684\u6709\u6548\u8303\u56f4:\n```cpp\nint main()\n{\n    int n,k,t;\n    scanf(\"%d%d\",&n,&k);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&t);\n        pre[i]=pos[t]+1;\n        pos[t]=i;\n    }\n```\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2ak\u503c\uff0c\u6211\u4eec\u90fd\u5efa\u7acb\u4e00\u6b21\u7ebf\u6bb5\u6811\u3002\n```cpp\n    for(int i=1;i<=k;i++)\n    {\n        memset(tr,0,sizeof(tr));\n        build(1,1,n,i);\n        for(int j=1;j<=n;j++)\n        {\n            update(1,pre[j],j,1);\n            f[i][j]=query(1,1,j);\n        }\n    }\n```\n\u5728\u8fd9\u91cc\u9762\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4f5c\u6bcf\u4e00\u4e2a\u989c\u8272\u90fd\u53ef\u4ee5\u201c\u900f\u8fc7\u201d\u5206\u5272\u7ebf\u5bf9\u540e\u9762\u7684\u70b9\u4ea7\u751f\u5f71\u54cd:\n![](https://i.loli.net/2018/12/06/5c08e2c4075cc.jpg)             \n\u6ce8\u610f\u6211\u4eec\u7684build\u51fd\u6570\u4e2d\uff0c\u7ebf\u6bb5\u6811\u7684\u5efa\u6811\u8fc7\u7a0b\u4f9d\u8d56\u4e8e\u4e0a\u4e00\u6b21dp\u3002\n```cpp\nvoid build(int p,int l,int r,int now)\n{\n    if(l==r)\n    {\n        tr[p].l=l;\n        tr[p].r=r;\n        tr[p].val=f[now-1][l-1];\n        return;\n    }\n    tr[p].l=l;\n    tr[p].r=r;\n    int mid=(l+r)>>1;\n    build(ls(p),l,mid,now);\n    build(rs(p),mid+1,r,now);\n    push_up(p);\n}\n```\n\u6700\u540e\u8f93\u51fa\u5c31\u884c\u4e86\u3002\n```cpp\n    printf(\"%d\\n\",f[k][n]);\n\treturn 0;\n}\n```\n\u5b8c\u6574\u7a0b\u5e8f:\n```cpp\nint main()\n{\n    int n,k,t;\n    scanf(\"%d%d\",&n,&k);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&t);\n        pre[i]=pos[t]+1;\n        pos[t]=i;\n    }\n    for(int i=1;i<=k;i++)\n    {\n        memset(tr,0,sizeof(tr));\n        build(1,1,n,i);\n        for(int j=1;j<=n;j++)\n        {\n            update(1,pre[j],j,1);\n            f[i][j]=query(1,1,j);\n        }\n    }\n    printf(\"%d\\n\",f[k][n]);\n\treturn 0;\n}\n```",
        "postTime": 1544086254,
        "uid": 105496,
        "name": "KevinYu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF833B \u3010The Bakery\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 $a$\uff0c\u8981\u628a\u5b83\u5206\u6210 $k$ \u4e2a\u5b50\u6bb5\u3002\u6bcf\u4e2a\u5b50\u6bb5\u7684\u4ef7\u503c\u662f\u5176\u4e2d\u4e0d\u540c\u5143\u7d20\u7684\u4e2a\u6570\u3002\u6c42\u6240\u6709\u5b50\u6bb5\u7684\u4ef7\u503c\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002\n\n### \u89e3\u6cd5\n\n\u6574\u4e2a\u9898\u89e3\u533a\u5c31\u51e0\u4e2a\u7528\u51b3\u7b56\u5355\u8c03\u6027\u505a\u7684\uff0c~~\u6709\u4e00\u4e2a\u7528\u7684\u8fd8\u662f\u6211\u4e0d\u4f1a\u7684\u4e3b\u5e2d\u6811\u7ef4\u62a4~~\uff0c\u6240\u4ee5\u6211\u5c31\u6765\u8865\u4e00\u53d1\n\n\u9996\u5148\u60f3\u5230DP\u5e94\u8be5\u5f88\u7b80\u5355\uff0c\u65b9\u7a0b\u4e5f\u5f88\u663e\u7136\uff1a\u8bbe $f[i][j]$ \u4e3a\u628a\u524d $i$ \u4e2a\u6570\u5206\u6210 $j$ \u6bb5\u6240\u9700\u8981\u7684\u6700\u5927\u4ef7\u503c\uff0c\u53ef\u4ee5\u5f97\u51fa\uff1a $ f[i][j]=\\max\\{f[i-1][j-1]+val(j+1,i)\\} $\uff0c\u5176\u4e2d $val(l,r)$ \u8868\u793a\u7684\u662f $[l,r]$ \u8fd9\u4e2a\u533a\u95f4\u7684\u4ef7\u503c\u3002\n\n\u4f46\u662f\u8fd9\u6837\u76f4\u63a5\u66b4\u529b\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u662f $\\Theta(n^2k)$ \uff0c\u4e0d\u53ef\u627f\u53d7\u3002\n\n\u5bf9\u4e8e\u8fd9\u6837\u7684\u4e00\u4e2a\u5f0f\u5b50\uff0c\u76f4\u89c9\u544a\u8bc9\u6211\u4eec\u53ef\u80fd**\u51b3\u7b56\u6709\u5355\u8c03\u6027**\u3002\n\n\u90a3\u4e48\u600e\u4e48\u9a8c\u8bc1\u5462\uff1f\n\n\u53ef\u4ee5\u7b80\u5355\u53e3\u80e1\u4e00\u4e2a\u8bc1\u660e\uff1a\u6700\u5927\u503c\u662f\u6ee1\u8db3\u533a\u95f4\u53ef\u52a0\u6027\u7684\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u533a\u95f4 $[l,r]$ \u548c \uff0c$[l,r+1]$ \uff0c\u8bbe $maxx$ \u4e3a $[l,r]$ \u4e2d\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u5728 $r$ \u53f3\u79fb\u4e00\u4f4d\u65f6\uff0c\u8981\u4e48\u6700\u5927\u503c\u4e0d\u53d8\uff0c\u8981\u4e48\u6700\u5927\u503c\u53d8\u4e3a $r+1$ \u4e0a\u7684\u5143\u7d20\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5728 $l$ \u4e0d\u53d8\u65f6\uff0c$maxx$ \u968f\u7740 $r$ \u7684\u53f3\u79fb\u5355\u8c03\u4e0d\u964d\uff1b\u4e24\u4e2a\u533a\u95f4\u540c\u65f6\u52a0\u4e00\u4e2a\u6570 $x$ \u540e\u540c\u7406\u3002\u6240\u4ee5 $f[i][j]$ \u8f6c\u79fb\u8fc7\u7a0b\u4e2d\u662f\u6ee1\u8db3\u5355\u8c03\u6027\u7684\u3002\n\n\u6709\u4e86\u8fd9\u4e2a\u6027\u8d28\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5206\u6cbb\u4f18\u5316DP\u3002\n\n\u7531\u4e8e\u7b54\u6848\u5355\u8c03\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\uff0c\u8bbe\u73b0\u5728\u7b49\u5f85\u8f6c\u79fb\u7684\u533a\u95f4\u4e3a $[l,r]$ \uff0c\u53ef\u4ee5\u8f6c\u79fb\u8fc7\u6765\u7684\u51b3\u7b56\u6240\u5728\u533a\u95f4\u4e3a $[ql,qr]$ \uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u67e5\u627e\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a $mid$ \u4e3a $l,r$ \u7684\u4e2d\u70b9\uff0c\u7136\u540e\u9012\u5f52\u6c42\u89e3\u3002\n\n\u5206\u6cbb\u4f18\u5316DP\u6a21\u677f\u2014\u2014\u4ee3\u7801\u7247\u6bb5\uff08\u6458\u81eaOI-WIKI\uff09\n\n```cpp\nvoid DP(int l, int r, int k_l, int k_r) {\n  int mid = (l + r) / 2, k = k_l;\n  // \u6c42\u72b6\u6001f[mid]\u7684\u6700\u4f18\u51b3\u7b56\u70b9\n  for (int i = k_l; i <= min(k_r, mid - 1); ++i)\n    if (w(i, mid) < w(k, mid)) k = i;\n  f[mid] = w(k, mid);\n  // \u6839\u636e\u51b3\u7b56\u5355\u8c03\u6027\u5f97\u51fa\u5de6\u53f3\u4e24\u90e8\u5206\u7684\u51b3\u7b56\u533a\u95f4\uff0c\u9012\u5f52\u5904\u7406\n  if (l < mid) DP(l, mid - 1, k_l, k);\n  if (r > mid) DP(mid + 1, r, k, k_r);\n}\n```\n\n\u56de\u5230\u672c\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u540c\u6837\u7684\u601d\u8def\uff0c\u8bbe $qmid$ \u4e3a\u6700\u4f18\u51b3\u7b56\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u6700\u5f00\u59cb\u7f6e\u4e3a $ql$ \uff0c\u7136\u540e\u904d\u5386 $ql$ \u5230 $qr$ \uff0c\u9047\u5230\u7b54\u6848\u53ef\u4ee5\u66f4\u65b0\u7684\u65f6\u5019\u5c31\u66f4\u65b0\u7b54\u6848\u548c $qmid$ \uff0c\u4e4b\u540e\u9012\u5f52\u5de6\u3001\u53f3\u533a\u95f4\u5206\u522b\u6c42\u89e3\u3002\n\n```cpp\ninline void solve(int l, int r, int ql, int qr, int tot) { // tot \u8868\u793a\u5f53\u524d\u5b50\u6bb5\u6570\n    if (l > r) return;\n    int mid = (l + r) >> 1, qmid = ql;\n    for (ri i = ql; i <= min(qr, mid); i++) {\n        int las = f[i - 1][tot - 1] + val(i, mid);\n        bool updated = las > f[mid][tot];\n        if (updated) f[mid][tot] = las, qmid = i;\n    }\n    solve(l, mid - 1, ql, qmid, tot);\n    solve(mid + 1, r, qmid, qr, tot);\n}\n```\n\n\u8fd9\u6837\uff0cDP\u7684\u590d\u6742\u5ea6\u5c31\u6210\u4e86 $k \\log n$ \u3002\n\n\u7136\u540e\u8fd8\u9700\u8981\u8003\u8651\u600e\u6837\u9ad8\u6548\u7ef4\u62a4\u6bcf\u4e2a\u5b50\u533a\u95f4\u4e0d\u91cd\u590d\u6570\u5b57\u7684\u4e2a\u6570\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528**\u83ab\u961f**\u6216**\u4e3b\u5e2d\u6811**\u5bf9\u8fd9\u4e2a\u4fe1\u606f\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u83ab\u961f\u7684\u4ee3\u7801\u7247\u6bb5\uff1a\n\n```cpp\nnamespace mocap {\nint L = 1, R, ans, cnt[N], a[N];\ninline void add(int x) { ans += !cnt[x]++; }\ninline void del(int x) { ans -= !--cnt[x]; }\ninline int val(int l, int r) {\n    while (L > l) add(a[--L]);\n    while (R < r) add(a[++R]);\n    while (R > r) del(a[R--]);\n    while (L < l) del(a[L++]);\n    return ans;\n}\n}  // namespace mocap\nusing namespace mocap;\n```\n\n\u6709\u4e86\u8fd9\u4e9b\uff0c\u6c42\u89e3\u672c\u9898\u5c31\u6613\u5982\u53cd\u638c\u4e86\u3002\n\n\u603b\u590d\u6742\u5ea6 $\\Theta(nk\\log n)$ \u3002\n\n\uff08\u53e6\uff1a\u7406\u89e3\u4e86\u672c\u9898\u7684\u601d\u8def\u540e\u53ef\u4ee5\u770b\u770b[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/CF868F)\uff0c\u601d\u8def\u51e0\u4e4e\u4e00\u6837\uff0c\u68c0\u9a8c\u4e00\u4e0b\u5b66\u4e60\u6210\u679c\uff09\n\n### Code\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define ri register int\nconst int N = 5e4 + 10, K = 50;\ninline int read() {\n    ri x = 0, f = 1;\n    char ch = getchar();\n    for (; !isdigit(ch); ch = getchar())\n        if (ch == '-') f = -1;\n    for (; isdigit(ch); ch = getchar()) x = (x << 1) + (x << 3) + (ch ^ 48);\n    return f * x;\n}\nint f[N][K];\nnamespace mocap {\nint L = 1, R, ans, cnt[N], a[N];\ninline void add(int x) { ans += !cnt[x]++; }\ninline void del(int x) { ans -= !--cnt[x]; }\ninline int val(int l, int r) {\n    while (L > l) add(a[--L]);\n    while (R < r) add(a[++R]);\n    while (R > r) del(a[R--]);\n    while (L < l) del(a[L++]);\n    return ans;\n}\n}  // namespace mocap\nusing namespace mocap;\ninline void solve(int l, int r, int ql, int qr, int tot) {\n    if (l > r) return;\n    int mid = (l + r) >> 1, qmid = ql;\n    for (ri i = ql; i <= min(qr, mid); i++) {\n        int las = f[i - 1][tot - 1] + val(i, mid);\n        bool updated = las > f[mid][tot];\n        if (updated) f[mid][tot] = las, qmid = i;\n    }\n    solve(l, mid - 1, ql, qmid, tot);\n    solve(mid + 1, r, qmid, qr, tot);\n}\nsigned main() {\n    int n = read(), k = read();\n    for (ri i = 1; i <= n; i++) a[i] = read();\n    memset(f, 0xcf, sizeof(f));\n    f[0][0] = 0;\n    for (ri i = 1; i <= k; i++) solve(1, n, 1, n, i);\n    printf(\"%lld\\n\", f[n][k]);\n    return 0;\n}\n```\n\n",
        "postTime": 1625379364,
        "uid": 375030,
        "name": "CG__HeavenHealer",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011 CF833B The Bakery"
    },
    {
        "content": "## CF833B-\u7ebf\u6bb5\u6811\u4f18\u5316DP\n\n### \u9898\u610f\n\n\u5c06\u4e00\u4e2a\u957f\u4e3a$n$\u7684\u5e8f\u5217\u5206\u6210$k$\u6bb5\uff0c\u6bcf\u6bb5\u8d21\u732e\u4e3a\u5176\u4e2d\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\uff0c\u6c42\u6700\u5927\u8d21\u732e\u548c\u3002\n\n### \u601d\u8def\n\n\u6b64\u5904\u611f\u8c22@gxy001 \u805a\u94d1\u7684\u7cbe\u5f69\u8bb2\u89e3\n\n\u5148\u8003\u8651\u66b4\u529bDP\uff0c\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u65f6\u7a7a\u590d\u6742\u5ea6$O(n^2k)$\u7684\u65b9\u6cd5\uff0c\u5373\u8bb0\u5f55\u524di\u4e2a\u6570\u5b57\u5206\u6210\u4e86j\u6bb5\u3002\u6211\u4eec\u73b0\u5728\u6765\u601d\u8003\u51e0\u4e2a\u95ee\u9898\u6765\u4f18\u5316\u8fd9\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u5bf9\u90a3\u4e9b\u5730\u65b9\u5b9e\u9645\u6709\u8d21\u732e\uff1f\n2. \u6bcf\u6b21\u5206\u5272\u51fa\u4e00\u4e2a\u533a\u95f4\u6bb5\u5bf9\u540e\u7eed\u64cd\u4f5c\u6709\u5f71\u54cd\u7684\u4f4d\u7f6e\u5728\u54ea\uff1f\n3. \u6bcf\u6b21\u8f6c\u79fb\u90fd\u4ece\u54ea\u4e9b\u5730\u65b9\u7ee7\u627f\uff1f\n\n\u4e0b\u6765\u4e00\u4e00\u89e3\u7b54\u8fd9\u4e9b\u95ee\u9898\u3002\n\n1. \u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u80fd\u4ea7\u751f\u8d21\u732e\u7684\u533a\u95f4\u5176\u5b9e\u5c31\u662f\u8be5\u6570\u5b57\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u7684\u540e\u4e00\u4f4d\u5230\u5b83\u672c\u8eab\u7684\u4f4d\u7f6e\u3002\n2. \u5bf9\u4e8e\u6bcf\u6b21\u5212\u5206\uff0c\u5b83\u4ee5\u524d\u7684\u4f4d\u7f6e\u7684\u8d21\u732e\u5df2\u7ecf\u88ab\u8003\u8651\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u8003\u8651\u540e\u9762\u7684\u4f4d\u7f6e\u3002\n3. \u76f8\u5e94\u7684\uff0c\u6bcf\u6b21\u8f6c\u79fb\u4f1a\u7ee7\u627f\u524d\u9762\u6240\u6709DP\u503c\u7684**\u6700\u5927\u503c**\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06k\u63d0\u51fa\u6765\uff0c\u6bcf\u6b21\u5faa\u73af\u7ee7\u627f\u4e0a\u4e00\u6b21\u6240\u6709\u7684dp\u503c\u3002\u56e0\u4e3a\u53ea\u8003\u8651\u4ece\u524d\u9762\u8f6c\u79fbdp\u503c\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5bf9\u4e4b\u524d\u7684\u51b3\u7b56\u4ea7\u751f\u5f71\u54cd\uff0c\u6240\u4ee5\u662f\u6b63\u786e\u7684\u3002\n\n\u770b\u770b1\u30013\u95ee\u9898\u7684\u7b54\u6848\uff0c\u662f\u4e0d\u662f\u60f3\u5230\u4e86RMQ\u548c\u533a\u95f4\u8d4b\u503c\uff1f\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u6765\u5b9e\u73b0DP\u4f18\u5316\u3002\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u8fed\u4ee3k\u6b21\uff0c\u6bcf\u6b21\u7ebf\u6bb5\u6811\u66f4\u65b0\u4e3a\u4e0a\u4e00\u6b21\u5e8f\u5217\u7684dp\u503c\uff0c\u7136\u540e\u4ece\u524d\u5f80\u540e\u626b\uff0c\u6bcf\u4e2a\u6570\u4f1a\u5bf9\u5176\u4e0a\u8ff0\u533a\u95f4\u4ea7\u751f1\u7684\u8d21\u732e\uff0c\u8f6c\u79fb\u7ee7\u627f\u524d\u9762\u6240\u6709dp\u503c\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4e00\u7ef4\u4f18\u5316\u4e3alog\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ninline int read(){\n\tint w=0,x=0;char c=getchar();\n\twhile(!isdigit(c))w|=c=='-',c=getchar();\n\twhile(isdigit(c))x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\treturn w?-x:x;\n}\nnamespace star\n{\n\tconst int maxn=35005;\n\tint n,k,cur[maxn],pre[maxn],f[maxn][60];\n\tstruct SegmentTree{\n\t\t#define ls (ro<<1)\n\t\t#define rs (ro<<1|1)\n\t\tstruct tree{\n\t\t\tint l,r,tag,v;\n\t\t}e[maxn<<2];\n\t\tinline void pushup(int ro){\n\t\t\te[ro].v=max(e[ls].v,e[rs].v);\n\t\t}\n\t\tinline void pushdown(int ro){\n\t\t\te[ls].tag+=e[ro].tag;e[rs].tag+=e[ro].tag;\n\t\t\te[ls].v+=e[ro].tag;e[rs].v+=e[ro].tag;\n\t\t\te[ro].tag=0;\n\t\t}\n\t\tvoid build(int ro,int l,int r){\n\t\t\te[ro].l=l,e[ro].r=r;\n\t\t\tif(l==r)return;\n\t\t\tint mid=l+r>>1;\n\t\t\tbuild(ls,l,mid);\n\t\t\tbuild(rs,mid+1,r);\n\t\t}\n\t\tvoid rebuild(int tim,int ro){\n\t\t\tint l=e[ro].l,r=e[ro].r;\n\t\t\te[ro].tag=0;\n\t\t\tif(l==r){\n\t\t\t\te[ro].v=f[l][tim];return;\n\t\t\t}\n\t\t\trebuild(tim,ls);rebuild(tim,rs);\n\t\t\tpushup(ro);\n\t\t}\n\t\tvoid update(int ro,int x,int y){\n\t\t\tint l=e[ro].l,r=e[ro].r;\n\t\t\tif(l>=x and r<=y){\n\t\t\t\te[ro].v+=1;\n\t\t\t\te[ro].tag+=1;return;\n\t\t\t}\n\t\t\tpushdown(ro);\n\t\t\tint mid=l+r>>1;\n\t\t\tif(mid>=x)update(ls,x,y);\n\t\t\tif(mid<y)update(rs,x,y);\n\t\t\tpushup(ro);\n\t\t}\n\t\tint query(int ro,int x,int y){\n\t\t\tint l=e[ro].l,r=e[ro].r;\n\t\t\tif(l==x and r==y)return e[ro].v;\n\t\t\tpushdown(ro);\n\t\t\tint mid=l+r>>1;\n\t\t\tif(mid<x)return query(rs,x,y);\n\t\t\telse if(mid>=y)return query(ls,x,y);\n\t\t\telse return max(query(ls,x,mid),query(rs,mid+1,y));\n\t\t}\n\t\t#undef ls\n\t\t#undef rs \n\t}T;\n\tinline void work(){\n\t\tn=read(),k=read();\n\t\tfor(int x,i=1;i<=n;i++)x=read(),pre[i]=cur[x],cur[x]=i;\n\t\tT.build(1,0,n);\n\t\tfor(int i=1;i<=k;i++){\n\t\t\tT.rebuild(i-1,1);\n\t\t\tfor(int x=1;x<=n;x++) T.update(1,pre[x],x-1),f[x][i]=T.query(1,0,x-1);\n\t\t}\n\t\tprintf(\"%d\",f[n][k]);\n\t}\n}\nsigned main(){\n\tstar::work();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1602298774,
        "uid": 280015,
        "name": "Star_Cried",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF833B \u3010The Bakery\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u6211\u4eec\u770b\u5230\u8fd9\u4e2a\u5212\u5206\u533a\u95f4\uff0c\u7b97\u603b\u4ef7\u503c\u6700\u5927\u503c\u7684\u9898\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u6734\u7d20 DP \u3002\n\n\u8bbe $f[i][j]$ \u8868\u793a\u524d $j$ \u4e2a\u6570\u5212\u5206\u4e3a $i$ \u4e2a\u8fde\u7eed\u533a\u95f4\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002\n\n\u90a3\u4e48\u8f6c\u79fb\u65b9\u7a0b\u5c31\u4e3a\uff1a\n\n$f[i][j]=\\max(f[i-1][k]+val(k+1,i)) (i-1 \\le k \\le j-1) $\n\n$val(l,r)$ \u8868\u793a $[l,r]$ \u8fd9\u4e2a\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u6570\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u6b21 $f[i][j]$ \u7684\u8f6c\u79fb\uff0c\u53ea\u9700\u8981\u7528\u5230 $f[i-1][k]$ \uff0c\u5373\u4e0a\u4e00\u6b21\u7684\u5212\u5206\u3002\n\n\u6240\u4ee5 $f$ \u6570\u7ec4\u53ef\u4ee5\u6eda\u52a8\uff0c~~\u5176\u5b9e\u6ca1\u7528~~\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u6734\u7d20 DP \u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(n^3k)$ ~~\u7a33\u7a33 T \u98de~~\u3002\n\n\u8f6c\u5ff5\u4e00\u60f3\uff0c $k \\le 50$ \u6240\u4ee5\u6211\u4eec\u731c\u6d4b\u6b63\u89e3\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u7531\u4e8e DP \u6570\u7ec4\u90fd\u9700\u8981 $nk$ (\u4e0d\u5f00\u6eda\u52a8\u6570\u7ec4)\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u81f3\u5c11\u8981 $O(nk)$\u3002\n\n\u4f46\u662f\u66f4\u65b0\u663e\u7136\u505a\u4e0d\u5230 $O(1)$ \uff0c$O(\\log_n)$ \u662f\u6700\u597d\u7684\u9009\u62e9\u3002\n\n\u7136\u540e\u8f6c\u79fb\u65b9\u7a0b\u91cc\u51fa\u73b0\u4e86 $\\max(...)$ \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u3002\n\n\u9996\u5148\u5148\u7528\u4e0a\u4e00\u5c42\u7684\u5212\u5206\u6700\u5927\u503c\u5efa\u6811\uff0c\u4e00\u5171\u8981\u5efa $k$ \u68f5\u7ebf\u6bb5\u6811\uff0c\n\n\u7a7a\u95f4\u91cd\u590d\u5229\u7528\u5c31\u597d\u4e86\uff0c\u65f6\u95f4\u4e5f\u591f\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5904\u7406\u5982\u4f55\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 $\\max(f[i-1][k]+val(l,r))$ \u4e86\u3002\n\n\u6211\u4eec\u53cd\u8fc7\u6765\u8003\u8651\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6570\uff0c\u5b83\u5bf9\u4e8e $val(l,r)$ \u7684\u8d21\u732e\u5728\u54ea\u91cc\uff1f\n\n\u8bb0\u8fd9\u4e2a\u6570\u4e3a $a[i]$ \u7684\u524d\u9762\u7684\u7b2c\u4e00\u4e2a\u4e0e\u5b83\u76f8\u7b49\u7684\u6570\u7684\u4f4d\u7f6e\u4e3a $pre[a[i]]$ \uff0c\n\n\u90a3\u4e48\u8fd9\u4e2a $a[i]$ \u5bf9\u4e8e $pre[a[i]] < l < i$ \u7684\u533a\u95f4\uff0c\u662f\u6709\u8d21\u732e\u7684\uff0c\u4e3a $1$ \u3002\n\n\u90a3\u4e48\u6211\u4eec\u987a\u5e8f DP \u6bcf\u4e00\u6b21\u5148\u7528\u4e0a\u4e00\u6b21\u7684 $i-1$ \u7684 DP \u503c\u5efa\u6811\uff0c\n\n\u7136\u540e\u6bcf\u626b\u8fc7\u4e00\u4e2a\u6570 $a[j]$ \uff0c\u5c31\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4 $[pre[a[j]],j-1]$ \u5168\u90e8\u52a0\u4e0a$1$ \u3002\n\n\u6bcf\u6b21\u66f4\u65b0\uff0c\u5c31\u5728\u7ebf\u6bb5\u6811\u4e0a $[i-1,j-1]$ \u7684\u533a\u95f4\u627e $\\max(f[i-1][k]+val(l,r))$ \u5373\u53ef\u3002\n\n\u8fd9\u91cc\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nk\\log_n)$ \u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define int long long\nusing namespace std;\nconst int N=40010,M=111;\nint n,m,a,f[M][N],lst[N],p[N],add[N*4];\nstruct laq{\n\tint l,r,mx;\n}t[N*4];\nvoid build(int k,int i,int l,int r){\n\tt[i]=(laq){l,r,0};\n\tif(l==r){\n\t\tt[i].mx=f[k][r];\n\t\treturn;\n\t}\n\tint son=(i*2),mid=(l+r)/2;\n\tbuild(k,son,l,mid);\n\tbuild(k,son+1,mid+1,r);\n\tt[i].mx=max(t[son].mx,t[son+1].mx);\n\treturn;\n}\nvoid addtag(int i,int k){\n\tadd[i]+=k;\n\tt[i].mx+=k;\n\treturn;\n}\nvoid downtag(int i){\n\tif(add[i]==0)return;\n\tint son=(i*2);\n\tif(t[son].l!=-1)addtag(son,add[i]);\n\tif(t[son+1].l!=-1)addtag(son+1,add[i]);\n\tadd[i]=0;\n\treturn;\n}\nvoid change(int i,int l,int r,int k){\n\tif(t[i].l>r||t[i].r<l)return;\n\tif(l<=t[i].l&&t[i].r<=r){\n\t\taddtag(i,k);\n\t\treturn;\n\t}\n\tdowntag(i);\n\tint son=(i*2);\n\tchange(son,l,r,k);\n\tchange(son+1,l,r,k);\n\tt[i].mx=max(t[son].mx,t[son+1].mx);\n\treturn;\n}\nint query(int i,int l,int r){\n\tif(t[i].l>r||t[i].r<l)return 0;\n\tif(l<=t[i].l&&t[i].r<=r)return t[i].mx;\n\tdowntag(i);\n\tint son=(i*2);\n\treturn max(query(son,l,r),query(son+1,l,r));\n}\nsigned main(){\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%lld\",&a);\n\t\tlst[i]=p[a];\n\t\tp[a]=i;\n\t}\n\tfor(int i=1;i<=m;++i){\n\t\tmemset(t,-1,sizeof(t));\n\t\tmemset(add,0,sizeof(add));\n\t\tbuild(i-1,1,0,n-1);\n\t\tfor(int j=1;j<=n;++j){\n\t\t\tchange(1,lst[j],j-1,1);\n\t\t\tf[i][j]=query(1,i-1,j-1);\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",f[m][n]);\n\treturn 0;\n}\n```",
        "postTime": 1643014667,
        "uid": 374929,
        "name": "SpeMars",
        "ccfLevel": 7,
        "title": "The Bakery\u306e\u9898\u89e3"
    },
    {
        "content": "##### [\u539f\u9898\u94fe\u63a5](http://codeforces.com/problemset/problem/834/D)\n\n##### \u9898\u610f\n\n\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217\uff0c\u8981\u6c42\u5c06\u5176\u5206\u6210k\u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u8d21\u732e\u662f\u8fd9\u4e00\u6bb5\u4e2d\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\uff0c\u6c42\u6700\u5927\u603b\u8d21\u732e\u3002\n\n$1\\leq n \\leq 35000,1\\leq k \\leq min(n,50)$\n\n##### \u9898\u89e3\n\n\u72b6\u6001\uff1a$f(i)(j)$\u8868\u793a\u524d$i$\u4e2a\u6570\u5206\u6210$j$\u6bb5\u7684\u6700\u5927\u8d21\u732e\n\n\u8f6c\u79fb\uff1a$f(i)(j) = max_{k=0}^{i-1}f(k)(j-1)+w(k+1,i)$\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2k)$\n\n\u89c2\u5bdf\u8f6c\u79fb\u65b9\u7a0b\uff0c\u4e0d\u96be\u53d1\u73b0$f(i)(j)$\u7684\u51b3\u7b56\u96c6\u5408\u4e0e$f(i-1)(j)$\u7684**\u51b3\u7b56\u96c6\u5408\u6709\u91cd\u5408\u6027**\uff1b\u4e14**\u9644\u52a0\u503c\u5448\u73b0\u533a\u95f4\u6027\u53d8\u5316**\uff1a\u6240\u6709$w(k',i)$\u6bd4$w(k',i-1)$\u591a1\uff0c\u5176\u4e2d$k'$\u5728$i$\u7684\u524d\u4e00\u4e2a\u540c\u7c7b\u5143\u7d20$pre(i)$\u4e4b\u540e\uff1b\u5176\u4f59$w$\u4e0d\u53d8\u3002\n\n\u533a\u95f4\u589e\u52a0\uff0c\u6700\u503c\u67e5\u8be2\uff0c\u4e0d\u59a8\u8003\u8651**\u6570\u636e\u7ed3\u6784**\u7ef4\u62a4\u3002\n\n\u5c06$f(i = 1 \\rightarrow n )(j-1)$\u5168\u90e8\u8f7d\u5165\u7ebf\u6bb5\u6811\u4e2d\u3002\u5904\u7406$f(i)(j)$\u65f6\uff0c\u5728\u7ebf\u6bb5\u6811\u4e2d\u5c06$[pre(i) , i - 1]$\u533a\u95f4\u52a01\uff0c\u518d\u5bf9$[0,i-1]$\u53d6$max$\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(nlognk)$\u3002[\u4ee3\u7801\u89c1\u6b64](https://github.com/littlewyy/luogu/blob/master/CF833Bseg.cpp)\n\n##### \u53e6\u89e3\n\n\u6839\u636e\u51b3\u7b56\u96c6\u5408\u7684\u91cd\u5408\u6027\u548c\u9644\u52a0\u503c\u4ec5\u672b\u5c3e\u4e00\u6bb5\u589e\u52a0\u7684\u6027\u8d28\uff0c\u4e0d\u96be\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a\n\n$f(i)(j)$\u76f8\u5bf9\u4e8e$f(i-1)(j)$\u7684\u6700\u4f18\u51b3\u7b56\u70b9\u5355\u8c03\u4e0d\u5de6\u79fb\u3002\n\n\u5f53dp\u5177\u6709**\u51b3\u7b56\u5355\u8c03\u6027**\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528**\u5206\u6cbb\u6cd5**\u6c42\u89e3\u3002\n\n\u5177\u4f53\u5730\uff0c\u8ba1\u7b97\u5b8c$f(1\\rightarrow n)(j-1)$\u540e\uff0c\u6574\u4f53\u5730\u8f6c\u79fb\u5230$f(1 \\rightarrow n)(j)$\u3002\u5bf9\u4e8e$f(l \\rightarrow r)(j)$\u7684\u6c42\u89e3\uff0c\u4ee4$mid = (l + r) /2 $\uff0c\u66b4\u529b\u6c42\u51fa$f(mid)(j)$\u53ca\u5176\u6700\u4f18\u51b3\u7b56\u70b9$dmid$\uff0c\u5219\u53ef\u786e\u5b9a$f(l\\rightarrow mid)(j)$\u7684\u51b3\u7b56\u70b9\u5728$dmid$\u53ca\u5176\u5de6\u8fb9\uff0c$f(mid +1 \\rightarrow r)(j)$\u7684\u51b3\u7b56\u70b9\u5728$dmid$\u53ca\u5176\u53f3\u8fb9\uff0c\u9012\u5f52\u4e0b\u53bb\u6c42\u89e3\u5373\u53ef\u3002\n\n\u5206\u6cbb\u81f3\u591a$logn$\u5c42\uff0c\u6bcf\u5c42\u65f6\u95f4\u590d\u6742\u5ea6$O(n)$\u3002\u5171\u8fdb\u884c$k$\u6b21\u5206\u6cbb\u6c42\u89e3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(nlognk)$\u3002[\u4ee3\u7801\u89c1\u6b64](https://github.com/littlewyy/luogu/blob/master/CF833Bmono.cpp)\n\n\u5b9e\u73b0\u4e0a\u7684\u7ec6\u8282\u95ee\u9898\uff1a\u6ce8\u610f\u5206\u6cbb\u7684\u610f\u4e49\u5728\u4e8e\u51b3\u7b56\u533a\u95f4\u88ab\u9650\u5b9a\u5728$[ll,lr]$\uff0c\u9012\u5f52\u51fd\u6570\u5185\u6ce8\u610f\u5faa\u73af\u7684\u8303\u56f4\u3002\u53e6\u5916\uff0c\u5feb\u901f\u6c42\u89e3$[l,r]$\u4e2d\u4e0d\u540c\u6570\u7684\u79cd\u7c7b\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u5dee\u5206+\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u3002\u82e5\u6bcf\u6b21\u8ba1\u7b97$w$\u90fd\u8c03\u7528\u7ebf\u6bb5\u6811\uff0c\u590d\u6742\u5ea6\u4f1a\u591a\u4e00\u4e2alog\uff1b\u5b9e\u9645\u4e0a\u53ea\u9700\u8c03\u75281\u6b21\uff0c\u8ba1\u7b97\u51fa$[lr+2,mid]$\u4e2d\u4e0d\u540c\u6570\u7684\u4e2a\u6570\uff0c\u5176\u4f59\u5728\u4ece\u540e\u5f80\u524d\u679a\u4e3e\u51b3\u7b56\u70b9\u65f6\u7d2f\u52a0\u5373\u53ef\u3002\n",
        "postTime": 1564898902,
        "uid": 19153,
        "name": "littlewyy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF833B \u3010The Bakery\u3011"
    },
    {
        "content": "\u6b64\u9898\u53ef\u7528\u51b3\u7b56\u5355\u8c03\u6027\u6765\u505a\n\n\u8bc1\u660e \u7565\n\n### \u5f15\u5165\n\n[\u51b3\u7b56\u5355\u8c03\u6027($My blog$)](https://www.luogu.com.cn/blog/cqj/jue-ce-dan-diao-xing-you-hua-dp-fen-zhi-you-hua-jue-ce-dan-diao-xing)\n\n### \u601d\u8def\n\n\u4e8e\u662f\u6b64\u9898\u4fbf\u53ef\u5148\u7528\u5206\u6cbb\u4f18\u5316\u51b3\u7b56\u5355\u8c03\u6027\n\n\n\u65f6\u95f4 $O(n^2*k)$ $101 tests$ \u4e2d \u53ea\u80fd\u8fc7\u524d$9$\u4e2a $9pts$ ?\n```cpp\n#include <map>\n#include <string>\n#include <cstdio>\n#include <string>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#define reg register int\n#define isdigit(x) ('0' <= x&&x <= '9')\ntemplate<typename T>\ninline T Read(T Type)\n{\n\tT x = 0,f = 1;\n\tchar a = getchar();\n\twhile(!isdigit(a)) {if(a == '-') f = -1;a = getchar();}\n\twhile(isdigit(a)) {x = (x << 1) + (x << 3) + (a ^ '0');a = getchar();}\n\treturn x * f;\n}\nconst int MAXN = 35010,inf = MAXN;\nint a[MAXN],dp[MAXN][55];\nbool vis[MAXN];\ninline int cost(int l,int r)\n{\n\tint res = 0;\n\tfor(reg i = l;i <= r;i++)\n\t{\n\t\tif(!vis[a[i]]) res++;\n\t\tvis[a[i]] = 1;\n\t}\n\tfor(reg i = 1;i <= r;i++) vis[a[i]] = 0;\t\n\treturn res;\n}\ninline void dfs(int k,int l,int r,int opl,int opr)\n{\n\tif(l > r) return;\n\tint mid = l + r >> 1,maxl = -inf,id;\n\tfor(reg i = opl;i <= min(opr,mid);i++)\n\t{\n\t\tint cur = dp[i - 1][k - 1] + cost(i,mid);\n\t\tif(cur > maxl) maxl = cur,id = i;\n\t}\n\tdp[mid][k] = maxl;\n\tdfs(k,l,mid - 1,opl,id);\n\tdfs(k,mid + 1,r,id,opr);\n}\nint main()\n{\n\tint n = Read(1),k = Read(1);\n\tfor(reg i = 1;i <= n;i++)\n\t\ta[i] = Read(1);\n\tfor(reg i = 1;i <= k;i++) dfs(i,1,n,1,n);\n\tprintf(\"%d\\n\",dp[n][k]);\n\treturn 0;\n}\n```\n\n\u8003\u8651\u4f18\u5316 \n\n\u89c2\u5bdf\u4ee3\u7801 \u53d1\u73b0$cost$(\u67e5\u8be2\u533a\u95f4\u4e0d\u540c\u6570\u4e2a\u6570)\u5c31\u6709\u4e00\u5c42$n$\n\n\u8003\u8651\u964d\u6210$O(1)$ \u4f46\u9884\u5904\u7406\u662f$O(n^2)$\n\n\u4e8e\u662f\u53ea\u80fd\u964d\u6210$O(log_2^n)$\n\n\u4ece\u6211\u4eec\u5b66\u4e60\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u5bfb\u627e\n\n\u53d1\u73b0\u4e3b\u5e2d\u6811\u6070\u597d\u53ef\u4ee5\u80dc\u4efb\n\n\u7528\u4e3b\u5e2d\u6811$A$\u6389\u8fd9\u9053\u9898\n\n[SP3267 DQUERY - D-query](https://www.luogu.com.cn/problem/SP3267)\n\n\u518d\u7c98\u8fc7\u6765\u5c31\u884c\u4e86\n\n\u7136\u800c\u6211\u8fd9\u9053\u9898\u5199\u7684\u83ab\u961f \u73b0\u5728\u53c8\u5199\u4e86\u4e00\u904d\u4e3b\u5e2d\u6811 233\n\n### $Code$\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n*log_2^n*k)$\n\n```cpp\n#include <map>\n#include <string>\n#include <cstdio>\n#include <string>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#define reg register int\n#define isdigit(x) ('0' <= x&&x <= '9')\ntemplate<typename T>\ninline T Read(T Type)\n{\n\tT x = 0,f = 1;\n\tchar a = getchar();\n\twhile(!isdigit(a)) {if(a == '-') f = -1;a = getchar();}\n\twhile(isdigit(a)) {x = (x << 1) + (x << 3) + (a ^ '0');a = getchar();}\n\treturn x * f;\n}\nconst int MAXN = 35010,inf = MAXN;\nint a[MAXN],dp[MAXN][55],n,k;\nnamespace segment_tree\n{\n\tstruct node\n\t{\n\t\tint l,r,val;\n\t}tree[MAXN * 40];\n\tmap<int,int> vis;\n\tint cnt,root[MAXN];\n\tinline int update(int k,int l,int r,int pos,int v)\n\t{\n\t    tree[++cnt] = tree[k],tree[cnt].val += v;\n\t    k = cnt;\n\t    if(l == r) return k;\n\t    int mid = l + r >> 1;\n\t    if(pos <= mid) tree[k].l = update(tree[k].l,l,mid,pos,v);\n\t    else tree[k].r = update(tree[k].r,mid + 1,r,pos,v);\n\t    return k;\n\t}\n\tinline int query(int k,int pos,int l,int r)\n\t{\n\t    if(l >= pos) return tree[k].val;\n\t    int mid = l + r >> 1;\n\t    if(pos <= mid) return query(tree[k].l,pos,l,mid) + tree[tree[k].r].val;\n\t    return query(tree[k].r,pos,mid + 1,r);\n\t}\n\tinline void init()\n\t{\n\t\tn = Read(1),k = Read(1);\n\t\troot[0] = tree[0].l = tree[0].r = tree[0].val = 0;\n\t\tfor(reg i = 1;i <= n;i++)\n\t\t{\n\t\t\tint x = Read(1);\n\t\t\tif(!vis[x]) root[i] = update(root[i - 1],1,n,i,1);\n\t\t\telse {\n\t\t\t\tint k = update(root[i - 1],1,n,vis[x],-1);\n\t\t\t\troot[i] = update(k,1,n,i,1);\n\t\t\t}\n\t\t\tvis[x] = i;\n\t\t}\n\t}\n}\nusing namespace segment_tree;\ninline int cost(int l,int r) {return query(root[r],l,1,n);}\ninline void dfs(int k,int l,int r,int opl,int opr)\n{\n\tif(l > r) return;\n\tint mid = l + r >> 1,maxl = -inf,id;\n\tfor(reg i = opl;i <= min(opr,mid);i++)\n\t{\n\t\tint cur = dp[i - 1][k - 1] + cost(i,mid);\n\t\tif(cur > maxl) maxl = cur,id = i;\n\t}\n\tdp[mid][k] = maxl;\n\tdfs(k,l,mid - 1,opl,id);\n\tdfs(k,mid + 1,r,id,opr);\n}\nint main()\n{\n\tinit();\n\tfor(reg i = 1;i <= k;i++) dfs(i,1,n,1,n);\n\tprintf(\"%d\\n\",dp[n][k]);\n\treturn 0;\n}\n```\n",
        "postTime": 1575956679,
        "uid": 73992,
        "name": "resftlmuttmotw",
        "ccfLevel": 0,
        "title": "CF833B The Bakery"
    },
    {
        "content": "1 A \u4e86\n\n\u539f\u56e0\u7adf\u662f\u505a\u4e86\u7c7b\u4f3c\u7684\u9898\uff1a [ hdu \u53cc\u500d\u4e0d\u5b8c\u5168\u7ecf\u9a8c](http://acm.hdu.edu.cn/showproblem.php?pid=6070)\n\n\u505a\u6cd5\u6781\u5176\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u4e00\u4e2a\u662f\u4e8c\u5206\u4e00\u4e2a\u662f dp\n\n\u5927\u6982\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\uff0c\u4e00\u770b\u5c31\u662f nk \u8981\u7684\uff0c\u7136\u540e nk \u4e4b\u540e\u597d\u50cf\u8fd8\u86ee\u5bcc\u8db3\uff08\u5426\u5219 n \u5c31 1e5 \u4e86\uff09\uff0c\u90a3\u4e48\u5927\u80c6\u731c\u6d4b\u8fd8\u6709\u4e2a log \uff0c\u90a3\u4e48\u4f30\u8ba1\u5c31\u662f\u4e2a $n ~k\\log n  $ \u7684\u7ebf\u6bb5\u6811\u4f18\u5316 dp \u4e86\uff0c\u4e8b\u5b9e\u4e0a\u8bc1\u660e\u786e\u5b9e\u662f\u8fd9\u6837\n\n\u7136\u540e\u96be\u70b9\u5c31\u662f\u8003\u8651\u4e00\u6bb5\u4e2d\u51fa\u73b0\u7684**\u4e0d\u540c\u7684**\u6570\u7684\u4e2a\u6570\n\n\u8fd9\u4e2a\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 i \u8bb0\u4e00\u4e0b\u4e0a\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e  $p[i]$ \uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u533a\u95f4\u8986\u76d6\u7684\u65f6\u5019\u8986\u76d6  $p[i]$ ~ $i-1$ \u5c31\u597d\u4e86\n\n\u5176\u6b21\u90fd\u662f\u5c0f\u7ec6\u8282\n\n# Code\n\n\u5927\u5e38\u6570 Judge\n\n```\n//by Judge (zlw ak ioi)\n#pragma GCC optimize(\"Ofast\")\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define Rg register\n#define fp(i,a,b) for(Rg int i=(a),I=(b)+1;i<I;++i)\n#define fd(i,a,b) for(Rg int i=(a),I=(b)-1;i>I;--i)\n#define db double\nusing namespace std;\nconst int M=1e5+3;\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ntemplate<class T>inline T Max(T a,T b){return a>b?a:b;}\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} int n,k; arr a,p,f,las;\nnamespace SegT{ int t[M<<2],tag[M<<2];\n#define ls k<<1\n#define rs k<<1|1\n#define len (r-l+1)\n#define lson ls,l,mid\n#define rson rs,mid+1,r\n\tinline void Add(int k,int v){ tag[k]+=v,t[k]+=v; }\n\tinline void Psd(int k){ if(!tag[k]) return ;\n\t\tAdd(ls,tag[k]),Add(rs,tag[k]),tag[k]=0;\n\t}\n\tvoid Bud(int k,int l,int r){ tag[k]=0;\n\t\tif(l==r) return t[k]=f[l],void(); int mid=(l+r)>>1;\n\t\tBud(lson),Bud(rson),t[k]=Max(t[ls],t[rs]);\n\t}\n\tvoid Upd(int k,int l,int r,int L,int R){\n\t\tif(L<=l&&r<=R) return Add(k,1),void();\n\t\tif(l>R||L>r) return ; int mid=(l+r)>>1; Psd(k);\n\t\tUpd(lson,L,R),Upd(rson,L,R),t[k]=Max(t[ls],t[rs]);\n\t}\n\tint Que(int k,int l,int r,int R){ int mid=(l+r)>>1;\n\t\tif(l>R) return 0; if(r<=R) return t[k];\n\t\treturn Psd(k),Max(Que(lson,R),Que(rson,R));\n\t}\n} using namespace SegT;\nint main(){ n=read(),k=read(); fp(i,1,n) las[i]=0;\n\tfp(i,1,n) a[i]=read(),p[i]=las[a[i]],\n\t\tf[i]=f[i-1]+!las[a[i]],las[a[i]]=i;\n\tfp(i,2,k){ Bud(1,1,n);\n\t\tfp(j,1,n) Upd(1,1,n,p[j],j-1),f[j]=Que(1,1,n,j);\n\t} return !printf(\"%d\\n\",f[n]);\n}\n```\n\n\n\n\n",
        "postTime": 1572315116,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF833B \u3010The Bakery\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u91c7\u7528\u4e86\u7ebf\u6bb5\u6811\u4f18\u5316\u52a8\u6001\u89c4\u5212\u7684\u65b9\u6cd5\n\n```\nf[i][j] = max(f[l][j - 1] + cnt[l + 1][j]);\n```\n\n\u66b4\u529b\u663e\u7136\u8fc7\u4e0d\u4e86 \u8003\u8651\u4f18\u5316\n\n\u7ebf\u6bb5\u6811 \u53ef\u4ee5\u4f18\u5316\n\n\u626b\u4e00\u904d\u5f53\u524d\u6570\u7ec4 $pre$\u8868\u793a$a[i]$\u4e2a\u6570\u53ef\u4ee5\u5f71\u54cd\u5230\u7684\u6570\u7684\u7b2c\u4e00\u4e2a \u4e5f\u5c31\u662f\u524d\u9762\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u6570\u7684\u540e\u9762\n\n\u90a3\u4e48\u7b2c$i$\u4e2a\u6570\u53ea\u80fd\u5bf9$pre[i], i$\u4ea7\u751f\u5f71\u54cd\n\n\u90a3\u4e48\u7ebf\u6bb5\u6811\u5c31\u662f\u8d1f\u8d23\u8fd9\u6837\u4e00\u4e2a\u64cd\u4f5c\n\n\u5f53\u524d\u7ebf\u6bb5\u6570$t[p].dat$\u7ef4\u62a4$f[i - 1][l - 1]$\u524d\u9762$i - 1$\u4e2a\u5206\u6bb5\u5230\u4e86\u7b2ci\u4e2a\u6570\n\n\u7136\u540e\u4fee\u6539\u4e4b\u540e\u53d6$max$\u5373\u53ef\n\n# code\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst int INF = 2139062143;\n\n#define DEBUG(x) std::cerr << #x << ' = ' << x << std::endl\n\ninline ll read() {\n    ll f = 1, x = 0;char ch;\n    do {ch = getchar();if (ch == '-')f = -1;} while (ch > '9' || ch < '0');\n    do {x = x * 10 + ch - '0';ch = getchar();} while (ch >= '0' && ch <= '9');\n    return f * x;\n}\n\nconst int MAX_N = 35000 + 5;\n\nconst int MAX_K = 50 + 5;\n\nint n, k, a[MAX_N], pre[MAX_N], pos[MAX_N], f[MAX_K][MAX_N];\n\nstruct segment_tree {\n\tint l, r, dat, tag;\n} t[MAX_N << 2];\n\n#define ls(p) (p << 1)\n#define rs(p) (p << 1 | 1)\n\nvoid build (int p, int l, int r, int now) {\n\tt[p].l = l; t[p].r = r;\n\tif (l == r) {\n\t\tt[p].dat = f[now][l - 1];\n\t\treturn; \n\t}\n\tint mid = (l + r) >> 1;\n\tbuild (ls(p), l, mid, now);\n\tbuild (rs(p), mid + 1, r, now);\n\tt[p].dat = max(t[ls(p)].dat, t[rs(p)].dat);\n}\n\nvoid push_down (int p) {\n\tif (t[p].tag == 0) return;\n\tt[ls(p)].dat += t[p].tag;\n\tt[rs(p)].dat += t[p].tag;\n\tt[ls(p)].tag += t[p].tag;\n\tt[rs(p)].tag += t[p].tag;\n\tt[p].tag = 0;\n}\n\nvoid change (int p, int l, int r, int v) {\n\tif (l <= t[p].l && t[p].r <= r) {\n\t\tt[p].dat += v;\n\t\tt[p].tag += v;\n\t\treturn ;\n\t}\n\tpush_down(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif (l <= mid)\n\t\tchange (ls(p), l, r, v);\n\tif (r > mid)\n\t\tchange (rs(p), l, r, v);\n\tt[p].dat = max(t[ls(p)].dat, t[rs(p)].dat);\n}\n\ninline int query (int p, int l, int r) {\n\tif (l <= t[p].l && t[p].r <= r)\n\t\treturn t[p].dat;\n\tpush_down(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tint ans = 0;\n\tif (l <= mid)\n\t\tans = query (ls(p), l, r);\n\tif (r > mid)\n\t\tans = max(ans, query(rs(p), l, r));\n\treturn ans;\n}\n\nint main() {\n\tn = read(); k = read();\n\tfor (int i = 1; i <= n; i ++ ) {\n\t\tint t = read();\n\t\tpre[i] = pos[t] + 1, pos[t] = i;\n\t}\n\tfor (int i = 1; i <= k; i ++ ) {\n\t\tmemset (t, 0, sizeof(t));\n\t\tbuild (1, 1, n, i - 1);\t\n\t\tfor (int j = 1; j <= n; j ++ ) {\n\t\t\tchange (1, pre[j], j, 1);\n\t\t\tf[i][j] = query (1, 1, j);\n\t\t}\n\t}\n\tprintf(\"%d\\n\", f[k][n]);\n\treturn 0;\n}\n```",
        "postTime": 1570152278,
        "uid": 107377,
        "name": "Cryin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF833B \u3010The Bakery\u3011"
    },
    {
        "content": "# Preface\n\n\u6570\u636e\u7ed3\u6784\u4f18\u5316 DP \u597d\u9898\u3002\n\n\u8c03\u4e86\u5f88\u4e45\u3002\u3002\u3002\n\n# Solution\n\n* \u8003\u8651\u66b4\u529b DP\n\n\u4e0d\u96be\u60f3\u5230 $f_{i,j}$ \u8868\u793a\u524d $i$ \u4e2a\u6570\u5206\u4e3a $j$ \u6bb5\u7684\u6700\u5927\u4ef7\u503c\u3002\n\n\u90a3\u4e48\u4e0d\u96be\u63a8\u51fa\uff1a\n\n$f_{i,j}\\gets \\max_{k=0}^{i-1} f_{k,j-1}+p(k+1,i)$\n\n\u7136\u540e\u590d\u6742\u5ea6\u5c31 $\\Theta(n^2k)$\u3002\n\n\u867d\u7136\u8bf4 $p$ \u53ef\u4ee5\u4f18\u5316\u6389\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u4ecd\u7136\u4e0d\u5141\u8bb8\u3002\n\n* \u8003\u8651\u4f18\u5316\n\n\u53d1\u73b0\u8fd9\u4e2a\u9898\u7684\u4e00\u4e9b\u7279\u70b9\u3002\n\n\u65b9\u7a0b\u7684 $j$ \u53ea\u8ddf $j-1$ \u6709\u5173\u7cfb\uff0c\u8fd9\u8ba9\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u67e5\u8be2\u4e0a\u4e00\u5c42\u7684\u6700\u5927\u503c\u3002\n\n\u4f46\u662f\u95ee\u9898\u5728\u4e8e $p$ \u51fd\u6570\u4e0d\u65b9\u4fbf\u4f7f\u7528\u3002\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8f6c\u6362\u4e00\u4e0b\u3002\n\n\u6211\u4eec\u8bbe\u4f4d\u7f6e\u4e3a $i$\uff0c\u8868\u793a\u7684\u6570\u4e3a $a_i$\u3002\n\n\u4e0a\u4e00\u4e2a\u662f $a_i$ \u7684\u6570\u662f $pre_{a_i}$\n\n\u90a3\u4e48 $a_i$ \u7684\u8d21\u732e\u5c31\u53ea\u6709 $[pre_{a_i}+1,i]$ \u8fd9\u4e9b\u4f4d\u7f6e\u4e0a\u7684\u6570\u6709\u8d21\u732e\u3002\n\n\u90a3\u4e48\u4e0d\u96be\u60f3\u5230\u5229\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\u548c\u67e5\u8be2\u6700\u5927\u503c\u7684\u64cd\u4f5c\u3002\n\n\u590d\u6742\u5ea6\u4e3a $\\Theta(nk\\log n)$\n\n\u6ce8\u610f\u5230\u4e00\u4e9b\u7ec6\u8282\u3002\n\n\u8003\u8651 DP \u7684\u5b9a\u4e49\uff0c\u4e0d\u8981\u628a\u533a\u95f4\u7ed9\u52a0\u9519\u4e86\u3002\n\n\u8fd8\u9700\u8981\u6ce8\u610f\u5230\u5b9e\u65f6\u8fdb\u884c\uff0c\u4e0d\u7136\u7b54\u6848\u53ef\u80fd\u4f1a\u5b58\u5728\u95ee\u9898\u3002\n\n# Code\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\n#define il inline\nusing namespace std;\nconst int N=35005;\nconst int M=55;\nint n,m;\nint a[N];\nint dp[N][M],pre[N],id[N];\nint vis[N],p[N];\nstruct Segment_Tree{\n\tstruct node{\n\t\tint l,r,val,add;\n\t}t[4*N];\n\tvoid pushdown(int p){\n\t\tif(t[p].add){\n\t\t\tint l=p<<1,r=p<<1|1;\n\t\t\tt[l].val+=t[p].add;\n\t\t\tt[r].val+=t[p].add;\n\t\t\tt[l].add+=t[p].add;\n\t\t\tt[r].add+=t[p].add;\n\t\t\tt[p].add=0;\n\t\t}\n\t}\n\tvoid clear(int i,int p,int l,int r){\n\t\tt[p].l=l,t[p].r=r;\n\t\tif(l==r){\n\t\t\tt[p].val=dp[l][i];\n\t\t\treturn ;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tclear(i,p<<1,l,mid);\n\t\tclear(i,p<<1|1,mid+1,r);\n\t\tt[p].val=max(t[p<<1].val,t[p<<1|1].val);\n\t}\n\tvoid update(int p,int l,int r,int x){\n\t\tif(t[p].l>=l && t[p].r<=r){\n\t\t\tt[p].add+=x,t[p].val+=x;\n\t\t\treturn ;\n\t\t}\n\t\tpushdown(p);\n\t\tint mid=t[p].l+t[p].r>>1;\n\t\tif(l<=mid) update(p<<1,l,r,x);\n\t\tif(r>mid) update(p<<1|1,l,r,x);\n\t\tt[p].val=max(t[p<<1].val,t[p<<1|1].val);\n\t}\n\tint ask(int p,int l,int r){\n\t\tif(t[p].l>=l && t[p].r<=r) return t[p].val;\n\t\tpushdown(p);\n\t\tint mid=t[p].l+t[p].r>>1,res=0;\n\t\tif(l<=mid) res=ask(p<<1,l,r);\n\t\tif(r>mid) res=max(res,ask(p<<1|1,l,r));\n\t\treturn res;\n\t}\n}tr[M];\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]),pre[i]=id[a[i]],id[a[i]]=i;\n\tfor(int i=1;i<=n;i++){\n\t\tdp[i][1]=dp[i-1][1];\n\t\tif(!vis[a[i]]) vis[a[i]]=1,dp[i][1]++;\n\t}\n\tfor(int j=2;j<=m;j++){\n\t\ttr[j-1].clear(j-1,1,0,n);\n\t\tfor(int i=1;i<=n;i++){\n\t\t\ttr[j-1].update(1,pre[i],i-1,1);\n\t\t\tdp[i][j]=tr[j-1].ask(1,0,i-1);\n\t\t}\n\t}\n\tprintf(\"%d\",dp[n][m]);\n\treturn 0;\t\t\t\t\n}\n```",
        "postTime": 1648898850,
        "uid": 364122,
        "name": "BigJoker",
        "ccfLevel": 6,
        "title": "CF833B The Bakery-\u9898\u89e3\u62a5\u544a"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Coros-Trusds/p/15894491.html)\n\n# \u9898\u76ee\u5927\u610f\n\n\u5c06\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\u5206\u4e3a $m$ \u6bb5\uff0c\u4f7f\u5f97\u603b\u4ef7\u503c\u6700\u5927\u3002\n\n\u4e00\u6bb5\u533a\u95f4\u7684\u4ef7\u503c\u8868\u793a\u4e3a\u533a\u95f4\u5185\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\u3002\n\n# \u9898\u76ee\u5206\u6790\n\n\u5148\u4e0d\u770b\u6570\u636e\u8303\u56f4\uff0c\u8003\u8651\u6734\u7d20 $\\rm dp$\uff1a\n\n\u4ee4 $dp[i][j]$ \u8868\u793a\u524d $j$ \u4e2a\u6570\u88ab\u5206\u6210\u4e86 $i$ \u6bb5\u7684\u6700\u5927\u603b\u4ef7\u503c\uff0c\u5f53\u524d\u72b6\u6001\u663e\u7136\u7531\u5206\u548c\u4e0d\u5206\u533a\u5206\u5f00\uff0c\u5373\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a $dp[i][j]=\\max\\{dp[i-1][k]+val(k+1,j)\\}(1\\le k\\lt j)$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n^3k)$\uff0c\u663e\u7136 $\\verb!T!$ \u98de\u3002\n\n\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5927\u503c\uff0c\u5b58\u50a8 $dp[i-1][j]$\uff0c\u7136\u540e\u4f9d\u6b21\u8003\u8651\u6bcf\u4e2a\u70b9\u7684\u8d21\u732e\uff0c\u663e\u7136\u662f\u5bf9\u533a\u95f4 $[last[i]+1,i]$ \u505a\u8d21\u732e $1$\uff0c$last[i]$ \u8868\u793a\u5e8f\u5217\u4e2d\u4e0a\u4e00\u4e2a\u503c\u4e3a $a[i]$ \u7684\u6570\u7684\u4f4d\u7f6e\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4f1a\u5bf9\u8fd9\u6bb5\u533a\u95f4\u4ea7\u751f\u8d21\u732e\uff0c\u53ef\u4ee5\u770b\u51fa\u6765\u5982\u679c\u4e00\u4e2a\u503c\u5728\u533a\u95f4\u4e2d\u51fa\u73b0\u4e86\u5f88\u591a\u6b21\uff0c\u90a3\u8fd9\u4e9b\u91cd\u590d\u7684\u6570\u90fd\u4e0d\u4f1a\u4ea7\u751f\u8d21\u732e\u4e86\u3002\u4f18\u5316\u540e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(nk\\log n)$\u3002\n\n# \u4ee3\u7801\n\n```cpp\n//2022/2/13\n//2022/2/14\n#define _CRT_SECURE_NO_WARNINGS\n#include <iostream>\n#include <cstdio>\n#include <climits>//need \"INT_MAX\",\"INT_MIN\"\n#include <cstring>//need \"memset\"\n#include <algorithm>\n#define enter() putchar(10)\n#define debug(c,que) cerr << #c << \" = \" << c << que\n#define cek(c) puts(c)\n#define blow(arr,st,ed,w) for(register int i = (st);i <= (ed); ++ i) cout << arr[i] << w;\n#define speed_up() cin.tie(0),cout.tie(0)\n#define endl \"\\n\"\n#define mst(a,k) memset(a,k,sizeof(a))\n#define Abs(x) ((x) > 0 ? (x) : (-x))\n#define GET(x) ((x) < 0 ? (x) + mod : (x))\n#define MOD(x) \\\n\t((GET(x) >= mod) ? GET(x) - mod : GET(x))\nnamespace Newstd {\n\tchar buf[1 << 21],*p1 = buf,*p2 = buf;\n\tinline int getc() {\n\t\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1 << 21,stdin),p1 == p2) ? EOF : *p1 ++;\n\t}\n\tinline int read() {\n\t\tint ret = 0,f = 0;char ch = getc();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif(ch == '-') f = 1;\n\t\t\tch = getc();\n\t\t}\n\t\twhile (isdigit(ch)) {\n\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\tch = getc();\n\t\t}\n\t\treturn f ? -ret : ret;\n\t}\n\tinline void write(int x) {\n\t\tif(x < 0) {\n\t\t\tputchar('-');\n\t\t\tx = -x;\n\t\t}\n\t\tif(x > 9) write(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nusing namespace Newstd;\nusing namespace std;\n\nconst int ma1 = 3.5e4 + 5,ma2 = 55;\nint a[ma1],pre[ma1],lst[ma1],dp[ma2][ma1];\n//dp[i][j]:\u524d j \u4e2a\u6570\u5206\u6210 i \u6bb5\u7684\u6700\u5927\u4ef7\u503c\u548c\nint n,m;\n\nstruct Segment_Tree {\n\tstruct Node {\n\t\tint l,r;\n\t\tint tag,Max;\n\t} node[ma1 << 2];\n\t#define lson (p << 1)\n\t#define rson (p << 1 | 1)\n\tinline void pushup(int p) {\n\t\tnode[p].Max = max(node[lson].Max,node[rson].Max);\n\t}\n\tinline void build(int p,int l,int r,int k) {\n\t\tnode[p].l = l,node[p].r = r,node[p].tag = 0,node[p].Max = 0;\n\t\tif (l == r) {\n\t\t\tnode[p].Max = dp[k][l];\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tbuild(lson,l,mid,k),build(rson,mid + 1,r,k);\n\t\tpushup(p);\n\t}\n\tinline void pushdown(int p) {\n\t\tif (node[p].tag) {\n\t\t\tnode[lson].tag += node[p].tag,node[rson].tag += node[p].tag;\n\t\t\tnode[lson].Max += node[p].tag,node[rson].Max += node[p].tag;\n\t\t\tnode[p].tag = 0;\n\t\t}\n\t}\n\tinline void update(int x,int y,int p,int k) {\n\t\tif (x <= node[p].l && node[p].r <= y) {\n\t\t\tnode[p].tag += k,node[p].Max += k;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(p);\n\t\tint mid = node[p].l + node[p].r >> 1;\n\t\tif (x <= mid) update(x,y,lson,k);\n\t\tif (y > mid) update(x,y,rson,k);\n\t\tpushup(p);\n\t}\n\tinline int query(int x,int y,int p) {\n\t\tif (x <= node[p].l && node[p].r <= y) {\n\t\t\treturn node[p].Max;\n\t\t}\n\t\tpushdown(p);\n\t\tint mid = node[p].l + node[p].r >> 1,res = 0;\n\t\tif (x <= mid) res = max(res,query(x,y,lson));\n\t\tif (y > mid) res = max(res,query(x,y,rson));\n\t\treturn res;\n\t}\n\t#undef lson\n\t#undef rson\n} seg;\nint main(void) {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\",\"r\",stdin);\n#endif\n\tn = read(),m = read();\n\tfor (register int i = 1;i <= n; ++ i) a[i] = read();\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tlst[i] = pre[a[i]];\n\t\tpre[a[i]] = i;\n\t}\n\tfor (register int i = 1;i <= m; ++ i) {\n\t\tseg.build(1,0,n - 1,i - 1);\n\t\tfor (register int j = 1;j <= n; ++ j) {\n\t\t\tseg.update(lst[j] + 1,j,1,1);\n\t\t\tdp[i][j] = seg.query(1,j,1);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",dp[m][n]);\n\n\treturn 0;\n}\n```",
        "postTime": 1644828991,
        "uid": 430409,
        "name": "Coros_Trusds",
        "ccfLevel": 6,
        "title": "CF833B The Bakery"
    },
    {
        "content": "[CF833B The Bakery](https://www.luogu.com.cn/problem/CF833B)\n\n#### \u7ebf\u6bb5\u6811\u4f18\u5316dp\n\n\u9996\u5148\u5982\u679c\u9762\u5bf9\u5c0f\u6570\u636e\u8303\u56f4\uff0c\u6211\u4eec\u4e0d\u96be\u63a8\u51fa$kn^2dp$\uff0c\u5373\u626b\u63cf$k$\u8f6e.\u6211\u4eec\u82e5\u8981\u6c42$f[i][j]$,\u5219\u4ece$i$\u51fa\u53d1\u5f80\u524d\u626b\u4e00\u904d\uff0c\u6bcf\u6b21\u9047\u5230\u6ca1\u9047\u89c1\u8fc7\u7684\u6570\u5219$cnt$\u52a0\u4e0a$1$,\u6240\u4ee5$f[i][j]=max{f[k][j-1]+cnt}$\n\n\u6211\u4eec\u53d1\u73b0\u6bcf\u6b21$O(n)$\u626b\u4e00\u904d\u6c42$cnt$\u6570\u7ec4\u6d6a\u8d39\u5927\u91cf\u65f6\u95f4\uff0c\u4e8e\u662f\u60f3\u529e\u6cd5\u4f18\u5316.\n\n\u8bbe$g(i, j)$\u8868\u793a\u4ece$i$\u5230$j$\u4e2d\u4e0d\u540c\u7684\u6570\u5b57\u4e2a\u6570.\u6211\u4eec\u56fa\u5b9a\u4f4f$j$\uff0c\u90a3\u4e48$num[j]$\u53ea\u5bf9\u4e0a\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4f4d\u7f6e\u5230$j$\u8fd9\u91cc\u6709\u8d21\u732e\u3002\u6240\u4ee5\u7ef4\u62a4\u4e00\u4e2a$last$\u6570\u7ec4\uff0c$last[x]$\u8868\u793a$x$\u8fd9\u4e2a\u6570\u5b57\u4e0a\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e.\n\n\u63a5\u4e0b\u6765\u5229\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u6211\u4eec\u7ef4\u62a4$k$\u8f6e\uff0c\u7531\u4e8e$k$\u5f88\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u5f88\u5927\u7684\u64cd\u4f5c\u7a7a\u95f4.\u6bcf\u6b21\u65b0\u5f00\u4e00\u8f6e\u7684\u65f6\u5019\u91cd\u6784\u7ebf\u6bb5\u6811\uff0c\u7b2c$k$\u8f6e\u5c06\u4e0a\u9762$l$\u4f4d\u7f6e\u7684\u503c\u8868\u793a\u4e3a$f[l-1][k]$\u65b9\u4fbf\u8f6c\u79fb,\u6bcf\u6b21\u626b\u63cf$f[i][k]$\u65f6\uff0c\u5c06\u7ebf\u6bb5\u6811\u4e0a$[last[i]+1, k]$\u7684\u90e8\u5206\u52a0\u4e0a$1$.\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u7ebf\u6bb5\u6811\u533a\u95f4\u52a0,\u533a\u95f4\u67e5\u8be2\u6700\u5927\u503c\u5373\u53ef.\n\n$O(kn \\log n)$\n\n\u6838\u5fc3\u4ee3\u7801\n\n```cpp\nconst ll N=3.5e4+5;\n\nll n, k;\nll f[N][51];\nll pos[N], last[N];\nll num[N];\nstruct segment{\n\tll dat[N<<2], lazy[N<<2];\n\t\n\tinline void build(ll p, ll l, ll r, ll now){\n\t\tif (l==r) return (void) (dat[p]=f[l-1][now]);\n\t\tll mid=l+r>>1;\n\t\tbuild(p<<1, l, mid, now); \n\t\tbuild(p<<1|1, mid+1, r, now);\n\t\tdat[p]=max(dat[p<<1], dat[p<<1|1]);\n\t}\n\t\n\tinline void pushup(ll p, ll val){\n\t\tdat[p]+=val; lazy[p]+=val;\n\t}\n\t\n\tinline void pushdown(ll p, ll l, ll r){\n\t\tif (!lazy[p] || l==r) return;\n\t\tpushup(p<<1, lazy[p]); pushup(p<<1|1, lazy[p]);\n\t\treturn (void)(lazy[p]=0);\n\t}\n\t\n\tinline void update(ll p, ll l, ll r, ll u, ll v, ll val){\n\t\tpushdown(p, l, r);\n\t\tif (u<=l && r<=v) return pushup(p, val);\n\t\tll mid=l+r>>1;\n\t\tif (u<=mid) update(p<<1, l, mid, u, v, val);\n\t\tif (v>mid) update(p<<1|1, mid+1, r, u, v, val);\n\t\tdat[p]=max(dat[p<<1], dat[p<<1|1]);\n\t}\n\t\n\tinline ll query(ll p, ll l, ll r, ll u, ll v){\n\t\tpushdown(p, l, r);\n\t\tif (u<=l && r<=v) return dat[p];\n\t\tll mid=l+r>>1, res=0;\n\t\tif (u<=mid) chkmax(res, query(p<<1, l, mid, u, v));\n\t\tif (v>mid) chkmax(res, query(p<<1|1, mid+1, r, u, v));\n\t\treturn res;\n\t}\n}tree[51];\n\nint main(){\n\tread(n); read(k);\n\tfor (R ll i=1; i<=n; i++){\n\t\tread(num[i]);\n\t\tlast[i]=pos[num[i]];\n\t\tpos[num[i]]=i;\n\t}\n\t\n\tfor (R ll i=1; i<=k; i++){\n\t\ttree[i].build(1, 1, n, i-1);\n\t\tfor (R ll j=1; j<=n; j++){\n\t\t\ttree[i].update(1, 1, n, last[j]+1, j, 1);\n\t\t\tf[j][i]=tree[i].query(1, 1, n, 1, j);\n\t\t}\n\t}\n\twriteln(f[n][k]);\n}\n```\n",
        "postTime": 1605251492,
        "uid": 220285,
        "name": "Saber_Master",
        "ccfLevel": 7,
        "title": "CF833B \u3010The Bakery\u3011"
    },
    {
        "content": "\u9996\u5148\u6734\u7d20\u7684\u66b4\u529bDP\u6bd4\u8f83\u663e\u7136\n\n$f[i][j] = max\\{f[k][j - 1] + val(k + 1, i)\\}$\n\n\u5176\u4e2d$f[i][j]$\u8868\u793a\u5c06\u524d$i$\u4e2a\u5206\u4e3a$j$\u6bb5\u7684\u6700\u5927\u4ef7\u503c\uff0c$val(i, j)$\u8868\u793a\u5c06$i$\u5230$j$\u5206\u4e3a\u4e00\u6bb5\u65f6\u8fd9\u4e00\u6bb5\u7684\u4ef7\u503c\n\n\u90a3\u4e48\u663e\u7136$j - 1 <= k <= i - 1$\uff08\u81f3\u5c11\u5206\u4e3a$j - 1$\u6bb5\uff0c \u81f3\u591a$i$\u4e3a\u4e00\u6bb5\uff09\n\n\u5982\u679c\u66b4\u529b\u4e0a\u7684\u8bdd\u590d\u6742\u5ea6\u662f$O(kn^2)$\n\n\u9996\u5148$O(nk)$\u662f\u65e0\u6cd5\u4f18\u5316\u7684\uff0c\u6bd5\u7adf\u6570\u7ec4\u90fd\u6709$nk$\u4e86\n\n\u6211\u4eec\u8003\u8651\u5982\u679c\u4f18\u5316\u8ba1\u7b97$val(i,j)$\n\n\u8003\u8651\u4e00\u4e2a\u6570\u5b57\u5bf9\u7b54\u6848\u7684\u8d21\u732e\n\n**\u663e\u7136\u53ea\u6709\u5728$[pre[a[i]] + 1, i]$\u5206\u6bb5\u65f6$a[i]$\u624d\u4f1a\u5bf9\u8fd9\u91cc\u7684\u7b54\u6848\u6709\u8d21\u732e**\n\n\u5176\u4e2d$pre[a[i]]$\u8868\u793a$a[i]$\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u6c42$max$\n\n\u5bf9\u4e8e\u6bcf\u4e2a$f[i][j]$\uff0c\u5148\u5efa\u6811\uff0c\u6743\u503c\u4e3a$f[i][j - 1]$\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$i$\uff0c$O(log_2n)$\u52a0\u4e0a\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e$val$\uff0c\u7136\u540e\u6c42$max(j - 1, i)$(\u5f88\u591a\u9898\u89e3\u76f4\u63a5\u6c42$[1, i]$\u5176\u5b9e\u4e5f\u662f\u5bf9\u7684\uff0c\u8fd9\u9898\u968f\u7740\u5206\u7684\u6bb5\u6570\u8d8a\u591a\u7b54\u6848\u662f\u4e0d\u51cf\u7684\uff0c\u5b9e\u6d4b\u90fd\u53ef\u4ee5\u901a\u8fc7\uff09\n\n```cpp\n#define int long long\n#define mid ((l+r)>>1)\n#define lson (o<<1)\n#define rson (o<<1|1)\n#define R register\n\nconst int N = 35555;\n\nint n, k;\nint f[N][55], pos[N], pre[N];\nint tree[N << 2], lazy[N << 2];\n\ninline void pushup(int o)\n{\n\ttree[o] = max(tree[lson], tree[rson]);\n}\n\ninline void pushdown(int o)\n{\n\tif(!lazy[o]) return;\n\ttree[lson] += lazy[o];\n\ttree[rson] += lazy[o];\n\tlazy[lson] += lazy[o];\n\tlazy[rson] += lazy[o];\n\tlazy[o] = 0;\n}\n\ninline void build(int o, int l, int r, int now)\n{\n\tlazy[o] = 0;//\u8bb0\u5f97\u6bcf\u6b21\u6e050\uff01\uff01\n\tif(l == r)\n\t{\n\t\ttree[o] = f[l - 1][now - 1];//\u5728\u4e0a\u4e00\u4e2ak\u7684\u57fa\u7840\u4e0a\u5efa\u6811 \n\t\treturn;\n\t}\n\tbuild(lson, l, mid, now);\n\tbuild(rson, mid + 1, r, now);\n\tpushup(o);\n}\n\ninline void add(int o, int l, int r, int ql, int qr, int val)\n{\n\tif(ql <= l && r <= qr)\n\t{\n\t\ttree[o] += val;\n\t\tlazy[o] += val;\n\t\treturn;\n\t}\n\tpushdown(o);\n\tif(ql <= mid) add(lson, l, mid, ql, qr, val);\n\tif(qr > mid) add(rson, mid + 1, r, ql, qr, val);\n\tpushup(o);\n}\n\ninline int query(int o, int l, int r, int ql, int qr)\n{\n\tif(ql <= l && r <= qr) return tree[o];\n\tpushdown(o);\n\tint res = 0;\n\tif(ql <= mid) res = max(res, query(lson, l, mid, ql, qr));\n\tif(qr > mid) res = max(res, query(rson, mid + 1, r, ql, qr));\n\treturn res;\n}\n\nsigned main()\n{\n\tread(n); read(k);\n\tfor(R int i = 1, x; i <= n; i++)\n\t{\n\t\tread(x);\n\t\tpre[i] = pos[x] + 1;\n\t\tpos[x] = i;\n\t}\n\tfor(R int j = 1; j <= k; j++)\n\t{\n\t\tbuild(1, 1, n, j);\n\t\tfor(R int i = 1; i <= n; i++)\n\t\t{\n\t\t\tadd(1, 1, n, pre[i], i, 1);\n\t\t\tif(j - 1 <= i) f[i][j] = query(1, 1, n, j - 1, i);//[1, i]\u4e5f\u662f\u5bf9\u7684 \n\t\t}\n\t}\n\twriteln(f[n][k]);\n\treturn 0;\n}\n```",
        "postTime": 1605249443,
        "uid": 103023,
        "name": "AvA_sleeper",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF833B \u3010The Bakery\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd**\u6b63\u5e38\u7684\u51b3\u7b56\u5355\u8c03\u6027\u7b97\u6cd5\u548c\u8bc1\u660e**\uff0c\u548c\u4e00\u79cd\u770b\u4e0a\u53bb\u8f83\u4f18\u79c0\u590d\u6742\u5ea6\u7b97\u6cd5\n\n\u672c\u9898\u7684dp\u8f6c\u79fb\u5177\u6709\u51b3\u7b56\u5355\u8c03\u6027\uff0c\u8bc1\u660e\uff1a\n\n\u8bbe$x<y$\uff0c$uni(x,y)$\u8868\u793a\u533a\u95f4$[x,y]$\u4e0d\u540c\u6570\u5b57\u4e2a\u6570\n\n$i$\u9009\u62e9$y$\uff0c$i+1$\u9009\u62e9$x$\n\n\u6709\n\n1. $$uni(x,i+1)+dp[x]>uni(y,i+1)+dp[y]$$\n\n2. $$uni(y,i)+dp[y]>uni(x,i)+dp[x]$$\n\n\u6839\u636euni\u51fd\u6570\u7684\u6027\u8d28\uff0c\u6211\u4eec\u6709\n\n3. $$uni(y,i+1)<=uni(y,i)+1$$\n\n$1+2$\u53ef\u5f97\n\n$$uni(x,i+1)+dp[x]+uni(y,i)+dp[y]>uni(y,i+1)+dp[y]+uni(x,i)+dp[x]$$\n\n$$uni(x,i+1)+uni(y,i)>uni(y,i+1)+uni(x,i)$$\n\n$$uni(x,i+1)-uni(x,i)>uni(y,i+1)-uni(y,i)$$\n\n$uni(x,i+1)-uni(x,i)$\u5fc5\u987b\u4e3a1\uff0c\u800c$uni(y,i+1)-uni(y,i)$\u5fc5\u987b\u4e3a0\n\n\u4f46\u662f$[x,i]$\u5b8c\u5168\u5305\u62ec\u4e86$[y,i]$\n\n\u6240\u4ee5\u5f53\u524d\u8005\u4e3a1\u7684\u65f6\u5019\uff0c\u540e\u8005\u5fc5\u987b\u4e3a1\n\n\u6545\u77db\u76fe\uff0ci\u9009\u62e9x\u4e00\u5b9a\u4e0d\u4f1a\u66f4\u52a3\uff0c\u8bc1\u6bd5\n\n\u56de\u5230\u8fd9\u9053\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u9009\u62e9k\u6b21\uff0c\u800ck\u5f88\u5c0f\n\n\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7b2c\u4e00\u79cd\u505a\u6cd5\uff1a\n\n\u5229\u7528\u5206\u6cbb\u51b3\u7b56\u5355\u8c03\u6027\u4ee5\u53ca\u8be5\u51b3\u7b56\u5355\u8c03\u6027\u7684\"\u83ab\u961f\"\u5f0f\u79fb\u52a8\u7684\u6700\u591a$nlogn$\u6b21\u7ed3\u8bba\u76f4\u63a5\u5199\u5c31\u53ef\u4ee5\u5f97\u5230$nklogn$\u7684\u597d\u590d\u6742\u5ea6\uff01\n\ncode:\n\n\n```cpp\n\n#include<bits/stdc++.h>\nconst int MAXN=1e5+7;\nusing namespace std;\nint n,k,a[MAXN],f[MAXN],g[MAXN];\nint buc[MAXN];\nint lx,rx,res;\n\ninline int getw(int p,int q) {\n\twhile(rx<q) {\n\t\t++rx;\n\t\tif(!buc[a[rx]])res++;\n\t\tbuc[a[rx]]++;\n\t}\n\twhile(rx>q) {\n\t\tbuc[a[rx]]--;\n\t\tif(!buc[a[rx]])res--;\n\t\t--rx;\n\t}\n\twhile(lx>p) {\n\t\t--lx;\n\t\tif(!buc[a[lx]])res++;\n\t\tbuc[a[lx]]++;\n\t}\n\twhile(lx<p) {\n\t\tbuc[a[lx]]--;\n\t\tif(!buc[a[lx]])res--;\n\t\t++lx;\n\t}\n\treturn res;\n}\n\n//use L,R update l,r\ninline void solve(int L,int R,int l,int r) {\n\tint mid=(l+r)>>1;\n\tint maxx=-1,pos=-1;\n\tfor(int i=L; i<=R; ++i) {\n\t\tif(i+1>mid)break;\n\t\tif(g[i]+getw(i+1,mid)>maxx) {\n\t\t\tmaxx=g[i]+getw(i+1,mid);\n\t\t\tpos=i;\n\t\t}\n\t}\n\tassert(~pos);\n\tf[mid]=max(f[mid],maxx);\n\tif(l<mid)solve(L,pos,l,mid-1);\n\tif(r>mid)solve(pos,R,mid+1,r);\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1; i<=n; ++i) {\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tlx=1,rx=0;\n\tfor(int i=1; i<=k; ++i) {\n\t\tfor(int i=1; i<=n; ++i)f[i]=0;\n\t\tsolve(0,n,1,n);//qwq\n\t\tfor(int i=1; i<=n; ++i)g[i]=f[i];\n\t}\n\tprintf(\"%d\\n\",g[n]);\n\treturn 0;\n}\n\n\n```\n\n\u53ef\u662f\u6211\u4eec\u5e76\u4e0d\u6ee1\u610f\u4e8e\u8fd9\u4e2a$ACcode$,\u96be\u9053\u5c31\u6ca1\u6709\u5f88\u597d\u770b\u7684\u590d\u6742\u5ea6\u5417\uff1f\u6bd4\u5982\u53bb\u6389\u8fd9\u4e2ak\n\n\u4e8e\u662f\u505a\u6cd5\u547c\u4e4b\u6b32\u51fa\uff0c\u5728\u6ee1\u8db3\u51b3\u7b56\u5355\u8c03\u6027\u7684\u524d\u63d0\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u5fc3\u4f7f\u7528wqs\u4e8c\u5206\u628ak\u8fd9\u4e00\u7ef4\u53d8\u6210$logV$,\u800c\u8fd9\u9053\u9898\u7684V\u548cn\u540c\u9636,\u6240\u4ee5\u53ef\u4ee5\u5f97\u5230$O(logn)$\u4e25\u683c\u5c0f\u4e8ek\u7684\u590d\u6742\u5ea6~~AC\u4e5f\u8bc1\u660e\u4e86\u4ed6\u7684\u6b63\u786e\u6027~~\n\n\u4f46\u4e0d\u5982\u4eba\u610f\u7684\u662f\uff0c\u6211\u4eec\u7684\u8f6c\u79fb\u53d8\u6210\u4e86\u540c\u5c42\u4e4b\u95f4\u4e5f\u53ef\u4ee5\u7684\u3002\u3002\u3002\u6240\u4ee5\u5c31\u8981\u7528\u4e00\u4e2acdq\u5206\u6cbb\u6765\u7ef4\u62a4\u8f6c\u79fb\u3002\u3002\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u53d8\u6210$O(nlog^3n)$\uff0c\u867d\u7136\u4e25\u683c\u6765\u8bb2\u6ca1\u6709\u4e0a\u4e2a\u590d\u6742\u5ea6\u4f18\u79c0,\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u75af\u72c2\u52a0\u5f3a,\u628ak\u5f00\u5230\u548cn\u540c\u9636\u5e76\u4e14\u4e94\u4e07\u7136\u540ehh\u4e86\n\ncode\uff1a\n\n```cpp\n\n#include<bits/stdc++.h>\nconst int MAXN=1e5+7;\nusing namespace std;\nint n,k,a[MAXN],f[MAXN],g[MAXN];\nint buc[MAXN];\nint lx,rx,res,ex;\n\ninline int getw(int p,int q) {\n\twhile(rx<q) {\n\t\t++rx;\n\t\tif(!buc[a[rx]])res++;\n\t\tbuc[a[rx]]++;\n\t}\n\twhile(rx>q) {\n\t\tbuc[a[rx]]--;\n\t\tif(!buc[a[rx]])res--;\n\t\t--rx;\n\t}\n\twhile(lx>p) {\n\t\t--lx;\n\t\tif(!buc[a[lx]])res++;\n\t\tbuc[a[lx]]++;\n\t}\n\twhile(lx<p) {\n\t\tbuc[a[lx]]--;\n\t\tif(!buc[a[lx]])res--;\n\t\t++lx;\n\t}\n\treturn res;\n}\n\n//use L,R update l,r\ninline void cdq(int L,int R,int l,int r) {\n\tint mid=(l+r)>>1;\n\tint maxx=-1e9,pos=-1;\n\tfor(int i=L; i<=R; ++i) {\n\t\tif(i+1>mid)break;\n\t\tif(f[i]+getw(i+1,mid)+ex>maxx) {\n\t\t\tmaxx=f[i]+getw(i+1,mid)+ex;\n\t\t\tpos=i;\n\t\t}\n\t}\n\tif(maxx>f[mid]) {\n\t\tf[mid]=maxx;\n\t\tg[mid]=g[pos]+1;\n\t}\n\tif(l<mid)cdq(L,pos,l,mid-1);\n\tif(r>mid)cdq(pos,R,mid+1,r);\n}\n\ninline void solve(int l,int r) {\n\tif(l==r)return ;\n\tint mid=(l+r)>>1;\n\tsolve(l,mid);\n\tcdq(l,mid,mid+1,r);\n\tsolve(mid+1,r);\n}\n\ninline int chk() {\n\tfor(int i=0; i<=n; ++i)f[i]=g[i]=0;\n\tsolve(0,n);\n\treturn g[n]<=k;\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1; i<=n; ++i) {\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tlx=1,rx=0;\n\tint tmpl=-n,tmpr=n,ans=0;\n\twhile(tmpl<=tmpr) {\n\t\tex=(tmpl+tmpr)>>1;\n\t\tif(chk()) {\n\t\t\tans=f[n]-k*ex;\n\t\t\ttmpl=ex+1;\n\t\t} else {\n\t\t\ttmpr=ex-1;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1599570536,
        "uid": 76990,
        "name": "loveJY",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF833B \u3010The Bakery\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/CF833B)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e00\u4e2a\u975e\u5e38\u66b4\u529b\u7684$O(kn^2)$\u7684$dp$\u5f88\u597d\u60f3\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$f(i,j)$\uff1a\u524d$j$\u4e2a\u6570\u5206\u6210$i$\u6bb5\u7684\u6700\u5927\u6743\u503c\u548c\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8f6c\u79fb\uff1a\n$$f(i,j)=\\max_{i-1\\le k<j}\\{f(i-1,k)+w(k+1,j)\\}$$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$w(i,j)$\u8868\u793a$[i,j]$\u7684\u6743\u503c\uff0c\u4e5f\u5c31\u662f$[i,j]$\u4e2d\u4e0d\u91cd\u590d\u7684\u6570\u7684\u6570\u91cf\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u663e\u7136\u662f$T$\u7684\u3002\u8003\u8651\u4f18\u5316\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e0d\u96be\u53d1\u73b0\u672c\u9898\u7684\u96be\u70b9\u5728\u4e8e\u6c42\u51fa$w$\u3002\u4e0d\u8fc7\uff0c\u6839\u636e\u4e3b\u5e2d\u6811\u6c42\u533a\u95f4\u4e0d\u91cd\u590d\u6570\u7684\u6570\u91cf\u7684\u65b9\u6cd5\uff08\u4e0d\u77e5\u9053\u7684\u53ef\u4ee5\u5148\u53bb\u767e\u5ea6\uff09\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u7528\u4e3b\u5e2d\u6811\uff0c\u7528\u7ebf\u6bb5\u6811\u5728\u626b\u4e00\u904d\u7684\u8fc7\u7a0b\u4e2d\u52a8\u6001\u66f4\u65b0\u51fa$w$\u7684\u503c\u3002   \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8003\u8651\u5f53\u524d\u626b\u5230\u4e86$a_i$\uff0c\u4e0a\u4e00\u6b21\u51fa\u73b0$a_i$\u7684\u4f4d\u7f6e\u662f$lst(a_i)$\u3002\u90a3\u4e48\u4e4b\u540e\u5bf9\u4e8e\u6240\u6709$<i$\u7684\u8f6c\u79fb\u70b9\uff0c\u5b83\u4eec\u7684$w$\u4e2d\u90fd\u4f1a\u7edf\u8ba1\u4e0a$a_i$\u3002\u800c\u4e4b\u524d$<lst(a_i)$\u5b9e\u9645\u4e0a\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e00\u6b21$a_i$\u4e86\uff0c\u6240\u4ee5\u8fd8\u8981\u51cf\u6389\u4e00\u6b21\u3002\u8fd9\u6837\u7684\u533a\u95f4\u64cd\u4f5c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u3002\u6240\u4ee5\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u8f6c\u79fb\u70b9\u4e0a\u7684\u5bf9\u5e94\u7684\u8f6c\u79fb\u503c\uff0c\u6700\u540e\u67e5\u8be2\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\u65f6\u95f4\u662f$O(knlog_2n)$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~~\u5b66\u4e86\u51b3\u7b56\u5355\u8c03\u6027\u7684\u4f18\u5316\uff0c\u4f46\u662f\u8fd8\u662f\u4e0d\u4f1a\u7528\u624d\u8fd9\u6837\u5199\u7684......~~\n# \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <cstdio>\n\n#define isLeaf( a ) ( segTree[a].l == segTree[a].r ) \n\nconst int INF = 0x3f3f3f3f, MAXN = 35005, MAXK = 55;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0; char s = getchar();int f = 1;\n\twhile( s < '0' || '9' < s ) { f = 1; if( s == '-' ) f = -1; s = getchar(); }\n\twhile( '0' <= s && s <= '9' ) { x = ( x << 3 ) + ( x << 1 ) + s - '0', s = getchar(); }\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ) { putchar( '-' ), x = -x; }\n\tif( 9 < x ) { write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\nstruct segmentTreeNode\n{\n\tint l, r;\n\tint mx, tag;\n}segTree[MAXN << 2];\n\nint f[MAXK][MAXN];\nint a[MAXN], lst[MAXN];\nint N, K, siz;\n\nvoid upt( const int now ) { segTree[now].mx = MAX( segTree[now << 1].mx, segTree[now << 1 | 1].mx ); }\n\nvoid build( const int k, const int now, const int left, const int right )\n{\n\tsegTree[now].l = left, segTree[now].r = right, segTree[now].tag = 0;\n\tif( isLeaf( now ) ) { segTree[now].mx = f[k - 1][left]; return; }\n\tint mid = left + right >> 1;\n\tbuild( k, now << 1, left, mid ), build( k, now << 1 | 1, mid + 1, right );\n\tupt( now );\n}\n\nvoid add( const int now, const int val ) \n{\n\tsegTree[now].tag += val, segTree[now].mx += val;\n}\n\nvoid normalize( const int now )\n{\n\tif( ! segTree[now].tag ) return ;\n\tadd( now << 1, segTree[now].tag ), add( now << 1 | 1, segTree[now].tag );\n\tsegTree[now].tag = 0;\n}\n\nvoid update( const int now, const int segL, const int segR, const int val )\n{\n\tif( segR < segTree[now].l || segTree[now].r < segL ) return ;\n\tif( segL <= segTree[now].l && segTree[now].r <= segR ) { add( now, val ); return ; }\n\tif( isLeaf( now ) ) return ; normalize( now );\n\tupdate( now << 1, segL, segR, val ), update( now << 1 | 1, segL, segR, val );\n\tupt( now );\n}\n\nint query( const int now, const int segL, const int segR )\n{\n\tif( segR < segTree[now].l || segTree[now].r < segL ) return -INF;\n\tif( segL <= segTree[now].l && segTree[now].r <= segR ) return segTree[now].mx;\n\tif( isLeaf( now ) ) return -INF; normalize( now );\n\tint val = query( now << 1, segL, segR );\n\treturn MAX( val, query( now << 1 | 1, segL, segR ) );\n}\n\nint main()\n{\n\tread( N ), read( K );\n\tfor( int i = 1 ; i <= N ; i ++ ) read( a[i] );\n\tfor( int i = 1 ; i <= N ; i ++ ) f[0][i] = -INF;\n\tfor( int j = 1 ; j <= K ; j ++ )\n\t{\n\t\tfor( int i = 1 ; i <= N ; i ++ ) lst[i] = -1;\n\t\tbuild( j, 1, 0, N - 1 );\n\t\tfor( int i = 1 ; i <= N ; i ++ )\n\t\t{\n\t\t\tif( ~ lst[a[i]] ) update( 1, 0, lst[a[i]] - 1, -1 );\n\t\t\tupdate( 1, 0, i - 1, 1 ), lst[a[i]] = i;\n\t\t\tif( i >= j ) f[j][i] = query( 1, j - 1, i - 1 );\n\t\t\telse f[j][i] = -INF;\n\t\t}\n\t}\n\twrite( f[K][N] ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1575342046,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[CF833B]The Bakery"
    },
    {
        "content": "\u8003\u8651dp\n\n\u5b9a\u4e49$dp[i][j]$\u4e3a\u524d$i$\u9879\u5206\u6210$j$\u4e2a\u533a\u95f4\u7684\u6700\u5927\u4ef7\u503c\u548c\n\n\u65b9\u7a0b\u5c31\u4e3a\uff1a$dp[i][j]=max(dp[l][j-1]+val(l+1,i))$\n\n$val(l+1,i)$\u4e3a$[l+1,i]$\u8fd9\u4e2a\u533a\u95f4\u4e2d\u4e0d\u540c\u6570\u7684\u4e2a\u6570\n\n\u6765\u6162\u6162\u770b\uff0c\u5148\u679a\u4e3e$i$\uff0c$j$\uff0c\u518d\u679a\u4e3e$l$\uff0c\u518d\u6c42$val(l+1,i)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n^{3}k)$\uff0c\u4f1a\u8d85\u65f6\u3002\n\n\u6211\u4eec\u5c1d\u8bd5\u4f18\u5316\uff0c\n\n\u6211\u4eec\u53ef\u4ee5\u628al\u5012\u7740\u679a\u4e3e\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fb9\u66f4\u65b0\u7b54\u6848\u8fb9\u7edf\u8ba1$val(l+1,i)$\u3002\n\n\u4ee3\u7801\u662f\u8fd9\u4e2a\u4e9a\u5b50\uff1a\n```cpp\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=min(i,k);j++)\n\t\t{\n\t\t\ttot=1;\n\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\tvis[a[i]]=1;\n\t\t\tfor(int l=i-1;l>=1;l--)\n\t\t\t{\n\t\t\t\tdp[i][j]=max(dp[i][j],dp[l][j-1]+tot);\n\t\t\t\tif(!vis[a[l]])\n\t\t\t\ttot++;\n\t\t\t\tvis[a[l]]=1;\n\t\t\t}\n\t\t\tdp[i][j]=max(dp[i][j],dp[0][j-1]+tot);\n\t\t}\n\t}\n```\n\n\u4f18\u5316\u5230\u4e86$O(n^{2}k)$\uff0c\u4f46\u8fd8\u662f\u4f1a\u8d85\u65f6\u3002\n\n\u7ee7\u7eed\u4f18\u5316\uff0c\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u679a\u4e3e\u7684\u8fd9\u4e2a$l$\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u6211\u4eec\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\u7ebf\u6bb5\u6811\uff01\n\n\u6211\u4eec\u628a\u6bcf\u6b21\u6c42\u51fa\u7684$dp[i][j]$\u4e22\u5230\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5c31\u53ef\u4ee5$O(log_{2}n)$\u5730\u67e5\u8be2\u4e86\u3002\u5c82\u4e0d\u7f8e\u54c9\uff1f\n\n\u90a3\u4e48\u95ee\u9898\u53c8\u6765\u4e86\uff0c$val(l+1,i)$\u600e\u4e48\u6c42\u5462\uff1f\n\n\u6211\u4eec\u8bb0\u5f55$a[i]$\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e$pos[i]$\uff0c\u5219$a[i]$\u5bf9$[pos[i]+1,i-1]$\u7684$val$\u503c\u90fd\u6709\u8d21\u732e1\uff0c\u533a\u95f4\u52a0\u5373\u53ef\uff0c\u95ee\u9898\u89e3\u51b3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nklog_{2}n)$\n\ncode\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#define ll long long\n#define lson id<<1,l,m\n#define rson id<<1|1,m+1,r\nusing namespace std;\nint dp[50010][60],n,k,a[50010],pos[50010],tot;\nint t[60][200010],lzy[60][200010];//\u5bf9\u4e8e\u6bcf\u4e2aj\u90fd\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\nvoid pushup(int num,int id)\n{\n\tt[num][id]=max(t[num][id<<1],t[num][id<<1|1]);\n}\nvoid pushdown(int num,int id)\n{\n\tif(lzy[num][id]!=0)\n\t{\n\t\tlzy[num][id<<1]+=lzy[num][id];\n\t\tlzy[num][id<<1|1]+=lzy[num][id];\n\t\tt[num][id<<1]+=lzy[num][id];\n\t\tt[num][id<<1|1]+=lzy[num][id];\n\t\tlzy[num][id]=0;\n\t}\n}\nvoid update(int num,int id,int l,int r,int x,int y,int p)\n{\n\tif(x<=l&&r<=y)\n\t{\n\t\tt[num][id]+=p;\n\t\tlzy[num][id]+=p;\n\t\treturn;\n\t}\n\tpushdown(num,id);\n\tint m=(l+r)>>1;\n\tif(x<=m)\n\tupdate(num,lson,x,y,p);\n\tif(y>m)\n\tupdate(num,rson,x,y,p);\n\tpushup(num,id);\n}\nint query(int num,int id,int l,int r,int x,int y)\n{\n\tif(x<=l&&r<=y)\n\treturn t[num][id];\n\tpushdown(num,id);\n\tint m=(l+r)>>1,ans=0;\n\tif(x<=m)\n\tans=max(ans,query(num,lson,x,y));\n\tif(y>m)\n\tans=max(ans,query(num,rson,x,y));\n\treturn ans;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;i++)\n\tscanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=k;i++)\n\tupdate(0,1,0,n,i,i,-0x3f3f3f3f);//dp[0][1]~dp[0][k]\u4e0d\u5b58\u5728\uff0c\u8d4b\u4e3a-inf\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=0;j<=min(i,k);j++)\n\t\tupdate(j,1,0,n,pos[a[i]],i-1,1);\n\t\tpos[a[i]]=i;//\u66f4\u65b0\u4f4d\u7f6e\n\t\tfor(int j=1;j<=min(i,k);j++)\n\t\t{\n\t\t\tdp[i][j]=query(j-1,1,0,n,0,i-1);//\u8f6c\u79fb\n\t\t\tupdate(j,1,0,n,i,i,dp[i][j]);\n\t\t}\n\t}\n\tprintf(\"%d\",dp[n][k]);\n}\n```",
        "postTime": 1572509191,
        "uid": 103029,
        "name": "James_Brady",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF833B \u3010The Bakery\u3011"
    },
    {
        "content": "\u9898\u76ee\uff1a[The Bakery](https://www.luogu.org/problemnew/show/CF833B)\n\n[kevin_yu\u7684\u9898\u89e3](https://www.luogu.org/blog/105496/solution-cf833b)\n\n\u4e4b\u524d\u6ca1\u6709\u597d\u597d\u542c@kevin_yu\u8bb2\u9898\uff0c\u505a\u4e86\u4e00\u665a\u4e0a\u2026\u2026\n\n\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u662f\u5bf9kevin_yu\u7684\u8865\u5145\u4ee5\u53ca\u4ee3\u7801\u6ce8\u91ca\u7684\u6269\u5145\uff0c\u53ef\u80fd\u6709\u52a9\u4e8e\u5927\u5bb6\u7684\u7406\u89e3\u3002\n\n\n\n#### \u601d\u8def\uff1a\n---\n##### part 1.dp\n\u4e00\u4e2a\u5f88\u5bb9\u6613\u60f3\u5230\u7684$O(n^2k)$\u7b97\u6cd5\u2014\u2014\n\n\u4ee4$f[i][j]$\u8868\u793a\u524di\u7684\u4f4d\u7f6e\u5212\u5206j\u6b21\u7684\u4ef7\u503c\u3002\n\n\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$f[i][j]=max \\ (f[k][j-1]+cnt[k][i] )$\n\n\u5176\u4e2d\uff0ck\u662f\u4e00\u4e2a\u4e2d\u95f4\u503c\uff0c\u4ee3\u8868\u5212\u5206\u679a\u4e3e\u7684\u4f4d\u7f6e\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u77e5\u9053\u8fd9\u6837\u505a\u4e00\u5b9a\u4f1a\u8d85\u65f6\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f18\u5316\u3002\n\n---\n##### part 2.\u7ebf\u6bb5\u6811\n\n\u6211\u4eec\u9009\u62e9\u4f18\u5316\u8f6c\u79fb\uff0c\u4e5f\u5c31\u662f\u8bf4\u7701\u53bb\u4e2d\u95f4\u503ck\u7684\u679a\u4e3e\u3002\n\n\u518d\u770b\u6211\u4eec\u7684\u8f6c\u79fb\u65b9\u7a0b\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u53d6\u5f97\u662f$f[k][j-1]+cnt[k][i]$\u8fd9\u4e00\u6bb5\u7684\u6700\u5927\u503c\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u7c7b\u578b\u7684\u53d6max\u7684dp\u7684\u4f18\u5316\uff0c\u53ef\u4ee5\u9009\u62e9 \u5355\u8c03\u961f\u5217\u4f18\u5316 / nlogn\u6570\u636e\u7ed3\u6784\u4f18\u5316\u3002\n\n\u5982\u679c\u4f7f\u7528\u5355\u8c03\u961f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u51fa$\\ max\\ {f[k][j-1]}$\uff0c\u4f46\u662f$cnt[k][i]$\u8fd9\u79cd\u6570\u636e\u5374\u65e0\u6cd5\u64cd\u4f5c\u3002\n\n\u6240\u4ee5\u8003\u8651\u6570\u636e\u7ed3\u6784\uff0c\u4e5f\u5c31\u662f\u52a8\u6001\u533a\u95f4\u6700\u503c\u7684\u6700\u7b80\u5355\u5de5\u5177\u2014\u2014\u7ebf\u6bb5\u6811\u3002\n\n\u4ee4pre[i]\u8868\u793a\u4e0a\u4e00\u6b21\u51fa\u73b0\u4e0ei\u540c\u989c\u8272\u7684\u86cb\u7cd5\u7684\u4f4d\u7f6e\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5728pre[i]\u548ci\u4e4b\u95f4\u53d6\u5206\u5272\u70b9k\uff0c\u90a3\u4e48\u672b\u70b9\u5728\u533a\u95f4$[k,i]$\u95f4\u90fd\u662f\u53ef\u4ee5\u62e5\u6709col[i]\u7684\uff0c\u800c$[\\ pre[i] , k)$\u8fd9\u4e00\u6bb5\u4e00\u5b9a\u662f\u6ca1\u6709col[i]\u7684\u3002\n\n\u8fd9\u6837\u770b\uff0c\u6211\u4eec\u6bcf\u6b21\u5728\u7ebf\u6bb5\u6811\u4e0a\u66f4\u65b0$[pre[i],i]$\uff0c\u67e5\u8be2$[1,i]$\u5c31\u53ef\u4ee5\u5904\u7406cnt\u7684\u95ee\u9898\u4e86\u3002\n\n\u800cf[k][j-1]\u53ea\u9700\u8981\u5728\u5efa\u6811\u65f6\u52a0\u4e0a\u5c31\u597d\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\u53ca\u6ce8\u91ca\u2014\u2014\n\n---\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define maxn 35000\n#define maxm 50\n#define read(x) scanf(\"%d\",&x)\n\n#define lson (o*2)\n#define rson (o*2+1)\n#define mid (L+(R-L)/2)\n\nint n,m;\t\nint f[maxn+5][maxm+5];\t//f[i][j]\uff1a\u524di\u7684\u4f4d\u7f6e\u5212\u5206j\u6b21\u7684\u4ef7\u503c \n\nint pre[maxn+5];\t//\u4e0a\u4e00\u6b21\u51fa\u73b0\u4e0ei\u540c\u989c\u8272\u7684\u86cb\u7cd5\u7684\u4f4d\u7f6e\nmap<int,int> mp;\t//\u7528\u6765\u66f4\u65b0pre \n\n//\u7ebf\u6bb5\u6811\u90e8\u5206 \n\nint a[maxn*10+5];\t//\u7ebf\u6bb5\u6811 \nint lzy[maxn*10+5];\t//lazy tag\n\nvoid push_up(int o) {\t//\u901a\u8fc7\u5b50\u8282\u70b9\u66f4\u65b0\u7236\u8282\u70b9\u7684\u503c \n\ta[o]=max(a[lson],a[rson]);\n}\n\nvoid make_tree(int o,int L,int R,int row) {\t//\u5efa\u6811\n\ta[o]=lzy[o]=0; \n\tif(L==R) {\n\t\ta[o]=f[L-1][row-1];\n\t\treturn ;\n\t}\n\tmake_tree(lson,L,mid,row),make_tree(rson,mid+1,R,row);\n\tpush_up(o);\n}\n\nvoid push_down(int o) {\t//\u4e0b\u4f20lazy tag \n\ta[lson]+=lzy[o],a[rson]+=lzy[o];\n\tlzy[lson]+=lzy[o],lzy[rson]+=lzy[o];\n\tlzy[o]=0;\n}\n\nint P,Q;\t//\u4fee\u6539\u53ca\u67e5\u8be2\u7684\u533a\u95f4 \n\nvoid update(int o,int L,int R) {\t//\u66f4\u65b0 \n\tif(L>Q||R<P) return ;\n\tif(L>=P&&R<=Q) {\n\t\tlzy[o]++;\n\t\ta[o]++;\n\t\treturn ;\n\t}\n\tpush_down(o);\n\tupdate(lson,L,mid),update(rson,mid+1,R);\n\tpush_up(o);\n}\n\nint query(int o,int L,int R) {\t//\u67e5\u8be2 \n\tif(L>Q||R<P) return 0;\n\tif(L>=P&&R<=Q) {\n\t\treturn a[o];\n\t}\n\tpush_down(o);\n\treturn max(query(lson,L,mid),query(rson,mid+1,R));\n}\n\nint main() {\n\tread(n),read(m);\n\tfor(int i=1;i<=n;i++) {\n\t\tint x;\n\t\tread(x);\n\t\tif(mp.count(x)) pre[i]=mp[x]+1;\n\t\telse pre[i]=1;\n\t\tmp[x]=i;\n\t}\n\tfor(int j=1;j<=m;j++) {\n\t\tmake_tree(1,1,n,j);\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tP=pre[i],Q=i;\n\t\t\tupdate(1,1,n);\n\t\t\tP=1,Q=i;\n\t\t\tf[i][j]=query(1,1,n);\n\t\t}\n\t}\n\t\n\tprintf(\"%d\",f[n][m]);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1544543601,
        "uid": 13117,
        "name": "Ouaoan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF833B \u3010The Bakery\u3011"
    }
]