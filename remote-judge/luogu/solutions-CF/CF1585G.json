[
    {
        "content": "~~\u8bdd\u8bf4\u600e\u4e48\u5168\u7f51\u90fd\u6ca1\u6709\u8fd9\u9898\u7684\u4e2d\u6587\u9898\u89e3\u554a\u3002~~  \n\u60f3\u4e0d\u5230\u5b98\u65b9\u9898\u89e3\u91cc\u4e00\u53ea $\\log$ \u7684\u795e\u5947\u505a\u6cd5\uff0c\u6240\u4ee5\u6211\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff08dsu on tree\uff09\u548c\u7ebf\u6bb5\u6811\u4ee5 $\\mathcal O(n \\log^2 n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u901a\u8fc7\u4e86\u6b64\u9898 ~~\u540c\u65f6\u559c\u63d0\u6700\u4f18\u89e3\u6700\u540e\u4e00\u540d~~\u3002  \n\n\u9996\u5148\u590d\u4e60\u4e00\u4e0b\u535a\u5f08\u8bba\u76f8\u5173\u77e5\u8bc6\uff1a\n1. \u4e00\u4e2a\u516c\u5e73\u6e38\u620f\u7684\u4e00\u4e2a\u72b6\u6001\u7684 $\\operatorname {SG}$ \u51fd\u6570\u503c\u4e3a\u5b83\u80fd\u5230\u8fbe\u7684\u6240\u6709\u72b6\u6001\u7684 $\\operatorname {SG}$ \u51fd\u6570\u503c\u4e2d\u6ca1\u51fa\u73b0\u8fc7\u7684\u6700\u5c0f\u975e\u8d1f\u6574\u6570\uff08\u5373 $\\operatorname {mex}$ \u503c\uff09\u3002\n2. \u591a\u4e2a\u516c\u5e73\u6e38\u620f\u7ec4\u5408\u5728\u4e00\u8d77\u7684 $\\operatorname {SG}$ \u51fd\u6570\u503c\u662f\u5176\u4e2d\u6240\u6709\u6e38\u620f\u72b6\u6001\u7684 $\\operatorname {SG}$ \u51fd\u6570\u503c\u5f02\u6216\u548c\u3002\n3. \u4e00\u4e2a\u516c\u5e73\u7ec4\u5408\u6e38\u620f\u5148\u624b\u5fc5\u8d25\u5f53\u4e14\u4ec5\u5f53\u5176\u521d\u59cb\u72b6\u6001 $\\operatorname{SG}$ \u51fd\u6570\u503c\u4e3a $0$\u3002\n\n\u90a3\u4e48\u8fd9\u9898\u5c31\u6709\u4e86\u4e00\u4e2a\u57fa\u672c\u601d\u8def\uff0c\u5373\u5bf9\u6bcf\u68f5\u5b50\u6811\u6c42\u51fa\u5b83\u5220\u53bb\u4e00\u4e2a\u6df1\u5ea6\u4ee5\u4e0b\u7684\u70b9\u5269\u4e0b\u7684\u5b50\u6811\u7684 $\\operatorname {SG}$ \u51fd\u6570\u503c\u7684\u5f02\u6216\u548c\u7684 $\\operatorname {mex}$\uff0c\u6700\u540e\u518d\u5c06\u68ee\u6797\u4e2d\u7684\u6240\u6709\u6811\u6839\u7684 $\\operatorname {SG}$ \u51fd\u6570\u503c\u5f02\u6216\u5728\u4e00\u8d77\u3002\n\n\u8fd9\u4e2a\u8ba1\u7b97\u7684\u8fc7\u7a0b\u8981\u5bf9\u5b50\u6811\u8be2\u95ee\uff0c\u770b\u4e0a\u53bb\u5f88\u53ef\u4ee5 dsu on tree\uff0c\u4f46\u662f\u548c dsu on tree \u7684\u677f\u5b50\u53c8\u6709\u8fd9\u4e9b\u4e0d\u540c\uff1a\n\n1. \u9700\u8981\u7ef4\u62a4\u7684 $\\operatorname {mex}$ \u503c\u4e0d\u50cf\u548c\u4e4b\u7c7b\u7684\u90a3\u4e48\u597d\u7ef4\u62a4\u3002\n3. \u8be2\u95ee\u4e00\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e0d\u628a\u6839\u8ba1\u5165\u7b54\u6848\u3002\n1. \u7a7a\u72b6\u6001\u5e76\u4e0d\u662f\u6811\u4e0a\u7684\u8282\u70b9\uff0c\u4f46\u5b83\u7684 $\\operatorname {SG}$ \u51fd\u6570\u503c\uff08\u4e5f\u5c31\u662f $0$\uff09\u4f1a\u5bf9\u8ba1\u7b97\u8fc7\u7a0b\u6709\u5f71\u54cd\u3002\n2. \u6bcf\u6b21\u5e76\u4e0d\u662f\u8981\u8be2\u95ee\u6574\u68f5\u5b50\u6811\uff0c\u800c\u53ea\u662f\u5bf9\u4e00\u4e2a\u6df1\u5ea6\u4ee5\u4e0a\u6c42\u89e3\u3002\n\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6bcf\u4e2a\u975e\u8d1f\u6574\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4fee\u6539\u7684\u65f6\u5019\u5148\u628a\u539f\u6765\u7684\u503c\u5220\u53bb\uff0c\u63d2\u5165\u65f6\u52a0\u4e0a\uff0c\u8be2\u95ee\u65f6\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u3002  \n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u95ee\u9898\u548c\u7b2c\u4e09\u4e2a\u95ee\u9898\uff0c\u6bcf\u6b21\u7ef4\u62a4\u5f53\u524d\u70b9\u4ee5\u4e0b\u7684\u7b54\u6848\u5373\u53ef\uff08\u4e0d\u91cd\u65b0\u8ba1\u7b97\u91cd\u513f\u5b50\u5b50\u6811\u6539\u4e3a\u53ea\u8ba1\u7b97\u91cd\u513f\u5b50\u4e0a\u7684\u503c\uff0c\u800c\u4e0d\u8fdb\u5165\u5b50\u6811\u4e2d\u7684\u5176\u5b83\u70b9\uff09\uff0c\u540c\u65f6\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a $0$ \u8868\u793a\u65b0\u51fa\u73b0\u7684\u4e00\u5c42\u7684\u7b54\u6848\u3002  \n\u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6700\u5c0f\u6df1\u5ea6\u80af\u5b9a\u662f\u4e0d\u65ad\u9012\u51cf\u7684\uff0c\u6bcf\u6b21\u5220\u9664\u91cd\u513f\u5b50\u7684\u6df1\u5ea6\u9650\u5236\u548c\u5f53\u524d\u70b9\u7684\u9650\u5236\u4e4b\u95f4\u6df1\u5ea6\u7684\u7b54\u6848\u5c31\u884c\u4e86\uff0c\u6ce8\u610f dsu on tree \u52a0\u548c\u6e05\u7a7a\u7684\u65f6\u5019\u4e0d\u8981\u518d \u52a0/\u6e05\u7a7a \u8fd9\u4e9b\u70b9\u4e86\u3002\n\n\u8fd9\u6837\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\ncf \u63d0\u4ea4\u8bb0\u5f55\uff1a[#153349274](https://codeforces.com/contest/1585/submission/153349274)\n",
        "postTime": 1649655226,
        "uid": 499996,
        "name": "Qiaoqia",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1585G"
    },
    {
        "content": "\u8fd9\u663e\u7136\u662f\u4e2a\u516c\u5e73\u535a\u5f08\uff0c\u68ee\u6797\u4e2d\u6bcf\u4e00\u68f5\u6811\u5b8c\u5168\u72ec\u7acb\uff0c\u5206\u522b\u7b97 SG \u51fd\u6570\u5f02\u6216\u8d77\u6765\u5373\u53ef\uff0c\u4e0b\u9762\u5c1d\u8bd5\u7b97\u4e00\u4e0b SG \u51fd\u6570\u3002\n\n\u6beb\u65e0\u7591\u95ee\uff0c\u7a7a\u6811\u7684 SG \u51fd\u6570\u662f $0$\uff0c\u8003\u8651\u975e\u7a7a\u6811\u7684 SG \u51fd\u6570\u600e\u4e48\u8ba1\u7b97\u3002\n\n\u9996\u5148\u7ef4\u62a4\u4e00\u4e0b\u6700\u6d45\u7684\u53f6\u5b50\u6df1\u5ea6\uff0c\u8fd9\u6837\u6211\u4eec\u9009\u5b9a\u4e00\u4e2a $d$ \u4e4b\u540e\uff0c\u628a\u6240\u6709\u6df1\u5ea6 $\\leq d$ \u7684\u70b9\u5220\u6389\uff0c\u4f1a\u5269\u4e0b\u82e5\u5e72\u4e2a\uff08\u53ef\u4ee5\u662f $0$ \u4e2a\uff09\u68ee\u6797\uff0c\u4e24\u68f5\u5b50\u6811\u4e4b\u95f4\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff0c\u90a3\u4e48 SG \u503c\u5c31\u662f\u6240\u6709\u5b50\u6811\u7684 SG \u503c\u7684\u5f02\u6216\u3002\n\n\u679a\u4e3e\u6240\u6709\u5408\u6cd5\u7684 $d$ \u7136\u540e\u66b4\u529b\u6c42 $\\mathrm{mex}$ \u5c31\u662f $O(n^2)$ \u7684\u66b4\u529b\uff0c\u5c1d\u8bd5\u4f18\u5316\u3002\n\n\u9996\u5148\u8003\u8651\u600e\u6837\u5feb\u901f\u7ef4\u62a4\u6240\u6709 $d$ \u7684\u7b54\u6848\uff0c\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u53ea\u548c\u6df1\u5ea6\u6709\u5173\uff0c\u53ef\u4ee5\u76f4\u63a5\u5957\u4e00\u4e2a\u957f\u94fe\u5256\u5206\u3002\n\n\u7136\u540e\u662f\u600e\u6837\u5feb\u901f\u6c42 $\\mathrm{mex}$\uff0c\u53ef\u4ee5\u5bf9\u6240\u6709 $d$ \u5bf9\u5e94\u7684 SG \u51fd\u6570\u7ef4\u62a4\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u5728\u5e73\u8861\u6811\u4e0a\u4e8c\u5206\uff0c\u5982\u679c\u5de6\u5b50\u6811\u662f\u6ee1\u7684\u5c31\u8fdb\u53f3\u5b50\u6811\uff0c\u5426\u5219\u8fdb\u5de6\u5b50\u6811\u3002\n\n\u7406\u8bba\u4e0a\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u4f46\u662f\u624b\u5199\u5e73\u8861\u6811\u5b9e\u5728\u662f\u592a\u9ebb\u70e6\u4e86\uff0c\u6211\u5077\u61d2\u76f4\u63a5\u7528\u4e86 pbds \u7684\u5e73\u8861\u6811\uff0c\u4f46\u8fd9\u6837\u5c31\u4f1a\u8ba9\u5e73\u8861\u6811\u4e8c\u5206\u53d8\u6210\u4e8c\u5206\u5957\u5e73\u8861\u6811\uff0c\u591a\u4e00\u4e2a $\\log$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<map>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/trie_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\ntree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> val[500001];\nint t,ans,n,fa[500001],minn[500001],p[500001],tmp[2000001],*id=tmp,*sg[500001],len[500001],son[500001];\nvector<int> v[500001];\nmap<int,int> cnt[500001];\ninline int read()\n{\n    int x=0;\n    char c=getchar();\n    while(c<'0'||c>'9')\n        c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    return x;\n}\ninline void dfs1(int k)\n{\n    minn[k]=n;\n    for(int i:v[k])\n    {\n        dfs1(i);\n        if(len[i]>len[son[k]])\n            son[k]=i;\n        minn[k]=min(minn[k],minn[i]+1);\n    }\n    len[k]=len[son[k]]+1;\n    if(v[k].empty())\n    {\n        len[k]=2;\n        minn[k]=1;\n    }\n}\ninline int mex(int l,int r,int k)\n{\n    if(l==r)\n        return l;\n    int mid=(l+r)>>1;\n    if(val[k].order_of_key(mid+1)==mid+1)\n        return mex(mid+1,r,k);\n    return mex(l,mid,k);\n}\ninline void dfs2(int k)\n{\n    if(son[k])\n    {\n        sg[son[k]]=sg[k]+1;\n        dfs2(son[k]);\n        p[k]=p[son[k]];\n        for(int i=minn[son[k]]+1;i>minn[k];--i)\n            if(!--cnt[p[k]][sg[k][i]])\n            {\n                val[p[k]].erase(sg[k][i]);\n                cnt[p[k]].erase(sg[k][i]);\n            }\n    }\n    else\n    {\n        p[k]=k;\n        cnt[p[k]][0]=1;\n        val[p[k]].insert(0);\n    }\n    for(int i:v[k])\n    {\n        if(i==son[k])\n            continue;\n        sg[i]=id;\n        id+=len[i];\n        dfs2(i);\n        for(int j=1;j<=minn[k];++j)\n        {\n            if(!--cnt[p[k]][sg[k][j]])\n            {\n                val[p[k]].erase(sg[k][j]);\n                cnt[p[k]].erase(sg[k][j]);\n            }\n            sg[k][j]^=sg[i][j-1];\n            if(!cnt[p[k]][sg[k][j]]++)\n                val[p[k]].insert(sg[k][j]);\n        }\n    }\n    sg[k][0]=mex(0,n,p[k]);\n    if(!cnt[p[k]][sg[k][0]]++)\n        val[p[k]].insert(sg[k][0]);\n}\nint main()\n{\n    t=read();\n    while(t--)\n    {\n        n=read();\n        for(int i=1;i<=n;++i)\n        {\n            fa[i]=read();\n            if(fa[i])\n                v[fa[i]].emplace_back(i);\n        }\n        for(int i=1;i<=n;++i)\n            if(!fa[i])\n            {\n                dfs1(i);\n                sg[i]=id;\n                id+=len[i];\n                dfs2(i);\n                ans^=sg[i][0];\n            }\n        cout<<(ans? \"YES\":\"NO\")<<'\\n';\n        for(int i=0;i<=n;++i)\n        {\n            fa[i]=minn[i]=p[i]=len[i]=son[i]=0;\n            sg[i]=NULL;\n            v[i].clear();\n            val[i].clear();\n            cnt[i].clear();\n        }\n        for(int i=0;i<=n+n;++i)\n            tmp[i]=0;\n        id=tmp;\n        ans=0;\n    }\n    return 0;\n}\n```",
        "postTime": 1661848545,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "CF1585G Poachers"
    }
]