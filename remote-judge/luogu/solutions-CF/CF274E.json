[
    {
        "content": "\u9898\u610f\u5927\u6982\u662f\u8bf4\u7ed9\u4f60\u4e00\u4e2a $n\\times m$ \u7684\u5e73\u9762\uff0c\u5176\u4e2d\u6709 $k$ \u4e2a\u683c\u5b50\u662f\u969c\u788d\u7269\uff0c\u6709\u4e00\u675f\u6fc0\u5149\u4ece\u67d0\u4e00\u4e2a\u7a7a\u683c\u5b50\u4e2d\u592e\u51fa\u53d1\u6cbf\u67d0\u4e00\u5bf9\u89d2\u7ebf\u524d\u884c\uff0c\u9047\u5230\u8fb9\u754c\u6216\u8005\u969c\u788d\u7269\u5c31\u6309\u9898\u610f\u7684\u8981\u6c42\u53cd\u5c04\u3002\u95ee\u8fd9\u675f\u6fc0\u5149\u5982\u679c\u65e0\u9650\u53cd\u5c04\u4e0b\u53bb\u4f1a\u7ecf\u8fc7\u591a\u5c11\u4e2a\u7a7a\u683c\u5b50\u3002  \n\n\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u53d1\u73b0\u4e00\u4e9b\u6027\u8d28\uff1a\n\n+ \u6027\u8d28 $1$\uff1a\u6fc0\u5149\u5728\u8d70\u8fc7\u4e00\u6bb5\u8def\u7a0b\u540e\u4f1a\u53d1\u751f\u5faa\u73af\uff0c\u5373\u518d\u4e00\u6b21\u8d70\u5230\u5176\u4e00\u5f00\u59cb\u7684\u4f4d\u7f6e\u4e14\u6cbf\u7740\u5f00\u59cb\u7684\u65b9\u5411\u3002\u53d1\u751f\u8fd9\u79cd\u5faa\u73af\u4e4b\u524d\u6fc0\u5149\u53cd\u5c04\u7684\u6b21\u6570\u4e3a $\\Theta(n+m+k)$\u3002  \n\u8bc1\u660e\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u7a7a\u7684 $n\\times m$ \u7684\u7f51\u683c\uff0c\u5171\u6709 $\\Theta(n+m)$ \u6761\u5bf9\u89d2\u7ebf\uff0c\u800c\u6bcf\u4e2a\u969c\u788d\u5c06\u539f\u5148\u8fc7\u969c\u788d\u70b9\u7684\u5bf9\u89d2\u7ebf\u5206\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u76f8\u5f53\u4e8e\u659c\u5411\u7ebf\u6bb5\u7684\u6570\u91cf\u589e\u52a0 $2$\u3002\u6240\u4ee5\u5171\u6709 $\\Theta(n+m+k)$ \u6761\u659c\u5411\u7ebf\u6bb5\uff0c\u6fc0\u5149\u53cd\u5c04\u7684\u6b21\u6570\u4e5f\u4e3a $\\Theta(n+m+k)$\u3002  \n\n+ \u6027\u8d28 $2$\uff1a\u6fc0\u5149\u4e0d\u4f1a\u7a7f\u8fc7\u540c\u4e00\u683c\u5b50\u7684\u4e24\u6761\u5bf9\u89d2\u7ebf\u3002  \n\u8bc1\u660e\uff1a\u5c06\u683c\u5b50\u9ed1\u767d\u67d3\u8272\uff0c\u53ef\u4ee5\u53d1\u73b0\u6fc0\u5149\u7a7f\u8fc7\u4e3b\u5bf9\u89d2\u7ebf\u65f6\u603b\u662f\u7ecf\u8fc7\u540c\u4e00\u79cd\u989c\u8272\u7684\u683c\u5b50\uff0c\u7ecf\u53cd\u5c04\u540e\u5728\u6b21\u5bf9\u89d2\u7ebf\u4e0a\u53c8\u603b\u662f\u7ecf\u8fc7\u53e6\u4e00\u79cd\u989c\u8272\u7684\u683c\u5b50\uff0c\u5982\u679c\u6fc0\u5149\u6b63\u5728\u7ecf\u8fc7\u7684\u4e3b/\u6b21\u5bf9\u89d2\u7ebf\u4e92\u6362\uff0c\u683c\u5b50\u7684\u989c\u8272\u4e5f\u4e00\u5b9a\u4e92\u6362\u3002\u6240\u4ee5\u540c\u4e00\u4e2a\u683c\u5b50\u4e0d\u53ef\u80fd\u88ab\u6fc0\u5149\u7ecf\u8fc7\u4e24\u6b21\u3002\n\n\u5229\u7528\u6027\u8d28 $1$\uff0c\u6211\u4eec\u53ef\u4ee5\u6a21\u62df\u6fc0\u5149\u7684\u8f68\u8ff9\uff0c\u6bcf\u6b21\u8df3\u5230\u6fc0\u5149\u4e0b\u4e00\u6b21\u53cd\u5c04\u7684\u4f4d\u7f6e\uff0c\u76f4\u5230\u5faa\u73af\u4e3a\u6b62\u3002\u8003\u8651\u7528 map \u8bb0\u5f55\u6dfb\u52a0\u7684\u969c\u788d\u7269\uff0c\u7528 set \u8bb0\u5f55\u6bcf\u6761\u5bf9\u89d2\u7ebf\u4e0a\u7684\u969c\u788d\u7269\uff0c\u6bcf\u6b21\u67e5\u627e\u6309\u5f53\u524d\u65b9\u5411\u884c\u8d70\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u969c\u788d\u7269\u5373\u53ef\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\uff1a  \n+ \u4e00\u4e2a\u683c\u5b50\u7684\u5176\u4e2d\u4e00\u6761\u5bf9\u89d2\u7ebf\u6709\u53ef\u80fd\u88ab\u6b63\u53cd\u65b9\u5411\u7ecf\u8fc7\u4e24\u6b21\u3002\u4e0d\u96be\u53d1\u73b0\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6240\u6709\u6fc0\u5149\u4f1a\u7ecf\u8fc7\u7684\u683c\u5b50\u5728\u5faa\u73af\u524d\u90fd\u4f1a\u88ab\u7ecf\u8fc7\u4e24\u6b21\uff0c\u5c06\u7b54\u6848\u9664\u4ee5 $2$ \u5373\u53ef\u3002  \n+ \u8003\u8651\u8fb9\u754c\u65f6\u76f4\u63a5\u5c06\u8fb9\u754c\u4e5f\u770b\u4f5c\u969c\u788d\u7269\u52a0\u8fdb set \u4e2d\u5373\u53ef\u3002  \n+ \u5728\u4e00\u5f00\u59cb\u53ef\u4ee5\u5148\u5c06\u6fc0\u5149\u79fb\u52a8\u5230\u7b2c\u4e00\u4e2a\u969c\u788d\u7269\u4e0a\uff0c\u7136\u540e\u5c06\u518d\u56de\u5230\u7b2c\u4e00\u4e2a\u969c\u788d\u7269\u7684\u65f6\u5019\u89c6\u4e3a\u5b8c\u6210\u4e86\u4e00\u4e2a\u5faa\u73af\uff0c\u65b9\u4fbf\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a  \n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <map>\n#include <set>\n\n#define int long long\nusing namespace std;\n\nconst int N = 2e5 + 10;\nconst int dx[] = {-1, -1, 1, 1};\nconst int dy[] = {1, -1, -1, 1};\n\nint rd(){\n    int a = 0, f = 1;\n    char c = getchar();\n    while(!isdigit(c)){\n        if(c == '-') f = -1;\n        c = getchar();\n    }\n    while(isdigit(c)) a = a * 10 + c - '0', c = getchar();\n    return a * f;\n}\n\nint n, m, k;\nint x, y, d, tx, ty, td, revis = 1; // revis \u4ee3\u8868\u8fd9\u4e2a\u683c\u5b50\u5728\u4e00\u6b21\u5faa\u73af\u4e2d\u88ab\u7ecf\u8fc7\u4e86\u591a\u5c11\u6b21\nint ans;\nchar dir[5];\n\nmap <int, int> mp[N]; // \u5b58\u969c\u788d\u7269\nset <pair<int, int> > s[2][N]; // \u5b58\u5bf9\u89d2\u7ebf\uff0c0 \u4ee3\u8868\u6b21\u5bf9\u89d2\u7ebf\uff0c1 \u4ee3\u8868\u4e3b\u5bf9\u89d2\u7ebf\n\nvoid add(int x, int y){ // \u6dfb\u52a0\u969c\u788d\u7269\n    mp[x][y] = 1;\n    s[0][x + y].insert(make_pair(x, y));\n    s[1][x - y + m + 1].insert(make_pair(x, y));\n}\n\nvoid work(int op){ // \u5bfb\u627e\u4e0b\u4e00\u4e2a\u53cd\u5c04\u7684\u4f4d\u7f6e\n    auto it = s[d & 1][d & 1 ? x - y + m + 1 : x + y].lower_bound(make_pair(x, y));\n    if(d < 2) --it;\n    if(op) ans += abs(x - (*it).first); // *it \u4f18\u5148\u7ea7\u4f4e\uff0c\u8981\u52a0\u62ec\u53f7\uff01\n    x = (*it).first - dx[d];\n    y = (*it).second - dy[d];\n    int cnt = mp[x + dx[d]].count(y) + mp[x].count(y + dy[d]);\n    if(!cnt || cnt == 2) d = (d + 2) % 4, revis = 2;\n    else if(mp[x + dx[d]].count(y)) y += dy[d], d ^= 3;\n    else x += dx[d], d ^= 1;\n}\n\nsigned main(){\n    n = rd(), m = rd(), k = rd();\n    for(int i = 0; i <= n + 1; ++i) add(i, 0), add(i, m + 1);\n    for(int i = 0; i <= m + 1; ++i) add(0, i), add(n + 1, i);\n    for(int i = 1, u, v; i <= k; ++i){\n        u = rd(), v = rd();\n        add(u, v);\n    }\n    x = rd(), y = rd();\n    scanf(\"%s\", dir);\n    if(dir[0] == 'N' && dir[1] == 'E') d = 0;\n    if(dir[0] == 'N' && dir[1] == 'W') d = 1;\n    if(dir[0] == 'S' && dir[1] == 'W') d = 2;\n    if(dir[0] == 'S' && dir[1] == 'E') d = 3;\n\n    work(0);\n    tx = x, ty = y, td = d;\n    work(1);\n    while(x != tx || y != ty || d != td) work(1); // \u4e00\u76f4\u7edf\u8ba1\u7b54\u6848\u5230\u4ea7\u751f\u5faa\u73af\u4e3a\u6b62\n\n    printf(\"%lld\\n\", ans / revis);\n    return 0;\n}\n```\n",
        "postTime": 1635405598,
        "uid": 197717,
        "name": "Ignotus",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 - CF274E - Mirror Room"
    },
    {
        "content": "\u597d\u50cf\u6ca1\u6709\u4eba\u53d1\u9898\u89e3\uff1f\uff01\uff1f\n\n   \u5149\u7ebf\u53ea\u6709\u9047\u4e0a\u8fb9\u754c\u6216\u5835\u585e\u7684\u683c\u5b50\u624d\u4f1a\u6539\u53d8\u65b9\u5411\uff0c\u6240\u4ee5\u6539\u53d8\u65b9\u5411\u7684\u4f4d\u7f6e\u662f\u6709\u9650\u7684\uff0c\u5149\u7ebf\u7684\u65b9\u5411\u53c8\u6700\u591a\u53ea\u6709\u56db\u79cd\uff0c\u6240\u4ee5\u5149\u7ebf\u5728\u5faa\u73af\u4e4b\u524d\u6539\u53d8\u65b9\u5411\u7684\u6b21\u6570\u662fO\uff08n+m+k\uff09\u7ea7\u522b\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u6a21\u62df\u5149\u7ebf\u7684\u79fb\u52a8\u3002\u5df2\u77e5\u5149\u7ebf\u4f4d\u7f6e\u548c\u5149\u7ebf\u7684\u65b9\u5411\uff0c\u4f7f\u7528\u4e8c\u5206\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728O\uff08log k\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u5373\u5c06\u6539\u53d8\u65b9\u5411\u7684\u4f4d\u7f6e\u548c\u6539\u53d8\u540e\u7684\u65b9\u5411\u3002\n\n   \u6211\u4eec\u6682\u628a\u5149\u7ebf\u7684\u4f4d\u7f6e\u548c\u65b9\u5411\u79f0\u4e3a\u5149\u7ebf\u7684\u72b6\u6001\u3002\u4e00\u79cd\u72b6\u6001\u80fd\u8f6c\u79fb\u5230\u4e00\u79cd\u4e14\u4ec5\u6709\u4e00\u79cd\u72b6\u6001\u3002\u5982\u679c\u4ece\u72b6\u6001a\u80fd\u8f6c\u79fb\u5230\u72b6\u6001b\uff0c\u90a3\u4e48b\u53cd\u5411\u540e\u7684\u72b6\u6001\u80fd\u8f6c\u79fb\u5230a\u53cd\u5411\u540e\u7684\u72b6\u6001\u3002\u6240\u4ee5\u4e00\u79cd\u72b6\u6001\u80fd\u4ece\u4e00\u79cd\u4e14\u4ec5\u6709\u4e00\u79cd\u72b6\u6001\u8f6c\u79fb\u800c\u6765\u3002\u8fd9\u5c31\u50cf\u662f\u4e00\u79cd\u7f6e\u6362\uff0c\u6240\u4ee5\u4ece\u521d\u59cb\u72b6\u6001\u51fa\u53d1\uff0c\u5fc5\u5b9a\u4f1a\u56de\u5230\u521d\u59cb\u72b6\u6001\uff0c\u5e76\u4e14\u56de\u5230\u521d\u59cb\u72b6\u6001\u4e4b\u524d\u4e0d\u4f1a\u91cd\u590d\u7ecf\u8fc7\u67d0\u79cd\u72b6\u6001\u3002\n\n   \u6211\u4eec\u5bf9\u7f51\u683c\u8fdb\u884c\u67d3\u8272\uff0c\u6709\u90bb\u8fb9\u7684\u683c\u5b50\u989c\u8272\u4e0d\u540c\uff0c\u5f62\u6210\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u6839\u636e\u9898\u76ee\u4e2d\u5149\u7ebf\u53cd\u5c04\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u5f53\u5149\u7ebf\u6cbf\u897f\u5317\u3001\u4e1c\u5357\u65b9\u5411\u524d\u8fdb\u65f6\uff0c\u53ea\u4f1a\u7ecf\u8fc7\u4e00\u79cd\u989c\u8272\u7684\u7f51\u683c\uff0c\u6bcf\u5f53\u5149\u7ebf\u6cbf\u4e1c\u5317\u3001\u897f\u5357\u65b9\u5411\u524d\u8fdb\u65f6\uff0c\u53ea\u4f1a\u7ecf\u8fc7\u53e6\u4e00\u79cd\u989c\u8272\u7684\u7f51\u683c\u3002\u6240\u4ee5\u5149\u7ebf\u5728\u67d0\u4e00\u4e2a\u683c\u5b50\u4e2d\u5fc3\u65f6\uff0c\u8981\u4e48\u53ea\u4f1a\u662f\u897f\u5317\u3001\u4e1c\u5357\u65b9\u5411\u4e4b\u4e00\uff0c\u8981\u4e48\u53ea\u4f1a\u662f\u4e1c\u5317\u3001\u897f\u5357\u65b9\u5411\u4e4b\u4e00\u3002\n\n   \u8fd9\u6837\uff0c\u5982\u679c\u4e00\u6b21\u5faa\u73af\u5185\u4e00\u4e2a\u683c\u5b50\u88ab\u91cd\u590d\u7ecf\u8fc7\uff0c\u53ea\u6709\u53ef\u80fd\u662f\u5149\u7ebf\u4ee5\u76f8\u53cd\u7684\u4e24\u4e2a\u65b9\u5411\u8fdb\u5165\uff0c\u5e76\u4e14\u4e00\u6b21\u5faa\u73af\u5185\u4e00\u4e2a\u683c\u5b50\u6700\u591a\u88ab\u7ecf\u8fc7\u4e24\u6b21\u3002\u4e00\u4e2a\u683c\u5b50\u88ab\u7ecf\u8fc7\u4e24\u6b21\uff0c\u6240\u6709\u88ab\u5149\u7ebf\u7ecf\u8fc7\u7684\u683c\u5b50\u90fd\u4f1a\u88ab\u7ecf\u8fc7\u4e24\u6b21\u3002\u6613\u77e5\uff0c\u5982\u679c\u5149\u7ebf\u5728\u524d\u8fdb\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u8fc7\u5982\u4e0b\u4e24\u79cd\u53cd\u5c04\uff0c\u6240\u6709\u683c\u5b50\u5c31\u4f1a\u88ab\u7ecf\u8fc7\u4e24\u6b21\u3002\u53ea\u9700\u5728\u6a21\u62df\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u662f\u5426\u51fa\u73b0\u8fc7\u8fd9\u4e24\u79cd\u60c5\u51b5\u5373\u53ef\u3002\n   \n   \u4ee3\u7801\u6709\u70b9\u6076\u5fc3\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct rec{int x,y,d;};\nint n,m,k;\nlong long ans;\nset<int>s1[200010],s2[200010];\nmap<pair<int,int>,bool>mp;\nint getid(int x,int y,int d){return d==1?x-y+m+1:x+y;}\nbool same(rec a,rec b){if(a.x==b.x&&a.y==b.y&&a.d==b.d)return 1;return 0;}\nbool check(int x,int y){return mp[make_pair(x,y)];}\nvoid add(int x,int y)\n{\n    s1[getid(x,y,1)].insert(x);\n    s2[getid(x,y,2)].insert(x);\n    mp[make_pair(x,y)]=1;\n}\npair<rec,int> dfs(rec u)\n{\n    rec re;\n    set<int>::iterator it;\n    if(u.d==1)\n    {\n        it=s1[getid(u.x,u.y,1)].lower_bound(u.x);it--;\n        re.x=u.x-(abs(*it-u.x)-1);\n        re.y=u.y-(abs(*it-u.x)-1);\n        if(check(re.x-1,re.y)&&check(re.x,re.y-1))re.d=3;\n        else if(check(re.x-1,re.y)){re.y--;re.d=4;}\n        else if(check(re.x,re.y-1)){re.x--;re.d=2;}\n        else re.d=3;\n    }\n    if(u.d==2)\n    {\n        it=s2[getid(u.x,u.y,2)].lower_bound(u.x);it--;\n        re.x=u.x-(abs(*it-u.x)-1);\n        re.y=u.y+(abs(*it-u.x)-1);\n        if(check(re.x-1,re.y)&&check(re.x,re.y+1))re.d=4;\n        else if(check(re.x-1,re.y)){re.y++;re.d=3;}\n        else if(check(re.x,re.y+1)){re.x--;re.d=1;}\n        else re.d=4;\n    }\n    if(u.d==3)\n    {\t\n        it=s1[getid(u.x,u.y,1)].lower_bound(u.x);\n        re.x=u.x+(abs(*it-u.x)-1);\n        re.y=u.y+(abs(*it-u.x)-1);\n        if(check(re.x+1,re.y)&&check(re.x,re.y+1))re.d=1;\n        else if(check(re.x+1,re.y)){re.y++;re.d=2;}\n        else if(check(re.x,re.y+1)){re.x++;re.d=4;}\n        else re.d=1;\n    }\n    if(u.d==4)\n    {\n        it=s2[getid(u.x,u.y,2)].lower_bound(u.x);\n        re.x=u.x+(abs(*it-u.x)-1);\n        re.y=u.y-(abs(*it-u.x)-1);\n        if(check(re.x+1,re.y)&&check(re.x,re.y-1))re.d=2;\n        else if(check(re.x+1,re.y)){re.y--;re.d=1;}\n        else if(check(re.x,re.y-1)){re.x++;re.d=3;}\n        else re.d=2;\n    }\n    return make_pair(re,abs(*it-u.x));\n}\nbool judge(rec u)\n{\n    rec re=u;\n    do\n    {\n        pair<rec,int> cur=dfs(u);\n        ans+=(long long)cur.second;\n        switch(cur.first.d)\n        {\n        \tcase 1:if(u.d==3)return 0;break;\n        \tcase 2:if(u.d==4)return 0;break;\n        \tcase 3:if(u.d==1)return 0;break;\n        \tcase 4:if(u.d==2)return 0;break;\n        }\n        u=cur.first;\n    }while(!same(re,u));\n    return 1;\n}\nvoid pre_build()\n{\n    for(int i=0;i<=m+1;i++)\n    {\n        add(0,i);\n        add(n+1,i);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        add(i,0);\n        add(i,m+1);\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    pre_build();\n    for(int i=1;i<=k;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n    }\n    int x,y,d;\n    char ch[5];\n    scanf(\"%d%d%s\",&x,&y,ch+1);\n    if(ch[1]=='N'&&ch[2]=='W')d=1;\n    if(ch[1]=='N'&&ch[2]=='E')d=2;\n    if(ch[1]=='S'&&ch[2]=='E')d=3;\n    if(ch[1]=='S'&&ch[2]=='W')d=4;\n    rec st={x,y,d};\n    st=dfs(st).first;\n    if(!judge(st))\n    {\n        ans--;\n        switch(st.d)\n        {\n        \tcase 1:st.d=3;break;\n        \tcase 2:st.d=4;break;\n        \tcase 3:st.d=1;break;\n        \tcase 4:st.d=2;break;\n        }\n        judge(st);\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1563797333,
        "uid": 93488,
        "name": "Porsche",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF274E \u3010Mirror Room\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF274E)\n\n## \u9898\u610f\n\n$n \\times m$ \u7684\u5e73\u9762\uff0c\u6709 $k$ \u4e2a\u969c\u788d\u7269\uff0c\u6fc0\u5149\u78b0\u5230\u969c\u788d\u7269\u540e\u4f1a\u53cd\u5c04\uff0c\u7ed9\u5b9a\u6fc0\u5149\u521d\u59cb\u4f4d\u7f6e\u548c\u65b9\u5411\uff0c\u6c42\u6fc0\u5149\u80fd\u7ecf\u8fc7\u591a\u5c11\u969c\u788d\u7269\u3002\n\n## \u89e3\u6cd5\n\n\u9996\u5148\u9700\u8981\u8bc1\u660e\u4e24\u4e2a\u6027\u8d28\uff1a\n\n1. \u6fc0\u5149\u53cd\u5f39\u6b21\u6570\u4e3a $O(n+m+k)$ \u7ea7\u522b\u3002\n\n* \u8bc1\u660e\uff1a\u5bf9\u89d2\u7ebf\u7ea7\u522b\u4e3a $O(n+m)$\uff0c\u6709 $k$ \u4e2a\u969c\u788d\u7269\u628a\u8fd9\u4e9b\u5bf9\u89d2\u7ebf\u5206\u4e3a $O(k)$ \u4efd\uff0c\u603b\u6570\u4e3a $O(n+m+k)$\u3002\n\n2. \u540c\u4e00\u4e2a\u65b9\u683c\u4e0d\u4f1a\u7ecf\u8fc7\u4ea4\u53c9\u6fc0\u5149\u3002\n\n* \u8bc1\u660e\uff1a\u7c7b\u4f3c\u9ed1\u767d\u67d3\u8272\uff0c\u628a\u76f8\u90bb\u7684\u67d3\u6210\u4e0d\u540c\u989c\u8272\uff0c\u7136\u540e\u53d1\u73b0\uff0c\u540c\u4e00\u65b9\u5411\u4e0a\u7684\u8def\u5f84\u6240\u7ecf\u8fc7\u7684\u653e\u683c\u989c\u8272\u603b\u76f8\u540c\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8f6c\u5411\u4e00\u5b9a\u4f1a\u53d8\u6362\u5230\u76f8\u90bb\u7684\u989c\u8272\u4e0d\u540c\u7684\u683c\u5b50\u3002\n\n\u6839\u636e\u7b2c\u4e00\u4e2a\u6027\u8d28\uff0c\u53ef\u4ee5\u60f3\u5230\u5feb\u901f\u627e\u5230\u4e0b\u4e00\u6b21\u78b0\u5230\u969c\u788d\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u5229\u7528 set \u5b58\u5bf9\u89d2\u7ebf\u4e0a\u7684\u70b9\uff0c\u6bcf\u6b21 $ans$ \u7d2f\u52a0\u79fb\u52a8\u8ddd\u79bb\uff0c\u7531\u4e8e\u6027\u8d28\u4e8c\uff0c\u4e0d\u4f1a\u6709\u4ea4\u53c9\u7b97\u91cd\u7684\u60c5\u51b5\uff0c\u5982\u679c\u53cd\u5411\u4e86\u600e\u4e48\u529e\uff1f\n\n\u5904\u7406\u65b9\u6cd5\uff1a\u4ece\u5f53\u524d\u70b9\u80fd\u591f\u5230\u8fbe\u7684\u67d0\u4e2a\u8fb9\u754c\uff08\u6216\u969c\u788d\u7269\u9644\u8fd1\uff09\u5f00\u59cb\u8fd0\u884c\u4ee3\u7801\uff0c\u8fc7\u7a0b\u4e2d\u5982\u679c\u51fa\u73b0\u8d70\u53cd\u5411\u8fb9\u7684\u60c5\u51b5\u6807\u8bb0\u4e00\u4e0b\uff0c\u5bb9\u6613\u8bc1\u660e\uff0c\u4e00\u65e6\u8d70\u5230\u53cd\u5411\u8fb9\uff0c\u6fc0\u5149\u4f1a\u6309\u7167\u539f\u8def\u8fd4\u56de\uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u4f1a\u88ab\u6070\u597d\u8ba1\u7b97\u4e24\u6b21\uff0c\u9664\u4ee5\u4e8c\u5373\u53ef\uff0c\u5982\u679c\u6ca1\u6709\u7ecf\u8fc7\u53cd\u5411\uff0c\u5219\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u7ecf\u8fc7\u4e00\u6b21\uff08\u56e0\u4e3a\u65e2\u6ca1\u6709\u4ea4\u53c9\uff0c\u53c8\u6ca1\u6709\u53cd\u5411\uff09\uff0c\u6240\u4ee5\uff0c\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u7ecf\u8fc7\u4e00\u6b21\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\uff1a\u8fb9\u754c\u4e5f\u8981\u7b97\u4f5c\u969c\u788d\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nnamespace Std{\n    int n,m,k,x,y,d,tx,ty,td,cs=1,ans;\n    set<pair<int,int> >cset[2][200010];\n    unordered_map<int,int>cmap[100010];\n    const int dx[] = {1, -1, -1, 1},dy[] = {-1, -1, 1, 1};\n    char s[5];\n    inline void add(int a,int b){\n        cmap[a][b]=1;\n        cset[0][a+b].insert(make_pair(a,b));\n        cset[1][b-a+n].insert(make_pair(a,b));\n    }\n    void work(bool opt){\n        auto it=cset[d&1][d&1?y-x+n:x+y].lower_bound(make_pair(x,y));\n        if(d==1||d==2)it--;\n        if(opt)ans+=abs(x-(*it).first);\n        x=(*it).first-dx[d],y=(*it).second-dy[d];\n        int cnt=cmap[x+dx[d]].count(y)+cmap[x].count(y+dy[d]);\n        if((!cnt)||cnt==2){\n            cs=2;\n            d^=2;\n        }\n        else if(cmap[x+dx[d]].count(y)){\n            y+=dy[d];\n            d^=1;\n        }\n        else{\n            x+=dx[d];\n            d^=3;\n        }\n    }\n    int main(){\n        scanf(\"%lld%lld%lld\",&n,&m,&k);\n        int a,b;\n        for(int i=1;i<=k;++i){\n            scanf(\"%lld%lld\",&a,&b);\n            add(a,b);\n        }\n        for(int i=1;i<=n;++i){\n            add(i,0);\n            add(i,m+1);\n        }\n        for(int i=1;i<=m;++i){\n            add(0,i);\n            add(n+1,i);\n        }\n        scanf(\"%lld%lld\",&x,&y);\n        scanf(\"%s\",s+1);\n        if(s[1]=='S')d+=2;\n        if((s[1]=='S'&&s[2]=='E')||(s[1]=='N'&&s[2]=='W'))++d;\n        add(0,0);\n        add(0,m+1);\n        add(n+1,0);\n        add(n+1,m+1);\n        work(false);\n        tx=x;\n        ty=y;\n        td=d;\n        work(true);\n        while(x!=tx||y!=ty||d!=td)\n        {\n            work(true);\n        }\n        printf(\"%lld\\n\",ans/cs);\n        return 0;\n    }\n}\n#undef int\nint main(){\n    return Std::main();\n}\n```\n",
        "postTime": 1651507618,
        "uid": 576737,
        "name": "Wilson_Inversion",
        "ccfLevel": 7,
        "title": "CF274E\u9898\u89e3"
    }
]