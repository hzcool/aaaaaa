[
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\n\u540e\u7f00\u81ea\u52a8\u673a\uff1a\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u5b57\u7b26\u4e32\u91cc\u7684\u4efb\u610f\u5b57\u7b26\u3002\n\n\u540e\u7f00\u6570\u7ec4\uff1a\u53ef\u4ee5\u4ea4\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u5b57\u7b26\u3002\n\n\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 $s$ \u8ddf $t$\u3002\n\n\u95ee\u5982\u4f55\u5c06 $s$ \u7ecf\u8fc7\u4e0a\u9762\u4e24\u4e2a\u64cd\u4f5c\u540e\u53d8\u6210 $t$\uff1a\n\n1. \u53ea\u7528\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u8f93\u51fa `automaton`\u3002\n1. \u53ea\u7528\u540e\u7f00\u6570\u7ec4\uff0c\u8f93\u51fa `array`\u3002\n1. \u4e24\u4e2a\u90fd\u7528\uff0c\u8f93\u51fa `both`\u3002\n1. \u4e0a\u8ff0\u65b9\u6cd5\u90fd\u4e0d\u884c\uff0c\u8f93\u51fa `need tree`\u3002\n\n# \u601d\u8def\n\n\u7531\u4e8e\u6570\u636e\u4fdd\u8bc1\u80fd\u53ea\u7528\u540e\u7f00\u81ea\u52a8\u673a\u5c31\u4e0d\u80fd\u53ea\u7528\u540e\u7f00\u6570\u7ec4\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5148\u5224\u65ad\u53ea\u4f7f\u7528\u540e\u7f00\u81ea\u52a8\u673a\u6216\u8005\u53ea\u4f7f\u7528\u540e\u7f00\u6570\u7ec4\u80fd\u4e0d\u80fd\u89e3\u51b3\uff0c\u4e0d\u80fd\u5c31\u5224\u65ad\u80fd\u4e0d\u80fd\u4e24\u4e2a\u90fd\u4f7f\u7528\u80fd\u4e0d\u80fd\u89e3\u51b3\uff0c\u8fd8\u4e0d\u884c\u5c31 `need tree` \u4e86\u3002\n\n\u53ea\u7528\u540e\u7f00\u81ea\u52a8\u673a\uff1a\u5224\u65ad $s$ \u662f\u5426\u4e3a $t$ \u7684\u5b50\u5e8f\u5217\uff0c\u6211\u8fd9\u91cc\u4f7f\u7528\u53cc\u6307\u9488\u3002\n\n\u53ea\u7528\u540e\u7f00\u6570\u7ec4\uff1a\u5224\u65ad $s$ \u662f\u5426\u4e3a $t$ \u7684\u6240\u6709\u5b57\u7b26\u7684\u4e00\u79cd\u6392\u5217\uff0c\u6211\u8fd9\u91cc\u4f7f\u7528\u5b57\u7b26\u8ba1\u6570\uff0c\u53ea\u8981\u6240\u6709\u5b57\u7b26\u7684\u6570\u91cf\u76f8\u7b49\u5373\u53ef\u3002\n\n\u4e24\u4e2a\u90fd\u7528\uff1a\u5224\u65ad $s$ \u662f\u5426\u4e3a $t$ \u7684\u67d0\u4e2a\u5b50\u5e8f\u5217\u7684\u4e00\u79cd\u6392\u5217\uff0c\u6211\u8fd9\u91cc\u8fd8\u662f\u7528\u5b57\u7b26\u8ba1\u6570\uff0c\u53ea\u8981\u6240\u6709\u5b57\u7b26\u5728 $s$ \u4e2d\u7684\u6570\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u5728 $t$ \u4e2d\u7684\u6570\u91cf\u5373\u53ef\u3002\n\n# Code\n\n\u6ce8\u91ca\u7684 `//` \u540e\u9762\u52a0\u7a7a\u683c\u53ea\u662f\u4e2a\u4eba\u4e60\u60ef\uff08\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define endl '\\n'\n#define qwq ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)\ntypedef long long ll;\nstring a, b;\nll cnta[256], cntb[256]; // \u5b57\u7b26\u8ba1\u6570\u6570\u7ec4\nint main(){\n\tqwq;\n\tcin >> a >> b;\n\t// \u540e\u7f00\u6570\u7ec4 \n\tif(a.length() == b.length()){\n\t\tfor(ll i = a.length() - 1; i >= 0; i--) cnta[a[i]]++;\n\t\tfor(ll i = b.length() - 1; i >= 0; i--) cntb[b[i]]++;\n\t\tbool flag = true;\n\t\tfor(ll i = 'a'; i <= 'z'; i++){\n\t\t\tif(cnta[i] != cntb[i]){\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag){\n\t\t\tcout << \"array\" << endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\t// \u540e\u7f00\u81ea\u52a8\u673a\n\tif(b.length() < a.length()){\n\t\tll apos = 0, bpos = 0, check = 0;\n\t\tfor(bpos = 0; bpos < b.length(); bpos++){\n\t\t\tfor(; apos < a.length(); apos++){\n\t\t\t\tif(a[apos] == b[bpos]){\n\t\t\t\t\tapos++;\n\t\t\t\t\tcheck++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(check == b.length()){\n\t\t\tcout << \"automaton\" << endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\t// both\n\tfor(ll i = a.length() - 1; i >= 0; i--) cnta[a[i]]++;\n\tfor(ll i = b.length() - 1; i >= 0; i--) cntb[b[i]]++;\n\tbool flag = true;\n\tfor(ll i = 'a'; i <= 'z'; i++){\n\t\tif(cnta[i] < cntb[i]){\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(flag){\n\t\tcout << \"both\" << endl;\n\t\treturn 0;\n\t}\n\t// tree\n\tcout << \"need tree\" << endl;\n\treturn 0;\n}\n```",
        "postTime": 1676019505,
        "uid": 604622,
        "name": "achjuncool",
        "ccfLevel": 5,
        "title": "CF448B Suffix Structures \u9898\u89e3"
    },
    {
        "content": "# \u9898\u610f\n\n\u4e24\u4e2a\u5b57\u7b26\u4e32 $s$ \u548c $t$\uff0c\u6709\u4e24\u79cd\u64cd\u4f5c\uff0c\u5206\u522b\u4e3a\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u548c\u4ea4\u6362\u4e24\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002\u5224\u65ad\u9700\u8981\u7528\u54ea\u4e00\u79cd\u64cd\u4f5c\uff0c\u6216\u90fd\u7528\uff0c\u6216\u65e0\u89e3\u3002\n\n# \u601d\u8def\n\n- \u53ea\u5220\u9664\u5b57\u7b26\uff1a\u8f6c\u5316\u6210\u5224\u65ad $t$ \u662f\u5426\u4e3a $s$ \u7684\u5b50\u5e8f\u5217\uff0c\u6570\u636e\u5c0f\u53ef\u4ee5 $n^2$ \u68c0\u67e5\u3002\n\n- \u53ea\u4ea4\u6362\u4f4d\u7f6e\uff1a\u8f6c\u5316\u4e3a\u5224\u65ad $s$ \u548c $t$ \u5305\u542b\u7684\u5b57\u7b26\u662f\u5426**\u5b8c\u5168\u76f8\u540c**\uff0c\u5f00\u4e24\u4e2a\u6876\u7edf\u8ba1\u5373\u53ef\u3002\n\n- \u4e24\u79cd\u64cd\u4f5c\u90fd\u7528\uff1a\u8f6c\u5316\u4e3a $t$ \u7684\u6240\u6709\u5b57\u7b26\u5728 $s$ \u91cc\u662f\u5426\u5168\u90fd**\u51fa\u73b0\u8fc7**\uff0c\u4e00\u6837\u5f00\u6876\u7edf\u8ba1\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5224\u65ad\u5176\u5728 $s$ \u4e2d\u7684\u6570\u91cf\u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u5728 $t$ \u4e2d\u7684\u6570\u91cf\u3002\n\n- \u65e0\u89e3\uff1a\u6700\u7b80\u5355\uff0c\u4ee5\u4e0a\u4e09\u79cd\u60c5\u51b5\u90fd\u672a\u6210\u529f\u3002\n\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstring s,t;\nint cnt1[205],cnt2[205];\nbool check1()//\u68c0\u67e5\u662f\u5426\u4e3a\u5b50\u5e8f\u5217\n{\n\tint pos=0;\n\tfor(int i=0;i<t.size();i++)\n\t{\n\t\tif((pos=s.find(t[i],pos))==-1) return 0;\n\t\tpos++;\n\t}\n\treturn 1;\n}\nbool check2()//\u68c0\u67e5\u4e0d\u8003\u8651\u4f4d\u7f6e\uff0c\u5b57\u6bcd\u662f\u5426\u5b8c\u5168\u76f8\u540c\n{\n\tfor(int i=1;i<=200;i++)\n\t\tif(cnt1[i]!=cnt2[i]) return 0;\n\treturn 1;\n}\nbool check3()//\u68c0\u67e5\u662f\u5426\u5168\u90e8\u5305\u542b\n{\n\tfor(int i=1;i<=200;i++)\n\t\tif(cnt1[i]<cnt2[i]) return 0;\n\treturn 1;\n}\nint main()\n{\n\tios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n\tcin>>s>>t;\n    //\u8ba1\u6570\n\tfor(int i=0;i<s.size();i++)\n\t\tcnt1[s[i]]++;\n\tfor(int i=0;i<t.size();i++)\n\t\tcnt2[t[i]]++;\n\tif(check1()) cout<<\"automaton\";\n\telse if(check2()) cout<<\"array\";\n\telse if(check3()) cout<<\"both\";\n\telse cout<<\"need tree\";\n\treturn 0;\n}",
        "postTime": 1676019797,
        "uid": 742121,
        "name": "HadrianZhang",
        "ccfLevel": 4,
        "title": "CF448B\tSuffix Structures \u9898\u89e3"
    },
    {
        "content": "## \u5206\u6790\n\n\u7ea6\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5206\u522b\u4e3a $a,b$\u3002\n\n\u4e0d\u59a8\u5148\u8003\u5bdf\u4e00\u4e0b\u53ea\u9700\u8981\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u4e00\u7684\u5b57\u7b26\u4e32\u7684\u7279\u5f81\uff1a\n\n- \u53ef\u4ee5\u53d1\u73b0\u53ea\u9700\u8981 `automaton` \u7684\u65f6\u5019\u5176\u5b9e\u662f $b$ \u4e3a $a$ \u7684\u5b50\u5e8f\u5217\uff0c\u8fd9\u4e2a\u7528\u53cc\u6307\u9488\u626b\u4e00\u4e0b\u5c31\u884c\u3002\n\n- \u7136\u540e\u53ea\u9700\u8981 `array` \u7684\u65f6\u5019\u4e8c\u8005\u4e00\u5b9a\u7b49\u957f\uff0c\u800c\u4e14\u5b57\u7b26\u96c6\u548c\u5bf9\u5e94\u7684\u4e2a\u6570\u7684\u76f8\u7b49\u3002\n\n\u63a5\u4e0b\u6765\u770b\u770b\u662f\u5426\u4e3a `both`\uff0c\u5176\u5b9e\u5c31\u662f\u5224\u65ad\u4e00\u4e0b\u5bf9\u4e8e\u6bcf\u79cd\u5b57\u7b26\u662f\u5426 $a$ \u4e32\u7684\u4e2a\u6570\u90fd**\u5927\u4e8e\u7b49\u4e8e** $b$ \u4e32\u7684\u3002\n\n\u5426\u5219\u53ea\u80fd `need tree`\u3002\n\n```cpp\n// Problem: B. Suffix Structures\n// Contest: Codeforces - Codeforces Round #256 (Div. 2)\n// URL: https://codeforces.com/contest/448/problem/B\n// Memory Limit: 256 MB\n// Time Limit: 1000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include<bits/stdc++.h>\nusing namespace std;\n \n#define debug(x) cerr << #x << \": \" << (x) << endl\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define dwn(i,a,b) for(int i=(a);i>=(b);i--)\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n \n#define x first\n#define y second\nusing pii = pair<int, int>;\nusing ll = long long;\n \ninline void read(int &x){\n    int s=0; x=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9') {if(ch=='-')x=-1;ch=getchar();}\n    while(ch>='0' && ch<='9') s=(s<<3)+(s<<1)+ch-'0',ch=getchar();\n    x*=s;\n}\n\nstring a, b;\n\nbool subset(map<char, int> &a, map<char, int> &b){\n\tfor(auto [x, y]: a){\n\t\tif(b[x]<y) return false;\n\t}\n\treturn true;\n}\n\nsigned main(){\n\tcin>>a>>b;\n\tint n=a.size(), m=b.size();\n\tif(m>n){\n\t\tputs(\"need tree\");\n\t\treturn 0;\n\t}\n\tmap<char, int> fir, sec;\n\tfor(auto i: a) fir[i]++;\n\tfor(auto i: b) sec[i]++;\n\tif(n==m){\n\t\tputs(fir==sec? \"array\": \"need tree\");\n\t\treturn 0;\n\t}\n\t\n\tbool ng=false;\n\tint idx=0;\n\tfor(auto i: b){\n\t\twhile(idx<n && a[idx]!=i) idx++;\n\t\tif(idx==n) ng=true;\n\t\telse idx++;\n\t}\n\tif(!ng){\n\t\tputs(\"automaton\");\n\t\treturn 0;\n\t}\n\t\n\tputs(subset(sec, fir)? \"both\": \"need tree\");\n\t\n\treturn 0;\n}\n```",
        "postTime": 1668440428,
        "uid": 138960,
        "name": "Tenshi",
        "ccfLevel": 0,
        "title": "CF448B"
    }
]