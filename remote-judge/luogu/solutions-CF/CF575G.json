[
    {
        "content": "## \u9898\u89e3 CF575G Run for beer\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u5f20$n$\u4e2a\u70b9$m$\u6761\u8fb9\u7684\u65e0\u5411\u56fe\u3002\u8282\u70b9\u6807\u53f7\u4e3a$0\\dots n-1$\u3002\u6bcf\u6761\u8fb9\u8fde\u63a5\u4e24\u4e2a\u8282\u70b9$u_i,v_i$\uff0c\u6709\u4e00\u4e2a\u957f\u5ea6$w_i$\u3002\n\n\u4f60\u4ece$0$\u53f7\u8282\u70b9\u51fa\u53d1\uff0c\u524d\u5f80$n-1$\u53f7\u8282\u70b9\u3002\u521d\u59cb\u65f6\uff0c\u901f\u5ea6\u4e3a$1$\u3002\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u8282\u70b9\uff08\u51fa\u53d1\u70b9\u4e0d\u7b97\uff09\uff0c\u901f\u5ea6\u9664\u4ee5$10$\u3002\n\n\u6c42\u4e00\u6761\u7528\u65f6\u6700\u77ed\u7684\u8def\u5f84\u3002\u7528\u65f6\u76f8\u540c\u65f6\uff0c\u8f93\u51fa\u7ecf\u8fc7\u8fb9\u6570\u6700\u5c11\u7684\u8def\u5f84\u3002\u5982\u679c\u8fd8\u6709\u591a\u6761\u8def\u5f84\uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u6761\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\leq n,m\\leq 10^5$\uff0c$0\\leq w_i\\leq 9$\u3002\n\n### \u672c\u9898\u9898\u89e3\n\n\u4e00\u6761\u8def\u5f84\u7684\u603b\u7528\u65f6\uff0c\u5c31\u662f\u6bcf\u6761\u8fb9\u7684\u7528\u65f6\u4e4b\u548c\u3002\u800c\u4e00\u6761\u8fb9\u7684\u7528\u65f6\uff0c\u7b49\u4e8e\u957f\u5ea6\u9664\u4ee5\u901f\u5ea6\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u901f\u5ea6\u7684\u53d8\u5316\uff0c\u770b\u6210\u6bcf\u8d70\u8fc7\u4e00\u6761\u8fb9\uff0c\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u90fd\u4e58\u4ee5$10$\uff0c\u7136\u540e\u6c42\u4e00\u6761\u8def\u7a0b\u6700\u77ed\u7684\u8def\u5f84\u3002\u53c8\u56e0\u4e3a$0\\leq w_i\\leq9$\uff0c\u6211\u4eec\u6bcf\u6b21\u4e58\u4ee5$10$\uff0c\u518d\u52a0\u8d77\u6765\uff0c\u53ef\u4ee5\u770b\u505a\u5f97\u5230\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\uff01\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u628a\u8def\u5f84\u53cd\u4e00\u4e0b\uff0c\u4ece$n-1$\u51fa\u53d1\u8d70\u5411$0$\uff0c\u5b9a\u4e49\u4e00\u6761\u8def\u5f84\u7684\u957f\u5ea6\u662f**\u7ecf\u8fc7\u7684\u8fb9\u6743\u4f9d\u6b21\u62fc\u63a5\u5f97\u5230\u7684\u5341\u8fdb\u5236\u6570**\uff08\u9760\u8fd1$n-1$\u7684\u662f\u9ad8\u4f4d\uff09\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u8fd9\u6837\u5b9a\u4e49\u4e0b\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u56e0\u4e3a\u628a\u8def\u5f84\u53cd\u8fc7\u6765\u4e86\uff0c\u6240\u4ee5\u4ee5\u4e0b\u79f0\u8d77\u70b9$s=n-1$\uff0c\u7ec8\u70b9$t=0$\u3002\uff08\u522b\u5fd8\u4e86\u6700\u540e\u8f93\u51fa\u7b54\u6848\u65f6\uff0c\u6309\u4ece\u201c\u7ec8\u70b9\u201d\u5230\u201c\u8d77\u70b9\u201d\u7684\u987a\u5e8f\u8f93\u51fa\uff09\u3002\n\n\u8003\u8651\u8fb9\u6743\u53ea\u6709$1\\dots 9$\u7684\u60c5\u51b5\u3002\u6b64\u65f6\u6bd4\u8f83\u4e24\u6761\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u5c31\u662f\u5148\u6bd4\u8fb9\u6570\uff0c\u7136\u540e\u6bd4\u5b57\u5178\u5e8f\u3002\u6211\u4eec\u53ef\u4ee5\u4ece$t$\u51fa\u53d1\uff0c\u505a\u4e00\u904dbfs\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230$t$\u7684\u8ddd\u79bb\uff08\u8fd9\u91cc\u201c\u8ddd\u79bb\u201d\u6307\u7684\u662f**\u6700\u5c11\u8fb9\u6570**\u800c\u4e0d\u662f\u201c\u8def\u5f84\u957f\u5ea6\u201d\uff0c\u8def\u5f84\u957f\u5ea6\u662f\u90a3\u4e2a\u5927\u5341\u8fdb\u5236\u6570\uff0c\u6211\u4eec\u5b58\u4e0d\u4e0b\u7684\uff09\uff0c\u8bb0\u4e3a$d(u,t)$\u3002\n\n\u7136\u540e\u4ece$s$\u51fa\u53d1\uff0c\u6bcf\u6b21\u8d2a\u5fc3\u5730\uff0c\u8d70\u5411$d(u,t)$\u6700\u5c0f\u7684\u524d\u63d0\u4e0b\uff0c\u5165\u8fb9\u8fb9\u6743\u6700\u5c0f\u7684\u8282\u70b9\u3002\u5f53\u7136\uff0c\u8fd9\u6837\u7684\u8282\u70b9\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff1a\u4e5f\u5c31\u662f\u6709\u591a\u4e2a\u8282\u70b9\uff0c\u4e24\u4e2a\u5173\u952e\u5b57\u90fd\u76f8\u7b49\u3002\u628a\u8fd9\u4e9b\u53ef\u80fd\u7684\u201c\u4e0b\u4e00\u4e2a\u8282\u70b9\u201d\uff0c\u5b58\u5728\u4e00\u4e2a$\\texttt{vector}$\u91cc\uff0c\u79f0\u4e3a\u201c\u4e00\u5c42\u201d\u3002\u7136\u540e\u6bcf\u6b21\u4ece\u5f53\u524d\u5c42\u7684\u70b9\uff0c\u4e00\u8d77\u8f6c\u79fb\u5411\u4e0b\u4e00\u5c42\u7684\u70b9\u3002\u4e5f\u5c31\u662f**\u9010\u5c42\u63a8\u51fa\u6700\u4f18\u8def\u5f84**\u3002\u56e0\u4e3a\u6bcf\u5c42$d(u,t)$\u76f8\u7b49\uff0c\u4e14\u5230\u4e0b\u4e00\u5c42\u4e00\u5b9a\u4f1a\u6070\u597d\u51cf\u5c11$1$\uff0c\u6240\u4ee5\u53ea\u4f1a\u7ecf\u8fc7\u4e00\u4e2a\u8282\u70b9\u81f3\u591a\u4e00\u6b21\uff0c\u590d\u6742\u5ea6\u662f$O(n+m)$\u7684\u3002\n\n\u518d\u8003\u8651\u8fb9\u6743\u6709$0$\u7684\u60c5\u51b5\u3002\u8fd9\u5e26\u6765\u7684\u95ee\u9898\u662f\uff1a\u201c\u524d\u5bfc\u96f6\u201d\u4ea7\u751f\u7684\u8fb9\u6570\uff0c\u662f\u4e0d\u5e94\u8be5\u8ba1\u5165\u603b\u8fb9\u6570\u91cc\u6bd4\u8f83\u7684\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981**\u5f3a\u884c\u5ffd\u7565\u524d\u5bfc\u96f6**\u3002\u90a3\u4e48\uff0c\u53ef\u4ee5\u4ece$s$\u51fa\u53d1\uff0c\u53ea\u8d70\u8fb9\u6743\u4e3a$0$\u7684\u8fb9\uff0c\u628a\u80fd\u8d70\u5230\u7684\u8fd9\u4e9b\u8282\u70b9\uff0c\u4f5c\u4e3a\u8d77\u70b9\u3002\u7136\u540e\u627e\u51fa\u8d77\u70b9\u91cc\uff0c$d(u,t)$\u6700\u5c0f\u7684\uff08\u4e00\u4e9b\uff09\u70b9\uff0c\u4ee5\u4ed6\u4eec\u4f5c\u4e3a\u201c\u7b2c\u4e00\u5c42\u201d\uff0c\u518d\u9010\u5c42\u63a8\u51fa\u7b54\u6848\u3002\n\n\u4e3a\u4e86\u8f93\u51fa\u8def\u5f84\uff0c\u6211\u4eec\u5728\u9010\u5c42\u9012\u63a8\u65f6\uff0c\u7ed9\u6bcf\u4e2a\u70b9\u8bb0\u4e00\u4e2a$\\text{pre}[u]$\uff0c\u8868\u793a\u5b83\u662f\u4ece\u54ea\u91cc\u8d70\u8fc7\u6765\u7684\uff0c\u5373\u53ef\u3002\n\n\u6b64\u65f6\u8fd8\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff0c\u5c31\u662f\u9898\u76ee\u8981\u6c42\uff0c\u7528\u65f6\uff08\u4e5f\u5c31\u662f\u6211\u4eec\u65b0\u5b9a\u4e49\u7684\u201c\u8def\u5f84\u957f\u5ea6\u201d\uff09\u76f8\u540c\u7684\u8bdd\uff0c\u8981\u8f93\u51fa\u8fb9\u6570\u6700\u5c11\u7684\u8def\u5f84\u3002\u8fd9\u91cc\u7684\u201c\u8fb9\u6570\u201d\uff0c\u5c31\u53c8**\u4e0d\u80fd\u5ffd\u7565**\u957f\u5ea6\u4e3a$0$\u7684\u8fb9\u4e86\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\uff0c\u6211\u4eec\u518d\u9884\u5904\u7406\u4e00\u4e2a\u201c\u8d77\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\u201d\uff1a$d(s,u)$\u3002\u5728\u9010\u5c42\u63a8\u7b54\u6848\u65f6\uff0c\u5982\u679c\u4e0b\u4e00\u5c42\u7684\u4e00\u4e2a\u70b9$v$\uff0c\u80fd\u88ab\u672c\u5c42\u7684\u591a\u4e2a\u70b9$u_1,u_2,\\dots ,u_k$\u8f6c\u79fb\u5230\uff0c\u5219\u9009\u62e9$d(s,u)$\u6700\u5c0f\u7684\u70b9\uff0c\u4f5c\u4e3a$\\text{pre}[v]$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n+m)$\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n//problem:\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define pb push_back\n#define mk make_pair\n#define lob lower_bound\n#define upb upper_bound\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\n\ntemplate<typename T>inline void ckmax(T& x,T y){x=(y>x?y:x);}\ntemplate<typename T>inline void ckmin(T& x,T y){x=(y<x?y:x);}\n\nconst int MAXN = 1e5;\nconst int INF = 1e9;\n\nint n,m;\n\nstruct EDGE { int nxt,to,w; } edge[MAXN*2+5];\nint head[MAXN+5],tot;\ninline void add_edge(int u,int v,int w){ edge[++tot].nxt=head[u]; edge[tot].to=v; edge[tot].w=w; head[u]=tot; }\n\nint dis_s[MAXN+5],dis_t[MAXN+5],pre[MAXN+5];\nvoid solve(int s,int t) {\n\tfor(int i=1; i<=n; ++i) {\n\t\tdis_t[i] = INF;\n\t\tdis_s[i] = INF;\n\t}\n\tdis_t[t]=0;\n\tqueue<int>q;\n\tq.push(t);\n\twhile(!q.empty()) {\n\t\tint u = q.front(); q.pop();\n\t\tfor(int i=head[u]; i; i=edge[i].nxt) {\n\t\t\tint v = edge[i].to;\n\t\t\tif(dis_t[v] > dis_t[u]+1) {\n\t\t\t\tdis_t[v] = dis_t[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tdis_s[s] = 0;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tint u = q.front(); q.pop();\n\t\tfor(int i=head[u]; i; i=edge[i].nxt) {\n\t\t\tint v = edge[i].to;\n\t\t\tif(dis_s[v] > dis_s[u]+1) {\n\t\t\t\tdis_s[v] = dis_s[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tq.push(s); pre[s]=n+1;\n\twhile(!q.empty()) {\n\t\tint u = q.front(); q.pop();\n\t\tfor(int i=head[u]; i; i=edge[i].nxt) {\n\t\t\tif(edge[i].w) continue;\n\t\t\tint v = edge[i].to;\n\t\t\tif(!pre[v]) {\n\t\t\t\tpre[v] = u;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tif(pre[t]) {\n\t\tcout << 0 << endl;\n\t\tint u = t;\n\t\tvector<int>ans;\n\t\twhile(1) {\n\t\t\tans.pb(u);\n\t\t\tif(u == s)\n\t\t\t\tbreak;\n\t\t\tu = pre[u];\n\t\t}\n\t\tcout << SZ(ans) << endl;\n\t\tfor(int i=0; i<SZ(ans); ++i)\n\t\t\tcout << ans[i]-1 << \" \";\n\t\tcout << endl;\n\t\treturn;\n\t}\n\tint start_dis = INF;\n\tfor(int i=1;i<=n;++i)\n\t\tif(pre[i]){\n\t\t\tckmin(start_dis,dis_t[i]);\n\t\t}\n\tvector<int>vec;\n\tfor(int i=1;i<=n;++i)\n\t\tif(pre[i] && dis_t[i] == start_dis){\n\t\t\tvec.push_back(i);\n\t\t}\n\t//for(int i=1;i<=n;++i)\n\t//\tcout<<dis_t[i]<<\" \";\n\t//cout<<endl;\n\tvector<int>path;\n\twhile(1){\n\t\t//cout<<\"****\"<<endl;\n\t\t//for(int i=0;i<SZ(vec);++i)\n\t\t//\tcout<<vec[i]<<\" \";\n\t\t//cout<<endl;\n\t\tpii cur_best=mk(INF,INF);\n\t\tfor(int i=0;i<SZ(vec);++i){\n\t\t\tint u=vec[i];\n\t\t\tfor(int j=head[u];j;j=edge[j].nxt){\n\t\t\t\tint v=edge[j].to;\n\t\t\t\tif(dis_t[v] > dis_t[u]) continue;\n\t\t\t\tif(pre[v] && dis_s[pre[v]]<dis_s[u])\n\t\t\t\t\tcontinue;\n\t\t\t\tckmin(cur_best,mk(dis_t[v],edge[j].w));\n\t\t\t}\n\t\t}\n\t\tassert(cur_best.fi!=INF);\n\t\tpath.push_back(cur_best.se);\n\t\tvector<int>nxt_vec;\n\t\tfor(int i=0;i<SZ(vec);++i){\n\t\t\tint u=vec[i];\n\t\t\tfor(int j=head[u];j;j=edge[j].nxt){\n\t\t\t\tint v=edge[j].to;\n\t\t\t\tif(dis_t[v] > dis_t[u]) continue;\n\t\t\t\tif(pre[v] && dis_s[pre[v]]<dis_s[u])\n\t\t\t\t\tcontinue;\n\t\t\t\tif(dis_t[v]==cur_best.fi && edge[j].w==cur_best.se){\n\t\t\t\t\tnxt_vec.push_back(v);\n\t\t\t\t\tpre[v] = u;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<SZ(nxt_vec);++i){\n\t\t\tint u=nxt_vec[i];\n\t\t\tif(u == t){\n\t\t\t\tfor(int j=0;j<SZ(path);++j)\n\t\t\t\t\tcout<<path[j];\n\t\t\t\tcout<<endl;\n\t\t\t\tvector<int>ans;\n\t\t\t\twhile(1){\n\t\t\t\t\tans.pb(u);\n\t\t\t\t\tif(u==s) break;\n\t\t\t\t\tu=pre[u];\n\t\t\t\t}\n\t\t\t\tcout<<SZ(ans)<<endl;\n\t\t\t\tfor(int j=0;j<SZ(ans);++j)\n\t\t\t\t\tcout<<ans[j]-1<<\" \";\n\t\t\t\tcout<<endl;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tvec=nxt_vec;\n\t}\n}\nint main() {\n\tcin>>n>>m;\n\tfor(int i=1; i<=m; ++i) {\n\t\tint u,v,w; cin>>u>>v>>w; ++u; ++v;\n\t\tadd_edge(u,v,w); add_edge(v,u,w);\n\t}\n\tint s=n,t=1;\n\tsolve(s,t);\n\treturn 0;\n}\n```\n\n\n\n\n\n",
        "postTime": 1595750058,
        "uid": 100674,
        "name": "duyi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF575G \u3010Run for beer\u3011"
    },
    {
        "content": "\u5934\u4e00\u56de\u505a\u51fa\u8fd9\u6837\u7684\u9898\u76ee\uff0c~~(\u867d\u7136\u6709\u4e00\u90e8\u5206\u8fd8\u662f\u770b\u6570\u636e\u624d\u80fd\u8c03\u51fa\u6765)~~\n\n\n\u9898\u610f\u8bb2\u5f97\u7a0d\u5fae\u6709\u70b9\u504f\u5dee\uff0c\u8fd9\u91cc\u91cd\u65b0\u63cf\u8ff0\u4e00\u4e0b\uff0c\u9898\u610f\u5c31\u662f\u7ed9\u4f60\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u7136\u540e\u56fe\u4e0a\u6c42\u4e00\u6761\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u662f\u4ece $1$ \u5230 $n$\uff0c\u7136\u540e\u9700\u8981\u6ee1\u8db3\u8fd9\u6761\u8def\u5f84\u8fb9\u6743\u4ece\u53f3\u5230\u5de6\u62fc\u51fa\u6765\u7684\u5341\u8fdb\u5236\u6570\u6700\u5c0f\uff0c\u524d\u5bfc\u96f6\u5ffd\u7565\u3002\n\n\u770b\u5230\u8fd9\u79cd\u9898\u76ee\uff0c\u6211\u4eec\u5c31\u8981\u60f3\u5230\u5982\u4f55\u53bb\u6bd4\u8f83\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\uff0c\u663e\u7136\u6211\u4eec\u5148\u662f\u6bd4\u8f83\u4e24\u4e2a\u6570\u7684\u4f4d\u6570\uff0c\u7136\u540e\u518d\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u6709\u4e00\u4f4d\u51fa\u73b0\u504f\u5dee\uff0c\u90a3\u4e48\u5c31\u662f\u53ef\u4ee5\u5224\u65ad\u5927\u5c0f\u3002\n\n\u8fd9\u9053\u9898\u76ee\u4e5f\u662f\u540c\u7406\uff0c\u53d1\u73b0\u8fb9\u6743\u53ea\u6709 $[0,9]$ \u90a3\u610f\u5473\u7740\u6211\u4eec\u6bcf\u8d70\u4e00\u6761\u8def\u5c31\u4f1a\u591a\u4e00\u4e2a\u6570\uff0c**\u524d\u5bfc\u96f6\u5728\u8fd9\u91cc\u5148\u5ffd\u7565**\u3002\n\n\u7136\u540e\u6211\u4eec\u60f3\u8ba9\u5b83\u4f4d\u6570\u5c3d\u53ef\u80fd\u5c0f\uff0c\u90a3\u4e48\u80af\u5b9a\u662f\u8d70\u5c06\u8fb9\u6743\u89c6\u4e3a $1$ \u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u5f53\u7136\uff0c\u8fd9\u6837\u7684\u6700\u77ed\u8def\u5f84\u53ef\u4e0d\u6b62\u4e00\u6761\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u628a\u8fd9\u4e9b\u6700\u77ed\u8def\u5f84\u90fd\u62ff\u51fa\u6765\u3002\n\n\u62ff\u51fa\u6765\u4e4b\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a DAG\uff0c\u7136\u540e\u6211\u4eec\u8fd9\u65f6\u5019\u4ece $n$ \u5f00\u59cb\u8dd1\uff0c\u6bcf\u6b21\u8d70\u5c3d\u53ef\u80fd\u5c0f\u8fb9\u6743\u7684\u8def\u3002\n\n\u8fd9\u6837\u5b50\u7684\u8bdd\uff0c\u6bcf\u6b21\u53ef\u4ee5\u62ff\u51fa\u540c\u4e00\u4f4d\u7684\u5019\u9009\u70b9\uff0c\u7136\u540e\u6269\u5c55\u4e0b\u4e00\u6279\u5019\u9009\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6bcf\u6761\u8fb9\u53ea\u4f1a\u88ab\u6269\u5c55\u4e00\u6b21\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n+m)$\u3002\n\n\u4f46\u662f\u4f46\u662f\uff0c\u6211\u4eec\u8fd9\u91cc\u53d1\u73b0\u4e00\u4e2a\u7279\u522b\u7279\u522b\u68d8\u624b\u7684\u95ee\u9898\uff0c\u5c31\u662f\u524d\u5bfc\u96f6\uff0c\u5728\u8fd9\u91cc\uff0c\u524d\u5bfc\u96f6\u4e0d\u4f1a\u88ab\u7b97\u8fdb\u4f4d\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u8981\u4ece $1$ \u5f00\u59cb\u8dd1\uff0c\u8dd1\u5168\u90fd\u662f $0$ \u8fb9\u6743\u7684\u8fb9\uff0c\u8fd9\u6837\u624d\u80fd\u907f\u514d\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u6837\u5904\u7406\u8d77\u6765\u5c31\u975e\u5e38\u7684\u9ebb\u70e6\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e24\u4e2a\u6570\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u8d70\u7684\u70b9\u8981\u5c3d\u53ef\u80fd\u5c11\u3002\n\n\u5982\u679c\u4f60 Wrong Answer on test 2\uff0c\u90a3\u4e48\u8bf7\u5c1d\u8bd5\u8fd9\u7ec4\u6570\u636e\uff1a\n\n```\n7 7\n0 1 3\n1 2 4\n2 3 0\n3 4 9\n4 5 8\n5 6 0\n3 3 1 \n\n```\n\n```\n89043\n7\n0 1 2 3 4 5 6\n```\n\n\u5982\u679c\u4f60 Wrong Answer on test 9\uff0c\u8bf7\u5c1d\u8bd5\u8fd9\u7ec4\u6570\u636e\uff1a\n\n```\n5 5\n0 4 9\n0 1 0\n1 2 0\n2 3 0\n3 4 0\n```\n\n```\n0\n5\n0 1 2 3 4\n```\n\n```cpp\nconst int INF=3e5+5;\nstruct _node_edge{\n\tint to_,next_,disv_;\n}edge[INF<<1];\nint head[INF],tot;\nvoid add_edge(int x,int y,int z) {\n\tedge[++tot]=(_node_edge){y,head[x],z};\n\thead[x]=tot;return ;\n}\nint n,m,vis[INF],dis_[INF],aa[INF],pre[INF],ll[INF];\nqueue <int> q;\nvoid BFS(int s) {\n\tmemset(dis_,63,sizeof dis_);\n\tq.push(s);dis_[s]=0;\n\twhile (q.size()) {\n\t\tint x=q.front();q.pop();\n\t\tvis[x]=0;\n\t\tfor (int i=head[x];i;i=edge[i].next_) {\n\t\t\tint v=edge[i].to_;\n\t\t\tif (dis_[v]>dis_[x]+1) {\n\t\t\t\tdis_[v]=dis_[x]+1;\n\t\t\t\tif (!vis[v]) \n\t\t\t\t\tq.push(v),vis[v]=1;\n\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}\nvoid print(int x) {\n\tif (x==0) return ;\n\tcout<<x-1<<\" \";\n\tprint(pre[x]);\n}\nqueue <int> q1;\nvoid SPFA(int s) {\n\tmemset(vis,0,sizeof vis);\n\tint T=55;\n\tq1.push(s);\n\twhile (q1.size()) {\n\t\tint x=q1.front();q1.pop();q.push(x);vis[x]=1;\n\t\tfor (int i=head[x];i;i=edge[i].next_) {\n\t\t\tint v=edge[i].to_,d=edge[i].disv_;\n\t\t\tif (d || vis[v]) continue;\n//\t\t\tcout<<v<<\" \"<<x<<\" aweirjiwejr\\n\";\n\t\t\tif (!vis[v]) q1.push(v),vis[v]=1,ll[v]=ll[x]+1;pre[v]=x;\n\t\t}\n\t}\n\tif (vis[1]) aa[++aa[0]]=0;\n\twhile (q.size() && !vis[1]) {\n\t\tint x=q.front();int Min=1e9,Minv=9,Mind=1e9;\n//\t\tcout<<x<<\" ???\\n\"; \n\t\tif (x==1) break;\n\t\tvector <int> v;\n\t\twhile (q.size()) {\n\t\t\tint x=q.front();q.pop();\n\t\t\tfor (int i=head[x];i;i=edge[i].next_) {\n\t\t\t\tint v=edge[i].to_,d=edge[i].disv_;\n//\t\t\t\tcout<<v<<\" \"<<x<<\" \"<<vis[v]<<\" sdfwer?\\n\";\n\t\t\t\tif (vis[v]) continue;\n\t\t\t\tif (Min>dis_[v]) Min=dis_[v],Minv=d,Mind=ll[x];\n\t\t\t\telse if (Min==dis_[v] && Minv>d) Minv=d,Mind=ll[x];\n\t\t\t\telse if (Min==dis_[v] && Minv==d && Mind>ll[x]) Mind=ll[x];\n\t\t\t}\n\t\t\tv.push_back(x);\n\t\t}\n\t\taa[++aa[0]]=Minv;\n\t\tfor (int x:v) {\n\t\t\tfor (int i=head[x];i;i=edge[i].next_) {\n\t\t\t\tint v=edge[i].to_,d=edge[i].disv_;\n\t\t\t\tif (vis[v]) continue;\n//\t\t\t\tcout<<v<<\" aeoiiajefioj\\n\";\n//\t\t\t\tif (d==0 && x==s) continue;\n\t\t\t\tif (Min==dis_[v] && Minv==d && Mind==ll[x]) \n\t\t\t\t\tll[v]=ll[x],q.push(v),pre[v]=x;\n\t\t\t}\n\t\t}\n\t}\n\tint la=0;\n\twhile (aa[la+1]==0 && la+1<aa[0]) la++;\n\tfor (int i=la+1;i<=aa[0];i++) cout<<aa[i];\n\tcout<<\"\\n\";\n\tif (vis[1]) ll[1]--;\n\tcout<<aa[0]+1+ll[1]<<\"\\n\";\n\tprint(1);\n//\tfor (int i=aa[0];i;i--) cout<<aa[i];\n\treturn ;\n}\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>n>>m;\n\tfor (int i=1;i<=m;i++) {\n\t\tint x=0,y=0,z=0;cin>>x>>y>>z;\n\t\tx++;y++;add_edge(x,y,z);add_edge(y,x,z);\n\t}\n\tBFS(1);\n\tSPFA(n);\n\treturn 0;\n}\n```\n",
        "postTime": 1658837463,
        "uid": 208653,
        "name": "_edge_",
        "ccfLevel": 0,
        "title": "CF575G"
    },
    {
        "content": "\u8fd9\u9053\u9898\u96be\u5ea6\u4e0d\u5927\uff0c\u53ea\u8981\u7406\u89e3\u4e86\u9898\u610f\u5c31\u53ef\u4ee5\u76f4\u63a5 BFS \u89e3\u51b3\u3002\u4e0d\u8fc7\u6709\u5f88\u591a\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff1a\n\n1. \u6ce8\u610f\u524d\u5bfc\u96f6\u7684\u5904\u7406\uff0c\u53ef\u4ee5\u4ece\u7ec8\u70b9\u518d BFS \u4e00\u904d\uff0c\u770b\u53ea\u8d70\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u80fd\u5230\u54ea\u4e9b\u70b9\uff1b\n2. \u65f6\u95f4\u76f8\u540c\u65f6\u8981\u53d6\u8fb9\u6570\u6700\u5c11\u7684\uff0c\u53ef\u4ee5\u8bb0\u5f55\u65b9\u6848\u65f6\u5224\u65ad\u4e00\u4e0b\uff1b\n3. \u9898\u76ee\u7ed9\u7684\u7f16\u53f7\u4ece $0$ \u5f00\u59cb\u3002\n\n\u8fd9\u91cc\u653e\u4e0a\u6bd4\u8f83\u6df7\u4e71\u7684\u4ee3\u7801\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002\n\n```cpp\nconst int N=100010;\nint n,m;\nstruct Edge {\n  int to,nxt,w;\n}e[N<<1];\nint hd[N],cn;\nil void ade(int u,int v,int w){\n  e[++cn].to=v,e[cn].w=w,e[cn].nxt=hd[u],hd[u]=cn;\n}\nint dis[N],mn[N],frm[N],lst[N],dn[N];bool vis[N];\nint main(){\n  Read(n),Read(m);\n  for(int i=1,u,v,w;i<=m;i++){\n    Read(u),Read(v),Read(w),u++,v++;\n    ade(u,v,w),ade(v,u,w);\n  }\n  queue<int> q;memset(dis,0x3f,sizeof dis);\n  q.push(1),dis[1]=0,vis[1]=1;\n  while(!q.empty()){\n    int u=q.front();q.pop();\n    for(int i=hd[u];i;i=e[i].nxt){\n      int v=e[i].to;\n      if(!vis[v])dis[v]=dis[u]+1,q.push(v),vis[v]=1;\n    }\n  }\n  memset(vis,0,sizeof vis);\n  memset(dn,0x3f,sizeof dn);\n  q.push(n),vis[n]=1,dn[n]=0;vector<int> zr;\n  while(!q.empty()){\n    int u=q.front();q.pop();\n    for(int i=hd[u];i;i=e[i].nxt){\n      if(e[i].w)continue;\n      int v=e[i].to;\n      if(!vis[v]){\n        dn[v]=dn[u]+1;\n        vis[v]=1,q.push(v),lst[v]=u,zr.pub(v);\n      }\n    }\n  }\n  zr.pub(n);\n  int res=dis[n];set<int> p;\n  for(int i:zr){//\u8981\u4fdd\u8bc1\u6743\u503c\u6700\u5c0f\n    if(dis[i]<res)res=dis[i],p.clear();\n    if(dis[i]==res)p.insert(i);\n  }\n  set<int> tmp;\n  for(int o=1;o<=res;o++){\n    int mn=INF;\n    for(int u:p){\n      for(int i=hd[u];i;i=e[i].nxt){\n        int v=e[i].to;\n        if(dis[v]+1!=dis[u])continue;\n        if(e[i].w<mn)mn=e[i].w,tmp.clear();\n        if(e[i].w==mn){\n          if(tmp.find(v)!=tmp.end()){//\u8981\u4fdd\u8bc1\u8fb9\u6570\u6700\u5c11\n            if(dn[v]>dn[u]+1)dn[v]=dn[u]+1,frm[v]=u;\n          }else {\n            tmp.insert(v),dn[v]=dn[u]+1,frm[v]=u;\n          }\n        }\n      }\n    }\n    putchar(mn+48);\n    swap(p,tmp),tmp.clear();\n  }\n  if(!res)putchar(48);\n  puts(\"\");vector<int> st;int u,cnt;\n  //\u5206\u522b\u52a0\u5165\u975e\u96f6\u6bb5\u548c\u524d\u5bfc\u96f6\n  for(u=1,cnt=1;cnt<=res;cnt++,u=frm[u])st.pub(u);\n  for(;u!=n;u=lst[u])st.pub(u);st.pub(n);\n  printf(\"%d\\n\",(int)st.size());\n  for(int i:st)printf(\"%d \",i-1);\n  KafuuChino HotoKokoa\n}\n```",
        "postTime": 1644206737,
        "uid": 220524,
        "name": "_ajthreac_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF575G"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://duanyll.com/2019/10/03/Codeforces-575G.html)\n\n## \u9898\u610f\n\n$n$\u4e2a\u70b9$m$\u6761\u8fb9\u7684\u5e26\u6743\u56fe, \u6c42$0$\u5230$n-1$\u7684\u6700\u5c0f\u6743\u503c\u4e14\u6700\u5c0f\u957f\u5ea6\u7684\u8def\u5f84, \u6743\u503c\u4e3a\u628a\u8def\u5f84\u7ecf\u8fc7\u7684\u8fb9\u7684\u6743\u4ece\u7ec8\u70b9\u5230\u8d77\u70b9\u5f80\u4f9d\u6b21\u5199\u4e0b\u7ec4\u6210\u7684\u5341\u8fdb\u5236\u6570, $0\\leq w_i\\leq9$.\n\n## \u601d\u8def\n\n\u5148\u628a\u5230\u7ec8\u70b9\u8ddd\u79bb\u4e3a$0$\u7684\u70b9\u9884\u5904\u7406\u51fa\u6765, \u7136\u540e\u4ece\u591a\u8d77\u70b9\u5f00\u59cb\u8dd1\u5b57\u5178\u5e8f\u6700\u5c0f\u6700\u77ed\u8def(\u5206\u5c42BFS).\n\n## \u4ee3\u7801\n\n```cpp\n#include <algorithm>\n#include <cassert>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <fstream>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\ntypedef long long int64;\n\nconst int MAXN = 100010;\nconst int INF = 0x3f3f3f3f;\n\n#include <cctype>\n#include <cstdio>\n\ntemplate <typename T = int>\ninline T read() {\n    T X = 0, w = 0;\n    char ch = 0;\n    while (!isdigit(ch)) {\n        w |= ch == '-';\n        ch = getchar();\n    }\n    while (isdigit(ch)) {\n        X = (X << 3) + (X << 1) + (ch ^ 48);\n        ch = getchar();\n    }\n    return w ? -X : X;\n}\n\ntemplate <typename T>\ninline void write(T x) {\n    if (x < 0) putchar('-'), x = -x;\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + '0');\n}\n\nclass lfs {\n   public:\n    lfs(int N) {\n        memset(head, -1, sizeof head);\n        ecnt = 0;\n        n = N;\n    }\n    void adde(int from, int to, int w) {\n        e[ecnt].to = to;\n        e[ecnt].w = w;\n        e[ecnt].next = head[from];\n        head[from] = ecnt++;\n    }\n    void addde(int a, int b, int w) {\n        adde(a, b, w);\n        adde(b, a, w);\n    }\n\n    void solve() {\n        vector<int> bfs_order;\n        memset(dis, INF, sizeof dis);\n        dis[0] = 0;\n        bfs_order.push_back(0); \n        int cur = 0; // bfs\u961f\u5217\u4e0d\u7528pop, \u7a7a\u95f4\u6362\u65f6\u95f4\n        while (cur < bfs_order.size()) {\n            int u = bfs_order[cur];\n            for (int i = head[u]; i != -1; i = e[i].next) {\n                int v = e[i].to;\n                if (dis[v] == INF) {\n                    dis[v] = dis[u] + 1;\n                    bfs_order.push_back(v);\n                }\n            }\n            cur++;\n        }\n\n        vector<int> end_point;\n        end_point.push_back(n - 1);\n        memset(vis, false, sizeof vis);\n        memset(pre, 0, sizeof pre);\n        vis[n - 1] = true;\n        cur = 0;\n        int mindis = dis[n - 1];\n        while (cur < end_point.size()) {\n            int u = end_point[cur];\n            for (int i = head[u]; i != -1; i = e[i].next) {\n                int v = e[i].to;\n                if (e[i].w == 0 && !vis[v]) {\n                    end_point.push_back(v);\n                    pre[v] = u;  // \u5b9e\u9645\u987a\u5e8f\u662f\u53cd\u7684\n                    vis[v] = true;\n                    mindis = min(mindis, dis[v]);\n                }\n            }\n            cur++;\n        }\n\n        bool leading_zeros = true;  // \u5f53\u524dbfs\u662f\u5426\u8fd8\u5728\u524d\u5bfc\u96f6\u4e2d\n        for (int l = mindis; l > 0; l--) {\n            int now = INF;\n            vector<int> next_point;\n            for (auto& u : end_point) {\n                for (int i = head[u]; i != -1; i = e[i].next) {\n                    int v = e[i].to;\n                    if (dis[v] + 1 == l) {\n                        now = min(now, e[i].w);\n                    }\n                }\n            }\n\n            if (now != 0) leading_zeros = false;\n            if (l == 1 || !leading_zeros) cout << now;\n\n            for (auto& u : end_point) {\n                for (int i = head[u]; i != -1; i = e[i].next) {\n                    int v = e[i].to;\n                    if (dis[v] + 1 == l && e[i].w == now && !vis[v]) {\n                        vis[v] = true;\n                        next_point.push_back(v);\n                        pre[v] = u;\n                    }\n                }\n            }\n            end_point = next_point;\n        }\n        if (leading_zeros) cout << 0; // \u90fd\u662f0\u7684\u60c5\u51b5\n        cout << endl;\n        vector<int> path;\n        int u = 0;\n        path.push_back(u);\n        while (u != n - 1) {\n            u = pre[u];\n            path.push_back(u);\n        }\n        cout << path.size() << endl;\n        for (auto& i : path) {\n            cout << i << ' ';\n        }\n        cout << endl;\n    }\n\n\n   protected:\n    struct Edge {\n        int to, next, w;\n    } e[MAXN * 2];\n    int head[MAXN];\n    int ecnt;\n    int n;\n\n    int dis[MAXN];\n    bool vis[MAXN];\n    int pre[MAXN];\n};\n\nint main() {\n    int n = read();\n    int m = read();\n    auto graph = new lfs(n);\n    for (int i = 1; i <= m; i++) {\n        int u = read();\n        int v = read();\n        int w = read();\n        graph->addde(u, v, w);\n    }\n    graph->solve();\n}\n```",
        "postTime": 1570069939,
        "uid": 48256,
        "name": "duanyll",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF575G \u3010Run for beer\u3011"
    }
]