[
    {
        "content": "## $\\text{Description}$\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a_{1...n}$\uff0c\u5bf9\u5176\u8fdb\u884c $m$ \u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6709\u4e24\u79cd\uff1a  \n1. $1\\space l_i\\space r_i\\space d_i$\uff1a\u5bf9\u4e8e $l_i\\le j\\le r_i$\uff0c$a_j\\gets a_j+d_i.$\n1. $2\\space l_i\\space r_i\\space m_i$\uff1a\u67e5\u8be2 $\\max a_j(l_i\\le j\\le r_i).$  \n\n\u73b0\u5728\u7ed9\u51fa $n,m$ \u548c\u64cd\u4f5c\u4fe1\u606f\uff0c\u8bf7\u4f60\u6784\u9020\u51fa\u4e00\u79cd\u5408\u6cd5\u7684\u5e8f\u5217\u6216\u8005\u62a5\u544a\u65e0\u89e3.\n## $\\text{Solution}$\n\u8bbe\u7b2c $i$ \u4e2a\u5143\u7d20**\u5f53\u524d**\u7684\u589e\u91cf\u4e3a $add_i$\uff0c\u6bcf\u4e2a\u5143\u7d20**\u521d\u59cb**\u7684\u6700\u5927\u503c\u4e3a $mx_i$.  \n\u6bcf\u6b21\u5bf9\u4e8e\u64cd\u4f5c\u4e8c\uff0c$mx_j\\gets \\min(mx_j,m_i-add_j)(l_i\\le j\\le r_i)$.  \n\u8fd9\u6837\uff0c\u628a\u64cd\u4f5c\u626b\u4e00\u904d\u5c31\u80fd\u6c42\u51fa\u6240\u6709\u5143\u7d20\u7684 $mx_i$.  \n\u5f97\u51fa\u6b63\u786e\u7684 $mx_i$ \u540e\uff0c\u6211\u4eec\u518d\u626b\u4e00\u904d\u64cd\u4f5c\u5e8f\u5217\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u64cd\u4f5c\u4e8c\uff0c\u8bbe $w=\\max mx_j(l_i\\le j\\le r_i)$.  \n\u7531\u4e8e\u7b2c\u4e00\u6b21\u7ef4\u62a4\u7684\u539f\u56e0\uff0c\u5fc5\u7136\u6709 $w\\le m_i$.  \n\u82e5 $w< m_i$\uff0c\u8bf4\u660e\u533a\u95f4\u5185\u7684\u6240\u6709\u5143\u7d20\u90fd\u8fbe\u4e0d\u5230 $m_i$\uff0c\u62a5\u544a\u65e0\u89e3.  \n\u5982\u679c\u626b\u5230\u6700\u540e\u8fd8\u6ca1\u6709\u65e0\u89e3\uff0c\u8f93\u51fa $mx_{1...n}$ \u4f5c\u4e3a\u6784\u9020\u7684\u5e8f\u5217. \n## $\\text{Code}$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define debug(...) fprintf(stderr,__VA_ARGS__)\nconst int N=5005;\ninline ll read(){\n  ll x(0),f(1);char c=getchar();\n  while(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n  while(isdigit(c)){x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n  return x*f;\n}\nint n,m;\nint mx[N],add[N];\nstruct query{\n  int op,l,r,x;\n}q[N];\nint main(){\n  #ifndef ONLINE_JUDGE\n  freopen(\"a.in\",\"r\",stdin);\n  freopen(\"a.out\",\"w\",stdout);\n#endif\n  n=read();m=read();\n  memset(mx,0x3f,sizeof(mx));\n  for(int i=1;i<=m;i++){\n    q[i]=(query){(int)read(),(int)read(),(int)read(),(int)read()};\n    if(q[i].op==1){\n      for(int j=q[i].l;j<=q[i].r;j++) add[j]+=q[i].x;\n    }\n    else{\n      for(int j=q[i].l;j<=q[i].r;j++) mx[j]=min(mx[j],q[i].x-add[j]);\n    }\n  }\n  memset(add,0,sizeof(add));\n  for(int i=1;i<=m;i++){\n    if(q[i].op==1){\n      for(int j=q[i].l;j<=q[i].r;j++) add[j]+=q[i].x;\n    }\n    else{\n      int o=-2e9;\n      for(int j=q[i].l;j<=q[i].r;j++) o=max(o,mx[j]+add[j]);\n      if(o!=q[i].x){\n\tprintf(\"NO\\n\");return 0;\n      }\n      //printf(\"i=%d o=%d\\n\",i,o);\n    }\n  }\n  printf(\"YES\\n\");\n  for(int i=1;i<=n;i++) printf(\"%d \",min(mx[i],1000000000));\n  return 0;\n}\n\n```\n",
        "postTime": 1639638035,
        "uid": 449265,
        "name": "wind_whisper",
        "ccfLevel": 10,
        "title": "CF360A Levko and Array Recovery"
    }
]