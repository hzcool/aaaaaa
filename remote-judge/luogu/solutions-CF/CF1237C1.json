[
    {
        "content": "\u9898\u610f\u4e3a\u5220\u9664\u4e24\u4e2a\u4e09\u7ef4\u5750\u6807\u4e0a\u7684\u70b9\uff0c\n\n\u4f7f\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u65e0\u4efb\u4f55\u7ed9\u51fa\u4e86\u7684\u70b9\u3002\n\n\u663e\u7136\u5f53\u4e24\u4e2a\u70b9\u8ddd\u79bb\u6700\u8fd1\u65f6\u4e2d\u95f4\u65e0\u4efb\u4f55\u7ed9\u51fa\u7684\u70b9\uff0c\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5 $n^2$ \u66b4\u529b\u6c42\u51fa\u6240\u6709\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\n\n\u518d\u4ece\u5c0f\u5230\u5927\u627e\u6700\u77ed\u8ddd\u79bb\uff0c\n\n\u5220\u9664\u65f6\u6253\u6807\u8bb0\u4e0d\u518d\u51fa\u73b0\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2\\log_2 (n^2))$.~~\u80fd\u8fc7\u5c31\u884c~~\n\n$Code$:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n;\nlong long x[2010],y[2010],z[2010];\nlong long ans;\nbool flag[2010];\nstruct node\n{\n\tlong long l,r,v;\n}a[4000010];\nlong long cnt;\nbool cmp(node a,node b)\n{\n\treturn a.v<b.v;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld%lld%lld\",&x[i],&y[i],&z[i]);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=i+1;j<=n;j++)\n\t\t{\n\t\t\ta[++cnt].l=i;\n\t\t\ta[cnt].r=j;\n\t\t\ta[cnt].v=(x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j])+(z[i]-z[j])*(z[i]-z[j]);\n\t\t}\n\t}\n\tsort(a+1,a+cnt+1,cmp);\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tif(flag[a[i].l]==0&&flag[a[i].r]==0)\n\t\t{\n\t\t\tprintf(\"%lld %lld\\n\",a[i].l,a[i].r);\n\t\t\tflag[a[i].l]=1;\n\t\t\tflag[a[i].r]=1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1599134056,
        "uid": 116067,
        "name": "Create_Random",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1237C1 \u3010Balanced Removals (Easier)\u3011"
    },
    {
        "content": "\u89e3\u51b3\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\u3002\n\n\u7531\u4e8e\u6b64\u9898\u8303\u56f4\u8f83\u5c0f\uff0c\u6240\u4ee5\u5404\u79cd\u7384\u5b66\u505a\u6cd5\u90fd\u80fd\u6c34\u8fc7QwQ\n\n\u9996\u5148\u5148\u6309x\u4e3a\u7b2c\u4e00\uff0cy\u7b2c\u4e8c\uff0cz\u7b2c\u4e09\u4e3a\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\n\u7136\u540e\u679a\u4e3ei\uff0cj\u5224\u65ad\u662f\u5426\u53ef\u884c\u5373\u53ef\u3002\n\n\u770b\u8d77\u6765\u5f88\u66b4\u529b\uff0c\u4f46\u5b9e\u9645\u4e0a\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u5176\u5b9e\u662f\u53ef\u4ee5\u901a\u8fc7\u7684\u3002\n\n~~\u81f3\u4e8e\u66f4\u96be\u7684\u6570\u636e\u52a0\u5f3a\u7248\u4e0d\u4f1a\uff0c\u770bCF\u522b\u4eba\u4ee3\u7801\u4f3c\u4e4e\u662f\u8d2a\u5fc3\uff1f~~\n\n\u8d34\u8d85\u7ea7\u66b4\u529b\u7684\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n \ninline void read (int& s) {\n\ts = 0; int f = 0;\n\tstatic char c = getchar ();\n\twhile (c < '0' || c > '9') {if (c == '-') f = 1; c = getchar ();}\n\twhile (c >= '0' && c <= '9') s = (s << 3) + (s << 1) + (c ^ 48), c = getchar ();\n\ts = f ? -s : s; return ;\n}\n \nconst int N = 2003;\nint n, vis[N];\nstruct stu {\n\tint x, y, z, id;\n\tinline int operator < (const stu& p) const {\n\t\treturn x == p.x ? y == p.y ? z < p.z : y < p.y : x < p.x;\n\t}\n}s[N];\n \nint fa[N];\n \nint Find (const int p) {return fa[p] == p ? p : fa[p] = Find (fa[p]);}\n \ninline void Union (const int x, const int y) {\n\tfa[Find (x)] = Find (y);\n\treturn ;\n}\n \ninline int pd (const int L, const int R) {\n\tint i, mny = min (s[L].y, s[R].y), mxy = s[L].y + s[R].y - mny;\n\tint mnz = min (s[L].z, s[R].z), mxz = s[L].z + s[R].z - mnz;\n\tfor (i = Find (1); i <= n && s[i].x <= s[R].x; i = Find (i + 1)) {\n\t\tif (i == L || i == R) continue;\n\t\tif (s[i].x >= s[L].x && s[i].x <= s[R].x && s[i].y >= mny && s[i].y <= mxy && s[i].z >= mnz && s[i].z <= mxz) return 0;\n\t}\n\treturn 1;\n}\n \nint main () {\n\tread (n);\n\tint i, j; for (i = 1; i <= n; ++i) {\n\t\tread (s[i].x), read (s[i].y), read (s[i].z);\n\t\ts[i].id = i;\n\t\tfa[i] = i;\n\t} //\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u4fdd\u8bc1\u8bbf\u95ee\u8fc7\u7684\u4e0d\u4f1a\u518d\u88ab\u8bbf\u95ee\n\tfa[n + 1] = n + 1;\n\tsort (s + 1, s + 1 + n);\n\tint num = 0;\n\twhile (num < n) {\n\t\tfor (i = Find (1); i <= n; i = Find (i + 1)) {\n\t\t\tfor (j = Find (i + 1); j <= n; j = Find (j + 1)) {\n\t\t\t\tif (pd (i, j)) {\n\t\t\t\t\tvis[i] = vis[j] = 1;\n\t\t\t\t\tnum += 2;\n\t\t\t\t\tUnion (i, i + 1);\n\t\t\t\t\tUnion (j, j + 1);\n\t\t\t\t\tprintf (\"%d %d\\n\", s[i].id, s[j].id);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} //\u5269\u4e0b\u7684\u53ea\u8981\u4f1a\u66b4\u529b\u5c31\u80fd\u5199QwQ\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1571373216,
        "uid": 31193,
        "name": "\u68a7\u6850\u706f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1237C1 \u3010Balanced Removals (Easier)\u3011"
    }
]