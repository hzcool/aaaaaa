[
    {
        "content": "\u9898\u76ee\u5c31\u662f\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8ba9\u4f60\u6c42\u4e00\u4e2a\u65b0\u7684\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u4f7f\u5176 $0$ \u7684\u4e2a\u6570\u5c3d\u91cf\u591a\u4e14\u539f\u4e32\u4e0e\u65b0\u4e32\u7684**\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7b49\u957f**\u3002\n\n\u9996\u5148\uff0c\u56e0\u4e3a\u8981\u6c42 $0$ \u7684\u4e2a\u6570\u5fc5\u987b\u591a\uff0c\u90a3\u4e48\u5982\u679c\u539f\u5b57\u7b26\u4e32\u5f53\u524d\u4f4d\u7f6e\u662f $0$ \u80af\u5b9a\u4e0d\u80fd\u6539\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6c42\u6700\u957f\u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u957f\uff0c\u53ef\u4ee5\u5012\u5e8f\u5faa\u73af\u65b9\u4fbf\u4e00\u4e9b\uff0c\u5982\u679c $0$ \u7684\u4e2a\u6570\u76ee\u524d\u662f $0$ \u4e2a\u7684\u8bdd\uff0c\u5c06\u6b64\u53d8\u91cf\u518d\u6b21\u51cf\u4e00\uff0c\u8be6\u7ec6\u4ee3\u7801\u8bf7\u770b\u4e0b\u9762\uff1a\n\n\n```python\ns=list(input())\nl=len(s)-1 #\u5b9e\u9645\u5b57\u7b26\u4e32\u6700\u5927\u4e0b\u6807\nz=0\nfor i in range(l,-1,-1): #\u4ece l \u5230-1\u5012\u5e8f\u5faa\u73af\n    if(s[i]=='0'): #\u5982\u679c\u8fd9\u4e2a\u5b57\u7b26\u662f0\n        z=z+1 #\u5c3d\u53ef\u80fd\u591a\u52a00\n    elif z: #\u5982\u679c z \u4e0d\u662f0\n        z-=1 #\u56e0\u4e3a\u8981\u6c42\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c\u5219\u5fc5\u987b-1\n    else:\n        s[i]='0' #\u90fd\u4e0d\u6ee1\u8db3\u5c31\u662f0 \ns=\"\".join(s) \nprint(s)\n```",
        "postTime": 1626530690,
        "uid": 360083,
        "name": "\u521d\u96ea_matt",
        "ccfLevel": 5,
        "title": "CF1204D1 Kirk and a Binary String (easy version) \u9898\u89e3"
    },
    {
        "content": "\u6211\u89c9\u5f97\u6211\u8fd9\u9053\u9898\u7684\u7b97\u6cd5\u53ef\u80fd\u6709\u4e9b\u7384\u5b66\u3002\u3002\u3002\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8ba9\u4f60\u6c42\u4e00\u4e2a\u65b0\u7684\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u4f7f\u5176$0$\u7684\u4e2a\u6570\u5c3d\u91cf\u591a\u4e14\u5bf9\u4e8e\u6bcf\u4e2a$l,r(1\u2264l\u2264r\u2264n)$\uff0c\u539f\u4e32\u4e0e\u65b0\u4e32\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7b49\u957f\u3002\n\n## \u9898\u76ee\u5206\u6790\n\n\u6839\u636e\u9898\u610f\uff0c\u53ef\u77e5\u662f\u5c06\u539f\u4e32\u4e2d\u7684\u4e00\u4e9b\u5b57\u7b26\u4fee\u6539\u3002\u4f46\u662f\uff0c\u4f1a\u6709\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\u51fa\u73b0\uff1a\n\n### $Question 1$ \u4fee\u6539\u54ea\u4e9b\u5b57\u7b26\n\n\u9996\u5148\uff0c$0$\u662f\u4e00\u5b9a\u4e0d\u80fd\u4fee\u6539\u7684\uff0c\u4fee\u6539\u4e4b\u540e\u4e0d\u6ee1\u8db3\u4f7f$0$\u7684\u4e2a\u6570\u6700\u591a\u7684\u6761\u4ef6\u3002\n\n\u90a3\u4e48\u53ea\u6709$1$\u662f\u53ef\u4ee5\u6539\u7684\uff0c\u8fd9\u4e2a\u95ee\u9898\u7b97\u662f\u89e3\u51b3\u4e86\uff0c\u4f46\u53c8\u6709\u4e0b\u9762\u4e24\u4e2a\u95ee\u9898\u51fa\u73b0\u4e86\uff1a\n\n### $Question 2$ \u4fee\u6539\u591a\u5c11$1$\n\n\u6211\u4eec\u5148\u5047\u8bbe\u539f\u5b57\u7b26\u4e32\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a$len$\uff0c\u4e14\u539f\u4e32\u4e2d$0$\u7684\u4e2a\u6570\u4e3a$cnt$\uff0c\u5982\u679c$cnt$\u6070\u597d\u7b49\u4e8e$len$\uff0c\u90a3\u4e48\u8bc1\u660e\u539f\u5b57\u7b26\u4e32\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u5168\u4e3a$0$\u7ec4\u6210\uff0c\u4e0d\u9700\u4fee\u6539\uff0c\u76f4\u63a5\u8f93\u51fa\u539f\u5e8f\u5217\u5373\u53ef\u3002\n\n\u82e5\u662f\u4e0d\u7b49\u4e8e\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u4fee\u6539$len-cnt$\u4e2a$1$\u4e3a$0$\uff0c\u53ea\u6709\u8fd9\u6837\u624d\u80fd\u4f7f0\u7684\u4e2a\u6570\u5c3d\u53ef\u80fd\u591a\u3002\n\n### $Question 3$ \u4fee\u6539\u54ea\u4e9b$1$\n\n\u77e5\u9053\u4fee\u6539\u591a\u5c11\uff0c\u4fee\u6539\u54ea\u4e9b\u5c31\u4e0d\u662f\u5f88\u96be\u4e86\u3002\u9996\u5148\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651$l=1$\u65f6\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u5176\u4ed6$l$\u7684\u503c\u662f\u65e0\u9700\u8003\u8651\u7684\u3002\u6240\u4ee5\u6211\u4eec\u5f97\u6c42\u51fa\u539f\u5b57\u7b26\u4e32\u5bf9\u4e8e$l=1,1\u2264r\u2264n$\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\n\n\u6211\u4eec\u8bbe$f_i$\u4e3a\u7b2c$i$\u4e2a\u4f4d\u7f6e\u4ee5$1$\u7ed3\u5c3e\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c$sum_i$\u4e3a\u524d$i$\u4e3a$0$\u7684\u4e2a\u6570\uff0c\u53ef\u4ee5\u5f97\u51fa\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$\nf_i = \\begin{cases} max(f_{i-1}+1,sum_{i-1}+1)(s_i=1)\\\\f_{i-1}(s_i=0)\\end{cases}\n$$\n\n$$\nsum_i = \\begin{cases} sum_{i-1}+1(s_i=0)\\\\sum_{i-1}(s_i=1)\\end{cases}\n$$\n\n\u7136\u540e\u5f97\u51fa\u8fd9\u4e2a\u5373\u53ef\u5904\u7406\uff0c\u9996\u5148\u5bf9\u4e8e\u7b2c$i$\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679c\u5c06\u5b83\u4ece$1$\u4fee\u6539\u6210$0$\uff0c\u90a3\u4e48\u5fc5\u987b\u6ee1\u8db3$f_i=sum_i+1+c$\uff08$c$\u4e3a\u8fc7\u53bb\u4fee\u6539\u7684\u4e2a\u6570\uff09\u3002\u4e0d\u8fc7\u82e5\u662f\u4f60\u5982\u6b64\u5904\u7406\u7684\u8bdd\uff0c\u53ef\u80fd\u5bf9\u540e\u9762\u6709\u6240\u5f71\u54cd\u3002\u7528\u8fd9\u4e2a\u7b97\u6cd5\u5904\u7406\u51fa\u7684\u5b57\u7b26\u4e32\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u79cd\u53ef\u80fd\uff1a\n\n$0001001100011011101000$\n\n$0000001100111011101000$\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u4e24\u4e2a\u5e8f\u5217\u90fd\u662f\u9519\u8bef\u7684\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u53ef\u53d6\u3002\u82e5\u662f\u8981\u4e0d\u5bf9\u540e\u9762\u6709\u5f71\u54cd\uff0c\u5fc5\u987b\u9006\u5e8f\u5904\u7406\u3002\n\n\u4ee4$now=len-cnt$\uff0c\u5bf9\u4e8e\u7b2c$i$\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679c\u5c06\u5b83\u4ece$1$\u4fee\u6539\u6210$0$\uff0c\u90a3\u4e48\u5fc5\u987b\u6ee1\u8db3$f_i=sum_i+now-c$\uff08$c$\u4e3a\u8fc7\u53bb\u4fee\u6539\u7684\u4e2a\u6570\uff09\u3002\n\n\u7ecf\u8fc7\u5982\u6b64\u5904\u7406\uff0c\u4fbf\u4f1a\u5f97\u51fa\u6b63\u786e\u7b54\u6848\u3002\n\n## \u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <cmath>\n#include <queue>\n#include <string>\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n \nint l, now, dp[100005][2];// dp[i][0] \u5373\u4e3a sum[i]\uff0cdp[i][1] \u5373\u4e3af[i]\nchar c[100005], s[100005];\n \nlong long Read() {\n\tlong long k = 0, tmp = 1; char _c = getchar();\n\twhile (_c > '9' or _c < '0') {\n\t\tif (_c == '-') tmp = -1;\n\t\t_c = getchar();\n\t}\n\twhile (_c <= '9' and _c >= '0') {\n\t\tk = (k << 1) + (k << 3) + (_c ^ 48);\n\t\t_c = getchar();\n\t}\n\treturn k * tmp;\n}\nvoid Work();\n \nint main() {\n\tWork();\n}\n \nvoid Work() {\n\tcin >> c + 1;\n\tl = strlen(c + 1);\n\tfor (int i = 1; i <= l; i++) {\n\t\tdp[i][1] = dp[i - 1][1];\n\t\tdp[i][0] = dp[i - 1][0];\n\t\tif (c[i] == '1') dp[i][1] = max(dp[i - 1][1] + 1, dp[i - 1][0] + 1);\n\t\telse dp[i][0] = dp[i - 1][0] + 1;\n\t}\n\tif (dp[l][0] >= dp[l][1]) {\n\t\tcout << c + 1 << endl;\n\t}\n\telse {\n\t\tnow = dp[l][1] - dp[l][0]; // dp[l][1]\u5373\u4e3acnt\uff0cdp[l][0]\u5373\u4e3asum\n\t\tfor (int i = l; i >= 1; i--) {\n\t\t\tif (c[i] == '0') s[i] = '0';// \u5982\u679c\u662f0\uff0c\u4e0d\u4fee\u6539\n\t\t\telse {\n\t\t\t\tif (dp[i][1] - dp[i][0] == now and now > 0) {// \u5982\u679c\u662f1\u4e14\u6ee1\u8db3\u6761\u4ef6\uff0c\u4fee\u6539\n\t\t\t\t\ts[i] = '0';\n\t\t\t\t\tnow--;\n\t\t\t\t}\n\t\t\t\telse s[i] = '1';// \u5426\u5219\u4e0d\u4fee\u6539\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= l; i++) {\n\t\t\tprintf(\"%c\", s[i]);// \u8f93\u51fa\u7b54\u6848\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n```\n",
        "postTime": 1566376987,
        "uid": 28182,
        "name": "Dr_\u6b87",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1204D1 \u3010Kirk and a Binary String (easy version)\u3011"
    }
]