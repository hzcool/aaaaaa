[
    {
        "content": "## \u53cc\u5411\u94fe\u8868 \u5806\n\n### \u80cc\u666f \n\n\u795e\u7287\u4eec\u90fd\u9053\u662f $\\mathtt{Splay}$ \u6a21\u677f\u9898\uff0c\u53ef\u662f\u5c0f\u840c\u65b0 $\\varnothing$ \u5b9e\u5728\u662f\u592a\u83dc\u4e86\uff0c\u4ed6\u53ea\u4f1a\u4f7f\u7528\u4f18\u5148\u961f\u5217\u3002\n\n## \u601d\u8def\n\n>\u5f88\u660e\u663e\uff0c\u6570\u5217 $a$ \u662f\u7531\u82e5\u5e72\u6bb5\u533a\u95f4\u7ec4\u6210\uff0c\u6bcf\u4e00\u6bb5\u533a\u95f4\u6570\u5b57\u76f8\u540c\uff0c\u4ee5\u4e0b\u5747\u7528\u201c\u989c\u8272\u201d\u8868\u793a\u6bcf\u4e00\u6bb5\u533a\u95f4\u7684\u6570\u5b57\uff08\u5c5e\u6027\uff09\u3002\n\n- \u672c\u9898\u552f\u4e00\u503c\u5f97\u5173\u6ce8\u7684\u5730\u65b9\u662f **\u5220\u9664\u4e00\u4e2a\u533a\u95f4\u540e\uff0c\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4\u5982\u679c\u989c\u8272\u76f8\u540c\uff0c\u5c31\u4f1a\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u533a\u95f4**\u3002\n\n\u5148\u4e0d\u8003\u8651\u5982\u4f55\u5b9e\u73b0\uff0c\u6211\u4eec\u5148\u8003\u8651\u601d\u8def\uff1a\n\n1. \u4ece\u5f53\u524d\u6240\u6709\u533a\u95f4\u4e2d\u627e\u51fa\u957f\u5ea6\u6700\u5927\u7684\uff08\u76f8\u540c\u957f\u5ea6\u627e\u6700\u5de6\u8fb9\u7684\uff09\uff0c\u8bb0\u4e3a\u533a\u95f4 $cur$\uff0c\u5220\u9664\uff0c\u8ba1\u6570\u5668$+1$\uff1b\n\n2. \u5224\u65ad $cur$ \u7684\u5de6\u53f3\u533a\u95f4\u989c\u8272\u662f\u5426\u76f8\u540c\uff0c\u82e5\u76f8\u540c\uff0c\u5c06\u4e24\u4e2a\u5c0f\u533a\u95f4\u7684\u4fe1\u606f\u5220\u9664\uff0c\u63d2\u5165\u5408\u5e76\u540e\u7684\u5927\u533a\u95f4\u7684\u4fe1\u606f\uff1b\n\n3. \u68c0\u67e5\u662f\u5426\u5168\u90e8\u5220\u9664\u5b8c\u4e86\uff0c\u6ca1\u5220\u5b8c\u5219\u91cd\u590d\u6b65\u9aa41\uff0c\u5426\u5219\u7ed3\u675f\u3002\n\n\u4e0d\u8003\u8651\u6b65\u9aa42\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u663e\u7136\u53ef\u4ee5\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\uff0c\u6b65\u9aa41\u5373\u53d6\u51fa\u5806\u9876\uff0c\u6b65\u9aa43\u68c0\u67e5\u5806\u662f\u5426\u4e3a\u7a7a\u3002\n\n- \u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5982\u4f55\u5b9e\u73b0\u6b65\u9aa42.\n\n\u76f4\u63a5\u4ece\u5806\u4e2d\u627e\u51fa\u5de6\u53f3\u4e24\u4e2a\u5143\u7d20\u662f\u5341\u5206\u9ebb\u70e6\u7684\uff0c\u5220\u9664\u66f4\u662f\u6ca1\u6cd5\u505a\u3002\n\n\u5220\u9664\u533a\u95f4 $cur$\uff0c\u67e5\u627e\u533a\u95f4 $cur$ \u5f53\u524d\u7684\u5de6\u53f3\u533a\u95f4\uff0c\u663e\u7136\u53ef\u4ee5\u7528\u53cc\u5411\u94fe\u8868\u7ef4\u62a4\u3002\n\n\u5bf9\u4e8e\u5220\u9664\u5806\u4e2d\u7684\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 $vis$ \u6807\u8bb0\u8fd9\u4e2a\u5143\u7d20\u5728\u5806\u4e2d\u5df2\u7ecf\u88ab\u5220\u9664\u4e86\uff0c\u82e5\u5806\u9876\u5143\u7d20\u88ab\u6807\u8bb0\u8fc7\uff0c\u76f4\u63a5```continue```\u6389\u5373\u53ef\u3002\n\n- \u68b3\u7406\u4e00\u4e0b\u601d\u8def\uff0c\n\n**\u7ef4\u62a4\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u94fe\u8868\u4e2d\u6bcf\u4e2a\u8282\u70b9\u50a8\u5b58\u3010\u8be5\u533a\u95f4\u662f\u521d\u59cb\u60c5\u51b5\u4e2d\u4ece\u5de6\u5f80\u53f3\u7b2c $i$ \u4e2a\u533a\u95f4\u3011\uff0c$pre[i]$ \u8868\u793a $i$ \u5de6\u8fb9\u7684\u533a\u95f4\u7f16\u53f7\uff0c$nxt[i]$ \u8868\u793a $i$ \u53f3\u8fb9\u7684\u533a\u95f4\u7f16\u53f7**\u3002\n\n**\u7ef4\u62a4\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u5806\u4e2d\u6bcf\u8282\u70b9\u50a8\u5b58\u3010\u533a\u95f4\u957f\u5ea6\uff0c\u533a\u95f4\u7f16\u53f7\u3011\uff0c\u5148\u6309\u7167\u7b2c\u4e00\u7ef4\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7b2c\u4e00\u7ef4\u76f8\u540c\u65f6\u7b2c\u4e8c\u7ef4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff08\u5de6\u8fb9\u4f18\u5148\uff09\u3002**\n\n1. **\u8bbe\u5f53\u524d\u5806\u9876\u533a\u95f4\u7684\u7f16\u53f7\u662f $cur$\uff0c\u6211\u4eec\u9700\u8981\u5728\u94fe\u8868\u4e2d\u5220\u9664 $cur$\uff0c\u5e76\u6807\u8bb0 $vis$\uff1b**\n\n2. **\u82e5 $pre[cur]$ \u4e0e $nxt[cur]$ \u989c\u8272\u76f8\u540c\uff0c\u5219\u6807\u8bb0 $vis$ \u8868\u793a\u5220\u9664\u4e86\u53f3\u533a\u95f4\uff0c\u5c06\u3010\u5de6\u53f3\u533a\u95f4\u957f\u5ea6\u4e4b\u548c\uff0c\u5de6\u533a\u95f4\u7f16\u53f7\u3011\u52a0\u5165\u4f18\u5148\u961f\u5217\u4e2d\uff1b**\n\n>\u52a0\u5165\u540e\uff0c\u5806\u4e2d\u4f1a\u6709\u4e24\u4e2a\u8282\u70b9\u7f16\u53f7\u90fd\u4e3a\u5de6\u533a\u95f4\u7f16\u53f7\uff0c\u4e0d\u8fc7\u4e0d\u8981\u7d27\uff0c\u56e0\u4e3a\u65b0\u52a0\u5165\u90a3\u4e2a\u533a\u95f4\u957f\u5ea6\u66f4\u5927\uff0c\u4f1a\u88ab\u66f4\u65e9\u53d6\u51fa\uff0c\u53d6\u51fa\u65f6\u6807\u8bb0 $vis$\u3002\n\n3. \u8ba1\u6570\u5668$+1$\uff0c\u8fd9\u56de\u5408\u5220\u9664\u4e86\u4e00\u4e2a\u533a\u95f4\u3002\n\n### \u4ee3\u7801\n\n\u5b9e\u73b0\u65f6\uff0c\u7531\u4e8e\u5148\u6309\u7b2c\u4e00\u7ef4\u5347\u5e8f\uff0c\u518d\u6309\u7b2c\u4e8c\u7ef4\u964d\u5e8f\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u4e0d\u59a8\u76f4\u63a5\u5c06\u6570\u5217 $a$ \u7ffb\u8f6c\u8fc7\u6765\uff08\u5012\u5e8f\u8f93\u5165\uff09\uff0c\u8fd9\u6837\u4e24\u7ef4\u90fd\u662f\u5347\u5e8f\u4e86\u3002\n\n\n```cpp\n#include <queue>\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nconst int maxn = 200005;\nint n, a[maxn], tot, col[maxn], sum[maxn], pre[maxn], nxt[maxn], ans;\nbool vis[maxn];\npriority_queue<pair<int, int> > q;\nint main() {\n\tios :: sync_with_stdio(false);\n\tcin >> n;\n\tfor(int i = n; i; --i) cin >> a[i];\n\tfor(int i = 1; i <= n; ++i)\n\t\tif(a[i] == a[i-1]) ++sum[tot];\n\t\telse col[++tot] = a[i], sum[tot] = 1;\n\tfor(int i = 1; i <= tot; ++i) pre[i] = i-1, nxt[i] = i+1, q.push(make_pair(sum[i], i));\n\twhile(!q.empty()) {\n\t\tint cur = q.top().second; q.pop();\n\t\tif(vis[cur]) continue;\n\t\tint l = pre[cur], r = nxt[cur];\n\t\tpre[r] = l, nxt[l] = r, vis[cur] = true;\n\t\tif(l and col[l] == col[r])\n\t\t\tpre[nxt[r]] = l, nxt[l] = nxt[r], vis[r] = true, q.push(make_pair(sum[l]+=sum[r], l));\n\t\t++ans;\n\t}\n\tcout << ans << endl;\n}\n```\n\n### p.s\n\n\u5c0f\u840c\u65b0yy\u7684\u505a\u6cd5\uff0c\u6709hack\u6570\u636e\u53eb\u6211\u55f7\u3002",
        "postTime": 1568196439,
        "uid": 135658,
        "name": "emptysetvvvv",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF899E \u3010Segments Removal\u3011"
    },
    {
        "content": "# \u524d\u8a00\n\n\u6211\u662f sb\uff0c\u8003\u8bd5\u7684\u65f6\u5019\u6ca1\u6709\u628a\u5143\u7d20\u8fdb\u961f\uff0c\u6302\u4e86\u3002\u3002\u3002\n\n# \u601d\u8def\n\n2021 \u5e74 csp \u666e\u53ca\u6709\u4e00\u9053\u53eb\u5c0f\u718a\u7684\u679c\u7bee\u7684\u9898\u76ee\uff0c\u8ddf\u8fd9\u9053\u9898\u8fd8\u662f\u5341\u5206\u76f8\u4f3c\uff0c\u90fd\u662f\u7ef4\u62a4\u5757\uff0c\u7136\u540e\u5220\u9664\u4e86\u8fc7\u540e\u8fdb\u884c\u5408\u5e76\u3002\n \n\u8003\u8651\u53cc\u5411\u94fe\u8868\uff1a\n\n\u9898\u76ee\u89c4\u5b9a\u4e86\u9700\u8981\u5bf9\u6bcf\u4e00\u6b21\u6700\u957f\u7684\u8fde\u7eed\u7684\u8fdb\u884c\u5220\u9664\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u6765\u5b58\u50a8\u6bcf\u4e00\u5757\u7684\u7f16\u53f7\u3002\u4ee5\u5757\u957f\u4f5c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u6700\u5de6\u8fb9\u7684\u5143\u7d20\u4f5c\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u5373\u53ef\u3002\n\n\u7136\u540e\u5c31\u5341\u5206\u6c34\u4e86\u3002\n\n\u6bcf\u6b21\u5220\u53bb\u6700\u5927\u7684\u65f6\u5019\u3002\n\n\u5148\u770b\u770b\u5f53\u524d\u7684\u524d\u4e00\u5757\u548c\u5f53\u524d\u7684\u4e0b\u4e00\u5757\u662f\u5426\u80fd\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u5373\u6570\u5b57\u76f8\u7b49\u3002\u5982\u679c\u76f8\u7b49\u4e24\u5757\u8fdb\u884c\u5408\u5e76\uff0c**\u7136\u540e\u8bb0\u5f97\u628a\u5408\u5e76\u597d\u7684\u8fdb\u5165\u4f18\u5148\u961f\u5217**\u3002\uff08\u8fd9\u662f\u9648\u8ff0\u53e5\uff09\n\n\u5426\u5219\uff0c\u76f4\u63a5\u5220\u9664\u5373\u53ef\u3002\n\n\u5982\u679c\u5f53\u5757\u88ab\u5408\u5e76\u6216\u8005\u5220\u9664\u65f6\uff0c\u4e00\u5b9a\u8bb0\u5f97\u6253\u4e2a\u6807\u8bb0\u5c06\u5176\u89c6\u4f5c\u5220\u9664\uff0c\u907f\u514d\u4f18\u5148\u961f\u5217\u4e00\u76f4\u5904\u7406\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=2e5+5;\nint n,ans,cnt;\nint a[N],b[N];\nint nxt[N],pre[N];\nbool f[N];\nstruct node{\n\tint Sz,Bh,St,Len;\n\tfriend bool operator<(node x,node y){\n\t\treturn x.Len==y.Len?x.St>y.St:x.Len<y.Len;\n\t}\n}q[N];\npriority_queue<node>qu;\nvoid sub(int x){\n\tif(q[pre[x]].Sz==q[nxt[x]].Sz){\n\t\tf[nxt[x]]=1;\n\t\tq[pre[x]].Len+=q[nxt[x]].Len;\n\t\tqu.push(q[pre[x]]);\n\t\tnxt[pre[x]]=nxt[nxt[x]];\n\t\tpre[nxt[nxt[x]]]=pre[x];\n\t}\n\telse{\n\t\tnxt[pre[x]]=nxt[x];\n\t\tpre[nxt[x]]=pre[x];\n\t}\n}\nsigned main(){\n\tscanf(\"%lld\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%lld\",&a[i]),b[i]=a[i];\n\tsort(b+1,b+1+n);\n\tfor(int i=1;i<=n;i++) a[i]=lower_bound(b+1,b+1+n,a[i])-b;\n\tfor(int i=1;i<=n;){\n\t\tint u=a[i];\n\t\tq[++cnt].St=i;\n\t\tq[cnt].Sz=a[i];\n\t\twhile(i<=n && a[i]==u) q[cnt].Len++,i++;\n\t\tq[cnt].Bh=cnt;\n\t\tqu.push(q[cnt]);\n\t}\n\tfor(int i=1;i<cnt;i++) nxt[i]=i+1;\n\tfor(int i=2;i<=cnt;i++) pre[i]=i-1;\n\twhile(!qu.empty()){\n\t\tans++;\n\t\tnode x=qu.top();\n\t\tqu.pop();\n\t\tif(f[x.Bh]){\n\t\t\tans--;\n\t\t\tcontinue;\n\t\t}\n\t\tf[x.Bh]=1;\n\t\tsub(x.Bh);\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n} \n```",
        "postTime": 1641619059,
        "uid": 364122,
        "name": "BigJoker",
        "ccfLevel": 6,
        "title": "CF899E Segments Removal-\u9898\u89e3\u62a5\u544a"
    },
    {
        "content": "\u66b4\u529b\u505a\u6cd5\uff1a\n\u6bcf\u6b21\u627e\u51fa\u6700\u957f\u7684\u533a\u95f4\u5e76\u5220\u53bb\uff0c\u53cd\u590d\u6a21\u62df\u3002\n\n\u9996\u5148\u8fd9\u6837\u80af\u5b9a\u4f1a\u8d85\u65f6\uff0c\u56e0\u6b64\u6211\u4eec\u5e94\u8be5\u60f3\u529e\u6cd5\u5728\u66b4\u529b\u7684\u67d0\u4e9b\u73af\u8282\u4f18\u5316\u3002\n\n\u7b2c\u4e00\uff0c\u66b4\u529b\u7684\u67e5\u627e\u662f $O(n)$ \u7684\uff0c\u8fd9\u662f\u4e0d\u80fd\u63a5\u53d7\u7684\uff0c\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\uff0c\u5408\u5e76\u5404\u4e2a\u533a\u95f4\uff0c\u6700\u540e\u53d6\u6240\u6709\u533a\u95f4\u7684\u7ed3\u679c\uff0c\u8fd9\u6837\u7684\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u6709 $O(1)$\n\n\u5177\u4f53\u7684\u5408\u5e76\u65b9\u6cd5\u4e3a\uff1a\n\n\u9996\u5148\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a $lsum$ \u8868\u793a\u5de6\u7aef\u70b9\u7684\u6570\u5b57\uff0c\u518d\u5b9a\u4e49\u4e00\u4e2a $rsum$ \u8868\u793a\u53f3\u7aef\u70b9\u7684\u6570\u5b57\uff0c\u4ee5\u53ca\u4e00\u4e2a $sum$ \u8868\u793a\u533a\u95f4\u7684\u957f\u5ea6\u3002\n\n\u56e0\u4e3a\u6bcf\u4e2a\u533a\u95f4\u7684\u6570\u5b57\u662f\u4e00\u6837\u7684\uff0c\u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4e0d\u662f\u6bcf\u4e2a\u8282\u70b9\u7684\u6570\u5b57\uff0c\u800c\u662f\u539f\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u533a\u95f4\u3002\n\n\u6240\u4ee5\uff0c\u7ebf\u6bb5\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u8fd8\u8981\u7ef4\u62a4\u4e09\u4e2a\u503c\uff1a\u4ece\u5de6\u7aef\u70b9\u5f00\u59cb\u7684\u6700\u957f\u533a\u95f4\uff0c\u4ece\u53f3\u7aef\u70b9\u5f00\u59cb\u7684\u6700\u957f\u533a\u95f4\u4ee5\u53ca\u5168\u5c40\u6700\u957f\u533a\u95f4\u3002\n\n\u6211\u4eec\u8bbe\u8fd9\u4e09\u4e2a\u533a\u95f4\u5206\u522b\u4e3a $lbest,rbest,best$\n\n\u6700\u540e\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5220\u9664\u67d0\u4e9b\u8282\u70b9\uff0c\u56e0\u6b64\u5b9a\u4e49\u4e00\u4e2a $bool$ \u578b\u53d8\u91cf\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u5220\u9664\u3002\n\n\u8003\u8651\u5de6\u513f\u5b50\u4e0e\u53f3\u513f\u5b50\u7684\u5408\u5e76\u3002\n\n\u82e5\u4e24\u4e2a\u513f\u5b50\u90fd\u5df2\u7ecf\u88ab\u5220\u9664\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u4e5f\u5df2\u7ecf\u88ab\u5220\u9664\u3002\n\n\u82e5\u6709\u4e00\u4e2a\u513f\u5b50\u88ab\u5220\u9664\uff0c\u90a3\u4e48\u8fd4\u56de\u90a3\u4e2a\u6ca1\u5220\u9664\u7684\u513f\u5b50\u3002\n\n\u5426\u5219\uff0c\u5f53\u524d\u8282\u70b9\u7684 $lbest$ \u5c31\u7b49\u4e8e\u5de6\u513f\u5b50\u7684 $lbest$\uff0c\u5f53\u524d\u8282\u70b9\u7684 $rbest$ \u5c31\u7b49\u4e8e\u53f3\u513f\u5b50\u7684 $rbest$\uff0c\u800c\u5f53\u524d\u8282\u70b9\u7684 $best$ \u5c31\u7b49\u4e8e\u5de6\u53f3\u513f\u5b50 $best$ \u957f\u5ea6\u5927\u7684\u90a3\u4e2a $best$\u3002\n\n\u518d\u8003\u8651\u82e5\u5de6\u513f\u5b50\u7684\u53f3\u7aef\u70b9\u6570\u5b57\u7b49\u4e8e\u53f3\u513f\u5b50\u5de6\u7aef\u70b9\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u533a\u95f4\u5c31\u80fd\u5408\u5e76\uff1a\n\n\u82e5\u5de6\u513f\u5b50\u7684 $lbest$ \u7684\u957f\u5ea6\u7b49\u4e8e\u5de6\u513f\u5b50\u7684 $sum$\uff0c\u5219\u8bf4\u660e\u5de6\u513f\u5b50\u5355\u72ec\u6210\u4e00\u4e2a\u533a\u95f4\uff0c\u56e0\u6b64\u5f53\u524d\u8282\u70b9\u7684 $lbest$ \u5c31\u7b49\u4e8e\u5de6\u513f\u5b50\u7684 $lbest$ \u52a0\u4e0a\u53f3\u513f\u5b50\u7684 $lbest$\n\n\u53f3\u513f\u5b50\u7684 $rbest$ \u957f\u5ea6\u7b49\u4e8e\u53f3\u513f\u5b50\u7684 $sum$ \u540c\u7406\u3002\n\n\u5f53\u524d\u8282\u70b9\u7684 $best = max(best,lson.rbest + rson.lbest)$\n\n\u8fd9\u6837\u5408\u5e76\u64cd\u4f5c\u5c31\u505a\u5b8c\u5566~\n\n\u7b2c\u4e8c\uff0c\u8003\u8651\u5220\u9664\u3002\n\n\u7531\u4e8e\u6211\u4eec\u5148\u524d\u7684\u5de5\u4f5c\uff0c\u5220\u9664\u662f\u5f88\u7b80\u5355\u7684\uff0c\u53ea\u8981\u53d6\u51fa\u9876\u90e8\u8282\u70b9 $best$ \u7684 $l$ \u7aef\u70b9\u4e0e $r$ \u7aef\u70b9\uff0c\u5220\u9664\u8fd9\u4e2a\u533a\u95f4\u5373\u53ef\uff0c\u5177\u4f53\u8bf7\u770b\u4ee3\u7801\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 200005;\n\nint a[N];\npair<int,int> b[N];\nint n,tot,sum;\n\nstruct range\n{\n\tint l,r,len;\n\tbool operator < (const range &a) const\n\t{\n\t\tif(len != a.len) return len < a.len;\n\t\treturn l > a.l;\n\t}\n\trange operator + (const range &a) const\n\t{\n\t\treturn (range){l,a.r,len + a.len};\n\t}\n};\n\nstruct node\n{\n\trange lbest,rbest,best;\n\tint lv,rv,sum;\n\tbool is_clear;\n\tvoid clear()\n\t{\n\t\tis_clear = 1;\n\t\tlv = -1,rv = -1;\n\t\tbest.len = 0,lbest.len = 0,rbest.len = 0;\n\t}\n\tvoid init(int l,int x,int y)\n\t{\n\t\tbest = (range){l,l,y};\n\t\tlbest = rbest = best;\n\t\tsum = y,lv = rv = x,is_clear = 0;\n\t}\n\tfriend node operator + (const node &a,const node &b)\n\t{\n\t\tstatic node c;\n\t\tif(a.is_clear && b.is_clear)\n\t\t{\n\t\t\tc.is_clear = 1;\n\t\t\tc.clear();\n\t\t\treturn c;\n\t\t}\n\t\tif(b.is_clear) return a;\n\t\tif(a.is_clear) return b;\n\t\tc.is_clear = 0;\n\t\tc.sum = a.sum + b.sum;\n\t\tc.lv = a.lv,c.rv = b.rv;\n\t\tc.lbest = a.lbest;\n\t\tc.rbest = b.rbest;\n\t\tc.best = max(a.best,b.best);\n\t\tif(a.rv == b.lv)\n\t\t{\n\t\t\tif(a.lbest.len == a.sum) c.lbest = max(c.lbest,a.lbest + b.lbest);\n\t\t\tif(b.rbest.len == b.sum) c.rbest = max(c.rbest,a.rbest + b.rbest);\n\t\t\tc.best = max(c.best,a.rbest + b.lbest);\n\t\t}\n\t\treturn c;\n\t}\n}tree[N << 2];\n\nvoid Push_Down(int rt)\n{\n\tif(tree[rt].is_clear == 1)\n\t{\n\t\ttree[rt << 1].clear();\n\t\ttree[rt << 1 | 1].clear();\n\t}\n}\n\nvoid Build(int l,int r,int rt)\n{\n\tif(l == r)\n\t{\n\t\ttree[rt].init(l,b[l].first,b[l].second);\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tBuild(l,mid,rt << 1);\n\tBuild(mid + 1,r,rt << 1 | 1);\n\ttree[rt] = tree[rt << 1] + tree[rt << 1 | 1];\n\t//printf(\"%d %d %d\\n\",rt,tree[rt].best.l,tree[rt].best.r);\n}\n\nvoid clear(int rt,int l,int r,int l1,int r1)\n{\n\tif(l == l1 && r == r1)\n\t{\n\t\ttree[rt].clear();\n\t\treturn ;\n\t}\n\t//printf(\"%d %d %d %d WENG\\n\",l,r,l1,r1);\n\tPush_Down(rt);\n\tint mid = (l + r) >> 1;\n\tif(r1 <= mid) clear(rt << 1,l,mid,l1,r1);\n\telse if(l1 > mid) clear(rt << 1 | 1,mid + 1,r,l1,r1);\n\telse\n\t\tclear(rt << 1,l,mid,l1,mid),clear(rt << 1 | 1,mid + 1,r,mid + 1,r1);\n\ttree[rt] = tree[rt << 1] + tree[rt << 1 | 1];\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i = 1;i <= n; ++ i)\n\t\tscanf(\"%d\",&a[i]);\n\tint s = 1;\n\tfor(int i = 2;i <= n; ++ i)\n\t\tif(a[i] != a[i - 1])\n\t\t\tb[++tot] = make_pair(a[i - 1],s),s = 1;\n\t\telse\n\t\t\ts ++;\n\tb[++tot] = make_pair(a[n],s);\n\tn = tot;\n\tBuild(1,tot,1);\n\tint sum = 0;\n\twhile(!tree[1].is_clear)\n\t{\n\t\tint l = tree[1].best.l;\n\t\tint r = tree[1].best.r;\n\t\tclear(1,1,tot,l,r);\n\t\tsum ++;\n\t}\n\tprintf(\"%d\\n\",sum);\n}\n\n```",
        "postTime": 1526958443,
        "uid": 25308,
        "name": "Wen_kr",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF899E \u3010Segments Removal\u3011"
    },
    {
        "content": "\u770b\u4e86\u773c\u9898\u89e3\uff0c\u90fd\u662f\u6211\u4e0d\u4f1a\u800c\u4e14\u6bd4\u8f83\u5de7\u5999\u7684\u505a\u6cd5\u7684\u505a\u6cd5\u3002\u7531\u4e8e\u6211\u6ca1\u6709\u8111\u5b50\uff08\u5212\u6389\uff09\uff0c\u6240\u4ee5\u6211\u6765\u53d1\u4e00\u4efdFHQ-Treap\u66b4\u529b\u5408\u5e76\u3001\u5220\u9664\u7684\u9898\u89e3\u3002\n\n### \u524d\u7f6e\u829d\u58eb\n\n* FHQ-Treap\uff08splay\u5e94\u8be5\u4e5f\u884c\uff0c\u4f46\u662f\u7a9d\u592a\u83dc\u4e86\u4e0d\u4f1a\uff09\n\n* \u4e00\u4e2a\u826f\u597d\u7684\u5fc3\u6001\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u6253\u597d\u4e00\u4e2a FHQ-Treap \u7684\u677f\u5b50\uff0c\u4ee5\u533a\u95f4\u957f\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4ee5\u5de6\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u5efa\u4e00\u68f5\u6743\u503c\u5e73\u8861\u6811\u3002\n\n```cpp\nstruct yyy{\n\tint ls,rs,val,size,rnd,l,r;\n    //val\u8868\u793a\u533a\u95f4\u957f\u5ea6\uff0cl,r\u8868\u793a\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\n}a[maxn];\ninline void Pushup(int k){\n\ta[k].size=a[a[k].ls].size+a[a[k].rs].size+1;\n}\ninline void split(int k,int x,int y,int &a_,int &b_){\n\tif (!k) a_=b_=0;\n\telse{\n\t\tif (a[k].val>x||(a[k].val==x&&a[k].l<y)) a_=k,split(a[k].rs,x,y,a[k].rs,b_);\n\t\telse b_=k,split(a[k].ls,x,y,a_,a[k].ls);\n\t\tPushup(k);\n\t}\n}\ninline int merge(int u,int v){\n\tif (!u||!v) return u|v;\n\tif (a[u].rnd<a[v].rnd){\n\t\ta[u].rs=merge(a[u].rs,v);\n\t\tPushup(u);return u;\n\t}\n\telse{\n\t\ta[v].ls=merge(u,a[v].ls);\n\t\tPushup(v);return v;\n\t}\n}\n```\n\u7136\u540e\u63a5\u4e0b\u6765\u5199\u4e00\u4e2a\u627e\u5230\u533a\u95f4\u6700\u5927\u7684\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u67e5\u627e\u533a\u95f4\u6392\u540d\u7b2c\u4e00\u7684\u533a\u95f4\u5728\u5e73\u8861\u6811\u4e2d\u7684\u4e0b\u6807\u3002\uff08\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f\u4e0b\u6807\uff0c\u56e0\u4e3a\u6709\u4e86\u4e0b\u6807\u53ef\u4ee5\u67e5\u627e\u5176\u4ed6\u4e1c\u897f\uff0c\u800c\u5176\u4ed6\u4e1c\u897f\uff08\u533a\u95f4\u957f\u5ea6\uff09\u4e0d\u80fd\u67e5\u627e\u4e0b\u6807\uff09\n```cpp\ninline int at(int x){\n\tint k=root;\n\twhile (k){\n\t\tif (x<=a[a[k].ls].size) k=a[k].ls;\n\t\telse if (x==a[a[k].ls].size+1) return k;\n\t\telse x-=a[a[k].ls].size+1,k=a[k].rs;\n\t}\n}\n```\n\u597d\u7684\u6211\u4eec~~\u9884\u5904\u7406~~\u5b8c\u6bd5\uff0c\u63a5\u4e0b\u6765\u770b\u4e3b\u7a0b\u5e8f\u3002\n\n\u56e0\u4e3a\u4e00\u5f00\u59cb\u5c31\u8981\u5206\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u9884\u5904\u7406\u51fa\u539f\u5e8f\u5217\u4e2d\u7684\u6570\u6bb5\uff0c\u7136\u540e\u6254\u5230\u5e73\u8861\u6811\u4e2d\u3002\n\n```cpp\nread(n);\n\tfor (i=1;i<=n;i++) read(f[i]);f[n+1]=3e9;\n\tfor (i=2;i<=n+1;i++)\n\t\tif (f[i]==f[i-1]) x++;\n\t\telse{\n\t\t    a[++cnt].val=x;a[cnt].size=1;\n\t\t\ta[cnt].l=a[cnt].tl=i-x;\n\t\t\ta[cnt].rnd=rand();\n\t\t\tsplit(root,x,a[cnt].l,tmp1,tmp2);\n\t\t\troot=merge(tmp1,merge(cnt,tmp2));\n\t\t\tpos[a[cnt].l]=pos[a[cnt].r]=cnt;\n\t\t\tx=1;++len;\n        //x\u8868\u793a\u533a\u95f4\u7684\u957f\u5ea6\uff0clen\u8868\u793a\u603b\u5171\u6709\u591a\u5c11\u4e2a\u6570\u6bb5\n        //pos[i]\u5c31\u662f\u4ee5i\u4e3a\u7aef\u70b9\u7684\u533a\u95f4\u7684\u4e0b\u6807\uff0c\u7528\u6cd5\u4e4b\u540e\u4f1a\u8be6\u7ec6\u8bf4\u660e\u3002\n\t\t}\n```\n\u7136\u540e\u8fdb\u884c\u6a21\u62df\uff1a\n```cpp\nwhile (len>1){\n\t\ttmp=at(1);\n\t\tsplit(root,a[tmp].val,a[tmp].l,tmp1,tmp2);\n\t\tsplit(tmp2,a[tmp].val,a[tmp].l+1,tmp2,tmp3);\n\t\troot=merge(tmp1,tmp3);\n\t\tlen--;++ans;\n\t\tif (a[tmp].l>1&&a[tmp].r<n&&f[a[tmp].l-1]==f[a[tmp].r+1]){\n        //\u5982\u679c\u88ab\u5220\u9664\u7684\u5de6\u53f3\u533a\u95f4\u53ef\u4ee5\u5408\u5e76\uff0c\u66b4\u529b\u5408\u5e76\n\t\t\ttot1=pos[a[tmp].l-1];tot2=pos[a[tmp].r+1];\n\t\t\tsplit(root,a[tot1].val,a[tot1].l,tmp1,tmp2);\n\t\t\tsplit(tmp2,a[tot1].val,a[tot1].l+1,tmp2,tmp3);\n\t\t\troot=merge(tmp1,tmp3);\n\t\t\tsplit(root,a[tot2].val,a[tot2].l,tmp1,tmp2);\n\t\t\tsplit(root,a[tot2].val,a[tot2].l+1,tmp2,tmp3);\n\t\t\troot=merge(tmp1,tmp3);\n\t\t\ta[++cnt].l=a[tot1].l;a[cnt].r=a[tot2].r;pos[a[tot1].l]=pos[a[tot2].r]=cnt;\n\t\t\ta[cnt].size=1;a[cnt].rnd=rand();a[cnt].val=a[tot1].val+a[tot2].val;\n\t\t\tsplit(root,a[cnt].val,a[cnt].l,tmp1,tmp2);\n\t\t\troot=merge(tmp1,merge(cnt,tmp2));len--;\n            //\u8bb0\u5f97\u51cf\u53bb\n\t\t}\n\t}\n\tprintf(\"%d \",ans+1);\n```\n\n\u5f53\u7136\u4e8b\u60c5\u5e76\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\uff0c\u770b\u4e00\u7ec4\u6570\u636e\uff1a\n\ninput:\n```\n7\n1 2 2 3 3 3 1\n```\n\u8fd9\u663e\u7136\u8f93\u51fa $3$\uff0c\u4f46\u662f\u7a0b\u5e8f\u8f93\u51fa\u4e86 $4$\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\uff0c\u5c31\u662f\u5728 $[4,6]$ \u5220\u9664\u5b8c\u6bd5\u4ee5\u540e\uff0c$[7,7]$ \u4f9d\u7136\u662f $[4,6]$ \u53f3\u8fb9\u7684\u533a\u95f4\u800c\u4e0d\u662f $[2,3]$ \u7684\u533a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5220\u9664\u540e\u7684\u533a\u95f4\u800c\u5de6\u53f3\u533a\u95f4\u4e0d\u80fd\u5408\u5e76\u7684\u533a\u95f4\u5411\u5de6\u8fb9\u7684\u533a\u95f4\uff08\u5411\u53f3\u4e5f\u884c\uff09\u5408\u5e76\uff0c\u6539\u52a8\u5de6\u53f3\u7aef\u70b9\uff0c\u4f46\u662f\u76f8\u5bf9\u6392\u540d\uff0c\u533a\u95f4\u5927\u5c0f\uff0c\u90fd\u662f\u4e0d\u53d8\u7684\u3002\n\n\u4e0d\u8fc7\u5f53\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u4e3a $1$ \u662f\u5c31\u6ca1\u6709\u5fc5\u8981\u5411\u5de6\u5408\u5e76\u4e86\uff0c\u81f3\u4e8e\u539f\u56e0\u4e5f\u5f88\u597d\u60f3\uff0c\u5c31\u4e0d\u505a\u89e3\u91ca\u4e86\u3002\uff08\u8fd9\u4e2a\u60c5\u51b5\u5408\u5e76\u8fd8\u4f1aWA#7\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff09\u3002\n\n\u56e0\u4e3a\u6709\u4e86\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u8fd8\u8981\u8bb0\u5f55\u5176\u771f\u5b9e\u7684\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u5750\u6807\uff0c\u6bd4\u5982\u4e0a\u9762\u7684\u6570\u636e\u4e3a\u4f8b\uff0c$[2,3]$,$[4,6]$\u5408\u5e76\u4ee5\u540e\uff0c\u771f\u5b9e\u7684\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u5750\u6807\u5e94\u8be5\u8fd8\u662f $2,3,$ \u4e0d\u7136\u5de6\u53f3\u533a\u95f4\u5408\u5e76\u7684\u65f6\u5019\uff0c\u8ba4\u4e3a\u53f3\u7aef\u70b9\u662f $6$ \u5c31\u9519\u4e86\u3002\n   \n\n\u7136\u540e\u5c31\u662f\u4ebf\u70b9\u7ec6\u8282\uff0c\u5f53\u7136\u4e5f\u6709\u66f4\u597d\u7684\u6253\u6cd5\uff0c\u4f46\u662f\u6211\u8ba4\u4e3a\u7684\u505a\u6cd5\u6839\u672c\u4e0d\u9700\u8981\u592a\u591a\u7684\u601d\u8003\u3002\u8d34\u4e0a\u4fee\u6539\u8fc7\u7684\u4e3b\u7a0b\u5e8f\uff1a\n\nCode:\n\n```cpp\n//a[k].tl,a[k].tr\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u7684\u771f\u5b9e\u5de6\u53f3\u7aef\u70b9\nint main(){\n\tsrand(time(0));\n\trg int i,x=1,n,len=0,tmp,tmp1,tmp2,tmp3,tot1,tot2,ans=0;\n\tread(n);\n\tfor (i=1;i<=n;i++) read(f[i]);f[n+1]=3e9;\n    //\u4e0d\u8981\u8d4b1e9\uff0c\u56e0\u4e3a\u6709\u4e00\u4e2a\u70b9\u6700\u540e\u4e00\u4e2a\u6570\u4e5f\u662f1e9\u7136\u540e\u5c31\u8bef\u5224\u3002\u3002\u3002\u4ee5\u540e\u8fd8\u662f\u8981\u770b\u6e05\u6570\u636e\u8303\u56f4 \n\tfor (i=2;i<=n+1;i++)\n\t\tif (f[i]==f[i-1]) x++;\n\t\telse{\n\t\t    a[++cnt].val=x;a[cnt].size=1;\n\t\t\ta[cnt].l=a[cnt].tl=i-x;\n\t\t\ta[cnt].r=a[cnt].tr=i-1;\n            //\u4e00\u5f00\u59cb\u90fd\u662f\u76f8\u540c\u7684\n\t\t\ta[cnt].rnd=rand();\n\t\t\tsplit(root,x,a[cnt].l,tmp1,tmp2);\n\t\t\troot=merge(tmp1,merge(cnt,tmp2));\n\t\t\tpos[a[cnt].l]=pos[a[cnt].r]=cnt;\n\t\t\tx=1;++len;\n\t\t}\n\twhile (len>1){\n\t\ttmp=at(1);\n\t\tsplit(root,a[tmp].val,a[tmp].tl,tmp1,tmp2);\n\t\tsplit(tmp2,a[tmp].val,a[tmp].tl+1,tmp2,tmp3);\n\t\troot=merge(tmp1,tmp3);pos[a[tmp].l]=pos[a[tmp].r]=0;\n\t\tlen--;++ans;\n\t\t\n\t\tif (a[tmp].l>1&&a[tmp].r<n&&f[a[pos[a[tmp].l-1]].tr]==f[a[pos[a[tmp].r+1]].tl]&&pos[a[tmp].l-1]&&pos[a[tmp].r+1]){\n        //\u8fd9\u91cc\u5176\u5b9e\u5199\u7684\u6709\u4e9b\u5957\uff0c\u4f46\u662f\u60f3\u4e00\u4e0b\u4e5f\u662f\u4e0d\u96be\u7684\n\t\t\ttot1=pos[a[tmp].l-1];tot2=pos[a[tmp].r+1];\n\t\t\tsplit(root,a[tot1].val,a[tot1].tl,tmp1,tmp2);\n\t\t\tsplit(tmp2,a[tot1].val,a[tot1].tl+1,tmp2,tmp3);\n\t\t\troot=merge(tmp1,tmp3);\n\t\t\tsplit(root,a[tot2].val,a[tot2].tl,tmp1,tmp2);\n\t\t\tsplit(tmp2,a[tot2].val,a[tot2].tl+1,tmp2,tmp3);\n\t\t\troot=merge(tmp1,tmp3);\n\t\t\t\n\t\t\ta[++cnt].l=a[tot1].l;a[cnt].r=a[tot2].r;\n\t\t\ta[cnt].tl=a[tot1].tl;a[cnt].tr=a[tot2].tr;\n\t\t\tpos[a[tot1].r]=pos[a[tot2].l]=0;\n\t\t\tpos[a[tot1].l]=pos[a[tot2].r]=cnt;\n            //\u8fd9\u91cc\u4e00\u5b9a\u8981\u5148\u8d4b0\u518d\u8d4b\u6210cnt,\u56e0\u4e3a\u6709\u4e9b\u60c5\u51b5\u4e0bl=r\u6700\u540epos[l]=0\u4e86\u3002\n\t\t\ta[cnt].size=1;a[cnt].rnd=rand();\n\t\t\ta[cnt].val=a[tot1].val+a[tot2].val;\n\t\t\tsplit(root,a[cnt].val,a[cnt].tl,tmp1,tmp2);\n\t\t\troot=merge(tmp1,merge(cnt,tmp2));len--;\n\t\t}\n\t\telse if (a[tmp].l>1){\n\t\t\ttot1=pos[a[tmp].l-1];\n\t\t\tpos[a[tot1].r]=0;\n\t\t\tpos[a[tot1].l]=pos[a[tot1].r=a[tmp].r]=tot1;\n\t}\n    //\u56e0\u4e3a\u8fd9\u6837\u6392\u540d\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u8bf4\u4e0d\u9700\u8981\u62ff\u51fa\u6765\u5408\u5e76\u518d\u653e\u56de\u53bb\u3002\n\tprintf(\"%d\",ans+1);\n\treturn 0;\n}\n```\n\n\u8fd8\u6709\u95ee\u9898\u6b22\u8fce\u79c1\u4fe1\u95ee\u6211\uff0cNOIP2020 \u4e4b\u524d\u5e94\u8be5\u90fd\u884c\u3002",
        "postTime": 1598277877,
        "uid": 51569,
        "name": "\u8fdd\u89c4\u7528\u6237\u540dFkZyA0!2",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF899E Segments Removal"
    },
    {
        "content": "\u8fd9\u9898\u6211\u5206\u4eab\u4e00\u79cd\u6bd4\u8f83\u66b4\u529b\u4f46\u590d\u6742\u5ea6\u6ca1\u6709\u95ee\u9898\u7684\u7b97\u6cd5\uff0c\u5176\u4ed6\u7684\u9898\u89e3\u5e94\u8be5\u90fd\u6ca1\u6709\u800c\u4e14\u6211\u8fd9\u5f88\u590d\u6742\uff0c\u6211\u4e5f\u4f1a\u8bb2\u4e00\u4e0b\u5176\u4ed6\u7684\u65b9\u6cd5 qwq\u3002\n\n# Solution1\n\n\u770b\u5230\u9898\u5c31\u4f1a\u60f3\u5230\u5220\u9664\u4e00\u6bb5\u540e\u4e24\u8fb9\u7684\u53ef\u80fd\u4f1a\u5408\u5e76\uff0c\u7136\u540e\u5c31\u662f\u6c42\u6700\u5927\u7684\u957f\u5ea6\u4ee5\u53ca\u6700\u9760\u524d\u7684\uff0c\u5904\u7406\u597d\u8fd9\u4e9b\u95ee\u9898\uff0c\u5c31\u6dfc\u4e86\u4e00\u9053\u7d2b\u9898\u4e86\u3002\n\n\u8bb2\u8bb2\u600e\u4e48\u5b9e\u73b0\uff1a\n\n\u5bf9\u4e8e\u539f\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4ed6\u7b80\u5316\u6210\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7pligfrx.png)\n\n\u4e5f\u5c31\u662f\u76f8\u540c\u7684\u7684\u5143\u7d20\u6211\u4eec\u5c06\u4ed6\u4eec\u6574\u6210\u4e00\u5768\uff0c\u6bcf\u5768\u6709\u4e00\u4e2a $cnt$ \u548c $x$\uff0c\u7136\u540e\u5c06\u4ed6\u4eec\u8fde\u6210\u94fe\u8868\uff0c\u4e3a\u4e86\u9632\u6b62\u56e0\u7279\u5224\u8fb9\u754c\u800c\u53d1\u70e7\uff0c\u6211\u5c06 $0$ \u597d\u8282\u70b9\u8fde\u5411\u4e24\u7aef\uff0c\u4f7f\u4ed6\u4eec\u6784\u6210\u4e00\u4e2a\u73af\uff0c\u8fd9\u6837\u5c31\u597d\u5220\u4e86\uff08\u4e5f\u597d\u5408\u5e76\u4e86\uff09\u3002\n\n\u7136\u540e\u662f\u627e\u5f53\u524d\u8981\u5220\u7684\uff0c\u8fd9\u91cc\u6211\u6253\u7684\u662f\u7ebf\u6bb5\u6811\uff0c\u4e5f\u5c31\u662f\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4 $cnt$ \u57df\u4e0a\u7684 $x$\uff0c\u5c31\u662f\u56e0\u4e3a $x$ \u8fd8\u8981\u6709\u5e8f\uff0c\u6211\u5c31\u628a $x$ \u63d2\u5165\u5176\u5bf9\u5e94\u7684\u53f6\u5b50\u7ed3\u70b9\u7684 `set` \u91cc\uff0c\u56e0\u4e3a\u5408\u5e76\u65f6\u8981\u5bf9\u5e94\u5220\u9664\uff08\u4e0d\u7136\u6211\u5c31\u6253 `priority_queue` \u4e86\uff09\uff0c\u8fd9\u6837\u867d\u7136\u5f88\u590d\u6742\uff0c\u4f46\u662f\u7a33\u5b9a\u6027\u4e2a\u4eba\u611f\u89c9\u6253\u51fa\u6765\u5c31\u4e0d\u5b58\u5728\u4e0d\u8fc7\u7684\u60c5\u51b5\u3002\n\n\u732e\u4e0a\u4e00\u4efd\u53c8\u81ed\u53c8\u957f\u8fd8\u6ca1\u4eba\u770b\u7684\u4ee3\u7801\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate<typename zqw>void qr(zqw &x){\n\tbool f=x=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)) f|=c=='-',c=getchar();\n\twhile(isdigit(c)) x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\tx=f?~(x-1):x;\n\treturn ;\n}\nint step,lst[200005],nxt[200005],n,a[200005],flag[200005],N,top;\nstruct node{\n\tint x,cnt;\n}p[200005];\nstruct Tnode{\n\tint l,r,sum;\n\tset<int> pos;\n}tr[800005];\nvoid pushup(int p){\n\ttr[p].sum=tr[p<<1].sum+tr[p<<1|1].sum;\n}\nvoid build(int l,int r,int p){\n\ttr[p].l=l,tr[p].r=r;\n\tif(l==r){\n\t\treturn ;\n\t}\n\tint mid=l+r>>1;\n\tbuild(l,mid,p<<1),build(mid+1,r,p<<1|1);\n}\nvoid add(int x,int y,int p){\n\tif(tr[p].l==tr[p].r){\n\t\ttr[p].sum++;\n\t\ttr[p].pos.insert(y);\n\t\treturn ;\n\t}\n\tint mid=(tr[p].l+tr[p].r)>>1;\n\tif(x<=mid) add(x,y,p<<1);\n\telse add(x,y,p<<1|1);\n\tpushup(p);\n}\nvoid del(int x,int y,int p){\n\tif(tr[p].l==tr[p].r){\n\t\ttr[p].sum--;\n\t\ttr[p].pos.erase(y);\n\t\treturn ;\n\t}\n\tint mid=(tr[p].l+tr[p].r)>>1;\n\tif(x<=mid) del(x,y,p<<1);\n\telse del(x,y,p<<1|1);\n\tpushup(p);\n}\nint ask(int p){\n\tif(tr[p].l==tr[p].r){\n\t\treturn *tr[p].pos.begin();\n\t}\n\tif(tr[p<<1|1].sum) return ask(p<<1|1);\n\treturn ask(p<<1);\n}\nvoid Del(int p){\n\tlst[nxt[p]]=lst[p];\n\tnxt[lst[p]]=nxt[p];\n}\nint main() {\n\tqr(n);\n\tfor(int i=1;i<=n;i++){\n\t\tqr(a[i]);\n\t\tflag[i]=a[i];\n\t}\n\tsort(flag+1,flag+n+1);\n\tN=unique(flag+1,flag+n+1)-flag-1;\n\tfor(int i=1;i<=n;i++) a[i]=lower_bound(flag+1,flag+N+1,a[i])-flag;\n\tp[++top]=(node){a[1],1};\n\tfor(int i=2;i<=n;i++) {\n\t\tif(a[i]==p[top].x) p[top].cnt++;\n\t\telse p[++top]=(node){a[i],1};\n\t}\n\tbuild(1,n,1);\n\tfor(int i=1;i<=top;i++) {\n\t\tlst[i]=i-1,nxt[i]=(i==top?0:i+1);\n\t\tadd(p[i].cnt,i,1);\n\t}\n\tnxt[0]=1,lst[0]=top;\n\tp[0]=(node){0,0};\n\twhile(nxt[0]){\n\t\tstep++;\n\t\tint tmp=ask(1),Tmp;\n\t\tif(p[nxt[tmp]].x==p[lst[tmp]].x&&nxt[tmp]&&lst[tmp]){\n\t\t\tdel(p[lst[tmp]].cnt,lst[tmp],1),del(p[nxt[tmp]].cnt,nxt[tmp],1);\n\t\t\tp[lst[tmp]].cnt+=p[nxt[tmp]].cnt;\n\t\t\tDel(nxt[tmp]);\n\t\t\tadd(p[lst[tmp]].cnt,lst[tmp],1);\n\t\t}\n\t\tDel(tmp);\n\t\tdel(p[tmp].cnt,tmp,1);\n\t}\n\tprintf(\"%d\",step);\n\treturn 0;\n}\n```\n\n# Solution2\n\n\u8fd9\u9898\u7684\u7ebf\u6bb5\u6811\u5176\u5b9e\u662f\u975e\u5e38\u6ca1\u6709\u5fc5\u8981\u7684\uff08\u867d\u7136\u5728\u8003\u573a\u4e0a\u6211\u5e76\u6ca1\u6709\u610f\u8bc6\u5230\uff09\u3002\u76f4\u63a5\u5c06\u7ed3\u6784\u4f53\uff08$x,cnt$\uff09\u585e\u5230\u4e00\u4e2a\u5e73\u8861\u6811\uff08`set`\uff09\u91cc\uff0c\u91cd\u8f7d\u4e00\u4e0b\u8fd0\u7b97\u7b26\u5c31\u8f7b\u677e\u8fc7\u4e86\uff0c\u5e76\u6ca1\u6709\u4e0a\u4e00\u79cd\u7b97\u6cd5\u90a3\u4e48\u590d\u6742\uff0c\u4f46\u770b\u540c\u5b66\u4eec\u7684\u60c5\u51b5\u8fd9\u79cd\u505a\u6cd5\u7ec6\u8282\u5f88\u96be\u8c03\u3002\n\n\u56e0\u4e3a\u6211\u6ca1\u6253\u8fd9\u79cd\u505a\u6cd5\uff0c\u6240\u4ee5\u5c31\u7ed9\u4e00\u4e2a\u91cd\u8f7d\u8fd0\u7b97\u7b26\u7684\u4ee3\u7801\uff1a\n\n```cpp\nstruct node{\n\tint cnt,x,id;//id \u662f\u8f6c\u5316\u6210\u94fe\u8868\u540e\u5bf9\u5e94\u7684\u5143\u7d20\u4e0b\u6807\u3002\n    bool operator<(const node &p)const{\n    \treturn cnt<p.cnt||(cnt==p.cnt&&id<p.id);\n    }\n}\n```",
        "postTime": 1641631286,
        "uid": 383791,
        "name": "Others",
        "ccfLevel": 7,
        "title": "CF899E \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u6bcf\u6b21\u53d6\u51fa\u6700\u5927\u503c,\u5e76\u627e\u5230\u4f4d\u7f6e.\u7528`std::set`\u7ef4\u62a4,\u4ee5\u957f\u5ea6\u76f8\u53cd\u6570\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57,\u8d77\u59cb\u4f4d\u7f6e\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57,\u8bb0\u4e3a$len$.\u6bcf\u6b21\u53d6\u51fa\u6700\u5c0f(\u957f\u5ea6\u6700\u5927)\u5373\u53ef.\n\n\u53d6\u51fa\u957f\u5ea6\u6700\u5927\u503c\u540e,\u82e5\u5de6\u8fb9\u5143\u7d20\u548c\u53f3\u8fb9\u5143\u7d20\u76f8\u540c\u5219\u9700\u8981\u5408\u5e76;\u53ef\u4ee5\u7528\u94fe\u8868\u7ef4\u62a4,\u4f46\u4e5f\u53ef\u4ee5\u7528`std::set`\u7ef4\u62a4,\u4ee5\u8d77\u59cb\u4f4d\u7f6e\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57,\u957f\u5ea6\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57,\u987a\u4fbf\u8bb0\u5f55\u5143\u7d20\u7684\u503c,\u8bb0\u4e3a$seg$.\u7528`set::lower_bound`\u627e\u5230\u524d\u9a71\u540e\u7ee7\u5373\u53ef.  \n\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O(n\\log n)$\n```cpp\n/**********/\n#define MAXN 200011\nstd::set<pll>len;\nstruct one\n{\n    ll pos,len,num;\n    bool operator <(const one& t)\n    const\n    {\n        return (pos<t.pos||(pos==t.pos&&len<t.len));\n    }\n};\nstd::set<one>seg;\nint main()\n{\n    ll n=read(),pre=read(),cnt=1,ans=0;\n    if(n==1){puts(\"1\");return 0;}\n    for(ll i=2;i<=n;++i)\n    {\n        ll x=read();\n        if(x==pre)++cnt;\n        else\n        {\n            len.insert(pll(-cnt,i-cnt)),seg.insert(one{i-cnt,cnt,pre});\n            pre=x,cnt=1;\n        } \n    }\n    len.insert(pll(-cnt,n+1-cnt)),seg.insert(one{n+1-cnt,cnt,pre});\n    while(!len.empty())\n    {\n        ++ans;\n        ll l=len.begin()->first,pos=len.begin()->second;\n        auto place=seg.lower_bound(one{pos,0,0});\n        if(place!=seg.begin())\n        {\n        \tauto pre=--place,nxt=++(++place);\n\t        if(pre!=seg.end()&&nxt!=seg.end())\n\t        {\n\t            if(pre->num==nxt->num)\n\t            {\n\t                len.insert(pll(-pre->len-nxt->len,pre->pos));\n\t                len.erase(len.lower_bound(pll(-pre->len,pre->pos)));\n\t                len.erase(len.lower_bound(pll(-nxt->len,nxt->pos)));\n\t                seg.insert(one{pre->pos,pre->len+nxt->len,pre->num});\n\t                seg.erase(pre),seg.erase(nxt);\n\t            }\n\t        }\n\t\t}\n        len.erase(len.lower_bound(pll(l,pos)));\n        seg.erase(seg.lower_bound(one{pos,0,0}));\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}\n```",
        "postTime": 1585974848,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF899E \u3010Segments Removal\u3011"
    },
    {
        "content": "**\u6570\u7ec4\u94fe\u8868+\u4f18\u5148\u961f\u5217**\n\n\n\u7a81\u7136\u4e0d\u60f3\u5199\u9898\u4e86\uff0c\u4e0d\u5982\u6765\u6478\u9c7c\u5199\u9898\u89e3\u5427\u2014 \u2014\u3002\u8fd9\u4e2a\u9898\u662f\u5728\u5b66\u6821\u7684\u6691\u5047\u96c6\u8bad\u7684\u65f6\u5019\u9047\u5230\u7684\uff0c\u9898\u610f\u5927\u6982\u5c31\u662f\u8bf4\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u6b21\u9009\u62e9\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u51fa\u73b0\u8fde\u7eed\u6570\u5b57\u6700\u957f\u7684\u4e00\u6bb5\uff0c\u7136\u540e\u5c06\u8fd9\u6bb5\u5b50\u5e8f\u5217\u4ece\u539f\u5e8f\u5217\u4e2d\u5220\u53bb\uff0c\u5982\u679c\u6709\u591a\u4e2a\u5b50\u5e8f\u5217\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u4f18\u5148\u5220\u9664\u5b50\u5e8f\u5217\u4e2d\u9760\u8fd1\u539f\u5e8f\u5217\u5de6\u7aef\u7684(\u4e5f\u5c31\u662f\u5220\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u6700\u957f\u5b50\u5e8f\u5217)\u3002\n\n\u8fd9\u4e2a\u9898\u7684\u96be\u70b9\u5728\u4e8e\u4f60\u5220\u6389\u4e00\u4e2a\u5b50\u5e8f\u5217\u4e4b\u540e\uff0c\u53ef\u80fd\u8fd9\u4e2a\u5b50\u5e8f\u5217\u4e24\u8fb9\u7684\u4e24\u4e2a\u5e8f\u5217\u521a\u597d\u62e5\u6709\u76f8\u540c\u7684\u503c\uff0c\u90a3\u4e48\u5c31\u80fd\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u6bd4\u59821 1 2 2 3 3 3 3 2 2 \u3002\n\n\u5220\u96643 3 3 3\u4e4b\u540e\u5f97\u52301 1 2 2 2 2\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5fc5\u987b\u8981\u60f3\u529e\u6cd5\u7ef4\u62a4\u53ef\u80fd\u5f97\u5230\u7684\u65b0\u5e8f\u5217\u3002\u4e00\u4e2a\u6734\u7d20\u7684\u60f3\u6cd5\u5c31\u662f\u6211\u4eec\u5728\u8bfb\u5165\u7684\u65f6\u5019\u5c06\u5e8f\u5217\u538b\u7f29\uff0c\u6bd4\u59822 2 2 2\u538b\u7f29\u6210\u4e00\u4e2a\u503c\u4e3a2\uff0c\u5927\u5c0f\u4e3a4\u7684\u4e00\u4e2a\u6570\u636e\uff0c\u7136\u540e\u6bcf\u6b21\u90fd\u53bb\u627e\u6700\u957f\u7684\u5e8f\u5217\uff0c\u627e\u5230\u4e4b\u540e\u5220\u9664\u8fd9\u4e2a\u5e8f\u5217\u5e76\u4e14\u5c06\u4e24\u7aef\u7684\u5e8f\u5217\u8fde\u5728\u4e00\u8d77\u66f4\u65b0\u5c31\u884c\u4e86\u3002\u54e6\uff0chowever\uff0c\u8003\u8651\u6700\u574f\u7684\u60c5\u51b5\uff0c\u5047\u5982\u5e8f\u5217\u4e2d\u6240\u6709\u6570\u90fd\u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u6bcf\u6b21\u90fd\u53ea\u80fd\u5220\u4e00\u4e2a\u6570\uff0c\u590d\u6742\u5ea6\u8fd1\u4f3cO(n^2)\uff0c\u663e\u7136\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6T\u5230\u4e0d\u80fd\u518dT\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8be5\u600e\u4e48\u529e\u5462\u3002\u600e\u4e48\u529e\u5462\u3002\n\n\u8003\u8651\u4ee5\u4e0a\u505a\u6cd5\uff0c\u590d\u6742\u5ea6\u6700\u9ad8\u7684\u5730\u65b9\u5c31\u662f\u627e\u8981\u5220\u9664\u7684\u5e8f\u5217\uff0c\u90a3\u4e48\u6709\u4ec0\u4e48\u65b9\u6cd5\u4f7f\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u590d\u6742\u5ea6\u53d8\u6210O(logn)\u5462\uff1f\u663e\u7136\u662f\u5b58\u5728\u5f88\u591a\u65b9\u6cd5\u5b8c\u6210\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u8fd9\u91cc\u89e3\u51b3\u8fd9\u4e2a\u5730\u65b9\u9009\u62e9\u4e86\u4f18\u5148\u961f\u5217\u7684\u505a\u6cd5\uff0c\u4f18\u5148\u961f\u5217\u91cc\u9762\u7ef4\u62a4\u5e8f\u5217\u6700\u957f\u7684\u4f4d\u7f6e\u5c31\u884c\u4e86\uff0c\u7136\u540e\u6211\u4eec\u5c06\u5e8f\u5217\u538b\u7f29\uff0c\u7136\u540e\u7528\u94fe\u8868\u8fde\u5728\u4e00\u8d77\u5c31\u884c\u4e86\u3002\u5220\u9664\u64cd\u4f5c\u663e\u7136\u662fO(1)\u7684\uff0c\u800c\u67e5\u627e\u64cd\u4f5c\u662fO(logn)\u7684\u3002Therefore\uff0c\u6211\u4eec\u5c31\u6210\u529f\u628a\u6574\u4f53\u590d\u6742\u5ea6\u964d\u4f4e\u4e3aO(nlogn)\u3002\u4e0b\u9762\u7ed9\u51fa\u4ee3\u7801\u5b9e\u73b0\u3002\u8fd9\u4e2a\u505a\u6cd5\u53ef\u4ee5\u8bf4\u662f\u8dd1\u7684\u98de\u5feb\u3002\n\n```cpp\n//author Eterna\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<map>\n#include<set>\n#include<queue>\n#include<stack>\n#include<utility>\n#include<cmath>\n#include<climits>\n#include<deque>\n#include<functional>\n#include<complex>\n#define max(x,y) ((x)>(y)?(x):(y))\n#define min(x,y) ((x)<(y)?(x):(y))\n#define INF 0x7fffffff\n#define Pi acos(-1.0)\n#define maxn 200000\n#define eps 1e-15\n#define MOD ((ll)1000000007)\n#define ABS(x) ((x)>=0?(x):(-(x)))\n#define pb(x) push_back(x)\n#define lowbit(x) (x&-x)\n#define mid (L+R)/2\n#define Lson (index*2)\n#define Rson (index*2+1)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ninline int read_int() {\n\tchar c;\n\tint ret = 0, sgn = 1;\n\tdo { c = getchar(); } while ((c < '0' || c > '9') && c != '-');\n\tif (c == '-') sgn = -1; else ret = c - '0';\n\twhile ((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + (c - '0');\n\treturn sgn * ret;\n}\ninline ll read_ll() {\n\tchar c;\n\tll ret = 0, sgn = 1;\n\tdo { c = getchar(); } while ((c < '0' || c > '9') && c != '-');\n\tif (c == '-') sgn = -1; else ret = c - '0';\n\twhile ((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + (c - '0');\n\treturn sgn * ret;\n}\n//\u5feb\u8bfb\nstruct node {\n\tbool operator<(const node& rhs)const {\n\t\tif (number == rhs.number)return pos > rhs.pos;\n\t\treturn number < rhs.number;\n\t}\n\tnode() = default;\n\tnode(int n, int p) {\n\t\tnumber = n; pos = p;\n\t}\n\tint number = 0, pos = 0;\n};\n//\u5b9a\u4e49\u4f18\u5148\u961f\u5217\u4e2d\u7684\u8282\u70b9\nstruct seg {\n\tint value, number;\n};//\u538b\u7f29\u5e8f\u5217\nint n, _next[maxn + 5], last[maxn + 5], cnt, x, t, number_seg, ans;\nbool cant_visit[maxn + 5];//\u8bb0\u5f55\u4e0d\u80fd\u518d\u8bbf\u95ee\u7684\u8282\u70b9\nseg arr[maxn + 5];\npriority_queue<node> q;\nint main(void)\n{\n\tn = read_int(); x = read_int(); cnt = 1;\n\tfor (int i = 1; i != n; i++) {\n\t\tt = read_int(); if (t == x)cnt++;\n\t\telse {\n\t\t\tarr[++number_seg].number = cnt;\n\t\t\tarr[number_seg].value = x;\n\t\t\tx = t; cnt = 1;\n\t\t}\n\t}\n\tarr[++number_seg].number = cnt; arr[number_seg].value = x; cnt = 0;\n\tarr[number_seg + 1].value = -INF; arr[0].value = INF;//\u9632\u6b62\u5934\u5c3e\u5bf9\u94fe\u8868\u7684\u5f71\u54cd\n\tfor (int i = 1; i <= number_seg; i++) {\n\t\t_next[i] = i + 1; last[i] = i - 1;\n\t\tq.push(node(arr[i].number, i));\n\t}\n\twhile (cnt != n && !q.empty()) {\n\t\tnode sb = q.top(); q.pop();\n\t\tif (cant_visit[sb.pos])continue;\n\t\tans++; cnt += arr[sb.pos].number;\n\t\tcant_visit[sb.pos] = true;\n\t\tint _Next = _next[sb.pos], _Last = last[sb.pos];\n\t\tif (arr[_Next].value == arr[_Last].value) {//\u5904\u7406\u5220\u6389\u533a\u95f4\u4e4b\u540e\u8fde\u5728\u4e00\u8d77\u7684\u60c5\u51b5\n\t\t\tarr[_Last].number += arr[_Next].number;\n\t\t\tcant_visit[_Next] = true;\n\t\t\tq.push(node(arr[_Last].number, _Last));\n\t\t\t_Next = _next[_Next];\n\t\t\tlast[_Next] = _Last;\n\t\t\t_next[_Last] = _Next;\n\t\t}\n\t\telse {\n\t\t\tlast[_Next] = _Last;\n\t\t\t_next[_Last] = _Next;\n\t\t}\n\t}\n\tcout << ans << endl;\n\t//system(\"pause\");\n\treturn 0;\n}\n```\n",
        "postTime": 1532769132,
        "uid": 106178,
        "name": "Forsaken2020",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF899E \u3010Segments Removal\u3011"
    },
    {
        "content": "\u770b\u5b8c\u9898\u540e\uff0c\u53ef\u4ee5\u5f88\u5feb\u60f3\u5230\uff0c\u7c7b\u4f3c\u4e8e [\u5c0f\u718a\u7684\u679c\u7bee](https://www.luogu.com.cn/problem/P7912)\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 **\u4f18\u5148\u961f\u5217 + \u94fe\u8868** \u5b8c\u6210\u8fd9\u9053\u9898\u76ee\u3002\n\n\u9996\u5148\u6211\u4eec\u9884\u5904\u7406\u51fa\u5e8f\u5217\u91cc\u7684\u6bcf\u4e00\u4e2a\u201c\u5757\u201d\uff0c\u5e76\u4f7f\u7528\u94fe\u8868\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u201c\u5757\u201d\u7684\u5982\u4e0b\u4fe1\u606f\uff1a\n\n* **\u957f\u5ea6**\uff0c\u5373\u8fd9\u4e00\u6bb5\u8fde\u7eed\u76f8\u540c\u6570\u5b57\u7684\u4e2a\u6570\uff1b\n* **\u6570\u503c**\uff0c\u5373\u8fd9\u4e00\u4e2a\u201c\u5757\u201d\u4e2d\u5168\u90e8\u90fd\u662f\u8fd9\u4e2a\u6570\uff1b\n* **\u8d77\u59cb\u4f4d\u7f6e**\uff0c\u4e3a\u4e86\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u5148\u5220\u9760\u524d\u7684\u201c\u5757\u201d\u8fd9\u4e2a\u8981\u6c42\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7528\u4e00\u4e2a **\u5927\u6839\u5806** \u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5757\uff0c\u4ee5 **\u957f\u5ea6** \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c**\u8d77\u59cb\u4f4d\u7f6e** \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\n\n\u6bcf\u6b21\u53d6\u51fa\u5806\u9876\u7684\u4e00\u4e2a\u201c\u5757\u201d\u5e76\u5c06\u5176\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u3002\u82e5\u5220\u9664\u540e\uff0c\u539f\u6765\u4e0e\u8be5\u201c\u5757\u201d\u76f8\u90bb\u7684\u4e24\u4e2a\u201c\u5757\u201d **\u6570\u503c** \u76f8\u540c\uff0c\u5219\u5728\u94fe\u8868\u4e2d\u5c06\u540e\u9762\u7684\u90a3\u4e2a\u201c\u5757\u201d\u5408\u5e76\u5230\u524d\u9762\u7684\u90a3\u4e2a\u201c\u5757\u201d\u4e2d\uff0c\u5e76\u5c06\u66f4\u65b0\u540e\u7684\u524d\u9762\u90a3\u4e2a\u201c\u5757\u201d\u91cd\u65b0\u5165\u961f\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u6d89\u53ca\u5230\u5220\u9664\u201c\u5757\u201d\u4e0e\u5408\u5e76\u201c\u5757\u201d\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u6807\u8bb0\u4e00\u4e2a\u201c\u5757\u201d\u662f\u5426\u88ab\u5220\u9664\u3002\n\n**\u6700\u540e\u201c\u53d6\u51fa\u5806\u9876\u201d\u64cd\u4f5c\u8fdb\u884c\u7684\u6b21\u6570\u5373\u4e3a\u7b54\u6848\u3002**\n\n***\n\n\n```cpp\n#include<bits/stdc++.h>\nnamespace List{\n#define int long long\n#define nex(x) link[x][ne]\n#define pre(x) link[x][pr]\nconst int maxn=2e5+5;\ntemplate<class T>class list{\n\tprivate:\n\t\tT a[maxn];\n\t\tbool ne,pr;\n\t\tint tot,h,t,siz;\n\t\tint link[maxn][2];\n\t\tinline void swap(T&x,T&y){ T t=y; y=x; x=t; return; }\n\tpublic:\n\t\tlist(void){ link[h=0][ne=0]=1;\n\t\t\tlink[t=1][pr=1]=0; tot=1; }\n\t\tinline void clear(void){\n\t\t\tlink[h=0][ne=0]=1;\n\t\t\tlink[t=1][pr=1]=0;\n\t\t\ttot=1; return;\n\t\t}\n\t\tinline int AddAfter(int k,T x){\n\t\t\tnex(++tot)=nex(k); nex(k)=tot;\n\t\t\tpre(tot)=k; pre(nex(tot))=tot;\n\t\t\ta[tot]=x; ++siz;\n\t\t\treturn tot; \n\t\t}\n\t\tinline int AddBefore(int k,T x){\n\t\t\tpre(++tot)=pre(k); pre(k)=tot;\n\t\t\tnex(tot)=k; nex(pre(tot))=tot;\n\t\t\ta[tot]=x; ++siz;\n\t\t\treturn tot;\n\t\t}\n\t\tinline int AddatHead(T x){ return AddAfter(h,x); }\n\t\tinline int AddatTail(T x){ return AddBefore(t,x); }\n\t\tinline void Delete(int k){\n\t\t\tnex(pre(k))=nex(k); pre(nex(k))=pre(k); --siz;\n\t\t\treturn;\n\t\t}\n\t\tinline void DeleteAfter(int k){ Delete(nex(k)); }\n\t\tinline void DeleteBefore(int k){ Delete(pre(k)); }\n\t\tinline void DeleteatHead(void){ Delete(nex(h)); }\n\t\tinline void DeleteatTail(void){ Delete(pre(t)); }\n\t\tinline int GetHead(void){\n\t\t\tif(pr) return nex(h);\n\t\t\treturn nex(t);\n\t\t}\n\t\tinline int GetSize(void){ return siz; }\n\t\tinline bool Empty(void){ return !siz; }\n\t\tinline int GetTail(void){\n\t\t\tif(pr) return t;\n\t\t\treturn h;\n\t\t}\n\t\tinline int GetBack(void){\n\t\t\tif(pr)  return pre(t); \n\t\t\treturn pre(h);\n\t\t}\n\t\tinline int GetPrev(int k){ return pre(k); }\n\t\tinline int GetNext(int k){ return nex(k); }\n\t\tinline T& GetValue(int k){ return a[k]; }\n\t\tinline void Swap(int x,int y){\n\t\t\tswap(a[x],a[y]); return;\n\t\t}\n\t\tinline void Reverse(void){ pr^=1; ne^=1; return; }\n\t\tinline void MakeLoop(void){\n\t\t\tnex(pre(t))=nex(h);\n\t\t\tpre(nex(h))=pre(t);\n\t\t\treturn;\n\t\t}\n};\n#undef int\n#undef nex\n#undef pre\n} // namespace List\nnamespace XSC062{\n#define int long long\nusing namespace List;\nconst int inf=1e18;\nconst int maxn=2e5+5;\nstruct _{\n\tint u,d,i; _(){}\n\t_(int U,int D,int I){ u=U; d=D; i=I; }\n};\nstruct __{\n\tint u,d,i,m; __(){}\n\t__(int U,int D,int I,int M){ u=U; d=D; i=I; m=M; }\n\tbool operator<(const __ q)const{\n\t\treturn d==q.d?i>q.i:d<q.d;\n\t}\n};\ninline void read(int&x){\n\tx=0; bool f=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-') f=1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\tif(f) x=-x; return;\n}\nlist<_>li;\nint a[maxn];\nbool vis[maxn];\nint n,ans,f,l,r;\nstd::priority_queue<__>q;\nint main(){\n\tread(n); a[0]=inf;\n\tfor(int i=1;i<=n;++i){\n\t\tread(a[i]);\n\t\tif(a[i]!=a[i-1])\n\t\t\tli.AddatTail(_(0,a[i],i));\n\t\t++li.GetValue(li.GetBack()).u;\n\t}\n\tfor(int i=li.GetHead();i!=li.GetTail();i=li.GetNext(i))\n\t\tq.push(__(i,li.GetValue(i).u,li.GetValue(i).i,\n\t\tli.GetValue(i).d));\n\twhile(!q.empty()){\n\t\tint f=q.top().u, t=q.top().i; q.pop();\n\t\tif(vis[f]) continue; vis[f]=1; ++ans;\n//\t\tprintf(\"%lld: %lld, %lld\\n\",f,li.GetValue(f).d,t);\n\t\tl=li.GetPrev(f); r=li.GetNext(f);\n\t\tif(f==li.GetHead()||f==li.GetBack()){\n\t\t\tli.Delete(f);\n\t\t\tcontinue;\n\t\t}\n\t\tli.Delete(f);\n\t\tif(li.GetValue(l).d==li.GetValue(r).d){\n\t\t\tli.GetValue(l).u+=li.GetValue(r).u;\n\t\t\tli.Delete(r); vis[r]=1;\n\t\t\tq.push(__(l,li.GetValue(l).u,t,li.GetValue(l).d));\n\t\t}\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n#undef int\n} // namespace XSC062\nint main(){ XSC062::main(); return 0; }\n```",
        "postTime": 1641630328,
        "uid": 245052,
        "name": "ollll62",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF899E Segments Removal"
    },
    {
        "content": "\u8fd9\u662f\u6211\u4eec\u8003\u8bd5\u9898\uff0c\u6211\u505a\u4e86 $75$ \u5206\uff0c\u6700\u540e\u624d\u53d1\u73b0\u662f\u5143\u7d20\u5165\u961f\u7684\u65f6\u5019\u6ca1\u6709\u8d4b\u503c\u2026\u2026\n\n***\n\n### Problem\n\n> \u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6574\u6570\u6570\u7ec4\uff0c\u5bf9\u6570\u7ec4\u6267\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\u3002\u6bcf\u4e00\u6b21\u627e\u5230\u8fde\u7eed\u76f8\u7b49\u6574\u6570\u7684\u6700\u957f\u6bb5\uff08\u5982\u679c\u6709\u591a\u4e2a\u6bb5\u957f\u5ea6\u76f8\u540c\uff0c\u9009\u62e9\u6700\u9760\u5de6\u8fb9\u7684\u6bb5\uff09\u5e76\u5220\u9664\u5b83\u3002\u8981\u6c42\u8ba1\u7b97\u7ecf\u8fc7\u591a\u5c11\u6b21\u64cd\u4f5c\u540e\u6570\u7ec4\u4e3a\u7a7a\u3002\n\n***\n\n### Solution\n\n\u56e0\u4e3a\u524d\u4e24\u5929\u624d\u8c03\u5b8c[\u5c0f\u718a\u7684\u679c\u7bee](https://www.luogu.com.cn/problem/P7912)\uff0c\u8bb0\u5fc6\u72b9\u65b0\uff0c\u6240\u4ee5\u7acb\u523b\u60f3\u5230\u4e86**\u961f\u5217+\u94fe\u8868**\u7684\u505a\u6cd5\u3002\u7136\u540e\u518d\u8bfb\u9898\uff0c\u53d1\u73b0\u9700\u8981\u627e\u957f\u5ea6\u6700\u957f\u7684\u533a\u95f4\uff0c\u4e0d\u80fd\u7528\u666e\u901a\u961f\u5217\uff0c\u8981\u7528**\u4f18\u5148\u961f\u5217**\u3002\n\n\u6211\u4eec\u5148\u628a\u6240\u6709\u7684\u533a\u95f4\u90fd\u627e\u51fa\u6765\uff0c\u5b58\u50a8\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u957f\u5ea6\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u7b97\u51fa\u53f3\u7aef\u70b9\u4e86\uff09\u548c\u8fd9\u4e2a\u533a\u95f4\u6570\u5b57\u7684\u503c\u3002\u7136\u540e\u628a\u8fd9\u4e9b\u533a\u95f4\u5168\u90e8\u6309\u7167\u987a\u5e8f\u5f04\u5230\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u91cc\u9762\uff0c\u5e76\u628a\u9700\u8981\u7684\u503c\u52a0\u5165\u4f18\u5148\u961f\u5217\u3002\n\n\u8be6\u7ec6\u7684\u8bb2\u89e3\u5728\u4ee3\u7801\u6ce8\u91ca\u91cc\u3002\n\n```cpp\n// \u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u9700\u8981\u5b58\u533a\u95f4\u5de6\u7aef\u70b9\uff0c\u533a\u95f4\u957f\u5ea6\u548c\u5b83\u5728\u94fe\u8868\u91cc\u7684\u4e0b\u6807\nstruct node { int l, len, id; };\nstd::priority_queue<node> q;\n// \u5b9a\u4e49\u6392\u5e8f\u89c4\u5219\uff1a\u533a\u95f4\u957f\u5ea6\uff0c\u4e00\u6837\u65f6\u5de6\u8fb9\u4f18\u5148\nbool operator<(node x, node y) { return (x.len != y.len) ? (x.len < y.len) : (x.id > y.id); }\n\n// lst \u4e3a\u4e0a\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u8ba1\u7b97\u533a\u95f4\u957f\u5ea6\uff0c\u6240\u4ee5\u9700\u8981\u7528\u8fd9\u4e2a\u533a\u95f4\u548c\u4e0a\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u7b97\u4e0a\u4e00\u4e2a\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u9700\u8981\u5b58\u4e00\u4e0b\nint ans = 0, lst = 0; \na[0] = a[n + 1] = -1; // \u7279\u6b8a\u5904\u7406\u5934\u5c3e\u7aef\u70b9\uff0c\u4ee5\u514d\u9519\u8bef\u5408\u5e76\nrep(i, 1, n) {\n\tif(a[i] != a[i - 1]) { // \u8bf4\u660e\u8fd9\u4e2a\u6570\u662f\u4e00\u4e2a\u533a\u95f4\u7684\u5f00\u5934\n\t\tnum[++k] = a[i];\n\t\tl[k] = k - 1; // \u521d\u59cb\u5316\u94fe\u8868\n\t\tr[k] = k + 1;\n\t\tif(k != 1) { // \u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u6709\u4e0a\u4e00\u4e2a\uff0c\u5373\u4e0d\u662f\u7b2c\u4e00\u4e2a\n\t\t\tq.push(node({lst, i - lst, k - 1})); // \u5143\u7d20\u5165\u961f\n\t\t\tL[k - 1] = lst, LEN[k - 1] = i - lst; // \u8bb0\u5f55\u533a\u95f4\u5de6\u7aef\u70b9\u548c\u957f\u5ea6\n\t\t}\n\t\tlst = i; // \u66f4\u65b0\u4e0a\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\n\t}\n}\nq.push(node({lst, n - lst + 1, k})); // \u6700\u540e\u4e00\u4e2a\u533a\u95f4\u4e5f\u9700\u8981\u5904\u7406\nL[k] = lst, LEN[k] = n - lst + 1;\nr[0] = 1, l[k + 1] = k; // \u94fe\u8868\u7684\u521d\u59cb\u5316\n```\n\n\u63a5\u7740\u5c31\u662f\u6838\u5fc3\u4ee3\u7801\u4e86\u3002\n\n\u6211\u4eec\u7528\u4e00\u4e2a `bool` \u6570\u7ec4\u6807\u8bb0\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u88ab\u53d6\u8fc7\uff0c\u7136\u540e\u4ece\u961f\u5217\u91cc\u9762\u4e0d\u505c\u53d6\u5143\u7d20\u3002\n\n- \u82e5\u6b64\u533a\u95f4\u5df2\u7ecf\u88ab\u6807\u8bb0\u8fc7\u4e86\u5c31\u76f4\u63a5\u8df3\u8fc7\u3002\n- \u82e5\u6b64\u533a\u95f4\u6ca1\u6709\u88ab\u53d6\u8fc7\uff0c\u5c31\u6807\u8bb0\u4e00\u4e0b\u8fd9\u4e2a\u533a\u95f4\uff0c\u6b64\u65f6\u53c8\u53d6\u4e86\u4e00\u4e2a\u533a\u95f4\uff0c\u7b54\u6848\u9700\u8981 $+1$\uff0c\u7136\u540e\u68c0\u67e5\u4e00\u4e0b\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u533a\u95f4\u662f\u5426\u9700\u8981\u88ab\u5408\u5e76\uff1b\u5982\u679c\u9700\u8981\uff0c\u5c31\u628a\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u5230\u5b83\u5de6\u8fb9\u90a3\u4e2a\u533a\u95f4\uff0c\u5e76\u6807\u8bb0\u5b83\u53f3\u8fb9\u90a3\u4e2a\u533a\u95f4\u3002\n\n\u8fd9\u53e5\u8bdd\u4fe1\u606f\u91cf\u6709\u70b9\u5927\uff0c\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\n\n\u8bf4\u660e\u6211\u4eec\u62ff\u5230\u4e00\u4e2a\u6ca1\u88ab\u53d6\u8fc7\u7684\u533a\u95f4\u65f6\uff0c\u9700\u8981\u505a\u8fd9\u51e0\u4ef6\u4e8b\uff1a\n\n1. \u628a\u8fd9\u4e2a\u533a\u95f4\u6807\u8bb0\u4e3a\u201c\u5df2\u7ecf\u88ab\u53d6\u8fc7\u201d\u3002\n1. \u56e0\u4e3a\u53c8\u53d6\u4e86\u4e00\u4e2a\u533a\u95f4\uff0c\u6240\u4ee5\u7b54\u6848\u8981 $+1$\u3002\n1. \u628a\u8fd9\u4e2a\u533a\u95f4\u4ece\u94fe\u8868\u91cc\u5220\u6389\u3002\n1. \u68c0\u67e5\u8fd9\u4e2a\u88ab\u5220\u9664\u7684\u533a\u95f4\u7684\u5de6\u8fb9\u7684\u533a\u95f4\uff08\u547d\u540d\u4e3a $l$\uff09\u548c\u5b83\u53f3\u8fb9\u7684\u533a\u95f4\uff08\u547d\u540d\u4e3a $r$\uff09\u662f\u5426\u9700\u8981\u88ab\u5408\u5e76\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e24\u4e2a\u533a\u95f4\u7684\u503c\u662f\u4e0d\u662f\u4e00\u6837\u7684\uff0c\u5982\u679c\u662f\u4e00\u6837\u7684\uff0c\u90a3\u8fd9\u4e2a\u533a\u95f4\u88ab\u53d6\u4e86\u4e4b\u540e\uff0c$l$ \u548c $r$ \u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u533a\u95f4\uff0c\u6240\u4ee5\u9700\u8981\u88ab\u5408\u5e76\u3002\n1. \u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u628a $l$ \u7684\u957f\u5ea6\u6539\u4e3a\u4e24\u4e2a\u533a\u95f4\u7684\u957f\u5ea6\u76f8\u52a0\uff0c\u7136\u540e\u628a $r$ \u5220\u6389\u3002\u9700\u8981\u6ce8\u610f $r$ \u4e5f\u8981\u88ab\u6807\u8bb0\u3002\n1. \u628a\u66f4\u65b0\u7684 $l$ \u52a0\u5165\u961f\u5217\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u6709\u5c0f\u670b\u53cb\u95ee\u4e86\uff1a\u6b64\u65f6\u961f\u5217\u91cc\u8fd8\u6709\u539f\u6765\u7684 $l$\uff0c\u662f\u4e0d\u662f\u9700\u8981\u5220\u6389\uff1f\n\n\u7b54\u6848\u662f\u4e0d\u9700\u8981\u3002\u56e0\u4e3a\u4f18\u5148\u961f\u5217\u7684\u6392\u5e8f\u89c4\u5219\u662f\u6309\u7167\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u7684\uff0c\u6240\u4ee5\u66f4\u65b0\u540e\u7684 $l$ \u4e00\u5b9a\u4f1a\u6bd4\u539f\u6765\u7684 $l$ \u5148\u53d6\u51fa\uff0c\u53d6\u51fa\u4e4b\u540e\u6211\u4eec\u5c31\u6807\u8bb0\u4e86 $l$\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u91cd\u590d\u53d6\u5230\u4e86\u3002\n\n\u7ed9\u4e00\u4e0b\u4ee3\u7801\u3002\n\n```cpp\ninline void remove(int x) {\n\tid_use[x] = 1; // \u5b9e\u73b0\u65f6\u53ef\u4ee5\u628a\u6807\u8bb0\u7684\u4ee3\u7801\u653e\u5728\u5220\u9664\u7684\u51fd\u6570\u91cc\u9762\n\tr[l[x]] = r[x];\n\tl[r[x]] = l[x];\n\treturn;\n}\n\nwhile(!q.empty()) {\n\twhile(!q.empty() && id_use[q.top().id]) // \u8fc7\u6ee4\u6389\u5df2\u7ecf\u88ab\u6807\u8bb0\u8fc7\u7684\u70b9\n\t\tq.pop();\n\tif(q.empty()) // \u5982\u679c\u961f\u5217\u88ab\u53d6\u7a7a\u4e86\u5c31\u76f4\u63a5\u8df3\u8fc7\n\t\tbreak;\n\tnode u = q.top();\n\tq.pop();\n\t++ans; // \u66f4\u65b0\u7b54\u6848\n\tif(num[r[u.id]] == num[l[u.id]]) { // \u5982\u679c l \u548c r \u9700\u8981\u88ab\u5408\u5e76\n\t\tLEN[l[u.id]] += LEN[r[u.id]]; // \u8d4b\u503c\uff0c\u6ce8\u610f\u8fd9\u91cc\u4e0d\u5199\u53ea\u80fd\u5f97 75 \u5206\n\t\tq.push(node({L[l[u.id]], LEN[l[u.id]], l[u.id]})); // l \u5165\u961f\n\t\tremove(r[u.id]); // \u5220\u9664 r\n\t}\n\tremove(u.id); // \u628a\u8fd9\u4e2a\u533a\u95f4\u5220\u9664\n}\nwrite(ans - 1); // \u8fd9\u91cc -1 \u662f\u56e0\u4e3a\u5934\u548c\u5c3e\u4f1a\u88ab\u9519\u8bef\u5408\u5e76\uff0c\u6240\u4ee5\u4f1a\u591a\u4e00\u6b21\n```\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u4e86\u5427\u3002\u56e0\u4e3a\u6838\u5fc3\u4ee3\u7801\u5df2\u7ecf\u7ed9\u51fa\uff0c\u6240\u4ee5\u4e0d\u518d\u7ed9\u5b8c\u6574\u4ee3\u7801\u4e86\u3002\n\n~~\u53e6\u5916\u5c31\u662f\u795d\u8d3a\u4e00\u4e0b ljt \u8003\u8bd5\u7684\u65f6\u5019\u7ec8\u4e8e\u6ca1\u6709\u5199\u6302\u5feb\u8bfb\u5feb\u5199\u4e86\u3002~~",
        "postTime": 1641621895,
        "uid": 482058,
        "name": "Liynw",
        "ccfLevel": 5,
        "title": "CF899E Segments Removal"
    },
    {
        "content": "\u56e0\u4e3a\u662f\u5220\u9664\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u6211\u4eec\u4e0d\u59a8\u5c31**\u628a\u4fe1\u606f\u90fd\u653e\u5728\u6bcf\u4e00\u8fde\u7eed\u6bb5\u7684\u5de6\u7aef\u70b9**\u3002\n\n\u201c\u5220\u9664\u67d0\u4e00\u6bb5\u957f\u5ea6\u201d\u5c31\u53ef\u4ee5\u60f3\u6210\uff1a \u201c\u5220\u9664\u8fd9\u4e00\u6bb5\u7684\u5de6\u7aef\u70b9\u201d\uff0c\u800c\u5220\u9664\u8282\u70b9\u53c8\u53ef\u8054\u60f3\u5230**\u94fe\u8868**\u3002\n\n\u5728\u5220\u9664\u67d0\u4e00\u6bb5\u7684\u65f6\u5019\uff0c\u5982\u679c\u5de6\u53f3\u6570\u5b57\u76f8\u7b49\uff0c\u5c31\u9700\u8981\u6539\u53d8\u5de6\u53f3\u4e24\u8fb9\u6bb5\u7684\u957f\u5ea6\uff0c\u53ef\u4ee5\u7406\u89e3\u6210**\u201c\u5408\u5e76\u201d**\u3002\u5177\u4f53\u505a\u6cd5\u53ef\u4ee5 **\u201c\u5220\u9664\u201d\u53f3\u8fb9\u6bb5\uff08\u8fd9\u91cc\u4e0d\u662f\u9898\u76ee\u63cf\u8ff0\u4e2d\u7684\u5220\u9664\uff01\u53ea\u662f\u5c06\u5b83\u7684\u4fe1\u606f\u7ed9\u5de6\u6bb5\uff09\uff0c\u5e76\u66f4\u65b0\u5de6\u8fb9\u6bb5\u957f\u5ea6**\u3002\n\n\u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\uff0c\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u53ef\u4ee5\u60f3\u5230**\u4f18\u5148\u961f\u5217**\u3002**\u66f4\u65b0\u5de6\u6bb5\u957f\u5ea6**\u7684\u65f6\u5019\u5c31\u8981\u5f80\u4f18\u5148\u961f\u5217\u91cc\u6dfb\u52a0\u5143\u7d20\u3002**\u5220\u9664\u53f3\u6bb5**\u7684\u65f6\u5019\u4e0d\u7528\u5728\u4f18\u5148\u961f\u5217\u91cc\u5b9e\u9645\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u7528\u4e00\u4e2a\u6570\u7ec4\u6807\u8bb0\u4e00\u4e0b\u8fd9\u4e2a\u5757\u662f\u5426\u88ab\u5220\u9664\u3002\u6bcf\u6b21\u8fdb\u884c\u9898\u76ee\u91cc\u771f\u6b63\u7684\u7684\u5220\u9664\u64cd\u4f5c\u65f6\uff0c\u5c31\u53bb\u4f18\u5148\u961f\u5217\u7684\u961f\u9996\u5143\u7d20\u5373\u53ef\u3002\n\nCode:\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n, a[200005];\nbool flag[200005];//\u662f\u5426\u88ab\u5220\u9664\nstruct h {\n\tint id, num;\n};\nstruct hh {//\u94fe\u8868\u53ea\u5b58\u6bcf\u4e2a\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e \n\tint l, r, e;//e:\u5757\u7684\u957f\u5ea6 \n}b[200005];\nbool operator<(const h &x, const h &y) {\n\tif (x.num < y.num)\treturn true;\n\tif (x.num > y.num)\treturn false;\n\treturn x.id > y.id;\n}\npriority_queue<h> q;\nint main () {\n\tscanf (\"%d\", &n);\n\tfor (int i = 1; i <= n; i++)\tscanf (\"%d\", &a[i]);\n\tint last = -1;\n\tfor (int i = 1; i <= n; i++) {\n\t\tflag[i] = true;\n\t\tint j = i;\n\t\twhile (j <= n && a[j] == a[i])\tj++;\n\t\tj--;\n\t\th t;\n\t\tt.id = i, t.num = j - i + 1;\n\t\tq.push(t);\n\t\tb[i].e = j - i + 1, b[i].l = last;\n\t\tif (last != -1)\tb[last].r = i;\n\t\tlast = i;\n\t\ti = j;\n\t}\n\tb[last].r = -1;\n\tint ans = 0;\n\twhile (!q.empty()) {\n\t\th t = q.top();\n\t\tq.pop();\n\t\tif (!flag[t.id] || t.num != b[t.id].e)\tcontinue;//\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u4e0d\u518d\u662f\u8d77\u70b9\u6216\u5df2\u7ecf\u88ab\u5220\u9664\u6216\u5df2\u7ecf\u88ab\u66f4\u65b0 \n\t\tans++;\n\t\tint k = t.id;\n\t\tb[b[k].l].r = b[k].r;\n\t\tb[b[k].r].l = b[k].l;\n\t\tflag[k] = false;\n\t\tif (a[b[k].l] == a[b[k].r])\t{//\u4e24\u4e2a\u5757\u5408\u5e76\uff08\u5220\u9664\u53f3\u8282\u70b9\uff09 \n\t\t\tflag[b[k].r] = false;\n\t\t\tb[b[k].l].e += b[b[k].r].e;\n\t\t\tint L = b[k].r;\n\t\t\tb[b[L].l].r = b[L].r;\n\t\t\tb[b[L].r].l = b[L].l;\n\t\t\th t2;\n\t\t\tt2.id = b[k].l;\n\t\t\tt2.num = b[b[k].l].e;\n\t\t\tq.push(t2);\n\t\t}\n\t}\n\tprintf (\"%d\", ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1641621009,
        "uid": 488090,
        "name": "bwartist",
        "ccfLevel": 0,
        "title": "CF899E Segments Removal \u9898\u89e3"
    }
]